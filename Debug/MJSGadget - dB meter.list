
MJSGadget - dB meter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0002a578  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00004868  0802a638  0802a638  0002b638  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0802eea0  0802eea0  0003043c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0802eea0  0802eea0  0002fea0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0802eea8  0802eea8  0003043c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0802eea8  0802eea8  0002fea8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0802eeac  0802eeac  0002feac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000043c  20000000  0802eeb0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000034e0  2000043c  0802f2ec  0003043c  2**2
                  ALLOC
 10 ._user_heap_stack 00000504  2000391c  0802f2ec  0003091c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0003043c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00036f30  00000000  00000000  00030464  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00009e7b  00000000  00000000  00067394  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002dc8  00000000  00000000  00071210  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00002224  00000000  00000000  00073fd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024657  00000000  00000000  000761fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00046a24  00000000  00000000  0009a853  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a35d4  00000000  00000000  000e1277  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000b1  00000000  00000000  0018484b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000bbfc  00000000  00000000  001848fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  001904f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loc    0000257c  00000000  00000000  00190565  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_ranges 00000088  00000000  00000000  00192ae1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000043c 	.word	0x2000043c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0802a620 	.word	0x0802a620

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000440 	.word	0x20000440
 8000104:	0802a620 	.word	0x0802a620

08000108 <arm_bitreversal_32>:
 8000108:	1c4b      	adds	r3, r1, #1
 800010a:	b470      	push	{r4, r5, r6}
 800010c:	1c11      	adds	r1, r2, #0
 800010e:	085b      	lsrs	r3, r3, #1

08000110 <arm_bitreversal_32_0>:
 8000110:	884a      	ldrh	r2, [r1, #2]
 8000112:	880e      	ldrh	r6, [r1, #0]
 8000114:	4402      	add	r2, r0
 8000116:	4406      	add	r6, r0
 8000118:	6815      	ldr	r5, [r2, #0]
 800011a:	6834      	ldr	r4, [r6, #0]
 800011c:	6035      	str	r5, [r6, #0]
 800011e:	6014      	str	r4, [r2, #0]
 8000120:	6855      	ldr	r5, [r2, #4]
 8000122:	6874      	ldr	r4, [r6, #4]
 8000124:	6075      	str	r5, [r6, #4]
 8000126:	6054      	str	r4, [r2, #4]
 8000128:	3104      	adds	r1, #4
 800012a:	3b01      	subs	r3, #1
 800012c:	d1f0      	bne.n	8000110 <arm_bitreversal_32_0>
 800012e:	bc70      	pop	{r4, r5, r6}
 8000130:	4770      	bx	lr

08000132 <arm_bitreversal_16>:
 8000132:	1c4b      	adds	r3, r1, #1
 8000134:	b470      	push	{r4, r5, r6}
 8000136:	1c11      	adds	r1, r2, #0
 8000138:	085b      	lsrs	r3, r3, #1

0800013a <arm_bitreversal_16_0>:
 800013a:	884a      	ldrh	r2, [r1, #2]
 800013c:	880e      	ldrh	r6, [r1, #0]
 800013e:	0852      	lsrs	r2, r2, #1
 8000140:	0876      	lsrs	r6, r6, #1
 8000142:	4402      	add	r2, r0
 8000144:	4406      	add	r6, r0
 8000146:	6815      	ldr	r5, [r2, #0]
 8000148:	6834      	ldr	r4, [r6, #0]
 800014a:	6035      	str	r5, [r6, #0]
 800014c:	6014      	str	r4, [r2, #0]
 800014e:	3104      	adds	r1, #4
 8000150:	3b01      	subs	r3, #1
 8000152:	d1f2      	bne.n	800013a <arm_bitreversal_16_0>
 8000154:	bc70      	pop	{r4, r5, r6}
 8000156:	4770      	bx	lr

08000158 <strcmp>:
 8000158:	7802      	ldrb	r2, [r0, #0]
 800015a:	780b      	ldrb	r3, [r1, #0]
 800015c:	2a00      	cmp	r2, #0
 800015e:	d003      	beq.n	8000168 <strcmp+0x10>
 8000160:	3001      	adds	r0, #1
 8000162:	3101      	adds	r1, #1
 8000164:	429a      	cmp	r2, r3
 8000166:	d0f7      	beq.n	8000158 <strcmp>
 8000168:	1ad0      	subs	r0, r2, r3
 800016a:	4770      	bx	lr

0800016c <strlen>:
 800016c:	2300      	movs	r3, #0
 800016e:	5cc2      	ldrb	r2, [r0, r3]
 8000170:	3301      	adds	r3, #1
 8000172:	2a00      	cmp	r2, #0
 8000174:	d1fb      	bne.n	800016e <strlen+0x2>
 8000176:	1e58      	subs	r0, r3, #1
 8000178:	4770      	bx	lr
	...

0800017c <__gnu_thumb1_case_uqi>:
 800017c:	b402      	push	{r1}
 800017e:	4671      	mov	r1, lr
 8000180:	0849      	lsrs	r1, r1, #1
 8000182:	0049      	lsls	r1, r1, #1
 8000184:	5c09      	ldrb	r1, [r1, r0]
 8000186:	0049      	lsls	r1, r1, #1
 8000188:	448e      	add	lr, r1
 800018a:	bc02      	pop	{r1}
 800018c:	4770      	bx	lr
 800018e:	46c0      	nop			@ (mov r8, r8)

08000190 <__gnu_thumb1_case_shi>:
 8000190:	b403      	push	{r0, r1}
 8000192:	4671      	mov	r1, lr
 8000194:	0849      	lsrs	r1, r1, #1
 8000196:	0040      	lsls	r0, r0, #1
 8000198:	0049      	lsls	r1, r1, #1
 800019a:	5e09      	ldrsh	r1, [r1, r0]
 800019c:	0049      	lsls	r1, r1, #1
 800019e:	448e      	add	lr, r1
 80001a0:	bc03      	pop	{r0, r1}
 80001a2:	4770      	bx	lr

080001a4 <__udivsi3>:
 80001a4:	2200      	movs	r2, #0
 80001a6:	0843      	lsrs	r3, r0, #1
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d374      	bcc.n	8000296 <__udivsi3+0xf2>
 80001ac:	0903      	lsrs	r3, r0, #4
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d35f      	bcc.n	8000272 <__udivsi3+0xce>
 80001b2:	0a03      	lsrs	r3, r0, #8
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d344      	bcc.n	8000242 <__udivsi3+0x9e>
 80001b8:	0b03      	lsrs	r3, r0, #12
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d328      	bcc.n	8000210 <__udivsi3+0x6c>
 80001be:	0c03      	lsrs	r3, r0, #16
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d30d      	bcc.n	80001e0 <__udivsi3+0x3c>
 80001c4:	22ff      	movs	r2, #255	@ 0xff
 80001c6:	0209      	lsls	r1, r1, #8
 80001c8:	ba12      	rev	r2, r2
 80001ca:	0c03      	lsrs	r3, r0, #16
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d302      	bcc.n	80001d6 <__udivsi3+0x32>
 80001d0:	1212      	asrs	r2, r2, #8
 80001d2:	0209      	lsls	r1, r1, #8
 80001d4:	d065      	beq.n	80002a2 <__udivsi3+0xfe>
 80001d6:	0b03      	lsrs	r3, r0, #12
 80001d8:	428b      	cmp	r3, r1
 80001da:	d319      	bcc.n	8000210 <__udivsi3+0x6c>
 80001dc:	e000      	b.n	80001e0 <__udivsi3+0x3c>
 80001de:	0a09      	lsrs	r1, r1, #8
 80001e0:	0bc3      	lsrs	r3, r0, #15
 80001e2:	428b      	cmp	r3, r1
 80001e4:	d301      	bcc.n	80001ea <__udivsi3+0x46>
 80001e6:	03cb      	lsls	r3, r1, #15
 80001e8:	1ac0      	subs	r0, r0, r3
 80001ea:	4152      	adcs	r2, r2
 80001ec:	0b83      	lsrs	r3, r0, #14
 80001ee:	428b      	cmp	r3, r1
 80001f0:	d301      	bcc.n	80001f6 <__udivsi3+0x52>
 80001f2:	038b      	lsls	r3, r1, #14
 80001f4:	1ac0      	subs	r0, r0, r3
 80001f6:	4152      	adcs	r2, r2
 80001f8:	0b43      	lsrs	r3, r0, #13
 80001fa:	428b      	cmp	r3, r1
 80001fc:	d301      	bcc.n	8000202 <__udivsi3+0x5e>
 80001fe:	034b      	lsls	r3, r1, #13
 8000200:	1ac0      	subs	r0, r0, r3
 8000202:	4152      	adcs	r2, r2
 8000204:	0b03      	lsrs	r3, r0, #12
 8000206:	428b      	cmp	r3, r1
 8000208:	d301      	bcc.n	800020e <__udivsi3+0x6a>
 800020a:	030b      	lsls	r3, r1, #12
 800020c:	1ac0      	subs	r0, r0, r3
 800020e:	4152      	adcs	r2, r2
 8000210:	0ac3      	lsrs	r3, r0, #11
 8000212:	428b      	cmp	r3, r1
 8000214:	d301      	bcc.n	800021a <__udivsi3+0x76>
 8000216:	02cb      	lsls	r3, r1, #11
 8000218:	1ac0      	subs	r0, r0, r3
 800021a:	4152      	adcs	r2, r2
 800021c:	0a83      	lsrs	r3, r0, #10
 800021e:	428b      	cmp	r3, r1
 8000220:	d301      	bcc.n	8000226 <__udivsi3+0x82>
 8000222:	028b      	lsls	r3, r1, #10
 8000224:	1ac0      	subs	r0, r0, r3
 8000226:	4152      	adcs	r2, r2
 8000228:	0a43      	lsrs	r3, r0, #9
 800022a:	428b      	cmp	r3, r1
 800022c:	d301      	bcc.n	8000232 <__udivsi3+0x8e>
 800022e:	024b      	lsls	r3, r1, #9
 8000230:	1ac0      	subs	r0, r0, r3
 8000232:	4152      	adcs	r2, r2
 8000234:	0a03      	lsrs	r3, r0, #8
 8000236:	428b      	cmp	r3, r1
 8000238:	d301      	bcc.n	800023e <__udivsi3+0x9a>
 800023a:	020b      	lsls	r3, r1, #8
 800023c:	1ac0      	subs	r0, r0, r3
 800023e:	4152      	adcs	r2, r2
 8000240:	d2cd      	bcs.n	80001de <__udivsi3+0x3a>
 8000242:	09c3      	lsrs	r3, r0, #7
 8000244:	428b      	cmp	r3, r1
 8000246:	d301      	bcc.n	800024c <__udivsi3+0xa8>
 8000248:	01cb      	lsls	r3, r1, #7
 800024a:	1ac0      	subs	r0, r0, r3
 800024c:	4152      	adcs	r2, r2
 800024e:	0983      	lsrs	r3, r0, #6
 8000250:	428b      	cmp	r3, r1
 8000252:	d301      	bcc.n	8000258 <__udivsi3+0xb4>
 8000254:	018b      	lsls	r3, r1, #6
 8000256:	1ac0      	subs	r0, r0, r3
 8000258:	4152      	adcs	r2, r2
 800025a:	0943      	lsrs	r3, r0, #5
 800025c:	428b      	cmp	r3, r1
 800025e:	d301      	bcc.n	8000264 <__udivsi3+0xc0>
 8000260:	014b      	lsls	r3, r1, #5
 8000262:	1ac0      	subs	r0, r0, r3
 8000264:	4152      	adcs	r2, r2
 8000266:	0903      	lsrs	r3, r0, #4
 8000268:	428b      	cmp	r3, r1
 800026a:	d301      	bcc.n	8000270 <__udivsi3+0xcc>
 800026c:	010b      	lsls	r3, r1, #4
 800026e:	1ac0      	subs	r0, r0, r3
 8000270:	4152      	adcs	r2, r2
 8000272:	08c3      	lsrs	r3, r0, #3
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__udivsi3+0xd8>
 8000278:	00cb      	lsls	r3, r1, #3
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0883      	lsrs	r3, r0, #2
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__udivsi3+0xe4>
 8000284:	008b      	lsls	r3, r1, #2
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0843      	lsrs	r3, r0, #1
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__udivsi3+0xf0>
 8000290:	004b      	lsls	r3, r1, #1
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	1a41      	subs	r1, r0, r1
 8000298:	d200      	bcs.n	800029c <__udivsi3+0xf8>
 800029a:	4601      	mov	r1, r0
 800029c:	4152      	adcs	r2, r2
 800029e:	4610      	mov	r0, r2
 80002a0:	4770      	bx	lr
 80002a2:	e7ff      	b.n	80002a4 <__udivsi3+0x100>
 80002a4:	b501      	push	{r0, lr}
 80002a6:	2000      	movs	r0, #0
 80002a8:	f000 f8f0 	bl	800048c <__aeabi_idiv0>
 80002ac:	bd02      	pop	{r1, pc}
 80002ae:	46c0      	nop			@ (mov r8, r8)

080002b0 <__aeabi_uidivmod>:
 80002b0:	2900      	cmp	r1, #0
 80002b2:	d0f7      	beq.n	80002a4 <__udivsi3+0x100>
 80002b4:	e776      	b.n	80001a4 <__udivsi3>
 80002b6:	4770      	bx	lr

080002b8 <__divsi3>:
 80002b8:	4603      	mov	r3, r0
 80002ba:	430b      	orrs	r3, r1
 80002bc:	d47f      	bmi.n	80003be <__divsi3+0x106>
 80002be:	2200      	movs	r2, #0
 80002c0:	0843      	lsrs	r3, r0, #1
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d374      	bcc.n	80003b0 <__divsi3+0xf8>
 80002c6:	0903      	lsrs	r3, r0, #4
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d35f      	bcc.n	800038c <__divsi3+0xd4>
 80002cc:	0a03      	lsrs	r3, r0, #8
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d344      	bcc.n	800035c <__divsi3+0xa4>
 80002d2:	0b03      	lsrs	r3, r0, #12
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d328      	bcc.n	800032a <__divsi3+0x72>
 80002d8:	0c03      	lsrs	r3, r0, #16
 80002da:	428b      	cmp	r3, r1
 80002dc:	d30d      	bcc.n	80002fa <__divsi3+0x42>
 80002de:	22ff      	movs	r2, #255	@ 0xff
 80002e0:	0209      	lsls	r1, r1, #8
 80002e2:	ba12      	rev	r2, r2
 80002e4:	0c03      	lsrs	r3, r0, #16
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d302      	bcc.n	80002f0 <__divsi3+0x38>
 80002ea:	1212      	asrs	r2, r2, #8
 80002ec:	0209      	lsls	r1, r1, #8
 80002ee:	d065      	beq.n	80003bc <__divsi3+0x104>
 80002f0:	0b03      	lsrs	r3, r0, #12
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d319      	bcc.n	800032a <__divsi3+0x72>
 80002f6:	e000      	b.n	80002fa <__divsi3+0x42>
 80002f8:	0a09      	lsrs	r1, r1, #8
 80002fa:	0bc3      	lsrs	r3, r0, #15
 80002fc:	428b      	cmp	r3, r1
 80002fe:	d301      	bcc.n	8000304 <__divsi3+0x4c>
 8000300:	03cb      	lsls	r3, r1, #15
 8000302:	1ac0      	subs	r0, r0, r3
 8000304:	4152      	adcs	r2, r2
 8000306:	0b83      	lsrs	r3, r0, #14
 8000308:	428b      	cmp	r3, r1
 800030a:	d301      	bcc.n	8000310 <__divsi3+0x58>
 800030c:	038b      	lsls	r3, r1, #14
 800030e:	1ac0      	subs	r0, r0, r3
 8000310:	4152      	adcs	r2, r2
 8000312:	0b43      	lsrs	r3, r0, #13
 8000314:	428b      	cmp	r3, r1
 8000316:	d301      	bcc.n	800031c <__divsi3+0x64>
 8000318:	034b      	lsls	r3, r1, #13
 800031a:	1ac0      	subs	r0, r0, r3
 800031c:	4152      	adcs	r2, r2
 800031e:	0b03      	lsrs	r3, r0, #12
 8000320:	428b      	cmp	r3, r1
 8000322:	d301      	bcc.n	8000328 <__divsi3+0x70>
 8000324:	030b      	lsls	r3, r1, #12
 8000326:	1ac0      	subs	r0, r0, r3
 8000328:	4152      	adcs	r2, r2
 800032a:	0ac3      	lsrs	r3, r0, #11
 800032c:	428b      	cmp	r3, r1
 800032e:	d301      	bcc.n	8000334 <__divsi3+0x7c>
 8000330:	02cb      	lsls	r3, r1, #11
 8000332:	1ac0      	subs	r0, r0, r3
 8000334:	4152      	adcs	r2, r2
 8000336:	0a83      	lsrs	r3, r0, #10
 8000338:	428b      	cmp	r3, r1
 800033a:	d301      	bcc.n	8000340 <__divsi3+0x88>
 800033c:	028b      	lsls	r3, r1, #10
 800033e:	1ac0      	subs	r0, r0, r3
 8000340:	4152      	adcs	r2, r2
 8000342:	0a43      	lsrs	r3, r0, #9
 8000344:	428b      	cmp	r3, r1
 8000346:	d301      	bcc.n	800034c <__divsi3+0x94>
 8000348:	024b      	lsls	r3, r1, #9
 800034a:	1ac0      	subs	r0, r0, r3
 800034c:	4152      	adcs	r2, r2
 800034e:	0a03      	lsrs	r3, r0, #8
 8000350:	428b      	cmp	r3, r1
 8000352:	d301      	bcc.n	8000358 <__divsi3+0xa0>
 8000354:	020b      	lsls	r3, r1, #8
 8000356:	1ac0      	subs	r0, r0, r3
 8000358:	4152      	adcs	r2, r2
 800035a:	d2cd      	bcs.n	80002f8 <__divsi3+0x40>
 800035c:	09c3      	lsrs	r3, r0, #7
 800035e:	428b      	cmp	r3, r1
 8000360:	d301      	bcc.n	8000366 <__divsi3+0xae>
 8000362:	01cb      	lsls	r3, r1, #7
 8000364:	1ac0      	subs	r0, r0, r3
 8000366:	4152      	adcs	r2, r2
 8000368:	0983      	lsrs	r3, r0, #6
 800036a:	428b      	cmp	r3, r1
 800036c:	d301      	bcc.n	8000372 <__divsi3+0xba>
 800036e:	018b      	lsls	r3, r1, #6
 8000370:	1ac0      	subs	r0, r0, r3
 8000372:	4152      	adcs	r2, r2
 8000374:	0943      	lsrs	r3, r0, #5
 8000376:	428b      	cmp	r3, r1
 8000378:	d301      	bcc.n	800037e <__divsi3+0xc6>
 800037a:	014b      	lsls	r3, r1, #5
 800037c:	1ac0      	subs	r0, r0, r3
 800037e:	4152      	adcs	r2, r2
 8000380:	0903      	lsrs	r3, r0, #4
 8000382:	428b      	cmp	r3, r1
 8000384:	d301      	bcc.n	800038a <__divsi3+0xd2>
 8000386:	010b      	lsls	r3, r1, #4
 8000388:	1ac0      	subs	r0, r0, r3
 800038a:	4152      	adcs	r2, r2
 800038c:	08c3      	lsrs	r3, r0, #3
 800038e:	428b      	cmp	r3, r1
 8000390:	d301      	bcc.n	8000396 <__divsi3+0xde>
 8000392:	00cb      	lsls	r3, r1, #3
 8000394:	1ac0      	subs	r0, r0, r3
 8000396:	4152      	adcs	r2, r2
 8000398:	0883      	lsrs	r3, r0, #2
 800039a:	428b      	cmp	r3, r1
 800039c:	d301      	bcc.n	80003a2 <__divsi3+0xea>
 800039e:	008b      	lsls	r3, r1, #2
 80003a0:	1ac0      	subs	r0, r0, r3
 80003a2:	4152      	adcs	r2, r2
 80003a4:	0843      	lsrs	r3, r0, #1
 80003a6:	428b      	cmp	r3, r1
 80003a8:	d301      	bcc.n	80003ae <__divsi3+0xf6>
 80003aa:	004b      	lsls	r3, r1, #1
 80003ac:	1ac0      	subs	r0, r0, r3
 80003ae:	4152      	adcs	r2, r2
 80003b0:	1a41      	subs	r1, r0, r1
 80003b2:	d200      	bcs.n	80003b6 <__divsi3+0xfe>
 80003b4:	4601      	mov	r1, r0
 80003b6:	4152      	adcs	r2, r2
 80003b8:	4610      	mov	r0, r2
 80003ba:	4770      	bx	lr
 80003bc:	e05d      	b.n	800047a <__divsi3+0x1c2>
 80003be:	0fca      	lsrs	r2, r1, #31
 80003c0:	d000      	beq.n	80003c4 <__divsi3+0x10c>
 80003c2:	4249      	negs	r1, r1
 80003c4:	1003      	asrs	r3, r0, #32
 80003c6:	d300      	bcc.n	80003ca <__divsi3+0x112>
 80003c8:	4240      	negs	r0, r0
 80003ca:	4053      	eors	r3, r2
 80003cc:	2200      	movs	r2, #0
 80003ce:	469c      	mov	ip, r3
 80003d0:	0903      	lsrs	r3, r0, #4
 80003d2:	428b      	cmp	r3, r1
 80003d4:	d32d      	bcc.n	8000432 <__divsi3+0x17a>
 80003d6:	0a03      	lsrs	r3, r0, #8
 80003d8:	428b      	cmp	r3, r1
 80003da:	d312      	bcc.n	8000402 <__divsi3+0x14a>
 80003dc:	22fc      	movs	r2, #252	@ 0xfc
 80003de:	0189      	lsls	r1, r1, #6
 80003e0:	ba12      	rev	r2, r2
 80003e2:	0a03      	lsrs	r3, r0, #8
 80003e4:	428b      	cmp	r3, r1
 80003e6:	d30c      	bcc.n	8000402 <__divsi3+0x14a>
 80003e8:	0189      	lsls	r1, r1, #6
 80003ea:	1192      	asrs	r2, r2, #6
 80003ec:	428b      	cmp	r3, r1
 80003ee:	d308      	bcc.n	8000402 <__divsi3+0x14a>
 80003f0:	0189      	lsls	r1, r1, #6
 80003f2:	1192      	asrs	r2, r2, #6
 80003f4:	428b      	cmp	r3, r1
 80003f6:	d304      	bcc.n	8000402 <__divsi3+0x14a>
 80003f8:	0189      	lsls	r1, r1, #6
 80003fa:	d03a      	beq.n	8000472 <__divsi3+0x1ba>
 80003fc:	1192      	asrs	r2, r2, #6
 80003fe:	e000      	b.n	8000402 <__divsi3+0x14a>
 8000400:	0989      	lsrs	r1, r1, #6
 8000402:	09c3      	lsrs	r3, r0, #7
 8000404:	428b      	cmp	r3, r1
 8000406:	d301      	bcc.n	800040c <__divsi3+0x154>
 8000408:	01cb      	lsls	r3, r1, #7
 800040a:	1ac0      	subs	r0, r0, r3
 800040c:	4152      	adcs	r2, r2
 800040e:	0983      	lsrs	r3, r0, #6
 8000410:	428b      	cmp	r3, r1
 8000412:	d301      	bcc.n	8000418 <__divsi3+0x160>
 8000414:	018b      	lsls	r3, r1, #6
 8000416:	1ac0      	subs	r0, r0, r3
 8000418:	4152      	adcs	r2, r2
 800041a:	0943      	lsrs	r3, r0, #5
 800041c:	428b      	cmp	r3, r1
 800041e:	d301      	bcc.n	8000424 <__divsi3+0x16c>
 8000420:	014b      	lsls	r3, r1, #5
 8000422:	1ac0      	subs	r0, r0, r3
 8000424:	4152      	adcs	r2, r2
 8000426:	0903      	lsrs	r3, r0, #4
 8000428:	428b      	cmp	r3, r1
 800042a:	d301      	bcc.n	8000430 <__divsi3+0x178>
 800042c:	010b      	lsls	r3, r1, #4
 800042e:	1ac0      	subs	r0, r0, r3
 8000430:	4152      	adcs	r2, r2
 8000432:	08c3      	lsrs	r3, r0, #3
 8000434:	428b      	cmp	r3, r1
 8000436:	d301      	bcc.n	800043c <__divsi3+0x184>
 8000438:	00cb      	lsls	r3, r1, #3
 800043a:	1ac0      	subs	r0, r0, r3
 800043c:	4152      	adcs	r2, r2
 800043e:	0883      	lsrs	r3, r0, #2
 8000440:	428b      	cmp	r3, r1
 8000442:	d301      	bcc.n	8000448 <__divsi3+0x190>
 8000444:	008b      	lsls	r3, r1, #2
 8000446:	1ac0      	subs	r0, r0, r3
 8000448:	4152      	adcs	r2, r2
 800044a:	d2d9      	bcs.n	8000400 <__divsi3+0x148>
 800044c:	0843      	lsrs	r3, r0, #1
 800044e:	428b      	cmp	r3, r1
 8000450:	d301      	bcc.n	8000456 <__divsi3+0x19e>
 8000452:	004b      	lsls	r3, r1, #1
 8000454:	1ac0      	subs	r0, r0, r3
 8000456:	4152      	adcs	r2, r2
 8000458:	1a41      	subs	r1, r0, r1
 800045a:	d200      	bcs.n	800045e <__divsi3+0x1a6>
 800045c:	4601      	mov	r1, r0
 800045e:	4663      	mov	r3, ip
 8000460:	4152      	adcs	r2, r2
 8000462:	105b      	asrs	r3, r3, #1
 8000464:	4610      	mov	r0, r2
 8000466:	d301      	bcc.n	800046c <__divsi3+0x1b4>
 8000468:	4240      	negs	r0, r0
 800046a:	2b00      	cmp	r3, #0
 800046c:	d500      	bpl.n	8000470 <__divsi3+0x1b8>
 800046e:	4249      	negs	r1, r1
 8000470:	4770      	bx	lr
 8000472:	4663      	mov	r3, ip
 8000474:	105b      	asrs	r3, r3, #1
 8000476:	d300      	bcc.n	800047a <__divsi3+0x1c2>
 8000478:	4240      	negs	r0, r0
 800047a:	b501      	push	{r0, lr}
 800047c:	2000      	movs	r0, #0
 800047e:	f000 f805 	bl	800048c <__aeabi_idiv0>
 8000482:	bd02      	pop	{r1, pc}

08000484 <__aeabi_idivmod>:
 8000484:	2900      	cmp	r1, #0
 8000486:	d0f8      	beq.n	800047a <__divsi3+0x1c2>
 8000488:	e716      	b.n	80002b8 <__divsi3>
 800048a:	4770      	bx	lr

0800048c <__aeabi_idiv0>:
 800048c:	4770      	bx	lr
 800048e:	46c0      	nop			@ (mov r8, r8)

08000490 <__aeabi_cdrcmple>:
 8000490:	4684      	mov	ip, r0
 8000492:	0010      	movs	r0, r2
 8000494:	4662      	mov	r2, ip
 8000496:	468c      	mov	ip, r1
 8000498:	0019      	movs	r1, r3
 800049a:	4663      	mov	r3, ip
 800049c:	e000      	b.n	80004a0 <__aeabi_cdcmpeq>
 800049e:	46c0      	nop			@ (mov r8, r8)

080004a0 <__aeabi_cdcmpeq>:
 80004a0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80004a2:	f002 f9e9 	bl	8002878 <__ledf2>
 80004a6:	2800      	cmp	r0, #0
 80004a8:	d401      	bmi.n	80004ae <__aeabi_cdcmpeq+0xe>
 80004aa:	2100      	movs	r1, #0
 80004ac:	42c8      	cmn	r0, r1
 80004ae:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080004b0 <__aeabi_dcmpeq>:
 80004b0:	b510      	push	{r4, lr}
 80004b2:	f002 f92d 	bl	8002710 <__eqdf2>
 80004b6:	4240      	negs	r0, r0
 80004b8:	3001      	adds	r0, #1
 80004ba:	bd10      	pop	{r4, pc}

080004bc <__aeabi_dcmplt>:
 80004bc:	b510      	push	{r4, lr}
 80004be:	f002 f9db 	bl	8002878 <__ledf2>
 80004c2:	2800      	cmp	r0, #0
 80004c4:	db01      	blt.n	80004ca <__aeabi_dcmplt+0xe>
 80004c6:	2000      	movs	r0, #0
 80004c8:	bd10      	pop	{r4, pc}
 80004ca:	2001      	movs	r0, #1
 80004cc:	bd10      	pop	{r4, pc}
 80004ce:	46c0      	nop			@ (mov r8, r8)

080004d0 <__aeabi_dcmple>:
 80004d0:	b510      	push	{r4, lr}
 80004d2:	f002 f9d1 	bl	8002878 <__ledf2>
 80004d6:	2800      	cmp	r0, #0
 80004d8:	dd01      	ble.n	80004de <__aeabi_dcmple+0xe>
 80004da:	2000      	movs	r0, #0
 80004dc:	bd10      	pop	{r4, pc}
 80004de:	2001      	movs	r0, #1
 80004e0:	bd10      	pop	{r4, pc}
 80004e2:	46c0      	nop			@ (mov r8, r8)

080004e4 <__aeabi_dcmpgt>:
 80004e4:	b510      	push	{r4, lr}
 80004e6:	f002 f957 	bl	8002798 <__gedf2>
 80004ea:	2800      	cmp	r0, #0
 80004ec:	dc01      	bgt.n	80004f2 <__aeabi_dcmpgt+0xe>
 80004ee:	2000      	movs	r0, #0
 80004f0:	bd10      	pop	{r4, pc}
 80004f2:	2001      	movs	r0, #1
 80004f4:	bd10      	pop	{r4, pc}
 80004f6:	46c0      	nop			@ (mov r8, r8)

080004f8 <__aeabi_dcmpge>:
 80004f8:	b510      	push	{r4, lr}
 80004fa:	f002 f94d 	bl	8002798 <__gedf2>
 80004fe:	2800      	cmp	r0, #0
 8000500:	da01      	bge.n	8000506 <__aeabi_dcmpge+0xe>
 8000502:	2000      	movs	r0, #0
 8000504:	bd10      	pop	{r4, pc}
 8000506:	2001      	movs	r0, #1
 8000508:	bd10      	pop	{r4, pc}
 800050a:	46c0      	nop			@ (mov r8, r8)

0800050c <__aeabi_cfrcmple>:
 800050c:	4684      	mov	ip, r0
 800050e:	0008      	movs	r0, r1
 8000510:	4661      	mov	r1, ip
 8000512:	e7ff      	b.n	8000514 <__aeabi_cfcmpeq>

08000514 <__aeabi_cfcmpeq>:
 8000514:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000516:	f000 fd4b 	bl	8000fb0 <__lesf2>
 800051a:	2800      	cmp	r0, #0
 800051c:	d401      	bmi.n	8000522 <__aeabi_cfcmpeq+0xe>
 800051e:	2100      	movs	r1, #0
 8000520:	42c8      	cmn	r0, r1
 8000522:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000524 <__aeabi_fcmpeq>:
 8000524:	b510      	push	{r4, lr}
 8000526:	f000 fcd3 	bl	8000ed0 <__eqsf2>
 800052a:	4240      	negs	r0, r0
 800052c:	3001      	adds	r0, #1
 800052e:	bd10      	pop	{r4, pc}

08000530 <__aeabi_fcmplt>:
 8000530:	b510      	push	{r4, lr}
 8000532:	f000 fd3d 	bl	8000fb0 <__lesf2>
 8000536:	2800      	cmp	r0, #0
 8000538:	db01      	blt.n	800053e <__aeabi_fcmplt+0xe>
 800053a:	2000      	movs	r0, #0
 800053c:	bd10      	pop	{r4, pc}
 800053e:	2001      	movs	r0, #1
 8000540:	bd10      	pop	{r4, pc}
 8000542:	46c0      	nop			@ (mov r8, r8)

08000544 <__aeabi_fcmple>:
 8000544:	b510      	push	{r4, lr}
 8000546:	f000 fd33 	bl	8000fb0 <__lesf2>
 800054a:	2800      	cmp	r0, #0
 800054c:	dd01      	ble.n	8000552 <__aeabi_fcmple+0xe>
 800054e:	2000      	movs	r0, #0
 8000550:	bd10      	pop	{r4, pc}
 8000552:	2001      	movs	r0, #1
 8000554:	bd10      	pop	{r4, pc}
 8000556:	46c0      	nop			@ (mov r8, r8)

08000558 <__aeabi_fcmpgt>:
 8000558:	b510      	push	{r4, lr}
 800055a:	f000 fce1 	bl	8000f20 <__gesf2>
 800055e:	2800      	cmp	r0, #0
 8000560:	dc01      	bgt.n	8000566 <__aeabi_fcmpgt+0xe>
 8000562:	2000      	movs	r0, #0
 8000564:	bd10      	pop	{r4, pc}
 8000566:	2001      	movs	r0, #1
 8000568:	bd10      	pop	{r4, pc}
 800056a:	46c0      	nop			@ (mov r8, r8)

0800056c <__aeabi_fcmpge>:
 800056c:	b510      	push	{r4, lr}
 800056e:	f000 fcd7 	bl	8000f20 <__gesf2>
 8000572:	2800      	cmp	r0, #0
 8000574:	da01      	bge.n	800057a <__aeabi_fcmpge+0xe>
 8000576:	2000      	movs	r0, #0
 8000578:	bd10      	pop	{r4, pc}
 800057a:	2001      	movs	r0, #1
 800057c:	bd10      	pop	{r4, pc}
 800057e:	46c0      	nop			@ (mov r8, r8)

08000580 <__aeabi_uldivmod>:
 8000580:	2b00      	cmp	r3, #0
 8000582:	d111      	bne.n	80005a8 <__aeabi_uldivmod+0x28>
 8000584:	2a00      	cmp	r2, #0
 8000586:	d10f      	bne.n	80005a8 <__aeabi_uldivmod+0x28>
 8000588:	2900      	cmp	r1, #0
 800058a:	d100      	bne.n	800058e <__aeabi_uldivmod+0xe>
 800058c:	2800      	cmp	r0, #0
 800058e:	d002      	beq.n	8000596 <__aeabi_uldivmod+0x16>
 8000590:	2100      	movs	r1, #0
 8000592:	43c9      	mvns	r1, r1
 8000594:	0008      	movs	r0, r1
 8000596:	b407      	push	{r0, r1, r2}
 8000598:	4802      	ldr	r0, [pc, #8]	@ (80005a4 <__aeabi_uldivmod+0x24>)
 800059a:	a102      	add	r1, pc, #8	@ (adr r1, 80005a4 <__aeabi_uldivmod+0x24>)
 800059c:	1840      	adds	r0, r0, r1
 800059e:	9002      	str	r0, [sp, #8]
 80005a0:	bd03      	pop	{r0, r1, pc}
 80005a2:	46c0      	nop			@ (mov r8, r8)
 80005a4:	fffffee9 	.word	0xfffffee9
 80005a8:	b403      	push	{r0, r1}
 80005aa:	4668      	mov	r0, sp
 80005ac:	b501      	push	{r0, lr}
 80005ae:	9802      	ldr	r0, [sp, #8]
 80005b0:	f000 f8ba 	bl	8000728 <__udivmoddi4>
 80005b4:	9b01      	ldr	r3, [sp, #4]
 80005b6:	469e      	mov	lr, r3
 80005b8:	b002      	add	sp, #8
 80005ba:	bc0c      	pop	{r2, r3}
 80005bc:	4770      	bx	lr
 80005be:	46c0      	nop			@ (mov r8, r8)

080005c0 <__aeabi_lmul>:
 80005c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80005c2:	46ce      	mov	lr, r9
 80005c4:	4699      	mov	r9, r3
 80005c6:	0c03      	lsrs	r3, r0, #16
 80005c8:	469c      	mov	ip, r3
 80005ca:	0413      	lsls	r3, r2, #16
 80005cc:	4647      	mov	r7, r8
 80005ce:	0c1b      	lsrs	r3, r3, #16
 80005d0:	001d      	movs	r5, r3
 80005d2:	000e      	movs	r6, r1
 80005d4:	4661      	mov	r1, ip
 80005d6:	0404      	lsls	r4, r0, #16
 80005d8:	0c24      	lsrs	r4, r4, #16
 80005da:	b580      	push	{r7, lr}
 80005dc:	0007      	movs	r7, r0
 80005de:	0c10      	lsrs	r0, r2, #16
 80005e0:	434b      	muls	r3, r1
 80005e2:	4365      	muls	r5, r4
 80005e4:	4341      	muls	r1, r0
 80005e6:	4360      	muls	r0, r4
 80005e8:	0c2c      	lsrs	r4, r5, #16
 80005ea:	18c0      	adds	r0, r0, r3
 80005ec:	1824      	adds	r4, r4, r0
 80005ee:	468c      	mov	ip, r1
 80005f0:	42a3      	cmp	r3, r4
 80005f2:	d903      	bls.n	80005fc <__aeabi_lmul+0x3c>
 80005f4:	2380      	movs	r3, #128	@ 0x80
 80005f6:	025b      	lsls	r3, r3, #9
 80005f8:	4698      	mov	r8, r3
 80005fa:	44c4      	add	ip, r8
 80005fc:	4649      	mov	r1, r9
 80005fe:	4379      	muls	r1, r7
 8000600:	4356      	muls	r6, r2
 8000602:	0c23      	lsrs	r3, r4, #16
 8000604:	042d      	lsls	r5, r5, #16
 8000606:	0c2d      	lsrs	r5, r5, #16
 8000608:	1989      	adds	r1, r1, r6
 800060a:	4463      	add	r3, ip
 800060c:	0424      	lsls	r4, r4, #16
 800060e:	1960      	adds	r0, r4, r5
 8000610:	18c9      	adds	r1, r1, r3
 8000612:	bcc0      	pop	{r6, r7}
 8000614:	46b9      	mov	r9, r7
 8000616:	46b0      	mov	r8, r6
 8000618:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800061a:	46c0      	nop			@ (mov r8, r8)

0800061c <__aeabi_f2uiz>:
 800061c:	219e      	movs	r1, #158	@ 0x9e
 800061e:	b510      	push	{r4, lr}
 8000620:	05c9      	lsls	r1, r1, #23
 8000622:	1c04      	adds	r4, r0, #0
 8000624:	f7ff ffa2 	bl	800056c <__aeabi_fcmpge>
 8000628:	2800      	cmp	r0, #0
 800062a:	d103      	bne.n	8000634 <__aeabi_f2uiz+0x18>
 800062c:	1c20      	adds	r0, r4, #0
 800062e:	f001 f8db 	bl	80017e8 <__aeabi_f2iz>
 8000632:	bd10      	pop	{r4, pc}
 8000634:	219e      	movs	r1, #158	@ 0x9e
 8000636:	1c20      	adds	r0, r4, #0
 8000638:	05c9      	lsls	r1, r1, #23
 800063a:	f000 fe5b 	bl	80012f4 <__aeabi_fsub>
 800063e:	f001 f8d3 	bl	80017e8 <__aeabi_f2iz>
 8000642:	2380      	movs	r3, #128	@ 0x80
 8000644:	061b      	lsls	r3, r3, #24
 8000646:	469c      	mov	ip, r3
 8000648:	4460      	add	r0, ip
 800064a:	e7f2      	b.n	8000632 <__aeabi_f2uiz+0x16>

0800064c <__aeabi_d2uiz>:
 800064c:	b570      	push	{r4, r5, r6, lr}
 800064e:	2200      	movs	r2, #0
 8000650:	4b0c      	ldr	r3, [pc, #48]	@ (8000684 <__aeabi_d2uiz+0x38>)
 8000652:	0004      	movs	r4, r0
 8000654:	000d      	movs	r5, r1
 8000656:	f7ff ff4f 	bl	80004f8 <__aeabi_dcmpge>
 800065a:	2800      	cmp	r0, #0
 800065c:	d104      	bne.n	8000668 <__aeabi_d2uiz+0x1c>
 800065e:	0020      	movs	r0, r4
 8000660:	0029      	movs	r1, r5
 8000662:	f003 f889 	bl	8003778 <__aeabi_d2iz>
 8000666:	bd70      	pop	{r4, r5, r6, pc}
 8000668:	4b06      	ldr	r3, [pc, #24]	@ (8000684 <__aeabi_d2uiz+0x38>)
 800066a:	2200      	movs	r2, #0
 800066c:	0020      	movs	r0, r4
 800066e:	0029      	movs	r1, r5
 8000670:	f002 fc56 	bl	8002f20 <__aeabi_dsub>
 8000674:	f003 f880 	bl	8003778 <__aeabi_d2iz>
 8000678:	2380      	movs	r3, #128	@ 0x80
 800067a:	061b      	lsls	r3, r3, #24
 800067c:	469c      	mov	ip, r3
 800067e:	4460      	add	r0, ip
 8000680:	e7f1      	b.n	8000666 <__aeabi_d2uiz+0x1a>
 8000682:	46c0      	nop			@ (mov r8, r8)
 8000684:	41e00000 	.word	0x41e00000

08000688 <__aeabi_d2lz>:
 8000688:	b570      	push	{r4, r5, r6, lr}
 800068a:	2200      	movs	r2, #0
 800068c:	2300      	movs	r3, #0
 800068e:	0004      	movs	r4, r0
 8000690:	000d      	movs	r5, r1
 8000692:	f7ff ff13 	bl	80004bc <__aeabi_dcmplt>
 8000696:	2800      	cmp	r0, #0
 8000698:	d108      	bne.n	80006ac <__aeabi_d2lz+0x24>
 800069a:	0020      	movs	r0, r4
 800069c:	0029      	movs	r1, r5
 800069e:	f000 f80f 	bl	80006c0 <__aeabi_d2ulz>
 80006a2:	0002      	movs	r2, r0
 80006a4:	000b      	movs	r3, r1
 80006a6:	0010      	movs	r0, r2
 80006a8:	0019      	movs	r1, r3
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	2380      	movs	r3, #128	@ 0x80
 80006ae:	061b      	lsls	r3, r3, #24
 80006b0:	18e9      	adds	r1, r5, r3
 80006b2:	0020      	movs	r0, r4
 80006b4:	f000 f804 	bl	80006c0 <__aeabi_d2ulz>
 80006b8:	2300      	movs	r3, #0
 80006ba:	4242      	negs	r2, r0
 80006bc:	418b      	sbcs	r3, r1
 80006be:	e7f2      	b.n	80006a6 <__aeabi_d2lz+0x1e>

080006c0 <__aeabi_d2ulz>:
 80006c0:	b570      	push	{r4, r5, r6, lr}
 80006c2:	2200      	movs	r2, #0
 80006c4:	4b0b      	ldr	r3, [pc, #44]	@ (80006f4 <__aeabi_d2ulz+0x34>)
 80006c6:	000d      	movs	r5, r1
 80006c8:	0004      	movs	r4, r0
 80006ca:	f002 f943 	bl	8002954 <__aeabi_dmul>
 80006ce:	f7ff ffbd 	bl	800064c <__aeabi_d2uiz>
 80006d2:	0006      	movs	r6, r0
 80006d4:	f003 f8ba 	bl	800384c <__aeabi_ui2d>
 80006d8:	2200      	movs	r2, #0
 80006da:	4b07      	ldr	r3, [pc, #28]	@ (80006f8 <__aeabi_d2ulz+0x38>)
 80006dc:	f002 f93a 	bl	8002954 <__aeabi_dmul>
 80006e0:	0002      	movs	r2, r0
 80006e2:	000b      	movs	r3, r1
 80006e4:	0020      	movs	r0, r4
 80006e6:	0029      	movs	r1, r5
 80006e8:	f002 fc1a 	bl	8002f20 <__aeabi_dsub>
 80006ec:	f7ff ffae 	bl	800064c <__aeabi_d2uiz>
 80006f0:	0031      	movs	r1, r6
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	3df00000 	.word	0x3df00000
 80006f8:	41f00000 	.word	0x41f00000

080006fc <__aeabi_l2d>:
 80006fc:	b570      	push	{r4, r5, r6, lr}
 80006fe:	0006      	movs	r6, r0
 8000700:	0008      	movs	r0, r1
 8000702:	f003 f875 	bl	80037f0 <__aeabi_i2d>
 8000706:	2200      	movs	r2, #0
 8000708:	4b06      	ldr	r3, [pc, #24]	@ (8000724 <__aeabi_l2d+0x28>)
 800070a:	f002 f923 	bl	8002954 <__aeabi_dmul>
 800070e:	000d      	movs	r5, r1
 8000710:	0004      	movs	r4, r0
 8000712:	0030      	movs	r0, r6
 8000714:	f003 f89a 	bl	800384c <__aeabi_ui2d>
 8000718:	002b      	movs	r3, r5
 800071a:	0022      	movs	r2, r4
 800071c:	f001 f91a 	bl	8001954 <__aeabi_dadd>
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	46c0      	nop			@ (mov r8, r8)
 8000724:	41f00000 	.word	0x41f00000

08000728 <__udivmoddi4>:
 8000728:	b5f0      	push	{r4, r5, r6, r7, lr}
 800072a:	4657      	mov	r7, sl
 800072c:	464e      	mov	r6, r9
 800072e:	4645      	mov	r5, r8
 8000730:	46de      	mov	lr, fp
 8000732:	b5e0      	push	{r5, r6, r7, lr}
 8000734:	0004      	movs	r4, r0
 8000736:	000d      	movs	r5, r1
 8000738:	4692      	mov	sl, r2
 800073a:	4699      	mov	r9, r3
 800073c:	b083      	sub	sp, #12
 800073e:	428b      	cmp	r3, r1
 8000740:	d830      	bhi.n	80007a4 <__udivmoddi4+0x7c>
 8000742:	d02d      	beq.n	80007a0 <__udivmoddi4+0x78>
 8000744:	4649      	mov	r1, r9
 8000746:	4650      	mov	r0, sl
 8000748:	f003 f98c 	bl	8003a64 <__clzdi2>
 800074c:	0029      	movs	r1, r5
 800074e:	0006      	movs	r6, r0
 8000750:	0020      	movs	r0, r4
 8000752:	f003 f987 	bl	8003a64 <__clzdi2>
 8000756:	1a33      	subs	r3, r6, r0
 8000758:	4698      	mov	r8, r3
 800075a:	3b20      	subs	r3, #32
 800075c:	d434      	bmi.n	80007c8 <__udivmoddi4+0xa0>
 800075e:	469b      	mov	fp, r3
 8000760:	4653      	mov	r3, sl
 8000762:	465a      	mov	r2, fp
 8000764:	4093      	lsls	r3, r2
 8000766:	4642      	mov	r2, r8
 8000768:	001f      	movs	r7, r3
 800076a:	4653      	mov	r3, sl
 800076c:	4093      	lsls	r3, r2
 800076e:	001e      	movs	r6, r3
 8000770:	42af      	cmp	r7, r5
 8000772:	d83b      	bhi.n	80007ec <__udivmoddi4+0xc4>
 8000774:	42af      	cmp	r7, r5
 8000776:	d100      	bne.n	800077a <__udivmoddi4+0x52>
 8000778:	e079      	b.n	800086e <__udivmoddi4+0x146>
 800077a:	465b      	mov	r3, fp
 800077c:	1ba4      	subs	r4, r4, r6
 800077e:	41bd      	sbcs	r5, r7
 8000780:	2b00      	cmp	r3, #0
 8000782:	da00      	bge.n	8000786 <__udivmoddi4+0x5e>
 8000784:	e076      	b.n	8000874 <__udivmoddi4+0x14c>
 8000786:	2200      	movs	r2, #0
 8000788:	2300      	movs	r3, #0
 800078a:	9200      	str	r2, [sp, #0]
 800078c:	9301      	str	r3, [sp, #4]
 800078e:	2301      	movs	r3, #1
 8000790:	465a      	mov	r2, fp
 8000792:	4093      	lsls	r3, r2
 8000794:	9301      	str	r3, [sp, #4]
 8000796:	2301      	movs	r3, #1
 8000798:	4642      	mov	r2, r8
 800079a:	4093      	lsls	r3, r2
 800079c:	9300      	str	r3, [sp, #0]
 800079e:	e029      	b.n	80007f4 <__udivmoddi4+0xcc>
 80007a0:	4282      	cmp	r2, r0
 80007a2:	d9cf      	bls.n	8000744 <__udivmoddi4+0x1c>
 80007a4:	2200      	movs	r2, #0
 80007a6:	2300      	movs	r3, #0
 80007a8:	9200      	str	r2, [sp, #0]
 80007aa:	9301      	str	r3, [sp, #4]
 80007ac:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d001      	beq.n	80007b6 <__udivmoddi4+0x8e>
 80007b2:	601c      	str	r4, [r3, #0]
 80007b4:	605d      	str	r5, [r3, #4]
 80007b6:	9800      	ldr	r0, [sp, #0]
 80007b8:	9901      	ldr	r1, [sp, #4]
 80007ba:	b003      	add	sp, #12
 80007bc:	bcf0      	pop	{r4, r5, r6, r7}
 80007be:	46bb      	mov	fp, r7
 80007c0:	46b2      	mov	sl, r6
 80007c2:	46a9      	mov	r9, r5
 80007c4:	46a0      	mov	r8, r4
 80007c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80007c8:	4642      	mov	r2, r8
 80007ca:	469b      	mov	fp, r3
 80007cc:	2320      	movs	r3, #32
 80007ce:	1a9b      	subs	r3, r3, r2
 80007d0:	4652      	mov	r2, sl
 80007d2:	40da      	lsrs	r2, r3
 80007d4:	4641      	mov	r1, r8
 80007d6:	0013      	movs	r3, r2
 80007d8:	464a      	mov	r2, r9
 80007da:	408a      	lsls	r2, r1
 80007dc:	0017      	movs	r7, r2
 80007de:	4642      	mov	r2, r8
 80007e0:	431f      	orrs	r7, r3
 80007e2:	4653      	mov	r3, sl
 80007e4:	4093      	lsls	r3, r2
 80007e6:	001e      	movs	r6, r3
 80007e8:	42af      	cmp	r7, r5
 80007ea:	d9c3      	bls.n	8000774 <__udivmoddi4+0x4c>
 80007ec:	2200      	movs	r2, #0
 80007ee:	2300      	movs	r3, #0
 80007f0:	9200      	str	r2, [sp, #0]
 80007f2:	9301      	str	r3, [sp, #4]
 80007f4:	4643      	mov	r3, r8
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d0d8      	beq.n	80007ac <__udivmoddi4+0x84>
 80007fa:	07fb      	lsls	r3, r7, #31
 80007fc:	0872      	lsrs	r2, r6, #1
 80007fe:	431a      	orrs	r2, r3
 8000800:	4646      	mov	r6, r8
 8000802:	087b      	lsrs	r3, r7, #1
 8000804:	e00e      	b.n	8000824 <__udivmoddi4+0xfc>
 8000806:	42ab      	cmp	r3, r5
 8000808:	d101      	bne.n	800080e <__udivmoddi4+0xe6>
 800080a:	42a2      	cmp	r2, r4
 800080c:	d80c      	bhi.n	8000828 <__udivmoddi4+0x100>
 800080e:	1aa4      	subs	r4, r4, r2
 8000810:	419d      	sbcs	r5, r3
 8000812:	2001      	movs	r0, #1
 8000814:	1924      	adds	r4, r4, r4
 8000816:	416d      	adcs	r5, r5
 8000818:	2100      	movs	r1, #0
 800081a:	3e01      	subs	r6, #1
 800081c:	1824      	adds	r4, r4, r0
 800081e:	414d      	adcs	r5, r1
 8000820:	2e00      	cmp	r6, #0
 8000822:	d006      	beq.n	8000832 <__udivmoddi4+0x10a>
 8000824:	42ab      	cmp	r3, r5
 8000826:	d9ee      	bls.n	8000806 <__udivmoddi4+0xde>
 8000828:	3e01      	subs	r6, #1
 800082a:	1924      	adds	r4, r4, r4
 800082c:	416d      	adcs	r5, r5
 800082e:	2e00      	cmp	r6, #0
 8000830:	d1f8      	bne.n	8000824 <__udivmoddi4+0xfc>
 8000832:	9800      	ldr	r0, [sp, #0]
 8000834:	9901      	ldr	r1, [sp, #4]
 8000836:	465b      	mov	r3, fp
 8000838:	1900      	adds	r0, r0, r4
 800083a:	4169      	adcs	r1, r5
 800083c:	2b00      	cmp	r3, #0
 800083e:	db24      	blt.n	800088a <__udivmoddi4+0x162>
 8000840:	002b      	movs	r3, r5
 8000842:	465a      	mov	r2, fp
 8000844:	4644      	mov	r4, r8
 8000846:	40d3      	lsrs	r3, r2
 8000848:	002a      	movs	r2, r5
 800084a:	40e2      	lsrs	r2, r4
 800084c:	001c      	movs	r4, r3
 800084e:	465b      	mov	r3, fp
 8000850:	0015      	movs	r5, r2
 8000852:	2b00      	cmp	r3, #0
 8000854:	db2a      	blt.n	80008ac <__udivmoddi4+0x184>
 8000856:	0026      	movs	r6, r4
 8000858:	409e      	lsls	r6, r3
 800085a:	0033      	movs	r3, r6
 800085c:	0026      	movs	r6, r4
 800085e:	4647      	mov	r7, r8
 8000860:	40be      	lsls	r6, r7
 8000862:	0032      	movs	r2, r6
 8000864:	1a80      	subs	r0, r0, r2
 8000866:	4199      	sbcs	r1, r3
 8000868:	9000      	str	r0, [sp, #0]
 800086a:	9101      	str	r1, [sp, #4]
 800086c:	e79e      	b.n	80007ac <__udivmoddi4+0x84>
 800086e:	42a3      	cmp	r3, r4
 8000870:	d8bc      	bhi.n	80007ec <__udivmoddi4+0xc4>
 8000872:	e782      	b.n	800077a <__udivmoddi4+0x52>
 8000874:	4642      	mov	r2, r8
 8000876:	2320      	movs	r3, #32
 8000878:	2100      	movs	r1, #0
 800087a:	1a9b      	subs	r3, r3, r2
 800087c:	2200      	movs	r2, #0
 800087e:	9100      	str	r1, [sp, #0]
 8000880:	9201      	str	r2, [sp, #4]
 8000882:	2201      	movs	r2, #1
 8000884:	40da      	lsrs	r2, r3
 8000886:	9201      	str	r2, [sp, #4]
 8000888:	e785      	b.n	8000796 <__udivmoddi4+0x6e>
 800088a:	4642      	mov	r2, r8
 800088c:	2320      	movs	r3, #32
 800088e:	1a9b      	subs	r3, r3, r2
 8000890:	002a      	movs	r2, r5
 8000892:	4646      	mov	r6, r8
 8000894:	409a      	lsls	r2, r3
 8000896:	0023      	movs	r3, r4
 8000898:	40f3      	lsrs	r3, r6
 800089a:	4644      	mov	r4, r8
 800089c:	4313      	orrs	r3, r2
 800089e:	002a      	movs	r2, r5
 80008a0:	40e2      	lsrs	r2, r4
 80008a2:	001c      	movs	r4, r3
 80008a4:	465b      	mov	r3, fp
 80008a6:	0015      	movs	r5, r2
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	dad4      	bge.n	8000856 <__udivmoddi4+0x12e>
 80008ac:	4642      	mov	r2, r8
 80008ae:	002f      	movs	r7, r5
 80008b0:	2320      	movs	r3, #32
 80008b2:	0026      	movs	r6, r4
 80008b4:	4097      	lsls	r7, r2
 80008b6:	1a9b      	subs	r3, r3, r2
 80008b8:	40de      	lsrs	r6, r3
 80008ba:	003b      	movs	r3, r7
 80008bc:	4333      	orrs	r3, r6
 80008be:	e7cd      	b.n	800085c <__udivmoddi4+0x134>

080008c0 <__aeabi_fadd>:
 80008c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80008c2:	024b      	lsls	r3, r1, #9
 80008c4:	0a5a      	lsrs	r2, r3, #9
 80008c6:	4694      	mov	ip, r2
 80008c8:	004a      	lsls	r2, r1, #1
 80008ca:	0fc9      	lsrs	r1, r1, #31
 80008cc:	46ce      	mov	lr, r9
 80008ce:	4647      	mov	r7, r8
 80008d0:	4689      	mov	r9, r1
 80008d2:	0045      	lsls	r5, r0, #1
 80008d4:	0246      	lsls	r6, r0, #9
 80008d6:	0e2d      	lsrs	r5, r5, #24
 80008d8:	0e12      	lsrs	r2, r2, #24
 80008da:	b580      	push	{r7, lr}
 80008dc:	0999      	lsrs	r1, r3, #6
 80008de:	0a77      	lsrs	r7, r6, #9
 80008e0:	0fc4      	lsrs	r4, r0, #31
 80008e2:	09b6      	lsrs	r6, r6, #6
 80008e4:	1aab      	subs	r3, r5, r2
 80008e6:	454c      	cmp	r4, r9
 80008e8:	d020      	beq.n	800092c <__aeabi_fadd+0x6c>
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	dd0c      	ble.n	8000908 <__aeabi_fadd+0x48>
 80008ee:	2a00      	cmp	r2, #0
 80008f0:	d134      	bne.n	800095c <__aeabi_fadd+0x9c>
 80008f2:	2900      	cmp	r1, #0
 80008f4:	d02a      	beq.n	800094c <__aeabi_fadd+0x8c>
 80008f6:	1e5a      	subs	r2, r3, #1
 80008f8:	2b01      	cmp	r3, #1
 80008fa:	d100      	bne.n	80008fe <__aeabi_fadd+0x3e>
 80008fc:	e08f      	b.n	8000a1e <__aeabi_fadd+0x15e>
 80008fe:	2bff      	cmp	r3, #255	@ 0xff
 8000900:	d100      	bne.n	8000904 <__aeabi_fadd+0x44>
 8000902:	e0cd      	b.n	8000aa0 <__aeabi_fadd+0x1e0>
 8000904:	0013      	movs	r3, r2
 8000906:	e02f      	b.n	8000968 <__aeabi_fadd+0xa8>
 8000908:	2b00      	cmp	r3, #0
 800090a:	d060      	beq.n	80009ce <__aeabi_fadd+0x10e>
 800090c:	1b53      	subs	r3, r2, r5
 800090e:	2d00      	cmp	r5, #0
 8000910:	d000      	beq.n	8000914 <__aeabi_fadd+0x54>
 8000912:	e0ee      	b.n	8000af2 <__aeabi_fadd+0x232>
 8000914:	2e00      	cmp	r6, #0
 8000916:	d100      	bne.n	800091a <__aeabi_fadd+0x5a>
 8000918:	e13e      	b.n	8000b98 <__aeabi_fadd+0x2d8>
 800091a:	1e5c      	subs	r4, r3, #1
 800091c:	2b01      	cmp	r3, #1
 800091e:	d100      	bne.n	8000922 <__aeabi_fadd+0x62>
 8000920:	e16b      	b.n	8000bfa <__aeabi_fadd+0x33a>
 8000922:	2bff      	cmp	r3, #255	@ 0xff
 8000924:	d100      	bne.n	8000928 <__aeabi_fadd+0x68>
 8000926:	e0b9      	b.n	8000a9c <__aeabi_fadd+0x1dc>
 8000928:	0023      	movs	r3, r4
 800092a:	e0e7      	b.n	8000afc <__aeabi_fadd+0x23c>
 800092c:	2b00      	cmp	r3, #0
 800092e:	dc00      	bgt.n	8000932 <__aeabi_fadd+0x72>
 8000930:	e0a4      	b.n	8000a7c <__aeabi_fadd+0x1bc>
 8000932:	2a00      	cmp	r2, #0
 8000934:	d069      	beq.n	8000a0a <__aeabi_fadd+0x14a>
 8000936:	2dff      	cmp	r5, #255	@ 0xff
 8000938:	d100      	bne.n	800093c <__aeabi_fadd+0x7c>
 800093a:	e0b1      	b.n	8000aa0 <__aeabi_fadd+0x1e0>
 800093c:	2280      	movs	r2, #128	@ 0x80
 800093e:	04d2      	lsls	r2, r2, #19
 8000940:	4311      	orrs	r1, r2
 8000942:	2b1b      	cmp	r3, #27
 8000944:	dc00      	bgt.n	8000948 <__aeabi_fadd+0x88>
 8000946:	e0e9      	b.n	8000b1c <__aeabi_fadd+0x25c>
 8000948:	002b      	movs	r3, r5
 800094a:	3605      	adds	r6, #5
 800094c:	08f7      	lsrs	r7, r6, #3
 800094e:	2bff      	cmp	r3, #255	@ 0xff
 8000950:	d100      	bne.n	8000954 <__aeabi_fadd+0x94>
 8000952:	e0a5      	b.n	8000aa0 <__aeabi_fadd+0x1e0>
 8000954:	027a      	lsls	r2, r7, #9
 8000956:	0a52      	lsrs	r2, r2, #9
 8000958:	b2d8      	uxtb	r0, r3
 800095a:	e030      	b.n	80009be <__aeabi_fadd+0xfe>
 800095c:	2dff      	cmp	r5, #255	@ 0xff
 800095e:	d100      	bne.n	8000962 <__aeabi_fadd+0xa2>
 8000960:	e09e      	b.n	8000aa0 <__aeabi_fadd+0x1e0>
 8000962:	2280      	movs	r2, #128	@ 0x80
 8000964:	04d2      	lsls	r2, r2, #19
 8000966:	4311      	orrs	r1, r2
 8000968:	2001      	movs	r0, #1
 800096a:	2b1b      	cmp	r3, #27
 800096c:	dc08      	bgt.n	8000980 <__aeabi_fadd+0xc0>
 800096e:	0008      	movs	r0, r1
 8000970:	2220      	movs	r2, #32
 8000972:	40d8      	lsrs	r0, r3
 8000974:	1ad3      	subs	r3, r2, r3
 8000976:	4099      	lsls	r1, r3
 8000978:	000b      	movs	r3, r1
 800097a:	1e5a      	subs	r2, r3, #1
 800097c:	4193      	sbcs	r3, r2
 800097e:	4318      	orrs	r0, r3
 8000980:	1a36      	subs	r6, r6, r0
 8000982:	0173      	lsls	r3, r6, #5
 8000984:	d400      	bmi.n	8000988 <__aeabi_fadd+0xc8>
 8000986:	e071      	b.n	8000a6c <__aeabi_fadd+0x1ac>
 8000988:	01b6      	lsls	r6, r6, #6
 800098a:	09b7      	lsrs	r7, r6, #6
 800098c:	0038      	movs	r0, r7
 800098e:	f003 f84b 	bl	8003a28 <__clzsi2>
 8000992:	003b      	movs	r3, r7
 8000994:	3805      	subs	r0, #5
 8000996:	4083      	lsls	r3, r0
 8000998:	4285      	cmp	r5, r0
 800099a:	dd4d      	ble.n	8000a38 <__aeabi_fadd+0x178>
 800099c:	4eb4      	ldr	r6, [pc, #720]	@ (8000c70 <__aeabi_fadd+0x3b0>)
 800099e:	1a2d      	subs	r5, r5, r0
 80009a0:	401e      	ands	r6, r3
 80009a2:	075a      	lsls	r2, r3, #29
 80009a4:	d068      	beq.n	8000a78 <__aeabi_fadd+0x1b8>
 80009a6:	220f      	movs	r2, #15
 80009a8:	4013      	ands	r3, r2
 80009aa:	2b04      	cmp	r3, #4
 80009ac:	d064      	beq.n	8000a78 <__aeabi_fadd+0x1b8>
 80009ae:	3604      	adds	r6, #4
 80009b0:	0173      	lsls	r3, r6, #5
 80009b2:	d561      	bpl.n	8000a78 <__aeabi_fadd+0x1b8>
 80009b4:	1c68      	adds	r0, r5, #1
 80009b6:	2dfe      	cmp	r5, #254	@ 0xfe
 80009b8:	d154      	bne.n	8000a64 <__aeabi_fadd+0x1a4>
 80009ba:	20ff      	movs	r0, #255	@ 0xff
 80009bc:	2200      	movs	r2, #0
 80009be:	05c0      	lsls	r0, r0, #23
 80009c0:	4310      	orrs	r0, r2
 80009c2:	07e4      	lsls	r4, r4, #31
 80009c4:	4320      	orrs	r0, r4
 80009c6:	bcc0      	pop	{r6, r7}
 80009c8:	46b9      	mov	r9, r7
 80009ca:	46b0      	mov	r8, r6
 80009cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80009ce:	22fe      	movs	r2, #254	@ 0xfe
 80009d0:	4690      	mov	r8, r2
 80009d2:	1c68      	adds	r0, r5, #1
 80009d4:	0002      	movs	r2, r0
 80009d6:	4640      	mov	r0, r8
 80009d8:	4210      	tst	r0, r2
 80009da:	d16b      	bne.n	8000ab4 <__aeabi_fadd+0x1f4>
 80009dc:	2d00      	cmp	r5, #0
 80009de:	d000      	beq.n	80009e2 <__aeabi_fadd+0x122>
 80009e0:	e0dd      	b.n	8000b9e <__aeabi_fadd+0x2de>
 80009e2:	2e00      	cmp	r6, #0
 80009e4:	d100      	bne.n	80009e8 <__aeabi_fadd+0x128>
 80009e6:	e102      	b.n	8000bee <__aeabi_fadd+0x32e>
 80009e8:	2900      	cmp	r1, #0
 80009ea:	d0b3      	beq.n	8000954 <__aeabi_fadd+0x94>
 80009ec:	2280      	movs	r2, #128	@ 0x80
 80009ee:	1a77      	subs	r7, r6, r1
 80009f0:	04d2      	lsls	r2, r2, #19
 80009f2:	4217      	tst	r7, r2
 80009f4:	d100      	bne.n	80009f8 <__aeabi_fadd+0x138>
 80009f6:	e136      	b.n	8000c66 <__aeabi_fadd+0x3a6>
 80009f8:	464c      	mov	r4, r9
 80009fa:	1b8e      	subs	r6, r1, r6
 80009fc:	d061      	beq.n	8000ac2 <__aeabi_fadd+0x202>
 80009fe:	2001      	movs	r0, #1
 8000a00:	4216      	tst	r6, r2
 8000a02:	d130      	bne.n	8000a66 <__aeabi_fadd+0x1a6>
 8000a04:	2300      	movs	r3, #0
 8000a06:	08f7      	lsrs	r7, r6, #3
 8000a08:	e7a4      	b.n	8000954 <__aeabi_fadd+0x94>
 8000a0a:	2900      	cmp	r1, #0
 8000a0c:	d09e      	beq.n	800094c <__aeabi_fadd+0x8c>
 8000a0e:	1e5a      	subs	r2, r3, #1
 8000a10:	2b01      	cmp	r3, #1
 8000a12:	d100      	bne.n	8000a16 <__aeabi_fadd+0x156>
 8000a14:	e0ca      	b.n	8000bac <__aeabi_fadd+0x2ec>
 8000a16:	2bff      	cmp	r3, #255	@ 0xff
 8000a18:	d042      	beq.n	8000aa0 <__aeabi_fadd+0x1e0>
 8000a1a:	0013      	movs	r3, r2
 8000a1c:	e791      	b.n	8000942 <__aeabi_fadd+0x82>
 8000a1e:	1a71      	subs	r1, r6, r1
 8000a20:	014b      	lsls	r3, r1, #5
 8000a22:	d400      	bmi.n	8000a26 <__aeabi_fadd+0x166>
 8000a24:	e0d1      	b.n	8000bca <__aeabi_fadd+0x30a>
 8000a26:	018f      	lsls	r7, r1, #6
 8000a28:	09bf      	lsrs	r7, r7, #6
 8000a2a:	0038      	movs	r0, r7
 8000a2c:	f002 fffc 	bl	8003a28 <__clzsi2>
 8000a30:	003b      	movs	r3, r7
 8000a32:	3805      	subs	r0, #5
 8000a34:	4083      	lsls	r3, r0
 8000a36:	2501      	movs	r5, #1
 8000a38:	2220      	movs	r2, #32
 8000a3a:	1b40      	subs	r0, r0, r5
 8000a3c:	3001      	adds	r0, #1
 8000a3e:	1a12      	subs	r2, r2, r0
 8000a40:	001e      	movs	r6, r3
 8000a42:	4093      	lsls	r3, r2
 8000a44:	40c6      	lsrs	r6, r0
 8000a46:	1e5a      	subs	r2, r3, #1
 8000a48:	4193      	sbcs	r3, r2
 8000a4a:	431e      	orrs	r6, r3
 8000a4c:	d039      	beq.n	8000ac2 <__aeabi_fadd+0x202>
 8000a4e:	0773      	lsls	r3, r6, #29
 8000a50:	d100      	bne.n	8000a54 <__aeabi_fadd+0x194>
 8000a52:	e11b      	b.n	8000c8c <__aeabi_fadd+0x3cc>
 8000a54:	230f      	movs	r3, #15
 8000a56:	2500      	movs	r5, #0
 8000a58:	4033      	ands	r3, r6
 8000a5a:	2b04      	cmp	r3, #4
 8000a5c:	d1a7      	bne.n	80009ae <__aeabi_fadd+0xee>
 8000a5e:	2001      	movs	r0, #1
 8000a60:	0172      	lsls	r2, r6, #5
 8000a62:	d57c      	bpl.n	8000b5e <__aeabi_fadd+0x29e>
 8000a64:	b2c0      	uxtb	r0, r0
 8000a66:	01b2      	lsls	r2, r6, #6
 8000a68:	0a52      	lsrs	r2, r2, #9
 8000a6a:	e7a8      	b.n	80009be <__aeabi_fadd+0xfe>
 8000a6c:	0773      	lsls	r3, r6, #29
 8000a6e:	d003      	beq.n	8000a78 <__aeabi_fadd+0x1b8>
 8000a70:	230f      	movs	r3, #15
 8000a72:	4033      	ands	r3, r6
 8000a74:	2b04      	cmp	r3, #4
 8000a76:	d19a      	bne.n	80009ae <__aeabi_fadd+0xee>
 8000a78:	002b      	movs	r3, r5
 8000a7a:	e767      	b.n	800094c <__aeabi_fadd+0x8c>
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d023      	beq.n	8000ac8 <__aeabi_fadd+0x208>
 8000a80:	1b53      	subs	r3, r2, r5
 8000a82:	2d00      	cmp	r5, #0
 8000a84:	d17b      	bne.n	8000b7e <__aeabi_fadd+0x2be>
 8000a86:	2e00      	cmp	r6, #0
 8000a88:	d100      	bne.n	8000a8c <__aeabi_fadd+0x1cc>
 8000a8a:	e086      	b.n	8000b9a <__aeabi_fadd+0x2da>
 8000a8c:	1e5d      	subs	r5, r3, #1
 8000a8e:	2b01      	cmp	r3, #1
 8000a90:	d100      	bne.n	8000a94 <__aeabi_fadd+0x1d4>
 8000a92:	e08b      	b.n	8000bac <__aeabi_fadd+0x2ec>
 8000a94:	2bff      	cmp	r3, #255	@ 0xff
 8000a96:	d002      	beq.n	8000a9e <__aeabi_fadd+0x1de>
 8000a98:	002b      	movs	r3, r5
 8000a9a:	e075      	b.n	8000b88 <__aeabi_fadd+0x2c8>
 8000a9c:	464c      	mov	r4, r9
 8000a9e:	4667      	mov	r7, ip
 8000aa0:	2f00      	cmp	r7, #0
 8000aa2:	d100      	bne.n	8000aa6 <__aeabi_fadd+0x1e6>
 8000aa4:	e789      	b.n	80009ba <__aeabi_fadd+0xfa>
 8000aa6:	2280      	movs	r2, #128	@ 0x80
 8000aa8:	03d2      	lsls	r2, r2, #15
 8000aaa:	433a      	orrs	r2, r7
 8000aac:	0252      	lsls	r2, r2, #9
 8000aae:	20ff      	movs	r0, #255	@ 0xff
 8000ab0:	0a52      	lsrs	r2, r2, #9
 8000ab2:	e784      	b.n	80009be <__aeabi_fadd+0xfe>
 8000ab4:	1a77      	subs	r7, r6, r1
 8000ab6:	017b      	lsls	r3, r7, #5
 8000ab8:	d46b      	bmi.n	8000b92 <__aeabi_fadd+0x2d2>
 8000aba:	2f00      	cmp	r7, #0
 8000abc:	d000      	beq.n	8000ac0 <__aeabi_fadd+0x200>
 8000abe:	e765      	b.n	800098c <__aeabi_fadd+0xcc>
 8000ac0:	2400      	movs	r4, #0
 8000ac2:	2000      	movs	r0, #0
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	e77a      	b.n	80009be <__aeabi_fadd+0xfe>
 8000ac8:	22fe      	movs	r2, #254	@ 0xfe
 8000aca:	1c6b      	adds	r3, r5, #1
 8000acc:	421a      	tst	r2, r3
 8000ace:	d149      	bne.n	8000b64 <__aeabi_fadd+0x2a4>
 8000ad0:	2d00      	cmp	r5, #0
 8000ad2:	d000      	beq.n	8000ad6 <__aeabi_fadd+0x216>
 8000ad4:	e09f      	b.n	8000c16 <__aeabi_fadd+0x356>
 8000ad6:	2e00      	cmp	r6, #0
 8000ad8:	d100      	bne.n	8000adc <__aeabi_fadd+0x21c>
 8000ada:	e0ba      	b.n	8000c52 <__aeabi_fadd+0x392>
 8000adc:	2900      	cmp	r1, #0
 8000ade:	d100      	bne.n	8000ae2 <__aeabi_fadd+0x222>
 8000ae0:	e0cf      	b.n	8000c82 <__aeabi_fadd+0x3c2>
 8000ae2:	1872      	adds	r2, r6, r1
 8000ae4:	0153      	lsls	r3, r2, #5
 8000ae6:	d400      	bmi.n	8000aea <__aeabi_fadd+0x22a>
 8000ae8:	e0cd      	b.n	8000c86 <__aeabi_fadd+0x3c6>
 8000aea:	0192      	lsls	r2, r2, #6
 8000aec:	2001      	movs	r0, #1
 8000aee:	0a52      	lsrs	r2, r2, #9
 8000af0:	e765      	b.n	80009be <__aeabi_fadd+0xfe>
 8000af2:	2aff      	cmp	r2, #255	@ 0xff
 8000af4:	d0d2      	beq.n	8000a9c <__aeabi_fadd+0x1dc>
 8000af6:	2080      	movs	r0, #128	@ 0x80
 8000af8:	04c0      	lsls	r0, r0, #19
 8000afa:	4306      	orrs	r6, r0
 8000afc:	2001      	movs	r0, #1
 8000afe:	2b1b      	cmp	r3, #27
 8000b00:	dc08      	bgt.n	8000b14 <__aeabi_fadd+0x254>
 8000b02:	0030      	movs	r0, r6
 8000b04:	2420      	movs	r4, #32
 8000b06:	40d8      	lsrs	r0, r3
 8000b08:	1ae3      	subs	r3, r4, r3
 8000b0a:	409e      	lsls	r6, r3
 8000b0c:	0033      	movs	r3, r6
 8000b0e:	1e5c      	subs	r4, r3, #1
 8000b10:	41a3      	sbcs	r3, r4
 8000b12:	4318      	orrs	r0, r3
 8000b14:	464c      	mov	r4, r9
 8000b16:	0015      	movs	r5, r2
 8000b18:	1a0e      	subs	r6, r1, r0
 8000b1a:	e732      	b.n	8000982 <__aeabi_fadd+0xc2>
 8000b1c:	0008      	movs	r0, r1
 8000b1e:	2220      	movs	r2, #32
 8000b20:	40d8      	lsrs	r0, r3
 8000b22:	1ad3      	subs	r3, r2, r3
 8000b24:	4099      	lsls	r1, r3
 8000b26:	000b      	movs	r3, r1
 8000b28:	1e5a      	subs	r2, r3, #1
 8000b2a:	4193      	sbcs	r3, r2
 8000b2c:	4303      	orrs	r3, r0
 8000b2e:	18f6      	adds	r6, r6, r3
 8000b30:	0173      	lsls	r3, r6, #5
 8000b32:	d59b      	bpl.n	8000a6c <__aeabi_fadd+0x1ac>
 8000b34:	3501      	adds	r5, #1
 8000b36:	2dff      	cmp	r5, #255	@ 0xff
 8000b38:	d100      	bne.n	8000b3c <__aeabi_fadd+0x27c>
 8000b3a:	e73e      	b.n	80009ba <__aeabi_fadd+0xfa>
 8000b3c:	2301      	movs	r3, #1
 8000b3e:	494d      	ldr	r1, [pc, #308]	@ (8000c74 <__aeabi_fadd+0x3b4>)
 8000b40:	0872      	lsrs	r2, r6, #1
 8000b42:	4033      	ands	r3, r6
 8000b44:	400a      	ands	r2, r1
 8000b46:	431a      	orrs	r2, r3
 8000b48:	0016      	movs	r6, r2
 8000b4a:	0753      	lsls	r3, r2, #29
 8000b4c:	d004      	beq.n	8000b58 <__aeabi_fadd+0x298>
 8000b4e:	230f      	movs	r3, #15
 8000b50:	4013      	ands	r3, r2
 8000b52:	2b04      	cmp	r3, #4
 8000b54:	d000      	beq.n	8000b58 <__aeabi_fadd+0x298>
 8000b56:	e72a      	b.n	80009ae <__aeabi_fadd+0xee>
 8000b58:	0173      	lsls	r3, r6, #5
 8000b5a:	d500      	bpl.n	8000b5e <__aeabi_fadd+0x29e>
 8000b5c:	e72a      	b.n	80009b4 <__aeabi_fadd+0xf4>
 8000b5e:	002b      	movs	r3, r5
 8000b60:	08f7      	lsrs	r7, r6, #3
 8000b62:	e6f7      	b.n	8000954 <__aeabi_fadd+0x94>
 8000b64:	2bff      	cmp	r3, #255	@ 0xff
 8000b66:	d100      	bne.n	8000b6a <__aeabi_fadd+0x2aa>
 8000b68:	e727      	b.n	80009ba <__aeabi_fadd+0xfa>
 8000b6a:	1871      	adds	r1, r6, r1
 8000b6c:	0849      	lsrs	r1, r1, #1
 8000b6e:	074a      	lsls	r2, r1, #29
 8000b70:	d02f      	beq.n	8000bd2 <__aeabi_fadd+0x312>
 8000b72:	220f      	movs	r2, #15
 8000b74:	400a      	ands	r2, r1
 8000b76:	2a04      	cmp	r2, #4
 8000b78:	d02b      	beq.n	8000bd2 <__aeabi_fadd+0x312>
 8000b7a:	1d0e      	adds	r6, r1, #4
 8000b7c:	e6e6      	b.n	800094c <__aeabi_fadd+0x8c>
 8000b7e:	2aff      	cmp	r2, #255	@ 0xff
 8000b80:	d08d      	beq.n	8000a9e <__aeabi_fadd+0x1de>
 8000b82:	2080      	movs	r0, #128	@ 0x80
 8000b84:	04c0      	lsls	r0, r0, #19
 8000b86:	4306      	orrs	r6, r0
 8000b88:	2b1b      	cmp	r3, #27
 8000b8a:	dd24      	ble.n	8000bd6 <__aeabi_fadd+0x316>
 8000b8c:	0013      	movs	r3, r2
 8000b8e:	1d4e      	adds	r6, r1, #5
 8000b90:	e6dc      	b.n	800094c <__aeabi_fadd+0x8c>
 8000b92:	464c      	mov	r4, r9
 8000b94:	1b8f      	subs	r7, r1, r6
 8000b96:	e6f9      	b.n	800098c <__aeabi_fadd+0xcc>
 8000b98:	464c      	mov	r4, r9
 8000b9a:	000e      	movs	r6, r1
 8000b9c:	e6d6      	b.n	800094c <__aeabi_fadd+0x8c>
 8000b9e:	2e00      	cmp	r6, #0
 8000ba0:	d149      	bne.n	8000c36 <__aeabi_fadd+0x376>
 8000ba2:	2900      	cmp	r1, #0
 8000ba4:	d068      	beq.n	8000c78 <__aeabi_fadd+0x3b8>
 8000ba6:	4667      	mov	r7, ip
 8000ba8:	464c      	mov	r4, r9
 8000baa:	e77c      	b.n	8000aa6 <__aeabi_fadd+0x1e6>
 8000bac:	1870      	adds	r0, r6, r1
 8000bae:	0143      	lsls	r3, r0, #5
 8000bb0:	d574      	bpl.n	8000c9c <__aeabi_fadd+0x3dc>
 8000bb2:	4930      	ldr	r1, [pc, #192]	@ (8000c74 <__aeabi_fadd+0x3b4>)
 8000bb4:	0840      	lsrs	r0, r0, #1
 8000bb6:	4001      	ands	r1, r0
 8000bb8:	0743      	lsls	r3, r0, #29
 8000bba:	d009      	beq.n	8000bd0 <__aeabi_fadd+0x310>
 8000bbc:	230f      	movs	r3, #15
 8000bbe:	4003      	ands	r3, r0
 8000bc0:	2b04      	cmp	r3, #4
 8000bc2:	d005      	beq.n	8000bd0 <__aeabi_fadd+0x310>
 8000bc4:	2302      	movs	r3, #2
 8000bc6:	1d0e      	adds	r6, r1, #4
 8000bc8:	e6c0      	b.n	800094c <__aeabi_fadd+0x8c>
 8000bca:	2301      	movs	r3, #1
 8000bcc:	08cf      	lsrs	r7, r1, #3
 8000bce:	e6c1      	b.n	8000954 <__aeabi_fadd+0x94>
 8000bd0:	2302      	movs	r3, #2
 8000bd2:	08cf      	lsrs	r7, r1, #3
 8000bd4:	e6be      	b.n	8000954 <__aeabi_fadd+0x94>
 8000bd6:	2520      	movs	r5, #32
 8000bd8:	0030      	movs	r0, r6
 8000bda:	40d8      	lsrs	r0, r3
 8000bdc:	1aeb      	subs	r3, r5, r3
 8000bde:	409e      	lsls	r6, r3
 8000be0:	0033      	movs	r3, r6
 8000be2:	1e5d      	subs	r5, r3, #1
 8000be4:	41ab      	sbcs	r3, r5
 8000be6:	4303      	orrs	r3, r0
 8000be8:	0015      	movs	r5, r2
 8000bea:	185e      	adds	r6, r3, r1
 8000bec:	e7a0      	b.n	8000b30 <__aeabi_fadd+0x270>
 8000bee:	2900      	cmp	r1, #0
 8000bf0:	d100      	bne.n	8000bf4 <__aeabi_fadd+0x334>
 8000bf2:	e765      	b.n	8000ac0 <__aeabi_fadd+0x200>
 8000bf4:	464c      	mov	r4, r9
 8000bf6:	4667      	mov	r7, ip
 8000bf8:	e6ac      	b.n	8000954 <__aeabi_fadd+0x94>
 8000bfa:	1b8f      	subs	r7, r1, r6
 8000bfc:	017b      	lsls	r3, r7, #5
 8000bfe:	d52e      	bpl.n	8000c5e <__aeabi_fadd+0x39e>
 8000c00:	01bf      	lsls	r7, r7, #6
 8000c02:	09bf      	lsrs	r7, r7, #6
 8000c04:	0038      	movs	r0, r7
 8000c06:	f002 ff0f 	bl	8003a28 <__clzsi2>
 8000c0a:	003b      	movs	r3, r7
 8000c0c:	3805      	subs	r0, #5
 8000c0e:	4083      	lsls	r3, r0
 8000c10:	464c      	mov	r4, r9
 8000c12:	3501      	adds	r5, #1
 8000c14:	e710      	b.n	8000a38 <__aeabi_fadd+0x178>
 8000c16:	2e00      	cmp	r6, #0
 8000c18:	d100      	bne.n	8000c1c <__aeabi_fadd+0x35c>
 8000c1a:	e740      	b.n	8000a9e <__aeabi_fadd+0x1de>
 8000c1c:	2900      	cmp	r1, #0
 8000c1e:	d100      	bne.n	8000c22 <__aeabi_fadd+0x362>
 8000c20:	e741      	b.n	8000aa6 <__aeabi_fadd+0x1e6>
 8000c22:	2380      	movs	r3, #128	@ 0x80
 8000c24:	03db      	lsls	r3, r3, #15
 8000c26:	429f      	cmp	r7, r3
 8000c28:	d200      	bcs.n	8000c2c <__aeabi_fadd+0x36c>
 8000c2a:	e73c      	b.n	8000aa6 <__aeabi_fadd+0x1e6>
 8000c2c:	459c      	cmp	ip, r3
 8000c2e:	d300      	bcc.n	8000c32 <__aeabi_fadd+0x372>
 8000c30:	e739      	b.n	8000aa6 <__aeabi_fadd+0x1e6>
 8000c32:	4667      	mov	r7, ip
 8000c34:	e737      	b.n	8000aa6 <__aeabi_fadd+0x1e6>
 8000c36:	2900      	cmp	r1, #0
 8000c38:	d100      	bne.n	8000c3c <__aeabi_fadd+0x37c>
 8000c3a:	e734      	b.n	8000aa6 <__aeabi_fadd+0x1e6>
 8000c3c:	2380      	movs	r3, #128	@ 0x80
 8000c3e:	03db      	lsls	r3, r3, #15
 8000c40:	429f      	cmp	r7, r3
 8000c42:	d200      	bcs.n	8000c46 <__aeabi_fadd+0x386>
 8000c44:	e72f      	b.n	8000aa6 <__aeabi_fadd+0x1e6>
 8000c46:	459c      	cmp	ip, r3
 8000c48:	d300      	bcc.n	8000c4c <__aeabi_fadd+0x38c>
 8000c4a:	e72c      	b.n	8000aa6 <__aeabi_fadd+0x1e6>
 8000c4c:	464c      	mov	r4, r9
 8000c4e:	4667      	mov	r7, ip
 8000c50:	e729      	b.n	8000aa6 <__aeabi_fadd+0x1e6>
 8000c52:	2900      	cmp	r1, #0
 8000c54:	d100      	bne.n	8000c58 <__aeabi_fadd+0x398>
 8000c56:	e734      	b.n	8000ac2 <__aeabi_fadd+0x202>
 8000c58:	2300      	movs	r3, #0
 8000c5a:	08cf      	lsrs	r7, r1, #3
 8000c5c:	e67a      	b.n	8000954 <__aeabi_fadd+0x94>
 8000c5e:	464c      	mov	r4, r9
 8000c60:	2301      	movs	r3, #1
 8000c62:	08ff      	lsrs	r7, r7, #3
 8000c64:	e676      	b.n	8000954 <__aeabi_fadd+0x94>
 8000c66:	2f00      	cmp	r7, #0
 8000c68:	d100      	bne.n	8000c6c <__aeabi_fadd+0x3ac>
 8000c6a:	e729      	b.n	8000ac0 <__aeabi_fadd+0x200>
 8000c6c:	08ff      	lsrs	r7, r7, #3
 8000c6e:	e671      	b.n	8000954 <__aeabi_fadd+0x94>
 8000c70:	fbffffff 	.word	0xfbffffff
 8000c74:	7dffffff 	.word	0x7dffffff
 8000c78:	2280      	movs	r2, #128	@ 0x80
 8000c7a:	2400      	movs	r4, #0
 8000c7c:	20ff      	movs	r0, #255	@ 0xff
 8000c7e:	03d2      	lsls	r2, r2, #15
 8000c80:	e69d      	b.n	80009be <__aeabi_fadd+0xfe>
 8000c82:	2300      	movs	r3, #0
 8000c84:	e666      	b.n	8000954 <__aeabi_fadd+0x94>
 8000c86:	2300      	movs	r3, #0
 8000c88:	08d7      	lsrs	r7, r2, #3
 8000c8a:	e663      	b.n	8000954 <__aeabi_fadd+0x94>
 8000c8c:	2001      	movs	r0, #1
 8000c8e:	0172      	lsls	r2, r6, #5
 8000c90:	d500      	bpl.n	8000c94 <__aeabi_fadd+0x3d4>
 8000c92:	e6e7      	b.n	8000a64 <__aeabi_fadd+0x1a4>
 8000c94:	0031      	movs	r1, r6
 8000c96:	2300      	movs	r3, #0
 8000c98:	08cf      	lsrs	r7, r1, #3
 8000c9a:	e65b      	b.n	8000954 <__aeabi_fadd+0x94>
 8000c9c:	2301      	movs	r3, #1
 8000c9e:	08c7      	lsrs	r7, r0, #3
 8000ca0:	e658      	b.n	8000954 <__aeabi_fadd+0x94>
 8000ca2:	46c0      	nop			@ (mov r8, r8)

08000ca4 <__aeabi_fdiv>:
 8000ca4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000ca6:	4646      	mov	r6, r8
 8000ca8:	464f      	mov	r7, r9
 8000caa:	46d6      	mov	lr, sl
 8000cac:	0245      	lsls	r5, r0, #9
 8000cae:	b5c0      	push	{r6, r7, lr}
 8000cb0:	0fc3      	lsrs	r3, r0, #31
 8000cb2:	0047      	lsls	r7, r0, #1
 8000cb4:	4698      	mov	r8, r3
 8000cb6:	1c0e      	adds	r6, r1, #0
 8000cb8:	0a6d      	lsrs	r5, r5, #9
 8000cba:	0e3f      	lsrs	r7, r7, #24
 8000cbc:	d05b      	beq.n	8000d76 <__aeabi_fdiv+0xd2>
 8000cbe:	2fff      	cmp	r7, #255	@ 0xff
 8000cc0:	d021      	beq.n	8000d06 <__aeabi_fdiv+0x62>
 8000cc2:	2380      	movs	r3, #128	@ 0x80
 8000cc4:	00ed      	lsls	r5, r5, #3
 8000cc6:	04db      	lsls	r3, r3, #19
 8000cc8:	431d      	orrs	r5, r3
 8000cca:	2300      	movs	r3, #0
 8000ccc:	4699      	mov	r9, r3
 8000cce:	469a      	mov	sl, r3
 8000cd0:	3f7f      	subs	r7, #127	@ 0x7f
 8000cd2:	0274      	lsls	r4, r6, #9
 8000cd4:	0073      	lsls	r3, r6, #1
 8000cd6:	0a64      	lsrs	r4, r4, #9
 8000cd8:	0e1b      	lsrs	r3, r3, #24
 8000cda:	0ff6      	lsrs	r6, r6, #31
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d020      	beq.n	8000d22 <__aeabi_fdiv+0x7e>
 8000ce0:	2bff      	cmp	r3, #255	@ 0xff
 8000ce2:	d043      	beq.n	8000d6c <__aeabi_fdiv+0xc8>
 8000ce4:	2280      	movs	r2, #128	@ 0x80
 8000ce6:	2000      	movs	r0, #0
 8000ce8:	00e4      	lsls	r4, r4, #3
 8000cea:	04d2      	lsls	r2, r2, #19
 8000cec:	4314      	orrs	r4, r2
 8000cee:	3b7f      	subs	r3, #127	@ 0x7f
 8000cf0:	4642      	mov	r2, r8
 8000cf2:	1aff      	subs	r7, r7, r3
 8000cf4:	464b      	mov	r3, r9
 8000cf6:	4072      	eors	r2, r6
 8000cf8:	2b0f      	cmp	r3, #15
 8000cfa:	d900      	bls.n	8000cfe <__aeabi_fdiv+0x5a>
 8000cfc:	e09d      	b.n	8000e3a <__aeabi_fdiv+0x196>
 8000cfe:	4971      	ldr	r1, [pc, #452]	@ (8000ec4 <__aeabi_fdiv+0x220>)
 8000d00:	009b      	lsls	r3, r3, #2
 8000d02:	58cb      	ldr	r3, [r1, r3]
 8000d04:	469f      	mov	pc, r3
 8000d06:	2d00      	cmp	r5, #0
 8000d08:	d15a      	bne.n	8000dc0 <__aeabi_fdiv+0x11c>
 8000d0a:	2308      	movs	r3, #8
 8000d0c:	4699      	mov	r9, r3
 8000d0e:	3b06      	subs	r3, #6
 8000d10:	0274      	lsls	r4, r6, #9
 8000d12:	469a      	mov	sl, r3
 8000d14:	0073      	lsls	r3, r6, #1
 8000d16:	27ff      	movs	r7, #255	@ 0xff
 8000d18:	0a64      	lsrs	r4, r4, #9
 8000d1a:	0e1b      	lsrs	r3, r3, #24
 8000d1c:	0ff6      	lsrs	r6, r6, #31
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d1de      	bne.n	8000ce0 <__aeabi_fdiv+0x3c>
 8000d22:	2c00      	cmp	r4, #0
 8000d24:	d13b      	bne.n	8000d9e <__aeabi_fdiv+0xfa>
 8000d26:	2301      	movs	r3, #1
 8000d28:	4642      	mov	r2, r8
 8000d2a:	4649      	mov	r1, r9
 8000d2c:	4072      	eors	r2, r6
 8000d2e:	4319      	orrs	r1, r3
 8000d30:	290e      	cmp	r1, #14
 8000d32:	d818      	bhi.n	8000d66 <__aeabi_fdiv+0xc2>
 8000d34:	4864      	ldr	r0, [pc, #400]	@ (8000ec8 <__aeabi_fdiv+0x224>)
 8000d36:	0089      	lsls	r1, r1, #2
 8000d38:	5841      	ldr	r1, [r0, r1]
 8000d3a:	468f      	mov	pc, r1
 8000d3c:	4653      	mov	r3, sl
 8000d3e:	2b02      	cmp	r3, #2
 8000d40:	d100      	bne.n	8000d44 <__aeabi_fdiv+0xa0>
 8000d42:	e0b8      	b.n	8000eb6 <__aeabi_fdiv+0x212>
 8000d44:	2b03      	cmp	r3, #3
 8000d46:	d06e      	beq.n	8000e26 <__aeabi_fdiv+0x182>
 8000d48:	4642      	mov	r2, r8
 8000d4a:	002c      	movs	r4, r5
 8000d4c:	2b01      	cmp	r3, #1
 8000d4e:	d140      	bne.n	8000dd2 <__aeabi_fdiv+0x12e>
 8000d50:	2000      	movs	r0, #0
 8000d52:	2400      	movs	r4, #0
 8000d54:	05c0      	lsls	r0, r0, #23
 8000d56:	4320      	orrs	r0, r4
 8000d58:	07d2      	lsls	r2, r2, #31
 8000d5a:	4310      	orrs	r0, r2
 8000d5c:	bce0      	pop	{r5, r6, r7}
 8000d5e:	46ba      	mov	sl, r7
 8000d60:	46b1      	mov	r9, r6
 8000d62:	46a8      	mov	r8, r5
 8000d64:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000d66:	20ff      	movs	r0, #255	@ 0xff
 8000d68:	2400      	movs	r4, #0
 8000d6a:	e7f3      	b.n	8000d54 <__aeabi_fdiv+0xb0>
 8000d6c:	2c00      	cmp	r4, #0
 8000d6e:	d120      	bne.n	8000db2 <__aeabi_fdiv+0x10e>
 8000d70:	2302      	movs	r3, #2
 8000d72:	3fff      	subs	r7, #255	@ 0xff
 8000d74:	e7d8      	b.n	8000d28 <__aeabi_fdiv+0x84>
 8000d76:	2d00      	cmp	r5, #0
 8000d78:	d105      	bne.n	8000d86 <__aeabi_fdiv+0xe2>
 8000d7a:	2304      	movs	r3, #4
 8000d7c:	4699      	mov	r9, r3
 8000d7e:	3b03      	subs	r3, #3
 8000d80:	2700      	movs	r7, #0
 8000d82:	469a      	mov	sl, r3
 8000d84:	e7a5      	b.n	8000cd2 <__aeabi_fdiv+0x2e>
 8000d86:	0028      	movs	r0, r5
 8000d88:	f002 fe4e 	bl	8003a28 <__clzsi2>
 8000d8c:	2776      	movs	r7, #118	@ 0x76
 8000d8e:	1f43      	subs	r3, r0, #5
 8000d90:	409d      	lsls	r5, r3
 8000d92:	2300      	movs	r3, #0
 8000d94:	427f      	negs	r7, r7
 8000d96:	4699      	mov	r9, r3
 8000d98:	469a      	mov	sl, r3
 8000d9a:	1a3f      	subs	r7, r7, r0
 8000d9c:	e799      	b.n	8000cd2 <__aeabi_fdiv+0x2e>
 8000d9e:	0020      	movs	r0, r4
 8000da0:	f002 fe42 	bl	8003a28 <__clzsi2>
 8000da4:	1f43      	subs	r3, r0, #5
 8000da6:	409c      	lsls	r4, r3
 8000da8:	2376      	movs	r3, #118	@ 0x76
 8000daa:	425b      	negs	r3, r3
 8000dac:	1a1b      	subs	r3, r3, r0
 8000dae:	2000      	movs	r0, #0
 8000db0:	e79e      	b.n	8000cf0 <__aeabi_fdiv+0x4c>
 8000db2:	2303      	movs	r3, #3
 8000db4:	464a      	mov	r2, r9
 8000db6:	431a      	orrs	r2, r3
 8000db8:	4691      	mov	r9, r2
 8000dba:	2003      	movs	r0, #3
 8000dbc:	33fc      	adds	r3, #252	@ 0xfc
 8000dbe:	e797      	b.n	8000cf0 <__aeabi_fdiv+0x4c>
 8000dc0:	230c      	movs	r3, #12
 8000dc2:	4699      	mov	r9, r3
 8000dc4:	3b09      	subs	r3, #9
 8000dc6:	27ff      	movs	r7, #255	@ 0xff
 8000dc8:	469a      	mov	sl, r3
 8000dca:	e782      	b.n	8000cd2 <__aeabi_fdiv+0x2e>
 8000dcc:	2803      	cmp	r0, #3
 8000dce:	d02c      	beq.n	8000e2a <__aeabi_fdiv+0x186>
 8000dd0:	0032      	movs	r2, r6
 8000dd2:	0038      	movs	r0, r7
 8000dd4:	307f      	adds	r0, #127	@ 0x7f
 8000dd6:	2800      	cmp	r0, #0
 8000dd8:	dd47      	ble.n	8000e6a <__aeabi_fdiv+0x1c6>
 8000dda:	0763      	lsls	r3, r4, #29
 8000ddc:	d004      	beq.n	8000de8 <__aeabi_fdiv+0x144>
 8000dde:	230f      	movs	r3, #15
 8000de0:	4023      	ands	r3, r4
 8000de2:	2b04      	cmp	r3, #4
 8000de4:	d000      	beq.n	8000de8 <__aeabi_fdiv+0x144>
 8000de6:	3404      	adds	r4, #4
 8000de8:	0123      	lsls	r3, r4, #4
 8000dea:	d503      	bpl.n	8000df4 <__aeabi_fdiv+0x150>
 8000dec:	0038      	movs	r0, r7
 8000dee:	4b37      	ldr	r3, [pc, #220]	@ (8000ecc <__aeabi_fdiv+0x228>)
 8000df0:	3080      	adds	r0, #128	@ 0x80
 8000df2:	401c      	ands	r4, r3
 8000df4:	28fe      	cmp	r0, #254	@ 0xfe
 8000df6:	dcb6      	bgt.n	8000d66 <__aeabi_fdiv+0xc2>
 8000df8:	01a4      	lsls	r4, r4, #6
 8000dfa:	0a64      	lsrs	r4, r4, #9
 8000dfc:	b2c0      	uxtb	r0, r0
 8000dfe:	e7a9      	b.n	8000d54 <__aeabi_fdiv+0xb0>
 8000e00:	2480      	movs	r4, #128	@ 0x80
 8000e02:	2200      	movs	r2, #0
 8000e04:	20ff      	movs	r0, #255	@ 0xff
 8000e06:	03e4      	lsls	r4, r4, #15
 8000e08:	e7a4      	b.n	8000d54 <__aeabi_fdiv+0xb0>
 8000e0a:	2380      	movs	r3, #128	@ 0x80
 8000e0c:	03db      	lsls	r3, r3, #15
 8000e0e:	421d      	tst	r5, r3
 8000e10:	d001      	beq.n	8000e16 <__aeabi_fdiv+0x172>
 8000e12:	421c      	tst	r4, r3
 8000e14:	d00b      	beq.n	8000e2e <__aeabi_fdiv+0x18a>
 8000e16:	2480      	movs	r4, #128	@ 0x80
 8000e18:	03e4      	lsls	r4, r4, #15
 8000e1a:	432c      	orrs	r4, r5
 8000e1c:	0264      	lsls	r4, r4, #9
 8000e1e:	4642      	mov	r2, r8
 8000e20:	20ff      	movs	r0, #255	@ 0xff
 8000e22:	0a64      	lsrs	r4, r4, #9
 8000e24:	e796      	b.n	8000d54 <__aeabi_fdiv+0xb0>
 8000e26:	4646      	mov	r6, r8
 8000e28:	002c      	movs	r4, r5
 8000e2a:	2380      	movs	r3, #128	@ 0x80
 8000e2c:	03db      	lsls	r3, r3, #15
 8000e2e:	431c      	orrs	r4, r3
 8000e30:	0264      	lsls	r4, r4, #9
 8000e32:	0032      	movs	r2, r6
 8000e34:	20ff      	movs	r0, #255	@ 0xff
 8000e36:	0a64      	lsrs	r4, r4, #9
 8000e38:	e78c      	b.n	8000d54 <__aeabi_fdiv+0xb0>
 8000e3a:	016d      	lsls	r5, r5, #5
 8000e3c:	0160      	lsls	r0, r4, #5
 8000e3e:	4285      	cmp	r5, r0
 8000e40:	d22d      	bcs.n	8000e9e <__aeabi_fdiv+0x1fa>
 8000e42:	231b      	movs	r3, #27
 8000e44:	2400      	movs	r4, #0
 8000e46:	3f01      	subs	r7, #1
 8000e48:	2601      	movs	r6, #1
 8000e4a:	0029      	movs	r1, r5
 8000e4c:	0064      	lsls	r4, r4, #1
 8000e4e:	006d      	lsls	r5, r5, #1
 8000e50:	2900      	cmp	r1, #0
 8000e52:	db01      	blt.n	8000e58 <__aeabi_fdiv+0x1b4>
 8000e54:	4285      	cmp	r5, r0
 8000e56:	d301      	bcc.n	8000e5c <__aeabi_fdiv+0x1b8>
 8000e58:	1a2d      	subs	r5, r5, r0
 8000e5a:	4334      	orrs	r4, r6
 8000e5c:	3b01      	subs	r3, #1
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d1f3      	bne.n	8000e4a <__aeabi_fdiv+0x1a6>
 8000e62:	1e6b      	subs	r3, r5, #1
 8000e64:	419d      	sbcs	r5, r3
 8000e66:	432c      	orrs	r4, r5
 8000e68:	e7b3      	b.n	8000dd2 <__aeabi_fdiv+0x12e>
 8000e6a:	2301      	movs	r3, #1
 8000e6c:	1a1b      	subs	r3, r3, r0
 8000e6e:	2b1b      	cmp	r3, #27
 8000e70:	dd00      	ble.n	8000e74 <__aeabi_fdiv+0x1d0>
 8000e72:	e76d      	b.n	8000d50 <__aeabi_fdiv+0xac>
 8000e74:	0021      	movs	r1, r4
 8000e76:	379e      	adds	r7, #158	@ 0x9e
 8000e78:	40d9      	lsrs	r1, r3
 8000e7a:	40bc      	lsls	r4, r7
 8000e7c:	000b      	movs	r3, r1
 8000e7e:	1e61      	subs	r1, r4, #1
 8000e80:	418c      	sbcs	r4, r1
 8000e82:	4323      	orrs	r3, r4
 8000e84:	0759      	lsls	r1, r3, #29
 8000e86:	d004      	beq.n	8000e92 <__aeabi_fdiv+0x1ee>
 8000e88:	210f      	movs	r1, #15
 8000e8a:	4019      	ands	r1, r3
 8000e8c:	2904      	cmp	r1, #4
 8000e8e:	d000      	beq.n	8000e92 <__aeabi_fdiv+0x1ee>
 8000e90:	3304      	adds	r3, #4
 8000e92:	0159      	lsls	r1, r3, #5
 8000e94:	d413      	bmi.n	8000ebe <__aeabi_fdiv+0x21a>
 8000e96:	019b      	lsls	r3, r3, #6
 8000e98:	2000      	movs	r0, #0
 8000e9a:	0a5c      	lsrs	r4, r3, #9
 8000e9c:	e75a      	b.n	8000d54 <__aeabi_fdiv+0xb0>
 8000e9e:	231a      	movs	r3, #26
 8000ea0:	2401      	movs	r4, #1
 8000ea2:	1a2d      	subs	r5, r5, r0
 8000ea4:	e7d0      	b.n	8000e48 <__aeabi_fdiv+0x1a4>
 8000ea6:	1e98      	subs	r0, r3, #2
 8000ea8:	4243      	negs	r3, r0
 8000eaa:	4158      	adcs	r0, r3
 8000eac:	4240      	negs	r0, r0
 8000eae:	0032      	movs	r2, r6
 8000eb0:	2400      	movs	r4, #0
 8000eb2:	b2c0      	uxtb	r0, r0
 8000eb4:	e74e      	b.n	8000d54 <__aeabi_fdiv+0xb0>
 8000eb6:	4642      	mov	r2, r8
 8000eb8:	20ff      	movs	r0, #255	@ 0xff
 8000eba:	2400      	movs	r4, #0
 8000ebc:	e74a      	b.n	8000d54 <__aeabi_fdiv+0xb0>
 8000ebe:	2001      	movs	r0, #1
 8000ec0:	2400      	movs	r4, #0
 8000ec2:	e747      	b.n	8000d54 <__aeabi_fdiv+0xb0>
 8000ec4:	0802dc80 	.word	0x0802dc80
 8000ec8:	0802dcc0 	.word	0x0802dcc0
 8000ecc:	f7ffffff 	.word	0xf7ffffff

08000ed0 <__eqsf2>:
 8000ed0:	b570      	push	{r4, r5, r6, lr}
 8000ed2:	0042      	lsls	r2, r0, #1
 8000ed4:	024e      	lsls	r6, r1, #9
 8000ed6:	004c      	lsls	r4, r1, #1
 8000ed8:	0245      	lsls	r5, r0, #9
 8000eda:	0a6d      	lsrs	r5, r5, #9
 8000edc:	0e12      	lsrs	r2, r2, #24
 8000ede:	0fc3      	lsrs	r3, r0, #31
 8000ee0:	0a76      	lsrs	r6, r6, #9
 8000ee2:	0e24      	lsrs	r4, r4, #24
 8000ee4:	0fc9      	lsrs	r1, r1, #31
 8000ee6:	2aff      	cmp	r2, #255	@ 0xff
 8000ee8:	d010      	beq.n	8000f0c <__eqsf2+0x3c>
 8000eea:	2cff      	cmp	r4, #255	@ 0xff
 8000eec:	d00c      	beq.n	8000f08 <__eqsf2+0x38>
 8000eee:	2001      	movs	r0, #1
 8000ef0:	42a2      	cmp	r2, r4
 8000ef2:	d10a      	bne.n	8000f0a <__eqsf2+0x3a>
 8000ef4:	42b5      	cmp	r5, r6
 8000ef6:	d108      	bne.n	8000f0a <__eqsf2+0x3a>
 8000ef8:	428b      	cmp	r3, r1
 8000efa:	d00f      	beq.n	8000f1c <__eqsf2+0x4c>
 8000efc:	2a00      	cmp	r2, #0
 8000efe:	d104      	bne.n	8000f0a <__eqsf2+0x3a>
 8000f00:	0028      	movs	r0, r5
 8000f02:	1e43      	subs	r3, r0, #1
 8000f04:	4198      	sbcs	r0, r3
 8000f06:	e000      	b.n	8000f0a <__eqsf2+0x3a>
 8000f08:	2001      	movs	r0, #1
 8000f0a:	bd70      	pop	{r4, r5, r6, pc}
 8000f0c:	2001      	movs	r0, #1
 8000f0e:	2cff      	cmp	r4, #255	@ 0xff
 8000f10:	d1fb      	bne.n	8000f0a <__eqsf2+0x3a>
 8000f12:	4335      	orrs	r5, r6
 8000f14:	d1f9      	bne.n	8000f0a <__eqsf2+0x3a>
 8000f16:	404b      	eors	r3, r1
 8000f18:	0018      	movs	r0, r3
 8000f1a:	e7f6      	b.n	8000f0a <__eqsf2+0x3a>
 8000f1c:	2000      	movs	r0, #0
 8000f1e:	e7f4      	b.n	8000f0a <__eqsf2+0x3a>

08000f20 <__gesf2>:
 8000f20:	b530      	push	{r4, r5, lr}
 8000f22:	0042      	lsls	r2, r0, #1
 8000f24:	0244      	lsls	r4, r0, #9
 8000f26:	024d      	lsls	r5, r1, #9
 8000f28:	0fc3      	lsrs	r3, r0, #31
 8000f2a:	0048      	lsls	r0, r1, #1
 8000f2c:	0a64      	lsrs	r4, r4, #9
 8000f2e:	0e12      	lsrs	r2, r2, #24
 8000f30:	0a6d      	lsrs	r5, r5, #9
 8000f32:	0e00      	lsrs	r0, r0, #24
 8000f34:	0fc9      	lsrs	r1, r1, #31
 8000f36:	2aff      	cmp	r2, #255	@ 0xff
 8000f38:	d018      	beq.n	8000f6c <__gesf2+0x4c>
 8000f3a:	28ff      	cmp	r0, #255	@ 0xff
 8000f3c:	d00a      	beq.n	8000f54 <__gesf2+0x34>
 8000f3e:	2a00      	cmp	r2, #0
 8000f40:	d11e      	bne.n	8000f80 <__gesf2+0x60>
 8000f42:	2800      	cmp	r0, #0
 8000f44:	d10a      	bne.n	8000f5c <__gesf2+0x3c>
 8000f46:	2d00      	cmp	r5, #0
 8000f48:	d029      	beq.n	8000f9e <__gesf2+0x7e>
 8000f4a:	2c00      	cmp	r4, #0
 8000f4c:	d12d      	bne.n	8000faa <__gesf2+0x8a>
 8000f4e:	0048      	lsls	r0, r1, #1
 8000f50:	3801      	subs	r0, #1
 8000f52:	bd30      	pop	{r4, r5, pc}
 8000f54:	2d00      	cmp	r5, #0
 8000f56:	d125      	bne.n	8000fa4 <__gesf2+0x84>
 8000f58:	2a00      	cmp	r2, #0
 8000f5a:	d101      	bne.n	8000f60 <__gesf2+0x40>
 8000f5c:	2c00      	cmp	r4, #0
 8000f5e:	d0f6      	beq.n	8000f4e <__gesf2+0x2e>
 8000f60:	428b      	cmp	r3, r1
 8000f62:	d019      	beq.n	8000f98 <__gesf2+0x78>
 8000f64:	2001      	movs	r0, #1
 8000f66:	425b      	negs	r3, r3
 8000f68:	4318      	orrs	r0, r3
 8000f6a:	e7f2      	b.n	8000f52 <__gesf2+0x32>
 8000f6c:	2c00      	cmp	r4, #0
 8000f6e:	d119      	bne.n	8000fa4 <__gesf2+0x84>
 8000f70:	28ff      	cmp	r0, #255	@ 0xff
 8000f72:	d1f7      	bne.n	8000f64 <__gesf2+0x44>
 8000f74:	2d00      	cmp	r5, #0
 8000f76:	d115      	bne.n	8000fa4 <__gesf2+0x84>
 8000f78:	2000      	movs	r0, #0
 8000f7a:	428b      	cmp	r3, r1
 8000f7c:	d1f2      	bne.n	8000f64 <__gesf2+0x44>
 8000f7e:	e7e8      	b.n	8000f52 <__gesf2+0x32>
 8000f80:	2800      	cmp	r0, #0
 8000f82:	d0ef      	beq.n	8000f64 <__gesf2+0x44>
 8000f84:	428b      	cmp	r3, r1
 8000f86:	d1ed      	bne.n	8000f64 <__gesf2+0x44>
 8000f88:	4282      	cmp	r2, r0
 8000f8a:	dceb      	bgt.n	8000f64 <__gesf2+0x44>
 8000f8c:	db04      	blt.n	8000f98 <__gesf2+0x78>
 8000f8e:	42ac      	cmp	r4, r5
 8000f90:	d8e8      	bhi.n	8000f64 <__gesf2+0x44>
 8000f92:	2000      	movs	r0, #0
 8000f94:	42ac      	cmp	r4, r5
 8000f96:	d2dc      	bcs.n	8000f52 <__gesf2+0x32>
 8000f98:	0058      	lsls	r0, r3, #1
 8000f9a:	3801      	subs	r0, #1
 8000f9c:	e7d9      	b.n	8000f52 <__gesf2+0x32>
 8000f9e:	2c00      	cmp	r4, #0
 8000fa0:	d0d7      	beq.n	8000f52 <__gesf2+0x32>
 8000fa2:	e7df      	b.n	8000f64 <__gesf2+0x44>
 8000fa4:	2002      	movs	r0, #2
 8000fa6:	4240      	negs	r0, r0
 8000fa8:	e7d3      	b.n	8000f52 <__gesf2+0x32>
 8000faa:	428b      	cmp	r3, r1
 8000fac:	d1da      	bne.n	8000f64 <__gesf2+0x44>
 8000fae:	e7ee      	b.n	8000f8e <__gesf2+0x6e>

08000fb0 <__lesf2>:
 8000fb0:	b530      	push	{r4, r5, lr}
 8000fb2:	0042      	lsls	r2, r0, #1
 8000fb4:	0244      	lsls	r4, r0, #9
 8000fb6:	024d      	lsls	r5, r1, #9
 8000fb8:	0fc3      	lsrs	r3, r0, #31
 8000fba:	0048      	lsls	r0, r1, #1
 8000fbc:	0a64      	lsrs	r4, r4, #9
 8000fbe:	0e12      	lsrs	r2, r2, #24
 8000fc0:	0a6d      	lsrs	r5, r5, #9
 8000fc2:	0e00      	lsrs	r0, r0, #24
 8000fc4:	0fc9      	lsrs	r1, r1, #31
 8000fc6:	2aff      	cmp	r2, #255	@ 0xff
 8000fc8:	d017      	beq.n	8000ffa <__lesf2+0x4a>
 8000fca:	28ff      	cmp	r0, #255	@ 0xff
 8000fcc:	d00a      	beq.n	8000fe4 <__lesf2+0x34>
 8000fce:	2a00      	cmp	r2, #0
 8000fd0:	d11b      	bne.n	800100a <__lesf2+0x5a>
 8000fd2:	2800      	cmp	r0, #0
 8000fd4:	d10a      	bne.n	8000fec <__lesf2+0x3c>
 8000fd6:	2d00      	cmp	r5, #0
 8000fd8:	d01d      	beq.n	8001016 <__lesf2+0x66>
 8000fda:	2c00      	cmp	r4, #0
 8000fdc:	d12d      	bne.n	800103a <__lesf2+0x8a>
 8000fde:	0048      	lsls	r0, r1, #1
 8000fe0:	3801      	subs	r0, #1
 8000fe2:	e011      	b.n	8001008 <__lesf2+0x58>
 8000fe4:	2d00      	cmp	r5, #0
 8000fe6:	d10e      	bne.n	8001006 <__lesf2+0x56>
 8000fe8:	2a00      	cmp	r2, #0
 8000fea:	d101      	bne.n	8000ff0 <__lesf2+0x40>
 8000fec:	2c00      	cmp	r4, #0
 8000fee:	d0f6      	beq.n	8000fde <__lesf2+0x2e>
 8000ff0:	428b      	cmp	r3, r1
 8000ff2:	d10c      	bne.n	800100e <__lesf2+0x5e>
 8000ff4:	0058      	lsls	r0, r3, #1
 8000ff6:	3801      	subs	r0, #1
 8000ff8:	e006      	b.n	8001008 <__lesf2+0x58>
 8000ffa:	2c00      	cmp	r4, #0
 8000ffc:	d103      	bne.n	8001006 <__lesf2+0x56>
 8000ffe:	28ff      	cmp	r0, #255	@ 0xff
 8001000:	d105      	bne.n	800100e <__lesf2+0x5e>
 8001002:	2d00      	cmp	r5, #0
 8001004:	d015      	beq.n	8001032 <__lesf2+0x82>
 8001006:	2002      	movs	r0, #2
 8001008:	bd30      	pop	{r4, r5, pc}
 800100a:	2800      	cmp	r0, #0
 800100c:	d106      	bne.n	800101c <__lesf2+0x6c>
 800100e:	2001      	movs	r0, #1
 8001010:	425b      	negs	r3, r3
 8001012:	4318      	orrs	r0, r3
 8001014:	e7f8      	b.n	8001008 <__lesf2+0x58>
 8001016:	2c00      	cmp	r4, #0
 8001018:	d0f6      	beq.n	8001008 <__lesf2+0x58>
 800101a:	e7f8      	b.n	800100e <__lesf2+0x5e>
 800101c:	428b      	cmp	r3, r1
 800101e:	d1f6      	bne.n	800100e <__lesf2+0x5e>
 8001020:	4282      	cmp	r2, r0
 8001022:	dcf4      	bgt.n	800100e <__lesf2+0x5e>
 8001024:	dbe6      	blt.n	8000ff4 <__lesf2+0x44>
 8001026:	42ac      	cmp	r4, r5
 8001028:	d8f1      	bhi.n	800100e <__lesf2+0x5e>
 800102a:	2000      	movs	r0, #0
 800102c:	42ac      	cmp	r4, r5
 800102e:	d2eb      	bcs.n	8001008 <__lesf2+0x58>
 8001030:	e7e0      	b.n	8000ff4 <__lesf2+0x44>
 8001032:	2000      	movs	r0, #0
 8001034:	428b      	cmp	r3, r1
 8001036:	d1ea      	bne.n	800100e <__lesf2+0x5e>
 8001038:	e7e6      	b.n	8001008 <__lesf2+0x58>
 800103a:	428b      	cmp	r3, r1
 800103c:	d1e7      	bne.n	800100e <__lesf2+0x5e>
 800103e:	e7f2      	b.n	8001026 <__lesf2+0x76>

08001040 <__aeabi_fmul>:
 8001040:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001042:	464f      	mov	r7, r9
 8001044:	4646      	mov	r6, r8
 8001046:	46d6      	mov	lr, sl
 8001048:	0044      	lsls	r4, r0, #1
 800104a:	b5c0      	push	{r6, r7, lr}
 800104c:	0246      	lsls	r6, r0, #9
 800104e:	1c0f      	adds	r7, r1, #0
 8001050:	0a76      	lsrs	r6, r6, #9
 8001052:	0e24      	lsrs	r4, r4, #24
 8001054:	0fc5      	lsrs	r5, r0, #31
 8001056:	2c00      	cmp	r4, #0
 8001058:	d100      	bne.n	800105c <__aeabi_fmul+0x1c>
 800105a:	e0da      	b.n	8001212 <__aeabi_fmul+0x1d2>
 800105c:	2cff      	cmp	r4, #255	@ 0xff
 800105e:	d074      	beq.n	800114a <__aeabi_fmul+0x10a>
 8001060:	2380      	movs	r3, #128	@ 0x80
 8001062:	00f6      	lsls	r6, r6, #3
 8001064:	04db      	lsls	r3, r3, #19
 8001066:	431e      	orrs	r6, r3
 8001068:	2300      	movs	r3, #0
 800106a:	4699      	mov	r9, r3
 800106c:	469a      	mov	sl, r3
 800106e:	3c7f      	subs	r4, #127	@ 0x7f
 8001070:	027b      	lsls	r3, r7, #9
 8001072:	0a5b      	lsrs	r3, r3, #9
 8001074:	4698      	mov	r8, r3
 8001076:	007b      	lsls	r3, r7, #1
 8001078:	0e1b      	lsrs	r3, r3, #24
 800107a:	0fff      	lsrs	r7, r7, #31
 800107c:	2b00      	cmp	r3, #0
 800107e:	d074      	beq.n	800116a <__aeabi_fmul+0x12a>
 8001080:	2bff      	cmp	r3, #255	@ 0xff
 8001082:	d100      	bne.n	8001086 <__aeabi_fmul+0x46>
 8001084:	e08e      	b.n	80011a4 <__aeabi_fmul+0x164>
 8001086:	4642      	mov	r2, r8
 8001088:	2180      	movs	r1, #128	@ 0x80
 800108a:	00d2      	lsls	r2, r2, #3
 800108c:	04c9      	lsls	r1, r1, #19
 800108e:	4311      	orrs	r1, r2
 8001090:	3b7f      	subs	r3, #127	@ 0x7f
 8001092:	002a      	movs	r2, r5
 8001094:	18e4      	adds	r4, r4, r3
 8001096:	464b      	mov	r3, r9
 8001098:	407a      	eors	r2, r7
 800109a:	4688      	mov	r8, r1
 800109c:	b2d2      	uxtb	r2, r2
 800109e:	2b0a      	cmp	r3, #10
 80010a0:	dc75      	bgt.n	800118e <__aeabi_fmul+0x14e>
 80010a2:	464b      	mov	r3, r9
 80010a4:	2000      	movs	r0, #0
 80010a6:	2b02      	cmp	r3, #2
 80010a8:	dd0f      	ble.n	80010ca <__aeabi_fmul+0x8a>
 80010aa:	4649      	mov	r1, r9
 80010ac:	2301      	movs	r3, #1
 80010ae:	408b      	lsls	r3, r1
 80010b0:	21a6      	movs	r1, #166	@ 0xa6
 80010b2:	00c9      	lsls	r1, r1, #3
 80010b4:	420b      	tst	r3, r1
 80010b6:	d169      	bne.n	800118c <__aeabi_fmul+0x14c>
 80010b8:	2190      	movs	r1, #144	@ 0x90
 80010ba:	0089      	lsls	r1, r1, #2
 80010bc:	420b      	tst	r3, r1
 80010be:	d000      	beq.n	80010c2 <__aeabi_fmul+0x82>
 80010c0:	e100      	b.n	80012c4 <__aeabi_fmul+0x284>
 80010c2:	2188      	movs	r1, #136	@ 0x88
 80010c4:	4219      	tst	r1, r3
 80010c6:	d000      	beq.n	80010ca <__aeabi_fmul+0x8a>
 80010c8:	e0f5      	b.n	80012b6 <__aeabi_fmul+0x276>
 80010ca:	4641      	mov	r1, r8
 80010cc:	0409      	lsls	r1, r1, #16
 80010ce:	0c09      	lsrs	r1, r1, #16
 80010d0:	4643      	mov	r3, r8
 80010d2:	0008      	movs	r0, r1
 80010d4:	0c35      	lsrs	r5, r6, #16
 80010d6:	0436      	lsls	r6, r6, #16
 80010d8:	0c1b      	lsrs	r3, r3, #16
 80010da:	0c36      	lsrs	r6, r6, #16
 80010dc:	4370      	muls	r0, r6
 80010de:	4369      	muls	r1, r5
 80010e0:	435e      	muls	r6, r3
 80010e2:	435d      	muls	r5, r3
 80010e4:	1876      	adds	r6, r6, r1
 80010e6:	0c03      	lsrs	r3, r0, #16
 80010e8:	199b      	adds	r3, r3, r6
 80010ea:	4299      	cmp	r1, r3
 80010ec:	d903      	bls.n	80010f6 <__aeabi_fmul+0xb6>
 80010ee:	2180      	movs	r1, #128	@ 0x80
 80010f0:	0249      	lsls	r1, r1, #9
 80010f2:	468c      	mov	ip, r1
 80010f4:	4465      	add	r5, ip
 80010f6:	0400      	lsls	r0, r0, #16
 80010f8:	0419      	lsls	r1, r3, #16
 80010fa:	0c00      	lsrs	r0, r0, #16
 80010fc:	1809      	adds	r1, r1, r0
 80010fe:	018e      	lsls	r6, r1, #6
 8001100:	1e70      	subs	r0, r6, #1
 8001102:	4186      	sbcs	r6, r0
 8001104:	0c1b      	lsrs	r3, r3, #16
 8001106:	0e89      	lsrs	r1, r1, #26
 8001108:	195b      	adds	r3, r3, r5
 800110a:	430e      	orrs	r6, r1
 800110c:	019b      	lsls	r3, r3, #6
 800110e:	431e      	orrs	r6, r3
 8001110:	011b      	lsls	r3, r3, #4
 8001112:	d46c      	bmi.n	80011ee <__aeabi_fmul+0x1ae>
 8001114:	0023      	movs	r3, r4
 8001116:	337f      	adds	r3, #127	@ 0x7f
 8001118:	2b00      	cmp	r3, #0
 800111a:	dc00      	bgt.n	800111e <__aeabi_fmul+0xde>
 800111c:	e0b1      	b.n	8001282 <__aeabi_fmul+0x242>
 800111e:	0015      	movs	r5, r2
 8001120:	0771      	lsls	r1, r6, #29
 8001122:	d00b      	beq.n	800113c <__aeabi_fmul+0xfc>
 8001124:	200f      	movs	r0, #15
 8001126:	0021      	movs	r1, r4
 8001128:	4030      	ands	r0, r6
 800112a:	2804      	cmp	r0, #4
 800112c:	d006      	beq.n	800113c <__aeabi_fmul+0xfc>
 800112e:	3604      	adds	r6, #4
 8001130:	0132      	lsls	r2, r6, #4
 8001132:	d503      	bpl.n	800113c <__aeabi_fmul+0xfc>
 8001134:	4b6e      	ldr	r3, [pc, #440]	@ (80012f0 <__aeabi_fmul+0x2b0>)
 8001136:	401e      	ands	r6, r3
 8001138:	000b      	movs	r3, r1
 800113a:	3380      	adds	r3, #128	@ 0x80
 800113c:	2bfe      	cmp	r3, #254	@ 0xfe
 800113e:	dd00      	ble.n	8001142 <__aeabi_fmul+0x102>
 8001140:	e0bd      	b.n	80012be <__aeabi_fmul+0x27e>
 8001142:	01b2      	lsls	r2, r6, #6
 8001144:	0a52      	lsrs	r2, r2, #9
 8001146:	b2db      	uxtb	r3, r3
 8001148:	e048      	b.n	80011dc <__aeabi_fmul+0x19c>
 800114a:	2e00      	cmp	r6, #0
 800114c:	d000      	beq.n	8001150 <__aeabi_fmul+0x110>
 800114e:	e092      	b.n	8001276 <__aeabi_fmul+0x236>
 8001150:	2308      	movs	r3, #8
 8001152:	4699      	mov	r9, r3
 8001154:	3b06      	subs	r3, #6
 8001156:	469a      	mov	sl, r3
 8001158:	027b      	lsls	r3, r7, #9
 800115a:	0a5b      	lsrs	r3, r3, #9
 800115c:	4698      	mov	r8, r3
 800115e:	007b      	lsls	r3, r7, #1
 8001160:	24ff      	movs	r4, #255	@ 0xff
 8001162:	0e1b      	lsrs	r3, r3, #24
 8001164:	0fff      	lsrs	r7, r7, #31
 8001166:	2b00      	cmp	r3, #0
 8001168:	d18a      	bne.n	8001080 <__aeabi_fmul+0x40>
 800116a:	4642      	mov	r2, r8
 800116c:	2a00      	cmp	r2, #0
 800116e:	d164      	bne.n	800123a <__aeabi_fmul+0x1fa>
 8001170:	4649      	mov	r1, r9
 8001172:	3201      	adds	r2, #1
 8001174:	4311      	orrs	r1, r2
 8001176:	4689      	mov	r9, r1
 8001178:	290a      	cmp	r1, #10
 800117a:	dc08      	bgt.n	800118e <__aeabi_fmul+0x14e>
 800117c:	407d      	eors	r5, r7
 800117e:	2001      	movs	r0, #1
 8001180:	b2ea      	uxtb	r2, r5
 8001182:	2902      	cmp	r1, #2
 8001184:	dc91      	bgt.n	80010aa <__aeabi_fmul+0x6a>
 8001186:	0015      	movs	r5, r2
 8001188:	2200      	movs	r2, #0
 800118a:	e027      	b.n	80011dc <__aeabi_fmul+0x19c>
 800118c:	0015      	movs	r5, r2
 800118e:	4653      	mov	r3, sl
 8001190:	2b02      	cmp	r3, #2
 8001192:	d100      	bne.n	8001196 <__aeabi_fmul+0x156>
 8001194:	e093      	b.n	80012be <__aeabi_fmul+0x27e>
 8001196:	2b03      	cmp	r3, #3
 8001198:	d01a      	beq.n	80011d0 <__aeabi_fmul+0x190>
 800119a:	2b01      	cmp	r3, #1
 800119c:	d12c      	bne.n	80011f8 <__aeabi_fmul+0x1b8>
 800119e:	2300      	movs	r3, #0
 80011a0:	2200      	movs	r2, #0
 80011a2:	e01b      	b.n	80011dc <__aeabi_fmul+0x19c>
 80011a4:	4643      	mov	r3, r8
 80011a6:	34ff      	adds	r4, #255	@ 0xff
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d055      	beq.n	8001258 <__aeabi_fmul+0x218>
 80011ac:	2103      	movs	r1, #3
 80011ae:	464b      	mov	r3, r9
 80011b0:	430b      	orrs	r3, r1
 80011b2:	0019      	movs	r1, r3
 80011b4:	2b0a      	cmp	r3, #10
 80011b6:	dc00      	bgt.n	80011ba <__aeabi_fmul+0x17a>
 80011b8:	e092      	b.n	80012e0 <__aeabi_fmul+0x2a0>
 80011ba:	2b0f      	cmp	r3, #15
 80011bc:	d000      	beq.n	80011c0 <__aeabi_fmul+0x180>
 80011be:	e08c      	b.n	80012da <__aeabi_fmul+0x29a>
 80011c0:	2280      	movs	r2, #128	@ 0x80
 80011c2:	03d2      	lsls	r2, r2, #15
 80011c4:	4216      	tst	r6, r2
 80011c6:	d003      	beq.n	80011d0 <__aeabi_fmul+0x190>
 80011c8:	4643      	mov	r3, r8
 80011ca:	4213      	tst	r3, r2
 80011cc:	d100      	bne.n	80011d0 <__aeabi_fmul+0x190>
 80011ce:	e07d      	b.n	80012cc <__aeabi_fmul+0x28c>
 80011d0:	2280      	movs	r2, #128	@ 0x80
 80011d2:	03d2      	lsls	r2, r2, #15
 80011d4:	4332      	orrs	r2, r6
 80011d6:	0252      	lsls	r2, r2, #9
 80011d8:	0a52      	lsrs	r2, r2, #9
 80011da:	23ff      	movs	r3, #255	@ 0xff
 80011dc:	05d8      	lsls	r0, r3, #23
 80011de:	07ed      	lsls	r5, r5, #31
 80011e0:	4310      	orrs	r0, r2
 80011e2:	4328      	orrs	r0, r5
 80011e4:	bce0      	pop	{r5, r6, r7}
 80011e6:	46ba      	mov	sl, r7
 80011e8:	46b1      	mov	r9, r6
 80011ea:	46a8      	mov	r8, r5
 80011ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80011ee:	2301      	movs	r3, #1
 80011f0:	0015      	movs	r5, r2
 80011f2:	0871      	lsrs	r1, r6, #1
 80011f4:	401e      	ands	r6, r3
 80011f6:	430e      	orrs	r6, r1
 80011f8:	0023      	movs	r3, r4
 80011fa:	3380      	adds	r3, #128	@ 0x80
 80011fc:	1c61      	adds	r1, r4, #1
 80011fe:	2b00      	cmp	r3, #0
 8001200:	dd41      	ble.n	8001286 <__aeabi_fmul+0x246>
 8001202:	0772      	lsls	r2, r6, #29
 8001204:	d094      	beq.n	8001130 <__aeabi_fmul+0xf0>
 8001206:	220f      	movs	r2, #15
 8001208:	4032      	ands	r2, r6
 800120a:	2a04      	cmp	r2, #4
 800120c:	d000      	beq.n	8001210 <__aeabi_fmul+0x1d0>
 800120e:	e78e      	b.n	800112e <__aeabi_fmul+0xee>
 8001210:	e78e      	b.n	8001130 <__aeabi_fmul+0xf0>
 8001212:	2e00      	cmp	r6, #0
 8001214:	d105      	bne.n	8001222 <__aeabi_fmul+0x1e2>
 8001216:	2304      	movs	r3, #4
 8001218:	4699      	mov	r9, r3
 800121a:	3b03      	subs	r3, #3
 800121c:	2400      	movs	r4, #0
 800121e:	469a      	mov	sl, r3
 8001220:	e726      	b.n	8001070 <__aeabi_fmul+0x30>
 8001222:	0030      	movs	r0, r6
 8001224:	f002 fc00 	bl	8003a28 <__clzsi2>
 8001228:	2476      	movs	r4, #118	@ 0x76
 800122a:	1f43      	subs	r3, r0, #5
 800122c:	409e      	lsls	r6, r3
 800122e:	2300      	movs	r3, #0
 8001230:	4264      	negs	r4, r4
 8001232:	4699      	mov	r9, r3
 8001234:	469a      	mov	sl, r3
 8001236:	1a24      	subs	r4, r4, r0
 8001238:	e71a      	b.n	8001070 <__aeabi_fmul+0x30>
 800123a:	4640      	mov	r0, r8
 800123c:	f002 fbf4 	bl	8003a28 <__clzsi2>
 8001240:	464b      	mov	r3, r9
 8001242:	1a24      	subs	r4, r4, r0
 8001244:	3c76      	subs	r4, #118	@ 0x76
 8001246:	2b0a      	cmp	r3, #10
 8001248:	dca1      	bgt.n	800118e <__aeabi_fmul+0x14e>
 800124a:	4643      	mov	r3, r8
 800124c:	3805      	subs	r0, #5
 800124e:	4083      	lsls	r3, r0
 8001250:	407d      	eors	r5, r7
 8001252:	4698      	mov	r8, r3
 8001254:	b2ea      	uxtb	r2, r5
 8001256:	e724      	b.n	80010a2 <__aeabi_fmul+0x62>
 8001258:	464a      	mov	r2, r9
 800125a:	3302      	adds	r3, #2
 800125c:	4313      	orrs	r3, r2
 800125e:	002a      	movs	r2, r5
 8001260:	407a      	eors	r2, r7
 8001262:	b2d2      	uxtb	r2, r2
 8001264:	2b0a      	cmp	r3, #10
 8001266:	dc92      	bgt.n	800118e <__aeabi_fmul+0x14e>
 8001268:	4649      	mov	r1, r9
 800126a:	0015      	movs	r5, r2
 800126c:	2900      	cmp	r1, #0
 800126e:	d026      	beq.n	80012be <__aeabi_fmul+0x27e>
 8001270:	4699      	mov	r9, r3
 8001272:	2002      	movs	r0, #2
 8001274:	e719      	b.n	80010aa <__aeabi_fmul+0x6a>
 8001276:	230c      	movs	r3, #12
 8001278:	4699      	mov	r9, r3
 800127a:	3b09      	subs	r3, #9
 800127c:	24ff      	movs	r4, #255	@ 0xff
 800127e:	469a      	mov	sl, r3
 8001280:	e6f6      	b.n	8001070 <__aeabi_fmul+0x30>
 8001282:	0015      	movs	r5, r2
 8001284:	0021      	movs	r1, r4
 8001286:	2201      	movs	r2, #1
 8001288:	1ad3      	subs	r3, r2, r3
 800128a:	2b1b      	cmp	r3, #27
 800128c:	dd00      	ble.n	8001290 <__aeabi_fmul+0x250>
 800128e:	e786      	b.n	800119e <__aeabi_fmul+0x15e>
 8001290:	319e      	adds	r1, #158	@ 0x9e
 8001292:	0032      	movs	r2, r6
 8001294:	408e      	lsls	r6, r1
 8001296:	40da      	lsrs	r2, r3
 8001298:	1e73      	subs	r3, r6, #1
 800129a:	419e      	sbcs	r6, r3
 800129c:	4332      	orrs	r2, r6
 800129e:	0753      	lsls	r3, r2, #29
 80012a0:	d004      	beq.n	80012ac <__aeabi_fmul+0x26c>
 80012a2:	230f      	movs	r3, #15
 80012a4:	4013      	ands	r3, r2
 80012a6:	2b04      	cmp	r3, #4
 80012a8:	d000      	beq.n	80012ac <__aeabi_fmul+0x26c>
 80012aa:	3204      	adds	r2, #4
 80012ac:	0153      	lsls	r3, r2, #5
 80012ae:	d510      	bpl.n	80012d2 <__aeabi_fmul+0x292>
 80012b0:	2301      	movs	r3, #1
 80012b2:	2200      	movs	r2, #0
 80012b4:	e792      	b.n	80011dc <__aeabi_fmul+0x19c>
 80012b6:	003d      	movs	r5, r7
 80012b8:	4646      	mov	r6, r8
 80012ba:	4682      	mov	sl, r0
 80012bc:	e767      	b.n	800118e <__aeabi_fmul+0x14e>
 80012be:	23ff      	movs	r3, #255	@ 0xff
 80012c0:	2200      	movs	r2, #0
 80012c2:	e78b      	b.n	80011dc <__aeabi_fmul+0x19c>
 80012c4:	2280      	movs	r2, #128	@ 0x80
 80012c6:	2500      	movs	r5, #0
 80012c8:	03d2      	lsls	r2, r2, #15
 80012ca:	e786      	b.n	80011da <__aeabi_fmul+0x19a>
 80012cc:	003d      	movs	r5, r7
 80012ce:	431a      	orrs	r2, r3
 80012d0:	e783      	b.n	80011da <__aeabi_fmul+0x19a>
 80012d2:	0192      	lsls	r2, r2, #6
 80012d4:	2300      	movs	r3, #0
 80012d6:	0a52      	lsrs	r2, r2, #9
 80012d8:	e780      	b.n	80011dc <__aeabi_fmul+0x19c>
 80012da:	003d      	movs	r5, r7
 80012dc:	4646      	mov	r6, r8
 80012de:	e777      	b.n	80011d0 <__aeabi_fmul+0x190>
 80012e0:	002a      	movs	r2, r5
 80012e2:	2301      	movs	r3, #1
 80012e4:	407a      	eors	r2, r7
 80012e6:	408b      	lsls	r3, r1
 80012e8:	2003      	movs	r0, #3
 80012ea:	b2d2      	uxtb	r2, r2
 80012ec:	e6e9      	b.n	80010c2 <__aeabi_fmul+0x82>
 80012ee:	46c0      	nop			@ (mov r8, r8)
 80012f0:	f7ffffff 	.word	0xf7ffffff

080012f4 <__aeabi_fsub>:
 80012f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80012f6:	4647      	mov	r7, r8
 80012f8:	46ce      	mov	lr, r9
 80012fa:	0243      	lsls	r3, r0, #9
 80012fc:	b580      	push	{r7, lr}
 80012fe:	0a5f      	lsrs	r7, r3, #9
 8001300:	099b      	lsrs	r3, r3, #6
 8001302:	0045      	lsls	r5, r0, #1
 8001304:	004a      	lsls	r2, r1, #1
 8001306:	469c      	mov	ip, r3
 8001308:	024b      	lsls	r3, r1, #9
 800130a:	0fc4      	lsrs	r4, r0, #31
 800130c:	0fce      	lsrs	r6, r1, #31
 800130e:	0e2d      	lsrs	r5, r5, #24
 8001310:	0a58      	lsrs	r0, r3, #9
 8001312:	0e12      	lsrs	r2, r2, #24
 8001314:	0999      	lsrs	r1, r3, #6
 8001316:	2aff      	cmp	r2, #255	@ 0xff
 8001318:	d06b      	beq.n	80013f2 <__aeabi_fsub+0xfe>
 800131a:	2301      	movs	r3, #1
 800131c:	405e      	eors	r6, r3
 800131e:	1aab      	subs	r3, r5, r2
 8001320:	42b4      	cmp	r4, r6
 8001322:	d04b      	beq.n	80013bc <__aeabi_fsub+0xc8>
 8001324:	2b00      	cmp	r3, #0
 8001326:	dc00      	bgt.n	800132a <__aeabi_fsub+0x36>
 8001328:	e0ff      	b.n	800152a <__aeabi_fsub+0x236>
 800132a:	2a00      	cmp	r2, #0
 800132c:	d100      	bne.n	8001330 <__aeabi_fsub+0x3c>
 800132e:	e088      	b.n	8001442 <__aeabi_fsub+0x14e>
 8001330:	2dff      	cmp	r5, #255	@ 0xff
 8001332:	d100      	bne.n	8001336 <__aeabi_fsub+0x42>
 8001334:	e0ef      	b.n	8001516 <__aeabi_fsub+0x222>
 8001336:	2280      	movs	r2, #128	@ 0x80
 8001338:	04d2      	lsls	r2, r2, #19
 800133a:	4311      	orrs	r1, r2
 800133c:	2001      	movs	r0, #1
 800133e:	2b1b      	cmp	r3, #27
 8001340:	dc08      	bgt.n	8001354 <__aeabi_fsub+0x60>
 8001342:	0008      	movs	r0, r1
 8001344:	2220      	movs	r2, #32
 8001346:	40d8      	lsrs	r0, r3
 8001348:	1ad3      	subs	r3, r2, r3
 800134a:	4099      	lsls	r1, r3
 800134c:	000b      	movs	r3, r1
 800134e:	1e5a      	subs	r2, r3, #1
 8001350:	4193      	sbcs	r3, r2
 8001352:	4318      	orrs	r0, r3
 8001354:	4663      	mov	r3, ip
 8001356:	1a1b      	subs	r3, r3, r0
 8001358:	469c      	mov	ip, r3
 800135a:	4663      	mov	r3, ip
 800135c:	015b      	lsls	r3, r3, #5
 800135e:	d400      	bmi.n	8001362 <__aeabi_fsub+0x6e>
 8001360:	e0cd      	b.n	80014fe <__aeabi_fsub+0x20a>
 8001362:	4663      	mov	r3, ip
 8001364:	019f      	lsls	r7, r3, #6
 8001366:	09bf      	lsrs	r7, r7, #6
 8001368:	0038      	movs	r0, r7
 800136a:	f002 fb5d 	bl	8003a28 <__clzsi2>
 800136e:	003b      	movs	r3, r7
 8001370:	3805      	subs	r0, #5
 8001372:	4083      	lsls	r3, r0
 8001374:	4285      	cmp	r5, r0
 8001376:	dc00      	bgt.n	800137a <__aeabi_fsub+0x86>
 8001378:	e0a2      	b.n	80014c0 <__aeabi_fsub+0x1cc>
 800137a:	4ab7      	ldr	r2, [pc, #732]	@ (8001658 <__aeabi_fsub+0x364>)
 800137c:	1a2d      	subs	r5, r5, r0
 800137e:	401a      	ands	r2, r3
 8001380:	4694      	mov	ip, r2
 8001382:	075a      	lsls	r2, r3, #29
 8001384:	d100      	bne.n	8001388 <__aeabi_fsub+0x94>
 8001386:	e0c3      	b.n	8001510 <__aeabi_fsub+0x21c>
 8001388:	220f      	movs	r2, #15
 800138a:	4013      	ands	r3, r2
 800138c:	2b04      	cmp	r3, #4
 800138e:	d100      	bne.n	8001392 <__aeabi_fsub+0x9e>
 8001390:	e0be      	b.n	8001510 <__aeabi_fsub+0x21c>
 8001392:	2304      	movs	r3, #4
 8001394:	4698      	mov	r8, r3
 8001396:	44c4      	add	ip, r8
 8001398:	4663      	mov	r3, ip
 800139a:	015b      	lsls	r3, r3, #5
 800139c:	d400      	bmi.n	80013a0 <__aeabi_fsub+0xac>
 800139e:	e0b7      	b.n	8001510 <__aeabi_fsub+0x21c>
 80013a0:	1c68      	adds	r0, r5, #1
 80013a2:	2dfe      	cmp	r5, #254	@ 0xfe
 80013a4:	d000      	beq.n	80013a8 <__aeabi_fsub+0xb4>
 80013a6:	e0a5      	b.n	80014f4 <__aeabi_fsub+0x200>
 80013a8:	20ff      	movs	r0, #255	@ 0xff
 80013aa:	2200      	movs	r2, #0
 80013ac:	05c0      	lsls	r0, r0, #23
 80013ae:	4310      	orrs	r0, r2
 80013b0:	07e4      	lsls	r4, r4, #31
 80013b2:	4320      	orrs	r0, r4
 80013b4:	bcc0      	pop	{r6, r7}
 80013b6:	46b9      	mov	r9, r7
 80013b8:	46b0      	mov	r8, r6
 80013ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80013bc:	2b00      	cmp	r3, #0
 80013be:	dc00      	bgt.n	80013c2 <__aeabi_fsub+0xce>
 80013c0:	e1eb      	b.n	800179a <__aeabi_fsub+0x4a6>
 80013c2:	2a00      	cmp	r2, #0
 80013c4:	d046      	beq.n	8001454 <__aeabi_fsub+0x160>
 80013c6:	2dff      	cmp	r5, #255	@ 0xff
 80013c8:	d100      	bne.n	80013cc <__aeabi_fsub+0xd8>
 80013ca:	e0a4      	b.n	8001516 <__aeabi_fsub+0x222>
 80013cc:	2280      	movs	r2, #128	@ 0x80
 80013ce:	04d2      	lsls	r2, r2, #19
 80013d0:	4311      	orrs	r1, r2
 80013d2:	2b1b      	cmp	r3, #27
 80013d4:	dc00      	bgt.n	80013d8 <__aeabi_fsub+0xe4>
 80013d6:	e0fb      	b.n	80015d0 <__aeabi_fsub+0x2dc>
 80013d8:	2305      	movs	r3, #5
 80013da:	4698      	mov	r8, r3
 80013dc:	002b      	movs	r3, r5
 80013de:	44c4      	add	ip, r8
 80013e0:	4662      	mov	r2, ip
 80013e2:	08d7      	lsrs	r7, r2, #3
 80013e4:	2bff      	cmp	r3, #255	@ 0xff
 80013e6:	d100      	bne.n	80013ea <__aeabi_fsub+0xf6>
 80013e8:	e095      	b.n	8001516 <__aeabi_fsub+0x222>
 80013ea:	027a      	lsls	r2, r7, #9
 80013ec:	0a52      	lsrs	r2, r2, #9
 80013ee:	b2d8      	uxtb	r0, r3
 80013f0:	e7dc      	b.n	80013ac <__aeabi_fsub+0xb8>
 80013f2:	002b      	movs	r3, r5
 80013f4:	3bff      	subs	r3, #255	@ 0xff
 80013f6:	4699      	mov	r9, r3
 80013f8:	2900      	cmp	r1, #0
 80013fa:	d118      	bne.n	800142e <__aeabi_fsub+0x13a>
 80013fc:	2301      	movs	r3, #1
 80013fe:	405e      	eors	r6, r3
 8001400:	42b4      	cmp	r4, r6
 8001402:	d100      	bne.n	8001406 <__aeabi_fsub+0x112>
 8001404:	e0ca      	b.n	800159c <__aeabi_fsub+0x2a8>
 8001406:	464b      	mov	r3, r9
 8001408:	2b00      	cmp	r3, #0
 800140a:	d02d      	beq.n	8001468 <__aeabi_fsub+0x174>
 800140c:	2d00      	cmp	r5, #0
 800140e:	d000      	beq.n	8001412 <__aeabi_fsub+0x11e>
 8001410:	e13c      	b.n	800168c <__aeabi_fsub+0x398>
 8001412:	23ff      	movs	r3, #255	@ 0xff
 8001414:	4664      	mov	r4, ip
 8001416:	2c00      	cmp	r4, #0
 8001418:	d100      	bne.n	800141c <__aeabi_fsub+0x128>
 800141a:	e15f      	b.n	80016dc <__aeabi_fsub+0x3e8>
 800141c:	1e5d      	subs	r5, r3, #1
 800141e:	2b01      	cmp	r3, #1
 8001420:	d100      	bne.n	8001424 <__aeabi_fsub+0x130>
 8001422:	e174      	b.n	800170e <__aeabi_fsub+0x41a>
 8001424:	0034      	movs	r4, r6
 8001426:	2bff      	cmp	r3, #255	@ 0xff
 8001428:	d074      	beq.n	8001514 <__aeabi_fsub+0x220>
 800142a:	002b      	movs	r3, r5
 800142c:	e103      	b.n	8001636 <__aeabi_fsub+0x342>
 800142e:	42b4      	cmp	r4, r6
 8001430:	d100      	bne.n	8001434 <__aeabi_fsub+0x140>
 8001432:	e09c      	b.n	800156e <__aeabi_fsub+0x27a>
 8001434:	2b00      	cmp	r3, #0
 8001436:	d017      	beq.n	8001468 <__aeabi_fsub+0x174>
 8001438:	2d00      	cmp	r5, #0
 800143a:	d0ea      	beq.n	8001412 <__aeabi_fsub+0x11e>
 800143c:	0007      	movs	r7, r0
 800143e:	0034      	movs	r4, r6
 8001440:	e06c      	b.n	800151c <__aeabi_fsub+0x228>
 8001442:	2900      	cmp	r1, #0
 8001444:	d0cc      	beq.n	80013e0 <__aeabi_fsub+0xec>
 8001446:	1e5a      	subs	r2, r3, #1
 8001448:	2b01      	cmp	r3, #1
 800144a:	d02b      	beq.n	80014a4 <__aeabi_fsub+0x1b0>
 800144c:	2bff      	cmp	r3, #255	@ 0xff
 800144e:	d062      	beq.n	8001516 <__aeabi_fsub+0x222>
 8001450:	0013      	movs	r3, r2
 8001452:	e773      	b.n	800133c <__aeabi_fsub+0x48>
 8001454:	2900      	cmp	r1, #0
 8001456:	d0c3      	beq.n	80013e0 <__aeabi_fsub+0xec>
 8001458:	1e5a      	subs	r2, r3, #1
 800145a:	2b01      	cmp	r3, #1
 800145c:	d100      	bne.n	8001460 <__aeabi_fsub+0x16c>
 800145e:	e11e      	b.n	800169e <__aeabi_fsub+0x3aa>
 8001460:	2bff      	cmp	r3, #255	@ 0xff
 8001462:	d058      	beq.n	8001516 <__aeabi_fsub+0x222>
 8001464:	0013      	movs	r3, r2
 8001466:	e7b4      	b.n	80013d2 <__aeabi_fsub+0xde>
 8001468:	22fe      	movs	r2, #254	@ 0xfe
 800146a:	1c6b      	adds	r3, r5, #1
 800146c:	421a      	tst	r2, r3
 800146e:	d10d      	bne.n	800148c <__aeabi_fsub+0x198>
 8001470:	2d00      	cmp	r5, #0
 8001472:	d060      	beq.n	8001536 <__aeabi_fsub+0x242>
 8001474:	4663      	mov	r3, ip
 8001476:	2b00      	cmp	r3, #0
 8001478:	d000      	beq.n	800147c <__aeabi_fsub+0x188>
 800147a:	e120      	b.n	80016be <__aeabi_fsub+0x3ca>
 800147c:	2900      	cmp	r1, #0
 800147e:	d000      	beq.n	8001482 <__aeabi_fsub+0x18e>
 8001480:	e128      	b.n	80016d4 <__aeabi_fsub+0x3e0>
 8001482:	2280      	movs	r2, #128	@ 0x80
 8001484:	2400      	movs	r4, #0
 8001486:	20ff      	movs	r0, #255	@ 0xff
 8001488:	03d2      	lsls	r2, r2, #15
 800148a:	e78f      	b.n	80013ac <__aeabi_fsub+0xb8>
 800148c:	4663      	mov	r3, ip
 800148e:	1a5f      	subs	r7, r3, r1
 8001490:	017b      	lsls	r3, r7, #5
 8001492:	d500      	bpl.n	8001496 <__aeabi_fsub+0x1a2>
 8001494:	e0fe      	b.n	8001694 <__aeabi_fsub+0x3a0>
 8001496:	2f00      	cmp	r7, #0
 8001498:	d000      	beq.n	800149c <__aeabi_fsub+0x1a8>
 800149a:	e765      	b.n	8001368 <__aeabi_fsub+0x74>
 800149c:	2400      	movs	r4, #0
 800149e:	2000      	movs	r0, #0
 80014a0:	2200      	movs	r2, #0
 80014a2:	e783      	b.n	80013ac <__aeabi_fsub+0xb8>
 80014a4:	4663      	mov	r3, ip
 80014a6:	1a59      	subs	r1, r3, r1
 80014a8:	014b      	lsls	r3, r1, #5
 80014aa:	d400      	bmi.n	80014ae <__aeabi_fsub+0x1ba>
 80014ac:	e119      	b.n	80016e2 <__aeabi_fsub+0x3ee>
 80014ae:	018f      	lsls	r7, r1, #6
 80014b0:	09bf      	lsrs	r7, r7, #6
 80014b2:	0038      	movs	r0, r7
 80014b4:	f002 fab8 	bl	8003a28 <__clzsi2>
 80014b8:	003b      	movs	r3, r7
 80014ba:	3805      	subs	r0, #5
 80014bc:	4083      	lsls	r3, r0
 80014be:	2501      	movs	r5, #1
 80014c0:	2220      	movs	r2, #32
 80014c2:	1b40      	subs	r0, r0, r5
 80014c4:	3001      	adds	r0, #1
 80014c6:	1a12      	subs	r2, r2, r0
 80014c8:	0019      	movs	r1, r3
 80014ca:	4093      	lsls	r3, r2
 80014cc:	40c1      	lsrs	r1, r0
 80014ce:	1e5a      	subs	r2, r3, #1
 80014d0:	4193      	sbcs	r3, r2
 80014d2:	4319      	orrs	r1, r3
 80014d4:	468c      	mov	ip, r1
 80014d6:	1e0b      	subs	r3, r1, #0
 80014d8:	d0e1      	beq.n	800149e <__aeabi_fsub+0x1aa>
 80014da:	075b      	lsls	r3, r3, #29
 80014dc:	d100      	bne.n	80014e0 <__aeabi_fsub+0x1ec>
 80014de:	e152      	b.n	8001786 <__aeabi_fsub+0x492>
 80014e0:	230f      	movs	r3, #15
 80014e2:	2500      	movs	r5, #0
 80014e4:	400b      	ands	r3, r1
 80014e6:	2b04      	cmp	r3, #4
 80014e8:	d000      	beq.n	80014ec <__aeabi_fsub+0x1f8>
 80014ea:	e752      	b.n	8001392 <__aeabi_fsub+0x9e>
 80014ec:	2001      	movs	r0, #1
 80014ee:	014a      	lsls	r2, r1, #5
 80014f0:	d400      	bmi.n	80014f4 <__aeabi_fsub+0x200>
 80014f2:	e092      	b.n	800161a <__aeabi_fsub+0x326>
 80014f4:	b2c0      	uxtb	r0, r0
 80014f6:	4663      	mov	r3, ip
 80014f8:	019a      	lsls	r2, r3, #6
 80014fa:	0a52      	lsrs	r2, r2, #9
 80014fc:	e756      	b.n	80013ac <__aeabi_fsub+0xb8>
 80014fe:	4663      	mov	r3, ip
 8001500:	075b      	lsls	r3, r3, #29
 8001502:	d005      	beq.n	8001510 <__aeabi_fsub+0x21c>
 8001504:	230f      	movs	r3, #15
 8001506:	4662      	mov	r2, ip
 8001508:	4013      	ands	r3, r2
 800150a:	2b04      	cmp	r3, #4
 800150c:	d000      	beq.n	8001510 <__aeabi_fsub+0x21c>
 800150e:	e740      	b.n	8001392 <__aeabi_fsub+0x9e>
 8001510:	002b      	movs	r3, r5
 8001512:	e765      	b.n	80013e0 <__aeabi_fsub+0xec>
 8001514:	0007      	movs	r7, r0
 8001516:	2f00      	cmp	r7, #0
 8001518:	d100      	bne.n	800151c <__aeabi_fsub+0x228>
 800151a:	e745      	b.n	80013a8 <__aeabi_fsub+0xb4>
 800151c:	2280      	movs	r2, #128	@ 0x80
 800151e:	03d2      	lsls	r2, r2, #15
 8001520:	433a      	orrs	r2, r7
 8001522:	0252      	lsls	r2, r2, #9
 8001524:	20ff      	movs	r0, #255	@ 0xff
 8001526:	0a52      	lsrs	r2, r2, #9
 8001528:	e740      	b.n	80013ac <__aeabi_fsub+0xb8>
 800152a:	2b00      	cmp	r3, #0
 800152c:	d179      	bne.n	8001622 <__aeabi_fsub+0x32e>
 800152e:	22fe      	movs	r2, #254	@ 0xfe
 8001530:	1c6b      	adds	r3, r5, #1
 8001532:	421a      	tst	r2, r3
 8001534:	d1aa      	bne.n	800148c <__aeabi_fsub+0x198>
 8001536:	4663      	mov	r3, ip
 8001538:	2b00      	cmp	r3, #0
 800153a:	d100      	bne.n	800153e <__aeabi_fsub+0x24a>
 800153c:	e0f5      	b.n	800172a <__aeabi_fsub+0x436>
 800153e:	2900      	cmp	r1, #0
 8001540:	d100      	bne.n	8001544 <__aeabi_fsub+0x250>
 8001542:	e0d1      	b.n	80016e8 <__aeabi_fsub+0x3f4>
 8001544:	1a5f      	subs	r7, r3, r1
 8001546:	2380      	movs	r3, #128	@ 0x80
 8001548:	04db      	lsls	r3, r3, #19
 800154a:	421f      	tst	r7, r3
 800154c:	d100      	bne.n	8001550 <__aeabi_fsub+0x25c>
 800154e:	e10e      	b.n	800176e <__aeabi_fsub+0x47a>
 8001550:	4662      	mov	r2, ip
 8001552:	2401      	movs	r4, #1
 8001554:	1a8a      	subs	r2, r1, r2
 8001556:	4694      	mov	ip, r2
 8001558:	2000      	movs	r0, #0
 800155a:	4034      	ands	r4, r6
 800155c:	2a00      	cmp	r2, #0
 800155e:	d100      	bne.n	8001562 <__aeabi_fsub+0x26e>
 8001560:	e724      	b.n	80013ac <__aeabi_fsub+0xb8>
 8001562:	2001      	movs	r0, #1
 8001564:	421a      	tst	r2, r3
 8001566:	d1c6      	bne.n	80014f6 <__aeabi_fsub+0x202>
 8001568:	2300      	movs	r3, #0
 800156a:	08d7      	lsrs	r7, r2, #3
 800156c:	e73d      	b.n	80013ea <__aeabi_fsub+0xf6>
 800156e:	2b00      	cmp	r3, #0
 8001570:	d017      	beq.n	80015a2 <__aeabi_fsub+0x2ae>
 8001572:	2d00      	cmp	r5, #0
 8001574:	d000      	beq.n	8001578 <__aeabi_fsub+0x284>
 8001576:	e0af      	b.n	80016d8 <__aeabi_fsub+0x3e4>
 8001578:	23ff      	movs	r3, #255	@ 0xff
 800157a:	4665      	mov	r5, ip
 800157c:	2d00      	cmp	r5, #0
 800157e:	d100      	bne.n	8001582 <__aeabi_fsub+0x28e>
 8001580:	e0ad      	b.n	80016de <__aeabi_fsub+0x3ea>
 8001582:	1e5e      	subs	r6, r3, #1
 8001584:	2b01      	cmp	r3, #1
 8001586:	d100      	bne.n	800158a <__aeabi_fsub+0x296>
 8001588:	e089      	b.n	800169e <__aeabi_fsub+0x3aa>
 800158a:	2bff      	cmp	r3, #255	@ 0xff
 800158c:	d0c2      	beq.n	8001514 <__aeabi_fsub+0x220>
 800158e:	2e1b      	cmp	r6, #27
 8001590:	dc00      	bgt.n	8001594 <__aeabi_fsub+0x2a0>
 8001592:	e0ab      	b.n	80016ec <__aeabi_fsub+0x3f8>
 8001594:	1d4b      	adds	r3, r1, #5
 8001596:	469c      	mov	ip, r3
 8001598:	0013      	movs	r3, r2
 800159a:	e721      	b.n	80013e0 <__aeabi_fsub+0xec>
 800159c:	464b      	mov	r3, r9
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d170      	bne.n	8001684 <__aeabi_fsub+0x390>
 80015a2:	22fe      	movs	r2, #254	@ 0xfe
 80015a4:	1c6b      	adds	r3, r5, #1
 80015a6:	421a      	tst	r2, r3
 80015a8:	d15e      	bne.n	8001668 <__aeabi_fsub+0x374>
 80015aa:	2d00      	cmp	r5, #0
 80015ac:	d000      	beq.n	80015b0 <__aeabi_fsub+0x2bc>
 80015ae:	e0c3      	b.n	8001738 <__aeabi_fsub+0x444>
 80015b0:	4663      	mov	r3, ip
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d100      	bne.n	80015b8 <__aeabi_fsub+0x2c4>
 80015b6:	e0d0      	b.n	800175a <__aeabi_fsub+0x466>
 80015b8:	2900      	cmp	r1, #0
 80015ba:	d100      	bne.n	80015be <__aeabi_fsub+0x2ca>
 80015bc:	e094      	b.n	80016e8 <__aeabi_fsub+0x3f4>
 80015be:	000a      	movs	r2, r1
 80015c0:	4462      	add	r2, ip
 80015c2:	0153      	lsls	r3, r2, #5
 80015c4:	d400      	bmi.n	80015c8 <__aeabi_fsub+0x2d4>
 80015c6:	e0d8      	b.n	800177a <__aeabi_fsub+0x486>
 80015c8:	0192      	lsls	r2, r2, #6
 80015ca:	2001      	movs	r0, #1
 80015cc:	0a52      	lsrs	r2, r2, #9
 80015ce:	e6ed      	b.n	80013ac <__aeabi_fsub+0xb8>
 80015d0:	0008      	movs	r0, r1
 80015d2:	2220      	movs	r2, #32
 80015d4:	40d8      	lsrs	r0, r3
 80015d6:	1ad3      	subs	r3, r2, r3
 80015d8:	4099      	lsls	r1, r3
 80015da:	000b      	movs	r3, r1
 80015dc:	1e5a      	subs	r2, r3, #1
 80015de:	4193      	sbcs	r3, r2
 80015e0:	4303      	orrs	r3, r0
 80015e2:	449c      	add	ip, r3
 80015e4:	4663      	mov	r3, ip
 80015e6:	015b      	lsls	r3, r3, #5
 80015e8:	d589      	bpl.n	80014fe <__aeabi_fsub+0x20a>
 80015ea:	3501      	adds	r5, #1
 80015ec:	2dff      	cmp	r5, #255	@ 0xff
 80015ee:	d100      	bne.n	80015f2 <__aeabi_fsub+0x2fe>
 80015f0:	e6da      	b.n	80013a8 <__aeabi_fsub+0xb4>
 80015f2:	4662      	mov	r2, ip
 80015f4:	2301      	movs	r3, #1
 80015f6:	4919      	ldr	r1, [pc, #100]	@ (800165c <__aeabi_fsub+0x368>)
 80015f8:	4013      	ands	r3, r2
 80015fa:	0852      	lsrs	r2, r2, #1
 80015fc:	400a      	ands	r2, r1
 80015fe:	431a      	orrs	r2, r3
 8001600:	0013      	movs	r3, r2
 8001602:	4694      	mov	ip, r2
 8001604:	075b      	lsls	r3, r3, #29
 8001606:	d004      	beq.n	8001612 <__aeabi_fsub+0x31e>
 8001608:	230f      	movs	r3, #15
 800160a:	4013      	ands	r3, r2
 800160c:	2b04      	cmp	r3, #4
 800160e:	d000      	beq.n	8001612 <__aeabi_fsub+0x31e>
 8001610:	e6bf      	b.n	8001392 <__aeabi_fsub+0x9e>
 8001612:	4663      	mov	r3, ip
 8001614:	015b      	lsls	r3, r3, #5
 8001616:	d500      	bpl.n	800161a <__aeabi_fsub+0x326>
 8001618:	e6c2      	b.n	80013a0 <__aeabi_fsub+0xac>
 800161a:	4663      	mov	r3, ip
 800161c:	08df      	lsrs	r7, r3, #3
 800161e:	002b      	movs	r3, r5
 8001620:	e6e3      	b.n	80013ea <__aeabi_fsub+0xf6>
 8001622:	1b53      	subs	r3, r2, r5
 8001624:	2d00      	cmp	r5, #0
 8001626:	d100      	bne.n	800162a <__aeabi_fsub+0x336>
 8001628:	e6f4      	b.n	8001414 <__aeabi_fsub+0x120>
 800162a:	2080      	movs	r0, #128	@ 0x80
 800162c:	4664      	mov	r4, ip
 800162e:	04c0      	lsls	r0, r0, #19
 8001630:	4304      	orrs	r4, r0
 8001632:	46a4      	mov	ip, r4
 8001634:	0034      	movs	r4, r6
 8001636:	2001      	movs	r0, #1
 8001638:	2b1b      	cmp	r3, #27
 800163a:	dc09      	bgt.n	8001650 <__aeabi_fsub+0x35c>
 800163c:	2520      	movs	r5, #32
 800163e:	4660      	mov	r0, ip
 8001640:	40d8      	lsrs	r0, r3
 8001642:	1aeb      	subs	r3, r5, r3
 8001644:	4665      	mov	r5, ip
 8001646:	409d      	lsls	r5, r3
 8001648:	002b      	movs	r3, r5
 800164a:	1e5d      	subs	r5, r3, #1
 800164c:	41ab      	sbcs	r3, r5
 800164e:	4318      	orrs	r0, r3
 8001650:	1a0b      	subs	r3, r1, r0
 8001652:	469c      	mov	ip, r3
 8001654:	0015      	movs	r5, r2
 8001656:	e680      	b.n	800135a <__aeabi_fsub+0x66>
 8001658:	fbffffff 	.word	0xfbffffff
 800165c:	7dffffff 	.word	0x7dffffff
 8001660:	22fe      	movs	r2, #254	@ 0xfe
 8001662:	1c6b      	adds	r3, r5, #1
 8001664:	4213      	tst	r3, r2
 8001666:	d0a3      	beq.n	80015b0 <__aeabi_fsub+0x2bc>
 8001668:	2bff      	cmp	r3, #255	@ 0xff
 800166a:	d100      	bne.n	800166e <__aeabi_fsub+0x37a>
 800166c:	e69c      	b.n	80013a8 <__aeabi_fsub+0xb4>
 800166e:	4461      	add	r1, ip
 8001670:	0849      	lsrs	r1, r1, #1
 8001672:	074a      	lsls	r2, r1, #29
 8001674:	d049      	beq.n	800170a <__aeabi_fsub+0x416>
 8001676:	220f      	movs	r2, #15
 8001678:	400a      	ands	r2, r1
 800167a:	2a04      	cmp	r2, #4
 800167c:	d045      	beq.n	800170a <__aeabi_fsub+0x416>
 800167e:	1d0a      	adds	r2, r1, #4
 8001680:	4694      	mov	ip, r2
 8001682:	e6ad      	b.n	80013e0 <__aeabi_fsub+0xec>
 8001684:	2d00      	cmp	r5, #0
 8001686:	d100      	bne.n	800168a <__aeabi_fsub+0x396>
 8001688:	e776      	b.n	8001578 <__aeabi_fsub+0x284>
 800168a:	e68d      	b.n	80013a8 <__aeabi_fsub+0xb4>
 800168c:	0034      	movs	r4, r6
 800168e:	20ff      	movs	r0, #255	@ 0xff
 8001690:	2200      	movs	r2, #0
 8001692:	e68b      	b.n	80013ac <__aeabi_fsub+0xb8>
 8001694:	4663      	mov	r3, ip
 8001696:	2401      	movs	r4, #1
 8001698:	1acf      	subs	r7, r1, r3
 800169a:	4034      	ands	r4, r6
 800169c:	e664      	b.n	8001368 <__aeabi_fsub+0x74>
 800169e:	4461      	add	r1, ip
 80016a0:	014b      	lsls	r3, r1, #5
 80016a2:	d56d      	bpl.n	8001780 <__aeabi_fsub+0x48c>
 80016a4:	0848      	lsrs	r0, r1, #1
 80016a6:	4944      	ldr	r1, [pc, #272]	@ (80017b8 <__aeabi_fsub+0x4c4>)
 80016a8:	4001      	ands	r1, r0
 80016aa:	0743      	lsls	r3, r0, #29
 80016ac:	d02c      	beq.n	8001708 <__aeabi_fsub+0x414>
 80016ae:	230f      	movs	r3, #15
 80016b0:	4003      	ands	r3, r0
 80016b2:	2b04      	cmp	r3, #4
 80016b4:	d028      	beq.n	8001708 <__aeabi_fsub+0x414>
 80016b6:	1d0b      	adds	r3, r1, #4
 80016b8:	469c      	mov	ip, r3
 80016ba:	2302      	movs	r3, #2
 80016bc:	e690      	b.n	80013e0 <__aeabi_fsub+0xec>
 80016be:	2900      	cmp	r1, #0
 80016c0:	d100      	bne.n	80016c4 <__aeabi_fsub+0x3d0>
 80016c2:	e72b      	b.n	800151c <__aeabi_fsub+0x228>
 80016c4:	2380      	movs	r3, #128	@ 0x80
 80016c6:	03db      	lsls	r3, r3, #15
 80016c8:	429f      	cmp	r7, r3
 80016ca:	d200      	bcs.n	80016ce <__aeabi_fsub+0x3da>
 80016cc:	e726      	b.n	800151c <__aeabi_fsub+0x228>
 80016ce:	4298      	cmp	r0, r3
 80016d0:	d300      	bcc.n	80016d4 <__aeabi_fsub+0x3e0>
 80016d2:	e723      	b.n	800151c <__aeabi_fsub+0x228>
 80016d4:	2401      	movs	r4, #1
 80016d6:	4034      	ands	r4, r6
 80016d8:	0007      	movs	r7, r0
 80016da:	e71f      	b.n	800151c <__aeabi_fsub+0x228>
 80016dc:	0034      	movs	r4, r6
 80016de:	468c      	mov	ip, r1
 80016e0:	e67e      	b.n	80013e0 <__aeabi_fsub+0xec>
 80016e2:	2301      	movs	r3, #1
 80016e4:	08cf      	lsrs	r7, r1, #3
 80016e6:	e680      	b.n	80013ea <__aeabi_fsub+0xf6>
 80016e8:	2300      	movs	r3, #0
 80016ea:	e67e      	b.n	80013ea <__aeabi_fsub+0xf6>
 80016ec:	2020      	movs	r0, #32
 80016ee:	4665      	mov	r5, ip
 80016f0:	1b80      	subs	r0, r0, r6
 80016f2:	4085      	lsls	r5, r0
 80016f4:	4663      	mov	r3, ip
 80016f6:	0028      	movs	r0, r5
 80016f8:	40f3      	lsrs	r3, r6
 80016fa:	1e45      	subs	r5, r0, #1
 80016fc:	41a8      	sbcs	r0, r5
 80016fe:	4303      	orrs	r3, r0
 8001700:	469c      	mov	ip, r3
 8001702:	0015      	movs	r5, r2
 8001704:	448c      	add	ip, r1
 8001706:	e76d      	b.n	80015e4 <__aeabi_fsub+0x2f0>
 8001708:	2302      	movs	r3, #2
 800170a:	08cf      	lsrs	r7, r1, #3
 800170c:	e66d      	b.n	80013ea <__aeabi_fsub+0xf6>
 800170e:	1b0f      	subs	r7, r1, r4
 8001710:	017b      	lsls	r3, r7, #5
 8001712:	d528      	bpl.n	8001766 <__aeabi_fsub+0x472>
 8001714:	01bf      	lsls	r7, r7, #6
 8001716:	09bf      	lsrs	r7, r7, #6
 8001718:	0038      	movs	r0, r7
 800171a:	f002 f985 	bl	8003a28 <__clzsi2>
 800171e:	003b      	movs	r3, r7
 8001720:	3805      	subs	r0, #5
 8001722:	4083      	lsls	r3, r0
 8001724:	0034      	movs	r4, r6
 8001726:	2501      	movs	r5, #1
 8001728:	e6ca      	b.n	80014c0 <__aeabi_fsub+0x1cc>
 800172a:	2900      	cmp	r1, #0
 800172c:	d100      	bne.n	8001730 <__aeabi_fsub+0x43c>
 800172e:	e6b5      	b.n	800149c <__aeabi_fsub+0x1a8>
 8001730:	2401      	movs	r4, #1
 8001732:	0007      	movs	r7, r0
 8001734:	4034      	ands	r4, r6
 8001736:	e658      	b.n	80013ea <__aeabi_fsub+0xf6>
 8001738:	4663      	mov	r3, ip
 800173a:	2b00      	cmp	r3, #0
 800173c:	d100      	bne.n	8001740 <__aeabi_fsub+0x44c>
 800173e:	e6e9      	b.n	8001514 <__aeabi_fsub+0x220>
 8001740:	2900      	cmp	r1, #0
 8001742:	d100      	bne.n	8001746 <__aeabi_fsub+0x452>
 8001744:	e6ea      	b.n	800151c <__aeabi_fsub+0x228>
 8001746:	2380      	movs	r3, #128	@ 0x80
 8001748:	03db      	lsls	r3, r3, #15
 800174a:	429f      	cmp	r7, r3
 800174c:	d200      	bcs.n	8001750 <__aeabi_fsub+0x45c>
 800174e:	e6e5      	b.n	800151c <__aeabi_fsub+0x228>
 8001750:	4298      	cmp	r0, r3
 8001752:	d300      	bcc.n	8001756 <__aeabi_fsub+0x462>
 8001754:	e6e2      	b.n	800151c <__aeabi_fsub+0x228>
 8001756:	0007      	movs	r7, r0
 8001758:	e6e0      	b.n	800151c <__aeabi_fsub+0x228>
 800175a:	2900      	cmp	r1, #0
 800175c:	d100      	bne.n	8001760 <__aeabi_fsub+0x46c>
 800175e:	e69e      	b.n	800149e <__aeabi_fsub+0x1aa>
 8001760:	2300      	movs	r3, #0
 8001762:	08cf      	lsrs	r7, r1, #3
 8001764:	e641      	b.n	80013ea <__aeabi_fsub+0xf6>
 8001766:	0034      	movs	r4, r6
 8001768:	2301      	movs	r3, #1
 800176a:	08ff      	lsrs	r7, r7, #3
 800176c:	e63d      	b.n	80013ea <__aeabi_fsub+0xf6>
 800176e:	2f00      	cmp	r7, #0
 8001770:	d100      	bne.n	8001774 <__aeabi_fsub+0x480>
 8001772:	e693      	b.n	800149c <__aeabi_fsub+0x1a8>
 8001774:	2300      	movs	r3, #0
 8001776:	08ff      	lsrs	r7, r7, #3
 8001778:	e637      	b.n	80013ea <__aeabi_fsub+0xf6>
 800177a:	2300      	movs	r3, #0
 800177c:	08d7      	lsrs	r7, r2, #3
 800177e:	e634      	b.n	80013ea <__aeabi_fsub+0xf6>
 8001780:	2301      	movs	r3, #1
 8001782:	08cf      	lsrs	r7, r1, #3
 8001784:	e631      	b.n	80013ea <__aeabi_fsub+0xf6>
 8001786:	2280      	movs	r2, #128	@ 0x80
 8001788:	000b      	movs	r3, r1
 800178a:	04d2      	lsls	r2, r2, #19
 800178c:	2001      	movs	r0, #1
 800178e:	4013      	ands	r3, r2
 8001790:	4211      	tst	r1, r2
 8001792:	d000      	beq.n	8001796 <__aeabi_fsub+0x4a2>
 8001794:	e6ae      	b.n	80014f4 <__aeabi_fsub+0x200>
 8001796:	08cf      	lsrs	r7, r1, #3
 8001798:	e627      	b.n	80013ea <__aeabi_fsub+0xf6>
 800179a:	2b00      	cmp	r3, #0
 800179c:	d100      	bne.n	80017a0 <__aeabi_fsub+0x4ac>
 800179e:	e75f      	b.n	8001660 <__aeabi_fsub+0x36c>
 80017a0:	1b56      	subs	r6, r2, r5
 80017a2:	2d00      	cmp	r5, #0
 80017a4:	d101      	bne.n	80017aa <__aeabi_fsub+0x4b6>
 80017a6:	0033      	movs	r3, r6
 80017a8:	e6e7      	b.n	800157a <__aeabi_fsub+0x286>
 80017aa:	2380      	movs	r3, #128	@ 0x80
 80017ac:	4660      	mov	r0, ip
 80017ae:	04db      	lsls	r3, r3, #19
 80017b0:	4318      	orrs	r0, r3
 80017b2:	4684      	mov	ip, r0
 80017b4:	e6eb      	b.n	800158e <__aeabi_fsub+0x29a>
 80017b6:	46c0      	nop			@ (mov r8, r8)
 80017b8:	7dffffff 	.word	0x7dffffff

080017bc <__aeabi_fcmpun>:
 80017bc:	0243      	lsls	r3, r0, #9
 80017be:	024a      	lsls	r2, r1, #9
 80017c0:	0040      	lsls	r0, r0, #1
 80017c2:	0049      	lsls	r1, r1, #1
 80017c4:	0a5b      	lsrs	r3, r3, #9
 80017c6:	0a52      	lsrs	r2, r2, #9
 80017c8:	0e09      	lsrs	r1, r1, #24
 80017ca:	0e00      	lsrs	r0, r0, #24
 80017cc:	28ff      	cmp	r0, #255	@ 0xff
 80017ce:	d006      	beq.n	80017de <__aeabi_fcmpun+0x22>
 80017d0:	2000      	movs	r0, #0
 80017d2:	29ff      	cmp	r1, #255	@ 0xff
 80017d4:	d102      	bne.n	80017dc <__aeabi_fcmpun+0x20>
 80017d6:	1e53      	subs	r3, r2, #1
 80017d8:	419a      	sbcs	r2, r3
 80017da:	0010      	movs	r0, r2
 80017dc:	4770      	bx	lr
 80017de:	38fe      	subs	r0, #254	@ 0xfe
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d1fb      	bne.n	80017dc <__aeabi_fcmpun+0x20>
 80017e4:	e7f4      	b.n	80017d0 <__aeabi_fcmpun+0x14>
 80017e6:	46c0      	nop			@ (mov r8, r8)

080017e8 <__aeabi_f2iz>:
 80017e8:	0241      	lsls	r1, r0, #9
 80017ea:	0042      	lsls	r2, r0, #1
 80017ec:	0fc3      	lsrs	r3, r0, #31
 80017ee:	0a49      	lsrs	r1, r1, #9
 80017f0:	2000      	movs	r0, #0
 80017f2:	0e12      	lsrs	r2, r2, #24
 80017f4:	2a7e      	cmp	r2, #126	@ 0x7e
 80017f6:	dd03      	ble.n	8001800 <__aeabi_f2iz+0x18>
 80017f8:	2a9d      	cmp	r2, #157	@ 0x9d
 80017fa:	dd02      	ble.n	8001802 <__aeabi_f2iz+0x1a>
 80017fc:	4a09      	ldr	r2, [pc, #36]	@ (8001824 <__aeabi_f2iz+0x3c>)
 80017fe:	1898      	adds	r0, r3, r2
 8001800:	4770      	bx	lr
 8001802:	2080      	movs	r0, #128	@ 0x80
 8001804:	0400      	lsls	r0, r0, #16
 8001806:	4301      	orrs	r1, r0
 8001808:	2a95      	cmp	r2, #149	@ 0x95
 800180a:	dc07      	bgt.n	800181c <__aeabi_f2iz+0x34>
 800180c:	2096      	movs	r0, #150	@ 0x96
 800180e:	1a82      	subs	r2, r0, r2
 8001810:	40d1      	lsrs	r1, r2
 8001812:	4248      	negs	r0, r1
 8001814:	2b00      	cmp	r3, #0
 8001816:	d1f3      	bne.n	8001800 <__aeabi_f2iz+0x18>
 8001818:	0008      	movs	r0, r1
 800181a:	e7f1      	b.n	8001800 <__aeabi_f2iz+0x18>
 800181c:	3a96      	subs	r2, #150	@ 0x96
 800181e:	4091      	lsls	r1, r2
 8001820:	e7f7      	b.n	8001812 <__aeabi_f2iz+0x2a>
 8001822:	46c0      	nop			@ (mov r8, r8)
 8001824:	7fffffff 	.word	0x7fffffff

08001828 <__aeabi_i2f>:
 8001828:	b570      	push	{r4, r5, r6, lr}
 800182a:	2800      	cmp	r0, #0
 800182c:	d012      	beq.n	8001854 <__aeabi_i2f+0x2c>
 800182e:	17c3      	asrs	r3, r0, #31
 8001830:	18c5      	adds	r5, r0, r3
 8001832:	405d      	eors	r5, r3
 8001834:	0fc4      	lsrs	r4, r0, #31
 8001836:	0028      	movs	r0, r5
 8001838:	f002 f8f6 	bl	8003a28 <__clzsi2>
 800183c:	239e      	movs	r3, #158	@ 0x9e
 800183e:	1a1b      	subs	r3, r3, r0
 8001840:	2b96      	cmp	r3, #150	@ 0x96
 8001842:	dc0f      	bgt.n	8001864 <__aeabi_i2f+0x3c>
 8001844:	2808      	cmp	r0, #8
 8001846:	d038      	beq.n	80018ba <__aeabi_i2f+0x92>
 8001848:	3808      	subs	r0, #8
 800184a:	4085      	lsls	r5, r0
 800184c:	026d      	lsls	r5, r5, #9
 800184e:	0a6d      	lsrs	r5, r5, #9
 8001850:	b2d8      	uxtb	r0, r3
 8001852:	e002      	b.n	800185a <__aeabi_i2f+0x32>
 8001854:	2400      	movs	r4, #0
 8001856:	2000      	movs	r0, #0
 8001858:	2500      	movs	r5, #0
 800185a:	05c0      	lsls	r0, r0, #23
 800185c:	4328      	orrs	r0, r5
 800185e:	07e4      	lsls	r4, r4, #31
 8001860:	4320      	orrs	r0, r4
 8001862:	bd70      	pop	{r4, r5, r6, pc}
 8001864:	2b99      	cmp	r3, #153	@ 0x99
 8001866:	dc14      	bgt.n	8001892 <__aeabi_i2f+0x6a>
 8001868:	1f42      	subs	r2, r0, #5
 800186a:	4095      	lsls	r5, r2
 800186c:	002a      	movs	r2, r5
 800186e:	4915      	ldr	r1, [pc, #84]	@ (80018c4 <__aeabi_i2f+0x9c>)
 8001870:	4011      	ands	r1, r2
 8001872:	0755      	lsls	r5, r2, #29
 8001874:	d01c      	beq.n	80018b0 <__aeabi_i2f+0x88>
 8001876:	250f      	movs	r5, #15
 8001878:	402a      	ands	r2, r5
 800187a:	2a04      	cmp	r2, #4
 800187c:	d018      	beq.n	80018b0 <__aeabi_i2f+0x88>
 800187e:	3104      	adds	r1, #4
 8001880:	08ca      	lsrs	r2, r1, #3
 8001882:	0149      	lsls	r1, r1, #5
 8001884:	d515      	bpl.n	80018b2 <__aeabi_i2f+0x8a>
 8001886:	239f      	movs	r3, #159	@ 0x9f
 8001888:	0252      	lsls	r2, r2, #9
 800188a:	1a18      	subs	r0, r3, r0
 800188c:	0a55      	lsrs	r5, r2, #9
 800188e:	b2c0      	uxtb	r0, r0
 8001890:	e7e3      	b.n	800185a <__aeabi_i2f+0x32>
 8001892:	2205      	movs	r2, #5
 8001894:	0029      	movs	r1, r5
 8001896:	1a12      	subs	r2, r2, r0
 8001898:	40d1      	lsrs	r1, r2
 800189a:	0002      	movs	r2, r0
 800189c:	321b      	adds	r2, #27
 800189e:	4095      	lsls	r5, r2
 80018a0:	002a      	movs	r2, r5
 80018a2:	1e55      	subs	r5, r2, #1
 80018a4:	41aa      	sbcs	r2, r5
 80018a6:	430a      	orrs	r2, r1
 80018a8:	4906      	ldr	r1, [pc, #24]	@ (80018c4 <__aeabi_i2f+0x9c>)
 80018aa:	4011      	ands	r1, r2
 80018ac:	0755      	lsls	r5, r2, #29
 80018ae:	d1e2      	bne.n	8001876 <__aeabi_i2f+0x4e>
 80018b0:	08ca      	lsrs	r2, r1, #3
 80018b2:	0252      	lsls	r2, r2, #9
 80018b4:	0a55      	lsrs	r5, r2, #9
 80018b6:	b2d8      	uxtb	r0, r3
 80018b8:	e7cf      	b.n	800185a <__aeabi_i2f+0x32>
 80018ba:	026d      	lsls	r5, r5, #9
 80018bc:	0a6d      	lsrs	r5, r5, #9
 80018be:	308e      	adds	r0, #142	@ 0x8e
 80018c0:	e7cb      	b.n	800185a <__aeabi_i2f+0x32>
 80018c2:	46c0      	nop			@ (mov r8, r8)
 80018c4:	fbffffff 	.word	0xfbffffff

080018c8 <__aeabi_ui2f>:
 80018c8:	b510      	push	{r4, lr}
 80018ca:	1e04      	subs	r4, r0, #0
 80018cc:	d00d      	beq.n	80018ea <__aeabi_ui2f+0x22>
 80018ce:	f002 f8ab 	bl	8003a28 <__clzsi2>
 80018d2:	239e      	movs	r3, #158	@ 0x9e
 80018d4:	1a1b      	subs	r3, r3, r0
 80018d6:	2b96      	cmp	r3, #150	@ 0x96
 80018d8:	dc0c      	bgt.n	80018f4 <__aeabi_ui2f+0x2c>
 80018da:	2808      	cmp	r0, #8
 80018dc:	d034      	beq.n	8001948 <__aeabi_ui2f+0x80>
 80018de:	3808      	subs	r0, #8
 80018e0:	4084      	lsls	r4, r0
 80018e2:	0264      	lsls	r4, r4, #9
 80018e4:	0a64      	lsrs	r4, r4, #9
 80018e6:	b2d8      	uxtb	r0, r3
 80018e8:	e001      	b.n	80018ee <__aeabi_ui2f+0x26>
 80018ea:	2000      	movs	r0, #0
 80018ec:	2400      	movs	r4, #0
 80018ee:	05c0      	lsls	r0, r0, #23
 80018f0:	4320      	orrs	r0, r4
 80018f2:	bd10      	pop	{r4, pc}
 80018f4:	2b99      	cmp	r3, #153	@ 0x99
 80018f6:	dc13      	bgt.n	8001920 <__aeabi_ui2f+0x58>
 80018f8:	1f42      	subs	r2, r0, #5
 80018fa:	4094      	lsls	r4, r2
 80018fc:	4a14      	ldr	r2, [pc, #80]	@ (8001950 <__aeabi_ui2f+0x88>)
 80018fe:	4022      	ands	r2, r4
 8001900:	0761      	lsls	r1, r4, #29
 8001902:	d01c      	beq.n	800193e <__aeabi_ui2f+0x76>
 8001904:	210f      	movs	r1, #15
 8001906:	4021      	ands	r1, r4
 8001908:	2904      	cmp	r1, #4
 800190a:	d018      	beq.n	800193e <__aeabi_ui2f+0x76>
 800190c:	3204      	adds	r2, #4
 800190e:	08d4      	lsrs	r4, r2, #3
 8001910:	0152      	lsls	r2, r2, #5
 8001912:	d515      	bpl.n	8001940 <__aeabi_ui2f+0x78>
 8001914:	239f      	movs	r3, #159	@ 0x9f
 8001916:	0264      	lsls	r4, r4, #9
 8001918:	1a18      	subs	r0, r3, r0
 800191a:	0a64      	lsrs	r4, r4, #9
 800191c:	b2c0      	uxtb	r0, r0
 800191e:	e7e6      	b.n	80018ee <__aeabi_ui2f+0x26>
 8001920:	0002      	movs	r2, r0
 8001922:	0021      	movs	r1, r4
 8001924:	321b      	adds	r2, #27
 8001926:	4091      	lsls	r1, r2
 8001928:	000a      	movs	r2, r1
 800192a:	1e51      	subs	r1, r2, #1
 800192c:	418a      	sbcs	r2, r1
 800192e:	2105      	movs	r1, #5
 8001930:	1a09      	subs	r1, r1, r0
 8001932:	40cc      	lsrs	r4, r1
 8001934:	4314      	orrs	r4, r2
 8001936:	4a06      	ldr	r2, [pc, #24]	@ (8001950 <__aeabi_ui2f+0x88>)
 8001938:	4022      	ands	r2, r4
 800193a:	0761      	lsls	r1, r4, #29
 800193c:	d1e2      	bne.n	8001904 <__aeabi_ui2f+0x3c>
 800193e:	08d4      	lsrs	r4, r2, #3
 8001940:	0264      	lsls	r4, r4, #9
 8001942:	0a64      	lsrs	r4, r4, #9
 8001944:	b2d8      	uxtb	r0, r3
 8001946:	e7d2      	b.n	80018ee <__aeabi_ui2f+0x26>
 8001948:	0264      	lsls	r4, r4, #9
 800194a:	0a64      	lsrs	r4, r4, #9
 800194c:	308e      	adds	r0, #142	@ 0x8e
 800194e:	e7ce      	b.n	80018ee <__aeabi_ui2f+0x26>
 8001950:	fbffffff 	.word	0xfbffffff

08001954 <__aeabi_dadd>:
 8001954:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001956:	464f      	mov	r7, r9
 8001958:	4646      	mov	r6, r8
 800195a:	46d6      	mov	lr, sl
 800195c:	b5c0      	push	{r6, r7, lr}
 800195e:	b082      	sub	sp, #8
 8001960:	9000      	str	r0, [sp, #0]
 8001962:	9101      	str	r1, [sp, #4]
 8001964:	030e      	lsls	r6, r1, #12
 8001966:	004c      	lsls	r4, r1, #1
 8001968:	0fcd      	lsrs	r5, r1, #31
 800196a:	0a71      	lsrs	r1, r6, #9
 800196c:	9e00      	ldr	r6, [sp, #0]
 800196e:	005f      	lsls	r7, r3, #1
 8001970:	0f76      	lsrs	r6, r6, #29
 8001972:	430e      	orrs	r6, r1
 8001974:	9900      	ldr	r1, [sp, #0]
 8001976:	9200      	str	r2, [sp, #0]
 8001978:	9301      	str	r3, [sp, #4]
 800197a:	00c9      	lsls	r1, r1, #3
 800197c:	4689      	mov	r9, r1
 800197e:	0319      	lsls	r1, r3, #12
 8001980:	0d7b      	lsrs	r3, r7, #21
 8001982:	4698      	mov	r8, r3
 8001984:	9b01      	ldr	r3, [sp, #4]
 8001986:	0a49      	lsrs	r1, r1, #9
 8001988:	0fdb      	lsrs	r3, r3, #31
 800198a:	469c      	mov	ip, r3
 800198c:	9b00      	ldr	r3, [sp, #0]
 800198e:	9a00      	ldr	r2, [sp, #0]
 8001990:	0f5b      	lsrs	r3, r3, #29
 8001992:	430b      	orrs	r3, r1
 8001994:	4641      	mov	r1, r8
 8001996:	0d64      	lsrs	r4, r4, #21
 8001998:	00d2      	lsls	r2, r2, #3
 800199a:	1a61      	subs	r1, r4, r1
 800199c:	4565      	cmp	r5, ip
 800199e:	d100      	bne.n	80019a2 <__aeabi_dadd+0x4e>
 80019a0:	e0a6      	b.n	8001af0 <__aeabi_dadd+0x19c>
 80019a2:	2900      	cmp	r1, #0
 80019a4:	dd72      	ble.n	8001a8c <__aeabi_dadd+0x138>
 80019a6:	4647      	mov	r7, r8
 80019a8:	2f00      	cmp	r7, #0
 80019aa:	d100      	bne.n	80019ae <__aeabi_dadd+0x5a>
 80019ac:	e0dd      	b.n	8001b6a <__aeabi_dadd+0x216>
 80019ae:	4fcc      	ldr	r7, [pc, #816]	@ (8001ce0 <__aeabi_dadd+0x38c>)
 80019b0:	42bc      	cmp	r4, r7
 80019b2:	d100      	bne.n	80019b6 <__aeabi_dadd+0x62>
 80019b4:	e19a      	b.n	8001cec <__aeabi_dadd+0x398>
 80019b6:	2701      	movs	r7, #1
 80019b8:	2938      	cmp	r1, #56	@ 0x38
 80019ba:	dc17      	bgt.n	80019ec <__aeabi_dadd+0x98>
 80019bc:	2780      	movs	r7, #128	@ 0x80
 80019be:	043f      	lsls	r7, r7, #16
 80019c0:	433b      	orrs	r3, r7
 80019c2:	291f      	cmp	r1, #31
 80019c4:	dd00      	ble.n	80019c8 <__aeabi_dadd+0x74>
 80019c6:	e1dd      	b.n	8001d84 <__aeabi_dadd+0x430>
 80019c8:	2720      	movs	r7, #32
 80019ca:	1a78      	subs	r0, r7, r1
 80019cc:	001f      	movs	r7, r3
 80019ce:	4087      	lsls	r7, r0
 80019d0:	46ba      	mov	sl, r7
 80019d2:	0017      	movs	r7, r2
 80019d4:	40cf      	lsrs	r7, r1
 80019d6:	4684      	mov	ip, r0
 80019d8:	0038      	movs	r0, r7
 80019da:	4657      	mov	r7, sl
 80019dc:	4307      	orrs	r7, r0
 80019de:	4660      	mov	r0, ip
 80019e0:	4082      	lsls	r2, r0
 80019e2:	40cb      	lsrs	r3, r1
 80019e4:	1e50      	subs	r0, r2, #1
 80019e6:	4182      	sbcs	r2, r0
 80019e8:	1af6      	subs	r6, r6, r3
 80019ea:	4317      	orrs	r7, r2
 80019ec:	464b      	mov	r3, r9
 80019ee:	1bdf      	subs	r7, r3, r7
 80019f0:	45b9      	cmp	r9, r7
 80019f2:	4180      	sbcs	r0, r0
 80019f4:	4240      	negs	r0, r0
 80019f6:	1a36      	subs	r6, r6, r0
 80019f8:	0233      	lsls	r3, r6, #8
 80019fa:	d400      	bmi.n	80019fe <__aeabi_dadd+0xaa>
 80019fc:	e0ff      	b.n	8001bfe <__aeabi_dadd+0x2aa>
 80019fe:	0276      	lsls	r6, r6, #9
 8001a00:	0a76      	lsrs	r6, r6, #9
 8001a02:	2e00      	cmp	r6, #0
 8001a04:	d100      	bne.n	8001a08 <__aeabi_dadd+0xb4>
 8001a06:	e13c      	b.n	8001c82 <__aeabi_dadd+0x32e>
 8001a08:	0030      	movs	r0, r6
 8001a0a:	f002 f80d 	bl	8003a28 <__clzsi2>
 8001a0e:	0003      	movs	r3, r0
 8001a10:	3b08      	subs	r3, #8
 8001a12:	2120      	movs	r1, #32
 8001a14:	0038      	movs	r0, r7
 8001a16:	1aca      	subs	r2, r1, r3
 8001a18:	40d0      	lsrs	r0, r2
 8001a1a:	409e      	lsls	r6, r3
 8001a1c:	0002      	movs	r2, r0
 8001a1e:	409f      	lsls	r7, r3
 8001a20:	4332      	orrs	r2, r6
 8001a22:	429c      	cmp	r4, r3
 8001a24:	dd00      	ble.n	8001a28 <__aeabi_dadd+0xd4>
 8001a26:	e1a6      	b.n	8001d76 <__aeabi_dadd+0x422>
 8001a28:	1b18      	subs	r0, r3, r4
 8001a2a:	3001      	adds	r0, #1
 8001a2c:	1a09      	subs	r1, r1, r0
 8001a2e:	003e      	movs	r6, r7
 8001a30:	408f      	lsls	r7, r1
 8001a32:	40c6      	lsrs	r6, r0
 8001a34:	1e7b      	subs	r3, r7, #1
 8001a36:	419f      	sbcs	r7, r3
 8001a38:	0013      	movs	r3, r2
 8001a3a:	408b      	lsls	r3, r1
 8001a3c:	4337      	orrs	r7, r6
 8001a3e:	431f      	orrs	r7, r3
 8001a40:	40c2      	lsrs	r2, r0
 8001a42:	003b      	movs	r3, r7
 8001a44:	0016      	movs	r6, r2
 8001a46:	2400      	movs	r4, #0
 8001a48:	4313      	orrs	r3, r2
 8001a4a:	d100      	bne.n	8001a4e <__aeabi_dadd+0xfa>
 8001a4c:	e1df      	b.n	8001e0e <__aeabi_dadd+0x4ba>
 8001a4e:	077b      	lsls	r3, r7, #29
 8001a50:	d100      	bne.n	8001a54 <__aeabi_dadd+0x100>
 8001a52:	e332      	b.n	80020ba <__aeabi_dadd+0x766>
 8001a54:	230f      	movs	r3, #15
 8001a56:	003a      	movs	r2, r7
 8001a58:	403b      	ands	r3, r7
 8001a5a:	2b04      	cmp	r3, #4
 8001a5c:	d004      	beq.n	8001a68 <__aeabi_dadd+0x114>
 8001a5e:	1d3a      	adds	r2, r7, #4
 8001a60:	42ba      	cmp	r2, r7
 8001a62:	41bf      	sbcs	r7, r7
 8001a64:	427f      	negs	r7, r7
 8001a66:	19f6      	adds	r6, r6, r7
 8001a68:	0233      	lsls	r3, r6, #8
 8001a6a:	d400      	bmi.n	8001a6e <__aeabi_dadd+0x11a>
 8001a6c:	e323      	b.n	80020b6 <__aeabi_dadd+0x762>
 8001a6e:	4b9c      	ldr	r3, [pc, #624]	@ (8001ce0 <__aeabi_dadd+0x38c>)
 8001a70:	3401      	adds	r4, #1
 8001a72:	429c      	cmp	r4, r3
 8001a74:	d100      	bne.n	8001a78 <__aeabi_dadd+0x124>
 8001a76:	e0b4      	b.n	8001be2 <__aeabi_dadd+0x28e>
 8001a78:	4b9a      	ldr	r3, [pc, #616]	@ (8001ce4 <__aeabi_dadd+0x390>)
 8001a7a:	0564      	lsls	r4, r4, #21
 8001a7c:	401e      	ands	r6, r3
 8001a7e:	0d64      	lsrs	r4, r4, #21
 8001a80:	0777      	lsls	r7, r6, #29
 8001a82:	08d2      	lsrs	r2, r2, #3
 8001a84:	0276      	lsls	r6, r6, #9
 8001a86:	4317      	orrs	r7, r2
 8001a88:	0b36      	lsrs	r6, r6, #12
 8001a8a:	e0ac      	b.n	8001be6 <__aeabi_dadd+0x292>
 8001a8c:	2900      	cmp	r1, #0
 8001a8e:	d100      	bne.n	8001a92 <__aeabi_dadd+0x13e>
 8001a90:	e07e      	b.n	8001b90 <__aeabi_dadd+0x23c>
 8001a92:	4641      	mov	r1, r8
 8001a94:	1b09      	subs	r1, r1, r4
 8001a96:	2c00      	cmp	r4, #0
 8001a98:	d000      	beq.n	8001a9c <__aeabi_dadd+0x148>
 8001a9a:	e160      	b.n	8001d5e <__aeabi_dadd+0x40a>
 8001a9c:	0034      	movs	r4, r6
 8001a9e:	4648      	mov	r0, r9
 8001aa0:	4304      	orrs	r4, r0
 8001aa2:	d100      	bne.n	8001aa6 <__aeabi_dadd+0x152>
 8001aa4:	e1c9      	b.n	8001e3a <__aeabi_dadd+0x4e6>
 8001aa6:	1e4c      	subs	r4, r1, #1
 8001aa8:	2901      	cmp	r1, #1
 8001aaa:	d100      	bne.n	8001aae <__aeabi_dadd+0x15a>
 8001aac:	e22e      	b.n	8001f0c <__aeabi_dadd+0x5b8>
 8001aae:	4d8c      	ldr	r5, [pc, #560]	@ (8001ce0 <__aeabi_dadd+0x38c>)
 8001ab0:	42a9      	cmp	r1, r5
 8001ab2:	d100      	bne.n	8001ab6 <__aeabi_dadd+0x162>
 8001ab4:	e224      	b.n	8001f00 <__aeabi_dadd+0x5ac>
 8001ab6:	2701      	movs	r7, #1
 8001ab8:	2c38      	cmp	r4, #56	@ 0x38
 8001aba:	dc11      	bgt.n	8001ae0 <__aeabi_dadd+0x18c>
 8001abc:	0021      	movs	r1, r4
 8001abe:	291f      	cmp	r1, #31
 8001ac0:	dd00      	ble.n	8001ac4 <__aeabi_dadd+0x170>
 8001ac2:	e20b      	b.n	8001edc <__aeabi_dadd+0x588>
 8001ac4:	2420      	movs	r4, #32
 8001ac6:	0037      	movs	r7, r6
 8001ac8:	4648      	mov	r0, r9
 8001aca:	1a64      	subs	r4, r4, r1
 8001acc:	40a7      	lsls	r7, r4
 8001ace:	40c8      	lsrs	r0, r1
 8001ad0:	4307      	orrs	r7, r0
 8001ad2:	4648      	mov	r0, r9
 8001ad4:	40a0      	lsls	r0, r4
 8001ad6:	40ce      	lsrs	r6, r1
 8001ad8:	1e44      	subs	r4, r0, #1
 8001ada:	41a0      	sbcs	r0, r4
 8001adc:	1b9b      	subs	r3, r3, r6
 8001ade:	4307      	orrs	r7, r0
 8001ae0:	1bd7      	subs	r7, r2, r7
 8001ae2:	42ba      	cmp	r2, r7
 8001ae4:	4192      	sbcs	r2, r2
 8001ae6:	4252      	negs	r2, r2
 8001ae8:	4665      	mov	r5, ip
 8001aea:	4644      	mov	r4, r8
 8001aec:	1a9e      	subs	r6, r3, r2
 8001aee:	e783      	b.n	80019f8 <__aeabi_dadd+0xa4>
 8001af0:	2900      	cmp	r1, #0
 8001af2:	dc00      	bgt.n	8001af6 <__aeabi_dadd+0x1a2>
 8001af4:	e09c      	b.n	8001c30 <__aeabi_dadd+0x2dc>
 8001af6:	4647      	mov	r7, r8
 8001af8:	2f00      	cmp	r7, #0
 8001afa:	d167      	bne.n	8001bcc <__aeabi_dadd+0x278>
 8001afc:	001f      	movs	r7, r3
 8001afe:	4317      	orrs	r7, r2
 8001b00:	d100      	bne.n	8001b04 <__aeabi_dadd+0x1b0>
 8001b02:	e0e4      	b.n	8001cce <__aeabi_dadd+0x37a>
 8001b04:	1e48      	subs	r0, r1, #1
 8001b06:	2901      	cmp	r1, #1
 8001b08:	d100      	bne.n	8001b0c <__aeabi_dadd+0x1b8>
 8001b0a:	e19b      	b.n	8001e44 <__aeabi_dadd+0x4f0>
 8001b0c:	4f74      	ldr	r7, [pc, #464]	@ (8001ce0 <__aeabi_dadd+0x38c>)
 8001b0e:	42b9      	cmp	r1, r7
 8001b10:	d100      	bne.n	8001b14 <__aeabi_dadd+0x1c0>
 8001b12:	e0eb      	b.n	8001cec <__aeabi_dadd+0x398>
 8001b14:	2701      	movs	r7, #1
 8001b16:	0001      	movs	r1, r0
 8001b18:	2838      	cmp	r0, #56	@ 0x38
 8001b1a:	dc11      	bgt.n	8001b40 <__aeabi_dadd+0x1ec>
 8001b1c:	291f      	cmp	r1, #31
 8001b1e:	dd00      	ble.n	8001b22 <__aeabi_dadd+0x1ce>
 8001b20:	e1c7      	b.n	8001eb2 <__aeabi_dadd+0x55e>
 8001b22:	2720      	movs	r7, #32
 8001b24:	1a78      	subs	r0, r7, r1
 8001b26:	001f      	movs	r7, r3
 8001b28:	4684      	mov	ip, r0
 8001b2a:	4087      	lsls	r7, r0
 8001b2c:	0010      	movs	r0, r2
 8001b2e:	40c8      	lsrs	r0, r1
 8001b30:	4307      	orrs	r7, r0
 8001b32:	4660      	mov	r0, ip
 8001b34:	4082      	lsls	r2, r0
 8001b36:	40cb      	lsrs	r3, r1
 8001b38:	1e50      	subs	r0, r2, #1
 8001b3a:	4182      	sbcs	r2, r0
 8001b3c:	18f6      	adds	r6, r6, r3
 8001b3e:	4317      	orrs	r7, r2
 8001b40:	444f      	add	r7, r9
 8001b42:	454f      	cmp	r7, r9
 8001b44:	4180      	sbcs	r0, r0
 8001b46:	4240      	negs	r0, r0
 8001b48:	1836      	adds	r6, r6, r0
 8001b4a:	0233      	lsls	r3, r6, #8
 8001b4c:	d557      	bpl.n	8001bfe <__aeabi_dadd+0x2aa>
 8001b4e:	4b64      	ldr	r3, [pc, #400]	@ (8001ce0 <__aeabi_dadd+0x38c>)
 8001b50:	3401      	adds	r4, #1
 8001b52:	429c      	cmp	r4, r3
 8001b54:	d045      	beq.n	8001be2 <__aeabi_dadd+0x28e>
 8001b56:	2101      	movs	r1, #1
 8001b58:	4b62      	ldr	r3, [pc, #392]	@ (8001ce4 <__aeabi_dadd+0x390>)
 8001b5a:	087a      	lsrs	r2, r7, #1
 8001b5c:	401e      	ands	r6, r3
 8001b5e:	4039      	ands	r1, r7
 8001b60:	430a      	orrs	r2, r1
 8001b62:	07f7      	lsls	r7, r6, #31
 8001b64:	4317      	orrs	r7, r2
 8001b66:	0876      	lsrs	r6, r6, #1
 8001b68:	e771      	b.n	8001a4e <__aeabi_dadd+0xfa>
 8001b6a:	001f      	movs	r7, r3
 8001b6c:	4317      	orrs	r7, r2
 8001b6e:	d100      	bne.n	8001b72 <__aeabi_dadd+0x21e>
 8001b70:	e0ad      	b.n	8001cce <__aeabi_dadd+0x37a>
 8001b72:	1e4f      	subs	r7, r1, #1
 8001b74:	46bc      	mov	ip, r7
 8001b76:	2901      	cmp	r1, #1
 8001b78:	d100      	bne.n	8001b7c <__aeabi_dadd+0x228>
 8001b7a:	e182      	b.n	8001e82 <__aeabi_dadd+0x52e>
 8001b7c:	4f58      	ldr	r7, [pc, #352]	@ (8001ce0 <__aeabi_dadd+0x38c>)
 8001b7e:	42b9      	cmp	r1, r7
 8001b80:	d100      	bne.n	8001b84 <__aeabi_dadd+0x230>
 8001b82:	e190      	b.n	8001ea6 <__aeabi_dadd+0x552>
 8001b84:	4661      	mov	r1, ip
 8001b86:	2701      	movs	r7, #1
 8001b88:	2938      	cmp	r1, #56	@ 0x38
 8001b8a:	dd00      	ble.n	8001b8e <__aeabi_dadd+0x23a>
 8001b8c:	e72e      	b.n	80019ec <__aeabi_dadd+0x98>
 8001b8e:	e718      	b.n	80019c2 <__aeabi_dadd+0x6e>
 8001b90:	4f55      	ldr	r7, [pc, #340]	@ (8001ce8 <__aeabi_dadd+0x394>)
 8001b92:	1c61      	adds	r1, r4, #1
 8001b94:	4239      	tst	r1, r7
 8001b96:	d000      	beq.n	8001b9a <__aeabi_dadd+0x246>
 8001b98:	e0d0      	b.n	8001d3c <__aeabi_dadd+0x3e8>
 8001b9a:	0031      	movs	r1, r6
 8001b9c:	4648      	mov	r0, r9
 8001b9e:	001f      	movs	r7, r3
 8001ba0:	4301      	orrs	r1, r0
 8001ba2:	4317      	orrs	r7, r2
 8001ba4:	2c00      	cmp	r4, #0
 8001ba6:	d000      	beq.n	8001baa <__aeabi_dadd+0x256>
 8001ba8:	e13d      	b.n	8001e26 <__aeabi_dadd+0x4d2>
 8001baa:	2900      	cmp	r1, #0
 8001bac:	d100      	bne.n	8001bb0 <__aeabi_dadd+0x25c>
 8001bae:	e1bc      	b.n	8001f2a <__aeabi_dadd+0x5d6>
 8001bb0:	2f00      	cmp	r7, #0
 8001bb2:	d000      	beq.n	8001bb6 <__aeabi_dadd+0x262>
 8001bb4:	e1bf      	b.n	8001f36 <__aeabi_dadd+0x5e2>
 8001bb6:	464b      	mov	r3, r9
 8001bb8:	2100      	movs	r1, #0
 8001bba:	08d8      	lsrs	r0, r3, #3
 8001bbc:	0777      	lsls	r7, r6, #29
 8001bbe:	4307      	orrs	r7, r0
 8001bc0:	08f0      	lsrs	r0, r6, #3
 8001bc2:	0306      	lsls	r6, r0, #12
 8001bc4:	054c      	lsls	r4, r1, #21
 8001bc6:	0b36      	lsrs	r6, r6, #12
 8001bc8:	0d64      	lsrs	r4, r4, #21
 8001bca:	e00c      	b.n	8001be6 <__aeabi_dadd+0x292>
 8001bcc:	4f44      	ldr	r7, [pc, #272]	@ (8001ce0 <__aeabi_dadd+0x38c>)
 8001bce:	42bc      	cmp	r4, r7
 8001bd0:	d100      	bne.n	8001bd4 <__aeabi_dadd+0x280>
 8001bd2:	e08b      	b.n	8001cec <__aeabi_dadd+0x398>
 8001bd4:	2701      	movs	r7, #1
 8001bd6:	2938      	cmp	r1, #56	@ 0x38
 8001bd8:	dcb2      	bgt.n	8001b40 <__aeabi_dadd+0x1ec>
 8001bda:	2780      	movs	r7, #128	@ 0x80
 8001bdc:	043f      	lsls	r7, r7, #16
 8001bde:	433b      	orrs	r3, r7
 8001be0:	e79c      	b.n	8001b1c <__aeabi_dadd+0x1c8>
 8001be2:	2600      	movs	r6, #0
 8001be4:	2700      	movs	r7, #0
 8001be6:	0524      	lsls	r4, r4, #20
 8001be8:	4334      	orrs	r4, r6
 8001bea:	07ed      	lsls	r5, r5, #31
 8001bec:	432c      	orrs	r4, r5
 8001bee:	0038      	movs	r0, r7
 8001bf0:	0021      	movs	r1, r4
 8001bf2:	b002      	add	sp, #8
 8001bf4:	bce0      	pop	{r5, r6, r7}
 8001bf6:	46ba      	mov	sl, r7
 8001bf8:	46b1      	mov	r9, r6
 8001bfa:	46a8      	mov	r8, r5
 8001bfc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001bfe:	077b      	lsls	r3, r7, #29
 8001c00:	d004      	beq.n	8001c0c <__aeabi_dadd+0x2b8>
 8001c02:	230f      	movs	r3, #15
 8001c04:	403b      	ands	r3, r7
 8001c06:	2b04      	cmp	r3, #4
 8001c08:	d000      	beq.n	8001c0c <__aeabi_dadd+0x2b8>
 8001c0a:	e728      	b.n	8001a5e <__aeabi_dadd+0x10a>
 8001c0c:	08f8      	lsrs	r0, r7, #3
 8001c0e:	4b34      	ldr	r3, [pc, #208]	@ (8001ce0 <__aeabi_dadd+0x38c>)
 8001c10:	0777      	lsls	r7, r6, #29
 8001c12:	4307      	orrs	r7, r0
 8001c14:	08f0      	lsrs	r0, r6, #3
 8001c16:	429c      	cmp	r4, r3
 8001c18:	d000      	beq.n	8001c1c <__aeabi_dadd+0x2c8>
 8001c1a:	e24a      	b.n	80020b2 <__aeabi_dadd+0x75e>
 8001c1c:	003b      	movs	r3, r7
 8001c1e:	4303      	orrs	r3, r0
 8001c20:	d059      	beq.n	8001cd6 <__aeabi_dadd+0x382>
 8001c22:	2680      	movs	r6, #128	@ 0x80
 8001c24:	0336      	lsls	r6, r6, #12
 8001c26:	4306      	orrs	r6, r0
 8001c28:	0336      	lsls	r6, r6, #12
 8001c2a:	4c2d      	ldr	r4, [pc, #180]	@ (8001ce0 <__aeabi_dadd+0x38c>)
 8001c2c:	0b36      	lsrs	r6, r6, #12
 8001c2e:	e7da      	b.n	8001be6 <__aeabi_dadd+0x292>
 8001c30:	2900      	cmp	r1, #0
 8001c32:	d061      	beq.n	8001cf8 <__aeabi_dadd+0x3a4>
 8001c34:	4641      	mov	r1, r8
 8001c36:	1b09      	subs	r1, r1, r4
 8001c38:	2c00      	cmp	r4, #0
 8001c3a:	d100      	bne.n	8001c3e <__aeabi_dadd+0x2ea>
 8001c3c:	e0b9      	b.n	8001db2 <__aeabi_dadd+0x45e>
 8001c3e:	4c28      	ldr	r4, [pc, #160]	@ (8001ce0 <__aeabi_dadd+0x38c>)
 8001c40:	45a0      	cmp	r8, r4
 8001c42:	d100      	bne.n	8001c46 <__aeabi_dadd+0x2f2>
 8001c44:	e1a5      	b.n	8001f92 <__aeabi_dadd+0x63e>
 8001c46:	2701      	movs	r7, #1
 8001c48:	2938      	cmp	r1, #56	@ 0x38
 8001c4a:	dc13      	bgt.n	8001c74 <__aeabi_dadd+0x320>
 8001c4c:	2480      	movs	r4, #128	@ 0x80
 8001c4e:	0424      	lsls	r4, r4, #16
 8001c50:	4326      	orrs	r6, r4
 8001c52:	291f      	cmp	r1, #31
 8001c54:	dd00      	ble.n	8001c58 <__aeabi_dadd+0x304>
 8001c56:	e1c8      	b.n	8001fea <__aeabi_dadd+0x696>
 8001c58:	2420      	movs	r4, #32
 8001c5a:	0037      	movs	r7, r6
 8001c5c:	4648      	mov	r0, r9
 8001c5e:	1a64      	subs	r4, r4, r1
 8001c60:	40a7      	lsls	r7, r4
 8001c62:	40c8      	lsrs	r0, r1
 8001c64:	4307      	orrs	r7, r0
 8001c66:	4648      	mov	r0, r9
 8001c68:	40a0      	lsls	r0, r4
 8001c6a:	40ce      	lsrs	r6, r1
 8001c6c:	1e44      	subs	r4, r0, #1
 8001c6e:	41a0      	sbcs	r0, r4
 8001c70:	199b      	adds	r3, r3, r6
 8001c72:	4307      	orrs	r7, r0
 8001c74:	18bf      	adds	r7, r7, r2
 8001c76:	4297      	cmp	r7, r2
 8001c78:	4192      	sbcs	r2, r2
 8001c7a:	4252      	negs	r2, r2
 8001c7c:	4644      	mov	r4, r8
 8001c7e:	18d6      	adds	r6, r2, r3
 8001c80:	e763      	b.n	8001b4a <__aeabi_dadd+0x1f6>
 8001c82:	0038      	movs	r0, r7
 8001c84:	f001 fed0 	bl	8003a28 <__clzsi2>
 8001c88:	0003      	movs	r3, r0
 8001c8a:	3318      	adds	r3, #24
 8001c8c:	2b1f      	cmp	r3, #31
 8001c8e:	dc00      	bgt.n	8001c92 <__aeabi_dadd+0x33e>
 8001c90:	e6bf      	b.n	8001a12 <__aeabi_dadd+0xbe>
 8001c92:	003a      	movs	r2, r7
 8001c94:	3808      	subs	r0, #8
 8001c96:	4082      	lsls	r2, r0
 8001c98:	429c      	cmp	r4, r3
 8001c9a:	dd00      	ble.n	8001c9e <__aeabi_dadd+0x34a>
 8001c9c:	e083      	b.n	8001da6 <__aeabi_dadd+0x452>
 8001c9e:	1b1b      	subs	r3, r3, r4
 8001ca0:	1c58      	adds	r0, r3, #1
 8001ca2:	281f      	cmp	r0, #31
 8001ca4:	dc00      	bgt.n	8001ca8 <__aeabi_dadd+0x354>
 8001ca6:	e1b4      	b.n	8002012 <__aeabi_dadd+0x6be>
 8001ca8:	0017      	movs	r7, r2
 8001caa:	3b1f      	subs	r3, #31
 8001cac:	40df      	lsrs	r7, r3
 8001cae:	2820      	cmp	r0, #32
 8001cb0:	d005      	beq.n	8001cbe <__aeabi_dadd+0x36a>
 8001cb2:	2340      	movs	r3, #64	@ 0x40
 8001cb4:	1a1b      	subs	r3, r3, r0
 8001cb6:	409a      	lsls	r2, r3
 8001cb8:	1e53      	subs	r3, r2, #1
 8001cba:	419a      	sbcs	r2, r3
 8001cbc:	4317      	orrs	r7, r2
 8001cbe:	2400      	movs	r4, #0
 8001cc0:	2f00      	cmp	r7, #0
 8001cc2:	d00a      	beq.n	8001cda <__aeabi_dadd+0x386>
 8001cc4:	077b      	lsls	r3, r7, #29
 8001cc6:	d000      	beq.n	8001cca <__aeabi_dadd+0x376>
 8001cc8:	e6c4      	b.n	8001a54 <__aeabi_dadd+0x100>
 8001cca:	0026      	movs	r6, r4
 8001ccc:	e79e      	b.n	8001c0c <__aeabi_dadd+0x2b8>
 8001cce:	464b      	mov	r3, r9
 8001cd0:	000c      	movs	r4, r1
 8001cd2:	08d8      	lsrs	r0, r3, #3
 8001cd4:	e79b      	b.n	8001c0e <__aeabi_dadd+0x2ba>
 8001cd6:	2700      	movs	r7, #0
 8001cd8:	4c01      	ldr	r4, [pc, #4]	@ (8001ce0 <__aeabi_dadd+0x38c>)
 8001cda:	2600      	movs	r6, #0
 8001cdc:	e783      	b.n	8001be6 <__aeabi_dadd+0x292>
 8001cde:	46c0      	nop			@ (mov r8, r8)
 8001ce0:	000007ff 	.word	0x000007ff
 8001ce4:	ff7fffff 	.word	0xff7fffff
 8001ce8:	000007fe 	.word	0x000007fe
 8001cec:	464b      	mov	r3, r9
 8001cee:	0777      	lsls	r7, r6, #29
 8001cf0:	08d8      	lsrs	r0, r3, #3
 8001cf2:	4307      	orrs	r7, r0
 8001cf4:	08f0      	lsrs	r0, r6, #3
 8001cf6:	e791      	b.n	8001c1c <__aeabi_dadd+0x2c8>
 8001cf8:	4fcd      	ldr	r7, [pc, #820]	@ (8002030 <__aeabi_dadd+0x6dc>)
 8001cfa:	1c61      	adds	r1, r4, #1
 8001cfc:	4239      	tst	r1, r7
 8001cfe:	d16b      	bne.n	8001dd8 <__aeabi_dadd+0x484>
 8001d00:	0031      	movs	r1, r6
 8001d02:	4648      	mov	r0, r9
 8001d04:	4301      	orrs	r1, r0
 8001d06:	2c00      	cmp	r4, #0
 8001d08:	d000      	beq.n	8001d0c <__aeabi_dadd+0x3b8>
 8001d0a:	e14b      	b.n	8001fa4 <__aeabi_dadd+0x650>
 8001d0c:	001f      	movs	r7, r3
 8001d0e:	4317      	orrs	r7, r2
 8001d10:	2900      	cmp	r1, #0
 8001d12:	d100      	bne.n	8001d16 <__aeabi_dadd+0x3c2>
 8001d14:	e181      	b.n	800201a <__aeabi_dadd+0x6c6>
 8001d16:	2f00      	cmp	r7, #0
 8001d18:	d100      	bne.n	8001d1c <__aeabi_dadd+0x3c8>
 8001d1a:	e74c      	b.n	8001bb6 <__aeabi_dadd+0x262>
 8001d1c:	444a      	add	r2, r9
 8001d1e:	454a      	cmp	r2, r9
 8001d20:	4180      	sbcs	r0, r0
 8001d22:	18f6      	adds	r6, r6, r3
 8001d24:	4240      	negs	r0, r0
 8001d26:	1836      	adds	r6, r6, r0
 8001d28:	0233      	lsls	r3, r6, #8
 8001d2a:	d500      	bpl.n	8001d2e <__aeabi_dadd+0x3da>
 8001d2c:	e1b0      	b.n	8002090 <__aeabi_dadd+0x73c>
 8001d2e:	0017      	movs	r7, r2
 8001d30:	4691      	mov	r9, r2
 8001d32:	4337      	orrs	r7, r6
 8001d34:	d000      	beq.n	8001d38 <__aeabi_dadd+0x3e4>
 8001d36:	e73e      	b.n	8001bb6 <__aeabi_dadd+0x262>
 8001d38:	2600      	movs	r6, #0
 8001d3a:	e754      	b.n	8001be6 <__aeabi_dadd+0x292>
 8001d3c:	4649      	mov	r1, r9
 8001d3e:	1a89      	subs	r1, r1, r2
 8001d40:	4688      	mov	r8, r1
 8001d42:	45c1      	cmp	r9, r8
 8001d44:	41bf      	sbcs	r7, r7
 8001d46:	1af1      	subs	r1, r6, r3
 8001d48:	427f      	negs	r7, r7
 8001d4a:	1bc9      	subs	r1, r1, r7
 8001d4c:	020f      	lsls	r7, r1, #8
 8001d4e:	d461      	bmi.n	8001e14 <__aeabi_dadd+0x4c0>
 8001d50:	4647      	mov	r7, r8
 8001d52:	430f      	orrs	r7, r1
 8001d54:	d100      	bne.n	8001d58 <__aeabi_dadd+0x404>
 8001d56:	e0bd      	b.n	8001ed4 <__aeabi_dadd+0x580>
 8001d58:	000e      	movs	r6, r1
 8001d5a:	4647      	mov	r7, r8
 8001d5c:	e651      	b.n	8001a02 <__aeabi_dadd+0xae>
 8001d5e:	4cb5      	ldr	r4, [pc, #724]	@ (8002034 <__aeabi_dadd+0x6e0>)
 8001d60:	45a0      	cmp	r8, r4
 8001d62:	d100      	bne.n	8001d66 <__aeabi_dadd+0x412>
 8001d64:	e100      	b.n	8001f68 <__aeabi_dadd+0x614>
 8001d66:	2701      	movs	r7, #1
 8001d68:	2938      	cmp	r1, #56	@ 0x38
 8001d6a:	dd00      	ble.n	8001d6e <__aeabi_dadd+0x41a>
 8001d6c:	e6b8      	b.n	8001ae0 <__aeabi_dadd+0x18c>
 8001d6e:	2480      	movs	r4, #128	@ 0x80
 8001d70:	0424      	lsls	r4, r4, #16
 8001d72:	4326      	orrs	r6, r4
 8001d74:	e6a3      	b.n	8001abe <__aeabi_dadd+0x16a>
 8001d76:	4eb0      	ldr	r6, [pc, #704]	@ (8002038 <__aeabi_dadd+0x6e4>)
 8001d78:	1ae4      	subs	r4, r4, r3
 8001d7a:	4016      	ands	r6, r2
 8001d7c:	077b      	lsls	r3, r7, #29
 8001d7e:	d000      	beq.n	8001d82 <__aeabi_dadd+0x42e>
 8001d80:	e73f      	b.n	8001c02 <__aeabi_dadd+0x2ae>
 8001d82:	e743      	b.n	8001c0c <__aeabi_dadd+0x2b8>
 8001d84:	000f      	movs	r7, r1
 8001d86:	0018      	movs	r0, r3
 8001d88:	3f20      	subs	r7, #32
 8001d8a:	40f8      	lsrs	r0, r7
 8001d8c:	4684      	mov	ip, r0
 8001d8e:	2920      	cmp	r1, #32
 8001d90:	d003      	beq.n	8001d9a <__aeabi_dadd+0x446>
 8001d92:	2740      	movs	r7, #64	@ 0x40
 8001d94:	1a79      	subs	r1, r7, r1
 8001d96:	408b      	lsls	r3, r1
 8001d98:	431a      	orrs	r2, r3
 8001d9a:	1e53      	subs	r3, r2, #1
 8001d9c:	419a      	sbcs	r2, r3
 8001d9e:	4663      	mov	r3, ip
 8001da0:	0017      	movs	r7, r2
 8001da2:	431f      	orrs	r7, r3
 8001da4:	e622      	b.n	80019ec <__aeabi_dadd+0x98>
 8001da6:	48a4      	ldr	r0, [pc, #656]	@ (8002038 <__aeabi_dadd+0x6e4>)
 8001da8:	1ae1      	subs	r1, r4, r3
 8001daa:	4010      	ands	r0, r2
 8001dac:	0747      	lsls	r7, r0, #29
 8001dae:	08c0      	lsrs	r0, r0, #3
 8001db0:	e707      	b.n	8001bc2 <__aeabi_dadd+0x26e>
 8001db2:	0034      	movs	r4, r6
 8001db4:	4648      	mov	r0, r9
 8001db6:	4304      	orrs	r4, r0
 8001db8:	d100      	bne.n	8001dbc <__aeabi_dadd+0x468>
 8001dba:	e0fa      	b.n	8001fb2 <__aeabi_dadd+0x65e>
 8001dbc:	1e4c      	subs	r4, r1, #1
 8001dbe:	2901      	cmp	r1, #1
 8001dc0:	d100      	bne.n	8001dc4 <__aeabi_dadd+0x470>
 8001dc2:	e0d7      	b.n	8001f74 <__aeabi_dadd+0x620>
 8001dc4:	4f9b      	ldr	r7, [pc, #620]	@ (8002034 <__aeabi_dadd+0x6e0>)
 8001dc6:	42b9      	cmp	r1, r7
 8001dc8:	d100      	bne.n	8001dcc <__aeabi_dadd+0x478>
 8001dca:	e0e2      	b.n	8001f92 <__aeabi_dadd+0x63e>
 8001dcc:	2701      	movs	r7, #1
 8001dce:	2c38      	cmp	r4, #56	@ 0x38
 8001dd0:	dd00      	ble.n	8001dd4 <__aeabi_dadd+0x480>
 8001dd2:	e74f      	b.n	8001c74 <__aeabi_dadd+0x320>
 8001dd4:	0021      	movs	r1, r4
 8001dd6:	e73c      	b.n	8001c52 <__aeabi_dadd+0x2fe>
 8001dd8:	4c96      	ldr	r4, [pc, #600]	@ (8002034 <__aeabi_dadd+0x6e0>)
 8001dda:	42a1      	cmp	r1, r4
 8001ddc:	d100      	bne.n	8001de0 <__aeabi_dadd+0x48c>
 8001dde:	e0dd      	b.n	8001f9c <__aeabi_dadd+0x648>
 8001de0:	444a      	add	r2, r9
 8001de2:	454a      	cmp	r2, r9
 8001de4:	4180      	sbcs	r0, r0
 8001de6:	18f3      	adds	r3, r6, r3
 8001de8:	4240      	negs	r0, r0
 8001dea:	1818      	adds	r0, r3, r0
 8001dec:	07c7      	lsls	r7, r0, #31
 8001dee:	0852      	lsrs	r2, r2, #1
 8001df0:	4317      	orrs	r7, r2
 8001df2:	0846      	lsrs	r6, r0, #1
 8001df4:	0752      	lsls	r2, r2, #29
 8001df6:	d005      	beq.n	8001e04 <__aeabi_dadd+0x4b0>
 8001df8:	220f      	movs	r2, #15
 8001dfa:	000c      	movs	r4, r1
 8001dfc:	403a      	ands	r2, r7
 8001dfe:	2a04      	cmp	r2, #4
 8001e00:	d000      	beq.n	8001e04 <__aeabi_dadd+0x4b0>
 8001e02:	e62c      	b.n	8001a5e <__aeabi_dadd+0x10a>
 8001e04:	0776      	lsls	r6, r6, #29
 8001e06:	08ff      	lsrs	r7, r7, #3
 8001e08:	4337      	orrs	r7, r6
 8001e0a:	0900      	lsrs	r0, r0, #4
 8001e0c:	e6d9      	b.n	8001bc2 <__aeabi_dadd+0x26e>
 8001e0e:	2700      	movs	r7, #0
 8001e10:	2600      	movs	r6, #0
 8001e12:	e6e8      	b.n	8001be6 <__aeabi_dadd+0x292>
 8001e14:	4649      	mov	r1, r9
 8001e16:	1a57      	subs	r7, r2, r1
 8001e18:	42ba      	cmp	r2, r7
 8001e1a:	4192      	sbcs	r2, r2
 8001e1c:	1b9e      	subs	r6, r3, r6
 8001e1e:	4252      	negs	r2, r2
 8001e20:	4665      	mov	r5, ip
 8001e22:	1ab6      	subs	r6, r6, r2
 8001e24:	e5ed      	b.n	8001a02 <__aeabi_dadd+0xae>
 8001e26:	2900      	cmp	r1, #0
 8001e28:	d000      	beq.n	8001e2c <__aeabi_dadd+0x4d8>
 8001e2a:	e0c6      	b.n	8001fba <__aeabi_dadd+0x666>
 8001e2c:	2f00      	cmp	r7, #0
 8001e2e:	d167      	bne.n	8001f00 <__aeabi_dadd+0x5ac>
 8001e30:	2680      	movs	r6, #128	@ 0x80
 8001e32:	2500      	movs	r5, #0
 8001e34:	4c7f      	ldr	r4, [pc, #508]	@ (8002034 <__aeabi_dadd+0x6e0>)
 8001e36:	0336      	lsls	r6, r6, #12
 8001e38:	e6d5      	b.n	8001be6 <__aeabi_dadd+0x292>
 8001e3a:	4665      	mov	r5, ip
 8001e3c:	000c      	movs	r4, r1
 8001e3e:	001e      	movs	r6, r3
 8001e40:	08d0      	lsrs	r0, r2, #3
 8001e42:	e6e4      	b.n	8001c0e <__aeabi_dadd+0x2ba>
 8001e44:	444a      	add	r2, r9
 8001e46:	454a      	cmp	r2, r9
 8001e48:	4180      	sbcs	r0, r0
 8001e4a:	18f3      	adds	r3, r6, r3
 8001e4c:	4240      	negs	r0, r0
 8001e4e:	1818      	adds	r0, r3, r0
 8001e50:	0011      	movs	r1, r2
 8001e52:	0203      	lsls	r3, r0, #8
 8001e54:	d400      	bmi.n	8001e58 <__aeabi_dadd+0x504>
 8001e56:	e096      	b.n	8001f86 <__aeabi_dadd+0x632>
 8001e58:	4b77      	ldr	r3, [pc, #476]	@ (8002038 <__aeabi_dadd+0x6e4>)
 8001e5a:	0849      	lsrs	r1, r1, #1
 8001e5c:	4018      	ands	r0, r3
 8001e5e:	07c3      	lsls	r3, r0, #31
 8001e60:	430b      	orrs	r3, r1
 8001e62:	0844      	lsrs	r4, r0, #1
 8001e64:	0749      	lsls	r1, r1, #29
 8001e66:	d100      	bne.n	8001e6a <__aeabi_dadd+0x516>
 8001e68:	e129      	b.n	80020be <__aeabi_dadd+0x76a>
 8001e6a:	220f      	movs	r2, #15
 8001e6c:	401a      	ands	r2, r3
 8001e6e:	2a04      	cmp	r2, #4
 8001e70:	d100      	bne.n	8001e74 <__aeabi_dadd+0x520>
 8001e72:	e0ea      	b.n	800204a <__aeabi_dadd+0x6f6>
 8001e74:	1d1f      	adds	r7, r3, #4
 8001e76:	429f      	cmp	r7, r3
 8001e78:	41b6      	sbcs	r6, r6
 8001e7a:	4276      	negs	r6, r6
 8001e7c:	1936      	adds	r6, r6, r4
 8001e7e:	2402      	movs	r4, #2
 8001e80:	e6c4      	b.n	8001c0c <__aeabi_dadd+0x2b8>
 8001e82:	4649      	mov	r1, r9
 8001e84:	1a8f      	subs	r7, r1, r2
 8001e86:	45b9      	cmp	r9, r7
 8001e88:	4180      	sbcs	r0, r0
 8001e8a:	1af6      	subs	r6, r6, r3
 8001e8c:	4240      	negs	r0, r0
 8001e8e:	1a36      	subs	r6, r6, r0
 8001e90:	0233      	lsls	r3, r6, #8
 8001e92:	d406      	bmi.n	8001ea2 <__aeabi_dadd+0x54e>
 8001e94:	0773      	lsls	r3, r6, #29
 8001e96:	08ff      	lsrs	r7, r7, #3
 8001e98:	2101      	movs	r1, #1
 8001e9a:	431f      	orrs	r7, r3
 8001e9c:	08f0      	lsrs	r0, r6, #3
 8001e9e:	e690      	b.n	8001bc2 <__aeabi_dadd+0x26e>
 8001ea0:	4665      	mov	r5, ip
 8001ea2:	2401      	movs	r4, #1
 8001ea4:	e5ab      	b.n	80019fe <__aeabi_dadd+0xaa>
 8001ea6:	464b      	mov	r3, r9
 8001ea8:	0777      	lsls	r7, r6, #29
 8001eaa:	08d8      	lsrs	r0, r3, #3
 8001eac:	4307      	orrs	r7, r0
 8001eae:	08f0      	lsrs	r0, r6, #3
 8001eb0:	e6b4      	b.n	8001c1c <__aeabi_dadd+0x2c8>
 8001eb2:	000f      	movs	r7, r1
 8001eb4:	0018      	movs	r0, r3
 8001eb6:	3f20      	subs	r7, #32
 8001eb8:	40f8      	lsrs	r0, r7
 8001eba:	4684      	mov	ip, r0
 8001ebc:	2920      	cmp	r1, #32
 8001ebe:	d003      	beq.n	8001ec8 <__aeabi_dadd+0x574>
 8001ec0:	2740      	movs	r7, #64	@ 0x40
 8001ec2:	1a79      	subs	r1, r7, r1
 8001ec4:	408b      	lsls	r3, r1
 8001ec6:	431a      	orrs	r2, r3
 8001ec8:	1e53      	subs	r3, r2, #1
 8001eca:	419a      	sbcs	r2, r3
 8001ecc:	4663      	mov	r3, ip
 8001ece:	0017      	movs	r7, r2
 8001ed0:	431f      	orrs	r7, r3
 8001ed2:	e635      	b.n	8001b40 <__aeabi_dadd+0x1ec>
 8001ed4:	2500      	movs	r5, #0
 8001ed6:	2400      	movs	r4, #0
 8001ed8:	2600      	movs	r6, #0
 8001eda:	e684      	b.n	8001be6 <__aeabi_dadd+0x292>
 8001edc:	000c      	movs	r4, r1
 8001ede:	0035      	movs	r5, r6
 8001ee0:	3c20      	subs	r4, #32
 8001ee2:	40e5      	lsrs	r5, r4
 8001ee4:	2920      	cmp	r1, #32
 8001ee6:	d005      	beq.n	8001ef4 <__aeabi_dadd+0x5a0>
 8001ee8:	2440      	movs	r4, #64	@ 0x40
 8001eea:	1a61      	subs	r1, r4, r1
 8001eec:	408e      	lsls	r6, r1
 8001eee:	4649      	mov	r1, r9
 8001ef0:	4331      	orrs	r1, r6
 8001ef2:	4689      	mov	r9, r1
 8001ef4:	4648      	mov	r0, r9
 8001ef6:	1e41      	subs	r1, r0, #1
 8001ef8:	4188      	sbcs	r0, r1
 8001efa:	0007      	movs	r7, r0
 8001efc:	432f      	orrs	r7, r5
 8001efe:	e5ef      	b.n	8001ae0 <__aeabi_dadd+0x18c>
 8001f00:	08d2      	lsrs	r2, r2, #3
 8001f02:	075f      	lsls	r7, r3, #29
 8001f04:	4665      	mov	r5, ip
 8001f06:	4317      	orrs	r7, r2
 8001f08:	08d8      	lsrs	r0, r3, #3
 8001f0a:	e687      	b.n	8001c1c <__aeabi_dadd+0x2c8>
 8001f0c:	1a17      	subs	r7, r2, r0
 8001f0e:	42ba      	cmp	r2, r7
 8001f10:	4192      	sbcs	r2, r2
 8001f12:	1b9e      	subs	r6, r3, r6
 8001f14:	4252      	negs	r2, r2
 8001f16:	1ab6      	subs	r6, r6, r2
 8001f18:	0233      	lsls	r3, r6, #8
 8001f1a:	d4c1      	bmi.n	8001ea0 <__aeabi_dadd+0x54c>
 8001f1c:	0773      	lsls	r3, r6, #29
 8001f1e:	08ff      	lsrs	r7, r7, #3
 8001f20:	4665      	mov	r5, ip
 8001f22:	2101      	movs	r1, #1
 8001f24:	431f      	orrs	r7, r3
 8001f26:	08f0      	lsrs	r0, r6, #3
 8001f28:	e64b      	b.n	8001bc2 <__aeabi_dadd+0x26e>
 8001f2a:	2f00      	cmp	r7, #0
 8001f2c:	d07b      	beq.n	8002026 <__aeabi_dadd+0x6d2>
 8001f2e:	4665      	mov	r5, ip
 8001f30:	001e      	movs	r6, r3
 8001f32:	4691      	mov	r9, r2
 8001f34:	e63f      	b.n	8001bb6 <__aeabi_dadd+0x262>
 8001f36:	1a81      	subs	r1, r0, r2
 8001f38:	4688      	mov	r8, r1
 8001f3a:	45c1      	cmp	r9, r8
 8001f3c:	41a4      	sbcs	r4, r4
 8001f3e:	1af1      	subs	r1, r6, r3
 8001f40:	4264      	negs	r4, r4
 8001f42:	1b09      	subs	r1, r1, r4
 8001f44:	2480      	movs	r4, #128	@ 0x80
 8001f46:	0424      	lsls	r4, r4, #16
 8001f48:	4221      	tst	r1, r4
 8001f4a:	d077      	beq.n	800203c <__aeabi_dadd+0x6e8>
 8001f4c:	1a10      	subs	r0, r2, r0
 8001f4e:	4282      	cmp	r2, r0
 8001f50:	4192      	sbcs	r2, r2
 8001f52:	0007      	movs	r7, r0
 8001f54:	1b9e      	subs	r6, r3, r6
 8001f56:	4252      	negs	r2, r2
 8001f58:	1ab6      	subs	r6, r6, r2
 8001f5a:	4337      	orrs	r7, r6
 8001f5c:	d000      	beq.n	8001f60 <__aeabi_dadd+0x60c>
 8001f5e:	e0a0      	b.n	80020a2 <__aeabi_dadd+0x74e>
 8001f60:	4665      	mov	r5, ip
 8001f62:	2400      	movs	r4, #0
 8001f64:	2600      	movs	r6, #0
 8001f66:	e63e      	b.n	8001be6 <__aeabi_dadd+0x292>
 8001f68:	075f      	lsls	r7, r3, #29
 8001f6a:	08d2      	lsrs	r2, r2, #3
 8001f6c:	4665      	mov	r5, ip
 8001f6e:	4317      	orrs	r7, r2
 8001f70:	08d8      	lsrs	r0, r3, #3
 8001f72:	e653      	b.n	8001c1c <__aeabi_dadd+0x2c8>
 8001f74:	1881      	adds	r1, r0, r2
 8001f76:	4291      	cmp	r1, r2
 8001f78:	4192      	sbcs	r2, r2
 8001f7a:	18f0      	adds	r0, r6, r3
 8001f7c:	4252      	negs	r2, r2
 8001f7e:	1880      	adds	r0, r0, r2
 8001f80:	0203      	lsls	r3, r0, #8
 8001f82:	d500      	bpl.n	8001f86 <__aeabi_dadd+0x632>
 8001f84:	e768      	b.n	8001e58 <__aeabi_dadd+0x504>
 8001f86:	0747      	lsls	r7, r0, #29
 8001f88:	08c9      	lsrs	r1, r1, #3
 8001f8a:	430f      	orrs	r7, r1
 8001f8c:	08c0      	lsrs	r0, r0, #3
 8001f8e:	2101      	movs	r1, #1
 8001f90:	e617      	b.n	8001bc2 <__aeabi_dadd+0x26e>
 8001f92:	08d2      	lsrs	r2, r2, #3
 8001f94:	075f      	lsls	r7, r3, #29
 8001f96:	4317      	orrs	r7, r2
 8001f98:	08d8      	lsrs	r0, r3, #3
 8001f9a:	e63f      	b.n	8001c1c <__aeabi_dadd+0x2c8>
 8001f9c:	000c      	movs	r4, r1
 8001f9e:	2600      	movs	r6, #0
 8001fa0:	2700      	movs	r7, #0
 8001fa2:	e620      	b.n	8001be6 <__aeabi_dadd+0x292>
 8001fa4:	2900      	cmp	r1, #0
 8001fa6:	d156      	bne.n	8002056 <__aeabi_dadd+0x702>
 8001fa8:	075f      	lsls	r7, r3, #29
 8001faa:	08d2      	lsrs	r2, r2, #3
 8001fac:	4317      	orrs	r7, r2
 8001fae:	08d8      	lsrs	r0, r3, #3
 8001fb0:	e634      	b.n	8001c1c <__aeabi_dadd+0x2c8>
 8001fb2:	000c      	movs	r4, r1
 8001fb4:	001e      	movs	r6, r3
 8001fb6:	08d0      	lsrs	r0, r2, #3
 8001fb8:	e629      	b.n	8001c0e <__aeabi_dadd+0x2ba>
 8001fba:	08c1      	lsrs	r1, r0, #3
 8001fbc:	0770      	lsls	r0, r6, #29
 8001fbe:	4301      	orrs	r1, r0
 8001fc0:	08f0      	lsrs	r0, r6, #3
 8001fc2:	2f00      	cmp	r7, #0
 8001fc4:	d062      	beq.n	800208c <__aeabi_dadd+0x738>
 8001fc6:	2480      	movs	r4, #128	@ 0x80
 8001fc8:	0324      	lsls	r4, r4, #12
 8001fca:	4220      	tst	r0, r4
 8001fcc:	d007      	beq.n	8001fde <__aeabi_dadd+0x68a>
 8001fce:	08de      	lsrs	r6, r3, #3
 8001fd0:	4226      	tst	r6, r4
 8001fd2:	d104      	bne.n	8001fde <__aeabi_dadd+0x68a>
 8001fd4:	4665      	mov	r5, ip
 8001fd6:	0030      	movs	r0, r6
 8001fd8:	08d1      	lsrs	r1, r2, #3
 8001fda:	075b      	lsls	r3, r3, #29
 8001fdc:	4319      	orrs	r1, r3
 8001fde:	0f4f      	lsrs	r7, r1, #29
 8001fe0:	00c9      	lsls	r1, r1, #3
 8001fe2:	08c9      	lsrs	r1, r1, #3
 8001fe4:	077f      	lsls	r7, r7, #29
 8001fe6:	430f      	orrs	r7, r1
 8001fe8:	e618      	b.n	8001c1c <__aeabi_dadd+0x2c8>
 8001fea:	000c      	movs	r4, r1
 8001fec:	0030      	movs	r0, r6
 8001fee:	3c20      	subs	r4, #32
 8001ff0:	40e0      	lsrs	r0, r4
 8001ff2:	4684      	mov	ip, r0
 8001ff4:	2920      	cmp	r1, #32
 8001ff6:	d005      	beq.n	8002004 <__aeabi_dadd+0x6b0>
 8001ff8:	2440      	movs	r4, #64	@ 0x40
 8001ffa:	1a61      	subs	r1, r4, r1
 8001ffc:	408e      	lsls	r6, r1
 8001ffe:	4649      	mov	r1, r9
 8002000:	4331      	orrs	r1, r6
 8002002:	4689      	mov	r9, r1
 8002004:	4648      	mov	r0, r9
 8002006:	1e41      	subs	r1, r0, #1
 8002008:	4188      	sbcs	r0, r1
 800200a:	4661      	mov	r1, ip
 800200c:	0007      	movs	r7, r0
 800200e:	430f      	orrs	r7, r1
 8002010:	e630      	b.n	8001c74 <__aeabi_dadd+0x320>
 8002012:	2120      	movs	r1, #32
 8002014:	2700      	movs	r7, #0
 8002016:	1a09      	subs	r1, r1, r0
 8002018:	e50e      	b.n	8001a38 <__aeabi_dadd+0xe4>
 800201a:	001e      	movs	r6, r3
 800201c:	2f00      	cmp	r7, #0
 800201e:	d000      	beq.n	8002022 <__aeabi_dadd+0x6ce>
 8002020:	e522      	b.n	8001a68 <__aeabi_dadd+0x114>
 8002022:	2400      	movs	r4, #0
 8002024:	e758      	b.n	8001ed8 <__aeabi_dadd+0x584>
 8002026:	2500      	movs	r5, #0
 8002028:	2400      	movs	r4, #0
 800202a:	2600      	movs	r6, #0
 800202c:	e5db      	b.n	8001be6 <__aeabi_dadd+0x292>
 800202e:	46c0      	nop			@ (mov r8, r8)
 8002030:	000007fe 	.word	0x000007fe
 8002034:	000007ff 	.word	0x000007ff
 8002038:	ff7fffff 	.word	0xff7fffff
 800203c:	4647      	mov	r7, r8
 800203e:	430f      	orrs	r7, r1
 8002040:	d100      	bne.n	8002044 <__aeabi_dadd+0x6f0>
 8002042:	e747      	b.n	8001ed4 <__aeabi_dadd+0x580>
 8002044:	000e      	movs	r6, r1
 8002046:	46c1      	mov	r9, r8
 8002048:	e5b5      	b.n	8001bb6 <__aeabi_dadd+0x262>
 800204a:	08df      	lsrs	r7, r3, #3
 800204c:	0764      	lsls	r4, r4, #29
 800204e:	2102      	movs	r1, #2
 8002050:	4327      	orrs	r7, r4
 8002052:	0900      	lsrs	r0, r0, #4
 8002054:	e5b5      	b.n	8001bc2 <__aeabi_dadd+0x26e>
 8002056:	0019      	movs	r1, r3
 8002058:	08c0      	lsrs	r0, r0, #3
 800205a:	0777      	lsls	r7, r6, #29
 800205c:	4307      	orrs	r7, r0
 800205e:	4311      	orrs	r1, r2
 8002060:	08f0      	lsrs	r0, r6, #3
 8002062:	2900      	cmp	r1, #0
 8002064:	d100      	bne.n	8002068 <__aeabi_dadd+0x714>
 8002066:	e5d9      	b.n	8001c1c <__aeabi_dadd+0x2c8>
 8002068:	2180      	movs	r1, #128	@ 0x80
 800206a:	0309      	lsls	r1, r1, #12
 800206c:	4208      	tst	r0, r1
 800206e:	d007      	beq.n	8002080 <__aeabi_dadd+0x72c>
 8002070:	08dc      	lsrs	r4, r3, #3
 8002072:	420c      	tst	r4, r1
 8002074:	d104      	bne.n	8002080 <__aeabi_dadd+0x72c>
 8002076:	08d2      	lsrs	r2, r2, #3
 8002078:	075b      	lsls	r3, r3, #29
 800207a:	431a      	orrs	r2, r3
 800207c:	0017      	movs	r7, r2
 800207e:	0020      	movs	r0, r4
 8002080:	0f7b      	lsrs	r3, r7, #29
 8002082:	00ff      	lsls	r7, r7, #3
 8002084:	08ff      	lsrs	r7, r7, #3
 8002086:	075b      	lsls	r3, r3, #29
 8002088:	431f      	orrs	r7, r3
 800208a:	e5c7      	b.n	8001c1c <__aeabi_dadd+0x2c8>
 800208c:	000f      	movs	r7, r1
 800208e:	e5c5      	b.n	8001c1c <__aeabi_dadd+0x2c8>
 8002090:	4b12      	ldr	r3, [pc, #72]	@ (80020dc <__aeabi_dadd+0x788>)
 8002092:	08d2      	lsrs	r2, r2, #3
 8002094:	4033      	ands	r3, r6
 8002096:	075f      	lsls	r7, r3, #29
 8002098:	025b      	lsls	r3, r3, #9
 800209a:	2401      	movs	r4, #1
 800209c:	4317      	orrs	r7, r2
 800209e:	0b1e      	lsrs	r6, r3, #12
 80020a0:	e5a1      	b.n	8001be6 <__aeabi_dadd+0x292>
 80020a2:	4226      	tst	r6, r4
 80020a4:	d012      	beq.n	80020cc <__aeabi_dadd+0x778>
 80020a6:	4b0d      	ldr	r3, [pc, #52]	@ (80020dc <__aeabi_dadd+0x788>)
 80020a8:	4665      	mov	r5, ip
 80020aa:	0002      	movs	r2, r0
 80020ac:	2401      	movs	r4, #1
 80020ae:	401e      	ands	r6, r3
 80020b0:	e4e6      	b.n	8001a80 <__aeabi_dadd+0x12c>
 80020b2:	0021      	movs	r1, r4
 80020b4:	e585      	b.n	8001bc2 <__aeabi_dadd+0x26e>
 80020b6:	0017      	movs	r7, r2
 80020b8:	e5a8      	b.n	8001c0c <__aeabi_dadd+0x2b8>
 80020ba:	003a      	movs	r2, r7
 80020bc:	e4d4      	b.n	8001a68 <__aeabi_dadd+0x114>
 80020be:	08db      	lsrs	r3, r3, #3
 80020c0:	0764      	lsls	r4, r4, #29
 80020c2:	431c      	orrs	r4, r3
 80020c4:	0027      	movs	r7, r4
 80020c6:	2102      	movs	r1, #2
 80020c8:	0900      	lsrs	r0, r0, #4
 80020ca:	e57a      	b.n	8001bc2 <__aeabi_dadd+0x26e>
 80020cc:	08c0      	lsrs	r0, r0, #3
 80020ce:	0777      	lsls	r7, r6, #29
 80020d0:	4307      	orrs	r7, r0
 80020d2:	4665      	mov	r5, ip
 80020d4:	2100      	movs	r1, #0
 80020d6:	08f0      	lsrs	r0, r6, #3
 80020d8:	e573      	b.n	8001bc2 <__aeabi_dadd+0x26e>
 80020da:	46c0      	nop			@ (mov r8, r8)
 80020dc:	ff7fffff 	.word	0xff7fffff

080020e0 <__aeabi_ddiv>:
 80020e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80020e2:	46de      	mov	lr, fp
 80020e4:	4645      	mov	r5, r8
 80020e6:	4657      	mov	r7, sl
 80020e8:	464e      	mov	r6, r9
 80020ea:	b5e0      	push	{r5, r6, r7, lr}
 80020ec:	b087      	sub	sp, #28
 80020ee:	9200      	str	r2, [sp, #0]
 80020f0:	9301      	str	r3, [sp, #4]
 80020f2:	030b      	lsls	r3, r1, #12
 80020f4:	0b1b      	lsrs	r3, r3, #12
 80020f6:	469b      	mov	fp, r3
 80020f8:	0fca      	lsrs	r2, r1, #31
 80020fa:	004b      	lsls	r3, r1, #1
 80020fc:	0004      	movs	r4, r0
 80020fe:	4680      	mov	r8, r0
 8002100:	0d5b      	lsrs	r3, r3, #21
 8002102:	9202      	str	r2, [sp, #8]
 8002104:	d100      	bne.n	8002108 <__aeabi_ddiv+0x28>
 8002106:	e098      	b.n	800223a <__aeabi_ddiv+0x15a>
 8002108:	4a7c      	ldr	r2, [pc, #496]	@ (80022fc <__aeabi_ddiv+0x21c>)
 800210a:	4293      	cmp	r3, r2
 800210c:	d037      	beq.n	800217e <__aeabi_ddiv+0x9e>
 800210e:	4659      	mov	r1, fp
 8002110:	0f42      	lsrs	r2, r0, #29
 8002112:	00c9      	lsls	r1, r1, #3
 8002114:	430a      	orrs	r2, r1
 8002116:	2180      	movs	r1, #128	@ 0x80
 8002118:	0409      	lsls	r1, r1, #16
 800211a:	4311      	orrs	r1, r2
 800211c:	00c2      	lsls	r2, r0, #3
 800211e:	4690      	mov	r8, r2
 8002120:	4a77      	ldr	r2, [pc, #476]	@ (8002300 <__aeabi_ddiv+0x220>)
 8002122:	4689      	mov	r9, r1
 8002124:	4692      	mov	sl, r2
 8002126:	449a      	add	sl, r3
 8002128:	2300      	movs	r3, #0
 800212a:	2400      	movs	r4, #0
 800212c:	9303      	str	r3, [sp, #12]
 800212e:	9e00      	ldr	r6, [sp, #0]
 8002130:	9f01      	ldr	r7, [sp, #4]
 8002132:	033b      	lsls	r3, r7, #12
 8002134:	0b1b      	lsrs	r3, r3, #12
 8002136:	469b      	mov	fp, r3
 8002138:	007b      	lsls	r3, r7, #1
 800213a:	0030      	movs	r0, r6
 800213c:	0d5b      	lsrs	r3, r3, #21
 800213e:	0ffd      	lsrs	r5, r7, #31
 8002140:	2b00      	cmp	r3, #0
 8002142:	d059      	beq.n	80021f8 <__aeabi_ddiv+0x118>
 8002144:	4a6d      	ldr	r2, [pc, #436]	@ (80022fc <__aeabi_ddiv+0x21c>)
 8002146:	4293      	cmp	r3, r2
 8002148:	d048      	beq.n	80021dc <__aeabi_ddiv+0xfc>
 800214a:	4659      	mov	r1, fp
 800214c:	0f72      	lsrs	r2, r6, #29
 800214e:	00c9      	lsls	r1, r1, #3
 8002150:	430a      	orrs	r2, r1
 8002152:	2180      	movs	r1, #128	@ 0x80
 8002154:	0409      	lsls	r1, r1, #16
 8002156:	4311      	orrs	r1, r2
 8002158:	468b      	mov	fp, r1
 800215a:	4969      	ldr	r1, [pc, #420]	@ (8002300 <__aeabi_ddiv+0x220>)
 800215c:	00f2      	lsls	r2, r6, #3
 800215e:	468c      	mov	ip, r1
 8002160:	4651      	mov	r1, sl
 8002162:	4463      	add	r3, ip
 8002164:	1acb      	subs	r3, r1, r3
 8002166:	469a      	mov	sl, r3
 8002168:	2100      	movs	r1, #0
 800216a:	9e02      	ldr	r6, [sp, #8]
 800216c:	406e      	eors	r6, r5
 800216e:	b2f6      	uxtb	r6, r6
 8002170:	2c0f      	cmp	r4, #15
 8002172:	d900      	bls.n	8002176 <__aeabi_ddiv+0x96>
 8002174:	e0ce      	b.n	8002314 <__aeabi_ddiv+0x234>
 8002176:	4b63      	ldr	r3, [pc, #396]	@ (8002304 <__aeabi_ddiv+0x224>)
 8002178:	00a4      	lsls	r4, r4, #2
 800217a:	591b      	ldr	r3, [r3, r4]
 800217c:	469f      	mov	pc, r3
 800217e:	465a      	mov	r2, fp
 8002180:	4302      	orrs	r2, r0
 8002182:	4691      	mov	r9, r2
 8002184:	d000      	beq.n	8002188 <__aeabi_ddiv+0xa8>
 8002186:	e090      	b.n	80022aa <__aeabi_ddiv+0x1ca>
 8002188:	469a      	mov	sl, r3
 800218a:	2302      	movs	r3, #2
 800218c:	4690      	mov	r8, r2
 800218e:	2408      	movs	r4, #8
 8002190:	9303      	str	r3, [sp, #12]
 8002192:	e7cc      	b.n	800212e <__aeabi_ddiv+0x4e>
 8002194:	46cb      	mov	fp, r9
 8002196:	4642      	mov	r2, r8
 8002198:	9d02      	ldr	r5, [sp, #8]
 800219a:	9903      	ldr	r1, [sp, #12]
 800219c:	2902      	cmp	r1, #2
 800219e:	d100      	bne.n	80021a2 <__aeabi_ddiv+0xc2>
 80021a0:	e1de      	b.n	8002560 <__aeabi_ddiv+0x480>
 80021a2:	2903      	cmp	r1, #3
 80021a4:	d100      	bne.n	80021a8 <__aeabi_ddiv+0xc8>
 80021a6:	e08d      	b.n	80022c4 <__aeabi_ddiv+0x1e4>
 80021a8:	2901      	cmp	r1, #1
 80021aa:	d000      	beq.n	80021ae <__aeabi_ddiv+0xce>
 80021ac:	e179      	b.n	80024a2 <__aeabi_ddiv+0x3c2>
 80021ae:	002e      	movs	r6, r5
 80021b0:	2200      	movs	r2, #0
 80021b2:	2300      	movs	r3, #0
 80021b4:	2400      	movs	r4, #0
 80021b6:	4690      	mov	r8, r2
 80021b8:	051b      	lsls	r3, r3, #20
 80021ba:	4323      	orrs	r3, r4
 80021bc:	07f6      	lsls	r6, r6, #31
 80021be:	4333      	orrs	r3, r6
 80021c0:	4640      	mov	r0, r8
 80021c2:	0019      	movs	r1, r3
 80021c4:	b007      	add	sp, #28
 80021c6:	bcf0      	pop	{r4, r5, r6, r7}
 80021c8:	46bb      	mov	fp, r7
 80021ca:	46b2      	mov	sl, r6
 80021cc:	46a9      	mov	r9, r5
 80021ce:	46a0      	mov	r8, r4
 80021d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80021d2:	2200      	movs	r2, #0
 80021d4:	2400      	movs	r4, #0
 80021d6:	4690      	mov	r8, r2
 80021d8:	4b48      	ldr	r3, [pc, #288]	@ (80022fc <__aeabi_ddiv+0x21c>)
 80021da:	e7ed      	b.n	80021b8 <__aeabi_ddiv+0xd8>
 80021dc:	465a      	mov	r2, fp
 80021de:	9b00      	ldr	r3, [sp, #0]
 80021e0:	431a      	orrs	r2, r3
 80021e2:	4b49      	ldr	r3, [pc, #292]	@ (8002308 <__aeabi_ddiv+0x228>)
 80021e4:	469c      	mov	ip, r3
 80021e6:	44e2      	add	sl, ip
 80021e8:	2a00      	cmp	r2, #0
 80021ea:	d159      	bne.n	80022a0 <__aeabi_ddiv+0x1c0>
 80021ec:	2302      	movs	r3, #2
 80021ee:	431c      	orrs	r4, r3
 80021f0:	2300      	movs	r3, #0
 80021f2:	2102      	movs	r1, #2
 80021f4:	469b      	mov	fp, r3
 80021f6:	e7b8      	b.n	800216a <__aeabi_ddiv+0x8a>
 80021f8:	465a      	mov	r2, fp
 80021fa:	9b00      	ldr	r3, [sp, #0]
 80021fc:	431a      	orrs	r2, r3
 80021fe:	d049      	beq.n	8002294 <__aeabi_ddiv+0x1b4>
 8002200:	465b      	mov	r3, fp
 8002202:	2b00      	cmp	r3, #0
 8002204:	d100      	bne.n	8002208 <__aeabi_ddiv+0x128>
 8002206:	e19c      	b.n	8002542 <__aeabi_ddiv+0x462>
 8002208:	4658      	mov	r0, fp
 800220a:	f001 fc0d 	bl	8003a28 <__clzsi2>
 800220e:	0002      	movs	r2, r0
 8002210:	0003      	movs	r3, r0
 8002212:	3a0b      	subs	r2, #11
 8002214:	271d      	movs	r7, #29
 8002216:	9e00      	ldr	r6, [sp, #0]
 8002218:	1aba      	subs	r2, r7, r2
 800221a:	0019      	movs	r1, r3
 800221c:	4658      	mov	r0, fp
 800221e:	40d6      	lsrs	r6, r2
 8002220:	3908      	subs	r1, #8
 8002222:	4088      	lsls	r0, r1
 8002224:	0032      	movs	r2, r6
 8002226:	4302      	orrs	r2, r0
 8002228:	4693      	mov	fp, r2
 800222a:	9a00      	ldr	r2, [sp, #0]
 800222c:	408a      	lsls	r2, r1
 800222e:	4937      	ldr	r1, [pc, #220]	@ (800230c <__aeabi_ddiv+0x22c>)
 8002230:	4453      	add	r3, sl
 8002232:	468a      	mov	sl, r1
 8002234:	2100      	movs	r1, #0
 8002236:	449a      	add	sl, r3
 8002238:	e797      	b.n	800216a <__aeabi_ddiv+0x8a>
 800223a:	465b      	mov	r3, fp
 800223c:	4303      	orrs	r3, r0
 800223e:	4699      	mov	r9, r3
 8002240:	d021      	beq.n	8002286 <__aeabi_ddiv+0x1a6>
 8002242:	465b      	mov	r3, fp
 8002244:	2b00      	cmp	r3, #0
 8002246:	d100      	bne.n	800224a <__aeabi_ddiv+0x16a>
 8002248:	e169      	b.n	800251e <__aeabi_ddiv+0x43e>
 800224a:	4658      	mov	r0, fp
 800224c:	f001 fbec 	bl	8003a28 <__clzsi2>
 8002250:	230b      	movs	r3, #11
 8002252:	425b      	negs	r3, r3
 8002254:	469c      	mov	ip, r3
 8002256:	0002      	movs	r2, r0
 8002258:	4484      	add	ip, r0
 800225a:	4666      	mov	r6, ip
 800225c:	231d      	movs	r3, #29
 800225e:	1b9b      	subs	r3, r3, r6
 8002260:	0026      	movs	r6, r4
 8002262:	0011      	movs	r1, r2
 8002264:	4658      	mov	r0, fp
 8002266:	40de      	lsrs	r6, r3
 8002268:	3908      	subs	r1, #8
 800226a:	4088      	lsls	r0, r1
 800226c:	0033      	movs	r3, r6
 800226e:	4303      	orrs	r3, r0
 8002270:	4699      	mov	r9, r3
 8002272:	0023      	movs	r3, r4
 8002274:	408b      	lsls	r3, r1
 8002276:	4698      	mov	r8, r3
 8002278:	4b25      	ldr	r3, [pc, #148]	@ (8002310 <__aeabi_ddiv+0x230>)
 800227a:	2400      	movs	r4, #0
 800227c:	1a9b      	subs	r3, r3, r2
 800227e:	469a      	mov	sl, r3
 8002280:	2300      	movs	r3, #0
 8002282:	9303      	str	r3, [sp, #12]
 8002284:	e753      	b.n	800212e <__aeabi_ddiv+0x4e>
 8002286:	2300      	movs	r3, #0
 8002288:	4698      	mov	r8, r3
 800228a:	469a      	mov	sl, r3
 800228c:	3301      	adds	r3, #1
 800228e:	2404      	movs	r4, #4
 8002290:	9303      	str	r3, [sp, #12]
 8002292:	e74c      	b.n	800212e <__aeabi_ddiv+0x4e>
 8002294:	2301      	movs	r3, #1
 8002296:	431c      	orrs	r4, r3
 8002298:	2300      	movs	r3, #0
 800229a:	2101      	movs	r1, #1
 800229c:	469b      	mov	fp, r3
 800229e:	e764      	b.n	800216a <__aeabi_ddiv+0x8a>
 80022a0:	2303      	movs	r3, #3
 80022a2:	0032      	movs	r2, r6
 80022a4:	2103      	movs	r1, #3
 80022a6:	431c      	orrs	r4, r3
 80022a8:	e75f      	b.n	800216a <__aeabi_ddiv+0x8a>
 80022aa:	469a      	mov	sl, r3
 80022ac:	2303      	movs	r3, #3
 80022ae:	46d9      	mov	r9, fp
 80022b0:	240c      	movs	r4, #12
 80022b2:	9303      	str	r3, [sp, #12]
 80022b4:	e73b      	b.n	800212e <__aeabi_ddiv+0x4e>
 80022b6:	2300      	movs	r3, #0
 80022b8:	2480      	movs	r4, #128	@ 0x80
 80022ba:	4698      	mov	r8, r3
 80022bc:	2600      	movs	r6, #0
 80022be:	4b0f      	ldr	r3, [pc, #60]	@ (80022fc <__aeabi_ddiv+0x21c>)
 80022c0:	0324      	lsls	r4, r4, #12
 80022c2:	e779      	b.n	80021b8 <__aeabi_ddiv+0xd8>
 80022c4:	2480      	movs	r4, #128	@ 0x80
 80022c6:	465b      	mov	r3, fp
 80022c8:	0324      	lsls	r4, r4, #12
 80022ca:	431c      	orrs	r4, r3
 80022cc:	0324      	lsls	r4, r4, #12
 80022ce:	002e      	movs	r6, r5
 80022d0:	4690      	mov	r8, r2
 80022d2:	4b0a      	ldr	r3, [pc, #40]	@ (80022fc <__aeabi_ddiv+0x21c>)
 80022d4:	0b24      	lsrs	r4, r4, #12
 80022d6:	e76f      	b.n	80021b8 <__aeabi_ddiv+0xd8>
 80022d8:	2480      	movs	r4, #128	@ 0x80
 80022da:	464b      	mov	r3, r9
 80022dc:	0324      	lsls	r4, r4, #12
 80022de:	4223      	tst	r3, r4
 80022e0:	d002      	beq.n	80022e8 <__aeabi_ddiv+0x208>
 80022e2:	465b      	mov	r3, fp
 80022e4:	4223      	tst	r3, r4
 80022e6:	d0f0      	beq.n	80022ca <__aeabi_ddiv+0x1ea>
 80022e8:	2480      	movs	r4, #128	@ 0x80
 80022ea:	464b      	mov	r3, r9
 80022ec:	0324      	lsls	r4, r4, #12
 80022ee:	431c      	orrs	r4, r3
 80022f0:	0324      	lsls	r4, r4, #12
 80022f2:	9e02      	ldr	r6, [sp, #8]
 80022f4:	4b01      	ldr	r3, [pc, #4]	@ (80022fc <__aeabi_ddiv+0x21c>)
 80022f6:	0b24      	lsrs	r4, r4, #12
 80022f8:	e75e      	b.n	80021b8 <__aeabi_ddiv+0xd8>
 80022fa:	46c0      	nop			@ (mov r8, r8)
 80022fc:	000007ff 	.word	0x000007ff
 8002300:	fffffc01 	.word	0xfffffc01
 8002304:	0802dcfc 	.word	0x0802dcfc
 8002308:	fffff801 	.word	0xfffff801
 800230c:	000003f3 	.word	0x000003f3
 8002310:	fffffc0d 	.word	0xfffffc0d
 8002314:	45cb      	cmp	fp, r9
 8002316:	d200      	bcs.n	800231a <__aeabi_ddiv+0x23a>
 8002318:	e0f8      	b.n	800250c <__aeabi_ddiv+0x42c>
 800231a:	d100      	bne.n	800231e <__aeabi_ddiv+0x23e>
 800231c:	e0f3      	b.n	8002506 <__aeabi_ddiv+0x426>
 800231e:	2301      	movs	r3, #1
 8002320:	425b      	negs	r3, r3
 8002322:	469c      	mov	ip, r3
 8002324:	4644      	mov	r4, r8
 8002326:	4648      	mov	r0, r9
 8002328:	2500      	movs	r5, #0
 800232a:	44e2      	add	sl, ip
 800232c:	465b      	mov	r3, fp
 800232e:	0e17      	lsrs	r7, r2, #24
 8002330:	021b      	lsls	r3, r3, #8
 8002332:	431f      	orrs	r7, r3
 8002334:	0c19      	lsrs	r1, r3, #16
 8002336:	043b      	lsls	r3, r7, #16
 8002338:	0212      	lsls	r2, r2, #8
 800233a:	9700      	str	r7, [sp, #0]
 800233c:	0c1f      	lsrs	r7, r3, #16
 800233e:	4691      	mov	r9, r2
 8002340:	9102      	str	r1, [sp, #8]
 8002342:	9703      	str	r7, [sp, #12]
 8002344:	f7fd ffb4 	bl	80002b0 <__aeabi_uidivmod>
 8002348:	0002      	movs	r2, r0
 800234a:	437a      	muls	r2, r7
 800234c:	040b      	lsls	r3, r1, #16
 800234e:	0c21      	lsrs	r1, r4, #16
 8002350:	4680      	mov	r8, r0
 8002352:	4319      	orrs	r1, r3
 8002354:	428a      	cmp	r2, r1
 8002356:	d909      	bls.n	800236c <__aeabi_ddiv+0x28c>
 8002358:	9f00      	ldr	r7, [sp, #0]
 800235a:	2301      	movs	r3, #1
 800235c:	46bc      	mov	ip, r7
 800235e:	425b      	negs	r3, r3
 8002360:	4461      	add	r1, ip
 8002362:	469c      	mov	ip, r3
 8002364:	44e0      	add	r8, ip
 8002366:	428f      	cmp	r7, r1
 8002368:	d800      	bhi.n	800236c <__aeabi_ddiv+0x28c>
 800236a:	e15c      	b.n	8002626 <__aeabi_ddiv+0x546>
 800236c:	1a88      	subs	r0, r1, r2
 800236e:	9902      	ldr	r1, [sp, #8]
 8002370:	f7fd ff9e 	bl	80002b0 <__aeabi_uidivmod>
 8002374:	9a03      	ldr	r2, [sp, #12]
 8002376:	0424      	lsls	r4, r4, #16
 8002378:	4342      	muls	r2, r0
 800237a:	0409      	lsls	r1, r1, #16
 800237c:	0c24      	lsrs	r4, r4, #16
 800237e:	0003      	movs	r3, r0
 8002380:	430c      	orrs	r4, r1
 8002382:	42a2      	cmp	r2, r4
 8002384:	d906      	bls.n	8002394 <__aeabi_ddiv+0x2b4>
 8002386:	9900      	ldr	r1, [sp, #0]
 8002388:	3b01      	subs	r3, #1
 800238a:	468c      	mov	ip, r1
 800238c:	4464      	add	r4, ip
 800238e:	42a1      	cmp	r1, r4
 8002390:	d800      	bhi.n	8002394 <__aeabi_ddiv+0x2b4>
 8002392:	e142      	b.n	800261a <__aeabi_ddiv+0x53a>
 8002394:	1aa0      	subs	r0, r4, r2
 8002396:	4642      	mov	r2, r8
 8002398:	0412      	lsls	r2, r2, #16
 800239a:	431a      	orrs	r2, r3
 800239c:	4693      	mov	fp, r2
 800239e:	464b      	mov	r3, r9
 80023a0:	4659      	mov	r1, fp
 80023a2:	0c1b      	lsrs	r3, r3, #16
 80023a4:	001f      	movs	r7, r3
 80023a6:	9304      	str	r3, [sp, #16]
 80023a8:	040b      	lsls	r3, r1, #16
 80023aa:	4649      	mov	r1, r9
 80023ac:	0409      	lsls	r1, r1, #16
 80023ae:	0c09      	lsrs	r1, r1, #16
 80023b0:	000c      	movs	r4, r1
 80023b2:	0c1b      	lsrs	r3, r3, #16
 80023b4:	435c      	muls	r4, r3
 80023b6:	0c12      	lsrs	r2, r2, #16
 80023b8:	437b      	muls	r3, r7
 80023ba:	4688      	mov	r8, r1
 80023bc:	4351      	muls	r1, r2
 80023be:	437a      	muls	r2, r7
 80023c0:	0c27      	lsrs	r7, r4, #16
 80023c2:	46bc      	mov	ip, r7
 80023c4:	185b      	adds	r3, r3, r1
 80023c6:	4463      	add	r3, ip
 80023c8:	4299      	cmp	r1, r3
 80023ca:	d903      	bls.n	80023d4 <__aeabi_ddiv+0x2f4>
 80023cc:	2180      	movs	r1, #128	@ 0x80
 80023ce:	0249      	lsls	r1, r1, #9
 80023d0:	468c      	mov	ip, r1
 80023d2:	4462      	add	r2, ip
 80023d4:	0c19      	lsrs	r1, r3, #16
 80023d6:	0424      	lsls	r4, r4, #16
 80023d8:	041b      	lsls	r3, r3, #16
 80023da:	0c24      	lsrs	r4, r4, #16
 80023dc:	188a      	adds	r2, r1, r2
 80023de:	191c      	adds	r4, r3, r4
 80023e0:	4290      	cmp	r0, r2
 80023e2:	d302      	bcc.n	80023ea <__aeabi_ddiv+0x30a>
 80023e4:	d116      	bne.n	8002414 <__aeabi_ddiv+0x334>
 80023e6:	42a5      	cmp	r5, r4
 80023e8:	d214      	bcs.n	8002414 <__aeabi_ddiv+0x334>
 80023ea:	465b      	mov	r3, fp
 80023ec:	9f00      	ldr	r7, [sp, #0]
 80023ee:	3b01      	subs	r3, #1
 80023f0:	444d      	add	r5, r9
 80023f2:	9305      	str	r3, [sp, #20]
 80023f4:	454d      	cmp	r5, r9
 80023f6:	419b      	sbcs	r3, r3
 80023f8:	46bc      	mov	ip, r7
 80023fa:	425b      	negs	r3, r3
 80023fc:	4463      	add	r3, ip
 80023fe:	18c0      	adds	r0, r0, r3
 8002400:	4287      	cmp	r7, r0
 8002402:	d300      	bcc.n	8002406 <__aeabi_ddiv+0x326>
 8002404:	e102      	b.n	800260c <__aeabi_ddiv+0x52c>
 8002406:	4282      	cmp	r2, r0
 8002408:	d900      	bls.n	800240c <__aeabi_ddiv+0x32c>
 800240a:	e129      	b.n	8002660 <__aeabi_ddiv+0x580>
 800240c:	d100      	bne.n	8002410 <__aeabi_ddiv+0x330>
 800240e:	e124      	b.n	800265a <__aeabi_ddiv+0x57a>
 8002410:	9b05      	ldr	r3, [sp, #20]
 8002412:	469b      	mov	fp, r3
 8002414:	1b2c      	subs	r4, r5, r4
 8002416:	42a5      	cmp	r5, r4
 8002418:	41ad      	sbcs	r5, r5
 800241a:	9b00      	ldr	r3, [sp, #0]
 800241c:	1a80      	subs	r0, r0, r2
 800241e:	426d      	negs	r5, r5
 8002420:	1b40      	subs	r0, r0, r5
 8002422:	4283      	cmp	r3, r0
 8002424:	d100      	bne.n	8002428 <__aeabi_ddiv+0x348>
 8002426:	e10f      	b.n	8002648 <__aeabi_ddiv+0x568>
 8002428:	9902      	ldr	r1, [sp, #8]
 800242a:	f7fd ff41 	bl	80002b0 <__aeabi_uidivmod>
 800242e:	9a03      	ldr	r2, [sp, #12]
 8002430:	040b      	lsls	r3, r1, #16
 8002432:	4342      	muls	r2, r0
 8002434:	0c21      	lsrs	r1, r4, #16
 8002436:	0005      	movs	r5, r0
 8002438:	4319      	orrs	r1, r3
 800243a:	428a      	cmp	r2, r1
 800243c:	d900      	bls.n	8002440 <__aeabi_ddiv+0x360>
 800243e:	e0cb      	b.n	80025d8 <__aeabi_ddiv+0x4f8>
 8002440:	1a88      	subs	r0, r1, r2
 8002442:	9902      	ldr	r1, [sp, #8]
 8002444:	f7fd ff34 	bl	80002b0 <__aeabi_uidivmod>
 8002448:	9a03      	ldr	r2, [sp, #12]
 800244a:	0424      	lsls	r4, r4, #16
 800244c:	4342      	muls	r2, r0
 800244e:	0409      	lsls	r1, r1, #16
 8002450:	0c24      	lsrs	r4, r4, #16
 8002452:	0003      	movs	r3, r0
 8002454:	430c      	orrs	r4, r1
 8002456:	42a2      	cmp	r2, r4
 8002458:	d900      	bls.n	800245c <__aeabi_ddiv+0x37c>
 800245a:	e0ca      	b.n	80025f2 <__aeabi_ddiv+0x512>
 800245c:	4641      	mov	r1, r8
 800245e:	1aa4      	subs	r4, r4, r2
 8002460:	042a      	lsls	r2, r5, #16
 8002462:	431a      	orrs	r2, r3
 8002464:	9f04      	ldr	r7, [sp, #16]
 8002466:	0413      	lsls	r3, r2, #16
 8002468:	0c1b      	lsrs	r3, r3, #16
 800246a:	4359      	muls	r1, r3
 800246c:	4640      	mov	r0, r8
 800246e:	437b      	muls	r3, r7
 8002470:	469c      	mov	ip, r3
 8002472:	0c15      	lsrs	r5, r2, #16
 8002474:	4368      	muls	r0, r5
 8002476:	0c0b      	lsrs	r3, r1, #16
 8002478:	4484      	add	ip, r0
 800247a:	4463      	add	r3, ip
 800247c:	437d      	muls	r5, r7
 800247e:	4298      	cmp	r0, r3
 8002480:	d903      	bls.n	800248a <__aeabi_ddiv+0x3aa>
 8002482:	2080      	movs	r0, #128	@ 0x80
 8002484:	0240      	lsls	r0, r0, #9
 8002486:	4684      	mov	ip, r0
 8002488:	4465      	add	r5, ip
 800248a:	0c18      	lsrs	r0, r3, #16
 800248c:	0409      	lsls	r1, r1, #16
 800248e:	041b      	lsls	r3, r3, #16
 8002490:	0c09      	lsrs	r1, r1, #16
 8002492:	1940      	adds	r0, r0, r5
 8002494:	185b      	adds	r3, r3, r1
 8002496:	4284      	cmp	r4, r0
 8002498:	d327      	bcc.n	80024ea <__aeabi_ddiv+0x40a>
 800249a:	d023      	beq.n	80024e4 <__aeabi_ddiv+0x404>
 800249c:	2301      	movs	r3, #1
 800249e:	0035      	movs	r5, r6
 80024a0:	431a      	orrs	r2, r3
 80024a2:	4b94      	ldr	r3, [pc, #592]	@ (80026f4 <__aeabi_ddiv+0x614>)
 80024a4:	4453      	add	r3, sl
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	dd60      	ble.n	800256c <__aeabi_ddiv+0x48c>
 80024aa:	0751      	lsls	r1, r2, #29
 80024ac:	d000      	beq.n	80024b0 <__aeabi_ddiv+0x3d0>
 80024ae:	e086      	b.n	80025be <__aeabi_ddiv+0x4de>
 80024b0:	002e      	movs	r6, r5
 80024b2:	08d1      	lsrs	r1, r2, #3
 80024b4:	465a      	mov	r2, fp
 80024b6:	01d2      	lsls	r2, r2, #7
 80024b8:	d506      	bpl.n	80024c8 <__aeabi_ddiv+0x3e8>
 80024ba:	465a      	mov	r2, fp
 80024bc:	4b8e      	ldr	r3, [pc, #568]	@ (80026f8 <__aeabi_ddiv+0x618>)
 80024be:	401a      	ands	r2, r3
 80024c0:	2380      	movs	r3, #128	@ 0x80
 80024c2:	4693      	mov	fp, r2
 80024c4:	00db      	lsls	r3, r3, #3
 80024c6:	4453      	add	r3, sl
 80024c8:	4a8c      	ldr	r2, [pc, #560]	@ (80026fc <__aeabi_ddiv+0x61c>)
 80024ca:	4293      	cmp	r3, r2
 80024cc:	dd00      	ble.n	80024d0 <__aeabi_ddiv+0x3f0>
 80024ce:	e680      	b.n	80021d2 <__aeabi_ddiv+0xf2>
 80024d0:	465a      	mov	r2, fp
 80024d2:	0752      	lsls	r2, r2, #29
 80024d4:	430a      	orrs	r2, r1
 80024d6:	4690      	mov	r8, r2
 80024d8:	465a      	mov	r2, fp
 80024da:	055b      	lsls	r3, r3, #21
 80024dc:	0254      	lsls	r4, r2, #9
 80024de:	0b24      	lsrs	r4, r4, #12
 80024e0:	0d5b      	lsrs	r3, r3, #21
 80024e2:	e669      	b.n	80021b8 <__aeabi_ddiv+0xd8>
 80024e4:	0035      	movs	r5, r6
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d0db      	beq.n	80024a2 <__aeabi_ddiv+0x3c2>
 80024ea:	9d00      	ldr	r5, [sp, #0]
 80024ec:	1e51      	subs	r1, r2, #1
 80024ee:	46ac      	mov	ip, r5
 80024f0:	4464      	add	r4, ip
 80024f2:	42ac      	cmp	r4, r5
 80024f4:	d200      	bcs.n	80024f8 <__aeabi_ddiv+0x418>
 80024f6:	e09e      	b.n	8002636 <__aeabi_ddiv+0x556>
 80024f8:	4284      	cmp	r4, r0
 80024fa:	d200      	bcs.n	80024fe <__aeabi_ddiv+0x41e>
 80024fc:	e0e1      	b.n	80026c2 <__aeabi_ddiv+0x5e2>
 80024fe:	d100      	bne.n	8002502 <__aeabi_ddiv+0x422>
 8002500:	e0ee      	b.n	80026e0 <__aeabi_ddiv+0x600>
 8002502:	000a      	movs	r2, r1
 8002504:	e7ca      	b.n	800249c <__aeabi_ddiv+0x3bc>
 8002506:	4542      	cmp	r2, r8
 8002508:	d900      	bls.n	800250c <__aeabi_ddiv+0x42c>
 800250a:	e708      	b.n	800231e <__aeabi_ddiv+0x23e>
 800250c:	464b      	mov	r3, r9
 800250e:	07dc      	lsls	r4, r3, #31
 8002510:	0858      	lsrs	r0, r3, #1
 8002512:	4643      	mov	r3, r8
 8002514:	085b      	lsrs	r3, r3, #1
 8002516:	431c      	orrs	r4, r3
 8002518:	4643      	mov	r3, r8
 800251a:	07dd      	lsls	r5, r3, #31
 800251c:	e706      	b.n	800232c <__aeabi_ddiv+0x24c>
 800251e:	f001 fa83 	bl	8003a28 <__clzsi2>
 8002522:	2315      	movs	r3, #21
 8002524:	469c      	mov	ip, r3
 8002526:	4484      	add	ip, r0
 8002528:	0002      	movs	r2, r0
 800252a:	4663      	mov	r3, ip
 800252c:	3220      	adds	r2, #32
 800252e:	2b1c      	cmp	r3, #28
 8002530:	dc00      	bgt.n	8002534 <__aeabi_ddiv+0x454>
 8002532:	e692      	b.n	800225a <__aeabi_ddiv+0x17a>
 8002534:	0023      	movs	r3, r4
 8002536:	3808      	subs	r0, #8
 8002538:	4083      	lsls	r3, r0
 800253a:	4699      	mov	r9, r3
 800253c:	2300      	movs	r3, #0
 800253e:	4698      	mov	r8, r3
 8002540:	e69a      	b.n	8002278 <__aeabi_ddiv+0x198>
 8002542:	f001 fa71 	bl	8003a28 <__clzsi2>
 8002546:	0002      	movs	r2, r0
 8002548:	0003      	movs	r3, r0
 800254a:	3215      	adds	r2, #21
 800254c:	3320      	adds	r3, #32
 800254e:	2a1c      	cmp	r2, #28
 8002550:	dc00      	bgt.n	8002554 <__aeabi_ddiv+0x474>
 8002552:	e65f      	b.n	8002214 <__aeabi_ddiv+0x134>
 8002554:	9900      	ldr	r1, [sp, #0]
 8002556:	3808      	subs	r0, #8
 8002558:	4081      	lsls	r1, r0
 800255a:	2200      	movs	r2, #0
 800255c:	468b      	mov	fp, r1
 800255e:	e666      	b.n	800222e <__aeabi_ddiv+0x14e>
 8002560:	2200      	movs	r2, #0
 8002562:	002e      	movs	r6, r5
 8002564:	2400      	movs	r4, #0
 8002566:	4690      	mov	r8, r2
 8002568:	4b65      	ldr	r3, [pc, #404]	@ (8002700 <__aeabi_ddiv+0x620>)
 800256a:	e625      	b.n	80021b8 <__aeabi_ddiv+0xd8>
 800256c:	002e      	movs	r6, r5
 800256e:	2101      	movs	r1, #1
 8002570:	1ac9      	subs	r1, r1, r3
 8002572:	2938      	cmp	r1, #56	@ 0x38
 8002574:	dd00      	ble.n	8002578 <__aeabi_ddiv+0x498>
 8002576:	e61b      	b.n	80021b0 <__aeabi_ddiv+0xd0>
 8002578:	291f      	cmp	r1, #31
 800257a:	dc7e      	bgt.n	800267a <__aeabi_ddiv+0x59a>
 800257c:	4861      	ldr	r0, [pc, #388]	@ (8002704 <__aeabi_ddiv+0x624>)
 800257e:	0014      	movs	r4, r2
 8002580:	4450      	add	r0, sl
 8002582:	465b      	mov	r3, fp
 8002584:	4082      	lsls	r2, r0
 8002586:	4083      	lsls	r3, r0
 8002588:	40cc      	lsrs	r4, r1
 800258a:	1e50      	subs	r0, r2, #1
 800258c:	4182      	sbcs	r2, r0
 800258e:	4323      	orrs	r3, r4
 8002590:	431a      	orrs	r2, r3
 8002592:	465b      	mov	r3, fp
 8002594:	40cb      	lsrs	r3, r1
 8002596:	0751      	lsls	r1, r2, #29
 8002598:	d009      	beq.n	80025ae <__aeabi_ddiv+0x4ce>
 800259a:	210f      	movs	r1, #15
 800259c:	4011      	ands	r1, r2
 800259e:	2904      	cmp	r1, #4
 80025a0:	d005      	beq.n	80025ae <__aeabi_ddiv+0x4ce>
 80025a2:	1d11      	adds	r1, r2, #4
 80025a4:	4291      	cmp	r1, r2
 80025a6:	4192      	sbcs	r2, r2
 80025a8:	4252      	negs	r2, r2
 80025aa:	189b      	adds	r3, r3, r2
 80025ac:	000a      	movs	r2, r1
 80025ae:	0219      	lsls	r1, r3, #8
 80025b0:	d400      	bmi.n	80025b4 <__aeabi_ddiv+0x4d4>
 80025b2:	e09b      	b.n	80026ec <__aeabi_ddiv+0x60c>
 80025b4:	2200      	movs	r2, #0
 80025b6:	2301      	movs	r3, #1
 80025b8:	2400      	movs	r4, #0
 80025ba:	4690      	mov	r8, r2
 80025bc:	e5fc      	b.n	80021b8 <__aeabi_ddiv+0xd8>
 80025be:	210f      	movs	r1, #15
 80025c0:	4011      	ands	r1, r2
 80025c2:	2904      	cmp	r1, #4
 80025c4:	d100      	bne.n	80025c8 <__aeabi_ddiv+0x4e8>
 80025c6:	e773      	b.n	80024b0 <__aeabi_ddiv+0x3d0>
 80025c8:	1d11      	adds	r1, r2, #4
 80025ca:	4291      	cmp	r1, r2
 80025cc:	4192      	sbcs	r2, r2
 80025ce:	4252      	negs	r2, r2
 80025d0:	002e      	movs	r6, r5
 80025d2:	08c9      	lsrs	r1, r1, #3
 80025d4:	4493      	add	fp, r2
 80025d6:	e76d      	b.n	80024b4 <__aeabi_ddiv+0x3d4>
 80025d8:	9b00      	ldr	r3, [sp, #0]
 80025da:	3d01      	subs	r5, #1
 80025dc:	469c      	mov	ip, r3
 80025de:	4461      	add	r1, ip
 80025e0:	428b      	cmp	r3, r1
 80025e2:	d900      	bls.n	80025e6 <__aeabi_ddiv+0x506>
 80025e4:	e72c      	b.n	8002440 <__aeabi_ddiv+0x360>
 80025e6:	428a      	cmp	r2, r1
 80025e8:	d800      	bhi.n	80025ec <__aeabi_ddiv+0x50c>
 80025ea:	e729      	b.n	8002440 <__aeabi_ddiv+0x360>
 80025ec:	1e85      	subs	r5, r0, #2
 80025ee:	4461      	add	r1, ip
 80025f0:	e726      	b.n	8002440 <__aeabi_ddiv+0x360>
 80025f2:	9900      	ldr	r1, [sp, #0]
 80025f4:	3b01      	subs	r3, #1
 80025f6:	468c      	mov	ip, r1
 80025f8:	4464      	add	r4, ip
 80025fa:	42a1      	cmp	r1, r4
 80025fc:	d900      	bls.n	8002600 <__aeabi_ddiv+0x520>
 80025fe:	e72d      	b.n	800245c <__aeabi_ddiv+0x37c>
 8002600:	42a2      	cmp	r2, r4
 8002602:	d800      	bhi.n	8002606 <__aeabi_ddiv+0x526>
 8002604:	e72a      	b.n	800245c <__aeabi_ddiv+0x37c>
 8002606:	1e83      	subs	r3, r0, #2
 8002608:	4464      	add	r4, ip
 800260a:	e727      	b.n	800245c <__aeabi_ddiv+0x37c>
 800260c:	4287      	cmp	r7, r0
 800260e:	d000      	beq.n	8002612 <__aeabi_ddiv+0x532>
 8002610:	e6fe      	b.n	8002410 <__aeabi_ddiv+0x330>
 8002612:	45a9      	cmp	r9, r5
 8002614:	d900      	bls.n	8002618 <__aeabi_ddiv+0x538>
 8002616:	e6fb      	b.n	8002410 <__aeabi_ddiv+0x330>
 8002618:	e6f5      	b.n	8002406 <__aeabi_ddiv+0x326>
 800261a:	42a2      	cmp	r2, r4
 800261c:	d800      	bhi.n	8002620 <__aeabi_ddiv+0x540>
 800261e:	e6b9      	b.n	8002394 <__aeabi_ddiv+0x2b4>
 8002620:	1e83      	subs	r3, r0, #2
 8002622:	4464      	add	r4, ip
 8002624:	e6b6      	b.n	8002394 <__aeabi_ddiv+0x2b4>
 8002626:	428a      	cmp	r2, r1
 8002628:	d800      	bhi.n	800262c <__aeabi_ddiv+0x54c>
 800262a:	e69f      	b.n	800236c <__aeabi_ddiv+0x28c>
 800262c:	46bc      	mov	ip, r7
 800262e:	1e83      	subs	r3, r0, #2
 8002630:	4698      	mov	r8, r3
 8002632:	4461      	add	r1, ip
 8002634:	e69a      	b.n	800236c <__aeabi_ddiv+0x28c>
 8002636:	000a      	movs	r2, r1
 8002638:	4284      	cmp	r4, r0
 800263a:	d000      	beq.n	800263e <__aeabi_ddiv+0x55e>
 800263c:	e72e      	b.n	800249c <__aeabi_ddiv+0x3bc>
 800263e:	454b      	cmp	r3, r9
 8002640:	d000      	beq.n	8002644 <__aeabi_ddiv+0x564>
 8002642:	e72b      	b.n	800249c <__aeabi_ddiv+0x3bc>
 8002644:	0035      	movs	r5, r6
 8002646:	e72c      	b.n	80024a2 <__aeabi_ddiv+0x3c2>
 8002648:	4b2a      	ldr	r3, [pc, #168]	@ (80026f4 <__aeabi_ddiv+0x614>)
 800264a:	4a2f      	ldr	r2, [pc, #188]	@ (8002708 <__aeabi_ddiv+0x628>)
 800264c:	4453      	add	r3, sl
 800264e:	4592      	cmp	sl, r2
 8002650:	db43      	blt.n	80026da <__aeabi_ddiv+0x5fa>
 8002652:	2201      	movs	r2, #1
 8002654:	2100      	movs	r1, #0
 8002656:	4493      	add	fp, r2
 8002658:	e72c      	b.n	80024b4 <__aeabi_ddiv+0x3d4>
 800265a:	42ac      	cmp	r4, r5
 800265c:	d800      	bhi.n	8002660 <__aeabi_ddiv+0x580>
 800265e:	e6d7      	b.n	8002410 <__aeabi_ddiv+0x330>
 8002660:	2302      	movs	r3, #2
 8002662:	425b      	negs	r3, r3
 8002664:	469c      	mov	ip, r3
 8002666:	9900      	ldr	r1, [sp, #0]
 8002668:	444d      	add	r5, r9
 800266a:	454d      	cmp	r5, r9
 800266c:	419b      	sbcs	r3, r3
 800266e:	44e3      	add	fp, ip
 8002670:	468c      	mov	ip, r1
 8002672:	425b      	negs	r3, r3
 8002674:	4463      	add	r3, ip
 8002676:	18c0      	adds	r0, r0, r3
 8002678:	e6cc      	b.n	8002414 <__aeabi_ddiv+0x334>
 800267a:	201f      	movs	r0, #31
 800267c:	4240      	negs	r0, r0
 800267e:	1ac3      	subs	r3, r0, r3
 8002680:	4658      	mov	r0, fp
 8002682:	40d8      	lsrs	r0, r3
 8002684:	2920      	cmp	r1, #32
 8002686:	d004      	beq.n	8002692 <__aeabi_ddiv+0x5b2>
 8002688:	4659      	mov	r1, fp
 800268a:	4b20      	ldr	r3, [pc, #128]	@ (800270c <__aeabi_ddiv+0x62c>)
 800268c:	4453      	add	r3, sl
 800268e:	4099      	lsls	r1, r3
 8002690:	430a      	orrs	r2, r1
 8002692:	1e53      	subs	r3, r2, #1
 8002694:	419a      	sbcs	r2, r3
 8002696:	2307      	movs	r3, #7
 8002698:	0019      	movs	r1, r3
 800269a:	4302      	orrs	r2, r0
 800269c:	2400      	movs	r4, #0
 800269e:	4011      	ands	r1, r2
 80026a0:	4213      	tst	r3, r2
 80026a2:	d009      	beq.n	80026b8 <__aeabi_ddiv+0x5d8>
 80026a4:	3308      	adds	r3, #8
 80026a6:	4013      	ands	r3, r2
 80026a8:	2b04      	cmp	r3, #4
 80026aa:	d01d      	beq.n	80026e8 <__aeabi_ddiv+0x608>
 80026ac:	1d13      	adds	r3, r2, #4
 80026ae:	4293      	cmp	r3, r2
 80026b0:	4189      	sbcs	r1, r1
 80026b2:	001a      	movs	r2, r3
 80026b4:	4249      	negs	r1, r1
 80026b6:	0749      	lsls	r1, r1, #29
 80026b8:	08d2      	lsrs	r2, r2, #3
 80026ba:	430a      	orrs	r2, r1
 80026bc:	4690      	mov	r8, r2
 80026be:	2300      	movs	r3, #0
 80026c0:	e57a      	b.n	80021b8 <__aeabi_ddiv+0xd8>
 80026c2:	4649      	mov	r1, r9
 80026c4:	9f00      	ldr	r7, [sp, #0]
 80026c6:	004d      	lsls	r5, r1, #1
 80026c8:	454d      	cmp	r5, r9
 80026ca:	4189      	sbcs	r1, r1
 80026cc:	46bc      	mov	ip, r7
 80026ce:	4249      	negs	r1, r1
 80026d0:	4461      	add	r1, ip
 80026d2:	46a9      	mov	r9, r5
 80026d4:	3a02      	subs	r2, #2
 80026d6:	1864      	adds	r4, r4, r1
 80026d8:	e7ae      	b.n	8002638 <__aeabi_ddiv+0x558>
 80026da:	2201      	movs	r2, #1
 80026dc:	4252      	negs	r2, r2
 80026de:	e746      	b.n	800256e <__aeabi_ddiv+0x48e>
 80026e0:	4599      	cmp	r9, r3
 80026e2:	d3ee      	bcc.n	80026c2 <__aeabi_ddiv+0x5e2>
 80026e4:	000a      	movs	r2, r1
 80026e6:	e7aa      	b.n	800263e <__aeabi_ddiv+0x55e>
 80026e8:	2100      	movs	r1, #0
 80026ea:	e7e5      	b.n	80026b8 <__aeabi_ddiv+0x5d8>
 80026ec:	0759      	lsls	r1, r3, #29
 80026ee:	025b      	lsls	r3, r3, #9
 80026f0:	0b1c      	lsrs	r4, r3, #12
 80026f2:	e7e1      	b.n	80026b8 <__aeabi_ddiv+0x5d8>
 80026f4:	000003ff 	.word	0x000003ff
 80026f8:	feffffff 	.word	0xfeffffff
 80026fc:	000007fe 	.word	0x000007fe
 8002700:	000007ff 	.word	0x000007ff
 8002704:	0000041e 	.word	0x0000041e
 8002708:	fffffc02 	.word	0xfffffc02
 800270c:	0000043e 	.word	0x0000043e

08002710 <__eqdf2>:
 8002710:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002712:	4657      	mov	r7, sl
 8002714:	46de      	mov	lr, fp
 8002716:	464e      	mov	r6, r9
 8002718:	4645      	mov	r5, r8
 800271a:	b5e0      	push	{r5, r6, r7, lr}
 800271c:	000d      	movs	r5, r1
 800271e:	0004      	movs	r4, r0
 8002720:	0fe8      	lsrs	r0, r5, #31
 8002722:	4683      	mov	fp, r0
 8002724:	0309      	lsls	r1, r1, #12
 8002726:	0fd8      	lsrs	r0, r3, #31
 8002728:	0b09      	lsrs	r1, r1, #12
 800272a:	4682      	mov	sl, r0
 800272c:	4819      	ldr	r0, [pc, #100]	@ (8002794 <__eqdf2+0x84>)
 800272e:	468c      	mov	ip, r1
 8002730:	031f      	lsls	r7, r3, #12
 8002732:	0069      	lsls	r1, r5, #1
 8002734:	005e      	lsls	r6, r3, #1
 8002736:	0d49      	lsrs	r1, r1, #21
 8002738:	0b3f      	lsrs	r7, r7, #12
 800273a:	0d76      	lsrs	r6, r6, #21
 800273c:	4281      	cmp	r1, r0
 800273e:	d018      	beq.n	8002772 <__eqdf2+0x62>
 8002740:	4286      	cmp	r6, r0
 8002742:	d00f      	beq.n	8002764 <__eqdf2+0x54>
 8002744:	2001      	movs	r0, #1
 8002746:	42b1      	cmp	r1, r6
 8002748:	d10d      	bne.n	8002766 <__eqdf2+0x56>
 800274a:	45bc      	cmp	ip, r7
 800274c:	d10b      	bne.n	8002766 <__eqdf2+0x56>
 800274e:	4294      	cmp	r4, r2
 8002750:	d109      	bne.n	8002766 <__eqdf2+0x56>
 8002752:	45d3      	cmp	fp, sl
 8002754:	d01c      	beq.n	8002790 <__eqdf2+0x80>
 8002756:	2900      	cmp	r1, #0
 8002758:	d105      	bne.n	8002766 <__eqdf2+0x56>
 800275a:	4660      	mov	r0, ip
 800275c:	4320      	orrs	r0, r4
 800275e:	1e43      	subs	r3, r0, #1
 8002760:	4198      	sbcs	r0, r3
 8002762:	e000      	b.n	8002766 <__eqdf2+0x56>
 8002764:	2001      	movs	r0, #1
 8002766:	bcf0      	pop	{r4, r5, r6, r7}
 8002768:	46bb      	mov	fp, r7
 800276a:	46b2      	mov	sl, r6
 800276c:	46a9      	mov	r9, r5
 800276e:	46a0      	mov	r8, r4
 8002770:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002772:	2001      	movs	r0, #1
 8002774:	428e      	cmp	r6, r1
 8002776:	d1f6      	bne.n	8002766 <__eqdf2+0x56>
 8002778:	4661      	mov	r1, ip
 800277a:	4339      	orrs	r1, r7
 800277c:	000f      	movs	r7, r1
 800277e:	4317      	orrs	r7, r2
 8002780:	4327      	orrs	r7, r4
 8002782:	d1f0      	bne.n	8002766 <__eqdf2+0x56>
 8002784:	465b      	mov	r3, fp
 8002786:	4652      	mov	r2, sl
 8002788:	1a98      	subs	r0, r3, r2
 800278a:	1e43      	subs	r3, r0, #1
 800278c:	4198      	sbcs	r0, r3
 800278e:	e7ea      	b.n	8002766 <__eqdf2+0x56>
 8002790:	2000      	movs	r0, #0
 8002792:	e7e8      	b.n	8002766 <__eqdf2+0x56>
 8002794:	000007ff 	.word	0x000007ff

08002798 <__gedf2>:
 8002798:	b5f0      	push	{r4, r5, r6, r7, lr}
 800279a:	4657      	mov	r7, sl
 800279c:	464e      	mov	r6, r9
 800279e:	4645      	mov	r5, r8
 80027a0:	46de      	mov	lr, fp
 80027a2:	b5e0      	push	{r5, r6, r7, lr}
 80027a4:	000d      	movs	r5, r1
 80027a6:	030e      	lsls	r6, r1, #12
 80027a8:	0049      	lsls	r1, r1, #1
 80027aa:	0d49      	lsrs	r1, r1, #21
 80027ac:	468a      	mov	sl, r1
 80027ae:	0fdf      	lsrs	r7, r3, #31
 80027b0:	0fe9      	lsrs	r1, r5, #31
 80027b2:	46bc      	mov	ip, r7
 80027b4:	b083      	sub	sp, #12
 80027b6:	4f2f      	ldr	r7, [pc, #188]	@ (8002874 <__gedf2+0xdc>)
 80027b8:	0004      	movs	r4, r0
 80027ba:	4680      	mov	r8, r0
 80027bc:	9101      	str	r1, [sp, #4]
 80027be:	0058      	lsls	r0, r3, #1
 80027c0:	0319      	lsls	r1, r3, #12
 80027c2:	4691      	mov	r9, r2
 80027c4:	0b36      	lsrs	r6, r6, #12
 80027c6:	0b09      	lsrs	r1, r1, #12
 80027c8:	0d40      	lsrs	r0, r0, #21
 80027ca:	45ba      	cmp	sl, r7
 80027cc:	d01d      	beq.n	800280a <__gedf2+0x72>
 80027ce:	42b8      	cmp	r0, r7
 80027d0:	d00d      	beq.n	80027ee <__gedf2+0x56>
 80027d2:	4657      	mov	r7, sl
 80027d4:	2f00      	cmp	r7, #0
 80027d6:	d12a      	bne.n	800282e <__gedf2+0x96>
 80027d8:	4334      	orrs	r4, r6
 80027da:	2800      	cmp	r0, #0
 80027dc:	d124      	bne.n	8002828 <__gedf2+0x90>
 80027de:	430a      	orrs	r2, r1
 80027e0:	d036      	beq.n	8002850 <__gedf2+0xb8>
 80027e2:	2c00      	cmp	r4, #0
 80027e4:	d141      	bne.n	800286a <__gedf2+0xd2>
 80027e6:	4663      	mov	r3, ip
 80027e8:	0058      	lsls	r0, r3, #1
 80027ea:	3801      	subs	r0, #1
 80027ec:	e015      	b.n	800281a <__gedf2+0x82>
 80027ee:	4311      	orrs	r1, r2
 80027f0:	d138      	bne.n	8002864 <__gedf2+0xcc>
 80027f2:	4653      	mov	r3, sl
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d101      	bne.n	80027fc <__gedf2+0x64>
 80027f8:	4326      	orrs	r6, r4
 80027fa:	d0f4      	beq.n	80027e6 <__gedf2+0x4e>
 80027fc:	9b01      	ldr	r3, [sp, #4]
 80027fe:	4563      	cmp	r3, ip
 8002800:	d107      	bne.n	8002812 <__gedf2+0x7a>
 8002802:	9b01      	ldr	r3, [sp, #4]
 8002804:	0058      	lsls	r0, r3, #1
 8002806:	3801      	subs	r0, #1
 8002808:	e007      	b.n	800281a <__gedf2+0x82>
 800280a:	4326      	orrs	r6, r4
 800280c:	d12a      	bne.n	8002864 <__gedf2+0xcc>
 800280e:	4550      	cmp	r0, sl
 8002810:	d021      	beq.n	8002856 <__gedf2+0xbe>
 8002812:	2001      	movs	r0, #1
 8002814:	9b01      	ldr	r3, [sp, #4]
 8002816:	425f      	negs	r7, r3
 8002818:	4338      	orrs	r0, r7
 800281a:	b003      	add	sp, #12
 800281c:	bcf0      	pop	{r4, r5, r6, r7}
 800281e:	46bb      	mov	fp, r7
 8002820:	46b2      	mov	sl, r6
 8002822:	46a9      	mov	r9, r5
 8002824:	46a0      	mov	r8, r4
 8002826:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002828:	2c00      	cmp	r4, #0
 800282a:	d0dc      	beq.n	80027e6 <__gedf2+0x4e>
 800282c:	e7e6      	b.n	80027fc <__gedf2+0x64>
 800282e:	2800      	cmp	r0, #0
 8002830:	d0ef      	beq.n	8002812 <__gedf2+0x7a>
 8002832:	9b01      	ldr	r3, [sp, #4]
 8002834:	4563      	cmp	r3, ip
 8002836:	d1ec      	bne.n	8002812 <__gedf2+0x7a>
 8002838:	4582      	cmp	sl, r0
 800283a:	dcea      	bgt.n	8002812 <__gedf2+0x7a>
 800283c:	dbe1      	blt.n	8002802 <__gedf2+0x6a>
 800283e:	428e      	cmp	r6, r1
 8002840:	d8e7      	bhi.n	8002812 <__gedf2+0x7a>
 8002842:	d1de      	bne.n	8002802 <__gedf2+0x6a>
 8002844:	45c8      	cmp	r8, r9
 8002846:	d8e4      	bhi.n	8002812 <__gedf2+0x7a>
 8002848:	2000      	movs	r0, #0
 800284a:	45c8      	cmp	r8, r9
 800284c:	d2e5      	bcs.n	800281a <__gedf2+0x82>
 800284e:	e7d8      	b.n	8002802 <__gedf2+0x6a>
 8002850:	2c00      	cmp	r4, #0
 8002852:	d0e2      	beq.n	800281a <__gedf2+0x82>
 8002854:	e7dd      	b.n	8002812 <__gedf2+0x7a>
 8002856:	4311      	orrs	r1, r2
 8002858:	d104      	bne.n	8002864 <__gedf2+0xcc>
 800285a:	9b01      	ldr	r3, [sp, #4]
 800285c:	4563      	cmp	r3, ip
 800285e:	d1d8      	bne.n	8002812 <__gedf2+0x7a>
 8002860:	2000      	movs	r0, #0
 8002862:	e7da      	b.n	800281a <__gedf2+0x82>
 8002864:	2002      	movs	r0, #2
 8002866:	4240      	negs	r0, r0
 8002868:	e7d7      	b.n	800281a <__gedf2+0x82>
 800286a:	9b01      	ldr	r3, [sp, #4]
 800286c:	4563      	cmp	r3, ip
 800286e:	d0e6      	beq.n	800283e <__gedf2+0xa6>
 8002870:	e7cf      	b.n	8002812 <__gedf2+0x7a>
 8002872:	46c0      	nop			@ (mov r8, r8)
 8002874:	000007ff 	.word	0x000007ff

08002878 <__ledf2>:
 8002878:	b5f0      	push	{r4, r5, r6, r7, lr}
 800287a:	4657      	mov	r7, sl
 800287c:	464e      	mov	r6, r9
 800287e:	4645      	mov	r5, r8
 8002880:	46de      	mov	lr, fp
 8002882:	b5e0      	push	{r5, r6, r7, lr}
 8002884:	000d      	movs	r5, r1
 8002886:	030e      	lsls	r6, r1, #12
 8002888:	0049      	lsls	r1, r1, #1
 800288a:	0d49      	lsrs	r1, r1, #21
 800288c:	468a      	mov	sl, r1
 800288e:	0fdf      	lsrs	r7, r3, #31
 8002890:	0fe9      	lsrs	r1, r5, #31
 8002892:	46bc      	mov	ip, r7
 8002894:	b083      	sub	sp, #12
 8002896:	4f2e      	ldr	r7, [pc, #184]	@ (8002950 <__ledf2+0xd8>)
 8002898:	0004      	movs	r4, r0
 800289a:	4680      	mov	r8, r0
 800289c:	9101      	str	r1, [sp, #4]
 800289e:	0058      	lsls	r0, r3, #1
 80028a0:	0319      	lsls	r1, r3, #12
 80028a2:	4691      	mov	r9, r2
 80028a4:	0b36      	lsrs	r6, r6, #12
 80028a6:	0b09      	lsrs	r1, r1, #12
 80028a8:	0d40      	lsrs	r0, r0, #21
 80028aa:	45ba      	cmp	sl, r7
 80028ac:	d01e      	beq.n	80028ec <__ledf2+0x74>
 80028ae:	42b8      	cmp	r0, r7
 80028b0:	d00d      	beq.n	80028ce <__ledf2+0x56>
 80028b2:	4657      	mov	r7, sl
 80028b4:	2f00      	cmp	r7, #0
 80028b6:	d127      	bne.n	8002908 <__ledf2+0x90>
 80028b8:	4334      	orrs	r4, r6
 80028ba:	2800      	cmp	r0, #0
 80028bc:	d133      	bne.n	8002926 <__ledf2+0xae>
 80028be:	430a      	orrs	r2, r1
 80028c0:	d034      	beq.n	800292c <__ledf2+0xb4>
 80028c2:	2c00      	cmp	r4, #0
 80028c4:	d140      	bne.n	8002948 <__ledf2+0xd0>
 80028c6:	4663      	mov	r3, ip
 80028c8:	0058      	lsls	r0, r3, #1
 80028ca:	3801      	subs	r0, #1
 80028cc:	e015      	b.n	80028fa <__ledf2+0x82>
 80028ce:	4311      	orrs	r1, r2
 80028d0:	d112      	bne.n	80028f8 <__ledf2+0x80>
 80028d2:	4653      	mov	r3, sl
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d101      	bne.n	80028dc <__ledf2+0x64>
 80028d8:	4326      	orrs	r6, r4
 80028da:	d0f4      	beq.n	80028c6 <__ledf2+0x4e>
 80028dc:	9b01      	ldr	r3, [sp, #4]
 80028de:	4563      	cmp	r3, ip
 80028e0:	d01d      	beq.n	800291e <__ledf2+0xa6>
 80028e2:	2001      	movs	r0, #1
 80028e4:	9b01      	ldr	r3, [sp, #4]
 80028e6:	425f      	negs	r7, r3
 80028e8:	4338      	orrs	r0, r7
 80028ea:	e006      	b.n	80028fa <__ledf2+0x82>
 80028ec:	4326      	orrs	r6, r4
 80028ee:	d103      	bne.n	80028f8 <__ledf2+0x80>
 80028f0:	4550      	cmp	r0, sl
 80028f2:	d1f6      	bne.n	80028e2 <__ledf2+0x6a>
 80028f4:	4311      	orrs	r1, r2
 80028f6:	d01c      	beq.n	8002932 <__ledf2+0xba>
 80028f8:	2002      	movs	r0, #2
 80028fa:	b003      	add	sp, #12
 80028fc:	bcf0      	pop	{r4, r5, r6, r7}
 80028fe:	46bb      	mov	fp, r7
 8002900:	46b2      	mov	sl, r6
 8002902:	46a9      	mov	r9, r5
 8002904:	46a0      	mov	r8, r4
 8002906:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002908:	2800      	cmp	r0, #0
 800290a:	d0ea      	beq.n	80028e2 <__ledf2+0x6a>
 800290c:	9b01      	ldr	r3, [sp, #4]
 800290e:	4563      	cmp	r3, ip
 8002910:	d1e7      	bne.n	80028e2 <__ledf2+0x6a>
 8002912:	4582      	cmp	sl, r0
 8002914:	dce5      	bgt.n	80028e2 <__ledf2+0x6a>
 8002916:	db02      	blt.n	800291e <__ledf2+0xa6>
 8002918:	428e      	cmp	r6, r1
 800291a:	d8e2      	bhi.n	80028e2 <__ledf2+0x6a>
 800291c:	d00e      	beq.n	800293c <__ledf2+0xc4>
 800291e:	9b01      	ldr	r3, [sp, #4]
 8002920:	0058      	lsls	r0, r3, #1
 8002922:	3801      	subs	r0, #1
 8002924:	e7e9      	b.n	80028fa <__ledf2+0x82>
 8002926:	2c00      	cmp	r4, #0
 8002928:	d0cd      	beq.n	80028c6 <__ledf2+0x4e>
 800292a:	e7d7      	b.n	80028dc <__ledf2+0x64>
 800292c:	2c00      	cmp	r4, #0
 800292e:	d0e4      	beq.n	80028fa <__ledf2+0x82>
 8002930:	e7d7      	b.n	80028e2 <__ledf2+0x6a>
 8002932:	9b01      	ldr	r3, [sp, #4]
 8002934:	2000      	movs	r0, #0
 8002936:	4563      	cmp	r3, ip
 8002938:	d0df      	beq.n	80028fa <__ledf2+0x82>
 800293a:	e7d2      	b.n	80028e2 <__ledf2+0x6a>
 800293c:	45c8      	cmp	r8, r9
 800293e:	d8d0      	bhi.n	80028e2 <__ledf2+0x6a>
 8002940:	2000      	movs	r0, #0
 8002942:	45c8      	cmp	r8, r9
 8002944:	d2d9      	bcs.n	80028fa <__ledf2+0x82>
 8002946:	e7ea      	b.n	800291e <__ledf2+0xa6>
 8002948:	9b01      	ldr	r3, [sp, #4]
 800294a:	4563      	cmp	r3, ip
 800294c:	d0e4      	beq.n	8002918 <__ledf2+0xa0>
 800294e:	e7c8      	b.n	80028e2 <__ledf2+0x6a>
 8002950:	000007ff 	.word	0x000007ff

08002954 <__aeabi_dmul>:
 8002954:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002956:	4657      	mov	r7, sl
 8002958:	464e      	mov	r6, r9
 800295a:	46de      	mov	lr, fp
 800295c:	4645      	mov	r5, r8
 800295e:	b5e0      	push	{r5, r6, r7, lr}
 8002960:	001f      	movs	r7, r3
 8002962:	030b      	lsls	r3, r1, #12
 8002964:	0b1b      	lsrs	r3, r3, #12
 8002966:	0016      	movs	r6, r2
 8002968:	469a      	mov	sl, r3
 800296a:	0fca      	lsrs	r2, r1, #31
 800296c:	004b      	lsls	r3, r1, #1
 800296e:	0004      	movs	r4, r0
 8002970:	4691      	mov	r9, r2
 8002972:	b085      	sub	sp, #20
 8002974:	0d5b      	lsrs	r3, r3, #21
 8002976:	d100      	bne.n	800297a <__aeabi_dmul+0x26>
 8002978:	e1cf      	b.n	8002d1a <__aeabi_dmul+0x3c6>
 800297a:	4acd      	ldr	r2, [pc, #820]	@ (8002cb0 <__aeabi_dmul+0x35c>)
 800297c:	4293      	cmp	r3, r2
 800297e:	d055      	beq.n	8002a2c <__aeabi_dmul+0xd8>
 8002980:	4651      	mov	r1, sl
 8002982:	0f42      	lsrs	r2, r0, #29
 8002984:	00c9      	lsls	r1, r1, #3
 8002986:	430a      	orrs	r2, r1
 8002988:	2180      	movs	r1, #128	@ 0x80
 800298a:	0409      	lsls	r1, r1, #16
 800298c:	4311      	orrs	r1, r2
 800298e:	00c2      	lsls	r2, r0, #3
 8002990:	4690      	mov	r8, r2
 8002992:	4ac8      	ldr	r2, [pc, #800]	@ (8002cb4 <__aeabi_dmul+0x360>)
 8002994:	468a      	mov	sl, r1
 8002996:	4693      	mov	fp, r2
 8002998:	449b      	add	fp, r3
 800299a:	2300      	movs	r3, #0
 800299c:	2500      	movs	r5, #0
 800299e:	9302      	str	r3, [sp, #8]
 80029a0:	033c      	lsls	r4, r7, #12
 80029a2:	007b      	lsls	r3, r7, #1
 80029a4:	0ffa      	lsrs	r2, r7, #31
 80029a6:	9601      	str	r6, [sp, #4]
 80029a8:	0b24      	lsrs	r4, r4, #12
 80029aa:	0d5b      	lsrs	r3, r3, #21
 80029ac:	9200      	str	r2, [sp, #0]
 80029ae:	d100      	bne.n	80029b2 <__aeabi_dmul+0x5e>
 80029b0:	e188      	b.n	8002cc4 <__aeabi_dmul+0x370>
 80029b2:	4abf      	ldr	r2, [pc, #764]	@ (8002cb0 <__aeabi_dmul+0x35c>)
 80029b4:	4293      	cmp	r3, r2
 80029b6:	d100      	bne.n	80029ba <__aeabi_dmul+0x66>
 80029b8:	e092      	b.n	8002ae0 <__aeabi_dmul+0x18c>
 80029ba:	4abe      	ldr	r2, [pc, #760]	@ (8002cb4 <__aeabi_dmul+0x360>)
 80029bc:	4694      	mov	ip, r2
 80029be:	4463      	add	r3, ip
 80029c0:	449b      	add	fp, r3
 80029c2:	2d0a      	cmp	r5, #10
 80029c4:	dc42      	bgt.n	8002a4c <__aeabi_dmul+0xf8>
 80029c6:	00e4      	lsls	r4, r4, #3
 80029c8:	0f73      	lsrs	r3, r6, #29
 80029ca:	4323      	orrs	r3, r4
 80029cc:	2480      	movs	r4, #128	@ 0x80
 80029ce:	4649      	mov	r1, r9
 80029d0:	0424      	lsls	r4, r4, #16
 80029d2:	431c      	orrs	r4, r3
 80029d4:	00f3      	lsls	r3, r6, #3
 80029d6:	9301      	str	r3, [sp, #4]
 80029d8:	9b00      	ldr	r3, [sp, #0]
 80029da:	2000      	movs	r0, #0
 80029dc:	4059      	eors	r1, r3
 80029de:	b2cb      	uxtb	r3, r1
 80029e0:	9303      	str	r3, [sp, #12]
 80029e2:	2d02      	cmp	r5, #2
 80029e4:	dc00      	bgt.n	80029e8 <__aeabi_dmul+0x94>
 80029e6:	e094      	b.n	8002b12 <__aeabi_dmul+0x1be>
 80029e8:	2301      	movs	r3, #1
 80029ea:	40ab      	lsls	r3, r5
 80029ec:	001d      	movs	r5, r3
 80029ee:	23a6      	movs	r3, #166	@ 0xa6
 80029f0:	002a      	movs	r2, r5
 80029f2:	00db      	lsls	r3, r3, #3
 80029f4:	401a      	ands	r2, r3
 80029f6:	421d      	tst	r5, r3
 80029f8:	d000      	beq.n	80029fc <__aeabi_dmul+0xa8>
 80029fa:	e229      	b.n	8002e50 <__aeabi_dmul+0x4fc>
 80029fc:	2390      	movs	r3, #144	@ 0x90
 80029fe:	009b      	lsls	r3, r3, #2
 8002a00:	421d      	tst	r5, r3
 8002a02:	d100      	bne.n	8002a06 <__aeabi_dmul+0xb2>
 8002a04:	e24d      	b.n	8002ea2 <__aeabi_dmul+0x54e>
 8002a06:	2300      	movs	r3, #0
 8002a08:	2480      	movs	r4, #128	@ 0x80
 8002a0a:	4699      	mov	r9, r3
 8002a0c:	0324      	lsls	r4, r4, #12
 8002a0e:	4ba8      	ldr	r3, [pc, #672]	@ (8002cb0 <__aeabi_dmul+0x35c>)
 8002a10:	0010      	movs	r0, r2
 8002a12:	464a      	mov	r2, r9
 8002a14:	051b      	lsls	r3, r3, #20
 8002a16:	4323      	orrs	r3, r4
 8002a18:	07d2      	lsls	r2, r2, #31
 8002a1a:	4313      	orrs	r3, r2
 8002a1c:	0019      	movs	r1, r3
 8002a1e:	b005      	add	sp, #20
 8002a20:	bcf0      	pop	{r4, r5, r6, r7}
 8002a22:	46bb      	mov	fp, r7
 8002a24:	46b2      	mov	sl, r6
 8002a26:	46a9      	mov	r9, r5
 8002a28:	46a0      	mov	r8, r4
 8002a2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002a2c:	4652      	mov	r2, sl
 8002a2e:	4302      	orrs	r2, r0
 8002a30:	4690      	mov	r8, r2
 8002a32:	d000      	beq.n	8002a36 <__aeabi_dmul+0xe2>
 8002a34:	e1ac      	b.n	8002d90 <__aeabi_dmul+0x43c>
 8002a36:	469b      	mov	fp, r3
 8002a38:	2302      	movs	r3, #2
 8002a3a:	4692      	mov	sl, r2
 8002a3c:	2508      	movs	r5, #8
 8002a3e:	9302      	str	r3, [sp, #8]
 8002a40:	e7ae      	b.n	80029a0 <__aeabi_dmul+0x4c>
 8002a42:	9b00      	ldr	r3, [sp, #0]
 8002a44:	46a2      	mov	sl, r4
 8002a46:	4699      	mov	r9, r3
 8002a48:	9b01      	ldr	r3, [sp, #4]
 8002a4a:	4698      	mov	r8, r3
 8002a4c:	9b02      	ldr	r3, [sp, #8]
 8002a4e:	2b02      	cmp	r3, #2
 8002a50:	d100      	bne.n	8002a54 <__aeabi_dmul+0x100>
 8002a52:	e1ca      	b.n	8002dea <__aeabi_dmul+0x496>
 8002a54:	2b03      	cmp	r3, #3
 8002a56:	d100      	bne.n	8002a5a <__aeabi_dmul+0x106>
 8002a58:	e192      	b.n	8002d80 <__aeabi_dmul+0x42c>
 8002a5a:	2b01      	cmp	r3, #1
 8002a5c:	d110      	bne.n	8002a80 <__aeabi_dmul+0x12c>
 8002a5e:	2300      	movs	r3, #0
 8002a60:	2400      	movs	r4, #0
 8002a62:	2200      	movs	r2, #0
 8002a64:	e7d4      	b.n	8002a10 <__aeabi_dmul+0xbc>
 8002a66:	2201      	movs	r2, #1
 8002a68:	087b      	lsrs	r3, r7, #1
 8002a6a:	403a      	ands	r2, r7
 8002a6c:	4313      	orrs	r3, r2
 8002a6e:	4652      	mov	r2, sl
 8002a70:	07d2      	lsls	r2, r2, #31
 8002a72:	4313      	orrs	r3, r2
 8002a74:	4698      	mov	r8, r3
 8002a76:	4653      	mov	r3, sl
 8002a78:	085b      	lsrs	r3, r3, #1
 8002a7a:	469a      	mov	sl, r3
 8002a7c:	9b03      	ldr	r3, [sp, #12]
 8002a7e:	4699      	mov	r9, r3
 8002a80:	465b      	mov	r3, fp
 8002a82:	1c58      	adds	r0, r3, #1
 8002a84:	2380      	movs	r3, #128	@ 0x80
 8002a86:	00db      	lsls	r3, r3, #3
 8002a88:	445b      	add	r3, fp
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	dc00      	bgt.n	8002a90 <__aeabi_dmul+0x13c>
 8002a8e:	e1b1      	b.n	8002df4 <__aeabi_dmul+0x4a0>
 8002a90:	4642      	mov	r2, r8
 8002a92:	0752      	lsls	r2, r2, #29
 8002a94:	d00b      	beq.n	8002aae <__aeabi_dmul+0x15a>
 8002a96:	220f      	movs	r2, #15
 8002a98:	4641      	mov	r1, r8
 8002a9a:	400a      	ands	r2, r1
 8002a9c:	2a04      	cmp	r2, #4
 8002a9e:	d006      	beq.n	8002aae <__aeabi_dmul+0x15a>
 8002aa0:	4642      	mov	r2, r8
 8002aa2:	1d11      	adds	r1, r2, #4
 8002aa4:	4541      	cmp	r1, r8
 8002aa6:	4192      	sbcs	r2, r2
 8002aa8:	4688      	mov	r8, r1
 8002aaa:	4252      	negs	r2, r2
 8002aac:	4492      	add	sl, r2
 8002aae:	4652      	mov	r2, sl
 8002ab0:	01d2      	lsls	r2, r2, #7
 8002ab2:	d506      	bpl.n	8002ac2 <__aeabi_dmul+0x16e>
 8002ab4:	4652      	mov	r2, sl
 8002ab6:	4b80      	ldr	r3, [pc, #512]	@ (8002cb8 <__aeabi_dmul+0x364>)
 8002ab8:	401a      	ands	r2, r3
 8002aba:	2380      	movs	r3, #128	@ 0x80
 8002abc:	4692      	mov	sl, r2
 8002abe:	00db      	lsls	r3, r3, #3
 8002ac0:	18c3      	adds	r3, r0, r3
 8002ac2:	4a7e      	ldr	r2, [pc, #504]	@ (8002cbc <__aeabi_dmul+0x368>)
 8002ac4:	4293      	cmp	r3, r2
 8002ac6:	dd00      	ble.n	8002aca <__aeabi_dmul+0x176>
 8002ac8:	e18f      	b.n	8002dea <__aeabi_dmul+0x496>
 8002aca:	4642      	mov	r2, r8
 8002acc:	08d1      	lsrs	r1, r2, #3
 8002ace:	4652      	mov	r2, sl
 8002ad0:	0752      	lsls	r2, r2, #29
 8002ad2:	430a      	orrs	r2, r1
 8002ad4:	4651      	mov	r1, sl
 8002ad6:	055b      	lsls	r3, r3, #21
 8002ad8:	024c      	lsls	r4, r1, #9
 8002ada:	0b24      	lsrs	r4, r4, #12
 8002adc:	0d5b      	lsrs	r3, r3, #21
 8002ade:	e797      	b.n	8002a10 <__aeabi_dmul+0xbc>
 8002ae0:	4b73      	ldr	r3, [pc, #460]	@ (8002cb0 <__aeabi_dmul+0x35c>)
 8002ae2:	4326      	orrs	r6, r4
 8002ae4:	469c      	mov	ip, r3
 8002ae6:	44e3      	add	fp, ip
 8002ae8:	2e00      	cmp	r6, #0
 8002aea:	d100      	bne.n	8002aee <__aeabi_dmul+0x19a>
 8002aec:	e16f      	b.n	8002dce <__aeabi_dmul+0x47a>
 8002aee:	2303      	movs	r3, #3
 8002af0:	4649      	mov	r1, r9
 8002af2:	431d      	orrs	r5, r3
 8002af4:	9b00      	ldr	r3, [sp, #0]
 8002af6:	4059      	eors	r1, r3
 8002af8:	b2cb      	uxtb	r3, r1
 8002afa:	9303      	str	r3, [sp, #12]
 8002afc:	2d0a      	cmp	r5, #10
 8002afe:	dd00      	ble.n	8002b02 <__aeabi_dmul+0x1ae>
 8002b00:	e133      	b.n	8002d6a <__aeabi_dmul+0x416>
 8002b02:	2301      	movs	r3, #1
 8002b04:	40ab      	lsls	r3, r5
 8002b06:	001d      	movs	r5, r3
 8002b08:	2303      	movs	r3, #3
 8002b0a:	9302      	str	r3, [sp, #8]
 8002b0c:	2288      	movs	r2, #136	@ 0x88
 8002b0e:	422a      	tst	r2, r5
 8002b10:	d197      	bne.n	8002a42 <__aeabi_dmul+0xee>
 8002b12:	4642      	mov	r2, r8
 8002b14:	4643      	mov	r3, r8
 8002b16:	0412      	lsls	r2, r2, #16
 8002b18:	0c12      	lsrs	r2, r2, #16
 8002b1a:	0016      	movs	r6, r2
 8002b1c:	9801      	ldr	r0, [sp, #4]
 8002b1e:	0c1d      	lsrs	r5, r3, #16
 8002b20:	0c03      	lsrs	r3, r0, #16
 8002b22:	0400      	lsls	r0, r0, #16
 8002b24:	0c00      	lsrs	r0, r0, #16
 8002b26:	4346      	muls	r6, r0
 8002b28:	46b4      	mov	ip, r6
 8002b2a:	001e      	movs	r6, r3
 8002b2c:	436e      	muls	r6, r5
 8002b2e:	9600      	str	r6, [sp, #0]
 8002b30:	0016      	movs	r6, r2
 8002b32:	0007      	movs	r7, r0
 8002b34:	435e      	muls	r6, r3
 8002b36:	4661      	mov	r1, ip
 8002b38:	46b0      	mov	r8, r6
 8002b3a:	436f      	muls	r7, r5
 8002b3c:	0c0e      	lsrs	r6, r1, #16
 8002b3e:	44b8      	add	r8, r7
 8002b40:	4446      	add	r6, r8
 8002b42:	42b7      	cmp	r7, r6
 8002b44:	d905      	bls.n	8002b52 <__aeabi_dmul+0x1fe>
 8002b46:	2180      	movs	r1, #128	@ 0x80
 8002b48:	0249      	lsls	r1, r1, #9
 8002b4a:	4688      	mov	r8, r1
 8002b4c:	9f00      	ldr	r7, [sp, #0]
 8002b4e:	4447      	add	r7, r8
 8002b50:	9700      	str	r7, [sp, #0]
 8002b52:	4661      	mov	r1, ip
 8002b54:	0409      	lsls	r1, r1, #16
 8002b56:	0c09      	lsrs	r1, r1, #16
 8002b58:	0c37      	lsrs	r7, r6, #16
 8002b5a:	0436      	lsls	r6, r6, #16
 8002b5c:	468c      	mov	ip, r1
 8002b5e:	0031      	movs	r1, r6
 8002b60:	4461      	add	r1, ip
 8002b62:	9101      	str	r1, [sp, #4]
 8002b64:	0011      	movs	r1, r2
 8002b66:	0c26      	lsrs	r6, r4, #16
 8002b68:	0424      	lsls	r4, r4, #16
 8002b6a:	0c24      	lsrs	r4, r4, #16
 8002b6c:	4361      	muls	r1, r4
 8002b6e:	468c      	mov	ip, r1
 8002b70:	0021      	movs	r1, r4
 8002b72:	4369      	muls	r1, r5
 8002b74:	4689      	mov	r9, r1
 8002b76:	4661      	mov	r1, ip
 8002b78:	0c09      	lsrs	r1, r1, #16
 8002b7a:	4688      	mov	r8, r1
 8002b7c:	4372      	muls	r2, r6
 8002b7e:	444a      	add	r2, r9
 8002b80:	4442      	add	r2, r8
 8002b82:	4375      	muls	r5, r6
 8002b84:	4591      	cmp	r9, r2
 8002b86:	d903      	bls.n	8002b90 <__aeabi_dmul+0x23c>
 8002b88:	2180      	movs	r1, #128	@ 0x80
 8002b8a:	0249      	lsls	r1, r1, #9
 8002b8c:	4688      	mov	r8, r1
 8002b8e:	4445      	add	r5, r8
 8002b90:	0c11      	lsrs	r1, r2, #16
 8002b92:	4688      	mov	r8, r1
 8002b94:	4661      	mov	r1, ip
 8002b96:	0409      	lsls	r1, r1, #16
 8002b98:	0c09      	lsrs	r1, r1, #16
 8002b9a:	468c      	mov	ip, r1
 8002b9c:	0412      	lsls	r2, r2, #16
 8002b9e:	4462      	add	r2, ip
 8002ba0:	18b9      	adds	r1, r7, r2
 8002ba2:	9102      	str	r1, [sp, #8]
 8002ba4:	4651      	mov	r1, sl
 8002ba6:	0c09      	lsrs	r1, r1, #16
 8002ba8:	468c      	mov	ip, r1
 8002baa:	4651      	mov	r1, sl
 8002bac:	040f      	lsls	r7, r1, #16
 8002bae:	0c3f      	lsrs	r7, r7, #16
 8002bb0:	0039      	movs	r1, r7
 8002bb2:	4341      	muls	r1, r0
 8002bb4:	4445      	add	r5, r8
 8002bb6:	4688      	mov	r8, r1
 8002bb8:	4661      	mov	r1, ip
 8002bba:	4341      	muls	r1, r0
 8002bbc:	468a      	mov	sl, r1
 8002bbe:	4641      	mov	r1, r8
 8002bc0:	4660      	mov	r0, ip
 8002bc2:	0c09      	lsrs	r1, r1, #16
 8002bc4:	4689      	mov	r9, r1
 8002bc6:	4358      	muls	r0, r3
 8002bc8:	437b      	muls	r3, r7
 8002bca:	4453      	add	r3, sl
 8002bcc:	444b      	add	r3, r9
 8002bce:	459a      	cmp	sl, r3
 8002bd0:	d903      	bls.n	8002bda <__aeabi_dmul+0x286>
 8002bd2:	2180      	movs	r1, #128	@ 0x80
 8002bd4:	0249      	lsls	r1, r1, #9
 8002bd6:	4689      	mov	r9, r1
 8002bd8:	4448      	add	r0, r9
 8002bda:	0c19      	lsrs	r1, r3, #16
 8002bdc:	4689      	mov	r9, r1
 8002bde:	4641      	mov	r1, r8
 8002be0:	0409      	lsls	r1, r1, #16
 8002be2:	0c09      	lsrs	r1, r1, #16
 8002be4:	4688      	mov	r8, r1
 8002be6:	0039      	movs	r1, r7
 8002be8:	4361      	muls	r1, r4
 8002bea:	041b      	lsls	r3, r3, #16
 8002bec:	4443      	add	r3, r8
 8002bee:	4688      	mov	r8, r1
 8002bf0:	4661      	mov	r1, ip
 8002bf2:	434c      	muls	r4, r1
 8002bf4:	4371      	muls	r1, r6
 8002bf6:	468c      	mov	ip, r1
 8002bf8:	4641      	mov	r1, r8
 8002bfa:	4377      	muls	r7, r6
 8002bfc:	0c0e      	lsrs	r6, r1, #16
 8002bfe:	193f      	adds	r7, r7, r4
 8002c00:	19f6      	adds	r6, r6, r7
 8002c02:	4448      	add	r0, r9
 8002c04:	42b4      	cmp	r4, r6
 8002c06:	d903      	bls.n	8002c10 <__aeabi_dmul+0x2bc>
 8002c08:	2180      	movs	r1, #128	@ 0x80
 8002c0a:	0249      	lsls	r1, r1, #9
 8002c0c:	4689      	mov	r9, r1
 8002c0e:	44cc      	add	ip, r9
 8002c10:	9902      	ldr	r1, [sp, #8]
 8002c12:	9f00      	ldr	r7, [sp, #0]
 8002c14:	4689      	mov	r9, r1
 8002c16:	0431      	lsls	r1, r6, #16
 8002c18:	444f      	add	r7, r9
 8002c1a:	4689      	mov	r9, r1
 8002c1c:	4641      	mov	r1, r8
 8002c1e:	4297      	cmp	r7, r2
 8002c20:	4192      	sbcs	r2, r2
 8002c22:	040c      	lsls	r4, r1, #16
 8002c24:	0c24      	lsrs	r4, r4, #16
 8002c26:	444c      	add	r4, r9
 8002c28:	18ff      	adds	r7, r7, r3
 8002c2a:	4252      	negs	r2, r2
 8002c2c:	1964      	adds	r4, r4, r5
 8002c2e:	18a1      	adds	r1, r4, r2
 8002c30:	429f      	cmp	r7, r3
 8002c32:	419b      	sbcs	r3, r3
 8002c34:	4688      	mov	r8, r1
 8002c36:	4682      	mov	sl, r0
 8002c38:	425b      	negs	r3, r3
 8002c3a:	4699      	mov	r9, r3
 8002c3c:	4590      	cmp	r8, r2
 8002c3e:	4192      	sbcs	r2, r2
 8002c40:	42ac      	cmp	r4, r5
 8002c42:	41a4      	sbcs	r4, r4
 8002c44:	44c2      	add	sl, r8
 8002c46:	44d1      	add	r9, sl
 8002c48:	4252      	negs	r2, r2
 8002c4a:	4264      	negs	r4, r4
 8002c4c:	4314      	orrs	r4, r2
 8002c4e:	4599      	cmp	r9, r3
 8002c50:	419b      	sbcs	r3, r3
 8002c52:	4582      	cmp	sl, r0
 8002c54:	4192      	sbcs	r2, r2
 8002c56:	425b      	negs	r3, r3
 8002c58:	4252      	negs	r2, r2
 8002c5a:	4313      	orrs	r3, r2
 8002c5c:	464a      	mov	r2, r9
 8002c5e:	0c36      	lsrs	r6, r6, #16
 8002c60:	19a4      	adds	r4, r4, r6
 8002c62:	18e3      	adds	r3, r4, r3
 8002c64:	4463      	add	r3, ip
 8002c66:	025b      	lsls	r3, r3, #9
 8002c68:	0dd2      	lsrs	r2, r2, #23
 8002c6a:	431a      	orrs	r2, r3
 8002c6c:	9901      	ldr	r1, [sp, #4]
 8002c6e:	4692      	mov	sl, r2
 8002c70:	027a      	lsls	r2, r7, #9
 8002c72:	430a      	orrs	r2, r1
 8002c74:	1e50      	subs	r0, r2, #1
 8002c76:	4182      	sbcs	r2, r0
 8002c78:	0dff      	lsrs	r7, r7, #23
 8002c7a:	4317      	orrs	r7, r2
 8002c7c:	464a      	mov	r2, r9
 8002c7e:	0252      	lsls	r2, r2, #9
 8002c80:	4317      	orrs	r7, r2
 8002c82:	46b8      	mov	r8, r7
 8002c84:	01db      	lsls	r3, r3, #7
 8002c86:	d500      	bpl.n	8002c8a <__aeabi_dmul+0x336>
 8002c88:	e6ed      	b.n	8002a66 <__aeabi_dmul+0x112>
 8002c8a:	4b0d      	ldr	r3, [pc, #52]	@ (8002cc0 <__aeabi_dmul+0x36c>)
 8002c8c:	9a03      	ldr	r2, [sp, #12]
 8002c8e:	445b      	add	r3, fp
 8002c90:	4691      	mov	r9, r2
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	dc00      	bgt.n	8002c98 <__aeabi_dmul+0x344>
 8002c96:	e0ac      	b.n	8002df2 <__aeabi_dmul+0x49e>
 8002c98:	003a      	movs	r2, r7
 8002c9a:	0752      	lsls	r2, r2, #29
 8002c9c:	d100      	bne.n	8002ca0 <__aeabi_dmul+0x34c>
 8002c9e:	e710      	b.n	8002ac2 <__aeabi_dmul+0x16e>
 8002ca0:	220f      	movs	r2, #15
 8002ca2:	4658      	mov	r0, fp
 8002ca4:	403a      	ands	r2, r7
 8002ca6:	2a04      	cmp	r2, #4
 8002ca8:	d000      	beq.n	8002cac <__aeabi_dmul+0x358>
 8002caa:	e6f9      	b.n	8002aa0 <__aeabi_dmul+0x14c>
 8002cac:	e709      	b.n	8002ac2 <__aeabi_dmul+0x16e>
 8002cae:	46c0      	nop			@ (mov r8, r8)
 8002cb0:	000007ff 	.word	0x000007ff
 8002cb4:	fffffc01 	.word	0xfffffc01
 8002cb8:	feffffff 	.word	0xfeffffff
 8002cbc:	000007fe 	.word	0x000007fe
 8002cc0:	000003ff 	.word	0x000003ff
 8002cc4:	0022      	movs	r2, r4
 8002cc6:	4332      	orrs	r2, r6
 8002cc8:	d06f      	beq.n	8002daa <__aeabi_dmul+0x456>
 8002cca:	2c00      	cmp	r4, #0
 8002ccc:	d100      	bne.n	8002cd0 <__aeabi_dmul+0x37c>
 8002cce:	e0c2      	b.n	8002e56 <__aeabi_dmul+0x502>
 8002cd0:	0020      	movs	r0, r4
 8002cd2:	f000 fea9 	bl	8003a28 <__clzsi2>
 8002cd6:	0002      	movs	r2, r0
 8002cd8:	0003      	movs	r3, r0
 8002cda:	3a0b      	subs	r2, #11
 8002cdc:	201d      	movs	r0, #29
 8002cde:	1a82      	subs	r2, r0, r2
 8002ce0:	0030      	movs	r0, r6
 8002ce2:	0019      	movs	r1, r3
 8002ce4:	40d0      	lsrs	r0, r2
 8002ce6:	3908      	subs	r1, #8
 8002ce8:	408c      	lsls	r4, r1
 8002cea:	0002      	movs	r2, r0
 8002cec:	4322      	orrs	r2, r4
 8002cee:	0034      	movs	r4, r6
 8002cf0:	408c      	lsls	r4, r1
 8002cf2:	4659      	mov	r1, fp
 8002cf4:	1acb      	subs	r3, r1, r3
 8002cf6:	4986      	ldr	r1, [pc, #536]	@ (8002f10 <__aeabi_dmul+0x5bc>)
 8002cf8:	468b      	mov	fp, r1
 8002cfa:	449b      	add	fp, r3
 8002cfc:	2d0a      	cmp	r5, #10
 8002cfe:	dd00      	ble.n	8002d02 <__aeabi_dmul+0x3ae>
 8002d00:	e6a4      	b.n	8002a4c <__aeabi_dmul+0xf8>
 8002d02:	4649      	mov	r1, r9
 8002d04:	9b00      	ldr	r3, [sp, #0]
 8002d06:	9401      	str	r4, [sp, #4]
 8002d08:	4059      	eors	r1, r3
 8002d0a:	b2cb      	uxtb	r3, r1
 8002d0c:	0014      	movs	r4, r2
 8002d0e:	2000      	movs	r0, #0
 8002d10:	9303      	str	r3, [sp, #12]
 8002d12:	2d02      	cmp	r5, #2
 8002d14:	dd00      	ble.n	8002d18 <__aeabi_dmul+0x3c4>
 8002d16:	e667      	b.n	80029e8 <__aeabi_dmul+0x94>
 8002d18:	e6fb      	b.n	8002b12 <__aeabi_dmul+0x1be>
 8002d1a:	4653      	mov	r3, sl
 8002d1c:	4303      	orrs	r3, r0
 8002d1e:	4698      	mov	r8, r3
 8002d20:	d03c      	beq.n	8002d9c <__aeabi_dmul+0x448>
 8002d22:	4653      	mov	r3, sl
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d100      	bne.n	8002d2a <__aeabi_dmul+0x3d6>
 8002d28:	e0a3      	b.n	8002e72 <__aeabi_dmul+0x51e>
 8002d2a:	4650      	mov	r0, sl
 8002d2c:	f000 fe7c 	bl	8003a28 <__clzsi2>
 8002d30:	230b      	movs	r3, #11
 8002d32:	425b      	negs	r3, r3
 8002d34:	469c      	mov	ip, r3
 8002d36:	0002      	movs	r2, r0
 8002d38:	4484      	add	ip, r0
 8002d3a:	0011      	movs	r1, r2
 8002d3c:	4650      	mov	r0, sl
 8002d3e:	3908      	subs	r1, #8
 8002d40:	4088      	lsls	r0, r1
 8002d42:	231d      	movs	r3, #29
 8002d44:	4680      	mov	r8, r0
 8002d46:	4660      	mov	r0, ip
 8002d48:	1a1b      	subs	r3, r3, r0
 8002d4a:	0020      	movs	r0, r4
 8002d4c:	40d8      	lsrs	r0, r3
 8002d4e:	0003      	movs	r3, r0
 8002d50:	4640      	mov	r0, r8
 8002d52:	4303      	orrs	r3, r0
 8002d54:	469a      	mov	sl, r3
 8002d56:	0023      	movs	r3, r4
 8002d58:	408b      	lsls	r3, r1
 8002d5a:	4698      	mov	r8, r3
 8002d5c:	4b6c      	ldr	r3, [pc, #432]	@ (8002f10 <__aeabi_dmul+0x5bc>)
 8002d5e:	2500      	movs	r5, #0
 8002d60:	1a9b      	subs	r3, r3, r2
 8002d62:	469b      	mov	fp, r3
 8002d64:	2300      	movs	r3, #0
 8002d66:	9302      	str	r3, [sp, #8]
 8002d68:	e61a      	b.n	80029a0 <__aeabi_dmul+0x4c>
 8002d6a:	2d0f      	cmp	r5, #15
 8002d6c:	d000      	beq.n	8002d70 <__aeabi_dmul+0x41c>
 8002d6e:	e0c9      	b.n	8002f04 <__aeabi_dmul+0x5b0>
 8002d70:	2380      	movs	r3, #128	@ 0x80
 8002d72:	4652      	mov	r2, sl
 8002d74:	031b      	lsls	r3, r3, #12
 8002d76:	421a      	tst	r2, r3
 8002d78:	d002      	beq.n	8002d80 <__aeabi_dmul+0x42c>
 8002d7a:	421c      	tst	r4, r3
 8002d7c:	d100      	bne.n	8002d80 <__aeabi_dmul+0x42c>
 8002d7e:	e092      	b.n	8002ea6 <__aeabi_dmul+0x552>
 8002d80:	2480      	movs	r4, #128	@ 0x80
 8002d82:	4653      	mov	r3, sl
 8002d84:	0324      	lsls	r4, r4, #12
 8002d86:	431c      	orrs	r4, r3
 8002d88:	0324      	lsls	r4, r4, #12
 8002d8a:	4642      	mov	r2, r8
 8002d8c:	0b24      	lsrs	r4, r4, #12
 8002d8e:	e63e      	b.n	8002a0e <__aeabi_dmul+0xba>
 8002d90:	469b      	mov	fp, r3
 8002d92:	2303      	movs	r3, #3
 8002d94:	4680      	mov	r8, r0
 8002d96:	250c      	movs	r5, #12
 8002d98:	9302      	str	r3, [sp, #8]
 8002d9a:	e601      	b.n	80029a0 <__aeabi_dmul+0x4c>
 8002d9c:	2300      	movs	r3, #0
 8002d9e:	469a      	mov	sl, r3
 8002da0:	469b      	mov	fp, r3
 8002da2:	3301      	adds	r3, #1
 8002da4:	2504      	movs	r5, #4
 8002da6:	9302      	str	r3, [sp, #8]
 8002da8:	e5fa      	b.n	80029a0 <__aeabi_dmul+0x4c>
 8002daa:	2101      	movs	r1, #1
 8002dac:	430d      	orrs	r5, r1
 8002dae:	2d0a      	cmp	r5, #10
 8002db0:	dd00      	ble.n	8002db4 <__aeabi_dmul+0x460>
 8002db2:	e64b      	b.n	8002a4c <__aeabi_dmul+0xf8>
 8002db4:	4649      	mov	r1, r9
 8002db6:	9800      	ldr	r0, [sp, #0]
 8002db8:	4041      	eors	r1, r0
 8002dba:	b2c9      	uxtb	r1, r1
 8002dbc:	9103      	str	r1, [sp, #12]
 8002dbe:	2d02      	cmp	r5, #2
 8002dc0:	dc00      	bgt.n	8002dc4 <__aeabi_dmul+0x470>
 8002dc2:	e096      	b.n	8002ef2 <__aeabi_dmul+0x59e>
 8002dc4:	2300      	movs	r3, #0
 8002dc6:	2400      	movs	r4, #0
 8002dc8:	2001      	movs	r0, #1
 8002dca:	9301      	str	r3, [sp, #4]
 8002dcc:	e60c      	b.n	80029e8 <__aeabi_dmul+0x94>
 8002dce:	4649      	mov	r1, r9
 8002dd0:	2302      	movs	r3, #2
 8002dd2:	9a00      	ldr	r2, [sp, #0]
 8002dd4:	432b      	orrs	r3, r5
 8002dd6:	4051      	eors	r1, r2
 8002dd8:	b2ca      	uxtb	r2, r1
 8002dda:	9203      	str	r2, [sp, #12]
 8002ddc:	2b0a      	cmp	r3, #10
 8002dde:	dd00      	ble.n	8002de2 <__aeabi_dmul+0x48e>
 8002de0:	e634      	b.n	8002a4c <__aeabi_dmul+0xf8>
 8002de2:	2d00      	cmp	r5, #0
 8002de4:	d157      	bne.n	8002e96 <__aeabi_dmul+0x542>
 8002de6:	9b03      	ldr	r3, [sp, #12]
 8002de8:	4699      	mov	r9, r3
 8002dea:	2400      	movs	r4, #0
 8002dec:	2200      	movs	r2, #0
 8002dee:	4b49      	ldr	r3, [pc, #292]	@ (8002f14 <__aeabi_dmul+0x5c0>)
 8002df0:	e60e      	b.n	8002a10 <__aeabi_dmul+0xbc>
 8002df2:	4658      	mov	r0, fp
 8002df4:	2101      	movs	r1, #1
 8002df6:	1ac9      	subs	r1, r1, r3
 8002df8:	2938      	cmp	r1, #56	@ 0x38
 8002dfa:	dd00      	ble.n	8002dfe <__aeabi_dmul+0x4aa>
 8002dfc:	e62f      	b.n	8002a5e <__aeabi_dmul+0x10a>
 8002dfe:	291f      	cmp	r1, #31
 8002e00:	dd56      	ble.n	8002eb0 <__aeabi_dmul+0x55c>
 8002e02:	221f      	movs	r2, #31
 8002e04:	4654      	mov	r4, sl
 8002e06:	4252      	negs	r2, r2
 8002e08:	1ad3      	subs	r3, r2, r3
 8002e0a:	40dc      	lsrs	r4, r3
 8002e0c:	2920      	cmp	r1, #32
 8002e0e:	d007      	beq.n	8002e20 <__aeabi_dmul+0x4cc>
 8002e10:	4b41      	ldr	r3, [pc, #260]	@ (8002f18 <__aeabi_dmul+0x5c4>)
 8002e12:	4642      	mov	r2, r8
 8002e14:	469c      	mov	ip, r3
 8002e16:	4653      	mov	r3, sl
 8002e18:	4460      	add	r0, ip
 8002e1a:	4083      	lsls	r3, r0
 8002e1c:	431a      	orrs	r2, r3
 8002e1e:	4690      	mov	r8, r2
 8002e20:	4642      	mov	r2, r8
 8002e22:	2107      	movs	r1, #7
 8002e24:	1e53      	subs	r3, r2, #1
 8002e26:	419a      	sbcs	r2, r3
 8002e28:	000b      	movs	r3, r1
 8002e2a:	4322      	orrs	r2, r4
 8002e2c:	4013      	ands	r3, r2
 8002e2e:	2400      	movs	r4, #0
 8002e30:	4211      	tst	r1, r2
 8002e32:	d009      	beq.n	8002e48 <__aeabi_dmul+0x4f4>
 8002e34:	230f      	movs	r3, #15
 8002e36:	4013      	ands	r3, r2
 8002e38:	2b04      	cmp	r3, #4
 8002e3a:	d05d      	beq.n	8002ef8 <__aeabi_dmul+0x5a4>
 8002e3c:	1d11      	adds	r1, r2, #4
 8002e3e:	4291      	cmp	r1, r2
 8002e40:	419b      	sbcs	r3, r3
 8002e42:	000a      	movs	r2, r1
 8002e44:	425b      	negs	r3, r3
 8002e46:	075b      	lsls	r3, r3, #29
 8002e48:	08d2      	lsrs	r2, r2, #3
 8002e4a:	431a      	orrs	r2, r3
 8002e4c:	2300      	movs	r3, #0
 8002e4e:	e5df      	b.n	8002a10 <__aeabi_dmul+0xbc>
 8002e50:	9b03      	ldr	r3, [sp, #12]
 8002e52:	4699      	mov	r9, r3
 8002e54:	e5fa      	b.n	8002a4c <__aeabi_dmul+0xf8>
 8002e56:	9801      	ldr	r0, [sp, #4]
 8002e58:	f000 fde6 	bl	8003a28 <__clzsi2>
 8002e5c:	0002      	movs	r2, r0
 8002e5e:	0003      	movs	r3, r0
 8002e60:	3215      	adds	r2, #21
 8002e62:	3320      	adds	r3, #32
 8002e64:	2a1c      	cmp	r2, #28
 8002e66:	dc00      	bgt.n	8002e6a <__aeabi_dmul+0x516>
 8002e68:	e738      	b.n	8002cdc <__aeabi_dmul+0x388>
 8002e6a:	9a01      	ldr	r2, [sp, #4]
 8002e6c:	3808      	subs	r0, #8
 8002e6e:	4082      	lsls	r2, r0
 8002e70:	e73f      	b.n	8002cf2 <__aeabi_dmul+0x39e>
 8002e72:	f000 fdd9 	bl	8003a28 <__clzsi2>
 8002e76:	2315      	movs	r3, #21
 8002e78:	469c      	mov	ip, r3
 8002e7a:	4484      	add	ip, r0
 8002e7c:	0002      	movs	r2, r0
 8002e7e:	4663      	mov	r3, ip
 8002e80:	3220      	adds	r2, #32
 8002e82:	2b1c      	cmp	r3, #28
 8002e84:	dc00      	bgt.n	8002e88 <__aeabi_dmul+0x534>
 8002e86:	e758      	b.n	8002d3a <__aeabi_dmul+0x3e6>
 8002e88:	2300      	movs	r3, #0
 8002e8a:	4698      	mov	r8, r3
 8002e8c:	0023      	movs	r3, r4
 8002e8e:	3808      	subs	r0, #8
 8002e90:	4083      	lsls	r3, r0
 8002e92:	469a      	mov	sl, r3
 8002e94:	e762      	b.n	8002d5c <__aeabi_dmul+0x408>
 8002e96:	001d      	movs	r5, r3
 8002e98:	2300      	movs	r3, #0
 8002e9a:	2400      	movs	r4, #0
 8002e9c:	2002      	movs	r0, #2
 8002e9e:	9301      	str	r3, [sp, #4]
 8002ea0:	e5a2      	b.n	80029e8 <__aeabi_dmul+0x94>
 8002ea2:	9002      	str	r0, [sp, #8]
 8002ea4:	e632      	b.n	8002b0c <__aeabi_dmul+0x1b8>
 8002ea6:	431c      	orrs	r4, r3
 8002ea8:	9b00      	ldr	r3, [sp, #0]
 8002eaa:	9a01      	ldr	r2, [sp, #4]
 8002eac:	4699      	mov	r9, r3
 8002eae:	e5ae      	b.n	8002a0e <__aeabi_dmul+0xba>
 8002eb0:	4b1a      	ldr	r3, [pc, #104]	@ (8002f1c <__aeabi_dmul+0x5c8>)
 8002eb2:	4652      	mov	r2, sl
 8002eb4:	18c3      	adds	r3, r0, r3
 8002eb6:	4640      	mov	r0, r8
 8002eb8:	409a      	lsls	r2, r3
 8002eba:	40c8      	lsrs	r0, r1
 8002ebc:	4302      	orrs	r2, r0
 8002ebe:	4640      	mov	r0, r8
 8002ec0:	4098      	lsls	r0, r3
 8002ec2:	0003      	movs	r3, r0
 8002ec4:	1e58      	subs	r0, r3, #1
 8002ec6:	4183      	sbcs	r3, r0
 8002ec8:	4654      	mov	r4, sl
 8002eca:	431a      	orrs	r2, r3
 8002ecc:	40cc      	lsrs	r4, r1
 8002ece:	0753      	lsls	r3, r2, #29
 8002ed0:	d009      	beq.n	8002ee6 <__aeabi_dmul+0x592>
 8002ed2:	230f      	movs	r3, #15
 8002ed4:	4013      	ands	r3, r2
 8002ed6:	2b04      	cmp	r3, #4
 8002ed8:	d005      	beq.n	8002ee6 <__aeabi_dmul+0x592>
 8002eda:	1d13      	adds	r3, r2, #4
 8002edc:	4293      	cmp	r3, r2
 8002ede:	4192      	sbcs	r2, r2
 8002ee0:	4252      	negs	r2, r2
 8002ee2:	18a4      	adds	r4, r4, r2
 8002ee4:	001a      	movs	r2, r3
 8002ee6:	0223      	lsls	r3, r4, #8
 8002ee8:	d508      	bpl.n	8002efc <__aeabi_dmul+0x5a8>
 8002eea:	2301      	movs	r3, #1
 8002eec:	2400      	movs	r4, #0
 8002eee:	2200      	movs	r2, #0
 8002ef0:	e58e      	b.n	8002a10 <__aeabi_dmul+0xbc>
 8002ef2:	4689      	mov	r9, r1
 8002ef4:	2400      	movs	r4, #0
 8002ef6:	e58b      	b.n	8002a10 <__aeabi_dmul+0xbc>
 8002ef8:	2300      	movs	r3, #0
 8002efa:	e7a5      	b.n	8002e48 <__aeabi_dmul+0x4f4>
 8002efc:	0763      	lsls	r3, r4, #29
 8002efe:	0264      	lsls	r4, r4, #9
 8002f00:	0b24      	lsrs	r4, r4, #12
 8002f02:	e7a1      	b.n	8002e48 <__aeabi_dmul+0x4f4>
 8002f04:	9b00      	ldr	r3, [sp, #0]
 8002f06:	46a2      	mov	sl, r4
 8002f08:	4699      	mov	r9, r3
 8002f0a:	9b01      	ldr	r3, [sp, #4]
 8002f0c:	4698      	mov	r8, r3
 8002f0e:	e737      	b.n	8002d80 <__aeabi_dmul+0x42c>
 8002f10:	fffffc0d 	.word	0xfffffc0d
 8002f14:	000007ff 	.word	0x000007ff
 8002f18:	0000043e 	.word	0x0000043e
 8002f1c:	0000041e 	.word	0x0000041e

08002f20 <__aeabi_dsub>:
 8002f20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002f22:	4657      	mov	r7, sl
 8002f24:	464e      	mov	r6, r9
 8002f26:	4645      	mov	r5, r8
 8002f28:	46de      	mov	lr, fp
 8002f2a:	b5e0      	push	{r5, r6, r7, lr}
 8002f2c:	b083      	sub	sp, #12
 8002f2e:	9000      	str	r0, [sp, #0]
 8002f30:	9101      	str	r1, [sp, #4]
 8002f32:	030c      	lsls	r4, r1, #12
 8002f34:	004d      	lsls	r5, r1, #1
 8002f36:	0fce      	lsrs	r6, r1, #31
 8002f38:	0a61      	lsrs	r1, r4, #9
 8002f3a:	9c00      	ldr	r4, [sp, #0]
 8002f3c:	005f      	lsls	r7, r3, #1
 8002f3e:	0f64      	lsrs	r4, r4, #29
 8002f40:	430c      	orrs	r4, r1
 8002f42:	9900      	ldr	r1, [sp, #0]
 8002f44:	9200      	str	r2, [sp, #0]
 8002f46:	9301      	str	r3, [sp, #4]
 8002f48:	00c8      	lsls	r0, r1, #3
 8002f4a:	0319      	lsls	r1, r3, #12
 8002f4c:	0d7b      	lsrs	r3, r7, #21
 8002f4e:	4699      	mov	r9, r3
 8002f50:	9b01      	ldr	r3, [sp, #4]
 8002f52:	4fcc      	ldr	r7, [pc, #816]	@ (8003284 <__aeabi_dsub+0x364>)
 8002f54:	0fdb      	lsrs	r3, r3, #31
 8002f56:	469c      	mov	ip, r3
 8002f58:	0a4b      	lsrs	r3, r1, #9
 8002f5a:	9900      	ldr	r1, [sp, #0]
 8002f5c:	4680      	mov	r8, r0
 8002f5e:	0f49      	lsrs	r1, r1, #29
 8002f60:	4319      	orrs	r1, r3
 8002f62:	9b00      	ldr	r3, [sp, #0]
 8002f64:	468b      	mov	fp, r1
 8002f66:	00da      	lsls	r2, r3, #3
 8002f68:	4692      	mov	sl, r2
 8002f6a:	0d6d      	lsrs	r5, r5, #21
 8002f6c:	45b9      	cmp	r9, r7
 8002f6e:	d100      	bne.n	8002f72 <__aeabi_dsub+0x52>
 8002f70:	e0bf      	b.n	80030f2 <__aeabi_dsub+0x1d2>
 8002f72:	2301      	movs	r3, #1
 8002f74:	4661      	mov	r1, ip
 8002f76:	4059      	eors	r1, r3
 8002f78:	464b      	mov	r3, r9
 8002f7a:	468c      	mov	ip, r1
 8002f7c:	1aeb      	subs	r3, r5, r3
 8002f7e:	428e      	cmp	r6, r1
 8002f80:	d075      	beq.n	800306e <__aeabi_dsub+0x14e>
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	dc00      	bgt.n	8002f88 <__aeabi_dsub+0x68>
 8002f86:	e2a3      	b.n	80034d0 <__aeabi_dsub+0x5b0>
 8002f88:	4649      	mov	r1, r9
 8002f8a:	2900      	cmp	r1, #0
 8002f8c:	d100      	bne.n	8002f90 <__aeabi_dsub+0x70>
 8002f8e:	e0ce      	b.n	800312e <__aeabi_dsub+0x20e>
 8002f90:	42bd      	cmp	r5, r7
 8002f92:	d100      	bne.n	8002f96 <__aeabi_dsub+0x76>
 8002f94:	e200      	b.n	8003398 <__aeabi_dsub+0x478>
 8002f96:	2701      	movs	r7, #1
 8002f98:	2b38      	cmp	r3, #56	@ 0x38
 8002f9a:	dc19      	bgt.n	8002fd0 <__aeabi_dsub+0xb0>
 8002f9c:	2780      	movs	r7, #128	@ 0x80
 8002f9e:	4659      	mov	r1, fp
 8002fa0:	043f      	lsls	r7, r7, #16
 8002fa2:	4339      	orrs	r1, r7
 8002fa4:	468b      	mov	fp, r1
 8002fa6:	2b1f      	cmp	r3, #31
 8002fa8:	dd00      	ble.n	8002fac <__aeabi_dsub+0x8c>
 8002faa:	e1fa      	b.n	80033a2 <__aeabi_dsub+0x482>
 8002fac:	2720      	movs	r7, #32
 8002fae:	1af9      	subs	r1, r7, r3
 8002fb0:	468c      	mov	ip, r1
 8002fb2:	4659      	mov	r1, fp
 8002fb4:	4667      	mov	r7, ip
 8002fb6:	40b9      	lsls	r1, r7
 8002fb8:	000f      	movs	r7, r1
 8002fba:	0011      	movs	r1, r2
 8002fbc:	40d9      	lsrs	r1, r3
 8002fbe:	430f      	orrs	r7, r1
 8002fc0:	4661      	mov	r1, ip
 8002fc2:	408a      	lsls	r2, r1
 8002fc4:	1e51      	subs	r1, r2, #1
 8002fc6:	418a      	sbcs	r2, r1
 8002fc8:	4659      	mov	r1, fp
 8002fca:	40d9      	lsrs	r1, r3
 8002fcc:	4317      	orrs	r7, r2
 8002fce:	1a64      	subs	r4, r4, r1
 8002fd0:	1bc7      	subs	r7, r0, r7
 8002fd2:	42b8      	cmp	r0, r7
 8002fd4:	4180      	sbcs	r0, r0
 8002fd6:	4240      	negs	r0, r0
 8002fd8:	1a24      	subs	r4, r4, r0
 8002fda:	0223      	lsls	r3, r4, #8
 8002fdc:	d400      	bmi.n	8002fe0 <__aeabi_dsub+0xc0>
 8002fde:	e140      	b.n	8003262 <__aeabi_dsub+0x342>
 8002fe0:	0264      	lsls	r4, r4, #9
 8002fe2:	0a64      	lsrs	r4, r4, #9
 8002fe4:	2c00      	cmp	r4, #0
 8002fe6:	d100      	bne.n	8002fea <__aeabi_dsub+0xca>
 8002fe8:	e154      	b.n	8003294 <__aeabi_dsub+0x374>
 8002fea:	0020      	movs	r0, r4
 8002fec:	f000 fd1c 	bl	8003a28 <__clzsi2>
 8002ff0:	0003      	movs	r3, r0
 8002ff2:	3b08      	subs	r3, #8
 8002ff4:	2120      	movs	r1, #32
 8002ff6:	0038      	movs	r0, r7
 8002ff8:	1aca      	subs	r2, r1, r3
 8002ffa:	40d0      	lsrs	r0, r2
 8002ffc:	409c      	lsls	r4, r3
 8002ffe:	0002      	movs	r2, r0
 8003000:	409f      	lsls	r7, r3
 8003002:	4322      	orrs	r2, r4
 8003004:	429d      	cmp	r5, r3
 8003006:	dd00      	ble.n	800300a <__aeabi_dsub+0xea>
 8003008:	e1a6      	b.n	8003358 <__aeabi_dsub+0x438>
 800300a:	1b58      	subs	r0, r3, r5
 800300c:	3001      	adds	r0, #1
 800300e:	1a09      	subs	r1, r1, r0
 8003010:	003c      	movs	r4, r7
 8003012:	408f      	lsls	r7, r1
 8003014:	40c4      	lsrs	r4, r0
 8003016:	1e7b      	subs	r3, r7, #1
 8003018:	419f      	sbcs	r7, r3
 800301a:	0013      	movs	r3, r2
 800301c:	408b      	lsls	r3, r1
 800301e:	4327      	orrs	r7, r4
 8003020:	431f      	orrs	r7, r3
 8003022:	40c2      	lsrs	r2, r0
 8003024:	003b      	movs	r3, r7
 8003026:	0014      	movs	r4, r2
 8003028:	2500      	movs	r5, #0
 800302a:	4313      	orrs	r3, r2
 800302c:	d100      	bne.n	8003030 <__aeabi_dsub+0x110>
 800302e:	e1f7      	b.n	8003420 <__aeabi_dsub+0x500>
 8003030:	077b      	lsls	r3, r7, #29
 8003032:	d100      	bne.n	8003036 <__aeabi_dsub+0x116>
 8003034:	e377      	b.n	8003726 <__aeabi_dsub+0x806>
 8003036:	230f      	movs	r3, #15
 8003038:	0038      	movs	r0, r7
 800303a:	403b      	ands	r3, r7
 800303c:	2b04      	cmp	r3, #4
 800303e:	d004      	beq.n	800304a <__aeabi_dsub+0x12a>
 8003040:	1d38      	adds	r0, r7, #4
 8003042:	42b8      	cmp	r0, r7
 8003044:	41bf      	sbcs	r7, r7
 8003046:	427f      	negs	r7, r7
 8003048:	19e4      	adds	r4, r4, r7
 800304a:	0223      	lsls	r3, r4, #8
 800304c:	d400      	bmi.n	8003050 <__aeabi_dsub+0x130>
 800304e:	e368      	b.n	8003722 <__aeabi_dsub+0x802>
 8003050:	4b8c      	ldr	r3, [pc, #560]	@ (8003284 <__aeabi_dsub+0x364>)
 8003052:	3501      	adds	r5, #1
 8003054:	429d      	cmp	r5, r3
 8003056:	d100      	bne.n	800305a <__aeabi_dsub+0x13a>
 8003058:	e0f4      	b.n	8003244 <__aeabi_dsub+0x324>
 800305a:	4b8b      	ldr	r3, [pc, #556]	@ (8003288 <__aeabi_dsub+0x368>)
 800305c:	056d      	lsls	r5, r5, #21
 800305e:	401c      	ands	r4, r3
 8003060:	0d6d      	lsrs	r5, r5, #21
 8003062:	0767      	lsls	r7, r4, #29
 8003064:	08c0      	lsrs	r0, r0, #3
 8003066:	0264      	lsls	r4, r4, #9
 8003068:	4307      	orrs	r7, r0
 800306a:	0b24      	lsrs	r4, r4, #12
 800306c:	e0ec      	b.n	8003248 <__aeabi_dsub+0x328>
 800306e:	2b00      	cmp	r3, #0
 8003070:	dc00      	bgt.n	8003074 <__aeabi_dsub+0x154>
 8003072:	e329      	b.n	80036c8 <__aeabi_dsub+0x7a8>
 8003074:	4649      	mov	r1, r9
 8003076:	2900      	cmp	r1, #0
 8003078:	d000      	beq.n	800307c <__aeabi_dsub+0x15c>
 800307a:	e0d6      	b.n	800322a <__aeabi_dsub+0x30a>
 800307c:	4659      	mov	r1, fp
 800307e:	4311      	orrs	r1, r2
 8003080:	d100      	bne.n	8003084 <__aeabi_dsub+0x164>
 8003082:	e12e      	b.n	80032e2 <__aeabi_dsub+0x3c2>
 8003084:	1e59      	subs	r1, r3, #1
 8003086:	2b01      	cmp	r3, #1
 8003088:	d100      	bne.n	800308c <__aeabi_dsub+0x16c>
 800308a:	e1e6      	b.n	800345a <__aeabi_dsub+0x53a>
 800308c:	42bb      	cmp	r3, r7
 800308e:	d100      	bne.n	8003092 <__aeabi_dsub+0x172>
 8003090:	e182      	b.n	8003398 <__aeabi_dsub+0x478>
 8003092:	2701      	movs	r7, #1
 8003094:	000b      	movs	r3, r1
 8003096:	2938      	cmp	r1, #56	@ 0x38
 8003098:	dc14      	bgt.n	80030c4 <__aeabi_dsub+0x1a4>
 800309a:	2b1f      	cmp	r3, #31
 800309c:	dd00      	ble.n	80030a0 <__aeabi_dsub+0x180>
 800309e:	e23c      	b.n	800351a <__aeabi_dsub+0x5fa>
 80030a0:	2720      	movs	r7, #32
 80030a2:	1af9      	subs	r1, r7, r3
 80030a4:	468c      	mov	ip, r1
 80030a6:	4659      	mov	r1, fp
 80030a8:	4667      	mov	r7, ip
 80030aa:	40b9      	lsls	r1, r7
 80030ac:	000f      	movs	r7, r1
 80030ae:	0011      	movs	r1, r2
 80030b0:	40d9      	lsrs	r1, r3
 80030b2:	430f      	orrs	r7, r1
 80030b4:	4661      	mov	r1, ip
 80030b6:	408a      	lsls	r2, r1
 80030b8:	1e51      	subs	r1, r2, #1
 80030ba:	418a      	sbcs	r2, r1
 80030bc:	4659      	mov	r1, fp
 80030be:	40d9      	lsrs	r1, r3
 80030c0:	4317      	orrs	r7, r2
 80030c2:	1864      	adds	r4, r4, r1
 80030c4:	183f      	adds	r7, r7, r0
 80030c6:	4287      	cmp	r7, r0
 80030c8:	4180      	sbcs	r0, r0
 80030ca:	4240      	negs	r0, r0
 80030cc:	1824      	adds	r4, r4, r0
 80030ce:	0223      	lsls	r3, r4, #8
 80030d0:	d400      	bmi.n	80030d4 <__aeabi_dsub+0x1b4>
 80030d2:	e0c6      	b.n	8003262 <__aeabi_dsub+0x342>
 80030d4:	4b6b      	ldr	r3, [pc, #428]	@ (8003284 <__aeabi_dsub+0x364>)
 80030d6:	3501      	adds	r5, #1
 80030d8:	429d      	cmp	r5, r3
 80030da:	d100      	bne.n	80030de <__aeabi_dsub+0x1be>
 80030dc:	e0b2      	b.n	8003244 <__aeabi_dsub+0x324>
 80030de:	2101      	movs	r1, #1
 80030e0:	4b69      	ldr	r3, [pc, #420]	@ (8003288 <__aeabi_dsub+0x368>)
 80030e2:	087a      	lsrs	r2, r7, #1
 80030e4:	401c      	ands	r4, r3
 80030e6:	4039      	ands	r1, r7
 80030e8:	430a      	orrs	r2, r1
 80030ea:	07e7      	lsls	r7, r4, #31
 80030ec:	4317      	orrs	r7, r2
 80030ee:	0864      	lsrs	r4, r4, #1
 80030f0:	e79e      	b.n	8003030 <__aeabi_dsub+0x110>
 80030f2:	4b66      	ldr	r3, [pc, #408]	@ (800328c <__aeabi_dsub+0x36c>)
 80030f4:	4311      	orrs	r1, r2
 80030f6:	468a      	mov	sl, r1
 80030f8:	18eb      	adds	r3, r5, r3
 80030fa:	2900      	cmp	r1, #0
 80030fc:	d028      	beq.n	8003150 <__aeabi_dsub+0x230>
 80030fe:	4566      	cmp	r6, ip
 8003100:	d02c      	beq.n	800315c <__aeabi_dsub+0x23c>
 8003102:	2b00      	cmp	r3, #0
 8003104:	d05b      	beq.n	80031be <__aeabi_dsub+0x29e>
 8003106:	2d00      	cmp	r5, #0
 8003108:	d100      	bne.n	800310c <__aeabi_dsub+0x1ec>
 800310a:	e12c      	b.n	8003366 <__aeabi_dsub+0x446>
 800310c:	465b      	mov	r3, fp
 800310e:	4666      	mov	r6, ip
 8003110:	075f      	lsls	r7, r3, #29
 8003112:	08d2      	lsrs	r2, r2, #3
 8003114:	4317      	orrs	r7, r2
 8003116:	08dd      	lsrs	r5, r3, #3
 8003118:	003b      	movs	r3, r7
 800311a:	432b      	orrs	r3, r5
 800311c:	d100      	bne.n	8003120 <__aeabi_dsub+0x200>
 800311e:	e0e2      	b.n	80032e6 <__aeabi_dsub+0x3c6>
 8003120:	2480      	movs	r4, #128	@ 0x80
 8003122:	0324      	lsls	r4, r4, #12
 8003124:	432c      	orrs	r4, r5
 8003126:	0324      	lsls	r4, r4, #12
 8003128:	4d56      	ldr	r5, [pc, #344]	@ (8003284 <__aeabi_dsub+0x364>)
 800312a:	0b24      	lsrs	r4, r4, #12
 800312c:	e08c      	b.n	8003248 <__aeabi_dsub+0x328>
 800312e:	4659      	mov	r1, fp
 8003130:	4311      	orrs	r1, r2
 8003132:	d100      	bne.n	8003136 <__aeabi_dsub+0x216>
 8003134:	e0d5      	b.n	80032e2 <__aeabi_dsub+0x3c2>
 8003136:	1e59      	subs	r1, r3, #1
 8003138:	2b01      	cmp	r3, #1
 800313a:	d100      	bne.n	800313e <__aeabi_dsub+0x21e>
 800313c:	e1b9      	b.n	80034b2 <__aeabi_dsub+0x592>
 800313e:	42bb      	cmp	r3, r7
 8003140:	d100      	bne.n	8003144 <__aeabi_dsub+0x224>
 8003142:	e1b1      	b.n	80034a8 <__aeabi_dsub+0x588>
 8003144:	2701      	movs	r7, #1
 8003146:	000b      	movs	r3, r1
 8003148:	2938      	cmp	r1, #56	@ 0x38
 800314a:	dd00      	ble.n	800314e <__aeabi_dsub+0x22e>
 800314c:	e740      	b.n	8002fd0 <__aeabi_dsub+0xb0>
 800314e:	e72a      	b.n	8002fa6 <__aeabi_dsub+0x86>
 8003150:	4661      	mov	r1, ip
 8003152:	2701      	movs	r7, #1
 8003154:	4079      	eors	r1, r7
 8003156:	468c      	mov	ip, r1
 8003158:	4566      	cmp	r6, ip
 800315a:	d1d2      	bne.n	8003102 <__aeabi_dsub+0x1e2>
 800315c:	2b00      	cmp	r3, #0
 800315e:	d100      	bne.n	8003162 <__aeabi_dsub+0x242>
 8003160:	e0c5      	b.n	80032ee <__aeabi_dsub+0x3ce>
 8003162:	2d00      	cmp	r5, #0
 8003164:	d000      	beq.n	8003168 <__aeabi_dsub+0x248>
 8003166:	e155      	b.n	8003414 <__aeabi_dsub+0x4f4>
 8003168:	464b      	mov	r3, r9
 800316a:	0025      	movs	r5, r4
 800316c:	4305      	orrs	r5, r0
 800316e:	d100      	bne.n	8003172 <__aeabi_dsub+0x252>
 8003170:	e212      	b.n	8003598 <__aeabi_dsub+0x678>
 8003172:	1e59      	subs	r1, r3, #1
 8003174:	468c      	mov	ip, r1
 8003176:	2b01      	cmp	r3, #1
 8003178:	d100      	bne.n	800317c <__aeabi_dsub+0x25c>
 800317a:	e249      	b.n	8003610 <__aeabi_dsub+0x6f0>
 800317c:	4d41      	ldr	r5, [pc, #260]	@ (8003284 <__aeabi_dsub+0x364>)
 800317e:	42ab      	cmp	r3, r5
 8003180:	d100      	bne.n	8003184 <__aeabi_dsub+0x264>
 8003182:	e28f      	b.n	80036a4 <__aeabi_dsub+0x784>
 8003184:	2701      	movs	r7, #1
 8003186:	2938      	cmp	r1, #56	@ 0x38
 8003188:	dc11      	bgt.n	80031ae <__aeabi_dsub+0x28e>
 800318a:	4663      	mov	r3, ip
 800318c:	2b1f      	cmp	r3, #31
 800318e:	dd00      	ble.n	8003192 <__aeabi_dsub+0x272>
 8003190:	e25b      	b.n	800364a <__aeabi_dsub+0x72a>
 8003192:	4661      	mov	r1, ip
 8003194:	2320      	movs	r3, #32
 8003196:	0027      	movs	r7, r4
 8003198:	1a5b      	subs	r3, r3, r1
 800319a:	0005      	movs	r5, r0
 800319c:	4098      	lsls	r0, r3
 800319e:	409f      	lsls	r7, r3
 80031a0:	40cd      	lsrs	r5, r1
 80031a2:	1e43      	subs	r3, r0, #1
 80031a4:	4198      	sbcs	r0, r3
 80031a6:	40cc      	lsrs	r4, r1
 80031a8:	432f      	orrs	r7, r5
 80031aa:	4307      	orrs	r7, r0
 80031ac:	44a3      	add	fp, r4
 80031ae:	18bf      	adds	r7, r7, r2
 80031b0:	4297      	cmp	r7, r2
 80031b2:	4192      	sbcs	r2, r2
 80031b4:	4252      	negs	r2, r2
 80031b6:	445a      	add	r2, fp
 80031b8:	0014      	movs	r4, r2
 80031ba:	464d      	mov	r5, r9
 80031bc:	e787      	b.n	80030ce <__aeabi_dsub+0x1ae>
 80031be:	4f34      	ldr	r7, [pc, #208]	@ (8003290 <__aeabi_dsub+0x370>)
 80031c0:	1c6b      	adds	r3, r5, #1
 80031c2:	423b      	tst	r3, r7
 80031c4:	d000      	beq.n	80031c8 <__aeabi_dsub+0x2a8>
 80031c6:	e0b6      	b.n	8003336 <__aeabi_dsub+0x416>
 80031c8:	4659      	mov	r1, fp
 80031ca:	0023      	movs	r3, r4
 80031cc:	4311      	orrs	r1, r2
 80031ce:	000f      	movs	r7, r1
 80031d0:	4303      	orrs	r3, r0
 80031d2:	2d00      	cmp	r5, #0
 80031d4:	d000      	beq.n	80031d8 <__aeabi_dsub+0x2b8>
 80031d6:	e126      	b.n	8003426 <__aeabi_dsub+0x506>
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d100      	bne.n	80031de <__aeabi_dsub+0x2be>
 80031dc:	e1c0      	b.n	8003560 <__aeabi_dsub+0x640>
 80031de:	2900      	cmp	r1, #0
 80031e0:	d100      	bne.n	80031e4 <__aeabi_dsub+0x2c4>
 80031e2:	e0a1      	b.n	8003328 <__aeabi_dsub+0x408>
 80031e4:	1a83      	subs	r3, r0, r2
 80031e6:	4698      	mov	r8, r3
 80031e8:	465b      	mov	r3, fp
 80031ea:	4540      	cmp	r0, r8
 80031ec:	41ad      	sbcs	r5, r5
 80031ee:	1ae3      	subs	r3, r4, r3
 80031f0:	426d      	negs	r5, r5
 80031f2:	1b5b      	subs	r3, r3, r5
 80031f4:	2580      	movs	r5, #128	@ 0x80
 80031f6:	042d      	lsls	r5, r5, #16
 80031f8:	422b      	tst	r3, r5
 80031fa:	d100      	bne.n	80031fe <__aeabi_dsub+0x2de>
 80031fc:	e14b      	b.n	8003496 <__aeabi_dsub+0x576>
 80031fe:	465b      	mov	r3, fp
 8003200:	1a10      	subs	r0, r2, r0
 8003202:	4282      	cmp	r2, r0
 8003204:	4192      	sbcs	r2, r2
 8003206:	1b1c      	subs	r4, r3, r4
 8003208:	0007      	movs	r7, r0
 800320a:	2601      	movs	r6, #1
 800320c:	4663      	mov	r3, ip
 800320e:	4252      	negs	r2, r2
 8003210:	1aa4      	subs	r4, r4, r2
 8003212:	4327      	orrs	r7, r4
 8003214:	401e      	ands	r6, r3
 8003216:	2f00      	cmp	r7, #0
 8003218:	d100      	bne.n	800321c <__aeabi_dsub+0x2fc>
 800321a:	e142      	b.n	80034a2 <__aeabi_dsub+0x582>
 800321c:	422c      	tst	r4, r5
 800321e:	d100      	bne.n	8003222 <__aeabi_dsub+0x302>
 8003220:	e26d      	b.n	80036fe <__aeabi_dsub+0x7de>
 8003222:	4b19      	ldr	r3, [pc, #100]	@ (8003288 <__aeabi_dsub+0x368>)
 8003224:	2501      	movs	r5, #1
 8003226:	401c      	ands	r4, r3
 8003228:	e71b      	b.n	8003062 <__aeabi_dsub+0x142>
 800322a:	42bd      	cmp	r5, r7
 800322c:	d100      	bne.n	8003230 <__aeabi_dsub+0x310>
 800322e:	e13b      	b.n	80034a8 <__aeabi_dsub+0x588>
 8003230:	2701      	movs	r7, #1
 8003232:	2b38      	cmp	r3, #56	@ 0x38
 8003234:	dd00      	ble.n	8003238 <__aeabi_dsub+0x318>
 8003236:	e745      	b.n	80030c4 <__aeabi_dsub+0x1a4>
 8003238:	2780      	movs	r7, #128	@ 0x80
 800323a:	4659      	mov	r1, fp
 800323c:	043f      	lsls	r7, r7, #16
 800323e:	4339      	orrs	r1, r7
 8003240:	468b      	mov	fp, r1
 8003242:	e72a      	b.n	800309a <__aeabi_dsub+0x17a>
 8003244:	2400      	movs	r4, #0
 8003246:	2700      	movs	r7, #0
 8003248:	052d      	lsls	r5, r5, #20
 800324a:	4325      	orrs	r5, r4
 800324c:	07f6      	lsls	r6, r6, #31
 800324e:	4335      	orrs	r5, r6
 8003250:	0038      	movs	r0, r7
 8003252:	0029      	movs	r1, r5
 8003254:	b003      	add	sp, #12
 8003256:	bcf0      	pop	{r4, r5, r6, r7}
 8003258:	46bb      	mov	fp, r7
 800325a:	46b2      	mov	sl, r6
 800325c:	46a9      	mov	r9, r5
 800325e:	46a0      	mov	r8, r4
 8003260:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003262:	077b      	lsls	r3, r7, #29
 8003264:	d004      	beq.n	8003270 <__aeabi_dsub+0x350>
 8003266:	230f      	movs	r3, #15
 8003268:	403b      	ands	r3, r7
 800326a:	2b04      	cmp	r3, #4
 800326c:	d000      	beq.n	8003270 <__aeabi_dsub+0x350>
 800326e:	e6e7      	b.n	8003040 <__aeabi_dsub+0x120>
 8003270:	002b      	movs	r3, r5
 8003272:	08f8      	lsrs	r0, r7, #3
 8003274:	4a03      	ldr	r2, [pc, #12]	@ (8003284 <__aeabi_dsub+0x364>)
 8003276:	0767      	lsls	r7, r4, #29
 8003278:	4307      	orrs	r7, r0
 800327a:	08e5      	lsrs	r5, r4, #3
 800327c:	4293      	cmp	r3, r2
 800327e:	d100      	bne.n	8003282 <__aeabi_dsub+0x362>
 8003280:	e74a      	b.n	8003118 <__aeabi_dsub+0x1f8>
 8003282:	e0a5      	b.n	80033d0 <__aeabi_dsub+0x4b0>
 8003284:	000007ff 	.word	0x000007ff
 8003288:	ff7fffff 	.word	0xff7fffff
 800328c:	fffff801 	.word	0xfffff801
 8003290:	000007fe 	.word	0x000007fe
 8003294:	0038      	movs	r0, r7
 8003296:	f000 fbc7 	bl	8003a28 <__clzsi2>
 800329a:	0003      	movs	r3, r0
 800329c:	3318      	adds	r3, #24
 800329e:	2b1f      	cmp	r3, #31
 80032a0:	dc00      	bgt.n	80032a4 <__aeabi_dsub+0x384>
 80032a2:	e6a7      	b.n	8002ff4 <__aeabi_dsub+0xd4>
 80032a4:	003a      	movs	r2, r7
 80032a6:	3808      	subs	r0, #8
 80032a8:	4082      	lsls	r2, r0
 80032aa:	429d      	cmp	r5, r3
 80032ac:	dd00      	ble.n	80032b0 <__aeabi_dsub+0x390>
 80032ae:	e08a      	b.n	80033c6 <__aeabi_dsub+0x4a6>
 80032b0:	1b5b      	subs	r3, r3, r5
 80032b2:	1c58      	adds	r0, r3, #1
 80032b4:	281f      	cmp	r0, #31
 80032b6:	dc00      	bgt.n	80032ba <__aeabi_dsub+0x39a>
 80032b8:	e1d8      	b.n	800366c <__aeabi_dsub+0x74c>
 80032ba:	0017      	movs	r7, r2
 80032bc:	3b1f      	subs	r3, #31
 80032be:	40df      	lsrs	r7, r3
 80032c0:	2820      	cmp	r0, #32
 80032c2:	d005      	beq.n	80032d0 <__aeabi_dsub+0x3b0>
 80032c4:	2340      	movs	r3, #64	@ 0x40
 80032c6:	1a1b      	subs	r3, r3, r0
 80032c8:	409a      	lsls	r2, r3
 80032ca:	1e53      	subs	r3, r2, #1
 80032cc:	419a      	sbcs	r2, r3
 80032ce:	4317      	orrs	r7, r2
 80032d0:	2500      	movs	r5, #0
 80032d2:	2f00      	cmp	r7, #0
 80032d4:	d100      	bne.n	80032d8 <__aeabi_dsub+0x3b8>
 80032d6:	e0e5      	b.n	80034a4 <__aeabi_dsub+0x584>
 80032d8:	077b      	lsls	r3, r7, #29
 80032da:	d000      	beq.n	80032de <__aeabi_dsub+0x3be>
 80032dc:	e6ab      	b.n	8003036 <__aeabi_dsub+0x116>
 80032de:	002c      	movs	r4, r5
 80032e0:	e7c6      	b.n	8003270 <__aeabi_dsub+0x350>
 80032e2:	08c0      	lsrs	r0, r0, #3
 80032e4:	e7c6      	b.n	8003274 <__aeabi_dsub+0x354>
 80032e6:	2700      	movs	r7, #0
 80032e8:	2400      	movs	r4, #0
 80032ea:	4dd1      	ldr	r5, [pc, #836]	@ (8003630 <__aeabi_dsub+0x710>)
 80032ec:	e7ac      	b.n	8003248 <__aeabi_dsub+0x328>
 80032ee:	4fd1      	ldr	r7, [pc, #836]	@ (8003634 <__aeabi_dsub+0x714>)
 80032f0:	1c6b      	adds	r3, r5, #1
 80032f2:	423b      	tst	r3, r7
 80032f4:	d171      	bne.n	80033da <__aeabi_dsub+0x4ba>
 80032f6:	0023      	movs	r3, r4
 80032f8:	4303      	orrs	r3, r0
 80032fa:	2d00      	cmp	r5, #0
 80032fc:	d000      	beq.n	8003300 <__aeabi_dsub+0x3e0>
 80032fe:	e14e      	b.n	800359e <__aeabi_dsub+0x67e>
 8003300:	4657      	mov	r7, sl
 8003302:	2b00      	cmp	r3, #0
 8003304:	d100      	bne.n	8003308 <__aeabi_dsub+0x3e8>
 8003306:	e1b5      	b.n	8003674 <__aeabi_dsub+0x754>
 8003308:	2f00      	cmp	r7, #0
 800330a:	d00d      	beq.n	8003328 <__aeabi_dsub+0x408>
 800330c:	1883      	adds	r3, r0, r2
 800330e:	4283      	cmp	r3, r0
 8003310:	4180      	sbcs	r0, r0
 8003312:	445c      	add	r4, fp
 8003314:	4240      	negs	r0, r0
 8003316:	1824      	adds	r4, r4, r0
 8003318:	0222      	lsls	r2, r4, #8
 800331a:	d500      	bpl.n	800331e <__aeabi_dsub+0x3fe>
 800331c:	e1c8      	b.n	80036b0 <__aeabi_dsub+0x790>
 800331e:	001f      	movs	r7, r3
 8003320:	4698      	mov	r8, r3
 8003322:	4327      	orrs	r7, r4
 8003324:	d100      	bne.n	8003328 <__aeabi_dsub+0x408>
 8003326:	e0bc      	b.n	80034a2 <__aeabi_dsub+0x582>
 8003328:	4643      	mov	r3, r8
 800332a:	0767      	lsls	r7, r4, #29
 800332c:	08db      	lsrs	r3, r3, #3
 800332e:	431f      	orrs	r7, r3
 8003330:	08e5      	lsrs	r5, r4, #3
 8003332:	2300      	movs	r3, #0
 8003334:	e04c      	b.n	80033d0 <__aeabi_dsub+0x4b0>
 8003336:	1a83      	subs	r3, r0, r2
 8003338:	4698      	mov	r8, r3
 800333a:	465b      	mov	r3, fp
 800333c:	4540      	cmp	r0, r8
 800333e:	41bf      	sbcs	r7, r7
 8003340:	1ae3      	subs	r3, r4, r3
 8003342:	427f      	negs	r7, r7
 8003344:	1bdb      	subs	r3, r3, r7
 8003346:	021f      	lsls	r7, r3, #8
 8003348:	d47c      	bmi.n	8003444 <__aeabi_dsub+0x524>
 800334a:	4647      	mov	r7, r8
 800334c:	431f      	orrs	r7, r3
 800334e:	d100      	bne.n	8003352 <__aeabi_dsub+0x432>
 8003350:	e0a6      	b.n	80034a0 <__aeabi_dsub+0x580>
 8003352:	001c      	movs	r4, r3
 8003354:	4647      	mov	r7, r8
 8003356:	e645      	b.n	8002fe4 <__aeabi_dsub+0xc4>
 8003358:	4cb7      	ldr	r4, [pc, #732]	@ (8003638 <__aeabi_dsub+0x718>)
 800335a:	1aed      	subs	r5, r5, r3
 800335c:	4014      	ands	r4, r2
 800335e:	077b      	lsls	r3, r7, #29
 8003360:	d000      	beq.n	8003364 <__aeabi_dsub+0x444>
 8003362:	e780      	b.n	8003266 <__aeabi_dsub+0x346>
 8003364:	e784      	b.n	8003270 <__aeabi_dsub+0x350>
 8003366:	464b      	mov	r3, r9
 8003368:	0025      	movs	r5, r4
 800336a:	4305      	orrs	r5, r0
 800336c:	d066      	beq.n	800343c <__aeabi_dsub+0x51c>
 800336e:	1e5f      	subs	r7, r3, #1
 8003370:	2b01      	cmp	r3, #1
 8003372:	d100      	bne.n	8003376 <__aeabi_dsub+0x456>
 8003374:	e0fc      	b.n	8003570 <__aeabi_dsub+0x650>
 8003376:	4dae      	ldr	r5, [pc, #696]	@ (8003630 <__aeabi_dsub+0x710>)
 8003378:	42ab      	cmp	r3, r5
 800337a:	d100      	bne.n	800337e <__aeabi_dsub+0x45e>
 800337c:	e15e      	b.n	800363c <__aeabi_dsub+0x71c>
 800337e:	4666      	mov	r6, ip
 8003380:	2f38      	cmp	r7, #56	@ 0x38
 8003382:	dc00      	bgt.n	8003386 <__aeabi_dsub+0x466>
 8003384:	e0b4      	b.n	80034f0 <__aeabi_dsub+0x5d0>
 8003386:	2001      	movs	r0, #1
 8003388:	1a17      	subs	r7, r2, r0
 800338a:	42ba      	cmp	r2, r7
 800338c:	4192      	sbcs	r2, r2
 800338e:	465b      	mov	r3, fp
 8003390:	4252      	negs	r2, r2
 8003392:	464d      	mov	r5, r9
 8003394:	1a9c      	subs	r4, r3, r2
 8003396:	e620      	b.n	8002fda <__aeabi_dsub+0xba>
 8003398:	0767      	lsls	r7, r4, #29
 800339a:	08c0      	lsrs	r0, r0, #3
 800339c:	4307      	orrs	r7, r0
 800339e:	08e5      	lsrs	r5, r4, #3
 80033a0:	e6ba      	b.n	8003118 <__aeabi_dsub+0x1f8>
 80033a2:	001f      	movs	r7, r3
 80033a4:	4659      	mov	r1, fp
 80033a6:	3f20      	subs	r7, #32
 80033a8:	40f9      	lsrs	r1, r7
 80033aa:	000f      	movs	r7, r1
 80033ac:	2b20      	cmp	r3, #32
 80033ae:	d005      	beq.n	80033bc <__aeabi_dsub+0x49c>
 80033b0:	2140      	movs	r1, #64	@ 0x40
 80033b2:	1acb      	subs	r3, r1, r3
 80033b4:	4659      	mov	r1, fp
 80033b6:	4099      	lsls	r1, r3
 80033b8:	430a      	orrs	r2, r1
 80033ba:	4692      	mov	sl, r2
 80033bc:	4653      	mov	r3, sl
 80033be:	1e5a      	subs	r2, r3, #1
 80033c0:	4193      	sbcs	r3, r2
 80033c2:	431f      	orrs	r7, r3
 80033c4:	e604      	b.n	8002fd0 <__aeabi_dsub+0xb0>
 80033c6:	1aeb      	subs	r3, r5, r3
 80033c8:	4d9b      	ldr	r5, [pc, #620]	@ (8003638 <__aeabi_dsub+0x718>)
 80033ca:	4015      	ands	r5, r2
 80033cc:	076f      	lsls	r7, r5, #29
 80033ce:	08ed      	lsrs	r5, r5, #3
 80033d0:	032c      	lsls	r4, r5, #12
 80033d2:	055d      	lsls	r5, r3, #21
 80033d4:	0b24      	lsrs	r4, r4, #12
 80033d6:	0d6d      	lsrs	r5, r5, #21
 80033d8:	e736      	b.n	8003248 <__aeabi_dsub+0x328>
 80033da:	4d95      	ldr	r5, [pc, #596]	@ (8003630 <__aeabi_dsub+0x710>)
 80033dc:	42ab      	cmp	r3, r5
 80033de:	d100      	bne.n	80033e2 <__aeabi_dsub+0x4c2>
 80033e0:	e0d6      	b.n	8003590 <__aeabi_dsub+0x670>
 80033e2:	1882      	adds	r2, r0, r2
 80033e4:	0021      	movs	r1, r4
 80033e6:	4282      	cmp	r2, r0
 80033e8:	4180      	sbcs	r0, r0
 80033ea:	4459      	add	r1, fp
 80033ec:	4240      	negs	r0, r0
 80033ee:	1808      	adds	r0, r1, r0
 80033f0:	07c7      	lsls	r7, r0, #31
 80033f2:	0852      	lsrs	r2, r2, #1
 80033f4:	4317      	orrs	r7, r2
 80033f6:	0844      	lsrs	r4, r0, #1
 80033f8:	0752      	lsls	r2, r2, #29
 80033fa:	d400      	bmi.n	80033fe <__aeabi_dsub+0x4de>
 80033fc:	e185      	b.n	800370a <__aeabi_dsub+0x7ea>
 80033fe:	220f      	movs	r2, #15
 8003400:	001d      	movs	r5, r3
 8003402:	403a      	ands	r2, r7
 8003404:	2a04      	cmp	r2, #4
 8003406:	d000      	beq.n	800340a <__aeabi_dsub+0x4ea>
 8003408:	e61a      	b.n	8003040 <__aeabi_dsub+0x120>
 800340a:	08ff      	lsrs	r7, r7, #3
 800340c:	0764      	lsls	r4, r4, #29
 800340e:	4327      	orrs	r7, r4
 8003410:	0905      	lsrs	r5, r0, #4
 8003412:	e7dd      	b.n	80033d0 <__aeabi_dsub+0x4b0>
 8003414:	465b      	mov	r3, fp
 8003416:	08d2      	lsrs	r2, r2, #3
 8003418:	075f      	lsls	r7, r3, #29
 800341a:	4317      	orrs	r7, r2
 800341c:	08dd      	lsrs	r5, r3, #3
 800341e:	e67b      	b.n	8003118 <__aeabi_dsub+0x1f8>
 8003420:	2700      	movs	r7, #0
 8003422:	2400      	movs	r4, #0
 8003424:	e710      	b.n	8003248 <__aeabi_dsub+0x328>
 8003426:	2b00      	cmp	r3, #0
 8003428:	d000      	beq.n	800342c <__aeabi_dsub+0x50c>
 800342a:	e0d6      	b.n	80035da <__aeabi_dsub+0x6ba>
 800342c:	2900      	cmp	r1, #0
 800342e:	d000      	beq.n	8003432 <__aeabi_dsub+0x512>
 8003430:	e12f      	b.n	8003692 <__aeabi_dsub+0x772>
 8003432:	2480      	movs	r4, #128	@ 0x80
 8003434:	2600      	movs	r6, #0
 8003436:	4d7e      	ldr	r5, [pc, #504]	@ (8003630 <__aeabi_dsub+0x710>)
 8003438:	0324      	lsls	r4, r4, #12
 800343a:	e705      	b.n	8003248 <__aeabi_dsub+0x328>
 800343c:	4666      	mov	r6, ip
 800343e:	465c      	mov	r4, fp
 8003440:	08d0      	lsrs	r0, r2, #3
 8003442:	e717      	b.n	8003274 <__aeabi_dsub+0x354>
 8003444:	465b      	mov	r3, fp
 8003446:	1a17      	subs	r7, r2, r0
 8003448:	42ba      	cmp	r2, r7
 800344a:	4192      	sbcs	r2, r2
 800344c:	1b1c      	subs	r4, r3, r4
 800344e:	2601      	movs	r6, #1
 8003450:	4663      	mov	r3, ip
 8003452:	4252      	negs	r2, r2
 8003454:	1aa4      	subs	r4, r4, r2
 8003456:	401e      	ands	r6, r3
 8003458:	e5c4      	b.n	8002fe4 <__aeabi_dsub+0xc4>
 800345a:	1883      	adds	r3, r0, r2
 800345c:	4283      	cmp	r3, r0
 800345e:	4180      	sbcs	r0, r0
 8003460:	445c      	add	r4, fp
 8003462:	4240      	negs	r0, r0
 8003464:	1825      	adds	r5, r4, r0
 8003466:	022a      	lsls	r2, r5, #8
 8003468:	d400      	bmi.n	800346c <__aeabi_dsub+0x54c>
 800346a:	e0da      	b.n	8003622 <__aeabi_dsub+0x702>
 800346c:	4a72      	ldr	r2, [pc, #456]	@ (8003638 <__aeabi_dsub+0x718>)
 800346e:	085b      	lsrs	r3, r3, #1
 8003470:	4015      	ands	r5, r2
 8003472:	07ea      	lsls	r2, r5, #31
 8003474:	431a      	orrs	r2, r3
 8003476:	0869      	lsrs	r1, r5, #1
 8003478:	075b      	lsls	r3, r3, #29
 800347a:	d400      	bmi.n	800347e <__aeabi_dsub+0x55e>
 800347c:	e14a      	b.n	8003714 <__aeabi_dsub+0x7f4>
 800347e:	230f      	movs	r3, #15
 8003480:	4013      	ands	r3, r2
 8003482:	2b04      	cmp	r3, #4
 8003484:	d100      	bne.n	8003488 <__aeabi_dsub+0x568>
 8003486:	e0fc      	b.n	8003682 <__aeabi_dsub+0x762>
 8003488:	1d17      	adds	r7, r2, #4
 800348a:	4297      	cmp	r7, r2
 800348c:	41a4      	sbcs	r4, r4
 800348e:	4264      	negs	r4, r4
 8003490:	2502      	movs	r5, #2
 8003492:	1864      	adds	r4, r4, r1
 8003494:	e6ec      	b.n	8003270 <__aeabi_dsub+0x350>
 8003496:	4647      	mov	r7, r8
 8003498:	001c      	movs	r4, r3
 800349a:	431f      	orrs	r7, r3
 800349c:	d000      	beq.n	80034a0 <__aeabi_dsub+0x580>
 800349e:	e743      	b.n	8003328 <__aeabi_dsub+0x408>
 80034a0:	2600      	movs	r6, #0
 80034a2:	2500      	movs	r5, #0
 80034a4:	2400      	movs	r4, #0
 80034a6:	e6cf      	b.n	8003248 <__aeabi_dsub+0x328>
 80034a8:	08c0      	lsrs	r0, r0, #3
 80034aa:	0767      	lsls	r7, r4, #29
 80034ac:	4307      	orrs	r7, r0
 80034ae:	08e5      	lsrs	r5, r4, #3
 80034b0:	e632      	b.n	8003118 <__aeabi_dsub+0x1f8>
 80034b2:	1a87      	subs	r7, r0, r2
 80034b4:	465b      	mov	r3, fp
 80034b6:	42b8      	cmp	r0, r7
 80034b8:	4180      	sbcs	r0, r0
 80034ba:	1ae4      	subs	r4, r4, r3
 80034bc:	4240      	negs	r0, r0
 80034be:	1a24      	subs	r4, r4, r0
 80034c0:	0223      	lsls	r3, r4, #8
 80034c2:	d428      	bmi.n	8003516 <__aeabi_dsub+0x5f6>
 80034c4:	0763      	lsls	r3, r4, #29
 80034c6:	08ff      	lsrs	r7, r7, #3
 80034c8:	431f      	orrs	r7, r3
 80034ca:	08e5      	lsrs	r5, r4, #3
 80034cc:	2301      	movs	r3, #1
 80034ce:	e77f      	b.n	80033d0 <__aeabi_dsub+0x4b0>
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d100      	bne.n	80034d6 <__aeabi_dsub+0x5b6>
 80034d4:	e673      	b.n	80031be <__aeabi_dsub+0x29e>
 80034d6:	464b      	mov	r3, r9
 80034d8:	1b5f      	subs	r7, r3, r5
 80034da:	003b      	movs	r3, r7
 80034dc:	2d00      	cmp	r5, #0
 80034de:	d100      	bne.n	80034e2 <__aeabi_dsub+0x5c2>
 80034e0:	e742      	b.n	8003368 <__aeabi_dsub+0x448>
 80034e2:	2f38      	cmp	r7, #56	@ 0x38
 80034e4:	dd00      	ble.n	80034e8 <__aeabi_dsub+0x5c8>
 80034e6:	e0ec      	b.n	80036c2 <__aeabi_dsub+0x7a2>
 80034e8:	2380      	movs	r3, #128	@ 0x80
 80034ea:	000e      	movs	r6, r1
 80034ec:	041b      	lsls	r3, r3, #16
 80034ee:	431c      	orrs	r4, r3
 80034f0:	2f1f      	cmp	r7, #31
 80034f2:	dc25      	bgt.n	8003540 <__aeabi_dsub+0x620>
 80034f4:	2520      	movs	r5, #32
 80034f6:	0023      	movs	r3, r4
 80034f8:	1bed      	subs	r5, r5, r7
 80034fa:	0001      	movs	r1, r0
 80034fc:	40a8      	lsls	r0, r5
 80034fe:	40ab      	lsls	r3, r5
 8003500:	40f9      	lsrs	r1, r7
 8003502:	1e45      	subs	r5, r0, #1
 8003504:	41a8      	sbcs	r0, r5
 8003506:	430b      	orrs	r3, r1
 8003508:	40fc      	lsrs	r4, r7
 800350a:	4318      	orrs	r0, r3
 800350c:	465b      	mov	r3, fp
 800350e:	1b1b      	subs	r3, r3, r4
 8003510:	469b      	mov	fp, r3
 8003512:	e739      	b.n	8003388 <__aeabi_dsub+0x468>
 8003514:	4666      	mov	r6, ip
 8003516:	2501      	movs	r5, #1
 8003518:	e562      	b.n	8002fe0 <__aeabi_dsub+0xc0>
 800351a:	001f      	movs	r7, r3
 800351c:	4659      	mov	r1, fp
 800351e:	3f20      	subs	r7, #32
 8003520:	40f9      	lsrs	r1, r7
 8003522:	468c      	mov	ip, r1
 8003524:	2b20      	cmp	r3, #32
 8003526:	d005      	beq.n	8003534 <__aeabi_dsub+0x614>
 8003528:	2740      	movs	r7, #64	@ 0x40
 800352a:	4659      	mov	r1, fp
 800352c:	1afb      	subs	r3, r7, r3
 800352e:	4099      	lsls	r1, r3
 8003530:	430a      	orrs	r2, r1
 8003532:	4692      	mov	sl, r2
 8003534:	4657      	mov	r7, sl
 8003536:	1e7b      	subs	r3, r7, #1
 8003538:	419f      	sbcs	r7, r3
 800353a:	4663      	mov	r3, ip
 800353c:	431f      	orrs	r7, r3
 800353e:	e5c1      	b.n	80030c4 <__aeabi_dsub+0x1a4>
 8003540:	003b      	movs	r3, r7
 8003542:	0025      	movs	r5, r4
 8003544:	3b20      	subs	r3, #32
 8003546:	40dd      	lsrs	r5, r3
 8003548:	2f20      	cmp	r7, #32
 800354a:	d004      	beq.n	8003556 <__aeabi_dsub+0x636>
 800354c:	2340      	movs	r3, #64	@ 0x40
 800354e:	1bdb      	subs	r3, r3, r7
 8003550:	409c      	lsls	r4, r3
 8003552:	4320      	orrs	r0, r4
 8003554:	4680      	mov	r8, r0
 8003556:	4640      	mov	r0, r8
 8003558:	1e43      	subs	r3, r0, #1
 800355a:	4198      	sbcs	r0, r3
 800355c:	4328      	orrs	r0, r5
 800355e:	e713      	b.n	8003388 <__aeabi_dsub+0x468>
 8003560:	2900      	cmp	r1, #0
 8003562:	d09d      	beq.n	80034a0 <__aeabi_dsub+0x580>
 8003564:	2601      	movs	r6, #1
 8003566:	4663      	mov	r3, ip
 8003568:	465c      	mov	r4, fp
 800356a:	4690      	mov	r8, r2
 800356c:	401e      	ands	r6, r3
 800356e:	e6db      	b.n	8003328 <__aeabi_dsub+0x408>
 8003570:	1a17      	subs	r7, r2, r0
 8003572:	465b      	mov	r3, fp
 8003574:	42ba      	cmp	r2, r7
 8003576:	4192      	sbcs	r2, r2
 8003578:	1b1c      	subs	r4, r3, r4
 800357a:	4252      	negs	r2, r2
 800357c:	1aa4      	subs	r4, r4, r2
 800357e:	0223      	lsls	r3, r4, #8
 8003580:	d4c8      	bmi.n	8003514 <__aeabi_dsub+0x5f4>
 8003582:	0763      	lsls	r3, r4, #29
 8003584:	08ff      	lsrs	r7, r7, #3
 8003586:	431f      	orrs	r7, r3
 8003588:	4666      	mov	r6, ip
 800358a:	2301      	movs	r3, #1
 800358c:	08e5      	lsrs	r5, r4, #3
 800358e:	e71f      	b.n	80033d0 <__aeabi_dsub+0x4b0>
 8003590:	001d      	movs	r5, r3
 8003592:	2400      	movs	r4, #0
 8003594:	2700      	movs	r7, #0
 8003596:	e657      	b.n	8003248 <__aeabi_dsub+0x328>
 8003598:	465c      	mov	r4, fp
 800359a:	08d0      	lsrs	r0, r2, #3
 800359c:	e66a      	b.n	8003274 <__aeabi_dsub+0x354>
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d100      	bne.n	80035a4 <__aeabi_dsub+0x684>
 80035a2:	e737      	b.n	8003414 <__aeabi_dsub+0x4f4>
 80035a4:	4653      	mov	r3, sl
 80035a6:	08c0      	lsrs	r0, r0, #3
 80035a8:	0767      	lsls	r7, r4, #29
 80035aa:	4307      	orrs	r7, r0
 80035ac:	08e5      	lsrs	r5, r4, #3
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d100      	bne.n	80035b4 <__aeabi_dsub+0x694>
 80035b2:	e5b1      	b.n	8003118 <__aeabi_dsub+0x1f8>
 80035b4:	2380      	movs	r3, #128	@ 0x80
 80035b6:	031b      	lsls	r3, r3, #12
 80035b8:	421d      	tst	r5, r3
 80035ba:	d008      	beq.n	80035ce <__aeabi_dsub+0x6ae>
 80035bc:	4659      	mov	r1, fp
 80035be:	08c8      	lsrs	r0, r1, #3
 80035c0:	4218      	tst	r0, r3
 80035c2:	d104      	bne.n	80035ce <__aeabi_dsub+0x6ae>
 80035c4:	08d2      	lsrs	r2, r2, #3
 80035c6:	0749      	lsls	r1, r1, #29
 80035c8:	430a      	orrs	r2, r1
 80035ca:	0017      	movs	r7, r2
 80035cc:	0005      	movs	r5, r0
 80035ce:	0f7b      	lsrs	r3, r7, #29
 80035d0:	00ff      	lsls	r7, r7, #3
 80035d2:	08ff      	lsrs	r7, r7, #3
 80035d4:	075b      	lsls	r3, r3, #29
 80035d6:	431f      	orrs	r7, r3
 80035d8:	e59e      	b.n	8003118 <__aeabi_dsub+0x1f8>
 80035da:	08c0      	lsrs	r0, r0, #3
 80035dc:	0763      	lsls	r3, r4, #29
 80035de:	4318      	orrs	r0, r3
 80035e0:	08e5      	lsrs	r5, r4, #3
 80035e2:	2900      	cmp	r1, #0
 80035e4:	d053      	beq.n	800368e <__aeabi_dsub+0x76e>
 80035e6:	2380      	movs	r3, #128	@ 0x80
 80035e8:	031b      	lsls	r3, r3, #12
 80035ea:	421d      	tst	r5, r3
 80035ec:	d00a      	beq.n	8003604 <__aeabi_dsub+0x6e4>
 80035ee:	4659      	mov	r1, fp
 80035f0:	08cc      	lsrs	r4, r1, #3
 80035f2:	421c      	tst	r4, r3
 80035f4:	d106      	bne.n	8003604 <__aeabi_dsub+0x6e4>
 80035f6:	2601      	movs	r6, #1
 80035f8:	4663      	mov	r3, ip
 80035fa:	0025      	movs	r5, r4
 80035fc:	08d0      	lsrs	r0, r2, #3
 80035fe:	0749      	lsls	r1, r1, #29
 8003600:	4308      	orrs	r0, r1
 8003602:	401e      	ands	r6, r3
 8003604:	0f47      	lsrs	r7, r0, #29
 8003606:	00c0      	lsls	r0, r0, #3
 8003608:	08c0      	lsrs	r0, r0, #3
 800360a:	077f      	lsls	r7, r7, #29
 800360c:	4307      	orrs	r7, r0
 800360e:	e583      	b.n	8003118 <__aeabi_dsub+0x1f8>
 8003610:	1883      	adds	r3, r0, r2
 8003612:	4293      	cmp	r3, r2
 8003614:	4192      	sbcs	r2, r2
 8003616:	445c      	add	r4, fp
 8003618:	4252      	negs	r2, r2
 800361a:	18a5      	adds	r5, r4, r2
 800361c:	022a      	lsls	r2, r5, #8
 800361e:	d500      	bpl.n	8003622 <__aeabi_dsub+0x702>
 8003620:	e724      	b.n	800346c <__aeabi_dsub+0x54c>
 8003622:	076f      	lsls	r7, r5, #29
 8003624:	08db      	lsrs	r3, r3, #3
 8003626:	431f      	orrs	r7, r3
 8003628:	08ed      	lsrs	r5, r5, #3
 800362a:	2301      	movs	r3, #1
 800362c:	e6d0      	b.n	80033d0 <__aeabi_dsub+0x4b0>
 800362e:	46c0      	nop			@ (mov r8, r8)
 8003630:	000007ff 	.word	0x000007ff
 8003634:	000007fe 	.word	0x000007fe
 8003638:	ff7fffff 	.word	0xff7fffff
 800363c:	465b      	mov	r3, fp
 800363e:	08d2      	lsrs	r2, r2, #3
 8003640:	075f      	lsls	r7, r3, #29
 8003642:	4666      	mov	r6, ip
 8003644:	4317      	orrs	r7, r2
 8003646:	08dd      	lsrs	r5, r3, #3
 8003648:	e566      	b.n	8003118 <__aeabi_dsub+0x1f8>
 800364a:	0025      	movs	r5, r4
 800364c:	3b20      	subs	r3, #32
 800364e:	40dd      	lsrs	r5, r3
 8003650:	4663      	mov	r3, ip
 8003652:	2b20      	cmp	r3, #32
 8003654:	d005      	beq.n	8003662 <__aeabi_dsub+0x742>
 8003656:	2340      	movs	r3, #64	@ 0x40
 8003658:	4661      	mov	r1, ip
 800365a:	1a5b      	subs	r3, r3, r1
 800365c:	409c      	lsls	r4, r3
 800365e:	4320      	orrs	r0, r4
 8003660:	4680      	mov	r8, r0
 8003662:	4647      	mov	r7, r8
 8003664:	1e7b      	subs	r3, r7, #1
 8003666:	419f      	sbcs	r7, r3
 8003668:	432f      	orrs	r7, r5
 800366a:	e5a0      	b.n	80031ae <__aeabi_dsub+0x28e>
 800366c:	2120      	movs	r1, #32
 800366e:	2700      	movs	r7, #0
 8003670:	1a09      	subs	r1, r1, r0
 8003672:	e4d2      	b.n	800301a <__aeabi_dsub+0xfa>
 8003674:	2f00      	cmp	r7, #0
 8003676:	d100      	bne.n	800367a <__aeabi_dsub+0x75a>
 8003678:	e713      	b.n	80034a2 <__aeabi_dsub+0x582>
 800367a:	465c      	mov	r4, fp
 800367c:	0017      	movs	r7, r2
 800367e:	2500      	movs	r5, #0
 8003680:	e5f6      	b.n	8003270 <__aeabi_dsub+0x350>
 8003682:	08d7      	lsrs	r7, r2, #3
 8003684:	0749      	lsls	r1, r1, #29
 8003686:	2302      	movs	r3, #2
 8003688:	430f      	orrs	r7, r1
 800368a:	092d      	lsrs	r5, r5, #4
 800368c:	e6a0      	b.n	80033d0 <__aeabi_dsub+0x4b0>
 800368e:	0007      	movs	r7, r0
 8003690:	e542      	b.n	8003118 <__aeabi_dsub+0x1f8>
 8003692:	465b      	mov	r3, fp
 8003694:	2601      	movs	r6, #1
 8003696:	075f      	lsls	r7, r3, #29
 8003698:	08dd      	lsrs	r5, r3, #3
 800369a:	4663      	mov	r3, ip
 800369c:	08d2      	lsrs	r2, r2, #3
 800369e:	4317      	orrs	r7, r2
 80036a0:	401e      	ands	r6, r3
 80036a2:	e539      	b.n	8003118 <__aeabi_dsub+0x1f8>
 80036a4:	465b      	mov	r3, fp
 80036a6:	08d2      	lsrs	r2, r2, #3
 80036a8:	075f      	lsls	r7, r3, #29
 80036aa:	4317      	orrs	r7, r2
 80036ac:	08dd      	lsrs	r5, r3, #3
 80036ae:	e533      	b.n	8003118 <__aeabi_dsub+0x1f8>
 80036b0:	4a1e      	ldr	r2, [pc, #120]	@ (800372c <__aeabi_dsub+0x80c>)
 80036b2:	08db      	lsrs	r3, r3, #3
 80036b4:	4022      	ands	r2, r4
 80036b6:	0757      	lsls	r7, r2, #29
 80036b8:	0252      	lsls	r2, r2, #9
 80036ba:	2501      	movs	r5, #1
 80036bc:	431f      	orrs	r7, r3
 80036be:	0b14      	lsrs	r4, r2, #12
 80036c0:	e5c2      	b.n	8003248 <__aeabi_dsub+0x328>
 80036c2:	000e      	movs	r6, r1
 80036c4:	2001      	movs	r0, #1
 80036c6:	e65f      	b.n	8003388 <__aeabi_dsub+0x468>
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d00d      	beq.n	80036e8 <__aeabi_dsub+0x7c8>
 80036cc:	464b      	mov	r3, r9
 80036ce:	1b5b      	subs	r3, r3, r5
 80036d0:	469c      	mov	ip, r3
 80036d2:	2d00      	cmp	r5, #0
 80036d4:	d100      	bne.n	80036d8 <__aeabi_dsub+0x7b8>
 80036d6:	e548      	b.n	800316a <__aeabi_dsub+0x24a>
 80036d8:	2701      	movs	r7, #1
 80036da:	2b38      	cmp	r3, #56	@ 0x38
 80036dc:	dd00      	ble.n	80036e0 <__aeabi_dsub+0x7c0>
 80036de:	e566      	b.n	80031ae <__aeabi_dsub+0x28e>
 80036e0:	2380      	movs	r3, #128	@ 0x80
 80036e2:	041b      	lsls	r3, r3, #16
 80036e4:	431c      	orrs	r4, r3
 80036e6:	e550      	b.n	800318a <__aeabi_dsub+0x26a>
 80036e8:	1c6b      	adds	r3, r5, #1
 80036ea:	4d11      	ldr	r5, [pc, #68]	@ (8003730 <__aeabi_dsub+0x810>)
 80036ec:	422b      	tst	r3, r5
 80036ee:	d000      	beq.n	80036f2 <__aeabi_dsub+0x7d2>
 80036f0:	e673      	b.n	80033da <__aeabi_dsub+0x4ba>
 80036f2:	4659      	mov	r1, fp
 80036f4:	0023      	movs	r3, r4
 80036f6:	4311      	orrs	r1, r2
 80036f8:	468a      	mov	sl, r1
 80036fa:	4303      	orrs	r3, r0
 80036fc:	e600      	b.n	8003300 <__aeabi_dsub+0x3e0>
 80036fe:	0767      	lsls	r7, r4, #29
 8003700:	08c0      	lsrs	r0, r0, #3
 8003702:	2300      	movs	r3, #0
 8003704:	4307      	orrs	r7, r0
 8003706:	08e5      	lsrs	r5, r4, #3
 8003708:	e662      	b.n	80033d0 <__aeabi_dsub+0x4b0>
 800370a:	0764      	lsls	r4, r4, #29
 800370c:	08ff      	lsrs	r7, r7, #3
 800370e:	4327      	orrs	r7, r4
 8003710:	0905      	lsrs	r5, r0, #4
 8003712:	e65d      	b.n	80033d0 <__aeabi_dsub+0x4b0>
 8003714:	08d2      	lsrs	r2, r2, #3
 8003716:	0749      	lsls	r1, r1, #29
 8003718:	4311      	orrs	r1, r2
 800371a:	000f      	movs	r7, r1
 800371c:	2302      	movs	r3, #2
 800371e:	092d      	lsrs	r5, r5, #4
 8003720:	e656      	b.n	80033d0 <__aeabi_dsub+0x4b0>
 8003722:	0007      	movs	r7, r0
 8003724:	e5a4      	b.n	8003270 <__aeabi_dsub+0x350>
 8003726:	0038      	movs	r0, r7
 8003728:	e48f      	b.n	800304a <__aeabi_dsub+0x12a>
 800372a:	46c0      	nop			@ (mov r8, r8)
 800372c:	ff7fffff 	.word	0xff7fffff
 8003730:	000007fe 	.word	0x000007fe

08003734 <__aeabi_dcmpun>:
 8003734:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003736:	46c6      	mov	lr, r8
 8003738:	031e      	lsls	r6, r3, #12
 800373a:	0b36      	lsrs	r6, r6, #12
 800373c:	46b0      	mov	r8, r6
 800373e:	4e0d      	ldr	r6, [pc, #52]	@ (8003774 <__aeabi_dcmpun+0x40>)
 8003740:	030c      	lsls	r4, r1, #12
 8003742:	004d      	lsls	r5, r1, #1
 8003744:	005f      	lsls	r7, r3, #1
 8003746:	b500      	push	{lr}
 8003748:	0b24      	lsrs	r4, r4, #12
 800374a:	0d6d      	lsrs	r5, r5, #21
 800374c:	0d7f      	lsrs	r7, r7, #21
 800374e:	42b5      	cmp	r5, r6
 8003750:	d00b      	beq.n	800376a <__aeabi_dcmpun+0x36>
 8003752:	4908      	ldr	r1, [pc, #32]	@ (8003774 <__aeabi_dcmpun+0x40>)
 8003754:	2000      	movs	r0, #0
 8003756:	428f      	cmp	r7, r1
 8003758:	d104      	bne.n	8003764 <__aeabi_dcmpun+0x30>
 800375a:	4646      	mov	r6, r8
 800375c:	4316      	orrs	r6, r2
 800375e:	0030      	movs	r0, r6
 8003760:	1e43      	subs	r3, r0, #1
 8003762:	4198      	sbcs	r0, r3
 8003764:	bc80      	pop	{r7}
 8003766:	46b8      	mov	r8, r7
 8003768:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800376a:	4304      	orrs	r4, r0
 800376c:	2001      	movs	r0, #1
 800376e:	2c00      	cmp	r4, #0
 8003770:	d1f8      	bne.n	8003764 <__aeabi_dcmpun+0x30>
 8003772:	e7ee      	b.n	8003752 <__aeabi_dcmpun+0x1e>
 8003774:	000007ff 	.word	0x000007ff

08003778 <__aeabi_d2iz>:
 8003778:	000b      	movs	r3, r1
 800377a:	0002      	movs	r2, r0
 800377c:	b570      	push	{r4, r5, r6, lr}
 800377e:	4d16      	ldr	r5, [pc, #88]	@ (80037d8 <__aeabi_d2iz+0x60>)
 8003780:	030c      	lsls	r4, r1, #12
 8003782:	b082      	sub	sp, #8
 8003784:	0049      	lsls	r1, r1, #1
 8003786:	2000      	movs	r0, #0
 8003788:	9200      	str	r2, [sp, #0]
 800378a:	9301      	str	r3, [sp, #4]
 800378c:	0b24      	lsrs	r4, r4, #12
 800378e:	0d49      	lsrs	r1, r1, #21
 8003790:	0fde      	lsrs	r6, r3, #31
 8003792:	42a9      	cmp	r1, r5
 8003794:	dd04      	ble.n	80037a0 <__aeabi_d2iz+0x28>
 8003796:	4811      	ldr	r0, [pc, #68]	@ (80037dc <__aeabi_d2iz+0x64>)
 8003798:	4281      	cmp	r1, r0
 800379a:	dd03      	ble.n	80037a4 <__aeabi_d2iz+0x2c>
 800379c:	4b10      	ldr	r3, [pc, #64]	@ (80037e0 <__aeabi_d2iz+0x68>)
 800379e:	18f0      	adds	r0, r6, r3
 80037a0:	b002      	add	sp, #8
 80037a2:	bd70      	pop	{r4, r5, r6, pc}
 80037a4:	2080      	movs	r0, #128	@ 0x80
 80037a6:	0340      	lsls	r0, r0, #13
 80037a8:	4320      	orrs	r0, r4
 80037aa:	4c0e      	ldr	r4, [pc, #56]	@ (80037e4 <__aeabi_d2iz+0x6c>)
 80037ac:	1a64      	subs	r4, r4, r1
 80037ae:	2c1f      	cmp	r4, #31
 80037b0:	dd08      	ble.n	80037c4 <__aeabi_d2iz+0x4c>
 80037b2:	4b0d      	ldr	r3, [pc, #52]	@ (80037e8 <__aeabi_d2iz+0x70>)
 80037b4:	1a5b      	subs	r3, r3, r1
 80037b6:	40d8      	lsrs	r0, r3
 80037b8:	0003      	movs	r3, r0
 80037ba:	4258      	negs	r0, r3
 80037bc:	2e00      	cmp	r6, #0
 80037be:	d1ef      	bne.n	80037a0 <__aeabi_d2iz+0x28>
 80037c0:	0018      	movs	r0, r3
 80037c2:	e7ed      	b.n	80037a0 <__aeabi_d2iz+0x28>
 80037c4:	4b09      	ldr	r3, [pc, #36]	@ (80037ec <__aeabi_d2iz+0x74>)
 80037c6:	9a00      	ldr	r2, [sp, #0]
 80037c8:	469c      	mov	ip, r3
 80037ca:	0003      	movs	r3, r0
 80037cc:	4461      	add	r1, ip
 80037ce:	408b      	lsls	r3, r1
 80037d0:	40e2      	lsrs	r2, r4
 80037d2:	4313      	orrs	r3, r2
 80037d4:	e7f1      	b.n	80037ba <__aeabi_d2iz+0x42>
 80037d6:	46c0      	nop			@ (mov r8, r8)
 80037d8:	000003fe 	.word	0x000003fe
 80037dc:	0000041d 	.word	0x0000041d
 80037e0:	7fffffff 	.word	0x7fffffff
 80037e4:	00000433 	.word	0x00000433
 80037e8:	00000413 	.word	0x00000413
 80037ec:	fffffbed 	.word	0xfffffbed

080037f0 <__aeabi_i2d>:
 80037f0:	b570      	push	{r4, r5, r6, lr}
 80037f2:	2800      	cmp	r0, #0
 80037f4:	d016      	beq.n	8003824 <__aeabi_i2d+0x34>
 80037f6:	17c3      	asrs	r3, r0, #31
 80037f8:	18c5      	adds	r5, r0, r3
 80037fa:	405d      	eors	r5, r3
 80037fc:	0fc4      	lsrs	r4, r0, #31
 80037fe:	0028      	movs	r0, r5
 8003800:	f000 f912 	bl	8003a28 <__clzsi2>
 8003804:	4b10      	ldr	r3, [pc, #64]	@ (8003848 <__aeabi_i2d+0x58>)
 8003806:	1a1b      	subs	r3, r3, r0
 8003808:	055b      	lsls	r3, r3, #21
 800380a:	0d5b      	lsrs	r3, r3, #21
 800380c:	280a      	cmp	r0, #10
 800380e:	dc14      	bgt.n	800383a <__aeabi_i2d+0x4a>
 8003810:	0002      	movs	r2, r0
 8003812:	002e      	movs	r6, r5
 8003814:	3215      	adds	r2, #21
 8003816:	4096      	lsls	r6, r2
 8003818:	220b      	movs	r2, #11
 800381a:	1a12      	subs	r2, r2, r0
 800381c:	40d5      	lsrs	r5, r2
 800381e:	032d      	lsls	r5, r5, #12
 8003820:	0b2d      	lsrs	r5, r5, #12
 8003822:	e003      	b.n	800382c <__aeabi_i2d+0x3c>
 8003824:	2400      	movs	r4, #0
 8003826:	2300      	movs	r3, #0
 8003828:	2500      	movs	r5, #0
 800382a:	2600      	movs	r6, #0
 800382c:	051b      	lsls	r3, r3, #20
 800382e:	432b      	orrs	r3, r5
 8003830:	07e4      	lsls	r4, r4, #31
 8003832:	4323      	orrs	r3, r4
 8003834:	0030      	movs	r0, r6
 8003836:	0019      	movs	r1, r3
 8003838:	bd70      	pop	{r4, r5, r6, pc}
 800383a:	380b      	subs	r0, #11
 800383c:	4085      	lsls	r5, r0
 800383e:	032d      	lsls	r5, r5, #12
 8003840:	2600      	movs	r6, #0
 8003842:	0b2d      	lsrs	r5, r5, #12
 8003844:	e7f2      	b.n	800382c <__aeabi_i2d+0x3c>
 8003846:	46c0      	nop			@ (mov r8, r8)
 8003848:	0000041e 	.word	0x0000041e

0800384c <__aeabi_ui2d>:
 800384c:	b510      	push	{r4, lr}
 800384e:	1e04      	subs	r4, r0, #0
 8003850:	d010      	beq.n	8003874 <__aeabi_ui2d+0x28>
 8003852:	f000 f8e9 	bl	8003a28 <__clzsi2>
 8003856:	4b0e      	ldr	r3, [pc, #56]	@ (8003890 <__aeabi_ui2d+0x44>)
 8003858:	1a1b      	subs	r3, r3, r0
 800385a:	055b      	lsls	r3, r3, #21
 800385c:	0d5b      	lsrs	r3, r3, #21
 800385e:	280a      	cmp	r0, #10
 8003860:	dc0f      	bgt.n	8003882 <__aeabi_ui2d+0x36>
 8003862:	220b      	movs	r2, #11
 8003864:	0021      	movs	r1, r4
 8003866:	1a12      	subs	r2, r2, r0
 8003868:	40d1      	lsrs	r1, r2
 800386a:	3015      	adds	r0, #21
 800386c:	030a      	lsls	r2, r1, #12
 800386e:	4084      	lsls	r4, r0
 8003870:	0b12      	lsrs	r2, r2, #12
 8003872:	e001      	b.n	8003878 <__aeabi_ui2d+0x2c>
 8003874:	2300      	movs	r3, #0
 8003876:	2200      	movs	r2, #0
 8003878:	051b      	lsls	r3, r3, #20
 800387a:	4313      	orrs	r3, r2
 800387c:	0020      	movs	r0, r4
 800387e:	0019      	movs	r1, r3
 8003880:	bd10      	pop	{r4, pc}
 8003882:	0022      	movs	r2, r4
 8003884:	380b      	subs	r0, #11
 8003886:	4082      	lsls	r2, r0
 8003888:	0312      	lsls	r2, r2, #12
 800388a:	2400      	movs	r4, #0
 800388c:	0b12      	lsrs	r2, r2, #12
 800388e:	e7f3      	b.n	8003878 <__aeabi_ui2d+0x2c>
 8003890:	0000041e 	.word	0x0000041e

08003894 <__aeabi_f2d>:
 8003894:	b570      	push	{r4, r5, r6, lr}
 8003896:	0242      	lsls	r2, r0, #9
 8003898:	0043      	lsls	r3, r0, #1
 800389a:	0fc4      	lsrs	r4, r0, #31
 800389c:	20fe      	movs	r0, #254	@ 0xfe
 800389e:	0e1b      	lsrs	r3, r3, #24
 80038a0:	1c59      	adds	r1, r3, #1
 80038a2:	0a55      	lsrs	r5, r2, #9
 80038a4:	4208      	tst	r0, r1
 80038a6:	d00c      	beq.n	80038c2 <__aeabi_f2d+0x2e>
 80038a8:	21e0      	movs	r1, #224	@ 0xe0
 80038aa:	0089      	lsls	r1, r1, #2
 80038ac:	468c      	mov	ip, r1
 80038ae:	076d      	lsls	r5, r5, #29
 80038b0:	0b12      	lsrs	r2, r2, #12
 80038b2:	4463      	add	r3, ip
 80038b4:	051b      	lsls	r3, r3, #20
 80038b6:	4313      	orrs	r3, r2
 80038b8:	07e4      	lsls	r4, r4, #31
 80038ba:	4323      	orrs	r3, r4
 80038bc:	0028      	movs	r0, r5
 80038be:	0019      	movs	r1, r3
 80038c0:	bd70      	pop	{r4, r5, r6, pc}
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d114      	bne.n	80038f0 <__aeabi_f2d+0x5c>
 80038c6:	2d00      	cmp	r5, #0
 80038c8:	d01b      	beq.n	8003902 <__aeabi_f2d+0x6e>
 80038ca:	0028      	movs	r0, r5
 80038cc:	f000 f8ac 	bl	8003a28 <__clzsi2>
 80038d0:	280a      	cmp	r0, #10
 80038d2:	dc1c      	bgt.n	800390e <__aeabi_f2d+0x7a>
 80038d4:	230b      	movs	r3, #11
 80038d6:	002a      	movs	r2, r5
 80038d8:	1a1b      	subs	r3, r3, r0
 80038da:	40da      	lsrs	r2, r3
 80038dc:	0003      	movs	r3, r0
 80038de:	3315      	adds	r3, #21
 80038e0:	409d      	lsls	r5, r3
 80038e2:	4b0e      	ldr	r3, [pc, #56]	@ (800391c <__aeabi_f2d+0x88>)
 80038e4:	0312      	lsls	r2, r2, #12
 80038e6:	1a1b      	subs	r3, r3, r0
 80038e8:	055b      	lsls	r3, r3, #21
 80038ea:	0b12      	lsrs	r2, r2, #12
 80038ec:	0d5b      	lsrs	r3, r3, #21
 80038ee:	e7e1      	b.n	80038b4 <__aeabi_f2d+0x20>
 80038f0:	2d00      	cmp	r5, #0
 80038f2:	d009      	beq.n	8003908 <__aeabi_f2d+0x74>
 80038f4:	0b13      	lsrs	r3, r2, #12
 80038f6:	2280      	movs	r2, #128	@ 0x80
 80038f8:	0312      	lsls	r2, r2, #12
 80038fa:	431a      	orrs	r2, r3
 80038fc:	076d      	lsls	r5, r5, #29
 80038fe:	4b08      	ldr	r3, [pc, #32]	@ (8003920 <__aeabi_f2d+0x8c>)
 8003900:	e7d8      	b.n	80038b4 <__aeabi_f2d+0x20>
 8003902:	2300      	movs	r3, #0
 8003904:	2200      	movs	r2, #0
 8003906:	e7d5      	b.n	80038b4 <__aeabi_f2d+0x20>
 8003908:	2200      	movs	r2, #0
 800390a:	4b05      	ldr	r3, [pc, #20]	@ (8003920 <__aeabi_f2d+0x8c>)
 800390c:	e7d2      	b.n	80038b4 <__aeabi_f2d+0x20>
 800390e:	0003      	movs	r3, r0
 8003910:	002a      	movs	r2, r5
 8003912:	3b0b      	subs	r3, #11
 8003914:	409a      	lsls	r2, r3
 8003916:	2500      	movs	r5, #0
 8003918:	e7e3      	b.n	80038e2 <__aeabi_f2d+0x4e>
 800391a:	46c0      	nop			@ (mov r8, r8)
 800391c:	00000389 	.word	0x00000389
 8003920:	000007ff 	.word	0x000007ff

08003924 <__aeabi_d2f>:
 8003924:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003926:	004b      	lsls	r3, r1, #1
 8003928:	030f      	lsls	r7, r1, #12
 800392a:	0d5b      	lsrs	r3, r3, #21
 800392c:	4c3a      	ldr	r4, [pc, #232]	@ (8003a18 <__aeabi_d2f+0xf4>)
 800392e:	0f45      	lsrs	r5, r0, #29
 8003930:	b083      	sub	sp, #12
 8003932:	0a7f      	lsrs	r7, r7, #9
 8003934:	1c5e      	adds	r6, r3, #1
 8003936:	432f      	orrs	r7, r5
 8003938:	9000      	str	r0, [sp, #0]
 800393a:	9101      	str	r1, [sp, #4]
 800393c:	0fca      	lsrs	r2, r1, #31
 800393e:	00c5      	lsls	r5, r0, #3
 8003940:	4226      	tst	r6, r4
 8003942:	d00b      	beq.n	800395c <__aeabi_d2f+0x38>
 8003944:	4935      	ldr	r1, [pc, #212]	@ (8003a1c <__aeabi_d2f+0xf8>)
 8003946:	185c      	adds	r4, r3, r1
 8003948:	2cfe      	cmp	r4, #254	@ 0xfe
 800394a:	dd13      	ble.n	8003974 <__aeabi_d2f+0x50>
 800394c:	20ff      	movs	r0, #255	@ 0xff
 800394e:	2300      	movs	r3, #0
 8003950:	05c0      	lsls	r0, r0, #23
 8003952:	4318      	orrs	r0, r3
 8003954:	07d2      	lsls	r2, r2, #31
 8003956:	4310      	orrs	r0, r2
 8003958:	b003      	add	sp, #12
 800395a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800395c:	433d      	orrs	r5, r7
 800395e:	2b00      	cmp	r3, #0
 8003960:	d101      	bne.n	8003966 <__aeabi_d2f+0x42>
 8003962:	2000      	movs	r0, #0
 8003964:	e7f4      	b.n	8003950 <__aeabi_d2f+0x2c>
 8003966:	2d00      	cmp	r5, #0
 8003968:	d0f0      	beq.n	800394c <__aeabi_d2f+0x28>
 800396a:	2380      	movs	r3, #128	@ 0x80
 800396c:	03db      	lsls	r3, r3, #15
 800396e:	20ff      	movs	r0, #255	@ 0xff
 8003970:	433b      	orrs	r3, r7
 8003972:	e7ed      	b.n	8003950 <__aeabi_d2f+0x2c>
 8003974:	2c00      	cmp	r4, #0
 8003976:	dd0c      	ble.n	8003992 <__aeabi_d2f+0x6e>
 8003978:	9b00      	ldr	r3, [sp, #0]
 800397a:	00ff      	lsls	r7, r7, #3
 800397c:	019b      	lsls	r3, r3, #6
 800397e:	1e58      	subs	r0, r3, #1
 8003980:	4183      	sbcs	r3, r0
 8003982:	0f69      	lsrs	r1, r5, #29
 8003984:	433b      	orrs	r3, r7
 8003986:	430b      	orrs	r3, r1
 8003988:	0759      	lsls	r1, r3, #29
 800398a:	d127      	bne.n	80039dc <__aeabi_d2f+0xb8>
 800398c:	08db      	lsrs	r3, r3, #3
 800398e:	b2e0      	uxtb	r0, r4
 8003990:	e7de      	b.n	8003950 <__aeabi_d2f+0x2c>
 8003992:	0021      	movs	r1, r4
 8003994:	3117      	adds	r1, #23
 8003996:	db31      	blt.n	80039fc <__aeabi_d2f+0xd8>
 8003998:	2180      	movs	r1, #128	@ 0x80
 800399a:	201e      	movs	r0, #30
 800399c:	0409      	lsls	r1, r1, #16
 800399e:	4339      	orrs	r1, r7
 80039a0:	1b00      	subs	r0, r0, r4
 80039a2:	281f      	cmp	r0, #31
 80039a4:	dd2d      	ble.n	8003a02 <__aeabi_d2f+0xde>
 80039a6:	2602      	movs	r6, #2
 80039a8:	4276      	negs	r6, r6
 80039aa:	1b34      	subs	r4, r6, r4
 80039ac:	000e      	movs	r6, r1
 80039ae:	40e6      	lsrs	r6, r4
 80039b0:	0034      	movs	r4, r6
 80039b2:	2820      	cmp	r0, #32
 80039b4:	d004      	beq.n	80039c0 <__aeabi_d2f+0x9c>
 80039b6:	481a      	ldr	r0, [pc, #104]	@ (8003a20 <__aeabi_d2f+0xfc>)
 80039b8:	4684      	mov	ip, r0
 80039ba:	4463      	add	r3, ip
 80039bc:	4099      	lsls	r1, r3
 80039be:	430d      	orrs	r5, r1
 80039c0:	002b      	movs	r3, r5
 80039c2:	1e59      	subs	r1, r3, #1
 80039c4:	418b      	sbcs	r3, r1
 80039c6:	4323      	orrs	r3, r4
 80039c8:	0759      	lsls	r1, r3, #29
 80039ca:	d003      	beq.n	80039d4 <__aeabi_d2f+0xb0>
 80039cc:	210f      	movs	r1, #15
 80039ce:	4019      	ands	r1, r3
 80039d0:	2904      	cmp	r1, #4
 80039d2:	d10b      	bne.n	80039ec <__aeabi_d2f+0xc8>
 80039d4:	019b      	lsls	r3, r3, #6
 80039d6:	2000      	movs	r0, #0
 80039d8:	0a5b      	lsrs	r3, r3, #9
 80039da:	e7b9      	b.n	8003950 <__aeabi_d2f+0x2c>
 80039dc:	210f      	movs	r1, #15
 80039de:	4019      	ands	r1, r3
 80039e0:	2904      	cmp	r1, #4
 80039e2:	d104      	bne.n	80039ee <__aeabi_d2f+0xca>
 80039e4:	019b      	lsls	r3, r3, #6
 80039e6:	0a5b      	lsrs	r3, r3, #9
 80039e8:	b2e0      	uxtb	r0, r4
 80039ea:	e7b1      	b.n	8003950 <__aeabi_d2f+0x2c>
 80039ec:	2400      	movs	r4, #0
 80039ee:	3304      	adds	r3, #4
 80039f0:	0159      	lsls	r1, r3, #5
 80039f2:	d5f7      	bpl.n	80039e4 <__aeabi_d2f+0xc0>
 80039f4:	3401      	adds	r4, #1
 80039f6:	2300      	movs	r3, #0
 80039f8:	b2e0      	uxtb	r0, r4
 80039fa:	e7a9      	b.n	8003950 <__aeabi_d2f+0x2c>
 80039fc:	2000      	movs	r0, #0
 80039fe:	2300      	movs	r3, #0
 8003a00:	e7a6      	b.n	8003950 <__aeabi_d2f+0x2c>
 8003a02:	4c08      	ldr	r4, [pc, #32]	@ (8003a24 <__aeabi_d2f+0x100>)
 8003a04:	191c      	adds	r4, r3, r4
 8003a06:	002b      	movs	r3, r5
 8003a08:	40a5      	lsls	r5, r4
 8003a0a:	40c3      	lsrs	r3, r0
 8003a0c:	40a1      	lsls	r1, r4
 8003a0e:	1e68      	subs	r0, r5, #1
 8003a10:	4185      	sbcs	r5, r0
 8003a12:	4329      	orrs	r1, r5
 8003a14:	430b      	orrs	r3, r1
 8003a16:	e7d7      	b.n	80039c8 <__aeabi_d2f+0xa4>
 8003a18:	000007fe 	.word	0x000007fe
 8003a1c:	fffffc80 	.word	0xfffffc80
 8003a20:	fffffca2 	.word	0xfffffca2
 8003a24:	fffffc82 	.word	0xfffffc82

08003a28 <__clzsi2>:
 8003a28:	211c      	movs	r1, #28
 8003a2a:	2301      	movs	r3, #1
 8003a2c:	041b      	lsls	r3, r3, #16
 8003a2e:	4298      	cmp	r0, r3
 8003a30:	d301      	bcc.n	8003a36 <__clzsi2+0xe>
 8003a32:	0c00      	lsrs	r0, r0, #16
 8003a34:	3910      	subs	r1, #16
 8003a36:	0a1b      	lsrs	r3, r3, #8
 8003a38:	4298      	cmp	r0, r3
 8003a3a:	d301      	bcc.n	8003a40 <__clzsi2+0x18>
 8003a3c:	0a00      	lsrs	r0, r0, #8
 8003a3e:	3908      	subs	r1, #8
 8003a40:	091b      	lsrs	r3, r3, #4
 8003a42:	4298      	cmp	r0, r3
 8003a44:	d301      	bcc.n	8003a4a <__clzsi2+0x22>
 8003a46:	0900      	lsrs	r0, r0, #4
 8003a48:	3904      	subs	r1, #4
 8003a4a:	a202      	add	r2, pc, #8	@ (adr r2, 8003a54 <__clzsi2+0x2c>)
 8003a4c:	5c10      	ldrb	r0, [r2, r0]
 8003a4e:	1840      	adds	r0, r0, r1
 8003a50:	4770      	bx	lr
 8003a52:	46c0      	nop			@ (mov r8, r8)
 8003a54:	02020304 	.word	0x02020304
 8003a58:	01010101 	.word	0x01010101
	...

08003a64 <__clzdi2>:
 8003a64:	b510      	push	{r4, lr}
 8003a66:	2900      	cmp	r1, #0
 8003a68:	d103      	bne.n	8003a72 <__clzdi2+0xe>
 8003a6a:	f7ff ffdd 	bl	8003a28 <__clzsi2>
 8003a6e:	3020      	adds	r0, #32
 8003a70:	e002      	b.n	8003a78 <__clzdi2+0x14>
 8003a72:	0008      	movs	r0, r1
 8003a74:	f7ff ffd8 	bl	8003a28 <__clzsi2>
 8003a78:	bd10      	pop	{r4, pc}
 8003a7a:	46c0      	nop			@ (mov r8, r8)

08003a7c <WriteMemRegister>:
ENS160raw raw;
ENS160prediction pred;
ENS160hwsw hwsw;
ENS160State ENSState = ENS_STATE_INIT;

static bool WriteMemRegister(uint16_t MemAddress, uint16_t MemSize, uint8_t* buffer, uint16_t nrBytes) {
 8003a7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003a7e:	b087      	sub	sp, #28
 8003a80:	af02      	add	r7, sp, #8
 8003a82:	0004      	movs	r4, r0
 8003a84:	0008      	movs	r0, r1
 8003a86:	60ba      	str	r2, [r7, #8]
 8003a88:	0019      	movs	r1, r3
 8003a8a:	260e      	movs	r6, #14
 8003a8c:	19bb      	adds	r3, r7, r6
 8003a8e:	1c22      	adds	r2, r4, #0
 8003a90:	801a      	strh	r2, [r3, #0]
 8003a92:	230c      	movs	r3, #12
 8003a94:	18fb      	adds	r3, r7, r3
 8003a96:	1c02      	adds	r2, r0, #0
 8003a98:	801a      	strh	r2, [r3, #0]
 8003a9a:	1dbb      	adds	r3, r7, #6
 8003a9c:	1c0a      	adds	r2, r1, #0
 8003a9e:	801a      	strh	r2, [r3, #0]
  if (WriteMemFunction != NULL) {
 8003aa0:	4b0c      	ldr	r3, [pc, #48]	@ (8003ad4 <WriteMemRegister+0x58>)
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d010      	beq.n	8003aca <WriteMemRegister+0x4e>
    return WriteMemFunction(hwsw._slaveaddr, MemAddress, MemSize, buffer, nrBytes);
 8003aa8:	4b0a      	ldr	r3, [pc, #40]	@ (8003ad4 <WriteMemRegister+0x58>)
 8003aaa:	681c      	ldr	r4, [r3, #0]
 8003aac:	4b0a      	ldr	r3, [pc, #40]	@ (8003ad8 <WriteMemRegister+0x5c>)
 8003aae:	7918      	ldrb	r0, [r3, #4]
 8003ab0:	68bd      	ldr	r5, [r7, #8]
 8003ab2:	230c      	movs	r3, #12
 8003ab4:	18fb      	adds	r3, r7, r3
 8003ab6:	881a      	ldrh	r2, [r3, #0]
 8003ab8:	19bb      	adds	r3, r7, r6
 8003aba:	8819      	ldrh	r1, [r3, #0]
 8003abc:	1dbb      	adds	r3, r7, #6
 8003abe:	881b      	ldrh	r3, [r3, #0]
 8003ac0:	9300      	str	r3, [sp, #0]
 8003ac2:	002b      	movs	r3, r5
 8003ac4:	47a0      	blx	r4
 8003ac6:	0003      	movs	r3, r0
 8003ac8:	e000      	b.n	8003acc <WriteMemRegister+0x50>
  }
  return false;
 8003aca:	2300      	movs	r3, #0
}
 8003acc:	0018      	movs	r0, r3
 8003ace:	46bd      	mov	sp, r7
 8003ad0:	b005      	add	sp, #20
 8003ad2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003ad4:	20000468 	.word	0x20000468
 8003ad8:	20000498 	.word	0x20000498

08003adc <ReadMemRegister>:

static bool ReadMemRegister(uint16_t MemAddress, uint16_t MemSize, uint8_t* buffer, uint16_t nrBytes) {
 8003adc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003ade:	b087      	sub	sp, #28
 8003ae0:	af02      	add	r7, sp, #8
 8003ae2:	0004      	movs	r4, r0
 8003ae4:	0008      	movs	r0, r1
 8003ae6:	60ba      	str	r2, [r7, #8]
 8003ae8:	0019      	movs	r1, r3
 8003aea:	260e      	movs	r6, #14
 8003aec:	19bb      	adds	r3, r7, r6
 8003aee:	1c22      	adds	r2, r4, #0
 8003af0:	801a      	strh	r2, [r3, #0]
 8003af2:	230c      	movs	r3, #12
 8003af4:	18fb      	adds	r3, r7, r3
 8003af6:	1c02      	adds	r2, r0, #0
 8003af8:	801a      	strh	r2, [r3, #0]
 8003afa:	1dbb      	adds	r3, r7, #6
 8003afc:	1c0a      	adds	r2, r1, #0
 8003afe:	801a      	strh	r2, [r3, #0]
  if (ReadMemFunction != NULL) {
 8003b00:	4b0c      	ldr	r3, [pc, #48]	@ (8003b34 <ReadMemRegister+0x58>)
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d010      	beq.n	8003b2a <ReadMemRegister+0x4e>
    return ReadMemFunction(hwsw._slaveaddr, MemAddress, MemSize, buffer, nrBytes);
 8003b08:	4b0a      	ldr	r3, [pc, #40]	@ (8003b34 <ReadMemRegister+0x58>)
 8003b0a:	681c      	ldr	r4, [r3, #0]
 8003b0c:	4b0a      	ldr	r3, [pc, #40]	@ (8003b38 <ReadMemRegister+0x5c>)
 8003b0e:	7918      	ldrb	r0, [r3, #4]
 8003b10:	68bd      	ldr	r5, [r7, #8]
 8003b12:	230c      	movs	r3, #12
 8003b14:	18fb      	adds	r3, r7, r3
 8003b16:	881a      	ldrh	r2, [r3, #0]
 8003b18:	19bb      	adds	r3, r7, r6
 8003b1a:	8819      	ldrh	r1, [r3, #0]
 8003b1c:	1dbb      	adds	r3, r7, #6
 8003b1e:	881b      	ldrh	r3, [r3, #0]
 8003b20:	9300      	str	r3, [sp, #0]
 8003b22:	002b      	movs	r3, r5
 8003b24:	47a0      	blx	r4
 8003b26:	0003      	movs	r3, r0
 8003b28:	e000      	b.n	8003b2c <ReadMemRegister+0x50>
  }
  return false;
 8003b2a:	2300      	movs	r3, #0
}
 8003b2c:	0018      	movs	r0, r3
 8003b2e:	46bd      	mov	sp, r7
 8003b30:	b005      	add	sp, #20
 8003b32:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003b34:	20000464 	.word	0x20000464
 8003b38:	20000498 	.word	0x20000498

08003b3c <ResetENS160samplecounter>:

void ResetENS160samplecounter() {
 8003b3c:	b580      	push	{r7, lr}
 8003b3e:	af00      	add	r7, sp, #0
  enscnt = 0;
 8003b40:	4b02      	ldr	r3, [pc, #8]	@ (8003b4c <ResetENS160samplecounter+0x10>)
 8003b42:	2200      	movs	r2, #0
 8003b44:	701a      	strb	r2, [r3, #0]
}
 8003b46:	46c0      	nop			@ (mov r8, r8)
 8003b48:	46bd      	mov	sp, r7
 8003b4a:	bd80      	pop	{r7, pc}
 8003b4c:	20000460 	.word	0x20000460

08003b50 <setENS160TimeStamp>:
void setENS160TimeStamp(uint32_t ticks) {
 8003b50:	b580      	push	{r7, lr}
 8003b52:	b082      	sub	sp, #8
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	6078      	str	r0, [r7, #4]
  ENS160TimeStamp = HAL_GetTick() + ticks;
 8003b58:	f010 fee8 	bl	801492c <HAL_GetTick>
 8003b5c:	0002      	movs	r2, r0
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	18d2      	adds	r2, r2, r3
 8003b62:	4b03      	ldr	r3, [pc, #12]	@ (8003b70 <setENS160TimeStamp+0x20>)
 8003b64:	601a      	str	r2, [r3, #0]
}
 8003b66:	46c0      	nop			@ (mov r8, r8)
 8003b68:	46bd      	mov	sp, r7
 8003b6a:	b002      	add	sp, #8
 8003b6c:	bd80      	pop	{r7, pc}
 8003b6e:	46c0      	nop			@ (mov r8, r8)
 8003b70:	2000045c 	.word	0x2000045c

08003b74 <ENS_Init>:

void ENS160_set_debug(bool debug) {
  debugENS160 = debug;
}

void ENS_Init(I2CReadMEM readFunction, I2CWriteMEM writeFunction) {
 8003b74:	b580      	push	{r7, lr}
 8003b76:	b082      	sub	sp, #8
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	6078      	str	r0, [r7, #4]
 8003b7c:	6039      	str	r1, [r7, #0]
  ReadMemFunction = readFunction;
 8003b7e:	4b05      	ldr	r3, [pc, #20]	@ (8003b94 <ENS_Init+0x20>)
 8003b80:	687a      	ldr	r2, [r7, #4]
 8003b82:	601a      	str	r2, [r3, #0]
  WriteMemFunction = writeFunction;
 8003b84:	4b04      	ldr	r3, [pc, #16]	@ (8003b98 <ENS_Init+0x24>)
 8003b86:	683a      	ldr	r2, [r7, #0]
 8003b88:	601a      	str	r2, [r3, #0]
}	
 8003b8a:	46c0      	nop			@ (mov r8, r8)
 8003b8c:	46bd      	mov	sp, r7
 8003b8e:	b002      	add	sp, #8
 8003b90:	bd80      	pop	{r7, pc}
 8003b92:	46c0      	nop			@ (mov r8, r8)
 8003b94:	20000464 	.word	0x20000464
 8003b98:	20000468 	.word	0x20000468

08003b9c <ENS160_reset>:



// Sends a reset to the ENS160. Returns false on I2C problems.
bool ENS160_reset(void)
{
 8003b9c:	b580      	push	{r7, lr}
 8003b9e:	b082      	sub	sp, #8
 8003ba0:	af00      	add	r7, sp, #0
  uint8_t data = ENS160_OPMODE_RESET;
 8003ba2:	1dbb      	adds	r3, r7, #6
 8003ba4:	22f0      	movs	r2, #240	@ 0xf0
 8003ba6:	701a      	strb	r2, [r3, #0]
	uint8_t result = WriteMemRegister(ENS160_REG_OPMODE, 1, &data, 1);
 8003ba8:	1dba      	adds	r2, r7, #6
 8003baa:	2301      	movs	r3, #1
 8003bac:	2101      	movs	r1, #1
 8003bae:	2010      	movs	r0, #16
 8003bb0:	f7ff ff64 	bl	8003a7c <WriteMemRegister>
 8003bb4:	0003      	movs	r3, r0
 8003bb6:	001a      	movs	r2, r3
 8003bb8:	1dfb      	adds	r3, r7, #7
 8003bba:	701a      	strb	r2, [r3, #0]
	HAL_Delay(ENS160_BOOTING+20);                   // Wait to boot after reset
 8003bbc:	201e      	movs	r0, #30
 8003bbe:	f010 febf 	bl	8014940 <HAL_Delay>
	return result;
 8003bc2:	1dfb      	adds	r3, r7, #7
 8003bc4:	781b      	ldrb	r3, [r3, #0]
 8003bc6:	1e5a      	subs	r2, r3, #1
 8003bc8:	4193      	sbcs	r3, r2
 8003bca:	b2db      	uxtb	r3, r3
}
 8003bcc:	0018      	movs	r0, r3
 8003bce:	46bd      	mov	sp, r7
 8003bd0:	b002      	add	sp, #8
 8003bd2:	bd80      	pop	{r7, pc}

08003bd4 <ENS160_checkPartID>:

// Reads the part ID and confirms valid sensor
bool ENS160_checkPartID(void) {
 8003bd4:	b580      	push	{r7, lr}
 8003bd6:	b082      	sub	sp, #8
 8003bd8:	af00      	add	r7, sp, #0
	uint8_t i2cbuf[2] = {0};
 8003bda:	003b      	movs	r3, r7
 8003bdc:	2200      	movs	r2, #0
 8003bde:	801a      	strh	r2, [r3, #0]
	uint16_t part_id;
	bool result = false;
 8003be0:	1dfb      	adds	r3, r7, #7
 8003be2:	2200      	movs	r2, #0
 8003be4:	701a      	strb	r2, [r3, #0]
	
	ReadMemRegister(ENS160_REG_PART_ID, 1, &i2cbuf[0], 2);
 8003be6:	003a      	movs	r2, r7
 8003be8:	2302      	movs	r3, #2
 8003bea:	2101      	movs	r1, #1
 8003bec:	2000      	movs	r0, #0
 8003bee:	f7ff ff75 	bl	8003adc <ReadMemRegister>

	part_id = i2cbuf[0] | ((uint16_t)i2cbuf[1] << 8);
 8003bf2:	003b      	movs	r3, r7
 8003bf4:	781b      	ldrb	r3, [r3, #0]
 8003bf6:	b21a      	sxth	r2, r3
 8003bf8:	003b      	movs	r3, r7
 8003bfa:	785b      	ldrb	r3, [r3, #1]
 8003bfc:	b21b      	sxth	r3, r3
 8003bfe:	021b      	lsls	r3, r3, #8
 8003c00:	b21b      	sxth	r3, r3
 8003c02:	4313      	orrs	r3, r2
 8003c04:	b21a      	sxth	r2, r3
 8003c06:	1d3b      	adds	r3, r7, #4
 8003c08:	801a      	strh	r2, [r3, #0]
	if (debugENS160) {
 8003c0a:	4b1c      	ldr	r3, [pc, #112]	@ (8003c7c <ENS160_checkPartID+0xa8>)
 8003c0c:	781b      	ldrb	r3, [r3, #0]
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d015      	beq.n	8003c3e <ENS160_checkPartID+0x6a>
		Debug("ENS160 checkPartID() result: %s", (part_id == ENS160_PARTID)?"ENS160 ok":(part_id == ENS161_PARTID)?"ENS161 ok":"nok");
 8003c12:	1d3b      	adds	r3, r7, #4
 8003c14:	881a      	ldrh	r2, [r3, #0]
 8003c16:	23b0      	movs	r3, #176	@ 0xb0
 8003c18:	005b      	lsls	r3, r3, #1
 8003c1a:	429a      	cmp	r2, r3
 8003c1c:	d009      	beq.n	8003c32 <ENS160_checkPartID+0x5e>
 8003c1e:	1d3b      	adds	r3, r7, #4
 8003c20:	881a      	ldrh	r2, [r3, #0]
 8003c22:	2362      	movs	r3, #98	@ 0x62
 8003c24:	33ff      	adds	r3, #255	@ 0xff
 8003c26:	429a      	cmp	r2, r3
 8003c28:	d101      	bne.n	8003c2e <ENS160_checkPartID+0x5a>
 8003c2a:	4b15      	ldr	r3, [pc, #84]	@ (8003c80 <ENS160_checkPartID+0xac>)
 8003c2c:	e002      	b.n	8003c34 <ENS160_checkPartID+0x60>
 8003c2e:	4b15      	ldr	r3, [pc, #84]	@ (8003c84 <ENS160_checkPartID+0xb0>)
 8003c30:	e000      	b.n	8003c34 <ENS160_checkPartID+0x60>
 8003c32:	4b15      	ldr	r3, [pc, #84]	@ (8003c88 <ENS160_checkPartID+0xb4>)
 8003c34:	4a15      	ldr	r2, [pc, #84]	@ (8003c8c <ENS160_checkPartID+0xb8>)
 8003c36:	4916      	ldr	r1, [pc, #88]	@ (8003c90 <ENS160_checkPartID+0xbc>)
 8003c38:	2003      	movs	r0, #3
 8003c3a:	f010 f8ff 	bl	8013e3c <CreateLine>
	}	

	if (part_id == ENS160_PARTID) {
 8003c3e:	1d3b      	adds	r3, r7, #4
 8003c40:	881a      	ldrh	r2, [r3, #0]
 8003c42:	23b0      	movs	r3, #176	@ 0xb0
 8003c44:	005b      	lsls	r3, r3, #1
 8003c46:	429a      	cmp	r2, r3
 8003c48:	d106      	bne.n	8003c58 <ENS160_checkPartID+0x84>
	  hwsw._revENS16x = 0;
 8003c4a:	4b12      	ldr	r3, [pc, #72]	@ (8003c94 <ENS160_checkPartID+0xc0>)
 8003c4c:	2200      	movs	r2, #0
 8003c4e:	70da      	strb	r2, [r3, #3]
	  result = true;
 8003c50:	1dfb      	adds	r3, r7, #7
 8003c52:	2201      	movs	r2, #1
 8003c54:	701a      	strb	r2, [r3, #0]
 8003c56:	e00b      	b.n	8003c70 <ENS160_checkPartID+0x9c>
	}
	else if (part_id == ENS161_PARTID) {
 8003c58:	1d3b      	adds	r3, r7, #4
 8003c5a:	881a      	ldrh	r2, [r3, #0]
 8003c5c:	2362      	movs	r3, #98	@ 0x62
 8003c5e:	33ff      	adds	r3, #255	@ 0xff
 8003c60:	429a      	cmp	r2, r3
 8003c62:	d105      	bne.n	8003c70 <ENS160_checkPartID+0x9c>
	  hwsw._revENS16x = 1;
 8003c64:	4b0b      	ldr	r3, [pc, #44]	@ (8003c94 <ENS160_checkPartID+0xc0>)
 8003c66:	2201      	movs	r2, #1
 8003c68:	70da      	strb	r2, [r3, #3]
	  result = true;
 8003c6a:	1dfb      	adds	r3, r7, #7
 8003c6c:	2201      	movs	r2, #1
 8003c6e:	701a      	strb	r2, [r3, #0]
	}
	return result;
 8003c70:	1dfb      	adds	r3, r7, #7
 8003c72:	781b      	ldrb	r3, [r3, #0]
}
 8003c74:	0018      	movs	r0, r3
 8003c76:	46bd      	mov	sp, r7
 8003c78:	b002      	add	sp, #8
 8003c7a:	bd80      	pop	{r7, pc}
 8003c7c:	20000458 	.word	0x20000458
 8003c80:	0802a638 	.word	0x0802a638
 8003c84:	0802a644 	.word	0x0802a644
 8003c88:	0802a648 	.word	0x0802a648
 8003c8c:	0802a654 	.word	0x0802a654
 8003c90:	0802a674 	.word	0x0802a674
 8003c94:	20000498 	.word	0x20000498

08003c98 <ENS160_clearCommand>:


// Initialize idle mode and confirms 
bool ENS160_clearCommand(void) {
 8003c98:	b580      	push	{r7, lr}
 8003c9a:	b082      	sub	sp, #8
 8003c9c:	af02      	add	r7, sp, #8
	static uint8_t result;
	static uint8_t i2cbuf = ENS160_COMMAND_NOP;
	result = WriteMemRegister(ENS160_REG_COMMAND, 1, &i2cbuf, 1);
 8003c9e:	4a27      	ldr	r2, [pc, #156]	@ (8003d3c <ENS160_clearCommand+0xa4>)
 8003ca0:	2301      	movs	r3, #1
 8003ca2:	2101      	movs	r1, #1
 8003ca4:	2012      	movs	r0, #18
 8003ca6:	f7ff fee9 	bl	8003a7c <WriteMemRegister>
 8003caa:	0003      	movs	r3, r0
 8003cac:	001a      	movs	r2, r3
 8003cae:	4b24      	ldr	r3, [pc, #144]	@ (8003d40 <ENS160_clearCommand+0xa8>)
 8003cb0:	701a      	strb	r2, [r3, #0]
	HAL_Delay(10);
 8003cb2:	200a      	movs	r0, #10
 8003cb4:	f010 fe44 	bl	8014940 <HAL_Delay>
  i2cbuf = ENS160_COMMAND_CLRGPR;
 8003cb8:	4b20      	ldr	r3, [pc, #128]	@ (8003d3c <ENS160_clearCommand+0xa4>)
 8003cba:	22cc      	movs	r2, #204	@ 0xcc
 8003cbc:	701a      	strb	r2, [r3, #0]
  result &= WriteMemRegister(ENS160_REG_COMMAND, 1, &i2cbuf, 1);
 8003cbe:	4a1f      	ldr	r2, [pc, #124]	@ (8003d3c <ENS160_clearCommand+0xa4>)
 8003cc0:	2301      	movs	r3, #1
 8003cc2:	2101      	movs	r1, #1
 8003cc4:	2012      	movs	r0, #18
 8003cc6:	f7ff fed9 	bl	8003a7c <WriteMemRegister>
 8003cca:	0003      	movs	r3, r0
 8003ccc:	001a      	movs	r2, r3
 8003cce:	4b1c      	ldr	r3, [pc, #112]	@ (8003d40 <ENS160_clearCommand+0xa8>)
 8003cd0:	781b      	ldrb	r3, [r3, #0]
 8003cd2:	4013      	ands	r3, r2
 8003cd4:	b2da      	uxtb	r2, r3
 8003cd6:	4b1a      	ldr	r3, [pc, #104]	@ (8003d40 <ENS160_clearCommand+0xa8>)
 8003cd8:	701a      	strb	r2, [r3, #0]
	HAL_Delay(ENS160_BOOTING);                   // Wait to boot after reset
 8003cda:	200a      	movs	r0, #10
 8003cdc:	f010 fe30 	bl	8014940 <HAL_Delay>
	
  result &= ReadMemRegister(ENS160_REG_DATA_STATUS, 1, &i2cbuf, 1);
 8003ce0:	4a16      	ldr	r2, [pc, #88]	@ (8003d3c <ENS160_clearCommand+0xa4>)
 8003ce2:	2301      	movs	r3, #1
 8003ce4:	2101      	movs	r1, #1
 8003ce6:	2020      	movs	r0, #32
 8003ce8:	f7ff fef8 	bl	8003adc <ReadMemRegister>
 8003cec:	0003      	movs	r3, r0
 8003cee:	001a      	movs	r2, r3
 8003cf0:	4b13      	ldr	r3, [pc, #76]	@ (8003d40 <ENS160_clearCommand+0xa8>)
 8003cf2:	781b      	ldrb	r3, [r3, #0]
 8003cf4:	4013      	ands	r3, r2
 8003cf6:	b2da      	uxtb	r2, r3
 8003cf8:	4b11      	ldr	r3, [pc, #68]	@ (8003d40 <ENS160_clearCommand+0xa8>)
 8003cfa:	701a      	strb	r2, [r3, #0]

	if (debugENS160) {
 8003cfc:	4b11      	ldr	r3, [pc, #68]	@ (8003d44 <ENS160_clearCommand+0xac>)
 8003cfe:	781b      	ldrb	r3, [r3, #0]
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d010      	beq.n	8003d26 <ENS160_clearCommand+0x8e>
		Debug("clearCommand() status of ENS16X: 0x%02X, %s", i2cbuf, (i2cbuf == 00) ? "ok" : "nok");
 8003d04:	4b0d      	ldr	r3, [pc, #52]	@ (8003d3c <ENS160_clearCommand+0xa4>)
 8003d06:	781b      	ldrb	r3, [r3, #0]
 8003d08:	0018      	movs	r0, r3
 8003d0a:	4b0c      	ldr	r3, [pc, #48]	@ (8003d3c <ENS160_clearCommand+0xa4>)
 8003d0c:	781b      	ldrb	r3, [r3, #0]
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d101      	bne.n	8003d16 <ENS160_clearCommand+0x7e>
 8003d12:	4b0d      	ldr	r3, [pc, #52]	@ (8003d48 <ENS160_clearCommand+0xb0>)
 8003d14:	e000      	b.n	8003d18 <ENS160_clearCommand+0x80>
 8003d16:	4b0d      	ldr	r3, [pc, #52]	@ (8003d4c <ENS160_clearCommand+0xb4>)
 8003d18:	4a0d      	ldr	r2, [pc, #52]	@ (8003d50 <ENS160_clearCommand+0xb8>)
 8003d1a:	490e      	ldr	r1, [pc, #56]	@ (8003d54 <ENS160_clearCommand+0xbc>)
 8003d1c:	9300      	str	r3, [sp, #0]
 8003d1e:	0003      	movs	r3, r0
 8003d20:	2003      	movs	r0, #3
 8003d22:	f010 f88b 	bl	8013e3c <CreateLine>
	}
	HAL_Delay(ENS160_BOOTING);                   // Wait to boot after reset
 8003d26:	200a      	movs	r0, #10
 8003d28:	f010 fe0a 	bl	8014940 <HAL_Delay>
		
	return result;
 8003d2c:	4b04      	ldr	r3, [pc, #16]	@ (8003d40 <ENS160_clearCommand+0xa8>)
 8003d2e:	781b      	ldrb	r3, [r3, #0]
 8003d30:	1e5a      	subs	r2, r3, #1
 8003d32:	4193      	sbcs	r3, r2
 8003d34:	b2db      	uxtb	r3, r3
}
 8003d36:	0018      	movs	r0, r3
 8003d38:	46bd      	mov	sp, r7
 8003d3a:	bd80      	pop	{r7, pc}
 8003d3c:	200004a0 	.word	0x200004a0
 8003d40:	200004a1 	.word	0x200004a1
 8003d44:	20000458 	.word	0x20000458
 8003d48:	0802a678 	.word	0x0802a678
 8003d4c:	0802a644 	.word	0x0802a644
 8003d50:	0802a67c 	.word	0x0802a67c
 8003d54:	0802a674 	.word	0x0802a674

08003d58 <ENS160_getFirmware>:

// Read firmware revisions
bool ENS160_getFirmware() {
 8003d58:	b590      	push	{r4, r7, lr}
 8003d5a:	b085      	sub	sp, #20
 8003d5c:	af02      	add	r7, sp, #8
  uint8_t i2cbuf[3];

	ENS160_clearCommand();
 8003d5e:	f7ff ff9b 	bl	8003c98 <ENS160_clearCommand>
	
	HAL_Delay(ENS160_BOOTING);                   // Wait to boot after reset
 8003d62:	200a      	movs	r0, #10
 8003d64:	f010 fdec 	bl	8014940 <HAL_Delay>
	
	i2cbuf[0] = ENS160_COMMAND_GET_APPVER;
 8003d68:	1d3b      	adds	r3, r7, #4
 8003d6a:	220e      	movs	r2, #14
 8003d6c:	701a      	strb	r2, [r3, #0]
  WriteMemRegister(ENS160_REG_COMMAND, 1, &i2cbuf[0], 1);
 8003d6e:	1d3a      	adds	r2, r7, #4
 8003d70:	2301      	movs	r3, #1
 8003d72:	2101      	movs	r1, #1
 8003d74:	2012      	movs	r0, #18
 8003d76:	f7ff fe81 	bl	8003a7c <WriteMemRegister>

	HAL_Delay(10);
 8003d7a:	200a      	movs	r0, #10
 8003d7c:	f010 fde0 	bl	8014940 <HAL_Delay>
	ReadMemRegister(ENS160_REG_GPR_READ_4, 1, &i2cbuf[0], 3);
 8003d80:	1d3a      	adds	r2, r7, #4
 8003d82:	2303      	movs	r3, #3
 8003d84:	2101      	movs	r1, #1
 8003d86:	204c      	movs	r0, #76	@ 0x4c
 8003d88:	f7ff fea8 	bl	8003adc <ReadMemRegister>

	hwsw._fw_ver_major = i2cbuf[0];
 8003d8c:	1d3b      	adds	r3, r7, #4
 8003d8e:	781a      	ldrb	r2, [r3, #0]
 8003d90:	4b1a      	ldr	r3, [pc, #104]	@ (8003dfc <ENS160_getFirmware+0xa4>)
 8003d92:	701a      	strb	r2, [r3, #0]
	hwsw._fw_ver_minor = i2cbuf[1];
 8003d94:	1d3b      	adds	r3, r7, #4
 8003d96:	785a      	ldrb	r2, [r3, #1]
 8003d98:	4b18      	ldr	r3, [pc, #96]	@ (8003dfc <ENS160_getFirmware+0xa4>)
 8003d9a:	705a      	strb	r2, [r3, #1]
	hwsw._fw_ver_build = i2cbuf[2];
 8003d9c:	1d3b      	adds	r3, r7, #4
 8003d9e:	789a      	ldrb	r2, [r3, #2]
 8003da0:	4b16      	ldr	r3, [pc, #88]	@ (8003dfc <ENS160_getFirmware+0xa4>)
 8003da2:	709a      	strb	r2, [r3, #2]
	
	if (hwsw._fw_ver_major > 6) {
 8003da4:	4b15      	ldr	r3, [pc, #84]	@ (8003dfc <ENS160_getFirmware+0xa4>)
 8003da6:	781b      	ldrb	r3, [r3, #0]
 8003da8:	2b06      	cmp	r3, #6
 8003daa:	d903      	bls.n	8003db4 <ENS160_getFirmware+0x5c>
	  hwsw._revENS16x = 1;
 8003dac:	4b13      	ldr	r3, [pc, #76]	@ (8003dfc <ENS160_getFirmware+0xa4>)
 8003dae:	2201      	movs	r2, #1
 8003db0:	70da      	strb	r2, [r3, #3]
 8003db2:	e002      	b.n	8003dba <ENS160_getFirmware+0x62>
	}
	else {
	  hwsw._revENS16x = 0;
 8003db4:	4b11      	ldr	r3, [pc, #68]	@ (8003dfc <ENS160_getFirmware+0xa4>)
 8003db6:	2200      	movs	r2, #0
 8003db8:	70da      	strb	r2, [r3, #3]
	}

	if (debugENS160) {
 8003dba:	4b11      	ldr	r3, [pc, #68]	@ (8003e00 <ENS160_getFirmware+0xa8>)
 8003dbc:	781b      	ldrb	r3, [r3, #0]
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d00f      	beq.n	8003de2 <ENS160_getFirmware+0x8a>
		Debug("Firmware version:  %d.%d", hwsw._fw_ver_major, hwsw._fw_ver_minor, hwsw._fw_ver_build);
 8003dc2:	4b0e      	ldr	r3, [pc, #56]	@ (8003dfc <ENS160_getFirmware+0xa4>)
 8003dc4:	781b      	ldrb	r3, [r3, #0]
 8003dc6:	001c      	movs	r4, r3
 8003dc8:	4b0c      	ldr	r3, [pc, #48]	@ (8003dfc <ENS160_getFirmware+0xa4>)
 8003dca:	785b      	ldrb	r3, [r3, #1]
 8003dcc:	0018      	movs	r0, r3
 8003dce:	4b0b      	ldr	r3, [pc, #44]	@ (8003dfc <ENS160_getFirmware+0xa4>)
 8003dd0:	789b      	ldrb	r3, [r3, #2]
 8003dd2:	4a0c      	ldr	r2, [pc, #48]	@ (8003e04 <ENS160_getFirmware+0xac>)
 8003dd4:	490c      	ldr	r1, [pc, #48]	@ (8003e08 <ENS160_getFirmware+0xb0>)
 8003dd6:	9301      	str	r3, [sp, #4]
 8003dd8:	9000      	str	r0, [sp, #0]
 8003dda:	0023      	movs	r3, r4
 8003ddc:	2003      	movs	r0, #3
 8003dde:	f010 f82d 	bl	8013e3c <CreateLine>
	}
	HAL_Delay(ENS160_BOOTING);                   // Wait to boot after reset
 8003de2:	200a      	movs	r0, #10
 8003de4:	f010 fdac 	bl	8014940 <HAL_Delay>
	
	return (bool)i2cbuf[0];
 8003de8:	1d3b      	adds	r3, r7, #4
 8003dea:	781b      	ldrb	r3, [r3, #0]
 8003dec:	1e5a      	subs	r2, r3, #1
 8003dee:	4193      	sbcs	r3, r2
 8003df0:	b2db      	uxtb	r3, r3
}
 8003df2:	0018      	movs	r0, r3
 8003df4:	46bd      	mov	sp, r7
 8003df6:	b003      	add	sp, #12
 8003df8:	bd90      	pop	{r4, r7, pc}
 8003dfa:	46c0      	nop			@ (mov r8, r8)
 8003dfc:	20000498 	.word	0x20000498
 8003e00:	20000458 	.word	0x20000458
 8003e04:	0802a6a8 	.word	0x0802a6a8
 8003e08:	0802a674 	.word	0x0802a674

08003e0c <ENS160_setMode>:

// Set operation mode of sensor
bool ENS160_setMode(uint8_t mode) {
 8003e0c:	b580      	push	{r7, lr}
 8003e0e:	b084      	sub	sp, #16
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	0002      	movs	r2, r0
 8003e14:	1dfb      	adds	r3, r7, #7
 8003e16:	701a      	strb	r2, [r3, #0]
	 uint8_t result;
	
	//LP only valid for rev>0
	if ((mode == ENS160_OPMODE_LP) && (hwsw._revENS16x == 0)) {
 8003e18:	1dfb      	adds	r3, r7, #7
 8003e1a:	781b      	ldrb	r3, [r3, #0]
 8003e1c:	2b03      	cmp	r3, #3
 8003e1e:	d108      	bne.n	8003e32 <ENS160_setMode+0x26>
 8003e20:	4b10      	ldr	r3, [pc, #64]	@ (8003e64 <ENS160_setMode+0x58>)
 8003e22:	78db      	ldrb	r3, [r3, #3]
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d104      	bne.n	8003e32 <ENS160_setMode+0x26>
	  result = 1;
 8003e28:	230f      	movs	r3, #15
 8003e2a:	18fb      	adds	r3, r7, r3
 8003e2c:	2201      	movs	r2, #1
 8003e2e:	701a      	strb	r2, [r3, #0]
 8003e30:	e00a      	b.n	8003e48 <ENS160_setMode+0x3c>
	}
	else {
	  result = WriteMemRegister(ENS160_REG_OPMODE, 1, &mode, 1);
 8003e32:	1dfa      	adds	r2, r7, #7
 8003e34:	2301      	movs	r3, #1
 8003e36:	2101      	movs	r1, #1
 8003e38:	2010      	movs	r0, #16
 8003e3a:	f7ff fe1f 	bl	8003a7c <WriteMemRegister>
 8003e3e:	0003      	movs	r3, r0
 8003e40:	001a      	movs	r2, r3
 8003e42:	230f      	movs	r3, #15
 8003e44:	18fb      	adds	r3, r7, r3
 8003e46:	701a      	strb	r2, [r3, #0]
	}

	HAL_Delay(ENS160_BOOTING);                   // Wait to boot after reset
 8003e48:	200a      	movs	r0, #10
 8003e4a:	f010 fd79 	bl	8014940 <HAL_Delay>
	
	return result;
 8003e4e:	230f      	movs	r3, #15
 8003e50:	18fb      	adds	r3, r7, r3
 8003e52:	781b      	ldrb	r3, [r3, #0]
 8003e54:	1e5a      	subs	r2, r3, #1
 8003e56:	4193      	sbcs	r3, r2
 8003e58:	b2db      	uxtb	r3, r3
}
 8003e5a:	0018      	movs	r0, r3
 8003e5c:	46bd      	mov	sp, r7
 8003e5e:	b004      	add	sp, #16
 8003e60:	bd80      	pop	{r7, pc}
 8003e62:	46c0      	nop			@ (mov r8, r8)
 8003e64:	20000498 	.word	0x20000498

08003e68 <ENS_DeviceConnected>:
	
	return result;
}

// Init I2C communication, resets ENS160 and checks its PART_ID. Returns false on I2C problems or wrong PART_ID.
bool ENS_DeviceConnected() {
 8003e68:	b580      	push	{r7, lr}
 8003e6a:	b082      	sub	sp, #8
 8003e6c:	af00      	add	r7, sp, #0
//  HAL_Delay(ENS160_BOOTING);                   // Wait to boot after reset
  bool _available = true;            // ENS160 available
 8003e6e:	1dfb      	adds	r3, r7, #7
 8003e70:	2201      	movs	r2, #1
 8003e72:	701a      	strb	r2, [r3, #0]
  hwsw._slaveaddr = ENS160_I2CADDR_0;
 8003e74:	4b37      	ldr	r3, [pc, #220]	@ (8003f54 <ENS_DeviceConnected+0xec>)
 8003e76:	2252      	movs	r2, #82	@ 0x52
 8003e78:	711a      	strb	r2, [r3, #4]
  for (uint8_t tl= 0; tl < 2; tl++) {
 8003e7a:	1dbb      	adds	r3, r7, #6
 8003e7c:	2200      	movs	r2, #0
 8003e7e:	701a      	strb	r2, [r3, #0]
 8003e80:	e02d      	b.n	8003ede <ENS_DeviceConnected+0x76>
    _available &= ENS160_reset();
 8003e82:	f7ff fe8b 	bl	8003b9c <ENS160_reset>
 8003e86:	0003      	movs	r3, r0
 8003e88:	001a      	movs	r2, r3
 8003e8a:	1dfb      	adds	r3, r7, #7
 8003e8c:	781b      	ldrb	r3, [r3, #0]
 8003e8e:	401a      	ands	r2, r3
 8003e90:	1dfb      	adds	r3, r7, #7
 8003e92:	1e51      	subs	r1, r2, #1
 8003e94:	418a      	sbcs	r2, r1
 8003e96:	701a      	strb	r2, [r3, #0]
    _available &= ENS160_checkPartID();
 8003e98:	f7ff fe9c 	bl	8003bd4 <ENS160_checkPartID>
 8003e9c:	0003      	movs	r3, r0
 8003e9e:	001a      	movs	r2, r3
 8003ea0:	1dfb      	adds	r3, r7, #7
 8003ea2:	781b      	ldrb	r3, [r3, #0]
 8003ea4:	401a      	ands	r2, r3
 8003ea6:	1dfb      	adds	r3, r7, #7
 8003ea8:	1e51      	subs	r1, r2, #1
 8003eaa:	418a      	sbcs	r2, r1
 8003eac:	701a      	strb	r2, [r3, #0]
    if (!_available) {
 8003eae:	1dfb      	adds	r3, r7, #7
 8003eb0:	781b      	ldrb	r3, [r3, #0]
 8003eb2:	2201      	movs	r2, #1
 8003eb4:	4053      	eors	r3, r2
 8003eb6:	b2db      	uxtb	r3, r3
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d00b      	beq.n	8003ed4 <ENS_DeviceConnected+0x6c>
      Info("ENS160 trying alternate address");
 8003ebc:	4a26      	ldr	r2, [pc, #152]	@ (8003f58 <ENS_DeviceConnected+0xf0>)
 8003ebe:	4b27      	ldr	r3, [pc, #156]	@ (8003f5c <ENS_DeviceConnected+0xf4>)
 8003ec0:	0019      	movs	r1, r3
 8003ec2:	2002      	movs	r0, #2
 8003ec4:	f00f ffba 	bl	8013e3c <CreateLine>
      hwsw._slaveaddr = ENS160_I2CADDR_1;
 8003ec8:	4b22      	ldr	r3, [pc, #136]	@ (8003f54 <ENS_DeviceConnected+0xec>)
 8003eca:	2253      	movs	r2, #83	@ 0x53
 8003ecc:	711a      	strb	r2, [r3, #4]
      _available = true;            // next try, ENS160 available?
 8003ece:	1dfb      	adds	r3, r7, #7
 8003ed0:	2201      	movs	r2, #1
 8003ed2:	701a      	strb	r2, [r3, #0]
  for (uint8_t tl= 0; tl < 2; tl++) {
 8003ed4:	1dbb      	adds	r3, r7, #6
 8003ed6:	781a      	ldrb	r2, [r3, #0]
 8003ed8:	1dbb      	adds	r3, r7, #6
 8003eda:	3201      	adds	r2, #1
 8003edc:	701a      	strb	r2, [r3, #0]
 8003ede:	1dbb      	adds	r3, r7, #6
 8003ee0:	781b      	ldrb	r3, [r3, #0]
 8003ee2:	2b01      	cmp	r3, #1
 8003ee4:	d9cd      	bls.n	8003e82 <ENS_DeviceConnected+0x1a>
    }
  }

  if (_available) {
 8003ee6:	1dfb      	adds	r3, r7, #7
 8003ee8:	781b      	ldrb	r3, [r3, #0]
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d02b      	beq.n	8003f46 <ENS_DeviceConnected+0xde>
    _available &= ENS160_setMode(ENS160_OPMODE_IDLE);
 8003eee:	2001      	movs	r0, #1
 8003ef0:	f7ff ff8c 	bl	8003e0c <ENS160_setMode>
 8003ef4:	0003      	movs	r3, r0
 8003ef6:	001a      	movs	r2, r3
 8003ef8:	1dfb      	adds	r3, r7, #7
 8003efa:	781b      	ldrb	r3, [r3, #0]
 8003efc:	401a      	ands	r2, r3
 8003efe:	1dfb      	adds	r3, r7, #7
 8003f00:	1e51      	subs	r1, r2, #1
 8003f02:	418a      	sbcs	r2, r1
 8003f04:	701a      	strb	r2, [r3, #0]
    _available &= ENS160_clearCommand();
 8003f06:	f7ff fec7 	bl	8003c98 <ENS160_clearCommand>
 8003f0a:	0003      	movs	r3, r0
 8003f0c:	001a      	movs	r2, r3
 8003f0e:	1dfb      	adds	r3, r7, #7
 8003f10:	781b      	ldrb	r3, [r3, #0]
 8003f12:	401a      	ands	r2, r3
 8003f14:	1dfb      	adds	r3, r7, #7
 8003f16:	1e51      	subs	r1, r2, #1
 8003f18:	418a      	sbcs	r2, r1
 8003f1a:	701a      	strb	r2, [r3, #0]
    _available &= ENS160_getFirmware();
 8003f1c:	f7ff ff1c 	bl	8003d58 <ENS160_getFirmware>
 8003f20:	0003      	movs	r3, r0
 8003f22:	001a      	movs	r2, r3
 8003f24:	1dfb      	adds	r3, r7, #7
 8003f26:	781b      	ldrb	r3, [r3, #0]
 8003f28:	401a      	ands	r2, r3
 8003f2a:	1dfb      	adds	r3, r7, #7
 8003f2c:	1e51      	subs	r1, r2, #1
 8003f2e:	418a      	sbcs	r2, r1
 8003f30:	701a      	strb	r2, [r3, #0]
    if (debugENS160) {
 8003f32:	4b0b      	ldr	r3, [pc, #44]	@ (8003f60 <ENS_DeviceConnected+0xf8>)
 8003f34:	781b      	ldrb	r3, [r3, #0]
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d005      	beq.n	8003f46 <ENS_DeviceConnected+0xde>
      Debug("ENS160 in idle mode");
 8003f3a:	4a0a      	ldr	r2, [pc, #40]	@ (8003f64 <ENS_DeviceConnected+0xfc>)
 8003f3c:	4b0a      	ldr	r3, [pc, #40]	@ (8003f68 <ENS_DeviceConnected+0x100>)
 8003f3e:	0019      	movs	r1, r3
 8003f40:	2003      	movs	r0, #3
 8003f42:	f00f ff7b 	bl	8013e3c <CreateLine>
    }
  }
  return _available;
 8003f46:	1dfb      	adds	r3, r7, #7
 8003f48:	781b      	ldrb	r3, [r3, #0]
}
 8003f4a:	0018      	movs	r0, r3
 8003f4c:	46bd      	mov	sp, r7
 8003f4e:	b002      	add	sp, #8
 8003f50:	bd80      	pop	{r7, pc}
 8003f52:	46c0      	nop			@ (mov r8, r8)
 8003f54:	20000498 	.word	0x20000498
 8003f58:	0802a6c4 	.word	0x0802a6c4
 8003f5c:	0802a6e4 	.word	0x0802a6e4
 8003f60:	20000458 	.word	0x20000458
 8003f64:	0802a6e8 	.word	0x0802a6e8
 8003f68:	0802a674 	.word	0x0802a674

08003f6c <ENS160_readStatus>:
	}
	return 1;
	
}

uint8_t ENS160_readStatus(void) {
 8003f6c:	b580      	push	{r7, lr}
 8003f6e:	b082      	sub	sp, #8
 8003f70:	af00      	add	r7, sp, #0
  uint8_t status;
  ReadMemRegister(ENS160_REG_DATA_STATUS, 1, &status, 1);
 8003f72:	1dfa      	adds	r2, r7, #7
 8003f74:	2301      	movs	r3, #1
 8003f76:	2101      	movs	r1, #1
 8003f78:	2020      	movs	r0, #32
 8003f7a:	f7ff fdaf 	bl	8003adc <ReadMemRegister>

  if (debugENS160) {
 8003f7e:	4b08      	ldr	r3, [pc, #32]	@ (8003fa0 <ENS160_readStatus+0x34>)
 8003f80:	781b      	ldrb	r3, [r3, #0]
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d006      	beq.n	8003f94 <ENS160_readStatus+0x28>
    Debug("ENS160 Status: %d", status);
 8003f86:	1dfb      	adds	r3, r7, #7
 8003f88:	781b      	ldrb	r3, [r3, #0]
 8003f8a:	4a06      	ldr	r2, [pc, #24]	@ (8003fa4 <ENS160_readStatus+0x38>)
 8003f8c:	4906      	ldr	r1, [pc, #24]	@ (8003fa8 <ENS160_readStatus+0x3c>)
 8003f8e:	2003      	movs	r0, #3
 8003f90:	f00f ff54 	bl	8013e3c <CreateLine>
  }
  return status;
 8003f94:	1dfb      	adds	r3, r7, #7
 8003f96:	781b      	ldrb	r3, [r3, #0]
}
 8003f98:	0018      	movs	r0, r3
 8003f9a:	46bd      	mov	sp, r7
 8003f9c:	b002      	add	sp, #8
 8003f9e:	bd80      	pop	{r7, pc}
 8003fa0:	20000458 	.word	0x20000458
 8003fa4:	0802a71c 	.word	0x0802a71c
 8003fa8:	0802a674 	.word	0x0802a674

08003fac <ENS160_measure>:


// Perform prediction measurement and stores result in internal variables
bool ENS160_measure(bool waitForNew) {
 8003fac:	b5b0      	push	{r4, r5, r7, lr}
 8003fae:	b086      	sub	sp, #24
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	0002      	movs	r2, r0
 8003fb4:	1dfb      	adds	r3, r7, #7
 8003fb6:	701a      	strb	r2, [r3, #0]
  bool newData = false;
 8003fb8:	2317      	movs	r3, #23
 8003fba:	18fb      	adds	r3, r7, r3
 8003fbc:	2200      	movs	r2, #0
 8003fbe:	701a      	strb	r2, [r3, #0]
	uint8_t i2cbuf[8];
	uint8_t status;

	// Set default status for early bail out
	if (debugENS160) {
 8003fc0:	4b33      	ldr	r3, [pc, #204]	@ (8004090 <ENS160_measure+0xe4>)
 8003fc2:	781b      	ldrb	r3, [r3, #0]
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d005      	beq.n	8003fd4 <ENS160_measure+0x28>
	  Debug("ENS160 Start measurement");
 8003fc8:	4a32      	ldr	r2, [pc, #200]	@ (8004094 <ENS160_measure+0xe8>)
 8003fca:	4b33      	ldr	r3, [pc, #204]	@ (8004098 <ENS160_measure+0xec>)
 8003fcc:	0019      	movs	r1, r3
 8003fce:	2003      	movs	r0, #3
 8003fd0:	f00f ff34 	bl	8013e3c <CreateLine>
	}
	
	if (waitForNew) {
 8003fd4:	1dfb      	adds	r3, r7, #7
 8003fd6:	781b      	ldrb	r3, [r3, #0]
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d010      	beq.n	8003ffe <ENS160_measure+0x52>
		do {
			HAL_Delay(1);
 8003fdc:	2001      	movs	r0, #1
 8003fde:	f010 fcaf 	bl	8014940 <HAL_Delay>
			status = ENS160_readStatus();
 8003fe2:	2516      	movs	r5, #22
 8003fe4:	197c      	adds	r4, r7, r5
 8003fe6:	f7ff ffc1 	bl	8003f6c <ENS160_readStatus>
 8003fea:	0003      	movs	r3, r0
 8003fec:	7023      	strb	r3, [r4, #0]
		} while (!IS_NEWDAT(status));
 8003fee:	197b      	adds	r3, r7, r5
 8003ff0:	781b      	ldrb	r3, [r3, #0]
 8003ff2:	2202      	movs	r2, #2
 8003ff4:	4013      	ands	r3, r2
 8003ff6:	b2db      	uxtb	r3, r3
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d0ef      	beq.n	8003fdc <ENS160_measure+0x30>
 8003ffc:	e002      	b.n	8004004 <ENS160_measure+0x58>
	}
	else {
    HAL_Delay(10);
 8003ffe:	200a      	movs	r0, #10
 8004000:	f010 fc9e 	bl	8014940 <HAL_Delay>
	}
	
	newData = true;
 8004004:	2317      	movs	r3, #23
 8004006:	18fb      	adds	r3, r7, r3
 8004008:	2201      	movs	r2, #1
 800400a:	701a      	strb	r2, [r3, #0]
	ReadMemRegister(ENS160_REG_DATA_AQI, 1, &i2cbuf[0], 7);
 800400c:	240c      	movs	r4, #12
 800400e:	193a      	adds	r2, r7, r4
 8004010:	2307      	movs	r3, #7
 8004012:	2101      	movs	r1, #1
 8004014:	2021      	movs	r0, #33	@ 0x21
 8004016:	f7ff fd61 	bl	8003adc <ReadMemRegister>
	pred._data_aqi = i2cbuf[0];
 800401a:	0021      	movs	r1, r4
 800401c:	187b      	adds	r3, r7, r1
 800401e:	781a      	ldrb	r2, [r3, #0]
 8004020:	4b1e      	ldr	r3, [pc, #120]	@ (800409c <ENS160_measure+0xf0>)
 8004022:	701a      	strb	r2, [r3, #0]
	pred._data_tvoc = i2cbuf[1] | ((uint16_t)i2cbuf[2] << 8);
 8004024:	187b      	adds	r3, r7, r1
 8004026:	785b      	ldrb	r3, [r3, #1]
 8004028:	b21a      	sxth	r2, r3
 800402a:	187b      	adds	r3, r7, r1
 800402c:	789b      	ldrb	r3, [r3, #2]
 800402e:	b21b      	sxth	r3, r3
 8004030:	021b      	lsls	r3, r3, #8
 8004032:	b21b      	sxth	r3, r3
 8004034:	4313      	orrs	r3, r2
 8004036:	b21b      	sxth	r3, r3
 8004038:	b29a      	uxth	r2, r3
 800403a:	4b18      	ldr	r3, [pc, #96]	@ (800409c <ENS160_measure+0xf0>)
 800403c:	805a      	strh	r2, [r3, #2]
	pred._data_eco2 = i2cbuf[3] | ((uint16_t)i2cbuf[4] << 8);
 800403e:	187b      	adds	r3, r7, r1
 8004040:	78db      	ldrb	r3, [r3, #3]
 8004042:	b21a      	sxth	r2, r3
 8004044:	187b      	adds	r3, r7, r1
 8004046:	791b      	ldrb	r3, [r3, #4]
 8004048:	b21b      	sxth	r3, r3
 800404a:	021b      	lsls	r3, r3, #8
 800404c:	b21b      	sxth	r3, r3
 800404e:	4313      	orrs	r3, r2
 8004050:	b21b      	sxth	r3, r3
 8004052:	b29a      	uxth	r2, r3
 8004054:	4b11      	ldr	r3, [pc, #68]	@ (800409c <ENS160_measure+0xf0>)
 8004056:	809a      	strh	r2, [r3, #4]
	if (hwsw._revENS16x > 0) pred._data_aqi500 = ((uint16_t)i2cbuf[5]) | ((uint16_t)i2cbuf[6] << 8);
 8004058:	4b11      	ldr	r3, [pc, #68]	@ (80040a0 <ENS160_measure+0xf4>)
 800405a:	78db      	ldrb	r3, [r3, #3]
 800405c:	2b00      	cmp	r3, #0
 800405e:	d00d      	beq.n	800407c <ENS160_measure+0xd0>
 8004060:	187b      	adds	r3, r7, r1
 8004062:	795b      	ldrb	r3, [r3, #5]
 8004064:	b21a      	sxth	r2, r3
 8004066:	187b      	adds	r3, r7, r1
 8004068:	799b      	ldrb	r3, [r3, #6]
 800406a:	b21b      	sxth	r3, r3
 800406c:	021b      	lsls	r3, r3, #8
 800406e:	b21b      	sxth	r3, r3
 8004070:	4313      	orrs	r3, r2
 8004072:	b21b      	sxth	r3, r3
 8004074:	b29a      	uxth	r2, r3
 8004076:	4b09      	ldr	r3, [pc, #36]	@ (800409c <ENS160_measure+0xf0>)
 8004078:	80da      	strh	r2, [r3, #6]
 800407a:	e002      	b.n	8004082 <ENS160_measure+0xd6>
  	else pred._data_aqi500 = 0;
 800407c:	4b07      	ldr	r3, [pc, #28]	@ (800409c <ENS160_measure+0xf0>)
 800407e:	2200      	movs	r2, #0
 8004080:	80da      	strh	r2, [r3, #6]
	
	return newData;
 8004082:	2317      	movs	r3, #23
 8004084:	18fb      	adds	r3, r7, r3
 8004086:	781b      	ldrb	r3, [r3, #0]
}
 8004088:	0018      	movs	r0, r3
 800408a:	46bd      	mov	sp, r7
 800408c:	b006      	add	sp, #24
 800408e:	bdb0      	pop	{r4, r5, r7, pc}
 8004090:	20000458 	.word	0x20000458
 8004094:	0802a730 	.word	0x0802a730
 8004098:	0802a674 	.word	0x0802a674
 800409c:	20000490 	.word	0x20000490
 80040a0:	20000498 	.word	0x20000498

080040a4 <ENS160_measureRaw>:

// Perform raw measurement
bool ENS160_measureRaw(bool waitForNew) {
 80040a4:	b590      	push	{r4, r7, lr}
 80040a6:	b087      	sub	sp, #28
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	0002      	movs	r2, r0
 80040ac:	1dfb      	adds	r3, r7, #7
 80040ae:	701a      	strb	r2, [r3, #0]
	uint8_t i2cbuf[8];
  uint8_t status;
	bool newData = false;
 80040b0:	2317      	movs	r3, #23
 80040b2:	18fb      	adds	r3, r7, r3
 80040b4:	2200      	movs	r2, #0
 80040b6:	701a      	strb	r2, [r3, #0]
	// Set default status for early bail out
	if (debugENS160) {
 80040b8:	4bae      	ldr	r3, [pc, #696]	@ (8004374 <ENS160_measureRaw+0x2d0>)
 80040ba:	781b      	ldrb	r3, [r3, #0]
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d005      	beq.n	80040cc <ENS160_measureRaw+0x28>
	  Debug("ENS160 Start measurement raw");
 80040c0:	4aad      	ldr	r2, [pc, #692]	@ (8004378 <ENS160_measureRaw+0x2d4>)
 80040c2:	4bae      	ldr	r3, [pc, #696]	@ (800437c <ENS160_measureRaw+0x2d8>)
 80040c4:	0019      	movs	r1, r3
 80040c6:	2003      	movs	r0, #3
 80040c8:	f00f feb8 	bl	8013e3c <CreateLine>
	}
	
	if (waitForNew) {
 80040cc:	1dfb      	adds	r3, r7, #7
 80040ce:	781b      	ldrb	r3, [r3, #0]
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d010      	beq.n	80040f6 <ENS160_measureRaw+0x52>
		do {
			HAL_Delay(1);
 80040d4:	2001      	movs	r0, #1
 80040d6:	f010 fc33 	bl	8014940 <HAL_Delay>
			ReadMemRegister(ENS160_REG_DATA_STATUS, 1, &status, 1);
 80040da:	240b      	movs	r4, #11
 80040dc:	193a      	adds	r2, r7, r4
 80040de:	2301      	movs	r3, #1
 80040e0:	2101      	movs	r1, #1
 80040e2:	2020      	movs	r0, #32
 80040e4:	f7ff fcfa 	bl	8003adc <ReadMemRegister>
		} while (!IS_NEWGPR(status));
 80040e8:	193b      	adds	r3, r7, r4
 80040ea:	781b      	ldrb	r3, [r3, #0]
 80040ec:	2201      	movs	r2, #1
 80040ee:	4013      	ands	r3, r2
 80040f0:	b2db      	uxtb	r3, r3
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d0ee      	beq.n	80040d4 <ENS160_measureRaw+0x30>
	}
	
		// Read raw resistance values
    ReadMemRegister(ENS160_REG_GPR_READ_0, 1, &i2cbuf[0], 8);
 80040f6:	240c      	movs	r4, #12
 80040f8:	193a      	adds	r2, r7, r4
 80040fa:	2308      	movs	r3, #8
 80040fc:	2101      	movs	r1, #1
 80040fe:	2048      	movs	r0, #72	@ 0x48
 8004100:	f7ff fcec 	bl	8003adc <ReadMemRegister>

    raw._hp0_rs = CONVERT_RS_RAW2OHMS_F((uint32_t)(i2cbuf[0] | ((uint16_t)i2cbuf[1] << 8)));
 8004104:	193b      	adds	r3, r7, r4
 8004106:	781b      	ldrb	r3, [r3, #0]
 8004108:	001a      	movs	r2, r3
 800410a:	193b      	adds	r3, r7, r4
 800410c:	785b      	ldrb	r3, [r3, #1]
 800410e:	021b      	lsls	r3, r3, #8
 8004110:	4313      	orrs	r3, r2
 8004112:	0018      	movs	r0, r3
 8004114:	f7fd fbd8 	bl	80018c8 <__aeabi_ui2f>
 8004118:	1c03      	adds	r3, r0, #0
 800411a:	218a      	movs	r1, #138	@ 0x8a
 800411c:	05c9      	lsls	r1, r1, #23
 800411e:	1c18      	adds	r0, r3, #0
 8004120:	f7fc fdc0 	bl	8000ca4 <__aeabi_fdiv>
 8004124:	1c03      	adds	r3, r0, #0
 8004126:	1c18      	adds	r0, r3, #0
 8004128:	f7ff fbb4 	bl	8003894 <__aeabi_f2d>
 800412c:	0002      	movs	r2, r0
 800412e:	000b      	movs	r3, r1
 8004130:	2000      	movs	r0, #0
 8004132:	2180      	movs	r1, #128	@ 0x80
 8004134:	05c9      	lsls	r1, r1, #23
 8004136:	f024 ffb9 	bl	80290ac <pow>
 800413a:	0002      	movs	r2, r0
 800413c:	000b      	movs	r3, r1
 800413e:	0010      	movs	r0, r2
 8004140:	0019      	movs	r1, r3
 8004142:	f7fc fa83 	bl	800064c <__aeabi_d2uiz>
 8004146:	0002      	movs	r2, r0
 8004148:	4b8d      	ldr	r3, [pc, #564]	@ (8004380 <ENS160_measureRaw+0x2dc>)
 800414a:	601a      	str	r2, [r3, #0]
    raw._hp1_rs = CONVERT_RS_RAW2OHMS_F((uint32_t)(i2cbuf[2] | ((uint16_t)i2cbuf[3] << 8)));
 800414c:	193b      	adds	r3, r7, r4
 800414e:	789b      	ldrb	r3, [r3, #2]
 8004150:	001a      	movs	r2, r3
 8004152:	193b      	adds	r3, r7, r4
 8004154:	78db      	ldrb	r3, [r3, #3]
 8004156:	021b      	lsls	r3, r3, #8
 8004158:	4313      	orrs	r3, r2
 800415a:	0018      	movs	r0, r3
 800415c:	f7fd fbb4 	bl	80018c8 <__aeabi_ui2f>
 8004160:	1c03      	adds	r3, r0, #0
 8004162:	218a      	movs	r1, #138	@ 0x8a
 8004164:	05c9      	lsls	r1, r1, #23
 8004166:	1c18      	adds	r0, r3, #0
 8004168:	f7fc fd9c 	bl	8000ca4 <__aeabi_fdiv>
 800416c:	1c03      	adds	r3, r0, #0
 800416e:	1c18      	adds	r0, r3, #0
 8004170:	f7ff fb90 	bl	8003894 <__aeabi_f2d>
 8004174:	0002      	movs	r2, r0
 8004176:	000b      	movs	r3, r1
 8004178:	2000      	movs	r0, #0
 800417a:	2180      	movs	r1, #128	@ 0x80
 800417c:	05c9      	lsls	r1, r1, #23
 800417e:	f024 ff95 	bl	80290ac <pow>
 8004182:	0002      	movs	r2, r0
 8004184:	000b      	movs	r3, r1
 8004186:	0010      	movs	r0, r2
 8004188:	0019      	movs	r1, r3
 800418a:	f7fc fa5f 	bl	800064c <__aeabi_d2uiz>
 800418e:	0002      	movs	r2, r0
 8004190:	4b7b      	ldr	r3, [pc, #492]	@ (8004380 <ENS160_measureRaw+0x2dc>)
 8004192:	609a      	str	r2, [r3, #8]
    raw._hp2_rs = CONVERT_RS_RAW2OHMS_F((uint32_t)(i2cbuf[4] | ((uint16_t)i2cbuf[5] << 8)));
 8004194:	193b      	adds	r3, r7, r4
 8004196:	791b      	ldrb	r3, [r3, #4]
 8004198:	001a      	movs	r2, r3
 800419a:	193b      	adds	r3, r7, r4
 800419c:	795b      	ldrb	r3, [r3, #5]
 800419e:	021b      	lsls	r3, r3, #8
 80041a0:	4313      	orrs	r3, r2
 80041a2:	0018      	movs	r0, r3
 80041a4:	f7fd fb90 	bl	80018c8 <__aeabi_ui2f>
 80041a8:	1c03      	adds	r3, r0, #0
 80041aa:	218a      	movs	r1, #138	@ 0x8a
 80041ac:	05c9      	lsls	r1, r1, #23
 80041ae:	1c18      	adds	r0, r3, #0
 80041b0:	f7fc fd78 	bl	8000ca4 <__aeabi_fdiv>
 80041b4:	1c03      	adds	r3, r0, #0
 80041b6:	1c18      	adds	r0, r3, #0
 80041b8:	f7ff fb6c 	bl	8003894 <__aeabi_f2d>
 80041bc:	0002      	movs	r2, r0
 80041be:	000b      	movs	r3, r1
 80041c0:	2000      	movs	r0, #0
 80041c2:	2180      	movs	r1, #128	@ 0x80
 80041c4:	05c9      	lsls	r1, r1, #23
 80041c6:	f024 ff71 	bl	80290ac <pow>
 80041ca:	0002      	movs	r2, r0
 80041cc:	000b      	movs	r3, r1
 80041ce:	0010      	movs	r0, r2
 80041d0:	0019      	movs	r1, r3
 80041d2:	f7fc fa3b 	bl	800064c <__aeabi_d2uiz>
 80041d6:	0002      	movs	r2, r0
 80041d8:	4b69      	ldr	r3, [pc, #420]	@ (8004380 <ENS160_measureRaw+0x2dc>)
 80041da:	611a      	str	r2, [r3, #16]
    raw._hp3_rs = CONVERT_RS_RAW2OHMS_F((uint32_t)(i2cbuf[6] | ((uint16_t)i2cbuf[7] << 8)));
 80041dc:	193b      	adds	r3, r7, r4
 80041de:	799b      	ldrb	r3, [r3, #6]
 80041e0:	001a      	movs	r2, r3
 80041e2:	193b      	adds	r3, r7, r4
 80041e4:	79db      	ldrb	r3, [r3, #7]
 80041e6:	021b      	lsls	r3, r3, #8
 80041e8:	4313      	orrs	r3, r2
 80041ea:	0018      	movs	r0, r3
 80041ec:	f7fd fb6c 	bl	80018c8 <__aeabi_ui2f>
 80041f0:	1c03      	adds	r3, r0, #0
 80041f2:	218a      	movs	r1, #138	@ 0x8a
 80041f4:	05c9      	lsls	r1, r1, #23
 80041f6:	1c18      	adds	r0, r3, #0
 80041f8:	f7fc fd54 	bl	8000ca4 <__aeabi_fdiv>
 80041fc:	1c03      	adds	r3, r0, #0
 80041fe:	1c18      	adds	r0, r3, #0
 8004200:	f7ff fb48 	bl	8003894 <__aeabi_f2d>
 8004204:	0002      	movs	r2, r0
 8004206:	000b      	movs	r3, r1
 8004208:	2000      	movs	r0, #0
 800420a:	2180      	movs	r1, #128	@ 0x80
 800420c:	05c9      	lsls	r1, r1, #23
 800420e:	f024 ff4d 	bl	80290ac <pow>
 8004212:	0002      	movs	r2, r0
 8004214:	000b      	movs	r3, r1
 8004216:	0010      	movs	r0, r2
 8004218:	0019      	movs	r1, r3
 800421a:	f7fc fa17 	bl	800064c <__aeabi_d2uiz>
 800421e:	0002      	movs	r2, r0
 8004220:	4b57      	ldr	r3, [pc, #348]	@ (8004380 <ENS160_measureRaw+0x2dc>)
 8004222:	619a      	str	r2, [r3, #24]
	
		// Read baselines
    ReadMemRegister(ENS160_REG_DATA_BL, 1, &i2cbuf[0], 8);
 8004224:	193a      	adds	r2, r7, r4
 8004226:	2308      	movs	r3, #8
 8004228:	2101      	movs	r1, #1
 800422a:	2028      	movs	r0, #40	@ 0x28
 800422c:	f7ff fc56 	bl	8003adc <ReadMemRegister>
    raw._hp0_bl = CONVERT_RS_RAW2OHMS_F((uint32_t)(i2cbuf[0] | ((uint16_t)i2cbuf[1] << 8)));
 8004230:	193b      	adds	r3, r7, r4
 8004232:	781b      	ldrb	r3, [r3, #0]
 8004234:	001a      	movs	r2, r3
 8004236:	193b      	adds	r3, r7, r4
 8004238:	785b      	ldrb	r3, [r3, #1]
 800423a:	021b      	lsls	r3, r3, #8
 800423c:	4313      	orrs	r3, r2
 800423e:	0018      	movs	r0, r3
 8004240:	f7fd fb42 	bl	80018c8 <__aeabi_ui2f>
 8004244:	1c03      	adds	r3, r0, #0
 8004246:	218a      	movs	r1, #138	@ 0x8a
 8004248:	05c9      	lsls	r1, r1, #23
 800424a:	1c18      	adds	r0, r3, #0
 800424c:	f7fc fd2a 	bl	8000ca4 <__aeabi_fdiv>
 8004250:	1c03      	adds	r3, r0, #0
 8004252:	1c18      	adds	r0, r3, #0
 8004254:	f7ff fb1e 	bl	8003894 <__aeabi_f2d>
 8004258:	0002      	movs	r2, r0
 800425a:	000b      	movs	r3, r1
 800425c:	2000      	movs	r0, #0
 800425e:	2180      	movs	r1, #128	@ 0x80
 8004260:	05c9      	lsls	r1, r1, #23
 8004262:	f024 ff23 	bl	80290ac <pow>
 8004266:	0002      	movs	r2, r0
 8004268:	000b      	movs	r3, r1
 800426a:	0010      	movs	r0, r2
 800426c:	0019      	movs	r1, r3
 800426e:	f7fc f9ed 	bl	800064c <__aeabi_d2uiz>
 8004272:	0002      	movs	r2, r0
 8004274:	4b42      	ldr	r3, [pc, #264]	@ (8004380 <ENS160_measureRaw+0x2dc>)
 8004276:	605a      	str	r2, [r3, #4]
    raw._hp1_bl = CONVERT_RS_RAW2OHMS_F((uint32_t)(i2cbuf[2] | ((uint16_t)i2cbuf[3] << 8)));
 8004278:	193b      	adds	r3, r7, r4
 800427a:	789b      	ldrb	r3, [r3, #2]
 800427c:	001a      	movs	r2, r3
 800427e:	193b      	adds	r3, r7, r4
 8004280:	78db      	ldrb	r3, [r3, #3]
 8004282:	021b      	lsls	r3, r3, #8
 8004284:	4313      	orrs	r3, r2
 8004286:	0018      	movs	r0, r3
 8004288:	f7fd fb1e 	bl	80018c8 <__aeabi_ui2f>
 800428c:	1c03      	adds	r3, r0, #0
 800428e:	218a      	movs	r1, #138	@ 0x8a
 8004290:	05c9      	lsls	r1, r1, #23
 8004292:	1c18      	adds	r0, r3, #0
 8004294:	f7fc fd06 	bl	8000ca4 <__aeabi_fdiv>
 8004298:	1c03      	adds	r3, r0, #0
 800429a:	1c18      	adds	r0, r3, #0
 800429c:	f7ff fafa 	bl	8003894 <__aeabi_f2d>
 80042a0:	0002      	movs	r2, r0
 80042a2:	000b      	movs	r3, r1
 80042a4:	2000      	movs	r0, #0
 80042a6:	2180      	movs	r1, #128	@ 0x80
 80042a8:	05c9      	lsls	r1, r1, #23
 80042aa:	f024 feff 	bl	80290ac <pow>
 80042ae:	0002      	movs	r2, r0
 80042b0:	000b      	movs	r3, r1
 80042b2:	0010      	movs	r0, r2
 80042b4:	0019      	movs	r1, r3
 80042b6:	f7fc f9c9 	bl	800064c <__aeabi_d2uiz>
 80042ba:	0002      	movs	r2, r0
 80042bc:	4b30      	ldr	r3, [pc, #192]	@ (8004380 <ENS160_measureRaw+0x2dc>)
 80042be:	60da      	str	r2, [r3, #12]
    raw._hp2_bl = CONVERT_RS_RAW2OHMS_F((uint32_t)(i2cbuf[4] | ((uint16_t)i2cbuf[5] << 8)));
 80042c0:	193b      	adds	r3, r7, r4
 80042c2:	791b      	ldrb	r3, [r3, #4]
 80042c4:	001a      	movs	r2, r3
 80042c6:	193b      	adds	r3, r7, r4
 80042c8:	795b      	ldrb	r3, [r3, #5]
 80042ca:	021b      	lsls	r3, r3, #8
 80042cc:	4313      	orrs	r3, r2
 80042ce:	0018      	movs	r0, r3
 80042d0:	f7fd fafa 	bl	80018c8 <__aeabi_ui2f>
 80042d4:	1c03      	adds	r3, r0, #0
 80042d6:	218a      	movs	r1, #138	@ 0x8a
 80042d8:	05c9      	lsls	r1, r1, #23
 80042da:	1c18      	adds	r0, r3, #0
 80042dc:	f7fc fce2 	bl	8000ca4 <__aeabi_fdiv>
 80042e0:	1c03      	adds	r3, r0, #0
 80042e2:	1c18      	adds	r0, r3, #0
 80042e4:	f7ff fad6 	bl	8003894 <__aeabi_f2d>
 80042e8:	0002      	movs	r2, r0
 80042ea:	000b      	movs	r3, r1
 80042ec:	2000      	movs	r0, #0
 80042ee:	2180      	movs	r1, #128	@ 0x80
 80042f0:	05c9      	lsls	r1, r1, #23
 80042f2:	f024 fedb 	bl	80290ac <pow>
 80042f6:	0002      	movs	r2, r0
 80042f8:	000b      	movs	r3, r1
 80042fa:	0010      	movs	r0, r2
 80042fc:	0019      	movs	r1, r3
 80042fe:	f7fc f9a5 	bl	800064c <__aeabi_d2uiz>
 8004302:	0002      	movs	r2, r0
 8004304:	4b1e      	ldr	r3, [pc, #120]	@ (8004380 <ENS160_measureRaw+0x2dc>)
 8004306:	615a      	str	r2, [r3, #20]
    raw._hp3_bl = CONVERT_RS_RAW2OHMS_F((uint32_t)(i2cbuf[6] | ((uint16_t)i2cbuf[7] << 8)));
 8004308:	193b      	adds	r3, r7, r4
 800430a:	799b      	ldrb	r3, [r3, #6]
 800430c:	001a      	movs	r2, r3
 800430e:	193b      	adds	r3, r7, r4
 8004310:	79db      	ldrb	r3, [r3, #7]
 8004312:	021b      	lsls	r3, r3, #8
 8004314:	4313      	orrs	r3, r2
 8004316:	0018      	movs	r0, r3
 8004318:	f7fd fad6 	bl	80018c8 <__aeabi_ui2f>
 800431c:	1c03      	adds	r3, r0, #0
 800431e:	218a      	movs	r1, #138	@ 0x8a
 8004320:	05c9      	lsls	r1, r1, #23
 8004322:	1c18      	adds	r0, r3, #0
 8004324:	f7fc fcbe 	bl	8000ca4 <__aeabi_fdiv>
 8004328:	1c03      	adds	r3, r0, #0
 800432a:	1c18      	adds	r0, r3, #0
 800432c:	f7ff fab2 	bl	8003894 <__aeabi_f2d>
 8004330:	0002      	movs	r2, r0
 8004332:	000b      	movs	r3, r1
 8004334:	2000      	movs	r0, #0
 8004336:	2180      	movs	r1, #128	@ 0x80
 8004338:	05c9      	lsls	r1, r1, #23
 800433a:	f024 feb7 	bl	80290ac <pow>
 800433e:	0002      	movs	r2, r0
 8004340:	000b      	movs	r3, r1
 8004342:	0010      	movs	r0, r2
 8004344:	0019      	movs	r1, r3
 8004346:	f7fc f981 	bl	800064c <__aeabi_d2uiz>
 800434a:	0002      	movs	r2, r0
 800434c:	4b0c      	ldr	r3, [pc, #48]	@ (8004380 <ENS160_measureRaw+0x2dc>)
 800434e:	61da      	str	r2, [r3, #28]

    ReadMemRegister(ENS160_REG_DATA_MISR, 1, &i2cbuf[0], 1);
 8004350:	193a      	adds	r2, r7, r4
 8004352:	2301      	movs	r3, #1
 8004354:	2101      	movs	r1, #1
 8004356:	2038      	movs	r0, #56	@ 0x38
 8004358:	f7ff fbc0 	bl	8003adc <ReadMemRegister>
    raw._misr = i2cbuf[0];
 800435c:	193b      	adds	r3, r7, r4
 800435e:	7819      	ldrb	r1, [r3, #0]
 8004360:	4b07      	ldr	r3, [pc, #28]	@ (8004380 <ENS160_measureRaw+0x2dc>)
 8004362:	2220      	movs	r2, #32
 8004364:	5499      	strb	r1, [r3, r2]
	
	return newData;
 8004366:	2317      	movs	r3, #23
 8004368:	18fb      	adds	r3, r7, r3
 800436a:	781b      	ldrb	r3, [r3, #0]
}
 800436c:	0018      	movs	r0, r3
 800436e:	46bd      	mov	sp, r7
 8004370:	b007      	add	sp, #28
 8004372:	bd90      	pop	{r4, r7, pc}
 8004374:	20000458 	.word	0x20000458
 8004378:	0802a74c 	.word	0x0802a74c
 800437c:	0802a674 	.word	0x0802a674
 8004380:	2000046c 	.word	0x2000046c

08004384 <ENS160_set_envdata210>:

bool ENS160_set_envdata210(uint16_t t, uint16_t h) {
 8004384:	b580      	push	{r7, lr}
 8004386:	b084      	sub	sp, #16
 8004388:	af00      	add	r7, sp, #0
 800438a:	0002      	movs	r2, r0
 800438c:	1dbb      	adds	r3, r7, #6
 800438e:	801a      	strh	r2, [r3, #0]
 8004390:	1d3b      	adds	r3, r7, #4
 8004392:	1c0a      	adds	r2, r1, #0
 8004394:	801a      	strh	r2, [r3, #0]
  uint8_t trh_in[4];

  trh_in[0] = t & 0xff;
 8004396:	1dbb      	adds	r3, r7, #6
 8004398:	881b      	ldrh	r3, [r3, #0]
 800439a:	b2da      	uxtb	r2, r3
 800439c:	2108      	movs	r1, #8
 800439e:	187b      	adds	r3, r7, r1
 80043a0:	701a      	strb	r2, [r3, #0]
  trh_in[1] = (t >> 8) & 0xff;
 80043a2:	1dbb      	adds	r3, r7, #6
 80043a4:	881b      	ldrh	r3, [r3, #0]
 80043a6:	0a1b      	lsrs	r3, r3, #8
 80043a8:	b29b      	uxth	r3, r3
 80043aa:	b2da      	uxtb	r2, r3
 80043ac:	187b      	adds	r3, r7, r1
 80043ae:	705a      	strb	r2, [r3, #1]
  trh_in[2] = h & 0xff;
 80043b0:	1d3b      	adds	r3, r7, #4
 80043b2:	881b      	ldrh	r3, [r3, #0]
 80043b4:	b2da      	uxtb	r2, r3
 80043b6:	187b      	adds	r3, r7, r1
 80043b8:	709a      	strb	r2, [r3, #2]
  trh_in[3] = (h >> 8) & 0xff;
 80043ba:	1d3b      	adds	r3, r7, #4
 80043bc:	881b      	ldrh	r3, [r3, #0]
 80043be:	0a1b      	lsrs	r3, r3, #8
 80043c0:	b29b      	uxth	r3, r3
 80043c2:	b2da      	uxtb	r2, r3
 80043c4:	187b      	adds	r3, r7, r1
 80043c6:	70da      	strb	r2, [r3, #3]
  uint8_t result = WriteMemRegister(ENS160_REG_TEMP_IN, 1, &trh_in[0], 4);
 80043c8:	187a      	adds	r2, r7, r1
 80043ca:	2304      	movs	r3, #4
 80043cc:	2101      	movs	r1, #1
 80043ce:	2013      	movs	r0, #19
 80043d0:	f7ff fb54 	bl	8003a7c <WriteMemRegister>
 80043d4:	0003      	movs	r3, r0
 80043d6:	001a      	movs	r2, r3
 80043d8:	210f      	movs	r1, #15
 80043da:	187b      	adds	r3, r7, r1
 80043dc:	701a      	strb	r2, [r3, #0]
  return result;
 80043de:	187b      	adds	r3, r7, r1
 80043e0:	781b      	ldrb	r3, [r3, #0]
 80043e2:	1e5a      	subs	r2, r3, #1
 80043e4:	4193      	sbcs	r3, r2
 80043e6:	b2db      	uxtb	r3, r3
}
 80043e8:	0018      	movs	r0, r3
 80043ea:	46bd      	mov	sp, r7
 80043ec:	b004      	add	sp, #16
 80043ee:	bd80      	pop	{r7, pc}

080043f0 <ENS160_set_envdata>:


// Writes t (degC) and h (%rh) to ENV_DATA. Returns false on I2C problems.
bool ENS160_set_envdata(float t, float h) {
 80043f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80043f2:	b085      	sub	sp, #20
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	6078      	str	r0, [r7, #4]
 80043f8:	6039      	str	r1, [r7, #0]
	uint16_t t_data = (uint16_t)((t + 273.15f) * 64.0f);
 80043fa:	4916      	ldr	r1, [pc, #88]	@ (8004454 <ENS160_set_envdata+0x64>)
 80043fc:	6878      	ldr	r0, [r7, #4]
 80043fe:	f7fc fa5f 	bl	80008c0 <__aeabi_fadd>
 8004402:	1c03      	adds	r3, r0, #0
 8004404:	2185      	movs	r1, #133	@ 0x85
 8004406:	05c9      	lsls	r1, r1, #23
 8004408:	1c18      	adds	r0, r3, #0
 800440a:	f7fc fe19 	bl	8001040 <__aeabi_fmul>
 800440e:	1c03      	adds	r3, r0, #0
 8004410:	250e      	movs	r5, #14
 8004412:	197c      	adds	r4, r7, r5
 8004414:	1c18      	adds	r0, r3, #0
 8004416:	f7fc f901 	bl	800061c <__aeabi_f2uiz>
 800441a:	0003      	movs	r3, r0
 800441c:	8023      	strh	r3, [r4, #0]
	uint16_t rh_data = (uint16_t)(h * 512.0f);
 800441e:	2188      	movs	r1, #136	@ 0x88
 8004420:	05c9      	lsls	r1, r1, #23
 8004422:	6838      	ldr	r0, [r7, #0]
 8004424:	f7fc fe0c 	bl	8001040 <__aeabi_fmul>
 8004428:	1c03      	adds	r3, r0, #0
 800442a:	260c      	movs	r6, #12
 800442c:	19bc      	adds	r4, r7, r6
 800442e:	1c18      	adds	r0, r3, #0
 8004430:	f7fc f8f4 	bl	800061c <__aeabi_f2uiz>
 8004434:	0003      	movs	r3, r0
 8004436:	8023      	strh	r3, [r4, #0]
	return ENS160_set_envdata210(t_data, rh_data);
 8004438:	19bb      	adds	r3, r7, r6
 800443a:	881a      	ldrh	r2, [r3, #0]
 800443c:	197b      	adds	r3, r7, r5
 800443e:	881b      	ldrh	r3, [r3, #0]
 8004440:	0011      	movs	r1, r2
 8004442:	0018      	movs	r0, r3
 8004444:	f7ff ff9e 	bl	8004384 <ENS160_set_envdata210>
 8004448:	0003      	movs	r3, r0
}
 800444a:	0018      	movs	r0, r3
 800444c:	46bd      	mov	sp, r7
 800444e:	b005      	add	sp, #20
 8004450:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004452:	46c0      	nop			@ (mov r8, r8)
 8004454:	43889333 	.word	0x43889333

08004458 <ENS_Upkeep>:

ENS160State ENS_Upkeep(void) {
 8004458:	b590      	push	{r4, r7, lr}
 800445a:	b085      	sub	sp, #20
 800445c:	af02      	add	r7, sp, #8
  uint8_t status;
  if(!TimestampIsReached(ENS160TimeStamp)){
 800445e:	4bc5      	ldr	r3, [pc, #788]	@ (8004774 <ENS_Upkeep+0x31c>)
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	0018      	movs	r0, r3
 8004464:	f00f fc94 	bl	8013d90 <TimestampIsReached>
 8004468:	0003      	movs	r3, r0
 800446a:	001a      	movs	r2, r3
 800446c:	2301      	movs	r3, #1
 800446e:	4053      	eors	r3, r2
 8004470:	b2db      	uxtb	r3, r3
 8004472:	2b00      	cmp	r3, #0
 8004474:	d002      	beq.n	800447c <ENS_Upkeep+0x24>
    return ENSState;
 8004476:	4bc0      	ldr	r3, [pc, #768]	@ (8004778 <ENS_Upkeep+0x320>)
 8004478:	781b      	ldrb	r3, [r3, #0]
 800447a:	e1fb      	b.n	8004874 <ENS_Upkeep+0x41c>
  }
  switch(ENSState) {
 800447c:	4bbe      	ldr	r3, [pc, #760]	@ (8004778 <ENS_Upkeep+0x320>)
 800447e:	781b      	ldrb	r3, [r3, #0]
 8004480:	2b08      	cmp	r3, #8
 8004482:	d900      	bls.n	8004486 <ENS_Upkeep+0x2e>
 8004484:	e1dd      	b.n	8004842 <ENS_Upkeep+0x3ea>
 8004486:	009a      	lsls	r2, r3, #2
 8004488:	4bbc      	ldr	r3, [pc, #752]	@ (800477c <ENS_Upkeep+0x324>)
 800448a:	18d3      	adds	r3, r2, r3
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	469f      	mov	pc, r3
  case ENS_STATE_OFF:
    Debug("Measurements are turned off for gas device ENS160.");
 8004490:	4abb      	ldr	r2, [pc, #748]	@ (8004780 <ENS_Upkeep+0x328>)
 8004492:	4bbc      	ldr	r3, [pc, #752]	@ (8004784 <ENS_Upkeep+0x32c>)
 8004494:	0019      	movs	r1, r3
 8004496:	2003      	movs	r0, #3
 8004498:	f00f fcd0 	bl	8013e3c <CreateLine>
    ENS160TimeStamp = HAL_GetTick() + 780000;  // 4 times an hour
 800449c:	f010 fa46 	bl	801492c <HAL_GetTick>
 80044a0:	0003      	movs	r3, r0
 80044a2:	4ab9      	ldr	r2, [pc, #740]	@ (8004788 <ENS_Upkeep+0x330>)
 80044a4:	189a      	adds	r2, r3, r2
 80044a6:	4bb3      	ldr	r3, [pc, #716]	@ (8004774 <ENS_Upkeep+0x31c>)
 80044a8:	601a      	str	r2, [r3, #0]
    if (weekday != offday) {  // try to enable device again
 80044aa:	4bb8      	ldr	r3, [pc, #736]	@ (800478c <ENS_Upkeep+0x334>)
 80044ac:	781a      	ldrb	r2, [r3, #0]
 80044ae:	4bb8      	ldr	r3, [pc, #736]	@ (8004790 <ENS_Upkeep+0x338>)
 80044b0:	781b      	ldrb	r3, [r3, #0]
 80044b2:	429a      	cmp	r2, r3
 80044b4:	d100      	bne.n	80044b8 <ENS_Upkeep+0x60>
 80044b6:	e1d0      	b.n	800485a <ENS_Upkeep+0x402>
      ENSState = ENS_STATE_WAIT;
 80044b8:	4baf      	ldr	r3, [pc, #700]	@ (8004778 <ENS_Upkeep+0x320>)
 80044ba:	2208      	movs	r2, #8
 80044bc:	701a      	strb	r2, [r3, #0]
    }
    break;
 80044be:	e1cc      	b.n	800485a <ENS_Upkeep+0x402>

  case ENS_STATE_INIT:
    if (getSensorLock() != FREE) {
 80044c0:	f009 fc9e 	bl	800de00 <getSensorLock>
 80044c4:	1e03      	subs	r3, r0, #0
 80044c6:	d000      	beq.n	80044ca <ENS_Upkeep+0x72>
 80044c8:	e1c9      	b.n	800485e <ENS_Upkeep+0x406>
      break;
    }
    setSensorLock(ENS160);
 80044ca:	2004      	movs	r0, #4
 80044cc:	f009 fc84 	bl	800ddd8 <setSensorLock>
    bool result = ENS160_setMode(ENS160_OPMODE_STD);
 80044d0:	1d3c      	adds	r4, r7, #4
 80044d2:	2002      	movs	r0, #2
 80044d4:	f7ff fc9a 	bl	8003e0c <ENS160_setMode>
 80044d8:	0003      	movs	r3, r0
 80044da:	7023      	strb	r3, [r4, #0]
    Debug("ENS160 switched to standard mode %s", result?"done.":"failed.");
 80044dc:	1d3b      	adds	r3, r7, #4
 80044de:	781b      	ldrb	r3, [r3, #0]
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d001      	beq.n	80044e8 <ENS_Upkeep+0x90>
 80044e4:	4bab      	ldr	r3, [pc, #684]	@ (8004794 <ENS_Upkeep+0x33c>)
 80044e6:	e000      	b.n	80044ea <ENS_Upkeep+0x92>
 80044e8:	4bab      	ldr	r3, [pc, #684]	@ (8004798 <ENS_Upkeep+0x340>)
 80044ea:	4aac      	ldr	r2, [pc, #688]	@ (800479c <ENS_Upkeep+0x344>)
 80044ec:	49a5      	ldr	r1, [pc, #660]	@ (8004784 <ENS_Upkeep+0x32c>)
 80044ee:	2003      	movs	r0, #3
 80044f0:	f00f fca4 	bl	8013e3c <CreateLine>
    HAL_Delay(10); // wait for deferred DMA transfers
 80044f4:	200a      	movs	r0, #10
 80044f6:	f010 fa23 	bl	8014940 <HAL_Delay>
    setSensorLock(FREE);
 80044fa:	2000      	movs	r0, #0
 80044fc:	f009 fc6c 	bl	800ddd8 <setSensorLock>
    ENSState = ENS_STATUS_CHECK;
 8004500:	4b9d      	ldr	r3, [pc, #628]	@ (8004778 <ENS_Upkeep+0x320>)
 8004502:	2203      	movs	r2, #3
 8004504:	701a      	strb	r2, [r3, #0]
    ENS160TimeStamp = HAL_GetTick() + 1000;
 8004506:	f010 fa11 	bl	801492c <HAL_GetTick>
 800450a:	0003      	movs	r3, r0
 800450c:	22fa      	movs	r2, #250	@ 0xfa
 800450e:	0092      	lsls	r2, r2, #2
 8004510:	189a      	adds	r2, r3, r2
 8004512:	4b98      	ldr	r3, [pc, #608]	@ (8004774 <ENS_Upkeep+0x31c>)
 8004514:	601a      	str	r2, [r3, #0]
    break;
 8004516:	e1ab      	b.n	8004870 <ENS_Upkeep+0x418>

  case ENS_STATUS_CHECK:
    if (getSensorLock() != FREE) {
 8004518:	f009 fc72 	bl	800de00 <getSensorLock>
 800451c:	1e03      	subs	r3, r0, #0
 800451e:	d000      	beq.n	8004522 <ENS_Upkeep+0xca>
 8004520:	e19f      	b.n	8004862 <ENS_Upkeep+0x40a>
      break;
    }
    setSensorLock(ENS160);
 8004522:	2004      	movs	r0, #4
 8004524:	f009 fc58 	bl	800ddd8 <setSensorLock>
    status = ENS160_readStatus();
 8004528:	1d7c      	adds	r4, r7, #5
 800452a:	f7ff fd1f 	bl	8003f6c <ENS160_readStatus>
 800452e:	0003      	movs	r3, r0
 8004530:	7023      	strb	r3, [r4, #0]
    HAL_Delay(10); // wait for deferred DMA transfers
 8004532:	200a      	movs	r0, #10
 8004534:	f010 fa04 	bl	8014940 <HAL_Delay>
    setSensorLock(FREE);
 8004538:	2000      	movs	r0, #0
 800453a:	f009 fc4d 	bl	800ddd8 <setSensorLock>
    if ((status & 0x0C) != 0) {
 800453e:	1d7b      	adds	r3, r7, #5
 8004540:	781b      	ldrb	r3, [r3, #0]
 8004542:	220c      	movs	r2, #12
 8004544:	4013      	ands	r3, r2
 8004546:	d02e      	beq.n	80045a6 <ENS_Upkeep+0x14e>
      switch (status >> 2) {
 8004548:	1d7b      	adds	r3, r7, #5
 800454a:	781b      	ldrb	r3, [r3, #0]
 800454c:	089b      	lsrs	r3, r3, #2
 800454e:	b2db      	uxtb	r3, r3
 8004550:	2b03      	cmp	r3, #3
 8004552:	d013      	beq.n	800457c <ENS_Upkeep+0x124>
 8004554:	dc19      	bgt.n	800458a <ENS_Upkeep+0x132>
 8004556:	2b01      	cmp	r3, #1
 8004558:	d002      	beq.n	8004560 <ENS_Upkeep+0x108>
 800455a:	2b02      	cmp	r3, #2
 800455c:	d007      	beq.n	800456e <ENS_Upkeep+0x116>
 800455e:	e014      	b.n	800458a <ENS_Upkeep+0x132>
      case 1:
        Debug("ENS160 Warm-Up phase");
 8004560:	4a8f      	ldr	r2, [pc, #572]	@ (80047a0 <ENS_Upkeep+0x348>)
 8004562:	4b88      	ldr	r3, [pc, #544]	@ (8004784 <ENS_Upkeep+0x32c>)
 8004564:	0019      	movs	r1, r3
 8004566:	2003      	movs	r0, #3
 8004568:	f00f fc68 	bl	8013e3c <CreateLine>
        break;
 800456c:	e00d      	b.n	800458a <ENS_Upkeep+0x132>
      case 2:
        Debug("ENS160 Initial Start-UP phase");
 800456e:	4a8d      	ldr	r2, [pc, #564]	@ (80047a4 <ENS_Upkeep+0x34c>)
 8004570:	4b84      	ldr	r3, [pc, #528]	@ (8004784 <ENS_Upkeep+0x32c>)
 8004572:	0019      	movs	r1, r3
 8004574:	2003      	movs	r0, #3
 8004576:	f00f fc61 	bl	8013e3c <CreateLine>
        break;
 800457a:	e006      	b.n	800458a <ENS_Upkeep+0x132>
      case 3:
        Debug("ENS160 Invalid output");
 800457c:	4a8a      	ldr	r2, [pc, #552]	@ (80047a8 <ENS_Upkeep+0x350>)
 800457e:	4b81      	ldr	r3, [pc, #516]	@ (8004784 <ENS_Upkeep+0x32c>)
 8004580:	0019      	movs	r1, r3
 8004582:	2003      	movs	r0, #3
 8004584:	f00f fc5a 	bl	8013e3c <CreateLine>
        break;
 8004588:	46c0      	nop			@ (mov r8, r8)
      }
      if ((status & 0x03) == 0) {
 800458a:	1d7b      	adds	r3, r7, #5
 800458c:	781b      	ldrb	r3, [r3, #0]
 800458e:	2203      	movs	r2, #3
 8004590:	4013      	ands	r3, r2
 8004592:	d108      	bne.n	80045a6 <ENS_Upkeep+0x14e>
        ENS160TimeStamp = HAL_GetTick() + 1000;
 8004594:	f010 f9ca 	bl	801492c <HAL_GetTick>
 8004598:	0003      	movs	r3, r0
 800459a:	22fa      	movs	r2, #250	@ 0xfa
 800459c:	0092      	lsls	r2, r2, #2
 800459e:	189a      	adds	r2, r3, r2
 80045a0:	4b74      	ldr	r3, [pc, #464]	@ (8004774 <ENS_Upkeep+0x31c>)
 80045a2:	601a      	str	r2, [r3, #0]
//        ENSState = ENS_LOW_POWER;
//        ENSState = ENS_STATE_WAIT;
        break;
 80045a4:	e164      	b.n	8004870 <ENS_Upkeep+0x418>
      }
    }
    ENSState = ENS_STATE_START_MEASUREMENTS;
 80045a6:	4b74      	ldr	r3, [pc, #464]	@ (8004778 <ENS_Upkeep+0x320>)
 80045a8:	2204      	movs	r2, #4
 80045aa:	701a      	strb	r2, [r3, #0]
    break;
 80045ac:	e160      	b.n	8004870 <ENS_Upkeep+0x418>

  case ENS_STATE_START_MEASUREMENTS:
    if ((getSensorLock() != FREE) && (getSensorLock() != ENS160)) {
 80045ae:	f009 fc27 	bl	800de00 <getSensorLock>
 80045b2:	1e03      	subs	r3, r0, #0
 80045b4:	d036      	beq.n	8004624 <ENS_Upkeep+0x1cc>
 80045b6:	f009 fc23 	bl	800de00 <getSensorLock>
 80045ba:	0003      	movs	r3, r0
 80045bc:	2b04      	cmp	r3, #4
 80045be:	d031      	beq.n	8004624 <ENS_Upkeep+0x1cc>
      uint8_t locktype = getSensorLock();
 80045c0:	1dbc      	adds	r4, r7, #6
 80045c2:	f009 fc1d 	bl	800de00 <getSensorLock>
 80045c6:	0003      	movs	r3, r0
 80045c8:	7023      	strb	r3, [r4, #0]
      Debug("Lock is not from ENS160, but from %s",
 80045ca:	1dbb      	adds	r3, r7, #6
 80045cc:	781b      	ldrb	r3, [r3, #0]
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d019      	beq.n	8004606 <ENS_Upkeep+0x1ae>
 80045d2:	1dbb      	adds	r3, r7, #6
 80045d4:	781b      	ldrb	r3, [r3, #0]
 80045d6:	2b01      	cmp	r3, #1
 80045d8:	d013      	beq.n	8004602 <ENS_Upkeep+0x1aa>
 80045da:	1dbb      	adds	r3, r7, #6
 80045dc:	781b      	ldrb	r3, [r3, #0]
 80045de:	2b05      	cmp	r3, #5
 80045e0:	d00d      	beq.n	80045fe <ENS_Upkeep+0x1a6>
 80045e2:	1dbb      	adds	r3, r7, #6
 80045e4:	781b      	ldrb	r3, [r3, #0]
 80045e6:	2b02      	cmp	r3, #2
 80045e8:	d007      	beq.n	80045fa <ENS_Upkeep+0x1a2>
 80045ea:	1dbb      	adds	r3, r7, #6
 80045ec:	781b      	ldrb	r3, [r3, #0]
 80045ee:	2b04      	cmp	r3, #4
 80045f0:	d101      	bne.n	80045f6 <ENS_Upkeep+0x19e>
 80045f2:	4b6e      	ldr	r3, [pc, #440]	@ (80047ac <ENS_Upkeep+0x354>)
 80045f4:	e008      	b.n	8004608 <ENS_Upkeep+0x1b0>
 80045f6:	4b6e      	ldr	r3, [pc, #440]	@ (80047b0 <ENS_Upkeep+0x358>)
 80045f8:	e006      	b.n	8004608 <ENS_Upkeep+0x1b0>
 80045fa:	4b6e      	ldr	r3, [pc, #440]	@ (80047b4 <ENS_Upkeep+0x35c>)
 80045fc:	e004      	b.n	8004608 <ENS_Upkeep+0x1b0>
 80045fe:	4b6e      	ldr	r3, [pc, #440]	@ (80047b8 <ENS_Upkeep+0x360>)
 8004600:	e002      	b.n	8004608 <ENS_Upkeep+0x1b0>
 8004602:	4b6e      	ldr	r3, [pc, #440]	@ (80047bc <ENS_Upkeep+0x364>)
 8004604:	e000      	b.n	8004608 <ENS_Upkeep+0x1b0>
 8004606:	4b6e      	ldr	r3, [pc, #440]	@ (80047c0 <ENS_Upkeep+0x368>)
 8004608:	4a6e      	ldr	r2, [pc, #440]	@ (80047c4 <ENS_Upkeep+0x36c>)
 800460a:	495e      	ldr	r1, [pc, #376]	@ (8004784 <ENS_Upkeep+0x32c>)
 800460c:	2003      	movs	r0, #3
 800460e:	f00f fc15 	bl	8013e3c <CreateLine>
          locktype==FREE?"FREE":locktype==HIDS?"HIDS":locktype==SGP40?"SGP40":locktype==AHT20?"AHT20":locktype==ENS160?"ENS160":"unknown");
      ENS160TimeStamp = HAL_GetTick() + 333;
 8004612:	f010 f98b 	bl	801492c <HAL_GetTick>
 8004616:	0003      	movs	r3, r0
 8004618:	334e      	adds	r3, #78	@ 0x4e
 800461a:	33ff      	adds	r3, #255	@ 0xff
 800461c:	001a      	movs	r2, r3
 800461e:	4b55      	ldr	r3, [pc, #340]	@ (8004774 <ENS_Upkeep+0x31c>)
 8004620:	601a      	str	r2, [r3, #0]
      break;
 8004622:	e125      	b.n	8004870 <ENS_Upkeep+0x418>
    }
    setSensorLock(ENS160);
 8004624:	2004      	movs	r0, #4
 8004626:	f009 fbd7 	bl	800ddd8 <setSensorLock>
    status = ENS160_readStatus();
 800462a:	1d7c      	adds	r4, r7, #5
 800462c:	f7ff fc9e 	bl	8003f6c <ENS160_readStatus>
 8004630:	0003      	movs	r3, r0
 8004632:	7023      	strb	r3, [r4, #0]
    if ((status & 0x02) == 0) {
 8004634:	1d7b      	adds	r3, r7, #5
 8004636:	781b      	ldrb	r3, [r3, #0]
 8004638:	2202      	movs	r2, #2
 800463a:	4013      	ands	r3, r2
 800463c:	d10e      	bne.n	800465c <ENS_Upkeep+0x204>
      ENS160TimeStamp = HAL_GetTick() + 500;
 800463e:	f010 f975 	bl	801492c <HAL_GetTick>
 8004642:	0003      	movs	r3, r0
 8004644:	33f5      	adds	r3, #245	@ 0xf5
 8004646:	33ff      	adds	r3, #255	@ 0xff
 8004648:	001a      	movs	r2, r3
 800464a:	4b4a      	ldr	r3, [pc, #296]	@ (8004774 <ENS_Upkeep+0x31c>)
 800464c:	601a      	str	r2, [r3, #0]
//      Debug("ENS160 status register is: %d", status);
      HAL_Delay(10); // wait for deferred DMA transfers
 800464e:	200a      	movs	r0, #10
 8004650:	f010 f976 	bl	8014940 <HAL_Delay>
      setSensorLock(FREE);
 8004654:	2000      	movs	r0, #0
 8004656:	f009 fbbf 	bl	800ddd8 <setSensorLock>
      break;
 800465a:	e109      	b.n	8004870 <ENS_Upkeep+0x418>
    }
    ENS160_measure(false);
 800465c:	2000      	movs	r0, #0
 800465e:	f7ff fca5 	bl	8003fac <ENS160_measure>
    HAL_Delay(10);
 8004662:	200a      	movs	r0, #10
 8004664:	f010 f96c 	bl	8014940 <HAL_Delay>
    ENS160_measureRaw(false);
 8004668:	2000      	movs	r0, #0
 800466a:	f7ff fd1b 	bl	80040a4 <ENS160_measureRaw>
    HAL_Delay(10);
 800466e:	200a      	movs	r0, #10
 8004670:	f010 f966 	bl	8014940 <HAL_Delay>
    setSensorLock(FREE);
 8004674:	2000      	movs	r0, #0
 8004676:	f009 fbaf 	bl	800ddd8 <setSensorLock>
    ENSState = ENS_STATE_PROCESS_RESULTS;
 800467a:	4b3f      	ldr	r3, [pc, #252]	@ (8004778 <ENS_Upkeep+0x320>)
 800467c:	2206      	movs	r2, #6
 800467e:	701a      	strb	r2, [r3, #0]
    break;
 8004680:	e0f6      	b.n	8004870 <ENS_Upkeep+0x418>

  case ENS_STATE_PROCESS_RESULTS:
    if (enscnt == 1){
 8004682:	4b51      	ldr	r3, [pc, #324]	@ (80047c8 <ENS_Upkeep+0x370>)
 8004684:	781b      	ldrb	r3, [r3, #0]
 8004686:	2b01      	cmp	r3, #1
 8004688:	d10f      	bne.n	80046aa <ENS_Upkeep+0x252>
    Info("ENS160 AQI: %d, TVOC: %dppb, eCO2: %dppm", pred._data_aqi, pred._data_tvoc, pred._data_eco2);
 800468a:	4b50      	ldr	r3, [pc, #320]	@ (80047cc <ENS_Upkeep+0x374>)
 800468c:	781b      	ldrb	r3, [r3, #0]
 800468e:	001c      	movs	r4, r3
 8004690:	4b4e      	ldr	r3, [pc, #312]	@ (80047cc <ENS_Upkeep+0x374>)
 8004692:	885b      	ldrh	r3, [r3, #2]
 8004694:	0018      	movs	r0, r3
 8004696:	4b4d      	ldr	r3, [pc, #308]	@ (80047cc <ENS_Upkeep+0x374>)
 8004698:	889b      	ldrh	r3, [r3, #4]
 800469a:	4a4d      	ldr	r2, [pc, #308]	@ (80047d0 <ENS_Upkeep+0x378>)
 800469c:	494d      	ldr	r1, [pc, #308]	@ (80047d4 <ENS_Upkeep+0x37c>)
 800469e:	9301      	str	r3, [sp, #4]
 80046a0:	9000      	str	r0, [sp, #0]
 80046a2:	0023      	movs	r3, r4
 80046a4:	2002      	movs	r0, #2
 80046a6:	f00f fbc9 	bl	8013e3c <CreateLine>
//    Debug("R HP0: %d Ohm, Baseline: %d", raw._hp0_rs, raw._hp0_bl);
//    Debug("R HP1: %d Ohm, Baseline: %d", raw._hp1_rs, raw._hp1_bl);
//    Debug("R HP2: %d Ohm, Baseline: %d", raw._hp2_rs, raw._hp2_bl);
//    Debug("R HP3: %d Ohm, Baseline: %d", raw._hp3_rs, raw._hp3_bl);
    }
    (enscnt == 5)?enscnt=0:enscnt++;
 80046aa:	4b47      	ldr	r3, [pc, #284]	@ (80047c8 <ENS_Upkeep+0x370>)
 80046ac:	781b      	ldrb	r3, [r3, #0]
 80046ae:	2b05      	cmp	r3, #5
 80046b0:	d103      	bne.n	80046ba <ENS_Upkeep+0x262>
 80046b2:	4b45      	ldr	r3, [pc, #276]	@ (80047c8 <ENS_Upkeep+0x370>)
 80046b4:	2200      	movs	r2, #0
 80046b6:	701a      	strb	r2, [r3, #0]
 80046b8:	e005      	b.n	80046c6 <ENS_Upkeep+0x26e>
 80046ba:	4b43      	ldr	r3, [pc, #268]	@ (80047c8 <ENS_Upkeep+0x370>)
 80046bc:	781b      	ldrb	r3, [r3, #0]
 80046be:	3301      	adds	r3, #1
 80046c0:	b2da      	uxtb	r2, r3
 80046c2:	4b41      	ldr	r3, [pc, #260]	@ (80047c8 <ENS_Upkeep+0x370>)
 80046c4:	701a      	strb	r2, [r3, #0]
    setENS160(pred._data_aqi, pred._data_tvoc, pred._data_eco2);
 80046c6:	4b41      	ldr	r3, [pc, #260]	@ (80047cc <ENS_Upkeep+0x374>)
 80046c8:	7818      	ldrb	r0, [r3, #0]
 80046ca:	4b40      	ldr	r3, [pc, #256]	@ (80047cc <ENS_Upkeep+0x374>)
 80046cc:	8859      	ldrh	r1, [r3, #2]
 80046ce:	4b3f      	ldr	r3, [pc, #252]	@ (80047cc <ENS_Upkeep+0x374>)
 80046d0:	889b      	ldrh	r3, [r3, #4]
 80046d2:	001a      	movs	r2, r3
 80046d4:	f000 fa24 	bl	8004b20 <setENS160>
    ENSState = ENS_LOW_POWER;
 80046d8:	4b27      	ldr	r3, [pc, #156]	@ (8004778 <ENS_Upkeep+0x320>)
 80046da:	2201      	movs	r2, #1
 80046dc:	701a      	strb	r2, [r3, #0]
    break;
 80046de:	e0c7      	b.n	8004870 <ENS_Upkeep+0x418>

  case ENS_LOW_POWER:
    ENS160TimeStamp = HAL_GetTick() + 1000;
 80046e0:	f010 f924 	bl	801492c <HAL_GetTick>
 80046e4:	0003      	movs	r3, r0
 80046e6:	22fa      	movs	r2, #250	@ 0xfa
 80046e8:	0092      	lsls	r2, r2, #2
 80046ea:	189a      	adds	r2, r3, r2
 80046ec:	4b21      	ldr	r3, [pc, #132]	@ (8004774 <ENS_Upkeep+0x31c>)
 80046ee:	601a      	str	r2, [r3, #0]
    if (!usbPluggedIn && !userToggle && (enscnt >= 2)) {
 80046f0:	4b39      	ldr	r3, [pc, #228]	@ (80047d8 <ENS_Upkeep+0x380>)
 80046f2:	781b      	ldrb	r3, [r3, #0]
 80046f4:	2201      	movs	r2, #1
 80046f6:	4053      	eors	r3, r2
 80046f8:	b2db      	uxtb	r3, r3
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d035      	beq.n	800476a <ENS_Upkeep+0x312>
 80046fe:	4b37      	ldr	r3, [pc, #220]	@ (80047dc <ENS_Upkeep+0x384>)
 8004700:	781b      	ldrb	r3, [r3, #0]
 8004702:	2201      	movs	r2, #1
 8004704:	4053      	eors	r3, r2
 8004706:	b2db      	uxtb	r3, r3
 8004708:	2b00      	cmp	r3, #0
 800470a:	d02e      	beq.n	800476a <ENS_Upkeep+0x312>
 800470c:	4b2e      	ldr	r3, [pc, #184]	@ (80047c8 <ENS_Upkeep+0x370>)
 800470e:	781b      	ldrb	r3, [r3, #0]
 8004710:	2b01      	cmp	r3, #1
 8004712:	d92a      	bls.n	800476a <ENS_Upkeep+0x312>
      if (getSensorLock() != FREE) {
 8004714:	f009 fb74 	bl	800de00 <getSensorLock>
 8004718:	1e03      	subs	r3, r0, #0
 800471a:	d000      	beq.n	800471e <ENS_Upkeep+0x2c6>
 800471c:	e0a3      	b.n	8004866 <ENS_Upkeep+0x40e>
        break;
      }
      setSensorLock(ENS160);
 800471e:	2004      	movs	r0, #4
 8004720:	f009 fb5a 	bl	800ddd8 <setSensorLock>
      bool result = ENS160_setMode(ENS160_OPMODE_DEP_SLEEP);
 8004724:	1cfc      	adds	r4, r7, #3
 8004726:	2000      	movs	r0, #0
 8004728:	f7ff fb70 	bl	8003e0c <ENS160_setMode>
 800472c:	0003      	movs	r3, r0
 800472e:	7023      	strb	r3, [r4, #0]
      Debug("ENS160 switched to deep sleep %s, sample counter is: %d", result?"done.":"failed.", enscnt);
 8004730:	1cfb      	adds	r3, r7, #3
 8004732:	781b      	ldrb	r3, [r3, #0]
 8004734:	2b00      	cmp	r3, #0
 8004736:	d001      	beq.n	800473c <ENS_Upkeep+0x2e4>
 8004738:	4b16      	ldr	r3, [pc, #88]	@ (8004794 <ENS_Upkeep+0x33c>)
 800473a:	e000      	b.n	800473e <ENS_Upkeep+0x2e6>
 800473c:	4b16      	ldr	r3, [pc, #88]	@ (8004798 <ENS_Upkeep+0x340>)
 800473e:	4a22      	ldr	r2, [pc, #136]	@ (80047c8 <ENS_Upkeep+0x370>)
 8004740:	7812      	ldrb	r2, [r2, #0]
 8004742:	0010      	movs	r0, r2
 8004744:	4a26      	ldr	r2, [pc, #152]	@ (80047e0 <ENS_Upkeep+0x388>)
 8004746:	490f      	ldr	r1, [pc, #60]	@ (8004784 <ENS_Upkeep+0x32c>)
 8004748:	9000      	str	r0, [sp, #0]
 800474a:	2003      	movs	r0, #3
 800474c:	f00f fb76 	bl	8013e3c <CreateLine>
      HAL_Delay(10); // wait for deferred DMA transfers
 8004750:	200a      	movs	r0, #10
 8004752:	f010 f8f5 	bl	8014940 <HAL_Delay>
      setSensorLock(FREE);
 8004756:	2000      	movs	r0, #0
 8004758:	f009 fb3e 	bl	800ddd8 <setSensorLock>
      ENS160TimeStamp = HAL_GetTick() + 45000;
 800475c:	f010 f8e6 	bl	801492c <HAL_GetTick>
 8004760:	0003      	movs	r3, r0
 8004762:	4a20      	ldr	r2, [pc, #128]	@ (80047e4 <ENS_Upkeep+0x38c>)
 8004764:	189a      	adds	r2, r3, r2
 8004766:	4b03      	ldr	r3, [pc, #12]	@ (8004774 <ENS_Upkeep+0x31c>)
 8004768:	601a      	str	r2, [r3, #0]
    }
    ENSState = ENS_STATE_WAIT;
 800476a:	4b03      	ldr	r3, [pc, #12]	@ (8004778 <ENS_Upkeep+0x320>)
 800476c:	2208      	movs	r2, #8
 800476e:	701a      	strb	r2, [r3, #0]
    break;
 8004770:	e07e      	b.n	8004870 <ENS_Upkeep+0x418>
 8004772:	46c0      	nop			@ (mov r8, r8)
 8004774:	2000045c 	.word	0x2000045c
 8004778:	20000000 	.word	0x20000000
 800477c:	0802dd3c 	.word	0x0802dd3c
 8004780:	0802a76c 	.word	0x0802a76c
 8004784:	0802a674 	.word	0x0802a674
 8004788:	000be6e0 	.word	0x000be6e0
 800478c:	20000e43 	.word	0x20000e43
 8004790:	20000461 	.word	0x20000461
 8004794:	0802a7a0 	.word	0x0802a7a0
 8004798:	0802a7a8 	.word	0x0802a7a8
 800479c:	0802a7b0 	.word	0x0802a7b0
 80047a0:	0802a7d4 	.word	0x0802a7d4
 80047a4:	0802a7ec 	.word	0x0802a7ec
 80047a8:	0802a80c 	.word	0x0802a80c
 80047ac:	0802a824 	.word	0x0802a824
 80047b0:	0802a82c 	.word	0x0802a82c
 80047b4:	0802a834 	.word	0x0802a834
 80047b8:	0802a83c 	.word	0x0802a83c
 80047bc:	0802a844 	.word	0x0802a844
 80047c0:	0802a84c 	.word	0x0802a84c
 80047c4:	0802a854 	.word	0x0802a854
 80047c8:	20000460 	.word	0x20000460
 80047cc:	20000490 	.word	0x20000490
 80047d0:	0802a87c 	.word	0x0802a87c
 80047d4:	0802a6e4 	.word	0x0802a6e4
 80047d8:	2000214d 	.word	0x2000214d
 80047dc:	2000214e 	.word	0x2000214e
 80047e0:	0802a8a8 	.word	0x0802a8a8
 80047e4:	0000afc8 	.word	0x0000afc8

  case ENS_STATE_WAIT:
      if (getSensorLock() != FREE) {
 80047e8:	f009 fb0a 	bl	800de00 <getSensorLock>
 80047ec:	1e03      	subs	r3, r0, #0
 80047ee:	d13c      	bne.n	800486a <ENS_Upkeep+0x412>
        break;
      }
      setSensorLock(ENS160);
 80047f0:	2004      	movs	r0, #4
 80047f2:	f009 faf1 	bl	800ddd8 <setSensorLock>
      uint8_t data;
      ReadMemRegister(ENS160_REG_OPMODE, 1, &data, 1);
 80047f6:	1cba      	adds	r2, r7, #2
 80047f8:	2301      	movs	r3, #1
 80047fa:	2101      	movs	r1, #1
 80047fc:	2010      	movs	r0, #16
 80047fe:	f7ff f96d 	bl	8003adc <ReadMemRegister>
      if (data == 0) {
 8004802:	1cbb      	adds	r3, r7, #2
 8004804:	781b      	ldrb	r3, [r3, #0]
 8004806:	2b00      	cmp	r3, #0
 8004808:	d111      	bne.n	800482e <ENS_Upkeep+0x3d6>
        bool result = ENS160_setMode(ENS160_OPMODE_STD);
 800480a:	1dfc      	adds	r4, r7, #7
 800480c:	2002      	movs	r0, #2
 800480e:	f7ff fafd 	bl	8003e0c <ENS160_setMode>
 8004812:	0003      	movs	r3, r0
 8004814:	7023      	strb	r3, [r4, #0]
        Debug("ENS160 switched to standard operating mode %s", result?"done.":"failed.");
 8004816:	1dfb      	adds	r3, r7, #7
 8004818:	781b      	ldrb	r3, [r3, #0]
 800481a:	2b00      	cmp	r3, #0
 800481c:	d001      	beq.n	8004822 <ENS_Upkeep+0x3ca>
 800481e:	4b17      	ldr	r3, [pc, #92]	@ (800487c <ENS_Upkeep+0x424>)
 8004820:	e000      	b.n	8004824 <ENS_Upkeep+0x3cc>
 8004822:	4b17      	ldr	r3, [pc, #92]	@ (8004880 <ENS_Upkeep+0x428>)
 8004824:	4a17      	ldr	r2, [pc, #92]	@ (8004884 <ENS_Upkeep+0x42c>)
 8004826:	4918      	ldr	r1, [pc, #96]	@ (8004888 <ENS_Upkeep+0x430>)
 8004828:	2003      	movs	r0, #3
 800482a:	f00f fb07 	bl	8013e3c <CreateLine>
      }
      HAL_Delay(10); // wait for deferred DMA transfers
 800482e:	200a      	movs	r0, #10
 8004830:	f010 f886 	bl	8014940 <HAL_Delay>
      setSensorLock(FREE);
 8004834:	2000      	movs	r0, #0
 8004836:	f009 facf 	bl	800ddd8 <setSensorLock>
      ENSState = ENS_STATUS_CHECK;
 800483a:	4b14      	ldr	r3, [pc, #80]	@ (800488c <ENS_Upkeep+0x434>)
 800483c:	2203      	movs	r2, #3
 800483e:	701a      	strb	r2, [r3, #0]
    break;
 8004840:	e016      	b.n	8004870 <ENS_Upkeep+0x418>


  default:
    // Handle unexpected state
    ENSState = ENS_STATE_INIT;
 8004842:	4b12      	ldr	r3, [pc, #72]	@ (800488c <ENS_Upkeep+0x434>)
 8004844:	2202      	movs	r2, #2
 8004846:	701a      	strb	r2, [r3, #0]
    if (getSensorLock() != ENS160) {
 8004848:	f009 fada 	bl	800de00 <getSensorLock>
 800484c:	0003      	movs	r3, r0
 800484e:	2b04      	cmp	r3, #4
 8004850:	d00d      	beq.n	800486e <ENS_Upkeep+0x416>
      setSensorLock(FREE);
 8004852:	2000      	movs	r0, #0
 8004854:	f009 fac0 	bl	800ddd8 <setSensorLock>
    }
    break;
 8004858:	e009      	b.n	800486e <ENS_Upkeep+0x416>
    break;
 800485a:	46c0      	nop			@ (mov r8, r8)
 800485c:	e008      	b.n	8004870 <ENS_Upkeep+0x418>
      break;
 800485e:	46c0      	nop			@ (mov r8, r8)
 8004860:	e006      	b.n	8004870 <ENS_Upkeep+0x418>
      break;
 8004862:	46c0      	nop			@ (mov r8, r8)
 8004864:	e004      	b.n	8004870 <ENS_Upkeep+0x418>
        break;
 8004866:	46c0      	nop			@ (mov r8, r8)
 8004868:	e002      	b.n	8004870 <ENS_Upkeep+0x418>
        break;
 800486a:	46c0      	nop			@ (mov r8, r8)
 800486c:	e000      	b.n	8004870 <ENS_Upkeep+0x418>
    break;
 800486e:	46c0      	nop			@ (mov r8, r8)
  }
  return ENSState;
 8004870:	4b06      	ldr	r3, [pc, #24]	@ (800488c <ENS_Upkeep+0x434>)
 8004872:	781b      	ldrb	r3, [r3, #0]
}
 8004874:	0018      	movs	r0, r3
 8004876:	46bd      	mov	sp, r7
 8004878:	b003      	add	sp, #12
 800487a:	bd90      	pop	{r4, r7, pc}
 800487c:	0802a7a0 	.word	0x0802a7a0
 8004880:	0802a7a8 	.word	0x0802a7a8
 8004884:	0802a8e0 	.word	0x0802a8e0
 8004888:	0802a674 	.word	0x0802a674
 800488c:	20000000 	.word	0x20000000

08004890 <forceNTPupdate>:
static AT_Mode Mode;
static ESP_Test TestState = ESP_TEST_INIT;

MeasurementValues MeasVal;

void forceNTPupdate() {
 8004890:	b580      	push	{r7, lr}
 8004892:	af00      	add	r7, sp, #0
  ESPNTPTimeStamp = 0;
 8004894:	4b02      	ldr	r3, [pc, #8]	@ (80048a0 <forceNTPupdate+0x10>)
 8004896:	2200      	movs	r2, #0
 8004898:	601a      	str	r2, [r3, #0]
}
 800489a:	46c0      	nop			@ (mov r8, r8)
 800489c:	46bd      	mov	sp, r7
 800489e:	bd80      	pop	{r7, pc}
 80048a0:	20000698 	.word	0x20000698

080048a4 <setESPTimeStamp>:

void setESPTimeStamp(uint32_t delayms) {
 80048a4:	b580      	push	{r7, lr}
 80048a6:	b082      	sub	sp, #8
 80048a8:	af00      	add	r7, sp, #0
 80048aa:	6078      	str	r0, [r7, #4]
  ESPTimeStamp = HAL_GetTick() + delayms;
 80048ac:	f010 f83e 	bl	801492c <HAL_GetTick>
 80048b0:	0002      	movs	r2, r0
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	18d2      	adds	r2, r2, r3
 80048b6:	4b03      	ldr	r3, [pc, #12]	@ (80048c4 <setESPTimeStamp+0x20>)
 80048b8:	601a      	str	r2, [r3, #0]
}
 80048ba:	46c0      	nop			@ (mov r8, r8)
 80048bc:	46bd      	mov	sp, r7
 80048be:	b002      	add	sp, #8
 80048c0:	bd80      	pop	{r7, pc}
 80048c2:	46c0      	nop			@ (mov r8, r8)
 80048c4:	20000694 	.word	0x20000694

080048c8 <setCharges>:

void setCharges(){
 80048c8:	b580      	push	{r7, lr}
 80048ca:	af00      	add	r7, sp, #0
  solarCharge = ReadSolarVoltage() / 1000.0;
 80048cc:	f005 f950 	bl	8009b70 <ReadSolarVoltage>
 80048d0:	0003      	movs	r3, r0
 80048d2:	0018      	movs	r0, r3
 80048d4:	f7fe ff8c 	bl	80037f0 <__aeabi_i2d>
 80048d8:	2200      	movs	r2, #0
 80048da:	4b07      	ldr	r3, [pc, #28]	@ (80048f8 <setCharges+0x30>)
 80048dc:	f7fd fc00 	bl	80020e0 <__aeabi_ddiv>
 80048e0:	0002      	movs	r2, r0
 80048e2:	000b      	movs	r3, r1
 80048e4:	0010      	movs	r0, r2
 80048e6:	0019      	movs	r1, r3
 80048e8:	f7ff f81c 	bl	8003924 <__aeabi_d2f>
 80048ec:	1c02      	adds	r2, r0, #0
 80048ee:	4b03      	ldr	r3, [pc, #12]	@ (80048fc <setCharges+0x34>)
 80048f0:	601a      	str	r2, [r3, #0]
}
 80048f2:	46c0      	nop			@ (mov r8, r8)
 80048f4:	46bd      	mov	sp, r7
 80048f6:	bd80      	pop	{r7, pc}
 80048f8:	408f4000 	.word	0x408f4000
 80048fc:	200005c0 	.word	0x200005c0

08004900 <getWifiCred>:

void getWifiCred(void){
 8004900:	b580      	push	{r7, lr}
 8004902:	af00      	add	r7, sp, #0
  ReadUint8ArrayEEprom(SSIDConfigAddr, (uint8_t*)Credentials.SSID, SSIDMaxLength);
 8004904:	4b14      	ldr	r3, [pc, #80]	@ (8004958 <getWifiCred+0x58>)
 8004906:	4815      	ldr	r0, [pc, #84]	@ (800495c <getWifiCred+0x5c>)
 8004908:	2220      	movs	r2, #32
 800490a:	0019      	movs	r1, r3
 800490c:	f007 fbf4 	bl	800c0f8 <ReadUint8ArrayEEprom>
  ReadUint8ArrayEEprom(pwdConfigAddr, (uint8_t*)Credentials.Password, pwdMaxLength);
 8004910:	4b13      	ldr	r3, [pc, #76]	@ (8004960 <getWifiCred+0x60>)
 8004912:	4814      	ldr	r0, [pc, #80]	@ (8004964 <getWifiCred+0x64>)
 8004914:	2240      	movs	r2, #64	@ 0x40
 8004916:	0019      	movs	r1, r3
 8004918:	f007 fbee 	bl	800c0f8 <ReadUint8ArrayEEprom>
  if ((Credentials.SSID[0] == 0) || (Credentials.Password[0] == 0)) {
 800491c:	4b0e      	ldr	r3, [pc, #56]	@ (8004958 <getWifiCred+0x58>)
 800491e:	781b      	ldrb	r3, [r3, #0]
 8004920:	2b00      	cmp	r3, #0
 8004922:	d004      	beq.n	800492e <getWifiCred+0x2e>
 8004924:	4b0c      	ldr	r3, [pc, #48]	@ (8004958 <getWifiCred+0x58>)
 8004926:	2220      	movs	r2, #32
 8004928:	5c9b      	ldrb	r3, [r3, r2]
 800492a:	2b00      	cmp	r3, #0
 800492c:	d105      	bne.n	800493a <getWifiCred+0x3a>
    Error("Wifi credentials not found, reprogram or connect to PC and type Helpme");
 800492e:	4a0e      	ldr	r2, [pc, #56]	@ (8004968 <getWifiCred+0x68>)
 8004930:	4b0e      	ldr	r3, [pc, #56]	@ (800496c <getWifiCred+0x6c>)
 8004932:	0019      	movs	r1, r3
 8004934:	2001      	movs	r0, #1
 8004936:	f00f fa81 	bl	8013e3c <CreateLine>
  }
  Info("The SSID is: %s", Credentials.SSID);
 800493a:	4b07      	ldr	r3, [pc, #28]	@ (8004958 <getWifiCred+0x58>)
 800493c:	4a0c      	ldr	r2, [pc, #48]	@ (8004970 <getWifiCred+0x70>)
 800493e:	490d      	ldr	r1, [pc, #52]	@ (8004974 <getWifiCred+0x74>)
 8004940:	2002      	movs	r0, #2
 8004942:	f00f fa7b 	bl	8013e3c <CreateLine>
  Info("The Password is: %s", Credentials.Password);
 8004946:	4b06      	ldr	r3, [pc, #24]	@ (8004960 <getWifiCred+0x60>)
 8004948:	4a0b      	ldr	r2, [pc, #44]	@ (8004978 <getWifiCred+0x78>)
 800494a:	490a      	ldr	r1, [pc, #40]	@ (8004974 <getWifiCred+0x74>)
 800494c:	2002      	movs	r0, #2
 800494e:	f00f fa75 	bl	8013e3c <CreateLine>
}
 8004952:	46c0      	nop			@ (mov r8, r8)
 8004954:	46bd      	mov	sp, r7
 8004956:	bd80      	pop	{r7, pc}
 8004958:	200006a0 	.word	0x200006a0
 800495c:	08080200 	.word	0x08080200
 8004960:	200006c0 	.word	0x200006c0
 8004964:	08080220 	.word	0x08080220
 8004968:	0802a910 	.word	0x0802a910
 800496c:	0802a958 	.word	0x0802a958
 8004970:	0802a95c 	.word	0x0802a95c
 8004974:	0802a96c 	.word	0x0802a96c
 8004978:	0802a970 	.word	0x0802a970

0800497c <checkName>:
  }
  test = (configSum == 0);
  return test;
}

bool checkName(){
 800497c:	b580      	push	{r7, lr}
 800497e:	b082      	sub	sp, #8
 8004980:	af00      	add	r7, sp, #0
  static uint8_t nameConfig[CustomNameMaxLength];
  static uint32_t configSum = 0;
  static bool test;
  ReadUint8ArrayEEprom(CustomNameConfigAddr, nameConfig, CustomNameMaxLength);
 8004982:	4b15      	ldr	r3, [pc, #84]	@ (80049d8 <checkName+0x5c>)
 8004984:	4815      	ldr	r0, [pc, #84]	@ (80049dc <checkName+0x60>)
 8004986:	2220      	movs	r2, #32
 8004988:	0019      	movs	r1, r3
 800498a:	f007 fbb5 	bl	800c0f8 <ReadUint8ArrayEEprom>
  for(uint8_t i = 0; i < IdSize; i++){
 800498e:	1dfb      	adds	r3, r7, #7
 8004990:	2200      	movs	r2, #0
 8004992:	701a      	strb	r2, [r3, #0]
 8004994:	e00e      	b.n	80049b4 <checkName+0x38>
    configSum += nameConfig[i];
 8004996:	1dfb      	adds	r3, r7, #7
 8004998:	781b      	ldrb	r3, [r3, #0]
 800499a:	4a0f      	ldr	r2, [pc, #60]	@ (80049d8 <checkName+0x5c>)
 800499c:	5cd3      	ldrb	r3, [r2, r3]
 800499e:	001a      	movs	r2, r3
 80049a0:	4b0f      	ldr	r3, [pc, #60]	@ (80049e0 <checkName+0x64>)
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	18d2      	adds	r2, r2, r3
 80049a6:	4b0e      	ldr	r3, [pc, #56]	@ (80049e0 <checkName+0x64>)
 80049a8:	601a      	str	r2, [r3, #0]
  for(uint8_t i = 0; i < IdSize; i++){
 80049aa:	1dfb      	adds	r3, r7, #7
 80049ac:	781a      	ldrb	r2, [r3, #0]
 80049ae:	1dfb      	adds	r3, r7, #7
 80049b0:	3201      	adds	r2, #1
 80049b2:	701a      	strb	r2, [r3, #0]
 80049b4:	1dfb      	adds	r3, r7, #7
 80049b6:	781b      	ldrb	r3, [r3, #0]
 80049b8:	2b0b      	cmp	r3, #11
 80049ba:	d9ec      	bls.n	8004996 <checkName+0x1a>
  }
  test = (configSum != 0);
 80049bc:	4b08      	ldr	r3, [pc, #32]	@ (80049e0 <checkName+0x64>)
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	1e5a      	subs	r2, r3, #1
 80049c2:	4193      	sbcs	r3, r2
 80049c4:	b2da      	uxtb	r2, r3
 80049c6:	4b07      	ldr	r3, [pc, #28]	@ (80049e4 <checkName+0x68>)
 80049c8:	701a      	strb	r2, [r3, #0]
  return test;
 80049ca:	4b06      	ldr	r3, [pc, #24]	@ (80049e4 <checkName+0x68>)
 80049cc:	781b      	ldrb	r3, [r3, #0]
}
 80049ce:	0018      	movs	r0, r3
 80049d0:	46bd      	mov	sp, r7
 80049d2:	b002      	add	sp, #8
 80049d4:	bd80      	pop	{r7, pc}
 80049d6:	46c0      	nop			@ (mov r8, r8)
 80049d8:	20000768 	.word	0x20000768
 80049dc:	08080090 	.word	0x08080090
 80049e0:	20000788 	.word	0x20000788
 80049e4:	2000078c 	.word	0x2000078c

080049e8 <setModePowerMail>:

#ifdef USE_MAIL
void setModePowerMail() {
 80049e8:	b580      	push	{r7, lr}
 80049ea:	b08c      	sub	sp, #48	@ 0x30
 80049ec:	af00      	add	r7, sp, #0
  uint8_t MailAPIKeyConfig[MailAPIKeyMaxLength];
  ReadUint8ArrayEEprom(MailAPIKeyConfigAddr, MailAPIKeyConfig, MailAPIKeyMaxLength);
 80049ee:	003b      	movs	r3, r7
 80049f0:	4814      	ldr	r0, [pc, #80]	@ (8004a44 <setModePowerMail+0x5c>)
 80049f2:	2230      	movs	r2, #48	@ 0x30
 80049f4:	0019      	movs	r1, r3
 80049f6:	f007 fb7f 	bl	800c0f8 <ReadUint8ArrayEEprom>
  if ( strlen((char*)MailAPIKeyConfig) == 0) {
 80049fa:	003b      	movs	r3, r7
 80049fc:	781b      	ldrb	r3, [r3, #0]
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d106      	bne.n	8004a10 <setModePowerMail+0x28>
    Error("No mail API key defined");
 8004a02:	4a11      	ldr	r2, [pc, #68]	@ (8004a48 <setModePowerMail+0x60>)
 8004a04:	4b11      	ldr	r3, [pc, #68]	@ (8004a4c <setModePowerMail+0x64>)
 8004a06:	0019      	movs	r1, r3
 8004a08:	2001      	movs	r0, #1
 8004a0a:	f00f fa17 	bl	8013e3c <CreateLine>
 8004a0e:	e015      	b.n	8004a3c <setModePowerMail+0x54>
    return;
  }
//  Debug("Powermail is forced.");
  sendpwremail = DO_PWR_MAIL;
 8004a10:	4b0f      	ldr	r3, [pc, #60]	@ (8004a50 <setModePowerMail+0x68>)
 8004a12:	2201      	movs	r2, #1
 8004a14:	701a      	strb	r2, [r3, #0]
  Mode = AT_MODE_MAIL;
 8004a16:	4b0f      	ldr	r3, [pc, #60]	@ (8004a54 <setModePowerMail+0x6c>)
 8004a18:	2206      	movs	r2, #6
 8004a1a:	701a      	strb	r2, [r3, #0]
  EspState = ESP_STATE_INIT;
 8004a1c:	4b0e      	ldr	r3, [pc, #56]	@ (8004a58 <setModePowerMail+0x70>)
 8004a1e:	2202      	movs	r2, #2
 8004a20:	701a      	strb	r2, [r3, #0]
  savedESPTimeStamp = ESPTimeStamp;
 8004a22:	4b0e      	ldr	r3, [pc, #56]	@ (8004a5c <setModePowerMail+0x74>)
 8004a24:	681a      	ldr	r2, [r3, #0]
 8004a26:	4b0e      	ldr	r3, [pc, #56]	@ (8004a60 <setModePowerMail+0x78>)
 8004a28:	601a      	str	r2, [r3, #0]
  ESPTimeStamp = 0;
 8004a2a:	4b0c      	ldr	r3, [pc, #48]	@ (8004a5c <setModePowerMail+0x74>)
 8004a2c:	2200      	movs	r2, #0
 8004a2e:	601a      	str	r2, [r3, #0]
  sendpwrmaildate = getDate();
 8004a30:	f005 f9a8 	bl	8009d84 <getDate>
 8004a34:	0003      	movs	r3, r0
 8004a36:	001a      	movs	r2, r3
 8004a38:	4b0a      	ldr	r3, [pc, #40]	@ (8004a64 <setModePowerMail+0x7c>)
 8004a3a:	701a      	strb	r2, [r3, #0]
}
 8004a3c:	46bd      	mov	sp, r7
 8004a3e:	b00c      	add	sp, #48	@ 0x30
 8004a40:	bd80      	pop	{r7, pc}
 8004a42:	46c0      	nop			@ (mov r8, r8)
 8004a44:	080802c0 	.word	0x080802c0
 8004a48:	0802a984 	.word	0x0802a984
 8004a4c:	0802a958 	.word	0x0802a958
 8004a50:	200010f9 	.word	0x200010f9
 8004a54:	20000702 	.word	0x20000702
 8004a58:	20000030 	.word	0x20000030
 8004a5c:	20000694 	.word	0x20000694
 8004a60:	2000002c 	.word	0x2000002c
 8004a64:	20001110 	.word	0x20001110

08004a68 <pwrmailTodaySend>:

void pwrmailTodaySend() {
 8004a68:	b580      	push	{r7, lr}
 8004a6a:	af00      	add	r7, sp, #0
  if (sendpwrmaildate != getDate()) {
 8004a6c:	f005 f98a 	bl	8009d84 <getDate>
 8004a70:	0003      	movs	r3, r0
 8004a72:	001a      	movs	r2, r3
 8004a74:	4b04      	ldr	r3, [pc, #16]	@ (8004a88 <pwrmailTodaySend+0x20>)
 8004a76:	781b      	ldrb	r3, [r3, #0]
 8004a78:	429a      	cmp	r2, r3
 8004a7a:	d002      	beq.n	8004a82 <pwrmailTodaySend+0x1a>
    sendpwremail = CLEAR;
 8004a7c:	4b03      	ldr	r3, [pc, #12]	@ (8004a8c <pwrmailTodaySend+0x24>)
 8004a7e:	2200      	movs	r2, #0
 8004a80:	701a      	strb	r2, [r3, #0]
  }
}
 8004a82:	46c0      	nop			@ (mov r8, r8)
 8004a84:	46bd      	mov	sp, r7
 8004a86:	bd80      	pop	{r7, pc}
 8004a88:	20001110 	.word	0x20001110
 8004a8c:	200010f9 	.word	0x200010f9

08004a90 <setHIDS>:
#endif

void setHIDS(float temp, float humid){
 8004a90:	b580      	push	{r7, lr}
 8004a92:	b082      	sub	sp, #8
 8004a94:	af00      	add	r7, sp, #0
 8004a96:	6078      	str	r0, [r7, #4]
 8004a98:	6039      	str	r1, [r7, #0]
  MeasVal.Temperature = temp;
 8004a9a:	4b05      	ldr	r3, [pc, #20]	@ (8004ab0 <setHIDS+0x20>)
 8004a9c:	687a      	ldr	r2, [r7, #4]
 8004a9e:	601a      	str	r2, [r3, #0]
  MeasVal.Humidity = humid;
 8004aa0:	4b03      	ldr	r3, [pc, #12]	@ (8004ab0 <setHIDS+0x20>)
 8004aa2:	683a      	ldr	r2, [r7, #0]
 8004aa4:	605a      	str	r2, [r3, #4]
  if (SSD1306detected && (Check_USB_PowerOn() || userToggle)) {
    displayTemperature();
    displayHumidity();
  }
#endif
}
 8004aa6:	46c0      	nop			@ (mov r8, r8)
 8004aa8:	46bd      	mov	sp, r7
 8004aaa:	b002      	add	sp, #8
 8004aac:	bd80      	pop	{r7, pc}
 8004aae:	46c0      	nop			@ (mov r8, r8)
 8004ab0:	20000704 	.word	0x20000704

08004ab4 <setVOC>:

void setVOC(uint16_t voc) {
 8004ab4:	b580      	push	{r7, lr}
 8004ab6:	b082      	sub	sp, #8
 8004ab8:	af00      	add	r7, sp, #0
 8004aba:	0002      	movs	r2, r0
 8004abc:	1dbb      	adds	r3, r7, #6
 8004abe:	801a      	strh	r2, [r3, #0]
  MeasVal.VOCIndex = voc;
 8004ac0:	4b04      	ldr	r3, [pc, #16]	@ (8004ad4 <setVOC+0x20>)
 8004ac2:	1dba      	adds	r2, r7, #6
 8004ac4:	2148      	movs	r1, #72	@ 0x48
 8004ac6:	8812      	ldrh	r2, [r2, #0]
 8004ac8:	525a      	strh	r2, [r3, r1]
#ifdef SSD1306
  if (SSD1306detected &&(Check_USB_PowerOn() || userToggle)) {
    displayVOC();
  }
#endif
}
 8004aca:	46c0      	nop			@ (mov r8, r8)
 8004acc:	46bd      	mov	sp, r7
 8004ace:	b002      	add	sp, #8
 8004ad0:	bd80      	pop	{r7, pc}
 8004ad2:	46c0      	nop			@ (mov r8, r8)
 8004ad4:	20000704 	.word	0x20000704

08004ad8 <setAHT2x>:

void setAHT2x(float airtemp, float airhum) {
 8004ad8:	b580      	push	{r7, lr}
 8004ada:	b082      	sub	sp, #8
 8004adc:	af00      	add	r7, sp, #0
 8004ade:	6078      	str	r0, [r7, #4]
 8004ae0:	6039      	str	r1, [r7, #0]
  MeasVal.AHT2x_humidity = airhum;
 8004ae2:	4b05      	ldr	r3, [pc, #20]	@ (8004af8 <setAHT2x+0x20>)
 8004ae4:	683a      	ldr	r2, [r7, #0]
 8004ae6:	639a      	str	r2, [r3, #56]	@ 0x38
  MeasVal.AHT2x_temperature = airtemp;
 8004ae8:	4b03      	ldr	r3, [pc, #12]	@ (8004af8 <setAHT2x+0x20>)
 8004aea:	687a      	ldr	r2, [r7, #4]
 8004aec:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8004aee:	46c0      	nop			@ (mov r8, r8)
 8004af0:	46bd      	mov	sp, r7
 8004af2:	b002      	add	sp, #8
 8004af4:	bd80      	pop	{r7, pc}
 8004af6:	46c0      	nop			@ (mov r8, r8)
 8004af8:	20000704 	.word	0x20000704

08004afc <setBMP280>:

void setBMP280(float airtemp, float airhpa) {
 8004afc:	b580      	push	{r7, lr}
 8004afe:	b082      	sub	sp, #8
 8004b00:	af00      	add	r7, sp, #0
 8004b02:	6078      	str	r0, [r7, #4]
 8004b04:	6039      	str	r1, [r7, #0]
  MeasVal.BMP280_temperature = airtemp;
 8004b06:	4b05      	ldr	r3, [pc, #20]	@ (8004b1c <setBMP280+0x20>)
 8004b08:	687a      	ldr	r2, [r7, #4]
 8004b0a:	641a      	str	r2, [r3, #64]	@ 0x40
  MeasVal.BMP280_airpressure = airhpa;
 8004b0c:	4b03      	ldr	r3, [pc, #12]	@ (8004b1c <setBMP280+0x20>)
 8004b0e:	683a      	ldr	r2, [r7, #0]
 8004b10:	645a      	str	r2, [r3, #68]	@ 0x44
}
 8004b12:	46c0      	nop			@ (mov r8, r8)
 8004b14:	46bd      	mov	sp, r7
 8004b16:	b002      	add	sp, #8
 8004b18:	bd80      	pop	{r7, pc}
 8004b1a:	46c0      	nop			@ (mov r8, r8)
 8004b1c:	20000704 	.word	0x20000704

08004b20 <setENS160>:

void setENS160(uint8_t aqi, uint16_t tvoc, uint16_t eco2) {
 8004b20:	b590      	push	{r4, r7, lr}
 8004b22:	b083      	sub	sp, #12
 8004b24:	af00      	add	r7, sp, #0
 8004b26:	0004      	movs	r4, r0
 8004b28:	0008      	movs	r0, r1
 8004b2a:	0011      	movs	r1, r2
 8004b2c:	1dfb      	adds	r3, r7, #7
 8004b2e:	1c22      	adds	r2, r4, #0
 8004b30:	701a      	strb	r2, [r3, #0]
 8004b32:	1d3b      	adds	r3, r7, #4
 8004b34:	1c02      	adds	r2, r0, #0
 8004b36:	801a      	strh	r2, [r3, #0]
 8004b38:	1cbb      	adds	r3, r7, #2
 8004b3a:	1c0a      	adds	r2, r1, #0
 8004b3c:	801a      	strh	r2, [r3, #0]
  MeasVal.AQIndex = aqi;
 8004b3e:	4b15      	ldr	r3, [pc, #84]	@ (8004b94 <setENS160+0x74>)
 8004b40:	1dfa      	adds	r2, r7, #7
 8004b42:	2154      	movs	r1, #84	@ 0x54
 8004b44:	7812      	ldrb	r2, [r2, #0]
 8004b46:	545a      	strb	r2, [r3, r1]
  if (aqi > MeasVal.AQIndexmax) {
 8004b48:	4b12      	ldr	r3, [pc, #72]	@ (8004b94 <setENS160+0x74>)
 8004b4a:	2255      	movs	r2, #85	@ 0x55
 8004b4c:	5c9b      	ldrb	r3, [r3, r2]
 8004b4e:	1dfa      	adds	r2, r7, #7
 8004b50:	7812      	ldrb	r2, [r2, #0]
 8004b52:	429a      	cmp	r2, r3
 8004b54:	d904      	bls.n	8004b60 <setENS160+0x40>
    MeasVal.AQIndexmax = aqi;
 8004b56:	4b0f      	ldr	r3, [pc, #60]	@ (8004b94 <setENS160+0x74>)
 8004b58:	1dfa      	adds	r2, r7, #7
 8004b5a:	2155      	movs	r1, #85	@ 0x55
 8004b5c:	7812      	ldrb	r2, [r2, #0]
 8004b5e:	545a      	strb	r2, [r3, r1]
  }
  MeasVal.TVOCIndex = tvoc;
 8004b60:	4b0c      	ldr	r3, [pc, #48]	@ (8004b94 <setENS160+0x74>)
 8004b62:	1d3a      	adds	r2, r7, #4
 8004b64:	214a      	movs	r1, #74	@ 0x4a
 8004b66:	8812      	ldrh	r2, [r2, #0]
 8004b68:	525a      	strh	r2, [r3, r1]
  MeasVal.eCO2Index = eco2;
 8004b6a:	4b0a      	ldr	r3, [pc, #40]	@ (8004b94 <setENS160+0x74>)
 8004b6c:	1cba      	adds	r2, r7, #2
 8004b6e:	2150      	movs	r1, #80	@ 0x50
 8004b70:	8812      	ldrh	r2, [r2, #0]
 8004b72:	525a      	strh	r2, [r3, r1]
  if (eco2 > MeasVal.eCO2Indexmax) {
 8004b74:	4b07      	ldr	r3, [pc, #28]	@ (8004b94 <setENS160+0x74>)
 8004b76:	2252      	movs	r2, #82	@ 0x52
 8004b78:	5a9b      	ldrh	r3, [r3, r2]
 8004b7a:	1cba      	adds	r2, r7, #2
 8004b7c:	8812      	ldrh	r2, [r2, #0]
 8004b7e:	429a      	cmp	r2, r3
 8004b80:	d904      	bls.n	8004b8c <setENS160+0x6c>
    MeasVal.eCO2Indexmax = eco2;
 8004b82:	4b04      	ldr	r3, [pc, #16]	@ (8004b94 <setENS160+0x74>)
 8004b84:	1cba      	adds	r2, r7, #2
 8004b86:	2152      	movs	r1, #82	@ 0x52
 8004b88:	8812      	ldrh	r2, [r2, #0]
 8004b8a:	525a      	strh	r2, [r3, r1]
  }
}
 8004b8c:	46c0      	nop			@ (mov r8, r8)
 8004b8e:	46bd      	mov	sp, r7
 8004b90:	b003      	add	sp, #12
 8004b92:	bd90      	pop	{r4, r7, pc}
 8004b94:	20000704 	.word	0x20000704

08004b98 <setMic>:

void setMic(float dB, float dBmax, float dBAavg){
 8004b98:	b580      	push	{r7, lr}
 8004b9a:	b084      	sub	sp, #16
 8004b9c:	af00      	add	r7, sp, #0
 8004b9e:	60f8      	str	r0, [r7, #12]
 8004ba0:	60b9      	str	r1, [r7, #8]
 8004ba2:	607a      	str	r2, [r7, #4]
  MeasVal.dBA = dB;
 8004ba4:	4b06      	ldr	r3, [pc, #24]	@ (8004bc0 <setMic+0x28>)
 8004ba6:	68fa      	ldr	r2, [r7, #12]
 8004ba8:	659a      	str	r2, [r3, #88]	@ 0x58
  MeasVal.dBApeak = dBmax;
 8004baa:	4b05      	ldr	r3, [pc, #20]	@ (8004bc0 <setMic+0x28>)
 8004bac:	68ba      	ldr	r2, [r7, #8]
 8004bae:	65da      	str	r2, [r3, #92]	@ 0x5c
  MeasVal.dBAaverage = dBAavg;
 8004bb0:	4b03      	ldr	r3, [pc, #12]	@ (8004bc0 <setMic+0x28>)
 8004bb2:	687a      	ldr	r2, [r7, #4]
 8004bb4:	661a      	str	r2, [r3, #96]	@ 0x60
  if (SSD1306detected &&(Check_USB_PowerOn() || userToggle)) {
    displayActdBA();
    displayPeakdBA();
  }
#endif
}
 8004bb6:	46c0      	nop			@ (mov r8, r8)
 8004bb8:	46bd      	mov	sp, r7
 8004bba:	b004      	add	sp, #16
 8004bbc:	bd80      	pop	{r7, pc}
 8004bbe:	46c0      	nop			@ (mov r8, r8)
 8004bc0:	20000704 	.word	0x20000704

08004bc4 <setPM1p0>:

void setPM1p0(uint16_t PM1) {
 8004bc4:	b580      	push	{r7, lr}
 8004bc6:	b082      	sub	sp, #8
 8004bc8:	af00      	add	r7, sp, #0
 8004bca:	0002      	movs	r2, r0
 8004bcc:	1dbb      	adds	r3, r7, #6
 8004bce:	801a      	strh	r2, [r3, #0]
  MeasVal.PM1p0 = PM1 / 10.0f;
 8004bd0:	1dbb      	adds	r3, r7, #6
 8004bd2:	881b      	ldrh	r3, [r3, #0]
 8004bd4:	0018      	movs	r0, r3
 8004bd6:	f7fc fe27 	bl	8001828 <__aeabi_i2f>
 8004bda:	1c03      	adds	r3, r0, #0
 8004bdc:	490d      	ldr	r1, [pc, #52]	@ (8004c14 <setPM1p0+0x50>)
 8004bde:	1c18      	adds	r0, r3, #0
 8004be0:	f7fc f860 	bl	8000ca4 <__aeabi_fdiv>
 8004be4:	1c03      	adds	r3, r0, #0
 8004be6:	1c1a      	adds	r2, r3, #0
 8004be8:	4b0b      	ldr	r3, [pc, #44]	@ (8004c18 <setPM1p0+0x54>)
 8004bea:	609a      	str	r2, [r3, #8]
  if (MeasVal.PM1p0 > MeasVal.PM1p0max) {
 8004bec:	4b0a      	ldr	r3, [pc, #40]	@ (8004c18 <setPM1p0+0x54>)
 8004bee:	689a      	ldr	r2, [r3, #8]
 8004bf0:	4b09      	ldr	r3, [pc, #36]	@ (8004c18 <setPM1p0+0x54>)
 8004bf2:	68db      	ldr	r3, [r3, #12]
 8004bf4:	1c19      	adds	r1, r3, #0
 8004bf6:	1c10      	adds	r0, r2, #0
 8004bf8:	f7fb fcae 	bl	8000558 <__aeabi_fcmpgt>
 8004bfc:	1e03      	subs	r3, r0, #0
 8004bfe:	d100      	bne.n	8004c02 <setPM1p0+0x3e>
    MeasVal.PM1p0max = MeasVal.PM1p0;
  }
}
 8004c00:	e003      	b.n	8004c0a <setPM1p0+0x46>
    MeasVal.PM1p0max = MeasVal.PM1p0;
 8004c02:	4b05      	ldr	r3, [pc, #20]	@ (8004c18 <setPM1p0+0x54>)
 8004c04:	689a      	ldr	r2, [r3, #8]
 8004c06:	4b04      	ldr	r3, [pc, #16]	@ (8004c18 <setPM1p0+0x54>)
 8004c08:	60da      	str	r2, [r3, #12]
}
 8004c0a:	46c0      	nop			@ (mov r8, r8)
 8004c0c:	46bd      	mov	sp, r7
 8004c0e:	b002      	add	sp, #8
 8004c10:	bd80      	pop	{r7, pc}
 8004c12:	46c0      	nop			@ (mov r8, r8)
 8004c14:	41200000 	.word	0x41200000
 8004c18:	20000704 	.word	0x20000704

08004c1c <setPM2p5>:

void setPM2p5(uint16_t PM2) {
 8004c1c:	b580      	push	{r7, lr}
 8004c1e:	b082      	sub	sp, #8
 8004c20:	af00      	add	r7, sp, #0
 8004c22:	0002      	movs	r2, r0
 8004c24:	1dbb      	adds	r3, r7, #6
 8004c26:	801a      	strh	r2, [r3, #0]
  MeasVal.PM2p5 = PM2 / 10.0f;
 8004c28:	1dbb      	adds	r3, r7, #6
 8004c2a:	881b      	ldrh	r3, [r3, #0]
 8004c2c:	0018      	movs	r0, r3
 8004c2e:	f7fc fdfb 	bl	8001828 <__aeabi_i2f>
 8004c32:	1c03      	adds	r3, r0, #0
 8004c34:	490d      	ldr	r1, [pc, #52]	@ (8004c6c <setPM2p5+0x50>)
 8004c36:	1c18      	adds	r0, r3, #0
 8004c38:	f7fc f834 	bl	8000ca4 <__aeabi_fdiv>
 8004c3c:	1c03      	adds	r3, r0, #0
 8004c3e:	1c1a      	adds	r2, r3, #0
 8004c40:	4b0b      	ldr	r3, [pc, #44]	@ (8004c70 <setPM2p5+0x54>)
 8004c42:	611a      	str	r2, [r3, #16]
  if (MeasVal.PM2p5 > MeasVal.PM2p5max) {
 8004c44:	4b0a      	ldr	r3, [pc, #40]	@ (8004c70 <setPM2p5+0x54>)
 8004c46:	691a      	ldr	r2, [r3, #16]
 8004c48:	4b09      	ldr	r3, [pc, #36]	@ (8004c70 <setPM2p5+0x54>)
 8004c4a:	695b      	ldr	r3, [r3, #20]
 8004c4c:	1c19      	adds	r1, r3, #0
 8004c4e:	1c10      	adds	r0, r2, #0
 8004c50:	f7fb fc82 	bl	8000558 <__aeabi_fcmpgt>
 8004c54:	1e03      	subs	r3, r0, #0
 8004c56:	d100      	bne.n	8004c5a <setPM2p5+0x3e>
#ifdef SSD1306
  if (SSD1306detected && (Check_USB_PowerOn() || userToggle)) {
      displayPM2p5();
  }
#endif
}
 8004c58:	e003      	b.n	8004c62 <setPM2p5+0x46>
    MeasVal.PM2p5max = MeasVal.PM2p5;
 8004c5a:	4b05      	ldr	r3, [pc, #20]	@ (8004c70 <setPM2p5+0x54>)
 8004c5c:	691a      	ldr	r2, [r3, #16]
 8004c5e:	4b04      	ldr	r3, [pc, #16]	@ (8004c70 <setPM2p5+0x54>)
 8004c60:	615a      	str	r2, [r3, #20]
}
 8004c62:	46c0      	nop			@ (mov r8, r8)
 8004c64:	46bd      	mov	sp, r7
 8004c66:	b002      	add	sp, #8
 8004c68:	bd80      	pop	{r7, pc}
 8004c6a:	46c0      	nop			@ (mov r8, r8)
 8004c6c:	41200000 	.word	0x41200000
 8004c70:	20000704 	.word	0x20000704

08004c74 <setPM4p0>:

void setPM4p0(uint16_t PM4) {
 8004c74:	b580      	push	{r7, lr}
 8004c76:	b082      	sub	sp, #8
 8004c78:	af00      	add	r7, sp, #0
 8004c7a:	0002      	movs	r2, r0
 8004c7c:	1dbb      	adds	r3, r7, #6
 8004c7e:	801a      	strh	r2, [r3, #0]
  MeasVal.PM4p0 = PM4 / 10.0f;
 8004c80:	1dbb      	adds	r3, r7, #6
 8004c82:	881b      	ldrh	r3, [r3, #0]
 8004c84:	0018      	movs	r0, r3
 8004c86:	f7fc fdcf 	bl	8001828 <__aeabi_i2f>
 8004c8a:	1c03      	adds	r3, r0, #0
 8004c8c:	490d      	ldr	r1, [pc, #52]	@ (8004cc4 <setPM4p0+0x50>)
 8004c8e:	1c18      	adds	r0, r3, #0
 8004c90:	f7fc f808 	bl	8000ca4 <__aeabi_fdiv>
 8004c94:	1c03      	adds	r3, r0, #0
 8004c96:	1c1a      	adds	r2, r3, #0
 8004c98:	4b0b      	ldr	r3, [pc, #44]	@ (8004cc8 <setPM4p0+0x54>)
 8004c9a:	619a      	str	r2, [r3, #24]
  if (MeasVal.PM4p0 > MeasVal.PM4p0max) {
 8004c9c:	4b0a      	ldr	r3, [pc, #40]	@ (8004cc8 <setPM4p0+0x54>)
 8004c9e:	699a      	ldr	r2, [r3, #24]
 8004ca0:	4b09      	ldr	r3, [pc, #36]	@ (8004cc8 <setPM4p0+0x54>)
 8004ca2:	69db      	ldr	r3, [r3, #28]
 8004ca4:	1c19      	adds	r1, r3, #0
 8004ca6:	1c10      	adds	r0, r2, #0
 8004ca8:	f7fb fc56 	bl	8000558 <__aeabi_fcmpgt>
 8004cac:	1e03      	subs	r3, r0, #0
 8004cae:	d100      	bne.n	8004cb2 <setPM4p0+0x3e>
    MeasVal.PM4p0max = MeasVal.PM4p0;
  }
}
 8004cb0:	e003      	b.n	8004cba <setPM4p0+0x46>
    MeasVal.PM4p0max = MeasVal.PM4p0;
 8004cb2:	4b05      	ldr	r3, [pc, #20]	@ (8004cc8 <setPM4p0+0x54>)
 8004cb4:	699a      	ldr	r2, [r3, #24]
 8004cb6:	4b04      	ldr	r3, [pc, #16]	@ (8004cc8 <setPM4p0+0x54>)
 8004cb8:	61da      	str	r2, [r3, #28]
}
 8004cba:	46c0      	nop			@ (mov r8, r8)
 8004cbc:	46bd      	mov	sp, r7
 8004cbe:	b002      	add	sp, #8
 8004cc0:	bd80      	pop	{r7, pc}
 8004cc2:	46c0      	nop			@ (mov r8, r8)
 8004cc4:	41200000 	.word	0x41200000
 8004cc8:	20000704 	.word	0x20000704

08004ccc <setPM10>:

void setPM10(uint16_t PM10) {
 8004ccc:	b580      	push	{r7, lr}
 8004cce:	b082      	sub	sp, #8
 8004cd0:	af00      	add	r7, sp, #0
 8004cd2:	0002      	movs	r2, r0
 8004cd4:	1dbb      	adds	r3, r7, #6
 8004cd6:	801a      	strh	r2, [r3, #0]
  MeasVal.PM10p0 = PM10 / 10.0f;
 8004cd8:	1dbb      	adds	r3, r7, #6
 8004cda:	881b      	ldrh	r3, [r3, #0]
 8004cdc:	0018      	movs	r0, r3
 8004cde:	f7fc fda3 	bl	8001828 <__aeabi_i2f>
 8004ce2:	1c03      	adds	r3, r0, #0
 8004ce4:	490d      	ldr	r1, [pc, #52]	@ (8004d1c <setPM10+0x50>)
 8004ce6:	1c18      	adds	r0, r3, #0
 8004ce8:	f7fb ffdc 	bl	8000ca4 <__aeabi_fdiv>
 8004cec:	1c03      	adds	r3, r0, #0
 8004cee:	1c1a      	adds	r2, r3, #0
 8004cf0:	4b0b      	ldr	r3, [pc, #44]	@ (8004d20 <setPM10+0x54>)
 8004cf2:	621a      	str	r2, [r3, #32]
  if (MeasVal.PM10p0 > MeasVal.PM10p0max) {
 8004cf4:	4b0a      	ldr	r3, [pc, #40]	@ (8004d20 <setPM10+0x54>)
 8004cf6:	6a1a      	ldr	r2, [r3, #32]
 8004cf8:	4b09      	ldr	r3, [pc, #36]	@ (8004d20 <setPM10+0x54>)
 8004cfa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cfc:	1c19      	adds	r1, r3, #0
 8004cfe:	1c10      	adds	r0, r2, #0
 8004d00:	f7fb fc2a 	bl	8000558 <__aeabi_fcmpgt>
 8004d04:	1e03      	subs	r3, r0, #0
 8004d06:	d100      	bne.n	8004d0a <setPM10+0x3e>
  #ifdef SSD1306
  if (SSD1306detected && (Check_USB_PowerOn() || userToggle)) {
      displayPM10();
  }
#endif
}
 8004d08:	e003      	b.n	8004d12 <setPM10+0x46>
  MeasVal.PM10p0max = MeasVal.PM10p0;
 8004d0a:	4b05      	ldr	r3, [pc, #20]	@ (8004d20 <setPM10+0x54>)
 8004d0c:	6a1a      	ldr	r2, [r3, #32]
 8004d0e:	4b04      	ldr	r3, [pc, #16]	@ (8004d20 <setPM10+0x54>)
 8004d10:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8004d12:	46c0      	nop			@ (mov r8, r8)
 8004d14:	46bd      	mov	sp, r7
 8004d16:	b002      	add	sp, #8
 8004d18:	bd80      	pop	{r7, pc}
 8004d1a:	46c0      	nop			@ (mov r8, r8)
 8004d1c:	41200000 	.word	0x41200000
 8004d20:	20000704 	.word	0x20000704

08004d24 <setNOx>:

void setNOx(uint16_t nox) {
 8004d24:	b580      	push	{r7, lr}
 8004d26:	b082      	sub	sp, #8
 8004d28:	af00      	add	r7, sp, #0
 8004d2a:	0002      	movs	r2, r0
 8004d2c:	1dbb      	adds	r3, r7, #6
 8004d2e:	801a      	strh	r2, [r3, #0]
  MeasVal.airNOx = nox;
 8004d30:	4b0a      	ldr	r3, [pc, #40]	@ (8004d5c <setNOx+0x38>)
 8004d32:	1dba      	adds	r2, r7, #6
 8004d34:	214c      	movs	r1, #76	@ 0x4c
 8004d36:	8812      	ldrh	r2, [r2, #0]
 8004d38:	525a      	strh	r2, [r3, r1]
  if (nox > MeasVal.airNOxmax) {
 8004d3a:	4b08      	ldr	r3, [pc, #32]	@ (8004d5c <setNOx+0x38>)
 8004d3c:	224e      	movs	r2, #78	@ 0x4e
 8004d3e:	5a9b      	ldrh	r3, [r3, r2]
 8004d40:	1dba      	adds	r2, r7, #6
 8004d42:	8812      	ldrh	r2, [r2, #0]
 8004d44:	429a      	cmp	r2, r3
 8004d46:	d904      	bls.n	8004d52 <setNOx+0x2e>
    MeasVal.airNOxmax = nox;
 8004d48:	4b04      	ldr	r3, [pc, #16]	@ (8004d5c <setNOx+0x38>)
 8004d4a:	1dba      	adds	r2, r7, #6
 8004d4c:	214e      	movs	r1, #78	@ 0x4e
 8004d4e:	8812      	ldrh	r2, [r2, #0]
 8004d50:	525a      	strh	r2, [r3, r1]
#ifdef SSD1306
  if (SSD1306detected && (Check_USB_PowerOn() || userToggle)) {
    displayNOx();
  }
#endif
}
 8004d52:	46c0      	nop			@ (mov r8, r8)
 8004d54:	46bd      	mov	sp, r7
 8004d56:	b002      	add	sp, #8
 8004d58:	bd80      	pop	{r7, pc}
 8004d5a:	46c0      	nop			@ (mov r8, r8)
 8004d5c:	20000704 	.word	0x20000704

08004d60 <SetSEN545temphum>:

void SetSEN545temphum(float airtemp, float airhum) {
 8004d60:	b580      	push	{r7, lr}
 8004d62:	b082      	sub	sp, #8
 8004d64:	af00      	add	r7, sp, #0
 8004d66:	6078      	str	r0, [r7, #4]
 8004d68:	6039      	str	r1, [r7, #0]
  MeasVal.sen55_temperature = airtemp / 200.0f;
 8004d6a:	490a      	ldr	r1, [pc, #40]	@ (8004d94 <SetSEN545temphum+0x34>)
 8004d6c:	6878      	ldr	r0, [r7, #4]
 8004d6e:	f7fb ff99 	bl	8000ca4 <__aeabi_fdiv>
 8004d72:	1c03      	adds	r3, r0, #0
 8004d74:	1c1a      	adds	r2, r3, #0
 8004d76:	4b08      	ldr	r3, [pc, #32]	@ (8004d98 <SetSEN545temphum+0x38>)
 8004d78:	62da      	str	r2, [r3, #44]	@ 0x2c
  MeasVal.sen55_humidity = airhum / 100.0f;
 8004d7a:	4908      	ldr	r1, [pc, #32]	@ (8004d9c <SetSEN545temphum+0x3c>)
 8004d7c:	6838      	ldr	r0, [r7, #0]
 8004d7e:	f7fb ff91 	bl	8000ca4 <__aeabi_fdiv>
 8004d82:	1c03      	adds	r3, r0, #0
 8004d84:	1c1a      	adds	r2, r3, #0
 8004d86:	4b04      	ldr	r3, [pc, #16]	@ (8004d98 <SetSEN545temphum+0x38>)
 8004d88:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8004d8a:	46c0      	nop			@ (mov r8, r8)
 8004d8c:	46bd      	mov	sp, r7
 8004d8e:	b002      	add	sp, #8
 8004d90:	bd80      	pop	{r7, pc}
 8004d92:	46c0      	nop			@ (mov r8, r8)
 8004d94:	43480000 	.word	0x43480000
 8004d98:	20000704 	.word	0x20000704
 8004d9c:	42c80000 	.word	0x42c80000

08004da0 <resetMaxMeasurementValues>:

void resetMaxMeasurementValues() {
 8004da0:	b580      	push	{r7, lr}
 8004da2:	af00      	add	r7, sp, #0
  if (sen5x_Get_sen5x_enable_state()) {
 8004da4:	f009 fbe8 	bl	800e578 <sen5x_Get_sen5x_enable_state>
 8004da8:	1e03      	subs	r3, r0, #0
 8004daa:	d00f      	beq.n	8004dcc <resetMaxMeasurementValues+0x2c>
    MeasVal.PM1p0max = 0.0f;
 8004dac:	4b0d      	ldr	r3, [pc, #52]	@ (8004de4 <resetMaxMeasurementValues+0x44>)
 8004dae:	2200      	movs	r2, #0
 8004db0:	60da      	str	r2, [r3, #12]
    MeasVal.PM2p5max = 0.0f;
 8004db2:	4b0c      	ldr	r3, [pc, #48]	@ (8004de4 <resetMaxMeasurementValues+0x44>)
 8004db4:	2200      	movs	r2, #0
 8004db6:	615a      	str	r2, [r3, #20]
    MeasVal.PM4p0max = 0.0f;
 8004db8:	4b0a      	ldr	r3, [pc, #40]	@ (8004de4 <resetMaxMeasurementValues+0x44>)
 8004dba:	2200      	movs	r2, #0
 8004dbc:	61da      	str	r2, [r3, #28]
    MeasVal.PM10p0max = 0.0f;
 8004dbe:	4b09      	ldr	r3, [pc, #36]	@ (8004de4 <resetMaxMeasurementValues+0x44>)
 8004dc0:	2200      	movs	r2, #0
 8004dc2:	625a      	str	r2, [r3, #36]	@ 0x24
    MeasVal.airNOxmax = 0;
 8004dc4:	4b07      	ldr	r3, [pc, #28]	@ (8004de4 <resetMaxMeasurementValues+0x44>)
 8004dc6:	224e      	movs	r2, #78	@ 0x4e
 8004dc8:	2100      	movs	r1, #0
 8004dca:	5299      	strh	r1, [r3, r2]
  }
  MeasVal.eCO2Indexmax = 0;
 8004dcc:	4b05      	ldr	r3, [pc, #20]	@ (8004de4 <resetMaxMeasurementValues+0x44>)
 8004dce:	2252      	movs	r2, #82	@ 0x52
 8004dd0:	2100      	movs	r1, #0
 8004dd2:	5299      	strh	r1, [r3, r2]
  MeasVal.AQIndexmax = 0;
 8004dd4:	4b03      	ldr	r3, [pc, #12]	@ (8004de4 <resetMaxMeasurementValues+0x44>)
 8004dd6:	2255      	movs	r2, #85	@ 0x55
 8004dd8:	2100      	movs	r1, #0
 8004dda:	5499      	strb	r1, [r3, r2]
}
 8004ddc:	46c0      	nop			@ (mov r8, r8)
 8004dde:	46bd      	mov	sp, r7
 8004de0:	bd80      	pop	{r7, pc}
 8004de2:	46c0      	nop			@ (mov r8, r8)
 8004de4:	20000704 	.word	0x20000704

08004de8 <SetConfigMode>:

void SetConfigMode(){
 8004de8:	b580      	push	{r7, lr}
 8004dea:	af00      	add	r7, sp, #0
  if (!ReconfigSet) {
 8004dec:	4b0a      	ldr	r3, [pc, #40]	@ (8004e18 <SetConfigMode+0x30>)
 8004dee:	781b      	ldrb	r3, [r3, #0]
 8004df0:	2201      	movs	r2, #1
 8004df2:	4053      	eors	r3, r2
 8004df4:	b2db      	uxtb	r3, r3
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d005      	beq.n	8004e06 <SetConfigMode+0x1e>
    Debug("ReconfigSet in SetConfigMode");
 8004dfa:	4a08      	ldr	r2, [pc, #32]	@ (8004e1c <SetConfigMode+0x34>)
 8004dfc:	4b08      	ldr	r3, [pc, #32]	@ (8004e20 <SetConfigMode+0x38>)
 8004dfe:	0019      	movs	r1, r3
 8004e00:	2003      	movs	r0, #3
 8004e02:	f00f f81b 	bl	8013e3c <CreateLine>
  }
  ReconfigSet = true;
 8004e06:	4b04      	ldr	r3, [pc, #16]	@ (8004e18 <SetConfigMode+0x30>)
 8004e08:	2201      	movs	r2, #1
 8004e0a:	701a      	strb	r2, [r3, #0]
  usblog = false;
 8004e0c:	4b05      	ldr	r3, [pc, #20]	@ (8004e24 <SetConfigMode+0x3c>)
 8004e0e:	2200      	movs	r2, #0
 8004e10:	701a      	strb	r2, [r3, #0]
}
 8004e12:	46c0      	nop			@ (mov r8, r8)
 8004e14:	46bd      	mov	sp, r7
 8004e16:	bd80      	pop	{r7, pc}
 8004e18:	200005af 	.word	0x200005af
 8004e1c:	0802a99c 	.word	0x0802a99c
 8004e20:	0802a9bc 	.word	0x0802a9bc
 8004e24:	200010f7 	.word	0x200010f7

08004e28 <GetReconfigMode>:

bool GetReconfigMode() {
 8004e28:	b580      	push	{r7, lr}
 8004e2a:	af00      	add	r7, sp, #0
  return ReconfigSet;
 8004e2c:	4b02      	ldr	r3, [pc, #8]	@ (8004e38 <GetReconfigMode+0x10>)
 8004e2e:	781b      	ldrb	r3, [r3, #0]
}
 8004e30:	0018      	movs	r0, r3
 8004e32:	46bd      	mov	sp, r7
 8004e34:	bd80      	pop	{r7, pc}
 8004e36:	46c0      	nop			@ (mov r8, r8)
 8004e38:	200005af 	.word	0x200005af

08004e3c <ESP_Init>:
  uid[1] = HAL_GetUIDw1();
  uid[2] = HAL_GetUIDw2();
}
#endif

void ESP_Init(UART_HandleTypeDef* espUart) {
 8004e3c:	b580      	push	{r7, lr}
 8004e3e:	b082      	sub	sp, #8
 8004e40:	af00      	add	r7, sp, #0
 8004e42:	6078      	str	r0, [r7, #4]
  EspUart = espUart;
 8004e44:	4b04      	ldr	r3, [pc, #16]	@ (8004e58 <ESP_Init+0x1c>)
 8004e46:	687a      	ldr	r2, [r7, #4]
 8004e48:	601a      	str	r2, [r3, #0]
  EspState = ESP_STATE_INIT;
 8004e4a:	4b04      	ldr	r3, [pc, #16]	@ (8004e5c <ESP_Init+0x20>)
 8004e4c:	2202      	movs	r2, #2
 8004e4e:	701a      	strb	r2, [r3, #0]
#ifndef OPENSENSEMAP
  ESP_GetUID();
#endif
}
 8004e50:	46c0      	nop			@ (mov r8, r8)
 8004e52:	46bd      	mov	sp, r7
 8004e54:	b002      	add	sp, #8
 8004e56:	bd80      	pop	{r7, pc}
 8004e58:	200004a4 	.word	0x200004a4
 8004e5c:	20000030 	.word	0x20000030

08004e60 <ESP_Send>:

static bool ESP_Send(uint8_t* command, uint16_t length) {
 8004e60:	b5b0      	push	{r4, r5, r7, lr}
 8004e62:	b084      	sub	sp, #16
 8004e64:	af00      	add	r7, sp, #0
 8004e66:	6078      	str	r0, [r7, #4]
 8004e68:	000a      	movs	r2, r1
 8004e6a:	1cbb      	adds	r3, r7, #2
 8004e6c:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_UART_Transmit_DMA(EspUart, command, length);
 8004e6e:	4b27      	ldr	r3, [pc, #156]	@ (8004f0c <ESP_Send+0xac>)
 8004e70:	6818      	ldr	r0, [r3, #0]
 8004e72:	250f      	movs	r5, #15
 8004e74:	197c      	adds	r4, r7, r5
 8004e76:	1cbb      	adds	r3, r7, #2
 8004e78:	881a      	ldrh	r2, [r3, #0]
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	0019      	movs	r1, r3
 8004e7e:	f018 fc05 	bl	801d68c <HAL_UART_Transmit_DMA>
 8004e82:	0003      	movs	r3, r0
 8004e84:	7023      	strb	r3, [r4, #0]
  if (status != HAL_OK) {
 8004e86:	197b      	adds	r3, r7, r5
 8004e88:	781b      	ldrb	r3, [r3, #0]
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d007      	beq.n	8004e9e <ESP_Send+0x3e>
    Error("Error in HAL_UART_Transmit_DMA");
 8004e8e:	4a20      	ldr	r2, [pc, #128]	@ (8004f10 <ESP_Send+0xb0>)
 8004e90:	4b20      	ldr	r3, [pc, #128]	@ (8004f14 <ESP_Send+0xb4>)
 8004e92:	0019      	movs	r1, r3
 8004e94:	2001      	movs	r0, #1
 8004e96:	f00e ffd1 	bl	8013e3c <CreateLine>
    return false;
 8004e9a:	2300      	movs	r3, #0
 8004e9c:	e032      	b.n	8004f04 <ESP_Send+0xa4>
  }
  if ((length > 90) && usblog && Check_USB_PowerOn()) {
 8004e9e:	1cbb      	adds	r3, r7, #2
 8004ea0:	881b      	ldrh	r3, [r3, #0]
 8004ea2:	2b5a      	cmp	r3, #90	@ 0x5a
 8004ea4:	d927      	bls.n	8004ef6 <ESP_Send+0x96>
 8004ea6:	4b1c      	ldr	r3, [pc, #112]	@ (8004f18 <ESP_Send+0xb8>)
 8004ea8:	781b      	ldrb	r3, [r3, #0]
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d023      	beq.n	8004ef6 <ESP_Send+0x96>
 8004eae:	f004 feb3 	bl	8009c18 <Check_USB_PowerOn>
 8004eb2:	1e03      	subs	r3, r0, #0
 8004eb4:	d01f      	beq.n	8004ef6 <ESP_Send+0x96>
    char splitchar;
    splitchar = command[SPLIT_POS];
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	334c      	adds	r3, #76	@ 0x4c
 8004eba:	001a      	movs	r2, r3
 8004ebc:	240e      	movs	r4, #14
 8004ebe:	193b      	adds	r3, r7, r4
 8004ec0:	7812      	ldrb	r2, [r2, #0]
 8004ec2:	701a      	strb	r2, [r3, #0]
    command[SPLIT_POS] = '\0';
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	334c      	adds	r3, #76	@ 0x4c
 8004ec8:	2200      	movs	r2, #0
 8004eca:	701a      	strb	r2, [r3, #0]
    printf_USB((char*)command);
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	0018      	movs	r0, r3
 8004ed0:	f003 fde8 	bl	8008aa4 <printf_USB>
    command[SPLIT_POS] = splitchar;
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	334c      	adds	r3, #76	@ 0x4c
 8004ed8:	193a      	adds	r2, r7, r4
 8004eda:	7812      	ldrb	r2, [r2, #0]
 8004edc:	701a      	strb	r2, [r3, #0]
    printf_USB((char*)&command[SPLIT_POS]);
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	334c      	adds	r3, #76	@ 0x4c
 8004ee2:	0018      	movs	r0, r3
 8004ee4:	f003 fdde 	bl	8008aa4 <printf_USB>
    printf("ESP_Send: %s", command);
 8004ee8:	687a      	ldr	r2, [r7, #4]
 8004eea:	4b0c      	ldr	r3, [pc, #48]	@ (8004f1c <ESP_Send+0xbc>)
 8004eec:	0011      	movs	r1, r2
 8004eee:	0018      	movs	r0, r3
 8004ef0:	f021 f95e 	bl	80261b0 <iprintf>
  if ((length > 90) && usblog && Check_USB_PowerOn()) {
 8004ef4:	e005      	b.n	8004f02 <ESP_Send+0xa2>
  }
  else
    Debug("ESP_Send: %s", command);
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	4a08      	ldr	r2, [pc, #32]	@ (8004f1c <ESP_Send+0xbc>)
 8004efa:	4909      	ldr	r1, [pc, #36]	@ (8004f20 <ESP_Send+0xc0>)
 8004efc:	2003      	movs	r0, #3
 8004efe:	f00e ff9d 	bl	8013e3c <CreateLine>
  return true;
 8004f02:	2301      	movs	r3, #1
}
 8004f04:	0018      	movs	r0, r3
 8004f06:	46bd      	mov	sp, r7
 8004f08:	b004      	add	sp, #16
 8004f0a:	bdb0      	pop	{r4, r5, r7, pc}
 8004f0c:	200004a4 	.word	0x200004a4
 8004f10:	0802a9c0 	.word	0x0802a9c0
 8004f14:	0802a958 	.word	0x0802a958
 8004f18:	200010f7 	.word	0x200010f7
 8004f1c:	0802a9e0 	.word	0x0802a9e0
 8004f20:	0802a9bc 	.word	0x0802a9bc

08004f24 <ESP_Receive>:
static bool ESP_Receive(uint8_t* reply, uint16_t length) {
 8004f24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004f26:	b08b      	sub	sp, #44	@ 0x2c
 8004f28:	af00      	add	r7, sp, #0
 8004f2a:	6078      	str	r0, [r7, #4]
 8004f2c:	000a      	movs	r2, r1
 8004f2e:	1cbb      	adds	r3, r7, #2
 8004f30:	801a      	strh	r2, [r3, #0]
  RxComplete = false;
 8004f32:	4b6c      	ldr	r3, [pc, #432]	@ (80050e4 <ESP_Receive+0x1c0>)
 8004f34:	2200      	movs	r2, #0
 8004f36:	701a      	strb	r2, [r3, #0]
  bool reset = false;
 8004f38:	2627      	movs	r6, #39	@ 0x27
 8004f3a:	19bb      	adds	r3, r7, r6
 8004f3c:	2200      	movs	r2, #0
 8004f3e:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_UART_Receive_DMA(EspUart, reply, length);
 8004f40:	4b69      	ldr	r3, [pc, #420]	@ (80050e8 <ESP_Receive+0x1c4>)
 8004f42:	6818      	ldr	r0, [r3, #0]
 8004f44:	2525      	movs	r5, #37	@ 0x25
 8004f46:	197c      	adds	r4, r7, r5
 8004f48:	1cbb      	adds	r3, r7, #2
 8004f4a:	881a      	ldrh	r2, [r3, #0]
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	0019      	movs	r1, r3
 8004f50:	f018 fc2c 	bl	801d7ac <HAL_UART_Receive_DMA>
 8004f54:	0003      	movs	r3, r0
 8004f56:	7023      	strb	r3, [r4, #0]
  if (status != HAL_OK) {
 8004f58:	197b      	adds	r3, r7, r5
 8004f5a:	781b      	ldrb	r3, [r3, #0]
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d100      	bne.n	8004f62 <ESP_Receive+0x3e>
 8004f60:	e0ba      	b.n	80050d8 <ESP_Receive+0x1b4>
    Error("Error in HAL_UART_Receive_DMA. errorcode: %d", EspUart->ErrorCode);
 8004f62:	4b61      	ldr	r3, [pc, #388]	@ (80050e8 <ESP_Receive+0x1c4>)
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	2284      	movs	r2, #132	@ 0x84
 8004f68:	589b      	ldr	r3, [r3, r2]
 8004f6a:	4a60      	ldr	r2, [pc, #384]	@ (80050ec <ESP_Receive+0x1c8>)
 8004f6c:	4960      	ldr	r1, [pc, #384]	@ (80050f0 <ESP_Receive+0x1cc>)
 8004f6e:	2001      	movs	r0, #1
 8004f70:	f00e ff64 	bl	8013e3c <CreateLine>
#ifndef SMALLBUILD
    char uartespmod[] =" error in UART to ESP module";
 8004f74:	2308      	movs	r3, #8
 8004f76:	18fb      	adds	r3, r7, r3
 8004f78:	4a5e      	ldr	r2, [pc, #376]	@ (80050f4 <ESP_Receive+0x1d0>)
 8004f7a:	ca13      	ldmia	r2!, {r0, r1, r4}
 8004f7c:	c313      	stmia	r3!, {r0, r1, r4}
 8004f7e:	ca13      	ldmia	r2!, {r0, r1, r4}
 8004f80:	c313      	stmia	r3!, {r0, r1, r4}
 8004f82:	6811      	ldr	r1, [r2, #0]
 8004f84:	6019      	str	r1, [r3, #0]
 8004f86:	7912      	ldrb	r2, [r2, #4]
 8004f88:	711a      	strb	r2, [r3, #4]
    if (status & HAL_UART_ERROR_PE) {
 8004f8a:	197b      	adds	r3, r7, r5
 8004f8c:	781b      	ldrb	r3, [r3, #0]
 8004f8e:	2201      	movs	r2, #1
 8004f90:	4013      	ands	r3, r2
 8004f92:	d009      	beq.n	8004fa8 <ESP_Receive+0x84>
      Error("Parity%s", uartespmod);
 8004f94:	2308      	movs	r3, #8
 8004f96:	18fb      	adds	r3, r7, r3
 8004f98:	4a57      	ldr	r2, [pc, #348]	@ (80050f8 <ESP_Receive+0x1d4>)
 8004f9a:	4955      	ldr	r1, [pc, #340]	@ (80050f0 <ESP_Receive+0x1cc>)
 8004f9c:	2001      	movs	r0, #1
 8004f9e:	f00e ff4d 	bl	8013e3c <CreateLine>
      reset = true;
 8004fa2:	19bb      	adds	r3, r7, r6
 8004fa4:	2201      	movs	r2, #1
 8004fa6:	701a      	strb	r2, [r3, #0]
    }
    if (status & HAL_UART_ERROR_NE) {
 8004fa8:	2325      	movs	r3, #37	@ 0x25
 8004faa:	18fb      	adds	r3, r7, r3
 8004fac:	781b      	ldrb	r3, [r3, #0]
 8004fae:	2202      	movs	r2, #2
 8004fb0:	4013      	ands	r3, r2
 8004fb2:	d00a      	beq.n	8004fca <ESP_Receive+0xa6>
      Error("Noise%s", uartespmod);
 8004fb4:	2308      	movs	r3, #8
 8004fb6:	18fb      	adds	r3, r7, r3
 8004fb8:	4a50      	ldr	r2, [pc, #320]	@ (80050fc <ESP_Receive+0x1d8>)
 8004fba:	494d      	ldr	r1, [pc, #308]	@ (80050f0 <ESP_Receive+0x1cc>)
 8004fbc:	2001      	movs	r0, #1
 8004fbe:	f00e ff3d 	bl	8013e3c <CreateLine>
      reset = true;
 8004fc2:	2327      	movs	r3, #39	@ 0x27
 8004fc4:	18fb      	adds	r3, r7, r3
 8004fc6:	2201      	movs	r2, #1
 8004fc8:	701a      	strb	r2, [r3, #0]
    }
    if (status & HAL_UART_ERROR_FE) {
 8004fca:	2325      	movs	r3, #37	@ 0x25
 8004fcc:	18fb      	adds	r3, r7, r3
 8004fce:	781b      	ldrb	r3, [r3, #0]
 8004fd0:	2204      	movs	r2, #4
 8004fd2:	4013      	ands	r3, r2
 8004fd4:	d006      	beq.n	8004fe4 <ESP_Receive+0xc0>
      Error("Frame%s", uartespmod);
 8004fd6:	2308      	movs	r3, #8
 8004fd8:	18fb      	adds	r3, r7, r3
 8004fda:	4a49      	ldr	r2, [pc, #292]	@ (8005100 <ESP_Receive+0x1dc>)
 8004fdc:	4944      	ldr	r1, [pc, #272]	@ (80050f0 <ESP_Receive+0x1cc>)
 8004fde:	2001      	movs	r0, #1
 8004fe0:	f00e ff2c 	bl	8013e3c <CreateLine>
    }
    if (status & HAL_UART_ERROR_ORE) {
 8004fe4:	2325      	movs	r3, #37	@ 0x25
 8004fe6:	18fb      	adds	r3, r7, r3
 8004fe8:	781b      	ldrb	r3, [r3, #0]
 8004fea:	2208      	movs	r2, #8
 8004fec:	4013      	ands	r3, r2
 8004fee:	d006      	beq.n	8004ffe <ESP_Receive+0xda>
      Error("Overrun%s", uartespmod);
 8004ff0:	2308      	movs	r3, #8
 8004ff2:	18fb      	adds	r3, r7, r3
 8004ff4:	4a43      	ldr	r2, [pc, #268]	@ (8005104 <ESP_Receive+0x1e0>)
 8004ff6:	493e      	ldr	r1, [pc, #248]	@ (80050f0 <ESP_Receive+0x1cc>)
 8004ff8:	2001      	movs	r0, #1
 8004ffa:	f00e ff1f 	bl	8013e3c <CreateLine>
    }
    if (status & HAL_UART_ERROR_DMA) {
 8004ffe:	2325      	movs	r3, #37	@ 0x25
 8005000:	18fb      	adds	r3, r7, r3
 8005002:	781b      	ldrb	r3, [r3, #0]
 8005004:	2210      	movs	r2, #16
 8005006:	4013      	ands	r3, r2
 8005008:	d006      	beq.n	8005018 <ESP_Receive+0xf4>
      Error("DMA transfer%s", uartespmod);
 800500a:	2308      	movs	r3, #8
 800500c:	18fb      	adds	r3, r7, r3
 800500e:	4a3e      	ldr	r2, [pc, #248]	@ (8005108 <ESP_Receive+0x1e4>)
 8005010:	4937      	ldr	r1, [pc, #220]	@ (80050f0 <ESP_Receive+0x1cc>)
 8005012:	2001      	movs	r0, #1
 8005014:	f00e ff12 	bl	8013e3c <CreateLine>
    }
    if (status & HAL_UART_ERROR_RTO) {
 8005018:	2325      	movs	r3, #37	@ 0x25
 800501a:	18fb      	adds	r3, r7, r3
 800501c:	781b      	ldrb	r3, [r3, #0]
 800501e:	2220      	movs	r2, #32
 8005020:	4013      	ands	r3, r2
 8005022:	d006      	beq.n	8005032 <ESP_Receive+0x10e>
      Error("Receiver Timeout%s", uartespmod);
 8005024:	2308      	movs	r3, #8
 8005026:	18fb      	adds	r3, r7, r3
 8005028:	4a38      	ldr	r2, [pc, #224]	@ (800510c <ESP_Receive+0x1e8>)
 800502a:	4931      	ldr	r1, [pc, #196]	@ (80050f0 <ESP_Receive+0x1cc>)
 800502c:	2001      	movs	r0, #1
 800502e:	f00e ff05 	bl	8013e3c <CreateLine>
    }
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    if (status & HAL_UART_ERROR_INVALID_CALLBACK) {
 8005032:	2325      	movs	r3, #37	@ 0x25
 8005034:	18fb      	adds	r3, r7, r3
 8005036:	781b      	ldrb	r3, [r3, #0]
 8005038:	2240      	movs	r2, #64	@ 0x40
 800503a:	4013      	ands	r3, r2
 800503c:	d006      	beq.n	800504c <ESP_Receive+0x128>
      Error("Invalid Callback%s", uartespmod);
 800503e:	2308      	movs	r3, #8
 8005040:	18fb      	adds	r3, r7, r3
 8005042:	4a33      	ldr	r2, [pc, #204]	@ (8005110 <ESP_Receive+0x1ec>)
 8005044:	492a      	ldr	r1, [pc, #168]	@ (80050f0 <ESP_Receive+0x1cc>)
 8005046:	2001      	movs	r0, #1
 8005048:	f00e fef8 	bl	8013e3c <CreateLine>
    }
#endif
    if (reset) {
 800504c:	2327      	movs	r3, #39	@ 0x27
 800504e:	18fb      	adds	r3, r7, r3
 8005050:	781b      	ldrb	r3, [r3, #0]
 8005052:	2b00      	cmp	r3, #0
 8005054:	d03b      	beq.n	80050ce <ESP_Receive+0x1aa>
      //switch off the ESP and reset the system
      HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_RESET);
 8005056:	4b2f      	ldr	r3, [pc, #188]	@ (8005114 <ESP_Receive+0x1f0>)
 8005058:	2200      	movs	r2, #0
 800505a:	2101      	movs	r1, #1
 800505c:	0018      	movs	r0, r3
 800505e:	f010 fed8 	bl	8015e12 <HAL_GPIO_WritePin>
      HAL_Delay(10);
 8005062:	200a      	movs	r0, #10
 8005064:	f00f fc6c 	bl	8014940 <HAL_Delay>
      HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_RESET);
 8005068:	2380      	movs	r3, #128	@ 0x80
 800506a:	011b      	lsls	r3, r3, #4
 800506c:	482a      	ldr	r0, [pc, #168]	@ (8005118 <ESP_Receive+0x1f4>)
 800506e:	2200      	movs	r2, #0
 8005070:	0019      	movs	r1, r3
 8005072:	f010 fece 	bl	8015e12 <HAL_GPIO_WritePin>
      HAL_Delay(10);
 8005076:	200a      	movs	r0, #10
 8005078:	f00f fc62 	bl	8014940 <HAL_Delay>
      HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, 0);
 800507c:	4b25      	ldr	r3, [pc, #148]	@ (8005114 <ESP_Receive+0x1f0>)
 800507e:	2200      	movs	r2, #0
 8005080:	2102      	movs	r1, #2
 8005082:	0018      	movs	r0, r3
 8005084:	f010 fec5 	bl	8015e12 <HAL_GPIO_WritePin>
      // line below from: https://stackoverflow.com/questions/71287996/stm32-uart-in-dma-mode-stops-receiving-after-receiving-from-a-host-with-wrong-ba
      UART_Start_Receive_DMA(EspUart, EspUart->pRxBuffPtr, EspUart->RxXferSize);
 8005088:	4b17      	ldr	r3, [pc, #92]	@ (80050e8 <ESP_Receive+0x1c4>)
 800508a:	6818      	ldr	r0, [r3, #0]
 800508c:	4b16      	ldr	r3, [pc, #88]	@ (80050e8 <ESP_Receive+0x1c4>)
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8005092:	4b15      	ldr	r3, [pc, #84]	@ (80050e8 <ESP_Receive+0x1c4>)
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	2258      	movs	r2, #88	@ 0x58
 8005098:	5a9b      	ldrh	r3, [r3, r2]
 800509a:	001a      	movs	r2, r3
 800509c:	f019 fc7e 	bl	801e99c <UART_Start_Receive_DMA>
      for (uint8_t resl = 0; resl < 10; resl++) { //Wait some time to reset
 80050a0:	2326      	movs	r3, #38	@ 0x26
 80050a2:	18fb      	adds	r3, r7, r3
 80050a4:	2200      	movs	r2, #0
 80050a6:	701a      	strb	r2, [r3, #0]
 80050a8:	e00a      	b.n	80050c0 <ESP_Receive+0x19c>
        SetAllREDLED();
 80050aa:	f00d fd4d 	bl	8012b48 <SetAllREDLED>
        HAL_Delay(100);
 80050ae:	2064      	movs	r0, #100	@ 0x64
 80050b0:	f00f fc46 	bl	8014940 <HAL_Delay>
      for (uint8_t resl = 0; resl < 10; resl++) { //Wait some time to reset
 80050b4:	2126      	movs	r1, #38	@ 0x26
 80050b6:	187b      	adds	r3, r7, r1
 80050b8:	781a      	ldrb	r2, [r3, #0]
 80050ba:	187b      	adds	r3, r7, r1
 80050bc:	3201      	adds	r2, #1
 80050be:	701a      	strb	r2, [r3, #0]
 80050c0:	2326      	movs	r3, #38	@ 0x26
 80050c2:	18fb      	adds	r3, r7, r3
 80050c4:	781b      	ldrb	r3, [r3, #0]
 80050c6:	2b09      	cmp	r3, #9
 80050c8:	d9ef      	bls.n	80050aa <ESP_Receive+0x186>
      }
      HAL_NVIC_SystemReset();
 80050ca:	f010 f8da 	bl	8015282 <HAL_NVIC_SystemReset>
    }
    RxComplete = true;
 80050ce:	4b05      	ldr	r3, [pc, #20]	@ (80050e4 <ESP_Receive+0x1c0>)
 80050d0:	2201      	movs	r2, #1
 80050d2:	701a      	strb	r2, [r3, #0]
    return false;
 80050d4:	2300      	movs	r3, #0
 80050d6:	e000      	b.n	80050da <ESP_Receive+0x1b6>
#endif
  }
  return true;
 80050d8:	2301      	movs	r3, #1
}
 80050da:	0018      	movs	r0, r3
 80050dc:	46bd      	mov	sp, r7
 80050de:	b00b      	add	sp, #44	@ 0x2c
 80050e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80050e2:	46c0      	nop			@ (mov r8, r8)
 80050e4:	200004a8 	.word	0x200004a8
 80050e8:	200004a4 	.word	0x200004a4
 80050ec:	0802a9f0 	.word	0x0802a9f0
 80050f0:	0802a958 	.word	0x0802a958
 80050f4:	0802aa80 	.word	0x0802aa80
 80050f8:	0802aa20 	.word	0x0802aa20
 80050fc:	0802aa2c 	.word	0x0802aa2c
 8005100:	0802aa34 	.word	0x0802aa34
 8005104:	0802aa3c 	.word	0x0802aa3c
 8005108:	0802aa48 	.word	0x0802aa48
 800510c:	0802aa58 	.word	0x0802aa58
 8005110:	0802aa6c 	.word	0x0802aa6c
 8005114:	50001c00 	.word	0x50001c00
 8005118:	50000800 	.word	0x50000800

0800511c <HAL_UART_ErrorCallback>:
//    Debug("RxComplete");
//  }
//}

// Callback for UART error
void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart) {
 800511c:	b590      	push	{r4, r7, lr}
 800511e:	b093      	sub	sp, #76	@ 0x4c
 8005120:	af02      	add	r7, sp, #8
 8005122:	6078      	str	r0, [r7, #4]
  char espconnuart[] = "ESP connection UART ";
 8005124:	2328      	movs	r3, #40	@ 0x28
 8005126:	18fb      	adds	r3, r7, r3
 8005128:	4a6b      	ldr	r2, [pc, #428]	@ (80052d8 <HAL_UART_ErrorCallback+0x1bc>)
 800512a:	ca13      	ldmia	r2!, {r0, r1, r4}
 800512c:	c313      	stmia	r3!, {r0, r1, r4}
 800512e:	ca03      	ldmia	r2!, {r0, r1}
 8005130:	c303      	stmia	r3!, {r0, r1}
 8005132:	7812      	ldrb	r2, [r2, #0]
 8005134:	701a      	strb	r2, [r3, #0]
  char comcalb[] = " Complete";
 8005136:	231c      	movs	r3, #28
 8005138:	18fb      	adds	r3, r7, r3
 800513a:	4a68      	ldr	r2, [pc, #416]	@ (80052dc <HAL_UART_ErrorCallback+0x1c0>)
 800513c:	ca03      	ldmia	r2!, {r0, r1}
 800513e:	c303      	stmia	r3!, {r0, r1}
 8005140:	8812      	ldrh	r2, [r2, #0]
 8005142:	801a      	strh	r2, [r3, #0]
  char cid[] = " Callback ID";
 8005144:	230c      	movs	r3, #12
 8005146:	18fb      	adds	r3, r7, r3
 8005148:	4a65      	ldr	r2, [pc, #404]	@ (80052e0 <HAL_UART_ErrorCallback+0x1c4>)
 800514a:	ca13      	ldmia	r2!, {r0, r1, r4}
 800514c:	c313      	stmia	r3!, {r0, r1, r4}
 800514e:	7812      	ldrb	r2, [r2, #0]
 8005150:	701a      	strb	r2, [r3, #0]
  if (huart == EspUart) {
 8005152:	4b64      	ldr	r3, [pc, #400]	@ (80052e4 <HAL_UART_ErrorCallback+0x1c8>)
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	687a      	ldr	r2, [r7, #4]
 8005158:	429a      	cmp	r2, r3
 800515a:	d000      	beq.n	800515e <HAL_UART_ErrorCallback+0x42>
 800515c:	e0b9      	b.n	80052d2 <HAL_UART_ErrorCallback+0x1b6>
    if (huart->ErrorCode == 4) {
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	2284      	movs	r2, #132	@ 0x84
 8005162:	589b      	ldr	r3, [r3, r2]
 8005164:	2b04      	cmp	r3, #4
 8005166:	d100      	bne.n	800516a <HAL_UART_ErrorCallback+0x4e>
 8005168:	e0b2      	b.n	80052d0 <HAL_UART_ErrorCallback+0x1b4>
      return;
    }
    Debug("A callback error has occurred, errorcode %0X", huart->ErrorCode);
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	2284      	movs	r2, #132	@ 0x84
 800516e:	589b      	ldr	r3, [r3, r2]
 8005170:	4a5d      	ldr	r2, [pc, #372]	@ (80052e8 <HAL_UART_ErrorCallback+0x1cc>)
 8005172:	495e      	ldr	r1, [pc, #376]	@ (80052ec <HAL_UART_ErrorCallback+0x1d0>)
 8005174:	2003      	movs	r0, #3
 8005176:	f00e fe61 	bl	8013e3c <CreateLine>
    switch (huart->ErrorCode) {
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	2284      	movs	r2, #132	@ 0x84
 800517e:	589b      	ldr	r3, [r3, r2]
 8005180:	2b0c      	cmp	r3, #12
 8005182:	d900      	bls.n	8005186 <HAL_UART_ErrorCallback+0x6a>
 8005184:	e09d      	b.n	80052c2 <HAL_UART_ErrorCallback+0x1a6>
 8005186:	009a      	lsls	r2, r3, #2
 8005188:	4b59      	ldr	r3, [pc, #356]	@ (80052f0 <HAL_UART_ErrorCallback+0x1d4>)
 800518a:	18d3      	adds	r3, r2, r3
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	469f      	mov	pc, r3
      case HAL_UART_TX_HALFCOMPLETE_CB_ID:
        Error("%sTx Half%s%s", espconnuart, comcalb, cid);
 8005190:	2328      	movs	r3, #40	@ 0x28
 8005192:	18f8      	adds	r0, r7, r3
 8005194:	4a57      	ldr	r2, [pc, #348]	@ (80052f4 <HAL_UART_ErrorCallback+0x1d8>)
 8005196:	4958      	ldr	r1, [pc, #352]	@ (80052f8 <HAL_UART_ErrorCallback+0x1dc>)
 8005198:	230c      	movs	r3, #12
 800519a:	18fb      	adds	r3, r7, r3
 800519c:	9301      	str	r3, [sp, #4]
 800519e:	231c      	movs	r3, #28
 80051a0:	18fb      	adds	r3, r7, r3
 80051a2:	9300      	str	r3, [sp, #0]
 80051a4:	0003      	movs	r3, r0
 80051a6:	2001      	movs	r0, #1
 80051a8:	f00e fe48 	bl	8013e3c <CreateLine>
        break;
 80051ac:	e091      	b.n	80052d2 <HAL_UART_ErrorCallback+0x1b6>
      case HAL_UART_TX_COMPLETE_CB_ID:
        Error("%sTx%s%s", espconnuart, comcalb, cid);
 80051ae:	2328      	movs	r3, #40	@ 0x28
 80051b0:	18f8      	adds	r0, r7, r3
 80051b2:	4a52      	ldr	r2, [pc, #328]	@ (80052fc <HAL_UART_ErrorCallback+0x1e0>)
 80051b4:	4950      	ldr	r1, [pc, #320]	@ (80052f8 <HAL_UART_ErrorCallback+0x1dc>)
 80051b6:	230c      	movs	r3, #12
 80051b8:	18fb      	adds	r3, r7, r3
 80051ba:	9301      	str	r3, [sp, #4]
 80051bc:	231c      	movs	r3, #28
 80051be:	18fb      	adds	r3, r7, r3
 80051c0:	9300      	str	r3, [sp, #0]
 80051c2:	0003      	movs	r3, r0
 80051c4:	2001      	movs	r0, #1
 80051c6:	f00e fe39 	bl	8013e3c <CreateLine>
        break;
 80051ca:	e082      	b.n	80052d2 <HAL_UART_ErrorCallback+0x1b6>
      case HAL_UART_RX_HALFCOMPLETE_CB_ID:
        Error("%sRx Half%s%s", espconnuart, comcalb, cid);
 80051cc:	2328      	movs	r3, #40	@ 0x28
 80051ce:	18f8      	adds	r0, r7, r3
 80051d0:	4a4b      	ldr	r2, [pc, #300]	@ (8005300 <HAL_UART_ErrorCallback+0x1e4>)
 80051d2:	4949      	ldr	r1, [pc, #292]	@ (80052f8 <HAL_UART_ErrorCallback+0x1dc>)
 80051d4:	230c      	movs	r3, #12
 80051d6:	18fb      	adds	r3, r7, r3
 80051d8:	9301      	str	r3, [sp, #4]
 80051da:	231c      	movs	r3, #28
 80051dc:	18fb      	adds	r3, r7, r3
 80051de:	9300      	str	r3, [sp, #0]
 80051e0:	0003      	movs	r3, r0
 80051e2:	2001      	movs	r0, #1
 80051e4:	f00e fe2a 	bl	8013e3c <CreateLine>
        break;
 80051e8:	e073      	b.n	80052d2 <HAL_UART_ErrorCallback+0x1b6>
      case HAL_UART_RX_COMPLETE_CB_ID:
        Error("%sRx%s%s", espconnuart, comcalb, cid);
 80051ea:	2328      	movs	r3, #40	@ 0x28
 80051ec:	18f8      	adds	r0, r7, r3
 80051ee:	4a45      	ldr	r2, [pc, #276]	@ (8005304 <HAL_UART_ErrorCallback+0x1e8>)
 80051f0:	4941      	ldr	r1, [pc, #260]	@ (80052f8 <HAL_UART_ErrorCallback+0x1dc>)
 80051f2:	230c      	movs	r3, #12
 80051f4:	18fb      	adds	r3, r7, r3
 80051f6:	9301      	str	r3, [sp, #4]
 80051f8:	231c      	movs	r3, #28
 80051fa:	18fb      	adds	r3, r7, r3
 80051fc:	9300      	str	r3, [sp, #0]
 80051fe:	0003      	movs	r3, r0
 8005200:	2001      	movs	r0, #1
 8005202:	f00e fe1b 	bl	8013e3c <CreateLine>
        break;
 8005206:	e064      	b.n	80052d2 <HAL_UART_ErrorCallback+0x1b6>
      case HAL_UART_ERROR_CB_ID:
        Error("%sError%s", espconnuart, cid);
 8005208:	2328      	movs	r3, #40	@ 0x28
 800520a:	18f8      	adds	r0, r7, r3
 800520c:	4a3e      	ldr	r2, [pc, #248]	@ (8005308 <HAL_UART_ErrorCallback+0x1ec>)
 800520e:	493a      	ldr	r1, [pc, #232]	@ (80052f8 <HAL_UART_ErrorCallback+0x1dc>)
 8005210:	230c      	movs	r3, #12
 8005212:	18fb      	adds	r3, r7, r3
 8005214:	9300      	str	r3, [sp, #0]
 8005216:	0003      	movs	r3, r0
 8005218:	2001      	movs	r0, #1
 800521a:	f00e fe0f 	bl	8013e3c <CreateLine>
        break;
 800521e:	e058      	b.n	80052d2 <HAL_UART_ErrorCallback+0x1b6>
      case HAL_UART_ABORT_COMPLETE_CB_ID:
        Error("%sAbort%s%s", espconnuart, comcalb, cid);
 8005220:	2328      	movs	r3, #40	@ 0x28
 8005222:	18f8      	adds	r0, r7, r3
 8005224:	4a39      	ldr	r2, [pc, #228]	@ (800530c <HAL_UART_ErrorCallback+0x1f0>)
 8005226:	4934      	ldr	r1, [pc, #208]	@ (80052f8 <HAL_UART_ErrorCallback+0x1dc>)
 8005228:	230c      	movs	r3, #12
 800522a:	18fb      	adds	r3, r7, r3
 800522c:	9301      	str	r3, [sp, #4]
 800522e:	231c      	movs	r3, #28
 8005230:	18fb      	adds	r3, r7, r3
 8005232:	9300      	str	r3, [sp, #0]
 8005234:	0003      	movs	r3, r0
 8005236:	2001      	movs	r0, #1
 8005238:	f00e fe00 	bl	8013e3c <CreateLine>
        break;
 800523c:	e049      	b.n	80052d2 <HAL_UART_ErrorCallback+0x1b6>
      case HAL_UART_ABORT_TRANSMIT_COMPLETE_CB_ID:
        Error("%sAbort Transmit%s%s", espconnuart, comcalb, cid);
 800523e:	2328      	movs	r3, #40	@ 0x28
 8005240:	18f8      	adds	r0, r7, r3
 8005242:	4a33      	ldr	r2, [pc, #204]	@ (8005310 <HAL_UART_ErrorCallback+0x1f4>)
 8005244:	492c      	ldr	r1, [pc, #176]	@ (80052f8 <HAL_UART_ErrorCallback+0x1dc>)
 8005246:	230c      	movs	r3, #12
 8005248:	18fb      	adds	r3, r7, r3
 800524a:	9301      	str	r3, [sp, #4]
 800524c:	231c      	movs	r3, #28
 800524e:	18fb      	adds	r3, r7, r3
 8005250:	9300      	str	r3, [sp, #0]
 8005252:	0003      	movs	r3, r0
 8005254:	2001      	movs	r0, #1
 8005256:	f00e fdf1 	bl	8013e3c <CreateLine>
        break;
 800525a:	e03a      	b.n	80052d2 <HAL_UART_ErrorCallback+0x1b6>
      case HAL_UART_ABORT_RECEIVE_COMPLETE_CB_ID:
        Error("%sAbort Receive%s%s", espconnuart, comcalb, cid);
 800525c:	2328      	movs	r3, #40	@ 0x28
 800525e:	18f8      	adds	r0, r7, r3
 8005260:	4a2c      	ldr	r2, [pc, #176]	@ (8005314 <HAL_UART_ErrorCallback+0x1f8>)
 8005262:	4925      	ldr	r1, [pc, #148]	@ (80052f8 <HAL_UART_ErrorCallback+0x1dc>)
 8005264:	230c      	movs	r3, #12
 8005266:	18fb      	adds	r3, r7, r3
 8005268:	9301      	str	r3, [sp, #4]
 800526a:	231c      	movs	r3, #28
 800526c:	18fb      	adds	r3, r7, r3
 800526e:	9300      	str	r3, [sp, #0]
 8005270:	0003      	movs	r3, r0
 8005272:	2001      	movs	r0, #1
 8005274:	f00e fde2 	bl	8013e3c <CreateLine>
        break;
 8005278:	e02b      	b.n	80052d2 <HAL_UART_ErrorCallback+0x1b6>
      case HAL_UART_WAKEUP_CB_ID:
        Error("%sWakeup%s", espconnuart, cid);
 800527a:	2328      	movs	r3, #40	@ 0x28
 800527c:	18f8      	adds	r0, r7, r3
 800527e:	4a26      	ldr	r2, [pc, #152]	@ (8005318 <HAL_UART_ErrorCallback+0x1fc>)
 8005280:	491d      	ldr	r1, [pc, #116]	@ (80052f8 <HAL_UART_ErrorCallback+0x1dc>)
 8005282:	230c      	movs	r3, #12
 8005284:	18fb      	adds	r3, r7, r3
 8005286:	9300      	str	r3, [sp, #0]
 8005288:	0003      	movs	r3, r0
 800528a:	2001      	movs	r0, #1
 800528c:	f00e fdd6 	bl	8013e3c <CreateLine>
        break;
 8005290:	e01f      	b.n	80052d2 <HAL_UART_ErrorCallback+0x1b6>
      case HAL_UART_MSPINIT_CB_ID:
        Error("%sMspInit%s", espconnuart, cid);
 8005292:	2328      	movs	r3, #40	@ 0x28
 8005294:	18f8      	adds	r0, r7, r3
 8005296:	4a21      	ldr	r2, [pc, #132]	@ (800531c <HAL_UART_ErrorCallback+0x200>)
 8005298:	4917      	ldr	r1, [pc, #92]	@ (80052f8 <HAL_UART_ErrorCallback+0x1dc>)
 800529a:	230c      	movs	r3, #12
 800529c:	18fb      	adds	r3, r7, r3
 800529e:	9300      	str	r3, [sp, #0]
 80052a0:	0003      	movs	r3, r0
 80052a2:	2001      	movs	r0, #1
 80052a4:	f00e fdca 	bl	8013e3c <CreateLine>
        break;
 80052a8:	e013      	b.n	80052d2 <HAL_UART_ErrorCallback+0x1b6>
      case HAL_UART_MSPDEINIT_CB_ID:
        Error("%sMspDeInit%s", espconnuart, cid);
 80052aa:	2328      	movs	r3, #40	@ 0x28
 80052ac:	18f8      	adds	r0, r7, r3
 80052ae:	4a1c      	ldr	r2, [pc, #112]	@ (8005320 <HAL_UART_ErrorCallback+0x204>)
 80052b0:	4911      	ldr	r1, [pc, #68]	@ (80052f8 <HAL_UART_ErrorCallback+0x1dc>)
 80052b2:	230c      	movs	r3, #12
 80052b4:	18fb      	adds	r3, r7, r3
 80052b6:	9300      	str	r3, [sp, #0]
 80052b8:	0003      	movs	r3, r0
 80052ba:	2001      	movs	r0, #1
 80052bc:	f00e fdbe 	bl	8013e3c <CreateLine>
        break;
 80052c0:	e007      	b.n	80052d2 <HAL_UART_ErrorCallback+0x1b6>
      default:
        Error("%sUnknown error");
 80052c2:	4a18      	ldr	r2, [pc, #96]	@ (8005324 <HAL_UART_ErrorCallback+0x208>)
 80052c4:	4b0c      	ldr	r3, [pc, #48]	@ (80052f8 <HAL_UART_ErrorCallback+0x1dc>)
 80052c6:	0019      	movs	r1, r3
 80052c8:	2001      	movs	r0, #1
 80052ca:	f00e fdb7 	bl	8013e3c <CreateLine>
 80052ce:	e000      	b.n	80052d2 <HAL_UART_ErrorCallback+0x1b6>
      return;
 80052d0:	46c0      	nop			@ (mov r8, r8)
    }
  }
}
 80052d2:	46bd      	mov	sp, r7
 80052d4:	b011      	add	sp, #68	@ 0x44
 80052d6:	bd90      	pop	{r4, r7, pc}
 80052d8:	0802ab84 	.word	0x0802ab84
 80052dc:	0802ab9c 	.word	0x0802ab9c
 80052e0:	0802aba8 	.word	0x0802aba8
 80052e4:	200004a4 	.word	0x200004a4
 80052e8:	0802aaa0 	.word	0x0802aaa0
 80052ec:	0802a9bc 	.word	0x0802a9bc
 80052f0:	0802dd90 	.word	0x0802dd90
 80052f4:	0802aad0 	.word	0x0802aad0
 80052f8:	0802a958 	.word	0x0802a958
 80052fc:	0802aae0 	.word	0x0802aae0
 8005300:	0802aaec 	.word	0x0802aaec
 8005304:	0802aafc 	.word	0x0802aafc
 8005308:	0802ab08 	.word	0x0802ab08
 800530c:	0802ab14 	.word	0x0802ab14
 8005310:	0802ab20 	.word	0x0802ab20
 8005314:	0802ab38 	.word	0x0802ab38
 8005318:	0802ab4c 	.word	0x0802ab4c
 800531c:	0802ab58 	.word	0x0802ab58
 8005320:	0802ab64 	.word	0x0802ab64
 8005324:	0802ab74 	.word	0x0802ab74

08005328 <isKeyValid>:

bool isKeyValid(uint8_t data[], char *sensormodel, char *sensortype) {
 8005328:	b580      	push	{r7, lr}
 800532a:	b088      	sub	sp, #32
 800532c:	af02      	add	r7, sp, #8
 800532e:	60f8      	str	r0, [r7, #12]
 8005330:	60b9      	str	r1, [r7, #8]
 8005332:	607a      	str	r2, [r7, #4]
  if ((data[0] > 66) && (data[0] != 0xFF))
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	781b      	ldrb	r3, [r3, #0]
 8005338:	2b42      	cmp	r3, #66	@ 0x42
 800533a:	d905      	bls.n	8005348 <isKeyValid+0x20>
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	781b      	ldrb	r3, [r3, #0]
 8005340:	2bff      	cmp	r3, #255	@ 0xff
 8005342:	d001      	beq.n	8005348 <isKeyValid+0x20>
    return true;
 8005344:	2301      	movs	r3, #1
 8005346:	e03e      	b.n	80053c6 <isKeyValid+0x9e>
  else {
    Error("Error sensor %s has no stored key for %s: ", sensormodel, sensortype);
 8005348:	68b8      	ldr	r0, [r7, #8]
 800534a:	4a21      	ldr	r2, [pc, #132]	@ (80053d0 <isKeyValid+0xa8>)
 800534c:	4921      	ldr	r1, [pc, #132]	@ (80053d4 <isKeyValid+0xac>)
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	9300      	str	r3, [sp, #0]
 8005352:	0003      	movs	r3, r0
 8005354:	2001      	movs	r0, #1
 8005356:	f00e fd71 	bl	8013e3c <CreateLine>
    for (int i = 0; i < 12; i++) {
 800535a:	2300      	movs	r3, #0
 800535c:	617b      	str	r3, [r7, #20]
 800535e:	e01e      	b.n	800539e <isKeyValid+0x76>
      if (usblog && Check_USB_PowerOn()) {
 8005360:	4b1d      	ldr	r3, [pc, #116]	@ (80053d8 <isKeyValid+0xb0>)
 8005362:	781b      	ldrb	r3, [r3, #0]
 8005364:	2b00      	cmp	r3, #0
 8005366:	d00d      	beq.n	8005384 <isKeyValid+0x5c>
 8005368:	f004 fc56 	bl	8009c18 <Check_USB_PowerOn>
 800536c:	1e03      	subs	r3, r0, #0
 800536e:	d009      	beq.n	8005384 <isKeyValid+0x5c>
        printf_USB("%02x", data[i]);
 8005370:	697b      	ldr	r3, [r7, #20]
 8005372:	68fa      	ldr	r2, [r7, #12]
 8005374:	18d3      	adds	r3, r2, r3
 8005376:	781b      	ldrb	r3, [r3, #0]
 8005378:	001a      	movs	r2, r3
 800537a:	4b18      	ldr	r3, [pc, #96]	@ (80053dc <isKeyValid+0xb4>)
 800537c:	0011      	movs	r1, r2
 800537e:	0018      	movs	r0, r3
 8005380:	f003 fb90 	bl	8008aa4 <printf_USB>
      }
      printf("%02x", data[i]);
 8005384:	697b      	ldr	r3, [r7, #20]
 8005386:	68fa      	ldr	r2, [r7, #12]
 8005388:	18d3      	adds	r3, r2, r3
 800538a:	781b      	ldrb	r3, [r3, #0]
 800538c:	001a      	movs	r2, r3
 800538e:	4b13      	ldr	r3, [pc, #76]	@ (80053dc <isKeyValid+0xb4>)
 8005390:	0011      	movs	r1, r2
 8005392:	0018      	movs	r0, r3
 8005394:	f020 ff0c 	bl	80261b0 <iprintf>
    for (int i = 0; i < 12; i++) {
 8005398:	697b      	ldr	r3, [r7, #20]
 800539a:	3301      	adds	r3, #1
 800539c:	617b      	str	r3, [r7, #20]
 800539e:	697b      	ldr	r3, [r7, #20]
 80053a0:	2b0b      	cmp	r3, #11
 80053a2:	dddd      	ble.n	8005360 <isKeyValid+0x38>
    }
    if (usblog && Check_USB_PowerOn()) {
 80053a4:	4b0c      	ldr	r3, [pc, #48]	@ (80053d8 <isKeyValid+0xb0>)
 80053a6:	781b      	ldrb	r3, [r3, #0]
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d007      	beq.n	80053bc <isKeyValid+0x94>
 80053ac:	f004 fc34 	bl	8009c18 <Check_USB_PowerOn>
 80053b0:	1e03      	subs	r3, r0, #0
 80053b2:	d003      	beq.n	80053bc <isKeyValid+0x94>
      printf_USB("\r\n");
 80053b4:	4b0a      	ldr	r3, [pc, #40]	@ (80053e0 <isKeyValid+0xb8>)
 80053b6:	0018      	movs	r0, r3
 80053b8:	f003 fb74 	bl	8008aa4 <printf_USB>
    }
    printf("\r\n");
 80053bc:	4b09      	ldr	r3, [pc, #36]	@ (80053e4 <isKeyValid+0xbc>)
 80053be:	0018      	movs	r0, r3
 80053c0:	f020 ff5c 	bl	802627c <puts>
    return false;
 80053c4:	2300      	movs	r3, #0
  }
}
 80053c6:	0018      	movs	r0, r3
 80053c8:	46bd      	mov	sp, r7
 80053ca:	b006      	add	sp, #24
 80053cc:	bd80      	pop	{r7, pc}
 80053ce:	46c0      	nop			@ (mov r8, r8)
 80053d0:	0802abb8 	.word	0x0802abb8
 80053d4:	0802a958 	.word	0x0802a958
 80053d8:	200010f7 	.word	0x200010f7
 80053dc:	0802abe4 	.word	0x0802abe4
 80053e0:	0802abec 	.word	0x0802abec
 80053e4:	0802abf0 	.word	0x0802abf0

080053e8 <uint8ArrayToString>:

void uint8ArrayToString(char *destination, uint8_t data[]) {
 80053e8:	b580      	push	{r7, lr}
 80053ea:	b084      	sub	sp, #16
 80053ec:	af00      	add	r7, sp, #0
 80053ee:	6078      	str	r0, [r7, #4]
 80053f0:	6039      	str	r1, [r7, #0]
  for (int i = 0; i < 12; i++) {
 80053f2:	2300      	movs	r3, #0
 80053f4:	60fb      	str	r3, [r7, #12]
 80053f6:	e010      	b.n	800541a <uint8ArrayToString+0x32>
    sprintf(&destination[i * 2], "%02x", data[i]);
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	005b      	lsls	r3, r3, #1
 80053fc:	001a      	movs	r2, r3
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	1898      	adds	r0, r3, r2
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	683a      	ldr	r2, [r7, #0]
 8005406:	18d3      	adds	r3, r2, r3
 8005408:	781b      	ldrb	r3, [r3, #0]
 800540a:	001a      	movs	r2, r3
 800540c:	4b07      	ldr	r3, [pc, #28]	@ (800542c <uint8ArrayToString+0x44>)
 800540e:	0019      	movs	r1, r3
 8005410:	f020 ff3e 	bl	8026290 <siprintf>
  for (int i = 0; i < 12; i++) {
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	3301      	adds	r3, #1
 8005418:	60fb      	str	r3, [r7, #12]
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	2b0b      	cmp	r3, #11
 800541e:	ddeb      	ble.n	80053f8 <uint8ArrayToString+0x10>
  }
}
 8005420:	46c0      	nop			@ (mov r8, r8)
 8005422:	46c0      	nop			@ (mov r8, r8)
 8005424:	46bd      	mov	sp, r7
 8005426:	b004      	add	sp, #16
 8005428:	bd80      	pop	{r7, pc}
 800542a:	46c0      	nop			@ (mov r8, r8)
 800542c:	0802abe4 	.word	0x0802abe4

08005430 <CreateMailMessage>:

#ifdef USE_MAIL
uint16_t CreateMailMessage(bool *txstat, bool send) {
 8005430:	b590      	push	{r4, r7, lr}
 8005432:	b087      	sub	sp, #28
 8005434:	af02      	add	r7, sp, #8
 8005436:	6078      	str	r0, [r7, #4]
 8005438:	000a      	movs	r2, r1
 800543a:	1cfb      	adds	r3, r7, #3
 800543c:	701a      	strb	r2, [r3, #0]
  static bool status = false;
  static bool retstat = true;
  static uint8_t nameConfig[CustomNameMaxLength];
  static uint8_t SendFromnameConfig[SendFromNameMaxLength];
  static uint8_t SendTonameConfig[SendToNameMaxLength];
  uint16_t lngth = 0;
 800543e:	240e      	movs	r4, #14
 8005440:	193b      	adds	r3, r7, r4
 8005442:	2200      	movs	r2, #0
 8005444:	801a      	strh	r2, [r3, #0]
  ReadUint8ArrayEEprom(CustomNameConfigAddr, nameConfig, CustomNameMaxLength);
 8005446:	4b41      	ldr	r3, [pc, #260]	@ (800554c <CreateMailMessage+0x11c>)
 8005448:	4841      	ldr	r0, [pc, #260]	@ (8005550 <CreateMailMessage+0x120>)
 800544a:	2220      	movs	r2, #32
 800544c:	0019      	movs	r1, r3
 800544e:	f006 fe53 	bl	800c0f8 <ReadUint8ArrayEEprom>
  ReadUint8ArrayEEprom(SendFromNameConfigAddr, SendFromnameConfig, SendFromNameMaxLength);
 8005452:	4b40      	ldr	r3, [pc, #256]	@ (8005554 <CreateMailMessage+0x124>)
 8005454:	4840      	ldr	r0, [pc, #256]	@ (8005558 <CreateMailMessage+0x128>)
 8005456:	2230      	movs	r2, #48	@ 0x30
 8005458:	0019      	movs	r1, r3
 800545a:	f006 fe4d 	bl	800c0f8 <ReadUint8ArrayEEprom>
  ReadUint8ArrayEEprom(SendToNameConfigAddr, SendTonameConfig, SendToNameMaxLength);
 800545e:	4b3f      	ldr	r3, [pc, #252]	@ (800555c <CreateMailMessage+0x12c>)
 8005460:	483f      	ldr	r0, [pc, #252]	@ (8005560 <CreateMailMessage+0x130>)
 8005462:	2230      	movs	r2, #48	@ 0x30
 8005464:	0019      	movs	r1, r3
 8005466:	f006 fe47 	bl	800c0f8 <ReadUint8ArrayEEprom>
  sprintf(message, "{\r\n\"sender\": \"%s\",\r\n\"to\": [\r\n\"%s\"\r\n],\r\n\"subject\": \"Battery status\",\r\n", (char*)SendFromnameConfig, (char*)SendTonameConfig);
 800546a:	4b3c      	ldr	r3, [pc, #240]	@ (800555c <CreateMailMessage+0x12c>)
 800546c:	4a39      	ldr	r2, [pc, #228]	@ (8005554 <CreateMailMessage+0x124>)
 800546e:	493d      	ldr	r1, [pc, #244]	@ (8005564 <CreateMailMessage+0x134>)
 8005470:	483d      	ldr	r0, [pc, #244]	@ (8005568 <CreateMailMessage+0x138>)
 8005472:	f020 ff0d 	bl	8026290 <siprintf>
  lngth = strlen(message);
 8005476:	4b3c      	ldr	r3, [pc, #240]	@ (8005568 <CreateMailMessage+0x138>)
 8005478:	0018      	movs	r0, r3
 800547a:	f7fa fe77 	bl	800016c <strlen>
 800547e:	0002      	movs	r2, r0
 8005480:	193b      	adds	r3, r7, r4
 8005482:	801a      	strh	r2, [r3, #0]
  if (send) {
 8005484:	1cfb      	adds	r3, r7, #3
 8005486:	781b      	ldrb	r3, [r3, #0]
 8005488:	2b00      	cmp	r3, #0
 800548a:	d019      	beq.n	80054c0 <CreateMailMessage+0x90>
    status = ESP_Send((uint8_t*)message, strlen(message));
 800548c:	4b36      	ldr	r3, [pc, #216]	@ (8005568 <CreateMailMessage+0x138>)
 800548e:	0018      	movs	r0, r3
 8005490:	f7fa fe6c 	bl	800016c <strlen>
 8005494:	0003      	movs	r3, r0
 8005496:	b29a      	uxth	r2, r3
 8005498:	4b33      	ldr	r3, [pc, #204]	@ (8005568 <CreateMailMessage+0x138>)
 800549a:	0011      	movs	r1, r2
 800549c:	0018      	movs	r0, r3
 800549e:	f7ff fcdf 	bl	8004e60 <ESP_Send>
 80054a2:	0003      	movs	r3, r0
 80054a4:	001a      	movs	r2, r3
 80054a6:	4b31      	ldr	r3, [pc, #196]	@ (800556c <CreateMailMessage+0x13c>)
 80054a8:	701a      	strb	r2, [r3, #0]
    retstat &= status;
 80054aa:	4b31      	ldr	r3, [pc, #196]	@ (8005570 <CreateMailMessage+0x140>)
 80054ac:	781b      	ldrb	r3, [r3, #0]
 80054ae:	001a      	movs	r2, r3
 80054b0:	4b2e      	ldr	r3, [pc, #184]	@ (800556c <CreateMailMessage+0x13c>)
 80054b2:	781b      	ldrb	r3, [r3, #0]
 80054b4:	4013      	ands	r3, r2
 80054b6:	1e5a      	subs	r2, r3, #1
 80054b8:	4193      	sbcs	r3, r2
 80054ba:	b2da      	uxtb	r2, r3
 80054bc:	4b2c      	ldr	r3, [pc, #176]	@ (8005570 <CreateMailMessage+0x140>)
 80054be:	701a      	strb	r2, [r3, #0]
  }
  sprintf(message, "\"text_body\": \"Battery of device %s is nearly empty. Actual voltage is %.2fV\"\r\n}\r\n", (char*)nameConfig, ReadBatteryVoltage());
 80054c0:	f004 faf4 	bl	8009aac <ReadBatteryVoltage>
 80054c4:	1c03      	adds	r3, r0, #0
 80054c6:	1c18      	adds	r0, r3, #0
 80054c8:	f7fe f9e4 	bl	8003894 <__aeabi_f2d>
 80054cc:	0002      	movs	r2, r0
 80054ce:	000b      	movs	r3, r1
 80054d0:	4c1e      	ldr	r4, [pc, #120]	@ (800554c <CreateMailMessage+0x11c>)
 80054d2:	4928      	ldr	r1, [pc, #160]	@ (8005574 <CreateMailMessage+0x144>)
 80054d4:	4824      	ldr	r0, [pc, #144]	@ (8005568 <CreateMailMessage+0x138>)
 80054d6:	9200      	str	r2, [sp, #0]
 80054d8:	9301      	str	r3, [sp, #4]
 80054da:	0022      	movs	r2, r4
 80054dc:	f020 fed8 	bl	8026290 <siprintf>
  lngth += strlen(message);
 80054e0:	4b21      	ldr	r3, [pc, #132]	@ (8005568 <CreateMailMessage+0x138>)
 80054e2:	0018      	movs	r0, r3
 80054e4:	f7fa fe42 	bl	800016c <strlen>
 80054e8:	0003      	movs	r3, r0
 80054ea:	b299      	uxth	r1, r3
 80054ec:	220e      	movs	r2, #14
 80054ee:	18bb      	adds	r3, r7, r2
 80054f0:	18ba      	adds	r2, r7, r2
 80054f2:	8812      	ldrh	r2, [r2, #0]
 80054f4:	188a      	adds	r2, r1, r2
 80054f6:	801a      	strh	r2, [r3, #0]
  if (send) {
 80054f8:	1cfb      	adds	r3, r7, #3
 80054fa:	781b      	ldrb	r3, [r3, #0]
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d019      	beq.n	8005534 <CreateMailMessage+0x104>
    status = ESP_Send((uint8_t*)message, strlen(message));
 8005500:	4b19      	ldr	r3, [pc, #100]	@ (8005568 <CreateMailMessage+0x138>)
 8005502:	0018      	movs	r0, r3
 8005504:	f7fa fe32 	bl	800016c <strlen>
 8005508:	0003      	movs	r3, r0
 800550a:	b29a      	uxth	r2, r3
 800550c:	4b16      	ldr	r3, [pc, #88]	@ (8005568 <CreateMailMessage+0x138>)
 800550e:	0011      	movs	r1, r2
 8005510:	0018      	movs	r0, r3
 8005512:	f7ff fca5 	bl	8004e60 <ESP_Send>
 8005516:	0003      	movs	r3, r0
 8005518:	001a      	movs	r2, r3
 800551a:	4b14      	ldr	r3, [pc, #80]	@ (800556c <CreateMailMessage+0x13c>)
 800551c:	701a      	strb	r2, [r3, #0]
    retstat &= status;
 800551e:	4b14      	ldr	r3, [pc, #80]	@ (8005570 <CreateMailMessage+0x140>)
 8005520:	781b      	ldrb	r3, [r3, #0]
 8005522:	001a      	movs	r2, r3
 8005524:	4b11      	ldr	r3, [pc, #68]	@ (800556c <CreateMailMessage+0x13c>)
 8005526:	781b      	ldrb	r3, [r3, #0]
 8005528:	4013      	ands	r3, r2
 800552a:	1e5a      	subs	r2, r3, #1
 800552c:	4193      	sbcs	r3, r2
 800552e:	b2da      	uxtb	r2, r3
 8005530:	4b0f      	ldr	r3, [pc, #60]	@ (8005570 <CreateMailMessage+0x140>)
 8005532:	701a      	strb	r2, [r3, #0]
  }
  *txstat = retstat;
 8005534:	4b0e      	ldr	r3, [pc, #56]	@ (8005570 <CreateMailMessage+0x140>)
 8005536:	781a      	ldrb	r2, [r3, #0]
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	701a      	strb	r2, [r3, #0]
  return lngth;
 800553c:	230e      	movs	r3, #14
 800553e:	18fb      	adds	r3, r7, r3
 8005540:	881b      	ldrh	r3, [r3, #0]
}
 8005542:	0018      	movs	r0, r3
 8005544:	46bd      	mov	sp, r7
 8005546:	b005      	add	sp, #20
 8005548:	bd90      	pop	{r4, r7, pc}
 800554a:	46c0      	nop			@ (mov r8, r8)
 800554c:	20000790 	.word	0x20000790
 8005550:	08080090 	.word	0x08080090
 8005554:	200007b0 	.word	0x200007b0
 8005558:	08080260 	.word	0x08080260
 800555c:	200007e0 	.word	0x200007e0
 8005560:	08080290 	.word	0x08080290
 8005564:	0802abf4 	.word	0x0802abf4
 8005568:	200005c4 	.word	0x200005c4
 800556c:	20000810 	.word	0x20000810
 8005570:	20000031 	.word	0x20000031
 8005574:	0802ac3c 	.word	0x0802ac3c

08005578 <CreateMessage>:
#endif

uint16_t CreateMessage(bool *txstat, bool send) {
 8005578:	b5b0      	push	{r4, r5, r7, lr}
 800557a:	b086      	sub	sp, #24
 800557c:	af02      	add	r7, sp, #8
 800557e:	6078      	str	r0, [r7, #4]
 8005580:	000a      	movs	r2, r1
 8005582:	1cfb      	adds	r3, r7, #3
 8005584:	701a      	strb	r2, [r3, #0]
  static char uptimeBuf[14];
#ifdef LONGDATAGRAM
  static char Buffer[(IdSize*2)+1];
#endif

  if(checkName()){
 8005586:	f7ff f9f9 	bl	800497c <checkName>
 800558a:	1e03      	subs	r3, r0, #0
 800558c:	d00a      	beq.n	80055a4 <CreateMessage+0x2c>
    ReadUint8ArrayEEprom(CustomNameConfigAddr, nameConfig, CustomNameMaxLength);
 800558e:	4b03      	ldr	r3, [pc, #12]	@ (800559c <CreateMessage+0x24>)
 8005590:	4803      	ldr	r0, [pc, #12]	@ (80055a0 <CreateMessage+0x28>)
 8005592:	2220      	movs	r2, #32
 8005594:	0019      	movs	r1, r3
 8005596:	f006 fdaf 	bl	800c0f8 <ReadUint8ArrayEEprom>
 800559a:	e009      	b.n	80055b0 <CreateMessage+0x38>
 800559c:	20000814 	.word	0x20000814
 80055a0:	08080090 	.word	0x08080090
  }
  else{
    strncpy((char*)nameConfig, user, 5);
 80055a4:	4beb      	ldr	r3, [pc, #940]	@ (8005954 <CreateMessage+0x3dc>)
 80055a6:	4aec      	ldr	r2, [pc, #944]	@ (8005958 <CreateMessage+0x3e0>)
 80055a8:	6811      	ldr	r1, [r2, #0]
 80055aa:	6019      	str	r1, [r3, #0]
 80055ac:	7912      	ldrb	r2, [r2, #4]
 80055ae:	711a      	strb	r2, [r3, #4]
  }
  setCharges();
 80055b0:	f7ff f98a 	bl	80048c8 <setCharges>
  uint16_t index = 0;
 80055b4:	250e      	movs	r5, #14
 80055b6:	197b      	adds	r3, r7, r5
 80055b8:	2200      	movs	r2, #0
 80055ba:	801a      	strh	r2, [r3, #0]
  sprintf(&message[index], "[");
 80055bc:	197b      	adds	r3, r7, r5
 80055be:	881a      	ldrh	r2, [r3, #0]
 80055c0:	4be6      	ldr	r3, [pc, #920]	@ (800595c <CreateMessage+0x3e4>)
 80055c2:	18d3      	adds	r3, r2, r3
 80055c4:	4ae6      	ldr	r2, [pc, #920]	@ (8005960 <CreateMessage+0x3e8>)
 80055c6:	0011      	movs	r1, r2
 80055c8:	0018      	movs	r0, r3
 80055ca:	f020 fe61 	bl	8026290 <siprintf>
#ifdef LONGDATAGRAM
  ReadUint8ArrayEEprom(TempConfigAddr, keybuffer, IdSize);
 80055ce:	4be5      	ldr	r3, [pc, #916]	@ (8005964 <CreateMessage+0x3ec>)
 80055d0:	48e5      	ldr	r0, [pc, #916]	@ (8005968 <CreateMessage+0x3f0>)
 80055d2:	220c      	movs	r2, #12
 80055d4:	0019      	movs	r1, r3
 80055d6:	f006 fd8f 	bl	800c0f8 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, keybuffer);
 80055da:	4ae2      	ldr	r2, [pc, #904]	@ (8005964 <CreateMessage+0x3ec>)
 80055dc:	4be3      	ldr	r3, [pc, #908]	@ (800596c <CreateMessage+0x3f4>)
 80055de:	0011      	movs	r1, r2
 80055e0:	0018      	movs	r0, r3
 80055e2:	f7ff ff01 	bl	80053e8 <uint8ArrayToString>
#ifdef OPENSENSEMAP
  sprintf(&message[1], "{\"sensor\": \"%s\", \"value\":%.2f}", Buffer, MeasVal.Temperature);
 80055e6:	4be2      	ldr	r3, [pc, #904]	@ (8005970 <CreateMessage+0x3f8>)
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	1c18      	adds	r0, r3, #0
 80055ec:	f7fe f952 	bl	8003894 <__aeabi_f2d>
 80055f0:	0002      	movs	r2, r0
 80055f2:	000b      	movs	r3, r1
 80055f4:	4cdd      	ldr	r4, [pc, #884]	@ (800596c <CreateMessage+0x3f4>)
 80055f6:	49df      	ldr	r1, [pc, #892]	@ (8005974 <CreateMessage+0x3fc>)
 80055f8:	48df      	ldr	r0, [pc, #892]	@ (8005978 <CreateMessage+0x400>)
 80055fa:	9200      	str	r2, [sp, #0]
 80055fc:	9301      	str	r3, [sp, #4]
 80055fe:	0022      	movs	r2, r4
 8005600:	f020 fe46 	bl	8026290 <siprintf>
#else
  sprintf(&message[1], "{\"name\":\"temp\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.2f, \"unit\":\"C\"}", uid[2], (char*)nameConfig, Buffer, MeasVal.Temperature);
#endif
index = strlen(message);
 8005604:	4bd5      	ldr	r3, [pc, #852]	@ (800595c <CreateMessage+0x3e4>)
 8005606:	0018      	movs	r0, r3
 8005608:	f7fa fdb0 	bl	800016c <strlen>
 800560c:	0002      	movs	r2, r0
 800560e:	197b      	adds	r3, r7, r5
 8005610:	801a      	strh	r2, [r3, #0]
  if (send) {
 8005612:	1cfb      	adds	r3, r7, #3
 8005614:	781b      	ldrb	r3, [r3, #0]
 8005616:	2b00      	cmp	r3, #0
 8005618:	d019      	beq.n	800564e <CreateMessage+0xd6>
    status = ESP_Send((uint8_t*)message, strlen(message));
 800561a:	4bd0      	ldr	r3, [pc, #832]	@ (800595c <CreateMessage+0x3e4>)
 800561c:	0018      	movs	r0, r3
 800561e:	f7fa fda5 	bl	800016c <strlen>
 8005622:	0003      	movs	r3, r0
 8005624:	b29a      	uxth	r2, r3
 8005626:	4bcd      	ldr	r3, [pc, #820]	@ (800595c <CreateMessage+0x3e4>)
 8005628:	0011      	movs	r1, r2
 800562a:	0018      	movs	r0, r3
 800562c:	f7ff fc18 	bl	8004e60 <ESP_Send>
 8005630:	0003      	movs	r3, r0
 8005632:	001a      	movs	r2, r3
 8005634:	4bd1      	ldr	r3, [pc, #836]	@ (800597c <CreateMessage+0x404>)
 8005636:	701a      	strb	r2, [r3, #0]
    retstat &= status;
 8005638:	4bd1      	ldr	r3, [pc, #836]	@ (8005980 <CreateMessage+0x408>)
 800563a:	781b      	ldrb	r3, [r3, #0]
 800563c:	001a      	movs	r2, r3
 800563e:	4bcf      	ldr	r3, [pc, #828]	@ (800597c <CreateMessage+0x404>)
 8005640:	781b      	ldrb	r3, [r3, #0]
 8005642:	4013      	ands	r3, r2
 8005644:	1e5a      	subs	r2, r3, #1
 8005646:	4193      	sbcs	r3, r2
 8005648:	b2da      	uxtb	r2, r3
 800564a:	4bcd      	ldr	r3, [pc, #820]	@ (8005980 <CreateMessage+0x408>)
 800564c:	701a      	strb	r2, [r3, #0]
  }
  ReadUint8ArrayEEprom(HumidConfigAddr, keybuffer, IdSize);
 800564e:	4bc5      	ldr	r3, [pc, #788]	@ (8005964 <CreateMessage+0x3ec>)
 8005650:	48cc      	ldr	r0, [pc, #816]	@ (8005984 <CreateMessage+0x40c>)
 8005652:	220c      	movs	r2, #12
 8005654:	0019      	movs	r1, r3
 8005656:	f006 fd4f 	bl	800c0f8 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, keybuffer);
 800565a:	4ac2      	ldr	r2, [pc, #776]	@ (8005964 <CreateMessage+0x3ec>)
 800565c:	4bc3      	ldr	r3, [pc, #780]	@ (800596c <CreateMessage+0x3f4>)
 800565e:	0011      	movs	r1, r2
 8005660:	0018      	movs	r0, r3
 8005662:	f7ff fec1 	bl	80053e8 <uint8ArrayToString>
#ifdef OPENSENSEMAP
  sprintf(&message[0], ",{\"sensor\": \"%s\", \"value\":%.2f}", Buffer, MeasVal.Humidity);
 8005666:	4bc2      	ldr	r3, [pc, #776]	@ (8005970 <CreateMessage+0x3f8>)
 8005668:	685b      	ldr	r3, [r3, #4]
 800566a:	1c18      	adds	r0, r3, #0
 800566c:	f7fe f912 	bl	8003894 <__aeabi_f2d>
 8005670:	0002      	movs	r2, r0
 8005672:	000b      	movs	r3, r1
 8005674:	4cbd      	ldr	r4, [pc, #756]	@ (800596c <CreateMessage+0x3f4>)
 8005676:	49c4      	ldr	r1, [pc, #784]	@ (8005988 <CreateMessage+0x410>)
 8005678:	48b8      	ldr	r0, [pc, #736]	@ (800595c <CreateMessage+0x3e4>)
 800567a:	9200      	str	r2, [sp, #0]
 800567c:	9301      	str	r3, [sp, #4]
 800567e:	0022      	movs	r2, r4
 8005680:	f020 fe06 	bl	8026290 <siprintf>
#else
  sprintf(&message[0], ",{\"name\":\"humid\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.1f, \"unit\":\"%%\"}", uid[2], (char*)nameConfig, Buffer, MeasVal.Humidity);
#endif
  index += strlen(message);
 8005684:	4bb5      	ldr	r3, [pc, #724]	@ (800595c <CreateMessage+0x3e4>)
 8005686:	0018      	movs	r0, r3
 8005688:	f7fa fd70 	bl	800016c <strlen>
 800568c:	0003      	movs	r3, r0
 800568e:	b299      	uxth	r1, r3
 8005690:	220e      	movs	r2, #14
 8005692:	18bb      	adds	r3, r7, r2
 8005694:	18ba      	adds	r2, r7, r2
 8005696:	8812      	ldrh	r2, [r2, #0]
 8005698:	188a      	adds	r2, r1, r2
 800569a:	801a      	strh	r2, [r3, #0]
  if (send) {
 800569c:	1cfb      	adds	r3, r7, #3
 800569e:	781b      	ldrb	r3, [r3, #0]
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d019      	beq.n	80056d8 <CreateMessage+0x160>
    status = ESP_Send((uint8_t*)message, strlen(message));
 80056a4:	4bad      	ldr	r3, [pc, #692]	@ (800595c <CreateMessage+0x3e4>)
 80056a6:	0018      	movs	r0, r3
 80056a8:	f7fa fd60 	bl	800016c <strlen>
 80056ac:	0003      	movs	r3, r0
 80056ae:	b29a      	uxth	r2, r3
 80056b0:	4baa      	ldr	r3, [pc, #680]	@ (800595c <CreateMessage+0x3e4>)
 80056b2:	0011      	movs	r1, r2
 80056b4:	0018      	movs	r0, r3
 80056b6:	f7ff fbd3 	bl	8004e60 <ESP_Send>
 80056ba:	0003      	movs	r3, r0
 80056bc:	001a      	movs	r2, r3
 80056be:	4baf      	ldr	r3, [pc, #700]	@ (800597c <CreateMessage+0x404>)
 80056c0:	701a      	strb	r2, [r3, #0]
    retstat &= status;
 80056c2:	4baf      	ldr	r3, [pc, #700]	@ (8005980 <CreateMessage+0x408>)
 80056c4:	781b      	ldrb	r3, [r3, #0]
 80056c6:	001a      	movs	r2, r3
 80056c8:	4bac      	ldr	r3, [pc, #688]	@ (800597c <CreateMessage+0x404>)
 80056ca:	781b      	ldrb	r3, [r3, #0]
 80056cc:	4013      	ands	r3, r2
 80056ce:	1e5a      	subs	r2, r3, #1
 80056d0:	4193      	sbcs	r3, r2
 80056d2:	b2da      	uxtb	r2, r3
 80056d4:	4baa      	ldr	r3, [pc, #680]	@ (8005980 <CreateMessage+0x408>)
 80056d6:	701a      	strb	r2, [r3, #0]
  }

  ReadUint8ArrayEEprom(VocIndexConfigAddr, keybuffer, IdSize);
 80056d8:	4ba2      	ldr	r3, [pc, #648]	@ (8005964 <CreateMessage+0x3ec>)
 80056da:	48ac      	ldr	r0, [pc, #688]	@ (800598c <CreateMessage+0x414>)
 80056dc:	220c      	movs	r2, #12
 80056de:	0019      	movs	r1, r3
 80056e0:	f006 fd0a 	bl	800c0f8 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, keybuffer);
 80056e4:	4a9f      	ldr	r2, [pc, #636]	@ (8005964 <CreateMessage+0x3ec>)
 80056e6:	4ba1      	ldr	r3, [pc, #644]	@ (800596c <CreateMessage+0x3f4>)
 80056e8:	0011      	movs	r1, r2
 80056ea:	0018      	movs	r0, r3
 80056ec:	f7ff fe7c 	bl	80053e8 <uint8ArrayToString>
#ifdef OPENSENSEMAP
  sprintf(&message[0], ",{\"sensor\": \"%s\", \"value\":%d}", Buffer, MeasVal.VOCIndex);
 80056f0:	4b9f      	ldr	r3, [pc, #636]	@ (8005970 <CreateMessage+0x3f8>)
 80056f2:	2248      	movs	r2, #72	@ 0x48
 80056f4:	5a9b      	ldrh	r3, [r3, r2]
 80056f6:	4a9d      	ldr	r2, [pc, #628]	@ (800596c <CreateMessage+0x3f4>)
 80056f8:	49a5      	ldr	r1, [pc, #660]	@ (8005990 <CreateMessage+0x418>)
 80056fa:	4898      	ldr	r0, [pc, #608]	@ (800595c <CreateMessage+0x3e4>)
 80056fc:	f020 fdc8 	bl	8026290 <siprintf>
#else
  sprintf(&message[0], ",{\"name\":\"voc\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%d, \"unit\":\"VOCi\"}", uid[2], (char*)nameConfig, Buffer, MeasVal.VOCIndex);
#endif
  index += strlen(message);
 8005700:	4b96      	ldr	r3, [pc, #600]	@ (800595c <CreateMessage+0x3e4>)
 8005702:	0018      	movs	r0, r3
 8005704:	f7fa fd32 	bl	800016c <strlen>
 8005708:	0003      	movs	r3, r0
 800570a:	b299      	uxth	r1, r3
 800570c:	220e      	movs	r2, #14
 800570e:	18bb      	adds	r3, r7, r2
 8005710:	18ba      	adds	r2, r7, r2
 8005712:	8812      	ldrh	r2, [r2, #0]
 8005714:	188a      	adds	r2, r1, r2
 8005716:	801a      	strh	r2, [r3, #0]
  if (send) {
 8005718:	1cfb      	adds	r3, r7, #3
 800571a:	781b      	ldrb	r3, [r3, #0]
 800571c:	2b00      	cmp	r3, #0
 800571e:	d019      	beq.n	8005754 <CreateMessage+0x1dc>
    status = ESP_Send((uint8_t*)message, strlen(message));
 8005720:	4b8e      	ldr	r3, [pc, #568]	@ (800595c <CreateMessage+0x3e4>)
 8005722:	0018      	movs	r0, r3
 8005724:	f7fa fd22 	bl	800016c <strlen>
 8005728:	0003      	movs	r3, r0
 800572a:	b29a      	uxth	r2, r3
 800572c:	4b8b      	ldr	r3, [pc, #556]	@ (800595c <CreateMessage+0x3e4>)
 800572e:	0011      	movs	r1, r2
 8005730:	0018      	movs	r0, r3
 8005732:	f7ff fb95 	bl	8004e60 <ESP_Send>
 8005736:	0003      	movs	r3, r0
 8005738:	001a      	movs	r2, r3
 800573a:	4b90      	ldr	r3, [pc, #576]	@ (800597c <CreateMessage+0x404>)
 800573c:	701a      	strb	r2, [r3, #0]
    retstat &= status;
 800573e:	4b90      	ldr	r3, [pc, #576]	@ (8005980 <CreateMessage+0x408>)
 8005740:	781b      	ldrb	r3, [r3, #0]
 8005742:	001a      	movs	r2, r3
 8005744:	4b8d      	ldr	r3, [pc, #564]	@ (800597c <CreateMessage+0x404>)
 8005746:	781b      	ldrb	r3, [r3, #0]
 8005748:	4013      	ands	r3, r2
 800574a:	1e5a      	subs	r2, r3, #1
 800574c:	4193      	sbcs	r3, r2
 800574e:	b2da      	uxtb	r2, r3
 8005750:	4b8b      	ldr	r3, [pc, #556]	@ (8005980 <CreateMessage+0x408>)
 8005752:	701a      	strb	r2, [r3, #0]
  }

  ReadUint8ArrayEEprom(ChargerStatConfigAddr, keybuffer, IdSize);
 8005754:	4b83      	ldr	r3, [pc, #524]	@ (8005964 <CreateMessage+0x3ec>)
 8005756:	488f      	ldr	r0, [pc, #572]	@ (8005994 <CreateMessage+0x41c>)
 8005758:	220c      	movs	r2, #12
 800575a:	0019      	movs	r1, r3
 800575c:	f006 fccc 	bl	800c0f8 <ReadUint8ArrayEEprom>
  if (isKeyValid(keybuffer, "ChargeStat", "true/false")) {
 8005760:	4a8d      	ldr	r2, [pc, #564]	@ (8005998 <CreateMessage+0x420>)
 8005762:	498e      	ldr	r1, [pc, #568]	@ (800599c <CreateMessage+0x424>)
 8005764:	4b7f      	ldr	r3, [pc, #508]	@ (8005964 <CreateMessage+0x3ec>)
 8005766:	0018      	movs	r0, r3
 8005768:	f7ff fdde 	bl	8005328 <isKeyValid>
 800576c:	1e03      	subs	r3, r0, #0
 800576e:	d036      	beq.n	80057de <CreateMessage+0x266>
    uint8ArrayToString(Buffer, keybuffer);
 8005770:	4a7c      	ldr	r2, [pc, #496]	@ (8005964 <CreateMessage+0x3ec>)
 8005772:	4b7e      	ldr	r3, [pc, #504]	@ (800596c <CreateMessage+0x3f4>)
 8005774:	0011      	movs	r1, r2
 8005776:	0018      	movs	r0, r3
 8005778:	f7ff fe36 	bl	80053e8 <uint8ArrayToString>
#ifdef OPENSENSEMAP
    sprintf(&message[0], ",{\"sensor\": \"%s\", \"value\":\"%d\"}", Buffer, batteryChargeMode);
 800577c:	4b88      	ldr	r3, [pc, #544]	@ (80059a0 <CreateMessage+0x428>)
 800577e:	781b      	ldrb	r3, [r3, #0]
 8005780:	4a7a      	ldr	r2, [pc, #488]	@ (800596c <CreateMessage+0x3f4>)
 8005782:	4988      	ldr	r1, [pc, #544]	@ (80059a4 <CreateMessage+0x42c>)
 8005784:	4875      	ldr	r0, [pc, #468]	@ (800595c <CreateMessage+0x3e4>)
 8005786:	f020 fd83 	bl	8026290 <siprintf>
#else
    sprintf(&message[0], ",{\"name\":\"charging\", \"sensor\": \"%s\", \"value\":\"%d\"}", Buffer, batteryChargeMode);
#endif
    index += strlen(message);
 800578a:	4b74      	ldr	r3, [pc, #464]	@ (800595c <CreateMessage+0x3e4>)
 800578c:	0018      	movs	r0, r3
 800578e:	f7fa fced 	bl	800016c <strlen>
 8005792:	0003      	movs	r3, r0
 8005794:	b299      	uxth	r1, r3
 8005796:	220e      	movs	r2, #14
 8005798:	18bb      	adds	r3, r7, r2
 800579a:	18ba      	adds	r2, r7, r2
 800579c:	8812      	ldrh	r2, [r2, #0]
 800579e:	188a      	adds	r2, r1, r2
 80057a0:	801a      	strh	r2, [r3, #0]
    if (send) {
 80057a2:	1cfb      	adds	r3, r7, #3
 80057a4:	781b      	ldrb	r3, [r3, #0]
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d019      	beq.n	80057de <CreateMessage+0x266>
      status = ESP_Send((uint8_t*)message, strlen(message));
 80057aa:	4b6c      	ldr	r3, [pc, #432]	@ (800595c <CreateMessage+0x3e4>)
 80057ac:	0018      	movs	r0, r3
 80057ae:	f7fa fcdd 	bl	800016c <strlen>
 80057b2:	0003      	movs	r3, r0
 80057b4:	b29a      	uxth	r2, r3
 80057b6:	4b69      	ldr	r3, [pc, #420]	@ (800595c <CreateMessage+0x3e4>)
 80057b8:	0011      	movs	r1, r2
 80057ba:	0018      	movs	r0, r3
 80057bc:	f7ff fb50 	bl	8004e60 <ESP_Send>
 80057c0:	0003      	movs	r3, r0
 80057c2:	001a      	movs	r2, r3
 80057c4:	4b6d      	ldr	r3, [pc, #436]	@ (800597c <CreateMessage+0x404>)
 80057c6:	701a      	strb	r2, [r3, #0]
      retstat &= status;
 80057c8:	4b6d      	ldr	r3, [pc, #436]	@ (8005980 <CreateMessage+0x408>)
 80057ca:	781b      	ldrb	r3, [r3, #0]
 80057cc:	001a      	movs	r2, r3
 80057ce:	4b6b      	ldr	r3, [pc, #428]	@ (800597c <CreateMessage+0x404>)
 80057d0:	781b      	ldrb	r3, [r3, #0]
 80057d2:	4013      	ands	r3, r2
 80057d4:	1e5a      	subs	r2, r3, #1
 80057d6:	4193      	sbcs	r3, r2
 80057d8:	b2da      	uxtb	r2, r3
 80057da:	4b69      	ldr	r3, [pc, #420]	@ (8005980 <CreateMessage+0x408>)
 80057dc:	701a      	strb	r2, [r3, #0]
    }
  }

  ReadUint8ArrayEEprom(UptimeConfigAddr, keybuffer, IdSize);
 80057de:	4b61      	ldr	r3, [pc, #388]	@ (8005964 <CreateMessage+0x3ec>)
 80057e0:	4871      	ldr	r0, [pc, #452]	@ (80059a8 <CreateMessage+0x430>)
 80057e2:	220c      	movs	r2, #12
 80057e4:	0019      	movs	r1, r3
 80057e6:	f006 fc87 	bl	800c0f8 <ReadUint8ArrayEEprom>
  if (isKeyValid(keybuffer, "Uptime", "dhhmm")) {
 80057ea:	4a70      	ldr	r2, [pc, #448]	@ (80059ac <CreateMessage+0x434>)
 80057ec:	4970      	ldr	r1, [pc, #448]	@ (80059b0 <CreateMessage+0x438>)
 80057ee:	4b5d      	ldr	r3, [pc, #372]	@ (8005964 <CreateMessage+0x3ec>)
 80057f0:	0018      	movs	r0, r3
 80057f2:	f7ff fd99 	bl	8005328 <isKeyValid>
 80057f6:	1e03      	subs	r3, r0, #0
 80057f8:	d039      	beq.n	800586e <CreateMessage+0x2f6>
    uint8ArrayToString(Buffer, keybuffer);
 80057fa:	4a5a      	ldr	r2, [pc, #360]	@ (8005964 <CreateMessage+0x3ec>)
 80057fc:	4b5b      	ldr	r3, [pc, #364]	@ (800596c <CreateMessage+0x3f4>)
 80057fe:	0011      	movs	r1, r2
 8005800:	0018      	movs	r0, r3
 8005802:	f7ff fdf1 	bl	80053e8 <uint8ArrayToString>
    getUptime(uptimeBuf);
 8005806:	4b6b      	ldr	r3, [pc, #428]	@ (80059b4 <CreateMessage+0x43c>)
 8005808:	0018      	movs	r0, r3
 800580a:	f004 faa1 	bl	8009d50 <getUptime>
#ifdef OPENSENSEMAP
    sprintf(&message[0], ",{\"sensor\": \"%s\", \"value\":\"%s\"}", Buffer, uptimeBuf);
 800580e:	4b69      	ldr	r3, [pc, #420]	@ (80059b4 <CreateMessage+0x43c>)
 8005810:	4a56      	ldr	r2, [pc, #344]	@ (800596c <CreateMessage+0x3f4>)
 8005812:	4969      	ldr	r1, [pc, #420]	@ (80059b8 <CreateMessage+0x440>)
 8005814:	4851      	ldr	r0, [pc, #324]	@ (800595c <CreateMessage+0x3e4>)
 8005816:	f020 fd3b 	bl	8026290 <siprintf>
#else
    sprintf(&message[0], ",{\"name\":\"uptime\", \"sensor\": \"%s\", \"value\":\"%s\"}", Buffer, uptimeBuf);
#endif
    index += strlen(message);
 800581a:	4b50      	ldr	r3, [pc, #320]	@ (800595c <CreateMessage+0x3e4>)
 800581c:	0018      	movs	r0, r3
 800581e:	f7fa fca5 	bl	800016c <strlen>
 8005822:	0003      	movs	r3, r0
 8005824:	b299      	uxth	r1, r3
 8005826:	220e      	movs	r2, #14
 8005828:	18bb      	adds	r3, r7, r2
 800582a:	18ba      	adds	r2, r7, r2
 800582c:	8812      	ldrh	r2, [r2, #0]
 800582e:	188a      	adds	r2, r1, r2
 8005830:	801a      	strh	r2, [r3, #0]
    if (send) {
 8005832:	1cfb      	adds	r3, r7, #3
 8005834:	781b      	ldrb	r3, [r3, #0]
 8005836:	2b00      	cmp	r3, #0
 8005838:	d019      	beq.n	800586e <CreateMessage+0x2f6>
      status = ESP_Send((uint8_t*)message, strlen(message));
 800583a:	4b48      	ldr	r3, [pc, #288]	@ (800595c <CreateMessage+0x3e4>)
 800583c:	0018      	movs	r0, r3
 800583e:	f7fa fc95 	bl	800016c <strlen>
 8005842:	0003      	movs	r3, r0
 8005844:	b29a      	uxth	r2, r3
 8005846:	4b45      	ldr	r3, [pc, #276]	@ (800595c <CreateMessage+0x3e4>)
 8005848:	0011      	movs	r1, r2
 800584a:	0018      	movs	r0, r3
 800584c:	f7ff fb08 	bl	8004e60 <ESP_Send>
 8005850:	0003      	movs	r3, r0
 8005852:	001a      	movs	r2, r3
 8005854:	4b49      	ldr	r3, [pc, #292]	@ (800597c <CreateMessage+0x404>)
 8005856:	701a      	strb	r2, [r3, #0]
      retstat &= status;
 8005858:	4b49      	ldr	r3, [pc, #292]	@ (8005980 <CreateMessage+0x408>)
 800585a:	781b      	ldrb	r3, [r3, #0]
 800585c:	001a      	movs	r2, r3
 800585e:	4b47      	ldr	r3, [pc, #284]	@ (800597c <CreateMessage+0x404>)
 8005860:	781b      	ldrb	r3, [r3, #0]
 8005862:	4013      	ands	r3, r2
 8005864:	1e5a      	subs	r2, r3, #1
 8005866:	4193      	sbcs	r3, r2
 8005868:	b2da      	uxtb	r2, r3
 800586a:	4b45      	ldr	r3, [pc, #276]	@ (8005980 <CreateMessage+0x408>)
 800586c:	701a      	strb	r2, [r3, #0]
    }
  }

  if (IsBMP280SensorPresent()) {
 800586e:	f007 fe0b 	bl	800d488 <IsBMP280SensorPresent>
 8005872:	1e03      	subs	r3, r0, #0
 8005874:	d100      	bne.n	8005878 <CreateMessage+0x300>
 8005876:	e0e1      	b.n	8005a3c <CreateMessage+0x4c4>
    ReadUint8ArrayEEprom(hPaConfigAddr, keybuffer, IdSize);
 8005878:	4b3a      	ldr	r3, [pc, #232]	@ (8005964 <CreateMessage+0x3ec>)
 800587a:	4850      	ldr	r0, [pc, #320]	@ (80059bc <CreateMessage+0x444>)
 800587c:	220c      	movs	r2, #12
 800587e:	0019      	movs	r1, r3
 8005880:	f006 fc3a 	bl	800c0f8 <ReadUint8ArrayEEprom>
    if (isKeyValid(keybuffer, "BMP280", "hPa") && MeasVal.BMP280_airpressure) {
 8005884:	4a4e      	ldr	r2, [pc, #312]	@ (80059c0 <CreateMessage+0x448>)
 8005886:	494f      	ldr	r1, [pc, #316]	@ (80059c4 <CreateMessage+0x44c>)
 8005888:	4b36      	ldr	r3, [pc, #216]	@ (8005964 <CreateMessage+0x3ec>)
 800588a:	0018      	movs	r0, r3
 800588c:	f7ff fd4c 	bl	8005328 <isKeyValid>
 8005890:	1e03      	subs	r3, r0, #0
 8005892:	d046      	beq.n	8005922 <CreateMessage+0x3aa>
 8005894:	4b36      	ldr	r3, [pc, #216]	@ (8005970 <CreateMessage+0x3f8>)
 8005896:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005898:	2100      	movs	r1, #0
 800589a:	1c18      	adds	r0, r3, #0
 800589c:	f7fa fe42 	bl	8000524 <__aeabi_fcmpeq>
 80058a0:	1e03      	subs	r3, r0, #0
 80058a2:	d13e      	bne.n	8005922 <CreateMessage+0x3aa>
      uint8ArrayToString(Buffer, keybuffer);
 80058a4:	4a2f      	ldr	r2, [pc, #188]	@ (8005964 <CreateMessage+0x3ec>)
 80058a6:	4b31      	ldr	r3, [pc, #196]	@ (800596c <CreateMessage+0x3f4>)
 80058a8:	0011      	movs	r1, r2
 80058aa:	0018      	movs	r0, r3
 80058ac:	f7ff fd9c 	bl	80053e8 <uint8ArrayToString>
#ifdef OPENSENSEMAP
      sprintf(&message[0], ",{\"sensor\": \"%s\", \"value\":%.2f}", Buffer, MeasVal.BMP280_airpressure);
 80058b0:	4b2f      	ldr	r3, [pc, #188]	@ (8005970 <CreateMessage+0x3f8>)
 80058b2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80058b4:	1c18      	adds	r0, r3, #0
 80058b6:	f7fd ffed 	bl	8003894 <__aeabi_f2d>
 80058ba:	0002      	movs	r2, r0
 80058bc:	000b      	movs	r3, r1
 80058be:	4c2b      	ldr	r4, [pc, #172]	@ (800596c <CreateMessage+0x3f4>)
 80058c0:	4931      	ldr	r1, [pc, #196]	@ (8005988 <CreateMessage+0x410>)
 80058c2:	4826      	ldr	r0, [pc, #152]	@ (800595c <CreateMessage+0x3e4>)
 80058c4:	9200      	str	r2, [sp, #0]
 80058c6:	9301      	str	r3, [sp, #4]
 80058c8:	0022      	movs	r2, r4
 80058ca:	f020 fce1 	bl	8026290 <siprintf>
#else
      sprintf(&message[0], ",{\"name\":\"BMP280 hPa\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.1f, \"unit\":\"hPa\"}", uid[2], (char*)nameConfig, Buffer, MeasVal.BMP280_airpressure);
#endif
      index += strlen(message);
 80058ce:	4b23      	ldr	r3, [pc, #140]	@ (800595c <CreateMessage+0x3e4>)
 80058d0:	0018      	movs	r0, r3
 80058d2:	f7fa fc4b 	bl	800016c <strlen>
 80058d6:	0003      	movs	r3, r0
 80058d8:	b299      	uxth	r1, r3
 80058da:	220e      	movs	r2, #14
 80058dc:	18bb      	adds	r3, r7, r2
 80058de:	18ba      	adds	r2, r7, r2
 80058e0:	8812      	ldrh	r2, [r2, #0]
 80058e2:	188a      	adds	r2, r1, r2
 80058e4:	801a      	strh	r2, [r3, #0]
      if (send) {
 80058e6:	1cfb      	adds	r3, r7, #3
 80058e8:	781b      	ldrb	r3, [r3, #0]
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d019      	beq.n	8005922 <CreateMessage+0x3aa>
        status = ESP_Send((uint8_t*)message, strlen(message));
 80058ee:	4b1b      	ldr	r3, [pc, #108]	@ (800595c <CreateMessage+0x3e4>)
 80058f0:	0018      	movs	r0, r3
 80058f2:	f7fa fc3b 	bl	800016c <strlen>
 80058f6:	0003      	movs	r3, r0
 80058f8:	b29a      	uxth	r2, r3
 80058fa:	4b18      	ldr	r3, [pc, #96]	@ (800595c <CreateMessage+0x3e4>)
 80058fc:	0011      	movs	r1, r2
 80058fe:	0018      	movs	r0, r3
 8005900:	f7ff faae 	bl	8004e60 <ESP_Send>
 8005904:	0003      	movs	r3, r0
 8005906:	001a      	movs	r2, r3
 8005908:	4b1c      	ldr	r3, [pc, #112]	@ (800597c <CreateMessage+0x404>)
 800590a:	701a      	strb	r2, [r3, #0]
        retstat &= status;
 800590c:	4b1c      	ldr	r3, [pc, #112]	@ (8005980 <CreateMessage+0x408>)
 800590e:	781b      	ldrb	r3, [r3, #0]
 8005910:	001a      	movs	r2, r3
 8005912:	4b1a      	ldr	r3, [pc, #104]	@ (800597c <CreateMessage+0x404>)
 8005914:	781b      	ldrb	r3, [r3, #0]
 8005916:	4013      	ands	r3, r2
 8005918:	1e5a      	subs	r2, r3, #1
 800591a:	4193      	sbcs	r3, r2
 800591c:	b2da      	uxtb	r2, r3
 800591e:	4b18      	ldr	r3, [pc, #96]	@ (8005980 <CreateMessage+0x408>)
 8005920:	701a      	strb	r2, [r3, #0]
      }
    }

    ReadUint8ArrayEEprom(BMPTempConfigAddr, keybuffer, IdSize);
 8005922:	4b10      	ldr	r3, [pc, #64]	@ (8005964 <CreateMessage+0x3ec>)
 8005924:	4828      	ldr	r0, [pc, #160]	@ (80059c8 <CreateMessage+0x450>)
 8005926:	220c      	movs	r2, #12
 8005928:	0019      	movs	r1, r3
 800592a:	f006 fbe5 	bl	800c0f8 <ReadUint8ArrayEEprom>
    if (isKeyValid(keybuffer, "BMP280", "Temperature")) {
 800592e:	4a27      	ldr	r2, [pc, #156]	@ (80059cc <CreateMessage+0x454>)
 8005930:	4924      	ldr	r1, [pc, #144]	@ (80059c4 <CreateMessage+0x44c>)
 8005932:	4b0c      	ldr	r3, [pc, #48]	@ (8005964 <CreateMessage+0x3ec>)
 8005934:	0018      	movs	r0, r3
 8005936:	f7ff fcf7 	bl	8005328 <isKeyValid>
 800593a:	1e03      	subs	r3, r0, #0
 800593c:	d100      	bne.n	8005940 <CreateMessage+0x3c8>
 800593e:	e07d      	b.n	8005a3c <CreateMessage+0x4c4>
      uint8ArrayToString(Buffer, keybuffer);
 8005940:	4a08      	ldr	r2, [pc, #32]	@ (8005964 <CreateMessage+0x3ec>)
 8005942:	4b0a      	ldr	r3, [pc, #40]	@ (800596c <CreateMessage+0x3f4>)
 8005944:	0011      	movs	r1, r2
 8005946:	0018      	movs	r0, r3
 8005948:	f7ff fd4e 	bl	80053e8 <uint8ArrayToString>
  #ifdef OPENSENSEMAP
      sprintf(&message[0], ",{\"sensor\": \"%s\", \"value\":%.2f}", Buffer, MeasVal.BMP280_temperature);
 800594c:	4b08      	ldr	r3, [pc, #32]	@ (8005970 <CreateMessage+0x3f8>)
 800594e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005950:	1c18      	adds	r0, r3, #0
 8005952:	e03d      	b.n	80059d0 <CreateMessage+0x458>
 8005954:	20000814 	.word	0x20000814
 8005958:	0802dd60 	.word	0x0802dd60
 800595c:	200005c4 	.word	0x200005c4
 8005960:	0802ac90 	.word	0x0802ac90
 8005964:	20000834 	.word	0x20000834
 8005968:	0808000c 	.word	0x0808000c
 800596c:	20000840 	.word	0x20000840
 8005970:	20000704 	.word	0x20000704
 8005974:	0802ac94 	.word	0x0802ac94
 8005978:	200005c5 	.word	0x200005c5
 800597c:	20000859 	.word	0x20000859
 8005980:	20000032 	.word	0x20000032
 8005984:	08080018 	.word	0x08080018
 8005988:	0802acb4 	.word	0x0802acb4
 800598c:	08080030 	.word	0x08080030
 8005990:	0802acd4 	.word	0x0802acd4
 8005994:	08080084 	.word	0x08080084
 8005998:	0802acf4 	.word	0x0802acf4
 800599c:	0802ad00 	.word	0x0802ad00
 80059a0:	20002160 	.word	0x20002160
 80059a4:	0802ad0c 	.word	0x0802ad0c
 80059a8:	080801a0 	.word	0x080801a0
 80059ac:	0802ad2c 	.word	0x0802ad2c
 80059b0:	0802ad34 	.word	0x0802ad34
 80059b4:	2000085c 	.word	0x2000085c
 80059b8:	0802ad3c 	.word	0x0802ad3c
 80059bc:	08080188 	.word	0x08080188
 80059c0:	0802ad5c 	.word	0x0802ad5c
 80059c4:	0802ad60 	.word	0x0802ad60
 80059c8:	080800e0 	.word	0x080800e0
 80059cc:	0802ad68 	.word	0x0802ad68
 80059d0:	f7fd ff60 	bl	8003894 <__aeabi_f2d>
 80059d4:	0002      	movs	r2, r0
 80059d6:	000b      	movs	r3, r1
 80059d8:	4ce6      	ldr	r4, [pc, #920]	@ (8005d74 <CreateMessage+0x7fc>)
 80059da:	49e7      	ldr	r1, [pc, #924]	@ (8005d78 <CreateMessage+0x800>)
 80059dc:	48e7      	ldr	r0, [pc, #924]	@ (8005d7c <CreateMessage+0x804>)
 80059de:	9200      	str	r2, [sp, #0]
 80059e0:	9301      	str	r3, [sp, #4]
 80059e2:	0022      	movs	r2, r4
 80059e4:	f020 fc54 	bl	8026290 <siprintf>
  #else
      sprintf(&message[0], ",{\"name\":\"BMP280 Temp\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.1f, \"unit\":\"C\"}", uid[2], (char*)nameConfig, Buffer, MeasVal.BMP280_temperature);
  #endif
      index += strlen(message);
 80059e8:	4be4      	ldr	r3, [pc, #912]	@ (8005d7c <CreateMessage+0x804>)
 80059ea:	0018      	movs	r0, r3
 80059ec:	f7fa fbbe 	bl	800016c <strlen>
 80059f0:	0003      	movs	r3, r0
 80059f2:	b299      	uxth	r1, r3
 80059f4:	220e      	movs	r2, #14
 80059f6:	18bb      	adds	r3, r7, r2
 80059f8:	18ba      	adds	r2, r7, r2
 80059fa:	8812      	ldrh	r2, [r2, #0]
 80059fc:	188a      	adds	r2, r1, r2
 80059fe:	801a      	strh	r2, [r3, #0]
      if (send) {
 8005a00:	1cfb      	adds	r3, r7, #3
 8005a02:	781b      	ldrb	r3, [r3, #0]
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d019      	beq.n	8005a3c <CreateMessage+0x4c4>
        status = ESP_Send((uint8_t*)message, strlen(message));
 8005a08:	4bdc      	ldr	r3, [pc, #880]	@ (8005d7c <CreateMessage+0x804>)
 8005a0a:	0018      	movs	r0, r3
 8005a0c:	f7fa fbae 	bl	800016c <strlen>
 8005a10:	0003      	movs	r3, r0
 8005a12:	b29a      	uxth	r2, r3
 8005a14:	4bd9      	ldr	r3, [pc, #868]	@ (8005d7c <CreateMessage+0x804>)
 8005a16:	0011      	movs	r1, r2
 8005a18:	0018      	movs	r0, r3
 8005a1a:	f7ff fa21 	bl	8004e60 <ESP_Send>
 8005a1e:	0003      	movs	r3, r0
 8005a20:	001a      	movs	r2, r3
 8005a22:	4bd7      	ldr	r3, [pc, #860]	@ (8005d80 <CreateMessage+0x808>)
 8005a24:	701a      	strb	r2, [r3, #0]
        retstat &= status;
 8005a26:	4bd7      	ldr	r3, [pc, #860]	@ (8005d84 <CreateMessage+0x80c>)
 8005a28:	781b      	ldrb	r3, [r3, #0]
 8005a2a:	001a      	movs	r2, r3
 8005a2c:	4bd4      	ldr	r3, [pc, #848]	@ (8005d80 <CreateMessage+0x808>)
 8005a2e:	781b      	ldrb	r3, [r3, #0]
 8005a30:	4013      	ands	r3, r2
 8005a32:	1e5a      	subs	r2, r3, #1
 8005a34:	4193      	sbcs	r3, r2
 8005a36:	b2da      	uxtb	r2, r3
 8005a38:	4bd2      	ldr	r3, [pc, #840]	@ (8005d84 <CreateMessage+0x80c>)
 8005a3a:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  ReadUint8ArrayEEprom(dBAConfigAddr, keybuffer, IdSize);
 8005a3c:	4bd2      	ldr	r3, [pc, #840]	@ (8005d88 <CreateMessage+0x810>)
 8005a3e:	48d3      	ldr	r0, [pc, #844]	@ (8005d8c <CreateMessage+0x814>)
 8005a40:	220c      	movs	r2, #12
 8005a42:	0019      	movs	r1, r3
 8005a44:	f006 fb58 	bl	800c0f8 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, keybuffer);
 8005a48:	4acf      	ldr	r2, [pc, #828]	@ (8005d88 <CreateMessage+0x810>)
 8005a4a:	4bca      	ldr	r3, [pc, #808]	@ (8005d74 <CreateMessage+0x7fc>)
 8005a4c:	0011      	movs	r1, r2
 8005a4e:	0018      	movs	r0, r3
 8005a50:	f7ff fcca 	bl	80053e8 <uint8ArrayToString>
#ifdef OPENSENSEMAP
  sprintf(&message[0], ",{\"sensor\": \"%s\", \"value\":%.2f}", Buffer, MeasVal.dBApeak);
 8005a54:	4bce      	ldr	r3, [pc, #824]	@ (8005d90 <CreateMessage+0x818>)
 8005a56:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005a58:	1c18      	adds	r0, r3, #0
 8005a5a:	f7fd ff1b 	bl	8003894 <__aeabi_f2d>
 8005a5e:	0002      	movs	r2, r0
 8005a60:	000b      	movs	r3, r1
 8005a62:	4cc4      	ldr	r4, [pc, #784]	@ (8005d74 <CreateMessage+0x7fc>)
 8005a64:	49c4      	ldr	r1, [pc, #784]	@ (8005d78 <CreateMessage+0x800>)
 8005a66:	48c5      	ldr	r0, [pc, #788]	@ (8005d7c <CreateMessage+0x804>)
 8005a68:	9200      	str	r2, [sp, #0]
 8005a6a:	9301      	str	r3, [sp, #4]
 8005a6c:	0022      	movs	r2, r4
 8005a6e:	f020 fc0f 	bl	8026290 <siprintf>
#else
  sprintf(&message[0], ",{\"name\":\"Sound\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.2f, \"unit\":\"dB(A)\"}", uid[2], (char*)nameConfig, Buffer, MeasVal.dBApeak);
#endif
  index += strlen(message);
 8005a72:	4bc2      	ldr	r3, [pc, #776]	@ (8005d7c <CreateMessage+0x804>)
 8005a74:	0018      	movs	r0, r3
 8005a76:	f7fa fb79 	bl	800016c <strlen>
 8005a7a:	0003      	movs	r3, r0
 8005a7c:	b299      	uxth	r1, r3
 8005a7e:	220e      	movs	r2, #14
 8005a80:	18bb      	adds	r3, r7, r2
 8005a82:	18ba      	adds	r2, r7, r2
 8005a84:	8812      	ldrh	r2, [r2, #0]
 8005a86:	188a      	adds	r2, r1, r2
 8005a88:	801a      	strh	r2, [r3, #0]
  if (send) {
 8005a8a:	1cfb      	adds	r3, r7, #3
 8005a8c:	781b      	ldrb	r3, [r3, #0]
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d019      	beq.n	8005ac6 <CreateMessage+0x54e>
    status = ESP_Send((uint8_t*)message, strlen(message));
 8005a92:	4bba      	ldr	r3, [pc, #744]	@ (8005d7c <CreateMessage+0x804>)
 8005a94:	0018      	movs	r0, r3
 8005a96:	f7fa fb69 	bl	800016c <strlen>
 8005a9a:	0003      	movs	r3, r0
 8005a9c:	b29a      	uxth	r2, r3
 8005a9e:	4bb7      	ldr	r3, [pc, #732]	@ (8005d7c <CreateMessage+0x804>)
 8005aa0:	0011      	movs	r1, r2
 8005aa2:	0018      	movs	r0, r3
 8005aa4:	f7ff f9dc 	bl	8004e60 <ESP_Send>
 8005aa8:	0003      	movs	r3, r0
 8005aaa:	001a      	movs	r2, r3
 8005aac:	4bb4      	ldr	r3, [pc, #720]	@ (8005d80 <CreateMessage+0x808>)
 8005aae:	701a      	strb	r2, [r3, #0]
    retstat &= status;
 8005ab0:	4bb4      	ldr	r3, [pc, #720]	@ (8005d84 <CreateMessage+0x80c>)
 8005ab2:	781b      	ldrb	r3, [r3, #0]
 8005ab4:	001a      	movs	r2, r3
 8005ab6:	4bb2      	ldr	r3, [pc, #712]	@ (8005d80 <CreateMessage+0x808>)
 8005ab8:	781b      	ldrb	r3, [r3, #0]
 8005aba:	4013      	ands	r3, r2
 8005abc:	1e5a      	subs	r2, r3, #1
 8005abe:	4193      	sbcs	r3, r2
 8005ac0:	b2da      	uxtb	r2, r3
 8005ac2:	4bb0      	ldr	r3, [pc, #704]	@ (8005d84 <CreateMessage+0x80c>)
 8005ac4:	701a      	strb	r2, [r3, #0]
  }

    ReadUint8ArrayEEprom(SolVoltConfigAddr, keybuffer, IdSize);
 8005ac6:	4bb0      	ldr	r3, [pc, #704]	@ (8005d88 <CreateMessage+0x810>)
 8005ac8:	48b2      	ldr	r0, [pc, #712]	@ (8005d94 <CreateMessage+0x81c>)
 8005aca:	220c      	movs	r2, #12
 8005acc:	0019      	movs	r1, r3
 8005ace:	f006 fb13 	bl	800c0f8 <ReadUint8ArrayEEprom>
    uint8ArrayToString(Buffer, keybuffer);
 8005ad2:	4aad      	ldr	r2, [pc, #692]	@ (8005d88 <CreateMessage+0x810>)
 8005ad4:	4ba7      	ldr	r3, [pc, #668]	@ (8005d74 <CreateMessage+0x7fc>)
 8005ad6:	0011      	movs	r1, r2
 8005ad8:	0018      	movs	r0, r3
 8005ada:	f7ff fc85 	bl	80053e8 <uint8ArrayToString>
#ifdef OPENSENSEMAP
    sprintf(&message[0], ",{\"sensor\": \"%s\", \"value\":%.2f}", Buffer, solarCharge);
 8005ade:	4bae      	ldr	r3, [pc, #696]	@ (8005d98 <CreateMessage+0x820>)
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	1c18      	adds	r0, r3, #0
 8005ae4:	f7fd fed6 	bl	8003894 <__aeabi_f2d>
 8005ae8:	0002      	movs	r2, r0
 8005aea:	000b      	movs	r3, r1
 8005aec:	4ca1      	ldr	r4, [pc, #644]	@ (8005d74 <CreateMessage+0x7fc>)
 8005aee:	49a2      	ldr	r1, [pc, #648]	@ (8005d78 <CreateMessage+0x800>)
 8005af0:	48a2      	ldr	r0, [pc, #648]	@ (8005d7c <CreateMessage+0x804>)
 8005af2:	9200      	str	r2, [sp, #0]
 8005af4:	9301      	str	r3, [sp, #4]
 8005af6:	0022      	movs	r2, r4
 8005af8:	f020 fbca 	bl	8026290 <siprintf>
#else
    sprintf(&message[0], ",{\"name\":\"Solar voltage\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.2f, \"unit\":\"V\"}", uid[2], (char*)nameConfig, Buffer, solarCharge);
#endif
    index += strlen(message);
 8005afc:	4b9f      	ldr	r3, [pc, #636]	@ (8005d7c <CreateMessage+0x804>)
 8005afe:	0018      	movs	r0, r3
 8005b00:	f7fa fb34 	bl	800016c <strlen>
 8005b04:	0003      	movs	r3, r0
 8005b06:	b299      	uxth	r1, r3
 8005b08:	220e      	movs	r2, #14
 8005b0a:	18bb      	adds	r3, r7, r2
 8005b0c:	18ba      	adds	r2, r7, r2
 8005b0e:	8812      	ldrh	r2, [r2, #0]
 8005b10:	188a      	adds	r2, r1, r2
 8005b12:	801a      	strh	r2, [r3, #0]
    if (send) {
 8005b14:	1cfb      	adds	r3, r7, #3
 8005b16:	781b      	ldrb	r3, [r3, #0]
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d019      	beq.n	8005b50 <CreateMessage+0x5d8>
      status = ESP_Send((uint8_t*)message, strlen(message));
 8005b1c:	4b97      	ldr	r3, [pc, #604]	@ (8005d7c <CreateMessage+0x804>)
 8005b1e:	0018      	movs	r0, r3
 8005b20:	f7fa fb24 	bl	800016c <strlen>
 8005b24:	0003      	movs	r3, r0
 8005b26:	b29a      	uxth	r2, r3
 8005b28:	4b94      	ldr	r3, [pc, #592]	@ (8005d7c <CreateMessage+0x804>)
 8005b2a:	0011      	movs	r1, r2
 8005b2c:	0018      	movs	r0, r3
 8005b2e:	f7ff f997 	bl	8004e60 <ESP_Send>
 8005b32:	0003      	movs	r3, r0
 8005b34:	001a      	movs	r2, r3
 8005b36:	4b92      	ldr	r3, [pc, #584]	@ (8005d80 <CreateMessage+0x808>)
 8005b38:	701a      	strb	r2, [r3, #0]
      retstat &= status;
 8005b3a:	4b92      	ldr	r3, [pc, #584]	@ (8005d84 <CreateMessage+0x80c>)
 8005b3c:	781b      	ldrb	r3, [r3, #0]
 8005b3e:	001a      	movs	r2, r3
 8005b40:	4b8f      	ldr	r3, [pc, #572]	@ (8005d80 <CreateMessage+0x808>)
 8005b42:	781b      	ldrb	r3, [r3, #0]
 8005b44:	4013      	ands	r3, r2
 8005b46:	1e5a      	subs	r2, r3, #1
 8005b48:	4193      	sbcs	r3, r2
 8005b4a:	b2da      	uxtb	r2, r3
 8005b4c:	4b8d      	ldr	r3, [pc, #564]	@ (8005d84 <CreateMessage+0x80c>)
 8005b4e:	701a      	strb	r2, [r3, #0]
    }

    if ((product_name[4] == '5') && Check_USB_PowerOn()) {  // the NOx has only sense in case of continuous operation
 8005b50:	4b92      	ldr	r3, [pc, #584]	@ (8005d9c <CreateMessage+0x824>)
 8005b52:	791b      	ldrb	r3, [r3, #4]
 8005b54:	2b35      	cmp	r3, #53	@ 0x35
 8005b56:	d141      	bne.n	8005bdc <CreateMessage+0x664>
 8005b58:	f004 f85e 	bl	8009c18 <Check_USB_PowerOn>
 8005b5c:	1e03      	subs	r3, r0, #0
 8005b5e:	d03d      	beq.n	8005bdc <CreateMessage+0x664>
      ReadUint8ArrayEEprom(NOxIndexConfigAddr, keybuffer, IdSize);
 8005b60:	4b89      	ldr	r3, [pc, #548]	@ (8005d88 <CreateMessage+0x810>)
 8005b62:	488f      	ldr	r0, [pc, #572]	@ (8005da0 <CreateMessage+0x828>)
 8005b64:	220c      	movs	r2, #12
 8005b66:	0019      	movs	r1, r3
 8005b68:	f006 fac6 	bl	800c0f8 <ReadUint8ArrayEEprom>
      uint8ArrayToString(Buffer, keybuffer);
 8005b6c:	4a86      	ldr	r2, [pc, #536]	@ (8005d88 <CreateMessage+0x810>)
 8005b6e:	4b81      	ldr	r3, [pc, #516]	@ (8005d74 <CreateMessage+0x7fc>)
 8005b70:	0011      	movs	r1, r2
 8005b72:	0018      	movs	r0, r3
 8005b74:	f7ff fc38 	bl	80053e8 <uint8ArrayToString>
#ifdef OPENSENSEMAP
      sprintf(&message[0], ",{\"sensor\": \"%s\", \"value\":%d}", Buffer, MeasVal.airNOxmax);
 8005b78:	4b85      	ldr	r3, [pc, #532]	@ (8005d90 <CreateMessage+0x818>)
 8005b7a:	224e      	movs	r2, #78	@ 0x4e
 8005b7c:	5a9b      	ldrh	r3, [r3, r2]
 8005b7e:	4a7d      	ldr	r2, [pc, #500]	@ (8005d74 <CreateMessage+0x7fc>)
 8005b80:	4988      	ldr	r1, [pc, #544]	@ (8005da4 <CreateMessage+0x82c>)
 8005b82:	487e      	ldr	r0, [pc, #504]	@ (8005d7c <CreateMessage+0x804>)
 8005b84:	f020 fb84 	bl	8026290 <siprintf>
#else
      sprintf(&message[0], ",{\"name\":\"NOx\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%d, \"unit\":\"NOxr\"}", uid[2], (char*)nameConfig, Buffer, MeasVal.airNOxmax);
#endif
      index += strlen(message);
 8005b88:	4b7c      	ldr	r3, [pc, #496]	@ (8005d7c <CreateMessage+0x804>)
 8005b8a:	0018      	movs	r0, r3
 8005b8c:	f7fa faee 	bl	800016c <strlen>
 8005b90:	0003      	movs	r3, r0
 8005b92:	b299      	uxth	r1, r3
 8005b94:	220e      	movs	r2, #14
 8005b96:	18bb      	adds	r3, r7, r2
 8005b98:	18ba      	adds	r2, r7, r2
 8005b9a:	8812      	ldrh	r2, [r2, #0]
 8005b9c:	188a      	adds	r2, r1, r2
 8005b9e:	801a      	strh	r2, [r3, #0]
      if (send) {
 8005ba0:	1cfb      	adds	r3, r7, #3
 8005ba2:	781b      	ldrb	r3, [r3, #0]
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d019      	beq.n	8005bdc <CreateMessage+0x664>
        status = ESP_Send((uint8_t*)message, strlen(message));
 8005ba8:	4b74      	ldr	r3, [pc, #464]	@ (8005d7c <CreateMessage+0x804>)
 8005baa:	0018      	movs	r0, r3
 8005bac:	f7fa fade 	bl	800016c <strlen>
 8005bb0:	0003      	movs	r3, r0
 8005bb2:	b29a      	uxth	r2, r3
 8005bb4:	4b71      	ldr	r3, [pc, #452]	@ (8005d7c <CreateMessage+0x804>)
 8005bb6:	0011      	movs	r1, r2
 8005bb8:	0018      	movs	r0, r3
 8005bba:	f7ff f951 	bl	8004e60 <ESP_Send>
 8005bbe:	0003      	movs	r3, r0
 8005bc0:	001a      	movs	r2, r3
 8005bc2:	4b6f      	ldr	r3, [pc, #444]	@ (8005d80 <CreateMessage+0x808>)
 8005bc4:	701a      	strb	r2, [r3, #0]
        retstat &= status;
 8005bc6:	4b6f      	ldr	r3, [pc, #444]	@ (8005d84 <CreateMessage+0x80c>)
 8005bc8:	781b      	ldrb	r3, [r3, #0]
 8005bca:	001a      	movs	r2, r3
 8005bcc:	4b6c      	ldr	r3, [pc, #432]	@ (8005d80 <CreateMessage+0x808>)
 8005bce:	781b      	ldrb	r3, [r3, #0]
 8005bd0:	4013      	ands	r3, r2
 8005bd2:	1e5a      	subs	r2, r3, #1
 8005bd4:	4193      	sbcs	r3, r2
 8005bd6:	b2da      	uxtb	r2, r3
 8005bd8:	4b6a      	ldr	r3, [pc, #424]	@ (8005d84 <CreateMessage+0x80c>)
 8005bda:	701a      	strb	r2, [r3, #0]
      }
    }

    ReadUint8ArrayEEprom(SEN55TempConfigAddr, keybuffer, IdSize);
 8005bdc:	4b6a      	ldr	r3, [pc, #424]	@ (8005d88 <CreateMessage+0x810>)
 8005bde:	4872      	ldr	r0, [pc, #456]	@ (8005da8 <CreateMessage+0x830>)
 8005be0:	220c      	movs	r2, #12
 8005be2:	0019      	movs	r1, r3
 8005be4:	f006 fa88 	bl	800c0f8 <ReadUint8ArrayEEprom>
    if (((product_name[4] == '4') || (product_name[4] == '5')) && isKeyValid(keybuffer, "SEN54/5", "temperature")) {
 8005be8:	4b6c      	ldr	r3, [pc, #432]	@ (8005d9c <CreateMessage+0x824>)
 8005bea:	791b      	ldrb	r3, [r3, #4]
 8005bec:	2b34      	cmp	r3, #52	@ 0x34
 8005bee:	d003      	beq.n	8005bf8 <CreateMessage+0x680>
 8005bf0:	4b6a      	ldr	r3, [pc, #424]	@ (8005d9c <CreateMessage+0x824>)
 8005bf2:	791b      	ldrb	r3, [r3, #4]
 8005bf4:	2b35      	cmp	r3, #53	@ 0x35
 8005bf6:	d146      	bne.n	8005c86 <CreateMessage+0x70e>
 8005bf8:	4a6c      	ldr	r2, [pc, #432]	@ (8005dac <CreateMessage+0x834>)
 8005bfa:	496d      	ldr	r1, [pc, #436]	@ (8005db0 <CreateMessage+0x838>)
 8005bfc:	4b62      	ldr	r3, [pc, #392]	@ (8005d88 <CreateMessage+0x810>)
 8005bfe:	0018      	movs	r0, r3
 8005c00:	f7ff fb92 	bl	8005328 <isKeyValid>
 8005c04:	1e03      	subs	r3, r0, #0
 8005c06:	d03e      	beq.n	8005c86 <CreateMessage+0x70e>
      uint8ArrayToString(Buffer, keybuffer);
 8005c08:	4a5f      	ldr	r2, [pc, #380]	@ (8005d88 <CreateMessage+0x810>)
 8005c0a:	4b5a      	ldr	r3, [pc, #360]	@ (8005d74 <CreateMessage+0x7fc>)
 8005c0c:	0011      	movs	r1, r2
 8005c0e:	0018      	movs	r0, r3
 8005c10:	f7ff fbea 	bl	80053e8 <uint8ArrayToString>
#ifdef OPENSENSEMAP
      sprintf(&message[0], ",{\"sensor\": \"%s\", \"value\":%.1f}", Buffer, MeasVal.sen55_temperature);
 8005c14:	4b5e      	ldr	r3, [pc, #376]	@ (8005d90 <CreateMessage+0x818>)
 8005c16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c18:	1c18      	adds	r0, r3, #0
 8005c1a:	f7fd fe3b 	bl	8003894 <__aeabi_f2d>
 8005c1e:	0002      	movs	r2, r0
 8005c20:	000b      	movs	r3, r1
 8005c22:	4c54      	ldr	r4, [pc, #336]	@ (8005d74 <CreateMessage+0x7fc>)
 8005c24:	4963      	ldr	r1, [pc, #396]	@ (8005db4 <CreateMessage+0x83c>)
 8005c26:	4855      	ldr	r0, [pc, #340]	@ (8005d7c <CreateMessage+0x804>)
 8005c28:	9200      	str	r2, [sp, #0]
 8005c2a:	9301      	str	r3, [sp, #4]
 8005c2c:	0022      	movs	r2, r4
 8005c2e:	f020 fb2f 	bl	8026290 <siprintf>
#else
      sprintf(&message[0], ",{\"name\":\"SEN54/5 temp\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.1f, \"unit\":\"C\"}", uid[2], (char*)nameConfig, Buffer, MeasVal.sen55_temperature);
#endif
      index += strlen(message);
 8005c32:	4b52      	ldr	r3, [pc, #328]	@ (8005d7c <CreateMessage+0x804>)
 8005c34:	0018      	movs	r0, r3
 8005c36:	f7fa fa99 	bl	800016c <strlen>
 8005c3a:	0003      	movs	r3, r0
 8005c3c:	b299      	uxth	r1, r3
 8005c3e:	220e      	movs	r2, #14
 8005c40:	18bb      	adds	r3, r7, r2
 8005c42:	18ba      	adds	r2, r7, r2
 8005c44:	8812      	ldrh	r2, [r2, #0]
 8005c46:	188a      	adds	r2, r1, r2
 8005c48:	801a      	strh	r2, [r3, #0]
      if (send) {
 8005c4a:	1cfb      	adds	r3, r7, #3
 8005c4c:	781b      	ldrb	r3, [r3, #0]
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d019      	beq.n	8005c86 <CreateMessage+0x70e>
        status = ESP_Send((uint8_t*)message, strlen(message));
 8005c52:	4b4a      	ldr	r3, [pc, #296]	@ (8005d7c <CreateMessage+0x804>)
 8005c54:	0018      	movs	r0, r3
 8005c56:	f7fa fa89 	bl	800016c <strlen>
 8005c5a:	0003      	movs	r3, r0
 8005c5c:	b29a      	uxth	r2, r3
 8005c5e:	4b47      	ldr	r3, [pc, #284]	@ (8005d7c <CreateMessage+0x804>)
 8005c60:	0011      	movs	r1, r2
 8005c62:	0018      	movs	r0, r3
 8005c64:	f7ff f8fc 	bl	8004e60 <ESP_Send>
 8005c68:	0003      	movs	r3, r0
 8005c6a:	001a      	movs	r2, r3
 8005c6c:	4b44      	ldr	r3, [pc, #272]	@ (8005d80 <CreateMessage+0x808>)
 8005c6e:	701a      	strb	r2, [r3, #0]
        retstat &= status;
 8005c70:	4b44      	ldr	r3, [pc, #272]	@ (8005d84 <CreateMessage+0x80c>)
 8005c72:	781b      	ldrb	r3, [r3, #0]
 8005c74:	001a      	movs	r2, r3
 8005c76:	4b42      	ldr	r3, [pc, #264]	@ (8005d80 <CreateMessage+0x808>)
 8005c78:	781b      	ldrb	r3, [r3, #0]
 8005c7a:	4013      	ands	r3, r2
 8005c7c:	1e5a      	subs	r2, r3, #1
 8005c7e:	4193      	sbcs	r3, r2
 8005c80:	b2da      	uxtb	r2, r3
 8005c82:	4b40      	ldr	r3, [pc, #256]	@ (8005d84 <CreateMessage+0x80c>)
 8005c84:	701a      	strb	r2, [r3, #0]
      }
    }

    ReadUint8ArrayEEprom(SEN55HumidConfigAddr, keybuffer, IdSize);
 8005c86:	4b40      	ldr	r3, [pc, #256]	@ (8005d88 <CreateMessage+0x810>)
 8005c88:	484b      	ldr	r0, [pc, #300]	@ (8005db8 <CreateMessage+0x840>)
 8005c8a:	220c      	movs	r2, #12
 8005c8c:	0019      	movs	r1, r3
 8005c8e:	f006 fa33 	bl	800c0f8 <ReadUint8ArrayEEprom>
    if (((product_name[4] == '4') || (product_name[4] == '5')) && isKeyValid(keybuffer, "SEN54/5", "humidity")) {
 8005c92:	4b42      	ldr	r3, [pc, #264]	@ (8005d9c <CreateMessage+0x824>)
 8005c94:	791b      	ldrb	r3, [r3, #4]
 8005c96:	2b34      	cmp	r3, #52	@ 0x34
 8005c98:	d003      	beq.n	8005ca2 <CreateMessage+0x72a>
 8005c9a:	4b40      	ldr	r3, [pc, #256]	@ (8005d9c <CreateMessage+0x824>)
 8005c9c:	791b      	ldrb	r3, [r3, #4]
 8005c9e:	2b35      	cmp	r3, #53	@ 0x35
 8005ca0:	d146      	bne.n	8005d30 <CreateMessage+0x7b8>
 8005ca2:	4a46      	ldr	r2, [pc, #280]	@ (8005dbc <CreateMessage+0x844>)
 8005ca4:	4942      	ldr	r1, [pc, #264]	@ (8005db0 <CreateMessage+0x838>)
 8005ca6:	4b38      	ldr	r3, [pc, #224]	@ (8005d88 <CreateMessage+0x810>)
 8005ca8:	0018      	movs	r0, r3
 8005caa:	f7ff fb3d 	bl	8005328 <isKeyValid>
 8005cae:	1e03      	subs	r3, r0, #0
 8005cb0:	d03e      	beq.n	8005d30 <CreateMessage+0x7b8>
      uint8ArrayToString(Buffer, keybuffer);
 8005cb2:	4a35      	ldr	r2, [pc, #212]	@ (8005d88 <CreateMessage+0x810>)
 8005cb4:	4b2f      	ldr	r3, [pc, #188]	@ (8005d74 <CreateMessage+0x7fc>)
 8005cb6:	0011      	movs	r1, r2
 8005cb8:	0018      	movs	r0, r3
 8005cba:	f7ff fb95 	bl	80053e8 <uint8ArrayToString>
#ifdef OPENSENSEMAP
      sprintf(&message[0], ",{\"sensor\": \"%s\", \"value\":%.1f}", Buffer, MeasVal.sen55_humidity);
 8005cbe:	4b34      	ldr	r3, [pc, #208]	@ (8005d90 <CreateMessage+0x818>)
 8005cc0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005cc2:	1c18      	adds	r0, r3, #0
 8005cc4:	f7fd fde6 	bl	8003894 <__aeabi_f2d>
 8005cc8:	0002      	movs	r2, r0
 8005cca:	000b      	movs	r3, r1
 8005ccc:	4c29      	ldr	r4, [pc, #164]	@ (8005d74 <CreateMessage+0x7fc>)
 8005cce:	4939      	ldr	r1, [pc, #228]	@ (8005db4 <CreateMessage+0x83c>)
 8005cd0:	482a      	ldr	r0, [pc, #168]	@ (8005d7c <CreateMessage+0x804>)
 8005cd2:	9200      	str	r2, [sp, #0]
 8005cd4:	9301      	str	r3, [sp, #4]
 8005cd6:	0022      	movs	r2, r4
 8005cd8:	f020 fada 	bl	8026290 <siprintf>
#else
      sprintf(&message[0], ",{\"name\":\"SEN54/5 humid\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.1f, \"unit\":\"%%\"}", uid[2], (char*)nameConfig, Buffer, MeasVal.sen55_humidity);
#endif
      index += strlen(message);
 8005cdc:	4b27      	ldr	r3, [pc, #156]	@ (8005d7c <CreateMessage+0x804>)
 8005cde:	0018      	movs	r0, r3
 8005ce0:	f7fa fa44 	bl	800016c <strlen>
 8005ce4:	0003      	movs	r3, r0
 8005ce6:	b299      	uxth	r1, r3
 8005ce8:	220e      	movs	r2, #14
 8005cea:	18bb      	adds	r3, r7, r2
 8005cec:	18ba      	adds	r2, r7, r2
 8005cee:	8812      	ldrh	r2, [r2, #0]
 8005cf0:	188a      	adds	r2, r1, r2
 8005cf2:	801a      	strh	r2, [r3, #0]
      if (send) {
 8005cf4:	1cfb      	adds	r3, r7, #3
 8005cf6:	781b      	ldrb	r3, [r3, #0]
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d019      	beq.n	8005d30 <CreateMessage+0x7b8>
        status = ESP_Send((uint8_t*)message, strlen(message));
 8005cfc:	4b1f      	ldr	r3, [pc, #124]	@ (8005d7c <CreateMessage+0x804>)
 8005cfe:	0018      	movs	r0, r3
 8005d00:	f7fa fa34 	bl	800016c <strlen>
 8005d04:	0003      	movs	r3, r0
 8005d06:	b29a      	uxth	r2, r3
 8005d08:	4b1c      	ldr	r3, [pc, #112]	@ (8005d7c <CreateMessage+0x804>)
 8005d0a:	0011      	movs	r1, r2
 8005d0c:	0018      	movs	r0, r3
 8005d0e:	f7ff f8a7 	bl	8004e60 <ESP_Send>
 8005d12:	0003      	movs	r3, r0
 8005d14:	001a      	movs	r2, r3
 8005d16:	4b1a      	ldr	r3, [pc, #104]	@ (8005d80 <CreateMessage+0x808>)
 8005d18:	701a      	strb	r2, [r3, #0]
        retstat &= status;
 8005d1a:	4b1a      	ldr	r3, [pc, #104]	@ (8005d84 <CreateMessage+0x80c>)
 8005d1c:	781b      	ldrb	r3, [r3, #0]
 8005d1e:	001a      	movs	r2, r3
 8005d20:	4b17      	ldr	r3, [pc, #92]	@ (8005d80 <CreateMessage+0x808>)
 8005d22:	781b      	ldrb	r3, [r3, #0]
 8005d24:	4013      	ands	r3, r2
 8005d26:	1e5a      	subs	r2, r3, #1
 8005d28:	4193      	sbcs	r3, r2
 8005d2a:	b2da      	uxtb	r2, r3
 8005d2c:	4b15      	ldr	r3, [pc, #84]	@ (8005d84 <CreateMessage+0x80c>)
 8005d2e:	701a      	strb	r2, [r3, #0]
      }
    }

    if (sen5x_Get_sen5x_enable_state() && (batteryStatus > BATTERY_LOW)) {
 8005d30:	f008 fc22 	bl	800e578 <sen5x_Get_sen5x_enable_state>
 8005d34:	1e03      	subs	r3, r0, #0
 8005d36:	d100      	bne.n	8005d3a <CreateMessage+0x7c2>
 8005d38:	e157      	b.n	8005fea <CreateMessage+0xa72>
 8005d3a:	4b21      	ldr	r3, [pc, #132]	@ (8005dc0 <CreateMessage+0x848>)
 8005d3c:	781b      	ldrb	r3, [r3, #0]
 8005d3e:	2b01      	cmp	r3, #1
 8005d40:	d800      	bhi.n	8005d44 <CreateMessage+0x7cc>
 8005d42:	e152      	b.n	8005fea <CreateMessage+0xa72>
      ReadUint8ArrayEEprom(PM1ConfigAddr, keybuffer, IdSize);
 8005d44:	4b10      	ldr	r3, [pc, #64]	@ (8005d88 <CreateMessage+0x810>)
 8005d46:	481f      	ldr	r0, [pc, #124]	@ (8005dc4 <CreateMessage+0x84c>)
 8005d48:	220c      	movs	r2, #12
 8005d4a:	0019      	movs	r1, r3
 8005d4c:	f006 f9d4 	bl	800c0f8 <ReadUint8ArrayEEprom>
      if (isKeyValid(keybuffer, "PM1", "particle")) {
 8005d50:	4a1d      	ldr	r2, [pc, #116]	@ (8005dc8 <CreateMessage+0x850>)
 8005d52:	491e      	ldr	r1, [pc, #120]	@ (8005dcc <CreateMessage+0x854>)
 8005d54:	4b0c      	ldr	r3, [pc, #48]	@ (8005d88 <CreateMessage+0x810>)
 8005d56:	0018      	movs	r0, r3
 8005d58:	f7ff fae6 	bl	8005328 <isKeyValid>
 8005d5c:	1e03      	subs	r3, r0, #0
 8005d5e:	d06d      	beq.n	8005e3c <CreateMessage+0x8c4>
        uint8ArrayToString(Buffer, keybuffer);
 8005d60:	4a09      	ldr	r2, [pc, #36]	@ (8005d88 <CreateMessage+0x810>)
 8005d62:	4b04      	ldr	r3, [pc, #16]	@ (8005d74 <CreateMessage+0x7fc>)
 8005d64:	0011      	movs	r1, r2
 8005d66:	0018      	movs	r0, r3
 8005d68:	f7ff fb3e 	bl	80053e8 <uint8ArrayToString>
#ifdef OPENSENSEMAP
        sprintf(&message[0], ",{\"sensor\": \"%s\", \"value\":%.2f}", Buffer, MeasVal.PM1p0max);
 8005d6c:	4b08      	ldr	r3, [pc, #32]	@ (8005d90 <CreateMessage+0x818>)
 8005d6e:	68db      	ldr	r3, [r3, #12]
 8005d70:	1c18      	adds	r0, r3, #0
 8005d72:	e02d      	b.n	8005dd0 <CreateMessage+0x858>
 8005d74:	20000840 	.word	0x20000840
 8005d78:	0802acb4 	.word	0x0802acb4
 8005d7c:	200005c4 	.word	0x200005c4
 8005d80:	20000859 	.word	0x20000859
 8005d84:	20000032 	.word	0x20000032
 8005d88:	20000834 	.word	0x20000834
 8005d8c:	08080048 	.word	0x08080048
 8005d90:	20000704 	.word	0x20000704
 8005d94:	08080078 	.word	0x08080078
 8005d98:	200005c0 	.word	0x200005c0
 8005d9c:	200011c0 	.word	0x200011c0
 8005da0:	08080024 	.word	0x08080024
 8005da4:	0802acd4 	.word	0x0802acd4
 8005da8:	08080170 	.word	0x08080170
 8005dac:	0802ad74 	.word	0x0802ad74
 8005db0:	0802ad80 	.word	0x0802ad80
 8005db4:	0802ad88 	.word	0x0802ad88
 8005db8:	0808017c 	.word	0x0808017c
 8005dbc:	0802ada8 	.word	0x0802ada8
 8005dc0:	20002161 	.word	0x20002161
 8005dc4:	080800b0 	.word	0x080800b0
 8005dc8:	0802adb4 	.word	0x0802adb4
 8005dcc:	0802adc0 	.word	0x0802adc0
 8005dd0:	f7fd fd60 	bl	8003894 <__aeabi_f2d>
 8005dd4:	0002      	movs	r2, r0
 8005dd6:	000b      	movs	r3, r1
 8005dd8:	4ceb      	ldr	r4, [pc, #940]	@ (8006188 <CreateMessage+0xc10>)
 8005dda:	49ec      	ldr	r1, [pc, #944]	@ (800618c <CreateMessage+0xc14>)
 8005ddc:	48ec      	ldr	r0, [pc, #944]	@ (8006190 <CreateMessage+0xc18>)
 8005dde:	9200      	str	r2, [sp, #0]
 8005de0:	9301      	str	r3, [sp, #4]
 8005de2:	0022      	movs	r2, r4
 8005de4:	f020 fa54 	bl	8026290 <siprintf>
#else
        sprintf(&message[0], ",{\"name\":\"PM1\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.1f, \"unit\":\"µg/m3\"}", uid[2], (char*)nameConfig, Buffer, MeasVal.PM1p0max);
#endif
        index += strlen(message);
 8005de8:	4be9      	ldr	r3, [pc, #932]	@ (8006190 <CreateMessage+0xc18>)
 8005dea:	0018      	movs	r0, r3
 8005dec:	f7fa f9be 	bl	800016c <strlen>
 8005df0:	0003      	movs	r3, r0
 8005df2:	b299      	uxth	r1, r3
 8005df4:	220e      	movs	r2, #14
 8005df6:	18bb      	adds	r3, r7, r2
 8005df8:	18ba      	adds	r2, r7, r2
 8005dfa:	8812      	ldrh	r2, [r2, #0]
 8005dfc:	188a      	adds	r2, r1, r2
 8005dfe:	801a      	strh	r2, [r3, #0]
        if (send) {
 8005e00:	1cfb      	adds	r3, r7, #3
 8005e02:	781b      	ldrb	r3, [r3, #0]
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d019      	beq.n	8005e3c <CreateMessage+0x8c4>
          status = ESP_Send((uint8_t*)message, strlen(message));
 8005e08:	4be1      	ldr	r3, [pc, #900]	@ (8006190 <CreateMessage+0xc18>)
 8005e0a:	0018      	movs	r0, r3
 8005e0c:	f7fa f9ae 	bl	800016c <strlen>
 8005e10:	0003      	movs	r3, r0
 8005e12:	b29a      	uxth	r2, r3
 8005e14:	4bde      	ldr	r3, [pc, #888]	@ (8006190 <CreateMessage+0xc18>)
 8005e16:	0011      	movs	r1, r2
 8005e18:	0018      	movs	r0, r3
 8005e1a:	f7ff f821 	bl	8004e60 <ESP_Send>
 8005e1e:	0003      	movs	r3, r0
 8005e20:	001a      	movs	r2, r3
 8005e22:	4bdc      	ldr	r3, [pc, #880]	@ (8006194 <CreateMessage+0xc1c>)
 8005e24:	701a      	strb	r2, [r3, #0]
          retstat &= status;
 8005e26:	4bdc      	ldr	r3, [pc, #880]	@ (8006198 <CreateMessage+0xc20>)
 8005e28:	781b      	ldrb	r3, [r3, #0]
 8005e2a:	001a      	movs	r2, r3
 8005e2c:	4bd9      	ldr	r3, [pc, #868]	@ (8006194 <CreateMessage+0xc1c>)
 8005e2e:	781b      	ldrb	r3, [r3, #0]
 8005e30:	4013      	ands	r3, r2
 8005e32:	1e5a      	subs	r2, r3, #1
 8005e34:	4193      	sbcs	r3, r2
 8005e36:	b2da      	uxtb	r2, r3
 8005e38:	4bd7      	ldr	r3, [pc, #860]	@ (8006198 <CreateMessage+0xc20>)
 8005e3a:	701a      	strb	r2, [r3, #0]
        }
      }
      ReadUint8ArrayEEprom(PM2ConfigAddr, keybuffer, IdSize);
 8005e3c:	4bd7      	ldr	r3, [pc, #860]	@ (800619c <CreateMessage+0xc24>)
 8005e3e:	48d8      	ldr	r0, [pc, #864]	@ (80061a0 <CreateMessage+0xc28>)
 8005e40:	220c      	movs	r2, #12
 8005e42:	0019      	movs	r1, r3
 8005e44:	f006 f958 	bl	800c0f8 <ReadUint8ArrayEEprom>
      uint8ArrayToString(Buffer, keybuffer);
 8005e48:	4ad4      	ldr	r2, [pc, #848]	@ (800619c <CreateMessage+0xc24>)
 8005e4a:	4bcf      	ldr	r3, [pc, #828]	@ (8006188 <CreateMessage+0xc10>)
 8005e4c:	0011      	movs	r1, r2
 8005e4e:	0018      	movs	r0, r3
 8005e50:	f7ff faca 	bl	80053e8 <uint8ArrayToString>
#ifdef OPENSENSEMAP
      sprintf(&message[0], ",{\"sensor\": \"%s\", \"value\":%.2f}", Buffer, MeasVal.PM2p5max);
 8005e54:	4bd3      	ldr	r3, [pc, #844]	@ (80061a4 <CreateMessage+0xc2c>)
 8005e56:	695b      	ldr	r3, [r3, #20]
 8005e58:	1c18      	adds	r0, r3, #0
 8005e5a:	f7fd fd1b 	bl	8003894 <__aeabi_f2d>
 8005e5e:	0002      	movs	r2, r0
 8005e60:	000b      	movs	r3, r1
 8005e62:	4cc9      	ldr	r4, [pc, #804]	@ (8006188 <CreateMessage+0xc10>)
 8005e64:	49c9      	ldr	r1, [pc, #804]	@ (800618c <CreateMessage+0xc14>)
 8005e66:	48ca      	ldr	r0, [pc, #808]	@ (8006190 <CreateMessage+0xc18>)
 8005e68:	9200      	str	r2, [sp, #0]
 8005e6a:	9301      	str	r3, [sp, #4]
 8005e6c:	0022      	movs	r2, r4
 8005e6e:	f020 fa0f 	bl	8026290 <siprintf>
#else
      sprintf(&message[0], ",{\"name\":\"PM2.5\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.1f, \"unit\":\"µg/m3\"}", uid[2], (char*)nameConfig, Buffer, MeasVal.PM2p5max);
#endif
      index += strlen(message);
 8005e72:	4bc7      	ldr	r3, [pc, #796]	@ (8006190 <CreateMessage+0xc18>)
 8005e74:	0018      	movs	r0, r3
 8005e76:	f7fa f979 	bl	800016c <strlen>
 8005e7a:	0003      	movs	r3, r0
 8005e7c:	b299      	uxth	r1, r3
 8005e7e:	220e      	movs	r2, #14
 8005e80:	18bb      	adds	r3, r7, r2
 8005e82:	18ba      	adds	r2, r7, r2
 8005e84:	8812      	ldrh	r2, [r2, #0]
 8005e86:	188a      	adds	r2, r1, r2
 8005e88:	801a      	strh	r2, [r3, #0]
      if (send) {
 8005e8a:	1cfb      	adds	r3, r7, #3
 8005e8c:	781b      	ldrb	r3, [r3, #0]
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d019      	beq.n	8005ec6 <CreateMessage+0x94e>
        status = ESP_Send((uint8_t*)message, strlen(message));
 8005e92:	4bbf      	ldr	r3, [pc, #764]	@ (8006190 <CreateMessage+0xc18>)
 8005e94:	0018      	movs	r0, r3
 8005e96:	f7fa f969 	bl	800016c <strlen>
 8005e9a:	0003      	movs	r3, r0
 8005e9c:	b29a      	uxth	r2, r3
 8005e9e:	4bbc      	ldr	r3, [pc, #752]	@ (8006190 <CreateMessage+0xc18>)
 8005ea0:	0011      	movs	r1, r2
 8005ea2:	0018      	movs	r0, r3
 8005ea4:	f7fe ffdc 	bl	8004e60 <ESP_Send>
 8005ea8:	0003      	movs	r3, r0
 8005eaa:	001a      	movs	r2, r3
 8005eac:	4bb9      	ldr	r3, [pc, #740]	@ (8006194 <CreateMessage+0xc1c>)
 8005eae:	701a      	strb	r2, [r3, #0]
        retstat &= status;
 8005eb0:	4bb9      	ldr	r3, [pc, #740]	@ (8006198 <CreateMessage+0xc20>)
 8005eb2:	781b      	ldrb	r3, [r3, #0]
 8005eb4:	001a      	movs	r2, r3
 8005eb6:	4bb7      	ldr	r3, [pc, #732]	@ (8006194 <CreateMessage+0xc1c>)
 8005eb8:	781b      	ldrb	r3, [r3, #0]
 8005eba:	4013      	ands	r3, r2
 8005ebc:	1e5a      	subs	r2, r3, #1
 8005ebe:	4193      	sbcs	r3, r2
 8005ec0:	b2da      	uxtb	r2, r3
 8005ec2:	4bb5      	ldr	r3, [pc, #724]	@ (8006198 <CreateMessage+0xc20>)
 8005ec4:	701a      	strb	r2, [r3, #0]
      }

      ReadUint8ArrayEEprom(PM4ConfigAddr, keybuffer, IdSize);
 8005ec6:	4bb5      	ldr	r3, [pc, #724]	@ (800619c <CreateMessage+0xc24>)
 8005ec8:	48b7      	ldr	r0, [pc, #732]	@ (80061a8 <CreateMessage+0xc30>)
 8005eca:	220c      	movs	r2, #12
 8005ecc:	0019      	movs	r1, r3
 8005ece:	f006 f913 	bl	800c0f8 <ReadUint8ArrayEEprom>
      if (isKeyValid(keybuffer, "PM4", "particle")) {
 8005ed2:	4ab6      	ldr	r2, [pc, #728]	@ (80061ac <CreateMessage+0xc34>)
 8005ed4:	49b6      	ldr	r1, [pc, #728]	@ (80061b0 <CreateMessage+0xc38>)
 8005ed6:	4bb1      	ldr	r3, [pc, #708]	@ (800619c <CreateMessage+0xc24>)
 8005ed8:	0018      	movs	r0, r3
 8005eda:	f7ff fa25 	bl	8005328 <isKeyValid>
 8005ede:	1e03      	subs	r3, r0, #0
 8005ee0:	d03e      	beq.n	8005f60 <CreateMessage+0x9e8>
        uint8ArrayToString(Buffer, keybuffer);
 8005ee2:	4aae      	ldr	r2, [pc, #696]	@ (800619c <CreateMessage+0xc24>)
 8005ee4:	4ba8      	ldr	r3, [pc, #672]	@ (8006188 <CreateMessage+0xc10>)
 8005ee6:	0011      	movs	r1, r2
 8005ee8:	0018      	movs	r0, r3
 8005eea:	f7ff fa7d 	bl	80053e8 <uint8ArrayToString>
#ifdef OPENSENSEMAP
        sprintf(&message[0], ",{\"sensor\": \"%s\", \"value\":%.2f}", Buffer, MeasVal.PM4p0max);
 8005eee:	4bad      	ldr	r3, [pc, #692]	@ (80061a4 <CreateMessage+0xc2c>)
 8005ef0:	69db      	ldr	r3, [r3, #28]
 8005ef2:	1c18      	adds	r0, r3, #0
 8005ef4:	f7fd fcce 	bl	8003894 <__aeabi_f2d>
 8005ef8:	0002      	movs	r2, r0
 8005efa:	000b      	movs	r3, r1
 8005efc:	4ca2      	ldr	r4, [pc, #648]	@ (8006188 <CreateMessage+0xc10>)
 8005efe:	49a3      	ldr	r1, [pc, #652]	@ (800618c <CreateMessage+0xc14>)
 8005f00:	48a3      	ldr	r0, [pc, #652]	@ (8006190 <CreateMessage+0xc18>)
 8005f02:	9200      	str	r2, [sp, #0]
 8005f04:	9301      	str	r3, [sp, #4]
 8005f06:	0022      	movs	r2, r4
 8005f08:	f020 f9c2 	bl	8026290 <siprintf>
#else
        sprintf(&message[0], ",{\"name\":\"PM4\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.1f, \"unit\":\"µg/m3\"}", uid[2], (char*)nameConfig, Buffer, MeasVal.PM4p0max);
#endif
        index += strlen(message);
 8005f0c:	4ba0      	ldr	r3, [pc, #640]	@ (8006190 <CreateMessage+0xc18>)
 8005f0e:	0018      	movs	r0, r3
 8005f10:	f7fa f92c 	bl	800016c <strlen>
 8005f14:	0003      	movs	r3, r0
 8005f16:	b299      	uxth	r1, r3
 8005f18:	220e      	movs	r2, #14
 8005f1a:	18bb      	adds	r3, r7, r2
 8005f1c:	18ba      	adds	r2, r7, r2
 8005f1e:	8812      	ldrh	r2, [r2, #0]
 8005f20:	188a      	adds	r2, r1, r2
 8005f22:	801a      	strh	r2, [r3, #0]
        if (send) {
 8005f24:	1cfb      	adds	r3, r7, #3
 8005f26:	781b      	ldrb	r3, [r3, #0]
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d019      	beq.n	8005f60 <CreateMessage+0x9e8>
          status = ESP_Send((uint8_t*)message, strlen(message));
 8005f2c:	4b98      	ldr	r3, [pc, #608]	@ (8006190 <CreateMessage+0xc18>)
 8005f2e:	0018      	movs	r0, r3
 8005f30:	f7fa f91c 	bl	800016c <strlen>
 8005f34:	0003      	movs	r3, r0
 8005f36:	b29a      	uxth	r2, r3
 8005f38:	4b95      	ldr	r3, [pc, #596]	@ (8006190 <CreateMessage+0xc18>)
 8005f3a:	0011      	movs	r1, r2
 8005f3c:	0018      	movs	r0, r3
 8005f3e:	f7fe ff8f 	bl	8004e60 <ESP_Send>
 8005f42:	0003      	movs	r3, r0
 8005f44:	001a      	movs	r2, r3
 8005f46:	4b93      	ldr	r3, [pc, #588]	@ (8006194 <CreateMessage+0xc1c>)
 8005f48:	701a      	strb	r2, [r3, #0]
          retstat &= status;
 8005f4a:	4b93      	ldr	r3, [pc, #588]	@ (8006198 <CreateMessage+0xc20>)
 8005f4c:	781b      	ldrb	r3, [r3, #0]
 8005f4e:	001a      	movs	r2, r3
 8005f50:	4b90      	ldr	r3, [pc, #576]	@ (8006194 <CreateMessage+0xc1c>)
 8005f52:	781b      	ldrb	r3, [r3, #0]
 8005f54:	4013      	ands	r3, r2
 8005f56:	1e5a      	subs	r2, r3, #1
 8005f58:	4193      	sbcs	r3, r2
 8005f5a:	b2da      	uxtb	r2, r3
 8005f5c:	4b8e      	ldr	r3, [pc, #568]	@ (8006198 <CreateMessage+0xc20>)
 8005f5e:	701a      	strb	r2, [r3, #0]
        }
      }

      ReadUint8ArrayEEprom(PM10ConfigAddr, keybuffer, IdSize);
 8005f60:	4b8e      	ldr	r3, [pc, #568]	@ (800619c <CreateMessage+0xc24>)
 8005f62:	4894      	ldr	r0, [pc, #592]	@ (80061b4 <CreateMessage+0xc3c>)
 8005f64:	220c      	movs	r2, #12
 8005f66:	0019      	movs	r1, r3
 8005f68:	f006 f8c6 	bl	800c0f8 <ReadUint8ArrayEEprom>
      uint8ArrayToString(Buffer, keybuffer);
 8005f6c:	4a8b      	ldr	r2, [pc, #556]	@ (800619c <CreateMessage+0xc24>)
 8005f6e:	4b86      	ldr	r3, [pc, #536]	@ (8006188 <CreateMessage+0xc10>)
 8005f70:	0011      	movs	r1, r2
 8005f72:	0018      	movs	r0, r3
 8005f74:	f7ff fa38 	bl	80053e8 <uint8ArrayToString>
#ifdef OPENSENSEMAP
      sprintf(&message[0], ",{\"sensor\": \"%s\", \"value\":%.2f}", Buffer, MeasVal.PM10p0max);
 8005f78:	4b8a      	ldr	r3, [pc, #552]	@ (80061a4 <CreateMessage+0xc2c>)
 8005f7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f7c:	1c18      	adds	r0, r3, #0
 8005f7e:	f7fd fc89 	bl	8003894 <__aeabi_f2d>
 8005f82:	0002      	movs	r2, r0
 8005f84:	000b      	movs	r3, r1
 8005f86:	4c80      	ldr	r4, [pc, #512]	@ (8006188 <CreateMessage+0xc10>)
 8005f88:	4980      	ldr	r1, [pc, #512]	@ (800618c <CreateMessage+0xc14>)
 8005f8a:	4881      	ldr	r0, [pc, #516]	@ (8006190 <CreateMessage+0xc18>)
 8005f8c:	9200      	str	r2, [sp, #0]
 8005f8e:	9301      	str	r3, [sp, #4]
 8005f90:	0022      	movs	r2, r4
 8005f92:	f020 f97d 	bl	8026290 <siprintf>
#else
      sprintf(&message[0], ",{\"name\":\"PM10\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.1f, \"unit\":\"µg/m3\"}", uid[2], (char*)nameConfig, Buffer, MeasVal.PM10p0max);
#endif
      index += strlen(message);
 8005f96:	4b7e      	ldr	r3, [pc, #504]	@ (8006190 <CreateMessage+0xc18>)
 8005f98:	0018      	movs	r0, r3
 8005f9a:	f7fa f8e7 	bl	800016c <strlen>
 8005f9e:	0003      	movs	r3, r0
 8005fa0:	b299      	uxth	r1, r3
 8005fa2:	220e      	movs	r2, #14
 8005fa4:	18bb      	adds	r3, r7, r2
 8005fa6:	18ba      	adds	r2, r7, r2
 8005fa8:	8812      	ldrh	r2, [r2, #0]
 8005faa:	188a      	adds	r2, r1, r2
 8005fac:	801a      	strh	r2, [r3, #0]
      if (send) {
 8005fae:	1cfb      	adds	r3, r7, #3
 8005fb0:	781b      	ldrb	r3, [r3, #0]
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d019      	beq.n	8005fea <CreateMessage+0xa72>
        status = ESP_Send((uint8_t*)message, strlen(message));
 8005fb6:	4b76      	ldr	r3, [pc, #472]	@ (8006190 <CreateMessage+0xc18>)
 8005fb8:	0018      	movs	r0, r3
 8005fba:	f7fa f8d7 	bl	800016c <strlen>
 8005fbe:	0003      	movs	r3, r0
 8005fc0:	b29a      	uxth	r2, r3
 8005fc2:	4b73      	ldr	r3, [pc, #460]	@ (8006190 <CreateMessage+0xc18>)
 8005fc4:	0011      	movs	r1, r2
 8005fc6:	0018      	movs	r0, r3
 8005fc8:	f7fe ff4a 	bl	8004e60 <ESP_Send>
 8005fcc:	0003      	movs	r3, r0
 8005fce:	001a      	movs	r2, r3
 8005fd0:	4b70      	ldr	r3, [pc, #448]	@ (8006194 <CreateMessage+0xc1c>)
 8005fd2:	701a      	strb	r2, [r3, #0]
        retstat &= status;
 8005fd4:	4b70      	ldr	r3, [pc, #448]	@ (8006198 <CreateMessage+0xc20>)
 8005fd6:	781b      	ldrb	r3, [r3, #0]
 8005fd8:	001a      	movs	r2, r3
 8005fda:	4b6e      	ldr	r3, [pc, #440]	@ (8006194 <CreateMessage+0xc1c>)
 8005fdc:	781b      	ldrb	r3, [r3, #0]
 8005fde:	4013      	ands	r3, r2
 8005fe0:	1e5a      	subs	r2, r3, #1
 8005fe2:	4193      	sbcs	r3, r2
 8005fe4:	b2da      	uxtb	r2, r3
 8005fe6:	4b6c      	ldr	r3, [pc, #432]	@ (8006198 <CreateMessage+0xc20>)
 8005fe8:	701a      	strb	r2, [r3, #0]
      }
    }

  if (IsAHT20SensorPresent()) {
 8005fea:	f007 fa43 	bl	800d474 <IsAHT20SensorPresent>
 8005fee:	1e03      	subs	r3, r0, #0
 8005ff0:	d100      	bne.n	8005ff4 <CreateMessage+0xa7c>
 8005ff2:	e099      	b.n	8006128 <CreateMessage+0xbb0>
    ReadUint8ArrayEEprom(AHTTempConfigAddr, keybuffer, IdSize);
 8005ff4:	4b69      	ldr	r3, [pc, #420]	@ (800619c <CreateMessage+0xc24>)
 8005ff6:	4870      	ldr	r0, [pc, #448]	@ (80061b8 <CreateMessage+0xc40>)
 8005ff8:	220c      	movs	r2, #12
 8005ffa:	0019      	movs	r1, r3
 8005ffc:	f006 f87c 	bl	800c0f8 <ReadUint8ArrayEEprom>
    if (isKeyValid(keybuffer, "AHT2x", "temperature")) {
 8006000:	4a6e      	ldr	r2, [pc, #440]	@ (80061bc <CreateMessage+0xc44>)
 8006002:	496f      	ldr	r1, [pc, #444]	@ (80061c0 <CreateMessage+0xc48>)
 8006004:	4b65      	ldr	r3, [pc, #404]	@ (800619c <CreateMessage+0xc24>)
 8006006:	0018      	movs	r0, r3
 8006008:	f7ff f98e 	bl	8005328 <isKeyValid>
 800600c:	1e03      	subs	r3, r0, #0
 800600e:	d03e      	beq.n	800608e <CreateMessage+0xb16>
      uint8ArrayToString(Buffer, keybuffer);
 8006010:	4a62      	ldr	r2, [pc, #392]	@ (800619c <CreateMessage+0xc24>)
 8006012:	4b5d      	ldr	r3, [pc, #372]	@ (8006188 <CreateMessage+0xc10>)
 8006014:	0011      	movs	r1, r2
 8006016:	0018      	movs	r0, r3
 8006018:	f7ff f9e6 	bl	80053e8 <uint8ArrayToString>
#ifdef OPENSENSEMAP
      sprintf(&message[0], ",{\"sensor\": \"%s\", \"value\":%.2f}", Buffer, MeasVal.AHT2x_temperature);
 800601c:	4b61      	ldr	r3, [pc, #388]	@ (80061a4 <CreateMessage+0xc2c>)
 800601e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006020:	1c18      	adds	r0, r3, #0
 8006022:	f7fd fc37 	bl	8003894 <__aeabi_f2d>
 8006026:	0002      	movs	r2, r0
 8006028:	000b      	movs	r3, r1
 800602a:	4c57      	ldr	r4, [pc, #348]	@ (8006188 <CreateMessage+0xc10>)
 800602c:	4957      	ldr	r1, [pc, #348]	@ (800618c <CreateMessage+0xc14>)
 800602e:	4858      	ldr	r0, [pc, #352]	@ (8006190 <CreateMessage+0xc18>)
 8006030:	9200      	str	r2, [sp, #0]
 8006032:	9301      	str	r3, [sp, #4]
 8006034:	0022      	movs	r2, r4
 8006036:	f020 f92b 	bl	8026290 <siprintf>
#else
      sprintf(&message[0], ",{\"name\":\"AHT2x Temp\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.1f, \"unit\":\"C\"}", uid[2], (char*)nameConfig, Buffer, MeasVal.AHT2x_temperature);
#endif
      index += strlen(message);
 800603a:	4b55      	ldr	r3, [pc, #340]	@ (8006190 <CreateMessage+0xc18>)
 800603c:	0018      	movs	r0, r3
 800603e:	f7fa f895 	bl	800016c <strlen>
 8006042:	0003      	movs	r3, r0
 8006044:	b299      	uxth	r1, r3
 8006046:	220e      	movs	r2, #14
 8006048:	18bb      	adds	r3, r7, r2
 800604a:	18ba      	adds	r2, r7, r2
 800604c:	8812      	ldrh	r2, [r2, #0]
 800604e:	188a      	adds	r2, r1, r2
 8006050:	801a      	strh	r2, [r3, #0]
      if (send) {
 8006052:	1cfb      	adds	r3, r7, #3
 8006054:	781b      	ldrb	r3, [r3, #0]
 8006056:	2b00      	cmp	r3, #0
 8006058:	d019      	beq.n	800608e <CreateMessage+0xb16>
        status = ESP_Send((uint8_t*)message, strlen(message));
 800605a:	4b4d      	ldr	r3, [pc, #308]	@ (8006190 <CreateMessage+0xc18>)
 800605c:	0018      	movs	r0, r3
 800605e:	f7fa f885 	bl	800016c <strlen>
 8006062:	0003      	movs	r3, r0
 8006064:	b29a      	uxth	r2, r3
 8006066:	4b4a      	ldr	r3, [pc, #296]	@ (8006190 <CreateMessage+0xc18>)
 8006068:	0011      	movs	r1, r2
 800606a:	0018      	movs	r0, r3
 800606c:	f7fe fef8 	bl	8004e60 <ESP_Send>
 8006070:	0003      	movs	r3, r0
 8006072:	001a      	movs	r2, r3
 8006074:	4b47      	ldr	r3, [pc, #284]	@ (8006194 <CreateMessage+0xc1c>)
 8006076:	701a      	strb	r2, [r3, #0]
        retstat &= status;
 8006078:	4b47      	ldr	r3, [pc, #284]	@ (8006198 <CreateMessage+0xc20>)
 800607a:	781b      	ldrb	r3, [r3, #0]
 800607c:	001a      	movs	r2, r3
 800607e:	4b45      	ldr	r3, [pc, #276]	@ (8006194 <CreateMessage+0xc1c>)
 8006080:	781b      	ldrb	r3, [r3, #0]
 8006082:	4013      	ands	r3, r2
 8006084:	1e5a      	subs	r2, r3, #1
 8006086:	4193      	sbcs	r3, r2
 8006088:	b2da      	uxtb	r2, r3
 800608a:	4b43      	ldr	r3, [pc, #268]	@ (8006198 <CreateMessage+0xc20>)
 800608c:	701a      	strb	r2, [r3, #0]
      }
    }

    ReadUint8ArrayEEprom(AHTHumidConfigAddr, keybuffer, IdSize);
 800608e:	4b43      	ldr	r3, [pc, #268]	@ (800619c <CreateMessage+0xc24>)
 8006090:	484c      	ldr	r0, [pc, #304]	@ (80061c4 <CreateMessage+0xc4c>)
 8006092:	220c      	movs	r2, #12
 8006094:	0019      	movs	r1, r3
 8006096:	f006 f82f 	bl	800c0f8 <ReadUint8ArrayEEprom>
    if (isKeyValid(keybuffer, "AHT2x", "humidity")) {
 800609a:	4a4b      	ldr	r2, [pc, #300]	@ (80061c8 <CreateMessage+0xc50>)
 800609c:	4948      	ldr	r1, [pc, #288]	@ (80061c0 <CreateMessage+0xc48>)
 800609e:	4b3f      	ldr	r3, [pc, #252]	@ (800619c <CreateMessage+0xc24>)
 80060a0:	0018      	movs	r0, r3
 80060a2:	f7ff f941 	bl	8005328 <isKeyValid>
 80060a6:	1e03      	subs	r3, r0, #0
 80060a8:	d03e      	beq.n	8006128 <CreateMessage+0xbb0>
      uint8ArrayToString(Buffer, keybuffer);
 80060aa:	4a3c      	ldr	r2, [pc, #240]	@ (800619c <CreateMessage+0xc24>)
 80060ac:	4b36      	ldr	r3, [pc, #216]	@ (8006188 <CreateMessage+0xc10>)
 80060ae:	0011      	movs	r1, r2
 80060b0:	0018      	movs	r0, r3
 80060b2:	f7ff f999 	bl	80053e8 <uint8ArrayToString>
  #ifdef OPENSENSEMAP
      sprintf(&message[0], ",{\"sensor\": \"%s\", \"value\":%.2f}", Buffer, MeasVal.AHT2x_humidity);
 80060b6:	4b3b      	ldr	r3, [pc, #236]	@ (80061a4 <CreateMessage+0xc2c>)
 80060b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80060ba:	1c18      	adds	r0, r3, #0
 80060bc:	f7fd fbea 	bl	8003894 <__aeabi_f2d>
 80060c0:	0002      	movs	r2, r0
 80060c2:	000b      	movs	r3, r1
 80060c4:	4c30      	ldr	r4, [pc, #192]	@ (8006188 <CreateMessage+0xc10>)
 80060c6:	4931      	ldr	r1, [pc, #196]	@ (800618c <CreateMessage+0xc14>)
 80060c8:	4831      	ldr	r0, [pc, #196]	@ (8006190 <CreateMessage+0xc18>)
 80060ca:	9200      	str	r2, [sp, #0]
 80060cc:	9301      	str	r3, [sp, #4]
 80060ce:	0022      	movs	r2, r4
 80060d0:	f020 f8de 	bl	8026290 <siprintf>
  #else
      sprintf(&message[0], ",{\"name\":\"AHT2x humid\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.1f, \"unit\":\"%%\"}", uid[2], (char*)nameConfig, Buffer, MeasVal.AHT2x_humidity);
  #endif
      index += strlen(message);
 80060d4:	4b2e      	ldr	r3, [pc, #184]	@ (8006190 <CreateMessage+0xc18>)
 80060d6:	0018      	movs	r0, r3
 80060d8:	f7fa f848 	bl	800016c <strlen>
 80060dc:	0003      	movs	r3, r0
 80060de:	b299      	uxth	r1, r3
 80060e0:	220e      	movs	r2, #14
 80060e2:	18bb      	adds	r3, r7, r2
 80060e4:	18ba      	adds	r2, r7, r2
 80060e6:	8812      	ldrh	r2, [r2, #0]
 80060e8:	188a      	adds	r2, r1, r2
 80060ea:	801a      	strh	r2, [r3, #0]
      if (send) {
 80060ec:	1cfb      	adds	r3, r7, #3
 80060ee:	781b      	ldrb	r3, [r3, #0]
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d019      	beq.n	8006128 <CreateMessage+0xbb0>
        status = ESP_Send((uint8_t*)message, strlen(message));
 80060f4:	4b26      	ldr	r3, [pc, #152]	@ (8006190 <CreateMessage+0xc18>)
 80060f6:	0018      	movs	r0, r3
 80060f8:	f7fa f838 	bl	800016c <strlen>
 80060fc:	0003      	movs	r3, r0
 80060fe:	b29a      	uxth	r2, r3
 8006100:	4b23      	ldr	r3, [pc, #140]	@ (8006190 <CreateMessage+0xc18>)
 8006102:	0011      	movs	r1, r2
 8006104:	0018      	movs	r0, r3
 8006106:	f7fe feab 	bl	8004e60 <ESP_Send>
 800610a:	0003      	movs	r3, r0
 800610c:	001a      	movs	r2, r3
 800610e:	4b21      	ldr	r3, [pc, #132]	@ (8006194 <CreateMessage+0xc1c>)
 8006110:	701a      	strb	r2, [r3, #0]
        retstat &= status;
 8006112:	4b21      	ldr	r3, [pc, #132]	@ (8006198 <CreateMessage+0xc20>)
 8006114:	781b      	ldrb	r3, [r3, #0]
 8006116:	001a      	movs	r2, r3
 8006118:	4b1e      	ldr	r3, [pc, #120]	@ (8006194 <CreateMessage+0xc1c>)
 800611a:	781b      	ldrb	r3, [r3, #0]
 800611c:	4013      	ands	r3, r2
 800611e:	1e5a      	subs	r2, r3, #1
 8006120:	4193      	sbcs	r3, r2
 8006122:	b2da      	uxtb	r2, r3
 8006124:	4b1c      	ldr	r3, [pc, #112]	@ (8006198 <CreateMessage+0xc20>)
 8006126:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  if (IsENS160SensorPresent()) {
 8006128:	f007 f9b8 	bl	800d49c <IsENS160SensorPresent>
 800612c:	1e03      	subs	r3, r0, #0
 800612e:	d100      	bne.n	8006132 <CreateMessage+0xbba>
 8006130:	e0fc      	b.n	800632c <CreateMessage+0xdb4>
    ReadUint8ArrayEEprom(ENSAQIConfigAddr, keybuffer, IdSize);
 8006132:	4b1a      	ldr	r3, [pc, #104]	@ (800619c <CreateMessage+0xc24>)
 8006134:	4825      	ldr	r0, [pc, #148]	@ (80061cc <CreateMessage+0xc54>)
 8006136:	220c      	movs	r2, #12
 8006138:	0019      	movs	r1, r3
 800613a:	f005 ffdd 	bl	800c0f8 <ReadUint8ArrayEEprom>
    if (isKeyValid(keybuffer, "ENS160", "air quality index")) {
 800613e:	4a24      	ldr	r2, [pc, #144]	@ (80061d0 <CreateMessage+0xc58>)
 8006140:	4924      	ldr	r1, [pc, #144]	@ (80061d4 <CreateMessage+0xc5c>)
 8006142:	4b16      	ldr	r3, [pc, #88]	@ (800619c <CreateMessage+0xc24>)
 8006144:	0018      	movs	r0, r3
 8006146:	f7ff f8ef 	bl	8005328 <isKeyValid>
 800614a:	1e03      	subs	r3, r0, #0
 800614c:	d062      	beq.n	8006214 <CreateMessage+0xc9c>
      uint8ArrayToString(Buffer, keybuffer);
 800614e:	4a13      	ldr	r2, [pc, #76]	@ (800619c <CreateMessage+0xc24>)
 8006150:	4b0d      	ldr	r3, [pc, #52]	@ (8006188 <CreateMessage+0xc10>)
 8006152:	0011      	movs	r1, r2
 8006154:	0018      	movs	r0, r3
 8006156:	f7ff f947 	bl	80053e8 <uint8ArrayToString>
#ifdef OPENSENSEMAP
      sprintf(&message[0], ",{\"sensor\": \"%s\", \"value\":%d}", Buffer, MeasVal.AQIndexmax);
 800615a:	4b12      	ldr	r3, [pc, #72]	@ (80061a4 <CreateMessage+0xc2c>)
 800615c:	2255      	movs	r2, #85	@ 0x55
 800615e:	5c9b      	ldrb	r3, [r3, r2]
 8006160:	4a09      	ldr	r2, [pc, #36]	@ (8006188 <CreateMessage+0xc10>)
 8006162:	491d      	ldr	r1, [pc, #116]	@ (80061d8 <CreateMessage+0xc60>)
 8006164:	480a      	ldr	r0, [pc, #40]	@ (8006190 <CreateMessage+0xc18>)
 8006166:	f020 f893 	bl	8026290 <siprintf>
#else
      sprintf(&message[0], ",{\"name\":\"ENS160 AQI\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%d, \"unit\":\"i\"}", uid[2], (char*)nameConfig, Buffer, MeasVal.AQIndexmax);
#endif
      index += strlen(message);
 800616a:	4b09      	ldr	r3, [pc, #36]	@ (8006190 <CreateMessage+0xc18>)
 800616c:	0018      	movs	r0, r3
 800616e:	f7f9 fffd 	bl	800016c <strlen>
 8006172:	0003      	movs	r3, r0
 8006174:	b299      	uxth	r1, r3
 8006176:	220e      	movs	r2, #14
 8006178:	18bb      	adds	r3, r7, r2
 800617a:	18ba      	adds	r2, r7, r2
 800617c:	8812      	ldrh	r2, [r2, #0]
 800617e:	188a      	adds	r2, r1, r2
 8006180:	801a      	strh	r2, [r3, #0]
      if (send) {
 8006182:	1cfb      	adds	r3, r7, #3
 8006184:	781b      	ldrb	r3, [r3, #0]
 8006186:	e029      	b.n	80061dc <CreateMessage+0xc64>
 8006188:	20000840 	.word	0x20000840
 800618c:	0802acb4 	.word	0x0802acb4
 8006190:	200005c4 	.word	0x200005c4
 8006194:	20000859 	.word	0x20000859
 8006198:	20000032 	.word	0x20000032
 800619c:	20000834 	.word	0x20000834
 80061a0:	08080054 	.word	0x08080054
 80061a4:	20000704 	.word	0x20000704
 80061a8:	080800bc 	.word	0x080800bc
 80061ac:	0802adb4 	.word	0x0802adb4
 80061b0:	0802adc4 	.word	0x0802adc4
 80061b4:	08080060 	.word	0x08080060
 80061b8:	080800c8 	.word	0x080800c8
 80061bc:	0802ad74 	.word	0x0802ad74
 80061c0:	0802adc8 	.word	0x0802adc8
 80061c4:	080800d4 	.word	0x080800d4
 80061c8:	0802ada8 	.word	0x0802ada8
 80061cc:	080800ec 	.word	0x080800ec
 80061d0:	0802add0 	.word	0x0802add0
 80061d4:	0802ade4 	.word	0x0802ade4
 80061d8:	0802acd4 	.word	0x0802acd4
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d019      	beq.n	8006214 <CreateMessage+0xc9c>
        status = ESP_Send((uint8_t*)message, strlen(message));
 80061e0:	4b80      	ldr	r3, [pc, #512]	@ (80063e4 <CreateMessage+0xe6c>)
 80061e2:	0018      	movs	r0, r3
 80061e4:	f7f9 ffc2 	bl	800016c <strlen>
 80061e8:	0003      	movs	r3, r0
 80061ea:	b29a      	uxth	r2, r3
 80061ec:	4b7d      	ldr	r3, [pc, #500]	@ (80063e4 <CreateMessage+0xe6c>)
 80061ee:	0011      	movs	r1, r2
 80061f0:	0018      	movs	r0, r3
 80061f2:	f7fe fe35 	bl	8004e60 <ESP_Send>
 80061f6:	0003      	movs	r3, r0
 80061f8:	001a      	movs	r2, r3
 80061fa:	4b7b      	ldr	r3, [pc, #492]	@ (80063e8 <CreateMessage+0xe70>)
 80061fc:	701a      	strb	r2, [r3, #0]
        retstat &= status;
 80061fe:	4b7b      	ldr	r3, [pc, #492]	@ (80063ec <CreateMessage+0xe74>)
 8006200:	781b      	ldrb	r3, [r3, #0]
 8006202:	001a      	movs	r2, r3
 8006204:	4b78      	ldr	r3, [pc, #480]	@ (80063e8 <CreateMessage+0xe70>)
 8006206:	781b      	ldrb	r3, [r3, #0]
 8006208:	4013      	ands	r3, r2
 800620a:	1e5a      	subs	r2, r3, #1
 800620c:	4193      	sbcs	r3, r2
 800620e:	b2da      	uxtb	r2, r3
 8006210:	4b76      	ldr	r3, [pc, #472]	@ (80063ec <CreateMessage+0xe74>)
 8006212:	701a      	strb	r2, [r3, #0]
      }
    }

    ReadUint8ArrayEEprom(ENSTVOCConfigAddr, keybuffer, IdSize);
 8006214:	4b76      	ldr	r3, [pc, #472]	@ (80063f0 <CreateMessage+0xe78>)
 8006216:	4877      	ldr	r0, [pc, #476]	@ (80063f4 <CreateMessage+0xe7c>)
 8006218:	220c      	movs	r2, #12
 800621a:	0019      	movs	r1, r3
 800621c:	f005 ff6c 	bl	800c0f8 <ReadUint8ArrayEEprom>
    if (isKeyValid(keybuffer, "ENS160", "TVOC")) {
 8006220:	4a75      	ldr	r2, [pc, #468]	@ (80063f8 <CreateMessage+0xe80>)
 8006222:	4976      	ldr	r1, [pc, #472]	@ (80063fc <CreateMessage+0xe84>)
 8006224:	4b72      	ldr	r3, [pc, #456]	@ (80063f0 <CreateMessage+0xe78>)
 8006226:	0018      	movs	r0, r3
 8006228:	f7ff f87e 	bl	8005328 <isKeyValid>
 800622c:	1e03      	subs	r3, r0, #0
 800622e:	d037      	beq.n	80062a0 <CreateMessage+0xd28>
      uint8ArrayToString(Buffer, keybuffer);
 8006230:	4a6f      	ldr	r2, [pc, #444]	@ (80063f0 <CreateMessage+0xe78>)
 8006232:	4b73      	ldr	r3, [pc, #460]	@ (8006400 <CreateMessage+0xe88>)
 8006234:	0011      	movs	r1, r2
 8006236:	0018      	movs	r0, r3
 8006238:	f7ff f8d6 	bl	80053e8 <uint8ArrayToString>
#ifdef OPENSENSEMAP
      sprintf(&message[0], ",{\"sensor\": \"%s\", \"value\":%d}", Buffer, MeasVal.TVOCIndex);
 800623c:	4b71      	ldr	r3, [pc, #452]	@ (8006404 <CreateMessage+0xe8c>)
 800623e:	224a      	movs	r2, #74	@ 0x4a
 8006240:	5a9b      	ldrh	r3, [r3, r2]
 8006242:	4a6f      	ldr	r2, [pc, #444]	@ (8006400 <CreateMessage+0xe88>)
 8006244:	4970      	ldr	r1, [pc, #448]	@ (8006408 <CreateMessage+0xe90>)
 8006246:	4867      	ldr	r0, [pc, #412]	@ (80063e4 <CreateMessage+0xe6c>)
 8006248:	f020 f822 	bl	8026290 <siprintf>
#else
      sprintf(&message[0], ",{\"name\":\"ENS160 TVOC\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%d, \"unit\":\"ppb\"}", uid[2], (char*)nameConfig, Buffer, MeasVal.TVOCIndex);
#endif
      index += strlen(message);
 800624c:	4b65      	ldr	r3, [pc, #404]	@ (80063e4 <CreateMessage+0xe6c>)
 800624e:	0018      	movs	r0, r3
 8006250:	f7f9 ff8c 	bl	800016c <strlen>
 8006254:	0003      	movs	r3, r0
 8006256:	b299      	uxth	r1, r3
 8006258:	220e      	movs	r2, #14
 800625a:	18bb      	adds	r3, r7, r2
 800625c:	18ba      	adds	r2, r7, r2
 800625e:	8812      	ldrh	r2, [r2, #0]
 8006260:	188a      	adds	r2, r1, r2
 8006262:	801a      	strh	r2, [r3, #0]
      if (send) {
 8006264:	1cfb      	adds	r3, r7, #3
 8006266:	781b      	ldrb	r3, [r3, #0]
 8006268:	2b00      	cmp	r3, #0
 800626a:	d019      	beq.n	80062a0 <CreateMessage+0xd28>
        status = ESP_Send((uint8_t*)message, strlen(message));
 800626c:	4b5d      	ldr	r3, [pc, #372]	@ (80063e4 <CreateMessage+0xe6c>)
 800626e:	0018      	movs	r0, r3
 8006270:	f7f9 ff7c 	bl	800016c <strlen>
 8006274:	0003      	movs	r3, r0
 8006276:	b29a      	uxth	r2, r3
 8006278:	4b5a      	ldr	r3, [pc, #360]	@ (80063e4 <CreateMessage+0xe6c>)
 800627a:	0011      	movs	r1, r2
 800627c:	0018      	movs	r0, r3
 800627e:	f7fe fdef 	bl	8004e60 <ESP_Send>
 8006282:	0003      	movs	r3, r0
 8006284:	001a      	movs	r2, r3
 8006286:	4b58      	ldr	r3, [pc, #352]	@ (80063e8 <CreateMessage+0xe70>)
 8006288:	701a      	strb	r2, [r3, #0]
        retstat &= status;
 800628a:	4b58      	ldr	r3, [pc, #352]	@ (80063ec <CreateMessage+0xe74>)
 800628c:	781b      	ldrb	r3, [r3, #0]
 800628e:	001a      	movs	r2, r3
 8006290:	4b55      	ldr	r3, [pc, #340]	@ (80063e8 <CreateMessage+0xe70>)
 8006292:	781b      	ldrb	r3, [r3, #0]
 8006294:	4013      	ands	r3, r2
 8006296:	1e5a      	subs	r2, r3, #1
 8006298:	4193      	sbcs	r3, r2
 800629a:	b2da      	uxtb	r2, r3
 800629c:	4b53      	ldr	r3, [pc, #332]	@ (80063ec <CreateMessage+0xe74>)
 800629e:	701a      	strb	r2, [r3, #0]
      }
    }

    ReadUint8ArrayEEprom(ENSeCO2ConfigAddr, keybuffer, IdSize);
 80062a0:	4b53      	ldr	r3, [pc, #332]	@ (80063f0 <CreateMessage+0xe78>)
 80062a2:	485a      	ldr	r0, [pc, #360]	@ (800640c <CreateMessage+0xe94>)
 80062a4:	220c      	movs	r2, #12
 80062a6:	0019      	movs	r1, r3
 80062a8:	f005 ff26 	bl	800c0f8 <ReadUint8ArrayEEprom>
    if (isKeyValid(keybuffer, "ENS160", "eCO2")) {
 80062ac:	4a58      	ldr	r2, [pc, #352]	@ (8006410 <CreateMessage+0xe98>)
 80062ae:	4953      	ldr	r1, [pc, #332]	@ (80063fc <CreateMessage+0xe84>)
 80062b0:	4b4f      	ldr	r3, [pc, #316]	@ (80063f0 <CreateMessage+0xe78>)
 80062b2:	0018      	movs	r0, r3
 80062b4:	f7ff f838 	bl	8005328 <isKeyValid>
 80062b8:	1e03      	subs	r3, r0, #0
 80062ba:	d037      	beq.n	800632c <CreateMessage+0xdb4>
      uint8ArrayToString(Buffer, keybuffer);
 80062bc:	4a4c      	ldr	r2, [pc, #304]	@ (80063f0 <CreateMessage+0xe78>)
 80062be:	4b50      	ldr	r3, [pc, #320]	@ (8006400 <CreateMessage+0xe88>)
 80062c0:	0011      	movs	r1, r2
 80062c2:	0018      	movs	r0, r3
 80062c4:	f7ff f890 	bl	80053e8 <uint8ArrayToString>
#ifdef OPENSENSEMAP
      sprintf(&message[0], ",{\"sensor\": \"%s\", \"value\":%d}", Buffer, MeasVal.eCO2Indexmax);
 80062c8:	4b4e      	ldr	r3, [pc, #312]	@ (8006404 <CreateMessage+0xe8c>)
 80062ca:	2252      	movs	r2, #82	@ 0x52
 80062cc:	5a9b      	ldrh	r3, [r3, r2]
 80062ce:	4a4c      	ldr	r2, [pc, #304]	@ (8006400 <CreateMessage+0xe88>)
 80062d0:	494d      	ldr	r1, [pc, #308]	@ (8006408 <CreateMessage+0xe90>)
 80062d2:	4844      	ldr	r0, [pc, #272]	@ (80063e4 <CreateMessage+0xe6c>)
 80062d4:	f01f ffdc 	bl	8026290 <siprintf>
#else
      sprintf(&message[0], ",{\"name\":\"ENS160 eCO2\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%d, \"unit\":\"ppm\"}", uid[2], (char*)nameConfig, Buffer, MeasVal.eCO2Indexmax);
#endif
      index += strlen(message);
 80062d8:	4b42      	ldr	r3, [pc, #264]	@ (80063e4 <CreateMessage+0xe6c>)
 80062da:	0018      	movs	r0, r3
 80062dc:	f7f9 ff46 	bl	800016c <strlen>
 80062e0:	0003      	movs	r3, r0
 80062e2:	b299      	uxth	r1, r3
 80062e4:	220e      	movs	r2, #14
 80062e6:	18bb      	adds	r3, r7, r2
 80062e8:	18ba      	adds	r2, r7, r2
 80062ea:	8812      	ldrh	r2, [r2, #0]
 80062ec:	188a      	adds	r2, r1, r2
 80062ee:	801a      	strh	r2, [r3, #0]
      if (send) {
 80062f0:	1cfb      	adds	r3, r7, #3
 80062f2:	781b      	ldrb	r3, [r3, #0]
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d019      	beq.n	800632c <CreateMessage+0xdb4>
        status = ESP_Send((uint8_t*)message, strlen(message));
 80062f8:	4b3a      	ldr	r3, [pc, #232]	@ (80063e4 <CreateMessage+0xe6c>)
 80062fa:	0018      	movs	r0, r3
 80062fc:	f7f9 ff36 	bl	800016c <strlen>
 8006300:	0003      	movs	r3, r0
 8006302:	b29a      	uxth	r2, r3
 8006304:	4b37      	ldr	r3, [pc, #220]	@ (80063e4 <CreateMessage+0xe6c>)
 8006306:	0011      	movs	r1, r2
 8006308:	0018      	movs	r0, r3
 800630a:	f7fe fda9 	bl	8004e60 <ESP_Send>
 800630e:	0003      	movs	r3, r0
 8006310:	001a      	movs	r2, r3
 8006312:	4b35      	ldr	r3, [pc, #212]	@ (80063e8 <CreateMessage+0xe70>)
 8006314:	701a      	strb	r2, [r3, #0]
        retstat &= status;
 8006316:	4b35      	ldr	r3, [pc, #212]	@ (80063ec <CreateMessage+0xe74>)
 8006318:	781b      	ldrb	r3, [r3, #0]
 800631a:	001a      	movs	r2, r3
 800631c:	4b32      	ldr	r3, [pc, #200]	@ (80063e8 <CreateMessage+0xe70>)
 800631e:	781b      	ldrb	r3, [r3, #0]
 8006320:	4013      	ands	r3, r2
 8006322:	1e5a      	subs	r2, r3, #1
 8006324:	4193      	sbcs	r3, r2
 8006326:	b2da      	uxtb	r2, r3
 8006328:	4b30      	ldr	r3, [pc, #192]	@ (80063ec <CreateMessage+0xe74>)
 800632a:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  ReadUint8ArrayEEprom(BatVoltConfigAddr, keybuffer, IdSize);
 800632c:	4b30      	ldr	r3, [pc, #192]	@ (80063f0 <CreateMessage+0xe78>)
 800632e:	4839      	ldr	r0, [pc, #228]	@ (8006414 <CreateMessage+0xe9c>)
 8006330:	220c      	movs	r2, #12
 8006332:	0019      	movs	r1, r3
 8006334:	f005 fee0 	bl	800c0f8 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, keybuffer);
 8006338:	4a2d      	ldr	r2, [pc, #180]	@ (80063f0 <CreateMessage+0xe78>)
 800633a:	4b31      	ldr	r3, [pc, #196]	@ (8006400 <CreateMessage+0xe88>)
 800633c:	0011      	movs	r1, r2
 800633e:	0018      	movs	r0, r3
 8006340:	f7ff f852 	bl	80053e8 <uint8ArrayToString>
#ifdef OPENSENSEMAP
  sprintf(&message[0], ",{\"sensor\": \"%s\", \"value\":%.2f}", Buffer, batteryCharge);
 8006344:	4b34      	ldr	r3, [pc, #208]	@ (8006418 <CreateMessage+0xea0>)
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	1c18      	adds	r0, r3, #0
 800634a:	f7fd faa3 	bl	8003894 <__aeabi_f2d>
 800634e:	0002      	movs	r2, r0
 8006350:	000b      	movs	r3, r1
 8006352:	4c2b      	ldr	r4, [pc, #172]	@ (8006400 <CreateMessage+0xe88>)
 8006354:	4931      	ldr	r1, [pc, #196]	@ (800641c <CreateMessage+0xea4>)
 8006356:	4823      	ldr	r0, [pc, #140]	@ (80063e4 <CreateMessage+0xe6c>)
 8006358:	9200      	str	r2, [sp, #0]
 800635a:	9301      	str	r3, [sp, #4]
 800635c:	0022      	movs	r2, r4
 800635e:	f01f ff97 	bl	8026290 <siprintf>
    arridx += strlen(message);
    index +=arridx;

    sprintf(&message[arridx], "{\"NOX\":%d}", MeasVal.airNOxmax);
#endif
  sprintf(&message[strlen(message)], "]");
 8006362:	4b20      	ldr	r3, [pc, #128]	@ (80063e4 <CreateMessage+0xe6c>)
 8006364:	0018      	movs	r0, r3
 8006366:	f7f9 ff01 	bl	800016c <strlen>
 800636a:	0002      	movs	r2, r0
 800636c:	4b1d      	ldr	r3, [pc, #116]	@ (80063e4 <CreateMessage+0xe6c>)
 800636e:	18d3      	adds	r3, r2, r3
 8006370:	4a2b      	ldr	r2, [pc, #172]	@ (8006420 <CreateMessage+0xea8>)
 8006372:	0011      	movs	r1, r2
 8006374:	0018      	movs	r0, r3
 8006376:	f01f ff8b 	bl	8026290 <siprintf>
  index += strlen(message);
 800637a:	4b1a      	ldr	r3, [pc, #104]	@ (80063e4 <CreateMessage+0xe6c>)
 800637c:	0018      	movs	r0, r3
 800637e:	f7f9 fef5 	bl	800016c <strlen>
 8006382:	0003      	movs	r3, r0
 8006384:	b299      	uxth	r1, r3
 8006386:	220e      	movs	r2, #14
 8006388:	18bb      	adds	r3, r7, r2
 800638a:	18ba      	adds	r2, r7, r2
 800638c:	8812      	ldrh	r2, [r2, #0]
 800638e:	188a      	adds	r2, r1, r2
 8006390:	801a      	strh	r2, [r3, #0]
  if (send) {
 8006392:	1cfb      	adds	r3, r7, #3
 8006394:	781b      	ldrb	r3, [r3, #0]
 8006396:	2b00      	cmp	r3, #0
 8006398:	d019      	beq.n	80063ce <CreateMessage+0xe56>
    status = ESP_Send((uint8_t*)message, strlen(message));
 800639a:	4b12      	ldr	r3, [pc, #72]	@ (80063e4 <CreateMessage+0xe6c>)
 800639c:	0018      	movs	r0, r3
 800639e:	f7f9 fee5 	bl	800016c <strlen>
 80063a2:	0003      	movs	r3, r0
 80063a4:	b29a      	uxth	r2, r3
 80063a6:	4b0f      	ldr	r3, [pc, #60]	@ (80063e4 <CreateMessage+0xe6c>)
 80063a8:	0011      	movs	r1, r2
 80063aa:	0018      	movs	r0, r3
 80063ac:	f7fe fd58 	bl	8004e60 <ESP_Send>
 80063b0:	0003      	movs	r3, r0
 80063b2:	001a      	movs	r2, r3
 80063b4:	4b0c      	ldr	r3, [pc, #48]	@ (80063e8 <CreateMessage+0xe70>)
 80063b6:	701a      	strb	r2, [r3, #0]
    retstat &= status;
 80063b8:	4b0c      	ldr	r3, [pc, #48]	@ (80063ec <CreateMessage+0xe74>)
 80063ba:	781b      	ldrb	r3, [r3, #0]
 80063bc:	001a      	movs	r2, r3
 80063be:	4b0a      	ldr	r3, [pc, #40]	@ (80063e8 <CreateMessage+0xe70>)
 80063c0:	781b      	ldrb	r3, [r3, #0]
 80063c2:	4013      	ands	r3, r2
 80063c4:	1e5a      	subs	r2, r3, #1
 80063c6:	4193      	sbcs	r3, r2
 80063c8:	b2da      	uxtb	r2, r3
 80063ca:	4b08      	ldr	r3, [pc, #32]	@ (80063ec <CreateMessage+0xe74>)
 80063cc:	701a      	strb	r2, [r3, #0]
  }
  *txstat = retstat;
 80063ce:	4b07      	ldr	r3, [pc, #28]	@ (80063ec <CreateMessage+0xe74>)
 80063d0:	781a      	ldrb	r2, [r3, #0]
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	701a      	strb	r2, [r3, #0]
  return index;
 80063d6:	230e      	movs	r3, #14
 80063d8:	18fb      	adds	r3, r7, r3
 80063da:	881b      	ldrh	r3, [r3, #0]
}
 80063dc:	0018      	movs	r0, r3
 80063de:	46bd      	mov	sp, r7
 80063e0:	b004      	add	sp, #16
 80063e2:	bdb0      	pop	{r4, r5, r7, pc}
 80063e4:	200005c4 	.word	0x200005c4
 80063e8:	20000859 	.word	0x20000859
 80063ec:	20000032 	.word	0x20000032
 80063f0:	20000834 	.word	0x20000834
 80063f4:	080800f8 	.word	0x080800f8
 80063f8:	0802adec 	.word	0x0802adec
 80063fc:	0802ade4 	.word	0x0802ade4
 8006400:	20000840 	.word	0x20000840
 8006404:	20000704 	.word	0x20000704
 8006408:	0802acd4 	.word	0x0802acd4
 800640c:	08080104 	.word	0x08080104
 8006410:	0802adf4 	.word	0x0802adf4
 8006414:	0808006c 	.word	0x0808006c
 8006418:	2000215c 	.word	0x2000215c
 800641c:	0802acb4 	.word	0x0802acb4
 8006420:	0802adfc 	.word	0x0802adfc

08006424 <StartProg>:

void StartProg(){
 8006424:	b580      	push	{r7, lr}
 8006426:	af00      	add	r7, sp, #0
  HAL_Delay(100);
 8006428:	2064      	movs	r0, #100	@ 0x64
 800642a:	f00e fa89 	bl	8014940 <HAL_Delay>
  HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_RESET);
 800642e:	4b15      	ldr	r3, [pc, #84]	@ (8006484 <StartProg+0x60>)
 8006430:	2200      	movs	r2, #0
 8006432:	2101      	movs	r1, #1
 8006434:	0018      	movs	r0, r3
 8006436:	f00f fcec 	bl	8015e12 <HAL_GPIO_WritePin>
  HAL_Delay(100);
 800643a:	2064      	movs	r0, #100	@ 0x64
 800643c:	f00e fa80 	bl	8014940 <HAL_Delay>
  HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, GPIO_PIN_RESET);
 8006440:	4b10      	ldr	r3, [pc, #64]	@ (8006484 <StartProg+0x60>)
 8006442:	2200      	movs	r2, #0
 8006444:	2102      	movs	r1, #2
 8006446:	0018      	movs	r0, r3
 8006448:	f00f fce3 	bl	8015e12 <HAL_GPIO_WritePin>
  HAL_Delay(500);
 800644c:	23fa      	movs	r3, #250	@ 0xfa
 800644e:	005b      	lsls	r3, r3, #1
 8006450:	0018      	movs	r0, r3
 8006452:	f00e fa75 	bl	8014940 <HAL_Delay>
  HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_SET);
 8006456:	4b0b      	ldr	r3, [pc, #44]	@ (8006484 <StartProg+0x60>)
 8006458:	2201      	movs	r2, #1
 800645a:	2101      	movs	r1, #1
 800645c:	0018      	movs	r0, r3
 800645e:	f00f fcd8 	bl	8015e12 <HAL_GPIO_WritePin>
  HAL_Delay(500);
 8006462:	23fa      	movs	r3, #250	@ 0xfa
 8006464:	005b      	lsls	r3, r3, #1
 8006466:	0018      	movs	r0, r3
 8006468:	f00e fa6a 	bl	8014940 <HAL_Delay>
  HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, GPIO_PIN_SET);
 800646c:	4b05      	ldr	r3, [pc, #20]	@ (8006484 <StartProg+0x60>)
 800646e:	2201      	movs	r2, #1
 8006470:	2102      	movs	r1, #2
 8006472:	0018      	movs	r0, r3
 8006474:	f00f fccd 	bl	8015e12 <HAL_GPIO_WritePin>
  HAL_Delay(40);
 8006478:	2028      	movs	r0, #40	@ 0x28
 800647a:	f00e fa61 	bl	8014940 <HAL_Delay>
}
 800647e:	46c0      	nop			@ (mov r8, r8)
 8006480:	46bd      	mov	sp, r7
 8006482:	bd80      	pop	{r7, pc}
 8006484:	50001c00 	.word	0x50001c00

08006488 <ParseBuffer>:
 uint8_t ParseBuffer(uint8_t* buffer, uint16_t len, uint8_t expectation) {
 8006488:	b5f0      	push	{r4, r5, r6, r7, lr}
 800648a:	b0d9      	sub	sp, #356	@ 0x164
 800648c:	af00      	add	r7, sp, #0
 800648e:	6078      	str	r0, [r7, #4]
 8006490:	0008      	movs	r0, r1
 8006492:	0011      	movs	r1, r2
 8006494:	4bab      	ldr	r3, [pc, #684]	@ (8006744 <ParseBuffer+0x2bc>)
 8006496:	24b0      	movs	r4, #176	@ 0xb0
 8006498:	0064      	lsls	r4, r4, #1
 800649a:	191b      	adds	r3, r3, r4
 800649c:	19db      	adds	r3, r3, r7
 800649e:	1c02      	adds	r2, r0, #0
 80064a0:	801a      	strh	r2, [r3, #0]
 80064a2:	4ba9      	ldr	r3, [pc, #676]	@ (8006748 <ParseBuffer+0x2c0>)
 80064a4:	191b      	adds	r3, r3, r4
 80064a6:	19db      	adds	r3, r3, r7
 80064a8:	1c0a      	adds	r2, r1, #0
 80064aa:	701a      	strb	r2, [r3, #0]
  char tempBuf[256];
  memset(tempBuf, '\0', 256);
 80064ac:	2380      	movs	r3, #128	@ 0x80
 80064ae:	005a      	lsls	r2, r3, #1
 80064b0:	2348      	movs	r3, #72	@ 0x48
 80064b2:	18fb      	adds	r3, r7, r3
 80064b4:	2100      	movs	r1, #0
 80064b6:	0018      	movs	r0, r3
 80064b8:	f020 f832 	bl	8026520 <memset>
  char status = RECEIVE_STATUS_INCOMPLETE;
 80064bc:	2360      	movs	r3, #96	@ 0x60
 80064be:	33ff      	adds	r3, #255	@ 0xff
 80064c0:	18fb      	adds	r3, r7, r3
 80064c2:	2203      	movs	r2, #3
 80064c4:	701a      	strb	r2, [r3, #0]
  for(uint16_t i=0; i<len; i++){
 80064c6:	23ae      	movs	r3, #174	@ 0xae
 80064c8:	005b      	lsls	r3, r3, #1
 80064ca:	18fb      	adds	r3, r7, r3
 80064cc:	2200      	movs	r2, #0
 80064ce:	801a      	strh	r2, [r3, #0]
 80064d0:	e013      	b.n	80064fa <ParseBuffer+0x72>
    tempBuf[i] = (char)buffer[i];
 80064d2:	20ae      	movs	r0, #174	@ 0xae
 80064d4:	0040      	lsls	r0, r0, #1
 80064d6:	183b      	adds	r3, r7, r0
 80064d8:	881b      	ldrh	r3, [r3, #0]
 80064da:	687a      	ldr	r2, [r7, #4]
 80064dc:	18d2      	adds	r2, r2, r3
 80064de:	183b      	adds	r3, r7, r0
 80064e0:	881b      	ldrh	r3, [r3, #0]
 80064e2:	7811      	ldrb	r1, [r2, #0]
 80064e4:	4a99      	ldr	r2, [pc, #612]	@ (800674c <ParseBuffer+0x2c4>)
 80064e6:	24b0      	movs	r4, #176	@ 0xb0
 80064e8:	0064      	lsls	r4, r4, #1
 80064ea:	1912      	adds	r2, r2, r4
 80064ec:	19d2      	adds	r2, r2, r7
 80064ee:	54d1      	strb	r1, [r2, r3]
  for(uint16_t i=0; i<len; i++){
 80064f0:	183b      	adds	r3, r7, r0
 80064f2:	881a      	ldrh	r2, [r3, #0]
 80064f4:	183b      	adds	r3, r7, r0
 80064f6:	3201      	adds	r2, #1
 80064f8:	801a      	strh	r2, [r3, #0]
 80064fa:	23ae      	movs	r3, #174	@ 0xae
 80064fc:	005b      	lsls	r3, r3, #1
 80064fe:	18fa      	adds	r2, r7, r3
 8006500:	4b90      	ldr	r3, [pc, #576]	@ (8006744 <ParseBuffer+0x2bc>)
 8006502:	21b0      	movs	r1, #176	@ 0xb0
 8006504:	0049      	lsls	r1, r1, #1
 8006506:	185b      	adds	r3, r3, r1
 8006508:	19db      	adds	r3, r3, r7
 800650a:	8812      	ldrh	r2, [r2, #0]
 800650c:	881b      	ldrh	r3, [r3, #0]
 800650e:	429a      	cmp	r2, r3
 8006510:	d3df      	bcc.n	80064d2 <ParseBuffer+0x4a>
  }
  tempBuf[len] = '\0';
 8006512:	4b8c      	ldr	r3, [pc, #560]	@ (8006744 <ParseBuffer+0x2bc>)
 8006514:	185b      	adds	r3, r3, r1
 8006516:	19db      	adds	r3, r3, r7
 8006518:	881b      	ldrh	r3, [r3, #0]
 800651a:	4a8c      	ldr	r2, [pc, #560]	@ (800674c <ParseBuffer+0x2c4>)
 800651c:	1852      	adds	r2, r2, r1
 800651e:	19d2      	adds	r2, r2, r7
 8006520:	2100      	movs	r1, #0
 8006522:	54d1      	strb	r1, [r2, r3]
  if (GetVerboseLevel() == VERBOSE_ALL) {
 8006524:	f00d fd14 	bl	8013f50 <GetVerboseLevel>
 8006528:	0003      	movs	r3, r0
 800652a:	2b03      	cmp	r3, #3
 800652c:	d115      	bne.n	800655a <ParseBuffer+0xd2>
#ifdef LONGMESSAGES
  if (usblog && Check_USB_PowerOn()) {
 800652e:	4b88      	ldr	r3, [pc, #544]	@ (8006750 <ParseBuffer+0x2c8>)
 8006530:	781b      	ldrb	r3, [r3, #0]
 8006532:	2b00      	cmp	r3, #0
 8006534:	d00a      	beq.n	800654c <ParseBuffer+0xc4>
 8006536:	f003 fb6f 	bl	8009c18 <Check_USB_PowerOn>
 800653a:	1e03      	subs	r3, r0, #0
 800653c:	d006      	beq.n	800654c <ParseBuffer+0xc4>
    printf_USB("%s\r\n", tempBuf);
 800653e:	2348      	movs	r3, #72	@ 0x48
 8006540:	18fa      	adds	r2, r7, r3
 8006542:	4b84      	ldr	r3, [pc, #528]	@ (8006754 <ParseBuffer+0x2cc>)
 8006544:	0011      	movs	r1, r2
 8006546:	0018      	movs	r0, r3
 8006548:	f002 faac 	bl	8008aa4 <printf_USB>
  }
  printf("Receive ParseBuffer: %s\r\n", tempBuf );
 800654c:	2348      	movs	r3, #72	@ 0x48
 800654e:	18fa      	adds	r2, r7, r3
 8006550:	4b81      	ldr	r3, [pc, #516]	@ (8006758 <ParseBuffer+0x2d0>)
 8006552:	0011      	movs	r1, r2
 8006554:	0018      	movs	r0, r3
 8006556:	f01f fe2b 	bl	80261b0 <iprintf>
#else
  Debug("Receive ParseBuffer: %s", tempBuf );
#endif
  }
  char * ParsePoint = 0;
 800655a:	2300      	movs	r3, #0
 800655c:	26ac      	movs	r6, #172	@ 0xac
 800655e:	0076      	lsls	r6, r6, #1
 8006560:	19ba      	adds	r2, r7, r6
 8006562:	6013      	str	r3, [r2, #0]
  const char OK[] = AT_RESPONSE_OK;
 8006564:	4b7d      	ldr	r3, [pc, #500]	@ (800675c <ParseBuffer+0x2d4>)
 8006566:	25b0      	movs	r5, #176	@ 0xb0
 8006568:	006d      	lsls	r5, r5, #1
 800656a:	195b      	adds	r3, r3, r5
 800656c:	19db      	adds	r3, r3, r7
 800656e:	4a7c      	ldr	r2, [pc, #496]	@ (8006760 <ParseBuffer+0x2d8>)
 8006570:	8811      	ldrh	r1, [r2, #0]
 8006572:	8019      	strh	r1, [r3, #0]
 8006574:	7892      	ldrb	r2, [r2, #2]
 8006576:	709a      	strb	r2, [r3, #2]
  const char ERROR[] = AT_RESPONSE_ERROR;
 8006578:	4b7a      	ldr	r3, [pc, #488]	@ (8006764 <ParseBuffer+0x2dc>)
 800657a:	195b      	adds	r3, r3, r5
 800657c:	19db      	adds	r3, r3, r7
 800657e:	4a7a      	ldr	r2, [pc, #488]	@ (8006768 <ParseBuffer+0x2e0>)
 8006580:	6811      	ldr	r1, [r2, #0]
 8006582:	6019      	str	r1, [r3, #0]
 8006584:	8892      	ldrh	r2, [r2, #4]
 8006586:	809a      	strh	r2, [r3, #4]
  const char FAIL[] = AT_RESPONSE_FAIL;
 8006588:	4b78      	ldr	r3, [pc, #480]	@ (800676c <ParseBuffer+0x2e4>)
 800658a:	195b      	adds	r3, r3, r5
 800658c:	19db      	adds	r3, r3, r7
 800658e:	4a78      	ldr	r2, [pc, #480]	@ (8006770 <ParseBuffer+0x2e8>)
 8006590:	601a      	str	r2, [r3, #0]
 8006592:	2200      	movs	r2, #0
 8006594:	711a      	strb	r2, [r3, #4]
  const char ready[] = AT_RESPONSE_READY;
 8006596:	4b77      	ldr	r3, [pc, #476]	@ (8006774 <ParseBuffer+0x2ec>)
 8006598:	195b      	adds	r3, r3, r5
 800659a:	19db      	adds	r3, r3, r7
 800659c:	4a76      	ldr	r2, [pc, #472]	@ (8006778 <ParseBuffer+0x2f0>)
 800659e:	6811      	ldr	r1, [r2, #0]
 80065a0:	6019      	str	r1, [r3, #0]
 80065a2:	8892      	ldrh	r2, [r2, #4]
 80065a4:	809a      	strh	r2, [r3, #4]
  const char start[] = AT_RESPONSE_START;
 80065a6:	4b75      	ldr	r3, [pc, #468]	@ (800677c <ParseBuffer+0x2f4>)
 80065a8:	195b      	adds	r3, r3, r5
 80065aa:	19db      	adds	r3, r3, r7
 80065ac:	223e      	movs	r2, #62	@ 0x3e
 80065ae:	801a      	strh	r2, [r3, #0]
  const char WIFI[] = AT_RESPONSE_WIFI;
 80065b0:	4b73      	ldr	r3, [pc, #460]	@ (8006780 <ParseBuffer+0x2f8>)
 80065b2:	195b      	adds	r3, r3, r5
 80065b4:	19db      	adds	r3, r3, r7
 80065b6:	4a73      	ldr	r2, [pc, #460]	@ (8006784 <ParseBuffer+0x2fc>)
 80065b8:	ca13      	ldmia	r2!, {r0, r1, r4}
 80065ba:	c313      	stmia	r3!, {r0, r1, r4}
 80065bc:	8811      	ldrh	r1, [r2, #0]
 80065be:	8019      	strh	r1, [r3, #0]
 80065c0:	7892      	ldrb	r2, [r2, #2]
 80065c2:	709a      	strb	r2, [r3, #2]
  const char TIME[] = AT_RESPONSE_TIME_UPDATED;
 80065c4:	4b70      	ldr	r3, [pc, #448]	@ (8006788 <ParseBuffer+0x300>)
 80065c6:	195b      	adds	r3, r3, r5
 80065c8:	19db      	adds	r3, r3, r7
 80065ca:	4a70      	ldr	r2, [pc, #448]	@ (800678c <ParseBuffer+0x304>)
 80065cc:	ca13      	ldmia	r2!, {r0, r1, r4}
 80065ce:	c313      	stmia	r3!, {r0, r1, r4}
 80065d0:	8812      	ldrh	r2, [r2, #0]
 80065d2:	801a      	strh	r2, [r3, #0]
  if(expectation == RECEIVE_EXPECTATION_OK){
 80065d4:	4b5c      	ldr	r3, [pc, #368]	@ (8006748 <ParseBuffer+0x2c0>)
 80065d6:	195b      	adds	r3, r3, r5
 80065d8:	19db      	adds	r3, r3, r7
 80065da:	781b      	ldrb	r3, [r3, #0]
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d10a      	bne.n	80065f6 <ParseBuffer+0x16e>
    ParsePoint = strstr(tempBuf, OK);
 80065e0:	2344      	movs	r3, #68	@ 0x44
 80065e2:	18fa      	adds	r2, r7, r3
 80065e4:	2348      	movs	r3, #72	@ 0x48
 80065e6:	18fb      	adds	r3, r7, r3
 80065e8:	0011      	movs	r1, r2
 80065ea:	0018      	movs	r0, r3
 80065ec:	f01f ffd3 	bl	8026596 <strstr>
 80065f0:	0003      	movs	r3, r0
 80065f2:	19ba      	adds	r2, r7, r6
 80065f4:	6013      	str	r3, [r2, #0]
  }
  if(expectation == RECEIVE_EXPECTATION_READY){
 80065f6:	4b54      	ldr	r3, [pc, #336]	@ (8006748 <ParseBuffer+0x2c0>)
 80065f8:	22b0      	movs	r2, #176	@ 0xb0
 80065fa:	0052      	lsls	r2, r2, #1
 80065fc:	189b      	adds	r3, r3, r2
 80065fe:	19db      	adds	r3, r3, r7
 8006600:	781b      	ldrb	r3, [r3, #0]
 8006602:	2b01      	cmp	r3, #1
 8006604:	d10c      	bne.n	8006620 <ParseBuffer+0x198>
    ParsePoint = strstr(tempBuf, ready);
 8006606:	232c      	movs	r3, #44	@ 0x2c
 8006608:	18fa      	adds	r2, r7, r3
 800660a:	2348      	movs	r3, #72	@ 0x48
 800660c:	18fb      	adds	r3, r7, r3
 800660e:	0011      	movs	r1, r2
 8006610:	0018      	movs	r0, r3
 8006612:	f01f ffc0 	bl	8026596 <strstr>
 8006616:	0003      	movs	r3, r0
 8006618:	22ac      	movs	r2, #172	@ 0xac
 800661a:	0052      	lsls	r2, r2, #1
 800661c:	18ba      	adds	r2, r7, r2
 800661e:	6013      	str	r3, [r2, #0]
  }
  if(expectation == RECEIVE_EXPECTATION_START){
 8006620:	4b49      	ldr	r3, [pc, #292]	@ (8006748 <ParseBuffer+0x2c0>)
 8006622:	22b0      	movs	r2, #176	@ 0xb0
 8006624:	0052      	lsls	r2, r2, #1
 8006626:	189b      	adds	r3, r3, r2
 8006628:	19db      	adds	r3, r3, r7
 800662a:	781b      	ldrb	r3, [r3, #0]
 800662c:	2b02      	cmp	r3, #2
 800662e:	d10c      	bne.n	800664a <ParseBuffer+0x1c2>
    ParsePoint = strstr(tempBuf, start);
 8006630:	2328      	movs	r3, #40	@ 0x28
 8006632:	18fa      	adds	r2, r7, r3
 8006634:	2348      	movs	r3, #72	@ 0x48
 8006636:	18fb      	adds	r3, r7, r3
 8006638:	0011      	movs	r1, r2
 800663a:	0018      	movs	r0, r3
 800663c:	f01f ffab 	bl	8026596 <strstr>
 8006640:	0003      	movs	r3, r0
 8006642:	22ac      	movs	r2, #172	@ 0xac
 8006644:	0052      	lsls	r2, r2, #1
 8006646:	18ba      	adds	r2, r7, r2
 8006648:	6013      	str	r3, [r2, #0]
  }
  if(expectation == RECEIVE_EXPECTATION_TIME){
 800664a:	4b3f      	ldr	r3, [pc, #252]	@ (8006748 <ParseBuffer+0x2c0>)
 800664c:	22b0      	movs	r2, #176	@ 0xb0
 800664e:	0052      	lsls	r2, r2, #1
 8006650:	189b      	adds	r3, r3, r2
 8006652:	19db      	adds	r3, r3, r7
 8006654:	781b      	ldrb	r3, [r3, #0]
 8006656:	2b05      	cmp	r3, #5
 8006658:	d10c      	bne.n	8006674 <ParseBuffer+0x1ec>
    ParsePoint = strstr(tempBuf, TIME);
 800665a:	2308      	movs	r3, #8
 800665c:	18fa      	adds	r2, r7, r3
 800665e:	2348      	movs	r3, #72	@ 0x48
 8006660:	18fb      	adds	r3, r7, r3
 8006662:	0011      	movs	r1, r2
 8006664:	0018      	movs	r0, r3
 8006666:	f01f ff96 	bl	8026596 <strstr>
 800666a:	0003      	movs	r3, r0
 800666c:	22ac      	movs	r2, #172	@ 0xac
 800666e:	0052      	lsls	r2, r2, #1
 8006670:	18ba      	adds	r2, r7, r2
 8006672:	6013      	str	r3, [r2, #0]
  }
  char *ParsePoint2 = strstr(tempBuf, ERROR);
 8006674:	233c      	movs	r3, #60	@ 0x3c
 8006676:	18fa      	adds	r2, r7, r3
 8006678:	2448      	movs	r4, #72	@ 0x48
 800667a:	193b      	adds	r3, r7, r4
 800667c:	0011      	movs	r1, r2
 800667e:	0018      	movs	r0, r3
 8006680:	f01f ff89 	bl	8026596 <strstr>
 8006684:	0003      	movs	r3, r0
 8006686:	22aa      	movs	r2, #170	@ 0xaa
 8006688:	0052      	lsls	r2, r2, #1
 800668a:	18ba      	adds	r2, r7, r2
 800668c:	6013      	str	r3, [r2, #0]
  char *ParsePoint3 = strstr(tempBuf, WIFI);
 800668e:	2318      	movs	r3, #24
 8006690:	18fa      	adds	r2, r7, r3
 8006692:	193b      	adds	r3, r7, r4
 8006694:	0011      	movs	r1, r2
 8006696:	0018      	movs	r0, r3
 8006698:	f01f ff7d 	bl	8026596 <strstr>
 800669c:	0003      	movs	r3, r0
 800669e:	22a8      	movs	r2, #168	@ 0xa8
 80066a0:	0052      	lsls	r2, r2, #1
 80066a2:	18ba      	adds	r2, r7, r2
 80066a4:	6013      	str	r3, [r2, #0]
  char *ParsePoint4 = strstr(tempBuf, Credentials.SSID);
 80066a6:	4a3a      	ldr	r2, [pc, #232]	@ (8006790 <ParseBuffer+0x308>)
 80066a8:	193b      	adds	r3, r7, r4
 80066aa:	0011      	movs	r1, r2
 80066ac:	0018      	movs	r0, r3
 80066ae:	f01f ff72 	bl	8026596 <strstr>
 80066b2:	0003      	movs	r3, r0
 80066b4:	22a6      	movs	r2, #166	@ 0xa6
 80066b6:	0052      	lsls	r2, r2, #1
 80066b8:	18ba      	adds	r2, r7, r2
 80066ba:	6013      	str	r3, [r2, #0]
  char *ParsePoint5 = strstr(tempBuf, FAIL);
 80066bc:	2334      	movs	r3, #52	@ 0x34
 80066be:	18fa      	adds	r2, r7, r3
 80066c0:	193b      	adds	r3, r7, r4
 80066c2:	0011      	movs	r1, r2
 80066c4:	0018      	movs	r0, r3
 80066c6:	f01f ff66 	bl	8026596 <strstr>
 80066ca:	0003      	movs	r3, r0
 80066cc:	22a4      	movs	r2, #164	@ 0xa4
 80066ce:	0052      	lsls	r2, r2, #1
 80066d0:	18ba      	adds	r2, r7, r2
 80066d2:	6013      	str	r3, [r2, #0]
  if(len > 1 ){
 80066d4:	4b1b      	ldr	r3, [pc, #108]	@ (8006744 <ParseBuffer+0x2bc>)
 80066d6:	21b0      	movs	r1, #176	@ 0xb0
 80066d8:	0049      	lsls	r1, r1, #1
 80066da:	185b      	adds	r3, r3, r1
 80066dc:	19db      	adds	r3, r3, r7
 80066de:	881b      	ldrh	r3, [r3, #0]
 80066e0:	2b01      	cmp	r3, #1
 80066e2:	d800      	bhi.n	80066e6 <ParseBuffer+0x25e>
 80066e4:	e0b5      	b.n	8006852 <ParseBuffer+0x3ca>
    if(ParsePoint != 0 && *ParsePoint == 'O'){
 80066e6:	22ac      	movs	r2, #172	@ 0xac
 80066e8:	0052      	lsls	r2, r2, #1
 80066ea:	18bb      	adds	r3, r7, r2
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d056      	beq.n	80067a0 <ParseBuffer+0x318>
 80066f2:	18bb      	adds	r3, r7, r2
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	781b      	ldrb	r3, [r3, #0]
 80066f8:	2b4f      	cmp	r3, #79	@ 0x4f
 80066fa:	d151      	bne.n	80067a0 <ParseBuffer+0x318>
// call function to update time in realtimeclock.c
      status = RECEIVE_STATUS_OK;
 80066fc:	2360      	movs	r3, #96	@ 0x60
 80066fe:	33ff      	adds	r3, #255	@ 0xff
 8006700:	18fb      	adds	r3, r7, r3
 8006702:	2200      	movs	r2, #0
 8006704:	701a      	strb	r2, [r3, #0]
      if ( ATCommand == AT_CIPSNTPTIME ) {
 8006706:	4b23      	ldr	r3, [pc, #140]	@ (8006794 <ParseBuffer+0x30c>)
 8006708:	781b      	ldrb	r3, [r3, #0]
 800670a:	2b12      	cmp	r3, #18
 800670c:	d148      	bne.n	80067a0 <ParseBuffer+0x318>
        if ((len == 43) && (tempBuf[33] == '2' )) {  // validity check
 800670e:	4b0d      	ldr	r3, [pc, #52]	@ (8006744 <ParseBuffer+0x2bc>)
 8006710:	185b      	adds	r3, r3, r1
 8006712:	19db      	adds	r3, r3, r7
 8006714:	881b      	ldrh	r3, [r3, #0]
 8006716:	2b2b      	cmp	r3, #43	@ 0x2b
 8006718:	d10b      	bne.n	8006732 <ParseBuffer+0x2aa>
 800671a:	4b0c      	ldr	r3, [pc, #48]	@ (800674c <ParseBuffer+0x2c4>)
 800671c:	185b      	adds	r3, r3, r1
 800671e:	19db      	adds	r3, r3, r7
 8006720:	2221      	movs	r2, #33	@ 0x21
 8006722:	5c9b      	ldrb	r3, [r3, r2]
 8006724:	2b32      	cmp	r3, #50	@ 0x32
 8006726:	d104      	bne.n	8006732 <ParseBuffer+0x2aa>
          ParseTime(tempBuf);
 8006728:	193b      	adds	r3, r7, r4
 800672a:	0018      	movs	r0, r3
 800672c:	f003 fd22 	bl	800a174 <ParseTime>
 8006730:	e036      	b.n	80067a0 <ParseBuffer+0x318>
        }
        else {
          Error("Error getting time");
 8006732:	4a19      	ldr	r2, [pc, #100]	@ (8006798 <ParseBuffer+0x310>)
 8006734:	4b19      	ldr	r3, [pc, #100]	@ (800679c <ParseBuffer+0x314>)
 8006736:	0019      	movs	r1, r3
 8006738:	2001      	movs	r0, #1
 800673a:	f00d fb7f 	bl	8013e3c <CreateLine>
          return RECEIVE_STATUS_TIMEOUT;
 800673e:	2306      	movs	r3, #6
 8006740:	e08b      	b.n	800685a <ParseBuffer+0x3d2>
 8006742:	46c0      	nop			@ (mov r8, r8)
 8006744:	fffffea2 	.word	0xfffffea2
 8006748:	fffffea1 	.word	0xfffffea1
 800674c:	fffffee8 	.word	0xfffffee8
 8006750:	200010f7 	.word	0x200010f7
 8006754:	0802ae00 	.word	0x0802ae00
 8006758:	0802ae08 	.word	0x0802ae08
 800675c:	fffffee4 	.word	0xfffffee4
 8006760:	0802ae38 	.word	0x0802ae38
 8006764:	fffffedc 	.word	0xfffffedc
 8006768:	0802ae3c 	.word	0x0802ae3c
 800676c:	fffffed4 	.word	0xfffffed4
 8006770:	4c494146 	.word	0x4c494146
 8006774:	fffffecc 	.word	0xfffffecc
 8006778:	0802ae44 	.word	0x0802ae44
 800677c:	fffffec8 	.word	0xfffffec8
 8006780:	fffffeb8 	.word	0xfffffeb8
 8006784:	0802ae4c 	.word	0x0802ae4c
 8006788:	fffffea8 	.word	0xfffffea8
 800678c:	0802ae5c 	.word	0x0802ae5c
 8006790:	200006a0 	.word	0x200006a0
 8006794:	20000701 	.word	0x20000701
 8006798:	0802ae24 	.word	0x0802ae24
 800679c:	0802a958 	.word	0x0802a958
        }
      }
    }
    if(ParsePoint != 0 && *ParsePoint == 'r') {
 80067a0:	22ac      	movs	r2, #172	@ 0xac
 80067a2:	0052      	lsls	r2, r2, #1
 80067a4:	18bb      	adds	r3, r7, r2
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d009      	beq.n	80067c0 <ParseBuffer+0x338>
 80067ac:	18bb      	adds	r3, r7, r2
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	781b      	ldrb	r3, [r3, #0]
 80067b2:	2b72      	cmp	r3, #114	@ 0x72
 80067b4:	d104      	bne.n	80067c0 <ParseBuffer+0x338>
      status = RECEIVE_STATUS_READY;
 80067b6:	2360      	movs	r3, #96	@ 0x60
 80067b8:	33ff      	adds	r3, #255	@ 0xff
 80067ba:	18fb      	adds	r3, r7, r3
 80067bc:	2202      	movs	r2, #2
 80067be:	701a      	strb	r2, [r3, #0]
    }
    if(ParsePoint != 0 && *ParsePoint == '>') {
 80067c0:	22ac      	movs	r2, #172	@ 0xac
 80067c2:	0052      	lsls	r2, r2, #1
 80067c4:	18bb      	adds	r3, r7, r2
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d009      	beq.n	80067e0 <ParseBuffer+0x358>
 80067cc:	18bb      	adds	r3, r7, r2
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	781b      	ldrb	r3, [r3, #0]
 80067d2:	2b3e      	cmp	r3, #62	@ 0x3e
 80067d4:	d104      	bne.n	80067e0 <ParseBuffer+0x358>
      status = RECEIVE_STATUS_START;
 80067d6:	2360      	movs	r3, #96	@ 0x60
 80067d8:	33ff      	adds	r3, #255	@ 0xff
 80067da:	18fb      	adds	r3, r7, r3
 80067dc:	2205      	movs	r2, #5
 80067de:	701a      	strb	r2, [r3, #0]
    }
    if(ParsePoint != 0 && *ParsePoint == '+') {
 80067e0:	22ac      	movs	r2, #172	@ 0xac
 80067e2:	0052      	lsls	r2, r2, #1
 80067e4:	18bb      	adds	r3, r7, r2
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d009      	beq.n	8006800 <ParseBuffer+0x378>
 80067ec:	18bb      	adds	r3, r7, r2
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	781b      	ldrb	r3, [r3, #0]
 80067f2:	2b2b      	cmp	r3, #43	@ 0x2b
 80067f4:	d104      	bne.n	8006800 <ParseBuffer+0x378>
      status = RECEIVE_STATUS_TIME;
 80067f6:	2360      	movs	r3, #96	@ 0x60
 80067f8:	33ff      	adds	r3, #255	@ 0xff
 80067fa:	18fb      	adds	r3, r7, r3
 80067fc:	220b      	movs	r2, #11
 80067fe:	701a      	strb	r2, [r3, #0]
    }
    if((ParsePoint2 != 0 && *ParsePoint2 == 'E') || (ParsePoint5 != 0 && *ParsePoint5 == 'F')) {
 8006800:	22aa      	movs	r2, #170	@ 0xaa
 8006802:	0052      	lsls	r2, r2, #1
 8006804:	18bb      	adds	r3, r7, r2
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	2b00      	cmp	r3, #0
 800680a:	d004      	beq.n	8006816 <ParseBuffer+0x38e>
 800680c:	18bb      	adds	r3, r7, r2
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	781b      	ldrb	r3, [r3, #0]
 8006812:	2b45      	cmp	r3, #69	@ 0x45
 8006814:	d00a      	beq.n	800682c <ParseBuffer+0x3a4>
 8006816:	22a4      	movs	r2, #164	@ 0xa4
 8006818:	0052      	lsls	r2, r2, #1
 800681a:	18bb      	adds	r3, r7, r2
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	2b00      	cmp	r3, #0
 8006820:	d009      	beq.n	8006836 <ParseBuffer+0x3ae>
 8006822:	18bb      	adds	r3, r7, r2
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	781b      	ldrb	r3, [r3, #0]
 8006828:	2b46      	cmp	r3, #70	@ 0x46
 800682a:	d104      	bne.n	8006836 <ParseBuffer+0x3ae>
      status = RECEIVE_STATUS_ERROR;
 800682c:	2360      	movs	r3, #96	@ 0x60
 800682e:	33ff      	adds	r3, #255	@ 0xff
 8006830:	18fb      	adds	r3, r7, r3
 8006832:	2201      	movs	r2, #1
 8006834:	701a      	strb	r2, [r3, #0]
    }
    if(ParsePoint3 != 0 && *ParsePoint3 == 'W'){
 8006836:	22a8      	movs	r2, #168	@ 0xa8
 8006838:	0052      	lsls	r2, r2, #1
 800683a:	18bb      	adds	r3, r7, r2
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	2b00      	cmp	r3, #0
 8006840:	d007      	beq.n	8006852 <ParseBuffer+0x3ca>
 8006842:	18bb      	adds	r3, r7, r2
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	781b      	ldrb	r3, [r3, #0]
 8006848:	2b57      	cmp	r3, #87	@ 0x57
 800684a:	d102      	bne.n	8006852 <ParseBuffer+0x3ca>
      ConnectionMade = true;
 800684c:	4b05      	ldr	r3, [pc, #20]	@ (8006864 <ParseBuffer+0x3dc>)
 800684e:	2201      	movs	r2, #1
 8006850:	701a      	strb	r2, [r3, #0]
    }
    if(ParsePoint4 != 0 && *ParsePoint4 == '2'){
    }
  }
  return(status);
 8006852:	2360      	movs	r3, #96	@ 0x60
 8006854:	33ff      	adds	r3, #255	@ 0xff
 8006856:	18fb      	adds	r3, r7, r3
 8006858:	781b      	ldrb	r3, [r3, #0]

}
 800685a:	0018      	movs	r0, r3
 800685c:	46bd      	mov	sp, r7
 800685e:	b059      	add	sp, #356	@ 0x164
 8006860:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006862:	46c0      	nop			@ (mov r8, r8)
 8006864:	200005b0 	.word	0x200005b0

08006868 <PollAwake>:

 //PollAwake, RFPOWER and CheckRFPower necesarry when comming out of sleep mode.
bool PollAwake(){
 8006868:	b580      	push	{r7, lr}
 800686a:	b082      	sub	sp, #8
 800686c:	af00      	add	r7, sp, #0
  char* atCommand = "ATE0\r\n";
 800686e:	4b0b      	ldr	r3, [pc, #44]	@ (800689c <PollAwake+0x34>)
 8006870:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	0018      	movs	r0, r3
 8006876:	f7f9 fc79 	bl	800016c <strlen>
 800687a:	0003      	movs	r3, r0
 800687c:	b29a      	uxth	r2, r3
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	0011      	movs	r1, r2
 8006882:	0018      	movs	r0, r3
 8006884:	f7fe faec 	bl	8004e60 <ESP_Send>
 8006888:	1e03      	subs	r3, r0, #0
 800688a:	d001      	beq.n	8006890 <PollAwake+0x28>
    return true;
 800688c:	2301      	movs	r3, #1
 800688e:	e000      	b.n	8006892 <PollAwake+0x2a>
  }
  else{
    return false;
 8006890:	2300      	movs	r3, #0
  }
}
 8006892:	0018      	movs	r0, r3
 8006894:	46bd      	mov	sp, r7
 8006896:	b002      	add	sp, #8
 8006898:	bd80      	pop	{r7, pc}
 800689a:	46c0      	nop			@ (mov r8, r8)
 800689c:	0802ae6c 	.word	0x0802ae6c

080068a0 <RFPower>:

bool RFPower(){
 80068a0:	b580      	push	{r7, lr}
 80068a2:	b082      	sub	sp, #8
 80068a4:	af00      	add	r7, sp, #0
  char* atCommand = "AT+RFPOWER=70\r\n";
 80068a6:	4b0b      	ldr	r3, [pc, #44]	@ (80068d4 <RFPower+0x34>)
 80068a8:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	0018      	movs	r0, r3
 80068ae:	f7f9 fc5d 	bl	800016c <strlen>
 80068b2:	0003      	movs	r3, r0
 80068b4:	b29a      	uxth	r2, r3
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	0011      	movs	r1, r2
 80068ba:	0018      	movs	r0, r3
 80068bc:	f7fe fad0 	bl	8004e60 <ESP_Send>
 80068c0:	1e03      	subs	r3, r0, #0
 80068c2:	d001      	beq.n	80068c8 <RFPower+0x28>
    return true;
 80068c4:	2301      	movs	r3, #1
 80068c6:	e000      	b.n	80068ca <RFPower+0x2a>
  }
  else{
    return false;
 80068c8:	2300      	movs	r3, #0
  }
}
 80068ca:	0018      	movs	r0, r3
 80068cc:	46bd      	mov	sp, r7
 80068ce:	b002      	add	sp, #8
 80068d0:	bd80      	pop	{r7, pc}
 80068d2:	46c0      	nop			@ (mov r8, r8)
 80068d4:	0802ae74 	.word	0x0802ae74

080068d8 <CheckRFPower>:

bool CheckRFPower(){
 80068d8:	b580      	push	{r7, lr}
 80068da:	b082      	sub	sp, #8
 80068dc:	af00      	add	r7, sp, #0
  char* atCommand = "AT+RFPOWER?\r\n";
 80068de:	4b0b      	ldr	r3, [pc, #44]	@ (800690c <CheckRFPower+0x34>)
 80068e0:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	0018      	movs	r0, r3
 80068e6:	f7f9 fc41 	bl	800016c <strlen>
 80068ea:	0003      	movs	r3, r0
 80068ec:	b29a      	uxth	r2, r3
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	0011      	movs	r1, r2
 80068f2:	0018      	movs	r0, r3
 80068f4:	f7fe fab4 	bl	8004e60 <ESP_Send>
 80068f8:	1e03      	subs	r3, r0, #0
 80068fa:	d001      	beq.n	8006900 <CheckRFPower+0x28>
    return true;
 80068fc:	2301      	movs	r3, #1
 80068fe:	e000      	b.n	8006902 <CheckRFPower+0x2a>
  }
  else{
    return false;
 8006900:	2300      	movs	r3, #0
  }
}
 8006902:	0018      	movs	r0, r3
 8006904:	46bd      	mov	sp, r7
 8006906:	b002      	add	sp, #8
 8006908:	bd80      	pop	{r7, pc}
 800690a:	46c0      	nop			@ (mov r8, r8)
 800690c:	0802ae84 	.word	0x0802ae84

08006910 <ATRestore>:

//Only necesarry on first init
bool ATRestore(){
 8006910:	b580      	push	{r7, lr}
 8006912:	b082      	sub	sp, #8
 8006914:	af00      	add	r7, sp, #0
  char* atCommand = "AT+RESTORE\r\n";
 8006916:	4b0b      	ldr	r3, [pc, #44]	@ (8006944 <ATRestore+0x34>)
 8006918:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	0018      	movs	r0, r3
 800691e:	f7f9 fc25 	bl	800016c <strlen>
 8006922:	0003      	movs	r3, r0
 8006924:	b29a      	uxth	r2, r3
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	0011      	movs	r1, r2
 800692a:	0018      	movs	r0, r3
 800692c:	f7fe fa98 	bl	8004e60 <ESP_Send>
 8006930:	1e03      	subs	r3, r0, #0
 8006932:	d001      	beq.n	8006938 <ATRestore+0x28>
    return true;
 8006934:	2301      	movs	r3, #1
 8006936:	e000      	b.n	800693a <ATRestore+0x2a>
  }
  else{
    return false;
 8006938:	2300      	movs	r3, #0
  }
}
 800693a:	0018      	movs	r0, r3
 800693c:	46bd      	mov	sp, r7
 800693e:	b002      	add	sp, #8
 8006940:	bd80      	pop	{r7, pc}
 8006942:	46c0      	nop			@ (mov r8, r8)
 8006944:	0802ae94 	.word	0x0802ae94

08006948 <CWINIT>:

bool CWINIT(){
 8006948:	b580      	push	{r7, lr}
 800694a:	b082      	sub	sp, #8
 800694c:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWINIT=1\r\n";
 800694e:	4b0b      	ldr	r3, [pc, #44]	@ (800697c <CWINIT+0x34>)
 8006950:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	0018      	movs	r0, r3
 8006956:	f7f9 fc09 	bl	800016c <strlen>
 800695a:	0003      	movs	r3, r0
 800695c:	b29a      	uxth	r2, r3
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	0011      	movs	r1, r2
 8006962:	0018      	movs	r0, r3
 8006964:	f7fe fa7c 	bl	8004e60 <ESP_Send>
 8006968:	1e03      	subs	r3, r0, #0
 800696a:	d001      	beq.n	8006970 <CWINIT+0x28>
    return true;
 800696c:	2301      	movs	r3, #1
 800696e:	e000      	b.n	8006972 <CWINIT+0x2a>
  }
  else{
    return false;
 8006970:	2300      	movs	r3, #0
  }
}
 8006972:	0018      	movs	r0, r3
 8006974:	46bd      	mov	sp, r7
 8006976:	b002      	add	sp, #8
 8006978:	bd80      	pop	{r7, pc}
 800697a:	46c0      	nop			@ (mov r8, r8)
 800697c:	0802aea4 	.word	0x0802aea4

08006980 <CWMODE1>:

bool CWMODE1(){
 8006980:	b580      	push	{r7, lr}
 8006982:	b082      	sub	sp, #8
 8006984:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWMODE=1\r\n";
 8006986:	4b0b      	ldr	r3, [pc, #44]	@ (80069b4 <CWMODE1+0x34>)
 8006988:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	0018      	movs	r0, r3
 800698e:	f7f9 fbed 	bl	800016c <strlen>
 8006992:	0003      	movs	r3, r0
 8006994:	b29a      	uxth	r2, r3
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	0011      	movs	r1, r2
 800699a:	0018      	movs	r0, r3
 800699c:	f7fe fa60 	bl	8004e60 <ESP_Send>
 80069a0:	1e03      	subs	r3, r0, #0
 80069a2:	d001      	beq.n	80069a8 <CWMODE1+0x28>
    return true;
 80069a4:	2301      	movs	r3, #1
 80069a6:	e000      	b.n	80069aa <CWMODE1+0x2a>
  }
  else{
    return false;
 80069a8:	2300      	movs	r3, #0
  }
}
 80069aa:	0018      	movs	r0, r3
 80069ac:	46bd      	mov	sp, r7
 80069ae:	b002      	add	sp, #8
 80069b0:	bd80      	pop	{r7, pc}
 80069b2:	46c0      	nop			@ (mov r8, r8)
 80069b4:	0802aeb4 	.word	0x0802aeb4

080069b8 <CWMODE2>:

bool CWMODE2(){
 80069b8:	b580      	push	{r7, lr}
 80069ba:	b082      	sub	sp, #8
 80069bc:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWMODE=2\r\n";
 80069be:	4b0b      	ldr	r3, [pc, #44]	@ (80069ec <CWMODE2+0x34>)
 80069c0:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	0018      	movs	r0, r3
 80069c6:	f7f9 fbd1 	bl	800016c <strlen>
 80069ca:	0003      	movs	r3, r0
 80069cc:	b29a      	uxth	r2, r3
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	0011      	movs	r1, r2
 80069d2:	0018      	movs	r0, r3
 80069d4:	f7fe fa44 	bl	8004e60 <ESP_Send>
 80069d8:	1e03      	subs	r3, r0, #0
 80069da:	d001      	beq.n	80069e0 <CWMODE2+0x28>
    return true;
 80069dc:	2301      	movs	r3, #1
 80069de:	e000      	b.n	80069e2 <CWMODE2+0x2a>
  }
  else{
    return false;
 80069e0:	2300      	movs	r3, #0
  }
}
 80069e2:	0018      	movs	r0, r3
 80069e4:	46bd      	mov	sp, r7
 80069e6:	b002      	add	sp, #8
 80069e8:	bd80      	pop	{r7, pc}
 80069ea:	46c0      	nop			@ (mov r8, r8)
 80069ec:	0802aec4 	.word	0x0802aec4

080069f0 <CWAUTOCONN>:

bool CWAUTOCONN(){
 80069f0:	b580      	push	{r7, lr}
 80069f2:	b082      	sub	sp, #8
 80069f4:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWAUTOCONN=1\r\n";
 80069f6:	4b0b      	ldr	r3, [pc, #44]	@ (8006a24 <CWAUTOCONN+0x34>)
 80069f8:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	0018      	movs	r0, r3
 80069fe:	f7f9 fbb5 	bl	800016c <strlen>
 8006a02:	0003      	movs	r3, r0
 8006a04:	b29a      	uxth	r2, r3
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	0011      	movs	r1, r2
 8006a0a:	0018      	movs	r0, r3
 8006a0c:	f7fe fa28 	bl	8004e60 <ESP_Send>
 8006a10:	1e03      	subs	r3, r0, #0
 8006a12:	d001      	beq.n	8006a18 <CWAUTOCONN+0x28>
    return true;
 8006a14:	2301      	movs	r3, #1
 8006a16:	e000      	b.n	8006a1a <CWAUTOCONN+0x2a>
  }
  else{
    return false;
 8006a18:	2300      	movs	r3, #0
  }
}
 8006a1a:	0018      	movs	r0, r3
 8006a1c:	46bd      	mov	sp, r7
 8006a1e:	b002      	add	sp, #8
 8006a20:	bd80      	pop	{r7, pc}
 8006a22:	46c0      	nop			@ (mov r8, r8)
 8006a24:	0802aed4 	.word	0x0802aed4

08006a28 <CWJAP>:

bool CWJAP()
{
 8006a28:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006a2a:	46c6      	mov	lr, r8
 8006a2c:	b500      	push	{lr}
 8006a2e:	b08a      	sub	sp, #40	@ 0x28
 8006a30:	af00      	add	r7, sp, #0
 8006a32:	466b      	mov	r3, sp
 8006a34:	4698      	mov	r8, r3
  APtested = true;
 8006a36:	4b36      	ldr	r3, [pc, #216]	@ (8006b10 <CWJAP+0xe8>)
 8006a38:	2201      	movs	r2, #1
 8006a3a:	701a      	strb	r2, [r3, #0]
  getWifiCred();
 8006a3c:	f7fd ff60 	bl	8004900 <getWifiCred>
  static char atCommandBuff[112];
  memset(atCommandBuff, '\0', 112);
 8006a40:	4b34      	ldr	r3, [pc, #208]	@ (8006b14 <CWJAP+0xec>)
 8006a42:	2270      	movs	r2, #112	@ 0x70
 8006a44:	2100      	movs	r1, #0
 8006a46:	0018      	movs	r0, r3
 8006a48:	f01f fd6a 	bl	8026520 <memset>
  sprintf(atCommandBuff, "AT+CWJAP=\"%s\",\"%s\"\r\n", Credentials.SSID, Credentials.Password);
 8006a4c:	4b32      	ldr	r3, [pc, #200]	@ (8006b18 <CWJAP+0xf0>)
 8006a4e:	4a33      	ldr	r2, [pc, #204]	@ (8006b1c <CWJAP+0xf4>)
 8006a50:	4933      	ldr	r1, [pc, #204]	@ (8006b20 <CWJAP+0xf8>)
 8006a52:	4830      	ldr	r0, [pc, #192]	@ (8006b14 <CWJAP+0xec>)
 8006a54:	f01f fc1c 	bl	8026290 <siprintf>
  uint8_t len = strlen(atCommandBuff);
 8006a58:	4b2e      	ldr	r3, [pc, #184]	@ (8006b14 <CWJAP+0xec>)
 8006a5a:	0018      	movs	r0, r3
 8006a5c:	f7f9 fb86 	bl	800016c <strlen>
 8006a60:	0002      	movs	r2, r0
 8006a62:	210f      	movs	r1, #15
 8006a64:	2018      	movs	r0, #24
 8006a66:	180b      	adds	r3, r1, r0
 8006a68:	19db      	adds	r3, r3, r7
 8006a6a:	701a      	strb	r2, [r3, #0]
  char atCommand[len + 1];
 8006a6c:	180b      	adds	r3, r1, r0
 8006a6e:	19db      	adds	r3, r3, r7
 8006a70:	781b      	ldrb	r3, [r3, #0]
 8006a72:	3301      	adds	r3, #1
 8006a74:	1e5a      	subs	r2, r3, #1
 8006a76:	623a      	str	r2, [r7, #32]
 8006a78:	001a      	movs	r2, r3
 8006a7a:	60ba      	str	r2, [r7, #8]
 8006a7c:	2200      	movs	r2, #0
 8006a7e:	60fa      	str	r2, [r7, #12]
 8006a80:	68b8      	ldr	r0, [r7, #8]
 8006a82:	68f9      	ldr	r1, [r7, #12]
 8006a84:	0002      	movs	r2, r0
 8006a86:	0f52      	lsrs	r2, r2, #29
 8006a88:	000e      	movs	r6, r1
 8006a8a:	00f6      	lsls	r6, r6, #3
 8006a8c:	617e      	str	r6, [r7, #20]
 8006a8e:	697e      	ldr	r6, [r7, #20]
 8006a90:	4316      	orrs	r6, r2
 8006a92:	617e      	str	r6, [r7, #20]
 8006a94:	0002      	movs	r2, r0
 8006a96:	00d2      	lsls	r2, r2, #3
 8006a98:	613a      	str	r2, [r7, #16]
 8006a9a:	001a      	movs	r2, r3
 8006a9c:	603a      	str	r2, [r7, #0]
 8006a9e:	2200      	movs	r2, #0
 8006aa0:	607a      	str	r2, [r7, #4]
 8006aa2:	6838      	ldr	r0, [r7, #0]
 8006aa4:	6879      	ldr	r1, [r7, #4]
 8006aa6:	0002      	movs	r2, r0
 8006aa8:	0f52      	lsrs	r2, r2, #29
 8006aaa:	000e      	movs	r6, r1
 8006aac:	00f5      	lsls	r5, r6, #3
 8006aae:	4315      	orrs	r5, r2
 8006ab0:	0002      	movs	r2, r0
 8006ab2:	00d4      	lsls	r4, r2, #3
 8006ab4:	3307      	adds	r3, #7
 8006ab6:	08db      	lsrs	r3, r3, #3
 8006ab8:	00db      	lsls	r3, r3, #3
 8006aba:	466a      	mov	r2, sp
 8006abc:	1ad3      	subs	r3, r2, r3
 8006abe:	469d      	mov	sp, r3
 8006ac0:	466b      	mov	r3, sp
 8006ac2:	3300      	adds	r3, #0
 8006ac4:	61fb      	str	r3, [r7, #28]
  memset(atCommand, '\0', len + 1);
 8006ac6:	240f      	movs	r4, #15
 8006ac8:	2518      	movs	r5, #24
 8006aca:	1963      	adds	r3, r4, r5
 8006acc:	19db      	adds	r3, r3, r7
 8006ace:	781b      	ldrb	r3, [r3, #0]
 8006ad0:	3301      	adds	r3, #1
 8006ad2:	001a      	movs	r2, r3
 8006ad4:	69fb      	ldr	r3, [r7, #28]
 8006ad6:	2100      	movs	r1, #0
 8006ad8:	0018      	movs	r0, r3
 8006ada:	f01f fd21 	bl	8026520 <memset>
  strncpy(atCommand, atCommandBuff, len);
 8006ade:	1963      	adds	r3, r4, r5
 8006ae0:	19db      	adds	r3, r3, r7
 8006ae2:	781a      	ldrb	r2, [r3, #0]
 8006ae4:	490b      	ldr	r1, [pc, #44]	@ (8006b14 <CWJAP+0xec>)
 8006ae6:	69fb      	ldr	r3, [r7, #28]
 8006ae8:	0018      	movs	r0, r3
 8006aea:	f01f fd40 	bl	802656e <strncpy>
  return ESP_Send((uint8_t*)atCommand, len);
 8006aee:	1963      	adds	r3, r4, r5
 8006af0:	19db      	adds	r3, r3, r7
 8006af2:	781b      	ldrb	r3, [r3, #0]
 8006af4:	b29a      	uxth	r2, r3
 8006af6:	69fb      	ldr	r3, [r7, #28]
 8006af8:	0011      	movs	r1, r2
 8006afa:	0018      	movs	r0, r3
 8006afc:	f7fe f9b0 	bl	8004e60 <ESP_Send>
 8006b00:	0003      	movs	r3, r0
 8006b02:	46c5      	mov	sp, r8
}
 8006b04:	0018      	movs	r0, r3
 8006b06:	46bd      	mov	sp, r7
 8006b08:	b00a      	add	sp, #40	@ 0x28
 8006b0a:	bc80      	pop	{r7}
 8006b0c:	46b8      	mov	r8, r7
 8006b0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006b10:	200005b1 	.word	0x200005b1
 8006b14:	2000086c 	.word	0x2000086c
 8006b18:	200006c0 	.word	0x200006c0
 8006b1c:	200006a0 	.word	0x200006a0
 8006b20:	0802aee8 	.word	0x0802aee8

08006b24 <CWMODE3>:


bool CWMODE3(){
 8006b24:	b580      	push	{r7, lr}
 8006b26:	b082      	sub	sp, #8
 8006b28:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWMODE=3\r\n";
 8006b2a:	4b0b      	ldr	r3, [pc, #44]	@ (8006b58 <CWMODE3+0x34>)
 8006b2c:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	0018      	movs	r0, r3
 8006b32:	f7f9 fb1b 	bl	800016c <strlen>
 8006b36:	0003      	movs	r3, r0
 8006b38:	b29a      	uxth	r2, r3
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	0011      	movs	r1, r2
 8006b3e:	0018      	movs	r0, r3
 8006b40:	f7fe f98e 	bl	8004e60 <ESP_Send>
 8006b44:	1e03      	subs	r3, r0, #0
 8006b46:	d001      	beq.n	8006b4c <CWMODE3+0x28>
    return true;
 8006b48:	2301      	movs	r3, #1
 8006b4a:	e000      	b.n	8006b4e <CWMODE3+0x2a>
  }
  else{
    return false;
 8006b4c:	2300      	movs	r3, #0
  }
}
 8006b4e:	0018      	movs	r0, r3
 8006b50:	46bd      	mov	sp, r7
 8006b52:	b002      	add	sp, #8
 8006b54:	bd80      	pop	{r7, pc}
 8006b56:	46c0      	nop			@ (mov r8, r8)
 8006b58:	0802af00 	.word	0x0802af00

08006b5c <CWSTATE>:

bool CWSTATE(){
 8006b5c:	b580      	push	{r7, lr}
 8006b5e:	b082      	sub	sp, #8
 8006b60:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWSTATE?\r\n";
 8006b62:	4b0b      	ldr	r3, [pc, #44]	@ (8006b90 <CWSTATE+0x34>)
 8006b64:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	0018      	movs	r0, r3
 8006b6a:	f7f9 faff 	bl	800016c <strlen>
 8006b6e:	0003      	movs	r3, r0
 8006b70:	b29a      	uxth	r2, r3
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	0011      	movs	r1, r2
 8006b76:	0018      	movs	r0, r3
 8006b78:	f7fe f972 	bl	8004e60 <ESP_Send>
 8006b7c:	1e03      	subs	r3, r0, #0
 8006b7e:	d001      	beq.n	8006b84 <CWSTATE+0x28>
    return true;
 8006b80:	2301      	movs	r3, #1
 8006b82:	e000      	b.n	8006b86 <CWSTATE+0x2a>
  }
  else{
    return false;
 8006b84:	2300      	movs	r3, #0
  }
}
 8006b86:	0018      	movs	r0, r3
 8006b88:	46bd      	mov	sp, r7
 8006b8a:	b002      	add	sp, #8
 8006b8c:	bd80      	pop	{r7, pc}
 8006b8e:	46c0      	nop			@ (mov r8, r8)
 8006b90:	0802af10 	.word	0x0802af10

08006b94 <CWSAP>:

bool CWSAP(){
 8006b94:	b580      	push	{r7, lr}
 8006b96:	b082      	sub	sp, #8
 8006b98:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWSAP=\"WOTS_Config\",\"\",11,0,1\r\n";
 8006b9a:	4b0b      	ldr	r3, [pc, #44]	@ (8006bc8 <CWSAP+0x34>)
 8006b9c:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	0018      	movs	r0, r3
 8006ba2:	f7f9 fae3 	bl	800016c <strlen>
 8006ba6:	0003      	movs	r3, r0
 8006ba8:	b29a      	uxth	r2, r3
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	0011      	movs	r1, r2
 8006bae:	0018      	movs	r0, r3
 8006bb0:	f7fe f956 	bl	8004e60 <ESP_Send>
 8006bb4:	1e03      	subs	r3, r0, #0
 8006bb6:	d001      	beq.n	8006bbc <CWSAP+0x28>
    return true;
 8006bb8:	2301      	movs	r3, #1
 8006bba:	e000      	b.n	8006bbe <CWSAP+0x2a>
  }
  else{
    return false;
 8006bbc:	2300      	movs	r3, #0
  }
}
 8006bbe:	0018      	movs	r0, r3
 8006bc0:	46bd      	mov	sp, r7
 8006bc2:	b002      	add	sp, #8
 8006bc4:	bd80      	pop	{r7, pc}
 8006bc6:	46c0      	nop			@ (mov r8, r8)
 8006bc8:	0802af20 	.word	0x0802af20

08006bcc <CIPMUX>:

bool CIPMUX(){
 8006bcc:	b580      	push	{r7, lr}
 8006bce:	b082      	sub	sp, #8
 8006bd0:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CIPMUX=0\r\n";
 8006bd2:	4b0b      	ldr	r3, [pc, #44]	@ (8006c00 <CIPMUX+0x34>)
 8006bd4:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	0018      	movs	r0, r3
 8006bda:	f7f9 fac7 	bl	800016c <strlen>
 8006bde:	0003      	movs	r3, r0
 8006be0:	b29a      	uxth	r2, r3
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	0011      	movs	r1, r2
 8006be6:	0018      	movs	r0, r3
 8006be8:	f7fe f93a 	bl	8004e60 <ESP_Send>
 8006bec:	1e03      	subs	r3, r0, #0
 8006bee:	d001      	beq.n	8006bf4 <CIPMUX+0x28>
    return true;
 8006bf0:	2301      	movs	r3, #1
 8006bf2:	e000      	b.n	8006bf6 <CIPMUX+0x2a>
  }
  else{
    return false;
 8006bf4:	2300      	movs	r3, #0
  }
}
 8006bf6:	0018      	movs	r0, r3
 8006bf8:	46bd      	mov	sp, r7
 8006bfa:	b002      	add	sp, #8
 8006bfc:	bd80      	pop	{r7, pc}
 8006bfe:	46c0      	nop			@ (mov r8, r8)
 8006c00:	0802af44 	.word	0x0802af44

08006c04 <WEBSERVER>:

//This command sets the webserver, only necessary for first initialization.
bool WEBSERVER(){
 8006c04:	b580      	push	{r7, lr}
 8006c06:	b082      	sub	sp, #8
 8006c08:	af00      	add	r7, sp, #0
  char* atCommand = "AT+WEBSERVER=1,80,60\r\n";
 8006c0a:	4b0b      	ldr	r3, [pc, #44]	@ (8006c38 <WEBSERVER+0x34>)
 8006c0c:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	0018      	movs	r0, r3
 8006c12:	f7f9 faab 	bl	800016c <strlen>
 8006c16:	0003      	movs	r3, r0
 8006c18:	b29a      	uxth	r2, r3
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	0011      	movs	r1, r2
 8006c1e:	0018      	movs	r0, r3
 8006c20:	f7fe f91e 	bl	8004e60 <ESP_Send>
 8006c24:	1e03      	subs	r3, r0, #0
 8006c26:	d001      	beq.n	8006c2c <WEBSERVER+0x28>
    return true;
 8006c28:	2301      	movs	r3, #1
 8006c2a:	e000      	b.n	8006c2e <WEBSERVER+0x2a>
  }
  else{
    return false;
 8006c2c:	2300      	movs	r3, #0
  }
}
 8006c2e:	0018      	movs	r0, r3
 8006c30:	46bd      	mov	sp, r7
 8006c32:	b002      	add	sp, #8
 8006c34:	bd80      	pop	{r7, pc}
 8006c36:	46c0      	nop			@ (mov r8, r8)
 8006c38:	0802af54 	.word	0x0802af54

08006c3c <HTTPCPOST>:

//These are the commands necesarry for sending data.
bool HTTPCPOST(){
 8006c3c:	b5b0      	push	{r4, r5, r7, lr}
 8006c3e:	b084      	sub	sp, #16
 8006c40:	af02      	add	r7, sp, #8
  bool txresult = false;
 8006c42:	1cfb      	adds	r3, r7, #3
 8006c44:	2200      	movs	r2, #0
 8006c46:	701a      	strb	r2, [r3, #0]
  uint16_t length = CreateMessage(&txresult, false);
 8006c48:	1dbc      	adds	r4, r7, #6
 8006c4a:	1cfb      	adds	r3, r7, #3
 8006c4c:	2100      	movs	r1, #0
 8006c4e:	0018      	movs	r0, r3
 8006c50:	f7fe fc92 	bl	8005578 <CreateMessage>
 8006c54:	0003      	movs	r3, r0
 8006c56:	8023      	strh	r3, [r4, #0]
  static uint8_t boxConfig[IdSize];
  static char Buffer[1+(2*IdSize)];
  static uint8_t URLToUpload[URLToUploadMaxLength];
  ReadUint8ArrayEEprom(BoxConfigAddr, boxConfig, IdSize);
 8006c58:	4b22      	ldr	r3, [pc, #136]	@ (8006ce4 <HTTPCPOST+0xa8>)
 8006c5a:	4823      	ldr	r0, [pc, #140]	@ (8006ce8 <HTTPCPOST+0xac>)
 8006c5c:	220c      	movs	r2, #12
 8006c5e:	0019      	movs	r1, r3
 8006c60:	f005 fa4a 	bl	800c0f8 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, boxConfig);
 8006c64:	4a1f      	ldr	r2, [pc, #124]	@ (8006ce4 <HTTPCPOST+0xa8>)
 8006c66:	4b21      	ldr	r3, [pc, #132]	@ (8006cec <HTTPCPOST+0xb0>)
 8006c68:	0011      	movs	r1, r2
 8006c6a:	0018      	movs	r0, r3
 8006c6c:	f7fe fbbc 	bl	80053e8 <uint8ArrayToString>
//  sprintf(message, "AT+HTTPCPOST=%s/%s/data\",%d,1,%s\r\n", API, Buffer, length, header1);
  ReadUint8ArrayEEprom(URLToUploadConfigAddr, URLToUpload, URLToUploadMaxLength);
 8006c70:	4b1f      	ldr	r3, [pc, #124]	@ (8006cf0 <HTTPCPOST+0xb4>)
 8006c72:	4820      	ldr	r0, [pc, #128]	@ (8006cf4 <HTTPCPOST+0xb8>)
 8006c74:	2230      	movs	r2, #48	@ 0x30
 8006c76:	0019      	movs	r1, r3
 8006c78:	f005 fa3e 	bl	800c0f8 <ReadUint8ArrayEEprom>
  if (strlen((char*)URLToUpload) == 0) {
 8006c7c:	4b1c      	ldr	r3, [pc, #112]	@ (8006cf0 <HTTPCPOST+0xb4>)
 8006c7e:	781b      	ldrb	r3, [r3, #0]
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d10b      	bne.n	8006c9c <HTTPCPOST+0x60>
    strcpy ((char*)URLToUpload,API);
 8006c84:	4b1a      	ldr	r3, [pc, #104]	@ (8006cf0 <HTTPCPOST+0xb4>)
 8006c86:	4a1c      	ldr	r2, [pc, #112]	@ (8006cf8 <HTTPCPOST+0xbc>)
 8006c88:	ca13      	ldmia	r2!, {r0, r1, r4}
 8006c8a:	c313      	stmia	r3!, {r0, r1, r4}
 8006c8c:	ca13      	ldmia	r2!, {r0, r1, r4}
 8006c8e:	c313      	stmia	r3!, {r0, r1, r4}
 8006c90:	ca03      	ldmia	r2!, {r0, r1}
 8006c92:	c303      	stmia	r3!, {r0, r1}
 8006c94:	8811      	ldrh	r1, [r2, #0]
 8006c96:	8019      	strh	r1, [r3, #0]
 8006c98:	7892      	ldrb	r2, [r2, #2]
 8006c9a:	709a      	strb	r2, [r3, #2]
  }
  sprintf(message, "AT+HTTPCPOST=\"%s/%s/data\",%d,1,%s\r\n", (char*)URLToUpload, Buffer, length, HEADER1);
 8006c9c:	1dbb      	adds	r3, r7, #6
 8006c9e:	881b      	ldrh	r3, [r3, #0]
 8006ca0:	4d12      	ldr	r5, [pc, #72]	@ (8006cec <HTTPCPOST+0xb0>)
 8006ca2:	4c13      	ldr	r4, [pc, #76]	@ (8006cf0 <HTTPCPOST+0xb4>)
 8006ca4:	4915      	ldr	r1, [pc, #84]	@ (8006cfc <HTTPCPOST+0xc0>)
 8006ca6:	4816      	ldr	r0, [pc, #88]	@ (8006d00 <HTTPCPOST+0xc4>)
 8006ca8:	4a16      	ldr	r2, [pc, #88]	@ (8006d04 <HTTPCPOST+0xc8>)
 8006caa:	9201      	str	r2, [sp, #4]
 8006cac:	9300      	str	r3, [sp, #0]
 8006cae:	002b      	movs	r3, r5
 8006cb0:	0022      	movs	r2, r4
 8006cb2:	f01f faed 	bl	8026290 <siprintf>
  uint16_t len = strlen(message);
 8006cb6:	4b12      	ldr	r3, [pc, #72]	@ (8006d00 <HTTPCPOST+0xc4>)
 8006cb8:	0018      	movs	r0, r3
 8006cba:	f7f9 fa57 	bl	800016c <strlen>
 8006cbe:	0002      	movs	r2, r0
 8006cc0:	1d3b      	adds	r3, r7, #4
 8006cc2:	801a      	strh	r2, [r3, #0]
//  Debug("ESP_send result of header: %d, transmitted data %d chars", txresult, len);
  if(ESP_Send((uint8_t*)message, len)){
 8006cc4:	1d3b      	adds	r3, r7, #4
 8006cc6:	881a      	ldrh	r2, [r3, #0]
 8006cc8:	4b0d      	ldr	r3, [pc, #52]	@ (8006d00 <HTTPCPOST+0xc4>)
 8006cca:	0011      	movs	r1, r2
 8006ccc:	0018      	movs	r0, r3
 8006cce:	f7fe f8c7 	bl	8004e60 <ESP_Send>
 8006cd2:	1e03      	subs	r3, r0, #0
 8006cd4:	d001      	beq.n	8006cda <HTTPCPOST+0x9e>
    return true;
 8006cd6:	2301      	movs	r3, #1
 8006cd8:	e000      	b.n	8006cdc <HTTPCPOST+0xa0>
  }
  else{
    return false;
 8006cda:	2300      	movs	r3, #0
  }
}
 8006cdc:	0018      	movs	r0, r3
 8006cde:	46bd      	mov	sp, r7
 8006ce0:	b002      	add	sp, #8
 8006ce2:	bdb0      	pop	{r4, r5, r7, pc}
 8006ce4:	200008dc 	.word	0x200008dc
 8006ce8:	08080000 	.word	0x08080000
 8006cec:	200008e8 	.word	0x200008e8
 8006cf0:	20000904 	.word	0x20000904
 8006cf4:	08080110 	.word	0x08080110
 8006cf8:	0802af6c 	.word	0x0802af6c
 8006cfc:	0802af90 	.word	0x0802af90
 8006d00:	200005c4 	.word	0x200005c4
 8006d04:	0802afb4 	.word	0x0802afb4

08006d08 <SENDMAIL>:

#ifdef USE_MAIL
bool SENDMAIL() {
 8006d08:	b580      	push	{r7, lr}
 8006d0a:	b082      	sub	sp, #8
 8006d0c:	af00      	add	r7, sp, #0
  bool result = false;
 8006d0e:	1dfb      	adds	r3, r7, #7
 8006d10:	2200      	movs	r2, #0
 8006d12:	701a      	strb	r2, [r3, #0]
  txLength = CreateMailMessage(&result, true);
 8006d14:	1dfb      	adds	r3, r7, #7
 8006d16:	2101      	movs	r1, #1
 8006d18:	0018      	movs	r0, r3
 8006d1a:	f7fe fb89 	bl	8005430 <CreateMailMessage>
 8006d1e:	0003      	movs	r3, r0
 8006d20:	001a      	movs	r2, r3
 8006d22:	4b04      	ldr	r3, [pc, #16]	@ (8006d34 <SENDMAIL+0x2c>)
 8006d24:	801a      	strh	r2, [r3, #0]
//  Debug("SENDMAIL ESP_Send result = %d, transmitted data %d chars", result, txLength);
  return result;
 8006d26:	1dfb      	adds	r3, r7, #7
 8006d28:	781b      	ldrb	r3, [r3, #0]
}
 8006d2a:	0018      	movs	r0, r3
 8006d2c:	46bd      	mov	sp, r7
 8006d2e:	b002      	add	sp, #8
 8006d30:	bd80      	pop	{r7, pc}
 8006d32:	46c0      	nop			@ (mov r8, r8)
 8006d34:	200005bc 	.word	0x200005bc

08006d38 <HTTPCPOST_MAILAPI>:

bool HTTPCPOST_MAILAPI() {
 8006d38:	b5b0      	push	{r4, r5, r7, lr}
 8006d3a:	b090      	sub	sp, #64	@ 0x40
 8006d3c:	af02      	add	r7, sp, #8
  bool txresult = false;
 8006d3e:	2133      	movs	r1, #51	@ 0x33
 8006d40:	187b      	adds	r3, r7, r1
 8006d42:	2200      	movs	r2, #0
 8006d44:	701a      	strb	r2, [r3, #0]
  uint16_t maillength = CreateMailMessage(&txresult, false);
 8006d46:	2536      	movs	r5, #54	@ 0x36
 8006d48:	197c      	adds	r4, r7, r5
 8006d4a:	187b      	adds	r3, r7, r1
 8006d4c:	2100      	movs	r1, #0
 8006d4e:	0018      	movs	r0, r3
 8006d50:	f7fe fb6e 	bl	8005430 <CreateMailMessage>
 8006d54:	0003      	movs	r3, r0
 8006d56:	8023      	strh	r3, [r4, #0]
  uint8_t MailAPIKeyConfig[MailAPIKeyMaxLength];
  ReadUint8ArrayEEprom(MailAPIKeyConfigAddr, MailAPIKeyConfig, MailAPIKeyMaxLength);
 8006d58:	003b      	movs	r3, r7
 8006d5a:	4814      	ldr	r0, [pc, #80]	@ (8006dac <HTTPCPOST_MAILAPI+0x74>)
 8006d5c:	2230      	movs	r2, #48	@ 0x30
 8006d5e:	0019      	movs	r1, r3
 8006d60:	f005 f9ca 	bl	800c0f8 <ReadUint8ArrayEEprom>
  sprintf(message, "AT+HTTPCPOST=%s,%d,3,%s,\"accept: application/json\",\"X-Smtp2go-Api-Key: %s\"\r\n", APIMail, maillength, HEADER1, (char*)MailAPIKeyConfig);
 8006d64:	197b      	adds	r3, r7, r5
 8006d66:	881c      	ldrh	r4, [r3, #0]
 8006d68:	4a11      	ldr	r2, [pc, #68]	@ (8006db0 <HTTPCPOST_MAILAPI+0x78>)
 8006d6a:	4912      	ldr	r1, [pc, #72]	@ (8006db4 <HTTPCPOST_MAILAPI+0x7c>)
 8006d6c:	4812      	ldr	r0, [pc, #72]	@ (8006db8 <HTTPCPOST_MAILAPI+0x80>)
 8006d6e:	003b      	movs	r3, r7
 8006d70:	9301      	str	r3, [sp, #4]
 8006d72:	4b12      	ldr	r3, [pc, #72]	@ (8006dbc <HTTPCPOST_MAILAPI+0x84>)
 8006d74:	9300      	str	r3, [sp, #0]
 8006d76:	0023      	movs	r3, r4
 8006d78:	f01f fa8a 	bl	8026290 <siprintf>
  uint16_t len = strlen(message);
 8006d7c:	4b0e      	ldr	r3, [pc, #56]	@ (8006db8 <HTTPCPOST_MAILAPI+0x80>)
 8006d7e:	0018      	movs	r0, r3
 8006d80:	f7f9 f9f4 	bl	800016c <strlen>
 8006d84:	0002      	movs	r2, r0
 8006d86:	2134      	movs	r1, #52	@ 0x34
 8006d88:	187b      	adds	r3, r7, r1
 8006d8a:	801a      	strh	r2, [r3, #0]
  if(ESP_Send((uint8_t*)message, len)){
 8006d8c:	187b      	adds	r3, r7, r1
 8006d8e:	881a      	ldrh	r2, [r3, #0]
 8006d90:	4b09      	ldr	r3, [pc, #36]	@ (8006db8 <HTTPCPOST_MAILAPI+0x80>)
 8006d92:	0011      	movs	r1, r2
 8006d94:	0018      	movs	r0, r3
 8006d96:	f7fe f863 	bl	8004e60 <ESP_Send>
 8006d9a:	1e03      	subs	r3, r0, #0
 8006d9c:	d001      	beq.n	8006da2 <HTTPCPOST_MAILAPI+0x6a>
    return true;
 8006d9e:	2301      	movs	r3, #1
 8006da0:	e000      	b.n	8006da4 <HTTPCPOST_MAILAPI+0x6c>
  }
  return false;
 8006da2:	2300      	movs	r3, #0
}
 8006da4:	0018      	movs	r0, r3
 8006da6:	46bd      	mov	sp, r7
 8006da8:	b00e      	add	sp, #56	@ 0x38
 8006daa:	bdb0      	pop	{r4, r5, r7, pc}
 8006dac:	080802c0 	.word	0x080802c0
 8006db0:	0802dd68 	.word	0x0802dd68
 8006db4:	0802afd8 	.word	0x0802afd8
 8006db8:	200005c4 	.word	0x200005c4
 8006dbc:	0802afb4 	.word	0x0802afb4

08006dc0 <SENDDATA>:
#endif

bool SENDDATA(){
 8006dc0:	b580      	push	{r7, lr}
 8006dc2:	b082      	sub	sp, #8
 8006dc4:	af00      	add	r7, sp, #0
  bool result = false;
 8006dc6:	1dfb      	adds	r3, r7, #7
 8006dc8:	2200      	movs	r2, #0
 8006dca:	701a      	strb	r2, [r3, #0]
  txLength = CreateMessage(&result, true);
 8006dcc:	1dfb      	adds	r3, r7, #7
 8006dce:	2101      	movs	r1, #1
 8006dd0:	0018      	movs	r0, r3
 8006dd2:	f7fe fbd1 	bl	8005578 <CreateMessage>
 8006dd6:	0003      	movs	r3, r0
 8006dd8:	001a      	movs	r2, r3
 8006dda:	4b04      	ldr	r3, [pc, #16]	@ (8006dec <SENDDATA+0x2c>)
 8006ddc:	801a      	strh	r2, [r3, #0]
//  Debug("SENDDATA ESP_Send result = %d, transmitted data %d chars", result, txLength);
  return result;
 8006dde:	1dfb      	adds	r3, r7, #7
 8006de0:	781b      	ldrb	r3, [r3, #0]
}
 8006de2:	0018      	movs	r0, r3
 8006de4:	46bd      	mov	sp, r7
 8006de6:	b002      	add	sp, #8
 8006de8:	bd80      	pop	{r7, pc}
 8006dea:	46c0      	nop			@ (mov r8, r8)
 8006dec:	200005bc 	.word	0x200005bc

08006df0 <SLEEP>:

bool SLEEP(){
 8006df0:	b580      	push	{r7, lr}
 8006df2:	b082      	sub	sp, #8
 8006df4:	af00      	add	r7, sp, #0
  char* atCommand = "AT+GSLP=30000\r\n";
 8006df6:	4b0b      	ldr	r3, [pc, #44]	@ (8006e24 <SLEEP+0x34>)
 8006df8:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	0018      	movs	r0, r3
 8006dfe:	f7f9 f9b5 	bl	800016c <strlen>
 8006e02:	0003      	movs	r3, r0
 8006e04:	b29a      	uxth	r2, r3
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	0011      	movs	r1, r2
 8006e0a:	0018      	movs	r0, r3
 8006e0c:	f7fe f828 	bl	8004e60 <ESP_Send>
 8006e10:	1e03      	subs	r3, r0, #0
 8006e12:	d001      	beq.n	8006e18 <SLEEP+0x28>
    return true;
 8006e14:	2301      	movs	r3, #1
 8006e16:	e000      	b.n	8006e1a <SLEEP+0x2a>
  }
  else{
    return false;
 8006e18:	2300      	movs	r3, #0
  }
}
 8006e1a:	0018      	movs	r0, r3
 8006e1c:	46bd      	mov	sp, r7
 8006e1e:	b002      	add	sp, #8
 8006e20:	bd80      	pop	{r7, pc}
 8006e22:	46c0      	nop			@ (mov r8, r8)
 8006e24:	0802b028 	.word	0x0802b028

08006e28 <CIPSNTPCFG>:

bool CIPSNTPCFG(){
 8006e28:	b580      	push	{r7, lr}
 8006e2a:	b082      	sub	sp, #8
 8006e2c:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CIPSNTPCFG=1,100,\"nl.pool.ntp.org\",\"time.google.com\",\"time.windows.com\"\r\n";
 8006e2e:	4b0d      	ldr	r3, [pc, #52]	@ (8006e64 <CIPSNTPCFG+0x3c>)
 8006e30:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	0018      	movs	r0, r3
 8006e36:	f7f9 f999 	bl	800016c <strlen>
 8006e3a:	0003      	movs	r3, r0
 8006e3c:	b29a      	uxth	r2, r3
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	0011      	movs	r1, r2
 8006e42:	0018      	movs	r0, r3
 8006e44:	f7fe f80c 	bl	8004e60 <ESP_Send>
 8006e48:	1e03      	subs	r3, r0, #0
 8006e4a:	d006      	beq.n	8006e5a <CIPSNTPCFG+0x32>
    HAL_Delay(1000);
 8006e4c:	23fa      	movs	r3, #250	@ 0xfa
 8006e4e:	009b      	lsls	r3, r3, #2
 8006e50:	0018      	movs	r0, r3
 8006e52:	f00d fd75 	bl	8014940 <HAL_Delay>
    return true;
 8006e56:	2301      	movs	r3, #1
 8006e58:	e000      	b.n	8006e5c <CIPSNTPCFG+0x34>
  }
  else{
    return false;
 8006e5a:	2300      	movs	r3, #0
  }
}
 8006e5c:	0018      	movs	r0, r3
 8006e5e:	46bd      	mov	sp, r7
 8006e60:	b002      	add	sp, #8
 8006e62:	bd80      	pop	{r7, pc}
 8006e64:	0802b038 	.word	0x0802b038

08006e68 <CIPSNTPTIME>:

bool CIPSNTPTIME(){
 8006e68:	b580      	push	{r7, lr}
 8006e6a:	b082      	sub	sp, #8
 8006e6c:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CIPSNTPTIME?\r\n";
 8006e6e:	4b0b      	ldr	r3, [pc, #44]	@ (8006e9c <CIPSNTPTIME+0x34>)
 8006e70:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	0018      	movs	r0, r3
 8006e76:	f7f9 f979 	bl	800016c <strlen>
 8006e7a:	0003      	movs	r3, r0
 8006e7c:	b29a      	uxth	r2, r3
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	0011      	movs	r1, r2
 8006e82:	0018      	movs	r0, r3
 8006e84:	f7fd ffec 	bl	8004e60 <ESP_Send>
 8006e88:	1e03      	subs	r3, r0, #0
 8006e8a:	d001      	beq.n	8006e90 <CIPSNTPTIME+0x28>
    return true;
 8006e8c:	2301      	movs	r3, #1
 8006e8e:	e000      	b.n	8006e92 <CIPSNTPTIME+0x2a>
  }
  else{
    return false;
 8006e90:	2300      	movs	r3, #0
  }
}
 8006e92:	0018      	movs	r0, r3
 8006e94:	46bd      	mov	sp, r7
 8006e96:	b002      	add	sp, #8
 8006e98:	bd80      	pop	{r7, pc}
 8006e9a:	46c0      	nop			@ (mov r8, r8)
 8006e9c:	0802b088 	.word	0x0802b088

08006ea0 <CIPSNTPINTV>:

bool CIPSNTPINTV(){
 8006ea0:	b580      	push	{r7, lr}
 8006ea2:	b082      	sub	sp, #8
 8006ea4:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CIPSNTPINTV=14400\r\n";
 8006ea6:	4b0b      	ldr	r3, [pc, #44]	@ (8006ed4 <CIPSNTPINTV+0x34>)
 8006ea8:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	0018      	movs	r0, r3
 8006eae:	f7f9 f95d 	bl	800016c <strlen>
 8006eb2:	0003      	movs	r3, r0
 8006eb4:	b29a      	uxth	r2, r3
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	0011      	movs	r1, r2
 8006eba:	0018      	movs	r0, r3
 8006ebc:	f7fd ffd0 	bl	8004e60 <ESP_Send>
 8006ec0:	1e03      	subs	r3, r0, #0
 8006ec2:	d001      	beq.n	8006ec8 <CIPSNTPINTV+0x28>
    return true;
 8006ec4:	2301      	movs	r3, #1
 8006ec6:	e000      	b.n	8006eca <CIPSNTPINTV+0x2a>
  }
  else{
    return false;
 8006ec8:	2300      	movs	r3, #0
  }
}
 8006eca:	0018      	movs	r0, r3
 8006ecc:	46bd      	mov	sp, r7
 8006ece:	b002      	add	sp, #8
 8006ed0:	bd80      	pop	{r7, pc}
 8006ed2:	46c0      	nop			@ (mov r8, r8)
 8006ed4:	0802b09c 	.word	0x0802b09c

08006ed8 <DMA_ProcessBuffer>:

Receive_Status DMA_ProcessBuffer(uint8_t expectation) {
 8006ed8:	b5b0      	push	{r4, r5, r7, lr}
 8006eda:	b084      	sub	sp, #16
 8006edc:	af00      	add	r7, sp, #0
 8006ede:	0002      	movs	r2, r0
 8006ee0:	1dfb      	adds	r3, r7, #7
 8006ee2:	701a      	strb	r2, [r3, #0]
    uint16_t pos = ESP_MAX_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(&hdma_usart4_rx);
 8006ee4:	4b6c      	ldr	r3, [pc, #432]	@ (8007098 <DMA_ProcessBuffer+0x1c0>)
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	685b      	ldr	r3, [r3, #4]
 8006eea:	b29a      	uxth	r2, r3
 8006eec:	200e      	movs	r0, #14
 8006eee:	183b      	adds	r3, r7, r0
 8006ef0:	2180      	movs	r1, #128	@ 0x80
 8006ef2:	0049      	lsls	r1, r1, #1
 8006ef4:	1a8a      	subs	r2, r1, r2
 8006ef6:	801a      	strh	r2, [r3, #0]
    static volatile uint8_t OldPos = 0;
    static volatile uint8_t TempPos = 0;
    Receive_Status status = RECEIVE_STATUS_INCOMPLETE;
 8006ef8:	230d      	movs	r3, #13
 8006efa:	18fb      	adds	r3, r7, r3
 8006efc:	2203      	movs	r2, #3
 8006efe:	701a      	strb	r2, [r3, #0]
    if(pos > ESP_MAX_BUFFER_SIZE) {
 8006f00:	183b      	adds	r3, r7, r0
 8006f02:	881a      	ldrh	r2, [r3, #0]
 8006f04:	2380      	movs	r3, #128	@ 0x80
 8006f06:	005b      	lsls	r3, r3, #1
 8006f08:	429a      	cmp	r2, r3
 8006f0a:	d903      	bls.n	8006f14 <DMA_ProcessBuffer+0x3c>
      pos = ESP_MAX_BUFFER_SIZE;
 8006f0c:	183b      	adds	r3, r7, r0
 8006f0e:	2280      	movs	r2, #128	@ 0x80
 8006f10:	0052      	lsls	r2, r2, #1
 8006f12:	801a      	strh	r2, [r3, #0]
    }
    if(pos == OldPos){
 8006f14:	4b61      	ldr	r3, [pc, #388]	@ (800709c <DMA_ProcessBuffer+0x1c4>)
 8006f16:	781b      	ldrb	r3, [r3, #0]
 8006f18:	b2db      	uxtb	r3, r3
 8006f1a:	001a      	movs	r2, r3
 8006f1c:	230e      	movs	r3, #14
 8006f1e:	18fb      	adds	r3, r7, r3
 8006f20:	881b      	ldrh	r3, [r3, #0]
 8006f22:	4293      	cmp	r3, r2
 8006f24:	d131      	bne.n	8006f8a <DMA_ProcessBuffer+0xb2>
      if(retry > ESP_WIFI_WAIT_RESPONSE_TIME_FACTOR){
 8006f26:	4b5e      	ldr	r3, [pc, #376]	@ (80070a0 <DMA_ProcessBuffer+0x1c8>)
 8006f28:	781b      	ldrb	r3, [r3, #0]
 8006f2a:	2b14      	cmp	r3, #20
 8006f2c:	d91b      	bls.n	8006f66 <DMA_ProcessBuffer+0x8e>
        retry = 0;
 8006f2e:	4b5c      	ldr	r3, [pc, #368]	@ (80070a0 <DMA_ProcessBuffer+0x1c8>)
 8006f30:	2200      	movs	r2, #0
 8006f32:	701a      	strb	r2, [r3, #0]
        //EspState = ESP_STATE_SEND;
        if(ATCommand == AT_WAKEUP && testRound == true){
 8006f34:	4b5b      	ldr	r3, [pc, #364]	@ (80070a4 <DMA_ProcessBuffer+0x1cc>)
 8006f36:	781b      	ldrb	r3, [r3, #0]
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d107      	bne.n	8006f4c <DMA_ProcessBuffer+0x74>
 8006f3c:	4b5a      	ldr	r3, [pc, #360]	@ (80070a8 <DMA_ProcessBuffer+0x1d0>)
 8006f3e:	781b      	ldrb	r3, [r3, #0]
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d003      	beq.n	8006f4c <DMA_ProcessBuffer+0x74>
          status = RECEIVE_STATUS_UNPROGGED;
 8006f44:	230d      	movs	r3, #13
 8006f46:	18fb      	adds	r3, r7, r3
 8006f48:	2207      	movs	r2, #7
 8006f4a:	701a      	strb	r2, [r3, #0]
        }
        if(ATCommand == AT_CWJAP){
 8006f4c:	4b55      	ldr	r3, [pc, #340]	@ (80070a4 <DMA_ProcessBuffer+0x1cc>)
 8006f4e:	781b      	ldrb	r3, [r3, #0]
 8006f50:	2b08      	cmp	r3, #8
 8006f52:	d103      	bne.n	8006f5c <DMA_ProcessBuffer+0x84>
          EspState = ESP_STATE_MODE_SELECT;
 8006f54:	4b55      	ldr	r3, [pc, #340]	@ (80070ac <DMA_ProcessBuffer+0x1d4>)
 8006f56:	220b      	movs	r2, #11
 8006f58:	701a      	strb	r2, [r3, #0]
 8006f5a:	e016      	b.n	8006f8a <DMA_ProcessBuffer+0xb2>
        }
        else{
          status = RECEIVE_STATUS_TIMEOUT;
 8006f5c:	230d      	movs	r3, #13
 8006f5e:	18fb      	adds	r3, r7, r3
 8006f60:	2206      	movs	r2, #6
 8006f62:	701a      	strb	r2, [r3, #0]
 8006f64:	e011      	b.n	8006f8a <DMA_ProcessBuffer+0xb2>
        }
      }
     else{
       retry ++;
 8006f66:	4b4e      	ldr	r3, [pc, #312]	@ (80070a0 <DMA_ProcessBuffer+0x1c8>)
 8006f68:	781b      	ldrb	r3, [r3, #0]
 8006f6a:	3301      	adds	r3, #1
 8006f6c:	b2da      	uxtb	r2, r3
 8006f6e:	4b4c      	ldr	r3, [pc, #304]	@ (80070a0 <DMA_ProcessBuffer+0x1c8>)
 8006f70:	701a      	strb	r2, [r3, #0]
       ESPTimeStamp = HAL_GetTick() + ESP_WIFI_RETRY_TIME;
 8006f72:	f00d fcdb 	bl	801492c <HAL_GetTick>
 8006f76:	0003      	movs	r3, r0
 8006f78:	33f5      	adds	r3, #245	@ 0xf5
 8006f7a:	33ff      	adds	r3, #255	@ 0xff
 8006f7c:	001a      	movs	r2, r3
 8006f7e:	4b4c      	ldr	r3, [pc, #304]	@ (80070b0 <DMA_ProcessBuffer+0x1d8>)
 8006f80:	601a      	str	r2, [r3, #0]
       status = RECEIVE_STATUS_RETRY;
 8006f82:	230d      	movs	r3, #13
 8006f84:	18fb      	adds	r3, r7, r3
 8006f86:	2204      	movs	r2, #4
 8006f88:	701a      	strb	r2, [r3, #0]
      }
    }
    if (pos != OldPos) {
 8006f8a:	4b44      	ldr	r3, [pc, #272]	@ (800709c <DMA_ProcessBuffer+0x1c4>)
 8006f8c:	781b      	ldrb	r3, [r3, #0]
 8006f8e:	b2db      	uxtb	r3, r3
 8006f90:	001a      	movs	r2, r3
 8006f92:	210e      	movs	r1, #14
 8006f94:	187b      	adds	r3, r7, r1
 8006f96:	881b      	ldrh	r3, [r3, #0]
 8006f98:	4293      	cmp	r3, r2
 8006f9a:	d100      	bne.n	8006f9e <DMA_ProcessBuffer+0xc6>
 8006f9c:	e075      	b.n	800708a <DMA_ProcessBuffer+0x1b2>
      retry = 0;
 8006f9e:	4b40      	ldr	r3, [pc, #256]	@ (80070a0 <DMA_ProcessBuffer+0x1c8>)
 8006fa0:	2200      	movs	r2, #0
 8006fa2:	701a      	strb	r2, [r3, #0]
      if(TempPos == OldPos){
 8006fa4:	4b43      	ldr	r3, [pc, #268]	@ (80070b4 <DMA_ProcessBuffer+0x1dc>)
 8006fa6:	781b      	ldrb	r3, [r3, #0]
 8006fa8:	b2da      	uxtb	r2, r3
 8006faa:	4b3c      	ldr	r3, [pc, #240]	@ (800709c <DMA_ProcessBuffer+0x1c4>)
 8006fac:	781b      	ldrb	r3, [r3, #0]
 8006fae:	b2db      	uxtb	r3, r3
 8006fb0:	429a      	cmp	r2, r3
 8006fb2:	d109      	bne.n	8006fc8 <DMA_ProcessBuffer+0xf0>
        TempPos = pos;
 8006fb4:	187b      	adds	r3, r7, r1
 8006fb6:	881b      	ldrh	r3, [r3, #0]
 8006fb8:	b2da      	uxtb	r2, r3
 8006fba:	4b3e      	ldr	r3, [pc, #248]	@ (80070b4 <DMA_ProcessBuffer+0x1dc>)
 8006fbc:	701a      	strb	r2, [r3, #0]
        status = RECEIVE_STATUS_LOOP;
 8006fbe:	230d      	movs	r3, #13
 8006fc0:	18fb      	adds	r3, r7, r3
 8006fc2:	220a      	movs	r2, #10
 8006fc4:	701a      	strb	r2, [r3, #0]
 8006fc6:	e060      	b.n	800708a <DMA_ProcessBuffer+0x1b2>
      }
      else{
        if(TempPos != pos){
 8006fc8:	4b3a      	ldr	r3, [pc, #232]	@ (80070b4 <DMA_ProcessBuffer+0x1dc>)
 8006fca:	781b      	ldrb	r3, [r3, #0]
 8006fcc:	b2db      	uxtb	r3, r3
 8006fce:	001a      	movs	r2, r3
 8006fd0:	210e      	movs	r1, #14
 8006fd2:	187b      	adds	r3, r7, r1
 8006fd4:	881b      	ldrh	r3, [r3, #0]
 8006fd6:	4293      	cmp	r3, r2
 8006fd8:	d009      	beq.n	8006fee <DMA_ProcessBuffer+0x116>
          TempPos = pos;
 8006fda:	187b      	adds	r3, r7, r1
 8006fdc:	881b      	ldrh	r3, [r3, #0]
 8006fde:	b2da      	uxtb	r2, r3
 8006fe0:	4b34      	ldr	r3, [pc, #208]	@ (80070b4 <DMA_ProcessBuffer+0x1dc>)
 8006fe2:	701a      	strb	r2, [r3, #0]
          status = RECEIVE_STATUS_LOOP;
 8006fe4:	230d      	movs	r3, #13
 8006fe6:	18fb      	adds	r3, r7, r3
 8006fe8:	220a      	movs	r2, #10
 8006fea:	701a      	strb	r2, [r3, #0]
 8006fec:	e04d      	b.n	800708a <DMA_ProcessBuffer+0x1b2>
        }
        else{
          if (pos > OldPos) {
 8006fee:	4b2b      	ldr	r3, [pc, #172]	@ (800709c <DMA_ProcessBuffer+0x1c4>)
 8006ff0:	781b      	ldrb	r3, [r3, #0]
 8006ff2:	b2db      	uxtb	r3, r3
 8006ff4:	001a      	movs	r2, r3
 8006ff6:	210e      	movs	r1, #14
 8006ff8:	187b      	adds	r3, r7, r1
 8006ffa:	881b      	ldrh	r3, [r3, #0]
 8006ffc:	4293      	cmp	r3, r2
 8006ffe:	d917      	bls.n	8007030 <DMA_ProcessBuffer+0x158>
              status = ParseBuffer(&RxBuffer[OldPos], (pos - OldPos), expectation);
 8007000:	4b26      	ldr	r3, [pc, #152]	@ (800709c <DMA_ProcessBuffer+0x1c4>)
 8007002:	781b      	ldrb	r3, [r3, #0]
 8007004:	b2db      	uxtb	r3, r3
 8007006:	001a      	movs	r2, r3
 8007008:	4b2b      	ldr	r3, [pc, #172]	@ (80070b8 <DMA_ProcessBuffer+0x1e0>)
 800700a:	18d0      	adds	r0, r2, r3
 800700c:	4b23      	ldr	r3, [pc, #140]	@ (800709c <DMA_ProcessBuffer+0x1c4>)
 800700e:	781b      	ldrb	r3, [r3, #0]
 8007010:	b2db      	uxtb	r3, r3
 8007012:	001a      	movs	r2, r3
 8007014:	187b      	adds	r3, r7, r1
 8007016:	881b      	ldrh	r3, [r3, #0]
 8007018:	1a9b      	subs	r3, r3, r2
 800701a:	b299      	uxth	r1, r3
 800701c:	230d      	movs	r3, #13
 800701e:	18fc      	adds	r4, r7, r3
 8007020:	1dfb      	adds	r3, r7, #7
 8007022:	781b      	ldrb	r3, [r3, #0]
 8007024:	001a      	movs	r2, r3
 8007026:	f7ff fa2f 	bl	8006488 <ParseBuffer>
 800702a:	0003      	movs	r3, r0
 800702c:	7023      	strb	r3, [r4, #0]
 800702e:	e026      	b.n	800707e <DMA_ProcessBuffer+0x1a6>
          }
          else {
              // Buffer wrap-around
              status = ParseBuffer(&RxBuffer[OldPos], ESP_MAX_BUFFER_SIZE - OldPos, expectation);
 8007030:	4b1a      	ldr	r3, [pc, #104]	@ (800709c <DMA_ProcessBuffer+0x1c4>)
 8007032:	781b      	ldrb	r3, [r3, #0]
 8007034:	b2db      	uxtb	r3, r3
 8007036:	001a      	movs	r2, r3
 8007038:	4b1f      	ldr	r3, [pc, #124]	@ (80070b8 <DMA_ProcessBuffer+0x1e0>)
 800703a:	18d0      	adds	r0, r2, r3
 800703c:	4b17      	ldr	r3, [pc, #92]	@ (800709c <DMA_ProcessBuffer+0x1c4>)
 800703e:	781b      	ldrb	r3, [r3, #0]
 8007040:	b2db      	uxtb	r3, r3
 8007042:	001a      	movs	r2, r3
 8007044:	2380      	movs	r3, #128	@ 0x80
 8007046:	005b      	lsls	r3, r3, #1
 8007048:	1a9b      	subs	r3, r3, r2
 800704a:	b299      	uxth	r1, r3
 800704c:	250d      	movs	r5, #13
 800704e:	197c      	adds	r4, r7, r5
 8007050:	1dfb      	adds	r3, r7, #7
 8007052:	781b      	ldrb	r3, [r3, #0]
 8007054:	001a      	movs	r2, r3
 8007056:	f7ff fa17 	bl	8006488 <ParseBuffer>
 800705a:	0003      	movs	r3, r0
 800705c:	7023      	strb	r3, [r4, #0]
              if (pos > 0) {
 800705e:	210e      	movs	r1, #14
 8007060:	187b      	adds	r3, r7, r1
 8007062:	881b      	ldrh	r3, [r3, #0]
 8007064:	2b00      	cmp	r3, #0
 8007066:	d00a      	beq.n	800707e <DMA_ProcessBuffer+0x1a6>
                  status = ParseBuffer(&RxBuffer[0], pos, expectation);
 8007068:	197c      	adds	r4, r7, r5
 800706a:	1dfb      	adds	r3, r7, #7
 800706c:	781a      	ldrb	r2, [r3, #0]
 800706e:	187b      	adds	r3, r7, r1
 8007070:	8819      	ldrh	r1, [r3, #0]
 8007072:	4b11      	ldr	r3, [pc, #68]	@ (80070b8 <DMA_ProcessBuffer+0x1e0>)
 8007074:	0018      	movs	r0, r3
 8007076:	f7ff fa07 	bl	8006488 <ParseBuffer>
 800707a:	0003      	movs	r3, r0
 800707c:	7023      	strb	r3, [r4, #0]
              }
          }
          OldPos = pos;
 800707e:	230e      	movs	r3, #14
 8007080:	18fb      	adds	r3, r7, r3
 8007082:	881b      	ldrh	r3, [r3, #0]
 8007084:	b2da      	uxtb	r2, r3
 8007086:	4b05      	ldr	r3, [pc, #20]	@ (800709c <DMA_ProcessBuffer+0x1c4>)
 8007088:	701a      	strb	r2, [r3, #0]
        }
      }
    }
    return status;
 800708a:	230d      	movs	r3, #13
 800708c:	18fb      	adds	r3, r7, r3
 800708e:	781b      	ldrb	r3, [r3, #0]
}
 8007090:	0018      	movs	r0, r3
 8007092:	46bd      	mov	sp, r7
 8007094:	b004      	add	sp, #16
 8007096:	bdb0      	pop	{r4, r5, r7, pc}
 8007098:	20002458 	.word	0x20002458
 800709c:	20000934 	.word	0x20000934
 80070a0:	2000069c 	.word	0x2000069c
 80070a4:	20000701 	.word	0x20000701
 80070a8:	20000001 	.word	0x20000001
 80070ac:	20000030 	.word	0x20000030
 80070b0:	20000694 	.word	0x20000694
 80070b4:	20000935 	.word	0x20000935
 80070b8:	200004ac 	.word	0x200004ac

080070bc <clearDMABuffer>:

void clearDMABuffer(){
 80070bc:	b580      	push	{r7, lr}
 80070be:	af00      	add	r7, sp, #0
  memset(RxBuffer, '\0', ESP_MAX_BUFFER_SIZE);
 80070c0:	2380      	movs	r3, #128	@ 0x80
 80070c2:	005a      	lsls	r2, r3, #1
 80070c4:	4b03      	ldr	r3, [pc, #12]	@ (80070d4 <clearDMABuffer+0x18>)
 80070c6:	2100      	movs	r1, #0
 80070c8:	0018      	movs	r0, r3
 80070ca:	f01f fa29 	bl	8026520 <memset>
}
 80070ce:	46c0      	nop			@ (mov r8, r8)
 80070d0:	46bd      	mov	sp, r7
 80070d2:	bd80      	pop	{r7, pc}
 80070d4:	200004ac 	.word	0x200004ac

080070d8 <ATCompare>:

//Compares the received status to the expected status (OK, ready, >).
bool ATCompare(uint8_t AT_Command_Received, uint8_t AT_Command_Expected){
 80070d8:	b580      	push	{r7, lr}
 80070da:	b084      	sub	sp, #16
 80070dc:	af00      	add	r7, sp, #0
 80070de:	0002      	movs	r2, r0
 80070e0:	1dfb      	adds	r3, r7, #7
 80070e2:	701a      	strb	r2, [r3, #0]
 80070e4:	1dbb      	adds	r3, r7, #6
 80070e6:	1c0a      	adds	r2, r1, #0
 80070e8:	701a      	strb	r2, [r3, #0]
  bool value = false;
 80070ea:	210f      	movs	r1, #15
 80070ec:	187b      	adds	r3, r7, r1
 80070ee:	2200      	movs	r2, #0
 80070f0:	701a      	strb	r2, [r3, #0]
  if(AT_Command_Expected == RECEIVE_EXPECTATION_OK){
 80070f2:	1dbb      	adds	r3, r7, #6
 80070f4:	781b      	ldrb	r3, [r3, #0]
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d105      	bne.n	8007106 <ATCompare+0x2e>
    value = (AT_Command_Received == RECEIVE_STATUS_OK);
 80070fa:	187b      	adds	r3, r7, r1
 80070fc:	1dfa      	adds	r2, r7, #7
 80070fe:	7812      	ldrb	r2, [r2, #0]
 8007100:	4251      	negs	r1, r2
 8007102:	414a      	adcs	r2, r1
 8007104:	701a      	strb	r2, [r3, #0]
  }
  if(AT_Command_Expected == RECEIVE_EXPECTATION_READY){
 8007106:	1dbb      	adds	r3, r7, #6
 8007108:	781b      	ldrb	r3, [r3, #0]
 800710a:	2b01      	cmp	r3, #1
 800710c:	d107      	bne.n	800711e <ATCompare+0x46>
    value = (AT_Command_Received == RECEIVE_STATUS_READY);
 800710e:	230f      	movs	r3, #15
 8007110:	18fb      	adds	r3, r7, r3
 8007112:	1dfa      	adds	r2, r7, #7
 8007114:	7812      	ldrb	r2, [r2, #0]
 8007116:	3a02      	subs	r2, #2
 8007118:	4251      	negs	r1, r2
 800711a:	414a      	adcs	r2, r1
 800711c:	701a      	strb	r2, [r3, #0]
  }
  if(AT_Command_Expected == RECEIVE_EXPECTATION_START){
 800711e:	1dbb      	adds	r3, r7, #6
 8007120:	781b      	ldrb	r3, [r3, #0]
 8007122:	2b02      	cmp	r3, #2
 8007124:	d107      	bne.n	8007136 <ATCompare+0x5e>
    value = (AT_Command_Received == RECEIVE_STATUS_START);
 8007126:	230f      	movs	r3, #15
 8007128:	18fb      	adds	r3, r7, r3
 800712a:	1dfa      	adds	r2, r7, #7
 800712c:	7812      	ldrb	r2, [r2, #0]
 800712e:	3a05      	subs	r2, #5
 8007130:	4251      	negs	r1, r2
 8007132:	414a      	adcs	r2, r1
 8007134:	701a      	strb	r2, [r3, #0]
  }
  if(AT_Command_Expected == RECEIVE_EXPECTATION_TIME){
 8007136:	1dbb      	adds	r3, r7, #6
 8007138:	781b      	ldrb	r3, [r3, #0]
 800713a:	2b05      	cmp	r3, #5
 800713c:	d107      	bne.n	800714e <ATCompare+0x76>
    value = (AT_Command_Received == RECEIVE_STATUS_TIME);
 800713e:	230f      	movs	r3, #15
 8007140:	18fb      	adds	r3, r7, r3
 8007142:	1dfa      	adds	r2, r7, #7
 8007144:	7812      	ldrb	r2, [r2, #0]
 8007146:	3a0b      	subs	r2, #11
 8007148:	4251      	negs	r1, r2
 800714a:	414a      	adcs	r2, r1
 800714c:	701a      	strb	r2, [r3, #0]
  }
  return(value);
 800714e:	230f      	movs	r3, #15
 8007150:	18fb      	adds	r3, r7, r3
 8007152:	781b      	ldrb	r3, [r3, #0]
}
 8007154:	0018      	movs	r0, r3
 8007156:	46bd      	mov	sp, r7
 8007158:	b004      	add	sp, #16
 800715a:	bd80      	pop	{r7, pc}

0800715c <AT_Send>:

bool AT_Send(AT_Commands state){
 800715c:	b590      	push	{r4, r7, lr}
 800715e:	b085      	sub	sp, #20
 8007160:	af00      	add	r7, sp, #0
 8007162:	0002      	movs	r2, r0
 8007164:	1dfb      	adds	r3, r7, #7
 8007166:	701a      	strb	r2, [r3, #0]
  bool ATCommandSend = false;
 8007168:	230f      	movs	r3, #15
 800716a:	18fb      	adds	r3, r7, r3
 800716c:	2200      	movs	r2, #0
 800716e:	701a      	strb	r2, [r3, #0]
  switch (state){
 8007170:	1dfb      	adds	r3, r7, #7
 8007172:	781b      	ldrb	r3, [r3, #0]
 8007174:	2b16      	cmp	r3, #22
 8007176:	d900      	bls.n	800717a <AT_Send+0x1e>
 8007178:	e161      	b.n	800743e <AT_Send+0x2e2>
 800717a:	009a      	lsls	r2, r3, #2
 800717c:	4bb3      	ldr	r3, [pc, #716]	@ (800744c <AT_Send+0x2f0>)
 800717e:	18d3      	adds	r3, r2, r3
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	469f      	mov	pc, r3

  case AT_WAKEUP:
  if(TimestampIsReached(ESPTimeStamp)){
 8007184:	4bb2      	ldr	r3, [pc, #712]	@ (8007450 <AT_Send+0x2f4>)
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	0018      	movs	r0, r3
 800718a:	f00c fe01 	bl	8013d90 <TimestampIsReached>
 800718e:	1e03      	subs	r3, r0, #0
 8007190:	d100      	bne.n	8007194 <AT_Send+0x38>
 8007192:	e153      	b.n	800743c <AT_Send+0x2e0>
    Debug("AT_WAKEUP");
 8007194:	4aaf      	ldr	r2, [pc, #700]	@ (8007454 <AT_Send+0x2f8>)
 8007196:	4bb0      	ldr	r3, [pc, #704]	@ (8007458 <AT_Send+0x2fc>)
 8007198:	0019      	movs	r1, r3
 800719a:	2003      	movs	r0, #3
 800719c:	f00c fe4e 	bl	8013e3c <CreateLine>
    ATCommandSend = PollAwake();
 80071a0:	230f      	movs	r3, #15
 80071a2:	18fc      	adds	r4, r7, r3
 80071a4:	f7ff fb60 	bl	8006868 <PollAwake>
 80071a8:	0003      	movs	r3, r0
 80071aa:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_LONG;
 80071ac:	f00d fbbe 	bl	801492c <HAL_GetTick>
 80071b0:	0003      	movs	r3, r0
 80071b2:	3332      	adds	r3, #50	@ 0x32
 80071b4:	001a      	movs	r2, r3
 80071b6:	4ba6      	ldr	r3, [pc, #664]	@ (8007450 <AT_Send+0x2f4>)
 80071b8:	601a      	str	r2, [r3, #0]
  }
  break;
 80071ba:	e13f      	b.n	800743c <AT_Send+0x2e0>

  case AT_SET_RFPOWER:
//    Debug("Setting RF Power");
    ATCommandSend = RFPower();
 80071bc:	230f      	movs	r3, #15
 80071be:	18fc      	adds	r4, r7, r3
 80071c0:	f7ff fb6e 	bl	80068a0 <RFPower>
 80071c4:	0003      	movs	r3, r0
 80071c6:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 80071c8:	f00d fbb0 	bl	801492c <HAL_GetTick>
 80071cc:	0003      	movs	r3, r0
 80071ce:	330a      	adds	r3, #10
 80071d0:	001a      	movs	r2, r3
 80071d2:	4b9f      	ldr	r3, [pc, #636]	@ (8007450 <AT_Send+0x2f4>)
 80071d4:	601a      	str	r2, [r3, #0]
    break;
 80071d6:	e132      	b.n	800743e <AT_Send+0x2e2>

  case AT_CHECK_RFPOWER:
//    Debug("Checking RF Power");
    ATCommandSend = CheckRFPower();
 80071d8:	230f      	movs	r3, #15
 80071da:	18fc      	adds	r4, r7, r3
 80071dc:	f7ff fb7c 	bl	80068d8 <CheckRFPower>
 80071e0:	0003      	movs	r3, r0
 80071e2:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 80071e4:	f00d fba2 	bl	801492c <HAL_GetTick>
 80071e8:	0003      	movs	r3, r0
 80071ea:	330a      	adds	r3, #10
 80071ec:	001a      	movs	r2, r3
 80071ee:	4b98      	ldr	r3, [pc, #608]	@ (8007450 <AT_Send+0x2f4>)
 80071f0:	601a      	str	r2, [r3, #0]
    break;
 80071f2:	e124      	b.n	800743e <AT_Send+0x2e2>

  case AT_RESTORE:
//    Debug("Restoring ESP");
    ATCommandSend = ATRestore();
 80071f4:	230f      	movs	r3, #15
 80071f6:	18fc      	adds	r4, r7, r3
 80071f8:	f7ff fb8a 	bl	8006910 <ATRestore>
 80071fc:	0003      	movs	r3, r0
 80071fe:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_LONG;
 8007200:	f00d fb94 	bl	801492c <HAL_GetTick>
 8007204:	0003      	movs	r3, r0
 8007206:	3332      	adds	r3, #50	@ 0x32
 8007208:	001a      	movs	r2, r3
 800720a:	4b91      	ldr	r3, [pc, #580]	@ (8007450 <AT_Send+0x2f4>)
 800720c:	601a      	str	r2, [r3, #0]
    break;
 800720e:	e116      	b.n	800743e <AT_Send+0x2e2>

  case AT_CWINIT:
//    Debug("Initializing Wi-Fi");
    ATCommandSend = CWINIT();
 8007210:	230f      	movs	r3, #15
 8007212:	18fc      	adds	r4, r7, r3
 8007214:	f7ff fb98 	bl	8006948 <CWINIT>
 8007218:	0003      	movs	r3, r0
 800721a:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_WIFI_INIT_TIME;
 800721c:	f00d fb86 	bl	801492c <HAL_GetTick>
 8007220:	0003      	movs	r3, r0
 8007222:	33f5      	adds	r3, #245	@ 0xf5
 8007224:	33ff      	adds	r3, #255	@ 0xff
 8007226:	001a      	movs	r2, r3
 8007228:	4b89      	ldr	r3, [pc, #548]	@ (8007450 <AT_Send+0x2f4>)
 800722a:	601a      	str	r2, [r3, #0]
    break;
 800722c:	e107      	b.n	800743e <AT_Send+0x2e2>

  case AT_CWSTATE:
//    Debug("Checking current SSID");
    ATCommandSend = CWSTATE();
 800722e:	230f      	movs	r3, #15
 8007230:	18fc      	adds	r4, r7, r3
 8007232:	f7ff fc93 	bl	8006b5c <CWSTATE>
 8007236:	0003      	movs	r3, r0
 8007238:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_WIFI_INIT_TIME;
 800723a:	f00d fb77 	bl	801492c <HAL_GetTick>
 800723e:	0003      	movs	r3, r0
 8007240:	33f5      	adds	r3, #245	@ 0xf5
 8007242:	33ff      	adds	r3, #255	@ 0xff
 8007244:	001a      	movs	r2, r3
 8007246:	4b82      	ldr	r3, [pc, #520]	@ (8007450 <AT_Send+0x2f4>)
 8007248:	601a      	str	r2, [r3, #0]
    break;
 800724a:	e0f8      	b.n	800743e <AT_Send+0x2e2>

  case AT_CWMODE1:
//    Debug("Setting to station mode");
    ATCommandSend = CWMODE1();
 800724c:	230f      	movs	r3, #15
 800724e:	18fc      	adds	r4, r7, r3
 8007250:	f7ff fb96 	bl	8006980 <CWMODE1>
 8007254:	0003      	movs	r3, r0
 8007256:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8007258:	f00d fb68 	bl	801492c <HAL_GetTick>
 800725c:	0003      	movs	r3, r0
 800725e:	330a      	adds	r3, #10
 8007260:	001a      	movs	r2, r3
 8007262:	4b7b      	ldr	r3, [pc, #492]	@ (8007450 <AT_Send+0x2f4>)
 8007264:	601a      	str	r2, [r3, #0]
    break;
 8007266:	e0ea      	b.n	800743e <AT_Send+0x2e2>

  case AT_CWMODE2:
//    Debug("Setting to station mode");
    ATCommandSend = CWMODE2();
 8007268:	230f      	movs	r3, #15
 800726a:	18fc      	adds	r4, r7, r3
 800726c:	f7ff fba4 	bl	80069b8 <CWMODE2>
 8007270:	0003      	movs	r3, r0
 8007272:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8007274:	f00d fb5a 	bl	801492c <HAL_GetTick>
 8007278:	0003      	movs	r3, r0
 800727a:	330a      	adds	r3, #10
 800727c:	001a      	movs	r2, r3
 800727e:	4b74      	ldr	r3, [pc, #464]	@ (8007450 <AT_Send+0x2f4>)
 8007280:	601a      	str	r2, [r3, #0]
    break;
 8007282:	e0dc      	b.n	800743e <AT_Send+0x2e2>

  case AT_CWAUTOCONN:
//    Debug("Setting auto connect");
    ATCommandSend = CWAUTOCONN();
 8007284:	230f      	movs	r3, #15
 8007286:	18fc      	adds	r4, r7, r3
 8007288:	f7ff fbb2 	bl	80069f0 <CWAUTOCONN>
 800728c:	0003      	movs	r3, r0
 800728e:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8007290:	f00d fb4c 	bl	801492c <HAL_GetTick>
 8007294:	0003      	movs	r3, r0
 8007296:	330a      	adds	r3, #10
 8007298:	001a      	movs	r2, r3
 800729a:	4b6d      	ldr	r3, [pc, #436]	@ (8007450 <AT_Send+0x2f4>)
 800729c:	601a      	str	r2, [r3, #0]
    break;
 800729e:	e0ce      	b.n	800743e <AT_Send+0x2e2>

  case AT_CWJAP:
    Debug("Connect to Wi-Fi");
 80072a0:	4a6e      	ldr	r2, [pc, #440]	@ (800745c <AT_Send+0x300>)
 80072a2:	4b6d      	ldr	r3, [pc, #436]	@ (8007458 <AT_Send+0x2fc>)
 80072a4:	0019      	movs	r1, r3
 80072a6:	2003      	movs	r0, #3
 80072a8:	f00c fdc8 	bl	8013e3c <CreateLine>
    ATCommandSend = CWJAP();
 80072ac:	230f      	movs	r3, #15
 80072ae:	18fc      	adds	r4, r7, r3
 80072b0:	f7ff fbba 	bl	8006a28 <CWJAP>
 80072b4:	0003      	movs	r3, r0
 80072b6:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_LONG;
 80072b8:	f00d fb38 	bl	801492c <HAL_GetTick>
 80072bc:	0003      	movs	r3, r0
 80072be:	3332      	adds	r3, #50	@ 0x32
 80072c0:	001a      	movs	r2, r3
 80072c2:	4b63      	ldr	r3, [pc, #396]	@ (8007450 <AT_Send+0x2f4>)
 80072c4:	601a      	str	r2, [r3, #0]
    break;
 80072c6:	e0ba      	b.n	800743e <AT_Send+0x2e2>

  case AT_CWMODE3:
//    Debug("SET in station/soft-ap mode");
    ATCommandSend = CWMODE3();
 80072c8:	230f      	movs	r3, #15
 80072ca:	18fc      	adds	r4, r7, r3
 80072cc:	f7ff fc2a 	bl	8006b24 <CWMODE3>
 80072d0:	0003      	movs	r3, r0
 80072d2:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 80072d4:	f00d fb2a 	bl	801492c <HAL_GetTick>
 80072d8:	0003      	movs	r3, r0
 80072da:	330a      	adds	r3, #10
 80072dc:	001a      	movs	r2, r3
 80072de:	4b5c      	ldr	r3, [pc, #368]	@ (8007450 <AT_Send+0x2f4>)
 80072e0:	601a      	str	r2, [r3, #0]
    break;
 80072e2:	e0ac      	b.n	800743e <AT_Send+0x2e2>

  case AT_CWSAP:
//    Debug("SET soft AP mode parameters");
    ATCommandSend = CWSAP();
 80072e4:	230f      	movs	r3, #15
 80072e6:	18fc      	adds	r4, r7, r3
 80072e8:	f7ff fc54 	bl	8006b94 <CWSAP>
 80072ec:	0003      	movs	r3, r0
 80072ee:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 80072f0:	f00d fb1c 	bl	801492c <HAL_GetTick>
 80072f4:	0003      	movs	r3, r0
 80072f6:	330a      	adds	r3, #10
 80072f8:	001a      	movs	r2, r3
 80072fa:	4b55      	ldr	r3, [pc, #340]	@ (8007450 <AT_Send+0x2f4>)
 80072fc:	601a      	str	r2, [r3, #0]
    break;
 80072fe:	e09e      	b.n	800743e <AT_Send+0x2e2>

  case AT_CIPMUX:
//    Debug("ATCommandSend = CIPMUX()");
    ATCommandSend = CIPMUX();
 8007300:	230f      	movs	r3, #15
 8007302:	18fc      	adds	r4, r7, r3
 8007304:	f7ff fc62 	bl	8006bcc <CIPMUX>
 8007308:	0003      	movs	r3, r0
 800730a:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 800730c:	f00d fb0e 	bl	801492c <HAL_GetTick>
 8007310:	0003      	movs	r3, r0
 8007312:	330a      	adds	r3, #10
 8007314:	001a      	movs	r2, r3
 8007316:	4b4e      	ldr	r3, [pc, #312]	@ (8007450 <AT_Send+0x2f4>)
 8007318:	601a      	str	r2, [r3, #0]
    break;
 800731a:	e090      	b.n	800743e <AT_Send+0x2e2>

  case AT_WEBSERVER:
//    Debug("ATCommandSend = WEBSERVER()");
    ATCommandSend = WEBSERVER();
 800731c:	230f      	movs	r3, #15
 800731e:	18fc      	adds	r4, r7, r3
 8007320:	f7ff fc70 	bl	8006c04 <WEBSERVER>
 8007324:	0003      	movs	r3, r0
 8007326:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8007328:	f00d fb00 	bl	801492c <HAL_GetTick>
 800732c:	0003      	movs	r3, r0
 800732e:	330a      	adds	r3, #10
 8007330:	001a      	movs	r2, r3
 8007332:	4b47      	ldr	r3, [pc, #284]	@ (8007450 <AT_Send+0x2f4>)
 8007334:	601a      	str	r2, [r3, #0]
    break;
 8007336:	e082      	b.n	800743e <AT_Send+0x2e2>

  case AT_HTTPCPOST:
    ATCommandSend = HTTPCPOST();
 8007338:	230f      	movs	r3, #15
 800733a:	18fc      	adds	r4, r7, r3
 800733c:	f7ff fc7e 	bl	8006c3c <HTTPCPOST>
 8007340:	0003      	movs	r3, r0
 8007342:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_WIFI_INIT_TIME;
 8007344:	f00d faf2 	bl	801492c <HAL_GetTick>
 8007348:	0003      	movs	r3, r0
 800734a:	33f5      	adds	r3, #245	@ 0xf5
 800734c:	33ff      	adds	r3, #255	@ 0xff
 800734e:	001a      	movs	r2, r3
 8007350:	4b3f      	ldr	r3, [pc, #252]	@ (8007450 <AT_Send+0x2f4>)
 8007352:	601a      	str	r2, [r3, #0]
    break;
 8007354:	e073      	b.n	800743e <AT_Send+0x2e2>

  case AT_SENDDATA:
//    Debug("Send the data");
    ATCommandSend = SENDDATA();
 8007356:	230f      	movs	r3, #15
 8007358:	18fc      	adds	r4, r7, r3
 800735a:	f7ff fd31 	bl	8006dc0 <SENDDATA>
 800735e:	0003      	movs	r3, r0
 8007360:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_WIFI_INIT_TIME; // + 7000;
 8007362:	f00d fae3 	bl	801492c <HAL_GetTick>
 8007366:	0003      	movs	r3, r0
 8007368:	33f5      	adds	r3, #245	@ 0xf5
 800736a:	33ff      	adds	r3, #255	@ 0xff
 800736c:	001a      	movs	r2, r3
 800736e:	4b38      	ldr	r3, [pc, #224]	@ (8007450 <AT_Send+0x2f4>)
 8007370:	601a      	str	r2, [r3, #0]
    break;
 8007372:	e064      	b.n	800743e <AT_Send+0x2e2>

  case AT_SLEEP:
    Debug("Setting ESP in sleep mode for 5 min");
 8007374:	4a3a      	ldr	r2, [pc, #232]	@ (8007460 <AT_Send+0x304>)
 8007376:	4b38      	ldr	r3, [pc, #224]	@ (8007458 <AT_Send+0x2fc>)
 8007378:	0019      	movs	r1, r3
 800737a:	2003      	movs	r0, #3
 800737c:	f00c fd5e 	bl	8013e3c <CreateLine>
    ATCommandSend = SLEEP();
 8007380:	230f      	movs	r3, #15
 8007382:	18fc      	adds	r4, r7, r3
 8007384:	f7ff fd34 	bl	8006df0 <SLEEP>
 8007388:	0003      	movs	r3, r0
 800738a:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 800738c:	f00d face 	bl	801492c <HAL_GetTick>
 8007390:	0003      	movs	r3, r0
 8007392:	330a      	adds	r3, #10
 8007394:	001a      	movs	r2, r3
 8007396:	4b2e      	ldr	r3, [pc, #184]	@ (8007450 <AT_Send+0x2f4>)
 8007398:	601a      	str	r2, [r3, #0]
    break;
 800739a:	e050      	b.n	800743e <AT_Send+0x2e2>

  case AT_CIPSNTPCFG:
//    Debug("Config SNTP client");
    ATCommandSend = CIPSNTPCFG();
 800739c:	230f      	movs	r3, #15
 800739e:	18fc      	adds	r4, r7, r3
 80073a0:	f7ff fd42 	bl	8006e28 <CIPSNTPCFG>
 80073a4:	0003      	movs	r3, r0
 80073a6:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 80073a8:	f00d fac0 	bl	801492c <HAL_GetTick>
 80073ac:	0003      	movs	r3, r0
 80073ae:	330a      	adds	r3, #10
 80073b0:	001a      	movs	r2, r3
 80073b2:	4b27      	ldr	r3, [pc, #156]	@ (8007450 <AT_Send+0x2f4>)
 80073b4:	601a      	str	r2, [r3, #0]
    break;
 80073b6:	e042      	b.n	800743e <AT_Send+0x2e2>

  case AT_CIPSNTPTIME:
//    Debug("Get time from internet");
    ATCommandSend = CIPSNTPTIME();
 80073b8:	230f      	movs	r3, #15
 80073ba:	18fc      	adds	r4, r7, r3
 80073bc:	f7ff fd54 	bl	8006e68 <CIPSNTPTIME>
 80073c0:	0003      	movs	r3, r0
 80073c2:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_WIFI_INIT_TIME;
 80073c4:	f00d fab2 	bl	801492c <HAL_GetTick>
 80073c8:	0003      	movs	r3, r0
 80073ca:	33f5      	adds	r3, #245	@ 0xf5
 80073cc:	33ff      	adds	r3, #255	@ 0xff
 80073ce:	001a      	movs	r2, r3
 80073d0:	4b1f      	ldr	r3, [pc, #124]	@ (8007450 <AT_Send+0x2f4>)
 80073d2:	601a      	str	r2, [r3, #0]
    break;
 80073d4:	e033      	b.n	800743e <AT_Send+0x2e2>

  case AT_CIPSNTPINTV:
//    Debug("Set the interval to timesync");
    ATCommandSend = CIPSNTPINTV();
 80073d6:	230f      	movs	r3, #15
 80073d8:	18fc      	adds	r4, r7, r3
 80073da:	f7ff fd61 	bl	8006ea0 <CIPSNTPINTV>
 80073de:	0003      	movs	r3, r0
 80073e0:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 80073e2:	f00d faa3 	bl	801492c <HAL_GetTick>
 80073e6:	0003      	movs	r3, r0
 80073e8:	330a      	adds	r3, #10
 80073ea:	001a      	movs	r2, r3
 80073ec:	4b18      	ldr	r3, [pc, #96]	@ (8007450 <AT_Send+0x2f4>)
 80073ee:	601a      	str	r2, [r3, #0]
    break;
 80073f0:	e025      	b.n	800743e <AT_Send+0x2e2>
#ifdef USE_MAIL
  case AT_HTTPCPOST_MAILAPI:
    Debug("Start EMAIL via API");
 80073f2:	4a1c      	ldr	r2, [pc, #112]	@ (8007464 <AT_Send+0x308>)
 80073f4:	4b18      	ldr	r3, [pc, #96]	@ (8007458 <AT_Send+0x2fc>)
 80073f6:	0019      	movs	r1, r3
 80073f8:	2003      	movs	r0, #3
 80073fa:	f00c fd1f 	bl	8013e3c <CreateLine>
    ATCommandSend = HTTPCPOST_MAILAPI();
 80073fe:	230f      	movs	r3, #15
 8007400:	18fc      	adds	r4, r7, r3
 8007402:	f7ff fc99 	bl	8006d38 <HTTPCPOST_MAILAPI>
 8007406:	0003      	movs	r3, r0
 8007408:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_LONG;
 800740a:	f00d fa8f 	bl	801492c <HAL_GetTick>
 800740e:	0003      	movs	r3, r0
 8007410:	3332      	adds	r3, #50	@ 0x32
 8007412:	001a      	movs	r2, r3
 8007414:	4b0e      	ldr	r3, [pc, #56]	@ (8007450 <AT_Send+0x2f4>)
 8007416:	601a      	str	r2, [r3, #0]
    break;
 8007418:	e011      	b.n	800743e <AT_Send+0x2e2>

  case AT_SENDMAIL:
//    Debug("Send Email content");
    ATCommandSend = SENDMAIL();
 800741a:	230f      	movs	r3, #15
 800741c:	18fc      	adds	r4, r7, r3
 800741e:	f7ff fc73 	bl	8006d08 <SENDMAIL>
 8007422:	0003      	movs	r3, r0
 8007424:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_WIFI_INIT_TIME; // + 7000;
 8007426:	f00d fa81 	bl	801492c <HAL_GetTick>
 800742a:	0003      	movs	r3, r0
 800742c:	33f5      	adds	r3, #245	@ 0xf5
 800742e:	33ff      	adds	r3, #255	@ 0xff
 8007430:	001a      	movs	r2, r3
 8007432:	4b07      	ldr	r3, [pc, #28]	@ (8007450 <AT_Send+0x2f4>)
 8007434:	601a      	str	r2, [r3, #0]
    break;
 8007436:	e002      	b.n	800743e <AT_Send+0x2e2>
#endif

  case AT_END:
    break;
 8007438:	46c0      	nop			@ (mov r8, r8)
 800743a:	e000      	b.n	800743e <AT_Send+0x2e2>
  break;
 800743c:	46c0      	nop			@ (mov r8, r8)
  }

  return(ATCommandSend);
 800743e:	230f      	movs	r3, #15
 8007440:	18fb      	adds	r3, r7, r3
 8007442:	781b      	ldrb	r3, [r3, #0]
}
 8007444:	0018      	movs	r0, r3
 8007446:	46bd      	mov	sp, r7
 8007448:	b005      	add	sp, #20
 800744a:	bd90      	pop	{r4, r7, pc}
 800744c:	0802ddc4 	.word	0x0802ddc4
 8007450:	20000694 	.word	0x20000694
 8007454:	0802b0b4 	.word	0x0802b0b4
 8007458:	0802a9bc 	.word	0x0802a9bc
 800745c:	0802b0c0 	.word	0x0802b0c0
 8007460:	0802b0d4 	.word	0x0802b0d4
 8007464:	0802b0f8 	.word	0x0802b0f8

08007468 <ESP_WakeTest>:

void ESP_WakeTest(void) {
 8007468:	b590      	push	{r4, r7, lr}
 800746a:	b083      	sub	sp, #12
 800746c:	af00      	add	r7, sp, #0
  bool ATSend = false;
 800746e:	1dfb      	adds	r3, r7, #7
 8007470:	2200      	movs	r2, #0
 8007472:	701a      	strb	r2, [r3, #0]
  static Receive_Status ATReceived = RECEIVE_STATUS_INCOMPLETE;
  switch (TestState){
 8007474:	4b82      	ldr	r3, [pc, #520]	@ (8007680 <ESP_WakeTest+0x218>)
 8007476:	781b      	ldrb	r3, [r3, #0]
 8007478:	2b05      	cmp	r3, #5
 800747a:	d900      	bls.n	800747e <ESP_WakeTest+0x16>
 800747c:	e0e4      	b.n	8007648 <ESP_WakeTest+0x1e0>
 800747e:	009a      	lsls	r2, r3, #2
 8007480:	4b80      	ldr	r3, [pc, #512]	@ (8007684 <ESP_WakeTest+0x21c>)
 8007482:	18d3      	adds	r3, r2, r3
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	469f      	mov	pc, r3

    case ESP_TEST_INIT:
      if(!EspTurnedOn){
 8007488:	4b7f      	ldr	r3, [pc, #508]	@ (8007688 <ESP_WakeTest+0x220>)
 800748a:	781b      	ldrb	r3, [r3, #0]
 800748c:	2201      	movs	r2, #1
 800748e:	4053      	eors	r3, r2
 8007490:	b2db      	uxtb	r3, r3
 8007492:	2b00      	cmp	r3, #0
 8007494:	d041      	beq.n	800751a <ESP_WakeTest+0xb2>
        EspTurnedOn = true;
 8007496:	4b7c      	ldr	r3, [pc, #496]	@ (8007688 <ESP_WakeTest+0x220>)
 8007498:	2201      	movs	r2, #1
 800749a:	701a      	strb	r2, [r3, #0]
        HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_RESET);
 800749c:	2380      	movs	r3, #128	@ 0x80
 800749e:	011b      	lsls	r3, r3, #4
 80074a0:	487a      	ldr	r0, [pc, #488]	@ (800768c <ESP_WakeTest+0x224>)
 80074a2:	2200      	movs	r2, #0
 80074a4:	0019      	movs	r1, r3
 80074a6:	f00e fcb4 	bl	8015e12 <HAL_GPIO_WritePin>
        HAL_Delay(50);
 80074aa:	2032      	movs	r0, #50	@ 0x32
 80074ac:	f00d fa48 	bl	8014940 <HAL_Delay>
        HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_SET);
 80074b0:	2380      	movs	r3, #128	@ 0x80
 80074b2:	011b      	lsls	r3, r3, #4
 80074b4:	4875      	ldr	r0, [pc, #468]	@ (800768c <ESP_WakeTest+0x224>)
 80074b6:	2201      	movs	r2, #1
 80074b8:	0019      	movs	r1, r3
 80074ba:	f00e fcaa 	bl	8015e12 <HAL_GPIO_WritePin>
        HAL_Delay(10);
 80074be:	200a      	movs	r0, #10
 80074c0:	f00d fa3e 	bl	8014940 <HAL_Delay>
        // Reset ESP, so we're sure that we're in the right state.
        HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_RESET);
 80074c4:	4b72      	ldr	r3, [pc, #456]	@ (8007690 <ESP_WakeTest+0x228>)
 80074c6:	2200      	movs	r2, #0
 80074c8:	2101      	movs	r1, #1
 80074ca:	0018      	movs	r0, r3
 80074cc:	f00e fca1 	bl	8015e12 <HAL_GPIO_WritePin>
        HAL_Delay(10);
 80074d0:	200a      	movs	r0, #10
 80074d2:	f00d fa35 	bl	8014940 <HAL_Delay>
        HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, 1);
 80074d6:	4b6e      	ldr	r3, [pc, #440]	@ (8007690 <ESP_WakeTest+0x228>)
 80074d8:	2201      	movs	r2, #1
 80074da:	2102      	movs	r1, #2
 80074dc:	0018      	movs	r0, r3
 80074de:	f00e fc98 	bl	8015e12 <HAL_GPIO_WritePin>
        HAL_Delay(50); // wait for 5RC
 80074e2:	2032      	movs	r0, #50	@ 0x32
 80074e4:	f00d fa2c 	bl	8014940 <HAL_Delay>
        HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_SET);
 80074e8:	4b69      	ldr	r3, [pc, #420]	@ (8007690 <ESP_WakeTest+0x228>)
 80074ea:	2201      	movs	r2, #1
 80074ec:	2101      	movs	r1, #1
 80074ee:	0018      	movs	r0, r3
 80074f0:	f00e fc8f 	bl	8015e12 <HAL_GPIO_WritePin>
        HAL_Delay(100);
 80074f4:	2064      	movs	r0, #100	@ 0x64
 80074f6:	f00d fa23 	bl	8014940 <HAL_Delay>
        batteryCharge = ReadBatteryVoltage();  // read voltage in loaded condition
 80074fa:	f002 fad7 	bl	8009aac <ReadBatteryVoltage>
 80074fe:	1c02      	adds	r2, r0, #0
 8007500:	4b64      	ldr	r3, [pc, #400]	@ (8007694 <ESP_WakeTest+0x22c>)
 8007502:	601a      	str	r2, [r3, #0]
        ESPTimeStamp = HAL_GetTick() + ESP_START_UP_TIME;
 8007504:	f00d fa12 	bl	801492c <HAL_GetTick>
 8007508:	0003      	movs	r3, r0
 800750a:	22e1      	movs	r2, #225	@ 0xe1
 800750c:	0092      	lsls	r2, r2, #2
 800750e:	189a      	adds	r2, r3, r2
 8007510:	4b61      	ldr	r3, [pc, #388]	@ (8007698 <ESP_WakeTest+0x230>)
 8007512:	601a      	str	r2, [r3, #0]
        EspTurnedOn = true;
 8007514:	4b5c      	ldr	r3, [pc, #368]	@ (8007688 <ESP_WakeTest+0x220>)
 8007516:	2201      	movs	r2, #1
 8007518:	701a      	strb	r2, [r3, #0]
      }
      if(ESP_Receive(RxBuffer, ESP_MAX_BUFFER_SIZE)) {
 800751a:	2380      	movs	r3, #128	@ 0x80
 800751c:	005a      	lsls	r2, r3, #1
 800751e:	4b5f      	ldr	r3, [pc, #380]	@ (800769c <ESP_WakeTest+0x234>)
 8007520:	0011      	movs	r1, r2
 8007522:	0018      	movs	r0, r3
 8007524:	f7fd fcfe 	bl	8004f24 <ESP_Receive>
 8007528:	1e03      	subs	r3, r0, #0
 800752a:	d100      	bne.n	800752e <ESP_WakeTest+0xc6>
 800752c:	e09f      	b.n	800766e <ESP_WakeTest+0x206>
        TestState = ESP_TEST_SEND;
 800752e:	4b54      	ldr	r3, [pc, #336]	@ (8007680 <ESP_WakeTest+0x218>)
 8007530:	2201      	movs	r2, #1
 8007532:	701a      	strb	r2, [r3, #0]
      }
      break;
 8007534:	e09b      	b.n	800766e <ESP_WakeTest+0x206>

    case ESP_TEST_SEND:
      if(TimestampIsReached(ESPTimeStamp)){
 8007536:	4b58      	ldr	r3, [pc, #352]	@ (8007698 <ESP_WakeTest+0x230>)
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	0018      	movs	r0, r3
 800753c:	f00c fc28 	bl	8013d90 <TimestampIsReached>
 8007540:	1e03      	subs	r3, r0, #0
 8007542:	d100      	bne.n	8007546 <ESP_WakeTest+0xde>
 8007544:	e095      	b.n	8007672 <ESP_WakeTest+0x20a>
        ATSend = AT_Send(ATCommand);
 8007546:	4b56      	ldr	r3, [pc, #344]	@ (80076a0 <ESP_WakeTest+0x238>)
 8007548:	781b      	ldrb	r3, [r3, #0]
 800754a:	1dfc      	adds	r4, r7, #7
 800754c:	0018      	movs	r0, r3
 800754e:	f7ff fe05 	bl	800715c <AT_Send>
 8007552:	0003      	movs	r3, r0
 8007554:	7023      	strb	r3, [r4, #0]
        if(ATSend){
 8007556:	1dfb      	adds	r3, r7, #7
 8007558:	781b      	ldrb	r3, [r3, #0]
 800755a:	2b00      	cmp	r3, #0
 800755c:	d100      	bne.n	8007560 <ESP_WakeTest+0xf8>
 800755e:	e088      	b.n	8007672 <ESP_WakeTest+0x20a>
          TestState = ESP_TEST_RECEIVE;
 8007560:	4b47      	ldr	r3, [pc, #284]	@ (8007680 <ESP_WakeTest+0x218>)
 8007562:	2202      	movs	r2, #2
 8007564:	701a      	strb	r2, [r3, #0]
        }
      }
      break;
 8007566:	e084      	b.n	8007672 <ESP_WakeTest+0x20a>

    case ESP_TEST_RECEIVE:
      if(TimestampIsReached(ESPTimeStamp)){
 8007568:	4b4b      	ldr	r3, [pc, #300]	@ (8007698 <ESP_WakeTest+0x230>)
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	0018      	movs	r0, r3
 800756e:	f00c fc0f 	bl	8013d90 <TimestampIsReached>
 8007572:	1e03      	subs	r3, r0, #0
 8007574:	d100      	bne.n	8007578 <ESP_WakeTest+0x110>
 8007576:	e07e      	b.n	8007676 <ESP_WakeTest+0x20e>
        ATReceived = DMA_ProcessBuffer(ATExpectation);
 8007578:	4b4a      	ldr	r3, [pc, #296]	@ (80076a4 <ESP_WakeTest+0x23c>)
 800757a:	781b      	ldrb	r3, [r3, #0]
 800757c:	0018      	movs	r0, r3
 800757e:	f7ff fcab 	bl	8006ed8 <DMA_ProcessBuffer>
 8007582:	0003      	movs	r3, r0
 8007584:	001a      	movs	r2, r3
 8007586:	4b48      	ldr	r3, [pc, #288]	@ (80076a8 <ESP_WakeTest+0x240>)
 8007588:	701a      	strb	r2, [r3, #0]
        bool proceed = ATCompare(ATReceived, ATExpectation);
 800758a:	4b47      	ldr	r3, [pc, #284]	@ (80076a8 <ESP_WakeTest+0x240>)
 800758c:	781a      	ldrb	r2, [r3, #0]
 800758e:	4b45      	ldr	r3, [pc, #276]	@ (80076a4 <ESP_WakeTest+0x23c>)
 8007590:	781b      	ldrb	r3, [r3, #0]
 8007592:	1dbc      	adds	r4, r7, #6
 8007594:	0019      	movs	r1, r3
 8007596:	0010      	movs	r0, r2
 8007598:	f7ff fd9e 	bl	80070d8 <ATCompare>
 800759c:	0003      	movs	r3, r0
 800759e:	7023      	strb	r3, [r4, #0]
        if(ATReceived == RECEIVE_STATUS_ERROR){
 80075a0:	4b41      	ldr	r3, [pc, #260]	@ (80076a8 <ESP_WakeTest+0x240>)
 80075a2:	781b      	ldrb	r3, [r3, #0]
 80075a4:	2b01      	cmp	r3, #1
 80075a6:	d102      	bne.n	80075ae <ESP_WakeTest+0x146>
          TestState = ESP_TEST_SEND;
 80075a8:	4b35      	ldr	r3, [pc, #212]	@ (8007680 <ESP_WakeTest+0x218>)
 80075aa:	2201      	movs	r2, #1
 80075ac:	701a      	strb	r2, [r3, #0]
        }
        if(ATReceived == RECEIVE_STATUS_RETRY){
          //TestState = ESP_TEST_SEND;
          //ESPTimeStamp = HAL_GetTick() + 2*ESP_START_UP_TIME;
        }
        if(ATReceived == RECEIVE_STATUS_UNPROGGED){
 80075ae:	4b3e      	ldr	r3, [pc, #248]	@ (80076a8 <ESP_WakeTest+0x240>)
 80075b0:	781b      	ldrb	r3, [r3, #0]
 80075b2:	2b07      	cmp	r3, #7
 80075b4:	d104      	bne.n	80075c0 <ESP_WakeTest+0x158>
          StartProg();
 80075b6:	f7fe ff35 	bl	8006424 <StartProg>
          TestState = ESP_TEST_BOOT;
 80075ba:	4b31      	ldr	r3, [pc, #196]	@ (8007680 <ESP_WakeTest+0x218>)
 80075bc:	2205      	movs	r2, #5
 80075be:	701a      	strb	r2, [r3, #0]
        }
        if(ATReceived == RECEIVE_STATUS_INCOMPLETE){
 80075c0:	4b39      	ldr	r3, [pc, #228]	@ (80076a8 <ESP_WakeTest+0x240>)
 80075c2:	781b      	ldrb	r3, [r3, #0]
 80075c4:	2b03      	cmp	r3, #3
 80075c6:	d109      	bne.n	80075dc <ESP_WakeTest+0x174>
          ESPTimeStamp = HAL_GetTick() + 50;
 80075c8:	f00d f9b0 	bl	801492c <HAL_GetTick>
 80075cc:	0003      	movs	r3, r0
 80075ce:	3332      	adds	r3, #50	@ 0x32
 80075d0:	001a      	movs	r2, r3
 80075d2:	4b31      	ldr	r3, [pc, #196]	@ (8007698 <ESP_WakeTest+0x230>)
 80075d4:	601a      	str	r2, [r3, #0]
          TestState = ESP_TEST_SEND;
 80075d6:	4b2a      	ldr	r3, [pc, #168]	@ (8007680 <ESP_WakeTest+0x218>)
 80075d8:	2201      	movs	r2, #1
 80075da:	701a      	strb	r2, [r3, #0]
        }
        if(proceed){
 80075dc:	1dbb      	adds	r3, r7, #6
 80075de:	781b      	ldrb	r3, [r3, #0]
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d048      	beq.n	8007676 <ESP_WakeTest+0x20e>
          TestState = ESP_TEST_VALIDATE;
 80075e4:	4b26      	ldr	r3, [pc, #152]	@ (8007680 <ESP_WakeTest+0x218>)
 80075e6:	2203      	movs	r2, #3
 80075e8:	701a      	strb	r2, [r3, #0]
        }
      }
      break;
 80075ea:	e044      	b.n	8007676 <ESP_WakeTest+0x20e>

    case ESP_TEST_VALIDATE:
      //Set measurement completed
      TIM3 -> CCR1 = LED_OFF;
 80075ec:	4b2f      	ldr	r3, [pc, #188]	@ (80076ac <ESP_WakeTest+0x244>)
 80075ee:	22fa      	movs	r2, #250	@ 0xfa
 80075f0:	0112      	lsls	r2, r2, #4
 80075f2:	635a      	str	r2, [r3, #52]	@ 0x34
      TIM3 -> CCR2 = Calculate_LED_ON();
 80075f4:	f00b f886 	bl	8012704 <Calculate_LED_ON>
 80075f8:	0003      	movs	r3, r0
 80075fa:	001a      	movs	r2, r3
 80075fc:	4b2b      	ldr	r3, [pc, #172]	@ (80076ac <ESP_WakeTest+0x244>)
 80075fe:	639a      	str	r2, [r3, #56]	@ 0x38
      TIM3 -> CCR3 = LED_OFF;
 8007600:	4b2a      	ldr	r3, [pc, #168]	@ (80076ac <ESP_WakeTest+0x244>)
 8007602:	22fa      	movs	r2, #250	@ 0xfa
 8007604:	0112      	lsls	r2, r2, #4
 8007606:	63da      	str	r2, [r3, #60]	@ 0x3c
      TestState = ESP_TEST_DEINIT;
 8007608:	4b1d      	ldr	r3, [pc, #116]	@ (8007680 <ESP_WakeTest+0x218>)
 800760a:	2204      	movs	r2, #4
 800760c:	701a      	strb	r2, [r3, #0]

      break;
 800760e:	e033      	b.n	8007678 <ESP_WakeTest+0x210>

    case ESP_TEST_DEINIT:
      testRound = false;
 8007610:	4b27      	ldr	r3, [pc, #156]	@ (80076b0 <ESP_WakeTest+0x248>)
 8007612:	2200      	movs	r2, #0
 8007614:	701a      	strb	r2, [r3, #0]
      HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_RESET);
 8007616:	4b1e      	ldr	r3, [pc, #120]	@ (8007690 <ESP_WakeTest+0x228>)
 8007618:	2200      	movs	r2, #0
 800761a:	2101      	movs	r1, #1
 800761c:	0018      	movs	r0, r3
 800761e:	f00e fbf8 	bl	8015e12 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_RESET);
 8007622:	2380      	movs	r3, #128	@ 0x80
 8007624:	011b      	lsls	r3, r3, #4
 8007626:	4819      	ldr	r0, [pc, #100]	@ (800768c <ESP_WakeTest+0x224>)
 8007628:	2200      	movs	r2, #0
 800762a:	0019      	movs	r1, r3
 800762c:	f00e fbf1 	bl	8015e12 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, 0);
 8007630:	4b17      	ldr	r3, [pc, #92]	@ (8007690 <ESP_WakeTest+0x228>)
 8007632:	2200      	movs	r2, #0
 8007634:	2102      	movs	r1, #2
 8007636:	0018      	movs	r0, r3
 8007638:	f00e fbeb 	bl	8015e12 <HAL_GPIO_WritePin>
      SetESPMeasurementDone();
 800763c:	f005 ff9c 	bl	800d578 <SetESPMeasurementDone>
      EspTurnedOn = false;
 8007640:	4b11      	ldr	r3, [pc, #68]	@ (8007688 <ESP_WakeTest+0x220>)
 8007642:	2200      	movs	r2, #0
 8007644:	701a      	strb	r2, [r3, #0]
      break;
 8007646:	e017      	b.n	8007678 <ESP_WakeTest+0x210>

    default:
      TestState = ESP_TEST_INIT;
 8007648:	4b0d      	ldr	r3, [pc, #52]	@ (8007680 <ESP_WakeTest+0x218>)
 800764a:	2200      	movs	r2, #0
 800764c:	701a      	strb	r2, [r3, #0]
      break;
 800764e:	e013      	b.n	8007678 <ESP_WakeTest+0x210>

    case ESP_TEST_BOOT:
      TIM3 -> CCR1 = LED_OFF;
 8007650:	4b16      	ldr	r3, [pc, #88]	@ (80076ac <ESP_WakeTest+0x244>)
 8007652:	22fa      	movs	r2, #250	@ 0xfa
 8007654:	0112      	lsls	r2, r2, #4
 8007656:	635a      	str	r2, [r3, #52]	@ 0x34
      TIM3 -> CCR2 = LED_OFF;
 8007658:	4b14      	ldr	r3, [pc, #80]	@ (80076ac <ESP_WakeTest+0x244>)
 800765a:	22fa      	movs	r2, #250	@ 0xfa
 800765c:	0112      	lsls	r2, r2, #4
 800765e:	639a      	str	r2, [r3, #56]	@ 0x38
      TIM3 -> CCR3 = Calculate_LED_ON();
 8007660:	f00b f850 	bl	8012704 <Calculate_LED_ON>
 8007664:	0003      	movs	r3, r0
 8007666:	001a      	movs	r2, r3
 8007668:	4b10      	ldr	r3, [pc, #64]	@ (80076ac <ESP_WakeTest+0x244>)
 800766a:	63da      	str	r2, [r3, #60]	@ 0x3c
      break;
 800766c:	e004      	b.n	8007678 <ESP_WakeTest+0x210>
      break;
 800766e:	46c0      	nop			@ (mov r8, r8)
 8007670:	e002      	b.n	8007678 <ESP_WakeTest+0x210>
      break;
 8007672:	46c0      	nop			@ (mov r8, r8)
 8007674:	e000      	b.n	8007678 <ESP_WakeTest+0x210>
      break;
 8007676:	46c0      	nop			@ (mov r8, r8)
  }
}
 8007678:	46c0      	nop			@ (mov r8, r8)
 800767a:	46bd      	mov	sp, r7
 800767c:	b003      	add	sp, #12
 800767e:	bd90      	pop	{r4, r7, pc}
 8007680:	20000703 	.word	0x20000703
 8007684:	0802de20 	.word	0x0802de20
 8007688:	200005ac 	.word	0x200005ac
 800768c:	50000800 	.word	0x50000800
 8007690:	50001c00 	.word	0x50001c00
 8007694:	2000215c 	.word	0x2000215c
 8007698:	20000694 	.word	0x20000694
 800769c:	200004ac 	.word	0x200004ac
 80076a0:	20000701 	.word	0x20000701
 80076a4:	20000700 	.word	0x20000700
 80076a8:	20000033 	.word	0x20000033
 80076ac:	40000400 	.word	0x40000400
 80076b0:	20000001 	.word	0x20000001

080076b4 <ESP_Upkeep>:

ESP_States ESP_Upkeep(void) {
 80076b4:	b5b0      	push	{r4, r5, r7, lr}
 80076b6:	b086      	sub	sp, #24
 80076b8:	af04      	add	r7, sp, #16
  bool ATSend = false;
 80076ba:	1dfb      	adds	r3, r7, #7
 80076bc:	2200      	movs	r2, #0
 80076be:	701a      	strb	r2, [r3, #0]
  static uint32_t timeoutTimer = 0;
  static Receive_Status ATReceived = RECEIVE_STATUS_INCOMPLETE;
// Het lijkt er op dat ESP32  niet meer start indien de batterijspanning onder de 3,77 Volt daalt.
// Om uart fouten te voorkomen mogelijk ESP niet meer afhandelen.
  if ((EspState != oldEspState) && (GetVerboseLevel() == VERBOSE_ALL)) {
 80076c0:	4b6a      	ldr	r3, [pc, #424]	@ (800786c <ESP_Upkeep+0x1b8>)
 80076c2:	781a      	ldrb	r2, [r3, #0]
 80076c4:	4b6a      	ldr	r3, [pc, #424]	@ (8007870 <ESP_Upkeep+0x1bc>)
 80076c6:	781b      	ldrb	r3, [r3, #0]
 80076c8:	429a      	cmp	r2, r3
 80076ca:	d028      	beq.n	800771e <ESP_Upkeep+0x6a>
 80076cc:	f00c fc40 	bl	8013f50 <GetVerboseLevel>
 80076d0:	0003      	movs	r3, r0
 80076d2:	2b03      	cmp	r3, #3
 80076d4:	d123      	bne.n	800771e <ESP_Upkeep+0x6a>
    oldEspState = EspState;
 80076d6:	4b65      	ldr	r3, [pc, #404]	@ (800786c <ESP_Upkeep+0x1b8>)
 80076d8:	781a      	ldrb	r2, [r3, #0]
 80076da:	4b65      	ldr	r3, [pc, #404]	@ (8007870 <ESP_Upkeep+0x1bc>)
 80076dc:	701a      	strb	r2, [r3, #0]
#ifdef USE_MAIL
    if ( !((oldEspState == 3) && ((ATCommand == AT_HTTPCPOST) || (ATCommand == AT_HTTPCPOST_MAILAPI))) ) {
 80076de:	4b64      	ldr	r3, [pc, #400]	@ (8007870 <ESP_Upkeep+0x1bc>)
 80076e0:	781b      	ldrb	r3, [r3, #0]
 80076e2:	2b03      	cmp	r3, #3
 80076e4:	d107      	bne.n	80076f6 <ESP_Upkeep+0x42>
 80076e6:	4b63      	ldr	r3, [pc, #396]	@ (8007874 <ESP_Upkeep+0x1c0>)
 80076e8:	781b      	ldrb	r3, [r3, #0]
 80076ea:	2b0e      	cmp	r3, #14
 80076ec:	d017      	beq.n	800771e <ESP_Upkeep+0x6a>
 80076ee:	4b61      	ldr	r3, [pc, #388]	@ (8007874 <ESP_Upkeep+0x1c0>)
 80076f0:	781b      	ldrb	r3, [r3, #0]
 80076f2:	2b14      	cmp	r3, #20
 80076f4:	d013      	beq.n	800771e <ESP_Upkeep+0x6a>
#else
      if ( !((oldEspState == 3) && (ATCommand == AT_HTTPCPOST)) ) {
#endif
      Debug("EspState: %d ATcmd: %d Mode: %d ATExp: %d", oldEspState, ATCommand, Mode, ATExpectation);
 80076f6:	4b5e      	ldr	r3, [pc, #376]	@ (8007870 <ESP_Upkeep+0x1bc>)
 80076f8:	781b      	ldrb	r3, [r3, #0]
 80076fa:	001d      	movs	r5, r3
 80076fc:	4b5d      	ldr	r3, [pc, #372]	@ (8007874 <ESP_Upkeep+0x1c0>)
 80076fe:	781b      	ldrb	r3, [r3, #0]
 8007700:	0018      	movs	r0, r3
 8007702:	4b5d      	ldr	r3, [pc, #372]	@ (8007878 <ESP_Upkeep+0x1c4>)
 8007704:	781b      	ldrb	r3, [r3, #0]
 8007706:	001c      	movs	r4, r3
 8007708:	4b5c      	ldr	r3, [pc, #368]	@ (800787c <ESP_Upkeep+0x1c8>)
 800770a:	781b      	ldrb	r3, [r3, #0]
 800770c:	4a5c      	ldr	r2, [pc, #368]	@ (8007880 <ESP_Upkeep+0x1cc>)
 800770e:	495d      	ldr	r1, [pc, #372]	@ (8007884 <ESP_Upkeep+0x1d0>)
 8007710:	9302      	str	r3, [sp, #8]
 8007712:	9401      	str	r4, [sp, #4]
 8007714:	9000      	str	r0, [sp, #0]
 8007716:	002b      	movs	r3, r5
 8007718:	2003      	movs	r0, #3
 800771a:	f00c fb8f 	bl	8013e3c <CreateLine>
    }
  }
  switch (EspState) {
 800771e:	4b53      	ldr	r3, [pc, #332]	@ (800786c <ESP_Upkeep+0x1b8>)
 8007720:	781b      	ldrb	r3, [r3, #0]
 8007722:	2b0f      	cmp	r3, #15
 8007724:	d901      	bls.n	800772a <ESP_Upkeep+0x76>
 8007726:	f000 fcf0 	bl	800810a <ESP_Upkeep+0xa56>
 800772a:	009a      	lsls	r2, r3, #2
 800772c:	4b56      	ldr	r3, [pc, #344]	@ (8007888 <ESP_Upkeep+0x1d4>)
 800772e:	18d3      	adds	r3, r2, r3
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	469f      	mov	pc, r3
    case ESP_STATE_OFF:
      // Turning off the ESP
      // Disable UART

//      EspTurnedOn = false;
      EspState = ESP_STATE_IDLE;
 8007734:	4b4d      	ldr	r3, [pc, #308]	@ (800786c <ESP_Upkeep+0x1b8>)
 8007736:	2201      	movs	r2, #1
 8007738:	701a      	strb	r2, [r3, #0]
      break;
 800773a:	f000 fd01 	bl	8008140 <ESP_Upkeep+0xa8c>
      // Waiting for wake up call.
      break;

    case ESP_STATE_INIT:
//      Debug("entry in ESP_STATE_INIT");
      deviceTimeOut = 0;
 800773e:	4b53      	ldr	r3, [pc, #332]	@ (800788c <ESP_Upkeep+0x1d8>)
 8007740:	2200      	movs	r2, #0
 8007742:	601a      	str	r2, [r3, #0]
      if (!AllDevicesReady()) {
 8007744:	f006 f978 	bl	800da38 <AllDevicesReady>
 8007748:	0003      	movs	r3, r0
 800774a:	001a      	movs	r2, r3
 800774c:	2301      	movs	r3, #1
 800774e:	4053      	eors	r3, r2
 8007750:	b2db      	uxtb	r3, r3
 8007752:	2b00      	cmp	r3, #0
 8007754:	d001      	beq.n	800775a <ESP_Upkeep+0xa6>
 8007756:	f000 fce4 	bl	8008122 <ESP_Upkeep+0xa6e>
//        Debug("Waiting for all devices ready");
        break;
      }
      SetESPIndicator();
 800775a:	f00b f965 	bl	8012a28 <SetESPIndicator>
      if(!EspTurnedOn){
 800775e:	4b4c      	ldr	r3, [pc, #304]	@ (8007890 <ESP_Upkeep+0x1dc>)
 8007760:	781b      	ldrb	r3, [r3, #0]
 8007762:	2201      	movs	r2, #1
 8007764:	4053      	eors	r3, r2
 8007766:	b2db      	uxtb	r3, r3
 8007768:	2b00      	cmp	r3, #0
 800776a:	d044      	beq.n	80077f6 <ESP_Upkeep+0x142>
        HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_RESET);
 800776c:	2380      	movs	r3, #128	@ 0x80
 800776e:	011b      	lsls	r3, r3, #4
 8007770:	4848      	ldr	r0, [pc, #288]	@ (8007894 <ESP_Upkeep+0x1e0>)
 8007772:	2200      	movs	r2, #0
 8007774:	0019      	movs	r1, r3
 8007776:	f00e fb4c 	bl	8015e12 <HAL_GPIO_WritePin>
        HAL_Delay(10);
 800777a:	200a      	movs	r0, #10
 800777c:	f00d f8e0 	bl	8014940 <HAL_Delay>
        HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_SET);
 8007780:	2380      	movs	r3, #128	@ 0x80
 8007782:	011b      	lsls	r3, r3, #4
 8007784:	4843      	ldr	r0, [pc, #268]	@ (8007894 <ESP_Upkeep+0x1e0>)
 8007786:	2201      	movs	r2, #1
 8007788:	0019      	movs	r1, r3
 800778a:	f00e fb42 	bl	8015e12 <HAL_GPIO_WritePin>
        HAL_Delay(50);
 800778e:	2032      	movs	r0, #50	@ 0x32
 8007790:	f00d f8d6 	bl	8014940 <HAL_Delay>
        // Reset ESP, so we're sure that we're in the right state.
        HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_RESET);
 8007794:	4b40      	ldr	r3, [pc, #256]	@ (8007898 <ESP_Upkeep+0x1e4>)
 8007796:	2200      	movs	r2, #0
 8007798:	2101      	movs	r1, #1
 800779a:	0018      	movs	r0, r3
 800779c:	f00e fb39 	bl	8015e12 <HAL_GPIO_WritePin>
        HAL_Delay(10);
 80077a0:	200a      	movs	r0, #10
 80077a2:	f00d f8cd 	bl	8014940 <HAL_Delay>
        HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, 1);
 80077a6:	4b3c      	ldr	r3, [pc, #240]	@ (8007898 <ESP_Upkeep+0x1e4>)
 80077a8:	2201      	movs	r2, #1
 80077aa:	2102      	movs	r1, #2
 80077ac:	0018      	movs	r0, r3
 80077ae:	f00e fb30 	bl	8015e12 <HAL_GPIO_WritePin>
        HAL_Delay(50);
 80077b2:	2032      	movs	r0, #50	@ 0x32
 80077b4:	f00d f8c4 	bl	8014940 <HAL_Delay>
        HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_SET);
 80077b8:	4b37      	ldr	r3, [pc, #220]	@ (8007898 <ESP_Upkeep+0x1e4>)
 80077ba:	2201      	movs	r2, #1
 80077bc:	2101      	movs	r1, #1
 80077be:	0018      	movs	r0, r3
 80077c0:	f00e fb27 	bl	8015e12 <HAL_GPIO_WritePin>
        HAL_Delay(50);
 80077c4:	2032      	movs	r0, #50	@ 0x32
 80077c6:	f00d f8bb 	bl	8014940 <HAL_Delay>
        ESPTimeStamp = HAL_GetTick() + ESP_START_UP_TIME;
 80077ca:	f00d f8af 	bl	801492c <HAL_GetTick>
 80077ce:	0003      	movs	r3, r0
 80077d0:	22e1      	movs	r2, #225	@ 0xe1
 80077d2:	0092      	lsls	r2, r2, #2
 80077d4:	189a      	adds	r2, r3, r2
 80077d6:	4b31      	ldr	r3, [pc, #196]	@ (800789c <ESP_Upkeep+0x1e8>)
 80077d8:	601a      	str	r2, [r3, #0]
        EspTurnedOn = true;
 80077da:	4b2d      	ldr	r3, [pc, #180]	@ (8007890 <ESP_Upkeep+0x1dc>)
 80077dc:	2201      	movs	r2, #1
 80077de:	701a      	strb	r2, [r3, #0]
        Debug("ESP powered on.");
 80077e0:	4a2f      	ldr	r2, [pc, #188]	@ (80078a0 <ESP_Upkeep+0x1ec>)
 80077e2:	4b28      	ldr	r3, [pc, #160]	@ (8007884 <ESP_Upkeep+0x1d0>)
 80077e4:	0019      	movs	r1, r3
 80077e6:	2003      	movs	r0, #3
 80077e8:	f00c fb28 	bl	8013e3c <CreateLine>
        SetBatteryReadTimer(ESP_START_UP_TIME/2);  // read battery voltage during boot of ESP32
 80077ec:	23e1      	movs	r3, #225	@ 0xe1
 80077ee:	005b      	lsls	r3, r3, #1
 80077f0:	0018      	movs	r0, r3
 80077f2:	f005 f951 	bl	800ca98 <SetBatteryReadTimer>
      }
      // Wait for ESP to be ready
      // Start reading DMA buffer for AT commands
      if(ESP_Receive(RxBuffer, ESP_MAX_BUFFER_SIZE)) {
 80077f6:	2380      	movs	r3, #128	@ 0x80
 80077f8:	005a      	lsls	r2, r3, #1
 80077fa:	4b2a      	ldr	r3, [pc, #168]	@ (80078a4 <ESP_Upkeep+0x1f0>)
 80077fc:	0011      	movs	r1, r2
 80077fe:	0018      	movs	r0, r3
 8007800:	f7fd fb90 	bl	8004f24 <ESP_Receive>
 8007804:	1e03      	subs	r3, r0, #0
 8007806:	d101      	bne.n	800780c <ESP_Upkeep+0x158>
 8007808:	f000 fc8d 	bl	8008126 <ESP_Upkeep+0xa72>
        EspState = ESP_STATE_WAIT_AWAKE;
 800780c:	4b17      	ldr	r3, [pc, #92]	@ (800786c <ESP_Upkeep+0x1b8>)
 800780e:	220f      	movs	r2, #15
 8007810:	701a      	strb	r2, [r3, #0]
        timeoutTimer = HAL_GetTick() + 2000;
 8007812:	f00d f88b 	bl	801492c <HAL_GetTick>
 8007816:	0003      	movs	r3, r0
 8007818:	22fa      	movs	r2, #250	@ 0xfa
 800781a:	00d2      	lsls	r2, r2, #3
 800781c:	189a      	adds	r2, r3, r2
 800781e:	4b22      	ldr	r3, [pc, #136]	@ (80078a8 <ESP_Upkeep+0x1f4>)
 8007820:	601a      	str	r2, [r3, #0]
      }
      break;
 8007822:	f000 fc80 	bl	8008126 <ESP_Upkeep+0xa72>

    case ESP_STATE_WAIT_AWAKE:
//        Debug("entry in ESP_STATE_WAIT_AWAKE");
        ATReceived = DMA_ProcessBuffer(RECEIVE_EXPECTATION_READY);
 8007826:	2001      	movs	r0, #1
 8007828:	f7ff fb56 	bl	8006ed8 <DMA_ProcessBuffer>
 800782c:	0003      	movs	r3, r0
 800782e:	001a      	movs	r2, r3
 8007830:	4b1e      	ldr	r3, [pc, #120]	@ (80078ac <ESP_Upkeep+0x1f8>)
 8007832:	701a      	strb	r2, [r3, #0]
        bool proceed = ATCompare(ATReceived, RECEIVE_EXPECTATION_READY);
 8007834:	4b1d      	ldr	r3, [pc, #116]	@ (80078ac <ESP_Upkeep+0x1f8>)
 8007836:	781b      	ldrb	r3, [r3, #0]
 8007838:	1dbc      	adds	r4, r7, #6
 800783a:	2101      	movs	r1, #1
 800783c:	0018      	movs	r0, r3
 800783e:	f7ff fc4b 	bl	80070d8 <ATCompare>
 8007842:	0003      	movs	r3, r0
 8007844:	7023      	strb	r3, [r4, #0]
        if(proceed || TimestampIsReached(timeoutTimer)){
 8007846:	1dbb      	adds	r3, r7, #6
 8007848:	781b      	ldrb	r3, [r3, #0]
 800784a:	2b00      	cmp	r3, #0
 800784c:	d108      	bne.n	8007860 <ESP_Upkeep+0x1ac>
 800784e:	4b16      	ldr	r3, [pc, #88]	@ (80078a8 <ESP_Upkeep+0x1f4>)
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	0018      	movs	r0, r3
 8007854:	f00c fa9c 	bl	8013d90 <TimestampIsReached>
 8007858:	1e03      	subs	r3, r0, #0
 800785a:	d101      	bne.n	8007860 <ESP_Upkeep+0x1ac>
 800785c:	f000 fc65 	bl	800812a <ESP_Upkeep+0xa76>
          EspState = ESP_STATE_MODE_SELECT;
 8007860:	4b02      	ldr	r3, [pc, #8]	@ (800786c <ESP_Upkeep+0x1b8>)
 8007862:	220b      	movs	r2, #11
 8007864:	701a      	strb	r2, [r3, #0]
        }
        break;
 8007866:	f000 fc60 	bl	800812a <ESP_Upkeep+0xa76>
 800786a:	46c0      	nop			@ (mov r8, r8)
 800786c:	20000030 	.word	0x20000030
 8007870:	20000003 	.word	0x20000003
 8007874:	20000701 	.word	0x20000701
 8007878:	20000702 	.word	0x20000702
 800787c:	20000700 	.word	0x20000700
 8007880:	0802b10c 	.word	0x0802b10c
 8007884:	0802a9bc 	.word	0x0802a9bc
 8007888:	0802de38 	.word	0x0802de38
 800788c:	20001114 	.word	0x20001114
 8007890:	200005ac 	.word	0x200005ac
 8007894:	50000800 	.word	0x50000800
 8007898:	50001c00 	.word	0x50001c00
 800789c:	20000694 	.word	0x20000694
 80078a0:	0802b138 	.word	0x0802b138
 80078a4:	200004ac 	.word	0x200004ac
 80078a8:	20000938 	.word	0x20000938
 80078ac:	20000034 	.word	0x20000034

    case ESP_STATE_MODE_SELECT:
//      Debug("entry in ESP_STATE_MODE_SELECT");
      memset(ATCommandArray, AT_END, 9);
 80078b0:	4bd6      	ldr	r3, [pc, #856]	@ (8007c0c <ESP_Upkeep+0x558>)
 80078b2:	2209      	movs	r2, #9
 80078b4:	2116      	movs	r1, #22
 80078b6:	0018      	movs	r0, r3
 80078b8:	f01e fe32 	bl	8026520 <memset>
      if(!InitIsDone || WifiReset){
 80078bc:	4bd4      	ldr	r3, [pc, #848]	@ (8007c10 <ESP_Upkeep+0x55c>)
 80078be:	781b      	ldrb	r3, [r3, #0]
 80078c0:	2201      	movs	r2, #1
 80078c2:	4053      	eors	r3, r2
 80078c4:	b2db      	uxtb	r3, r3
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d103      	bne.n	80078d2 <ESP_Upkeep+0x21e>
 80078ca:	4bd2      	ldr	r3, [pc, #840]	@ (8007c14 <ESP_Upkeep+0x560>)
 80078cc:	781b      	ldrb	r3, [r3, #0]
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d016      	beq.n	8007900 <ESP_Upkeep+0x24c>
        memcpy(ATCommandArray, AT_INIT, sizeof(AT_INIT));
 80078d2:	4bce      	ldr	r3, [pc, #824]	@ (8007c0c <ESP_Upkeep+0x558>)
 80078d4:	4ad0      	ldr	r2, [pc, #832]	@ (8007c18 <ESP_Upkeep+0x564>)
 80078d6:	ca03      	ldmia	r2!, {r0, r1}
 80078d8:	c303      	stmia	r3!, {r0, r1}
        EspState = ESP_STATE_SEND;
 80078da:	4bd0      	ldr	r3, [pc, #832]	@ (8007c1c <ESP_Upkeep+0x568>)
 80078dc:	2204      	movs	r2, #4
 80078de:	701a      	strb	r2, [r3, #0]
        ATCounter = 0;
 80078e0:	4bcf      	ldr	r3, [pc, #828]	@ (8007c20 <ESP_Upkeep+0x56c>)
 80078e2:	2200      	movs	r2, #0
 80078e4:	701a      	strb	r2, [r3, #0]
        Mode = AT_MODE_INIT;
 80078e6:	4bcf      	ldr	r3, [pc, #828]	@ (8007c24 <ESP_Upkeep+0x570>)
 80078e8:	2200      	movs	r2, #0
 80078ea:	701a      	strb	r2, [r3, #0]
        ATCommand = ATCommandArray[ATCounter];
 80078ec:	4bcc      	ldr	r3, [pc, #816]	@ (8007c20 <ESP_Upkeep+0x56c>)
 80078ee:	781b      	ldrb	r3, [r3, #0]
 80078f0:	001a      	movs	r2, r3
 80078f2:	4bc6      	ldr	r3, [pc, #792]	@ (8007c0c <ESP_Upkeep+0x558>)
 80078f4:	5c9a      	ldrb	r2, [r3, r2]
 80078f6:	4bcc      	ldr	r3, [pc, #816]	@ (8007c28 <ESP_Upkeep+0x574>)
 80078f8:	701a      	strb	r2, [r3, #0]
        ATExpectation = RECEIVE_EXPECTATION_OK;
 80078fa:	4bcc      	ldr	r3, [pc, #816]	@ (8007c2c <ESP_Upkeep+0x578>)
 80078fc:	2200      	movs	r2, #0
 80078fe:	701a      	strb	r2, [r3, #0]
      }
      if(InitIsDone && !ConnectionMade){
 8007900:	4bc3      	ldr	r3, [pc, #780]	@ (8007c10 <ESP_Upkeep+0x55c>)
 8007902:	781b      	ldrb	r3, [r3, #0]
 8007904:	2b00      	cmp	r3, #0
 8007906:	d01f      	beq.n	8007948 <ESP_Upkeep+0x294>
 8007908:	4bc9      	ldr	r3, [pc, #804]	@ (8007c30 <ESP_Upkeep+0x57c>)
 800790a:	781b      	ldrb	r3, [r3, #0]
 800790c:	2201      	movs	r2, #1
 800790e:	4053      	eors	r3, r2
 8007910:	b2db      	uxtb	r3, r3
 8007912:	2b00      	cmp	r3, #0
 8007914:	d018      	beq.n	8007948 <ESP_Upkeep+0x294>
        memcpy(ATCommandArray, AT_WIFI_CONFIG, 6);
 8007916:	4bbd      	ldr	r3, [pc, #756]	@ (8007c0c <ESP_Upkeep+0x558>)
 8007918:	4ac6      	ldr	r2, [pc, #792]	@ (8007c34 <ESP_Upkeep+0x580>)
 800791a:	6811      	ldr	r1, [r2, #0]
 800791c:	6019      	str	r1, [r3, #0]
 800791e:	8892      	ldrh	r2, [r2, #4]
 8007920:	809a      	strh	r2, [r3, #4]
        EspState = ESP_STATE_SEND;
 8007922:	4bbe      	ldr	r3, [pc, #760]	@ (8007c1c <ESP_Upkeep+0x568>)
 8007924:	2204      	movs	r2, #4
 8007926:	701a      	strb	r2, [r3, #0]
        ATCounter = 0;
 8007928:	4bbd      	ldr	r3, [pc, #756]	@ (8007c20 <ESP_Upkeep+0x56c>)
 800792a:	2200      	movs	r2, #0
 800792c:	701a      	strb	r2, [r3, #0]
        Mode = AT_MODE_CONFIG;
 800792e:	4bbd      	ldr	r3, [pc, #756]	@ (8007c24 <ESP_Upkeep+0x570>)
 8007930:	2201      	movs	r2, #1
 8007932:	701a      	strb	r2, [r3, #0]
        ATCommand = ATCommandArray[ATCounter];
 8007934:	4bba      	ldr	r3, [pc, #744]	@ (8007c20 <ESP_Upkeep+0x56c>)
 8007936:	781b      	ldrb	r3, [r3, #0]
 8007938:	001a      	movs	r2, r3
 800793a:	4bb4      	ldr	r3, [pc, #720]	@ (8007c0c <ESP_Upkeep+0x558>)
 800793c:	5c9a      	ldrb	r2, [r3, r2]
 800793e:	4bba      	ldr	r3, [pc, #744]	@ (8007c28 <ESP_Upkeep+0x574>)
 8007940:	701a      	strb	r2, [r3, #0]
        ATExpectation = RECEIVE_EXPECTATION_OK;
 8007942:	4bba      	ldr	r3, [pc, #744]	@ (8007c2c <ESP_Upkeep+0x578>)
 8007944:	2200      	movs	r2, #0
 8007946:	701a      	strb	r2, [r3, #0]
      }
      if(InitIsDone && ConnectionMade && !APtested){
 8007948:	4bb1      	ldr	r3, [pc, #708]	@ (8007c10 <ESP_Upkeep+0x55c>)
 800794a:	781b      	ldrb	r3, [r3, #0]
 800794c:	2b00      	cmp	r3, #0
 800794e:	d021      	beq.n	8007994 <ESP_Upkeep+0x2e0>
 8007950:	4bb7      	ldr	r3, [pc, #732]	@ (8007c30 <ESP_Upkeep+0x57c>)
 8007952:	781b      	ldrb	r3, [r3, #0]
 8007954:	2b00      	cmp	r3, #0
 8007956:	d01d      	beq.n	8007994 <ESP_Upkeep+0x2e0>
 8007958:	4bb7      	ldr	r3, [pc, #732]	@ (8007c38 <ESP_Upkeep+0x584>)
 800795a:	781b      	ldrb	r3, [r3, #0]
 800795c:	2201      	movs	r2, #1
 800795e:	4053      	eors	r3, r2
 8007960:	b2db      	uxtb	r3, r3
 8007962:	2b00      	cmp	r3, #0
 8007964:	d016      	beq.n	8007994 <ESP_Upkeep+0x2e0>
        memcpy(ATCommandArray, AT_TEST, 2);
 8007966:	4bb5      	ldr	r3, [pc, #724]	@ (8007c3c <ESP_Upkeep+0x588>)
 8007968:	881a      	ldrh	r2, [r3, #0]
 800796a:	4ba8      	ldr	r3, [pc, #672]	@ (8007c0c <ESP_Upkeep+0x558>)
 800796c:	801a      	strh	r2, [r3, #0]
        EspState = ESP_STATE_SEND;
 800796e:	4bab      	ldr	r3, [pc, #684]	@ (8007c1c <ESP_Upkeep+0x568>)
 8007970:	2204      	movs	r2, #4
 8007972:	701a      	strb	r2, [r3, #0]
        ATCounter = 0;
 8007974:	4baa      	ldr	r3, [pc, #680]	@ (8007c20 <ESP_Upkeep+0x56c>)
 8007976:	2200      	movs	r2, #0
 8007978:	701a      	strb	r2, [r3, #0]
        Mode = AT_MODE_TEST;
 800797a:	4baa      	ldr	r3, [pc, #680]	@ (8007c24 <ESP_Upkeep+0x570>)
 800797c:	2204      	movs	r2, #4
 800797e:	701a      	strb	r2, [r3, #0]
        ATCommand = ATCommandArray[ATCounter];
 8007980:	4ba7      	ldr	r3, [pc, #668]	@ (8007c20 <ESP_Upkeep+0x56c>)
 8007982:	781b      	ldrb	r3, [r3, #0]
 8007984:	001a      	movs	r2, r3
 8007986:	4ba1      	ldr	r3, [pc, #644]	@ (8007c0c <ESP_Upkeep+0x558>)
 8007988:	5c9a      	ldrb	r2, [r3, r2]
 800798a:	4ba7      	ldr	r3, [pc, #668]	@ (8007c28 <ESP_Upkeep+0x574>)
 800798c:	701a      	strb	r2, [r3, #0]
        ATExpectation = RECEIVE_EXPECTATION_OK;
 800798e:	4ba7      	ldr	r3, [pc, #668]	@ (8007c2c <ESP_Upkeep+0x578>)
 8007990:	2200      	movs	r2, #0
 8007992:	701a      	strb	r2, [r3, #0]
      }
#ifdef USE_MAIL
      if(InitIsDone && ConnectionMade && APtested && (sendpwremail == DO_PWR_MAIL)){
 8007994:	4b9e      	ldr	r3, [pc, #632]	@ (8007c10 <ESP_Upkeep+0x55c>)
 8007996:	781b      	ldrb	r3, [r3, #0]
 8007998:	2b00      	cmp	r3, #0
 800799a:	d024      	beq.n	80079e6 <ESP_Upkeep+0x332>
 800799c:	4ba4      	ldr	r3, [pc, #656]	@ (8007c30 <ESP_Upkeep+0x57c>)
 800799e:	781b      	ldrb	r3, [r3, #0]
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d020      	beq.n	80079e6 <ESP_Upkeep+0x332>
 80079a4:	4ba4      	ldr	r3, [pc, #656]	@ (8007c38 <ESP_Upkeep+0x584>)
 80079a6:	781b      	ldrb	r3, [r3, #0]
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d01c      	beq.n	80079e6 <ESP_Upkeep+0x332>
 80079ac:	4ba4      	ldr	r3, [pc, #656]	@ (8007c40 <ESP_Upkeep+0x58c>)
 80079ae:	781b      	ldrb	r3, [r3, #0]
 80079b0:	2b01      	cmp	r3, #1
 80079b2:	d118      	bne.n	80079e6 <ESP_Upkeep+0x332>
        memcpy(ATCommandArray, AT_MAIL, 3);
 80079b4:	4b95      	ldr	r3, [pc, #596]	@ (8007c0c <ESP_Upkeep+0x558>)
 80079b6:	4aa3      	ldr	r2, [pc, #652]	@ (8007c44 <ESP_Upkeep+0x590>)
 80079b8:	8811      	ldrh	r1, [r2, #0]
 80079ba:	8019      	strh	r1, [r3, #0]
 80079bc:	7892      	ldrb	r2, [r2, #2]
 80079be:	709a      	strb	r2, [r3, #2]
        EspState = ESP_STATE_SEND;
 80079c0:	4b96      	ldr	r3, [pc, #600]	@ (8007c1c <ESP_Upkeep+0x568>)
 80079c2:	2204      	movs	r2, #4
 80079c4:	701a      	strb	r2, [r3, #0]
        ATCounter = 0;
 80079c6:	4b96      	ldr	r3, [pc, #600]	@ (8007c20 <ESP_Upkeep+0x56c>)
 80079c8:	2200      	movs	r2, #0
 80079ca:	701a      	strb	r2, [r3, #0]
        Mode = AT_MODE_MAIL;
 80079cc:	4b95      	ldr	r3, [pc, #596]	@ (8007c24 <ESP_Upkeep+0x570>)
 80079ce:	2206      	movs	r2, #6
 80079d0:	701a      	strb	r2, [r3, #0]
        ATCommand = ATCommandArray[ATCounter];
 80079d2:	4b93      	ldr	r3, [pc, #588]	@ (8007c20 <ESP_Upkeep+0x56c>)
 80079d4:	781b      	ldrb	r3, [r3, #0]
 80079d6:	001a      	movs	r2, r3
 80079d8:	4b8c      	ldr	r3, [pc, #560]	@ (8007c0c <ESP_Upkeep+0x558>)
 80079da:	5c9a      	ldrb	r2, [r3, r2]
 80079dc:	4b92      	ldr	r3, [pc, #584]	@ (8007c28 <ESP_Upkeep+0x574>)
 80079de:	701a      	strb	r2, [r3, #0]
        ATExpectation = RECEIVE_EXPECTATION_OK;
 80079e0:	4b92      	ldr	r3, [pc, #584]	@ (8007c2c <ESP_Upkeep+0x578>)
 80079e2:	2200      	movs	r2, #0
 80079e4:	701a      	strb	r2, [r3, #0]
      }
#endif
      if(InitIsDone && ConnectionMade && APtested && !setTime && (sendpwremail != DO_PWR_MAIL)){
 80079e6:	4b8a      	ldr	r3, [pc, #552]	@ (8007c10 <ESP_Upkeep+0x55c>)
 80079e8:	781b      	ldrb	r3, [r3, #0]
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d030      	beq.n	8007a50 <ESP_Upkeep+0x39c>
 80079ee:	4b90      	ldr	r3, [pc, #576]	@ (8007c30 <ESP_Upkeep+0x57c>)
 80079f0:	781b      	ldrb	r3, [r3, #0]
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d02c      	beq.n	8007a50 <ESP_Upkeep+0x39c>
 80079f6:	4b90      	ldr	r3, [pc, #576]	@ (8007c38 <ESP_Upkeep+0x584>)
 80079f8:	781b      	ldrb	r3, [r3, #0]
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d028      	beq.n	8007a50 <ESP_Upkeep+0x39c>
 80079fe:	4b92      	ldr	r3, [pc, #584]	@ (8007c48 <ESP_Upkeep+0x594>)
 8007a00:	781b      	ldrb	r3, [r3, #0]
 8007a02:	2201      	movs	r2, #1
 8007a04:	4053      	eors	r3, r2
 8007a06:	b2db      	uxtb	r3, r3
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	d021      	beq.n	8007a50 <ESP_Upkeep+0x39c>
 8007a0c:	4b8c      	ldr	r3, [pc, #560]	@ (8007c40 <ESP_Upkeep+0x58c>)
 8007a0e:	781b      	ldrb	r3, [r3, #0]
 8007a10:	2b01      	cmp	r3, #1
 8007a12:	d01d      	beq.n	8007a50 <ESP_Upkeep+0x39c>
        memcpy(ATCommandArray, AT_SEND, 3);
 8007a14:	4b7d      	ldr	r3, [pc, #500]	@ (8007c0c <ESP_Upkeep+0x558>)
 8007a16:	4a8d      	ldr	r2, [pc, #564]	@ (8007c4c <ESP_Upkeep+0x598>)
 8007a18:	8811      	ldrh	r1, [r2, #0]
 8007a1a:	8019      	strh	r1, [r3, #0]
 8007a1c:	7892      	ldrb	r2, [r2, #2]
 8007a1e:	709a      	strb	r2, [r3, #2]
        EspState = ESP_STATE_SEND;
 8007a20:	4b7e      	ldr	r3, [pc, #504]	@ (8007c1c <ESP_Upkeep+0x568>)
 8007a22:	2204      	movs	r2, #4
 8007a24:	701a      	strb	r2, [r3, #0]
        ATCounter = 0;
 8007a26:	4b7e      	ldr	r3, [pc, #504]	@ (8007c20 <ESP_Upkeep+0x56c>)
 8007a28:	2200      	movs	r2, #0
 8007a2a:	701a      	strb	r2, [r3, #0]
        Mode = AT_MODE_SEND;
 8007a2c:	4b7d      	ldr	r3, [pc, #500]	@ (8007c24 <ESP_Upkeep+0x570>)
 8007a2e:	2202      	movs	r2, #2
 8007a30:	701a      	strb	r2, [r3, #0]
        start = HAL_GetTick();
 8007a32:	f00c ff7b 	bl	801492c <HAL_GetTick>
 8007a36:	0002      	movs	r2, r0
 8007a38:	4b85      	ldr	r3, [pc, #532]	@ (8007c50 <ESP_Upkeep+0x59c>)
 8007a3a:	601a      	str	r2, [r3, #0]
        ATCommand = ATCommandArray[ATCounter];
 8007a3c:	4b78      	ldr	r3, [pc, #480]	@ (8007c20 <ESP_Upkeep+0x56c>)
 8007a3e:	781b      	ldrb	r3, [r3, #0]
 8007a40:	001a      	movs	r2, r3
 8007a42:	4b72      	ldr	r3, [pc, #456]	@ (8007c0c <ESP_Upkeep+0x558>)
 8007a44:	5c9a      	ldrb	r2, [r3, r2]
 8007a46:	4b78      	ldr	r3, [pc, #480]	@ (8007c28 <ESP_Upkeep+0x574>)
 8007a48:	701a      	strb	r2, [r3, #0]
        ATExpectation = RECEIVE_EXPECTATION_OK;
 8007a4a:	4b78      	ldr	r3, [pc, #480]	@ (8007c2c <ESP_Upkeep+0x578>)
 8007a4c:	2200      	movs	r2, #0
 8007a4e:	701a      	strb	r2, [r3, #0]
      }
      if(InitIsDone && ConnectionMade && APtested && setTime && (sendpwremail != DO_PWR_MAIL)){
 8007a50:	4b6f      	ldr	r3, [pc, #444]	@ (8007c10 <ESP_Upkeep+0x55c>)
 8007a52:	781b      	ldrb	r3, [r3, #0]
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d02b      	beq.n	8007ab0 <ESP_Upkeep+0x3fc>
 8007a58:	4b75      	ldr	r3, [pc, #468]	@ (8007c30 <ESP_Upkeep+0x57c>)
 8007a5a:	781b      	ldrb	r3, [r3, #0]
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d027      	beq.n	8007ab0 <ESP_Upkeep+0x3fc>
 8007a60:	4b75      	ldr	r3, [pc, #468]	@ (8007c38 <ESP_Upkeep+0x584>)
 8007a62:	781b      	ldrb	r3, [r3, #0]
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d023      	beq.n	8007ab0 <ESP_Upkeep+0x3fc>
 8007a68:	4b77      	ldr	r3, [pc, #476]	@ (8007c48 <ESP_Upkeep+0x594>)
 8007a6a:	781b      	ldrb	r3, [r3, #0]
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d01f      	beq.n	8007ab0 <ESP_Upkeep+0x3fc>
 8007a70:	4b73      	ldr	r3, [pc, #460]	@ (8007c40 <ESP_Upkeep+0x58c>)
 8007a72:	781b      	ldrb	r3, [r3, #0]
 8007a74:	2b01      	cmp	r3, #1
 8007a76:	d01b      	beq.n	8007ab0 <ESP_Upkeep+0x3fc>
        memcpy(ATCommandArray, AT_SNTP, 4);
 8007a78:	4b76      	ldr	r3, [pc, #472]	@ (8007c54 <ESP_Upkeep+0x5a0>)
 8007a7a:	681a      	ldr	r2, [r3, #0]
 8007a7c:	4b63      	ldr	r3, [pc, #396]	@ (8007c0c <ESP_Upkeep+0x558>)
 8007a7e:	601a      	str	r2, [r3, #0]
        EspState = ESP_STATE_SEND;
 8007a80:	4b66      	ldr	r3, [pc, #408]	@ (8007c1c <ESP_Upkeep+0x568>)
 8007a82:	2204      	movs	r2, #4
 8007a84:	701a      	strb	r2, [r3, #0]
        ATCounter = 0;
 8007a86:	4b66      	ldr	r3, [pc, #408]	@ (8007c20 <ESP_Upkeep+0x56c>)
 8007a88:	2200      	movs	r2, #0
 8007a8a:	701a      	strb	r2, [r3, #0]
        Mode = AT_MODE_GETTIME;
 8007a8c:	4b65      	ldr	r3, [pc, #404]	@ (8007c24 <ESP_Upkeep+0x570>)
 8007a8e:	2205      	movs	r2, #5
 8007a90:	701a      	strb	r2, [r3, #0]
        start = HAL_GetTick();
 8007a92:	f00c ff4b 	bl	801492c <HAL_GetTick>
 8007a96:	0002      	movs	r2, r0
 8007a98:	4b6d      	ldr	r3, [pc, #436]	@ (8007c50 <ESP_Upkeep+0x59c>)
 8007a9a:	601a      	str	r2, [r3, #0]
        ATCommand = ATCommandArray[ATCounter];
 8007a9c:	4b60      	ldr	r3, [pc, #384]	@ (8007c20 <ESP_Upkeep+0x56c>)
 8007a9e:	781b      	ldrb	r3, [r3, #0]
 8007aa0:	001a      	movs	r2, r3
 8007aa2:	4b5a      	ldr	r3, [pc, #360]	@ (8007c0c <ESP_Upkeep+0x558>)
 8007aa4:	5c9a      	ldrb	r2, [r3, r2]
 8007aa6:	4b60      	ldr	r3, [pc, #384]	@ (8007c28 <ESP_Upkeep+0x574>)
 8007aa8:	701a      	strb	r2, [r3, #0]
        ATExpectation = RECEIVE_EXPECTATION_OK;
 8007aaa:	4b60      	ldr	r3, [pc, #384]	@ (8007c2c <ESP_Upkeep+0x578>)
 8007aac:	2200      	movs	r2, #0
 8007aae:	701a      	strb	r2, [r3, #0]
      }
      if(ReconfigSet){
 8007ab0:	4b69      	ldr	r3, [pc, #420]	@ (8007c58 <ESP_Upkeep+0x5a4>)
 8007ab2:	781b      	ldrb	r3, [r3, #0]
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	d100      	bne.n	8007aba <ESP_Upkeep+0x406>
 8007ab8:	e339      	b.n	800812e <ESP_Upkeep+0xa7a>
        memcpy(ATCommandArray, AT_WIFI_RECONFIG, 5);
 8007aba:	4b54      	ldr	r3, [pc, #336]	@ (8007c0c <ESP_Upkeep+0x558>)
 8007abc:	4a67      	ldr	r2, [pc, #412]	@ (8007c5c <ESP_Upkeep+0x5a8>)
 8007abe:	6811      	ldr	r1, [r2, #0]
 8007ac0:	6019      	str	r1, [r3, #0]
 8007ac2:	7912      	ldrb	r2, [r2, #4]
 8007ac4:	711a      	strb	r2, [r3, #4]
        Debug("Reconfig mode for local wifi config selected");
 8007ac6:	4a66      	ldr	r2, [pc, #408]	@ (8007c60 <ESP_Upkeep+0x5ac>)
 8007ac8:	4b66      	ldr	r3, [pc, #408]	@ (8007c64 <ESP_Upkeep+0x5b0>)
 8007aca:	0019      	movs	r1, r3
 8007acc:	2003      	movs	r0, #3
 8007ace:	f00c f9b5 	bl	8013e3c <CreateLine>
        DisableConnectedDevices();
 8007ad2:	f006 f95b 	bl	800dd8c <DisableConnectedDevices>
        usblog = false;
 8007ad6:	4b64      	ldr	r3, [pc, #400]	@ (8007c68 <ESP_Upkeep+0x5b4>)
 8007ad8:	2200      	movs	r2, #0
 8007ada:	701a      	strb	r2, [r3, #0]
        EspState = ESP_STATE_SEND;
 8007adc:	4b4f      	ldr	r3, [pc, #316]	@ (8007c1c <ESP_Upkeep+0x568>)
 8007ade:	2204      	movs	r2, #4
 8007ae0:	701a      	strb	r2, [r3, #0]
        ATCounter = 0;
 8007ae2:	4b4f      	ldr	r3, [pc, #316]	@ (8007c20 <ESP_Upkeep+0x56c>)
 8007ae4:	2200      	movs	r2, #0
 8007ae6:	701a      	strb	r2, [r3, #0]
        Mode = AT_MODE_RECONFIG;
 8007ae8:	4b4e      	ldr	r3, [pc, #312]	@ (8007c24 <ESP_Upkeep+0x570>)
 8007aea:	2203      	movs	r2, #3
 8007aec:	701a      	strb	r2, [r3, #0]
        ATCommand = ATCommandArray[ATCounter];
 8007aee:	4b4c      	ldr	r3, [pc, #304]	@ (8007c20 <ESP_Upkeep+0x56c>)
 8007af0:	781b      	ldrb	r3, [r3, #0]
 8007af2:	001a      	movs	r2, r3
 8007af4:	4b45      	ldr	r3, [pc, #276]	@ (8007c0c <ESP_Upkeep+0x558>)
 8007af6:	5c9a      	ldrb	r2, [r3, r2]
 8007af8:	4b4b      	ldr	r3, [pc, #300]	@ (8007c28 <ESP_Upkeep+0x574>)
 8007afa:	701a      	strb	r2, [r3, #0]
        ATExpectation = RECEIVE_EXPECTATION_OK;
 8007afc:	4b4b      	ldr	r3, [pc, #300]	@ (8007c2c <ESP_Upkeep+0x578>)
 8007afe:	2200      	movs	r2, #0
 8007b00:	701a      	strb	r2, [r3, #0]
      }
    break;
 8007b02:	e314      	b.n	800812e <ESP_Upkeep+0xa7a>

    case ESP_STATE_SEND:
//      Debug("entry in ESP_STATE_SEND");
        ATSend = AT_Send(ATCommand);
 8007b04:	4b48      	ldr	r3, [pc, #288]	@ (8007c28 <ESP_Upkeep+0x574>)
 8007b06:	781b      	ldrb	r3, [r3, #0]
 8007b08:	1dfc      	adds	r4, r7, #7
 8007b0a:	0018      	movs	r0, r3
 8007b0c:	f7ff fb26 	bl	800715c <AT_Send>
 8007b10:	0003      	movs	r3, r0
 8007b12:	7023      	strb	r3, [r4, #0]
        if(ATSend){
 8007b14:	1dfb      	adds	r3, r7, #7
 8007b16:	781b      	ldrb	r3, [r3, #0]
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	d100      	bne.n	8007b1e <ESP_Upkeep+0x46a>
 8007b1c:	e309      	b.n	8008132 <ESP_Upkeep+0xa7e>
          EspState = ESP_STATE_WAIT_FOR_REPLY;
 8007b1e:	4b3f      	ldr	r3, [pc, #252]	@ (8007c1c <ESP_Upkeep+0x568>)
 8007b20:	2203      	movs	r2, #3
 8007b22:	701a      	strb	r2, [r3, #0]
        }
    break;
 8007b24:	e305      	b.n	8008132 <ESP_Upkeep+0xa7e>

    case ESP_STATE_WAIT_FOR_REPLY:
      if ((ReconfigSet) && (Mode != AT_MODE_RECONFIG)) {
 8007b26:	4b4c      	ldr	r3, [pc, #304]	@ (8007c58 <ESP_Upkeep+0x5a4>)
 8007b28:	781b      	ldrb	r3, [r3, #0]
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d007      	beq.n	8007b3e <ESP_Upkeep+0x48a>
 8007b2e:	4b3d      	ldr	r3, [pc, #244]	@ (8007c24 <ESP_Upkeep+0x570>)
 8007b30:	781b      	ldrb	r3, [r3, #0]
 8007b32:	2b03      	cmp	r3, #3
 8007b34:	d003      	beq.n	8007b3e <ESP_Upkeep+0x48a>
        EspState = ESP_STATE_MODE_SELECT;
 8007b36:	4b39      	ldr	r3, [pc, #228]	@ (8007c1c <ESP_Upkeep+0x568>)
 8007b38:	220b      	movs	r2, #11
 8007b3a:	701a      	strb	r2, [r3, #0]
        break;
 8007b3c:	e300      	b.n	8008140 <ESP_Upkeep+0xa8c>
      }
      if(TimestampIsReached(ESPTimeStamp)){
 8007b3e:	4b4b      	ldr	r3, [pc, #300]	@ (8007c6c <ESP_Upkeep+0x5b8>)
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	0018      	movs	r0, r3
 8007b44:	f00c f924 	bl	8013d90 <TimestampIsReached>
 8007b48:	1e03      	subs	r3, r0, #0
 8007b4a:	d100      	bne.n	8007b4e <ESP_Upkeep+0x49a>
 8007b4c:	e2f3      	b.n	8008136 <ESP_Upkeep+0xa82>
        ATReceived = DMA_ProcessBuffer(ATExpectation);
 8007b4e:	4b37      	ldr	r3, [pc, #220]	@ (8007c2c <ESP_Upkeep+0x578>)
 8007b50:	781b      	ldrb	r3, [r3, #0]
 8007b52:	0018      	movs	r0, r3
 8007b54:	f7ff f9c0 	bl	8006ed8 <DMA_ProcessBuffer>
 8007b58:	0003      	movs	r3, r0
 8007b5a:	001a      	movs	r2, r3
 8007b5c:	4b44      	ldr	r3, [pc, #272]	@ (8007c70 <ESP_Upkeep+0x5bc>)
 8007b5e:	701a      	strb	r2, [r3, #0]
        bool proceed = ATCompare(ATReceived, ATExpectation);
 8007b60:	4b43      	ldr	r3, [pc, #268]	@ (8007c70 <ESP_Upkeep+0x5bc>)
 8007b62:	781a      	ldrb	r2, [r3, #0]
 8007b64:	4b31      	ldr	r3, [pc, #196]	@ (8007c2c <ESP_Upkeep+0x578>)
 8007b66:	781b      	ldrb	r3, [r3, #0]
 8007b68:	1d7c      	adds	r4, r7, #5
 8007b6a:	0019      	movs	r1, r3
 8007b6c:	0010      	movs	r0, r2
 8007b6e:	f7ff fab3 	bl	80070d8 <ATCompare>
 8007b72:	0003      	movs	r3, r0
 8007b74:	7023      	strb	r3, [r4, #0]
        if(ATReceived == RECEIVE_STATUS_ERROR){
 8007b76:	4b3e      	ldr	r3, [pc, #248]	@ (8007c70 <ESP_Upkeep+0x5bc>)
 8007b78:	781b      	ldrb	r3, [r3, #0]
 8007b7a:	2b01      	cmp	r3, #1
 8007b7c:	d000      	beq.n	8007b80 <ESP_Upkeep+0x4cc>
 8007b7e:	e085      	b.n	8007c8c <ESP_Upkeep+0x5d8>
          if(ATCommand == AT_SENDDATA){
 8007b80:	4b29      	ldr	r3, [pc, #164]	@ (8007c28 <ESP_Upkeep+0x574>)
 8007b82:	781b      	ldrb	r3, [r3, #0]
 8007b84:	2b0f      	cmp	r3, #15
 8007b86:	d108      	bne.n	8007b9a <ESP_Upkeep+0x4e6>
            ATCommand = AT_HTTPCPOST;
 8007b88:	4b27      	ldr	r3, [pc, #156]	@ (8007c28 <ESP_Upkeep+0x574>)
 8007b8a:	220e      	movs	r2, #14
 8007b8c:	701a      	strb	r2, [r3, #0]
            ATExpectation = RECEIVE_EXPECTATION_START;
 8007b8e:	4b27      	ldr	r3, [pc, #156]	@ (8007c2c <ESP_Upkeep+0x578>)
 8007b90:	2202      	movs	r2, #2
 8007b92:	701a      	strb	r2, [r3, #0]
            ATCounter = 1;
 8007b94:	4b22      	ldr	r3, [pc, #136]	@ (8007c20 <ESP_Upkeep+0x56c>)
 8007b96:	2201      	movs	r2, #1
 8007b98:	701a      	strb	r2, [r3, #0]
          }
          if(ATCommand == AT_SENDMAIL){
 8007b9a:	4b23      	ldr	r3, [pc, #140]	@ (8007c28 <ESP_Upkeep+0x574>)
 8007b9c:	781b      	ldrb	r3, [r3, #0]
 8007b9e:	2b15      	cmp	r3, #21
 8007ba0:	d108      	bne.n	8007bb4 <ESP_Upkeep+0x500>
            ATCommand = AT_HTTPCPOST_MAILAPI;
 8007ba2:	4b21      	ldr	r3, [pc, #132]	@ (8007c28 <ESP_Upkeep+0x574>)
 8007ba4:	2214      	movs	r2, #20
 8007ba6:	701a      	strb	r2, [r3, #0]
            ATExpectation = RECEIVE_EXPECTATION_START;
 8007ba8:	4b20      	ldr	r3, [pc, #128]	@ (8007c2c <ESP_Upkeep+0x578>)
 8007baa:	2202      	movs	r2, #2
 8007bac:	701a      	strb	r2, [r3, #0]
            ATCounter = 1;
 8007bae:	4b1c      	ldr	r3, [pc, #112]	@ (8007c20 <ESP_Upkeep+0x56c>)
 8007bb0:	2201      	movs	r2, #1
 8007bb2:	701a      	strb	r2, [r3, #0]
          }
          EspState = ESP_STATE_SEND;
 8007bb4:	4b19      	ldr	r3, [pc, #100]	@ (8007c1c <ESP_Upkeep+0x568>)
 8007bb6:	2204      	movs	r2, #4
 8007bb8:	701a      	strb	r2, [r3, #0]
          errorcntr++;
 8007bba:	4b2e      	ldr	r3, [pc, #184]	@ (8007c74 <ESP_Upkeep+0x5c0>)
 8007bbc:	781b      	ldrb	r3, [r3, #0]
 8007bbe:	3301      	adds	r3, #1
 8007bc0:	b2da      	uxtb	r2, r3
 8007bc2:	4b2c      	ldr	r3, [pc, #176]	@ (8007c74 <ESP_Upkeep+0x5c0>)
 8007bc4:	701a      	strb	r2, [r3, #0]
          if (errorcntr >= ESP_MAX_RETRANSMITIONS) {
 8007bc6:	4b2b      	ldr	r3, [pc, #172]	@ (8007c74 <ESP_Upkeep+0x5c0>)
 8007bc8:	781b      	ldrb	r3, [r3, #0]
 8007bca:	2b02      	cmp	r3, #2
 8007bcc:	d95e      	bls.n	8007c8c <ESP_Upkeep+0x5d8>
            ESPTimeStamp = HAL_GetTick() + ESP_UNTIL_NEXT_SEND;
 8007bce:	f00c fead 	bl	801492c <HAL_GetTick>
 8007bd2:	0003      	movs	r3, r0
 8007bd4:	4a28      	ldr	r2, [pc, #160]	@ (8007c78 <ESP_Upkeep+0x5c4>)
 8007bd6:	189a      	adds	r2, r3, r2
 8007bd8:	4b24      	ldr	r3, [pc, #144]	@ (8007c6c <ESP_Upkeep+0x5b8>)
 8007bda:	601a      	str	r2, [r3, #0]
            ESPTransmitDone = true;
 8007bdc:	4b27      	ldr	r3, [pc, #156]	@ (8007c7c <ESP_Upkeep+0x5c8>)
 8007bde:	2201      	movs	r2, #1
 8007be0:	701a      	strb	r2, [r3, #0]
            clearDMABuffer();
 8007be2:	f7ff fa6b 	bl	80070bc <clearDMABuffer>
            stop = HAL_GetTick();
 8007be6:	f00c fea1 	bl	801492c <HAL_GetTick>
 8007bea:	0002      	movs	r2, r0
 8007bec:	4b24      	ldr	r3, [pc, #144]	@ (8007c80 <ESP_Upkeep+0x5cc>)
 8007bee:	601a      	str	r2, [r3, #0]
            Error("ESP to many retransmits, terminated after %lu ms", (stop-start));
 8007bf0:	4b23      	ldr	r3, [pc, #140]	@ (8007c80 <ESP_Upkeep+0x5cc>)
 8007bf2:	681a      	ldr	r2, [r3, #0]
 8007bf4:	4b16      	ldr	r3, [pc, #88]	@ (8007c50 <ESP_Upkeep+0x59c>)
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	1ad3      	subs	r3, r2, r3
 8007bfa:	4a22      	ldr	r2, [pc, #136]	@ (8007c84 <ESP_Upkeep+0x5d0>)
 8007bfc:	4922      	ldr	r1, [pc, #136]	@ (8007c88 <ESP_Upkeep+0x5d4>)
 8007bfe:	2001      	movs	r0, #1
 8007c00:	f00c f91c 	bl	8013e3c <CreateLine>
            EspState = ESP_STATE_DEINIT;
 8007c04:	4b05      	ldr	r3, [pc, #20]	@ (8007c1c <ESP_Upkeep+0x568>)
 8007c06:	220d      	movs	r2, #13
 8007c08:	701a      	strb	r2, [r3, #0]
            break;
 8007c0a:	e299      	b.n	8008140 <ESP_Upkeep+0xa8c>
 8007c0c:	20000684 	.word	0x20000684
 8007c10:	200005ad 	.word	0x200005ad
 8007c14:	200005ae 	.word	0x200005ae
 8007c18:	20000004 	.word	0x20000004
 8007c1c:	20000030 	.word	0x20000030
 8007c20:	2000068e 	.word	0x2000068e
 8007c24:	20000702 	.word	0x20000702
 8007c28:	20000701 	.word	0x20000701
 8007c2c:	20000700 	.word	0x20000700
 8007c30:	200005b0 	.word	0x200005b0
 8007c34:	20000014 	.word	0x20000014
 8007c38:	200005b1 	.word	0x200005b1
 8007c3c:	20000010 	.word	0x20000010
 8007c40:	200010f9 	.word	0x200010f9
 8007c44:	20000028 	.word	0x20000028
 8007c48:	20000002 	.word	0x20000002
 8007c4c:	2000000c 	.word	0x2000000c
 8007c50:	200005b4 	.word	0x200005b4
 8007c54:	20000024 	.word	0x20000024
 8007c58:	200005af 	.word	0x200005af
 8007c5c:	2000001c 	.word	0x2000001c
 8007c60:	0802b148 	.word	0x0802b148
 8007c64:	0802a9bc 	.word	0x0802a9bc
 8007c68:	200010f7 	.word	0x200010f7
 8007c6c:	20000694 	.word	0x20000694
 8007c70:	20000034 	.word	0x20000034
 8007c74:	2000068f 	.word	0x2000068f
 8007c78:	0003a980 	.word	0x0003a980
 8007c7c:	200005b3 	.word	0x200005b3
 8007c80:	200005b8 	.word	0x200005b8
 8007c84:	0802b178 	.word	0x0802b178
 8007c88:	0802a958 	.word	0x0802a958
          }
        }
        if(ATReceived == RECEIVE_STATUS_INCOMPLETE){
 8007c8c:	4bb3      	ldr	r3, [pc, #716]	@ (8007f5c <ESP_Upkeep+0x8a8>)
 8007c8e:	781b      	ldrb	r3, [r3, #0]
 8007c90:	2b03      	cmp	r3, #3
 8007c92:	d106      	bne.n	8007ca2 <ESP_Upkeep+0x5ee>
          ESPTimeStamp = HAL_GetTick() + 10;
 8007c94:	f00c fe4a 	bl	801492c <HAL_GetTick>
 8007c98:	0003      	movs	r3, r0
 8007c9a:	330a      	adds	r3, #10
 8007c9c:	001a      	movs	r2, r3
 8007c9e:	4bb0      	ldr	r3, [pc, #704]	@ (8007f60 <ESP_Upkeep+0x8ac>)
 8007ca0:	601a      	str	r2, [r3, #0]
        }
        if(ATReceived == RECEIVE_STATUS_LOOP){
 8007ca2:	4bae      	ldr	r3, [pc, #696]	@ (8007f5c <ESP_Upkeep+0x8a8>)
 8007ca4:	781b      	ldrb	r3, [r3, #0]
 8007ca6:	2b0a      	cmp	r3, #10
 8007ca8:	d106      	bne.n	8007cb8 <ESP_Upkeep+0x604>
          ESPTimeStamp = HAL_GetTick() + 10;
 8007caa:	f00c fe3f 	bl	801492c <HAL_GetTick>
 8007cae:	0003      	movs	r3, r0
 8007cb0:	330a      	adds	r3, #10
 8007cb2:	001a      	movs	r2, r3
 8007cb4:	4baa      	ldr	r3, [pc, #680]	@ (8007f60 <ESP_Upkeep+0x8ac>)
 8007cb6:	601a      	str	r2, [r3, #0]
        }
        if(ATReceived == RECEIVE_STATUS_TIMEOUT){
 8007cb8:	4ba8      	ldr	r3, [pc, #672]	@ (8007f5c <ESP_Upkeep+0x8a8>)
 8007cba:	781b      	ldrb	r3, [r3, #0]
 8007cbc:	2b06      	cmp	r3, #6
 8007cbe:	d14b      	bne.n	8007d58 <ESP_Upkeep+0x6a4>
          timeoutcntr++;
 8007cc0:	4ba8      	ldr	r3, [pc, #672]	@ (8007f64 <ESP_Upkeep+0x8b0>)
 8007cc2:	781b      	ldrb	r3, [r3, #0]
 8007cc4:	3301      	adds	r3, #1
 8007cc6:	b2da      	uxtb	r2, r3
 8007cc8:	4ba6      	ldr	r3, [pc, #664]	@ (8007f64 <ESP_Upkeep+0x8b0>)
 8007cca:	701a      	strb	r2, [r3, #0]
          Error("In ESP_STATE_WAIT_FOR_REPLY: RECEIVE_STATUS_TIMEOUT reached");
 8007ccc:	4aa6      	ldr	r2, [pc, #664]	@ (8007f68 <ESP_Upkeep+0x8b4>)
 8007cce:	4ba7      	ldr	r3, [pc, #668]	@ (8007f6c <ESP_Upkeep+0x8b8>)
 8007cd0:	0019      	movs	r1, r3
 8007cd2:	2001      	movs	r0, #1
 8007cd4:	f00c f8b2 	bl	8013e3c <CreateLine>
          if (timeoutcntr >= ESP_MAX_RETRANSMITIONS) {
 8007cd8:	4ba2      	ldr	r3, [pc, #648]	@ (8007f64 <ESP_Upkeep+0x8b0>)
 8007cda:	781b      	ldrb	r3, [r3, #0]
 8007cdc:	2b02      	cmp	r3, #2
 8007cde:	d924      	bls.n	8007d2a <ESP_Upkeep+0x676>
            ESPTimeStamp = HAL_GetTick() + ESP_UNTIL_NEXT_RETRANSMIT_SEND;
 8007ce0:	f00c fe24 	bl	801492c <HAL_GetTick>
 8007ce4:	0003      	movs	r3, r0
 8007ce6:	4aa2      	ldr	r2, [pc, #648]	@ (8007f70 <ESP_Upkeep+0x8bc>)
 8007ce8:	189a      	adds	r2, r3, r2
 8007cea:	4b9d      	ldr	r3, [pc, #628]	@ (8007f60 <ESP_Upkeep+0x8ac>)
 8007cec:	601a      	str	r2, [r3, #0]
            ESPTransmitDone = true;
 8007cee:	4ba1      	ldr	r3, [pc, #644]	@ (8007f74 <ESP_Upkeep+0x8c0>)
 8007cf0:	2201      	movs	r2, #1
 8007cf2:	701a      	strb	r2, [r3, #0]
            clearDMABuffer();
 8007cf4:	f7ff f9e2 	bl	80070bc <clearDMABuffer>
            stop = HAL_GetTick();
 8007cf8:	f00c fe18 	bl	801492c <HAL_GetTick>
 8007cfc:	0002      	movs	r2, r0
 8007cfe:	4b9e      	ldr	r3, [pc, #632]	@ (8007f78 <ESP_Upkeep+0x8c4>)
 8007d00:	601a      	str	r2, [r3, #0]
            Error("ESP to many timeouts, terminated after %lu ms", (stop-start));
 8007d02:	4b9d      	ldr	r3, [pc, #628]	@ (8007f78 <ESP_Upkeep+0x8c4>)
 8007d04:	681a      	ldr	r2, [r3, #0]
 8007d06:	4b9d      	ldr	r3, [pc, #628]	@ (8007f7c <ESP_Upkeep+0x8c8>)
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	1ad3      	subs	r3, r2, r3
 8007d0c:	4a9c      	ldr	r2, [pc, #624]	@ (8007f80 <ESP_Upkeep+0x8cc>)
 8007d0e:	4997      	ldr	r1, [pc, #604]	@ (8007f6c <ESP_Upkeep+0x8b8>)
 8007d10:	2001      	movs	r0, #1
 8007d12:	f00c f893 	bl	8013e3c <CreateLine>
            EspState = ESP_STATE_DEINIT;
 8007d16:	4b9b      	ldr	r3, [pc, #620]	@ (8007f84 <ESP_Upkeep+0x8d0>)
 8007d18:	220d      	movs	r2, #13
 8007d1a:	701a      	strb	r2, [r3, #0]
            ATCommand = AT_END;
 8007d1c:	4b9a      	ldr	r3, [pc, #616]	@ (8007f88 <ESP_Upkeep+0x8d4>)
 8007d1e:	2216      	movs	r2, #22
 8007d20:	701a      	strb	r2, [r3, #0]
            ATExpectation = RECEIVE_EXPECTATION_OK;
 8007d22:	4b9a      	ldr	r3, [pc, #616]	@ (8007f8c <ESP_Upkeep+0x8d8>)
 8007d24:	2200      	movs	r2, #0
 8007d26:	701a      	strb	r2, [r3, #0]
            break;
 8007d28:	e20a      	b.n	8008140 <ESP_Upkeep+0xa8c>
          }
          if(ATCommand != AT_SENDDATA){
 8007d2a:	4b97      	ldr	r3, [pc, #604]	@ (8007f88 <ESP_Upkeep+0x8d4>)
 8007d2c:	781b      	ldrb	r3, [r3, #0]
 8007d2e:	2b0f      	cmp	r3, #15
 8007d30:	d003      	beq.n	8007d3a <ESP_Upkeep+0x686>
            EspState = ESP_STATE_SEND;
 8007d32:	4b94      	ldr	r3, [pc, #592]	@ (8007f84 <ESP_Upkeep+0x8d0>)
 8007d34:	2204      	movs	r2, #4
 8007d36:	701a      	strb	r2, [r3, #0]
 8007d38:	e00e      	b.n	8007d58 <ESP_Upkeep+0x6a4>
          }
          else{
            ATCommand = AT_HTTPCPOST;
 8007d3a:	4b93      	ldr	r3, [pc, #588]	@ (8007f88 <ESP_Upkeep+0x8d4>)
 8007d3c:	220e      	movs	r2, #14
 8007d3e:	701a      	strb	r2, [r3, #0]
            ATCounter -= 1;
 8007d40:	4b93      	ldr	r3, [pc, #588]	@ (8007f90 <ESP_Upkeep+0x8dc>)
 8007d42:	781b      	ldrb	r3, [r3, #0]
 8007d44:	3b01      	subs	r3, #1
 8007d46:	b2da      	uxtb	r2, r3
 8007d48:	4b91      	ldr	r3, [pc, #580]	@ (8007f90 <ESP_Upkeep+0x8dc>)
 8007d4a:	701a      	strb	r2, [r3, #0]
            ATExpectation = RECEIVE_EXPECTATION_START;
 8007d4c:	4b8f      	ldr	r3, [pc, #572]	@ (8007f8c <ESP_Upkeep+0x8d8>)
 8007d4e:	2202      	movs	r2, #2
 8007d50:	701a      	strb	r2, [r3, #0]
            EspState = ESP_STATE_SEND;
 8007d52:	4b8c      	ldr	r3, [pc, #560]	@ (8007f84 <ESP_Upkeep+0x8d0>)
 8007d54:	2204      	movs	r2, #4
 8007d56:	701a      	strb	r2, [r3, #0]
          }
        }
        if(proceed){
 8007d58:	1d7b      	adds	r3, r7, #5
 8007d5a:	781b      	ldrb	r3, [r3, #0]
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d100      	bne.n	8007d62 <ESP_Upkeep+0x6ae>
 8007d60:	e1e9      	b.n	8008136 <ESP_Upkeep+0xa82>
          EspState = ESP_STATE_NEXT_AT;
 8007d62:	4b88      	ldr	r3, [pc, #544]	@ (8007f84 <ESP_Upkeep+0x8d0>)
 8007d64:	2205      	movs	r2, #5
 8007d66:	701a      	strb	r2, [r3, #0]
        }
      }
      break;
 8007d68:	e1e5      	b.n	8008136 <ESP_Upkeep+0xa82>

    case ESP_STATE_NEXT_AT:
//      Debug("entry in ESP_STATE_NEXT_AT");
      ATCounter += 1;
 8007d6a:	4b89      	ldr	r3, [pc, #548]	@ (8007f90 <ESP_Upkeep+0x8dc>)
 8007d6c:	781b      	ldrb	r3, [r3, #0]
 8007d6e:	3301      	adds	r3, #1
 8007d70:	b2da      	uxtb	r2, r3
 8007d72:	4b87      	ldr	r3, [pc, #540]	@ (8007f90 <ESP_Upkeep+0x8dc>)
 8007d74:	701a      	strb	r2, [r3, #0]
      ATCommand = ATCommandArray[ATCounter];
 8007d76:	4b86      	ldr	r3, [pc, #536]	@ (8007f90 <ESP_Upkeep+0x8dc>)
 8007d78:	781b      	ldrb	r3, [r3, #0]
 8007d7a:	001a      	movs	r2, r3
 8007d7c:	4b85      	ldr	r3, [pc, #532]	@ (8007f94 <ESP_Upkeep+0x8e0>)
 8007d7e:	5c9a      	ldrb	r2, [r3, r2]
 8007d80:	4b81      	ldr	r3, [pc, #516]	@ (8007f88 <ESP_Upkeep+0x8d4>)
 8007d82:	701a      	strb	r2, [r3, #0]
      if(ATCommand == AT_RESTORE){
 8007d84:	4b80      	ldr	r3, [pc, #512]	@ (8007f88 <ESP_Upkeep+0x8d4>)
 8007d86:	781b      	ldrb	r3, [r3, #0]
 8007d88:	2b03      	cmp	r3, #3
 8007d8a:	d102      	bne.n	8007d92 <ESP_Upkeep+0x6de>
         ATExpectation = RECEIVE_EXPECTATION_READY;
 8007d8c:	4b7f      	ldr	r3, [pc, #508]	@ (8007f8c <ESP_Upkeep+0x8d8>)
 8007d8e:	2201      	movs	r2, #1
 8007d90:	701a      	strb	r2, [r3, #0]
      }
      if(ATCommand == AT_HTTPCPOST){
 8007d92:	4b7d      	ldr	r3, [pc, #500]	@ (8007f88 <ESP_Upkeep+0x8d4>)
 8007d94:	781b      	ldrb	r3, [r3, #0]
 8007d96:	2b0e      	cmp	r3, #14
 8007d98:	d102      	bne.n	8007da0 <ESP_Upkeep+0x6ec>
        ATExpectation = RECEIVE_EXPECTATION_START;
 8007d9a:	4b7c      	ldr	r3, [pc, #496]	@ (8007f8c <ESP_Upkeep+0x8d8>)
 8007d9c:	2202      	movs	r2, #2
 8007d9e:	701a      	strb	r2, [r3, #0]
      }
      if(ATCommand != AT_HTTPCPOST && ATCommand != AT_RESTORE){
 8007da0:	4b79      	ldr	r3, [pc, #484]	@ (8007f88 <ESP_Upkeep+0x8d4>)
 8007da2:	781b      	ldrb	r3, [r3, #0]
 8007da4:	2b0e      	cmp	r3, #14
 8007da6:	d006      	beq.n	8007db6 <ESP_Upkeep+0x702>
 8007da8:	4b77      	ldr	r3, [pc, #476]	@ (8007f88 <ESP_Upkeep+0x8d4>)
 8007daa:	781b      	ldrb	r3, [r3, #0]
 8007dac:	2b03      	cmp	r3, #3
 8007dae:	d002      	beq.n	8007db6 <ESP_Upkeep+0x702>
        ATExpectation = RECEIVE_EXPECTATION_OK;
 8007db0:	4b76      	ldr	r3, [pc, #472]	@ (8007f8c <ESP_Upkeep+0x8d8>)
 8007db2:	2200      	movs	r2, #0
 8007db4:	701a      	strb	r2, [r3, #0]
      }
      if(ATCommand == AT_CIPSNTPCFG){
 8007db6:	4b74      	ldr	r3, [pc, #464]	@ (8007f88 <ESP_Upkeep+0x8d4>)
 8007db8:	781b      	ldrb	r3, [r3, #0]
 8007dba:	2b11      	cmp	r3, #17
 8007dbc:	d102      	bne.n	8007dc4 <ESP_Upkeep+0x710>
         ATExpectation = RECEIVE_EXPECTATION_TIME;
 8007dbe:	4b73      	ldr	r3, [pc, #460]	@ (8007f8c <ESP_Upkeep+0x8d8>)
 8007dc0:	2205      	movs	r2, #5
 8007dc2:	701a      	strb	r2, [r3, #0]
      }
#ifdef USE_MAIL
      if(ATCommand == AT_SENDMAIL){
 8007dc4:	4b70      	ldr	r3, [pc, #448]	@ (8007f88 <ESP_Upkeep+0x8d4>)
 8007dc6:	781b      	ldrb	r3, [r3, #0]
 8007dc8:	2b15      	cmp	r3, #21
 8007dca:	d102      	bne.n	8007dd2 <ESP_Upkeep+0x71e>
        ATExpectation = RECEIVE_EXPECTATION_OK;
 8007dcc:	4b6f      	ldr	r3, [pc, #444]	@ (8007f8c <ESP_Upkeep+0x8d8>)
 8007dce:	2200      	movs	r2, #0
 8007dd0:	701a      	strb	r2, [r3, #0]
      }
#endif
      EspState = ESP_STATE_SEND;
 8007dd2:	4b6c      	ldr	r3, [pc, #432]	@ (8007f84 <ESP_Upkeep+0x8d0>)
 8007dd4:	2204      	movs	r2, #4
 8007dd6:	701a      	strb	r2, [r3, #0]
      if(ATCommand == AT_END){
 8007dd8:	4b6b      	ldr	r3, [pc, #428]	@ (8007f88 <ESP_Upkeep+0x8d4>)
 8007dda:	781b      	ldrb	r3, [r3, #0]
 8007ddc:	2b16      	cmp	r3, #22
 8007dde:	d000      	beq.n	8007de2 <ESP_Upkeep+0x72e>
 8007de0:	e1ab      	b.n	800813a <ESP_Upkeep+0xa86>
        if(Mode == AT_MODE_SEND){
 8007de2:	4b6d      	ldr	r3, [pc, #436]	@ (8007f98 <ESP_Upkeep+0x8e4>)
 8007de4:	781b      	ldrb	r3, [r3, #0]
 8007de6:	2b02      	cmp	r3, #2
 8007de8:	d124      	bne.n	8007e34 <ESP_Upkeep+0x780>
          ESPTimeStamp = HAL_GetTick() + ESP_UNTIL_NEXT_SEND;
 8007dea:	f00c fd9f 	bl	801492c <HAL_GetTick>
 8007dee:	0003      	movs	r3, r0
 8007df0:	4a6a      	ldr	r2, [pc, #424]	@ (8007f9c <ESP_Upkeep+0x8e8>)
 8007df2:	189a      	adds	r2, r3, r2
 8007df4:	4b5a      	ldr	r3, [pc, #360]	@ (8007f60 <ESP_Upkeep+0x8ac>)
 8007df6:	601a      	str	r2, [r3, #0]
          clearDMABuffer();
 8007df8:	f7ff f960 	bl	80070bc <clearDMABuffer>
          stop = HAL_GetTick();
 8007dfc:	f00c fd96 	bl	801492c <HAL_GetTick>
 8007e00:	0002      	movs	r2, r0
 8007e02:	4b5d      	ldr	r3, [pc, #372]	@ (8007f78 <ESP_Upkeep+0x8c4>)
 8007e04:	601a      	str	r2, [r3, #0]
          Info("Message send in %lu ms", (stop-start));
 8007e06:	4b5c      	ldr	r3, [pc, #368]	@ (8007f78 <ESP_Upkeep+0x8c4>)
 8007e08:	681a      	ldr	r2, [r3, #0]
 8007e0a:	4b5c      	ldr	r3, [pc, #368]	@ (8007f7c <ESP_Upkeep+0x8c8>)
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	1ad3      	subs	r3, r2, r3
 8007e10:	4a63      	ldr	r2, [pc, #396]	@ (8007fa0 <ESP_Upkeep+0x8ec>)
 8007e12:	4964      	ldr	r1, [pc, #400]	@ (8007fa4 <ESP_Upkeep+0x8f0>)
 8007e14:	2002      	movs	r0, #2
 8007e16:	f00c f811 	bl	8013e3c <CreateLine>
          ResetdBAmax();
 8007e1a:	f006 f83f 	bl	800de9c <ResetdBAmax>
          resetMaxMeasurementValues();
 8007e1e:	f7fc ffbf 	bl	8004da0 <resetMaxMeasurementValues>
          showTime();
 8007e22:	f002 f801 	bl	8009e28 <showTime>
          ESPTransmitDone = true;
 8007e26:	4b53      	ldr	r3, [pc, #332]	@ (8007f74 <ESP_Upkeep+0x8c0>)
 8007e28:	2201      	movs	r2, #1
 8007e2a:	701a      	strb	r2, [r3, #0]
          EspState = ESP_STATE_DEINIT;
 8007e2c:	4b55      	ldr	r3, [pc, #340]	@ (8007f84 <ESP_Upkeep+0x8d0>)
 8007e2e:	220d      	movs	r2, #13
 8007e30:	701a      	strb	r2, [r3, #0]
#endif
        else{
          EspState = ESP_STATE_RESET;
        }
      }
    break;
 8007e32:	e182      	b.n	800813a <ESP_Upkeep+0xa86>
        else if (Mode == AT_MODE_GETTIME) {
 8007e34:	4b58      	ldr	r3, [pc, #352]	@ (8007f98 <ESP_Upkeep+0x8e4>)
 8007e36:	781b      	ldrb	r3, [r3, #0]
 8007e38:	2b05      	cmp	r3, #5
 8007e3a:	d13a      	bne.n	8007eb2 <ESP_Upkeep+0x7fe>
            setTime = false;
 8007e3c:	4b5a      	ldr	r3, [pc, #360]	@ (8007fa8 <ESP_Upkeep+0x8f4>)
 8007e3e:	2200      	movs	r2, #0
 8007e40:	701a      	strb	r2, [r3, #0]
            ESPNTPTimeStamp = calculateNextNTPTime();
 8007e42:	f002 f893 	bl	8009f6c <calculateNextNTPTime>
 8007e46:	0002      	movs	r2, r0
 8007e48:	4b58      	ldr	r3, [pc, #352]	@ (8007fac <ESP_Upkeep+0x8f8>)
 8007e4a:	601a      	str	r2, [r3, #0]
            ESPNTPTimeStamp += ESP_UNTIL_NEXT_NTP;
 8007e4c:	4b57      	ldr	r3, [pc, #348]	@ (8007fac <ESP_Upkeep+0x8f8>)
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	4a57      	ldr	r2, [pc, #348]	@ (8007fb0 <ESP_Upkeep+0x8fc>)
 8007e52:	189a      	adds	r2, r3, r2
 8007e54:	4b55      	ldr	r3, [pc, #340]	@ (8007fac <ESP_Upkeep+0x8f8>)
 8007e56:	601a      	str	r2, [r3, #0]
            Info("Time synchronized by NTP, next NTP should be called in %lu seconds", ESP_UNTIL_NEXT_NTP);
 8007e58:	4b55      	ldr	r3, [pc, #340]	@ (8007fb0 <ESP_Upkeep+0x8fc>)
 8007e5a:	4a56      	ldr	r2, [pc, #344]	@ (8007fb4 <ESP_Upkeep+0x900>)
 8007e5c:	4951      	ldr	r1, [pc, #324]	@ (8007fa4 <ESP_Upkeep+0x8f0>)
 8007e5e:	2002      	movs	r0, #2
 8007e60:	f00b ffec 	bl	8013e3c <CreateLine>
            ESPTimeStamp = savedESPTimeStamp;
 8007e64:	4b54      	ldr	r3, [pc, #336]	@ (8007fb8 <ESP_Upkeep+0x904>)
 8007e66:	681a      	ldr	r2, [r3, #0]
 8007e68:	4b3d      	ldr	r3, [pc, #244]	@ (8007f60 <ESP_Upkeep+0x8ac>)
 8007e6a:	601a      	str	r2, [r3, #0]
            clearDMABuffer();
 8007e6c:	f7ff f926 	bl	80070bc <clearDMABuffer>
            stop = HAL_GetTick();
 8007e70:	f00c fd5c 	bl	801492c <HAL_GetTick>
 8007e74:	0002      	movs	r2, r0
 8007e76:	4b40      	ldr	r3, [pc, #256]	@ (8007f78 <ESP_Upkeep+0x8c4>)
 8007e78:	601a      	str	r2, [r3, #0]
            Info("Message time update in %lu ms", (stop-start));
 8007e7a:	4b3f      	ldr	r3, [pc, #252]	@ (8007f78 <ESP_Upkeep+0x8c4>)
 8007e7c:	681a      	ldr	r2, [r3, #0]
 8007e7e:	4b3f      	ldr	r3, [pc, #252]	@ (8007f7c <ESP_Upkeep+0x8c8>)
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	1ad3      	subs	r3, r2, r3
 8007e84:	4a4d      	ldr	r2, [pc, #308]	@ (8007fbc <ESP_Upkeep+0x908>)
 8007e86:	4947      	ldr	r1, [pc, #284]	@ (8007fa4 <ESP_Upkeep+0x8f0>)
 8007e88:	2002      	movs	r0, #2
 8007e8a:	f00b ffd7 	bl	8013e3c <CreateLine>
            if (HAL_GetTick() < DEVICE_INIT_TIMEOUT) { // during startup the sensors are active after getting time
 8007e8e:	f00c fd4d 	bl	801492c <HAL_GetTick>
 8007e92:	0003      	movs	r3, r0
 8007e94:	4a4a      	ldr	r2, [pc, #296]	@ (8007fc0 <ESP_Upkeep+0x90c>)
 8007e96:	4293      	cmp	r3, r2
 8007e98:	d804      	bhi.n	8007ea4 <ESP_Upkeep+0x7f0>
              deviceTimeOut = DEVICE_INIT_TIMEOUT;
 8007e9a:	4b4a      	ldr	r3, [pc, #296]	@ (8007fc4 <ESP_Upkeep+0x910>)
 8007e9c:	4a4a      	ldr	r2, [pc, #296]	@ (8007fc8 <ESP_Upkeep+0x914>)
 8007e9e:	601a      	str	r2, [r3, #0]
              EnabledConnectedDevices();
 8007ea0:	f005 ff16 	bl	800dcd0 <EnabledConnectedDevices>
            EspState = ESP_STATE_DEINIT;
 8007ea4:	4b37      	ldr	r3, [pc, #220]	@ (8007f84 <ESP_Upkeep+0x8d0>)
 8007ea6:	220d      	movs	r2, #13
 8007ea8:	701a      	strb	r2, [r3, #0]
            Mode = AT_MODE_SEND;
 8007eaa:	4b3b      	ldr	r3, [pc, #236]	@ (8007f98 <ESP_Upkeep+0x8e4>)
 8007eac:	2202      	movs	r2, #2
 8007eae:	701a      	strb	r2, [r3, #0]
    break;
 8007eb0:	e143      	b.n	800813a <ESP_Upkeep+0xa86>
        else if (Mode == AT_MODE_MAIL) {
 8007eb2:	4b39      	ldr	r3, [pc, #228]	@ (8007f98 <ESP_Upkeep+0x8e4>)
 8007eb4:	781b      	ldrb	r3, [r3, #0]
 8007eb6:	2b06      	cmp	r3, #6
 8007eb8:	d111      	bne.n	8007ede <ESP_Upkeep+0x82a>
            clearDMABuffer();
 8007eba:	f7ff f8ff 	bl	80070bc <clearDMABuffer>
            ESPTimeStamp = savedESPTimeStamp;
 8007ebe:	4b3e      	ldr	r3, [pc, #248]	@ (8007fb8 <ESP_Upkeep+0x904>)
 8007ec0:	681a      	ldr	r2, [r3, #0]
 8007ec2:	4b27      	ldr	r3, [pc, #156]	@ (8007f60 <ESP_Upkeep+0x8ac>)
 8007ec4:	601a      	str	r2, [r3, #0]
            sendpwremail = DONE;
 8007ec6:	4b41      	ldr	r3, [pc, #260]	@ (8007fcc <ESP_Upkeep+0x918>)
 8007ec8:	2202      	movs	r2, #2
 8007eca:	701a      	strb	r2, [r3, #0]
            EspState = ESP_STATE_DEINIT;
 8007ecc:	4b2d      	ldr	r3, [pc, #180]	@ (8007f84 <ESP_Upkeep+0x8d0>)
 8007ece:	220d      	movs	r2, #13
 8007ed0:	701a      	strb	r2, [r3, #0]
            Mode = AT_MODE_SEND;
 8007ed2:	4b31      	ldr	r3, [pc, #196]	@ (8007f98 <ESP_Upkeep+0x8e4>)
 8007ed4:	2202      	movs	r2, #2
 8007ed6:	701a      	strb	r2, [r3, #0]
            EnabledConnectedDevices();
 8007ed8:	f005 fefa 	bl	800dcd0 <EnabledConnectedDevices>
    break;
 8007edc:	e12d      	b.n	800813a <ESP_Upkeep+0xa86>
          EspState = ESP_STATE_RESET;
 8007ede:	4b29      	ldr	r3, [pc, #164]	@ (8007f84 <ESP_Upkeep+0x8d0>)
 8007ee0:	2209      	movs	r2, #9
 8007ee2:	701a      	strb	r2, [r3, #0]
    break;
 8007ee4:	e129      	b.n	800813a <ESP_Upkeep+0xa86>

    case ESP_STATE_DEINIT:
//      Debug("entry in ESP_STATE_DEINIT");
      EspTurnedOn = false;
 8007ee6:	4b3a      	ldr	r3, [pc, #232]	@ (8007fd0 <ESP_Upkeep+0x91c>)
 8007ee8:	2200      	movs	r2, #0
 8007eea:	701a      	strb	r2, [r3, #0]
      HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_RESET);
 8007eec:	4b39      	ldr	r3, [pc, #228]	@ (8007fd4 <ESP_Upkeep+0x920>)
 8007eee:	2200      	movs	r2, #0
 8007ef0:	2101      	movs	r1, #1
 8007ef2:	0018      	movs	r0, r3
 8007ef4:	f00d ff8d 	bl	8015e12 <HAL_GPIO_WritePin>
      HAL_Delay(1);
 8007ef8:	2001      	movs	r0, #1
 8007efa:	f00c fd21 	bl	8014940 <HAL_Delay>
      HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_RESET);
 8007efe:	2380      	movs	r3, #128	@ 0x80
 8007f00:	011b      	lsls	r3, r3, #4
 8007f02:	4835      	ldr	r0, [pc, #212]	@ (8007fd8 <ESP_Upkeep+0x924>)
 8007f04:	2200      	movs	r2, #0
 8007f06:	0019      	movs	r1, r3
 8007f08:	f00d ff83 	bl	8015e12 <HAL_GPIO_WritePin>
      HAL_Delay(1);
 8007f0c:	2001      	movs	r0, #1
 8007f0e:	f00c fd17 	bl	8014940 <HAL_Delay>
      HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, 0);
 8007f12:	4b30      	ldr	r3, [pc, #192]	@ (8007fd4 <ESP_Upkeep+0x920>)
 8007f14:	2200      	movs	r2, #0
 8007f16:	2102      	movs	r1, #2
 8007f18:	0018      	movs	r0, r3
 8007f1a:	f00d ff7a 	bl	8015e12 <HAL_GPIO_WritePin>
      EspState = ESP_STATE_RESET;
 8007f1e:	4b19      	ldr	r3, [pc, #100]	@ (8007f84 <ESP_Upkeep+0x8d0>)
 8007f20:	2209      	movs	r2, #9
 8007f22:	701a      	strb	r2, [r3, #0]
      HAL_Delay(1);
 8007f24:	2001      	movs	r0, #1
 8007f26:	f00c fd0b 	bl	8014940 <HAL_Delay>
      ResetESPIndicator();
 8007f2a:	f00a fd95 	bl	8012a58 <ResetESPIndicator>
      Debug("ESP powered off.");
 8007f2e:	4a2b      	ldr	r2, [pc, #172]	@ (8007fdc <ESP_Upkeep+0x928>)
 8007f30:	4b2b      	ldr	r3, [pc, #172]	@ (8007fe0 <ESP_Upkeep+0x92c>)
 8007f32:	0019      	movs	r1, r3
 8007f34:	2003      	movs	r0, #3
 8007f36:	f00b ff81 	bl	8013e3c <CreateLine>
      if (Check_USB_PowerOn() || userToggle) {
 8007f3a:	f001 fe6d 	bl	8009c18 <Check_USB_PowerOn>
 8007f3e:	1e03      	subs	r3, r0, #0
 8007f40:	d103      	bne.n	8007f4a <ESP_Upkeep+0x896>
 8007f42:	4b28      	ldr	r3, [pc, #160]	@ (8007fe4 <ESP_Upkeep+0x930>)
 8007f44:	781b      	ldrb	r3, [r3, #0]
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d001      	beq.n	8007f4e <ESP_Upkeep+0x89a>
        EnabledConnectedDevices();
 8007f4a:	f005 fec1 	bl	800dcd0 <EnabledConnectedDevices>
      }
      errorcntr = 0;
 8007f4e:	4b26      	ldr	r3, [pc, #152]	@ (8007fe8 <ESP_Upkeep+0x934>)
 8007f50:	2200      	movs	r2, #0
 8007f52:	701a      	strb	r2, [r3, #0]
      timeoutcntr = 0;
 8007f54:	4b03      	ldr	r3, [pc, #12]	@ (8007f64 <ESP_Upkeep+0x8b0>)
 8007f56:	2200      	movs	r2, #0
 8007f58:	701a      	strb	r2, [r3, #0]
      break;
 8007f5a:	e0f1      	b.n	8008140 <ESP_Upkeep+0xa8c>
 8007f5c:	20000034 	.word	0x20000034
 8007f60:	20000694 	.word	0x20000694
 8007f64:	20000690 	.word	0x20000690
 8007f68:	0802b1ac 	.word	0x0802b1ac
 8007f6c:	0802a958 	.word	0x0802a958
 8007f70:	0000c350 	.word	0x0000c350
 8007f74:	200005b3 	.word	0x200005b3
 8007f78:	200005b8 	.word	0x200005b8
 8007f7c:	200005b4 	.word	0x200005b4
 8007f80:	0802b1e8 	.word	0x0802b1e8
 8007f84:	20000030 	.word	0x20000030
 8007f88:	20000701 	.word	0x20000701
 8007f8c:	20000700 	.word	0x20000700
 8007f90:	2000068e 	.word	0x2000068e
 8007f94:	20000684 	.word	0x20000684
 8007f98:	20000702 	.word	0x20000702
 8007f9c:	0003a980 	.word	0x0003a980
 8007fa0:	0802b218 	.word	0x0802b218
 8007fa4:	0802a96c 	.word	0x0802a96c
 8007fa8:	20000002 	.word	0x20000002
 8007fac:	20000698 	.word	0x20000698
 8007fb0:	00012686 	.word	0x00012686
 8007fb4:	0802b230 	.word	0x0802b230
 8007fb8:	2000002c 	.word	0x2000002c
 8007fbc:	0802b274 	.word	0x0802b274
 8007fc0:	000061a7 	.word	0x000061a7
 8007fc4:	20001114 	.word	0x20001114
 8007fc8:	000061a8 	.word	0x000061a8
 8007fcc:	200010f9 	.word	0x200010f9
 8007fd0:	200005ac 	.word	0x200005ac
 8007fd4:	50001c00 	.word	0x50001c00
 8007fd8:	50000800 	.word	0x50000800
 8007fdc:	0802b294 	.word	0x0802b294
 8007fe0:	0802a9bc 	.word	0x0802a9bc
 8007fe4:	2000214e 	.word	0x2000214e
 8007fe8:	2000068f 	.word	0x2000068f

    case ESP_STATE_RESET:
      if(TimestampIsReached(ESPTimeStamp) || ReconfigSet){
 8007fec:	4b57      	ldr	r3, [pc, #348]	@ (800814c <ESP_Upkeep+0xa98>)
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	0018      	movs	r0, r3
 8007ff2:	f00b fecd 	bl	8013d90 <TimestampIsReached>
 8007ff6:	1e03      	subs	r3, r0, #0
 8007ff8:	d103      	bne.n	8008002 <ESP_Upkeep+0x94e>
 8007ffa:	4b55      	ldr	r3, [pc, #340]	@ (8008150 <ESP_Upkeep+0xa9c>)
 8007ffc:	781b      	ldrb	r3, [r3, #0]
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	d047      	beq.n	8008092 <ESP_Upkeep+0x9de>
        ESPTransmitDone = false;
 8008002:	4b54      	ldr	r3, [pc, #336]	@ (8008154 <ESP_Upkeep+0xaa0>)
 8008004:	2200      	movs	r2, #0
 8008006:	701a      	strb	r2, [r3, #0]
        if(Mode == AT_MODE_INIT){
 8008008:	4b53      	ldr	r3, [pc, #332]	@ (8008158 <ESP_Upkeep+0xaa4>)
 800800a:	781b      	ldrb	r3, [r3, #0]
 800800c:	2b00      	cmp	r3, #0
 800800e:	d105      	bne.n	800801c <ESP_Upkeep+0x968>
          InitIsDone = true;
 8008010:	4b52      	ldr	r3, [pc, #328]	@ (800815c <ESP_Upkeep+0xaa8>)
 8008012:	2201      	movs	r2, #1
 8008014:	701a      	strb	r2, [r3, #0]
          EspState = ESP_STATE_MODE_SELECT;
 8008016:	4b52      	ldr	r3, [pc, #328]	@ (8008160 <ESP_Upkeep+0xaac>)
 8008018:	220b      	movs	r2, #11
 800801a:	701a      	strb	r2, [r3, #0]
        }
        if(Mode == AT_MODE_CONFIG){
 800801c:	4b4e      	ldr	r3, [pc, #312]	@ (8008158 <ESP_Upkeep+0xaa4>)
 800801e:	781b      	ldrb	r3, [r3, #0]
 8008020:	2b01      	cmp	r3, #1
 8008022:	d105      	bne.n	8008030 <ESP_Upkeep+0x97c>
          ConnectionMade = true;
 8008024:	4b4f      	ldr	r3, [pc, #316]	@ (8008164 <ESP_Upkeep+0xab0>)
 8008026:	2201      	movs	r2, #1
 8008028:	701a      	strb	r2, [r3, #0]
          EspState = ESP_STATE_MODE_SELECT;
 800802a:	4b4d      	ldr	r3, [pc, #308]	@ (8008160 <ESP_Upkeep+0xaac>)
 800802c:	220b      	movs	r2, #11
 800802e:	701a      	strb	r2, [r3, #0]
        }
        if(Mode == AT_MODE_SEND){
 8008030:	4b49      	ldr	r3, [pc, #292]	@ (8008158 <ESP_Upkeep+0xaa4>)
 8008032:	781b      	ldrb	r3, [r3, #0]
 8008034:	2b02      	cmp	r3, #2
 8008036:	d102      	bne.n	800803e <ESP_Upkeep+0x98a>
          EspState = ESP_STATE_INIT;
 8008038:	4b49      	ldr	r3, [pc, #292]	@ (8008160 <ESP_Upkeep+0xaac>)
 800803a:	2202      	movs	r2, #2
 800803c:	701a      	strb	r2, [r3, #0]
        }
#ifdef USE_MAIL
        if(Mode == AT_MODE_MAIL){
 800803e:	4b46      	ldr	r3, [pc, #280]	@ (8008158 <ESP_Upkeep+0xaa4>)
 8008040:	781b      	ldrb	r3, [r3, #0]
 8008042:	2b06      	cmp	r3, #6
 8008044:	d102      	bne.n	800804c <ESP_Upkeep+0x998>
          EspState = ESP_STATE_CONFIG;
 8008046:	4b46      	ldr	r3, [pc, #280]	@ (8008160 <ESP_Upkeep+0xaac>)
 8008048:	220e      	movs	r2, #14
 800804a:	701a      	strb	r2, [r3, #0]
        }
#endif
        if(Mode == AT_MODE_RECONFIG){
 800804c:	4b42      	ldr	r3, [pc, #264]	@ (8008158 <ESP_Upkeep+0xaa4>)
 800804e:	781b      	ldrb	r3, [r3, #0]
 8008050:	2b03      	cmp	r3, #3
 8008052:	d108      	bne.n	8008066 <ESP_Upkeep+0x9b2>
          EspState = ESP_STATE_CONFIG;
 8008054:	4b42      	ldr	r3, [pc, #264]	@ (8008160 <ESP_Upkeep+0xaac>)
 8008056:	220e      	movs	r2, #14
 8008058:	701a      	strb	r2, [r3, #0]
          Info("Do nothing until reset");
 800805a:	4a43      	ldr	r2, [pc, #268]	@ (8008168 <ESP_Upkeep+0xab4>)
 800805c:	4b43      	ldr	r3, [pc, #268]	@ (800816c <ESP_Upkeep+0xab8>)
 800805e:	0019      	movs	r1, r3
 8008060:	2002      	movs	r0, #2
 8008062:	f00b feeb 	bl	8013e3c <CreateLine>
        }
        if(Mode == AT_MODE_TEST){
 8008066:	4b3c      	ldr	r3, [pc, #240]	@ (8008158 <ESP_Upkeep+0xaa4>)
 8008068:	781b      	ldrb	r3, [r3, #0]
 800806a:	2b04      	cmp	r3, #4
 800806c:	d105      	bne.n	800807a <ESP_Upkeep+0x9c6>
          EspState = ESP_STATE_MODE_SELECT;
 800806e:	4b3c      	ldr	r3, [pc, #240]	@ (8008160 <ESP_Upkeep+0xaac>)
 8008070:	220b      	movs	r2, #11
 8008072:	701a      	strb	r2, [r3, #0]
          APtested = true;  // deze lijkt mij dubieus wordt in CWJAP gezet.
 8008074:	4b3e      	ldr	r3, [pc, #248]	@ (8008170 <ESP_Upkeep+0xabc>)
 8008076:	2201      	movs	r2, #1
 8008078:	701a      	strb	r2, [r3, #0]
        }
        if ((ReconfigSet) && (Mode != AT_MODE_RECONFIG)) {
 800807a:	4b35      	ldr	r3, [pc, #212]	@ (8008150 <ESP_Upkeep+0xa9c>)
 800807c:	781b      	ldrb	r3, [r3, #0]
 800807e:	2b00      	cmp	r3, #0
 8008080:	d020      	beq.n	80080c4 <ESP_Upkeep+0xa10>
 8008082:	4b35      	ldr	r3, [pc, #212]	@ (8008158 <ESP_Upkeep+0xaa4>)
 8008084:	781b      	ldrb	r3, [r3, #0]
 8008086:	2b03      	cmp	r3, #3
 8008088:	d01c      	beq.n	80080c4 <ESP_Upkeep+0xa10>
          EspState = ESP_STATE_INIT;
 800808a:	4b35      	ldr	r3, [pc, #212]	@ (8008160 <ESP_Upkeep+0xaac>)
 800808c:	2202      	movs	r2, #2
 800808e:	701a      	strb	r2, [r3, #0]
        if ((ReconfigSet) && (Mode != AT_MODE_RECONFIG)) {
 8008090:	e018      	b.n	80080c4 <ESP_Upkeep+0xa10>
        }
      }
      else if (calculateNextNTPTime() > ESPNTPTimeStamp) {
 8008092:	f001 ff6b 	bl	8009f6c <calculateNextNTPTime>
 8008096:	0002      	movs	r2, r0
 8008098:	4b36      	ldr	r3, [pc, #216]	@ (8008174 <ESP_Upkeep+0xac0>)
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	429a      	cmp	r2, r3
 800809e:	d94e      	bls.n	800813e <ESP_Upkeep+0xa8a>
        if(Mode == AT_MODE_SEND ) {
 80080a0:	4b2d      	ldr	r3, [pc, #180]	@ (8008158 <ESP_Upkeep+0xaa4>)
 80080a2:	781b      	ldrb	r3, [r3, #0]
 80080a4:	2b02      	cmp	r3, #2
 80080a6:	d14a      	bne.n	800813e <ESP_Upkeep+0xa8a>
           Mode = AT_MODE_GETTIME;
 80080a8:	4b2b      	ldr	r3, [pc, #172]	@ (8008158 <ESP_Upkeep+0xaa4>)
 80080aa:	2205      	movs	r2, #5
 80080ac:	701a      	strb	r2, [r3, #0]
           EspState = ESP_STATE_INIT;
 80080ae:	4b2c      	ldr	r3, [pc, #176]	@ (8008160 <ESP_Upkeep+0xaac>)
 80080b0:	2202      	movs	r2, #2
 80080b2:	701a      	strb	r2, [r3, #0]
           savedESPTimeStamp = ESPTimeStamp;
 80080b4:	4b25      	ldr	r3, [pc, #148]	@ (800814c <ESP_Upkeep+0xa98>)
 80080b6:	681a      	ldr	r2, [r3, #0]
 80080b8:	4b2f      	ldr	r3, [pc, #188]	@ (8008178 <ESP_Upkeep+0xac4>)
 80080ba:	601a      	str	r2, [r3, #0]
           setTime = true;
 80080bc:	4b2f      	ldr	r3, [pc, #188]	@ (800817c <ESP_Upkeep+0xac8>)
 80080be:	2201      	movs	r2, #1
 80080c0:	701a      	strb	r2, [r3, #0]
        }
      }
      break;
 80080c2:	e03c      	b.n	800813e <ESP_Upkeep+0xa8a>
        if ((ReconfigSet) && (Mode != AT_MODE_RECONFIG)) {
 80080c4:	46c0      	nop			@ (mov r8, r8)
      break;
 80080c6:	e03a      	b.n	800813e <ESP_Upkeep+0xa8a>

    case ESP_STATE_CONFIG:
      if (!msgdone) {
 80080c8:	4b2d      	ldr	r3, [pc, #180]	@ (8008180 <ESP_Upkeep+0xacc>)
 80080ca:	781b      	ldrb	r3, [r3, #0]
 80080cc:	2201      	movs	r2, #1
 80080ce:	4053      	eors	r3, r2
 80080d0:	b2db      	uxtb	r3, r3
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	d008      	beq.n	80080e8 <ESP_Upkeep+0xa34>
        Info("Do nothing until reset");
 80080d6:	4a24      	ldr	r2, [pc, #144]	@ (8008168 <ESP_Upkeep+0xab4>)
 80080d8:	4b24      	ldr	r3, [pc, #144]	@ (800816c <ESP_Upkeep+0xab8>)
 80080da:	0019      	movs	r1, r3
 80080dc:	2002      	movs	r0, #2
 80080de:	f00b fead 	bl	8013e3c <CreateLine>
        msgdone = true;
 80080e2:	4b27      	ldr	r3, [pc, #156]	@ (8008180 <ESP_Upkeep+0xacc>)
 80080e4:	2201      	movs	r2, #1
 80080e6:	701a      	strb	r2, [r3, #0]
      }
      Process_PC_Config(GetUsbRxPointer());
 80080e8:	f01a fff4 	bl	80230d4 <GetUsbRxPointer>
 80080ec:	0003      	movs	r3, r0
 80080ee:	0018      	movs	r0, r3
 80080f0:	f000 f98c 	bl	800840c <Process_PC_Config>
      break;
 80080f4:	e024      	b.n	8008140 <ESP_Upkeep+0xa8c>

    case ESP_STATE_ERROR:
      // Handle error state
      Error("ESP Error occurred");
 80080f6:	4a23      	ldr	r2, [pc, #140]	@ (8008184 <ESP_Upkeep+0xad0>)
 80080f8:	4b23      	ldr	r3, [pc, #140]	@ (8008188 <ESP_Upkeep+0xad4>)
 80080fa:	0019      	movs	r1, r3
 80080fc:	2001      	movs	r0, #1
 80080fe:	f00b fe9d 	bl	8013e3c <CreateLine>
      EspState = ESP_STATE_INIT;
 8008102:	4b17      	ldr	r3, [pc, #92]	@ (8008160 <ESP_Upkeep+0xaac>)
 8008104:	2202      	movs	r2, #2
 8008106:	701a      	strb	r2, [r3, #0]
      break;
 8008108:	e01a      	b.n	8008140 <ESP_Upkeep+0xa8c>

    default:
      // Handle unexpected state
      Error("Something unknown went wrong with the ESP_STATE");
 800810a:	4a20      	ldr	r2, [pc, #128]	@ (800818c <ESP_Upkeep+0xad8>)
 800810c:	4b1e      	ldr	r3, [pc, #120]	@ (8008188 <ESP_Upkeep+0xad4>)
 800810e:	0019      	movs	r1, r3
 8008110:	2001      	movs	r0, #1
 8008112:	f00b fe93 	bl	8013e3c <CreateLine>
      EspState = ESP_STATE_ERROR;
 8008116:	4b12      	ldr	r3, [pc, #72]	@ (8008160 <ESP_Upkeep+0xaac>)
 8008118:	2207      	movs	r2, #7
 800811a:	701a      	strb	r2, [r3, #0]
      break;
 800811c:	e010      	b.n	8008140 <ESP_Upkeep+0xa8c>
      break;
 800811e:	46c0      	nop			@ (mov r8, r8)
 8008120:	e00e      	b.n	8008140 <ESP_Upkeep+0xa8c>
        break;
 8008122:	46c0      	nop			@ (mov r8, r8)
 8008124:	e00c      	b.n	8008140 <ESP_Upkeep+0xa8c>
      break;
 8008126:	46c0      	nop			@ (mov r8, r8)
 8008128:	e00a      	b.n	8008140 <ESP_Upkeep+0xa8c>
        break;
 800812a:	46c0      	nop			@ (mov r8, r8)
 800812c:	e008      	b.n	8008140 <ESP_Upkeep+0xa8c>
    break;
 800812e:	46c0      	nop			@ (mov r8, r8)
 8008130:	e006      	b.n	8008140 <ESP_Upkeep+0xa8c>
    break;
 8008132:	46c0      	nop			@ (mov r8, r8)
 8008134:	e004      	b.n	8008140 <ESP_Upkeep+0xa8c>
      break;
 8008136:	46c0      	nop			@ (mov r8, r8)
 8008138:	e002      	b.n	8008140 <ESP_Upkeep+0xa8c>
    break;
 800813a:	46c0      	nop			@ (mov r8, r8)
 800813c:	e000      	b.n	8008140 <ESP_Upkeep+0xa8c>
      break;
 800813e:	46c0      	nop			@ (mov r8, r8)
  }
  return EspState;
 8008140:	4b07      	ldr	r3, [pc, #28]	@ (8008160 <ESP_Upkeep+0xaac>)
 8008142:	781b      	ldrb	r3, [r3, #0]
}
 8008144:	0018      	movs	r0, r3
 8008146:	46bd      	mov	sp, r7
 8008148:	b002      	add	sp, #8
 800814a:	bdb0      	pop	{r4, r5, r7, pc}
 800814c:	20000694 	.word	0x20000694
 8008150:	200005af 	.word	0x200005af
 8008154:	200005b3 	.word	0x200005b3
 8008158:	20000702 	.word	0x20000702
 800815c:	200005ad 	.word	0x200005ad
 8008160:	20000030 	.word	0x20000030
 8008164:	200005b0 	.word	0x200005b0
 8008168:	0802b2a8 	.word	0x0802b2a8
 800816c:	0802a96c 	.word	0x0802a96c
 8008170:	200005b1 	.word	0x200005b1
 8008174:	20000698 	.word	0x20000698
 8008178:	2000002c 	.word	0x2000002c
 800817c:	20000002 	.word	0x20000002
 8008180:	200005b2 	.word	0x200005b2
 8008184:	0802b2c0 	.word	0x0802b2c0
 8008188:	0802a958 	.word	0x0802a958
 800818c:	0802b2d4 	.word	0x0802b2d4

08008190 <I2CSensors_Init>:
static bool ReadI2C(uint8_t address, uint8_t* buffer, uint8_t nrBytes);
static bool WriteI2C(uint8_t address, uint8_t* buffer, uint8_t nrBytes);
static bool ReadI2CMem(uint8_t address, uint16_t MemAddress, uint16_t MemSize, uint8_t* buffer, uint16_t nrBytes);
static bool WriteI2CMem(uint8_t address, uint16_t MemAddress, uint16_t MemSize, uint8_t* buffer, uint16_t nrBytes);

void I2CSensors_Init(I2C_HandleTypeDef* sensorI2C) {
 8008190:	b580      	push	{r7, lr}
 8008192:	b082      	sub	sp, #8
 8008194:	af00      	add	r7, sp, #0
 8008196:	6078      	str	r0, [r7, #4]
    SensorI2C = sensorI2C;
 8008198:	4b12      	ldr	r3, [pc, #72]	@ (80081e4 <I2CSensors_Init+0x54>)
 800819a:	687a      	ldr	r2, [r7, #4]
 800819c:	601a      	str	r2, [r3, #0]
    HIDS_Init(ReadI2C, WriteI2C);
 800819e:	4a12      	ldr	r2, [pc, #72]	@ (80081e8 <I2CSensors_Init+0x58>)
 80081a0:	4b12      	ldr	r3, [pc, #72]	@ (80081ec <I2CSensors_Init+0x5c>)
 80081a2:	0011      	movs	r1, r2
 80081a4:	0018      	movs	r0, r3
 80081a6:	f00c f87f 	bl	80142a8 <HIDS_Init>
    SGP_Init(ReadI2C, WriteI2C);
 80081aa:	4a0f      	ldr	r2, [pc, #60]	@ (80081e8 <I2CSensors_Init+0x58>)
 80081ac:	4b0f      	ldr	r3, [pc, #60]	@ (80081ec <I2CSensors_Init+0x5c>)
 80081ae:	0011      	movs	r1, r2
 80081b0:	0018      	movs	r0, r3
 80081b2:	f008 fdfb 	bl	8010dac <SGP_Init>
    AHT_Init(ReadI2C, WriteI2C, ReadI2CDirect);
 80081b6:	4a0e      	ldr	r2, [pc, #56]	@ (80081f0 <I2CSensors_Init+0x60>)
 80081b8:	490b      	ldr	r1, [pc, #44]	@ (80081e8 <I2CSensors_Init+0x58>)
 80081ba:	4b0c      	ldr	r3, [pc, #48]	@ (80081ec <I2CSensors_Init+0x5c>)
 80081bc:	0018      	movs	r0, r3
 80081be:	f002 febd 	bl	800af3c <AHT_Init>
    BMP_Init(ReadI2CMem, WriteI2CMem);
 80081c2:	4a0c      	ldr	r2, [pc, #48]	@ (80081f4 <I2CSensors_Init+0x64>)
 80081c4:	4b0c      	ldr	r3, [pc, #48]	@ (80081f8 <I2CSensors_Init+0x68>)
 80081c6:	0011      	movs	r1, r2
 80081c8:	0018      	movs	r0, r3
 80081ca:	f003 fa93 	bl	800b6f4 <BMP_Init>
//    BMP_Init(ReadI2CDirect, WriteI2CDirect);
    ENS_Init(ReadI2CMem, WriteI2CMem);
 80081ce:	4a09      	ldr	r2, [pc, #36]	@ (80081f4 <I2CSensors_Init+0x64>)
 80081d0:	4b09      	ldr	r3, [pc, #36]	@ (80081f8 <I2CSensors_Init+0x68>)
 80081d2:	0011      	movs	r1, r2
 80081d4:	0018      	movs	r0, r3
 80081d6:	f7fb fccd 	bl	8003b74 <ENS_Init>
}
 80081da:	46c0      	nop			@ (mov r8, r8)
 80081dc:	46bd      	mov	sp, r7
 80081de:	b002      	add	sp, #8
 80081e0:	bd80      	pop	{r7, pc}
 80081e2:	46c0      	nop			@ (mov r8, r8)
 80081e4:	2000093c 	.word	0x2000093c
 80081e8:	080082b5 	.word	0x080082b5
 80081ec:	0800825d 	.word	0x0800825d
 80081f0:	080081fd 	.word	0x080081fd
 80081f4:	0800838d 	.word	0x0800838d
 80081f8:	08008309 	.word	0x08008309

080081fc <ReadI2CDirect>:

static bool ReadI2CDirect(uint8_t address, uint8_t* buffer, uint8_t nrBytes) {
 80081fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80081fe:	b087      	sub	sp, #28
 8008200:	af02      	add	r7, sp, #8
 8008202:	6039      	str	r1, [r7, #0]
 8008204:	0011      	movs	r1, r2
 8008206:	1dfb      	adds	r3, r7, #7
 8008208:	1c02      	adds	r2, r0, #0
 800820a:	701a      	strb	r2, [r3, #0]
 800820c:	1dbb      	adds	r3, r7, #6
 800820e:	1c0a      	adds	r2, r1, #0
 8008210:	701a      	strb	r2, [r3, #0]
//  Debug("ReadI2CDirect address 0x%02X", address);
    HAL_StatusTypeDef status = HAL_I2C_Master_Receive(SensorI2C, ((address << 1)+1), buffer, nrBytes, 1000);
 8008212:	4b11      	ldr	r3, [pc, #68]	@ (8008258 <ReadI2CDirect+0x5c>)
 8008214:	6818      	ldr	r0, [r3, #0]
 8008216:	1dfb      	adds	r3, r7, #7
 8008218:	781b      	ldrb	r3, [r3, #0]
 800821a:	b29b      	uxth	r3, r3
 800821c:	18db      	adds	r3, r3, r3
 800821e:	b29b      	uxth	r3, r3
 8008220:	3301      	adds	r3, #1
 8008222:	b299      	uxth	r1, r3
 8008224:	1dbb      	adds	r3, r7, #6
 8008226:	781b      	ldrb	r3, [r3, #0]
 8008228:	b29d      	uxth	r5, r3
 800822a:	260f      	movs	r6, #15
 800822c:	19bc      	adds	r4, r7, r6
 800822e:	683a      	ldr	r2, [r7, #0]
 8008230:	23fa      	movs	r3, #250	@ 0xfa
 8008232:	009b      	lsls	r3, r3, #2
 8008234:	9300      	str	r3, [sp, #0]
 8008236:	002b      	movs	r3, r5
 8008238:	f00d ffc2 	bl	80161c0 <HAL_I2C_Master_Receive>
 800823c:	0003      	movs	r3, r0
 800823e:	7023      	strb	r3, [r4, #0]
    if (status != HAL_OK) {
 8008240:	19bb      	adds	r3, r7, r6
 8008242:	781b      	ldrb	r3, [r3, #0]
 8008244:	2b00      	cmp	r3, #0
 8008246:	d001      	beq.n	800824c <ReadI2CDirect+0x50>
        return false;
 8008248:	2300      	movs	r3, #0
 800824a:	e000      	b.n	800824e <ReadI2CDirect+0x52>
    }
    return true;
 800824c:	2301      	movs	r3, #1
}
 800824e:	0018      	movs	r0, r3
 8008250:	46bd      	mov	sp, r7
 8008252:	b005      	add	sp, #20
 8008254:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008256:	46c0      	nop			@ (mov r8, r8)
 8008258:	2000093c 	.word	0x2000093c

0800825c <ReadI2C>:

static bool ReadI2C(uint8_t address, uint8_t* buffer, uint8_t nrBytes) {
 800825c:	b5b0      	push	{r4, r5, r7, lr}
 800825e:	b084      	sub	sp, #16
 8008260:	af00      	add	r7, sp, #0
 8008262:	6039      	str	r1, [r7, #0]
 8008264:	0011      	movs	r1, r2
 8008266:	1dfb      	adds	r3, r7, #7
 8008268:	1c02      	adds	r2, r0, #0
 800826a:	701a      	strb	r2, [r3, #0]
 800826c:	1dbb      	adds	r3, r7, #6
 800826e:	1c0a      	adds	r2, r1, #0
 8008270:	701a      	strb	r2, [r3, #0]
    HAL_StatusTypeDef status = HAL_I2C_Master_Receive_DMA(SensorI2C, ((address << 1)+1), buffer, nrBytes);
 8008272:	4b0f      	ldr	r3, [pc, #60]	@ (80082b0 <ReadI2C+0x54>)
 8008274:	6818      	ldr	r0, [r3, #0]
 8008276:	1dfb      	adds	r3, r7, #7
 8008278:	781b      	ldrb	r3, [r3, #0]
 800827a:	b29b      	uxth	r3, r3
 800827c:	18db      	adds	r3, r3, r3
 800827e:	b29b      	uxth	r3, r3
 8008280:	3301      	adds	r3, #1
 8008282:	b299      	uxth	r1, r3
 8008284:	1dbb      	adds	r3, r7, #6
 8008286:	781b      	ldrb	r3, [r3, #0]
 8008288:	b29b      	uxth	r3, r3
 800828a:	250f      	movs	r5, #15
 800828c:	197c      	adds	r4, r7, r5
 800828e:	683a      	ldr	r2, [r7, #0]
 8008290:	f00e f9a4 	bl	80165dc <HAL_I2C_Master_Receive_DMA>
 8008294:	0003      	movs	r3, r0
 8008296:	7023      	strb	r3, [r4, #0]
    if (status != HAL_OK) {
 8008298:	197b      	adds	r3, r7, r5
 800829a:	781b      	ldrb	r3, [r3, #0]
 800829c:	2b00      	cmp	r3, #0
 800829e:	d001      	beq.n	80082a4 <ReadI2C+0x48>
        return false;
 80082a0:	2300      	movs	r3, #0
 80082a2:	e000      	b.n	80082a6 <ReadI2C+0x4a>
    }
    return true;
 80082a4:	2301      	movs	r3, #1
}
 80082a6:	0018      	movs	r0, r3
 80082a8:	46bd      	mov	sp, r7
 80082aa:	b004      	add	sp, #16
 80082ac:	bdb0      	pop	{r4, r5, r7, pc}
 80082ae:	46c0      	nop			@ (mov r8, r8)
 80082b0:	2000093c 	.word	0x2000093c

080082b4 <WriteI2C>:

static bool WriteI2C(uint8_t address, uint8_t* buffer, uint8_t nrBytes) {
 80082b4:	b5b0      	push	{r4, r5, r7, lr}
 80082b6:	b084      	sub	sp, #16
 80082b8:	af00      	add	r7, sp, #0
 80082ba:	6039      	str	r1, [r7, #0]
 80082bc:	0011      	movs	r1, r2
 80082be:	1dfb      	adds	r3, r7, #7
 80082c0:	1c02      	adds	r2, r0, #0
 80082c2:	701a      	strb	r2, [r3, #0]
 80082c4:	1dbb      	adds	r3, r7, #6
 80082c6:	1c0a      	adds	r2, r1, #0
 80082c8:	701a      	strb	r2, [r3, #0]
    HAL_StatusTypeDef status = HAL_I2C_Master_Transmit_DMA(SensorI2C, (address << 1), buffer, nrBytes);
 80082ca:	4b0e      	ldr	r3, [pc, #56]	@ (8008304 <WriteI2C+0x50>)
 80082cc:	6818      	ldr	r0, [r3, #0]
 80082ce:	1dfb      	adds	r3, r7, #7
 80082d0:	781b      	ldrb	r3, [r3, #0]
 80082d2:	b29b      	uxth	r3, r3
 80082d4:	18db      	adds	r3, r3, r3
 80082d6:	b299      	uxth	r1, r3
 80082d8:	1dbb      	adds	r3, r7, #6
 80082da:	781b      	ldrb	r3, [r3, #0]
 80082dc:	b29b      	uxth	r3, r3
 80082de:	250f      	movs	r5, #15
 80082e0:	197c      	adds	r4, r7, r5
 80082e2:	683a      	ldr	r2, [r7, #0]
 80082e4:	f00e f874 	bl	80163d0 <HAL_I2C_Master_Transmit_DMA>
 80082e8:	0003      	movs	r3, r0
 80082ea:	7023      	strb	r3, [r4, #0]
    if (status != HAL_OK) {
 80082ec:	197b      	adds	r3, r7, r5
 80082ee:	781b      	ldrb	r3, [r3, #0]
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	d001      	beq.n	80082f8 <WriteI2C+0x44>
        return false;
 80082f4:	2300      	movs	r3, #0
 80082f6:	e000      	b.n	80082fa <WriteI2C+0x46>
    }
    return true;
 80082f8:	2301      	movs	r3, #1
}
 80082fa:	0018      	movs	r0, r3
 80082fc:	46bd      	mov	sp, r7
 80082fe:	b004      	add	sp, #16
 8008300:	bdb0      	pop	{r4, r5, r7, pc}
 8008302:	46c0      	nop			@ (mov r8, r8)
 8008304:	2000093c 	.word	0x2000093c

08008308 <ReadI2CMem>:

static bool ReadI2CMem(uint8_t address, uint16_t MemAddress, uint16_t MemSize, uint8_t* buffer, uint16_t nrBytes) {
 8008308:	b5f0      	push	{r4, r5, r6, r7, lr}
 800830a:	b08b      	sub	sp, #44	@ 0x2c
 800830c:	af04      	add	r7, sp, #16
 800830e:	0004      	movs	r4, r0
 8008310:	0008      	movs	r0, r1
 8008312:	0011      	movs	r1, r2
 8008314:	607b      	str	r3, [r7, #4]
 8008316:	250f      	movs	r5, #15
 8008318:	197b      	adds	r3, r7, r5
 800831a:	1c22      	adds	r2, r4, #0
 800831c:	701a      	strb	r2, [r3, #0]
 800831e:	260c      	movs	r6, #12
 8008320:	19bb      	adds	r3, r7, r6
 8008322:	1c02      	adds	r2, r0, #0
 8008324:	801a      	strh	r2, [r3, #0]
 8008326:	230a      	movs	r3, #10
 8008328:	18fb      	adds	r3, r7, r3
 800832a:	1c0a      	adds	r2, r1, #0
 800832c:	801a      	strh	r2, [r3, #0]
//  HAL_StatusTypeDef status = HAL_I2C_Mem_Read_DMA(SensorI2C, (address << 1), MemAddress, MemSize, buffer, nrBytes);
  HAL_StatusTypeDef status = HAL_I2C_Mem_Read(SensorI2C, ((address << 1)+1), MemAddress, MemSize, buffer, nrBytes,1000);
 800832e:	4b16      	ldr	r3, [pc, #88]	@ (8008388 <ReadI2CMem+0x80>)
 8008330:	6818      	ldr	r0, [r3, #0]
 8008332:	197b      	adds	r3, r7, r5
 8008334:	781b      	ldrb	r3, [r3, #0]
 8008336:	b29b      	uxth	r3, r3
 8008338:	18db      	adds	r3, r3, r3
 800833a:	b29b      	uxth	r3, r3
 800833c:	3301      	adds	r3, #1
 800833e:	b299      	uxth	r1, r3
 8008340:	2217      	movs	r2, #23
 8008342:	18bc      	adds	r4, r7, r2
 8008344:	230a      	movs	r3, #10
 8008346:	18fb      	adds	r3, r7, r3
 8008348:	881d      	ldrh	r5, [r3, #0]
 800834a:	19bb      	adds	r3, r7, r6
 800834c:	881a      	ldrh	r2, [r3, #0]
 800834e:	23fa      	movs	r3, #250	@ 0xfa
 8008350:	009b      	lsls	r3, r3, #2
 8008352:	9302      	str	r3, [sp, #8]
 8008354:	2328      	movs	r3, #40	@ 0x28
 8008356:	2608      	movs	r6, #8
 8008358:	199b      	adds	r3, r3, r6
 800835a:	19db      	adds	r3, r3, r7
 800835c:	881b      	ldrh	r3, [r3, #0]
 800835e:	9301      	str	r3, [sp, #4]
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	9300      	str	r3, [sp, #0]
 8008364:	002b      	movs	r3, r5
 8008366:	f00e fb6d 	bl	8016a44 <HAL_I2C_Mem_Read>
 800836a:	0003      	movs	r3, r0
 800836c:	7023      	strb	r3, [r4, #0]
   if (status != HAL_OK) {
 800836e:	2217      	movs	r2, #23
 8008370:	18bb      	adds	r3, r7, r2
 8008372:	781b      	ldrb	r3, [r3, #0]
 8008374:	2b00      	cmp	r3, #0
 8008376:	d001      	beq.n	800837c <ReadI2CMem+0x74>
     return false;
 8008378:	2300      	movs	r3, #0
 800837a:	e000      	b.n	800837e <ReadI2CMem+0x76>
   }
   return true;
 800837c:	2301      	movs	r3, #1
}
 800837e:	0018      	movs	r0, r3
 8008380:	46bd      	mov	sp, r7
 8008382:	b007      	add	sp, #28
 8008384:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008386:	46c0      	nop			@ (mov r8, r8)
 8008388:	2000093c 	.word	0x2000093c

0800838c <WriteI2CMem>:

static bool WriteI2CMem(uint8_t address, uint16_t MemAddress, uint16_t MemSize, uint8_t* buffer, uint16_t nrBytes) {
 800838c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800838e:	b08b      	sub	sp, #44	@ 0x2c
 8008390:	af04      	add	r7, sp, #16
 8008392:	0004      	movs	r4, r0
 8008394:	0008      	movs	r0, r1
 8008396:	0011      	movs	r1, r2
 8008398:	607b      	str	r3, [r7, #4]
 800839a:	250f      	movs	r5, #15
 800839c:	197b      	adds	r3, r7, r5
 800839e:	1c22      	adds	r2, r4, #0
 80083a0:	701a      	strb	r2, [r3, #0]
 80083a2:	260c      	movs	r6, #12
 80083a4:	19bb      	adds	r3, r7, r6
 80083a6:	1c02      	adds	r2, r0, #0
 80083a8:	801a      	strh	r2, [r3, #0]
 80083aa:	230a      	movs	r3, #10
 80083ac:	18fb      	adds	r3, r7, r3
 80083ae:	1c0a      	adds	r2, r1, #0
 80083b0:	801a      	strh	r2, [r3, #0]
   HAL_StatusTypeDef status = HAL_I2C_Mem_Write(SensorI2C, (address << 1), MemAddress, MemSize, buffer, nrBytes,1000);  // de dma verwijderd 16-8-2025
 80083b2:	4b15      	ldr	r3, [pc, #84]	@ (8008408 <WriteI2CMem+0x7c>)
 80083b4:	6818      	ldr	r0, [r3, #0]
 80083b6:	197b      	adds	r3, r7, r5
 80083b8:	781b      	ldrb	r3, [r3, #0]
 80083ba:	b29b      	uxth	r3, r3
 80083bc:	18db      	adds	r3, r3, r3
 80083be:	b299      	uxth	r1, r3
 80083c0:	2217      	movs	r2, #23
 80083c2:	18bc      	adds	r4, r7, r2
 80083c4:	230a      	movs	r3, #10
 80083c6:	18fb      	adds	r3, r7, r3
 80083c8:	881d      	ldrh	r5, [r3, #0]
 80083ca:	19bb      	adds	r3, r7, r6
 80083cc:	881a      	ldrh	r2, [r3, #0]
 80083ce:	23fa      	movs	r3, #250	@ 0xfa
 80083d0:	009b      	lsls	r3, r3, #2
 80083d2:	9302      	str	r3, [sp, #8]
 80083d4:	2328      	movs	r3, #40	@ 0x28
 80083d6:	2608      	movs	r6, #8
 80083d8:	199b      	adds	r3, r3, r6
 80083da:	19db      	adds	r3, r3, r7
 80083dc:	881b      	ldrh	r3, [r3, #0]
 80083de:	9301      	str	r3, [sp, #4]
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	9300      	str	r3, [sp, #0]
 80083e4:	002b      	movs	r3, r5
 80083e6:	f00e f9ff 	bl	80167e8 <HAL_I2C_Mem_Write>
 80083ea:	0003      	movs	r3, r0
 80083ec:	7023      	strb	r3, [r4, #0]
   if (status != HAL_OK) {
 80083ee:	2217      	movs	r2, #23
 80083f0:	18bb      	adds	r3, r7, r2
 80083f2:	781b      	ldrb	r3, [r3, #0]
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	d001      	beq.n	80083fc <WriteI2CMem+0x70>
     return false;
 80083f8:	2300      	movs	r3, #0
 80083fa:	e000      	b.n	80083fe <WriteI2CMem+0x72>
   }
   return true;
 80083fc:	2301      	movs	r3, #1
}
 80083fe:	0018      	movs	r0, r3
 8008400:	46bd      	mov	sp, r7
 8008402:	b007      	add	sp, #28
 8008404:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008406:	46c0      	nop			@ (mov r8, r8)
 8008408:	2000093c 	.word	0x2000093c

0800840c <Process_PC_Config>:
// Command value:   0 = ...
//                  1 = ...
//**************************************************************************************************

void Process_PC_Config(uint8_t* data) //, uint16_t length)
{
 800840c:	b590      	push	{r4, r7, lr}
 800840e:	b0c3      	sub	sp, #268	@ 0x10c
 8008410:	af3e      	add	r7, sp, #248	@ 0xf8
 8008412:	6078      	str	r0, [r7, #4]
    uint32_t length = GetUsbRxDataSize();
 8008414:	f01a fe7e 	bl	8023114 <GetUsbRxDataSize>
 8008418:	0003      	movs	r3, r0
 800841a:	60fb      	str	r3, [r7, #12]
    if (length > 5)
 800841c:	68fb      	ldr	r3, [r7, #12]
 800841e:	2b05      	cmp	r3, #5
 8008420:	d972      	bls.n	8008508 <Process_PC_Config+0xfc>
    {
        uint8_t* message = (unsigned char*)strstr((const char*)data, PREAMBLE);
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	2123      	movs	r1, #35	@ 0x23
 8008426:	0018      	movs	r0, r3
 8008428:	f01e f882 	bl	8026530 <strchr>
 800842c:	0003      	movs	r3, r0
 800842e:	60bb      	str	r3, [r7, #8]
        if(message != NULL)// && strlen((const char*)message) > 5)
 8008430:	68bb      	ldr	r3, [r7, #8]
 8008432:	2b00      	cmp	r3, #0
 8008434:	d066      	beq.n	8008504 <Process_PC_Config+0xf8>
        {
            received.Command = message[1];
 8008436:	68bb      	ldr	r3, [r7, #8]
 8008438:	785a      	ldrb	r2, [r3, #1]
 800843a:	4b35      	ldr	r3, [pc, #212]	@ (8008510 <Process_PC_Config+0x104>)
 800843c:	701a      	strb	r2, [r3, #0]
            received.PayloadLength = message[2];
 800843e:	68bb      	ldr	r3, [r7, #8]
 8008440:	789a      	ldrb	r2, [r3, #2]
 8008442:	4b33      	ldr	r3, [pc, #204]	@ (8008510 <Process_PC_Config+0x104>)
 8008444:	705a      	strb	r2, [r3, #1]
            if (length >= (uint32_t)(received.PayloadLength + HEADER_SIZE + CRC_SIZE))
 8008446:	4b32      	ldr	r3, [pc, #200]	@ (8008510 <Process_PC_Config+0x104>)
 8008448:	785b      	ldrb	r3, [r3, #1]
 800844a:	3305      	adds	r3, #5
 800844c:	001a      	movs	r2, r3
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	4293      	cmp	r3, r2
 8008452:	d352      	bcc.n	80084fa <Process_PC_Config+0xee>
            {
                memcpy(received.Payload, &message[3], received.PayloadLength);
 8008454:	68bb      	ldr	r3, [r7, #8]
 8008456:	1cd9      	adds	r1, r3, #3
 8008458:	4b2d      	ldr	r3, [pc, #180]	@ (8008510 <Process_PC_Config+0x104>)
 800845a:	785b      	ldrb	r3, [r3, #1]
 800845c:	001a      	movs	r2, r3
 800845e:	4b2d      	ldr	r3, [pc, #180]	@ (8008514 <Process_PC_Config+0x108>)
 8008460:	0018      	movs	r0, r3
 8008462:	f01e f939 	bl	80266d8 <memcpy>
                received.Crc = message[3 + received.PayloadLength] << 8 | message[3 + received.PayloadLength + 1];
 8008466:	4b2a      	ldr	r3, [pc, #168]	@ (8008510 <Process_PC_Config+0x104>)
 8008468:	785b      	ldrb	r3, [r3, #1]
 800846a:	3303      	adds	r3, #3
 800846c:	001a      	movs	r2, r3
 800846e:	68bb      	ldr	r3, [r7, #8]
 8008470:	189b      	adds	r3, r3, r2
 8008472:	781b      	ldrb	r3, [r3, #0]
 8008474:	b21b      	sxth	r3, r3
 8008476:	021b      	lsls	r3, r3, #8
 8008478:	b21a      	sxth	r2, r3
 800847a:	4b25      	ldr	r3, [pc, #148]	@ (8008510 <Process_PC_Config+0x104>)
 800847c:	785b      	ldrb	r3, [r3, #1]
 800847e:	3304      	adds	r3, #4
 8008480:	68b9      	ldr	r1, [r7, #8]
 8008482:	18cb      	adds	r3, r1, r3
 8008484:	781b      	ldrb	r3, [r3, #0]
 8008486:	b21b      	sxth	r3, r3
 8008488:	4313      	orrs	r3, r2
 800848a:	b21b      	sxth	r3, r3
 800848c:	b299      	uxth	r1, r3
 800848e:	4a20      	ldr	r2, [pc, #128]	@ (8008510 <Process_PC_Config+0x104>)
 8008490:	2381      	movs	r3, #129	@ 0x81
 8008492:	005b      	lsls	r3, r3, #1
 8008494:	52d1      	strh	r1, [r2, r3]

                if (received.Crc != CRC16_ARC(message, received.PayloadLength + 3))
 8008496:	4a1e      	ldr	r2, [pc, #120]	@ (8008510 <Process_PC_Config+0x104>)
 8008498:	2381      	movs	r3, #129	@ 0x81
 800849a:	005b      	lsls	r3, r3, #1
 800849c:	5ad4      	ldrh	r4, [r2, r3]
 800849e:	4b1c      	ldr	r3, [pc, #112]	@ (8008510 <Process_PC_Config+0x104>)
 80084a0:	785b      	ldrb	r3, [r3, #1]
 80084a2:	3303      	adds	r3, #3
 80084a4:	b29a      	uxth	r2, r3
 80084a6:	68bb      	ldr	r3, [r7, #8]
 80084a8:	0011      	movs	r1, r2
 80084aa:	0018      	movs	r0, r3
 80084ac:	f000 faae 	bl	8008a0c <CRC16_ARC>
 80084b0:	0003      	movs	r3, r0
 80084b2:	429c      	cmp	r4, r3
 80084b4:	d007      	beq.n	80084c6 <Process_PC_Config+0xba>
                {
                    Create_Message(ERROR, received.Payload, received.PayloadLength);
 80084b6:	4b16      	ldr	r3, [pc, #88]	@ (8008510 <Process_PC_Config+0x104>)
 80084b8:	785a      	ldrb	r2, [r3, #1]
 80084ba:	4b16      	ldr	r3, [pc, #88]	@ (8008514 <Process_PC_Config+0x108>)
 80084bc:	0019      	movs	r1, r3
 80084be:	2001      	movs	r0, #1
 80084c0:	f000 fa52 	bl	8008968 <Create_Message>
 80084c4:	e016      	b.n	80084f4 <Process_PC_Config+0xe8>
                    //Handel het foutief ontvangen bericht af
                }
                else
                {
                    //Handel het correct ontvangen bericht af
                    ProcessCmd(received);
 80084c6:	4c12      	ldr	r4, [pc, #72]	@ (8008510 <Process_PC_Config+0x104>)
 80084c8:	466b      	mov	r3, sp
 80084ca:	0018      	movs	r0, r3
 80084cc:	0023      	movs	r3, r4
 80084ce:	3310      	adds	r3, #16
 80084d0:	22f4      	movs	r2, #244	@ 0xf4
 80084d2:	0019      	movs	r1, r3
 80084d4:	f01e f900 	bl	80266d8 <memcpy>
 80084d8:	6820      	ldr	r0, [r4, #0]
 80084da:	6861      	ldr	r1, [r4, #4]
 80084dc:	68a2      	ldr	r2, [r4, #8]
 80084de:	68e3      	ldr	r3, [r4, #12]
 80084e0:	f000 f81a 	bl	8008518 <ProcessCmd>
                    Create_Message(received.Command, received.Payload, received.PayloadLength);
 80084e4:	4b0a      	ldr	r3, [pc, #40]	@ (8008510 <Process_PC_Config+0x104>)
 80084e6:	7818      	ldrb	r0, [r3, #0]
 80084e8:	4b09      	ldr	r3, [pc, #36]	@ (8008510 <Process_PC_Config+0x104>)
 80084ea:	785a      	ldrb	r2, [r3, #1]
 80084ec:	4b09      	ldr	r3, [pc, #36]	@ (8008514 <Process_PC_Config+0x108>)
 80084ee:	0019      	movs	r1, r3
 80084f0:	f000 fa3a 	bl	8008968 <Create_Message>
                }
                ResetUsbRxDataSize();
 80084f4:	f01a fdf6 	bl	80230e4 <ResetUsbRxDataSize>
                return;
 80084f8:	e006      	b.n	8008508 <Process_PC_Config+0xfc>
            }
            GetUsbRxNextChunk(length);
 80084fa:	68fb      	ldr	r3, [r7, #12]
 80084fc:	0018      	movs	r0, r3
 80084fe:	f01a fe13 	bl	8023128 <GetUsbRxNextChunk>
 8008502:	e001      	b.n	8008508 <Process_PC_Config+0xfc>
        }
        else
        {
            ResetUsbRxDataSize();
 8008504:	f01a fdee 	bl	80230e4 <ResetUsbRxDataSize>
        }
    }
}
 8008508:	46bd      	mov	sp, r7
 800850a:	b005      	add	sp, #20
 800850c:	bd90      	pop	{r4, r7, pc}
 800850e:	46c0      	nop			@ (mov r8, r8)
 8008510:	20000940 	.word	0x20000940
 8008514:	20000942 	.word	0x20000942

08008518 <ProcessCmd>:

void ProcessCmd(Receive_MSG msg)
{
 8008518:	b084      	sub	sp, #16
 800851a:	b5b0      	push	{r4, r5, r7, lr}
 800851c:	b082      	sub	sp, #8
 800851e:	af00      	add	r7, sp, #0
 8008520:	2518      	movs	r5, #24
 8008522:	197c      	adds	r4, r7, r5
 8008524:	6020      	str	r0, [r4, #0]
 8008526:	6061      	str	r1, [r4, #4]
 8008528:	60a2      	str	r2, [r4, #8]
 800852a:	60e3      	str	r3, [r4, #12]
  switch (msg.Command)
 800852c:	197b      	adds	r3, r7, r5
 800852e:	781b      	ldrb	r3, [r3, #0]
 8008530:	2bfe      	cmp	r3, #254	@ 0xfe
 8008532:	d900      	bls.n	8008536 <ProcessCmd+0x1e>
 8008534:	e20e      	b.n	8008954 <ProcessCmd+0x43c>
 8008536:	009a      	lsls	r2, r3, #2
 8008538:	4be1      	ldr	r3, [pc, #900]	@ (80088c0 <ProcessCmd+0x3a8>)
 800853a:	18d3      	adds	r3, r2, r3
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	469f      	mov	pc, r3
    {
        case BoxConfigCmd:  // 0
            WriteUint8ArrayEepromSafe(BoxConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8008540:	2118      	movs	r1, #24
 8008542:	187b      	adds	r3, r7, r1
 8008544:	785b      	ldrb	r3, [r3, #1]
 8008546:	001a      	movs	r2, r3
 8008548:	187b      	adds	r3, r7, r1
 800854a:	1c99      	adds	r1, r3, #2
 800854c:	48dd      	ldr	r0, [pc, #884]	@ (80088c4 <ProcessCmd+0x3ac>)
 800854e:	230c      	movs	r3, #12
 8008550:	f003 fdb6 	bl	800c0c0 <WriteUint8ArrayEepromSafe>
        break;
 8008554:	e1fe      	b.n	8008954 <ProcessCmd+0x43c>
        case TempConfigCmd:  // 1
            WriteUint8ArrayEepromSafe(TempConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8008556:	2118      	movs	r1, #24
 8008558:	187b      	adds	r3, r7, r1
 800855a:	785b      	ldrb	r3, [r3, #1]
 800855c:	001a      	movs	r2, r3
 800855e:	187b      	adds	r3, r7, r1
 8008560:	1c99      	adds	r1, r3, #2
 8008562:	48d9      	ldr	r0, [pc, #868]	@ (80088c8 <ProcessCmd+0x3b0>)
 8008564:	230c      	movs	r3, #12
 8008566:	f003 fdab 	bl	800c0c0 <WriteUint8ArrayEepromSafe>
        break;
 800856a:	e1f3      	b.n	8008954 <ProcessCmd+0x43c>
        case HumidConfigCmd:  // 2
            WriteUint8ArrayEepromSafe(HumidConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 800856c:	2118      	movs	r1, #24
 800856e:	187b      	adds	r3, r7, r1
 8008570:	785b      	ldrb	r3, [r3, #1]
 8008572:	001a      	movs	r2, r3
 8008574:	187b      	adds	r3, r7, r1
 8008576:	1c99      	adds	r1, r3, #2
 8008578:	48d4      	ldr	r0, [pc, #848]	@ (80088cc <ProcessCmd+0x3b4>)
 800857a:	230c      	movs	r3, #12
 800857c:	f003 fda0 	bl	800c0c0 <WriteUint8ArrayEepromSafe>
        break;
 8008580:	e1e8      	b.n	8008954 <ProcessCmd+0x43c>
        case NOxIndexConfigCmd:  // 3
            WriteUint8ArrayEepromSafe(NOxIndexConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8008582:	2118      	movs	r1, #24
 8008584:	187b      	adds	r3, r7, r1
 8008586:	785b      	ldrb	r3, [r3, #1]
 8008588:	001a      	movs	r2, r3
 800858a:	187b      	adds	r3, r7, r1
 800858c:	1c99      	adds	r1, r3, #2
 800858e:	48d0      	ldr	r0, [pc, #832]	@ (80088d0 <ProcessCmd+0x3b8>)
 8008590:	230c      	movs	r3, #12
 8008592:	f003 fd95 	bl	800c0c0 <WriteUint8ArrayEepromSafe>
        break;
 8008596:	e1dd      	b.n	8008954 <ProcessCmd+0x43c>
        case VocIndexConfigCmd:  // 4
            WriteUint8ArrayEepromSafe(VocIndexConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8008598:	2118      	movs	r1, #24
 800859a:	187b      	adds	r3, r7, r1
 800859c:	785b      	ldrb	r3, [r3, #1]
 800859e:	001a      	movs	r2, r3
 80085a0:	187b      	adds	r3, r7, r1
 80085a2:	1c99      	adds	r1, r3, #2
 80085a4:	48cb      	ldr	r0, [pc, #812]	@ (80088d4 <ProcessCmd+0x3bc>)
 80085a6:	230c      	movs	r3, #12
 80085a8:	f003 fd8a 	bl	800c0c0 <WriteUint8ArrayEepromSafe>
        break;
 80085ac:	e1d2      	b.n	8008954 <ProcessCmd+0x43c>
        case dBAConfigCmd: // 5 was 6 will be dBAConfigCMD
            WriteUint8ArrayEepromSafe(dBAConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 80085ae:	2118      	movs	r1, #24
 80085b0:	187b      	adds	r3, r7, r1
 80085b2:	785b      	ldrb	r3, [r3, #1]
 80085b4:	001a      	movs	r2, r3
 80085b6:	187b      	adds	r3, r7, r1
 80085b8:	1c99      	adds	r1, r3, #2
 80085ba:	48c7      	ldr	r0, [pc, #796]	@ (80088d8 <ProcessCmd+0x3c0>)
 80085bc:	230c      	movs	r3, #12
 80085be:	f003 fd7f 	bl	800c0c0 <WriteUint8ArrayEepromSafe>
        break;
 80085c2:	e1c7      	b.n	8008954 <ProcessCmd+0x43c>
        case dBcConfigCmd:  // 6
            WriteUint8ArrayEepromSafe(dBcConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 80085c4:	2118      	movs	r1, #24
 80085c6:	187b      	adds	r3, r7, r1
 80085c8:	785b      	ldrb	r3, [r3, #1]
 80085ca:	001a      	movs	r2, r3
 80085cc:	187b      	adds	r3, r7, r1
 80085ce:	1c99      	adds	r1, r3, #2
 80085d0:	48c2      	ldr	r0, [pc, #776]	@ (80088dc <ProcessCmd+0x3c4>)
 80085d2:	230c      	movs	r3, #12
 80085d4:	f003 fd74 	bl	800c0c0 <WriteUint8ArrayEepromSafe>
        break;
 80085d8:	e1bc      	b.n	8008954 <ProcessCmd+0x43c>
        case PM2ConfigCmd:  // 7
            WriteUint8ArrayEepromSafe(PM2ConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 80085da:	2118      	movs	r1, #24
 80085dc:	187b      	adds	r3, r7, r1
 80085de:	785b      	ldrb	r3, [r3, #1]
 80085e0:	001a      	movs	r2, r3
 80085e2:	187b      	adds	r3, r7, r1
 80085e4:	1c99      	adds	r1, r3, #2
 80085e6:	48be      	ldr	r0, [pc, #760]	@ (80088e0 <ProcessCmd+0x3c8>)
 80085e8:	230c      	movs	r3, #12
 80085ea:	f003 fd69 	bl	800c0c0 <WriteUint8ArrayEepromSafe>
        break;
 80085ee:	e1b1      	b.n	8008954 <ProcessCmd+0x43c>
        case PM10ConfigCmd:  // 8
            WriteUint8ArrayEepromSafe(PM10ConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 80085f0:	2118      	movs	r1, #24
 80085f2:	187b      	adds	r3, r7, r1
 80085f4:	785b      	ldrb	r3, [r3, #1]
 80085f6:	001a      	movs	r2, r3
 80085f8:	187b      	adds	r3, r7, r1
 80085fa:	1c99      	adds	r1, r3, #2
 80085fc:	48b9      	ldr	r0, [pc, #740]	@ (80088e4 <ProcessCmd+0x3cc>)
 80085fe:	230c      	movs	r3, #12
 8008600:	f003 fd5e 	bl	800c0c0 <WriteUint8ArrayEepromSafe>
        break;
 8008604:	e1a6      	b.n	8008954 <ProcessCmd+0x43c>
        case BatVoltConfigCmd:  // 9
            WriteUint8ArrayEepromSafe(BatVoltConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8008606:	2118      	movs	r1, #24
 8008608:	187b      	adds	r3, r7, r1
 800860a:	785b      	ldrb	r3, [r3, #1]
 800860c:	001a      	movs	r2, r3
 800860e:	187b      	adds	r3, r7, r1
 8008610:	1c99      	adds	r1, r3, #2
 8008612:	48b5      	ldr	r0, [pc, #724]	@ (80088e8 <ProcessCmd+0x3d0>)
 8008614:	230c      	movs	r3, #12
 8008616:	f003 fd53 	bl	800c0c0 <WriteUint8ArrayEepromSafe>
        break;
 800861a:	e19b      	b.n	8008954 <ProcessCmd+0x43c>
        case SolVoltConfigCmd:  // 10
            WriteUint8ArrayEepromSafe(SolVoltConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 800861c:	2118      	movs	r1, #24
 800861e:	187b      	adds	r3, r7, r1
 8008620:	785b      	ldrb	r3, [r3, #1]
 8008622:	001a      	movs	r2, r3
 8008624:	187b      	adds	r3, r7, r1
 8008626:	1c99      	adds	r1, r3, #2
 8008628:	48b0      	ldr	r0, [pc, #704]	@ (80088ec <ProcessCmd+0x3d4>)
 800862a:	230c      	movs	r3, #12
 800862c:	f003 fd48 	bl	800c0c0 <WriteUint8ArrayEepromSafe>
        break;
 8008630:	e190      	b.n	8008954 <ProcessCmd+0x43c>
        case ChargerStatConfigCmd:  // 11
            WriteUint8ArrayEepromSafe(ChargerStatConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8008632:	2118      	movs	r1, #24
 8008634:	187b      	adds	r3, r7, r1
 8008636:	785b      	ldrb	r3, [r3, #1]
 8008638:	001a      	movs	r2, r3
 800863a:	187b      	adds	r3, r7, r1
 800863c:	1c99      	adds	r1, r3, #2
 800863e:	48ac      	ldr	r0, [pc, #688]	@ (80088f0 <ProcessCmd+0x3d8>)
 8008640:	230c      	movs	r3, #12
 8008642:	f003 fd3d 	bl	800c0c0 <WriteUint8ArrayEepromSafe>
        break;
 8008646:	e185      	b.n	8008954 <ProcessCmd+0x43c>
        case CustomNameConfigCmd:  // 12
            WriteUint8ArrayEepromSafe(CustomNameConfigAddr, msg.Payload, msg.PayloadLength, CustomNameMaxLength);
 8008648:	2118      	movs	r1, #24
 800864a:	187b      	adds	r3, r7, r1
 800864c:	785b      	ldrb	r3, [r3, #1]
 800864e:	001a      	movs	r2, r3
 8008650:	187b      	adds	r3, r7, r1
 8008652:	1c99      	adds	r1, r3, #2
 8008654:	48a7      	ldr	r0, [pc, #668]	@ (80088f4 <ProcessCmd+0x3dc>)
 8008656:	2320      	movs	r3, #32
 8008658:	f003 fd32 	bl	800c0c0 <WriteUint8ArrayEepromSafe>
        break;
 800865c:	e17a      	b.n	8008954 <ProcessCmd+0x43c>
        case SSIDConfigCmd: // 13 was 21
          ClearEEprom(SSIDConfigAddr, SSIDMaxLength);
 800865e:	4ba6      	ldr	r3, [pc, #664]	@ (80088f8 <ProcessCmd+0x3e0>)
 8008660:	2120      	movs	r1, #32
 8008662:	0018      	movs	r0, r3
 8008664:	f003 fd71 	bl	800c14a <ClearEEprom>
          WriteUint8ArrayEepromSafe(SSIDConfigAddr, msg.Payload, msg.PayloadLength, SSIDMaxLength);
 8008668:	2118      	movs	r1, #24
 800866a:	187b      	adds	r3, r7, r1
 800866c:	785b      	ldrb	r3, [r3, #1]
 800866e:	001a      	movs	r2, r3
 8008670:	187b      	adds	r3, r7, r1
 8008672:	1c99      	adds	r1, r3, #2
 8008674:	48a0      	ldr	r0, [pc, #640]	@ (80088f8 <ProcessCmd+0x3e0>)
 8008676:	2320      	movs	r3, #32
 8008678:	f003 fd22 	bl	800c0c0 <WriteUint8ArrayEepromSafe>
        break;
 800867c:	e16a      	b.n	8008954 <ProcessCmd+0x43c>
        case PasswordConfigCmd: // 14 was 22
          ClearEEprom(pwdConfigAddr, pwdMaxLength);
 800867e:	4b9f      	ldr	r3, [pc, #636]	@ (80088fc <ProcessCmd+0x3e4>)
 8008680:	2140      	movs	r1, #64	@ 0x40
 8008682:	0018      	movs	r0, r3
 8008684:	f003 fd61 	bl	800c14a <ClearEEprom>
          printf_USB("(command: %d, payload to write: %s, length: %d\r\n",msg.Command, msg.Payload, msg.PayloadLength);
 8008688:	2218      	movs	r2, #24
 800868a:	18bb      	adds	r3, r7, r2
 800868c:	781b      	ldrb	r3, [r3, #0]
 800868e:	0019      	movs	r1, r3
 8008690:	18bb      	adds	r3, r7, r2
 8008692:	785b      	ldrb	r3, [r3, #1]
 8008694:	001c      	movs	r4, r3
 8008696:	0015      	movs	r5, r2
 8008698:	18bb      	adds	r3, r7, r2
 800869a:	1c9a      	adds	r2, r3, #2
 800869c:	4898      	ldr	r0, [pc, #608]	@ (8008900 <ProcessCmd+0x3e8>)
 800869e:	0023      	movs	r3, r4
 80086a0:	f000 fa00 	bl	8008aa4 <printf_USB>
          WriteUint8ArrayEepromSafe(pwdConfigAddr, msg.Payload, msg.PayloadLength, pwdMaxLength);
 80086a4:	0029      	movs	r1, r5
 80086a6:	187b      	adds	r3, r7, r1
 80086a8:	785b      	ldrb	r3, [r3, #1]
 80086aa:	001a      	movs	r2, r3
 80086ac:	187b      	adds	r3, r7, r1
 80086ae:	1c99      	adds	r1, r3, #2
 80086b0:	4892      	ldr	r0, [pc, #584]	@ (80088fc <ProcessCmd+0x3e4>)
 80086b2:	2340      	movs	r3, #64	@ 0x40
 80086b4:	f003 fd04 	bl	800c0c0 <WriteUint8ArrayEepromSafe>
        break;
 80086b8:	e14c      	b.n	8008954 <ProcessCmd+0x43c>
        case PM1ConfigCmd:  // 21 was 13
            WriteUint8ArrayEepromSafe(PM1ConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 80086ba:	2118      	movs	r1, #24
 80086bc:	187b      	adds	r3, r7, r1
 80086be:	785b      	ldrb	r3, [r3, #1]
 80086c0:	001a      	movs	r2, r3
 80086c2:	187b      	adds	r3, r7, r1
 80086c4:	1c99      	adds	r1, r3, #2
 80086c6:	488f      	ldr	r0, [pc, #572]	@ (8008904 <ProcessCmd+0x3ec>)
 80086c8:	230c      	movs	r3, #12
 80086ca:	f003 fcf9 	bl	800c0c0 <WriteUint8ArrayEepromSafe>
        break;
 80086ce:	e141      	b.n	8008954 <ProcessCmd+0x43c>
        case PM4ConfigCmd:  // 22 was 14
            WriteUint8ArrayEepromSafe(PM4ConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 80086d0:	2118      	movs	r1, #24
 80086d2:	187b      	adds	r3, r7, r1
 80086d4:	785b      	ldrb	r3, [r3, #1]
 80086d6:	001a      	movs	r2, r3
 80086d8:	187b      	adds	r3, r7, r1
 80086da:	1c99      	adds	r1, r3, #2
 80086dc:	488a      	ldr	r0, [pc, #552]	@ (8008908 <ProcessCmd+0x3f0>)
 80086de:	230c      	movs	r3, #12
 80086e0:	f003 fcee 	bl	800c0c0 <WriteUint8ArrayEepromSafe>
        break;
 80086e4:	e136      	b.n	8008954 <ProcessCmd+0x43c>
        case AHTTempConfigCmd: // 15
          WriteUint8ArrayEepromSafe(AHTTempConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 80086e6:	2118      	movs	r1, #24
 80086e8:	187b      	adds	r3, r7, r1
 80086ea:	785b      	ldrb	r3, [r3, #1]
 80086ec:	001a      	movs	r2, r3
 80086ee:	187b      	adds	r3, r7, r1
 80086f0:	1c99      	adds	r1, r3, #2
 80086f2:	4886      	ldr	r0, [pc, #536]	@ (800890c <ProcessCmd+0x3f4>)
 80086f4:	230c      	movs	r3, #12
 80086f6:	f003 fce3 	bl	800c0c0 <WriteUint8ArrayEepromSafe>
        break;
 80086fa:	e12b      	b.n	8008954 <ProcessCmd+0x43c>
        case AHTHumidConfigCmd: // 16
          WriteUint8ArrayEepromSafe(AHTHumidConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 80086fc:	2118      	movs	r1, #24
 80086fe:	187b      	adds	r3, r7, r1
 8008700:	785b      	ldrb	r3, [r3, #1]
 8008702:	001a      	movs	r2, r3
 8008704:	187b      	adds	r3, r7, r1
 8008706:	1c99      	adds	r1, r3, #2
 8008708:	4881      	ldr	r0, [pc, #516]	@ (8008910 <ProcessCmd+0x3f8>)
 800870a:	230c      	movs	r3, #12
 800870c:	f003 fcd8 	bl	800c0c0 <WriteUint8ArrayEepromSafe>
        break;
 8008710:	e120      	b.n	8008954 <ProcessCmd+0x43c>
        case BMPTempConfigCmd: // 17
          WriteUint8ArrayEepromSafe(BMPTempConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8008712:	2118      	movs	r1, #24
 8008714:	187b      	adds	r3, r7, r1
 8008716:	785b      	ldrb	r3, [r3, #1]
 8008718:	001a      	movs	r2, r3
 800871a:	187b      	adds	r3, r7, r1
 800871c:	1c99      	adds	r1, r3, #2
 800871e:	487d      	ldr	r0, [pc, #500]	@ (8008914 <ProcessCmd+0x3fc>)
 8008720:	230c      	movs	r3, #12
 8008722:	f003 fccd 	bl	800c0c0 <WriteUint8ArrayEepromSafe>
        break;
 8008726:	e115      	b.n	8008954 <ProcessCmd+0x43c>
        case ENSAQIConfigCmd: // 18
          WriteUint8ArrayEepromSafe(ENSAQIConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8008728:	2118      	movs	r1, #24
 800872a:	187b      	adds	r3, r7, r1
 800872c:	785b      	ldrb	r3, [r3, #1]
 800872e:	001a      	movs	r2, r3
 8008730:	187b      	adds	r3, r7, r1
 8008732:	1c99      	adds	r1, r3, #2
 8008734:	4878      	ldr	r0, [pc, #480]	@ (8008918 <ProcessCmd+0x400>)
 8008736:	230c      	movs	r3, #12
 8008738:	f003 fcc2 	bl	800c0c0 <WriteUint8ArrayEepromSafe>
        break;
 800873c:	e10a      	b.n	8008954 <ProcessCmd+0x43c>
        case ENSTVOCConfigCmd: // 19
          WriteUint8ArrayEepromSafe(ENSTVOCConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 800873e:	2118      	movs	r1, #24
 8008740:	187b      	adds	r3, r7, r1
 8008742:	785b      	ldrb	r3, [r3, #1]
 8008744:	001a      	movs	r2, r3
 8008746:	187b      	adds	r3, r7, r1
 8008748:	1c99      	adds	r1, r3, #2
 800874a:	4874      	ldr	r0, [pc, #464]	@ (800891c <ProcessCmd+0x404>)
 800874c:	230c      	movs	r3, #12
 800874e:	f003 fcb7 	bl	800c0c0 <WriteUint8ArrayEepromSafe>
        break;
 8008752:	e0ff      	b.n	8008954 <ProcessCmd+0x43c>
        case ENSeCO2ConfigCmd: // 20
          WriteUint8ArrayEepromSafe(ENSeCO2ConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8008754:	2118      	movs	r1, #24
 8008756:	187b      	adds	r3, r7, r1
 8008758:	785b      	ldrb	r3, [r3, #1]
 800875a:	001a      	movs	r2, r3
 800875c:	187b      	adds	r3, r7, r1
 800875e:	1c99      	adds	r1, r3, #2
 8008760:	486f      	ldr	r0, [pc, #444]	@ (8008920 <ProcessCmd+0x408>)
 8008762:	230c      	movs	r3, #12
 8008764:	f003 fcac 	bl	800c0c0 <WriteUint8ArrayEepromSafe>
        break;
 8008768:	e0f4      	b.n	8008954 <ProcessCmd+0x43c>
        case SEN55TempConfigCmd: // 23
          WriteUint8ArrayEepromSafe(SEN55TempConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 800876a:	2118      	movs	r1, #24
 800876c:	187b      	adds	r3, r7, r1
 800876e:	785b      	ldrb	r3, [r3, #1]
 8008770:	001a      	movs	r2, r3
 8008772:	187b      	adds	r3, r7, r1
 8008774:	1c99      	adds	r1, r3, #2
 8008776:	486b      	ldr	r0, [pc, #428]	@ (8008924 <ProcessCmd+0x40c>)
 8008778:	230c      	movs	r3, #12
 800877a:	f003 fca1 	bl	800c0c0 <WriteUint8ArrayEepromSafe>
        break;
 800877e:	e0e9      	b.n	8008954 <ProcessCmd+0x43c>
        case SEN55HumidConfigCmd: // 24
          WriteUint8ArrayEepromSafe(SEN55HumidConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8008780:	2118      	movs	r1, #24
 8008782:	187b      	adds	r3, r7, r1
 8008784:	785b      	ldrb	r3, [r3, #1]
 8008786:	001a      	movs	r2, r3
 8008788:	187b      	adds	r3, r7, r1
 800878a:	1c99      	adds	r1, r3, #2
 800878c:	4866      	ldr	r0, [pc, #408]	@ (8008928 <ProcessCmd+0x410>)
 800878e:	230c      	movs	r3, #12
 8008790:	f003 fc96 	bl	800c0c0 <WriteUint8ArrayEepromSafe>
        break;
 8008794:	e0de      	b.n	8008954 <ProcessCmd+0x43c>
        case SendFromNameConfigCmd:  // 25
          ClearEEprom(SendFromNameConfigAddr, SendFromNameMaxLength);
 8008796:	4b65      	ldr	r3, [pc, #404]	@ (800892c <ProcessCmd+0x414>)
 8008798:	2130      	movs	r1, #48	@ 0x30
 800879a:	0018      	movs	r0, r3
 800879c:	f003 fcd5 	bl	800c14a <ClearEEprom>
          WriteUint8ArrayEepromSafe(SendFromNameConfigAddr, msg.Payload, msg.PayloadLength, SendFromNameMaxLength);
 80087a0:	2118      	movs	r1, #24
 80087a2:	187b      	adds	r3, r7, r1
 80087a4:	785b      	ldrb	r3, [r3, #1]
 80087a6:	001a      	movs	r2, r3
 80087a8:	187b      	adds	r3, r7, r1
 80087aa:	1c99      	adds	r1, r3, #2
 80087ac:	485f      	ldr	r0, [pc, #380]	@ (800892c <ProcessCmd+0x414>)
 80087ae:	2330      	movs	r3, #48	@ 0x30
 80087b0:	f003 fc86 	bl	800c0c0 <WriteUint8ArrayEepromSafe>
        break;
 80087b4:	e0ce      	b.n	8008954 <ProcessCmd+0x43c>
        case SendToNameConfigCmd:  // 26
          ClearEEprom(SendToNameConfigAddr, SendToNameMaxLength);
 80087b6:	4b5e      	ldr	r3, [pc, #376]	@ (8008930 <ProcessCmd+0x418>)
 80087b8:	2130      	movs	r1, #48	@ 0x30
 80087ba:	0018      	movs	r0, r3
 80087bc:	f003 fcc5 	bl	800c14a <ClearEEprom>
          printf_USB("(command: %d, payload to write: %s, length: %d\r\n",msg.Command, msg.Payload, msg.PayloadLength);
 80087c0:	2218      	movs	r2, #24
 80087c2:	18bb      	adds	r3, r7, r2
 80087c4:	781b      	ldrb	r3, [r3, #0]
 80087c6:	0019      	movs	r1, r3
 80087c8:	18bb      	adds	r3, r7, r2
 80087ca:	785b      	ldrb	r3, [r3, #1]
 80087cc:	001c      	movs	r4, r3
 80087ce:	0015      	movs	r5, r2
 80087d0:	18bb      	adds	r3, r7, r2
 80087d2:	1c9a      	adds	r2, r3, #2
 80087d4:	484a      	ldr	r0, [pc, #296]	@ (8008900 <ProcessCmd+0x3e8>)
 80087d6:	0023      	movs	r3, r4
 80087d8:	f000 f964 	bl	8008aa4 <printf_USB>
          WriteUint8ArrayEepromSafe(SendToNameConfigAddr, msg.Payload, msg.PayloadLength, SendToNameMaxLength);
 80087dc:	0029      	movs	r1, r5
 80087de:	187b      	adds	r3, r7, r1
 80087e0:	785b      	ldrb	r3, [r3, #1]
 80087e2:	001a      	movs	r2, r3
 80087e4:	187b      	adds	r3, r7, r1
 80087e6:	1c99      	adds	r1, r3, #2
 80087e8:	4851      	ldr	r0, [pc, #324]	@ (8008930 <ProcessCmd+0x418>)
 80087ea:	2330      	movs	r3, #48	@ 0x30
 80087ec:	f003 fc68 	bl	800c0c0 <WriteUint8ArrayEepromSafe>
        break;
 80087f0:	e0b0      	b.n	8008954 <ProcessCmd+0x43c>
        case MailAPIKeyConfigCmd:  // 27
          ClearEEprom(MailAPIKeyConfigAddr, MailAPIKeyMaxLength);
 80087f2:	4b50      	ldr	r3, [pc, #320]	@ (8008934 <ProcessCmd+0x41c>)
 80087f4:	2130      	movs	r1, #48	@ 0x30
 80087f6:	0018      	movs	r0, r3
 80087f8:	f003 fca7 	bl	800c14a <ClearEEprom>
          WriteUint8ArrayEepromSafe(MailAPIKeyConfigAddr, msg.Payload, msg.PayloadLength, MailAPIKeyMaxLength);
 80087fc:	2118      	movs	r1, #24
 80087fe:	187b      	adds	r3, r7, r1
 8008800:	785b      	ldrb	r3, [r3, #1]
 8008802:	001a      	movs	r2, r3
 8008804:	187b      	adds	r3, r7, r1
 8008806:	1c99      	adds	r1, r3, #2
 8008808:	484a      	ldr	r0, [pc, #296]	@ (8008934 <ProcessCmd+0x41c>)
 800880a:	2330      	movs	r3, #48	@ 0x30
 800880c:	f003 fc58 	bl	800c0c0 <WriteUint8ArrayEepromSafe>
        break;
 8008810:	e0a0      	b.n	8008954 <ProcessCmd+0x43c>
        case hPaConfigCmd:  // 28 will be airpressure => hPaconfigCMD hPaConfigAddr ??
          WriteUint8ArrayEepromSafe(hPaConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8008812:	2118      	movs	r1, #24
 8008814:	187b      	adds	r3, r7, r1
 8008816:	785b      	ldrb	r3, [r3, #1]
 8008818:	001a      	movs	r2, r3
 800881a:	187b      	adds	r3, r7, r1
 800881c:	1c99      	adds	r1, r3, #2
 800881e:	4846      	ldr	r0, [pc, #280]	@ (8008938 <ProcessCmd+0x420>)
 8008820:	230c      	movs	r3, #12
 8008822:	f003 fc4d 	bl	800c0c0 <WriteUint8ArrayEepromSafe>
        break;
 8008826:	e095      	b.n	8008954 <ProcessCmd+0x43c>
        case UptimeConfigCmd: // 29
          WriteUint8ArrayEepromSafe(UptimeConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8008828:	2118      	movs	r1, #24
 800882a:	187b      	adds	r3, r7, r1
 800882c:	785b      	ldrb	r3, [r3, #1]
 800882e:	001a      	movs	r2, r3
 8008830:	187b      	adds	r3, r7, r1
 8008832:	1c99      	adds	r1, r3, #2
 8008834:	4841      	ldr	r0, [pc, #260]	@ (800893c <ProcessCmd+0x424>)
 8008836:	230c      	movs	r3, #12
 8008838:	f003 fc42 	bl	800c0c0 <WriteUint8ArrayEepromSafe>
        break;
 800883c:	e08a      	b.n	8008954 <ProcessCmd+0x43c>
        case URLToUploadConfigCmd: // 30
          printf_USB("(command: %d, payload to write: %s, length: %d\r\n",msg.Command, msg.Payload, msg.PayloadLength);
 800883e:	2218      	movs	r2, #24
 8008840:	18bb      	adds	r3, r7, r2
 8008842:	781b      	ldrb	r3, [r3, #0]
 8008844:	0019      	movs	r1, r3
 8008846:	18bb      	adds	r3, r7, r2
 8008848:	785b      	ldrb	r3, [r3, #1]
 800884a:	001c      	movs	r4, r3
 800884c:	0015      	movs	r5, r2
 800884e:	18bb      	adds	r3, r7, r2
 8008850:	1c9a      	adds	r2, r3, #2
 8008852:	482b      	ldr	r0, [pc, #172]	@ (8008900 <ProcessCmd+0x3e8>)
 8008854:	0023      	movs	r3, r4
 8008856:	f000 f925 	bl	8008aa4 <printf_USB>
          WriteUint8ArrayEepromSafe(URLToUploadConfigAddr, msg.Payload, msg.PayloadLength, URLToUploadMaxLength);
 800885a:	0029      	movs	r1, r5
 800885c:	187b      	adds	r3, r7, r1
 800885e:	785b      	ldrb	r3, [r3, #1]
 8008860:	001a      	movs	r2, r3
 8008862:	187b      	adds	r3, r7, r1
 8008864:	1c99      	adds	r1, r3, #2
 8008866:	4836      	ldr	r0, [pc, #216]	@ (8008940 <ProcessCmd+0x428>)
 8008868:	2330      	movs	r3, #48	@ 0x30
 800886a:	f003 fc29 	bl	800c0c0 <WriteUint8ArrayEepromSafe>
        break;
 800886e:	e071      	b.n	8008954 <ProcessCmd+0x43c>

        case ClearConfigCmd: // 253
            ClearEEprom(EEPromStartAddr, ConfigSize);
 8008870:	2396      	movs	r3, #150	@ 0x96
 8008872:	33ff      	adds	r3, #255	@ 0xff
 8008874:	4a13      	ldr	r2, [pc, #76]	@ (80088c4 <ProcessCmd+0x3ac>)
 8008876:	0019      	movs	r1, r3
 8008878:	0010      	movs	r0, r2
 800887a:	f003 fc66 	bl	800c14a <ClearEEprom>
            ClearEEprom(SSIDStartAddr, IPrelatedConfigSize);
 800887e:	4b1e      	ldr	r3, [pc, #120]	@ (80088f8 <ProcessCmd+0x3e0>)
 8008880:	21f0      	movs	r1, #240	@ 0xf0
 8008882:	0018      	movs	r0, r3
 8008884:	f003 fc61 	bl	800c14a <ClearEEprom>
        break;
 8008888:	e064      	b.n	8008954 <ProcessCmd+0x43c>
        case ClearEepromCmd: //254
        {
            uint16_t size = ((uint16_t)msg.Payload[0] << 8 | msg.Payload[1]);
 800888a:	2118      	movs	r1, #24
 800888c:	187b      	adds	r3, r7, r1
 800888e:	789b      	ldrb	r3, [r3, #2]
 8008890:	b21b      	sxth	r3, r3
 8008892:	021b      	lsls	r3, r3, #8
 8008894:	b21a      	sxth	r2, r3
 8008896:	187b      	adds	r3, r7, r1
 8008898:	78db      	ldrb	r3, [r3, #3]
 800889a:	b21b      	sxth	r3, r3
 800889c:	4313      	orrs	r3, r2
 800889e:	b21a      	sxth	r2, r3
 80088a0:	1dbb      	adds	r3, r7, #6
 80088a2:	801a      	strh	r2, [r3, #0]
            if (size < EEPROM_SIZE)
 80088a4:	1dbb      	adds	r3, r7, #6
 80088a6:	881a      	ldrh	r2, [r3, #0]
 80088a8:	23c0      	movs	r3, #192	@ 0xc0
 80088aa:	015b      	lsls	r3, r3, #5
 80088ac:	429a      	cmp	r2, r3
 80088ae:	d249      	bcs.n	8008944 <ProcessCmd+0x42c>
            {
                ClearEEprom(EEPromStartAddr, size);
 80088b0:	1dbb      	adds	r3, r7, #6
 80088b2:	881b      	ldrh	r3, [r3, #0]
 80088b4:	4a03      	ldr	r2, [pc, #12]	@ (80088c4 <ProcessCmd+0x3ac>)
 80088b6:	0019      	movs	r1, r3
 80088b8:	0010      	movs	r0, r2
 80088ba:	f003 fc46 	bl	800c14a <ClearEEprom>
            }
            else
            {
                ClearEEprom(EEPROM_START, EEPROM_SIZE);
            }
            break;
 80088be:	e048      	b.n	8008952 <ProcessCmd+0x43a>
 80088c0:	0802de78 	.word	0x0802de78
 80088c4:	08080000 	.word	0x08080000
 80088c8:	0808000c 	.word	0x0808000c
 80088cc:	08080018 	.word	0x08080018
 80088d0:	08080024 	.word	0x08080024
 80088d4:	08080030 	.word	0x08080030
 80088d8:	08080048 	.word	0x08080048
 80088dc:	0808003c 	.word	0x0808003c
 80088e0:	08080054 	.word	0x08080054
 80088e4:	08080060 	.word	0x08080060
 80088e8:	0808006c 	.word	0x0808006c
 80088ec:	08080078 	.word	0x08080078
 80088f0:	08080084 	.word	0x08080084
 80088f4:	08080090 	.word	0x08080090
 80088f8:	08080200 	.word	0x08080200
 80088fc:	08080220 	.word	0x08080220
 8008900:	0802b304 	.word	0x0802b304
 8008904:	080800b0 	.word	0x080800b0
 8008908:	080800bc 	.word	0x080800bc
 800890c:	080800c8 	.word	0x080800c8
 8008910:	080800d4 	.word	0x080800d4
 8008914:	080800e0 	.word	0x080800e0
 8008918:	080800ec 	.word	0x080800ec
 800891c:	080800f8 	.word	0x080800f8
 8008920:	08080104 	.word	0x08080104
 8008924:	08080170 	.word	0x08080170
 8008928:	0808017c 	.word	0x0808017c
 800892c:	08080260 	.word	0x08080260
 8008930:	08080290 	.word	0x08080290
 8008934:	080802c0 	.word	0x080802c0
 8008938:	08080188 	.word	0x08080188
 800893c:	080801a0 	.word	0x080801a0
 8008940:	08080110 	.word	0x08080110
                ClearEEprom(EEPROM_START, EEPROM_SIZE);
 8008944:	23c0      	movs	r3, #192	@ 0xc0
 8008946:	015b      	lsls	r3, r3, #5
 8008948:	4a06      	ldr	r2, [pc, #24]	@ (8008964 <ProcessCmd+0x44c>)
 800894a:	0019      	movs	r1, r3
 800894c:	0010      	movs	r0, r2
 800894e:	f003 fbfc 	bl	800c14a <ClearEEprom>
            break;
 8008952:	46c0      	nop			@ (mov r8, r8)
        }
    }

}
 8008954:	46c0      	nop			@ (mov r8, r8)
 8008956:	46bd      	mov	sp, r7
 8008958:	b002      	add	sp, #8
 800895a:	bcb0      	pop	{r4, r5, r7}
 800895c:	bc08      	pop	{r3}
 800895e:	b004      	add	sp, #16
 8008960:	4718      	bx	r3
 8008962:	46c0      	nop			@ (mov r8, r8)
 8008964:	08080000 	.word	0x08080000

08008968 <Create_Message>:

void Create_Message(uint8_t command, uint8_t *payload, uint8_t payloadLength)
{
 8008968:	b5f0      	push	{r4, r5, r6, r7, lr}
 800896a:	b085      	sub	sp, #20
 800896c:	af00      	add	r7, sp, #0
 800896e:	6039      	str	r1, [r7, #0]
 8008970:	0011      	movs	r1, r2
 8008972:	1dfb      	adds	r3, r7, #7
 8008974:	1c02      	adds	r2, r0, #0
 8008976:	701a      	strb	r2, [r3, #0]
 8008978:	1dbb      	adds	r3, r7, #6
 800897a:	1c0a      	adds	r2, r1, #0
 800897c:	701a      	strb	r2, [r3, #0]
    static uint8_t message[TOTAL_BUFFER_SIZE];
    message[0] = (uint8_t)PREAMBLE[0];
 800897e:	2223      	movs	r2, #35	@ 0x23
 8008980:	4b20      	ldr	r3, [pc, #128]	@ (8008a04 <Create_Message+0x9c>)
 8008982:	701a      	strb	r2, [r3, #0]
    message[1] = command;
 8008984:	4b1f      	ldr	r3, [pc, #124]	@ (8008a04 <Create_Message+0x9c>)
 8008986:	1dfa      	adds	r2, r7, #7
 8008988:	7812      	ldrb	r2, [r2, #0]
 800898a:	705a      	strb	r2, [r3, #1]
    message[2] = payloadLength;
 800898c:	4b1d      	ldr	r3, [pc, #116]	@ (8008a04 <Create_Message+0x9c>)
 800898e:	1dba      	adds	r2, r7, #6
 8008990:	7812      	ldrb	r2, [r2, #0]
 8008992:	709a      	strb	r2, [r3, #2]
    memcpy(&message[3], payload, payloadLength);
 8008994:	1dbb      	adds	r3, r7, #6
 8008996:	781a      	ldrb	r2, [r3, #0]
 8008998:	6839      	ldr	r1, [r7, #0]
 800899a:	4b1b      	ldr	r3, [pc, #108]	@ (8008a08 <Create_Message+0xa0>)
 800899c:	0018      	movs	r0, r3
 800899e:	f01d fe9b 	bl	80266d8 <memcpy>
    uint16_t crcIndex = (HEADER_SIZE + payloadLength);
 80089a2:	1dbb      	adds	r3, r7, #6
 80089a4:	781b      	ldrb	r3, [r3, #0]
 80089a6:	b29a      	uxth	r2, r3
 80089a8:	250e      	movs	r5, #14
 80089aa:	197b      	adds	r3, r7, r5
 80089ac:	3203      	adds	r2, #3
 80089ae:	801a      	strh	r2, [r3, #0]
    uint16_t calculatedCRC = CRC16_ARC(message, crcIndex);
 80089b0:	260c      	movs	r6, #12
 80089b2:	19bc      	adds	r4, r7, r6
 80089b4:	197b      	adds	r3, r7, r5
 80089b6:	881a      	ldrh	r2, [r3, #0]
 80089b8:	4b12      	ldr	r3, [pc, #72]	@ (8008a04 <Create_Message+0x9c>)
 80089ba:	0011      	movs	r1, r2
 80089bc:	0018      	movs	r0, r3
 80089be:	f000 f825 	bl	8008a0c <CRC16_ARC>
 80089c2:	0003      	movs	r3, r0
 80089c4:	8023      	strh	r3, [r4, #0]
    message[crcIndex] = calculatedCRC >> 8;
 80089c6:	0030      	movs	r0, r6
 80089c8:	183b      	adds	r3, r7, r0
 80089ca:	881b      	ldrh	r3, [r3, #0]
 80089cc:	0a1b      	lsrs	r3, r3, #8
 80089ce:	b29a      	uxth	r2, r3
 80089d0:	197b      	adds	r3, r7, r5
 80089d2:	881b      	ldrh	r3, [r3, #0]
 80089d4:	b2d1      	uxtb	r1, r2
 80089d6:	4a0b      	ldr	r2, [pc, #44]	@ (8008a04 <Create_Message+0x9c>)
 80089d8:	54d1      	strb	r1, [r2, r3]
    message[crcIndex + 1] = calculatedCRC & 0xFF;
 80089da:	197b      	adds	r3, r7, r5
 80089dc:	881b      	ldrh	r3, [r3, #0]
 80089de:	3301      	adds	r3, #1
 80089e0:	183a      	adds	r2, r7, r0
 80089e2:	8812      	ldrh	r2, [r2, #0]
 80089e4:	b2d1      	uxtb	r1, r2
 80089e6:	4a07      	ldr	r2, [pc, #28]	@ (8008a04 <Create_Message+0x9c>)
 80089e8:	54d1      	strb	r1, [r2, r3]
    CDC_Transmit_FS(message, (crcIndex + 2));
 80089ea:	197b      	adds	r3, r7, r5
 80089ec:	881b      	ldrh	r3, [r3, #0]
 80089ee:	3302      	adds	r3, #2
 80089f0:	b29a      	uxth	r2, r3
 80089f2:	4b04      	ldr	r3, [pc, #16]	@ (8008a04 <Create_Message+0x9c>)
 80089f4:	0011      	movs	r1, r2
 80089f6:	0018      	movs	r0, r3
 80089f8:	f01a fb32 	bl	8023060 <CDC_Transmit_FS>
}
 80089fc:	46c0      	nop			@ (mov r8, r8)
 80089fe:	46bd      	mov	sp, r7
 8008a00:	b005      	add	sp, #20
 8008a02:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008a04:	20000a4c 	.word	0x20000a4c
 8008a08:	20000a4f 	.word	0x20000a4f

08008a0c <CRC16_ARC>:

static uint16_t CRC16_ARC(uint8_t data[], uint16_t size)
{
 8008a0c:	b580      	push	{r7, lr}
 8008a0e:	b086      	sub	sp, #24
 8008a10:	af00      	add	r7, sp, #0
 8008a12:	6078      	str	r0, [r7, #4]
 8008a14:	000a      	movs	r2, r1
 8008a16:	1cbb      	adds	r3, r7, #2
 8008a18:	801a      	strh	r2, [r3, #0]
    uint16_t crc = 0;
 8008a1a:	2316      	movs	r3, #22
 8008a1c:	18fb      	adds	r3, r7, r3
 8008a1e:	2200      	movs	r2, #0
 8008a20:	801a      	strh	r2, [r3, #0]

    for (int i = 0; i < size; i++)
 8008a22:	2300      	movs	r3, #0
 8008a24:	613b      	str	r3, [r7, #16]
 8008a26:	e02e      	b.n	8008a86 <CRC16_ARC+0x7a>
    {
        crc ^= data[i];
 8008a28:	693b      	ldr	r3, [r7, #16]
 8008a2a:	687a      	ldr	r2, [r7, #4]
 8008a2c:	18d3      	adds	r3, r2, r3
 8008a2e:	781b      	ldrb	r3, [r3, #0]
 8008a30:	0019      	movs	r1, r3
 8008a32:	2216      	movs	r2, #22
 8008a34:	18bb      	adds	r3, r7, r2
 8008a36:	18ba      	adds	r2, r7, r2
 8008a38:	8812      	ldrh	r2, [r2, #0]
 8008a3a:	404a      	eors	r2, r1
 8008a3c:	801a      	strh	r2, [r3, #0]
        for (int j = 0; j < 8; j++)
 8008a3e:	2300      	movs	r3, #0
 8008a40:	60fb      	str	r3, [r7, #12]
 8008a42:	e01a      	b.n	8008a7a <CRC16_ARC+0x6e>
        {
            if ((crc & 0x0001) != 0)
 8008a44:	2116      	movs	r1, #22
 8008a46:	187b      	adds	r3, r7, r1
 8008a48:	881b      	ldrh	r3, [r3, #0]
 8008a4a:	2201      	movs	r2, #1
 8008a4c:	4013      	ands	r3, r2
 8008a4e:	d00b      	beq.n	8008a68 <CRC16_ARC+0x5c>
            {
                crc >>= 1;
 8008a50:	187b      	adds	r3, r7, r1
 8008a52:	187a      	adds	r2, r7, r1
 8008a54:	8812      	ldrh	r2, [r2, #0]
 8008a56:	0852      	lsrs	r2, r2, #1
 8008a58:	801a      	strh	r2, [r3, #0]
                crc ^= 0xA001;
 8008a5a:	187b      	adds	r3, r7, r1
 8008a5c:	187a      	adds	r2, r7, r1
 8008a5e:	8812      	ldrh	r2, [r2, #0]
 8008a60:	490f      	ldr	r1, [pc, #60]	@ (8008aa0 <CRC16_ARC+0x94>)
 8008a62:	404a      	eors	r2, r1
 8008a64:	801a      	strh	r2, [r3, #0]
 8008a66:	e005      	b.n	8008a74 <CRC16_ARC+0x68>
            }
            else
            {
                crc >>= 1;
 8008a68:	2216      	movs	r2, #22
 8008a6a:	18bb      	adds	r3, r7, r2
 8008a6c:	18ba      	adds	r2, r7, r2
 8008a6e:	8812      	ldrh	r2, [r2, #0]
 8008a70:	0852      	lsrs	r2, r2, #1
 8008a72:	801a      	strh	r2, [r3, #0]
        for (int j = 0; j < 8; j++)
 8008a74:	68fb      	ldr	r3, [r7, #12]
 8008a76:	3301      	adds	r3, #1
 8008a78:	60fb      	str	r3, [r7, #12]
 8008a7a:	68fb      	ldr	r3, [r7, #12]
 8008a7c:	2b07      	cmp	r3, #7
 8008a7e:	dde1      	ble.n	8008a44 <CRC16_ARC+0x38>
    for (int i = 0; i < size; i++)
 8008a80:	693b      	ldr	r3, [r7, #16]
 8008a82:	3301      	adds	r3, #1
 8008a84:	613b      	str	r3, [r7, #16]
 8008a86:	1cbb      	adds	r3, r7, #2
 8008a88:	881b      	ldrh	r3, [r3, #0]
 8008a8a:	693a      	ldr	r2, [r7, #16]
 8008a8c:	429a      	cmp	r2, r3
 8008a8e:	dbcb      	blt.n	8008a28 <CRC16_ARC+0x1c>
            }
        }
    }
    return crc; 
 8008a90:	2316      	movs	r3, #22
 8008a92:	18fb      	adds	r3, r7, r3
 8008a94:	881b      	ldrh	r3, [r3, #0]
}
 8008a96:	0018      	movs	r0, r3
 8008a98:	46bd      	mov	sp, r7
 8008a9a:	b006      	add	sp, #24
 8008a9c:	bd80      	pop	{r7, pc}
 8008a9e:	46c0      	nop			@ (mov r8, r8)
 8008aa0:	ffffa001 	.word	0xffffa001

08008aa4 <printf_USB>:

void printf_USB(const char* message, ...)
{
 8008aa4:	b40f      	push	{r0, r1, r2, r3}
 8008aa6:	b590      	push	{r4, r7, lr}
 8008aa8:	b0a9      	sub	sp, #164	@ 0xa4
 8008aaa:	af00      	add	r7, sp, #0
  char string[150];
  va_list args;
  va_start(args, message);
 8008aac:	23ac      	movs	r3, #172	@ 0xac
 8008aae:	2108      	movs	r1, #8
 8008ab0:	185b      	adds	r3, r3, r1
 8008ab2:	19db      	adds	r3, r3, r7
 8008ab4:	607b      	str	r3, [r7, #4]
  vsnprintf(string, 150, message, args);
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	22a8      	movs	r2, #168	@ 0xa8
 8008aba:	1852      	adds	r2, r2, r1
 8008abc:	19d2      	adds	r2, r2, r7
 8008abe:	6812      	ldr	r2, [r2, #0]
 8008ac0:	2408      	movs	r4, #8
 8008ac2:	1938      	adds	r0, r7, r4
 8008ac4:	2196      	movs	r1, #150	@ 0x96
 8008ac6:	f01d fc7f 	bl	80263c8 <vsniprintf>
  va_end(args);
  CDC_Transmit_FS((uint8_t*)string, strlen(string));
 8008aca:	193b      	adds	r3, r7, r4
 8008acc:	0018      	movs	r0, r3
 8008ace:	f7f7 fb4d 	bl	800016c <strlen>
 8008ad2:	0003      	movs	r3, r0
 8008ad4:	b29a      	uxth	r2, r3
 8008ad6:	193b      	adds	r3, r7, r4
 8008ad8:	0011      	movs	r1, r2
 8008ada:	0018      	movs	r0, r3
 8008adc:	f01a fac0 	bl	8023060 <CDC_Transmit_FS>
}
 8008ae0:	46c0      	nop			@ (mov r8, r8)
 8008ae2:	46bd      	mov	sp, r7
 8008ae4:	b029      	add	sp, #164	@ 0xa4
 8008ae6:	bc90      	pop	{r4, r7}
 8008ae8:	bc08      	pop	{r3}
 8008aea:	b004      	add	sp, #16
 8008aec:	4718      	bx	r3

08008aee <PC_selectout>:

void PC_selectout(char *msg, bool usb_out) {
 8008aee:	b580      	push	{r7, lr}
 8008af0:	b082      	sub	sp, #8
 8008af2:	af00      	add	r7, sp, #0
 8008af4:	6078      	str	r0, [r7, #4]
 8008af6:	000a      	movs	r2, r1
 8008af8:	1cfb      	adds	r3, r7, #3
 8008afa:	701a      	strb	r2, [r3, #0]
  if (usb_out){
 8008afc:	1cfb      	adds	r3, r7, #3
 8008afe:	781b      	ldrb	r3, [r3, #0]
 8008b00:	2b00      	cmp	r3, #0
 8008b02:	d006      	beq.n	8008b12 <PC_selectout+0x24>
    printf_USB(msg);
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	0018      	movs	r0, r3
 8008b08:	f7ff ffcc 	bl	8008aa4 <printf_USB>
    HAL_Delay(10); //wait for the host poll of the USB buffer
 8008b0c:	200a      	movs	r0, #10
 8008b0e:	f00b ff17 	bl	8014940 <HAL_Delay>
  }
//  else {
    printf(msg);
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	0018      	movs	r0, r3
 8008b16:	f01d fb4b 	bl	80261b0 <iprintf>
//  }
}
 8008b1a:	46c0      	nop			@ (mov r8, r8)
 8008b1c:	46bd      	mov	sp, r7
 8008b1e:	b002      	add	sp, #8
 8008b20:	bd80      	pop	{r7, pc}
	...

08008b24 <PC_show_Keys>:

void PC_show_Keys() {
 8008b24:	b580      	push	{r7, lr}
 8008b26:	af00      	add	r7, sp, #0
  static uint8_t hPaConfig[IdSize];               // 28 was 5
  static uint8_t UptimeConfig[IdSize];            // 29
  static uint8_t URLToUploadConfig[URLToUploadMaxLength]; // 30
  static char Buffer[25];
  static char msg[70];
  if(Check_USB_PowerOn()){
 8008b28:	f001 f876 	bl	8009c18 <Check_USB_PowerOn>
 8008b2c:	1e03      	subs	r3, r0, #0
 8008b2e:	d005      	beq.n	8008b3c <PC_show_Keys+0x18>
    usb_out = true;
 8008b30:	4b01      	ldr	r3, [pc, #4]	@ (8008b38 <PC_show_Keys+0x14>)
 8008b32:	2201      	movs	r2, #1
 8008b34:	701a      	strb	r2, [r3, #0]
 8008b36:	e004      	b.n	8008b42 <PC_show_Keys+0x1e>
 8008b38:	20000b51 	.word	0x20000b51
  }
  else {
    usb_out = false;
 8008b3c:	4bfd      	ldr	r3, [pc, #1012]	@ (8008f34 <PC_show_Keys+0x410>)
 8008b3e:	2200      	movs	r2, #0
 8008b40:	701a      	strb	r2, [r3, #0]
  }
  sprintf(msg, "\r\nOverview of stored keys:\r\n");
 8008b42:	4afd      	ldr	r2, [pc, #1012]	@ (8008f38 <PC_show_Keys+0x414>)
 8008b44:	4bfd      	ldr	r3, [pc, #1012]	@ (8008f3c <PC_show_Keys+0x418>)
 8008b46:	0011      	movs	r1, r2
 8008b48:	0018      	movs	r0, r3
 8008b4a:	f01d fba1 	bl	8026290 <siprintf>
  PC_selectout(&msg[0], usb_out);
 8008b4e:	4bf9      	ldr	r3, [pc, #996]	@ (8008f34 <PC_show_Keys+0x410>)
 8008b50:	781a      	ldrb	r2, [r3, #0]
 8008b52:	4bfa      	ldr	r3, [pc, #1000]	@ (8008f3c <PC_show_Keys+0x418>)
 8008b54:	0011      	movs	r1, r2
 8008b56:	0018      	movs	r0, r3
 8008b58:	f7ff ffc9 	bl	8008aee <PC_selectout>

  ReadUint8ArrayEEprom(BoxConfigAddr, boxConfig, IdSize);
 8008b5c:	4bf8      	ldr	r3, [pc, #992]	@ (8008f40 <PC_show_Keys+0x41c>)
 8008b5e:	48f9      	ldr	r0, [pc, #996]	@ (8008f44 <PC_show_Keys+0x420>)
 8008b60:	220c      	movs	r2, #12
 8008b62:	0019      	movs	r1, r3
 8008b64:	f003 fac8 	bl	800c0f8 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, boxConfig);
 8008b68:	4af5      	ldr	r2, [pc, #980]	@ (8008f40 <PC_show_Keys+0x41c>)
 8008b6a:	4bf7      	ldr	r3, [pc, #988]	@ (8008f48 <PC_show_Keys+0x424>)
 8008b6c:	0011      	movs	r1, r2
 8008b6e:	0018      	movs	r0, r3
 8008b70:	f7fc fc3a 	bl	80053e8 <uint8ArrayToString>
  sprintf(msg, "%02d - Box id ------------------------: %s\r\n", BoxConfigCmd, Buffer);
 8008b74:	4bf4      	ldr	r3, [pc, #976]	@ (8008f48 <PC_show_Keys+0x424>)
 8008b76:	49f5      	ldr	r1, [pc, #980]	@ (8008f4c <PC_show_Keys+0x428>)
 8008b78:	48f0      	ldr	r0, [pc, #960]	@ (8008f3c <PC_show_Keys+0x418>)
 8008b7a:	2200      	movs	r2, #0
 8008b7c:	f01d fb88 	bl	8026290 <siprintf>
  PC_selectout(&msg[0], usb_out);
 8008b80:	4bec      	ldr	r3, [pc, #944]	@ (8008f34 <PC_show_Keys+0x410>)
 8008b82:	781a      	ldrb	r2, [r3, #0]
 8008b84:	4bed      	ldr	r3, [pc, #948]	@ (8008f3c <PC_show_Keys+0x418>)
 8008b86:	0011      	movs	r1, r2
 8008b88:	0018      	movs	r0, r3
 8008b8a:	f7ff ffb0 	bl	8008aee <PC_selectout>

  ReadUint8ArrayEEprom(TempConfigAddr, tempConfig, IdSize);
 8008b8e:	4bf0      	ldr	r3, [pc, #960]	@ (8008f50 <PC_show_Keys+0x42c>)
 8008b90:	48f0      	ldr	r0, [pc, #960]	@ (8008f54 <PC_show_Keys+0x430>)
 8008b92:	220c      	movs	r2, #12
 8008b94:	0019      	movs	r1, r3
 8008b96:	f003 faaf 	bl	800c0f8 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, tempConfig);
 8008b9a:	4aed      	ldr	r2, [pc, #948]	@ (8008f50 <PC_show_Keys+0x42c>)
 8008b9c:	4bea      	ldr	r3, [pc, #936]	@ (8008f48 <PC_show_Keys+0x424>)
 8008b9e:	0011      	movs	r1, r2
 8008ba0:	0018      	movs	r0, r3
 8008ba2:	f7fc fc21 	bl	80053e8 <uint8ArrayToString>
  sprintf(msg, "%02d - Temperature sensor id: --------: %s\r\n", TempConfigCmd, Buffer);
 8008ba6:	4be8      	ldr	r3, [pc, #928]	@ (8008f48 <PC_show_Keys+0x424>)
 8008ba8:	49eb      	ldr	r1, [pc, #940]	@ (8008f58 <PC_show_Keys+0x434>)
 8008baa:	48e4      	ldr	r0, [pc, #912]	@ (8008f3c <PC_show_Keys+0x418>)
 8008bac:	2201      	movs	r2, #1
 8008bae:	f01d fb6f 	bl	8026290 <siprintf>
  PC_selectout(&msg[0], usb_out);
 8008bb2:	4be0      	ldr	r3, [pc, #896]	@ (8008f34 <PC_show_Keys+0x410>)
 8008bb4:	781a      	ldrb	r2, [r3, #0]
 8008bb6:	4be1      	ldr	r3, [pc, #900]	@ (8008f3c <PC_show_Keys+0x418>)
 8008bb8:	0011      	movs	r1, r2
 8008bba:	0018      	movs	r0, r3
 8008bbc:	f7ff ff97 	bl	8008aee <PC_selectout>

  ReadUint8ArrayEEprom(HumidConfigAddr, humidConfig, IdSize);
 8008bc0:	4be6      	ldr	r3, [pc, #920]	@ (8008f5c <PC_show_Keys+0x438>)
 8008bc2:	48e7      	ldr	r0, [pc, #924]	@ (8008f60 <PC_show_Keys+0x43c>)
 8008bc4:	220c      	movs	r2, #12
 8008bc6:	0019      	movs	r1, r3
 8008bc8:	f003 fa96 	bl	800c0f8 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, humidConfig);
 8008bcc:	4ae3      	ldr	r2, [pc, #908]	@ (8008f5c <PC_show_Keys+0x438>)
 8008bce:	4bde      	ldr	r3, [pc, #888]	@ (8008f48 <PC_show_Keys+0x424>)
 8008bd0:	0011      	movs	r1, r2
 8008bd2:	0018      	movs	r0, r3
 8008bd4:	f7fc fc08 	bl	80053e8 <uint8ArrayToString>
  sprintf(msg, "%02d - Humidity sensor id ------------: %s\r\n", HumidConfigCmd, Buffer);
 8008bd8:	4bdb      	ldr	r3, [pc, #876]	@ (8008f48 <PC_show_Keys+0x424>)
 8008bda:	49e2      	ldr	r1, [pc, #904]	@ (8008f64 <PC_show_Keys+0x440>)
 8008bdc:	48d7      	ldr	r0, [pc, #860]	@ (8008f3c <PC_show_Keys+0x418>)
 8008bde:	2202      	movs	r2, #2
 8008be0:	f01d fb56 	bl	8026290 <siprintf>
  PC_selectout(&msg[0], usb_out);
 8008be4:	4bd3      	ldr	r3, [pc, #844]	@ (8008f34 <PC_show_Keys+0x410>)
 8008be6:	781a      	ldrb	r2, [r3, #0]
 8008be8:	4bd4      	ldr	r3, [pc, #848]	@ (8008f3c <PC_show_Keys+0x418>)
 8008bea:	0011      	movs	r1, r2
 8008bec:	0018      	movs	r0, r3
 8008bee:	f7ff ff7e 	bl	8008aee <PC_selectout>

  ReadUint8ArrayEEprom(NOxIndexConfigAddr, noxConfig, IdSize);
 8008bf2:	4bdd      	ldr	r3, [pc, #884]	@ (8008f68 <PC_show_Keys+0x444>)
 8008bf4:	48dd      	ldr	r0, [pc, #884]	@ (8008f6c <PC_show_Keys+0x448>)
 8008bf6:	220c      	movs	r2, #12
 8008bf8:	0019      	movs	r1, r3
 8008bfa:	f003 fa7d 	bl	800c0f8 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, noxConfig);
 8008bfe:	4ada      	ldr	r2, [pc, #872]	@ (8008f68 <PC_show_Keys+0x444>)
 8008c00:	4bd1      	ldr	r3, [pc, #836]	@ (8008f48 <PC_show_Keys+0x424>)
 8008c02:	0011      	movs	r1, r2
 8008c04:	0018      	movs	r0, r3
 8008c06:	f7fc fbef 	bl	80053e8 <uint8ArrayToString>
  sprintf(msg, "%02d - NOx sensor id -----------------: %s\r\n", NOxIndexConfigCmd, Buffer);
 8008c0a:	4bcf      	ldr	r3, [pc, #828]	@ (8008f48 <PC_show_Keys+0x424>)
 8008c0c:	49d8      	ldr	r1, [pc, #864]	@ (8008f70 <PC_show_Keys+0x44c>)
 8008c0e:	48cb      	ldr	r0, [pc, #812]	@ (8008f3c <PC_show_Keys+0x418>)
 8008c10:	2203      	movs	r2, #3
 8008c12:	f01d fb3d 	bl	8026290 <siprintf>
  PC_selectout(&msg[0], usb_out);
 8008c16:	4bc7      	ldr	r3, [pc, #796]	@ (8008f34 <PC_show_Keys+0x410>)
 8008c18:	781a      	ldrb	r2, [r3, #0]
 8008c1a:	4bc8      	ldr	r3, [pc, #800]	@ (8008f3c <PC_show_Keys+0x418>)
 8008c1c:	0011      	movs	r1, r2
 8008c1e:	0018      	movs	r0, r3
 8008c20:	f7ff ff65 	bl	8008aee <PC_selectout>

  ReadUint8ArrayEEprom(VocIndexConfigAddr, vocConfig, IdSize);
 8008c24:	4bd3      	ldr	r3, [pc, #844]	@ (8008f74 <PC_show_Keys+0x450>)
 8008c26:	48d4      	ldr	r0, [pc, #848]	@ (8008f78 <PC_show_Keys+0x454>)
 8008c28:	220c      	movs	r2, #12
 8008c2a:	0019      	movs	r1, r3
 8008c2c:	f003 fa64 	bl	800c0f8 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, vocConfig);
 8008c30:	4ad0      	ldr	r2, [pc, #832]	@ (8008f74 <PC_show_Keys+0x450>)
 8008c32:	4bc5      	ldr	r3, [pc, #788]	@ (8008f48 <PC_show_Keys+0x424>)
 8008c34:	0011      	movs	r1, r2
 8008c36:	0018      	movs	r0, r3
 8008c38:	f7fc fbd6 	bl	80053e8 <uint8ArrayToString>
  sprintf(msg, "%02d - VOC sensor id -----------------: %s\r\n", VocIndexConfigCmd, Buffer);
 8008c3c:	4bc2      	ldr	r3, [pc, #776]	@ (8008f48 <PC_show_Keys+0x424>)
 8008c3e:	49cf      	ldr	r1, [pc, #828]	@ (8008f7c <PC_show_Keys+0x458>)
 8008c40:	48be      	ldr	r0, [pc, #760]	@ (8008f3c <PC_show_Keys+0x418>)
 8008c42:	2204      	movs	r2, #4
 8008c44:	f01d fb24 	bl	8026290 <siprintf>
  PC_selectout(&msg[0], usb_out);
 8008c48:	4bba      	ldr	r3, [pc, #744]	@ (8008f34 <PC_show_Keys+0x410>)
 8008c4a:	781a      	ldrb	r2, [r3, #0]
 8008c4c:	4bbb      	ldr	r3, [pc, #748]	@ (8008f3c <PC_show_Keys+0x418>)
 8008c4e:	0011      	movs	r1, r2
 8008c50:	0018      	movs	r0, r3
 8008c52:	f7ff ff4c 	bl	8008aee <PC_selectout>

  ReadUint8ArrayEEprom(dBAConfigAddr, soundConfig, IdSize);
 8008c56:	4bca      	ldr	r3, [pc, #808]	@ (8008f80 <PC_show_Keys+0x45c>)
 8008c58:	48ca      	ldr	r0, [pc, #808]	@ (8008f84 <PC_show_Keys+0x460>)
 8008c5a:	220c      	movs	r2, #12
 8008c5c:	0019      	movs	r1, r3
 8008c5e:	f003 fa4b 	bl	800c0f8 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, soundConfig);
 8008c62:	4ac7      	ldr	r2, [pc, #796]	@ (8008f80 <PC_show_Keys+0x45c>)
 8008c64:	4bb8      	ldr	r3, [pc, #736]	@ (8008f48 <PC_show_Keys+0x424>)
 8008c66:	0011      	movs	r1, r2
 8008c68:	0018      	movs	r0, r3
 8008c6a:	f7fc fbbd 	bl	80053e8 <uint8ArrayToString>
  sprintf(msg, "%02d - dBA sensor id -----------------: %s\r\n", dBAConfigCmd, Buffer);
 8008c6e:	4bb6      	ldr	r3, [pc, #728]	@ (8008f48 <PC_show_Keys+0x424>)
 8008c70:	49c5      	ldr	r1, [pc, #788]	@ (8008f88 <PC_show_Keys+0x464>)
 8008c72:	48b2      	ldr	r0, [pc, #712]	@ (8008f3c <PC_show_Keys+0x418>)
 8008c74:	2205      	movs	r2, #5
 8008c76:	f01d fb0b 	bl	8026290 <siprintf>
  PC_selectout(&msg[0], usb_out);
 8008c7a:	4bae      	ldr	r3, [pc, #696]	@ (8008f34 <PC_show_Keys+0x410>)
 8008c7c:	781a      	ldrb	r2, [r3, #0]
 8008c7e:	4baf      	ldr	r3, [pc, #700]	@ (8008f3c <PC_show_Keys+0x418>)
 8008c80:	0011      	movs	r1, r2
 8008c82:	0018      	movs	r0, r3
 8008c84:	f7ff ff33 	bl	8008aee <PC_selectout>

  ReadUint8ArrayEEprom(dBcConfigAddr, dBcConfig, IdSize);
 8008c88:	4bc0      	ldr	r3, [pc, #768]	@ (8008f8c <PC_show_Keys+0x468>)
 8008c8a:	48c1      	ldr	r0, [pc, #772]	@ (8008f90 <PC_show_Keys+0x46c>)
 8008c8c:	220c      	movs	r2, #12
 8008c8e:	0019      	movs	r1, r3
 8008c90:	f003 fa32 	bl	800c0f8 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, dBcConfig);
 8008c94:	4abd      	ldr	r2, [pc, #756]	@ (8008f8c <PC_show_Keys+0x468>)
 8008c96:	4bac      	ldr	r3, [pc, #688]	@ (8008f48 <PC_show_Keys+0x424>)
 8008c98:	0011      	movs	r1, r2
 8008c9a:	0018      	movs	r0, r3
 8008c9c:	f7fc fba4 	bl	80053e8 <uint8ArrayToString>
  sprintf(msg, "%02d - Sound dBc sensor id -----------: %s\r\n", dBcConfigCmd, Buffer);
 8008ca0:	4ba9      	ldr	r3, [pc, #676]	@ (8008f48 <PC_show_Keys+0x424>)
 8008ca2:	49bc      	ldr	r1, [pc, #752]	@ (8008f94 <PC_show_Keys+0x470>)
 8008ca4:	48a5      	ldr	r0, [pc, #660]	@ (8008f3c <PC_show_Keys+0x418>)
 8008ca6:	2206      	movs	r2, #6
 8008ca8:	f01d faf2 	bl	8026290 <siprintf>
  PC_selectout(&msg[0], usb_out);
 8008cac:	4ba1      	ldr	r3, [pc, #644]	@ (8008f34 <PC_show_Keys+0x410>)
 8008cae:	781a      	ldrb	r2, [r3, #0]
 8008cb0:	4ba2      	ldr	r3, [pc, #648]	@ (8008f3c <PC_show_Keys+0x418>)
 8008cb2:	0011      	movs	r1, r2
 8008cb4:	0018      	movs	r0, r3
 8008cb6:	f7ff ff1a 	bl	8008aee <PC_selectout>

  ReadUint8ArrayEEprom(PM2ConfigAddr, PM2Config, IdSize);
 8008cba:	4bb7      	ldr	r3, [pc, #732]	@ (8008f98 <PC_show_Keys+0x474>)
 8008cbc:	48b7      	ldr	r0, [pc, #732]	@ (8008f9c <PC_show_Keys+0x478>)
 8008cbe:	220c      	movs	r2, #12
 8008cc0:	0019      	movs	r1, r3
 8008cc2:	f003 fa19 	bl	800c0f8 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, PM2Config);
 8008cc6:	4ab4      	ldr	r2, [pc, #720]	@ (8008f98 <PC_show_Keys+0x474>)
 8008cc8:	4b9f      	ldr	r3, [pc, #636]	@ (8008f48 <PC_show_Keys+0x424>)
 8008cca:	0011      	movs	r1, r2
 8008ccc:	0018      	movs	r0, r3
 8008cce:	f7fc fb8b 	bl	80053e8 <uint8ArrayToString>
  sprintf(msg, "%02d - PM2p5 sensor id ---------------: %s\r\n", PM2ConfigCmd, Buffer);
 8008cd2:	4b9d      	ldr	r3, [pc, #628]	@ (8008f48 <PC_show_Keys+0x424>)
 8008cd4:	49b2      	ldr	r1, [pc, #712]	@ (8008fa0 <PC_show_Keys+0x47c>)
 8008cd6:	4899      	ldr	r0, [pc, #612]	@ (8008f3c <PC_show_Keys+0x418>)
 8008cd8:	2207      	movs	r2, #7
 8008cda:	f01d fad9 	bl	8026290 <siprintf>
  PC_selectout(&msg[0], usb_out);
 8008cde:	4b95      	ldr	r3, [pc, #596]	@ (8008f34 <PC_show_Keys+0x410>)
 8008ce0:	781a      	ldrb	r2, [r3, #0]
 8008ce2:	4b96      	ldr	r3, [pc, #600]	@ (8008f3c <PC_show_Keys+0x418>)
 8008ce4:	0011      	movs	r1, r2
 8008ce6:	0018      	movs	r0, r3
 8008ce8:	f7ff ff01 	bl	8008aee <PC_selectout>

  ReadUint8ArrayEEprom(PM10ConfigAddr, PM10Config, IdSize);
 8008cec:	4bad      	ldr	r3, [pc, #692]	@ (8008fa4 <PC_show_Keys+0x480>)
 8008cee:	48ae      	ldr	r0, [pc, #696]	@ (8008fa8 <PC_show_Keys+0x484>)
 8008cf0:	220c      	movs	r2, #12
 8008cf2:	0019      	movs	r1, r3
 8008cf4:	f003 fa00 	bl	800c0f8 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, PM10Config);
 8008cf8:	4aaa      	ldr	r2, [pc, #680]	@ (8008fa4 <PC_show_Keys+0x480>)
 8008cfa:	4b93      	ldr	r3, [pc, #588]	@ (8008f48 <PC_show_Keys+0x424>)
 8008cfc:	0011      	movs	r1, r2
 8008cfe:	0018      	movs	r0, r3
 8008d00:	f7fc fb72 	bl	80053e8 <uint8ArrayToString>
  sprintf(msg, "%02d - PM10 sensor id ----------------: %s\r\n", PM10ConfigCmd, Buffer);
 8008d04:	4b90      	ldr	r3, [pc, #576]	@ (8008f48 <PC_show_Keys+0x424>)
 8008d06:	49a9      	ldr	r1, [pc, #676]	@ (8008fac <PC_show_Keys+0x488>)
 8008d08:	488c      	ldr	r0, [pc, #560]	@ (8008f3c <PC_show_Keys+0x418>)
 8008d0a:	2208      	movs	r2, #8
 8008d0c:	f01d fac0 	bl	8026290 <siprintf>
  PC_selectout(&msg[0], usb_out);
 8008d10:	4b88      	ldr	r3, [pc, #544]	@ (8008f34 <PC_show_Keys+0x410>)
 8008d12:	781a      	ldrb	r2, [r3, #0]
 8008d14:	4b89      	ldr	r3, [pc, #548]	@ (8008f3c <PC_show_Keys+0x418>)
 8008d16:	0011      	movs	r1, r2
 8008d18:	0018      	movs	r0, r3
 8008d1a:	f7ff fee8 	bl	8008aee <PC_selectout>

  ReadUint8ArrayEEprom(BatVoltConfigAddr, batteryConfig, IdSize);
 8008d1e:	4ba4      	ldr	r3, [pc, #656]	@ (8008fb0 <PC_show_Keys+0x48c>)
 8008d20:	48a4      	ldr	r0, [pc, #656]	@ (8008fb4 <PC_show_Keys+0x490>)
 8008d22:	220c      	movs	r2, #12
 8008d24:	0019      	movs	r1, r3
 8008d26:	f003 f9e7 	bl	800c0f8 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, batteryConfig);
 8008d2a:	4aa1      	ldr	r2, [pc, #644]	@ (8008fb0 <PC_show_Keys+0x48c>)
 8008d2c:	4b86      	ldr	r3, [pc, #536]	@ (8008f48 <PC_show_Keys+0x424>)
 8008d2e:	0011      	movs	r1, r2
 8008d30:	0018      	movs	r0, r3
 8008d32:	f7fc fb59 	bl	80053e8 <uint8ArrayToString>
  sprintf(msg, "%02d - Battery voltage sensor id -----: %s\r\n", BatVoltConfigCmd, Buffer);
 8008d36:	4b84      	ldr	r3, [pc, #528]	@ (8008f48 <PC_show_Keys+0x424>)
 8008d38:	499f      	ldr	r1, [pc, #636]	@ (8008fb8 <PC_show_Keys+0x494>)
 8008d3a:	4880      	ldr	r0, [pc, #512]	@ (8008f3c <PC_show_Keys+0x418>)
 8008d3c:	2209      	movs	r2, #9
 8008d3e:	f01d faa7 	bl	8026290 <siprintf>
  PC_selectout(&msg[0], usb_out);
 8008d42:	4b7c      	ldr	r3, [pc, #496]	@ (8008f34 <PC_show_Keys+0x410>)
 8008d44:	781a      	ldrb	r2, [r3, #0]
 8008d46:	4b7d      	ldr	r3, [pc, #500]	@ (8008f3c <PC_show_Keys+0x418>)
 8008d48:	0011      	movs	r1, r2
 8008d4a:	0018      	movs	r0, r3
 8008d4c:	f7ff fecf 	bl	8008aee <PC_selectout>

  ReadUint8ArrayEEprom(SolVoltConfigAddr, solarConfig, IdSize);
 8008d50:	4b9a      	ldr	r3, [pc, #616]	@ (8008fbc <PC_show_Keys+0x498>)
 8008d52:	489b      	ldr	r0, [pc, #620]	@ (8008fc0 <PC_show_Keys+0x49c>)
 8008d54:	220c      	movs	r2, #12
 8008d56:	0019      	movs	r1, r3
 8008d58:	f003 f9ce 	bl	800c0f8 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, solarConfig);
 8008d5c:	4a97      	ldr	r2, [pc, #604]	@ (8008fbc <PC_show_Keys+0x498>)
 8008d5e:	4b7a      	ldr	r3, [pc, #488]	@ (8008f48 <PC_show_Keys+0x424>)
 8008d60:	0011      	movs	r1, r2
 8008d62:	0018      	movs	r0, r3
 8008d64:	f7fc fb40 	bl	80053e8 <uint8ArrayToString>
  sprintf(msg, "%02d - Solar voltage sensor id -------: %s\r\n", SolVoltConfigCmd, Buffer);
 8008d68:	4b77      	ldr	r3, [pc, #476]	@ (8008f48 <PC_show_Keys+0x424>)
 8008d6a:	4996      	ldr	r1, [pc, #600]	@ (8008fc4 <PC_show_Keys+0x4a0>)
 8008d6c:	4873      	ldr	r0, [pc, #460]	@ (8008f3c <PC_show_Keys+0x418>)
 8008d6e:	220a      	movs	r2, #10
 8008d70:	f01d fa8e 	bl	8026290 <siprintf>
  PC_selectout(&msg[0], usb_out);
 8008d74:	4b6f      	ldr	r3, [pc, #444]	@ (8008f34 <PC_show_Keys+0x410>)
 8008d76:	781a      	ldrb	r2, [r3, #0]
 8008d78:	4b70      	ldr	r3, [pc, #448]	@ (8008f3c <PC_show_Keys+0x418>)
 8008d7a:	0011      	movs	r1, r2
 8008d7c:	0018      	movs	r0, r3
 8008d7e:	f7ff feb6 	bl	8008aee <PC_selectout>

  ReadUint8ArrayEEprom(ChargerStatConfigAddr, ChargerStatConfig, IdSize);
 8008d82:	4b91      	ldr	r3, [pc, #580]	@ (8008fc8 <PC_show_Keys+0x4a4>)
 8008d84:	4891      	ldr	r0, [pc, #580]	@ (8008fcc <PC_show_Keys+0x4a8>)
 8008d86:	220c      	movs	r2, #12
 8008d88:	0019      	movs	r1, r3
 8008d8a:	f003 f9b5 	bl	800c0f8 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, ChargerStatConfig);
 8008d8e:	4a8e      	ldr	r2, [pc, #568]	@ (8008fc8 <PC_show_Keys+0x4a4>)
 8008d90:	4b6d      	ldr	r3, [pc, #436]	@ (8008f48 <PC_show_Keys+0x424>)
 8008d92:	0011      	movs	r1, r2
 8008d94:	0018      	movs	r0, r3
 8008d96:	f7fc fb27 	bl	80053e8 <uint8ArrayToString>
  sprintf(msg, "%02d - Charger status ----------------: %s\r\n", ChargerStatConfigCmd, Buffer);
 8008d9a:	4b6b      	ldr	r3, [pc, #428]	@ (8008f48 <PC_show_Keys+0x424>)
 8008d9c:	498c      	ldr	r1, [pc, #560]	@ (8008fd0 <PC_show_Keys+0x4ac>)
 8008d9e:	4867      	ldr	r0, [pc, #412]	@ (8008f3c <PC_show_Keys+0x418>)
 8008da0:	220b      	movs	r2, #11
 8008da2:	f01d fa75 	bl	8026290 <siprintf>
  PC_selectout(&msg[0], usb_out);
 8008da6:	4b63      	ldr	r3, [pc, #396]	@ (8008f34 <PC_show_Keys+0x410>)
 8008da8:	781a      	ldrb	r2, [r3, #0]
 8008daa:	4b64      	ldr	r3, [pc, #400]	@ (8008f3c <PC_show_Keys+0x418>)
 8008dac:	0011      	movs	r1, r2
 8008dae:	0018      	movs	r0, r3
 8008db0:	f7ff fe9d 	bl	8008aee <PC_selectout>

  ReadUint8ArrayEEprom(CustomNameConfigAddr, nameConfig, CustomNameMaxLength);
 8008db4:	4b87      	ldr	r3, [pc, #540]	@ (8008fd4 <PC_show_Keys+0x4b0>)
 8008db6:	4888      	ldr	r0, [pc, #544]	@ (8008fd8 <PC_show_Keys+0x4b4>)
 8008db8:	2220      	movs	r2, #32
 8008dba:	0019      	movs	r1, r3
 8008dbc:	f003 f99c 	bl	800c0f8 <ReadUint8ArrayEEprom>
  sprintf(msg, "%02d - Box name ---max 12 char--------: ", CustomNameConfigCmd);
 8008dc0:	4986      	ldr	r1, [pc, #536]	@ (8008fdc <PC_show_Keys+0x4b8>)
 8008dc2:	4b5e      	ldr	r3, [pc, #376]	@ (8008f3c <PC_show_Keys+0x418>)
 8008dc4:	220c      	movs	r2, #12
 8008dc6:	0018      	movs	r0, r3
 8008dc8:	f01d fa62 	bl	8026290 <siprintf>
  PC_selectout(&msg[0], usb_out);
 8008dcc:	4b59      	ldr	r3, [pc, #356]	@ (8008f34 <PC_show_Keys+0x410>)
 8008dce:	781a      	ldrb	r2, [r3, #0]
 8008dd0:	4b5a      	ldr	r3, [pc, #360]	@ (8008f3c <PC_show_Keys+0x418>)
 8008dd2:	0011      	movs	r1, r2
 8008dd4:	0018      	movs	r0, r3
 8008dd6:	f7ff fe8a 	bl	8008aee <PC_selectout>
  sprintf(msg, "%s\r\n", (char*)nameConfig);  // probably too long to held in same buffer
 8008dda:	4a7e      	ldr	r2, [pc, #504]	@ (8008fd4 <PC_show_Keys+0x4b0>)
 8008ddc:	4980      	ldr	r1, [pc, #512]	@ (8008fe0 <PC_show_Keys+0x4bc>)
 8008dde:	4b57      	ldr	r3, [pc, #348]	@ (8008f3c <PC_show_Keys+0x418>)
 8008de0:	0018      	movs	r0, r3
 8008de2:	f01d fa55 	bl	8026290 <siprintf>
  PC_selectout(&msg[0], usb_out);
 8008de6:	4b53      	ldr	r3, [pc, #332]	@ (8008f34 <PC_show_Keys+0x410>)
 8008de8:	781a      	ldrb	r2, [r3, #0]
 8008dea:	4b54      	ldr	r3, [pc, #336]	@ (8008f3c <PC_show_Keys+0x418>)
 8008dec:	0011      	movs	r1, r2
 8008dee:	0018      	movs	r0, r3
 8008df0:	f7ff fe7d 	bl	8008aee <PC_selectout>

  ReadUint8ArrayEEprom(SSIDConfigAddr, SSIDConfig, SSIDMaxLength);
 8008df4:	4b7b      	ldr	r3, [pc, #492]	@ (8008fe4 <PC_show_Keys+0x4c0>)
 8008df6:	487c      	ldr	r0, [pc, #496]	@ (8008fe8 <PC_show_Keys+0x4c4>)
 8008df8:	2220      	movs	r2, #32
 8008dfa:	0019      	movs	r1, r3
 8008dfc:	f003 f97c 	bl	800c0f8 <ReadUint8ArrayEEprom>
//  uint8ArrayToString(Buffer, SSIDConfig);
  sprintf(msg, "%02d - SSID name ---------------------: ", SSIDConfigCmd);
 8008e00:	497a      	ldr	r1, [pc, #488]	@ (8008fec <PC_show_Keys+0x4c8>)
 8008e02:	4b4e      	ldr	r3, [pc, #312]	@ (8008f3c <PC_show_Keys+0x418>)
 8008e04:	220d      	movs	r2, #13
 8008e06:	0018      	movs	r0, r3
 8008e08:	f01d fa42 	bl	8026290 <siprintf>
  PC_selectout(&msg[0], usb_out);
 8008e0c:	4b49      	ldr	r3, [pc, #292]	@ (8008f34 <PC_show_Keys+0x410>)
 8008e0e:	781a      	ldrb	r2, [r3, #0]
 8008e10:	4b4a      	ldr	r3, [pc, #296]	@ (8008f3c <PC_show_Keys+0x418>)
 8008e12:	0011      	movs	r1, r2
 8008e14:	0018      	movs	r0, r3
 8008e16:	f7ff fe6a 	bl	8008aee <PC_selectout>
  sprintf(msg, "%s\r\n", (char*)SSIDConfig);  // probably too long to held in same buffer
 8008e1a:	4a72      	ldr	r2, [pc, #456]	@ (8008fe4 <PC_show_Keys+0x4c0>)
 8008e1c:	4970      	ldr	r1, [pc, #448]	@ (8008fe0 <PC_show_Keys+0x4bc>)
 8008e1e:	4b47      	ldr	r3, [pc, #284]	@ (8008f3c <PC_show_Keys+0x418>)
 8008e20:	0018      	movs	r0, r3
 8008e22:	f01d fa35 	bl	8026290 <siprintf>
  PC_selectout(&msg[0], usb_out);
 8008e26:	4b43      	ldr	r3, [pc, #268]	@ (8008f34 <PC_show_Keys+0x410>)
 8008e28:	781a      	ldrb	r2, [r3, #0]
 8008e2a:	4b44      	ldr	r3, [pc, #272]	@ (8008f3c <PC_show_Keys+0x418>)
 8008e2c:	0011      	movs	r1, r2
 8008e2e:	0018      	movs	r0, r3
 8008e30:	f7ff fe5d 	bl	8008aee <PC_selectout>

  ReadUint8ArrayEEprom(pwdConfigAddr, pwdConfig, pwdMaxLength);
 8008e34:	4b6e      	ldr	r3, [pc, #440]	@ (8008ff0 <PC_show_Keys+0x4cc>)
 8008e36:	486f      	ldr	r0, [pc, #444]	@ (8008ff4 <PC_show_Keys+0x4d0>)
 8008e38:	2240      	movs	r2, #64	@ 0x40
 8008e3a:	0019      	movs	r1, r3
 8008e3c:	f003 f95c 	bl	800c0f8 <ReadUint8ArrayEEprom>
//  uint8ArrayToString(Buffer, pwdConfig);
  sprintf(msg, "%02d - WiFi password -----------------: ", PasswordConfigCmd);
 8008e40:	496d      	ldr	r1, [pc, #436]	@ (8008ff8 <PC_show_Keys+0x4d4>)
 8008e42:	4b3e      	ldr	r3, [pc, #248]	@ (8008f3c <PC_show_Keys+0x418>)
 8008e44:	220e      	movs	r2, #14
 8008e46:	0018      	movs	r0, r3
 8008e48:	f01d fa22 	bl	8026290 <siprintf>
  PC_selectout(&msg[0], usb_out);
 8008e4c:	4b39      	ldr	r3, [pc, #228]	@ (8008f34 <PC_show_Keys+0x410>)
 8008e4e:	781a      	ldrb	r2, [r3, #0]
 8008e50:	4b3a      	ldr	r3, [pc, #232]	@ (8008f3c <PC_show_Keys+0x418>)
 8008e52:	0011      	movs	r1, r2
 8008e54:	0018      	movs	r0, r3
 8008e56:	f7ff fe4a 	bl	8008aee <PC_selectout>
  sprintf(msg, "%s\r\n", (char*)pwdConfig);  // probably too long to held in same buffer
 8008e5a:	4a65      	ldr	r2, [pc, #404]	@ (8008ff0 <PC_show_Keys+0x4cc>)
 8008e5c:	4960      	ldr	r1, [pc, #384]	@ (8008fe0 <PC_show_Keys+0x4bc>)
 8008e5e:	4b37      	ldr	r3, [pc, #220]	@ (8008f3c <PC_show_Keys+0x418>)
 8008e60:	0018      	movs	r0, r3
 8008e62:	f01d fa15 	bl	8026290 <siprintf>
  PC_selectout(&msg[0], usb_out);
 8008e66:	4b33      	ldr	r3, [pc, #204]	@ (8008f34 <PC_show_Keys+0x410>)
 8008e68:	781a      	ldrb	r2, [r3, #0]
 8008e6a:	4b34      	ldr	r3, [pc, #208]	@ (8008f3c <PC_show_Keys+0x418>)
 8008e6c:	0011      	movs	r1, r2
 8008e6e:	0018      	movs	r0, r3
 8008e70:	f7ff fe3d 	bl	8008aee <PC_selectout>

  ReadUint8ArrayEEprom(AHTTempConfigAddr, AHTTempConfig, IdSize);
 8008e74:	4b61      	ldr	r3, [pc, #388]	@ (8008ffc <PC_show_Keys+0x4d8>)
 8008e76:	4862      	ldr	r0, [pc, #392]	@ (8009000 <PC_show_Keys+0x4dc>)
 8008e78:	220c      	movs	r2, #12
 8008e7a:	0019      	movs	r1, r3
 8008e7c:	f003 f93c 	bl	800c0f8 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, AHTTempConfig);
 8008e80:	4a5e      	ldr	r2, [pc, #376]	@ (8008ffc <PC_show_Keys+0x4d8>)
 8008e82:	4b31      	ldr	r3, [pc, #196]	@ (8008f48 <PC_show_Keys+0x424>)
 8008e84:	0011      	movs	r1, r2
 8008e86:	0018      	movs	r0, r3
 8008e88:	f7fc faae 	bl	80053e8 <uint8ArrayToString>
  sprintf(msg, "%02d - AHT2x Temperature sensor id ---: %s\r\n", AHTTempConfigCmd, Buffer);
 8008e8c:	4b2e      	ldr	r3, [pc, #184]	@ (8008f48 <PC_show_Keys+0x424>)
 8008e8e:	495d      	ldr	r1, [pc, #372]	@ (8009004 <PC_show_Keys+0x4e0>)
 8008e90:	482a      	ldr	r0, [pc, #168]	@ (8008f3c <PC_show_Keys+0x418>)
 8008e92:	220f      	movs	r2, #15
 8008e94:	f01d f9fc 	bl	8026290 <siprintf>
  PC_selectout(&msg[0], usb_out);
 8008e98:	4b26      	ldr	r3, [pc, #152]	@ (8008f34 <PC_show_Keys+0x410>)
 8008e9a:	781a      	ldrb	r2, [r3, #0]
 8008e9c:	4b27      	ldr	r3, [pc, #156]	@ (8008f3c <PC_show_Keys+0x418>)
 8008e9e:	0011      	movs	r1, r2
 8008ea0:	0018      	movs	r0, r3
 8008ea2:	f7ff fe24 	bl	8008aee <PC_selectout>

  ReadUint8ArrayEEprom(AHTHumidConfigAddr, AHTHumidConfig, IdSize);
 8008ea6:	4b58      	ldr	r3, [pc, #352]	@ (8009008 <PC_show_Keys+0x4e4>)
 8008ea8:	4858      	ldr	r0, [pc, #352]	@ (800900c <PC_show_Keys+0x4e8>)
 8008eaa:	220c      	movs	r2, #12
 8008eac:	0019      	movs	r1, r3
 8008eae:	f003 f923 	bl	800c0f8 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, AHTHumidConfig);
 8008eb2:	4a55      	ldr	r2, [pc, #340]	@ (8009008 <PC_show_Keys+0x4e4>)
 8008eb4:	4b24      	ldr	r3, [pc, #144]	@ (8008f48 <PC_show_Keys+0x424>)
 8008eb6:	0011      	movs	r1, r2
 8008eb8:	0018      	movs	r0, r3
 8008eba:	f7fc fa95 	bl	80053e8 <uint8ArrayToString>
  sprintf(msg, "%02d - AHT2x Humidity sensor id ------: %s\r\n", AHTHumidConfigCmd, Buffer);
 8008ebe:	4b22      	ldr	r3, [pc, #136]	@ (8008f48 <PC_show_Keys+0x424>)
 8008ec0:	4953      	ldr	r1, [pc, #332]	@ (8009010 <PC_show_Keys+0x4ec>)
 8008ec2:	481e      	ldr	r0, [pc, #120]	@ (8008f3c <PC_show_Keys+0x418>)
 8008ec4:	2210      	movs	r2, #16
 8008ec6:	f01d f9e3 	bl	8026290 <siprintf>
  PC_selectout(&msg[0], usb_out);
 8008eca:	4b1a      	ldr	r3, [pc, #104]	@ (8008f34 <PC_show_Keys+0x410>)
 8008ecc:	781a      	ldrb	r2, [r3, #0]
 8008ece:	4b1b      	ldr	r3, [pc, #108]	@ (8008f3c <PC_show_Keys+0x418>)
 8008ed0:	0011      	movs	r1, r2
 8008ed2:	0018      	movs	r0, r3
 8008ed4:	f7ff fe0b 	bl	8008aee <PC_selectout>

  ReadUint8ArrayEEprom(BMPTempConfigAddr, BMPTempConfig, IdSize);
 8008ed8:	4b4e      	ldr	r3, [pc, #312]	@ (8009014 <PC_show_Keys+0x4f0>)
 8008eda:	484f      	ldr	r0, [pc, #316]	@ (8009018 <PC_show_Keys+0x4f4>)
 8008edc:	220c      	movs	r2, #12
 8008ede:	0019      	movs	r1, r3
 8008ee0:	f003 f90a 	bl	800c0f8 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, BMPTempConfig);
 8008ee4:	4a4b      	ldr	r2, [pc, #300]	@ (8009014 <PC_show_Keys+0x4f0>)
 8008ee6:	4b18      	ldr	r3, [pc, #96]	@ (8008f48 <PC_show_Keys+0x424>)
 8008ee8:	0011      	movs	r1, r2
 8008eea:	0018      	movs	r0, r3
 8008eec:	f7fc fa7c 	bl	80053e8 <uint8ArrayToString>
  sprintf(msg, "%02d - BMP280 Temperature sensor id --: %s\r\n", BMPTempConfigCmd, Buffer);
 8008ef0:	4b15      	ldr	r3, [pc, #84]	@ (8008f48 <PC_show_Keys+0x424>)
 8008ef2:	494a      	ldr	r1, [pc, #296]	@ (800901c <PC_show_Keys+0x4f8>)
 8008ef4:	4811      	ldr	r0, [pc, #68]	@ (8008f3c <PC_show_Keys+0x418>)
 8008ef6:	2211      	movs	r2, #17
 8008ef8:	f01d f9ca 	bl	8026290 <siprintf>
  PC_selectout(&msg[0], usb_out);
 8008efc:	4b0d      	ldr	r3, [pc, #52]	@ (8008f34 <PC_show_Keys+0x410>)
 8008efe:	781a      	ldrb	r2, [r3, #0]
 8008f00:	4b0e      	ldr	r3, [pc, #56]	@ (8008f3c <PC_show_Keys+0x418>)
 8008f02:	0011      	movs	r1, r2
 8008f04:	0018      	movs	r0, r3
 8008f06:	f7ff fdf2 	bl	8008aee <PC_selectout>

  ReadUint8ArrayEEprom(ENSAQIConfigAddr, ENSAQIConfig, IdSize);
 8008f0a:	4b45      	ldr	r3, [pc, #276]	@ (8009020 <PC_show_Keys+0x4fc>)
 8008f0c:	4845      	ldr	r0, [pc, #276]	@ (8009024 <PC_show_Keys+0x500>)
 8008f0e:	220c      	movs	r2, #12
 8008f10:	0019      	movs	r1, r3
 8008f12:	f003 f8f1 	bl	800c0f8 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, ENSAQIConfig);
 8008f16:	4a42      	ldr	r2, [pc, #264]	@ (8009020 <PC_show_Keys+0x4fc>)
 8008f18:	4b0b      	ldr	r3, [pc, #44]	@ (8008f48 <PC_show_Keys+0x424>)
 8008f1a:	0011      	movs	r1, r2
 8008f1c:	0018      	movs	r0, r3
 8008f1e:	f7fc fa63 	bl	80053e8 <uint8ArrayToString>
  sprintf(msg, "%02d - ENS160 AQI sensor id ----------: %s\r\n", ENSAQIConfigCmd, Buffer);
 8008f22:	4b09      	ldr	r3, [pc, #36]	@ (8008f48 <PC_show_Keys+0x424>)
 8008f24:	4940      	ldr	r1, [pc, #256]	@ (8009028 <PC_show_Keys+0x504>)
 8008f26:	4805      	ldr	r0, [pc, #20]	@ (8008f3c <PC_show_Keys+0x418>)
 8008f28:	2212      	movs	r2, #18
 8008f2a:	f01d f9b1 	bl	8026290 <siprintf>
  PC_selectout(&msg[0], usb_out);
 8008f2e:	4b01      	ldr	r3, [pc, #4]	@ (8008f34 <PC_show_Keys+0x410>)
 8008f30:	781a      	ldrb	r2, [r3, #0]
 8008f32:	e07b      	b.n	800902c <PC_show_Keys+0x508>
 8008f34:	20000b51 	.word	0x20000b51
 8008f38:	0802b338 	.word	0x0802b338
 8008f3c:	20000b54 	.word	0x20000b54
 8008f40:	20000b9c 	.word	0x20000b9c
 8008f44:	08080000 	.word	0x08080000
 8008f48:	20000ba8 	.word	0x20000ba8
 8008f4c:	0802b358 	.word	0x0802b358
 8008f50:	20000bc4 	.word	0x20000bc4
 8008f54:	0808000c 	.word	0x0808000c
 8008f58:	0802b388 	.word	0x0802b388
 8008f5c:	20000bd0 	.word	0x20000bd0
 8008f60:	08080018 	.word	0x08080018
 8008f64:	0802b3b8 	.word	0x0802b3b8
 8008f68:	20000bdc 	.word	0x20000bdc
 8008f6c:	08080024 	.word	0x08080024
 8008f70:	0802b3e8 	.word	0x0802b3e8
 8008f74:	20000be8 	.word	0x20000be8
 8008f78:	08080030 	.word	0x08080030
 8008f7c:	0802b418 	.word	0x0802b418
 8008f80:	20000bf4 	.word	0x20000bf4
 8008f84:	08080048 	.word	0x08080048
 8008f88:	0802b448 	.word	0x0802b448
 8008f8c:	20000c00 	.word	0x20000c00
 8008f90:	0808003c 	.word	0x0808003c
 8008f94:	0802b478 	.word	0x0802b478
 8008f98:	20000c0c 	.word	0x20000c0c
 8008f9c:	08080054 	.word	0x08080054
 8008fa0:	0802b4a8 	.word	0x0802b4a8
 8008fa4:	20000c18 	.word	0x20000c18
 8008fa8:	08080060 	.word	0x08080060
 8008fac:	0802b4d8 	.word	0x0802b4d8
 8008fb0:	20000c24 	.word	0x20000c24
 8008fb4:	0808006c 	.word	0x0808006c
 8008fb8:	0802b508 	.word	0x0802b508
 8008fbc:	20000c30 	.word	0x20000c30
 8008fc0:	08080078 	.word	0x08080078
 8008fc4:	0802b538 	.word	0x0802b538
 8008fc8:	20000c3c 	.word	0x20000c3c
 8008fcc:	08080084 	.word	0x08080084
 8008fd0:	0802b568 	.word	0x0802b568
 8008fd4:	20000c48 	.word	0x20000c48
 8008fd8:	08080090 	.word	0x08080090
 8008fdc:	0802b598 	.word	0x0802b598
 8008fe0:	0802b5c4 	.word	0x0802b5c4
 8008fe4:	20000c68 	.word	0x20000c68
 8008fe8:	08080200 	.word	0x08080200
 8008fec:	0802b5cc 	.word	0x0802b5cc
 8008ff0:	20000c88 	.word	0x20000c88
 8008ff4:	08080220 	.word	0x08080220
 8008ff8:	0802b5f8 	.word	0x0802b5f8
 8008ffc:	20000cc8 	.word	0x20000cc8
 8009000:	080800c8 	.word	0x080800c8
 8009004:	0802b624 	.word	0x0802b624
 8009008:	20000cd4 	.word	0x20000cd4
 800900c:	080800d4 	.word	0x080800d4
 8009010:	0802b654 	.word	0x0802b654
 8009014:	20000ce0 	.word	0x20000ce0
 8009018:	080800e0 	.word	0x080800e0
 800901c:	0802b684 	.word	0x0802b684
 8009020:	20000cec 	.word	0x20000cec
 8009024:	080800ec 	.word	0x080800ec
 8009028:	0802b6b4 	.word	0x0802b6b4
 800902c:	4be2      	ldr	r3, [pc, #904]	@ (80093b8 <PC_show_Keys+0x894>)
 800902e:	0011      	movs	r1, r2
 8009030:	0018      	movs	r0, r3
 8009032:	f7ff fd5c 	bl	8008aee <PC_selectout>

  ReadUint8ArrayEEprom(ENSTVOCConfigAddr, ENSTVOCConfig, IdSize);
 8009036:	4be1      	ldr	r3, [pc, #900]	@ (80093bc <PC_show_Keys+0x898>)
 8009038:	48e1      	ldr	r0, [pc, #900]	@ (80093c0 <PC_show_Keys+0x89c>)
 800903a:	220c      	movs	r2, #12
 800903c:	0019      	movs	r1, r3
 800903e:	f003 f85b 	bl	800c0f8 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, ENSTVOCConfig);
 8009042:	4ade      	ldr	r2, [pc, #888]	@ (80093bc <PC_show_Keys+0x898>)
 8009044:	4bdf      	ldr	r3, [pc, #892]	@ (80093c4 <PC_show_Keys+0x8a0>)
 8009046:	0011      	movs	r1, r2
 8009048:	0018      	movs	r0, r3
 800904a:	f7fc f9cd 	bl	80053e8 <uint8ArrayToString>
  sprintf(msg, "%02d - ENS160 TVOC sensor id ---------: %s\r\n", ENSTVOCConfigCmd, Buffer);
 800904e:	4bdd      	ldr	r3, [pc, #884]	@ (80093c4 <PC_show_Keys+0x8a0>)
 8009050:	49dd      	ldr	r1, [pc, #884]	@ (80093c8 <PC_show_Keys+0x8a4>)
 8009052:	48d9      	ldr	r0, [pc, #868]	@ (80093b8 <PC_show_Keys+0x894>)
 8009054:	2213      	movs	r2, #19
 8009056:	f01d f91b 	bl	8026290 <siprintf>
  PC_selectout(&msg[0], usb_out);
 800905a:	4bdc      	ldr	r3, [pc, #880]	@ (80093cc <PC_show_Keys+0x8a8>)
 800905c:	781a      	ldrb	r2, [r3, #0]
 800905e:	4bd6      	ldr	r3, [pc, #856]	@ (80093b8 <PC_show_Keys+0x894>)
 8009060:	0011      	movs	r1, r2
 8009062:	0018      	movs	r0, r3
 8009064:	f7ff fd43 	bl	8008aee <PC_selectout>

  ReadUint8ArrayEEprom(ENSeCO2ConfigAddr, ENSeCO2Config, IdSize);
 8009068:	4bd9      	ldr	r3, [pc, #868]	@ (80093d0 <PC_show_Keys+0x8ac>)
 800906a:	48da      	ldr	r0, [pc, #872]	@ (80093d4 <PC_show_Keys+0x8b0>)
 800906c:	220c      	movs	r2, #12
 800906e:	0019      	movs	r1, r3
 8009070:	f003 f842 	bl	800c0f8 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, ENSeCO2Config);
 8009074:	4ad6      	ldr	r2, [pc, #856]	@ (80093d0 <PC_show_Keys+0x8ac>)
 8009076:	4bd3      	ldr	r3, [pc, #844]	@ (80093c4 <PC_show_Keys+0x8a0>)
 8009078:	0011      	movs	r1, r2
 800907a:	0018      	movs	r0, r3
 800907c:	f7fc f9b4 	bl	80053e8 <uint8ArrayToString>
  sprintf(msg, "%02d - ENS160 eCO2 sensor id ---------: %s\r\n", ENSeCO2ConfigCmd, Buffer);
 8009080:	4bd0      	ldr	r3, [pc, #832]	@ (80093c4 <PC_show_Keys+0x8a0>)
 8009082:	49d5      	ldr	r1, [pc, #852]	@ (80093d8 <PC_show_Keys+0x8b4>)
 8009084:	48cc      	ldr	r0, [pc, #816]	@ (80093b8 <PC_show_Keys+0x894>)
 8009086:	2214      	movs	r2, #20
 8009088:	f01d f902 	bl	8026290 <siprintf>
  PC_selectout(&msg[0], usb_out);
 800908c:	4bcf      	ldr	r3, [pc, #828]	@ (80093cc <PC_show_Keys+0x8a8>)
 800908e:	781a      	ldrb	r2, [r3, #0]
 8009090:	4bc9      	ldr	r3, [pc, #804]	@ (80093b8 <PC_show_Keys+0x894>)
 8009092:	0011      	movs	r1, r2
 8009094:	0018      	movs	r0, r3
 8009096:	f7ff fd2a 	bl	8008aee <PC_selectout>

  ReadUint8ArrayEEprom(PM1ConfigAddr, PM1Config, IdSize);
 800909a:	4bd0      	ldr	r3, [pc, #832]	@ (80093dc <PC_show_Keys+0x8b8>)
 800909c:	48d0      	ldr	r0, [pc, #832]	@ (80093e0 <PC_show_Keys+0x8bc>)
 800909e:	220c      	movs	r2, #12
 80090a0:	0019      	movs	r1, r3
 80090a2:	f003 f829 	bl	800c0f8 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, PM1Config);
 80090a6:	4acd      	ldr	r2, [pc, #820]	@ (80093dc <PC_show_Keys+0x8b8>)
 80090a8:	4bc6      	ldr	r3, [pc, #792]	@ (80093c4 <PC_show_Keys+0x8a0>)
 80090aa:	0011      	movs	r1, r2
 80090ac:	0018      	movs	r0, r3
 80090ae:	f7fc f99b 	bl	80053e8 <uint8ArrayToString>
  sprintf(msg, "%02d - PM1p0 sensor id ---------------: %s\r\n", PM1ConfigCmd, Buffer);
 80090b2:	4bc4      	ldr	r3, [pc, #784]	@ (80093c4 <PC_show_Keys+0x8a0>)
 80090b4:	49cb      	ldr	r1, [pc, #812]	@ (80093e4 <PC_show_Keys+0x8c0>)
 80090b6:	48c0      	ldr	r0, [pc, #768]	@ (80093b8 <PC_show_Keys+0x894>)
 80090b8:	2215      	movs	r2, #21
 80090ba:	f01d f8e9 	bl	8026290 <siprintf>
  PC_selectout(&msg[0], usb_out);
 80090be:	4bc3      	ldr	r3, [pc, #780]	@ (80093cc <PC_show_Keys+0x8a8>)
 80090c0:	781a      	ldrb	r2, [r3, #0]
 80090c2:	4bbd      	ldr	r3, [pc, #756]	@ (80093b8 <PC_show_Keys+0x894>)
 80090c4:	0011      	movs	r1, r2
 80090c6:	0018      	movs	r0, r3
 80090c8:	f7ff fd11 	bl	8008aee <PC_selectout>

  ReadUint8ArrayEEprom(PM4ConfigAddr, PM4Config, IdSize);
 80090cc:	4bc6      	ldr	r3, [pc, #792]	@ (80093e8 <PC_show_Keys+0x8c4>)
 80090ce:	48c7      	ldr	r0, [pc, #796]	@ (80093ec <PC_show_Keys+0x8c8>)
 80090d0:	220c      	movs	r2, #12
 80090d2:	0019      	movs	r1, r3
 80090d4:	f003 f810 	bl	800c0f8 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, PM4Config);
 80090d8:	4ac3      	ldr	r2, [pc, #780]	@ (80093e8 <PC_show_Keys+0x8c4>)
 80090da:	4bba      	ldr	r3, [pc, #744]	@ (80093c4 <PC_show_Keys+0x8a0>)
 80090dc:	0011      	movs	r1, r2
 80090de:	0018      	movs	r0, r3
 80090e0:	f7fc f982 	bl	80053e8 <uint8ArrayToString>
  sprintf(msg, "%02d - PM4p0 sensor id ---------------: %s\r\n", PM4ConfigCmd, Buffer);
 80090e4:	4bb7      	ldr	r3, [pc, #732]	@ (80093c4 <PC_show_Keys+0x8a0>)
 80090e6:	49c2      	ldr	r1, [pc, #776]	@ (80093f0 <PC_show_Keys+0x8cc>)
 80090e8:	48b3      	ldr	r0, [pc, #716]	@ (80093b8 <PC_show_Keys+0x894>)
 80090ea:	2216      	movs	r2, #22
 80090ec:	f01d f8d0 	bl	8026290 <siprintf>
  PC_selectout(&msg[0], usb_out);
 80090f0:	4bb6      	ldr	r3, [pc, #728]	@ (80093cc <PC_show_Keys+0x8a8>)
 80090f2:	781a      	ldrb	r2, [r3, #0]
 80090f4:	4bb0      	ldr	r3, [pc, #704]	@ (80093b8 <PC_show_Keys+0x894>)
 80090f6:	0011      	movs	r1, r2
 80090f8:	0018      	movs	r0, r3
 80090fa:	f7ff fcf8 	bl	8008aee <PC_selectout>

  ReadUint8ArrayEEprom(SEN55TempConfigAddr, SEN55TempConfig, IdSize);
 80090fe:	4bbd      	ldr	r3, [pc, #756]	@ (80093f4 <PC_show_Keys+0x8d0>)
 8009100:	48bd      	ldr	r0, [pc, #756]	@ (80093f8 <PC_show_Keys+0x8d4>)
 8009102:	220c      	movs	r2, #12
 8009104:	0019      	movs	r1, r3
 8009106:	f002 fff7 	bl	800c0f8 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, SEN55TempConfig);
 800910a:	4aba      	ldr	r2, [pc, #744]	@ (80093f4 <PC_show_Keys+0x8d0>)
 800910c:	4bad      	ldr	r3, [pc, #692]	@ (80093c4 <PC_show_Keys+0x8a0>)
 800910e:	0011      	movs	r1, r2
 8009110:	0018      	movs	r0, r3
 8009112:	f7fc f969 	bl	80053e8 <uint8ArrayToString>
  sprintf(msg, "%02d - SEN54/55 Temperature sensor id : %s\r\n", SEN55TempConfigCmd, Buffer);
 8009116:	4bab      	ldr	r3, [pc, #684]	@ (80093c4 <PC_show_Keys+0x8a0>)
 8009118:	49b8      	ldr	r1, [pc, #736]	@ (80093fc <PC_show_Keys+0x8d8>)
 800911a:	48a7      	ldr	r0, [pc, #668]	@ (80093b8 <PC_show_Keys+0x894>)
 800911c:	2217      	movs	r2, #23
 800911e:	f01d f8b7 	bl	8026290 <siprintf>
  PC_selectout(&msg[0], usb_out);
 8009122:	4baa      	ldr	r3, [pc, #680]	@ (80093cc <PC_show_Keys+0x8a8>)
 8009124:	781a      	ldrb	r2, [r3, #0]
 8009126:	4ba4      	ldr	r3, [pc, #656]	@ (80093b8 <PC_show_Keys+0x894>)
 8009128:	0011      	movs	r1, r2
 800912a:	0018      	movs	r0, r3
 800912c:	f7ff fcdf 	bl	8008aee <PC_selectout>

  ReadUint8ArrayEEprom(SEN55HumidConfigAddr, SEN55HumidConfig, IdSize);
 8009130:	4bb3      	ldr	r3, [pc, #716]	@ (8009400 <PC_show_Keys+0x8dc>)
 8009132:	48b4      	ldr	r0, [pc, #720]	@ (8009404 <PC_show_Keys+0x8e0>)
 8009134:	220c      	movs	r2, #12
 8009136:	0019      	movs	r1, r3
 8009138:	f002 ffde 	bl	800c0f8 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, SEN55HumidConfig);
 800913c:	4ab0      	ldr	r2, [pc, #704]	@ (8009400 <PC_show_Keys+0x8dc>)
 800913e:	4ba1      	ldr	r3, [pc, #644]	@ (80093c4 <PC_show_Keys+0x8a0>)
 8009140:	0011      	movs	r1, r2
 8009142:	0018      	movs	r0, r3
 8009144:	f7fc f950 	bl	80053e8 <uint8ArrayToString>
  sprintf(msg, "%02d - SEN54/55 Humidity sensor id ---: %s\r\n", SEN55HumidConfigCmd, Buffer);
 8009148:	4b9e      	ldr	r3, [pc, #632]	@ (80093c4 <PC_show_Keys+0x8a0>)
 800914a:	49af      	ldr	r1, [pc, #700]	@ (8009408 <PC_show_Keys+0x8e4>)
 800914c:	489a      	ldr	r0, [pc, #616]	@ (80093b8 <PC_show_Keys+0x894>)
 800914e:	2218      	movs	r2, #24
 8009150:	f01d f89e 	bl	8026290 <siprintf>
  PC_selectout(&msg[0], usb_out);
 8009154:	4b9d      	ldr	r3, [pc, #628]	@ (80093cc <PC_show_Keys+0x8a8>)
 8009156:	781a      	ldrb	r2, [r3, #0]
 8009158:	4b97      	ldr	r3, [pc, #604]	@ (80093b8 <PC_show_Keys+0x894>)
 800915a:	0011      	movs	r1, r2
 800915c:	0018      	movs	r0, r3
 800915e:	f7ff fcc6 	bl	8008aee <PC_selectout>

#ifdef USE_MAIL
  ReadUint8ArrayEEprom(SendFromNameConfigAddr, SendFromnameConfig, SendFromNameMaxLength);
 8009162:	4baa      	ldr	r3, [pc, #680]	@ (800940c <PC_show_Keys+0x8e8>)
 8009164:	48aa      	ldr	r0, [pc, #680]	@ (8009410 <PC_show_Keys+0x8ec>)
 8009166:	2230      	movs	r2, #48	@ 0x30
 8009168:	0019      	movs	r1, r3
 800916a:	f002 ffc5 	bl	800c0f8 <ReadUint8ArrayEEprom>
  sprintf(msg, "%02d - Stored Send from name ---------: ", SendFromNameConfigCmd);
 800916e:	49a9      	ldr	r1, [pc, #676]	@ (8009414 <PC_show_Keys+0x8f0>)
 8009170:	4b91      	ldr	r3, [pc, #580]	@ (80093b8 <PC_show_Keys+0x894>)
 8009172:	2219      	movs	r2, #25
 8009174:	0018      	movs	r0, r3
 8009176:	f01d f88b 	bl	8026290 <siprintf>
  PC_selectout(&msg[0], usb_out);
 800917a:	4b94      	ldr	r3, [pc, #592]	@ (80093cc <PC_show_Keys+0x8a8>)
 800917c:	781a      	ldrb	r2, [r3, #0]
 800917e:	4b8e      	ldr	r3, [pc, #568]	@ (80093b8 <PC_show_Keys+0x894>)
 8009180:	0011      	movs	r1, r2
 8009182:	0018      	movs	r0, r3
 8009184:	f7ff fcb3 	bl	8008aee <PC_selectout>
  sprintf(msg, "%s\r\n", (char*)SendFromnameConfig);  // probably too long to held in same buffer
 8009188:	4aa0      	ldr	r2, [pc, #640]	@ (800940c <PC_show_Keys+0x8e8>)
 800918a:	49a3      	ldr	r1, [pc, #652]	@ (8009418 <PC_show_Keys+0x8f4>)
 800918c:	4b8a      	ldr	r3, [pc, #552]	@ (80093b8 <PC_show_Keys+0x894>)
 800918e:	0018      	movs	r0, r3
 8009190:	f01d f87e 	bl	8026290 <siprintf>
  PC_selectout(&msg[0], usb_out);
 8009194:	4b8d      	ldr	r3, [pc, #564]	@ (80093cc <PC_show_Keys+0x8a8>)
 8009196:	781a      	ldrb	r2, [r3, #0]
 8009198:	4b87      	ldr	r3, [pc, #540]	@ (80093b8 <PC_show_Keys+0x894>)
 800919a:	0011      	movs	r1, r2
 800919c:	0018      	movs	r0, r3
 800919e:	f7ff fca6 	bl	8008aee <PC_selectout>

  ReadUint8ArrayEEprom(SendToNameConfigAddr, SendTonameConfig, SendToNameMaxLength);
 80091a2:	4b9e      	ldr	r3, [pc, #632]	@ (800941c <PC_show_Keys+0x8f8>)
 80091a4:	489e      	ldr	r0, [pc, #632]	@ (8009420 <PC_show_Keys+0x8fc>)
 80091a6:	2230      	movs	r2, #48	@ 0x30
 80091a8:	0019      	movs	r1, r3
 80091aa:	f002 ffa5 	bl	800c0f8 <ReadUint8ArrayEEprom>
  sprintf(msg, "%02d - Stored Send to name -----------: ", SendToNameConfigCmd);
 80091ae:	499d      	ldr	r1, [pc, #628]	@ (8009424 <PC_show_Keys+0x900>)
 80091b0:	4b81      	ldr	r3, [pc, #516]	@ (80093b8 <PC_show_Keys+0x894>)
 80091b2:	221a      	movs	r2, #26
 80091b4:	0018      	movs	r0, r3
 80091b6:	f01d f86b 	bl	8026290 <siprintf>
  PC_selectout(&msg[0], usb_out);
 80091ba:	4b84      	ldr	r3, [pc, #528]	@ (80093cc <PC_show_Keys+0x8a8>)
 80091bc:	781a      	ldrb	r2, [r3, #0]
 80091be:	4b7e      	ldr	r3, [pc, #504]	@ (80093b8 <PC_show_Keys+0x894>)
 80091c0:	0011      	movs	r1, r2
 80091c2:	0018      	movs	r0, r3
 80091c4:	f7ff fc93 	bl	8008aee <PC_selectout>
  sprintf(msg, "%s\r\n", (char*)SendTonameConfig);  // probably too long to held in same buffer
 80091c8:	4a94      	ldr	r2, [pc, #592]	@ (800941c <PC_show_Keys+0x8f8>)
 80091ca:	4993      	ldr	r1, [pc, #588]	@ (8009418 <PC_show_Keys+0x8f4>)
 80091cc:	4b7a      	ldr	r3, [pc, #488]	@ (80093b8 <PC_show_Keys+0x894>)
 80091ce:	0018      	movs	r0, r3
 80091d0:	f01d f85e 	bl	8026290 <siprintf>
  PC_selectout(&msg[0], usb_out);
 80091d4:	4b7d      	ldr	r3, [pc, #500]	@ (80093cc <PC_show_Keys+0x8a8>)
 80091d6:	781a      	ldrb	r2, [r3, #0]
 80091d8:	4b77      	ldr	r3, [pc, #476]	@ (80093b8 <PC_show_Keys+0x894>)
 80091da:	0011      	movs	r1, r2
 80091dc:	0018      	movs	r0, r3
 80091de:	f7ff fc86 	bl	8008aee <PC_selectout>

  ReadUint8ArrayEEprom(MailAPIKeyConfigAddr, MailAPIKeyConfig, MailAPIKeyMaxLength);
 80091e2:	4b91      	ldr	r3, [pc, #580]	@ (8009428 <PC_show_Keys+0x904>)
 80091e4:	4891      	ldr	r0, [pc, #580]	@ (800942c <PC_show_Keys+0x908>)
 80091e6:	2230      	movs	r2, #48	@ 0x30
 80091e8:	0019      	movs	r1, r3
 80091ea:	f002 ff85 	bl	800c0f8 <ReadUint8ArrayEEprom>
  sprintf(msg, "%02d - Stored SMTP2go API key --------: ", MailAPIKeyConfigCmd);
 80091ee:	4990      	ldr	r1, [pc, #576]	@ (8009430 <PC_show_Keys+0x90c>)
 80091f0:	4b71      	ldr	r3, [pc, #452]	@ (80093b8 <PC_show_Keys+0x894>)
 80091f2:	221b      	movs	r2, #27
 80091f4:	0018      	movs	r0, r3
 80091f6:	f01d f84b 	bl	8026290 <siprintf>
  PC_selectout(&msg[0], usb_out);
 80091fa:	4b74      	ldr	r3, [pc, #464]	@ (80093cc <PC_show_Keys+0x8a8>)
 80091fc:	781a      	ldrb	r2, [r3, #0]
 80091fe:	4b6e      	ldr	r3, [pc, #440]	@ (80093b8 <PC_show_Keys+0x894>)
 8009200:	0011      	movs	r1, r2
 8009202:	0018      	movs	r0, r3
 8009204:	f7ff fc73 	bl	8008aee <PC_selectout>
  sprintf(msg, "%s\r\n", (char*)MailAPIKeyConfig);  // probably too long to held in same buffer
 8009208:	4a87      	ldr	r2, [pc, #540]	@ (8009428 <PC_show_Keys+0x904>)
 800920a:	4983      	ldr	r1, [pc, #524]	@ (8009418 <PC_show_Keys+0x8f4>)
 800920c:	4b6a      	ldr	r3, [pc, #424]	@ (80093b8 <PC_show_Keys+0x894>)
 800920e:	0018      	movs	r0, r3
 8009210:	f01d f83e 	bl	8026290 <siprintf>
  PC_selectout(&msg[0], usb_out);
 8009214:	4b6d      	ldr	r3, [pc, #436]	@ (80093cc <PC_show_Keys+0x8a8>)
 8009216:	781a      	ldrb	r2, [r3, #0]
 8009218:	4b67      	ldr	r3, [pc, #412]	@ (80093b8 <PC_show_Keys+0x894>)
 800921a:	0011      	movs	r1, r2
 800921c:	0018      	movs	r0, r3
 800921e:	f7ff fc66 	bl	8008aee <PC_selectout>
#endif

  ReadUint8ArrayEEprom(hPaConfigAddr, hPaConfig, IdSize);
 8009222:	4b84      	ldr	r3, [pc, #528]	@ (8009434 <PC_show_Keys+0x910>)
 8009224:	4884      	ldr	r0, [pc, #528]	@ (8009438 <PC_show_Keys+0x914>)
 8009226:	220c      	movs	r2, #12
 8009228:	0019      	movs	r1, r3
 800922a:	f002 ff65 	bl	800c0f8 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, hPaConfig);
 800922e:	4a81      	ldr	r2, [pc, #516]	@ (8009434 <PC_show_Keys+0x910>)
 8009230:	4b64      	ldr	r3, [pc, #400]	@ (80093c4 <PC_show_Keys+0x8a0>)
 8009232:	0011      	movs	r1, r2
 8009234:	0018      	movs	r0, r3
 8009236:	f7fc f8d7 	bl	80053e8 <uint8ArrayToString>
  sprintf(msg, "%02d - BMP280 Air pressure sensor id -: %s\r\n", hPaConfigCmd, Buffer);
 800923a:	4b62      	ldr	r3, [pc, #392]	@ (80093c4 <PC_show_Keys+0x8a0>)
 800923c:	497f      	ldr	r1, [pc, #508]	@ (800943c <PC_show_Keys+0x918>)
 800923e:	485e      	ldr	r0, [pc, #376]	@ (80093b8 <PC_show_Keys+0x894>)
 8009240:	221c      	movs	r2, #28
 8009242:	f01d f825 	bl	8026290 <siprintf>
  PC_selectout(&msg[0], usb_out);
 8009246:	4b61      	ldr	r3, [pc, #388]	@ (80093cc <PC_show_Keys+0x8a8>)
 8009248:	781a      	ldrb	r2, [r3, #0]
 800924a:	4b5b      	ldr	r3, [pc, #364]	@ (80093b8 <PC_show_Keys+0x894>)
 800924c:	0011      	movs	r1, r2
 800924e:	0018      	movs	r0, r3
 8009250:	f7ff fc4d 	bl	8008aee <PC_selectout>

  ReadUint8ArrayEEprom(UptimeConfigAddr, UptimeConfig, IdSize);
 8009254:	4b7a      	ldr	r3, [pc, #488]	@ (8009440 <PC_show_Keys+0x91c>)
 8009256:	487b      	ldr	r0, [pc, #492]	@ (8009444 <PC_show_Keys+0x920>)
 8009258:	220c      	movs	r2, #12
 800925a:	0019      	movs	r1, r3
 800925c:	f002 ff4c 	bl	800c0f8 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, UptimeConfig);
 8009260:	4a77      	ldr	r2, [pc, #476]	@ (8009440 <PC_show_Keys+0x91c>)
 8009262:	4b58      	ldr	r3, [pc, #352]	@ (80093c4 <PC_show_Keys+0x8a0>)
 8009264:	0011      	movs	r1, r2
 8009266:	0018      	movs	r0, r3
 8009268:	f7fc f8be 	bl	80053e8 <uint8ArrayToString>
  sprintf(msg, "%02d - Uptime sensor id --------------: %s\r\n", UptimeConfigCmd, Buffer);
 800926c:	4b55      	ldr	r3, [pc, #340]	@ (80093c4 <PC_show_Keys+0x8a0>)
 800926e:	4976      	ldr	r1, [pc, #472]	@ (8009448 <PC_show_Keys+0x924>)
 8009270:	4851      	ldr	r0, [pc, #324]	@ (80093b8 <PC_show_Keys+0x894>)
 8009272:	221d      	movs	r2, #29
 8009274:	f01d f80c 	bl	8026290 <siprintf>
  PC_selectout(&msg[0], usb_out);
 8009278:	4b54      	ldr	r3, [pc, #336]	@ (80093cc <PC_show_Keys+0x8a8>)
 800927a:	781a      	ldrb	r2, [r3, #0]
 800927c:	4b4e      	ldr	r3, [pc, #312]	@ (80093b8 <PC_show_Keys+0x894>)
 800927e:	0011      	movs	r1, r2
 8009280:	0018      	movs	r0, r3
 8009282:	f7ff fc34 	bl	8008aee <PC_selectout>

  ReadUint8ArrayEEprom(URLToUploadConfigAddr, URLToUploadConfig, URLToUploadMaxLength);
 8009286:	4b71      	ldr	r3, [pc, #452]	@ (800944c <PC_show_Keys+0x928>)
 8009288:	4871      	ldr	r0, [pc, #452]	@ (8009450 <PC_show_Keys+0x92c>)
 800928a:	2230      	movs	r2, #48	@ 0x30
 800928c:	0019      	movs	r1, r3
 800928e:	f002 ff33 	bl	800c0f8 <ReadUint8ArrayEEprom>
  sprintf(msg, "%02d - URL to upload -----------------: ", URLToUploadConfigCmd);
 8009292:	4970      	ldr	r1, [pc, #448]	@ (8009454 <PC_show_Keys+0x930>)
 8009294:	4b48      	ldr	r3, [pc, #288]	@ (80093b8 <PC_show_Keys+0x894>)
 8009296:	221e      	movs	r2, #30
 8009298:	0018      	movs	r0, r3
 800929a:	f01c fff9 	bl	8026290 <siprintf>
  PC_selectout(&msg[0], usb_out);
 800929e:	4b4b      	ldr	r3, [pc, #300]	@ (80093cc <PC_show_Keys+0x8a8>)
 80092a0:	781a      	ldrb	r2, [r3, #0]
 80092a2:	4b45      	ldr	r3, [pc, #276]	@ (80093b8 <PC_show_Keys+0x894>)
 80092a4:	0011      	movs	r1, r2
 80092a6:	0018      	movs	r0, r3
 80092a8:	f7ff fc21 	bl	8008aee <PC_selectout>
  if (strlen((char*)URLToUploadConfig) == 0) {
 80092ac:	4b67      	ldr	r3, [pc, #412]	@ (800944c <PC_show_Keys+0x928>)
 80092ae:	781b      	ldrb	r3, [r3, #0]
 80092b0:	2b00      	cmp	r3, #0
 80092b2:	d11b      	bne.n	80092ec <PC_show_Keys+0x7c8>
    sprintf(msg, "Undefined, defaulted to ");
 80092b4:	4a68      	ldr	r2, [pc, #416]	@ (8009458 <PC_show_Keys+0x934>)
 80092b6:	4b40      	ldr	r3, [pc, #256]	@ (80093b8 <PC_show_Keys+0x894>)
 80092b8:	0011      	movs	r1, r2
 80092ba:	0018      	movs	r0, r3
 80092bc:	f01c ffe8 	bl	8026290 <siprintf>
    PC_selectout(&msg[0], usb_out);
 80092c0:	4b42      	ldr	r3, [pc, #264]	@ (80093cc <PC_show_Keys+0x8a8>)
 80092c2:	781a      	ldrb	r2, [r3, #0]
 80092c4:	4b3c      	ldr	r3, [pc, #240]	@ (80093b8 <PC_show_Keys+0x894>)
 80092c6:	0011      	movs	r1, r2
 80092c8:	0018      	movs	r0, r3
 80092ca:	f7ff fc10 	bl	8008aee <PC_selectout>
    PC_selectout((char*)API, usb_out);
 80092ce:	4b3f      	ldr	r3, [pc, #252]	@ (80093cc <PC_show_Keys+0x8a8>)
 80092d0:	781a      	ldrb	r2, [r3, #0]
 80092d2:	4b62      	ldr	r3, [pc, #392]	@ (800945c <PC_show_Keys+0x938>)
 80092d4:	0011      	movs	r1, r2
 80092d6:	0018      	movs	r0, r3
 80092d8:	f7ff fc09 	bl	8008aee <PC_selectout>
    PC_selectout("\r\n\0", usb_out);
 80092dc:	4b3b      	ldr	r3, [pc, #236]	@ (80093cc <PC_show_Keys+0x8a8>)
 80092de:	781a      	ldrb	r2, [r3, #0]
 80092e0:	4b5f      	ldr	r3, [pc, #380]	@ (8009460 <PC_show_Keys+0x93c>)
 80092e2:	0011      	movs	r1, r2
 80092e4:	0018      	movs	r0, r3
 80092e6:	f7ff fc02 	bl	8008aee <PC_selectout>
 80092ea:	e00c      	b.n	8009306 <PC_show_Keys+0x7e2>
  }
  else {
    sprintf(msg, "%s\r\n", (char*)URLToUploadConfig);  // probably too long to held in same buffer
 80092ec:	4a57      	ldr	r2, [pc, #348]	@ (800944c <PC_show_Keys+0x928>)
 80092ee:	494a      	ldr	r1, [pc, #296]	@ (8009418 <PC_show_Keys+0x8f4>)
 80092f0:	4b31      	ldr	r3, [pc, #196]	@ (80093b8 <PC_show_Keys+0x894>)
 80092f2:	0018      	movs	r0, r3
 80092f4:	f01c ffcc 	bl	8026290 <siprintf>
    PC_selectout(&msg[0], usb_out);
 80092f8:	4b34      	ldr	r3, [pc, #208]	@ (80093cc <PC_show_Keys+0x8a8>)
 80092fa:	781a      	ldrb	r2, [r3, #0]
 80092fc:	4b2e      	ldr	r3, [pc, #184]	@ (80093b8 <PC_show_Keys+0x894>)
 80092fe:	0011      	movs	r1, r2
 8009300:	0018      	movs	r0, r3
 8009302:	f7ff fbf4 	bl	8008aee <PC_selectout>
  }

  sprintf(msg, "%02d - Clear all definitions in EEPROM\r\n", clearDefsCmd);
 8009306:	4957      	ldr	r1, [pc, #348]	@ (8009464 <PC_show_Keys+0x940>)
 8009308:	4b2b      	ldr	r3, [pc, #172]	@ (80093b8 <PC_show_Keys+0x894>)
 800930a:	221f      	movs	r2, #31
 800930c:	0018      	movs	r0, r3
 800930e:	f01c ffbf 	bl	8026290 <siprintf>
  PC_selectout(&msg[0], usb_out);
 8009312:	4b2e      	ldr	r3, [pc, #184]	@ (80093cc <PC_show_Keys+0x8a8>)
 8009314:	781a      	ldrb	r2, [r3, #0]
 8009316:	4b28      	ldr	r3, [pc, #160]	@ (80093b8 <PC_show_Keys+0x894>)
 8009318:	0011      	movs	r1, r2
 800931a:	0018      	movs	r0, r3
 800931c:	f7ff fbe7 	bl	8008aee <PC_selectout>

  printf_USB("\r\n!!NO LINE EDITING!!\r\n");
 8009320:	4b51      	ldr	r3, [pc, #324]	@ (8009468 <PC_show_Keys+0x944>)
 8009322:	0018      	movs	r0, r3
 8009324:	f7ff fbbe 	bl	8008aa4 <printf_USB>
  HAL_Delay(10);
 8009328:	200a      	movs	r0, #10
 800932a:	f00b fb09 	bl	8014940 <HAL_Delay>
  printf_USB("If the key differs only the last two bytes,");
 800932e:	4b4f      	ldr	r3, [pc, #316]	@ (800946c <PC_show_Keys+0x948>)
 8009330:	0018      	movs	r0, r3
 8009332:	f7ff fbb7 	bl	8008aa4 <printf_USB>
  HAL_Delay(10);
 8009336:	200a      	movs	r0, #10
 8009338:	f00b fb02 	bl	8014940 <HAL_Delay>
  printf_USB(" command example for air pressure => #28,6a\r\n");
 800933c:	4b4c      	ldr	r3, [pc, #304]	@ (8009470 <PC_show_Keys+0x94c>)
 800933e:	0018      	movs	r0, r3
 8009340:	f7ff fbb0 	bl	8008aa4 <printf_USB>
  HAL_Delay(10);
 8009344:	200a      	movs	r0, #10
 8009346:	f00b fafb 	bl	8014940 <HAL_Delay>
  printf_USB("For the full key variant copy and paste the key sequence");
 800934a:	4b4a      	ldr	r3, [pc, #296]	@ (8009474 <PC_show_Keys+0x950>)
 800934c:	0018      	movs	r0, r3
 800934e:	f7ff fba9 	bl	8008aa4 <printf_USB>
  HAL_Delay(10);
 8009352:	200a      	movs	r0, #10
 8009354:	f00b faf4 	bl	8014940 <HAL_Delay>
  printf_USB(" from opensensemap.org in your account to this input.\r\n");
 8009358:	4b47      	ldr	r3, [pc, #284]	@ (8009478 <PC_show_Keys+0x954>)
 800935a:	0018      	movs	r0, r3
 800935c:	f7ff fba2 	bl	8008aa4 <printf_USB>
  HAL_Delay(10);
 8009360:	200a      	movs	r0, #10
 8009362:	f00b faed 	bl	8014940 <HAL_Delay>
  printf_USB("Command example for a full key for PM10 sensor =>");
 8009366:	4b45      	ldr	r3, [pc, #276]	@ (800947c <PC_show_Keys+0x958>)
 8009368:	0018      	movs	r0, r3
 800936a:	f7ff fb9b 	bl	8008aa4 <printf_USB>
  HAL_Delay(10);
 800936e:	200a      	movs	r0, #10
 8009370:	f00b fae6 	bl	8014940 <HAL_Delay>
  printf_USB(" $08,67af09374cdef30007b35055\r\n");
 8009374:	4b42      	ldr	r3, [pc, #264]	@ (8009480 <PC_show_Keys+0x95c>)
 8009376:	0018      	movs	r0, r3
 8009378:	f7ff fb94 	bl	8008aa4 <printf_USB>
  HAL_Delay(10);
 800937c:	200a      	movs	r0, #10
 800937e:	f00b fadf 	bl	8014940 <HAL_Delay>
  printf_USB("For changing string entries use prefix S, example: ");
 8009382:	4b40      	ldr	r3, [pc, #256]	@ (8009484 <PC_show_Keys+0x960>)
 8009384:	0018      	movs	r0, r3
 8009386:	f7ff fb8d 	bl	8008aa4 <printf_USB>
  HAL_Delay(10);
 800938a:	200a      	movs	r0, #10
 800938c:	f00b fad8 	bl	8014940 <HAL_Delay>
  printf_USB("S12,Testsysteem (max 12 chars)\r\n");
 8009390:	4b3d      	ldr	r3, [pc, #244]	@ (8009488 <PC_show_Keys+0x964>)
 8009392:	0018      	movs	r0, r3
 8009394:	f7ff fb86 	bl	8008aa4 <printf_USB>
  HAL_Delay(10);
 8009398:	200a      	movs	r0, #10
 800939a:	f00b fad1 	bl	8014940 <HAL_Delay>
  printf_USB("To clear a string: $30,000000000000000000000000\r\n");
 800939e:	4b3b      	ldr	r3, [pc, #236]	@ (800948c <PC_show_Keys+0x968>)
 80093a0:	0018      	movs	r0, r3
 80093a2:	f7ff fb7f 	bl	8008aa4 <printf_USB>
  HAL_Delay(10);
 80093a6:	200a      	movs	r0, #10
 80093a8:	f00b faca 	bl	8014940 <HAL_Delay>
  printf_USB("L - toggle logging on/off, current: %s\r\n", usblog?"on":"off");
 80093ac:	4b38      	ldr	r3, [pc, #224]	@ (8009490 <PC_show_Keys+0x96c>)
 80093ae:	781b      	ldrb	r3, [r3, #0]
 80093b0:	2b00      	cmp	r3, #0
 80093b2:	d071      	beq.n	8009498 <PC_show_Keys+0x974>
 80093b4:	4b37      	ldr	r3, [pc, #220]	@ (8009494 <PC_show_Keys+0x970>)
 80093b6:	e070      	b.n	800949a <PC_show_Keys+0x976>
 80093b8:	20000b54 	.word	0x20000b54
 80093bc:	20000cf8 	.word	0x20000cf8
 80093c0:	080800f8 	.word	0x080800f8
 80093c4:	20000ba8 	.word	0x20000ba8
 80093c8:	0802b6e4 	.word	0x0802b6e4
 80093cc:	20000b51 	.word	0x20000b51
 80093d0:	20000d04 	.word	0x20000d04
 80093d4:	08080104 	.word	0x08080104
 80093d8:	0802b714 	.word	0x0802b714
 80093dc:	20000d10 	.word	0x20000d10
 80093e0:	080800b0 	.word	0x080800b0
 80093e4:	0802b744 	.word	0x0802b744
 80093e8:	20000d1c 	.word	0x20000d1c
 80093ec:	080800bc 	.word	0x080800bc
 80093f0:	0802b774 	.word	0x0802b774
 80093f4:	20000d28 	.word	0x20000d28
 80093f8:	08080170 	.word	0x08080170
 80093fc:	0802b7a4 	.word	0x0802b7a4
 8009400:	20000d34 	.word	0x20000d34
 8009404:	0808017c 	.word	0x0808017c
 8009408:	0802b7d4 	.word	0x0802b7d4
 800940c:	20000d40 	.word	0x20000d40
 8009410:	08080260 	.word	0x08080260
 8009414:	0802b804 	.word	0x0802b804
 8009418:	0802b5c4 	.word	0x0802b5c4
 800941c:	20000d70 	.word	0x20000d70
 8009420:	08080290 	.word	0x08080290
 8009424:	0802b830 	.word	0x0802b830
 8009428:	20000da0 	.word	0x20000da0
 800942c:	080802c0 	.word	0x080802c0
 8009430:	0802b85c 	.word	0x0802b85c
 8009434:	20000dd0 	.word	0x20000dd0
 8009438:	08080188 	.word	0x08080188
 800943c:	0802b888 	.word	0x0802b888
 8009440:	20000ddc 	.word	0x20000ddc
 8009444:	080801a0 	.word	0x080801a0
 8009448:	0802b8b8 	.word	0x0802b8b8
 800944c:	20000de8 	.word	0x20000de8
 8009450:	08080110 	.word	0x08080110
 8009454:	0802b8e8 	.word	0x0802b8e8
 8009458:	0802b914 	.word	0x0802b914
 800945c:	0802b930 	.word	0x0802b930
 8009460:	0802b954 	.word	0x0802b954
 8009464:	0802b958 	.word	0x0802b958
 8009468:	0802b984 	.word	0x0802b984
 800946c:	0802b99c 	.word	0x0802b99c
 8009470:	0802b9c8 	.word	0x0802b9c8
 8009474:	0802b9f8 	.word	0x0802b9f8
 8009478:	0802ba34 	.word	0x0802ba34
 800947c:	0802ba6c 	.word	0x0802ba6c
 8009480:	0802baa0 	.word	0x0802baa0
 8009484:	0802bac0 	.word	0x0802bac0
 8009488:	0802baf4 	.word	0x0802baf4
 800948c:	0802bb18 	.word	0x0802bb18
 8009490:	200010f7 	.word	0x200010f7
 8009494:	0802bb4c 	.word	0x0802bb4c
 8009498:	4b0e      	ldr	r3, [pc, #56]	@ (80094d4 <PC_show_Keys+0x9b0>)
 800949a:	4a0f      	ldr	r2, [pc, #60]	@ (80094d8 <PC_show_Keys+0x9b4>)
 800949c:	0019      	movs	r1, r3
 800949e:	0010      	movs	r0, r2
 80094a0:	f7ff fb00 	bl	8008aa4 <printf_USB>
  HAL_Delay(10);
 80094a4:	200a      	movs	r0, #10
 80094a6:	f00b fa4b 	bl	8014940 <HAL_Delay>
  printf_USB("B - show build information\r\n");
 80094aa:	4b0c      	ldr	r3, [pc, #48]	@ (80094dc <PC_show_Keys+0x9b8>)
 80094ac:	0018      	movs	r0, r3
 80094ae:	f7ff faf9 	bl	8008aa4 <printf_USB>
  HAL_Delay(10);
 80094b2:	200a      	movs	r0, #10
 80094b4:	f00b fa44 	bl	8014940 <HAL_Delay>
  if (!usb_out) {
 80094b8:	4b09      	ldr	r3, [pc, #36]	@ (80094e0 <PC_show_Keys+0x9bc>)
 80094ba:	781b      	ldrb	r3, [r3, #0]
 80094bc:	2201      	movs	r2, #1
 80094be:	4053      	eors	r3, r2
 80094c0:	b2db      	uxtb	r3, r3
 80094c2:	2b00      	cmp	r3, #0
 80094c4:	d003      	beq.n	80094ce <PC_show_Keys+0x9aa>
    printf("A sensor key can only be changed by USB input or the by configuration programm.\r\n");
 80094c6:	4b07      	ldr	r3, [pc, #28]	@ (80094e4 <PC_show_Keys+0x9c0>)
 80094c8:	0018      	movs	r0, r3
 80094ca:	f01c fed7 	bl	802627c <puts>
  }
}
 80094ce:	46c0      	nop			@ (mov r8, r8)
 80094d0:	46bd      	mov	sp, r7
 80094d2:	bd80      	pop	{r7, pc}
 80094d4:	0802bb50 	.word	0x0802bb50
 80094d8:	0802bb54 	.word	0x0802bb54
 80094dc:	0802bb80 	.word	0x0802bb80
 80094e0:	20000b51 	.word	0x20000b51
 80094e4:	0802bba0 	.word	0x0802bba0

080094e8 <ascii_to_uint8>:

uint8_t ascii_to_uint8(uint8_t *inchar) {
 80094e8:	b580      	push	{r7, lr}
 80094ea:	b084      	sub	sp, #16
 80094ec:	af00      	add	r7, sp, #0
 80094ee:	6078      	str	r0, [r7, #4]
  if (!isdigit(inchar[0]) || !isdigit(inchar[1])) {
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	781b      	ldrb	r3, [r3, #0]
 80094f4:	1c5a      	adds	r2, r3, #1
 80094f6:	4b20      	ldr	r3, [pc, #128]	@ (8009578 <ascii_to_uint8+0x90>)
 80094f8:	18d3      	adds	r3, r2, r3
 80094fa:	781b      	ldrb	r3, [r3, #0]
 80094fc:	001a      	movs	r2, r3
 80094fe:	2304      	movs	r3, #4
 8009500:	4013      	ands	r3, r2
 8009502:	d00a      	beq.n	800951a <ascii_to_uint8+0x32>
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	3301      	adds	r3, #1
 8009508:	781b      	ldrb	r3, [r3, #0]
 800950a:	1c5a      	adds	r2, r3, #1
 800950c:	4b1a      	ldr	r3, [pc, #104]	@ (8009578 <ascii_to_uint8+0x90>)
 800950e:	18d3      	adds	r3, r2, r3
 8009510:	781b      	ldrb	r3, [r3, #0]
 8009512:	001a      	movs	r2, r3
 8009514:	2304      	movs	r3, #4
 8009516:	4013      	ands	r3, r2
 8009518:	d105      	bne.n	8009526 <ascii_to_uint8+0x3e>
    printf_USB("Error: two decimal numbers expected\r\n");
 800951a:	4b18      	ldr	r3, [pc, #96]	@ (800957c <ascii_to_uint8+0x94>)
 800951c:	0018      	movs	r0, r3
 800951e:	f7ff fac1 	bl	8008aa4 <printf_USB>
    return 100;
 8009522:	2364      	movs	r3, #100	@ 0x64
 8009524:	e024      	b.n	8009570 <ascii_to_uint8+0x88>
  }
  uint8_t value = (inchar[0] - '0') * 10 + (inchar[1] - '0');
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	781b      	ldrb	r3, [r3, #0]
 800952a:	1c1a      	adds	r2, r3, #0
 800952c:	0092      	lsls	r2, r2, #2
 800952e:	18d3      	adds	r3, r2, r3
 8009530:	18db      	adds	r3, r3, r3
 8009532:	b2da      	uxtb	r2, r3
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	3301      	adds	r3, #1
 8009538:	781b      	ldrb	r3, [r3, #0]
 800953a:	18d3      	adds	r3, r2, r3
 800953c:	b2da      	uxtb	r2, r3
 800953e:	210f      	movs	r1, #15
 8009540:	187b      	adds	r3, r7, r1
 8009542:	3a10      	subs	r2, #16
 8009544:	701a      	strb	r2, [r3, #0]

  if (value >= maxCmd) {
 8009546:	187b      	adds	r3, r7, r1
 8009548:	781b      	ldrb	r3, [r3, #0]
 800954a:	2b1f      	cmp	r3, #31
 800954c:	d905      	bls.n	800955a <ascii_to_uint8+0x72>
    printf_USB("Error: value out of range\r\n");
 800954e:	4b0c      	ldr	r3, [pc, #48]	@ (8009580 <ascii_to_uint8+0x98>)
 8009550:	0018      	movs	r0, r3
 8009552:	f7ff faa7 	bl	8008aa4 <printf_USB>
    return 100;
 8009556:	2364      	movs	r3, #100	@ 0x64
 8009558:	e00a      	b.n	8009570 <ascii_to_uint8+0x88>
  }
  if (value == clearDefsCmd) {
 800955a:	220f      	movs	r2, #15
 800955c:	18bb      	adds	r3, r7, r2
 800955e:	781b      	ldrb	r3, [r3, #0]
 8009560:	2b1f      	cmp	r3, #31
 8009562:	d102      	bne.n	800956a <ascii_to_uint8+0x82>
    value = ClearConfigCmd;
 8009564:	18bb      	adds	r3, r7, r2
 8009566:	22fd      	movs	r2, #253	@ 0xfd
 8009568:	701a      	strb	r2, [r3, #0]
  }
  return (uint8_t)value;
 800956a:	230f      	movs	r3, #15
 800956c:	18fb      	adds	r3, r7, r3
 800956e:	781b      	ldrb	r3, [r3, #0]
}
 8009570:	0018      	movs	r0, r3
 8009572:	46bd      	mov	sp, r7
 8009574:	b004      	add	sp, #16
 8009576:	bd80      	pop	{r7, pc}
 8009578:	0802ec40 	.word	0x0802ec40
 800957c:	0802bbf4 	.word	0x0802bbf4
 8009580:	0802bc1c 	.word	0x0802bc1c

08009584 <Process_USB_input>:

bool Process_USB_input(uint8_t* data) {
 8009584:	b590      	push	{r4, r7, lr}
 8009586:	b0d9      	sub	sp, #356	@ 0x164
 8009588:	af3e      	add	r7, sp, #248	@ 0xf8
 800958a:	6078      	str	r0, [r7, #4]
  uint8_t boxConfig[IdSize];
  static uint32_t len = 6;
  uint32_t length = GetUsbRxDataSize();
 800958c:	f019 fdc2 	bl	8023114 <GetUsbRxDataSize>
 8009590:	0003      	movs	r3, r0
 8009592:	65fb      	str	r3, [r7, #92]	@ 0x5c
  uint8_t r = 0;
 8009594:	2367      	movs	r3, #103	@ 0x67
 8009596:	18fb      	adds	r3, r7, r3
 8009598:	2200      	movs	r2, #0
 800959a:	701a      	strb	r2, [r3, #0]
  uint8_t i = 0;
 800959c:	2366      	movs	r3, #102	@ 0x66
 800959e:	18fb      	adds	r3, r7, r3
 80095a0:	2200      	movs	r2, #0
 80095a2:	701a      	strb	r2, [r3, #0]
  char Buffer[pwdMaxLength];
  uint8_t* message = (unsigned char*)strstr((const char*)data, PREAMBLE_F);  // zoek op $
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	2124      	movs	r1, #36	@ 0x24
 80095a8:	0018      	movs	r0, r3
 80095aa:	f01c ffc1 	bl	8026530 <strchr>
 80095ae:	0003      	movs	r3, r0
 80095b0:	65bb      	str	r3, [r7, #88]	@ 0x58
  if ((length == 1) && (message != NULL) && (len != 28)){
 80095b2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80095b4:	2b01      	cmp	r3, #1
 80095b6:	d109      	bne.n	80095cc <Process_USB_input+0x48>
 80095b8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80095ba:	2b00      	cmp	r3, #0
 80095bc:	d006      	beq.n	80095cc <Process_USB_input+0x48>
 80095be:	4bc6      	ldr	r3, [pc, #792]	@ (80098d8 <Process_USB_input+0x354>)
 80095c0:	681b      	ldr	r3, [r3, #0]
 80095c2:	2b1c      	cmp	r3, #28
 80095c4:	d002      	beq.n	80095cc <Process_USB_input+0x48>
      len = 28;
 80095c6:	4bc4      	ldr	r3, [pc, #784]	@ (80098d8 <Process_USB_input+0x354>)
 80095c8:	221c      	movs	r2, #28
 80095ca:	601a      	str	r2, [r3, #0]
  }
  message = (unsigned char*)strstr((const char*)data, PREAMBLE_S);  // zoek op S
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	2153      	movs	r1, #83	@ 0x53
 80095d0:	0018      	movs	r0, r3
 80095d2:	f01c ffad 	bl	8026530 <strchr>
 80095d6:	0003      	movs	r3, r0
 80095d8:	65bb      	str	r3, [r7, #88]	@ 0x58
  if ((length == 1) && (message != NULL) && (len != pwdMaxLength)){
 80095da:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80095dc:	2b01      	cmp	r3, #1
 80095de:	d109      	bne.n	80095f4 <Process_USB_input+0x70>
 80095e0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80095e2:	2b00      	cmp	r3, #0
 80095e4:	d006      	beq.n	80095f4 <Process_USB_input+0x70>
 80095e6:	4bbc      	ldr	r3, [pc, #752]	@ (80098d8 <Process_USB_input+0x354>)
 80095e8:	681b      	ldr	r3, [r3, #0]
 80095ea:	2b40      	cmp	r3, #64	@ 0x40
 80095ec:	d002      	beq.n	80095f4 <Process_USB_input+0x70>
      len = pwdMaxLength;
 80095ee:	4bba      	ldr	r3, [pc, #744]	@ (80098d8 <Process_USB_input+0x354>)
 80095f0:	2240      	movs	r2, #64	@ 0x40
 80095f2:	601a      	str	r2, [r3, #0]
  }
  message = (unsigned char*)strstr((const char*)data, PREAMBLE_L);  // Search for 'L'to toggle USB logging
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	214c      	movs	r1, #76	@ 0x4c
 80095f8:	0018      	movs	r0, r3
 80095fa:	f01c ff99 	bl	8026530 <strchr>
 80095fe:	0003      	movs	r3, r0
 8009600:	65bb      	str	r3, [r7, #88]	@ 0x58
  if ((length == 1) && (message != NULL)){
 8009602:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009604:	2b01      	cmp	r3, #1
 8009606:	d131      	bne.n	800966c <Process_USB_input+0xe8>
 8009608:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800960a:	2b00      	cmp	r3, #0
 800960c:	d02e      	beq.n	800966c <Process_USB_input+0xe8>
    usblog = !usblog; // log info to usb too
 800960e:	4bb3      	ldr	r3, [pc, #716]	@ (80098dc <Process_USB_input+0x358>)
 8009610:	781b      	ldrb	r3, [r3, #0]
 8009612:	1e5a      	subs	r2, r3, #1
 8009614:	4193      	sbcs	r3, r2
 8009616:	b2db      	uxtb	r3, r3
 8009618:	2201      	movs	r2, #1
 800961a:	4053      	eors	r3, r2
 800961c:	b2db      	uxtb	r3, r3
 800961e:	1c1a      	adds	r2, r3, #0
 8009620:	2301      	movs	r3, #1
 8009622:	4013      	ands	r3, r2
 8009624:	b2da      	uxtb	r2, r3
 8009626:	4bad      	ldr	r3, [pc, #692]	@ (80098dc <Process_USB_input+0x358>)
 8009628:	701a      	strb	r2, [r3, #0]
    HAL_FLASHEx_DATAEEPROM_Unlock();
 800962a:	f00c f997 	bl	801595c <HAL_FLASHEx_DATAEEPROM_Unlock>
    HAL_FLASHEx_DATAEEPROM_Program(FLASH_TYPEPROGRAMDATA_BYTE, USBlogstatusConfigAddr, usblog);
 800962e:	4bab      	ldr	r3, [pc, #684]	@ (80098dc <Process_USB_input+0x358>)
 8009630:	781b      	ldrb	r3, [r3, #0]
 8009632:	001a      	movs	r2, r3
 8009634:	4baa      	ldr	r3, [pc, #680]	@ (80098e0 <Process_USB_input+0x35c>)
 8009636:	0019      	movs	r1, r3
 8009638:	2000      	movs	r0, #0
 800963a:	f00c f9f7 	bl	8015a2c <HAL_FLASHEx_DATAEEPROM_Program>
    HAL_FLASHEx_DATAEEPROM_Lock();
 800963e:	f00c f9bb 	bl	80159b8 <HAL_FLASHEx_DATAEEPROM_Lock>
    printf_USB("\r\nSwitching USB logging to %s\r\n", usblog?"on":"off");
 8009642:	4ba6      	ldr	r3, [pc, #664]	@ (80098dc <Process_USB_input+0x358>)
 8009644:	781b      	ldrb	r3, [r3, #0]
 8009646:	2b00      	cmp	r3, #0
 8009648:	d001      	beq.n	800964e <Process_USB_input+0xca>
 800964a:	4ba6      	ldr	r3, [pc, #664]	@ (80098e4 <Process_USB_input+0x360>)
 800964c:	e000      	b.n	8009650 <Process_USB_input+0xcc>
 800964e:	4ba6      	ldr	r3, [pc, #664]	@ (80098e8 <Process_USB_input+0x364>)
 8009650:	4aa6      	ldr	r2, [pc, #664]	@ (80098ec <Process_USB_input+0x368>)
 8009652:	0019      	movs	r1, r3
 8009654:	0010      	movs	r0, r2
 8009656:	f7ff fa25 	bl	8008aa4 <printf_USB>
    length = 0;
 800965a:	2300      	movs	r3, #0
 800965c:	65fb      	str	r3, [r7, #92]	@ 0x5c
    data[0] = '\0';
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	2200      	movs	r2, #0
 8009662:	701a      	strb	r2, [r3, #0]
    ResetUsbRxDataSize();
 8009664:	f019 fd3e 	bl	80230e4 <ResetUsbRxDataSize>
    return true;
 8009668:	2301      	movs	r3, #1
 800966a:	e20b      	b.n	8009a84 <Process_USB_input+0x500>
  }
  message = (unsigned char*)strstr((const char*)data, PREAMBLE_B);  // Search for 'B'to show the build
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	2142      	movs	r1, #66	@ 0x42
 8009670:	0018      	movs	r0, r3
 8009672:	f01c ff5d 	bl	8026530 <strchr>
 8009676:	0003      	movs	r3, r0
 8009678:	65bb      	str	r3, [r7, #88]	@ 0x58
  if ((length == 1) && (message != NULL)){
 800967a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800967c:	2b01      	cmp	r3, #1
 800967e:	d10f      	bne.n	80096a0 <Process_USB_input+0x11c>
 8009680:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009682:	2b00      	cmp	r3, #0
 8009684:	d00c      	beq.n	80096a0 <Process_USB_input+0x11c>
    BinaryReleaseInfo();
 8009686:	f00a fc6d 	bl	8013f64 <BinaryReleaseInfo>
    showUpTime();
 800968a:	f000 fb8d 	bl	8009da8 <showUpTime>
    length = 0;
 800968e:	2300      	movs	r3, #0
 8009690:	65fb      	str	r3, [r7, #92]	@ 0x5c
    data[0] = '\0';
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	2200      	movs	r2, #0
 8009696:	701a      	strb	r2, [r3, #0]
    ResetUsbRxDataSize();
 8009698:	f019 fd24 	bl	80230e4 <ResetUsbRxDataSize>
    return true;
 800969c:	2301      	movs	r3, #1
 800969e:	e1f1      	b.n	8009a84 <Process_USB_input+0x500>
  }
  if ((length >= len) || (data[length-1] == 13)) {
 80096a0:	4b8d      	ldr	r3, [pc, #564]	@ (80098d8 <Process_USB_input+0x354>)
 80096a2:	681b      	ldr	r3, [r3, #0]
 80096a4:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80096a6:	429a      	cmp	r2, r3
 80096a8:	d207      	bcs.n	80096ba <Process_USB_input+0x136>
 80096aa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80096ac:	3b01      	subs	r3, #1
 80096ae:	687a      	ldr	r2, [r7, #4]
 80096b0:	18d3      	adds	r3, r2, r3
 80096b2:	781b      	ldrb	r3, [r3, #0]
 80096b4:	2b0d      	cmp	r3, #13
 80096b6:	d000      	beq.n	80096ba <Process_USB_input+0x136>
 80096b8:	e1d1      	b.n	8009a5e <Process_USB_input+0x4da>
    // 'S' is for entering a ASCII string
    if (data[length-1] == 13) {
 80096ba:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80096bc:	3b01      	subs	r3, #1
 80096be:	687a      	ldr	r2, [r7, #4]
 80096c0:	18d3      	adds	r3, r2, r3
 80096c2:	781b      	ldrb	r3, [r3, #0]
 80096c4:	2b0d      	cmp	r3, #13
 80096c6:	d109      	bne.n	80096dc <Process_USB_input+0x158>
      printf_USB("Inputstring detected, string terminated\r\n");
 80096c8:	4b89      	ldr	r3, [pc, #548]	@ (80098f0 <Process_USB_input+0x36c>)
 80096ca:	0018      	movs	r0, r3
 80096cc:	f7ff f9ea 	bl	8008aa4 <printf_USB>
      data[length-1] = 0;
 80096d0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80096d2:	3b01      	subs	r3, #1
 80096d4:	687a      	ldr	r2, [r7, #4]
 80096d6:	18d3      	adds	r3, r2, r3
 80096d8:	2200      	movs	r2, #0
 80096da:	701a      	strb	r2, [r3, #0]
    }
    if((data[0] == '#') || (data[0] == '$') || (data[0] == 'S') || (data[0] == 'E')) {
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	781b      	ldrb	r3, [r3, #0]
 80096e0:	2b23      	cmp	r3, #35	@ 0x23
 80096e2:	d00c      	beq.n	80096fe <Process_USB_input+0x17a>
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	781b      	ldrb	r3, [r3, #0]
 80096e8:	2b24      	cmp	r3, #36	@ 0x24
 80096ea:	d008      	beq.n	80096fe <Process_USB_input+0x17a>
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	781b      	ldrb	r3, [r3, #0]
 80096f0:	2b53      	cmp	r3, #83	@ 0x53
 80096f2:	d004      	beq.n	80096fe <Process_USB_input+0x17a>
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	781b      	ldrb	r3, [r3, #0]
 80096f8:	2b45      	cmp	r3, #69	@ 0x45
 80096fa:	d000      	beq.n	80096fe <Process_USB_input+0x17a>
 80096fc:	e191      	b.n	8009a22 <Process_USB_input+0x49e>
      received.Command = ascii_to_uint8(&data[1]);  // calculate the command number
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	3301      	adds	r3, #1
 8009702:	0018      	movs	r0, r3
 8009704:	f7ff fef0 	bl	80094e8 <ascii_to_uint8>
 8009708:	0003      	movs	r3, r0
 800970a:	001a      	movs	r2, r3
 800970c:	4b79      	ldr	r3, [pc, #484]	@ (80098f4 <Process_USB_input+0x370>)
 800970e:	701a      	strb	r2, [r3, #0]
      printf_USB("Command nr determined: %d", received.Command);
 8009710:	4b78      	ldr	r3, [pc, #480]	@ (80098f4 <Process_USB_input+0x370>)
 8009712:	781b      	ldrb	r3, [r3, #0]
 8009714:	001a      	movs	r2, r3
 8009716:	4b78      	ldr	r3, [pc, #480]	@ (80098f8 <Process_USB_input+0x374>)
 8009718:	0011      	movs	r1, r2
 800971a:	0018      	movs	r0, r3
 800971c:	f7ff f9c2 	bl	8008aa4 <printf_USB>
      if (received.Command == 100) {
 8009720:	4b74      	ldr	r3, [pc, #464]	@ (80098f4 <Process_USB_input+0x370>)
 8009722:	781b      	ldrb	r3, [r3, #0]
 8009724:	2b64      	cmp	r3, #100	@ 0x64
 8009726:	d11f      	bne.n	8009768 <Process_USB_input+0x1e4>
        printf_USB("\r\nCommandvalue out of range.\r\n");
 8009728:	4b74      	ldr	r3, [pc, #464]	@ (80098fc <Process_USB_input+0x378>)
 800972a:	0018      	movs	r0, r3
 800972c:	f7ff f9ba 	bl	8008aa4 <printf_USB>
        ResetUsbRxDataSize();
 8009730:	f019 fcd8 	bl	80230e4 <ResetUsbRxDataSize>
        PC_show_Keys();
 8009734:	f7ff f9f6 	bl	8008b24 <PC_show_Keys>
        for (uint8_t i=0; i < 32; i++) {
 8009738:	2365      	movs	r3, #101	@ 0x65
 800973a:	18fb      	adds	r3, r7, r3
 800973c:	2200      	movs	r2, #0
 800973e:	701a      	strb	r2, [r3, #0]
 8009740:	e00b      	b.n	800975a <Process_USB_input+0x1d6>
          data[i] = '\0';
 8009742:	2165      	movs	r1, #101	@ 0x65
 8009744:	187b      	adds	r3, r7, r1
 8009746:	781b      	ldrb	r3, [r3, #0]
 8009748:	687a      	ldr	r2, [r7, #4]
 800974a:	18d3      	adds	r3, r2, r3
 800974c:	2200      	movs	r2, #0
 800974e:	701a      	strb	r2, [r3, #0]
        for (uint8_t i=0; i < 32; i++) {
 8009750:	187b      	adds	r3, r7, r1
 8009752:	781a      	ldrb	r2, [r3, #0]
 8009754:	187b      	adds	r3, r7, r1
 8009756:	3201      	adds	r2, #1
 8009758:	701a      	strb	r2, [r3, #0]
 800975a:	2365      	movs	r3, #101	@ 0x65
 800975c:	18fb      	adds	r3, r7, r3
 800975e:	781b      	ldrb	r3, [r3, #0]
 8009760:	2b1f      	cmp	r3, #31
 8009762:	d9ee      	bls.n	8009742 <Process_USB_input+0x1be>
        }
        return false; // value out of range
 8009764:	2300      	movs	r3, #0
 8009766:	e18d      	b.n	8009a84 <Process_USB_input+0x500>
      }
      if (data[3] == ',') {
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	3303      	adds	r3, #3
 800976c:	781b      	ldrb	r3, [r3, #0]
 800976e:	2b2c      	cmp	r3, #44	@ 0x2c
 8009770:	d000      	beq.n	8009774 <Process_USB_input+0x1f0>
 8009772:	e152      	b.n	8009a1a <Process_USB_input+0x496>
        if ((data[0] == 'S') || (data[0] == 'E')) {
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	781b      	ldrb	r3, [r3, #0]
 8009778:	2b53      	cmp	r3, #83	@ 0x53
 800977a:	d003      	beq.n	8009784 <Process_USB_input+0x200>
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	781b      	ldrb	r3, [r3, #0]
 8009780:	2b45      	cmp	r3, #69	@ 0x45
 8009782:	d10a      	bne.n	800979a <Process_USB_input+0x216>
          if ((data[0] == 'E') && (received.Command == clearDefsCmd)) {
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	781b      	ldrb	r3, [r3, #0]
 8009788:	2b45      	cmp	r3, #69	@ 0x45
 800978a:	d106      	bne.n	800979a <Process_USB_input+0x216>
 800978c:	4b59      	ldr	r3, [pc, #356]	@ (80098f4 <Process_USB_input+0x370>)
 800978e:	781b      	ldrb	r3, [r3, #0]
 8009790:	2b1f      	cmp	r3, #31
 8009792:	d102      	bne.n	800979a <Process_USB_input+0x216>
//            printf_USB("\r\nClear EEPROM request\r\n");
            received.Command = ClearConfigCmd;
 8009794:	4b57      	ldr	r3, [pc, #348]	@ (80098f4 <Process_USB_input+0x370>)
 8009796:	22fd      	movs	r2, #253	@ 0xfd
 8009798:	701a      	strb	r2, [r3, #0]
          }
        }
        if ((data[0] == '$') || (data[0] == '#')) {
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	781b      	ldrb	r3, [r3, #0]
 800979e:	2b24      	cmp	r3, #36	@ 0x24
 80097a0:	d004      	beq.n	80097ac <Process_USB_input+0x228>
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	781b      	ldrb	r3, [r3, #0]
 80097a6:	2b23      	cmp	r3, #35	@ 0x23
 80097a8:	d000      	beq.n	80097ac <Process_USB_input+0x228>
 80097aa:	e0bd      	b.n	8009928 <Process_USB_input+0x3a4>
          for (i=4; i < len; i++) {
 80097ac:	2366      	movs	r3, #102	@ 0x66
 80097ae:	18fb      	adds	r3, r7, r3
 80097b0:	2204      	movs	r2, #4
 80097b2:	701a      	strb	r2, [r3, #0]
 80097b4:	e0b0      	b.n	8009918 <Process_USB_input+0x394>
            HAL_Delay(10);
 80097b6:	200a      	movs	r0, #10
 80097b8:	f00b f8c2 	bl	8014940 <HAL_Delay>
            if (isxdigit(data[i])) {
 80097bc:	2166      	movs	r1, #102	@ 0x66
 80097be:	187b      	adds	r3, r7, r1
 80097c0:	781b      	ldrb	r3, [r3, #0]
 80097c2:	687a      	ldr	r2, [r7, #4]
 80097c4:	18d3      	adds	r3, r2, r3
 80097c6:	781b      	ldrb	r3, [r3, #0]
 80097c8:	1c5a      	adds	r2, r3, #1
 80097ca:	4b4d      	ldr	r3, [pc, #308]	@ (8009900 <Process_USB_input+0x37c>)
 80097cc:	18d3      	adds	r3, r2, r3
 80097ce:	781b      	ldrb	r3, [r3, #0]
 80097d0:	001a      	movs	r2, r3
 80097d2:	2344      	movs	r3, #68	@ 0x44
 80097d4:	4013      	ands	r3, r2
 80097d6:	d05c      	beq.n	8009892 <Process_USB_input+0x30e>
              result = (result << 4) | (isdigit(data[i]) ? data[i] - '0' : toupper(data[i]) - 'A' + 10);
 80097d8:	4b4a      	ldr	r3, [pc, #296]	@ (8009904 <Process_USB_input+0x380>)
 80097da:	781b      	ldrb	r3, [r3, #0]
 80097dc:	b25b      	sxtb	r3, r3
 80097de:	011b      	lsls	r3, r3, #4
 80097e0:	b25a      	sxtb	r2, r3
 80097e2:	0008      	movs	r0, r1
 80097e4:	187b      	adds	r3, r7, r1
 80097e6:	781b      	ldrb	r3, [r3, #0]
 80097e8:	6879      	ldr	r1, [r7, #4]
 80097ea:	18cb      	adds	r3, r1, r3
 80097ec:	781b      	ldrb	r3, [r3, #0]
 80097ee:	1c59      	adds	r1, r3, #1
 80097f0:	4b43      	ldr	r3, [pc, #268]	@ (8009900 <Process_USB_input+0x37c>)
 80097f2:	18cb      	adds	r3, r1, r3
 80097f4:	781b      	ldrb	r3, [r3, #0]
 80097f6:	0019      	movs	r1, r3
 80097f8:	2304      	movs	r3, #4
 80097fa:	400b      	ands	r3, r1
 80097fc:	d008      	beq.n	8009810 <Process_USB_input+0x28c>
 80097fe:	183b      	adds	r3, r7, r0
 8009800:	781b      	ldrb	r3, [r3, #0]
 8009802:	6879      	ldr	r1, [r7, #4]
 8009804:	18cb      	adds	r3, r1, r3
 8009806:	781b      	ldrb	r3, [r3, #0]
 8009808:	3b30      	subs	r3, #48	@ 0x30
 800980a:	b2db      	uxtb	r3, r3
 800980c:	b25b      	sxtb	r3, r3
 800980e:	e01e      	b.n	800984e <Process_USB_input+0x2ca>
 8009810:	2366      	movs	r3, #102	@ 0x66
 8009812:	18fb      	adds	r3, r7, r3
 8009814:	781b      	ldrb	r3, [r3, #0]
 8009816:	6879      	ldr	r1, [r7, #4]
 8009818:	18c9      	adds	r1, r1, r3
 800981a:	2056      	movs	r0, #86	@ 0x56
 800981c:	183b      	adds	r3, r7, r0
 800981e:	7809      	ldrb	r1, [r1, #0]
 8009820:	7019      	strb	r1, [r3, #0]
 8009822:	183b      	adds	r3, r7, r0
 8009824:	781b      	ldrb	r3, [r3, #0]
 8009826:	1c59      	adds	r1, r3, #1
 8009828:	4b35      	ldr	r3, [pc, #212]	@ (8009900 <Process_USB_input+0x37c>)
 800982a:	18cb      	adds	r3, r1, r3
 800982c:	781b      	ldrb	r3, [r3, #0]
 800982e:	0019      	movs	r1, r3
 8009830:	2303      	movs	r3, #3
 8009832:	400b      	ands	r3, r1
 8009834:	2b02      	cmp	r3, #2
 8009836:	d103      	bne.n	8009840 <Process_USB_input+0x2bc>
 8009838:	183b      	adds	r3, r7, r0
 800983a:	781b      	ldrb	r3, [r3, #0]
 800983c:	3b20      	subs	r3, #32
 800983e:	e002      	b.n	8009846 <Process_USB_input+0x2c2>
 8009840:	2356      	movs	r3, #86	@ 0x56
 8009842:	18fb      	adds	r3, r7, r3
 8009844:	781b      	ldrb	r3, [r3, #0]
 8009846:	b2db      	uxtb	r3, r3
 8009848:	3b37      	subs	r3, #55	@ 0x37
 800984a:	b2db      	uxtb	r3, r3
 800984c:	b25b      	sxtb	r3, r3
 800984e:	4313      	orrs	r3, r2
 8009850:	b25b      	sxtb	r3, r3
 8009852:	b2da      	uxtb	r2, r3
 8009854:	4b2b      	ldr	r3, [pc, #172]	@ (8009904 <Process_USB_input+0x380>)
 8009856:	701a      	strb	r2, [r3, #0]
//              printf_USB("Result is 0x%02X\r\n", result);
              HAL_Delay(10);
 8009858:	200a      	movs	r0, #10
 800985a:	f00b f871 	bl	8014940 <HAL_Delay>
              if (len == 28) {
 800985e:	4b1e      	ldr	r3, [pc, #120]	@ (80098d8 <Process_USB_input+0x354>)
 8009860:	681b      	ldr	r3, [r3, #0]
 8009862:	2b1c      	cmp	r3, #28
 8009864:	d152      	bne.n	800990c <Process_USB_input+0x388>
                if ((i % 2) == 1) {
 8009866:	2366      	movs	r3, #102	@ 0x66
 8009868:	18fb      	adds	r3, r7, r3
 800986a:	781b      	ldrb	r3, [r3, #0]
 800986c:	2201      	movs	r2, #1
 800986e:	4013      	ands	r3, r2
 8009870:	b2db      	uxtb	r3, r3
 8009872:	2b00      	cmp	r3, #0
 8009874:	d04a      	beq.n	800990c <Process_USB_input+0x388>
                  data[r] = result;
 8009876:	2167      	movs	r1, #103	@ 0x67
 8009878:	187b      	adds	r3, r7, r1
 800987a:	781b      	ldrb	r3, [r3, #0]
 800987c:	687a      	ldr	r2, [r7, #4]
 800987e:	18d3      	adds	r3, r2, r3
 8009880:	4a20      	ldr	r2, [pc, #128]	@ (8009904 <Process_USB_input+0x380>)
 8009882:	7812      	ldrb	r2, [r2, #0]
 8009884:	701a      	strb	r2, [r3, #0]
//                  printf_USB("data[%d] = 0x%02X",r, data[r]);
                  r++;
 8009886:	187b      	adds	r3, r7, r1
 8009888:	781a      	ldrb	r2, [r3, #0]
 800988a:	187b      	adds	r3, r7, r1
 800988c:	3201      	adds	r2, #1
 800988e:	701a      	strb	r2, [r3, #0]
 8009890:	e03c      	b.n	800990c <Process_USB_input+0x388>
                }
              }
            }
            else {
              printf_USB("\r\nInvalid hexadecimal character: '%c at position %d\r\n", data[i], i);
 8009892:	2066      	movs	r0, #102	@ 0x66
 8009894:	183b      	adds	r3, r7, r0
 8009896:	781b      	ldrb	r3, [r3, #0]
 8009898:	687a      	ldr	r2, [r7, #4]
 800989a:	18d3      	adds	r3, r2, r3
 800989c:	781b      	ldrb	r3, [r3, #0]
 800989e:	0019      	movs	r1, r3
 80098a0:	183b      	adds	r3, r7, r0
 80098a2:	781a      	ldrb	r2, [r3, #0]
 80098a4:	4b18      	ldr	r3, [pc, #96]	@ (8009908 <Process_USB_input+0x384>)
 80098a6:	0018      	movs	r0, r3
 80098a8:	f7ff f8fc 	bl	8008aa4 <printf_USB>
              ResetUsbRxDataSize();
 80098ac:	f019 fc1a 	bl	80230e4 <ResetUsbRxDataSize>
              PC_show_Keys();
 80098b0:	f7ff f938 	bl	8008b24 <PC_show_Keys>
              for (uint8_t i=0; i < length; i++) {
 80098b4:	2157      	movs	r1, #87	@ 0x57
 80098b6:	187b      	adds	r3, r7, r1
 80098b8:	2200      	movs	r2, #0
 80098ba:	701a      	strb	r2, [r3, #0]
 80098bc:	46c0      	nop			@ (mov r8, r8)
 80098be:	187b      	adds	r3, r7, r1
 80098c0:	781b      	ldrb	r3, [r3, #0]
 80098c2:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80098c4:	429a      	cmp	r2, r3
 80098c6:	d921      	bls.n	800990c <Process_USB_input+0x388>
                data[i] = '\0';
 80098c8:	187b      	adds	r3, r7, r1
 80098ca:	781b      	ldrb	r3, [r3, #0]
 80098cc:	687a      	ldr	r2, [r7, #4]
 80098ce:	18d3      	adds	r3, r2, r3
 80098d0:	2200      	movs	r2, #0
 80098d2:	701a      	strb	r2, [r3, #0]
                return false; // Of een andere foutwaarde
 80098d4:	2300      	movs	r3, #0
 80098d6:	e0d5      	b.n	8009a84 <Process_USB_input+0x500>
 80098d8:	20000038 	.word	0x20000038
 80098dc:	200010f7 	.word	0x200010f7
 80098e0:	08080194 	.word	0x08080194
 80098e4:	0802bb4c 	.word	0x0802bb4c
 80098e8:	0802bb50 	.word	0x0802bb50
 80098ec:	0802bc38 	.word	0x0802bc38
 80098f0:	0802bc58 	.word	0x0802bc58
 80098f4:	20000940 	.word	0x20000940
 80098f8:	0802bc84 	.word	0x0802bc84
 80098fc:	0802bca0 	.word	0x0802bca0
 8009900:	0802ec40 	.word	0x0802ec40
 8009904:	20000a44 	.word	0x20000a44
 8009908:	0802bcc0 	.word	0x0802bcc0
          for (i=4; i < len; i++) {
 800990c:	2166      	movs	r1, #102	@ 0x66
 800990e:	187b      	adds	r3, r7, r1
 8009910:	781a      	ldrb	r2, [r3, #0]
 8009912:	187b      	adds	r3, r7, r1
 8009914:	3201      	adds	r2, #1
 8009916:	701a      	strb	r2, [r3, #0]
 8009918:	2366      	movs	r3, #102	@ 0x66
 800991a:	18fb      	adds	r3, r7, r3
 800991c:	781a      	ldrb	r2, [r3, #0]
 800991e:	4b5b      	ldr	r3, [pc, #364]	@ (8009a8c <Process_USB_input+0x508>)
 8009920:	681b      	ldr	r3, [r3, #0]
 8009922:	429a      	cmp	r2, r3
 8009924:	d200      	bcs.n	8009928 <Process_USB_input+0x3a4>
 8009926:	e746      	b.n	80097b6 <Process_USB_input+0x232>
              }
            }
          }  // end for
//          printf_USB("\r\n");
        }
        if (len < pwdMaxLength) {
 8009928:	4b58      	ldr	r3, [pc, #352]	@ (8009a8c <Process_USB_input+0x508>)
 800992a:	681b      	ldr	r3, [r3, #0]
 800992c:	2b3f      	cmp	r3, #63	@ 0x3f
 800992e:	d825      	bhi.n	800997c <Process_USB_input+0x3f8>
          if (len == 6) {
 8009930:	4b56      	ldr	r3, [pc, #344]	@ (8009a8c <Process_USB_input+0x508>)
 8009932:	681b      	ldr	r3, [r3, #0]
 8009934:	2b06      	cmp	r3, #6
 8009936:	d114      	bne.n	8009962 <Process_USB_input+0x3de>
            ReadUint8ArrayEEprom(BoxConfigAddr, boxConfig, IdSize);
 8009938:	2448      	movs	r4, #72	@ 0x48
 800993a:	193b      	adds	r3, r7, r4
 800993c:	4854      	ldr	r0, [pc, #336]	@ (8009a90 <Process_USB_input+0x50c>)
 800993e:	220c      	movs	r2, #12
 8009940:	0019      	movs	r1, r3
 8009942:	f002 fbd9 	bl	800c0f8 <ReadUint8ArrayEEprom>
            boxConfig[11] = result; //overwrite the last byte of the key
 8009946:	4b53      	ldr	r3, [pc, #332]	@ (8009a94 <Process_USB_input+0x510>)
 8009948:	781a      	ldrb	r2, [r3, #0]
 800994a:	0021      	movs	r1, r4
 800994c:	187b      	adds	r3, r7, r1
 800994e:	72da      	strb	r2, [r3, #11]
            memcpy(received.Payload, boxConfig, IdSize);
 8009950:	4b51      	ldr	r3, [pc, #324]	@ (8009a98 <Process_USB_input+0x514>)
 8009952:	2202      	movs	r2, #2
 8009954:	1879      	adds	r1, r7, r1
 8009956:	189b      	adds	r3, r3, r2
 8009958:	220c      	movs	r2, #12
 800995a:	0018      	movs	r0, r3
 800995c:	f01c febc 	bl	80266d8 <memcpy>
 8009960:	e005      	b.n	800996e <Process_USB_input+0x3ea>
          }
          else {
            memcpy(received.Payload, data, IdSize);
 8009962:	6879      	ldr	r1, [r7, #4]
 8009964:	4b4d      	ldr	r3, [pc, #308]	@ (8009a9c <Process_USB_input+0x518>)
 8009966:	220c      	movs	r2, #12
 8009968:	0018      	movs	r0, r3
 800996a:	f01c feb5 	bl	80266d8 <memcpy>
          }
          received.Payload[12] = '\0';
 800996e:	4b4a      	ldr	r3, [pc, #296]	@ (8009a98 <Process_USB_input+0x514>)
 8009970:	2200      	movs	r2, #0
 8009972:	739a      	strb	r2, [r3, #14]
          received.PayloadLength = IdSize;
 8009974:	4b48      	ldr	r3, [pc, #288]	@ (8009a98 <Process_USB_input+0x514>)
 8009976:	220c      	movs	r2, #12
 8009978:	705a      	strb	r2, [r3, #1]
 800997a:	e005      	b.n	8009988 <Process_USB_input+0x404>
        }
        else {
          received.PayloadLength = length-4;  // The string terminator counts
 800997c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800997e:	b2db      	uxtb	r3, r3
 8009980:	3b04      	subs	r3, #4
 8009982:	b2da      	uxtb	r2, r3
 8009984:	4b44      	ldr	r3, [pc, #272]	@ (8009a98 <Process_USB_input+0x514>)
 8009986:	705a      	strb	r2, [r3, #1]
        }
        if ((len < pwdMaxLength) && (len != 6))  {
 8009988:	4b40      	ldr	r3, [pc, #256]	@ (8009a8c <Process_USB_input+0x508>)
 800998a:	681b      	ldr	r3, [r3, #0]
 800998c:	2b3f      	cmp	r3, #63	@ 0x3f
 800998e:	d80b      	bhi.n	80099a8 <Process_USB_input+0x424>
 8009990:	4b3e      	ldr	r3, [pc, #248]	@ (8009a8c <Process_USB_input+0x508>)
 8009992:	681b      	ldr	r3, [r3, #0]
 8009994:	2b06      	cmp	r3, #6
 8009996:	d007      	beq.n	80099a8 <Process_USB_input+0x424>
          uint8ArrayToString(Buffer, received.Payload);
 8009998:	4a40      	ldr	r2, [pc, #256]	@ (8009a9c <Process_USB_input+0x518>)
 800999a:	2308      	movs	r3, #8
 800999c:	18fb      	adds	r3, r7, r3
 800999e:	0011      	movs	r1, r2
 80099a0:	0018      	movs	r0, r3
 80099a2:	f7fb fd21 	bl	80053e8 <uint8ArrayToString>
 80099a6:	e00c      	b.n	80099c2 <Process_USB_input+0x43e>
        }
        else if (len == pwdMaxLength) {
 80099a8:	4b38      	ldr	r3, [pc, #224]	@ (8009a8c <Process_USB_input+0x508>)
 80099aa:	681b      	ldr	r3, [r3, #0]
 80099ac:	2b40      	cmp	r3, #64	@ 0x40
 80099ae:	d108      	bne.n	80099c2 <Process_USB_input+0x43e>
          memcpy(received.Payload, &data[4], received.PayloadLength);
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	1d19      	adds	r1, r3, #4
 80099b4:	4b38      	ldr	r3, [pc, #224]	@ (8009a98 <Process_USB_input+0x514>)
 80099b6:	785b      	ldrb	r3, [r3, #1]
 80099b8:	001a      	movs	r2, r3
 80099ba:	4b38      	ldr	r3, [pc, #224]	@ (8009a9c <Process_USB_input+0x518>)
 80099bc:	0018      	movs	r0, r3
 80099be:	f01c fe8b 	bl	80266d8 <memcpy>
        }
        ProcessCmd(received);
 80099c2:	4c35      	ldr	r4, [pc, #212]	@ (8009a98 <Process_USB_input+0x514>)
 80099c4:	466b      	mov	r3, sp
 80099c6:	0018      	movs	r0, r3
 80099c8:	0023      	movs	r3, r4
 80099ca:	3310      	adds	r3, #16
 80099cc:	22f4      	movs	r2, #244	@ 0xf4
 80099ce:	0019      	movs	r1, r3
 80099d0:	f01c fe82 	bl	80266d8 <memcpy>
 80099d4:	6820      	ldr	r0, [r4, #0]
 80099d6:	6861      	ldr	r1, [r4, #4]
 80099d8:	68a2      	ldr	r2, [r4, #8]
 80099da:	68e3      	ldr	r3, [r4, #12]
 80099dc:	f7fe fd9c 	bl	8008518 <ProcessCmd>
        ResetUsbRxDataSize();
 80099e0:	f019 fb80 	bl	80230e4 <ResetUsbRxDataSize>
        PC_show_Keys();
 80099e4:	f7ff f89e 	bl	8008b24 <PC_show_Keys>
        for (uint8_t i=0; i < length; i++) {
 80099e8:	2364      	movs	r3, #100	@ 0x64
 80099ea:	18fb      	adds	r3, r7, r3
 80099ec:	2200      	movs	r2, #0
 80099ee:	701a      	strb	r2, [r3, #0]
 80099f0:	e00b      	b.n	8009a0a <Process_USB_input+0x486>
          data[i] = '\0';
 80099f2:	2164      	movs	r1, #100	@ 0x64
 80099f4:	187b      	adds	r3, r7, r1
 80099f6:	781b      	ldrb	r3, [r3, #0]
 80099f8:	687a      	ldr	r2, [r7, #4]
 80099fa:	18d3      	adds	r3, r2, r3
 80099fc:	2200      	movs	r2, #0
 80099fe:	701a      	strb	r2, [r3, #0]
        for (uint8_t i=0; i < length; i++) {
 8009a00:	187b      	adds	r3, r7, r1
 8009a02:	781a      	ldrb	r2, [r3, #0]
 8009a04:	187b      	adds	r3, r7, r1
 8009a06:	3201      	adds	r2, #1
 8009a08:	701a      	strb	r2, [r3, #0]
 8009a0a:	2364      	movs	r3, #100	@ 0x64
 8009a0c:	18fb      	adds	r3, r7, r3
 8009a0e:	781b      	ldrb	r3, [r3, #0]
 8009a10:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8009a12:	429a      	cmp	r2, r3
 8009a14:	d8ed      	bhi.n	80099f2 <Process_USB_input+0x46e>
        }
        return true;
 8009a16:	2301      	movs	r3, #1
 8009a18:	e034      	b.n	8009a84 <Process_USB_input+0x500>
      }
      else {
        printf_USB("\r\nInvalid input; comma not found\r\n");
 8009a1a:	4b21      	ldr	r3, [pc, #132]	@ (8009aa0 <Process_USB_input+0x51c>)
 8009a1c:	0018      	movs	r0, r3
 8009a1e:	f7ff f841 	bl	8008aa4 <printf_USB>
//        for (uint8_t i=0; i < length; i++) {
//          data[i] = '\0';
//        }
      }
    }
    PC_show_Keys();
 8009a22:	f7ff f87f 	bl	8008b24 <PC_show_Keys>
    ResetUsbRxDataSize();
 8009a26:	f019 fb5d 	bl	80230e4 <ResetUsbRxDataSize>
    for (uint8_t i=0; i < length; i++) {
 8009a2a:	2363      	movs	r3, #99	@ 0x63
 8009a2c:	18fb      	adds	r3, r7, r3
 8009a2e:	2200      	movs	r2, #0
 8009a30:	701a      	strb	r2, [r3, #0]
 8009a32:	e00b      	b.n	8009a4c <Process_USB_input+0x4c8>
      data[i] = '\0';
 8009a34:	2163      	movs	r1, #99	@ 0x63
 8009a36:	187b      	adds	r3, r7, r1
 8009a38:	781b      	ldrb	r3, [r3, #0]
 8009a3a:	687a      	ldr	r2, [r7, #4]
 8009a3c:	18d3      	adds	r3, r2, r3
 8009a3e:	2200      	movs	r2, #0
 8009a40:	701a      	strb	r2, [r3, #0]
    for (uint8_t i=0; i < length; i++) {
 8009a42:	187b      	adds	r3, r7, r1
 8009a44:	781a      	ldrb	r2, [r3, #0]
 8009a46:	187b      	adds	r3, r7, r1
 8009a48:	3201      	adds	r2, #1
 8009a4a:	701a      	strb	r2, [r3, #0]
 8009a4c:	2363      	movs	r3, #99	@ 0x63
 8009a4e:	18fb      	adds	r3, r7, r3
 8009a50:	781b      	ldrb	r3, [r3, #0]
 8009a52:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8009a54:	429a      	cmp	r2, r3
 8009a56:	d8ed      	bhi.n	8009a34 <Process_USB_input+0x4b0>
    }
    len = 6;
 8009a58:	4b0c      	ldr	r3, [pc, #48]	@ (8009a8c <Process_USB_input+0x508>)
 8009a5a:	2206      	movs	r2, #6
 8009a5c:	601a      	str	r2, [r3, #0]
  }
  if (formerlength != length) {
 8009a5e:	4b11      	ldr	r3, [pc, #68]	@ (8009aa4 <Process_USB_input+0x520>)
 8009a60:	681b      	ldr	r3, [r3, #0]
 8009a62:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8009a64:	429a      	cmp	r2, r3
 8009a66:	d008      	beq.n	8009a7a <Process_USB_input+0x4f6>
    printf_USB("USB input: %s\r", (const char*)data);
 8009a68:	687a      	ldr	r2, [r7, #4]
 8009a6a:	4b0f      	ldr	r3, [pc, #60]	@ (8009aa8 <Process_USB_input+0x524>)
 8009a6c:	0011      	movs	r1, r2
 8009a6e:	0018      	movs	r0, r3
 8009a70:	f7ff f818 	bl	8008aa4 <printf_USB>
    formerlength = length;
 8009a74:	4b0b      	ldr	r3, [pc, #44]	@ (8009aa4 <Process_USB_input+0x520>)
 8009a76:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8009a78:	601a      	str	r2, [r3, #0]
  }
  GetUsbRxNextChunk(length);
 8009a7a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009a7c:	0018      	movs	r0, r3
 8009a7e:	f019 fb53 	bl	8023128 <GetUsbRxNextChunk>
  return false;
 8009a82:	2300      	movs	r3, #0
}
 8009a84:	0018      	movs	r0, r3
 8009a86:	46bd      	mov	sp, r7
 8009a88:	b01b      	add	sp, #108	@ 0x6c
 8009a8a:	bd90      	pop	{r4, r7, pc}
 8009a8c:	20000038 	.word	0x20000038
 8009a90:	08080000 	.word	0x08080000
 8009a94:	20000a44 	.word	0x20000a44
 8009a98:	20000940 	.word	0x20000940
 8009a9c:	20000942 	.word	0x20000942
 8009aa0:	0802bcf8 	.word	0x0802bcf8
 8009aa4:	20000a48 	.word	0x20000a48
 8009aa8:	0802bd1c 	.word	0x0802bd1c

08009aac <ReadBatteryVoltage>:

  ADC_ChannelConfTypeDef sConfig = {0};
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  uint32_t Vref = 2915;   // reference voltage in mV

float ReadBatteryVoltage(void){
 8009aac:	b580      	push	{r7, lr}
 8009aae:	af00      	add	r7, sp, #0
  /* Channel 14 is de battery voltage */
  static uint32_t value = 0;
  static float trueValue = 0.0;
  sConfig.Channel = ADC_CHANNEL_14;
 8009ab0:	4b26      	ldr	r3, [pc, #152]	@ (8009b4c <ReadBatteryVoltage+0xa0>)
 8009ab2:	4a27      	ldr	r2, [pc, #156]	@ (8009b50 <ReadBatteryVoltage+0xa4>)
 8009ab4:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8009ab6:	4b25      	ldr	r3, [pc, #148]	@ (8009b4c <ReadBatteryVoltage+0xa0>)
 8009ab8:	2280      	movs	r2, #128	@ 0x80
 8009aba:	0152      	lsls	r2, r2, #5
 8009abc:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 8009abe:	4a23      	ldr	r2, [pc, #140]	@ (8009b4c <ReadBatteryVoltage+0xa0>)
 8009ac0:	4b24      	ldr	r3, [pc, #144]	@ (8009b54 <ReadBatteryVoltage+0xa8>)
 8009ac2:	0011      	movs	r1, r2
 8009ac4:	0018      	movs	r0, r3
 8009ac6:	f00b f9eb 	bl	8014ea0 <HAL_ADC_ConfigChannel>
 8009aca:	1e03      	subs	r3, r0, #0
 8009acc:	d001      	beq.n	8009ad2 <ReadBatteryVoltage+0x26>
    Error_Handler();
 8009ace:	f003 fc6b 	bl	800d3a8 <Error_Handler>
  }
  HAL_ADC_Start(&hadc);
 8009ad2:	4b20      	ldr	r3, [pc, #128]	@ (8009b54 <ReadBatteryVoltage+0xa8>)
 8009ad4:	0018      	movs	r0, r3
 8009ad6:	f00b f8e7 	bl	8014ca8 <HAL_ADC_Start>
  HAL_ADC_PollForConversion(&hadc, 1);
 8009ada:	4b1e      	ldr	r3, [pc, #120]	@ (8009b54 <ReadBatteryVoltage+0xa8>)
 8009adc:	2101      	movs	r1, #1
 8009ade:	0018      	movs	r0, r3
 8009ae0:	f00b f936 	bl	8014d50 <HAL_ADC_PollForConversion>
  value = (HAL_ADC_GetValue(&hadc)*Vref*2)/4095;
 8009ae4:	4b1b      	ldr	r3, [pc, #108]	@ (8009b54 <ReadBatteryVoltage+0xa8>)
 8009ae6:	0018      	movs	r0, r3
 8009ae8:	f00b f9ce 	bl	8014e88 <HAL_ADC_GetValue>
 8009aec:	0002      	movs	r2, r0
 8009aee:	4b1a      	ldr	r3, [pc, #104]	@ (8009b58 <ReadBatteryVoltage+0xac>)
 8009af0:	681b      	ldr	r3, [r3, #0]
 8009af2:	4353      	muls	r3, r2
 8009af4:	005b      	lsls	r3, r3, #1
 8009af6:	4919      	ldr	r1, [pc, #100]	@ (8009b5c <ReadBatteryVoltage+0xb0>)
 8009af8:	0018      	movs	r0, r3
 8009afa:	f7f6 fb53 	bl	80001a4 <__udivsi3>
 8009afe:	0003      	movs	r3, r0
 8009b00:	001a      	movs	r2, r3
 8009b02:	4b17      	ldr	r3, [pc, #92]	@ (8009b60 <ReadBatteryVoltage+0xb4>)
 8009b04:	601a      	str	r2, [r3, #0]
  trueValue = (float)value/1000.0;
 8009b06:	4b16      	ldr	r3, [pc, #88]	@ (8009b60 <ReadBatteryVoltage+0xb4>)
 8009b08:	681b      	ldr	r3, [r3, #0]
 8009b0a:	0018      	movs	r0, r3
 8009b0c:	f7f7 fedc 	bl	80018c8 <__aeabi_ui2f>
 8009b10:	1c03      	adds	r3, r0, #0
 8009b12:	4914      	ldr	r1, [pc, #80]	@ (8009b64 <ReadBatteryVoltage+0xb8>)
 8009b14:	1c18      	adds	r0, r3, #0
 8009b16:	f7f7 f8c5 	bl	8000ca4 <__aeabi_fdiv>
 8009b1a:	1c03      	adds	r3, r0, #0
 8009b1c:	1c1a      	adds	r2, r3, #0
 8009b1e:	4b12      	ldr	r3, [pc, #72]	@ (8009b68 <ReadBatteryVoltage+0xbc>)
 8009b20:	601a      	str	r2, [r3, #0]
  /* Disable Channel 14 */
  sConfig.Channel = ADC_CHANNEL_14;
 8009b22:	4b0a      	ldr	r3, [pc, #40]	@ (8009b4c <ReadBatteryVoltage+0xa0>)
 8009b24:	4a0a      	ldr	r2, [pc, #40]	@ (8009b50 <ReadBatteryVoltage+0xa4>)
 8009b26:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_NONE;
 8009b28:	4b08      	ldr	r3, [pc, #32]	@ (8009b4c <ReadBatteryVoltage+0xa0>)
 8009b2a:	4a10      	ldr	r2, [pc, #64]	@ (8009b6c <ReadBatteryVoltage+0xc0>)
 8009b2c:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 8009b2e:	4a07      	ldr	r2, [pc, #28]	@ (8009b4c <ReadBatteryVoltage+0xa0>)
 8009b30:	4b08      	ldr	r3, [pc, #32]	@ (8009b54 <ReadBatteryVoltage+0xa8>)
 8009b32:	0011      	movs	r1, r2
 8009b34:	0018      	movs	r0, r3
 8009b36:	f00b f9b3 	bl	8014ea0 <HAL_ADC_ConfigChannel>
 8009b3a:	1e03      	subs	r3, r0, #0
 8009b3c:	d001      	beq.n	8009b42 <ReadBatteryVoltage+0x96>
    Error_Handler();
 8009b3e:	f003 fc33 	bl	800d3a8 <Error_Handler>
  }
  return trueValue;
 8009b42:	4b09      	ldr	r3, [pc, #36]	@ (8009b68 <ReadBatteryVoltage+0xbc>)
 8009b44:	681b      	ldr	r3, [r3, #0]
 }
 8009b46:	1c18      	adds	r0, r3, #0
 8009b48:	46bd      	mov	sp, r7
 8009b4a:	bd80      	pop	{r7, pc}
 8009b4c:	20000e18 	.word	0x20000e18
 8009b50:	38004000 	.word	0x38004000
 8009b54:	20000e84 	.word	0x20000e84
 8009b58:	2000003c 	.word	0x2000003c
 8009b5c:	00000fff 	.word	0x00000fff
 8009b60:	20000e34 	.word	0x20000e34
 8009b64:	447a0000 	.word	0x447a0000
 8009b68:	20000e38 	.word	0x20000e38
 8009b6c:	00001001 	.word	0x00001001

08009b70 <ReadSolarVoltage>:

/* function to read the actual battery voltage */

//float ReadSolarVoltage(void){
uint16_t ReadSolarVoltage(void){
 8009b70:	b580      	push	{r7, lr}
 8009b72:	af00      	add	r7, sp, #0
  /* Channel 15 is the Solar voltage */
  static uint32_t solarvalue = 0;
//  static float trueValue = 0;
  sConfig.Channel = ADC_CHANNEL_15;
 8009b74:	4b21      	ldr	r3, [pc, #132]	@ (8009bfc <ReadSolarVoltage+0x8c>)
 8009b76:	4a22      	ldr	r2, [pc, #136]	@ (8009c00 <ReadSolarVoltage+0x90>)
 8009b78:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8009b7a:	4b20      	ldr	r3, [pc, #128]	@ (8009bfc <ReadSolarVoltage+0x8c>)
 8009b7c:	2280      	movs	r2, #128	@ 0x80
 8009b7e:	0152      	lsls	r2, r2, #5
 8009b80:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 8009b82:	4a1e      	ldr	r2, [pc, #120]	@ (8009bfc <ReadSolarVoltage+0x8c>)
 8009b84:	4b1f      	ldr	r3, [pc, #124]	@ (8009c04 <ReadSolarVoltage+0x94>)
 8009b86:	0011      	movs	r1, r2
 8009b88:	0018      	movs	r0, r3
 8009b8a:	f00b f989 	bl	8014ea0 <HAL_ADC_ConfigChannel>
 8009b8e:	1e03      	subs	r3, r0, #0
 8009b90:	d001      	beq.n	8009b96 <ReadSolarVoltage+0x26>
    Error_Handler();
 8009b92:	f003 fc09 	bl	800d3a8 <Error_Handler>
  }
  HAL_ADC_Start(&hadc);
 8009b96:	4b1b      	ldr	r3, [pc, #108]	@ (8009c04 <ReadSolarVoltage+0x94>)
 8009b98:	0018      	movs	r0, r3
 8009b9a:	f00b f885 	bl	8014ca8 <HAL_ADC_Start>
  HAL_ADC_PollForConversion(&hadc, 1);
 8009b9e:	4b19      	ldr	r3, [pc, #100]	@ (8009c04 <ReadSolarVoltage+0x94>)
 8009ba0:	2101      	movs	r1, #1
 8009ba2:	0018      	movs	r0, r3
 8009ba4:	f00b f8d4 	bl	8014d50 <HAL_ADC_PollForConversion>
  solarvalue = (HAL_ADC_GetValue(&hadc)*Vref*3)/4095;
 8009ba8:	4b16      	ldr	r3, [pc, #88]	@ (8009c04 <ReadSolarVoltage+0x94>)
 8009baa:	0018      	movs	r0, r3
 8009bac:	f00b f96c 	bl	8014e88 <HAL_ADC_GetValue>
 8009bb0:	0002      	movs	r2, r0
 8009bb2:	4b15      	ldr	r3, [pc, #84]	@ (8009c08 <ReadSolarVoltage+0x98>)
 8009bb4:	681b      	ldr	r3, [r3, #0]
 8009bb6:	435a      	muls	r2, r3
 8009bb8:	0013      	movs	r3, r2
 8009bba:	005b      	lsls	r3, r3, #1
 8009bbc:	189b      	adds	r3, r3, r2
 8009bbe:	4913      	ldr	r1, [pc, #76]	@ (8009c0c <ReadSolarVoltage+0x9c>)
 8009bc0:	0018      	movs	r0, r3
 8009bc2:	f7f6 faef 	bl	80001a4 <__udivsi3>
 8009bc6:	0003      	movs	r3, r0
 8009bc8:	001a      	movs	r2, r3
 8009bca:	4b11      	ldr	r3, [pc, #68]	@ (8009c10 <ReadSolarVoltage+0xa0>)
 8009bcc:	601a      	str	r2, [r3, #0]
//  trueValue = (float)solarvalue / 1000.0;
  /* Disable Channel 14 */
  sConfig.Channel = ADC_CHANNEL_15;
 8009bce:	4b0b      	ldr	r3, [pc, #44]	@ (8009bfc <ReadSolarVoltage+0x8c>)
 8009bd0:	4a0b      	ldr	r2, [pc, #44]	@ (8009c00 <ReadSolarVoltage+0x90>)
 8009bd2:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_NONE;
 8009bd4:	4b09      	ldr	r3, [pc, #36]	@ (8009bfc <ReadSolarVoltage+0x8c>)
 8009bd6:	4a0f      	ldr	r2, [pc, #60]	@ (8009c14 <ReadSolarVoltage+0xa4>)
 8009bd8:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 8009bda:	4a08      	ldr	r2, [pc, #32]	@ (8009bfc <ReadSolarVoltage+0x8c>)
 8009bdc:	4b09      	ldr	r3, [pc, #36]	@ (8009c04 <ReadSolarVoltage+0x94>)
 8009bde:	0011      	movs	r1, r2
 8009be0:	0018      	movs	r0, r3
 8009be2:	f00b f95d 	bl	8014ea0 <HAL_ADC_ConfigChannel>
 8009be6:	1e03      	subs	r3, r0, #0
 8009be8:	d001      	beq.n	8009bee <ReadSolarVoltage+0x7e>
    Error_Handler();
 8009bea:	f003 fbdd 	bl	800d3a8 <Error_Handler>
  }
//  return trueValue;
  return solarvalue;
 8009bee:	4b08      	ldr	r3, [pc, #32]	@ (8009c10 <ReadSolarVoltage+0xa0>)
 8009bf0:	681b      	ldr	r3, [r3, #0]
 8009bf2:	b29b      	uxth	r3, r3
 }
 8009bf4:	0018      	movs	r0, r3
 8009bf6:	46bd      	mov	sp, r7
 8009bf8:	bd80      	pop	{r7, pc}
 8009bfa:	46c0      	nop			@ (mov r8, r8)
 8009bfc:	20000e18 	.word	0x20000e18
 8009c00:	3c008000 	.word	0x3c008000
 8009c04:	20000e84 	.word	0x20000e84
 8009c08:	2000003c 	.word	0x2000003c
 8009c0c:	00000fff 	.word	0x00000fff
 8009c10:	20000e3c 	.word	0x20000e3c
 8009c14:	00001001 	.word	0x00001001

08009c18 <Check_USB_PowerOn>:

// True if 5V on USB Connector
bool Check_USB_PowerOn(void){
 8009c18:	b580      	push	{r7, lr}
 8009c1a:	af00      	add	r7, sp, #0
   if (HAL_GPIO_ReadPin(VusbDetect_GPIO_Port, VusbDetect_Pin)) {
 8009c1c:	23a0      	movs	r3, #160	@ 0xa0
 8009c1e:	05db      	lsls	r3, r3, #23
 8009c20:	2180      	movs	r1, #128	@ 0x80
 8009c22:	0018      	movs	r0, r3
 8009c24:	f00c f8d8 	bl	8015dd8 <HAL_GPIO_ReadPin>
 8009c28:	1e03      	subs	r3, r0, #0
 8009c2a:	d00b      	beq.n	8009c44 <Check_USB_PowerOn+0x2c>
     if (sendpwremail == DONE) {
 8009c2c:	4b07      	ldr	r3, [pc, #28]	@ (8009c4c <Check_USB_PowerOn+0x34>)
 8009c2e:	781b      	ldrb	r3, [r3, #0]
 8009c30:	2b02      	cmp	r3, #2
 8009c32:	d105      	bne.n	8009c40 <Check_USB_PowerOn+0x28>
       sendpwremail = CLEAR;
 8009c34:	4b05      	ldr	r3, [pc, #20]	@ (8009c4c <Check_USB_PowerOn+0x34>)
 8009c36:	2200      	movs	r2, #0
 8009c38:	701a      	strb	r2, [r3, #0]
       sendpwrmaildate = 0;
 8009c3a:	4b05      	ldr	r3, [pc, #20]	@ (8009c50 <Check_USB_PowerOn+0x38>)
 8009c3c:	2200      	movs	r2, #0
 8009c3e:	701a      	strb	r2, [r3, #0]
     }
     return true;
 8009c40:	2301      	movs	r3, #1
 8009c42:	e000      	b.n	8009c46 <Check_USB_PowerOn+0x2e>
   }
   return false;
 8009c44:	2300      	movs	r3, #0
}
 8009c46:	0018      	movs	r0, r3
 8009c48:	46bd      	mov	sp, r7
 8009c4a:	bd80      	pop	{r7, pc}
 8009c4c:	200010f9 	.word	0x200010f9
 8009c50:	20001110 	.word	0x20001110

08009c54 <Read_Charge_Status>:
//  CHARGING_OFF  = 0
//  CHARGING_ON   = 1
//  CHARGING_FULL = 2
//  Function returns Chargestatus

ChargeStatus Read_Charge_Status(void){
 8009c54:	b580      	push	{r7, lr}
 8009c56:	b082      	sub	sp, #8
 8009c58:	af00      	add	r7, sp, #0
  bool PulledUpStatus   = true  ;
 8009c5a:	1dfb      	adds	r3, r7, #7
 8009c5c:	2201      	movs	r2, #1
 8009c5e:	701a      	strb	r2, [r3, #0]
  bool PulledDownStatus = false ;
 8009c60:	1dbb      	adds	r3, r7, #6
 8009c62:	2200      	movs	r2, #0
 8009c64:	701a      	strb	r2, [r3, #0]
  //Read with Pull Up
  //Charge_Pin_Up();
  GPIO_InitStruct.Pin = Charger_status_Pin;
 8009c66:	4b27      	ldr	r3, [pc, #156]	@ (8009d04 <Read_Charge_Status+0xb0>)
 8009c68:	2280      	movs	r2, #128	@ 0x80
 8009c6a:	0092      	lsls	r2, r2, #2
 8009c6c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8009c6e:	4b25      	ldr	r3, [pc, #148]	@ (8009d04 <Read_Charge_Status+0xb0>)
 8009c70:	2200      	movs	r2, #0
 8009c72:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8009c74:	4b23      	ldr	r3, [pc, #140]	@ (8009d04 <Read_Charge_Status+0xb0>)
 8009c76:	2201      	movs	r2, #1
 8009c78:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(Charger_status_GPIO_Port, &GPIO_InitStruct);
 8009c7a:	4b22      	ldr	r3, [pc, #136]	@ (8009d04 <Read_Charge_Status+0xb0>)
 8009c7c:	4a22      	ldr	r2, [pc, #136]	@ (8009d08 <Read_Charge_Status+0xb4>)
 8009c7e:	0019      	movs	r1, r3
 8009c80:	0010      	movs	r0, r2
 8009c82:	f00b ff2b 	bl	8015adc <HAL_GPIO_Init>

  PulledUpStatus = (HAL_GPIO_ReadPin(Charger_status_GPIO_Port, Charger_status_Pin));
 8009c86:	2380      	movs	r3, #128	@ 0x80
 8009c88:	009b      	lsls	r3, r3, #2
 8009c8a:	4a1f      	ldr	r2, [pc, #124]	@ (8009d08 <Read_Charge_Status+0xb4>)
 8009c8c:	0019      	movs	r1, r3
 8009c8e:	0010      	movs	r0, r2
 8009c90:	f00c f8a2 	bl	8015dd8 <HAL_GPIO_ReadPin>
 8009c94:	0003      	movs	r3, r0
 8009c96:	001a      	movs	r2, r3
 8009c98:	1dfb      	adds	r3, r7, #7
 8009c9a:	1e51      	subs	r1, r2, #1
 8009c9c:	418a      	sbcs	r2, r1
 8009c9e:	701a      	strb	r2, [r3, #0]

  //Read with Pull Down
  // Charge_Pin_Down();
  GPIO_InitStruct.Pin = Charger_status_Pin;
 8009ca0:	4b18      	ldr	r3, [pc, #96]	@ (8009d04 <Read_Charge_Status+0xb0>)
 8009ca2:	2280      	movs	r2, #128	@ 0x80
 8009ca4:	0092      	lsls	r2, r2, #2
 8009ca6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8009ca8:	4b16      	ldr	r3, [pc, #88]	@ (8009d04 <Read_Charge_Status+0xb0>)
 8009caa:	2200      	movs	r2, #0
 8009cac:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8009cae:	4b15      	ldr	r3, [pc, #84]	@ (8009d04 <Read_Charge_Status+0xb0>)
 8009cb0:	2202      	movs	r2, #2
 8009cb2:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(Charger_status_GPIO_Port, &GPIO_InitStruct);
 8009cb4:	4b13      	ldr	r3, [pc, #76]	@ (8009d04 <Read_Charge_Status+0xb0>)
 8009cb6:	4a14      	ldr	r2, [pc, #80]	@ (8009d08 <Read_Charge_Status+0xb4>)
 8009cb8:	0019      	movs	r1, r3
 8009cba:	0010      	movs	r0, r2
 8009cbc:	f00b ff0e 	bl	8015adc <HAL_GPIO_Init>

  PulledDownStatus = (HAL_GPIO_ReadPin(Charger_status_GPIO_Port, Charger_status_Pin));
 8009cc0:	2380      	movs	r3, #128	@ 0x80
 8009cc2:	009b      	lsls	r3, r3, #2
 8009cc4:	4a10      	ldr	r2, [pc, #64]	@ (8009d08 <Read_Charge_Status+0xb4>)
 8009cc6:	0019      	movs	r1, r3
 8009cc8:	0010      	movs	r0, r2
 8009cca:	f00c f885 	bl	8015dd8 <HAL_GPIO_ReadPin>
 8009cce:	0003      	movs	r3, r0
 8009cd0:	001a      	movs	r2, r3
 8009cd2:	1dbb      	adds	r3, r7, #6
 8009cd4:	1e51      	subs	r1, r2, #1
 8009cd6:	418a      	sbcs	r2, r1
 8009cd8:	701a      	strb	r2, [r3, #0]

  if (PulledUpStatus==false) {
 8009cda:	1dfb      	adds	r3, r7, #7
 8009cdc:	781b      	ldrb	r3, [r3, #0]
 8009cde:	2201      	movs	r2, #1
 8009ce0:	4053      	eors	r3, r2
 8009ce2:	b2db      	uxtb	r3, r3
 8009ce4:	2b00      	cmp	r3, #0
 8009ce6:	d001      	beq.n	8009cec <Read_Charge_Status+0x98>
    return CHARGING_ON;
 8009ce8:	2301      	movs	r3, #1
 8009cea:	e006      	b.n	8009cfa <Read_Charge_Status+0xa6>
  }
  if (PulledDownStatus==true){
 8009cec:	1dbb      	adds	r3, r7, #6
 8009cee:	781b      	ldrb	r3, [r3, #0]
 8009cf0:	2b00      	cmp	r3, #0
 8009cf2:	d001      	beq.n	8009cf8 <Read_Charge_Status+0xa4>
    return CHARGING_FULL;
 8009cf4:	2302      	movs	r3, #2
 8009cf6:	e000      	b.n	8009cfa <Read_Charge_Status+0xa6>
  }
  return CHARGING_OFF;
 8009cf8:	2300      	movs	r3, #0
}
 8009cfa:	0018      	movs	r0, r3
 8009cfc:	46bd      	mov	sp, r7
 8009cfe:	b002      	add	sp, #8
 8009d00:	bd80      	pop	{r7, pc}
 8009d02:	46c0      	nop			@ (mov r8, r8)
 8009d04:	20000e20 	.word	0x20000e20
 8009d08:	50000800 	.word	0x50000800

08009d0c <BootButton_Pressed>:

// True if Userbutton A ( Boot ) is pressed
// It is NOT Possible to read the Boot0 pin after powerup / Reset!!
// So a copy is hard wired to PA15

bool     BootButton_Pressed(void){
 8009d0c:	b580      	push	{r7, lr}
 8009d0e:	af00      	add	r7, sp, #0
  return   (HAL_GPIO_ReadPin(BOOT0_GPIO_Port, BOOT0_Pin));
 8009d10:	2380      	movs	r3, #128	@ 0x80
 8009d12:	021a      	lsls	r2, r3, #8
 8009d14:	23a0      	movs	r3, #160	@ 0xa0
 8009d16:	05db      	lsls	r3, r3, #23
 8009d18:	0011      	movs	r1, r2
 8009d1a:	0018      	movs	r0, r3
 8009d1c:	f00c f85c 	bl	8015dd8 <HAL_GPIO_ReadPin>
 8009d20:	0003      	movs	r3, r0
 8009d22:	1e5a      	subs	r2, r3, #1
 8009d24:	4193      	sbcs	r3, r2
 8009d26:	b2db      	uxtb	r3, r3
}
 8009d28:	0018      	movs	r0, r3
 8009d2a:	46bd      	mov	sp, r7
 8009d2c:	bd80      	pop	{r7, pc}
	...

08009d30 <UserButton_Pressed>:

// True if Userbutton B is pressed
bool     UserButton_Pressed(void){
 8009d30:	b580      	push	{r7, lr}
 8009d32:	af00      	add	r7, sp, #0
  return   (!HAL_GPIO_ReadPin(User_Button_GPIO_Port, User_Button_Pin));
 8009d34:	4b05      	ldr	r3, [pc, #20]	@ (8009d4c <UserButton_Pressed+0x1c>)
 8009d36:	2104      	movs	r1, #4
 8009d38:	0018      	movs	r0, r3
 8009d3a:	f00c f84d 	bl	8015dd8 <HAL_GPIO_ReadPin>
 8009d3e:	0003      	movs	r3, r0
 8009d40:	425a      	negs	r2, r3
 8009d42:	4153      	adcs	r3, r2
 8009d44:	b2db      	uxtb	r3, r3
}
 8009d46:	0018      	movs	r0, r3
 8009d48:	46bd      	mov	sp, r7
 8009d4a:	bd80      	pop	{r7, pc}
 8009d4c:	50000c00 	.word	0x50000c00

08009d50 <getUptime>:

uint32_t makeTime(RTC_DateTypeDef* currentDate, RTC_TimeTypeDef* currentTime);
void breakPosixTime(uint32_t timeInput, RTC_DateTypeDef* currentDate, RTC_TimeTypeDef* currentTime);

#ifndef PUBLIC
void getUptime(char* uptbuffer) {
 8009d50:	b590      	push	{r4, r7, lr}
 8009d52:	b085      	sub	sp, #20
 8009d54:	af02      	add	r7, sp, #8
 8009d56:	6078      	str	r0, [r7, #4]
  sprintf(uptbuffer, "%d%02d.%02d", myUpTime.Day, myUpTime.Hour, myUpTime.Minutes);
 8009d58:	4b08      	ldr	r3, [pc, #32]	@ (8009d7c <getUptime+0x2c>)
 8009d5a:	881b      	ldrh	r3, [r3, #0]
 8009d5c:	001a      	movs	r2, r3
 8009d5e:	4b07      	ldr	r3, [pc, #28]	@ (8009d7c <getUptime+0x2c>)
 8009d60:	789b      	ldrb	r3, [r3, #2]
 8009d62:	001c      	movs	r4, r3
 8009d64:	4b05      	ldr	r3, [pc, #20]	@ (8009d7c <getUptime+0x2c>)
 8009d66:	78db      	ldrb	r3, [r3, #3]
 8009d68:	4905      	ldr	r1, [pc, #20]	@ (8009d80 <getUptime+0x30>)
 8009d6a:	6878      	ldr	r0, [r7, #4]
 8009d6c:	9300      	str	r3, [sp, #0]
 8009d6e:	0023      	movs	r3, r4
 8009d70:	f01c fa8e 	bl	8026290 <siprintf>
}
 8009d74:	46c0      	nop			@ (mov r8, r8)
 8009d76:	46bd      	mov	sp, r7
 8009d78:	b003      	add	sp, #12
 8009d7a:	bd90      	pop	{r4, r7, pc}
 8009d7c:	20000e48 	.word	0x20000e48
 8009d80:	0802bd78 	.word	0x0802bd78

08009d84 <getDate>:
#endif

uint8_t getDate() {
 8009d84:	b580      	push	{r7, lr}
 8009d86:	af00      	add	r7, sp, #0
//  RTC_TimeTypeDef currentTime;
//  RTC_DateTypeDef currentDate;
  RTC_GetTime(&currentTime, &currentDate);
 8009d88:	4a05      	ldr	r2, [pc, #20]	@ (8009da0 <getDate+0x1c>)
 8009d8a:	4b06      	ldr	r3, [pc, #24]	@ (8009da4 <getDate+0x20>)
 8009d8c:	0011      	movs	r1, r2
 8009d8e:	0018      	movs	r0, r3
 8009d90:	f000 fb66 	bl	800a460 <RTC_GetTime>
  return currentDate.Date;
 8009d94:	4b02      	ldr	r3, [pc, #8]	@ (8009da0 <getDate+0x1c>)
 8009d96:	789b      	ldrb	r3, [r3, #2]
}
 8009d98:	0018      	movs	r0, r3
 8009d9a:	46bd      	mov	sp, r7
 8009d9c:	bd80      	pop	{r7, pc}
 8009d9e:	46c0      	nop			@ (mov r8, r8)
 8009da0:	20000e68 	.word	0x20000e68
 8009da4:	20000e54 	.word	0x20000e54

08009da8 <showUpTime>:

void showUpTime() {
 8009da8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009daa:	46ce      	mov	lr, r9
 8009dac:	4647      	mov	r7, r8
 8009dae:	b580      	push	{r7, lr}
 8009db0:	b087      	sub	sp, #28
 8009db2:	af06      	add	r7, sp, #24
    printf_USB("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm\r\n",
        currentDate.Date, monthNames[currentDate.Month-1], currentDate.Year, currentTime.Hours, currentTime.Minutes,
 8009db4:	4b17      	ldr	r3, [pc, #92]	@ (8009e14 <showUpTime+0x6c>)
 8009db6:	789b      	ldrb	r3, [r3, #2]
    printf_USB("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm\r\n",
 8009db8:	4698      	mov	r8, r3
        currentDate.Date, monthNames[currentDate.Month-1], currentDate.Year, currentTime.Hours, currentTime.Minutes,
 8009dba:	4b16      	ldr	r3, [pc, #88]	@ (8009e14 <showUpTime+0x6c>)
 8009dbc:	785b      	ldrb	r3, [r3, #1]
 8009dbe:	1e5a      	subs	r2, r3, #1
    printf_USB("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm\r\n",
 8009dc0:	4b15      	ldr	r3, [pc, #84]	@ (8009e18 <showUpTime+0x70>)
 8009dc2:	0092      	lsls	r2, r2, #2
 8009dc4:	58d2      	ldr	r2, [r2, r3]
        currentDate.Date, monthNames[currentDate.Month-1], currentDate.Year, currentTime.Hours, currentTime.Minutes,
 8009dc6:	4b13      	ldr	r3, [pc, #76]	@ (8009e14 <showUpTime+0x6c>)
 8009dc8:	78db      	ldrb	r3, [r3, #3]
    printf_USB("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm\r\n",
 8009dca:	4699      	mov	r9, r3
        currentDate.Date, monthNames[currentDate.Month-1], currentDate.Year, currentTime.Hours, currentTime.Minutes,
 8009dcc:	4b13      	ldr	r3, [pc, #76]	@ (8009e1c <showUpTime+0x74>)
 8009dce:	781b      	ldrb	r3, [r3, #0]
    printf_USB("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm\r\n",
 8009dd0:	0019      	movs	r1, r3
        currentDate.Date, monthNames[currentDate.Month-1], currentDate.Year, currentTime.Hours, currentTime.Minutes,
 8009dd2:	4b12      	ldr	r3, [pc, #72]	@ (8009e1c <showUpTime+0x74>)
 8009dd4:	785b      	ldrb	r3, [r3, #1]
    printf_USB("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm\r\n",
 8009dd6:	001c      	movs	r4, r3
        currentTime.Seconds, myUpTime.Day, myUpTime.Hour, myUpTime.Minutes);  // alway forced shown even if usb logging is off
 8009dd8:	4b10      	ldr	r3, [pc, #64]	@ (8009e1c <showUpTime+0x74>)
 8009dda:	789b      	ldrb	r3, [r3, #2]
    printf_USB("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm\r\n",
 8009ddc:	001d      	movs	r5, r3
        currentTime.Seconds, myUpTime.Day, myUpTime.Hour, myUpTime.Minutes);  // alway forced shown even if usb logging is off
 8009dde:	4b10      	ldr	r3, [pc, #64]	@ (8009e20 <showUpTime+0x78>)
 8009de0:	881b      	ldrh	r3, [r3, #0]
    printf_USB("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm\r\n",
 8009de2:	001e      	movs	r6, r3
        currentTime.Seconds, myUpTime.Day, myUpTime.Hour, myUpTime.Minutes);  // alway forced shown even if usb logging is off
 8009de4:	4b0e      	ldr	r3, [pc, #56]	@ (8009e20 <showUpTime+0x78>)
 8009de6:	789b      	ldrb	r3, [r3, #2]
    printf_USB("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm\r\n",
 8009de8:	469c      	mov	ip, r3
        currentTime.Seconds, myUpTime.Day, myUpTime.Hour, myUpTime.Minutes);  // alway forced shown even if usb logging is off
 8009dea:	4b0d      	ldr	r3, [pc, #52]	@ (8009e20 <showUpTime+0x78>)
 8009dec:	78db      	ldrb	r3, [r3, #3]
    printf_USB("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm\r\n",
 8009dee:	480d      	ldr	r0, [pc, #52]	@ (8009e24 <showUpTime+0x7c>)
 8009df0:	9305      	str	r3, [sp, #20]
 8009df2:	4663      	mov	r3, ip
 8009df4:	9304      	str	r3, [sp, #16]
 8009df6:	9603      	str	r6, [sp, #12]
 8009df8:	9502      	str	r5, [sp, #8]
 8009dfa:	9401      	str	r4, [sp, #4]
 8009dfc:	9100      	str	r1, [sp, #0]
 8009dfe:	464b      	mov	r3, r9
 8009e00:	4641      	mov	r1, r8
 8009e02:	f7fe fe4f 	bl	8008aa4 <printf_USB>
}
 8009e06:	46c0      	nop			@ (mov r8, r8)
 8009e08:	46bd      	mov	sp, r7
 8009e0a:	b001      	add	sp, #4
 8009e0c:	bcc0      	pop	{r6, r7}
 8009e0e:	46b9      	mov	r9, r7
 8009e10:	46b0      	mov	r8, r6
 8009e12:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009e14:	20000e68 	.word	0x20000e68
 8009e18:	2000005c 	.word	0x2000005c
 8009e1c:	20000e54 	.word	0x20000e54
 8009e20:	20000e48 	.word	0x20000e48
 8009e24:	0802bd84 	.word	0x0802bd84

08009e28 <showTime>:

void showTime() {
 8009e28:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009e2a:	46de      	mov	lr, fp
 8009e2c:	4657      	mov	r7, sl
 8009e2e:	464e      	mov	r6, r9
 8009e30:	4645      	mov	r5, r8
 8009e32:	b5e0      	push	{r5, r6, r7, lr}
 8009e34:	b08d      	sub	sp, #52	@ 0x34
 8009e36:	af0a      	add	r7, sp, #40	@ 0x28
  if (posixBootTime == 0) {
 8009e38:	4b41      	ldr	r3, [pc, #260]	@ (8009f40 <showTime+0x118>)
 8009e3a:	681b      	ldr	r3, [r3, #0]
 8009e3c:	2b00      	cmp	r3, #0
 8009e3e:	d100      	bne.n	8009e42 <showTime+0x1a>
 8009e40:	e075      	b.n	8009f2e <showTime+0x106>
    return;
  }
//  RTC_TimeTypeDef currentTime;
//  RTC_DateTypeDef currentDate;
  RTC_GetTime(&currentTime, &currentDate);
 8009e42:	4a40      	ldr	r2, [pc, #256]	@ (8009f44 <showTime+0x11c>)
 8009e44:	4b40      	ldr	r3, [pc, #256]	@ (8009f48 <showTime+0x120>)
 8009e46:	0011      	movs	r1, r2
 8009e48:	0018      	movs	r0, r3
 8009e4a:	f000 fb09 	bl	800a460 <RTC_GetTime>
  lasthour = currentTime.Hours;
 8009e4e:	4b3e      	ldr	r3, [pc, #248]	@ (8009f48 <showTime+0x120>)
 8009e50:	781a      	ldrb	r2, [r3, #0]
 8009e52:	4b3e      	ldr	r3, [pc, #248]	@ (8009f4c <showTime+0x124>)
 8009e54:	701a      	strb	r2, [r3, #0]
  weekday = currentDate.WeekDay;
 8009e56:	4b3b      	ldr	r3, [pc, #236]	@ (8009f44 <showTime+0x11c>)
 8009e58:	781a      	ldrb	r2, [r3, #0]
 8009e5a:	4b3d      	ldr	r3, [pc, #244]	@ (8009f50 <showTime+0x128>)
 8009e5c:	701a      	strb	r2, [r3, #0]
  UpdateSystemUptime();
 8009e5e:	f000 f89b 	bl	8009f98 <UpdateSystemUptime>
  if (lastminute != currentTime.Minutes) {
 8009e62:	4b39      	ldr	r3, [pc, #228]	@ (8009f48 <showTime+0x120>)
 8009e64:	785a      	ldrb	r2, [r3, #1]
 8009e66:	4b3b      	ldr	r3, [pc, #236]	@ (8009f54 <showTime+0x12c>)
 8009e68:	781b      	ldrb	r3, [r3, #0]
 8009e6a:	429a      	cmp	r2, r3
 8009e6c:	d039      	beq.n	8009ee2 <showTime+0xba>
    lastminute = currentTime.Minutes;
 8009e6e:	4b36      	ldr	r3, [pc, #216]	@ (8009f48 <showTime+0x120>)
 8009e70:	785a      	ldrb	r2, [r3, #1]
 8009e72:	4b38      	ldr	r3, [pc, #224]	@ (8009f54 <showTime+0x12c>)
 8009e74:	701a      	strb	r2, [r3, #0]
    Info("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm:%02ds",
 8009e76:	4b33      	ldr	r3, [pc, #204]	@ (8009f44 <showTime+0x11c>)
 8009e78:	789b      	ldrb	r3, [r3, #2]
 8009e7a:	469b      	mov	fp, r3
 8009e7c:	4b31      	ldr	r3, [pc, #196]	@ (8009f44 <showTime+0x11c>)
 8009e7e:	785b      	ldrb	r3, [r3, #1]
 8009e80:	1e5a      	subs	r2, r3, #1
 8009e82:	4b35      	ldr	r3, [pc, #212]	@ (8009f58 <showTime+0x130>)
 8009e84:	0092      	lsls	r2, r2, #2
 8009e86:	58d3      	ldr	r3, [r2, r3]
 8009e88:	607b      	str	r3, [r7, #4]
 8009e8a:	4a2e      	ldr	r2, [pc, #184]	@ (8009f44 <showTime+0x11c>)
 8009e8c:	78d2      	ldrb	r2, [r2, #3]
 8009e8e:	0010      	movs	r0, r2
 8009e90:	4a2d      	ldr	r2, [pc, #180]	@ (8009f48 <showTime+0x120>)
 8009e92:	7812      	ldrb	r2, [r2, #0]
 8009e94:	0014      	movs	r4, r2
 8009e96:	4a2c      	ldr	r2, [pc, #176]	@ (8009f48 <showTime+0x120>)
 8009e98:	7852      	ldrb	r2, [r2, #1]
 8009e9a:	0015      	movs	r5, r2
 8009e9c:	4a2a      	ldr	r2, [pc, #168]	@ (8009f48 <showTime+0x120>)
 8009e9e:	7892      	ldrb	r2, [r2, #2]
 8009ea0:	0016      	movs	r6, r2
 8009ea2:	4a2e      	ldr	r2, [pc, #184]	@ (8009f5c <showTime+0x134>)
 8009ea4:	8812      	ldrh	r2, [r2, #0]
 8009ea6:	4694      	mov	ip, r2
 8009ea8:	4a2c      	ldr	r2, [pc, #176]	@ (8009f5c <showTime+0x134>)
 8009eaa:	7892      	ldrb	r2, [r2, #2]
 8009eac:	4690      	mov	r8, r2
 8009eae:	4a2b      	ldr	r2, [pc, #172]	@ (8009f5c <showTime+0x134>)
 8009eb0:	78d2      	ldrb	r2, [r2, #3]
 8009eb2:	4691      	mov	r9, r2
 8009eb4:	4a29      	ldr	r2, [pc, #164]	@ (8009f5c <showTime+0x134>)
 8009eb6:	7912      	ldrb	r2, [r2, #4]
 8009eb8:	4692      	mov	sl, r2
 8009eba:	4a29      	ldr	r2, [pc, #164]	@ (8009f60 <showTime+0x138>)
 8009ebc:	4929      	ldr	r1, [pc, #164]	@ (8009f64 <showTime+0x13c>)
 8009ebe:	4653      	mov	r3, sl
 8009ec0:	9308      	str	r3, [sp, #32]
 8009ec2:	464b      	mov	r3, r9
 8009ec4:	9307      	str	r3, [sp, #28]
 8009ec6:	4643      	mov	r3, r8
 8009ec8:	9306      	str	r3, [sp, #24]
 8009eca:	4663      	mov	r3, ip
 8009ecc:	9305      	str	r3, [sp, #20]
 8009ece:	9604      	str	r6, [sp, #16]
 8009ed0:	9503      	str	r5, [sp, #12]
 8009ed2:	9402      	str	r4, [sp, #8]
 8009ed4:	9001      	str	r0, [sp, #4]
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	9300      	str	r3, [sp, #0]
 8009eda:	465b      	mov	r3, fp
 8009edc:	2002      	movs	r0, #2
 8009ede:	f009 ffad 	bl	8013e3c <CreateLine>
      currentDate.Date, monthNames[currentDate.Month-1], currentDate.Year, currentTime.Hours, currentTime.Minutes,
      currentTime.Seconds, myUpTime.Day, myUpTime.Hour, myUpTime.Minutes, myUpTime.Seconds);
  }
  if ((weekday == 7) && (lasthour == 3) && (currentTime.Minutes < 17) && !dstchkd && (currentDate.Date > 24) && ((currentDate.Month == 3) || (currentDate.Month == 10))) {
 8009ee2:	4b1b      	ldr	r3, [pc, #108]	@ (8009f50 <showTime+0x128>)
 8009ee4:	781b      	ldrb	r3, [r3, #0]
 8009ee6:	2b07      	cmp	r3, #7
 8009ee8:	d122      	bne.n	8009f30 <showTime+0x108>
 8009eea:	4b18      	ldr	r3, [pc, #96]	@ (8009f4c <showTime+0x124>)
 8009eec:	781b      	ldrb	r3, [r3, #0]
 8009eee:	2b03      	cmp	r3, #3
 8009ef0:	d11e      	bne.n	8009f30 <showTime+0x108>
 8009ef2:	4b15      	ldr	r3, [pc, #84]	@ (8009f48 <showTime+0x120>)
 8009ef4:	785b      	ldrb	r3, [r3, #1]
 8009ef6:	2b10      	cmp	r3, #16
 8009ef8:	d81a      	bhi.n	8009f30 <showTime+0x108>
 8009efa:	4b1b      	ldr	r3, [pc, #108]	@ (8009f68 <showTime+0x140>)
 8009efc:	781b      	ldrb	r3, [r3, #0]
 8009efe:	2201      	movs	r2, #1
 8009f00:	4053      	eors	r3, r2
 8009f02:	b2db      	uxtb	r3, r3
 8009f04:	2b00      	cmp	r3, #0
 8009f06:	d013      	beq.n	8009f30 <showTime+0x108>
 8009f08:	4b0e      	ldr	r3, [pc, #56]	@ (8009f44 <showTime+0x11c>)
 8009f0a:	789b      	ldrb	r3, [r3, #2]
 8009f0c:	2b18      	cmp	r3, #24
 8009f0e:	d90f      	bls.n	8009f30 <showTime+0x108>
 8009f10:	4b0c      	ldr	r3, [pc, #48]	@ (8009f44 <showTime+0x11c>)
 8009f12:	785b      	ldrb	r3, [r3, #1]
 8009f14:	2b03      	cmp	r3, #3
 8009f16:	d003      	beq.n	8009f20 <showTime+0xf8>
 8009f18:	4b0a      	ldr	r3, [pc, #40]	@ (8009f44 <showTime+0x11c>)
 8009f1a:	785b      	ldrb	r3, [r3, #1]
 8009f1c:	2b0a      	cmp	r3, #10
 8009f1e:	d107      	bne.n	8009f30 <showTime+0x108>
    dstchkd = true;
 8009f20:	4b11      	ldr	r3, [pc, #68]	@ (8009f68 <showTime+0x140>)
 8009f22:	2201      	movs	r2, #1
 8009f24:	701a      	strb	r2, [r3, #0]
    setESPTimeStamp(0); // check for summer/wintertime
 8009f26:	2000      	movs	r0, #0
 8009f28:	f7fa fcbc 	bl	80048a4 <setESPTimeStamp>
 8009f2c:	e000      	b.n	8009f30 <showTime+0x108>
    return;
 8009f2e:	46c0      	nop			@ (mov r8, r8)
  }
}
 8009f30:	46bd      	mov	sp, r7
 8009f32:	b003      	add	sp, #12
 8009f34:	bcf0      	pop	{r4, r5, r6, r7}
 8009f36:	46bb      	mov	fp, r7
 8009f38:	46b2      	mov	sl, r6
 8009f3a:	46a9      	mov	r9, r5
 8009f3c:	46a0      	mov	r8, r4
 8009f3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009f40:	20000e44 	.word	0x20000e44
 8009f44:	20000e68 	.word	0x20000e68
 8009f48:	20000e54 	.word	0x20000e54
 8009f4c:	20000e42 	.word	0x20000e42
 8009f50:	20000e43 	.word	0x20000e43
 8009f54:	20000e41 	.word	0x20000e41
 8009f58:	2000005c 	.word	0x2000005c
 8009f5c:	20000e48 	.word	0x20000e48
 8009f60:	0802bdd8 	.word	0x0802bdd8
 8009f64:	0802be30 	.word	0x0802be30
 8009f68:	20000e40 	.word	0x20000e40

08009f6c <calculateNextNTPTime>:


uint32_t calculateNextNTPTime(void) {
 8009f6c:	b580      	push	{r7, lr}
 8009f6e:	af00      	add	r7, sp, #0
//  RTC_TimeTypeDef currentTime;
//  RTC_DateTypeDef currentDate;
  RTC_GetTime(&currentTime, &currentDate);
 8009f70:	4a07      	ldr	r2, [pc, #28]	@ (8009f90 <calculateNextNTPTime+0x24>)
 8009f72:	4b08      	ldr	r3, [pc, #32]	@ (8009f94 <calculateNextNTPTime+0x28>)
 8009f74:	0011      	movs	r1, r2
 8009f76:	0018      	movs	r0, r3
 8009f78:	f000 fa72 	bl	800a460 <RTC_GetTime>
  return makeTime(&currentDate, &currentTime);
 8009f7c:	4a05      	ldr	r2, [pc, #20]	@ (8009f94 <calculateNextNTPTime+0x28>)
 8009f7e:	4b04      	ldr	r3, [pc, #16]	@ (8009f90 <calculateNextNTPTime+0x24>)
 8009f80:	0011      	movs	r1, r2
 8009f82:	0018      	movs	r0, r3
 8009f84:	f000 fc6c 	bl	800a860 <makeTime>
 8009f88:	0003      	movs	r3, r0
}
 8009f8a:	0018      	movs	r0, r3
 8009f8c:	46bd      	mov	sp, r7
 8009f8e:	bd80      	pop	{r7, pc}
 8009f90:	20000e68 	.word	0x20000e68
 8009f94:	20000e54 	.word	0x20000e54

08009f98 <UpdateSystemUptime>:


void UpdateSystemUptime() {
 8009f98:	b580      	push	{r7, lr}
 8009f9a:	b082      	sub	sp, #8
 8009f9c:	af00      	add	r7, sp, #0
//  RTC_TimeTypeDef currentTime;
//  RTC_DateTypeDef currentDate;
  uint32_t uxUptime;
  uint32_t time;
  RTC_GetTime(&currentTime, &currentDate);
 8009f9e:	4a25      	ldr	r2, [pc, #148]	@ (800a034 <UpdateSystemUptime+0x9c>)
 8009fa0:	4b25      	ldr	r3, [pc, #148]	@ (800a038 <UpdateSystemUptime+0xa0>)
 8009fa2:	0011      	movs	r1, r2
 8009fa4:	0018      	movs	r0, r3
 8009fa6:	f000 fa5b 	bl	800a460 <RTC_GetTime>
  uxUptime = makeTime(&currentDate, &currentTime) - posixBootTime;
 8009faa:	4a23      	ldr	r2, [pc, #140]	@ (800a038 <UpdateSystemUptime+0xa0>)
 8009fac:	4b21      	ldr	r3, [pc, #132]	@ (800a034 <UpdateSystemUptime+0x9c>)
 8009fae:	0011      	movs	r1, r2
 8009fb0:	0018      	movs	r0, r3
 8009fb2:	f000 fc55 	bl	800a860 <makeTime>
 8009fb6:	0002      	movs	r2, r0
 8009fb8:	4b20      	ldr	r3, [pc, #128]	@ (800a03c <UpdateSystemUptime+0xa4>)
 8009fba:	681b      	ldr	r3, [r3, #0]
 8009fbc:	1ad3      	subs	r3, r2, r3
 8009fbe:	607b      	str	r3, [r7, #4]
  time = uxUptime;
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	603b      	str	r3, [r7, #0]
  myUpTime.Seconds = time % 60;
 8009fc4:	683b      	ldr	r3, [r7, #0]
 8009fc6:	213c      	movs	r1, #60	@ 0x3c
 8009fc8:	0018      	movs	r0, r3
 8009fca:	f7f6 f971 	bl	80002b0 <__aeabi_uidivmod>
 8009fce:	000b      	movs	r3, r1
 8009fd0:	b2da      	uxtb	r2, r3
 8009fd2:	4b1b      	ldr	r3, [pc, #108]	@ (800a040 <UpdateSystemUptime+0xa8>)
 8009fd4:	711a      	strb	r2, [r3, #4]
  time /= 60; // now it is minutes
 8009fd6:	683b      	ldr	r3, [r7, #0]
 8009fd8:	213c      	movs	r1, #60	@ 0x3c
 8009fda:	0018      	movs	r0, r3
 8009fdc:	f7f6 f8e2 	bl	80001a4 <__udivsi3>
 8009fe0:	0003      	movs	r3, r0
 8009fe2:	603b      	str	r3, [r7, #0]
  myUpTime.Minutes = time % 60;
 8009fe4:	683b      	ldr	r3, [r7, #0]
 8009fe6:	213c      	movs	r1, #60	@ 0x3c
 8009fe8:	0018      	movs	r0, r3
 8009fea:	f7f6 f961 	bl	80002b0 <__aeabi_uidivmod>
 8009fee:	000b      	movs	r3, r1
 8009ff0:	b2da      	uxtb	r2, r3
 8009ff2:	4b13      	ldr	r3, [pc, #76]	@ (800a040 <UpdateSystemUptime+0xa8>)
 8009ff4:	70da      	strb	r2, [r3, #3]
  time /= 60; // now it is hours
 8009ff6:	683b      	ldr	r3, [r7, #0]
 8009ff8:	213c      	movs	r1, #60	@ 0x3c
 8009ffa:	0018      	movs	r0, r3
 8009ffc:	f7f6 f8d2 	bl	80001a4 <__udivsi3>
 800a000:	0003      	movs	r3, r0
 800a002:	603b      	str	r3, [r7, #0]
  myUpTime.Hour = time % 24;
 800a004:	683b      	ldr	r3, [r7, #0]
 800a006:	2118      	movs	r1, #24
 800a008:	0018      	movs	r0, r3
 800a00a:	f7f6 f951 	bl	80002b0 <__aeabi_uidivmod>
 800a00e:	000b      	movs	r3, r1
 800a010:	b2da      	uxtb	r2, r3
 800a012:	4b0b      	ldr	r3, [pc, #44]	@ (800a040 <UpdateSystemUptime+0xa8>)
 800a014:	709a      	strb	r2, [r3, #2]
  time /= 24; // now it is days
 800a016:	683b      	ldr	r3, [r7, #0]
 800a018:	2118      	movs	r1, #24
 800a01a:	0018      	movs	r0, r3
 800a01c:	f7f6 f8c2 	bl	80001a4 <__udivsi3>
 800a020:	0003      	movs	r3, r0
 800a022:	603b      	str	r3, [r7, #0]
  myUpTime.Day = time; // now it is days
 800a024:	683b      	ldr	r3, [r7, #0]
 800a026:	b29a      	uxth	r2, r3
 800a028:	4b05      	ldr	r3, [pc, #20]	@ (800a040 <UpdateSystemUptime+0xa8>)
 800a02a:	801a      	strh	r2, [r3, #0]
//  Info("Current time is: %02d:%02d:%02d System uptime is: %dd %02dh:%02dm:%02ds",
//      currentTime.Hours, currentTime.Minutes, currentTime.Seconds, myUpTime.Day, myUpTime.Hour, myUpTime.Minutes, myUpTime.Seconds);
}
 800a02c:	46c0      	nop			@ (mov r8, r8)
 800a02e:	46bd      	mov	sp, r7
 800a030:	b002      	add	sp, #8
 800a032:	bd80      	pop	{r7, pc}
 800a034:	20000e68 	.word	0x20000e68
 800a038:	20000e54 	.word	0x20000e54
 800a03c:	20000e44 	.word	0x20000e44
 800a040:	20000e48 	.word	0x20000e48

0800a044 <aBuff2int>:

//  0         1         2         3  3
//  0         0         0         0  3
//  +CIPSNTPTIME:Thu Jan  1 01:00:03 1970
//OK
uint8_t aBuff2int(char* aBuff, uint8_t start, uint8_t stop) {
 800a044:	b590      	push	{r4, r7, lr}
 800a046:	b085      	sub	sp, #20
 800a048:	af00      	add	r7, sp, #0
 800a04a:	6078      	str	r0, [r7, #4]
 800a04c:	0008      	movs	r0, r1
 800a04e:	0011      	movs	r1, r2
 800a050:	1cfb      	adds	r3, r7, #3
 800a052:	1c02      	adds	r2, r0, #0
 800a054:	701a      	strb	r2, [r3, #0]
 800a056:	1cbb      	adds	r3, r7, #2
 800a058:	1c0a      	adds	r2, r1, #0
 800a05a:	701a      	strb	r2, [r3, #0]
  char iBuff[5];
  uint8_t i;
  uint8_t pos = 0;
 800a05c:	230e      	movs	r3, #14
 800a05e:	18fb      	adds	r3, r7, r3
 800a060:	2200      	movs	r2, #0
 800a062:	701a      	strb	r2, [r3, #0]
  for (i = start; i <= stop ; i++){
 800a064:	230f      	movs	r3, #15
 800a066:	18fb      	adds	r3, r7, r3
 800a068:	1cfa      	adds	r2, r7, #3
 800a06a:	7812      	ldrb	r2, [r2, #0]
 800a06c:	701a      	strb	r2, [r3, #0]
 800a06e:	e015      	b.n	800a09c <aBuff2int+0x58>
    iBuff[pos] = aBuff[i];
 800a070:	200f      	movs	r0, #15
 800a072:	183b      	adds	r3, r7, r0
 800a074:	781b      	ldrb	r3, [r3, #0]
 800a076:	687a      	ldr	r2, [r7, #4]
 800a078:	18d2      	adds	r2, r2, r3
 800a07a:	240e      	movs	r4, #14
 800a07c:	193b      	adds	r3, r7, r4
 800a07e:	781b      	ldrb	r3, [r3, #0]
 800a080:	7811      	ldrb	r1, [r2, #0]
 800a082:	2208      	movs	r2, #8
 800a084:	18ba      	adds	r2, r7, r2
 800a086:	54d1      	strb	r1, [r2, r3]
    pos++;
 800a088:	193b      	adds	r3, r7, r4
 800a08a:	781a      	ldrb	r2, [r3, #0]
 800a08c:	193b      	adds	r3, r7, r4
 800a08e:	3201      	adds	r2, #1
 800a090:	701a      	strb	r2, [r3, #0]
  for (i = start; i <= stop ; i++){
 800a092:	183b      	adds	r3, r7, r0
 800a094:	781a      	ldrb	r2, [r3, #0]
 800a096:	183b      	adds	r3, r7, r0
 800a098:	3201      	adds	r2, #1
 800a09a:	701a      	strb	r2, [r3, #0]
 800a09c:	200f      	movs	r0, #15
 800a09e:	183a      	adds	r2, r7, r0
 800a0a0:	1cbb      	adds	r3, r7, #2
 800a0a2:	7812      	ldrb	r2, [r2, #0]
 800a0a4:	781b      	ldrb	r3, [r3, #0]
 800a0a6:	429a      	cmp	r2, r3
 800a0a8:	d9e2      	bls.n	800a070 <aBuff2int+0x2c>
  }
  iBuff[pos] = '\0';
 800a0aa:	230e      	movs	r3, #14
 800a0ac:	18fb      	adds	r3, r7, r3
 800a0ae:	781b      	ldrb	r3, [r3, #0]
 800a0b0:	2208      	movs	r2, #8
 800a0b2:	18ba      	adds	r2, r7, r2
 800a0b4:	2100      	movs	r1, #0
 800a0b6:	54d1      	strb	r1, [r2, r3]
  if (start < 20) {
 800a0b8:	1cfb      	adds	r3, r7, #3
 800a0ba:	781b      	ldrb	r3, [r3, #0]
 800a0bc:	2b13      	cmp	r3, #19
 800a0be:	d849      	bhi.n	800a154 <aBuff2int+0x110>
    if (start == 17) { //month
 800a0c0:	1cfb      	adds	r3, r7, #3
 800a0c2:	781b      	ldrb	r3, [r3, #0]
 800a0c4:	2b11      	cmp	r3, #17
 800a0c6:	d122      	bne.n	800a10e <aBuff2int+0xca>
      for (i = 0; i < 12; i++) {
 800a0c8:	183b      	adds	r3, r7, r0
 800a0ca:	2200      	movs	r2, #0
 800a0cc:	701a      	strb	r2, [r3, #0]
 800a0ce:	e018      	b.n	800a102 <aBuff2int+0xbe>
        if (strcmp( iBuff, monthNames[i]) == 0) {
 800a0d0:	240f      	movs	r4, #15
 800a0d2:	193b      	adds	r3, r7, r4
 800a0d4:	781a      	ldrb	r2, [r3, #0]
 800a0d6:	4b25      	ldr	r3, [pc, #148]	@ (800a16c <aBuff2int+0x128>)
 800a0d8:	0092      	lsls	r2, r2, #2
 800a0da:	58d2      	ldr	r2, [r2, r3]
 800a0dc:	2308      	movs	r3, #8
 800a0de:	18fb      	adds	r3, r7, r3
 800a0e0:	0011      	movs	r1, r2
 800a0e2:	0018      	movs	r0, r3
 800a0e4:	f7f6 f838 	bl	8000158 <strcmp>
 800a0e8:	1e03      	subs	r3, r0, #0
 800a0ea:	d104      	bne.n	800a0f6 <aBuff2int+0xb2>
          return i+1;
 800a0ec:	193b      	adds	r3, r7, r4
 800a0ee:	781b      	ldrb	r3, [r3, #0]
 800a0f0:	3301      	adds	r3, #1
 800a0f2:	b2db      	uxtb	r3, r3
 800a0f4:	e035      	b.n	800a162 <aBuff2int+0x11e>
      for (i = 0; i < 12; i++) {
 800a0f6:	210f      	movs	r1, #15
 800a0f8:	187b      	adds	r3, r7, r1
 800a0fa:	781a      	ldrb	r2, [r3, #0]
 800a0fc:	187b      	adds	r3, r7, r1
 800a0fe:	3201      	adds	r2, #1
 800a100:	701a      	strb	r2, [r3, #0]
 800a102:	230f      	movs	r3, #15
 800a104:	18fb      	adds	r3, r7, r3
 800a106:	781b      	ldrb	r3, [r3, #0]
 800a108:	2b0b      	cmp	r3, #11
 800a10a:	d9e1      	bls.n	800a0d0 <aBuff2int+0x8c>
 800a10c:	e022      	b.n	800a154 <aBuff2int+0x110>
        }
      }
    }
    else {
      //day
      for (i = 0; i < 7; i++) {
 800a10e:	230f      	movs	r3, #15
 800a110:	18fb      	adds	r3, r7, r3
 800a112:	2200      	movs	r2, #0
 800a114:	701a      	strb	r2, [r3, #0]
 800a116:	e018      	b.n	800a14a <aBuff2int+0x106>
        if (strcmp( iBuff, dayNames[i]) == 0) {
 800a118:	240f      	movs	r4, #15
 800a11a:	193b      	adds	r3, r7, r4
 800a11c:	781a      	ldrb	r2, [r3, #0]
 800a11e:	4b14      	ldr	r3, [pc, #80]	@ (800a170 <aBuff2int+0x12c>)
 800a120:	0092      	lsls	r2, r2, #2
 800a122:	58d2      	ldr	r2, [r2, r3]
 800a124:	2308      	movs	r3, #8
 800a126:	18fb      	adds	r3, r7, r3
 800a128:	0011      	movs	r1, r2
 800a12a:	0018      	movs	r0, r3
 800a12c:	f7f6 f814 	bl	8000158 <strcmp>
 800a130:	1e03      	subs	r3, r0, #0
 800a132:	d104      	bne.n	800a13e <aBuff2int+0xfa>
          return i+1;
 800a134:	193b      	adds	r3, r7, r4
 800a136:	781b      	ldrb	r3, [r3, #0]
 800a138:	3301      	adds	r3, #1
 800a13a:	b2db      	uxtb	r3, r3
 800a13c:	e011      	b.n	800a162 <aBuff2int+0x11e>
      for (i = 0; i < 7; i++) {
 800a13e:	210f      	movs	r1, #15
 800a140:	187b      	adds	r3, r7, r1
 800a142:	781a      	ldrb	r2, [r3, #0]
 800a144:	187b      	adds	r3, r7, r1
 800a146:	3201      	adds	r2, #1
 800a148:	701a      	strb	r2, [r3, #0]
 800a14a:	230f      	movs	r3, #15
 800a14c:	18fb      	adds	r3, r7, r3
 800a14e:	781b      	ldrb	r3, [r3, #0]
 800a150:	2b06      	cmp	r3, #6
 800a152:	d9e1      	bls.n	800a118 <aBuff2int+0xd4>
        }
      }
    }
  }
  return atoi(iBuff);
 800a154:	2308      	movs	r3, #8
 800a156:	18fb      	adds	r3, r7, r3
 800a158:	0018      	movs	r0, r3
 800a15a:	f01a fc44 	bl	80249e6 <atoi>
 800a15e:	0003      	movs	r3, r0
 800a160:	b2db      	uxtb	r3, r3
}
 800a162:	0018      	movs	r0, r3
 800a164:	46bd      	mov	sp, r7
 800a166:	b005      	add	sp, #20
 800a168:	bd90      	pop	{r4, r7, pc}
 800a16a:	46c0      	nop			@ (mov r8, r8)
 800a16c:	2000005c 	.word	0x2000005c
 800a170:	20000040 	.word	0x20000040

0800a174 <ParseTime>:

void ParseTime(char* buffer) {
 800a174:	b590      	push	{r4, r7, lr}
 800a176:	b087      	sub	sp, #28
 800a178:	af02      	add	r7, sp, #8
 800a17a:	6078      	str	r0, [r7, #4]
//  RTC_TimeTypeDef currentTime;
//  RTC_DateTypeDef currentDate;
  RTC_GetTime(&currentTime, &currentDate);
 800a17c:	4a7b      	ldr	r2, [pc, #492]	@ (800a36c <ParseTime+0x1f8>)
 800a17e:	4b7c      	ldr	r3, [pc, #496]	@ (800a370 <ParseTime+0x1fc>)
 800a180:	0011      	movs	r1, r2
 800a182:	0018      	movs	r0, r3
 800a184:	f000 f96c 	bl	800a460 <RTC_GetTime>
  currentTime.Hours = aBuff2int(buffer, 24, 25);
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	2219      	movs	r2, #25
 800a18c:	2118      	movs	r1, #24
 800a18e:	0018      	movs	r0, r3
 800a190:	f7ff ff58 	bl	800a044 <aBuff2int>
 800a194:	0003      	movs	r3, r0
 800a196:	001a      	movs	r2, r3
 800a198:	4b75      	ldr	r3, [pc, #468]	@ (800a370 <ParseTime+0x1fc>)
 800a19a:	701a      	strb	r2, [r3, #0]
  currentTime.Minutes = aBuff2int(buffer, 27, 28);
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	221c      	movs	r2, #28
 800a1a0:	211b      	movs	r1, #27
 800a1a2:	0018      	movs	r0, r3
 800a1a4:	f7ff ff4e 	bl	800a044 <aBuff2int>
 800a1a8:	0003      	movs	r3, r0
 800a1aa:	001a      	movs	r2, r3
 800a1ac:	4b70      	ldr	r3, [pc, #448]	@ (800a370 <ParseTime+0x1fc>)
 800a1ae:	705a      	strb	r2, [r3, #1]
  currentTime.Seconds = aBuff2int(buffer, 30, 31);
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	221f      	movs	r2, #31
 800a1b4:	211e      	movs	r1, #30
 800a1b6:	0018      	movs	r0, r3
 800a1b8:	f7ff ff44 	bl	800a044 <aBuff2int>
 800a1bc:	0003      	movs	r3, r0
 800a1be:	001a      	movs	r2, r3
 800a1c0:	4b6b      	ldr	r3, [pc, #428]	@ (800a370 <ParseTime+0x1fc>)
 800a1c2:	709a      	strb	r2, [r3, #2]
  currentDate.Year = aBuff2int(buffer, 35, 36);
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	2224      	movs	r2, #36	@ 0x24
 800a1c8:	2123      	movs	r1, #35	@ 0x23
 800a1ca:	0018      	movs	r0, r3
 800a1cc:	f7ff ff3a 	bl	800a044 <aBuff2int>
 800a1d0:	0003      	movs	r3, r0
 800a1d2:	001a      	movs	r2, r3
 800a1d4:	4b65      	ldr	r3, [pc, #404]	@ (800a36c <ParseTime+0x1f8>)
 800a1d6:	70da      	strb	r2, [r3, #3]
  currentDate.Month = aBuff2int(buffer, 17, 19);
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	2213      	movs	r2, #19
 800a1dc:	2111      	movs	r1, #17
 800a1de:	0018      	movs	r0, r3
 800a1e0:	f7ff ff30 	bl	800a044 <aBuff2int>
 800a1e4:	0003      	movs	r3, r0
 800a1e6:	001a      	movs	r2, r3
 800a1e8:	4b60      	ldr	r3, [pc, #384]	@ (800a36c <ParseTime+0x1f8>)
 800a1ea:	705a      	strb	r2, [r3, #1]
  currentDate.Date = aBuff2int(buffer, 21,22);
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	2216      	movs	r2, #22
 800a1f0:	2115      	movs	r1, #21
 800a1f2:	0018      	movs	r0, r3
 800a1f4:	f7ff ff26 	bl	800a044 <aBuff2int>
 800a1f8:	0003      	movs	r3, r0
 800a1fa:	001a      	movs	r2, r3
 800a1fc:	4b5b      	ldr	r3, [pc, #364]	@ (800a36c <ParseTime+0x1f8>)
 800a1fe:	709a      	strb	r2, [r3, #2]
  currentDate.WeekDay = aBuff2int(buffer, 13, 15);
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	220f      	movs	r2, #15
 800a204:	210d      	movs	r1, #13
 800a206:	0018      	movs	r0, r3
 800a208:	f7ff ff1c 	bl	800a044 <aBuff2int>
 800a20c:	0003      	movs	r3, r0
 800a20e:	001a      	movs	r2, r3
 800a210:	4b56      	ldr	r3, [pc, #344]	@ (800a36c <ParseTime+0x1f8>)
 800a212:	701a      	strb	r2, [r3, #0]
  Debug("Current RTC time before update is: %02dh:%02dm:%02ds", currentTime.Hours , currentTime.Minutes, currentTime.Seconds);
 800a214:	4b56      	ldr	r3, [pc, #344]	@ (800a370 <ParseTime+0x1fc>)
 800a216:	781b      	ldrb	r3, [r3, #0]
 800a218:	001c      	movs	r4, r3
 800a21a:	4b55      	ldr	r3, [pc, #340]	@ (800a370 <ParseTime+0x1fc>)
 800a21c:	785b      	ldrb	r3, [r3, #1]
 800a21e:	0018      	movs	r0, r3
 800a220:	4b53      	ldr	r3, [pc, #332]	@ (800a370 <ParseTime+0x1fc>)
 800a222:	789b      	ldrb	r3, [r3, #2]
 800a224:	4a53      	ldr	r2, [pc, #332]	@ (800a374 <ParseTime+0x200>)
 800a226:	4954      	ldr	r1, [pc, #336]	@ (800a378 <ParseTime+0x204>)
 800a228:	9301      	str	r3, [sp, #4]
 800a22a:	9000      	str	r0, [sp, #0]
 800a22c:	0023      	movs	r3, r4
 800a22e:	2003      	movs	r0, #3
 800a230:	f009 fe04 	bl	8013e3c <CreateLine>
  Debug("Current RTC date before update is: %02d-%02d-%02d", currentDate.Date , currentDate.Month, currentDate.Year  );
 800a234:	4b4d      	ldr	r3, [pc, #308]	@ (800a36c <ParseTime+0x1f8>)
 800a236:	789b      	ldrb	r3, [r3, #2]
 800a238:	001c      	movs	r4, r3
 800a23a:	4b4c      	ldr	r3, [pc, #304]	@ (800a36c <ParseTime+0x1f8>)
 800a23c:	785b      	ldrb	r3, [r3, #1]
 800a23e:	0018      	movs	r0, r3
 800a240:	4b4a      	ldr	r3, [pc, #296]	@ (800a36c <ParseTime+0x1f8>)
 800a242:	78db      	ldrb	r3, [r3, #3]
 800a244:	4a4d      	ldr	r2, [pc, #308]	@ (800a37c <ParseTime+0x208>)
 800a246:	494c      	ldr	r1, [pc, #304]	@ (800a378 <ParseTime+0x204>)
 800a248:	9301      	str	r3, [sp, #4]
 800a24a:	9000      	str	r0, [sp, #0]
 800a24c:	0023      	movs	r3, r4
 800a24e:	2003      	movs	r0, #3
 800a250:	f009 fdf4 	bl	8013e3c <CreateLine>
  RTC_SetTime(&currentTime);
 800a254:	4b46      	ldr	r3, [pc, #280]	@ (800a370 <ParseTime+0x1fc>)
 800a256:	0018      	movs	r0, r3
 800a258:	f000 f89e 	bl	800a398 <RTC_SetTime>
  RTC_SetDate(&currentDate);
 800a25c:	4b43      	ldr	r3, [pc, #268]	@ (800a36c <ParseTime+0x1f8>)
 800a25e:	0018      	movs	r0, r3
 800a260:	f000 f8c0 	bl	800a3e4 <RTC_SetDate>
/* DST insert === */
  // DST == DaySavingTime == Zomertijd
  bool dst = false;
 800a264:	230f      	movs	r3, #15
 800a266:	18fb      	adds	r3, r7, r3
 800a268:	2200      	movs	r2, #0
 800a26a:	701a      	strb	r2, [r3, #0]

  int mnd = currentDate.Month;
 800a26c:	4b3f      	ldr	r3, [pc, #252]	@ (800a36c <ParseTime+0x1f8>)
 800a26e:	785b      	ldrb	r3, [r3, #1]
 800a270:	60bb      	str	r3, [r7, #8]
  dst = !((mnd < 3) || (mnd > 10)); // between october and march
 800a272:	68bb      	ldr	r3, [r7, #8]
 800a274:	2b02      	cmp	r3, #2
 800a276:	dd04      	ble.n	800a282 <ParseTime+0x10e>
 800a278:	68bb      	ldr	r3, [r7, #8]
 800a27a:	2b0a      	cmp	r3, #10
 800a27c:	dc01      	bgt.n	800a282 <ParseTime+0x10e>
 800a27e:	2201      	movs	r2, #1
 800a280:	e000      	b.n	800a284 <ParseTime+0x110>
 800a282:	2200      	movs	r2, #0
 800a284:	200f      	movs	r0, #15
 800a286:	183b      	adds	r3, r7, r0
 800a288:	701a      	strb	r2, [r3, #0]
 800a28a:	781a      	ldrb	r2, [r3, #0]
 800a28c:	2101      	movs	r1, #1
 800a28e:	400a      	ands	r2, r1
 800a290:	701a      	strb	r2, [r3, #0]
  if (dst)
 800a292:	0002      	movs	r2, r0
 800a294:	18bb      	adds	r3, r7, r2
 800a296:	781b      	ldrb	r3, [r3, #0]
 800a298:	2b00      	cmp	r3, #0
 800a29a:	d01d      	beq.n	800a2d8 <ParseTime+0x164>
  {
    if ((mnd == 3) && (currentDate.WeekDay == 7) && (currentDate.Date < 25)) {
 800a29c:	68bb      	ldr	r3, [r7, #8]
 800a29e:	2b03      	cmp	r3, #3
 800a2a0:	d10b      	bne.n	800a2ba <ParseTime+0x146>
 800a2a2:	4b32      	ldr	r3, [pc, #200]	@ (800a36c <ParseTime+0x1f8>)
 800a2a4:	781b      	ldrb	r3, [r3, #0]
 800a2a6:	2b07      	cmp	r3, #7
 800a2a8:	d107      	bne.n	800a2ba <ParseTime+0x146>
 800a2aa:	4b30      	ldr	r3, [pc, #192]	@ (800a36c <ParseTime+0x1f8>)
 800a2ac:	789b      	ldrb	r3, [r3, #2]
 800a2ae:	2b18      	cmp	r3, #24
 800a2b0:	d803      	bhi.n	800a2ba <ParseTime+0x146>
      // starts last sunday of march
      // weekday -> sunday returns 7
        dst = false;
 800a2b2:	18bb      	adds	r3, r7, r2
 800a2b4:	2200      	movs	r2, #0
 800a2b6:	701a      	strb	r2, [r3, #0]
 800a2b8:	e00e      	b.n	800a2d8 <ParseTime+0x164>
    }
    else if ((mnd == 10) && (currentDate.WeekDay == 7) && (currentDate.Date < 25))
 800a2ba:	68bb      	ldr	r3, [r7, #8]
 800a2bc:	2b0a      	cmp	r3, #10
 800a2be:	d10b      	bne.n	800a2d8 <ParseTime+0x164>
 800a2c0:	4b2a      	ldr	r3, [pc, #168]	@ (800a36c <ParseTime+0x1f8>)
 800a2c2:	781b      	ldrb	r3, [r3, #0]
 800a2c4:	2b07      	cmp	r3, #7
 800a2c6:	d107      	bne.n	800a2d8 <ParseTime+0x164>
 800a2c8:	4b28      	ldr	r3, [pc, #160]	@ (800a36c <ParseTime+0x1f8>)
 800a2ca:	789b      	ldrb	r3, [r3, #2]
 800a2cc:	2b18      	cmp	r3, #24
 800a2ce:	d803      	bhi.n	800a2d8 <ParseTime+0x164>
    {
        dst = false;
 800a2d0:	230f      	movs	r3, #15
 800a2d2:	18fb      	adds	r3, r7, r3
 800a2d4:	2200      	movs	r2, #0
 800a2d6:	701a      	strb	r2, [r3, #0]
    }
  }
  if (dst) {
 800a2d8:	230f      	movs	r3, #15
 800a2da:	18fb      	adds	r3, r7, r3
 800a2dc:	781b      	ldrb	r3, [r3, #0]
 800a2de:	2b00      	cmp	r3, #0
 800a2e0:	d02a      	beq.n	800a338 <ParseTime+0x1c4>
    Info("Daylight Saving Time active");
 800a2e2:	4a27      	ldr	r2, [pc, #156]	@ (800a380 <ParseTime+0x20c>)
 800a2e4:	4b27      	ldr	r3, [pc, #156]	@ (800a384 <ParseTime+0x210>)
 800a2e6:	0019      	movs	r1, r3
 800a2e8:	2002      	movs	r0, #2
 800a2ea:	f009 fda7 	bl	8013e3c <CreateLine>
    HAL_Delay(1000);
 800a2ee:	23fa      	movs	r3, #250	@ 0xfa
 800a2f0:	009b      	lsls	r3, r3, #2
 800a2f2:	0018      	movs	r0, r3
 800a2f4:	f00a fb24 	bl	8014940 <HAL_Delay>
    HAL_RTC_DST_Add1Hour(RealTime_Handle); // CEST or CET
 800a2f8:	4b23      	ldr	r3, [pc, #140]	@ (800a388 <ParseTime+0x214>)
 800a2fa:	681b      	ldr	r3, [r3, #0]
 800a2fc:	0018      	movs	r0, r3
 800a2fe:	f012 f9b1 	bl	801c664 <HAL_RTC_DST_Add1Hour>
    HAL_Delay(1000);
 800a302:	23fa      	movs	r3, #250	@ 0xfa
 800a304:	009b      	lsls	r3, r3, #2
 800a306:	0018      	movs	r0, r3
 800a308:	f00a fb1a 	bl	8014940 <HAL_Delay>
    RTC_GetTime(&currentTime, &currentDate);
 800a30c:	4a17      	ldr	r2, [pc, #92]	@ (800a36c <ParseTime+0x1f8>)
 800a30e:	4b18      	ldr	r3, [pc, #96]	@ (800a370 <ParseTime+0x1fc>)
 800a310:	0011      	movs	r1, r2
 800a312:	0018      	movs	r0, r3
 800a314:	f000 f8a4 	bl	800a460 <RTC_GetTime>
    Debug("Current RTC time after update is: %02dh:%02dm:%02ds", currentTime.Hours , currentTime.Minutes, currentTime.Seconds);
 800a318:	4b15      	ldr	r3, [pc, #84]	@ (800a370 <ParseTime+0x1fc>)
 800a31a:	781b      	ldrb	r3, [r3, #0]
 800a31c:	001c      	movs	r4, r3
 800a31e:	4b14      	ldr	r3, [pc, #80]	@ (800a370 <ParseTime+0x1fc>)
 800a320:	785b      	ldrb	r3, [r3, #1]
 800a322:	0018      	movs	r0, r3
 800a324:	4b12      	ldr	r3, [pc, #72]	@ (800a370 <ParseTime+0x1fc>)
 800a326:	789b      	ldrb	r3, [r3, #2]
 800a328:	4a18      	ldr	r2, [pc, #96]	@ (800a38c <ParseTime+0x218>)
 800a32a:	4913      	ldr	r1, [pc, #76]	@ (800a378 <ParseTime+0x204>)
 800a32c:	9301      	str	r3, [sp, #4]
 800a32e:	9000      	str	r0, [sp, #0]
 800a330:	0023      	movs	r3, r4
 800a332:	2003      	movs	r0, #3
 800a334:	f009 fd82 	bl	8013e3c <CreateLine>
  }

//=================
  if (currentDate.WeekDay == 2) {
 800a338:	4b0c      	ldr	r3, [pc, #48]	@ (800a36c <ParseTime+0x1f8>)
 800a33a:	781b      	ldrb	r3, [r3, #0]
 800a33c:	2b02      	cmp	r3, #2
 800a33e:	d104      	bne.n	800a34a <ParseTime+0x1d6>
    reset_fanCleaningDone(); // reset the cleaning flag done
 800a340:	f004 fa0e 	bl	800e760 <reset_fanCleaningDone>
    dstchkd = false; // reset the dst flag done
 800a344:	4b12      	ldr	r3, [pc, #72]	@ (800a390 <ParseTime+0x21c>)
 800a346:	2200      	movs	r2, #0
 800a348:	701a      	strb	r2, [r3, #0]
  }
  if (posixBootTime == 0) {
 800a34a:	4b12      	ldr	r3, [pc, #72]	@ (800a394 <ParseTime+0x220>)
 800a34c:	681b      	ldr	r3, [r3, #0]
 800a34e:	2b00      	cmp	r3, #0
 800a350:	d108      	bne.n	800a364 <ParseTime+0x1f0>
    posixBootTime = makeTime(&currentDate, &currentTime);
 800a352:	4a07      	ldr	r2, [pc, #28]	@ (800a370 <ParseTime+0x1fc>)
 800a354:	4b05      	ldr	r3, [pc, #20]	@ (800a36c <ParseTime+0x1f8>)
 800a356:	0011      	movs	r1, r2
 800a358:	0018      	movs	r0, r3
 800a35a:	f000 fa81 	bl	800a860 <makeTime>
 800a35e:	0002      	movs	r2, r0
 800a360:	4b0c      	ldr	r3, [pc, #48]	@ (800a394 <ParseTime+0x220>)
 800a362:	601a      	str	r2, [r3, #0]
  }
}
 800a364:	46c0      	nop			@ (mov r8, r8)
 800a366:	46bd      	mov	sp, r7
 800a368:	b005      	add	sp, #20
 800a36a:	bd90      	pop	{r4, r7, pc}
 800a36c:	20000e68 	.word	0x20000e68
 800a370:	20000e54 	.word	0x20000e54
 800a374:	0802be34 	.word	0x0802be34
 800a378:	0802be6c 	.word	0x0802be6c
 800a37c:	0802be70 	.word	0x0802be70
 800a380:	0802bea4 	.word	0x0802bea4
 800a384:	0802be30 	.word	0x0802be30
 800a388:	20000e50 	.word	0x20000e50
 800a38c:	0802bec0 	.word	0x0802bec0
 800a390:	20000e40 	.word	0x20000e40
 800a394:	20000e44 	.word	0x20000e44

0800a398 <RTC_SetTime>:

// Functie om de tijd in te stellen
void RTC_SetTime(RTC_TimeTypeDef* sTime) {
 800a398:	b580      	push	{r7, lr}
 800a39a:	b082      	sub	sp, #8
 800a39c:	af00      	add	r7, sp, #0
 800a39e:	6078      	str	r0, [r7, #4]
    sTime->TimeFormat = RTC_HOURFORMAT_24;
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	2200      	movs	r2, #0
 800a3a4:	70da      	strb	r2, [r3, #3]
    sTime->DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	2200      	movs	r2, #0
 800a3aa:	60da      	str	r2, [r3, #12]
    sTime->StoreOperation = RTC_STOREOPERATION_RESET;
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	2200      	movs	r2, #0
 800a3b0:	611a      	str	r2, [r3, #16]
        if (HAL_RTC_SetTime(RealTime_Handle, sTime, RTC_FORMAT_BIN) != HAL_OK) {
 800a3b2:	4b09      	ldr	r3, [pc, #36]	@ (800a3d8 <RTC_SetTime+0x40>)
 800a3b4:	681b      	ldr	r3, [r3, #0]
 800a3b6:	6879      	ldr	r1, [r7, #4]
 800a3b8:	2200      	movs	r2, #0
 800a3ba:	0018      	movs	r0, r3
 800a3bc:	f011 ff3e 	bl	801c23c <HAL_RTC_SetTime>
 800a3c0:	1e03      	subs	r3, r0, #0
 800a3c2:	d005      	beq.n	800a3d0 <RTC_SetTime+0x38>
      Error("Error setting time to RTC");
 800a3c4:	4a05      	ldr	r2, [pc, #20]	@ (800a3dc <RTC_SetTime+0x44>)
 800a3c6:	4b06      	ldr	r3, [pc, #24]	@ (800a3e0 <RTC_SetTime+0x48>)
 800a3c8:	0019      	movs	r1, r3
 800a3ca:	2001      	movs	r0, #1
 800a3cc:	f009 fd36 	bl	8013e3c <CreateLine>
    }
}
 800a3d0:	46c0      	nop			@ (mov r8, r8)
 800a3d2:	46bd      	mov	sp, r7
 800a3d4:	b002      	add	sp, #8
 800a3d6:	bd80      	pop	{r7, pc}
 800a3d8:	20000e50 	.word	0x20000e50
 800a3dc:	0802bef4 	.word	0x0802bef4
 800a3e0:	0802bf10 	.word	0x0802bf10

0800a3e4 <RTC_SetDate>:

// Functie om de datum in te stellen
void RTC_SetDate(RTC_DateTypeDef* sDate) {
 800a3e4:	b580      	push	{r7, lr}
 800a3e6:	b082      	sub	sp, #8
 800a3e8:	af00      	add	r7, sp, #0
 800a3ea:	6078      	str	r0, [r7, #4]
    if (HAL_RTC_SetDate(RealTime_Handle, sDate, RTC_FORMAT_BIN) != HAL_OK) {
 800a3ec:	4b16      	ldr	r3, [pc, #88]	@ (800a448 <RTC_SetDate+0x64>)
 800a3ee:	681b      	ldr	r3, [r3, #0]
 800a3f0:	6879      	ldr	r1, [r7, #4]
 800a3f2:	2200      	movs	r2, #0
 800a3f4:	0018      	movs	r0, r3
 800a3f6:	f012 f829 	bl	801c44c <HAL_RTC_SetDate>
 800a3fa:	1e03      	subs	r3, r0, #0
 800a3fc:	d005      	beq.n	800a40a <RTC_SetDate+0x26>
      Error("Error setting date to RTC");
 800a3fe:	4a13      	ldr	r2, [pc, #76]	@ (800a44c <RTC_SetDate+0x68>)
 800a400:	4b13      	ldr	r3, [pc, #76]	@ (800a450 <RTC_SetDate+0x6c>)
 800a402:	0019      	movs	r1, r3
 800a404:	2001      	movs	r0, #1
 800a406:	f009 fd19 	bl	8013e3c <CreateLine>
    }
    //check the backup register
    if (HAL_RTCEx_BKUPRead(RealTime_Handle, RTC_BKP_DR1) != 0xBEBE) {
 800a40a:	4b0f      	ldr	r3, [pc, #60]	@ (800a448 <RTC_SetDate+0x64>)
 800a40c:	681b      	ldr	r3, [r3, #0]
 800a40e:	2101      	movs	r1, #1
 800a410:	0018      	movs	r0, r3
 800a412:	f012 fb7f 	bl	801cb14 <HAL_RTCEx_BKUPRead>
 800a416:	0003      	movs	r3, r0
 800a418:	4a0e      	ldr	r2, [pc, #56]	@ (800a454 <RTC_SetDate+0x70>)
 800a41a:	4293      	cmp	r3, r2
 800a41c:	d010      	beq.n	800a440 <RTC_SetDate+0x5c>
      // Write Back Up Register 1 Data
      Debug("writing backup register");
 800a41e:	4a0e      	ldr	r2, [pc, #56]	@ (800a458 <RTC_SetDate+0x74>)
 800a420:	4b0e      	ldr	r3, [pc, #56]	@ (800a45c <RTC_SetDate+0x78>)
 800a422:	0019      	movs	r1, r3
 800a424:	2003      	movs	r0, #3
 800a426:	f009 fd09 	bl	8013e3c <CreateLine>
      HAL_PWR_EnableBkUpAccess();
 800a42a:	f010 fe9d 	bl	801b168 <HAL_PWR_EnableBkUpAccess>
      // Writes a data in a RTC Backup data Register 1
      HAL_RTCEx_BKUPWrite(RealTime_Handle, RTC_BKP_DR1, 0xBEBE);
 800a42e:	4b06      	ldr	r3, [pc, #24]	@ (800a448 <RTC_SetDate+0x64>)
 800a430:	681b      	ldr	r3, [r3, #0]
 800a432:	4a08      	ldr	r2, [pc, #32]	@ (800a454 <RTC_SetDate+0x70>)
 800a434:	2101      	movs	r1, #1
 800a436:	0018      	movs	r0, r3
 800a438:	f012 fb54 	bl	801cae4 <HAL_RTCEx_BKUPWrite>
      HAL_PWR_DisableBkUpAccess();
 800a43c:	f010 fea2 	bl	801b184 <HAL_PWR_DisableBkUpAccess>
    }
}
 800a440:	46c0      	nop			@ (mov r8, r8)
 800a442:	46bd      	mov	sp, r7
 800a444:	b002      	add	sp, #8
 800a446:	bd80      	pop	{r7, pc}
 800a448:	20000e50 	.word	0x20000e50
 800a44c:	0802bf14 	.word	0x0802bf14
 800a450:	0802bf10 	.word	0x0802bf10
 800a454:	0000bebe 	.word	0x0000bebe
 800a458:	0802bf30 	.word	0x0802bf30
 800a45c:	0802be6c 	.word	0x0802be6c

0800a460 <RTC_GetTime>:

void RTC_GetTime(RTC_TimeTypeDef* gTime, RTC_DateTypeDef* gDate) {
 800a460:	b590      	push	{r4, r7, lr}
 800a462:	b085      	sub	sp, #20
 800a464:	af00      	add	r7, sp, #0
 800a466:	6078      	str	r0, [r7, #4]
 800a468:	6039      	str	r1, [r7, #0]
uint8_t t = 1;
 800a46a:	240f      	movs	r4, #15
 800a46c:	193b      	adds	r3, r7, r4
 800a46e:	2201      	movs	r2, #1
 800a470:	701a      	strb	r2, [r3, #0]
uint8_t prevValue = 0;
 800a472:	230e      	movs	r3, #14
 800a474:	18fb      	adds	r3, r7, r3
 800a476:	2200      	movs	r2, #0
 800a478:	701a      	strb	r2, [r3, #0]
// Battery_Status status;
//  status = powerCheck();
//  if ( status == BATTERY_CRITICAL) {
  if (batteryCharge  < 3.77) {
 800a47a:	4b31      	ldr	r3, [pc, #196]	@ (800a540 <RTC_GetTime+0xe0>)
 800a47c:	681b      	ldr	r3, [r3, #0]
 800a47e:	1c18      	adds	r0, r3, #0
 800a480:	f7f9 fa08 	bl	8003894 <__aeabi_f2d>
 800a484:	4a2f      	ldr	r2, [pc, #188]	@ (800a544 <RTC_GetTime+0xe4>)
 800a486:	4b30      	ldr	r3, [pc, #192]	@ (800a548 <RTC_GetTime+0xe8>)
 800a488:	f7f6 f818 	bl	80004bc <__aeabi_dcmplt>
 800a48c:	1e03      	subs	r3, r0, #0
 800a48e:	d004      	beq.n	800a49a <RTC_GetTime+0x3a>
    //    To be able to read the RTC calendar register when the APB1 clock frequency is less than
//    seven times the RTC clock frequency (7*RTCLCK), the software must read the calendar
//    time and date registers twice.
    t++; //
 800a490:	193b      	adds	r3, r7, r4
 800a492:	781a      	ldrb	r2, [r3, #0]
 800a494:	193b      	adds	r3, r7, r4
 800a496:	3201      	adds	r2, #1
 800a498:	701a      	strb	r2, [r3, #0]
  }
  for (uint8_t i= 0; i < t; i++) {
 800a49a:	230d      	movs	r3, #13
 800a49c:	18fb      	adds	r3, r7, r3
 800a49e:	2200      	movs	r2, #0
 800a4a0:	701a      	strb	r2, [r3, #0]
 800a4a2:	e03f      	b.n	800a524 <RTC_GetTime+0xc4>
    if (HAL_RTC_GetTime(RealTime_Handle, gTime, RTC_FORMAT_BIN) != HAL_OK) {
 800a4a4:	4b29      	ldr	r3, [pc, #164]	@ (800a54c <RTC_GetTime+0xec>)
 800a4a6:	681b      	ldr	r3, [r3, #0]
 800a4a8:	6879      	ldr	r1, [r7, #4]
 800a4aa:	2200      	movs	r2, #0
 800a4ac:	0018      	movs	r0, r3
 800a4ae:	f011 ff6f 	bl	801c390 <HAL_RTC_GetTime>
 800a4b2:	1e03      	subs	r3, r0, #0
 800a4b4:	d005      	beq.n	800a4c2 <RTC_GetTime+0x62>
      Error("Error getting time from RTC");
 800a4b6:	4a26      	ldr	r2, [pc, #152]	@ (800a550 <RTC_GetTime+0xf0>)
 800a4b8:	4b26      	ldr	r3, [pc, #152]	@ (800a554 <RTC_GetTime+0xf4>)
 800a4ba:	0019      	movs	r1, r3
 800a4bc:	2001      	movs	r0, #1
 800a4be:	f009 fcbd 	bl	8013e3c <CreateLine>
    }
    if (HAL_RTC_GetDate(RealTime_Handle, gDate, RTC_FORMAT_BIN) != HAL_OK) {
 800a4c2:	4b22      	ldr	r3, [pc, #136]	@ (800a54c <RTC_GetTime+0xec>)
 800a4c4:	681b      	ldr	r3, [r3, #0]
 800a4c6:	6839      	ldr	r1, [r7, #0]
 800a4c8:	2200      	movs	r2, #0
 800a4ca:	0018      	movs	r0, r3
 800a4cc:	f012 f852 	bl	801c574 <HAL_RTC_GetDate>
 800a4d0:	1e03      	subs	r3, r0, #0
 800a4d2:	d005      	beq.n	800a4e0 <RTC_GetTime+0x80>
      Error("Error getting date from RTC");
 800a4d4:	4a20      	ldr	r2, [pc, #128]	@ (800a558 <RTC_GetTime+0xf8>)
 800a4d6:	4b1f      	ldr	r3, [pc, #124]	@ (800a554 <RTC_GetTime+0xf4>)
 800a4d8:	0019      	movs	r1, r3
 800a4da:	2001      	movs	r0, #1
 800a4dc:	f009 fcae 	bl	8013e3c <CreateLine>
    }
//    if ( status == BATTERY_CRITICAL) {
    if (batteryCharge  < 3.77) {
 800a4e0:	4b17      	ldr	r3, [pc, #92]	@ (800a540 <RTC_GetTime+0xe0>)
 800a4e2:	681b      	ldr	r3, [r3, #0]
 800a4e4:	1c18      	adds	r0, r3, #0
 800a4e6:	f7f9 f9d5 	bl	8003894 <__aeabi_f2d>
 800a4ea:	4a16      	ldr	r2, [pc, #88]	@ (800a544 <RTC_GetTime+0xe4>)
 800a4ec:	4b16      	ldr	r3, [pc, #88]	@ (800a548 <RTC_GetTime+0xe8>)
 800a4ee:	f7f5 ffe5 	bl	80004bc <__aeabi_dcmplt>
 800a4f2:	1e03      	subs	r3, r0, #0
 800a4f4:	d010      	beq.n	800a518 <RTC_GetTime+0xb8>
      if (prevValue != gTime->Hours) {
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	781b      	ldrb	r3, [r3, #0]
 800a4fa:	210e      	movs	r1, #14
 800a4fc:	187a      	adds	r2, r7, r1
 800a4fe:	7812      	ldrb	r2, [r2, #0]
 800a500:	429a      	cmp	r2, r3
 800a502:	d018      	beq.n	800a536 <RTC_GetTime+0xd6>
        prevValue = gTime->Hours;
 800a504:	187b      	adds	r3, r7, r1
 800a506:	687a      	ldr	r2, [r7, #4]
 800a508:	7812      	ldrb	r2, [r2, #0]
 800a50a:	701a      	strb	r2, [r3, #0]
        t++;
 800a50c:	210f      	movs	r1, #15
 800a50e:	187b      	adds	r3, r7, r1
 800a510:	781a      	ldrb	r2, [r3, #0]
 800a512:	187b      	adds	r3, r7, r1
 800a514:	3201      	adds	r2, #1
 800a516:	701a      	strb	r2, [r3, #0]
  for (uint8_t i= 0; i < t; i++) {
 800a518:	210d      	movs	r1, #13
 800a51a:	187b      	adds	r3, r7, r1
 800a51c:	781a      	ldrb	r2, [r3, #0]
 800a51e:	187b      	adds	r3, r7, r1
 800a520:	3201      	adds	r2, #1
 800a522:	701a      	strb	r2, [r3, #0]
 800a524:	230d      	movs	r3, #13
 800a526:	18fa      	adds	r2, r7, r3
 800a528:	230f      	movs	r3, #15
 800a52a:	18fb      	adds	r3, r7, r3
 800a52c:	7812      	ldrb	r2, [r2, #0]
 800a52e:	781b      	ldrb	r3, [r3, #0]
 800a530:	429a      	cmp	r2, r3
 800a532:	d3b7      	bcc.n	800a4a4 <RTC_GetTime+0x44>
 800a534:	e000      	b.n	800a538 <RTC_GetTime+0xd8>
      }
      else {
        return;
 800a536:	46c0      	nop			@ (mov r8, r8)
      }
    }
  }
}
 800a538:	46bd      	mov	sp, r7
 800a53a:	b005      	add	sp, #20
 800a53c:	bd90      	pop	{r4, r7, pc}
 800a53e:	46c0      	nop			@ (mov r8, r8)
 800a540:	2000215c 	.word	0x2000215c
 800a544:	c28f5c29 	.word	0xc28f5c29
 800a548:	400e28f5 	.word	0x400e28f5
 800a54c:	20000e50 	.word	0x20000e50
 800a550:	0802bf48 	.word	0x0802bf48
 800a554:	0802bf10 	.word	0x0802bf10
 800a558:	0802bf64 	.word	0x0802bf64

0800a55c <getPosixTime>:

// Functie om de tijd uit te lezen
uint32_t getPosixTime(void) {
 800a55c:	b580      	push	{r7, lr}
 800a55e:	af00      	add	r7, sp, #0
//  RTC_TimeTypeDef currentTime;
//  RTC_DateTypeDef currentDate;
  RTC_GetTime(&currentTime, &currentDate);
 800a560:	4a07      	ldr	r2, [pc, #28]	@ (800a580 <getPosixTime+0x24>)
 800a562:	4b08      	ldr	r3, [pc, #32]	@ (800a584 <getPosixTime+0x28>)
 800a564:	0011      	movs	r1, r2
 800a566:	0018      	movs	r0, r3
 800a568:	f7ff ff7a 	bl	800a460 <RTC_GetTime>
  return makeTime(&currentDate, &currentTime);
 800a56c:	4a05      	ldr	r2, [pc, #20]	@ (800a584 <getPosixTime+0x28>)
 800a56e:	4b04      	ldr	r3, [pc, #16]	@ (800a580 <getPosixTime+0x24>)
 800a570:	0011      	movs	r1, r2
 800a572:	0018      	movs	r0, r3
 800a574:	f000 f974 	bl	800a860 <makeTime>
 800a578:	0003      	movs	r3, r0
}
 800a57a:	0018      	movs	r0, r3
 800a57c:	46bd      	mov	sp, r7
 800a57e:	bd80      	pop	{r7, pc}
 800a580:	20000e68 	.word	0x20000e68
 800a584:	20000e54 	.word	0x20000e54

0800a588 <getUTCfromPosixTime>:

void getUTCfromPosixTime(uint32_t posixTime, char* strbuf1) {
 800a588:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a58a:	b087      	sub	sp, #28
 800a58c:	af04      	add	r7, sp, #16
 800a58e:	6078      	str	r0, [r7, #4]
 800a590:	6039      	str	r1, [r7, #0]
//  RTC_TimeTypeDef currentTime;
//  RTC_DateTypeDef currentDate;
  breakPosixTime(posixTime, &currentDate, &currentTime);
 800a592:	4a12      	ldr	r2, [pc, #72]	@ (800a5dc <getUTCfromPosixTime+0x54>)
 800a594:	4912      	ldr	r1, [pc, #72]	@ (800a5e0 <getUTCfromPosixTime+0x58>)
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	0018      	movs	r0, r3
 800a59a:	f000 fa2b 	bl	800a9f4 <breakPosixTime>
  sprintf(strbuf1, "%02d-%02d-%02d %02dh:%02dm:%02ds\r\n", currentDate.Date, currentDate.Month, currentDate.Year,
 800a59e:	4b10      	ldr	r3, [pc, #64]	@ (800a5e0 <getUTCfromPosixTime+0x58>)
 800a5a0:	789b      	ldrb	r3, [r3, #2]
 800a5a2:	001e      	movs	r6, r3
 800a5a4:	4b0e      	ldr	r3, [pc, #56]	@ (800a5e0 <getUTCfromPosixTime+0x58>)
 800a5a6:	785b      	ldrb	r3, [r3, #1]
 800a5a8:	469c      	mov	ip, r3
 800a5aa:	4b0d      	ldr	r3, [pc, #52]	@ (800a5e0 <getUTCfromPosixTime+0x58>)
 800a5ac:	78db      	ldrb	r3, [r3, #3]
 800a5ae:	001a      	movs	r2, r3
      currentTime.Hours, currentTime.Minutes, currentTime.Seconds);
 800a5b0:	4b0a      	ldr	r3, [pc, #40]	@ (800a5dc <getUTCfromPosixTime+0x54>)
 800a5b2:	781b      	ldrb	r3, [r3, #0]
  sprintf(strbuf1, "%02d-%02d-%02d %02dh:%02dm:%02ds\r\n", currentDate.Date, currentDate.Month, currentDate.Year,
 800a5b4:	001c      	movs	r4, r3
      currentTime.Hours, currentTime.Minutes, currentTime.Seconds);
 800a5b6:	4b09      	ldr	r3, [pc, #36]	@ (800a5dc <getUTCfromPosixTime+0x54>)
 800a5b8:	785b      	ldrb	r3, [r3, #1]
  sprintf(strbuf1, "%02d-%02d-%02d %02dh:%02dm:%02ds\r\n", currentDate.Date, currentDate.Month, currentDate.Year,
 800a5ba:	001d      	movs	r5, r3
      currentTime.Hours, currentTime.Minutes, currentTime.Seconds);
 800a5bc:	4b07      	ldr	r3, [pc, #28]	@ (800a5dc <getUTCfromPosixTime+0x54>)
 800a5be:	789b      	ldrb	r3, [r3, #2]
  sprintf(strbuf1, "%02d-%02d-%02d %02dh:%02dm:%02ds\r\n", currentDate.Date, currentDate.Month, currentDate.Year,
 800a5c0:	4908      	ldr	r1, [pc, #32]	@ (800a5e4 <getUTCfromPosixTime+0x5c>)
 800a5c2:	6838      	ldr	r0, [r7, #0]
 800a5c4:	9303      	str	r3, [sp, #12]
 800a5c6:	9502      	str	r5, [sp, #8]
 800a5c8:	9401      	str	r4, [sp, #4]
 800a5ca:	9200      	str	r2, [sp, #0]
 800a5cc:	4663      	mov	r3, ip
 800a5ce:	0032      	movs	r2, r6
 800a5d0:	f01b fe5e 	bl	8026290 <siprintf>
}
 800a5d4:	46c0      	nop			@ (mov r8, r8)
 800a5d6:	46bd      	mov	sp, r7
 800a5d8:	b003      	add	sp, #12
 800a5da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a5dc:	20000e54 	.word	0x20000e54
 800a5e0:	20000e68 	.word	0x20000e68
 800a5e4:	0802bf80 	.word	0x0802bf80

0800a5e8 <RTC_SetWakeUpTimer>:
//     // Doe iets wanneer het alarm afgaat
//     HAL_GPIO_TogglePin(LED_C_Red_GPIO_Port, LED_C_Red_Pin);
// }

void RTC_SetWakeUpTimer(uint32_t secondsOfSleep)
{
 800a5e8:	b580      	push	{r7, lr}
 800a5ea:	b082      	sub	sp, #8
 800a5ec:	af00      	add	r7, sp, #0
 800a5ee:	6078      	str	r0, [r7, #4]
    HAL_RTCEx_DeactivateWakeUpTimer(RealTime_Handle);
 800a5f0:	4b10      	ldr	r3, [pc, #64]	@ (800a634 <RTC_SetWakeUpTimer+0x4c>)
 800a5f2:	681b      	ldr	r3, [r3, #0]
 800a5f4:	0018      	movs	r0, r3
 800a5f6:	f012 f9d9 	bl	801c9ac <HAL_RTCEx_DeactivateWakeUpTimer>
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(RealTime_Handle, RTC_FLAG_WUTF);
 800a5fa:	4b0e      	ldr	r3, [pc, #56]	@ (800a634 <RTC_SetWakeUpTimer+0x4c>)
 800a5fc:	681b      	ldr	r3, [r3, #0]
 800a5fe:	681b      	ldr	r3, [r3, #0]
 800a600:	68db      	ldr	r3, [r3, #12]
 800a602:	22ff      	movs	r2, #255	@ 0xff
 800a604:	401a      	ands	r2, r3
 800a606:	4b0b      	ldr	r3, [pc, #44]	@ (800a634 <RTC_SetWakeUpTimer+0x4c>)
 800a608:	681b      	ldr	r3, [r3, #0]
 800a60a:	681b      	ldr	r3, [r3, #0]
 800a60c:	490a      	ldr	r1, [pc, #40]	@ (800a638 <RTC_SetWakeUpTimer+0x50>)
 800a60e:	430a      	orrs	r2, r1
 800a610:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG();
 800a612:	4b0a      	ldr	r3, [pc, #40]	@ (800a63c <RTC_SetWakeUpTimer+0x54>)
 800a614:	2280      	movs	r2, #128	@ 0x80
 800a616:	0352      	lsls	r2, r2, #13
 800a618:	615a      	str	r2, [r3, #20]
// for testing 60 seconds => 60 - 1 = 59
//    HAL_RTCEx_SetWakeUpTimer_IT(RealTime_Handle, 0x003D, RTC_WAKEUPCLOCK_CK_SPRE_16BITS); //ck_spre ~1 Hz (40 kHz div127 div 315) used as clock for the RTC wake-up timer
    HAL_RTCEx_SetWakeUpTimer_IT(RealTime_Handle, secondsOfSleep-1, RTC_WAKEUPCLOCK_CK_SPRE_16BITS); //ck_spre ~1 Hz (40 kHz div127 div 315) used as clock for the RTC wake-up timer
 800a61a:	4b06      	ldr	r3, [pc, #24]	@ (800a634 <RTC_SetWakeUpTimer+0x4c>)
 800a61c:	6818      	ldr	r0, [r3, #0]
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	3b01      	subs	r3, #1
 800a622:	2204      	movs	r2, #4
 800a624:	0019      	movs	r1, r3
 800a626:	f012 f8e9 	bl	801c7fc <HAL_RTCEx_SetWakeUpTimer_IT>
}
 800a62a:	46c0      	nop			@ (mov r8, r8)
 800a62c:	46bd      	mov	sp, r7
 800a62e:	b002      	add	sp, #8
 800a630:	bd80      	pop	{r7, pc}
 800a632:	46c0      	nop			@ (mov r8, r8)
 800a634:	20000e50 	.word	0x20000e50
 800a638:	fffffb7f 	.word	0xfffffb7f
 800a63c:	40010400 	.word	0x40010400

0800a640 <Enter_Stop_Mode_for_empty_battery>:
  HAL_PWR_EnterSTANDBYMode(); // Not such a good idea, the esp is powered when gpio is high impedance
}
*/

void Enter_Stop_Mode_for_empty_battery(uint16_t sleepTime)
{
 800a640:	b580      	push	{r7, lr}
 800a642:	b084      	sub	sp, #16
 800a644:	af02      	add	r7, sp, #8
 800a646:	0002      	movs	r2, r0
 800a648:	1dbb      	adds	r3, r7, #6
 800a64a:	801a      	strh	r2, [r3, #0]
  if (sen5x_On) {
 800a64c:	4b22      	ldr	r3, [pc, #136]	@ (800a6d8 <Enter_Stop_Mode_for_empty_battery+0x98>)
 800a64e:	781b      	ldrb	r3, [r3, #0]
 800a650:	2b00      	cmp	r3, #0
 800a652:	d001      	beq.n	800a658 <Enter_Stop_Mode_for_empty_battery+0x18>
    sen5x_Power_Off();
 800a654:	f004 f858 	bl	800e708 <sen5x_Power_Off>
  }
  Info("Battery voltage %.02fV", batteryCharge);
 800a658:	4b20      	ldr	r3, [pc, #128]	@ (800a6dc <Enter_Stop_Mode_for_empty_battery+0x9c>)
 800a65a:	681b      	ldr	r3, [r3, #0]
 800a65c:	1c18      	adds	r0, r3, #0
 800a65e:	f7f9 f919 	bl	8003894 <__aeabi_f2d>
 800a662:	0002      	movs	r2, r0
 800a664:	000b      	movs	r3, r1
 800a666:	481e      	ldr	r0, [pc, #120]	@ (800a6e0 <Enter_Stop_Mode_for_empty_battery+0xa0>)
 800a668:	491e      	ldr	r1, [pc, #120]	@ (800a6e4 <Enter_Stop_Mode_for_empty_battery+0xa4>)
 800a66a:	9200      	str	r2, [sp, #0]
 800a66c:	9301      	str	r3, [sp, #4]
 800a66e:	0002      	movs	r2, r0
 800a670:	2002      	movs	r0, #2
 800a672:	f009 fbe3 	bl	8013e3c <CreateLine>
//  powerDisplay(powerCheck());
  Debug("Entering STOP mode for %d seconds", sleepTime);
 800a676:	1dbb      	adds	r3, r7, #6
 800a678:	881b      	ldrh	r3, [r3, #0]
 800a67a:	4a1b      	ldr	r2, [pc, #108]	@ (800a6e8 <Enter_Stop_Mode_for_empty_battery+0xa8>)
 800a67c:	491b      	ldr	r1, [pc, #108]	@ (800a6ec <Enter_Stop_Mode_for_empty_battery+0xac>)
 800a67e:	2003      	movs	r0, #3
 800a680:	f009 fbdc 	bl	8013e3c <CreateLine>
  getUTCfromPosixTime(getPosixTime() + sleepTime, strbuf);
 800a684:	f7ff ff6a 	bl	800a55c <getPosixTime>
 800a688:	0002      	movs	r2, r0
 800a68a:	1dbb      	adds	r3, r7, #6
 800a68c:	881b      	ldrh	r3, [r3, #0]
 800a68e:	18d3      	adds	r3, r2, r3
 800a690:	4a17      	ldr	r2, [pc, #92]	@ (800a6f0 <Enter_Stop_Mode_for_empty_battery+0xb0>)
 800a692:	0011      	movs	r1, r2
 800a694:	0018      	movs	r0, r3
 800a696:	f7ff ff77 	bl	800a588 <getUTCfromPosixTime>
  Info("The system will wake up at %s.", strbuf);
 800a69a:	4b15      	ldr	r3, [pc, #84]	@ (800a6f0 <Enter_Stop_Mode_for_empty_battery+0xb0>)
 800a69c:	4a15      	ldr	r2, [pc, #84]	@ (800a6f4 <Enter_Stop_Mode_for_empty_battery+0xb4>)
 800a69e:	4911      	ldr	r1, [pc, #68]	@ (800a6e4 <Enter_Stop_Mode_for_empty_battery+0xa4>)
 800a6a0:	2002      	movs	r0, #2
 800a6a2:	f009 fbcb 	bl	8013e3c <CreateLine>
  HAL_Delay(100);
 800a6a6:	2064      	movs	r0, #100	@ 0x64
 800a6a8:	f00a f94a 	bl	8014940 <HAL_Delay>
  HAL_SuspendTick();
 800a6ac:	f00a f96c 	bl	8014988 <HAL_SuspendTick>
  RTC_SetWakeUpTimer(sleepTime);
 800a6b0:	1dbb      	adds	r3, r7, #6
 800a6b2:	881b      	ldrh	r3, [r3, #0]
 800a6b4:	0018      	movs	r0, r3
 800a6b6:	f7ff ff97 	bl	800a5e8 <RTC_SetWakeUpTimer>
  HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
 800a6ba:	2101      	movs	r1, #1
 800a6bc:	2001      	movs	r0, #1
 800a6be:	f010 fd71 	bl	801b1a4 <HAL_PWR_EnterSTOPMode>
  SystemClock_Config();
 800a6c2:	f002 fd05 	bl	800d0d0 <SystemClock_Config>
  HAL_ResumeTick(); // Enable SysTick after wake-up
 800a6c6:	f00a f96d 	bl	80149a4 <HAL_ResumeTick>
  showTime();
 800a6ca:	f7ff fbad 	bl	8009e28 <showTime>
}
 800a6ce:	46c0      	nop			@ (mov r8, r8)
 800a6d0:	46bd      	mov	sp, r7
 800a6d2:	b002      	add	sp, #8
 800a6d4:	bd80      	pop	{r7, pc}
 800a6d6:	46c0      	nop			@ (mov r8, r8)
 800a6d8:	200011bd 	.word	0x200011bd
 800a6dc:	2000215c 	.word	0x2000215c
 800a6e0:	0802bfd4 	.word	0x0802bfd4
 800a6e4:	0802be30 	.word	0x0802be30
 800a6e8:	0802bfec 	.word	0x0802bfec
 800a6ec:	0802be6c 	.word	0x0802be6c
 800a6f0:	20000e6c 	.word	0x20000e6c
 800a6f4:	0802c010 	.word	0x0802c010

0800a6f8 <Enter_Stop_Mode>:

void Enter_Stop_Mode(uint16_t sleepTime)
{
 800a6f8:	b580      	push	{r7, lr}
 800a6fa:	b082      	sub	sp, #8
 800a6fc:	af00      	add	r7, sp, #0
 800a6fe:	0002      	movs	r2, r0
 800a700:	1dbb      	adds	r3, r7, #6
 800a702:	801a      	strh	r2, [r3, #0]
  if (sen5x_On) {
 800a704:	4b45      	ldr	r3, [pc, #276]	@ (800a81c <Enter_Stop_Mode+0x124>)
 800a706:	781b      	ldrb	r3, [r3, #0]
 800a708:	2b00      	cmp	r3, #0
 800a70a:	d001      	beq.n	800a710 <Enter_Stop_Mode+0x18>
    sen5x_Power_Off();
 800a70c:	f003 fffc 	bl	800e708 <sen5x_Power_Off>
  }
//  Info("Battery voltage %.02fV", batteryCharge);
  batteryChargeCheck();
 800a710:	f007 ff86 	bl	8012620 <batteryChargeCheck>
//  powerDisplay(powerCheck());
  Debug("Entering STOP mode for %d seconds", sleepTime);
 800a714:	1dbb      	adds	r3, r7, #6
 800a716:	881b      	ldrh	r3, [r3, #0]
 800a718:	4a41      	ldr	r2, [pc, #260]	@ (800a820 <Enter_Stop_Mode+0x128>)
 800a71a:	4942      	ldr	r1, [pc, #264]	@ (800a824 <Enter_Stop_Mode+0x12c>)
 800a71c:	2003      	movs	r0, #3
 800a71e:	f009 fb8d 	bl	8013e3c <CreateLine>
  getUTCfromPosixTime(getPosixTime() + sleepTime, strbuf);
 800a722:	f7ff ff1b 	bl	800a55c <getPosixTime>
 800a726:	0002      	movs	r2, r0
 800a728:	1dbb      	adds	r3, r7, #6
 800a72a:	881b      	ldrh	r3, [r3, #0]
 800a72c:	18d3      	adds	r3, r2, r3
 800a72e:	4a3e      	ldr	r2, [pc, #248]	@ (800a828 <Enter_Stop_Mode+0x130>)
 800a730:	0011      	movs	r1, r2
 800a732:	0018      	movs	r0, r3
 800a734:	f7ff ff28 	bl	800a588 <getUTCfromPosixTime>
  Info("The system will wake up at %s.", strbuf);
 800a738:	4b3b      	ldr	r3, [pc, #236]	@ (800a828 <Enter_Stop_Mode+0x130>)
 800a73a:	4a3c      	ldr	r2, [pc, #240]	@ (800a82c <Enter_Stop_Mode+0x134>)
 800a73c:	493c      	ldr	r1, [pc, #240]	@ (800a830 <Enter_Stop_Mode+0x138>)
 800a73e:	2002      	movs	r0, #2
 800a740:	f009 fb7c 	bl	8013e3c <CreateLine>
  HAL_Delay(100);
 800a744:	2064      	movs	r0, #100	@ 0x64
 800a746:	f00a f8fb 	bl	8014940 <HAL_Delay>
  HAL_SuspendTick();
 800a74a:	f00a f91d 	bl	8014988 <HAL_SuspendTick>
  RTC_SetWakeUpTimer(sleepTime);
 800a74e:	1dbb      	adds	r3, r7, #6
 800a750:	881b      	ldrh	r3, [r3, #0]
 800a752:	0018      	movs	r0, r3
 800a754:	f7ff ff48 	bl	800a5e8 <RTC_SetWakeUpTimer>
#ifdef SSD1306
  stop_I2C2();
#endif
  HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
 800a758:	2101      	movs	r1, #1
 800a75a:	2001      	movs	r0, #1
 800a75c:	f010 fd22 	bl	801b1a4 <HAL_PWR_EnterSTOPMode>
  SystemClock_Config();
 800a760:	f002 fcb6 	bl	800d0d0 <SystemClock_Config>
  HAL_ResumeTick(); // Enable SysTick after wake-up
 800a764:	f00a f91e 	bl	80149a4 <HAL_ResumeTick>
#ifdef SSD1306
  MX_I2C2_Init();
#endif
  if (sen5x_enable((uint32_t)sleepTime)) {
 800a768:	1dbb      	adds	r3, r7, #6
 800a76a:	881b      	ldrh	r3, [r3, #0]
 800a76c:	0018      	movs	r0, r3
 800a76e:	f003 ff3f 	bl	800e5f0 <sen5x_enable>
 800a772:	1e03      	subs	r3, r0, #0
 800a774:	d01e      	beq.n	800a7b4 <Enter_Stop_Mode+0xbc>
    showTime();
 800a776:	f7ff fb57 	bl	8009e28 <showTime>
    set_light_on_state();
 800a77a:	f004 fc95 	bl	800f0a8 <set_light_on_state>
    if (!userToggle) {
 800a77e:	4b2d      	ldr	r3, [pc, #180]	@ (800a834 <Enter_Stop_Mode+0x13c>)
 800a780:	781b      	ldrb	r3, [r3, #0]
 800a782:	2201      	movs	r2, #1
 800a784:	4053      	eors	r3, r2
 800a786:	b2db      	uxtb	r3, r3
 800a788:	2b00      	cmp	r3, #0
 800a78a:	d013      	beq.n	800a7b4 <Enter_Stop_Mode+0xbc>
      RTC_SetWakeUpTimer(SEN5X_START_UP_TIME); // go sleep for 28 + 3s measurement time is approx 30 seconds
 800a78c:	201c      	movs	r0, #28
 800a78e:	f7ff ff2b 	bl	800a5e8 <RTC_SetWakeUpTimer>
      Debug("Entering STOP mode for %d seconds", SEN5X_START_UP_TIME);
 800a792:	4a23      	ldr	r2, [pc, #140]	@ (800a820 <Enter_Stop_Mode+0x128>)
 800a794:	4923      	ldr	r1, [pc, #140]	@ (800a824 <Enter_Stop_Mode+0x12c>)
 800a796:	231c      	movs	r3, #28
 800a798:	2003      	movs	r0, #3
 800a79a:	f009 fb4f 	bl	8013e3c <CreateLine>
#ifdef SSD1306
      stop_I2C2();
#endif
      HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
 800a79e:	2101      	movs	r1, #1
 800a7a0:	2001      	movs	r0, #1
 800a7a2:	f010 fcff 	bl	801b1a4 <HAL_PWR_EnterSTOPMode>
      SystemClock_Config();
 800a7a6:	f002 fc93 	bl	800d0d0 <SystemClock_Config>
      HAL_ResumeTick(); // Enable SysTick after wake-up
 800a7aa:	f00a f8fb 	bl	80149a4 <HAL_ResumeTick>
      MX_I2C2_Init();
      if (userToggle) {
        displayStart();
      }
#endif
      setsen5xReadTimer(0);
 800a7ae:	2000      	movs	r0, #0
 800a7b0:	f003 fefc 	bl	800e5ac <setsen5xReadTimer>
    }
  }
  showTime();
 800a7b4:	f7ff fb38 	bl	8009e28 <showTime>
  EnabledConnectedDevices();
 800a7b8:	f003 fa8a 	bl	800dcd0 <EnabledConnectedDevices>
  ResetDBACalculator();  // reset the DBA average calculation
 800a7bc:	f003 fb8a 	bl	800ded4 <ResetDBACalculator>
  ResetSGP40samplecounter();
 800a7c0:	f006 faea 	bl	8010d98 <ResetSGP40samplecounter>
  ResetENS160samplecounter();
 800a7c4:	f7f9 f9ba 	bl	8003b3c <ResetENS160samplecounter>
  SetBatteryReadTimer(0);
 800a7c8:	2000      	movs	r0, #0
 800a7ca:	f002 f965 	bl	800ca98 <SetBatteryReadTimer>
  setsen5xSamplecounter(0);
 800a7ce:	2000      	movs	r0, #0
 800a7d0:	f003 fefe 	bl	800e5d0 <setsen5xSamplecounter>
  setESPTimeStamp(ESP_DELAY_TIME_AFTER_STM_WAKEUP);
 800a7d4:	4b18      	ldr	r3, [pc, #96]	@ (800a838 <Enter_Stop_Mode+0x140>)
 800a7d6:	0018      	movs	r0, r3
 800a7d8:	f7fa f864 	bl	80048a4 <setESPTimeStamp>
  setSGP40TimeStamp(30);
 800a7dc:	201e      	movs	r0, #30
 800a7de:	f006 fac9 	bl	8010d74 <setSGP40TimeStamp>
  setHIDSTimeStamp(90);
 800a7e2:	205a      	movs	r0, #90	@ 0x5a
 800a7e4:	f009 fdc0 	bl	8014368 <setHIDSTimeStamp>
  setAHT20TimeStamp(60);
 800a7e8:	203c      	movs	r0, #60	@ 0x3c
 800a7ea:	f000 fb95 	bl	800af18 <setAHT20TimeStamp>
  setBMP280TimeStamp(90);
 800a7ee:	205a      	movs	r0, #90	@ 0x5a
 800a7f0:	f000 ff6e 	bl	800b6d0 <setBMP280TimeStamp>
  setENS160TimeStamp(0);
 800a7f4:	2000      	movs	r0, #0
 800a7f6:	f7f9 f9ab 	bl	8003b50 <setENS160TimeStamp>
  setMICTimeStamp(0);
 800a7fa:	2000      	movs	r0, #0
 800a7fc:	f003 fb58 	bl	800deb0 <setMICTimeStamp>
  ESPTransmitDone = false;
 800a800:	4b0e      	ldr	r3, [pc, #56]	@ (800a83c <Enter_Stop_Mode+0x144>)
 800a802:	2200      	movs	r2, #0
 800a804:	701a      	strb	r2, [r3, #0]
  deviceTimeOut = HAL_GetTick() + DEVICE_TIMEOUT;
 800a806:	f00a f891 	bl	801492c <HAL_GetTick>
 800a80a:	0003      	movs	r3, r0
 800a80c:	4a0a      	ldr	r2, [pc, #40]	@ (800a838 <Enter_Stop_Mode+0x140>)
 800a80e:	189a      	adds	r2, r3, r2
 800a810:	4b0b      	ldr	r3, [pc, #44]	@ (800a840 <Enter_Stop_Mode+0x148>)
 800a812:	601a      	str	r2, [r3, #0]
}
 800a814:	46c0      	nop			@ (mov r8, r8)
 800a816:	46bd      	mov	sp, r7
 800a818:	b002      	add	sp, #8
 800a81a:	bd80      	pop	{r7, pc}
 800a81c:	200011bd 	.word	0x200011bd
 800a820:	0802bfec 	.word	0x0802bfec
 800a824:	0802be6c 	.word	0x0802be6c
 800a828:	20000e6c 	.word	0x20000e6c
 800a82c:	0802c010 	.word	0x0802c010
 800a830:	0802be30 	.word	0x0802be30
 800a834:	2000214e 	.word	0x2000214e
 800a838:	00001194 	.word	0x00001194
 800a83c:	200005b3 	.word	0x200005b3
 800a840:	20001114 	.word	0x20001114

0800a844 <InitClock>:

void InitClock(RTC_HandleTypeDef* h_hrtc){
 800a844:	b580      	push	{r7, lr}
 800a846:	b082      	sub	sp, #8
 800a848:	af00      	add	r7, sp, #0
 800a84a:	6078      	str	r0, [r7, #4]
  RealTime_Handle = h_hrtc;
 800a84c:	4b03      	ldr	r3, [pc, #12]	@ (800a85c <InitClock+0x18>)
 800a84e:	687a      	ldr	r2, [r7, #4]
 800a850:	601a      	str	r2, [r3, #0]
}
 800a852:	46c0      	nop			@ (mov r8, r8)
 800a854:	46bd      	mov	sp, r7
 800a856:	b002      	add	sp, #8
 800a858:	bd80      	pop	{r7, pc}
 800a85a:	46c0      	nop			@ (mov r8, r8)
 800a85c:	20000e50 	.word	0x20000e50

0800a860 <makeTime>:
// leap year calculator expects year argument as years offset from 1970
#define LEAP_YEAR(Y)     ( ((1970+(Y))>0) && !((1970+(Y))%4) && ( ((1970+(Y))%100) || !((1970+(Y))%400) ) )

static  const uint8_t monthDays[]={31,28,31,30,31,30,31,31,30,31,30,31}; // API starts months from 1, this array starts from 0

uint32_t makeTime(RTC_DateTypeDef* currentDate, RTC_TimeTypeDef* currentTime){
 800a860:	b580      	push	{r7, lr}
 800a862:	b084      	sub	sp, #16
 800a864:	af00      	add	r7, sp, #0
 800a866:	6078      	str	r0, [r7, #4]
 800a868:	6039      	str	r1, [r7, #0]

  int i;
  uint32_t seconds;

  // seconds from 1970 till 1 jan 00:00:00 of the given year
  seconds= currentDate->Year*(SECS_PER_DAY * 365);
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	78db      	ldrb	r3, [r3, #3]
 800a86e:	001a      	movs	r2, r3
 800a870:	0013      	movs	r3, r2
 800a872:	025b      	lsls	r3, r3, #9
 800a874:	189b      	adds	r3, r3, r2
 800a876:	009b      	lsls	r3, r3, #2
 800a878:	189b      	adds	r3, r3, r2
 800a87a:	00db      	lsls	r3, r3, #3
 800a87c:	189b      	adds	r3, r3, r2
 800a87e:	011a      	lsls	r2, r3, #4
 800a880:	1ad2      	subs	r2, r2, r3
 800a882:	01d3      	lsls	r3, r2, #7
 800a884:	001a      	movs	r2, r3
 800a886:	60ba      	str	r2, [r7, #8]
  for (i = 0; i < currentDate->Year; i++) {
 800a888:	2300      	movs	r3, #0
 800a88a:	60fb      	str	r3, [r7, #12]
 800a88c:	e028      	b.n	800a8e0 <makeTime+0x80>
    if (LEAP_YEAR(i)) {
 800a88e:	68fb      	ldr	r3, [r7, #12]
 800a890:	4a53      	ldr	r2, [pc, #332]	@ (800a9e0 <makeTime+0x180>)
 800a892:	4293      	cmp	r3, r2
 800a894:	db21      	blt.n	800a8da <makeTime+0x7a>
 800a896:	68fb      	ldr	r3, [r7, #12]
 800a898:	4a52      	ldr	r2, [pc, #328]	@ (800a9e4 <makeTime+0x184>)
 800a89a:	4694      	mov	ip, r2
 800a89c:	4463      	add	r3, ip
 800a89e:	001a      	movs	r2, r3
 800a8a0:	2303      	movs	r3, #3
 800a8a2:	4013      	ands	r3, r2
 800a8a4:	d119      	bne.n	800a8da <makeTime+0x7a>
 800a8a6:	68fb      	ldr	r3, [r7, #12]
 800a8a8:	4a4e      	ldr	r2, [pc, #312]	@ (800a9e4 <makeTime+0x184>)
 800a8aa:	4694      	mov	ip, r2
 800a8ac:	4463      	add	r3, ip
 800a8ae:	2164      	movs	r1, #100	@ 0x64
 800a8b0:	0018      	movs	r0, r3
 800a8b2:	f7f5 fde7 	bl	8000484 <__aeabi_idivmod>
 800a8b6:	1e0b      	subs	r3, r1, #0
 800a8b8:	d10a      	bne.n	800a8d0 <makeTime+0x70>
 800a8ba:	68fb      	ldr	r3, [r7, #12]
 800a8bc:	4a49      	ldr	r2, [pc, #292]	@ (800a9e4 <makeTime+0x184>)
 800a8be:	4694      	mov	ip, r2
 800a8c0:	4463      	add	r3, ip
 800a8c2:	22c8      	movs	r2, #200	@ 0xc8
 800a8c4:	0051      	lsls	r1, r2, #1
 800a8c6:	0018      	movs	r0, r3
 800a8c8:	f7f5 fddc 	bl	8000484 <__aeabi_idivmod>
 800a8cc:	1e0b      	subs	r3, r1, #0
 800a8ce:	d104      	bne.n	800a8da <makeTime+0x7a>
      seconds += SECS_PER_DAY;   // add extra days for leap years
 800a8d0:	68bb      	ldr	r3, [r7, #8]
 800a8d2:	4a45      	ldr	r2, [pc, #276]	@ (800a9e8 <makeTime+0x188>)
 800a8d4:	4694      	mov	ip, r2
 800a8d6:	4463      	add	r3, ip
 800a8d8:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < currentDate->Year; i++) {
 800a8da:	68fb      	ldr	r3, [r7, #12]
 800a8dc:	3301      	adds	r3, #1
 800a8de:	60fb      	str	r3, [r7, #12]
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	78db      	ldrb	r3, [r3, #3]
 800a8e4:	001a      	movs	r2, r3
 800a8e6:	68fb      	ldr	r3, [r7, #12]
 800a8e8:	4293      	cmp	r3, r2
 800a8ea:	dbd0      	blt.n	800a88e <makeTime+0x2e>
    }
  }

  // add days for this year, months start from 1
  for (i = 1; i < currentDate->Month; i++) {
 800a8ec:	2301      	movs	r3, #1
 800a8ee:	60fb      	str	r3, [r7, #12]
 800a8f0:	e03c      	b.n	800a96c <makeTime+0x10c>
    if ( (i == 2) && LEAP_YEAR(currentDate->Year)) {
 800a8f2:	68fb      	ldr	r3, [r7, #12]
 800a8f4:	2b02      	cmp	r3, #2
 800a8f6:	d125      	bne.n	800a944 <makeTime+0xe4>
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	78db      	ldrb	r3, [r3, #3]
 800a8fc:	4a39      	ldr	r2, [pc, #228]	@ (800a9e4 <makeTime+0x184>)
 800a8fe:	4694      	mov	ip, r2
 800a900:	4463      	add	r3, ip
 800a902:	001a      	movs	r2, r3
 800a904:	2303      	movs	r3, #3
 800a906:	4013      	ands	r3, r2
 800a908:	d11c      	bne.n	800a944 <makeTime+0xe4>
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	78db      	ldrb	r3, [r3, #3]
 800a90e:	4a35      	ldr	r2, [pc, #212]	@ (800a9e4 <makeTime+0x184>)
 800a910:	4694      	mov	ip, r2
 800a912:	4463      	add	r3, ip
 800a914:	2164      	movs	r1, #100	@ 0x64
 800a916:	0018      	movs	r0, r3
 800a918:	f7f5 fdb4 	bl	8000484 <__aeabi_idivmod>
 800a91c:	1e0b      	subs	r3, r1, #0
 800a91e:	d10b      	bne.n	800a938 <makeTime+0xd8>
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	78db      	ldrb	r3, [r3, #3]
 800a924:	4a2f      	ldr	r2, [pc, #188]	@ (800a9e4 <makeTime+0x184>)
 800a926:	4694      	mov	ip, r2
 800a928:	4463      	add	r3, ip
 800a92a:	22c8      	movs	r2, #200	@ 0xc8
 800a92c:	0051      	lsls	r1, r2, #1
 800a92e:	0018      	movs	r0, r3
 800a930:	f7f5 fda8 	bl	8000484 <__aeabi_idivmod>
 800a934:	1e0b      	subs	r3, r1, #0
 800a936:	d105      	bne.n	800a944 <makeTime+0xe4>
      seconds += SECS_PER_DAY * 29;
 800a938:	68bb      	ldr	r3, [r7, #8]
 800a93a:	4a2c      	ldr	r2, [pc, #176]	@ (800a9ec <makeTime+0x18c>)
 800a93c:	4694      	mov	ip, r2
 800a93e:	4463      	add	r3, ip
 800a940:	60bb      	str	r3, [r7, #8]
 800a942:	e010      	b.n	800a966 <makeTime+0x106>
    } else {
      seconds += SECS_PER_DAY * monthDays[i-1];  //monthDay array starts from 0
 800a944:	68fb      	ldr	r3, [r7, #12]
 800a946:	3b01      	subs	r3, #1
 800a948:	4a29      	ldr	r2, [pc, #164]	@ (800a9f0 <makeTime+0x190>)
 800a94a:	5cd3      	ldrb	r3, [r2, r3]
 800a94c:	001a      	movs	r2, r3
 800a94e:	0013      	movs	r3, r2
 800a950:	005b      	lsls	r3, r3, #1
 800a952:	189b      	adds	r3, r3, r2
 800a954:	011a      	lsls	r2, r3, #4
 800a956:	1ad2      	subs	r2, r2, r3
 800a958:	0113      	lsls	r3, r2, #4
 800a95a:	1a9b      	subs	r3, r3, r2
 800a95c:	01db      	lsls	r3, r3, #7
 800a95e:	001a      	movs	r2, r3
 800a960:	68bb      	ldr	r3, [r7, #8]
 800a962:	189b      	adds	r3, r3, r2
 800a964:	60bb      	str	r3, [r7, #8]
  for (i = 1; i < currentDate->Month; i++) {
 800a966:	68fb      	ldr	r3, [r7, #12]
 800a968:	3301      	adds	r3, #1
 800a96a:	60fb      	str	r3, [r7, #12]
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	785b      	ldrb	r3, [r3, #1]
 800a970:	001a      	movs	r2, r3
 800a972:	68fb      	ldr	r3, [r7, #12]
 800a974:	4293      	cmp	r3, r2
 800a976:	dbbc      	blt.n	800a8f2 <makeTime+0x92>
    }
  }
  seconds+= (currentDate->Date-1) * SECS_PER_DAY;
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	789b      	ldrb	r3, [r3, #2]
 800a97c:	3b01      	subs	r3, #1
 800a97e:	001a      	movs	r2, r3
 800a980:	0013      	movs	r3, r2
 800a982:	005b      	lsls	r3, r3, #1
 800a984:	189b      	adds	r3, r3, r2
 800a986:	011a      	lsls	r2, r3, #4
 800a988:	1ad2      	subs	r2, r2, r3
 800a98a:	0113      	lsls	r3, r2, #4
 800a98c:	1a9b      	subs	r3, r3, r2
 800a98e:	01db      	lsls	r3, r3, #7
 800a990:	001a      	movs	r2, r3
 800a992:	68bb      	ldr	r3, [r7, #8]
 800a994:	189b      	adds	r3, r3, r2
 800a996:	60bb      	str	r3, [r7, #8]
  seconds+= currentTime->Hours * SECS_PER_HOUR;
 800a998:	683b      	ldr	r3, [r7, #0]
 800a99a:	781b      	ldrb	r3, [r3, #0]
 800a99c:	001a      	movs	r2, r3
 800a99e:	0013      	movs	r3, r2
 800a9a0:	011b      	lsls	r3, r3, #4
 800a9a2:	1a9b      	subs	r3, r3, r2
 800a9a4:	011a      	lsls	r2, r3, #4
 800a9a6:	1ad2      	subs	r2, r2, r3
 800a9a8:	0113      	lsls	r3, r2, #4
 800a9aa:	001a      	movs	r2, r3
 800a9ac:	68bb      	ldr	r3, [r7, #8]
 800a9ae:	189b      	adds	r3, r3, r2
 800a9b0:	60bb      	str	r3, [r7, #8]
  seconds+= currentTime->Minutes * SECS_PER_MIN;
 800a9b2:	683b      	ldr	r3, [r7, #0]
 800a9b4:	785b      	ldrb	r3, [r3, #1]
 800a9b6:	001a      	movs	r2, r3
 800a9b8:	0013      	movs	r3, r2
 800a9ba:	011b      	lsls	r3, r3, #4
 800a9bc:	1a9b      	subs	r3, r3, r2
 800a9be:	009b      	lsls	r3, r3, #2
 800a9c0:	001a      	movs	r2, r3
 800a9c2:	68bb      	ldr	r3, [r7, #8]
 800a9c4:	189b      	adds	r3, r3, r2
 800a9c6:	60bb      	str	r3, [r7, #8]
  seconds+= currentTime->Seconds;
 800a9c8:	683b      	ldr	r3, [r7, #0]
 800a9ca:	789b      	ldrb	r3, [r3, #2]
 800a9cc:	001a      	movs	r2, r3
 800a9ce:	68bb      	ldr	r3, [r7, #8]
 800a9d0:	189b      	adds	r3, r3, r2
 800a9d2:	60bb      	str	r3, [r7, #8]
  return seconds;
 800a9d4:	68bb      	ldr	r3, [r7, #8]
}
 800a9d6:	0018      	movs	r0, r3
 800a9d8:	46bd      	mov	sp, r7
 800a9da:	b004      	add	sp, #16
 800a9dc:	bd80      	pop	{r7, pc}
 800a9de:	46c0      	nop			@ (mov r8, r8)
 800a9e0:	fffff84f 	.word	0xfffff84f
 800a9e4:	000007b2 	.word	0x000007b2
 800a9e8:	00015180 	.word	0x00015180
 800a9ec:	00263b80 	.word	0x00263b80
 800a9f0:	0802e274 	.word	0x0802e274

0800a9f4 <breakPosixTime>:

void breakPosixTime(uint32_t timeInput, RTC_DateTypeDef* currentDate, RTC_TimeTypeDef* currentTime){
 800a9f4:	b590      	push	{r4, r7, lr}
 800a9f6:	b089      	sub	sp, #36	@ 0x24
 800a9f8:	af00      	add	r7, sp, #0
 800a9fa:	60f8      	str	r0, [r7, #12]
 800a9fc:	60b9      	str	r1, [r7, #8]
 800a9fe:	607a      	str	r2, [r7, #4]
  uint8_t year;
  uint8_t month, monthLength;
  uint32_t time;
  uint32_t days;

  time = timeInput;
 800aa00:	68fb      	ldr	r3, [r7, #12]
 800aa02:	61bb      	str	r3, [r7, #24]
  currentTime->Seconds = time % 60;
 800aa04:	69bb      	ldr	r3, [r7, #24]
 800aa06:	213c      	movs	r1, #60	@ 0x3c
 800aa08:	0018      	movs	r0, r3
 800aa0a:	f7f5 fc51 	bl	80002b0 <__aeabi_uidivmod>
 800aa0e:	000b      	movs	r3, r1
 800aa10:	b2da      	uxtb	r2, r3
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	709a      	strb	r2, [r3, #2]
  time /= 60; // now it is minutes
 800aa16:	69bb      	ldr	r3, [r7, #24]
 800aa18:	213c      	movs	r1, #60	@ 0x3c
 800aa1a:	0018      	movs	r0, r3
 800aa1c:	f7f5 fbc2 	bl	80001a4 <__udivsi3>
 800aa20:	0003      	movs	r3, r0
 800aa22:	61bb      	str	r3, [r7, #24]
  currentTime->Minutes = time % 60;
 800aa24:	69bb      	ldr	r3, [r7, #24]
 800aa26:	213c      	movs	r1, #60	@ 0x3c
 800aa28:	0018      	movs	r0, r3
 800aa2a:	f7f5 fc41 	bl	80002b0 <__aeabi_uidivmod>
 800aa2e:	000b      	movs	r3, r1
 800aa30:	b2da      	uxtb	r2, r3
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	705a      	strb	r2, [r3, #1]
  time /= 60; // now it is hours
 800aa36:	69bb      	ldr	r3, [r7, #24]
 800aa38:	213c      	movs	r1, #60	@ 0x3c
 800aa3a:	0018      	movs	r0, r3
 800aa3c:	f7f5 fbb2 	bl	80001a4 <__udivsi3>
 800aa40:	0003      	movs	r3, r0
 800aa42:	61bb      	str	r3, [r7, #24]
  currentTime->Hours = time % 24;
 800aa44:	69bb      	ldr	r3, [r7, #24]
 800aa46:	2118      	movs	r1, #24
 800aa48:	0018      	movs	r0, r3
 800aa4a:	f7f5 fc31 	bl	80002b0 <__aeabi_uidivmod>
 800aa4e:	000b      	movs	r3, r1
 800aa50:	b2da      	uxtb	r2, r3
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	701a      	strb	r2, [r3, #0]
  time /= 24; // now it is days
 800aa56:	69bb      	ldr	r3, [r7, #24]
 800aa58:	2118      	movs	r1, #24
 800aa5a:	0018      	movs	r0, r3
 800aa5c:	f7f5 fba2 	bl	80001a4 <__udivsi3>
 800aa60:	0003      	movs	r3, r0
 800aa62:	61bb      	str	r3, [r7, #24]
  currentDate->WeekDay = ((time - 1) % 7) + 1;  // Monday is day 1, since sat 1-1-2000
 800aa64:	69bb      	ldr	r3, [r7, #24]
 800aa66:	3b01      	subs	r3, #1
 800aa68:	2107      	movs	r1, #7
 800aa6a:	0018      	movs	r0, r3
 800aa6c:	f7f5 fc20 	bl	80002b0 <__aeabi_uidivmod>
 800aa70:	000b      	movs	r3, r1
 800aa72:	b2db      	uxtb	r3, r3
 800aa74:	3301      	adds	r3, #1
 800aa76:	b2da      	uxtb	r2, r3
 800aa78:	68bb      	ldr	r3, [r7, #8]
 800aa7a:	701a      	strb	r2, [r3, #0]
  year = 0;
 800aa7c:	231f      	movs	r3, #31
 800aa7e:	18fb      	adds	r3, r7, r3
 800aa80:	2200      	movs	r2, #0
 800aa82:	701a      	strb	r2, [r3, #0]
  days = 0;
 800aa84:	2300      	movs	r3, #0
 800aa86:	617b      	str	r3, [r7, #20]
  while((days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
 800aa88:	e005      	b.n	800aa96 <breakPosixTime+0xa2>
    year++;
 800aa8a:	211f      	movs	r1, #31
 800aa8c:	187b      	adds	r3, r7, r1
 800aa8e:	781a      	ldrb	r2, [r3, #0]
 800aa90:	187b      	adds	r3, r7, r1
 800aa92:	3201      	adds	r2, #1
 800aa94:	701a      	strb	r2, [r3, #0]
  while((days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
 800aa96:	241f      	movs	r4, #31
 800aa98:	193b      	adds	r3, r7, r4
 800aa9a:	781b      	ldrb	r3, [r3, #0]
 800aa9c:	4a64      	ldr	r2, [pc, #400]	@ (800ac30 <breakPosixTime+0x23c>)
 800aa9e:	4694      	mov	ip, r2
 800aaa0:	4463      	add	r3, ip
 800aaa2:	001a      	movs	r2, r3
 800aaa4:	2303      	movs	r3, #3
 800aaa6:	4013      	ands	r3, r2
 800aaa8:	d119      	bne.n	800aade <breakPosixTime+0xea>
 800aaaa:	193b      	adds	r3, r7, r4
 800aaac:	781b      	ldrb	r3, [r3, #0]
 800aaae:	4a60      	ldr	r2, [pc, #384]	@ (800ac30 <breakPosixTime+0x23c>)
 800aab0:	4694      	mov	ip, r2
 800aab2:	4463      	add	r3, ip
 800aab4:	2164      	movs	r1, #100	@ 0x64
 800aab6:	0018      	movs	r0, r3
 800aab8:	f7f5 fce4 	bl	8000484 <__aeabi_idivmod>
 800aabc:	1e0b      	subs	r3, r1, #0
 800aabe:	d10b      	bne.n	800aad8 <breakPosixTime+0xe4>
 800aac0:	193b      	adds	r3, r7, r4
 800aac2:	781b      	ldrb	r3, [r3, #0]
 800aac4:	4a5a      	ldr	r2, [pc, #360]	@ (800ac30 <breakPosixTime+0x23c>)
 800aac6:	4694      	mov	ip, r2
 800aac8:	4463      	add	r3, ip
 800aaca:	22c8      	movs	r2, #200	@ 0xc8
 800aacc:	0051      	lsls	r1, r2, #1
 800aace:	0018      	movs	r0, r3
 800aad0:	f7f5 fcd8 	bl	8000484 <__aeabi_idivmod>
 800aad4:	1e0b      	subs	r3, r1, #0
 800aad6:	d102      	bne.n	800aade <breakPosixTime+0xea>
 800aad8:	23b7      	movs	r3, #183	@ 0xb7
 800aada:	005b      	lsls	r3, r3, #1
 800aadc:	e001      	b.n	800aae2 <breakPosixTime+0xee>
 800aade:	236e      	movs	r3, #110	@ 0x6e
 800aae0:	33ff      	adds	r3, #255	@ 0xff
 800aae2:	697a      	ldr	r2, [r7, #20]
 800aae4:	18d3      	adds	r3, r2, r3
 800aae6:	617b      	str	r3, [r7, #20]
 800aae8:	697a      	ldr	r2, [r7, #20]
 800aaea:	69bb      	ldr	r3, [r7, #24]
 800aaec:	429a      	cmp	r2, r3
 800aaee:	d9cc      	bls.n	800aa8a <breakPosixTime+0x96>
  }
  currentDate->Year = year; // year is offset from 1970
 800aaf0:	68bb      	ldr	r3, [r7, #8]
 800aaf2:	241f      	movs	r4, #31
 800aaf4:	193a      	adds	r2, r7, r4
 800aaf6:	7812      	ldrb	r2, [r2, #0]
 800aaf8:	70da      	strb	r2, [r3, #3]

  days -= LEAP_YEAR(year) ? 366 : 365;
 800aafa:	193b      	adds	r3, r7, r4
 800aafc:	781b      	ldrb	r3, [r3, #0]
 800aafe:	4a4c      	ldr	r2, [pc, #304]	@ (800ac30 <breakPosixTime+0x23c>)
 800ab00:	4694      	mov	ip, r2
 800ab02:	4463      	add	r3, ip
 800ab04:	001a      	movs	r2, r3
 800ab06:	2303      	movs	r3, #3
 800ab08:	4013      	ands	r3, r2
 800ab0a:	d119      	bne.n	800ab40 <breakPosixTime+0x14c>
 800ab0c:	193b      	adds	r3, r7, r4
 800ab0e:	781b      	ldrb	r3, [r3, #0]
 800ab10:	4a47      	ldr	r2, [pc, #284]	@ (800ac30 <breakPosixTime+0x23c>)
 800ab12:	4694      	mov	ip, r2
 800ab14:	4463      	add	r3, ip
 800ab16:	2164      	movs	r1, #100	@ 0x64
 800ab18:	0018      	movs	r0, r3
 800ab1a:	f7f5 fcb3 	bl	8000484 <__aeabi_idivmod>
 800ab1e:	1e0b      	subs	r3, r1, #0
 800ab20:	d10b      	bne.n	800ab3a <breakPosixTime+0x146>
 800ab22:	193b      	adds	r3, r7, r4
 800ab24:	781b      	ldrb	r3, [r3, #0]
 800ab26:	4a42      	ldr	r2, [pc, #264]	@ (800ac30 <breakPosixTime+0x23c>)
 800ab28:	4694      	mov	ip, r2
 800ab2a:	4463      	add	r3, ip
 800ab2c:	22c8      	movs	r2, #200	@ 0xc8
 800ab2e:	0051      	lsls	r1, r2, #1
 800ab30:	0018      	movs	r0, r3
 800ab32:	f7f5 fca7 	bl	8000484 <__aeabi_idivmod>
 800ab36:	1e0b      	subs	r3, r1, #0
 800ab38:	d102      	bne.n	800ab40 <breakPosixTime+0x14c>
 800ab3a:	23b7      	movs	r3, #183	@ 0xb7
 800ab3c:	005b      	lsls	r3, r3, #1
 800ab3e:	e001      	b.n	800ab44 <breakPosixTime+0x150>
 800ab40:	236e      	movs	r3, #110	@ 0x6e
 800ab42:	33ff      	adds	r3, #255	@ 0xff
 800ab44:	697a      	ldr	r2, [r7, #20]
 800ab46:	1ad3      	subs	r3, r2, r3
 800ab48:	617b      	str	r3, [r7, #20]
  time  -= days; // now it is days in this year, starting at 0
 800ab4a:	69ba      	ldr	r2, [r7, #24]
 800ab4c:	697b      	ldr	r3, [r7, #20]
 800ab4e:	1ad3      	subs	r3, r2, r3
 800ab50:	61bb      	str	r3, [r7, #24]

  days=0;
 800ab52:	2300      	movs	r3, #0
 800ab54:	617b      	str	r3, [r7, #20]
  month=0;
 800ab56:	211e      	movs	r1, #30
 800ab58:	187b      	adds	r3, r7, r1
 800ab5a:	2200      	movs	r2, #0
 800ab5c:	701a      	strb	r2, [r3, #0]
  monthLength=0;
 800ab5e:	231d      	movs	r3, #29
 800ab60:	18fb      	adds	r3, r7, r3
 800ab62:	2200      	movs	r2, #0
 800ab64:	701a      	strb	r2, [r3, #0]
  for (month=0; month<12; month++) {
 800ab66:	187b      	adds	r3, r7, r1
 800ab68:	2200      	movs	r2, #0
 800ab6a:	701a      	strb	r2, [r3, #0]
 800ab6c:	e048      	b.n	800ac00 <breakPosixTime+0x20c>
    if (month==1) { // february
 800ab6e:	231e      	movs	r3, #30
 800ab70:	18fb      	adds	r3, r7, r3
 800ab72:	781b      	ldrb	r3, [r3, #0]
 800ab74:	2b01      	cmp	r3, #1
 800ab76:	d12a      	bne.n	800abce <breakPosixTime+0x1da>
      if (LEAP_YEAR(year)) {
 800ab78:	241f      	movs	r4, #31
 800ab7a:	193b      	adds	r3, r7, r4
 800ab7c:	781b      	ldrb	r3, [r3, #0]
 800ab7e:	4a2c      	ldr	r2, [pc, #176]	@ (800ac30 <breakPosixTime+0x23c>)
 800ab80:	4694      	mov	ip, r2
 800ab82:	4463      	add	r3, ip
 800ab84:	001a      	movs	r2, r3
 800ab86:	2303      	movs	r3, #3
 800ab88:	4013      	ands	r3, r2
 800ab8a:	d11b      	bne.n	800abc4 <breakPosixTime+0x1d0>
 800ab8c:	193b      	adds	r3, r7, r4
 800ab8e:	781b      	ldrb	r3, [r3, #0]
 800ab90:	4a27      	ldr	r2, [pc, #156]	@ (800ac30 <breakPosixTime+0x23c>)
 800ab92:	4694      	mov	ip, r2
 800ab94:	4463      	add	r3, ip
 800ab96:	2164      	movs	r1, #100	@ 0x64
 800ab98:	0018      	movs	r0, r3
 800ab9a:	f7f5 fc73 	bl	8000484 <__aeabi_idivmod>
 800ab9e:	1e0b      	subs	r3, r1, #0
 800aba0:	d10b      	bne.n	800abba <breakPosixTime+0x1c6>
 800aba2:	193b      	adds	r3, r7, r4
 800aba4:	781b      	ldrb	r3, [r3, #0]
 800aba6:	4a22      	ldr	r2, [pc, #136]	@ (800ac30 <breakPosixTime+0x23c>)
 800aba8:	4694      	mov	ip, r2
 800abaa:	4463      	add	r3, ip
 800abac:	22c8      	movs	r2, #200	@ 0xc8
 800abae:	0051      	lsls	r1, r2, #1
 800abb0:	0018      	movs	r0, r3
 800abb2:	f7f5 fc67 	bl	8000484 <__aeabi_idivmod>
 800abb6:	1e0b      	subs	r3, r1, #0
 800abb8:	d104      	bne.n	800abc4 <breakPosixTime+0x1d0>
        monthLength=29;
 800abba:	231d      	movs	r3, #29
 800abbc:	18fb      	adds	r3, r7, r3
 800abbe:	221d      	movs	r2, #29
 800abc0:	701a      	strb	r2, [r3, #0]
 800abc2:	e00c      	b.n	800abde <breakPosixTime+0x1ea>
      } else {
        monthLength=28;
 800abc4:	231d      	movs	r3, #29
 800abc6:	18fb      	adds	r3, r7, r3
 800abc8:	221c      	movs	r2, #28
 800abca:	701a      	strb	r2, [r3, #0]
 800abcc:	e007      	b.n	800abde <breakPosixTime+0x1ea>
      }
    } else {
      monthLength = monthDays[month];
 800abce:	231e      	movs	r3, #30
 800abd0:	18fb      	adds	r3, r7, r3
 800abd2:	781a      	ldrb	r2, [r3, #0]
 800abd4:	231d      	movs	r3, #29
 800abd6:	18fb      	adds	r3, r7, r3
 800abd8:	4916      	ldr	r1, [pc, #88]	@ (800ac34 <breakPosixTime+0x240>)
 800abda:	5c8a      	ldrb	r2, [r1, r2]
 800abdc:	701a      	strb	r2, [r3, #0]
    }

    if (time >= monthLength) {
 800abde:	211d      	movs	r1, #29
 800abe0:	187b      	adds	r3, r7, r1
 800abe2:	781b      	ldrb	r3, [r3, #0]
 800abe4:	69ba      	ldr	r2, [r7, #24]
 800abe6:	429a      	cmp	r2, r3
 800abe8:	d310      	bcc.n	800ac0c <breakPosixTime+0x218>
      time -= monthLength;
 800abea:	187b      	adds	r3, r7, r1
 800abec:	781b      	ldrb	r3, [r3, #0]
 800abee:	69ba      	ldr	r2, [r7, #24]
 800abf0:	1ad3      	subs	r3, r2, r3
 800abf2:	61bb      	str	r3, [r7, #24]
  for (month=0; month<12; month++) {
 800abf4:	211e      	movs	r1, #30
 800abf6:	187b      	adds	r3, r7, r1
 800abf8:	781a      	ldrb	r2, [r3, #0]
 800abfa:	187b      	adds	r3, r7, r1
 800abfc:	3201      	adds	r2, #1
 800abfe:	701a      	strb	r2, [r3, #0]
 800ac00:	231e      	movs	r3, #30
 800ac02:	18fb      	adds	r3, r7, r3
 800ac04:	781b      	ldrb	r3, [r3, #0]
 800ac06:	2b0b      	cmp	r3, #11
 800ac08:	d9b1      	bls.n	800ab6e <breakPosixTime+0x17a>
 800ac0a:	e000      	b.n	800ac0e <breakPosixTime+0x21a>
    } else {
        break;
 800ac0c:	46c0      	nop			@ (mov r8, r8)
    }
  }
  currentDate->Month = month + 1;  // jan is month 1
 800ac0e:	231e      	movs	r3, #30
 800ac10:	18fb      	adds	r3, r7, r3
 800ac12:	781b      	ldrb	r3, [r3, #0]
 800ac14:	3301      	adds	r3, #1
 800ac16:	b2da      	uxtb	r2, r3
 800ac18:	68bb      	ldr	r3, [r7, #8]
 800ac1a:	705a      	strb	r2, [r3, #1]
  currentDate->Date = time + 1;     // day of month
 800ac1c:	69bb      	ldr	r3, [r7, #24]
 800ac1e:	b2db      	uxtb	r3, r3
 800ac20:	3301      	adds	r3, #1
 800ac22:	b2da      	uxtb	r2, r3
 800ac24:	68bb      	ldr	r3, [r7, #8]
 800ac26:	709a      	strb	r2, [r3, #2]
}
 800ac28:	46c0      	nop			@ (mov r8, r8)
 800ac2a:	46bd      	mov	sp, r7
 800ac2c:	b009      	add	sp, #36	@ 0x24
 800ac2e:	bd90      	pop	{r4, r7, pc}
 800ac30:	000007b2 	.word	0x000007b2
 800ac34:	0802e274 	.word	0x0802e274

0800ac38 <MX_ADC_Init>:

ADC_HandleTypeDef hadc;

/* ADC init function */
void MX_ADC_Init(void)
{
 800ac38:	b580      	push	{r7, lr}
 800ac3a:	b082      	sub	sp, #8
 800ac3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800ac3e:	003b      	movs	r3, r7
 800ac40:	0018      	movs	r0, r3
 800ac42:	2308      	movs	r3, #8
 800ac44:	001a      	movs	r2, r3
 800ac46:	2100      	movs	r1, #0
 800ac48:	f01b fc6a 	bl	8026520 <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 800ac4c:	4b30      	ldr	r3, [pc, #192]	@ (800ad10 <MX_ADC_Init+0xd8>)
 800ac4e:	4a31      	ldr	r2, [pc, #196]	@ (800ad14 <MX_ADC_Init+0xdc>)
 800ac50:	601a      	str	r2, [r3, #0]
  hadc.Init.OversamplingMode = DISABLE;
 800ac52:	4b2f      	ldr	r3, [pc, #188]	@ (800ad10 <MX_ADC_Init+0xd8>)
 800ac54:	2200      	movs	r2, #0
 800ac56:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 800ac58:	4b2d      	ldr	r3, [pc, #180]	@ (800ad10 <MX_ADC_Init+0xd8>)
 800ac5a:	22c0      	movs	r2, #192	@ 0xc0
 800ac5c:	0612      	lsls	r2, r2, #24
 800ac5e:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 800ac60:	4b2b      	ldr	r3, [pc, #172]	@ (800ad10 <MX_ADC_Init+0xd8>)
 800ac62:	2200      	movs	r2, #0
 800ac64:	609a      	str	r2, [r3, #8]
  hadc.Init.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800ac66:	4b2a      	ldr	r3, [pc, #168]	@ (800ad10 <MX_ADC_Init+0xd8>)
 800ac68:	2200      	movs	r2, #0
 800ac6a:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 800ac6c:	4b28      	ldr	r3, [pc, #160]	@ (800ad10 <MX_ADC_Init+0xd8>)
 800ac6e:	2201      	movs	r2, #1
 800ac70:	611a      	str	r2, [r3, #16]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800ac72:	4b27      	ldr	r3, [pc, #156]	@ (800ad10 <MX_ADC_Init+0xd8>)
 800ac74:	2200      	movs	r2, #0
 800ac76:	60da      	str	r2, [r3, #12]
  hadc.Init.ContinuousConvMode = DISABLE;
 800ac78:	4b25      	ldr	r3, [pc, #148]	@ (800ad10 <MX_ADC_Init+0xd8>)
 800ac7a:	2220      	movs	r2, #32
 800ac7c:	2100      	movs	r1, #0
 800ac7e:	5499      	strb	r1, [r3, r2]
  hadc.Init.DiscontinuousConvMode = ENABLE;
 800ac80:	4b23      	ldr	r3, [pc, #140]	@ (800ad10 <MX_ADC_Init+0xd8>)
 800ac82:	2221      	movs	r2, #33	@ 0x21
 800ac84:	2101      	movs	r1, #1
 800ac86:	5499      	strb	r1, [r3, r2]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800ac88:	4b21      	ldr	r3, [pc, #132]	@ (800ad10 <MX_ADC_Init+0xd8>)
 800ac8a:	2200      	movs	r2, #0
 800ac8c:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800ac8e:	4b20      	ldr	r3, [pc, #128]	@ (800ad10 <MX_ADC_Init+0xd8>)
 800ac90:	22c2      	movs	r2, #194	@ 0xc2
 800ac92:	32ff      	adds	r2, #255	@ 0xff
 800ac94:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc.Init.DMAContinuousRequests = DISABLE;
 800ac96:	4b1e      	ldr	r3, [pc, #120]	@ (800ad10 <MX_ADC_Init+0xd8>)
 800ac98:	222c      	movs	r2, #44	@ 0x2c
 800ac9a:	2100      	movs	r1, #0
 800ac9c:	5499      	strb	r1, [r3, r2]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800ac9e:	4b1c      	ldr	r3, [pc, #112]	@ (800ad10 <MX_ADC_Init+0xd8>)
 800aca0:	2204      	movs	r2, #4
 800aca2:	615a      	str	r2, [r3, #20]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800aca4:	4b1a      	ldr	r3, [pc, #104]	@ (800ad10 <MX_ADC_Init+0xd8>)
 800aca6:	2200      	movs	r2, #0
 800aca8:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc.Init.LowPowerAutoWait = DISABLE;
 800acaa:	4b19      	ldr	r3, [pc, #100]	@ (800ad10 <MX_ADC_Init+0xd8>)
 800acac:	2200      	movs	r2, #0
 800acae:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerFrequencyMode = DISABLE;
 800acb0:	4b17      	ldr	r3, [pc, #92]	@ (800ad10 <MX_ADC_Init+0xd8>)
 800acb2:	2200      	movs	r2, #0
 800acb4:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 800acb6:	4b16      	ldr	r3, [pc, #88]	@ (800ad10 <MX_ADC_Init+0xd8>)
 800acb8:	2200      	movs	r2, #0
 800acba:	61da      	str	r2, [r3, #28]
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 800acbc:	4b14      	ldr	r3, [pc, #80]	@ (800ad10 <MX_ADC_Init+0xd8>)
 800acbe:	0018      	movs	r0, r3
 800acc0:	f009 fe7e 	bl	80149c0 <HAL_ADC_Init>
 800acc4:	1e03      	subs	r3, r0, #0
 800acc6:	d001      	beq.n	800accc <MX_ADC_Init+0x94>
  {
    Error_Handler();
 800acc8:	f002 fb6e 	bl	800d3a8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 800accc:	003b      	movs	r3, r7
 800acce:	4a12      	ldr	r2, [pc, #72]	@ (800ad18 <MX_ADC_Init+0xe0>)
 800acd0:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 800acd2:	003b      	movs	r3, r7
 800acd4:	2280      	movs	r2, #128	@ 0x80
 800acd6:	0152      	lsls	r2, r2, #5
 800acd8:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800acda:	003a      	movs	r2, r7
 800acdc:	4b0c      	ldr	r3, [pc, #48]	@ (800ad10 <MX_ADC_Init+0xd8>)
 800acde:	0011      	movs	r1, r2
 800ace0:	0018      	movs	r0, r3
 800ace2:	f00a f8dd 	bl	8014ea0 <HAL_ADC_ConfigChannel>
 800ace6:	1e03      	subs	r3, r0, #0
 800ace8:	d001      	beq.n	800acee <MX_ADC_Init+0xb6>
  {
    Error_Handler();
 800acea:	f002 fb5d 	bl	800d3a8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 800acee:	003b      	movs	r3, r7
 800acf0:	4a0a      	ldr	r2, [pc, #40]	@ (800ad1c <MX_ADC_Init+0xe4>)
 800acf2:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800acf4:	003a      	movs	r2, r7
 800acf6:	4b06      	ldr	r3, [pc, #24]	@ (800ad10 <MX_ADC_Init+0xd8>)
 800acf8:	0011      	movs	r1, r2
 800acfa:	0018      	movs	r0, r3
 800acfc:	f00a f8d0 	bl	8014ea0 <HAL_ADC_ConfigChannel>
 800ad00:	1e03      	subs	r3, r0, #0
 800ad02:	d001      	beq.n	800ad08 <MX_ADC_Init+0xd0>
  {
    Error_Handler();
 800ad04:	f002 fb50 	bl	800d3a8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 800ad08:	46c0      	nop			@ (mov r8, r8)
 800ad0a:	46bd      	mov	sp, r7
 800ad0c:	b002      	add	sp, #8
 800ad0e:	bd80      	pop	{r7, pc}
 800ad10:	20000e84 	.word	0x20000e84
 800ad14:	40012400 	.word	0x40012400
 800ad18:	38004000 	.word	0x38004000
 800ad1c:	3c008000 	.word	0x3c008000

0800ad20 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800ad20:	b590      	push	{r4, r7, lr}
 800ad22:	b089      	sub	sp, #36	@ 0x24
 800ad24:	af00      	add	r7, sp, #0
 800ad26:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ad28:	240c      	movs	r4, #12
 800ad2a:	193b      	adds	r3, r7, r4
 800ad2c:	0018      	movs	r0, r3
 800ad2e:	2314      	movs	r3, #20
 800ad30:	001a      	movs	r2, r3
 800ad32:	2100      	movs	r1, #0
 800ad34:	f01b fbf4 	bl	8026520 <memset>
  if(adcHandle->Instance==ADC1)
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	681b      	ldr	r3, [r3, #0]
 800ad3c:	4a14      	ldr	r2, [pc, #80]	@ (800ad90 <HAL_ADC_MspInit+0x70>)
 800ad3e:	4293      	cmp	r3, r2
 800ad40:	d121      	bne.n	800ad86 <HAL_ADC_MspInit+0x66>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800ad42:	4b14      	ldr	r3, [pc, #80]	@ (800ad94 <HAL_ADC_MspInit+0x74>)
 800ad44:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800ad46:	4b13      	ldr	r3, [pc, #76]	@ (800ad94 <HAL_ADC_MspInit+0x74>)
 800ad48:	2180      	movs	r1, #128	@ 0x80
 800ad4a:	0089      	lsls	r1, r1, #2
 800ad4c:	430a      	orrs	r2, r1
 800ad4e:	635a      	str	r2, [r3, #52]	@ 0x34

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800ad50:	4b10      	ldr	r3, [pc, #64]	@ (800ad94 <HAL_ADC_MspInit+0x74>)
 800ad52:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ad54:	4b0f      	ldr	r3, [pc, #60]	@ (800ad94 <HAL_ADC_MspInit+0x74>)
 800ad56:	2104      	movs	r1, #4
 800ad58:	430a      	orrs	r2, r1
 800ad5a:	62da      	str	r2, [r3, #44]	@ 0x2c
 800ad5c:	4b0d      	ldr	r3, [pc, #52]	@ (800ad94 <HAL_ADC_MspInit+0x74>)
 800ad5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ad60:	2204      	movs	r2, #4
 800ad62:	4013      	ands	r3, r2
 800ad64:	60bb      	str	r3, [r7, #8]
 800ad66:	68bb      	ldr	r3, [r7, #8]
    /**ADC GPIO Configuration
    PC4     ------> ADC_IN14
    PC5     ------> ADC_IN15
    */
    GPIO_InitStruct.Pin = BatMeasure_Pin|SolarMeasure_Pin;
 800ad68:	193b      	adds	r3, r7, r4
 800ad6a:	2230      	movs	r2, #48	@ 0x30
 800ad6c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800ad6e:	193b      	adds	r3, r7, r4
 800ad70:	2203      	movs	r2, #3
 800ad72:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ad74:	193b      	adds	r3, r7, r4
 800ad76:	2200      	movs	r2, #0
 800ad78:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800ad7a:	193b      	adds	r3, r7, r4
 800ad7c:	4a06      	ldr	r2, [pc, #24]	@ (800ad98 <HAL_ADC_MspInit+0x78>)
 800ad7e:	0019      	movs	r1, r3
 800ad80:	0010      	movs	r0, r2
 800ad82:	f00a feab 	bl	8015adc <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800ad86:	46c0      	nop			@ (mov r8, r8)
 800ad88:	46bd      	mov	sp, r7
 800ad8a:	b009      	add	sp, #36	@ 0x24
 800ad8c:	bd90      	pop	{r4, r7, pc}
 800ad8e:	46c0      	nop			@ (mov r8, r8)
 800ad90:	40012400 	.word	0x40012400
 800ad94:	40021000 	.word	0x40021000
 800ad98:	50000800 	.word	0x50000800

0800ad9c <ReadDirRegister>:

AHT20State AHTState = AHT_STATE_START_MEASUREMENTS; // init is done by probing

static uint8_t CalculateCRC(uint8_t* data, uint8_t length);

static bool ReadDirRegister(uint8_t address, uint8_t* buffer, uint8_t nrBytes) {
 800ad9c:	b590      	push	{r4, r7, lr}
 800ad9e:	b083      	sub	sp, #12
 800ada0:	af00      	add	r7, sp, #0
 800ada2:	6039      	str	r1, [r7, #0]
 800ada4:	0011      	movs	r1, r2
 800ada6:	1dfb      	adds	r3, r7, #7
 800ada8:	1c02      	adds	r2, r0, #0
 800adaa:	701a      	strb	r2, [r3, #0]
 800adac:	1dbb      	adds	r3, r7, #6
 800adae:	1c0a      	adds	r2, r1, #0
 800adb0:	701a      	strb	r2, [r3, #0]
  if (ReadDirFunction != NULL) {
 800adb2:	4b0a      	ldr	r3, [pc, #40]	@ (800addc <ReadDirRegister+0x40>)
 800adb4:	681b      	ldr	r3, [r3, #0]
 800adb6:	2b00      	cmp	r3, #0
 800adb8:	d00a      	beq.n	800add0 <ReadDirRegister+0x34>
    return ReadDirFunction(address, buffer, nrBytes);
 800adba:	4b08      	ldr	r3, [pc, #32]	@ (800addc <ReadDirRegister+0x40>)
 800adbc:	681b      	ldr	r3, [r3, #0]
 800adbe:	1dba      	adds	r2, r7, #6
 800adc0:	7814      	ldrb	r4, [r2, #0]
 800adc2:	6839      	ldr	r1, [r7, #0]
 800adc4:	1dfa      	adds	r2, r7, #7
 800adc6:	7810      	ldrb	r0, [r2, #0]
 800adc8:	0022      	movs	r2, r4
 800adca:	4798      	blx	r3
 800adcc:	0003      	movs	r3, r0
 800adce:	e000      	b.n	800add2 <ReadDirRegister+0x36>
  }
  return false;
 800add0:	2300      	movs	r3, #0
}
 800add2:	0018      	movs	r0, r3
 800add4:	46bd      	mov	sp, r7
 800add6:	b003      	add	sp, #12
 800add8:	bd90      	pop	{r4, r7, pc}
 800adda:	46c0      	nop			@ (mov r8, r8)
 800addc:	20000ef0 	.word	0x20000ef0

0800ade0 <ReadRegister>:

static bool ReadRegister(uint8_t address, uint8_t* buffer, uint8_t nrBytes) {
 800ade0:	b590      	push	{r4, r7, lr}
 800ade2:	b083      	sub	sp, #12
 800ade4:	af00      	add	r7, sp, #0
 800ade6:	6039      	str	r1, [r7, #0]
 800ade8:	0011      	movs	r1, r2
 800adea:	1dfb      	adds	r3, r7, #7
 800adec:	1c02      	adds	r2, r0, #0
 800adee:	701a      	strb	r2, [r3, #0]
 800adf0:	1dbb      	adds	r3, r7, #6
 800adf2:	1c0a      	adds	r2, r1, #0
 800adf4:	701a      	strb	r2, [r3, #0]
  if (ReadFunction != NULL) {
 800adf6:	4b0a      	ldr	r3, [pc, #40]	@ (800ae20 <ReadRegister+0x40>)
 800adf8:	681b      	ldr	r3, [r3, #0]
 800adfa:	2b00      	cmp	r3, #0
 800adfc:	d00a      	beq.n	800ae14 <ReadRegister+0x34>
    return ReadFunction(address, buffer, nrBytes);
 800adfe:	4b08      	ldr	r3, [pc, #32]	@ (800ae20 <ReadRegister+0x40>)
 800ae00:	681b      	ldr	r3, [r3, #0]
 800ae02:	1dba      	adds	r2, r7, #6
 800ae04:	7814      	ldrb	r4, [r2, #0]
 800ae06:	6839      	ldr	r1, [r7, #0]
 800ae08:	1dfa      	adds	r2, r7, #7
 800ae0a:	7810      	ldrb	r0, [r2, #0]
 800ae0c:	0022      	movs	r2, r4
 800ae0e:	4798      	blx	r3
 800ae10:	0003      	movs	r3, r0
 800ae12:	e000      	b.n	800ae16 <ReadRegister+0x36>
  }
  return false;
 800ae14:	2300      	movs	r3, #0
}
 800ae16:	0018      	movs	r0, r3
 800ae18:	46bd      	mov	sp, r7
 800ae1a:	b003      	add	sp, #12
 800ae1c:	bd90      	pop	{r4, r7, pc}
 800ae1e:	46c0      	nop			@ (mov r8, r8)
 800ae20:	20000ee8 	.word	0x20000ee8

0800ae24 <WriteRegister>:

static bool WriteRegister(uint8_t address, uint8_t* buffer, uint8_t nrBytes) {
 800ae24:	b590      	push	{r4, r7, lr}
 800ae26:	b083      	sub	sp, #12
 800ae28:	af00      	add	r7, sp, #0
 800ae2a:	6039      	str	r1, [r7, #0]
 800ae2c:	0011      	movs	r1, r2
 800ae2e:	1dfb      	adds	r3, r7, #7
 800ae30:	1c02      	adds	r2, r0, #0
 800ae32:	701a      	strb	r2, [r3, #0]
 800ae34:	1dbb      	adds	r3, r7, #6
 800ae36:	1c0a      	adds	r2, r1, #0
 800ae38:	701a      	strb	r2, [r3, #0]
  if (WriteFunction != NULL) {
 800ae3a:	4b0a      	ldr	r3, [pc, #40]	@ (800ae64 <WriteRegister+0x40>)
 800ae3c:	681b      	ldr	r3, [r3, #0]
 800ae3e:	2b00      	cmp	r3, #0
 800ae40:	d00a      	beq.n	800ae58 <WriteRegister+0x34>
    return WriteFunction(address, buffer, nrBytes);
 800ae42:	4b08      	ldr	r3, [pc, #32]	@ (800ae64 <WriteRegister+0x40>)
 800ae44:	681b      	ldr	r3, [r3, #0]
 800ae46:	1dba      	adds	r2, r7, #6
 800ae48:	7814      	ldrb	r4, [r2, #0]
 800ae4a:	6839      	ldr	r1, [r7, #0]
 800ae4c:	1dfa      	adds	r2, r7, #7
 800ae4e:	7810      	ldrb	r0, [r2, #0]
 800ae50:	0022      	movs	r2, r4
 800ae52:	4798      	blx	r3
 800ae54:	0003      	movs	r3, r0
 800ae56:	e000      	b.n	800ae5a <WriteRegister+0x36>
  }
  return false;
 800ae58:	2300      	movs	r3, #0
}
 800ae5a:	0018      	movs	r0, r3
 800ae5c:	46bd      	mov	sp, r7
 800ae5e:	b003      	add	sp, #12
 800ae60:	bd90      	pop	{r4, r7, pc}
 800ae62:	46c0      	nop			@ (mov r8, r8)
 800ae64:	20000eec 	.word	0x20000eec

0800ae68 <CalculateCRC>:

uint8_t CalculateCRC(uint8_t* data, uint8_t length) {
 800ae68:	b580      	push	{r7, lr}
 800ae6a:	b084      	sub	sp, #16
 800ae6c:	af00      	add	r7, sp, #0
 800ae6e:	6078      	str	r0, [r7, #4]
 800ae70:	000a      	movs	r2, r1
 800ae72:	1cfb      	adds	r3, r7, #3
 800ae74:	701a      	strb	r2, [r3, #0]
  uint8_t crc = AHT20_CRC_INIT_VALUE;
 800ae76:	230f      	movs	r3, #15
 800ae78:	18fb      	adds	r3, r7, r3
 800ae7a:	22ff      	movs	r2, #255	@ 0xff
 800ae7c:	701a      	strb	r2, [r3, #0]

  for (uint8_t i = 0; i < length; i++) {
 800ae7e:	230e      	movs	r3, #14
 800ae80:	18fb      	adds	r3, r7, r3
 800ae82:	2200      	movs	r2, #0
 800ae84:	701a      	strb	r2, [r3, #0]
 800ae86:	e038      	b.n	800aefa <CalculateCRC+0x92>
    // XOR byte into least significant byte of crc
    crc ^= data[i];
 800ae88:	230e      	movs	r3, #14
 800ae8a:	18fb      	adds	r3, r7, r3
 800ae8c:	781b      	ldrb	r3, [r3, #0]
 800ae8e:	687a      	ldr	r2, [r7, #4]
 800ae90:	18d3      	adds	r3, r2, r3
 800ae92:	7819      	ldrb	r1, [r3, #0]
 800ae94:	220f      	movs	r2, #15
 800ae96:	18bb      	adds	r3, r7, r2
 800ae98:	18ba      	adds	r2, r7, r2
 800ae9a:	7812      	ldrb	r2, [r2, #0]
 800ae9c:	404a      	eors	r2, r1
 800ae9e:	701a      	strb	r2, [r3, #0]

    for (uint8_t j = 0; j < 8; j++) {
 800aea0:	230d      	movs	r3, #13
 800aea2:	18fb      	adds	r3, r7, r3
 800aea4:	2200      	movs	r2, #0
 800aea6:	701a      	strb	r2, [r3, #0]
 800aea8:	e01c      	b.n	800aee4 <CalculateCRC+0x7c>
      // If the leftmost (most significant) bit is set
      if (crc & AHT20_CRC_MSB_MASK) {
 800aeaa:	210f      	movs	r1, #15
 800aeac:	187b      	adds	r3, r7, r1
 800aeae:	781b      	ldrb	r3, [r3, #0]
 800aeb0:	b25b      	sxtb	r3, r3
 800aeb2:	2b00      	cmp	r3, #0
 800aeb4:	da0a      	bge.n	800aecc <CalculateCRC+0x64>
        // Shift left and XOR with polynomial
        crc = (crc << 1) ^ AHT_CRC_POLYNOMIAL;
 800aeb6:	187b      	adds	r3, r7, r1
 800aeb8:	781b      	ldrb	r3, [r3, #0]
 800aeba:	b25b      	sxtb	r3, r3
 800aebc:	18db      	adds	r3, r3, r3
 800aebe:	b25b      	sxtb	r3, r3
 800aec0:	2231      	movs	r2, #49	@ 0x31
 800aec2:	4053      	eors	r3, r2
 800aec4:	b25a      	sxtb	r2, r3
 800aec6:	187b      	adds	r3, r7, r1
 800aec8:	701a      	strb	r2, [r3, #0]
 800aeca:	e005      	b.n	800aed8 <CalculateCRC+0x70>
      } else {
          crc <<= 1;
 800aecc:	230f      	movs	r3, #15
 800aece:	18fa      	adds	r2, r7, r3
 800aed0:	18fb      	adds	r3, r7, r3
 800aed2:	781b      	ldrb	r3, [r3, #0]
 800aed4:	18db      	adds	r3, r3, r3
 800aed6:	7013      	strb	r3, [r2, #0]
    for (uint8_t j = 0; j < 8; j++) {
 800aed8:	210d      	movs	r1, #13
 800aeda:	187b      	adds	r3, r7, r1
 800aedc:	781a      	ldrb	r2, [r3, #0]
 800aede:	187b      	adds	r3, r7, r1
 800aee0:	3201      	adds	r2, #1
 800aee2:	701a      	strb	r2, [r3, #0]
 800aee4:	230d      	movs	r3, #13
 800aee6:	18fb      	adds	r3, r7, r3
 800aee8:	781b      	ldrb	r3, [r3, #0]
 800aeea:	2b07      	cmp	r3, #7
 800aeec:	d9dd      	bls.n	800aeaa <CalculateCRC+0x42>
  for (uint8_t i = 0; i < length; i++) {
 800aeee:	210e      	movs	r1, #14
 800aef0:	187b      	adds	r3, r7, r1
 800aef2:	781a      	ldrb	r2, [r3, #0]
 800aef4:	187b      	adds	r3, r7, r1
 800aef6:	3201      	adds	r2, #1
 800aef8:	701a      	strb	r2, [r3, #0]
 800aefa:	230e      	movs	r3, #14
 800aefc:	18fa      	adds	r2, r7, r3
 800aefe:	1cfb      	adds	r3, r7, #3
 800af00:	7812      	ldrb	r2, [r2, #0]
 800af02:	781b      	ldrb	r3, [r3, #0]
 800af04:	429a      	cmp	r2, r3
 800af06:	d3bf      	bcc.n	800ae88 <CalculateCRC+0x20>
      }
    }
  }
//  Debug("CRC calculated value: 0x%X", crc);
  return crc;
 800af08:	230f      	movs	r3, #15
 800af0a:	18fb      	adds	r3, r7, r3
 800af0c:	781b      	ldrb	r3, [r3, #0]
}
 800af0e:	0018      	movs	r0, r3
 800af10:	46bd      	mov	sp, r7
 800af12:	b004      	add	sp, #16
 800af14:	bd80      	pop	{r7, pc}
	...

0800af18 <setAHT20TimeStamp>:

void setAHT20TimeStamp(uint32_t ticks) {
 800af18:	b580      	push	{r7, lr}
 800af1a:	b082      	sub	sp, #8
 800af1c:	af00      	add	r7, sp, #0
 800af1e:	6078      	str	r0, [r7, #4]
  AHT20TimeStamp = HAL_GetTick() + ticks;
 800af20:	f009 fd04 	bl	801492c <HAL_GetTick>
 800af24:	0002      	movs	r2, r0
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	18d2      	adds	r2, r2, r3
 800af2a:	4b03      	ldr	r3, [pc, #12]	@ (800af38 <setAHT20TimeStamp+0x20>)
 800af2c:	601a      	str	r2, [r3, #0]
}
 800af2e:	46c0      	nop			@ (mov r8, r8)
 800af30:	46bd      	mov	sp, r7
 800af32:	b002      	add	sp, #8
 800af34:	bd80      	pop	{r7, pc}
 800af36:	46c0      	nop			@ (mov r8, r8)
 800af38:	20000ee0 	.word	0x20000ee0

0800af3c <AHT_Init>:

void AHT_Init(I2CReadCb readFunction, I2CWriteCB writeFunction, I2CReadDir readDirFunction) {
 800af3c:	b580      	push	{r7, lr}
 800af3e:	b084      	sub	sp, #16
 800af40:	af00      	add	r7, sp, #0
 800af42:	60f8      	str	r0, [r7, #12]
 800af44:	60b9      	str	r1, [r7, #8]
 800af46:	607a      	str	r2, [r7, #4]
  ReadDirFunction = readDirFunction;
 800af48:	4b06      	ldr	r3, [pc, #24]	@ (800af64 <AHT_Init+0x28>)
 800af4a:	687a      	ldr	r2, [r7, #4]
 800af4c:	601a      	str	r2, [r3, #0]
  ReadFunction = readFunction;
 800af4e:	4b06      	ldr	r3, [pc, #24]	@ (800af68 <AHT_Init+0x2c>)
 800af50:	68fa      	ldr	r2, [r7, #12]
 800af52:	601a      	str	r2, [r3, #0]
  WriteFunction = writeFunction;
 800af54:	4b05      	ldr	r3, [pc, #20]	@ (800af6c <AHT_Init+0x30>)
 800af56:	68ba      	ldr	r2, [r7, #8]
 800af58:	601a      	str	r2, [r3, #0]
}
 800af5a:	46c0      	nop			@ (mov r8, r8)
 800af5c:	46bd      	mov	sp, r7
 800af5e:	b004      	add	sp, #16
 800af60:	bd80      	pop	{r7, pc}
 800af62:	46c0      	nop			@ (mov r8, r8)
 800af64:	20000ef0 	.word	0x20000ef0
 800af68:	20000ee8 	.word	0x20000ee8
 800af6c:	20000eec 	.word	0x20000eec

0800af70 <AHT20_register_reset>:

void AHT20_register_reset(uint8_t addr){
 800af70:	b580      	push	{r7, lr}
 800af72:	b084      	sub	sp, #16
 800af74:	af02      	add	r7, sp, #8
 800af76:	0002      	movs	r2, r0
 800af78:	1dfb      	adds	r3, r7, #7
 800af7a:	701a      	strb	r2, [r3, #0]
  AHT20_INIT_1[0] = addr;
 800af7c:	4b18      	ldr	r3, [pc, #96]	@ (800afe0 <AHT20_register_reset+0x70>)
 800af7e:	1dfa      	adds	r2, r7, #7
 800af80:	7812      	ldrb	r2, [r2, #0]
 800af82:	701a      	strb	r2, [r3, #0]
  WriteRegister(AHT20_ADDRESS, AHT20_INIT_1, 3);
 800af84:	4b16      	ldr	r3, [pc, #88]	@ (800afe0 <AHT20_register_reset+0x70>)
 800af86:	2203      	movs	r2, #3
 800af88:	0019      	movs	r1, r3
 800af8a:	2038      	movs	r0, #56	@ 0x38
 800af8c:	f7ff ff4a 	bl	800ae24 <WriteRegister>
  HAL_Delay(15);
 800af90:	200f      	movs	r0, #15
 800af92:	f009 fcd5 	bl	8014940 <HAL_Delay>
  ReadRegister(AHT20_ADDRESS, airtemphumraw, 3);
 800af96:	4b13      	ldr	r3, [pc, #76]	@ (800afe4 <AHT20_register_reset+0x74>)
 800af98:	2203      	movs	r2, #3
 800af9a:	0019      	movs	r1, r3
 800af9c:	2038      	movs	r0, #56	@ 0x38
 800af9e:	f7ff ff1f 	bl	800ade0 <ReadRegister>
  HAL_Delay(15);
 800afa2:	200f      	movs	r0, #15
 800afa4:	f009 fccc 	bl	8014940 <HAL_Delay>
  airtemphumraw[0] = 0xB0;
 800afa8:	4b0e      	ldr	r3, [pc, #56]	@ (800afe4 <AHT20_register_reset+0x74>)
 800afaa:	22b0      	movs	r2, #176	@ 0xb0
 800afac:	701a      	strb	r2, [r3, #0]
  Debug("AHT20 Magic from AOSONG, Readed values 2nd=0x%02X, 3rd=0x%02X", airtemphumraw[2], airtemphumraw[3]);
 800afae:	4b0d      	ldr	r3, [pc, #52]	@ (800afe4 <AHT20_register_reset+0x74>)
 800afb0:	789b      	ldrb	r3, [r3, #2]
 800afb2:	0018      	movs	r0, r3
 800afb4:	4b0b      	ldr	r3, [pc, #44]	@ (800afe4 <AHT20_register_reset+0x74>)
 800afb6:	78db      	ldrb	r3, [r3, #3]
 800afb8:	4a0b      	ldr	r2, [pc, #44]	@ (800afe8 <AHT20_register_reset+0x78>)
 800afba:	490c      	ldr	r1, [pc, #48]	@ (800afec <AHT20_register_reset+0x7c>)
 800afbc:	9300      	str	r3, [sp, #0]
 800afbe:	0003      	movs	r3, r0
 800afc0:	2003      	movs	r0, #3
 800afc2:	f008 ff3b 	bl	8013e3c <CreateLine>
  WriteRegister(AHT20_ADDRESS, airtemphumraw, 3);
 800afc6:	4b07      	ldr	r3, [pc, #28]	@ (800afe4 <AHT20_register_reset+0x74>)
 800afc8:	2203      	movs	r2, #3
 800afca:	0019      	movs	r1, r3
 800afcc:	2038      	movs	r0, #56	@ 0x38
 800afce:	f7ff ff29 	bl	800ae24 <WriteRegister>
  HAL_Delay(15);
 800afd2:	200f      	movs	r0, #15
 800afd4:	f009 fcb4 	bl	8014940 <HAL_Delay>
}
 800afd8:	46c0      	nop			@ (mov r8, r8)
 800afda:	46bd      	mov	sp, r7
 800afdc:	b002      	add	sp, #8
 800afde:	bd80      	pop	{r7, pc}
 800afe0:	2000009c 	.word	0x2000009c
 800afe4:	20000ef4 	.word	0x20000ef4
 800afe8:	0802c030 	.word	0x0802c030
 800afec:	0802c070 	.word	0x0802c070

0800aff0 <AHT20_Start_Init>:

void AHT20_Start_Init(void)
{
 800aff0:	b580      	push	{r7, lr}
 800aff2:	af00      	add	r7, sp, #0
  AHT20_register_reset(0x1b);
 800aff4:	201b      	movs	r0, #27
 800aff6:	f7ff ffbb 	bl	800af70 <AHT20_register_reset>
  AHT20_register_reset(0x1c);
 800affa:	201c      	movs	r0, #28
 800affc:	f7ff ffb8 	bl	800af70 <AHT20_register_reset>
  AHT20_register_reset(0x1e);
 800b000:	201e      	movs	r0, #30
 800b002:	f7ff ffb5 	bl	800af70 <AHT20_register_reset>
}
 800b006:	46c0      	nop			@ (mov r8, r8)
 800b008:	46bd      	mov	sp, r7
 800b00a:	bd80      	pop	{r7, pc}

0800b00c <AHT20_read_status>:

uint8_t AHT20_read_status() {
 800b00c:	b580      	push	{r7, lr}
 800b00e:	af00      	add	r7, sp, #0
  WriteRegister(AHT20_ADDRESS, AHT20_status, 1);
 800b010:	4b0c      	ldr	r3, [pc, #48]	@ (800b044 <AHT20_read_status+0x38>)
 800b012:	2201      	movs	r2, #1
 800b014:	0019      	movs	r1, r3
 800b016:	2038      	movs	r0, #56	@ 0x38
 800b018:	f7ff ff04 	bl	800ae24 <WriteRegister>
  HAL_Delay(10);
 800b01c:	200a      	movs	r0, #10
 800b01e:	f009 fc8f 	bl	8014940 <HAL_Delay>
  airtemphumraw[0] = 0;
 800b022:	4b09      	ldr	r3, [pc, #36]	@ (800b048 <AHT20_read_status+0x3c>)
 800b024:	2200      	movs	r2, #0
 800b026:	701a      	strb	r2, [r3, #0]
  ReadRegister(AHT20_ADDRESS, airtemphumraw, 1);
 800b028:	4b07      	ldr	r3, [pc, #28]	@ (800b048 <AHT20_read_status+0x3c>)
 800b02a:	2201      	movs	r2, #1
 800b02c:	0019      	movs	r1, r3
 800b02e:	2038      	movs	r0, #56	@ 0x38
 800b030:	f7ff fed6 	bl	800ade0 <ReadRegister>
  HAL_Delay(10);
 800b034:	200a      	movs	r0, #10
 800b036:	f009 fc83 	bl	8014940 <HAL_Delay>
  return airtemphumraw[0];
 800b03a:	4b03      	ldr	r3, [pc, #12]	@ (800b048 <AHT20_read_status+0x3c>)
 800b03c:	781b      	ldrb	r3, [r3, #0]
}
 800b03e:	0018      	movs	r0, r3
 800b040:	46bd      	mov	sp, r7
 800b042:	bd80      	pop	{r7, pc}
 800b044:	20000098 	.word	0x20000098
 800b048:	20000ef4 	.word	0x20000ef4

0800b04c <AHT20_init>:

bool AHT20_init(void) {
 800b04c:	b580      	push	{r7, lr}
 800b04e:	b082      	sub	sp, #8
 800b050:	af00      	add	r7, sp, #0
  uint32_t ticks = HAL_GetTick();
 800b052:	f009 fc6b 	bl	801492c <HAL_GetTick>
 800b056:	0003      	movs	r3, r0
 800b058:	607b      	str	r3, [r7, #4]
  if (ticks < 120) {
 800b05a:	687b      	ldr	r3, [r7, #4]
 800b05c:	2b77      	cmp	r3, #119	@ 0x77
 800b05e:	d805      	bhi.n	800b06c <AHT20_init+0x20>
    HAL_Delay(120-ticks); // wait for minimum startup time
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	2278      	movs	r2, #120	@ 0x78
 800b064:	1ad3      	subs	r3, r2, r3
 800b066:	0018      	movs	r0, r3
 800b068:	f009 fc6a 	bl	8014940 <HAL_Delay>
  }
  AHT20_read_status();
 800b06c:	f7ff ffce 	bl	800b00c <AHT20_read_status>
  Debug("AHT20 Value of statusregister: 0x%02X", airtemphumraw[0]);
 800b070:	4b0e      	ldr	r3, [pc, #56]	@ (800b0ac <AHT20_init+0x60>)
 800b072:	781b      	ldrb	r3, [r3, #0]
 800b074:	4a0e      	ldr	r2, [pc, #56]	@ (800b0b0 <AHT20_init+0x64>)
 800b076:	490f      	ldr	r1, [pc, #60]	@ (800b0b4 <AHT20_init+0x68>)
 800b078:	2003      	movs	r0, #3
 800b07a:	f008 fedf 	bl	8013e3c <CreateLine>
  if ((airtemphumraw[0] & 0x18) != 0x18) {
 800b07e:	4b0b      	ldr	r3, [pc, #44]	@ (800b0ac <AHT20_init+0x60>)
 800b080:	781b      	ldrb	r3, [r3, #0]
 800b082:	001a      	movs	r2, r3
 800b084:	2318      	movs	r3, #24
 800b086:	4013      	ands	r3, r2
 800b088:	2b18      	cmp	r3, #24
 800b08a:	d00a      	beq.n	800b0a2 <AHT20_init+0x56>
    WriteRegister(AHT20_ADDRESS, AHT20_start, 3);
 800b08c:	4b0a      	ldr	r3, [pc, #40]	@ (800b0b8 <AHT20_init+0x6c>)
 800b08e:	2203      	movs	r2, #3
 800b090:	0019      	movs	r1, r3
 800b092:	2038      	movs	r0, #56	@ 0x38
 800b094:	f7ff fec6 	bl	800ae24 <WriteRegister>
    HAL_Delay(10);
 800b098:	200a      	movs	r0, #10
 800b09a:	f009 fc51 	bl	8014940 <HAL_Delay>
    AHT20_Start_Init();
 800b09e:	f7ff ffa7 	bl	800aff0 <AHT20_Start_Init>
  }
  return true;
 800b0a2:	2301      	movs	r3, #1
}
 800b0a4:	0018      	movs	r0, r3
 800b0a6:	46bd      	mov	sp, r7
 800b0a8:	b002      	add	sp, #8
 800b0aa:	bd80      	pop	{r7, pc}
 800b0ac:	20000ef4 	.word	0x20000ef4
 800b0b0:	0802c074 	.word	0x0802c074
 800b0b4:	0802c070 	.word	0x0802c070
 800b0b8:	2000008c 	.word	0x2000008c

0800b0bc <AHT20_calibrate>:


bool AHT20_calibrate() {
 800b0bc:	b590      	push	{r4, r7, lr}
 800b0be:	b083      	sub	sp, #12
 800b0c0:	af00      	add	r7, sp, #0
  bool response = WriteRegister(AHT20_ADDRESS, AHT20_status, 1);
 800b0c2:	1dfc      	adds	r4, r7, #7
 800b0c4:	4b10      	ldr	r3, [pc, #64]	@ (800b108 <AHT20_calibrate+0x4c>)
 800b0c6:	2201      	movs	r2, #1
 800b0c8:	0019      	movs	r1, r3
 800b0ca:	2038      	movs	r0, #56	@ 0x38
 800b0cc:	f7ff feaa 	bl	800ae24 <WriteRegister>
 800b0d0:	0003      	movs	r3, r0
 800b0d2:	7023      	strb	r3, [r4, #0]
  if (!response) {
 800b0d4:	1dfb      	adds	r3, r7, #7
 800b0d6:	781b      	ldrb	r3, [r3, #0]
 800b0d8:	2201      	movs	r2, #1
 800b0da:	4053      	eors	r3, r2
 800b0dc:	b2db      	uxtb	r3, r3
 800b0de:	2b00      	cmp	r3, #0
 800b0e0:	d005      	beq.n	800b0ee <AHT20_calibrate+0x32>
    Error("AHT20 Write status request error during calibaration");
 800b0e2:	4a0a      	ldr	r2, [pc, #40]	@ (800b10c <AHT20_calibrate+0x50>)
 800b0e4:	4b0a      	ldr	r3, [pc, #40]	@ (800b110 <AHT20_calibrate+0x54>)
 800b0e6:	0019      	movs	r1, r3
 800b0e8:	2001      	movs	r0, #1
 800b0ea:	f008 fea7 	bl	8013e3c <CreateLine>
  }
  AHT20TimeStamp = HAL_GetTick() + 50;
 800b0ee:	f009 fc1d 	bl	801492c <HAL_GetTick>
 800b0f2:	0003      	movs	r3, r0
 800b0f4:	3332      	adds	r3, #50	@ 0x32
 800b0f6:	001a      	movs	r2, r3
 800b0f8:	4b06      	ldr	r3, [pc, #24]	@ (800b114 <AHT20_calibrate+0x58>)
 800b0fa:	601a      	str	r2, [r3, #0]
  return response;
 800b0fc:	1dfb      	adds	r3, r7, #7
 800b0fe:	781b      	ldrb	r3, [r3, #0]
    airtemphumraw[0] = 0;
  }
  Debug("status of AHT20 [0]= 0x%02x", airtemphumraw[0]);
  AHT20TimeStamp = HAL_GetTick() + 200;
  return (airtemphumraw[0]);
}
 800b100:	0018      	movs	r0, r3
 800b102:	46bd      	mov	sp, r7
 800b104:	b003      	add	sp, #12
 800b106:	bd90      	pop	{r4, r7, pc}
 800b108:	20000098 	.word	0x20000098
 800b10c:	0802c09c 	.word	0x0802c09c
 800b110:	0802c0d4 	.word	0x0802c0d4
 800b114:	20000ee0 	.word	0x20000ee0

0800b118 <AHT20_DeviceConnected>:

 bool AHT20_DeviceConnected() {
 800b118:	b580      	push	{r7, lr}
 800b11a:	af00      	add	r7, sp, #0
   Debug("Init & probing AHT20");
 800b11c:	4a0a      	ldr	r2, [pc, #40]	@ (800b148 <AHT20_DeviceConnected+0x30>)
 800b11e:	4b0b      	ldr	r3, [pc, #44]	@ (800b14c <AHT20_DeviceConnected+0x34>)
 800b120:	0019      	movs	r1, r3
 800b122:	2003      	movs	r0, #3
 800b124:	f008 fe8a 	bl	8013e3c <CreateLine>
   AHT20_init();
 800b128:	f7ff ff90 	bl	800b04c <AHT20_init>
   HAL_Delay(10);
 800b12c:	200a      	movs	r0, #10
 800b12e:	f009 fc07 	bl	8014940 <HAL_Delay>
   AHT20_calibrate();
 800b132:	f7ff ffc3 	bl	800b0bc <AHT20_calibrate>
   return (bool)AHT20_read_status();
 800b136:	f7ff ff69 	bl	800b00c <AHT20_read_status>
 800b13a:	0003      	movs	r3, r0
 800b13c:	1e5a      	subs	r2, r3, #1
 800b13e:	4193      	sbcs	r3, r2
 800b140:	b2db      	uxtb	r3, r3
 }
 800b142:	0018      	movs	r0, r3
 800b144:	46bd      	mov	sp, r7
 800b146:	bd80      	pop	{r7, pc}
 800b148:	0802c0d8 	.word	0x0802c0d8
 800b14c:	0802c070 	.word	0x0802c070

0800b150 <AHT20_StartMeasurement>:

bool AHT20_StartMeasurement(void) {
 800b150:	b590      	push	{r4, r7, lr}
 800b152:	b083      	sub	sp, #12
 800b154:	af00      	add	r7, sp, #0
  bool response = WriteRegister(AHT20_ADDRESS, AHT20_measure, 3);
 800b156:	1dfc      	adds	r4, r7, #7
 800b158:	4b10      	ldr	r3, [pc, #64]	@ (800b19c <AHT20_StartMeasurement+0x4c>)
 800b15a:	2203      	movs	r2, #3
 800b15c:	0019      	movs	r1, r3
 800b15e:	2038      	movs	r0, #56	@ 0x38
 800b160:	f7ff fe60 	bl	800ae24 <WriteRegister>
 800b164:	0003      	movs	r3, r0
 800b166:	7023      	strb	r3, [r4, #0]
//  Debug("AHT20_StartMeasurement executed");
  if (!response) {
 800b168:	1dfb      	adds	r3, r7, #7
 800b16a:	781b      	ldrb	r3, [r3, #0]
 800b16c:	2201      	movs	r2, #1
 800b16e:	4053      	eors	r3, r2
 800b170:	b2db      	uxtb	r3, r3
 800b172:	2b00      	cmp	r3, #0
 800b174:	d005      	beq.n	800b182 <AHT20_StartMeasurement+0x32>
    Error("AHT20 Write error during start measurement");
 800b176:	4a0a      	ldr	r2, [pc, #40]	@ (800b1a0 <AHT20_StartMeasurement+0x50>)
 800b178:	4b0a      	ldr	r3, [pc, #40]	@ (800b1a4 <AHT20_StartMeasurement+0x54>)
 800b17a:	0019      	movs	r1, r3
 800b17c:	2001      	movs	r0, #1
 800b17e:	f008 fe5d 	bl	8013e3c <CreateLine>
  }
  AHT20TimeStamp = HAL_GetTick() + 250;
 800b182:	f009 fbd3 	bl	801492c <HAL_GetTick>
 800b186:	0003      	movs	r3, r0
 800b188:	33fa      	adds	r3, #250	@ 0xfa
 800b18a:	001a      	movs	r2, r3
 800b18c:	4b06      	ldr	r3, [pc, #24]	@ (800b1a8 <AHT20_StartMeasurement+0x58>)
 800b18e:	601a      	str	r2, [r3, #0]
  return response;
 800b190:	1dfb      	adds	r3, r7, #7
 800b192:	781b      	ldrb	r3, [r3, #0]
}
 800b194:	0018      	movs	r0, r3
 800b196:	46bd      	mov	sp, r7
 800b198:	b003      	add	sp, #12
 800b19a:	bd90      	pop	{r4, r7, pc}
 800b19c:	20000094 	.word	0x20000094
 800b1a0:	0802c0f0 	.word	0x0802c0f0
 800b1a4:	0802c0d4 	.word	0x0802c0d4
 800b1a8:	20000ee0 	.word	0x20000ee0

0800b1ac <AHT20_GetMeasurementValues>:

bool AHT20_GetMeasurementValues() {
 800b1ac:	b590      	push	{r4, r7, lr}
 800b1ae:	b083      	sub	sp, #12
 800b1b0:	af00      	add	r7, sp, #0
//  Debug("AHT20_GetMeasurementValues executed");
  AHT20TimeStamp = HAL_GetTick() + 1000;
 800b1b2:	f009 fbbb 	bl	801492c <HAL_GetTick>
 800b1b6:	0003      	movs	r3, r0
 800b1b8:	22fa      	movs	r2, #250	@ 0xfa
 800b1ba:	0092      	lsls	r2, r2, #2
 800b1bc:	189a      	adds	r2, r3, r2
 800b1be:	4b29      	ldr	r3, [pc, #164]	@ (800b264 <AHT20_GetMeasurementValues+0xb8>)
 800b1c0:	601a      	str	r2, [r3, #0]
  while ((AHT20_read_status() & 0x80) == 0x80) {
 800b1c2:	e019      	b.n	800b1f8 <AHT20_GetMeasurementValues+0x4c>
//    Info("AHT20 Device busy, waiting for results");
    if (TimestampIsReached(AHT20TimeStamp)) {
 800b1c4:	4b27      	ldr	r3, [pc, #156]	@ (800b264 <AHT20_GetMeasurementValues+0xb8>)
 800b1c6:	681b      	ldr	r3, [r3, #0]
 800b1c8:	0018      	movs	r0, r3
 800b1ca:	f008 fde1 	bl	8013d90 <TimestampIsReached>
 800b1ce:	1e03      	subs	r3, r0, #0
 800b1d0:	d00f      	beq.n	800b1f2 <AHT20_GetMeasurementValues+0x46>
      Error("AHT2x timeout for getting values");
 800b1d2:	4a25      	ldr	r2, [pc, #148]	@ (800b268 <AHT20_GetMeasurementValues+0xbc>)
 800b1d4:	4b25      	ldr	r3, [pc, #148]	@ (800b26c <AHT20_GetMeasurementValues+0xc0>)
 800b1d6:	0019      	movs	r1, r3
 800b1d8:	2001      	movs	r0, #1
 800b1da:	f008 fe2f 	bl	8013e3c <CreateLine>
      AHT20TimeStamp = HAL_GetTick() + 2000;
 800b1de:	f009 fba5 	bl	801492c <HAL_GetTick>
 800b1e2:	0003      	movs	r3, r0
 800b1e4:	22fa      	movs	r2, #250	@ 0xfa
 800b1e6:	00d2      	lsls	r2, r2, #3
 800b1e8:	189a      	adds	r2, r3, r2
 800b1ea:	4b1e      	ldr	r3, [pc, #120]	@ (800b264 <AHT20_GetMeasurementValues+0xb8>)
 800b1ec:	601a      	str	r2, [r3, #0]
      return false;
 800b1ee:	2300      	movs	r3, #0
 800b1f0:	e034      	b.n	800b25c <AHT20_GetMeasurementValues+0xb0>
    }
    HAL_Delay(10);
 800b1f2:	200a      	movs	r0, #10
 800b1f4:	f009 fba4 	bl	8014940 <HAL_Delay>
  while ((AHT20_read_status() & 0x80) == 0x80) {
 800b1f8:	f7ff ff08 	bl	800b00c <AHT20_read_status>
 800b1fc:	0003      	movs	r3, r0
 800b1fe:	001a      	movs	r2, r3
 800b200:	2380      	movs	r3, #128	@ 0x80
 800b202:	4013      	ands	r3, r2
 800b204:	2b80      	cmp	r3, #128	@ 0x80
 800b206:	d0dd      	beq.n	800b1c4 <AHT20_GetMeasurementValues+0x18>
  }
  HAL_Delay(10);
 800b208:	200a      	movs	r0, #10
 800b20a:	f009 fb99 	bl	8014940 <HAL_Delay>
  for (uint8_t g = 0; g < 7; g++){
 800b20e:	1dfb      	adds	r3, r7, #7
 800b210:	2200      	movs	r2, #0
 800b212:	701a      	strb	r2, [r3, #0]
 800b214:	e009      	b.n	800b22a <AHT20_GetMeasurementValues+0x7e>
    airtemphumraw[g] = 0;
 800b216:	1dfb      	adds	r3, r7, #7
 800b218:	781b      	ldrb	r3, [r3, #0]
 800b21a:	4a15      	ldr	r2, [pc, #84]	@ (800b270 <AHT20_GetMeasurementValues+0xc4>)
 800b21c:	2100      	movs	r1, #0
 800b21e:	54d1      	strb	r1, [r2, r3]
  for (uint8_t g = 0; g < 7; g++){
 800b220:	1dfb      	adds	r3, r7, #7
 800b222:	781a      	ldrb	r2, [r3, #0]
 800b224:	1dfb      	adds	r3, r7, #7
 800b226:	3201      	adds	r2, #1
 800b228:	701a      	strb	r2, [r3, #0]
 800b22a:	1dfb      	adds	r3, r7, #7
 800b22c:	781b      	ldrb	r3, [r3, #0]
 800b22e:	2b06      	cmp	r3, #6
 800b230:	d9f1      	bls.n	800b216 <AHT20_GetMeasurementValues+0x6a>
  }
  bool response = ReadDirRegister(AHT20_ADDRESS, airtemphumraw, 7);
 800b232:	1dbc      	adds	r4, r7, #6
 800b234:	4b0e      	ldr	r3, [pc, #56]	@ (800b270 <AHT20_GetMeasurementValues+0xc4>)
 800b236:	2207      	movs	r2, #7
 800b238:	0019      	movs	r1, r3
 800b23a:	2038      	movs	r0, #56	@ 0x38
 800b23c:	f7ff fdae 	bl	800ad9c <ReadDirRegister>
 800b240:	0003      	movs	r3, r0
 800b242:	7023      	strb	r3, [r4, #0]
  HAL_Delay(10);
 800b244:	200a      	movs	r0, #10
 800b246:	f009 fb7b 	bl	8014940 <HAL_Delay>
//  Debug("response of AHT20 [0]= 0x%02x [1]=0x%02x  [2]=0x%02x  [3]=0x%02x  [4]=0x%02x  [5]=0x%02x, CRC-8[6]=0x%02x",
//      airtemphumraw[0], airtemphumraw[1], airtemphumraw[2], airtemphumraw[3], airtemphumraw[4], airtemphumraw[5], airtemphumraw[6]);
  AHT20TimeStamp = HAL_GetTick() + 100;
 800b24a:	f009 fb6f 	bl	801492c <HAL_GetTick>
 800b24e:	0003      	movs	r3, r0
 800b250:	3364      	adds	r3, #100	@ 0x64
 800b252:	001a      	movs	r2, r3
 800b254:	4b03      	ldr	r3, [pc, #12]	@ (800b264 <AHT20_GetMeasurementValues+0xb8>)
 800b256:	601a      	str	r2, [r3, #0]
  return response;
 800b258:	1dbb      	adds	r3, r7, #6
 800b25a:	781b      	ldrb	r3, [r3, #0]
}
 800b25c:	0018      	movs	r0, r3
 800b25e:	46bd      	mov	sp, r7
 800b260:	b003      	add	sp, #12
 800b262:	bd90      	pop	{r4, r7, pc}
 800b264:	20000ee0 	.word	0x20000ee0
 800b268:	0802c11c 	.word	0x0802c11c
 800b26c:	0802c0d4 	.word	0x0802c0d4
 800b270:	20000ef4 	.word	0x20000ef4

0800b274 <AHT20_Calculate>:


bool AHT20_Calculate(float *airtemp, float *airhum) {
 800b274:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b276:	46c6      	mov	lr, r8
 800b278:	b500      	push	{lr}
 800b27a:	b08a      	sub	sp, #40	@ 0x28
 800b27c:	af06      	add	r7, sp, #24
 800b27e:	6078      	str	r0, [r7, #4]
 800b280:	6039      	str	r1, [r7, #0]
  uint32_t temperature;
  uint32_t humidity;
//  Debug("AHT20 entering AHT20_Calculate");
  if ((airtemphumraw[6] != CalculateCRC(airtemphumraw, 6)) && (airtemphumraw[6] != 0xFF)) {
 800b282:	4b5a      	ldr	r3, [pc, #360]	@ (800b3ec <AHT20_Calculate+0x178>)
 800b284:	799c      	ldrb	r4, [r3, #6]
 800b286:	4b59      	ldr	r3, [pc, #356]	@ (800b3ec <AHT20_Calculate+0x178>)
 800b288:	2106      	movs	r1, #6
 800b28a:	0018      	movs	r0, r3
 800b28c:	f7ff fdec 	bl	800ae68 <CalculateCRC>
 800b290:	0003      	movs	r3, r0
 800b292:	429c      	cmp	r4, r3
 800b294:	d044      	beq.n	800b320 <AHT20_Calculate+0xac>
 800b296:	4b55      	ldr	r3, [pc, #340]	@ (800b3ec <AHT20_Calculate+0x178>)
 800b298:	799b      	ldrb	r3, [r3, #6]
 800b29a:	2bff      	cmp	r3, #255	@ 0xff
 800b29c:	d040      	beq.n	800b320 <AHT20_Calculate+0xac>
    Debug("AHT20 Packet when calculated after CRC [0]= 0x%02x [1]=0x%02x  [2]=0x%02x  [3]=0x%02x  [4]=0x%02x  [5]=0x%02x, CRC-8[6]=0x%02x",
 800b29e:	4b53      	ldr	r3, [pc, #332]	@ (800b3ec <AHT20_Calculate+0x178>)
 800b2a0:	781b      	ldrb	r3, [r3, #0]
 800b2a2:	4698      	mov	r8, r3
 800b2a4:	4b51      	ldr	r3, [pc, #324]	@ (800b3ec <AHT20_Calculate+0x178>)
 800b2a6:	785b      	ldrb	r3, [r3, #1]
 800b2a8:	0018      	movs	r0, r3
 800b2aa:	4b50      	ldr	r3, [pc, #320]	@ (800b3ec <AHT20_Calculate+0x178>)
 800b2ac:	789b      	ldrb	r3, [r3, #2]
 800b2ae:	001c      	movs	r4, r3
 800b2b0:	4b4e      	ldr	r3, [pc, #312]	@ (800b3ec <AHT20_Calculate+0x178>)
 800b2b2:	78db      	ldrb	r3, [r3, #3]
 800b2b4:	001d      	movs	r5, r3
 800b2b6:	4b4d      	ldr	r3, [pc, #308]	@ (800b3ec <AHT20_Calculate+0x178>)
 800b2b8:	791b      	ldrb	r3, [r3, #4]
 800b2ba:	001e      	movs	r6, r3
 800b2bc:	4b4b      	ldr	r3, [pc, #300]	@ (800b3ec <AHT20_Calculate+0x178>)
 800b2be:	795b      	ldrb	r3, [r3, #5]
 800b2c0:	469c      	mov	ip, r3
 800b2c2:	4b4a      	ldr	r3, [pc, #296]	@ (800b3ec <AHT20_Calculate+0x178>)
 800b2c4:	799b      	ldrb	r3, [r3, #6]
 800b2c6:	4a4a      	ldr	r2, [pc, #296]	@ (800b3f0 <AHT20_Calculate+0x17c>)
 800b2c8:	494a      	ldr	r1, [pc, #296]	@ (800b3f4 <AHT20_Calculate+0x180>)
 800b2ca:	9305      	str	r3, [sp, #20]
 800b2cc:	4663      	mov	r3, ip
 800b2ce:	9304      	str	r3, [sp, #16]
 800b2d0:	9603      	str	r6, [sp, #12]
 800b2d2:	9502      	str	r5, [sp, #8]
 800b2d4:	9401      	str	r4, [sp, #4]
 800b2d6:	9000      	str	r0, [sp, #0]
 800b2d8:	4643      	mov	r3, r8
 800b2da:	2003      	movs	r0, #3
 800b2dc:	f008 fdae 	bl	8013e3c <CreateLine>
        airtemphumraw[0], airtemphumraw[1], airtemphumraw[2], airtemphumraw[3], airtemphumraw[4], airtemphumraw[5], airtemphumraw[6]);
    Error("CRC8 = 0x%02X, calculated CRC8 = 0x%02X", airtemphumraw[6], CalculateCRC(airtemphumraw, 6));
 800b2e0:	4b42      	ldr	r3, [pc, #264]	@ (800b3ec <AHT20_Calculate+0x178>)
 800b2e2:	799b      	ldrb	r3, [r3, #6]
 800b2e4:	001c      	movs	r4, r3
 800b2e6:	4b41      	ldr	r3, [pc, #260]	@ (800b3ec <AHT20_Calculate+0x178>)
 800b2e8:	2106      	movs	r1, #6
 800b2ea:	0018      	movs	r0, r3
 800b2ec:	f7ff fdbc 	bl	800ae68 <CalculateCRC>
 800b2f0:	0003      	movs	r3, r0
 800b2f2:	4a41      	ldr	r2, [pc, #260]	@ (800b3f8 <AHT20_Calculate+0x184>)
 800b2f4:	4941      	ldr	r1, [pc, #260]	@ (800b3fc <AHT20_Calculate+0x188>)
 800b2f6:	9300      	str	r3, [sp, #0]
 800b2f8:	0023      	movs	r3, r4
 800b2fa:	2001      	movs	r0, #1
 800b2fc:	f008 fd9e 	bl	8013e3c <CreateLine>
    *airtemp = 0.0;
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	2200      	movs	r2, #0
 800b304:	601a      	str	r2, [r3, #0]
    *airhum = 0.0;
 800b306:	683b      	ldr	r3, [r7, #0]
 800b308:	2200      	movs	r2, #0
 800b30a:	601a      	str	r2, [r3, #0]
    AHT20TimeStamp = HAL_GetTick() + 2000;
 800b30c:	f009 fb0e 	bl	801492c <HAL_GetTick>
 800b310:	0003      	movs	r3, r0
 800b312:	22fa      	movs	r2, #250	@ 0xfa
 800b314:	00d2      	lsls	r2, r2, #3
 800b316:	189a      	adds	r2, r3, r2
 800b318:	4b39      	ldr	r3, [pc, #228]	@ (800b400 <AHT20_Calculate+0x18c>)
 800b31a:	601a      	str	r2, [r3, #0]
    return false;
 800b31c:	2300      	movs	r3, #0
 800b31e:	e05f      	b.n	800b3e0 <AHT20_Calculate+0x16c>
  }
  AHTerrors = 0; // reset error counter
 800b320:	4b38      	ldr	r3, [pc, #224]	@ (800b404 <AHT20_Calculate+0x190>)
 800b322:	2200      	movs	r2, #0
 800b324:	701a      	strb	r2, [r3, #0]

  temperature = ((airtemphumraw[3] & 0x0f) << 16) + (airtemphumraw[4] << 8) + (airtemphumraw[5]);
 800b326:	4b31      	ldr	r3, [pc, #196]	@ (800b3ec <AHT20_Calculate+0x178>)
 800b328:	78db      	ldrb	r3, [r3, #3]
 800b32a:	041a      	lsls	r2, r3, #16
 800b32c:	23f0      	movs	r3, #240	@ 0xf0
 800b32e:	031b      	lsls	r3, r3, #12
 800b330:	401a      	ands	r2, r3
 800b332:	4b2e      	ldr	r3, [pc, #184]	@ (800b3ec <AHT20_Calculate+0x178>)
 800b334:	791b      	ldrb	r3, [r3, #4]
 800b336:	021b      	lsls	r3, r3, #8
 800b338:	18d3      	adds	r3, r2, r3
 800b33a:	4a2c      	ldr	r2, [pc, #176]	@ (800b3ec <AHT20_Calculate+0x178>)
 800b33c:	7952      	ldrb	r2, [r2, #5]
 800b33e:	189b      	adds	r3, r3, r2
 800b340:	60fb      	str	r3, [r7, #12]
  *airtemp = (((float)temperature / 1048576) * 200) - 50;
 800b342:	68f8      	ldr	r0, [r7, #12]
 800b344:	f7f6 fac0 	bl	80018c8 <__aeabi_ui2f>
 800b348:	1c03      	adds	r3, r0, #0
 800b34a:	2193      	movs	r1, #147	@ 0x93
 800b34c:	05c9      	lsls	r1, r1, #23
 800b34e:	1c18      	adds	r0, r3, #0
 800b350:	f7f5 fca8 	bl	8000ca4 <__aeabi_fdiv>
 800b354:	1c03      	adds	r3, r0, #0
 800b356:	492c      	ldr	r1, [pc, #176]	@ (800b408 <AHT20_Calculate+0x194>)
 800b358:	1c18      	adds	r0, r3, #0
 800b35a:	f7f5 fe71 	bl	8001040 <__aeabi_fmul>
 800b35e:	1c03      	adds	r3, r0, #0
 800b360:	492a      	ldr	r1, [pc, #168]	@ (800b40c <AHT20_Calculate+0x198>)
 800b362:	1c18      	adds	r0, r3, #0
 800b364:	f7f5 ffc6 	bl	80012f4 <__aeabi_fsub>
 800b368:	1c03      	adds	r3, r0, #0
 800b36a:	1c1a      	adds	r2, r3, #0
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	601a      	str	r2, [r3, #0]
  humidity = (airtemphumraw[1] << 12) + (airtemphumraw[2] << 4) + (airtemphumraw[3]>>4);
 800b370:	4b1e      	ldr	r3, [pc, #120]	@ (800b3ec <AHT20_Calculate+0x178>)
 800b372:	785b      	ldrb	r3, [r3, #1]
 800b374:	031a      	lsls	r2, r3, #12
 800b376:	4b1d      	ldr	r3, [pc, #116]	@ (800b3ec <AHT20_Calculate+0x178>)
 800b378:	789b      	ldrb	r3, [r3, #2]
 800b37a:	011b      	lsls	r3, r3, #4
 800b37c:	18d3      	adds	r3, r2, r3
 800b37e:	4a1b      	ldr	r2, [pc, #108]	@ (800b3ec <AHT20_Calculate+0x178>)
 800b380:	78d2      	ldrb	r2, [r2, #3]
 800b382:	0912      	lsrs	r2, r2, #4
 800b384:	b2d2      	uxtb	r2, r2
 800b386:	189b      	adds	r3, r3, r2
 800b388:	60bb      	str	r3, [r7, #8]
  *airhum = ((float)humidity / 1048576) * 100;
 800b38a:	68b8      	ldr	r0, [r7, #8]
 800b38c:	f7f6 fa9c 	bl	80018c8 <__aeabi_ui2f>
 800b390:	1c03      	adds	r3, r0, #0
 800b392:	2193      	movs	r1, #147	@ 0x93
 800b394:	05c9      	lsls	r1, r1, #23
 800b396:	1c18      	adds	r0, r3, #0
 800b398:	f7f5 fc84 	bl	8000ca4 <__aeabi_fdiv>
 800b39c:	1c03      	adds	r3, r0, #0
 800b39e:	491c      	ldr	r1, [pc, #112]	@ (800b410 <AHT20_Calculate+0x19c>)
 800b3a0:	1c18      	adds	r0, r3, #0
 800b3a2:	f7f5 fe4d 	bl	8001040 <__aeabi_fmul>
 800b3a6:	1c03      	adds	r3, r0, #0
 800b3a8:	1c1a      	adds	r2, r3, #0
 800b3aa:	683b      	ldr	r3, [r7, #0]
 800b3ac:	601a      	str	r2, [r3, #0]
  Info("AHT20 air humidity = %2.2f%%, temperature = %2.2fC", *airhum, *airtemp);
 800b3ae:	683b      	ldr	r3, [r7, #0]
 800b3b0:	681b      	ldr	r3, [r3, #0]
 800b3b2:	1c18      	adds	r0, r3, #0
 800b3b4:	f7f8 fa6e 	bl	8003894 <__aeabi_f2d>
 800b3b8:	0004      	movs	r4, r0
 800b3ba:	000d      	movs	r5, r1
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	681b      	ldr	r3, [r3, #0]
 800b3c0:	1c18      	adds	r0, r3, #0
 800b3c2:	f7f8 fa67 	bl	8003894 <__aeabi_f2d>
 800b3c6:	0002      	movs	r2, r0
 800b3c8:	000b      	movs	r3, r1
 800b3ca:	4812      	ldr	r0, [pc, #72]	@ (800b414 <AHT20_Calculate+0x1a0>)
 800b3cc:	4912      	ldr	r1, [pc, #72]	@ (800b418 <AHT20_Calculate+0x1a4>)
 800b3ce:	9202      	str	r2, [sp, #8]
 800b3d0:	9303      	str	r3, [sp, #12]
 800b3d2:	9400      	str	r4, [sp, #0]
 800b3d4:	9501      	str	r5, [sp, #4]
 800b3d6:	0002      	movs	r2, r0
 800b3d8:	2002      	movs	r0, #2
 800b3da:	f008 fd2f 	bl	8013e3c <CreateLine>
  return true;
 800b3de:	2301      	movs	r3, #1
}
 800b3e0:	0018      	movs	r0, r3
 800b3e2:	46bd      	mov	sp, r7
 800b3e4:	b004      	add	sp, #16
 800b3e6:	bc80      	pop	{r7}
 800b3e8:	46b8      	mov	r8, r7
 800b3ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b3ec:	20000ef4 	.word	0x20000ef4
 800b3f0:	0802c140 	.word	0x0802c140
 800b3f4:	0802c070 	.word	0x0802c070
 800b3f8:	0802c1c0 	.word	0x0802c1c0
 800b3fc:	0802c0d4 	.word	0x0802c0d4
 800b400:	20000ee0 	.word	0x20000ee0
 800b404:	20000efb 	.word	0x20000efb
 800b408:	43480000 	.word	0x43480000
 800b40c:	42480000 	.word	0x42480000
 800b410:	42c80000 	.word	0x42c80000
 800b414:	0802c1e8 	.word	0x0802c1e8
 800b418:	0802c21c 	.word	0x0802c21c

0800b41c <AHT20_reset>:

bool AHT20_reset(void) {
 800b41c:	b580      	push	{r7, lr}
 800b41e:	af00      	add	r7, sp, #0
  AHT20TimeStamp = HAL_GetTick() + 50;
 800b420:	f009 fa84 	bl	801492c <HAL_GetTick>
 800b424:	0003      	movs	r3, r0
 800b426:	3332      	adds	r3, #50	@ 0x32
 800b428:	001a      	movs	r2, r3
 800b42a:	4b07      	ldr	r3, [pc, #28]	@ (800b448 <AHT20_reset+0x2c>)
 800b42c:	601a      	str	r2, [r3, #0]
  calibrated = false;
 800b42e:	4b07      	ldr	r3, [pc, #28]	@ (800b44c <AHT20_reset+0x30>)
 800b430:	2200      	movs	r2, #0
 800b432:	701a      	strb	r2, [r3, #0]
  return WriteRegister(AHT20_ADDRESS, AHT20_soft_reset, 1);
 800b434:	4b06      	ldr	r3, [pc, #24]	@ (800b450 <AHT20_reset+0x34>)
 800b436:	2201      	movs	r2, #1
 800b438:	0019      	movs	r1, r3
 800b43a:	2038      	movs	r0, #56	@ 0x38
 800b43c:	f7ff fcf2 	bl	800ae24 <WriteRegister>
 800b440:	0003      	movs	r3, r0
}
 800b442:	0018      	movs	r0, r3
 800b444:	46bd      	mov	sp, r7
 800b446:	bd80      	pop	{r7, pc}
 800b448:	20000ee0 	.word	0x20000ee0
 800b44c:	20000ee4 	.word	0x20000ee4
 800b450:	20000090 	.word	0x20000090

0800b454 <AHT_Upkeep>:

AHT20State AHT_Upkeep(void) {
 800b454:	b580      	push	{r7, lr}
 800b456:	b082      	sub	sp, #8
 800b458:	af00      	add	r7, sp, #0
//  static AHT20State AHTState = AHT20_STATE_INIT;
  if(!TimestampIsReached(AHT20TimeStamp)){
 800b45a:	4b61      	ldr	r3, [pc, #388]	@ (800b5e0 <AHT_Upkeep+0x18c>)
 800b45c:	681b      	ldr	r3, [r3, #0]
 800b45e:	0018      	movs	r0, r3
 800b460:	f008 fc96 	bl	8013d90 <TimestampIsReached>
 800b464:	0003      	movs	r3, r0
 800b466:	001a      	movs	r2, r3
 800b468:	2301      	movs	r3, #1
 800b46a:	4053      	eors	r3, r2
 800b46c:	b2db      	uxtb	r3, r3
 800b46e:	2b00      	cmp	r3, #0
 800b470:	d002      	beq.n	800b478 <AHT_Upkeep+0x24>
    return AHTState;
 800b472:	4b5c      	ldr	r3, [pc, #368]	@ (800b5e4 <AHT_Upkeep+0x190>)
 800b474:	781b      	ldrb	r3, [r3, #0]
 800b476:	e0ae      	b.n	800b5d6 <AHT_Upkeep+0x182>
  }
  switch(AHTState) {
 800b478:	4b5a      	ldr	r3, [pc, #360]	@ (800b5e4 <AHT_Upkeep+0x190>)
 800b47a:	781b      	ldrb	r3, [r3, #0]
 800b47c:	2b05      	cmp	r3, #5
 800b47e:	d900      	bls.n	800b482 <AHT_Upkeep+0x2e>
 800b480:	e07d      	b.n	800b57e <AHT_Upkeep+0x12a>
 800b482:	009a      	lsls	r2, r3, #2
 800b484:	4b58      	ldr	r3, [pc, #352]	@ (800b5e8 <AHT_Upkeep+0x194>)
 800b486:	18d3      	adds	r3, r2, r3
 800b488:	681b      	ldr	r3, [r3, #0]
 800b48a:	469f      	mov	pc, r3
  case AHT_STATE_OFF:
    Debug("Measurements are turned off for AHT20.");
 800b48c:	4a57      	ldr	r2, [pc, #348]	@ (800b5ec <AHT_Upkeep+0x198>)
 800b48e:	4b58      	ldr	r3, [pc, #352]	@ (800b5f0 <AHT_Upkeep+0x19c>)
 800b490:	0019      	movs	r1, r3
 800b492:	2003      	movs	r0, #3
 800b494:	f008 fcd2 	bl	8013e3c <CreateLine>
    AHT20TimeStamp = HAL_GetTick() + 900000;  // about every 15 minute
 800b498:	f009 fa48 	bl	801492c <HAL_GetTick>
 800b49c:	0003      	movs	r3, r0
 800b49e:	4a55      	ldr	r2, [pc, #340]	@ (800b5f4 <AHT_Upkeep+0x1a0>)
 800b4a0:	189a      	adds	r2, r3, r2
 800b4a2:	4b4f      	ldr	r3, [pc, #316]	@ (800b5e0 <AHT_Upkeep+0x18c>)
 800b4a4:	601a      	str	r2, [r3, #0]
    if (weekday != offday) {  // try to enable device again
 800b4a6:	4b54      	ldr	r3, [pc, #336]	@ (800b5f8 <AHT_Upkeep+0x1a4>)
 800b4a8:	781a      	ldrb	r2, [r3, #0]
 800b4aa:	4b54      	ldr	r3, [pc, #336]	@ (800b5fc <AHT_Upkeep+0x1a8>)
 800b4ac:	781b      	ldrb	r3, [r3, #0]
 800b4ae:	429a      	cmp	r2, r3
 800b4b0:	d100      	bne.n	800b4b4 <AHT_Upkeep+0x60>
 800b4b2:	e087      	b.n	800b5c4 <AHT_Upkeep+0x170>
      AHTState = AHT_STATE_WAIT;
 800b4b4:	4b4b      	ldr	r3, [pc, #300]	@ (800b5e4 <AHT_Upkeep+0x190>)
 800b4b6:	2205      	movs	r2, #5
 800b4b8:	701a      	strb	r2, [r3, #0]
    }
    break;
 800b4ba:	e083      	b.n	800b5c4 <AHT_Upkeep+0x170>

  case AHT_STATE_START_MEASUREMENTS:
    if (getSensorLock() != FREE) {
 800b4bc:	f002 fca0 	bl	800de00 <getSensorLock>
 800b4c0:	1e03      	subs	r3, r0, #0
 800b4c2:	d000      	beq.n	800b4c6 <AHT_Upkeep+0x72>
 800b4c4:	e080      	b.n	800b5c8 <AHT_Upkeep+0x174>
      break;
    }
    setSensorLock(AHT20);
 800b4c6:	2002      	movs	r0, #2
 800b4c8:	f002 fc86 	bl	800ddd8 <setSensorLock>
    if (!AHT20_StartMeasurement()) {
 800b4cc:	f7ff fe40 	bl	800b150 <AHT20_StartMeasurement>
 800b4d0:	0003      	movs	r3, r0
 800b4d2:	001a      	movs	r2, r3
 800b4d4:	2301      	movs	r3, #1
 800b4d6:	4053      	eors	r3, r2
 800b4d8:	b2db      	uxtb	r3, r3
 800b4da:	2b00      	cmp	r3, #0
 800b4dc:	d00c      	beq.n	800b4f8 <AHT_Upkeep+0xa4>
      AHT20_reset();
 800b4de:	f7ff ff9d 	bl	800b41c <AHT20_reset>
      AHT20TimeStamp = HAL_GetTick() + 200;
 800b4e2:	f009 fa23 	bl	801492c <HAL_GetTick>
 800b4e6:	0003      	movs	r3, r0
 800b4e8:	33c8      	adds	r3, #200	@ 0xc8
 800b4ea:	001a      	movs	r2, r3
 800b4ec:	4b3c      	ldr	r3, [pc, #240]	@ (800b5e0 <AHT_Upkeep+0x18c>)
 800b4ee:	601a      	str	r2, [r3, #0]
      AHTState = AHT20_ERROR;
 800b4f0:	4b3c      	ldr	r3, [pc, #240]	@ (800b5e4 <AHT_Upkeep+0x190>)
 800b4f2:	22ff      	movs	r2, #255	@ 0xff
 800b4f4:	701a      	strb	r2, [r3, #0]
 800b4f6:	e002      	b.n	800b4fe <AHT_Upkeep+0xaa>
    }
    else {
      AHTState = AHT_STATE_WAIT_FOR_COMPLETION;
 800b4f8:	4b3a      	ldr	r3, [pc, #232]	@ (800b5e4 <AHT_Upkeep+0x190>)
 800b4fa:	2202      	movs	r2, #2
 800b4fc:	701a      	strb	r2, [r3, #0]
    }
    HAL_Delay(10); // wait for deferred DMA transfers
 800b4fe:	200a      	movs	r0, #10
 800b500:	f009 fa1e 	bl	8014940 <HAL_Delay>
    break;
 800b504:	e065      	b.n	800b5d2 <AHT_Upkeep+0x17e>

  case AHT_STATE_WAIT_FOR_COMPLETION:
    if(AHT20_GetMeasurementValues()) {
 800b506:	f7ff fe51 	bl	800b1ac <AHT20_GetMeasurementValues>
 800b50a:	1e03      	subs	r3, r0, #0
 800b50c:	d05e      	beq.n	800b5cc <AHT_Upkeep+0x178>
//      Debug("AHT20_GetMeasurementValues success");
      HAL_Delay(10); // wait for deferred DMA transfers
 800b50e:	200a      	movs	r0, #10
 800b510:	f009 fa16 	bl	8014940 <HAL_Delay>
      setSensorLock(FREE);
 800b514:	2000      	movs	r0, #0
 800b516:	f002 fc5f 	bl	800ddd8 <setSensorLock>
      AHTState = AHT_STATE_PROCESS_RESULTS;
 800b51a:	4b32      	ldr	r3, [pc, #200]	@ (800b5e4 <AHT_Upkeep+0x190>)
 800b51c:	2203      	movs	r2, #3
 800b51e:	701a      	strb	r2, [r3, #0]
    }
//    else {
//      AHT20TimeStamp = HAL_GetTick() + 40;
//    }
    break;
 800b520:	e054      	b.n	800b5cc <AHT_Upkeep+0x178>

  case AHT_STATE_PROCESS_RESULTS:
    float airtemp, airhum;
    if (!AHT20_Calculate(&airtemp, &airhum)) {
 800b522:	003a      	movs	r2, r7
 800b524:	1d3b      	adds	r3, r7, #4
 800b526:	0011      	movs	r1, r2
 800b528:	0018      	movs	r0, r3
 800b52a:	f7ff fea3 	bl	800b274 <AHT20_Calculate>
 800b52e:	0003      	movs	r3, r0
 800b530:	001a      	movs	r2, r3
 800b532:	2301      	movs	r3, #1
 800b534:	4053      	eors	r3, r2
 800b536:	b2db      	uxtb	r3, r3
 800b538:	2b00      	cmp	r3, #0
 800b53a:	d005      	beq.n	800b548 <AHT_Upkeep+0xf4>
      AHTState = AHT20_ERROR;
 800b53c:	4b29      	ldr	r3, [pc, #164]	@ (800b5e4 <AHT_Upkeep+0x190>)
 800b53e:	22ff      	movs	r2, #255	@ 0xff
 800b540:	701a      	strb	r2, [r3, #0]
      return AHTState;
 800b542:	4b28      	ldr	r3, [pc, #160]	@ (800b5e4 <AHT_Upkeep+0x190>)
 800b544:	781b      	ldrb	r3, [r3, #0]
 800b546:	e046      	b.n	800b5d6 <AHT_Upkeep+0x182>
    }
    setAHT2x(airtemp, airhum); //store to transmit
 800b548:	687b      	ldr	r3, [r7, #4]
 800b54a:	683a      	ldr	r2, [r7, #0]
 800b54c:	1c11      	adds	r1, r2, #0
 800b54e:	1c18      	adds	r0, r3, #0
 800b550:	f7f9 fac2 	bl	8004ad8 <setAHT2x>
    ENS160_set_envdata(airtemp, airhum); // use the actual values to the gas sensor
 800b554:	687b      	ldr	r3, [r7, #4]
 800b556:	683a      	ldr	r2, [r7, #0]
 800b558:	1c11      	adds	r1, r2, #0
 800b55a:	1c18      	adds	r0, r3, #0
 800b55c:	f7f8 ff48 	bl	80043f0 <ENS160_set_envdata>
    AHTState = AHT_STATE_WAIT;
 800b560:	4b20      	ldr	r3, [pc, #128]	@ (800b5e4 <AHT_Upkeep+0x190>)
 800b562:	2205      	movs	r2, #5
 800b564:	701a      	strb	r2, [r3, #0]
    AHT20TimeStamp = HAL_GetTick() + 60000;  // about every 1 minute
 800b566:	f009 f9e1 	bl	801492c <HAL_GetTick>
 800b56a:	0003      	movs	r3, r0
 800b56c:	4a24      	ldr	r2, [pc, #144]	@ (800b600 <AHT_Upkeep+0x1ac>)
 800b56e:	189a      	adds	r2, r3, r2
 800b570:	4b1b      	ldr	r3, [pc, #108]	@ (800b5e0 <AHT_Upkeep+0x18c>)
 800b572:	601a      	str	r2, [r3, #0]
    break;
 800b574:	e02d      	b.n	800b5d2 <AHT_Upkeep+0x17e>

  case AHT_STATE_WAIT:
//    ResetMeasurementIndicator();
    AHTState = AHT_STATE_START_MEASUREMENTS;
 800b576:	4b1b      	ldr	r3, [pc, #108]	@ (800b5e4 <AHT_Upkeep+0x190>)
 800b578:	2201      	movs	r2, #1
 800b57a:	701a      	strb	r2, [r3, #0]
  break;
 800b57c:	e029      	b.n	800b5d2 <AHT_Upkeep+0x17e>

  default:
    // Handle unexpected state
    AHTState = AHT_STATE_START_MEASUREMENTS;
 800b57e:	4b19      	ldr	r3, [pc, #100]	@ (800b5e4 <AHT_Upkeep+0x190>)
 800b580:	2201      	movs	r2, #1
 800b582:	701a      	strb	r2, [r3, #0]
    if (getSensorLock() == AHT20) {
 800b584:	f002 fc3c 	bl	800de00 <getSensorLock>
 800b588:	0003      	movs	r3, r0
 800b58a:	2b02      	cmp	r3, #2
 800b58c:	d102      	bne.n	800b594 <AHT_Upkeep+0x140>
      setSensorLock(FREE);
 800b58e:	2000      	movs	r0, #0
 800b590:	f002 fc22 	bl	800ddd8 <setSensorLock>
    }
    AHTerrors++;
 800b594:	4b1b      	ldr	r3, [pc, #108]	@ (800b604 <AHT_Upkeep+0x1b0>)
 800b596:	781b      	ldrb	r3, [r3, #0]
 800b598:	3301      	adds	r3, #1
 800b59a:	b2da      	uxtb	r2, r3
 800b59c:	4b19      	ldr	r3, [pc, #100]	@ (800b604 <AHT_Upkeep+0x1b0>)
 800b59e:	701a      	strb	r2, [r3, #0]
    if (AHTerrors > 25) {
 800b5a0:	4b18      	ldr	r3, [pc, #96]	@ (800b604 <AHT_Upkeep+0x1b0>)
 800b5a2:	781b      	ldrb	r3, [r3, #0]
 800b5a4:	2b19      	cmp	r3, #25
 800b5a6:	d913      	bls.n	800b5d0 <AHT_Upkeep+0x17c>
      Error("AHT2x more than 25 consecutive errors detected. Device disabled.");
 800b5a8:	4a17      	ldr	r2, [pc, #92]	@ (800b608 <AHT_Upkeep+0x1b4>)
 800b5aa:	4b18      	ldr	r3, [pc, #96]	@ (800b60c <AHT_Upkeep+0x1b8>)
 800b5ac:	0019      	movs	r1, r3
 800b5ae:	2001      	movs	r0, #1
 800b5b0:	f008 fc44 	bl	8013e3c <CreateLine>
      AHTState = AHT_STATE_OFF;
 800b5b4:	4b0b      	ldr	r3, [pc, #44]	@ (800b5e4 <AHT_Upkeep+0x190>)
 800b5b6:	2200      	movs	r2, #0
 800b5b8:	701a      	strb	r2, [r3, #0]
      offday = weekday;
 800b5ba:	4b0f      	ldr	r3, [pc, #60]	@ (800b5f8 <AHT_Upkeep+0x1a4>)
 800b5bc:	781a      	ldrb	r2, [r3, #0]
 800b5be:	4b0f      	ldr	r3, [pc, #60]	@ (800b5fc <AHT_Upkeep+0x1a8>)
 800b5c0:	701a      	strb	r2, [r3, #0]
    }
    break;
 800b5c2:	e005      	b.n	800b5d0 <AHT_Upkeep+0x17c>
    break;
 800b5c4:	46c0      	nop			@ (mov r8, r8)
 800b5c6:	e004      	b.n	800b5d2 <AHT_Upkeep+0x17e>
      break;
 800b5c8:	46c0      	nop			@ (mov r8, r8)
 800b5ca:	e002      	b.n	800b5d2 <AHT_Upkeep+0x17e>
    break;
 800b5cc:	46c0      	nop			@ (mov r8, r8)
 800b5ce:	e000      	b.n	800b5d2 <AHT_Upkeep+0x17e>
    break;
 800b5d0:	46c0      	nop			@ (mov r8, r8)
  }
  return AHTState;
 800b5d2:	4b04      	ldr	r3, [pc, #16]	@ (800b5e4 <AHT_Upkeep+0x190>)
 800b5d4:	781b      	ldrb	r3, [r3, #0]
}
 800b5d6:	0018      	movs	r0, r3
 800b5d8:	46bd      	mov	sp, r7
 800b5da:	b002      	add	sp, #8
 800b5dc:	bd80      	pop	{r7, pc}
 800b5de:	46c0      	nop			@ (mov r8, r8)
 800b5e0:	20000ee0 	.word	0x20000ee0
 800b5e4:	2000009f 	.word	0x2000009f
 800b5e8:	0802e280 	.word	0x0802e280
 800b5ec:	0802c220 	.word	0x0802c220
 800b5f0:	0802c070 	.word	0x0802c070
 800b5f4:	000dbba0 	.word	0x000dbba0
 800b5f8:	20000e43 	.word	0x20000e43
 800b5fc:	20000efc 	.word	0x20000efc
 800b600:	0000ea60 	.word	0x0000ea60
 800b604:	20000efb 	.word	0x20000efb
 800b608:	0802c248 	.word	0x0802c248
 800b60c:	0802c0d4 	.word	0x0802c0d4

0800b610 <WriteMemRegister>:
static bool bmperror = false;
static uint8_t mode = BMP280_FORCED_MODE;
static int32_t raw_temp, raw_mpa;
static uint32_t BMP280TimeStamp;

static bool WriteMemRegister(uint16_t MemAddress, uint16_t MemSize, uint8_t* buffer, uint16_t nrBytes) {
 800b610:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b612:	b087      	sub	sp, #28
 800b614:	af02      	add	r7, sp, #8
 800b616:	0004      	movs	r4, r0
 800b618:	0008      	movs	r0, r1
 800b61a:	60ba      	str	r2, [r7, #8]
 800b61c:	0019      	movs	r1, r3
 800b61e:	260e      	movs	r6, #14
 800b620:	19bb      	adds	r3, r7, r6
 800b622:	1c22      	adds	r2, r4, #0
 800b624:	801a      	strh	r2, [r3, #0]
 800b626:	230c      	movs	r3, #12
 800b628:	18fb      	adds	r3, r7, r3
 800b62a:	1c02      	adds	r2, r0, #0
 800b62c:	801a      	strh	r2, [r3, #0]
 800b62e:	1dbb      	adds	r3, r7, #6
 800b630:	1c0a      	adds	r2, r1, #0
 800b632:	801a      	strh	r2, [r3, #0]
  if (WriteMemFunction != NULL) {
 800b634:	4b0c      	ldr	r3, [pc, #48]	@ (800b668 <WriteMemRegister+0x58>)
 800b636:	681b      	ldr	r3, [r3, #0]
 800b638:	2b00      	cmp	r3, #0
 800b63a:	d010      	beq.n	800b65e <WriteMemRegister+0x4e>
    return WriteMemFunction(bmp280I2Caddr, MemAddress, MemSize, buffer, nrBytes);
 800b63c:	4b0a      	ldr	r3, [pc, #40]	@ (800b668 <WriteMemRegister+0x58>)
 800b63e:	681c      	ldr	r4, [r3, #0]
 800b640:	4b0a      	ldr	r3, [pc, #40]	@ (800b66c <WriteMemRegister+0x5c>)
 800b642:	7818      	ldrb	r0, [r3, #0]
 800b644:	68bd      	ldr	r5, [r7, #8]
 800b646:	230c      	movs	r3, #12
 800b648:	18fb      	adds	r3, r7, r3
 800b64a:	881a      	ldrh	r2, [r3, #0]
 800b64c:	19bb      	adds	r3, r7, r6
 800b64e:	8819      	ldrh	r1, [r3, #0]
 800b650:	1dbb      	adds	r3, r7, #6
 800b652:	881b      	ldrh	r3, [r3, #0]
 800b654:	9300      	str	r3, [sp, #0]
 800b656:	002b      	movs	r3, r5
 800b658:	47a0      	blx	r4
 800b65a:	0003      	movs	r3, r0
 800b65c:	e000      	b.n	800b660 <WriteMemRegister+0x50>
  }
  return false;
 800b65e:	2300      	movs	r3, #0
}
 800b660:	0018      	movs	r0, r3
 800b662:	46bd      	mov	sp, r7
 800b664:	b005      	add	sp, #20
 800b666:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b668:	20000f00 	.word	0x20000f00
 800b66c:	200000a0 	.word	0x200000a0

0800b670 <ReadMemRegister>:

static bool ReadMemRegister(uint16_t MemAddress, uint16_t MemSize, uint8_t* buffer, uint16_t nrBytes) {
 800b670:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b672:	b087      	sub	sp, #28
 800b674:	af02      	add	r7, sp, #8
 800b676:	0004      	movs	r4, r0
 800b678:	0008      	movs	r0, r1
 800b67a:	60ba      	str	r2, [r7, #8]
 800b67c:	0019      	movs	r1, r3
 800b67e:	260e      	movs	r6, #14
 800b680:	19bb      	adds	r3, r7, r6
 800b682:	1c22      	adds	r2, r4, #0
 800b684:	801a      	strh	r2, [r3, #0]
 800b686:	230c      	movs	r3, #12
 800b688:	18fb      	adds	r3, r7, r3
 800b68a:	1c02      	adds	r2, r0, #0
 800b68c:	801a      	strh	r2, [r3, #0]
 800b68e:	1dbb      	adds	r3, r7, #6
 800b690:	1c0a      	adds	r2, r1, #0
 800b692:	801a      	strh	r2, [r3, #0]
  if (ReadMemFunction != NULL) {
 800b694:	4b0c      	ldr	r3, [pc, #48]	@ (800b6c8 <ReadMemRegister+0x58>)
 800b696:	681b      	ldr	r3, [r3, #0]
 800b698:	2b00      	cmp	r3, #0
 800b69a:	d010      	beq.n	800b6be <ReadMemRegister+0x4e>
    return ReadMemFunction(bmp280I2Caddr, MemAddress, MemSize, buffer, nrBytes);
 800b69c:	4b0a      	ldr	r3, [pc, #40]	@ (800b6c8 <ReadMemRegister+0x58>)
 800b69e:	681c      	ldr	r4, [r3, #0]
 800b6a0:	4b0a      	ldr	r3, [pc, #40]	@ (800b6cc <ReadMemRegister+0x5c>)
 800b6a2:	7818      	ldrb	r0, [r3, #0]
 800b6a4:	68bd      	ldr	r5, [r7, #8]
 800b6a6:	230c      	movs	r3, #12
 800b6a8:	18fb      	adds	r3, r7, r3
 800b6aa:	881a      	ldrh	r2, [r3, #0]
 800b6ac:	19bb      	adds	r3, r7, r6
 800b6ae:	8819      	ldrh	r1, [r3, #0]
 800b6b0:	1dbb      	adds	r3, r7, #6
 800b6b2:	881b      	ldrh	r3, [r3, #0]
 800b6b4:	9300      	str	r3, [sp, #0]
 800b6b6:	002b      	movs	r3, r5
 800b6b8:	47a0      	blx	r4
 800b6ba:	0003      	movs	r3, r0
 800b6bc:	e000      	b.n	800b6c0 <ReadMemRegister+0x50>
  }
  return false;
 800b6be:	2300      	movs	r3, #0
}
 800b6c0:	0018      	movs	r0, r3
 800b6c2:	46bd      	mov	sp, r7
 800b6c4:	b005      	add	sp, #20
 800b6c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b6c8:	20000f04 	.word	0x20000f04
 800b6cc:	200000a0 	.word	0x200000a0

0800b6d0 <setBMP280TimeStamp>:

void setBMP280TimeStamp(uint32_t ticks) {
 800b6d0:	b580      	push	{r7, lr}
 800b6d2:	b082      	sub	sp, #8
 800b6d4:	af00      	add	r7, sp, #0
 800b6d6:	6078      	str	r0, [r7, #4]
  BMP280TimeStamp = HAL_GetTick() + ticks;
 800b6d8:	f009 f928 	bl	801492c <HAL_GetTick>
 800b6dc:	0002      	movs	r2, r0
 800b6de:	687b      	ldr	r3, [r7, #4]
 800b6e0:	18d2      	adds	r2, r2, r3
 800b6e2:	4b03      	ldr	r3, [pc, #12]	@ (800b6f0 <setBMP280TimeStamp+0x20>)
 800b6e4:	601a      	str	r2, [r3, #0]
}
 800b6e6:	46c0      	nop			@ (mov r8, r8)
 800b6e8:	46bd      	mov	sp, r7
 800b6ea:	b002      	add	sp, #8
 800b6ec:	bd80      	pop	{r7, pc}
 800b6ee:	46c0      	nop			@ (mov r8, r8)
 800b6f0:	20000f24 	.word	0x20000f24

0800b6f4 <BMP_Init>:

void BMP_Init(I2CReadMEM readMemFunction, I2CWriteMEM writeMemFunction) {
 800b6f4:	b580      	push	{r7, lr}
 800b6f6:	b082      	sub	sp, #8
 800b6f8:	af00      	add	r7, sp, #0
 800b6fa:	6078      	str	r0, [r7, #4]
 800b6fc:	6039      	str	r1, [r7, #0]
  ReadMemFunction = readMemFunction;
 800b6fe:	4b05      	ldr	r3, [pc, #20]	@ (800b714 <BMP_Init+0x20>)
 800b700:	687a      	ldr	r2, [r7, #4]
 800b702:	601a      	str	r2, [r3, #0]
  WriteMemFunction = writeMemFunction;
 800b704:	4b04      	ldr	r3, [pc, #16]	@ (800b718 <BMP_Init+0x24>)
 800b706:	683a      	ldr	r2, [r7, #0]
 800b708:	601a      	str	r2, [r3, #0]
}
 800b70a:	46c0      	nop			@ (mov r8, r8)
 800b70c:	46bd      	mov	sp, r7
 800b70e:	b002      	add	sp, #8
 800b710:	bd80      	pop	{r7, pc}
 800b712:	46c0      	nop			@ (mov r8, r8)
 800b714:	20000f04 	.word	0x20000f04
 800b718:	20000f00 	.word	0x20000f00

0800b71c <BMP280_reset>:

static void BMP280_reset() {
 800b71c:	b580      	push	{r7, lr}
 800b71e:	b082      	sub	sp, #8
 800b720:	af00      	add	r7, sp, #0
  uint8_t data = BMP280_RESET_VALUE;
 800b722:	1dfb      	adds	r3, r7, #7
 800b724:	22b6      	movs	r2, #182	@ 0xb6
 800b726:	701a      	strb	r2, [r3, #0]
  bmperror = false;
 800b728:	4b0a      	ldr	r3, [pc, #40]	@ (800b754 <BMP280_reset+0x38>)
 800b72a:	2200      	movs	r2, #0
 800b72c:	701a      	strb	r2, [r3, #0]
  WriteMemRegister(BMP280_REG_RESET, 1, &data, 1);
 800b72e:	1dfa      	adds	r2, r7, #7
 800b730:	2301      	movs	r3, #1
 800b732:	2101      	movs	r1, #1
 800b734:	20e0      	movs	r0, #224	@ 0xe0
 800b736:	f7ff ff6b 	bl	800b610 <WriteMemRegister>
  Info("BMP280 has been reset");
 800b73a:	4a07      	ldr	r2, [pc, #28]	@ (800b758 <BMP280_reset+0x3c>)
 800b73c:	4b07      	ldr	r3, [pc, #28]	@ (800b75c <BMP280_reset+0x40>)
 800b73e:	0019      	movs	r1, r3
 800b740:	2002      	movs	r0, #2
 800b742:	f008 fb7b 	bl	8013e3c <CreateLine>
  HAL_Delay(100);
 800b746:	2064      	movs	r0, #100	@ 0x64
 800b748:	f009 f8fa 	bl	8014940 <HAL_Delay>
}
 800b74c:	46c0      	nop			@ (mov r8, r8)
 800b74e:	46bd      	mov	sp, r7
 800b750:	b002      	add	sp, #8
 800b752:	bd80      	pop	{r7, pc}
 800b754:	20000f2a 	.word	0x20000f2a
 800b758:	0802c28c 	.word	0x0802c28c
 800b75c:	0802c2a4 	.word	0x0802c2a4

0800b760 <BMP280_get_calibration>:

static void BMP280_get_calibration() {
 800b760:	b590      	push	{r4, r7, lr}
 800b762:	b085      	sub	sp, #20
 800b764:	af02      	add	r7, sp, #8
  ReadMemRegister(BMP280_REG_TEMP_PRESS_CALIB_DATA, 1, (uint8_t *)&dig, sizeof(dig));
 800b766:	4a30      	ldr	r2, [pc, #192]	@ (800b828 <BMP280_get_calibration+0xc8>)
 800b768:	2318      	movs	r3, #24
 800b76a:	2101      	movs	r1, #1
 800b76c:	2088      	movs	r0, #136	@ 0x88
 800b76e:	f7ff ff7f 	bl	800b670 <ReadMemRegister>
  Debug("BMP280 calibration data:");
 800b772:	4a2e      	ldr	r2, [pc, #184]	@ (800b82c <BMP280_get_calibration+0xcc>)
 800b774:	4b2e      	ldr	r3, [pc, #184]	@ (800b830 <BMP280_get_calibration+0xd0>)
 800b776:	0019      	movs	r1, r3
 800b778:	2003      	movs	r0, #3
 800b77a:	f008 fb5f 	bl	8013e3c <CreateLine>
  char stc = 'T';
 800b77e:	1dfb      	adds	r3, r7, #7
 800b780:	2254      	movs	r2, #84	@ 0x54
 800b782:	701a      	strb	r2, [r3, #0]
  uint8_t idx = 1;
 800b784:	1dbb      	adds	r3, r7, #6
 800b786:	2201      	movs	r2, #1
 800b788:	701a      	strb	r2, [r3, #0]
  for (uint8_t x = 0; x <= 11; x++) {
 800b78a:	1d7b      	adds	r3, r7, #5
 800b78c:	2200      	movs	r2, #0
 800b78e:	701a      	strb	r2, [r3, #0]
 800b790:	e041      	b.n	800b816 <BMP280_get_calibration+0xb6>
    if ((x == 0) || (x == 3)) {
 800b792:	1d7b      	adds	r3, r7, #5
 800b794:	781b      	ldrb	r3, [r3, #0]
 800b796:	2b00      	cmp	r3, #0
 800b798:	d003      	beq.n	800b7a2 <BMP280_get_calibration+0x42>
 800b79a:	1d7b      	adds	r3, r7, #5
 800b79c:	781b      	ldrb	r3, [r3, #0]
 800b79e:	2b03      	cmp	r3, #3
 800b7a0:	d11d      	bne.n	800b7de <BMP280_get_calibration+0x7e>
      if (x==3) {
 800b7a2:	1d7b      	adds	r3, r7, #5
 800b7a4:	781b      	ldrb	r3, [r3, #0]
 800b7a6:	2b03      	cmp	r3, #3
 800b7a8:	d105      	bne.n	800b7b6 <BMP280_get_calibration+0x56>
        idx = 1;
 800b7aa:	1dbb      	adds	r3, r7, #6
 800b7ac:	2201      	movs	r2, #1
 800b7ae:	701a      	strb	r2, [r3, #0]
        stc = 'P';
 800b7b0:	1dfb      	adds	r3, r7, #7
 800b7b2:	2250      	movs	r2, #80	@ 0x50
 800b7b4:	701a      	strb	r2, [r3, #0]
      }
      Debug("dig.%c%d: %d", stc, idx, (uint16_t)dig.calarray[x]);
 800b7b6:	1dfb      	adds	r3, r7, #7
 800b7b8:	7818      	ldrb	r0, [r3, #0]
 800b7ba:	1dbb      	adds	r3, r7, #6
 800b7bc:	781b      	ldrb	r3, [r3, #0]
 800b7be:	1d7a      	adds	r2, r7, #5
 800b7c0:	7811      	ldrb	r1, [r2, #0]
 800b7c2:	4a19      	ldr	r2, [pc, #100]	@ (800b828 <BMP280_get_calibration+0xc8>)
 800b7c4:	0049      	lsls	r1, r1, #1
 800b7c6:	5e8a      	ldrsh	r2, [r1, r2]
 800b7c8:	b292      	uxth	r2, r2
 800b7ca:	0014      	movs	r4, r2
 800b7cc:	4a19      	ldr	r2, [pc, #100]	@ (800b834 <BMP280_get_calibration+0xd4>)
 800b7ce:	4918      	ldr	r1, [pc, #96]	@ (800b830 <BMP280_get_calibration+0xd0>)
 800b7d0:	9401      	str	r4, [sp, #4]
 800b7d2:	9300      	str	r3, [sp, #0]
 800b7d4:	0003      	movs	r3, r0
 800b7d6:	2003      	movs	r0, #3
 800b7d8:	f008 fb30 	bl	8013e3c <CreateLine>
 800b7dc:	e011      	b.n	800b802 <BMP280_get_calibration+0xa2>
    }
    else {
    Debug("dig.%c%d: %d", stc, idx, dig.calarray[x]);
 800b7de:	1dfb      	adds	r3, r7, #7
 800b7e0:	7818      	ldrb	r0, [r3, #0]
 800b7e2:	1dbb      	adds	r3, r7, #6
 800b7e4:	781b      	ldrb	r3, [r3, #0]
 800b7e6:	1d7a      	adds	r2, r7, #5
 800b7e8:	7811      	ldrb	r1, [r2, #0]
 800b7ea:	4a0f      	ldr	r2, [pc, #60]	@ (800b828 <BMP280_get_calibration+0xc8>)
 800b7ec:	0049      	lsls	r1, r1, #1
 800b7ee:	5e8a      	ldrsh	r2, [r1, r2]
 800b7f0:	0014      	movs	r4, r2
 800b7f2:	4a10      	ldr	r2, [pc, #64]	@ (800b834 <BMP280_get_calibration+0xd4>)
 800b7f4:	490e      	ldr	r1, [pc, #56]	@ (800b830 <BMP280_get_calibration+0xd0>)
 800b7f6:	9401      	str	r4, [sp, #4]
 800b7f8:	9300      	str	r3, [sp, #0]
 800b7fa:	0003      	movs	r3, r0
 800b7fc:	2003      	movs	r0, #3
 800b7fe:	f008 fb1d 	bl	8013e3c <CreateLine>
    }
    idx++;
 800b802:	1dbb      	adds	r3, r7, #6
 800b804:	781a      	ldrb	r2, [r3, #0]
 800b806:	1dbb      	adds	r3, r7, #6
 800b808:	3201      	adds	r2, #1
 800b80a:	701a      	strb	r2, [r3, #0]
  for (uint8_t x = 0; x <= 11; x++) {
 800b80c:	1d7b      	adds	r3, r7, #5
 800b80e:	781a      	ldrb	r2, [r3, #0]
 800b810:	1d7b      	adds	r3, r7, #5
 800b812:	3201      	adds	r2, #1
 800b814:	701a      	strb	r2, [r3, #0]
 800b816:	1d7b      	adds	r3, r7, #5
 800b818:	781b      	ldrb	r3, [r3, #0]
 800b81a:	2b0b      	cmp	r3, #11
 800b81c:	d9b9      	bls.n	800b792 <BMP280_get_calibration+0x32>
  }
}
 800b81e:	46c0      	nop			@ (mov r8, r8)
 800b820:	46c0      	nop			@ (mov r8, r8)
 800b822:	46bd      	mov	sp, r7
 800b824:	b003      	add	sp, #12
 800b826:	bd90      	pop	{r4, r7, pc}
 800b828:	20000f08 	.word	0x20000f08
 800b82c:	0802c2a8 	.word	0x0802c2a8
 800b830:	0802c2c4 	.word	0x0802c2c4
 800b834:	0802c2c8 	.word	0x0802c2c8

0800b838 <BMP280_set_config>:

void BMP280_set_config() {
 800b838:	b580      	push	{r7, lr}
 800b83a:	b082      	sub	sp, #8
 800b83c:	af00      	add	r7, sp, #0
  uint8_t data = (BMP280_T_SB_500 | BMP280_FILTER_16 | BMP280_SPI_OFF);
 800b83e:	1dfb      	adds	r3, r7, #7
 800b840:	2290      	movs	r2, #144	@ 0x90
 800b842:	701a      	strb	r2, [r3, #0]
  if (!WriteMemRegister(BMP280_REG_CONFIG, 1, &data, 1)) {
 800b844:	1dfa      	adds	r2, r7, #7
 800b846:	2301      	movs	r3, #1
 800b848:	2101      	movs	r1, #1
 800b84a:	20f5      	movs	r0, #245	@ 0xf5
 800b84c:	f7ff fee0 	bl	800b610 <WriteMemRegister>
 800b850:	0003      	movs	r3, r0
 800b852:	001a      	movs	r2, r3
 800b854:	2301      	movs	r3, #1
 800b856:	4053      	eors	r3, r2
 800b858:	b2db      	uxtb	r3, r3
 800b85a:	2b00      	cmp	r3, #0
 800b85c:	d005      	beq.n	800b86a <BMP280_set_config+0x32>
    Error("BMP280 writing to BMP280_REG_CONFIG");
 800b85e:	4a0b      	ldr	r2, [pc, #44]	@ (800b88c <BMP280_set_config+0x54>)
 800b860:	4b0b      	ldr	r3, [pc, #44]	@ (800b890 <BMP280_set_config+0x58>)
 800b862:	0019      	movs	r1, r3
 800b864:	2001      	movs	r0, #1
 800b866:	f008 fae9 	bl	8013e3c <CreateLine>
  }
  ReadMemRegister(BMP280_REG_CONFIG, 1, &data, 1);
 800b86a:	1dfa      	adds	r2, r7, #7
 800b86c:	2301      	movs	r3, #1
 800b86e:	2101      	movs	r1, #1
 800b870:	20f5      	movs	r0, #245	@ 0xf5
 800b872:	f7ff fefd 	bl	800b670 <ReadMemRegister>
  Debug("BMP280_REG_CONFIG: 0x%02X", data);
 800b876:	1dfb      	adds	r3, r7, #7
 800b878:	781b      	ldrb	r3, [r3, #0]
 800b87a:	4a06      	ldr	r2, [pc, #24]	@ (800b894 <BMP280_set_config+0x5c>)
 800b87c:	4906      	ldr	r1, [pc, #24]	@ (800b898 <BMP280_set_config+0x60>)
 800b87e:	2003      	movs	r0, #3
 800b880:	f008 fadc 	bl	8013e3c <CreateLine>
}
 800b884:	46c0      	nop			@ (mov r8, r8)
 800b886:	46bd      	mov	sp, r7
 800b888:	b002      	add	sp, #8
 800b88a:	bd80      	pop	{r7, pc}
 800b88c:	0802c2d8 	.word	0x0802c2d8
 800b890:	0802c2fc 	.word	0x0802c2fc
 800b894:	0802c300 	.word	0x0802c300
 800b898:	0802c2c4 	.word	0x0802c2c4

0800b89c <BMP280_DeviceConnected>:

 bool BMP280_DeviceConnected() {
 800b89c:	b590      	push	{r4, r7, lr}
 800b89e:	b085      	sub	sp, #20
 800b8a0:	af02      	add	r7, sp, #8
   bool rslt = false;
 800b8a2:	1dfb      	adds	r3, r7, #7
 800b8a4:	2200      	movs	r2, #0
 800b8a6:	701a      	strb	r2, [r3, #0]
    uint8_t bmpData;
    // Read the chip-id of bmp280 sensor
    bmp280I2Caddr = BMP280_ADDRESS;
 800b8a8:	4b28      	ldr	r3, [pc, #160]	@ (800b94c <BMP280_DeviceConnected+0xb0>)
 800b8aa:	2276      	movs	r2, #118	@ 0x76
 800b8ac:	701a      	strb	r2, [r3, #0]
    rslt = ReadMemRegister(BMP280_REG_CHIP_ID, 1, &bmpData, 1);
 800b8ae:	1dfc      	adds	r4, r7, #7
 800b8b0:	1dba      	adds	r2, r7, #6
 800b8b2:	2301      	movs	r3, #1
 800b8b4:	2101      	movs	r1, #1
 800b8b6:	20d0      	movs	r0, #208	@ 0xd0
 800b8b8:	f7ff feda 	bl	800b670 <ReadMemRegister>
 800b8bc:	0003      	movs	r3, r0
 800b8be:	7023      	strb	r3, [r4, #0]
    if (bmpData != BMP280_CHIP_ID) {
 800b8c0:	1dbb      	adds	r3, r7, #6
 800b8c2:	781b      	ldrb	r3, [r3, #0]
 800b8c4:	2b58      	cmp	r3, #88	@ 0x58
 800b8c6:	d00e      	beq.n	800b8e6 <BMP280_DeviceConnected+0x4a>
      bmp280I2Caddr++;
 800b8c8:	4b20      	ldr	r3, [pc, #128]	@ (800b94c <BMP280_DeviceConnected+0xb0>)
 800b8ca:	781b      	ldrb	r3, [r3, #0]
 800b8cc:	3301      	adds	r3, #1
 800b8ce:	b2da      	uxtb	r2, r3
 800b8d0:	4b1e      	ldr	r3, [pc, #120]	@ (800b94c <BMP280_DeviceConnected+0xb0>)
 800b8d2:	701a      	strb	r2, [r3, #0]
      rslt = ReadMemRegister(BMP280_REG_CHIP_ID, 1, &bmpData, 1);
 800b8d4:	1dfc      	adds	r4, r7, #7
 800b8d6:	1dba      	adds	r2, r7, #6
 800b8d8:	2301      	movs	r3, #1
 800b8da:	2101      	movs	r1, #1
 800b8dc:	20d0      	movs	r0, #208	@ 0xd0
 800b8de:	f7ff fec7 	bl	800b670 <ReadMemRegister>
 800b8e2:	0003      	movs	r3, r0
 800b8e4:	7023      	strb	r3, [r4, #0]
    }
    if (rslt && (bmpData == BMP280_CHIP_ID)) {
 800b8e6:	1dfb      	adds	r3, r7, #7
 800b8e8:	781b      	ldrb	r3, [r3, #0]
 800b8ea:	2b00      	cmp	r3, #0
 800b8ec:	d01b      	beq.n	800b926 <BMP280_DeviceConnected+0x8a>
 800b8ee:	1dbb      	adds	r3, r7, #6
 800b8f0:	781b      	ldrb	r3, [r3, #0]
 800b8f2:	2b58      	cmp	r3, #88	@ 0x58
 800b8f4:	d117      	bne.n	800b926 <BMP280_DeviceConnected+0x8a>
      Info("BMP280 with chip_id 0x%02X found at I2C address: 0x%02X", bmpData, bmp280I2Caddr);
 800b8f6:	1dbb      	adds	r3, r7, #6
 800b8f8:	781b      	ldrb	r3, [r3, #0]
 800b8fa:	0018      	movs	r0, r3
 800b8fc:	4b13      	ldr	r3, [pc, #76]	@ (800b94c <BMP280_DeviceConnected+0xb0>)
 800b8fe:	781b      	ldrb	r3, [r3, #0]
 800b900:	4a13      	ldr	r2, [pc, #76]	@ (800b950 <BMP280_DeviceConnected+0xb4>)
 800b902:	4914      	ldr	r1, [pc, #80]	@ (800b954 <BMP280_DeviceConnected+0xb8>)
 800b904:	9300      	str	r3, [sp, #0]
 800b906:	0003      	movs	r3, r0
 800b908:	2002      	movs	r0, #2
 800b90a:	f008 fa97 	bl	8013e3c <CreateLine>
      BMP280_reset(); // get an initial state
 800b90e:	f7ff ff05 	bl	800b71c <BMP280_reset>
      HAL_Delay(3);
 800b912:	2003      	movs	r0, #3
 800b914:	f009 f814 	bl	8014940 <HAL_Delay>
      BMP280_get_calibration();
 800b918:	f7ff ff22 	bl	800b760 <BMP280_get_calibration>
      BMP280_set_config();
 800b91c:	f7ff ff8c 	bl	800b838 <BMP280_set_config>
      BMP280_set_mode();
 800b920:	f000 f8f6 	bl	800bb10 <BMP280_set_mode>
 800b924:	e008      	b.n	800b938 <BMP280_DeviceConnected+0x9c>
    }
    else {
      bmp280I2Caddr = 0;
 800b926:	4b09      	ldr	r3, [pc, #36]	@ (800b94c <BMP280_DeviceConnected+0xb0>)
 800b928:	2200      	movs	r2, #0
 800b92a:	701a      	strb	r2, [r3, #0]
      Error("BMP280 not found");
 800b92c:	4a0a      	ldr	r2, [pc, #40]	@ (800b958 <BMP280_DeviceConnected+0xbc>)
 800b92e:	4b0b      	ldr	r3, [pc, #44]	@ (800b95c <BMP280_DeviceConnected+0xc0>)
 800b930:	0019      	movs	r1, r3
 800b932:	2001      	movs	r0, #1
 800b934:	f008 fa82 	bl	8013e3c <CreateLine>
    }
    return bmp280I2Caddr;
 800b938:	4b04      	ldr	r3, [pc, #16]	@ (800b94c <BMP280_DeviceConnected+0xb0>)
 800b93a:	781b      	ldrb	r3, [r3, #0]
 800b93c:	1e5a      	subs	r2, r3, #1
 800b93e:	4193      	sbcs	r3, r2
 800b940:	b2db      	uxtb	r3, r3
}
 800b942:	0018      	movs	r0, r3
 800b944:	46bd      	mov	sp, r7
 800b946:	b003      	add	sp, #12
 800b948:	bd90      	pop	{r4, r7, pc}
 800b94a:	46c0      	nop			@ (mov r8, r8)
 800b94c:	200000a0 	.word	0x200000a0
 800b950:	0802c31c 	.word	0x0802c31c
 800b954:	0802c2a4 	.word	0x0802c2a4
 800b958:	0802c354 	.word	0x0802c354
 800b95c:	0802c2fc 	.word	0x0802c2fc

0800b960 <BMP280_get_measurement_values>:

static bool BMP280_get_measurement_values() {
 800b960:	b5b0      	push	{r4, r5, r7, lr}
 800b962:	b086      	sub	sp, #24
 800b964:	af04      	add	r7, sp, #16
  int8_t rslt = 1;
 800b966:	1dfb      	adds	r3, r7, #7
 800b968:	2201      	movs	r2, #1
 800b96a:	701a      	strb	r2, [r3, #0]
  uint8_t bmpData[6];
  HAL_Delay(9);
 800b96c:	2009      	movs	r0, #9
 800b96e:	f008 ffe7 	bl	8014940 <HAL_Delay>
  BMP280TimeStamp = HAL_GetTick() + 1500;  // time for local loop
 800b972:	f008 ffdb 	bl	801492c <HAL_GetTick>
 800b976:	0003      	movs	r3, r0
 800b978:	4a49      	ldr	r2, [pc, #292]	@ (800baa0 <BMP280_get_measurement_values+0x140>)
 800b97a:	189a      	adds	r2, r3, r2
 800b97c:	4b49      	ldr	r3, [pc, #292]	@ (800baa4 <BMP280_get_measurement_values+0x144>)
 800b97e:	601a      	str	r2, [r3, #0]
  do {
    ReadMemRegister(BMP280_REG_STATUS, 1, &bmpData[0], 1); // store at start address of array
 800b980:	003a      	movs	r2, r7
 800b982:	2301      	movs	r3, #1
 800b984:	2101      	movs	r1, #1
 800b986:	20f3      	movs	r0, #243	@ 0xf3
 800b988:	f7ff fe72 	bl	800b670 <ReadMemRegister>
    if(TimestampIsReached(BMP280TimeStamp)) {
 800b98c:	4b45      	ldr	r3, [pc, #276]	@ (800baa4 <BMP280_get_measurement_values+0x144>)
 800b98e:	681b      	ldr	r3, [r3, #0]
 800b990:	0018      	movs	r0, r3
 800b992:	f008 f9fd 	bl	8013d90 <TimestampIsReached>
 800b996:	1e03      	subs	r3, r0, #0
 800b998:	d007      	beq.n	800b9aa <BMP280_get_measurement_values+0x4a>
      Error("BMP280 timeout while waiting for ready.");
 800b99a:	4a43      	ldr	r2, [pc, #268]	@ (800baa8 <BMP280_get_measurement_values+0x148>)
 800b99c:	4b43      	ldr	r3, [pc, #268]	@ (800baac <BMP280_get_measurement_values+0x14c>)
 800b99e:	0019      	movs	r1, r3
 800b9a0:	2001      	movs	r0, #1
 800b9a2:	f008 fa4b 	bl	8013e3c <CreateLine>
      return false;
 800b9a6:	2300      	movs	r3, #0
 800b9a8:	e076      	b.n	800ba98 <BMP280_get_measurement_values+0x138>
    }
    HAL_Delay(10);
 800b9aa:	200a      	movs	r0, #10
 800b9ac:	f008 ffc8 	bl	8014940 <HAL_Delay>
  } while ((bmpData[0] & (BMP280_NVM_RDY | BMP280_MEAS_RDY)) != 0);
 800b9b0:	003b      	movs	r3, r7
 800b9b2:	781b      	ldrb	r3, [r3, #0]
 800b9b4:	001a      	movs	r2, r3
 800b9b6:	2309      	movs	r3, #9
 800b9b8:	4013      	ands	r3, r2
 800b9ba:	d1e1      	bne.n	800b980 <BMP280_get_measurement_values+0x20>
  //  } while (((bmpData[0] & BMP280_NVM_RDY) == BMP280_NVM_RDY) || ((bmpData[0] & BMP280_MEAS_RDY) == BMP280_MEAS_RDY));
  rslt = ReadMemRegister(BMP280_REG_PRESS_MSB, 1, &bmpData[0], 6);
 800b9bc:	003a      	movs	r2, r7
 800b9be:	2306      	movs	r3, #6
 800b9c0:	2101      	movs	r1, #1
 800b9c2:	20f7      	movs	r0, #247	@ 0xf7
 800b9c4:	f7ff fe54 	bl	800b670 <ReadMemRegister>
 800b9c8:	0003      	movs	r3, r0
 800b9ca:	001a      	movs	r2, r3
 800b9cc:	1dfb      	adds	r3, r7, #7
 800b9ce:	701a      	strb	r2, [r3, #0]
  raw_mpa = (int32_t)((((uint32_t)bmpData[0]) << 12) + (((uint32_t)bmpData[1]) << 4) + (((uint32_t)bmpData[2]) >> 4));
 800b9d0:	003b      	movs	r3, r7
 800b9d2:	781b      	ldrb	r3, [r3, #0]
 800b9d4:	031a      	lsls	r2, r3, #12
 800b9d6:	003b      	movs	r3, r7
 800b9d8:	785b      	ldrb	r3, [r3, #1]
 800b9da:	011b      	lsls	r3, r3, #4
 800b9dc:	18d3      	adds	r3, r2, r3
 800b9de:	003a      	movs	r2, r7
 800b9e0:	7892      	ldrb	r2, [r2, #2]
 800b9e2:	0912      	lsrs	r2, r2, #4
 800b9e4:	b2d2      	uxtb	r2, r2
 800b9e6:	189b      	adds	r3, r3, r2
 800b9e8:	001a      	movs	r2, r3
 800b9ea:	4b31      	ldr	r3, [pc, #196]	@ (800bab0 <BMP280_get_measurement_values+0x150>)
 800b9ec:	601a      	str	r2, [r3, #0]
  if (bmpData[0] == 0x80) {
 800b9ee:	003b      	movs	r3, r7
 800b9f0:	781b      	ldrb	r3, [r3, #0]
 800b9f2:	2b80      	cmp	r3, #128	@ 0x80
 800b9f4:	d11b      	bne.n	800ba2e <BMP280_get_measurement_values+0xce>
    Error("BMP280 Invalid read of barometric pressure.");
 800b9f6:	4a2f      	ldr	r2, [pc, #188]	@ (800bab4 <BMP280_get_measurement_values+0x154>)
 800b9f8:	4b2c      	ldr	r3, [pc, #176]	@ (800baac <BMP280_get_measurement_values+0x14c>)
 800b9fa:	0019      	movs	r1, r3
 800b9fc:	2001      	movs	r0, #1
 800b9fe:	f008 fa1d 	bl	8013e3c <CreateLine>
    Debug("Data[0]: 0x%02X, Data[1]: 0x%02X, Data[2]: 0x%02X, VALUE=0x%06X", bmpData[0], bmpData[1], bmpData[2], raw_mpa);
 800ba02:	003b      	movs	r3, r7
 800ba04:	781b      	ldrb	r3, [r3, #0]
 800ba06:	001d      	movs	r5, r3
 800ba08:	003b      	movs	r3, r7
 800ba0a:	785b      	ldrb	r3, [r3, #1]
 800ba0c:	0018      	movs	r0, r3
 800ba0e:	003b      	movs	r3, r7
 800ba10:	789b      	ldrb	r3, [r3, #2]
 800ba12:	001c      	movs	r4, r3
 800ba14:	4b26      	ldr	r3, [pc, #152]	@ (800bab0 <BMP280_get_measurement_values+0x150>)
 800ba16:	681b      	ldr	r3, [r3, #0]
 800ba18:	4a27      	ldr	r2, [pc, #156]	@ (800bab8 <BMP280_get_measurement_values+0x158>)
 800ba1a:	4928      	ldr	r1, [pc, #160]	@ (800babc <BMP280_get_measurement_values+0x15c>)
 800ba1c:	9302      	str	r3, [sp, #8]
 800ba1e:	9401      	str	r4, [sp, #4]
 800ba20:	9000      	str	r0, [sp, #0]
 800ba22:	002b      	movs	r3, r5
 800ba24:	2003      	movs	r0, #3
 800ba26:	f008 fa09 	bl	8013e3c <CreateLine>
    SetAllBlueLED();
 800ba2a:	f007 f931 	bl	8012c90 <SetAllBlueLED>
  }
  raw_temp = (int32_t)((((uint32_t)bmpData[3]) << 12) + (((uint32_t)bmpData[4]) << 4) + (((uint32_t)bmpData[5]) >> 4));
 800ba2e:	003b      	movs	r3, r7
 800ba30:	78db      	ldrb	r3, [r3, #3]
 800ba32:	031a      	lsls	r2, r3, #12
 800ba34:	003b      	movs	r3, r7
 800ba36:	791b      	ldrb	r3, [r3, #4]
 800ba38:	011b      	lsls	r3, r3, #4
 800ba3a:	18d3      	adds	r3, r2, r3
 800ba3c:	003a      	movs	r2, r7
 800ba3e:	7952      	ldrb	r2, [r2, #5]
 800ba40:	0912      	lsrs	r2, r2, #4
 800ba42:	b2d2      	uxtb	r2, r2
 800ba44:	189b      	adds	r3, r3, r2
 800ba46:	001a      	movs	r2, r3
 800ba48:	4b1d      	ldr	r3, [pc, #116]	@ (800bac0 <BMP280_get_measurement_values+0x160>)
 800ba4a:	601a      	str	r2, [r3, #0]
  if (bmpData[3] == 0x80) {
 800ba4c:	003b      	movs	r3, r7
 800ba4e:	78db      	ldrb	r3, [r3, #3]
 800ba50:	2b80      	cmp	r3, #128	@ 0x80
 800ba52:	d11b      	bne.n	800ba8c <BMP280_get_measurement_values+0x12c>
    Error("BMP280 Invalid read of temperature.");
 800ba54:	4a1b      	ldr	r2, [pc, #108]	@ (800bac4 <BMP280_get_measurement_values+0x164>)
 800ba56:	4b15      	ldr	r3, [pc, #84]	@ (800baac <BMP280_get_measurement_values+0x14c>)
 800ba58:	0019      	movs	r1, r3
 800ba5a:	2001      	movs	r0, #1
 800ba5c:	f008 f9ee 	bl	8013e3c <CreateLine>
    Debug("Data[3]: 0x%02X, Data[4]: 0x%02X, Data[5]: 0x%02X, VALUE=0x%06X", bmpData[3], bmpData[4], bmpData[5], raw_temp);
 800ba60:	003b      	movs	r3, r7
 800ba62:	78db      	ldrb	r3, [r3, #3]
 800ba64:	001d      	movs	r5, r3
 800ba66:	003b      	movs	r3, r7
 800ba68:	791b      	ldrb	r3, [r3, #4]
 800ba6a:	0018      	movs	r0, r3
 800ba6c:	003b      	movs	r3, r7
 800ba6e:	795b      	ldrb	r3, [r3, #5]
 800ba70:	001c      	movs	r4, r3
 800ba72:	4b13      	ldr	r3, [pc, #76]	@ (800bac0 <BMP280_get_measurement_values+0x160>)
 800ba74:	681b      	ldr	r3, [r3, #0]
 800ba76:	4a14      	ldr	r2, [pc, #80]	@ (800bac8 <BMP280_get_measurement_values+0x168>)
 800ba78:	4910      	ldr	r1, [pc, #64]	@ (800babc <BMP280_get_measurement_values+0x15c>)
 800ba7a:	9302      	str	r3, [sp, #8]
 800ba7c:	9401      	str	r4, [sp, #4]
 800ba7e:	9000      	str	r0, [sp, #0]
 800ba80:	002b      	movs	r3, r5
 800ba82:	2003      	movs	r0, #3
 800ba84:	f008 f9da 	bl	8013e3c <CreateLine>
    SetAllBlueLED();
 800ba88:	f007 f902 	bl	8012c90 <SetAllBlueLED>
  }
//  Debug("raw_mpa: %ld, raw_temp: %ld, rslt: %s", raw_mpa, raw_temp, rslt?"success":"fail");
  return rslt;
 800ba8c:	1dfb      	adds	r3, r7, #7
 800ba8e:	781b      	ldrb	r3, [r3, #0]
 800ba90:	b25b      	sxtb	r3, r3
 800ba92:	1e5a      	subs	r2, r3, #1
 800ba94:	4193      	sbcs	r3, r2
 800ba96:	b2db      	uxtb	r3, r3
}
 800ba98:	0018      	movs	r0, r3
 800ba9a:	46bd      	mov	sp, r7
 800ba9c:	b002      	add	sp, #8
 800ba9e:	bdb0      	pop	{r4, r5, r7, pc}
 800baa0:	000005dc 	.word	0x000005dc
 800baa4:	20000f24 	.word	0x20000f24
 800baa8:	0802c368 	.word	0x0802c368
 800baac:	0802c2fc 	.word	0x0802c2fc
 800bab0:	20000f30 	.word	0x20000f30
 800bab4:	0802c390 	.word	0x0802c390
 800bab8:	0802c3bc 	.word	0x0802c3bc
 800babc:	0802c2c4 	.word	0x0802c2c4
 800bac0:	20000f2c 	.word	0x20000f2c
 800bac4:	0802c3fc 	.word	0x0802c3fc
 800bac8:	0802c420 	.word	0x0802c420

0800bacc <BMP280_get_mode>:

static uint8_t BMP280_get_mode() {
 800bacc:	b580      	push	{r7, lr}
 800bace:	b082      	sub	sp, #8
 800bad0:	af00      	add	r7, sp, #0
  int8_t rslt;
  uint8_t bmpData;
  rslt = ReadMemRegister(BMP280_REG_CTRL_MEAS, 1, &bmpData, 1);
 800bad2:	1dba      	adds	r2, r7, #6
 800bad4:	2301      	movs	r3, #1
 800bad6:	2101      	movs	r1, #1
 800bad8:	20f4      	movs	r0, #244	@ 0xf4
 800bada:	f7ff fdc9 	bl	800b670 <ReadMemRegister>
 800bade:	0003      	movs	r3, r0
 800bae0:	001a      	movs	r2, r3
 800bae2:	1dfb      	adds	r3, r7, #7
 800bae4:	701a      	strb	r2, [r3, #0]
  bmpData &= BMP280_NORMAL_MODE; //BMP280_NORMAL_MODE has all mode bits set 0x03;
 800bae6:	1dbb      	adds	r3, r7, #6
 800bae8:	781b      	ldrb	r3, [r3, #0]
 800baea:	2203      	movs	r2, #3
 800baec:	4013      	ands	r3, r2
 800baee:	b2da      	uxtb	r2, r3
 800baf0:	1dbb      	adds	r3, r7, #6
 800baf2:	701a      	strb	r2, [r3, #0]
  if (rslt == 0) {
 800baf4:	1dfb      	adds	r3, r7, #7
 800baf6:	781b      	ldrb	r3, [r3, #0]
 800baf8:	b25b      	sxtb	r3, r3
 800bafa:	2b00      	cmp	r3, #0
 800bafc:	d102      	bne.n	800bb04 <BMP280_get_mode+0x38>
    bmpData = 255;
 800bafe:	1dbb      	adds	r3, r7, #6
 800bb00:	22ff      	movs	r2, #255	@ 0xff
 800bb02:	701a      	strb	r2, [r3, #0]
  }
  return bmpData;
 800bb04:	1dbb      	adds	r3, r7, #6
 800bb06:	781b      	ldrb	r3, [r3, #0]
}
 800bb08:	0018      	movs	r0, r3
 800bb0a:	46bd      	mov	sp, r7
 800bb0c:	b002      	add	sp, #8
 800bb0e:	bd80      	pop	{r7, pc}

0800bb10 <BMP280_set_mode>:

static bool BMP280_set_mode() {
 800bb10:	b580      	push	{r7, lr}
 800bb12:	b082      	sub	sp, #8
 800bb14:	af00      	add	r7, sp, #0
  uint8_t data = (BMP280_OSRS_T_2 | BMP280_OSRS_P_16 | mode);
 800bb16:	4b1a      	ldr	r3, [pc, #104]	@ (800bb80 <BMP280_set_mode+0x70>)
 800bb18:	781b      	ldrb	r3, [r3, #0]
 800bb1a:	2254      	movs	r2, #84	@ 0x54
 800bb1c:	4313      	orrs	r3, r2
 800bb1e:	b2da      	uxtb	r2, r3
 800bb20:	1dfb      	adds	r3, r7, #7
 800bb22:	701a      	strb	r2, [r3, #0]
  WriteMemRegister(BMP280_REG_CTRL_MEAS, 1, &data, 1);
 800bb24:	1dfa      	adds	r2, r7, #7
 800bb26:	2301      	movs	r3, #1
 800bb28:	2101      	movs	r1, #1
 800bb2a:	20f4      	movs	r0, #244	@ 0xf4
 800bb2c:	f7ff fd70 	bl	800b610 <WriteMemRegister>
  HAL_Delay(10);
 800bb30:	200a      	movs	r0, #10
 800bb32:	f008 ff05 	bl	8014940 <HAL_Delay>
  data = BMP280_get_mode();
 800bb36:	f7ff ffc9 	bl	800bacc <BMP280_get_mode>
 800bb3a:	0003      	movs	r3, r0
 800bb3c:	001a      	movs	r2, r3
 800bb3e:	1dfb      	adds	r3, r7, #7
 800bb40:	701a      	strb	r2, [r3, #0]
  data &= BMP280_NORMAL_MODE;
 800bb42:	1dfb      	adds	r3, r7, #7
 800bb44:	781b      	ldrb	r3, [r3, #0]
 800bb46:	2203      	movs	r2, #3
 800bb48:	4013      	ands	r3, r2
 800bb4a:	b2da      	uxtb	r2, r3
 800bb4c:	1dfb      	adds	r3, r7, #7
 800bb4e:	701a      	strb	r2, [r3, #0]
  Debug("BMP280 Operation mode: %s", data==0?"sleep":data==3?"normal":"forced");
 800bb50:	1dfb      	adds	r3, r7, #7
 800bb52:	781b      	ldrb	r3, [r3, #0]
 800bb54:	2b00      	cmp	r3, #0
 800bb56:	d007      	beq.n	800bb68 <BMP280_set_mode+0x58>
 800bb58:	1dfb      	adds	r3, r7, #7
 800bb5a:	781b      	ldrb	r3, [r3, #0]
 800bb5c:	2b03      	cmp	r3, #3
 800bb5e:	d101      	bne.n	800bb64 <BMP280_set_mode+0x54>
 800bb60:	4b08      	ldr	r3, [pc, #32]	@ (800bb84 <BMP280_set_mode+0x74>)
 800bb62:	e002      	b.n	800bb6a <BMP280_set_mode+0x5a>
 800bb64:	4b08      	ldr	r3, [pc, #32]	@ (800bb88 <BMP280_set_mode+0x78>)
 800bb66:	e000      	b.n	800bb6a <BMP280_set_mode+0x5a>
 800bb68:	4b08      	ldr	r3, [pc, #32]	@ (800bb8c <BMP280_set_mode+0x7c>)
 800bb6a:	4a09      	ldr	r2, [pc, #36]	@ (800bb90 <BMP280_set_mode+0x80>)
 800bb6c:	4909      	ldr	r1, [pc, #36]	@ (800bb94 <BMP280_set_mode+0x84>)
 800bb6e:	2003      	movs	r0, #3
 800bb70:	f008 f964 	bl	8013e3c <CreateLine>
  return true;
 800bb74:	2301      	movs	r3, #1
}
 800bb76:	0018      	movs	r0, r3
 800bb78:	46bd      	mov	sp, r7
 800bb7a:	b002      	add	sp, #8
 800bb7c:	bd80      	pop	{r7, pc}
 800bb7e:	46c0      	nop			@ (mov r8, r8)
 800bb80:	200000a1 	.word	0x200000a1
 800bb84:	0802c460 	.word	0x0802c460
 800bb88:	0802c468 	.word	0x0802c468
 800bb8c:	0802c470 	.word	0x0802c470
 800bb90:	0802c478 	.word	0x0802c478
 800bb94:	0802c2c4 	.word	0x0802c2c4

0800bb98 <BMP280_calc_temperature>:


// Returns temperature in DegC, resolution is 0.01 DegC. Output value of “5123” equals 51.23 DegC.
// reads temperature value from internal bmp280 registers in centigrade
// copied from datasheet
static float BMP280_calc_temperature() {
 800bb98:	b580      	push	{r7, lr}
 800bb9a:	b086      	sub	sp, #24
 800bb9c:	af00      	add	r7, sp, #0

  int32_t adc_T = raw_temp;
 800bb9e:	4b1e      	ldr	r3, [pc, #120]	@ (800bc18 <BMP280_calc_temperature+0x80>)
 800bba0:	681b      	ldr	r3, [r3, #0]
 800bba2:	617b      	str	r3, [r7, #20]
  int32_t var1, var2, T;
  float airTemp;

  var1 = ((((adc_T >> 3) - ((int32_t)dig.T1 << 1))) * ((int32_t)dig.T2)) >> 11;
 800bba4:	697b      	ldr	r3, [r7, #20]
 800bba6:	10da      	asrs	r2, r3, #3
 800bba8:	4b1c      	ldr	r3, [pc, #112]	@ (800bc1c <BMP280_calc_temperature+0x84>)
 800bbaa:	881b      	ldrh	r3, [r3, #0]
 800bbac:	005b      	lsls	r3, r3, #1
 800bbae:	1ad3      	subs	r3, r2, r3
 800bbb0:	4a1a      	ldr	r2, [pc, #104]	@ (800bc1c <BMP280_calc_temperature+0x84>)
 800bbb2:	2102      	movs	r1, #2
 800bbb4:	5e52      	ldrsh	r2, [r2, r1]
 800bbb6:	4353      	muls	r3, r2
 800bbb8:	12db      	asrs	r3, r3, #11
 800bbba:	613b      	str	r3, [r7, #16]
  var2 = (((((adc_T >> 4) - ((int32_t)dig.T1)) * ((adc_T >> 4) - ((int32_t)dig.T1))) >> 12) * ((int32_t)dig.T3)) >> 14;
 800bbbc:	697b      	ldr	r3, [r7, #20]
 800bbbe:	111b      	asrs	r3, r3, #4
 800bbc0:	4a16      	ldr	r2, [pc, #88]	@ (800bc1c <BMP280_calc_temperature+0x84>)
 800bbc2:	8812      	ldrh	r2, [r2, #0]
 800bbc4:	1a9b      	subs	r3, r3, r2
 800bbc6:	697a      	ldr	r2, [r7, #20]
 800bbc8:	1112      	asrs	r2, r2, #4
 800bbca:	4914      	ldr	r1, [pc, #80]	@ (800bc1c <BMP280_calc_temperature+0x84>)
 800bbcc:	8809      	ldrh	r1, [r1, #0]
 800bbce:	1a52      	subs	r2, r2, r1
 800bbd0:	4353      	muls	r3, r2
 800bbd2:	131b      	asrs	r3, r3, #12
 800bbd4:	4a11      	ldr	r2, [pc, #68]	@ (800bc1c <BMP280_calc_temperature+0x84>)
 800bbd6:	2104      	movs	r1, #4
 800bbd8:	5e52      	ldrsh	r2, [r2, r1]
 800bbda:	4353      	muls	r3, r2
 800bbdc:	139b      	asrs	r3, r3, #14
 800bbde:	60fb      	str	r3, [r7, #12]

  t_fine = var1 + var2;
 800bbe0:	693a      	ldr	r2, [r7, #16]
 800bbe2:	68fb      	ldr	r3, [r7, #12]
 800bbe4:	18d2      	adds	r2, r2, r3
 800bbe6:	4b0e      	ldr	r3, [pc, #56]	@ (800bc20 <BMP280_calc_temperature+0x88>)
 800bbe8:	601a      	str	r2, [r3, #0]
  T = (t_fine * 5 + 128) >> 8;
 800bbea:	4b0d      	ldr	r3, [pc, #52]	@ (800bc20 <BMP280_calc_temperature+0x88>)
 800bbec:	681a      	ldr	r2, [r3, #0]
 800bbee:	0013      	movs	r3, r2
 800bbf0:	009b      	lsls	r3, r3, #2
 800bbf2:	189b      	adds	r3, r3, r2
 800bbf4:	3380      	adds	r3, #128	@ 0x80
 800bbf6:	121b      	asrs	r3, r3, #8
 800bbf8:	60bb      	str	r3, [r7, #8]
  airTemp = (float)T / 100.0;
 800bbfa:	68b8      	ldr	r0, [r7, #8]
 800bbfc:	f7f5 fe14 	bl	8001828 <__aeabi_i2f>
 800bc00:	1c03      	adds	r3, r0, #0
 800bc02:	4908      	ldr	r1, [pc, #32]	@ (800bc24 <BMP280_calc_temperature+0x8c>)
 800bc04:	1c18      	adds	r0, r3, #0
 800bc06:	f7f5 f84d 	bl	8000ca4 <__aeabi_fdiv>
 800bc0a:	1c03      	adds	r3, r0, #0
 800bc0c:	607b      	str	r3, [r7, #4]
  return airTemp;
 800bc0e:	687b      	ldr	r3, [r7, #4]
}
 800bc10:	1c18      	adds	r0, r3, #0
 800bc12:	46bd      	mov	sp, r7
 800bc14:	b006      	add	sp, #24
 800bc16:	bd80      	pop	{r7, pc}
 800bc18:	20000f2c 	.word	0x20000f2c
 800bc1c:	20000f08 	.word	0x20000f08
 800bc20:	20000f20 	.word	0x20000f20
 800bc24:	42c80000 	.word	0x42c80000

0800bc28 <BMP280_calc_pressure>:


// Returns pressure in Pa as unsigned 32 bit integer in Q24.8 format (24 integer bits and 8 fractional bits).
// reads pressure value from internal bmp280 registers in pascal
// copied from datasheet
static float BMP280_calc_pressure() {
 800bc28:	b580      	push	{r7, lr}
 800bc2a:	b086      	sub	sp, #24
 800bc2c:	af00      	add	r7, sp, #0

  int32_t adc_P = raw_mpa;
 800bc2e:	4b4e      	ldr	r3, [pc, #312]	@ (800bd68 <BMP280_calc_pressure+0x140>)
 800bc30:	681b      	ldr	r3, [r3, #0]
 800bc32:	613b      	str	r3, [r7, #16]
  int32_t var1, var2;
  uint32_t p;
  float airhPa;

  var1 = (((int32_t) t_fine) >> 1) - (int32_t)64000;
 800bc34:	4b4d      	ldr	r3, [pc, #308]	@ (800bd6c <BMP280_calc_pressure+0x144>)
 800bc36:	681b      	ldr	r3, [r3, #0]
 800bc38:	105b      	asrs	r3, r3, #1
 800bc3a:	4a4d      	ldr	r2, [pc, #308]	@ (800bd70 <BMP280_calc_pressure+0x148>)
 800bc3c:	4694      	mov	ip, r2
 800bc3e:	4463      	add	r3, ip
 800bc40:	60fb      	str	r3, [r7, #12]
  var2 = (((var1>>2) * (var1>>2)) >> 11) * ((int32_t) dig.P6);
 800bc42:	68fb      	ldr	r3, [r7, #12]
 800bc44:	109b      	asrs	r3, r3, #2
 800bc46:	68fa      	ldr	r2, [r7, #12]
 800bc48:	1092      	asrs	r2, r2, #2
 800bc4a:	4353      	muls	r3, r2
 800bc4c:	12db      	asrs	r3, r3, #11
 800bc4e:	4a49      	ldr	r2, [pc, #292]	@ (800bd74 <BMP280_calc_pressure+0x14c>)
 800bc50:	2110      	movs	r1, #16
 800bc52:	5e52      	ldrsh	r2, [r2, r1]
 800bc54:	4353      	muls	r3, r2
 800bc56:	60bb      	str	r3, [r7, #8]
  var2 = var2 + ((var1 * ((int32_t) dig.P5))<<1);
 800bc58:	4b46      	ldr	r3, [pc, #280]	@ (800bd74 <BMP280_calc_pressure+0x14c>)
 800bc5a:	220e      	movs	r2, #14
 800bc5c:	5e9b      	ldrsh	r3, [r3, r2]
 800bc5e:	001a      	movs	r2, r3
 800bc60:	68fb      	ldr	r3, [r7, #12]
 800bc62:	4353      	muls	r3, r2
 800bc64:	005b      	lsls	r3, r3, #1
 800bc66:	68ba      	ldr	r2, [r7, #8]
 800bc68:	18d3      	adds	r3, r2, r3
 800bc6a:	60bb      	str	r3, [r7, #8]
  var2 = (var2>>2) + (((int32_t)dig.P4)<<16);
 800bc6c:	68bb      	ldr	r3, [r7, #8]
 800bc6e:	109a      	asrs	r2, r3, #2
 800bc70:	4b40      	ldr	r3, [pc, #256]	@ (800bd74 <BMP280_calc_pressure+0x14c>)
 800bc72:	210c      	movs	r1, #12
 800bc74:	5e5b      	ldrsh	r3, [r3, r1]
 800bc76:	041b      	lsls	r3, r3, #16
 800bc78:	18d3      	adds	r3, r2, r3
 800bc7a:	60bb      	str	r3, [r7, #8]
  var1 = (((dig.P3 * (((var1>>2) * (var1>>2)) >> 13))>>3) + ((((int32_t) dig.P2) * var1)>>1))>>18;
 800bc7c:	4b3d      	ldr	r3, [pc, #244]	@ (800bd74 <BMP280_calc_pressure+0x14c>)
 800bc7e:	220a      	movs	r2, #10
 800bc80:	5e9b      	ldrsh	r3, [r3, r2]
 800bc82:	0019      	movs	r1, r3
 800bc84:	68fb      	ldr	r3, [r7, #12]
 800bc86:	109b      	asrs	r3, r3, #2
 800bc88:	68fa      	ldr	r2, [r7, #12]
 800bc8a:	1092      	asrs	r2, r2, #2
 800bc8c:	4353      	muls	r3, r2
 800bc8e:	135b      	asrs	r3, r3, #13
 800bc90:	434b      	muls	r3, r1
 800bc92:	10da      	asrs	r2, r3, #3
 800bc94:	4b37      	ldr	r3, [pc, #220]	@ (800bd74 <BMP280_calc_pressure+0x14c>)
 800bc96:	2108      	movs	r1, #8
 800bc98:	5e5b      	ldrsh	r3, [r3, r1]
 800bc9a:	0019      	movs	r1, r3
 800bc9c:	68fb      	ldr	r3, [r7, #12]
 800bc9e:	434b      	muls	r3, r1
 800bca0:	105b      	asrs	r3, r3, #1
 800bca2:	18d3      	adds	r3, r2, r3
 800bca4:	149b      	asrs	r3, r3, #18
 800bca6:	60fb      	str	r3, [r7, #12]
  var1 = ((((32768 + var1)) * ((int32_t) dig.P1))>>15);
 800bca8:	68fb      	ldr	r3, [r7, #12]
 800bcaa:	2280      	movs	r2, #128	@ 0x80
 800bcac:	0212      	lsls	r2, r2, #8
 800bcae:	4694      	mov	ip, r2
 800bcb0:	4463      	add	r3, ip
 800bcb2:	4a30      	ldr	r2, [pc, #192]	@ (800bd74 <BMP280_calc_pressure+0x14c>)
 800bcb4:	88d2      	ldrh	r2, [r2, #6]
 800bcb6:	4353      	muls	r3, r2
 800bcb8:	13db      	asrs	r3, r3, #15
 800bcba:	60fb      	str	r3, [r7, #12]

  // Avoid exception caused by division with zero
  if (var1 == 0) {
 800bcbc:	68fb      	ldr	r3, [r7, #12]
 800bcbe:	2b00      	cmp	r3, #0
 800bcc0:	d101      	bne.n	800bcc6 <BMP280_calc_pressure+0x9e>
    return 0;
 800bcc2:	2300      	movs	r3, #0
 800bcc4:	e04b      	b.n	800bd5e <BMP280_calc_pressure+0x136>
  }
  p = ((uint32_t)(((int32_t)(1048576) - adc_P) - (var2>>12))) * 3125;
 800bcc6:	693b      	ldr	r3, [r7, #16]
 800bcc8:	2280      	movs	r2, #128	@ 0x80
 800bcca:	0352      	lsls	r2, r2, #13
 800bccc:	1ad2      	subs	r2, r2, r3
 800bcce:	68bb      	ldr	r3, [r7, #8]
 800bcd0:	131b      	asrs	r3, r3, #12
 800bcd2:	1ad3      	subs	r3, r2, r3
 800bcd4:	001a      	movs	r2, r3
 800bcd6:	4b28      	ldr	r3, [pc, #160]	@ (800bd78 <BMP280_calc_pressure+0x150>)
 800bcd8:	4353      	muls	r3, r2
 800bcda:	617b      	str	r3, [r7, #20]

    // Check for overflows against UINT32_MAX/2; if pres is left-shifted by 1
  if (p < 0x80000000)
 800bcdc:	697b      	ldr	r3, [r7, #20]
 800bcde:	2b00      	cmp	r3, #0
 800bce0:	db09      	blt.n	800bcf6 <BMP280_calc_pressure+0xce>
    {
      p = (p << 1) / ((uint32_t) var1);
 800bce2:	697b      	ldr	r3, [r7, #20]
 800bce4:	005b      	lsls	r3, r3, #1
 800bce6:	68fa      	ldr	r2, [r7, #12]
 800bce8:	0011      	movs	r1, r2
 800bcea:	0018      	movs	r0, r3
 800bcec:	f7f4 fa5a 	bl	80001a4 <__udivsi3>
 800bcf0:	0003      	movs	r3, r0
 800bcf2:	617b      	str	r3, [r7, #20]
 800bcf4:	e007      	b.n	800bd06 <BMP280_calc_pressure+0xde>
    }
    else
    {
      p = (p / (uint32_t) var1) * 2;
 800bcf6:	68fb      	ldr	r3, [r7, #12]
 800bcf8:	0019      	movs	r1, r3
 800bcfa:	6978      	ldr	r0, [r7, #20]
 800bcfc:	f7f4 fa52 	bl	80001a4 <__udivsi3>
 800bd00:	0003      	movs	r3, r0
 800bd02:	005b      	lsls	r3, r3, #1
 800bd04:	617b      	str	r3, [r7, #20]
    }
    var1 = (((int32_t) dig.P9) * ((int32_t) (((p>>3) * (p>>3))>>13)))>>12;
 800bd06:	4b1b      	ldr	r3, [pc, #108]	@ (800bd74 <BMP280_calc_pressure+0x14c>)
 800bd08:	2216      	movs	r2, #22
 800bd0a:	5e9b      	ldrsh	r3, [r3, r2]
 800bd0c:	0019      	movs	r1, r3
 800bd0e:	697b      	ldr	r3, [r7, #20]
 800bd10:	08db      	lsrs	r3, r3, #3
 800bd12:	697a      	ldr	r2, [r7, #20]
 800bd14:	08d2      	lsrs	r2, r2, #3
 800bd16:	4353      	muls	r3, r2
 800bd18:	0b5b      	lsrs	r3, r3, #13
 800bd1a:	434b      	muls	r3, r1
 800bd1c:	131b      	asrs	r3, r3, #12
 800bd1e:	60fb      	str	r3, [r7, #12]
    var2 = (((int32_t) (p>>2)) * ((int32_t) dig.P8))>>13;
 800bd20:	697b      	ldr	r3, [r7, #20]
 800bd22:	089b      	lsrs	r3, r3, #2
 800bd24:	001a      	movs	r2, r3
 800bd26:	4b13      	ldr	r3, [pc, #76]	@ (800bd74 <BMP280_calc_pressure+0x14c>)
 800bd28:	2114      	movs	r1, #20
 800bd2a:	5e5b      	ldrsh	r3, [r3, r1]
 800bd2c:	4353      	muls	r3, r2
 800bd2e:	135b      	asrs	r3, r3, #13
 800bd30:	60bb      	str	r3, [r7, #8]
    p = (uint32_t) ((int32_t)p + ((var1 + var2 + dig.P7)>>4));
 800bd32:	68fa      	ldr	r2, [r7, #12]
 800bd34:	68bb      	ldr	r3, [r7, #8]
 800bd36:	18d3      	adds	r3, r2, r3
 800bd38:	4a0e      	ldr	r2, [pc, #56]	@ (800bd74 <BMP280_calc_pressure+0x14c>)
 800bd3a:	2112      	movs	r1, #18
 800bd3c:	5e52      	ldrsh	r2, [r2, r1]
 800bd3e:	189b      	adds	r3, r3, r2
 800bd40:	111a      	asrs	r2, r3, #4
 800bd42:	697b      	ldr	r3, [r7, #20]
 800bd44:	18d3      	adds	r3, r2, r3
 800bd46:	617b      	str	r3, [r7, #20]
    airhPa = (float)p / 100.0;
 800bd48:	6978      	ldr	r0, [r7, #20]
 800bd4a:	f7f5 fdbd 	bl	80018c8 <__aeabi_ui2f>
 800bd4e:	1c03      	adds	r3, r0, #0
 800bd50:	490a      	ldr	r1, [pc, #40]	@ (800bd7c <BMP280_calc_pressure+0x154>)
 800bd52:	1c18      	adds	r0, r3, #0
 800bd54:	f7f4 ffa6 	bl	8000ca4 <__aeabi_fdiv>
 800bd58:	1c03      	adds	r3, r0, #0
 800bd5a:	607b      	str	r3, [r7, #4]
  return airhPa;
 800bd5c:	687b      	ldr	r3, [r7, #4]
}
 800bd5e:	1c18      	adds	r0, r3, #0
 800bd60:	46bd      	mov	sp, r7
 800bd62:	b006      	add	sp, #24
 800bd64:	bd80      	pop	{r7, pc}
 800bd66:	46c0      	nop			@ (mov r8, r8)
 800bd68:	20000f30 	.word	0x20000f30
 800bd6c:	20000f20 	.word	0x20000f20
 800bd70:	ffff0600 	.word	0xffff0600
 800bd74:	20000f08 	.word	0x20000f08
 800bd78:	00000c35 	.word	0x00000c35
 800bd7c:	42c80000 	.word	0x42c80000

0800bd80 <BMP_Upkeep>:

BMP280State BMP_Upkeep(void) {
 800bd80:	b5b0      	push	{r4, r5, r7, lr}
 800bd82:	b088      	sub	sp, #32
 800bd84:	af04      	add	r7, sp, #16

  if(!TimestampIsReached(BMP280TimeStamp)){
 800bd86:	4b8e      	ldr	r3, [pc, #568]	@ (800bfc0 <BMP_Upkeep+0x240>)
 800bd88:	681b      	ldr	r3, [r3, #0]
 800bd8a:	0018      	movs	r0, r3
 800bd8c:	f008 f800 	bl	8013d90 <TimestampIsReached>
 800bd90:	0003      	movs	r3, r0
 800bd92:	001a      	movs	r2, r3
 800bd94:	2301      	movs	r3, #1
 800bd96:	4053      	eors	r3, r2
 800bd98:	b2db      	uxtb	r3, r3
 800bd9a:	2b00      	cmp	r3, #0
 800bd9c:	d002      	beq.n	800bda4 <BMP_Upkeep+0x24>
    return BMPState;
 800bd9e:	4b89      	ldr	r3, [pc, #548]	@ (800bfc4 <BMP_Upkeep+0x244>)
 800bda0:	781b      	ldrb	r3, [r3, #0]
 800bda2:	e109      	b.n	800bfb8 <BMP_Upkeep+0x238>
  }
  switch(BMPState) {
 800bda4:	4b87      	ldr	r3, [pc, #540]	@ (800bfc4 <BMP_Upkeep+0x244>)
 800bda6:	781b      	ldrb	r3, [r3, #0]
 800bda8:	2b02      	cmp	r3, #2
 800bdaa:	d100      	bne.n	800bdae <BMP_Upkeep+0x2e>
 800bdac:	e0f2      	b.n	800bf94 <BMP_Upkeep+0x214>
 800bdae:	dd00      	ble.n	800bdb2 <BMP_Upkeep+0x32>
 800bdb0:	e0f4      	b.n	800bf9c <BMP_Upkeep+0x21c>
 800bdb2:	2b00      	cmp	r3, #0
 800bdb4:	d003      	beq.n	800bdbe <BMP_Upkeep+0x3e>
 800bdb6:	2b01      	cmp	r3, #1
 800bdb8:	d100      	bne.n	800bdbc <BMP_Upkeep+0x3c>
 800bdba:	e092      	b.n	800bee2 <BMP_Upkeep+0x162>
 800bdbc:	e0ee      	b.n	800bf9c <BMP_Upkeep+0x21c>
  case BMP_MODE_SELECT:
    if ((getSensorLock() == FREE) || (getSensorLock() == BMP280)) {
 800bdbe:	f002 f81f 	bl	800de00 <getSensorLock>
 800bdc2:	1e03      	subs	r3, r0, #0
 800bdc4:	d005      	beq.n	800bdd2 <BMP_Upkeep+0x52>
 800bdc6:	f002 f81b 	bl	800de00 <getSensorLock>
 800bdca:	0003      	movs	r3, r0
 800bdcc:	2b03      	cmp	r3, #3
 800bdce:	d000      	beq.n	800bdd2 <BMP_Upkeep+0x52>
 800bdd0:	e07f      	b.n	800bed2 <BMP_Upkeep+0x152>
      if (getSensorLock() == FREE) {
 800bdd2:	f002 f815 	bl	800de00 <getSensorLock>
 800bdd6:	1e03      	subs	r3, r0, #0
 800bdd8:	d102      	bne.n	800bde0 <BMP_Upkeep+0x60>
        setSensorLock(BMP280);
 800bdda:	2003      	movs	r0, #3
 800bddc:	f001 fffc 	bl	800ddd8 <setSensorLock>
      }
      bmperror = false;
 800bde0:	4b79      	ldr	r3, [pc, #484]	@ (800bfc8 <BMP_Upkeep+0x248>)
 800bde2:	2200      	movs	r2, #0
 800bde4:	701a      	strb	r2, [r3, #0]
      bool changed = false;
 800bde6:	240f      	movs	r4, #15
 800bde8:	193b      	adds	r3, r7, r4
 800bdea:	2200      	movs	r2, #0
 800bdec:	701a      	strb	r2, [r3, #0]
      mode = BMP280_get_mode();
 800bdee:	f7ff fe6d 	bl	800bacc <BMP280_get_mode>
 800bdf2:	0003      	movs	r3, r0
 800bdf4:	001a      	movs	r2, r3
 800bdf6:	4b75      	ldr	r3, [pc, #468]	@ (800bfcc <BMP_Upkeep+0x24c>)
 800bdf8:	701a      	strb	r2, [r3, #0]
      mode &= BMP280_NORMAL_MODE;
 800bdfa:	4b74      	ldr	r3, [pc, #464]	@ (800bfcc <BMP_Upkeep+0x24c>)
 800bdfc:	781b      	ldrb	r3, [r3, #0]
 800bdfe:	2203      	movs	r2, #3
 800be00:	4013      	ands	r3, r2
 800be02:	b2da      	uxtb	r2, r3
 800be04:	4b71      	ldr	r3, [pc, #452]	@ (800bfcc <BMP_Upkeep+0x24c>)
 800be06:	701a      	strb	r2, [r3, #0]
      if (Check_USB_PowerOn()) {
 800be08:	f7fd ff06 	bl	8009c18 <Check_USB_PowerOn>
 800be0c:	1e03      	subs	r3, r0, #0
 800be0e:	d010      	beq.n	800be32 <BMP_Upkeep+0xb2>
        if (mode != BMP280_NORMAL_MODE) {
 800be10:	4b6e      	ldr	r3, [pc, #440]	@ (800bfcc <BMP_Upkeep+0x24c>)
 800be12:	781b      	ldrb	r3, [r3, #0]
 800be14:	2b03      	cmp	r3, #3
 800be16:	d02d      	beq.n	800be74 <BMP_Upkeep+0xf4>
          mode =BMP280_NORMAL_MODE;
 800be18:	4b6c      	ldr	r3, [pc, #432]	@ (800bfcc <BMP_Upkeep+0x24c>)
 800be1a:	2203      	movs	r2, #3
 800be1c:	701a      	strb	r2, [r3, #0]
          changed = true;
 800be1e:	193b      	adds	r3, r7, r4
 800be20:	2201      	movs	r2, #1
 800be22:	701a      	strb	r2, [r3, #0]
          Info("BMP280 modus changed to normal");
 800be24:	4a6a      	ldr	r2, [pc, #424]	@ (800bfd0 <BMP_Upkeep+0x250>)
 800be26:	4b6b      	ldr	r3, [pc, #428]	@ (800bfd4 <BMP_Upkeep+0x254>)
 800be28:	0019      	movs	r1, r3
 800be2a:	2002      	movs	r0, #2
 800be2c:	f008 f806 	bl	8013e3c <CreateLine>
 800be30:	e020      	b.n	800be74 <BMP_Upkeep+0xf4>
        }
      }
      else {
        if ((mode == BMP280_NORMAL_MODE) || (mode == BMP280_SLEEP_MODE) || (mode == 255)) {
 800be32:	4b66      	ldr	r3, [pc, #408]	@ (800bfcc <BMP_Upkeep+0x24c>)
 800be34:	781b      	ldrb	r3, [r3, #0]
 800be36:	2b03      	cmp	r3, #3
 800be38:	d007      	beq.n	800be4a <BMP_Upkeep+0xca>
 800be3a:	4b64      	ldr	r3, [pc, #400]	@ (800bfcc <BMP_Upkeep+0x24c>)
 800be3c:	781b      	ldrb	r3, [r3, #0]
 800be3e:	2b00      	cmp	r3, #0
 800be40:	d003      	beq.n	800be4a <BMP_Upkeep+0xca>
 800be42:	4b62      	ldr	r3, [pc, #392]	@ (800bfcc <BMP_Upkeep+0x24c>)
 800be44:	781b      	ldrb	r3, [r3, #0]
 800be46:	2bff      	cmp	r3, #255	@ 0xff
 800be48:	d114      	bne.n	800be74 <BMP_Upkeep+0xf4>
          changed = true;
 800be4a:	230f      	movs	r3, #15
 800be4c:	18fb      	adds	r3, r7, r3
 800be4e:	2201      	movs	r2, #1
 800be50:	701a      	strb	r2, [r3, #0]
          mode = BMP280_FORCED_MODE;
 800be52:	4b5e      	ldr	r3, [pc, #376]	@ (800bfcc <BMP_Upkeep+0x24c>)
 800be54:	2201      	movs	r2, #1
 800be56:	701a      	strb	r2, [r3, #0]
          if ((mode == BMP280_NORMAL_MODE)|| (mode == 255)) {
 800be58:	4b5c      	ldr	r3, [pc, #368]	@ (800bfcc <BMP_Upkeep+0x24c>)
 800be5a:	781b      	ldrb	r3, [r3, #0]
 800be5c:	2b03      	cmp	r3, #3
 800be5e:	d003      	beq.n	800be68 <BMP_Upkeep+0xe8>
 800be60:	4b5a      	ldr	r3, [pc, #360]	@ (800bfcc <BMP_Upkeep+0x24c>)
 800be62:	781b      	ldrb	r3, [r3, #0]
 800be64:	2bff      	cmp	r3, #255	@ 0xff
 800be66:	d105      	bne.n	800be74 <BMP_Upkeep+0xf4>
           Info("BMP280 modus changed to forced");
 800be68:	4a5b      	ldr	r2, [pc, #364]	@ (800bfd8 <BMP_Upkeep+0x258>)
 800be6a:	4b5a      	ldr	r3, [pc, #360]	@ (800bfd4 <BMP_Upkeep+0x254>)
 800be6c:	0019      	movs	r1, r3
 800be6e:	2002      	movs	r0, #2
 800be70:	f007 ffe4 	bl	8013e3c <CreateLine>
          }
        }
      }
      if (changed || (mode == BMP280_FORCED_MODE)) {
 800be74:	230f      	movs	r3, #15
 800be76:	18fb      	adds	r3, r7, r3
 800be78:	781b      	ldrb	r3, [r3, #0]
 800be7a:	2b00      	cmp	r3, #0
 800be7c:	d103      	bne.n	800be86 <BMP_Upkeep+0x106>
 800be7e:	4b53      	ldr	r3, [pc, #332]	@ (800bfcc <BMP_Upkeep+0x24c>)
 800be80:	781b      	ldrb	r3, [r3, #0]
 800be82:	2b01      	cmp	r3, #1
 800be84:	d105      	bne.n	800be92 <BMP_Upkeep+0x112>
        BMP280_set_mode();
 800be86:	f7ff fe43 	bl	800bb10 <BMP280_set_mode>
        changed = false;
 800be8a:	230f      	movs	r3, #15
 800be8c:	18fb      	adds	r3, r7, r3
 800be8e:	2200      	movs	r2, #0
 800be90:	701a      	strb	r2, [r3, #0]
      }
      if (BMP280_get_measurement_values()) {
 800be92:	f7ff fd65 	bl	800b960 <BMP280_get_measurement_values>
 800be96:	1e03      	subs	r3, r0, #0
 800be98:	d003      	beq.n	800bea2 <BMP_Upkeep+0x122>
        BMPState = BMP_STATE_PROCESS_RESULTS;
 800be9a:	4b4a      	ldr	r3, [pc, #296]	@ (800bfc4 <BMP_Upkeep+0x244>)
 800be9c:	2201      	movs	r2, #1
 800be9e:	701a      	strb	r2, [r3, #0]
 800bea0:	e012      	b.n	800bec8 <BMP_Upkeep+0x148>
      }
      else {
        Error("BMP280 Error during reading measurement results array");
 800bea2:	4a4e      	ldr	r2, [pc, #312]	@ (800bfdc <BMP_Upkeep+0x25c>)
 800bea4:	4b4e      	ldr	r3, [pc, #312]	@ (800bfe0 <BMP_Upkeep+0x260>)
 800bea6:	0019      	movs	r1, r3
 800bea8:	2001      	movs	r0, #1
 800beaa:	f007 ffc7 	bl	8013e3c <CreateLine>
        bmperror = true;
 800beae:	4b46      	ldr	r3, [pc, #280]	@ (800bfc8 <BMP_Upkeep+0x248>)
 800beb0:	2201      	movs	r2, #1
 800beb2:	701a      	strb	r2, [r3, #0]
        BMP280TimeStamp = HAL_GetTick() + 5000;
 800beb4:	f008 fd3a 	bl	801492c <HAL_GetTick>
 800beb8:	0003      	movs	r3, r0
 800beba:	4a4a      	ldr	r2, [pc, #296]	@ (800bfe4 <BMP_Upkeep+0x264>)
 800bebc:	189a      	adds	r2, r3, r2
 800bebe:	4b40      	ldr	r3, [pc, #256]	@ (800bfc0 <BMP_Upkeep+0x240>)
 800bec0:	601a      	str	r2, [r3, #0]
        BMPState = BMP_STATE_WAIT ;
 800bec2:	4b40      	ldr	r3, [pc, #256]	@ (800bfc4 <BMP_Upkeep+0x244>)
 800bec4:	2202      	movs	r2, #2
 800bec6:	701a      	strb	r2, [r3, #0]
      }
      setSensorLock(FREE);
 800bec8:	2000      	movs	r0, #0
 800beca:	f001 ff85 	bl	800ddd8 <setSensorLock>
    if ((getSensorLock() == FREE) || (getSensorLock() == BMP280)) {
 800bece:	46c0      	nop			@ (mov r8, r8)
//      uint8_t locktype = getSensorLock();
//      Debug("Lock is not from BMP280, but from %s",
//        locktype==FREE?"FREE":locktype==HIDS?"HIDS":locktype==SGP40?"SGP40":locktype==AHT20?"AHT20":locktype==BMP280?"BMP280":"unknown");
      BMP280TimeStamp = HAL_GetTick() + 97;
    }
    break;
 800bed0:	e070      	b.n	800bfb4 <BMP_Upkeep+0x234>
      BMP280TimeStamp = HAL_GetTick() + 97;
 800bed2:	f008 fd2b 	bl	801492c <HAL_GetTick>
 800bed6:	0003      	movs	r3, r0
 800bed8:	3361      	adds	r3, #97	@ 0x61
 800beda:	001a      	movs	r2, r3
 800bedc:	4b38      	ldr	r3, [pc, #224]	@ (800bfc0 <BMP_Upkeep+0x240>)
 800bede:	601a      	str	r2, [r3, #0]
    break;
 800bee0:	e068      	b.n	800bfb4 <BMP_Upkeep+0x234>

  case BMP_STATE_PROCESS_RESULTS:
    float airtemp, airhpa;
    airtemp = BMP280_calc_temperature();
 800bee2:	f7ff fe59 	bl	800bb98 <BMP280_calc_temperature>
 800bee6:	1c03      	adds	r3, r0, #0
 800bee8:	60bb      	str	r3, [r7, #8]
    airhpa = BMP280_calc_pressure();
 800beea:	f7ff fe9d 	bl	800bc28 <BMP280_calc_pressure>
 800beee:	1c03      	adds	r3, r0, #0
 800bef0:	607b      	str	r3, [r7, #4]
    Info("BMP280 barometric value: %.2fhPa, airtemperature: %2.2fC", airhpa, airtemp);
 800bef2:	6878      	ldr	r0, [r7, #4]
 800bef4:	f7f7 fcce 	bl	8003894 <__aeabi_f2d>
 800bef8:	0004      	movs	r4, r0
 800befa:	000d      	movs	r5, r1
 800befc:	68b8      	ldr	r0, [r7, #8]
 800befe:	f7f7 fcc9 	bl	8003894 <__aeabi_f2d>
 800bf02:	0002      	movs	r2, r0
 800bf04:	000b      	movs	r3, r1
 800bf06:	4838      	ldr	r0, [pc, #224]	@ (800bfe8 <BMP_Upkeep+0x268>)
 800bf08:	4932      	ldr	r1, [pc, #200]	@ (800bfd4 <BMP_Upkeep+0x254>)
 800bf0a:	9202      	str	r2, [sp, #8]
 800bf0c:	9303      	str	r3, [sp, #12]
 800bf0e:	9400      	str	r4, [sp, #0]
 800bf10:	9501      	str	r5, [sp, #4]
 800bf12:	0002      	movs	r2, r0
 800bf14:	2002      	movs	r0, #2
 800bf16:	f007 ff91 	bl	8013e3c <CreateLine>

    if ((airhpa > 850.0) && (airhpa < 1100)) {
 800bf1a:	4934      	ldr	r1, [pc, #208]	@ (800bfec <BMP_Upkeep+0x26c>)
 800bf1c:	6878      	ldr	r0, [r7, #4]
 800bf1e:	f7f4 fb1b 	bl	8000558 <__aeabi_fcmpgt>
 800bf22:	1e03      	subs	r3, r0, #0
 800bf24:	d022      	beq.n	800bf6c <BMP_Upkeep+0x1ec>
 800bf26:	4932      	ldr	r1, [pc, #200]	@ (800bff0 <BMP_Upkeep+0x270>)
 800bf28:	6878      	ldr	r0, [r7, #4]
 800bf2a:	f7f4 fb01 	bl	8000530 <__aeabi_fcmplt>
 800bf2e:	1e03      	subs	r3, r0, #0
 800bf30:	d01c      	beq.n	800bf6c <BMP_Upkeep+0x1ec>
      setBMP280(airtemp, airhpa);
 800bf32:	687a      	ldr	r2, [r7, #4]
 800bf34:	68bb      	ldr	r3, [r7, #8]
 800bf36:	1c11      	adds	r1, r2, #0
 800bf38:	1c18      	adds	r0, r3, #0
 800bf3a:	f7f8 fddf 	bl	8004afc <setBMP280>
      if (Check_USB_PowerOn()) {
 800bf3e:	f7fd fe6b 	bl	8009c18 <Check_USB_PowerOn>
 800bf42:	1e03      	subs	r3, r0, #0
 800bf44:	d00a      	beq.n	800bf5c <BMP_Upkeep+0x1dc>
        BMP280TimeStamp = HAL_GetTick() + 28000;
 800bf46:	f008 fcf1 	bl	801492c <HAL_GetTick>
 800bf4a:	0003      	movs	r3, r0
 800bf4c:	4a29      	ldr	r2, [pc, #164]	@ (800bff4 <BMP_Upkeep+0x274>)
 800bf4e:	189a      	adds	r2, r3, r2
 800bf50:	4b1b      	ldr	r3, [pc, #108]	@ (800bfc0 <BMP_Upkeep+0x240>)
 800bf52:	601a      	str	r2, [r3, #0]
        bmp280samplecounter = 1;
 800bf54:	4b28      	ldr	r3, [pc, #160]	@ (800bff8 <BMP_Upkeep+0x278>)
 800bf56:	2201      	movs	r2, #1
 800bf58:	701a      	strb	r2, [r3, #0]
      if (Check_USB_PowerOn()) {
 800bf5a:	e017      	b.n	800bf8c <BMP_Upkeep+0x20c>
      }
      else {
        BMP280TimeStamp = HAL_GetTick() + 10000;
 800bf5c:	f008 fce6 	bl	801492c <HAL_GetTick>
 800bf60:	0003      	movs	r3, r0
 800bf62:	4a26      	ldr	r2, [pc, #152]	@ (800bffc <BMP_Upkeep+0x27c>)
 800bf64:	189a      	adds	r2, r3, r2
 800bf66:	4b16      	ldr	r3, [pc, #88]	@ (800bfc0 <BMP_Upkeep+0x240>)
 800bf68:	601a      	str	r2, [r3, #0]
      if (Check_USB_PowerOn()) {
 800bf6a:	e00f      	b.n	800bf8c <BMP_Upkeep+0x20c>
      }
    }
    else {
      Error("BMP280 value out of valid range, not stored/used");
 800bf6c:	4a24      	ldr	r2, [pc, #144]	@ (800c000 <BMP_Upkeep+0x280>)
 800bf6e:	4b1c      	ldr	r3, [pc, #112]	@ (800bfe0 <BMP_Upkeep+0x260>)
 800bf70:	0019      	movs	r1, r3
 800bf72:	2001      	movs	r0, #1
 800bf74:	f007 ff62 	bl	8013e3c <CreateLine>
      bmperror = true;
 800bf78:	4b13      	ldr	r3, [pc, #76]	@ (800bfc8 <BMP_Upkeep+0x248>)
 800bf7a:	2201      	movs	r2, #1
 800bf7c:	701a      	strb	r2, [r3, #0]
      BMP280TimeStamp = HAL_GetTick() + 5000;
 800bf7e:	f008 fcd5 	bl	801492c <HAL_GetTick>
 800bf82:	0003      	movs	r3, r0
 800bf84:	4a17      	ldr	r2, [pc, #92]	@ (800bfe4 <BMP_Upkeep+0x264>)
 800bf86:	189a      	adds	r2, r3, r2
 800bf88:	4b0d      	ldr	r3, [pc, #52]	@ (800bfc0 <BMP_Upkeep+0x240>)
 800bf8a:	601a      	str	r2, [r3, #0]
    }
    BMPState = BMP_STATE_WAIT;
 800bf8c:	4b0d      	ldr	r3, [pc, #52]	@ (800bfc4 <BMP_Upkeep+0x244>)
 800bf8e:	2202      	movs	r2, #2
 800bf90:	701a      	strb	r2, [r3, #0]
    break;
 800bf92:	e00f      	b.n	800bfb4 <BMP_Upkeep+0x234>

  case BMP_STATE_WAIT:
      BMPState = BMP_MODE_SELECT;
 800bf94:	4b0b      	ldr	r3, [pc, #44]	@ (800bfc4 <BMP_Upkeep+0x244>)
 800bf96:	2200      	movs	r2, #0
 800bf98:	701a      	strb	r2, [r3, #0]
    break;
 800bf9a:	e00b      	b.n	800bfb4 <BMP_Upkeep+0x234>


  default:
    // Handle unexpected state
    BMPState = BMP_MODE_SELECT;
 800bf9c:	4b09      	ldr	r3, [pc, #36]	@ (800bfc4 <BMP_Upkeep+0x244>)
 800bf9e:	2200      	movs	r2, #0
 800bfa0:	701a      	strb	r2, [r3, #0]
    if (getSensorLock() == BMP280) {
 800bfa2:	f001 ff2d 	bl	800de00 <getSensorLock>
 800bfa6:	0003      	movs	r3, r0
 800bfa8:	2b03      	cmp	r3, #3
 800bfaa:	d102      	bne.n	800bfb2 <BMP_Upkeep+0x232>
      setSensorLock(FREE);
 800bfac:	2000      	movs	r0, #0
 800bfae:	f001 ff13 	bl	800ddd8 <setSensorLock>
    }
    break;
 800bfb2:	46c0      	nop			@ (mov r8, r8)
  }
  return BMPState;
 800bfb4:	4b03      	ldr	r3, [pc, #12]	@ (800bfc4 <BMP_Upkeep+0x244>)
 800bfb6:	781b      	ldrb	r3, [r3, #0]
}
 800bfb8:	0018      	movs	r0, r3
 800bfba:	46bd      	mov	sp, r7
 800bfbc:	b004      	add	sp, #16
 800bfbe:	bdb0      	pop	{r4, r5, r7, pc}
 800bfc0:	20000f24 	.word	0x20000f24
 800bfc4:	20000f29 	.word	0x20000f29
 800bfc8:	20000f2a 	.word	0x20000f2a
 800bfcc:	200000a1 	.word	0x200000a1
 800bfd0:	0802c494 	.word	0x0802c494
 800bfd4:	0802c2a4 	.word	0x0802c2a4
 800bfd8:	0802c4b4 	.word	0x0802c4b4
 800bfdc:	0802c4d4 	.word	0x0802c4d4
 800bfe0:	0802c2fc 	.word	0x0802c2fc
 800bfe4:	00001388 	.word	0x00001388
 800bfe8:	0802c50c 	.word	0x0802c50c
 800bfec:	44548000 	.word	0x44548000
 800bff0:	44898000 	.word	0x44898000
 800bff4:	00006d60 	.word	0x00006d60
 800bff8:	20000f28 	.word	0x20000f28
 800bffc:	00002710 	.word	0x00002710
 800c000:	0802c548 	.word	0x0802c548

0800c004 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800c004:	b580      	push	{r7, lr}
 800c006:	b082      	sub	sp, #8
 800c008:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800c00a:	4b10      	ldr	r3, [pc, #64]	@ (800c04c <MX_DMA_Init+0x48>)
 800c00c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800c00e:	4b0f      	ldr	r3, [pc, #60]	@ (800c04c <MX_DMA_Init+0x48>)
 800c010:	2101      	movs	r1, #1
 800c012:	430a      	orrs	r2, r1
 800c014:	631a      	str	r2, [r3, #48]	@ 0x30
 800c016:	4b0d      	ldr	r3, [pc, #52]	@ (800c04c <MX_DMA_Init+0x48>)
 800c018:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c01a:	2201      	movs	r2, #1
 800c01c:	4013      	ands	r3, r2
 800c01e:	607b      	str	r3, [r7, #4]
 800c020:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 800c022:	2200      	movs	r2, #0
 800c024:	2100      	movs	r1, #0
 800c026:	200a      	movs	r0, #10
 800c028:	f009 f906 	bl	8015238 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 800c02c:	200a      	movs	r0, #10
 800c02e:	f009 f918 	bl	8015262 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_5_6_7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_5_6_7_IRQn, 3, 0);
 800c032:	2200      	movs	r2, #0
 800c034:	2103      	movs	r1, #3
 800c036:	200b      	movs	r0, #11
 800c038:	f009 f8fe 	bl	8015238 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_5_6_7_IRQn);
 800c03c:	200b      	movs	r0, #11
 800c03e:	f009 f910 	bl	8015262 <HAL_NVIC_EnableIRQ>

}
 800c042:	46c0      	nop			@ (mov r8, r8)
 800c044:	46bd      	mov	sp, r7
 800c046:	b002      	add	sp, #8
 800c048:	bd80      	pop	{r7, pc}
 800c04a:	46c0      	nop			@ (mov r8, r8)
 800c04c:	40021000 	.word	0x40021000

0800c050 <WriteUint8ArrayEeprom>:
#include <eeprom.h>

uint32_t WriteUint8ArrayEeprom(uint32_t startAddr, uint8_t data[], uint16_t size)
{
 800c050:	b590      	push	{r4, r7, lr}
 800c052:	b087      	sub	sp, #28
 800c054:	af00      	add	r7, sp, #0
 800c056:	60f8      	str	r0, [r7, #12]
 800c058:	60b9      	str	r1, [r7, #8]
 800c05a:	1dbb      	adds	r3, r7, #6
 800c05c:	801a      	strh	r2, [r3, #0]
    static uint32_t addr;
    addr = startAddr;
 800c05e:	4b17      	ldr	r3, [pc, #92]	@ (800c0bc <WriteUint8ArrayEeprom+0x6c>)
 800c060:	68fa      	ldr	r2, [r7, #12]
 800c062:	601a      	str	r2, [r3, #0]
    HAL_FLASHEx_DATAEEPROM_Unlock();
 800c064:	f009 fc7a 	bl	801595c <HAL_FLASHEx_DATAEEPROM_Unlock>
    for (uint16_t i = 0; i < size; i++)
 800c068:	2316      	movs	r3, #22
 800c06a:	18fb      	adds	r3, r7, r3
 800c06c:	2200      	movs	r2, #0
 800c06e:	801a      	strh	r2, [r3, #0]
 800c070:	e015      	b.n	800c09e <WriteUint8ArrayEeprom+0x4e>
    {
        HAL_FLASHEx_DATAEEPROM_Program(FLASH_TYPEPROGRAMDATA_BYTE, addr, data[i]);
 800c072:	4b12      	ldr	r3, [pc, #72]	@ (800c0bc <WriteUint8ArrayEeprom+0x6c>)
 800c074:	6819      	ldr	r1, [r3, #0]
 800c076:	2416      	movs	r4, #22
 800c078:	193b      	adds	r3, r7, r4
 800c07a:	881b      	ldrh	r3, [r3, #0]
 800c07c:	68ba      	ldr	r2, [r7, #8]
 800c07e:	18d3      	adds	r3, r2, r3
 800c080:	781b      	ldrb	r3, [r3, #0]
 800c082:	001a      	movs	r2, r3
 800c084:	2000      	movs	r0, #0
 800c086:	f009 fcd1 	bl	8015a2c <HAL_FLASHEx_DATAEEPROM_Program>
        addr++;
 800c08a:	4b0c      	ldr	r3, [pc, #48]	@ (800c0bc <WriteUint8ArrayEeprom+0x6c>)
 800c08c:	681b      	ldr	r3, [r3, #0]
 800c08e:	1c5a      	adds	r2, r3, #1
 800c090:	4b0a      	ldr	r3, [pc, #40]	@ (800c0bc <WriteUint8ArrayEeprom+0x6c>)
 800c092:	601a      	str	r2, [r3, #0]
    for (uint16_t i = 0; i < size; i++)
 800c094:	193b      	adds	r3, r7, r4
 800c096:	881a      	ldrh	r2, [r3, #0]
 800c098:	193b      	adds	r3, r7, r4
 800c09a:	3201      	adds	r2, #1
 800c09c:	801a      	strh	r2, [r3, #0]
 800c09e:	2316      	movs	r3, #22
 800c0a0:	18fa      	adds	r2, r7, r3
 800c0a2:	1dbb      	adds	r3, r7, #6
 800c0a4:	8812      	ldrh	r2, [r2, #0]
 800c0a6:	881b      	ldrh	r3, [r3, #0]
 800c0a8:	429a      	cmp	r2, r3
 800c0aa:	d3e2      	bcc.n	800c072 <WriteUint8ArrayEeprom+0x22>
    }
    HAL_FLASHEx_DATAEEPROM_Lock();
 800c0ac:	f009 fc84 	bl	80159b8 <HAL_FLASHEx_DATAEEPROM_Lock>
    return addr;
 800c0b0:	4b02      	ldr	r3, [pc, #8]	@ (800c0bc <WriteUint8ArrayEeprom+0x6c>)
 800c0b2:	681b      	ldr	r3, [r3, #0]
}
 800c0b4:	0018      	movs	r0, r3
 800c0b6:	46bd      	mov	sp, r7
 800c0b8:	b007      	add	sp, #28
 800c0ba:	bd90      	pop	{r4, r7, pc}
 800c0bc:	20000f34 	.word	0x20000f34

0800c0c0 <WriteUint8ArrayEepromSafe>:

void WriteUint8ArrayEepromSafe(uint32_t startAddr, uint8_t data[], uint16_t size, uint16_t maxSize)
{
 800c0c0:	b580      	push	{r7, lr}
 800c0c2:	b084      	sub	sp, #16
 800c0c4:	af00      	add	r7, sp, #0
 800c0c6:	60f8      	str	r0, [r7, #12]
 800c0c8:	60b9      	str	r1, [r7, #8]
 800c0ca:	0019      	movs	r1, r3
 800c0cc:	1dbb      	adds	r3, r7, #6
 800c0ce:	801a      	strh	r2, [r3, #0]
 800c0d0:	1d3b      	adds	r3, r7, #4
 800c0d2:	1c0a      	adds	r2, r1, #0
 800c0d4:	801a      	strh	r2, [r3, #0]
    if (size <= maxSize)
 800c0d6:	1dba      	adds	r2, r7, #6
 800c0d8:	1d3b      	adds	r3, r7, #4
 800c0da:	8812      	ldrh	r2, [r2, #0]
 800c0dc:	881b      	ldrh	r3, [r3, #0]
 800c0de:	429a      	cmp	r2, r3
 800c0e0:	d806      	bhi.n	800c0f0 <WriteUint8ArrayEepromSafe+0x30>
    {
        WriteUint8ArrayEeprom(startAddr, data, size);
 800c0e2:	1dbb      	adds	r3, r7, #6
 800c0e4:	881a      	ldrh	r2, [r3, #0]
 800c0e6:	68b9      	ldr	r1, [r7, #8]
 800c0e8:	68fb      	ldr	r3, [r7, #12]
 800c0ea:	0018      	movs	r0, r3
 800c0ec:	f7ff ffb0 	bl	800c050 <WriteUint8ArrayEeprom>
    }
}
 800c0f0:	46c0      	nop			@ (mov r8, r8)
 800c0f2:	46bd      	mov	sp, r7
 800c0f4:	b004      	add	sp, #16
 800c0f6:	bd80      	pop	{r7, pc}

0800c0f8 <ReadUint8ArrayEEprom>:

void ReadUint8ArrayEEprom(uint32_t startAddr, uint8_t data[], uint16_t size)
{
 800c0f8:	b580      	push	{r7, lr}
 800c0fa:	b086      	sub	sp, #24
 800c0fc:	af00      	add	r7, sp, #0
 800c0fe:	60f8      	str	r0, [r7, #12]
 800c100:	60b9      	str	r1, [r7, #8]
 800c102:	1dbb      	adds	r3, r7, #6
 800c104:	801a      	strh	r2, [r3, #0]
    for (uint16_t i = 0; i < size; i++)
 800c106:	2316      	movs	r3, #22
 800c108:	18fb      	adds	r3, r7, r3
 800c10a:	2200      	movs	r2, #0
 800c10c:	801a      	strh	r2, [r3, #0]
 800c10e:	e010      	b.n	800c132 <ReadUint8ArrayEEprom+0x3a>
    {
        data[i] = *(uint8_t*)(startAddr + i);
 800c110:	2016      	movs	r0, #22
 800c112:	183b      	adds	r3, r7, r0
 800c114:	881a      	ldrh	r2, [r3, #0]
 800c116:	68fb      	ldr	r3, [r7, #12]
 800c118:	18d3      	adds	r3, r2, r3
 800c11a:	0019      	movs	r1, r3
 800c11c:	183b      	adds	r3, r7, r0
 800c11e:	881b      	ldrh	r3, [r3, #0]
 800c120:	68ba      	ldr	r2, [r7, #8]
 800c122:	18d3      	adds	r3, r2, r3
 800c124:	780a      	ldrb	r2, [r1, #0]
 800c126:	701a      	strb	r2, [r3, #0]
    for (uint16_t i = 0; i < size; i++)
 800c128:	183b      	adds	r3, r7, r0
 800c12a:	881a      	ldrh	r2, [r3, #0]
 800c12c:	183b      	adds	r3, r7, r0
 800c12e:	3201      	adds	r2, #1
 800c130:	801a      	strh	r2, [r3, #0]
 800c132:	2316      	movs	r3, #22
 800c134:	18fa      	adds	r2, r7, r3
 800c136:	1dbb      	adds	r3, r7, #6
 800c138:	8812      	ldrh	r2, [r2, #0]
 800c13a:	881b      	ldrh	r3, [r3, #0]
 800c13c:	429a      	cmp	r2, r3
 800c13e:	d3e7      	bcc.n	800c110 <ReadUint8ArrayEEprom+0x18>
    }
}
 800c140:	46c0      	nop			@ (mov r8, r8)
 800c142:	46c0      	nop			@ (mov r8, r8)
 800c144:	46bd      	mov	sp, r7
 800c146:	b006      	add	sp, #24
 800c148:	bd80      	pop	{r7, pc}

0800c14a <ClearEEprom>:

void ClearEEprom(uint32_t startAddr, uint16_t size)
{
 800c14a:	b590      	push	{r4, r7, lr}
 800c14c:	b085      	sub	sp, #20
 800c14e:	af00      	add	r7, sp, #0
 800c150:	6078      	str	r0, [r7, #4]
 800c152:	000a      	movs	r2, r1
 800c154:	1cbb      	adds	r3, r7, #2
 800c156:	801a      	strh	r2, [r3, #0]
    HAL_FLASHEx_DATAEEPROM_Unlock();
 800c158:	f009 fc00 	bl	801595c <HAL_FLASHEx_DATAEEPROM_Unlock>
    for (uint16_t i = 0; i < size; i+=4)
 800c15c:	230e      	movs	r3, #14
 800c15e:	18fb      	adds	r3, r7, r3
 800c160:	2200      	movs	r2, #0
 800c162:	801a      	strh	r2, [r3, #0]
 800c164:	e00c      	b.n	800c180 <ClearEEprom+0x36>
    {
        HAL_FLASHEx_DATAEEPROM_Erase(startAddr+i);
 800c166:	240e      	movs	r4, #14
 800c168:	193b      	adds	r3, r7, r4
 800c16a:	881a      	ldrh	r2, [r3, #0]
 800c16c:	687b      	ldr	r3, [r7, #4]
 800c16e:	18d3      	adds	r3, r2, r3
 800c170:	0018      	movs	r0, r3
 800c172:	f009 fc2f 	bl	80159d4 <HAL_FLASHEx_DATAEEPROM_Erase>
    for (uint16_t i = 0; i < size; i+=4)
 800c176:	193b      	adds	r3, r7, r4
 800c178:	193a      	adds	r2, r7, r4
 800c17a:	8812      	ldrh	r2, [r2, #0]
 800c17c:	3204      	adds	r2, #4
 800c17e:	801a      	strh	r2, [r3, #0]
 800c180:	230e      	movs	r3, #14
 800c182:	18fa      	adds	r2, r7, r3
 800c184:	1cbb      	adds	r3, r7, #2
 800c186:	8812      	ldrh	r2, [r2, #0]
 800c188:	881b      	ldrh	r3, [r3, #0]
 800c18a:	429a      	cmp	r2, r3
 800c18c:	d3eb      	bcc.n	800c166 <ClearEEprom+0x1c>
    }
    HAL_FLASHEx_DATAEEPROM_Lock();
 800c18e:	f009 fc13 	bl	80159b8 <HAL_FLASHEx_DATAEEPROM_Lock>
}
 800c192:	46c0      	nop			@ (mov r8, r8)
 800c194:	46bd      	mov	sp, r7
 800c196:	b005      	add	sp, #20
 800c198:	bd90      	pop	{r4, r7, pc}
	...

0800c19c <accessLUT10log10>:


// Obtain the value from the lookup table (LUT) and convert it to
// integer and fractional parts:
static void accessLUT10log10(uint32_t index, uint32_t * intPart, uint32_t * fracPart)
{
 800c19c:	b580      	push	{r7, lr}
 800c19e:	b086      	sub	sp, #24
 800c1a0:	af00      	add	r7, sp, #0
 800c1a2:	60f8      	str	r0, [r7, #12]
 800c1a4:	60b9      	str	r1, [r7, #8]
 800c1a6:	607a      	str	r2, [r7, #4]
    if (index >= LUT_10LOG10_LENGTH)
 800c1a8:	68fb      	ldr	r3, [r7, #12]
 800c1aa:	2b7f      	cmp	r3, #127	@ 0x7f
 800c1ac:	d901      	bls.n	800c1b2 <accessLUT10log10+0x16>
    {
        index = LUT_10LOG10_LENGTH - 1;
 800c1ae:	237f      	movs	r3, #127	@ 0x7f
 800c1b0:	60fb      	str	r3, [r7, #12]
    }
    uint8_t x = LUT10log10[index];
 800c1b2:	2017      	movs	r0, #23
 800c1b4:	183b      	adds	r3, r7, r0
 800c1b6:	490d      	ldr	r1, [pc, #52]	@ (800c1ec <accessLUT10log10+0x50>)
 800c1b8:	68fa      	ldr	r2, [r7, #12]
 800c1ba:	188a      	adds	r2, r1, r2
 800c1bc:	7812      	ldrb	r2, [r2, #0]
 800c1be:	701a      	strb	r2, [r3, #0]
    intPart[0] = (uint32_t) (x >> fracPartLSBs);
 800c1c0:	0001      	movs	r1, r0
 800c1c2:	187b      	adds	r3, r7, r1
 800c1c4:	781b      	ldrb	r3, [r3, #0]
 800c1c6:	2206      	movs	r2, #6
 800c1c8:	4113      	asrs	r3, r2
 800c1ca:	001a      	movs	r2, r3
 800c1cc:	68bb      	ldr	r3, [r7, #8]
 800c1ce:	601a      	str	r2, [r3, #0]
    fracPart[0] = ((uint32_t) x) - (intPart[0] << fracPartLSBs);
 800c1d0:	187b      	adds	r3, r7, r1
 800c1d2:	781a      	ldrb	r2, [r3, #0]
 800c1d4:	68bb      	ldr	r3, [r7, #8]
 800c1d6:	681b      	ldr	r3, [r3, #0]
 800c1d8:	2106      	movs	r1, #6
 800c1da:	408b      	lsls	r3, r1
 800c1dc:	1ad2      	subs	r2, r2, r3
 800c1de:	687b      	ldr	r3, [r7, #4]
 800c1e0:	601a      	str	r2, [r3, #0]
}
 800c1e2:	46c0      	nop			@ (mov r8, r8)
 800c1e4:	46bd      	mov	sp, r7
 800c1e6:	b006      	add	sp, #24
 800c1e8:	bd80      	pop	{r7, pc}
 800c1ea:	46c0      	nop			@ (mov r8, r8)
 800c1ec:	0802e298 	.word	0x0802e298

0800c1f0 <efficient10log10>:

// Calculate 10*log10(P), returning the result as an integer part
// and a 1-decimal-place fractional part.
// i.e. result = integerPart + (fractionalPart/10);
void efficient10log10(uint64_t P, int32_t * integerPart, int32_t * fractionalPart)
{
 800c1f0:	b5b0      	push	{r4, r5, r7, lr}
 800c1f2:	b090      	sub	sp, #64	@ 0x40
 800c1f4:	af00      	add	r7, sp, #0
 800c1f6:	6138      	str	r0, [r7, #16]
 800c1f8:	6179      	str	r1, [r7, #20]
 800c1fa:	60fa      	str	r2, [r7, #12]
 800c1fc:	60bb      	str	r3, [r7, #8]
    // NOTE: the CLZ (count leading zeros) instruction is not available on M0/M0+
    // so use a simple shifting algorithm:
    uint64_t limit = (((uint64_t) 1) << mantissa_kBits) - 1; // limit = ((2^kBits)-1)
 800c1fe:	2308      	movs	r3, #8
 800c200:	001a      	movs	r2, r3
 800c202:	3a20      	subs	r2, #32
 800c204:	2a00      	cmp	r2, #0
 800c206:	db03      	blt.n	800c210 <efficient10log10+0x20>
 800c208:	2101      	movs	r1, #1
 800c20a:	4091      	lsls	r1, r2
 800c20c:	000d      	movs	r5, r1
 800c20e:	e008      	b.n	800c222 <efficient10log10+0x32>
 800c210:	2220      	movs	r2, #32
 800c212:	1ad2      	subs	r2, r2, r3
 800c214:	2101      	movs	r1, #1
 800c216:	40d1      	lsrs	r1, r2
 800c218:	000a      	movs	r2, r1
 800c21a:	2100      	movs	r1, #0
 800c21c:	4099      	lsls	r1, r3
 800c21e:	000d      	movs	r5, r1
 800c220:	4315      	orrs	r5, r2
 800c222:	2201      	movs	r2, #1
 800c224:	409a      	lsls	r2, r3
 800c226:	0014      	movs	r4, r2
 800c228:	2201      	movs	r2, #1
 800c22a:	4252      	negs	r2, r2
 800c22c:	17d3      	asrs	r3, r2, #31
 800c22e:	1912      	adds	r2, r2, r4
 800c230:	416b      	adcs	r3, r5
 800c232:	633a      	str	r2, [r7, #48]	@ 0x30
 800c234:	637b      	str	r3, [r7, #52]	@ 0x34
    // Bit-shift P downwards until the remaining mantissa is a
    // "mantissa_kBits" length value
    uint16_t bShift = 0;
 800c236:	2336      	movs	r3, #54	@ 0x36
 800c238:	2208      	movs	r2, #8
 800c23a:	189b      	adds	r3, r3, r2
 800c23c:	19db      	adds	r3, r3, r7
 800c23e:	2200      	movs	r2, #0
 800c240:	801a      	strh	r2, [r3, #0]
    while (P > limit)
 800c242:	e017      	b.n	800c274 <efficient10log10+0x84>
    {
        P = P >> 1;
 800c244:	697b      	ldr	r3, [r7, #20]
 800c246:	07db      	lsls	r3, r3, #31
 800c248:	693a      	ldr	r2, [r7, #16]
 800c24a:	0852      	lsrs	r2, r2, #1
 800c24c:	603a      	str	r2, [r7, #0]
 800c24e:	683a      	ldr	r2, [r7, #0]
 800c250:	431a      	orrs	r2, r3
 800c252:	603a      	str	r2, [r7, #0]
 800c254:	697b      	ldr	r3, [r7, #20]
 800c256:	085b      	lsrs	r3, r3, #1
 800c258:	607b      	str	r3, [r7, #4]
 800c25a:	683b      	ldr	r3, [r7, #0]
 800c25c:	687c      	ldr	r4, [r7, #4]
 800c25e:	613b      	str	r3, [r7, #16]
 800c260:	617c      	str	r4, [r7, #20]
        bShift++;
 800c262:	2136      	movs	r1, #54	@ 0x36
 800c264:	2008      	movs	r0, #8
 800c266:	180b      	adds	r3, r1, r0
 800c268:	19db      	adds	r3, r3, r7
 800c26a:	881a      	ldrh	r2, [r3, #0]
 800c26c:	180b      	adds	r3, r1, r0
 800c26e:	19db      	adds	r3, r3, r7
 800c270:	3201      	adds	r2, #1
 800c272:	801a      	strh	r2, [r3, #0]
    while (P > limit)
 800c274:	697a      	ldr	r2, [r7, #20]
 800c276:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c278:	429a      	cmp	r2, r3
 800c27a:	d8e3      	bhi.n	800c244 <efficient10log10+0x54>
 800c27c:	697a      	ldr	r2, [r7, #20]
 800c27e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c280:	429a      	cmp	r2, r3
 800c282:	d103      	bne.n	800c28c <efficient10log10+0x9c>
 800c284:	693a      	ldr	r2, [r7, #16]
 800c286:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c288:	429a      	cmp	r2, r3
 800c28a:	d8db      	bhi.n	800c244 <efficient10log10+0x54>
    }
    // Calculate the index to the LUT:
    uint32_t ind = ((uint32_t) P) - (((uint32_t) 1) << (mantissa_kBits-1));
 800c28c:	693a      	ldr	r2, [r7, #16]
 800c28e:	2308      	movs	r3, #8
 800c290:	3b01      	subs	r3, #1
 800c292:	2101      	movs	r1, #1
 800c294:	4099      	lsls	r1, r3
 800c296:	000b      	movs	r3, r1
 800c298:	1ad3      	subs	r3, r2, r3
 800c29a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    // Do the lookup:
    uint32_t lutIntPart = 0;
 800c29c:	2300      	movs	r3, #0
 800c29e:	62bb      	str	r3, [r7, #40]	@ 0x28
    uint32_t lutFracPart = 0;
 800c2a0:	2300      	movs	r3, #0
 800c2a2:	627b      	str	r3, [r7, #36]	@ 0x24
    accessLUT10log10(ind, &lutIntPart, &lutFracPart);
 800c2a4:	231c      	movs	r3, #28
 800c2a6:	2408      	movs	r4, #8
 800c2a8:	191b      	adds	r3, r3, r4
 800c2aa:	19da      	adds	r2, r3, r7
 800c2ac:	2320      	movs	r3, #32
 800c2ae:	191b      	adds	r3, r3, r4
 800c2b0:	19d9      	adds	r1, r3, r7
 800c2b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c2b4:	0018      	movs	r0, r3
 800c2b6:	f7ff ff71 	bl	800c19c <accessLUT10log10>
    // Provide the result as an integer and fractional part
    // (with the fractional part x10)
    int32_t intPart = (int32_t) (intOffset10log10 + lutIntPart
 800c2ba:	2215      	movs	r2, #21
 800c2bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c2be:	18d3      	adds	r3, r2, r3
                        + (bShift * TLT2_intPart));
 800c2c0:	2036      	movs	r0, #54	@ 0x36
 800c2c2:	1902      	adds	r2, r0, r4
 800c2c4:	19d2      	adds	r2, r2, r7
 800c2c6:	8812      	ldrh	r2, [r2, #0]
 800c2c8:	2103      	movs	r1, #3
 800c2ca:	434a      	muls	r2, r1
 800c2cc:	189b      	adds	r3, r3, r2
    int32_t intPart = (int32_t) (intOffset10log10 + lutIntPart
 800c2ce:	623b      	str	r3, [r7, #32]
    int32_t fracPart = (int32_t) (lutFracPart
                        + ((bShift * TLT2_shiftedFracPart) >> TLT2_bitshift));
 800c2d0:	0021      	movs	r1, r4
 800c2d2:	1843      	adds	r3, r0, r1
 800c2d4:	19db      	adds	r3, r3, r7
 800c2d6:	881b      	ldrh	r3, [r3, #0]
 800c2d8:	2201      	movs	r2, #1
 800c2da:	4353      	muls	r3, r2
 800c2dc:	2203      	movs	r2, #3
 800c2de:	4113      	asrs	r3, r2
 800c2e0:	001a      	movs	r2, r3
 800c2e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c2e4:	18d3      	adds	r3, r2, r3
    int32_t fracPart = (int32_t) (lutFracPart
 800c2e6:	61fb      	str	r3, [r7, #28]
    // Make a correction if fractional part is not in range 0->9:
    correctIntFracNumber(&intPart, &fracPart);
 800c2e8:	2314      	movs	r3, #20
 800c2ea:	185b      	adds	r3, r3, r1
 800c2ec:	19da      	adds	r2, r3, r7
 800c2ee:	2318      	movs	r3, #24
 800c2f0:	185b      	adds	r3, r3, r1
 800c2f2:	19db      	adds	r3, r3, r7
 800c2f4:	0011      	movs	r1, r2
 800c2f6:	0018      	movs	r0, r3
 800c2f8:	f000 f80a 	bl	800c310 <correctIntFracNumber>
    integerPart[0] = intPart;
 800c2fc:	6a3a      	ldr	r2, [r7, #32]
 800c2fe:	68fb      	ldr	r3, [r7, #12]
 800c300:	601a      	str	r2, [r3, #0]
    fractionalPart[0] = fracPart;
 800c302:	69fa      	ldr	r2, [r7, #28]
 800c304:	68bb      	ldr	r3, [r7, #8]
 800c306:	601a      	str	r2, [r3, #0]
}
 800c308:	46c0      	nop			@ (mov r8, r8)
 800c30a:	46bd      	mov	sp, r7
 800c30c:	b010      	add	sp, #64	@ 0x40
 800c30e:	bdb0      	pop	{r4, r5, r7, pc}

0800c310 <correctIntFracNumber>:
// 1-decimal-place fractional parts, correct the result if the fractional
// part has grown to be larger than 9.
// Valid numbers have same sign of both int and frac parts
// (or one/both parts zero) AND |fracPart| < 10
void correctIntFracNumber(int32_t * intPart, int32_t * fracPart)
{
 800c310:	b580      	push	{r7, lr}
 800c312:	b082      	sub	sp, #8
 800c314:	af00      	add	r7, sp, #0
 800c316:	6078      	str	r0, [r7, #4]
 800c318:	6039      	str	r1, [r7, #0]
    while (fracPart[0] >= 10)
 800c31a:	e00a      	b.n	800c332 <correctIntFracNumber+0x22>
    {
        intPart[0] = intPart[0] + 1;
 800c31c:	687b      	ldr	r3, [r7, #4]
 800c31e:	681b      	ldr	r3, [r3, #0]
 800c320:	1c5a      	adds	r2, r3, #1
 800c322:	687b      	ldr	r3, [r7, #4]
 800c324:	601a      	str	r2, [r3, #0]
        fracPart[0] = fracPart[0] - 10;
 800c326:	683b      	ldr	r3, [r7, #0]
 800c328:	681b      	ldr	r3, [r3, #0]
 800c32a:	3b0a      	subs	r3, #10
 800c32c:	001a      	movs	r2, r3
 800c32e:	683b      	ldr	r3, [r7, #0]
 800c330:	601a      	str	r2, [r3, #0]
    while (fracPart[0] >= 10)
 800c332:	683b      	ldr	r3, [r7, #0]
 800c334:	681b      	ldr	r3, [r3, #0]
 800c336:	2b09      	cmp	r3, #9
 800c338:	dcf0      	bgt.n	800c31c <correctIntFracNumber+0xc>
    }
    while (fracPart[0] <= -10)
 800c33a:	e00a      	b.n	800c352 <correctIntFracNumber+0x42>
    {
        intPart[0] = intPart[0] - 1;
 800c33c:	687b      	ldr	r3, [r7, #4]
 800c33e:	681b      	ldr	r3, [r3, #0]
 800c340:	1e5a      	subs	r2, r3, #1
 800c342:	687b      	ldr	r3, [r7, #4]
 800c344:	601a      	str	r2, [r3, #0]
        fracPart[0] = fracPart[0] + 10;
 800c346:	683b      	ldr	r3, [r7, #0]
 800c348:	681b      	ldr	r3, [r3, #0]
 800c34a:	330a      	adds	r3, #10
 800c34c:	001a      	movs	r2, r3
 800c34e:	683b      	ldr	r3, [r7, #0]
 800c350:	601a      	str	r2, [r3, #0]
    while (fracPart[0] <= -10)
 800c352:	683b      	ldr	r3, [r7, #0]
 800c354:	681b      	ldr	r3, [r3, #0]
 800c356:	3309      	adds	r3, #9
 800c358:	dbf0      	blt.n	800c33c <correctIntFracNumber+0x2c>
    }
    // now correct cases where signs are not consistent:
    if ((intPart[0] < 0) && (fracPart[0] > 0))
 800c35a:	687b      	ldr	r3, [r7, #4]
 800c35c:	681b      	ldr	r3, [r3, #0]
 800c35e:	2b00      	cmp	r3, #0
 800c360:	da0f      	bge.n	800c382 <correctIntFracNumber+0x72>
 800c362:	683b      	ldr	r3, [r7, #0]
 800c364:	681b      	ldr	r3, [r3, #0]
 800c366:	2b00      	cmp	r3, #0
 800c368:	dd0b      	ble.n	800c382 <correctIntFracNumber+0x72>
    {
        intPart[0] = intPart[0] + 1;
 800c36a:	687b      	ldr	r3, [r7, #4]
 800c36c:	681b      	ldr	r3, [r3, #0]
 800c36e:	1c5a      	adds	r2, r3, #1
 800c370:	687b      	ldr	r3, [r7, #4]
 800c372:	601a      	str	r2, [r3, #0]
        fracPart[0] = fracPart[0] - 10;
 800c374:	683b      	ldr	r3, [r7, #0]
 800c376:	681b      	ldr	r3, [r3, #0]
 800c378:	3b0a      	subs	r3, #10
 800c37a:	001a      	movs	r2, r3
 800c37c:	683b      	ldr	r3, [r7, #0]
 800c37e:	601a      	str	r2, [r3, #0]
    else if ((intPart[0] > 0) && (fracPart[0] < 0))
    {
        intPart[0] = intPart[0] - 1;
        fracPart[0] = fracPart[0] + 10;
    }
}
 800c380:	e012      	b.n	800c3a8 <correctIntFracNumber+0x98>
    else if ((intPart[0] > 0) && (fracPart[0] < 0))
 800c382:	687b      	ldr	r3, [r7, #4]
 800c384:	681b      	ldr	r3, [r3, #0]
 800c386:	2b00      	cmp	r3, #0
 800c388:	dd0e      	ble.n	800c3a8 <correctIntFracNumber+0x98>
 800c38a:	683b      	ldr	r3, [r7, #0]
 800c38c:	681b      	ldr	r3, [r3, #0]
 800c38e:	2b00      	cmp	r3, #0
 800c390:	da0a      	bge.n	800c3a8 <correctIntFracNumber+0x98>
        intPart[0] = intPart[0] - 1;
 800c392:	687b      	ldr	r3, [r7, #4]
 800c394:	681b      	ldr	r3, [r3, #0]
 800c396:	1e5a      	subs	r2, r3, #1
 800c398:	687b      	ldr	r3, [r7, #4]
 800c39a:	601a      	str	r2, [r3, #0]
        fracPart[0] = fracPart[0] + 10;
 800c39c:	683b      	ldr	r3, [r7, #0]
 800c39e:	681b      	ldr	r3, [r3, #0]
 800c3a0:	330a      	adds	r3, #10
 800c3a2:	001a      	movs	r2, r3
 800c3a4:	683b      	ldr	r3, [r7, #0]
 800c3a6:	601a      	str	r2, [r3, #0]
}
 800c3a8:	46c0      	nop			@ (mov r8, r8)
 800c3aa:	46bd      	mov	sp, r7
 800c3ac:	b002      	add	sp, #8
 800c3ae:	bd80      	pop	{r7, pc}

0800c3b0 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 800c3b0:	b590      	push	{r4, r7, lr}
 800c3b2:	b08b      	sub	sp, #44	@ 0x2c
 800c3b4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c3b6:	2414      	movs	r4, #20
 800c3b8:	193b      	adds	r3, r7, r4
 800c3ba:	0018      	movs	r0, r3
 800c3bc:	2314      	movs	r3, #20
 800c3be:	001a      	movs	r2, r3
 800c3c0:	2100      	movs	r1, #0
 800c3c2:	f01a f8ad 	bl	8026520 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800c3c6:	4b8a      	ldr	r3, [pc, #552]	@ (800c5f0 <MX_GPIO_Init+0x240>)
 800c3c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c3ca:	4b89      	ldr	r3, [pc, #548]	@ (800c5f0 <MX_GPIO_Init+0x240>)
 800c3cc:	2104      	movs	r1, #4
 800c3ce:	430a      	orrs	r2, r1
 800c3d0:	62da      	str	r2, [r3, #44]	@ 0x2c
 800c3d2:	4b87      	ldr	r3, [pc, #540]	@ (800c5f0 <MX_GPIO_Init+0x240>)
 800c3d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c3d6:	2204      	movs	r2, #4
 800c3d8:	4013      	ands	r3, r2
 800c3da:	613b      	str	r3, [r7, #16]
 800c3dc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800c3de:	4b84      	ldr	r3, [pc, #528]	@ (800c5f0 <MX_GPIO_Init+0x240>)
 800c3e0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c3e2:	4b83      	ldr	r3, [pc, #524]	@ (800c5f0 <MX_GPIO_Init+0x240>)
 800c3e4:	2180      	movs	r1, #128	@ 0x80
 800c3e6:	430a      	orrs	r2, r1
 800c3e8:	62da      	str	r2, [r3, #44]	@ 0x2c
 800c3ea:	4b81      	ldr	r3, [pc, #516]	@ (800c5f0 <MX_GPIO_Init+0x240>)
 800c3ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c3ee:	2280      	movs	r2, #128	@ 0x80
 800c3f0:	4013      	ands	r3, r2
 800c3f2:	60fb      	str	r3, [r7, #12]
 800c3f4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800c3f6:	4b7e      	ldr	r3, [pc, #504]	@ (800c5f0 <MX_GPIO_Init+0x240>)
 800c3f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c3fa:	4b7d      	ldr	r3, [pc, #500]	@ (800c5f0 <MX_GPIO_Init+0x240>)
 800c3fc:	2101      	movs	r1, #1
 800c3fe:	430a      	orrs	r2, r1
 800c400:	62da      	str	r2, [r3, #44]	@ 0x2c
 800c402:	4b7b      	ldr	r3, [pc, #492]	@ (800c5f0 <MX_GPIO_Init+0x240>)
 800c404:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c406:	2201      	movs	r2, #1
 800c408:	4013      	ands	r3, r2
 800c40a:	60bb      	str	r3, [r7, #8]
 800c40c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800c40e:	4b78      	ldr	r3, [pc, #480]	@ (800c5f0 <MX_GPIO_Init+0x240>)
 800c410:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c412:	4b77      	ldr	r3, [pc, #476]	@ (800c5f0 <MX_GPIO_Init+0x240>)
 800c414:	2102      	movs	r1, #2
 800c416:	430a      	orrs	r2, r1
 800c418:	62da      	str	r2, [r3, #44]	@ 0x2c
 800c41a:	4b75      	ldr	r3, [pc, #468]	@ (800c5f0 <MX_GPIO_Init+0x240>)
 800c41c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c41e:	2202      	movs	r2, #2
 800c420:	4013      	ands	r3, r2
 800c422:	607b      	str	r3, [r7, #4]
 800c424:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800c426:	4b72      	ldr	r3, [pc, #456]	@ (800c5f0 <MX_GPIO_Init+0x240>)
 800c428:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c42a:	4b71      	ldr	r3, [pc, #452]	@ (800c5f0 <MX_GPIO_Init+0x240>)
 800c42c:	2108      	movs	r1, #8
 800c42e:	430a      	orrs	r2, r1
 800c430:	62da      	str	r2, [r3, #44]	@ 0x2c
 800c432:	4b6f      	ldr	r3, [pc, #444]	@ (800c5f0 <MX_GPIO_Init+0x240>)
 800c434:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c436:	2208      	movs	r2, #8
 800c438:	4013      	ands	r3, r2
 800c43a:	603b      	str	r3, [r7, #0]
 800c43c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_SET);
 800c43e:	4b6d      	ldr	r3, [pc, #436]	@ (800c5f4 <MX_GPIO_Init+0x244>)
 800c440:	2201      	movs	r2, #1
 800c442:	2101      	movs	r1, #1
 800c444:	0018      	movs	r0, r3
 800c446:	f009 fce4 	bl	8015e12 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, GPIO_PIN_RESET);
 800c44a:	4b6a      	ldr	r3, [pc, #424]	@ (800c5f4 <MX_GPIO_Init+0x244>)
 800c44c:	2200      	movs	r2, #0
 800c44e:	2102      	movs	r1, #2
 800c450:	0018      	movs	r0, r3
 800c452:	f009 fcde 	bl	8015e12 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MCU_LED_C_R_Pin|MCU_LED_C_G_Pin|MCU_LED_C_B_Pin, GPIO_PIN_SET);
 800c456:	4968      	ldr	r1, [pc, #416]	@ (800c5f8 <MX_GPIO_Init+0x248>)
 800c458:	4b68      	ldr	r3, [pc, #416]	@ (800c5fc <MX_GPIO_Init+0x24c>)
 800c45a:	2201      	movs	r2, #1
 800c45c:	0018      	movs	r0, r3
 800c45e:	f009 fcd8 	bl	8015e12 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_SET);
 800c462:	2380      	movs	r3, #128	@ 0x80
 800c464:	011b      	lsls	r3, r3, #4
 800c466:	4866      	ldr	r0, [pc, #408]	@ (800c600 <MX_GPIO_Init+0x250>)
 800c468:	2201      	movs	r2, #1
 800c46a:	0019      	movs	r1, r3
 800c46c:	f009 fcd1 	bl	8015e12 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Boost_Enable_GPIO_Port, Boost_Enable_Pin, GPIO_PIN_RESET);
 800c470:	2380      	movs	r3, #128	@ 0x80
 800c472:	015b      	lsls	r3, r3, #5
 800c474:	4862      	ldr	r0, [pc, #392]	@ (800c600 <MX_GPIO_Init+0x250>)
 800c476:	2200      	movs	r2, #0
 800c478:	0019      	movs	r1, r3
 800c47a:	f009 fcca 	bl	8015e12 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC2 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_2|GPIO_PIN_3;
 800c47e:	193b      	adds	r3, r7, r4
 800c480:	4a60      	ldr	r2, [pc, #384]	@ (800c604 <MX_GPIO_Init+0x254>)
 800c482:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800c484:	193b      	adds	r3, r7, r4
 800c486:	2203      	movs	r2, #3
 800c488:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c48a:	193b      	adds	r3, r7, r4
 800c48c:	2200      	movs	r2, #0
 800c48e:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800c490:	193b      	adds	r3, r7, r4
 800c492:	4a5b      	ldr	r2, [pc, #364]	@ (800c600 <MX_GPIO_Init+0x250>)
 800c494:	0019      	movs	r1, r3
 800c496:	0010      	movs	r0, r2
 800c498:	f009 fb20 	bl	8015adc <HAL_GPIO_Init>

  /*Configure GPIO pins : PHPin PHPin */
  GPIO_InitStruct.Pin = ESP32_EN_Pin|ESP32_BOOT_Pin;
 800c49c:	193b      	adds	r3, r7, r4
 800c49e:	2203      	movs	r2, #3
 800c4a0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800c4a2:	193b      	adds	r3, r7, r4
 800c4a4:	2201      	movs	r2, #1
 800c4a6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c4a8:	193b      	adds	r3, r7, r4
 800c4aa:	2200      	movs	r2, #0
 800c4ac:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c4ae:	193b      	adds	r3, r7, r4
 800c4b0:	2200      	movs	r2, #0
 800c4b2:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800c4b4:	193b      	adds	r3, r7, r4
 800c4b6:	4a4f      	ldr	r2, [pc, #316]	@ (800c5f4 <MX_GPIO_Init+0x244>)
 800c4b8:	0019      	movs	r1, r3
 800c4ba:	0010      	movs	r0, r2
 800c4bc:	f009 fb0e 	bl	8015adc <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA5 PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 800c4c0:	193b      	adds	r3, r7, r4
 800c4c2:	2270      	movs	r2, #112	@ 0x70
 800c4c4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800c4c6:	193b      	adds	r3, r7, r4
 800c4c8:	2203      	movs	r2, #3
 800c4ca:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c4cc:	193b      	adds	r3, r7, r4
 800c4ce:	2200      	movs	r2, #0
 800c4d0:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c4d2:	193a      	adds	r2, r7, r4
 800c4d4:	23a0      	movs	r3, #160	@ 0xa0
 800c4d6:	05db      	lsls	r3, r3, #23
 800c4d8:	0011      	movs	r1, r2
 800c4da:	0018      	movs	r0, r3
 800c4dc:	f009 fafe 	bl	8015adc <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = VusbDetect_Pin|Wireless_PSU_PG_Pin;
 800c4e0:	193b      	adds	r3, r7, r4
 800c4e2:	22c0      	movs	r2, #192	@ 0xc0
 800c4e4:	0052      	lsls	r2, r2, #1
 800c4e6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800c4e8:	193b      	adds	r3, r7, r4
 800c4ea:	2200      	movs	r2, #0
 800c4ec:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c4ee:	193b      	adds	r3, r7, r4
 800c4f0:	2200      	movs	r2, #0
 800c4f2:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c4f4:	193a      	adds	r2, r7, r4
 800c4f6:	23a0      	movs	r3, #160	@ 0xa0
 800c4f8:	05db      	lsls	r3, r3, #23
 800c4fa:	0011      	movs	r1, r2
 800c4fc:	0018      	movs	r0, r3
 800c4fe:	f009 faed 	bl	8015adc <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = MCU_LED_C_R_Pin|MCU_LED_C_G_Pin|MCU_LED_C_B_Pin;
 800c502:	193b      	adds	r3, r7, r4
 800c504:	4a3c      	ldr	r2, [pc, #240]	@ (800c5f8 <MX_GPIO_Init+0x248>)
 800c506:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800c508:	193b      	adds	r3, r7, r4
 800c50a:	2201      	movs	r2, #1
 800c50c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c50e:	193b      	adds	r3, r7, r4
 800c510:	2200      	movs	r2, #0
 800c512:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c514:	193b      	adds	r3, r7, r4
 800c516:	2200      	movs	r2, #0
 800c518:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800c51a:	193b      	adds	r3, r7, r4
 800c51c:	4a37      	ldr	r2, [pc, #220]	@ (800c5fc <MX_GPIO_Init+0x24c>)
 800c51e:	0019      	movs	r1, r3
 800c520:	0010      	movs	r0, r2
 800c522:	f009 fadb 	bl	8015adc <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB2 PB14 PB3
                           PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_14|GPIO_PIN_3
 800c526:	193b      	adds	r3, r7, r4
 800c528:	4a37      	ldr	r2, [pc, #220]	@ (800c608 <MX_GPIO_Init+0x258>)
 800c52a:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_4|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800c52c:	193b      	adds	r3, r7, r4
 800c52e:	2203      	movs	r2, #3
 800c530:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c532:	193b      	adds	r3, r7, r4
 800c534:	2200      	movs	r2, #0
 800c536:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800c538:	193b      	adds	r3, r7, r4
 800c53a:	4a30      	ldr	r2, [pc, #192]	@ (800c5fc <MX_GPIO_Init+0x24c>)
 800c53c:	0019      	movs	r1, r3
 800c53e:	0010      	movs	r0, r2
 800c540:	f009 facc 	bl	8015adc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Charger_status_Pin;
 800c544:	0021      	movs	r1, r4
 800c546:	187b      	adds	r3, r7, r1
 800c548:	2280      	movs	r2, #128	@ 0x80
 800c54a:	0092      	lsls	r2, r2, #2
 800c54c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800c54e:	000c      	movs	r4, r1
 800c550:	193b      	adds	r3, r7, r4
 800c552:	2200      	movs	r2, #0
 800c554:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c556:	193b      	adds	r3, r7, r4
 800c558:	2200      	movs	r2, #0
 800c55a:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(Charger_status_GPIO_Port, &GPIO_InitStruct);
 800c55c:	193b      	adds	r3, r7, r4
 800c55e:	4a28      	ldr	r2, [pc, #160]	@ (800c600 <MX_GPIO_Init+0x250>)
 800c560:	0019      	movs	r1, r3
 800c562:	0010      	movs	r0, r2
 800c564:	f009 faba 	bl	8015adc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BOOT0_Pin;
 800c568:	193b      	adds	r3, r7, r4
 800c56a:	2280      	movs	r2, #128	@ 0x80
 800c56c:	0212      	lsls	r2, r2, #8
 800c56e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800c570:	193b      	adds	r3, r7, r4
 800c572:	2288      	movs	r2, #136	@ 0x88
 800c574:	0352      	lsls	r2, r2, #13
 800c576:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c578:	193b      	adds	r3, r7, r4
 800c57a:	2200      	movs	r2, #0
 800c57c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(BOOT0_GPIO_Port, &GPIO_InitStruct);
 800c57e:	193a      	adds	r2, r7, r4
 800c580:	23a0      	movs	r3, #160	@ 0xa0
 800c582:	05db      	lsls	r3, r3, #23
 800c584:	0011      	movs	r1, r2
 800c586:	0018      	movs	r0, r3
 800c588:	f009 faa8 	bl	8015adc <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = Wireless_PSU_EN_Pin|Boost_Enable_Pin;
 800c58c:	0021      	movs	r1, r4
 800c58e:	187b      	adds	r3, r7, r1
 800c590:	22c0      	movs	r2, #192	@ 0xc0
 800c592:	0152      	lsls	r2, r2, #5
 800c594:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800c596:	000c      	movs	r4, r1
 800c598:	193b      	adds	r3, r7, r4
 800c59a:	2201      	movs	r2, #1
 800c59c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c59e:	193b      	adds	r3, r7, r4
 800c5a0:	2200      	movs	r2, #0
 800c5a2:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c5a4:	193b      	adds	r3, r7, r4
 800c5a6:	2200      	movs	r2, #0
 800c5a8:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800c5aa:	193b      	adds	r3, r7, r4
 800c5ac:	4a14      	ldr	r2, [pc, #80]	@ (800c600 <MX_GPIO_Init+0x250>)
 800c5ae:	0019      	movs	r1, r3
 800c5b0:	0010      	movs	r0, r2
 800c5b2:	f009 fa93 	bl	8015adc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = User_Button_Pin;
 800c5b6:	0021      	movs	r1, r4
 800c5b8:	187b      	adds	r3, r7, r1
 800c5ba:	2204      	movs	r2, #4
 800c5bc:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800c5be:	187b      	adds	r3, r7, r1
 800c5c0:	2200      	movs	r2, #0
 800c5c2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800c5c4:	187b      	adds	r3, r7, r1
 800c5c6:	2201      	movs	r2, #1
 800c5c8:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(User_Button_GPIO_Port, &GPIO_InitStruct);
 800c5ca:	187b      	adds	r3, r7, r1
 800c5cc:	4a0f      	ldr	r2, [pc, #60]	@ (800c60c <MX_GPIO_Init+0x25c>)
 800c5ce:	0019      	movs	r1, r3
 800c5d0:	0010      	movs	r0, r2
 800c5d2:	f009 fa83 	bl	8015adc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 800c5d6:	2200      	movs	r2, #0
 800c5d8:	2100      	movs	r1, #0
 800c5da:	2007      	movs	r0, #7
 800c5dc:	f008 fe2c 	bl	8015238 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 800c5e0:	2007      	movs	r0, #7
 800c5e2:	f008 fe3e 	bl	8015262 <HAL_NVIC_EnableIRQ>

}
 800c5e6:	46c0      	nop			@ (mov r8, r8)
 800c5e8:	46bd      	mov	sp, r7
 800c5ea:	b00b      	add	sp, #44	@ 0x2c
 800c5ec:	bd90      	pop	{r4, r7, pc}
 800c5ee:	46c0      	nop			@ (mov r8, r8)
 800c5f0:	40021000 	.word	0x40021000
 800c5f4:	50001c00 	.word	0x50001c00
 800c5f8:	00000301 	.word	0x00000301
 800c5fc:	50000400 	.word	0x50000400
 800c600:	50000800 	.word	0x50000800
 800c604:	0000200c 	.word	0x0000200c
 800c608:	0000403e 	.word	0x0000403e
 800c60c:	50000c00 	.word	0x50000c00

0800c610 <GPIO_InitPWMLEDs>:

/* USER CODE BEGIN 2 */
void GPIO_InitPWMLEDs(TIM_HandleTypeDef* timer2, TIM_HandleTypeDef* timer3) {
 800c610:	b580      	push	{r7, lr}
 800c612:	b082      	sub	sp, #8
 800c614:	af00      	add	r7, sp, #0
 800c616:	6078      	str	r0, [r7, #4]
 800c618:	6039      	str	r1, [r7, #0]
  // Timer 2 PWM init
  HAL_TIM_PWM_Start(timer2, TIM_CHANNEL_1);
 800c61a:	687b      	ldr	r3, [r7, #4]
 800c61c:	2100      	movs	r1, #0
 800c61e:	0018      	movs	r0, r3
 800c620:	f010 fb76 	bl	801cd10 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(timer2, TIM_CHANNEL_3);
 800c624:	687b      	ldr	r3, [r7, #4]
 800c626:	2108      	movs	r1, #8
 800c628:	0018      	movs	r0, r3
 800c62a:	f010 fb71 	bl	801cd10 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(timer2, TIM_CHANNEL_4);
 800c62e:	687b      	ldr	r3, [r7, #4]
 800c630:	210c      	movs	r1, #12
 800c632:	0018      	movs	r0, r3
 800c634:	f010 fb6c 	bl	801cd10 <HAL_TIM_PWM_Start>
  TIM2 -> ARR = 4000;
 800c638:	2380      	movs	r3, #128	@ 0x80
 800c63a:	05db      	lsls	r3, r3, #23
 800c63c:	22fa      	movs	r2, #250	@ 0xfa
 800c63e:	0112      	lsls	r2, r2, #4
 800c640:	62da      	str	r2, [r3, #44]	@ 0x2c

  // Resetting the LEDs.
  // CCR1 = Red, CCR3 = Green, CCR4 = Blue.
  TIM2 -> CCR1 = 4000;
 800c642:	2380      	movs	r3, #128	@ 0x80
 800c644:	05db      	lsls	r3, r3, #23
 800c646:	22fa      	movs	r2, #250	@ 0xfa
 800c648:	0112      	lsls	r2, r2, #4
 800c64a:	635a      	str	r2, [r3, #52]	@ 0x34
  TIM2 -> CCR3 = 4000;
 800c64c:	2380      	movs	r3, #128	@ 0x80
 800c64e:	05db      	lsls	r3, r3, #23
 800c650:	22fa      	movs	r2, #250	@ 0xfa
 800c652:	0112      	lsls	r2, r2, #4
 800c654:	63da      	str	r2, [r3, #60]	@ 0x3c
  TIM2 -> CCR4 = 4000;
 800c656:	2380      	movs	r3, #128	@ 0x80
 800c658:	05db      	lsls	r3, r3, #23
 800c65a:	22fa      	movs	r2, #250	@ 0xfa
 800c65c:	0112      	lsls	r2, r2, #4
 800c65e:	641a      	str	r2, [r3, #64]	@ 0x40

  // Timer 3 PWM init
  HAL_TIM_PWM_Start(timer3, TIM_CHANNEL_1);
 800c660:	683b      	ldr	r3, [r7, #0]
 800c662:	2100      	movs	r1, #0
 800c664:	0018      	movs	r0, r3
 800c666:	f010 fb53 	bl	801cd10 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(timer3, TIM_CHANNEL_2);
 800c66a:	683b      	ldr	r3, [r7, #0]
 800c66c:	2104      	movs	r1, #4
 800c66e:	0018      	movs	r0, r3
 800c670:	f010 fb4e 	bl	801cd10 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(timer3, TIM_CHANNEL_3);
 800c674:	683b      	ldr	r3, [r7, #0]
 800c676:	2108      	movs	r1, #8
 800c678:	0018      	movs	r0, r3
 800c67a:	f010 fb49 	bl	801cd10 <HAL_TIM_PWM_Start>
  TIM3 -> ARR = 4000;
 800c67e:	4b0a      	ldr	r3, [pc, #40]	@ (800c6a8 <GPIO_InitPWMLEDs+0x98>)
 800c680:	22fa      	movs	r2, #250	@ 0xfa
 800c682:	0112      	lsls	r2, r2, #4
 800c684:	62da      	str	r2, [r3, #44]	@ 0x2c

  // CCR1 = Red, CCR2 = Green, CCR3 = Blue.
  TIM3 -> CCR1 = 4000;
 800c686:	4b08      	ldr	r3, [pc, #32]	@ (800c6a8 <GPIO_InitPWMLEDs+0x98>)
 800c688:	22fa      	movs	r2, #250	@ 0xfa
 800c68a:	0112      	lsls	r2, r2, #4
 800c68c:	635a      	str	r2, [r3, #52]	@ 0x34
  TIM3 -> CCR2 = 4000;
 800c68e:	4b06      	ldr	r3, [pc, #24]	@ (800c6a8 <GPIO_InitPWMLEDs+0x98>)
 800c690:	22fa      	movs	r2, #250	@ 0xfa
 800c692:	0112      	lsls	r2, r2, #4
 800c694:	639a      	str	r2, [r3, #56]	@ 0x38
  TIM3 -> CCR3 = 4000;
 800c696:	4b04      	ldr	r3, [pc, #16]	@ (800c6a8 <GPIO_InitPWMLEDs+0x98>)
 800c698:	22fa      	movs	r2, #250	@ 0xfa
 800c69a:	0112      	lsls	r2, r2, #4
 800c69c:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 800c69e:	46c0      	nop			@ (mov r8, r8)
 800c6a0:	46bd      	mov	sp, r7
 800c6a2:	b002      	add	sp, #8
 800c6a4:	bd80      	pop	{r7, pc}
 800c6a6:	46c0      	nop			@ (mov r8, r8)
 800c6a8:	40000400 	.word	0x40000400

0800c6ac <MX_I2C1_Init>:
DMA_HandleTypeDef hdma_i2c1_rx;
DMA_HandleTypeDef hdma_i2c1_tx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800c6ac:	b580      	push	{r7, lr}
 800c6ae:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800c6b0:	4b1b      	ldr	r3, [pc, #108]	@ (800c720 <MX_I2C1_Init+0x74>)
 800c6b2:	4a1c      	ldr	r2, [pc, #112]	@ (800c724 <MX_I2C1_Init+0x78>)
 800c6b4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00503D58;
 800c6b6:	4b1a      	ldr	r3, [pc, #104]	@ (800c720 <MX_I2C1_Init+0x74>)
 800c6b8:	4a1b      	ldr	r2, [pc, #108]	@ (800c728 <MX_I2C1_Init+0x7c>)
 800c6ba:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800c6bc:	4b18      	ldr	r3, [pc, #96]	@ (800c720 <MX_I2C1_Init+0x74>)
 800c6be:	2200      	movs	r2, #0
 800c6c0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800c6c2:	4b17      	ldr	r3, [pc, #92]	@ (800c720 <MX_I2C1_Init+0x74>)
 800c6c4:	2201      	movs	r2, #1
 800c6c6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800c6c8:	4b15      	ldr	r3, [pc, #84]	@ (800c720 <MX_I2C1_Init+0x74>)
 800c6ca:	2200      	movs	r2, #0
 800c6cc:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800c6ce:	4b14      	ldr	r3, [pc, #80]	@ (800c720 <MX_I2C1_Init+0x74>)
 800c6d0:	2200      	movs	r2, #0
 800c6d2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800c6d4:	4b12      	ldr	r3, [pc, #72]	@ (800c720 <MX_I2C1_Init+0x74>)
 800c6d6:	2200      	movs	r2, #0
 800c6d8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800c6da:	4b11      	ldr	r3, [pc, #68]	@ (800c720 <MX_I2C1_Init+0x74>)
 800c6dc:	2200      	movs	r2, #0
 800c6de:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800c6e0:	4b0f      	ldr	r3, [pc, #60]	@ (800c720 <MX_I2C1_Init+0x74>)
 800c6e2:	2200      	movs	r2, #0
 800c6e4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800c6e6:	4b0e      	ldr	r3, [pc, #56]	@ (800c720 <MX_I2C1_Init+0x74>)
 800c6e8:	0018      	movs	r0, r3
 800c6ea:	f009 fbcb 	bl	8015e84 <HAL_I2C_Init>
 800c6ee:	1e03      	subs	r3, r0, #0
 800c6f0:	d001      	beq.n	800c6f6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800c6f2:	f000 fe59 	bl	800d3a8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800c6f6:	4b0a      	ldr	r3, [pc, #40]	@ (800c720 <MX_I2C1_Init+0x74>)
 800c6f8:	2100      	movs	r1, #0
 800c6fa:	0018      	movs	r0, r3
 800c6fc:	f00c fb38 	bl	8018d70 <HAL_I2CEx_ConfigAnalogFilter>
 800c700:	1e03      	subs	r3, r0, #0
 800c702:	d001      	beq.n	800c708 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800c704:	f000 fe50 	bl	800d3a8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800c708:	4b05      	ldr	r3, [pc, #20]	@ (800c720 <MX_I2C1_Init+0x74>)
 800c70a:	2100      	movs	r1, #0
 800c70c:	0018      	movs	r0, r3
 800c70e:	f00c fb7b 	bl	8018e08 <HAL_I2CEx_ConfigDigitalFilter>
 800c712:	1e03      	subs	r3, r0, #0
 800c714:	d001      	beq.n	800c71a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800c716:	f000 fe47 	bl	800d3a8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800c71a:	46c0      	nop			@ (mov r8, r8)
 800c71c:	46bd      	mov	sp, r7
 800c71e:	bd80      	pop	{r7, pc}
 800c720:	20000f38 	.word	0x20000f38
 800c724:	40005400 	.word	0x40005400
 800c728:	00503d58 	.word	0x00503d58

0800c72c <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 800c72c:	b580      	push	{r7, lr}
 800c72e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800c730:	4b1b      	ldr	r3, [pc, #108]	@ (800c7a0 <MX_I2C2_Init+0x74>)
 800c732:	4a1c      	ldr	r2, [pc, #112]	@ (800c7a4 <MX_I2C2_Init+0x78>)
 800c734:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00503D58;
 800c736:	4b1a      	ldr	r3, [pc, #104]	@ (800c7a0 <MX_I2C2_Init+0x74>)
 800c738:	4a1b      	ldr	r2, [pc, #108]	@ (800c7a8 <MX_I2C2_Init+0x7c>)
 800c73a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 800c73c:	4b18      	ldr	r3, [pc, #96]	@ (800c7a0 <MX_I2C2_Init+0x74>)
 800c73e:	2200      	movs	r2, #0
 800c740:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800c742:	4b17      	ldr	r3, [pc, #92]	@ (800c7a0 <MX_I2C2_Init+0x74>)
 800c744:	2201      	movs	r2, #1
 800c746:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800c748:	4b15      	ldr	r3, [pc, #84]	@ (800c7a0 <MX_I2C2_Init+0x74>)
 800c74a:	2200      	movs	r2, #0
 800c74c:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800c74e:	4b14      	ldr	r3, [pc, #80]	@ (800c7a0 <MX_I2C2_Init+0x74>)
 800c750:	2200      	movs	r2, #0
 800c752:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800c754:	4b12      	ldr	r3, [pc, #72]	@ (800c7a0 <MX_I2C2_Init+0x74>)
 800c756:	2200      	movs	r2, #0
 800c758:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800c75a:	4b11      	ldr	r3, [pc, #68]	@ (800c7a0 <MX_I2C2_Init+0x74>)
 800c75c:	2200      	movs	r2, #0
 800c75e:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800c760:	4b0f      	ldr	r3, [pc, #60]	@ (800c7a0 <MX_I2C2_Init+0x74>)
 800c762:	2200      	movs	r2, #0
 800c764:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800c766:	4b0e      	ldr	r3, [pc, #56]	@ (800c7a0 <MX_I2C2_Init+0x74>)
 800c768:	0018      	movs	r0, r3
 800c76a:	f009 fb8b 	bl	8015e84 <HAL_I2C_Init>
 800c76e:	1e03      	subs	r3, r0, #0
 800c770:	d001      	beq.n	800c776 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 800c772:	f000 fe19 	bl	800d3a8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800c776:	4b0a      	ldr	r3, [pc, #40]	@ (800c7a0 <MX_I2C2_Init+0x74>)
 800c778:	2100      	movs	r1, #0
 800c77a:	0018      	movs	r0, r3
 800c77c:	f00c faf8 	bl	8018d70 <HAL_I2CEx_ConfigAnalogFilter>
 800c780:	1e03      	subs	r3, r0, #0
 800c782:	d001      	beq.n	800c788 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 800c784:	f000 fe10 	bl	800d3a8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 800c788:	4b05      	ldr	r3, [pc, #20]	@ (800c7a0 <MX_I2C2_Init+0x74>)
 800c78a:	2100      	movs	r1, #0
 800c78c:	0018      	movs	r0, r3
 800c78e:	f00c fb3b 	bl	8018e08 <HAL_I2CEx_ConfigDigitalFilter>
 800c792:	1e03      	subs	r3, r0, #0
 800c794:	d001      	beq.n	800c79a <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 800c796:	f000 fe07 	bl	800d3a8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800c79a:	46c0      	nop			@ (mov r8, r8)
 800c79c:	46bd      	mov	sp, r7
 800c79e:	bd80      	pop	{r7, pc}
 800c7a0:	20000f8c 	.word	0x20000f8c
 800c7a4:	40005800 	.word	0x40005800
 800c7a8:	00503d58 	.word	0x00503d58

0800c7ac <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800c7ac:	b590      	push	{r4, r7, lr}
 800c7ae:	b08b      	sub	sp, #44	@ 0x2c
 800c7b0:	af00      	add	r7, sp, #0
 800c7b2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c7b4:	2414      	movs	r4, #20
 800c7b6:	193b      	adds	r3, r7, r4
 800c7b8:	0018      	movs	r0, r3
 800c7ba:	2314      	movs	r3, #20
 800c7bc:	001a      	movs	r2, r3
 800c7be:	2100      	movs	r1, #0
 800c7c0:	f019 feae 	bl	8026520 <memset>
  if(i2cHandle->Instance==I2C1)
 800c7c4:	687b      	ldr	r3, [r7, #4]
 800c7c6:	681b      	ldr	r3, [r3, #0]
 800c7c8:	4a5d      	ldr	r2, [pc, #372]	@ (800c940 <HAL_I2C_MspInit+0x194>)
 800c7ca:	4293      	cmp	r3, r2
 800c7cc:	d000      	beq.n	800c7d0 <HAL_I2C_MspInit+0x24>
 800c7ce:	e083      	b.n	800c8d8 <HAL_I2C_MspInit+0x12c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800c7d0:	4b5c      	ldr	r3, [pc, #368]	@ (800c944 <HAL_I2C_MspInit+0x198>)
 800c7d2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c7d4:	4b5b      	ldr	r3, [pc, #364]	@ (800c944 <HAL_I2C_MspInit+0x198>)
 800c7d6:	2102      	movs	r1, #2
 800c7d8:	430a      	orrs	r2, r1
 800c7da:	62da      	str	r2, [r3, #44]	@ 0x2c
 800c7dc:	4b59      	ldr	r3, [pc, #356]	@ (800c944 <HAL_I2C_MspInit+0x198>)
 800c7de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c7e0:	2202      	movs	r2, #2
 800c7e2:	4013      	ands	r3, r2
 800c7e4:	613b      	str	r3, [r7, #16]
 800c7e6:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800c7e8:	0021      	movs	r1, r4
 800c7ea:	187b      	adds	r3, r7, r1
 800c7ec:	22c0      	movs	r2, #192	@ 0xc0
 800c7ee:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800c7f0:	187b      	adds	r3, r7, r1
 800c7f2:	2212      	movs	r2, #18
 800c7f4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c7f6:	187b      	adds	r3, r7, r1
 800c7f8:	2200      	movs	r2, #0
 800c7fa:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c7fc:	187b      	adds	r3, r7, r1
 800c7fe:	2203      	movs	r2, #3
 800c800:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 800c802:	187b      	adds	r3, r7, r1
 800c804:	2201      	movs	r2, #1
 800c806:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800c808:	187b      	adds	r3, r7, r1
 800c80a:	4a4f      	ldr	r2, [pc, #316]	@ (800c948 <HAL_I2C_MspInit+0x19c>)
 800c80c:	0019      	movs	r1, r3
 800c80e:	0010      	movs	r0, r2
 800c810:	f009 f964 	bl	8015adc <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800c814:	4b4b      	ldr	r3, [pc, #300]	@ (800c944 <HAL_I2C_MspInit+0x198>)
 800c816:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c818:	4b4a      	ldr	r3, [pc, #296]	@ (800c944 <HAL_I2C_MspInit+0x198>)
 800c81a:	2180      	movs	r1, #128	@ 0x80
 800c81c:	0389      	lsls	r1, r1, #14
 800c81e:	430a      	orrs	r2, r1
 800c820:	639a      	str	r2, [r3, #56]	@ 0x38

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Channel3;
 800c822:	4b4a      	ldr	r3, [pc, #296]	@ (800c94c <HAL_I2C_MspInit+0x1a0>)
 800c824:	4a4a      	ldr	r2, [pc, #296]	@ (800c950 <HAL_I2C_MspInit+0x1a4>)
 800c826:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Request = DMA_REQUEST_6;
 800c828:	4b48      	ldr	r3, [pc, #288]	@ (800c94c <HAL_I2C_MspInit+0x1a0>)
 800c82a:	2206      	movs	r2, #6
 800c82c:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800c82e:	4b47      	ldr	r3, [pc, #284]	@ (800c94c <HAL_I2C_MspInit+0x1a0>)
 800c830:	2200      	movs	r2, #0
 800c832:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800c834:	4b45      	ldr	r3, [pc, #276]	@ (800c94c <HAL_I2C_MspInit+0x1a0>)
 800c836:	2200      	movs	r2, #0
 800c838:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800c83a:	4b44      	ldr	r3, [pc, #272]	@ (800c94c <HAL_I2C_MspInit+0x1a0>)
 800c83c:	2280      	movs	r2, #128	@ 0x80
 800c83e:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800c840:	4b42      	ldr	r3, [pc, #264]	@ (800c94c <HAL_I2C_MspInit+0x1a0>)
 800c842:	2200      	movs	r2, #0
 800c844:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800c846:	4b41      	ldr	r3, [pc, #260]	@ (800c94c <HAL_I2C_MspInit+0x1a0>)
 800c848:	2200      	movs	r2, #0
 800c84a:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 800c84c:	4b3f      	ldr	r3, [pc, #252]	@ (800c94c <HAL_I2C_MspInit+0x1a0>)
 800c84e:	2200      	movs	r2, #0
 800c850:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800c852:	4b3e      	ldr	r3, [pc, #248]	@ (800c94c <HAL_I2C_MspInit+0x1a0>)
 800c854:	2200      	movs	r2, #0
 800c856:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 800c858:	4b3c      	ldr	r3, [pc, #240]	@ (800c94c <HAL_I2C_MspInit+0x1a0>)
 800c85a:	0018      	movs	r0, r3
 800c85c:	f008 fd22 	bl	80152a4 <HAL_DMA_Init>
 800c860:	1e03      	subs	r3, r0, #0
 800c862:	d001      	beq.n	800c868 <HAL_I2C_MspInit+0xbc>
    {
      Error_Handler();
 800c864:	f000 fda0 	bl	800d3a8 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);
 800c868:	687b      	ldr	r3, [r7, #4]
 800c86a:	4a38      	ldr	r2, [pc, #224]	@ (800c94c <HAL_I2C_MspInit+0x1a0>)
 800c86c:	63da      	str	r2, [r3, #60]	@ 0x3c
 800c86e:	4b37      	ldr	r3, [pc, #220]	@ (800c94c <HAL_I2C_MspInit+0x1a0>)
 800c870:	687a      	ldr	r2, [r7, #4]
 800c872:	629a      	str	r2, [r3, #40]	@ 0x28

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Channel2;
 800c874:	4b37      	ldr	r3, [pc, #220]	@ (800c954 <HAL_I2C_MspInit+0x1a8>)
 800c876:	4a38      	ldr	r2, [pc, #224]	@ (800c958 <HAL_I2C_MspInit+0x1ac>)
 800c878:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Request = DMA_REQUEST_6;
 800c87a:	4b36      	ldr	r3, [pc, #216]	@ (800c954 <HAL_I2C_MspInit+0x1a8>)
 800c87c:	2206      	movs	r2, #6
 800c87e:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800c880:	4b34      	ldr	r3, [pc, #208]	@ (800c954 <HAL_I2C_MspInit+0x1a8>)
 800c882:	2210      	movs	r2, #16
 800c884:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800c886:	4b33      	ldr	r3, [pc, #204]	@ (800c954 <HAL_I2C_MspInit+0x1a8>)
 800c888:	2200      	movs	r2, #0
 800c88a:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800c88c:	4b31      	ldr	r3, [pc, #196]	@ (800c954 <HAL_I2C_MspInit+0x1a8>)
 800c88e:	2280      	movs	r2, #128	@ 0x80
 800c890:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800c892:	4b30      	ldr	r3, [pc, #192]	@ (800c954 <HAL_I2C_MspInit+0x1a8>)
 800c894:	2200      	movs	r2, #0
 800c896:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800c898:	4b2e      	ldr	r3, [pc, #184]	@ (800c954 <HAL_I2C_MspInit+0x1a8>)
 800c89a:	2200      	movs	r2, #0
 800c89c:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 800c89e:	4b2d      	ldr	r3, [pc, #180]	@ (800c954 <HAL_I2C_MspInit+0x1a8>)
 800c8a0:	2200      	movs	r2, #0
 800c8a2:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800c8a4:	4b2b      	ldr	r3, [pc, #172]	@ (800c954 <HAL_I2C_MspInit+0x1a8>)
 800c8a6:	2200      	movs	r2, #0
 800c8a8:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 800c8aa:	4b2a      	ldr	r3, [pc, #168]	@ (800c954 <HAL_I2C_MspInit+0x1a8>)
 800c8ac:	0018      	movs	r0, r3
 800c8ae:	f008 fcf9 	bl	80152a4 <HAL_DMA_Init>
 800c8b2:	1e03      	subs	r3, r0, #0
 800c8b4:	d001      	beq.n	800c8ba <HAL_I2C_MspInit+0x10e>
    {
      Error_Handler();
 800c8b6:	f000 fd77 	bl	800d3a8 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
 800c8ba:	687b      	ldr	r3, [r7, #4]
 800c8bc:	4a25      	ldr	r2, [pc, #148]	@ (800c954 <HAL_I2C_MspInit+0x1a8>)
 800c8be:	639a      	str	r2, [r3, #56]	@ 0x38
 800c8c0:	4b24      	ldr	r3, [pc, #144]	@ (800c954 <HAL_I2C_MspInit+0x1a8>)
 800c8c2:	687a      	ldr	r2, [r7, #4]
 800c8c4:	629a      	str	r2, [r3, #40]	@ 0x28

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_IRQn, 0, 0);
 800c8c6:	2200      	movs	r2, #0
 800c8c8:	2100      	movs	r1, #0
 800c8ca:	2017      	movs	r0, #23
 800c8cc:	f008 fcb4 	bl	8015238 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_IRQn);
 800c8d0:	2017      	movs	r0, #23
 800c8d2:	f008 fcc6 	bl	8015262 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 800c8d6:	e02e      	b.n	800c936 <HAL_I2C_MspInit+0x18a>
  else if(i2cHandle->Instance==I2C2)
 800c8d8:	687b      	ldr	r3, [r7, #4]
 800c8da:	681b      	ldr	r3, [r3, #0]
 800c8dc:	4a1f      	ldr	r2, [pc, #124]	@ (800c95c <HAL_I2C_MspInit+0x1b0>)
 800c8de:	4293      	cmp	r3, r2
 800c8e0:	d129      	bne.n	800c936 <HAL_I2C_MspInit+0x18a>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800c8e2:	4b18      	ldr	r3, [pc, #96]	@ (800c944 <HAL_I2C_MspInit+0x198>)
 800c8e4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c8e6:	4b17      	ldr	r3, [pc, #92]	@ (800c944 <HAL_I2C_MspInit+0x198>)
 800c8e8:	2102      	movs	r1, #2
 800c8ea:	430a      	orrs	r2, r1
 800c8ec:	62da      	str	r2, [r3, #44]	@ 0x2c
 800c8ee:	4b15      	ldr	r3, [pc, #84]	@ (800c944 <HAL_I2C_MspInit+0x198>)
 800c8f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c8f2:	2202      	movs	r2, #2
 800c8f4:	4013      	ands	r3, r2
 800c8f6:	60fb      	str	r3, [r7, #12]
 800c8f8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800c8fa:	2114      	movs	r1, #20
 800c8fc:	187b      	adds	r3, r7, r1
 800c8fe:	22c0      	movs	r2, #192	@ 0xc0
 800c900:	0112      	lsls	r2, r2, #4
 800c902:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800c904:	187b      	adds	r3, r7, r1
 800c906:	2212      	movs	r2, #18
 800c908:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c90a:	187b      	adds	r3, r7, r1
 800c90c:	2200      	movs	r2, #0
 800c90e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c910:	187b      	adds	r3, r7, r1
 800c912:	2203      	movs	r2, #3
 800c914:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C2;
 800c916:	187b      	adds	r3, r7, r1
 800c918:	2206      	movs	r2, #6
 800c91a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800c91c:	187b      	adds	r3, r7, r1
 800c91e:	4a0a      	ldr	r2, [pc, #40]	@ (800c948 <HAL_I2C_MspInit+0x19c>)
 800c920:	0019      	movs	r1, r3
 800c922:	0010      	movs	r0, r2
 800c924:	f009 f8da 	bl	8015adc <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 800c928:	4b06      	ldr	r3, [pc, #24]	@ (800c944 <HAL_I2C_MspInit+0x198>)
 800c92a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c92c:	4b05      	ldr	r3, [pc, #20]	@ (800c944 <HAL_I2C_MspInit+0x198>)
 800c92e:	2180      	movs	r1, #128	@ 0x80
 800c930:	03c9      	lsls	r1, r1, #15
 800c932:	430a      	orrs	r2, r1
 800c934:	639a      	str	r2, [r3, #56]	@ 0x38
}
 800c936:	46c0      	nop			@ (mov r8, r8)
 800c938:	46bd      	mov	sp, r7
 800c93a:	b00b      	add	sp, #44	@ 0x2c
 800c93c:	bd90      	pop	{r4, r7, pc}
 800c93e:	46c0      	nop			@ (mov r8, r8)
 800c940:	40005400 	.word	0x40005400
 800c944:	40021000 	.word	0x40021000
 800c948:	50000400 	.word	0x50000400
 800c94c:	20000fe0 	.word	0x20000fe0
 800c950:	40020030 	.word	0x40020030
 800c954:	20001028 	.word	0x20001028
 800c958:	4002001c 	.word	0x4002001c
 800c95c:	40005800 	.word	0x40005800

0800c960 <MX_I2S2_Init>:
I2S_HandleTypeDef hi2s2;
DMA_HandleTypeDef hdma_spi2_rx;

/* I2S2 init function */
void MX_I2S2_Init(void)
{
 800c960:	b580      	push	{r7, lr}
 800c962:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 800c964:	4b10      	ldr	r3, [pc, #64]	@ (800c9a8 <MX_I2S2_Init+0x48>)
 800c966:	4a11      	ldr	r2, [pc, #68]	@ (800c9ac <MX_I2S2_Init+0x4c>)
 800c968:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_RX;
 800c96a:	4b0f      	ldr	r3, [pc, #60]	@ (800c9a8 <MX_I2S2_Init+0x48>)
 800c96c:	22c0      	movs	r2, #192	@ 0xc0
 800c96e:	0092      	lsls	r2, r2, #2
 800c970:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 800c972:	4b0d      	ldr	r3, [pc, #52]	@ (800c9a8 <MX_I2S2_Init+0x48>)
 800c974:	2200      	movs	r2, #0
 800c976:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_24B;
 800c978:	4b0b      	ldr	r3, [pc, #44]	@ (800c9a8 <MX_I2S2_Init+0x48>)
 800c97a:	2203      	movs	r2, #3
 800c97c:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 800c97e:	4b0a      	ldr	r3, [pc, #40]	@ (800c9a8 <MX_I2S2_Init+0x48>)
 800c980:	2200      	movs	r2, #0
 800c982:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_16K;
 800c984:	4b08      	ldr	r3, [pc, #32]	@ (800c9a8 <MX_I2S2_Init+0x48>)
 800c986:	22fa      	movs	r2, #250	@ 0xfa
 800c988:	0192      	lsls	r2, r2, #6
 800c98a:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 800c98c:	4b06      	ldr	r3, [pc, #24]	@ (800c9a8 <MX_I2S2_Init+0x48>)
 800c98e:	2200      	movs	r2, #0
 800c990:	619a      	str	r2, [r3, #24]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 800c992:	4b05      	ldr	r3, [pc, #20]	@ (800c9a8 <MX_I2S2_Init+0x48>)
 800c994:	0018      	movs	r0, r3
 800c996:	f00c fa83 	bl	8018ea0 <HAL_I2S_Init>
 800c99a:	1e03      	subs	r3, r0, #0
 800c99c:	d001      	beq.n	800c9a2 <MX_I2S2_Init+0x42>
  {
    Error_Handler();
 800c99e:	f000 fd03 	bl	800d3a8 <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 800c9a2:	46c0      	nop			@ (mov r8, r8)
 800c9a4:	46bd      	mov	sp, r7
 800c9a6:	bd80      	pop	{r7, pc}
 800c9a8:	20001070 	.word	0x20001070
 800c9ac:	40003800 	.word	0x40003800

0800c9b0 <HAL_I2S_MspInit>:

void HAL_I2S_MspInit(I2S_HandleTypeDef* i2sHandle)
{
 800c9b0:	b590      	push	{r4, r7, lr}
 800c9b2:	b089      	sub	sp, #36	@ 0x24
 800c9b4:	af00      	add	r7, sp, #0
 800c9b6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c9b8:	240c      	movs	r4, #12
 800c9ba:	193b      	adds	r3, r7, r4
 800c9bc:	0018      	movs	r0, r3
 800c9be:	2314      	movs	r3, #20
 800c9c0:	001a      	movs	r2, r3
 800c9c2:	2100      	movs	r1, #0
 800c9c4:	f019 fdac 	bl	8026520 <memset>
  if(i2sHandle->Instance==SPI2)
 800c9c8:	687b      	ldr	r3, [r7, #4]
 800c9ca:	681b      	ldr	r3, [r3, #0]
 800c9cc:	4a2d      	ldr	r2, [pc, #180]	@ (800ca84 <HAL_I2S_MspInit+0xd4>)
 800c9ce:	4293      	cmp	r3, r2
 800c9d0:	d154      	bne.n	800ca7c <HAL_I2S_MspInit+0xcc>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* I2S2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800c9d2:	4b2d      	ldr	r3, [pc, #180]	@ (800ca88 <HAL_I2S_MspInit+0xd8>)
 800c9d4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c9d6:	4b2c      	ldr	r3, [pc, #176]	@ (800ca88 <HAL_I2S_MspInit+0xd8>)
 800c9d8:	2180      	movs	r1, #128	@ 0x80
 800c9da:	01c9      	lsls	r1, r1, #7
 800c9dc:	430a      	orrs	r2, r1
 800c9de:	639a      	str	r2, [r3, #56]	@ 0x38

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800c9e0:	4b29      	ldr	r3, [pc, #164]	@ (800ca88 <HAL_I2S_MspInit+0xd8>)
 800c9e2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c9e4:	4b28      	ldr	r3, [pc, #160]	@ (800ca88 <HAL_I2S_MspInit+0xd8>)
 800c9e6:	2102      	movs	r1, #2
 800c9e8:	430a      	orrs	r2, r1
 800c9ea:	62da      	str	r2, [r3, #44]	@ 0x2c
 800c9ec:	4b26      	ldr	r3, [pc, #152]	@ (800ca88 <HAL_I2S_MspInit+0xd8>)
 800c9ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c9f0:	2202      	movs	r2, #2
 800c9f2:	4013      	ands	r3, r2
 800c9f4:	60bb      	str	r3, [r7, #8]
 800c9f6:	68bb      	ldr	r3, [r7, #8]
    /**I2S2 GPIO Configuration
    PB12     ------> I2S2_WS
    PB13     ------> I2S2_CK
    PB15     ------> I2S2_SD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 800c9f8:	193b      	adds	r3, r7, r4
 800c9fa:	22b0      	movs	r2, #176	@ 0xb0
 800c9fc:	0212      	lsls	r2, r2, #8
 800c9fe:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ca00:	0021      	movs	r1, r4
 800ca02:	187b      	adds	r3, r7, r1
 800ca04:	2202      	movs	r2, #2
 800ca06:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ca08:	187b      	adds	r3, r7, r1
 800ca0a:	2200      	movs	r2, #0
 800ca0c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800ca0e:	187b      	adds	r3, r7, r1
 800ca10:	2200      	movs	r2, #0
 800ca12:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI2;
 800ca14:	187b      	adds	r3, r7, r1
 800ca16:	2200      	movs	r2, #0
 800ca18:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800ca1a:	187b      	adds	r3, r7, r1
 800ca1c:	4a1b      	ldr	r2, [pc, #108]	@ (800ca8c <HAL_I2S_MspInit+0xdc>)
 800ca1e:	0019      	movs	r1, r3
 800ca20:	0010      	movs	r0, r2
 800ca22:	f009 f85b 	bl	8015adc <HAL_GPIO_Init>

    /* I2S2 DMA Init */
    /* SPI2_RX Init */
    hdma_spi2_rx.Instance = DMA1_Channel4;
 800ca26:	4b1a      	ldr	r3, [pc, #104]	@ (800ca90 <HAL_I2S_MspInit+0xe0>)
 800ca28:	4a1a      	ldr	r2, [pc, #104]	@ (800ca94 <HAL_I2S_MspInit+0xe4>)
 800ca2a:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Request = DMA_REQUEST_2;
 800ca2c:	4b18      	ldr	r3, [pc, #96]	@ (800ca90 <HAL_I2S_MspInit+0xe0>)
 800ca2e:	2202      	movs	r2, #2
 800ca30:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800ca32:	4b17      	ldr	r3, [pc, #92]	@ (800ca90 <HAL_I2S_MspInit+0xe0>)
 800ca34:	2200      	movs	r2, #0
 800ca36:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800ca38:	4b15      	ldr	r3, [pc, #84]	@ (800ca90 <HAL_I2S_MspInit+0xe0>)
 800ca3a:	2200      	movs	r2, #0
 800ca3c:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800ca3e:	4b14      	ldr	r3, [pc, #80]	@ (800ca90 <HAL_I2S_MspInit+0xe0>)
 800ca40:	2280      	movs	r2, #128	@ 0x80
 800ca42:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800ca44:	4b12      	ldr	r3, [pc, #72]	@ (800ca90 <HAL_I2S_MspInit+0xe0>)
 800ca46:	2280      	movs	r2, #128	@ 0x80
 800ca48:	0052      	lsls	r2, r2, #1
 800ca4a:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800ca4c:	4b10      	ldr	r3, [pc, #64]	@ (800ca90 <HAL_I2S_MspInit+0xe0>)
 800ca4e:	2280      	movs	r2, #128	@ 0x80
 800ca50:	00d2      	lsls	r2, r2, #3
 800ca52:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_CIRCULAR;
 800ca54:	4b0e      	ldr	r3, [pc, #56]	@ (800ca90 <HAL_I2S_MspInit+0xe0>)
 800ca56:	2220      	movs	r2, #32
 800ca58:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800ca5a:	4b0d      	ldr	r3, [pc, #52]	@ (800ca90 <HAL_I2S_MspInit+0xe0>)
 800ca5c:	2200      	movs	r2, #0
 800ca5e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 800ca60:	4b0b      	ldr	r3, [pc, #44]	@ (800ca90 <HAL_I2S_MspInit+0xe0>)
 800ca62:	0018      	movs	r0, r3
 800ca64:	f008 fc1e 	bl	80152a4 <HAL_DMA_Init>
 800ca68:	1e03      	subs	r3, r0, #0
 800ca6a:	d001      	beq.n	800ca70 <HAL_I2S_MspInit+0xc0>
    {
      Error_Handler();
 800ca6c:	f000 fc9c 	bl	800d3a8 <Error_Handler>
    }

    __HAL_LINKDMA(i2sHandle,hdmarx,hdma_spi2_rx);
 800ca70:	687b      	ldr	r3, [r7, #4]
 800ca72:	4a07      	ldr	r2, [pc, #28]	@ (800ca90 <HAL_I2S_MspInit+0xe0>)
 800ca74:	631a      	str	r2, [r3, #48]	@ 0x30
 800ca76:	4b06      	ldr	r3, [pc, #24]	@ (800ca90 <HAL_I2S_MspInit+0xe0>)
 800ca78:	687a      	ldr	r2, [r7, #4]
 800ca7a:	629a      	str	r2, [r3, #40]	@ 0x28

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 800ca7c:	46c0      	nop			@ (mov r8, r8)
 800ca7e:	46bd      	mov	sp, r7
 800ca80:	b009      	add	sp, #36	@ 0x24
 800ca82:	bd90      	pop	{r4, r7, pc}
 800ca84:	40003800 	.word	0x40003800
 800ca88:	40021000 	.word	0x40021000
 800ca8c:	50000400 	.word	0x50000400
 800ca90:	200010ac 	.word	0x200010ac
 800ca94:	40020044 	.word	0x40020044

0800ca98 <SetBatteryReadTimer>:

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */

void SetBatteryReadTimer(uint32_t ticks) {
 800ca98:	b580      	push	{r7, lr}
 800ca9a:	b082      	sub	sp, #8
 800ca9c:	af00      	add	r7, sp, #0
 800ca9e:	6078      	str	r0, [r7, #4]
  batteryReadTimer  = HAL_GetTick() + ticks;
 800caa0:	f007 ff44 	bl	801492c <HAL_GetTick>
 800caa4:	0002      	movs	r2, r0
 800caa6:	687b      	ldr	r3, [r7, #4]
 800caa8:	18d2      	adds	r2, r2, r3
 800caaa:	4b03      	ldr	r3, [pc, #12]	@ (800cab8 <SetBatteryReadTimer+0x20>)
 800caac:	601a      	str	r2, [r3, #0]
}
 800caae:	46c0      	nop			@ (mov r8, r8)
 800cab0:	46bd      	mov	sp, r7
 800cab2:	b002      	add	sp, #8
 800cab4:	bd80      	pop	{r7, pc}
 800cab6:	46c0      	nop			@ (mov r8, r8)
 800cab8:	200000a4 	.word	0x200000a4

0800cabc <SetTestDone>:

void SetTestDone(){
 800cabc:	b580      	push	{r7, lr}
 800cabe:	af00      	add	r7, sp, #0
  testDone = true;
 800cac0:	4b12      	ldr	r3, [pc, #72]	@ (800cb0c <SetTestDone+0x50>)
 800cac2:	2201      	movs	r2, #1
 800cac4:	701a      	strb	r2, [r3, #0]
  HAL_Delay(250);
 800cac6:	20fa      	movs	r0, #250	@ 0xfa
 800cac8:	f007 ff3a 	bl	8014940 <HAL_Delay>
  SetDBLED(false, false, true);
 800cacc:	2201      	movs	r2, #1
 800cace:	2100      	movs	r1, #0
 800cad0:	2000      	movs	r0, #0
 800cad2:	f005 fe93 	bl	80127fc <SetDBLED>
  SetStatusLED(LED_OFF, LED_OFF, LED_ON);
 800cad6:	4a0e      	ldr	r2, [pc, #56]	@ (800cb10 <SetTestDone+0x54>)
 800cad8:	23fa      	movs	r3, #250	@ 0xfa
 800cada:	0119      	lsls	r1, r3, #4
 800cadc:	23fa      	movs	r3, #250	@ 0xfa
 800cade:	011b      	lsls	r3, r3, #4
 800cae0:	0018      	movs	r0, r3
 800cae2:	f005 fe57 	bl	8012794 <SetStatusLED>
  SetVocLED(LED_OFF, LED_OFF, LED_ON);
 800cae6:	4a0a      	ldr	r2, [pc, #40]	@ (800cb10 <SetTestDone+0x54>)
 800cae8:	23fa      	movs	r3, #250	@ 0xfa
 800caea:	0119      	lsls	r1, r3, #4
 800caec:	23fa      	movs	r3, #250	@ 0xfa
 800caee:	011b      	lsls	r3, r3, #4
 800caf0:	0018      	movs	r0, r3
 800caf2:	f005 fecd 	bl	8012890 <SetVocLED>
  HAL_Delay(250);
 800caf6:	20fa      	movs	r0, #250	@ 0xfa
 800caf8:	f007 ff22 	bl	8014940 <HAL_Delay>
  SetLEDsOff();
 800cafc:	f006 f808 	bl	8012b10 <SetLEDsOff>
  InitDone();
 800cb00:	f005 fd84 	bl	801260c <InitDone>
}
 800cb04:	46c0      	nop			@ (mov r8, r8)
 800cb06:	46bd      	mov	sp, r7
 800cb08:	bd80      	pop	{r7, pc}
 800cb0a:	46c0      	nop			@ (mov r8, r8)
 800cb0c:	200010f4 	.word	0x200010f4
 800cb10:	00000bb8 	.word	0x00000bb8

0800cb14 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800cb14:	b5b0      	push	{r4, r5, r7, lr}
 800cb16:	b084      	sub	sp, #16
 800cb18:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800cb1a:	f007 fea1 	bl	8014860 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800cb1e:	f000 fad7 	bl	800d0d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800cb22:	f7ff fc45 	bl	800c3b0 <MX_GPIO_Init>
  MX_DMA_Init();
 800cb26:	f7ff fa6d 	bl	800c004 <MX_DMA_Init>
  MX_I2C1_Init();
 800cb2a:	f7ff fdbf 	bl	800c6ac <MX_I2C1_Init>
  MX_I2S2_Init();
 800cb2e:	f7ff ff17 	bl	800c960 <MX_I2S2_Init>
  MX_USART1_UART_Init();
 800cb32:	f006 ff95 	bl	8013a60 <MX_USART1_UART_Init>
  MX_I2C2_Init();
 800cb36:	f7ff fdf9 	bl	800c72c <MX_I2C2_Init>
  MX_TIM2_Init();
 800cb3a:	f006 fd89 	bl	8013650 <MX_TIM2_Init>
  MX_TIM3_Init();
 800cb3e:	f006 fdfb 	bl	8013738 <MX_TIM3_Init>
  MX_USART4_UART_Init();
 800cb42:	f006 ffbd 	bl	8013ac0 <MX_USART4_UART_Init>
  MX_ADC_Init();
 800cb46:	f7fe f877 	bl	800ac38 <MX_ADC_Init>
  MX_USB_DEVICE_Init();
 800cb4a:	f016 f9dd 	bl	8022f08 <MX_USB_DEVICE_Init>
  MX_RTC_Init();
 800cb4e:	f001 fc85 	bl	800e45c <MX_RTC_Init>
  MX_LPUART1_UART_Init();
 800cb52:	f006 ff4f 	bl	80139f4 <MX_LPUART1_UART_Init>
  MX_TIM6_Init();
 800cb56:	f006 fe6d 	bl	8013834 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
  if (Check_USB_PowerOn())
 800cb5a:	f7fd f85d 	bl	8009c18 <Check_USB_PowerOn>
 800cb5e:	1e03      	subs	r3, r0, #0
 800cb60:	d006      	beq.n	800cb70 <main+0x5c>
    while (HAL_GetTick() < 650);  // Wait for the USB to become ready
 800cb62:	46c0      	nop			@ (mov r8, r8)
 800cb64:	f007 fee2 	bl	801492c <HAL_GetTick>
 800cb68:	0003      	movs	r3, r0
 800cb6a:	4ac1      	ldr	r2, [pc, #772]	@ (800ce70 <main+0x35c>)
 800cb6c:	4293      	cmp	r3, r2
 800cb6e:	d9f9      	bls.n	800cb64 <main+0x50>
	/*
	 * : Turn on heater if humidity is too high
	 * : LEDs indicator for air quality
	 * : Network not found? Sleep
	 */
  GPIO_InitPWMLEDs(&htim2, &htim3);
 800cb70:	4ac0      	ldr	r2, [pc, #768]	@ (800ce74 <main+0x360>)
 800cb72:	4bc1      	ldr	r3, [pc, #772]	@ (800ce78 <main+0x364>)
 800cb74:	0011      	movs	r1, r2
 800cb76:	0018      	movs	r0, r3
 800cb78:	f7ff fd4a 	bl	800c610 <GPIO_InitPWMLEDs>
  Info("=-=-=-=-=-=WOTS Gadget started.=-=-=-=-=-=");
 800cb7c:	4abf      	ldr	r2, [pc, #764]	@ (800ce7c <main+0x368>)
 800cb7e:	4bc0      	ldr	r3, [pc, #768]	@ (800ce80 <main+0x36c>)
 800cb80:	0019      	movs	r1, r3
 800cb82:	2002      	movs	r0, #2
 800cb84:	f007 f95a 	bl	8013e3c <CreateLine>
  BinaryReleaseInfo();
 800cb88:	f007 f9ec 	bl	8013f64 <BinaryReleaseInfo>
  usblog = *(bool*)(USBlogstatusConfigAddr);
 800cb8c:	4bbd      	ldr	r3, [pc, #756]	@ (800ce84 <main+0x370>)
 800cb8e:	781a      	ldrb	r2, [r3, #0]
 800cb90:	4bbd      	ldr	r3, [pc, #756]	@ (800ce88 <main+0x374>)
 800cb92:	701a      	strb	r2, [r3, #0]
  if(UserButton_Pressed()){
 800cb94:	f7fd f8cc 	bl	8009d30 <UserButton_Pressed>
 800cb98:	1e03      	subs	r3, r0, #0
 800cb9a:	d005      	beq.n	800cba8 <main+0x94>
    EnableESPProg();
 800cb9c:	f016 fa90 	bl	80230c0 <EnableESPProg>
    ESP_Programming = true;
 800cba0:	4bba      	ldr	r3, [pc, #744]	@ (800ce8c <main+0x378>)
 800cba2:	2201      	movs	r2, #1
 800cba4:	701a      	strb	r2, [r3, #0]
 800cba6:	e037      	b.n	800cc18 <main+0x104>
  }
  else {
    batteryChargeCheck();
 800cba8:	f005 fd3a 	bl	8012620 <batteryChargeCheck>
//    batteryCharge = ReadBatteryVoltage();
    Error("Battery voltage is: %.02fV", batteryCharge);
 800cbac:	4bb8      	ldr	r3, [pc, #736]	@ (800ce90 <main+0x37c>)
 800cbae:	681b      	ldr	r3, [r3, #0]
 800cbb0:	1c18      	adds	r0, r3, #0
 800cbb2:	f7f6 fe6f 	bl	8003894 <__aeabi_f2d>
 800cbb6:	0002      	movs	r2, r0
 800cbb8:	000b      	movs	r3, r1
 800cbba:	48b6      	ldr	r0, [pc, #728]	@ (800ce94 <main+0x380>)
 800cbbc:	49b6      	ldr	r1, [pc, #728]	@ (800ce98 <main+0x384>)
 800cbbe:	9200      	str	r2, [sp, #0]
 800cbc0:	9301      	str	r3, [sp, #4]
 800cbc2:	0002      	movs	r2, r0
 800cbc4:	2001      	movs	r0, #1
 800cbc6:	f007 f939 	bl	8013e3c <CreateLine>
#ifdef LARGEBATTERY
    if(batteryCharge <= 3.58) {
#else
    if(batteryCharge <= 3.68) {
 800cbca:	4bb1      	ldr	r3, [pc, #708]	@ (800ce90 <main+0x37c>)
 800cbcc:	681b      	ldr	r3, [r3, #0]
 800cbce:	1c18      	adds	r0, r3, #0
 800cbd0:	f7f6 fe60 	bl	8003894 <__aeabi_f2d>
 800cbd4:	4ab1      	ldr	r2, [pc, #708]	@ (800ce9c <main+0x388>)
 800cbd6:	4bb2      	ldr	r3, [pc, #712]	@ (800cea0 <main+0x38c>)
 800cbd8:	f7f3 fc7a 	bl	80004d0 <__aeabi_dcmple>
 800cbdc:	1e03      	subs	r3, r0, #0
 800cbde:	d01b      	beq.n	800cc18 <main+0x104>
#endif
      SetAllREDLED();
 800cbe0:	f005 ffb2 	bl	8012b48 <SetAllREDLED>
      Error("Battery voltage is critical: %.02fV, going in deep sleep. Waking for LED indication %s seconds", batteryCharge, DEEP_SLEEP);
 800cbe4:	4baa      	ldr	r3, [pc, #680]	@ (800ce90 <main+0x37c>)
 800cbe6:	681b      	ldr	r3, [r3, #0]
 800cbe8:	1c18      	adds	r0, r3, #0
 800cbea:	f7f6 fe53 	bl	8003894 <__aeabi_f2d>
 800cbee:	0002      	movs	r2, r0
 800cbf0:	000b      	movs	r3, r1
 800cbf2:	4cac      	ldr	r4, [pc, #688]	@ (800cea4 <main+0x390>)
 800cbf4:	48a8      	ldr	r0, [pc, #672]	@ (800ce98 <main+0x384>)
 800cbf6:	21e1      	movs	r1, #225	@ 0xe1
 800cbf8:	0109      	lsls	r1, r1, #4
 800cbfa:	9102      	str	r1, [sp, #8]
 800cbfc:	9200      	str	r2, [sp, #0]
 800cbfe:	9301      	str	r3, [sp, #4]
 800cc00:	0022      	movs	r2, r4
 800cc02:	0001      	movs	r1, r0
 800cc04:	2001      	movs	r0, #1
 800cc06:	f007 f919 	bl	8013e3c <CreateLine>
      WalkAllRedLED();
 800cc0a:	f005 ffeb 	bl	8012be4 <WalkAllRedLED>
#ifndef STLINK_V3PWR
      Enter_Stop_Mode_for_empty_battery(DEEP_SLEEP);
 800cc0e:	23e1      	movs	r3, #225	@ 0xe1
 800cc10:	011b      	lsls	r3, r3, #4
 800cc12:	0018      	movs	r0, r3
 800cc14:	f7fd fd14 	bl	800a640 <Enter_Stop_Mode_for_empty_battery>
#endif
      }

  }
  SetVerboseLevel(VERBOSE_ALL);
 800cc18:	2003      	movs	r0, #3
 800cc1a:	f007 f989 	bl	8013f30 <SetVerboseLevel>
  HAL_UART_Receive_IT(&huart1, u1_rx_buff, 1);
 800cc1e:	49a2      	ldr	r1, [pc, #648]	@ (800cea8 <main+0x394>)
 800cc20:	4ba2      	ldr	r3, [pc, #648]	@ (800ceac <main+0x398>)
 800cc22:	2201      	movs	r2, #1
 800cc24:	0018      	movs	r0, r3
 800cc26:	f010 fcd3 	bl	801d5d0 <HAL_UART_Receive_IT>
  InitClock(&hrtc);
 800cc2a:	4ba1      	ldr	r3, [pc, #644]	@ (800ceb0 <main+0x39c>)
 800cc2c:	0018      	movs	r0, r3
 800cc2e:	f7fd fe09 	bl	800a844 <InitClock>

  if (!soundInit(&hdma_spi2_rx, &hi2s2, &htim6, DMA1_Channel4_5_6_7_IRQn)) {
 800cc32:	4aa0      	ldr	r2, [pc, #640]	@ (800ceb4 <main+0x3a0>)
 800cc34:	49a0      	ldr	r1, [pc, #640]	@ (800ceb8 <main+0x3a4>)
 800cc36:	48a1      	ldr	r0, [pc, #644]	@ (800cebc <main+0x3a8>)
 800cc38:	230b      	movs	r3, #11
 800cc3a:	f004 fe5d 	bl	80118f8 <soundInit>
 800cc3e:	0003      	movs	r3, r0
 800cc40:	001a      	movs	r2, r3
 800cc42:	2301      	movs	r3, #1
 800cc44:	4053      	eors	r3, r2
 800cc46:	b2db      	uxtb	r3, r3
 800cc48:	2b00      	cmp	r3, #0
 800cc4a:	d007      	beq.n	800cc5c <main+0x148>
    errorHandler(__func__, __LINE__, __FILE__);
 800cc4c:	4a9c      	ldr	r2, [pc, #624]	@ (800cec0 <main+0x3ac>)
 800cc4e:	2304      	movs	r3, #4
 800cc50:	33ff      	adds	r3, #255	@ 0xff
 800cc52:	0019      	movs	r1, r3
 800cc54:	4b9b      	ldr	r3, [pc, #620]	@ (800cec4 <main+0x3b0>)
 800cc56:	0018      	movs	r0, r3
 800cc58:	f007 f9d8 	bl	801400c <errorHandler>
  }
  Device_Init(&hi2c1, &hi2s2, &hadc, &huart4);
 800cc5c:	4b9a      	ldr	r3, [pc, #616]	@ (800cec8 <main+0x3b4>)
 800cc5e:	4a9b      	ldr	r2, [pc, #620]	@ (800cecc <main+0x3b8>)
 800cc60:	4995      	ldr	r1, [pc, #596]	@ (800ceb8 <main+0x3a4>)
 800cc62:	489b      	ldr	r0, [pc, #620]	@ (800ced0 <main+0x3bc>)
 800cc64:	f000 fc92 	bl	800d58c <Device_Init>
  deviceTimeOut = HAL_GetTick() + DEVICE_INIT_TIMEOUT;
 800cc68:	f007 fe60 	bl	801492c <HAL_GetTick>
 800cc6c:	0003      	movs	r3, r0
 800cc6e:	4a99      	ldr	r2, [pc, #612]	@ (800ced4 <main+0x3c0>)
 800cc70:	189a      	adds	r2, r3, r2
 800cc72:	4b99      	ldr	r3, [pc, #612]	@ (800ced8 <main+0x3c4>)
 800cc74:	601a      	str	r2, [r3, #0]
  priorUSBpluggedIn = !Check_USB_PowerOn(); // force the status of the SGP40
 800cc76:	f7fc ffcf 	bl	8009c18 <Check_USB_PowerOn>
 800cc7a:	0003      	movs	r3, r0
 800cc7c:	1e5a      	subs	r2, r3, #1
 800cc7e:	4193      	sbcs	r3, r2
 800cc80:	b2db      	uxtb	r3, r3
 800cc82:	2201      	movs	r2, #1
 800cc84:	4053      	eors	r3, r2
 800cc86:	b2db      	uxtb	r3, r3
 800cc88:	1c1a      	adds	r2, r3, #0
 800cc8a:	2301      	movs	r3, #1
 800cc8c:	4013      	ands	r3, r2
 800cc8e:	b2da      	uxtb	r2, r3
 800cc90:	4b92      	ldr	r3, [pc, #584]	@ (800cedc <main+0x3c8>)
 800cc92:	701a      	strb	r2, [r3, #0]
  if (Check_USB_PowerOn()) {
 800cc94:	f7fc ffc0 	bl	8009c18 <Check_USB_PowerOn>
 800cc98:	1e03      	subs	r3, r0, #0
 800cc9a:	d003      	beq.n	800cca4 <main+0x190>
    printf_USB("input command followed by Enter or type Helpme\r\n");
 800cc9c:	4b90      	ldr	r3, [pc, #576]	@ (800cee0 <main+0x3cc>)
 800cc9e:	0018      	movs	r0, r3
 800cca0:	f7fb ff00 	bl	8008aa4 <printf_USB>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1) {
    if(TimestampIsReached(batteryReadTimer)){
 800cca4:	4b8f      	ldr	r3, [pc, #572]	@ (800cee4 <main+0x3d0>)
 800cca6:	681b      	ldr	r3, [r3, #0]
 800cca8:	0018      	movs	r0, r3
 800ccaa:	f007 f871 	bl	8013d90 <TimestampIsReached>
 800ccae:	1e03      	subs	r3, r0, #0
 800ccb0:	d00a      	beq.n	800ccc8 <main+0x1b4>
      Battery_Upkeep();
 800ccb2:	f006 fb5b 	bl	801336c <Battery_Upkeep>
      batteryReadTimer  = HAL_GetTick() + BATTERY_READ_CYCLE;
 800ccb6:	f007 fe39 	bl	801492c <HAL_GetTick>
 800ccba:	0003      	movs	r3, r0
 800ccbc:	4a8a      	ldr	r2, [pc, #552]	@ (800cee8 <main+0x3d4>)
 800ccbe:	189a      	adds	r2, r3, r2
 800ccc0:	4b88      	ldr	r3, [pc, #544]	@ (800cee4 <main+0x3d0>)
 800ccc2:	601a      	str	r2, [r3, #0]
      showTime();
 800ccc4:	f7fd f8b0 	bl	8009e28 <showTime>
    }
    configCheck();
 800ccc8:	f006 f9b0 	bl	801302c <configCheck>
    if ((batteryStatus == BATTERY_LOW || batteryStatus == BATTERY_CRITICAL)  && !EspTurnedOn){
 800cccc:	4b87      	ldr	r3, [pc, #540]	@ (800ceec <main+0x3d8>)
 800ccce:	781b      	ldrb	r3, [r3, #0]
 800ccd0:	2b01      	cmp	r3, #1
 800ccd2:	d003      	beq.n	800ccdc <main+0x1c8>
 800ccd4:	4b85      	ldr	r3, [pc, #532]	@ (800ceec <main+0x3d8>)
 800ccd6:	781b      	ldrb	r3, [r3, #0]
 800ccd8:	2b00      	cmp	r3, #0
 800ccda:	d137      	bne.n	800cd4c <main+0x238>
 800ccdc:	4b84      	ldr	r3, [pc, #528]	@ (800cef0 <main+0x3dc>)
 800ccde:	781b      	ldrb	r3, [r3, #0]
 800cce0:	2201      	movs	r2, #1
 800cce2:	4053      	eors	r3, r2
 800cce4:	b2db      	uxtb	r3, r3
 800cce6:	2b00      	cmp	r3, #0
 800cce8:	d030      	beq.n	800cd4c <main+0x238>
      WalkAllRedLED();
 800ccea:	f005 ff7b 	bl	8012be4 <WalkAllRedLED>
      Sensor.PM_measurementEnabled = false;
 800ccee:	4b81      	ldr	r3, [pc, #516]	@ (800cef4 <main+0x3e0>)
 800ccf0:	2200      	movs	r2, #0
 800ccf2:	709a      	strb	r2, [r3, #2]
#ifdef USE_MAIL
      pwrmailTodaySend();
 800ccf4:	f7f7 feb8 	bl	8004a68 <pwrmailTodaySend>
      if (((batteryStatus == BATTERY_LOW)  || (batteryStatus == BATTERY_CRITICAL)) && (sendpwremail == CLEAR) && !Check_USB_PowerOn()) {
 800ccf8:	4b7c      	ldr	r3, [pc, #496]	@ (800ceec <main+0x3d8>)
 800ccfa:	781b      	ldrb	r3, [r3, #0]
 800ccfc:	2b01      	cmp	r3, #1
 800ccfe:	d003      	beq.n	800cd08 <main+0x1f4>
 800cd00:	4b7a      	ldr	r3, [pc, #488]	@ (800ceec <main+0x3d8>)
 800cd02:	781b      	ldrb	r3, [r3, #0]
 800cd04:	2b00      	cmp	r3, #0
 800cd06:	d121      	bne.n	800cd4c <main+0x238>
 800cd08:	4b7b      	ldr	r3, [pc, #492]	@ (800cef8 <main+0x3e4>)
 800cd0a:	781b      	ldrb	r3, [r3, #0]
 800cd0c:	2b00      	cmp	r3, #0
 800cd0e:	d11d      	bne.n	800cd4c <main+0x238>
 800cd10:	f7fc ff82 	bl	8009c18 <Check_USB_PowerOn>
 800cd14:	0003      	movs	r3, r0
 800cd16:	001a      	movs	r2, r3
 800cd18:	2301      	movs	r3, #1
 800cd1a:	4053      	eors	r3, r2
 800cd1c:	b2db      	uxtb	r3, r3
 800cd1e:	2b00      	cmp	r3, #0
 800cd20:	d014      	beq.n	800cd4c <main+0x238>
        Debug("charge: %d, sendpwrmail: %d Check_USB_PowerOn(): %d", batteryStatus, sendpwremail, Check_USB_PowerOn());
 800cd22:	4b72      	ldr	r3, [pc, #456]	@ (800ceec <main+0x3d8>)
 800cd24:	781b      	ldrb	r3, [r3, #0]
 800cd26:	001d      	movs	r5, r3
 800cd28:	4b73      	ldr	r3, [pc, #460]	@ (800cef8 <main+0x3e4>)
 800cd2a:	781b      	ldrb	r3, [r3, #0]
 800cd2c:	001c      	movs	r4, r3
 800cd2e:	f7fc ff73 	bl	8009c18 <Check_USB_PowerOn>
 800cd32:	0003      	movs	r3, r0
 800cd34:	4a71      	ldr	r2, [pc, #452]	@ (800cefc <main+0x3e8>)
 800cd36:	4972      	ldr	r1, [pc, #456]	@ (800cf00 <main+0x3ec>)
 800cd38:	9301      	str	r3, [sp, #4]
 800cd3a:	9400      	str	r4, [sp, #0]
 800cd3c:	002b      	movs	r3, r5
 800cd3e:	2003      	movs	r0, #3
 800cd40:	f007 f87c 	bl	8013e3c <CreateLine>
        setModePowerMail();
 800cd44:	f7f7 fe50 	bl	80049e8 <setModePowerMail>
        ESP_Upkeep();
 800cd48:	f7fa fcb4 	bl	80076b4 <ESP_Upkeep>
    // ==== end of test mail
*/
#endif
#ifndef STLINK_V3PWR
//==== disable for power measurements in test condition
    stlinkpwr = false;
 800cd4c:	4b6d      	ldr	r3, [pc, #436]	@ (800cf04 <main+0x3f0>)
 800cd4e:	2200      	movs	r2, #0
 800cd50:	701a      	strb	r2, [r3, #0]
    if (batteryStatus == BATTERY_CRITICAL && ESPstate == ESP_STATE_RESET){
 800cd52:	4b66      	ldr	r3, [pc, #408]	@ (800ceec <main+0x3d8>)
 800cd54:	781b      	ldrb	r3, [r3, #0]
 800cd56:	2b00      	cmp	r3, #0
 800cd58:	d10c      	bne.n	800cd74 <main+0x260>
 800cd5a:	4b6b      	ldr	r3, [pc, #428]	@ (800cf08 <main+0x3f4>)
 800cd5c:	781b      	ldrb	r3, [r3, #0]
 800cd5e:	2b09      	cmp	r3, #9
 800cd60:	d108      	bne.n	800cd74 <main+0x260>
       batteryEmpty = true;
 800cd62:	4b6a      	ldr	r3, [pc, #424]	@ (800cf0c <main+0x3f8>)
 800cd64:	2201      	movs	r2, #1
 800cd66:	701a      	strb	r2, [r3, #0]
       // we are going in deep sleep, nearly off and no wakeup from RTC Do not use standby mode,
       // because without a modification on the PCB the ESP32 is activated
       // instead use the stop mode with or without RTC
       //Enter_Standby_Mode();
       Enter_Stop_Mode_for_empty_battery(DEEP_SLEEP); // light up the leds every hour
 800cd68:	23e1      	movs	r3, #225	@ 0xe1
 800cd6a:	011b      	lsls	r3, r3, #4
 800cd6c:	0018      	movs	r0, r3
 800cd6e:	f7fd fc67 	bl	800a640 <Enter_Stop_Mode_for_empty_battery>
 800cd72:	e002      	b.n	800cd7a <main+0x266>
    }
    else{
      batteryEmpty = false;
 800cd74:	4b65      	ldr	r3, [pc, #404]	@ (800cf0c <main+0x3f8>)
 800cd76:	2200      	movs	r2, #0
 800cd78:	701a      	strb	r2, [r3, #0]
    }
    //====
#endif
    if (testDone && !ESP_Programming && !batteryEmpty) {
 800cd7a:	4b65      	ldr	r3, [pc, #404]	@ (800cf10 <main+0x3fc>)
 800cd7c:	781b      	ldrb	r3, [r3, #0]
 800cd7e:	2b00      	cmp	r3, #0
 800cd80:	d100      	bne.n	800cd84 <main+0x270>
 800cd82:	e10b      	b.n	800cf9c <main+0x488>
 800cd84:	4b41      	ldr	r3, [pc, #260]	@ (800ce8c <main+0x378>)
 800cd86:	781b      	ldrb	r3, [r3, #0]
 800cd88:	2201      	movs	r2, #1
 800cd8a:	4053      	eors	r3, r2
 800cd8c:	b2db      	uxtb	r3, r3
 800cd8e:	2b00      	cmp	r3, #0
 800cd90:	d100      	bne.n	800cd94 <main+0x280>
 800cd92:	e103      	b.n	800cf9c <main+0x488>
 800cd94:	4b5d      	ldr	r3, [pc, #372]	@ (800cf0c <main+0x3f8>)
 800cd96:	781b      	ldrb	r3, [r3, #0]
 800cd98:	2201      	movs	r2, #1
 800cd9a:	4053      	eors	r3, r2
 800cd9c:	b2db      	uxtb	r3, r3
 800cd9e:	2b00      	cmp	r3, #0
 800cda0:	d100      	bne.n	800cda4 <main+0x290>
 800cda2:	e0fb      	b.n	800cf9c <main+0x488>
      if (priorUSBpluggedIn != usbPluggedIn) {
 800cda4:	4b4d      	ldr	r3, [pc, #308]	@ (800cedc <main+0x3c8>)
 800cda6:	781a      	ldrb	r2, [r3, #0]
 800cda8:	4b5a      	ldr	r3, [pc, #360]	@ (800cf14 <main+0x400>)
 800cdaa:	781b      	ldrb	r3, [r3, #0]
 800cdac:	429a      	cmp	r2, r3
 800cdae:	d034      	beq.n	800ce1a <main+0x306>
        if (IsSGPPresent() && !usbPluggedIn) {
 800cdb0:	f000 fb7e 	bl	800d4b0 <IsSGPPresent>
 800cdb4:	1e03      	subs	r3, r0, #0
 800cdb6:	d009      	beq.n	800cdcc <main+0x2b8>
 800cdb8:	4b56      	ldr	r3, [pc, #344]	@ (800cf14 <main+0x400>)
 800cdba:	781b      	ldrb	r3, [r3, #0]
 800cdbc:	2201      	movs	r2, #1
 800cdbe:	4053      	eors	r3, r2
 800cdc0:	b2db      	uxtb	r3, r3
 800cdc2:	2b00      	cmp	r3, #0
 800cdc4:	d002      	beq.n	800cdcc <main+0x2b8>
          SetVOCSensorDIS_ENA(true);
 800cdc6:	2001      	movs	r0, #1
 800cdc8:	f000 fb7c 	bl	800d4c4 <SetVOCSensorDIS_ENA>
        }
        if (((product_name[4] == '4') || (product_name[4] == '5')) && usbPluggedIn) {
 800cdcc:	4b52      	ldr	r3, [pc, #328]	@ (800cf18 <main+0x404>)
 800cdce:	791b      	ldrb	r3, [r3, #4]
 800cdd0:	2b34      	cmp	r3, #52	@ 0x34
 800cdd2:	d003      	beq.n	800cddc <main+0x2c8>
 800cdd4:	4b50      	ldr	r3, [pc, #320]	@ (800cf18 <main+0x404>)
 800cdd6:	791b      	ldrb	r3, [r3, #4]
 800cdd8:	2b35      	cmp	r3, #53	@ 0x35
 800cdda:	d106      	bne.n	800cdea <main+0x2d6>
 800cddc:	4b4d      	ldr	r3, [pc, #308]	@ (800cf14 <main+0x400>)
 800cdde:	781b      	ldrb	r3, [r3, #0]
 800cde0:	2b00      	cmp	r3, #0
 800cde2:	d002      	beq.n	800cdea <main+0x2d6>
          SetVOCSensorDIS_ENA(false);
 800cde4:	2000      	movs	r0, #0
 800cde6:	f000 fb6d 	bl	800d4c4 <SetVOCSensorDIS_ENA>
        }
        if (!usbPluggedIn && (HAL_GetTick() > DEVICE_INIT_TIMEOUT)) {
 800cdea:	4b4a      	ldr	r3, [pc, #296]	@ (800cf14 <main+0x400>)
 800cdec:	781b      	ldrb	r3, [r3, #0]
 800cdee:	2201      	movs	r2, #1
 800cdf0:	4053      	eors	r3, r2
 800cdf2:	b2db      	uxtb	r3, r3
 800cdf4:	2b00      	cmp	r3, #0
 800cdf6:	d00c      	beq.n	800ce12 <main+0x2fe>
 800cdf8:	f007 fd98 	bl	801492c <HAL_GetTick>
 800cdfc:	0003      	movs	r3, r0
 800cdfe:	4a35      	ldr	r2, [pc, #212]	@ (800ced4 <main+0x3c0>)
 800ce00:	4293      	cmp	r3, r2
 800ce02:	d906      	bls.n	800ce12 <main+0x2fe>
//          Debug("Device time out set in main due to powerstatus shift");
          deviceTimeOut = HAL_GetTick() + DEVICE_TIMEOUT;
 800ce04:	f007 fd92 	bl	801492c <HAL_GetTick>
 800ce08:	0003      	movs	r3, r0
 800ce0a:	4a44      	ldr	r2, [pc, #272]	@ (800cf1c <main+0x408>)
 800ce0c:	189a      	adds	r2, r3, r2
 800ce0e:	4b32      	ldr	r3, [pc, #200]	@ (800ced8 <main+0x3c4>)
 800ce10:	601a      	str	r2, [r3, #0]
        }
        priorUSBpluggedIn = usbPluggedIn;
 800ce12:	4b40      	ldr	r3, [pc, #256]	@ (800cf14 <main+0x400>)
 800ce14:	781a      	ldrb	r2, [r3, #0]
 800ce16:	4b31      	ldr	r3, [pc, #196]	@ (800cedc <main+0x3c8>)
 800ce18:	701a      	strb	r2, [r3, #0]
      }
      UpkeepI2Csensors();
 800ce1a:	f000 fffb 	bl	800de14 <UpkeepI2Csensors>
      if (Sensor.MIC_measurementEnabled) {
 800ce1e:	4b35      	ldr	r3, [pc, #212]	@ (800cef4 <main+0x3e0>)
 800ce20:	78db      	ldrb	r3, [r3, #3]
 800ce22:	2b00      	cmp	r3, #0
 800ce24:	d005      	beq.n	800ce32 <main+0x31e>
        MICstate = Mic_Upkeep();
 800ce26:	f001 fa05 	bl	800e234 <Mic_Upkeep>
 800ce2a:	0003      	movs	r3, r0
 800ce2c:	001a      	movs	r2, r3
 800ce2e:	4b3c      	ldr	r3, [pc, #240]	@ (800cf20 <main+0x40c>)
 800ce30:	701a      	strb	r2, [r3, #0]
      }
      if ( ((batteryStatus >= BATTERY_GOOD) || stlinkpwr) && Sensor.PM_measurementEnabled) {
 800ce32:	4b2e      	ldr	r3, [pc, #184]	@ (800ceec <main+0x3d8>)
 800ce34:	781b      	ldrb	r3, [r3, #0]
 800ce36:	2b01      	cmp	r3, #1
 800ce38:	d803      	bhi.n	800ce42 <main+0x32e>
 800ce3a:	4b32      	ldr	r3, [pc, #200]	@ (800cf04 <main+0x3f0>)
 800ce3c:	781b      	ldrb	r3, [r3, #0]
 800ce3e:	2b00      	cmp	r3, #0
 800ce40:	d070      	beq.n	800cf24 <main+0x410>
 800ce42:	4b2c      	ldr	r3, [pc, #176]	@ (800cef4 <main+0x3e0>)
 800ce44:	789b      	ldrb	r3, [r3, #2]
 800ce46:	2b00      	cmp	r3, #0
 800ce48:	d06c      	beq.n	800cf24 <main+0x410>
        if (!sen5x_Get_sen5x_enable_state()&& usbPluggedIn ) {
 800ce4a:	f001 fb95 	bl	800e578 <sen5x_Get_sen5x_enable_state>
 800ce4e:	0003      	movs	r3, r0
 800ce50:	001a      	movs	r2, r3
 800ce52:	2301      	movs	r3, #1
 800ce54:	4053      	eors	r3, r2
 800ce56:	b2db      	uxtb	r3, r3
 800ce58:	2b00      	cmp	r3, #0
 800ce5a:	d006      	beq.n	800ce6a <main+0x356>
 800ce5c:	4b2d      	ldr	r3, [pc, #180]	@ (800cf14 <main+0x400>)
 800ce5e:	781b      	ldrb	r3, [r3, #0]
 800ce60:	2b00      	cmp	r3, #0
 800ce62:	d002      	beq.n	800ce6a <main+0x356>
          sen5x_enable(0);  // this forces the sen5x to enable when powered
 800ce64:	2000      	movs	r0, #0
 800ce66:	f001 fbc3 	bl	800e5f0 <sen5x_enable>
        }
        sen5x_statemachine();
 800ce6a:	f002 f95b 	bl	800f124 <sen5x_statemachine>
 800ce6e:	e07a      	b.n	800cf66 <main+0x452>
 800ce70:	00000289 	.word	0x00000289
 800ce74:	200021b0 	.word	0x200021b0
 800ce78:	20002170 	.word	0x20002170
 800ce7c:	0802c57c 	.word	0x0802c57c
 800ce80:	0802c5a8 	.word	0x0802c5a8
 800ce84:	08080194 	.word	0x08080194
 800ce88:	200010f7 	.word	0x200010f7
 800ce8c:	200010f5 	.word	0x200010f5
 800ce90:	2000215c 	.word	0x2000215c
 800ce94:	0802c5ac 	.word	0x0802c5ac
 800ce98:	0802c5c8 	.word	0x0802c5c8
 800ce9c:	d70a3d71 	.word	0xd70a3d71
 800cea0:	400d70a3 	.word	0x400d70a3
 800cea4:	0802c5cc 	.word	0x0802c5cc
 800cea8:	20001100 	.word	0x20001100
 800ceac:	200022e8 	.word	0x200022e8
 800ceb0:	20001198 	.word	0x20001198
 800ceb4:	200021f0 	.word	0x200021f0
 800ceb8:	20001070 	.word	0x20001070
 800cebc:	200010ac 	.word	0x200010ac
 800cec0:	0802c62c 	.word	0x0802c62c
 800cec4:	0802e370 	.word	0x0802e370
 800cec8:	200023a0 	.word	0x200023a0
 800cecc:	20000e84 	.word	0x20000e84
 800ced0:	20000f38 	.word	0x20000f38
 800ced4:	000061a8 	.word	0x000061a8
 800ced8:	20001114 	.word	0x20001114
 800cedc:	200010fa 	.word	0x200010fa
 800cee0:	0802c640 	.word	0x0802c640
 800cee4:	200000a4 	.word	0x200000a4
 800cee8:	0000c350 	.word	0x0000c350
 800ceec:	20002161 	.word	0x20002161
 800cef0:	200005ac 	.word	0x200005ac
 800cef4:	20001118 	.word	0x20001118
 800cef8:	200010f9 	.word	0x200010f9
 800cefc:	0802c674 	.word	0x0802c674
 800cf00:	0802c6a8 	.word	0x0802c6a8
 800cf04:	200000a2 	.word	0x200000a2
 800cf08:	200010fc 	.word	0x200010fc
 800cf0c:	200010f6 	.word	0x200010f6
 800cf10:	200010f4 	.word	0x200010f4
 800cf14:	2000214d 	.word	0x2000214d
 800cf18:	200011c0 	.word	0x200011c0
 800cf1c:	00001194 	.word	0x00001194
 800cf20:	200010fb 	.word	0x200010fb
      }
      else if ((batteryStatus <= BATTERY_LOW) && !stlinkpwr && Sensor.PM_measurementEnabled) {
 800cf24:	4b52      	ldr	r3, [pc, #328]	@ (800d070 <main+0x55c>)
 800cf26:	781b      	ldrb	r3, [r3, #0]
 800cf28:	2b01      	cmp	r3, #1
 800cf2a:	d81c      	bhi.n	800cf66 <main+0x452>
 800cf2c:	4b51      	ldr	r3, [pc, #324]	@ (800d074 <main+0x560>)
 800cf2e:	781b      	ldrb	r3, [r3, #0]
 800cf30:	2201      	movs	r2, #1
 800cf32:	4053      	eors	r3, r2
 800cf34:	b2db      	uxtb	r3, r3
 800cf36:	2b00      	cmp	r3, #0
 800cf38:	d015      	beq.n	800cf66 <main+0x452>
 800cf3a:	4b4f      	ldr	r3, [pc, #316]	@ (800d078 <main+0x564>)
 800cf3c:	789b      	ldrb	r3, [r3, #2]
 800cf3e:	2b00      	cmp	r3, #0
 800cf40:	d011      	beq.n	800cf66 <main+0x452>
        Info("Battery level insufficient for sen5x operation");
 800cf42:	4a4e      	ldr	r2, [pc, #312]	@ (800d07c <main+0x568>)
 800cf44:	4b4e      	ldr	r3, [pc, #312]	@ (800d080 <main+0x56c>)
 800cf46:	0019      	movs	r1, r3
 800cf48:	2002      	movs	r0, #2
 800cf4a:	f006 ff77 	bl	8013e3c <CreateLine>
        Sensor.PM_measurementEnabled = false;
 800cf4e:	4b4a      	ldr	r3, [pc, #296]	@ (800d078 <main+0x564>)
 800cf50:	2200      	movs	r2, #0
 800cf52:	709a      	strb	r2, [r3, #2]
        VOCNOx = false;
 800cf54:	4b4b      	ldr	r3, [pc, #300]	@ (800d084 <main+0x570>)
 800cf56:	2200      	movs	r2, #0
 800cf58:	701a      	strb	r2, [r3, #0]
        if (sen5x_On) {
 800cf5a:	4b4b      	ldr	r3, [pc, #300]	@ (800d088 <main+0x574>)
 800cf5c:	781b      	ldrb	r3, [r3, #0]
 800cf5e:	2b00      	cmp	r3, #0
 800cf60:	d001      	beq.n	800cf66 <main+0x452>
          sen5x_Power_Off();
 800cf62:	f001 fbd1 	bl	800e708 <sen5x_Power_Off>
        }
      }
      if (SensorProbe.ESP_Present && !espfailshown) {
 800cf66:	4b49      	ldr	r3, [pc, #292]	@ (800d08c <main+0x578>)
 800cf68:	79db      	ldrb	r3, [r3, #7]
 800cf6a:	2b00      	cmp	r3, #0
 800cf6c:	d00d      	beq.n	800cf8a <main+0x476>
 800cf6e:	4b48      	ldr	r3, [pc, #288]	@ (800d090 <main+0x57c>)
 800cf70:	781b      	ldrb	r3, [r3, #0]
 800cf72:	2201      	movs	r2, #1
 800cf74:	4053      	eors	r3, r2
 800cf76:	b2db      	uxtb	r3, r3
 800cf78:	2b00      	cmp	r3, #0
 800cf7a:	d006      	beq.n	800cf8a <main+0x476>
        ESPstate = ESP_Upkeep();
 800cf7c:	f7fa fb9a 	bl	80076b4 <ESP_Upkeep>
 800cf80:	0003      	movs	r3, r0
 800cf82:	001a      	movs	r2, r3
 800cf84:	4b43      	ldr	r3, [pc, #268]	@ (800d094 <main+0x580>)
 800cf86:	701a      	strb	r2, [r3, #0]
 800cf88:	e008      	b.n	800cf9c <main+0x488>
      }
      else {
        Error("ESP failed during init");
 800cf8a:	4a43      	ldr	r2, [pc, #268]	@ (800d098 <main+0x584>)
 800cf8c:	4b43      	ldr	r3, [pc, #268]	@ (800d09c <main+0x588>)
 800cf8e:	0019      	movs	r1, r3
 800cf90:	2001      	movs	r0, #1
 800cf92:	f006 ff53 	bl	8013e3c <CreateLine>
        espfailshown = true;
 800cf96:	4b3e      	ldr	r3, [pc, #248]	@ (800d090 <main+0x57c>)
 800cf98:	2201      	movs	r2, #1
 800cf9a:	701a      	strb	r2, [r3, #0]
      }
    }
    if(!testDone && !ESP_Programming && !batteryEmpty){
 800cf9c:	4b40      	ldr	r3, [pc, #256]	@ (800d0a0 <main+0x58c>)
 800cf9e:	781b      	ldrb	r3, [r3, #0]
 800cfa0:	2201      	movs	r2, #1
 800cfa2:	4053      	eors	r3, r2
 800cfa4:	b2db      	uxtb	r3, r3
 800cfa6:	2b00      	cmp	r3, #0
 800cfa8:	d00f      	beq.n	800cfca <main+0x4b6>
 800cfaa:	4b3e      	ldr	r3, [pc, #248]	@ (800d0a4 <main+0x590>)
 800cfac:	781b      	ldrb	r3, [r3, #0]
 800cfae:	2201      	movs	r2, #1
 800cfb0:	4053      	eors	r3, r2
 800cfb2:	b2db      	uxtb	r3, r3
 800cfb4:	2b00      	cmp	r3, #0
 800cfb6:	d008      	beq.n	800cfca <main+0x4b6>
 800cfb8:	4b3b      	ldr	r3, [pc, #236]	@ (800d0a8 <main+0x594>)
 800cfba:	781b      	ldrb	r3, [r3, #0]
 800cfbc:	2201      	movs	r2, #1
 800cfbe:	4053      	eors	r3, r2
 800cfc0:	b2db      	uxtb	r3, r3
 800cfc2:	2b00      	cmp	r3, #0
 800cfc4:	d001      	beq.n	800cfca <main+0x4b6>
      Device_Test();  // for device with startup time
 800cfc6:	f000 fcb9 	bl	800d93c <Device_Test>
    }
    if (!usbPluggedIn) {
 800cfca:	4b38      	ldr	r3, [pc, #224]	@ (800d0ac <main+0x598>)
 800cfcc:	781b      	ldrb	r3, [r3, #0]
 800cfce:	2201      	movs	r2, #1
 800cfd0:	4053      	eors	r3, r2
 800cfd2:	b2db      	uxtb	r3, r3
 800cfd4:	2b00      	cmp	r3, #0
 800cfd6:	d030      	beq.n	800d03a <main+0x526>
      if (!userToggle && AllDevicesReady() && ESPTransmitDone) {     // check if all sensors are ready
 800cfd8:	4b35      	ldr	r3, [pc, #212]	@ (800d0b0 <main+0x59c>)
 800cfda:	781b      	ldrb	r3, [r3, #0]
 800cfdc:	2201      	movs	r2, #1
 800cfde:	4053      	eors	r3, r2
 800cfe0:	b2db      	uxtb	r3, r3
 800cfe2:	2b00      	cmp	r3, #0
 800cfe4:	d029      	beq.n	800d03a <main+0x526>
 800cfe6:	f000 fd27 	bl	800da38 <AllDevicesReady>
 800cfea:	1e03      	subs	r3, r0, #0
 800cfec:	d025      	beq.n	800d03a <main+0x526>
 800cfee:	4b31      	ldr	r3, [pc, #196]	@ (800d0b4 <main+0x5a0>)
 800cff0:	781b      	ldrb	r3, [r3, #0]
 800cff2:	2b00      	cmp	r3, #0
 800cff4:	d021      	beq.n	800d03a <main+0x526>
        EnabledConnectedDevices();
 800cff6:	f000 fe6b 	bl	800dcd0 <EnabledConnectedDevices>
        Enter_Stop_Mode((batteryCharge<3.90)?SensorProbe.PM_Present?WAIT_WITH_PM+900:WAIT_WITHOUT_PM+900:SensorProbe.PM_Present?WAIT_WITH_PM:WAIT_WITHOUT_PM);
 800cffa:	4b2f      	ldr	r3, [pc, #188]	@ (800d0b8 <main+0x5a4>)
 800cffc:	681b      	ldr	r3, [r3, #0]
 800cffe:	1c18      	adds	r0, r3, #0
 800d000:	f7f6 fc48 	bl	8003894 <__aeabi_f2d>
 800d004:	4a2d      	ldr	r2, [pc, #180]	@ (800d0bc <main+0x5a8>)
 800d006:	4b2e      	ldr	r3, [pc, #184]	@ (800d0c0 <main+0x5ac>)
 800d008:	f7f3 fa58 	bl	80004bc <__aeabi_dcmplt>
 800d00c:	1e03      	subs	r3, r0, #0
 800d00e:	d008      	beq.n	800d022 <main+0x50e>
 800d010:	4b1e      	ldr	r3, [pc, #120]	@ (800d08c <main+0x578>)
 800d012:	795b      	ldrb	r3, [r3, #5]
 800d014:	2b00      	cmp	r3, #0
 800d016:	d002      	beq.n	800d01e <main+0x50a>
 800d018:	23dc      	movs	r3, #220	@ 0xdc
 800d01a:	00db      	lsls	r3, r3, #3
 800d01c:	e00a      	b.n	800d034 <main+0x520>
 800d01e:	4b29      	ldr	r3, [pc, #164]	@ (800d0c4 <main+0x5b0>)
 800d020:	e008      	b.n	800d034 <main+0x520>
 800d022:	4b1a      	ldr	r3, [pc, #104]	@ (800d08c <main+0x578>)
 800d024:	795b      	ldrb	r3, [r3, #5]
 800d026:	2b00      	cmp	r3, #0
 800d028:	d002      	beq.n	800d030 <main+0x51c>
 800d02a:	23d7      	movs	r3, #215	@ 0xd7
 800d02c:	009b      	lsls	r3, r3, #2
 800d02e:	e001      	b.n	800d034 <main+0x520>
 800d030:	23dc      	movs	r3, #220	@ 0xdc
 800d032:	009b      	lsls	r3, r3, #2
 800d034:	0018      	movs	r0, r3
 800d036:	f7fd fb5f 	bl	800a6f8 <Enter_Stop_Mode>
      }
    }
    if (u1_rx_buff[0] != '\0') {
 800d03a:	4b23      	ldr	r3, [pc, #140]	@ (800d0c8 <main+0x5b4>)
 800d03c:	781b      	ldrb	r3, [r3, #0]
 800d03e:	2b00      	cmp	r3, #0
 800d040:	d001      	beq.n	800d046 <main+0x532>
      check_cli_command();
 800d042:	f000 f8cf 	bl	800d1e4 <check_cli_command>
    }

    if (Check_USB_PowerOn() && !ReconfigSet) {
 800d046:	f7fc fde7 	bl	8009c18 <Check_USB_PowerOn>
 800d04a:	1e03      	subs	r3, r0, #0
 800d04c:	d100      	bne.n	800d050 <main+0x53c>
 800d04e:	e629      	b.n	800cca4 <main+0x190>
 800d050:	4b1e      	ldr	r3, [pc, #120]	@ (800d0cc <main+0x5b8>)
 800d052:	781b      	ldrb	r3, [r3, #0]
 800d054:	2201      	movs	r2, #1
 800d056:	4053      	eors	r3, r2
 800d058:	b2db      	uxtb	r3, r3
 800d05a:	2b00      	cmp	r3, #0
 800d05c:	d100      	bne.n	800d060 <main+0x54c>
 800d05e:	e621      	b.n	800cca4 <main+0x190>
      Process_USB_input(GetUsbRxPointer());
 800d060:	f016 f838 	bl	80230d4 <GetUsbRxPointer>
 800d064:	0003      	movs	r3, r0
 800d066:	0018      	movs	r0, r3
 800d068:	f7fc fa8c 	bl	8009584 <Process_USB_input>
    if(TimestampIsReached(batteryReadTimer)){
 800d06c:	e61a      	b.n	800cca4 <main+0x190>
 800d06e:	46c0      	nop			@ (mov r8, r8)
 800d070:	20002161 	.word	0x20002161
 800d074:	200000a2 	.word	0x200000a2
 800d078:	20001118 	.word	0x20001118
 800d07c:	0802c6ac 	.word	0x0802c6ac
 800d080:	0802c5a8 	.word	0x0802c5a8
 800d084:	200011be 	.word	0x200011be
 800d088:	200011bd 	.word	0x200011bd
 800d08c:	20001120 	.word	0x20001120
 800d090:	200010f8 	.word	0x200010f8
 800d094:	200010fc 	.word	0x200010fc
 800d098:	0802c6dc 	.word	0x0802c6dc
 800d09c:	0802c5c8 	.word	0x0802c5c8
 800d0a0:	200010f4 	.word	0x200010f4
 800d0a4:	200010f5 	.word	0x200010f5
 800d0a8:	200010f6 	.word	0x200010f6
 800d0ac:	2000214d 	.word	0x2000214d
 800d0b0:	2000214e 	.word	0x2000214e
 800d0b4:	200005b3 	.word	0x200005b3
 800d0b8:	2000215c 	.word	0x2000215c
 800d0bc:	33333333 	.word	0x33333333
 800d0c0:	400f3333 	.word	0x400f3333
 800d0c4:	000006f4 	.word	0x000006f4
 800d0c8:	20001100 	.word	0x20001100
 800d0cc:	200005af 	.word	0x200005af

0800d0d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800d0d0:	b590      	push	{r4, r7, lr}
 800d0d2:	b09d      	sub	sp, #116	@ 0x74
 800d0d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800d0d6:	2438      	movs	r4, #56	@ 0x38
 800d0d8:	193b      	adds	r3, r7, r4
 800d0da:	0018      	movs	r0, r3
 800d0dc:	2338      	movs	r3, #56	@ 0x38
 800d0de:	001a      	movs	r2, r3
 800d0e0:	2100      	movs	r1, #0
 800d0e2:	f019 fa1d 	bl	8026520 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800d0e6:	2324      	movs	r3, #36	@ 0x24
 800d0e8:	18fb      	adds	r3, r7, r3
 800d0ea:	0018      	movs	r0, r3
 800d0ec:	2314      	movs	r3, #20
 800d0ee:	001a      	movs	r2, r3
 800d0f0:	2100      	movs	r1, #0
 800d0f2:	f019 fa15 	bl	8026520 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800d0f6:	003b      	movs	r3, r7
 800d0f8:	0018      	movs	r0, r3
 800d0fa:	2324      	movs	r3, #36	@ 0x24
 800d0fc:	001a      	movs	r2, r3
 800d0fe:	2100      	movs	r1, #0
 800d100:	f019 fa0e 	bl	8026520 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800d104:	4b34      	ldr	r3, [pc, #208]	@ (800d1d8 <SystemClock_Config+0x108>)
 800d106:	681b      	ldr	r3, [r3, #0]
 800d108:	4a34      	ldr	r2, [pc, #208]	@ (800d1dc <SystemClock_Config+0x10c>)
 800d10a:	401a      	ands	r2, r3
 800d10c:	4b32      	ldr	r3, [pc, #200]	@ (800d1d8 <SystemClock_Config+0x108>)
 800d10e:	2180      	movs	r1, #128	@ 0x80
 800d110:	0109      	lsls	r1, r1, #4
 800d112:	430a      	orrs	r2, r1
 800d114:	601a      	str	r2, [r3, #0]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800d116:	f00e f827 	bl	801b168 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_MEDIUMHIGH);
 800d11a:	4b31      	ldr	r3, [pc, #196]	@ (800d1e0 <SystemClock_Config+0x110>)
 800d11c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d11e:	4a2f      	ldr	r2, [pc, #188]	@ (800d1dc <SystemClock_Config+0x10c>)
 800d120:	401a      	ands	r2, r3
 800d122:	4b2f      	ldr	r3, [pc, #188]	@ (800d1e0 <SystemClock_Config+0x110>)
 800d124:	2180      	movs	r1, #128	@ 0x80
 800d126:	0149      	lsls	r1, r1, #5
 800d128:	430a      	orrs	r2, r1
 800d12a:	651a      	str	r2, [r3, #80]	@ 0x50

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE
 800d12c:	193b      	adds	r3, r7, r4
 800d12e:	2226      	movs	r2, #38	@ 0x26
 800d130:	601a      	str	r2, [r3, #0]
                              |RCC_OSCILLATORTYPE_HSI48;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800d132:	193b      	adds	r3, r7, r4
 800d134:	2280      	movs	r2, #128	@ 0x80
 800d136:	0052      	lsls	r2, r2, #1
 800d138:	609a      	str	r2, [r3, #8]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800d13a:	0021      	movs	r1, r4
 800d13c:	187b      	adds	r3, r7, r1
 800d13e:	2201      	movs	r2, #1
 800d140:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800d142:	187b      	adds	r3, r7, r1
 800d144:	2210      	movs	r2, #16
 800d146:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800d148:	187b      	adds	r3, r7, r1
 800d14a:	2201      	movs	r2, #1
 800d14c:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800d14e:	187b      	adds	r3, r7, r1
 800d150:	2200      	movs	r2, #0
 800d152:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800d154:	187b      	adds	r3, r7, r1
 800d156:	0018      	movs	r0, r3
 800d158:	f00e f880 	bl	801b25c <HAL_RCC_OscConfig>
 800d15c:	1e03      	subs	r3, r0, #0
 800d15e:	d001      	beq.n	800d164 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800d160:	f000 f922 	bl	800d3a8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800d164:	2124      	movs	r1, #36	@ 0x24
 800d166:	187b      	adds	r3, r7, r1
 800d168:	220f      	movs	r2, #15
 800d16a:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800d16c:	187b      	adds	r3, r7, r1
 800d16e:	2201      	movs	r2, #1
 800d170:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800d172:	187b      	adds	r3, r7, r1
 800d174:	2200      	movs	r2, #0
 800d176:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800d178:	187b      	adds	r3, r7, r1
 800d17a:	2200      	movs	r2, #0
 800d17c:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800d17e:	187b      	adds	r3, r7, r1
 800d180:	2200      	movs	r2, #0
 800d182:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800d184:	187b      	adds	r3, r7, r1
 800d186:	2100      	movs	r1, #0
 800d188:	0018      	movs	r0, r3
 800d18a:	f00e fc3b 	bl	801ba04 <HAL_RCC_ClockConfig>
 800d18e:	1e03      	subs	r3, r0, #0
 800d190:	d001      	beq.n	800d196 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800d192:	f000 f909 	bl	800d3a8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_LPUART1
 800d196:	003b      	movs	r3, r7
 800d198:	226d      	movs	r2, #109	@ 0x6d
 800d19a:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_RTC
                              |RCC_PERIPHCLK_USB;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800d19c:	003b      	movs	r3, r7
 800d19e:	2200      	movs	r2, #0
 800d1a0:	609a      	str	r2, [r3, #8]
  PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 800d1a2:	003b      	movs	r3, r7
 800d1a4:	2200      	movs	r2, #0
 800d1a6:	611a      	str	r2, [r3, #16]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800d1a8:	003b      	movs	r3, r7
 800d1aa:	2200      	movs	r2, #0
 800d1ac:	615a      	str	r2, [r3, #20]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800d1ae:	003b      	movs	r3, r7
 800d1b0:	2280      	movs	r2, #128	@ 0x80
 800d1b2:	0252      	lsls	r2, r2, #9
 800d1b4:	605a      	str	r2, [r3, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800d1b6:	003b      	movs	r3, r7
 800d1b8:	2280      	movs	r2, #128	@ 0x80
 800d1ba:	04d2      	lsls	r2, r2, #19
 800d1bc:	621a      	str	r2, [r3, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800d1be:	003b      	movs	r3, r7
 800d1c0:	0018      	movs	r0, r3
 800d1c2:	f00e fe43 	bl	801be4c <HAL_RCCEx_PeriphCLKConfig>
 800d1c6:	1e03      	subs	r3, r0, #0
 800d1c8:	d001      	beq.n	800d1ce <SystemClock_Config+0xfe>
  {
    Error_Handler();
 800d1ca:	f000 f8ed 	bl	800d3a8 <Error_Handler>
  }
}
 800d1ce:	46c0      	nop			@ (mov r8, r8)
 800d1d0:	46bd      	mov	sp, r7
 800d1d2:	b01d      	add	sp, #116	@ 0x74
 800d1d4:	bd90      	pop	{r4, r7, pc}
 800d1d6:	46c0      	nop			@ (mov r8, r8)
 800d1d8:	40007000 	.word	0x40007000
 800d1dc:	ffffe7ff 	.word	0xffffe7ff
 800d1e0:	40021000 	.word	0x40021000

0800d1e4 <check_cli_command>:

/* USER CODE BEGIN 4 */

void check_cli_command() {
 800d1e4:	b580      	push	{r7, lr}
 800d1e6:	af00      	add	r7, sp, #0
  switch (u1_rx_buff[0]){
 800d1e8:	4b40      	ldr	r3, [pc, #256]	@ (800d2ec <check_cli_command+0x108>)
 800d1ea:	781b      	ldrb	r3, [r3, #0]
 800d1ec:	3b61      	subs	r3, #97	@ 0x61
 800d1ee:	2b15      	cmp	r3, #21
 800d1f0:	d845      	bhi.n	800d27e <check_cli_command+0x9a>
 800d1f2:	009a      	lsls	r2, r3, #2
 800d1f4:	4b3e      	ldr	r3, [pc, #248]	@ (800d2f0 <check_cli_command+0x10c>)
 800d1f6:	18d3      	adds	r3, r2, r3
 800d1f8:	681b      	ldr	r3, [r3, #0]
 800d1fa:	469f      	mov	pc, r3
    case (uint8_t)'a':
      printf("VerboseLevel set to all\r\n");
 800d1fc:	4b3d      	ldr	r3, [pc, #244]	@ (800d2f4 <check_cli_command+0x110>)
 800d1fe:	0018      	movs	r0, r3
 800d200:	f019 f83c 	bl	802627c <puts>
      SetVerboseLevel(VERBOSE_ALL);
 800d204:	2003      	movs	r0, #3
 800d206:	f006 fe93 	bl	8013f30 <SetVerboseLevel>
      break;
 800d20a:	e069      	b.n	800d2e0 <check_cli_command+0xfc>
    case (uint8_t)'e':
      PC_show_Keys();  // show the eeprom stored content conditional on USART or USB
 800d20c:	f7fb fc8a 	bl	8008b24 <PC_show_Keys>
    break;
 800d210:	e066      	b.n	800d2e0 <check_cli_command+0xfc>
    case (uint8_t)'f':
      forceNTPupdate();  // sync the time now
 800d212:	f7f7 fb3d 	bl	8004890 <forceNTPupdate>
    break;
 800d216:	e063      	b.n	800d2e0 <check_cli_command+0xfc>
    case (uint8_t)'i':
      printf("VerboseLevel set to info\r\n");
 800d218:	4b37      	ldr	r3, [pc, #220]	@ (800d2f8 <check_cli_command+0x114>)
 800d21a:	0018      	movs	r0, r3
 800d21c:	f019 f82e 	bl	802627c <puts>
      SetVerboseLevel(VERBOSE_INFO);
 800d220:	2002      	movs	r0, #2
 800d222:	f006 fe85 	bl	8013f30 <SetVerboseLevel>
      break;
 800d226:	e05b      	b.n	800d2e0 <check_cli_command+0xfc>
    case (uint8_t)'m':
      printf("VerboseLevel set to minimal\r\n");
 800d228:	4b34      	ldr	r3, [pc, #208]	@ (800d2fc <check_cli_command+0x118>)
 800d22a:	0018      	movs	r0, r3
 800d22c:	f019 f826 	bl	802627c <puts>
      SetVerboseLevel(VERBOSE_MINIMAL);
 800d230:	2001      	movs	r0, #1
 800d232:	f006 fe7d 	bl	8013f30 <SetVerboseLevel>
      break;
 800d236:	e053      	b.n	800d2e0 <check_cli_command+0xfc>
    case (uint8_t)'n':
      printf("VerboseLevel set to none\r\n");
 800d238:	4b31      	ldr	r3, [pc, #196]	@ (800d300 <check_cli_command+0x11c>)
 800d23a:	0018      	movs	r0, r3
 800d23c:	f019 f81e 	bl	802627c <puts>
      SetVerboseLevel(VERBOSE_NONE);
 800d240:	2000      	movs	r0, #0
 800d242:	f006 fe75 	bl	8013f30 <SetVerboseLevel>
      break;
 800d246:	e04b      	b.n	800d2e0 <check_cli_command+0xfc>
    case (uint8_t)'s':
      sen5xReadTimer = HAL_GetTick();  // on request fire up the sen5x
 800d248:	f007 fb70 	bl	801492c <HAL_GetTick>
 800d24c:	0002      	movs	r2, r0
 800d24e:	4b2d      	ldr	r3, [pc, #180]	@ (800d304 <check_cli_command+0x120>)
 800d250:	601a      	str	r2, [r3, #0]
      break;
 800d252:	e045      	b.n	800d2e0 <check_cli_command+0xfc>
    case (uint8_t)'t':
      showTime(); // show me the current time
 800d254:	f7fc fde8 	bl	8009e28 <showTime>
      break;
 800d258:	e042      	b.n	800d2e0 <check_cli_command+0xfc>
    case (uint8_t)'u':
      usblog = !usblog; // log info to usb too
 800d25a:	4b2b      	ldr	r3, [pc, #172]	@ (800d308 <check_cli_command+0x124>)
 800d25c:	781b      	ldrb	r3, [r3, #0]
 800d25e:	1e5a      	subs	r2, r3, #1
 800d260:	4193      	sbcs	r3, r2
 800d262:	b2db      	uxtb	r3, r3
 800d264:	2201      	movs	r2, #1
 800d266:	4053      	eors	r3, r2
 800d268:	b2db      	uxtb	r3, r3
 800d26a:	1c1a      	adds	r2, r3, #0
 800d26c:	2301      	movs	r3, #1
 800d26e:	4013      	ands	r3, r2
 800d270:	b2da      	uxtb	r2, r3
 800d272:	4b25      	ldr	r3, [pc, #148]	@ (800d308 <check_cli_command+0x124>)
 800d274:	701a      	strb	r2, [r3, #0]
      break;
 800d276:	e033      	b.n	800d2e0 <check_cli_command+0xfc>
    case (uint8_t)'v':
      BinaryReleaseInfo(); // show me the build
 800d278:	f006 fe74 	bl	8013f64 <BinaryReleaseInfo>
      break;
 800d27c:	e030      	b.n	800d2e0 <check_cli_command+0xfc>
    default:
      printf("Error unknown request from Serial UART1 (TTY)\r\n");
 800d27e:	4b23      	ldr	r3, [pc, #140]	@ (800d30c <check_cli_command+0x128>)
 800d280:	0018      	movs	r0, r3
 800d282:	f018 fffb 	bl	802627c <puts>
      printf("\r\n\r\nPossible commands:\r\n\r\n");
 800d286:	4b22      	ldr	r3, [pc, #136]	@ (800d310 <check_cli_command+0x12c>)
 800d288:	0018      	movs	r0, r3
 800d28a:	f018 fff7 	bl	802627c <puts>
      printf("a - VerboseLevel set to all\r\n");
 800d28e:	4b21      	ldr	r3, [pc, #132]	@ (800d314 <check_cli_command+0x130>)
 800d290:	0018      	movs	r0, r3
 800d292:	f018 fff3 	bl	802627c <puts>
      printf("e - show EEPROM\r\n");
 800d296:	4b20      	ldr	r3, [pc, #128]	@ (800d318 <check_cli_command+0x134>)
 800d298:	0018      	movs	r0, r3
 800d29a:	f018 ffef 	bl	802627c <puts>
      printf("f - Force NTP time synchronization\r\n");
 800d29e:	4b1f      	ldr	r3, [pc, #124]	@ (800d31c <check_cli_command+0x138>)
 800d2a0:	0018      	movs	r0, r3
 800d2a2:	f018 ffeb 	bl	802627c <puts>
      printf("i - VerboseLevel set to info\r\n");
 800d2a6:	4b1e      	ldr	r3, [pc, #120]	@ (800d320 <check_cli_command+0x13c>)
 800d2a8:	0018      	movs	r0, r3
 800d2aa:	f018 ffe7 	bl	802627c <puts>
      printf("m - VerboseLevel set to minimal\r\n");
 800d2ae:	4b1d      	ldr	r3, [pc, #116]	@ (800d324 <check_cli_command+0x140>)
 800d2b0:	0018      	movs	r0, r3
 800d2b2:	f018 ffe3 	bl	802627c <puts>
      printf("n - VerboseLevel set to none\r\n");
 800d2b6:	4b1c      	ldr	r3, [pc, #112]	@ (800d328 <check_cli_command+0x144>)
 800d2b8:	0018      	movs	r0, r3
 800d2ba:	f018 ffdf 	bl	802627c <puts>
      printf("s - Start particle measurement\r\n");
 800d2be:	4b1b      	ldr	r3, [pc, #108]	@ (800d32c <check_cli_command+0x148>)
 800d2c0:	0018      	movs	r0, r3
 800d2c2:	f018 ffdb 	bl	802627c <puts>
      printf("t - Show actual system time\r\n");
 800d2c6:	4b1a      	ldr	r3, [pc, #104]	@ (800d330 <check_cli_command+0x14c>)
 800d2c8:	0018      	movs	r0, r3
 800d2ca:	f018 ffd7 	bl	802627c <puts>
      printf("u - USB logging toggle\r\n");
 800d2ce:	4b19      	ldr	r3, [pc, #100]	@ (800d334 <check_cli_command+0x150>)
 800d2d0:	0018      	movs	r0, r3
 800d2d2:	f018 ffd3 	bl	802627c <puts>
      printf("v - Show system version\r\n");
 800d2d6:	4b18      	ldr	r3, [pc, #96]	@ (800d338 <check_cli_command+0x154>)
 800d2d8:	0018      	movs	r0, r3
 800d2da:	f018 ffcf 	bl	802627c <puts>
  break;
 800d2de:	46c0      	nop			@ (mov r8, r8)
  }
  u1_rx_buff[0] = '\0';
 800d2e0:	4b02      	ldr	r3, [pc, #8]	@ (800d2ec <check_cli_command+0x108>)
 800d2e2:	2200      	movs	r2, #0
 800d2e4:	701a      	strb	r2, [r3, #0]
}
 800d2e6:	46c0      	nop			@ (mov r8, r8)
 800d2e8:	46bd      	mov	sp, r7
 800d2ea:	bd80      	pop	{r7, pc}
 800d2ec:	20001100 	.word	0x20001100
 800d2f0:	0802e318 	.word	0x0802e318
 800d2f4:	0802c6f4 	.word	0x0802c6f4
 800d2f8:	0802c710 	.word	0x0802c710
 800d2fc:	0802c72c 	.word	0x0802c72c
 800d300:	0802c74c 	.word	0x0802c74c
 800d304:	200011cc 	.word	0x200011cc
 800d308:	200010f7 	.word	0x200010f7
 800d30c:	0802c768 	.word	0x0802c768
 800d310:	0802c798 	.word	0x0802c798
 800d314:	0802c7b4 	.word	0x0802c7b4
 800d318:	0802c7d4 	.word	0x0802c7d4
 800d31c:	0802c7e8 	.word	0x0802c7e8
 800d320:	0802c80c 	.word	0x0802c80c
 800d324:	0802c82c 	.word	0x0802c82c
 800d328:	0802c850 	.word	0x0802c850
 800d32c:	0802c870 	.word	0x0802c870
 800d330:	0802c890 	.word	0x0802c890
 800d334:	0802c8b0 	.word	0x0802c8b0
 800d338:	0802c8c8 	.word	0x0802c8c8

0800d33c <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800d33c:	b580      	push	{r7, lr}
 800d33e:	b082      	sub	sp, #8
 800d340:	af00      	add	r7, sp, #0
 800d342:	6078      	str	r0, [r7, #4]
  HAL_UART_Receive_IT(&huart1, u1_rx_buff, 1);
 800d344:	4907      	ldr	r1, [pc, #28]	@ (800d364 <HAL_UART_RxCpltCallback+0x28>)
 800d346:	4b08      	ldr	r3, [pc, #32]	@ (800d368 <HAL_UART_RxCpltCallback+0x2c>)
 800d348:	2201      	movs	r2, #1
 800d34a:	0018      	movs	r0, r3
 800d34c:	f010 f940 	bl	801d5d0 <HAL_UART_Receive_IT>
//  check_cli_command();
  HAL_UART_Receive_IT(&huart1, u1_rx_buff, 1); //Re-arm the interrupt
 800d350:	4904      	ldr	r1, [pc, #16]	@ (800d364 <HAL_UART_RxCpltCallback+0x28>)
 800d352:	4b05      	ldr	r3, [pc, #20]	@ (800d368 <HAL_UART_RxCpltCallback+0x2c>)
 800d354:	2201      	movs	r2, #1
 800d356:	0018      	movs	r0, r3
 800d358:	f010 f93a 	bl	801d5d0 <HAL_UART_Receive_IT>
}
 800d35c:	46c0      	nop			@ (mov r8, r8)
 800d35e:	46bd      	mov	sp, r7
 800d360:	b002      	add	sp, #8
 800d362:	bd80      	pop	{r7, pc}
 800d364:	20001100 	.word	0x20001100
 800d368:	200022e8 	.word	0x200022e8

0800d36c <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800d36c:	b580      	push	{r7, lr}
 800d36e:	b082      	sub	sp, #8
 800d370:	af00      	add	r7, sp, #0
 800d372:	0002      	movs	r2, r0
 800d374:	1dbb      	adds	r3, r7, #6
 800d376:	801a      	strh	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  if (GPIO_Pin == BOOT0_Pin) {
 800d378:	1dbb      	adds	r3, r7, #6
 800d37a:	881a      	ldrh	r2, [r3, #0]
 800d37c:	2380      	movs	r3, #128	@ 0x80
 800d37e:	021b      	lsls	r3, r3, #8
 800d380:	429a      	cmp	r2, r3
 800d382:	d10b      	bne.n	800d39c <HAL_GPIO_EXTI_Callback+0x30>
    setuserToggle();
 800d384:	f005 fffc 	bl	8013380 <setuserToggle>
    if (GetPMSensorPresence()) {
 800d388:	f000 f860 	bl	800d44c <GetPMSensorPresence>
 800d38c:	1e03      	subs	r3, r0, #0
 800d38e:	d005      	beq.n	800d39c <HAL_GPIO_EXTI_Callback+0x30>
      Sensor.PM_measurementEnabled = true;
 800d390:	4b04      	ldr	r3, [pc, #16]	@ (800d3a4 <HAL_GPIO_EXTI_Callback+0x38>)
 800d392:	2201      	movs	r2, #1
 800d394:	709a      	strb	r2, [r3, #2]
      sen5x_Set_sen5x_state(false);  // sounds contradictory, but this enables sen5x immediate
 800d396:	2000      	movs	r0, #0
 800d398:	f001 f8f8 	bl	800e58c <sen5x_Set_sen5x_state>
    }
  }
}
 800d39c:	46c0      	nop			@ (mov r8, r8)
 800d39e:	46bd      	mov	sp, r7
 800d3a0:	b002      	add	sp, #8
 800d3a2:	bd80      	pop	{r7, pc}
 800d3a4:	20001118 	.word	0x20001118

0800d3a8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800d3a8:	b580      	push	{r7, lr}
 800d3aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  SetAllREDLED();
 800d3ac:	f005 fbcc 	bl	8012b48 <SetAllREDLED>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800d3b0:	b672      	cpsid	i
}
 800d3b2:	46c0      	nop			@ (mov r8, r8)
  __disable_irq();
  while (1)
  {
    Error("Trapped in Error_Handler, wait for reset");
 800d3b4:	4a05      	ldr	r2, [pc, #20]	@ (800d3cc <Error_Handler+0x24>)
 800d3b6:	4b06      	ldr	r3, [pc, #24]	@ (800d3d0 <Error_Handler+0x28>)
 800d3b8:	0019      	movs	r1, r3
 800d3ba:	2001      	movs	r0, #1
 800d3bc:	f006 fd3e 	bl	8013e3c <CreateLine>

    HAL_Delay(2500);
 800d3c0:	4b04      	ldr	r3, [pc, #16]	@ (800d3d4 <Error_Handler+0x2c>)
 800d3c2:	0018      	movs	r0, r3
 800d3c4:	f007 fabc 	bl	8014940 <HAL_Delay>
    Error("Trapped in Error_Handler, wait for reset");
 800d3c8:	46c0      	nop			@ (mov r8, r8)
 800d3ca:	e7f3      	b.n	800d3b4 <Error_Handler+0xc>
 800d3cc:	0802c8e4 	.word	0x0802c8e4
 800d3d0:	0802c5c8 	.word	0x0802c5c8
 800d3d4:	000009c4 	.word	0x000009c4

0800d3d8 <testInit>:
static uint8_t AHTstate;
static uint8_t BMPstate;
static uint8_t ENSstate;
static bool sensorsdisablereq = false;

void testInit(){
 800d3d8:	b580      	push	{r7, lr}
 800d3da:	af00      	add	r7, sp, #0
  SensorProbe.HT_Present = false;
 800d3dc:	4b19      	ldr	r3, [pc, #100]	@ (800d444 <testInit+0x6c>)
 800d3de:	2200      	movs	r2, #0
 800d3e0:	701a      	strb	r2, [r3, #0]
  SensorProbe.VOC_Present = false;
 800d3e2:	4b18      	ldr	r3, [pc, #96]	@ (800d444 <testInit+0x6c>)
 800d3e4:	2200      	movs	r2, #0
 800d3e6:	705a      	strb	r2, [r3, #1]
  SensorProbe.AHT20_Present = false;
 800d3e8:	4b16      	ldr	r3, [pc, #88]	@ (800d444 <testInit+0x6c>)
 800d3ea:	2200      	movs	r2, #0
 800d3ec:	709a      	strb	r2, [r3, #2]
  SensorProbe.ENS160_Present = false;
 800d3ee:	4b15      	ldr	r3, [pc, #84]	@ (800d444 <testInit+0x6c>)
 800d3f0:	2200      	movs	r2, #0
 800d3f2:	70da      	strb	r2, [r3, #3]
  SensorProbe.BMP280_Present = false;
 800d3f4:	4b13      	ldr	r3, [pc, #76]	@ (800d444 <testInit+0x6c>)
 800d3f6:	2200      	movs	r2, #0
 800d3f8:	711a      	strb	r2, [r3, #4]
  SensorProbe.PM_Present = false;
 800d3fa:	4b12      	ldr	r3, [pc, #72]	@ (800d444 <testInit+0x6c>)
 800d3fc:	2200      	movs	r2, #0
 800d3fe:	715a      	strb	r2, [r3, #5]
  SensorProbe.MIC_Present = false;
 800d400:	4b10      	ldr	r3, [pc, #64]	@ (800d444 <testInit+0x6c>)
 800d402:	2200      	movs	r2, #0
 800d404:	719a      	strb	r2, [r3, #6]
  SensorProbe.ESP_Present = false;
 800d406:	4b0f      	ldr	r3, [pc, #60]	@ (800d444 <testInit+0x6c>)
 800d408:	2200      	movs	r2, #0
 800d40a:	71da      	strb	r2, [r3, #7]
  SensorProbe.SGP_Enabled = false;
 800d40c:	4b0d      	ldr	r3, [pc, #52]	@ (800d444 <testInit+0x6c>)
 800d40e:	2200      	movs	r2, #0
 800d410:	721a      	strb	r2, [r3, #8]
  Sensor.HT_measurementEnabled = true;
 800d412:	4b0d      	ldr	r3, [pc, #52]	@ (800d448 <testInit+0x70>)
 800d414:	2201      	movs	r2, #1
 800d416:	701a      	strb	r2, [r3, #0]
  Sensor.VOC_measurementEnabled = true;
 800d418:	4b0b      	ldr	r3, [pc, #44]	@ (800d448 <testInit+0x70>)
 800d41a:	2201      	movs	r2, #1
 800d41c:	705a      	strb	r2, [r3, #1]
  Sensor.PM_measurementEnabled = true;
 800d41e:	4b0a      	ldr	r3, [pc, #40]	@ (800d448 <testInit+0x70>)
 800d420:	2201      	movs	r2, #1
 800d422:	709a      	strb	r2, [r3, #2]
  Sensor.MIC_measurementEnabled = true;
 800d424:	4b08      	ldr	r3, [pc, #32]	@ (800d448 <testInit+0x70>)
 800d426:	2201      	movs	r2, #1
 800d428:	70da      	strb	r2, [r3, #3]
  Sensor.AHT_measurementEnabled = true;
 800d42a:	4b07      	ldr	r3, [pc, #28]	@ (800d448 <testInit+0x70>)
 800d42c:	2201      	movs	r2, #1
 800d42e:	711a      	strb	r2, [r3, #4]
  Sensor.BMP_measurementEnabled = true;
 800d430:	4b05      	ldr	r3, [pc, #20]	@ (800d448 <testInit+0x70>)
 800d432:	2201      	movs	r2, #1
 800d434:	715a      	strb	r2, [r3, #5]
  Sensor.ENS_measurementEnabled = true;
 800d436:	4b04      	ldr	r3, [pc, #16]	@ (800d448 <testInit+0x70>)
 800d438:	2201      	movs	r2, #1
 800d43a:	719a      	strb	r2, [r3, #6]
}
 800d43c:	46c0      	nop			@ (mov r8, r8)
 800d43e:	46bd      	mov	sp, r7
 800d440:	bd80      	pop	{r7, pc}
 800d442:	46c0      	nop			@ (mov r8, r8)
 800d444:	20001120 	.word	0x20001120
 800d448:	20001118 	.word	0x20001118

0800d44c <GetPMSensorPresence>:

bool GetPMSensorPresence(){
 800d44c:	b580      	push	{r7, lr}
 800d44e:	af00      	add	r7, sp, #0
  return SensorProbe.PM_Present;
 800d450:	4b02      	ldr	r3, [pc, #8]	@ (800d45c <GetPMSensorPresence+0x10>)
 800d452:	795b      	ldrb	r3, [r3, #5]
}
 800d454:	0018      	movs	r0, r3
 800d456:	46bd      	mov	sp, r7
 800d458:	bd80      	pop	{r7, pc}
 800d45a:	46c0      	nop			@ (mov r8, r8)
 800d45c:	20001120 	.word	0x20001120

0800d460 <DisablePMSensor>:

void DisablePMSensor() {
 800d460:	b580      	push	{r7, lr}
 800d462:	af00      	add	r7, sp, #0
  SensorProbe.PM_Present = false;
 800d464:	4b02      	ldr	r3, [pc, #8]	@ (800d470 <DisablePMSensor+0x10>)
 800d466:	2200      	movs	r2, #0
 800d468:	715a      	strb	r2, [r3, #5]
}
 800d46a:	46c0      	nop			@ (mov r8, r8)
 800d46c:	46bd      	mov	sp, r7
 800d46e:	bd80      	pop	{r7, pc}
 800d470:	20001120 	.word	0x20001120

0800d474 <IsAHT20SensorPresent>:

bool IsHTSensorEnabled() {
  return Sensor.HT_measurementEnabled;
}

bool IsAHT20SensorPresent() {
 800d474:	b580      	push	{r7, lr}
 800d476:	af00      	add	r7, sp, #0
  return SensorProbe.AHT20_Present;
 800d478:	4b02      	ldr	r3, [pc, #8]	@ (800d484 <IsAHT20SensorPresent+0x10>)
 800d47a:	789b      	ldrb	r3, [r3, #2]
}
 800d47c:	0018      	movs	r0, r3
 800d47e:	46bd      	mov	sp, r7
 800d480:	bd80      	pop	{r7, pc}
 800d482:	46c0      	nop			@ (mov r8, r8)
 800d484:	20001120 	.word	0x20001120

0800d488 <IsBMP280SensorPresent>:

bool IsBMP280SensorPresent() {
 800d488:	b580      	push	{r7, lr}
 800d48a:	af00      	add	r7, sp, #0
  return SensorProbe.BMP280_Present;
 800d48c:	4b02      	ldr	r3, [pc, #8]	@ (800d498 <IsBMP280SensorPresent+0x10>)
 800d48e:	791b      	ldrb	r3, [r3, #4]
}
 800d490:	0018      	movs	r0, r3
 800d492:	46bd      	mov	sp, r7
 800d494:	bd80      	pop	{r7, pc}
 800d496:	46c0      	nop			@ (mov r8, r8)
 800d498:	20001120 	.word	0x20001120

0800d49c <IsENS160SensorPresent>:

bool IsENS160SensorPresent() {
 800d49c:	b580      	push	{r7, lr}
 800d49e:	af00      	add	r7, sp, #0
  return SensorProbe.ENS160_Present;
 800d4a0:	4b02      	ldr	r3, [pc, #8]	@ (800d4ac <IsENS160SensorPresent+0x10>)
 800d4a2:	78db      	ldrb	r3, [r3, #3]
}
 800d4a4:	0018      	movs	r0, r3
 800d4a6:	46bd      	mov	sp, r7
 800d4a8:	bd80      	pop	{r7, pc}
 800d4aa:	46c0      	nop			@ (mov r8, r8)
 800d4ac:	20001120 	.word	0x20001120

0800d4b0 <IsSGPPresent>:

bool IsSGPPresent() {
 800d4b0:	b580      	push	{r7, lr}
 800d4b2:	af00      	add	r7, sp, #0
  return SensorProbe.VOC_Present;
 800d4b4:	4b02      	ldr	r3, [pc, #8]	@ (800d4c0 <IsSGPPresent+0x10>)
 800d4b6:	785b      	ldrb	r3, [r3, #1]
}
 800d4b8:	0018      	movs	r0, r3
 800d4ba:	46bd      	mov	sp, r7
 800d4bc:	bd80      	pop	{r7, pc}
 800d4be:	46c0      	nop			@ (mov r8, r8)
 800d4c0:	20001120 	.word	0x20001120

0800d4c4 <SetVOCSensorDIS_ENA>:

void SetVOCSensorDIS_ENA(bool setting) {
 800d4c4:	b580      	push	{r7, lr}
 800d4c6:	b082      	sub	sp, #8
 800d4c8:	af00      	add	r7, sp, #0
 800d4ca:	0002      	movs	r2, r0
 800d4cc:	1dfb      	adds	r3, r7, #7
 800d4ce:	701a      	strb	r2, [r3, #0]

  SensorProbe.SGP_Enabled = setting;
 800d4d0:	4b0b      	ldr	r3, [pc, #44]	@ (800d500 <SetVOCSensorDIS_ENA+0x3c>)
 800d4d2:	1dfa      	adds	r2, r7, #7
 800d4d4:	7812      	ldrb	r2, [r2, #0]
 800d4d6:	721a      	strb	r2, [r3, #8]
  Sensor.VOC_measurementEnabled = setting;
 800d4d8:	4b0a      	ldr	r3, [pc, #40]	@ (800d504 <SetVOCSensorDIS_ENA+0x40>)
 800d4da:	1dfa      	adds	r2, r7, #7
 800d4dc:	7812      	ldrb	r2, [r2, #0]
 800d4de:	705a      	strb	r2, [r3, #1]
  Debug("on-board SGP40 %s", setting?"enabled":"disabled");
 800d4e0:	1dfb      	adds	r3, r7, #7
 800d4e2:	781b      	ldrb	r3, [r3, #0]
 800d4e4:	2b00      	cmp	r3, #0
 800d4e6:	d001      	beq.n	800d4ec <SetVOCSensorDIS_ENA+0x28>
 800d4e8:	4b07      	ldr	r3, [pc, #28]	@ (800d508 <SetVOCSensorDIS_ENA+0x44>)
 800d4ea:	e000      	b.n	800d4ee <SetVOCSensorDIS_ENA+0x2a>
 800d4ec:	4b07      	ldr	r3, [pc, #28]	@ (800d50c <SetVOCSensorDIS_ENA+0x48>)
 800d4ee:	4a08      	ldr	r2, [pc, #32]	@ (800d510 <SetVOCSensorDIS_ENA+0x4c>)
 800d4f0:	4908      	ldr	r1, [pc, #32]	@ (800d514 <SetVOCSensorDIS_ENA+0x50>)
 800d4f2:	2003      	movs	r0, #3
 800d4f4:	f006 fca2 	bl	8013e3c <CreateLine>
}
 800d4f8:	46c0      	nop			@ (mov r8, r8)
 800d4fa:	46bd      	mov	sp, r7
 800d4fc:	b002      	add	sp, #8
 800d4fe:	bd80      	pop	{r7, pc}
 800d500:	20001120 	.word	0x20001120
 800d504:	20001118 	.word	0x20001118
 800d508:	0802c910 	.word	0x0802c910
 800d50c:	0802c918 	.word	0x0802c918
 800d510:	0802c924 	.word	0x0802c924
 800d514:	0802c938 	.word	0x0802c938

0800d518 <IsPMSensorEnabled>:

bool IsVOCSensorEnabled() {
  return Sensor.VOC_measurementEnabled;
}

bool IsPMSensorEnabled() {
 800d518:	b580      	push	{r7, lr}
 800d51a:	af00      	add	r7, sp, #0
  return Sensor.PM_measurementEnabled;
 800d51c:	4b02      	ldr	r3, [pc, #8]	@ (800d528 <IsPMSensorEnabled+0x10>)
 800d51e:	789b      	ldrb	r3, [r3, #2]
}
 800d520:	0018      	movs	r0, r3
 800d522:	46bd      	mov	sp, r7
 800d524:	bd80      	pop	{r7, pc}
 800d526:	46c0      	nop			@ (mov r8, r8)
 800d528:	20001118 	.word	0x20001118

0800d52c <SetVOCSensorStatus>:

void SetENS160SensorStatus(bool setting) {
  Sensor.ENS_measurementEnabled =  setting;
}

void SetVOCSensorStatus(bool setting) {
 800d52c:	b580      	push	{r7, lr}
 800d52e:	b082      	sub	sp, #8
 800d530:	af00      	add	r7, sp, #0
 800d532:	0002      	movs	r2, r0
 800d534:	1dfb      	adds	r3, r7, #7
 800d536:	701a      	strb	r2, [r3, #0]
  if (SensorProbe.SGP_Enabled) {
 800d538:	4b05      	ldr	r3, [pc, #20]	@ (800d550 <SetVOCSensorStatus+0x24>)
 800d53a:	7a1b      	ldrb	r3, [r3, #8]
 800d53c:	2b00      	cmp	r3, #0
 800d53e:	d003      	beq.n	800d548 <SetVOCSensorStatus+0x1c>
    Sensor.VOC_measurementEnabled = setting;
 800d540:	4b04      	ldr	r3, [pc, #16]	@ (800d554 <SetVOCSensorStatus+0x28>)
 800d542:	1dfa      	adds	r2, r7, #7
 800d544:	7812      	ldrb	r2, [r2, #0]
 800d546:	705a      	strb	r2, [r3, #1]
  }
//  Debug("SetVOCSensorStatus VOC_measurementEnabled = %d", setting);
}
 800d548:	46c0      	nop			@ (mov r8, r8)
 800d54a:	46bd      	mov	sp, r7
 800d54c:	b002      	add	sp, #8
 800d54e:	bd80      	pop	{r7, pc}
 800d550:	20001120 	.word	0x20001120
 800d554:	20001118 	.word	0x20001118

0800d558 <SetPMSensorStatus>:

void SetPMSensorStatus(bool setting) {
 800d558:	b580      	push	{r7, lr}
 800d55a:	b082      	sub	sp, #8
 800d55c:	af00      	add	r7, sp, #0
 800d55e:	0002      	movs	r2, r0
 800d560:	1dfb      	adds	r3, r7, #7
 800d562:	701a      	strb	r2, [r3, #0]
  Sensor.PM_measurementEnabled = setting;
 800d564:	4b03      	ldr	r3, [pc, #12]	@ (800d574 <SetPMSensorStatus+0x1c>)
 800d566:	1dfa      	adds	r2, r7, #7
 800d568:	7812      	ldrb	r2, [r2, #0]
 800d56a:	709a      	strb	r2, [r3, #2]
}
 800d56c:	46c0      	nop			@ (mov r8, r8)
 800d56e:	46bd      	mov	sp, r7
 800d570:	b002      	add	sp, #8
 800d572:	bd80      	pop	{r7, pc}
 800d574:	20001118 	.word	0x20001118

0800d578 <SetESPMeasurementDone>:

void SetMICSensorStatus(bool setting) {
  Sensor.MIC_measurementEnabled = setting;
}

void SetESPMeasurementDone(){
 800d578:	b580      	push	{r7, lr}
 800d57a:	af00      	add	r7, sp, #0
  SensorProbe.ESP_Present = true;
 800d57c:	4b02      	ldr	r3, [pc, #8]	@ (800d588 <SetESPMeasurementDone+0x10>)
 800d57e:	2201      	movs	r2, #1
 800d580:	71da      	strb	r2, [r3, #7]
}
 800d582:	46c0      	nop			@ (mov r8, r8)
 800d584:	46bd      	mov	sp, r7
 800d586:	bd80      	pop	{r7, pc}
 800d588:	20001120 	.word	0x20001120

0800d58c <Device_Init>:

void Device_Init(I2C_HandleTypeDef* sensorI2C, I2S_HandleTypeDef* micI2s, ADC_HandleTypeDef* ADC_HANDLER, UART_HandleTypeDef* espUart) {
 800d58c:	b580      	push	{r7, lr}
 800d58e:	b084      	sub	sp, #16
 800d590:	af00      	add	r7, sp, #0
 800d592:	60f8      	str	r0, [r7, #12]
 800d594:	60b9      	str	r1, [r7, #8]
 800d596:	607a      	str	r2, [r7, #4]
 800d598:	603b      	str	r3, [r7, #0]
  testInit();
 800d59a:	f7ff ff1d 	bl	800d3d8 <testInit>
  I2CSensors_Init(sensorI2C);
 800d59e:	68fb      	ldr	r3, [r7, #12]
 800d5a0:	0018      	movs	r0, r3
 800d5a2:	f7fa fdf5 	bl	8008190 <I2CSensors_Init>
  if(!HIDS_DeviceConnected()) {
 800d5a6:	f006 ff4d 	bl	8014444 <HIDS_DeviceConnected>
 800d5aa:	0003      	movs	r3, r0
 800d5ac:	001a      	movs	r2, r3
 800d5ae:	2301      	movs	r3, #1
 800d5b0:	4053      	eors	r3, r2
 800d5b2:	b2db      	uxtb	r3, r3
 800d5b4:	2b00      	cmp	r3, #0
 800d5b6:	d00c      	beq.n	800d5d2 <Device_Init+0x46>
     Error("Humidity / Temperature sensor NOT connected!");
 800d5b8:	4abf      	ldr	r2, [pc, #764]	@ (800d8b8 <Device_Init+0x32c>)
 800d5ba:	4bc0      	ldr	r3, [pc, #768]	@ (800d8bc <Device_Init+0x330>)
 800d5bc:	0019      	movs	r1, r3
 800d5be:	2001      	movs	r0, #1
 800d5c0:	f006 fc3c 	bl	8013e3c <CreateLine>
     SensorProbe.HT_Present = false;
 800d5c4:	4bbe      	ldr	r3, [pc, #760]	@ (800d8c0 <Device_Init+0x334>)
 800d5c6:	2200      	movs	r2, #0
 800d5c8:	701a      	strb	r2, [r3, #0]
     Sensor.HT_measurementEnabled = false;
 800d5ca:	4bbe      	ldr	r3, [pc, #760]	@ (800d8c4 <Device_Init+0x338>)
 800d5cc:	2200      	movs	r2, #0
 800d5ce:	701a      	strb	r2, [r3, #0]
 800d5d0:	e008      	b.n	800d5e4 <Device_Init+0x58>
     // HT Device NOT connected, turning LED on RED.
  }else {
    // HT Device is connected, turning led on GREEN.
    SensorProbe.HT_Present = true;
 800d5d2:	4bbb      	ldr	r3, [pc, #748]	@ (800d8c0 <Device_Init+0x334>)
 800d5d4:	2201      	movs	r2, #1
 800d5d6:	701a      	strb	r2, [r3, #0]
    Debug("Humidity / Temperature sensor initialised.");
 800d5d8:	4abb      	ldr	r2, [pc, #748]	@ (800d8c8 <Device_Init+0x33c>)
 800d5da:	4bbc      	ldr	r3, [pc, #752]	@ (800d8cc <Device_Init+0x340>)
 800d5dc:	0019      	movs	r1, r3
 800d5de:	2003      	movs	r0, #3
 800d5e0:	f006 fc2c 	bl	8013e3c <CreateLine>
  }
  if(!BMP280_DeviceConnected()) {
 800d5e4:	f7fe f95a 	bl	800b89c <BMP280_DeviceConnected>
 800d5e8:	0003      	movs	r3, r0
 800d5ea:	001a      	movs	r2, r3
 800d5ec:	2301      	movs	r3, #1
 800d5ee:	4053      	eors	r3, r2
 800d5f0:	b2db      	uxtb	r3, r3
 800d5f2:	2b00      	cmp	r3, #0
 800d5f4:	d00c      	beq.n	800d610 <Device_Init+0x84>
     Error("Air pressure / Temperature sensor NOT connected!");
 800d5f6:	4ab6      	ldr	r2, [pc, #728]	@ (800d8d0 <Device_Init+0x344>)
 800d5f8:	4bb0      	ldr	r3, [pc, #704]	@ (800d8bc <Device_Init+0x330>)
 800d5fa:	0019      	movs	r1, r3
 800d5fc:	2001      	movs	r0, #1
 800d5fe:	f006 fc1d 	bl	8013e3c <CreateLine>
     SensorProbe.BMP280_Present = false;
 800d602:	4baf      	ldr	r3, [pc, #700]	@ (800d8c0 <Device_Init+0x334>)
 800d604:	2200      	movs	r2, #0
 800d606:	711a      	strb	r2, [r3, #4]
     Sensor.BMP_measurementEnabled = false;
 800d608:	4bae      	ldr	r3, [pc, #696]	@ (800d8c4 <Device_Init+0x338>)
 800d60a:	2200      	movs	r2, #0
 800d60c:	715a      	strb	r2, [r3, #5]
 800d60e:	e008      	b.n	800d622 <Device_Init+0x96>
  }else {
    SensorProbe.BMP280_Present = true;
 800d610:	4bab      	ldr	r3, [pc, #684]	@ (800d8c0 <Device_Init+0x334>)
 800d612:	2201      	movs	r2, #1
 800d614:	711a      	strb	r2, [r3, #4]
    Debug("Air pressure / Temperature sensor initialised.");
 800d616:	4aaf      	ldr	r2, [pc, #700]	@ (800d8d4 <Device_Init+0x348>)
 800d618:	4bac      	ldr	r3, [pc, #688]	@ (800d8cc <Device_Init+0x340>)
 800d61a:	0019      	movs	r1, r3
 800d61c:	2003      	movs	r0, #3
 800d61e:	f006 fc0d 	bl	8013e3c <CreateLine>
  }
  if(!SGP_DeviceConnected()) {
 800d622:	f003 fd9b 	bl	801115c <SGP_DeviceConnected>
 800d626:	0003      	movs	r3, r0
 800d628:	001a      	movs	r2, r3
 800d62a:	2301      	movs	r3, #1
 800d62c:	4053      	eors	r3, r2
 800d62e:	b2db      	uxtb	r3, r3
 800d630:	2b00      	cmp	r3, #0
 800d632:	d00c      	beq.n	800d64e <Device_Init+0xc2>
    SensorProbe.VOC_Present = false;
 800d634:	4ba2      	ldr	r3, [pc, #648]	@ (800d8c0 <Device_Init+0x334>)
 800d636:	2200      	movs	r2, #0
 800d638:	705a      	strb	r2, [r3, #1]
     Error("SGP device not connected!");
 800d63a:	4aa7      	ldr	r2, [pc, #668]	@ (800d8d8 <Device_Init+0x34c>)
 800d63c:	4b9f      	ldr	r3, [pc, #636]	@ (800d8bc <Device_Init+0x330>)
 800d63e:	0019      	movs	r1, r3
 800d640:	2001      	movs	r0, #1
 800d642:	f006 fbfb 	bl	8013e3c <CreateLine>
     Sensor.VOC_measurementEnabled = false;
 800d646:	4b9f      	ldr	r3, [pc, #636]	@ (800d8c4 <Device_Init+0x338>)
 800d648:	2200      	movs	r2, #0
 800d64a:	705a      	strb	r2, [r3, #1]
 800d64c:	e00b      	b.n	800d666 <Device_Init+0xda>
  }
  else{
    SensorProbe.SGP_Enabled = true;
 800d64e:	4b9c      	ldr	r3, [pc, #624]	@ (800d8c0 <Device_Init+0x334>)
 800d650:	2201      	movs	r2, #1
 800d652:	721a      	strb	r2, [r3, #8]
    SensorProbe.VOC_Present = true;
 800d654:	4b9a      	ldr	r3, [pc, #616]	@ (800d8c0 <Device_Init+0x334>)
 800d656:	2201      	movs	r2, #1
 800d658:	705a      	strb	r2, [r3, #1]
    Debug("SGP sensor initialised.");
 800d65a:	4aa0      	ldr	r2, [pc, #640]	@ (800d8dc <Device_Init+0x350>)
 800d65c:	4b9b      	ldr	r3, [pc, #620]	@ (800d8cc <Device_Init+0x340>)
 800d65e:	0019      	movs	r1, r3
 800d660:	2003      	movs	r0, #3
 800d662:	f006 fbeb 	bl	8013e3c <CreateLine>
  }
  if(!ENS_DeviceConnected()) {
 800d666:	f7f6 fbff 	bl	8003e68 <ENS_DeviceConnected>
 800d66a:	0003      	movs	r3, r0
 800d66c:	001a      	movs	r2, r3
 800d66e:	2301      	movs	r3, #1
 800d670:	4053      	eors	r3, r2
 800d672:	b2db      	uxtb	r3, r3
 800d674:	2b00      	cmp	r3, #0
 800d676:	d00c      	beq.n	800d692 <Device_Init+0x106>
    SensorProbe.ENS160_Present = false;
 800d678:	4b91      	ldr	r3, [pc, #580]	@ (800d8c0 <Device_Init+0x334>)
 800d67a:	2200      	movs	r2, #0
 800d67c:	70da      	strb	r2, [r3, #3]
     Error("ENS device not connected!");
 800d67e:	4a98      	ldr	r2, [pc, #608]	@ (800d8e0 <Device_Init+0x354>)
 800d680:	4b8e      	ldr	r3, [pc, #568]	@ (800d8bc <Device_Init+0x330>)
 800d682:	0019      	movs	r1, r3
 800d684:	2001      	movs	r0, #1
 800d686:	f006 fbd9 	bl	8013e3c <CreateLine>
     Sensor.ENS_measurementEnabled = false;
 800d68a:	4b8e      	ldr	r3, [pc, #568]	@ (800d8c4 <Device_Init+0x338>)
 800d68c:	2200      	movs	r2, #0
 800d68e:	719a      	strb	r2, [r3, #6]
 800d690:	e008      	b.n	800d6a4 <Device_Init+0x118>
  }
  else{
    SensorProbe.ENS160_Present = true;
 800d692:	4b8b      	ldr	r3, [pc, #556]	@ (800d8c0 <Device_Init+0x334>)
 800d694:	2201      	movs	r2, #1
 800d696:	70da      	strb	r2, [r3, #3]
    Debug("ENS sensor initialised.");
 800d698:	4a92      	ldr	r2, [pc, #584]	@ (800d8e4 <Device_Init+0x358>)
 800d69a:	4b8c      	ldr	r3, [pc, #560]	@ (800d8cc <Device_Init+0x340>)
 800d69c:	0019      	movs	r1, r3
 800d69e:	2003      	movs	r0, #3
 800d6a0:	f006 fbcc 	bl	8013e3c <CreateLine>
  }
  if(!AHT20_DeviceConnected()) {
 800d6a4:	f7fd fd38 	bl	800b118 <AHT20_DeviceConnected>
 800d6a8:	0003      	movs	r3, r0
 800d6aa:	001a      	movs	r2, r3
 800d6ac:	2301      	movs	r3, #1
 800d6ae:	4053      	eors	r3, r2
 800d6b0:	b2db      	uxtb	r3, r3
 800d6b2:	2b00      	cmp	r3, #0
 800d6b4:	d00c      	beq.n	800d6d0 <Device_Init+0x144>
     Error("AHT20 Humidity / Temperature sensor NOT connected!");
 800d6b6:	4a8c      	ldr	r2, [pc, #560]	@ (800d8e8 <Device_Init+0x35c>)
 800d6b8:	4b80      	ldr	r3, [pc, #512]	@ (800d8bc <Device_Init+0x330>)
 800d6ba:	0019      	movs	r1, r3
 800d6bc:	2001      	movs	r0, #1
 800d6be:	f006 fbbd 	bl	8013e3c <CreateLine>
     SensorProbe.AHT20_Present = false;
 800d6c2:	4b7f      	ldr	r3, [pc, #508]	@ (800d8c0 <Device_Init+0x334>)
 800d6c4:	2200      	movs	r2, #0
 800d6c6:	709a      	strb	r2, [r3, #2]
     Sensor.AHT_measurementEnabled = false;
 800d6c8:	4b7e      	ldr	r3, [pc, #504]	@ (800d8c4 <Device_Init+0x338>)
 800d6ca:	2200      	movs	r2, #0
 800d6cc:	711a      	strb	r2, [r3, #4]
 800d6ce:	e008      	b.n	800d6e2 <Device_Init+0x156>
  }else {
    SensorProbe.AHT20_Present = true;
 800d6d0:	4b7b      	ldr	r3, [pc, #492]	@ (800d8c0 <Device_Init+0x334>)
 800d6d2:	2201      	movs	r2, #1
 800d6d4:	709a      	strb	r2, [r3, #2]
    Debug("AHT20 Humidity / Temperature sensor initialised.");
 800d6d6:	4a85      	ldr	r2, [pc, #532]	@ (800d8ec <Device_Init+0x360>)
 800d6d8:	4b7c      	ldr	r3, [pc, #496]	@ (800d8cc <Device_Init+0x340>)
 800d6da:	0019      	movs	r1, r3
 800d6dc:	2003      	movs	r0, #3
 800d6de:	f006 fbad 	bl	8013e3c <CreateLine>
  }
  if(SensorProbe.VOC_Present && SensorProbe.HT_Present){
 800d6e2:	4b77      	ldr	r3, [pc, #476]	@ (800d8c0 <Device_Init+0x334>)
 800d6e4:	785b      	ldrb	r3, [r3, #1]
 800d6e6:	2b00      	cmp	r3, #0
 800d6e8:	d009      	beq.n	800d6fe <Device_Init+0x172>
 800d6ea:	4b75      	ldr	r3, [pc, #468]	@ (800d8c0 <Device_Init+0x334>)
 800d6ec:	781b      	ldrb	r3, [r3, #0]
 800d6ee:	2b00      	cmp	r3, #0
 800d6f0:	d005      	beq.n	800d6fe <Device_Init+0x172>
    SetDBLED(false, true, false);
 800d6f2:	2200      	movs	r2, #0
 800d6f4:	2101      	movs	r1, #1
 800d6f6:	2000      	movs	r0, #0
 800d6f8:	f005 f880 	bl	80127fc <SetDBLED>
 800d6fc:	e018      	b.n	800d730 <Device_Init+0x1a4>
  }
  else{
    SetDBLED(true, false, false);
 800d6fe:	2200      	movs	r2, #0
 800d700:	2100      	movs	r1, #0
 800d702:	2001      	movs	r0, #1
 800d704:	f005 f87a 	bl	80127fc <SetDBLED>
    HAL_GPIO_WritePin(MCU_LED_C_R_GPIO_Port, MCU_LED_C_R_Pin, 0);
 800d708:	4b79      	ldr	r3, [pc, #484]	@ (800d8f0 <Device_Init+0x364>)
 800d70a:	2200      	movs	r2, #0
 800d70c:	2101      	movs	r1, #1
 800d70e:	0018      	movs	r0, r3
 800d710:	f008 fb7f 	bl	8015e12 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MCU_LED_C_G_GPIO_Port, MCU_LED_C_G_Pin, 1);
 800d714:	2380      	movs	r3, #128	@ 0x80
 800d716:	005b      	lsls	r3, r3, #1
 800d718:	4875      	ldr	r0, [pc, #468]	@ (800d8f0 <Device_Init+0x364>)
 800d71a:	2201      	movs	r2, #1
 800d71c:	0019      	movs	r1, r3
 800d71e:	f008 fb78 	bl	8015e12 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MCU_LED_C_B_GPIO_Port, MCU_LED_C_B_Pin, 1);
 800d722:	2380      	movs	r3, #128	@ 0x80
 800d724:	009b      	lsls	r3, r3, #2
 800d726:	4872      	ldr	r0, [pc, #456]	@ (800d8f0 <Device_Init+0x364>)
 800d728:	2201      	movs	r2, #1
 800d72a:	0019      	movs	r1, r3
 800d72c:	f008 fb71 	bl	8015e12 <HAL_GPIO_WritePin>
  }
  if(Sensor.MIC_measurementEnabled) {
 800d730:	4b64      	ldr	r3, [pc, #400]	@ (800d8c4 <Device_Init+0x338>)
 800d732:	78db      	ldrb	r3, [r3, #3]
 800d734:	2b00      	cmp	r3, #0
 800d736:	d028      	beq.n	800d78a <Device_Init+0x1fe>
    Info("Device_Init calls enableMicrophone");
 800d738:	4a6e      	ldr	r2, [pc, #440]	@ (800d8f4 <Device_Init+0x368>)
 800d73a:	4b6f      	ldr	r3, [pc, #444]	@ (800d8f8 <Device_Init+0x36c>)
 800d73c:	0019      	movs	r1, r3
 800d73e:	2002      	movs	r0, #2
 800d740:	f006 fb7c 	bl	8013e3c <CreateLine>
    if (!enableMicrophone(true)) {
 800d744:	2001      	movs	r0, #1
 800d746:	f004 f93f 	bl	80119c8 <enableMicrophone>
 800d74a:	0003      	movs	r3, r0
 800d74c:	001a      	movs	r2, r3
 800d74e:	2301      	movs	r3, #1
 800d750:	4053      	eors	r3, r2
 800d752:	b2db      	uxtb	r3, r3
 800d754:	2b00      	cmp	r3, #0
 800d756:	d00c      	beq.n	800d772 <Device_Init+0x1e6>
      Error("Microphone device not connected! DMA Error.");
 800d758:	4a68      	ldr	r2, [pc, #416]	@ (800d8fc <Device_Init+0x370>)
 800d75a:	4b58      	ldr	r3, [pc, #352]	@ (800d8bc <Device_Init+0x330>)
 800d75c:	0019      	movs	r1, r3
 800d75e:	2001      	movs	r0, #1
 800d760:	f006 fb6c 	bl	8013e3c <CreateLine>
      SensorProbe.MIC_Present = false;
 800d764:	4b56      	ldr	r3, [pc, #344]	@ (800d8c0 <Device_Init+0x334>)
 800d766:	2200      	movs	r2, #0
 800d768:	719a      	strb	r2, [r3, #6]
      Sensor.MIC_measurementEnabled = false;
 800d76a:	4b56      	ldr	r3, [pc, #344]	@ (800d8c4 <Device_Init+0x338>)
 800d76c:	2200      	movs	r2, #0
 800d76e:	70da      	strb	r2, [r3, #3]
 800d770:	e00b      	b.n	800d78a <Device_Init+0x1fe>
    }
    else{
      SensorProbe.MIC_Present = true;
 800d772:	4b53      	ldr	r3, [pc, #332]	@ (800d8c0 <Device_Init+0x334>)
 800d774:	2201      	movs	r2, #1
 800d776:	719a      	strb	r2, [r3, #6]
      Sensor.MIC_measurementEnabled = true;
 800d778:	4b52      	ldr	r3, [pc, #328]	@ (800d8c4 <Device_Init+0x338>)
 800d77a:	2201      	movs	r2, #1
 800d77c:	70da      	strb	r2, [r3, #3]
      Debug("DMA and IRQ armed for Microphone sensor.");
 800d77e:	4a60      	ldr	r2, [pc, #384]	@ (800d900 <Device_Init+0x374>)
 800d780:	4b52      	ldr	r3, [pc, #328]	@ (800d8cc <Device_Init+0x340>)
 800d782:	0019      	movs	r1, r3
 800d784:	2003      	movs	r0, #3
 800d786:	f006 fb59 	bl	8013e3c <CreateLine>
    }
  }
  if (!probe_sen5x()) {
 800d78a:	f000 fff3 	bl	800e774 <probe_sen5x>
 800d78e:	1e03      	subs	r3, r0, #0
 800d790:	d122      	bne.n	800d7d8 <Device_Init+0x24c>
    Debug("PM sensor initialised.");
 800d792:	4a5c      	ldr	r2, [pc, #368]	@ (800d904 <Device_Init+0x378>)
 800d794:	4b4d      	ldr	r3, [pc, #308]	@ (800d8cc <Device_Init+0x340>)
 800d796:	0019      	movs	r1, r3
 800d798:	2003      	movs	r0, #3
 800d79a:	f006 fb4f 	bl	8013e3c <CreateLine>
    SensorProbe.PM_Present = true; // not present
 800d79e:	4b48      	ldr	r3, [pc, #288]	@ (800d8c0 <Device_Init+0x334>)
 800d7a0:	2201      	movs	r2, #1
 800d7a2:	715a      	strb	r2, [r3, #5]
    Sensor.PM_measurementEnabled = true;
 800d7a4:	4b47      	ldr	r3, [pc, #284]	@ (800d8c4 <Device_Init+0x338>)
 800d7a6:	2201      	movs	r2, #1
 800d7a8:	709a      	strb	r2, [r3, #2]
    if (((product_name[4] == '4') || (product_name[4] == '5'))) {
 800d7aa:	4b57      	ldr	r3, [pc, #348]	@ (800d908 <Device_Init+0x37c>)
 800d7ac:	791b      	ldrb	r3, [r3, #4]
 800d7ae:	2b34      	cmp	r3, #52	@ 0x34
 800d7b0:	d003      	beq.n	800d7ba <Device_Init+0x22e>
 800d7b2:	4b55      	ldr	r3, [pc, #340]	@ (800d908 <Device_Init+0x37c>)
 800d7b4:	791b      	ldrb	r3, [r3, #4]
 800d7b6:	2b35      	cmp	r3, #53	@ 0x35
 800d7b8:	d11c      	bne.n	800d7f4 <Device_Init+0x268>
      Info("For power saving the SGP40 is disabled, VOCi measurement is done by sen54/sen55");
 800d7ba:	4a54      	ldr	r2, [pc, #336]	@ (800d90c <Device_Init+0x380>)
 800d7bc:	4b4e      	ldr	r3, [pc, #312]	@ (800d8f8 <Device_Init+0x36c>)
 800d7be:	0019      	movs	r1, r3
 800d7c0:	2002      	movs	r0, #2
 800d7c2:	f006 fb3b 	bl	8013e3c <CreateLine>
      Sensor.VOC_measurementEnabled = false;
 800d7c6:	4b3f      	ldr	r3, [pc, #252]	@ (800d8c4 <Device_Init+0x338>)
 800d7c8:	2200      	movs	r2, #0
 800d7ca:	705a      	strb	r2, [r3, #1]
      SensorProbe.SGP_Enabled = false;
 800d7cc:	4b3c      	ldr	r3, [pc, #240]	@ (800d8c0 <Device_Init+0x334>)
 800d7ce:	2200      	movs	r2, #0
 800d7d0:	721a      	strb	r2, [r3, #8]
      SGP_SoftReset();
 800d7d2:	f003 fea9 	bl	8011528 <SGP_SoftReset>
 800d7d6:	e00d      	b.n	800d7f4 <Device_Init+0x268>
    }
  }
  else {
    sen5x_Power_Off();      // switch off buck converter
 800d7d8:	f000 ff96 	bl	800e708 <sen5x_Power_Off>
    Debug("PM sensor not detected/connected.");
 800d7dc:	4a4c      	ldr	r2, [pc, #304]	@ (800d910 <Device_Init+0x384>)
 800d7de:	4b3b      	ldr	r3, [pc, #236]	@ (800d8cc <Device_Init+0x340>)
 800d7e0:	0019      	movs	r1, r3
 800d7e2:	2003      	movs	r0, #3
 800d7e4:	f006 fb2a 	bl	8013e3c <CreateLine>
    SensorProbe.PM_Present = false;
 800d7e8:	4b35      	ldr	r3, [pc, #212]	@ (800d8c0 <Device_Init+0x334>)
 800d7ea:	2200      	movs	r2, #0
 800d7ec:	715a      	strb	r2, [r3, #5]
    Sensor.PM_measurementEnabled = false;
 800d7ee:	4b35      	ldr	r3, [pc, #212]	@ (800d8c4 <Device_Init+0x338>)
 800d7f0:	2200      	movs	r2, #0
 800d7f2:	709a      	strb	r2, [r3, #2]
  }
  Info("SensorProbe.HT_Present: %s", SensorProbe.HT_Present?"yes":"no");
 800d7f4:	4b32      	ldr	r3, [pc, #200]	@ (800d8c0 <Device_Init+0x334>)
 800d7f6:	781b      	ldrb	r3, [r3, #0]
 800d7f8:	2b00      	cmp	r3, #0
 800d7fa:	d001      	beq.n	800d800 <Device_Init+0x274>
 800d7fc:	4b45      	ldr	r3, [pc, #276]	@ (800d914 <Device_Init+0x388>)
 800d7fe:	e000      	b.n	800d802 <Device_Init+0x276>
 800d800:	4b45      	ldr	r3, [pc, #276]	@ (800d918 <Device_Init+0x38c>)
 800d802:	4a46      	ldr	r2, [pc, #280]	@ (800d91c <Device_Init+0x390>)
 800d804:	493c      	ldr	r1, [pc, #240]	@ (800d8f8 <Device_Init+0x36c>)
 800d806:	2002      	movs	r0, #2
 800d808:	f006 fb18 	bl	8013e3c <CreateLine>
  Info("SensorProbe.VOC_Present: %s", SensorProbe.VOC_Present?"yes":"no");
 800d80c:	4b2c      	ldr	r3, [pc, #176]	@ (800d8c0 <Device_Init+0x334>)
 800d80e:	785b      	ldrb	r3, [r3, #1]
 800d810:	2b00      	cmp	r3, #0
 800d812:	d001      	beq.n	800d818 <Device_Init+0x28c>
 800d814:	4b3f      	ldr	r3, [pc, #252]	@ (800d914 <Device_Init+0x388>)
 800d816:	e000      	b.n	800d81a <Device_Init+0x28e>
 800d818:	4b3f      	ldr	r3, [pc, #252]	@ (800d918 <Device_Init+0x38c>)
 800d81a:	4a41      	ldr	r2, [pc, #260]	@ (800d920 <Device_Init+0x394>)
 800d81c:	4936      	ldr	r1, [pc, #216]	@ (800d8f8 <Device_Init+0x36c>)
 800d81e:	2002      	movs	r0, #2
 800d820:	f006 fb0c 	bl	8013e3c <CreateLine>
  Info("SensorProbe.AHT20_Present: %s", SensorProbe.AHT20_Present?"yes":"no");
 800d824:	4b26      	ldr	r3, [pc, #152]	@ (800d8c0 <Device_Init+0x334>)
 800d826:	789b      	ldrb	r3, [r3, #2]
 800d828:	2b00      	cmp	r3, #0
 800d82a:	d001      	beq.n	800d830 <Device_Init+0x2a4>
 800d82c:	4b39      	ldr	r3, [pc, #228]	@ (800d914 <Device_Init+0x388>)
 800d82e:	e000      	b.n	800d832 <Device_Init+0x2a6>
 800d830:	4b39      	ldr	r3, [pc, #228]	@ (800d918 <Device_Init+0x38c>)
 800d832:	4a3c      	ldr	r2, [pc, #240]	@ (800d924 <Device_Init+0x398>)
 800d834:	4930      	ldr	r1, [pc, #192]	@ (800d8f8 <Device_Init+0x36c>)
 800d836:	2002      	movs	r0, #2
 800d838:	f006 fb00 	bl	8013e3c <CreateLine>
  Info("SensorProbe.BMP280_Present: %s", SensorProbe.BMP280_Present?"yes":"no");
 800d83c:	4b20      	ldr	r3, [pc, #128]	@ (800d8c0 <Device_Init+0x334>)
 800d83e:	791b      	ldrb	r3, [r3, #4]
 800d840:	2b00      	cmp	r3, #0
 800d842:	d001      	beq.n	800d848 <Device_Init+0x2bc>
 800d844:	4b33      	ldr	r3, [pc, #204]	@ (800d914 <Device_Init+0x388>)
 800d846:	e000      	b.n	800d84a <Device_Init+0x2be>
 800d848:	4b33      	ldr	r3, [pc, #204]	@ (800d918 <Device_Init+0x38c>)
 800d84a:	4a37      	ldr	r2, [pc, #220]	@ (800d928 <Device_Init+0x39c>)
 800d84c:	492a      	ldr	r1, [pc, #168]	@ (800d8f8 <Device_Init+0x36c>)
 800d84e:	2002      	movs	r0, #2
 800d850:	f006 faf4 	bl	8013e3c <CreateLine>
  Info("SensorProbe.ENS160_Present: %s", SensorProbe.ENS160_Present?"yes":"no");
 800d854:	4b1a      	ldr	r3, [pc, #104]	@ (800d8c0 <Device_Init+0x334>)
 800d856:	78db      	ldrb	r3, [r3, #3]
 800d858:	2b00      	cmp	r3, #0
 800d85a:	d001      	beq.n	800d860 <Device_Init+0x2d4>
 800d85c:	4b2d      	ldr	r3, [pc, #180]	@ (800d914 <Device_Init+0x388>)
 800d85e:	e000      	b.n	800d862 <Device_Init+0x2d6>
 800d860:	4b2d      	ldr	r3, [pc, #180]	@ (800d918 <Device_Init+0x38c>)
 800d862:	4a32      	ldr	r2, [pc, #200]	@ (800d92c <Device_Init+0x3a0>)
 800d864:	4924      	ldr	r1, [pc, #144]	@ (800d8f8 <Device_Init+0x36c>)
 800d866:	2002      	movs	r0, #2
 800d868:	f006 fae8 	bl	8013e3c <CreateLine>
  Info("SensorProbe.PM_Present: %s", SensorProbe.PM_Present?"yes":"no");
 800d86c:	4b14      	ldr	r3, [pc, #80]	@ (800d8c0 <Device_Init+0x334>)
 800d86e:	795b      	ldrb	r3, [r3, #5]
 800d870:	2b00      	cmp	r3, #0
 800d872:	d001      	beq.n	800d878 <Device_Init+0x2ec>
 800d874:	4b27      	ldr	r3, [pc, #156]	@ (800d914 <Device_Init+0x388>)
 800d876:	e000      	b.n	800d87a <Device_Init+0x2ee>
 800d878:	4b27      	ldr	r3, [pc, #156]	@ (800d918 <Device_Init+0x38c>)
 800d87a:	4a2d      	ldr	r2, [pc, #180]	@ (800d930 <Device_Init+0x3a4>)
 800d87c:	491e      	ldr	r1, [pc, #120]	@ (800d8f8 <Device_Init+0x36c>)
 800d87e:	2002      	movs	r0, #2
 800d880:	f006 fadc 	bl	8013e3c <CreateLine>
  Info("SensorProbe.MIC_Present: %s", SensorProbe.MIC_Present?"yes":"no");
 800d884:	4b0e      	ldr	r3, [pc, #56]	@ (800d8c0 <Device_Init+0x334>)
 800d886:	799b      	ldrb	r3, [r3, #6]
 800d888:	2b00      	cmp	r3, #0
 800d88a:	d001      	beq.n	800d890 <Device_Init+0x304>
 800d88c:	4b21      	ldr	r3, [pc, #132]	@ (800d914 <Device_Init+0x388>)
 800d88e:	e000      	b.n	800d892 <Device_Init+0x306>
 800d890:	4b21      	ldr	r3, [pc, #132]	@ (800d918 <Device_Init+0x38c>)
 800d892:	4a28      	ldr	r2, [pc, #160]	@ (800d934 <Device_Init+0x3a8>)
 800d894:	4918      	ldr	r1, [pc, #96]	@ (800d8f8 <Device_Init+0x36c>)
 800d896:	2002      	movs	r0, #2
 800d898:	f006 fad0 	bl	8013e3c <CreateLine>
  ESP_Init(espUart);
 800d89c:	683b      	ldr	r3, [r7, #0]
 800d89e:	0018      	movs	r0, r3
 800d8a0:	f7f7 facc 	bl	8004e3c <ESP_Init>
  Debug("Sensors initialized, probing ESP.");
 800d8a4:	4a24      	ldr	r2, [pc, #144]	@ (800d938 <Device_Init+0x3ac>)
 800d8a6:	4b09      	ldr	r3, [pc, #36]	@ (800d8cc <Device_Init+0x340>)
 800d8a8:	0019      	movs	r1, r3
 800d8aa:	2003      	movs	r0, #3
 800d8ac:	f006 fac6 	bl	8013e3c <CreateLine>
}
 800d8b0:	46c0      	nop			@ (mov r8, r8)
 800d8b2:	46bd      	mov	sp, r7
 800d8b4:	b004      	add	sp, #16
 800d8b6:	bd80      	pop	{r7, pc}
 800d8b8:	0802c93c 	.word	0x0802c93c
 800d8bc:	0802c96c 	.word	0x0802c96c
 800d8c0:	20001120 	.word	0x20001120
 800d8c4:	20001118 	.word	0x20001118
 800d8c8:	0802c970 	.word	0x0802c970
 800d8cc:	0802c938 	.word	0x0802c938
 800d8d0:	0802c99c 	.word	0x0802c99c
 800d8d4:	0802c9d0 	.word	0x0802c9d0
 800d8d8:	0802ca00 	.word	0x0802ca00
 800d8dc:	0802ca1c 	.word	0x0802ca1c
 800d8e0:	0802ca34 	.word	0x0802ca34
 800d8e4:	0802ca50 	.word	0x0802ca50
 800d8e8:	0802ca68 	.word	0x0802ca68
 800d8ec:	0802ca9c 	.word	0x0802ca9c
 800d8f0:	50000400 	.word	0x50000400
 800d8f4:	0802cad0 	.word	0x0802cad0
 800d8f8:	0802caf4 	.word	0x0802caf4
 800d8fc:	0802caf8 	.word	0x0802caf8
 800d900:	0802cb24 	.word	0x0802cb24
 800d904:	0802cb50 	.word	0x0802cb50
 800d908:	200011c0 	.word	0x200011c0
 800d90c:	0802cb68 	.word	0x0802cb68
 800d910:	0802cbb8 	.word	0x0802cbb8
 800d914:	0802cbdc 	.word	0x0802cbdc
 800d918:	0802cbe0 	.word	0x0802cbe0
 800d91c:	0802cbe4 	.word	0x0802cbe4
 800d920:	0802cc00 	.word	0x0802cc00
 800d924:	0802cc1c 	.word	0x0802cc1c
 800d928:	0802cc3c 	.word	0x0802cc3c
 800d92c:	0802cc5c 	.word	0x0802cc5c
 800d930:	0802cc7c 	.word	0x0802cc7c
 800d934:	0802cc98 	.word	0x0802cc98
 800d938:	0802ccb4 	.word	0x0802ccb4

0800d93c <Device_Test>:

void Device_Test(){
 800d93c:	b580      	push	{r7, lr}
 800d93e:	af00      	add	r7, sp, #0
  if(!SensorProbe.MIC_Present){
 800d940:	4b34      	ldr	r3, [pc, #208]	@ (800da14 <Device_Test+0xd8>)
 800d942:	799b      	ldrb	r3, [r3, #6]
 800d944:	2201      	movs	r2, #1
 800d946:	4053      	eors	r3, r2
 800d948:	b2db      	uxtb	r3, r3
 800d94a:	2b00      	cmp	r3, #0
 800d94c:	d027      	beq.n	800d99e <Device_Test+0x62>
    if(MIC_TestMeasurementDone()){
 800d94e:	f000 fc41 	bl	800e1d4 <MIC_TestMeasurementDone>
 800d952:	1e03      	subs	r3, r0, #0
 800d954:	d011      	beq.n	800d97a <Device_Test+0x3e>
      //when this condition is met, the device is definite operational
      SensorProbe.MIC_Present = true;
 800d956:	4b2f      	ldr	r3, [pc, #188]	@ (800da14 <Device_Test+0xd8>)
 800d958:	2201      	movs	r2, #1
 800d95a:	719a      	strb	r2, [r3, #6]
      Sensor.MIC_measurementEnabled = true;
 800d95c:	4b2e      	ldr	r3, [pc, #184]	@ (800da18 <Device_Test+0xdc>)
 800d95e:	2201      	movs	r2, #1
 800d960:	70da      	strb	r2, [r3, #3]
      SetStatusLED(LED_OFF, Calculate_LED_ON(), LED_OFF);
 800d962:	f004 fecf 	bl	8012704 <Calculate_LED_ON>
 800d966:	0003      	movs	r3, r0
 800d968:	0019      	movs	r1, r3
 800d96a:	23fa      	movs	r3, #250	@ 0xfa
 800d96c:	011a      	lsls	r2, r3, #4
 800d96e:	23fa      	movs	r3, #250	@ 0xfa
 800d970:	011b      	lsls	r3, r3, #4
 800d972:	0018      	movs	r0, r3
 800d974:	f004 ff0e 	bl	8012794 <SetStatusLED>
 800d978:	e011      	b.n	800d99e <Device_Test+0x62>
    }
    else{
      if (micSettlingComplete()) {
 800d97a:	f004 f801 	bl	8011980 <micSettlingComplete>
 800d97e:	1e03      	subs	r3, r0, #0
 800d980:	d00d      	beq.n	800d99e <Device_Test+0x62>
        // his has to be met first
        Sensor.MIC_measurementEnabled = true;
 800d982:	4b25      	ldr	r3, [pc, #148]	@ (800da18 <Device_Test+0xdc>)
 800d984:	2201      	movs	r2, #1
 800d986:	70da      	strb	r2, [r3, #3]
        SetStatusLED(Calculate_LED_ON(), LED_OFF, LED_OFF);
 800d988:	f004 febc 	bl	8012704 <Calculate_LED_ON>
 800d98c:	0003      	movs	r3, r0
 800d98e:	0018      	movs	r0, r3
 800d990:	23fa      	movs	r3, #250	@ 0xfa
 800d992:	011a      	lsls	r2, r3, #4
 800d994:	23fa      	movs	r3, #250	@ 0xfa
 800d996:	011b      	lsls	r3, r3, #4
 800d998:	0019      	movs	r1, r3
 800d99a:	f004 fefb 	bl	8012794 <SetStatusLED>
      }
    }
  }
  if(!SensorProbe.ESP_Present){
 800d99e:	4b1d      	ldr	r3, [pc, #116]	@ (800da14 <Device_Test+0xd8>)
 800d9a0:	79db      	ldrb	r3, [r3, #7]
 800d9a2:	2201      	movs	r2, #1
 800d9a4:	4053      	eors	r3, r2
 800d9a6:	b2db      	uxtb	r3, r3
 800d9a8:	2b00      	cmp	r3, #0
 800d9aa:	d001      	beq.n	800d9b0 <Device_Test+0x74>
    ESP_WakeTest();  // calls in ESP.c  back to SetESPMeasurementDone()
 800d9ac:	f7f9 fd5c 	bl	8007468 <ESP_WakeTest>
  }
  if((SensorProbe.ESP_Present && SensorProbe.MIC_Present) || TimestampIsReached(deviceTimeOut)){
 800d9b0:	4b18      	ldr	r3, [pc, #96]	@ (800da14 <Device_Test+0xd8>)
 800d9b2:	79db      	ldrb	r3, [r3, #7]
 800d9b4:	2b00      	cmp	r3, #0
 800d9b6:	d003      	beq.n	800d9c0 <Device_Test+0x84>
 800d9b8:	4b16      	ldr	r3, [pc, #88]	@ (800da14 <Device_Test+0xd8>)
 800d9ba:	799b      	ldrb	r3, [r3, #6]
 800d9bc:	2b00      	cmp	r3, #0
 800d9be:	d106      	bne.n	800d9ce <Device_Test+0x92>
 800d9c0:	4b16      	ldr	r3, [pc, #88]	@ (800da1c <Device_Test+0xe0>)
 800d9c2:	681b      	ldr	r3, [r3, #0]
 800d9c4:	0018      	movs	r0, r3
 800d9c6:	f006 f9e3 	bl	8013d90 <TimestampIsReached>
 800d9ca:	1e03      	subs	r3, r0, #0
 800d9cc:	d01f      	beq.n	800da0e <Device_Test+0xd2>
    Info("ESP function: %s", SensorProbe.ESP_Present?"passed": "failed");
 800d9ce:	4b11      	ldr	r3, [pc, #68]	@ (800da14 <Device_Test+0xd8>)
 800d9d0:	79db      	ldrb	r3, [r3, #7]
 800d9d2:	2b00      	cmp	r3, #0
 800d9d4:	d001      	beq.n	800d9da <Device_Test+0x9e>
 800d9d6:	4b12      	ldr	r3, [pc, #72]	@ (800da20 <Device_Test+0xe4>)
 800d9d8:	e000      	b.n	800d9dc <Device_Test+0xa0>
 800d9da:	4b12      	ldr	r3, [pc, #72]	@ (800da24 <Device_Test+0xe8>)
 800d9dc:	4a12      	ldr	r2, [pc, #72]	@ (800da28 <Device_Test+0xec>)
 800d9de:	4913      	ldr	r1, [pc, #76]	@ (800da2c <Device_Test+0xf0>)
 800d9e0:	2002      	movs	r0, #2
 800d9e2:	f006 fa2b 	bl	8013e3c <CreateLine>
    Info("MIC function: %s", SensorProbe.MIC_Present?"passed": "failed");
 800d9e6:	4b0b      	ldr	r3, [pc, #44]	@ (800da14 <Device_Test+0xd8>)
 800d9e8:	799b      	ldrb	r3, [r3, #6]
 800d9ea:	2b00      	cmp	r3, #0
 800d9ec:	d001      	beq.n	800d9f2 <Device_Test+0xb6>
 800d9ee:	4b0c      	ldr	r3, [pc, #48]	@ (800da20 <Device_Test+0xe4>)
 800d9f0:	e000      	b.n	800d9f4 <Device_Test+0xb8>
 800d9f2:	4b0c      	ldr	r3, [pc, #48]	@ (800da24 <Device_Test+0xe8>)
 800d9f4:	4a0e      	ldr	r2, [pc, #56]	@ (800da30 <Device_Test+0xf4>)
 800d9f6:	490d      	ldr	r1, [pc, #52]	@ (800da2c <Device_Test+0xf0>)
 800d9f8:	2002      	movs	r0, #2
 800d9fa:	f006 fa1f 	bl	8013e3c <CreateLine>
    Info("Test completed");
 800d9fe:	4a0d      	ldr	r2, [pc, #52]	@ (800da34 <Device_Test+0xf8>)
 800da00:	4b0a      	ldr	r3, [pc, #40]	@ (800da2c <Device_Test+0xf0>)
 800da02:	0019      	movs	r1, r3
 800da04:	2002      	movs	r0, #2
 800da06:	f006 fa19 	bl	8013e3c <CreateLine>
#ifdef  SSD1306
    if (Check_USB_PowerOn() || userToggle) {
      display2ndmsg2ndline();
    }
#endif
    SetTestDone();
 800da0a:	f7ff f857 	bl	800cabc <SetTestDone>
  }
}
 800da0e:	46c0      	nop			@ (mov r8, r8)
 800da10:	46bd      	mov	sp, r7
 800da12:	bd80      	pop	{r7, pc}
 800da14:	20001120 	.word	0x20001120
 800da18:	20001118 	.word	0x20001118
 800da1c:	20001114 	.word	0x20001114
 800da20:	0802ccd8 	.word	0x0802ccd8
 800da24:	0802cce0 	.word	0x0802cce0
 800da28:	0802cce8 	.word	0x0802cce8
 800da2c:	0802caf4 	.word	0x0802caf4
 800da30:	0802ccfc 	.word	0x0802ccfc
 800da34:	0802cd10 	.word	0x0802cd10

0800da38 <AllDevicesReady>:

bool AllDevicesReady() {
 800da38:	b5f0      	push	{r4, r5, r6, r7, lr}
 800da3a:	46de      	mov	lr, fp
 800da3c:	4657      	mov	r7, sl
 800da3e:	464e      	mov	r6, r9
 800da40:	4645      	mov	r5, r8
 800da42:	b5e0      	push	{r5, r6, r7, lr}
 800da44:	b08b      	sub	sp, #44	@ 0x2c
 800da46:	af08      	add	r7, sp, #32
  static bool prevstatus = true;
  static bool allinwait = false;
  static uint8_t iminute = 0;
  if (TimestampIsReached(deviceTimeOut)) {
 800da48:	4b8a      	ldr	r3, [pc, #552]	@ (800dc74 <AllDevicesReady+0x23c>)
 800da4a:	681b      	ldr	r3, [r3, #0]
 800da4c:	0018      	movs	r0, r3
 800da4e:	f006 f99f 	bl	8013d90 <TimestampIsReached>
 800da52:	1e03      	subs	r3, r0, #0
 800da54:	d100      	bne.n	800da58 <AllDevicesReady+0x20>
 800da56:	e103      	b.n	800dc60 <AllDevicesReady+0x228>
    if (!sensorsdisablereq) {
 800da58:	4b87      	ldr	r3, [pc, #540]	@ (800dc78 <AllDevicesReady+0x240>)
 800da5a:	781b      	ldrb	r3, [r3, #0]
 800da5c:	2201      	movs	r2, #1
 800da5e:	4053      	eors	r3, r2
 800da60:	b2db      	uxtb	r3, r3
 800da62:	2b00      	cmp	r3, #0
 800da64:	d008      	beq.n	800da78 <AllDevicesReady+0x40>
      Debug("Requesting all devices ready");
 800da66:	4a85      	ldr	r2, [pc, #532]	@ (800dc7c <AllDevicesReady+0x244>)
 800da68:	4b85      	ldr	r3, [pc, #532]	@ (800dc80 <AllDevicesReady+0x248>)
 800da6a:	0019      	movs	r1, r3
 800da6c:	2003      	movs	r0, #3
 800da6e:	f006 f9e5 	bl	8013e3c <CreateLine>
      sensorsdisablereq = true;
 800da72:	4b81      	ldr	r3, [pc, #516]	@ (800dc78 <AllDevicesReady+0x240>)
 800da74:	2201      	movs	r2, #1
 800da76:	701a      	strb	r2, [r3, #0]
    }
    if (HIDSstate == HIDS_STATE_WAIT) {
 800da78:	4b82      	ldr	r3, [pc, #520]	@ (800dc84 <AllDevicesReady+0x24c>)
 800da7a:	781b      	ldrb	r3, [r3, #0]
 800da7c:	2b06      	cmp	r3, #6
 800da7e:	d102      	bne.n	800da86 <AllDevicesReady+0x4e>
      Sensor.HT_measurementEnabled = false;
 800da80:	4b81      	ldr	r3, [pc, #516]	@ (800dc88 <AllDevicesReady+0x250>)
 800da82:	2200      	movs	r2, #0
 800da84:	701a      	strb	r2, [r3, #0]
    }
    if ((AHTstate == AHT_STATE_WAIT) || !SensorProbe.AHT20_Present) {
 800da86:	4b81      	ldr	r3, [pc, #516]	@ (800dc8c <AllDevicesReady+0x254>)
 800da88:	781b      	ldrb	r3, [r3, #0]
 800da8a:	2b05      	cmp	r3, #5
 800da8c:	d006      	beq.n	800da9c <AllDevicesReady+0x64>
 800da8e:	4b80      	ldr	r3, [pc, #512]	@ (800dc90 <AllDevicesReady+0x258>)
 800da90:	789b      	ldrb	r3, [r3, #2]
 800da92:	2201      	movs	r2, #1
 800da94:	4053      	eors	r3, r2
 800da96:	b2db      	uxtb	r3, r3
 800da98:	2b00      	cmp	r3, #0
 800da9a:	d002      	beq.n	800daa2 <AllDevicesReady+0x6a>
      Sensor.AHT_measurementEnabled = false;
 800da9c:	4b7a      	ldr	r3, [pc, #488]	@ (800dc88 <AllDevicesReady+0x250>)
 800da9e:	2200      	movs	r2, #0
 800daa0:	711a      	strb	r2, [r3, #4]
    }
    if ((BMPstate == BMP_STATE_WAIT) || !SensorProbe.BMP280_Present) {
 800daa2:	4b7c      	ldr	r3, [pc, #496]	@ (800dc94 <AllDevicesReady+0x25c>)
 800daa4:	781b      	ldrb	r3, [r3, #0]
 800daa6:	2b02      	cmp	r3, #2
 800daa8:	d006      	beq.n	800dab8 <AllDevicesReady+0x80>
 800daaa:	4b79      	ldr	r3, [pc, #484]	@ (800dc90 <AllDevicesReady+0x258>)
 800daac:	791b      	ldrb	r3, [r3, #4]
 800daae:	2201      	movs	r2, #1
 800dab0:	4053      	eors	r3, r2
 800dab2:	b2db      	uxtb	r3, r3
 800dab4:	2b00      	cmp	r3, #0
 800dab6:	d002      	beq.n	800dabe <AllDevicesReady+0x86>
      Sensor.BMP_measurementEnabled = false;
 800dab8:	4b73      	ldr	r3, [pc, #460]	@ (800dc88 <AllDevicesReady+0x250>)
 800daba:	2200      	movs	r2, #0
 800dabc:	715a      	strb	r2, [r3, #5]
    }
    if ((ENSstate == ENS_STATE_WAIT) || !SensorProbe.ENS160_Present) {
 800dabe:	4b76      	ldr	r3, [pc, #472]	@ (800dc98 <AllDevicesReady+0x260>)
 800dac0:	781b      	ldrb	r3, [r3, #0]
 800dac2:	2b08      	cmp	r3, #8
 800dac4:	d006      	beq.n	800dad4 <AllDevicesReady+0x9c>
 800dac6:	4b72      	ldr	r3, [pc, #456]	@ (800dc90 <AllDevicesReady+0x258>)
 800dac8:	78db      	ldrb	r3, [r3, #3]
 800daca:	2201      	movs	r2, #1
 800dacc:	4053      	eors	r3, r2
 800dace:	b2db      	uxtb	r3, r3
 800dad0:	2b00      	cmp	r3, #0
 800dad2:	d002      	beq.n	800dada <AllDevicesReady+0xa2>
      Sensor.ENS_measurementEnabled = false;
 800dad4:	4b6c      	ldr	r3, [pc, #432]	@ (800dc88 <AllDevicesReady+0x250>)
 800dad6:	2200      	movs	r2, #0
 800dad8:	719a      	strb	r2, [r3, #6]
    }
    if ((SGPstate == SGP_STATE_WAIT) || !SensorProbe.SGP_Enabled) {
 800dada:	4b70      	ldr	r3, [pc, #448]	@ (800dc9c <AllDevicesReady+0x264>)
 800dadc:	781b      	ldrb	r3, [r3, #0]
 800dade:	2b07      	cmp	r3, #7
 800dae0:	d006      	beq.n	800daf0 <AllDevicesReady+0xb8>
 800dae2:	4b6b      	ldr	r3, [pc, #428]	@ (800dc90 <AllDevicesReady+0x258>)
 800dae4:	7a1b      	ldrb	r3, [r3, #8]
 800dae6:	2201      	movs	r2, #1
 800dae8:	4053      	eors	r3, r2
 800daea:	b2db      	uxtb	r3, r3
 800daec:	2b00      	cmp	r3, #0
 800daee:	d002      	beq.n	800daf6 <AllDevicesReady+0xbe>
      Sensor.VOC_measurementEnabled = false;
 800daf0:	4b65      	ldr	r3, [pc, #404]	@ (800dc88 <AllDevicesReady+0x250>)
 800daf2:	2200      	movs	r2, #0
 800daf4:	705a      	strb	r2, [r3, #1]
    }
    if ((PMsamplesState == LIGHT_OUT) || (PMsamplesState == CHECK_SEN5X) || (PMsamplesState == S5X_DISABLED)) {
 800daf6:	4b6a      	ldr	r3, [pc, #424]	@ (800dca0 <AllDevicesReady+0x268>)
 800daf8:	781b      	ldrb	r3, [r3, #0]
 800dafa:	2b01      	cmp	r3, #1
 800dafc:	d007      	beq.n	800db0e <AllDevicesReady+0xd6>
 800dafe:	4b68      	ldr	r3, [pc, #416]	@ (800dca0 <AllDevicesReady+0x268>)
 800db00:	781b      	ldrb	r3, [r3, #0]
 800db02:	2b03      	cmp	r3, #3
 800db04:	d003      	beq.n	800db0e <AllDevicesReady+0xd6>
 800db06:	4b66      	ldr	r3, [pc, #408]	@ (800dca0 <AllDevicesReady+0x268>)
 800db08:	781b      	ldrb	r3, [r3, #0]
 800db0a:	2b00      	cmp	r3, #0
 800db0c:	d102      	bne.n	800db14 <AllDevicesReady+0xdc>
      Sensor.PM_measurementEnabled = false;
 800db0e:	4b5e      	ldr	r3, [pc, #376]	@ (800dc88 <AllDevicesReady+0x250>)
 800db10:	2200      	movs	r2, #0
 800db12:	709a      	strb	r2, [r3, #2]
    }
    if (MICstate == MIC_STATE_WAIT){
 800db14:	4b63      	ldr	r3, [pc, #396]	@ (800dca4 <AllDevicesReady+0x26c>)
 800db16:	781b      	ldrb	r3, [r3, #0]
 800db18:	2b03      	cmp	r3, #3
 800db1a:	d102      	bne.n	800db22 <AllDevicesReady+0xea>
      Sensor.MIC_measurementEnabled = false;
 800db1c:	4b5a      	ldr	r3, [pc, #360]	@ (800dc88 <AllDevicesReady+0x250>)
 800db1e:	2200      	movs	r2, #0
 800db20:	70da      	strb	r2, [r3, #3]
    }
    if ((ESPstate == ESP_STATE_RESET) || (ESPstate == ESP_STATE_INIT)) {
 800db22:	4b61      	ldr	r3, [pc, #388]	@ (800dca8 <AllDevicesReady+0x270>)
 800db24:	781b      	ldrb	r3, [r3, #0]
 800db26:	2b09      	cmp	r3, #9
 800db28:	d004      	beq.n	800db34 <AllDevicesReady+0xfc>
 800db2a:	4b5f      	ldr	r3, [pc, #380]	@ (800dca8 <AllDevicesReady+0x270>)
 800db2c:	781b      	ldrb	r3, [r3, #0]
 800db2e:	2b02      	cmp	r3, #2
 800db30:	d000      	beq.n	800db34 <AllDevicesReady+0xfc>
 800db32:	e095      	b.n	800dc60 <AllDevicesReady+0x228>
      bool status = !(Sensor.HT_measurementEnabled | Sensor.VOC_measurementEnabled | Sensor.AHT_measurementEnabled | Sensor.BMP_measurementEnabled |
 800db34:	4b54      	ldr	r3, [pc, #336]	@ (800dc88 <AllDevicesReady+0x250>)
 800db36:	781a      	ldrb	r2, [r3, #0]
 800db38:	4b53      	ldr	r3, [pc, #332]	@ (800dc88 <AllDevicesReady+0x250>)
 800db3a:	785b      	ldrb	r3, [r3, #1]
 800db3c:	4313      	orrs	r3, r2
 800db3e:	b2da      	uxtb	r2, r3
 800db40:	4b51      	ldr	r3, [pc, #324]	@ (800dc88 <AllDevicesReady+0x250>)
 800db42:	791b      	ldrb	r3, [r3, #4]
 800db44:	4313      	orrs	r3, r2
 800db46:	b2da      	uxtb	r2, r3
 800db48:	4b4f      	ldr	r3, [pc, #316]	@ (800dc88 <AllDevicesReady+0x250>)
 800db4a:	795b      	ldrb	r3, [r3, #5]
 800db4c:	4313      	orrs	r3, r2
 800db4e:	b2da      	uxtb	r2, r3
          Sensor.ENS_measurementEnabled | Sensor.PM_measurementEnabled | Sensor.MIC_measurementEnabled);
 800db50:	4b4d      	ldr	r3, [pc, #308]	@ (800dc88 <AllDevicesReady+0x250>)
 800db52:	799b      	ldrb	r3, [r3, #6]
      bool status = !(Sensor.HT_measurementEnabled | Sensor.VOC_measurementEnabled | Sensor.AHT_measurementEnabled | Sensor.BMP_measurementEnabled |
 800db54:	4313      	orrs	r3, r2
 800db56:	b2da      	uxtb	r2, r3
          Sensor.ENS_measurementEnabled | Sensor.PM_measurementEnabled | Sensor.MIC_measurementEnabled);
 800db58:	4b4b      	ldr	r3, [pc, #300]	@ (800dc88 <AllDevicesReady+0x250>)
 800db5a:	789b      	ldrb	r3, [r3, #2]
 800db5c:	4313      	orrs	r3, r2
 800db5e:	b2da      	uxtb	r2, r3
 800db60:	4b49      	ldr	r3, [pc, #292]	@ (800dc88 <AllDevicesReady+0x250>)
 800db62:	78db      	ldrb	r3, [r3, #3]
 800db64:	4313      	orrs	r3, r2
 800db66:	b2db      	uxtb	r3, r3
 800db68:	1e5a      	subs	r2, r3, #1
 800db6a:	4193      	sbcs	r3, r2
 800db6c:	b2db      	uxtb	r3, r3
 800db6e:	2201      	movs	r2, #1
 800db70:	4053      	eors	r3, r2
 800db72:	b2db      	uxtb	r3, r3
 800db74:	001a      	movs	r2, r3
      bool status = !(Sensor.HT_measurementEnabled | Sensor.VOC_measurementEnabled | Sensor.AHT_measurementEnabled | Sensor.BMP_measurementEnabled |
 800db76:	1dfb      	adds	r3, r7, #7
 800db78:	701a      	strb	r2, [r3, #0]
 800db7a:	781a      	ldrb	r2, [r3, #0]
 800db7c:	2101      	movs	r1, #1
 800db7e:	400a      	ands	r2, r1
 800db80:	701a      	strb	r2, [r3, #0]
      if (!status && ((prevstatus != status) || (iminute != lastminute))) {
 800db82:	1dfb      	adds	r3, r7, #7
 800db84:	781b      	ldrb	r3, [r3, #0]
 800db86:	2201      	movs	r2, #1
 800db88:	4053      	eors	r3, r2
 800db8a:	b2db      	uxtb	r3, r3
 800db8c:	2b00      	cmp	r3, #0
 800db8e:	d03e      	beq.n	800dc0e <AllDevicesReady+0x1d6>
 800db90:	4b46      	ldr	r3, [pc, #280]	@ (800dcac <AllDevicesReady+0x274>)
 800db92:	781b      	ldrb	r3, [r3, #0]
 800db94:	1dfa      	adds	r2, r7, #7
 800db96:	7812      	ldrb	r2, [r2, #0]
 800db98:	429a      	cmp	r2, r3
 800db9a:	d105      	bne.n	800dba8 <AllDevicesReady+0x170>
 800db9c:	4b44      	ldr	r3, [pc, #272]	@ (800dcb0 <AllDevicesReady+0x278>)
 800db9e:	781a      	ldrb	r2, [r3, #0]
 800dba0:	4b44      	ldr	r3, [pc, #272]	@ (800dcb4 <AllDevicesReady+0x27c>)
 800dba2:	781b      	ldrb	r3, [r3, #0]
 800dba4:	429a      	cmp	r2, r3
 800dba6:	d032      	beq.n	800dc0e <AllDevicesReady+0x1d6>
        Debug("HIDS %d, AHT %d, BMP %d, ENS %d, SGP %d,PM %d, MIC %d, Lock is from sensor column : %d (0 is FREE)",Sensor.HT_measurementEnabled, Sensor.AHT_measurementEnabled,
 800dba8:	4b37      	ldr	r3, [pc, #220]	@ (800dc88 <AllDevicesReady+0x250>)
 800dbaa:	781b      	ldrb	r3, [r3, #0]
 800dbac:	469b      	mov	fp, r3
 800dbae:	4b36      	ldr	r3, [pc, #216]	@ (800dc88 <AllDevicesReady+0x250>)
 800dbb0:	791b      	ldrb	r3, [r3, #4]
 800dbb2:	001c      	movs	r4, r3
 800dbb4:	4b34      	ldr	r3, [pc, #208]	@ (800dc88 <AllDevicesReady+0x250>)
 800dbb6:	795b      	ldrb	r3, [r3, #5]
 800dbb8:	001d      	movs	r5, r3
 800dbba:	4b33      	ldr	r3, [pc, #204]	@ (800dc88 <AllDevicesReady+0x250>)
 800dbbc:	799b      	ldrb	r3, [r3, #6]
 800dbbe:	001e      	movs	r6, r3
 800dbc0:	4b31      	ldr	r3, [pc, #196]	@ (800dc88 <AllDevicesReady+0x250>)
 800dbc2:	785b      	ldrb	r3, [r3, #1]
 800dbc4:	4698      	mov	r8, r3
 800dbc6:	4b30      	ldr	r3, [pc, #192]	@ (800dc88 <AllDevicesReady+0x250>)
 800dbc8:	789b      	ldrb	r3, [r3, #2]
 800dbca:	4699      	mov	r9, r3
 800dbcc:	4b2e      	ldr	r3, [pc, #184]	@ (800dc88 <AllDevicesReady+0x250>)
 800dbce:	78db      	ldrb	r3, [r3, #3]
 800dbd0:	469a      	mov	sl, r3
 800dbd2:	f000 f915 	bl	800de00 <getSensorLock>
 800dbd6:	0003      	movs	r3, r0
 800dbd8:	4a37      	ldr	r2, [pc, #220]	@ (800dcb8 <AllDevicesReady+0x280>)
 800dbda:	4929      	ldr	r1, [pc, #164]	@ (800dc80 <AllDevicesReady+0x248>)
 800dbdc:	9306      	str	r3, [sp, #24]
 800dbde:	4653      	mov	r3, sl
 800dbe0:	9305      	str	r3, [sp, #20]
 800dbe2:	464b      	mov	r3, r9
 800dbe4:	9304      	str	r3, [sp, #16]
 800dbe6:	4643      	mov	r3, r8
 800dbe8:	9303      	str	r3, [sp, #12]
 800dbea:	9602      	str	r6, [sp, #8]
 800dbec:	9501      	str	r5, [sp, #4]
 800dbee:	9400      	str	r4, [sp, #0]
 800dbf0:	465b      	mov	r3, fp
 800dbf2:	2003      	movs	r0, #3
 800dbf4:	f006 f922 	bl	8013e3c <CreateLine>
          Sensor.BMP_measurementEnabled, Sensor.ENS_measurementEnabled, Sensor.VOC_measurementEnabled, Sensor.PM_measurementEnabled, Sensor.MIC_measurementEnabled, getSensorLock());
        prevstatus = status;
 800dbf8:	4b2c      	ldr	r3, [pc, #176]	@ (800dcac <AllDevicesReady+0x274>)
 800dbfa:	1dfa      	adds	r2, r7, #7
 800dbfc:	7812      	ldrb	r2, [r2, #0]
 800dbfe:	701a      	strb	r2, [r3, #0]
        allinwait = false;
 800dc00:	4b2e      	ldr	r3, [pc, #184]	@ (800dcbc <AllDevicesReady+0x284>)
 800dc02:	2200      	movs	r2, #0
 800dc04:	701a      	strb	r2, [r3, #0]
        iminute = lastminute;
 800dc06:	4b2b      	ldr	r3, [pc, #172]	@ (800dcb4 <AllDevicesReady+0x27c>)
 800dc08:	781a      	ldrb	r2, [r3, #0]
 800dc0a:	4b29      	ldr	r3, [pc, #164]	@ (800dcb0 <AllDevicesReady+0x278>)
 800dc0c:	701a      	strb	r2, [r3, #0]
      }
      if (status && !allinwait) {
 800dc0e:	1dfb      	adds	r3, r7, #7
 800dc10:	781b      	ldrb	r3, [r3, #0]
 800dc12:	2b00      	cmp	r3, #0
 800dc14:	d021      	beq.n	800dc5a <AllDevicesReady+0x222>
 800dc16:	4b29      	ldr	r3, [pc, #164]	@ (800dcbc <AllDevicesReady+0x284>)
 800dc18:	781b      	ldrb	r3, [r3, #0]
 800dc1a:	2201      	movs	r2, #1
 800dc1c:	4053      	eors	r3, r2
 800dc1e:	b2db      	uxtb	r3, r3
 800dc20:	2b00      	cmp	r3, #0
 800dc22:	d01a      	beq.n	800dc5a <AllDevicesReady+0x222>
        Debug("All sensors in wait");
 800dc24:	4a26      	ldr	r2, [pc, #152]	@ (800dcc0 <AllDevicesReady+0x288>)
 800dc26:	4b16      	ldr	r3, [pc, #88]	@ (800dc80 <AllDevicesReady+0x248>)
 800dc28:	0019      	movs	r1, r3
 800dc2a:	2003      	movs	r0, #3
 800dc2c:	f006 f906 	bl	8013e3c <CreateLine>
        prevstatus = status;
 800dc30:	4b1e      	ldr	r3, [pc, #120]	@ (800dcac <AllDevicesReady+0x274>)
 800dc32:	1dfa      	adds	r2, r7, #7
 800dc34:	7812      	ldrb	r2, [r2, #0]
 800dc36:	701a      	strb	r2, [r3, #0]
        allinwait = true;
 800dc38:	4b20      	ldr	r3, [pc, #128]	@ (800dcbc <AllDevicesReady+0x284>)
 800dc3a:	2201      	movs	r2, #1
 800dc3c:	701a      	strb	r2, [r3, #0]
        if (sendpwrmaildate == getDate()) {
 800dc3e:	f7fc f8a1 	bl	8009d84 <getDate>
 800dc42:	0003      	movs	r3, r0
 800dc44:	001a      	movs	r2, r3
 800dc46:	4b1f      	ldr	r3, [pc, #124]	@ (800dcc4 <AllDevicesReady+0x28c>)
 800dc48:	781b      	ldrb	r3, [r3, #0]
 800dc4a:	429a      	cmp	r2, r3
 800dc4c:	d105      	bne.n	800dc5a <AllDevicesReady+0x222>
          Info("Battery empty mail already send today");
 800dc4e:	4a1e      	ldr	r2, [pc, #120]	@ (800dcc8 <AllDevicesReady+0x290>)
 800dc50:	4b1e      	ldr	r3, [pc, #120]	@ (800dccc <AllDevicesReady+0x294>)
 800dc52:	0019      	movs	r1, r3
 800dc54:	2002      	movs	r0, #2
 800dc56:	f006 f8f1 	bl	8013e3c <CreateLine>
        }

      }
      return status;
 800dc5a:	1dfb      	adds	r3, r7, #7
 800dc5c:	781b      	ldrb	r3, [r3, #0]
 800dc5e:	e000      	b.n	800dc62 <AllDevicesReady+0x22a>
    }
  }
  return false;
 800dc60:	2300      	movs	r3, #0
}
 800dc62:	0018      	movs	r0, r3
 800dc64:	46bd      	mov	sp, r7
 800dc66:	b003      	add	sp, #12
 800dc68:	bcf0      	pop	{r4, r5, r6, r7}
 800dc6a:	46bb      	mov	fp, r7
 800dc6c:	46b2      	mov	sl, r6
 800dc6e:	46a9      	mov	r9, r5
 800dc70:	46a0      	mov	r8, r4
 800dc72:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800dc74:	20001114 	.word	0x20001114
 800dc78:	2000112f 	.word	0x2000112f
 800dc7c:	0802cd20 	.word	0x0802cd20
 800dc80:	0802c938 	.word	0x0802c938
 800dc84:	2000112b 	.word	0x2000112b
 800dc88:	20001118 	.word	0x20001118
 800dc8c:	2000112c 	.word	0x2000112c
 800dc90:	20001120 	.word	0x20001120
 800dc94:	2000112d 	.word	0x2000112d
 800dc98:	2000112e 	.word	0x2000112e
 800dc9c:	2000112a 	.word	0x2000112a
 800dca0:	200000aa 	.word	0x200000aa
 800dca4:	200010fb 	.word	0x200010fb
 800dca8:	200010fc 	.word	0x200010fc
 800dcac:	200000a8 	.word	0x200000a8
 800dcb0:	20001130 	.word	0x20001130
 800dcb4:	20000e41 	.word	0x20000e41
 800dcb8:	0802cd40 	.word	0x0802cd40
 800dcbc:	20001131 	.word	0x20001131
 800dcc0:	0802cda4 	.word	0x0802cda4
 800dcc4:	20001110 	.word	0x20001110
 800dcc8:	0802cdb8 	.word	0x0802cdb8
 800dccc:	0802caf4 	.word	0x0802caf4

0800dcd0 <EnabledConnectedDevices>:

void EnabledConnectedDevices() {
 800dcd0:	b580      	push	{r7, lr}
 800dcd2:	af00      	add	r7, sp, #0
  if (SensorProbe.HT_Present) {
 800dcd4:	4b25      	ldr	r3, [pc, #148]	@ (800dd6c <EnabledConnectedDevices+0x9c>)
 800dcd6:	781b      	ldrb	r3, [r3, #0]
 800dcd8:	2b00      	cmp	r3, #0
 800dcda:	d002      	beq.n	800dce2 <EnabledConnectedDevices+0x12>
    Sensor.HT_measurementEnabled = true;
 800dcdc:	4b24      	ldr	r3, [pc, #144]	@ (800dd70 <EnabledConnectedDevices+0xa0>)
 800dcde:	2201      	movs	r2, #1
 800dce0:	701a      	strb	r2, [r3, #0]
  }
  if ((SensorProbe.AHT20_Present) && (AHTState != AHT_STATE_OFF)) {
 800dce2:	4b22      	ldr	r3, [pc, #136]	@ (800dd6c <EnabledConnectedDevices+0x9c>)
 800dce4:	789b      	ldrb	r3, [r3, #2]
 800dce6:	2b00      	cmp	r3, #0
 800dce8:	d006      	beq.n	800dcf8 <EnabledConnectedDevices+0x28>
 800dcea:	4b22      	ldr	r3, [pc, #136]	@ (800dd74 <EnabledConnectedDevices+0xa4>)
 800dcec:	781b      	ldrb	r3, [r3, #0]
 800dcee:	2b00      	cmp	r3, #0
 800dcf0:	d002      	beq.n	800dcf8 <EnabledConnectedDevices+0x28>
    Sensor.AHT_measurementEnabled = true;
 800dcf2:	4b1f      	ldr	r3, [pc, #124]	@ (800dd70 <EnabledConnectedDevices+0xa0>)
 800dcf4:	2201      	movs	r2, #1
 800dcf6:	711a      	strb	r2, [r3, #4]
  }
//  if ((SensorProbe.AHT20_Present) && (AHTState == AHT_STATE_OFF)) {
//    Info("AHT2x sensor is disabled");
//  }
  if (SensorProbe.BMP280_Present) {
 800dcf8:	4b1c      	ldr	r3, [pc, #112]	@ (800dd6c <EnabledConnectedDevices+0x9c>)
 800dcfa:	791b      	ldrb	r3, [r3, #4]
 800dcfc:	2b00      	cmp	r3, #0
 800dcfe:	d002      	beq.n	800dd06 <EnabledConnectedDevices+0x36>
    Sensor.BMP_measurementEnabled = true;
 800dd00:	4b1b      	ldr	r3, [pc, #108]	@ (800dd70 <EnabledConnectedDevices+0xa0>)
 800dd02:	2201      	movs	r2, #1
 800dd04:	715a      	strb	r2, [r3, #5]
  }
  if (SensorProbe.ENS160_Present) {
 800dd06:	4b19      	ldr	r3, [pc, #100]	@ (800dd6c <EnabledConnectedDevices+0x9c>)
 800dd08:	78db      	ldrb	r3, [r3, #3]
 800dd0a:	2b00      	cmp	r3, #0
 800dd0c:	d002      	beq.n	800dd14 <EnabledConnectedDevices+0x44>
    Sensor.ENS_measurementEnabled = true;
 800dd0e:	4b18      	ldr	r3, [pc, #96]	@ (800dd70 <EnabledConnectedDevices+0xa0>)
 800dd10:	2201      	movs	r2, #1
 800dd12:	719a      	strb	r2, [r3, #6]
  }
  if ((SensorProbe.VOC_Present) && (SensorProbe.SGP_Enabled)) {
 800dd14:	4b15      	ldr	r3, [pc, #84]	@ (800dd6c <EnabledConnectedDevices+0x9c>)
 800dd16:	785b      	ldrb	r3, [r3, #1]
 800dd18:	2b00      	cmp	r3, #0
 800dd1a:	d006      	beq.n	800dd2a <EnabledConnectedDevices+0x5a>
 800dd1c:	4b13      	ldr	r3, [pc, #76]	@ (800dd6c <EnabledConnectedDevices+0x9c>)
 800dd1e:	7a1b      	ldrb	r3, [r3, #8]
 800dd20:	2b00      	cmp	r3, #0
 800dd22:	d002      	beq.n	800dd2a <EnabledConnectedDevices+0x5a>
    Sensor.VOC_measurementEnabled = true;
 800dd24:	4b12      	ldr	r3, [pc, #72]	@ (800dd70 <EnabledConnectedDevices+0xa0>)
 800dd26:	2201      	movs	r2, #1
 800dd28:	705a      	strb	r2, [r3, #1]
  }
  if (SensorProbe.PM_Present) {
 800dd2a:	4b10      	ldr	r3, [pc, #64]	@ (800dd6c <EnabledConnectedDevices+0x9c>)
 800dd2c:	795b      	ldrb	r3, [r3, #5]
 800dd2e:	2b00      	cmp	r3, #0
 800dd30:	d002      	beq.n	800dd38 <EnabledConnectedDevices+0x68>
    Sensor.PM_measurementEnabled = true;
 800dd32:	4b0f      	ldr	r3, [pc, #60]	@ (800dd70 <EnabledConnectedDevices+0xa0>)
 800dd34:	2201      	movs	r2, #1
 800dd36:	709a      	strb	r2, [r3, #2]
  }
  if (SensorProbe.MIC_Present) {
 800dd38:	4b0c      	ldr	r3, [pc, #48]	@ (800dd6c <EnabledConnectedDevices+0x9c>)
 800dd3a:	799b      	ldrb	r3, [r3, #6]
 800dd3c:	2b00      	cmp	r3, #0
 800dd3e:	d002      	beq.n	800dd46 <EnabledConnectedDevices+0x76>
    Sensor.MIC_measurementEnabled = true;
 800dd40:	4b0b      	ldr	r3, [pc, #44]	@ (800dd70 <EnabledConnectedDevices+0xa0>)
 800dd42:	2201      	movs	r2, #1
 800dd44:	70da      	strb	r2, [r3, #3]
  }
  deviceTimeOut = HAL_GetTick() + 1200000;
 800dd46:	f006 fdf1 	bl	801492c <HAL_GetTick>
 800dd4a:	0003      	movs	r3, r0
 800dd4c:	4a0a      	ldr	r2, [pc, #40]	@ (800dd78 <EnabledConnectedDevices+0xa8>)
 800dd4e:	189a      	adds	r2, r3, r2
 800dd50:	4b0a      	ldr	r3, [pc, #40]	@ (800dd7c <EnabledConnectedDevices+0xac>)
 800dd52:	601a      	str	r2, [r3, #0]
  sensorsdisablereq = false;
 800dd54:	4b0a      	ldr	r3, [pc, #40]	@ (800dd80 <EnabledConnectedDevices+0xb0>)
 800dd56:	2200      	movs	r2, #0
 800dd58:	701a      	strb	r2, [r3, #0]
  Debug("Sensors enabled");
 800dd5a:	4a0a      	ldr	r2, [pc, #40]	@ (800dd84 <EnabledConnectedDevices+0xb4>)
 800dd5c:	4b0a      	ldr	r3, [pc, #40]	@ (800dd88 <EnabledConnectedDevices+0xb8>)
 800dd5e:	0019      	movs	r1, r3
 800dd60:	2003      	movs	r0, #3
 800dd62:	f006 f86b 	bl	8013e3c <CreateLine>
}
 800dd66:	46c0      	nop			@ (mov r8, r8)
 800dd68:	46bd      	mov	sp, r7
 800dd6a:	bd80      	pop	{r7, pc}
 800dd6c:	20001120 	.word	0x20001120
 800dd70:	20001118 	.word	0x20001118
 800dd74:	2000009f 	.word	0x2000009f
 800dd78:	00124f80 	.word	0x00124f80
 800dd7c:	20001114 	.word	0x20001114
 800dd80:	2000112f 	.word	0x2000112f
 800dd84:	0802cde0 	.word	0x0802cde0
 800dd88:	0802c938 	.word	0x0802c938

0800dd8c <DisableConnectedDevices>:

void DisableConnectedDevices() {
 800dd8c:	b580      	push	{r7, lr}
 800dd8e:	af00      	add	r7, sp, #0
  Sensor.HT_measurementEnabled = false;
 800dd90:	4b0e      	ldr	r3, [pc, #56]	@ (800ddcc <DisableConnectedDevices+0x40>)
 800dd92:	2200      	movs	r2, #0
 800dd94:	701a      	strb	r2, [r3, #0]
  Sensor.VOC_measurementEnabled = false;
 800dd96:	4b0d      	ldr	r3, [pc, #52]	@ (800ddcc <DisableConnectedDevices+0x40>)
 800dd98:	2200      	movs	r2, #0
 800dd9a:	705a      	strb	r2, [r3, #1]
  Sensor.AHT_measurementEnabled = false;
 800dd9c:	4b0b      	ldr	r3, [pc, #44]	@ (800ddcc <DisableConnectedDevices+0x40>)
 800dd9e:	2200      	movs	r2, #0
 800dda0:	711a      	strb	r2, [r3, #4]
  Sensor.BMP_measurementEnabled = false;
 800dda2:	4b0a      	ldr	r3, [pc, #40]	@ (800ddcc <DisableConnectedDevices+0x40>)
 800dda4:	2200      	movs	r2, #0
 800dda6:	715a      	strb	r2, [r3, #5]
  Sensor.ENS_measurementEnabled = false;
 800dda8:	4b08      	ldr	r3, [pc, #32]	@ (800ddcc <DisableConnectedDevices+0x40>)
 800ddaa:	2200      	movs	r2, #0
 800ddac:	719a      	strb	r2, [r3, #6]
  Sensor.PM_measurementEnabled = false;
 800ddae:	4b07      	ldr	r3, [pc, #28]	@ (800ddcc <DisableConnectedDevices+0x40>)
 800ddb0:	2200      	movs	r2, #0
 800ddb2:	709a      	strb	r2, [r3, #2]
  Sensor.MIC_measurementEnabled = false;
 800ddb4:	4b05      	ldr	r3, [pc, #20]	@ (800ddcc <DisableConnectedDevices+0x40>)
 800ddb6:	2200      	movs	r2, #0
 800ddb8:	70da      	strb	r2, [r3, #3]
  Debug("Sensors disabled");
 800ddba:	4a05      	ldr	r2, [pc, #20]	@ (800ddd0 <DisableConnectedDevices+0x44>)
 800ddbc:	4b05      	ldr	r3, [pc, #20]	@ (800ddd4 <DisableConnectedDevices+0x48>)
 800ddbe:	0019      	movs	r1, r3
 800ddc0:	2003      	movs	r0, #3
 800ddc2:	f006 f83b 	bl	8013e3c <CreateLine>
}
 800ddc6:	46c0      	nop			@ (mov r8, r8)
 800ddc8:	46bd      	mov	sp, r7
 800ddca:	bd80      	pop	{r7, pc}
 800ddcc:	20001118 	.word	0x20001118
 800ddd0:	0802cdf0 	.word	0x0802cdf0
 800ddd4:	0802c938 	.word	0x0802c938

0800ddd8 <setSensorLock>:

void setSensorLock(uint8_t sensor) {
 800ddd8:	b580      	push	{r7, lr}
 800ddda:	b082      	sub	sp, #8
 800dddc:	af00      	add	r7, sp, #0
 800ddde:	0002      	movs	r2, r0
 800dde0:	1dfb      	adds	r3, r7, #7
 800dde2:	701a      	strb	r2, [r3, #0]
  SensorHasLock = sensor;
 800dde4:	4b05      	ldr	r3, [pc, #20]	@ (800ddfc <setSensorLock+0x24>)
 800dde6:	1dfa      	adds	r2, r7, #7
 800dde8:	7812      	ldrb	r2, [r2, #0]
 800ddea:	701a      	strb	r2, [r3, #0]
  HAL_Delay(10); // be sure the DMA of the previous has completed
 800ddec:	200a      	movs	r0, #10
 800ddee:	f006 fda7 	bl	8014940 <HAL_Delay>
}
 800ddf2:	46c0      	nop			@ (mov r8, r8)
 800ddf4:	46bd      	mov	sp, r7
 800ddf6:	b002      	add	sp, #8
 800ddf8:	bd80      	pop	{r7, pc}
 800ddfa:	46c0      	nop			@ (mov r8, r8)
 800ddfc:	20001129 	.word	0x20001129

0800de00 <getSensorLock>:

uint8_t getSensorLock() {
 800de00:	b580      	push	{r7, lr}
 800de02:	af00      	add	r7, sp, #0
  return SensorHasLock;
 800de04:	4b02      	ldr	r3, [pc, #8]	@ (800de10 <getSensorLock+0x10>)
 800de06:	781b      	ldrb	r3, [r3, #0]
}
 800de08:	0018      	movs	r0, r3
 800de0a:	46bd      	mov	sp, r7
 800de0c:	bd80      	pop	{r7, pc}
 800de0e:	46c0      	nop			@ (mov r8, r8)
 800de10:	20001129 	.word	0x20001129

0800de14 <UpkeepI2Csensors>:

void UpkeepI2Csensors() {
 800de14:	b580      	push	{r7, lr}
 800de16:	af00      	add	r7, sp, #0
//  Debug("Upkeep I2C Sensors");
  if (Sensor.HT_measurementEnabled) {
 800de18:	4b1a      	ldr	r3, [pc, #104]	@ (800de84 <UpkeepI2Csensors+0x70>)
 800de1a:	781b      	ldrb	r3, [r3, #0]
 800de1c:	2b00      	cmp	r3, #0
 800de1e:	d005      	beq.n	800de2c <UpkeepI2Csensors+0x18>
    HIDSstate = HIDS_Upkeep();
 800de20:	f006 fc02 	bl	8014628 <HIDS_Upkeep>
 800de24:	0003      	movs	r3, r0
 800de26:	001a      	movs	r2, r3
 800de28:	4b17      	ldr	r3, [pc, #92]	@ (800de88 <UpkeepI2Csensors+0x74>)
 800de2a:	701a      	strb	r2, [r3, #0]
  }
  if (Sensor.VOC_measurementEnabled) {
 800de2c:	4b15      	ldr	r3, [pc, #84]	@ (800de84 <UpkeepI2Csensors+0x70>)
 800de2e:	785b      	ldrb	r3, [r3, #1]
 800de30:	2b00      	cmp	r3, #0
 800de32:	d005      	beq.n	800de40 <UpkeepI2Csensors+0x2c>
    SGPstate = SGP_Upkeep();
 800de34:	f003 fb9e 	bl	8011574 <SGP_Upkeep>
 800de38:	0003      	movs	r3, r0
 800de3a:	001a      	movs	r2, r3
 800de3c:	4b13      	ldr	r3, [pc, #76]	@ (800de8c <UpkeepI2Csensors+0x78>)
 800de3e:	701a      	strb	r2, [r3, #0]
  }
  if (Sensor.AHT_measurementEnabled) {
 800de40:	4b10      	ldr	r3, [pc, #64]	@ (800de84 <UpkeepI2Csensors+0x70>)
 800de42:	791b      	ldrb	r3, [r3, #4]
 800de44:	2b00      	cmp	r3, #0
 800de46:	d005      	beq.n	800de54 <UpkeepI2Csensors+0x40>
    AHTstate = AHT_Upkeep();
 800de48:	f7fd fb04 	bl	800b454 <AHT_Upkeep>
 800de4c:	0003      	movs	r3, r0
 800de4e:	001a      	movs	r2, r3
 800de50:	4b0f      	ldr	r3, [pc, #60]	@ (800de90 <UpkeepI2Csensors+0x7c>)
 800de52:	701a      	strb	r2, [r3, #0]
  }
  if (Sensor.BMP_measurementEnabled) {
 800de54:	4b0b      	ldr	r3, [pc, #44]	@ (800de84 <UpkeepI2Csensors+0x70>)
 800de56:	795b      	ldrb	r3, [r3, #5]
 800de58:	2b00      	cmp	r3, #0
 800de5a:	d005      	beq.n	800de68 <UpkeepI2Csensors+0x54>
    BMPstate = BMP_Upkeep();
 800de5c:	f7fd ff90 	bl	800bd80 <BMP_Upkeep>
 800de60:	0003      	movs	r3, r0
 800de62:	001a      	movs	r2, r3
 800de64:	4b0b      	ldr	r3, [pc, #44]	@ (800de94 <UpkeepI2Csensors+0x80>)
 800de66:	701a      	strb	r2, [r3, #0]
  }
  if (Sensor.ENS_measurementEnabled) {
 800de68:	4b06      	ldr	r3, [pc, #24]	@ (800de84 <UpkeepI2Csensors+0x70>)
 800de6a:	799b      	ldrb	r3, [r3, #6]
 800de6c:	2b00      	cmp	r3, #0
 800de6e:	d005      	beq.n	800de7c <UpkeepI2Csensors+0x68>
    ENSstate = ENS_Upkeep();
 800de70:	f7f6 faf2 	bl	8004458 <ENS_Upkeep>
 800de74:	0003      	movs	r3, r0
 800de76:	001a      	movs	r2, r3
 800de78:	4b07      	ldr	r3, [pc, #28]	@ (800de98 <UpkeepI2Csensors+0x84>)
 800de7a:	701a      	strb	r2, [r3, #0]
  }
}
 800de7c:	46c0      	nop			@ (mov r8, r8)
 800de7e:	46bd      	mov	sp, r7
 800de80:	bd80      	pop	{r7, pc}
 800de82:	46c0      	nop			@ (mov r8, r8)
 800de84:	20001118 	.word	0x20001118
 800de88:	2000112b 	.word	0x2000112b
 800de8c:	2000112a 	.word	0x2000112a
 800de90:	2000112c 	.word	0x2000112c
 800de94:	2000112d 	.word	0x2000112d
 800de98:	2000112e 	.word	0x2000112e

0800de9c <ResetdBAmax>:
bool samplebufferfilled = false;
static uint32_t MICTimeStamp;

SoundData_t soundData = {0};

void ResetdBAmax() {
 800de9c:	b580      	push	{r7, lr}
 800de9e:	af00      	add	r7, sp, #0
  dBAmax = 0.0;
 800dea0:	4b02      	ldr	r3, [pc, #8]	@ (800deac <ResetdBAmax+0x10>)
 800dea2:	2200      	movs	r2, #0
 800dea4:	601a      	str	r2, [r3, #0]
}
 800dea6:	46c0      	nop			@ (mov r8, r8)
 800dea8:	46bd      	mov	sp, r7
 800deaa:	bd80      	pop	{r7, pc}
 800deac:	20001178 	.word	0x20001178

0800deb0 <setMICTimeStamp>:
void setMICTimeStamp(uint32_t ticks) {
 800deb0:	b580      	push	{r7, lr}
 800deb2:	b082      	sub	sp, #8
 800deb4:	af00      	add	r7, sp, #0
 800deb6:	6078      	str	r0, [r7, #4]
  MICTimeStamp = HAL_GetTick() + ticks;
 800deb8:	f006 fd38 	bl	801492c <HAL_GetTick>
 800debc:	0002      	movs	r2, r0
 800debe:	687b      	ldr	r3, [r7, #4]
 800dec0:	18d2      	adds	r2, r2, r3
 800dec2:	4b03      	ldr	r3, [pc, #12]	@ (800ded0 <setMICTimeStamp+0x20>)
 800dec4:	601a      	str	r2, [r3, #0]
}
 800dec6:	46c0      	nop			@ (mov r8, r8)
 800dec8:	46bd      	mov	sp, r7
 800deca:	b002      	add	sp, #8
 800decc:	bd80      	pop	{r7, pc}
 800dece:	46c0      	nop			@ (mov r8, r8)
 800ded0:	20001180 	.word	0x20001180

0800ded4 <ResetDBACalculator>:

void ResetDBACalculator(void) {
 800ded4:	b580      	push	{r7, lr}
 800ded6:	af00      	add	r7, sp, #0
  counter = 0;
 800ded8:	4b05      	ldr	r3, [pc, #20]	@ (800def0 <ResetDBACalculator+0x1c>)
 800deda:	2200      	movs	r2, #0
 800dedc:	701a      	strb	r2, [r3, #0]
  denominator = 1;
 800dede:	4b05      	ldr	r3, [pc, #20]	@ (800def4 <ResetDBACalculator+0x20>)
 800dee0:	2201      	movs	r2, #1
 800dee2:	701a      	strb	r2, [r3, #0]
  samplebufferfilled = false;
 800dee4:	4b04      	ldr	r3, [pc, #16]	@ (800def8 <ResetDBACalculator+0x24>)
 800dee6:	2200      	movs	r2, #0
 800dee8:	701a      	strb	r2, [r3, #0]
}
 800deea:	46c0      	nop			@ (mov r8, r8)
 800deec:	46bd      	mov	sp, r7
 800deee:	bd80      	pop	{r7, pc}
 800def0:	2000117c 	.word	0x2000117c
 800def4:	200000a9 	.word	0x200000a9
 800def8:	2000117d 	.word	0x2000117d

0800defc <MIC_Print>:

void MIC_Print(void) {
 800defc:	b5b0      	push	{r4, r5, r7, lr}
 800defe:	b08c      	sub	sp, #48	@ 0x30
 800df00:	af08      	add	r7, sp, #32
  dBA = dBValue; // dBValue is the actual sample
 800df02:	4ba1      	ldr	r3, [pc, #644]	@ (800e188 <MIC_Print+0x28c>)
 800df04:	681a      	ldr	r2, [r3, #0]
 800df06:	4ba1      	ldr	r3, [pc, #644]	@ (800e18c <MIC_Print+0x290>)
 800df08:	601a      	str	r2, [r3, #0]
  dBASamples[counter] = dBA;
 800df0a:	4ba1      	ldr	r3, [pc, #644]	@ (800e190 <MIC_Print+0x294>)
 800df0c:	781b      	ldrb	r3, [r3, #0]
 800df0e:	001a      	movs	r2, r3
 800df10:	4b9e      	ldr	r3, [pc, #632]	@ (800e18c <MIC_Print+0x290>)
 800df12:	6819      	ldr	r1, [r3, #0]
 800df14:	4b9f      	ldr	r3, [pc, #636]	@ (800e194 <MIC_Print+0x298>)
 800df16:	0092      	lsls	r2, r2, #2
 800df18:	50d1      	str	r1, [r2, r3]
  counter++;
 800df1a:	4b9d      	ldr	r3, [pc, #628]	@ (800e190 <MIC_Print+0x294>)
 800df1c:	781b      	ldrb	r3, [r3, #0]
 800df1e:	3301      	adds	r3, #1
 800df20:	b2da      	uxtb	r2, r3
 800df22:	4b9b      	ldr	r3, [pc, #620]	@ (800e190 <MIC_Print+0x294>)
 800df24:	701a      	strb	r2, [r3, #0]
  if (counter < NUMBER_OF_SAMPLES && !samplebufferfilled) {
 800df26:	4b9a      	ldr	r3, [pc, #616]	@ (800e190 <MIC_Print+0x294>)
 800df28:	781b      	ldrb	r3, [r3, #0]
 800df2a:	2b09      	cmp	r3, #9
 800df2c:	d80b      	bhi.n	800df46 <MIC_Print+0x4a>
 800df2e:	4b9a      	ldr	r3, [pc, #616]	@ (800e198 <MIC_Print+0x29c>)
 800df30:	781b      	ldrb	r3, [r3, #0]
 800df32:	2201      	movs	r2, #1
 800df34:	4053      	eors	r3, r2
 800df36:	b2db      	uxtb	r3, r3
 800df38:	2b00      	cmp	r3, #0
 800df3a:	d004      	beq.n	800df46 <MIC_Print+0x4a>
    denominator = counter;
 800df3c:	4b94      	ldr	r3, [pc, #592]	@ (800e190 <MIC_Print+0x294>)
 800df3e:	781a      	ldrb	r2, [r3, #0]
 800df40:	4b96      	ldr	r3, [pc, #600]	@ (800e19c <MIC_Print+0x2a0>)
 800df42:	701a      	strb	r2, [r3, #0]
 800df44:	e005      	b.n	800df52 <MIC_Print+0x56>
  }
  else {
    denominator = NUMBER_OF_SAMPLES;
 800df46:	4b95      	ldr	r3, [pc, #596]	@ (800e19c <MIC_Print+0x2a0>)
 800df48:	220a      	movs	r2, #10
 800df4a:	701a      	strb	r2, [r3, #0]
    samplebufferfilled = true;
 800df4c:	4b92      	ldr	r3, [pc, #584]	@ (800e198 <MIC_Print+0x29c>)
 800df4e:	2201      	movs	r2, #1
 800df50:	701a      	strb	r2, [r3, #0]
  }
//  dBAmax = 0.0;
  dBAsum = 0.0;
 800df52:	4b93      	ldr	r3, [pc, #588]	@ (800e1a0 <MIC_Print+0x2a4>)
 800df54:	2200      	movs	r2, #0
 800df56:	601a      	str	r2, [r3, #0]
  for(uint8_t i=0; i < denominator; i++){
 800df58:	230f      	movs	r3, #15
 800df5a:	18fb      	adds	r3, r7, r3
 800df5c:	2200      	movs	r2, #0
 800df5e:	701a      	strb	r2, [r3, #0]
 800df60:	e042      	b.n	800dfe8 <MIC_Print+0xec>
    dBAsum += dBASamples[i];
 800df62:	240f      	movs	r4, #15
 800df64:	193b      	adds	r3, r7, r4
 800df66:	781a      	ldrb	r2, [r3, #0]
 800df68:	4b8a      	ldr	r3, [pc, #552]	@ (800e194 <MIC_Print+0x298>)
 800df6a:	0092      	lsls	r2, r2, #2
 800df6c:	58d2      	ldr	r2, [r2, r3]
 800df6e:	4b8c      	ldr	r3, [pc, #560]	@ (800e1a0 <MIC_Print+0x2a4>)
 800df70:	681b      	ldr	r3, [r3, #0]
 800df72:	1c19      	adds	r1, r3, #0
 800df74:	1c10      	adds	r0, r2, #0
 800df76:	f7f2 fca3 	bl	80008c0 <__aeabi_fadd>
 800df7a:	1c03      	adds	r3, r0, #0
 800df7c:	1c1a      	adds	r2, r3, #0
 800df7e:	4b88      	ldr	r3, [pc, #544]	@ (800e1a0 <MIC_Print+0x2a4>)
 800df80:	601a      	str	r2, [r3, #0]
    if (dBASamples[i] > dBAmax) {
 800df82:	193b      	adds	r3, r7, r4
 800df84:	781a      	ldrb	r2, [r3, #0]
 800df86:	4b83      	ldr	r3, [pc, #524]	@ (800e194 <MIC_Print+0x298>)
 800df88:	0092      	lsls	r2, r2, #2
 800df8a:	58d2      	ldr	r2, [r2, r3]
 800df8c:	4b85      	ldr	r3, [pc, #532]	@ (800e1a4 <MIC_Print+0x2a8>)
 800df8e:	681b      	ldr	r3, [r3, #0]
 800df90:	1c19      	adds	r1, r3, #0
 800df92:	1c10      	adds	r0, r2, #0
 800df94:	f7f2 fae0 	bl	8000558 <__aeabi_fcmpgt>
 800df98:	1e03      	subs	r3, r0, #0
 800df9a:	d006      	beq.n	800dfaa <MIC_Print+0xae>
      dBAmax = dBASamples[i];
 800df9c:	193b      	adds	r3, r7, r4
 800df9e:	781a      	ldrb	r2, [r3, #0]
 800dfa0:	4b7c      	ldr	r3, [pc, #496]	@ (800e194 <MIC_Print+0x298>)
 800dfa2:	0092      	lsls	r2, r2, #2
 800dfa4:	58d2      	ldr	r2, [r2, r3]
 800dfa6:	4b7f      	ldr	r3, [pc, #508]	@ (800e1a4 <MIC_Print+0x2a8>)
 800dfa8:	601a      	str	r2, [r3, #0]
  }
  dBAAverage = dBAsum/(float)denominator;
 800dfaa:	4b7d      	ldr	r3, [pc, #500]	@ (800e1a0 <MIC_Print+0x2a4>)
 800dfac:	681c      	ldr	r4, [r3, #0]
 800dfae:	4b7b      	ldr	r3, [pc, #492]	@ (800e19c <MIC_Print+0x2a0>)
 800dfb0:	781b      	ldrb	r3, [r3, #0]
 800dfb2:	0018      	movs	r0, r3
 800dfb4:	f7f3 fc88 	bl	80018c8 <__aeabi_ui2f>
 800dfb8:	1c03      	adds	r3, r0, #0
 800dfba:	1c19      	adds	r1, r3, #0
 800dfbc:	1c20      	adds	r0, r4, #0
 800dfbe:	f7f2 fe71 	bl	8000ca4 <__aeabi_fdiv>
 800dfc2:	1c03      	adds	r3, r0, #0
 800dfc4:	1c1a      	adds	r2, r3, #0
 800dfc6:	4b78      	ldr	r3, [pc, #480]	@ (800e1a8 <MIC_Print+0x2ac>)
 800dfc8:	601a      	str	r2, [r3, #0]
//  setMic(dBAAverage);
  setMic(dBA, dBAmax, dBAAverage); // first parameter is uploaded to opensensemap.org others are stored in structure
 800dfca:	4b70      	ldr	r3, [pc, #448]	@ (800e18c <MIC_Print+0x290>)
 800dfcc:	6818      	ldr	r0, [r3, #0]
 800dfce:	4b75      	ldr	r3, [pc, #468]	@ (800e1a4 <MIC_Print+0x2a8>)
 800dfd0:	6819      	ldr	r1, [r3, #0]
 800dfd2:	4b75      	ldr	r3, [pc, #468]	@ (800e1a8 <MIC_Print+0x2ac>)
 800dfd4:	681b      	ldr	r3, [r3, #0]
 800dfd6:	1c1a      	adds	r2, r3, #0
 800dfd8:	f7f6 fdde 	bl	8004b98 <setMic>
  for(uint8_t i=0; i < denominator; i++){
 800dfdc:	210f      	movs	r1, #15
 800dfde:	187b      	adds	r3, r7, r1
 800dfe0:	781a      	ldrb	r2, [r3, #0]
 800dfe2:	187b      	adds	r3, r7, r1
 800dfe4:	3201      	adds	r2, #1
 800dfe6:	701a      	strb	r2, [r3, #0]
 800dfe8:	4b6c      	ldr	r3, [pc, #432]	@ (800e19c <MIC_Print+0x2a0>)
 800dfea:	781b      	ldrb	r3, [r3, #0]
 800dfec:	220f      	movs	r2, #15
 800dfee:	18ba      	adds	r2, r7, r2
 800dff0:	7812      	ldrb	r2, [r2, #0]
 800dff2:	429a      	cmp	r2, r3
 800dff4:	d3b5      	bcc.n	800df62 <MIC_Print+0x66>
  }
  Info("SPL_dBA: %.1f, SPL_peak_mPa: %s, dBA peak: %.1f, dBA average: %.1f", dBA,mPabuffer, dBAmax, dBAAverage);
 800dff6:	4b65      	ldr	r3, [pc, #404]	@ (800e18c <MIC_Print+0x290>)
 800dff8:	681b      	ldr	r3, [r3, #0]
 800dffa:	1c18      	adds	r0, r3, #0
 800dffc:	f7f5 fc4a 	bl	8003894 <__aeabi_f2d>
 800e000:	0004      	movs	r4, r0
 800e002:	000d      	movs	r5, r1
 800e004:	4b67      	ldr	r3, [pc, #412]	@ (800e1a4 <MIC_Print+0x2a8>)
 800e006:	681b      	ldr	r3, [r3, #0]
 800e008:	1c18      	adds	r0, r3, #0
 800e00a:	f7f5 fc43 	bl	8003894 <__aeabi_f2d>
 800e00e:	6038      	str	r0, [r7, #0]
 800e010:	6079      	str	r1, [r7, #4]
 800e012:	4b65      	ldr	r3, [pc, #404]	@ (800e1a8 <MIC_Print+0x2ac>)
 800e014:	681b      	ldr	r3, [r3, #0]
 800e016:	1c18      	adds	r0, r3, #0
 800e018:	f7f5 fc3c 	bl	8003894 <__aeabi_f2d>
 800e01c:	0002      	movs	r2, r0
 800e01e:	000b      	movs	r3, r1
 800e020:	4862      	ldr	r0, [pc, #392]	@ (800e1ac <MIC_Print+0x2b0>)
 800e022:	4963      	ldr	r1, [pc, #396]	@ (800e1b0 <MIC_Print+0x2b4>)
 800e024:	9206      	str	r2, [sp, #24]
 800e026:	9307      	str	r3, [sp, #28]
 800e028:	683a      	ldr	r2, [r7, #0]
 800e02a:	687b      	ldr	r3, [r7, #4]
 800e02c:	9204      	str	r2, [sp, #16]
 800e02e:	9305      	str	r3, [sp, #20]
 800e030:	4b60      	ldr	r3, [pc, #384]	@ (800e1b4 <MIC_Print+0x2b8>)
 800e032:	9302      	str	r3, [sp, #8]
 800e034:	9400      	str	r4, [sp, #0]
 800e036:	9501      	str	r5, [sp, #4]
 800e038:	0002      	movs	r2, r0
 800e03a:	2002      	movs	r0, #2
 800e03c:	f005 fefe 	bl	8013e3c <CreateLine>

  if(counter > NUMBER_OF_SAMPLES){
 800e040:	4b53      	ldr	r3, [pc, #332]	@ (800e190 <MIC_Print+0x294>)
 800e042:	781b      	ldrb	r3, [r3, #0]
 800e044:	2b0a      	cmp	r3, #10
 800e046:	d902      	bls.n	800e04e <MIC_Print+0x152>
    counter = 0;
 800e048:	4b51      	ldr	r3, [pc, #324]	@ (800e190 <MIC_Print+0x294>)
 800e04a:	2200      	movs	r2, #0
 800e04c:	701a      	strb	r2, [r3, #0]
  }
  if(dBA >= 90){//white
 800e04e:	4b4f      	ldr	r3, [pc, #316]	@ (800e18c <MIC_Print+0x290>)
 800e050:	681b      	ldr	r3, [r3, #0]
 800e052:	4959      	ldr	r1, [pc, #356]	@ (800e1b8 <MIC_Print+0x2bc>)
 800e054:	1c18      	adds	r0, r3, #0
 800e056:	f7f2 fa89 	bl	800056c <__aeabi_fcmpge>
 800e05a:	1e03      	subs	r3, r0, #0
 800e05c:	d004      	beq.n	800e068 <MIC_Print+0x16c>
    SetDBLED(true, true, true);
 800e05e:	2201      	movs	r2, #1
 800e060:	2101      	movs	r1, #1
 800e062:	2001      	movs	r0, #1
 800e064:	f004 fbca 	bl	80127fc <SetDBLED>
  }
  if(dBA >= 80 && dBA < 90){ //red
 800e068:	4b48      	ldr	r3, [pc, #288]	@ (800e18c <MIC_Print+0x290>)
 800e06a:	681b      	ldr	r3, [r3, #0]
 800e06c:	4953      	ldr	r1, [pc, #332]	@ (800e1bc <MIC_Print+0x2c0>)
 800e06e:	1c18      	adds	r0, r3, #0
 800e070:	f7f2 fa7c 	bl	800056c <__aeabi_fcmpge>
 800e074:	1e03      	subs	r3, r0, #0
 800e076:	d00c      	beq.n	800e092 <MIC_Print+0x196>
 800e078:	4b44      	ldr	r3, [pc, #272]	@ (800e18c <MIC_Print+0x290>)
 800e07a:	681b      	ldr	r3, [r3, #0]
 800e07c:	494e      	ldr	r1, [pc, #312]	@ (800e1b8 <MIC_Print+0x2bc>)
 800e07e:	1c18      	adds	r0, r3, #0
 800e080:	f7f2 fa56 	bl	8000530 <__aeabi_fcmplt>
 800e084:	1e03      	subs	r3, r0, #0
 800e086:	d004      	beq.n	800e092 <MIC_Print+0x196>
    SetDBLED(true, false, false);
 800e088:	2200      	movs	r2, #0
 800e08a:	2100      	movs	r1, #0
 800e08c:	2001      	movs	r0, #1
 800e08e:	f004 fbb5 	bl	80127fc <SetDBLED>
  }
  if(dBA >= 70 && dBA < 80){//yellow
 800e092:	4b3e      	ldr	r3, [pc, #248]	@ (800e18c <MIC_Print+0x290>)
 800e094:	681b      	ldr	r3, [r3, #0]
 800e096:	494a      	ldr	r1, [pc, #296]	@ (800e1c0 <MIC_Print+0x2c4>)
 800e098:	1c18      	adds	r0, r3, #0
 800e09a:	f7f2 fa67 	bl	800056c <__aeabi_fcmpge>
 800e09e:	1e03      	subs	r3, r0, #0
 800e0a0:	d00c      	beq.n	800e0bc <MIC_Print+0x1c0>
 800e0a2:	4b3a      	ldr	r3, [pc, #232]	@ (800e18c <MIC_Print+0x290>)
 800e0a4:	681b      	ldr	r3, [r3, #0]
 800e0a6:	4945      	ldr	r1, [pc, #276]	@ (800e1bc <MIC_Print+0x2c0>)
 800e0a8:	1c18      	adds	r0, r3, #0
 800e0aa:	f7f2 fa41 	bl	8000530 <__aeabi_fcmplt>
 800e0ae:	1e03      	subs	r3, r0, #0
 800e0b0:	d004      	beq.n	800e0bc <MIC_Print+0x1c0>
    SetDBLED(true, true, false);
 800e0b2:	2200      	movs	r2, #0
 800e0b4:	2101      	movs	r1, #1
 800e0b6:	2001      	movs	r0, #1
 800e0b8:	f004 fba0 	bl	80127fc <SetDBLED>
  }
  if(dBA >= 60 && dBA < 70){//Green
 800e0bc:	4b33      	ldr	r3, [pc, #204]	@ (800e18c <MIC_Print+0x290>)
 800e0be:	681b      	ldr	r3, [r3, #0]
 800e0c0:	4940      	ldr	r1, [pc, #256]	@ (800e1c4 <MIC_Print+0x2c8>)
 800e0c2:	1c18      	adds	r0, r3, #0
 800e0c4:	f7f2 fa52 	bl	800056c <__aeabi_fcmpge>
 800e0c8:	1e03      	subs	r3, r0, #0
 800e0ca:	d00c      	beq.n	800e0e6 <MIC_Print+0x1ea>
 800e0cc:	4b2f      	ldr	r3, [pc, #188]	@ (800e18c <MIC_Print+0x290>)
 800e0ce:	681b      	ldr	r3, [r3, #0]
 800e0d0:	493b      	ldr	r1, [pc, #236]	@ (800e1c0 <MIC_Print+0x2c4>)
 800e0d2:	1c18      	adds	r0, r3, #0
 800e0d4:	f7f2 fa2c 	bl	8000530 <__aeabi_fcmplt>
 800e0d8:	1e03      	subs	r3, r0, #0
 800e0da:	d004      	beq.n	800e0e6 <MIC_Print+0x1ea>
    SetDBLED(false, true, false);
 800e0dc:	2200      	movs	r2, #0
 800e0de:	2101      	movs	r1, #1
 800e0e0:	2000      	movs	r0, #0
 800e0e2:	f004 fb8b 	bl	80127fc <SetDBLED>
  }
  if(dBA >= 50 && dBA < 60){//light blue
 800e0e6:	4b29      	ldr	r3, [pc, #164]	@ (800e18c <MIC_Print+0x290>)
 800e0e8:	681b      	ldr	r3, [r3, #0]
 800e0ea:	4937      	ldr	r1, [pc, #220]	@ (800e1c8 <MIC_Print+0x2cc>)
 800e0ec:	1c18      	adds	r0, r3, #0
 800e0ee:	f7f2 fa3d 	bl	800056c <__aeabi_fcmpge>
 800e0f2:	1e03      	subs	r3, r0, #0
 800e0f4:	d00c      	beq.n	800e110 <MIC_Print+0x214>
 800e0f6:	4b25      	ldr	r3, [pc, #148]	@ (800e18c <MIC_Print+0x290>)
 800e0f8:	681b      	ldr	r3, [r3, #0]
 800e0fa:	4932      	ldr	r1, [pc, #200]	@ (800e1c4 <MIC_Print+0x2c8>)
 800e0fc:	1c18      	adds	r0, r3, #0
 800e0fe:	f7f2 fa17 	bl	8000530 <__aeabi_fcmplt>
 800e102:	1e03      	subs	r3, r0, #0
 800e104:	d004      	beq.n	800e110 <MIC_Print+0x214>
    SetDBLED(false, true, true);
 800e106:	2201      	movs	r2, #1
 800e108:	2101      	movs	r1, #1
 800e10a:	2000      	movs	r0, #0
 800e10c:	f004 fb76 	bl	80127fc <SetDBLED>
  }
  if(dBA >= 40 && dBA < 50){//blue
 800e110:	4b1e      	ldr	r3, [pc, #120]	@ (800e18c <MIC_Print+0x290>)
 800e112:	681b      	ldr	r3, [r3, #0]
 800e114:	492d      	ldr	r1, [pc, #180]	@ (800e1cc <MIC_Print+0x2d0>)
 800e116:	1c18      	adds	r0, r3, #0
 800e118:	f7f2 fa28 	bl	800056c <__aeabi_fcmpge>
 800e11c:	1e03      	subs	r3, r0, #0
 800e11e:	d00c      	beq.n	800e13a <MIC_Print+0x23e>
 800e120:	4b1a      	ldr	r3, [pc, #104]	@ (800e18c <MIC_Print+0x290>)
 800e122:	681b      	ldr	r3, [r3, #0]
 800e124:	4928      	ldr	r1, [pc, #160]	@ (800e1c8 <MIC_Print+0x2cc>)
 800e126:	1c18      	adds	r0, r3, #0
 800e128:	f7f2 fa02 	bl	8000530 <__aeabi_fcmplt>
 800e12c:	1e03      	subs	r3, r0, #0
 800e12e:	d004      	beq.n	800e13a <MIC_Print+0x23e>
    SetDBLED(false, false, true);
 800e130:	2201      	movs	r2, #1
 800e132:	2100      	movs	r1, #0
 800e134:	2000      	movs	r0, #0
 800e136:	f004 fb61 	bl	80127fc <SetDBLED>
  }
  if(dBA >= 35 && dBA < 40){//purple
 800e13a:	4b14      	ldr	r3, [pc, #80]	@ (800e18c <MIC_Print+0x290>)
 800e13c:	681b      	ldr	r3, [r3, #0]
 800e13e:	4924      	ldr	r1, [pc, #144]	@ (800e1d0 <MIC_Print+0x2d4>)
 800e140:	1c18      	adds	r0, r3, #0
 800e142:	f7f2 fa13 	bl	800056c <__aeabi_fcmpge>
 800e146:	1e03      	subs	r3, r0, #0
 800e148:	d00c      	beq.n	800e164 <MIC_Print+0x268>
 800e14a:	4b10      	ldr	r3, [pc, #64]	@ (800e18c <MIC_Print+0x290>)
 800e14c:	681b      	ldr	r3, [r3, #0]
 800e14e:	491f      	ldr	r1, [pc, #124]	@ (800e1cc <MIC_Print+0x2d0>)
 800e150:	1c18      	adds	r0, r3, #0
 800e152:	f7f2 f9ed 	bl	8000530 <__aeabi_fcmplt>
 800e156:	1e03      	subs	r3, r0, #0
 800e158:	d004      	beq.n	800e164 <MIC_Print+0x268>
    SetDBLED(true, false, true);
 800e15a:	2201      	movs	r2, #1
 800e15c:	2100      	movs	r1, #0
 800e15e:	2001      	movs	r0, #1
 800e160:	f004 fb4c 	bl	80127fc <SetDBLED>
  }
  if(dBA < 35){//off
 800e164:	4b09      	ldr	r3, [pc, #36]	@ (800e18c <MIC_Print+0x290>)
 800e166:	681b      	ldr	r3, [r3, #0]
 800e168:	4919      	ldr	r1, [pc, #100]	@ (800e1d0 <MIC_Print+0x2d4>)
 800e16a:	1c18      	adds	r0, r3, #0
 800e16c:	f7f2 f9e0 	bl	8000530 <__aeabi_fcmplt>
 800e170:	1e03      	subs	r3, r0, #0
 800e172:	d100      	bne.n	800e176 <MIC_Print+0x27a>
    SetDBLED(false, false, false);
  }
}
 800e174:	e004      	b.n	800e180 <MIC_Print+0x284>
    SetDBLED(false, false, false);
 800e176:	2200      	movs	r2, #0
 800e178:	2100      	movs	r1, #0
 800e17a:	2000      	movs	r0, #0
 800e17c:	f004 fb3e 	bl	80127fc <SetDBLED>
}
 800e180:	46c0      	nop			@ (mov r8, r8)
 800e182:	46bd      	mov	sp, r7
 800e184:	b004      	add	sp, #16
 800e186:	bdb0      	pop	{r4, r5, r7, pc}
 800e188:	20001174 	.word	0x20001174
 800e18c:	20001140 	.word	0x20001140
 800e190:	2000117c 	.word	0x2000117c
 800e194:	20001144 	.word	0x20001144
 800e198:	2000117d 	.word	0x2000117d
 800e19c:	200000a9 	.word	0x200000a9
 800e1a0:	20001170 	.word	0x20001170
 800e1a4:	20001178 	.word	0x20001178
 800e1a8:	2000116c 	.word	0x2000116c
 800e1ac:	0802ce04 	.word	0x0802ce04
 800e1b0:	0802ce48 	.word	0x0802ce48
 800e1b4:	20001134 	.word	0x20001134
 800e1b8:	42b40000 	.word	0x42b40000
 800e1bc:	42a00000 	.word	0x42a00000
 800e1c0:	428c0000 	.word	0x428c0000
 800e1c4:	42700000 	.word	0x42700000
 800e1c8:	42480000 	.word	0x42480000
 800e1cc:	42200000 	.word	0x42200000
 800e1d0:	420c0000 	.word	0x420c0000

0800e1d4 <MIC_TestMeasurementDone>:
    return true;
  }
  return false;
}

bool MIC_TestMeasurementDone(void) {
 800e1d4:	b580      	push	{r7, lr}
 800e1d6:	b082      	sub	sp, #8
 800e1d8:	af00      	add	r7, sp, #0
  bool Check;
  Info("DataReady in MIC_TestMeasurementDone: %d", DataReady);
 800e1da:	4b11      	ldr	r3, [pc, #68]	@ (800e220 <MIC_TestMeasurementDone+0x4c>)
 800e1dc:	781b      	ldrb	r3, [r3, #0]
 800e1de:	b2db      	uxtb	r3, r3
 800e1e0:	4a10      	ldr	r2, [pc, #64]	@ (800e224 <MIC_TestMeasurementDone+0x50>)
 800e1e2:	4911      	ldr	r1, [pc, #68]	@ (800e228 <MIC_TestMeasurementDone+0x54>)
 800e1e4:	2002      	movs	r0, #2
 800e1e6:	f005 fe29 	bl	8013e3c <CreateLine>
  if(DataReady) {
 800e1ea:	4b0d      	ldr	r3, [pc, #52]	@ (800e220 <MIC_TestMeasurementDone+0x4c>)
 800e1ec:	781b      	ldrb	r3, [r3, #0]
 800e1ee:	b2db      	uxtb	r3, r3
 800e1f0:	2b00      	cmp	r3, #0
 800e1f2:	d010      	beq.n	800e216 <MIC_TestMeasurementDone+0x42>
    Check = micEnabled;
 800e1f4:	1dfb      	adds	r3, r7, #7
 800e1f6:	4a0d      	ldr	r2, [pc, #52]	@ (800e22c <MIC_TestMeasurementDone+0x58>)
 800e1f8:	7812      	ldrb	r2, [r2, #0]
 800e1fa:	701a      	strb	r2, [r3, #0]
    Info("status micEnabled: %d",micEnabled );
 800e1fc:	4b0b      	ldr	r3, [pc, #44]	@ (800e22c <MIC_TestMeasurementDone+0x58>)
 800e1fe:	781b      	ldrb	r3, [r3, #0]
 800e200:	b2db      	uxtb	r3, r3
 800e202:	4a0b      	ldr	r2, [pc, #44]	@ (800e230 <MIC_TestMeasurementDone+0x5c>)
 800e204:	4908      	ldr	r1, [pc, #32]	@ (800e228 <MIC_TestMeasurementDone+0x54>)
 800e206:	2002      	movs	r0, #2
 800e208:	f005 fe18 	bl	8013e3c <CreateLine>
    ResetMICIndicator();
 800e20c:	f004 fbe4 	bl	80129d8 <ResetMICIndicator>
    return Check;
 800e210:	1dfb      	adds	r3, r7, #7
 800e212:	781b      	ldrb	r3, [r3, #0]
 800e214:	e000      	b.n	800e218 <MIC_TestMeasurementDone+0x44>
  }
  return false;
 800e216:	2300      	movs	r3, #0
}
 800e218:	0018      	movs	r0, r3
 800e21a:	46bd      	mov	sp, r7
 800e21c:	b002      	add	sp, #8
 800e21e:	bd80      	pop	{r7, pc}
 800e220:	200012b1 	.word	0x200012b1
 800e224:	0802ce4c 	.word	0x0802ce4c
 800e228:	0802ce48 	.word	0x0802ce48
 800e22c:	200012b2 	.word	0x200012b2
 800e230:	0802ce78 	.word	0x0802ce78

0800e234 <Mic_Upkeep>:

MicrophoneState Mic_Upkeep(){
 800e234:	b580      	push	{r7, lr}
 800e236:	b082      	sub	sp, #8
 800e238:	af00      	add	r7, sp, #0
  static MicrophoneState MicState = MIC_STATE_INIT;
  switch(MicState){
 800e23a:	4b78      	ldr	r3, [pc, #480]	@ (800e41c <Mic_Upkeep+0x1e8>)
 800e23c:	781b      	ldrb	r3, [r3, #0]
 800e23e:	2b03      	cmp	r3, #3
 800e240:	d100      	bne.n	800e244 <Mic_Upkeep+0x10>
 800e242:	e0b8      	b.n	800e3b6 <Mic_Upkeep+0x182>
 800e244:	dd00      	ble.n	800e248 <Mic_Upkeep+0x14>
 800e246:	e0d3      	b.n	800e3f0 <Mic_Upkeep+0x1bc>
 800e248:	2b02      	cmp	r3, #2
 800e24a:	d037      	beq.n	800e2bc <Mic_Upkeep+0x88>
 800e24c:	dd00      	ble.n	800e250 <Mic_Upkeep+0x1c>
 800e24e:	e0cf      	b.n	800e3f0 <Mic_Upkeep+0x1bc>
 800e250:	2b00      	cmp	r3, #0
 800e252:	d002      	beq.n	800e25a <Mic_Upkeep+0x26>
 800e254:	2b01      	cmp	r3, #1
 800e256:	d014      	beq.n	800e282 <Mic_Upkeep+0x4e>
 800e258:	e0ca      	b.n	800e3f0 <Mic_Upkeep+0x1bc>

  case MIC_STATE_INIT:
    //reset if necesarry
    if (!enableMicrophone(true)) {
 800e25a:	2001      	movs	r0, #1
 800e25c:	f003 fbb4 	bl	80119c8 <enableMicrophone>
 800e260:	0003      	movs	r3, r0
 800e262:	001a      	movs	r2, r3
 800e264:	2301      	movs	r3, #1
 800e266:	4053      	eors	r3, r2
 800e268:	b2db      	uxtb	r3, r3
 800e26a:	2b00      	cmp	r3, #0
 800e26c:	d005      	beq.n	800e27a <Mic_Upkeep+0x46>
      errorHandler(__func__, __LINE__, __FILE__);
 800e26e:	4a6c      	ldr	r2, [pc, #432]	@ (800e420 <Mic_Upkeep+0x1ec>)
 800e270:	4b6c      	ldr	r3, [pc, #432]	@ (800e424 <Mic_Upkeep+0x1f0>)
 800e272:	217f      	movs	r1, #127	@ 0x7f
 800e274:	0018      	movs	r0, r3
 800e276:	f005 fec9 	bl	801400c <errorHandler>
    }
    MicState = MIC_STATE_START_MEASUREMENT;
 800e27a:	4b68      	ldr	r3, [pc, #416]	@ (800e41c <Mic_Upkeep+0x1e8>)
 800e27c:	2201      	movs	r2, #1
 800e27e:	701a      	strb	r2, [r3, #0]
    break;
 800e280:	e0c5      	b.n	800e40e <Mic_Upkeep+0x1da>

  case MIC_STATE_START_MEASUREMENT:
    if (micSettlingComplete() || DataReady) {
 800e282:	f003 fb7d 	bl	8011980 <micSettlingComplete>
 800e286:	1e03      	subs	r3, r0, #0
 800e288:	d105      	bne.n	800e296 <Mic_Upkeep+0x62>
 800e28a:	4b67      	ldr	r3, [pc, #412]	@ (800e428 <Mic_Upkeep+0x1f4>)
 800e28c:	781b      	ldrb	r3, [r3, #0]
 800e28e:	b2db      	uxtb	r3, r3
 800e290:	2b00      	cmp	r3, #0
 800e292:	d100      	bne.n	800e296 <Mic_Upkeep+0x62>
 800e294:	e0b6      	b.n	800e404 <Mic_Upkeep+0x1d0>
      if (!startSPLcalculation())
 800e296:	f003 fc01 	bl	8011a9c <startSPLcalculation>
 800e29a:	0003      	movs	r3, r0
 800e29c:	001a      	movs	r2, r3
 800e29e:	2301      	movs	r3, #1
 800e2a0:	4053      	eors	r3, r2
 800e2a2:	b2db      	uxtb	r3, r3
 800e2a4:	2b00      	cmp	r3, #0
 800e2a6:	d005      	beq.n	800e2b4 <Mic_Upkeep+0x80>
      {
        errorHandler(__func__, __LINE__, __FILE__);
 800e2a8:	4a5d      	ldr	r2, [pc, #372]	@ (800e420 <Mic_Upkeep+0x1ec>)
 800e2aa:	4b5e      	ldr	r3, [pc, #376]	@ (800e424 <Mic_Upkeep+0x1f0>)
 800e2ac:	2188      	movs	r1, #136	@ 0x88
 800e2ae:	0018      	movs	r0, r3
 800e2b0:	f005 feac 	bl	801400c <errorHandler>
      }
      MicState = MIC_STATE_WAIT_FOR_COMPLETION;
 800e2b4:	4b59      	ldr	r3, [pc, #356]	@ (800e41c <Mic_Upkeep+0x1e8>)
 800e2b6:	2202      	movs	r2, #2
 800e2b8:	701a      	strb	r2, [r3, #0]
    }
    break;
 800e2ba:	e0a3      	b.n	800e404 <Mic_Upkeep+0x1d0>

  case MIC_STATE_WAIT_FOR_COMPLETION:
    if (getSoundData(&soundData, true, true)) {
 800e2bc:	4b5b      	ldr	r3, [pc, #364]	@ (800e42c <Mic_Upkeep+0x1f8>)
 800e2be:	2201      	movs	r2, #1
 800e2c0:	2101      	movs	r1, #1
 800e2c2:	0018      	movs	r0, r3
 800e2c4:	f003 fa3e 	bl	8011744 <getSoundData>
 800e2c8:	1e03      	subs	r3, r0, #0
 800e2ca:	d100      	bne.n	800e2ce <Mic_Upkeep+0x9a>
 800e2cc:	e09c      	b.n	800e408 <Mic_Upkeep+0x1d4>
      clearMaximumAmplitude();
 800e2ce:	f003 fb37 	bl	8011940 <clearMaximumAmplitude>
      char dBbuffer[8];
      sprintf(dBbuffer, "%u.%1u", soundData.SPL_dBA_int, soundData.SPL_dBA_fr_1dp);
 800e2d2:	4b56      	ldr	r3, [pc, #344]	@ (800e42c <Mic_Upkeep+0x1f8>)
 800e2d4:	781b      	ldrb	r3, [r3, #0]
 800e2d6:	001a      	movs	r2, r3
 800e2d8:	4b54      	ldr	r3, [pc, #336]	@ (800e42c <Mic_Upkeep+0x1f8>)
 800e2da:	785b      	ldrb	r3, [r3, #1]
 800e2dc:	4954      	ldr	r1, [pc, #336]	@ (800e430 <Mic_Upkeep+0x1fc>)
 800e2de:	0038      	movs	r0, r7
 800e2e0:	f017 ffd6 	bl	8026290 <siprintf>
      sprintf(mPabuffer, "%u.%02u", soundData.peak_amp_mPa_int, soundData.peak_amp_mPa_fr_2dp);
 800e2e4:	4b51      	ldr	r3, [pc, #324]	@ (800e42c <Mic_Upkeep+0x1f8>)
 800e2e6:	89db      	ldrh	r3, [r3, #14]
 800e2e8:	001a      	movs	r2, r3
 800e2ea:	4b50      	ldr	r3, [pc, #320]	@ (800e42c <Mic_Upkeep+0x1f8>)
 800e2ec:	7c1b      	ldrb	r3, [r3, #16]
 800e2ee:	4951      	ldr	r1, [pc, #324]	@ (800e434 <Mic_Upkeep+0x200>)
 800e2f0:	4851      	ldr	r0, [pc, #324]	@ (800e438 <Mic_Upkeep+0x204>)
 800e2f2:	f017 ffcd 	bl	8026290 <siprintf>
      dBValue = atof(dBbuffer);
 800e2f6:	003b      	movs	r3, r7
 800e2f8:	0018      	movs	r0, r3
 800e2fa:	f016 fb6f 	bl	80249dc <atof>
 800e2fe:	0002      	movs	r2, r0
 800e300:	000b      	movs	r3, r1
 800e302:	0010      	movs	r0, r2
 800e304:	0019      	movs	r1, r3
 800e306:	f7f5 fb0d 	bl	8003924 <__aeabi_d2f>
 800e30a:	1c02      	adds	r2, r0, #0
 800e30c:	4b4b      	ldr	r3, [pc, #300]	@ (800e43c <Mic_Upkeep+0x208>)
 800e30e:	601a      	str	r2, [r3, #0]
      dBValue = ((int)(dBValue * 100 + .5) / 100.0);
 800e310:	4b4a      	ldr	r3, [pc, #296]	@ (800e43c <Mic_Upkeep+0x208>)
 800e312:	681b      	ldr	r3, [r3, #0]
 800e314:	494a      	ldr	r1, [pc, #296]	@ (800e440 <Mic_Upkeep+0x20c>)
 800e316:	1c18      	adds	r0, r3, #0
 800e318:	f7f2 fe92 	bl	8001040 <__aeabi_fmul>
 800e31c:	1c03      	adds	r3, r0, #0
 800e31e:	1c18      	adds	r0, r3, #0
 800e320:	f7f5 fab8 	bl	8003894 <__aeabi_f2d>
 800e324:	2200      	movs	r2, #0
 800e326:	4b47      	ldr	r3, [pc, #284]	@ (800e444 <Mic_Upkeep+0x210>)
 800e328:	f7f3 fb14 	bl	8001954 <__aeabi_dadd>
 800e32c:	0002      	movs	r2, r0
 800e32e:	000b      	movs	r3, r1
 800e330:	0010      	movs	r0, r2
 800e332:	0019      	movs	r1, r3
 800e334:	f7f5 fa20 	bl	8003778 <__aeabi_d2iz>
 800e338:	0003      	movs	r3, r0
 800e33a:	0018      	movs	r0, r3
 800e33c:	f7f5 fa58 	bl	80037f0 <__aeabi_i2d>
 800e340:	2200      	movs	r2, #0
 800e342:	4b41      	ldr	r3, [pc, #260]	@ (800e448 <Mic_Upkeep+0x214>)
 800e344:	f7f3 fecc 	bl	80020e0 <__aeabi_ddiv>
 800e348:	0002      	movs	r2, r0
 800e34a:	000b      	movs	r3, r1
 800e34c:	0010      	movs	r0, r2
 800e34e:	0019      	movs	r1, r3
 800e350:	f7f5 fae8 	bl	8003924 <__aeabi_d2f>
 800e354:	1c02      	adds	r2, r0, #0
 800e356:	4b39      	ldr	r3, [pc, #228]	@ (800e43c <Mic_Upkeep+0x208>)
 800e358:	601a      	str	r2, [r3, #0]
      MIC_Print();
 800e35a:	f7ff fdcf 	bl	800defc <MIC_Print>
      if (!startSPLcalculation()) {
 800e35e:	f003 fb9d 	bl	8011a9c <startSPLcalculation>
 800e362:	0003      	movs	r3, r0
 800e364:	001a      	movs	r2, r3
 800e366:	2301      	movs	r3, #1
 800e368:	4053      	eors	r3, r2
 800e36a:	b2db      	uxtb	r3, r3
 800e36c:	2b00      	cmp	r3, #0
 800e36e:	d005      	beq.n	800e37c <Mic_Upkeep+0x148>
        errorHandler(__func__, __LINE__, __FILE__);
 800e370:	4a2b      	ldr	r2, [pc, #172]	@ (800e420 <Mic_Upkeep+0x1ec>)
 800e372:	4b2c      	ldr	r3, [pc, #176]	@ (800e424 <Mic_Upkeep+0x1f0>)
 800e374:	2198      	movs	r1, #152	@ 0x98
 800e376:	0018      	movs	r0, r3
 800e378:	f005 fe48 	bl	801400c <errorHandler>
      }
      if (!enableMicrophone(false)) {
 800e37c:	2000      	movs	r0, #0
 800e37e:	f003 fb23 	bl	80119c8 <enableMicrophone>
 800e382:	0003      	movs	r3, r0
 800e384:	001a      	movs	r2, r3
 800e386:	2301      	movs	r3, #1
 800e388:	4053      	eors	r3, r2
 800e38a:	b2db      	uxtb	r3, r3
 800e38c:	2b00      	cmp	r3, #0
 800e38e:	d005      	beq.n	800e39c <Mic_Upkeep+0x168>
        errorHandler(__func__, __LINE__, __FILE__);
 800e390:	4a23      	ldr	r2, [pc, #140]	@ (800e420 <Mic_Upkeep+0x1ec>)
 800e392:	4b24      	ldr	r3, [pc, #144]	@ (800e424 <Mic_Upkeep+0x1f0>)
 800e394:	219b      	movs	r1, #155	@ 0x9b
 800e396:	0018      	movs	r0, r3
 800e398:	f005 fe38 	bl	801400c <errorHandler>
      }
      MICTimeStamp = HAL_GetTick() + 755;  // about every second
 800e39c:	f006 fac6 	bl	801492c <HAL_GetTick>
 800e3a0:	0003      	movs	r3, r0
 800e3a2:	4a2a      	ldr	r2, [pc, #168]	@ (800e44c <Mic_Upkeep+0x218>)
 800e3a4:	189a      	adds	r2, r3, r2
 800e3a6:	4b2a      	ldr	r3, [pc, #168]	@ (800e450 <Mic_Upkeep+0x21c>)
 800e3a8:	601a      	str	r2, [r3, #0]
      MicState = MIC_STATE_WAIT;
 800e3aa:	4b1c      	ldr	r3, [pc, #112]	@ (800e41c <Mic_Upkeep+0x1e8>)
 800e3ac:	2203      	movs	r2, #3
 800e3ae:	701a      	strb	r2, [r3, #0]
      ResetMICIndicator();
 800e3b0:	f004 fb12 	bl	80129d8 <ResetMICIndicator>
    }
    break;
 800e3b4:	e028      	b.n	800e408 <Mic_Upkeep+0x1d4>

  case MIC_STATE_WAIT:
    if(TimestampIsReached(MICTimeStamp)){
 800e3b6:	4b26      	ldr	r3, [pc, #152]	@ (800e450 <Mic_Upkeep+0x21c>)
 800e3b8:	681b      	ldr	r3, [r3, #0]
 800e3ba:	0018      	movs	r0, r3
 800e3bc:	f005 fce8 	bl	8013d90 <TimestampIsReached>
 800e3c0:	1e03      	subs	r3, r0, #0
 800e3c2:	d023      	beq.n	800e40c <Mic_Upkeep+0x1d8>
      if (!enableMicrophone(true)) {
 800e3c4:	2001      	movs	r0, #1
 800e3c6:	f003 faff 	bl	80119c8 <enableMicrophone>
 800e3ca:	0003      	movs	r3, r0
 800e3cc:	001a      	movs	r2, r3
 800e3ce:	2301      	movs	r3, #1
 800e3d0:	4053      	eors	r3, r2
 800e3d2:	b2db      	uxtb	r3, r3
 800e3d4:	2b00      	cmp	r3, #0
 800e3d6:	d005      	beq.n	800e3e4 <Mic_Upkeep+0x1b0>
        errorHandler(__func__, __LINE__, __FILE__);
 800e3d8:	4a11      	ldr	r2, [pc, #68]	@ (800e420 <Mic_Upkeep+0x1ec>)
 800e3da:	4b12      	ldr	r3, [pc, #72]	@ (800e424 <Mic_Upkeep+0x1f0>)
 800e3dc:	21a6      	movs	r1, #166	@ 0xa6
 800e3de:	0018      	movs	r0, r3
 800e3e0:	f005 fe14 	bl	801400c <errorHandler>
      }
      MicState = MIC_STATE_START_MEASUREMENT;
 800e3e4:	4b0d      	ldr	r3, [pc, #52]	@ (800e41c <Mic_Upkeep+0x1e8>)
 800e3e6:	2201      	movs	r2, #1
 800e3e8:	701a      	strb	r2, [r3, #0]
      SetMICIndicator();
 800e3ea:	f004 fab3 	bl	8012954 <SetMICIndicator>
    }
    break;
 800e3ee:	e00d      	b.n	800e40c <Mic_Upkeep+0x1d8>

  default:
    Debug("Unexpected occurrence happened");
 800e3f0:	4a18      	ldr	r2, [pc, #96]	@ (800e454 <Mic_Upkeep+0x220>)
 800e3f2:	4b19      	ldr	r3, [pc, #100]	@ (800e458 <Mic_Upkeep+0x224>)
 800e3f4:	0019      	movs	r1, r3
 800e3f6:	2003      	movs	r0, #3
 800e3f8:	f005 fd20 	bl	8013e3c <CreateLine>
    MicState = MIC_STATE_INIT;
 800e3fc:	4b07      	ldr	r3, [pc, #28]	@ (800e41c <Mic_Upkeep+0x1e8>)
 800e3fe:	2200      	movs	r2, #0
 800e400:	701a      	strb	r2, [r3, #0]
    break;
 800e402:	e004      	b.n	800e40e <Mic_Upkeep+0x1da>
    break;
 800e404:	46c0      	nop			@ (mov r8, r8)
 800e406:	e002      	b.n	800e40e <Mic_Upkeep+0x1da>
    break;
 800e408:	46c0      	nop			@ (mov r8, r8)
 800e40a:	e000      	b.n	800e40e <Mic_Upkeep+0x1da>
    break;
 800e40c:	46c0      	nop			@ (mov r8, r8)
  }

  return MicState;
 800e40e:	4b03      	ldr	r3, [pc, #12]	@ (800e41c <Mic_Upkeep+0x1e8>)
 800e410:	781b      	ldrb	r3, [r3, #0]
}
 800e412:	0018      	movs	r0, r3
 800e414:	46bd      	mov	sp, r7
 800e416:	b002      	add	sp, #8
 800e418:	bd80      	pop	{r7, pc}
 800e41a:	46c0      	nop			@ (mov r8, r8)
 800e41c:	20001196 	.word	0x20001196
 800e420:	0802ce90 	.word	0x0802ce90
 800e424:	0802e378 	.word	0x0802e378
 800e428:	200012b1 	.word	0x200012b1
 800e42c:	20001184 	.word	0x20001184
 800e430:	0802ceac 	.word	0x0802ceac
 800e434:	0802ceb4 	.word	0x0802ceb4
 800e438:	20001134 	.word	0x20001134
 800e43c:	20001174 	.word	0x20001174
 800e440:	42c80000 	.word	0x42c80000
 800e444:	3fe00000 	.word	0x3fe00000
 800e448:	40590000 	.word	0x40590000
 800e44c:	000002f3 	.word	0x000002f3
 800e450:	20001180 	.word	0x20001180
 800e454:	0802cebc 	.word	0x0802cebc
 800e458:	0802cedc 	.word	0x0802cedc

0800e45c <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 800e45c:	b580      	push	{r7, lr}
 800e45e:	b086      	sub	sp, #24
 800e460:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800e462:	1d3b      	adds	r3, r7, #4
 800e464:	0018      	movs	r0, r3
 800e466:	2314      	movs	r3, #20
 800e468:	001a      	movs	r2, r3
 800e46a:	2100      	movs	r1, #0
 800e46c:	f018 f858 	bl	8026520 <memset>
  RTC_DateTypeDef sDate = {0};
 800e470:	003b      	movs	r3, r7
 800e472:	2200      	movs	r2, #0
 800e474:	601a      	str	r2, [r3, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800e476:	4b2e      	ldr	r3, [pc, #184]	@ (800e530 <MX_RTC_Init+0xd4>)
 800e478:	4a2e      	ldr	r2, [pc, #184]	@ (800e534 <MX_RTC_Init+0xd8>)
 800e47a:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800e47c:	4b2c      	ldr	r3, [pc, #176]	@ (800e530 <MX_RTC_Init+0xd4>)
 800e47e:	2200      	movs	r2, #0
 800e480:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 800e482:	4b2b      	ldr	r3, [pc, #172]	@ (800e530 <MX_RTC_Init+0xd4>)
 800e484:	227f      	movs	r2, #127	@ 0x7f
 800e486:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800e488:	4b29      	ldr	r3, [pc, #164]	@ (800e530 <MX_RTC_Init+0xd4>)
 800e48a:	22ff      	movs	r2, #255	@ 0xff
 800e48c:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800e48e:	4b28      	ldr	r3, [pc, #160]	@ (800e530 <MX_RTC_Init+0xd4>)
 800e490:	2200      	movs	r2, #0
 800e492:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 800e494:	4b26      	ldr	r3, [pc, #152]	@ (800e530 <MX_RTC_Init+0xd4>)
 800e496:	2200      	movs	r2, #0
 800e498:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800e49a:	4b25      	ldr	r3, [pc, #148]	@ (800e530 <MX_RTC_Init+0xd4>)
 800e49c:	2200      	movs	r2, #0
 800e49e:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800e4a0:	4b23      	ldr	r3, [pc, #140]	@ (800e530 <MX_RTC_Init+0xd4>)
 800e4a2:	2200      	movs	r2, #0
 800e4a4:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800e4a6:	4b22      	ldr	r3, [pc, #136]	@ (800e530 <MX_RTC_Init+0xd4>)
 800e4a8:	0018      	movs	r0, r3
 800e4aa:	f00d fe2b 	bl	801c104 <HAL_RTC_Init>
 800e4ae:	1e03      	subs	r3, r0, #0
 800e4b0:	d001      	beq.n	800e4b6 <MX_RTC_Init+0x5a>
  {
    Error_Handler();
 800e4b2:	f7fe ff79 	bl	800d3a8 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 13;
 800e4b6:	1d3b      	adds	r3, r7, #4
 800e4b8:	220d      	movs	r2, #13
 800e4ba:	701a      	strb	r2, [r3, #0]
  sTime.Minutes = 0;
 800e4bc:	1d3b      	adds	r3, r7, #4
 800e4be:	2200      	movs	r2, #0
 800e4c0:	705a      	strb	r2, [r3, #1]
  sTime.Seconds = 0;
 800e4c2:	1d3b      	adds	r3, r7, #4
 800e4c4:	2200      	movs	r2, #0
 800e4c6:	709a      	strb	r2, [r3, #2]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800e4c8:	1d3b      	adds	r3, r7, #4
 800e4ca:	2200      	movs	r2, #0
 800e4cc:	60da      	str	r2, [r3, #12]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800e4ce:	1d3b      	adds	r3, r7, #4
 800e4d0:	2200      	movs	r2, #0
 800e4d2:	611a      	str	r2, [r3, #16]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 800e4d4:	1d39      	adds	r1, r7, #4
 800e4d6:	4b16      	ldr	r3, [pc, #88]	@ (800e530 <MX_RTC_Init+0xd4>)
 800e4d8:	2200      	movs	r2, #0
 800e4da:	0018      	movs	r0, r3
 800e4dc:	f00d feae 	bl	801c23c <HAL_RTC_SetTime>
 800e4e0:	1e03      	subs	r3, r0, #0
 800e4e2:	d001      	beq.n	800e4e8 <MX_RTC_Init+0x8c>
  {
    Error_Handler();
 800e4e4:	f7fe ff60 	bl	800d3a8 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_SATURDAY;
 800e4e8:	003b      	movs	r3, r7
 800e4ea:	2206      	movs	r2, #6
 800e4ec:	701a      	strb	r2, [r3, #0]
  sDate.Month = RTC_MONTH_NOVEMBER;
 800e4ee:	003b      	movs	r3, r7
 800e4f0:	2211      	movs	r2, #17
 800e4f2:	705a      	strb	r2, [r3, #1]
  sDate.Date = 23;
 800e4f4:	003b      	movs	r3, r7
 800e4f6:	2217      	movs	r2, #23
 800e4f8:	709a      	strb	r2, [r3, #2]
  sDate.Year = 24;
 800e4fa:	003b      	movs	r3, r7
 800e4fc:	2218      	movs	r2, #24
 800e4fe:	70da      	strb	r2, [r3, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 800e500:	0039      	movs	r1, r7
 800e502:	4b0b      	ldr	r3, [pc, #44]	@ (800e530 <MX_RTC_Init+0xd4>)
 800e504:	2200      	movs	r2, #0
 800e506:	0018      	movs	r0, r3
 800e508:	f00d ffa0 	bl	801c44c <HAL_RTC_SetDate>
 800e50c:	1e03      	subs	r3, r0, #0
 800e50e:	d001      	beq.n	800e514 <MX_RTC_Init+0xb8>
  {
    Error_Handler();
 800e510:	f7fe ff4a 	bl	800d3a8 <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 800e514:	4b06      	ldr	r3, [pc, #24]	@ (800e530 <MX_RTC_Init+0xd4>)
 800e516:	2200      	movs	r2, #0
 800e518:	2100      	movs	r1, #0
 800e51a:	0018      	movs	r0, r3
 800e51c:	f00e f96e 	bl	801c7fc <HAL_RTCEx_SetWakeUpTimer_IT>
 800e520:	1e03      	subs	r3, r0, #0
 800e522:	d001      	beq.n	800e528 <MX_RTC_Init+0xcc>
  {
    Error_Handler();
 800e524:	f7fe ff40 	bl	800d3a8 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800e528:	46c0      	nop			@ (mov r8, r8)
 800e52a:	46bd      	mov	sp, r7
 800e52c:	b006      	add	sp, #24
 800e52e:	bd80      	pop	{r7, pc}
 800e530:	20001198 	.word	0x20001198
 800e534:	40002800 	.word	0x40002800

0800e538 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 800e538:	b580      	push	{r7, lr}
 800e53a:	b082      	sub	sp, #8
 800e53c:	af00      	add	r7, sp, #0
 800e53e:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 800e540:	687b      	ldr	r3, [r7, #4]
 800e542:	681b      	ldr	r3, [r3, #0]
 800e544:	4a0a      	ldr	r2, [pc, #40]	@ (800e570 <HAL_RTC_MspInit+0x38>)
 800e546:	4293      	cmp	r3, r2
 800e548:	d10e      	bne.n	800e568 <HAL_RTC_MspInit+0x30>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 800e54a:	4b0a      	ldr	r3, [pc, #40]	@ (800e574 <HAL_RTC_MspInit+0x3c>)
 800e54c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800e54e:	4b09      	ldr	r3, [pc, #36]	@ (800e574 <HAL_RTC_MspInit+0x3c>)
 800e550:	2180      	movs	r1, #128	@ 0x80
 800e552:	02c9      	lsls	r1, r1, #11
 800e554:	430a      	orrs	r2, r1
 800e556:	651a      	str	r2, [r3, #80]	@ 0x50

    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_IRQn, 0, 0);
 800e558:	2200      	movs	r2, #0
 800e55a:	2100      	movs	r1, #0
 800e55c:	2002      	movs	r0, #2
 800e55e:	f006 fe6b 	bl	8015238 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_IRQn);
 800e562:	2002      	movs	r0, #2
 800e564:	f006 fe7d 	bl	8015262 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 800e568:	46c0      	nop			@ (mov r8, r8)
 800e56a:	46bd      	mov	sp, r7
 800e56c:	b002      	add	sp, #8
 800e56e:	bd80      	pop	{r7, pc}
 800e570:	40002800 	.word	0x40002800
 800e574:	40021000 	.word	0x40021000

0800e578 <sen5x_Get_sen5x_enable_state>:
*/
uint32_t sen5xReadTimer = 0;
sen5x_states PMsamplesState = LIGHT_OUT;
SEN5X_DateTypeDef sen5x_data;

bool sen5x_Get_sen5x_enable_state() {
 800e578:	b580      	push	{r7, lr}
 800e57a:	af00      	add	r7, sp, #0
  return sen5x_Enable;
 800e57c:	4b02      	ldr	r3, [pc, #8]	@ (800e588 <sen5x_Get_sen5x_enable_state+0x10>)
 800e57e:	781b      	ldrb	r3, [r3, #0]
}
 800e580:	0018      	movs	r0, r3
 800e582:	46bd      	mov	sp, r7
 800e584:	bd80      	pop	{r7, pc}
 800e586:	46c0      	nop			@ (mov r8, r8)
 800e588:	200011bf 	.word	0x200011bf

0800e58c <sen5x_Set_sen5x_state>:

void sen5x_Set_sen5x_state(bool status) {
 800e58c:	b580      	push	{r7, lr}
 800e58e:	b082      	sub	sp, #8
 800e590:	af00      	add	r7, sp, #0
 800e592:	0002      	movs	r2, r0
 800e594:	1dfb      	adds	r3, r7, #7
 800e596:	701a      	strb	r2, [r3, #0]
  sen5x_Enable = status;
 800e598:	4b03      	ldr	r3, [pc, #12]	@ (800e5a8 <sen5x_Set_sen5x_state+0x1c>)
 800e59a:	1dfa      	adds	r2, r7, #7
 800e59c:	7812      	ldrb	r2, [r2, #0]
 800e59e:	701a      	strb	r2, [r3, #0]
}
 800e5a0:	46c0      	nop			@ (mov r8, r8)
 800e5a2:	46bd      	mov	sp, r7
 800e5a4:	b002      	add	sp, #8
 800e5a6:	bd80      	pop	{r7, pc}
 800e5a8:	200011bf 	.word	0x200011bf

0800e5ac <setsen5xReadTimer>:

void setsen5xReadTimer(uint32_t delayms) {
 800e5ac:	b580      	push	{r7, lr}
 800e5ae:	b082      	sub	sp, #8
 800e5b0:	af00      	add	r7, sp, #0
 800e5b2:	6078      	str	r0, [r7, #4]
  sen5xReadTimer = HAL_GetTick() + delayms;
 800e5b4:	f006 f9ba 	bl	801492c <HAL_GetTick>
 800e5b8:	0002      	movs	r2, r0
 800e5ba:	687b      	ldr	r3, [r7, #4]
 800e5bc:	18d2      	adds	r2, r2, r3
 800e5be:	4b03      	ldr	r3, [pc, #12]	@ (800e5cc <setsen5xReadTimer+0x20>)
 800e5c0:	601a      	str	r2, [r3, #0]
}
 800e5c2:	46c0      	nop			@ (mov r8, r8)
 800e5c4:	46bd      	mov	sp, r7
 800e5c6:	b002      	add	sp, #8
 800e5c8:	bd80      	pop	{r7, pc}
 800e5ca:	46c0      	nop			@ (mov r8, r8)
 800e5cc:	200011cc 	.word	0x200011cc

0800e5d0 <setsen5xSamplecounter>:

void setsen5xSamplecounter(uint8_t samples) {
 800e5d0:	b580      	push	{r7, lr}
 800e5d2:	b082      	sub	sp, #8
 800e5d4:	af00      	add	r7, sp, #0
 800e5d6:	0002      	movs	r2, r0
 800e5d8:	1dfb      	adds	r3, r7, #7
 800e5da:	701a      	strb	r2, [r3, #0]
  sen5xSamples = 0;
 800e5dc:	4b03      	ldr	r3, [pc, #12]	@ (800e5ec <setsen5xSamplecounter+0x1c>)
 800e5de:	2200      	movs	r2, #0
 800e5e0:	701a      	strb	r2, [r3, #0]
}
 800e5e2:	46c0      	nop			@ (mov r8, r8)
 800e5e4:	46bd      	mov	sp, r7
 800e5e6:	b002      	add	sp, #8
 800e5e8:	bd80      	pop	{r7, pc}
 800e5ea:	46c0      	nop			@ (mov r8, r8)
 800e5ec:	200011c8 	.word	0x200011c8

0800e5f0 <sen5x_enable>:

bool sen5x_enable(uint32_t sleepTime) {
 800e5f0:	b580      	push	{r7, lr}
 800e5f2:	b082      	sub	sp, #8
 800e5f4:	af00      	add	r7, sp, #0
 800e5f6:	6078      	str	r0, [r7, #4]
  if (IsPMSensorEnabled()) {
 800e5f8:	f7fe ff8e 	bl	800d518 <IsPMSensorEnabled>
 800e5fc:	1e03      	subs	r3, r0, #0
 800e5fe:	d034      	beq.n	800e66a <sen5x_enable+0x7a>
    if (batteryStatus == BATTERY_FULL) {
 800e600:	4b21      	ldr	r3, [pc, #132]	@ (800e688 <sen5x_enable+0x98>)
 800e602:	781b      	ldrb	r3, [r3, #0]
 800e604:	2b03      	cmp	r3, #3
 800e606:	d103      	bne.n	800e610 <sen5x_enable+0x20>
      sen5x_Enable = true;
 800e608:	4b20      	ldr	r3, [pc, #128]	@ (800e68c <sen5x_enable+0x9c>)
 800e60a:	2201      	movs	r2, #1
 800e60c:	701a      	strb	r2, [r3, #0]
 800e60e:	e00d      	b.n	800e62c <sen5x_enable+0x3c>
    }
    else {
    sen5x_Enable = !sen5x_Enable;
 800e610:	4b1e      	ldr	r3, [pc, #120]	@ (800e68c <sen5x_enable+0x9c>)
 800e612:	781b      	ldrb	r3, [r3, #0]
 800e614:	1e5a      	subs	r2, r3, #1
 800e616:	4193      	sbcs	r3, r2
 800e618:	b2db      	uxtb	r3, r3
 800e61a:	2201      	movs	r2, #1
 800e61c:	4053      	eors	r3, r2
 800e61e:	b2db      	uxtb	r3, r3
 800e620:	1c1a      	adds	r2, r3, #0
 800e622:	2301      	movs	r3, #1
 800e624:	4013      	ands	r3, r2
 800e626:	b2da      	uxtb	r2, r3
 800e628:	4b18      	ldr	r3, [pc, #96]	@ (800e68c <sen5x_enable+0x9c>)
 800e62a:	701a      	strb	r2, [r3, #0]
    }
    if (sen5x_Enable) {
 800e62c:	4b17      	ldr	r3, [pc, #92]	@ (800e68c <sen5x_enable+0x9c>)
 800e62e:	781b      	ldrb	r3, [r3, #0]
 800e630:	2b00      	cmp	r3, #0
 800e632:	d003      	beq.n	800e63c <sen5x_enable+0x4c>
      setsen5xReadTimer(0);
 800e634:	2000      	movs	r0, #0
 800e636:	f7ff ffb9 	bl	800e5ac <setsen5xReadTimer>
 800e63a:	e009      	b.n	800e650 <sen5x_enable+0x60>
    }
    else {
      //The ticker starts after 880*100, effective, this cycle the sen5x device will not start
      setsen5xReadTimer(HAL_GetTick() + (sleepTime*100));
 800e63c:	f006 f976 	bl	801492c <HAL_GetTick>
 800e640:	0002      	movs	r2, r0
 800e642:	687b      	ldr	r3, [r7, #4]
 800e644:	2164      	movs	r1, #100	@ 0x64
 800e646:	434b      	muls	r3, r1
 800e648:	18d3      	adds	r3, r2, r3
 800e64a:	0018      	movs	r0, r3
 800e64c:	f7ff ffae 	bl	800e5ac <setsen5xReadTimer>
    }
    Info("This cycle the sen5x is: %s", sen5x_Enable?"enabled":"disabled");
 800e650:	4b0e      	ldr	r3, [pc, #56]	@ (800e68c <sen5x_enable+0x9c>)
 800e652:	781b      	ldrb	r3, [r3, #0]
 800e654:	2b00      	cmp	r3, #0
 800e656:	d001      	beq.n	800e65c <sen5x_enable+0x6c>
 800e658:	4b0d      	ldr	r3, [pc, #52]	@ (800e690 <sen5x_enable+0xa0>)
 800e65a:	e000      	b.n	800e65e <sen5x_enable+0x6e>
 800e65c:	4b0d      	ldr	r3, [pc, #52]	@ (800e694 <sen5x_enable+0xa4>)
 800e65e:	4a0e      	ldr	r2, [pc, #56]	@ (800e698 <sen5x_enable+0xa8>)
 800e660:	490e      	ldr	r1, [pc, #56]	@ (800e69c <sen5x_enable+0xac>)
 800e662:	2002      	movs	r0, #2
 800e664:	f005 fbea 	bl	8013e3c <CreateLine>
 800e668:	e005      	b.n	800e676 <sen5x_enable+0x86>
  }
  else {
    Info("sen5x measurement is disabled");
 800e66a:	4a0d      	ldr	r2, [pc, #52]	@ (800e6a0 <sen5x_enable+0xb0>)
 800e66c:	4b0b      	ldr	r3, [pc, #44]	@ (800e69c <sen5x_enable+0xac>)
 800e66e:	0019      	movs	r1, r3
 800e670:	2002      	movs	r0, #2
 800e672:	f005 fbe3 	bl	8013e3c <CreateLine>
  }
  PMsamplesState = LIGHT_OUT; // just to be sure if USB_power is disconnected during measurement cycle
 800e676:	4b0b      	ldr	r3, [pc, #44]	@ (800e6a4 <sen5x_enable+0xb4>)
 800e678:	2201      	movs	r2, #1
 800e67a:	701a      	strb	r2, [r3, #0]
  return sen5x_Enable;
 800e67c:	4b03      	ldr	r3, [pc, #12]	@ (800e68c <sen5x_enable+0x9c>)
 800e67e:	781b      	ldrb	r3, [r3, #0]
}
 800e680:	0018      	movs	r0, r3
 800e682:	46bd      	mov	sp, r7
 800e684:	b002      	add	sp, #8
 800e686:	bd80      	pop	{r7, pc}
 800e688:	20002161 	.word	0x20002161
 800e68c:	200011bf 	.word	0x200011bf
 800e690:	0802cee0 	.word	0x0802cee0
 800e694:	0802cee8 	.word	0x0802cee8
 800e698:	0802cef4 	.word	0x0802cef4
 800e69c:	0802cf10 	.word	0x0802cf10
 800e6a0:	0802cf14 	.word	0x0802cf14
 800e6a4:	200000aa 	.word	0x200000aa

0800e6a8 <sen5x_Power_On>:

void sen5x_Power_On(void) {
 800e6a8:	b580      	push	{r7, lr}
 800e6aa:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(Boost_Enable_GPIO_Port, Boost_Enable_Pin, GPIO_PIN_SET);
 800e6ac:	2380      	movs	r3, #128	@ 0x80
 800e6ae:	015b      	lsls	r3, r3, #5
 800e6b0:	480f      	ldr	r0, [pc, #60]	@ (800e6f0 <sen5x_Power_On+0x48>)
 800e6b2:	2201      	movs	r2, #1
 800e6b4:	0019      	movs	r1, r3
 800e6b6:	f007 fbac 	bl	8015e12 <HAL_GPIO_WritePin>
  Debug("executing sen5x_Power_On");
 800e6ba:	4a0e      	ldr	r2, [pc, #56]	@ (800e6f4 <sen5x_Power_On+0x4c>)
 800e6bc:	4b0e      	ldr	r3, [pc, #56]	@ (800e6f8 <sen5x_Power_On+0x50>)
 800e6be:	0019      	movs	r1, r3
 800e6c0:	2003      	movs	r0, #3
 800e6c2:	f005 fbbb 	bl	8013e3c <CreateLine>
  HAL_Delay(150);
 800e6c6:	2096      	movs	r0, #150	@ 0x96
 800e6c8:	f006 f93a 	bl	8014940 <HAL_Delay>
  if (sen5x_device_reset()) {
 800e6cc:	f001 f9f6 	bl	800fabc <sen5x_device_reset>
 800e6d0:	1e03      	subs	r3, r0, #0
 800e6d2:	d006      	beq.n	800e6e2 <sen5x_Power_On+0x3a>
    Error("sen5x device reset error after power on");
 800e6d4:	4a09      	ldr	r2, [pc, #36]	@ (800e6fc <sen5x_Power_On+0x54>)
 800e6d6:	4b0a      	ldr	r3, [pc, #40]	@ (800e700 <sen5x_Power_On+0x58>)
 800e6d8:	0019      	movs	r1, r3
 800e6da:	2001      	movs	r0, #1
 800e6dc:	f005 fbae 	bl	8013e3c <CreateLine>
#ifdef SSD1306
  if (userToggle || Check_USB_PowerOn()) {
    displayStart();
  }
#endif
}
 800e6e0:	e002      	b.n	800e6e8 <sen5x_Power_On+0x40>
    sen5x_On = true;
 800e6e2:	4b08      	ldr	r3, [pc, #32]	@ (800e704 <sen5x_Power_On+0x5c>)
 800e6e4:	2201      	movs	r2, #1
 800e6e6:	701a      	strb	r2, [r3, #0]
}
 800e6e8:	46c0      	nop			@ (mov r8, r8)
 800e6ea:	46bd      	mov	sp, r7
 800e6ec:	bd80      	pop	{r7, pc}
 800e6ee:	46c0      	nop			@ (mov r8, r8)
 800e6f0:	50000800 	.word	0x50000800
 800e6f4:	0802cf34 	.word	0x0802cf34
 800e6f8:	0802cf50 	.word	0x0802cf50
 800e6fc:	0802cf54 	.word	0x0802cf54
 800e700:	0802cf7c 	.word	0x0802cf7c
 800e704:	200011bd 	.word	0x200011bd

0800e708 <sen5x_Power_Off>:

void sen5x_Power_Off(void) {
 800e708:	b580      	push	{r7, lr}
 800e70a:	af00      	add	r7, sp, #0
  if (VOCNOx) {
 800e70c:	4b0e      	ldr	r3, [pc, #56]	@ (800e748 <sen5x_Power_Off+0x40>)
 800e70e:	781b      	ldrb	r3, [r3, #0]
 800e710:	2b00      	cmp	r3, #0
 800e712:	d006      	beq.n	800e722 <sen5x_Power_Off+0x1a>
    Debug("VOC and NOx measurement enabled, no power off");
 800e714:	4a0d      	ldr	r2, [pc, #52]	@ (800e74c <sen5x_Power_Off+0x44>)
 800e716:	4b0e      	ldr	r3, [pc, #56]	@ (800e750 <sen5x_Power_Off+0x48>)
 800e718:	0019      	movs	r1, r3
 800e71a:	2003      	movs	r0, #3
 800e71c:	f005 fb8e 	bl	8013e3c <CreateLine>
      sen5x_On = false;
#ifdef SSD1306
    }
#endif
  }
}
 800e720:	e00f      	b.n	800e742 <sen5x_Power_Off+0x3a>
      Debug("executing sen5x_Power_Off");
 800e722:	4a0c      	ldr	r2, [pc, #48]	@ (800e754 <sen5x_Power_Off+0x4c>)
 800e724:	4b0a      	ldr	r3, [pc, #40]	@ (800e750 <sen5x_Power_Off+0x48>)
 800e726:	0019      	movs	r1, r3
 800e728:	2003      	movs	r0, #3
 800e72a:	f005 fb87 	bl	8013e3c <CreateLine>
      HAL_GPIO_WritePin(Boost_Enable_GPIO_Port, Boost_Enable_Pin, GPIO_PIN_RESET);
 800e72e:	2380      	movs	r3, #128	@ 0x80
 800e730:	015b      	lsls	r3, r3, #5
 800e732:	4809      	ldr	r0, [pc, #36]	@ (800e758 <sen5x_Power_Off+0x50>)
 800e734:	2200      	movs	r2, #0
 800e736:	0019      	movs	r1, r3
 800e738:	f007 fb6b 	bl	8015e12 <HAL_GPIO_WritePin>
      sen5x_On = false;
 800e73c:	4b07      	ldr	r3, [pc, #28]	@ (800e75c <sen5x_Power_Off+0x54>)
 800e73e:	2200      	movs	r2, #0
 800e740:	701a      	strb	r2, [r3, #0]
}
 800e742:	46c0      	nop			@ (mov r8, r8)
 800e744:	46bd      	mov	sp, r7
 800e746:	bd80      	pop	{r7, pc}
 800e748:	200011be 	.word	0x200011be
 800e74c:	0802cf80 	.word	0x0802cf80
 800e750:	0802cf50 	.word	0x0802cf50
 800e754:	0802cfb0 	.word	0x0802cfb0
 800e758:	50000800 	.word	0x50000800
 800e75c:	200011bd 	.word	0x200011bd

0800e760 <reset_fanCleaningDone>:

void reset_fanCleaningDone(void) {
 800e760:	b580      	push	{r7, lr}
 800e762:	af00      	add	r7, sp, #0
  fanCleaningDone = false;
 800e764:	4b02      	ldr	r3, [pc, #8]	@ (800e770 <reset_fanCleaningDone+0x10>)
 800e766:	2200      	movs	r2, #0
 800e768:	701a      	strb	r2, [r3, #0]
}
 800e76a:	46c0      	nop			@ (mov r8, r8)
 800e76c:	46bd      	mov	sp, r7
 800e76e:	bd80      	pop	{r7, pc}
 800e770:	200011bc 	.word	0x200011bc

0800e774 <probe_sen5x>:

int16_t probe_sen5x(void) {
 800e774:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e776:	b093      	sub	sp, #76	@ 0x4c
 800e778:	af04      	add	r7, sp, #16
  int16_t error = 0;
 800e77a:	2436      	movs	r4, #54	@ 0x36
 800e77c:	193b      	adds	r3, r7, r4
 800e77e:	2200      	movs	r2, #0
 800e780:	801a      	strh	r2, [r3, #0]
  unsigned char serial_number[32];
  uint8_t serial_number_size = 32;
 800e782:	2335      	movs	r3, #53	@ 0x35
 800e784:	18fb      	adds	r3, r7, r3
 800e786:	2220      	movs	r2, #32
 800e788:	701a      	strb	r2, [r3, #0]
  uint8_t product_name_size = 32;
 800e78a:	2334      	movs	r3, #52	@ 0x34
 800e78c:	18fb      	adds	r3, r7, r3
 800e78e:	2220      	movs	r2, #32
 800e790:	701a      	strb	r2, [r3, #0]
  sen5x_Power_On();  // switch buck converter
 800e792:	f7ff ff89 	bl	800e6a8 <sen5x_Power_On>
  error = sen5x_device_reset();
 800e796:	0025      	movs	r5, r4
 800e798:	193c      	adds	r4, r7, r4
 800e79a:	f001 f98f 	bl	800fabc <sen5x_device_reset>
 800e79e:	0003      	movs	r3, r0
 800e7a0:	8023      	strh	r3, [r4, #0]
  if (error) {
 800e7a2:	002c      	movs	r4, r5
 800e7a4:	193b      	adds	r3, r7, r4
 800e7a6:	2200      	movs	r2, #0
 800e7a8:	5e9b      	ldrsh	r3, [r3, r2]
 800e7aa:	2b00      	cmp	r3, #0
 800e7ac:	d00b      	beq.n	800e7c6 <probe_sen5x+0x52>
      Error("Error executing sen5x_device_reset(): %i", error);
 800e7ae:	193b      	adds	r3, r7, r4
 800e7b0:	2200      	movs	r2, #0
 800e7b2:	5e9b      	ldrsh	r3, [r3, r2]
 800e7b4:	4a77      	ldr	r2, [pc, #476]	@ (800e994 <probe_sen5x+0x220>)
 800e7b6:	4978      	ldr	r1, [pc, #480]	@ (800e998 <probe_sen5x+0x224>)
 800e7b8:	2001      	movs	r0, #1
 800e7ba:	f005 fb3f 	bl	8013e3c <CreateLine>
      return error;
 800e7be:	193b      	adds	r3, r7, r4
 800e7c0:	2200      	movs	r2, #0
 800e7c2:	5e9b      	ldrsh	r3, [r3, r2]
 800e7c4:	e0e2      	b.n	800e98c <probe_sen5x+0x218>
  }
  error = sen5x_get_serial_number(serial_number, serial_number_size);
 800e7c6:	2536      	movs	r5, #54	@ 0x36
 800e7c8:	197c      	adds	r4, r7, r5
 800e7ca:	2335      	movs	r3, #53	@ 0x35
 800e7cc:	18fb      	adds	r3, r7, r3
 800e7ce:	781a      	ldrb	r2, [r3, #0]
 800e7d0:	230c      	movs	r3, #12
 800e7d2:	18fb      	adds	r3, r7, r3
 800e7d4:	0011      	movs	r1, r2
 800e7d6:	0018      	movs	r0, r3
 800e7d8:	f001 f85c 	bl	800f894 <sen5x_get_serial_number>
 800e7dc:	0003      	movs	r3, r0
 800e7de:	8023      	strh	r3, [r4, #0]
  if (error) {
 800e7e0:	197b      	adds	r3, r7, r5
 800e7e2:	2200      	movs	r2, #0
 800e7e4:	5e9b      	ldrsh	r3, [r3, r2]
 800e7e6:	2b00      	cmp	r3, #0
 800e7e8:	d00b      	beq.n	800e802 <probe_sen5x+0x8e>
      Error("Error executing sen5x_get_serial_number(): %i", error);
 800e7ea:	197b      	adds	r3, r7, r5
 800e7ec:	2200      	movs	r2, #0
 800e7ee:	5e9b      	ldrsh	r3, [r3, r2]
 800e7f0:	4a6a      	ldr	r2, [pc, #424]	@ (800e99c <probe_sen5x+0x228>)
 800e7f2:	4969      	ldr	r1, [pc, #420]	@ (800e998 <probe_sen5x+0x224>)
 800e7f4:	2001      	movs	r0, #1
 800e7f6:	f005 fb21 	bl	8013e3c <CreateLine>
      return error;
 800e7fa:	197b      	adds	r3, r7, r5
 800e7fc:	2200      	movs	r2, #0
 800e7fe:	5e9b      	ldrsh	r3, [r3, r2]
 800e800:	e0c4      	b.n	800e98c <probe_sen5x+0x218>
  } else {
      Info("Serial number: %s", serial_number);
 800e802:	230c      	movs	r3, #12
 800e804:	18fb      	adds	r3, r7, r3
 800e806:	4a66      	ldr	r2, [pc, #408]	@ (800e9a0 <probe_sen5x+0x22c>)
 800e808:	4966      	ldr	r1, [pc, #408]	@ (800e9a4 <probe_sen5x+0x230>)
 800e80a:	2002      	movs	r0, #2
 800e80c:	f005 fb16 	bl	8013e3c <CreateLine>
  }
  error = sen5x_get_product_name(product_name, product_name_size);
 800e810:	2536      	movs	r5, #54	@ 0x36
 800e812:	197c      	adds	r4, r7, r5
 800e814:	2334      	movs	r3, #52	@ 0x34
 800e816:	18fb      	adds	r3, r7, r3
 800e818:	781a      	ldrb	r2, [r3, #0]
 800e81a:	4b63      	ldr	r3, [pc, #396]	@ (800e9a8 <probe_sen5x+0x234>)
 800e81c:	0011      	movs	r1, r2
 800e81e:	0018      	movs	r0, r3
 800e820:	f000 ffe2 	bl	800f7e8 <sen5x_get_product_name>
 800e824:	0003      	movs	r3, r0
 800e826:	8023      	strh	r3, [r4, #0]
  if (error) {
 800e828:	197b      	adds	r3, r7, r5
 800e82a:	2200      	movs	r2, #0
 800e82c:	5e9b      	ldrsh	r3, [r3, r2]
 800e82e:	2b00      	cmp	r3, #0
 800e830:	d00b      	beq.n	800e84a <probe_sen5x+0xd6>
      Error("Error executing sen5x_get_product_name(): %i", error);
 800e832:	197b      	adds	r3, r7, r5
 800e834:	2200      	movs	r2, #0
 800e836:	5e9b      	ldrsh	r3, [r3, r2]
 800e838:	4a5c      	ldr	r2, [pc, #368]	@ (800e9ac <probe_sen5x+0x238>)
 800e83a:	4957      	ldr	r1, [pc, #348]	@ (800e998 <probe_sen5x+0x224>)
 800e83c:	2001      	movs	r0, #1
 800e83e:	f005 fafd 	bl	8013e3c <CreateLine>
      return error;
 800e842:	197b      	adds	r3, r7, r5
 800e844:	2200      	movs	r2, #0
 800e846:	5e9b      	ldrsh	r3, [r3, r2]
 800e848:	e0a0      	b.n	800e98c <probe_sen5x+0x218>
  } else {
      Info("Product name: %s", product_name);
 800e84a:	4b57      	ldr	r3, [pc, #348]	@ (800e9a8 <probe_sen5x+0x234>)
 800e84c:	4a58      	ldr	r2, [pc, #352]	@ (800e9b0 <probe_sen5x+0x23c>)
 800e84e:	4955      	ldr	r1, [pc, #340]	@ (800e9a4 <probe_sen5x+0x230>)
 800e850:	2002      	movs	r0, #2
 800e852:	f005 faf3 	bl	8013e3c <CreateLine>
  bool firmware_debug;
  uint8_t hardware_major;
  uint8_t hardware_minor;
  uint8_t protocol_major;
  uint8_t protocol_minor;
  error = sen5x_get_version(&firmware_major, &firmware_minor, &firmware_debug,
 800e856:	2636      	movs	r6, #54	@ 0x36
 800e858:	19bc      	adds	r4, r7, r6
 800e85a:	2308      	movs	r3, #8
 800e85c:	18fd      	adds	r5, r7, r3
 800e85e:	2309      	movs	r3, #9
 800e860:	18fa      	adds	r2, r7, r3
 800e862:	230a      	movs	r3, #10
 800e864:	18f9      	adds	r1, r7, r3
 800e866:	230b      	movs	r3, #11
 800e868:	18f8      	adds	r0, r7, r3
 800e86a:	1d7b      	adds	r3, r7, #5
 800e86c:	9302      	str	r3, [sp, #8]
 800e86e:	1dbb      	adds	r3, r7, #6
 800e870:	9301      	str	r3, [sp, #4]
 800e872:	1dfb      	adds	r3, r7, #7
 800e874:	9300      	str	r3, [sp, #0]
 800e876:	002b      	movs	r3, r5
 800e878:	f001 f862 	bl	800f940 <sen5x_get_version>
 800e87c:	0003      	movs	r3, r0
 800e87e:	8023      	strh	r3, [r4, #0]
                            &hardware_major, &hardware_minor, &protocol_major,
                            &protocol_minor);

  if (error) {
 800e880:	19bb      	adds	r3, r7, r6
 800e882:	2200      	movs	r2, #0
 800e884:	5e9b      	ldrsh	r3, [r3, r2]
 800e886:	2b00      	cmp	r3, #0
 800e888:	d00b      	beq.n	800e8a2 <probe_sen5x+0x12e>
      Error("Error executing sen5x_get_version(): %i", error);
 800e88a:	19bb      	adds	r3, r7, r6
 800e88c:	2200      	movs	r2, #0
 800e88e:	5e9b      	ldrsh	r3, [r3, r2]
 800e890:	4a48      	ldr	r2, [pc, #288]	@ (800e9b4 <probe_sen5x+0x240>)
 800e892:	4941      	ldr	r1, [pc, #260]	@ (800e998 <probe_sen5x+0x224>)
 800e894:	2001      	movs	r0, #1
 800e896:	f005 fad1 	bl	8013e3c <CreateLine>
      return error;
 800e89a:	19bb      	adds	r3, r7, r6
 800e89c:	2200      	movs	r2, #0
 800e89e:	5e9b      	ldrsh	r3, [r3, r2]
 800e8a0:	e074      	b.n	800e98c <probe_sen5x+0x218>
  } else {
      Info("Firmware: %u.%u, Hardware: %u.%u", firmware_major,
 800e8a2:	230b      	movs	r3, #11
 800e8a4:	18fb      	adds	r3, r7, r3
 800e8a6:	781b      	ldrb	r3, [r3, #0]
 800e8a8:	001d      	movs	r5, r3
 800e8aa:	230a      	movs	r3, #10
 800e8ac:	18fb      	adds	r3, r7, r3
 800e8ae:	781b      	ldrb	r3, [r3, #0]
 800e8b0:	0018      	movs	r0, r3
 800e8b2:	2308      	movs	r3, #8
 800e8b4:	18fb      	adds	r3, r7, r3
 800e8b6:	781b      	ldrb	r3, [r3, #0]
 800e8b8:	001c      	movs	r4, r3
 800e8ba:	1dfb      	adds	r3, r7, #7
 800e8bc:	781b      	ldrb	r3, [r3, #0]
 800e8be:	4a3e      	ldr	r2, [pc, #248]	@ (800e9b8 <probe_sen5x+0x244>)
 800e8c0:	4938      	ldr	r1, [pc, #224]	@ (800e9a4 <probe_sen5x+0x230>)
 800e8c2:	9302      	str	r3, [sp, #8]
 800e8c4:	9401      	str	r4, [sp, #4]
 800e8c6:	9000      	str	r0, [sp, #0]
 800e8c8:	002b      	movs	r3, r5
 800e8ca:	2002      	movs	r0, #2
 800e8cc:	f005 fab6 	bl	8013e3c <CreateLine>
// `sen5x_set_warm_start_parameter` and
// `sen5x_set_rht_acceleration_mode`.
//
// Adjust temp_offset in degrees celsius to account for additional
// temperature offsets exceeding the SEN module's self heating.
  float temp_offset = 0.0f;
 800e8d0:	2300      	movs	r3, #0
 800e8d2:	633b      	str	r3, [r7, #48]	@ 0x30
  int16_t default_slope = 0;
 800e8d4:	262e      	movs	r6, #46	@ 0x2e
 800e8d6:	19bb      	adds	r3, r7, r6
 800e8d8:	2200      	movs	r2, #0
 800e8da:	801a      	strh	r2, [r3, #0]
  uint16_t default_time_constant = 0;
 800e8dc:	232c      	movs	r3, #44	@ 0x2c
 800e8de:	18fb      	adds	r3, r7, r3
 800e8e0:	2200      	movs	r2, #0
 800e8e2:	801a      	strh	r2, [r3, #0]
  error = sen5x_set_temperature_offset_parameters(
      (int16_t)(200 * temp_offset), default_slope, default_time_constant);
 800e8e4:	4935      	ldr	r1, [pc, #212]	@ (800e9bc <probe_sen5x+0x248>)
 800e8e6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800e8e8:	f7f2 fbaa 	bl	8001040 <__aeabi_fmul>
 800e8ec:	1c03      	adds	r3, r0, #0
  error = sen5x_set_temperature_offset_parameters(
 800e8ee:	1c18      	adds	r0, r3, #0
 800e8f0:	f7f2 ff7a 	bl	80017e8 <__aeabi_f2iz>
 800e8f4:	0003      	movs	r3, r0
 800e8f6:	b218      	sxth	r0, r3
 800e8f8:	2536      	movs	r5, #54	@ 0x36
 800e8fa:	197c      	adds	r4, r7, r5
 800e8fc:	232c      	movs	r3, #44	@ 0x2c
 800e8fe:	18fb      	adds	r3, r7, r3
 800e900:	881a      	ldrh	r2, [r3, #0]
 800e902:	19bb      	adds	r3, r7, r6
 800e904:	2100      	movs	r1, #0
 800e906:	5e5b      	ldrsh	r3, [r3, r1]
 800e908:	0019      	movs	r1, r3
 800e90a:	f000 ff09 	bl	800f720 <sen5x_set_temperature_offset_parameters>
 800e90e:	0003      	movs	r3, r0
 800e910:	8023      	strh	r3, [r4, #0]
  if (error) {
 800e912:	197b      	adds	r3, r7, r5
 800e914:	2200      	movs	r2, #0
 800e916:	5e9b      	ldrsh	r3, [r3, r2]
 800e918:	2b00      	cmp	r3, #0
 800e91a:	d00b      	beq.n	800e934 <probe_sen5x+0x1c0>
      Error("Error executing sen5x_set_temperature_offset_parameters(): %i", error);
 800e91c:	197b      	adds	r3, r7, r5
 800e91e:	2200      	movs	r2, #0
 800e920:	5e9b      	ldrsh	r3, [r3, r2]
 800e922:	4a27      	ldr	r2, [pc, #156]	@ (800e9c0 <probe_sen5x+0x24c>)
 800e924:	491c      	ldr	r1, [pc, #112]	@ (800e998 <probe_sen5x+0x224>)
 800e926:	2001      	movs	r0, #1
 800e928:	f005 fa88 	bl	8013e3c <CreateLine>
      return error;
 800e92c:	197b      	adds	r3, r7, r5
 800e92e:	2200      	movs	r2, #0
 800e930:	5e9b      	ldrsh	r3, [r3, r2]
 800e932:	e02b      	b.n	800e98c <probe_sen5x+0x218>
  } else {
      Info("Temperature Offset set to %.2f °C (SEN54/SEN55 only)", temp_offset);
 800e934:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800e936:	f7f4 ffad 	bl	8003894 <__aeabi_f2d>
 800e93a:	0002      	movs	r2, r0
 800e93c:	000b      	movs	r3, r1
 800e93e:	4821      	ldr	r0, [pc, #132]	@ (800e9c4 <probe_sen5x+0x250>)
 800e940:	4918      	ldr	r1, [pc, #96]	@ (800e9a4 <probe_sen5x+0x230>)
 800e942:	9200      	str	r2, [sp, #0]
 800e944:	9301      	str	r3, [sp, #4]
 800e946:	0002      	movs	r2, r0
 800e948:	2002      	movs	r0, #2
 800e94a:	f005 fa77 	bl	8013e3c <CreateLine>
  }
  if (!Check_USB_PowerOn()) {
 800e94e:	f7fb f963 	bl	8009c18 <Check_USB_PowerOn>
 800e952:	0003      	movs	r3, r0
 800e954:	001a      	movs	r2, r3
 800e956:	2301      	movs	r3, #1
 800e958:	4053      	eors	r3, r2
 800e95a:	b2db      	uxtb	r3, r3
 800e95c:	2b00      	cmp	r3, #0
 800e95e:	d00a      	beq.n	800e976 <probe_sen5x+0x202>
    sen5x_Power_Off();
 800e960:	f7ff fed2 	bl	800e708 <sen5x_Power_Off>
    sen5xReadTimer  = HAL_GetTick() + 2000; // after 25 second first measurement
 800e964:	f005 ffe2 	bl	801492c <HAL_GetTick>
 800e968:	0003      	movs	r3, r0
 800e96a:	22fa      	movs	r2, #250	@ 0xfa
 800e96c:	00d2      	lsls	r2, r2, #3
 800e96e:	189a      	adds	r2, r3, r2
 800e970:	4b15      	ldr	r3, [pc, #84]	@ (800e9c8 <probe_sen5x+0x254>)
 800e972:	601a      	str	r2, [r3, #0]
 800e974:	e006      	b.n	800e984 <probe_sen5x+0x210>
  }
  else {
    sen5xReadTimer  = HAL_GetTick() + 28000; // after 25 second first measurement
 800e976:	f005 ffd9 	bl	801492c <HAL_GetTick>
 800e97a:	0003      	movs	r3, r0
 800e97c:	4a13      	ldr	r2, [pc, #76]	@ (800e9cc <probe_sen5x+0x258>)
 800e97e:	189a      	adds	r2, r3, r2
 800e980:	4b11      	ldr	r3, [pc, #68]	@ (800e9c8 <probe_sen5x+0x254>)
 800e982:	601a      	str	r2, [r3, #0]
  }
  return error;
 800e984:	2336      	movs	r3, #54	@ 0x36
 800e986:	18fb      	adds	r3, r7, r3
 800e988:	2200      	movs	r2, #0
 800e98a:	5e9b      	ldrsh	r3, [r3, r2]
}
 800e98c:	0018      	movs	r0, r3
 800e98e:	46bd      	mov	sp, r7
 800e990:	b00f      	add	sp, #60	@ 0x3c
 800e992:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e994:	0802cfcc 	.word	0x0802cfcc
 800e998:	0802cf7c 	.word	0x0802cf7c
 800e99c:	0802cff8 	.word	0x0802cff8
 800e9a0:	0802d028 	.word	0x0802d028
 800e9a4:	0802cf10 	.word	0x0802cf10
 800e9a8:	200011c0 	.word	0x200011c0
 800e9ac:	0802d03c 	.word	0x0802d03c
 800e9b0:	0802d06c 	.word	0x0802d06c
 800e9b4:	0802d080 	.word	0x0802d080
 800e9b8:	0802d0a8 	.word	0x0802d0a8
 800e9bc:	43480000 	.word	0x43480000
 800e9c0:	0802d0cc 	.word	0x0802d0cc
 800e9c4:	0802d10c 	.word	0x0802d10c
 800e9c8:	200011cc 	.word	0x200011cc
 800e9cc:	00006d60 	.word	0x00006d60

0800e9d0 <sen5x_lightup_measurement>:

int16_t sen5x_lightup_measurement(void) {
 800e9d0:	b590      	push	{r4, r7, lr}
 800e9d2:	b083      	sub	sp, #12
 800e9d4:	af00      	add	r7, sp, #0
// Start Measurement
  int16_t error = 0;
 800e9d6:	1dbb      	adds	r3, r7, #6
 800e9d8:	2200      	movs	r2, #0
 800e9da:	801a      	strh	r2, [r3, #0]
//  Debug("entering sen5x_lightup_measurement");
  if (VOCNOx) {
 800e9dc:	4b1b      	ldr	r3, [pc, #108]	@ (800ea4c <sen5x_lightup_measurement+0x7c>)
 800e9de:	781b      	ldrb	r3, [r3, #0]
 800e9e0:	2b00      	cmp	r3, #0
 800e9e2:	d00b      	beq.n	800e9fc <sen5x_lightup_measurement+0x2c>
    Info("Continous measurement without PM is active");
 800e9e4:	4a1a      	ldr	r2, [pc, #104]	@ (800ea50 <sen5x_lightup_measurement+0x80>)
 800e9e6:	4b1b      	ldr	r3, [pc, #108]	@ (800ea54 <sen5x_lightup_measurement+0x84>)
 800e9e8:	0019      	movs	r1, r3
 800e9ea:	2002      	movs	r0, #2
 800e9ec:	f005 fa26 	bl	8013e3c <CreateLine>
    error =sen5x_start_measurement_without_pm();
 800e9f0:	1dbc      	adds	r4, r7, #6
 800e9f2:	f000 fd21 	bl	800f438 <sen5x_start_measurement_without_pm>
 800e9f6:	0003      	movs	r3, r0
 800e9f8:	8023      	strh	r3, [r4, #0]
 800e9fa:	e00a      	b.n	800ea12 <sen5x_lightup_measurement+0x42>
  }
  else {
    Info("Measurement with PM is active");
 800e9fc:	4a16      	ldr	r2, [pc, #88]	@ (800ea58 <sen5x_lightup_measurement+0x88>)
 800e9fe:	4b15      	ldr	r3, [pc, #84]	@ (800ea54 <sen5x_lightup_measurement+0x84>)
 800ea00:	0019      	movs	r1, r3
 800ea02:	2002      	movs	r0, #2
 800ea04:	f005 fa1a 	bl	8013e3c <CreateLine>
    error = sen5x_start_measurement(); // start full measurement mode
 800ea08:	1dbc      	adds	r4, r7, #6
 800ea0a:	f000 fce7 	bl	800f3dc <sen5x_start_measurement>
 800ea0e:	0003      	movs	r3, r0
 800ea10:	8023      	strh	r3, [r4, #0]
  }
  if (error) {
 800ea12:	1dbb      	adds	r3, r7, #6
 800ea14:	2200      	movs	r2, #0
 800ea16:	5e9b      	ldrsh	r3, [r3, r2]
 800ea18:	2b00      	cmp	r3, #0
 800ea1a:	d008      	beq.n	800ea2e <sen5x_lightup_measurement+0x5e>
    Error("Error executing sen5x_lightup_measurement(): %i", error);
 800ea1c:	1dbb      	adds	r3, r7, #6
 800ea1e:	2200      	movs	r2, #0
 800ea20:	5e9b      	ldrsh	r3, [r3, r2]
 800ea22:	4a0e      	ldr	r2, [pc, #56]	@ (800ea5c <sen5x_lightup_measurement+0x8c>)
 800ea24:	490e      	ldr	r1, [pc, #56]	@ (800ea60 <sen5x_lightup_measurement+0x90>)
 800ea26:	2001      	movs	r0, #1
 800ea28:	f005 fa08 	bl	8013e3c <CreateLine>
 800ea2c:	e007      	b.n	800ea3e <sen5x_lightup_measurement+0x6e>
  }
  else {
    showTime();
 800ea2e:	f7fb f9fb 	bl	8009e28 <showTime>
    Info("sen5x_start_measurement executed");
 800ea32:	4a0c      	ldr	r2, [pc, #48]	@ (800ea64 <sen5x_lightup_measurement+0x94>)
 800ea34:	4b07      	ldr	r3, [pc, #28]	@ (800ea54 <sen5x_lightup_measurement+0x84>)
 800ea36:	0019      	movs	r1, r3
 800ea38:	2002      	movs	r0, #2
 800ea3a:	f005 f9ff 	bl	8013e3c <CreateLine>
  }
  return error;
 800ea3e:	1dbb      	adds	r3, r7, #6
 800ea40:	2200      	movs	r2, #0
 800ea42:	5e9b      	ldrsh	r3, [r3, r2]
}
 800ea44:	0018      	movs	r0, r3
 800ea46:	46bd      	mov	sp, r7
 800ea48:	b003      	add	sp, #12
 800ea4a:	bd90      	pop	{r4, r7, pc}
 800ea4c:	200011be 	.word	0x200011be
 800ea50:	0802d144 	.word	0x0802d144
 800ea54:	0802cf10 	.word	0x0802cf10
 800ea58:	0802d170 	.word	0x0802d170
 800ea5c:	0802d190 	.word	0x0802d190
 800ea60:	0802cf7c 	.word	0x0802cf7c
 800ea64:	0802d1c0 	.word	0x0802d1c0

0800ea68 <sen5x_extinguish_measurement>:

int16_t sen5x_extinguish_measurement(void) {
 800ea68:	b590      	push	{r4, r7, lr}
 800ea6a:	b083      	sub	sp, #12
 800ea6c:	af00      	add	r7, sp, #0
  int16_t error = 0;
 800ea6e:	1dbb      	adds	r3, r7, #6
 800ea70:	2200      	movs	r2, #0
 800ea72:	801a      	strh	r2, [r3, #0]
  if (VOCNOx) {
 800ea74:	4b21      	ldr	r3, [pc, #132]	@ (800eafc <sen5x_extinguish_measurement+0x94>)
 800ea76:	781b      	ldrb	r3, [r3, #0]
 800ea78:	2b00      	cmp	r3, #0
 800ea7a:	d01e      	beq.n	800eaba <sen5x_extinguish_measurement+0x52>
    Info("Continuous VOC & NOx is active, sensor not powered off");
 800ea7c:	4a20      	ldr	r2, [pc, #128]	@ (800eb00 <sen5x_extinguish_measurement+0x98>)
 800ea7e:	4b21      	ldr	r3, [pc, #132]	@ (800eb04 <sen5x_extinguish_measurement+0x9c>)
 800ea80:	0019      	movs	r1, r3
 800ea82:	2002      	movs	r0, #2
 800ea84:	f005 f9da 	bl	8013e3c <CreateLine>
    Info("PM measurement is disabled");
 800ea88:	4a1f      	ldr	r2, [pc, #124]	@ (800eb08 <sen5x_extinguish_measurement+0xa0>)
 800ea8a:	4b1e      	ldr	r3, [pc, #120]	@ (800eb04 <sen5x_extinguish_measurement+0x9c>)
 800ea8c:	0019      	movs	r1, r3
 800ea8e:	2002      	movs	r0, #2
 800ea90:	f005 f9d4 	bl	8013e3c <CreateLine>
    error =sen5x_start_measurement_without_pm();
 800ea94:	1dbc      	adds	r4, r7, #6
 800ea96:	f000 fccf 	bl	800f438 <sen5x_start_measurement_without_pm>
 800ea9a:	0003      	movs	r3, r0
 800ea9c:	8023      	strh	r3, [r4, #0]
    if (error) {
 800ea9e:	1dbb      	adds	r3, r7, #6
 800eaa0:	2200      	movs	r2, #0
 800eaa2:	5e9b      	ldrsh	r3, [r3, r2]
 800eaa4:	2b00      	cmp	r3, #0
 800eaa6:	d022      	beq.n	800eaee <sen5x_extinguish_measurement+0x86>
      Error("Error executing switching to measurement without PM code: %i", error);
 800eaa8:	1dbb      	adds	r3, r7, #6
 800eaaa:	2200      	movs	r2, #0
 800eaac:	5e9b      	ldrsh	r3, [r3, r2]
 800eaae:	4a17      	ldr	r2, [pc, #92]	@ (800eb0c <sen5x_extinguish_measurement+0xa4>)
 800eab0:	4917      	ldr	r1, [pc, #92]	@ (800eb10 <sen5x_extinguish_measurement+0xa8>)
 800eab2:	2001      	movs	r0, #1
 800eab4:	f005 f9c2 	bl	8013e3c <CreateLine>
 800eab8:	e019      	b.n	800eaee <sen5x_extinguish_measurement+0x86>
    }
  }
  else {
    error = sen5x_stop_measurement();
 800eaba:	1dbc      	adds	r4, r7, #6
 800eabc:	f000 fcea 	bl	800f494 <sen5x_stop_measurement>
 800eac0:	0003      	movs	r3, r0
 800eac2:	8023      	strh	r3, [r4, #0]
    showTime();
 800eac4:	f7fb f9b0 	bl	8009e28 <showTime>
    Info("sen5x_stop_measurement executed");
 800eac8:	4a12      	ldr	r2, [pc, #72]	@ (800eb14 <sen5x_extinguish_measurement+0xac>)
 800eaca:	4b0e      	ldr	r3, [pc, #56]	@ (800eb04 <sen5x_extinguish_measurement+0x9c>)
 800eacc:	0019      	movs	r1, r3
 800eace:	2002      	movs	r0, #2
 800ead0:	f005 f9b4 	bl	8013e3c <CreateLine>
    if (error) {
 800ead4:	1dbb      	adds	r3, r7, #6
 800ead6:	2200      	movs	r2, #0
 800ead8:	5e9b      	ldrsh	r3, [r3, r2]
 800eada:	2b00      	cmp	r3, #0
 800eadc:	d007      	beq.n	800eaee <sen5x_extinguish_measurement+0x86>
      Error("Error executing sen5x_stop_measurement(): %i", error);
 800eade:	1dbb      	adds	r3, r7, #6
 800eae0:	2200      	movs	r2, #0
 800eae2:	5e9b      	ldrsh	r3, [r3, r2]
 800eae4:	4a0c      	ldr	r2, [pc, #48]	@ (800eb18 <sen5x_extinguish_measurement+0xb0>)
 800eae6:	490a      	ldr	r1, [pc, #40]	@ (800eb10 <sen5x_extinguish_measurement+0xa8>)
 800eae8:	2001      	movs	r0, #1
 800eaea:	f005 f9a7 	bl	8013e3c <CreateLine>
    }
  }
  return error;
 800eaee:	1dbb      	adds	r3, r7, #6
 800eaf0:	2200      	movs	r2, #0
 800eaf2:	5e9b      	ldrsh	r3, [r3, r2]
}
 800eaf4:	0018      	movs	r0, r3
 800eaf6:	46bd      	mov	sp, r7
 800eaf8:	b003      	add	sp, #12
 800eafa:	bd90      	pop	{r4, r7, pc}
 800eafc:	200011be 	.word	0x200011be
 800eb00:	0802d1e4 	.word	0x0802d1e4
 800eb04:	0802cf10 	.word	0x0802cf10
 800eb08:	0802d21c 	.word	0x0802d21c
 800eb0c:	0802d238 	.word	0x0802d238
 800eb10:	0802cf7c 	.word	0x0802cf7c
 800eb14:	0802d278 	.word	0x0802d278
 800eb18:	0802d298 	.word	0x0802d298

0800eb1c <sen5x_read_measurement>:

int16_t sen5x_read_measurement(SEN5X_DateTypeDef* sen5x_data) {
 800eb1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800eb1e:	b08d      	sub	sp, #52	@ 0x34
 800eb20:	af04      	add	r7, sp, #16
 800eb22:	6078      	str	r0, [r7, #4]
  int16_t error = 0;
 800eb24:	261e      	movs	r6, #30
 800eb26:	19bb      	adds	r3, r7, r6
 800eb28:	2200      	movs	r2, #0
 800eb2a:	801a      	strh	r2, [r3, #0]
  int16_t ambient_humidity;
  int16_t ambient_temperature;
  int16_t voc_index;
  int16_t nox_index;

  error = sen5x_read_measured_values(
 800eb2c:	19bc      	adds	r4, r7, r6
 800eb2e:	2316      	movs	r3, #22
 800eb30:	18fd      	adds	r5, r7, r3
 800eb32:	2318      	movs	r3, #24
 800eb34:	18fa      	adds	r2, r7, r3
 800eb36:	231a      	movs	r3, #26
 800eb38:	18f9      	adds	r1, r7, r3
 800eb3a:	231c      	movs	r3, #28
 800eb3c:	18f8      	adds	r0, r7, r3
 800eb3e:	230e      	movs	r3, #14
 800eb40:	18fb      	adds	r3, r7, r3
 800eb42:	9303      	str	r3, [sp, #12]
 800eb44:	2310      	movs	r3, #16
 800eb46:	18fb      	adds	r3, r7, r3
 800eb48:	9302      	str	r3, [sp, #8]
 800eb4a:	2312      	movs	r3, #18
 800eb4c:	18fb      	adds	r3, r7, r3
 800eb4e:	9301      	str	r3, [sp, #4]
 800eb50:	2314      	movs	r3, #20
 800eb52:	18fb      	adds	r3, r7, r3
 800eb54:	9300      	str	r3, [sp, #0]
 800eb56:	002b      	movs	r3, r5
 800eb58:	f000 fd1e 	bl	800f598 <sen5x_read_measured_values>
 800eb5c:	0003      	movs	r3, r0
 800eb5e:	8023      	strh	r3, [r4, #0]
          &mass_concentration_pm1p0, &mass_concentration_pm2p5,
          &mass_concentration_pm4p0, &mass_concentration_pm10p0,
          &ambient_humidity, &ambient_temperature, &voc_index, &nox_index);
  if (error) {
 800eb60:	19bb      	adds	r3, r7, r6
 800eb62:	2200      	movs	r2, #0
 800eb64:	5e9b      	ldrsh	r3, [r3, r2]
 800eb66:	2b00      	cmp	r3, #0
 800eb68:	d003      	beq.n	800eb72 <sen5x_read_measurement+0x56>
    return error;
 800eb6a:	19bb      	adds	r3, r7, r6
 800eb6c:	2200      	movs	r2, #0
 800eb6e:	5e9b      	ldrsh	r3, [r3, r2]
 800eb70:	e02c      	b.n	800ebcc <sen5x_read_measurement+0xb0>
  }
  // it is a pitty that sensirion does not structures in there API
  sen5x_data->mass_concentration_pm1p0 = mass_concentration_pm1p0;
 800eb72:	231c      	movs	r3, #28
 800eb74:	18fb      	adds	r3, r7, r3
 800eb76:	881a      	ldrh	r2, [r3, #0]
 800eb78:	687b      	ldr	r3, [r7, #4]
 800eb7a:	801a      	strh	r2, [r3, #0]
  sen5x_data->mass_concentration_pm2p5 = mass_concentration_pm2p5;
 800eb7c:	231a      	movs	r3, #26
 800eb7e:	18fb      	adds	r3, r7, r3
 800eb80:	881a      	ldrh	r2, [r3, #0]
 800eb82:	687b      	ldr	r3, [r7, #4]
 800eb84:	805a      	strh	r2, [r3, #2]
  sen5x_data->mass_concentration_pm4p0 = mass_concentration_pm4p0;
 800eb86:	2318      	movs	r3, #24
 800eb88:	18fb      	adds	r3, r7, r3
 800eb8a:	881a      	ldrh	r2, [r3, #0]
 800eb8c:	687b      	ldr	r3, [r7, #4]
 800eb8e:	809a      	strh	r2, [r3, #4]
  sen5x_data->mass_concentration_pm10p0 = mass_concentration_pm10p0;
 800eb90:	2316      	movs	r3, #22
 800eb92:	18fb      	adds	r3, r7, r3
 800eb94:	881a      	ldrh	r2, [r3, #0]
 800eb96:	687b      	ldr	r3, [r7, #4]
 800eb98:	80da      	strh	r2, [r3, #6]
  sen5x_data->ambient_humidity = ambient_humidity;
 800eb9a:	2314      	movs	r3, #20
 800eb9c:	18fb      	adds	r3, r7, r3
 800eb9e:	2200      	movs	r2, #0
 800eba0:	5e9a      	ldrsh	r2, [r3, r2]
 800eba2:	687b      	ldr	r3, [r7, #4]
 800eba4:	811a      	strh	r2, [r3, #8]
  sen5x_data->ambient_temperature = ambient_temperature;
 800eba6:	2312      	movs	r3, #18
 800eba8:	18fb      	adds	r3, r7, r3
 800ebaa:	2200      	movs	r2, #0
 800ebac:	5e9a      	ldrsh	r2, [r3, r2]
 800ebae:	687b      	ldr	r3, [r7, #4]
 800ebb0:	815a      	strh	r2, [r3, #10]
  sen5x_data->voc_index = voc_index;
 800ebb2:	2310      	movs	r3, #16
 800ebb4:	18fb      	adds	r3, r7, r3
 800ebb6:	2200      	movs	r2, #0
 800ebb8:	5e9a      	ldrsh	r2, [r3, r2]
 800ebba:	687b      	ldr	r3, [r7, #4]
 800ebbc:	819a      	strh	r2, [r3, #12]
  sen5x_data->nox_index = nox_index;
 800ebbe:	230e      	movs	r3, #14
 800ebc0:	18fb      	adds	r3, r7, r3
 800ebc2:	2200      	movs	r2, #0
 800ebc4:	5e9a      	ldrsh	r2, [r3, r2]
 800ebc6:	687b      	ldr	r3, [r7, #4]
 800ebc8:	81da      	strh	r2, [r3, #14]
  return 0;
 800ebca:	2300      	movs	r3, #0
}
 800ebcc:	0018      	movs	r0, r3
 800ebce:	46bd      	mov	sp, r7
 800ebd0:	b009      	add	sp, #36	@ 0x24
 800ebd2:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800ebd4 <sen5x_printvalues>:

void sen5x_printvalues(void) {
 800ebd4:	b580      	push	{r7, lr}
 800ebd6:	b082      	sub	sp, #8
 800ebd8:	af02      	add	r7, sp, #8
  if (sen5x_data.mass_concentration_pm1p0 != 0xFFFF) {
 800ebda:	4b6e      	ldr	r3, [pc, #440]	@ (800ed94 <sen5x_printvalues+0x1c0>)
 800ebdc:	881b      	ldrh	r3, [r3, #0]
 800ebde:	4a6e      	ldr	r2, [pc, #440]	@ (800ed98 <sen5x_printvalues+0x1c4>)
 800ebe0:	4293      	cmp	r3, r2
 800ebe2:	d017      	beq.n	800ec14 <sen5x_printvalues+0x40>
      Info("Mass concentration pm1p0: %.1f µg/m³", sen5x_data.mass_concentration_pm1p0 / 10.0f);
 800ebe4:	4b6b      	ldr	r3, [pc, #428]	@ (800ed94 <sen5x_printvalues+0x1c0>)
 800ebe6:	881b      	ldrh	r3, [r3, #0]
 800ebe8:	0018      	movs	r0, r3
 800ebea:	f7f2 fe1d 	bl	8001828 <__aeabi_i2f>
 800ebee:	1c03      	adds	r3, r0, #0
 800ebf0:	496a      	ldr	r1, [pc, #424]	@ (800ed9c <sen5x_printvalues+0x1c8>)
 800ebf2:	1c18      	adds	r0, r3, #0
 800ebf4:	f7f2 f856 	bl	8000ca4 <__aeabi_fdiv>
 800ebf8:	1c03      	adds	r3, r0, #0
 800ebfa:	1c18      	adds	r0, r3, #0
 800ebfc:	f7f4 fe4a 	bl	8003894 <__aeabi_f2d>
 800ec00:	0002      	movs	r2, r0
 800ec02:	000b      	movs	r3, r1
 800ec04:	4866      	ldr	r0, [pc, #408]	@ (800eda0 <sen5x_printvalues+0x1cc>)
 800ec06:	4967      	ldr	r1, [pc, #412]	@ (800eda4 <sen5x_printvalues+0x1d0>)
 800ec08:	9200      	str	r2, [sp, #0]
 800ec0a:	9301      	str	r3, [sp, #4]
 800ec0c:	0002      	movs	r2, r0
 800ec0e:	2002      	movs	r0, #2
 800ec10:	f005 f914 	bl	8013e3c <CreateLine>
  }
  if (sen5x_data.mass_concentration_pm2p5 != 0xFFFF) {
 800ec14:	4b5f      	ldr	r3, [pc, #380]	@ (800ed94 <sen5x_printvalues+0x1c0>)
 800ec16:	885b      	ldrh	r3, [r3, #2]
 800ec18:	4a5f      	ldr	r2, [pc, #380]	@ (800ed98 <sen5x_printvalues+0x1c4>)
 800ec1a:	4293      	cmp	r3, r2
 800ec1c:	d017      	beq.n	800ec4e <sen5x_printvalues+0x7a>
        Info("Mass concentration pm2p5: %.1f µg/m³", sen5x_data.mass_concentration_pm2p5 / 10.0f);
 800ec1e:	4b5d      	ldr	r3, [pc, #372]	@ (800ed94 <sen5x_printvalues+0x1c0>)
 800ec20:	885b      	ldrh	r3, [r3, #2]
 800ec22:	0018      	movs	r0, r3
 800ec24:	f7f2 fe00 	bl	8001828 <__aeabi_i2f>
 800ec28:	1c03      	adds	r3, r0, #0
 800ec2a:	495c      	ldr	r1, [pc, #368]	@ (800ed9c <sen5x_printvalues+0x1c8>)
 800ec2c:	1c18      	adds	r0, r3, #0
 800ec2e:	f7f2 f839 	bl	8000ca4 <__aeabi_fdiv>
 800ec32:	1c03      	adds	r3, r0, #0
 800ec34:	1c18      	adds	r0, r3, #0
 800ec36:	f7f4 fe2d 	bl	8003894 <__aeabi_f2d>
 800ec3a:	0002      	movs	r2, r0
 800ec3c:	000b      	movs	r3, r1
 800ec3e:	485a      	ldr	r0, [pc, #360]	@ (800eda8 <sen5x_printvalues+0x1d4>)
 800ec40:	4958      	ldr	r1, [pc, #352]	@ (800eda4 <sen5x_printvalues+0x1d0>)
 800ec42:	9200      	str	r2, [sp, #0]
 800ec44:	9301      	str	r3, [sp, #4]
 800ec46:	0002      	movs	r2, r0
 800ec48:	2002      	movs	r0, #2
 800ec4a:	f005 f8f7 	bl	8013e3c <CreateLine>
  }
  if (sen5x_data.mass_concentration_pm4p0 != 0xFFFF) {
 800ec4e:	4b51      	ldr	r3, [pc, #324]	@ (800ed94 <sen5x_printvalues+0x1c0>)
 800ec50:	889b      	ldrh	r3, [r3, #4]
 800ec52:	4a51      	ldr	r2, [pc, #324]	@ (800ed98 <sen5x_printvalues+0x1c4>)
 800ec54:	4293      	cmp	r3, r2
 800ec56:	d017      	beq.n	800ec88 <sen5x_printvalues+0xb4>
        Info("Mass concentration pm4p0: %.1f µg/m³", sen5x_data.mass_concentration_pm4p0 / 10.0f);
 800ec58:	4b4e      	ldr	r3, [pc, #312]	@ (800ed94 <sen5x_printvalues+0x1c0>)
 800ec5a:	889b      	ldrh	r3, [r3, #4]
 800ec5c:	0018      	movs	r0, r3
 800ec5e:	f7f2 fde3 	bl	8001828 <__aeabi_i2f>
 800ec62:	1c03      	adds	r3, r0, #0
 800ec64:	494d      	ldr	r1, [pc, #308]	@ (800ed9c <sen5x_printvalues+0x1c8>)
 800ec66:	1c18      	adds	r0, r3, #0
 800ec68:	f7f2 f81c 	bl	8000ca4 <__aeabi_fdiv>
 800ec6c:	1c03      	adds	r3, r0, #0
 800ec6e:	1c18      	adds	r0, r3, #0
 800ec70:	f7f4 fe10 	bl	8003894 <__aeabi_f2d>
 800ec74:	0002      	movs	r2, r0
 800ec76:	000b      	movs	r3, r1
 800ec78:	484c      	ldr	r0, [pc, #304]	@ (800edac <sen5x_printvalues+0x1d8>)
 800ec7a:	494a      	ldr	r1, [pc, #296]	@ (800eda4 <sen5x_printvalues+0x1d0>)
 800ec7c:	9200      	str	r2, [sp, #0]
 800ec7e:	9301      	str	r3, [sp, #4]
 800ec80:	0002      	movs	r2, r0
 800ec82:	2002      	movs	r0, #2
 800ec84:	f005 f8da 	bl	8013e3c <CreateLine>
  }
  if (sen5x_data.mass_concentration_pm10p0 != 0xFFFF) {
 800ec88:	4b42      	ldr	r3, [pc, #264]	@ (800ed94 <sen5x_printvalues+0x1c0>)
 800ec8a:	88db      	ldrh	r3, [r3, #6]
 800ec8c:	4a42      	ldr	r2, [pc, #264]	@ (800ed98 <sen5x_printvalues+0x1c4>)
 800ec8e:	4293      	cmp	r3, r2
 800ec90:	d017      	beq.n	800ecc2 <sen5x_printvalues+0xee>
        Info("Mass concentration pm10p0: %.1f µg/m³", sen5x_data.mass_concentration_pm10p0 / 10.0f);
 800ec92:	4b40      	ldr	r3, [pc, #256]	@ (800ed94 <sen5x_printvalues+0x1c0>)
 800ec94:	88db      	ldrh	r3, [r3, #6]
 800ec96:	0018      	movs	r0, r3
 800ec98:	f7f2 fdc6 	bl	8001828 <__aeabi_i2f>
 800ec9c:	1c03      	adds	r3, r0, #0
 800ec9e:	493f      	ldr	r1, [pc, #252]	@ (800ed9c <sen5x_printvalues+0x1c8>)
 800eca0:	1c18      	adds	r0, r3, #0
 800eca2:	f7f1 ffff 	bl	8000ca4 <__aeabi_fdiv>
 800eca6:	1c03      	adds	r3, r0, #0
 800eca8:	1c18      	adds	r0, r3, #0
 800ecaa:	f7f4 fdf3 	bl	8003894 <__aeabi_f2d>
 800ecae:	0002      	movs	r2, r0
 800ecb0:	000b      	movs	r3, r1
 800ecb2:	483f      	ldr	r0, [pc, #252]	@ (800edb0 <sen5x_printvalues+0x1dc>)
 800ecb4:	493b      	ldr	r1, [pc, #236]	@ (800eda4 <sen5x_printvalues+0x1d0>)
 800ecb6:	9200      	str	r2, [sp, #0]
 800ecb8:	9301      	str	r3, [sp, #4]
 800ecba:	0002      	movs	r2, r0
 800ecbc:	2002      	movs	r0, #2
 800ecbe:	f005 f8bd 	bl	8013e3c <CreateLine>
  }
  if (sen5x_data.ambient_humidity != 0x7fff) {
 800ecc2:	4b34      	ldr	r3, [pc, #208]	@ (800ed94 <sen5x_printvalues+0x1c0>)
 800ecc4:	2208      	movs	r2, #8
 800ecc6:	5e9b      	ldrsh	r3, [r3, r2]
 800ecc8:	4a3a      	ldr	r2, [pc, #232]	@ (800edb4 <sen5x_printvalues+0x1e0>)
 800ecca:	4293      	cmp	r3, r2
 800eccc:	d018      	beq.n	800ed00 <sen5x_printvalues+0x12c>
        Info("sen5x Ambient humidity: %.1f %%RH", sen5x_data.ambient_humidity / 100.0f);
 800ecce:	4b31      	ldr	r3, [pc, #196]	@ (800ed94 <sen5x_printvalues+0x1c0>)
 800ecd0:	2208      	movs	r2, #8
 800ecd2:	5e9b      	ldrsh	r3, [r3, r2]
 800ecd4:	0018      	movs	r0, r3
 800ecd6:	f7f2 fda7 	bl	8001828 <__aeabi_i2f>
 800ecda:	1c03      	adds	r3, r0, #0
 800ecdc:	4936      	ldr	r1, [pc, #216]	@ (800edb8 <sen5x_printvalues+0x1e4>)
 800ecde:	1c18      	adds	r0, r3, #0
 800ece0:	f7f1 ffe0 	bl	8000ca4 <__aeabi_fdiv>
 800ece4:	1c03      	adds	r3, r0, #0
 800ece6:	1c18      	adds	r0, r3, #0
 800ece8:	f7f4 fdd4 	bl	8003894 <__aeabi_f2d>
 800ecec:	0002      	movs	r2, r0
 800ecee:	000b      	movs	r3, r1
 800ecf0:	4832      	ldr	r0, [pc, #200]	@ (800edbc <sen5x_printvalues+0x1e8>)
 800ecf2:	492c      	ldr	r1, [pc, #176]	@ (800eda4 <sen5x_printvalues+0x1d0>)
 800ecf4:	9200      	str	r2, [sp, #0]
 800ecf6:	9301      	str	r3, [sp, #4]
 800ecf8:	0002      	movs	r2, r0
 800ecfa:	2002      	movs	r0, #2
 800ecfc:	f005 f89e 	bl	8013e3c <CreateLine>
  }
  if (sen5x_data.ambient_temperature != 0x7fff) {
 800ed00:	4b24      	ldr	r3, [pc, #144]	@ (800ed94 <sen5x_printvalues+0x1c0>)
 800ed02:	220a      	movs	r2, #10
 800ed04:	5e9b      	ldrsh	r3, [r3, r2]
 800ed06:	4a2b      	ldr	r2, [pc, #172]	@ (800edb4 <sen5x_printvalues+0x1e0>)
 800ed08:	4293      	cmp	r3, r2
 800ed0a:	d018      	beq.n	800ed3e <sen5x_printvalues+0x16a>
        Info("sen5x Ambient temperature: %.1f °C", sen5x_data.ambient_temperature / 200.0f);
 800ed0c:	4b21      	ldr	r3, [pc, #132]	@ (800ed94 <sen5x_printvalues+0x1c0>)
 800ed0e:	220a      	movs	r2, #10
 800ed10:	5e9b      	ldrsh	r3, [r3, r2]
 800ed12:	0018      	movs	r0, r3
 800ed14:	f7f2 fd88 	bl	8001828 <__aeabi_i2f>
 800ed18:	1c03      	adds	r3, r0, #0
 800ed1a:	4929      	ldr	r1, [pc, #164]	@ (800edc0 <sen5x_printvalues+0x1ec>)
 800ed1c:	1c18      	adds	r0, r3, #0
 800ed1e:	f7f1 ffc1 	bl	8000ca4 <__aeabi_fdiv>
 800ed22:	1c03      	adds	r3, r0, #0
 800ed24:	1c18      	adds	r0, r3, #0
 800ed26:	f7f4 fdb5 	bl	8003894 <__aeabi_f2d>
 800ed2a:	0002      	movs	r2, r0
 800ed2c:	000b      	movs	r3, r1
 800ed2e:	4825      	ldr	r0, [pc, #148]	@ (800edc4 <sen5x_printvalues+0x1f0>)
 800ed30:	491c      	ldr	r1, [pc, #112]	@ (800eda4 <sen5x_printvalues+0x1d0>)
 800ed32:	9200      	str	r2, [sp, #0]
 800ed34:	9301      	str	r3, [sp, #4]
 800ed36:	0002      	movs	r2, r0
 800ed38:	2002      	movs	r0, #2
 800ed3a:	f005 f87f 	bl	8013e3c <CreateLine>
  }
  if (sen5x_data.voc_index != 0x7fff) {
 800ed3e:	4b15      	ldr	r3, [pc, #84]	@ (800ed94 <sen5x_printvalues+0x1c0>)
 800ed40:	220c      	movs	r2, #12
 800ed42:	5e9b      	ldrsh	r3, [r3, r2]
 800ed44:	4a1b      	ldr	r2, [pc, #108]	@ (800edb4 <sen5x_printvalues+0x1e0>)
 800ed46:	4293      	cmp	r3, r2
 800ed48:	d00d      	beq.n	800ed66 <sen5x_printvalues+0x192>
        Info("sen55 VOC index: %d", sen5x_data.voc_index / 10);
 800ed4a:	4b12      	ldr	r3, [pc, #72]	@ (800ed94 <sen5x_printvalues+0x1c0>)
 800ed4c:	220c      	movs	r2, #12
 800ed4e:	5e9b      	ldrsh	r3, [r3, r2]
 800ed50:	210a      	movs	r1, #10
 800ed52:	0018      	movs	r0, r3
 800ed54:	f7f1 fab0 	bl	80002b8 <__divsi3>
 800ed58:	0003      	movs	r3, r0
 800ed5a:	b21b      	sxth	r3, r3
 800ed5c:	4a1a      	ldr	r2, [pc, #104]	@ (800edc8 <sen5x_printvalues+0x1f4>)
 800ed5e:	4911      	ldr	r1, [pc, #68]	@ (800eda4 <sen5x_printvalues+0x1d0>)
 800ed60:	2002      	movs	r0, #2
 800ed62:	f005 f86b 	bl	8013e3c <CreateLine>
  }
  if (sen5x_data.nox_index != 0x7fff) {
 800ed66:	4b0b      	ldr	r3, [pc, #44]	@ (800ed94 <sen5x_printvalues+0x1c0>)
 800ed68:	220e      	movs	r2, #14
 800ed6a:	5e9b      	ldrsh	r3, [r3, r2]
 800ed6c:	4a11      	ldr	r2, [pc, #68]	@ (800edb4 <sen5x_printvalues+0x1e0>)
 800ed6e:	4293      	cmp	r3, r2
 800ed70:	d00d      	beq.n	800ed8e <sen5x_printvalues+0x1ba>
        Info("sen55 NOx index: %d", sen5x_data.nox_index / 10);
 800ed72:	4b08      	ldr	r3, [pc, #32]	@ (800ed94 <sen5x_printvalues+0x1c0>)
 800ed74:	220e      	movs	r2, #14
 800ed76:	5e9b      	ldrsh	r3, [r3, r2]
 800ed78:	210a      	movs	r1, #10
 800ed7a:	0018      	movs	r0, r3
 800ed7c:	f7f1 fa9c 	bl	80002b8 <__divsi3>
 800ed80:	0003      	movs	r3, r0
 800ed82:	b21b      	sxth	r3, r3
 800ed84:	4a11      	ldr	r2, [pc, #68]	@ (800edcc <sen5x_printvalues+0x1f8>)
 800ed86:	4907      	ldr	r1, [pc, #28]	@ (800eda4 <sen5x_printvalues+0x1d0>)
 800ed88:	2002      	movs	r0, #2
 800ed8a:	f005 f857 	bl	8013e3c <CreateLine>
  }
}
 800ed8e:	46c0      	nop			@ (mov r8, r8)
 800ed90:	46bd      	mov	sp, r7
 800ed92:	bd80      	pop	{r7, pc}
 800ed94:	200011d0 	.word	0x200011d0
 800ed98:	0000ffff 	.word	0x0000ffff
 800ed9c:	41200000 	.word	0x41200000
 800eda0:	0802d2c8 	.word	0x0802d2c8
 800eda4:	0802cf10 	.word	0x0802cf10
 800eda8:	0802d2f0 	.word	0x0802d2f0
 800edac:	0802d318 	.word	0x0802d318
 800edb0:	0802d340 	.word	0x0802d340
 800edb4:	00007fff 	.word	0x00007fff
 800edb8:	42c80000 	.word	0x42c80000
 800edbc:	0802d368 	.word	0x0802d368
 800edc0:	43480000 	.word	0x43480000
 800edc4:	0802d38c 	.word	0x0802d38c
 800edc8:	0802d3b0 	.word	0x0802d3b0
 800edcc:	0802d3c4 	.word	0x0802d3c4

0800edd0 <sen5xStore>:

void sen5xStore() {
 800edd0:	b5b0      	push	{r4, r5, r7, lr}
 800edd2:	af00      	add	r7, sp, #0
  if (sen5x_data.mass_concentration_pm1p0 != 0xFFFF) {
 800edd4:	4b41      	ldr	r3, [pc, #260]	@ (800eedc <sen5xStore+0x10c>)
 800edd6:	881b      	ldrh	r3, [r3, #0]
 800edd8:	4a41      	ldr	r2, [pc, #260]	@ (800eee0 <sen5xStore+0x110>)
 800edda:	4293      	cmp	r3, r2
 800eddc:	d004      	beq.n	800ede8 <sen5xStore+0x18>
    setPM1p0(sen5x_data.mass_concentration_pm1p0);
 800edde:	4b3f      	ldr	r3, [pc, #252]	@ (800eedc <sen5xStore+0x10c>)
 800ede0:	881b      	ldrh	r3, [r3, #0]
 800ede2:	0018      	movs	r0, r3
 800ede4:	f7f5 feee 	bl	8004bc4 <setPM1p0>
  }
  if (sen5x_data.mass_concentration_pm2p5 != 0xFFFF) {
 800ede8:	4b3c      	ldr	r3, [pc, #240]	@ (800eedc <sen5xStore+0x10c>)
 800edea:	885b      	ldrh	r3, [r3, #2]
 800edec:	4a3c      	ldr	r2, [pc, #240]	@ (800eee0 <sen5xStore+0x110>)
 800edee:	4293      	cmp	r3, r2
 800edf0:	d004      	beq.n	800edfc <sen5xStore+0x2c>
    setPM2p5(sen5x_data.mass_concentration_pm2p5);
 800edf2:	4b3a      	ldr	r3, [pc, #232]	@ (800eedc <sen5xStore+0x10c>)
 800edf4:	885b      	ldrh	r3, [r3, #2]
 800edf6:	0018      	movs	r0, r3
 800edf8:	f7f5 ff10 	bl	8004c1c <setPM2p5>
  }
  if (sen5x_data.mass_concentration_pm4p0 != 0xFFFF) {
 800edfc:	4b37      	ldr	r3, [pc, #220]	@ (800eedc <sen5xStore+0x10c>)
 800edfe:	889b      	ldrh	r3, [r3, #4]
 800ee00:	4a37      	ldr	r2, [pc, #220]	@ (800eee0 <sen5xStore+0x110>)
 800ee02:	4293      	cmp	r3, r2
 800ee04:	d004      	beq.n	800ee10 <sen5xStore+0x40>
    setPM4p0(sen5x_data.mass_concentration_pm4p0);
 800ee06:	4b35      	ldr	r3, [pc, #212]	@ (800eedc <sen5xStore+0x10c>)
 800ee08:	889b      	ldrh	r3, [r3, #4]
 800ee0a:	0018      	movs	r0, r3
 800ee0c:	f7f5 ff32 	bl	8004c74 <setPM4p0>
  }
  if (sen5x_data.mass_concentration_pm10p0 != 0xFFFF) {
 800ee10:	4b32      	ldr	r3, [pc, #200]	@ (800eedc <sen5xStore+0x10c>)
 800ee12:	88db      	ldrh	r3, [r3, #6]
 800ee14:	4a32      	ldr	r2, [pc, #200]	@ (800eee0 <sen5xStore+0x110>)
 800ee16:	4293      	cmp	r3, r2
 800ee18:	d004      	beq.n	800ee24 <sen5xStore+0x54>
    setPM10(sen5x_data.mass_concentration_pm10p0);
 800ee1a:	4b30      	ldr	r3, [pc, #192]	@ (800eedc <sen5xStore+0x10c>)
 800ee1c:	88db      	ldrh	r3, [r3, #6]
 800ee1e:	0018      	movs	r0, r3
 800ee20:	f7f5 ff54 	bl	8004ccc <setPM10>
  }
  if (((product_name[4] == '4') || (product_name[4] == '5'))) {
 800ee24:	4b2f      	ldr	r3, [pc, #188]	@ (800eee4 <sen5xStore+0x114>)
 800ee26:	791b      	ldrb	r3, [r3, #4]
 800ee28:	2b34      	cmp	r3, #52	@ 0x34
 800ee2a:	d003      	beq.n	800ee34 <sen5xStore+0x64>
 800ee2c:	4b2d      	ldr	r3, [pc, #180]	@ (800eee4 <sen5xStore+0x114>)
 800ee2e:	791b      	ldrb	r3, [r3, #4]
 800ee30:	2b35      	cmp	r3, #53	@ 0x35
 800ee32:	d14f      	bne.n	800eed4 <sen5xStore+0x104>
    SetSEN545temphum(sen5x_data.ambient_temperature, sen5x_data.ambient_humidity);
 800ee34:	4b29      	ldr	r3, [pc, #164]	@ (800eedc <sen5xStore+0x10c>)
 800ee36:	220a      	movs	r2, #10
 800ee38:	5e9b      	ldrsh	r3, [r3, r2]
 800ee3a:	0018      	movs	r0, r3
 800ee3c:	f7f2 fcf4 	bl	8001828 <__aeabi_i2f>
 800ee40:	1c04      	adds	r4, r0, #0
 800ee42:	4b26      	ldr	r3, [pc, #152]	@ (800eedc <sen5xStore+0x10c>)
 800ee44:	2208      	movs	r2, #8
 800ee46:	5e9b      	ldrsh	r3, [r3, r2]
 800ee48:	0018      	movs	r0, r3
 800ee4a:	f7f2 fced 	bl	8001828 <__aeabi_i2f>
 800ee4e:	1c03      	adds	r3, r0, #0
 800ee50:	1c19      	adds	r1, r3, #0
 800ee52:	1c20      	adds	r0, r4, #0
 800ee54:	f7f5 ff84 	bl	8004d60 <SetSEN545temphum>
    if (!VOCNOx || usbPluggedIn) {
 800ee58:	4b23      	ldr	r3, [pc, #140]	@ (800eee8 <sen5xStore+0x118>)
 800ee5a:	781b      	ldrb	r3, [r3, #0]
 800ee5c:	2201      	movs	r2, #1
 800ee5e:	4053      	eors	r3, r2
 800ee60:	b2db      	uxtb	r3, r3
 800ee62:	2b00      	cmp	r3, #0
 800ee64:	d103      	bne.n	800ee6e <sen5xStore+0x9e>
 800ee66:	4b21      	ldr	r3, [pc, #132]	@ (800eeec <sen5xStore+0x11c>)
 800ee68:	781b      	ldrb	r3, [r3, #0]
 800ee6a:	2b00      	cmp	r3, #0
 800ee6c:	d032      	beq.n	800eed4 <sen5xStore+0x104>
      if (sen5x_data.voc_index != 0x7fff) {
 800ee6e:	4b1b      	ldr	r3, [pc, #108]	@ (800eedc <sen5xStore+0x10c>)
 800ee70:	220c      	movs	r2, #12
 800ee72:	5e9b      	ldrsh	r3, [r3, r2]
 800ee74:	4a1e      	ldr	r2, [pc, #120]	@ (800eef0 <sen5xStore+0x120>)
 800ee76:	4293      	cmp	r3, r2
 800ee78:	d019      	beq.n	800eeae <sen5xStore+0xde>
        SetVOCindicator(sen5x_data.voc_index / 10);
 800ee7a:	4b18      	ldr	r3, [pc, #96]	@ (800eedc <sen5xStore+0x10c>)
 800ee7c:	220c      	movs	r2, #12
 800ee7e:	5e9b      	ldrsh	r3, [r3, r2]
 800ee80:	210a      	movs	r1, #10
 800ee82:	0018      	movs	r0, r3
 800ee84:	f7f1 fa18 	bl	80002b8 <__divsi3>
 800ee88:	0003      	movs	r3, r0
 800ee8a:	b21b      	sxth	r3, r3
 800ee8c:	b29b      	uxth	r3, r3
 800ee8e:	0018      	movs	r0, r3
 800ee90:	f003 ff56 	bl	8012d40 <SetVOCindicator>
        setVOC(sen5x_data.voc_index / 10);
 800ee94:	4b11      	ldr	r3, [pc, #68]	@ (800eedc <sen5xStore+0x10c>)
 800ee96:	220c      	movs	r2, #12
 800ee98:	5e9b      	ldrsh	r3, [r3, r2]
 800ee9a:	210a      	movs	r1, #10
 800ee9c:	0018      	movs	r0, r3
 800ee9e:	f7f1 fa0b 	bl	80002b8 <__divsi3>
 800eea2:	0003      	movs	r3, r0
 800eea4:	b21b      	sxth	r3, r3
 800eea6:	b29b      	uxth	r3, r3
 800eea8:	0018      	movs	r0, r3
 800eeaa:	f7f5 fe03 	bl	8004ab4 <setVOC>
      }
      if (sen5x_data.nox_index != 0x7fff) {
 800eeae:	4b0b      	ldr	r3, [pc, #44]	@ (800eedc <sen5xStore+0x10c>)
 800eeb0:	220e      	movs	r2, #14
 800eeb2:	5e9b      	ldrsh	r3, [r3, r2]
 800eeb4:	4a0e      	ldr	r2, [pc, #56]	@ (800eef0 <sen5xStore+0x120>)
 800eeb6:	4293      	cmp	r3, r2
 800eeb8:	d00c      	beq.n	800eed4 <sen5xStore+0x104>
        setNOx(sen5x_data.nox_index / 10);
 800eeba:	4b08      	ldr	r3, [pc, #32]	@ (800eedc <sen5xStore+0x10c>)
 800eebc:	220e      	movs	r2, #14
 800eebe:	5e9b      	ldrsh	r3, [r3, r2]
 800eec0:	210a      	movs	r1, #10
 800eec2:	0018      	movs	r0, r3
 800eec4:	f7f1 f9f8 	bl	80002b8 <__divsi3>
 800eec8:	0003      	movs	r3, r0
 800eeca:	b21b      	sxth	r3, r3
 800eecc:	b29b      	uxth	r3, r3
 800eece:	0018      	movs	r0, r3
 800eed0:	f7f5 ff28 	bl	8004d24 <setNOx>
      }
    }
  }
    //    Debug("pm2p5 = %d, pm10p0 = %d, s5xvoci = %d, s5xnoxi = %d", pm2p5, pm10p0, s5xvoci, s5xnoxi);
}
 800eed4:	46c0      	nop			@ (mov r8, r8)
 800eed6:	46bd      	mov	sp, r7
 800eed8:	bdb0      	pop	{r4, r5, r7, pc}
 800eeda:	46c0      	nop			@ (mov r8, r8)
 800eedc:	200011d0 	.word	0x200011d0
 800eee0:	0000ffff 	.word	0x0000ffff
 800eee4:	200011c0 	.word	0x200011c0
 800eee8:	200011be 	.word	0x200011be
 800eeec:	2000214d 	.word	0x2000214d
 800eef0:	00007fff 	.word	0x00007fff

0800eef4 <sensirion_i2c_hal_read>:
 * @param data    pointer to the buffer where the data is to be stored
 * @param count   number of bytes to read from I2C and store in the buffer
 * @returns 0 on success, error code otherwise
 */

int8_t sensirion_i2c_hal_read(uint8_t address, uint8_t* data, uint16_t count) {
 800eef4:	b590      	push	{r4, r7, lr}
 800eef6:	b085      	sub	sp, #20
 800eef8:	af02      	add	r7, sp, #8
 800eefa:	6039      	str	r1, [r7, #0]
 800eefc:	0011      	movs	r1, r2
 800eefe:	1dfb      	adds	r3, r7, #7
 800ef00:	1c02      	adds	r2, r0, #0
 800ef02:	701a      	strb	r2, [r3, #0]
 800ef04:	1d3b      	adds	r3, r7, #4
 800ef06:	1c0a      	adds	r2, r1, #0
 800ef08:	801a      	strh	r2, [r3, #0]
  return (int8_t)HAL_I2C_Master_Receive(&hi2c2, (uint16_t)(address << 1), data, count, 100);
 800ef0a:	1dfb      	adds	r3, r7, #7
 800ef0c:	781b      	ldrb	r3, [r3, #0]
 800ef0e:	b29b      	uxth	r3, r3
 800ef10:	18db      	adds	r3, r3, r3
 800ef12:	b299      	uxth	r1, r3
 800ef14:	1d3b      	adds	r3, r7, #4
 800ef16:	881b      	ldrh	r3, [r3, #0]
 800ef18:	683a      	ldr	r2, [r7, #0]
 800ef1a:	4805      	ldr	r0, [pc, #20]	@ (800ef30 <sensirion_i2c_hal_read+0x3c>)
 800ef1c:	2464      	movs	r4, #100	@ 0x64
 800ef1e:	9400      	str	r4, [sp, #0]
 800ef20:	f007 f94e 	bl	80161c0 <HAL_I2C_Master_Receive>
 800ef24:	0003      	movs	r3, r0
 800ef26:	b25b      	sxtb	r3, r3
}
 800ef28:	0018      	movs	r0, r3
 800ef2a:	46bd      	mov	sp, r7
 800ef2c:	b003      	add	sp, #12
 800ef2e:	bd90      	pop	{r4, r7, pc}
 800ef30:	20000f8c 	.word	0x20000f8c

0800ef34 <sensirion_i2c_hal_write>:
 * @param data    pointer to the buffer containing the data to write
 * @param count   number of bytes to read from the buffer and send over I2C
 * @returns 0 on success, error code otherwise
 */

int8_t sensirion_i2c_hal_write(uint8_t address, const uint8_t* data, uint16_t count) {
 800ef34:	b590      	push	{r4, r7, lr}
 800ef36:	b085      	sub	sp, #20
 800ef38:	af02      	add	r7, sp, #8
 800ef3a:	6039      	str	r1, [r7, #0]
 800ef3c:	0011      	movs	r1, r2
 800ef3e:	1dfb      	adds	r3, r7, #7
 800ef40:	1c02      	adds	r2, r0, #0
 800ef42:	701a      	strb	r2, [r3, #0]
 800ef44:	1d3b      	adds	r3, r7, #4
 800ef46:	1c0a      	adds	r2, r1, #0
 800ef48:	801a      	strh	r2, [r3, #0]
  return (int8_t)HAL_I2C_Master_Transmit(&hi2c2, (uint16_t)(address << 1), (uint8_t*)data, count, 100);
 800ef4a:	1dfb      	adds	r3, r7, #7
 800ef4c:	781b      	ldrb	r3, [r3, #0]
 800ef4e:	b29b      	uxth	r3, r3
 800ef50:	18db      	adds	r3, r3, r3
 800ef52:	b299      	uxth	r1, r3
 800ef54:	1d3b      	adds	r3, r7, #4
 800ef56:	881b      	ldrh	r3, [r3, #0]
 800ef58:	683a      	ldr	r2, [r7, #0]
 800ef5a:	4805      	ldr	r0, [pc, #20]	@ (800ef70 <sensirion_i2c_hal_write+0x3c>)
 800ef5c:	2464      	movs	r4, #100	@ 0x64
 800ef5e:	9400      	str	r4, [sp, #0]
 800ef60:	f007 f826 	bl	8015fb0 <HAL_I2C_Master_Transmit>
 800ef64:	0003      	movs	r3, r0
 800ef66:	b25b      	sxtb	r3, r3
}
 800ef68:	0018      	movs	r0, r3
 800ef6a:	46bd      	mov	sp, r7
 800ef6c:	b003      	add	sp, #12
 800ef6e:	bd90      	pop	{r4, r7, pc}
 800ef70:	20000f8c 	.word	0x20000f8c

0800ef74 <sensirion_i2c_hal_sleep_usec>:
 * execution for at least the given time, but may also sleep longer.
 *
 * @param useconds the sleep time in microseconds
 */

void sensirion_i2c_hal_sleep_usec(uint32_t useconds) {
 800ef74:	b580      	push	{r7, lr}
 800ef76:	b084      	sub	sp, #16
 800ef78:	af00      	add	r7, sp, #0
 800ef7a:	6078      	str	r0, [r7, #4]
  uint32_t msec = useconds / 1000;
 800ef7c:	687b      	ldr	r3, [r7, #4]
 800ef7e:	22fa      	movs	r2, #250	@ 0xfa
 800ef80:	0091      	lsls	r1, r2, #2
 800ef82:	0018      	movs	r0, r3
 800ef84:	f7f1 f90e 	bl	80001a4 <__udivsi3>
 800ef88:	0003      	movs	r3, r0
 800ef8a:	60fb      	str	r3, [r7, #12]
  if (useconds % 1000 > 0) {
 800ef8c:	687b      	ldr	r3, [r7, #4]
 800ef8e:	22fa      	movs	r2, #250	@ 0xfa
 800ef90:	0091      	lsls	r1, r2, #2
 800ef92:	0018      	movs	r0, r3
 800ef94:	f7f1 f98c 	bl	80002b0 <__aeabi_uidivmod>
 800ef98:	1e0b      	subs	r3, r1, #0
 800ef9a:	d002      	beq.n	800efa2 <sensirion_i2c_hal_sleep_usec+0x2e>
    msec++;
 800ef9c:	68fb      	ldr	r3, [r7, #12]
 800ef9e:	3301      	adds	r3, #1
 800efa0:	60fb      	str	r3, [r7, #12]
  }
  HAL_Delay(msec);
 800efa2:	68fb      	ldr	r3, [r7, #12]
 800efa4:	0018      	movs	r0, r3
 800efa6:	f005 fccb 	bl	8014940 <HAL_Delay>
}
 800efaa:	46c0      	nop			@ (mov r8, r8)
 800efac:	46bd      	mov	sp, r7
 800efae:	b004      	add	sp, #16
 800efb0:	bd80      	pop	{r7, pc}
	...

0800efb4 <sen5x_check_for_errors>:

bool sen5x_check_for_errors(void){
 800efb4:	b580      	push	{r7, lr}
 800efb6:	b082      	sub	sp, #8
 800efb8:	af00      	add	r7, sp, #0
  uint32_t device_status = sen5x_read_device_status(&device_status);
 800efba:	1d3b      	adds	r3, r7, #4
 800efbc:	0018      	movs	r0, r3
 800efbe:	f000 fd2b 	bl	800fa18 <sen5x_read_device_status>
 800efc2:	0003      	movs	r3, r0
 800efc4:	607b      	str	r3, [r7, #4]
  if (device_status == 0xD206) {
 800efc6:	687b      	ldr	r3, [r7, #4]
 800efc8:	4a2c      	ldr	r2, [pc, #176]	@ (800f07c <sen5x_check_for_errors+0xc8>)
 800efca:	4293      	cmp	r3, r2
 800efcc:	d107      	bne.n	800efde <sen5x_check_for_errors+0x2a>
    Error("Error reading sen5x device status register causes by I2C error");
 800efce:	4a2c      	ldr	r2, [pc, #176]	@ (800f080 <sen5x_check_for_errors+0xcc>)
 800efd0:	4b2c      	ldr	r3, [pc, #176]	@ (800f084 <sen5x_check_for_errors+0xd0>)
 800efd2:	0019      	movs	r1, r3
 800efd4:	2001      	movs	r0, #1
 800efd6:	f004 ff31 	bl	8013e3c <CreateLine>
    return true;
 800efda:	2301      	movs	r3, #1
 800efdc:	e049      	b.n	800f072 <sen5x_check_for_errors+0xbe>
  }
  if (device_status == 0) {
 800efde:	687b      	ldr	r3, [r7, #4]
 800efe0:	2b00      	cmp	r3, #0
 800efe2:	d101      	bne.n	800efe8 <sen5x_check_for_errors+0x34>
    return false;
 800efe4:	2300      	movs	r3, #0
 800efe6:	e044      	b.n	800f072 <sen5x_check_for_errors+0xbe>
  }
  if (device_status & SEN5X_FAN_SPEED_ERROR) {
 800efe8:	687a      	ldr	r2, [r7, #4]
 800efea:	2380      	movs	r3, #128	@ 0x80
 800efec:	039b      	lsls	r3, r3, #14
 800efee:	4013      	ands	r3, r2
 800eff0:	d005      	beq.n	800effe <sen5x_check_for_errors+0x4a>
    Debug("sen5x Fan speed out of range");
 800eff2:	4a25      	ldr	r2, [pc, #148]	@ (800f088 <sen5x_check_for_errors+0xd4>)
 800eff4:	4b25      	ldr	r3, [pc, #148]	@ (800f08c <sen5x_check_for_errors+0xd8>)
 800eff6:	0019      	movs	r1, r3
 800eff8:	2003      	movs	r0, #3
 800effa:	f004 ff1f 	bl	8013e3c <CreateLine>
  }
  if (device_status & SEN5X_FAN_CLEANING) {
 800effe:	687a      	ldr	r2, [r7, #4]
 800f000:	2380      	movs	r3, #128	@ 0x80
 800f002:	031b      	lsls	r3, r3, #12
 800f004:	4013      	ands	r3, r2
 800f006:	d005      	beq.n	800f014 <sen5x_check_for_errors+0x60>
    Debug("sen5x Fan cleaning active");
 800f008:	4a21      	ldr	r2, [pc, #132]	@ (800f090 <sen5x_check_for_errors+0xdc>)
 800f00a:	4b20      	ldr	r3, [pc, #128]	@ (800f08c <sen5x_check_for_errors+0xd8>)
 800f00c:	0019      	movs	r1, r3
 800f00e:	2003      	movs	r0, #3
 800f010:	f004 ff14 	bl	8013e3c <CreateLine>
  }
  if (device_status & SEN5X_GAS_SENSOR_ERROR) {
 800f014:	687b      	ldr	r3, [r7, #4]
 800f016:	2280      	movs	r2, #128	@ 0x80
 800f018:	4013      	ands	r3, r2
 800f01a:	d005      	beq.n	800f028 <sen5x_check_for_errors+0x74>
    Debug("sen5x Gas sensor error (VOC & NOx)");
 800f01c:	4a1d      	ldr	r2, [pc, #116]	@ (800f094 <sen5x_check_for_errors+0xe0>)
 800f01e:	4b1b      	ldr	r3, [pc, #108]	@ (800f08c <sen5x_check_for_errors+0xd8>)
 800f020:	0019      	movs	r1, r3
 800f022:	2003      	movs	r0, #3
 800f024:	f004 ff0a 	bl	8013e3c <CreateLine>
  }
  if (device_status & SEN5X_RHT_ERROR) {
 800f028:	687b      	ldr	r3, [r7, #4]
 800f02a:	2240      	movs	r2, #64	@ 0x40
 800f02c:	4013      	ands	r3, r2
 800f02e:	d005      	beq.n	800f03c <sen5x_check_for_errors+0x88>
    Debug("sen5x RHT communication error");
 800f030:	4a19      	ldr	r2, [pc, #100]	@ (800f098 <sen5x_check_for_errors+0xe4>)
 800f032:	4b16      	ldr	r3, [pc, #88]	@ (800f08c <sen5x_check_for_errors+0xd8>)
 800f034:	0019      	movs	r1, r3
 800f036:	2003      	movs	r0, #3
 800f038:	f004 ff00 	bl	8013e3c <CreateLine>
  }
  if (device_status & SEN5X_LASER_ERROR) {
 800f03c:	687b      	ldr	r3, [r7, #4]
 800f03e:	2220      	movs	r2, #32
 800f040:	4013      	ands	r3, r2
 800f042:	d005      	beq.n	800f050 <sen5x_check_for_errors+0x9c>
    Debug("sen5x Laser failure");
 800f044:	4a15      	ldr	r2, [pc, #84]	@ (800f09c <sen5x_check_for_errors+0xe8>)
 800f046:	4b11      	ldr	r3, [pc, #68]	@ (800f08c <sen5x_check_for_errors+0xd8>)
 800f048:	0019      	movs	r1, r3
 800f04a:	2003      	movs	r0, #3
 800f04c:	f004 fef6 	bl	8013e3c <CreateLine>
  }
  if (device_status & SEN5X_FAN_BLOCKED_ERROR) {
 800f050:	687b      	ldr	r3, [r7, #4]
 800f052:	2210      	movs	r2, #16
 800f054:	4013      	ands	r3, r2
 800f056:	d005      	beq.n	800f064 <sen5x_check_for_errors+0xb0>
    Debug("sen5x Fan failure, fan is mechanically blocked or broken.");
 800f058:	4a11      	ldr	r2, [pc, #68]	@ (800f0a0 <sen5x_check_for_errors+0xec>)
 800f05a:	4b0c      	ldr	r3, [pc, #48]	@ (800f08c <sen5x_check_for_errors+0xd8>)
 800f05c:	0019      	movs	r1, r3
 800f05e:	2003      	movs	r0, #3
 800f060:	f004 feec 	bl	8013e3c <CreateLine>
  }
  Debug("Content of SEN5x Device Status Register: 0x%08X", device_status);
 800f064:	687b      	ldr	r3, [r7, #4]
 800f066:	4a0f      	ldr	r2, [pc, #60]	@ (800f0a4 <sen5x_check_for_errors+0xf0>)
 800f068:	4908      	ldr	r1, [pc, #32]	@ (800f08c <sen5x_check_for_errors+0xd8>)
 800f06a:	2003      	movs	r0, #3
 800f06c:	f004 fee6 	bl	8013e3c <CreateLine>
  return true;
 800f070:	2301      	movs	r3, #1
}
 800f072:	0018      	movs	r0, r3
 800f074:	46bd      	mov	sp, r7
 800f076:	b002      	add	sp, #8
 800f078:	bd80      	pop	{r7, pc}
 800f07a:	46c0      	nop			@ (mov r8, r8)
 800f07c:	0000d206 	.word	0x0000d206
 800f080:	0802d3d8 	.word	0x0802d3d8
 800f084:	0802cf7c 	.word	0x0802cf7c
 800f088:	0802d418 	.word	0x0802d418
 800f08c:	0802cf50 	.word	0x0802cf50
 800f090:	0802d438 	.word	0x0802d438
 800f094:	0802d454 	.word	0x0802d454
 800f098:	0802d478 	.word	0x0802d478
 800f09c:	0802d498 	.word	0x0802d498
 800f0a0:	0802d4ac 	.word	0x0802d4ac
 800f0a4:	0802d4e8 	.word	0x0802d4e8

0800f0a8 <set_light_on_state>:

void set_light_on_state(void) {
 800f0a8:	b580      	push	{r7, lr}
 800f0aa:	af00      	add	r7, sp, #0
  if (!sen5x_On) {
 800f0ac:	4b15      	ldr	r3, [pc, #84]	@ (800f104 <set_light_on_state+0x5c>)
 800f0ae:	781b      	ldrb	r3, [r3, #0]
 800f0b0:	2201      	movs	r2, #1
 800f0b2:	4053      	eors	r3, r2
 800f0b4:	b2db      	uxtb	r3, r3
 800f0b6:	2b00      	cmp	r3, #0
 800f0b8:	d008      	beq.n	800f0cc <set_light_on_state+0x24>
    sen5x_Power_On();
 800f0ba:	f7ff faf5 	bl	800e6a8 <sen5x_Power_On>
    Debug("sen5x powered on, warming up.");
 800f0be:	4a12      	ldr	r2, [pc, #72]	@ (800f108 <set_light_on_state+0x60>)
 800f0c0:	4b12      	ldr	r3, [pc, #72]	@ (800f10c <set_light_on_state+0x64>)
 800f0c2:	0019      	movs	r1, r3
 800f0c4:	2003      	movs	r0, #3
 800f0c6:	f004 feb9 	bl	8013e3c <CreateLine>
 800f0ca:	e00a      	b.n	800f0e2 <set_light_on_state+0x3a>
  }
  else {
    sen5xReadTimer = HAL_GetTick();
 800f0cc:	f005 fc2e 	bl	801492c <HAL_GetTick>
 800f0d0:	0002      	movs	r2, r0
 800f0d2:	4b0f      	ldr	r3, [pc, #60]	@ (800f110 <set_light_on_state+0x68>)
 800f0d4:	601a      	str	r2, [r3, #0]
    Debug("sen5x already powered");
 800f0d6:	4a0f      	ldr	r2, [pc, #60]	@ (800f114 <set_light_on_state+0x6c>)
 800f0d8:	4b0c      	ldr	r3, [pc, #48]	@ (800f10c <set_light_on_state+0x64>)
 800f0da:	0019      	movs	r1, r3
 800f0dc:	2003      	movs	r0, #3
 800f0de:	f004 fead 	bl	8013e3c <CreateLine>
  }
  if (sen5x_lightup_measurement()) {  // start selected measurement mode
 800f0e2:	f7ff fc75 	bl	800e9d0 <sen5x_lightup_measurement>
 800f0e6:	1e03      	subs	r3, r0, #0
 800f0e8:	d005      	beq.n	800f0f6 <set_light_on_state+0x4e>
    Error("Error executing sen5x_lightup_measurement()");
 800f0ea:	4a0b      	ldr	r2, [pc, #44]	@ (800f118 <set_light_on_state+0x70>)
 800f0ec:	4b0b      	ldr	r3, [pc, #44]	@ (800f11c <set_light_on_state+0x74>)
 800f0ee:	0019      	movs	r1, r3
 800f0f0:	2001      	movs	r0, #1
 800f0f2:	f004 fea3 	bl	8013e3c <CreateLine>
  }
  PMsamplesState = CHECK_SEN5X;
 800f0f6:	4b0a      	ldr	r3, [pc, #40]	@ (800f120 <set_light_on_state+0x78>)
 800f0f8:	2203      	movs	r2, #3
 800f0fa:	701a      	strb	r2, [r3, #0]
}
 800f0fc:	46c0      	nop			@ (mov r8, r8)
 800f0fe:	46bd      	mov	sp, r7
 800f100:	bd80      	pop	{r7, pc}
 800f102:	46c0      	nop			@ (mov r8, r8)
 800f104:	200011bd 	.word	0x200011bd
 800f108:	0802d518 	.word	0x0802d518
 800f10c:	0802cf50 	.word	0x0802cf50
 800f110:	200011cc 	.word	0x200011cc
 800f114:	0802d538 	.word	0x0802d538
 800f118:	0802d550 	.word	0x0802d550
 800f11c:	0802cf7c 	.word	0x0802cf7c
 800f120:	200000aa 	.word	0x200000aa

0800f124 <sen5x_statemachine>:

void sen5x_statemachine() {
 800f124:	b580      	push	{r7, lr}
 800f126:	b082      	sub	sp, #8
 800f128:	af00      	add	r7, sp, #0
  bool data_ready = false;
 800f12a:	1dfb      	adds	r3, r7, #7
 800f12c:	2200      	movs	r2, #0
 800f12e:	701a      	strb	r2, [r3, #0]
  if (TimestampIsReached(sen5xReadTimer)) {
 800f130:	4b92      	ldr	r3, [pc, #584]	@ (800f37c <sen5x_statemachine+0x258>)
 800f132:	681b      	ldr	r3, [r3, #0]
 800f134:	0018      	movs	r0, r3
 800f136:	f004 fe2b 	bl	8013d90 <TimestampIsReached>
 800f13a:	1e03      	subs	r3, r0, #0
 800f13c:	d100      	bne.n	800f140 <sen5x_statemachine+0x1c>
 800f13e:	e118      	b.n	800f372 <sen5x_statemachine+0x24e>
    switch (PMsamplesState) {
 800f140:	4b8f      	ldr	r3, [pc, #572]	@ (800f380 <sen5x_statemachine+0x25c>)
 800f142:	781b      	ldrb	r3, [r3, #0]
 800f144:	2b05      	cmp	r3, #5
 800f146:	d900      	bls.n	800f14a <sen5x_statemachine+0x26>
 800f148:	e113      	b.n	800f372 <sen5x_statemachine+0x24e>
 800f14a:	009a      	lsls	r2, r3, #2
 800f14c:	4b8d      	ldr	r3, [pc, #564]	@ (800f384 <sen5x_statemachine+0x260>)
 800f14e:	18d3      	adds	r3, r2, r3
 800f150:	681b      	ldr	r3, [r3, #0]
 800f152:	469f      	mov	pc, r3
    case S5X_DISABLED:
      Error("sen5x device is disabled due to too many errors");
 800f154:	4a8c      	ldr	r2, [pc, #560]	@ (800f388 <sen5x_statemachine+0x264>)
 800f156:	4b8d      	ldr	r3, [pc, #564]	@ (800f38c <sen5x_statemachine+0x268>)
 800f158:	0019      	movs	r1, r3
 800f15a:	2001      	movs	r0, #1
 800f15c:	f004 fe6e 	bl	8013e3c <CreateLine>
      SetPMSensorStatus(false);
 800f160:	2000      	movs	r0, #0
 800f162:	f7fe f9f9 	bl	800d558 <SetPMSensorStatus>
      DisablePMSensor();
 800f166:	f7fe f97b 	bl	800d460 <DisablePMSensor>
      sen5xReadTimer = HAL_GetTick() + SEN5X_DISPLAY_DISABLED_MSG; //some more less then ten minutes a message when continue operated.
 800f16a:	f005 fbdf 	bl	801492c <HAL_GetTick>
 800f16e:	0003      	movs	r3, r0
 800f170:	4a87      	ldr	r2, [pc, #540]	@ (800f390 <sen5x_statemachine+0x26c>)
 800f172:	189a      	adds	r2, r3, r2
 800f174:	4b81      	ldr	r3, [pc, #516]	@ (800f37c <sen5x_statemachine+0x258>)
 800f176:	601a      	str	r2, [r3, #0]
      break;
 800f178:	e0fb      	b.n	800f372 <sen5x_statemachine+0x24e>
    case LIGHT_OUT:
      sen5xReadTimer = HAL_GetTick() + SEN5X_STARTUP_DELAY; // wait about 30s when started up
 800f17a:	f005 fbd7 	bl	801492c <HAL_GetTick>
 800f17e:	0003      	movs	r3, r0
 800f180:	4a84      	ldr	r2, [pc, #528]	@ (800f394 <sen5x_statemachine+0x270>)
 800f182:	189a      	adds	r2, r3, r2
 800f184:	4b7d      	ldr	r3, [pc, #500]	@ (800f37c <sen5x_statemachine+0x258>)
 800f186:	601a      	str	r2, [r3, #0]
      set_light_on_state();
 800f188:	f7ff ff8e 	bl	800f0a8 <set_light_on_state>
      break;
 800f18c:	e0f1      	b.n	800f372 <sen5x_statemachine+0x24e>
    case CHECK_SEN5X:
      PMsamplesState = LIGHT_ON;
 800f18e:	4b7c      	ldr	r3, [pc, #496]	@ (800f380 <sen5x_statemachine+0x25c>)
 800f190:	2202      	movs	r2, #2
 800f192:	701a      	strb	r2, [r3, #0]
      if (sen5xErrors > 5) {
 800f194:	4b80      	ldr	r3, [pc, #512]	@ (800f398 <sen5x_statemachine+0x274>)
 800f196:	781b      	ldrb	r3, [r3, #0]
 800f198:	2b05      	cmp	r3, #5
 800f19a:	d905      	bls.n	800f1a8 <sen5x_statemachine+0x84>
        PMsamplesState = S5X_DISABLED;
 800f19c:	4b78      	ldr	r3, [pc, #480]	@ (800f380 <sen5x_statemachine+0x25c>)
 800f19e:	2200      	movs	r2, #0
 800f1a0:	701a      	strb	r2, [r3, #0]
        sen5x_Power_Off();
 800f1a2:	f7ff fab1 	bl	800e708 <sen5x_Power_Off>
            sen5xErrors = 0;
            Debug("sen5xErrors reset");
          }
        }
      }
      break;
 800f1a6:	e0e1      	b.n	800f36c <sen5x_statemachine+0x248>
        if (sen5x_check_for_errors()) {
 800f1a8:	f7ff ff04 	bl	800efb4 <sen5x_check_for_errors>
 800f1ac:	1e03      	subs	r3, r0, #0
 800f1ae:	d028      	beq.n	800f202 <sen5x_statemachine+0xde>
          if (sen5x_device_reset()) {
 800f1b0:	f000 fc84 	bl	800fabc <sen5x_device_reset>
 800f1b4:	1e03      	subs	r3, r0, #0
 800f1b6:	d018      	beq.n	800f1ea <sen5x_statemachine+0xc6>
            Error("Error resetting sen5x");
 800f1b8:	4a78      	ldr	r2, [pc, #480]	@ (800f39c <sen5x_statemachine+0x278>)
 800f1ba:	4b74      	ldr	r3, [pc, #464]	@ (800f38c <sen5x_statemachine+0x268>)
 800f1bc:	0019      	movs	r1, r3
 800f1be:	2001      	movs	r0, #1
 800f1c0:	f004 fe3c 	bl	8013e3c <CreateLine>
            sen5xErrors++;
 800f1c4:	4b74      	ldr	r3, [pc, #464]	@ (800f398 <sen5x_statemachine+0x274>)
 800f1c6:	781b      	ldrb	r3, [r3, #0]
 800f1c8:	3301      	adds	r3, #1
 800f1ca:	b2da      	uxtb	r2, r3
 800f1cc:	4b72      	ldr	r3, [pc, #456]	@ (800f398 <sen5x_statemachine+0x274>)
 800f1ce:	701a      	strb	r2, [r3, #0]
            sen5x_Power_Off();  // switch off sen5x for a full reset
 800f1d0:	f7ff fa9a 	bl	800e708 <sen5x_Power_Off>
            sen5xReadTimer = HAL_GetTick() + SEN5X_STARTUP_DELAY; // wait about 30s when started up
 800f1d4:	f005 fbaa 	bl	801492c <HAL_GetTick>
 800f1d8:	0003      	movs	r3, r0
 800f1da:	4a6e      	ldr	r2, [pc, #440]	@ (800f394 <sen5x_statemachine+0x270>)
 800f1dc:	189a      	adds	r2, r3, r2
 800f1de:	4b67      	ldr	r3, [pc, #412]	@ (800f37c <sen5x_statemachine+0x258>)
 800f1e0:	601a      	str	r2, [r3, #0]
            PMsamplesState = SAMPLES_TAKEN;
 800f1e2:	4b67      	ldr	r3, [pc, #412]	@ (800f380 <sen5x_statemachine+0x25c>)
 800f1e4:	2205      	movs	r2, #5
 800f1e6:	701a      	strb	r2, [r3, #0]
 800f1e8:	e005      	b.n	800f1f6 <sen5x_statemachine+0xd2>
            Info("sen5x reset executed");
 800f1ea:	4a6d      	ldr	r2, [pc, #436]	@ (800f3a0 <sen5x_statemachine+0x27c>)
 800f1ec:	4b6d      	ldr	r3, [pc, #436]	@ (800f3a4 <sen5x_statemachine+0x280>)
 800f1ee:	0019      	movs	r1, r3
 800f1f0:	2002      	movs	r0, #2
 800f1f2:	f004 fe23 	bl	8013e3c <CreateLine>
          sen5xReadTimer = HAL_GetTick();
 800f1f6:	f005 fb99 	bl	801492c <HAL_GetTick>
 800f1fa:	0002      	movs	r2, r0
 800f1fc:	4b5f      	ldr	r3, [pc, #380]	@ (800f37c <sen5x_statemachine+0x258>)
 800f1fe:	601a      	str	r2, [r3, #0]
      break;
 800f200:	e0b4      	b.n	800f36c <sen5x_statemachine+0x248>
          if (sen5xErrors != 0) {
 800f202:	4b65      	ldr	r3, [pc, #404]	@ (800f398 <sen5x_statemachine+0x274>)
 800f204:	781b      	ldrb	r3, [r3, #0]
 800f206:	2b00      	cmp	r3, #0
 800f208:	d100      	bne.n	800f20c <sen5x_statemachine+0xe8>
 800f20a:	e0af      	b.n	800f36c <sen5x_statemachine+0x248>
            sen5xErrors = 0;
 800f20c:	4b62      	ldr	r3, [pc, #392]	@ (800f398 <sen5x_statemachine+0x274>)
 800f20e:	2200      	movs	r2, #0
 800f210:	701a      	strb	r2, [r3, #0]
            Debug("sen5xErrors reset");
 800f212:	4a65      	ldr	r2, [pc, #404]	@ (800f3a8 <sen5x_statemachine+0x284>)
 800f214:	4b65      	ldr	r3, [pc, #404]	@ (800f3ac <sen5x_statemachine+0x288>)
 800f216:	0019      	movs	r1, r3
 800f218:	2003      	movs	r0, #3
 800f21a:	f004 fe0f 	bl	8013e3c <CreateLine>
      break;
 800f21e:	e0a5      	b.n	800f36c <sen5x_statemachine+0x248>
    case LIGHT_ON:
      sen5x_read_data_ready(&data_ready);  // is new data ready in the sensor module?
 800f220:	1dfb      	adds	r3, r7, #7
 800f222:	0018      	movs	r0, r3
 800f224:	f000 f966 	bl	800f4f4 <sen5x_read_data_ready>
      if (data_ready) {
 800f228:	1dfb      	adds	r3, r7, #7
 800f22a:	781b      	ldrb	r3, [r3, #0]
 800f22c:	2b00      	cmp	r3, #0
 800f22e:	d038      	beq.n	800f2a2 <sen5x_statemachine+0x17e>
        SetPMIndicator();
 800f230:	f003 fc28 	bl	8012a84 <SetPMIndicator>
        if (sen5x_read_measurement(&sen5x_data)) {
 800f234:	4b5e      	ldr	r3, [pc, #376]	@ (800f3b0 <sen5x_statemachine+0x28c>)
 800f236:	0018      	movs	r0, r3
 800f238:	f7ff fc70 	bl	800eb1c <sen5x_read_measurement>
 800f23c:	1e03      	subs	r3, r0, #0
 800f23e:	d017      	beq.n	800f270 <sen5x_statemachine+0x14c>
          Error("Error executing sen5x_read_measured_values()");
 800f240:	4a5c      	ldr	r2, [pc, #368]	@ (800f3b4 <sen5x_statemachine+0x290>)
 800f242:	4b52      	ldr	r3, [pc, #328]	@ (800f38c <sen5x_statemachine+0x268>)
 800f244:	0019      	movs	r1, r3
 800f246:	2001      	movs	r0, #1
 800f248:	f004 fdf8 	bl	8013e3c <CreateLine>
          sen5xErrors++;
 800f24c:	4b52      	ldr	r3, [pc, #328]	@ (800f398 <sen5x_statemachine+0x274>)
 800f24e:	781b      	ldrb	r3, [r3, #0]
 800f250:	3301      	adds	r3, #1
 800f252:	b2da      	uxtb	r2, r3
 800f254:	4b50      	ldr	r3, [pc, #320]	@ (800f398 <sen5x_statemachine+0x274>)
 800f256:	701a      	strb	r2, [r3, #0]
          sen5x_Power_Off();  // switch off sen5x for a full reset
 800f258:	f7ff fa56 	bl	800e708 <sen5x_Power_Off>
          sen5xReadTimer = HAL_GetTick() + SEN5X_STARTUP_DELAY; // wait about 30s when started up
 800f25c:	f005 fb66 	bl	801492c <HAL_GetTick>
 800f260:	0003      	movs	r3, r0
 800f262:	4a4c      	ldr	r2, [pc, #304]	@ (800f394 <sen5x_statemachine+0x270>)
 800f264:	189a      	adds	r2, r3, r2
 800f266:	4b45      	ldr	r3, [pc, #276]	@ (800f37c <sen5x_statemachine+0x258>)
 800f268:	601a      	str	r2, [r3, #0]
          PMsamplesState = SAMPLES_TAKEN;
 800f26a:	4b45      	ldr	r3, [pc, #276]	@ (800f380 <sen5x_statemachine+0x25c>)
 800f26c:	2205      	movs	r2, #5
 800f26e:	701a      	strb	r2, [r3, #0]
        }
        sen5xSamples++;
 800f270:	4b51      	ldr	r3, [pc, #324]	@ (800f3b8 <sen5x_statemachine+0x294>)
 800f272:	781b      	ldrb	r3, [r3, #0]
 800f274:	3301      	adds	r3, #1
 800f276:	b2da      	uxtb	r2, r3
 800f278:	4b4f      	ldr	r3, [pc, #316]	@ (800f3b8 <sen5x_statemachine+0x294>)
 800f27a:	701a      	strb	r2, [r3, #0]
        if (sen5xSamples == 31) { // about two times a minute
 800f27c:	4b4e      	ldr	r3, [pc, #312]	@ (800f3b8 <sen5x_statemachine+0x294>)
 800f27e:	781b      	ldrb	r3, [r3, #0]
 800f280:	2b1f      	cmp	r3, #31
 800f282:	d102      	bne.n	800f28a <sen5x_statemachine+0x166>
          sen5xSamples = 0;  // enable display on serial
 800f284:	4b4c      	ldr	r3, [pc, #304]	@ (800f3b8 <sen5x_statemachine+0x294>)
 800f286:	2200      	movs	r2, #0
 800f288:	701a      	strb	r2, [r3, #0]
        }
        if (sen5xSamples > 1) {
 800f28a:	4b4b      	ldr	r3, [pc, #300]	@ (800f3b8 <sen5x_statemachine+0x294>)
 800f28c:	781b      	ldrb	r3, [r3, #0]
 800f28e:	2b01      	cmp	r3, #1
 800f290:	d901      	bls.n	800f296 <sen5x_statemachine+0x172>
          sen5xStore();
 800f292:	f7ff fd9d 	bl	800edd0 <sen5xStore>
        }
        if (sen5xSamples == 2) { // take 2 samples, show 1 sample before we continue in the state machine
 800f296:	4b48      	ldr	r3, [pc, #288]	@ (800f3b8 <sen5x_statemachine+0x294>)
 800f298:	781b      	ldrb	r3, [r3, #0]
 800f29a:	2b02      	cmp	r3, #2
 800f29c:	d101      	bne.n	800f2a2 <sen5x_statemachine+0x17e>
#ifndef STLINK_V3PWR
          sen5x_printvalues(); // print the values
 800f29e:	f7ff fc99 	bl	800ebd4 <sen5x_printvalues>
          sen5x_printvalues(); // print the values
          Info("!!==Values are bogus, voltage for sen5x is out of range when powered by the STLINK_V3PWR==!!");
#endif
        }
      }
      if (usbPluggedIn || (sen5xSamples > 1)) {
 800f2a2:	4b46      	ldr	r3, [pc, #280]	@ (800f3bc <sen5x_statemachine+0x298>)
 800f2a4:	781b      	ldrb	r3, [r3, #0]
 800f2a6:	2b00      	cmp	r3, #0
 800f2a8:	d103      	bne.n	800f2b2 <sen5x_statemachine+0x18e>
 800f2aa:	4b43      	ldr	r3, [pc, #268]	@ (800f3b8 <sen5x_statemachine+0x294>)
 800f2ac:	781b      	ldrb	r3, [r3, #0]
 800f2ae:	2b01      	cmp	r3, #1
 800f2b0:	d95e      	bls.n	800f370 <sen5x_statemachine+0x24c>
        PMsamplesState = CLEAN_FAN;
 800f2b2:	4b33      	ldr	r3, [pc, #204]	@ (800f380 <sen5x_statemachine+0x25c>)
 800f2b4:	2204      	movs	r2, #4
 800f2b6:	701a      	strb	r2, [r3, #0]
      }
      break;
 800f2b8:	e05a      	b.n	800f370 <sen5x_statemachine+0x24c>
    case CLEAN_FAN:
      // start the cleaning procedure once a week
      if ((weekday == MONDAY ) && (lasthour == 1) && !fanCleaningDone) {
 800f2ba:	4b41      	ldr	r3, [pc, #260]	@ (800f3c0 <sen5x_statemachine+0x29c>)
 800f2bc:	781b      	ldrb	r3, [r3, #0]
 800f2be:	2b01      	cmp	r3, #1
 800f2c0:	d11e      	bne.n	800f300 <sen5x_statemachine+0x1dc>
 800f2c2:	4b40      	ldr	r3, [pc, #256]	@ (800f3c4 <sen5x_statemachine+0x2a0>)
 800f2c4:	781b      	ldrb	r3, [r3, #0]
 800f2c6:	2b01      	cmp	r3, #1
 800f2c8:	d11a      	bne.n	800f300 <sen5x_statemachine+0x1dc>
 800f2ca:	4b3f      	ldr	r3, [pc, #252]	@ (800f3c8 <sen5x_statemachine+0x2a4>)
 800f2cc:	781b      	ldrb	r3, [r3, #0]
 800f2ce:	2201      	movs	r2, #1
 800f2d0:	4053      	eors	r3, r2
 800f2d2:	b2db      	uxtb	r3, r3
 800f2d4:	2b00      	cmp	r3, #0
 800f2d6:	d013      	beq.n	800f300 <sen5x_statemachine+0x1dc>
        sen5x_start_fan_cleaning();
 800f2d8:	f000 f9f2 	bl	800f6c0 <sen5x_start_fan_cleaning>
        Info("executing fan cleaning");
 800f2dc:	4a3b      	ldr	r2, [pc, #236]	@ (800f3cc <sen5x_statemachine+0x2a8>)
 800f2de:	4b31      	ldr	r3, [pc, #196]	@ (800f3a4 <sen5x_statemachine+0x280>)
 800f2e0:	0019      	movs	r1, r3
 800f2e2:	2002      	movs	r0, #2
 800f2e4:	f004 fdaa 	bl	8013e3c <CreateLine>
        sen5xReadTimer = HAL_GetTick() + SEN5X_FAN_CLEANING_PERIOD;  // fan cleaning takes 10 seconds
 800f2e8:	f005 fb20 	bl	801492c <HAL_GetTick>
 800f2ec:	0003      	movs	r3, r0
 800f2ee:	4a38      	ldr	r2, [pc, #224]	@ (800f3d0 <sen5x_statemachine+0x2ac>)
 800f2f0:	189a      	adds	r2, r3, r2
 800f2f2:	4b22      	ldr	r3, [pc, #136]	@ (800f37c <sen5x_statemachine+0x258>)
 800f2f4:	601a      	str	r2, [r3, #0]
        fanCleaningDone = true;
 800f2f6:	4b34      	ldr	r3, [pc, #208]	@ (800f3c8 <sen5x_statemachine+0x2a4>)
 800f2f8:	2201      	movs	r2, #1
 800f2fa:	701a      	strb	r2, [r3, #0]
        sen5x_lightup_measurement();
 800f2fc:	f7ff fb68 	bl	800e9d0 <sen5x_lightup_measurement>
      }
      PMsamplesState = SAMPLES_TAKEN;
 800f300:	4b1f      	ldr	r3, [pc, #124]	@ (800f380 <sen5x_statemachine+0x25c>)
 800f302:	2205      	movs	r2, #5
 800f304:	701a      	strb	r2, [r3, #0]
      break;
 800f306:	e034      	b.n	800f372 <sen5x_statemachine+0x24e>
    case SAMPLES_TAKEN:
      if (!usbPluggedIn && !userToggle) {
 800f308:	4b2c      	ldr	r3, [pc, #176]	@ (800f3bc <sen5x_statemachine+0x298>)
 800f30a:	781b      	ldrb	r3, [r3, #0]
 800f30c:	2201      	movs	r2, #1
 800f30e:	4053      	eors	r3, r2
 800f310:	b2db      	uxtb	r3, r3
 800f312:	2b00      	cmp	r3, #0
 800f314:	d01c      	beq.n	800f350 <sen5x_statemachine+0x22c>
 800f316:	4b2f      	ldr	r3, [pc, #188]	@ (800f3d4 <sen5x_statemachine+0x2b0>)
 800f318:	781b      	ldrb	r3, [r3, #0]
 800f31a:	2201      	movs	r2, #1
 800f31c:	4053      	eors	r3, r2
 800f31e:	b2db      	uxtb	r3, r3
 800f320:	2b00      	cmp	r3, #0
 800f322:	d015      	beq.n	800f350 <sen5x_statemachine+0x22c>
        if (sen5x_extinguish_measurement()) {
 800f324:	f7ff fba0 	bl	800ea68 <sen5x_extinguish_measurement>
 800f328:	1e03      	subs	r3, r0, #0
 800f32a:	d005      	beq.n	800f338 <sen5x_statemachine+0x214>
          Error("Error executing sen5x_extinguish_measurement()");
 800f32c:	4a2a      	ldr	r2, [pc, #168]	@ (800f3d8 <sen5x_statemachine+0x2b4>)
 800f32e:	4b17      	ldr	r3, [pc, #92]	@ (800f38c <sen5x_statemachine+0x268>)
 800f330:	0019      	movs	r1, r3
 800f332:	2001      	movs	r0, #1
 800f334:	f004 fd82 	bl	8013e3c <CreateLine>
        }
        sen5xSamples = 0;
 800f338:	4b1f      	ldr	r3, [pc, #124]	@ (800f3b8 <sen5x_statemachine+0x294>)
 800f33a:	2200      	movs	r2, #0
 800f33c:	701a      	strb	r2, [r3, #0]
        sen5x_Power_Off();
 800f33e:	f7ff f9e3 	bl	800e708 <sen5x_Power_Off>
//        if (!userToggle) {
          SetPMSensorStatus(false);
 800f342:	2000      	movs	r0, #0
 800f344:	f7fe f908 	bl	800d558 <SetPMSensorStatus>
//        }
        PMsamplesState = LIGHT_OUT;
 800f348:	4b0d      	ldr	r3, [pc, #52]	@ (800f380 <sen5x_statemachine+0x25c>)
 800f34a:	2201      	movs	r2, #1
 800f34c:	701a      	strb	r2, [r3, #0]
 800f34e:	e002      	b.n	800f356 <sen5x_statemachine+0x232>
      }
      else {
        PMsamplesState = CHECK_SEN5X;
 800f350:	4b0b      	ldr	r3, [pc, #44]	@ (800f380 <sen5x_statemachine+0x25c>)
 800f352:	2203      	movs	r2, #3
 800f354:	701a      	strb	r2, [r3, #0]
      }
      ResetPMIndicator();
 800f356:	f003 fbbb 	bl	8012ad0 <ResetPMIndicator>
      sen5xReadTimer = HAL_GetTick() + SEN5X_SAMPLE_INTERVAL;
 800f35a:	f005 fae7 	bl	801492c <HAL_GetTick>
 800f35e:	0003      	movs	r3, r0
 800f360:	22fa      	movs	r2, #250	@ 0xfa
 800f362:	0092      	lsls	r2, r2, #2
 800f364:	189a      	adds	r2, r3, r2
 800f366:	4b05      	ldr	r3, [pc, #20]	@ (800f37c <sen5x_statemachine+0x258>)
 800f368:	601a      	str	r2, [r3, #0]
    }
  }
}
 800f36a:	e002      	b.n	800f372 <sen5x_statemachine+0x24e>
      break;
 800f36c:	46c0      	nop			@ (mov r8, r8)
 800f36e:	e000      	b.n	800f372 <sen5x_statemachine+0x24e>
      break;
 800f370:	46c0      	nop			@ (mov r8, r8)
}
 800f372:	46c0      	nop			@ (mov r8, r8)
 800f374:	46bd      	mov	sp, r7
 800f376:	b002      	add	sp, #8
 800f378:	bd80      	pop	{r7, pc}
 800f37a:	46c0      	nop			@ (mov r8, r8)
 800f37c:	200011cc 	.word	0x200011cc
 800f380:	200000aa 	.word	0x200000aa
 800f384:	0802e384 	.word	0x0802e384
 800f388:	0802d57c 	.word	0x0802d57c
 800f38c:	0802cf7c 	.word	0x0802cf7c
 800f390:	0004cb2f 	.word	0x0004cb2f
 800f394:	00005910 	.word	0x00005910
 800f398:	200011c9 	.word	0x200011c9
 800f39c:	0802d5ac 	.word	0x0802d5ac
 800f3a0:	0802d5c4 	.word	0x0802d5c4
 800f3a4:	0802cf10 	.word	0x0802cf10
 800f3a8:	0802d5dc 	.word	0x0802d5dc
 800f3ac:	0802cf50 	.word	0x0802cf50
 800f3b0:	200011d0 	.word	0x200011d0
 800f3b4:	0802d5f0 	.word	0x0802d5f0
 800f3b8:	200011c8 	.word	0x200011c8
 800f3bc:	2000214d 	.word	0x2000214d
 800f3c0:	20000e43 	.word	0x20000e43
 800f3c4:	20000e42 	.word	0x20000e42
 800f3c8:	200011bc 	.word	0x200011bc
 800f3cc:	0802d620 	.word	0x0802d620
 800f3d0:	00002710 	.word	0x00002710
 800f3d4:	2000214e 	.word	0x2000214e
 800f3d8:	0802d638 	.word	0x0802d638

0800f3dc <sen5x_start_measurement>:
#include "sensirion_i2c.h"
#include "main.h"

#define SEN5X_I2C_ADDRESS 0x69

int16_t sen5x_start_measurement(void) {
 800f3dc:	b590      	push	{r4, r7, lr}
 800f3de:	b083      	sub	sp, #12
 800f3e0:	af00      	add	r7, sp, #0
    int16_t error;
    uint8_t buffer[2];
    uint16_t offset = 0;
 800f3e2:	1dbb      	adds	r3, r7, #6
 800f3e4:	2200      	movs	r2, #0
 800f3e6:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0x21);
 800f3e8:	1dbc      	adds	r4, r7, #6
 800f3ea:	1dbb      	adds	r3, r7, #6
 800f3ec:	8819      	ldrh	r1, [r3, #0]
 800f3ee:	003b      	movs	r3, r7
 800f3f0:	2221      	movs	r2, #33	@ 0x21
 800f3f2:	0018      	movs	r0, r3
 800f3f4:	f001 fb57 	bl	8010aa6 <sensirion_i2c_add_command_to_buffer>
 800f3f8:	0003      	movs	r3, r0
 800f3fa:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 800f3fc:	1d3c      	adds	r4, r7, #4
 800f3fe:	1dbb      	adds	r3, r7, #6
 800f400:	881a      	ldrh	r2, [r3, #0]
 800f402:	003b      	movs	r3, r7
 800f404:	0019      	movs	r1, r3
 800f406:	2069      	movs	r0, #105	@ 0x69
 800f408:	f001 fbd1 	bl	8010bae <sensirion_i2c_write_data>
 800f40c:	0003      	movs	r3, r0
 800f40e:	8023      	strh	r3, [r4, #0]
    if (error) {
 800f410:	1d3b      	adds	r3, r7, #4
 800f412:	2200      	movs	r2, #0
 800f414:	5e9b      	ldrsh	r3, [r3, r2]
 800f416:	2b00      	cmp	r3, #0
 800f418:	d003      	beq.n	800f422 <sen5x_start_measurement+0x46>
        return error;
 800f41a:	1d3b      	adds	r3, r7, #4
 800f41c:	2200      	movs	r2, #0
 800f41e:	5e9b      	ldrsh	r3, [r3, r2]
 800f420:	e004      	b.n	800f42c <sen5x_start_measurement+0x50>
    }
    sensirion_i2c_hal_sleep_usec(50000);
 800f422:	4b04      	ldr	r3, [pc, #16]	@ (800f434 <sen5x_start_measurement+0x58>)
 800f424:	0018      	movs	r0, r3
 800f426:	f7ff fda5 	bl	800ef74 <sensirion_i2c_hal_sleep_usec>
    return NO_ERROR;
 800f42a:	2300      	movs	r3, #0
}
 800f42c:	0018      	movs	r0, r3
 800f42e:	46bd      	mov	sp, r7
 800f430:	b003      	add	sp, #12
 800f432:	bd90      	pop	{r4, r7, pc}
 800f434:	0000c350 	.word	0x0000c350

0800f438 <sen5x_start_measurement_without_pm>:

int16_t sen5x_start_measurement_without_pm(void) {
 800f438:	b590      	push	{r4, r7, lr}
 800f43a:	b083      	sub	sp, #12
 800f43c:	af00      	add	r7, sp, #0
    int16_t error;
    uint8_t buffer[2];
    uint16_t offset = 0;
 800f43e:	1dbb      	adds	r3, r7, #6
 800f440:	2200      	movs	r2, #0
 800f442:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0x37);
 800f444:	1dbc      	adds	r4, r7, #6
 800f446:	1dbb      	adds	r3, r7, #6
 800f448:	8819      	ldrh	r1, [r3, #0]
 800f44a:	003b      	movs	r3, r7
 800f44c:	2237      	movs	r2, #55	@ 0x37
 800f44e:	0018      	movs	r0, r3
 800f450:	f001 fb29 	bl	8010aa6 <sensirion_i2c_add_command_to_buffer>
 800f454:	0003      	movs	r3, r0
 800f456:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 800f458:	1d3c      	adds	r4, r7, #4
 800f45a:	1dbb      	adds	r3, r7, #6
 800f45c:	881a      	ldrh	r2, [r3, #0]
 800f45e:	003b      	movs	r3, r7
 800f460:	0019      	movs	r1, r3
 800f462:	2069      	movs	r0, #105	@ 0x69
 800f464:	f001 fba3 	bl	8010bae <sensirion_i2c_write_data>
 800f468:	0003      	movs	r3, r0
 800f46a:	8023      	strh	r3, [r4, #0]
    if (error) {
 800f46c:	1d3b      	adds	r3, r7, #4
 800f46e:	2200      	movs	r2, #0
 800f470:	5e9b      	ldrsh	r3, [r3, r2]
 800f472:	2b00      	cmp	r3, #0
 800f474:	d003      	beq.n	800f47e <sen5x_start_measurement_without_pm+0x46>
        return error;
 800f476:	1d3b      	adds	r3, r7, #4
 800f478:	2200      	movs	r2, #0
 800f47a:	5e9b      	ldrsh	r3, [r3, r2]
 800f47c:	e004      	b.n	800f488 <sen5x_start_measurement_without_pm+0x50>
    }
    sensirion_i2c_hal_sleep_usec(50000);
 800f47e:	4b04      	ldr	r3, [pc, #16]	@ (800f490 <sen5x_start_measurement_without_pm+0x58>)
 800f480:	0018      	movs	r0, r3
 800f482:	f7ff fd77 	bl	800ef74 <sensirion_i2c_hal_sleep_usec>
    return NO_ERROR;
 800f486:	2300      	movs	r3, #0
}
 800f488:	0018      	movs	r0, r3
 800f48a:	46bd      	mov	sp, r7
 800f48c:	b003      	add	sp, #12
 800f48e:	bd90      	pop	{r4, r7, pc}
 800f490:	0000c350 	.word	0x0000c350

0800f494 <sen5x_stop_measurement>:

int16_t sen5x_stop_measurement(void) {
 800f494:	b590      	push	{r4, r7, lr}
 800f496:	b083      	sub	sp, #12
 800f498:	af00      	add	r7, sp, #0
    int16_t error;
    uint8_t buffer[2];
    uint16_t offset = 0;
 800f49a:	1dbb      	adds	r3, r7, #6
 800f49c:	2200      	movs	r2, #0
 800f49e:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0x104);
 800f4a0:	1dbc      	adds	r4, r7, #6
 800f4a2:	2382      	movs	r3, #130	@ 0x82
 800f4a4:	005a      	lsls	r2, r3, #1
 800f4a6:	1dbb      	adds	r3, r7, #6
 800f4a8:	8819      	ldrh	r1, [r3, #0]
 800f4aa:	003b      	movs	r3, r7
 800f4ac:	0018      	movs	r0, r3
 800f4ae:	f001 fafa 	bl	8010aa6 <sensirion_i2c_add_command_to_buffer>
 800f4b2:	0003      	movs	r3, r0
 800f4b4:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 800f4b6:	1d3c      	adds	r4, r7, #4
 800f4b8:	1dbb      	adds	r3, r7, #6
 800f4ba:	881a      	ldrh	r2, [r3, #0]
 800f4bc:	003b      	movs	r3, r7
 800f4be:	0019      	movs	r1, r3
 800f4c0:	2069      	movs	r0, #105	@ 0x69
 800f4c2:	f001 fb74 	bl	8010bae <sensirion_i2c_write_data>
 800f4c6:	0003      	movs	r3, r0
 800f4c8:	8023      	strh	r3, [r4, #0]
    if (error) {
 800f4ca:	1d3b      	adds	r3, r7, #4
 800f4cc:	2200      	movs	r2, #0
 800f4ce:	5e9b      	ldrsh	r3, [r3, r2]
 800f4d0:	2b00      	cmp	r3, #0
 800f4d2:	d003      	beq.n	800f4dc <sen5x_stop_measurement+0x48>
        return error;
 800f4d4:	1d3b      	adds	r3, r7, #4
 800f4d6:	2200      	movs	r2, #0
 800f4d8:	5e9b      	ldrsh	r3, [r3, r2]
 800f4da:	e004      	b.n	800f4e6 <sen5x_stop_measurement+0x52>
    }
    sensirion_i2c_hal_sleep_usec(200000);
 800f4dc:	4b04      	ldr	r3, [pc, #16]	@ (800f4f0 <sen5x_stop_measurement+0x5c>)
 800f4de:	0018      	movs	r0, r3
 800f4e0:	f7ff fd48 	bl	800ef74 <sensirion_i2c_hal_sleep_usec>
    return NO_ERROR;
 800f4e4:	2300      	movs	r3, #0
}
 800f4e6:	0018      	movs	r0, r3
 800f4e8:	46bd      	mov	sp, r7
 800f4ea:	b003      	add	sp, #12
 800f4ec:	bd90      	pop	{r4, r7, pc}
 800f4ee:	46c0      	nop			@ (mov r8, r8)
 800f4f0:	00030d40 	.word	0x00030d40

0800f4f4 <sen5x_read_data_ready>:

int16_t sen5x_read_data_ready(bool* data_ready) {
 800f4f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f4f6:	b085      	sub	sp, #20
 800f4f8:	af00      	add	r7, sp, #0
 800f4fa:	6078      	str	r0, [r7, #4]
    int16_t error;
    uint8_t buffer[3];
    uint16_t offset = 0;
 800f4fc:	250e      	movs	r5, #14
 800f4fe:	197b      	adds	r3, r7, r5
 800f500:	2200      	movs	r2, #0
 800f502:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0x202);
 800f504:	197c      	adds	r4, r7, r5
 800f506:	4a22      	ldr	r2, [pc, #136]	@ (800f590 <sen5x_read_data_ready+0x9c>)
 800f508:	197b      	adds	r3, r7, r5
 800f50a:	8819      	ldrh	r1, [r3, #0]
 800f50c:	2308      	movs	r3, #8
 800f50e:	18fb      	adds	r3, r7, r3
 800f510:	0018      	movs	r0, r3
 800f512:	f001 fac8 	bl	8010aa6 <sensirion_i2c_add_command_to_buffer>
 800f516:	0003      	movs	r3, r0
 800f518:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 800f51a:	260c      	movs	r6, #12
 800f51c:	19bc      	adds	r4, r7, r6
 800f51e:	197b      	adds	r3, r7, r5
 800f520:	881a      	ldrh	r2, [r3, #0]
 800f522:	2308      	movs	r3, #8
 800f524:	18fb      	adds	r3, r7, r3
 800f526:	0019      	movs	r1, r3
 800f528:	2069      	movs	r0, #105	@ 0x69
 800f52a:	f001 fb40 	bl	8010bae <sensirion_i2c_write_data>
 800f52e:	0003      	movs	r3, r0
 800f530:	8023      	strh	r3, [r4, #0]
    if (error) {
 800f532:	19bb      	adds	r3, r7, r6
 800f534:	2200      	movs	r2, #0
 800f536:	5e9b      	ldrsh	r3, [r3, r2]
 800f538:	2b00      	cmp	r3, #0
 800f53a:	d003      	beq.n	800f544 <sen5x_read_data_ready+0x50>
        return error;
 800f53c:	19bb      	adds	r3, r7, r6
 800f53e:	2200      	movs	r2, #0
 800f540:	5e9b      	ldrsh	r3, [r3, r2]
 800f542:	e020      	b.n	800f586 <sen5x_read_data_ready+0x92>
    }

    sensirion_i2c_hal_sleep_usec(20000);
 800f544:	4b13      	ldr	r3, [pc, #76]	@ (800f594 <sen5x_read_data_ready+0xa0>)
 800f546:	0018      	movs	r0, r3
 800f548:	f7ff fd14 	bl	800ef74 <sensirion_i2c_hal_sleep_usec>

    error = sensirion_i2c_read_data_inplace(SEN5X_I2C_ADDRESS, &buffer[0], 2);
 800f54c:	250c      	movs	r5, #12
 800f54e:	197c      	adds	r4, r7, r5
 800f550:	2308      	movs	r3, #8
 800f552:	18fb      	adds	r3, r7, r3
 800f554:	2202      	movs	r2, #2
 800f556:	0019      	movs	r1, r3
 800f558:	2069      	movs	r0, #105	@ 0x69
 800f55a:	f001 fb40 	bl	8010bde <sensirion_i2c_read_data_inplace>
 800f55e:	0003      	movs	r3, r0
 800f560:	8023      	strh	r3, [r4, #0]
    if (error) {
 800f562:	197b      	adds	r3, r7, r5
 800f564:	2200      	movs	r2, #0
 800f566:	5e9b      	ldrsh	r3, [r3, r2]
 800f568:	2b00      	cmp	r3, #0
 800f56a:	d003      	beq.n	800f574 <sen5x_read_data_ready+0x80>
        return error;
 800f56c:	197b      	adds	r3, r7, r5
 800f56e:	2200      	movs	r2, #0
 800f570:	5e9b      	ldrsh	r3, [r3, r2]
 800f572:	e008      	b.n	800f586 <sen5x_read_data_ready+0x92>
    }
    *data_ready = buffer[1];
 800f574:	2308      	movs	r3, #8
 800f576:	18fb      	adds	r3, r7, r3
 800f578:	785b      	ldrb	r3, [r3, #1]
 800f57a:	1e5a      	subs	r2, r3, #1
 800f57c:	4193      	sbcs	r3, r2
 800f57e:	b2da      	uxtb	r2, r3
 800f580:	687b      	ldr	r3, [r7, #4]
 800f582:	701a      	strb	r2, [r3, #0]
    return NO_ERROR;
 800f584:	2300      	movs	r3, #0
}
 800f586:	0018      	movs	r0, r3
 800f588:	46bd      	mov	sp, r7
 800f58a:	b005      	add	sp, #20
 800f58c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f58e:	46c0      	nop			@ (mov r8, r8)
 800f590:	00000202 	.word	0x00000202
 800f594:	00004e20 	.word	0x00004e20

0800f598 <sen5x_read_measured_values>:
                                   uint16_t* mass_concentration_pm2p5,
                                   uint16_t* mass_concentration_pm4p0,
                                   uint16_t* mass_concentration_pm10p0,
                                   int16_t* ambient_humidity,
                                   int16_t* ambient_temperature,
                                   int16_t* voc_index, int16_t* nox_index) {
 800f598:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f59a:	b08d      	sub	sp, #52	@ 0x34
 800f59c:	af00      	add	r7, sp, #0
 800f59e:	60f8      	str	r0, [r7, #12]
 800f5a0:	60b9      	str	r1, [r7, #8]
 800f5a2:	607a      	str	r2, [r7, #4]
 800f5a4:	603b      	str	r3, [r7, #0]
    int16_t error;
    uint8_t buffer[24];
    uint16_t offset = 0;
 800f5a6:	252e      	movs	r5, #46	@ 0x2e
 800f5a8:	197b      	adds	r3, r7, r5
 800f5aa:	2200      	movs	r2, #0
 800f5ac:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0x3C4);
 800f5ae:	197c      	adds	r4, r7, r5
 800f5b0:	23f1      	movs	r3, #241	@ 0xf1
 800f5b2:	009a      	lsls	r2, r3, #2
 800f5b4:	197b      	adds	r3, r7, r5
 800f5b6:	8819      	ldrh	r1, [r3, #0]
 800f5b8:	2314      	movs	r3, #20
 800f5ba:	18fb      	adds	r3, r7, r3
 800f5bc:	0018      	movs	r0, r3
 800f5be:	f001 fa72 	bl	8010aa6 <sensirion_i2c_add_command_to_buffer>
 800f5c2:	0003      	movs	r3, r0
 800f5c4:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 800f5c6:	262c      	movs	r6, #44	@ 0x2c
 800f5c8:	19bc      	adds	r4, r7, r6
 800f5ca:	197b      	adds	r3, r7, r5
 800f5cc:	881a      	ldrh	r2, [r3, #0]
 800f5ce:	2314      	movs	r3, #20
 800f5d0:	18fb      	adds	r3, r7, r3
 800f5d2:	0019      	movs	r1, r3
 800f5d4:	2069      	movs	r0, #105	@ 0x69
 800f5d6:	f001 faea 	bl	8010bae <sensirion_i2c_write_data>
 800f5da:	0003      	movs	r3, r0
 800f5dc:	8023      	strh	r3, [r4, #0]
    if (error) {
 800f5de:	19bb      	adds	r3, r7, r6
 800f5e0:	2200      	movs	r2, #0
 800f5e2:	5e9b      	ldrsh	r3, [r3, r2]
 800f5e4:	2b00      	cmp	r3, #0
 800f5e6:	d003      	beq.n	800f5f0 <sen5x_read_measured_values+0x58>
        return error;
 800f5e8:	19bb      	adds	r3, r7, r6
 800f5ea:	2200      	movs	r2, #0
 800f5ec:	5e9b      	ldrsh	r3, [r3, r2]
 800f5ee:	e060      	b.n	800f6b2 <sen5x_read_measured_values+0x11a>
    }

    sensirion_i2c_hal_sleep_usec(20000);
 800f5f0:	4b32      	ldr	r3, [pc, #200]	@ (800f6bc <sen5x_read_measured_values+0x124>)
 800f5f2:	0018      	movs	r0, r3
 800f5f4:	f7ff fcbe 	bl	800ef74 <sensirion_i2c_hal_sleep_usec>

    error = sensirion_i2c_read_data_inplace(SEN5X_I2C_ADDRESS, &buffer[0], 16);
 800f5f8:	252c      	movs	r5, #44	@ 0x2c
 800f5fa:	197c      	adds	r4, r7, r5
 800f5fc:	2314      	movs	r3, #20
 800f5fe:	18fb      	adds	r3, r7, r3
 800f600:	2210      	movs	r2, #16
 800f602:	0019      	movs	r1, r3
 800f604:	2069      	movs	r0, #105	@ 0x69
 800f606:	f001 faea 	bl	8010bde <sensirion_i2c_read_data_inplace>
 800f60a:	0003      	movs	r3, r0
 800f60c:	8023      	strh	r3, [r4, #0]
    if (error) {
 800f60e:	197b      	adds	r3, r7, r5
 800f610:	2200      	movs	r2, #0
 800f612:	5e9b      	ldrsh	r3, [r3, r2]
 800f614:	2b00      	cmp	r3, #0
 800f616:	d003      	beq.n	800f620 <sen5x_read_measured_values+0x88>
        return error;
 800f618:	197b      	adds	r3, r7, r5
 800f61a:	2200      	movs	r2, #0
 800f61c:	5e9b      	ldrsh	r3, [r3, r2]
 800f61e:	e048      	b.n	800f6b2 <sen5x_read_measured_values+0x11a>
    }
    *mass_concentration_pm1p0 = sensirion_common_bytes_to_uint16_t(&buffer[0]);
 800f620:	2414      	movs	r4, #20
 800f622:	193b      	adds	r3, r7, r4
 800f624:	0018      	movs	r0, r3
 800f626:	f000 fa79 	bl	800fb1c <sensirion_common_bytes_to_uint16_t>
 800f62a:	0003      	movs	r3, r0
 800f62c:	001a      	movs	r2, r3
 800f62e:	68fb      	ldr	r3, [r7, #12]
 800f630:	801a      	strh	r2, [r3, #0]
    *mass_concentration_pm2p5 = sensirion_common_bytes_to_uint16_t(&buffer[2]);
 800f632:	193b      	adds	r3, r7, r4
 800f634:	3302      	adds	r3, #2
 800f636:	0018      	movs	r0, r3
 800f638:	f000 fa70 	bl	800fb1c <sensirion_common_bytes_to_uint16_t>
 800f63c:	0003      	movs	r3, r0
 800f63e:	001a      	movs	r2, r3
 800f640:	68bb      	ldr	r3, [r7, #8]
 800f642:	801a      	strh	r2, [r3, #0]
    *mass_concentration_pm4p0 = sensirion_common_bytes_to_uint16_t(&buffer[4]);
 800f644:	193b      	adds	r3, r7, r4
 800f646:	3304      	adds	r3, #4
 800f648:	0018      	movs	r0, r3
 800f64a:	f000 fa67 	bl	800fb1c <sensirion_common_bytes_to_uint16_t>
 800f64e:	0003      	movs	r3, r0
 800f650:	001a      	movs	r2, r3
 800f652:	687b      	ldr	r3, [r7, #4]
 800f654:	801a      	strh	r2, [r3, #0]
    *mass_concentration_pm10p0 = sensirion_common_bytes_to_uint16_t(&buffer[6]);
 800f656:	193b      	adds	r3, r7, r4
 800f658:	3306      	adds	r3, #6
 800f65a:	0018      	movs	r0, r3
 800f65c:	f000 fa5e 	bl	800fb1c <sensirion_common_bytes_to_uint16_t>
 800f660:	0003      	movs	r3, r0
 800f662:	001a      	movs	r2, r3
 800f664:	683b      	ldr	r3, [r7, #0]
 800f666:	801a      	strh	r2, [r3, #0]
    *ambient_humidity = sensirion_common_bytes_to_int16_t(&buffer[8]);
 800f668:	193b      	adds	r3, r7, r4
 800f66a:	3308      	adds	r3, #8
 800f66c:	0018      	movs	r0, r3
 800f66e:	f000 fa82 	bl	800fb76 <sensirion_common_bytes_to_int16_t>
 800f672:	0003      	movs	r3, r0
 800f674:	001a      	movs	r2, r3
 800f676:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800f678:	801a      	strh	r2, [r3, #0]
    *ambient_temperature = sensirion_common_bytes_to_int16_t(&buffer[10]);
 800f67a:	193b      	adds	r3, r7, r4
 800f67c:	330a      	adds	r3, #10
 800f67e:	0018      	movs	r0, r3
 800f680:	f000 fa79 	bl	800fb76 <sensirion_common_bytes_to_int16_t>
 800f684:	0003      	movs	r3, r0
 800f686:	001a      	movs	r2, r3
 800f688:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f68a:	801a      	strh	r2, [r3, #0]
    *voc_index = sensirion_common_bytes_to_int16_t(&buffer[12]);
 800f68c:	193b      	adds	r3, r7, r4
 800f68e:	330c      	adds	r3, #12
 800f690:	0018      	movs	r0, r3
 800f692:	f000 fa70 	bl	800fb76 <sensirion_common_bytes_to_int16_t>
 800f696:	0003      	movs	r3, r0
 800f698:	001a      	movs	r2, r3
 800f69a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800f69c:	801a      	strh	r2, [r3, #0]
    *nox_index = sensirion_common_bytes_to_int16_t(&buffer[14]);
 800f69e:	193b      	adds	r3, r7, r4
 800f6a0:	330e      	adds	r3, #14
 800f6a2:	0018      	movs	r0, r3
 800f6a4:	f000 fa67 	bl	800fb76 <sensirion_common_bytes_to_int16_t>
 800f6a8:	0003      	movs	r3, r0
 800f6aa:	001a      	movs	r2, r3
 800f6ac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f6ae:	801a      	strh	r2, [r3, #0]
    return NO_ERROR;
 800f6b0:	2300      	movs	r3, #0
}
 800f6b2:	0018      	movs	r0, r3
 800f6b4:	46bd      	mov	sp, r7
 800f6b6:	b00d      	add	sp, #52	@ 0x34
 800f6b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f6ba:	46c0      	nop			@ (mov r8, r8)
 800f6bc:	00004e20 	.word	0x00004e20

0800f6c0 <sen5x_start_fan_cleaning>:
        sensirion_common_bytes_to_uint16_t(&buffer[16]);
    *typical_particle_size = sensirion_common_bytes_to_uint16_t(&buffer[18]);
    return NO_ERROR;
}

int16_t sen5x_start_fan_cleaning(void) {
 800f6c0:	b590      	push	{r4, r7, lr}
 800f6c2:	b083      	sub	sp, #12
 800f6c4:	af00      	add	r7, sp, #0
    int16_t error;
    uint8_t buffer[2];
    uint16_t offset = 0;
 800f6c6:	1dbb      	adds	r3, r7, #6
 800f6c8:	2200      	movs	r2, #0
 800f6ca:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0x5607);
 800f6cc:	1dbc      	adds	r4, r7, #6
 800f6ce:	4a12      	ldr	r2, [pc, #72]	@ (800f718 <sen5x_start_fan_cleaning+0x58>)
 800f6d0:	1dbb      	adds	r3, r7, #6
 800f6d2:	8819      	ldrh	r1, [r3, #0]
 800f6d4:	003b      	movs	r3, r7
 800f6d6:	0018      	movs	r0, r3
 800f6d8:	f001 f9e5 	bl	8010aa6 <sensirion_i2c_add_command_to_buffer>
 800f6dc:	0003      	movs	r3, r0
 800f6de:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 800f6e0:	1d3c      	adds	r4, r7, #4
 800f6e2:	1dbb      	adds	r3, r7, #6
 800f6e4:	881a      	ldrh	r2, [r3, #0]
 800f6e6:	003b      	movs	r3, r7
 800f6e8:	0019      	movs	r1, r3
 800f6ea:	2069      	movs	r0, #105	@ 0x69
 800f6ec:	f001 fa5f 	bl	8010bae <sensirion_i2c_write_data>
 800f6f0:	0003      	movs	r3, r0
 800f6f2:	8023      	strh	r3, [r4, #0]
    if (error) {
 800f6f4:	1d3b      	adds	r3, r7, #4
 800f6f6:	2200      	movs	r2, #0
 800f6f8:	5e9b      	ldrsh	r3, [r3, r2]
 800f6fa:	2b00      	cmp	r3, #0
 800f6fc:	d003      	beq.n	800f706 <sen5x_start_fan_cleaning+0x46>
        return error;
 800f6fe:	1d3b      	adds	r3, r7, #4
 800f700:	2200      	movs	r2, #0
 800f702:	5e9b      	ldrsh	r3, [r3, r2]
 800f704:	e004      	b.n	800f710 <sen5x_start_fan_cleaning+0x50>
    }
    sensirion_i2c_hal_sleep_usec(20000);
 800f706:	4b05      	ldr	r3, [pc, #20]	@ (800f71c <sen5x_start_fan_cleaning+0x5c>)
 800f708:	0018      	movs	r0, r3
 800f70a:	f7ff fc33 	bl	800ef74 <sensirion_i2c_hal_sleep_usec>
    return NO_ERROR;
 800f70e:	2300      	movs	r3, #0
}
 800f710:	0018      	movs	r0, r3
 800f712:	46bd      	mov	sp, r7
 800f714:	b003      	add	sp, #12
 800f716:	bd90      	pop	{r4, r7, pc}
 800f718:	00005607 	.word	0x00005607
 800f71c:	00004e20 	.word	0x00004e20

0800f720 <sen5x_set_temperature_offset_parameters>:

int16_t sen5x_set_temperature_offset_parameters(int16_t temp_offset,
                                                int16_t slope,
                                                uint16_t time_constant) {
 800f720:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f722:	b087      	sub	sp, #28
 800f724:	af00      	add	r7, sp, #0
 800f726:	0004      	movs	r4, r0
 800f728:	0008      	movs	r0, r1
 800f72a:	0011      	movs	r1, r2
 800f72c:	1dbb      	adds	r3, r7, #6
 800f72e:	1c22      	adds	r2, r4, #0
 800f730:	801a      	strh	r2, [r3, #0]
 800f732:	1d3b      	adds	r3, r7, #4
 800f734:	1c02      	adds	r2, r0, #0
 800f736:	801a      	strh	r2, [r3, #0]
 800f738:	1cbb      	adds	r3, r7, #2
 800f73a:	1c0a      	adds	r2, r1, #0
 800f73c:	801a      	strh	r2, [r3, #0]
    int16_t error;
    uint8_t buffer[11];
    uint16_t offset = 0;
 800f73e:	2516      	movs	r5, #22
 800f740:	197b      	adds	r3, r7, r5
 800f742:	2200      	movs	r2, #0
 800f744:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0x60B2);
 800f746:	197c      	adds	r4, r7, r5
 800f748:	4a25      	ldr	r2, [pc, #148]	@ (800f7e0 <sen5x_set_temperature_offset_parameters+0xc0>)
 800f74a:	197b      	adds	r3, r7, r5
 800f74c:	8819      	ldrh	r1, [r3, #0]
 800f74e:	2608      	movs	r6, #8
 800f750:	19bb      	adds	r3, r7, r6
 800f752:	0018      	movs	r0, r3
 800f754:	f001 f9a7 	bl	8010aa6 <sensirion_i2c_add_command_to_buffer>
 800f758:	0003      	movs	r3, r0
 800f75a:	8023      	strh	r3, [r4, #0]

    offset =
        sensirion_i2c_add_int16_t_to_buffer(&buffer[0], offset, temp_offset);
 800f75c:	197c      	adds	r4, r7, r5
 800f75e:	1dbb      	adds	r3, r7, #6
 800f760:	2200      	movs	r2, #0
 800f762:	5e9a      	ldrsh	r2, [r3, r2]
 800f764:	197b      	adds	r3, r7, r5
 800f766:	8819      	ldrh	r1, [r3, #0]
 800f768:	19bb      	adds	r3, r7, r6
 800f76a:	0018      	movs	r0, r3
 800f76c:	f001 fa06 	bl	8010b7c <sensirion_i2c_add_int16_t_to_buffer>
 800f770:	0003      	movs	r3, r0
 800f772:	8023      	strh	r3, [r4, #0]
    offset = sensirion_i2c_add_int16_t_to_buffer(&buffer[0], offset, slope);
 800f774:	197c      	adds	r4, r7, r5
 800f776:	1d3b      	adds	r3, r7, #4
 800f778:	2200      	movs	r2, #0
 800f77a:	5e9a      	ldrsh	r2, [r3, r2]
 800f77c:	197b      	adds	r3, r7, r5
 800f77e:	8819      	ldrh	r1, [r3, #0]
 800f780:	19bb      	adds	r3, r7, r6
 800f782:	0018      	movs	r0, r3
 800f784:	f001 f9fa 	bl	8010b7c <sensirion_i2c_add_int16_t_to_buffer>
 800f788:	0003      	movs	r3, r0
 800f78a:	8023      	strh	r3, [r4, #0]
    offset =
        sensirion_i2c_add_uint16_t_to_buffer(&buffer[0], offset, time_constant);
 800f78c:	197c      	adds	r4, r7, r5
 800f78e:	1cbb      	adds	r3, r7, #2
 800f790:	881a      	ldrh	r2, [r3, #0]
 800f792:	197b      	adds	r3, r7, r5
 800f794:	8819      	ldrh	r1, [r3, #0]
 800f796:	19bb      	adds	r3, r7, r6
 800f798:	0018      	movs	r0, r3
 800f79a:	f001 f9b0 	bl	8010afe <sensirion_i2c_add_uint16_t_to_buffer>
 800f79e:	0003      	movs	r3, r0
 800f7a0:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 800f7a2:	2214      	movs	r2, #20
 800f7a4:	18bc      	adds	r4, r7, r2
 800f7a6:	197b      	adds	r3, r7, r5
 800f7a8:	881a      	ldrh	r2, [r3, #0]
 800f7aa:	19bb      	adds	r3, r7, r6
 800f7ac:	0019      	movs	r1, r3
 800f7ae:	2069      	movs	r0, #105	@ 0x69
 800f7b0:	f001 f9fd 	bl	8010bae <sensirion_i2c_write_data>
 800f7b4:	0003      	movs	r3, r0
 800f7b6:	8023      	strh	r3, [r4, #0]
    if (error) {
 800f7b8:	2214      	movs	r2, #20
 800f7ba:	18bb      	adds	r3, r7, r2
 800f7bc:	2100      	movs	r1, #0
 800f7be:	5e5b      	ldrsh	r3, [r3, r1]
 800f7c0:	2b00      	cmp	r3, #0
 800f7c2:	d003      	beq.n	800f7cc <sen5x_set_temperature_offset_parameters+0xac>
        return error;
 800f7c4:	18bb      	adds	r3, r7, r2
 800f7c6:	2200      	movs	r2, #0
 800f7c8:	5e9b      	ldrsh	r3, [r3, r2]
 800f7ca:	e004      	b.n	800f7d6 <sen5x_set_temperature_offset_parameters+0xb6>
    }
    sensirion_i2c_hal_sleep_usec(20000);
 800f7cc:	4b05      	ldr	r3, [pc, #20]	@ (800f7e4 <sen5x_set_temperature_offset_parameters+0xc4>)
 800f7ce:	0018      	movs	r0, r3
 800f7d0:	f7ff fbd0 	bl	800ef74 <sensirion_i2c_hal_sleep_usec>
    return NO_ERROR;
 800f7d4:	2300      	movs	r3, #0
}
 800f7d6:	0018      	movs	r0, r3
 800f7d8:	46bd      	mov	sp, r7
 800f7da:	b007      	add	sp, #28
 800f7dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f7de:	46c0      	nop			@ (mov r8, r8)
 800f7e0:	000060b2 	.word	0x000060b2
 800f7e4:	00004e20 	.word	0x00004e20

0800f7e8 <sen5x_get_product_name>:
    *interval = sensirion_common_bytes_to_uint32_t(&buffer[0]);
    return NO_ERROR;
}

int16_t sen5x_get_product_name(unsigned char* product_name,
                               uint8_t product_name_size) {
 800f7e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f7ea:	b091      	sub	sp, #68	@ 0x44
 800f7ec:	af00      	add	r7, sp, #0
 800f7ee:	6078      	str	r0, [r7, #4]
 800f7f0:	000a      	movs	r2, r1
 800f7f2:	1cfb      	adds	r3, r7, #3
 800f7f4:	701a      	strb	r2, [r3, #0]
    int16_t error;
    uint8_t buffer[48];
    uint16_t offset = 0;
 800f7f6:	253e      	movs	r5, #62	@ 0x3e
 800f7f8:	197b      	adds	r3, r7, r5
 800f7fa:	2200      	movs	r2, #0
 800f7fc:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0xD014);
 800f7fe:	197c      	adds	r4, r7, r5
 800f800:	4a22      	ldr	r2, [pc, #136]	@ (800f88c <sen5x_get_product_name+0xa4>)
 800f802:	197b      	adds	r3, r7, r5
 800f804:	8819      	ldrh	r1, [r3, #0]
 800f806:	230c      	movs	r3, #12
 800f808:	18fb      	adds	r3, r7, r3
 800f80a:	0018      	movs	r0, r3
 800f80c:	f001 f94b 	bl	8010aa6 <sensirion_i2c_add_command_to_buffer>
 800f810:	0003      	movs	r3, r0
 800f812:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 800f814:	263c      	movs	r6, #60	@ 0x3c
 800f816:	19bc      	adds	r4, r7, r6
 800f818:	197b      	adds	r3, r7, r5
 800f81a:	881a      	ldrh	r2, [r3, #0]
 800f81c:	230c      	movs	r3, #12
 800f81e:	18fb      	adds	r3, r7, r3
 800f820:	0019      	movs	r1, r3
 800f822:	2069      	movs	r0, #105	@ 0x69
 800f824:	f001 f9c3 	bl	8010bae <sensirion_i2c_write_data>
 800f828:	0003      	movs	r3, r0
 800f82a:	8023      	strh	r3, [r4, #0]
    if (error) {
 800f82c:	19bb      	adds	r3, r7, r6
 800f82e:	2200      	movs	r2, #0
 800f830:	5e9b      	ldrsh	r3, [r3, r2]
 800f832:	2b00      	cmp	r3, #0
 800f834:	d003      	beq.n	800f83e <sen5x_get_product_name+0x56>
        return error;
 800f836:	19bb      	adds	r3, r7, r6
 800f838:	2200      	movs	r2, #0
 800f83a:	5e9b      	ldrsh	r3, [r3, r2]
 800f83c:	e021      	b.n	800f882 <sen5x_get_product_name+0x9a>
    }

    sensirion_i2c_hal_sleep_usec(50000);
 800f83e:	4b14      	ldr	r3, [pc, #80]	@ (800f890 <sen5x_get_product_name+0xa8>)
 800f840:	0018      	movs	r0, r3
 800f842:	f7ff fb97 	bl	800ef74 <sensirion_i2c_hal_sleep_usec>

    error = sensirion_i2c_read_data_inplace(SEN5X_I2C_ADDRESS, &buffer[0], 32);
 800f846:	253c      	movs	r5, #60	@ 0x3c
 800f848:	197c      	adds	r4, r7, r5
 800f84a:	230c      	movs	r3, #12
 800f84c:	18fb      	adds	r3, r7, r3
 800f84e:	2220      	movs	r2, #32
 800f850:	0019      	movs	r1, r3
 800f852:	2069      	movs	r0, #105	@ 0x69
 800f854:	f001 f9c3 	bl	8010bde <sensirion_i2c_read_data_inplace>
 800f858:	0003      	movs	r3, r0
 800f85a:	8023      	strh	r3, [r4, #0]
    if (error) {
 800f85c:	197b      	adds	r3, r7, r5
 800f85e:	2200      	movs	r2, #0
 800f860:	5e9b      	ldrsh	r3, [r3, r2]
 800f862:	2b00      	cmp	r3, #0
 800f864:	d003      	beq.n	800f86e <sen5x_get_product_name+0x86>
        return error;
 800f866:	197b      	adds	r3, r7, r5
 800f868:	2200      	movs	r2, #0
 800f86a:	5e9b      	ldrsh	r3, [r3, r2]
 800f86c:	e009      	b.n	800f882 <sen5x_get_product_name+0x9a>
    }
    sensirion_common_copy_bytes(&buffer[0], product_name, product_name_size);
 800f86e:	1cfb      	adds	r3, r7, #3
 800f870:	781b      	ldrb	r3, [r3, #0]
 800f872:	b29a      	uxth	r2, r3
 800f874:	6879      	ldr	r1, [r7, #4]
 800f876:	230c      	movs	r3, #12
 800f878:	18fb      	adds	r3, r7, r3
 800f87a:	0018      	movs	r0, r3
 800f87c:	f000 f989 	bl	800fb92 <sensirion_common_copy_bytes>
    return NO_ERROR;
 800f880:	2300      	movs	r3, #0
}
 800f882:	0018      	movs	r0, r3
 800f884:	46bd      	mov	sp, r7
 800f886:	b011      	add	sp, #68	@ 0x44
 800f888:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f88a:	46c0      	nop			@ (mov r8, r8)
 800f88c:	0000d014 	.word	0x0000d014
 800f890:	0000c350 	.word	0x0000c350

0800f894 <sen5x_get_serial_number>:

int16_t sen5x_get_serial_number(unsigned char* serial_number,
                                uint8_t serial_number_size) {
 800f894:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f896:	b091      	sub	sp, #68	@ 0x44
 800f898:	af00      	add	r7, sp, #0
 800f89a:	6078      	str	r0, [r7, #4]
 800f89c:	000a      	movs	r2, r1
 800f89e:	1cfb      	adds	r3, r7, #3
 800f8a0:	701a      	strb	r2, [r3, #0]
    int16_t error;
    uint8_t buffer[48];
    uint16_t offset = 0;
 800f8a2:	253e      	movs	r5, #62	@ 0x3e
 800f8a4:	197b      	adds	r3, r7, r5
 800f8a6:	2200      	movs	r2, #0
 800f8a8:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0xD033);
 800f8aa:	197c      	adds	r4, r7, r5
 800f8ac:	4a22      	ldr	r2, [pc, #136]	@ (800f938 <sen5x_get_serial_number+0xa4>)
 800f8ae:	197b      	adds	r3, r7, r5
 800f8b0:	8819      	ldrh	r1, [r3, #0]
 800f8b2:	230c      	movs	r3, #12
 800f8b4:	18fb      	adds	r3, r7, r3
 800f8b6:	0018      	movs	r0, r3
 800f8b8:	f001 f8f5 	bl	8010aa6 <sensirion_i2c_add_command_to_buffer>
 800f8bc:	0003      	movs	r3, r0
 800f8be:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 800f8c0:	263c      	movs	r6, #60	@ 0x3c
 800f8c2:	19bc      	adds	r4, r7, r6
 800f8c4:	197b      	adds	r3, r7, r5
 800f8c6:	881a      	ldrh	r2, [r3, #0]
 800f8c8:	230c      	movs	r3, #12
 800f8ca:	18fb      	adds	r3, r7, r3
 800f8cc:	0019      	movs	r1, r3
 800f8ce:	2069      	movs	r0, #105	@ 0x69
 800f8d0:	f001 f96d 	bl	8010bae <sensirion_i2c_write_data>
 800f8d4:	0003      	movs	r3, r0
 800f8d6:	8023      	strh	r3, [r4, #0]
    if (error) {
 800f8d8:	19bb      	adds	r3, r7, r6
 800f8da:	2200      	movs	r2, #0
 800f8dc:	5e9b      	ldrsh	r3, [r3, r2]
 800f8de:	2b00      	cmp	r3, #0
 800f8e0:	d003      	beq.n	800f8ea <sen5x_get_serial_number+0x56>
        return error;
 800f8e2:	19bb      	adds	r3, r7, r6
 800f8e4:	2200      	movs	r2, #0
 800f8e6:	5e9b      	ldrsh	r3, [r3, r2]
 800f8e8:	e021      	b.n	800f92e <sen5x_get_serial_number+0x9a>
    }

    sensirion_i2c_hal_sleep_usec(50000);
 800f8ea:	4b14      	ldr	r3, [pc, #80]	@ (800f93c <sen5x_get_serial_number+0xa8>)
 800f8ec:	0018      	movs	r0, r3
 800f8ee:	f7ff fb41 	bl	800ef74 <sensirion_i2c_hal_sleep_usec>

    error = sensirion_i2c_read_data_inplace(SEN5X_I2C_ADDRESS, &buffer[0], 32);
 800f8f2:	253c      	movs	r5, #60	@ 0x3c
 800f8f4:	197c      	adds	r4, r7, r5
 800f8f6:	230c      	movs	r3, #12
 800f8f8:	18fb      	adds	r3, r7, r3
 800f8fa:	2220      	movs	r2, #32
 800f8fc:	0019      	movs	r1, r3
 800f8fe:	2069      	movs	r0, #105	@ 0x69
 800f900:	f001 f96d 	bl	8010bde <sensirion_i2c_read_data_inplace>
 800f904:	0003      	movs	r3, r0
 800f906:	8023      	strh	r3, [r4, #0]
    if (error) {
 800f908:	197b      	adds	r3, r7, r5
 800f90a:	2200      	movs	r2, #0
 800f90c:	5e9b      	ldrsh	r3, [r3, r2]
 800f90e:	2b00      	cmp	r3, #0
 800f910:	d003      	beq.n	800f91a <sen5x_get_serial_number+0x86>
        return error;
 800f912:	197b      	adds	r3, r7, r5
 800f914:	2200      	movs	r2, #0
 800f916:	5e9b      	ldrsh	r3, [r3, r2]
 800f918:	e009      	b.n	800f92e <sen5x_get_serial_number+0x9a>
    }
    sensirion_common_copy_bytes(&buffer[0], serial_number, serial_number_size);
 800f91a:	1cfb      	adds	r3, r7, #3
 800f91c:	781b      	ldrb	r3, [r3, #0]
 800f91e:	b29a      	uxth	r2, r3
 800f920:	6879      	ldr	r1, [r7, #4]
 800f922:	230c      	movs	r3, #12
 800f924:	18fb      	adds	r3, r7, r3
 800f926:	0018      	movs	r0, r3
 800f928:	f000 f933 	bl	800fb92 <sensirion_common_copy_bytes>
    return NO_ERROR;
 800f92c:	2300      	movs	r3, #0
}
 800f92e:	0018      	movs	r0, r3
 800f930:	46bd      	mov	sp, r7
 800f932:	b011      	add	sp, #68	@ 0x44
 800f934:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f936:	46c0      	nop			@ (mov r8, r8)
 800f938:	0000d033 	.word	0x0000d033
 800f93c:	0000c350 	.word	0x0000c350

0800f940 <sen5x_get_version>:

int16_t sen5x_get_version(uint8_t* firmware_major, uint8_t* firmware_minor,
                          bool* firmware_debug, uint8_t* hardware_major,
                          uint8_t* hardware_minor, uint8_t* protocol_major,
                          uint8_t* protocol_minor) {
 800f940:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f942:	b089      	sub	sp, #36	@ 0x24
 800f944:	af00      	add	r7, sp, #0
 800f946:	60f8      	str	r0, [r7, #12]
 800f948:	60b9      	str	r1, [r7, #8]
 800f94a:	607a      	str	r2, [r7, #4]
 800f94c:	603b      	str	r3, [r7, #0]
    int16_t error;
    uint8_t buffer[12];
    uint16_t offset = 0;
 800f94e:	251e      	movs	r5, #30
 800f950:	197b      	adds	r3, r7, r5
 800f952:	2200      	movs	r2, #0
 800f954:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0xD100);
 800f956:	197c      	adds	r4, r7, r5
 800f958:	23d1      	movs	r3, #209	@ 0xd1
 800f95a:	021a      	lsls	r2, r3, #8
 800f95c:	197b      	adds	r3, r7, r5
 800f95e:	8819      	ldrh	r1, [r3, #0]
 800f960:	2310      	movs	r3, #16
 800f962:	18fb      	adds	r3, r7, r3
 800f964:	0018      	movs	r0, r3
 800f966:	f001 f89e 	bl	8010aa6 <sensirion_i2c_add_command_to_buffer>
 800f96a:	0003      	movs	r3, r0
 800f96c:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 800f96e:	261c      	movs	r6, #28
 800f970:	19bc      	adds	r4, r7, r6
 800f972:	197b      	adds	r3, r7, r5
 800f974:	881a      	ldrh	r2, [r3, #0]
 800f976:	2310      	movs	r3, #16
 800f978:	18fb      	adds	r3, r7, r3
 800f97a:	0019      	movs	r1, r3
 800f97c:	2069      	movs	r0, #105	@ 0x69
 800f97e:	f001 f916 	bl	8010bae <sensirion_i2c_write_data>
 800f982:	0003      	movs	r3, r0
 800f984:	8023      	strh	r3, [r4, #0]
    if (error) {
 800f986:	19bb      	adds	r3, r7, r6
 800f988:	2200      	movs	r2, #0
 800f98a:	5e9b      	ldrsh	r3, [r3, r2]
 800f98c:	2b00      	cmp	r3, #0
 800f98e:	d003      	beq.n	800f998 <sen5x_get_version+0x58>
        return error;
 800f990:	19bb      	adds	r3, r7, r6
 800f992:	2200      	movs	r2, #0
 800f994:	5e9b      	ldrsh	r3, [r3, r2]
 800f996:	e038      	b.n	800fa0a <sen5x_get_version+0xca>
    }

    sensirion_i2c_hal_sleep_usec(20000);
 800f998:	4b1e      	ldr	r3, [pc, #120]	@ (800fa14 <sen5x_get_version+0xd4>)
 800f99a:	0018      	movs	r0, r3
 800f99c:	f7ff faea 	bl	800ef74 <sensirion_i2c_hal_sleep_usec>

    error = sensirion_i2c_read_data_inplace(SEN5X_I2C_ADDRESS, &buffer[0], 8);
 800f9a0:	251c      	movs	r5, #28
 800f9a2:	197c      	adds	r4, r7, r5
 800f9a4:	2310      	movs	r3, #16
 800f9a6:	18fb      	adds	r3, r7, r3
 800f9a8:	2208      	movs	r2, #8
 800f9aa:	0019      	movs	r1, r3
 800f9ac:	2069      	movs	r0, #105	@ 0x69
 800f9ae:	f001 f916 	bl	8010bde <sensirion_i2c_read_data_inplace>
 800f9b2:	0003      	movs	r3, r0
 800f9b4:	8023      	strh	r3, [r4, #0]
    if (error) {
 800f9b6:	197b      	adds	r3, r7, r5
 800f9b8:	2200      	movs	r2, #0
 800f9ba:	5e9b      	ldrsh	r3, [r3, r2]
 800f9bc:	2b00      	cmp	r3, #0
 800f9be:	d003      	beq.n	800f9c8 <sen5x_get_version+0x88>
        return error;
 800f9c0:	197b      	adds	r3, r7, r5
 800f9c2:	2200      	movs	r2, #0
 800f9c4:	5e9b      	ldrsh	r3, [r3, r2]
 800f9c6:	e020      	b.n	800fa0a <sen5x_get_version+0xca>
    }
    *firmware_major = buffer[0];
 800f9c8:	2110      	movs	r1, #16
 800f9ca:	187b      	adds	r3, r7, r1
 800f9cc:	781a      	ldrb	r2, [r3, #0]
 800f9ce:	68fb      	ldr	r3, [r7, #12]
 800f9d0:	701a      	strb	r2, [r3, #0]
    *firmware_minor = buffer[1];
 800f9d2:	187b      	adds	r3, r7, r1
 800f9d4:	785a      	ldrb	r2, [r3, #1]
 800f9d6:	68bb      	ldr	r3, [r7, #8]
 800f9d8:	701a      	strb	r2, [r3, #0]
    *firmware_debug = buffer[2];
 800f9da:	187b      	adds	r3, r7, r1
 800f9dc:	789b      	ldrb	r3, [r3, #2]
 800f9de:	1e5a      	subs	r2, r3, #1
 800f9e0:	4193      	sbcs	r3, r2
 800f9e2:	b2da      	uxtb	r2, r3
 800f9e4:	687b      	ldr	r3, [r7, #4]
 800f9e6:	701a      	strb	r2, [r3, #0]
    *hardware_major = buffer[3];
 800f9e8:	187b      	adds	r3, r7, r1
 800f9ea:	78da      	ldrb	r2, [r3, #3]
 800f9ec:	683b      	ldr	r3, [r7, #0]
 800f9ee:	701a      	strb	r2, [r3, #0]
    *hardware_minor = buffer[4];
 800f9f0:	187b      	adds	r3, r7, r1
 800f9f2:	791a      	ldrb	r2, [r3, #4]
 800f9f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f9f6:	701a      	strb	r2, [r3, #0]
    *protocol_major = buffer[5];
 800f9f8:	187b      	adds	r3, r7, r1
 800f9fa:	795a      	ldrb	r2, [r3, #5]
 800f9fc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f9fe:	701a      	strb	r2, [r3, #0]
    *protocol_minor = buffer[6];
 800fa00:	187b      	adds	r3, r7, r1
 800fa02:	799a      	ldrb	r2, [r3, #6]
 800fa04:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800fa06:	701a      	strb	r2, [r3, #0]
    return NO_ERROR;
 800fa08:	2300      	movs	r3, #0
}
 800fa0a:	0018      	movs	r0, r3
 800fa0c:	46bd      	mov	sp, r7
 800fa0e:	b009      	add	sp, #36	@ 0x24
 800fa10:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fa12:	46c0      	nop			@ (mov r8, r8)
 800fa14:	00004e20 	.word	0x00004e20

0800fa18 <sen5x_read_device_status>:

int16_t sen5x_read_device_status(uint32_t* device_status) {
 800fa18:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fa1a:	b087      	sub	sp, #28
 800fa1c:	af00      	add	r7, sp, #0
 800fa1e:	6078      	str	r0, [r7, #4]
    int16_t error;
    uint8_t buffer[6];
    uint16_t offset = 0;
 800fa20:	2516      	movs	r5, #22
 800fa22:	197b      	adds	r3, r7, r5
 800fa24:	2200      	movs	r2, #0
 800fa26:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0xD206);
 800fa28:	197c      	adds	r4, r7, r5
 800fa2a:	4a21      	ldr	r2, [pc, #132]	@ (800fab0 <sen5x_read_device_status+0x98>)
 800fa2c:	197b      	adds	r3, r7, r5
 800fa2e:	8819      	ldrh	r1, [r3, #0]
 800fa30:	260c      	movs	r6, #12
 800fa32:	19bb      	adds	r3, r7, r6
 800fa34:	0018      	movs	r0, r3
 800fa36:	f001 f836 	bl	8010aa6 <sensirion_i2c_add_command_to_buffer>
 800fa3a:	0003      	movs	r3, r0
 800fa3c:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 800fa3e:	2314      	movs	r3, #20
 800fa40:	18fc      	adds	r4, r7, r3
 800fa42:	197b      	adds	r3, r7, r5
 800fa44:	881a      	ldrh	r2, [r3, #0]
 800fa46:	19bb      	adds	r3, r7, r6
 800fa48:	0019      	movs	r1, r3
 800fa4a:	2069      	movs	r0, #105	@ 0x69
 800fa4c:	f001 f8af 	bl	8010bae <sensirion_i2c_write_data>
 800fa50:	0003      	movs	r3, r0
 800fa52:	8023      	strh	r3, [r4, #0]
    if (error) {
 800fa54:	2314      	movs	r3, #20
 800fa56:	18fb      	adds	r3, r7, r3
 800fa58:	2200      	movs	r2, #0
 800fa5a:	5e9b      	ldrsh	r3, [r3, r2]
 800fa5c:	2b00      	cmp	r3, #0
 800fa5e:	d001      	beq.n	800fa64 <sen5x_read_device_status+0x4c>
        return 0xD206;
 800fa60:	4b14      	ldr	r3, [pc, #80]	@ (800fab4 <sen5x_read_device_status+0x9c>)
 800fa62:	e020      	b.n	800faa6 <sen5x_read_device_status+0x8e>
    }

    sensirion_i2c_hal_sleep_usec(20000);
 800fa64:	4b14      	ldr	r3, [pc, #80]	@ (800fab8 <sen5x_read_device_status+0xa0>)
 800fa66:	0018      	movs	r0, r3
 800fa68:	f7ff fa84 	bl	800ef74 <sensirion_i2c_hal_sleep_usec>

    error = sensirion_i2c_read_data_inplace(SEN5X_I2C_ADDRESS, &buffer[0], 4);
 800fa6c:	2514      	movs	r5, #20
 800fa6e:	197c      	adds	r4, r7, r5
 800fa70:	230c      	movs	r3, #12
 800fa72:	18fb      	adds	r3, r7, r3
 800fa74:	2204      	movs	r2, #4
 800fa76:	0019      	movs	r1, r3
 800fa78:	2069      	movs	r0, #105	@ 0x69
 800fa7a:	f001 f8b0 	bl	8010bde <sensirion_i2c_read_data_inplace>
 800fa7e:	0003      	movs	r3, r0
 800fa80:	8023      	strh	r3, [r4, #0]
    if (error) {
 800fa82:	197b      	adds	r3, r7, r5
 800fa84:	2200      	movs	r2, #0
 800fa86:	5e9b      	ldrsh	r3, [r3, r2]
 800fa88:	2b00      	cmp	r3, #0
 800fa8a:	d003      	beq.n	800fa94 <sen5x_read_device_status+0x7c>
        return error;
 800fa8c:	197b      	adds	r3, r7, r5
 800fa8e:	2200      	movs	r2, #0
 800fa90:	5e9b      	ldrsh	r3, [r3, r2]
 800fa92:	e008      	b.n	800faa6 <sen5x_read_device_status+0x8e>
    }
    *device_status = sensirion_common_bytes_to_uint32_t(&buffer[0]);
 800fa94:	230c      	movs	r3, #12
 800fa96:	18fb      	adds	r3, r7, r3
 800fa98:	0018      	movs	r0, r3
 800fa9a:	f000 f853 	bl	800fb44 <sensirion_common_bytes_to_uint32_t>
 800fa9e:	0002      	movs	r2, r0
 800faa0:	687b      	ldr	r3, [r7, #4]
 800faa2:	601a      	str	r2, [r3, #0]
    return NO_ERROR;
 800faa4:	2300      	movs	r3, #0
}
 800faa6:	0018      	movs	r0, r3
 800faa8:	46bd      	mov	sp, r7
 800faaa:	b007      	add	sp, #28
 800faac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800faae:	46c0      	nop			@ (mov r8, r8)
 800fab0:	0000d206 	.word	0x0000d206
 800fab4:	ffffd206 	.word	0xffffd206
 800fab8:	00004e20 	.word	0x00004e20

0800fabc <sen5x_device_reset>:
    }
    *device_status = sensirion_common_bytes_to_uint32_t(&buffer[0]);
    return NO_ERROR;
}

int16_t sen5x_device_reset(void) {
 800fabc:	b590      	push	{r4, r7, lr}
 800fabe:	b083      	sub	sp, #12
 800fac0:	af00      	add	r7, sp, #0
    int16_t error;
    uint8_t buffer[2];
    uint16_t offset = 0;
 800fac2:	1dbb      	adds	r3, r7, #6
 800fac4:	2200      	movs	r2, #0
 800fac6:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0xD304);
 800fac8:	1dbc      	adds	r4, r7, #6
 800faca:	4a12      	ldr	r2, [pc, #72]	@ (800fb14 <sen5x_device_reset+0x58>)
 800facc:	1dbb      	adds	r3, r7, #6
 800face:	8819      	ldrh	r1, [r3, #0]
 800fad0:	003b      	movs	r3, r7
 800fad2:	0018      	movs	r0, r3
 800fad4:	f000 ffe7 	bl	8010aa6 <sensirion_i2c_add_command_to_buffer>
 800fad8:	0003      	movs	r3, r0
 800fada:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 800fadc:	1d3c      	adds	r4, r7, #4
 800fade:	1dbb      	adds	r3, r7, #6
 800fae0:	881a      	ldrh	r2, [r3, #0]
 800fae2:	003b      	movs	r3, r7
 800fae4:	0019      	movs	r1, r3
 800fae6:	2069      	movs	r0, #105	@ 0x69
 800fae8:	f001 f861 	bl	8010bae <sensirion_i2c_write_data>
 800faec:	0003      	movs	r3, r0
 800faee:	8023      	strh	r3, [r4, #0]
    if (error) {
 800faf0:	1d3b      	adds	r3, r7, #4
 800faf2:	2200      	movs	r2, #0
 800faf4:	5e9b      	ldrsh	r3, [r3, r2]
 800faf6:	2b00      	cmp	r3, #0
 800faf8:	d003      	beq.n	800fb02 <sen5x_device_reset+0x46>
        return error;
 800fafa:	1d3b      	adds	r3, r7, #4
 800fafc:	2200      	movs	r2, #0
 800fafe:	5e9b      	ldrsh	r3, [r3, r2]
 800fb00:	e004      	b.n	800fb0c <sen5x_device_reset+0x50>
    }
    sensirion_i2c_hal_sleep_usec(200000);
 800fb02:	4b05      	ldr	r3, [pc, #20]	@ (800fb18 <sen5x_device_reset+0x5c>)
 800fb04:	0018      	movs	r0, r3
 800fb06:	f7ff fa35 	bl	800ef74 <sensirion_i2c_hal_sleep_usec>
    return NO_ERROR;
 800fb0a:	2300      	movs	r3, #0
}
 800fb0c:	0018      	movs	r0, r3
 800fb0e:	46bd      	mov	sp, r7
 800fb10:	b003      	add	sp, #12
 800fb12:	bd90      	pop	{r4, r7, pc}
 800fb14:	0000d304 	.word	0x0000d304
 800fb18:	00030d40 	.word	0x00030d40

0800fb1c <sensirion_common_bytes_to_uint16_t>:
 */

#include "sensirion_common.h"
#include "sensirion_config.h"

uint16_t sensirion_common_bytes_to_uint16_t(const uint8_t* bytes) {
 800fb1c:	b580      	push	{r7, lr}
 800fb1e:	b082      	sub	sp, #8
 800fb20:	af00      	add	r7, sp, #0
 800fb22:	6078      	str	r0, [r7, #4]
    return (uint16_t)bytes[0] << 8 | (uint16_t)bytes[1];
 800fb24:	687b      	ldr	r3, [r7, #4]
 800fb26:	781b      	ldrb	r3, [r3, #0]
 800fb28:	b21b      	sxth	r3, r3
 800fb2a:	021b      	lsls	r3, r3, #8
 800fb2c:	b21a      	sxth	r2, r3
 800fb2e:	687b      	ldr	r3, [r7, #4]
 800fb30:	3301      	adds	r3, #1
 800fb32:	781b      	ldrb	r3, [r3, #0]
 800fb34:	b21b      	sxth	r3, r3
 800fb36:	4313      	orrs	r3, r2
 800fb38:	b21b      	sxth	r3, r3
 800fb3a:	b29b      	uxth	r3, r3
}
 800fb3c:	0018      	movs	r0, r3
 800fb3e:	46bd      	mov	sp, r7
 800fb40:	b002      	add	sp, #8
 800fb42:	bd80      	pop	{r7, pc}

0800fb44 <sensirion_common_bytes_to_uint32_t>:

uint32_t sensirion_common_bytes_to_uint32_t(const uint8_t* bytes) {
 800fb44:	b580      	push	{r7, lr}
 800fb46:	b082      	sub	sp, #8
 800fb48:	af00      	add	r7, sp, #0
 800fb4a:	6078      	str	r0, [r7, #4]
    return (uint32_t)bytes[0] << 24 | (uint32_t)bytes[1] << 16 |
 800fb4c:	687b      	ldr	r3, [r7, #4]
 800fb4e:	781b      	ldrb	r3, [r3, #0]
 800fb50:	061a      	lsls	r2, r3, #24
 800fb52:	687b      	ldr	r3, [r7, #4]
 800fb54:	3301      	adds	r3, #1
 800fb56:	781b      	ldrb	r3, [r3, #0]
 800fb58:	041b      	lsls	r3, r3, #16
 800fb5a:	431a      	orrs	r2, r3
           (uint32_t)bytes[2] << 8 | (uint32_t)bytes[3];
 800fb5c:	687b      	ldr	r3, [r7, #4]
 800fb5e:	3302      	adds	r3, #2
 800fb60:	781b      	ldrb	r3, [r3, #0]
 800fb62:	021b      	lsls	r3, r3, #8
    return (uint32_t)bytes[0] << 24 | (uint32_t)bytes[1] << 16 |
 800fb64:	4313      	orrs	r3, r2
           (uint32_t)bytes[2] << 8 | (uint32_t)bytes[3];
 800fb66:	687a      	ldr	r2, [r7, #4]
 800fb68:	3203      	adds	r2, #3
 800fb6a:	7812      	ldrb	r2, [r2, #0]
 800fb6c:	4313      	orrs	r3, r2
}
 800fb6e:	0018      	movs	r0, r3
 800fb70:	46bd      	mov	sp, r7
 800fb72:	b002      	add	sp, #8
 800fb74:	bd80      	pop	{r7, pc}

0800fb76 <sensirion_common_bytes_to_int16_t>:

int16_t sensirion_common_bytes_to_int16_t(const uint8_t* bytes) {
 800fb76:	b580      	push	{r7, lr}
 800fb78:	b082      	sub	sp, #8
 800fb7a:	af00      	add	r7, sp, #0
 800fb7c:	6078      	str	r0, [r7, #4]
    return (int16_t)sensirion_common_bytes_to_uint16_t(bytes);
 800fb7e:	687b      	ldr	r3, [r7, #4]
 800fb80:	0018      	movs	r0, r3
 800fb82:	f7ff ffcb 	bl	800fb1c <sensirion_common_bytes_to_uint16_t>
 800fb86:	0003      	movs	r3, r0
 800fb88:	b21b      	sxth	r3, r3
}
 800fb8a:	0018      	movs	r0, r3
 800fb8c:	46bd      	mov	sp, r7
 800fb8e:	b002      	add	sp, #8
 800fb90:	bd80      	pop	{r7, pc}

0800fb92 <sensirion_common_copy_bytes>:
    tmp.float32 = value;
    sensirion_common_uint32_t_to_bytes(tmp.u32_value, bytes);
}

void sensirion_common_copy_bytes(const uint8_t* source, uint8_t* destination,
                                 uint16_t data_length) {
 800fb92:	b580      	push	{r7, lr}
 800fb94:	b086      	sub	sp, #24
 800fb96:	af00      	add	r7, sp, #0
 800fb98:	60f8      	str	r0, [r7, #12]
 800fb9a:	60b9      	str	r1, [r7, #8]
 800fb9c:	1dbb      	adds	r3, r7, #6
 800fb9e:	801a      	strh	r2, [r3, #0]
    uint16_t i;
    for (i = 0; i < data_length; i++) {
 800fba0:	2316      	movs	r3, #22
 800fba2:	18fb      	adds	r3, r7, r3
 800fba4:	2200      	movs	r2, #0
 800fba6:	801a      	strh	r2, [r3, #0]
 800fba8:	e00f      	b.n	800fbca <sensirion_common_copy_bytes+0x38>
        destination[i] = source[i];
 800fbaa:	2016      	movs	r0, #22
 800fbac:	183b      	adds	r3, r7, r0
 800fbae:	881b      	ldrh	r3, [r3, #0]
 800fbb0:	68fa      	ldr	r2, [r7, #12]
 800fbb2:	18d2      	adds	r2, r2, r3
 800fbb4:	183b      	adds	r3, r7, r0
 800fbb6:	881b      	ldrh	r3, [r3, #0]
 800fbb8:	68b9      	ldr	r1, [r7, #8]
 800fbba:	18cb      	adds	r3, r1, r3
 800fbbc:	7812      	ldrb	r2, [r2, #0]
 800fbbe:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < data_length; i++) {
 800fbc0:	183b      	adds	r3, r7, r0
 800fbc2:	881a      	ldrh	r2, [r3, #0]
 800fbc4:	183b      	adds	r3, r7, r0
 800fbc6:	3201      	adds	r2, #1
 800fbc8:	801a      	strh	r2, [r3, #0]
 800fbca:	2316      	movs	r3, #22
 800fbcc:	18fa      	adds	r2, r7, r3
 800fbce:	1dbb      	adds	r3, r7, #6
 800fbd0:	8812      	ldrh	r2, [r2, #0]
 800fbd2:	881b      	ldrh	r3, [r3, #0]
 800fbd4:	429a      	cmp	r2, r3
 800fbd6:	d3e8      	bcc.n	800fbaa <sensirion_common_copy_bytes+0x18>
    }
}
 800fbd8:	46c0      	nop			@ (mov r8, r8)
 800fbda:	46c0      	nop			@ (mov r8, r8)
 800fbdc:	46bd      	mov	sp, r7
 800fbde:	b006      	add	sp, #24
 800fbe0:	bd80      	pop	{r7, pc}
	...

0800fbe4 <GasIndexAlgorithm_init_with_sampling_interval>:
GasIndexAlgorithm__adaptive_lowpass__process(GasIndexAlgorithmParams* params,
                                             float sample);

void GasIndexAlgorithm_init_with_sampling_interval(
    GasIndexAlgorithmParams* params, int32_t algorithm_type,
    float sampling_interval) {
 800fbe4:	b580      	push	{r7, lr}
 800fbe6:	b084      	sub	sp, #16
 800fbe8:	af00      	add	r7, sp, #0
 800fbea:	60f8      	str	r0, [r7, #12]
 800fbec:	60b9      	str	r1, [r7, #8]
 800fbee:	607a      	str	r2, [r7, #4]
    params->mAlgorithm_Type = algorithm_type;
 800fbf0:	68fb      	ldr	r3, [r7, #12]
 800fbf2:	68ba      	ldr	r2, [r7, #8]
 800fbf4:	601a      	str	r2, [r3, #0]
    params->mSamplingInterval = sampling_interval;
 800fbf6:	68fb      	ldr	r3, [r7, #12]
 800fbf8:	687a      	ldr	r2, [r7, #4]
 800fbfa:	605a      	str	r2, [r3, #4]
    if ((algorithm_type == GasIndexAlgorithm_ALGORITHM_TYPE_NOX)) {
 800fbfc:	68bb      	ldr	r3, [r7, #8]
 800fbfe:	2b01      	cmp	r3, #1
 800fc00:	d113      	bne.n	800fc2a <GasIndexAlgorithm_init_with_sampling_interval+0x46>
        params->mIndex_Offset = GasIndexAlgorithm_NOX_INDEX_OFFSET_DEFAULT;
 800fc02:	68fb      	ldr	r3, [r7, #12]
 800fc04:	22fe      	movs	r2, #254	@ 0xfe
 800fc06:	0592      	lsls	r2, r2, #22
 800fc08:	609a      	str	r2, [r3, #8]
        params->mSraw_Minimum = GasIndexAlgorithm_NOX_SRAW_MINIMUM;
 800fc0a:	68fb      	ldr	r3, [r7, #12]
 800fc0c:	4a1a      	ldr	r2, [pc, #104]	@ (800fc78 <GasIndexAlgorithm_init_with_sampling_interval+0x94>)
 800fc0e:	60da      	str	r2, [r3, #12]
        params->mGating_Max_Duration_Minutes =
 800fc10:	68fb      	ldr	r3, [r7, #12]
 800fc12:	4a1a      	ldr	r2, [pc, #104]	@ (800fc7c <GasIndexAlgorithm_init_with_sampling_interval+0x98>)
 800fc14:	611a      	str	r2, [r3, #16]
            GasIndexAlgorithm_GATING_NOX_MAX_DURATION_MINUTES;
        params->mInit_Duration_Mean = GasIndexAlgorithm_INIT_DURATION_MEAN_NOX;
 800fc16:	68fb      	ldr	r3, [r7, #12]
 800fc18:	4a19      	ldr	r2, [pc, #100]	@ (800fc80 <GasIndexAlgorithm_init_with_sampling_interval+0x9c>)
 800fc1a:	615a      	str	r2, [r3, #20]
        params->mInit_Duration_Variance =
 800fc1c:	68fb      	ldr	r3, [r7, #12]
 800fc1e:	4a19      	ldr	r2, [pc, #100]	@ (800fc84 <GasIndexAlgorithm_init_with_sampling_interval+0xa0>)
 800fc20:	619a      	str	r2, [r3, #24]
            GasIndexAlgorithm_INIT_DURATION_VARIANCE_NOX;
        params->mGating_Threshold = GasIndexAlgorithm_GATING_THRESHOLD_NOX;
 800fc22:	68fb      	ldr	r3, [r7, #12]
 800fc24:	4a18      	ldr	r2, [pc, #96]	@ (800fc88 <GasIndexAlgorithm_init_with_sampling_interval+0xa4>)
 800fc26:	61da      	str	r2, [r3, #28]
 800fc28:	e011      	b.n	800fc4e <GasIndexAlgorithm_init_with_sampling_interval+0x6a>
    } else {
        params->mIndex_Offset = GasIndexAlgorithm_VOC_INDEX_OFFSET_DEFAULT;
 800fc2a:	68fb      	ldr	r3, [r7, #12]
 800fc2c:	4a17      	ldr	r2, [pc, #92]	@ (800fc8c <GasIndexAlgorithm_init_with_sampling_interval+0xa8>)
 800fc2e:	609a      	str	r2, [r3, #8]
        params->mSraw_Minimum = GasIndexAlgorithm_VOC_SRAW_MINIMUM;
 800fc30:	68fb      	ldr	r3, [r7, #12]
 800fc32:	4a17      	ldr	r2, [pc, #92]	@ (800fc90 <GasIndexAlgorithm_init_with_sampling_interval+0xac>)
 800fc34:	60da      	str	r2, [r3, #12]
        params->mGating_Max_Duration_Minutes =
 800fc36:	68fb      	ldr	r3, [r7, #12]
 800fc38:	4a16      	ldr	r2, [pc, #88]	@ (800fc94 <GasIndexAlgorithm_init_with_sampling_interval+0xb0>)
 800fc3a:	611a      	str	r2, [r3, #16]
            GasIndexAlgorithm_GATING_VOC_MAX_DURATION_MINUTES;
        params->mInit_Duration_Mean = GasIndexAlgorithm_INIT_DURATION_MEAN_VOC;
 800fc3c:	68fb      	ldr	r3, [r7, #12]
 800fc3e:	4a16      	ldr	r2, [pc, #88]	@ (800fc98 <GasIndexAlgorithm_init_with_sampling_interval+0xb4>)
 800fc40:	615a      	str	r2, [r3, #20]
        params->mInit_Duration_Variance =
 800fc42:	68fb      	ldr	r3, [r7, #12]
 800fc44:	4a15      	ldr	r2, [pc, #84]	@ (800fc9c <GasIndexAlgorithm_init_with_sampling_interval+0xb8>)
 800fc46:	619a      	str	r2, [r3, #24]
            GasIndexAlgorithm_INIT_DURATION_VARIANCE_VOC;
        params->mGating_Threshold = GasIndexAlgorithm_GATING_THRESHOLD_VOC;
 800fc48:	68fb      	ldr	r3, [r7, #12]
 800fc4a:	4a15      	ldr	r2, [pc, #84]	@ (800fca0 <GasIndexAlgorithm_init_with_sampling_interval+0xbc>)
 800fc4c:	61da      	str	r2, [r3, #28]
    }
    params->mIndex_Gain = GasIndexAlgorithm_INDEX_GAIN;
 800fc4e:	68fb      	ldr	r3, [r7, #12]
 800fc50:	4a14      	ldr	r2, [pc, #80]	@ (800fca4 <GasIndexAlgorithm_init_with_sampling_interval+0xc0>)
 800fc52:	621a      	str	r2, [r3, #32]
    params->mTau_Mean_Hours = GasIndexAlgorithm_TAU_MEAN_HOURS;
 800fc54:	68fb      	ldr	r3, [r7, #12]
 800fc56:	4a14      	ldr	r2, [pc, #80]	@ (800fca8 <GasIndexAlgorithm_init_with_sampling_interval+0xc4>)
 800fc58:	625a      	str	r2, [r3, #36]	@ 0x24
    params->mTau_Variance_Hours = GasIndexAlgorithm_TAU_VARIANCE_HOURS;
 800fc5a:	68fb      	ldr	r3, [r7, #12]
 800fc5c:	4a12      	ldr	r2, [pc, #72]	@ (800fca8 <GasIndexAlgorithm_init_with_sampling_interval+0xc4>)
 800fc5e:	629a      	str	r2, [r3, #40]	@ 0x28
    params->mSraw_Std_Initial = GasIndexAlgorithm_SRAW_STD_INITIAL;
 800fc60:	68fb      	ldr	r3, [r7, #12]
 800fc62:	4a12      	ldr	r2, [pc, #72]	@ (800fcac <GasIndexAlgorithm_init_with_sampling_interval+0xc8>)
 800fc64:	62da      	str	r2, [r3, #44]	@ 0x2c
    GasIndexAlgorithm_reset(params);
 800fc66:	68fb      	ldr	r3, [r7, #12]
 800fc68:	0018      	movs	r0, r3
 800fc6a:	f000 f831 	bl	800fcd0 <GasIndexAlgorithm_reset>
}
 800fc6e:	46c0      	nop			@ (mov r8, r8)
 800fc70:	46bd      	mov	sp, r7
 800fc72:	b004      	add	sp, #16
 800fc74:	bd80      	pop	{r7, pc}
 800fc76:	46c0      	nop			@ (mov r8, r8)
 800fc78:	00002710 	.word	0x00002710
 800fc7c:	44340000 	.word	0x44340000
 800fc80:	46859800 	.word	0x46859800
 800fc84:	46a05000 	.word	0x46a05000
 800fc88:	41f00000 	.word	0x41f00000
 800fc8c:	42c80000 	.word	0x42c80000
 800fc90:	00004e20 	.word	0x00004e20
 800fc94:	43340000 	.word	0x43340000
 800fc98:	4528c000 	.word	0x4528c000
 800fc9c:	45a32000 	.word	0x45a32000
 800fca0:	43aa0000 	.word	0x43aa0000
 800fca4:	43660000 	.word	0x43660000
 800fca8:	41400000 	.word	0x41400000
 800fcac:	42480000 	.word	0x42480000

0800fcb0 <GasIndexAlgorithm_init>:

void GasIndexAlgorithm_init(GasIndexAlgorithmParams* params,
                            int32_t algorithm_type) {
 800fcb0:	b580      	push	{r7, lr}
 800fcb2:	b082      	sub	sp, #8
 800fcb4:	af00      	add	r7, sp, #0
 800fcb6:	6078      	str	r0, [r7, #4]
 800fcb8:	6039      	str	r1, [r7, #0]
    GasIndexAlgorithm_init_with_sampling_interval(
 800fcba:	22fe      	movs	r2, #254	@ 0xfe
 800fcbc:	0592      	lsls	r2, r2, #22
 800fcbe:	6839      	ldr	r1, [r7, #0]
 800fcc0:	687b      	ldr	r3, [r7, #4]
 800fcc2:	0018      	movs	r0, r3
 800fcc4:	f7ff ff8e 	bl	800fbe4 <GasIndexAlgorithm_init_with_sampling_interval>
        params, algorithm_type, GasIndexAlgorithm_DEFAULT_SAMPLING_INTERVAL);
}
 800fcc8:	46c0      	nop			@ (mov r8, r8)
 800fcca:	46bd      	mov	sp, r7
 800fccc:	b002      	add	sp, #8
 800fcce:	bd80      	pop	{r7, pc}

0800fcd0 <GasIndexAlgorithm_reset>:

void GasIndexAlgorithm_reset(GasIndexAlgorithmParams* params) {
 800fcd0:	b580      	push	{r7, lr}
 800fcd2:	b082      	sub	sp, #8
 800fcd4:	af00      	add	r7, sp, #0
 800fcd6:	6078      	str	r0, [r7, #4]
    params->mUptime = 0.f;
 800fcd8:	687b      	ldr	r3, [r7, #4]
 800fcda:	2200      	movs	r2, #0
 800fcdc:	631a      	str	r2, [r3, #48]	@ 0x30
    params->mSraw = 0.f;
 800fcde:	687b      	ldr	r3, [r7, #4]
 800fce0:	2200      	movs	r2, #0
 800fce2:	635a      	str	r2, [r3, #52]	@ 0x34
    params->mGas_Index = 0;
 800fce4:	687b      	ldr	r3, [r7, #4]
 800fce6:	2200      	movs	r2, #0
 800fce8:	639a      	str	r2, [r3, #56]	@ 0x38
    GasIndexAlgorithm__init_instances(params);
 800fcea:	687b      	ldr	r3, [r7, #4]
 800fcec:	0018      	movs	r0, r3
 800fcee:	f000 f805 	bl	800fcfc <GasIndexAlgorithm__init_instances>
}
 800fcf2:	46c0      	nop			@ (mov r8, r8)
 800fcf4:	46bd      	mov	sp, r7
 800fcf6:	b002      	add	sp, #8
 800fcf8:	bd80      	pop	{r7, pc}
	...

0800fcfc <GasIndexAlgorithm__init_instances>:

static void GasIndexAlgorithm__init_instances(GasIndexAlgorithmParams* params) {
 800fcfc:	b590      	push	{r4, r7, lr}
 800fcfe:	b083      	sub	sp, #12
 800fd00:	af00      	add	r7, sp, #0
 800fd02:	6078      	str	r0, [r7, #4]

    GasIndexAlgorithm__mean_variance_estimator__set_parameters(params);
 800fd04:	687b      	ldr	r3, [r7, #4]
 800fd06:	0018      	movs	r0, r3
 800fd08:	f000 f8e8 	bl	800fedc <GasIndexAlgorithm__mean_variance_estimator__set_parameters>
    GasIndexAlgorithm__mox_model__set_parameters(
 800fd0c:	687b      	ldr	r3, [r7, #4]
 800fd0e:	0018      	movs	r0, r3
 800fd10:	f000 f9a6 	bl	8010060 <GasIndexAlgorithm__mean_variance_estimator__get_std>
 800fd14:	1c04      	adds	r4, r0, #0
 800fd16:	687b      	ldr	r3, [r7, #4]
 800fd18:	0018      	movs	r0, r3
 800fd1a:	f000 f9ab 	bl	8010074 <GasIndexAlgorithm__mean_variance_estimator__get_mean>
 800fd1e:	1c02      	adds	r2, r0, #0
 800fd20:	687b      	ldr	r3, [r7, #4]
 800fd22:	1c21      	adds	r1, r4, #0
 800fd24:	0018      	movs	r0, r3
 800fd26:	f000 fc3b 	bl	80105a0 <GasIndexAlgorithm__mox_model__set_parameters>
        params, GasIndexAlgorithm__mean_variance_estimator__get_std(params),
        GasIndexAlgorithm__mean_variance_estimator__get_mean(params));
    if ((params->mAlgorithm_Type == GasIndexAlgorithm_ALGORITHM_TYPE_NOX)) {
 800fd2a:	687b      	ldr	r3, [r7, #4]
 800fd2c:	681b      	ldr	r3, [r3, #0]
 800fd2e:	2b01      	cmp	r3, #1
 800fd30:	d107      	bne.n	800fd42 <GasIndexAlgorithm__init_instances+0x46>
        GasIndexAlgorithm__sigmoid_scaled__set_parameters(
 800fd32:	23fe      	movs	r3, #254	@ 0xfe
 800fd34:	059b      	lsls	r3, r3, #22
 800fd36:	4a0a      	ldr	r2, [pc, #40]	@ (800fd60 <GasIndexAlgorithm__init_instances+0x64>)
 800fd38:	490a      	ldr	r1, [pc, #40]	@ (800fd64 <GasIndexAlgorithm__init_instances+0x68>)
 800fd3a:	6878      	ldr	r0, [r7, #4]
 800fd3c:	f000 fc86 	bl	801064c <GasIndexAlgorithm__sigmoid_scaled__set_parameters>
 800fd40:	e005      	b.n	800fd4e <GasIndexAlgorithm__init_instances+0x52>
            params, GasIndexAlgorithm_SIGMOID_X0_NOX,
            GasIndexAlgorithm_SIGMOID_K_NOX,
            GasIndexAlgorithm_NOX_INDEX_OFFSET_DEFAULT);
    } else {
        GasIndexAlgorithm__sigmoid_scaled__set_parameters(
 800fd42:	4b09      	ldr	r3, [pc, #36]	@ (800fd68 <GasIndexAlgorithm__init_instances+0x6c>)
 800fd44:	4a09      	ldr	r2, [pc, #36]	@ (800fd6c <GasIndexAlgorithm__init_instances+0x70>)
 800fd46:	490a      	ldr	r1, [pc, #40]	@ (800fd70 <GasIndexAlgorithm__init_instances+0x74>)
 800fd48:	6878      	ldr	r0, [r7, #4]
 800fd4a:	f000 fc7f 	bl	801064c <GasIndexAlgorithm__sigmoid_scaled__set_parameters>
            params, GasIndexAlgorithm_SIGMOID_X0_VOC,
            GasIndexAlgorithm_SIGMOID_K_VOC,
            GasIndexAlgorithm_VOC_INDEX_OFFSET_DEFAULT);
    }
    GasIndexAlgorithm__adaptive_lowpass__set_parameters(params);
 800fd4e:	687b      	ldr	r3, [r7, #4]
 800fd50:	0018      	movs	r0, r3
 800fd52:	f000 fd35 	bl	80107c0 <GasIndexAlgorithm__adaptive_lowpass__set_parameters>
}
 800fd56:	46c0      	nop			@ (mov r8, r8)
 800fd58:	46bd      	mov	sp, r7
 800fd5a:	b003      	add	sp, #12
 800fd5c:	bd90      	pop	{r4, r7, pc}
 800fd5e:	46c0      	nop			@ (mov r8, r8)
 800fd60:	bc257a78 	.word	0xbc257a78
 800fd64:	44198000 	.word	0x44198000
 800fd68:	42c80000 	.word	0x42c80000
 800fd6c:	bbd4fdf4 	.word	0xbbd4fdf4
 800fd70:	43550000 	.word	0x43550000

0800fd74 <GasIndexAlgorithm_process>:
    *gain_factor = ((int32_t)(params->mIndex_Gain));
    return;
}

void GasIndexAlgorithm_process(GasIndexAlgorithmParams* params, int32_t sraw,
                               int32_t* gas_index) {
 800fd74:	b590      	push	{r4, r7, lr}
 800fd76:	b085      	sub	sp, #20
 800fd78:	af00      	add	r7, sp, #0
 800fd7a:	60f8      	str	r0, [r7, #12]
 800fd7c:	60b9      	str	r1, [r7, #8]
 800fd7e:	607a      	str	r2, [r7, #4]

    if ((params->mUptime <= GasIndexAlgorithm_INITIAL_BLACKOUT)) {
 800fd80:	68fb      	ldr	r3, [r7, #12]
 800fd82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800fd84:	4952      	ldr	r1, [pc, #328]	@ (800fed0 <GasIndexAlgorithm_process+0x15c>)
 800fd86:	1c18      	adds	r0, r3, #0
 800fd88:	f7f0 fbdc 	bl	8000544 <__aeabi_fcmple>
 800fd8c:	1e03      	subs	r3, r0, #0
 800fd8e:	d00c      	beq.n	800fdaa <GasIndexAlgorithm_process+0x36>
        params->mUptime = (params->mUptime + params->mSamplingInterval);
 800fd90:	68fb      	ldr	r3, [r7, #12]
 800fd92:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800fd94:	68fb      	ldr	r3, [r7, #12]
 800fd96:	685b      	ldr	r3, [r3, #4]
 800fd98:	1c19      	adds	r1, r3, #0
 800fd9a:	1c10      	adds	r0, r2, #0
 800fd9c:	f7f0 fd90 	bl	80008c0 <__aeabi_fadd>
 800fda0:	1c03      	adds	r3, r0, #0
 800fda2:	1c1a      	adds	r2, r3, #0
 800fda4:	68fb      	ldr	r3, [r7, #12]
 800fda6:	631a      	str	r2, [r3, #48]	@ 0x30
 800fda8:	e080      	b.n	800feac <GasIndexAlgorithm_process+0x138>
    } else {
        if (((sraw > 0) && (sraw < 65000))) {
 800fdaa:	68bb      	ldr	r3, [r7, #8]
 800fdac:	2b00      	cmp	r3, #0
 800fdae:	dd25      	ble.n	800fdfc <GasIndexAlgorithm_process+0x88>
 800fdb0:	68bb      	ldr	r3, [r7, #8]
 800fdb2:	4a48      	ldr	r2, [pc, #288]	@ (800fed4 <GasIndexAlgorithm_process+0x160>)
 800fdb4:	4293      	cmp	r3, r2
 800fdb6:	dc21      	bgt.n	800fdfc <GasIndexAlgorithm_process+0x88>
            if ((sraw < (params->mSraw_Minimum + 1))) {
 800fdb8:	68fb      	ldr	r3, [r7, #12]
 800fdba:	68db      	ldr	r3, [r3, #12]
 800fdbc:	68ba      	ldr	r2, [r7, #8]
 800fdbe:	429a      	cmp	r2, r3
 800fdc0:	dc04      	bgt.n	800fdcc <GasIndexAlgorithm_process+0x58>
                sraw = (params->mSraw_Minimum + 1);
 800fdc2:	68fb      	ldr	r3, [r7, #12]
 800fdc4:	68db      	ldr	r3, [r3, #12]
 800fdc6:	3301      	adds	r3, #1
 800fdc8:	60bb      	str	r3, [r7, #8]
 800fdca:	e00d      	b.n	800fde8 <GasIndexAlgorithm_process+0x74>
            } else if ((sraw > (params->mSraw_Minimum + 32767))) {
 800fdcc:	68fb      	ldr	r3, [r7, #12]
 800fdce:	68db      	ldr	r3, [r3, #12]
 800fdd0:	4a41      	ldr	r2, [pc, #260]	@ (800fed8 <GasIndexAlgorithm_process+0x164>)
 800fdd2:	4694      	mov	ip, r2
 800fdd4:	4463      	add	r3, ip
 800fdd6:	68ba      	ldr	r2, [r7, #8]
 800fdd8:	429a      	cmp	r2, r3
 800fdda:	dd05      	ble.n	800fde8 <GasIndexAlgorithm_process+0x74>
                sraw = (params->mSraw_Minimum + 32767);
 800fddc:	68fb      	ldr	r3, [r7, #12]
 800fdde:	68db      	ldr	r3, [r3, #12]
 800fde0:	4a3d      	ldr	r2, [pc, #244]	@ (800fed8 <GasIndexAlgorithm_process+0x164>)
 800fde2:	4694      	mov	ip, r2
 800fde4:	4463      	add	r3, ip
 800fde6:	60bb      	str	r3, [r7, #8]
            }
            params->mSraw = ((float)((sraw - params->mSraw_Minimum)));
 800fde8:	68fb      	ldr	r3, [r7, #12]
 800fdea:	68db      	ldr	r3, [r3, #12]
 800fdec:	68ba      	ldr	r2, [r7, #8]
 800fdee:	1ad3      	subs	r3, r2, r3
 800fdf0:	0018      	movs	r0, r3
 800fdf2:	f7f1 fd19 	bl	8001828 <__aeabi_i2f>
 800fdf6:	1c02      	adds	r2, r0, #0
 800fdf8:	68fb      	ldr	r3, [r7, #12]
 800fdfa:	635a      	str	r2, [r3, #52]	@ 0x34
        }
        if (((params->mAlgorithm_Type ==
 800fdfc:	68fb      	ldr	r3, [r7, #12]
 800fdfe:	681b      	ldr	r3, [r3, #0]
 800fe00:	2b00      	cmp	r3, #0
 800fe02:	d005      	beq.n	800fe10 <GasIndexAlgorithm_process+0x9c>
              GasIndexAlgorithm_ALGORITHM_TYPE_VOC) ||
             GasIndexAlgorithm__mean_variance_estimator__is_initialized(
 800fe04:	68fb      	ldr	r3, [r7, #12]
 800fe06:	0018      	movs	r0, r3
 800fe08:	f000 f945 	bl	8010096 <GasIndexAlgorithm__mean_variance_estimator__is_initialized>
 800fe0c:	1e03      	subs	r3, r0, #0
              GasIndexAlgorithm_ALGORITHM_TYPE_VOC) ||
 800fe0e:	d014      	beq.n	800fe3a <GasIndexAlgorithm_process+0xc6>
                 params))) {
            params->mGas_Index =
                GasIndexAlgorithm__mox_model__process(params, params->mSraw);
 800fe10:	68fb      	ldr	r3, [r7, #12]
 800fe12:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800fe14:	68fb      	ldr	r3, [r7, #12]
 800fe16:	1c11      	adds	r1, r2, #0
 800fe18:	0018      	movs	r0, r3
 800fe1a:	f000 fbd1 	bl	80105c0 <GasIndexAlgorithm__mox_model__process>
 800fe1e:	1c02      	adds	r2, r0, #0
            params->mGas_Index =
 800fe20:	68fb      	ldr	r3, [r7, #12]
 800fe22:	639a      	str	r2, [r3, #56]	@ 0x38
            params->mGas_Index = GasIndexAlgorithm__sigmoid_scaled__process(
 800fe24:	68fb      	ldr	r3, [r7, #12]
 800fe26:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800fe28:	68fb      	ldr	r3, [r7, #12]
 800fe2a:	1c11      	adds	r1, r2, #0
 800fe2c:	0018      	movs	r0, r3
 800fe2e:	f000 fc25 	bl	801067c <GasIndexAlgorithm__sigmoid_scaled__process>
 800fe32:	1c02      	adds	r2, r0, #0
 800fe34:	68fb      	ldr	r3, [r7, #12]
 800fe36:	639a      	str	r2, [r3, #56]	@ 0x38
 800fe38:	e003      	b.n	800fe42 <GasIndexAlgorithm_process+0xce>
                params, params->mGas_Index);
        } else {
            params->mGas_Index = params->mIndex_Offset;
 800fe3a:	68fb      	ldr	r3, [r7, #12]
 800fe3c:	689a      	ldr	r2, [r3, #8]
 800fe3e:	68fb      	ldr	r3, [r7, #12]
 800fe40:	639a      	str	r2, [r3, #56]	@ 0x38
        }
        params->mGas_Index = GasIndexAlgorithm__adaptive_lowpass__process(
 800fe42:	68fb      	ldr	r3, [r7, #12]
 800fe44:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800fe46:	68fb      	ldr	r3, [r7, #12]
 800fe48:	1c11      	adds	r1, r2, #0
 800fe4a:	0018      	movs	r0, r3
 800fe4c:	f000 fcec 	bl	8010828 <GasIndexAlgorithm__adaptive_lowpass__process>
 800fe50:	1c02      	adds	r2, r0, #0
 800fe52:	68fb      	ldr	r3, [r7, #12]
 800fe54:	639a      	str	r2, [r3, #56]	@ 0x38
            params, params->mGas_Index);
        if ((params->mGas_Index < 0.5f)) {
 800fe56:	68fb      	ldr	r3, [r7, #12]
 800fe58:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fe5a:	21fc      	movs	r1, #252	@ 0xfc
 800fe5c:	0589      	lsls	r1, r1, #22
 800fe5e:	1c18      	adds	r0, r3, #0
 800fe60:	f7f0 fb66 	bl	8000530 <__aeabi_fcmplt>
 800fe64:	1e03      	subs	r3, r0, #0
 800fe66:	d003      	beq.n	800fe70 <GasIndexAlgorithm_process+0xfc>
            params->mGas_Index = 0.5f;
 800fe68:	68fb      	ldr	r3, [r7, #12]
 800fe6a:	22fc      	movs	r2, #252	@ 0xfc
 800fe6c:	0592      	lsls	r2, r2, #22
 800fe6e:	639a      	str	r2, [r3, #56]	@ 0x38
        }
        if ((params->mSraw > 0.f)) {
 800fe70:	68fb      	ldr	r3, [r7, #12]
 800fe72:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800fe74:	2100      	movs	r1, #0
 800fe76:	1c18      	adds	r0, r3, #0
 800fe78:	f7f0 fb6e 	bl	8000558 <__aeabi_fcmpgt>
 800fe7c:	1e03      	subs	r3, r0, #0
 800fe7e:	d015      	beq.n	800feac <GasIndexAlgorithm_process+0x138>
            GasIndexAlgorithm__mean_variance_estimator__process(params,
 800fe80:	68fb      	ldr	r3, [r7, #12]
 800fe82:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800fe84:	68fb      	ldr	r3, [r7, #12]
 800fe86:	1c11      	adds	r1, r2, #0
 800fe88:	0018      	movs	r0, r3
 800fe8a:	f000 fa4f 	bl	801032c <GasIndexAlgorithm__mean_variance_estimator__process>
                                                                params->mSraw);
            GasIndexAlgorithm__mox_model__set_parameters(
 800fe8e:	68fb      	ldr	r3, [r7, #12]
 800fe90:	0018      	movs	r0, r3
 800fe92:	f000 f8e5 	bl	8010060 <GasIndexAlgorithm__mean_variance_estimator__get_std>
 800fe96:	1c04      	adds	r4, r0, #0
 800fe98:	68fb      	ldr	r3, [r7, #12]
 800fe9a:	0018      	movs	r0, r3
 800fe9c:	f000 f8ea 	bl	8010074 <GasIndexAlgorithm__mean_variance_estimator__get_mean>
 800fea0:	1c02      	adds	r2, r0, #0
 800fea2:	68fb      	ldr	r3, [r7, #12]
 800fea4:	1c21      	adds	r1, r4, #0
 800fea6:	0018      	movs	r0, r3
 800fea8:	f000 fb7a 	bl	80105a0 <GasIndexAlgorithm__mox_model__set_parameters>
                params,
                GasIndexAlgorithm__mean_variance_estimator__get_std(params),
                GasIndexAlgorithm__mean_variance_estimator__get_mean(params));
        }
    }
    *gas_index = ((int32_t)((params->mGas_Index + 0.5f)));
 800feac:	68fb      	ldr	r3, [r7, #12]
 800feae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800feb0:	21fc      	movs	r1, #252	@ 0xfc
 800feb2:	0589      	lsls	r1, r1, #22
 800feb4:	1c18      	adds	r0, r3, #0
 800feb6:	f7f0 fd03 	bl	80008c0 <__aeabi_fadd>
 800feba:	1c03      	adds	r3, r0, #0
 800febc:	1c18      	adds	r0, r3, #0
 800febe:	f7f1 fc93 	bl	80017e8 <__aeabi_f2iz>
 800fec2:	0002      	movs	r2, r0
 800fec4:	687b      	ldr	r3, [r7, #4]
 800fec6:	601a      	str	r2, [r3, #0]
    return;
 800fec8:	46c0      	nop			@ (mov r8, r8)
}
 800feca:	46bd      	mov	sp, r7
 800fecc:	b005      	add	sp, #20
 800fece:	bd90      	pop	{r4, r7, pc}
 800fed0:	42340000 	.word	0x42340000
 800fed4:	0000fde7 	.word	0x0000fde7
 800fed8:	00007fff 	.word	0x00007fff

0800fedc <GasIndexAlgorithm__mean_variance_estimator__set_parameters>:

static void GasIndexAlgorithm__mean_variance_estimator__set_parameters(
    GasIndexAlgorithmParams* params) {
 800fedc:	b5b0      	push	{r4, r5, r7, lr}
 800fede:	b082      	sub	sp, #8
 800fee0:	af00      	add	r7, sp, #0
 800fee2:	6078      	str	r0, [r7, #4]

    params->m_Mean_Variance_Estimator___Initialized = false;
 800fee4:	687b      	ldr	r3, [r7, #4]
 800fee6:	223c      	movs	r2, #60	@ 0x3c
 800fee8:	2100      	movs	r1, #0
 800feea:	5499      	strb	r1, [r3, r2]
    params->m_Mean_Variance_Estimator___Mean = 0.f;
 800feec:	687b      	ldr	r3, [r7, #4]
 800feee:	2200      	movs	r2, #0
 800fef0:	641a      	str	r2, [r3, #64]	@ 0x40
    params->m_Mean_Variance_Estimator___Sraw_Offset = 0.f;
 800fef2:	687b      	ldr	r3, [r7, #4]
 800fef4:	2200      	movs	r2, #0
 800fef6:	645a      	str	r2, [r3, #68]	@ 0x44
    params->m_Mean_Variance_Estimator___Std = params->mSraw_Std_Initial;
 800fef8:	687b      	ldr	r3, [r7, #4]
 800fefa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fefc:	687b      	ldr	r3, [r7, #4]
 800fefe:	649a      	str	r2, [r3, #72]	@ 0x48
    params->m_Mean_Variance_Estimator___Gamma_Mean =
        (((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__ADDITIONAL_GAMMA_MEAN_SCALING *
           GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
          (params->mSamplingInterval / 3600.f)) /
 800ff00:	687b      	ldr	r3, [r7, #4]
 800ff02:	685b      	ldr	r3, [r3, #4]
 800ff04:	4952      	ldr	r1, [pc, #328]	@ (8010050 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x174>)
 800ff06:	1c18      	adds	r0, r3, #0
 800ff08:	f7f0 fecc 	bl	8000ca4 <__aeabi_fdiv>
 800ff0c:	1c03      	adds	r3, r0, #0
           GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
 800ff0e:	2188      	movs	r1, #136	@ 0x88
 800ff10:	05c9      	lsls	r1, r1, #23
 800ff12:	1c18      	adds	r0, r3, #0
 800ff14:	f7f1 f894 	bl	8001040 <__aeabi_fmul>
 800ff18:	1c03      	adds	r3, r0, #0
 800ff1a:	1c1d      	adds	r5, r3, #0
         (params->mTau_Mean_Hours + (params->mSamplingInterval / 3600.f)));
 800ff1c:	687b      	ldr	r3, [r7, #4]
 800ff1e:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 800ff20:	687b      	ldr	r3, [r7, #4]
 800ff22:	685b      	ldr	r3, [r3, #4]
 800ff24:	494a      	ldr	r1, [pc, #296]	@ (8010050 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x174>)
 800ff26:	1c18      	adds	r0, r3, #0
 800ff28:	f7f0 febc 	bl	8000ca4 <__aeabi_fdiv>
 800ff2c:	1c03      	adds	r3, r0, #0
 800ff2e:	1c19      	adds	r1, r3, #0
 800ff30:	1c20      	adds	r0, r4, #0
 800ff32:	f7f0 fcc5 	bl	80008c0 <__aeabi_fadd>
 800ff36:	1c03      	adds	r3, r0, #0
          (params->mSamplingInterval / 3600.f)) /
 800ff38:	1c19      	adds	r1, r3, #0
 800ff3a:	1c28      	adds	r0, r5, #0
 800ff3c:	f7f0 feb2 	bl	8000ca4 <__aeabi_fdiv>
 800ff40:	1c03      	adds	r3, r0, #0
 800ff42:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator___Gamma_Mean =
 800ff44:	687b      	ldr	r3, [r7, #4]
 800ff46:	64da      	str	r2, [r3, #76]	@ 0x4c
    params->m_Mean_Variance_Estimator___Gamma_Variance =
        ((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING *
          (params->mSamplingInterval / 3600.f)) /
 800ff48:	687b      	ldr	r3, [r7, #4]
 800ff4a:	685b      	ldr	r3, [r3, #4]
 800ff4c:	4940      	ldr	r1, [pc, #256]	@ (8010050 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x174>)
 800ff4e:	1c18      	adds	r0, r3, #0
 800ff50:	f7f0 fea8 	bl	8000ca4 <__aeabi_fdiv>
 800ff54:	1c03      	adds	r3, r0, #0
        ((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING *
 800ff56:	2185      	movs	r1, #133	@ 0x85
 800ff58:	05c9      	lsls	r1, r1, #23
 800ff5a:	1c18      	adds	r0, r3, #0
 800ff5c:	f7f1 f870 	bl	8001040 <__aeabi_fmul>
 800ff60:	1c03      	adds	r3, r0, #0
 800ff62:	1c1d      	adds	r5, r3, #0
         (params->mTau_Variance_Hours + (params->mSamplingInterval / 3600.f)));
 800ff64:	687b      	ldr	r3, [r7, #4]
 800ff66:	6a9c      	ldr	r4, [r3, #40]	@ 0x28
 800ff68:	687b      	ldr	r3, [r7, #4]
 800ff6a:	685b      	ldr	r3, [r3, #4]
 800ff6c:	4938      	ldr	r1, [pc, #224]	@ (8010050 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x174>)
 800ff6e:	1c18      	adds	r0, r3, #0
 800ff70:	f7f0 fe98 	bl	8000ca4 <__aeabi_fdiv>
 800ff74:	1c03      	adds	r3, r0, #0
 800ff76:	1c19      	adds	r1, r3, #0
 800ff78:	1c20      	adds	r0, r4, #0
 800ff7a:	f7f0 fca1 	bl	80008c0 <__aeabi_fadd>
 800ff7e:	1c03      	adds	r3, r0, #0
          (params->mSamplingInterval / 3600.f)) /
 800ff80:	1c19      	adds	r1, r3, #0
 800ff82:	1c28      	adds	r0, r5, #0
 800ff84:	f7f0 fe8e 	bl	8000ca4 <__aeabi_fdiv>
 800ff88:	1c03      	adds	r3, r0, #0
 800ff8a:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator___Gamma_Variance =
 800ff8c:	687b      	ldr	r3, [r7, #4]
 800ff8e:	651a      	str	r2, [r3, #80]	@ 0x50
    if ((params->mAlgorithm_Type == GasIndexAlgorithm_ALGORITHM_TYPE_NOX)) {
 800ff90:	687b      	ldr	r3, [r7, #4]
 800ff92:	681b      	ldr	r3, [r3, #0]
 800ff94:	2b01      	cmp	r3, #1
 800ff96:	d118      	bne.n	800ffca <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0xee>
        params->m_Mean_Variance_Estimator___Gamma_Initial_Mean =
            (((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__ADDITIONAL_GAMMA_MEAN_SCALING *
               GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
              params->mSamplingInterval) /
 800ff98:	687b      	ldr	r3, [r7, #4]
 800ff9a:	685b      	ldr	r3, [r3, #4]
               GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
 800ff9c:	2188      	movs	r1, #136	@ 0x88
 800ff9e:	05c9      	lsls	r1, r1, #23
 800ffa0:	1c18      	adds	r0, r3, #0
 800ffa2:	f7f1 f84d 	bl	8001040 <__aeabi_fmul>
 800ffa6:	1c03      	adds	r3, r0, #0
 800ffa8:	1c1c      	adds	r4, r3, #0
             (GasIndexAlgorithm_TAU_INITIAL_MEAN_NOX +
              params->mSamplingInterval));
 800ffaa:	687b      	ldr	r3, [r7, #4]
 800ffac:	685b      	ldr	r3, [r3, #4]
             (GasIndexAlgorithm_TAU_INITIAL_MEAN_NOX +
 800ffae:	4929      	ldr	r1, [pc, #164]	@ (8010054 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x178>)
 800ffb0:	1c18      	adds	r0, r3, #0
 800ffb2:	f7f0 fc85 	bl	80008c0 <__aeabi_fadd>
 800ffb6:	1c03      	adds	r3, r0, #0
              params->mSamplingInterval) /
 800ffb8:	1c19      	adds	r1, r3, #0
 800ffba:	1c20      	adds	r0, r4, #0
 800ffbc:	f7f0 fe72 	bl	8000ca4 <__aeabi_fdiv>
 800ffc0:	1c03      	adds	r3, r0, #0
 800ffc2:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Gamma_Initial_Mean =
 800ffc4:	687b      	ldr	r3, [r7, #4]
 800ffc6:	655a      	str	r2, [r3, #84]	@ 0x54
 800ffc8:	e017      	b.n	800fffa <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x11e>
    } else {
        params->m_Mean_Variance_Estimator___Gamma_Initial_Mean =
            (((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__ADDITIONAL_GAMMA_MEAN_SCALING *
               GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
              params->mSamplingInterval) /
 800ffca:	687b      	ldr	r3, [r7, #4]
 800ffcc:	685b      	ldr	r3, [r3, #4]
               GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
 800ffce:	2188      	movs	r1, #136	@ 0x88
 800ffd0:	05c9      	lsls	r1, r1, #23
 800ffd2:	1c18      	adds	r0, r3, #0
 800ffd4:	f7f1 f834 	bl	8001040 <__aeabi_fmul>
 800ffd8:	1c03      	adds	r3, r0, #0
 800ffda:	1c1c      	adds	r4, r3, #0
             (GasIndexAlgorithm_TAU_INITIAL_MEAN_VOC +
              params->mSamplingInterval));
 800ffdc:	687b      	ldr	r3, [r7, #4]
 800ffde:	685b      	ldr	r3, [r3, #4]
             (GasIndexAlgorithm_TAU_INITIAL_MEAN_VOC +
 800ffe0:	491d      	ldr	r1, [pc, #116]	@ (8010058 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x17c>)
 800ffe2:	1c18      	adds	r0, r3, #0
 800ffe4:	f7f0 fc6c 	bl	80008c0 <__aeabi_fadd>
 800ffe8:	1c03      	adds	r3, r0, #0
              params->mSamplingInterval) /
 800ffea:	1c19      	adds	r1, r3, #0
 800ffec:	1c20      	adds	r0, r4, #0
 800ffee:	f7f0 fe59 	bl	8000ca4 <__aeabi_fdiv>
 800fff2:	1c03      	adds	r3, r0, #0
 800fff4:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Gamma_Initial_Mean =
 800fff6:	687b      	ldr	r3, [r7, #4]
 800fff8:	655a      	str	r2, [r3, #84]	@ 0x54
    }
    params->m_Mean_Variance_Estimator___Gamma_Initial_Variance =
        ((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING *
          params->mSamplingInterval) /
 800fffa:	687b      	ldr	r3, [r7, #4]
 800fffc:	685b      	ldr	r3, [r3, #4]
        ((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING *
 800fffe:	2185      	movs	r1, #133	@ 0x85
 8010000:	05c9      	lsls	r1, r1, #23
 8010002:	1c18      	adds	r0, r3, #0
 8010004:	f7f1 f81c 	bl	8001040 <__aeabi_fmul>
 8010008:	1c03      	adds	r3, r0, #0
 801000a:	1c1c      	adds	r4, r3, #0
         (GasIndexAlgorithm_TAU_INITIAL_VARIANCE + params->mSamplingInterval));
 801000c:	687b      	ldr	r3, [r7, #4]
 801000e:	685b      	ldr	r3, [r3, #4]
 8010010:	4912      	ldr	r1, [pc, #72]	@ (801005c <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x180>)
 8010012:	1c18      	adds	r0, r3, #0
 8010014:	f7f0 fc54 	bl	80008c0 <__aeabi_fadd>
 8010018:	1c03      	adds	r3, r0, #0
          params->mSamplingInterval) /
 801001a:	1c19      	adds	r1, r3, #0
 801001c:	1c20      	adds	r0, r4, #0
 801001e:	f7f0 fe41 	bl	8000ca4 <__aeabi_fdiv>
 8010022:	1c03      	adds	r3, r0, #0
 8010024:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator___Gamma_Initial_Variance =
 8010026:	687b      	ldr	r3, [r7, #4]
 8010028:	659a      	str	r2, [r3, #88]	@ 0x58
    params->m_Mean_Variance_Estimator__Gamma_Mean = 0.f;
 801002a:	687b      	ldr	r3, [r7, #4]
 801002c:	2200      	movs	r2, #0
 801002e:	65da      	str	r2, [r3, #92]	@ 0x5c
    params->m_Mean_Variance_Estimator__Gamma_Variance = 0.f;
 8010030:	687b      	ldr	r3, [r7, #4]
 8010032:	2200      	movs	r2, #0
 8010034:	661a      	str	r2, [r3, #96]	@ 0x60
    params->m_Mean_Variance_Estimator___Uptime_Gamma = 0.f;
 8010036:	687b      	ldr	r3, [r7, #4]
 8010038:	2200      	movs	r2, #0
 801003a:	665a      	str	r2, [r3, #100]	@ 0x64
    params->m_Mean_Variance_Estimator___Uptime_Gating = 0.f;
 801003c:	687b      	ldr	r3, [r7, #4]
 801003e:	2200      	movs	r2, #0
 8010040:	669a      	str	r2, [r3, #104]	@ 0x68
    params->m_Mean_Variance_Estimator___Gating_Duration_Minutes = 0.f;
 8010042:	687b      	ldr	r3, [r7, #4]
 8010044:	2200      	movs	r2, #0
 8010046:	66da      	str	r2, [r3, #108]	@ 0x6c
}
 8010048:	46c0      	nop			@ (mov r8, r8)
 801004a:	46bd      	mov	sp, r7
 801004c:	b002      	add	sp, #8
 801004e:	bdb0      	pop	{r4, r5, r7, pc}
 8010050:	45610000 	.word	0x45610000
 8010054:	44960000 	.word	0x44960000
 8010058:	41a00000 	.word	0x41a00000
 801005c:	451c4000 	.word	0x451c4000

08010060 <GasIndexAlgorithm__mean_variance_estimator__get_std>:
    params->m_Mean_Variance_Estimator___Uptime_Gamma = uptime_gamma;
    params->m_Mean_Variance_Estimator___Initialized = true;
}

static float GasIndexAlgorithm__mean_variance_estimator__get_std(
    const GasIndexAlgorithmParams* params) {
 8010060:	b580      	push	{r7, lr}
 8010062:	b082      	sub	sp, #8
 8010064:	af00      	add	r7, sp, #0
 8010066:	6078      	str	r0, [r7, #4]

    return params->m_Mean_Variance_Estimator___Std;
 8010068:	687b      	ldr	r3, [r7, #4]
 801006a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
}
 801006c:	1c18      	adds	r0, r3, #0
 801006e:	46bd      	mov	sp, r7
 8010070:	b002      	add	sp, #8
 8010072:	bd80      	pop	{r7, pc}

08010074 <GasIndexAlgorithm__mean_variance_estimator__get_mean>:

static float GasIndexAlgorithm__mean_variance_estimator__get_mean(
    const GasIndexAlgorithmParams* params) {
 8010074:	b580      	push	{r7, lr}
 8010076:	b082      	sub	sp, #8
 8010078:	af00      	add	r7, sp, #0
 801007a:	6078      	str	r0, [r7, #4]

    return (params->m_Mean_Variance_Estimator___Mean +
 801007c:	687b      	ldr	r3, [r7, #4]
 801007e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
            params->m_Mean_Variance_Estimator___Sraw_Offset);
 8010080:	687b      	ldr	r3, [r7, #4]
 8010082:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
    return (params->m_Mean_Variance_Estimator___Mean +
 8010084:	1c19      	adds	r1, r3, #0
 8010086:	1c10      	adds	r0, r2, #0
 8010088:	f7f0 fc1a 	bl	80008c0 <__aeabi_fadd>
 801008c:	1c03      	adds	r3, r0, #0
}
 801008e:	1c18      	adds	r0, r3, #0
 8010090:	46bd      	mov	sp, r7
 8010092:	b002      	add	sp, #8
 8010094:	bd80      	pop	{r7, pc}

08010096 <GasIndexAlgorithm__mean_variance_estimator__is_initialized>:

static bool GasIndexAlgorithm__mean_variance_estimator__is_initialized(
    GasIndexAlgorithmParams* params) {
 8010096:	b580      	push	{r7, lr}
 8010098:	b082      	sub	sp, #8
 801009a:	af00      	add	r7, sp, #0
 801009c:	6078      	str	r0, [r7, #4]

    return params->m_Mean_Variance_Estimator___Initialized;
 801009e:	687b      	ldr	r3, [r7, #4]
 80100a0:	223c      	movs	r2, #60	@ 0x3c
 80100a2:	5c9b      	ldrb	r3, [r3, r2]
}
 80100a4:	0018      	movs	r0, r3
 80100a6:	46bd      	mov	sp, r7
 80100a8:	b002      	add	sp, #8
 80100aa:	bd80      	pop	{r7, pc}

080100ac <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma>:

static void GasIndexAlgorithm__mean_variance_estimator___calculate_gamma(
    GasIndexAlgorithmParams* params) {
 80100ac:	b5b0      	push	{r4, r5, r7, lr}
 80100ae:	b08c      	sub	sp, #48	@ 0x30
 80100b0:	af00      	add	r7, sp, #0
 80100b2:	6078      	str	r0, [r7, #4]
    float gamma_variance;
    float gating_threshold_variance;
    float sigmoid_gating_variance;

    uptime_limit = (GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__FIX16_MAX -
                    params->mSamplingInterval);
 80100b4:	687b      	ldr	r3, [r7, #4]
 80100b6:	685b      	ldr	r3, [r3, #4]
    uptime_limit = (GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__FIX16_MAX -
 80100b8:	1c19      	adds	r1, r3, #0
 80100ba:	4895      	ldr	r0, [pc, #596]	@ (8010310 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x264>)
 80100bc:	f7f1 f91a 	bl	80012f4 <__aeabi_fsub>
 80100c0:	1c03      	adds	r3, r0, #0
 80100c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if ((params->m_Mean_Variance_Estimator___Uptime_Gamma < uptime_limit)) {
 80100c4:	687b      	ldr	r3, [r7, #4]
 80100c6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80100c8:	1c19      	adds	r1, r3, #0
 80100ca:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80100cc:	f7f0 fa44 	bl	8000558 <__aeabi_fcmpgt>
 80100d0:	1e03      	subs	r3, r0, #0
 80100d2:	d00b      	beq.n	80100ec <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x40>
        params->m_Mean_Variance_Estimator___Uptime_Gamma =
            (params->m_Mean_Variance_Estimator___Uptime_Gamma +
 80100d4:	687b      	ldr	r3, [r7, #4]
 80100d6:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
             params->mSamplingInterval);
 80100d8:	687b      	ldr	r3, [r7, #4]
 80100da:	685b      	ldr	r3, [r3, #4]
            (params->m_Mean_Variance_Estimator___Uptime_Gamma +
 80100dc:	1c19      	adds	r1, r3, #0
 80100de:	1c10      	adds	r0, r2, #0
 80100e0:	f7f0 fbee 	bl	80008c0 <__aeabi_fadd>
 80100e4:	1c03      	adds	r3, r0, #0
 80100e6:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Uptime_Gamma =
 80100e8:	687b      	ldr	r3, [r7, #4]
 80100ea:	665a      	str	r2, [r3, #100]	@ 0x64
    }
    if ((params->m_Mean_Variance_Estimator___Uptime_Gating < uptime_limit)) {
 80100ec:	687b      	ldr	r3, [r7, #4]
 80100ee:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80100f0:	1c19      	adds	r1, r3, #0
 80100f2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80100f4:	f7f0 fa30 	bl	8000558 <__aeabi_fcmpgt>
 80100f8:	1e03      	subs	r3, r0, #0
 80100fa:	d00b      	beq.n	8010114 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x68>
        params->m_Mean_Variance_Estimator___Uptime_Gating =
            (params->m_Mean_Variance_Estimator___Uptime_Gating +
 80100fc:	687b      	ldr	r3, [r7, #4]
 80100fe:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
             params->mSamplingInterval);
 8010100:	687b      	ldr	r3, [r7, #4]
 8010102:	685b      	ldr	r3, [r3, #4]
            (params->m_Mean_Variance_Estimator___Uptime_Gating +
 8010104:	1c19      	adds	r1, r3, #0
 8010106:	1c10      	adds	r0, r2, #0
 8010108:	f7f0 fbda 	bl	80008c0 <__aeabi_fadd>
 801010c:	1c03      	adds	r3, r0, #0
 801010e:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Uptime_Gating =
 8010110:	687b      	ldr	r3, [r7, #4]
 8010112:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters(
 8010114:	687b      	ldr	r3, [r7, #4]
 8010116:	6959      	ldr	r1, [r3, #20]
 8010118:	4a7e      	ldr	r2, [pc, #504]	@ (8010314 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x268>)
 801011a:	687b      	ldr	r3, [r7, #4]
 801011c:	0018      	movs	r0, r3
 801011e:	f000 f9f1 	bl	8010504 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters>
        params, params->mInit_Duration_Mean,
        GasIndexAlgorithm_INIT_TRANSITION_MEAN);
    sigmoid_gamma_mean =
        GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 8010122:	687b      	ldr	r3, [r7, #4]
 8010124:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8010126:	687b      	ldr	r3, [r7, #4]
 8010128:	1c11      	adds	r1, r2, #0
 801012a:	0018      	movs	r0, r3
 801012c:	f000 f9fa 	bl	8010524 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 8010130:	1c03      	adds	r3, r0, #0
 8010132:	62bb      	str	r3, [r7, #40]	@ 0x28
            params, params->m_Mean_Variance_Estimator___Uptime_Gamma);
    gamma_mean = (params->m_Mean_Variance_Estimator___Gamma_Mean +
 8010134:	687b      	ldr	r3, [r7, #4]
 8010136:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
                  ((params->m_Mean_Variance_Estimator___Gamma_Initial_Mean -
 8010138:	687b      	ldr	r3, [r7, #4]
 801013a:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
                    params->m_Mean_Variance_Estimator___Gamma_Mean) *
 801013c:	687b      	ldr	r3, [r7, #4]
 801013e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
                  ((params->m_Mean_Variance_Estimator___Gamma_Initial_Mean -
 8010140:	1c19      	adds	r1, r3, #0
 8010142:	1c10      	adds	r0, r2, #0
 8010144:	f7f1 f8d6 	bl	80012f4 <__aeabi_fsub>
 8010148:	1c03      	adds	r3, r0, #0
                    params->m_Mean_Variance_Estimator___Gamma_Mean) *
 801014a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 801014c:	1c18      	adds	r0, r3, #0
 801014e:	f7f0 ff77 	bl	8001040 <__aeabi_fmul>
 8010152:	1c03      	adds	r3, r0, #0
    gamma_mean = (params->m_Mean_Variance_Estimator___Gamma_Mean +
 8010154:	1c19      	adds	r1, r3, #0
 8010156:	1c20      	adds	r0, r4, #0
 8010158:	f7f0 fbb2 	bl	80008c0 <__aeabi_fadd>
 801015c:	1c03      	adds	r3, r0, #0
 801015e:	627b      	str	r3, [r7, #36]	@ 0x24
                   sigmoid_gamma_mean));
    gating_threshold_mean =
        (params->mGating_Threshold +
 8010160:	687b      	ldr	r3, [r7, #4]
 8010162:	69dc      	ldr	r4, [r3, #28]
         ((GasIndexAlgorithm_GATING_THRESHOLD_INITIAL -
           params->mGating_Threshold) *
 8010164:	687b      	ldr	r3, [r7, #4]
 8010166:	69db      	ldr	r3, [r3, #28]
         ((GasIndexAlgorithm_GATING_THRESHOLD_INITIAL -
 8010168:	1c19      	adds	r1, r3, #0
 801016a:	486b      	ldr	r0, [pc, #428]	@ (8010318 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x26c>)
 801016c:	f7f1 f8c2 	bl	80012f4 <__aeabi_fsub>
 8010170:	1c03      	adds	r3, r0, #0
 8010172:	1c1d      	adds	r5, r3, #0
          GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 8010174:	687b      	ldr	r3, [r7, #4]
 8010176:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8010178:	687b      	ldr	r3, [r7, #4]
 801017a:	1c11      	adds	r1, r2, #0
 801017c:	0018      	movs	r0, r3
 801017e:	f000 f9d1 	bl	8010524 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 8010182:	1c03      	adds	r3, r0, #0
           params->mGating_Threshold) *
 8010184:	1c19      	adds	r1, r3, #0
 8010186:	1c28      	adds	r0, r5, #0
 8010188:	f7f0 ff5a 	bl	8001040 <__aeabi_fmul>
 801018c:	1c03      	adds	r3, r0, #0
    gating_threshold_mean =
 801018e:	1c19      	adds	r1, r3, #0
 8010190:	1c20      	adds	r0, r4, #0
 8010192:	f7f0 fb95 	bl	80008c0 <__aeabi_fadd>
 8010196:	1c03      	adds	r3, r0, #0
 8010198:	623b      	str	r3, [r7, #32]
              params, params->m_Mean_Variance_Estimator___Uptime_Gating)));
    GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters(
 801019a:	4a60      	ldr	r2, [pc, #384]	@ (801031c <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x270>)
 801019c:	6a39      	ldr	r1, [r7, #32]
 801019e:	687b      	ldr	r3, [r7, #4]
 80101a0:	0018      	movs	r0, r3
 80101a2:	f000 f9af 	bl	8010504 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters>
        params, gating_threshold_mean,
        GasIndexAlgorithm_GATING_THRESHOLD_TRANSITION);
    sigmoid_gating_mean =
        GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 80101a6:	687b      	ldr	r3, [r7, #4]
 80101a8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80101aa:	687b      	ldr	r3, [r7, #4]
 80101ac:	1c11      	adds	r1, r2, #0
 80101ae:	0018      	movs	r0, r3
 80101b0:	f000 f9b8 	bl	8010524 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 80101b4:	1c03      	adds	r3, r0, #0
 80101b6:	61fb      	str	r3, [r7, #28]
            params, params->mGas_Index);
    params->m_Mean_Variance_Estimator__Gamma_Mean =
        (sigmoid_gating_mean * gamma_mean);
 80101b8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80101ba:	69f8      	ldr	r0, [r7, #28]
 80101bc:	f7f0 ff40 	bl	8001040 <__aeabi_fmul>
 80101c0:	1c03      	adds	r3, r0, #0
 80101c2:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator__Gamma_Mean =
 80101c4:	687b      	ldr	r3, [r7, #4]
 80101c6:	65da      	str	r2, [r3, #92]	@ 0x5c
    GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters(
 80101c8:	687b      	ldr	r3, [r7, #4]
 80101ca:	6999      	ldr	r1, [r3, #24]
 80101cc:	4a51      	ldr	r2, [pc, #324]	@ (8010314 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x268>)
 80101ce:	687b      	ldr	r3, [r7, #4]
 80101d0:	0018      	movs	r0, r3
 80101d2:	f000 f997 	bl	8010504 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters>
        params, params->mInit_Duration_Variance,
        GasIndexAlgorithm_INIT_TRANSITION_VARIANCE);
    sigmoid_gamma_variance =
        GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 80101d6:	687b      	ldr	r3, [r7, #4]
 80101d8:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80101da:	687b      	ldr	r3, [r7, #4]
 80101dc:	1c11      	adds	r1, r2, #0
 80101de:	0018      	movs	r0, r3
 80101e0:	f000 f9a0 	bl	8010524 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 80101e4:	1c03      	adds	r3, r0, #0
 80101e6:	61bb      	str	r3, [r7, #24]
            params, params->m_Mean_Variance_Estimator___Uptime_Gamma);
    gamma_variance =
        (params->m_Mean_Variance_Estimator___Gamma_Variance +
 80101e8:	687b      	ldr	r3, [r7, #4]
 80101ea:	6d1c      	ldr	r4, [r3, #80]	@ 0x50
         ((params->m_Mean_Variance_Estimator___Gamma_Initial_Variance -
 80101ec:	687b      	ldr	r3, [r7, #4]
 80101ee:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
           params->m_Mean_Variance_Estimator___Gamma_Variance) *
 80101f0:	687b      	ldr	r3, [r7, #4]
 80101f2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
         ((params->m_Mean_Variance_Estimator___Gamma_Initial_Variance -
 80101f4:	1c19      	adds	r1, r3, #0
 80101f6:	1c10      	adds	r0, r2, #0
 80101f8:	f7f1 f87c 	bl	80012f4 <__aeabi_fsub>
 80101fc:	1c03      	adds	r3, r0, #0
 80101fe:	1c1d      	adds	r5, r3, #0
          (sigmoid_gamma_variance - sigmoid_gamma_mean)));
 8010200:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8010202:	69b8      	ldr	r0, [r7, #24]
 8010204:	f7f1 f876 	bl	80012f4 <__aeabi_fsub>
 8010208:	1c03      	adds	r3, r0, #0
           params->m_Mean_Variance_Estimator___Gamma_Variance) *
 801020a:	1c19      	adds	r1, r3, #0
 801020c:	1c28      	adds	r0, r5, #0
 801020e:	f7f0 ff17 	bl	8001040 <__aeabi_fmul>
 8010212:	1c03      	adds	r3, r0, #0
    gamma_variance =
 8010214:	1c19      	adds	r1, r3, #0
 8010216:	1c20      	adds	r0, r4, #0
 8010218:	f7f0 fb52 	bl	80008c0 <__aeabi_fadd>
 801021c:	1c03      	adds	r3, r0, #0
 801021e:	617b      	str	r3, [r7, #20]
    gating_threshold_variance =
        (params->mGating_Threshold +
 8010220:	687b      	ldr	r3, [r7, #4]
 8010222:	69dc      	ldr	r4, [r3, #28]
         ((GasIndexAlgorithm_GATING_THRESHOLD_INITIAL -
           params->mGating_Threshold) *
 8010224:	687b      	ldr	r3, [r7, #4]
 8010226:	69db      	ldr	r3, [r3, #28]
         ((GasIndexAlgorithm_GATING_THRESHOLD_INITIAL -
 8010228:	1c19      	adds	r1, r3, #0
 801022a:	483b      	ldr	r0, [pc, #236]	@ (8010318 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x26c>)
 801022c:	f7f1 f862 	bl	80012f4 <__aeabi_fsub>
 8010230:	1c03      	adds	r3, r0, #0
 8010232:	1c1d      	adds	r5, r3, #0
          GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 8010234:	687b      	ldr	r3, [r7, #4]
 8010236:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8010238:	687b      	ldr	r3, [r7, #4]
 801023a:	1c11      	adds	r1, r2, #0
 801023c:	0018      	movs	r0, r3
 801023e:	f000 f971 	bl	8010524 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 8010242:	1c03      	adds	r3, r0, #0
           params->mGating_Threshold) *
 8010244:	1c19      	adds	r1, r3, #0
 8010246:	1c28      	adds	r0, r5, #0
 8010248:	f7f0 fefa 	bl	8001040 <__aeabi_fmul>
 801024c:	1c03      	adds	r3, r0, #0
    gating_threshold_variance =
 801024e:	1c19      	adds	r1, r3, #0
 8010250:	1c20      	adds	r0, r4, #0
 8010252:	f7f0 fb35 	bl	80008c0 <__aeabi_fadd>
 8010256:	1c03      	adds	r3, r0, #0
 8010258:	613b      	str	r3, [r7, #16]
              params, params->m_Mean_Variance_Estimator___Uptime_Gating)));
    GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters(
 801025a:	4a30      	ldr	r2, [pc, #192]	@ (801031c <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x270>)
 801025c:	6939      	ldr	r1, [r7, #16]
 801025e:	687b      	ldr	r3, [r7, #4]
 8010260:	0018      	movs	r0, r3
 8010262:	f000 f94f 	bl	8010504 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters>
        params, gating_threshold_variance,
        GasIndexAlgorithm_GATING_THRESHOLD_TRANSITION);
    sigmoid_gating_variance =
        GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 8010266:	687b      	ldr	r3, [r7, #4]
 8010268:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801026a:	687b      	ldr	r3, [r7, #4]
 801026c:	1c11      	adds	r1, r2, #0
 801026e:	0018      	movs	r0, r3
 8010270:	f000 f958 	bl	8010524 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 8010274:	1c03      	adds	r3, r0, #0
 8010276:	60fb      	str	r3, [r7, #12]
            params, params->mGas_Index);
    params->m_Mean_Variance_Estimator__Gamma_Variance =
        (sigmoid_gating_variance * gamma_variance);
 8010278:	6979      	ldr	r1, [r7, #20]
 801027a:	68f8      	ldr	r0, [r7, #12]
 801027c:	f7f0 fee0 	bl	8001040 <__aeabi_fmul>
 8010280:	1c03      	adds	r3, r0, #0
 8010282:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator__Gamma_Variance =
 8010284:	687b      	ldr	r3, [r7, #4]
 8010286:	661a      	str	r2, [r3, #96]	@ 0x60
    params->m_Mean_Variance_Estimator___Gating_Duration_Minutes =
        (params->m_Mean_Variance_Estimator___Gating_Duration_Minutes +
 8010288:	687b      	ldr	r3, [r7, #4]
 801028a:	6edc      	ldr	r4, [r3, #108]	@ 0x6c
         ((params->mSamplingInterval / 60.f) *
 801028c:	687b      	ldr	r3, [r7, #4]
 801028e:	685b      	ldr	r3, [r3, #4]
 8010290:	4923      	ldr	r1, [pc, #140]	@ (8010320 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x274>)
 8010292:	1c18      	adds	r0, r3, #0
 8010294:	f7f0 fd06 	bl	8000ca4 <__aeabi_fdiv>
 8010298:	1c03      	adds	r3, r0, #0
 801029a:	1c1d      	adds	r5, r3, #0
          (((1.f - sigmoid_gating_mean) *
 801029c:	69f9      	ldr	r1, [r7, #28]
 801029e:	20fe      	movs	r0, #254	@ 0xfe
 80102a0:	0580      	lsls	r0, r0, #22
 80102a2:	f7f1 f827 	bl	80012f4 <__aeabi_fsub>
 80102a6:	1c03      	adds	r3, r0, #0
 80102a8:	491e      	ldr	r1, [pc, #120]	@ (8010324 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x278>)
 80102aa:	1c18      	adds	r0, r3, #0
 80102ac:	f7f0 fec8 	bl	8001040 <__aeabi_fmul>
 80102b0:	1c03      	adds	r3, r0, #0
            (1.f + GasIndexAlgorithm_GATING_MAX_RATIO)) -
 80102b2:	491d      	ldr	r1, [pc, #116]	@ (8010328 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x27c>)
 80102b4:	1c18      	adds	r0, r3, #0
 80102b6:	f7f1 f81d 	bl	80012f4 <__aeabi_fsub>
 80102ba:	1c03      	adds	r3, r0, #0
         ((params->mSamplingInterval / 60.f) *
 80102bc:	1c19      	adds	r1, r3, #0
 80102be:	1c28      	adds	r0, r5, #0
 80102c0:	f7f0 febe 	bl	8001040 <__aeabi_fmul>
 80102c4:	1c03      	adds	r3, r0, #0
        (params->m_Mean_Variance_Estimator___Gating_Duration_Minutes +
 80102c6:	1c19      	adds	r1, r3, #0
 80102c8:	1c20      	adds	r0, r4, #0
 80102ca:	f7f0 faf9 	bl	80008c0 <__aeabi_fadd>
 80102ce:	1c03      	adds	r3, r0, #0
 80102d0:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator___Gating_Duration_Minutes =
 80102d2:	687b      	ldr	r3, [r7, #4]
 80102d4:	66da      	str	r2, [r3, #108]	@ 0x6c
           GasIndexAlgorithm_GATING_MAX_RATIO)));
    if ((params->m_Mean_Variance_Estimator___Gating_Duration_Minutes < 0.f)) {
 80102d6:	687b      	ldr	r3, [r7, #4]
 80102d8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80102da:	2100      	movs	r1, #0
 80102dc:	1c18      	adds	r0, r3, #0
 80102de:	f7f0 f927 	bl	8000530 <__aeabi_fcmplt>
 80102e2:	1e03      	subs	r3, r0, #0
 80102e4:	d002      	beq.n	80102ec <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x240>
        params->m_Mean_Variance_Estimator___Gating_Duration_Minutes = 0.f;
 80102e6:	687b      	ldr	r3, [r7, #4]
 80102e8:	2200      	movs	r2, #0
 80102ea:	66da      	str	r2, [r3, #108]	@ 0x6c
    }
    if ((params->m_Mean_Variance_Estimator___Gating_Duration_Minutes >
 80102ec:	687b      	ldr	r3, [r7, #4]
 80102ee:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
         params->mGating_Max_Duration_Minutes)) {
 80102f0:	687b      	ldr	r3, [r7, #4]
 80102f2:	691b      	ldr	r3, [r3, #16]
    if ((params->m_Mean_Variance_Estimator___Gating_Duration_Minutes >
 80102f4:	1c19      	adds	r1, r3, #0
 80102f6:	1c10      	adds	r0, r2, #0
 80102f8:	f7f0 f92e 	bl	8000558 <__aeabi_fcmpgt>
 80102fc:	1e03      	subs	r3, r0, #0
 80102fe:	d100      	bne.n	8010302 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x256>
        params->m_Mean_Variance_Estimator___Uptime_Gating = 0.f;
    }
}
 8010300:	e002      	b.n	8010308 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x25c>
        params->m_Mean_Variance_Estimator___Uptime_Gating = 0.f;
 8010302:	687b      	ldr	r3, [r7, #4]
 8010304:	2200      	movs	r2, #0
 8010306:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8010308:	46c0      	nop			@ (mov r8, r8)
 801030a:	46bd      	mov	sp, r7
 801030c:	b00c      	add	sp, #48	@ 0x30
 801030e:	bdb0      	pop	{r4, r5, r7, pc}
 8010310:	46fffe00 	.word	0x46fffe00
 8010314:	3c23d70a 	.word	0x3c23d70a
 8010318:	43ff0000 	.word	0x43ff0000
 801031c:	3db851ec 	.word	0x3db851ec
 8010320:	42700000 	.word	0x42700000
 8010324:	3fa66666 	.word	0x3fa66666
 8010328:	3e99999a 	.word	0x3e99999a

0801032c <GasIndexAlgorithm__mean_variance_estimator__process>:

static void GasIndexAlgorithm__mean_variance_estimator__process(
    GasIndexAlgorithmParams* params, float sraw) {
 801032c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801032e:	b087      	sub	sp, #28
 8010330:	af00      	add	r7, sp, #0
 8010332:	6078      	str	r0, [r7, #4]
 8010334:	6039      	str	r1, [r7, #0]

    float delta_sgp;
    float c;
    float additional_scaling;

    if ((params->m_Mean_Variance_Estimator___Initialized == false)) {
 8010336:	687b      	ldr	r3, [r7, #4]
 8010338:	223c      	movs	r2, #60	@ 0x3c
 801033a:	5c9b      	ldrb	r3, [r3, r2]
 801033c:	2201      	movs	r2, #1
 801033e:	4053      	eors	r3, r2
 8010340:	b2db      	uxtb	r3, r3
 8010342:	2b00      	cmp	r3, #0
 8010344:	d00a      	beq.n	801035c <GasIndexAlgorithm__mean_variance_estimator__process+0x30>
        params->m_Mean_Variance_Estimator___Initialized = true;
 8010346:	687b      	ldr	r3, [r7, #4]
 8010348:	223c      	movs	r2, #60	@ 0x3c
 801034a:	2101      	movs	r1, #1
 801034c:	5499      	strb	r1, [r3, r2]
        params->m_Mean_Variance_Estimator___Sraw_Offset = sraw;
 801034e:	687b      	ldr	r3, [r7, #4]
 8010350:	683a      	ldr	r2, [r7, #0]
 8010352:	645a      	str	r2, [r3, #68]	@ 0x44
        params->m_Mean_Variance_Estimator___Mean = 0.f;
 8010354:	687b      	ldr	r3, [r7, #4]
 8010356:	2200      	movs	r2, #0
 8010358:	641a      	str	r2, [r3, #64]	@ 0x40
        params->m_Mean_Variance_Estimator___Mean =
            (params->m_Mean_Variance_Estimator___Mean +
             ((params->m_Mean_Variance_Estimator__Gamma_Mean * delta_sgp) /
              GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__ADDITIONAL_GAMMA_MEAN_SCALING));
    }
}
 801035a:	e0c8      	b.n	80104ee <GasIndexAlgorithm__mean_variance_estimator__process+0x1c2>
        if (((params->m_Mean_Variance_Estimator___Mean >= 100.f) ||
 801035c:	687b      	ldr	r3, [r7, #4]
 801035e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010360:	4965      	ldr	r1, [pc, #404]	@ (80104f8 <GasIndexAlgorithm__mean_variance_estimator__process+0x1cc>)
 8010362:	1c18      	adds	r0, r3, #0
 8010364:	f7f0 f902 	bl	800056c <__aeabi_fcmpge>
 8010368:	1e03      	subs	r3, r0, #0
 801036a:	d107      	bne.n	801037c <GasIndexAlgorithm__mean_variance_estimator__process+0x50>
             (params->m_Mean_Variance_Estimator___Mean <= -100.f))) {
 801036c:	687b      	ldr	r3, [r7, #4]
 801036e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
        if (((params->m_Mean_Variance_Estimator___Mean >= 100.f) ||
 8010370:	4962      	ldr	r1, [pc, #392]	@ (80104fc <GasIndexAlgorithm__mean_variance_estimator__process+0x1d0>)
 8010372:	1c18      	adds	r0, r3, #0
 8010374:	f7f0 f8e6 	bl	8000544 <__aeabi_fcmple>
 8010378:	1e03      	subs	r3, r0, #0
 801037a:	d00e      	beq.n	801039a <GasIndexAlgorithm__mean_variance_estimator__process+0x6e>
                (params->m_Mean_Variance_Estimator___Sraw_Offset +
 801037c:	687b      	ldr	r3, [r7, #4]
 801037e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
                 params->m_Mean_Variance_Estimator___Mean);
 8010380:	687b      	ldr	r3, [r7, #4]
 8010382:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
                (params->m_Mean_Variance_Estimator___Sraw_Offset +
 8010384:	1c19      	adds	r1, r3, #0
 8010386:	1c10      	adds	r0, r2, #0
 8010388:	f7f0 fa9a 	bl	80008c0 <__aeabi_fadd>
 801038c:	1c03      	adds	r3, r0, #0
 801038e:	1c1a      	adds	r2, r3, #0
            params->m_Mean_Variance_Estimator___Sraw_Offset =
 8010390:	687b      	ldr	r3, [r7, #4]
 8010392:	645a      	str	r2, [r3, #68]	@ 0x44
            params->m_Mean_Variance_Estimator___Mean = 0.f;
 8010394:	687b      	ldr	r3, [r7, #4]
 8010396:	2200      	movs	r2, #0
 8010398:	641a      	str	r2, [r3, #64]	@ 0x40
        sraw = (sraw - params->m_Mean_Variance_Estimator___Sraw_Offset);
 801039a:	687b      	ldr	r3, [r7, #4]
 801039c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801039e:	1c19      	adds	r1, r3, #0
 80103a0:	6838      	ldr	r0, [r7, #0]
 80103a2:	f7f0 ffa7 	bl	80012f4 <__aeabi_fsub>
 80103a6:	1c03      	adds	r3, r0, #0
 80103a8:	603b      	str	r3, [r7, #0]
        GasIndexAlgorithm__mean_variance_estimator___calculate_gamma(params);
 80103aa:	687b      	ldr	r3, [r7, #4]
 80103ac:	0018      	movs	r0, r3
 80103ae:	f7ff fe7d 	bl	80100ac <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma>
        delta_sgp = ((sraw - params->m_Mean_Variance_Estimator___Mean) /
 80103b2:	687b      	ldr	r3, [r7, #4]
 80103b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80103b6:	1c19      	adds	r1, r3, #0
 80103b8:	6838      	ldr	r0, [r7, #0]
 80103ba:	f7f0 ff9b 	bl	80012f4 <__aeabi_fsub>
 80103be:	1c03      	adds	r3, r0, #0
 80103c0:	2185      	movs	r1, #133	@ 0x85
 80103c2:	05c9      	lsls	r1, r1, #23
 80103c4:	1c18      	adds	r0, r3, #0
 80103c6:	f7f0 fc6d 	bl	8000ca4 <__aeabi_fdiv>
 80103ca:	1c03      	adds	r3, r0, #0
 80103cc:	60fb      	str	r3, [r7, #12]
        if ((delta_sgp < 0.f)) {
 80103ce:	2100      	movs	r1, #0
 80103d0:	68f8      	ldr	r0, [r7, #12]
 80103d2:	f7f0 f8ad 	bl	8000530 <__aeabi_fcmplt>
 80103d6:	1e03      	subs	r3, r0, #0
 80103d8:	d008      	beq.n	80103ec <GasIndexAlgorithm__mean_variance_estimator__process+0xc0>
            c = (params->m_Mean_Variance_Estimator___Std - delta_sgp);
 80103da:	687b      	ldr	r3, [r7, #4]
 80103dc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80103de:	68f9      	ldr	r1, [r7, #12]
 80103e0:	1c18      	adds	r0, r3, #0
 80103e2:	f7f0 ff87 	bl	80012f4 <__aeabi_fsub>
 80103e6:	1c03      	adds	r3, r0, #0
 80103e8:	617b      	str	r3, [r7, #20]
 80103ea:	e007      	b.n	80103fc <GasIndexAlgorithm__mean_variance_estimator__process+0xd0>
            c = (params->m_Mean_Variance_Estimator___Std + delta_sgp);
 80103ec:	687b      	ldr	r3, [r7, #4]
 80103ee:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80103f0:	1c19      	adds	r1, r3, #0
 80103f2:	68f8      	ldr	r0, [r7, #12]
 80103f4:	f7f0 fa64 	bl	80008c0 <__aeabi_fadd>
 80103f8:	1c03      	adds	r3, r0, #0
 80103fa:	617b      	str	r3, [r7, #20]
        additional_scaling = 1.f;
 80103fc:	23fe      	movs	r3, #254	@ 0xfe
 80103fe:	059b      	lsls	r3, r3, #22
 8010400:	613b      	str	r3, [r7, #16]
        if ((c > 1440.f)) {
 8010402:	493f      	ldr	r1, [pc, #252]	@ (8010500 <GasIndexAlgorithm__mean_variance_estimator__process+0x1d4>)
 8010404:	6978      	ldr	r0, [r7, #20]
 8010406:	f7f0 f8a7 	bl	8000558 <__aeabi_fcmpgt>
 801040a:	1e03      	subs	r3, r0, #0
 801040c:	d010      	beq.n	8010430 <GasIndexAlgorithm__mean_variance_estimator__process+0x104>
            additional_scaling = ((c / 1440.f) * (c / 1440.f));
 801040e:	493c      	ldr	r1, [pc, #240]	@ (8010500 <GasIndexAlgorithm__mean_variance_estimator__process+0x1d4>)
 8010410:	6978      	ldr	r0, [r7, #20]
 8010412:	f7f0 fc47 	bl	8000ca4 <__aeabi_fdiv>
 8010416:	1c03      	adds	r3, r0, #0
 8010418:	1c1c      	adds	r4, r3, #0
 801041a:	4939      	ldr	r1, [pc, #228]	@ (8010500 <GasIndexAlgorithm__mean_variance_estimator__process+0x1d4>)
 801041c:	6978      	ldr	r0, [r7, #20]
 801041e:	f7f0 fc41 	bl	8000ca4 <__aeabi_fdiv>
 8010422:	1c03      	adds	r3, r0, #0
 8010424:	1c19      	adds	r1, r3, #0
 8010426:	1c20      	adds	r0, r4, #0
 8010428:	f7f0 fe0a 	bl	8001040 <__aeabi_fmul>
 801042c:	1c03      	adds	r3, r0, #0
 801042e:	613b      	str	r3, [r7, #16]
                     params->m_Mean_Variance_Estimator__Gamma_Variance))) *
 8010430:	687b      	ldr	r3, [r7, #4]
 8010432:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
                    (GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING -
 8010434:	1c19      	adds	r1, r3, #0
 8010436:	2085      	movs	r0, #133	@ 0x85
 8010438:	05c0      	lsls	r0, r0, #23
 801043a:	f7f0 ff5b 	bl	80012f4 <__aeabi_fsub>
 801043e:	1c03      	adds	r3, r0, #0
            (sqrtf((additional_scaling *
 8010440:	6939      	ldr	r1, [r7, #16]
 8010442:	1c18      	adds	r0, r3, #0
 8010444:	f7f0 fdfc 	bl	8001040 <__aeabi_fmul>
 8010448:	1c03      	adds	r3, r0, #0
 801044a:	1c18      	adds	r0, r3, #0
 801044c:	f018 fec4 	bl	80291d8 <sqrtf>
 8010450:	1c06      	adds	r6, r0, #0
                 ((params->m_Mean_Variance_Estimator___Std *
 8010452:	687b      	ldr	r3, [r7, #4]
 8010454:	6c9c      	ldr	r4, [r3, #72]	@ 0x48
                   (params->m_Mean_Variance_Estimator___Std /
 8010456:	687b      	ldr	r3, [r7, #4]
 8010458:	6c9d      	ldr	r5, [r3, #72]	@ 0x48
                    (GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING *
 801045a:	2185      	movs	r1, #133	@ 0x85
 801045c:	05c9      	lsls	r1, r1, #23
 801045e:	6938      	ldr	r0, [r7, #16]
 8010460:	f7f0 fdee 	bl	8001040 <__aeabi_fmul>
 8010464:	1c03      	adds	r3, r0, #0
                   (params->m_Mean_Variance_Estimator___Std /
 8010466:	1c19      	adds	r1, r3, #0
 8010468:	1c28      	adds	r0, r5, #0
 801046a:	f7f0 fc1b 	bl	8000ca4 <__aeabi_fdiv>
 801046e:	1c03      	adds	r3, r0, #0
                 ((params->m_Mean_Variance_Estimator___Std *
 8010470:	1c19      	adds	r1, r3, #0
 8010472:	1c20      	adds	r0, r4, #0
 8010474:	f7f0 fde4 	bl	8001040 <__aeabi_fmul>
 8010478:	1c03      	adds	r3, r0, #0
 801047a:	1c1c      	adds	r4, r3, #0
                  (((params->m_Mean_Variance_Estimator__Gamma_Variance *
 801047c:	687b      	ldr	r3, [r7, #4]
 801047e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8010480:	68f9      	ldr	r1, [r7, #12]
 8010482:	1c18      	adds	r0, r3, #0
 8010484:	f7f0 fddc 	bl	8001040 <__aeabi_fmul>
 8010488:	1c03      	adds	r3, r0, #0
                     delta_sgp) /
 801048a:	6939      	ldr	r1, [r7, #16]
 801048c:	1c18      	adds	r0, r3, #0
 801048e:	f7f0 fc09 	bl	8000ca4 <__aeabi_fdiv>
 8010492:	1c03      	adds	r3, r0, #0
                    additional_scaling) *
 8010494:	68f9      	ldr	r1, [r7, #12]
 8010496:	1c18      	adds	r0, r3, #0
 8010498:	f7f0 fdd2 	bl	8001040 <__aeabi_fmul>
 801049c:	1c03      	adds	r3, r0, #0
             sqrtf(
 801049e:	1c19      	adds	r1, r3, #0
 80104a0:	1c20      	adds	r0, r4, #0
 80104a2:	f7f0 fa0d 	bl	80008c0 <__aeabi_fadd>
 80104a6:	1c03      	adds	r3, r0, #0
 80104a8:	1c18      	adds	r0, r3, #0
 80104aa:	f018 fe95 	bl	80291d8 <sqrtf>
 80104ae:	1c03      	adds	r3, r0, #0
                     params->m_Mean_Variance_Estimator__Gamma_Variance))) *
 80104b0:	1c19      	adds	r1, r3, #0
 80104b2:	1c30      	adds	r0, r6, #0
 80104b4:	f7f0 fdc4 	bl	8001040 <__aeabi_fmul>
 80104b8:	1c03      	adds	r3, r0, #0
 80104ba:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Std =
 80104bc:	687b      	ldr	r3, [r7, #4]
 80104be:	649a      	str	r2, [r3, #72]	@ 0x48
            (params->m_Mean_Variance_Estimator___Mean +
 80104c0:	687b      	ldr	r3, [r7, #4]
 80104c2:	6c1c      	ldr	r4, [r3, #64]	@ 0x40
             ((params->m_Mean_Variance_Estimator__Gamma_Mean * delta_sgp) /
 80104c4:	687b      	ldr	r3, [r7, #4]
 80104c6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80104c8:	68f9      	ldr	r1, [r7, #12]
 80104ca:	1c18      	adds	r0, r3, #0
 80104cc:	f7f0 fdb8 	bl	8001040 <__aeabi_fmul>
 80104d0:	1c03      	adds	r3, r0, #0
 80104d2:	2182      	movs	r1, #130	@ 0x82
 80104d4:	05c9      	lsls	r1, r1, #23
 80104d6:	1c18      	adds	r0, r3, #0
 80104d8:	f7f0 fbe4 	bl	8000ca4 <__aeabi_fdiv>
 80104dc:	1c03      	adds	r3, r0, #0
            (params->m_Mean_Variance_Estimator___Mean +
 80104de:	1c19      	adds	r1, r3, #0
 80104e0:	1c20      	adds	r0, r4, #0
 80104e2:	f7f0 f9ed 	bl	80008c0 <__aeabi_fadd>
 80104e6:	1c03      	adds	r3, r0, #0
 80104e8:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Mean =
 80104ea:	687b      	ldr	r3, [r7, #4]
 80104ec:	641a      	str	r2, [r3, #64]	@ 0x40
}
 80104ee:	46c0      	nop			@ (mov r8, r8)
 80104f0:	46bd      	mov	sp, r7
 80104f2:	b007      	add	sp, #28
 80104f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80104f6:	46c0      	nop			@ (mov r8, r8)
 80104f8:	42c80000 	.word	0x42c80000
 80104fc:	c2c80000 	.word	0xc2c80000
 8010500:	44b40000 	.word	0x44b40000

08010504 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters>:

static void
GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters(
    GasIndexAlgorithmParams* params, float X0, float K) {
 8010504:	b580      	push	{r7, lr}
 8010506:	b084      	sub	sp, #16
 8010508:	af00      	add	r7, sp, #0
 801050a:	60f8      	str	r0, [r7, #12]
 801050c:	60b9      	str	r1, [r7, #8]
 801050e:	607a      	str	r2, [r7, #4]

    params->m_Mean_Variance_Estimator___Sigmoid__K = K;
 8010510:	68fb      	ldr	r3, [r7, #12]
 8010512:	687a      	ldr	r2, [r7, #4]
 8010514:	671a      	str	r2, [r3, #112]	@ 0x70
    params->m_Mean_Variance_Estimator___Sigmoid__X0 = X0;
 8010516:	68fb      	ldr	r3, [r7, #12]
 8010518:	68ba      	ldr	r2, [r7, #8]
 801051a:	675a      	str	r2, [r3, #116]	@ 0x74
}
 801051c:	46c0      	nop			@ (mov r8, r8)
 801051e:	46bd      	mov	sp, r7
 8010520:	b004      	add	sp, #16
 8010522:	bd80      	pop	{r7, pc}

08010524 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>:

static float GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
    GasIndexAlgorithmParams* params, float sample) {
 8010524:	b590      	push	{r4, r7, lr}
 8010526:	b085      	sub	sp, #20
 8010528:	af00      	add	r7, sp, #0
 801052a:	6078      	str	r0, [r7, #4]
 801052c:	6039      	str	r1, [r7, #0]

    float x;

    x = (params->m_Mean_Variance_Estimator___Sigmoid__K *
 801052e:	687b      	ldr	r3, [r7, #4]
 8010530:	6f1c      	ldr	r4, [r3, #112]	@ 0x70
         (sample - params->m_Mean_Variance_Estimator___Sigmoid__X0));
 8010532:	687b      	ldr	r3, [r7, #4]
 8010534:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8010536:	1c19      	adds	r1, r3, #0
 8010538:	6838      	ldr	r0, [r7, #0]
 801053a:	f7f0 fedb 	bl	80012f4 <__aeabi_fsub>
 801053e:	1c03      	adds	r3, r0, #0
    x = (params->m_Mean_Variance_Estimator___Sigmoid__K *
 8010540:	1c19      	adds	r1, r3, #0
 8010542:	1c20      	adds	r0, r4, #0
 8010544:	f7f0 fd7c 	bl	8001040 <__aeabi_fmul>
 8010548:	1c03      	adds	r3, r0, #0
 801054a:	60fb      	str	r3, [r7, #12]
    if ((x < -50.f)) {
 801054c:	4912      	ldr	r1, [pc, #72]	@ (8010598 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x74>)
 801054e:	68f8      	ldr	r0, [r7, #12]
 8010550:	f7ef ffee 	bl	8000530 <__aeabi_fcmplt>
 8010554:	1e03      	subs	r3, r0, #0
 8010556:	d002      	beq.n	801055e <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x3a>
        return 1.f;
 8010558:	23fe      	movs	r3, #254	@ 0xfe
 801055a:	059b      	lsls	r3, r3, #22
 801055c:	e018      	b.n	8010590 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x6c>
    } else if ((x > 50.f)) {
 801055e:	490f      	ldr	r1, [pc, #60]	@ (801059c <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x78>)
 8010560:	68f8      	ldr	r0, [r7, #12]
 8010562:	f7ef fff9 	bl	8000558 <__aeabi_fcmpgt>
 8010566:	1e03      	subs	r3, r0, #0
 8010568:	d001      	beq.n	801056e <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x4a>
        return 0.f;
 801056a:	2300      	movs	r3, #0
 801056c:	e010      	b.n	8010590 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x6c>
    } else {
        return (1.f / (1.f + expf(x)));
 801056e:	68fb      	ldr	r3, [r7, #12]
 8010570:	1c18      	adds	r0, r3, #0
 8010572:	f018 fe09 	bl	8029188 <expf>
 8010576:	1c03      	adds	r3, r0, #0
 8010578:	21fe      	movs	r1, #254	@ 0xfe
 801057a:	0589      	lsls	r1, r1, #22
 801057c:	1c18      	adds	r0, r3, #0
 801057e:	f7f0 f99f 	bl	80008c0 <__aeabi_fadd>
 8010582:	1c03      	adds	r3, r0, #0
 8010584:	1c19      	adds	r1, r3, #0
 8010586:	20fe      	movs	r0, #254	@ 0xfe
 8010588:	0580      	lsls	r0, r0, #22
 801058a:	f7f0 fb8b 	bl	8000ca4 <__aeabi_fdiv>
 801058e:	1c03      	adds	r3, r0, #0
    }
}
 8010590:	1c18      	adds	r0, r3, #0
 8010592:	46bd      	mov	sp, r7
 8010594:	b005      	add	sp, #20
 8010596:	bd90      	pop	{r4, r7, pc}
 8010598:	c2480000 	.word	0xc2480000
 801059c:	42480000 	.word	0x42480000

080105a0 <GasIndexAlgorithm__mox_model__set_parameters>:

static void
GasIndexAlgorithm__mox_model__set_parameters(GasIndexAlgorithmParams* params,
                                             float SRAW_STD, float SRAW_MEAN) {
 80105a0:	b580      	push	{r7, lr}
 80105a2:	b084      	sub	sp, #16
 80105a4:	af00      	add	r7, sp, #0
 80105a6:	60f8      	str	r0, [r7, #12]
 80105a8:	60b9      	str	r1, [r7, #8]
 80105aa:	607a      	str	r2, [r7, #4]

    params->m_Mox_Model__Sraw_Std = SRAW_STD;
 80105ac:	68fb      	ldr	r3, [r7, #12]
 80105ae:	68ba      	ldr	r2, [r7, #8]
 80105b0:	679a      	str	r2, [r3, #120]	@ 0x78
    params->m_Mox_Model__Sraw_Mean = SRAW_MEAN;
 80105b2:	68fb      	ldr	r3, [r7, #12]
 80105b4:	687a      	ldr	r2, [r7, #4]
 80105b6:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 80105b8:	46c0      	nop			@ (mov r8, r8)
 80105ba:	46bd      	mov	sp, r7
 80105bc:	b004      	add	sp, #16
 80105be:	bd80      	pop	{r7, pc}

080105c0 <GasIndexAlgorithm__mox_model__process>:

static float
GasIndexAlgorithm__mox_model__process(GasIndexAlgorithmParams* params,
                                      float sraw) {
 80105c0:	b590      	push	{r4, r7, lr}
 80105c2:	b083      	sub	sp, #12
 80105c4:	af00      	add	r7, sp, #0
 80105c6:	6078      	str	r0, [r7, #4]
 80105c8:	6039      	str	r1, [r7, #0]

    if ((params->mAlgorithm_Type == GasIndexAlgorithm_ALGORITHM_TYPE_NOX)) {
 80105ca:	687b      	ldr	r3, [r7, #4]
 80105cc:	681b      	ldr	r3, [r3, #0]
 80105ce:	2b01      	cmp	r3, #1
 80105d0:	d114      	bne.n	80105fc <GasIndexAlgorithm__mox_model__process+0x3c>
        return (((sraw - params->m_Mox_Model__Sraw_Mean) /
 80105d2:	687b      	ldr	r3, [r7, #4]
 80105d4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80105d6:	1c19      	adds	r1, r3, #0
 80105d8:	6838      	ldr	r0, [r7, #0]
 80105da:	f7f0 fe8b 	bl	80012f4 <__aeabi_fsub>
 80105de:	1c03      	adds	r3, r0, #0
 80105e0:	4918      	ldr	r1, [pc, #96]	@ (8010644 <GasIndexAlgorithm__mox_model__process+0x84>)
 80105e2:	1c18      	adds	r0, r3, #0
 80105e4:	f7f0 fb5e 	bl	8000ca4 <__aeabi_fdiv>
 80105e8:	1c03      	adds	r3, r0, #0
 80105ea:	1c1a      	adds	r2, r3, #0
                 GasIndexAlgorithm_SRAW_STD_NOX) *
                params->mIndex_Gain);
 80105ec:	687b      	ldr	r3, [r7, #4]
 80105ee:	6a1b      	ldr	r3, [r3, #32]
                 GasIndexAlgorithm_SRAW_STD_NOX) *
 80105f0:	1c19      	adds	r1, r3, #0
 80105f2:	1c10      	adds	r0, r2, #0
 80105f4:	f7f0 fd24 	bl	8001040 <__aeabi_fmul>
 80105f8:	1c03      	adds	r3, r0, #0
 80105fa:	e01f      	b.n	801063c <GasIndexAlgorithm__mox_model__process+0x7c>
    } else {
        return (((sraw - params->m_Mox_Model__Sraw_Mean) /
 80105fc:	687b      	ldr	r3, [r7, #4]
 80105fe:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8010600:	1c19      	adds	r1, r3, #0
 8010602:	6838      	ldr	r0, [r7, #0]
 8010604:	f7f0 fe76 	bl	80012f4 <__aeabi_fsub>
 8010608:	1c03      	adds	r3, r0, #0
 801060a:	1c1a      	adds	r2, r3, #0
 801060c:	2380      	movs	r3, #128	@ 0x80
 801060e:	061b      	lsls	r3, r3, #24
 8010610:	4053      	eors	r3, r2
 8010612:	001c      	movs	r4, r3
                 (-1.f * (params->m_Mox_Model__Sraw_Std +
 8010614:	687b      	ldr	r3, [r7, #4]
 8010616:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8010618:	490b      	ldr	r1, [pc, #44]	@ (8010648 <GasIndexAlgorithm__mox_model__process+0x88>)
 801061a:	1c18      	adds	r0, r3, #0
 801061c:	f7f0 f950 	bl	80008c0 <__aeabi_fadd>
 8010620:	1c03      	adds	r3, r0, #0
        return (((sraw - params->m_Mox_Model__Sraw_Mean) /
 8010622:	1c19      	adds	r1, r3, #0
 8010624:	1c20      	adds	r0, r4, #0
 8010626:	f7f0 fb3d 	bl	8000ca4 <__aeabi_fdiv>
 801062a:	1c03      	adds	r3, r0, #0
 801062c:	1c1a      	adds	r2, r3, #0
                          GasIndexAlgorithm_SRAW_STD_BONUS_VOC))) *
                params->mIndex_Gain);
 801062e:	687b      	ldr	r3, [r7, #4]
 8010630:	6a1b      	ldr	r3, [r3, #32]
                          GasIndexAlgorithm_SRAW_STD_BONUS_VOC))) *
 8010632:	1c19      	adds	r1, r3, #0
 8010634:	1c10      	adds	r0, r2, #0
 8010636:	f7f0 fd03 	bl	8001040 <__aeabi_fmul>
 801063a:	1c03      	adds	r3, r0, #0
    }
}
 801063c:	1c18      	adds	r0, r3, #0
 801063e:	46bd      	mov	sp, r7
 8010640:	b003      	add	sp, #12
 8010642:	bd90      	pop	{r4, r7, pc}
 8010644:	44fa0000 	.word	0x44fa0000
 8010648:	435c0000 	.word	0x435c0000

0801064c <GasIndexAlgorithm__sigmoid_scaled__set_parameters>:

static void GasIndexAlgorithm__sigmoid_scaled__set_parameters(
    GasIndexAlgorithmParams* params, float X0, float K, float offset_default) {
 801064c:	b580      	push	{r7, lr}
 801064e:	b084      	sub	sp, #16
 8010650:	af00      	add	r7, sp, #0
 8010652:	60f8      	str	r0, [r7, #12]
 8010654:	60b9      	str	r1, [r7, #8]
 8010656:	607a      	str	r2, [r7, #4]
 8010658:	603b      	str	r3, [r7, #0]

    params->m_Sigmoid_Scaled__K = K;
 801065a:	68fb      	ldr	r3, [r7, #12]
 801065c:	2180      	movs	r1, #128	@ 0x80
 801065e:	687a      	ldr	r2, [r7, #4]
 8010660:	505a      	str	r2, [r3, r1]
    params->m_Sigmoid_Scaled__X0 = X0;
 8010662:	68fb      	ldr	r3, [r7, #12]
 8010664:	2184      	movs	r1, #132	@ 0x84
 8010666:	68ba      	ldr	r2, [r7, #8]
 8010668:	505a      	str	r2, [r3, r1]
    params->m_Sigmoid_Scaled__Offset_Default = offset_default;
 801066a:	68fb      	ldr	r3, [r7, #12]
 801066c:	2188      	movs	r1, #136	@ 0x88
 801066e:	683a      	ldr	r2, [r7, #0]
 8010670:	505a      	str	r2, [r3, r1]
}
 8010672:	46c0      	nop			@ (mov r8, r8)
 8010674:	46bd      	mov	sp, r7
 8010676:	b004      	add	sp, #16
 8010678:	bd80      	pop	{r7, pc}
	...

0801067c <GasIndexAlgorithm__sigmoid_scaled__process>:

static float
GasIndexAlgorithm__sigmoid_scaled__process(GasIndexAlgorithmParams* params,
                                           float sample) {
 801067c:	b590      	push	{r4, r7, lr}
 801067e:	b085      	sub	sp, #20
 8010680:	af00      	add	r7, sp, #0
 8010682:	6078      	str	r0, [r7, #4]
 8010684:	6039      	str	r1, [r7, #0]

    float x;
    float shift;

    x = (params->m_Sigmoid_Scaled__K * (sample - params->m_Sigmoid_Scaled__X0));
 8010686:	687b      	ldr	r3, [r7, #4]
 8010688:	2280      	movs	r2, #128	@ 0x80
 801068a:	589c      	ldr	r4, [r3, r2]
 801068c:	687b      	ldr	r3, [r7, #4]
 801068e:	2284      	movs	r2, #132	@ 0x84
 8010690:	589b      	ldr	r3, [r3, r2]
 8010692:	1c19      	adds	r1, r3, #0
 8010694:	6838      	ldr	r0, [r7, #0]
 8010696:	f7f0 fe2d 	bl	80012f4 <__aeabi_fsub>
 801069a:	1c03      	adds	r3, r0, #0
 801069c:	1c19      	adds	r1, r3, #0
 801069e:	1c20      	adds	r0, r4, #0
 80106a0:	f7f0 fcce 	bl	8001040 <__aeabi_fmul>
 80106a4:	1c03      	adds	r3, r0, #0
 80106a6:	60bb      	str	r3, [r7, #8]
    if ((x < -50.f)) {
 80106a8:	4940      	ldr	r1, [pc, #256]	@ (80107ac <GasIndexAlgorithm__sigmoid_scaled__process+0x130>)
 80106aa:	68b8      	ldr	r0, [r7, #8]
 80106ac:	f7ef ff40 	bl	8000530 <__aeabi_fcmplt>
 80106b0:	1e03      	subs	r3, r0, #0
 80106b2:	d001      	beq.n	80106b8 <GasIndexAlgorithm__sigmoid_scaled__process+0x3c>
        return GasIndexAlgorithm_SIGMOID_L;
 80106b4:	4b3e      	ldr	r3, [pc, #248]	@ (80107b0 <GasIndexAlgorithm__sigmoid_scaled__process+0x134>)
 80106b6:	e075      	b.n	80107a4 <GasIndexAlgorithm__sigmoid_scaled__process+0x128>
    } else if ((x > 50.f)) {
 80106b8:	493e      	ldr	r1, [pc, #248]	@ (80107b4 <GasIndexAlgorithm__sigmoid_scaled__process+0x138>)
 80106ba:	68b8      	ldr	r0, [r7, #8]
 80106bc:	f7ef ff4c 	bl	8000558 <__aeabi_fcmpgt>
 80106c0:	1e03      	subs	r3, r0, #0
 80106c2:	d001      	beq.n	80106c8 <GasIndexAlgorithm__sigmoid_scaled__process+0x4c>
        return 0.f;
 80106c4:	2300      	movs	r3, #0
 80106c6:	e06d      	b.n	80107a4 <GasIndexAlgorithm__sigmoid_scaled__process+0x128>
    } else {
        if ((sample >= 0.f)) {
 80106c8:	2100      	movs	r1, #0
 80106ca:	6838      	ldr	r0, [r7, #0]
 80106cc:	f7ef ff4e 	bl	800056c <__aeabi_fcmpge>
 80106d0:	1e03      	subs	r3, r0, #0
 80106d2:	d047      	beq.n	8010764 <GasIndexAlgorithm__sigmoid_scaled__process+0xe8>
            if ((params->m_Sigmoid_Scaled__Offset_Default == 1.f)) {
 80106d4:	687b      	ldr	r3, [r7, #4]
 80106d6:	2288      	movs	r2, #136	@ 0x88
 80106d8:	589b      	ldr	r3, [r3, r2]
 80106da:	21fe      	movs	r1, #254	@ 0xfe
 80106dc:	0589      	lsls	r1, r1, #22
 80106de:	1c18      	adds	r0, r3, #0
 80106e0:	f7ef ff20 	bl	8000524 <__aeabi_fcmpeq>
 80106e4:	1e03      	subs	r3, r0, #0
 80106e6:	d00e      	beq.n	8010706 <GasIndexAlgorithm__sigmoid_scaled__process+0x8a>
                shift = ((500.f / 499.f) * (1.f - params->mIndex_Offset));
 80106e8:	687b      	ldr	r3, [r7, #4]
 80106ea:	689b      	ldr	r3, [r3, #8]
 80106ec:	1c19      	adds	r1, r3, #0
 80106ee:	20fe      	movs	r0, #254	@ 0xfe
 80106f0:	0580      	lsls	r0, r0, #22
 80106f2:	f7f0 fdff 	bl	80012f4 <__aeabi_fsub>
 80106f6:	1c03      	adds	r3, r0, #0
 80106f8:	492f      	ldr	r1, [pc, #188]	@ (80107b8 <GasIndexAlgorithm__sigmoid_scaled__process+0x13c>)
 80106fa:	1c18      	adds	r0, r3, #0
 80106fc:	f7f0 fca0 	bl	8001040 <__aeabi_fmul>
 8010700:	1c03      	adds	r3, r0, #0
 8010702:	60fb      	str	r3, [r7, #12]
 8010704:	e012      	b.n	801072c <GasIndexAlgorithm__sigmoid_scaled__process+0xb0>
            } else {
                shift = ((GasIndexAlgorithm_SIGMOID_L -
                          (5.f * params->mIndex_Offset)) /
 8010706:	687b      	ldr	r3, [r7, #4]
 8010708:	689b      	ldr	r3, [r3, #8]
 801070a:	492c      	ldr	r1, [pc, #176]	@ (80107bc <GasIndexAlgorithm__sigmoid_scaled__process+0x140>)
 801070c:	1c18      	adds	r0, r3, #0
 801070e:	f7f0 fc97 	bl	8001040 <__aeabi_fmul>
 8010712:	1c03      	adds	r3, r0, #0
                shift = ((GasIndexAlgorithm_SIGMOID_L -
 8010714:	1c19      	adds	r1, r3, #0
 8010716:	4826      	ldr	r0, [pc, #152]	@ (80107b0 <GasIndexAlgorithm__sigmoid_scaled__process+0x134>)
 8010718:	f7f0 fdec 	bl	80012f4 <__aeabi_fsub>
 801071c:	1c03      	adds	r3, r0, #0
 801071e:	2181      	movs	r1, #129	@ 0x81
 8010720:	05c9      	lsls	r1, r1, #23
 8010722:	1c18      	adds	r0, r3, #0
 8010724:	f7f0 fabe 	bl	8000ca4 <__aeabi_fdiv>
 8010728:	1c03      	adds	r3, r0, #0
 801072a:	60fb      	str	r3, [r7, #12]
                         4.f);
            }
            return (((GasIndexAlgorithm_SIGMOID_L + shift) / (1.f + expf(x))) -
 801072c:	4920      	ldr	r1, [pc, #128]	@ (80107b0 <GasIndexAlgorithm__sigmoid_scaled__process+0x134>)
 801072e:	68f8      	ldr	r0, [r7, #12]
 8010730:	f7f0 f8c6 	bl	80008c0 <__aeabi_fadd>
 8010734:	1c03      	adds	r3, r0, #0
 8010736:	1c1c      	adds	r4, r3, #0
 8010738:	68bb      	ldr	r3, [r7, #8]
 801073a:	1c18      	adds	r0, r3, #0
 801073c:	f018 fd24 	bl	8029188 <expf>
 8010740:	1c03      	adds	r3, r0, #0
 8010742:	21fe      	movs	r1, #254	@ 0xfe
 8010744:	0589      	lsls	r1, r1, #22
 8010746:	1c18      	adds	r0, r3, #0
 8010748:	f7f0 f8ba 	bl	80008c0 <__aeabi_fadd>
 801074c:	1c03      	adds	r3, r0, #0
 801074e:	1c19      	adds	r1, r3, #0
 8010750:	1c20      	adds	r0, r4, #0
 8010752:	f7f0 faa7 	bl	8000ca4 <__aeabi_fdiv>
 8010756:	1c03      	adds	r3, r0, #0
 8010758:	68f9      	ldr	r1, [r7, #12]
 801075a:	1c18      	adds	r0, r3, #0
 801075c:	f7f0 fdca 	bl	80012f4 <__aeabi_fsub>
 8010760:	1c03      	adds	r3, r0, #0
 8010762:	e01f      	b.n	80107a4 <GasIndexAlgorithm__sigmoid_scaled__process+0x128>
                    shift);
        } else {
            return ((params->mIndex_Offset /
 8010764:	687b      	ldr	r3, [r7, #4]
 8010766:	689a      	ldr	r2, [r3, #8]
                     params->m_Sigmoid_Scaled__Offset_Default) *
 8010768:	687b      	ldr	r3, [r7, #4]
 801076a:	2188      	movs	r1, #136	@ 0x88
 801076c:	585b      	ldr	r3, [r3, r1]
            return ((params->mIndex_Offset /
 801076e:	1c19      	adds	r1, r3, #0
 8010770:	1c10      	adds	r0, r2, #0
 8010772:	f7f0 fa97 	bl	8000ca4 <__aeabi_fdiv>
 8010776:	1c03      	adds	r3, r0, #0
 8010778:	1c1c      	adds	r4, r3, #0
                    (GasIndexAlgorithm_SIGMOID_L / (1.f + expf(x))));
 801077a:	68bb      	ldr	r3, [r7, #8]
 801077c:	1c18      	adds	r0, r3, #0
 801077e:	f018 fd03 	bl	8029188 <expf>
 8010782:	1c03      	adds	r3, r0, #0
 8010784:	21fe      	movs	r1, #254	@ 0xfe
 8010786:	0589      	lsls	r1, r1, #22
 8010788:	1c18      	adds	r0, r3, #0
 801078a:	f7f0 f899 	bl	80008c0 <__aeabi_fadd>
 801078e:	1c03      	adds	r3, r0, #0
 8010790:	1c19      	adds	r1, r3, #0
 8010792:	4807      	ldr	r0, [pc, #28]	@ (80107b0 <GasIndexAlgorithm__sigmoid_scaled__process+0x134>)
 8010794:	f7f0 fa86 	bl	8000ca4 <__aeabi_fdiv>
 8010798:	1c03      	adds	r3, r0, #0
                     params->m_Sigmoid_Scaled__Offset_Default) *
 801079a:	1c19      	adds	r1, r3, #0
 801079c:	1c20      	adds	r0, r4, #0
 801079e:	f7f0 fc4f 	bl	8001040 <__aeabi_fmul>
 80107a2:	1c03      	adds	r3, r0, #0
        }
    }
}
 80107a4:	1c18      	adds	r0, r3, #0
 80107a6:	46bd      	mov	sp, r7
 80107a8:	b005      	add	sp, #20
 80107aa:	bd90      	pop	{r4, r7, pc}
 80107ac:	c2480000 	.word	0xc2480000
 80107b0:	43fa0000 	.word	0x43fa0000
 80107b4:	42480000 	.word	0x42480000
 80107b8:	3f8041ab 	.word	0x3f8041ab
 80107bc:	40a00000 	.word	0x40a00000

080107c0 <GasIndexAlgorithm__adaptive_lowpass__set_parameters>:

static void GasIndexAlgorithm__adaptive_lowpass__set_parameters(
    GasIndexAlgorithmParams* params) {
 80107c0:	b590      	push	{r4, r7, lr}
 80107c2:	b083      	sub	sp, #12
 80107c4:	af00      	add	r7, sp, #0
 80107c6:	6078      	str	r0, [r7, #4]

    params->m_Adaptive_Lowpass__A1 =
        (params->mSamplingInterval /
 80107c8:	687b      	ldr	r3, [r7, #4]
 80107ca:	685c      	ldr	r4, [r3, #4]
         (GasIndexAlgorithm_LP_TAU_FAST + params->mSamplingInterval));
 80107cc:	687b      	ldr	r3, [r7, #4]
 80107ce:	685b      	ldr	r3, [r3, #4]
 80107d0:	4913      	ldr	r1, [pc, #76]	@ (8010820 <GasIndexAlgorithm__adaptive_lowpass__set_parameters+0x60>)
 80107d2:	1c18      	adds	r0, r3, #0
 80107d4:	f7f0 f874 	bl	80008c0 <__aeabi_fadd>
 80107d8:	1c03      	adds	r3, r0, #0
        (params->mSamplingInterval /
 80107da:	1c19      	adds	r1, r3, #0
 80107dc:	1c20      	adds	r0, r4, #0
 80107de:	f7f0 fa61 	bl	8000ca4 <__aeabi_fdiv>
 80107e2:	1c03      	adds	r3, r0, #0
 80107e4:	1c19      	adds	r1, r3, #0
    params->m_Adaptive_Lowpass__A1 =
 80107e6:	687b      	ldr	r3, [r7, #4]
 80107e8:	228c      	movs	r2, #140	@ 0x8c
 80107ea:	5099      	str	r1, [r3, r2]
    params->m_Adaptive_Lowpass__A2 =
        (params->mSamplingInterval /
 80107ec:	687b      	ldr	r3, [r7, #4]
 80107ee:	685c      	ldr	r4, [r3, #4]
         (GasIndexAlgorithm_LP_TAU_SLOW + params->mSamplingInterval));
 80107f0:	687b      	ldr	r3, [r7, #4]
 80107f2:	685b      	ldr	r3, [r3, #4]
 80107f4:	490b      	ldr	r1, [pc, #44]	@ (8010824 <GasIndexAlgorithm__adaptive_lowpass__set_parameters+0x64>)
 80107f6:	1c18      	adds	r0, r3, #0
 80107f8:	f7f0 f862 	bl	80008c0 <__aeabi_fadd>
 80107fc:	1c03      	adds	r3, r0, #0
        (params->mSamplingInterval /
 80107fe:	1c19      	adds	r1, r3, #0
 8010800:	1c20      	adds	r0, r4, #0
 8010802:	f7f0 fa4f 	bl	8000ca4 <__aeabi_fdiv>
 8010806:	1c03      	adds	r3, r0, #0
 8010808:	1c19      	adds	r1, r3, #0
    params->m_Adaptive_Lowpass__A2 =
 801080a:	687b      	ldr	r3, [r7, #4]
 801080c:	2290      	movs	r2, #144	@ 0x90
 801080e:	5099      	str	r1, [r3, r2]
    params->m_Adaptive_Lowpass___Initialized = false;
 8010810:	687b      	ldr	r3, [r7, #4]
 8010812:	2294      	movs	r2, #148	@ 0x94
 8010814:	2100      	movs	r1, #0
 8010816:	5499      	strb	r1, [r3, r2]
}
 8010818:	46c0      	nop			@ (mov r8, r8)
 801081a:	46bd      	mov	sp, r7
 801081c:	b003      	add	sp, #12
 801081e:	bd90      	pop	{r4, r7, pc}
 8010820:	41a00000 	.word	0x41a00000
 8010824:	43fa0000 	.word	0x43fa0000

08010828 <GasIndexAlgorithm__adaptive_lowpass__process>:

static float
GasIndexAlgorithm__adaptive_lowpass__process(GasIndexAlgorithmParams* params,
                                             float sample) {
 8010828:	b590      	push	{r4, r7, lr}
 801082a:	b087      	sub	sp, #28
 801082c:	af00      	add	r7, sp, #0
 801082e:	6078      	str	r0, [r7, #4]
 8010830:	6039      	str	r1, [r7, #0]
    float abs_delta;
    float F1;
    float tau_a;
    float a3;

    if ((params->m_Adaptive_Lowpass___Initialized == false)) {
 8010832:	687b      	ldr	r3, [r7, #4]
 8010834:	2294      	movs	r2, #148	@ 0x94
 8010836:	5c9b      	ldrb	r3, [r3, r2]
 8010838:	2201      	movs	r2, #1
 801083a:	4053      	eors	r3, r2
 801083c:	b2db      	uxtb	r3, r3
 801083e:	2b00      	cmp	r3, #0
 8010840:	d00f      	beq.n	8010862 <GasIndexAlgorithm__adaptive_lowpass__process+0x3a>
        params->m_Adaptive_Lowpass___X1 = sample;
 8010842:	687b      	ldr	r3, [r7, #4]
 8010844:	2198      	movs	r1, #152	@ 0x98
 8010846:	683a      	ldr	r2, [r7, #0]
 8010848:	505a      	str	r2, [r3, r1]
        params->m_Adaptive_Lowpass___X2 = sample;
 801084a:	687b      	ldr	r3, [r7, #4]
 801084c:	219c      	movs	r1, #156	@ 0x9c
 801084e:	683a      	ldr	r2, [r7, #0]
 8010850:	505a      	str	r2, [r3, r1]
        params->m_Adaptive_Lowpass___X3 = sample;
 8010852:	687b      	ldr	r3, [r7, #4]
 8010854:	21a0      	movs	r1, #160	@ 0xa0
 8010856:	683a      	ldr	r2, [r7, #0]
 8010858:	505a      	str	r2, [r3, r1]
        params->m_Adaptive_Lowpass___Initialized = true;
 801085a:	687b      	ldr	r3, [r7, #4]
 801085c:	2294      	movs	r2, #148	@ 0x94
 801085e:	2101      	movs	r1, #1
 8010860:	5499      	strb	r1, [r3, r2]
    }
    params->m_Adaptive_Lowpass___X1 =
        (((1.f - params->m_Adaptive_Lowpass__A1) *
 8010862:	687b      	ldr	r3, [r7, #4]
 8010864:	228c      	movs	r2, #140	@ 0x8c
 8010866:	589b      	ldr	r3, [r3, r2]
 8010868:	1c19      	adds	r1, r3, #0
 801086a:	20fe      	movs	r0, #254	@ 0xfe
 801086c:	0580      	lsls	r0, r0, #22
 801086e:	f7f0 fd41 	bl	80012f4 <__aeabi_fsub>
 8010872:	1c03      	adds	r3, r0, #0
 8010874:	1c18      	adds	r0, r3, #0
          params->m_Adaptive_Lowpass___X1) +
 8010876:	687b      	ldr	r3, [r7, #4]
 8010878:	2298      	movs	r2, #152	@ 0x98
 801087a:	589b      	ldr	r3, [r3, r2]
        (((1.f - params->m_Adaptive_Lowpass__A1) *
 801087c:	1c19      	adds	r1, r3, #0
 801087e:	f7f0 fbdf 	bl	8001040 <__aeabi_fmul>
 8010882:	1c03      	adds	r3, r0, #0
 8010884:	1c1c      	adds	r4, r3, #0
         (params->m_Adaptive_Lowpass__A1 * sample));
 8010886:	687b      	ldr	r3, [r7, #4]
 8010888:	228c      	movs	r2, #140	@ 0x8c
 801088a:	589b      	ldr	r3, [r3, r2]
 801088c:	6839      	ldr	r1, [r7, #0]
 801088e:	1c18      	adds	r0, r3, #0
 8010890:	f7f0 fbd6 	bl	8001040 <__aeabi_fmul>
 8010894:	1c03      	adds	r3, r0, #0
          params->m_Adaptive_Lowpass___X1) +
 8010896:	1c19      	adds	r1, r3, #0
 8010898:	1c20      	adds	r0, r4, #0
 801089a:	f7f0 f811 	bl	80008c0 <__aeabi_fadd>
 801089e:	1c03      	adds	r3, r0, #0
 80108a0:	1c19      	adds	r1, r3, #0
    params->m_Adaptive_Lowpass___X1 =
 80108a2:	687b      	ldr	r3, [r7, #4]
 80108a4:	2298      	movs	r2, #152	@ 0x98
 80108a6:	5099      	str	r1, [r3, r2]
    params->m_Adaptive_Lowpass___X2 =
        (((1.f - params->m_Adaptive_Lowpass__A2) *
 80108a8:	687b      	ldr	r3, [r7, #4]
 80108aa:	2290      	movs	r2, #144	@ 0x90
 80108ac:	589b      	ldr	r3, [r3, r2]
 80108ae:	1c19      	adds	r1, r3, #0
 80108b0:	20fe      	movs	r0, #254	@ 0xfe
 80108b2:	0580      	lsls	r0, r0, #22
 80108b4:	f7f0 fd1e 	bl	80012f4 <__aeabi_fsub>
 80108b8:	1c03      	adds	r3, r0, #0
 80108ba:	1c18      	adds	r0, r3, #0
          params->m_Adaptive_Lowpass___X2) +
 80108bc:	687b      	ldr	r3, [r7, #4]
 80108be:	229c      	movs	r2, #156	@ 0x9c
 80108c0:	589b      	ldr	r3, [r3, r2]
        (((1.f - params->m_Adaptive_Lowpass__A2) *
 80108c2:	1c19      	adds	r1, r3, #0
 80108c4:	f7f0 fbbc 	bl	8001040 <__aeabi_fmul>
 80108c8:	1c03      	adds	r3, r0, #0
 80108ca:	1c1c      	adds	r4, r3, #0
         (params->m_Adaptive_Lowpass__A2 * sample));
 80108cc:	687b      	ldr	r3, [r7, #4]
 80108ce:	2290      	movs	r2, #144	@ 0x90
 80108d0:	589b      	ldr	r3, [r3, r2]
 80108d2:	6839      	ldr	r1, [r7, #0]
 80108d4:	1c18      	adds	r0, r3, #0
 80108d6:	f7f0 fbb3 	bl	8001040 <__aeabi_fmul>
 80108da:	1c03      	adds	r3, r0, #0
          params->m_Adaptive_Lowpass___X2) +
 80108dc:	1c19      	adds	r1, r3, #0
 80108de:	1c20      	adds	r0, r4, #0
 80108e0:	f7ef ffee 	bl	80008c0 <__aeabi_fadd>
 80108e4:	1c03      	adds	r3, r0, #0
 80108e6:	1c19      	adds	r1, r3, #0
    params->m_Adaptive_Lowpass___X2 =
 80108e8:	687b      	ldr	r3, [r7, #4]
 80108ea:	229c      	movs	r2, #156	@ 0x9c
 80108ec:	5099      	str	r1, [r3, r2]
    abs_delta =
        (params->m_Adaptive_Lowpass___X1 - params->m_Adaptive_Lowpass___X2);
 80108ee:	687b      	ldr	r3, [r7, #4]
 80108f0:	2298      	movs	r2, #152	@ 0x98
 80108f2:	589a      	ldr	r2, [r3, r2]
 80108f4:	687b      	ldr	r3, [r7, #4]
 80108f6:	219c      	movs	r1, #156	@ 0x9c
 80108f8:	585b      	ldr	r3, [r3, r1]
    abs_delta =
 80108fa:	1c19      	adds	r1, r3, #0
 80108fc:	1c10      	adds	r0, r2, #0
 80108fe:	f7f0 fcf9 	bl	80012f4 <__aeabi_fsub>
 8010902:	1c03      	adds	r3, r0, #0
 8010904:	617b      	str	r3, [r7, #20]
    if ((abs_delta < 0.f)) {
 8010906:	2100      	movs	r1, #0
 8010908:	6978      	ldr	r0, [r7, #20]
 801090a:	f7ef fe11 	bl	8000530 <__aeabi_fcmplt>
 801090e:	1e03      	subs	r3, r0, #0
 8010910:	d004      	beq.n	801091c <GasIndexAlgorithm__adaptive_lowpass__process+0xf4>
        abs_delta = (-1.f * abs_delta);
 8010912:	697b      	ldr	r3, [r7, #20]
 8010914:	2280      	movs	r2, #128	@ 0x80
 8010916:	0612      	lsls	r2, r2, #24
 8010918:	4053      	eors	r3, r2
 801091a:	617b      	str	r3, [r7, #20]
    }
    F1 = expf((GasIndexAlgorithm_LP_ALPHA * abs_delta));
 801091c:	4923      	ldr	r1, [pc, #140]	@ (80109ac <GasIndexAlgorithm__adaptive_lowpass__process+0x184>)
 801091e:	6978      	ldr	r0, [r7, #20]
 8010920:	f7f0 fb8e 	bl	8001040 <__aeabi_fmul>
 8010924:	1c03      	adds	r3, r0, #0
 8010926:	1c18      	adds	r0, r3, #0
 8010928:	f018 fc2e 	bl	8029188 <expf>
 801092c:	1c03      	adds	r3, r0, #0
 801092e:	613b      	str	r3, [r7, #16]
    tau_a = (((GasIndexAlgorithm_LP_TAU_SLOW - GasIndexAlgorithm_LP_TAU_FAST) *
 8010930:	491f      	ldr	r1, [pc, #124]	@ (80109b0 <GasIndexAlgorithm__adaptive_lowpass__process+0x188>)
 8010932:	6938      	ldr	r0, [r7, #16]
 8010934:	f7f0 fb84 	bl	8001040 <__aeabi_fmul>
 8010938:	1c03      	adds	r3, r0, #0
 801093a:	491e      	ldr	r1, [pc, #120]	@ (80109b4 <GasIndexAlgorithm__adaptive_lowpass__process+0x18c>)
 801093c:	1c18      	adds	r0, r3, #0
 801093e:	f7ef ffbf 	bl	80008c0 <__aeabi_fadd>
 8010942:	1c03      	adds	r3, r0, #0
 8010944:	60fb      	str	r3, [r7, #12]
              F1) +
             GasIndexAlgorithm_LP_TAU_FAST);
    a3 = (params->mSamplingInterval / (params->mSamplingInterval + tau_a));
 8010946:	687b      	ldr	r3, [r7, #4]
 8010948:	685c      	ldr	r4, [r3, #4]
 801094a:	687b      	ldr	r3, [r7, #4]
 801094c:	685b      	ldr	r3, [r3, #4]
 801094e:	68f9      	ldr	r1, [r7, #12]
 8010950:	1c18      	adds	r0, r3, #0
 8010952:	f7ef ffb5 	bl	80008c0 <__aeabi_fadd>
 8010956:	1c03      	adds	r3, r0, #0
 8010958:	1c19      	adds	r1, r3, #0
 801095a:	1c20      	adds	r0, r4, #0
 801095c:	f7f0 f9a2 	bl	8000ca4 <__aeabi_fdiv>
 8010960:	1c03      	adds	r3, r0, #0
 8010962:	60bb      	str	r3, [r7, #8]
    params->m_Adaptive_Lowpass___X3 =
        (((1.f - a3) * params->m_Adaptive_Lowpass___X3) + (a3 * sample));
 8010964:	68b9      	ldr	r1, [r7, #8]
 8010966:	20fe      	movs	r0, #254	@ 0xfe
 8010968:	0580      	lsls	r0, r0, #22
 801096a:	f7f0 fcc3 	bl	80012f4 <__aeabi_fsub>
 801096e:	1c03      	adds	r3, r0, #0
 8010970:	1c18      	adds	r0, r3, #0
 8010972:	687b      	ldr	r3, [r7, #4]
 8010974:	22a0      	movs	r2, #160	@ 0xa0
 8010976:	589b      	ldr	r3, [r3, r2]
 8010978:	1c19      	adds	r1, r3, #0
 801097a:	f7f0 fb61 	bl	8001040 <__aeabi_fmul>
 801097e:	1c03      	adds	r3, r0, #0
 8010980:	1c1c      	adds	r4, r3, #0
 8010982:	6839      	ldr	r1, [r7, #0]
 8010984:	68b8      	ldr	r0, [r7, #8]
 8010986:	f7f0 fb5b 	bl	8001040 <__aeabi_fmul>
 801098a:	1c03      	adds	r3, r0, #0
 801098c:	1c19      	adds	r1, r3, #0
 801098e:	1c20      	adds	r0, r4, #0
 8010990:	f7ef ff96 	bl	80008c0 <__aeabi_fadd>
 8010994:	1c03      	adds	r3, r0, #0
 8010996:	1c19      	adds	r1, r3, #0
    params->m_Adaptive_Lowpass___X3 =
 8010998:	687b      	ldr	r3, [r7, #4]
 801099a:	22a0      	movs	r2, #160	@ 0xa0
 801099c:	5099      	str	r1, [r3, r2]
    return params->m_Adaptive_Lowpass___X3;
 801099e:	687b      	ldr	r3, [r7, #4]
 80109a0:	22a0      	movs	r2, #160	@ 0xa0
 80109a2:	589b      	ldr	r3, [r3, r2]
}
 80109a4:	1c18      	adds	r0, r3, #0
 80109a6:	46bd      	mov	sp, r7
 80109a8:	b007      	add	sp, #28
 80109aa:	bd90      	pop	{r4, r7, pc}
 80109ac:	be4ccccd 	.word	0xbe4ccccd
 80109b0:	43f00000 	.word	0x43f00000
 80109b4:	41a00000 	.word	0x41a00000

080109b8 <sensirion_i2c_generate_crc>:
#include "sensirion_i2c.h"
#include "sensirion_common.h"
#include "sensirion_config.h"
#include "sen5x.h"

uint8_t sensirion_i2c_generate_crc(const uint8_t* data, uint16_t count) {
 80109b8:	b580      	push	{r7, lr}
 80109ba:	b084      	sub	sp, #16
 80109bc:	af00      	add	r7, sp, #0
 80109be:	6078      	str	r0, [r7, #4]
 80109c0:	000a      	movs	r2, r1
 80109c2:	1cbb      	adds	r3, r7, #2
 80109c4:	801a      	strh	r2, [r3, #0]
    uint16_t current_byte;
    uint8_t crc = CRC8_INIT;
 80109c6:	230d      	movs	r3, #13
 80109c8:	18fb      	adds	r3, r7, r3
 80109ca:	22ff      	movs	r2, #255	@ 0xff
 80109cc:	701a      	strb	r2, [r3, #0]
    uint8_t crc_bit;

    /* calculates 8-Bit checksum with given polynomial */
    for (current_byte = 0; current_byte < count; ++current_byte) {
 80109ce:	230e      	movs	r3, #14
 80109d0:	18fb      	adds	r3, r7, r3
 80109d2:	2200      	movs	r2, #0
 80109d4:	801a      	strh	r2, [r3, #0]
 80109d6:	e038      	b.n	8010a4a <sensirion_i2c_generate_crc+0x92>
        crc ^= (data[current_byte]);
 80109d8:	230e      	movs	r3, #14
 80109da:	18fb      	adds	r3, r7, r3
 80109dc:	881b      	ldrh	r3, [r3, #0]
 80109de:	687a      	ldr	r2, [r7, #4]
 80109e0:	18d3      	adds	r3, r2, r3
 80109e2:	7819      	ldrb	r1, [r3, #0]
 80109e4:	220d      	movs	r2, #13
 80109e6:	18bb      	adds	r3, r7, r2
 80109e8:	18ba      	adds	r2, r7, r2
 80109ea:	7812      	ldrb	r2, [r2, #0]
 80109ec:	404a      	eors	r2, r1
 80109ee:	701a      	strb	r2, [r3, #0]
        for (crc_bit = 8; crc_bit > 0; --crc_bit) {
 80109f0:	230c      	movs	r3, #12
 80109f2:	18fb      	adds	r3, r7, r3
 80109f4:	2208      	movs	r2, #8
 80109f6:	701a      	strb	r2, [r3, #0]
 80109f8:	e01c      	b.n	8010a34 <sensirion_i2c_generate_crc+0x7c>
            if (crc & 0x80)
 80109fa:	210d      	movs	r1, #13
 80109fc:	187b      	adds	r3, r7, r1
 80109fe:	781b      	ldrb	r3, [r3, #0]
 8010a00:	b25b      	sxtb	r3, r3
 8010a02:	2b00      	cmp	r3, #0
 8010a04:	da0a      	bge.n	8010a1c <sensirion_i2c_generate_crc+0x64>
                crc = (crc << 1) ^ CRC8_POLYNOMIAL;
 8010a06:	187b      	adds	r3, r7, r1
 8010a08:	781b      	ldrb	r3, [r3, #0]
 8010a0a:	b25b      	sxtb	r3, r3
 8010a0c:	18db      	adds	r3, r3, r3
 8010a0e:	b25b      	sxtb	r3, r3
 8010a10:	2231      	movs	r2, #49	@ 0x31
 8010a12:	4053      	eors	r3, r2
 8010a14:	b25a      	sxtb	r2, r3
 8010a16:	187b      	adds	r3, r7, r1
 8010a18:	701a      	strb	r2, [r3, #0]
 8010a1a:	e005      	b.n	8010a28 <sensirion_i2c_generate_crc+0x70>
            else
                crc = (crc << 1);
 8010a1c:	230d      	movs	r3, #13
 8010a1e:	18fa      	adds	r2, r7, r3
 8010a20:	18fb      	adds	r3, r7, r3
 8010a22:	781b      	ldrb	r3, [r3, #0]
 8010a24:	18db      	adds	r3, r3, r3
 8010a26:	7013      	strb	r3, [r2, #0]
        for (crc_bit = 8; crc_bit > 0; --crc_bit) {
 8010a28:	220c      	movs	r2, #12
 8010a2a:	18bb      	adds	r3, r7, r2
 8010a2c:	18ba      	adds	r2, r7, r2
 8010a2e:	7812      	ldrb	r2, [r2, #0]
 8010a30:	3a01      	subs	r2, #1
 8010a32:	701a      	strb	r2, [r3, #0]
 8010a34:	230c      	movs	r3, #12
 8010a36:	18fb      	adds	r3, r7, r3
 8010a38:	781b      	ldrb	r3, [r3, #0]
 8010a3a:	2b00      	cmp	r3, #0
 8010a3c:	d1dd      	bne.n	80109fa <sensirion_i2c_generate_crc+0x42>
    for (current_byte = 0; current_byte < count; ++current_byte) {
 8010a3e:	220e      	movs	r2, #14
 8010a40:	18bb      	adds	r3, r7, r2
 8010a42:	18ba      	adds	r2, r7, r2
 8010a44:	8812      	ldrh	r2, [r2, #0]
 8010a46:	3201      	adds	r2, #1
 8010a48:	801a      	strh	r2, [r3, #0]
 8010a4a:	230e      	movs	r3, #14
 8010a4c:	18fa      	adds	r2, r7, r3
 8010a4e:	1cbb      	adds	r3, r7, #2
 8010a50:	8812      	ldrh	r2, [r2, #0]
 8010a52:	881b      	ldrh	r3, [r3, #0]
 8010a54:	429a      	cmp	r2, r3
 8010a56:	d3bf      	bcc.n	80109d8 <sensirion_i2c_generate_crc+0x20>
        }
    }
    return crc;
 8010a58:	230d      	movs	r3, #13
 8010a5a:	18fb      	adds	r3, r7, r3
 8010a5c:	781b      	ldrb	r3, [r3, #0]
}
 8010a5e:	0018      	movs	r0, r3
 8010a60:	46bd      	mov	sp, r7
 8010a62:	b004      	add	sp, #16
 8010a64:	bd80      	pop	{r7, pc}

08010a66 <sensirion_i2c_check_crc>:

int8_t sensirion_i2c_check_crc(const uint8_t* data, uint16_t count,
                               uint8_t checksum) {
 8010a66:	b580      	push	{r7, lr}
 8010a68:	b082      	sub	sp, #8
 8010a6a:	af00      	add	r7, sp, #0
 8010a6c:	6078      	str	r0, [r7, #4]
 8010a6e:	0008      	movs	r0, r1
 8010a70:	0011      	movs	r1, r2
 8010a72:	1cbb      	adds	r3, r7, #2
 8010a74:	1c02      	adds	r2, r0, #0
 8010a76:	801a      	strh	r2, [r3, #0]
 8010a78:	1c7b      	adds	r3, r7, #1
 8010a7a:	1c0a      	adds	r2, r1, #0
 8010a7c:	701a      	strb	r2, [r3, #0]
    if (sensirion_i2c_generate_crc(data, count) != checksum)
 8010a7e:	1cbb      	adds	r3, r7, #2
 8010a80:	881a      	ldrh	r2, [r3, #0]
 8010a82:	687b      	ldr	r3, [r7, #4]
 8010a84:	0011      	movs	r1, r2
 8010a86:	0018      	movs	r0, r3
 8010a88:	f7ff ff96 	bl	80109b8 <sensirion_i2c_generate_crc>
 8010a8c:	0003      	movs	r3, r0
 8010a8e:	001a      	movs	r2, r3
 8010a90:	1c7b      	adds	r3, r7, #1
 8010a92:	781b      	ldrb	r3, [r3, #0]
 8010a94:	4293      	cmp	r3, r2
 8010a96:	d001      	beq.n	8010a9c <sensirion_i2c_check_crc+0x36>
        return CRC_ERROR;
 8010a98:	2301      	movs	r3, #1
 8010a9a:	e000      	b.n	8010a9e <sensirion_i2c_check_crc+0x38>
    return NO_ERROR;
 8010a9c:	2300      	movs	r3, #0
}
 8010a9e:	0018      	movs	r0, r3
 8010aa0:	46bd      	mov	sp, r7
 8010aa2:	b002      	add	sp, #8
 8010aa4:	bd80      	pop	{r7, pc}

08010aa6 <sensirion_i2c_add_command_to_buffer>:
    return sensirion_i2c_delayed_read_cmd(address, cmd, 0, data_words,
                                          num_words);
}

uint16_t sensirion_i2c_add_command_to_buffer(uint8_t* buffer, uint16_t offset,
                                             uint16_t command) {
 8010aa6:	b580      	push	{r7, lr}
 8010aa8:	b082      	sub	sp, #8
 8010aaa:	af00      	add	r7, sp, #0
 8010aac:	6078      	str	r0, [r7, #4]
 8010aae:	0008      	movs	r0, r1
 8010ab0:	0011      	movs	r1, r2
 8010ab2:	1cbb      	adds	r3, r7, #2
 8010ab4:	1c02      	adds	r2, r0, #0
 8010ab6:	801a      	strh	r2, [r3, #0]
 8010ab8:	003b      	movs	r3, r7
 8010aba:	1c0a      	adds	r2, r1, #0
 8010abc:	801a      	strh	r2, [r3, #0]
    buffer[offset++] = (uint8_t)((command & 0xFF00) >> 8);
 8010abe:	003b      	movs	r3, r7
 8010ac0:	881b      	ldrh	r3, [r3, #0]
 8010ac2:	0a1b      	lsrs	r3, r3, #8
 8010ac4:	b299      	uxth	r1, r3
 8010ac6:	1cbb      	adds	r3, r7, #2
 8010ac8:	881b      	ldrh	r3, [r3, #0]
 8010aca:	1cba      	adds	r2, r7, #2
 8010acc:	1c58      	adds	r0, r3, #1
 8010ace:	8010      	strh	r0, [r2, #0]
 8010ad0:	001a      	movs	r2, r3
 8010ad2:	687b      	ldr	r3, [r7, #4]
 8010ad4:	189b      	adds	r3, r3, r2
 8010ad6:	b2ca      	uxtb	r2, r1
 8010ad8:	701a      	strb	r2, [r3, #0]
    buffer[offset++] = (uint8_t)((command & 0x00FF) >> 0);
 8010ada:	1cbb      	adds	r3, r7, #2
 8010adc:	881b      	ldrh	r3, [r3, #0]
 8010ade:	1cba      	adds	r2, r7, #2
 8010ae0:	1c59      	adds	r1, r3, #1
 8010ae2:	8011      	strh	r1, [r2, #0]
 8010ae4:	001a      	movs	r2, r3
 8010ae6:	687b      	ldr	r3, [r7, #4]
 8010ae8:	189b      	adds	r3, r3, r2
 8010aea:	003a      	movs	r2, r7
 8010aec:	8812      	ldrh	r2, [r2, #0]
 8010aee:	b2d2      	uxtb	r2, r2
 8010af0:	701a      	strb	r2, [r3, #0]
    return offset;
 8010af2:	1cbb      	adds	r3, r7, #2
 8010af4:	881b      	ldrh	r3, [r3, #0]
}
 8010af6:	0018      	movs	r0, r3
 8010af8:	46bd      	mov	sp, r7
 8010afa:	b002      	add	sp, #8
 8010afc:	bd80      	pop	{r7, pc}

08010afe <sensirion_i2c_add_uint16_t_to_buffer>:
                                             int32_t data) {
    return sensirion_i2c_add_uint32_t_to_buffer(buffer, offset, (uint32_t)data);
}

uint16_t sensirion_i2c_add_uint16_t_to_buffer(uint8_t* buffer, uint16_t offset,
                                              uint16_t data) {
 8010afe:	b590      	push	{r4, r7, lr}
 8010b00:	b083      	sub	sp, #12
 8010b02:	af00      	add	r7, sp, #0
 8010b04:	6078      	str	r0, [r7, #4]
 8010b06:	0008      	movs	r0, r1
 8010b08:	0011      	movs	r1, r2
 8010b0a:	1cbb      	adds	r3, r7, #2
 8010b0c:	1c02      	adds	r2, r0, #0
 8010b0e:	801a      	strh	r2, [r3, #0]
 8010b10:	003b      	movs	r3, r7
 8010b12:	1c0a      	adds	r2, r1, #0
 8010b14:	801a      	strh	r2, [r3, #0]
    buffer[offset++] = (uint8_t)((data & 0xFF00) >> 8);
 8010b16:	003b      	movs	r3, r7
 8010b18:	881b      	ldrh	r3, [r3, #0]
 8010b1a:	0a1b      	lsrs	r3, r3, #8
 8010b1c:	b299      	uxth	r1, r3
 8010b1e:	1cbb      	adds	r3, r7, #2
 8010b20:	881b      	ldrh	r3, [r3, #0]
 8010b22:	1cba      	adds	r2, r7, #2
 8010b24:	1c58      	adds	r0, r3, #1
 8010b26:	8010      	strh	r0, [r2, #0]
 8010b28:	001a      	movs	r2, r3
 8010b2a:	687b      	ldr	r3, [r7, #4]
 8010b2c:	189b      	adds	r3, r3, r2
 8010b2e:	b2ca      	uxtb	r2, r1
 8010b30:	701a      	strb	r2, [r3, #0]
    buffer[offset++] = (uint8_t)((data & 0x00FF) >> 0);
 8010b32:	1cbb      	adds	r3, r7, #2
 8010b34:	881b      	ldrh	r3, [r3, #0]
 8010b36:	1cba      	adds	r2, r7, #2
 8010b38:	1c59      	adds	r1, r3, #1
 8010b3a:	8011      	strh	r1, [r2, #0]
 8010b3c:	001a      	movs	r2, r3
 8010b3e:	687b      	ldr	r3, [r7, #4]
 8010b40:	189b      	adds	r3, r3, r2
 8010b42:	003a      	movs	r2, r7
 8010b44:	8812      	ldrh	r2, [r2, #0]
 8010b46:	b2d2      	uxtb	r2, r2
 8010b48:	701a      	strb	r2, [r3, #0]
    buffer[offset] = sensirion_i2c_generate_crc(
        &buffer[offset - SENSIRION_WORD_SIZE], SENSIRION_WORD_SIZE);
 8010b4a:	1cbb      	adds	r3, r7, #2
 8010b4c:	881b      	ldrh	r3, [r3, #0]
 8010b4e:	3b02      	subs	r3, #2
 8010b50:	687a      	ldr	r2, [r7, #4]
 8010b52:	18d0      	adds	r0, r2, r3
    buffer[offset] = sensirion_i2c_generate_crc(
 8010b54:	1cbb      	adds	r3, r7, #2
 8010b56:	881b      	ldrh	r3, [r3, #0]
 8010b58:	687a      	ldr	r2, [r7, #4]
 8010b5a:	18d4      	adds	r4, r2, r3
 8010b5c:	2102      	movs	r1, #2
 8010b5e:	f7ff ff2b 	bl	80109b8 <sensirion_i2c_generate_crc>
 8010b62:	0003      	movs	r3, r0
 8010b64:	7023      	strb	r3, [r4, #0]
    offset++;
 8010b66:	1cbb      	adds	r3, r7, #2
 8010b68:	881a      	ldrh	r2, [r3, #0]
 8010b6a:	1cbb      	adds	r3, r7, #2
 8010b6c:	3201      	adds	r2, #1
 8010b6e:	801a      	strh	r2, [r3, #0]

    return offset;
 8010b70:	1cbb      	adds	r3, r7, #2
 8010b72:	881b      	ldrh	r3, [r3, #0]
}
 8010b74:	0018      	movs	r0, r3
 8010b76:	46bd      	mov	sp, r7
 8010b78:	b003      	add	sp, #12
 8010b7a:	bd90      	pop	{r4, r7, pc}

08010b7c <sensirion_i2c_add_int16_t_to_buffer>:

uint16_t sensirion_i2c_add_int16_t_to_buffer(uint8_t* buffer, uint16_t offset,
                                             int16_t data) {
 8010b7c:	b580      	push	{r7, lr}
 8010b7e:	b082      	sub	sp, #8
 8010b80:	af00      	add	r7, sp, #0
 8010b82:	6078      	str	r0, [r7, #4]
 8010b84:	0008      	movs	r0, r1
 8010b86:	0011      	movs	r1, r2
 8010b88:	1cbb      	adds	r3, r7, #2
 8010b8a:	1c02      	adds	r2, r0, #0
 8010b8c:	801a      	strh	r2, [r3, #0]
 8010b8e:	003b      	movs	r3, r7
 8010b90:	1c0a      	adds	r2, r1, #0
 8010b92:	801a      	strh	r2, [r3, #0]
    return sensirion_i2c_add_uint16_t_to_buffer(buffer, offset, (uint16_t)data);
 8010b94:	003b      	movs	r3, r7
 8010b96:	881a      	ldrh	r2, [r3, #0]
 8010b98:	1cbb      	adds	r3, r7, #2
 8010b9a:	8819      	ldrh	r1, [r3, #0]
 8010b9c:	687b      	ldr	r3, [r7, #4]
 8010b9e:	0018      	movs	r0, r3
 8010ba0:	f7ff ffad 	bl	8010afe <sensirion_i2c_add_uint16_t_to_buffer>
 8010ba4:	0003      	movs	r3, r0
}
 8010ba6:	0018      	movs	r0, r3
 8010ba8:	46bd      	mov	sp, r7
 8010baa:	b002      	add	sp, #8
 8010bac:	bd80      	pop	{r7, pc}

08010bae <sensirion_i2c_write_data>:

    return offset;
}

int16_t sensirion_i2c_write_data(uint8_t address, const uint8_t* data,
                                 uint16_t data_length) {
 8010bae:	b580      	push	{r7, lr}
 8010bb0:	b082      	sub	sp, #8
 8010bb2:	af00      	add	r7, sp, #0
 8010bb4:	6039      	str	r1, [r7, #0]
 8010bb6:	0011      	movs	r1, r2
 8010bb8:	1dfb      	adds	r3, r7, #7
 8010bba:	1c02      	adds	r2, r0, #0
 8010bbc:	701a      	strb	r2, [r3, #0]
 8010bbe:	1d3b      	adds	r3, r7, #4
 8010bc0:	1c0a      	adds	r2, r1, #0
 8010bc2:	801a      	strh	r2, [r3, #0]
    return sensirion_i2c_hal_write(address, data, data_length);
 8010bc4:	1d3b      	adds	r3, r7, #4
 8010bc6:	881a      	ldrh	r2, [r3, #0]
 8010bc8:	6839      	ldr	r1, [r7, #0]
 8010bca:	1dfb      	adds	r3, r7, #7
 8010bcc:	781b      	ldrb	r3, [r3, #0]
 8010bce:	0018      	movs	r0, r3
 8010bd0:	f7fe f9b0 	bl	800ef34 <sensirion_i2c_hal_write>
 8010bd4:	0003      	movs	r3, r0
}
 8010bd6:	0018      	movs	r0, r3
 8010bd8:	46bd      	mov	sp, r7
 8010bda:	b002      	add	sp, #8
 8010bdc:	bd80      	pop	{r7, pc}

08010bde <sensirion_i2c_read_data_inplace>:

int16_t sensirion_i2c_read_data_inplace(uint8_t address, uint8_t* buffer,
                                        uint16_t expected_data_length) {
 8010bde:	b5b0      	push	{r4, r5, r7, lr}
 8010be0:	b084      	sub	sp, #16
 8010be2:	af00      	add	r7, sp, #0
 8010be4:	6039      	str	r1, [r7, #0]
 8010be6:	0011      	movs	r1, r2
 8010be8:	1dfb      	adds	r3, r7, #7
 8010bea:	1c02      	adds	r2, r0, #0
 8010bec:	701a      	strb	r2, [r3, #0]
 8010bee:	1d3b      	adds	r3, r7, #4
 8010bf0:	1c0a      	adds	r2, r1, #0
 8010bf2:	801a      	strh	r2, [r3, #0]
    int16_t error;
    uint16_t i, j;
    uint16_t size = (expected_data_length / SENSIRION_WORD_SIZE) *
 8010bf4:	1d3b      	adds	r3, r7, #4
 8010bf6:	881b      	ldrh	r3, [r3, #0]
 8010bf8:	085b      	lsrs	r3, r3, #1
 8010bfa:	b29b      	uxth	r3, r3
 8010bfc:	220a      	movs	r2, #10
 8010bfe:	18ba      	adds	r2, r7, r2
 8010c00:	1c19      	adds	r1, r3, #0
 8010c02:	1c0b      	adds	r3, r1, #0
 8010c04:	18db      	adds	r3, r3, r3
 8010c06:	185b      	adds	r3, r3, r1
 8010c08:	8013      	strh	r3, [r2, #0]
                    (SENSIRION_WORD_SIZE + CRC8_LEN);

    if (expected_data_length % SENSIRION_WORD_SIZE != 0) {
 8010c0a:	1d3b      	adds	r3, r7, #4
 8010c0c:	881b      	ldrh	r3, [r3, #0]
 8010c0e:	2201      	movs	r2, #1
 8010c10:	4013      	ands	r3, r2
 8010c12:	b29b      	uxth	r3, r3
 8010c14:	2b00      	cmp	r3, #0
 8010c16:	d001      	beq.n	8010c1c <sensirion_i2c_read_data_inplace+0x3e>
        return BYTE_NUM_ERROR;
 8010c18:	2304      	movs	r3, #4
 8010c1a:	e06b      	b.n	8010cf4 <sensirion_i2c_read_data_inplace+0x116>
    }

    error = sensirion_i2c_hal_read(address, buffer, size);
 8010c1c:	230a      	movs	r3, #10
 8010c1e:	18fb      	adds	r3, r7, r3
 8010c20:	881a      	ldrh	r2, [r3, #0]
 8010c22:	6839      	ldr	r1, [r7, #0]
 8010c24:	1dfb      	adds	r3, r7, #7
 8010c26:	781b      	ldrb	r3, [r3, #0]
 8010c28:	0018      	movs	r0, r3
 8010c2a:	f7fe f963 	bl	800eef4 <sensirion_i2c_hal_read>
 8010c2e:	0003      	movs	r3, r0
 8010c30:	001a      	movs	r2, r3
 8010c32:	2108      	movs	r1, #8
 8010c34:	187b      	adds	r3, r7, r1
 8010c36:	801a      	strh	r2, [r3, #0]
    if (error) {
 8010c38:	000a      	movs	r2, r1
 8010c3a:	18bb      	adds	r3, r7, r2
 8010c3c:	2100      	movs	r1, #0
 8010c3e:	5e5b      	ldrsh	r3, [r3, r1]
 8010c40:	2b00      	cmp	r3, #0
 8010c42:	d003      	beq.n	8010c4c <sensirion_i2c_read_data_inplace+0x6e>
        return error;
 8010c44:	18bb      	adds	r3, r7, r2
 8010c46:	2200      	movs	r2, #0
 8010c48:	5e9b      	ldrsh	r3, [r3, r2]
 8010c4a:	e053      	b.n	8010cf4 <sensirion_i2c_read_data_inplace+0x116>
    }

    for (i = 0, j = 0; i < size; i += SENSIRION_WORD_SIZE + CRC8_LEN) {
 8010c4c:	230e      	movs	r3, #14
 8010c4e:	18fb      	adds	r3, r7, r3
 8010c50:	2200      	movs	r2, #0
 8010c52:	801a      	strh	r2, [r3, #0]
 8010c54:	230c      	movs	r3, #12
 8010c56:	18fb      	adds	r3, r7, r3
 8010c58:	2200      	movs	r2, #0
 8010c5a:	801a      	strh	r2, [r3, #0]
 8010c5c:	e041      	b.n	8010ce2 <sensirion_i2c_read_data_inplace+0x104>

        error = sensirion_i2c_check_crc(&buffer[i], SENSIRION_WORD_SIZE,
 8010c5e:	210e      	movs	r1, #14
 8010c60:	187b      	adds	r3, r7, r1
 8010c62:	881b      	ldrh	r3, [r3, #0]
 8010c64:	683a      	ldr	r2, [r7, #0]
 8010c66:	18d0      	adds	r0, r2, r3
                                        buffer[i + SENSIRION_WORD_SIZE]);
 8010c68:	187b      	adds	r3, r7, r1
 8010c6a:	881b      	ldrh	r3, [r3, #0]
 8010c6c:	3302      	adds	r3, #2
 8010c6e:	683a      	ldr	r2, [r7, #0]
 8010c70:	18d3      	adds	r3, r2, r3
        error = sensirion_i2c_check_crc(&buffer[i], SENSIRION_WORD_SIZE,
 8010c72:	781b      	ldrb	r3, [r3, #0]
 8010c74:	001a      	movs	r2, r3
 8010c76:	2102      	movs	r1, #2
 8010c78:	f7ff fef5 	bl	8010a66 <sensirion_i2c_check_crc>
 8010c7c:	0003      	movs	r3, r0
 8010c7e:	001a      	movs	r2, r3
 8010c80:	2108      	movs	r1, #8
 8010c82:	187b      	adds	r3, r7, r1
 8010c84:	801a      	strh	r2, [r3, #0]
        if (error) {
 8010c86:	000a      	movs	r2, r1
 8010c88:	18bb      	adds	r3, r7, r2
 8010c8a:	2100      	movs	r1, #0
 8010c8c:	5e5b      	ldrsh	r3, [r3, r1]
 8010c8e:	2b00      	cmp	r3, #0
 8010c90:	d003      	beq.n	8010c9a <sensirion_i2c_read_data_inplace+0xbc>
            return error;
 8010c92:	18bb      	adds	r3, r7, r2
 8010c94:	2200      	movs	r2, #0
 8010c96:	5e9b      	ldrsh	r3, [r3, r2]
 8010c98:	e02c      	b.n	8010cf4 <sensirion_i2c_read_data_inplace+0x116>
        }
        buffer[j++] = buffer[i];
 8010c9a:	240e      	movs	r4, #14
 8010c9c:	193b      	adds	r3, r7, r4
 8010c9e:	881b      	ldrh	r3, [r3, #0]
 8010ca0:	683a      	ldr	r2, [r7, #0]
 8010ca2:	18d2      	adds	r2, r2, r3
 8010ca4:	250c      	movs	r5, #12
 8010ca6:	197b      	adds	r3, r7, r5
 8010ca8:	881b      	ldrh	r3, [r3, #0]
 8010caa:	1979      	adds	r1, r7, r5
 8010cac:	1c58      	adds	r0, r3, #1
 8010cae:	8008      	strh	r0, [r1, #0]
 8010cb0:	0019      	movs	r1, r3
 8010cb2:	683b      	ldr	r3, [r7, #0]
 8010cb4:	185b      	adds	r3, r3, r1
 8010cb6:	7812      	ldrb	r2, [r2, #0]
 8010cb8:	701a      	strb	r2, [r3, #0]
        buffer[j++] = buffer[i + 1];
 8010cba:	193b      	adds	r3, r7, r4
 8010cbc:	881b      	ldrh	r3, [r3, #0]
 8010cbe:	3301      	adds	r3, #1
 8010cc0:	683a      	ldr	r2, [r7, #0]
 8010cc2:	18d2      	adds	r2, r2, r3
 8010cc4:	197b      	adds	r3, r7, r5
 8010cc6:	881b      	ldrh	r3, [r3, #0]
 8010cc8:	1979      	adds	r1, r7, r5
 8010cca:	1c58      	adds	r0, r3, #1
 8010ccc:	8008      	strh	r0, [r1, #0]
 8010cce:	0019      	movs	r1, r3
 8010cd0:	683b      	ldr	r3, [r7, #0]
 8010cd2:	185b      	adds	r3, r3, r1
 8010cd4:	7812      	ldrb	r2, [r2, #0]
 8010cd6:	701a      	strb	r2, [r3, #0]
    for (i = 0, j = 0; i < size; i += SENSIRION_WORD_SIZE + CRC8_LEN) {
 8010cd8:	193b      	adds	r3, r7, r4
 8010cda:	193a      	adds	r2, r7, r4
 8010cdc:	8812      	ldrh	r2, [r2, #0]
 8010cde:	3203      	adds	r2, #3
 8010ce0:	801a      	strh	r2, [r3, #0]
 8010ce2:	230e      	movs	r3, #14
 8010ce4:	18fa      	adds	r2, r7, r3
 8010ce6:	230a      	movs	r3, #10
 8010ce8:	18fb      	adds	r3, r7, r3
 8010cea:	8812      	ldrh	r2, [r2, #0]
 8010cec:	881b      	ldrh	r3, [r3, #0]
 8010cee:	429a      	cmp	r2, r3
 8010cf0:	d3b5      	bcc.n	8010c5e <sensirion_i2c_read_data_inplace+0x80>
    }

    return NO_ERROR;
 8010cf2:	2300      	movs	r3, #0
}
 8010cf4:	0018      	movs	r0, r3
 8010cf6:	46bd      	mov	sp, r7
 8010cf8:	b004      	add	sp, #16
 8010cfa:	bdb0      	pop	{r4, r5, r7, pc}

08010cfc <ReadRegister>:
static bool SGP_MsgSent = false;
static int32_t vocIndex;



static void ReadRegister(uint8_t address, uint8_t *buffer, uint8_t nrBytes) {
 8010cfc:	b590      	push	{r4, r7, lr}
 8010cfe:	b083      	sub	sp, #12
 8010d00:	af00      	add	r7, sp, #0
 8010d02:	6039      	str	r1, [r7, #0]
 8010d04:	0011      	movs	r1, r2
 8010d06:	1dfb      	adds	r3, r7, #7
 8010d08:	1c02      	adds	r2, r0, #0
 8010d0a:	701a      	strb	r2, [r3, #0]
 8010d0c:	1dbb      	adds	r3, r7, #6
 8010d0e:	1c0a      	adds	r2, r1, #0
 8010d10:	701a      	strb	r2, [r3, #0]
  if (ReadFunction != NULL) {
 8010d12:	4b08      	ldr	r3, [pc, #32]	@ (8010d34 <ReadRegister+0x38>)
 8010d14:	681b      	ldr	r3, [r3, #0]
 8010d16:	2b00      	cmp	r3, #0
 8010d18:	d008      	beq.n	8010d2c <ReadRegister+0x30>
    ReadFunction(address, buffer, nrBytes);
 8010d1a:	4b06      	ldr	r3, [pc, #24]	@ (8010d34 <ReadRegister+0x38>)
 8010d1c:	681b      	ldr	r3, [r3, #0]
 8010d1e:	1dba      	adds	r2, r7, #6
 8010d20:	7814      	ldrb	r4, [r2, #0]
 8010d22:	6839      	ldr	r1, [r7, #0]
 8010d24:	1dfa      	adds	r2, r7, #7
 8010d26:	7810      	ldrb	r0, [r2, #0]
 8010d28:	0022      	movs	r2, r4
 8010d2a:	4798      	blx	r3
  }
}
 8010d2c:	46c0      	nop			@ (mov r8, r8)
 8010d2e:	46bd      	mov	sp, r7
 8010d30:	b003      	add	sp, #12
 8010d32:	bd90      	pop	{r4, r7, pc}
 8010d34:	200011e4 	.word	0x200011e4

08010d38 <WriteRegister>:

static void WriteRegister(uint8_t address, uint8_t *buffer, uint8_t nrBytes) {
 8010d38:	b590      	push	{r4, r7, lr}
 8010d3a:	b083      	sub	sp, #12
 8010d3c:	af00      	add	r7, sp, #0
 8010d3e:	6039      	str	r1, [r7, #0]
 8010d40:	0011      	movs	r1, r2
 8010d42:	1dfb      	adds	r3, r7, #7
 8010d44:	1c02      	adds	r2, r0, #0
 8010d46:	701a      	strb	r2, [r3, #0]
 8010d48:	1dbb      	adds	r3, r7, #6
 8010d4a:	1c0a      	adds	r2, r1, #0
 8010d4c:	701a      	strb	r2, [r3, #0]
  if (WriteFunction != NULL) {
 8010d4e:	4b08      	ldr	r3, [pc, #32]	@ (8010d70 <WriteRegister+0x38>)
 8010d50:	681b      	ldr	r3, [r3, #0]
 8010d52:	2b00      	cmp	r3, #0
 8010d54:	d008      	beq.n	8010d68 <WriteRegister+0x30>
    WriteFunction(address, buffer, nrBytes);
 8010d56:	4b06      	ldr	r3, [pc, #24]	@ (8010d70 <WriteRegister+0x38>)
 8010d58:	681b      	ldr	r3, [r3, #0]
 8010d5a:	1dba      	adds	r2, r7, #6
 8010d5c:	7814      	ldrb	r4, [r2, #0]
 8010d5e:	6839      	ldr	r1, [r7, #0]
 8010d60:	1dfa      	adds	r2, r7, #7
 8010d62:	7810      	ldrb	r0, [r2, #0]
 8010d64:	0022      	movs	r2, r4
 8010d66:	4798      	blx	r3
  }
}
 8010d68:	46c0      	nop			@ (mov r8, r8)
 8010d6a:	46bd      	mov	sp, r7
 8010d6c:	b003      	add	sp, #12
 8010d6e:	bd90      	pop	{r4, r7, pc}
 8010d70:	200011e8 	.word	0x200011e8

08010d74 <setSGP40TimeStamp>:

void setSGP40TimeStamp(uint32_t ticks) {
 8010d74:	b580      	push	{r7, lr}
 8010d76:	b082      	sub	sp, #8
 8010d78:	af00      	add	r7, sp, #0
 8010d7a:	6078      	str	r0, [r7, #4]
  SGP40TimeStamp = HAL_GetTick() + ticks;
 8010d7c:	f003 fdd6 	bl	801492c <HAL_GetTick>
 8010d80:	0002      	movs	r2, r0
 8010d82:	687b      	ldr	r3, [r7, #4]
 8010d84:	18d2      	adds	r2, r2, r3
 8010d86:	4b03      	ldr	r3, [pc, #12]	@ (8010d94 <setSGP40TimeStamp+0x20>)
 8010d88:	601a      	str	r2, [r3, #0]
}
 8010d8a:	46c0      	nop			@ (mov r8, r8)
 8010d8c:	46bd      	mov	sp, r7
 8010d8e:	b002      	add	sp, #8
 8010d90:	bd80      	pop	{r7, pc}
 8010d92:	46c0      	nop			@ (mov r8, r8)
 8010d94:	200011f8 	.word	0x200011f8

08010d98 <ResetSGP40samplecounter>:

void ResetSGP40samplecounter() {
 8010d98:	b580      	push	{r7, lr}
 8010d9a:	af00      	add	r7, sp, #0
  sgp40samplecounter = 0;
 8010d9c:	4b02      	ldr	r3, [pc, #8]	@ (8010da8 <ResetSGP40samplecounter+0x10>)
 8010d9e:	2200      	movs	r2, #0
 8010da0:	701a      	strb	r2, [r3, #0]
}
 8010da2:	46c0      	nop			@ (mov r8, r8)
 8010da4:	46bd      	mov	sp, r7
 8010da6:	bd80      	pop	{r7, pc}
 8010da8:	200011f6 	.word	0x200011f6

08010dac <SGP_Init>:

void SGP_Init(I2CReadCb readFunction, I2CWriteCB writeFunction) {
 8010dac:	b580      	push	{r7, lr}
 8010dae:	b082      	sub	sp, #8
 8010db0:	af00      	add	r7, sp, #0
 8010db2:	6078      	str	r0, [r7, #4]
 8010db4:	6039      	str	r1, [r7, #0]
  ReadFunction = readFunction;
 8010db6:	4b07      	ldr	r3, [pc, #28]	@ (8010dd4 <SGP_Init+0x28>)
 8010db8:	687a      	ldr	r2, [r7, #4]
 8010dba:	601a      	str	r2, [r3, #0]
  WriteFunction = writeFunction;
 8010dbc:	4b06      	ldr	r3, [pc, #24]	@ (8010dd8 <SGP_Init+0x2c>)
 8010dbe:	683a      	ldr	r2, [r7, #0]
 8010dc0:	601a      	str	r2, [r3, #0]
  GasIndexAlgorithm_init(&params, GasIndexAlgorithm_ALGORITHM_TYPE_VOC);
 8010dc2:	4b06      	ldr	r3, [pc, #24]	@ (8010ddc <SGP_Init+0x30>)
 8010dc4:	2100      	movs	r1, #0
 8010dc6:	0018      	movs	r0, r3
 8010dc8:	f7fe ff72 	bl	800fcb0 <GasIndexAlgorithm_init>
}
 8010dcc:	46c0      	nop			@ (mov r8, r8)
 8010dce:	46bd      	mov	sp, r7
 8010dd0:	b002      	add	sp, #8
 8010dd2:	bd80      	pop	{r7, pc}
 8010dd4:	200011e4 	.word	0x200011e4
 8010dd8:	200011e8 	.word	0x200011e8
 8010ddc:	20001200 	.word	0x20001200

08010de0 <SetSGP40_GasIndexAlgorithm_Sampling_Interval>:

void SetSGP40_GasIndexAlgorithm_Sampling_Interval() {
 8010de0:	b580      	push	{r7, lr}
 8010de2:	af00      	add	r7, sp, #0
  if (usbPluggedIn) {
 8010de4:	4b07      	ldr	r3, [pc, #28]	@ (8010e04 <SetSGP40_GasIndexAlgorithm_Sampling_Interval+0x24>)
 8010de6:	781b      	ldrb	r3, [r3, #0]
 8010de8:	2b00      	cmp	r3, #0
 8010dea:	d004      	beq.n	8010df6 <SetSGP40_GasIndexAlgorithm_Sampling_Interval+0x16>
    params.mSamplingInterval = 1.0f;
 8010dec:	4b06      	ldr	r3, [pc, #24]	@ (8010e08 <SetSGP40_GasIndexAlgorithm_Sampling_Interval+0x28>)
 8010dee:	22fe      	movs	r2, #254	@ 0xfe
 8010df0:	0592      	lsls	r2, r2, #22
 8010df2:	605a      	str	r2, [r3, #4]
    params.mSamplingInterval = 900.0f;
  }
//  float sampling_interval;
//  GasIndexAlgorithm_get_sampling_interval(&params, &sampling_interval);
//  Debug("SGP40 GasIndexAlgorithm_Sampling_Interval is: %f", sampling_interval);
}
 8010df4:	e002      	b.n	8010dfc <SetSGP40_GasIndexAlgorithm_Sampling_Interval+0x1c>
    params.mSamplingInterval = 900.0f;
 8010df6:	4b04      	ldr	r3, [pc, #16]	@ (8010e08 <SetSGP40_GasIndexAlgorithm_Sampling_Interval+0x28>)
 8010df8:	4a04      	ldr	r2, [pc, #16]	@ (8010e0c <SetSGP40_GasIndexAlgorithm_Sampling_Interval+0x2c>)
 8010dfa:	605a      	str	r2, [r3, #4]
}
 8010dfc:	46c0      	nop			@ (mov r8, r8)
 8010dfe:	46bd      	mov	sp, r7
 8010e00:	bd80      	pop	{r7, pc}
 8010e02:	46c0      	nop			@ (mov r8, r8)
 8010e04:	2000214d 	.word	0x2000214d
 8010e08:	20001200 	.word	0x20001200
 8010e0c:	44610000 	.word	0x44610000

08010e10 <SGP_StartMeasurement>:

void SGP_StartMeasurement(void) {
 8010e10:	b580      	push	{r7, lr}
 8010e12:	af00      	add	r7, sp, #0
  if(HT_MeasurementReceived){
 8010e14:	4b13      	ldr	r3, [pc, #76]	@ (8010e64 <SGP_StartMeasurement+0x54>)
 8010e16:	781b      	ldrb	r3, [r3, #0]
 8010e18:	2b00      	cmp	r3, #0
 8010e1a:	d00d      	beq.n	8010e38 <SGP_StartMeasurement+0x28>
    WriteRegister(SGP_I2C_ADDRESS, MeasureRawWithCompBuffer, SGP_LONG_COMMAND_BUFFER_LENGTH);
 8010e1c:	4b12      	ldr	r3, [pc, #72]	@ (8010e68 <SGP_StartMeasurement+0x58>)
 8010e1e:	2208      	movs	r2, #8
 8010e20:	0019      	movs	r1, r3
 8010e22:	2059      	movs	r0, #89	@ 0x59
 8010e24:	f7ff ff88 	bl	8010d38 <WriteRegister>
    SGP_IdleTime = HAL_GetTick() + SGP_SENSOR_IDLE_TIME;
 8010e28:	f003 fd80 	bl	801492c <HAL_GetTick>
 8010e2c:	0003      	movs	r3, r0
 8010e2e:	331e      	adds	r3, #30
 8010e30:	001a      	movs	r2, r3
 8010e32:	4b0e      	ldr	r3, [pc, #56]	@ (8010e6c <SGP_StartMeasurement+0x5c>)
 8010e34:	601a      	str	r2, [r3, #0]
 8010e36:	e00c      	b.n	8010e52 <SGP_StartMeasurement+0x42>
  }
  else{
    WriteRegister(SGP_I2C_ADDRESS, MeasureRawSignalBuffer, SGP_LONG_COMMAND_BUFFER_LENGTH);
 8010e38:	4b0d      	ldr	r3, [pc, #52]	@ (8010e70 <SGP_StartMeasurement+0x60>)
 8010e3a:	2208      	movs	r2, #8
 8010e3c:	0019      	movs	r1, r3
 8010e3e:	2059      	movs	r0, #89	@ 0x59
 8010e40:	f7ff ff7a 	bl	8010d38 <WriteRegister>
    SGP_HeatUpTime = HAL_GetTick() + SGP_SENSOR_HEATUP_TIME;
 8010e44:	f003 fd72 	bl	801492c <HAL_GetTick>
 8010e48:	0003      	movs	r3, r0
 8010e4a:	33aa      	adds	r3, #170	@ 0xaa
 8010e4c:	001a      	movs	r2, r3
 8010e4e:	4b09      	ldr	r3, [pc, #36]	@ (8010e74 <SGP_StartMeasurement+0x64>)
 8010e50:	601a      	str	r2, [r3, #0]
  }
  HeatUpIsDone = false;
 8010e52:	4b09      	ldr	r3, [pc, #36]	@ (8010e78 <SGP_StartMeasurement+0x68>)
 8010e54:	2200      	movs	r2, #0
 8010e56:	701a      	strb	r2, [r3, #0]
  MeasurementIsReady = false;
 8010e58:	4b08      	ldr	r3, [pc, #32]	@ (8010e7c <SGP_StartMeasurement+0x6c>)
 8010e5a:	2200      	movs	r2, #0
 8010e5c:	701a      	strb	r2, [r3, #0]
}
 8010e5e:	46c0      	nop			@ (mov r8, r8)
 8010e60:	46bd      	mov	sp, r7
 8010e62:	bd80      	pop	{r7, pc}
 8010e64:	200012a8 	.word	0x200012a8
 8010e68:	200000bc 	.word	0x200000bc
 8010e6c:	200000d0 	.word	0x200000d0
 8010e70:	200000b4 	.word	0x200000b4
 8010e74:	200000c8 	.word	0x200000c8
 8010e78:	200011fc 	.word	0x200011fc
 8010e7c:	200011fd 	.word	0x200011fd

08010e80 <SGP_HeatedUp>:

static bool SGP_HeatedUp(void) {
 8010e80:	b580      	push	{r7, lr}
 8010e82:	af00      	add	r7, sp, #0
  return TimestampIsReached(SGP_HeatUpTime);
 8010e84:	4b04      	ldr	r3, [pc, #16]	@ (8010e98 <SGP_HeatedUp+0x18>)
 8010e86:	681b      	ldr	r3, [r3, #0]
 8010e88:	0018      	movs	r0, r3
 8010e8a:	f002 ff81 	bl	8013d90 <TimestampIsReached>
 8010e8e:	0003      	movs	r3, r0
}
 8010e90:	0018      	movs	r0, r3
 8010e92:	46bd      	mov	sp, r7
 8010e94:	bd80      	pop	{r7, pc}
 8010e96:	46c0      	nop			@ (mov r8, r8)
 8010e98:	200000c8 	.word	0x200000c8

08010e9c <SGP_MeasurementReady>:

static bool SGP_MeasurementReady(void) {
 8010e9c:	b580      	push	{r7, lr}
 8010e9e:	af00      	add	r7, sp, #0
  return TimestampIsReached(SGP_IdleTime);
 8010ea0:	4b04      	ldr	r3, [pc, #16]	@ (8010eb4 <SGP_MeasurementReady+0x18>)
 8010ea2:	681b      	ldr	r3, [r3, #0]
 8010ea4:	0018      	movs	r0, r3
 8010ea6:	f002 ff73 	bl	8013d90 <TimestampIsReached>
 8010eaa:	0003      	movs	r3, r0
}
 8010eac:	0018      	movs	r0, r3
 8010eae:	46bd      	mov	sp, r7
 8010eb0:	bd80      	pop	{r7, pc}
 8010eb2:	46c0      	nop			@ (mov r8, r8)
 8010eb4:	200000d0 	.word	0x200000d0

08010eb8 <SGP_MeasurementDone>:

static bool SGP_MeasurementDone(void) {
 8010eb8:	b580      	push	{r7, lr}
 8010eba:	af00      	add	r7, sp, #0
  return TimestampIsReached(SGP_MeasurementDutyCycle);
 8010ebc:	4b04      	ldr	r3, [pc, #16]	@ (8010ed0 <SGP_MeasurementDone+0x18>)
 8010ebe:	681b      	ldr	r3, [r3, #0]
 8010ec0:	0018      	movs	r0, r3
 8010ec2:	f002 ff65 	bl	8013d90 <TimestampIsReached>
 8010ec6:	0003      	movs	r3, r0
}
 8010ec8:	0018      	movs	r0, r3
 8010eca:	46bd      	mov	sp, r7
 8010ecc:	bd80      	pop	{r7, pc}
 8010ece:	46c0      	nop			@ (mov r8, r8)
 8010ed0:	200000cc 	.word	0x200000cc

08010ed4 <SGP_TurnHeaterOff>:

void SGP_TurnHeaterOff(void) {
 8010ed4:	b580      	push	{r7, lr}
 8010ed6:	af00      	add	r7, sp, #0
  // This command could take from 0.1 to 1ms.
  WriteRegister(SGP_I2C_ADDRESS, TurnHeaterOffBuffer, SGP_SHORT_COMMAND_BUFFER_LENGTH);
 8010ed8:	4b04      	ldr	r3, [pc, #16]	@ (8010eec <SGP_TurnHeaterOff+0x18>)
 8010eda:	2202      	movs	r2, #2
 8010edc:	0019      	movs	r1, r3
 8010ede:	2059      	movs	r0, #89	@ 0x59
 8010ee0:	f7ff ff2a 	bl	8010d38 <WriteRegister>
}
 8010ee4:	46c0      	nop			@ (mov r8, r8)
 8010ee6:	46bd      	mov	sp, r7
 8010ee8:	bd80      	pop	{r7, pc}
 8010eea:	46c0      	nop			@ (mov r8, r8)
 8010eec:	200000ac 	.word	0x200000ac

08010ef0 <SGP_GetMeasurementValues>:

bool SGP_GetMeasurementValues(int32_t *vocIndex) {
 8010ef0:	b590      	push	{r4, r7, lr}
 8010ef2:	b087      	sub	sp, #28
 8010ef4:	af02      	add	r7, sp, #8
 8010ef6:	6078      	str	r0, [r7, #4]
  if (SGP_HeatedUp() && !HeatUpIsDone && !SGP_MsgSent) {
 8010ef8:	f7ff ffc2 	bl	8010e80 <SGP_HeatedUp>
 8010efc:	1e03      	subs	r3, r0, #0
 8010efe:	d032      	beq.n	8010f66 <SGP_GetMeasurementValues+0x76>
 8010f00:	4b80      	ldr	r3, [pc, #512]	@ (8011104 <SGP_GetMeasurementValues+0x214>)
 8010f02:	781b      	ldrb	r3, [r3, #0]
 8010f04:	2201      	movs	r2, #1
 8010f06:	4053      	eors	r3, r2
 8010f08:	b2db      	uxtb	r3, r3
 8010f0a:	2b00      	cmp	r3, #0
 8010f0c:	d02b      	beq.n	8010f66 <SGP_GetMeasurementValues+0x76>
 8010f0e:	4b7e      	ldr	r3, [pc, #504]	@ (8011108 <SGP_GetMeasurementValues+0x218>)
 8010f10:	781b      	ldrb	r3, [r3, #0]
 8010f12:	2201      	movs	r2, #1
 8010f14:	4053      	eors	r3, r2
 8010f16:	b2db      	uxtb	r3, r3
 8010f18:	2b00      	cmp	r3, #0
 8010f1a:	d024      	beq.n	8010f66 <SGP_GetMeasurementValues+0x76>
    HeatUpIsDone = true;
 8010f1c:	4b79      	ldr	r3, [pc, #484]	@ (8011104 <SGP_GetMeasurementValues+0x214>)
 8010f1e:	2201      	movs	r2, #1
 8010f20:	701a      	strb	r2, [r3, #0]
    // SGP is heated up, we ignore the output and start another measurement.
    if(HT_MeasurementReceived){
 8010f22:	4b7a      	ldr	r3, [pc, #488]	@ (801110c <SGP_GetMeasurementValues+0x21c>)
 8010f24:	781b      	ldrb	r3, [r3, #0]
 8010f26:	2b00      	cmp	r3, #0
 8010f28:	d00d      	beq.n	8010f46 <SGP_GetMeasurementValues+0x56>
      WriteRegister(SGP_I2C_ADDRESS, MeasureRawWithCompBuffer, SGP_LONG_COMMAND_BUFFER_LENGTH);
 8010f2a:	4b79      	ldr	r3, [pc, #484]	@ (8011110 <SGP_GetMeasurementValues+0x220>)
 8010f2c:	2208      	movs	r2, #8
 8010f2e:	0019      	movs	r1, r3
 8010f30:	2059      	movs	r0, #89	@ 0x59
 8010f32:	f7ff ff01 	bl	8010d38 <WriteRegister>
      SGP_IdleTime = HAL_GetTick() + SGP_SENSOR_IDLE_TIME;
 8010f36:	f003 fcf9 	bl	801492c <HAL_GetTick>
 8010f3a:	0003      	movs	r3, r0
 8010f3c:	331e      	adds	r3, #30
 8010f3e:	001a      	movs	r2, r3
 8010f40:	4b74      	ldr	r3, [pc, #464]	@ (8011114 <SGP_GetMeasurementValues+0x224>)
 8010f42:	601a      	str	r2, [r3, #0]
 8010f44:	e00c      	b.n	8010f60 <SGP_GetMeasurementValues+0x70>
    }
    else{
      WriteRegister(SGP_I2C_ADDRESS, MeasureRawSignalBuffer, SGP_LONG_COMMAND_BUFFER_LENGTH);
 8010f46:	4b74      	ldr	r3, [pc, #464]	@ (8011118 <SGP_GetMeasurementValues+0x228>)
 8010f48:	2208      	movs	r2, #8
 8010f4a:	0019      	movs	r1, r3
 8010f4c:	2059      	movs	r0, #89	@ 0x59
 8010f4e:	f7ff fef3 	bl	8010d38 <WriteRegister>
      SGP_IdleTime = HAL_GetTick() + SGP_SENSOR_IDLE_TIME;
 8010f52:	f003 fceb 	bl	801492c <HAL_GetTick>
 8010f56:	0003      	movs	r3, r0
 8010f58:	331e      	adds	r3, #30
 8010f5a:	001a      	movs	r2, r3
 8010f5c:	4b6d      	ldr	r3, [pc, #436]	@ (8011114 <SGP_GetMeasurementValues+0x224>)
 8010f5e:	601a      	str	r2, [r3, #0]
    }
    SGP_MsgSent = true;
 8010f60:	4b69      	ldr	r3, [pc, #420]	@ (8011108 <SGP_GetMeasurementValues+0x218>)
 8010f62:	2201      	movs	r2, #1
 8010f64:	701a      	strb	r2, [r3, #0]
  }
  if (HeatUpIsDone && SGP_MeasurementReady() && !MeasurementIsReady) {
 8010f66:	4b67      	ldr	r3, [pc, #412]	@ (8011104 <SGP_GetMeasurementValues+0x214>)
 8010f68:	781b      	ldrb	r3, [r3, #0]
 8010f6a:	2b00      	cmp	r3, #0
 8010f6c:	d100      	bne.n	8010f70 <SGP_GetMeasurementValues+0x80>
 8010f6e:	e0ac      	b.n	80110ca <SGP_GetMeasurementValues+0x1da>
 8010f70:	f7ff ff94 	bl	8010e9c <SGP_MeasurementReady>
 8010f74:	1e03      	subs	r3, r0, #0
 8010f76:	d100      	bne.n	8010f7a <SGP_GetMeasurementValues+0x8a>
 8010f78:	e0a7      	b.n	80110ca <SGP_GetMeasurementValues+0x1da>
 8010f7a:	4b68      	ldr	r3, [pc, #416]	@ (801111c <SGP_GetMeasurementValues+0x22c>)
 8010f7c:	781b      	ldrb	r3, [r3, #0]
 8010f7e:	2201      	movs	r2, #1
 8010f80:	4053      	eors	r3, r2
 8010f82:	b2db      	uxtb	r3, r3
 8010f84:	2b00      	cmp	r3, #0
 8010f86:	d100      	bne.n	8010f8a <SGP_GetMeasurementValues+0x9a>
 8010f88:	e09f      	b.n	80110ca <SGP_GetMeasurementValues+0x1da>
    MeasurementIsReady = true;
 8010f8a:	4b64      	ldr	r3, [pc, #400]	@ (801111c <SGP_GetMeasurementValues+0x22c>)
 8010f8c:	2201      	movs	r2, #1
 8010f8e:	701a      	strb	r2, [r3, #0]
    // Measurement is ready to be read, also turning the heater off.
    ReadRegister(SGP_I2C_ADDRESS, SGP_ReadBuffer, SGP_MEASURE_BUFFER_RESPONSE_LENGTH);
 8010f90:	4b63      	ldr	r3, [pc, #396]	@ (8011120 <SGP_GetMeasurementValues+0x230>)
 8010f92:	2203      	movs	r2, #3
 8010f94:	0019      	movs	r1, r3
 8010f96:	2059      	movs	r0, #89	@ 0x59
 8010f98:	f7ff feb0 	bl	8010cfc <ReadRegister>
    if (!CheckCRC(SGP_ReadBuffer, SGP_MEASURE_BUFFER_RESPONSE_LENGTH, SGP_MEASURE_BUFFER_RESPONSE_LENGTH)) {
 8010f9c:	4b60      	ldr	r3, [pc, #384]	@ (8011120 <SGP_GetMeasurementValues+0x230>)
 8010f9e:	2203      	movs	r2, #3
 8010fa0:	2103      	movs	r1, #3
 8010fa2:	0018      	movs	r0, r3
 8010fa4:	f000 f91a 	bl	80111dc <CheckCRC>
 8010fa8:	0003      	movs	r3, r0
 8010faa:	001a      	movs	r2, r3
 8010fac:	2301      	movs	r3, #1
 8010fae:	4053      	eors	r3, r2
 8010fb0:	b2db      	uxtb	r3, r3
 8010fb2:	2b00      	cmp	r3, #0
 8010fb4:	d02a      	beq.n	801100c <SGP_GetMeasurementValues+0x11c>
      Error("SGP40 measurements CRC check failed.");
 8010fb6:	4a5b      	ldr	r2, [pc, #364]	@ (8011124 <SGP_GetMeasurementValues+0x234>)
 8010fb8:	4b5b      	ldr	r3, [pc, #364]	@ (8011128 <SGP_GetMeasurementValues+0x238>)
 8010fba:	0019      	movs	r1, r3
 8010fbc:	2001      	movs	r0, #1
 8010fbe:	f002 ff3d 	bl	8013e3c <CreateLine>
      Info("SGP_Measure buffer structure:");
 8010fc2:	4a5a      	ldr	r2, [pc, #360]	@ (801112c <SGP_GetMeasurementValues+0x23c>)
 8010fc4:	4b5a      	ldr	r3, [pc, #360]	@ (8011130 <SGP_GetMeasurementValues+0x240>)
 8010fc6:	0019      	movs	r1, r3
 8010fc8:	2002      	movs	r0, #2
 8010fca:	f002 ff37 	bl	8013e3c <CreateLine>
      for (uint8_t i = 0; i < SGP_MEASURE_BUFFER_RESPONSE_LENGTH; i++) {
 8010fce:	230f      	movs	r3, #15
 8010fd0:	18fb      	adds	r3, r7, r3
 8010fd2:	2200      	movs	r2, #0
 8010fd4:	701a      	strb	r2, [r3, #0]
 8010fd6:	e012      	b.n	8010ffe <SGP_GetMeasurementValues+0x10e>
        Debug("SGP_Measurement buffer[%d]: %d", i, SGP_ReadBuffer[i]);
 8010fd8:	240f      	movs	r4, #15
 8010fda:	193b      	adds	r3, r7, r4
 8010fdc:	7818      	ldrb	r0, [r3, #0]
 8010fde:	193b      	adds	r3, r7, r4
 8010fe0:	781b      	ldrb	r3, [r3, #0]
 8010fe2:	4a4f      	ldr	r2, [pc, #316]	@ (8011120 <SGP_GetMeasurementValues+0x230>)
 8010fe4:	5cd3      	ldrb	r3, [r2, r3]
 8010fe6:	4a53      	ldr	r2, [pc, #332]	@ (8011134 <SGP_GetMeasurementValues+0x244>)
 8010fe8:	4953      	ldr	r1, [pc, #332]	@ (8011138 <SGP_GetMeasurementValues+0x248>)
 8010fea:	9300      	str	r3, [sp, #0]
 8010fec:	0003      	movs	r3, r0
 8010fee:	2003      	movs	r0, #3
 8010ff0:	f002 ff24 	bl	8013e3c <CreateLine>
      for (uint8_t i = 0; i < SGP_MEASURE_BUFFER_RESPONSE_LENGTH; i++) {
 8010ff4:	193b      	adds	r3, r7, r4
 8010ff6:	781a      	ldrb	r2, [r3, #0]
 8010ff8:	193b      	adds	r3, r7, r4
 8010ffa:	3201      	adds	r2, #1
 8010ffc:	701a      	strb	r2, [r3, #0]
 8010ffe:	230f      	movs	r3, #15
 8011000:	18fb      	adds	r3, r7, r3
 8011002:	781b      	ldrb	r3, [r3, #0]
 8011004:	2b02      	cmp	r3, #2
 8011006:	d9e7      	bls.n	8010fd8 <SGP_GetMeasurementValues+0xe8>
      }
      return false;
 8011008:	2300      	movs	r3, #0
 801100a:	e076      	b.n	80110fa <SGP_GetMeasurementValues+0x20a>
    }
    SGP_MeasurementDutyCycle = HAL_GetTick() + SGP_SENSOR_DUTYCYCLE;
 801100c:	f003 fc8e 	bl	801492c <HAL_GetTick>
 8011010:	0003      	movs	r3, r0
 8011012:	22fa      	movs	r2, #250	@ 0xfa
 8011014:	0092      	lsls	r2, r2, #2
 8011016:	189a      	adds	r2, r3, r2
 8011018:	4b48      	ldr	r3, [pc, #288]	@ (801113c <SGP_GetMeasurementValues+0x24c>)
 801101a:	601a      	str	r2, [r3, #0]
    SGP_TurnHeaterOff();
 801101c:	f7ff ff5a 	bl	8010ed4 <SGP_TurnHeaterOff>
    SGP_AmountOfSamplesDone++;
 8011020:	4b47      	ldr	r3, [pc, #284]	@ (8011140 <SGP_GetMeasurementValues+0x250>)
 8011022:	781b      	ldrb	r3, [r3, #0]
 8011024:	3301      	adds	r3, #1
 8011026:	b2da      	uxtb	r2, r3
 8011028:	4b45      	ldr	r3, [pc, #276]	@ (8011140 <SGP_GetMeasurementValues+0x250>)
 801102a:	701a      	strb	r2, [r3, #0]
    if (SGP_AmountOfSamplesDone >= SGP_TotalSamples) {
 801102c:	4b44      	ldr	r3, [pc, #272]	@ (8011140 <SGP_GetMeasurementValues+0x250>)
 801102e:	781a      	ldrb	r2, [r3, #0]
 8011030:	4b44      	ldr	r3, [pc, #272]	@ (8011144 <SGP_GetMeasurementValues+0x254>)
 8011032:	781b      	ldrb	r3, [r3, #0]
 8011034:	429a      	cmp	r2, r3
 8011036:	d348      	bcc.n	80110ca <SGP_GetMeasurementValues+0x1da>
      uint16_t rawSignal = ((SGP_ReadBuffer[1] << 8) | (SGP_ReadBuffer[0]));
 8011038:	4b39      	ldr	r3, [pc, #228]	@ (8011120 <SGP_GetMeasurementValues+0x230>)
 801103a:	785b      	ldrb	r3, [r3, #1]
 801103c:	b21b      	sxth	r3, r3
 801103e:	021b      	lsls	r3, r3, #8
 8011040:	b21a      	sxth	r2, r3
 8011042:	4b37      	ldr	r3, [pc, #220]	@ (8011120 <SGP_GetMeasurementValues+0x230>)
 8011044:	781b      	ldrb	r3, [r3, #0]
 8011046:	b21b      	sxth	r3, r3
 8011048:	4313      	orrs	r3, r2
 801104a:	b21a      	sxth	r2, r3
 801104c:	240c      	movs	r4, #12
 801104e:	193b      	adds	r3, r7, r4
 8011050:	801a      	strh	r2, [r3, #0]
      int32_t tempVocIndex = 0;
 8011052:	2300      	movs	r3, #0
 8011054:	60bb      	str	r3, [r7, #8]
      GasIndexAlgorithm_process(&params, rawSignal, &tempVocIndex);
 8011056:	193b      	adds	r3, r7, r4
 8011058:	8819      	ldrh	r1, [r3, #0]
 801105a:	2308      	movs	r3, #8
 801105c:	18fa      	adds	r2, r7, r3
 801105e:	4b3a      	ldr	r3, [pc, #232]	@ (8011148 <SGP_GetMeasurementValues+0x258>)
 8011060:	0018      	movs	r0, r3
 8011062:	f7fe fe87 	bl	800fd74 <GasIndexAlgorithm_process>
      *vocIndex = tempVocIndex;
 8011066:	68ba      	ldr	r2, [r7, #8]
 8011068:	687b      	ldr	r3, [r7, #4]
 801106a:	601a      	str	r2, [r3, #0]
      sgp40samplecounter++;
 801106c:	4b37      	ldr	r3, [pc, #220]	@ (801114c <SGP_GetMeasurementValues+0x25c>)
 801106e:	781b      	ldrb	r3, [r3, #0]
 8011070:	3301      	adds	r3, #1
 8011072:	b2da      	uxtb	r2, r3
 8011074:	4b35      	ldr	r3, [pc, #212]	@ (801114c <SGP_GetMeasurementValues+0x25c>)
 8011076:	701a      	strb	r2, [r3, #0]
      if (sgp40samplecounter == 1) {
 8011078:	4b34      	ldr	r3, [pc, #208]	@ (801114c <SGP_GetMeasurementValues+0x25c>)
 801107a:	781b      	ldrb	r3, [r3, #0]
 801107c:	2b01      	cmp	r3, #1
 801107e:	d10d      	bne.n	801109c <SGP_GetMeasurementValues+0x1ac>
        Debug("SGP40 rawSignal value: %d", rawSignal);
 8011080:	193b      	adds	r3, r7, r4
 8011082:	881b      	ldrh	r3, [r3, #0]
 8011084:	4a32      	ldr	r2, [pc, #200]	@ (8011150 <SGP_GetMeasurementValues+0x260>)
 8011086:	492c      	ldr	r1, [pc, #176]	@ (8011138 <SGP_GetMeasurementValues+0x248>)
 8011088:	2003      	movs	r0, #3
 801108a:	f002 fed7 	bl	8013e3c <CreateLine>
        Debug("SGP40 vocIndex value: %d", tempVocIndex);
 801108e:	68bb      	ldr	r3, [r7, #8]
 8011090:	4a30      	ldr	r2, [pc, #192]	@ (8011154 <SGP_GetMeasurementValues+0x264>)
 8011092:	4929      	ldr	r1, [pc, #164]	@ (8011138 <SGP_GetMeasurementValues+0x248>)
 8011094:	2003      	movs	r0, #3
 8011096:	f002 fed1 	bl	8013e3c <CreateLine>
 801109a:	e006      	b.n	80110aa <SGP_GetMeasurementValues+0x1ba>
      }
      else {
        if (sgp40samplecounter == 11) {
 801109c:	4b2b      	ldr	r3, [pc, #172]	@ (801114c <SGP_GetMeasurementValues+0x25c>)
 801109e:	781b      	ldrb	r3, [r3, #0]
 80110a0:	2b0b      	cmp	r3, #11
 80110a2:	d102      	bne.n	80110aa <SGP_GetMeasurementValues+0x1ba>
          sgp40samplecounter = 0;
 80110a4:	4b29      	ldr	r3, [pc, #164]	@ (801114c <SGP_GetMeasurementValues+0x25c>)
 80110a6:	2200      	movs	r2, #0
 80110a8:	701a      	strb	r2, [r3, #0]
        }
      }
      SetVOCindicator(tempVocIndex);
 80110aa:	68bb      	ldr	r3, [r7, #8]
 80110ac:	b29b      	uxth	r3, r3
 80110ae:	0018      	movs	r0, r3
 80110b0:	f001 fe46 	bl	8012d40 <SetVOCindicator>
      SGP_AmountOfSamplesDone = 0;
 80110b4:	4b22      	ldr	r3, [pc, #136]	@ (8011140 <SGP_GetMeasurementValues+0x250>)
 80110b6:	2200      	movs	r2, #0
 80110b8:	701a      	strb	r2, [r3, #0]
      HT_MeasurementReceived = false;
 80110ba:	4b14      	ldr	r3, [pc, #80]	@ (801110c <SGP_GetMeasurementValues+0x21c>)
 80110bc:	2200      	movs	r2, #0
 80110be:	701a      	strb	r2, [r3, #0]
      SGP_MsgSent = false;
 80110c0:	4b11      	ldr	r3, [pc, #68]	@ (8011108 <SGP_GetMeasurementValues+0x218>)
 80110c2:	2200      	movs	r2, #0
 80110c4:	701a      	strb	r2, [r3, #0]
      return true;
 80110c6:	2301      	movs	r3, #1
 80110c8:	e017      	b.n	80110fa <SGP_GetMeasurementValues+0x20a>
    }
  }
  if (SGP_MeasurementDone() && HeatUpIsDone && MeasurementIsReady) {
 80110ca:	f7ff fef5 	bl	8010eb8 <SGP_MeasurementDone>
 80110ce:	1e03      	subs	r3, r0, #0
 80110d0:	d012      	beq.n	80110f8 <SGP_GetMeasurementValues+0x208>
 80110d2:	4b0c      	ldr	r3, [pc, #48]	@ (8011104 <SGP_GetMeasurementValues+0x214>)
 80110d4:	781b      	ldrb	r3, [r3, #0]
 80110d6:	2b00      	cmp	r3, #0
 80110d8:	d00e      	beq.n	80110f8 <SGP_GetMeasurementValues+0x208>
 80110da:	4b10      	ldr	r3, [pc, #64]	@ (801111c <SGP_GetMeasurementValues+0x22c>)
 80110dc:	781b      	ldrb	r3, [r3, #0]
 80110de:	2b00      	cmp	r3, #0
 80110e0:	d00a      	beq.n	80110f8 <SGP_GetMeasurementValues+0x208>
    // Starting next measurement
    Debug("Starting next SGP_measurement.");
 80110e2:	4a1d      	ldr	r2, [pc, #116]	@ (8011158 <SGP_GetMeasurementValues+0x268>)
 80110e4:	4b14      	ldr	r3, [pc, #80]	@ (8011138 <SGP_GetMeasurementValues+0x248>)
 80110e6:	0019      	movs	r1, r3
 80110e8:	2003      	movs	r0, #3
 80110ea:	f002 fea7 	bl	8013e3c <CreateLine>
    SGP_StartMeasurement();
 80110ee:	f7ff fe8f 	bl	8010e10 <SGP_StartMeasurement>
    SGP_MsgSent = false;
 80110f2:	4b05      	ldr	r3, [pc, #20]	@ (8011108 <SGP_GetMeasurementValues+0x218>)
 80110f4:	2200      	movs	r2, #0
 80110f6:	701a      	strb	r2, [r3, #0]
  }
  return false;
 80110f8:	2300      	movs	r3, #0
}
 80110fa:	0018      	movs	r0, r3
 80110fc:	46bd      	mov	sp, r7
 80110fe:	b005      	add	sp, #20
 8011100:	bd90      	pop	{r4, r7, pc}
 8011102:	46c0      	nop			@ (mov r8, r8)
 8011104:	200011fc 	.word	0x200011fc
 8011108:	200012a9 	.word	0x200012a9
 801110c:	200012a8 	.word	0x200012a8
 8011110:	200000bc 	.word	0x200000bc
 8011114:	200000d0 	.word	0x200000d0
 8011118:	200000b4 	.word	0x200000b4
 801111c:	200011fd 	.word	0x200011fd
 8011120:	200011ec 	.word	0x200011ec
 8011124:	0802d668 	.word	0x0802d668
 8011128:	0802d690 	.word	0x0802d690
 801112c:	0802d694 	.word	0x0802d694
 8011130:	0802d6b4 	.word	0x0802d6b4
 8011134:	0802d6b8 	.word	0x0802d6b8
 8011138:	0802d6d8 	.word	0x0802d6d8
 801113c:	200000cc 	.word	0x200000cc
 8011140:	200011f5 	.word	0x200011f5
 8011144:	200000c6 	.word	0x200000c6
 8011148:	20001200 	.word	0x20001200
 801114c:	200011f6 	.word	0x200011f6
 8011150:	0802d6dc 	.word	0x0802d6dc
 8011154:	0802d6f8 	.word	0x0802d6f8
 8011158:	0802d714 	.word	0x0802d714

0801115c <SGP_DeviceConnected>:

bool SGP_DeviceConnected(void) {
 801115c:	b580      	push	{r7, lr}
 801115e:	b084      	sub	sp, #16
 8011160:	af02      	add	r7, sp, #8
  WriteRegister(SGP_I2C_ADDRESS, GetSerialNumberBuffer, SGP_SHORT_COMMAND_BUFFER_LENGTH);
 8011162:	4b1a      	ldr	r3, [pc, #104]	@ (80111cc <SGP_DeviceConnected+0x70>)
 8011164:	2202      	movs	r2, #2
 8011166:	0019      	movs	r1, r3
 8011168:	2059      	movs	r0, #89	@ 0x59
 801116a:	f7ff fde5 	bl	8010d38 <WriteRegister>
  HAL_Delay(1); // 1ms delay for the sensor to respond (according to datasheet)
 801116e:	2001      	movs	r0, #1
 8011170:	f003 fbe6 	bl	8014940 <HAL_Delay>
  ReadRegister(SGP_I2C_ADDRESS, SGP_ReadBuffer, SGP_SERIAL_NUMBER_RESPONSE_LENGTH);
 8011174:	4b16      	ldr	r3, [pc, #88]	@ (80111d0 <SGP_DeviceConnected+0x74>)
 8011176:	2209      	movs	r2, #9
 8011178:	0019      	movs	r1, r3
 801117a:	2059      	movs	r0, #89	@ 0x59
 801117c:	f7ff fdbe 	bl	8010cfc <ReadRegister>
  for (uint8_t i = 0; i < SGP_SERIAL_NUMBER_RESPONSE_LENGTH; i++) {
 8011180:	1dfb      	adds	r3, r7, #7
 8011182:	2200      	movs	r2, #0
 8011184:	701a      	strb	r2, [r3, #0]
 8011186:	e011      	b.n	80111ac <SGP_DeviceConnected+0x50>
    Info("SGP_Device serial ID[%d]: 0x%X", i, SGP_ReadBuffer[i]);
 8011188:	1dfb      	adds	r3, r7, #7
 801118a:	7818      	ldrb	r0, [r3, #0]
 801118c:	1dfb      	adds	r3, r7, #7
 801118e:	781b      	ldrb	r3, [r3, #0]
 8011190:	4a0f      	ldr	r2, [pc, #60]	@ (80111d0 <SGP_DeviceConnected+0x74>)
 8011192:	5cd3      	ldrb	r3, [r2, r3]
 8011194:	4a0f      	ldr	r2, [pc, #60]	@ (80111d4 <SGP_DeviceConnected+0x78>)
 8011196:	4910      	ldr	r1, [pc, #64]	@ (80111d8 <SGP_DeviceConnected+0x7c>)
 8011198:	9300      	str	r3, [sp, #0]
 801119a:	0003      	movs	r3, r0
 801119c:	2002      	movs	r0, #2
 801119e:	f002 fe4d 	bl	8013e3c <CreateLine>
  for (uint8_t i = 0; i < SGP_SERIAL_NUMBER_RESPONSE_LENGTH; i++) {
 80111a2:	1dfb      	adds	r3, r7, #7
 80111a4:	781a      	ldrb	r2, [r3, #0]
 80111a6:	1dfb      	adds	r3, r7, #7
 80111a8:	3201      	adds	r2, #1
 80111aa:	701a      	strb	r2, [r3, #0]
 80111ac:	1dfb      	adds	r3, r7, #7
 80111ae:	781b      	ldrb	r3, [r3, #0]
 80111b0:	2b08      	cmp	r3, #8
 80111b2:	d9e9      	bls.n	8011188 <SGP_DeviceConnected+0x2c>
  }
  return CheckCRC(SGP_ReadBuffer, SGP_SERIAL_NUMBER_RESPONSE_LENGTH, SGP_SERIAL_NUMBER_SEGMENT_SIZE);
 80111b4:	4b06      	ldr	r3, [pc, #24]	@ (80111d0 <SGP_DeviceConnected+0x74>)
 80111b6:	2203      	movs	r2, #3
 80111b8:	2109      	movs	r1, #9
 80111ba:	0018      	movs	r0, r3
 80111bc:	f000 f80e 	bl	80111dc <CheckCRC>
 80111c0:	0003      	movs	r3, r0
}
 80111c2:	0018      	movs	r0, r3
 80111c4:	46bd      	mov	sp, r7
 80111c6:	b002      	add	sp, #8
 80111c8:	bd80      	pop	{r7, pc}
 80111ca:	46c0      	nop			@ (mov r8, r8)
 80111cc:	200000b0 	.word	0x200000b0
 80111d0:	200011ec 	.word	0x200011ec
 80111d4:	0802d734 	.word	0x0802d734
 80111d8:	0802d6b4 	.word	0x0802d6b4

080111dc <CheckCRC>:

static bool CheckCRC(uint8_t *data, uint8_t dataLength, uint8_t segmentSize) {
 80111dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80111de:	b08f      	sub	sp, #60	@ 0x3c
 80111e0:	af00      	add	r7, sp, #0
 80111e2:	6278      	str	r0, [r7, #36]	@ 0x24
 80111e4:	0008      	movs	r0, r1
 80111e6:	0011      	movs	r1, r2
 80111e8:	2323      	movs	r3, #35	@ 0x23
 80111ea:	18fb      	adds	r3, r7, r3
 80111ec:	1c02      	adds	r2, r0, #0
 80111ee:	701a      	strb	r2, [r3, #0]
 80111f0:	2322      	movs	r3, #34	@ 0x22
 80111f2:	18fb      	adds	r3, r7, r3
 80111f4:	1c0a      	adds	r2, r1, #0
 80111f6:	701a      	strb	r2, [r3, #0]
  for (uint8_t i = 0; i < dataLength; i += segmentSize) {
 80111f8:	2317      	movs	r3, #23
 80111fa:	2220      	movs	r2, #32
 80111fc:	189b      	adds	r3, r3, r2
 80111fe:	19db      	adds	r3, r3, r7
 8011200:	2200      	movs	r2, #0
 8011202:	701a      	strb	r2, [r3, #0]
 8011204:	e09f      	b.n	8011346 <CheckCRC+0x16a>
 8011206:	466b      	mov	r3, sp
 8011208:	001e      	movs	r6, r3
    uint8_t crcData[segmentSize];
 801120a:	2322      	movs	r3, #34	@ 0x22
 801120c:	18fb      	adds	r3, r7, r3
 801120e:	781b      	ldrb	r3, [r3, #0]
 8011210:	001a      	movs	r2, r3
 8011212:	3a01      	subs	r2, #1
 8011214:	633a      	str	r2, [r7, #48]	@ 0x30
 8011216:	60bb      	str	r3, [r7, #8]
 8011218:	2200      	movs	r2, #0
 801121a:	60fa      	str	r2, [r7, #12]
 801121c:	68b8      	ldr	r0, [r7, #8]
 801121e:	68f9      	ldr	r1, [r7, #12]
 8011220:	0002      	movs	r2, r0
 8011222:	0f52      	lsrs	r2, r2, #29
 8011224:	000c      	movs	r4, r1
 8011226:	00e4      	lsls	r4, r4, #3
 8011228:	61fc      	str	r4, [r7, #28]
 801122a:	69fc      	ldr	r4, [r7, #28]
 801122c:	4314      	orrs	r4, r2
 801122e:	61fc      	str	r4, [r7, #28]
 8011230:	0002      	movs	r2, r0
 8011232:	00d2      	lsls	r2, r2, #3
 8011234:	61ba      	str	r2, [r7, #24]
 8011236:	603b      	str	r3, [r7, #0]
 8011238:	2200      	movs	r2, #0
 801123a:	607a      	str	r2, [r7, #4]
 801123c:	6838      	ldr	r0, [r7, #0]
 801123e:	6879      	ldr	r1, [r7, #4]
 8011240:	0002      	movs	r2, r0
 8011242:	0f52      	lsrs	r2, r2, #29
 8011244:	000c      	movs	r4, r1
 8011246:	00e4      	lsls	r4, r4, #3
 8011248:	617c      	str	r4, [r7, #20]
 801124a:	697c      	ldr	r4, [r7, #20]
 801124c:	4314      	orrs	r4, r2
 801124e:	617c      	str	r4, [r7, #20]
 8011250:	0002      	movs	r2, r0
 8011252:	00d2      	lsls	r2, r2, #3
 8011254:	613a      	str	r2, [r7, #16]
 8011256:	3307      	adds	r3, #7
 8011258:	08db      	lsrs	r3, r3, #3
 801125a:	00db      	lsls	r3, r3, #3
 801125c:	466a      	mov	r2, sp
 801125e:	1ad3      	subs	r3, r2, r3
 8011260:	469d      	mov	sp, r3
 8011262:	466b      	mov	r3, sp
 8011264:	3300      	adds	r3, #0
 8011266:	62fb      	str	r3, [r7, #44]	@ 0x2c

    for (uint8_t j = 0; j < segmentSize; j++) {
 8011268:	2316      	movs	r3, #22
 801126a:	2220      	movs	r2, #32
 801126c:	189b      	adds	r3, r3, r2
 801126e:	19db      	adds	r3, r3, r7
 8011270:	2200      	movs	r2, #0
 8011272:	701a      	strb	r2, [r3, #0]
 8011274:	e01e      	b.n	80112b4 <CheckCRC+0xd8>
      crcData[j] = data[i + j];
 8011276:	2317      	movs	r3, #23
 8011278:	2220      	movs	r2, #32
 801127a:	189b      	adds	r3, r3, r2
 801127c:	19db      	adds	r3, r3, r7
 801127e:	781a      	ldrb	r2, [r3, #0]
 8011280:	2116      	movs	r1, #22
 8011282:	2320      	movs	r3, #32
 8011284:	18cb      	adds	r3, r1, r3
 8011286:	19db      	adds	r3, r3, r7
 8011288:	781b      	ldrb	r3, [r3, #0]
 801128a:	18d3      	adds	r3, r2, r3
 801128c:	001a      	movs	r2, r3
 801128e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011290:	189a      	adds	r2, r3, r2
 8011292:	0008      	movs	r0, r1
 8011294:	2320      	movs	r3, #32
 8011296:	18cb      	adds	r3, r1, r3
 8011298:	19db      	adds	r3, r3, r7
 801129a:	781b      	ldrb	r3, [r3, #0]
 801129c:	7811      	ldrb	r1, [r2, #0]
 801129e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80112a0:	54d1      	strb	r1, [r2, r3]
    for (uint8_t j = 0; j < segmentSize; j++) {
 80112a2:	2320      	movs	r3, #32
 80112a4:	18c3      	adds	r3, r0, r3
 80112a6:	19db      	adds	r3, r3, r7
 80112a8:	781a      	ldrb	r2, [r3, #0]
 80112aa:	2320      	movs	r3, #32
 80112ac:	18c3      	adds	r3, r0, r3
 80112ae:	19db      	adds	r3, r3, r7
 80112b0:	3201      	adds	r2, #1
 80112b2:	701a      	strb	r2, [r3, #0]
 80112b4:	2316      	movs	r3, #22
 80112b6:	2220      	movs	r2, #32
 80112b8:	189b      	adds	r3, r3, r2
 80112ba:	19da      	adds	r2, r3, r7
 80112bc:	2322      	movs	r3, #34	@ 0x22
 80112be:	18fb      	adds	r3, r7, r3
 80112c0:	7812      	ldrb	r2, [r2, #0]
 80112c2:	781b      	ldrb	r3, [r3, #0]
 80112c4:	429a      	cmp	r2, r3
 80112c6:	d3d6      	bcc.n	8011276 <CheckCRC+0x9a>
    }
    uint8_t crc = data[i + segmentSize - 1];
 80112c8:	2417      	movs	r4, #23
 80112ca:	2320      	movs	r3, #32
 80112cc:	18e3      	adds	r3, r4, r3
 80112ce:	19db      	adds	r3, r3, r7
 80112d0:	781a      	ldrb	r2, [r3, #0]
 80112d2:	2322      	movs	r3, #34	@ 0x22
 80112d4:	18fb      	adds	r3, r7, r3
 80112d6:	781b      	ldrb	r3, [r3, #0]
 80112d8:	18d3      	adds	r3, r2, r3
 80112da:	3b01      	subs	r3, #1
 80112dc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80112de:	18d2      	adds	r2, r2, r3
 80112e0:	250b      	movs	r5, #11
 80112e2:	2320      	movs	r3, #32
 80112e4:	18eb      	adds	r3, r5, r3
 80112e6:	19db      	adds	r3, r3, r7
 80112e8:	7812      	ldrb	r2, [r2, #0]
 80112ea:	701a      	strb	r2, [r3, #0]

    if (CalculateCRC(crcData, segmentSize - 1) != crc) {
 80112ec:	2322      	movs	r3, #34	@ 0x22
 80112ee:	18fb      	adds	r3, r7, r3
 80112f0:	781b      	ldrb	r3, [r3, #0]
 80112f2:	3b01      	subs	r3, #1
 80112f4:	b2da      	uxtb	r2, r3
 80112f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80112f8:	0011      	movs	r1, r2
 80112fa:	0018      	movs	r0, r3
 80112fc:	f000 f838 	bl	8011370 <CalculateCRC>
 8011300:	0003      	movs	r3, r0
 8011302:	001a      	movs	r2, r3
 8011304:	2320      	movs	r3, #32
 8011306:	18eb      	adds	r3, r5, r3
 8011308:	19db      	adds	r3, r3, r7
 801130a:	781b      	ldrb	r3, [r3, #0]
 801130c:	4293      	cmp	r3, r2
 801130e:	d00c      	beq.n	801132a <CheckCRC+0x14e>
      Error("CRC check failed for segment: %d.", i + 1);
 8011310:	2320      	movs	r3, #32
 8011312:	18e3      	adds	r3, r4, r3
 8011314:	19db      	adds	r3, r3, r7
 8011316:	781b      	ldrb	r3, [r3, #0]
 8011318:	3301      	adds	r3, #1
 801131a:	4a13      	ldr	r2, [pc, #76]	@ (8011368 <CheckCRC+0x18c>)
 801131c:	4913      	ldr	r1, [pc, #76]	@ (801136c <CheckCRC+0x190>)
 801131e:	2001      	movs	r0, #1
 8011320:	f002 fd8c 	bl	8013e3c <CreateLine>
      return false;
 8011324:	2300      	movs	r3, #0
 8011326:	46b5      	mov	sp, r6
 8011328:	e019      	b.n	801135e <CheckCRC+0x182>
 801132a:	46b5      	mov	sp, r6
  for (uint8_t i = 0; i < dataLength; i += segmentSize) {
 801132c:	2217      	movs	r2, #23
 801132e:	2320      	movs	r3, #32
 8011330:	18d3      	adds	r3, r2, r3
 8011332:	19db      	adds	r3, r3, r7
 8011334:	2120      	movs	r1, #32
 8011336:	1852      	adds	r2, r2, r1
 8011338:	19d1      	adds	r1, r2, r7
 801133a:	2222      	movs	r2, #34	@ 0x22
 801133c:	18ba      	adds	r2, r7, r2
 801133e:	7809      	ldrb	r1, [r1, #0]
 8011340:	7812      	ldrb	r2, [r2, #0]
 8011342:	188a      	adds	r2, r1, r2
 8011344:	701a      	strb	r2, [r3, #0]
 8011346:	2317      	movs	r3, #23
 8011348:	2220      	movs	r2, #32
 801134a:	189b      	adds	r3, r3, r2
 801134c:	19da      	adds	r2, r3, r7
 801134e:	2323      	movs	r3, #35	@ 0x23
 8011350:	18fb      	adds	r3, r7, r3
 8011352:	7812      	ldrb	r2, [r2, #0]
 8011354:	781b      	ldrb	r3, [r3, #0]
 8011356:	429a      	cmp	r2, r3
 8011358:	d200      	bcs.n	801135c <CheckCRC+0x180>
 801135a:	e754      	b.n	8011206 <CheckCRC+0x2a>
    }
  }
  return true;
 801135c:	2301      	movs	r3, #1
}
 801135e:	0018      	movs	r0, r3
 8011360:	46bd      	mov	sp, r7
 8011362:	b00f      	add	sp, #60	@ 0x3c
 8011364:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011366:	46c0      	nop			@ (mov r8, r8)
 8011368:	0802d754 	.word	0x0802d754
 801136c:	0802d690 	.word	0x0802d690

08011370 <CalculateCRC>:

static uint8_t CalculateCRC(uint8_t *data, uint8_t length) {
 8011370:	b580      	push	{r7, lr}
 8011372:	b084      	sub	sp, #16
 8011374:	af00      	add	r7, sp, #0
 8011376:	6078      	str	r0, [r7, #4]
 8011378:	000a      	movs	r2, r1
 801137a:	1cfb      	adds	r3, r7, #3
 801137c:	701a      	strb	r2, [r3, #0]
  uint8_t crc = SGP_CRC_INIT_VALUE;
 801137e:	230f      	movs	r3, #15
 8011380:	18fb      	adds	r3, r7, r3
 8011382:	22ff      	movs	r2, #255	@ 0xff
 8011384:	701a      	strb	r2, [r3, #0]

  for (uint8_t i = 0; i < length; i++) {
 8011386:	230e      	movs	r3, #14
 8011388:	18fb      	adds	r3, r7, r3
 801138a:	2200      	movs	r2, #0
 801138c:	701a      	strb	r2, [r3, #0]
 801138e:	e038      	b.n	8011402 <CalculateCRC+0x92>
    // XOR byte into least significant byte of crc
    crc ^= data[i];
 8011390:	230e      	movs	r3, #14
 8011392:	18fb      	adds	r3, r7, r3
 8011394:	781b      	ldrb	r3, [r3, #0]
 8011396:	687a      	ldr	r2, [r7, #4]
 8011398:	18d3      	adds	r3, r2, r3
 801139a:	7819      	ldrb	r1, [r3, #0]
 801139c:	220f      	movs	r2, #15
 801139e:	18bb      	adds	r3, r7, r2
 80113a0:	18ba      	adds	r2, r7, r2
 80113a2:	7812      	ldrb	r2, [r2, #0]
 80113a4:	404a      	eors	r2, r1
 80113a6:	701a      	strb	r2, [r3, #0]

    for (uint8_t j = 0; j < 8; j++) {
 80113a8:	230d      	movs	r3, #13
 80113aa:	18fb      	adds	r3, r7, r3
 80113ac:	2200      	movs	r2, #0
 80113ae:	701a      	strb	r2, [r3, #0]
 80113b0:	e01c      	b.n	80113ec <CalculateCRC+0x7c>
      // If the leftmost (most significant) bit is set
      if (crc & SGP_CRC_MSB_MASK) {
 80113b2:	210f      	movs	r1, #15
 80113b4:	187b      	adds	r3, r7, r1
 80113b6:	781b      	ldrb	r3, [r3, #0]
 80113b8:	b25b      	sxtb	r3, r3
 80113ba:	2b00      	cmp	r3, #0
 80113bc:	da0a      	bge.n	80113d4 <CalculateCRC+0x64>
        // Shift left and XOR with polynomial
        crc = (crc << 1) ^ SGP_CRC_POLYNOMIAL;
 80113be:	187b      	adds	r3, r7, r1
 80113c0:	781b      	ldrb	r3, [r3, #0]
 80113c2:	b25b      	sxtb	r3, r3
 80113c4:	18db      	adds	r3, r3, r3
 80113c6:	b25b      	sxtb	r3, r3
 80113c8:	2231      	movs	r2, #49	@ 0x31
 80113ca:	4053      	eors	r3, r2
 80113cc:	b25a      	sxtb	r2, r3
 80113ce:	187b      	adds	r3, r7, r1
 80113d0:	701a      	strb	r2, [r3, #0]
 80113d2:	e005      	b.n	80113e0 <CalculateCRC+0x70>
      } else {
        crc <<= 1;
 80113d4:	230f      	movs	r3, #15
 80113d6:	18fa      	adds	r2, r7, r3
 80113d8:	18fb      	adds	r3, r7, r3
 80113da:	781b      	ldrb	r3, [r3, #0]
 80113dc:	18db      	adds	r3, r3, r3
 80113de:	7013      	strb	r3, [r2, #0]
    for (uint8_t j = 0; j < 8; j++) {
 80113e0:	210d      	movs	r1, #13
 80113e2:	187b      	adds	r3, r7, r1
 80113e4:	781a      	ldrb	r2, [r3, #0]
 80113e6:	187b      	adds	r3, r7, r1
 80113e8:	3201      	adds	r2, #1
 80113ea:	701a      	strb	r2, [r3, #0]
 80113ec:	230d      	movs	r3, #13
 80113ee:	18fb      	adds	r3, r7, r3
 80113f0:	781b      	ldrb	r3, [r3, #0]
 80113f2:	2b07      	cmp	r3, #7
 80113f4:	d9dd      	bls.n	80113b2 <CalculateCRC+0x42>
  for (uint8_t i = 0; i < length; i++) {
 80113f6:	210e      	movs	r1, #14
 80113f8:	187b      	adds	r3, r7, r1
 80113fa:	781a      	ldrb	r2, [r3, #0]
 80113fc:	187b      	adds	r3, r7, r1
 80113fe:	3201      	adds	r2, #1
 8011400:	701a      	strb	r2, [r3, #0]
 8011402:	230e      	movs	r3, #14
 8011404:	18fa      	adds	r2, r7, r3
 8011406:	1cfb      	adds	r3, r7, #3
 8011408:	7812      	ldrb	r2, [r2, #0]
 801140a:	781b      	ldrb	r3, [r3, #0]
 801140c:	429a      	cmp	r2, r3
 801140e:	d3bf      	bcc.n	8011390 <CalculateCRC+0x20>
      }
    }
  }
//    Info("SGP_CRC calculated value: 0x%X", crc);
  return crc;
 8011410:	230f      	movs	r3, #15
 8011412:	18fb      	adds	r3, r7, r3
 8011414:	781b      	ldrb	r3, [r3, #0]
}
 8011416:	0018      	movs	r0, r3
 8011418:	46bd      	mov	sp, r7
 801141a:	b004      	add	sp, #16
 801141c:	bd80      	pop	{r7, pc}
	...

08011420 <SGP_SetHT>:

void SGP_SetHT(float* temperature, float* humidity){
 8011420:	b580      	push	{r7, lr}
 8011422:	b084      	sub	sp, #16
 8011424:	af00      	add	r7, sp, #0
 8011426:	6078      	str	r0, [r7, #4]
 8011428:	6039      	str	r1, [r7, #0]
  uint8_t humBuf[2];
  uint8_t tempBuf[2];
  SGP_Temp = (uint16_t)(((*temperature+45.0f)/175.0f)*(float)0xFFFF);
 801142a:	687b      	ldr	r3, [r7, #4]
 801142c:	681b      	ldr	r3, [r3, #0]
 801142e:	4936      	ldr	r1, [pc, #216]	@ (8011508 <SGP_SetHT+0xe8>)
 8011430:	1c18      	adds	r0, r3, #0
 8011432:	f7ef fa45 	bl	80008c0 <__aeabi_fadd>
 8011436:	1c03      	adds	r3, r0, #0
 8011438:	4934      	ldr	r1, [pc, #208]	@ (801150c <SGP_SetHT+0xec>)
 801143a:	1c18      	adds	r0, r3, #0
 801143c:	f7ef fc32 	bl	8000ca4 <__aeabi_fdiv>
 8011440:	1c03      	adds	r3, r0, #0
 8011442:	4933      	ldr	r1, [pc, #204]	@ (8011510 <SGP_SetHT+0xf0>)
 8011444:	1c18      	adds	r0, r3, #0
 8011446:	f7ef fdfb 	bl	8001040 <__aeabi_fmul>
 801144a:	1c03      	adds	r3, r0, #0
 801144c:	1c18      	adds	r0, r3, #0
 801144e:	f7ef f8e5 	bl	800061c <__aeabi_f2uiz>
 8011452:	0003      	movs	r3, r0
 8011454:	b29a      	uxth	r2, r3
 8011456:	4b2f      	ldr	r3, [pc, #188]	@ (8011514 <SGP_SetHT+0xf4>)
 8011458:	801a      	strh	r2, [r3, #0]
  SGP_Hum = ((*humidity/100.0f)*(float)0xFFFF);
 801145a:	683b      	ldr	r3, [r7, #0]
 801145c:	681b      	ldr	r3, [r3, #0]
 801145e:	492e      	ldr	r1, [pc, #184]	@ (8011518 <SGP_SetHT+0xf8>)
 8011460:	1c18      	adds	r0, r3, #0
 8011462:	f7ef fc1f 	bl	8000ca4 <__aeabi_fdiv>
 8011466:	1c03      	adds	r3, r0, #0
 8011468:	4929      	ldr	r1, [pc, #164]	@ (8011510 <SGP_SetHT+0xf0>)
 801146a:	1c18      	adds	r0, r3, #0
 801146c:	f7ef fde8 	bl	8001040 <__aeabi_fmul>
 8011470:	1c03      	adds	r3, r0, #0
 8011472:	1c18      	adds	r0, r3, #0
 8011474:	f7ef f8d2 	bl	800061c <__aeabi_f2uiz>
 8011478:	0003      	movs	r3, r0
 801147a:	b29a      	uxth	r2, r3
 801147c:	4b27      	ldr	r3, [pc, #156]	@ (801151c <SGP_SetHT+0xfc>)
 801147e:	801a      	strh	r2, [r3, #0]
  humBuf[0] = MeasureRawWithCompBuffer[2] = SGP_Hum >> 8;
 8011480:	4b26      	ldr	r3, [pc, #152]	@ (801151c <SGP_SetHT+0xfc>)
 8011482:	881b      	ldrh	r3, [r3, #0]
 8011484:	0a1b      	lsrs	r3, r3, #8
 8011486:	b29b      	uxth	r3, r3
 8011488:	b2da      	uxtb	r2, r3
 801148a:	4b25      	ldr	r3, [pc, #148]	@ (8011520 <SGP_SetHT+0x100>)
 801148c:	709a      	strb	r2, [r3, #2]
 801148e:	4b24      	ldr	r3, [pc, #144]	@ (8011520 <SGP_SetHT+0x100>)
 8011490:	789a      	ldrb	r2, [r3, #2]
 8011492:	210c      	movs	r1, #12
 8011494:	187b      	adds	r3, r7, r1
 8011496:	701a      	strb	r2, [r3, #0]
  humBuf[1] = MeasureRawWithCompBuffer[3] = SGP_Hum;
 8011498:	4b20      	ldr	r3, [pc, #128]	@ (801151c <SGP_SetHT+0xfc>)
 801149a:	881b      	ldrh	r3, [r3, #0]
 801149c:	b2da      	uxtb	r2, r3
 801149e:	4b20      	ldr	r3, [pc, #128]	@ (8011520 <SGP_SetHT+0x100>)
 80114a0:	70da      	strb	r2, [r3, #3]
 80114a2:	4b1f      	ldr	r3, [pc, #124]	@ (8011520 <SGP_SetHT+0x100>)
 80114a4:	78da      	ldrb	r2, [r3, #3]
 80114a6:	187b      	adds	r3, r7, r1
 80114a8:	705a      	strb	r2, [r3, #1]
  MeasureRawWithCompBuffer[4] = CalculateCRC(humBuf, 2);
 80114aa:	187b      	adds	r3, r7, r1
 80114ac:	2102      	movs	r1, #2
 80114ae:	0018      	movs	r0, r3
 80114b0:	f7ff ff5e 	bl	8011370 <CalculateCRC>
 80114b4:	0003      	movs	r3, r0
 80114b6:	001a      	movs	r2, r3
 80114b8:	4b19      	ldr	r3, [pc, #100]	@ (8011520 <SGP_SetHT+0x100>)
 80114ba:	711a      	strb	r2, [r3, #4]
  tempBuf[0] = MeasureRawWithCompBuffer[5] = SGP_Temp >> 8;
 80114bc:	4b15      	ldr	r3, [pc, #84]	@ (8011514 <SGP_SetHT+0xf4>)
 80114be:	881b      	ldrh	r3, [r3, #0]
 80114c0:	0a1b      	lsrs	r3, r3, #8
 80114c2:	b29b      	uxth	r3, r3
 80114c4:	b2da      	uxtb	r2, r3
 80114c6:	4b16      	ldr	r3, [pc, #88]	@ (8011520 <SGP_SetHT+0x100>)
 80114c8:	715a      	strb	r2, [r3, #5]
 80114ca:	4b15      	ldr	r3, [pc, #84]	@ (8011520 <SGP_SetHT+0x100>)
 80114cc:	795a      	ldrb	r2, [r3, #5]
 80114ce:	2108      	movs	r1, #8
 80114d0:	187b      	adds	r3, r7, r1
 80114d2:	701a      	strb	r2, [r3, #0]
  tempBuf[1] = MeasureRawWithCompBuffer[6] = SGP_Temp;
 80114d4:	4b0f      	ldr	r3, [pc, #60]	@ (8011514 <SGP_SetHT+0xf4>)
 80114d6:	881b      	ldrh	r3, [r3, #0]
 80114d8:	b2da      	uxtb	r2, r3
 80114da:	4b11      	ldr	r3, [pc, #68]	@ (8011520 <SGP_SetHT+0x100>)
 80114dc:	719a      	strb	r2, [r3, #6]
 80114de:	4b10      	ldr	r3, [pc, #64]	@ (8011520 <SGP_SetHT+0x100>)
 80114e0:	799a      	ldrb	r2, [r3, #6]
 80114e2:	187b      	adds	r3, r7, r1
 80114e4:	705a      	strb	r2, [r3, #1]
  MeasureRawWithCompBuffer[7] = CalculateCRC(tempBuf, 2);
 80114e6:	187b      	adds	r3, r7, r1
 80114e8:	2102      	movs	r1, #2
 80114ea:	0018      	movs	r0, r3
 80114ec:	f7ff ff40 	bl	8011370 <CalculateCRC>
 80114f0:	0003      	movs	r3, r0
 80114f2:	001a      	movs	r2, r3
 80114f4:	4b0a      	ldr	r3, [pc, #40]	@ (8011520 <SGP_SetHT+0x100>)
 80114f6:	71da      	strb	r2, [r3, #7]
  HT_MeasurementReceived = true;
 80114f8:	4b0a      	ldr	r3, [pc, #40]	@ (8011524 <SGP_SetHT+0x104>)
 80114fa:	2201      	movs	r2, #1
 80114fc:	701a      	strb	r2, [r3, #0]
}
 80114fe:	46c0      	nop			@ (mov r8, r8)
 8011500:	46bd      	mov	sp, r7
 8011502:	b004      	add	sp, #16
 8011504:	bd80      	pop	{r7, pc}
 8011506:	46c0      	nop			@ (mov r8, r8)
 8011508:	42340000 	.word	0x42340000
 801150c:	432f0000 	.word	0x432f0000
 8011510:	477fff00 	.word	0x477fff00
 8011514:	200012a6 	.word	0x200012a6
 8011518:	42c80000 	.word	0x42c80000
 801151c:	200012a4 	.word	0x200012a4
 8011520:	200000bc 	.word	0x200000bc
 8011524:	200012a8 	.word	0x200012a8

08011528 <SGP_SoftReset>:
    }
  }
  return false;
}

void SGP_SoftReset(void) {
 8011528:	b580      	push	{r7, lr}
 801152a:	af00      	add	r7, sp, #0
  /* Joris: Datasheet mentioned this was a general reset command, which is odd.
  // But if something happens to the i2c bus, this might be the issue.
  Worth mentioning. */
  // Danny: Its not odd, its a general reset command which is a standard syntaxis. So do not use blind.
  // This command could take from 0.1 to 1ms.
  Debug("SGP40 brought to idle");
 801152c:	4a09      	ldr	r2, [pc, #36]	@ (8011554 <SGP_SoftReset+0x2c>)
 801152e:	4b0a      	ldr	r3, [pc, #40]	@ (8011558 <SGP_SoftReset+0x30>)
 8011530:	0019      	movs	r1, r3
 8011532:	2003      	movs	r0, #3
 8011534:	f002 fc82 	bl	8013e3c <CreateLine>
  SGP_TurnHeaterOff();
 8011538:	f7ff fccc 	bl	8010ed4 <SGP_TurnHeaterOff>
  HAL_Delay(10);
 801153c:	200a      	movs	r0, #10
 801153e:	f003 f9ff 	bl	8014940 <HAL_Delay>
  WriteRegister(SGP_I2C_ADDRESS, SoftResetBuffer, SGP_SHORT_COMMAND_BUFFER_LENGTH);
 8011542:	4b06      	ldr	r3, [pc, #24]	@ (801155c <SGP_SoftReset+0x34>)
 8011544:	2202      	movs	r2, #2
 8011546:	0019      	movs	r1, r3
 8011548:	2059      	movs	r0, #89	@ 0x59
 801154a:	f7ff fbf5 	bl	8010d38 <WriteRegister>
}
 801154e:	46c0      	nop			@ (mov r8, r8)
 8011550:	46bd      	mov	sp, r7
 8011552:	bd80      	pop	{r7, pc}
 8011554:	0802d7fc 	.word	0x0802d7fc
 8011558:	0802d6d8 	.word	0x0802d6d8
 801155c:	200000c4 	.word	0x200000c4

08011560 <ResetVOCresult>:

void ResetVOCresult(void) {
 8011560:	b580      	push	{r7, lr}
 8011562:	af00      	add	r7, sp, #0
  vocIndex = 0;
 8011564:	4b02      	ldr	r3, [pc, #8]	@ (8011570 <ResetVOCresult+0x10>)
 8011566:	2200      	movs	r2, #0
 8011568:	601a      	str	r2, [r3, #0]
}
 801156a:	46c0      	nop			@ (mov r8, r8)
 801156c:	46bd      	mov	sp, r7
 801156e:	bd80      	pop	{r7, pc}
 8011570:	200012ac 	.word	0x200012ac

08011574 <SGP_Upkeep>:
SGP40State SGP_Upkeep(void) {
 8011574:	b580      	push	{r7, lr}
 8011576:	af00      	add	r7, sp, #0
  static SGP40State SGPState = SGP_STATE_INIT;
  switch(SGPState) {
 8011578:	4b4b      	ldr	r3, [pc, #300]	@ (80116a8 <SGP_Upkeep+0x134>)
 801157a:	781b      	ldrb	r3, [r3, #0]
 801157c:	2b07      	cmp	r3, #7
 801157e:	d900      	bls.n	8011582 <SGP_Upkeep+0xe>
 8011580:	e07a      	b.n	8011678 <SGP_Upkeep+0x104>
 8011582:	009a      	lsls	r2, r3, #2
 8011584:	4b49      	ldr	r3, [pc, #292]	@ (80116ac <SGP_Upkeep+0x138>)
 8011586:	18d3      	adds	r3, r2, r3
 8011588:	681b      	ldr	r3, [r3, #0]
 801158a:	469f      	mov	pc, r3
  case SGP_STATE_OFF:
    Debug("Measurements are turned off for SGP40.");
 801158c:	4a48      	ldr	r2, [pc, #288]	@ (80116b0 <SGP_Upkeep+0x13c>)
 801158e:	4b49      	ldr	r3, [pc, #292]	@ (80116b4 <SGP_Upkeep+0x140>)
 8011590:	0019      	movs	r1, r3
 8011592:	2003      	movs	r0, #3
 8011594:	f002 fc52 	bl	8013e3c <CreateLine>
    break;
 8011598:	e081      	b.n	801169e <SGP_Upkeep+0x12a>

  case SGP_STATE_INIT:
    ResetVOCresult();
 801159a:	f7ff ffe1 	bl	8011560 <ResetVOCresult>
    SGPState = SGP_STATE_START_MEASUREMENTS;
 801159e:	4b42      	ldr	r3, [pc, #264]	@ (80116a8 <SGP_Upkeep+0x134>)
 80115a0:	2201      	movs	r2, #1
 80115a2:	701a      	strb	r2, [r3, #0]
    break;
 80115a4:	e07b      	b.n	801169e <SGP_Upkeep+0x12a>

  case SGP_STATE_START_MEASUREMENTS:
    if (getSensorLock() != FREE) {
 80115a6:	f7fc fc2b 	bl	800de00 <getSensorLock>
 80115aa:	1e03      	subs	r3, r0, #0
 80115ac:	d000      	beq.n	80115b0 <SGP_Upkeep+0x3c>
 80115ae:	e06f      	b.n	8011690 <SGP_Upkeep+0x11c>
      break;
    }
    setSensorLock(SGP40);
 80115b0:	2005      	movs	r0, #5
 80115b2:	f7fc fc11 	bl	800ddd8 <setSensorLock>
    SetMeasurementIndicator();
 80115b6:	f001 f99f 	bl	80128f8 <SetMeasurementIndicator>
    SGP_StartMeasurement();
 80115ba:	f7ff fc29 	bl	8010e10 <SGP_StartMeasurement>
    HAL_Delay(10); // wait for deferred DMA transfers
 80115be:	200a      	movs	r0, #10
 80115c0:	f003 f9be 	bl	8014940 <HAL_Delay>
    setSensorLock(FREE);
 80115c4:	2000      	movs	r0, #0
 80115c6:	f7fc fc07 	bl	800ddd8 <setSensorLock>
    SGPState = SGP_STATE_WAIT_FOR_COMPLETION;
 80115ca:	4b37      	ldr	r3, [pc, #220]	@ (80116a8 <SGP_Upkeep+0x134>)
 80115cc:	2202      	movs	r2, #2
 80115ce:	701a      	strb	r2, [r3, #0]
    break;
 80115d0:	e065      	b.n	801169e <SGP_Upkeep+0x12a>

  case SGP_STATE_WAIT_FOR_COMPLETION:
    if (getSensorLock() != FREE) {
 80115d2:	f7fc fc15 	bl	800de00 <getSensorLock>
 80115d6:	1e03      	subs	r3, r0, #0
 80115d8:	d15c      	bne.n	8011694 <SGP_Upkeep+0x120>
      break;
    }
    setSensorLock(SGP40);
 80115da:	2005      	movs	r0, #5
 80115dc:	f7fc fbfc 	bl	800ddd8 <setSensorLock>
    if(SGP_GetMeasurementValues(&vocIndex)) {
 80115e0:	4b35      	ldr	r3, [pc, #212]	@ (80116b8 <SGP_Upkeep+0x144>)
 80115e2:	0018      	movs	r0, r3
 80115e4:	f7ff fc84 	bl	8010ef0 <SGP_GetMeasurementValues>
 80115e8:	1e03      	subs	r3, r0, #0
 80115ea:	d002      	beq.n	80115f2 <SGP_Upkeep+0x7e>
      SGPState = SGP_STATE_PROCESS_RESULTS;
 80115ec:	4b2e      	ldr	r3, [pc, #184]	@ (80116a8 <SGP_Upkeep+0x134>)
 80115ee:	2203      	movs	r2, #3
 80115f0:	701a      	strb	r2, [r3, #0]
    }
    HAL_Delay(10); // wait for deferred DMA transfers
 80115f2:	200a      	movs	r0, #10
 80115f4:	f003 f9a4 	bl	8014940 <HAL_Delay>
    setSensorLock(FREE);
 80115f8:	2000      	movs	r0, #0
 80115fa:	f7fc fbed 	bl	800ddd8 <setSensorLock>
    break;
 80115fe:	e04e      	b.n	801169e <SGP_Upkeep+0x12a>

  case SGP_STATE_PROCESS_RESULTS:
    setVOC(vocIndex);
 8011600:	4b2d      	ldr	r3, [pc, #180]	@ (80116b8 <SGP_Upkeep+0x144>)
 8011602:	681b      	ldr	r3, [r3, #0]
 8011604:	b29b      	uxth	r3, r3
 8011606:	0018      	movs	r0, r3
 8011608:	f7f3 fa54 	bl	8004ab4 <setVOC>
    SGPState = SGP_WAIT_STATE_MODE;
 801160c:	4b26      	ldr	r3, [pc, #152]	@ (80116a8 <SGP_Upkeep+0x134>)
 801160e:	2206      	movs	r2, #6
 8011610:	701a      	strb	r2, [r3, #0]
    break;
 8011612:	e044      	b.n	801169e <SGP_Upkeep+0x12a>
  case SGP_WAIT_STATE_MODE:
    SGPState = SGP_STATE_WAIT;
 8011614:	4b24      	ldr	r3, [pc, #144]	@ (80116a8 <SGP_Upkeep+0x134>)
 8011616:	2207      	movs	r2, #7
 8011618:	701a      	strb	r2, [r3, #0]
    if ((sgp40samplecounter >= 4) && (!usbPluggedIn)) {
 801161a:	4b28      	ldr	r3, [pc, #160]	@ (80116bc <SGP_Upkeep+0x148>)
 801161c:	781b      	ldrb	r3, [r3, #0]
 801161e:	2b03      	cmp	r3, #3
 8011620:	d912      	bls.n	8011648 <SGP_Upkeep+0xd4>
 8011622:	4b27      	ldr	r3, [pc, #156]	@ (80116c0 <SGP_Upkeep+0x14c>)
 8011624:	781b      	ldrb	r3, [r3, #0]
 8011626:	2201      	movs	r2, #1
 8011628:	4053      	eors	r3, r2
 801162a:	b2db      	uxtb	r3, r3
 801162c:	2b00      	cmp	r3, #0
 801162e:	d00b      	beq.n	8011648 <SGP_Upkeep+0xd4>
      // During startup take 12 samples
      if (sgpinitdone) {
 8011630:	4b24      	ldr	r3, [pc, #144]	@ (80116c4 <SGP_Upkeep+0x150>)
 8011632:	781b      	ldrb	r3, [r3, #0]
 8011634:	2b00      	cmp	r3, #0
 8011636:	d004      	beq.n	8011642 <SGP_Upkeep+0xce>
        SGP_SoftReset();
 8011638:	f7ff ff76 	bl	8011528 <SGP_SoftReset>
        SetVOCSensorStatus(false);
 801163c:	2000      	movs	r0, #0
 801163e:	f7fb ff75 	bl	800d52c <SetVOCSensorStatus>
      }
      sgpinitdone = true;
 8011642:	4b20      	ldr	r3, [pc, #128]	@ (80116c4 <SGP_Upkeep+0x150>)
 8011644:	2201      	movs	r2, #1
 8011646:	701a      	strb	r2, [r3, #0]
    }
    SGP40TimeStamp = HAL_GetTick() + 800;  // about every 1 seconds
 8011648:	f003 f970 	bl	801492c <HAL_GetTick>
 801164c:	0003      	movs	r3, r0
 801164e:	22c8      	movs	r2, #200	@ 0xc8
 8011650:	0092      	lsls	r2, r2, #2
 8011652:	189a      	adds	r2, r3, r2
 8011654:	4b1c      	ldr	r3, [pc, #112]	@ (80116c8 <SGP_Upkeep+0x154>)
 8011656:	601a      	str	r2, [r3, #0]
    ResetMeasurementIndicator();
 8011658:	f001 f966 	bl	8012928 <ResetMeasurementIndicator>
  break;
 801165c:	e01f      	b.n	801169e <SGP_Upkeep+0x12a>
  case SGP_STATE_WAIT:
    if(TimestampIsReached(SGP40TimeStamp)){
 801165e:	4b1a      	ldr	r3, [pc, #104]	@ (80116c8 <SGP_Upkeep+0x154>)
 8011660:	681b      	ldr	r3, [r3, #0]
 8011662:	0018      	movs	r0, r3
 8011664:	f002 fb94 	bl	8013d90 <TimestampIsReached>
 8011668:	1e03      	subs	r3, r0, #0
 801166a:	d015      	beq.n	8011698 <SGP_Upkeep+0x124>
      SetSGP40_GasIndexAlgorithm_Sampling_Interval(); // set the correct sample interval
 801166c:	f7ff fbb8 	bl	8010de0 <SetSGP40_GasIndexAlgorithm_Sampling_Interval>
      SGPState = SGP_STATE_INIT;
 8011670:	4b0d      	ldr	r3, [pc, #52]	@ (80116a8 <SGP_Upkeep+0x134>)
 8011672:	2200      	movs	r2, #0
 8011674:	701a      	strb	r2, [r3, #0]
    }
    break;
 8011676:	e00f      	b.n	8011698 <SGP_Upkeep+0x124>

  default:
    // Handle unexpected state
    SGPState = SGP_STATE_INIT;
 8011678:	4b0b      	ldr	r3, [pc, #44]	@ (80116a8 <SGP_Upkeep+0x134>)
 801167a:	2200      	movs	r2, #0
 801167c:	701a      	strb	r2, [r3, #0]
    if (getSensorLock() == SGP40) {
 801167e:	f7fc fbbf 	bl	800de00 <getSensorLock>
 8011682:	0003      	movs	r3, r0
 8011684:	2b05      	cmp	r3, #5
 8011686:	d109      	bne.n	801169c <SGP_Upkeep+0x128>
      setSensorLock(FREE);
 8011688:	2000      	movs	r0, #0
 801168a:	f7fc fba5 	bl	800ddd8 <setSensorLock>
    }
    break;
 801168e:	e005      	b.n	801169c <SGP_Upkeep+0x128>
      break;
 8011690:	46c0      	nop			@ (mov r8, r8)
 8011692:	e004      	b.n	801169e <SGP_Upkeep+0x12a>
      break;
 8011694:	46c0      	nop			@ (mov r8, r8)
 8011696:	e002      	b.n	801169e <SGP_Upkeep+0x12a>
    break;
 8011698:	46c0      	nop			@ (mov r8, r8)
 801169a:	e000      	b.n	801169e <SGP_Upkeep+0x12a>
    break;
 801169c:	46c0      	nop			@ (mov r8, r8)
  }
  return SGPState;
 801169e:	4b02      	ldr	r3, [pc, #8]	@ (80116a8 <SGP_Upkeep+0x134>)
 80116a0:	781b      	ldrb	r3, [r3, #0]
}
 80116a2:	0018      	movs	r0, r3
 80116a4:	46bd      	mov	sp, r7
 80116a6:	bd80      	pop	{r7, pc}
 80116a8:	200012b0 	.word	0x200012b0
 80116ac:	0802e39c 	.word	0x0802e39c
 80116b0:	0802d814 	.word	0x0802d814
 80116b4:	0802d6d8 	.word	0x0802d6d8
 80116b8:	200012ac 	.word	0x200012ac
 80116bc:	200011f6 	.word	0x200011f6
 80116c0:	2000214d 	.word	0x2000214d
 80116c4:	200011e0 	.word	0x200011e0
 80116c8:	200011f8 	.word	0x200011f8

080116cc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80116cc:	b580      	push	{r7, lr}
 80116ce:	b082      	sub	sp, #8
 80116d0:	af00      	add	r7, sp, #0
 80116d2:	0002      	movs	r2, r0
 80116d4:	1dfb      	adds	r3, r7, #7
 80116d6:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80116d8:	1dfb      	adds	r3, r7, #7
 80116da:	781b      	ldrb	r3, [r3, #0]
 80116dc:	2b7f      	cmp	r3, #127	@ 0x7f
 80116de:	d809      	bhi.n	80116f4 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80116e0:	1dfb      	adds	r3, r7, #7
 80116e2:	781b      	ldrb	r3, [r3, #0]
 80116e4:	001a      	movs	r2, r3
 80116e6:	231f      	movs	r3, #31
 80116e8:	401a      	ands	r2, r3
 80116ea:	4b04      	ldr	r3, [pc, #16]	@ (80116fc <__NVIC_EnableIRQ+0x30>)
 80116ec:	2101      	movs	r1, #1
 80116ee:	4091      	lsls	r1, r2
 80116f0:	000a      	movs	r2, r1
 80116f2:	601a      	str	r2, [r3, #0]
  }
}
 80116f4:	46c0      	nop			@ (mov r8, r8)
 80116f6:	46bd      	mov	sp, r7
 80116f8:	b002      	add	sp, #8
 80116fa:	bd80      	pop	{r7, pc}
 80116fc:	e000e100 	.word	0xe000e100

08011700 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8011700:	b580      	push	{r7, lr}
 8011702:	b082      	sub	sp, #8
 8011704:	af00      	add	r7, sp, #0
 8011706:	0002      	movs	r2, r0
 8011708:	1dfb      	adds	r3, r7, #7
 801170a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 801170c:	1dfb      	adds	r3, r7, #7
 801170e:	781b      	ldrb	r3, [r3, #0]
 8011710:	2b7f      	cmp	r3, #127	@ 0x7f
 8011712:	d810      	bhi.n	8011736 <__NVIC_DisableIRQ+0x36>
  {
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8011714:	1dfb      	adds	r3, r7, #7
 8011716:	781b      	ldrb	r3, [r3, #0]
 8011718:	001a      	movs	r2, r3
 801171a:	231f      	movs	r3, #31
 801171c:	4013      	ands	r3, r2
 801171e:	4908      	ldr	r1, [pc, #32]	@ (8011740 <__NVIC_DisableIRQ+0x40>)
 8011720:	2201      	movs	r2, #1
 8011722:	409a      	lsls	r2, r3
 8011724:	0013      	movs	r3, r2
 8011726:	2280      	movs	r2, #128	@ 0x80
 8011728:	508b      	str	r3, [r1, r2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 801172a:	f3bf 8f4f 	dsb	sy
}
 801172e:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("isb 0xF":::"memory");
 8011730:	f3bf 8f6f 	isb	sy
}
 8011734:	46c0      	nop			@ (mov r8, r8)
    __DSB();
    __ISB();
  }
}
 8011736:	46c0      	nop			@ (mov r8, r8)
 8011738:	46bd      	mov	sp, r7
 801173a:	b002      	add	sp, #8
 801173c:	bd80      	pop	{r7, pc}
 801173e:	46c0      	nop			@ (mov r8, r8)
 8011740:	e000e100 	.word	0xe000e100

08011744 <getSoundData>:
// Note that disabling the interrupt prevents the possibility of corrupted data
// but does not (under non-error conditions) cause loss of sound data because the
// DMA buffer is still being filled with I2S data.
// Return false if no data available.
bool getSoundData(SoundData_t * data, bool getSPLdata, bool getMaxAmpData)
{
 8011744:	b5b0      	push	{r4, r5, r7, lr}
 8011746:	b088      	sub	sp, #32
 8011748:	af02      	add	r7, sp, #8
 801174a:	6078      	str	r0, [r7, #4]
 801174c:	0008      	movs	r0, r1
 801174e:	0011      	movs	r1, r2
 8011750:	1cfb      	adds	r3, r7, #3
 8011752:	1c02      	adds	r2, r0, #0
 8011754:	701a      	strb	r2, [r3, #0]
 8011756:	1cbb      	adds	r3, r7, #2
 8011758:	1c0a      	adds	r2, r1, #0
 801175a:	701a      	strb	r2, [r3, #0]
//	printf("micEnabled:  %d, SPLcalcComplete: %d\r\n", micEnabled, SPLcalcComplete);
  if ((!micEnabled) || (!SPLcalcComplete))
 801175c:	4b5b      	ldr	r3, [pc, #364]	@ (80118cc <getSoundData+0x188>)
 801175e:	781b      	ldrb	r3, [r3, #0]
 8011760:	b2db      	uxtb	r3, r3
 8011762:	2201      	movs	r2, #1
 8011764:	4053      	eors	r3, r2
 8011766:	b2db      	uxtb	r3, r3
 8011768:	2b00      	cmp	r3, #0
 801176a:	d107      	bne.n	801177c <getSoundData+0x38>
 801176c:	4b58      	ldr	r3, [pc, #352]	@ (80118d0 <getSoundData+0x18c>)
 801176e:	781b      	ldrb	r3, [r3, #0]
 8011770:	b2db      	uxtb	r3, r3
 8011772:	2201      	movs	r2, #1
 8011774:	4053      	eors	r3, r2
 8011776:	b2db      	uxtb	r3, r3
 8011778:	2b00      	cmp	r3, #0
 801177a:	d001      	beq.n	8011780 <getSoundData+0x3c>
    {
        return false;
 801177c:	2300      	movs	r3, #0
 801177e:	e0a0      	b.n	80118c2 <getSoundData+0x17e>
    }
//	Info("getSoundData: DMAinterruptEnabled: %d\r\n", DMAinterruptEnabled);
    if (DMAinterruptEnabled)
 8011780:	4b54      	ldr	r3, [pc, #336]	@ (80118d4 <getSoundData+0x190>)
 8011782:	781b      	ldrb	r3, [r3, #0]
 8011784:	b2db      	uxtb	r3, r3
 8011786:	2b00      	cmp	r3, #0
 8011788:	d005      	beq.n	8011796 <getSoundData+0x52>
    {
        NVIC_DisableIRQ(DMA_Channel_IRQn);
 801178a:	4b53      	ldr	r3, [pc, #332]	@ (80118d8 <getSoundData+0x194>)
 801178c:	781b      	ldrb	r3, [r3, #0]
 801178e:	b25b      	sxtb	r3, r3
 8011790:	0018      	movs	r0, r3
 8011792:	f7ff ffb5 	bl	8011700 <__NVIC_DisableIRQ>
  __ASM volatile ("dsb 0xF":::"memory");
 8011796:	f3bf 8f4f 	dsb	sy
}
 801179a:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("isb 0xF":::"memory");
 801179c:	f3bf 8f6f 	isb	sy
}
 80117a0:	46c0      	nop			@ (mov r8, r8)
    __DSB();
    __ISB();
    // At this point, we know that no DMA ISR is in progress and that it will
    // not trigger until re-enabled.

    if (getSPLdata)
 80117a2:	1cfb      	adds	r3, r7, #3
 80117a4:	781b      	ldrb	r3, [r3, #0]
 80117a6:	2b00      	cmp	r3, #0
 80117a8:	d04c      	beq.n	8011844 <getSoundData+0x100>
    {
        if (spl_sum_count == 0)
 80117aa:	4b4c      	ldr	r3, [pc, #304]	@ (80118dc <getSoundData+0x198>)
 80117ac:	681b      	ldr	r3, [r3, #0]
 80117ae:	2b00      	cmp	r3, #0
 80117b0:	d11b      	bne.n	80117ea <getSoundData+0xa6>
        {
            // No data: prevent divide by zero
            data->SPL_dBA_int = 0;
 80117b2:	687b      	ldr	r3, [r7, #4]
 80117b4:	2200      	movs	r2, #0
 80117b6:	701a      	strb	r2, [r3, #0]
            data->SPL_dBA_fr_1dp = 0;
 80117b8:	687b      	ldr	r3, [r7, #4]
 80117ba:	2200      	movs	r2, #0
 80117bc:	705a      	strb	r2, [r3, #1]
            for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 80117be:	2300      	movs	r3, #0
 80117c0:	617b      	str	r3, [r7, #20]
 80117c2:	e00e      	b.n	80117e2 <getSoundData+0x9e>
            {
                data->SPL_bands_dB_int[i] = 0;
 80117c4:	687a      	ldr	r2, [r7, #4]
 80117c6:	697b      	ldr	r3, [r7, #20]
 80117c8:	18d3      	adds	r3, r2, r3
 80117ca:	3302      	adds	r3, #2
 80117cc:	2200      	movs	r2, #0
 80117ce:	701a      	strb	r2, [r3, #0]
                data->SPL_bands_dB_fr_1dp[i] = 0;
 80117d0:	687a      	ldr	r2, [r7, #4]
 80117d2:	697b      	ldr	r3, [r7, #20]
 80117d4:	18d3      	adds	r3, r2, r3
 80117d6:	3308      	adds	r3, #8
 80117d8:	2200      	movs	r2, #0
 80117da:	701a      	strb	r2, [r3, #0]
            for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 80117dc:	697b      	ldr	r3, [r7, #20]
 80117de:	3301      	adds	r3, #1
 80117e0:	617b      	str	r3, [r7, #20]
 80117e2:	697b      	ldr	r3, [r7, #20]
 80117e4:	2b05      	cmp	r3, #5
 80117e6:	d9ed      	bls.n	80117c4 <getSoundData+0x80>
 80117e8:	e02c      	b.n	8011844 <getSoundData+0x100>
            }
        }
        else
        {
            sumToIntAverage(&(data->SPL_dBA_int), &(data->SPL_dBA_fr_1dp),
 80117ea:	6878      	ldr	r0, [r7, #4]
 80117ec:	687b      	ldr	r3, [r7, #4]
 80117ee:	1c59      	adds	r1, r3, #1
 80117f0:	4b3b      	ldr	r3, [pc, #236]	@ (80118e0 <getSoundData+0x19c>)
 80117f2:	681a      	ldr	r2, [r3, #0]
 80117f4:	4b3b      	ldr	r3, [pc, #236]	@ (80118e4 <getSoundData+0x1a0>)
 80117f6:	681c      	ldr	r4, [r3, #0]
 80117f8:	4b38      	ldr	r3, [pc, #224]	@ (80118dc <getSoundData+0x198>)
 80117fa:	681b      	ldr	r3, [r3, #0]
 80117fc:	9300      	str	r3, [sp, #0]
 80117fe:	0023      	movs	r3, r4
 8011800:	f000 fde8 	bl	80123d4 <sumToIntAverage>
                            spl_int_sum, spl_frac1dp_sum, spl_sum_count);

            for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 8011804:	2300      	movs	r3, #0
 8011806:	613b      	str	r3, [r7, #16]
 8011808:	e019      	b.n	801183e <getSoundData+0xfa>
            {
                sumToIntAverage(&(data->SPL_bands_dB_int[i]),
 801180a:	687a      	ldr	r2, [r7, #4]
 801180c:	693b      	ldr	r3, [r7, #16]
 801180e:	18d3      	adds	r3, r2, r3
 8011810:	1c98      	adds	r0, r3, #2
 8011812:	693b      	ldr	r3, [r7, #16]
 8011814:	3308      	adds	r3, #8
 8011816:	687a      	ldr	r2, [r7, #4]
 8011818:	18d1      	adds	r1, r2, r3
                                &(data->SPL_bands_dB_fr_1dp[i]), band_spl_int_sum[i],
 801181a:	4b33      	ldr	r3, [pc, #204]	@ (80118e8 <getSoundData+0x1a4>)
 801181c:	693a      	ldr	r2, [r7, #16]
 801181e:	0092      	lsls	r2, r2, #2
 8011820:	58d4      	ldr	r4, [r2, r3]
                                band_spl_frac1dp_sum[i], spl_sum_count);
 8011822:	4b32      	ldr	r3, [pc, #200]	@ (80118ec <getSoundData+0x1a8>)
 8011824:	693a      	ldr	r2, [r7, #16]
 8011826:	0092      	lsls	r2, r2, #2
 8011828:	58d2      	ldr	r2, [r2, r3]
                sumToIntAverage(&(data->SPL_bands_dB_int[i]),
 801182a:	4b2c      	ldr	r3, [pc, #176]	@ (80118dc <getSoundData+0x198>)
 801182c:	681b      	ldr	r3, [r3, #0]
 801182e:	9300      	str	r3, [sp, #0]
 8011830:	0013      	movs	r3, r2
 8011832:	0022      	movs	r2, r4
 8011834:	f000 fdce 	bl	80123d4 <sumToIntAverage>
            for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 8011838:	693b      	ldr	r3, [r7, #16]
 801183a:	3301      	adds	r3, #1
 801183c:	613b      	str	r3, [r7, #16]
 801183e:	693b      	ldr	r3, [r7, #16]
 8011840:	2b05      	cmp	r3, #5
 8011842:	d9e2      	bls.n	801180a <getSoundData+0xc6>
            }
        }
    }

    if (getMaxAmpData)
 8011844:	1cbb      	adds	r3, r7, #2
 8011846:	781b      	ldrb	r3, [r3, #0]
 8011848:	2b00      	cmp	r3, #0
 801184a:	d028      	beq.n	801189e <getSoundData+0x15a>
    {
        uint16_t intPart = 0;
 801184c:	240e      	movs	r4, #14
 801184e:	193b      	adds	r3, r7, r4
 8011850:	2200      	movs	r2, #0
 8011852:	801a      	strh	r2, [r3, #0]
        uint8_t fracPart = 0;
 8011854:	250d      	movs	r5, #13
 8011856:	197b      	adds	r3, r7, r5
 8011858:	2200      	movs	r2, #0
 801185a:	701a      	strb	r2, [r3, #0]
        amplitudeDN_to_mPa(maximumAmplitude, ik_mPa, &intPart, &fracPart);
 801185c:	4b24      	ldr	r3, [pc, #144]	@ (80118f0 <getSoundData+0x1ac>)
 801185e:	6818      	ldr	r0, [r3, #0]
 8011860:	4924      	ldr	r1, [pc, #144]	@ (80118f4 <getSoundData+0x1b0>)
 8011862:	197b      	adds	r3, r7, r5
 8011864:	193a      	adds	r2, r7, r4
 8011866:	f000 fe59 	bl	801251c <amplitudeDN_to_mPa>
        data->peak_amp_mPa_int = intPart;
 801186a:	193b      	adds	r3, r7, r4
 801186c:	881a      	ldrh	r2, [r3, #0]
 801186e:	687b      	ldr	r3, [r7, #4]
 8011870:	21ff      	movs	r1, #255	@ 0xff
 8011872:	4011      	ands	r1, r2
 8011874:	000c      	movs	r4, r1
 8011876:	7b99      	ldrb	r1, [r3, #14]
 8011878:	2000      	movs	r0, #0
 801187a:	4001      	ands	r1, r0
 801187c:	1c08      	adds	r0, r1, #0
 801187e:	1c21      	adds	r1, r4, #0
 8011880:	4301      	orrs	r1, r0
 8011882:	7399      	strb	r1, [r3, #14]
 8011884:	0a12      	lsrs	r2, r2, #8
 8011886:	b290      	uxth	r0, r2
 8011888:	7bda      	ldrb	r2, [r3, #15]
 801188a:	2100      	movs	r1, #0
 801188c:	400a      	ands	r2, r1
 801188e:	1c11      	adds	r1, r2, #0
 8011890:	1c02      	adds	r2, r0, #0
 8011892:	430a      	orrs	r2, r1
 8011894:	73da      	strb	r2, [r3, #15]
        data->peak_amp_mPa_fr_2dp = fracPart;
 8011896:	197b      	adds	r3, r7, r5
 8011898:	781a      	ldrb	r2, [r3, #0]
 801189a:	687b      	ldr	r3, [r7, #4]
 801189c:	741a      	strb	r2, [r3, #16]
    }

    data->stable = micSettlingComplete();
 801189e:	f000 f86f 	bl	8011980 <micSettlingComplete>
 80118a2:	0003      	movs	r3, r0
 80118a4:	001a      	movs	r2, r3
 80118a6:	687b      	ldr	r3, [r7, #4]
 80118a8:	745a      	strb	r2, [r3, #17]

    if (DMAinterruptEnabled)
 80118aa:	4b0a      	ldr	r3, [pc, #40]	@ (80118d4 <getSoundData+0x190>)
 80118ac:	781b      	ldrb	r3, [r3, #0]
 80118ae:	b2db      	uxtb	r3, r3
 80118b0:	2b00      	cmp	r3, #0
 80118b2:	d005      	beq.n	80118c0 <getSoundData+0x17c>
    {
        NVIC_EnableIRQ(DMA_Channel_IRQn);
 80118b4:	4b08      	ldr	r3, [pc, #32]	@ (80118d8 <getSoundData+0x194>)
 80118b6:	781b      	ldrb	r3, [r3, #0]
 80118b8:	b25b      	sxtb	r3, r3
 80118ba:	0018      	movs	r0, r3
 80118bc:	f7ff ff06 	bl	80116cc <__NVIC_EnableIRQ>
    }
    // NOTE that any pending DMA interrupt will now fire, but will
    // take ~2 cycles to start
    return true;
 80118c0:	2301      	movs	r3, #1
}
 80118c2:	0018      	movs	r0, r3
 80118c4:	46bd      	mov	sp, r7
 80118c6:	b006      	add	sp, #24
 80118c8:	bdb0      	pop	{r4, r5, r7, pc}
 80118ca:	46c0      	nop			@ (mov r8, r8)
 80118cc:	200012b2 	.word	0x200012b2
 80118d0:	200012b5 	.word	0x200012b5
 80118d4:	200012b4 	.word	0x200012b4
 80118d8:	20001d04 	.word	0x20001d04
 80118dc:	20001d40 	.word	0x20001d40
 80118e0:	20001d08 	.word	0x20001d08
 80118e4:	20001d0c 	.word	0x20001d0c
 80118e8:	20001d10 	.word	0x20001d10
 80118ec:	20001d28 	.word	0x20001d28
 80118f0:	200012bc 	.word	0x200012bc
 80118f4:	3b5c7333 	.word	0x3b5c7333

080118f8 <soundInit>:
//               bool (*tmrInit)(TIM_HandleTypeDef **), IRQn_Type DMAChIRQn)
bool soundInit(DMA_HandleTypeDef* h_hdma_spi2_rx,
               I2S_HandleTypeDef* h_hi2s2,
               TIM_HandleTypeDef* h_htim6,
               IRQn_Type DMAChIRQn)
{
 80118f8:	b580      	push	{r7, lr}
 80118fa:	b084      	sub	sp, #16
 80118fc:	af00      	add	r7, sp, #0
 80118fe:	60f8      	str	r0, [r7, #12]
 8011900:	60b9      	str	r1, [r7, #8]
 8011902:	607a      	str	r2, [r7, #4]
 8011904:	001a      	movs	r2, r3
 8011906:	1cfb      	adds	r3, r7, #3
 8011908:	701a      	strb	r2, [r3, #0]
    hi2s2 = h_hi2s2;
 801190a:	4b09      	ldr	r3, [pc, #36]	@ (8011930 <soundInit+0x38>)
 801190c:	68ba      	ldr	r2, [r7, #8]
 801190e:	601a      	str	r2, [r3, #0]
    htim6 = h_htim6;
 8011910:	4b08      	ldr	r3, [pc, #32]	@ (8011934 <soundInit+0x3c>)
 8011912:	687a      	ldr	r2, [r7, #4]
 8011914:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx = h_hdma_spi2_rx;
 8011916:	4b08      	ldr	r3, [pc, #32]	@ (8011938 <soundInit+0x40>)
 8011918:	68fa      	ldr	r2, [r7, #12]
 801191a:	601a      	str	r2, [r3, #0]
    DMA_Channel_IRQn = DMA_Channel_IRQn;
 801191c:	4b07      	ldr	r3, [pc, #28]	@ (801193c <soundInit+0x44>)
 801191e:	2200      	movs	r2, #0
 8011920:	569a      	ldrsb	r2, [r3, r2]
 8011922:	4b06      	ldr	r3, [pc, #24]	@ (801193c <soundInit+0x44>)
 8011924:	701a      	strb	r2, [r3, #0]

    return true;
 8011926:	2301      	movs	r3, #1
}
 8011928:	0018      	movs	r0, r3
 801192a:	46bd      	mov	sp, r7
 801192c:	b004      	add	sp, #16
 801192e:	bd80      	pop	{r7, pc}
 8011930:	20001cfc 	.word	0x20001cfc
 8011934:	20001cf8 	.word	0x20001cf8
 8011938:	20001d00 	.word	0x20001d00
 801193c:	20001d04 	.word	0x20001d04

08011940 <clearMaximumAmplitude>:

// Call this from external code to clear the maximum amplitude value.
void clearMaximumAmplitude(void)
{
 8011940:	b580      	push	{r7, lr}
 8011942:	af00      	add	r7, sp, #0
    maximumAmplitude = 0;
 8011944:	4b02      	ldr	r3, [pc, #8]	@ (8011950 <clearMaximumAmplitude+0x10>)
 8011946:	2200      	movs	r2, #0
 8011948:	601a      	str	r2, [r3, #0]
}
 801194a:	46c0      	nop			@ (mov r8, r8)
 801194c:	46bd      	mov	sp, r7
 801194e:	bd80      	pop	{r7, pc}
 8011950:	200012bc 	.word	0x200012bc

08011954 <startMicSettlingPeriod>:
// Prepare a one-shot timer to indicate the short time period during which the
// microphone output is inaccurate after power-on (warmup/settling time).
// This is output with the data for advice only: all functions still operate as
// normal during this period.
static bool startMicSettlingPeriod(void)
{
 8011954:	b580      	push	{r7, lr}
 8011956:	af00      	add	r7, sp, #0
//  Debug("TMR6 started\r\n");
//  if (htim6 == NULL) {
//    printf("htim6 == NULL");
//  }
  __HAL_TIM_SetCounter(htim6, 0);
 8011958:	4b08      	ldr	r3, [pc, #32]	@ (801197c <startMicSettlingPeriod+0x28>)
 801195a:	681b      	ldr	r3, [r3, #0]
 801195c:	681b      	ldr	r3, [r3, #0]
 801195e:	2200      	movs	r2, #0
 8011960:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_TIM_Base_Start(htim6) != HAL_OK)
 8011962:	4b06      	ldr	r3, [pc, #24]	@ (801197c <startMicSettlingPeriod+0x28>)
 8011964:	681b      	ldr	r3, [r3, #0]
 8011966:	0018      	movs	r0, r3
 8011968:	f00b f92a 	bl	801cbc0 <HAL_TIM_Base_Start>
 801196c:	1e03      	subs	r3, r0, #0
 801196e:	d001      	beq.n	8011974 <startMicSettlingPeriod+0x20>
    {
        return false;
 8011970:	2300      	movs	r3, #0
 8011972:	e000      	b.n	8011976 <startMicSettlingPeriod+0x22>
    }
    return true;
 8011974:	2301      	movs	r3, #1
}
 8011976:	0018      	movs	r0, r3
 8011978:	46bd      	mov	sp, r7
 801197a:	bd80      	pop	{r7, pc}
 801197c:	20001cf8 	.word	0x20001cf8

08011980 <micSettlingComplete>:

// See whether the warmup/settling time has finished
bool micSettlingComplete(void)
{
 8011980:	b580      	push	{r7, lr}
 8011982:	b082      	sub	sp, #8
 8011984:	af00      	add	r7, sp, #0
//   printf("Checking micSettlingComplete\r\n");
    bool complete = __HAL_TIM_GET_FLAG(htim6, TIM_SR_UIF);
 8011986:	4b0e      	ldr	r3, [pc, #56]	@ (80119c0 <micSettlingComplete+0x40>)
 8011988:	681b      	ldr	r3, [r3, #0]
 801198a:	681b      	ldr	r3, [r3, #0]
 801198c:	691b      	ldr	r3, [r3, #16]
 801198e:	2201      	movs	r2, #1
 8011990:	401a      	ands	r2, r3
 8011992:	1dfb      	adds	r3, r7, #7
 8011994:	3a01      	subs	r2, #1
 8011996:	4251      	negs	r1, r2
 8011998:	414a      	adcs	r2, r1
 801199a:	701a      	strb	r2, [r3, #0]
    if (complete)
 801199c:	1dfb      	adds	r3, r7, #7
 801199e:	781b      	ldrb	r3, [r3, #0]
 80119a0:	2b00      	cmp	r3, #0
 80119a2:	d007      	beq.n	80119b4 <micSettlingComplete+0x34>
    {
//      Debug("TMR6 expired\r\n");
      HAL_TIM_Base_Stop(htim6);
 80119a4:	4b06      	ldr	r3, [pc, #24]	@ (80119c0 <micSettlingComplete+0x40>)
 80119a6:	681b      	ldr	r3, [r3, #0]
 80119a8:	0018      	movs	r0, r3
 80119aa:	f00b f953 	bl	801cc54 <HAL_TIM_Base_Stop>
      DataReady = true;
 80119ae:	4b05      	ldr	r3, [pc, #20]	@ (80119c4 <micSettlingComplete+0x44>)
 80119b0:	2201      	movs	r2, #1
 80119b2:	701a      	strb	r2, [r3, #0]
//      Info("micSettlingComplete set DataReady to true");
    }
    return complete;
 80119b4:	1dfb      	adds	r3, r7, #7
 80119b6:	781b      	ldrb	r3, [r3, #0]
}
 80119b8:	0018      	movs	r0, r3
 80119ba:	46bd      	mov	sp, r7
 80119bc:	b002      	add	sp, #8
 80119be:	bd80      	pop	{r7, pc}
 80119c0:	20001cf8 	.word	0x20001cf8
 80119c4:	200012b1 	.word	0x200012b1

080119c8 <enableMicrophone>:

// Enable: starts the I2S clock, warmup timer, and DMA interrupts
// Disable: stops the DMA interrupts and stops I2S clock.
// Return false on failure.
bool enableMicrophone(bool bEnable)
{
 80119c8:	b580      	push	{r7, lr}
 80119ca:	b082      	sub	sp, #8
 80119cc:	af00      	add	r7, sp, #0
 80119ce:	0002      	movs	r2, r0
 80119d0:	1dfb      	adds	r3, r7, #7
 80119d2:	701a      	strb	r2, [r3, #0]
    if (bEnable == micEnabled)
 80119d4:	4b29      	ldr	r3, [pc, #164]	@ (8011a7c <enableMicrophone+0xb4>)
 80119d6:	781b      	ldrb	r3, [r3, #0]
 80119d8:	b2db      	uxtb	r3, r3
 80119da:	1dfa      	adds	r2, r7, #7
 80119dc:	7812      	ldrb	r2, [r2, #0]
 80119de:	429a      	cmp	r2, r3
 80119e0:	d101      	bne.n	80119e6 <enableMicrophone+0x1e>
    {
        return true;
 80119e2:	2301      	movs	r3, #1
 80119e4:	e045      	b.n	8011a72 <enableMicrophone+0xaa>
    }
    if (bEnable)
 80119e6:	1dfb      	adds	r3, r7, #7
 80119e8:	781b      	ldrb	r3, [r3, #0]
 80119ea:	2b00      	cmp	r3, #0
 80119ec:	d025      	beq.n	8011a3a <enableMicrophone+0x72>
    {
        startMicSettlingPeriod();
 80119ee:	f7ff ffb1 	bl	8011954 <startMicSettlingPeriod>
        if (HAL_I2S_Receive_DMA(hi2s2, (uint16_t *) dmaBuffer, HALF_BUFLEN) != HAL_OK)
 80119f2:	4b23      	ldr	r3, [pc, #140]	@ (8011a80 <enableMicrophone+0xb8>)
 80119f4:	681b      	ldr	r3, [r3, #0]
 80119f6:	2280      	movs	r2, #128	@ 0x80
 80119f8:	0092      	lsls	r2, r2, #2
 80119fa:	4922      	ldr	r1, [pc, #136]	@ (8011a84 <enableMicrophone+0xbc>)
 80119fc:	0018      	movs	r0, r3
 80119fe:	f007 fb41 	bl	8019084 <HAL_I2S_Receive_DMA>
 8011a02:	1e03      	subs	r3, r0, #0
 8011a04:	d001      	beq.n	8011a0a <enableMicrophone+0x42>
        {
            return false;
 8011a06:	2300      	movs	r3, #0
 8011a08:	e033      	b.n	8011a72 <enableMicrophone+0xaa>
        }
        clearMaximumAmplitude();
 8011a0a:	f7ff ff99 	bl	8011940 <clearMaximumAmplitude>
        amplitudeSettlingPeriods = 0;
 8011a0e:	4b1e      	ldr	r3, [pc, #120]	@ (8011a88 <enableMicrophone+0xc0>)
 8011a10:	2200      	movs	r2, #0
 8011a12:	601a      	str	r2, [r3, #0]
        NVIC_EnableIRQ(DMA_Channel_IRQn);
 8011a14:	4b1d      	ldr	r3, [pc, #116]	@ (8011a8c <enableMicrophone+0xc4>)
 8011a16:	781b      	ldrb	r3, [r3, #0]
 8011a18:	b25b      	sxtb	r3, r3
 8011a1a:	0018      	movs	r0, r3
 8011a1c:	f7ff fe56 	bl	80116cc <__NVIC_EnableIRQ>
        DMAinterruptEnabled = true;
 8011a20:	4b1b      	ldr	r3, [pc, #108]	@ (8011a90 <enableMicrophone+0xc8>)
 8011a22:	2201      	movs	r2, #1
 8011a24:	701a      	strb	r2, [r3, #0]
        micEnabled = true;
 8011a26:	4b15      	ldr	r3, [pc, #84]	@ (8011a7c <enableMicrophone+0xb4>)
 8011a28:	2201      	movs	r2, #1
 8011a2a:	701a      	strb	r2, [r3, #0]
        SPLcalcEnabled = false;
 8011a2c:	4b19      	ldr	r3, [pc, #100]	@ (8011a94 <enableMicrophone+0xcc>)
 8011a2e:	2200      	movs	r2, #0
 8011a30:	701a      	strb	r2, [r3, #0]
        SPLcalcComplete = false;
 8011a32:	4b19      	ldr	r3, [pc, #100]	@ (8011a98 <enableMicrophone+0xd0>)
 8011a34:	2200      	movs	r2, #0
 8011a36:	701a      	strb	r2, [r3, #0]
 8011a38:	e01a      	b.n	8011a70 <enableMicrophone+0xa8>
    }
    else
    {
        NVIC_DisableIRQ(DMA_Channel_IRQn);
 8011a3a:	4b14      	ldr	r3, [pc, #80]	@ (8011a8c <enableMicrophone+0xc4>)
 8011a3c:	781b      	ldrb	r3, [r3, #0]
 8011a3e:	b25b      	sxtb	r3, r3
 8011a40:	0018      	movs	r0, r3
 8011a42:	f7ff fe5d 	bl	8011700 <__NVIC_DisableIRQ>
        DMAinterruptEnabled = false;
 8011a46:	4b12      	ldr	r3, [pc, #72]	@ (8011a90 <enableMicrophone+0xc8>)
 8011a48:	2200      	movs	r2, #0
 8011a4a:	701a      	strb	r2, [r3, #0]
        SPLcalcEnabled = false;
 8011a4c:	4b11      	ldr	r3, [pc, #68]	@ (8011a94 <enableMicrophone+0xcc>)
 8011a4e:	2200      	movs	r2, #0
 8011a50:	701a      	strb	r2, [r3, #0]
        SPLcalcComplete = false;
 8011a52:	4b11      	ldr	r3, [pc, #68]	@ (8011a98 <enableMicrophone+0xd0>)
 8011a54:	2200      	movs	r2, #0
 8011a56:	701a      	strb	r2, [r3, #0]
        if (HAL_I2S_DMAStop(hi2s2) != HAL_OK)
 8011a58:	4b09      	ldr	r3, [pc, #36]	@ (8011a80 <enableMicrophone+0xb8>)
 8011a5a:	681b      	ldr	r3, [r3, #0]
 8011a5c:	0018      	movs	r0, r3
 8011a5e:	f007 fbd3 	bl	8019208 <HAL_I2S_DMAStop>
 8011a62:	1e03      	subs	r3, r0, #0
 8011a64:	d001      	beq.n	8011a6a <enableMicrophone+0xa2>
        {
            return false;
 8011a66:	2300      	movs	r3, #0
 8011a68:	e003      	b.n	8011a72 <enableMicrophone+0xaa>
        }
        micEnabled = false;
 8011a6a:	4b04      	ldr	r3, [pc, #16]	@ (8011a7c <enableMicrophone+0xb4>)
 8011a6c:	2200      	movs	r2, #0
 8011a6e:	701a      	strb	r2, [r3, #0]
    }
    return true;
 8011a70:	2301      	movs	r3, #1
}
 8011a72:	0018      	movs	r0, r3
 8011a74:	46bd      	mov	sp, r7
 8011a76:	b002      	add	sp, #8
 8011a78:	bd80      	pop	{r7, pc}
 8011a7a:	46c0      	nop			@ (mov r8, r8)
 8011a7c:	200012b2 	.word	0x200012b2
 8011a80:	20001cfc 	.word	0x20001cfc
 8011a84:	200012f8 	.word	0x200012f8
 8011a88:	200012b8 	.word	0x200012b8
 8011a8c:	20001d04 	.word	0x20001d04
 8011a90:	200012b4 	.word	0x200012b4
 8011a94:	200012b3 	.word	0x200012b3
 8011a98:	200012b5 	.word	0x200012b5

08011a9c <startSPLcalculation>:

// The microphone/I2S/DMA is already running: start the
// conversion of I2S data to SPL.
// Return false if microphone is not enabled (fail).
bool startSPLcalculation(void)
{
 8011a9c:	b580      	push	{r7, lr}
 8011a9e:	af00      	add	r7, sp, #0
    if (!micEnabled)
 8011aa0:	4b0c      	ldr	r3, [pc, #48]	@ (8011ad4 <startSPLcalculation+0x38>)
 8011aa2:	781b      	ldrb	r3, [r3, #0]
 8011aa4:	b2db      	uxtb	r3, r3
 8011aa6:	2201      	movs	r2, #1
 8011aa8:	4053      	eors	r3, r2
 8011aaa:	b2db      	uxtb	r3, r3
 8011aac:	2b00      	cmp	r3, #0
 8011aae:	d001      	beq.n	8011ab4 <startSPLcalculation+0x18>
    {
        return false;
 8011ab0:	2300      	movs	r3, #0
 8011ab2:	e00c      	b.n	8011ace <startSPLcalculation+0x32>
    }
    if (SPLcalcEnabled)
 8011ab4:	4b08      	ldr	r3, [pc, #32]	@ (8011ad8 <startSPLcalculation+0x3c>)
 8011ab6:	781b      	ldrb	r3, [r3, #0]
 8011ab8:	b2db      	uxtb	r3, r3
 8011aba:	2b00      	cmp	r3, #0
 8011abc:	d001      	beq.n	8011ac2 <startSPLcalculation+0x26>
    {
        return true;
 8011abe:	2301      	movs	r3, #1
 8011ac0:	e005      	b.n	8011ace <startSPLcalculation+0x32>
    }
    resetSPLstate();
 8011ac2:	f000 fb63 	bl	801218c <resetSPLstate>
    SPLcalcEnabled = true;
 8011ac6:	4b04      	ldr	r3, [pc, #16]	@ (8011ad8 <startSPLcalculation+0x3c>)
 8011ac8:	2201      	movs	r2, #1
 8011aca:	701a      	strb	r2, [r3, #0]
    return true;
 8011acc:	2301      	movs	r3, #1
}
 8011ace:	0018      	movs	r0, r3
 8011ad0:	46bd      	mov	sp, r7
 8011ad2:	bd80      	pop	{r7, pc}
 8011ad4:	200012b2 	.word	0x200012b2
 8011ad8:	200012b3 	.word	0x200012b3

08011adc <HAL_I2S_RxHalfCpltCallback>:

// Called from the DMA ISR when the first half of the DMA buffer is full,
// i.e. "HALF_BUFLEN" uint16s are in the first half of dmaBuffer
void HAL_I2S_RxHalfCpltCallback(I2S_HandleTypeDef *hi2s2loc)
{
 8011adc:	b580      	push	{r7, lr}
 8011ade:	b082      	sub	sp, #8
 8011ae0:	af00      	add	r7, sp, #0
 8011ae2:	6078      	str	r0, [r7, #4]
  if (hi2s2loc == hi2s2) {
 8011ae4:	4b05      	ldr	r3, [pc, #20]	@ (8011afc <HAL_I2S_RxHalfCpltCallback+0x20>)
 8011ae6:	681b      	ldr	r3, [r3, #0]
 8011ae8:	687a      	ldr	r2, [r7, #4]
 8011aea:	429a      	cmp	r2, r3
 8011aec:	d102      	bne.n	8011af4 <HAL_I2S_RxHalfCpltCallback+0x18>
    UNUSED(hi2s2);
    processHalfDMAbuffer(0);
 8011aee:	2000      	movs	r0, #0
 8011af0:	f000 f81a 	bl	8011b28 <processHalfDMAbuffer>
  }
}
 8011af4:	46c0      	nop			@ (mov r8, r8)
 8011af6:	46bd      	mov	sp, r7
 8011af8:	b002      	add	sp, #8
 8011afa:	bd80      	pop	{r7, pc}
 8011afc:	20001cfc 	.word	0x20001cfc

08011b00 <HAL_I2S_RxCpltCallback>:

// Called from the DMA ISR when the second half of the DMA buffer is full,
// i.e. "HALF_BUFLEN" uint16s are in the second half of dmaBuffer
void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s2loc)
{
 8011b00:	b580      	push	{r7, lr}
 8011b02:	b082      	sub	sp, #8
 8011b04:	af00      	add	r7, sp, #0
 8011b06:	6078      	str	r0, [r7, #4]
  if (hi2s2loc == hi2s2) {
 8011b08:	4b06      	ldr	r3, [pc, #24]	@ (8011b24 <HAL_I2S_RxCpltCallback+0x24>)
 8011b0a:	681b      	ldr	r3, [r3, #0]
 8011b0c:	687a      	ldr	r2, [r7, #4]
 8011b0e:	429a      	cmp	r2, r3
 8011b10:	d104      	bne.n	8011b1c <HAL_I2S_RxCpltCallback+0x1c>
    UNUSED(hi2s2);
    processHalfDMAbuffer(HALF_BUFLEN);
 8011b12:	2380      	movs	r3, #128	@ 0x80
 8011b14:	009b      	lsls	r3, r3, #2
 8011b16:	0018      	movs	r0, r3
 8011b18:	f000 f806 	bl	8011b28 <processHalfDMAbuffer>
  }
}
 8011b1c:	46c0      	nop			@ (mov r8, r8)
 8011b1e:	46bd      	mov	sp, r7
 8011b20:	b002      	add	sp, #8
 8011b22:	bd80      	pop	{r7, pc}
 8011b24:	20001cfc 	.word	0x20001cfc

08011b28 <processHalfDMAbuffer>:

static void processHalfDMAbuffer(uint32_t halfBufferStart)
{
 8011b28:	b580      	push	{r7, lr}
 8011b2a:	b082      	sub	sp, #8
 8011b2c:	af00      	add	r7, sp, #0
 8011b2e:	6078      	str	r0, [r7, #4]
    // Decode the raw I2S data and copy it out of the DMA buffer and into dataBuffer
    decodeI2SdataLch((uint16_t *) &(dmaBuffer[halfBufferStart]), HALF_BUFLEN,
 8011b30:	687b      	ldr	r3, [r7, #4]
 8011b32:	005a      	lsls	r2, r3, #1
 8011b34:	4b15      	ldr	r3, [pc, #84]	@ (8011b8c <processHalfDMAbuffer+0x64>)
 8011b36:	18d3      	adds	r3, r2, r3
 8011b38:	4a15      	ldr	r2, [pc, #84]	@ (8011b90 <processHalfDMAbuffer+0x68>)
 8011b3a:	2180      	movs	r1, #128	@ 0x80
 8011b3c:	0089      	lsls	r1, r1, #2
 8011b3e:	0018      	movs	r0, r3
 8011b40:	f000 fd35 	bl	80125ae <decodeI2SdataLch>
                     (int32_t *) dataBuffer);
    // Filter the amplitude, find the maximum, and update maximumAmplitude:
    getFilteredMaxAmplitudeQ31((int32_t *) dataBuffer, (uint32_t) EIGHTH_BUFLEN,
 8011b44:	4b13      	ldr	r3, [pc, #76]	@ (8011b94 <processHalfDMAbuffer+0x6c>)
 8011b46:	681b      	ldr	r3, [r3, #0]
 8011b48:	425a      	negs	r2, r3
 8011b4a:	4153      	adcs	r3, r2
 8011b4c:	b2da      	uxtb	r2, r3
 8011b4e:	4b11      	ldr	r3, [pc, #68]	@ (8011b94 <processHalfDMAbuffer+0x6c>)
 8011b50:	681b      	ldr	r3, [r3, #0]
 8011b52:	2109      	movs	r1, #9
 8011b54:	4299      	cmp	r1, r3
 8011b56:	419b      	sbcs	r3, r3
 8011b58:	425b      	negs	r3, r3
 8011b5a:	b2db      	uxtb	r3, r3
 8011b5c:	480c      	ldr	r0, [pc, #48]	@ (8011b90 <processHalfDMAbuffer+0x68>)
 8011b5e:	2180      	movs	r1, #128	@ 0x80
 8011b60:	f000 fb46 	bl	80121f0 <getFilteredMaxAmplitudeQ31>
                               amplitudeSettlingPeriods == 0,
                               amplitudeSettlingPeriods >= N_AMP_SETTLE_HALF_PERIODS);
    if (amplitudeSettlingPeriods < N_AMP_SETTLE_HALF_PERIODS)
 8011b64:	4b0b      	ldr	r3, [pc, #44]	@ (8011b94 <processHalfDMAbuffer+0x6c>)
 8011b66:	681b      	ldr	r3, [r3, #0]
 8011b68:	2b09      	cmp	r3, #9
 8011b6a:	d804      	bhi.n	8011b76 <processHalfDMAbuffer+0x4e>
    {
        // Need to allow the IIR filter to settle
        amplitudeSettlingPeriods++;
 8011b6c:	4b09      	ldr	r3, [pc, #36]	@ (8011b94 <processHalfDMAbuffer+0x6c>)
 8011b6e:	681b      	ldr	r3, [r3, #0]
 8011b70:	1c5a      	adds	r2, r3, #1
 8011b72:	4b08      	ldr	r3, [pc, #32]	@ (8011b94 <processHalfDMAbuffer+0x6c>)
 8011b74:	601a      	str	r2, [r3, #0]
    }
    if (SPLcalcEnabled)
 8011b76:	4b08      	ldr	r3, [pc, #32]	@ (8011b98 <processHalfDMAbuffer+0x70>)
 8011b78:	781b      	ldrb	r3, [r3, #0]
 8011b7a:	b2db      	uxtb	r3, r3
 8011b7c:	2b00      	cmp	r3, #0
 8011b7e:	d001      	beq.n	8011b84 <processHalfDMAbuffer+0x5c>
    {
        // Calculate the A-weighted SPL and octave bands SPL
        calculateSPLQ31();
 8011b80:	f000 f826 	bl	8011bd0 <calculateSPLQ31>
    }
}
 8011b84:	46c0      	nop			@ (mov r8, r8)
 8011b86:	46bd      	mov	sp, r7
 8011b88:	b002      	add	sp, #8
 8011b8a:	bd80      	pop	{r7, pc}
 8011b8c:	200012f8 	.word	0x200012f8
 8011b90:	20001af8 	.word	0x20001af8
 8011b94:	200012b8 	.word	0x200012b8
 8011b98:	200012b3 	.word	0x200012b3

08011b9c <HAL_I2S_ErrorCallback>:

void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s2loc)
{
 8011b9c:	b580      	push	{r7, lr}
 8011b9e:	b082      	sub	sp, #8
 8011ba0:	af00      	add	r7, sp, #0
 8011ba2:	6078      	str	r0, [r7, #4]
  if (hi2s2loc == hi2s2) {
 8011ba4:	4b07      	ldr	r3, [pc, #28]	@ (8011bc4 <HAL_I2S_ErrorCallback+0x28>)
 8011ba6:	681b      	ldr	r3, [r3, #0]
 8011ba8:	687a      	ldr	r2, [r7, #4]
 8011baa:	429a      	cmp	r2, r3
 8011bac:	d106      	bne.n	8011bbc <HAL_I2S_ErrorCallback+0x20>
    UNUSED(hi2s2);
    errorHandler(__func__, __LINE__, __FILE__);
 8011bae:	4a06      	ldr	r2, [pc, #24]	@ (8011bc8 <HAL_I2S_ErrorCallback+0x2c>)
 8011bb0:	239e      	movs	r3, #158	@ 0x9e
 8011bb2:	0059      	lsls	r1, r3, #1
 8011bb4:	4b05      	ldr	r3, [pc, #20]	@ (8011bcc <HAL_I2S_ErrorCallback+0x30>)
 8011bb6:	0018      	movs	r0, r3
 8011bb8:	f002 fa28 	bl	801400c <errorHandler>
  }
}
 8011bbc:	46c0      	nop			@ (mov r8, r8)
 8011bbe:	46bd      	mov	sp, r7
 8011bc0:	b002      	add	sp, #8
 8011bc2:	bd80      	pop	{r7, pc}
 8011bc4:	20001cfc 	.word	0x20001cfc
 8011bc8:	0802d83c 	.word	0x0802d83c
 8011bcc:	0802e48c 	.word	0x0802e48c

08011bd0 <calculateSPLQ31>:
// dataBuffer must contain (at least) FFT_N values and is reused for
// storage throughout this function. Since dataBuffer is shared by
// both halves of the DMA buffer, this function must complete before
// the next DMA interrupt.
static void calculateSPLQ31(void)
{
 8011bd0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011bd2:	b0b3      	sub	sp, #204	@ 0xcc
 8011bd4:	af04      	add	r7, sp, #16
    // Interleaved complex, so need 2x number of elements:
    static q31_t FFTdata[2*FFT_N] = {0};

    // Find max, min values of the input data
    int32_t max, min;
    findMinMax(&min, &max, (int32_t *) dataBuffer, FFT_N);
 8011bd6:	4ae2      	ldr	r2, [pc, #904]	@ (8011f60 <calculateSPLQ31+0x390>)
 8011bd8:	2338      	movs	r3, #56	@ 0x38
 8011bda:	2030      	movs	r0, #48	@ 0x30
 8011bdc:	181b      	adds	r3, r3, r0
 8011bde:	19d9      	adds	r1, r3, r7
 8011be0:	2334      	movs	r3, #52	@ 0x34
 8011be2:	181b      	adds	r3, r3, r0
 8011be4:	19d8      	adds	r0, r3, r7
 8011be6:	2380      	movs	r3, #128	@ 0x80
 8011be8:	f000 fc36 	bl	8012458 <findMinMax>

    // Calculate the centre of the signal range, and the largest bitshift needed
    // to fill the available range without saturating
    int32_t centre = (min/2) + (max/2);
 8011bec:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8011bee:	2b00      	cmp	r3, #0
 8011bf0:	da00      	bge.n	8011bf4 <calculateSPLQ31+0x24>
 8011bf2:	3301      	adds	r3, #1
 8011bf4:	105b      	asrs	r3, r3, #1
 8011bf6:	001a      	movs	r2, r3
 8011bf8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8011bfa:	2b00      	cmp	r3, #0
 8011bfc:	da00      	bge.n	8011c00 <calculateSPLQ31+0x30>
 8011bfe:	3301      	adds	r3, #1
 8011c00:	105b      	asrs	r3, r3, #1
 8011c02:	18d3      	adds	r3, r2, r3
 8011c04:	2188      	movs	r1, #136	@ 0x88
 8011c06:	187a      	adds	r2, r7, r1
 8011c08:	6013      	str	r3, [r2, #0]
    uint32_t amplitude = (uint32_t) (max - centre + BIT_ROUNDING_MARGIN);
 8011c0a:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8011c0c:	187b      	adds	r3, r7, r1
 8011c0e:	681b      	ldr	r3, [r3, #0]
 8011c10:	1ad3      	subs	r3, r2, r3
 8011c12:	3304      	adds	r3, #4
 8011c14:	2284      	movs	r2, #132	@ 0x84
 8011c16:	18b9      	adds	r1, r7, r2
 8011c18:	600b      	str	r3, [r1, #0]
    uint32_t bitShift = getPo2factor(INT32_MAX, amplitude);
 8011c1a:	18bb      	adds	r3, r7, r2
 8011c1c:	681b      	ldr	r3, [r3, #0]
 8011c1e:	4ad1      	ldr	r2, [pc, #836]	@ (8011f64 <calculateSPLQ31+0x394>)
 8011c20:	0019      	movs	r1, r3
 8011c22:	0010      	movs	r0, r2
 8011c24:	f000 fc58 	bl	80124d8 <getPo2factor>
 8011c28:	0003      	movs	r3, r0
 8011c2a:	2280      	movs	r2, #128	@ 0x80
 8011c2c:	18ba      	adds	r2, r7, r2
 8011c2e:	6013      	str	r3, [r2, #0]

    // Apply offset and bitshift and put data into FFT input array
    uint32_t count = 0;
 8011c30:	2300      	movs	r3, #0
 8011c32:	2284      	movs	r2, #132	@ 0x84
 8011c34:	2130      	movs	r1, #48	@ 0x30
 8011c36:	1852      	adds	r2, r2, r1
 8011c38:	19d2      	adds	r2, r2, r7
 8011c3a:	6013      	str	r3, [r2, #0]
    for (uint32_t i = 0; i < FFT_N; i++)
 8011c3c:	2300      	movs	r3, #0
 8011c3e:	2280      	movs	r2, #128	@ 0x80
 8011c40:	1852      	adds	r2, r2, r1
 8011c42:	19d2      	adds	r2, r2, r7
 8011c44:	6013      	str	r3, [r2, #0]
 8011c46:	e032      	b.n	8011cae <calculateSPLQ31+0xde>
    {
        FFTdata[count] = (q31_t) ((dataBuffer[i] - centre) << bitShift);
 8011c48:	4ac5      	ldr	r2, [pc, #788]	@ (8011f60 <calculateSPLQ31+0x390>)
 8011c4a:	2680      	movs	r6, #128	@ 0x80
 8011c4c:	2330      	movs	r3, #48	@ 0x30
 8011c4e:	18f1      	adds	r1, r6, r3
 8011c50:	19cb      	adds	r3, r1, r7
 8011c52:	681b      	ldr	r3, [r3, #0]
 8011c54:	009b      	lsls	r3, r3, #2
 8011c56:	589a      	ldr	r2, [r3, r2]
 8011c58:	2188      	movs	r1, #136	@ 0x88
 8011c5a:	1879      	adds	r1, r7, r1
 8011c5c:	680b      	ldr	r3, [r1, #0]
 8011c5e:	1ad2      	subs	r2, r2, r3
 8011c60:	2180      	movs	r1, #128	@ 0x80
 8011c62:	1879      	adds	r1, r7, r1
 8011c64:	680b      	ldr	r3, [r1, #0]
 8011c66:	409a      	lsls	r2, r3
 8011c68:	0011      	movs	r1, r2
 8011c6a:	4abf      	ldr	r2, [pc, #764]	@ (8011f68 <calculateSPLQ31+0x398>)
 8011c6c:	2084      	movs	r0, #132	@ 0x84
 8011c6e:	2330      	movs	r3, #48	@ 0x30
 8011c70:	18c3      	adds	r3, r0, r3
 8011c72:	19db      	adds	r3, r3, r7
 8011c74:	681b      	ldr	r3, [r3, #0]
 8011c76:	009b      	lsls	r3, r3, #2
 8011c78:	5099      	str	r1, [r3, r2]
        FFTdata[count + 1] = 0;
 8011c7a:	2230      	movs	r2, #48	@ 0x30
 8011c7c:	1883      	adds	r3, r0, r2
 8011c7e:	19db      	adds	r3, r3, r7
 8011c80:	681b      	ldr	r3, [r3, #0]
 8011c82:	3301      	adds	r3, #1
 8011c84:	49b8      	ldr	r1, [pc, #736]	@ (8011f68 <calculateSPLQ31+0x398>)
 8011c86:	009a      	lsls	r2, r3, #2
 8011c88:	2300      	movs	r3, #0
 8011c8a:	5053      	str	r3, [r2, r1]
        count += 2;
 8011c8c:	2230      	movs	r2, #48	@ 0x30
 8011c8e:	1883      	adds	r3, r0, r2
 8011c90:	19db      	adds	r3, r3, r7
 8011c92:	681b      	ldr	r3, [r3, #0]
 8011c94:	3302      	adds	r3, #2
 8011c96:	0011      	movs	r1, r2
 8011c98:	1882      	adds	r2, r0, r2
 8011c9a:	19d2      	adds	r2, r2, r7
 8011c9c:	6013      	str	r3, [r2, #0]
    for (uint32_t i = 0; i < FFT_N; i++)
 8011c9e:	000a      	movs	r2, r1
 8011ca0:	18b3      	adds	r3, r6, r2
 8011ca2:	19db      	adds	r3, r3, r7
 8011ca4:	681b      	ldr	r3, [r3, #0]
 8011ca6:	3301      	adds	r3, #1
 8011ca8:	18b2      	adds	r2, r6, r2
 8011caa:	19d2      	adds	r2, r2, r7
 8011cac:	6013      	str	r3, [r2, #0]
 8011cae:	2380      	movs	r3, #128	@ 0x80
 8011cb0:	2630      	movs	r6, #48	@ 0x30
 8011cb2:	199b      	adds	r3, r3, r6
 8011cb4:	19db      	adds	r3, r3, r7
 8011cb6:	681b      	ldr	r3, [r3, #0]
 8011cb8:	2b7f      	cmp	r3, #127	@ 0x7f
 8011cba:	d9c5      	bls.n	8011c48 <calculateSPLQ31+0x78>
    }

    // Do the FFT; the output is internally divided by FFT_N (number of points)
    arm_cfft_q31(fftInstance, FFTdata, 0, 1);
 8011cbc:	4bab      	ldr	r3, [pc, #684]	@ (8011f6c <calculateSPLQ31+0x39c>)
 8011cbe:	6818      	ldr	r0, [r3, #0]
 8011cc0:	49a9      	ldr	r1, [pc, #676]	@ (8011f68 <calculateSPLQ31+0x398>)
 8011cc2:	2301      	movs	r3, #1
 8011cc4:	2200      	movs	r2, #0
 8011cc6:	f012 f84f 	bl	8023d68 <arm_cfft_q31>

    // Find FFT output max, min values (in 1st half of output),
    // ignoring the two dc bin values:
    findMinMax(&min, &max, &(FFTdata[2]), ((uint32_t) FFT_N) - 2);
 8011cca:	4aa9      	ldr	r2, [pc, #676]	@ (8011f70 <calculateSPLQ31+0x3a0>)
 8011ccc:	2338      	movs	r3, #56	@ 0x38
 8011cce:	199b      	adds	r3, r3, r6
 8011cd0:	19d9      	adds	r1, r3, r7
 8011cd2:	2334      	movs	r3, #52	@ 0x34
 8011cd4:	199b      	adds	r3, r3, r6
 8011cd6:	19d8      	adds	r0, r3, r7
 8011cd8:	237e      	movs	r3, #126	@ 0x7e
 8011cda:	f000 fbbd 	bl	8012458 <findMinMax>

    // find the largest absolute real/imag component (store in "max")
    if (min == INT32_MIN)
 8011cde:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8011ce0:	2380      	movs	r3, #128	@ 0x80
 8011ce2:	061b      	lsls	r3, r3, #24
 8011ce4:	429a      	cmp	r2, r3
 8011ce6:	d101      	bne.n	8011cec <calculateSPLQ31+0x11c>
    {
        min = INT32_MAX;
 8011ce8:	4b9e      	ldr	r3, [pc, #632]	@ (8011f64 <calculateSPLQ31+0x394>)
 8011cea:	667b      	str	r3, [r7, #100]	@ 0x64
    }
    if (max == INT32_MIN)
 8011cec:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8011cee:	2380      	movs	r3, #128	@ 0x80
 8011cf0:	061b      	lsls	r3, r3, #24
 8011cf2:	429a      	cmp	r2, r3
 8011cf4:	d101      	bne.n	8011cfa <calculateSPLQ31+0x12a>
    {
        max = INT32_MAX;
 8011cf6:	4b9b      	ldr	r3, [pc, #620]	@ (8011f64 <calculateSPLQ31+0x394>)
 8011cf8:	66bb      	str	r3, [r7, #104]	@ 0x68
    }
    min = abs(min);
 8011cfa:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8011cfc:	17da      	asrs	r2, r3, #31
 8011cfe:	189b      	adds	r3, r3, r2
 8011d00:	4053      	eors	r3, r2
 8011d02:	667b      	str	r3, [r7, #100]	@ 0x64
    max = abs(max);
 8011d04:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8011d06:	17da      	asrs	r2, r3, #31
 8011d08:	189b      	adds	r3, r3, r2
 8011d0a:	4053      	eors	r3, r2
 8011d0c:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (min > max)
 8011d0e:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8011d10:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8011d12:	429a      	cmp	r2, r3
 8011d14:	dd01      	ble.n	8011d1a <calculateSPLQ31+0x14a>
    {
        max = min;
 8011d16:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8011d18:	66bb      	str	r3, [r7, #104]	@ 0x68
    }
    // Calculate the largest bitshift needed to fill the available range
    // without saturating
    uint32_t amplitude2 = ((uint32_t) max) + BIT_ROUNDING_MARGIN;
 8011d1a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8011d1c:	3304      	adds	r3, #4
 8011d1e:	67fb      	str	r3, [r7, #124]	@ 0x7c
    uint32_t bitShift2 = getPo2factor((uint32_t) INT32_MAX, amplitude2);
 8011d20:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8011d22:	4a90      	ldr	r2, [pc, #576]	@ (8011f64 <calculateSPLQ31+0x394>)
 8011d24:	0019      	movs	r1, r3
 8011d26:	0010      	movs	r0, r2
 8011d28:	f000 fbd6 	bl	80124d8 <getPo2factor>
 8011d2c:	0003      	movs	r3, r0
 8011d2e:	67bb      	str	r3, [r7, #120]	@ 0x78

    // Apply the bitshift (not to the dc bins, and to 1st half of data only),
    // then get the absolute square magnitude of each bin
    for (uint32_t i = 2; i<FFT_N; i++)
 8011d30:	2302      	movs	r3, #2
 8011d32:	22ac      	movs	r2, #172	@ 0xac
 8011d34:	18ba      	adds	r2, r7, r2
 8011d36:	6013      	str	r3, [r2, #0]
 8011d38:	e012      	b.n	8011d60 <calculateSPLQ31+0x190>
    {
        FFTdata[i] = (q31_t) (FFTdata[i] << bitShift2);
 8011d3a:	4a8b      	ldr	r2, [pc, #556]	@ (8011f68 <calculateSPLQ31+0x398>)
 8011d3c:	20ac      	movs	r0, #172	@ 0xac
 8011d3e:	183b      	adds	r3, r7, r0
 8011d40:	681b      	ldr	r3, [r3, #0]
 8011d42:	009b      	lsls	r3, r3, #2
 8011d44:	589a      	ldr	r2, [r3, r2]
 8011d46:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8011d48:	409a      	lsls	r2, r3
 8011d4a:	0011      	movs	r1, r2
 8011d4c:	4a86      	ldr	r2, [pc, #536]	@ (8011f68 <calculateSPLQ31+0x398>)
 8011d4e:	183b      	adds	r3, r7, r0
 8011d50:	681b      	ldr	r3, [r3, #0]
 8011d52:	009b      	lsls	r3, r3, #2
 8011d54:	5099      	str	r1, [r3, r2]
    for (uint32_t i = 2; i<FFT_N; i++)
 8011d56:	183b      	adds	r3, r7, r0
 8011d58:	681b      	ldr	r3, [r3, #0]
 8011d5a:	3301      	adds	r3, #1
 8011d5c:	183a      	adds	r2, r7, r0
 8011d5e:	6013      	str	r3, [r2, #0]
 8011d60:	23ac      	movs	r3, #172	@ 0xac
 8011d62:	18fb      	adds	r3, r7, r3
 8011d64:	681b      	ldr	r3, [r3, #0]
 8011d66:	2b7f      	cmp	r3, #127	@ 0x7f
 8011d68:	d9e7      	bls.n	8011d3a <calculateSPLQ31+0x16a>
    }
    // Re-use dataBuffer as working memory:
    q31_t * sqmag = (q31_t *) dataBuffer;
 8011d6a:	4b7d      	ldr	r3, [pc, #500]	@ (8011f60 <calculateSPLQ31+0x390>)
 8011d6c:	677b      	str	r3, [r7, #116]	@ 0x74
    arm_cmplx_mag_squared_q31(FFTdata, sqmag, FFT_N/2);
 8011d6e:	6f79      	ldr	r1, [r7, #116]	@ 0x74
 8011d70:	4b7d      	ldr	r3, [pc, #500]	@ (8011f68 <calculateSPLQ31+0x398>)
 8011d72:	2240      	movs	r2, #64	@ 0x40
 8011d74:	0018      	movs	r0, r3
 8011d76:	f012 fda1 	bl	80248bc <arm_cmplx_mag_squared_q31>

    // Apply the A-weighting and sum, excluding the dc bin.
    // Also sum for the unweighted frequency-band SPL:
    uint64_t bandSum[SOUND_FREQ_BANDS] = {0};
 8011d7a:	2330      	movs	r3, #48	@ 0x30
 8011d7c:	18fb      	adds	r3, r7, r3
 8011d7e:	0018      	movs	r0, r3
 8011d80:	2330      	movs	r3, #48	@ 0x30
 8011d82:	001a      	movs	r2, r3
 8011d84:	2100      	movs	r1, #0
 8011d86:	f014 fbcb 	bl	8026520 <memset>
    uint64_t sumSq = 0; // sum of squared weighted magnitudes (scaled)
 8011d8a:	2200      	movs	r2, #0
 8011d8c:	2300      	movs	r3, #0
 8011d8e:	21a0      	movs	r1, #160	@ 0xa0
 8011d90:	1879      	adds	r1, r7, r1
 8011d92:	600a      	str	r2, [r1, #0]
 8011d94:	604b      	str	r3, [r1, #4]
    for (uint32_t i = 1; i < (FFT_N/2); i++)
 8011d96:	2301      	movs	r3, #1
 8011d98:	229c      	movs	r2, #156	@ 0x9c
 8011d9a:	18ba      	adds	r2, r7, r2
 8011d9c:	6013      	str	r3, [r2, #0]
 8011d9e:	e05b      	b.n	8011e58 <calculateSPLQ31+0x288>
    {
        sumSq += ((uint64_t) sqmag[i])*((uint64_t) sqWsc[i]);
 8011da0:	269c      	movs	r6, #156	@ 0x9c
 8011da2:	19bb      	adds	r3, r7, r6
 8011da4:	681b      	ldr	r3, [r3, #0]
 8011da6:	009a      	lsls	r2, r3, #2
 8011da8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8011daa:	189b      	adds	r3, r3, r2
 8011dac:	681b      	ldr	r3, [r3, #0]
 8011dae:	613b      	str	r3, [r7, #16]
 8011db0:	17db      	asrs	r3, r3, #31
 8011db2:	617b      	str	r3, [r7, #20]
 8011db4:	4b6f      	ldr	r3, [pc, #444]	@ (8011f74 <calculateSPLQ31+0x3a4>)
 8011db6:	681a      	ldr	r2, [r3, #0]
 8011db8:	19bb      	adds	r3, r7, r6
 8011dba:	681b      	ldr	r3, [r3, #0]
 8011dbc:	005b      	lsls	r3, r3, #1
 8011dbe:	18d3      	adds	r3, r2, r3
 8011dc0:	881b      	ldrh	r3, [r3, #0]
 8011dc2:	60bb      	str	r3, [r7, #8]
 8011dc4:	2300      	movs	r3, #0
 8011dc6:	60fb      	str	r3, [r7, #12]
 8011dc8:	68ba      	ldr	r2, [r7, #8]
 8011dca:	68fb      	ldr	r3, [r7, #12]
 8011dcc:	6938      	ldr	r0, [r7, #16]
 8011dce:	6979      	ldr	r1, [r7, #20]
 8011dd0:	f7ee fbf6 	bl	80005c0 <__aeabi_lmul>
 8011dd4:	0002      	movs	r2, r0
 8011dd6:	000b      	movs	r3, r1
 8011dd8:	0010      	movs	r0, r2
 8011dda:	0019      	movs	r1, r3
 8011ddc:	23a0      	movs	r3, #160	@ 0xa0
 8011dde:	18fa      	adds	r2, r7, r3
 8011de0:	6853      	ldr	r3, [r2, #4]
 8011de2:	6812      	ldr	r2, [r2, #0]
 8011de4:	1812      	adds	r2, r2, r0
 8011de6:	414b      	adcs	r3, r1
 8011de8:	21a0      	movs	r1, #160	@ 0xa0
 8011dea:	1879      	adds	r1, r7, r1
 8011dec:	600a      	str	r2, [r1, #0]
 8011dee:	604b      	str	r3, [r1, #4]
        if (bandIDs[i] != SOUND_FREQ_BANDS)
 8011df0:	4b61      	ldr	r3, [pc, #388]	@ (8011f78 <calculateSPLQ31+0x3a8>)
 8011df2:	681a      	ldr	r2, [r3, #0]
 8011df4:	19bb      	adds	r3, r7, r6
 8011df6:	681b      	ldr	r3, [r3, #0]
 8011df8:	18d3      	adds	r3, r2, r3
 8011dfa:	781b      	ldrb	r3, [r3, #0]
 8011dfc:	2b06      	cmp	r3, #6
 8011dfe:	d025      	beq.n	8011e4c <calculateSPLQ31+0x27c>
        {
            // This bin belongs in one of the frequency-bands:
            bandSum[bandIDs[i]] += (uint64_t) sqmag[i];
 8011e00:	4b5d      	ldr	r3, [pc, #372]	@ (8011f78 <calculateSPLQ31+0x3a8>)
 8011e02:	681a      	ldr	r2, [r3, #0]
 8011e04:	19bb      	adds	r3, r7, r6
 8011e06:	681b      	ldr	r3, [r3, #0]
 8011e08:	18d3      	adds	r3, r2, r3
 8011e0a:	781b      	ldrb	r3, [r3, #0]
 8011e0c:	2230      	movs	r2, #48	@ 0x30
 8011e0e:	18ba      	adds	r2, r7, r2
 8011e10:	00db      	lsls	r3, r3, #3
 8011e12:	18d3      	adds	r3, r2, r3
 8011e14:	6818      	ldr	r0, [r3, #0]
 8011e16:	6859      	ldr	r1, [r3, #4]
 8011e18:	19bb      	adds	r3, r7, r6
 8011e1a:	681b      	ldr	r3, [r3, #0]
 8011e1c:	009a      	lsls	r2, r3, #2
 8011e1e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8011e20:	189b      	adds	r3, r3, r2
 8011e22:	681b      	ldr	r3, [r3, #0]
 8011e24:	603b      	str	r3, [r7, #0]
 8011e26:	17db      	asrs	r3, r3, #31
 8011e28:	607b      	str	r3, [r7, #4]
 8011e2a:	4b53      	ldr	r3, [pc, #332]	@ (8011f78 <calculateSPLQ31+0x3a8>)
 8011e2c:	681a      	ldr	r2, [r3, #0]
 8011e2e:	19be      	adds	r6, r7, r6
 8011e30:	6833      	ldr	r3, [r6, #0]
 8011e32:	18d3      	adds	r3, r2, r3
 8011e34:	781b      	ldrb	r3, [r3, #0]
 8011e36:	001e      	movs	r6, r3
 8011e38:	683a      	ldr	r2, [r7, #0]
 8011e3a:	687b      	ldr	r3, [r7, #4]
 8011e3c:	1880      	adds	r0, r0, r2
 8011e3e:	4159      	adcs	r1, r3
 8011e40:	2330      	movs	r3, #48	@ 0x30
 8011e42:	18fa      	adds	r2, r7, r3
 8011e44:	00f3      	lsls	r3, r6, #3
 8011e46:	18d3      	adds	r3, r2, r3
 8011e48:	6018      	str	r0, [r3, #0]
 8011e4a:	6059      	str	r1, [r3, #4]
    for (uint32_t i = 1; i < (FFT_N/2); i++)
 8011e4c:	229c      	movs	r2, #156	@ 0x9c
 8011e4e:	18bb      	adds	r3, r7, r2
 8011e50:	681b      	ldr	r3, [r3, #0]
 8011e52:	3301      	adds	r3, #1
 8011e54:	18ba      	adds	r2, r7, r2
 8011e56:	6013      	str	r3, [r2, #0]
 8011e58:	239c      	movs	r3, #156	@ 0x9c
 8011e5a:	18fb      	adds	r3, r7, r3
 8011e5c:	681b      	ldr	r3, [r3, #0]
 8011e5e:	2b3f      	cmp	r3, #63	@ 0x3f
 8011e60:	d99e      	bls.n	8011da0 <calculateSPLQ31+0x1d0>
        }
    }

    // Reverse the (explicit and implicit) scalings using a bitshift.
    // Shifts applied before squaring are doubled when reversed.
    int32_t bs_right = ((int32_t) (2*bitShift)) + ((int32_t) (2*bitShift2))
 8011e62:	2380      	movs	r3, #128	@ 0x80
 8011e64:	18fb      	adds	r3, r7, r3
 8011e66:	681b      	ldr	r3, [r3, #0]
 8011e68:	005b      	lsls	r3, r3, #1
 8011e6a:	001a      	movs	r2, r3
 8011e6c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8011e6e:	005b      	lsls	r3, r3, #1
 8011e70:	18d3      	adds	r3, r2, r3
 8011e72:	3b22      	subs	r3, #34	@ 0x22
 8011e74:	673b      	str	r3, [r7, #112]	@ 0x70
                       - FFT_SCALE_BITSHIFT - Q31_BITSHIFT;
    uint32_t absShift = (uint32_t) abs(bs_right);
 8011e76:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8011e78:	17da      	asrs	r2, r3, #31
 8011e7a:	189b      	adds	r3, r3, r2
 8011e7c:	4053      	eors	r3, r2
 8011e7e:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (bs_right < 0)
 8011e80:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8011e82:	2b00      	cmp	r3, #0
 8011e84:	da62      	bge.n	8011f4c <calculateSPLQ31+0x37c>
    {
        // Left shift
        sumSq = sumSq << absShift;
 8011e86:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8011e88:	3b20      	subs	r3, #32
 8011e8a:	2b00      	cmp	r3, #0
 8011e8c:	db05      	blt.n	8011e9a <calculateSPLQ31+0x2ca>
 8011e8e:	22a0      	movs	r2, #160	@ 0xa0
 8011e90:	18ba      	adds	r2, r7, r2
 8011e92:	6812      	ldr	r2, [r2, #0]
 8011e94:	409a      	lsls	r2, r3
 8011e96:	627a      	str	r2, [r7, #36]	@ 0x24
 8011e98:	e010      	b.n	8011ebc <calculateSPLQ31+0x2ec>
 8011e9a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8011e9c:	2220      	movs	r2, #32
 8011e9e:	1ad3      	subs	r3, r2, r3
 8011ea0:	22a0      	movs	r2, #160	@ 0xa0
 8011ea2:	18ba      	adds	r2, r7, r2
 8011ea4:	6812      	ldr	r2, [r2, #0]
 8011ea6:	40da      	lsrs	r2, r3
 8011ea8:	0013      	movs	r3, r2
 8011eaa:	22a4      	movs	r2, #164	@ 0xa4
 8011eac:	18ba      	adds	r2, r7, r2
 8011eae:	6811      	ldr	r1, [r2, #0]
 8011eb0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8011eb2:	4091      	lsls	r1, r2
 8011eb4:	6279      	str	r1, [r7, #36]	@ 0x24
 8011eb6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8011eb8:	431a      	orrs	r2, r3
 8011eba:	627a      	str	r2, [r7, #36]	@ 0x24
 8011ebc:	21a0      	movs	r1, #160	@ 0xa0
 8011ebe:	187b      	adds	r3, r7, r1
 8011ec0:	681a      	ldr	r2, [r3, #0]
 8011ec2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8011ec4:	409a      	lsls	r2, r3
 8011ec6:	623a      	str	r2, [r7, #32]
 8011ec8:	6a3b      	ldr	r3, [r7, #32]
 8011eca:	6a7c      	ldr	r4, [r7, #36]	@ 0x24
 8011ecc:	187a      	adds	r2, r7, r1
 8011ece:	6013      	str	r3, [r2, #0]
 8011ed0:	6054      	str	r4, [r2, #4]
        for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 8011ed2:	2300      	movs	r3, #0
 8011ed4:	2298      	movs	r2, #152	@ 0x98
 8011ed6:	18ba      	adds	r2, r7, r2
 8011ed8:	6013      	str	r3, [r2, #0]
 8011eda:	e031      	b.n	8011f40 <calculateSPLQ31+0x370>
        {
            bandSum[i] = bandSum[i] << absShift;
 8011edc:	2330      	movs	r3, #48	@ 0x30
 8011ede:	18fa      	adds	r2, r7, r3
 8011ee0:	2398      	movs	r3, #152	@ 0x98
 8011ee2:	18fb      	adds	r3, r7, r3
 8011ee4:	681b      	ldr	r3, [r3, #0]
 8011ee6:	00db      	lsls	r3, r3, #3
 8011ee8:	18d3      	adds	r3, r2, r3
 8011eea:	681a      	ldr	r2, [r3, #0]
 8011eec:	685b      	ldr	r3, [r3, #4]
 8011eee:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8011ef0:	3920      	subs	r1, #32
 8011ef2:	2900      	cmp	r1, #0
 8011ef4:	db03      	blt.n	8011efe <calculateSPLQ31+0x32e>
 8011ef6:	0010      	movs	r0, r2
 8011ef8:	4088      	lsls	r0, r1
 8011efa:	62f8      	str	r0, [r7, #44]	@ 0x2c
 8011efc:	e00c      	b.n	8011f18 <calculateSPLQ31+0x348>
 8011efe:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8011f00:	2020      	movs	r0, #32
 8011f02:	1a41      	subs	r1, r0, r1
 8011f04:	0010      	movs	r0, r2
 8011f06:	40c8      	lsrs	r0, r1
 8011f08:	0001      	movs	r1, r0
 8011f0a:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8011f0c:	001c      	movs	r4, r3
 8011f0e:	4084      	lsls	r4, r0
 8011f10:	62fc      	str	r4, [r7, #44]	@ 0x2c
 8011f12:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8011f14:	4308      	orrs	r0, r1
 8011f16:	62f8      	str	r0, [r7, #44]	@ 0x2c
 8011f18:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8011f1a:	0013      	movs	r3, r2
 8011f1c:	408b      	lsls	r3, r1
 8011f1e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8011f20:	2330      	movs	r3, #48	@ 0x30
 8011f22:	18fa      	adds	r2, r7, r3
 8011f24:	2098      	movs	r0, #152	@ 0x98
 8011f26:	183b      	adds	r3, r7, r0
 8011f28:	681b      	ldr	r3, [r3, #0]
 8011f2a:	00db      	lsls	r3, r3, #3
 8011f2c:	18d3      	adds	r3, r2, r3
 8011f2e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8011f30:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8011f32:	6019      	str	r1, [r3, #0]
 8011f34:	605a      	str	r2, [r3, #4]
        for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 8011f36:	183b      	adds	r3, r7, r0
 8011f38:	681b      	ldr	r3, [r3, #0]
 8011f3a:	3301      	adds	r3, #1
 8011f3c:	183a      	adds	r2, r7, r0
 8011f3e:	6013      	str	r3, [r2, #0]
 8011f40:	2398      	movs	r3, #152	@ 0x98
 8011f42:	18fb      	adds	r3, r7, r3
 8011f44:	681b      	ldr	r3, [r3, #0]
 8011f46:	2b05      	cmp	r3, #5
 8011f48:	d9c8      	bls.n	8011edc <calculateSPLQ31+0x30c>
 8011f4a:	e06b      	b.n	8012024 <calculateSPLQ31+0x454>
        }
    }
    else
    {
        // Right shift
        sumSq = sumSq >> absShift;
 8011f4c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8011f4e:	3b20      	subs	r3, #32
 8011f50:	2b00      	cmp	r3, #0
 8011f52:	db13      	blt.n	8011f7c <calculateSPLQ31+0x3ac>
 8011f54:	22a4      	movs	r2, #164	@ 0xa4
 8011f56:	18ba      	adds	r2, r7, r2
 8011f58:	6812      	ldr	r2, [r2, #0]
 8011f5a:	40da      	lsrs	r2, r3
 8011f5c:	61ba      	str	r2, [r7, #24]
 8011f5e:	e01e      	b.n	8011f9e <calculateSPLQ31+0x3ce>
 8011f60:	20001af8 	.word	0x20001af8
 8011f64:	7fffffff 	.word	0x7fffffff
 8011f68:	20001d44 	.word	0x20001d44
 8011f6c:	200000d4 	.word	0x200000d4
 8011f70:	20001d4c 	.word	0x20001d4c
 8011f74:	200000d8 	.word	0x200000d8
 8011f78:	200000e4 	.word	0x200000e4
 8011f7c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8011f7e:	2220      	movs	r2, #32
 8011f80:	1ad3      	subs	r3, r2, r3
 8011f82:	22a4      	movs	r2, #164	@ 0xa4
 8011f84:	18ba      	adds	r2, r7, r2
 8011f86:	6812      	ldr	r2, [r2, #0]
 8011f88:	409a      	lsls	r2, r3
 8011f8a:	0013      	movs	r3, r2
 8011f8c:	22a0      	movs	r2, #160	@ 0xa0
 8011f8e:	18ba      	adds	r2, r7, r2
 8011f90:	6811      	ldr	r1, [r2, #0]
 8011f92:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8011f94:	40d1      	lsrs	r1, r2
 8011f96:	61b9      	str	r1, [r7, #24]
 8011f98:	69ba      	ldr	r2, [r7, #24]
 8011f9a:	431a      	orrs	r2, r3
 8011f9c:	61ba      	str	r2, [r7, #24]
 8011f9e:	23a4      	movs	r3, #164	@ 0xa4
 8011fa0:	18fb      	adds	r3, r7, r3
 8011fa2:	681a      	ldr	r2, [r3, #0]
 8011fa4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8011fa6:	40da      	lsrs	r2, r3
 8011fa8:	61fa      	str	r2, [r7, #28]
 8011faa:	69ba      	ldr	r2, [r7, #24]
 8011fac:	69fb      	ldr	r3, [r7, #28]
 8011fae:	21a0      	movs	r1, #160	@ 0xa0
 8011fb0:	1879      	adds	r1, r7, r1
 8011fb2:	600a      	str	r2, [r1, #0]
 8011fb4:	604b      	str	r3, [r1, #4]
        for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 8011fb6:	2300      	movs	r3, #0
 8011fb8:	2294      	movs	r2, #148	@ 0x94
 8011fba:	18ba      	adds	r2, r7, r2
 8011fbc:	6013      	str	r3, [r2, #0]
 8011fbe:	e02c      	b.n	801201a <calculateSPLQ31+0x44a>
        {
            bandSum[i] = bandSum[i] >> absShift;
 8011fc0:	2330      	movs	r3, #48	@ 0x30
 8011fc2:	18fa      	adds	r2, r7, r3
 8011fc4:	2394      	movs	r3, #148	@ 0x94
 8011fc6:	18fb      	adds	r3, r7, r3
 8011fc8:	681b      	ldr	r3, [r3, #0]
 8011fca:	00db      	lsls	r3, r3, #3
 8011fcc:	18d3      	adds	r3, r2, r3
 8011fce:	681a      	ldr	r2, [r3, #0]
 8011fd0:	685b      	ldr	r3, [r3, #4]
 8011fd2:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8011fd4:	3920      	subs	r1, #32
 8011fd6:	2900      	cmp	r1, #0
 8011fd8:	db03      	blt.n	8011fe2 <calculateSPLQ31+0x412>
 8011fda:	0018      	movs	r0, r3
 8011fdc:	40c8      	lsrs	r0, r1
 8011fde:	0004      	movs	r4, r0
 8011fe0:	e00a      	b.n	8011ff8 <calculateSPLQ31+0x428>
 8011fe2:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8011fe4:	2020      	movs	r0, #32
 8011fe6:	1a41      	subs	r1, r0, r1
 8011fe8:	0018      	movs	r0, r3
 8011fea:	4088      	lsls	r0, r1
 8011fec:	0001      	movs	r1, r0
 8011fee:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8011ff0:	0016      	movs	r6, r2
 8011ff2:	40c6      	lsrs	r6, r0
 8011ff4:	0034      	movs	r4, r6
 8011ff6:	430c      	orrs	r4, r1
 8011ff8:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8011ffa:	40cb      	lsrs	r3, r1
 8011ffc:	001d      	movs	r5, r3
 8011ffe:	2330      	movs	r3, #48	@ 0x30
 8012000:	18fa      	adds	r2, r7, r3
 8012002:	2194      	movs	r1, #148	@ 0x94
 8012004:	187b      	adds	r3, r7, r1
 8012006:	681b      	ldr	r3, [r3, #0]
 8012008:	00db      	lsls	r3, r3, #3
 801200a:	18d3      	adds	r3, r2, r3
 801200c:	601c      	str	r4, [r3, #0]
 801200e:	605d      	str	r5, [r3, #4]
        for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 8012010:	187b      	adds	r3, r7, r1
 8012012:	681b      	ldr	r3, [r3, #0]
 8012014:	3301      	adds	r3, #1
 8012016:	187a      	adds	r2, r7, r1
 8012018:	6013      	str	r3, [r2, #0]
 801201a:	2394      	movs	r3, #148	@ 0x94
 801201c:	18fb      	adds	r3, r7, r3
 801201e:	681b      	ldr	r3, [r3, #0]
 8012020:	2b05      	cmp	r3, #5
 8012022:	d9cd      	bls.n	8011fc0 <calculateSPLQ31+0x3f0>
        }
    }

    // Add on the dB terms accounting for the microphone parameters
    // and (only for the A-weighted SPL) the weighting scale factor
    scaleSPL(sumSq, dBscale_int, dBscale_frac, *tenlog10SF_int, *tenlog10SF_frac,
 8012024:	230f      	movs	r3, #15
 8012026:	425d      	negs	r5, r3
 8012028:	2305      	movs	r3, #5
 801202a:	425e      	negs	r6, r3
 801202c:	4b4a      	ldr	r3, [pc, #296]	@ (8012158 <calculateSPLQ31+0x588>)
 801202e:	681b      	ldr	r3, [r3, #0]
 8012030:	681a      	ldr	r2, [r3, #0]
 8012032:	4b4a      	ldr	r3, [pc, #296]	@ (801215c <calculateSPLQ31+0x58c>)
 8012034:	681b      	ldr	r3, [r3, #0]
 8012036:	681b      	ldr	r3, [r3, #0]
 8012038:	21a0      	movs	r1, #160	@ 0xa0
 801203a:	1879      	adds	r1, r7, r1
 801203c:	6808      	ldr	r0, [r1, #0]
 801203e:	6849      	ldr	r1, [r1, #4]
 8012040:	4c47      	ldr	r4, [pc, #284]	@ (8012160 <calculateSPLQ31+0x590>)
 8012042:	9403      	str	r4, [sp, #12]
 8012044:	4c47      	ldr	r4, [pc, #284]	@ (8012164 <calculateSPLQ31+0x594>)
 8012046:	9402      	str	r4, [sp, #8]
 8012048:	9301      	str	r3, [sp, #4]
 801204a:	9200      	str	r2, [sp, #0]
 801204c:	0033      	movs	r3, r6
 801204e:	002a      	movs	r2, r5
 8012050:	f000 fa86 	bl	8012560 <scaleSPL>
             (int32_t *) &SPL_int, (int32_t *) &SPL_frac_1dp);
    for (uint32_t i=0; i<SOUND_FREQ_BANDS; i++)
 8012054:	2300      	movs	r3, #0
 8012056:	2290      	movs	r2, #144	@ 0x90
 8012058:	18ba      	adds	r2, r7, r2
 801205a:	6013      	str	r3, [r2, #0]
 801205c:	e026      	b.n	80120ac <calculateSPLQ31+0x4dc>
    {
        scaleSPL(bandSum[i], dBscale_int, dBscale_frac, 0, 0,
 801205e:	2330      	movs	r3, #48	@ 0x30
 8012060:	18fa      	adds	r2, r7, r3
 8012062:	2490      	movs	r4, #144	@ 0x90
 8012064:	193b      	adds	r3, r7, r4
 8012066:	681b      	ldr	r3, [r3, #0]
 8012068:	00db      	lsls	r3, r3, #3
 801206a:	18d3      	adds	r3, r2, r3
 801206c:	6818      	ldr	r0, [r3, #0]
 801206e:	6859      	ldr	r1, [r3, #4]
 8012070:	230f      	movs	r3, #15
 8012072:	425d      	negs	r5, r3
 8012074:	2305      	movs	r3, #5
 8012076:	425e      	negs	r6, r3
                 (int32_t *) &(bandSPL_int[i]), (int32_t *) &(bandSPL_frac_1dp[i]));
 8012078:	193b      	adds	r3, r7, r4
 801207a:	681b      	ldr	r3, [r3, #0]
 801207c:	009a      	lsls	r2, r3, #2
 801207e:	4b3a      	ldr	r3, [pc, #232]	@ (8012168 <calculateSPLQ31+0x598>)
 8012080:	18d3      	adds	r3, r2, r3
 8012082:	193a      	adds	r2, r7, r4
 8012084:	6812      	ldr	r2, [r2, #0]
 8012086:	0094      	lsls	r4, r2, #2
 8012088:	4a38      	ldr	r2, [pc, #224]	@ (801216c <calculateSPLQ31+0x59c>)
 801208a:	18a2      	adds	r2, r4, r2
        scaleSPL(bandSum[i], dBscale_int, dBscale_frac, 0, 0,
 801208c:	9203      	str	r2, [sp, #12]
 801208e:	9302      	str	r3, [sp, #8]
 8012090:	2300      	movs	r3, #0
 8012092:	9301      	str	r3, [sp, #4]
 8012094:	2300      	movs	r3, #0
 8012096:	9300      	str	r3, [sp, #0]
 8012098:	0033      	movs	r3, r6
 801209a:	002a      	movs	r2, r5
 801209c:	f000 fa60 	bl	8012560 <scaleSPL>
    for (uint32_t i=0; i<SOUND_FREQ_BANDS; i++)
 80120a0:	2490      	movs	r4, #144	@ 0x90
 80120a2:	193b      	adds	r3, r7, r4
 80120a4:	681b      	ldr	r3, [r3, #0]
 80120a6:	3301      	adds	r3, #1
 80120a8:	193a      	adds	r2, r7, r4
 80120aa:	6013      	str	r3, [r2, #0]
 80120ac:	2390      	movs	r3, #144	@ 0x90
 80120ae:	18fb      	adds	r3, r7, r3
 80120b0:	681b      	ldr	r3, [r3, #0]
 80120b2:	2b05      	cmp	r3, #5
 80120b4:	d9d3      	bls.n	801205e <calculateSPLQ31+0x48e>
    }

    spl_int_sum += SPL_int;
 80120b6:	4b2b      	ldr	r3, [pc, #172]	@ (8012164 <calculateSPLQ31+0x594>)
 80120b8:	681a      	ldr	r2, [r3, #0]
 80120ba:	4b2d      	ldr	r3, [pc, #180]	@ (8012170 <calculateSPLQ31+0x5a0>)
 80120bc:	681b      	ldr	r3, [r3, #0]
 80120be:	18d2      	adds	r2, r2, r3
 80120c0:	4b2b      	ldr	r3, [pc, #172]	@ (8012170 <calculateSPLQ31+0x5a0>)
 80120c2:	601a      	str	r2, [r3, #0]
    spl_frac1dp_sum += SPL_frac_1dp;
 80120c4:	4b26      	ldr	r3, [pc, #152]	@ (8012160 <calculateSPLQ31+0x590>)
 80120c6:	681a      	ldr	r2, [r3, #0]
 80120c8:	4b2a      	ldr	r3, [pc, #168]	@ (8012174 <calculateSPLQ31+0x5a4>)
 80120ca:	681b      	ldr	r3, [r3, #0]
 80120cc:	18d2      	adds	r2, r2, r3
 80120ce:	4b29      	ldr	r3, [pc, #164]	@ (8012174 <calculateSPLQ31+0x5a4>)
 80120d0:	601a      	str	r2, [r3, #0]

    for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 80120d2:	2300      	movs	r3, #0
 80120d4:	228c      	movs	r2, #140	@ 0x8c
 80120d6:	18ba      	adds	r2, r7, r2
 80120d8:	6013      	str	r3, [r2, #0]
 80120da:	e025      	b.n	8012128 <calculateSPLQ31+0x558>
    {
        band_spl_int_sum[i] += bandSPL_int[i];
 80120dc:	4b22      	ldr	r3, [pc, #136]	@ (8012168 <calculateSPLQ31+0x598>)
 80120de:	208c      	movs	r0, #140	@ 0x8c
 80120e0:	183a      	adds	r2, r7, r0
 80120e2:	6812      	ldr	r2, [r2, #0]
 80120e4:	0092      	lsls	r2, r2, #2
 80120e6:	58d2      	ldr	r2, [r2, r3]
 80120e8:	4b23      	ldr	r3, [pc, #140]	@ (8012178 <calculateSPLQ31+0x5a8>)
 80120ea:	1839      	adds	r1, r7, r0
 80120ec:	6809      	ldr	r1, [r1, #0]
 80120ee:	0089      	lsls	r1, r1, #2
 80120f0:	58cb      	ldr	r3, [r1, r3]
 80120f2:	18d1      	adds	r1, r2, r3
 80120f4:	4b20      	ldr	r3, [pc, #128]	@ (8012178 <calculateSPLQ31+0x5a8>)
 80120f6:	183a      	adds	r2, r7, r0
 80120f8:	6812      	ldr	r2, [r2, #0]
 80120fa:	0092      	lsls	r2, r2, #2
 80120fc:	50d1      	str	r1, [r2, r3]
        band_spl_frac1dp_sum[i] += bandSPL_frac_1dp[i];
 80120fe:	4b1b      	ldr	r3, [pc, #108]	@ (801216c <calculateSPLQ31+0x59c>)
 8012100:	183a      	adds	r2, r7, r0
 8012102:	6812      	ldr	r2, [r2, #0]
 8012104:	0092      	lsls	r2, r2, #2
 8012106:	58d2      	ldr	r2, [r2, r3]
 8012108:	4b1c      	ldr	r3, [pc, #112]	@ (801217c <calculateSPLQ31+0x5ac>)
 801210a:	1839      	adds	r1, r7, r0
 801210c:	6809      	ldr	r1, [r1, #0]
 801210e:	0089      	lsls	r1, r1, #2
 8012110:	58cb      	ldr	r3, [r1, r3]
 8012112:	18d1      	adds	r1, r2, r3
 8012114:	4b19      	ldr	r3, [pc, #100]	@ (801217c <calculateSPLQ31+0x5ac>)
 8012116:	183a      	adds	r2, r7, r0
 8012118:	6812      	ldr	r2, [r2, #0]
 801211a:	0092      	lsls	r2, r2, #2
 801211c:	50d1      	str	r1, [r2, r3]
    for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 801211e:	183b      	adds	r3, r7, r0
 8012120:	681b      	ldr	r3, [r3, #0]
 8012122:	3301      	adds	r3, #1
 8012124:	183a      	adds	r2, r7, r0
 8012126:	6013      	str	r3, [r2, #0]
 8012128:	238c      	movs	r3, #140	@ 0x8c
 801212a:	18fb      	adds	r3, r7, r3
 801212c:	681b      	ldr	r3, [r3, #0]
 801212e:	2b05      	cmp	r3, #5
 8012130:	d9d4      	bls.n	80120dc <calculateSPLQ31+0x50c>
    }

    spl_sum_count++;
 8012132:	4b13      	ldr	r3, [pc, #76]	@ (8012180 <calculateSPLQ31+0x5b0>)
 8012134:	681b      	ldr	r3, [r3, #0]
 8012136:	1c5a      	adds	r2, r3, #1
 8012138:	4b11      	ldr	r3, [pc, #68]	@ (8012180 <calculateSPLQ31+0x5b0>)
 801213a:	601a      	str	r2, [r3, #0]
    if (spl_sum_count >= FILTER_SPL_N)
 801213c:	4b10      	ldr	r3, [pc, #64]	@ (8012180 <calculateSPLQ31+0x5b0>)
 801213e:	681b      	ldr	r3, [r3, #0]
 8012140:	2b0f      	cmp	r3, #15
 8012142:	d905      	bls.n	8012150 <calculateSPLQ31+0x580>
    {
        SPLcalcComplete = true;
 8012144:	4b0f      	ldr	r3, [pc, #60]	@ (8012184 <calculateSPLQ31+0x5b4>)
 8012146:	2201      	movs	r2, #1
 8012148:	701a      	strb	r2, [r3, #0]
        SPLcalcEnabled = false;
 801214a:	4b0f      	ldr	r3, [pc, #60]	@ (8012188 <calculateSPLQ31+0x5b8>)
 801214c:	2200      	movs	r2, #0
 801214e:	701a      	strb	r2, [r3, #0]
    }
}
 8012150:	46c0      	nop			@ (mov r8, r8)
 8012152:	46bd      	mov	sp, r7
 8012154:	b02f      	add	sp, #188	@ 0xbc
 8012156:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012158:	200000dc 	.word	0x200000dc
 801215c:	200000e0 	.word	0x200000e0
 8012160:	200012c4 	.word	0x200012c4
 8012164:	200012c0 	.word	0x200012c0
 8012168:	200012c8 	.word	0x200012c8
 801216c:	200012e0 	.word	0x200012e0
 8012170:	20001d08 	.word	0x20001d08
 8012174:	20001d0c 	.word	0x20001d0c
 8012178:	20001d10 	.word	0x20001d10
 801217c:	20001d28 	.word	0x20001d28
 8012180:	20001d40 	.word	0x20001d40
 8012184:	200012b5 	.word	0x200012b5
 8012188:	200012b3 	.word	0x200012b3

0801218c <resetSPLstate>:

static void resetSPLstate(void)
{
 801218c:	b580      	push	{r7, lr}
 801218e:	b082      	sub	sp, #8
 8012190:	af00      	add	r7, sp, #0
    spl_int_sum = 0;
 8012192:	4b11      	ldr	r3, [pc, #68]	@ (80121d8 <resetSPLstate+0x4c>)
 8012194:	2200      	movs	r2, #0
 8012196:	601a      	str	r2, [r3, #0]
    spl_frac1dp_sum = 0;
 8012198:	4b10      	ldr	r3, [pc, #64]	@ (80121dc <resetSPLstate+0x50>)
 801219a:	2200      	movs	r2, #0
 801219c:	601a      	str	r2, [r3, #0]
    spl_sum_count = 0;
 801219e:	4b10      	ldr	r3, [pc, #64]	@ (80121e0 <resetSPLstate+0x54>)
 80121a0:	2200      	movs	r2, #0
 80121a2:	601a      	str	r2, [r3, #0]
    for (uint32_t i=0; i<SOUND_FREQ_BANDS; i++)
 80121a4:	2300      	movs	r3, #0
 80121a6:	607b      	str	r3, [r7, #4]
 80121a8:	e00c      	b.n	80121c4 <resetSPLstate+0x38>
    {
        band_spl_int_sum[i] = 0;
 80121aa:	4b0e      	ldr	r3, [pc, #56]	@ (80121e4 <resetSPLstate+0x58>)
 80121ac:	687a      	ldr	r2, [r7, #4]
 80121ae:	0092      	lsls	r2, r2, #2
 80121b0:	2100      	movs	r1, #0
 80121b2:	50d1      	str	r1, [r2, r3]
        band_spl_frac1dp_sum[i] = 0;
 80121b4:	4b0c      	ldr	r3, [pc, #48]	@ (80121e8 <resetSPLstate+0x5c>)
 80121b6:	687a      	ldr	r2, [r7, #4]
 80121b8:	0092      	lsls	r2, r2, #2
 80121ba:	2100      	movs	r1, #0
 80121bc:	50d1      	str	r1, [r2, r3]
    for (uint32_t i=0; i<SOUND_FREQ_BANDS; i++)
 80121be:	687b      	ldr	r3, [r7, #4]
 80121c0:	3301      	adds	r3, #1
 80121c2:	607b      	str	r3, [r7, #4]
 80121c4:	687b      	ldr	r3, [r7, #4]
 80121c6:	2b05      	cmp	r3, #5
 80121c8:	d9ef      	bls.n	80121aa <resetSPLstate+0x1e>
    }
    SPLcalcComplete = false;
 80121ca:	4b08      	ldr	r3, [pc, #32]	@ (80121ec <resetSPLstate+0x60>)
 80121cc:	2200      	movs	r2, #0
 80121ce:	701a      	strb	r2, [r3, #0]
}
 80121d0:	46c0      	nop			@ (mov r8, r8)
 80121d2:	46bd      	mov	sp, r7
 80121d4:	b002      	add	sp, #8
 80121d6:	bd80      	pop	{r7, pc}
 80121d8:	20001d08 	.word	0x20001d08
 80121dc:	20001d0c 	.word	0x20001d0c
 80121e0:	20001d40 	.word	0x20001d40
 80121e4:	20001d10 	.word	0x20001d10
 80121e8:	20001d28 	.word	0x20001d28
 80121ec:	200012b5 	.word	0x200012b5

080121f0 <getFilteredMaxAmplitudeQ31>:
// Uses a simple single-pole hi-pass IIR filter to remove the input dc offset.
// Uses Q31 operations.
static uint32_t getFilteredMaxAmplitudeQ31(const int32_t * data,
                                           const uint32_t length, bool reset,
                                           bool updateMaxAmpFollower)
{
 80121f0:	b5b0      	push	{r4, r5, r7, lr}
 80121f2:	b090      	sub	sp, #64	@ 0x40
 80121f4:	af00      	add	r7, sp, #0
 80121f6:	60f8      	str	r0, [r7, #12]
 80121f8:	60b9      	str	r1, [r7, #8]
 80121fa:	0019      	movs	r1, r3
 80121fc:	1dfb      	adds	r3, r7, #7
 80121fe:	701a      	strb	r2, [r3, #0]
 8012200:	1dbb      	adds	r3, r7, #6
 8012202:	1c0a      	adds	r2, r1, #0
 8012204:	701a      	strb	r2, [r3, #0]
    static q31_t filtered = 0;
    static q31_t lastData = 0;

    if (reset)
 8012206:	1dfb      	adds	r3, r7, #7
 8012208:	781b      	ldrb	r3, [r3, #0]
 801220a:	2b00      	cmp	r3, #0
 801220c:	d005      	beq.n	801221a <getFilteredMaxAmplitudeQ31+0x2a>
    {
        // Reset the state of the digital filter,
        // e.g. if the mic has been disabled then re-enabled.
        filtered = 0;
 801220e:	4b3b      	ldr	r3, [pc, #236]	@ (80122fc <getFilteredMaxAmplitudeQ31+0x10c>)
 8012210:	2200      	movs	r2, #0
 8012212:	601a      	str	r2, [r3, #0]
        lastData = 0;
 8012214:	4b3a      	ldr	r3, [pc, #232]	@ (8012300 <getFilteredMaxAmplitudeQ31+0x110>)
 8012216:	2200      	movs	r2, #0
 8012218:	601a      	str	r2, [r3, #0]
    }
    q31_t maxAmp = 0;
 801221a:	2300      	movs	r3, #0
 801221c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    q31_t minAmp = 0;
 801221e:	2300      	movs	r3, #0
 8012220:	63bb      	str	r3, [r7, #56]	@ 0x38

    // Apply a bitshift to the incoming data, before filtering, to maximise the
    // dynamic range but while also ensuring the intermediate value cannot
    // overflow (three Q31 values are added together).
    const uint32_t scalingBitShift = 5;
 8012222:	2305      	movs	r3, #5
 8012224:	633b      	str	r3, [r7, #48]	@ 0x30
    for (uint32_t i = 0; i < length; i++)
 8012226:	2300      	movs	r3, #0
 8012228:	637b      	str	r3, [r7, #52]	@ 0x34
 801222a:	e040      	b.n	80122ae <getFilteredMaxAmplitudeQ31+0xbe>
    {
        q31_t fx = (q31_t) (data[i] << scalingBitShift);
 801222c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801222e:	009b      	lsls	r3, r3, #2
 8012230:	68fa      	ldr	r2, [r7, #12]
 8012232:	18d3      	adds	r3, r2, r3
 8012234:	681a      	ldr	r2, [r3, #0]
 8012236:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012238:	409a      	lsls	r2, r3
 801223a:	0013      	movs	r3, r2
 801223c:	61fb      	str	r3, [r7, #28]
        // D = A*B is: arm_mult_q31(&A, &B, &D, 1);
        // D = A+B is: arm_add_q31(&A, &B, &D, 1);

        // Now do the filter calculation:
        q31_t r1, r2, r3;
        lastData = -lastData;
 801223e:	4b30      	ldr	r3, [pc, #192]	@ (8012300 <getFilteredMaxAmplitudeQ31+0x110>)
 8012240:	681b      	ldr	r3, [r3, #0]
 8012242:	425a      	negs	r2, r3
 8012244:	4b2e      	ldr	r3, [pc, #184]	@ (8012300 <getFilteredMaxAmplitudeQ31+0x110>)
 8012246:	601a      	str	r2, [r3, #0]
        arm_add_q31(&fx, &lastData, &r1, 1); // r1 = fx - lastData
 8012248:	2418      	movs	r4, #24
 801224a:	193a      	adds	r2, r7, r4
 801224c:	492c      	ldr	r1, [pc, #176]	@ (8012300 <getFilteredMaxAmplitudeQ31+0x110>)
 801224e:	231c      	movs	r3, #28
 8012250:	18f8      	adds	r0, r7, r3
 8012252:	2301      	movs	r3, #1
 8012254:	f012 fb8a 	bl	802496c <arm_add_q31>
        arm_mult_q31((q31_t *) &a0, &r1, &r2, 1);      // r2 = a0*r1
 8012258:	2514      	movs	r5, #20
 801225a:	197a      	adds	r2, r7, r5
 801225c:	1939      	adds	r1, r7, r4
 801225e:	4829      	ldr	r0, [pc, #164]	@ (8012304 <getFilteredMaxAmplitudeQ31+0x114>)
 8012260:	2301      	movs	r3, #1
 8012262:	f012 fb51 	bl	8024908 <arm_mult_q31>
        arm_mult_q31((q31_t *) &b, &filtered, &r3, 1); // r3 = b*filtered
 8012266:	2410      	movs	r4, #16
 8012268:	193a      	adds	r2, r7, r4
 801226a:	4924      	ldr	r1, [pc, #144]	@ (80122fc <getFilteredMaxAmplitudeQ31+0x10c>)
 801226c:	4826      	ldr	r0, [pc, #152]	@ (8012308 <getFilteredMaxAmplitudeQ31+0x118>)
 801226e:	2301      	movs	r3, #1
 8012270:	f012 fb4a 	bl	8024908 <arm_mult_q31>
        arm_add_q31(&r2, &r3, &filtered, 1); // filtered = r2 + r3
 8012274:	4a21      	ldr	r2, [pc, #132]	@ (80122fc <getFilteredMaxAmplitudeQ31+0x10c>)
 8012276:	1939      	adds	r1, r7, r4
 8012278:	1978      	adds	r0, r7, r5
 801227a:	2301      	movs	r3, #1
 801227c:	f012 fb76 	bl	802496c <arm_add_q31>

        lastData = fx;
 8012280:	69fa      	ldr	r2, [r7, #28]
 8012282:	4b1f      	ldr	r3, [pc, #124]	@ (8012300 <getFilteredMaxAmplitudeQ31+0x110>)
 8012284:	601a      	str	r2, [r3, #0]
        if (filtered > maxAmp)
 8012286:	4b1d      	ldr	r3, [pc, #116]	@ (80122fc <getFilteredMaxAmplitudeQ31+0x10c>)
 8012288:	681b      	ldr	r3, [r3, #0]
 801228a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 801228c:	429a      	cmp	r2, r3
 801228e:	da03      	bge.n	8012298 <getFilteredMaxAmplitudeQ31+0xa8>
        {
            maxAmp = filtered;
 8012290:	4b1a      	ldr	r3, [pc, #104]	@ (80122fc <getFilteredMaxAmplitudeQ31+0x10c>)
 8012292:	681b      	ldr	r3, [r3, #0]
 8012294:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8012296:	e007      	b.n	80122a8 <getFilteredMaxAmplitudeQ31+0xb8>
        }
        else if (filtered < minAmp)
 8012298:	4b18      	ldr	r3, [pc, #96]	@ (80122fc <getFilteredMaxAmplitudeQ31+0x10c>)
 801229a:	681b      	ldr	r3, [r3, #0]
 801229c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801229e:	429a      	cmp	r2, r3
 80122a0:	dd02      	ble.n	80122a8 <getFilteredMaxAmplitudeQ31+0xb8>
        {
            minAmp = filtered;
 80122a2:	4b16      	ldr	r3, [pc, #88]	@ (80122fc <getFilteredMaxAmplitudeQ31+0x10c>)
 80122a4:	681b      	ldr	r3, [r3, #0]
 80122a6:	63bb      	str	r3, [r7, #56]	@ 0x38
    for (uint32_t i = 0; i < length; i++)
 80122a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80122aa:	3301      	adds	r3, #1
 80122ac:	637b      	str	r3, [r7, #52]	@ 0x34
 80122ae:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80122b0:	68bb      	ldr	r3, [r7, #8]
 80122b2:	429a      	cmp	r2, r3
 80122b4:	d3ba      	bcc.n	801222c <getFilteredMaxAmplitudeQ31+0x3c>
        }
    }
    // Find the maximum absolute amplitude from the signed values:
    uint32_t absMin = abs(minAmp);
 80122b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80122b8:	17da      	asrs	r2, r3, #31
 80122ba:	189b      	adds	r3, r3, r2
 80122bc:	4053      	eors	r3, r2
 80122be:	62fb      	str	r3, [r7, #44]	@ 0x2c
    uint32_t absMax = (uint32_t) maxAmp;
 80122c0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80122c2:	62bb      	str	r3, [r7, #40]	@ 0x28
    uint32_t absMaxAmp = (absMin > absMax) ? absMin : absMax;
 80122c4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80122c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80122c8:	4293      	cmp	r3, r2
 80122ca:	d200      	bcs.n	80122ce <getFilteredMaxAmplitudeQ31+0xde>
 80122cc:	0013      	movs	r3, r2
 80122ce:	627b      	str	r3, [r7, #36]	@ 0x24

    // Reverse the scaling bitshift
    uint32_t absMaxAmp32 = (uint32_t) (absMaxAmp >> scalingBitShift);
 80122d0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80122d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80122d4:	40da      	lsrs	r2, r3
 80122d6:	0013      	movs	r3, r2
 80122d8:	623b      	str	r3, [r7, #32]

    if (updateMaxAmpFollower && (absMaxAmp32 > maximumAmplitude))
 80122da:	1dbb      	adds	r3, r7, #6
 80122dc:	781b      	ldrb	r3, [r3, #0]
 80122de:	2b00      	cmp	r3, #0
 80122e0:	d007      	beq.n	80122f2 <getFilteredMaxAmplitudeQ31+0x102>
 80122e2:	4b0a      	ldr	r3, [pc, #40]	@ (801230c <getFilteredMaxAmplitudeQ31+0x11c>)
 80122e4:	681b      	ldr	r3, [r3, #0]
 80122e6:	6a3a      	ldr	r2, [r7, #32]
 80122e8:	429a      	cmp	r2, r3
 80122ea:	d902      	bls.n	80122f2 <getFilteredMaxAmplitudeQ31+0x102>
    {
        maximumAmplitude = absMaxAmp32;
 80122ec:	4b07      	ldr	r3, [pc, #28]	@ (801230c <getFilteredMaxAmplitudeQ31+0x11c>)
 80122ee:	6a3a      	ldr	r2, [r7, #32]
 80122f0:	601a      	str	r2, [r3, #0]
    }
    return absMaxAmp32;
 80122f2:	6a3b      	ldr	r3, [r7, #32]
}
 80122f4:	0018      	movs	r0, r3
 80122f6:	46bd      	mov	sp, r7
 80122f8:	b010      	add	sp, #64	@ 0x40
 80122fa:	bdb0      	pop	{r4, r5, r7, pc}
 80122fc:	20002144 	.word	0x20002144
 8012300:	20002148 	.word	0x20002148
 8012304:	0802e484 	.word	0x0802e484
 8012308:	0802e488 	.word	0x0802e488
 801230c:	200012bc 	.word	0x200012bc

08012310 <floatToIntAndFrac2dp>:
// The float input must be positive and fit in a uint32.
// e.g. to print the result: printf("%i.%02i\n", intpart, fracpart2dp);
// To convert to float: intpart + (fracpart2dp/100.0)
void floatToIntAndFrac2dp(float positiveValue, uint32_t *intpart,
                          uint8_t *fracpart2dp)
{
 8012310:	b580      	push	{r7, lr}
 8012312:	b086      	sub	sp, #24
 8012314:	af00      	add	r7, sp, #0
 8012316:	60f8      	str	r0, [r7, #12]
 8012318:	60b9      	str	r1, [r7, #8]
 801231a:	607a      	str	r2, [r7, #4]
    uint32_t rounded = (uint32_t) roundf(positiveValue*100.0f);
 801231c:	4913      	ldr	r1, [pc, #76]	@ (801236c <floatToIntAndFrac2dp+0x5c>)
 801231e:	68f8      	ldr	r0, [r7, #12]
 8012320:	f7ee fe8e 	bl	8001040 <__aeabi_fmul>
 8012324:	1c03      	adds	r3, r0, #0
 8012326:	1c18      	adds	r0, r3, #0
 8012328:	f016 fff8 	bl	802931c <roundf>
 801232c:	1c03      	adds	r3, r0, #0
 801232e:	1c18      	adds	r0, r3, #0
 8012330:	f7ee f974 	bl	800061c <__aeabi_f2uiz>
 8012334:	0003      	movs	r3, r0
 8012336:	617b      	str	r3, [r7, #20]
    intpart[0] = rounded/100;
 8012338:	697b      	ldr	r3, [r7, #20]
 801233a:	2164      	movs	r1, #100	@ 0x64
 801233c:	0018      	movs	r0, r3
 801233e:	f7ed ff31 	bl	80001a4 <__udivsi3>
 8012342:	0003      	movs	r3, r0
 8012344:	001a      	movs	r2, r3
 8012346:	68bb      	ldr	r3, [r7, #8]
 8012348:	601a      	str	r2, [r3, #0]
    fracpart2dp[0] = (uint8_t) (rounded - (intpart[0]*100));
 801234a:	697b      	ldr	r3, [r7, #20]
 801234c:	b2da      	uxtb	r2, r3
 801234e:	68bb      	ldr	r3, [r7, #8]
 8012350:	681b      	ldr	r3, [r3, #0]
 8012352:	b2db      	uxtb	r3, r3
 8012354:	2164      	movs	r1, #100	@ 0x64
 8012356:	434b      	muls	r3, r1
 8012358:	b2db      	uxtb	r3, r3
 801235a:	1ad3      	subs	r3, r2, r3
 801235c:	b2da      	uxtb	r2, r3
 801235e:	687b      	ldr	r3, [r7, #4]
 8012360:	701a      	strb	r2, [r3, #0]
}
 8012362:	46c0      	nop			@ (mov r8, r8)
 8012364:	46bd      	mov	sp, r7
 8012366:	b006      	add	sp, #24
 8012368:	bd80      	pop	{r7, pc}
 801236a:	46c0      	nop			@ (mov r8, r8)
 801236c:	42c80000 	.word	0x42c80000

08012370 <floatToIntAndFrac1dp>:
// The float input must be positive and fit in a uint32.
// e.g. to print the result: printf("%i.%i\n", intpart, fracpart1dp);
// To convert to float: intpart + (fracpart1dp/10.0)
void floatToIntAndFrac1dp(float positiveValue, uint32_t *intpart,
                          uint8_t *fracpart1dp)
{
 8012370:	b580      	push	{r7, lr}
 8012372:	b086      	sub	sp, #24
 8012374:	af00      	add	r7, sp, #0
 8012376:	60f8      	str	r0, [r7, #12]
 8012378:	60b9      	str	r1, [r7, #8]
 801237a:	607a      	str	r2, [r7, #4]
    uint32_t rounded = (uint32_t) roundf(positiveValue*10.0f);
 801237c:	4914      	ldr	r1, [pc, #80]	@ (80123d0 <floatToIntAndFrac1dp+0x60>)
 801237e:	68f8      	ldr	r0, [r7, #12]
 8012380:	f7ee fe5e 	bl	8001040 <__aeabi_fmul>
 8012384:	1c03      	adds	r3, r0, #0
 8012386:	1c18      	adds	r0, r3, #0
 8012388:	f016 ffc8 	bl	802931c <roundf>
 801238c:	1c03      	adds	r3, r0, #0
 801238e:	1c18      	adds	r0, r3, #0
 8012390:	f7ee f944 	bl	800061c <__aeabi_f2uiz>
 8012394:	0003      	movs	r3, r0
 8012396:	617b      	str	r3, [r7, #20]
    intpart[0] = rounded/10;
 8012398:	697b      	ldr	r3, [r7, #20]
 801239a:	210a      	movs	r1, #10
 801239c:	0018      	movs	r0, r3
 801239e:	f7ed ff01 	bl	80001a4 <__udivsi3>
 80123a2:	0003      	movs	r3, r0
 80123a4:	001a      	movs	r2, r3
 80123a6:	68bb      	ldr	r3, [r7, #8]
 80123a8:	601a      	str	r2, [r3, #0]
    fracpart1dp[0] = (uint8_t) (rounded - (intpart[0]*10));
 80123aa:	697b      	ldr	r3, [r7, #20]
 80123ac:	b2da      	uxtb	r2, r3
 80123ae:	68bb      	ldr	r3, [r7, #8]
 80123b0:	681b      	ldr	r3, [r3, #0]
 80123b2:	b2db      	uxtb	r3, r3
 80123b4:	1c19      	adds	r1, r3, #0
 80123b6:	0089      	lsls	r1, r1, #2
 80123b8:	18cb      	adds	r3, r1, r3
 80123ba:	18db      	adds	r3, r3, r3
 80123bc:	b2db      	uxtb	r3, r3
 80123be:	1ad3      	subs	r3, r2, r3
 80123c0:	b2da      	uxtb	r2, r3
 80123c2:	687b      	ldr	r3, [r7, #4]
 80123c4:	701a      	strb	r2, [r3, #0]
}
 80123c6:	46c0      	nop			@ (mov r8, r8)
 80123c8:	46bd      	mov	sp, r7
 80123ca:	b006      	add	sp, #24
 80123cc:	bd80      	pop	{r7, pc}
 80123ce:	46c0      	nop			@ (mov r8, r8)
 80123d0:	41200000 	.word	0x41200000

080123d4 <sumToIntAverage>:

// Convert an accumulated sum into an average value, in (integer, fractional) format.
void sumToIntAverage(uint8_t * intpart, uint8_t * fracpart1dp, const int32_t intSum,
                     const int32_t frac1dpSum, const uint32_t sumCount)
{
 80123d4:	b590      	push	{r4, r7, lr}
 80123d6:	b087      	sub	sp, #28
 80123d8:	af00      	add	r7, sp, #0
 80123da:	60f8      	str	r0, [r7, #12]
 80123dc:	60b9      	str	r1, [r7, #8]
 80123de:	607a      	str	r2, [r7, #4]
 80123e0:	603b      	str	r3, [r7, #0]
    float splAverage = (((float) intSum) +
 80123e2:	6878      	ldr	r0, [r7, #4]
 80123e4:	f7ef fa20 	bl	8001828 <__aeabi_i2f>
 80123e8:	1c04      	adds	r4, r0, #0
                       (((float) frac1dpSum)/10.0f))/((float) sumCount);
 80123ea:	6838      	ldr	r0, [r7, #0]
 80123ec:	f7ef fa1c 	bl	8001828 <__aeabi_i2f>
 80123f0:	1c03      	adds	r3, r0, #0
 80123f2:	4918      	ldr	r1, [pc, #96]	@ (8012454 <sumToIntAverage+0x80>)
 80123f4:	1c18      	adds	r0, r3, #0
 80123f6:	f7ee fc55 	bl	8000ca4 <__aeabi_fdiv>
 80123fa:	1c03      	adds	r3, r0, #0
    float splAverage = (((float) intSum) +
 80123fc:	1c19      	adds	r1, r3, #0
 80123fe:	1c20      	adds	r0, r4, #0
 8012400:	f7ee fa5e 	bl	80008c0 <__aeabi_fadd>
 8012404:	1c03      	adds	r3, r0, #0
 8012406:	1c1c      	adds	r4, r3, #0
                       (((float) frac1dpSum)/10.0f))/((float) sumCount);
 8012408:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801240a:	f7ef fa5d 	bl	80018c8 <__aeabi_ui2f>
 801240e:	1c03      	adds	r3, r0, #0
    float splAverage = (((float) intSum) +
 8012410:	1c19      	adds	r1, r3, #0
 8012412:	1c20      	adds	r0, r4, #0
 8012414:	f7ee fc46 	bl	8000ca4 <__aeabi_fdiv>
 8012418:	1c03      	adds	r3, r0, #0
 801241a:	617b      	str	r3, [r7, #20]
    uint32_t intpart32 = 0;
 801241c:	2300      	movs	r3, #0
 801241e:	613b      	str	r3, [r7, #16]
    floatToIntAndFrac1dp(splAverage, &intpart32, fracpart1dp);
 8012420:	68ba      	ldr	r2, [r7, #8]
 8012422:	2310      	movs	r3, #16
 8012424:	18f9      	adds	r1, r7, r3
 8012426:	697b      	ldr	r3, [r7, #20]
 8012428:	1c18      	adds	r0, r3, #0
 801242a:	f7ff ffa1 	bl	8012370 <floatToIntAndFrac1dp>

    if (intpart32 > UINT8_MAX)
 801242e:	693b      	ldr	r3, [r7, #16]
 8012430:	2bff      	cmp	r3, #255	@ 0xff
 8012432:	d906      	bls.n	8012442 <sumToIntAverage+0x6e>
    {
        intpart[0] = UINT8_MAX;
 8012434:	68fb      	ldr	r3, [r7, #12]
 8012436:	22ff      	movs	r2, #255	@ 0xff
 8012438:	701a      	strb	r2, [r3, #0]
        fracpart1dp[0] = 9;
 801243a:	68bb      	ldr	r3, [r7, #8]
 801243c:	2209      	movs	r2, #9
 801243e:	701a      	strb	r2, [r3, #0]
    }
    else
    {
        intpart[0] = (uint8_t) intpart32;
    }
}
 8012440:	e003      	b.n	801244a <sumToIntAverage+0x76>
        intpart[0] = (uint8_t) intpart32;
 8012442:	693b      	ldr	r3, [r7, #16]
 8012444:	b2da      	uxtb	r2, r3
 8012446:	68fb      	ldr	r3, [r7, #12]
 8012448:	701a      	strb	r2, [r3, #0]
}
 801244a:	46c0      	nop			@ (mov r8, r8)
 801244c:	46bd      	mov	sp, r7
 801244e:	b007      	add	sp, #28
 8012450:	bd90      	pop	{r4, r7, pc}
 8012452:	46c0      	nop			@ (mov r8, r8)
 8012454:	41200000 	.word	0x41200000

08012458 <findMinMax>:


// Find the smallest and largest integers in an array.
void findMinMax(int32_t * min, int32_t * max, const int32_t * array,
                const uint32_t length)
{
 8012458:	b580      	push	{r7, lr}
 801245a:	b086      	sub	sp, #24
 801245c:	af00      	add	r7, sp, #0
 801245e:	60f8      	str	r0, [r7, #12]
 8012460:	60b9      	str	r1, [r7, #8]
 8012462:	607a      	str	r2, [r7, #4]
 8012464:	603b      	str	r3, [r7, #0]
    max[0] = INT32_MIN;
 8012466:	68bb      	ldr	r3, [r7, #8]
 8012468:	2280      	movs	r2, #128	@ 0x80
 801246a:	0612      	lsls	r2, r2, #24
 801246c:	601a      	str	r2, [r3, #0]
    min[0] = INT32_MAX;
 801246e:	68fb      	ldr	r3, [r7, #12]
 8012470:	4a18      	ldr	r2, [pc, #96]	@ (80124d4 <findMinMax+0x7c>)
 8012472:	601a      	str	r2, [r3, #0]
    for (uint32_t i = 0; i < length; i++)
 8012474:	2300      	movs	r3, #0
 8012476:	617b      	str	r3, [r7, #20]
 8012478:	e022      	b.n	80124c0 <findMinMax+0x68>
    {
        if (array[i] < min[0])
 801247a:	697b      	ldr	r3, [r7, #20]
 801247c:	009b      	lsls	r3, r3, #2
 801247e:	687a      	ldr	r2, [r7, #4]
 8012480:	18d3      	adds	r3, r2, r3
 8012482:	681a      	ldr	r2, [r3, #0]
 8012484:	68fb      	ldr	r3, [r7, #12]
 8012486:	681b      	ldr	r3, [r3, #0]
 8012488:	429a      	cmp	r2, r3
 801248a:	da06      	bge.n	801249a <findMinMax+0x42>
        {
            min[0] = array[i];
 801248c:	697b      	ldr	r3, [r7, #20]
 801248e:	009b      	lsls	r3, r3, #2
 8012490:	687a      	ldr	r2, [r7, #4]
 8012492:	18d3      	adds	r3, r2, r3
 8012494:	681a      	ldr	r2, [r3, #0]
 8012496:	68fb      	ldr	r3, [r7, #12]
 8012498:	601a      	str	r2, [r3, #0]
        }
        if (array[i] > max[0])
 801249a:	697b      	ldr	r3, [r7, #20]
 801249c:	009b      	lsls	r3, r3, #2
 801249e:	687a      	ldr	r2, [r7, #4]
 80124a0:	18d3      	adds	r3, r2, r3
 80124a2:	681a      	ldr	r2, [r3, #0]
 80124a4:	68bb      	ldr	r3, [r7, #8]
 80124a6:	681b      	ldr	r3, [r3, #0]
 80124a8:	429a      	cmp	r2, r3
 80124aa:	dd06      	ble.n	80124ba <findMinMax+0x62>
        {
            max[0] = array[i];
 80124ac:	697b      	ldr	r3, [r7, #20]
 80124ae:	009b      	lsls	r3, r3, #2
 80124b0:	687a      	ldr	r2, [r7, #4]
 80124b2:	18d3      	adds	r3, r2, r3
 80124b4:	681a      	ldr	r2, [r3, #0]
 80124b6:	68bb      	ldr	r3, [r7, #8]
 80124b8:	601a      	str	r2, [r3, #0]
    for (uint32_t i = 0; i < length; i++)
 80124ba:	697b      	ldr	r3, [r7, #20]
 80124bc:	3301      	adds	r3, #1
 80124be:	617b      	str	r3, [r7, #20]
 80124c0:	697a      	ldr	r2, [r7, #20]
 80124c2:	683b      	ldr	r3, [r7, #0]
 80124c4:	429a      	cmp	r2, r3
 80124c6:	d3d8      	bcc.n	801247a <findMinMax+0x22>
        }
    }
}
 80124c8:	46c0      	nop			@ (mov r8, r8)
 80124ca:	46c0      	nop			@ (mov r8, r8)
 80124cc:	46bd      	mov	sp, r7
 80124ce:	b006      	add	sp, #24
 80124d0:	bd80      	pop	{r7, pc}
 80124d2:	46c0      	nop			@ (mov r8, r8)
 80124d4:	7fffffff 	.word	0x7fffffff

080124d8 <getPo2factor>:

// Find the largest positive integer bitshift m, such that: smallVal*(2^m) <= bigVal.
// This is the largest upward bitshift that can be applied to smallVal such
// that it does not exceed bigVal.
uint32_t getPo2factor(uint32_t bigVal, uint32_t smallVal)
{
 80124d8:	b580      	push	{r7, lr}
 80124da:	b084      	sub	sp, #16
 80124dc:	af00      	add	r7, sp, #0
 80124de:	6078      	str	r0, [r7, #4]
 80124e0:	6039      	str	r1, [r7, #0]
    uint32_t bitShift = 0;
 80124e2:	2300      	movs	r3, #0
 80124e4:	60fb      	str	r3, [r7, #12]
    if ((bigVal < smallVal) || (smallVal == 0))
 80124e6:	687a      	ldr	r2, [r7, #4]
 80124e8:	683b      	ldr	r3, [r7, #0]
 80124ea:	429a      	cmp	r2, r3
 80124ec:	d302      	bcc.n	80124f4 <getPo2factor+0x1c>
 80124ee:	683b      	ldr	r3, [r7, #0]
 80124f0:	2b00      	cmp	r3, #0
 80124f2:	d107      	bne.n	8012504 <getPo2factor+0x2c>
    {
        return 0;
 80124f4:	2300      	movs	r3, #0
 80124f6:	e00d      	b.n	8012514 <getPo2factor+0x3c>
    }
    while (bigVal >= smallVal)
    {
        bigVal = bigVal >> 1;
 80124f8:	687b      	ldr	r3, [r7, #4]
 80124fa:	085b      	lsrs	r3, r3, #1
 80124fc:	607b      	str	r3, [r7, #4]
        bitShift++;
 80124fe:	68fb      	ldr	r3, [r7, #12]
 8012500:	3301      	adds	r3, #1
 8012502:	60fb      	str	r3, [r7, #12]
    while (bigVal >= smallVal)
 8012504:	687a      	ldr	r2, [r7, #4]
 8012506:	683b      	ldr	r3, [r7, #0]
 8012508:	429a      	cmp	r2, r3
 801250a:	d2f5      	bcs.n	80124f8 <getPo2factor+0x20>
    }
    bitShift -= 1; // do not count the final shift
 801250c:	68fb      	ldr	r3, [r7, #12]
 801250e:	3b01      	subs	r3, #1
 8012510:	60fb      	str	r3, [r7, #12]
    return bitShift;
 8012512:	68fb      	ldr	r3, [r7, #12]
}
 8012514:	0018      	movs	r0, r3
 8012516:	46bd      	mov	sp, r7
 8012518:	b004      	add	sp, #16
 801251a:	bd80      	pop	{r7, pc}

0801251c <amplitudeDN_to_mPa>:
// The microphone scale factor is ik_mPa.
// Returns integer part and fractional part to 2 d.p.
// Given that ampDN is at most 2^24, the output will always fit in a uint16.
void amplitudeDN_to_mPa(const uint32_t ampDN, const float ik_mPa,
                        uint16_t * intAmp_mPa, uint8_t * frac2dpAmp_mPa)
{
 801251c:	b580      	push	{r7, lr}
 801251e:	b086      	sub	sp, #24
 8012520:	af00      	add	r7, sp, #0
 8012522:	60f8      	str	r0, [r7, #12]
 8012524:	60b9      	str	r1, [r7, #8]
 8012526:	607a      	str	r2, [r7, #4]
 8012528:	603b      	str	r3, [r7, #0]
    float amp = ((float) ampDN)*ik_mPa;
 801252a:	68f8      	ldr	r0, [r7, #12]
 801252c:	f7ef f9cc 	bl	80018c8 <__aeabi_ui2f>
 8012530:	1c03      	adds	r3, r0, #0
 8012532:	1c19      	adds	r1, r3, #0
 8012534:	68b8      	ldr	r0, [r7, #8]
 8012536:	f7ee fd83 	bl	8001040 <__aeabi_fmul>
 801253a:	1c03      	adds	r3, r0, #0
 801253c:	617b      	str	r3, [r7, #20]
    uint32_t intpart = 0;
 801253e:	2300      	movs	r3, #0
 8012540:	613b      	str	r3, [r7, #16]
    floatToIntAndFrac2dp(amp, &intpart, frac2dpAmp_mPa);
 8012542:	683a      	ldr	r2, [r7, #0]
 8012544:	2310      	movs	r3, #16
 8012546:	18f9      	adds	r1, r7, r3
 8012548:	697b      	ldr	r3, [r7, #20]
 801254a:	1c18      	adds	r0, r3, #0
 801254c:	f7ff fee0 	bl	8012310 <floatToIntAndFrac2dp>
    intAmp_mPa[0] = (uint16_t) intpart;
 8012550:	693b      	ldr	r3, [r7, #16]
 8012552:	b29a      	uxth	r2, r3
 8012554:	687b      	ldr	r3, [r7, #4]
 8012556:	801a      	strh	r2, [r3, #0]
}
 8012558:	46c0      	nop			@ (mov r8, r8)
 801255a:	46bd      	mov	sp, r7
 801255c:	b006      	add	sp, #24
 801255e:	bd80      	pop	{r7, pc}

08012560 <scaleSPL>:
// Find the final SPL value in decibels by taking log, adding the terms accounting
// for the microphone parameters and (for weighted SPL) the weighting scale factor.
void scaleSPL(uint64_t sumSq, const int32_t dBscale_int, const int32_t dBscale_frac,
              const int32_t weightingInt, const int32_t weightingFrac,
              int32_t * SPLintegerPart, int32_t * SPLfractionalPart)
{
 8012560:	b580      	push	{r7, lr}
 8012562:	b084      	sub	sp, #16
 8012564:	af00      	add	r7, sp, #0
 8012566:	60b8      	str	r0, [r7, #8]
 8012568:	60f9      	str	r1, [r7, #12]
 801256a:	607a      	str	r2, [r7, #4]
 801256c:	603b      	str	r3, [r7, #0]
    // Calculate: SPLvalue = (10.0*log10(sumSq)) + dBscale + weightTerm;
    efficient10log10(sumSq, SPLintegerPart, SPLfractionalPart);
 801256e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012570:	6a3a      	ldr	r2, [r7, #32]
 8012572:	68b8      	ldr	r0, [r7, #8]
 8012574:	68f9      	ldr	r1, [r7, #12]
 8012576:	f7f9 fe3b 	bl	800c1f0 <efficient10log10>
    SPLintegerPart[0] = SPLintegerPart[0] + dBscale_int + weightingInt;
 801257a:	6a3b      	ldr	r3, [r7, #32]
 801257c:	681a      	ldr	r2, [r3, #0]
 801257e:	687b      	ldr	r3, [r7, #4]
 8012580:	18d2      	adds	r2, r2, r3
 8012582:	69bb      	ldr	r3, [r7, #24]
 8012584:	18d2      	adds	r2, r2, r3
 8012586:	6a3b      	ldr	r3, [r7, #32]
 8012588:	601a      	str	r2, [r3, #0]
    SPLfractionalPart[0] = SPLfractionalPart[0] + dBscale_frac + weightingFrac;
 801258a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801258c:	681a      	ldr	r2, [r3, #0]
 801258e:	683b      	ldr	r3, [r7, #0]
 8012590:	18d2      	adds	r2, r2, r3
 8012592:	69fb      	ldr	r3, [r7, #28]
 8012594:	18d2      	adds	r2, r2, r3
 8012596:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012598:	601a      	str	r2, [r3, #0]
    // Apply correction if fractional part is not in range 0->9:
    correctIntFracNumber(SPLintegerPart, SPLfractionalPart);
 801259a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801259c:	6a3b      	ldr	r3, [r7, #32]
 801259e:	0011      	movs	r1, r2
 80125a0:	0018      	movs	r0, r3
 80125a2:	f7f9 feb5 	bl	800c310 <correctIntFracNumber>
}
 80125a6:	46c0      	nop			@ (mov r8, r8)
 80125a8:	46bd      	mov	sp, r7
 80125aa:	b004      	add	sp, #16
 80125ac:	bd80      	pop	{r7, pc}

080125ae <decodeI2SdataLch>:
// Convert 24-bit I2S sound data into signed 32 bit numbers.
// The input I2S data are split across a uint16 array, and are left-channel only.
// inBuflen is simply the number of elements in inBuf
void decodeI2SdataLch(const uint16_t * inBuf, const uint32_t inBufLength,
                      int32_t * outBuf)
{
 80125ae:	b580      	push	{r7, lr}
 80125b0:	b086      	sub	sp, #24
 80125b2:	af00      	add	r7, sp, #0
 80125b4:	60f8      	str	r0, [r7, #12]
 80125b6:	60b9      	str	r1, [r7, #8]
 80125b8:	607a      	str	r2, [r7, #4]
    uint32_t outCount = 0;
 80125ba:	2300      	movs	r3, #0
 80125bc:	617b      	str	r3, [r7, #20]
    for (uint32_t i = 0; i < inBufLength; i += 4)
 80125be:	2300      	movs	r3, #0
 80125c0:	613b      	str	r3, [r7, #16]
 80125c2:	e019      	b.n	80125f8 <decodeI2SdataLch+0x4a>
    {
        // join MS16bits and LS16bits, then shift the result down 8 bits because
        // it is a 24-bit value, rather than a 32-bit one.
        outBuf[outCount] = ((int32_t) ((((uint32_t) inBuf[i]) << 16)
 80125c4:	693b      	ldr	r3, [r7, #16]
 80125c6:	005b      	lsls	r3, r3, #1
 80125c8:	68fa      	ldr	r2, [r7, #12]
 80125ca:	18d3      	adds	r3, r2, r3
 80125cc:	881b      	ldrh	r3, [r3, #0]
 80125ce:	041b      	lsls	r3, r3, #16
                                      | ((uint32_t) inBuf[i+1]))) >> 8;
 80125d0:	693a      	ldr	r2, [r7, #16]
 80125d2:	3201      	adds	r2, #1
 80125d4:	0052      	lsls	r2, r2, #1
 80125d6:	68f9      	ldr	r1, [r7, #12]
 80125d8:	188a      	adds	r2, r1, r2
 80125da:	8812      	ldrh	r2, [r2, #0]
 80125dc:	4313      	orrs	r3, r2
        outBuf[outCount] = ((int32_t) ((((uint32_t) inBuf[i]) << 16)
 80125de:	0019      	movs	r1, r3
 80125e0:	697b      	ldr	r3, [r7, #20]
 80125e2:	009b      	lsls	r3, r3, #2
 80125e4:	687a      	ldr	r2, [r7, #4]
 80125e6:	18d3      	adds	r3, r2, r3
                                      | ((uint32_t) inBuf[i+1]))) >> 8;
 80125e8:	120a      	asrs	r2, r1, #8
        outBuf[outCount] = ((int32_t) ((((uint32_t) inBuf[i]) << 16)
 80125ea:	601a      	str	r2, [r3, #0]
//          Info("input msw 0x%04X ", inBuf[i]);
//          Info("input lsw 0x%04X ", inBuf[i+1]);
//          Info("converted 0x%08X ", outBuf[outCount]);
//          Info("converted %d ", outBuf[outCount]);
//        }
        outCount++;
 80125ec:	697b      	ldr	r3, [r7, #20]
 80125ee:	3301      	adds	r3, #1
 80125f0:	617b      	str	r3, [r7, #20]
    for (uint32_t i = 0; i < inBufLength; i += 4)
 80125f2:	693b      	ldr	r3, [r7, #16]
 80125f4:	3304      	adds	r3, #4
 80125f6:	613b      	str	r3, [r7, #16]
 80125f8:	693a      	ldr	r2, [r7, #16]
 80125fa:	68bb      	ldr	r3, [r7, #8]
 80125fc:	429a      	cmp	r2, r3
 80125fe:	d3e1      	bcc.n	80125c4 <decodeI2SdataLch+0x16>
    }
//    Info("decodeI2SdataLch converted %d buffer elements", outCount);
}
 8012600:	46c0      	nop			@ (mov r8, r8)
 8012602:	46c0      	nop			@ (mov r8, r8)
 8012604:	46bd      	mov	sp, r7
 8012606:	b006      	add	sp, #24
 8012608:	bd80      	pop	{r7, pc}
	...

0801260c <InitDone>:
float batteryCharge = 0.0;
uint8_t batteryChargeMode;
Battery_Status batteryStatus;


void InitDone(){
 801260c:	b580      	push	{r7, lr}
 801260e:	af00      	add	r7, sp, #0
  init = false;
 8012610:	4b02      	ldr	r3, [pc, #8]	@ (801261c <InitDone+0x10>)
 8012612:	2200      	movs	r2, #0
 8012614:	701a      	strb	r2, [r3, #0]
}
 8012616:	46c0      	nop			@ (mov r8, r8)
 8012618:	46bd      	mov	sp, r7
 801261a:	bd80      	pop	{r7, pc}
 801261c:	200000e8 	.word	0x200000e8

08012620 <batteryChargeCheck>:
  "De Omgevingsmonitor" will refuse to upload data to openSenseMap.org if the battery voltage under load drops below 3.77V with SEN5x attached.
  Without a SEN5x attached the Omgevingsmonitor stops sending to OpenSenseMap at 3.75V
  Above values with standard battery
 */

void batteryChargeCheck(){
 8012620:	b5b0      	push	{r4, r5, r7, lr}
 8012622:	b084      	sub	sp, #16
 8012624:	af04      	add	r7, sp, #16
  batteryCharge = ReadBatteryVoltage();
 8012626:	f7f7 fa41 	bl	8009aac <ReadBatteryVoltage>
 801262a:	1c02      	adds	r2, r0, #0
 801262c:	4b2e      	ldr	r3, [pc, #184]	@ (80126e8 <batteryChargeCheck+0xc8>)
 801262e:	601a      	str	r2, [r3, #0]
  Debug("battery: %fV, solar %dmV", batteryCharge, ReadSolarVoltage());
 8012630:	4b2d      	ldr	r3, [pc, #180]	@ (80126e8 <batteryChargeCheck+0xc8>)
 8012632:	681b      	ldr	r3, [r3, #0]
 8012634:	1c18      	adds	r0, r3, #0
 8012636:	f7f1 f92d 	bl	8003894 <__aeabi_f2d>
 801263a:	0004      	movs	r4, r0
 801263c:	000d      	movs	r5, r1
 801263e:	f7f7 fa97 	bl	8009b70 <ReadSolarVoltage>
 8012642:	0003      	movs	r3, r0
 8012644:	0019      	movs	r1, r3
 8012646:	4a29      	ldr	r2, [pc, #164]	@ (80126ec <batteryChargeCheck+0xcc>)
 8012648:	4b29      	ldr	r3, [pc, #164]	@ (80126f0 <batteryChargeCheck+0xd0>)
 801264a:	9102      	str	r1, [sp, #8]
 801264c:	9400      	str	r4, [sp, #0]
 801264e:	9501      	str	r5, [sp, #4]
 8012650:	0019      	movs	r1, r3
 8012652:	2003      	movs	r0, #3
 8012654:	f001 fbf2 	bl	8013e3c <CreateLine>
#ifdef LARGEBATTERY
  if (batteryCharge < 3.50) {
#else
  if (batteryCharge < 3.75) {
 8012658:	4b23      	ldr	r3, [pc, #140]	@ (80126e8 <batteryChargeCheck+0xc8>)
 801265a:	681b      	ldr	r3, [r3, #0]
 801265c:	4925      	ldr	r1, [pc, #148]	@ (80126f4 <batteryChargeCheck+0xd4>)
 801265e:	1c18      	adds	r0, r3, #0
 8012660:	f7ed ff66 	bl	8000530 <__aeabi_fcmplt>
 8012664:	1e03      	subs	r3, r0, #0
 8012666:	d002      	beq.n	801266e <batteryChargeCheck+0x4e>
#endif
    batteryStatus = BATTERY_CRITICAL;
 8012668:	4b23      	ldr	r3, [pc, #140]	@ (80126f8 <batteryChargeCheck+0xd8>)
 801266a:	2200      	movs	r2, #0
 801266c:	701a      	strb	r2, [r3, #0]
  }
#ifdef LARGEBATTERY
  if (batteryCharge >= 3.50 && batteryCharge < 3.80) {
#else
  if (batteryCharge >= 3.75 && batteryCharge < 3.85) {
 801266e:	4b1e      	ldr	r3, [pc, #120]	@ (80126e8 <batteryChargeCheck+0xc8>)
 8012670:	681b      	ldr	r3, [r3, #0]
 8012672:	4920      	ldr	r1, [pc, #128]	@ (80126f4 <batteryChargeCheck+0xd4>)
 8012674:	1c18      	adds	r0, r3, #0
 8012676:	f7ed ff79 	bl	800056c <__aeabi_fcmpge>
 801267a:	1e03      	subs	r3, r0, #0
 801267c:	d00d      	beq.n	801269a <batteryChargeCheck+0x7a>
 801267e:	4b1a      	ldr	r3, [pc, #104]	@ (80126e8 <batteryChargeCheck+0xc8>)
 8012680:	681b      	ldr	r3, [r3, #0]
 8012682:	1c18      	adds	r0, r3, #0
 8012684:	f7f1 f906 	bl	8003894 <__aeabi_f2d>
 8012688:	4a1c      	ldr	r2, [pc, #112]	@ (80126fc <batteryChargeCheck+0xdc>)
 801268a:	4b1d      	ldr	r3, [pc, #116]	@ (8012700 <batteryChargeCheck+0xe0>)
 801268c:	f7ed ff16 	bl	80004bc <__aeabi_dcmplt>
 8012690:	1e03      	subs	r3, r0, #0
 8012692:	d002      	beq.n	801269a <batteryChargeCheck+0x7a>
#endif
    batteryStatus = BATTERY_LOW;
 8012694:	4b18      	ldr	r3, [pc, #96]	@ (80126f8 <batteryChargeCheck+0xd8>)
 8012696:	2201      	movs	r2, #1
 8012698:	701a      	strb	r2, [r3, #0]
  }
#ifdef LARGEBATTERY
  if (batteryCharge >= 3.80 && batteryCharge < 3.98) {
#else
    if (batteryCharge >= 3.85 && batteryCharge < 4.00) {
 801269a:	4b13      	ldr	r3, [pc, #76]	@ (80126e8 <batteryChargeCheck+0xc8>)
 801269c:	681b      	ldr	r3, [r3, #0]
 801269e:	1c18      	adds	r0, r3, #0
 80126a0:	f7f1 f8f8 	bl	8003894 <__aeabi_f2d>
 80126a4:	4a15      	ldr	r2, [pc, #84]	@ (80126fc <batteryChargeCheck+0xdc>)
 80126a6:	4b16      	ldr	r3, [pc, #88]	@ (8012700 <batteryChargeCheck+0xe0>)
 80126a8:	f7ed ff26 	bl	80004f8 <__aeabi_dcmpge>
 80126ac:	1e03      	subs	r3, r0, #0
 80126ae:	d00b      	beq.n	80126c8 <batteryChargeCheck+0xa8>
 80126b0:	4b0d      	ldr	r3, [pc, #52]	@ (80126e8 <batteryChargeCheck+0xc8>)
 80126b2:	681b      	ldr	r3, [r3, #0]
 80126b4:	2181      	movs	r1, #129	@ 0x81
 80126b6:	05c9      	lsls	r1, r1, #23
 80126b8:	1c18      	adds	r0, r3, #0
 80126ba:	f7ed ff39 	bl	8000530 <__aeabi_fcmplt>
 80126be:	1e03      	subs	r3, r0, #0
 80126c0:	d002      	beq.n	80126c8 <batteryChargeCheck+0xa8>
#endif
    batteryStatus = BATTERY_GOOD;
 80126c2:	4b0d      	ldr	r3, [pc, #52]	@ (80126f8 <batteryChargeCheck+0xd8>)
 80126c4:	2202      	movs	r2, #2
 80126c6:	701a      	strb	r2, [r3, #0]
  }
#ifdef LARGEBATTERY
  if (batteryCharge >= 3.98) {
#else
  if (batteryCharge >= 4.00) {
 80126c8:	4b07      	ldr	r3, [pc, #28]	@ (80126e8 <batteryChargeCheck+0xc8>)
 80126ca:	681b      	ldr	r3, [r3, #0]
 80126cc:	2181      	movs	r1, #129	@ 0x81
 80126ce:	05c9      	lsls	r1, r1, #23
 80126d0:	1c18      	adds	r0, r3, #0
 80126d2:	f7ed ff4b 	bl	800056c <__aeabi_fcmpge>
 80126d6:	1e03      	subs	r3, r0, #0
 80126d8:	d100      	bne.n	80126dc <batteryChargeCheck+0xbc>
#endif
    batteryStatus = BATTERY_FULL;
  }
}
 80126da:	e002      	b.n	80126e2 <batteryChargeCheck+0xc2>
    batteryStatus = BATTERY_FULL;
 80126dc:	4b06      	ldr	r3, [pc, #24]	@ (80126f8 <batteryChargeCheck+0xd8>)
 80126de:	2203      	movs	r2, #3
 80126e0:	701a      	strb	r2, [r3, #0]
}
 80126e2:	46c0      	nop			@ (mov r8, r8)
 80126e4:	46bd      	mov	sp, r7
 80126e6:	bdb0      	pop	{r4, r5, r7, pc}
 80126e8:	2000215c 	.word	0x2000215c
 80126ec:	0802d85c 	.word	0x0802d85c
 80126f0:	0802d878 	.word	0x0802d878
 80126f4:	40700000 	.word	0x40700000
 80126f8:	20002161 	.word	0x20002161
 80126fc:	cccccccd 	.word	0xcccccccd
 8012700:	400ecccc 	.word	0x400ecccc

08012704 <Calculate_LED_ON>:
  HAL_Delay(1000);
}
//====================
*/

uint16_t Calculate_LED_ON() {
 8012704:	b5b0      	push	{r4, r5, r7, lr}
 8012706:	af00      	add	r7, sp, #0
  static uint16_t solmV;
  solmV = ReadSolarVoltage();
 8012708:	f7f7 fa32 	bl	8009b70 <ReadSolarVoltage>
 801270c:	0003      	movs	r3, r0
 801270e:	001a      	movs	r2, r3
 8012710:	4b1a      	ldr	r3, [pc, #104]	@ (801277c <Calculate_LED_ON+0x78>)
 8012712:	801a      	strh	r2, [r3, #0]
  if (solmV < 2900) {
 8012714:	4b19      	ldr	r3, [pc, #100]	@ (801277c <Calculate_LED_ON+0x78>)
 8012716:	881b      	ldrh	r3, [r3, #0]
 8012718:	4a19      	ldr	r2, [pc, #100]	@ (8012780 <Calculate_LED_ON+0x7c>)
 801271a:	4293      	cmp	r3, r2
 801271c:	d802      	bhi.n	8012724 <Calculate_LED_ON+0x20>
    solmV = 2900;
 801271e:	4b17      	ldr	r3, [pc, #92]	@ (801277c <Calculate_LED_ON+0x78>)
 8012720:	4a18      	ldr	r2, [pc, #96]	@ (8012784 <Calculate_LED_ON+0x80>)
 8012722:	801a      	strh	r2, [r3, #0]
  }
  if (solmV > 4700) {
 8012724:	4b15      	ldr	r3, [pc, #84]	@ (801277c <Calculate_LED_ON+0x78>)
 8012726:	881b      	ldrh	r3, [r3, #0]
 8012728:	4a17      	ldr	r2, [pc, #92]	@ (8012788 <Calculate_LED_ON+0x84>)
 801272a:	4293      	cmp	r3, r2
 801272c:	d902      	bls.n	8012734 <Calculate_LED_ON+0x30>
    solmV = 4700;
 801272e:	4b13      	ldr	r3, [pc, #76]	@ (801277c <Calculate_LED_ON+0x78>)
 8012730:	4a15      	ldr	r2, [pc, #84]	@ (8012788 <Calculate_LED_ON+0x84>)
 8012732:	801a      	strh	r2, [r3, #0]
  }
  return (solmV+(3566-solmV)*1.5);
 8012734:	4b11      	ldr	r3, [pc, #68]	@ (801277c <Calculate_LED_ON+0x78>)
 8012736:	881b      	ldrh	r3, [r3, #0]
 8012738:	0018      	movs	r0, r3
 801273a:	f7f1 f859 	bl	80037f0 <__aeabi_i2d>
 801273e:	0004      	movs	r4, r0
 8012740:	000d      	movs	r5, r1
 8012742:	4b0e      	ldr	r3, [pc, #56]	@ (801277c <Calculate_LED_ON+0x78>)
 8012744:	881b      	ldrh	r3, [r3, #0]
 8012746:	001a      	movs	r2, r3
 8012748:	4b10      	ldr	r3, [pc, #64]	@ (801278c <Calculate_LED_ON+0x88>)
 801274a:	1a9b      	subs	r3, r3, r2
 801274c:	0018      	movs	r0, r3
 801274e:	f7f1 f84f 	bl	80037f0 <__aeabi_i2d>
 8012752:	2200      	movs	r2, #0
 8012754:	4b0e      	ldr	r3, [pc, #56]	@ (8012790 <Calculate_LED_ON+0x8c>)
 8012756:	f7f0 f8fd 	bl	8002954 <__aeabi_dmul>
 801275a:	0002      	movs	r2, r0
 801275c:	000b      	movs	r3, r1
 801275e:	0020      	movs	r0, r4
 8012760:	0029      	movs	r1, r5
 8012762:	f7ef f8f7 	bl	8001954 <__aeabi_dadd>
 8012766:	0002      	movs	r2, r0
 8012768:	000b      	movs	r3, r1
 801276a:	0010      	movs	r0, r2
 801276c:	0019      	movs	r1, r3
 801276e:	f7ed ff6d 	bl	800064c <__aeabi_d2uiz>
 8012772:	0003      	movs	r3, r0
 8012774:	b29b      	uxth	r3, r3
}
 8012776:	0018      	movs	r0, r3
 8012778:	46bd      	mov	sp, r7
 801277a:	bdb0      	pop	{r4, r5, r7, pc}
 801277c:	20002162 	.word	0x20002162
 8012780:	00000b53 	.word	0x00000b53
 8012784:	00000b54 	.word	0x00000b54
 8012788:	0000125c 	.word	0x0000125c
 801278c:	00000dee 	.word	0x00000dee
 8012790:	3ff80000 	.word	0x3ff80000

08012794 <SetStatusLED>:

void SetStatusLED(uint16_t red, uint16_t green, uint16_t blue){
 8012794:	b590      	push	{r4, r7, lr}
 8012796:	b083      	sub	sp, #12
 8012798:	af00      	add	r7, sp, #0
 801279a:	0004      	movs	r4, r0
 801279c:	0008      	movs	r0, r1
 801279e:	0011      	movs	r1, r2
 80127a0:	1dbb      	adds	r3, r7, #6
 80127a2:	1c22      	adds	r2, r4, #0
 80127a4:	801a      	strh	r2, [r3, #0]
 80127a6:	1d3b      	adds	r3, r7, #4
 80127a8:	1c02      	adds	r2, r0, #0
 80127aa:	801a      	strh	r2, [r3, #0]
 80127ac:	1cbb      	adds	r3, r7, #2
 80127ae:	1c0a      	adds	r2, r1, #0
 80127b0:	801a      	strh	r2, [r3, #0]
  if(usbPluggedIn || init || userToggle){
 80127b2:	4b0f      	ldr	r3, [pc, #60]	@ (80127f0 <SetStatusLED+0x5c>)
 80127b4:	781b      	ldrb	r3, [r3, #0]
 80127b6:	2b00      	cmp	r3, #0
 80127b8:	d107      	bne.n	80127ca <SetStatusLED+0x36>
 80127ba:	4b0e      	ldr	r3, [pc, #56]	@ (80127f4 <SetStatusLED+0x60>)
 80127bc:	781b      	ldrb	r3, [r3, #0]
 80127be:	2b00      	cmp	r3, #0
 80127c0:	d103      	bne.n	80127ca <SetStatusLED+0x36>
 80127c2:	4b0d      	ldr	r3, [pc, #52]	@ (80127f8 <SetStatusLED+0x64>)
 80127c4:	781b      	ldrb	r3, [r3, #0]
 80127c6:	2b00      	cmp	r3, #0
 80127c8:	d00e      	beq.n	80127e8 <SetStatusLED+0x54>
    TIM2 -> CCR1 = red;
 80127ca:	2380      	movs	r3, #128	@ 0x80
 80127cc:	05db      	lsls	r3, r3, #23
 80127ce:	1dba      	adds	r2, r7, #6
 80127d0:	8812      	ldrh	r2, [r2, #0]
 80127d2:	635a      	str	r2, [r3, #52]	@ 0x34
    TIM2 -> CCR3 = green;
 80127d4:	2380      	movs	r3, #128	@ 0x80
 80127d6:	05db      	lsls	r3, r3, #23
 80127d8:	1d3a      	adds	r2, r7, #4
 80127da:	8812      	ldrh	r2, [r2, #0]
 80127dc:	63da      	str	r2, [r3, #60]	@ 0x3c
    TIM2 -> CCR4 = blue;
 80127de:	2380      	movs	r3, #128	@ 0x80
 80127e0:	05db      	lsls	r3, r3, #23
 80127e2:	1cba      	adds	r2, r7, #2
 80127e4:	8812      	ldrh	r2, [r2, #0]
 80127e6:	641a      	str	r2, [r3, #64]	@ 0x40
  }
}
 80127e8:	46c0      	nop			@ (mov r8, r8)
 80127ea:	46bd      	mov	sp, r7
 80127ec:	b003      	add	sp, #12
 80127ee:	bd90      	pop	{r4, r7, pc}
 80127f0:	2000214d 	.word	0x2000214d
 80127f4:	200000e8 	.word	0x200000e8
 80127f8:	2000214e 	.word	0x2000214e

080127fc <SetDBLED>:

// Sets dB LED to (RGB) color
void SetDBLED(bool red, bool green, bool blue){
 80127fc:	b590      	push	{r4, r7, lr}
 80127fe:	b083      	sub	sp, #12
 8012800:	af00      	add	r7, sp, #0
 8012802:	0004      	movs	r4, r0
 8012804:	0008      	movs	r0, r1
 8012806:	0011      	movs	r1, r2
 8012808:	1dfb      	adds	r3, r7, #7
 801280a:	1c22      	adds	r2, r4, #0
 801280c:	701a      	strb	r2, [r3, #0]
 801280e:	1dbb      	adds	r3, r7, #6
 8012810:	1c02      	adds	r2, r0, #0
 8012812:	701a      	strb	r2, [r3, #0]
 8012814:	1d7b      	adds	r3, r7, #5
 8012816:	1c0a      	adds	r2, r1, #0
 8012818:	701a      	strb	r2, [r3, #0]
  // RED LED
  if(usbPluggedIn || init || userToggle){
 801281a:	4b19      	ldr	r3, [pc, #100]	@ (8012880 <SetDBLED+0x84>)
 801281c:	781b      	ldrb	r3, [r3, #0]
 801281e:	2b00      	cmp	r3, #0
 8012820:	d107      	bne.n	8012832 <SetDBLED+0x36>
 8012822:	4b18      	ldr	r3, [pc, #96]	@ (8012884 <SetDBLED+0x88>)
 8012824:	781b      	ldrb	r3, [r3, #0]
 8012826:	2b00      	cmp	r3, #0
 8012828:	d103      	bne.n	8012832 <SetDBLED+0x36>
 801282a:	4b17      	ldr	r3, [pc, #92]	@ (8012888 <SetDBLED+0x8c>)
 801282c:	781b      	ldrb	r3, [r3, #0]
 801282e:	2b00      	cmp	r3, #0
 8012830:	d022      	beq.n	8012878 <SetDBLED+0x7c>
    HAL_GPIO_WritePin(MCU_LED_C_R_GPIO_Port, MCU_LED_C_R_Pin, !red);
 8012832:	1dfb      	adds	r3, r7, #7
 8012834:	781b      	ldrb	r3, [r3, #0]
 8012836:	2201      	movs	r2, #1
 8012838:	4053      	eors	r3, r2
 801283a:	b2db      	uxtb	r3, r3
 801283c:	001a      	movs	r2, r3
 801283e:	4b13      	ldr	r3, [pc, #76]	@ (801288c <SetDBLED+0x90>)
 8012840:	2101      	movs	r1, #1
 8012842:	0018      	movs	r0, r3
 8012844:	f003 fae5 	bl	8015e12 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MCU_LED_C_G_GPIO_Port, MCU_LED_C_G_Pin, !green);
 8012848:	1dbb      	adds	r3, r7, #6
 801284a:	781b      	ldrb	r3, [r3, #0]
 801284c:	2201      	movs	r2, #1
 801284e:	4053      	eors	r3, r2
 8012850:	b2db      	uxtb	r3, r3
 8012852:	001a      	movs	r2, r3
 8012854:	2380      	movs	r3, #128	@ 0x80
 8012856:	005b      	lsls	r3, r3, #1
 8012858:	480c      	ldr	r0, [pc, #48]	@ (801288c <SetDBLED+0x90>)
 801285a:	0019      	movs	r1, r3
 801285c:	f003 fad9 	bl	8015e12 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MCU_LED_C_B_GPIO_Port, MCU_LED_C_B_Pin, !blue);
 8012860:	1d7b      	adds	r3, r7, #5
 8012862:	781b      	ldrb	r3, [r3, #0]
 8012864:	2201      	movs	r2, #1
 8012866:	4053      	eors	r3, r2
 8012868:	b2db      	uxtb	r3, r3
 801286a:	001a      	movs	r2, r3
 801286c:	2380      	movs	r3, #128	@ 0x80
 801286e:	009b      	lsls	r3, r3, #2
 8012870:	4806      	ldr	r0, [pc, #24]	@ (801288c <SetDBLED+0x90>)
 8012872:	0019      	movs	r1, r3
 8012874:	f003 facd 	bl	8015e12 <HAL_GPIO_WritePin>
  }
}
 8012878:	46c0      	nop			@ (mov r8, r8)
 801287a:	46bd      	mov	sp, r7
 801287c:	b003      	add	sp, #12
 801287e:	bd90      	pop	{r4, r7, pc}
 8012880:	2000214d 	.word	0x2000214d
 8012884:	200000e8 	.word	0x200000e8
 8012888:	2000214e 	.word	0x2000214e
 801288c:	50000400 	.word	0x50000400

08012890 <SetVocLED>:

// Sets VOC LED to (RGB) color
void SetVocLED(uint16_t red, uint16_t green, uint16_t blue){
 8012890:	b590      	push	{r4, r7, lr}
 8012892:	b083      	sub	sp, #12
 8012894:	af00      	add	r7, sp, #0
 8012896:	0004      	movs	r4, r0
 8012898:	0008      	movs	r0, r1
 801289a:	0011      	movs	r1, r2
 801289c:	1dbb      	adds	r3, r7, #6
 801289e:	1c22      	adds	r2, r4, #0
 80128a0:	801a      	strh	r2, [r3, #0]
 80128a2:	1d3b      	adds	r3, r7, #4
 80128a4:	1c02      	adds	r2, r0, #0
 80128a6:	801a      	strh	r2, [r3, #0]
 80128a8:	1cbb      	adds	r3, r7, #2
 80128aa:	1c0a      	adds	r2, r1, #0
 80128ac:	801a      	strh	r2, [r3, #0]
  if(usbPluggedIn || init || userToggle){
 80128ae:	4b0e      	ldr	r3, [pc, #56]	@ (80128e8 <SetVocLED+0x58>)
 80128b0:	781b      	ldrb	r3, [r3, #0]
 80128b2:	2b00      	cmp	r3, #0
 80128b4:	d107      	bne.n	80128c6 <SetVocLED+0x36>
 80128b6:	4b0d      	ldr	r3, [pc, #52]	@ (80128ec <SetVocLED+0x5c>)
 80128b8:	781b      	ldrb	r3, [r3, #0]
 80128ba:	2b00      	cmp	r3, #0
 80128bc:	d103      	bne.n	80128c6 <SetVocLED+0x36>
 80128be:	4b0c      	ldr	r3, [pc, #48]	@ (80128f0 <SetVocLED+0x60>)
 80128c0:	781b      	ldrb	r3, [r3, #0]
 80128c2:	2b00      	cmp	r3, #0
 80128c4:	d00b      	beq.n	80128de <SetVocLED+0x4e>
    TIM3 -> CCR1 = red;
 80128c6:	4b0b      	ldr	r3, [pc, #44]	@ (80128f4 <SetVocLED+0x64>)
 80128c8:	1dba      	adds	r2, r7, #6
 80128ca:	8812      	ldrh	r2, [r2, #0]
 80128cc:	635a      	str	r2, [r3, #52]	@ 0x34
    TIM3 -> CCR2 = green;
 80128ce:	4b09      	ldr	r3, [pc, #36]	@ (80128f4 <SetVocLED+0x64>)
 80128d0:	1d3a      	adds	r2, r7, #4
 80128d2:	8812      	ldrh	r2, [r2, #0]
 80128d4:	639a      	str	r2, [r3, #56]	@ 0x38
    TIM3 -> CCR3 = blue;
 80128d6:	4b07      	ldr	r3, [pc, #28]	@ (80128f4 <SetVocLED+0x64>)
 80128d8:	1cba      	adds	r2, r7, #2
 80128da:	8812      	ldrh	r2, [r2, #0]
 80128dc:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
}
 80128de:	46c0      	nop			@ (mov r8, r8)
 80128e0:	46bd      	mov	sp, r7
 80128e2:	b003      	add	sp, #12
 80128e4:	bd90      	pop	{r4, r7, pc}
 80128e6:	46c0      	nop			@ (mov r8, r8)
 80128e8:	2000214d 	.word	0x2000214d
 80128ec:	200000e8 	.word	0x200000e8
 80128f0:	2000214e 	.word	0x2000214e
 80128f4:	40000400 	.word	0x40000400

080128f8 <SetMeasurementIndicator>:

void SetMeasurementIndicator(){
 80128f8:	b580      	push	{r7, lr}
 80128fa:	af00      	add	r7, sp, #0
  if(usbPluggedIn||userToggle){
 80128fc:	4b08      	ldr	r3, [pc, #32]	@ (8012920 <SetMeasurementIndicator+0x28>)
 80128fe:	781b      	ldrb	r3, [r3, #0]
 8012900:	2b00      	cmp	r3, #0
 8012902:	d103      	bne.n	801290c <SetMeasurementIndicator+0x14>
 8012904:	4b07      	ldr	r3, [pc, #28]	@ (8012924 <SetMeasurementIndicator+0x2c>)
 8012906:	781b      	ldrb	r3, [r3, #0]
 8012908:	2b00      	cmp	r3, #0
 801290a:	d006      	beq.n	801291a <SetMeasurementIndicator+0x22>
    TIM2 -> CCR3 = Calculate_LED_ON();
 801290c:	f7ff fefa 	bl	8012704 <Calculate_LED_ON>
 8012910:	0003      	movs	r3, r0
 8012912:	001a      	movs	r2, r3
 8012914:	2380      	movs	r3, #128	@ 0x80
 8012916:	05db      	lsls	r3, r3, #23
 8012918:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
}
 801291a:	46c0      	nop			@ (mov r8, r8)
 801291c:	46bd      	mov	sp, r7
 801291e:	bd80      	pop	{r7, pc}
 8012920:	2000214d 	.word	0x2000214d
 8012924:	2000214e 	.word	0x2000214e

08012928 <ResetMeasurementIndicator>:
void ResetMeasurementIndicator(){
 8012928:	b580      	push	{r7, lr}
 801292a:	af00      	add	r7, sp, #0
  if(usbPluggedIn||userToggle){
 801292c:	4b07      	ldr	r3, [pc, #28]	@ (801294c <ResetMeasurementIndicator+0x24>)
 801292e:	781b      	ldrb	r3, [r3, #0]
 8012930:	2b00      	cmp	r3, #0
 8012932:	d103      	bne.n	801293c <ResetMeasurementIndicator+0x14>
 8012934:	4b06      	ldr	r3, [pc, #24]	@ (8012950 <ResetMeasurementIndicator+0x28>)
 8012936:	781b      	ldrb	r3, [r3, #0]
 8012938:	2b00      	cmp	r3, #0
 801293a:	d004      	beq.n	8012946 <ResetMeasurementIndicator+0x1e>
    TIM2 -> CCR3 = LED_OFF;
 801293c:	2380      	movs	r3, #128	@ 0x80
 801293e:	05db      	lsls	r3, r3, #23
 8012940:	22fa      	movs	r2, #250	@ 0xfa
 8012942:	0112      	lsls	r2, r2, #4
 8012944:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
}
 8012946:	46c0      	nop			@ (mov r8, r8)
 8012948:	46bd      	mov	sp, r7
 801294a:	bd80      	pop	{r7, pc}
 801294c:	2000214d 	.word	0x2000214d
 8012950:	2000214e 	.word	0x2000214e

08012954 <SetMICIndicator>:
void SetMICIndicator(){
 8012954:	b580      	push	{r7, lr}
 8012956:	af00      	add	r7, sp, #0
  if(usbPluggedIn||userToggle){
 8012958:	4b19      	ldr	r3, [pc, #100]	@ (80129c0 <SetMICIndicator+0x6c>)
 801295a:	781b      	ldrb	r3, [r3, #0]
 801295c:	2b00      	cmp	r3, #0
 801295e:	d103      	bne.n	8012968 <SetMICIndicator+0x14>
 8012960:	4b18      	ldr	r3, [pc, #96]	@ (80129c4 <SetMICIndicator+0x70>)
 8012962:	781b      	ldrb	r3, [r3, #0]
 8012964:	2b00      	cmp	r3, #0
 8012966:	d007      	beq.n	8012978 <SetMICIndicator+0x24>
    TIM2 -> CCR1 = Calculate_LED_ON();
 8012968:	f7ff fecc 	bl	8012704 <Calculate_LED_ON>
 801296c:	0003      	movs	r3, r0
 801296e:	001a      	movs	r2, r3
 8012970:	2380      	movs	r3, #128	@ 0x80
 8012972:	05db      	lsls	r3, r3, #23
 8012974:	635a      	str	r2, [r3, #52]	@ 0x34
    else {
      TIM2 -> CCR1 = Calculate_LED_ON();
      usedMicLEDcolor = LED_RED;
    }
  }
}
 8012976:	e01f      	b.n	80129b8 <SetMICIndicator+0x64>
    if (batteryCharge > 3.7) {
 8012978:	4b13      	ldr	r3, [pc, #76]	@ (80129c8 <SetMICIndicator+0x74>)
 801297a:	681b      	ldr	r3, [r3, #0]
 801297c:	1c18      	adds	r0, r3, #0
 801297e:	f7f0 ff89 	bl	8003894 <__aeabi_f2d>
 8012982:	4a12      	ldr	r2, [pc, #72]	@ (80129cc <SetMICIndicator+0x78>)
 8012984:	4b12      	ldr	r3, [pc, #72]	@ (80129d0 <SetMICIndicator+0x7c>)
 8012986:	f7ed fdad 	bl	80004e4 <__aeabi_dcmpgt>
 801298a:	1e03      	subs	r3, r0, #0
 801298c:	d00a      	beq.n	80129a4 <SetMICIndicator+0x50>
      TIM2 -> CCR3 = Calculate_LED_ON();
 801298e:	f7ff feb9 	bl	8012704 <Calculate_LED_ON>
 8012992:	0003      	movs	r3, r0
 8012994:	001a      	movs	r2, r3
 8012996:	2380      	movs	r3, #128	@ 0x80
 8012998:	05db      	lsls	r3, r3, #23
 801299a:	63da      	str	r2, [r3, #60]	@ 0x3c
      usedMicLEDcolor = LED_GREEN;
 801299c:	4b0d      	ldr	r3, [pc, #52]	@ (80129d4 <SetMICIndicator+0x80>)
 801299e:	2202      	movs	r2, #2
 80129a0:	701a      	strb	r2, [r3, #0]
}
 80129a2:	e009      	b.n	80129b8 <SetMICIndicator+0x64>
      TIM2 -> CCR1 = Calculate_LED_ON();
 80129a4:	f7ff feae 	bl	8012704 <Calculate_LED_ON>
 80129a8:	0003      	movs	r3, r0
 80129aa:	001a      	movs	r2, r3
 80129ac:	2380      	movs	r3, #128	@ 0x80
 80129ae:	05db      	lsls	r3, r3, #23
 80129b0:	635a      	str	r2, [r3, #52]	@ 0x34
      usedMicLEDcolor = LED_RED;
 80129b2:	4b08      	ldr	r3, [pc, #32]	@ (80129d4 <SetMICIndicator+0x80>)
 80129b4:	2201      	movs	r2, #1
 80129b6:	701a      	strb	r2, [r3, #0]
}
 80129b8:	46c0      	nop			@ (mov r8, r8)
 80129ba:	46bd      	mov	sp, r7
 80129bc:	bd80      	pop	{r7, pc}
 80129be:	46c0      	nop			@ (mov r8, r8)
 80129c0:	2000214d 	.word	0x2000214d
 80129c4:	2000214e 	.word	0x2000214e
 80129c8:	2000215c 	.word	0x2000215c
 80129cc:	9999999a 	.word	0x9999999a
 80129d0:	400d9999 	.word	0x400d9999
 80129d4:	20002150 	.word	0x20002150

080129d8 <ResetMICIndicator>:
void ResetMICIndicator(){
 80129d8:	b580      	push	{r7, lr}
 80129da:	af00      	add	r7, sp, #0
  if(usbPluggedIn||userToggle){
 80129dc:	4b0f      	ldr	r3, [pc, #60]	@ (8012a1c <ResetMICIndicator+0x44>)
 80129de:	781b      	ldrb	r3, [r3, #0]
 80129e0:	2b00      	cmp	r3, #0
 80129e2:	d103      	bne.n	80129ec <ResetMICIndicator+0x14>
 80129e4:	4b0e      	ldr	r3, [pc, #56]	@ (8012a20 <ResetMICIndicator+0x48>)
 80129e6:	781b      	ldrb	r3, [r3, #0]
 80129e8:	2b00      	cmp	r3, #0
 80129ea:	d005      	beq.n	80129f8 <ResetMICIndicator+0x20>
    TIM2 -> CCR1 = LED_OFF;
 80129ec:	2380      	movs	r3, #128	@ 0x80
 80129ee:	05db      	lsls	r3, r3, #23
 80129f0:	22fa      	movs	r2, #250	@ 0xfa
 80129f2:	0112      	lsls	r2, r2, #4
 80129f4:	635a      	str	r2, [r3, #52]	@ 0x34
    }
    else {
      TIM2 -> CCR1 = LED_OFF;
    }
  }
}
 80129f6:	e00e      	b.n	8012a16 <ResetMICIndicator+0x3e>
    if (usedMicLEDcolor == LED_GREEN) {
 80129f8:	4b0a      	ldr	r3, [pc, #40]	@ (8012a24 <ResetMICIndicator+0x4c>)
 80129fa:	781b      	ldrb	r3, [r3, #0]
 80129fc:	2b02      	cmp	r3, #2
 80129fe:	d105      	bne.n	8012a0c <ResetMICIndicator+0x34>
      TIM2 -> CCR3 = LED_OFF;
 8012a00:	2380      	movs	r3, #128	@ 0x80
 8012a02:	05db      	lsls	r3, r3, #23
 8012a04:	22fa      	movs	r2, #250	@ 0xfa
 8012a06:	0112      	lsls	r2, r2, #4
 8012a08:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8012a0a:	e004      	b.n	8012a16 <ResetMICIndicator+0x3e>
      TIM2 -> CCR1 = LED_OFF;
 8012a0c:	2380      	movs	r3, #128	@ 0x80
 8012a0e:	05db      	lsls	r3, r3, #23
 8012a10:	22fa      	movs	r2, #250	@ 0xfa
 8012a12:	0112      	lsls	r2, r2, #4
 8012a14:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8012a16:	46c0      	nop			@ (mov r8, r8)
 8012a18:	46bd      	mov	sp, r7
 8012a1a:	bd80      	pop	{r7, pc}
 8012a1c:	2000214d 	.word	0x2000214d
 8012a20:	2000214e 	.word	0x2000214e
 8012a24:	20002150 	.word	0x20002150

08012a28 <SetESPIndicator>:
void SetESPIndicator(){
 8012a28:	b580      	push	{r7, lr}
 8012a2a:	af00      	add	r7, sp, #0
  if(usbPluggedIn||userToggle){
 8012a2c:	4b08      	ldr	r3, [pc, #32]	@ (8012a50 <SetESPIndicator+0x28>)
 8012a2e:	781b      	ldrb	r3, [r3, #0]
 8012a30:	2b00      	cmp	r3, #0
 8012a32:	d103      	bne.n	8012a3c <SetESPIndicator+0x14>
 8012a34:	4b07      	ldr	r3, [pc, #28]	@ (8012a54 <SetESPIndicator+0x2c>)
 8012a36:	781b      	ldrb	r3, [r3, #0]
 8012a38:	2b00      	cmp	r3, #0
 8012a3a:	d006      	beq.n	8012a4a <SetESPIndicator+0x22>
    TIM2 -> CCR4 = Calculate_LED_ON();
 8012a3c:	f7ff fe62 	bl	8012704 <Calculate_LED_ON>
 8012a40:	0003      	movs	r3, r0
 8012a42:	001a      	movs	r2, r3
 8012a44:	2380      	movs	r3, #128	@ 0x80
 8012a46:	05db      	lsls	r3, r3, #23
 8012a48:	641a      	str	r2, [r3, #64]	@ 0x40
  }
}
 8012a4a:	46c0      	nop			@ (mov r8, r8)
 8012a4c:	46bd      	mov	sp, r7
 8012a4e:	bd80      	pop	{r7, pc}
 8012a50:	2000214d 	.word	0x2000214d
 8012a54:	2000214e 	.word	0x2000214e

08012a58 <ResetESPIndicator>:
void ResetESPIndicator(){
 8012a58:	b580      	push	{r7, lr}
 8012a5a:	af00      	add	r7, sp, #0
  if(usbPluggedIn||userToggle){
 8012a5c:	4b07      	ldr	r3, [pc, #28]	@ (8012a7c <ResetESPIndicator+0x24>)
 8012a5e:	781b      	ldrb	r3, [r3, #0]
 8012a60:	2b00      	cmp	r3, #0
 8012a62:	d103      	bne.n	8012a6c <ResetESPIndicator+0x14>
 8012a64:	4b06      	ldr	r3, [pc, #24]	@ (8012a80 <ResetESPIndicator+0x28>)
 8012a66:	781b      	ldrb	r3, [r3, #0]
 8012a68:	2b00      	cmp	r3, #0
 8012a6a:	d004      	beq.n	8012a76 <ResetESPIndicator+0x1e>
    TIM2 -> CCR4 = LED_OFF;
 8012a6c:	2380      	movs	r3, #128	@ 0x80
 8012a6e:	05db      	lsls	r3, r3, #23
 8012a70:	22fa      	movs	r2, #250	@ 0xfa
 8012a72:	0112      	lsls	r2, r2, #4
 8012a74:	641a      	str	r2, [r3, #64]	@ 0x40
  }
}
 8012a76:	46c0      	nop			@ (mov r8, r8)
 8012a78:	46bd      	mov	sp, r7
 8012a7a:	bd80      	pop	{r7, pc}
 8012a7c:	2000214d 	.word	0x2000214d
 8012a80:	2000214e 	.word	0x2000214e

08012a84 <SetPMIndicator>:

void SetPMIndicator() {
 8012a84:	b580      	push	{r7, lr}
 8012a86:	af00      	add	r7, sp, #0
  if(usbPluggedIn||userToggle){
 8012a88:	4b0f      	ldr	r3, [pc, #60]	@ (8012ac8 <SetPMIndicator+0x44>)
 8012a8a:	781b      	ldrb	r3, [r3, #0]
 8012a8c:	2b00      	cmp	r3, #0
 8012a8e:	d103      	bne.n	8012a98 <SetPMIndicator+0x14>
 8012a90:	4b0e      	ldr	r3, [pc, #56]	@ (8012acc <SetPMIndicator+0x48>)
 8012a92:	781b      	ldrb	r3, [r3, #0]
 8012a94:	2b00      	cmp	r3, #0
 8012a96:	d014      	beq.n	8012ac2 <SetPMIndicator+0x3e>
    TIM2 -> CCR4 = Calculate_LED_ON();
 8012a98:	f7ff fe34 	bl	8012704 <Calculate_LED_ON>
 8012a9c:	0003      	movs	r3, r0
 8012a9e:	001a      	movs	r2, r3
 8012aa0:	2380      	movs	r3, #128	@ 0x80
 8012aa2:	05db      	lsls	r3, r3, #23
 8012aa4:	641a      	str	r2, [r3, #64]	@ 0x40
    TIM2 -> CCR1 = Calculate_LED_ON();
 8012aa6:	f7ff fe2d 	bl	8012704 <Calculate_LED_ON>
 8012aaa:	0003      	movs	r3, r0
 8012aac:	001a      	movs	r2, r3
 8012aae:	2380      	movs	r3, #128	@ 0x80
 8012ab0:	05db      	lsls	r3, r3, #23
 8012ab2:	635a      	str	r2, [r3, #52]	@ 0x34
    TIM2 -> CCR3 = Calculate_LED_ON();
 8012ab4:	f7ff fe26 	bl	8012704 <Calculate_LED_ON>
 8012ab8:	0003      	movs	r3, r0
 8012aba:	001a      	movs	r2, r3
 8012abc:	2380      	movs	r3, #128	@ 0x80
 8012abe:	05db      	lsls	r3, r3, #23
 8012ac0:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
}
 8012ac2:	46c0      	nop			@ (mov r8, r8)
 8012ac4:	46bd      	mov	sp, r7
 8012ac6:	bd80      	pop	{r7, pc}
 8012ac8:	2000214d 	.word	0x2000214d
 8012acc:	2000214e 	.word	0x2000214e

08012ad0 <ResetPMIndicator>:

void ResetPMIndicator() {
 8012ad0:	b580      	push	{r7, lr}
 8012ad2:	af00      	add	r7, sp, #0
  if(usbPluggedIn||userToggle){
 8012ad4:	4b0c      	ldr	r3, [pc, #48]	@ (8012b08 <ResetPMIndicator+0x38>)
 8012ad6:	781b      	ldrb	r3, [r3, #0]
 8012ad8:	2b00      	cmp	r3, #0
 8012ada:	d103      	bne.n	8012ae4 <ResetPMIndicator+0x14>
 8012adc:	4b0b      	ldr	r3, [pc, #44]	@ (8012b0c <ResetPMIndicator+0x3c>)
 8012ade:	781b      	ldrb	r3, [r3, #0]
 8012ae0:	2b00      	cmp	r3, #0
 8012ae2:	d00e      	beq.n	8012b02 <ResetPMIndicator+0x32>
    TIM2 -> CCR4 = LED_OFF;
 8012ae4:	2380      	movs	r3, #128	@ 0x80
 8012ae6:	05db      	lsls	r3, r3, #23
 8012ae8:	22fa      	movs	r2, #250	@ 0xfa
 8012aea:	0112      	lsls	r2, r2, #4
 8012aec:	641a      	str	r2, [r3, #64]	@ 0x40
    TIM2 -> CCR1 = LED_OFF;
 8012aee:	2380      	movs	r3, #128	@ 0x80
 8012af0:	05db      	lsls	r3, r3, #23
 8012af2:	22fa      	movs	r2, #250	@ 0xfa
 8012af4:	0112      	lsls	r2, r2, #4
 8012af6:	635a      	str	r2, [r3, #52]	@ 0x34
    TIM2 -> CCR3 = LED_OFF;
 8012af8:	2380      	movs	r3, #128	@ 0x80
 8012afa:	05db      	lsls	r3, r3, #23
 8012afc:	22fa      	movs	r2, #250	@ 0xfa
 8012afe:	0112      	lsls	r2, r2, #4
 8012b00:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
}
 8012b02:	46c0      	nop			@ (mov r8, r8)
 8012b04:	46bd      	mov	sp, r7
 8012b06:	bd80      	pop	{r7, pc}
 8012b08:	2000214d 	.word	0x2000214d
 8012b0c:	2000214e 	.word	0x2000214e

08012b10 <SetLEDsOff>:

// Sets all LEDs Off
void SetLEDsOff() {
 8012b10:	b580      	push	{r7, lr}
 8012b12:	af00      	add	r7, sp, #0
  SetStatusLED(LED_OFF,LED_OFF,LED_OFF);
 8012b14:	23fa      	movs	r3, #250	@ 0xfa
 8012b16:	011a      	lsls	r2, r3, #4
 8012b18:	23fa      	movs	r3, #250	@ 0xfa
 8012b1a:	0119      	lsls	r1, r3, #4
 8012b1c:	23fa      	movs	r3, #250	@ 0xfa
 8012b1e:	011b      	lsls	r3, r3, #4
 8012b20:	0018      	movs	r0, r3
 8012b22:	f7ff fe37 	bl	8012794 <SetStatusLED>
  SetDBLED(false,false,false);
 8012b26:	2200      	movs	r2, #0
 8012b28:	2100      	movs	r1, #0
 8012b2a:	2000      	movs	r0, #0
 8012b2c:	f7ff fe66 	bl	80127fc <SetDBLED>
  SetVocLED(LED_OFF,LED_OFF,LED_OFF);
 8012b30:	23fa      	movs	r3, #250	@ 0xfa
 8012b32:	011a      	lsls	r2, r3, #4
 8012b34:	23fa      	movs	r3, #250	@ 0xfa
 8012b36:	0119      	lsls	r1, r3, #4
 8012b38:	23fa      	movs	r3, #250	@ 0xfa
 8012b3a:	011b      	lsls	r3, r3, #4
 8012b3c:	0018      	movs	r0, r3
 8012b3e:	f7ff fea7 	bl	8012890 <SetVocLED>
return;
 8012b42:	46c0      	nop			@ (mov r8, r8)
}
 8012b44:	46bd      	mov	sp, r7
 8012b46:	bd80      	pop	{r7, pc}

08012b48 <SetAllREDLED>:

void SetAllREDLED() {
 8012b48:	b580      	push	{r7, lr}
 8012b4a:	af00      	add	r7, sp, #0
// Fire all LEDs to red independent of usertoggle or power status and reboot
  SetLEDsOff();
 8012b4c:	f7ff ffe0 	bl	8012b10 <SetLEDsOff>
  TIM2 -> CCR1 = LED_ON;
 8012b50:	2380      	movs	r3, #128	@ 0x80
 8012b52:	05db      	lsls	r3, r3, #23
 8012b54:	4a20      	ldr	r2, [pc, #128]	@ (8012bd8 <SetAllREDLED+0x90>)
 8012b56:	635a      	str	r2, [r3, #52]	@ 0x34
  TIM2 -> CCR3 = LED_OFF;
 8012b58:	2380      	movs	r3, #128	@ 0x80
 8012b5a:	05db      	lsls	r3, r3, #23
 8012b5c:	22fa      	movs	r2, #250	@ 0xfa
 8012b5e:	0112      	lsls	r2, r2, #4
 8012b60:	63da      	str	r2, [r3, #60]	@ 0x3c
  TIM2 -> CCR4 = LED_OFF;
 8012b62:	2380      	movs	r3, #128	@ 0x80
 8012b64:	05db      	lsls	r3, r3, #23
 8012b66:	22fa      	movs	r2, #250	@ 0xfa
 8012b68:	0112      	lsls	r2, r2, #4
 8012b6a:	641a      	str	r2, [r3, #64]	@ 0x40
  TIM3 -> CCR1 = LED_ON;
 8012b6c:	4b1b      	ldr	r3, [pc, #108]	@ (8012bdc <SetAllREDLED+0x94>)
 8012b6e:	4a1a      	ldr	r2, [pc, #104]	@ (8012bd8 <SetAllREDLED+0x90>)
 8012b70:	635a      	str	r2, [r3, #52]	@ 0x34
  TIM3 -> CCR2 = LED_OFF;
 8012b72:	4b1a      	ldr	r3, [pc, #104]	@ (8012bdc <SetAllREDLED+0x94>)
 8012b74:	22fa      	movs	r2, #250	@ 0xfa
 8012b76:	0112      	lsls	r2, r2, #4
 8012b78:	639a      	str	r2, [r3, #56]	@ 0x38
  TIM3 -> CCR3 = LED_OFF;
 8012b7a:	4b18      	ldr	r3, [pc, #96]	@ (8012bdc <SetAllREDLED+0x94>)
 8012b7c:	22fa      	movs	r2, #250	@ 0xfa
 8012b7e:	0112      	lsls	r2, r2, #4
 8012b80:	63da      	str	r2, [r3, #60]	@ 0x3c
  HAL_GPIO_WritePin(MCU_LED_C_R_GPIO_Port, MCU_LED_C_R_Pin, false); //red on
 8012b82:	4b17      	ldr	r3, [pc, #92]	@ (8012be0 <SetAllREDLED+0x98>)
 8012b84:	2200      	movs	r2, #0
 8012b86:	2101      	movs	r1, #1
 8012b88:	0018      	movs	r0, r3
 8012b8a:	f003 f942 	bl	8015e12 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(MCU_LED_C_G_GPIO_Port, MCU_LED_C_G_Pin, true);
 8012b8e:	2380      	movs	r3, #128	@ 0x80
 8012b90:	005b      	lsls	r3, r3, #1
 8012b92:	4813      	ldr	r0, [pc, #76]	@ (8012be0 <SetAllREDLED+0x98>)
 8012b94:	2201      	movs	r2, #1
 8012b96:	0019      	movs	r1, r3
 8012b98:	f003 f93b 	bl	8015e12 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(MCU_LED_C_B_GPIO_Port, MCU_LED_C_B_Pin, true);
 8012b9c:	2380      	movs	r3, #128	@ 0x80
 8012b9e:	009b      	lsls	r3, r3, #2
 8012ba0:	480f      	ldr	r0, [pc, #60]	@ (8012be0 <SetAllREDLED+0x98>)
 8012ba2:	2201      	movs	r2, #1
 8012ba4:	0019      	movs	r1, r3
 8012ba6:	f003 f934 	bl	8015e12 <HAL_GPIO_WritePin>
  HAL_Delay(500);
 8012baa:	23fa      	movs	r3, #250	@ 0xfa
 8012bac:	005b      	lsls	r3, r3, #1
 8012bae:	0018      	movs	r0, r3
 8012bb0:	f001 fec6 	bl	8014940 <HAL_Delay>
  TIM2 -> CCR1 = LED_OFF;
 8012bb4:	2380      	movs	r3, #128	@ 0x80
 8012bb6:	05db      	lsls	r3, r3, #23
 8012bb8:	22fa      	movs	r2, #250	@ 0xfa
 8012bba:	0112      	lsls	r2, r2, #4
 8012bbc:	635a      	str	r2, [r3, #52]	@ 0x34
  TIM3 -> CCR1 = LED_OFF;
 8012bbe:	4b07      	ldr	r3, [pc, #28]	@ (8012bdc <SetAllREDLED+0x94>)
 8012bc0:	22fa      	movs	r2, #250	@ 0xfa
 8012bc2:	0112      	lsls	r2, r2, #4
 8012bc4:	635a      	str	r2, [r3, #52]	@ 0x34
  HAL_GPIO_WritePin(MCU_LED_C_R_GPIO_Port, MCU_LED_C_R_Pin, true); //red off
 8012bc6:	4b06      	ldr	r3, [pc, #24]	@ (8012be0 <SetAllREDLED+0x98>)
 8012bc8:	2201      	movs	r2, #1
 8012bca:	2101      	movs	r1, #1
 8012bcc:	0018      	movs	r0, r3
 8012bce:	f003 f920 	bl	8015e12 <HAL_GPIO_WritePin>
}
 8012bd2:	46c0      	nop			@ (mov r8, r8)
 8012bd4:	46bd      	mov	sp, r7
 8012bd6:	bd80      	pop	{r7, pc}
 8012bd8:	00000bb8 	.word	0x00000bb8
 8012bdc:	40000400 	.word	0x40000400
 8012be0:	50000400 	.word	0x50000400

08012be4 <WalkAllRedLED>:

void WalkAllRedLED() {
 8012be4:	b580      	push	{r7, lr}
 8012be6:	af00      	add	r7, sp, #0
// Fire all LEDs sequential to red independent of usertoggle or power status and reboot
  SetLEDsOff();
 8012be8:	f7ff ff92 	bl	8012b10 <SetLEDsOff>
  HAL_Delay(100);
 8012bec:	2064      	movs	r0, #100	@ 0x64
 8012bee:	f001 fea7 	bl	8014940 <HAL_Delay>

  TIM3 -> CCR1 = LED_ON;
 8012bf2:	4b24      	ldr	r3, [pc, #144]	@ (8012c84 <WalkAllRedLED+0xa0>)
 8012bf4:	4a24      	ldr	r2, [pc, #144]	@ (8012c88 <WalkAllRedLED+0xa4>)
 8012bf6:	635a      	str	r2, [r3, #52]	@ 0x34
  TIM3 -> CCR2 = LED_OFF;
 8012bf8:	4b22      	ldr	r3, [pc, #136]	@ (8012c84 <WalkAllRedLED+0xa0>)
 8012bfa:	22fa      	movs	r2, #250	@ 0xfa
 8012bfc:	0112      	lsls	r2, r2, #4
 8012bfe:	639a      	str	r2, [r3, #56]	@ 0x38
  TIM3 -> CCR3 = LED_OFF;
 8012c00:	4b20      	ldr	r3, [pc, #128]	@ (8012c84 <WalkAllRedLED+0xa0>)
 8012c02:	22fa      	movs	r2, #250	@ 0xfa
 8012c04:	0112      	lsls	r2, r2, #4
 8012c06:	63da      	str	r2, [r3, #60]	@ 0x3c
  HAL_Delay(100);
 8012c08:	2064      	movs	r0, #100	@ 0x64
 8012c0a:	f001 fe99 	bl	8014940 <HAL_Delay>
  TIM3 -> CCR1 = LED_OFF;
 8012c0e:	4b1d      	ldr	r3, [pc, #116]	@ (8012c84 <WalkAllRedLED+0xa0>)
 8012c10:	22fa      	movs	r2, #250	@ 0xfa
 8012c12:	0112      	lsls	r2, r2, #4
 8012c14:	635a      	str	r2, [r3, #52]	@ 0x34

  HAL_GPIO_WritePin(MCU_LED_C_R_GPIO_Port, MCU_LED_C_R_Pin, false); //red on
 8012c16:	4b1d      	ldr	r3, [pc, #116]	@ (8012c8c <WalkAllRedLED+0xa8>)
 8012c18:	2200      	movs	r2, #0
 8012c1a:	2101      	movs	r1, #1
 8012c1c:	0018      	movs	r0, r3
 8012c1e:	f003 f8f8 	bl	8015e12 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(MCU_LED_C_G_GPIO_Port, MCU_LED_C_G_Pin, true);
 8012c22:	2380      	movs	r3, #128	@ 0x80
 8012c24:	005b      	lsls	r3, r3, #1
 8012c26:	4819      	ldr	r0, [pc, #100]	@ (8012c8c <WalkAllRedLED+0xa8>)
 8012c28:	2201      	movs	r2, #1
 8012c2a:	0019      	movs	r1, r3
 8012c2c:	f003 f8f1 	bl	8015e12 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(MCU_LED_C_B_GPIO_Port, MCU_LED_C_B_Pin, true);
 8012c30:	2380      	movs	r3, #128	@ 0x80
 8012c32:	009b      	lsls	r3, r3, #2
 8012c34:	4815      	ldr	r0, [pc, #84]	@ (8012c8c <WalkAllRedLED+0xa8>)
 8012c36:	2201      	movs	r2, #1
 8012c38:	0019      	movs	r1, r3
 8012c3a:	f003 f8ea 	bl	8015e12 <HAL_GPIO_WritePin>
  HAL_Delay(100);
 8012c3e:	2064      	movs	r0, #100	@ 0x64
 8012c40:	f001 fe7e 	bl	8014940 <HAL_Delay>
  HAL_GPIO_WritePin(MCU_LED_C_R_GPIO_Port, MCU_LED_C_R_Pin, true); //red off
 8012c44:	4b11      	ldr	r3, [pc, #68]	@ (8012c8c <WalkAllRedLED+0xa8>)
 8012c46:	2201      	movs	r2, #1
 8012c48:	2101      	movs	r1, #1
 8012c4a:	0018      	movs	r0, r3
 8012c4c:	f003 f8e1 	bl	8015e12 <HAL_GPIO_WritePin>
  TIM2 -> CCR1 = LED_ON;
 8012c50:	2380      	movs	r3, #128	@ 0x80
 8012c52:	05db      	lsls	r3, r3, #23
 8012c54:	4a0c      	ldr	r2, [pc, #48]	@ (8012c88 <WalkAllRedLED+0xa4>)
 8012c56:	635a      	str	r2, [r3, #52]	@ 0x34
  TIM2 -> CCR3 = LED_OFF;
 8012c58:	2380      	movs	r3, #128	@ 0x80
 8012c5a:	05db      	lsls	r3, r3, #23
 8012c5c:	22fa      	movs	r2, #250	@ 0xfa
 8012c5e:	0112      	lsls	r2, r2, #4
 8012c60:	63da      	str	r2, [r3, #60]	@ 0x3c
  TIM2 -> CCR4 = LED_OFF;
 8012c62:	2380      	movs	r3, #128	@ 0x80
 8012c64:	05db      	lsls	r3, r3, #23
 8012c66:	22fa      	movs	r2, #250	@ 0xfa
 8012c68:	0112      	lsls	r2, r2, #4
 8012c6a:	641a      	str	r2, [r3, #64]	@ 0x40
  HAL_Delay(100);
 8012c6c:	2064      	movs	r0, #100	@ 0x64
 8012c6e:	f001 fe67 	bl	8014940 <HAL_Delay>
  TIM2 -> CCR1 = LED_OFF;
 8012c72:	2380      	movs	r3, #128	@ 0x80
 8012c74:	05db      	lsls	r3, r3, #23
 8012c76:	22fa      	movs	r2, #250	@ 0xfa
 8012c78:	0112      	lsls	r2, r2, #4
 8012c7a:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8012c7c:	46c0      	nop			@ (mov r8, r8)
 8012c7e:	46bd      	mov	sp, r7
 8012c80:	bd80      	pop	{r7, pc}
 8012c82:	46c0      	nop			@ (mov r8, r8)
 8012c84:	40000400 	.word	0x40000400
 8012c88:	00000bb8 	.word	0x00000bb8
 8012c8c:	50000400 	.word	0x50000400

08012c90 <SetAllBlueLED>:

void SetAllBlueLED() {
 8012c90:	b580      	push	{r7, lr}
 8012c92:	b082      	sub	sp, #8
 8012c94:	af00      	add	r7, sp, #0
// Fire all LEDs to blue indicating barometric sensor in error independent of usertoggle or power status and reboot
  for (uint8_t bl = 0; bl < 3; bl++) {
 8012c96:	1dfb      	adds	r3, r7, #7
 8012c98:	2200      	movs	r2, #0
 8012c9a:	701a      	strb	r2, [r3, #0]
 8012c9c:	e040      	b.n	8012d20 <SetAllBlueLED+0x90>
    TIM2 -> CCR1 = LED_OFF;
 8012c9e:	2380      	movs	r3, #128	@ 0x80
 8012ca0:	05db      	lsls	r3, r3, #23
 8012ca2:	22fa      	movs	r2, #250	@ 0xfa
 8012ca4:	0112      	lsls	r2, r2, #4
 8012ca6:	635a      	str	r2, [r3, #52]	@ 0x34
    TIM2 -> CCR3 = LED_OFF;
 8012ca8:	2380      	movs	r3, #128	@ 0x80
 8012caa:	05db      	lsls	r3, r3, #23
 8012cac:	22fa      	movs	r2, #250	@ 0xfa
 8012cae:	0112      	lsls	r2, r2, #4
 8012cb0:	63da      	str	r2, [r3, #60]	@ 0x3c
    TIM2 -> CCR4 = LED_ON;
 8012cb2:	2380      	movs	r3, #128	@ 0x80
 8012cb4:	05db      	lsls	r3, r3, #23
 8012cb6:	4a1f      	ldr	r2, [pc, #124]	@ (8012d34 <SetAllBlueLED+0xa4>)
 8012cb8:	641a      	str	r2, [r3, #64]	@ 0x40
    TIM3 -> CCR1 = LED_OFF;
 8012cba:	4b1f      	ldr	r3, [pc, #124]	@ (8012d38 <SetAllBlueLED+0xa8>)
 8012cbc:	22fa      	movs	r2, #250	@ 0xfa
 8012cbe:	0112      	lsls	r2, r2, #4
 8012cc0:	635a      	str	r2, [r3, #52]	@ 0x34
    TIM3 -> CCR2 = LED_OFF;
 8012cc2:	4b1d      	ldr	r3, [pc, #116]	@ (8012d38 <SetAllBlueLED+0xa8>)
 8012cc4:	22fa      	movs	r2, #250	@ 0xfa
 8012cc6:	0112      	lsls	r2, r2, #4
 8012cc8:	639a      	str	r2, [r3, #56]	@ 0x38
    TIM3 -> CCR3 = LED_ON;
 8012cca:	4b1b      	ldr	r3, [pc, #108]	@ (8012d38 <SetAllBlueLED+0xa8>)
 8012ccc:	4a19      	ldr	r2, [pc, #100]	@ (8012d34 <SetAllBlueLED+0xa4>)
 8012cce:	63da      	str	r2, [r3, #60]	@ 0x3c
    HAL_GPIO_WritePin(MCU_LED_C_R_GPIO_Port, MCU_LED_C_R_Pin, true);   //red off
 8012cd0:	4b1a      	ldr	r3, [pc, #104]	@ (8012d3c <SetAllBlueLED+0xac>)
 8012cd2:	2201      	movs	r2, #1
 8012cd4:	2101      	movs	r1, #1
 8012cd6:	0018      	movs	r0, r3
 8012cd8:	f003 f89b 	bl	8015e12 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MCU_LED_C_G_GPIO_Port, MCU_LED_C_G_Pin, true);
 8012cdc:	2380      	movs	r3, #128	@ 0x80
 8012cde:	005b      	lsls	r3, r3, #1
 8012ce0:	4816      	ldr	r0, [pc, #88]	@ (8012d3c <SetAllBlueLED+0xac>)
 8012ce2:	2201      	movs	r2, #1
 8012ce4:	0019      	movs	r1, r3
 8012ce6:	f003 f894 	bl	8015e12 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MCU_LED_C_B_GPIO_Port, MCU_LED_C_B_Pin, false);  // blue on
 8012cea:	2380      	movs	r3, #128	@ 0x80
 8012cec:	009b      	lsls	r3, r3, #2
 8012cee:	4813      	ldr	r0, [pc, #76]	@ (8012d3c <SetAllBlueLED+0xac>)
 8012cf0:	2200      	movs	r2, #0
 8012cf2:	0019      	movs	r1, r3
 8012cf4:	f003 f88d 	bl	8015e12 <HAL_GPIO_WritePin>
    HAL_Delay(250);
 8012cf8:	20fa      	movs	r0, #250	@ 0xfa
 8012cfa:	f001 fe21 	bl	8014940 <HAL_Delay>
    TIM2 -> CCR4 = LED_OFF;
 8012cfe:	2380      	movs	r3, #128	@ 0x80
 8012d00:	05db      	lsls	r3, r3, #23
 8012d02:	22fa      	movs	r2, #250	@ 0xfa
 8012d04:	0112      	lsls	r2, r2, #4
 8012d06:	641a      	str	r2, [r3, #64]	@ 0x40
//    TIM3 -> CCR3 = LED_OFF;  // do not switch off blue VOC led
    HAL_GPIO_WritePin(MCU_LED_C_B_GPIO_Port, MCU_LED_C_B_Pin, true);  // blue off
 8012d08:	2380      	movs	r3, #128	@ 0x80
 8012d0a:	009b      	lsls	r3, r3, #2
 8012d0c:	480b      	ldr	r0, [pc, #44]	@ (8012d3c <SetAllBlueLED+0xac>)
 8012d0e:	2201      	movs	r2, #1
 8012d10:	0019      	movs	r1, r3
 8012d12:	f003 f87e 	bl	8015e12 <HAL_GPIO_WritePin>
  for (uint8_t bl = 0; bl < 3; bl++) {
 8012d16:	1dfb      	adds	r3, r7, #7
 8012d18:	781a      	ldrb	r2, [r3, #0]
 8012d1a:	1dfb      	adds	r3, r7, #7
 8012d1c:	3201      	adds	r2, #1
 8012d1e:	701a      	strb	r2, [r3, #0]
 8012d20:	1dfb      	adds	r3, r7, #7
 8012d22:	781b      	ldrb	r3, [r3, #0]
 8012d24:	2b02      	cmp	r3, #2
 8012d26:	d9ba      	bls.n	8012c9e <SetAllBlueLED+0xe>
  }
}
 8012d28:	46c0      	nop			@ (mov r8, r8)
 8012d2a:	46c0      	nop			@ (mov r8, r8)
 8012d2c:	46bd      	mov	sp, r7
 8012d2e:	b002      	add	sp, #8
 8012d30:	bd80      	pop	{r7, pc}
 8012d32:	46c0      	nop			@ (mov r8, r8)
 8012d34:	00000bb8 	.word	0x00000bb8
 8012d38:	40000400 	.word	0x40000400
 8012d3c:	50000400 	.word	0x50000400

08012d40 <SetVOCindicator>:

void SetVOCindicator(uint16_t VOCi) {
 8012d40:	b5b0      	push	{r4, r5, r7, lr}
 8012d42:	b082      	sub	sp, #8
 8012d44:	af00      	add	r7, sp, #0
 8012d46:	0002      	movs	r2, r0
 8012d48:	1dbb      	adds	r3, r7, #6
 8012d4a:	801a      	strh	r2, [r3, #0]
//  if(*vocIndex > 0 && *vocIndex <= 100){
  static uint16_t Red;
  static uint16_t Blue;
  static uint16_t Green;
  static uint16_t TimeValue = 4000;
  if(VOCi > 0 && VOCi <= 100){
 8012d4c:	1dbb      	adds	r3, r7, #6
 8012d4e:	881b      	ldrh	r3, [r3, #0]
 8012d50:	2b00      	cmp	r3, #0
 8012d52:	d05a      	beq.n	8012e0a <SetVOCindicator+0xca>
 8012d54:	1dbb      	adds	r3, r7, #6
 8012d56:	881b      	ldrh	r3, [r3, #0]
 8012d58:	2b64      	cmp	r3, #100	@ 0x64
 8012d5a:	d856      	bhi.n	8012e0a <SetVOCindicator+0xca>
    Green = (1.0-(VOCi/100.0))*TimeValue;
 8012d5c:	1dbb      	adds	r3, r7, #6
 8012d5e:	881b      	ldrh	r3, [r3, #0]
 8012d60:	0018      	movs	r0, r3
 8012d62:	f7f0 fd45 	bl	80037f0 <__aeabi_i2d>
 8012d66:	2200      	movs	r2, #0
 8012d68:	4b5f      	ldr	r3, [pc, #380]	@ (8012ee8 <SetVOCindicator+0x1a8>)
 8012d6a:	f7ef f9b9 	bl	80020e0 <__aeabi_ddiv>
 8012d6e:	0002      	movs	r2, r0
 8012d70:	000b      	movs	r3, r1
 8012d72:	2000      	movs	r0, #0
 8012d74:	495d      	ldr	r1, [pc, #372]	@ (8012eec <SetVOCindicator+0x1ac>)
 8012d76:	f7f0 f8d3 	bl	8002f20 <__aeabi_dsub>
 8012d7a:	0002      	movs	r2, r0
 8012d7c:	000b      	movs	r3, r1
 8012d7e:	0014      	movs	r4, r2
 8012d80:	001d      	movs	r5, r3
 8012d82:	4b5b      	ldr	r3, [pc, #364]	@ (8012ef0 <SetVOCindicator+0x1b0>)
 8012d84:	881b      	ldrh	r3, [r3, #0]
 8012d86:	0018      	movs	r0, r3
 8012d88:	f7f0 fd32 	bl	80037f0 <__aeabi_i2d>
 8012d8c:	0002      	movs	r2, r0
 8012d8e:	000b      	movs	r3, r1
 8012d90:	0020      	movs	r0, r4
 8012d92:	0029      	movs	r1, r5
 8012d94:	f7ef fdde 	bl	8002954 <__aeabi_dmul>
 8012d98:	0002      	movs	r2, r0
 8012d9a:	000b      	movs	r3, r1
 8012d9c:	0010      	movs	r0, r2
 8012d9e:	0019      	movs	r1, r3
 8012da0:	f7ed fc54 	bl	800064c <__aeabi_d2uiz>
 8012da4:	0003      	movs	r3, r0
 8012da6:	b29a      	uxth	r2, r3
 8012da8:	4b52      	ldr	r3, [pc, #328]	@ (8012ef4 <SetVOCindicator+0x1b4>)
 8012daa:	801a      	strh	r2, [r3, #0]
    Blue = (VOCi/100.0)*TimeValue;
 8012dac:	1dbb      	adds	r3, r7, #6
 8012dae:	881b      	ldrh	r3, [r3, #0]
 8012db0:	0018      	movs	r0, r3
 8012db2:	f7f0 fd1d 	bl	80037f0 <__aeabi_i2d>
 8012db6:	2200      	movs	r2, #0
 8012db8:	4b4b      	ldr	r3, [pc, #300]	@ (8012ee8 <SetVOCindicator+0x1a8>)
 8012dba:	f7ef f991 	bl	80020e0 <__aeabi_ddiv>
 8012dbe:	0002      	movs	r2, r0
 8012dc0:	000b      	movs	r3, r1
 8012dc2:	0014      	movs	r4, r2
 8012dc4:	001d      	movs	r5, r3
 8012dc6:	4b4a      	ldr	r3, [pc, #296]	@ (8012ef0 <SetVOCindicator+0x1b0>)
 8012dc8:	881b      	ldrh	r3, [r3, #0]
 8012dca:	0018      	movs	r0, r3
 8012dcc:	f7f0 fd10 	bl	80037f0 <__aeabi_i2d>
 8012dd0:	0002      	movs	r2, r0
 8012dd2:	000b      	movs	r3, r1
 8012dd4:	0020      	movs	r0, r4
 8012dd6:	0029      	movs	r1, r5
 8012dd8:	f7ef fdbc 	bl	8002954 <__aeabi_dmul>
 8012ddc:	0002      	movs	r2, r0
 8012dde:	000b      	movs	r3, r1
 8012de0:	0010      	movs	r0, r2
 8012de2:	0019      	movs	r1, r3
 8012de4:	f7ed fc32 	bl	800064c <__aeabi_d2uiz>
 8012de8:	0003      	movs	r3, r0
 8012dea:	b29a      	uxth	r2, r3
 8012dec:	4b42      	ldr	r3, [pc, #264]	@ (8012ef8 <SetVOCindicator+0x1b8>)
 8012dee:	801a      	strh	r2, [r3, #0]
    Red = TimeValue;
 8012df0:	4b3f      	ldr	r3, [pc, #252]	@ (8012ef0 <SetVOCindicator+0x1b0>)
 8012df2:	881a      	ldrh	r2, [r3, #0]
 8012df4:	4b41      	ldr	r3, [pc, #260]	@ (8012efc <SetVOCindicator+0x1bc>)
 8012df6:	801a      	strh	r2, [r3, #0]
    SetVocLED(Red, Green, Blue);
 8012df8:	4b40      	ldr	r3, [pc, #256]	@ (8012efc <SetVOCindicator+0x1bc>)
 8012dfa:	8818      	ldrh	r0, [r3, #0]
 8012dfc:	4b3d      	ldr	r3, [pc, #244]	@ (8012ef4 <SetVOCindicator+0x1b4>)
 8012dfe:	8819      	ldrh	r1, [r3, #0]
 8012e00:	4b3d      	ldr	r3, [pc, #244]	@ (8012ef8 <SetVOCindicator+0x1b8>)
 8012e02:	881b      	ldrh	r3, [r3, #0]
 8012e04:	001a      	movs	r2, r3
 8012e06:	f7ff fd43 	bl	8012890 <SetVocLED>
  }
  if(VOCi > 100){
 8012e0a:	1dbb      	adds	r3, r7, #6
 8012e0c:	881b      	ldrh	r3, [r3, #0]
 8012e0e:	2b64      	cmp	r3, #100	@ 0x64
 8012e10:	d966      	bls.n	8012ee0 <SetVOCindicator+0x1a0>
    Green = (((VOCi-100.0)/400.0))*TimeValue;
 8012e12:	1dbb      	adds	r3, r7, #6
 8012e14:	881b      	ldrh	r3, [r3, #0]
 8012e16:	0018      	movs	r0, r3
 8012e18:	f7f0 fcea 	bl	80037f0 <__aeabi_i2d>
 8012e1c:	2200      	movs	r2, #0
 8012e1e:	4b32      	ldr	r3, [pc, #200]	@ (8012ee8 <SetVOCindicator+0x1a8>)
 8012e20:	f7f0 f87e 	bl	8002f20 <__aeabi_dsub>
 8012e24:	0002      	movs	r2, r0
 8012e26:	000b      	movs	r3, r1
 8012e28:	0010      	movs	r0, r2
 8012e2a:	0019      	movs	r1, r3
 8012e2c:	2200      	movs	r2, #0
 8012e2e:	4b34      	ldr	r3, [pc, #208]	@ (8012f00 <SetVOCindicator+0x1c0>)
 8012e30:	f7ef f956 	bl	80020e0 <__aeabi_ddiv>
 8012e34:	0002      	movs	r2, r0
 8012e36:	000b      	movs	r3, r1
 8012e38:	0014      	movs	r4, r2
 8012e3a:	001d      	movs	r5, r3
 8012e3c:	4b2c      	ldr	r3, [pc, #176]	@ (8012ef0 <SetVOCindicator+0x1b0>)
 8012e3e:	881b      	ldrh	r3, [r3, #0]
 8012e40:	0018      	movs	r0, r3
 8012e42:	f7f0 fcd5 	bl	80037f0 <__aeabi_i2d>
 8012e46:	0002      	movs	r2, r0
 8012e48:	000b      	movs	r3, r1
 8012e4a:	0020      	movs	r0, r4
 8012e4c:	0029      	movs	r1, r5
 8012e4e:	f7ef fd81 	bl	8002954 <__aeabi_dmul>
 8012e52:	0002      	movs	r2, r0
 8012e54:	000b      	movs	r3, r1
 8012e56:	0010      	movs	r0, r2
 8012e58:	0019      	movs	r1, r3
 8012e5a:	f7ed fbf7 	bl	800064c <__aeabi_d2uiz>
 8012e5e:	0003      	movs	r3, r0
 8012e60:	b29a      	uxth	r2, r3
 8012e62:	4b24      	ldr	r3, [pc, #144]	@ (8012ef4 <SetVOCindicator+0x1b4>)
 8012e64:	801a      	strh	r2, [r3, #0]
    Red = (1.0-((VOCi-100.0)/400.0))*TimeValue;
 8012e66:	1dbb      	adds	r3, r7, #6
 8012e68:	881b      	ldrh	r3, [r3, #0]
 8012e6a:	0018      	movs	r0, r3
 8012e6c:	f7f0 fcc0 	bl	80037f0 <__aeabi_i2d>
 8012e70:	2200      	movs	r2, #0
 8012e72:	4b1d      	ldr	r3, [pc, #116]	@ (8012ee8 <SetVOCindicator+0x1a8>)
 8012e74:	f7f0 f854 	bl	8002f20 <__aeabi_dsub>
 8012e78:	0002      	movs	r2, r0
 8012e7a:	000b      	movs	r3, r1
 8012e7c:	0010      	movs	r0, r2
 8012e7e:	0019      	movs	r1, r3
 8012e80:	2200      	movs	r2, #0
 8012e82:	4b1f      	ldr	r3, [pc, #124]	@ (8012f00 <SetVOCindicator+0x1c0>)
 8012e84:	f7ef f92c 	bl	80020e0 <__aeabi_ddiv>
 8012e88:	0002      	movs	r2, r0
 8012e8a:	000b      	movs	r3, r1
 8012e8c:	2000      	movs	r0, #0
 8012e8e:	4917      	ldr	r1, [pc, #92]	@ (8012eec <SetVOCindicator+0x1ac>)
 8012e90:	f7f0 f846 	bl	8002f20 <__aeabi_dsub>
 8012e94:	0002      	movs	r2, r0
 8012e96:	000b      	movs	r3, r1
 8012e98:	0014      	movs	r4, r2
 8012e9a:	001d      	movs	r5, r3
 8012e9c:	4b14      	ldr	r3, [pc, #80]	@ (8012ef0 <SetVOCindicator+0x1b0>)
 8012e9e:	881b      	ldrh	r3, [r3, #0]
 8012ea0:	0018      	movs	r0, r3
 8012ea2:	f7f0 fca5 	bl	80037f0 <__aeabi_i2d>
 8012ea6:	0002      	movs	r2, r0
 8012ea8:	000b      	movs	r3, r1
 8012eaa:	0020      	movs	r0, r4
 8012eac:	0029      	movs	r1, r5
 8012eae:	f7ef fd51 	bl	8002954 <__aeabi_dmul>
 8012eb2:	0002      	movs	r2, r0
 8012eb4:	000b      	movs	r3, r1
 8012eb6:	0010      	movs	r0, r2
 8012eb8:	0019      	movs	r1, r3
 8012eba:	f7ed fbc7 	bl	800064c <__aeabi_d2uiz>
 8012ebe:	0003      	movs	r3, r0
 8012ec0:	b29a      	uxth	r2, r3
 8012ec2:	4b0e      	ldr	r3, [pc, #56]	@ (8012efc <SetVOCindicator+0x1bc>)
 8012ec4:	801a      	strh	r2, [r3, #0]
    Blue = TimeValue;
 8012ec6:	4b0a      	ldr	r3, [pc, #40]	@ (8012ef0 <SetVOCindicator+0x1b0>)
 8012ec8:	881a      	ldrh	r2, [r3, #0]
 8012eca:	4b0b      	ldr	r3, [pc, #44]	@ (8012ef8 <SetVOCindicator+0x1b8>)
 8012ecc:	801a      	strh	r2, [r3, #0]
    SetVocLED(Red, Green, Blue);
 8012ece:	4b0b      	ldr	r3, [pc, #44]	@ (8012efc <SetVOCindicator+0x1bc>)
 8012ed0:	8818      	ldrh	r0, [r3, #0]
 8012ed2:	4b08      	ldr	r3, [pc, #32]	@ (8012ef4 <SetVOCindicator+0x1b4>)
 8012ed4:	8819      	ldrh	r1, [r3, #0]
 8012ed6:	4b08      	ldr	r3, [pc, #32]	@ (8012ef8 <SetVOCindicator+0x1b8>)
 8012ed8:	881b      	ldrh	r3, [r3, #0]
 8012eda:	001a      	movs	r2, r3
 8012edc:	f7ff fcd8 	bl	8012890 <SetVocLED>
  }

}
 8012ee0:	46c0      	nop			@ (mov r8, r8)
 8012ee2:	46bd      	mov	sp, r7
 8012ee4:	b002      	add	sp, #8
 8012ee6:	bdb0      	pop	{r4, r5, r7, pc}
 8012ee8:	40590000 	.word	0x40590000
 8012eec:	3ff00000 	.word	0x3ff00000
 8012ef0:	200000ea 	.word	0x200000ea
 8012ef4:	20002164 	.word	0x20002164
 8012ef8:	20002166 	.word	0x20002166
 8012efc:	20002168 	.word	0x20002168
 8012f00:	40790000 	.word	0x40790000

08012f04 <powerCheck>:

void powerCheck(){
 8012f04:	b580      	push	{r7, lr}
 8012f06:	af00      	add	r7, sp, #0
  if(!Check_USB_PowerOn()){
 8012f08:	f7f6 fe86 	bl	8009c18 <Check_USB_PowerOn>
 8012f0c:	0003      	movs	r3, r0
 8012f0e:	001a      	movs	r2, r3
 8012f10:	2301      	movs	r3, #1
 8012f12:	4053      	eors	r3, r2
 8012f14:	b2db      	uxtb	r3, r3
 8012f16:	2b00      	cmp	r3, #0
 8012f18:	d002      	beq.n	8012f20 <powerCheck+0x1c>
    batteryChargeCheck();
 8012f1a:	f7ff fb81 	bl	8012620 <batteryChargeCheck>
  }
  else{
    batteryStatus = USB_PLUGGED_IN;
  }
}
 8012f1e:	e002      	b.n	8012f26 <powerCheck+0x22>
    batteryStatus = USB_PLUGGED_IN;
 8012f20:	4b02      	ldr	r3, [pc, #8]	@ (8012f2c <powerCheck+0x28>)
 8012f22:	2204      	movs	r2, #4
 8012f24:	701a      	strb	r2, [r3, #0]
}
 8012f26:	46c0      	nop			@ (mov r8, r8)
 8012f28:	46bd      	mov	sp, r7
 8012f2a:	bd80      	pop	{r7, pc}
 8012f2c:	20002161 	.word	0x20002161

08012f30 <powerDisplay>:

void powerDisplay(){
 8012f30:	b580      	push	{r7, lr}
 8012f32:	b082      	sub	sp, #8
 8012f34:	af02      	add	r7, sp, #8
  if(batteryStatus == USB_PLUGGED_IN){
 8012f36:	4b32      	ldr	r3, [pc, #200]	@ (8013000 <powerDisplay+0xd0>)
 8012f38:	781b      	ldrb	r3, [r3, #0]
 8012f3a:	2b04      	cmp	r3, #4
 8012f3c:	d10f      	bne.n	8012f5e <powerDisplay+0x2e>
    Debug("USB power detected, battery: %fV", ReadBatteryVoltage());
 8012f3e:	f7f6 fdb5 	bl	8009aac <ReadBatteryVoltage>
 8012f42:	1c03      	adds	r3, r0, #0
 8012f44:	1c18      	adds	r0, r3, #0
 8012f46:	f7f0 fca5 	bl	8003894 <__aeabi_f2d>
 8012f4a:	0002      	movs	r2, r0
 8012f4c:	000b      	movs	r3, r1
 8012f4e:	482d      	ldr	r0, [pc, #180]	@ (8013004 <powerDisplay+0xd4>)
 8012f50:	492d      	ldr	r1, [pc, #180]	@ (8013008 <powerDisplay+0xd8>)
 8012f52:	9200      	str	r2, [sp, #0]
 8012f54:	9301      	str	r3, [sp, #4]
 8012f56:	0002      	movs	r2, r0
 8012f58:	2003      	movs	r0, #3
 8012f5a:	f000 ff6f 	bl	8013e3c <CreateLine>
  }
  if(batteryStatus == BATTERY_FULL){
 8012f5e:	4b28      	ldr	r3, [pc, #160]	@ (8013000 <powerDisplay+0xd0>)
 8012f60:	781b      	ldrb	r3, [r3, #0]
 8012f62:	2b03      	cmp	r3, #3
 8012f64:	d105      	bne.n	8012f72 <powerDisplay+0x42>
    Debug("Battery fully charged");
 8012f66:	4a29      	ldr	r2, [pc, #164]	@ (801300c <powerDisplay+0xdc>)
 8012f68:	4b27      	ldr	r3, [pc, #156]	@ (8013008 <powerDisplay+0xd8>)
 8012f6a:	0019      	movs	r1, r3
 8012f6c:	2003      	movs	r0, #3
 8012f6e:	f000 ff65 	bl	8013e3c <CreateLine>
  }
  if(batteryStatus == BATTERY_GOOD){
 8012f72:	4b23      	ldr	r3, [pc, #140]	@ (8013000 <powerDisplay+0xd0>)
 8012f74:	781b      	ldrb	r3, [r3, #0]
 8012f76:	2b02      	cmp	r3, #2
 8012f78:	d105      	bne.n	8012f86 <powerDisplay+0x56>
    Debug("Battery status good");
 8012f7a:	4a25      	ldr	r2, [pc, #148]	@ (8013010 <powerDisplay+0xe0>)
 8012f7c:	4b22      	ldr	r3, [pc, #136]	@ (8013008 <powerDisplay+0xd8>)
 8012f7e:	0019      	movs	r1, r3
 8012f80:	2003      	movs	r0, #3
 8012f82:	f000 ff5b 	bl	8013e3c <CreateLine>
  }
  if(batteryStatus == BATTERY_LOW){
 8012f86:	4b1e      	ldr	r3, [pc, #120]	@ (8013000 <powerDisplay+0xd0>)
 8012f88:	781b      	ldrb	r3, [r3, #0]
 8012f8a:	2b01      	cmp	r3, #1
 8012f8c:	d105      	bne.n	8012f9a <powerDisplay+0x6a>
    Debug("Battery status low");
 8012f8e:	4a21      	ldr	r2, [pc, #132]	@ (8013014 <powerDisplay+0xe4>)
 8012f90:	4b1d      	ldr	r3, [pc, #116]	@ (8013008 <powerDisplay+0xd8>)
 8012f92:	0019      	movs	r1, r3
 8012f94:	2003      	movs	r0, #3
 8012f96:	f000 ff51 	bl	8013e3c <CreateLine>
  }
  if(batteryStatus == BATTERY_CRITICAL){
 8012f9a:	4b19      	ldr	r3, [pc, #100]	@ (8013000 <powerDisplay+0xd0>)
 8012f9c:	781b      	ldrb	r3, [r3, #0]
 8012f9e:	2b00      	cmp	r3, #0
 8012fa0:	d105      	bne.n	8012fae <powerDisplay+0x7e>
    Debug("Battery is critical, stop processes");
 8012fa2:	4a1d      	ldr	r2, [pc, #116]	@ (8013018 <powerDisplay+0xe8>)
 8012fa4:	4b18      	ldr	r3, [pc, #96]	@ (8013008 <powerDisplay+0xd8>)
 8012fa6:	0019      	movs	r1, r3
 8012fa8:	2003      	movs	r0, #3
 8012faa:	f000 ff47 	bl	8013e3c <CreateLine>
  }
  batteryChargeMode = Read_Charge_Status();
 8012fae:	f7f6 fe51 	bl	8009c54 <Read_Charge_Status>
 8012fb2:	0003      	movs	r3, r0
 8012fb4:	001a      	movs	r2, r3
 8012fb6:	4b19      	ldr	r3, [pc, #100]	@ (801301c <powerDisplay+0xec>)
 8012fb8:	701a      	strb	r2, [r3, #0]
  switch (batteryChargeMode) {
 8012fba:	4b18      	ldr	r3, [pc, #96]	@ (801301c <powerDisplay+0xec>)
 8012fbc:	781b      	ldrb	r3, [r3, #0]
 8012fbe:	2b02      	cmp	r3, #2
 8012fc0:	d013      	beq.n	8012fea <powerDisplay+0xba>
 8012fc2:	dc19      	bgt.n	8012ff8 <powerDisplay+0xc8>
 8012fc4:	2b00      	cmp	r3, #0
 8012fc6:	d002      	beq.n	8012fce <powerDisplay+0x9e>
 8012fc8:	2b01      	cmp	r3, #1
 8012fca:	d007      	beq.n	8012fdc <powerDisplay+0xac>
  case CHARGING_FULL:
    Debug("Battery full, charging off");
    break;
  }

}
 8012fcc:	e014      	b.n	8012ff8 <powerDisplay+0xc8>
    Debug("Battery charging off");
 8012fce:	4a14      	ldr	r2, [pc, #80]	@ (8013020 <powerDisplay+0xf0>)
 8012fd0:	4b0d      	ldr	r3, [pc, #52]	@ (8013008 <powerDisplay+0xd8>)
 8012fd2:	0019      	movs	r1, r3
 8012fd4:	2003      	movs	r0, #3
 8012fd6:	f000 ff31 	bl	8013e3c <CreateLine>
    break;
 8012fda:	e00d      	b.n	8012ff8 <powerDisplay+0xc8>
    Debug("Battery is charging");
 8012fdc:	4a11      	ldr	r2, [pc, #68]	@ (8013024 <powerDisplay+0xf4>)
 8012fde:	4b0a      	ldr	r3, [pc, #40]	@ (8013008 <powerDisplay+0xd8>)
 8012fe0:	0019      	movs	r1, r3
 8012fe2:	2003      	movs	r0, #3
 8012fe4:	f000 ff2a 	bl	8013e3c <CreateLine>
    break;
 8012fe8:	e006      	b.n	8012ff8 <powerDisplay+0xc8>
    Debug("Battery full, charging off");
 8012fea:	4a0f      	ldr	r2, [pc, #60]	@ (8013028 <powerDisplay+0xf8>)
 8012fec:	4b06      	ldr	r3, [pc, #24]	@ (8013008 <powerDisplay+0xd8>)
 8012fee:	0019      	movs	r1, r3
 8012ff0:	2003      	movs	r0, #3
 8012ff2:	f000 ff23 	bl	8013e3c <CreateLine>
    break;
 8012ff6:	46c0      	nop			@ (mov r8, r8)
}
 8012ff8:	46c0      	nop			@ (mov r8, r8)
 8012ffa:	46bd      	mov	sp, r7
 8012ffc:	bd80      	pop	{r7, pc}
 8012ffe:	46c0      	nop			@ (mov r8, r8)
 8013000:	20002161 	.word	0x20002161
 8013004:	0802d87c 	.word	0x0802d87c
 8013008:	0802d878 	.word	0x0802d878
 801300c:	0802d8a0 	.word	0x0802d8a0
 8013010:	0802d8b8 	.word	0x0802d8b8
 8013014:	0802d8cc 	.word	0x0802d8cc
 8013018:	0802d8e0 	.word	0x0802d8e0
 801301c:	20002160 	.word	0x20002160
 8013020:	0802d904 	.word	0x0802d904
 8013024:	0802d91c 	.word	0x0802d91c
 8013028:	0802d930 	.word	0x0802d930

0801302c <configCheck>:

void configCheck(){
 801302c:	b590      	push	{r4, r7, lr}
 801302e:	b083      	sub	sp, #12
 8013030:	af00      	add	r7, sp, #0
  if(BootButton_Pressed() && UserButton_Pressed()){
 8013032:	f7f6 fe6b 	bl	8009d0c <BootButton_Pressed>
 8013036:	1e03      	subs	r3, r0, #0
 8013038:	d007      	beq.n	801304a <configCheck+0x1e>
 801303a:	f7f6 fe79 	bl	8009d30 <UserButton_Pressed>
 801303e:	1e03      	subs	r3, r0, #0
 8013040:	d003      	beq.n	801304a <configCheck+0x1e>
    configSet = true;
 8013042:	4bb5      	ldr	r3, [pc, #724]	@ (8013318 <configCheck+0x2ec>)
 8013044:	2201      	movs	r2, #1
 8013046:	701a      	strb	r2, [r3, #0]
 8013048:	e00a      	b.n	8013060 <configCheck+0x34>
  }
  else{
    configSet = false;
 801304a:	4bb3      	ldr	r3, [pc, #716]	@ (8013318 <configCheck+0x2ec>)
 801304c:	2200      	movs	r2, #0
 801304e:	701a      	strb	r2, [r3, #0]
    ConfigStamp = HAL_GetTick() + 2000;
 8013050:	f001 fc6c 	bl	801492c <HAL_GetTick>
 8013054:	0003      	movs	r3, r0
 8013056:	22fa      	movs	r2, #250	@ 0xfa
 8013058:	00d2      	lsls	r2, r2, #3
 801305a:	189a      	adds	r2, r3, r2
 801305c:	4baf      	ldr	r3, [pc, #700]	@ (801331c <configCheck+0x2f0>)
 801305e:	601a      	str	r2, [r3, #0]
  }
  if(configSet && TimestampIsReached(ConfigStamp)){
 8013060:	4bad      	ldr	r3, [pc, #692]	@ (8013318 <configCheck+0x2ec>)
 8013062:	781b      	ldrb	r3, [r3, #0]
 8013064:	2b00      	cmp	r3, #0
 8013066:	d00d      	beq.n	8013084 <configCheck+0x58>
 8013068:	4bac      	ldr	r3, [pc, #688]	@ (801331c <configCheck+0x2f0>)
 801306a:	681b      	ldr	r3, [r3, #0]
 801306c:	0018      	movs	r0, r3
 801306e:	f000 fe8f 	bl	8013d90 <TimestampIsReached>
 8013072:	1e03      	subs	r3, r0, #0
 8013074:	d006      	beq.n	8013084 <configCheck+0x58>
    SetConfigMode(); //Make config mode wifi
 8013076:	f7f1 feb7 	bl	8004de8 <SetConfigMode>
    SetDBLED(true, true, true);
 801307a:	2201      	movs	r2, #1
 801307c:	2101      	movs	r1, #1
 801307e:	2001      	movs	r0, #1
 8013080:	f7ff fbbc 	bl	80127fc <SetDBLED>
  }
  if(!BootButton_Pressed() && UserButton_Pressed() && !userbuttonHeld && !GetReconfigMode()){
 8013084:	f7f6 fe42 	bl	8009d0c <BootButton_Pressed>
 8013088:	0003      	movs	r3, r0
 801308a:	001a      	movs	r2, r3
 801308c:	2301      	movs	r3, #1
 801308e:	4053      	eors	r3, r2
 8013090:	b2db      	uxtb	r3, r3
 8013092:	2b00      	cmp	r3, #0
 8013094:	d05a      	beq.n	801314c <configCheck+0x120>
 8013096:	f7f6 fe4b 	bl	8009d30 <UserButton_Pressed>
 801309a:	1e03      	subs	r3, r0, #0
 801309c:	d056      	beq.n	801314c <configCheck+0x120>
 801309e:	4ba0      	ldr	r3, [pc, #640]	@ (8013320 <configCheck+0x2f4>)
 80130a0:	781b      	ldrb	r3, [r3, #0]
 80130a2:	2201      	movs	r2, #1
 80130a4:	4053      	eors	r3, r2
 80130a6:	b2db      	uxtb	r3, r3
 80130a8:	2b00      	cmp	r3, #0
 80130aa:	d04f      	beq.n	801314c <configCheck+0x120>
 80130ac:	f7f1 febc 	bl	8004e28 <GetReconfigMode>
 80130b0:	0003      	movs	r3, r0
 80130b2:	001a      	movs	r2, r3
 80130b4:	2301      	movs	r3, #1
 80130b6:	4053      	eors	r3, r2
 80130b8:	b2db      	uxtb	r3, r3
 80130ba:	2b00      	cmp	r3, #0
 80130bc:	d046      	beq.n	801314c <configCheck+0x120>
    SetLEDsOff();
 80130be:	f7ff fd27 	bl	8012b10 <SetLEDsOff>
    SetVocLED(LED_ON, LED_ON, LED_ON);
 80130c2:	4a98      	ldr	r2, [pc, #608]	@ (8013324 <configCheck+0x2f8>)
 80130c4:	4997      	ldr	r1, [pc, #604]	@ (8013324 <configCheck+0x2f8>)
 80130c6:	4b97      	ldr	r3, [pc, #604]	@ (8013324 <configCheck+0x2f8>)
 80130c8:	0018      	movs	r0, r3
 80130ca:	f7ff fbe1 	bl	8012890 <SetVocLED>
    HAL_Delay(1500);
 80130ce:	4b96      	ldr	r3, [pc, #600]	@ (8013328 <configCheck+0x2fc>)
 80130d0:	0018      	movs	r0, r3
 80130d2:	f001 fc35 	bl	8014940 <HAL_Delay>
    SetVocLED(LED_OFF, LED_OFF, LED_OFF);
 80130d6:	23fa      	movs	r3, #250	@ 0xfa
 80130d8:	011a      	lsls	r2, r3, #4
 80130da:	23fa      	movs	r3, #250	@ 0xfa
 80130dc:	0119      	lsls	r1, r3, #4
 80130de:	23fa      	movs	r3, #250	@ 0xfa
 80130e0:	011b      	lsls	r3, r3, #4
 80130e2:	0018      	movs	r0, r3
 80130e4:	f7ff fbd4 	bl	8012890 <SetVocLED>
    userToggle = !userToggle;
 80130e8:	4b90      	ldr	r3, [pc, #576]	@ (801332c <configCheck+0x300>)
 80130ea:	781b      	ldrb	r3, [r3, #0]
 80130ec:	1e5a      	subs	r2, r3, #1
 80130ee:	4193      	sbcs	r3, r2
 80130f0:	b2db      	uxtb	r3, r3
 80130f2:	2201      	movs	r2, #1
 80130f4:	4053      	eors	r3, r2
 80130f6:	b2db      	uxtb	r3, r3
 80130f8:	1c1a      	adds	r2, r3, #0
 80130fa:	2301      	movs	r3, #1
 80130fc:	4013      	ands	r3, r2
 80130fe:	b2da      	uxtb	r2, r3
 8013100:	4b8a      	ldr	r3, [pc, #552]	@ (801332c <configCheck+0x300>)
 8013102:	701a      	strb	r2, [r3, #0]
    if (userToggle) {
 8013104:	4b89      	ldr	r3, [pc, #548]	@ (801332c <configCheck+0x300>)
 8013106:	781b      	ldrb	r3, [r3, #0]
 8013108:	2b00      	cmp	r3, #0
 801310a:	d002      	beq.n	8013112 <configCheck+0xe6>
      EnabledConnectedDevices();
 801310c:	f7fa fde0 	bl	800dcd0 <EnabledConnectedDevices>
 8013110:	e004      	b.n	801311c <configCheck+0xf0>
    }
    else {
      deviceTimeOut = HAL_GetTick();
 8013112:	f001 fc0b 	bl	801492c <HAL_GetTick>
 8013116:	0002      	movs	r2, r0
 8013118:	4b85      	ldr	r3, [pc, #532]	@ (8013330 <configCheck+0x304>)
 801311a:	601a      	str	r2, [r3, #0]
    }
    Debug("userToggle flipped to %sabled", userToggle?"en": "dis");
 801311c:	4b83      	ldr	r3, [pc, #524]	@ (801332c <configCheck+0x300>)
 801311e:	781b      	ldrb	r3, [r3, #0]
 8013120:	2b00      	cmp	r3, #0
 8013122:	d001      	beq.n	8013128 <configCheck+0xfc>
 8013124:	4b83      	ldr	r3, [pc, #524]	@ (8013334 <configCheck+0x308>)
 8013126:	e000      	b.n	801312a <configCheck+0xfe>
 8013128:	4b83      	ldr	r3, [pc, #524]	@ (8013338 <configCheck+0x30c>)
 801312a:	4a84      	ldr	r2, [pc, #528]	@ (801333c <configCheck+0x310>)
 801312c:	4984      	ldr	r1, [pc, #528]	@ (8013340 <configCheck+0x314>)
 801312e:	2003      	movs	r0, #3
 8013130:	f000 fe84 	bl	8013e3c <CreateLine>
    userbuttonHeld = true;
 8013134:	4b7a      	ldr	r3, [pc, #488]	@ (8013320 <configCheck+0x2f4>)
 8013136:	2201      	movs	r2, #1
 8013138:	701a      	strb	r2, [r3, #0]
    UserbuttonStamp = HAL_GetTick() + 2000;
 801313a:	f001 fbf7 	bl	801492c <HAL_GetTick>
 801313e:	0003      	movs	r3, r0
 8013140:	22fa      	movs	r2, #250	@ 0xfa
 8013142:	00d2      	lsls	r2, r2, #3
 8013144:	189a      	adds	r2, r3, r2
 8013146:	4b7f      	ldr	r3, [pc, #508]	@ (8013344 <configCheck+0x318>)
 8013148:	601a      	str	r2, [r3, #0]
 801314a:	e002      	b.n	8013152 <configCheck+0x126>
  }
  else {
    userbuttonHeld = false;
 801314c:	4b74      	ldr	r3, [pc, #464]	@ (8013320 <configCheck+0x2f4>)
 801314e:	2200      	movs	r2, #0
 8013150:	701a      	strb	r2, [r3, #0]
  }
  if (!BootButton_Pressed() && userbuttonHeld && TimestampIsReached(UserbuttonStamp)) {
 8013152:	f7f6 fddb 	bl	8009d0c <BootButton_Pressed>
 8013156:	0003      	movs	r3, r0
 8013158:	001a      	movs	r2, r3
 801315a:	2301      	movs	r3, #1
 801315c:	4053      	eors	r3, r2
 801315e:	b2db      	uxtb	r3, r3
 8013160:	2b00      	cmp	r3, #0
 8013162:	d100      	bne.n	8013166 <configCheck+0x13a>
 8013164:	e0a4      	b.n	80132b0 <configCheck+0x284>
 8013166:	4b6e      	ldr	r3, [pc, #440]	@ (8013320 <configCheck+0x2f4>)
 8013168:	781b      	ldrb	r3, [r3, #0]
 801316a:	2b00      	cmp	r3, #0
 801316c:	d100      	bne.n	8013170 <configCheck+0x144>
 801316e:	e09f      	b.n	80132b0 <configCheck+0x284>
 8013170:	4b74      	ldr	r3, [pc, #464]	@ (8013344 <configCheck+0x318>)
 8013172:	681b      	ldr	r3, [r3, #0]
 8013174:	0018      	movs	r0, r3
 8013176:	f000 fe0b 	bl	8013d90 <TimestampIsReached>
 801317a:	1e03      	subs	r3, r0, #0
 801317c:	d100      	bne.n	8013180 <configCheck+0x154>
 801317e:	e097      	b.n	80132b0 <configCheck+0x284>
    if (GetPMSensorPresence() && ((product_name[4] == '4') || (product_name[4] == '5'))) {
 8013180:	f7fa f964 	bl	800d44c <GetPMSensorPresence>
 8013184:	1e03      	subs	r3, r0, #0
 8013186:	d100      	bne.n	801318a <configCheck+0x15e>
 8013188:	e082      	b.n	8013290 <configCheck+0x264>
 801318a:	4b6f      	ldr	r3, [pc, #444]	@ (8013348 <configCheck+0x31c>)
 801318c:	791b      	ldrb	r3, [r3, #4]
 801318e:	2b34      	cmp	r3, #52	@ 0x34
 8013190:	d004      	beq.n	801319c <configCheck+0x170>
 8013192:	4b6d      	ldr	r3, [pc, #436]	@ (8013348 <configCheck+0x31c>)
 8013194:	791b      	ldrb	r3, [r3, #4]
 8013196:	2b35      	cmp	r3, #53	@ 0x35
 8013198:	d000      	beq.n	801319c <configCheck+0x170>
 801319a:	e079      	b.n	8013290 <configCheck+0x264>
      uint16_t color;
      VOCNOx = !VOCNOx;
 801319c:	4b6b      	ldr	r3, [pc, #428]	@ (801334c <configCheck+0x320>)
 801319e:	781b      	ldrb	r3, [r3, #0]
 80131a0:	1e5a      	subs	r2, r3, #1
 80131a2:	4193      	sbcs	r3, r2
 80131a4:	b2db      	uxtb	r3, r3
 80131a6:	2201      	movs	r2, #1
 80131a8:	4053      	eors	r3, r2
 80131aa:	b2db      	uxtb	r3, r3
 80131ac:	1c1a      	adds	r2, r3, #0
 80131ae:	2301      	movs	r3, #1
 80131b0:	4013      	ands	r3, r2
 80131b2:	b2da      	uxtb	r2, r3
 80131b4:	4b65      	ldr	r3, [pc, #404]	@ (801334c <configCheck+0x320>)
 80131b6:	701a      	strb	r2, [r3, #0]
      if (VOCNOx)  color = Calculate_LED_ON();
 80131b8:	4b64      	ldr	r3, [pc, #400]	@ (801334c <configCheck+0x320>)
 80131ba:	781b      	ldrb	r3, [r3, #0]
 80131bc:	2b00      	cmp	r3, #0
 80131be:	d005      	beq.n	80131cc <configCheck+0x1a0>
 80131c0:	1dbc      	adds	r4, r7, #6
 80131c2:	f7ff fa9f 	bl	8012704 <Calculate_LED_ON>
 80131c6:	0003      	movs	r3, r0
 80131c8:	8023      	strh	r3, [r4, #0]
 80131ca:	e003      	b.n	80131d4 <configCheck+0x1a8>
        else color = 4000;
 80131cc:	1dbb      	adds	r3, r7, #6
 80131ce:	22fa      	movs	r2, #250	@ 0xfa
 80131d0:	0112      	lsls	r2, r2, #4
 80131d2:	801a      	strh	r2, [r3, #0]
      Info("VOC and NOx only measurement %sabled", VOCNOx?"en":"dis");
 80131d4:	4b5d      	ldr	r3, [pc, #372]	@ (801334c <configCheck+0x320>)
 80131d6:	781b      	ldrb	r3, [r3, #0]
 80131d8:	2b00      	cmp	r3, #0
 80131da:	d001      	beq.n	80131e0 <configCheck+0x1b4>
 80131dc:	4b55      	ldr	r3, [pc, #340]	@ (8013334 <configCheck+0x308>)
 80131de:	e000      	b.n	80131e2 <configCheck+0x1b6>
 80131e0:	4b55      	ldr	r3, [pc, #340]	@ (8013338 <configCheck+0x30c>)
 80131e2:	4a5b      	ldr	r2, [pc, #364]	@ (8013350 <configCheck+0x324>)
 80131e4:	495b      	ldr	r1, [pc, #364]	@ (8013354 <configCheck+0x328>)
 80131e6:	2002      	movs	r0, #2
 80131e8:	f000 fe28 	bl	8013e3c <CreateLine>
      for (uint8_t i=0; i<2; i++) {
 80131ec:	1d7b      	adds	r3, r7, #5
 80131ee:	2200      	movs	r2, #0
 80131f0:	701a      	strb	r2, [r3, #0]
 80131f2:	e028      	b.n	8013246 <configCheck+0x21a>
        TIM3 -> CCR1 = Calculate_LED_ON();
 80131f4:	f7ff fa86 	bl	8012704 <Calculate_LED_ON>
 80131f8:	0003      	movs	r3, r0
 80131fa:	001a      	movs	r2, r3
 80131fc:	4b56      	ldr	r3, [pc, #344]	@ (8013358 <configCheck+0x32c>)
 80131fe:	635a      	str	r2, [r3, #52]	@ 0x34
        TIM3 -> CCR2 = color;
 8013200:	4b55      	ldr	r3, [pc, #340]	@ (8013358 <configCheck+0x32c>)
 8013202:	1dba      	adds	r2, r7, #6
 8013204:	8812      	ldrh	r2, [r2, #0]
 8013206:	639a      	str	r2, [r3, #56]	@ 0x38
        TIM3 -> CCR3 = color;
 8013208:	4b53      	ldr	r3, [pc, #332]	@ (8013358 <configCheck+0x32c>)
 801320a:	1dba      	adds	r2, r7, #6
 801320c:	8812      	ldrh	r2, [r2, #0]
 801320e:	63da      	str	r2, [r3, #60]	@ 0x3c
        HAL_Delay(400);
 8013210:	23c8      	movs	r3, #200	@ 0xc8
 8013212:	005b      	lsls	r3, r3, #1
 8013214:	0018      	movs	r0, r3
 8013216:	f001 fb93 	bl	8014940 <HAL_Delay>
        TIM3 -> CCR1 = 4000;
 801321a:	4b4f      	ldr	r3, [pc, #316]	@ (8013358 <configCheck+0x32c>)
 801321c:	22fa      	movs	r2, #250	@ 0xfa
 801321e:	0112      	lsls	r2, r2, #4
 8013220:	635a      	str	r2, [r3, #52]	@ 0x34
        TIM3 -> CCR2 = 4000;
 8013222:	4b4d      	ldr	r3, [pc, #308]	@ (8013358 <configCheck+0x32c>)
 8013224:	22fa      	movs	r2, #250	@ 0xfa
 8013226:	0112      	lsls	r2, r2, #4
 8013228:	639a      	str	r2, [r3, #56]	@ 0x38
        TIM3 -> CCR3 = 4000;
 801322a:	4b4b      	ldr	r3, [pc, #300]	@ (8013358 <configCheck+0x32c>)
 801322c:	22fa      	movs	r2, #250	@ 0xfa
 801322e:	0112      	lsls	r2, r2, #4
 8013230:	63da      	str	r2, [r3, #60]	@ 0x3c
        HAL_Delay(400);
 8013232:	23c8      	movs	r3, #200	@ 0xc8
 8013234:	005b      	lsls	r3, r3, #1
 8013236:	0018      	movs	r0, r3
 8013238:	f001 fb82 	bl	8014940 <HAL_Delay>
      for (uint8_t i=0; i<2; i++) {
 801323c:	1d7b      	adds	r3, r7, #5
 801323e:	781a      	ldrb	r2, [r3, #0]
 8013240:	1d7b      	adds	r3, r7, #5
 8013242:	3201      	adds	r2, #1
 8013244:	701a      	strb	r2, [r3, #0]
 8013246:	1d7b      	adds	r3, r7, #5
 8013248:	781b      	ldrb	r3, [r3, #0]
 801324a:	2b01      	cmp	r3, #1
 801324c:	d9d2      	bls.n	80131f4 <configCheck+0x1c8>
      }
//      Debug("userToggle flipped back to prior status");
      userToggle = !userToggle;
 801324e:	4b37      	ldr	r3, [pc, #220]	@ (801332c <configCheck+0x300>)
 8013250:	781b      	ldrb	r3, [r3, #0]
 8013252:	1e5a      	subs	r2, r3, #1
 8013254:	4193      	sbcs	r3, r2
 8013256:	b2db      	uxtb	r3, r3
 8013258:	2201      	movs	r2, #1
 801325a:	4053      	eors	r3, r2
 801325c:	b2db      	uxtb	r3, r3
 801325e:	1c1a      	adds	r2, r3, #0
 8013260:	2301      	movs	r3, #1
 8013262:	4013      	ands	r3, r2
 8013264:	b2da      	uxtb	r2, r3
 8013266:	4b31      	ldr	r3, [pc, #196]	@ (801332c <configCheck+0x300>)
 8013268:	701a      	strb	r2, [r3, #0]
      Info("userToggle status is %sabled", userToggle?"en":"dis");
 801326a:	4b30      	ldr	r3, [pc, #192]	@ (801332c <configCheck+0x300>)
 801326c:	781b      	ldrb	r3, [r3, #0]
 801326e:	2b00      	cmp	r3, #0
 8013270:	d001      	beq.n	8013276 <configCheck+0x24a>
 8013272:	4b30      	ldr	r3, [pc, #192]	@ (8013334 <configCheck+0x308>)
 8013274:	e000      	b.n	8013278 <configCheck+0x24c>
 8013276:	4b30      	ldr	r3, [pc, #192]	@ (8013338 <configCheck+0x30c>)
 8013278:	4a38      	ldr	r2, [pc, #224]	@ (801335c <configCheck+0x330>)
 801327a:	4936      	ldr	r1, [pc, #216]	@ (8013354 <configCheck+0x328>)
 801327c:	2002      	movs	r0, #2
 801327e:	f000 fddd 	bl	8013e3c <CreateLine>
      if (usbPluggedIn) {
 8013282:	4b37      	ldr	r3, [pc, #220]	@ (8013360 <configCheck+0x334>)
 8013284:	781b      	ldrb	r3, [r3, #0]
 8013286:	2b00      	cmp	r3, #0
 8013288:	d009      	beq.n	801329e <configCheck+0x272>
        set_light_on_state();  // in case of battery operation the mode is picked up by the state machine
 801328a:	f7fb ff0d 	bl	800f0a8 <set_light_on_state>
    if (GetPMSensorPresence() && ((product_name[4] == '4') || (product_name[4] == '5'))) {
 801328e:	e006      	b.n	801329e <configCheck+0x272>
      }
    }
    else {
      Info("sen54 or sen55 not present or disabled in system");
 8013290:	4a34      	ldr	r2, [pc, #208]	@ (8013364 <configCheck+0x338>)
 8013292:	4b30      	ldr	r3, [pc, #192]	@ (8013354 <configCheck+0x328>)
 8013294:	0019      	movs	r1, r3
 8013296:	2002      	movs	r0, #2
 8013298:	f000 fdd0 	bl	8013e3c <CreateLine>
 801329c:	e000      	b.n	80132a0 <configCheck+0x274>
    if (GetPMSensorPresence() && ((product_name[4] == '4') || (product_name[4] == '5'))) {
 801329e:	46c0      	nop			@ (mov r8, r8)
    }
    while (UserButton_Pressed()){
 80132a0:	46c0      	nop			@ (mov r8, r8)
 80132a2:	f7f6 fd45 	bl	8009d30 <UserButton_Pressed>
 80132a6:	1e03      	subs	r3, r0, #0
 80132a8:	d1fb      	bne.n	80132a2 <configCheck+0x276>
    }
    userbuttonHeld = false;
 80132aa:	4b1d      	ldr	r3, [pc, #116]	@ (8013320 <configCheck+0x2f4>)
 80132ac:	2200      	movs	r2, #0
 80132ae:	701a      	strb	r2, [r3, #0]
  }
  if(!BootButton_Pressed() && !UserButton_Pressed()){
 80132b0:	f7f6 fd2c 	bl	8009d0c <BootButton_Pressed>
 80132b4:	0003      	movs	r3, r0
 80132b6:	001a      	movs	r2, r3
 80132b8:	2301      	movs	r3, #1
 80132ba:	4053      	eors	r3, r2
 80132bc:	b2db      	uxtb	r3, r3
 80132be:	2b00      	cmp	r3, #0
 80132c0:	d00b      	beq.n	80132da <configCheck+0x2ae>
 80132c2:	f7f6 fd35 	bl	8009d30 <UserButton_Pressed>
 80132c6:	0003      	movs	r3, r0
 80132c8:	001a      	movs	r2, r3
 80132ca:	2301      	movs	r3, #1
 80132cc:	4053      	eors	r3, r2
 80132ce:	b2db      	uxtb	r3, r3
 80132d0:	2b00      	cmp	r3, #0
 80132d2:	d002      	beq.n	80132da <configCheck+0x2ae>
    userbuttonHeld = false;
 80132d4:	4b12      	ldr	r3, [pc, #72]	@ (8013320 <configCheck+0x2f4>)
 80132d6:	2200      	movs	r2, #0
 80132d8:	701a      	strb	r2, [r3, #0]
  }

  if(Check_USB_PowerOn()){
 80132da:	f7f6 fc9d 	bl	8009c18 <Check_USB_PowerOn>
 80132de:	1e03      	subs	r3, r0, #0
 80132e0:	d003      	beq.n	80132ea <configCheck+0x2be>
    usbPluggedIn = true;
 80132e2:	4b1f      	ldr	r3, [pc, #124]	@ (8013360 <configCheck+0x334>)
 80132e4:	2201      	movs	r2, #1
 80132e6:	701a      	strb	r2, [r3, #0]
      SetLEDsOff();
    }
    usbPluggedIn = false;
  }

}
 80132e8:	e012      	b.n	8013310 <configCheck+0x2e4>
    if(!userToggle && !init){
 80132ea:	4b10      	ldr	r3, [pc, #64]	@ (801332c <configCheck+0x300>)
 80132ec:	781b      	ldrb	r3, [r3, #0]
 80132ee:	2201      	movs	r2, #1
 80132f0:	4053      	eors	r3, r2
 80132f2:	b2db      	uxtb	r3, r3
 80132f4:	2b00      	cmp	r3, #0
 80132f6:	d008      	beq.n	801330a <configCheck+0x2de>
 80132f8:	4b1b      	ldr	r3, [pc, #108]	@ (8013368 <configCheck+0x33c>)
 80132fa:	781b      	ldrb	r3, [r3, #0]
 80132fc:	2201      	movs	r2, #1
 80132fe:	4053      	eors	r3, r2
 8013300:	b2db      	uxtb	r3, r3
 8013302:	2b00      	cmp	r3, #0
 8013304:	d001      	beq.n	801330a <configCheck+0x2de>
      SetLEDsOff();
 8013306:	f7ff fc03 	bl	8012b10 <SetLEDsOff>
    usbPluggedIn = false;
 801330a:	4b15      	ldr	r3, [pc, #84]	@ (8013360 <configCheck+0x334>)
 801330c:	2200      	movs	r2, #0
 801330e:	701a      	strb	r2, [r3, #0]
}
 8013310:	46c0      	nop			@ (mov r8, r8)
 8013312:	46bd      	mov	sp, r7
 8013314:	b003      	add	sp, #12
 8013316:	bd90      	pop	{r4, r7, pc}
 8013318:	2000214c 	.word	0x2000214c
 801331c:	20002154 	.word	0x20002154
 8013320:	2000214f 	.word	0x2000214f
 8013324:	00000bb8 	.word	0x00000bb8
 8013328:	000005dc 	.word	0x000005dc
 801332c:	2000214e 	.word	0x2000214e
 8013330:	20001114 	.word	0x20001114
 8013334:	0802d94c 	.word	0x0802d94c
 8013338:	0802d950 	.word	0x0802d950
 801333c:	0802d954 	.word	0x0802d954
 8013340:	0802d878 	.word	0x0802d878
 8013344:	20002158 	.word	0x20002158
 8013348:	200011c0 	.word	0x200011c0
 801334c:	200011be 	.word	0x200011be
 8013350:	0802d974 	.word	0x0802d974
 8013354:	0802d99c 	.word	0x0802d99c
 8013358:	40000400 	.word	0x40000400
 801335c:	0802d9a0 	.word	0x0802d9a0
 8013360:	2000214d 	.word	0x2000214d
 8013364:	0802d9c0 	.word	0x0802d9c0
 8013368:	200000e8 	.word	0x200000e8

0801336c <Battery_Upkeep>:

void Battery_Upkeep(){
 801336c:	b580      	push	{r7, lr}
 801336e:	af00      	add	r7, sp, #0
  powerCheck();
 8013370:	f7ff fdc8 	bl	8012f04 <powerCheck>
  powerDisplay();  // output LEDs are okay
 8013374:	f7ff fddc 	bl	8012f30 <powerDisplay>
}
 8013378:	46c0      	nop			@ (mov r8, r8)
 801337a:	46bd      	mov	sp, r7
 801337c:	bd80      	pop	{r7, pc}
	...

08013380 <setuserToggle>:

void setuserToggle(void) {
 8013380:	b580      	push	{r7, lr}
 8013382:	af00      	add	r7, sp, #0
  if (!Check_USB_PowerOn()) { //operate only in battery operation mode
 8013384:	f7f6 fc48 	bl	8009c18 <Check_USB_PowerOn>
 8013388:	0003      	movs	r3, r0
 801338a:	001a      	movs	r2, r3
 801338c:	2301      	movs	r3, #1
 801338e:	4053      	eors	r3, r2
 8013390:	b2db      	uxtb	r3, r3
 8013392:	2b00      	cmp	r3, #0
 8013394:	d004      	beq.n	80133a0 <setuserToggle+0x20>
    userToggle = true;
 8013396:	4b04      	ldr	r3, [pc, #16]	@ (80133a8 <setuserToggle+0x28>)
 8013398:	2201      	movs	r2, #1
 801339a:	701a      	strb	r2, [r3, #0]
    EnabledConnectedDevices();
 801339c:	f7fa fc98 	bl	800dcd0 <EnabledConnectedDevices>
  }
}
 80133a0:	46c0      	nop			@ (mov r8, r8)
 80133a2:	46bd      	mov	sp, r7
 80133a4:	bd80      	pop	{r7, pc}
 80133a6:	46c0      	nop			@ (mov r8, r8)
 80133a8:	2000214e 	.word	0x2000214e

080133ac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80133ac:	b580      	push	{r7, lr}
 80133ae:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80133b0:	4b07      	ldr	r3, [pc, #28]	@ (80133d0 <HAL_MspInit+0x24>)
 80133b2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80133b4:	4b06      	ldr	r3, [pc, #24]	@ (80133d0 <HAL_MspInit+0x24>)
 80133b6:	2101      	movs	r1, #1
 80133b8:	430a      	orrs	r2, r1
 80133ba:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 80133bc:	4b04      	ldr	r3, [pc, #16]	@ (80133d0 <HAL_MspInit+0x24>)
 80133be:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80133c0:	4b03      	ldr	r3, [pc, #12]	@ (80133d0 <HAL_MspInit+0x24>)
 80133c2:	2180      	movs	r1, #128	@ 0x80
 80133c4:	0549      	lsls	r1, r1, #21
 80133c6:	430a      	orrs	r2, r1
 80133c8:	639a      	str	r2, [r3, #56]	@ 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80133ca:	46c0      	nop			@ (mov r8, r8)
 80133cc:	46bd      	mov	sp, r7
 80133ce:	bd80      	pop	{r7, pc}
 80133d0:	40021000 	.word	0x40021000

080133d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 80133d4:	b580      	push	{r7, lr}
 80133d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80133d8:	46c0      	nop			@ (mov r8, r8)
 80133da:	e7fd      	b.n	80133d8 <NMI_Handler+0x4>

080133dc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80133dc:	b580      	push	{r7, lr}
 80133de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80133e0:	46c0      	nop			@ (mov r8, r8)
 80133e2:	e7fd      	b.n	80133e0 <HardFault_Handler+0x4>

080133e4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80133e4:	b580      	push	{r7, lr}
 80133e6:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80133e8:	46c0      	nop			@ (mov r8, r8)
 80133ea:	46bd      	mov	sp, r7
 80133ec:	bd80      	pop	{r7, pc}

080133ee <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80133ee:	b580      	push	{r7, lr}
 80133f0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80133f2:	46c0      	nop			@ (mov r8, r8)
 80133f4:	46bd      	mov	sp, r7
 80133f6:	bd80      	pop	{r7, pc}

080133f8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80133f8:	b580      	push	{r7, lr}
 80133fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80133fc:	f001 fa84 	bl	8014908 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  /* USER CODE END SysTick_IRQn 1 */
}
 8013400:	46c0      	nop			@ (mov r8, r8)
 8013402:	46bd      	mov	sp, r7
 8013404:	bd80      	pop	{r7, pc}
	...

08013408 <RTC_IRQHandler>:

/**
  * @brief This function handles RTC global interrupt through EXTI lines 17, 19 and 20 and LSE CSS interrupt through EXTI line 19.
  */
void RTC_IRQHandler(void)
{
 8013408:	b580      	push	{r7, lr}
 801340a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_IRQn 0 */

  /* USER CODE END RTC_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 801340c:	4b03      	ldr	r3, [pc, #12]	@ (801341c <RTC_IRQHandler+0x14>)
 801340e:	0018      	movs	r0, r3
 8013410:	f009 fb30 	bl	801ca74 <HAL_RTCEx_WakeUpTimerIRQHandler>
  /* USER CODE BEGIN RTC_IRQn 1 */

  /* USER CODE END RTC_IRQn 1 */
}
 8013414:	46c0      	nop			@ (mov r8, r8)
 8013416:	46bd      	mov	sp, r7
 8013418:	bd80      	pop	{r7, pc}
 801341a:	46c0      	nop			@ (mov r8, r8)
 801341c:	20001198 	.word	0x20001198

08013420 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8013420:	b580      	push	{r7, lr}
 8013422:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BOOT0_Pin);
 8013424:	2380      	movs	r3, #128	@ 0x80
 8013426:	021b      	lsls	r3, r3, #8
 8013428:	0018      	movs	r0, r3
 801342a:	f002 fd0f 	bl	8015e4c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 801342e:	46c0      	nop			@ (mov r8, r8)
 8013430:	46bd      	mov	sp, r7
 8013432:	bd80      	pop	{r7, pc}

08013434 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 8013434:	b580      	push	{r7, lr}
 8013436:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8013438:	4b05      	ldr	r3, [pc, #20]	@ (8013450 <DMA1_Channel2_3_IRQHandler+0x1c>)
 801343a:	0018      	movs	r0, r3
 801343c:	f002 f897 	bl	801556e <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8013440:	4b04      	ldr	r3, [pc, #16]	@ (8013454 <DMA1_Channel2_3_IRQHandler+0x20>)
 8013442:	0018      	movs	r0, r3
 8013444:	f002 f893 	bl	801556e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 8013448:	46c0      	nop			@ (mov r8, r8)
 801344a:	46bd      	mov	sp, r7
 801344c:	bd80      	pop	{r7, pc}
 801344e:	46c0      	nop			@ (mov r8, r8)
 8013450:	20001028 	.word	0x20001028
 8013454:	20000fe0 	.word	0x20000fe0

08013458 <DMA1_Channel4_5_6_7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 4, channel 5, channel 6 and channel 7 interrupts.
  */
void DMA1_Channel4_5_6_7_IRQHandler(void)
{
 8013458:	b580      	push	{r7, lr}
 801345a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_5_6_7_IRQn 0 */

  /* USER CODE END DMA1_Channel4_5_6_7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 801345c:	4b07      	ldr	r3, [pc, #28]	@ (801347c <DMA1_Channel4_5_6_7_IRQHandler+0x24>)
 801345e:	0018      	movs	r0, r3
 8013460:	f002 f885 	bl	801556e <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_usart4_rx);
 8013464:	4b06      	ldr	r3, [pc, #24]	@ (8013480 <DMA1_Channel4_5_6_7_IRQHandler+0x28>)
 8013466:	0018      	movs	r0, r3
 8013468:	f002 f881 	bl	801556e <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_usart4_tx);
 801346c:	4b05      	ldr	r3, [pc, #20]	@ (8013484 <DMA1_Channel4_5_6_7_IRQHandler+0x2c>)
 801346e:	0018      	movs	r0, r3
 8013470:	f002 f87d 	bl	801556e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_5_6_7_IRQn 1 */

  /* USER CODE END DMA1_Channel4_5_6_7_IRQn 1 */
}
 8013474:	46c0      	nop			@ (mov r8, r8)
 8013476:	46bd      	mov	sp, r7
 8013478:	bd80      	pop	{r7, pc}
 801347a:	46c0      	nop			@ (mov r8, r8)
 801347c:	200010ac 	.word	0x200010ac
 8013480:	20002458 	.word	0x20002458
 8013484:	200024a0 	.word	0x200024a0

08013488 <USART4_5_IRQHandler>:

/**
  * @brief This function handles USART4 and USART5 interrupt.
  */
void USART4_5_IRQHandler(void)
{
 8013488:	b580      	push	{r7, lr}
 801348a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART4_5_IRQn 0 */

  /* USER CODE END USART4_5_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 801348c:	4b03      	ldr	r3, [pc, #12]	@ (801349c <USART4_5_IRQHandler+0x14>)
 801348e:	0018      	movs	r0, r3
 8013490:	f00a f9ea 	bl	801d868 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART4_5_IRQn 1 */

  /* USER CODE END USART4_5_IRQn 1 */
}
 8013494:	46c0      	nop			@ (mov r8, r8)
 8013496:	46bd      	mov	sp, r7
 8013498:	bd80      	pop	{r7, pc}
 801349a:	46c0      	nop			@ (mov r8, r8)
 801349c:	200023a0 	.word	0x200023a0

080134a0 <I2C1_IRQHandler>:

/**
  * @brief This function handles I2C1 event global interrupt / I2C1 wake-up interrupt through EXTI line 23.
  */
void I2C1_IRQHandler(void)
{
 80134a0:	b580      	push	{r7, lr}
 80134a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_IRQn 0 */

  /* USER CODE END I2C1_IRQn 0 */
  if (hi2c1.Instance->ISR & (I2C_FLAG_BERR | I2C_FLAG_ARLO | I2C_FLAG_OVR))
 80134a4:	4b09      	ldr	r3, [pc, #36]	@ (80134cc <I2C1_IRQHandler+0x2c>)
 80134a6:	681b      	ldr	r3, [r3, #0]
 80134a8:	699a      	ldr	r2, [r3, #24]
 80134aa:	23e0      	movs	r3, #224	@ 0xe0
 80134ac:	00db      	lsls	r3, r3, #3
 80134ae:	4013      	ands	r3, r2
 80134b0:	d004      	beq.n	80134bc <I2C1_IRQHandler+0x1c>
  {
    HAL_I2C_ER_IRQHandler(&hi2c1);
 80134b2:	4b06      	ldr	r3, [pc, #24]	@ (80134cc <I2C1_IRQHandler+0x2c>)
 80134b4:	0018      	movs	r0, r3
 80134b6:	f003 fc13 	bl	8016ce0 <HAL_I2C_ER_IRQHandler>
    HAL_I2C_EV_IRQHandler(&hi2c1);
  }
  /* USER CODE BEGIN I2C1_IRQn 1 */

  /* USER CODE END I2C1_IRQn 1 */
}
 80134ba:	e003      	b.n	80134c4 <I2C1_IRQHandler+0x24>
    HAL_I2C_EV_IRQHandler(&hi2c1);
 80134bc:	4b03      	ldr	r3, [pc, #12]	@ (80134cc <I2C1_IRQHandler+0x2c>)
 80134be:	0018      	movs	r0, r3
 80134c0:	f003 fbf4 	bl	8016cac <HAL_I2C_EV_IRQHandler>
}
 80134c4:	46c0      	nop			@ (mov r8, r8)
 80134c6:	46bd      	mov	sp, r7
 80134c8:	bd80      	pop	{r7, pc}
 80134ca:	46c0      	nop			@ (mov r8, r8)
 80134cc:	20000f38 	.word	0x20000f38

080134d0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 80134d0:	b580      	push	{r7, lr}
 80134d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80134d4:	4b03      	ldr	r3, [pc, #12]	@ (80134e4 <USART1_IRQHandler+0x14>)
 80134d6:	0018      	movs	r0, r3
 80134d8:	f00a f9c6 	bl	801d868 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80134dc:	46c0      	nop			@ (mov r8, r8)
 80134de:	46bd      	mov	sp, r7
 80134e0:	bd80      	pop	{r7, pc}
 80134e2:	46c0      	nop			@ (mov r8, r8)
 80134e4:	200022e8 	.word	0x200022e8

080134e8 <USB_IRQHandler>:

/**
  * @brief This function handles USB event interrupt / USB wake-up interrupt through EXTI line 18.
  */
void USB_IRQHandler(void)
{
 80134e8:	b580      	push	{r7, lr}
 80134ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_IRQn 0 */

  /* USER CODE END USB_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80134ec:	4b03      	ldr	r3, [pc, #12]	@ (80134fc <USB_IRQHandler+0x14>)
 80134ee:	0018      	movs	r0, r3
 80134f0:	f006 f90e 	bl	8019710 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_IRQn 1 */

  /* USER CODE END USB_IRQn 1 */
}
 80134f4:	46c0      	nop			@ (mov r8, r8)
 80134f6:	46bd      	mov	sp, r7
 80134f8:	bd80      	pop	{r7, pc}
 80134fa:	46c0      	nop			@ (mov r8, r8)
 80134fc:	200032bc 	.word	0x200032bc

08013500 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8013500:	b580      	push	{r7, lr}
 8013502:	af00      	add	r7, sp, #0
  return 1;
 8013504:	2301      	movs	r3, #1
}
 8013506:	0018      	movs	r0, r3
 8013508:	46bd      	mov	sp, r7
 801350a:	bd80      	pop	{r7, pc}

0801350c <_kill>:

int _kill(int pid, int sig)
{
 801350c:	b580      	push	{r7, lr}
 801350e:	b082      	sub	sp, #8
 8013510:	af00      	add	r7, sp, #0
 8013512:	6078      	str	r0, [r7, #4]
 8013514:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8013516:	f013 f8a7 	bl	8026668 <__errno>
 801351a:	0003      	movs	r3, r0
 801351c:	2216      	movs	r2, #22
 801351e:	601a      	str	r2, [r3, #0]
  return -1;
 8013520:	2301      	movs	r3, #1
 8013522:	425b      	negs	r3, r3
}
 8013524:	0018      	movs	r0, r3
 8013526:	46bd      	mov	sp, r7
 8013528:	b002      	add	sp, #8
 801352a:	bd80      	pop	{r7, pc}

0801352c <_exit>:

void _exit (int status)
{
 801352c:	b580      	push	{r7, lr}
 801352e:	b082      	sub	sp, #8
 8013530:	af00      	add	r7, sp, #0
 8013532:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8013534:	2301      	movs	r3, #1
 8013536:	425a      	negs	r2, r3
 8013538:	687b      	ldr	r3, [r7, #4]
 801353a:	0011      	movs	r1, r2
 801353c:	0018      	movs	r0, r3
 801353e:	f7ff ffe5 	bl	801350c <_kill>
  while (1) {}    /* Make sure we hang here */
 8013542:	46c0      	nop			@ (mov r8, r8)
 8013544:	e7fd      	b.n	8013542 <_exit+0x16>

08013546 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8013546:	b580      	push	{r7, lr}
 8013548:	b086      	sub	sp, #24
 801354a:	af00      	add	r7, sp, #0
 801354c:	60f8      	str	r0, [r7, #12]
 801354e:	60b9      	str	r1, [r7, #8]
 8013550:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8013552:	2300      	movs	r3, #0
 8013554:	617b      	str	r3, [r7, #20]
 8013556:	e00a      	b.n	801356e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8013558:	e000      	b.n	801355c <_read+0x16>
 801355a:	bf00      	nop
 801355c:	0001      	movs	r1, r0
 801355e:	68bb      	ldr	r3, [r7, #8]
 8013560:	1c5a      	adds	r2, r3, #1
 8013562:	60ba      	str	r2, [r7, #8]
 8013564:	b2ca      	uxtb	r2, r1
 8013566:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8013568:	697b      	ldr	r3, [r7, #20]
 801356a:	3301      	adds	r3, #1
 801356c:	617b      	str	r3, [r7, #20]
 801356e:	697a      	ldr	r2, [r7, #20]
 8013570:	687b      	ldr	r3, [r7, #4]
 8013572:	429a      	cmp	r2, r3
 8013574:	dbf0      	blt.n	8013558 <_read+0x12>
  }

  return len;
 8013576:	687b      	ldr	r3, [r7, #4]
}
 8013578:	0018      	movs	r0, r3
 801357a:	46bd      	mov	sp, r7
 801357c:	b006      	add	sp, #24
 801357e:	bd80      	pop	{r7, pc}

08013580 <_close>:
  }
  return len;
}

int _close(int file)
{
 8013580:	b580      	push	{r7, lr}
 8013582:	b082      	sub	sp, #8
 8013584:	af00      	add	r7, sp, #0
 8013586:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8013588:	2301      	movs	r3, #1
 801358a:	425b      	negs	r3, r3
}
 801358c:	0018      	movs	r0, r3
 801358e:	46bd      	mov	sp, r7
 8013590:	b002      	add	sp, #8
 8013592:	bd80      	pop	{r7, pc}

08013594 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8013594:	b580      	push	{r7, lr}
 8013596:	b082      	sub	sp, #8
 8013598:	af00      	add	r7, sp, #0
 801359a:	6078      	str	r0, [r7, #4]
 801359c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 801359e:	683b      	ldr	r3, [r7, #0]
 80135a0:	2280      	movs	r2, #128	@ 0x80
 80135a2:	0192      	lsls	r2, r2, #6
 80135a4:	605a      	str	r2, [r3, #4]
  return 0;
 80135a6:	2300      	movs	r3, #0
}
 80135a8:	0018      	movs	r0, r3
 80135aa:	46bd      	mov	sp, r7
 80135ac:	b002      	add	sp, #8
 80135ae:	bd80      	pop	{r7, pc}

080135b0 <_isatty>:

int _isatty(int file)
{
 80135b0:	b580      	push	{r7, lr}
 80135b2:	b082      	sub	sp, #8
 80135b4:	af00      	add	r7, sp, #0
 80135b6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80135b8:	2301      	movs	r3, #1
}
 80135ba:	0018      	movs	r0, r3
 80135bc:	46bd      	mov	sp, r7
 80135be:	b002      	add	sp, #8
 80135c0:	bd80      	pop	{r7, pc}

080135c2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80135c2:	b580      	push	{r7, lr}
 80135c4:	b084      	sub	sp, #16
 80135c6:	af00      	add	r7, sp, #0
 80135c8:	60f8      	str	r0, [r7, #12]
 80135ca:	60b9      	str	r1, [r7, #8]
 80135cc:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80135ce:	2300      	movs	r3, #0
}
 80135d0:	0018      	movs	r0, r3
 80135d2:	46bd      	mov	sp, r7
 80135d4:	b004      	add	sp, #16
 80135d6:	bd80      	pop	{r7, pc}

080135d8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80135d8:	b580      	push	{r7, lr}
 80135da:	b086      	sub	sp, #24
 80135dc:	af00      	add	r7, sp, #0
 80135de:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80135e0:	4a14      	ldr	r2, [pc, #80]	@ (8013634 <_sbrk+0x5c>)
 80135e2:	4b15      	ldr	r3, [pc, #84]	@ (8013638 <_sbrk+0x60>)
 80135e4:	1ad3      	subs	r3, r2, r3
 80135e6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80135e8:	697b      	ldr	r3, [r7, #20]
 80135ea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80135ec:	4b13      	ldr	r3, [pc, #76]	@ (801363c <_sbrk+0x64>)
 80135ee:	681b      	ldr	r3, [r3, #0]
 80135f0:	2b00      	cmp	r3, #0
 80135f2:	d102      	bne.n	80135fa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80135f4:	4b11      	ldr	r3, [pc, #68]	@ (801363c <_sbrk+0x64>)
 80135f6:	4a12      	ldr	r2, [pc, #72]	@ (8013640 <_sbrk+0x68>)
 80135f8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80135fa:	4b10      	ldr	r3, [pc, #64]	@ (801363c <_sbrk+0x64>)
 80135fc:	681a      	ldr	r2, [r3, #0]
 80135fe:	687b      	ldr	r3, [r7, #4]
 8013600:	18d3      	adds	r3, r2, r3
 8013602:	693a      	ldr	r2, [r7, #16]
 8013604:	429a      	cmp	r2, r3
 8013606:	d207      	bcs.n	8013618 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8013608:	f013 f82e 	bl	8026668 <__errno>
 801360c:	0003      	movs	r3, r0
 801360e:	220c      	movs	r2, #12
 8013610:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8013612:	2301      	movs	r3, #1
 8013614:	425b      	negs	r3, r3
 8013616:	e009      	b.n	801362c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8013618:	4b08      	ldr	r3, [pc, #32]	@ (801363c <_sbrk+0x64>)
 801361a:	681b      	ldr	r3, [r3, #0]
 801361c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 801361e:	4b07      	ldr	r3, [pc, #28]	@ (801363c <_sbrk+0x64>)
 8013620:	681a      	ldr	r2, [r3, #0]
 8013622:	687b      	ldr	r3, [r7, #4]
 8013624:	18d2      	adds	r2, r2, r3
 8013626:	4b05      	ldr	r3, [pc, #20]	@ (801363c <_sbrk+0x64>)
 8013628:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 801362a:	68fb      	ldr	r3, [r7, #12]
}
 801362c:	0018      	movs	r0, r3
 801362e:	46bd      	mov	sp, r7
 8013630:	b006      	add	sp, #24
 8013632:	bd80      	pop	{r7, pc}
 8013634:	20005000 	.word	0x20005000
 8013638:	00000400 	.word	0x00000400
 801363c:	2000216c 	.word	0x2000216c
 8013640:	20003920 	.word	0x20003920

08013644 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8013644:	b580      	push	{r7, lr}
 8013646:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8013648:	46c0      	nop			@ (mov r8, r8)
 801364a:	46bd      	mov	sp, r7
 801364c:	bd80      	pop	{r7, pc}
	...

08013650 <MX_TIM2_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim6;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8013650:	b580      	push	{r7, lr}
 8013652:	b086      	sub	sp, #24
 8013654:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8013656:	2310      	movs	r3, #16
 8013658:	18fb      	adds	r3, r7, r3
 801365a:	0018      	movs	r0, r3
 801365c:	2308      	movs	r3, #8
 801365e:	001a      	movs	r2, r3
 8013660:	2100      	movs	r1, #0
 8013662:	f012 ff5d 	bl	8026520 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8013666:	003b      	movs	r3, r7
 8013668:	0018      	movs	r0, r3
 801366a:	2310      	movs	r3, #16
 801366c:	001a      	movs	r2, r3
 801366e:	2100      	movs	r1, #0
 8013670:	f012 ff56 	bl	8026520 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8013674:	4b2e      	ldr	r3, [pc, #184]	@ (8013730 <MX_TIM2_Init+0xe0>)
 8013676:	2280      	movs	r2, #128	@ 0x80
 8013678:	05d2      	lsls	r2, r2, #23
 801367a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 801367c:	4b2c      	ldr	r3, [pc, #176]	@ (8013730 <MX_TIM2_Init+0xe0>)
 801367e:	2200      	movs	r2, #0
 8013680:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8013682:	4b2b      	ldr	r3, [pc, #172]	@ (8013730 <MX_TIM2_Init+0xe0>)
 8013684:	2200      	movs	r2, #0
 8013686:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8013688:	4b29      	ldr	r3, [pc, #164]	@ (8013730 <MX_TIM2_Init+0xe0>)
 801368a:	4a2a      	ldr	r2, [pc, #168]	@ (8013734 <MX_TIM2_Init+0xe4>)
 801368c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 801368e:	4b28      	ldr	r3, [pc, #160]	@ (8013730 <MX_TIM2_Init+0xe0>)
 8013690:	2200      	movs	r2, #0
 8013692:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8013694:	4b26      	ldr	r3, [pc, #152]	@ (8013730 <MX_TIM2_Init+0xe0>)
 8013696:	2200      	movs	r2, #0
 8013698:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 801369a:	4b25      	ldr	r3, [pc, #148]	@ (8013730 <MX_TIM2_Init+0xe0>)
 801369c:	0018      	movs	r0, r3
 801369e:	f009 faf7 	bl	801cc90 <HAL_TIM_PWM_Init>
 80136a2:	1e03      	subs	r3, r0, #0
 80136a4:	d001      	beq.n	80136aa <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 80136a6:	f7f9 fe7f 	bl	800d3a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80136aa:	2110      	movs	r1, #16
 80136ac:	187b      	adds	r3, r7, r1
 80136ae:	2200      	movs	r2, #0
 80136b0:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80136b2:	187b      	adds	r3, r7, r1
 80136b4:	2200      	movs	r2, #0
 80136b6:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80136b8:	187a      	adds	r2, r7, r1
 80136ba:	4b1d      	ldr	r3, [pc, #116]	@ (8013730 <MX_TIM2_Init+0xe0>)
 80136bc:	0011      	movs	r1, r2
 80136be:	0018      	movs	r0, r3
 80136c0:	f009 fe04 	bl	801d2cc <HAL_TIMEx_MasterConfigSynchronization>
 80136c4:	1e03      	subs	r3, r0, #0
 80136c6:	d001      	beq.n	80136cc <MX_TIM2_Init+0x7c>
  {
    Error_Handler();
 80136c8:	f7f9 fe6e 	bl	800d3a8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80136cc:	003b      	movs	r3, r7
 80136ce:	2260      	movs	r2, #96	@ 0x60
 80136d0:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 80136d2:	003b      	movs	r3, r7
 80136d4:	2200      	movs	r2, #0
 80136d6:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80136d8:	003b      	movs	r3, r7
 80136da:	2200      	movs	r2, #0
 80136dc:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80136de:	003b      	movs	r3, r7
 80136e0:	2200      	movs	r2, #0
 80136e2:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80136e4:	0039      	movs	r1, r7
 80136e6:	4b12      	ldr	r3, [pc, #72]	@ (8013730 <MX_TIM2_Init+0xe0>)
 80136e8:	2200      	movs	r2, #0
 80136ea:	0018      	movs	r0, r3
 80136ec:	f009 fba2 	bl	801ce34 <HAL_TIM_PWM_ConfigChannel>
 80136f0:	1e03      	subs	r3, r0, #0
 80136f2:	d001      	beq.n	80136f8 <MX_TIM2_Init+0xa8>
  {
    Error_Handler();
 80136f4:	f7f9 fe58 	bl	800d3a8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80136f8:	0039      	movs	r1, r7
 80136fa:	4b0d      	ldr	r3, [pc, #52]	@ (8013730 <MX_TIM2_Init+0xe0>)
 80136fc:	2208      	movs	r2, #8
 80136fe:	0018      	movs	r0, r3
 8013700:	f009 fb98 	bl	801ce34 <HAL_TIM_PWM_ConfigChannel>
 8013704:	1e03      	subs	r3, r0, #0
 8013706:	d001      	beq.n	801370c <MX_TIM2_Init+0xbc>
  {
    Error_Handler();
 8013708:	f7f9 fe4e 	bl	800d3a8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 801370c:	0039      	movs	r1, r7
 801370e:	4b08      	ldr	r3, [pc, #32]	@ (8013730 <MX_TIM2_Init+0xe0>)
 8013710:	220c      	movs	r2, #12
 8013712:	0018      	movs	r0, r3
 8013714:	f009 fb8e 	bl	801ce34 <HAL_TIM_PWM_ConfigChannel>
 8013718:	1e03      	subs	r3, r0, #0
 801371a:	d001      	beq.n	8013720 <MX_TIM2_Init+0xd0>
  {
    Error_Handler();
 801371c:	f7f9 fe44 	bl	800d3a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8013720:	4b03      	ldr	r3, [pc, #12]	@ (8013730 <MX_TIM2_Init+0xe0>)
 8013722:	0018      	movs	r0, r3
 8013724:	f000 f8fe 	bl	8013924 <HAL_TIM_MspPostInit>

}
 8013728:	46c0      	nop			@ (mov r8, r8)
 801372a:	46bd      	mov	sp, r7
 801372c:	b006      	add	sp, #24
 801372e:	bd80      	pop	{r7, pc}
 8013730:	20002170 	.word	0x20002170
 8013734:	0000ffff 	.word	0x0000ffff

08013738 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8013738:	b580      	push	{r7, lr}
 801373a:	b086      	sub	sp, #24
 801373c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 801373e:	2310      	movs	r3, #16
 8013740:	18fb      	adds	r3, r7, r3
 8013742:	0018      	movs	r0, r3
 8013744:	2308      	movs	r3, #8
 8013746:	001a      	movs	r2, r3
 8013748:	2100      	movs	r1, #0
 801374a:	f012 fee9 	bl	8026520 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 801374e:	003b      	movs	r3, r7
 8013750:	0018      	movs	r0, r3
 8013752:	2310      	movs	r3, #16
 8013754:	001a      	movs	r2, r3
 8013756:	2100      	movs	r1, #0
 8013758:	f012 fee2 	bl	8026520 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 801375c:	4b32      	ldr	r3, [pc, #200]	@ (8013828 <MX_TIM3_Init+0xf0>)
 801375e:	4a33      	ldr	r2, [pc, #204]	@ (801382c <MX_TIM3_Init+0xf4>)
 8013760:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8013762:	4b31      	ldr	r3, [pc, #196]	@ (8013828 <MX_TIM3_Init+0xf0>)
 8013764:	2200      	movs	r2, #0
 8013766:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8013768:	4b2f      	ldr	r3, [pc, #188]	@ (8013828 <MX_TIM3_Init+0xf0>)
 801376a:	2200      	movs	r2, #0
 801376c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 801376e:	4b2e      	ldr	r3, [pc, #184]	@ (8013828 <MX_TIM3_Init+0xf0>)
 8013770:	4a2f      	ldr	r2, [pc, #188]	@ (8013830 <MX_TIM3_Init+0xf8>)
 8013772:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8013774:	4b2c      	ldr	r3, [pc, #176]	@ (8013828 <MX_TIM3_Init+0xf0>)
 8013776:	2200      	movs	r2, #0
 8013778:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 801377a:	4b2b      	ldr	r3, [pc, #172]	@ (8013828 <MX_TIM3_Init+0xf0>)
 801377c:	2200      	movs	r2, #0
 801377e:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8013780:	4b29      	ldr	r3, [pc, #164]	@ (8013828 <MX_TIM3_Init+0xf0>)
 8013782:	0018      	movs	r0, r3
 8013784:	f009 fa84 	bl	801cc90 <HAL_TIM_PWM_Init>
 8013788:	1e03      	subs	r3, r0, #0
 801378a:	d001      	beq.n	8013790 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 801378c:	f7f9 fe0c 	bl	800d3a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8013790:	2110      	movs	r1, #16
 8013792:	187b      	adds	r3, r7, r1
 8013794:	2200      	movs	r2, #0
 8013796:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8013798:	187b      	adds	r3, r7, r1
 801379a:	2200      	movs	r2, #0
 801379c:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 801379e:	187a      	adds	r2, r7, r1
 80137a0:	4b21      	ldr	r3, [pc, #132]	@ (8013828 <MX_TIM3_Init+0xf0>)
 80137a2:	0011      	movs	r1, r2
 80137a4:	0018      	movs	r0, r3
 80137a6:	f009 fd91 	bl	801d2cc <HAL_TIMEx_MasterConfigSynchronization>
 80137aa:	1e03      	subs	r3, r0, #0
 80137ac:	d001      	beq.n	80137b2 <MX_TIM3_Init+0x7a>
  {
    Error_Handler();
 80137ae:	f7f9 fdfb 	bl	800d3a8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80137b2:	003b      	movs	r3, r7
 80137b4:	2260      	movs	r2, #96	@ 0x60
 80137b6:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 80137b8:	003b      	movs	r3, r7
 80137ba:	2200      	movs	r2, #0
 80137bc:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80137be:	003b      	movs	r3, r7
 80137c0:	2200      	movs	r2, #0
 80137c2:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80137c4:	003b      	movs	r3, r7
 80137c6:	2200      	movs	r2, #0
 80137c8:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80137ca:	0039      	movs	r1, r7
 80137cc:	4b16      	ldr	r3, [pc, #88]	@ (8013828 <MX_TIM3_Init+0xf0>)
 80137ce:	2200      	movs	r2, #0
 80137d0:	0018      	movs	r0, r3
 80137d2:	f009 fb2f 	bl	801ce34 <HAL_TIM_PWM_ConfigChannel>
 80137d6:	1e03      	subs	r3, r0, #0
 80137d8:	d001      	beq.n	80137de <MX_TIM3_Init+0xa6>
  {
    Error_Handler();
 80137da:	f7f9 fde5 	bl	800d3a8 <Error_Handler>
  }
  if (HAL_TIMEx_RemapConfig(&htim3, TIM3_TI1_GPIO) != HAL_OK)
 80137de:	4b12      	ldr	r3, [pc, #72]	@ (8013828 <MX_TIM3_Init+0xf0>)
 80137e0:	2104      	movs	r1, #4
 80137e2:	0018      	movs	r0, r3
 80137e4:	f009 fdd0 	bl	801d388 <HAL_TIMEx_RemapConfig>
 80137e8:	1e03      	subs	r3, r0, #0
 80137ea:	d001      	beq.n	80137f0 <MX_TIM3_Init+0xb8>
  {
    Error_Handler();
 80137ec:	f7f9 fddc 	bl	800d3a8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80137f0:	0039      	movs	r1, r7
 80137f2:	4b0d      	ldr	r3, [pc, #52]	@ (8013828 <MX_TIM3_Init+0xf0>)
 80137f4:	2204      	movs	r2, #4
 80137f6:	0018      	movs	r0, r3
 80137f8:	f009 fb1c 	bl	801ce34 <HAL_TIM_PWM_ConfigChannel>
 80137fc:	1e03      	subs	r3, r0, #0
 80137fe:	d001      	beq.n	8013804 <MX_TIM3_Init+0xcc>
  {
    Error_Handler();
 8013800:	f7f9 fdd2 	bl	800d3a8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8013804:	0039      	movs	r1, r7
 8013806:	4b08      	ldr	r3, [pc, #32]	@ (8013828 <MX_TIM3_Init+0xf0>)
 8013808:	2208      	movs	r2, #8
 801380a:	0018      	movs	r0, r3
 801380c:	f009 fb12 	bl	801ce34 <HAL_TIM_PWM_ConfigChannel>
 8013810:	1e03      	subs	r3, r0, #0
 8013812:	d001      	beq.n	8013818 <MX_TIM3_Init+0xe0>
  {
    Error_Handler();
 8013814:	f7f9 fdc8 	bl	800d3a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8013818:	4b03      	ldr	r3, [pc, #12]	@ (8013828 <MX_TIM3_Init+0xf0>)
 801381a:	0018      	movs	r0, r3
 801381c:	f000 f882 	bl	8013924 <HAL_TIM_MspPostInit>

}
 8013820:	46c0      	nop			@ (mov r8, r8)
 8013822:	46bd      	mov	sp, r7
 8013824:	b006      	add	sp, #24
 8013826:	bd80      	pop	{r7, pc}
 8013828:	200021b0 	.word	0x200021b0
 801382c:	40000400 	.word	0x40000400
 8013830:	0000ffff 	.word	0x0000ffff

08013834 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8013834:	b580      	push	{r7, lr}
 8013836:	b082      	sub	sp, #8
 8013838:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 801383a:	003b      	movs	r3, r7
 801383c:	0018      	movs	r0, r3
 801383e:	2308      	movs	r3, #8
 8013840:	001a      	movs	r2, r3
 8013842:	2100      	movs	r1, #0
 8013844:	f012 fe6c 	bl	8026520 <memset>

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8013848:	4b15      	ldr	r3, [pc, #84]	@ (80138a0 <MX_TIM6_Init+0x6c>)
 801384a:	4a16      	ldr	r2, [pc, #88]	@ (80138a4 <MX_TIM6_Init+0x70>)
 801384c:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 10;
 801384e:	4b14      	ldr	r3, [pc, #80]	@ (80138a0 <MX_TIM6_Init+0x6c>)
 8013850:	220a      	movs	r2, #10
 8013852:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8013854:	4b12      	ldr	r3, [pc, #72]	@ (80138a0 <MX_TIM6_Init+0x6c>)
 8013856:	2200      	movs	r2, #0
 8013858:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 801385a:	4b11      	ldr	r3, [pc, #68]	@ (80138a0 <MX_TIM6_Init+0x6c>)
 801385c:	4a12      	ldr	r2, [pc, #72]	@ (80138a8 <MX_TIM6_Init+0x74>)
 801385e:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8013860:	4b0f      	ldr	r3, [pc, #60]	@ (80138a0 <MX_TIM6_Init+0x6c>)
 8013862:	2200      	movs	r2, #0
 8013864:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8013866:	4b0e      	ldr	r3, [pc, #56]	@ (80138a0 <MX_TIM6_Init+0x6c>)
 8013868:	0018      	movs	r0, r3
 801386a:	f009 f969 	bl	801cb40 <HAL_TIM_Base_Init>
 801386e:	1e03      	subs	r3, r0, #0
 8013870:	d001      	beq.n	8013876 <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 8013872:	f7f9 fd99 	bl	800d3a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8013876:	003b      	movs	r3, r7
 8013878:	2200      	movs	r2, #0
 801387a:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 801387c:	003b      	movs	r3, r7
 801387e:	2200      	movs	r2, #0
 8013880:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8013882:	003a      	movs	r2, r7
 8013884:	4b06      	ldr	r3, [pc, #24]	@ (80138a0 <MX_TIM6_Init+0x6c>)
 8013886:	0011      	movs	r1, r2
 8013888:	0018      	movs	r0, r3
 801388a:	f009 fd1f 	bl	801d2cc <HAL_TIMEx_MasterConfigSynchronization>
 801388e:	1e03      	subs	r3, r0, #0
 8013890:	d001      	beq.n	8013896 <MX_TIM6_Init+0x62>
  {
    Error_Handler();
 8013892:	f7f9 fd89 	bl	800d3a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8013896:	46c0      	nop			@ (mov r8, r8)
 8013898:	46bd      	mov	sp, r7
 801389a:	b002      	add	sp, #8
 801389c:	bd80      	pop	{r7, pc}
 801389e:	46c0      	nop			@ (mov r8, r8)
 80138a0:	200021f0 	.word	0x200021f0
 80138a4:	40001000 	.word	0x40001000
 80138a8:	0000ffff 	.word	0x0000ffff

080138ac <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 80138ac:	b580      	push	{r7, lr}
 80138ae:	b082      	sub	sp, #8
 80138b0:	af00      	add	r7, sp, #0
 80138b2:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 80138b4:	687b      	ldr	r3, [r7, #4]
 80138b6:	681a      	ldr	r2, [r3, #0]
 80138b8:	2380      	movs	r3, #128	@ 0x80
 80138ba:	05db      	lsls	r3, r3, #23
 80138bc:	429a      	cmp	r2, r3
 80138be:	d106      	bne.n	80138ce <HAL_TIM_PWM_MspInit+0x22>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80138c0:	4b0a      	ldr	r3, [pc, #40]	@ (80138ec <HAL_TIM_PWM_MspInit+0x40>)
 80138c2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80138c4:	4b09      	ldr	r3, [pc, #36]	@ (80138ec <HAL_TIM_PWM_MspInit+0x40>)
 80138c6:	2101      	movs	r1, #1
 80138c8:	430a      	orrs	r2, r1
 80138ca:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_RCC_TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 80138cc:	e00a      	b.n	80138e4 <HAL_TIM_PWM_MspInit+0x38>
  else if(tim_pwmHandle->Instance==TIM3)
 80138ce:	687b      	ldr	r3, [r7, #4]
 80138d0:	681b      	ldr	r3, [r3, #0]
 80138d2:	4a07      	ldr	r2, [pc, #28]	@ (80138f0 <HAL_TIM_PWM_MspInit+0x44>)
 80138d4:	4293      	cmp	r3, r2
 80138d6:	d105      	bne.n	80138e4 <HAL_TIM_PWM_MspInit+0x38>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80138d8:	4b04      	ldr	r3, [pc, #16]	@ (80138ec <HAL_TIM_PWM_MspInit+0x40>)
 80138da:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80138dc:	4b03      	ldr	r3, [pc, #12]	@ (80138ec <HAL_TIM_PWM_MspInit+0x40>)
 80138de:	2102      	movs	r1, #2
 80138e0:	430a      	orrs	r2, r1
 80138e2:	639a      	str	r2, [r3, #56]	@ 0x38
}
 80138e4:	46c0      	nop			@ (mov r8, r8)
 80138e6:	46bd      	mov	sp, r7
 80138e8:	b002      	add	sp, #8
 80138ea:	bd80      	pop	{r7, pc}
 80138ec:	40021000 	.word	0x40021000
 80138f0:	40000400 	.word	0x40000400

080138f4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80138f4:	b580      	push	{r7, lr}
 80138f6:	b082      	sub	sp, #8
 80138f8:	af00      	add	r7, sp, #0
 80138fa:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 80138fc:	687b      	ldr	r3, [r7, #4]
 80138fe:	681b      	ldr	r3, [r3, #0]
 8013900:	4a06      	ldr	r2, [pc, #24]	@ (801391c <HAL_TIM_Base_MspInit+0x28>)
 8013902:	4293      	cmp	r3, r2
 8013904:	d105      	bne.n	8013912 <HAL_TIM_Base_MspInit+0x1e>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8013906:	4b06      	ldr	r3, [pc, #24]	@ (8013920 <HAL_TIM_Base_MspInit+0x2c>)
 8013908:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801390a:	4b05      	ldr	r3, [pc, #20]	@ (8013920 <HAL_TIM_Base_MspInit+0x2c>)
 801390c:	2110      	movs	r1, #16
 801390e:	430a      	orrs	r2, r1
 8013910:	639a      	str	r2, [r3, #56]	@ 0x38
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 8013912:	46c0      	nop			@ (mov r8, r8)
 8013914:	46bd      	mov	sp, r7
 8013916:	b002      	add	sp, #8
 8013918:	bd80      	pop	{r7, pc}
 801391a:	46c0      	nop			@ (mov r8, r8)
 801391c:	40001000 	.word	0x40001000
 8013920:	40021000 	.word	0x40021000

08013924 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8013924:	b590      	push	{r4, r7, lr}
 8013926:	b08b      	sub	sp, #44	@ 0x2c
 8013928:	af00      	add	r7, sp, #0
 801392a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 801392c:	2414      	movs	r4, #20
 801392e:	193b      	adds	r3, r7, r4
 8013930:	0018      	movs	r0, r3
 8013932:	2314      	movs	r3, #20
 8013934:	001a      	movs	r2, r3
 8013936:	2100      	movs	r1, #0
 8013938:	f012 fdf2 	bl	8026520 <memset>
  if(timHandle->Instance==TIM2)
 801393c:	687b      	ldr	r3, [r7, #4]
 801393e:	681a      	ldr	r2, [r3, #0]
 8013940:	2380      	movs	r3, #128	@ 0x80
 8013942:	05db      	lsls	r3, r3, #23
 8013944:	429a      	cmp	r2, r3
 8013946:	d123      	bne.n	8013990 <HAL_TIM_MspPostInit+0x6c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8013948:	4b27      	ldr	r3, [pc, #156]	@ (80139e8 <HAL_TIM_MspPostInit+0xc4>)
 801394a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801394c:	4b26      	ldr	r3, [pc, #152]	@ (80139e8 <HAL_TIM_MspPostInit+0xc4>)
 801394e:	2101      	movs	r1, #1
 8013950:	430a      	orrs	r2, r1
 8013952:	62da      	str	r2, [r3, #44]	@ 0x2c
 8013954:	4b24      	ldr	r3, [pc, #144]	@ (80139e8 <HAL_TIM_MspPostInit+0xc4>)
 8013956:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013958:	2201      	movs	r2, #1
 801395a:	4013      	ands	r3, r2
 801395c:	613b      	str	r3, [r7, #16]
 801395e:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PA2     ------> TIM2_CH3
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = MCU_LED_B_R_Pin|MCU_LED_B_G_Pin|MCU_LED_B_B_Pin;
 8013960:	0021      	movs	r1, r4
 8013962:	187b      	adds	r3, r7, r1
 8013964:	220d      	movs	r2, #13
 8013966:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8013968:	187b      	adds	r3, r7, r1
 801396a:	2202      	movs	r2, #2
 801396c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801396e:	187b      	adds	r3, r7, r1
 8013970:	2200      	movs	r2, #0
 8013972:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8013974:	187b      	adds	r3, r7, r1
 8013976:	2200      	movs	r2, #0
 8013978:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 801397a:	187b      	adds	r3, r7, r1
 801397c:	2202      	movs	r2, #2
 801397e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8013980:	187a      	adds	r2, r7, r1
 8013982:	23a0      	movs	r3, #160	@ 0xa0
 8013984:	05db      	lsls	r3, r3, #23
 8013986:	0011      	movs	r1, r2
 8013988:	0018      	movs	r0, r3
 801398a:	f002 f8a7 	bl	8015adc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 801398e:	e027      	b.n	80139e0 <HAL_TIM_MspPostInit+0xbc>
  else if(timHandle->Instance==TIM3)
 8013990:	687b      	ldr	r3, [r7, #4]
 8013992:	681b      	ldr	r3, [r3, #0]
 8013994:	4a15      	ldr	r2, [pc, #84]	@ (80139ec <HAL_TIM_MspPostInit+0xc8>)
 8013996:	4293      	cmp	r3, r2
 8013998:	d122      	bne.n	80139e0 <HAL_TIM_MspPostInit+0xbc>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 801399a:	4b13      	ldr	r3, [pc, #76]	@ (80139e8 <HAL_TIM_MspPostInit+0xc4>)
 801399c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801399e:	4b12      	ldr	r3, [pc, #72]	@ (80139e8 <HAL_TIM_MspPostInit+0xc4>)
 80139a0:	2104      	movs	r1, #4
 80139a2:	430a      	orrs	r2, r1
 80139a4:	62da      	str	r2, [r3, #44]	@ 0x2c
 80139a6:	4b10      	ldr	r3, [pc, #64]	@ (80139e8 <HAL_TIM_MspPostInit+0xc4>)
 80139a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80139aa:	2204      	movs	r2, #4
 80139ac:	4013      	ands	r3, r2
 80139ae:	60fb      	str	r3, [r7, #12]
 80139b0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = MCU_LED_A_R_Pin|MCU_LED_A_G_Pin|MCU_LED_A_B_Pin;
 80139b2:	2114      	movs	r1, #20
 80139b4:	187b      	adds	r3, r7, r1
 80139b6:	22e0      	movs	r2, #224	@ 0xe0
 80139b8:	0052      	lsls	r2, r2, #1
 80139ba:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80139bc:	187b      	adds	r3, r7, r1
 80139be:	2202      	movs	r2, #2
 80139c0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80139c2:	187b      	adds	r3, r7, r1
 80139c4:	2200      	movs	r2, #0
 80139c6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80139c8:	187b      	adds	r3, r7, r1
 80139ca:	2200      	movs	r2, #0
 80139cc:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80139ce:	187b      	adds	r3, r7, r1
 80139d0:	2202      	movs	r2, #2
 80139d2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80139d4:	187b      	adds	r3, r7, r1
 80139d6:	4a06      	ldr	r2, [pc, #24]	@ (80139f0 <HAL_TIM_MspPostInit+0xcc>)
 80139d8:	0019      	movs	r1, r3
 80139da:	0010      	movs	r0, r2
 80139dc:	f002 f87e 	bl	8015adc <HAL_GPIO_Init>
}
 80139e0:	46c0      	nop			@ (mov r8, r8)
 80139e2:	46bd      	mov	sp, r7
 80139e4:	b00b      	add	sp, #44	@ 0x2c
 80139e6:	bd90      	pop	{r4, r7, pc}
 80139e8:	40021000 	.word	0x40021000
 80139ec:	40000400 	.word	0x40000400
 80139f0:	50000800 	.word	0x50000800

080139f4 <MX_LPUART1_UART_Init>:
DMA_HandleTypeDef hdma_usart4_tx;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 80139f4:	b580      	push	{r7, lr}
 80139f6:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 80139f8:	4b17      	ldr	r3, [pc, #92]	@ (8013a58 <MX_LPUART1_UART_Init+0x64>)
 80139fa:	4a18      	ldr	r2, [pc, #96]	@ (8013a5c <MX_LPUART1_UART_Init+0x68>)
 80139fc:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 80139fe:	4b16      	ldr	r3, [pc, #88]	@ (8013a58 <MX_LPUART1_UART_Init+0x64>)
 8013a00:	22e1      	movs	r2, #225	@ 0xe1
 8013a02:	0252      	lsls	r2, r2, #9
 8013a04:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8013a06:	4b14      	ldr	r3, [pc, #80]	@ (8013a58 <MX_LPUART1_UART_Init+0x64>)
 8013a08:	2200      	movs	r2, #0
 8013a0a:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8013a0c:	4b12      	ldr	r3, [pc, #72]	@ (8013a58 <MX_LPUART1_UART_Init+0x64>)
 8013a0e:	2200      	movs	r2, #0
 8013a10:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8013a12:	4b11      	ldr	r3, [pc, #68]	@ (8013a58 <MX_LPUART1_UART_Init+0x64>)
 8013a14:	2200      	movs	r2, #0
 8013a16:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8013a18:	4b0f      	ldr	r3, [pc, #60]	@ (8013a58 <MX_LPUART1_UART_Init+0x64>)
 8013a1a:	220c      	movs	r2, #12
 8013a1c:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8013a1e:	4b0e      	ldr	r3, [pc, #56]	@ (8013a58 <MX_LPUART1_UART_Init+0x64>)
 8013a20:	2200      	movs	r2, #0
 8013a22:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8013a24:	4b0c      	ldr	r3, [pc, #48]	@ (8013a58 <MX_LPUART1_UART_Init+0x64>)
 8013a26:	2200      	movs	r2, #0
 8013a28:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT|UART_ADVFEATURE_RXOVERRUNDISABLE_INIT;
 8013a2a:	4b0b      	ldr	r3, [pc, #44]	@ (8013a58 <MX_LPUART1_UART_Init+0x64>)
 8013a2c:	2218      	movs	r2, #24
 8013a2e:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
 8013a30:	4b09      	ldr	r3, [pc, #36]	@ (8013a58 <MX_LPUART1_UART_Init+0x64>)
 8013a32:	2280      	movs	r2, #128	@ 0x80
 8013a34:	0212      	lsls	r2, r2, #8
 8013a36:	635a      	str	r2, [r3, #52]	@ 0x34
  hlpuart1.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 8013a38:	4b07      	ldr	r3, [pc, #28]	@ (8013a58 <MX_LPUART1_UART_Init+0x64>)
 8013a3a:	2280      	movs	r2, #128	@ 0x80
 8013a3c:	0152      	lsls	r2, r2, #5
 8013a3e:	639a      	str	r2, [r3, #56]	@ 0x38
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8013a40:	4b05      	ldr	r3, [pc, #20]	@ (8013a58 <MX_LPUART1_UART_Init+0x64>)
 8013a42:	0018      	movs	r0, r3
 8013a44:	f009 fcbe 	bl	801d3c4 <HAL_UART_Init>
 8013a48:	1e03      	subs	r3, r0, #0
 8013a4a:	d001      	beq.n	8013a50 <MX_LPUART1_UART_Init+0x5c>
  {
    Error_Handler();
 8013a4c:	f7f9 fcac 	bl	800d3a8 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8013a50:	46c0      	nop			@ (mov r8, r8)
 8013a52:	46bd      	mov	sp, r7
 8013a54:	bd80      	pop	{r7, pc}
 8013a56:	46c0      	nop			@ (mov r8, r8)
 8013a58:	20002230 	.word	0x20002230
 8013a5c:	40004800 	.word	0x40004800

08013a60 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8013a60:	b580      	push	{r7, lr}
 8013a62:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8013a64:	4b14      	ldr	r3, [pc, #80]	@ (8013ab8 <MX_USART1_UART_Init+0x58>)
 8013a66:	4a15      	ldr	r2, [pc, #84]	@ (8013abc <MX_USART1_UART_Init+0x5c>)
 8013a68:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8013a6a:	4b13      	ldr	r3, [pc, #76]	@ (8013ab8 <MX_USART1_UART_Init+0x58>)
 8013a6c:	22e1      	movs	r2, #225	@ 0xe1
 8013a6e:	0252      	lsls	r2, r2, #9
 8013a70:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8013a72:	4b11      	ldr	r3, [pc, #68]	@ (8013ab8 <MX_USART1_UART_Init+0x58>)
 8013a74:	2200      	movs	r2, #0
 8013a76:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8013a78:	4b0f      	ldr	r3, [pc, #60]	@ (8013ab8 <MX_USART1_UART_Init+0x58>)
 8013a7a:	2200      	movs	r2, #0
 8013a7c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8013a7e:	4b0e      	ldr	r3, [pc, #56]	@ (8013ab8 <MX_USART1_UART_Init+0x58>)
 8013a80:	2200      	movs	r2, #0
 8013a82:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8013a84:	4b0c      	ldr	r3, [pc, #48]	@ (8013ab8 <MX_USART1_UART_Init+0x58>)
 8013a86:	220c      	movs	r2, #12
 8013a88:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8013a8a:	4b0b      	ldr	r3, [pc, #44]	@ (8013ab8 <MX_USART1_UART_Init+0x58>)
 8013a8c:	2200      	movs	r2, #0
 8013a8e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8013a90:	4b09      	ldr	r3, [pc, #36]	@ (8013ab8 <MX_USART1_UART_Init+0x58>)
 8013a92:	2200      	movs	r2, #0
 8013a94:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8013a96:	4b08      	ldr	r3, [pc, #32]	@ (8013ab8 <MX_USART1_UART_Init+0x58>)
 8013a98:	2200      	movs	r2, #0
 8013a9a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8013a9c:	4b06      	ldr	r3, [pc, #24]	@ (8013ab8 <MX_USART1_UART_Init+0x58>)
 8013a9e:	2200      	movs	r2, #0
 8013aa0:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8013aa2:	4b05      	ldr	r3, [pc, #20]	@ (8013ab8 <MX_USART1_UART_Init+0x58>)
 8013aa4:	0018      	movs	r0, r3
 8013aa6:	f009 fc8d 	bl	801d3c4 <HAL_UART_Init>
 8013aaa:	1e03      	subs	r3, r0, #0
 8013aac:	d001      	beq.n	8013ab2 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8013aae:	f7f9 fc7b 	bl	800d3a8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8013ab2:	46c0      	nop			@ (mov r8, r8)
 8013ab4:	46bd      	mov	sp, r7
 8013ab6:	bd80      	pop	{r7, pc}
 8013ab8:	200022e8 	.word	0x200022e8
 8013abc:	40013800 	.word	0x40013800

08013ac0 <MX_USART4_UART_Init>:
/* USART4 init function */

void MX_USART4_UART_Init(void)
{
 8013ac0:	b580      	push	{r7, lr}
 8013ac2:	af00      	add	r7, sp, #0
  /* USER CODE END USART4_Init 0 */

  /* USER CODE BEGIN USART4_Init 1 */

  /* USER CODE END USART4_Init 1 */
  huart4.Instance = USART4;
 8013ac4:	4b14      	ldr	r3, [pc, #80]	@ (8013b18 <MX_USART4_UART_Init+0x58>)
 8013ac6:	4a15      	ldr	r2, [pc, #84]	@ (8013b1c <MX_USART4_UART_Init+0x5c>)
 8013ac8:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8013aca:	4b13      	ldr	r3, [pc, #76]	@ (8013b18 <MX_USART4_UART_Init+0x58>)
 8013acc:	22e1      	movs	r2, #225	@ 0xe1
 8013ace:	0252      	lsls	r2, r2, #9
 8013ad0:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8013ad2:	4b11      	ldr	r3, [pc, #68]	@ (8013b18 <MX_USART4_UART_Init+0x58>)
 8013ad4:	2200      	movs	r2, #0
 8013ad6:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8013ad8:	4b0f      	ldr	r3, [pc, #60]	@ (8013b18 <MX_USART4_UART_Init+0x58>)
 8013ada:	2200      	movs	r2, #0
 8013adc:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8013ade:	4b0e      	ldr	r3, [pc, #56]	@ (8013b18 <MX_USART4_UART_Init+0x58>)
 8013ae0:	2200      	movs	r2, #0
 8013ae2:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8013ae4:	4b0c      	ldr	r3, [pc, #48]	@ (8013b18 <MX_USART4_UART_Init+0x58>)
 8013ae6:	220c      	movs	r2, #12
 8013ae8:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8013aea:	4b0b      	ldr	r3, [pc, #44]	@ (8013b18 <MX_USART4_UART_Init+0x58>)
 8013aec:	2200      	movs	r2, #0
 8013aee:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8013af0:	4b09      	ldr	r3, [pc, #36]	@ (8013b18 <MX_USART4_UART_Init+0x58>)
 8013af2:	2200      	movs	r2, #0
 8013af4:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8013af6:	4b08      	ldr	r3, [pc, #32]	@ (8013b18 <MX_USART4_UART_Init+0x58>)
 8013af8:	2200      	movs	r2, #0
 8013afa:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8013afc:	4b06      	ldr	r3, [pc, #24]	@ (8013b18 <MX_USART4_UART_Init+0x58>)
 8013afe:	2200      	movs	r2, #0
 8013b00:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8013b02:	4b05      	ldr	r3, [pc, #20]	@ (8013b18 <MX_USART4_UART_Init+0x58>)
 8013b04:	0018      	movs	r0, r3
 8013b06:	f009 fc5d 	bl	801d3c4 <HAL_UART_Init>
 8013b0a:	1e03      	subs	r3, r0, #0
 8013b0c:	d001      	beq.n	8013b12 <MX_USART4_UART_Init+0x52>
  {
    Error_Handler();
 8013b0e:	f7f9 fc4b 	bl	800d3a8 <Error_Handler>
  }
  /* USER CODE BEGIN USART4_Init 2 */

  /* USER CODE END USART4_Init 2 */

}
 8013b12:	46c0      	nop			@ (mov r8, r8)
 8013b14:	46bd      	mov	sp, r7
 8013b16:	bd80      	pop	{r7, pc}
 8013b18:	200023a0 	.word	0x200023a0
 8013b1c:	40004c00 	.word	0x40004c00

08013b20 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8013b20:	b590      	push	{r4, r7, lr}
 8013b22:	b08d      	sub	sp, #52	@ 0x34
 8013b24:	af00      	add	r7, sp, #0
 8013b26:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8013b28:	241c      	movs	r4, #28
 8013b2a:	193b      	adds	r3, r7, r4
 8013b2c:	0018      	movs	r0, r3
 8013b2e:	2314      	movs	r3, #20
 8013b30:	001a      	movs	r2, r3
 8013b32:	2100      	movs	r1, #0
 8013b34:	f012 fcf4 	bl	8026520 <memset>
  if(uartHandle->Instance==LPUART1)
 8013b38:	687b      	ldr	r3, [r7, #4]
 8013b3a:	681b      	ldr	r3, [r3, #0]
 8013b3c:	4a8b      	ldr	r2, [pc, #556]	@ (8013d6c <HAL_UART_MspInit+0x24c>)
 8013b3e:	4293      	cmp	r3, r2
 8013b40:	d129      	bne.n	8013b96 <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8013b42:	4b8b      	ldr	r3, [pc, #556]	@ (8013d70 <HAL_UART_MspInit+0x250>)
 8013b44:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8013b46:	4b8a      	ldr	r3, [pc, #552]	@ (8013d70 <HAL_UART_MspInit+0x250>)
 8013b48:	2180      	movs	r1, #128	@ 0x80
 8013b4a:	02c9      	lsls	r1, r1, #11
 8013b4c:	430a      	orrs	r2, r1
 8013b4e:	639a      	str	r2, [r3, #56]	@ 0x38

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8013b50:	4b87      	ldr	r3, [pc, #540]	@ (8013d70 <HAL_UART_MspInit+0x250>)
 8013b52:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8013b54:	4b86      	ldr	r3, [pc, #536]	@ (8013d70 <HAL_UART_MspInit+0x250>)
 8013b56:	2104      	movs	r1, #4
 8013b58:	430a      	orrs	r2, r1
 8013b5a:	62da      	str	r2, [r3, #44]	@ 0x2c
 8013b5c:	4b84      	ldr	r3, [pc, #528]	@ (8013d70 <HAL_UART_MspInit+0x250>)
 8013b5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013b60:	2204      	movs	r2, #4
 8013b62:	4013      	ands	r3, r2
 8013b64:	61bb      	str	r3, [r7, #24]
 8013b66:	69bb      	ldr	r3, [r7, #24]
    /**LPUART1 GPIO Configuration
    PC0     ------> LPUART1_RX
    PC1     ------> LPUART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8013b68:	0021      	movs	r1, r4
 8013b6a:	187b      	adds	r3, r7, r1
 8013b6c:	2203      	movs	r2, #3
 8013b6e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8013b70:	187b      	adds	r3, r7, r1
 8013b72:	2202      	movs	r2, #2
 8013b74:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8013b76:	187b      	adds	r3, r7, r1
 8013b78:	2200      	movs	r2, #0
 8013b7a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8013b7c:	187b      	adds	r3, r7, r1
 8013b7e:	2203      	movs	r2, #3
 8013b80:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_LPUART1;
 8013b82:	187b      	adds	r3, r7, r1
 8013b84:	2206      	movs	r2, #6
 8013b86:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8013b88:	187b      	adds	r3, r7, r1
 8013b8a:	4a7a      	ldr	r2, [pc, #488]	@ (8013d74 <HAL_UART_MspInit+0x254>)
 8013b8c:	0019      	movs	r1, r3
 8013b8e:	0010      	movs	r0, r2
 8013b90:	f001 ffa4 	bl	8015adc <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(USART4_5_IRQn);
  /* USER CODE BEGIN USART4_MspInit 1 */

  /* USER CODE END USART4_MspInit 1 */
  }
}
 8013b94:	e0e5      	b.n	8013d62 <HAL_UART_MspInit+0x242>
  else if(uartHandle->Instance==USART1)
 8013b96:	687b      	ldr	r3, [r7, #4]
 8013b98:	681b      	ldr	r3, [r3, #0]
 8013b9a:	4a77      	ldr	r2, [pc, #476]	@ (8013d78 <HAL_UART_MspInit+0x258>)
 8013b9c:	4293      	cmp	r3, r2
 8013b9e:	d133      	bne.n	8013c08 <HAL_UART_MspInit+0xe8>
    __HAL_RCC_USART1_CLK_ENABLE();
 8013ba0:	4b73      	ldr	r3, [pc, #460]	@ (8013d70 <HAL_UART_MspInit+0x250>)
 8013ba2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8013ba4:	4b72      	ldr	r3, [pc, #456]	@ (8013d70 <HAL_UART_MspInit+0x250>)
 8013ba6:	2180      	movs	r1, #128	@ 0x80
 8013ba8:	01c9      	lsls	r1, r1, #7
 8013baa:	430a      	orrs	r2, r1
 8013bac:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8013bae:	4b70      	ldr	r3, [pc, #448]	@ (8013d70 <HAL_UART_MspInit+0x250>)
 8013bb0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8013bb2:	4b6f      	ldr	r3, [pc, #444]	@ (8013d70 <HAL_UART_MspInit+0x250>)
 8013bb4:	2101      	movs	r1, #1
 8013bb6:	430a      	orrs	r2, r1
 8013bb8:	62da      	str	r2, [r3, #44]	@ 0x2c
 8013bba:	4b6d      	ldr	r3, [pc, #436]	@ (8013d70 <HAL_UART_MspInit+0x250>)
 8013bbc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013bbe:	2201      	movs	r2, #1
 8013bc0:	4013      	ands	r3, r2
 8013bc2:	617b      	str	r3, [r7, #20]
 8013bc4:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8013bc6:	211c      	movs	r1, #28
 8013bc8:	187b      	adds	r3, r7, r1
 8013bca:	22c0      	movs	r2, #192	@ 0xc0
 8013bcc:	00d2      	lsls	r2, r2, #3
 8013bce:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8013bd0:	187b      	adds	r3, r7, r1
 8013bd2:	2202      	movs	r2, #2
 8013bd4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8013bd6:	187b      	adds	r3, r7, r1
 8013bd8:	2200      	movs	r2, #0
 8013bda:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8013bdc:	187b      	adds	r3, r7, r1
 8013bde:	2203      	movs	r2, #3
 8013be0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8013be2:	187b      	adds	r3, r7, r1
 8013be4:	2204      	movs	r2, #4
 8013be6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8013be8:	187a      	adds	r2, r7, r1
 8013bea:	23a0      	movs	r3, #160	@ 0xa0
 8013bec:	05db      	lsls	r3, r3, #23
 8013bee:	0011      	movs	r1, r2
 8013bf0:	0018      	movs	r0, r3
 8013bf2:	f001 ff73 	bl	8015adc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8013bf6:	2200      	movs	r2, #0
 8013bf8:	2100      	movs	r1, #0
 8013bfa:	201b      	movs	r0, #27
 8013bfc:	f001 fb1c 	bl	8015238 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8013c00:	201b      	movs	r0, #27
 8013c02:	f001 fb2e 	bl	8015262 <HAL_NVIC_EnableIRQ>
}
 8013c06:	e0ac      	b.n	8013d62 <HAL_UART_MspInit+0x242>
  else if(uartHandle->Instance==USART4)
 8013c08:	687b      	ldr	r3, [r7, #4]
 8013c0a:	681b      	ldr	r3, [r3, #0]
 8013c0c:	4a5b      	ldr	r2, [pc, #364]	@ (8013d7c <HAL_UART_MspInit+0x25c>)
 8013c0e:	4293      	cmp	r3, r2
 8013c10:	d000      	beq.n	8013c14 <HAL_UART_MspInit+0xf4>
 8013c12:	e0a6      	b.n	8013d62 <HAL_UART_MspInit+0x242>
    __HAL_RCC_USART4_CLK_ENABLE();
 8013c14:	4b56      	ldr	r3, [pc, #344]	@ (8013d70 <HAL_UART_MspInit+0x250>)
 8013c16:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8013c18:	4b55      	ldr	r3, [pc, #340]	@ (8013d70 <HAL_UART_MspInit+0x250>)
 8013c1a:	2180      	movs	r1, #128	@ 0x80
 8013c1c:	0309      	lsls	r1, r1, #12
 8013c1e:	430a      	orrs	r2, r1
 8013c20:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8013c22:	4b53      	ldr	r3, [pc, #332]	@ (8013d70 <HAL_UART_MspInit+0x250>)
 8013c24:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8013c26:	4b52      	ldr	r3, [pc, #328]	@ (8013d70 <HAL_UART_MspInit+0x250>)
 8013c28:	2101      	movs	r1, #1
 8013c2a:	430a      	orrs	r2, r1
 8013c2c:	62da      	str	r2, [r3, #44]	@ 0x2c
 8013c2e:	4b50      	ldr	r3, [pc, #320]	@ (8013d70 <HAL_UART_MspInit+0x250>)
 8013c30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013c32:	2201      	movs	r2, #1
 8013c34:	4013      	ands	r3, r2
 8013c36:	613b      	str	r3, [r7, #16]
 8013c38:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8013c3a:	4b4d      	ldr	r3, [pc, #308]	@ (8013d70 <HAL_UART_MspInit+0x250>)
 8013c3c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8013c3e:	4b4c      	ldr	r3, [pc, #304]	@ (8013d70 <HAL_UART_MspInit+0x250>)
 8013c40:	2104      	movs	r1, #4
 8013c42:	430a      	orrs	r2, r1
 8013c44:	62da      	str	r2, [r3, #44]	@ 0x2c
 8013c46:	4b4a      	ldr	r3, [pc, #296]	@ (8013d70 <HAL_UART_MspInit+0x250>)
 8013c48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013c4a:	2204      	movs	r2, #4
 8013c4c:	4013      	ands	r3, r2
 8013c4e:	60fb      	str	r3, [r7, #12]
 8013c50:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8013c52:	241c      	movs	r4, #28
 8013c54:	193b      	adds	r3, r7, r4
 8013c56:	2202      	movs	r2, #2
 8013c58:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8013c5a:	193b      	adds	r3, r7, r4
 8013c5c:	2202      	movs	r2, #2
 8013c5e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8013c60:	193b      	adds	r3, r7, r4
 8013c62:	2200      	movs	r2, #0
 8013c64:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8013c66:	193b      	adds	r3, r7, r4
 8013c68:	2203      	movs	r2, #3
 8013c6a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_USART4;
 8013c6c:	193b      	adds	r3, r7, r4
 8013c6e:	2206      	movs	r2, #6
 8013c70:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8013c72:	193a      	adds	r2, r7, r4
 8013c74:	23a0      	movs	r3, #160	@ 0xa0
 8013c76:	05db      	lsls	r3, r3, #23
 8013c78:	0011      	movs	r1, r2
 8013c7a:	0018      	movs	r0, r3
 8013c7c:	f001 ff2e 	bl	8015adc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8013c80:	0021      	movs	r1, r4
 8013c82:	187b      	adds	r3, r7, r1
 8013c84:	2280      	movs	r2, #128	@ 0x80
 8013c86:	00d2      	lsls	r2, r2, #3
 8013c88:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8013c8a:	187b      	adds	r3, r7, r1
 8013c8c:	2202      	movs	r2, #2
 8013c8e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8013c90:	187b      	adds	r3, r7, r1
 8013c92:	2200      	movs	r2, #0
 8013c94:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8013c96:	187b      	adds	r3, r7, r1
 8013c98:	2203      	movs	r2, #3
 8013c9a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_USART4;
 8013c9c:	187b      	adds	r3, r7, r1
 8013c9e:	2206      	movs	r2, #6
 8013ca0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8013ca2:	187b      	adds	r3, r7, r1
 8013ca4:	4a33      	ldr	r2, [pc, #204]	@ (8013d74 <HAL_UART_MspInit+0x254>)
 8013ca6:	0019      	movs	r1, r3
 8013ca8:	0010      	movs	r0, r2
 8013caa:	f001 ff17 	bl	8015adc <HAL_GPIO_Init>
    hdma_usart4_rx.Instance = DMA1_Channel6;
 8013cae:	4b34      	ldr	r3, [pc, #208]	@ (8013d80 <HAL_UART_MspInit+0x260>)
 8013cb0:	4a34      	ldr	r2, [pc, #208]	@ (8013d84 <HAL_UART_MspInit+0x264>)
 8013cb2:	601a      	str	r2, [r3, #0]
    hdma_usart4_rx.Init.Request = DMA_REQUEST_12;
 8013cb4:	4b32      	ldr	r3, [pc, #200]	@ (8013d80 <HAL_UART_MspInit+0x260>)
 8013cb6:	220c      	movs	r2, #12
 8013cb8:	605a      	str	r2, [r3, #4]
    hdma_usart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8013cba:	4b31      	ldr	r3, [pc, #196]	@ (8013d80 <HAL_UART_MspInit+0x260>)
 8013cbc:	2200      	movs	r2, #0
 8013cbe:	609a      	str	r2, [r3, #8]
    hdma_usart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8013cc0:	4b2f      	ldr	r3, [pc, #188]	@ (8013d80 <HAL_UART_MspInit+0x260>)
 8013cc2:	2200      	movs	r2, #0
 8013cc4:	60da      	str	r2, [r3, #12]
    hdma_usart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8013cc6:	4b2e      	ldr	r3, [pc, #184]	@ (8013d80 <HAL_UART_MspInit+0x260>)
 8013cc8:	2280      	movs	r2, #128	@ 0x80
 8013cca:	611a      	str	r2, [r3, #16]
    hdma_usart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8013ccc:	4b2c      	ldr	r3, [pc, #176]	@ (8013d80 <HAL_UART_MspInit+0x260>)
 8013cce:	2200      	movs	r2, #0
 8013cd0:	615a      	str	r2, [r3, #20]
    hdma_usart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8013cd2:	4b2b      	ldr	r3, [pc, #172]	@ (8013d80 <HAL_UART_MspInit+0x260>)
 8013cd4:	2200      	movs	r2, #0
 8013cd6:	619a      	str	r2, [r3, #24]
    hdma_usart4_rx.Init.Mode = DMA_CIRCULAR;
 8013cd8:	4b29      	ldr	r3, [pc, #164]	@ (8013d80 <HAL_UART_MspInit+0x260>)
 8013cda:	2220      	movs	r2, #32
 8013cdc:	61da      	str	r2, [r3, #28]
    hdma_usart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 8013cde:	4b28      	ldr	r3, [pc, #160]	@ (8013d80 <HAL_UART_MspInit+0x260>)
 8013ce0:	2200      	movs	r2, #0
 8013ce2:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart4_rx) != HAL_OK)
 8013ce4:	4b26      	ldr	r3, [pc, #152]	@ (8013d80 <HAL_UART_MspInit+0x260>)
 8013ce6:	0018      	movs	r0, r3
 8013ce8:	f001 fadc 	bl	80152a4 <HAL_DMA_Init>
 8013cec:	1e03      	subs	r3, r0, #0
 8013cee:	d001      	beq.n	8013cf4 <HAL_UART_MspInit+0x1d4>
      Error_Handler();
 8013cf0:	f7f9 fb5a 	bl	800d3a8 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart4_rx);
 8013cf4:	687b      	ldr	r3, [r7, #4]
 8013cf6:	4a22      	ldr	r2, [pc, #136]	@ (8013d80 <HAL_UART_MspInit+0x260>)
 8013cf8:	675a      	str	r2, [r3, #116]	@ 0x74
 8013cfa:	4b21      	ldr	r3, [pc, #132]	@ (8013d80 <HAL_UART_MspInit+0x260>)
 8013cfc:	687a      	ldr	r2, [r7, #4]
 8013cfe:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_usart4_tx.Instance = DMA1_Channel7;
 8013d00:	4b21      	ldr	r3, [pc, #132]	@ (8013d88 <HAL_UART_MspInit+0x268>)
 8013d02:	4a22      	ldr	r2, [pc, #136]	@ (8013d8c <HAL_UART_MspInit+0x26c>)
 8013d04:	601a      	str	r2, [r3, #0]
    hdma_usart4_tx.Init.Request = DMA_REQUEST_12;
 8013d06:	4b20      	ldr	r3, [pc, #128]	@ (8013d88 <HAL_UART_MspInit+0x268>)
 8013d08:	220c      	movs	r2, #12
 8013d0a:	605a      	str	r2, [r3, #4]
    hdma_usart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8013d0c:	4b1e      	ldr	r3, [pc, #120]	@ (8013d88 <HAL_UART_MspInit+0x268>)
 8013d0e:	2210      	movs	r2, #16
 8013d10:	609a      	str	r2, [r3, #8]
    hdma_usart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8013d12:	4b1d      	ldr	r3, [pc, #116]	@ (8013d88 <HAL_UART_MspInit+0x268>)
 8013d14:	2200      	movs	r2, #0
 8013d16:	60da      	str	r2, [r3, #12]
    hdma_usart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 8013d18:	4b1b      	ldr	r3, [pc, #108]	@ (8013d88 <HAL_UART_MspInit+0x268>)
 8013d1a:	2280      	movs	r2, #128	@ 0x80
 8013d1c:	611a      	str	r2, [r3, #16]
    hdma_usart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8013d1e:	4b1a      	ldr	r3, [pc, #104]	@ (8013d88 <HAL_UART_MspInit+0x268>)
 8013d20:	2200      	movs	r2, #0
 8013d22:	615a      	str	r2, [r3, #20]
    hdma_usart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8013d24:	4b18      	ldr	r3, [pc, #96]	@ (8013d88 <HAL_UART_MspInit+0x268>)
 8013d26:	2200      	movs	r2, #0
 8013d28:	619a      	str	r2, [r3, #24]
    hdma_usart4_tx.Init.Mode = DMA_NORMAL;
 8013d2a:	4b17      	ldr	r3, [pc, #92]	@ (8013d88 <HAL_UART_MspInit+0x268>)
 8013d2c:	2200      	movs	r2, #0
 8013d2e:	61da      	str	r2, [r3, #28]
    hdma_usart4_tx.Init.Priority = DMA_PRIORITY_LOW;
 8013d30:	4b15      	ldr	r3, [pc, #84]	@ (8013d88 <HAL_UART_MspInit+0x268>)
 8013d32:	2200      	movs	r2, #0
 8013d34:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart4_tx) != HAL_OK)
 8013d36:	4b14      	ldr	r3, [pc, #80]	@ (8013d88 <HAL_UART_MspInit+0x268>)
 8013d38:	0018      	movs	r0, r3
 8013d3a:	f001 fab3 	bl	80152a4 <HAL_DMA_Init>
 8013d3e:	1e03      	subs	r3, r0, #0
 8013d40:	d001      	beq.n	8013d46 <HAL_UART_MspInit+0x226>
      Error_Handler();
 8013d42:	f7f9 fb31 	bl	800d3a8 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart4_tx);
 8013d46:	687b      	ldr	r3, [r7, #4]
 8013d48:	4a0f      	ldr	r2, [pc, #60]	@ (8013d88 <HAL_UART_MspInit+0x268>)
 8013d4a:	671a      	str	r2, [r3, #112]	@ 0x70
 8013d4c:	4b0e      	ldr	r3, [pc, #56]	@ (8013d88 <HAL_UART_MspInit+0x268>)
 8013d4e:	687a      	ldr	r2, [r7, #4]
 8013d50:	629a      	str	r2, [r3, #40]	@ 0x28
    HAL_NVIC_SetPriority(USART4_5_IRQn, 0, 0);
 8013d52:	2200      	movs	r2, #0
 8013d54:	2100      	movs	r1, #0
 8013d56:	200e      	movs	r0, #14
 8013d58:	f001 fa6e 	bl	8015238 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART4_5_IRQn);
 8013d5c:	200e      	movs	r0, #14
 8013d5e:	f001 fa80 	bl	8015262 <HAL_NVIC_EnableIRQ>
}
 8013d62:	46c0      	nop			@ (mov r8, r8)
 8013d64:	46bd      	mov	sp, r7
 8013d66:	b00d      	add	sp, #52	@ 0x34
 8013d68:	bd90      	pop	{r4, r7, pc}
 8013d6a:	46c0      	nop			@ (mov r8, r8)
 8013d6c:	40004800 	.word	0x40004800
 8013d70:	40021000 	.word	0x40021000
 8013d74:	50000800 	.word	0x50000800
 8013d78:	40013800 	.word	0x40013800
 8013d7c:	40004c00 	.word	0x40004c00
 8013d80:	20002458 	.word	0x20002458
 8013d84:	4002006c 	.word	0x4002006c
 8013d88:	200024a0 	.word	0x200024a0
 8013d8c:	40020080 	.word	0x40020080

08013d90 <TimestampIsReached>:
VerboseLevel CurrentVerboseLevel = VERBOSE_ALL;
#define TEXTBUFFER_LEN 192

extern UART_HandleTypeDef huart1;

bool TimestampIsReached(uint32_t timestamp) {
 8013d90:	b580      	push	{r7, lr}
 8013d92:	b086      	sub	sp, #24
 8013d94:	af00      	add	r7, sp, #0
 8013d96:	6078      	str	r0, [r7, #4]
  uint32_t now = HAL_GetTick();
 8013d98:	f000 fdc8 	bl	801492c <HAL_GetTick>
 8013d9c:	0003      	movs	r3, r0
 8013d9e:	617b      	str	r3, [r7, #20]
  const uint32_t HALF_TIME = 0x7FFFFFFF; // ~25 days max timestamp delay
 8013da0:	4b1c      	ldr	r3, [pc, #112]	@ (8013e14 <TimestampIsReached+0x84>)
 8013da2:	613b      	str	r3, [r7, #16]

  // Ensures that the difference between now and timestamp is less than half of
  // the maximum value of the counter. This confirms that the timestamp is not
  // too far in the past.
  bool noOverflow = (now >= timestamp && now - timestamp < HALF_TIME);
 8013da4:	697a      	ldr	r2, [r7, #20]
 8013da6:	687b      	ldr	r3, [r7, #4]
 8013da8:	429a      	cmp	r2, r3
 8013daa:	d307      	bcc.n	8013dbc <TimestampIsReached+0x2c>
 8013dac:	697a      	ldr	r2, [r7, #20]
 8013dae:	687b      	ldr	r3, [r7, #4]
 8013db0:	1ad3      	subs	r3, r2, r3
 8013db2:	693a      	ldr	r2, [r7, #16]
 8013db4:	429a      	cmp	r2, r3
 8013db6:	d901      	bls.n	8013dbc <TimestampIsReached+0x2c>
 8013db8:	2201      	movs	r2, #1
 8013dba:	e000      	b.n	8013dbe <TimestampIsReached+0x2e>
 8013dbc:	2200      	movs	r2, #0
 8013dbe:	230f      	movs	r3, #15
 8013dc0:	18fb      	adds	r3, r7, r3
 8013dc2:	701a      	strb	r2, [r3, #0]
 8013dc4:	781a      	ldrb	r2, [r3, #0]
 8013dc6:	2101      	movs	r1, #1
 8013dc8:	400a      	ands	r2, r1
 8013dca:	701a      	strb	r2, [r3, #0]
  // Ensures that the timestamp is so far ahead that it would have wrapped
  // around past the maximum value of the counter indicating an overflow
  // scenario.
  bool overflowWithTimestampAhead =
      (now < timestamp && timestamp - now > HALF_TIME);
 8013dcc:	697a      	ldr	r2, [r7, #20]
 8013dce:	687b      	ldr	r3, [r7, #4]
 8013dd0:	429a      	cmp	r2, r3
 8013dd2:	d207      	bcs.n	8013de4 <TimestampIsReached+0x54>
 8013dd4:	687a      	ldr	r2, [r7, #4]
 8013dd6:	697b      	ldr	r3, [r7, #20]
 8013dd8:	1ad3      	subs	r3, r2, r3
 8013dda:	693a      	ldr	r2, [r7, #16]
 8013ddc:	429a      	cmp	r2, r3
 8013dde:	d201      	bcs.n	8013de4 <TimestampIsReached+0x54>
 8013de0:	2201      	movs	r2, #1
 8013de2:	e000      	b.n	8013de6 <TimestampIsReached+0x56>
 8013de4:	2200      	movs	r2, #0
  bool overflowWithTimestampAhead =
 8013de6:	200e      	movs	r0, #14
 8013de8:	183b      	adds	r3, r7, r0
 8013dea:	701a      	strb	r2, [r3, #0]
 8013dec:	781a      	ldrb	r2, [r3, #0]
 8013dee:	2101      	movs	r1, #1
 8013df0:	400a      	ands	r2, r1
 8013df2:	701a      	strb	r2, [r3, #0]

  if (noOverflow || overflowWithTimestampAhead) {
 8013df4:	230f      	movs	r3, #15
 8013df6:	18fb      	adds	r3, r7, r3
 8013df8:	781b      	ldrb	r3, [r3, #0]
 8013dfa:	2b00      	cmp	r3, #0
 8013dfc:	d103      	bne.n	8013e06 <TimestampIsReached+0x76>
 8013dfe:	183b      	adds	r3, r7, r0
 8013e00:	781b      	ldrb	r3, [r3, #0]
 8013e02:	2b00      	cmp	r3, #0
 8013e04:	d001      	beq.n	8013e0a <TimestampIsReached+0x7a>
    // Timestamp has been reached
    return true;
 8013e06:	2301      	movs	r3, #1
 8013e08:	e000      	b.n	8013e0c <TimestampIsReached+0x7c>
  }

  // Timestamp not yet reached
  return false;
 8013e0a:	2300      	movs	r3, #0
}
 8013e0c:	0018      	movs	r0, r3
 8013e0e:	46bd      	mov	sp, r7
 8013e10:	b006      	add	sp, #24
 8013e12:	bd80      	pop	{r7, pc}
 8013e14:	7fffffff 	.word	0x7fffffff

08013e18 <AddTimestamp>:

static void AddTimestamp(char *stamp) {
 8013e18:	b580      	push	{r7, lr}
 8013e1a:	b082      	sub	sp, #8
 8013e1c:	af00      	add	r7, sp, #0
 8013e1e:	6078      	str	r0, [r7, #4]
  sprintf(stamp, "[%08lu] ", (uint32_t)HAL_GetTick());
 8013e20:	f000 fd84 	bl	801492c <HAL_GetTick>
 8013e24:	0002      	movs	r2, r0
 8013e26:	4904      	ldr	r1, [pc, #16]	@ (8013e38 <AddTimestamp+0x20>)
 8013e28:	687b      	ldr	r3, [r7, #4]
 8013e2a:	0018      	movs	r0, r3
 8013e2c:	f012 fa30 	bl	8026290 <siprintf>
}
 8013e30:	46c0      	nop			@ (mov r8, r8)
 8013e32:	46bd      	mov	sp, r7
 8013e34:	b002      	add	sp, #8
 8013e36:	bd80      	pop	{r7, pc}
 8013e38:	0802d9f4 	.word	0x0802d9f4

08013e3c <CreateLine>:


void CreateLine(VerboseLevel verboseLevel, char *tag, char *format, ...) {
 8013e3c:	b40c      	push	{r2, r3}
 8013e3e:	b5b0      	push	{r4, r5, r7, lr}
 8013e40:	b0b4      	sub	sp, #208	@ 0xd0
 8013e42:	af00      	add	r7, sp, #0
 8013e44:	0002      	movs	r2, r0
 8013e46:	6039      	str	r1, [r7, #0]
 8013e48:	1dfb      	adds	r3, r7, #7
 8013e4a:	701a      	strb	r2, [r3, #0]

  if (verboseLevel > CurrentVerboseLevel) {
 8013e4c:	4b2a      	ldr	r3, [pc, #168]	@ (8013ef8 <CreateLine+0xbc>)
 8013e4e:	781b      	ldrb	r3, [r3, #0]
 8013e50:	1dfa      	adds	r2, r7, #7
 8013e52:	7812      	ldrb	r2, [r2, #0]
 8013e54:	429a      	cmp	r2, r3
 8013e56:	d848      	bhi.n	8013eea <CreateLine+0xae>
  }

  char textBuffer[TEXTBUFFER_LEN];

  // Format the initial part of the message with the tag and timestamp
  sprintf(textBuffer, "%s ", tag);
 8013e58:	683a      	ldr	r2, [r7, #0]
 8013e5a:	4928      	ldr	r1, [pc, #160]	@ (8013efc <CreateLine+0xc0>)
 8013e5c:	240c      	movs	r4, #12
 8013e5e:	193b      	adds	r3, r7, r4
 8013e60:	0018      	movs	r0, r3
 8013e62:	f012 fa15 	bl	8026290 <siprintf>

  if (CurrentVerboseLevel > VERBOSE_MINIMAL) {
 8013e66:	4b24      	ldr	r3, [pc, #144]	@ (8013ef8 <CreateLine+0xbc>)
 8013e68:	781b      	ldrb	r3, [r3, #0]
 8013e6a:	2b01      	cmp	r3, #1
 8013e6c:	d909      	bls.n	8013e82 <CreateLine+0x46>
    AddTimestamp(&textBuffer[strlen(textBuffer)]);
 8013e6e:	193b      	adds	r3, r7, r4
 8013e70:	0018      	movs	r0, r3
 8013e72:	f7ec f97b 	bl	800016c <strlen>
 8013e76:	0002      	movs	r2, r0
 8013e78:	193b      	adds	r3, r7, r4
 8013e7a:	189b      	adds	r3, r3, r2
 8013e7c:	0018      	movs	r0, r3
 8013e7e:	f7ff ffcb 	bl	8013e18 <AddTimestamp>
  }
  int lineOffset = strlen(textBuffer);
 8013e82:	240c      	movs	r4, #12
 8013e84:	193b      	adds	r3, r7, r4
 8013e86:	0018      	movs	r0, r3
 8013e88:	f7ec f970 	bl	800016c <strlen>
 8013e8c:	0003      	movs	r3, r0
 8013e8e:	21cc      	movs	r1, #204	@ 0xcc
 8013e90:	187a      	adds	r2, r7, r1
 8013e92:	6013      	str	r3, [r2, #0]

  // Format the rest of the message with the variable arguments
  va_list args;
  va_start(args, format);
 8013e94:	23dc      	movs	r3, #220	@ 0xdc
 8013e96:	2508      	movs	r5, #8
 8013e98:	195b      	adds	r3, r3, r5
 8013e9a:	19db      	adds	r3, r3, r7
 8013e9c:	60bb      	str	r3, [r7, #8]
  vsnprintf(&textBuffer[lineOffset], TEXTBUFFER_LEN - lineOffset - 2, format, args);
 8013e9e:	193a      	adds	r2, r7, r4
 8013ea0:	187b      	adds	r3, r7, r1
 8013ea2:	681b      	ldr	r3, [r3, #0]
 8013ea4:	18d0      	adds	r0, r2, r3
 8013ea6:	187b      	adds	r3, r7, r1
 8013ea8:	681b      	ldr	r3, [r3, #0]
 8013eaa:	22be      	movs	r2, #190	@ 0xbe
 8013eac:	1ad3      	subs	r3, r2, r3
 8013eae:	0019      	movs	r1, r3
 8013eb0:	68bb      	ldr	r3, [r7, #8]
 8013eb2:	22d8      	movs	r2, #216	@ 0xd8
 8013eb4:	1952      	adds	r2, r2, r5
 8013eb6:	19d2      	adds	r2, r2, r7
 8013eb8:	6812      	ldr	r2, [r2, #0]
 8013eba:	f012 fa85 	bl	80263c8 <vsniprintf>
  va_end(args);

  if (usblog && Check_USB_PowerOn()){
 8013ebe:	4b10      	ldr	r3, [pc, #64]	@ (8013f00 <CreateLine+0xc4>)
 8013ec0:	781b      	ldrb	r3, [r3, #0]
 8013ec2:	2b00      	cmp	r3, #0
 8013ec4:	d009      	beq.n	8013eda <CreateLine+0x9e>
 8013ec6:	f7f5 fea7 	bl	8009c18 <Check_USB_PowerOn>
 8013eca:	1e03      	subs	r3, r0, #0
 8013ecc:	d005      	beq.n	8013eda <CreateLine+0x9e>
    printf_USB("%s\r\n", textBuffer);
 8013ece:	193a      	adds	r2, r7, r4
 8013ed0:	4b0c      	ldr	r3, [pc, #48]	@ (8013f04 <CreateLine+0xc8>)
 8013ed2:	0011      	movs	r1, r2
 8013ed4:	0018      	movs	r0, r3
 8013ed6:	f7f4 fde5 	bl	8008aa4 <printf_USB>
      printf_USB("%s\r\n", textBuffer);
    }
*/
  }
  // Print the final formatted message to serial
  printf("%s\r\n", textBuffer);
 8013eda:	230c      	movs	r3, #12
 8013edc:	18fa      	adds	r2, r7, r3
 8013ede:	4b09      	ldr	r3, [pc, #36]	@ (8013f04 <CreateLine+0xc8>)
 8013ee0:	0011      	movs	r1, r2
 8013ee2:	0018      	movs	r0, r3
 8013ee4:	f012 f964 	bl	80261b0 <iprintf>
 8013ee8:	e000      	b.n	8013eec <CreateLine+0xb0>
    return;
 8013eea:	46c0      	nop			@ (mov r8, r8)
}
 8013eec:	46bd      	mov	sp, r7
 8013eee:	b034      	add	sp, #208	@ 0xd0
 8013ef0:	bcb0      	pop	{r4, r5, r7}
 8013ef2:	bc08      	pop	{r3}
 8013ef4:	b002      	add	sp, #8
 8013ef6:	4718      	bx	r3
 8013ef8:	200000f0 	.word	0x200000f0
 8013efc:	0802da00 	.word	0x0802da00
 8013f00:	200010f7 	.word	0x200010f7
 8013f04:	0802da04 	.word	0x0802da04

08013f08 <_write>:

int _write(int fd, void *buf, size_t count) {
 8013f08:	b580      	push	{r7, lr}
 8013f0a:	b084      	sub	sp, #16
 8013f0c:	af00      	add	r7, sp, #0
 8013f0e:	60f8      	str	r0, [r7, #12]
 8013f10:	60b9      	str	r1, [r7, #8]
 8013f12:	607a      	str	r2, [r7, #4]
  HAL_UART_Transmit(&huart1, buf, count, 100);
 8013f14:	687b      	ldr	r3, [r7, #4]
 8013f16:	b29a      	uxth	r2, r3
 8013f18:	68b9      	ldr	r1, [r7, #8]
 8013f1a:	4804      	ldr	r0, [pc, #16]	@ (8013f2c <_write+0x24>)
 8013f1c:	2364      	movs	r3, #100	@ 0x64
 8013f1e:	f009 fab7 	bl	801d490 <HAL_UART_Transmit>
  return count;
 8013f22:	687b      	ldr	r3, [r7, #4]
}
 8013f24:	0018      	movs	r0, r3
 8013f26:	46bd      	mov	sp, r7
 8013f28:	b004      	add	sp, #16
 8013f2a:	bd80      	pop	{r7, pc}
 8013f2c:	200022e8 	.word	0x200022e8

08013f30 <SetVerboseLevel>:

void SetVerboseLevel(VerboseLevel level) {
 8013f30:	b580      	push	{r7, lr}
 8013f32:	b082      	sub	sp, #8
 8013f34:	af00      	add	r7, sp, #0
 8013f36:	0002      	movs	r2, r0
 8013f38:	1dfb      	adds	r3, r7, #7
 8013f3a:	701a      	strb	r2, [r3, #0]
  CurrentVerboseLevel = level;
 8013f3c:	4b03      	ldr	r3, [pc, #12]	@ (8013f4c <SetVerboseLevel+0x1c>)
 8013f3e:	1dfa      	adds	r2, r7, #7
 8013f40:	7812      	ldrb	r2, [r2, #0]
 8013f42:	701a      	strb	r2, [r3, #0]
}
 8013f44:	46c0      	nop			@ (mov r8, r8)
 8013f46:	46bd      	mov	sp, r7
 8013f48:	b002      	add	sp, #8
 8013f4a:	bd80      	pop	{r7, pc}
 8013f4c:	200000f0 	.word	0x200000f0

08013f50 <GetVerboseLevel>:

uint8_t GetVerboseLevel() {
 8013f50:	b580      	push	{r7, lr}
 8013f52:	af00      	add	r7, sp, #0
  return CurrentVerboseLevel; }
 8013f54:	4b02      	ldr	r3, [pc, #8]	@ (8013f60 <GetVerboseLevel+0x10>)
 8013f56:	781b      	ldrb	r3, [r3, #0]
 8013f58:	0018      	movs	r0, r3
 8013f5a:	46bd      	mov	sp, r7
 8013f5c:	bd80      	pop	{r7, pc}
 8013f5e:	46c0      	nop			@ (mov r8, r8)
 8013f60:	200000f0 	.word	0x200000f0

08013f64 <BinaryReleaseInfo>:


void BinaryReleaseInfo() {
 8013f64:	b580      	push	{r7, lr}
 8013f66:	b08c      	sub	sp, #48	@ 0x30
 8013f68:	af00      	add	r7, sp, #0
#else
  char msgout[56];
#endif
#ifdef DEBUG
  #ifndef LARGEBATTERY
  sprintf(msgout,"Software version: %s, Debug build", SRC_VERSION);
 8013f6a:	4a1e      	ldr	r2, [pc, #120]	@ (8013fe4 <BinaryReleaseInfo+0x80>)
 8013f6c:	491e      	ldr	r1, [pc, #120]	@ (8013fe8 <BinaryReleaseInfo+0x84>)
 8013f6e:	1d3b      	adds	r3, r7, #4
 8013f70:	0018      	movs	r0, r3
 8013f72:	f012 f98d 	bl	8026290 <siprintf>
  sprintf(msgout,"Software version: %s, Release build", SRC_VERSION);
  #else
  sprintf(msgout,"Software version: %s Large Battery, Release build", SRC_VERSION);
  #endif
#endif
  if (!usblog) {
 8013f76:	4b1d      	ldr	r3, [pc, #116]	@ (8013fec <BinaryReleaseInfo+0x88>)
 8013f78:	781b      	ldrb	r3, [r3, #0]
 8013f7a:	2201      	movs	r2, #1
 8013f7c:	4053      	eors	r3, r2
 8013f7e:	b2db      	uxtb	r3, r3
 8013f80:	2b00      	cmp	r3, #0
 8013f82:	d005      	beq.n	8013f90 <BinaryReleaseInfo+0x2c>
    printf_USB("%s\r\n", msgout);  // alway forced shown even if usb logging is off
 8013f84:	1d3a      	adds	r2, r7, #4
 8013f86:	4b1a      	ldr	r3, [pc, #104]	@ (8013ff0 <BinaryReleaseInfo+0x8c>)
 8013f88:	0011      	movs	r1, r2
 8013f8a:	0018      	movs	r0, r3
 8013f8c:	f7f4 fd8a 	bl	8008aa4 <printf_USB>
  }
  Info(msgout);
 8013f90:	1d3a      	adds	r2, r7, #4
 8013f92:	4b18      	ldr	r3, [pc, #96]	@ (8013ff4 <BinaryReleaseInfo+0x90>)
 8013f94:	0019      	movs	r1, r3
 8013f96:	2002      	movs	r0, #2
 8013f98:	f7ff ff50 	bl	8013e3c <CreateLine>
  sprintf(msgout,"Build on: %s at %s", __DATE__, __TIME__);
 8013f9c:	4b16      	ldr	r3, [pc, #88]	@ (8013ff8 <BinaryReleaseInfo+0x94>)
 8013f9e:	4a17      	ldr	r2, [pc, #92]	@ (8013ffc <BinaryReleaseInfo+0x98>)
 8013fa0:	4917      	ldr	r1, [pc, #92]	@ (8014000 <BinaryReleaseInfo+0x9c>)
 8013fa2:	1d38      	adds	r0, r7, #4
 8013fa4:	f012 f974 	bl	8026290 <siprintf>
  if (!usblog) {
 8013fa8:	4b10      	ldr	r3, [pc, #64]	@ (8013fec <BinaryReleaseInfo+0x88>)
 8013faa:	781b      	ldrb	r3, [r3, #0]
 8013fac:	2201      	movs	r2, #1
 8013fae:	4053      	eors	r3, r2
 8013fb0:	b2db      	uxtb	r3, r3
 8013fb2:	2b00      	cmp	r3, #0
 8013fb4:	d005      	beq.n	8013fc2 <BinaryReleaseInfo+0x5e>
    printf_USB("%s\r\n", msgout);  // alway forced shown even if usb logging is off
 8013fb6:	1d3a      	adds	r2, r7, #4
 8013fb8:	4b0d      	ldr	r3, [pc, #52]	@ (8013ff0 <BinaryReleaseInfo+0x8c>)
 8013fba:	0011      	movs	r1, r2
 8013fbc:	0018      	movs	r0, r3
 8013fbe:	f7f4 fd71 	bl	8008aa4 <printf_USB>
  }
  Info(msgout);
 8013fc2:	1d3a      	adds	r2, r7, #4
 8013fc4:	4b0b      	ldr	r3, [pc, #44]	@ (8013ff4 <BinaryReleaseInfo+0x90>)
 8013fc6:	0019      	movs	r1, r3
 8013fc8:	2002      	movs	r0, #2
 8013fca:	f7ff ff37 	bl	8013e3c <CreateLine>
  // Format: YY'w'WWv
  Info("Git: %s", CURRENT_WEEK);
 8013fce:	4b0d      	ldr	r3, [pc, #52]	@ (8014004 <BinaryReleaseInfo+0xa0>)
 8013fd0:	4a0d      	ldr	r2, [pc, #52]	@ (8014008 <BinaryReleaseInfo+0xa4>)
 8013fd2:	4908      	ldr	r1, [pc, #32]	@ (8013ff4 <BinaryReleaseInfo+0x90>)
 8013fd4:	2002      	movs	r0, #2
 8013fd6:	f7ff ff31 	bl	8013e3c <CreateLine>
}
 8013fda:	46c0      	nop			@ (mov r8, r8)
 8013fdc:	46bd      	mov	sp, r7
 8013fde:	b00c      	add	sp, #48	@ 0x30
 8013fe0:	bd80      	pop	{r7, pc}
 8013fe2:	46c0      	nop			@ (mov r8, r8)
 8013fe4:	0802da0c 	.word	0x0802da0c
 8013fe8:	0802da14 	.word	0x0802da14
 8013fec:	200010f7 	.word	0x200010f7
 8013ff0:	0802da04 	.word	0x0802da04
 8013ff4:	0802da38 	.word	0x0802da38
 8013ff8:	0802da3c 	.word	0x0802da3c
 8013ffc:	0802da48 	.word	0x0802da48
 8014000:	0802da54 	.word	0x0802da54
 8014004:	0802da68 	.word	0x0802da68
 8014008:	0802da74 	.word	0x0802da74

0801400c <errorHandler>:

//
// Call this as: errorHandler(__func__, __LINE__, __FILE__);
//
void errorHandler(const char * func, const uint32_t line, const char * file)
{
 801400c:	b580      	push	{r7, lr}
 801400e:	b086      	sub	sp, #24
 8014010:	af02      	add	r7, sp, #8
 8014012:	60f8      	str	r0, [r7, #12]
 8014014:	60b9      	str	r1, [r7, #8]
 8014016:	607a      	str	r2, [r7, #4]
    Error("Error in %s at line %lu in file: %s\r\n", func, line, file);
 8014018:	68f8      	ldr	r0, [r7, #12]
 801401a:	4a07      	ldr	r2, [pc, #28]	@ (8014038 <errorHandler+0x2c>)
 801401c:	4907      	ldr	r1, [pc, #28]	@ (801403c <errorHandler+0x30>)
 801401e:	687b      	ldr	r3, [r7, #4]
 8014020:	9301      	str	r3, [sp, #4]
 8014022:	68bb      	ldr	r3, [r7, #8]
 8014024:	9300      	str	r3, [sp, #0]
 8014026:	0003      	movs	r3, r0
 8014028:	2001      	movs	r0, #1
 801402a:	f7ff ff07 	bl	8013e3c <CreateLine>
//    while (true)
//    {
//    }
}
 801402e:	46c0      	nop			@ (mov r8, r8)
 8014030:	46bd      	mov	sp, r7
 8014032:	b004      	add	sp, #16
 8014034:	bd80      	pop	{r7, pc}
 8014036:	46c0      	nop			@ (mov r8, r8)
 8014038:	0802da7c 	.word	0x0802da7c
 801403c:	0802daa4 	.word	0x0802daa4

08014040 <ReadRegister>:

static uint32_t HIDSTimeStamp;
//static uint32_t SensorNextRunTime = HIDS_SENSOR_WAIT_TIME_HIGH;
//static uint32_t SensorWaitTime_ms = HIDS_SENSOR_WAIT_TIME_HIGH;

static bool ReadRegister(uint8_t address, uint8_t* buffer, uint8_t nrBytes) {
 8014040:	b590      	push	{r4, r7, lr}
 8014042:	b083      	sub	sp, #12
 8014044:	af00      	add	r7, sp, #0
 8014046:	6039      	str	r1, [r7, #0]
 8014048:	0011      	movs	r1, r2
 801404a:	1dfb      	adds	r3, r7, #7
 801404c:	1c02      	adds	r2, r0, #0
 801404e:	701a      	strb	r2, [r3, #0]
 8014050:	1dbb      	adds	r3, r7, #6
 8014052:	1c0a      	adds	r2, r1, #0
 8014054:	701a      	strb	r2, [r3, #0]
	if (ReadFunction != NULL) {
 8014056:	4b0a      	ldr	r3, [pc, #40]	@ (8014080 <ReadRegister+0x40>)
 8014058:	681b      	ldr	r3, [r3, #0]
 801405a:	2b00      	cmp	r3, #0
 801405c:	d00a      	beq.n	8014074 <ReadRegister+0x34>
		return ReadFunction(address, buffer, nrBytes);
 801405e:	4b08      	ldr	r3, [pc, #32]	@ (8014080 <ReadRegister+0x40>)
 8014060:	681b      	ldr	r3, [r3, #0]
 8014062:	1dba      	adds	r2, r7, #6
 8014064:	7814      	ldrb	r4, [r2, #0]
 8014066:	6839      	ldr	r1, [r7, #0]
 8014068:	1dfa      	adds	r2, r7, #7
 801406a:	7810      	ldrb	r0, [r2, #0]
 801406c:	0022      	movs	r2, r4
 801406e:	4798      	blx	r3
 8014070:	0003      	movs	r3, r0
 8014072:	e000      	b.n	8014076 <ReadRegister+0x36>
	}
	return false;
 8014074:	2300      	movs	r3, #0
}
 8014076:	0018      	movs	r0, r3
 8014078:	46bd      	mov	sp, r7
 801407a:	b003      	add	sp, #12
 801407c:	bd90      	pop	{r4, r7, pc}
 801407e:	46c0      	nop			@ (mov r8, r8)
 8014080:	200024f0 	.word	0x200024f0

08014084 <WriteRegister>:

static bool WriteRegister(uint8_t address, uint8_t* buffer, uint8_t nrBytes) {
 8014084:	b590      	push	{r4, r7, lr}
 8014086:	b083      	sub	sp, #12
 8014088:	af00      	add	r7, sp, #0
 801408a:	6039      	str	r1, [r7, #0]
 801408c:	0011      	movs	r1, r2
 801408e:	1dfb      	adds	r3, r7, #7
 8014090:	1c02      	adds	r2, r0, #0
 8014092:	701a      	strb	r2, [r3, #0]
 8014094:	1dbb      	adds	r3, r7, #6
 8014096:	1c0a      	adds	r2, r1, #0
 8014098:	701a      	strb	r2, [r3, #0]
  if (WriteFunction != NULL) {
 801409a:	4b0a      	ldr	r3, [pc, #40]	@ (80140c4 <WriteRegister+0x40>)
 801409c:	681b      	ldr	r3, [r3, #0]
 801409e:	2b00      	cmp	r3, #0
 80140a0:	d00a      	beq.n	80140b8 <WriteRegister+0x34>
    return WriteFunction(address, buffer, nrBytes);
 80140a2:	4b08      	ldr	r3, [pc, #32]	@ (80140c4 <WriteRegister+0x40>)
 80140a4:	681b      	ldr	r3, [r3, #0]
 80140a6:	1dba      	adds	r2, r7, #6
 80140a8:	7814      	ldrb	r4, [r2, #0]
 80140aa:	6839      	ldr	r1, [r7, #0]
 80140ac:	1dfa      	adds	r2, r7, #7
 80140ae:	7810      	ldrb	r0, [r2, #0]
 80140b0:	0022      	movs	r2, r4
 80140b2:	4798      	blx	r3
 80140b4:	0003      	movs	r3, r0
 80140b6:	e000      	b.n	80140ba <WriteRegister+0x36>
  }
  return false;
 80140b8:	2300      	movs	r3, #0
}
 80140ba:	0018      	movs	r0, r3
 80140bc:	46bd      	mov	sp, r7
 80140be:	b003      	add	sp, #12
 80140c0:	bd90      	pop	{r4, r7, pc}
 80140c2:	46c0      	nop			@ (mov r8, r8)
 80140c4:	200024f4 	.word	0x200024f4

080140c8 <CalculateCRC>:

uint8_t CalculateCRC(uint8_t* data, uint8_t length) {
 80140c8:	b580      	push	{r7, lr}
 80140ca:	b084      	sub	sp, #16
 80140cc:	af00      	add	r7, sp, #0
 80140ce:	6078      	str	r0, [r7, #4]
 80140d0:	000a      	movs	r2, r1
 80140d2:	1cfb      	adds	r3, r7, #3
 80140d4:	701a      	strb	r2, [r3, #0]
  uint8_t crc = HIDS_CRC_INIT_VALUE;
 80140d6:	230f      	movs	r3, #15
 80140d8:	18fb      	adds	r3, r7, r3
 80140da:	22ff      	movs	r2, #255	@ 0xff
 80140dc:	701a      	strb	r2, [r3, #0]

  for (uint8_t i = 0; i < length; i++) {
 80140de:	230e      	movs	r3, #14
 80140e0:	18fb      	adds	r3, r7, r3
 80140e2:	2200      	movs	r2, #0
 80140e4:	701a      	strb	r2, [r3, #0]
 80140e6:	e038      	b.n	801415a <CalculateCRC+0x92>
    // XOR byte into least significant byte of crc
    crc ^= data[i];
 80140e8:	230e      	movs	r3, #14
 80140ea:	18fb      	adds	r3, r7, r3
 80140ec:	781b      	ldrb	r3, [r3, #0]
 80140ee:	687a      	ldr	r2, [r7, #4]
 80140f0:	18d3      	adds	r3, r2, r3
 80140f2:	7819      	ldrb	r1, [r3, #0]
 80140f4:	220f      	movs	r2, #15
 80140f6:	18bb      	adds	r3, r7, r2
 80140f8:	18ba      	adds	r2, r7, r2
 80140fa:	7812      	ldrb	r2, [r2, #0]
 80140fc:	404a      	eors	r2, r1
 80140fe:	701a      	strb	r2, [r3, #0]

    for (uint8_t j = 0; j < 8; j++) {
 8014100:	230d      	movs	r3, #13
 8014102:	18fb      	adds	r3, r7, r3
 8014104:	2200      	movs	r2, #0
 8014106:	701a      	strb	r2, [r3, #0]
 8014108:	e01c      	b.n	8014144 <CalculateCRC+0x7c>
      // If the leftmost (most significant) bit is set
      if (crc & HIDS_CRC_MSB_MASK) {
 801410a:	210f      	movs	r1, #15
 801410c:	187b      	adds	r3, r7, r1
 801410e:	781b      	ldrb	r3, [r3, #0]
 8014110:	b25b      	sxtb	r3, r3
 8014112:	2b00      	cmp	r3, #0
 8014114:	da0a      	bge.n	801412c <CalculateCRC+0x64>
        // Shift left and XOR with polynomial
        crc = (crc << 1) ^ HIDS_CRC_POLYNOMIAL;
 8014116:	187b      	adds	r3, r7, r1
 8014118:	781b      	ldrb	r3, [r3, #0]
 801411a:	b25b      	sxtb	r3, r3
 801411c:	18db      	adds	r3, r3, r3
 801411e:	b25b      	sxtb	r3, r3
 8014120:	2231      	movs	r2, #49	@ 0x31
 8014122:	4053      	eors	r3, r2
 8014124:	b25a      	sxtb	r2, r3
 8014126:	187b      	adds	r3, r7, r1
 8014128:	701a      	strb	r2, [r3, #0]
 801412a:	e005      	b.n	8014138 <CalculateCRC+0x70>
      } else {
          crc <<= 1;
 801412c:	230f      	movs	r3, #15
 801412e:	18fa      	adds	r2, r7, r3
 8014130:	18fb      	adds	r3, r7, r3
 8014132:	781b      	ldrb	r3, [r3, #0]
 8014134:	18db      	adds	r3, r3, r3
 8014136:	7013      	strb	r3, [r2, #0]
    for (uint8_t j = 0; j < 8; j++) {
 8014138:	210d      	movs	r1, #13
 801413a:	187b      	adds	r3, r7, r1
 801413c:	781a      	ldrb	r2, [r3, #0]
 801413e:	187b      	adds	r3, r7, r1
 8014140:	3201      	adds	r2, #1
 8014142:	701a      	strb	r2, [r3, #0]
 8014144:	230d      	movs	r3, #13
 8014146:	18fb      	adds	r3, r7, r3
 8014148:	781b      	ldrb	r3, [r3, #0]
 801414a:	2b07      	cmp	r3, #7
 801414c:	d9dd      	bls.n	801410a <CalculateCRC+0x42>
  for (uint8_t i = 0; i < length; i++) {
 801414e:	210e      	movs	r1, #14
 8014150:	187b      	adds	r3, r7, r1
 8014152:	781a      	ldrb	r2, [r3, #0]
 8014154:	187b      	adds	r3, r7, r1
 8014156:	3201      	adds	r2, #1
 8014158:	701a      	strb	r2, [r3, #0]
 801415a:	230e      	movs	r3, #14
 801415c:	18fa      	adds	r2, r7, r3
 801415e:	1cfb      	adds	r3, r7, #3
 8014160:	7812      	ldrb	r2, [r2, #0]
 8014162:	781b      	ldrb	r3, [r3, #0]
 8014164:	429a      	cmp	r2, r3
 8014166:	d3bf      	bcc.n	80140e8 <CalculateCRC+0x20>
      }
    }
  }
//  Debug("HIDS CRC calculated value: 0x%X", crc);
  return crc;
 8014168:	230f      	movs	r3, #15
 801416a:	18fb      	adds	r3, r7, r3
 801416c:	781b      	ldrb	r3, [r3, #0]
}
 801416e:	0018      	movs	r0, r3
 8014170:	46bd      	mov	sp, r7
 8014172:	b004      	add	sp, #16
 8014174:	bd80      	pop	{r7, pc}
	...

08014178 <HIDS_DewPointCalculation>:

float HIDS_DewPointCalculation(float* humidity, float* temperature) {
 8014178:	b5b0      	push	{r4, r5, r7, lr}
 801417a:	b084      	sub	sp, #16
 801417c:	af00      	add	r7, sp, #0
 801417e:	6078      	str	r0, [r7, #4]
 8014180:	6039      	str	r1, [r7, #0]
  float lambda = (((17.27 * *temperature) / (237.7 + *temperature)) + log(*humidity/100.0));
 8014182:	683b      	ldr	r3, [r7, #0]
 8014184:	681b      	ldr	r3, [r3, #0]
 8014186:	1c18      	adds	r0, r3, #0
 8014188:	f7ef fb84 	bl	8003894 <__aeabi_f2d>
 801418c:	4a2e      	ldr	r2, [pc, #184]	@ (8014248 <HIDS_DewPointCalculation+0xd0>)
 801418e:	4b2f      	ldr	r3, [pc, #188]	@ (801424c <HIDS_DewPointCalculation+0xd4>)
 8014190:	f7ee fbe0 	bl	8002954 <__aeabi_dmul>
 8014194:	0002      	movs	r2, r0
 8014196:	000b      	movs	r3, r1
 8014198:	0014      	movs	r4, r2
 801419a:	001d      	movs	r5, r3
 801419c:	683b      	ldr	r3, [r7, #0]
 801419e:	681b      	ldr	r3, [r3, #0]
 80141a0:	1c18      	adds	r0, r3, #0
 80141a2:	f7ef fb77 	bl	8003894 <__aeabi_f2d>
 80141a6:	4a2a      	ldr	r2, [pc, #168]	@ (8014250 <HIDS_DewPointCalculation+0xd8>)
 80141a8:	4b2a      	ldr	r3, [pc, #168]	@ (8014254 <HIDS_DewPointCalculation+0xdc>)
 80141aa:	f7ed fbd3 	bl	8001954 <__aeabi_dadd>
 80141ae:	0002      	movs	r2, r0
 80141b0:	000b      	movs	r3, r1
 80141b2:	0020      	movs	r0, r4
 80141b4:	0029      	movs	r1, r5
 80141b6:	f7ed ff93 	bl	80020e0 <__aeabi_ddiv>
 80141ba:	0002      	movs	r2, r0
 80141bc:	000b      	movs	r3, r1
 80141be:	0014      	movs	r4, r2
 80141c0:	001d      	movs	r5, r3
 80141c2:	687b      	ldr	r3, [r7, #4]
 80141c4:	681b      	ldr	r3, [r3, #0]
 80141c6:	1c18      	adds	r0, r3, #0
 80141c8:	f7ef fb64 	bl	8003894 <__aeabi_f2d>
 80141cc:	2200      	movs	r2, #0
 80141ce:	4b22      	ldr	r3, [pc, #136]	@ (8014258 <HIDS_DewPointCalculation+0xe0>)
 80141d0:	f7ed ff86 	bl	80020e0 <__aeabi_ddiv>
 80141d4:	0002      	movs	r2, r0
 80141d6:	000b      	movs	r3, r1
 80141d8:	0010      	movs	r0, r2
 80141da:	0019      	movs	r1, r3
 80141dc:	f014 ff30 	bl	8029040 <log>
 80141e0:	0002      	movs	r2, r0
 80141e2:	000b      	movs	r3, r1
 80141e4:	0020      	movs	r0, r4
 80141e6:	0029      	movs	r1, r5
 80141e8:	f7ed fbb4 	bl	8001954 <__aeabi_dadd>
 80141ec:	0002      	movs	r2, r0
 80141ee:	000b      	movs	r3, r1
 80141f0:	0010      	movs	r0, r2
 80141f2:	0019      	movs	r1, r3
 80141f4:	f7ef fb96 	bl	8003924 <__aeabi_d2f>
 80141f8:	1c03      	adds	r3, r0, #0
 80141fa:	60fb      	str	r3, [r7, #12]
  return ((237.7 * lambda) / (17.27 - lambda));
 80141fc:	68f8      	ldr	r0, [r7, #12]
 80141fe:	f7ef fb49 	bl	8003894 <__aeabi_f2d>
 8014202:	4a13      	ldr	r2, [pc, #76]	@ (8014250 <HIDS_DewPointCalculation+0xd8>)
 8014204:	4b13      	ldr	r3, [pc, #76]	@ (8014254 <HIDS_DewPointCalculation+0xdc>)
 8014206:	f7ee fba5 	bl	8002954 <__aeabi_dmul>
 801420a:	0002      	movs	r2, r0
 801420c:	000b      	movs	r3, r1
 801420e:	0014      	movs	r4, r2
 8014210:	001d      	movs	r5, r3
 8014212:	68f8      	ldr	r0, [r7, #12]
 8014214:	f7ef fb3e 	bl	8003894 <__aeabi_f2d>
 8014218:	0002      	movs	r2, r0
 801421a:	000b      	movs	r3, r1
 801421c:	480a      	ldr	r0, [pc, #40]	@ (8014248 <HIDS_DewPointCalculation+0xd0>)
 801421e:	490b      	ldr	r1, [pc, #44]	@ (801424c <HIDS_DewPointCalculation+0xd4>)
 8014220:	f7ee fe7e 	bl	8002f20 <__aeabi_dsub>
 8014224:	0002      	movs	r2, r0
 8014226:	000b      	movs	r3, r1
 8014228:	0020      	movs	r0, r4
 801422a:	0029      	movs	r1, r5
 801422c:	f7ed ff58 	bl	80020e0 <__aeabi_ddiv>
 8014230:	0002      	movs	r2, r0
 8014232:	000b      	movs	r3, r1
 8014234:	0010      	movs	r0, r2
 8014236:	0019      	movs	r1, r3
 8014238:	f7ef fb74 	bl	8003924 <__aeabi_d2f>
 801423c:	1c03      	adds	r3, r0, #0
}
 801423e:	1c18      	adds	r0, r3, #0
 8014240:	46bd      	mov	sp, r7
 8014242:	b004      	add	sp, #16
 8014244:	bdb0      	pop	{r4, r5, r7, pc}
 8014246:	46c0      	nop			@ (mov r8, r8)
 8014248:	b851eb85 	.word	0xb851eb85
 801424c:	4031451e 	.word	0x4031451e
 8014250:	66666666 	.word	0x66666666
 8014254:	406db666 	.word	0x406db666
 8014258:	40590000 	.word	0x40590000

0801425c <HIDS_EnableHeater>:

void HIDS_EnableHeater(void) {
 801425c:	b580      	push	{r7, lr}
 801425e:	b082      	sub	sp, #8
 8014260:	af00      	add	r7, sp, #0
  // During heater operation, the sensor’s specifications are not valid.
  uint8_t heaterReg = HeaterMode;
 8014262:	4b0d      	ldr	r3, [pc, #52]	@ (8014298 <HIDS_EnableHeater+0x3c>)
 8014264:	781a      	ldrb	r2, [r3, #0]
 8014266:	1dfb      	adds	r3, r7, #7
 8014268:	701a      	strb	r2, [r3, #0]
  WriteRegister(HIDS_I2C_ADDRESS, &heaterReg, 1);
 801426a:	1dfb      	adds	r3, r7, #7
 801426c:	2201      	movs	r2, #1
 801426e:	0019      	movs	r1, r3
 8014270:	2044      	movs	r0, #68	@ 0x44
 8014272:	f7ff ff07 	bl	8014084 <WriteRegister>
  Info("Started the heater in mode: %d", heaterReg);
 8014276:	1dfb      	adds	r3, r7, #7
 8014278:	781b      	ldrb	r3, [r3, #0]
 801427a:	4a08      	ldr	r2, [pc, #32]	@ (801429c <HIDS_EnableHeater+0x40>)
 801427c:	4908      	ldr	r1, [pc, #32]	@ (80142a0 <HIDS_EnableHeater+0x44>)
 801427e:	2002      	movs	r0, #2
 8014280:	f7ff fddc 	bl	8013e3c <CreateLine>
  HIDS_LastHeaterInRTC = getPosixTime();
 8014284:	f7f6 f96a 	bl	800a55c <getPosixTime>
 8014288:	0002      	movs	r2, r0
 801428a:	4b06      	ldr	r3, [pc, #24]	@ (80142a4 <HIDS_EnableHeater+0x48>)
 801428c:	601a      	str	r2, [r3, #0]
}
 801428e:	46c0      	nop			@ (mov r8, r8)
 8014290:	46bd      	mov	sp, r7
 8014292:	b002      	add	sp, #8
 8014294:	bd80      	pop	{r7, pc}
 8014296:	46c0      	nop			@ (mov r8, r8)
 8014298:	200000f1 	.word	0x200000f1
 801429c:	0802daa8 	.word	0x0802daa8
 80142a0:	0802dac8 	.word	0x0802dac8
 80142a4:	20002508 	.word	0x20002508

080142a8 <HIDS_Init>:

void HIDS_Init(I2CReadCb readFunction, I2CWriteCB writeFunction) {
 80142a8:	b580      	push	{r7, lr}
 80142aa:	b082      	sub	sp, #8
 80142ac:	af00      	add	r7, sp, #0
 80142ae:	6078      	str	r0, [r7, #4]
 80142b0:	6039      	str	r1, [r7, #0]
	ReadFunction = readFunction;
 80142b2:	4b0a      	ldr	r3, [pc, #40]	@ (80142dc <HIDS_Init+0x34>)
 80142b4:	687a      	ldr	r2, [r7, #4]
 80142b6:	601a      	str	r2, [r3, #0]
	WriteFunction = writeFunction;
 80142b8:	4b09      	ldr	r3, [pc, #36]	@ (80142e0 <HIDS_Init+0x38>)
 80142ba:	683a      	ldr	r2, [r7, #0]
 80142bc:	601a      	str	r2, [r3, #0]
	HIDS_SetMeasurementMode(MeasureMode);
 80142be:	4b09      	ldr	r3, [pc, #36]	@ (80142e4 <HIDS_Init+0x3c>)
 80142c0:	781b      	ldrb	r3, [r3, #0]
 80142c2:	0018      	movs	r0, r3
 80142c4:	f000 f840 	bl	8014348 <HIDS_SetMeasurementMode>
	HIDS_SetHeaterMode(HeaterMode);
 80142c8:	4b07      	ldr	r3, [pc, #28]	@ (80142e8 <HIDS_Init+0x40>)
 80142ca:	781b      	ldrb	r3, [r3, #0]
 80142cc:	0018      	movs	r0, r3
 80142ce:	f000 f82b 	bl	8014328 <HIDS_SetHeaterMode>
//	HIDS_EnableHeater();
	// TODO: Enable heater after measurement is done and humidity is above a certain percentage, use formula.
}
 80142d2:	46c0      	nop			@ (mov r8, r8)
 80142d4:	46bd      	mov	sp, r7
 80142d6:	b002      	add	sp, #8
 80142d8:	bd80      	pop	{r7, pc}
 80142da:	46c0      	nop			@ (mov r8, r8)
 80142dc:	200024f0 	.word	0x200024f0
 80142e0:	200024f4 	.word	0x200024f4
 80142e4:	200000f2 	.word	0x200000f2
 80142e8:	200000f1 	.word	0x200000f1

080142ec <HIDS_StartMeasurement>:

void HIDS_StartMeasurement(void) {
 80142ec:	b580      	push	{r7, lr}
 80142ee:	af00      	add	r7, sp, #0
  HIDS_NextRunTime = HAL_GetTick() + HIDS_Interval_ms;
 80142f0:	f000 fb1c 	bl	801492c <HAL_GetTick>
 80142f4:	0002      	movs	r2, r0
 80142f6:	4b08      	ldr	r3, [pc, #32]	@ (8014318 <HIDS_StartMeasurement+0x2c>)
 80142f8:	681b      	ldr	r3, [r3, #0]
 80142fa:	18d2      	adds	r2, r2, r3
 80142fc:	4b07      	ldr	r3, [pc, #28]	@ (801431c <HIDS_StartMeasurement+0x30>)
 80142fe:	601a      	str	r2, [r3, #0]
  WriteRegister(HIDS_I2C_ADDRESS, &MeasureMode, 1);
 8014300:	4b07      	ldr	r3, [pc, #28]	@ (8014320 <HIDS_StartMeasurement+0x34>)
 8014302:	2201      	movs	r2, #1
 8014304:	0019      	movs	r1, r3
 8014306:	2044      	movs	r0, #68	@ 0x44
 8014308:	f7ff febc 	bl	8014084 <WriteRegister>
  MeasurementDone = false;
 801430c:	4b05      	ldr	r3, [pc, #20]	@ (8014324 <HIDS_StartMeasurement+0x38>)
 801430e:	2200      	movs	r2, #0
 8014310:	701a      	strb	r2, [r3, #0]
}
 8014312:	46c0      	nop			@ (mov r8, r8)
 8014314:	46bd      	mov	sp, r7
 8014316:	bd80      	pop	{r7, pc}
 8014318:	200000f8 	.word	0x200000f8
 801431c:	200000f4 	.word	0x200000f4
 8014320:	200000f2 	.word	0x200000f2
 8014324:	2000250c 	.word	0x2000250c

08014328 <HIDS_SetHeaterMode>:

void HIDS_SetMeasurementDuration(uint32_t duration) {
  HIDS_MeasurementDuration = duration;
}

void HIDS_SetHeaterMode(HIDSHeaterModes modeHeater) {
 8014328:	b580      	push	{r7, lr}
 801432a:	b082      	sub	sp, #8
 801432c:	af00      	add	r7, sp, #0
 801432e:	0002      	movs	r2, r0
 8014330:	1dfb      	adds	r3, r7, #7
 8014332:	701a      	strb	r2, [r3, #0]
  HeaterMode = modeHeater;
 8014334:	4b03      	ldr	r3, [pc, #12]	@ (8014344 <HIDS_SetHeaterMode+0x1c>)
 8014336:	1dfa      	adds	r2, r7, #7
 8014338:	7812      	ldrb	r2, [r2, #0]
 801433a:	701a      	strb	r2, [r3, #0]
}
 801433c:	46c0      	nop			@ (mov r8, r8)
 801433e:	46bd      	mov	sp, r7
 8014340:	b002      	add	sp, #8
 8014342:	bd80      	pop	{r7, pc}
 8014344:	200000f1 	.word	0x200000f1

08014348 <HIDS_SetMeasurementMode>:

void HIDS_SetMeasurementMode(HIDSMeasureModes modeMeasure) {
 8014348:	b580      	push	{r7, lr}
 801434a:	b082      	sub	sp, #8
 801434c:	af00      	add	r7, sp, #0
 801434e:	0002      	movs	r2, r0
 8014350:	1dfb      	adds	r3, r7, #7
 8014352:	701a      	strb	r2, [r3, #0]
  MeasureMode = modeMeasure;
 8014354:	4b03      	ldr	r3, [pc, #12]	@ (8014364 <HIDS_SetMeasurementMode+0x1c>)
 8014356:	1dfa      	adds	r2, r7, #7
 8014358:	7812      	ldrb	r2, [r2, #0]
 801435a:	701a      	strb	r2, [r3, #0]
}
 801435c:	46c0      	nop			@ (mov r8, r8)
 801435e:	46bd      	mov	sp, r7
 8014360:	b002      	add	sp, #8
 8014362:	bd80      	pop	{r7, pc}
 8014364:	200000f2 	.word	0x200000f2

08014368 <setHIDSTimeStamp>:

void setHIDSTimeStamp(uint32_t ticks) {
 8014368:	b580      	push	{r7, lr}
 801436a:	b082      	sub	sp, #8
 801436c:	af00      	add	r7, sp, #0
 801436e:	6078      	str	r0, [r7, #4]
  HIDSTimeStamp = HAL_GetTick() + ticks;
 8014370:	f000 fadc 	bl	801492c <HAL_GetTick>
 8014374:	0002      	movs	r2, r0
 8014376:	687b      	ldr	r3, [r7, #4]
 8014378:	18d2      	adds	r2, r2, r3
 801437a:	4b03      	ldr	r3, [pc, #12]	@ (8014388 <setHIDSTimeStamp+0x20>)
 801437c:	601a      	str	r2, [r3, #0]
}
 801437e:	46c0      	nop			@ (mov r8, r8)
 8014380:	46bd      	mov	sp, r7
 8014382:	b002      	add	sp, #8
 8014384:	bd80      	pop	{r7, pc}
 8014386:	46c0      	nop			@ (mov r8, r8)
 8014388:	20002510 	.word	0x20002510

0801438c <CheckCRC>:

static bool CheckCRC(uint8_t* data) {
 801438c:	b590      	push	{r4, r7, lr}
 801438e:	b085      	sub	sp, #20
 8014390:	af00      	add	r7, sp, #0
 8014392:	6078      	str	r0, [r7, #4]
  // Data format: 2 bytes for data, followed by an 8-bit CRC

	// Check CRC for the first segment
	uint8_t crcData1[2] = {data[0], data[1]};
 8014394:	687b      	ldr	r3, [r7, #4]
 8014396:	781a      	ldrb	r2, [r3, #0]
 8014398:	210c      	movs	r1, #12
 801439a:	187b      	adds	r3, r7, r1
 801439c:	701a      	strb	r2, [r3, #0]
 801439e:	687b      	ldr	r3, [r7, #4]
 80143a0:	785a      	ldrb	r2, [r3, #1]
 80143a2:	187b      	adds	r3, r7, r1
 80143a4:	705a      	strb	r2, [r3, #1]
	uint8_t crc1 = data[2];
 80143a6:	240f      	movs	r4, #15
 80143a8:	193b      	adds	r3, r7, r4
 80143aa:	687a      	ldr	r2, [r7, #4]
 80143ac:	7892      	ldrb	r2, [r2, #2]
 80143ae:	701a      	strb	r2, [r3, #0]
	if (CalculateCRC(crcData1, 2) != crc1) {
 80143b0:	187b      	adds	r3, r7, r1
 80143b2:	2102      	movs	r1, #2
 80143b4:	0018      	movs	r0, r3
 80143b6:	f7ff fe87 	bl	80140c8 <CalculateCRC>
 80143ba:	0003      	movs	r3, r0
 80143bc:	001a      	movs	r2, r3
 80143be:	193b      	adds	r3, r7, r4
 80143c0:	781b      	ldrb	r3, [r3, #0]
 80143c2:	4293      	cmp	r3, r2
 80143c4:	d007      	beq.n	80143d6 <CheckCRC+0x4a>
		Error("CRC check failed for the first segment.");
 80143c6:	4a1a      	ldr	r2, [pc, #104]	@ (8014430 <CheckCRC+0xa4>)
 80143c8:	4b1a      	ldr	r3, [pc, #104]	@ (8014434 <CheckCRC+0xa8>)
 80143ca:	0019      	movs	r1, r3
 80143cc:	2001      	movs	r0, #1
 80143ce:	f7ff fd35 	bl	8013e3c <CreateLine>
//		errorHandler(__func__, __LINE__, __FILE__);
		return false;
 80143d2:	2300      	movs	r3, #0
 80143d4:	e027      	b.n	8014426 <CheckCRC+0x9a>
	}

	// Check CRC for the second segment
	uint8_t crcData2[2] = {data[3], data[4]};
 80143d6:	687b      	ldr	r3, [r7, #4]
 80143d8:	78da      	ldrb	r2, [r3, #3]
 80143da:	2108      	movs	r1, #8
 80143dc:	187b      	adds	r3, r7, r1
 80143de:	701a      	strb	r2, [r3, #0]
 80143e0:	687b      	ldr	r3, [r7, #4]
 80143e2:	791a      	ldrb	r2, [r3, #4]
 80143e4:	187b      	adds	r3, r7, r1
 80143e6:	705a      	strb	r2, [r3, #1]
	uint8_t crc2 = data[5];
 80143e8:	240e      	movs	r4, #14
 80143ea:	193b      	adds	r3, r7, r4
 80143ec:	687a      	ldr	r2, [r7, #4]
 80143ee:	7952      	ldrb	r2, [r2, #5]
 80143f0:	701a      	strb	r2, [r3, #0]
	if (CalculateCRC(crcData2, 2) != crc2) {
 80143f2:	187b      	adds	r3, r7, r1
 80143f4:	2102      	movs	r1, #2
 80143f6:	0018      	movs	r0, r3
 80143f8:	f7ff fe66 	bl	80140c8 <CalculateCRC>
 80143fc:	0003      	movs	r3, r0
 80143fe:	001a      	movs	r2, r3
 8014400:	193b      	adds	r3, r7, r4
 8014402:	781b      	ldrb	r3, [r3, #0]
 8014404:	4293      	cmp	r3, r2
 8014406:	d00d      	beq.n	8014424 <CheckCRC+0x98>
		Error("CRC check failed for the second segment.");
 8014408:	4a0b      	ldr	r2, [pc, #44]	@ (8014438 <CheckCRC+0xac>)
 801440a:	4b0a      	ldr	r3, [pc, #40]	@ (8014434 <CheckCRC+0xa8>)
 801440c:	0019      	movs	r1, r3
 801440e:	2001      	movs	r0, #1
 8014410:	f7ff fd14 	bl	8013e3c <CreateLine>
		errorHandler(__func__, __LINE__, __FILE__);
 8014414:	4a09      	ldr	r2, [pc, #36]	@ (801443c <CheckCRC+0xb0>)
 8014416:	4b0a      	ldr	r3, [pc, #40]	@ (8014440 <CheckCRC+0xb4>)
 8014418:	2185      	movs	r1, #133	@ 0x85
 801441a:	0018      	movs	r0, r3
 801441c:	f7ff fdf6 	bl	801400c <errorHandler>
		return false;
 8014420:	2300      	movs	r3, #0
 8014422:	e000      	b.n	8014426 <CheckCRC+0x9a>
	}
	return true;
 8014424:	2301      	movs	r3, #1
}
 8014426:	0018      	movs	r0, r3
 8014428:	46bd      	mov	sp, r7
 801442a:	b005      	add	sp, #20
 801442c:	bd90      	pop	{r4, r7, pc}
 801442e:	46c0      	nop			@ (mov r8, r8)
 8014430:	0802dacc 	.word	0x0802dacc
 8014434:	0802daf4 	.word	0x0802daf4
 8014438:	0802daf8 	.word	0x0802daf8
 801443c:	0802db24 	.word	0x0802db24
 8014440:	0802e4e4 	.word	0x0802e4e4

08014444 <HIDS_DeviceConnected>:

bool HIDS_DeviceConnected(void) {
 8014444:	b580      	push	{r7, lr}
 8014446:	b084      	sub	sp, #16
 8014448:	af02      	add	r7, sp, #8
	uint8_t serialReg = HIDS_SERIAL_NUMBER_REG;
 801444a:	1dbb      	adds	r3, r7, #6
 801444c:	2289      	movs	r2, #137	@ 0x89
 801444e:	701a      	strb	r2, [r3, #0]
	WriteRegister(HIDS_I2C_ADDRESS, &serialReg, 1);
 8014450:	1dbb      	adds	r3, r7, #6
 8014452:	2201      	movs	r2, #1
 8014454:	0019      	movs	r1, r3
 8014456:	2044      	movs	r0, #68	@ 0x44
 8014458:	f7ff fe14 	bl	8014084 <WriteRegister>
	HAL_Delay(30);
 801445c:	201e      	movs	r0, #30
 801445e:	f000 fa6f 	bl	8014940 <HAL_Delay>
	ReadRegister(HIDS_I2C_ADDRESS, SerialBuffer, HIDS_SERIAL_BUFFER_LENGTH);
 8014462:	4b14      	ldr	r3, [pc, #80]	@ (80144b4 <HIDS_DeviceConnected+0x70>)
 8014464:	2206      	movs	r2, #6
 8014466:	0019      	movs	r1, r3
 8014468:	2044      	movs	r0, #68	@ 0x44
 801446a:	f7ff fde9 	bl	8014040 <ReadRegister>

	for (uint8_t i = 0; i < HIDS_SERIAL_BUFFER_LENGTH; i++) {
 801446e:	1dfb      	adds	r3, r7, #7
 8014470:	2200      	movs	r2, #0
 8014472:	701a      	strb	r2, [r3, #0]
 8014474:	e011      	b.n	801449a <HIDS_DeviceConnected+0x56>
		Info("HIDS_Device serial ID[%d]: 0x%X", i, SerialBuffer[i]);
 8014476:	1dfb      	adds	r3, r7, #7
 8014478:	7818      	ldrb	r0, [r3, #0]
 801447a:	1dfb      	adds	r3, r7, #7
 801447c:	781b      	ldrb	r3, [r3, #0]
 801447e:	4a0d      	ldr	r2, [pc, #52]	@ (80144b4 <HIDS_DeviceConnected+0x70>)
 8014480:	5cd3      	ldrb	r3, [r2, r3]
 8014482:	4a0d      	ldr	r2, [pc, #52]	@ (80144b8 <HIDS_DeviceConnected+0x74>)
 8014484:	490d      	ldr	r1, [pc, #52]	@ (80144bc <HIDS_DeviceConnected+0x78>)
 8014486:	9300      	str	r3, [sp, #0]
 8014488:	0003      	movs	r3, r0
 801448a:	2002      	movs	r0, #2
 801448c:	f7ff fcd6 	bl	8013e3c <CreateLine>
	for (uint8_t i = 0; i < HIDS_SERIAL_BUFFER_LENGTH; i++) {
 8014490:	1dfb      	adds	r3, r7, #7
 8014492:	781a      	ldrb	r2, [r3, #0]
 8014494:	1dfb      	adds	r3, r7, #7
 8014496:	3201      	adds	r2, #1
 8014498:	701a      	strb	r2, [r3, #0]
 801449a:	1dfb      	adds	r3, r7, #7
 801449c:	781b      	ldrb	r3, [r3, #0]
 801449e:	2b05      	cmp	r3, #5
 80144a0:	d9e9      	bls.n	8014476 <HIDS_DeviceConnected+0x32>
	}
	return CheckCRC(SerialBuffer);
 80144a2:	4b04      	ldr	r3, [pc, #16]	@ (80144b4 <HIDS_DeviceConnected+0x70>)
 80144a4:	0018      	movs	r0, r3
 80144a6:	f7ff ff71 	bl	801438c <CheckCRC>
 80144aa:	0003      	movs	r3, r0
}
 80144ac:	0018      	movs	r0, r3
 80144ae:	46bd      	mov	sp, r7
 80144b0:	b002      	add	sp, #8
 80144b2:	bd80      	pop	{r7, pc}
 80144b4:	200024f8 	.word	0x200024f8
 80144b8:	0802db3c 	.word	0x0802db3c
 80144bc:	0802dac8 	.word	0x0802dac8

080144c0 <HIDS_MeasurementReady>:

bool HIDS_MeasurementReady(void) {
 80144c0:	b580      	push	{r7, lr}
 80144c2:	af00      	add	r7, sp, #0
  return TimestampIsReached(HIDS_NextRunTime);
 80144c4:	4b04      	ldr	r3, [pc, #16]	@ (80144d8 <HIDS_MeasurementReady+0x18>)
 80144c6:	681b      	ldr	r3, [r3, #0]
 80144c8:	0018      	movs	r0, r3
 80144ca:	f7ff fc61 	bl	8013d90 <TimestampIsReached>
 80144ce:	0003      	movs	r3, r0
}
 80144d0:	0018      	movs	r0, r3
 80144d2:	46bd      	mov	sp, r7
 80144d4:	bd80      	pop	{r7, pc}
 80144d6:	46c0      	nop			@ (mov r8, r8)
 80144d8:	200000f4 	.word	0x200000f4

080144dc <HIDS_GetMeasurementValues>:
//    green = (1- ((humidity - 80)/20))*Full;
//    blue = Full;
//  }
}

bool HIDS_GetMeasurementValues(float* humidity, float* temperature) {
 80144dc:	b580      	push	{r7, lr}
 80144de:	b084      	sub	sp, #16
 80144e0:	af00      	add	r7, sp, #0
 80144e2:	6078      	str	r0, [r7, #4]
 80144e4:	6039      	str	r1, [r7, #0]
  // TODO: Store last measurement humidity for accurate sgp40 measurement.
  if(MeasurementDone) return true;
 80144e6:	4b41      	ldr	r3, [pc, #260]	@ (80145ec <HIDS_GetMeasurementValues+0x110>)
 80144e8:	781b      	ldrb	r3, [r3, #0]
 80144ea:	2b00      	cmp	r3, #0
 80144ec:	d001      	beq.n	80144f2 <HIDS_GetMeasurementValues+0x16>
 80144ee:	2301      	movs	r3, #1
 80144f0:	e077      	b.n	80145e2 <HIDS_GetMeasurementValues+0x106>
  if(!HIDS_MeasurementReady()) return false;
 80144f2:	f7ff ffe5 	bl	80144c0 <HIDS_MeasurementReady>
 80144f6:	0003      	movs	r3, r0
 80144f8:	001a      	movs	r2, r3
 80144fa:	2301      	movs	r3, #1
 80144fc:	4053      	eors	r3, r2
 80144fe:	b2db      	uxtb	r3, r3
 8014500:	2b00      	cmp	r3, #0
 8014502:	d001      	beq.n	8014508 <HIDS_GetMeasurementValues+0x2c>
 8014504:	2300      	movs	r3, #0
 8014506:	e06c      	b.n	80145e2 <HIDS_GetMeasurementValues+0x106>
  float currentTemperature;
  float currentHumidity;
//  static float temperatures[HIDS_MAX_MEASUREMENTS];
//  static float humidities[HIDS_MAX_MEASUREMENTS];
  //Debug("HT measurements: %d out of %d completed.", measurements + 1, amountOfMeasurements);
  if (!ReadRegister(HIDS_I2C_ADDRESS, MeasureBuffer, HIDS_MEASURE_BUFFER_LENGTH)) {
 8014508:	4b39      	ldr	r3, [pc, #228]	@ (80145f0 <HIDS_GetMeasurementValues+0x114>)
 801450a:	2206      	movs	r2, #6
 801450c:	0019      	movs	r1, r3
 801450e:	2044      	movs	r0, #68	@ 0x44
 8014510:	f7ff fd96 	bl	8014040 <ReadRegister>
 8014514:	0003      	movs	r3, r0
 8014516:	001a      	movs	r2, r3
 8014518:	2301      	movs	r3, #1
 801451a:	4053      	eors	r3, r2
 801451c:	b2db      	uxtb	r3, r3
 801451e:	2b00      	cmp	r3, #0
 8014520:	d005      	beq.n	801452e <HIDS_GetMeasurementValues+0x52>
    Error("Error during reading the wsenHIDS result register");
 8014522:	4a34      	ldr	r2, [pc, #208]	@ (80145f4 <HIDS_GetMeasurementValues+0x118>)
 8014524:	4b34      	ldr	r3, [pc, #208]	@ (80145f8 <HIDS_GetMeasurementValues+0x11c>)
 8014526:	0019      	movs	r1, r3
 8014528:	2001      	movs	r0, #1
 801452a:	f7ff fc87 	bl	8013e3c <CreateLine>
  }
	if(!CheckCRC(MeasureBuffer)) {
 801452e:	4b30      	ldr	r3, [pc, #192]	@ (80145f0 <HIDS_GetMeasurementValues+0x114>)
 8014530:	0018      	movs	r0, r3
 8014532:	f7ff ff2b 	bl	801438c <CheckCRC>
 8014536:	0003      	movs	r3, r0
 8014538:	001a      	movs	r2, r3
 801453a:	2301      	movs	r3, #1
 801453c:	4053      	eors	r3, r2
 801453e:	b2db      	uxtb	r3, r3
 8014540:	2b00      	cmp	r3, #0
 8014542:	d001      	beq.n	8014548 <HIDS_GetMeasurementValues+0x6c>
		Info("Measure buffer structure:");
		for(uint8_t i = 0; i < HIDS_MEASURE_BUFFER_LENGTH; i++) {
			Debug("HIDS_Measurement buffer[%d]: %d", i, MeasureBuffer[i]);
		}
*/
		return false;
 8014544:	2300      	movs	r3, #0
 8014546:	e04c      	b.n	80145e2 <HIDS_GetMeasurementValues+0x106>

  // Humidity formula in percentage:
  //  RH = ((-6 + 125 * SRH) / (2^16 - 1))
  // Temperature formula in degrees Celsius:
  //  T = ((-45 + (175 * ST) / (2^16 - 1)))
	currentTemperature = (((175 * ((MeasureBuffer[0] << 8) | MeasureBuffer[1]))) / HIDS_POW_2_16_MINUS_1);
 8014548:	4b29      	ldr	r3, [pc, #164]	@ (80145f0 <HIDS_GetMeasurementValues+0x114>)
 801454a:	781b      	ldrb	r3, [r3, #0]
 801454c:	021b      	lsls	r3, r3, #8
 801454e:	4a28      	ldr	r2, [pc, #160]	@ (80145f0 <HIDS_GetMeasurementValues+0x114>)
 8014550:	7852      	ldrb	r2, [r2, #1]
 8014552:	4313      	orrs	r3, r2
 8014554:	22af      	movs	r2, #175	@ 0xaf
 8014556:	4353      	muls	r3, r2
 8014558:	0018      	movs	r0, r3
 801455a:	f7ef f949 	bl	80037f0 <__aeabi_i2d>
 801455e:	2200      	movs	r2, #0
 8014560:	4b26      	ldr	r3, [pc, #152]	@ (80145fc <HIDS_GetMeasurementValues+0x120>)
 8014562:	f7ed fdbd 	bl	80020e0 <__aeabi_ddiv>
 8014566:	0002      	movs	r2, r0
 8014568:	000b      	movs	r3, r1
 801456a:	0010      	movs	r0, r2
 801456c:	0019      	movs	r1, r3
 801456e:	f7ef f9d9 	bl	8003924 <__aeabi_d2f>
 8014572:	1c03      	adds	r3, r0, #0
 8014574:	60fb      	str	r3, [r7, #12]
	currentTemperature -= 45;
 8014576:	4922      	ldr	r1, [pc, #136]	@ (8014600 <HIDS_GetMeasurementValues+0x124>)
 8014578:	68f8      	ldr	r0, [r7, #12]
 801457a:	f7ec febb 	bl	80012f4 <__aeabi_fsub>
 801457e:	1c03      	adds	r3, r0, #0
 8014580:	60fb      	str	r3, [r7, #12]
	currentHumidity = ((125 * ((MeasureBuffer[3] << 8) | MeasureBuffer[4]) / HIDS_POW_2_16_MINUS_1));
 8014582:	4b1b      	ldr	r3, [pc, #108]	@ (80145f0 <HIDS_GetMeasurementValues+0x114>)
 8014584:	78db      	ldrb	r3, [r3, #3]
 8014586:	021b      	lsls	r3, r3, #8
 8014588:	4a19      	ldr	r2, [pc, #100]	@ (80145f0 <HIDS_GetMeasurementValues+0x114>)
 801458a:	7912      	ldrb	r2, [r2, #4]
 801458c:	431a      	orrs	r2, r3
 801458e:	0013      	movs	r3, r2
 8014590:	015b      	lsls	r3, r3, #5
 8014592:	1a9b      	subs	r3, r3, r2
 8014594:	009b      	lsls	r3, r3, #2
 8014596:	189b      	adds	r3, r3, r2
 8014598:	0018      	movs	r0, r3
 801459a:	f7ef f929 	bl	80037f0 <__aeabi_i2d>
 801459e:	2200      	movs	r2, #0
 80145a0:	4b16      	ldr	r3, [pc, #88]	@ (80145fc <HIDS_GetMeasurementValues+0x120>)
 80145a2:	f7ed fd9d 	bl	80020e0 <__aeabi_ddiv>
 80145a6:	0002      	movs	r2, r0
 80145a8:	000b      	movs	r3, r1
 80145aa:	0010      	movs	r0, r2
 80145ac:	0019      	movs	r1, r3
 80145ae:	f7ef f9b9 	bl	8003924 <__aeabi_d2f>
 80145b2:	1c03      	adds	r3, r0, #0
 80145b4:	60bb      	str	r3, [r7, #8]
	currentHumidity -= 6;
 80145b6:	4913      	ldr	r1, [pc, #76]	@ (8014604 <HIDS_GetMeasurementValues+0x128>)
 80145b8:	68b8      	ldr	r0, [r7, #8]
 80145ba:	f7ec fe9b 	bl	80012f4 <__aeabi_fsub>
 80145be:	1c03      	adds	r3, r0, #0
 80145c0:	60bb      	str	r3, [r7, #8]
//    for (uint8_t i = 0; i < measurements; i++) {
//        sumTemperature += temperatures[i];
//        sumHumidity += humidities[i];
//    }

   *temperature = currentTemperature;
 80145c2:	683b      	ldr	r3, [r7, #0]
 80145c4:	68fa      	ldr	r2, [r7, #12]
 80145c6:	601a      	str	r2, [r3, #0]
   *humidity = currentHumidity;
 80145c8:	687b      	ldr	r3, [r7, #4]
 80145ca:	68ba      	ldr	r2, [r7, #8]
 80145cc:	601a      	str	r2, [r3, #0]

   SGP_SetHT(temperature, humidity);
 80145ce:	687a      	ldr	r2, [r7, #4]
 80145d0:	683b      	ldr	r3, [r7, #0]
 80145d2:	0011      	movs	r1, r2
 80145d4:	0018      	movs	r0, r3
 80145d6:	f7fc ff23 	bl	8011420 <SGP_SetHT>

//   measurements = 0;
   MeasurementDone = true;
 80145da:	4b04      	ldr	r3, [pc, #16]	@ (80145ec <HIDS_GetMeasurementValues+0x110>)
 80145dc:	2201      	movs	r2, #1
 80145de:	701a      	strb	r2, [r3, #0]
   //HIDS_StartMeasurement();
    //Debug("HIDS measurement is done.");
   return true;
 80145e0:	2301      	movs	r3, #1
	// Starting another measurement, still not done with all measurements.

	//return false;
}
 80145e2:	0018      	movs	r0, r3
 80145e4:	46bd      	mov	sp, r7
 80145e6:	b004      	add	sp, #16
 80145e8:	bd80      	pop	{r7, pc}
 80145ea:	46c0      	nop			@ (mov r8, r8)
 80145ec:	2000250c 	.word	0x2000250c
 80145f0:	20002500 	.word	0x20002500
 80145f4:	0802db5c 	.word	0x0802db5c
 80145f8:	0802daf4 	.word	0x0802daf4
 80145fc:	40efffe0 	.word	0x40efffe0
 8014600:	42340000 	.word	0x42340000
 8014604:	40c00000 	.word	0x40c00000

08014608 <ResetHIDSresults>:

void ResetHIDSresults() {
 8014608:	b580      	push	{r7, lr}
 801460a:	af00      	add	r7, sp, #0
  humid = 0.0;
 801460c:	4b04      	ldr	r3, [pc, #16]	@ (8014620 <ResetHIDSresults+0x18>)
 801460e:	2200      	movs	r2, #0
 8014610:	601a      	str	r2, [r3, #0]
  temp = 0.0;
 8014612:	4b04      	ldr	r3, [pc, #16]	@ (8014624 <ResetHIDSresults+0x1c>)
 8014614:	2200      	movs	r2, #0
 8014616:	601a      	str	r2, [r3, #0]
}
 8014618:	46c0      	nop			@ (mov r8, r8)
 801461a:	46bd      	mov	sp, r7
 801461c:	bd80      	pop	{r7, pc}
 801461e:	46c0      	nop			@ (mov r8, r8)
 8014620:	200024e8 	.word	0x200024e8
 8014624:	200024ec 	.word	0x200024ec

08014628 <HIDS_Upkeep>:

wsenHIDSState HIDS_Upkeep(void) {
 8014628:	b5b0      	push	{r4, r5, r7, lr}
 801462a:	b084      	sub	sp, #16
 801462c:	af04      	add	r7, sp, #16
  static wsenHIDSState HIDSState = HIDS_STATE_INIT;
  switch(HIDSState) {
 801462e:	4b69      	ldr	r3, [pc, #420]	@ (80147d4 <HIDS_Upkeep+0x1ac>)
 8014630:	781b      	ldrb	r3, [r3, #0]
 8014632:	2b06      	cmp	r3, #6
 8014634:	d900      	bls.n	8014638 <HIDS_Upkeep+0x10>
 8014636:	e0bd      	b.n	80147b4 <HIDS_Upkeep+0x18c>
 8014638:	009a      	lsls	r2, r3, #2
 801463a:	4b67      	ldr	r3, [pc, #412]	@ (80147d8 <HIDS_Upkeep+0x1b0>)
 801463c:	18d3      	adds	r3, r2, r3
 801463e:	681b      	ldr	r3, [r3, #0]
 8014640:	469f      	mov	pc, r3
    case HIDS_STATE_OFF:
      Debug("Measurements are turned off for wsenHIDS sensor.");
 8014642:	4a66      	ldr	r2, [pc, #408]	@ (80147dc <HIDS_Upkeep+0x1b4>)
 8014644:	4b66      	ldr	r3, [pc, #408]	@ (80147e0 <HIDS_Upkeep+0x1b8>)
 8014646:	0019      	movs	r1, r3
 8014648:	2003      	movs	r0, #3
 801464a:	f7ff fbf7 	bl	8013e3c <CreateLine>
      break;
 801464e:	e0bc      	b.n	80147ca <HIDS_Upkeep+0x1a2>

    case HIDS_STATE_INIT:
      ResetHIDSresults();
 8014650:	f7ff ffda 	bl	8014608 <ResetHIDSresults>
      HIDSState = HIDS_STATE_START_MEASUREMENTS;
 8014654:	4b5f      	ldr	r3, [pc, #380]	@ (80147d4 <HIDS_Upkeep+0x1ac>)
 8014656:	2201      	movs	r2, #1
 8014658:	701a      	strb	r2, [r3, #0]
      break;
 801465a:	e0b6      	b.n	80147ca <HIDS_Upkeep+0x1a2>

    case HIDS_STATE_START_MEASUREMENTS:
      if (getSensorLock() != FREE) {
 801465c:	f7f9 fbd0 	bl	800de00 <getSensorLock>
 8014660:	1e03      	subs	r3, r0, #0
 8014662:	d000      	beq.n	8014666 <HIDS_Upkeep+0x3e>
 8014664:	e0aa      	b.n	80147bc <HIDS_Upkeep+0x194>
        break;
      }
      setSensorLock(HIDS);
 8014666:	2001      	movs	r0, #1
 8014668:	f7f9 fbb6 	bl	800ddd8 <setSensorLock>
      SetMeasurementIndicator();
 801466c:	f7fe f944 	bl	80128f8 <SetMeasurementIndicator>
      HIDS_StartMeasurement();
 8014670:	f7ff fe3c 	bl	80142ec <HIDS_StartMeasurement>
      HAL_Delay(10); // wait for deferred DMA transfers
 8014674:	200a      	movs	r0, #10
 8014676:	f000 f963 	bl	8014940 <HAL_Delay>
      setSensorLock(FREE);
 801467a:	2000      	movs	r0, #0
 801467c:	f7f9 fbac 	bl	800ddd8 <setSensorLock>
      HIDSState = HIDS_STATE_WAIT_FOR_COMPLETION;
 8014680:	4b54      	ldr	r3, [pc, #336]	@ (80147d4 <HIDS_Upkeep+0x1ac>)
 8014682:	2202      	movs	r2, #2
 8014684:	701a      	strb	r2, [r3, #0]
      break;
 8014686:	e0a0      	b.n	80147ca <HIDS_Upkeep+0x1a2>

    case HIDS_STATE_WAIT_FOR_COMPLETION:
      if (getSensorLock() != FREE) {
 8014688:	f7f9 fbba 	bl	800de00 <getSensorLock>
 801468c:	1e03      	subs	r3, r0, #0
 801468e:	d000      	beq.n	8014692 <HIDS_Upkeep+0x6a>
 8014690:	e096      	b.n	80147c0 <HIDS_Upkeep+0x198>
        break;
      }
      setSensorLock(HIDS);
 8014692:	2001      	movs	r0, #1
 8014694:	f7f9 fba0 	bl	800ddd8 <setSensorLock>
      if(HIDS_GetMeasurementValues(&humid, &temp)) {
 8014698:	4a52      	ldr	r2, [pc, #328]	@ (80147e4 <HIDS_Upkeep+0x1bc>)
 801469a:	4b53      	ldr	r3, [pc, #332]	@ (80147e8 <HIDS_Upkeep+0x1c0>)
 801469c:	0011      	movs	r1, r2
 801469e:	0018      	movs	r0, r3
 80146a0:	f7ff ff1c 	bl	80144dc <HIDS_GetMeasurementValues>
 80146a4:	1e03      	subs	r3, r0, #0
 80146a6:	d002      	beq.n	80146ae <HIDS_Upkeep+0x86>
        HIDSState = HIDS_STATE_PROCESS_RESULTS;
 80146a8:	4b4a      	ldr	r3, [pc, #296]	@ (80147d4 <HIDS_Upkeep+0x1ac>)
 80146aa:	2203      	movs	r2, #3
 80146ac:	701a      	strb	r2, [r3, #0]
      }
      HAL_Delay(10); // wait for deferred DMA transfers
 80146ae:	200a      	movs	r0, #10
 80146b0:	f000 f946 	bl	8014940 <HAL_Delay>
      setSensorLock(FREE);
 80146b4:	2000      	movs	r0, #0
 80146b6:	f7f9 fb8f 	bl	800ddd8 <setSensorLock>
      break;
 80146ba:	e086      	b.n	80147ca <HIDS_Upkeep+0x1a2>

    case HIDS_STATE_PROCESS_RESULTS:
      Info("Humidity value: %3.2f%%, Temperature value: %3.2fC", humid, temp);
 80146bc:	4b4a      	ldr	r3, [pc, #296]	@ (80147e8 <HIDS_Upkeep+0x1c0>)
 80146be:	681b      	ldr	r3, [r3, #0]
 80146c0:	1c18      	adds	r0, r3, #0
 80146c2:	f7ef f8e7 	bl	8003894 <__aeabi_f2d>
 80146c6:	0004      	movs	r4, r0
 80146c8:	000d      	movs	r5, r1
 80146ca:	4b46      	ldr	r3, [pc, #280]	@ (80147e4 <HIDS_Upkeep+0x1bc>)
 80146cc:	681b      	ldr	r3, [r3, #0]
 80146ce:	1c18      	adds	r0, r3, #0
 80146d0:	f7ef f8e0 	bl	8003894 <__aeabi_f2d>
 80146d4:	0002      	movs	r2, r0
 80146d6:	000b      	movs	r3, r1
 80146d8:	4844      	ldr	r0, [pc, #272]	@ (80147ec <HIDS_Upkeep+0x1c4>)
 80146da:	4945      	ldr	r1, [pc, #276]	@ (80147f0 <HIDS_Upkeep+0x1c8>)
 80146dc:	9202      	str	r2, [sp, #8]
 80146de:	9303      	str	r3, [sp, #12]
 80146e0:	9400      	str	r4, [sp, #0]
 80146e2:	9501      	str	r5, [sp, #4]
 80146e4:	0002      	movs	r2, r0
 80146e6:	2002      	movs	r0, #2
 80146e8:	f7ff fba8 	bl	8013e3c <CreateLine>
      setHIDS(temp, humid);
 80146ec:	4b3d      	ldr	r3, [pc, #244]	@ (80147e4 <HIDS_Upkeep+0x1bc>)
 80146ee:	681a      	ldr	r2, [r3, #0]
 80146f0:	4b3d      	ldr	r3, [pc, #244]	@ (80147e8 <HIDS_Upkeep+0x1c0>)
 80146f2:	681b      	ldr	r3, [r3, #0]
 80146f4:	1c19      	adds	r1, r3, #0
 80146f6:	1c10      	adds	r0, r2, #0
 80146f8:	f7f0 f9ca 	bl	8004a90 <setHIDS>
      ResetMeasurementIndicator();
 80146fc:	f7fe f914 	bl	8012928 <ResetMeasurementIndicator>
      if (((temp - HIDS_DewPointCalculation(&humid, &temp)) < 1.0) && ((getPosixTime() - HIDS_LastHeaterInRTC) > 900)) {
 8014700:	4b38      	ldr	r3, [pc, #224]	@ (80147e4 <HIDS_Upkeep+0x1bc>)
 8014702:	681c      	ldr	r4, [r3, #0]
 8014704:	4a37      	ldr	r2, [pc, #220]	@ (80147e4 <HIDS_Upkeep+0x1bc>)
 8014706:	4b38      	ldr	r3, [pc, #224]	@ (80147e8 <HIDS_Upkeep+0x1c0>)
 8014708:	0011      	movs	r1, r2
 801470a:	0018      	movs	r0, r3
 801470c:	f7ff fd34 	bl	8014178 <HIDS_DewPointCalculation>
 8014710:	1c03      	adds	r3, r0, #0
 8014712:	1c19      	adds	r1, r3, #0
 8014714:	1c20      	adds	r0, r4, #0
 8014716:	f7ec fded 	bl	80012f4 <__aeabi_fsub>
 801471a:	1c03      	adds	r3, r0, #0
 801471c:	21fe      	movs	r1, #254	@ 0xfe
 801471e:	0589      	lsls	r1, r1, #22
 8014720:	1c18      	adds	r0, r3, #0
 8014722:	f7eb ff05 	bl	8000530 <__aeabi_fcmplt>
 8014726:	1e03      	subs	r3, r0, #0
 8014728:	d023      	beq.n	8014772 <HIDS_Upkeep+0x14a>
 801472a:	f7f5 ff17 	bl	800a55c <getPosixTime>
 801472e:	0002      	movs	r2, r0
 8014730:	4b30      	ldr	r3, [pc, #192]	@ (80147f4 <HIDS_Upkeep+0x1cc>)
 8014732:	681b      	ldr	r3, [r3, #0]
 8014734:	1ad2      	subs	r2, r2, r3
 8014736:	23e1      	movs	r3, #225	@ 0xe1
 8014738:	009b      	lsls	r3, r3, #2
 801473a:	429a      	cmp	r2, r3
 801473c:	d919      	bls.n	8014772 <HIDS_Upkeep+0x14a>
        Info("wsenHIDS The dew point is approaching, heater is started");
 801473e:	4a2e      	ldr	r2, [pc, #184]	@ (80147f8 <HIDS_Upkeep+0x1d0>)
 8014740:	4b2b      	ldr	r3, [pc, #172]	@ (80147f0 <HIDS_Upkeep+0x1c8>)
 8014742:	0019      	movs	r1, r3
 8014744:	2002      	movs	r0, #2
 8014746:	f7ff fb79 	bl	8013e3c <CreateLine>
        if (getSensorLock() != FREE) {
 801474a:	f7f9 fb59 	bl	800de00 <getSensorLock>
 801474e:	1e03      	subs	r3, r0, #0
 8014750:	d138      	bne.n	80147c4 <HIDS_Upkeep+0x19c>
          break;
        }
        HIDS_EnableHeater();
 8014752:	f7ff fd83 	bl	801425c <HIDS_EnableHeater>
        HAL_Delay(10); // wait for deferred DMA transfers
 8014756:	200a      	movs	r0, #10
 8014758:	f000 f8f2 	bl	8014940 <HAL_Delay>
        setSensorLock(FREE);
 801475c:	2000      	movs	r0, #0
 801475e:	f7f9 fb3b 	bl	800ddd8 <setSensorLock>
        HIDSTimeStamp = HAL_GetTick() + 12000;
 8014762:	f000 f8e3 	bl	801492c <HAL_GetTick>
 8014766:	0003      	movs	r3, r0
 8014768:	4a24      	ldr	r2, [pc, #144]	@ (80147fc <HIDS_Upkeep+0x1d4>)
 801476a:	189a      	adds	r2, r3, r2
 801476c:	4b24      	ldr	r3, [pc, #144]	@ (8014800 <HIDS_Upkeep+0x1d8>)
 801476e:	601a      	str	r2, [r3, #0]
 8014770:	e011      	b.n	8014796 <HIDS_Upkeep+0x16e>
      }
      else {
        HIDSTimeStamp = HAL_GetTick() + ((Check_USB_PowerOn() || userToggle)?10000:1000);  // about every ten seconds when power is plugged
 8014772:	f000 f8db 	bl	801492c <HAL_GetTick>
 8014776:	0004      	movs	r4, r0
 8014778:	f7f5 fa4e 	bl	8009c18 <Check_USB_PowerOn>
 801477c:	1e03      	subs	r3, r0, #0
 801477e:	d103      	bne.n	8014788 <HIDS_Upkeep+0x160>
 8014780:	4b20      	ldr	r3, [pc, #128]	@ (8014804 <HIDS_Upkeep+0x1dc>)
 8014782:	781b      	ldrb	r3, [r3, #0]
 8014784:	2b00      	cmp	r3, #0
 8014786:	d001      	beq.n	801478c <HIDS_Upkeep+0x164>
 8014788:	4b1f      	ldr	r3, [pc, #124]	@ (8014808 <HIDS_Upkeep+0x1e0>)
 801478a:	e001      	b.n	8014790 <HIDS_Upkeep+0x168>
 801478c:	23fa      	movs	r3, #250	@ 0xfa
 801478e:	009b      	lsls	r3, r3, #2
 8014790:	191a      	adds	r2, r3, r4
 8014792:	4b1b      	ldr	r3, [pc, #108]	@ (8014800 <HIDS_Upkeep+0x1d8>)
 8014794:	601a      	str	r2, [r3, #0]
      }
      HIDSState = HIDS_STATE_WAIT;
 8014796:	4b0f      	ldr	r3, [pc, #60]	@ (80147d4 <HIDS_Upkeep+0x1ac>)
 8014798:	2206      	movs	r2, #6
 801479a:	701a      	strb	r2, [r3, #0]
      break;
 801479c:	e015      	b.n	80147ca <HIDS_Upkeep+0x1a2>

    case HIDS_STATE_WAIT:
      if(TimestampIsReached(HIDSTimeStamp)) {
 801479e:	4b18      	ldr	r3, [pc, #96]	@ (8014800 <HIDS_Upkeep+0x1d8>)
 80147a0:	681b      	ldr	r3, [r3, #0]
 80147a2:	0018      	movs	r0, r3
 80147a4:	f7ff faf4 	bl	8013d90 <TimestampIsReached>
 80147a8:	1e03      	subs	r3, r0, #0
 80147aa:	d00d      	beq.n	80147c8 <HIDS_Upkeep+0x1a0>
        HIDSState = HIDS_STATE_INIT;
 80147ac:	4b09      	ldr	r3, [pc, #36]	@ (80147d4 <HIDS_Upkeep+0x1ac>)
 80147ae:	2200      	movs	r2, #0
 80147b0:	701a      	strb	r2, [r3, #0]
      }
      break;
 80147b2:	e009      	b.n	80147c8 <HIDS_Upkeep+0x1a0>

    default:
    // Handle unexpected state
      HIDSState = HIDS_STATE_INIT;
 80147b4:	4b07      	ldr	r3, [pc, #28]	@ (80147d4 <HIDS_Upkeep+0x1ac>)
 80147b6:	2200      	movs	r2, #0
 80147b8:	701a      	strb	r2, [r3, #0]
      break;
 80147ba:	e006      	b.n	80147ca <HIDS_Upkeep+0x1a2>
        break;
 80147bc:	46c0      	nop			@ (mov r8, r8)
 80147be:	e004      	b.n	80147ca <HIDS_Upkeep+0x1a2>
        break;
 80147c0:	46c0      	nop			@ (mov r8, r8)
 80147c2:	e002      	b.n	80147ca <HIDS_Upkeep+0x1a2>
          break;
 80147c4:	46c0      	nop			@ (mov r8, r8)
 80147c6:	e000      	b.n	80147ca <HIDS_Upkeep+0x1a2>
      break;
 80147c8:	46c0      	nop			@ (mov r8, r8)
  }

  return HIDSState;
 80147ca:	4b02      	ldr	r3, [pc, #8]	@ (80147d4 <HIDS_Upkeep+0x1ac>)
 80147cc:	781b      	ldrb	r3, [r3, #0]
}
 80147ce:	0018      	movs	r0, r3
 80147d0:	46bd      	mov	sp, r7
 80147d2:	bdb0      	pop	{r4, r5, r7, pc}
 80147d4:	20002514 	.word	0x20002514
 80147d8:	0802e4c8 	.word	0x0802e4c8
 80147dc:	0802db90 	.word	0x0802db90
 80147e0:	0802dbc4 	.word	0x0802dbc4
 80147e4:	200024ec 	.word	0x200024ec
 80147e8:	200024e8 	.word	0x200024e8
 80147ec:	0802dbc8 	.word	0x0802dbc8
 80147f0:	0802dac8 	.word	0x0802dac8
 80147f4:	20002508 	.word	0x20002508
 80147f8:	0802dbfc 	.word	0x0802dbfc
 80147fc:	00002ee0 	.word	0x00002ee0
 8014800:	20002510 	.word	0x20002510
 8014804:	2000214e 	.word	0x2000214e
 8014808:	00002710 	.word	0x00002710

0801480c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 801480c:	480d      	ldr	r0, [pc, #52]	@ (8014844 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 801480e:	4685      	mov	sp, r0
   
/* Call the clock system initialization function.*/
  bl  SystemInit
 8014810:	f7fe ff18 	bl	8013644 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8014814:	480c      	ldr	r0, [pc, #48]	@ (8014848 <LoopForever+0x6>)
  ldr r1, =_edata
 8014816:	490d      	ldr	r1, [pc, #52]	@ (801484c <LoopForever+0xa>)
  ldr r2, =_sidata
 8014818:	4a0d      	ldr	r2, [pc, #52]	@ (8014850 <LoopForever+0xe>)
  movs r3, #0
 801481a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 801481c:	e002      	b.n	8014824 <LoopCopyDataInit>

0801481e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 801481e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8014820:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8014822:	3304      	adds	r3, #4

08014824 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8014824:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8014826:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8014828:	d3f9      	bcc.n	801481e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 801482a:	4a0a      	ldr	r2, [pc, #40]	@ (8014854 <LoopForever+0x12>)
  ldr r4, =_ebss
 801482c:	4c0a      	ldr	r4, [pc, #40]	@ (8014858 <LoopForever+0x16>)
  movs r3, #0
 801482e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8014830:	e001      	b.n	8014836 <LoopFillZerobss>

08014832 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8014832:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8014834:	3204      	adds	r2, #4

08014836 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8014836:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8014838:	d3fb      	bcc.n	8014832 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 801483a:	f011 ff1b 	bl	8026674 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 801483e:	f7f8 f969 	bl	800cb14 <main>

08014842 <LoopForever>:

LoopForever:
    b LoopForever
 8014842:	e7fe      	b.n	8014842 <LoopForever>
   ldr   r0, =_estack
 8014844:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8014848:	20000000 	.word	0x20000000
  ldr r1, =_edata
 801484c:	2000043c 	.word	0x2000043c
  ldr r2, =_sidata
 8014850:	0802eeb0 	.word	0x0802eeb0
  ldr r2, =_sbss
 8014854:	2000043c 	.word	0x2000043c
  ldr r4, =_ebss
 8014858:	2000391c 	.word	0x2000391c

0801485c <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 801485c:	e7fe      	b.n	801485c <ADC1_COMP_IRQHandler>
	...

08014860 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8014860:	b580      	push	{r7, lr}
 8014862:	b082      	sub	sp, #8
 8014864:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8014866:	1dfb      	adds	r3, r7, #7
 8014868:	2200      	movs	r2, #0
 801486a:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 801486c:	4b0b      	ldr	r3, [pc, #44]	@ (801489c <HAL_Init+0x3c>)
 801486e:	681a      	ldr	r2, [r3, #0]
 8014870:	4b0a      	ldr	r3, [pc, #40]	@ (801489c <HAL_Init+0x3c>)
 8014872:	2140      	movs	r1, #64	@ 0x40
 8014874:	430a      	orrs	r2, r1
 8014876:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8014878:	2003      	movs	r0, #3
 801487a:	f000 f811 	bl	80148a0 <HAL_InitTick>
 801487e:	1e03      	subs	r3, r0, #0
 8014880:	d003      	beq.n	801488a <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8014882:	1dfb      	adds	r3, r7, #7
 8014884:	2201      	movs	r2, #1
 8014886:	701a      	strb	r2, [r3, #0]
 8014888:	e001      	b.n	801488e <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 801488a:	f7fe fd8f 	bl	80133ac <HAL_MspInit>
  }

  /* Return function status */
  return status;
 801488e:	1dfb      	adds	r3, r7, #7
 8014890:	781b      	ldrb	r3, [r3, #0]
}
 8014892:	0018      	movs	r0, r3
 8014894:	46bd      	mov	sp, r7
 8014896:	b002      	add	sp, #8
 8014898:	bd80      	pop	{r7, pc}
 801489a:	46c0      	nop			@ (mov r8, r8)
 801489c:	40022000 	.word	0x40022000

080148a0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80148a0:	b590      	push	{r4, r7, lr}
 80148a2:	b083      	sub	sp, #12
 80148a4:	af00      	add	r7, sp, #0
 80148a6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80148a8:	4b14      	ldr	r3, [pc, #80]	@ (80148fc <HAL_InitTick+0x5c>)
 80148aa:	681c      	ldr	r4, [r3, #0]
 80148ac:	4b14      	ldr	r3, [pc, #80]	@ (8014900 <HAL_InitTick+0x60>)
 80148ae:	781b      	ldrb	r3, [r3, #0]
 80148b0:	0019      	movs	r1, r3
 80148b2:	23fa      	movs	r3, #250	@ 0xfa
 80148b4:	0098      	lsls	r0, r3, #2
 80148b6:	f7eb fc75 	bl	80001a4 <__udivsi3>
 80148ba:	0003      	movs	r3, r0
 80148bc:	0019      	movs	r1, r3
 80148be:	0020      	movs	r0, r4
 80148c0:	f7eb fc70 	bl	80001a4 <__udivsi3>
 80148c4:	0003      	movs	r3, r0
 80148c6:	0018      	movs	r0, r3
 80148c8:	f000 fcdf 	bl	801528a <HAL_SYSTICK_Config>
 80148cc:	1e03      	subs	r3, r0, #0
 80148ce:	d001      	beq.n	80148d4 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80148d0:	2301      	movs	r3, #1
 80148d2:	e00f      	b.n	80148f4 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80148d4:	687b      	ldr	r3, [r7, #4]
 80148d6:	2b03      	cmp	r3, #3
 80148d8:	d80b      	bhi.n	80148f2 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80148da:	6879      	ldr	r1, [r7, #4]
 80148dc:	2301      	movs	r3, #1
 80148de:	425b      	negs	r3, r3
 80148e0:	2200      	movs	r2, #0
 80148e2:	0018      	movs	r0, r3
 80148e4:	f000 fca8 	bl	8015238 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80148e8:	4b06      	ldr	r3, [pc, #24]	@ (8014904 <HAL_InitTick+0x64>)
 80148ea:	687a      	ldr	r2, [r7, #4]
 80148ec:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80148ee:	2300      	movs	r3, #0
 80148f0:	e000      	b.n	80148f4 <HAL_InitTick+0x54>
    return HAL_ERROR;
 80148f2:	2301      	movs	r3, #1
}
 80148f4:	0018      	movs	r0, r3
 80148f6:	46bd      	mov	sp, r7
 80148f8:	b003      	add	sp, #12
 80148fa:	bd90      	pop	{r4, r7, pc}
 80148fc:	200000ec 	.word	0x200000ec
 8014900:	20000100 	.word	0x20000100
 8014904:	200000fc 	.word	0x200000fc

08014908 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8014908:	b580      	push	{r7, lr}
 801490a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 801490c:	4b05      	ldr	r3, [pc, #20]	@ (8014924 <HAL_IncTick+0x1c>)
 801490e:	781b      	ldrb	r3, [r3, #0]
 8014910:	001a      	movs	r2, r3
 8014912:	4b05      	ldr	r3, [pc, #20]	@ (8014928 <HAL_IncTick+0x20>)
 8014914:	681b      	ldr	r3, [r3, #0]
 8014916:	18d2      	adds	r2, r2, r3
 8014918:	4b03      	ldr	r3, [pc, #12]	@ (8014928 <HAL_IncTick+0x20>)
 801491a:	601a      	str	r2, [r3, #0]
}
 801491c:	46c0      	nop			@ (mov r8, r8)
 801491e:	46bd      	mov	sp, r7
 8014920:	bd80      	pop	{r7, pc}
 8014922:	46c0      	nop			@ (mov r8, r8)
 8014924:	20000100 	.word	0x20000100
 8014928:	20002518 	.word	0x20002518

0801492c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 801492c:	b580      	push	{r7, lr}
 801492e:	af00      	add	r7, sp, #0
  return uwTick;
 8014930:	4b02      	ldr	r3, [pc, #8]	@ (801493c <HAL_GetTick+0x10>)
 8014932:	681b      	ldr	r3, [r3, #0]
}
 8014934:	0018      	movs	r0, r3
 8014936:	46bd      	mov	sp, r7
 8014938:	bd80      	pop	{r7, pc}
 801493a:	46c0      	nop			@ (mov r8, r8)
 801493c:	20002518 	.word	0x20002518

08014940 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8014940:	b580      	push	{r7, lr}
 8014942:	b084      	sub	sp, #16
 8014944:	af00      	add	r7, sp, #0
 8014946:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8014948:	f7ff fff0 	bl	801492c <HAL_GetTick>
 801494c:	0003      	movs	r3, r0
 801494e:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8014950:	687b      	ldr	r3, [r7, #4]
 8014952:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8014954:	68fb      	ldr	r3, [r7, #12]
 8014956:	3301      	adds	r3, #1
 8014958:	d005      	beq.n	8014966 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 801495a:	4b0a      	ldr	r3, [pc, #40]	@ (8014984 <HAL_Delay+0x44>)
 801495c:	781b      	ldrb	r3, [r3, #0]
 801495e:	001a      	movs	r2, r3
 8014960:	68fb      	ldr	r3, [r7, #12]
 8014962:	189b      	adds	r3, r3, r2
 8014964:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8014966:	46c0      	nop			@ (mov r8, r8)
 8014968:	f7ff ffe0 	bl	801492c <HAL_GetTick>
 801496c:	0002      	movs	r2, r0
 801496e:	68bb      	ldr	r3, [r7, #8]
 8014970:	1ad3      	subs	r3, r2, r3
 8014972:	68fa      	ldr	r2, [r7, #12]
 8014974:	429a      	cmp	r2, r3
 8014976:	d8f7      	bhi.n	8014968 <HAL_Delay+0x28>
  {
  }
}
 8014978:	46c0      	nop			@ (mov r8, r8)
 801497a:	46c0      	nop			@ (mov r8, r8)
 801497c:	46bd      	mov	sp, r7
 801497e:	b004      	add	sp, #16
 8014980:	bd80      	pop	{r7, pc}
 8014982:	46c0      	nop			@ (mov r8, r8)
 8014984:	20000100 	.word	0x20000100

08014988 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 8014988:	b580      	push	{r7, lr}
 801498a:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 801498c:	4b04      	ldr	r3, [pc, #16]	@ (80149a0 <HAL_SuspendTick+0x18>)
 801498e:	681a      	ldr	r2, [r3, #0]
 8014990:	4b03      	ldr	r3, [pc, #12]	@ (80149a0 <HAL_SuspendTick+0x18>)
 8014992:	2102      	movs	r1, #2
 8014994:	438a      	bics	r2, r1
 8014996:	601a      	str	r2, [r3, #0]
}
 8014998:	46c0      	nop			@ (mov r8, r8)
 801499a:	46bd      	mov	sp, r7
 801499c:	bd80      	pop	{r7, pc}
 801499e:	46c0      	nop			@ (mov r8, r8)
 80149a0:	e000e010 	.word	0xe000e010

080149a4 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 80149a4:	b580      	push	{r7, lr}
 80149a6:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SysTick->CTRL  |= SysTick_CTRL_TICKINT_Msk;
 80149a8:	4b04      	ldr	r3, [pc, #16]	@ (80149bc <HAL_ResumeTick+0x18>)
 80149aa:	681a      	ldr	r2, [r3, #0]
 80149ac:	4b03      	ldr	r3, [pc, #12]	@ (80149bc <HAL_ResumeTick+0x18>)
 80149ae:	2102      	movs	r1, #2
 80149b0:	430a      	orrs	r2, r1
 80149b2:	601a      	str	r2, [r3, #0]
}
 80149b4:	46c0      	nop			@ (mov r8, r8)
 80149b6:	46bd      	mov	sp, r7
 80149b8:	bd80      	pop	{r7, pc}
 80149ba:	46c0      	nop			@ (mov r8, r8)
 80149bc:	e000e010 	.word	0xe000e010

080149c0 <HAL_ADC_Init>:
  *         function "HAL_ADCEx_EnableVREFINTTempSensor()" must be called similarilly.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80149c0:	b580      	push	{r7, lr}
 80149c2:	b082      	sub	sp, #8
 80149c4:	af00      	add	r7, sp, #0
 80149c6:	6078      	str	r0, [r7, #4]

  /* Check ADC handle */
  if (hadc == NULL)
 80149c8:	687b      	ldr	r3, [r7, #4]
 80149ca:	2b00      	cmp	r3, #0
 80149cc:	d101      	bne.n	80149d2 <HAL_ADC_Init+0x12>
  {
    return HAL_ERROR;
 80149ce:	2301      	movs	r3, #1
 80149d0:	e159      	b.n	8014c86 <HAL_ADC_Init+0x2c6>
  /* Refer to header of this file for more details on clock enabling procedure*/

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80149d2:	687b      	ldr	r3, [r7, #4]
 80149d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80149d6:	2b00      	cmp	r3, #0
 80149d8:	d10a      	bne.n	80149f0 <HAL_ADC_Init+0x30>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80149da:	687b      	ldr	r3, [r7, #4]
 80149dc:	2200      	movs	r2, #0
 80149de:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80149e0:	687b      	ldr	r3, [r7, #4]
 80149e2:	2250      	movs	r2, #80	@ 0x50
 80149e4:	2100      	movs	r1, #0
 80149e6:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80149e8:	687b      	ldr	r3, [r7, #4]
 80149ea:	0018      	movs	r0, r3
 80149ec:	f7f6 f998 	bl	800ad20 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 80149f0:	687b      	ldr	r3, [r7, #4]
 80149f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80149f4:	2210      	movs	r2, #16
 80149f6:	4013      	ands	r3, r2
 80149f8:	2b10      	cmp	r3, #16
 80149fa:	d005      	beq.n	8014a08 <HAL_ADC_Init+0x48>
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET))
 80149fc:	687b      	ldr	r3, [r7, #4]
 80149fe:	681b      	ldr	r3, [r3, #0]
 8014a00:	689b      	ldr	r3, [r3, #8]
 8014a02:	2204      	movs	r2, #4
 8014a04:	4013      	ands	r3, r2
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8014a06:	d00b      	beq.n	8014a20 <HAL_ADC_Init+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8014a08:	687b      	ldr	r3, [r7, #4]
 8014a0a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8014a0c:	2210      	movs	r2, #16
 8014a0e:	431a      	orrs	r2, r3
 8014a10:	687b      	ldr	r3, [r7, #4]
 8014a12:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8014a14:	687b      	ldr	r3, [r7, #4]
 8014a16:	2250      	movs	r2, #80	@ 0x50
 8014a18:	2100      	movs	r1, #0
 8014a1a:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8014a1c:	2301      	movs	r3, #1
 8014a1e:	e132      	b.n	8014c86 <HAL_ADC_Init+0x2c6>
  }

  /* Set ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8014a20:	687b      	ldr	r3, [r7, #4]
 8014a22:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8014a24:	4a9a      	ldr	r2, [pc, #616]	@ (8014c90 <HAL_ADC_Init+0x2d0>)
 8014a26:	4013      	ands	r3, r2
 8014a28:	2202      	movs	r2, #2
 8014a2a:	431a      	orrs	r2, r3
 8014a2c:	687b      	ldr	r3, [r7, #4]
 8014a2e:	655a      	str	r2, [r3, #84]	@ 0x54
  /* Parameters update conditioned to ADC state:                            */
  /* Parameters that can be updated only when ADC is disabled:              */
  /*  - ADC clock mode                                                      */
  /*  - ADC clock prescaler                                                 */
  /*  - ADC Resolution                                                      */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8014a30:	687b      	ldr	r3, [r7, #4]
 8014a32:	681b      	ldr	r3, [r3, #0]
 8014a34:	689b      	ldr	r3, [r3, #8]
 8014a36:	2203      	movs	r2, #3
 8014a38:	4013      	ands	r3, r2
 8014a3a:	2b01      	cmp	r3, #1
 8014a3c:	d108      	bne.n	8014a50 <HAL_ADC_Init+0x90>
 8014a3e:	687b      	ldr	r3, [r7, #4]
 8014a40:	681b      	ldr	r3, [r3, #0]
 8014a42:	681b      	ldr	r3, [r3, #0]
 8014a44:	2201      	movs	r2, #1
 8014a46:	4013      	ands	r3, r2
 8014a48:	2b01      	cmp	r3, #1
 8014a4a:	d101      	bne.n	8014a50 <HAL_ADC_Init+0x90>
 8014a4c:	2301      	movs	r3, #1
 8014a4e:	e000      	b.n	8014a52 <HAL_ADC_Init+0x92>
 8014a50:	2300      	movs	r3, #0
 8014a52:	2b00      	cmp	r3, #0
 8014a54:	d149      	bne.n	8014aea <HAL_ADC_Init+0x12a>
    /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
    /*     (set into HAL_ADC_ConfigChannel() )                              */

    /* Configuration of ADC clock: clock source PCLK or asynchronous with
    selectable prescaler */
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 8014a56:	687b      	ldr	r3, [r7, #4]
 8014a58:	685a      	ldr	r2, [r3, #4]
 8014a5a:	23c0      	movs	r3, #192	@ 0xc0
 8014a5c:	061b      	lsls	r3, r3, #24
 8014a5e:	429a      	cmp	r2, r3
 8014a60:	d00b      	beq.n	8014a7a <HAL_ADC_Init+0xba>
 8014a62:	687b      	ldr	r3, [r7, #4]
 8014a64:	685a      	ldr	r2, [r3, #4]
 8014a66:	2380      	movs	r3, #128	@ 0x80
 8014a68:	05db      	lsls	r3, r3, #23
 8014a6a:	429a      	cmp	r2, r3
 8014a6c:	d005      	beq.n	8014a7a <HAL_ADC_Init+0xba>
 8014a6e:	687b      	ldr	r3, [r7, #4]
 8014a70:	685a      	ldr	r2, [r3, #4]
 8014a72:	2380      	movs	r3, #128	@ 0x80
 8014a74:	061b      	lsls	r3, r3, #24
 8014a76:	429a      	cmp	r2, r3
 8014a78:	d111      	bne.n	8014a9e <HAL_ADC_Init+0xde>
 8014a7a:	687b      	ldr	r3, [r7, #4]
 8014a7c:	681b      	ldr	r3, [r3, #0]
 8014a7e:	691a      	ldr	r2, [r3, #16]
 8014a80:	687b      	ldr	r3, [r7, #4]
 8014a82:	681b      	ldr	r3, [r3, #0]
 8014a84:	0092      	lsls	r2, r2, #2
 8014a86:	0892      	lsrs	r2, r2, #2
 8014a88:	611a      	str	r2, [r3, #16]
 8014a8a:	687b      	ldr	r3, [r7, #4]
 8014a8c:	681b      	ldr	r3, [r3, #0]
 8014a8e:	6919      	ldr	r1, [r3, #16]
 8014a90:	687b      	ldr	r3, [r7, #4]
 8014a92:	685a      	ldr	r2, [r3, #4]
 8014a94:	687b      	ldr	r3, [r7, #4]
 8014a96:	681b      	ldr	r3, [r3, #0]
 8014a98:	430a      	orrs	r2, r1
 8014a9a:	611a      	str	r2, [r3, #16]
 8014a9c:	e014      	b.n	8014ac8 <HAL_ADC_Init+0x108>
 8014a9e:	687b      	ldr	r3, [r7, #4]
 8014aa0:	681b      	ldr	r3, [r3, #0]
 8014aa2:	691a      	ldr	r2, [r3, #16]
 8014aa4:	687b      	ldr	r3, [r7, #4]
 8014aa6:	681b      	ldr	r3, [r3, #0]
 8014aa8:	0092      	lsls	r2, r2, #2
 8014aaa:	0892      	lsrs	r2, r2, #2
 8014aac:	611a      	str	r2, [r3, #16]
 8014aae:	4b79      	ldr	r3, [pc, #484]	@ (8014c94 <HAL_ADC_Init+0x2d4>)
 8014ab0:	681a      	ldr	r2, [r3, #0]
 8014ab2:	4b78      	ldr	r3, [pc, #480]	@ (8014c94 <HAL_ADC_Init+0x2d4>)
 8014ab4:	4978      	ldr	r1, [pc, #480]	@ (8014c98 <HAL_ADC_Init+0x2d8>)
 8014ab6:	400a      	ands	r2, r1
 8014ab8:	601a      	str	r2, [r3, #0]
 8014aba:	4b76      	ldr	r3, [pc, #472]	@ (8014c94 <HAL_ADC_Init+0x2d4>)
 8014abc:	6819      	ldr	r1, [r3, #0]
 8014abe:	687b      	ldr	r3, [r7, #4]
 8014ac0:	685a      	ldr	r2, [r3, #4]
 8014ac2:	4b74      	ldr	r3, [pc, #464]	@ (8014c94 <HAL_ADC_Init+0x2d4>)
 8014ac4:	430a      	orrs	r2, r1
 8014ac6:	601a      	str	r2, [r3, #0]

    /* Configuration of ADC:                                                */
    /*  - Resolution                                                        */
    hadc->Instance->CFGR1 &= ~(ADC_CFGR1_RES);
 8014ac8:	687b      	ldr	r3, [r7, #4]
 8014aca:	681b      	ldr	r3, [r3, #0]
 8014acc:	68da      	ldr	r2, [r3, #12]
 8014ace:	687b      	ldr	r3, [r7, #4]
 8014ad0:	681b      	ldr	r3, [r3, #0]
 8014ad2:	2118      	movs	r1, #24
 8014ad4:	438a      	bics	r2, r1
 8014ad6:	60da      	str	r2, [r3, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;
 8014ad8:	687b      	ldr	r3, [r7, #4]
 8014ada:	681b      	ldr	r3, [r3, #0]
 8014adc:	68d9      	ldr	r1, [r3, #12]
 8014ade:	687b      	ldr	r3, [r7, #4]
 8014ae0:	689a      	ldr	r2, [r3, #8]
 8014ae2:	687b      	ldr	r3, [r7, #4]
 8014ae4:	681b      	ldr	r3, [r3, #0]
 8014ae6:	430a      	orrs	r2, r1
 8014ae8:	60da      	str	r2, [r3, #12]
  }

  /* Set the Low Frequency mode */
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 8014aea:	4b6a      	ldr	r3, [pc, #424]	@ (8014c94 <HAL_ADC_Init+0x2d4>)
 8014aec:	681a      	ldr	r2, [r3, #0]
 8014aee:	4b69      	ldr	r3, [pc, #420]	@ (8014c94 <HAL_ADC_Init+0x2d4>)
 8014af0:	496a      	ldr	r1, [pc, #424]	@ (8014c9c <HAL_ADC_Init+0x2dc>)
 8014af2:	400a      	ands	r2, r1
 8014af4:	601a      	str	r2, [r3, #0]
  ADC->CCR |= __HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);
 8014af6:	4b67      	ldr	r3, [pc, #412]	@ (8014c94 <HAL_ADC_Init+0x2d4>)
 8014af8:	6819      	ldr	r1, [r3, #0]
 8014afa:	687b      	ldr	r3, [r7, #4]
 8014afc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8014afe:	065a      	lsls	r2, r3, #25
 8014b00:	4b64      	ldr	r3, [pc, #400]	@ (8014c94 <HAL_ADC_Init+0x2d4>)
 8014b02:	430a      	orrs	r2, r1
 8014b04:	601a      	str	r2, [r3, #0]

  /* Enable voltage regulator (if disabled at this step) */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 8014b06:	687b      	ldr	r3, [r7, #4]
 8014b08:	681b      	ldr	r3, [r3, #0]
 8014b0a:	689a      	ldr	r2, [r3, #8]
 8014b0c:	2380      	movs	r3, #128	@ 0x80
 8014b0e:	055b      	lsls	r3, r3, #21
 8014b10:	4013      	ands	r3, r2
 8014b12:	d108      	bne.n	8014b26 <HAL_ADC_Init+0x166>
  {
    /* Set ADVREGEN bit */
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 8014b14:	687b      	ldr	r3, [r7, #4]
 8014b16:	681b      	ldr	r3, [r3, #0]
 8014b18:	689a      	ldr	r2, [r3, #8]
 8014b1a:	687b      	ldr	r3, [r7, #4]
 8014b1c:	681b      	ldr	r3, [r3, #0]
 8014b1e:	2180      	movs	r1, #128	@ 0x80
 8014b20:	0549      	lsls	r1, r1, #21
 8014b22:	430a      	orrs	r2, r1
 8014b24:	609a      	str	r2, [r3, #8]
  /*  - Continuous conversion mode                                            */
  /*  - DMA continuous request                                                */
  /*  - Overrun                                                               */
  /*  - AutoDelay feature                                                     */
  /*  - Discontinuous mode                                                    */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 8014b26:	687b      	ldr	r3, [r7, #4]
 8014b28:	681b      	ldr	r3, [r3, #0]
 8014b2a:	68da      	ldr	r2, [r3, #12]
 8014b2c:	687b      	ldr	r3, [r7, #4]
 8014b2e:	681b      	ldr	r3, [r3, #0]
 8014b30:	495b      	ldr	r1, [pc, #364]	@ (8014ca0 <HAL_ADC_Init+0x2e0>)
 8014b32:	400a      	ands	r2, r1
 8014b34:	60da      	str	r2, [r3, #12]
                             ADC_CFGR1_OVRMOD  |
                             ADC_CFGR1_AUTDLY  |
                             ADC_CFGR1_AUTOFF  |
                             ADC_CFGR1_DISCEN);

  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8014b36:	687b      	ldr	r3, [r7, #4]
 8014b38:	681b      	ldr	r3, [r3, #0]
 8014b3a:	68d9      	ldr	r1, [r3, #12]
 8014b3c:	687b      	ldr	r3, [r7, #4]
 8014b3e:	68da      	ldr	r2, [r3, #12]
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8014b40:	687b      	ldr	r3, [r7, #4]
 8014b42:	691b      	ldr	r3, [r3, #16]
 8014b44:	2b02      	cmp	r3, #2
 8014b46:	d101      	bne.n	8014b4c <HAL_ADC_Init+0x18c>
 8014b48:	2304      	movs	r3, #4
 8014b4a:	e000      	b.n	8014b4e <HAL_ADC_Init+0x18e>
 8014b4c:	2300      	movs	r3, #0
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8014b4e:	431a      	orrs	r2, r3
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8014b50:	687b      	ldr	r3, [r7, #4]
 8014b52:	2020      	movs	r0, #32
 8014b54:	5c1b      	ldrb	r3, [r3, r0]
 8014b56:	035b      	lsls	r3, r3, #13
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8014b58:	431a      	orrs	r2, r3
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8014b5a:	687b      	ldr	r3, [r7, #4]
 8014b5c:	202c      	movs	r0, #44	@ 0x2c
 8014b5e:	5c1b      	ldrb	r3, [r3, r0]
 8014b60:	005b      	lsls	r3, r3, #1
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8014b62:	431a      	orrs	r2, r3
                            hadc->Init.Overrun                               |
 8014b64:	687b      	ldr	r3, [r7, #4]
 8014b66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8014b68:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8014b6a:	687b      	ldr	r3, [r7, #4]
 8014b6c:	699b      	ldr	r3, [r3, #24]
 8014b6e:	039b      	lsls	r3, r3, #14
                            hadc->Init.Overrun                               |
 8014b70:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 8014b72:	687b      	ldr	r3, [r7, #4]
 8014b74:	69db      	ldr	r3, [r3, #28]
 8014b76:	03db      	lsls	r3, r3, #15
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8014b78:	431a      	orrs	r2, r3
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8014b7a:	687b      	ldr	r3, [r7, #4]
 8014b7c:	681b      	ldr	r3, [r3, #0]
 8014b7e:	430a      	orrs	r2, r1
 8014b80:	60da      	str	r2, [r3, #12]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8014b82:	687b      	ldr	r3, [r7, #4]
 8014b84:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8014b86:	23c2      	movs	r3, #194	@ 0xc2
 8014b88:	33ff      	adds	r3, #255	@ 0xff
 8014b8a:	429a      	cmp	r2, r3
 8014b8c:	d00b      	beq.n	8014ba6 <HAL_ADC_Init+0x1e6>
  {
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8014b8e:	687b      	ldr	r3, [r7, #4]
 8014b90:	681b      	ldr	r3, [r3, #0]
 8014b92:	68d9      	ldr	r1, [r3, #12]
 8014b94:	687b      	ldr	r3, [r7, #4]
 8014b96:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
                             hadc->Init.ExternalTrigConvEdge;
 8014b98:	687b      	ldr	r3, [r7, #4]
 8014b9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8014b9c:	431a      	orrs	r2, r3
 8014b9e:	687b      	ldr	r3, [r7, #4]
 8014ba0:	681b      	ldr	r3, [r3, #0]
 8014ba2:	430a      	orrs	r2, r1
 8014ba4:	60da      	str	r2, [r3, #12]
  }

  /* Enable discontinuous mode only if continuous mode is disabled */
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8014ba6:	687b      	ldr	r3, [r7, #4]
 8014ba8:	2221      	movs	r2, #33	@ 0x21
 8014baa:	5c9b      	ldrb	r3, [r3, r2]
 8014bac:	2b01      	cmp	r3, #1
 8014bae:	d11a      	bne.n	8014be6 <HAL_ADC_Init+0x226>
  {
    if (hadc->Init.ContinuousConvMode == DISABLE)
 8014bb0:	687b      	ldr	r3, [r7, #4]
 8014bb2:	2220      	movs	r2, #32
 8014bb4:	5c9b      	ldrb	r3, [r3, r2]
 8014bb6:	2b00      	cmp	r3, #0
 8014bb8:	d109      	bne.n	8014bce <HAL_ADC_Init+0x20e>
    {
      /* Enable the selected ADC group regular discontinuous mode */
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 8014bba:	687b      	ldr	r3, [r7, #4]
 8014bbc:	681b      	ldr	r3, [r3, #0]
 8014bbe:	68da      	ldr	r2, [r3, #12]
 8014bc0:	687b      	ldr	r3, [r7, #4]
 8014bc2:	681b      	ldr	r3, [r3, #0]
 8014bc4:	2180      	movs	r1, #128	@ 0x80
 8014bc6:	0249      	lsls	r1, r1, #9
 8014bc8:	430a      	orrs	r2, r1
 8014bca:	60da      	str	r2, [r3, #12]
 8014bcc:	e00b      	b.n	8014be6 <HAL_ADC_Init+0x226>
      /* ADC regular group discontinuous was intended to be enabled,        */
      /* but ADC regular group modes continuous and sequencer discontinuous */
      /* cannot be enabled simultaneously.                                  */

      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8014bce:	687b      	ldr	r3, [r7, #4]
 8014bd0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8014bd2:	2220      	movs	r2, #32
 8014bd4:	431a      	orrs	r2, r3
 8014bd6:	687b      	ldr	r3, [r7, #4]
 8014bd8:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8014bda:	687b      	ldr	r3, [r7, #4]
 8014bdc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8014bde:	2201      	movs	r2, #1
 8014be0:	431a      	orrs	r2, r3
 8014be2:	687b      	ldr	r3, [r7, #4]
 8014be4:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  if (hadc->Init.OversamplingMode == ENABLE)
 8014be6:	687b      	ldr	r3, [r7, #4]
 8014be8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8014bea:	2b01      	cmp	r3, #1
 8014bec:	d11f      	bne.n	8014c2e <HAL_ADC_Init+0x26e>
    /* Configuration of Oversampler:                                          */
    /*  - Oversampling Ratio                                                  */
    /*  - Right bit shift                                                     */
    /*  - Triggered mode                                                      */

    hadc->Instance->CFGR2 &= ~(ADC_CFGR2_OVSR |
 8014bee:	687b      	ldr	r3, [r7, #4]
 8014bf0:	681b      	ldr	r3, [r3, #0]
 8014bf2:	691a      	ldr	r2, [r3, #16]
 8014bf4:	687b      	ldr	r3, [r7, #4]
 8014bf6:	681b      	ldr	r3, [r3, #0]
 8014bf8:	492a      	ldr	r1, [pc, #168]	@ (8014ca4 <HAL_ADC_Init+0x2e4>)
 8014bfa:	400a      	ands	r2, r1
 8014bfc:	611a      	str	r2, [r3, #16]
                               ADC_CFGR2_OVSS |
                               ADC_CFGR2_TOVS);

    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 8014bfe:	687b      	ldr	r3, [r7, #4]
 8014c00:	681b      	ldr	r3, [r3, #0]
 8014c02:	6919      	ldr	r1, [r3, #16]
 8014c04:	687b      	ldr	r3, [r7, #4]
 8014c06:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
                              hadc->Init.Oversample.RightBitShift             |
 8014c08:	687b      	ldr	r3, [r7, #4]
 8014c0a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 8014c0c:	431a      	orrs	r2, r3
                              hadc->Init.Oversample.TriggeredMode);
 8014c0e:	687b      	ldr	r3, [r7, #4]
 8014c10:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                              hadc->Init.Oversample.RightBitShift             |
 8014c12:	431a      	orrs	r2, r3
    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 8014c14:	687b      	ldr	r3, [r7, #4]
 8014c16:	681b      	ldr	r3, [r3, #0]
 8014c18:	430a      	orrs	r2, r1
 8014c1a:	611a      	str	r2, [r3, #16]

    /* Enable OverSampling mode */
    hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 8014c1c:	687b      	ldr	r3, [r7, #4]
 8014c1e:	681b      	ldr	r3, [r3, #0]
 8014c20:	691a      	ldr	r2, [r3, #16]
 8014c22:	687b      	ldr	r3, [r7, #4]
 8014c24:	681b      	ldr	r3, [r3, #0]
 8014c26:	2101      	movs	r1, #1
 8014c28:	430a      	orrs	r2, r1
 8014c2a:	611a      	str	r2, [r3, #16]
 8014c2c:	e00e      	b.n	8014c4c <HAL_ADC_Init+0x28c>
  }
  else
  {
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 8014c2e:	687b      	ldr	r3, [r7, #4]
 8014c30:	681b      	ldr	r3, [r3, #0]
 8014c32:	691b      	ldr	r3, [r3, #16]
 8014c34:	2201      	movs	r2, #1
 8014c36:	4013      	ands	r3, r2
 8014c38:	2b01      	cmp	r3, #1
 8014c3a:	d107      	bne.n	8014c4c <HAL_ADC_Init+0x28c>
    {
      /* Disable OverSampling mode if needed */
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 8014c3c:	687b      	ldr	r3, [r7, #4]
 8014c3e:	681b      	ldr	r3, [r3, #0]
 8014c40:	691a      	ldr	r2, [r3, #16]
 8014c42:	687b      	ldr	r3, [r7, #4]
 8014c44:	681b      	ldr	r3, [r3, #0]
 8014c46:	2101      	movs	r1, #1
 8014c48:	438a      	bics	r2, r1
 8014c4a:	611a      	str	r2, [r3, #16]
    }
  }

  /* Clear the old sampling time */
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 8014c4c:	687b      	ldr	r3, [r7, #4]
 8014c4e:	681b      	ldr	r3, [r3, #0]
 8014c50:	695a      	ldr	r2, [r3, #20]
 8014c52:	687b      	ldr	r3, [r7, #4]
 8014c54:	681b      	ldr	r3, [r3, #0]
 8014c56:	2107      	movs	r1, #7
 8014c58:	438a      	bics	r2, r1
 8014c5a:	615a      	str	r2, [r3, #20]

  /* Set the new sample time */
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 8014c5c:	687b      	ldr	r3, [r7, #4]
 8014c5e:	681b      	ldr	r3, [r3, #0]
 8014c60:	6959      	ldr	r1, [r3, #20]
 8014c62:	687b      	ldr	r3, [r7, #4]
 8014c64:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8014c66:	687b      	ldr	r3, [r7, #4]
 8014c68:	681b      	ldr	r3, [r3, #0]
 8014c6a:	430a      	orrs	r2, r1
 8014c6c:	615a      	str	r2, [r3, #20]

  /* Clear ADC error code */
  ADC_CLEAR_ERRORCODE(hadc);
 8014c6e:	687b      	ldr	r3, [r7, #4]
 8014c70:	2200      	movs	r2, #0
 8014c72:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set the ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8014c74:	687b      	ldr	r3, [r7, #4]
 8014c76:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8014c78:	2203      	movs	r2, #3
 8014c7a:	4393      	bics	r3, r2
 8014c7c:	2201      	movs	r2, #1
 8014c7e:	431a      	orrs	r2, r3
 8014c80:	687b      	ldr	r3, [r7, #4]
 8014c82:	655a      	str	r2, [r3, #84]	@ 0x54
                    HAL_ADC_STATE_BUSY_INTERNAL,
                    HAL_ADC_STATE_READY);


  /* Return function status */
  return HAL_OK;
 8014c84:	2300      	movs	r3, #0
}
 8014c86:	0018      	movs	r0, r3
 8014c88:	46bd      	mov	sp, r7
 8014c8a:	b002      	add	sp, #8
 8014c8c:	bd80      	pop	{r7, pc}
 8014c8e:	46c0      	nop			@ (mov r8, r8)
 8014c90:	fffffefd 	.word	0xfffffefd
 8014c94:	40012708 	.word	0x40012708
 8014c98:	ffc3ffff 	.word	0xffc3ffff
 8014c9c:	fdffffff 	.word	0xfdffffff
 8014ca0:	fffe0219 	.word	0xfffe0219
 8014ca4:	fffffc03 	.word	0xfffffc03

08014ca8 <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8014ca8:	b590      	push	{r4, r7, lr}
 8014caa:	b085      	sub	sp, #20
 8014cac:	af00      	add	r7, sp, #0
 8014cae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8014cb0:	230f      	movs	r3, #15
 8014cb2:	18fb      	adds	r3, r7, r3
 8014cb4:	2200      	movs	r2, #0
 8014cb6:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8014cb8:	687b      	ldr	r3, [r7, #4]
 8014cba:	681b      	ldr	r3, [r3, #0]
 8014cbc:	689b      	ldr	r3, [r3, #8]
 8014cbe:	2204      	movs	r2, #4
 8014cc0:	4013      	ands	r3, r2
 8014cc2:	d138      	bne.n	8014d36 <HAL_ADC_Start+0x8e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8014cc4:	687b      	ldr	r3, [r7, #4]
 8014cc6:	2250      	movs	r2, #80	@ 0x50
 8014cc8:	5c9b      	ldrb	r3, [r3, r2]
 8014cca:	2b01      	cmp	r3, #1
 8014ccc:	d101      	bne.n	8014cd2 <HAL_ADC_Start+0x2a>
 8014cce:	2302      	movs	r3, #2
 8014cd0:	e038      	b.n	8014d44 <HAL_ADC_Start+0x9c>
 8014cd2:	687b      	ldr	r3, [r7, #4]
 8014cd4:	2250      	movs	r2, #80	@ 0x50
 8014cd6:	2101      	movs	r1, #1
 8014cd8:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware.                                   */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8014cda:	687b      	ldr	r3, [r7, #4]
 8014cdc:	69db      	ldr	r3, [r3, #28]
 8014cde:	2b01      	cmp	r3, #1
 8014ce0:	d007      	beq.n	8014cf2 <HAL_ADC_Start+0x4a>
    {
      tmp_hal_status = ADC_Enable(hadc);
 8014ce2:	230f      	movs	r3, #15
 8014ce4:	18fc      	adds	r4, r7, r3
 8014ce6:	687b      	ldr	r3, [r7, #4]
 8014ce8:	0018      	movs	r0, r3
 8014cea:	f000 f95f 	bl	8014fac <ADC_Enable>
 8014cee:	0003      	movs	r3, r0
 8014cf0:	7023      	strb	r3, [r4, #0]
    }

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8014cf2:	230f      	movs	r3, #15
 8014cf4:	18fb      	adds	r3, r7, r3
 8014cf6:	781b      	ldrb	r3, [r3, #0]
 8014cf8:	2b00      	cmp	r3, #0
 8014cfa:	d120      	bne.n	8014d3e <HAL_ADC_Start+0x96>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8014cfc:	687b      	ldr	r3, [r7, #4]
 8014cfe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8014d00:	4a12      	ldr	r2, [pc, #72]	@ (8014d4c <HAL_ADC_Start+0xa4>)
 8014d02:	4013      	ands	r3, r2
 8014d04:	2280      	movs	r2, #128	@ 0x80
 8014d06:	0052      	lsls	r2, r2, #1
 8014d08:	431a      	orrs	r2, r3
 8014d0a:	687b      	ldr	r3, [r7, #4]
 8014d0c:	655a      	str	r2, [r3, #84]	@ 0x54
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8014d0e:	687b      	ldr	r3, [r7, #4]
 8014d10:	2200      	movs	r2, #0
 8014d12:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8014d14:	687b      	ldr	r3, [r7, #4]
 8014d16:	2250      	movs	r2, #80	@ 0x50
 8014d18:	2100      	movs	r1, #0
 8014d1a:	5499      	strb	r1, [r3, r2]

      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8014d1c:	687b      	ldr	r3, [r7, #4]
 8014d1e:	681b      	ldr	r3, [r3, #0]
 8014d20:	221c      	movs	r2, #28
 8014d22:	601a      	str	r2, [r3, #0]

      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8014d24:	687b      	ldr	r3, [r7, #4]
 8014d26:	681b      	ldr	r3, [r3, #0]
 8014d28:	689a      	ldr	r2, [r3, #8]
 8014d2a:	687b      	ldr	r3, [r7, #4]
 8014d2c:	681b      	ldr	r3, [r3, #0]
 8014d2e:	2104      	movs	r1, #4
 8014d30:	430a      	orrs	r2, r1
 8014d32:	609a      	str	r2, [r3, #8]
 8014d34:	e003      	b.n	8014d3e <HAL_ADC_Start+0x96>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8014d36:	230f      	movs	r3, #15
 8014d38:	18fb      	adds	r3, r7, r3
 8014d3a:	2202      	movs	r2, #2
 8014d3c:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return tmp_hal_status;
 8014d3e:	230f      	movs	r3, #15
 8014d40:	18fb      	adds	r3, r7, r3
 8014d42:	781b      	ldrb	r3, [r3, #0]
}
 8014d44:	0018      	movs	r0, r3
 8014d46:	46bd      	mov	sp, r7
 8014d48:	b005      	add	sp, #20
 8014d4a:	bd90      	pop	{r4, r7, pc}
 8014d4c:	fffff0fe 	.word	0xfffff0fe

08014d50 <HAL_ADC_PollForConversion>:
  * @param  hadc ADC handle
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8014d50:	b580      	push	{r7, lr}
 8014d52:	b084      	sub	sp, #16
 8014d54:	af00      	add	r7, sp, #0
 8014d56:	6078      	str	r0, [r7, #4]
 8014d58:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8014d5a:	2300      	movs	r3, #0
 8014d5c:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_Flag_EOC   = 0x00;
 8014d5e:	2300      	movs	r3, #0
 8014d60:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8014d62:	687b      	ldr	r3, [r7, #4]
 8014d64:	695b      	ldr	r3, [r3, #20]
 8014d66:	2b08      	cmp	r3, #8
 8014d68:	d102      	bne.n	8014d70 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 8014d6a:	2308      	movs	r3, #8
 8014d6c:	60fb      	str	r3, [r7, #12]
 8014d6e:	e014      	b.n	8014d9a <HAL_ADC_PollForConversion+0x4a>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 8014d70:	687b      	ldr	r3, [r7, #4]
 8014d72:	681b      	ldr	r3, [r3, #0]
 8014d74:	68db      	ldr	r3, [r3, #12]
 8014d76:	2201      	movs	r2, #1
 8014d78:	4013      	ands	r3, r2
 8014d7a:	2b01      	cmp	r3, #1
 8014d7c:	d10b      	bne.n	8014d96 <HAL_ADC_PollForConversion+0x46>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8014d7e:	687b      	ldr	r3, [r7, #4]
 8014d80:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8014d82:	2220      	movs	r2, #32
 8014d84:	431a      	orrs	r2, r3
 8014d86:	687b      	ldr	r3, [r7, #4]
 8014d88:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8014d8a:	687b      	ldr	r3, [r7, #4]
 8014d8c:	2250      	movs	r2, #80	@ 0x50
 8014d8e:	2100      	movs	r1, #0
 8014d90:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8014d92:	2301      	movs	r3, #1
 8014d94:	e072      	b.n	8014e7c <HAL_ADC_PollForConversion+0x12c>
    }
    else
    {
      tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 8014d96:	230c      	movs	r3, #12
 8014d98:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8014d9a:	f7ff fdc7 	bl	801492c <HAL_GetTick>
 8014d9e:	0003      	movs	r3, r0
 8014da0:	60bb      	str	r3, [r7, #8]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while (HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8014da2:	e01f      	b.n	8014de4 <HAL_ADC_PollForConversion+0x94>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8014da4:	683b      	ldr	r3, [r7, #0]
 8014da6:	3301      	adds	r3, #1
 8014da8:	d01c      	beq.n	8014de4 <HAL_ADC_PollForConversion+0x94>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8014daa:	683b      	ldr	r3, [r7, #0]
 8014dac:	2b00      	cmp	r3, #0
 8014dae:	d007      	beq.n	8014dc0 <HAL_ADC_PollForConversion+0x70>
 8014db0:	f7ff fdbc 	bl	801492c <HAL_GetTick>
 8014db4:	0002      	movs	r2, r0
 8014db6:	68bb      	ldr	r3, [r7, #8]
 8014db8:	1ad3      	subs	r3, r2, r3
 8014dba:	683a      	ldr	r2, [r7, #0]
 8014dbc:	429a      	cmp	r2, r3
 8014dbe:	d211      	bcs.n	8014de4 <HAL_ADC_PollForConversion+0x94>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8014dc0:	687b      	ldr	r3, [r7, #4]
 8014dc2:	681b      	ldr	r3, [r3, #0]
 8014dc4:	681b      	ldr	r3, [r3, #0]
 8014dc6:	68fa      	ldr	r2, [r7, #12]
 8014dc8:	4013      	ands	r3, r2
 8014dca:	d10b      	bne.n	8014de4 <HAL_ADC_PollForConversion+0x94>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8014dcc:	687b      	ldr	r3, [r7, #4]
 8014dce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8014dd0:	2204      	movs	r2, #4
 8014dd2:	431a      	orrs	r2, r3
 8014dd4:	687b      	ldr	r3, [r7, #4]
 8014dd6:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8014dd8:	687b      	ldr	r3, [r7, #4]
 8014dda:	2250      	movs	r2, #80	@ 0x50
 8014ddc:	2100      	movs	r1, #0
 8014dde:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8014de0:	2303      	movs	r3, #3
 8014de2:	e04b      	b.n	8014e7c <HAL_ADC_PollForConversion+0x12c>
  while (HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8014de4:	687b      	ldr	r3, [r7, #4]
 8014de6:	681b      	ldr	r3, [r3, #0]
 8014de8:	681b      	ldr	r3, [r3, #0]
 8014dea:	68fa      	ldr	r2, [r7, #12]
 8014dec:	4013      	ands	r3, r2
 8014dee:	d0d9      	beq.n	8014da4 <HAL_ADC_PollForConversion+0x54>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8014df0:	687b      	ldr	r3, [r7, #4]
 8014df2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8014df4:	2280      	movs	r2, #128	@ 0x80
 8014df6:	0092      	lsls	r2, r2, #2
 8014df8:	431a      	orrs	r2, r3
 8014dfa:	687b      	ldr	r3, [r7, #4]
 8014dfc:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8014dfe:	687b      	ldr	r3, [r7, #4]
 8014e00:	681b      	ldr	r3, [r3, #0]
 8014e02:	68da      	ldr	r2, [r3, #12]
 8014e04:	23c0      	movs	r3, #192	@ 0xc0
 8014e06:	011b      	lsls	r3, r3, #4
 8014e08:	4013      	ands	r3, r2
 8014e0a:	d12e      	bne.n	8014e6a <HAL_ADC_PollForConversion+0x11a>
      (hadc->Init.ContinuousConvMode == DISABLE))
 8014e0c:	687b      	ldr	r3, [r7, #4]
 8014e0e:	2220      	movs	r2, #32
 8014e10:	5c9b      	ldrb	r3, [r3, r2]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8014e12:	2b00      	cmp	r3, #0
 8014e14:	d129      	bne.n	8014e6a <HAL_ADC_PollForConversion+0x11a>
  {
    /* If End of Sequence is reached, disable interrupts */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8014e16:	687b      	ldr	r3, [r7, #4]
 8014e18:	681b      	ldr	r3, [r3, #0]
 8014e1a:	681b      	ldr	r3, [r3, #0]
 8014e1c:	2208      	movs	r2, #8
 8014e1e:	4013      	ands	r3, r2
 8014e20:	2b08      	cmp	r3, #8
 8014e22:	d122      	bne.n	8014e6a <HAL_ADC_PollForConversion+0x11a>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8014e24:	687b      	ldr	r3, [r7, #4]
 8014e26:	681b      	ldr	r3, [r3, #0]
 8014e28:	689b      	ldr	r3, [r3, #8]
 8014e2a:	2204      	movs	r2, #4
 8014e2c:	4013      	ands	r3, r2
 8014e2e:	d110      	bne.n	8014e52 <HAL_ADC_PollForConversion+0x102>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8014e30:	687b      	ldr	r3, [r7, #4]
 8014e32:	681b      	ldr	r3, [r3, #0]
 8014e34:	685a      	ldr	r2, [r3, #4]
 8014e36:	687b      	ldr	r3, [r7, #4]
 8014e38:	681b      	ldr	r3, [r3, #0]
 8014e3a:	210c      	movs	r1, #12
 8014e3c:	438a      	bics	r2, r1
 8014e3e:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 8014e40:	687b      	ldr	r3, [r7, #4]
 8014e42:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8014e44:	4a0f      	ldr	r2, [pc, #60]	@ (8014e84 <HAL_ADC_PollForConversion+0x134>)
 8014e46:	4013      	ands	r3, r2
 8014e48:	2201      	movs	r2, #1
 8014e4a:	431a      	orrs	r2, r3
 8014e4c:	687b      	ldr	r3, [r7, #4]
 8014e4e:	655a      	str	r2, [r3, #84]	@ 0x54
 8014e50:	e00b      	b.n	8014e6a <HAL_ADC_PollForConversion+0x11a>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8014e52:	687b      	ldr	r3, [r7, #4]
 8014e54:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8014e56:	2220      	movs	r2, #32
 8014e58:	431a      	orrs	r2, r3
 8014e5a:	687b      	ldr	r3, [r7, #4]
 8014e5c:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8014e5e:	687b      	ldr	r3, [r7, #4]
 8014e60:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8014e62:	2201      	movs	r2, #1
 8014e64:	431a      	orrs	r2, r3
 8014e66:	687b      	ldr	r3, [r7, #4]
 8014e68:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8014e6a:	687b      	ldr	r3, [r7, #4]
 8014e6c:	699b      	ldr	r3, [r3, #24]
 8014e6e:	2b00      	cmp	r3, #0
 8014e70:	d103      	bne.n	8014e7a <HAL_ADC_PollForConversion+0x12a>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8014e72:	687b      	ldr	r3, [r7, #4]
 8014e74:	681b      	ldr	r3, [r3, #0]
 8014e76:	220c      	movs	r2, #12
 8014e78:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8014e7a:	2300      	movs	r3, #0
}
 8014e7c:	0018      	movs	r0, r3
 8014e7e:	46bd      	mov	sp, r7
 8014e80:	b004      	add	sp, #16
 8014e82:	bd80      	pop	{r7, pc}
 8014e84:	fffffefe 	.word	0xfffffefe

08014e88 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8014e88:	b580      	push	{r7, lr}
 8014e8a:	b082      	sub	sp, #8
 8014e8c:	af00      	add	r7, sp, #0
 8014e8e:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8014e90:	687b      	ldr	r3, [r7, #4]
 8014e92:	681b      	ldr	r3, [r3, #0]
 8014e94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8014e96:	0018      	movs	r0, r3
 8014e98:	46bd      	mov	sp, r7
 8014e9a:	b002      	add	sp, #8
 8014e9c:	bd80      	pop	{r7, pc}
	...

08014ea0 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8014ea0:	b580      	push	{r7, lr}
 8014ea2:	b082      	sub	sp, #8
 8014ea4:	af00      	add	r7, sp, #0
 8014ea6:	6078      	str	r0, [r7, #4]
 8014ea8:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));

  /* Process locked */
  __HAL_LOCK(hadc);
 8014eaa:	687b      	ldr	r3, [r7, #4]
 8014eac:	2250      	movs	r2, #80	@ 0x50
 8014eae:	5c9b      	ldrb	r3, [r3, r2]
 8014eb0:	2b01      	cmp	r3, #1
 8014eb2:	d101      	bne.n	8014eb8 <HAL_ADC_ConfigChannel+0x18>
 8014eb4:	2302      	movs	r3, #2
 8014eb6:	e06c      	b.n	8014f92 <HAL_ADC_ConfigChannel+0xf2>
 8014eb8:	687b      	ldr	r3, [r7, #4]
 8014eba:	2250      	movs	r2, #80	@ 0x50
 8014ebc:	2101      	movs	r1, #1
 8014ebe:	5499      	strb	r1, [r3, r2]
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Management of internal measurement channels: Vbat/VrefInt/TempSensor  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 8014ec0:	687b      	ldr	r3, [r7, #4]
 8014ec2:	681b      	ldr	r3, [r3, #0]
 8014ec4:	689b      	ldr	r3, [r3, #8]
 8014ec6:	2204      	movs	r2, #4
 8014ec8:	4013      	ands	r3, r2
 8014eca:	d00b      	beq.n	8014ee4 <HAL_ADC_ConfigChannel+0x44>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8014ecc:	687b      	ldr	r3, [r7, #4]
 8014ece:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8014ed0:	2220      	movs	r2, #32
 8014ed2:	431a      	orrs	r2, r3
 8014ed4:	687b      	ldr	r3, [r7, #4]
 8014ed6:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8014ed8:	687b      	ldr	r3, [r7, #4]
 8014eda:	2250      	movs	r2, #80	@ 0x50
 8014edc:	2100      	movs	r1, #0
 8014ede:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8014ee0:	2301      	movs	r3, #1
 8014ee2:	e056      	b.n	8014f92 <HAL_ADC_ConfigChannel+0xf2>
  }

  if (sConfig->Rank != ADC_RANK_NONE)
 8014ee4:	683b      	ldr	r3, [r7, #0]
 8014ee6:	685b      	ldr	r3, [r3, #4]
 8014ee8:	4a2c      	ldr	r2, [pc, #176]	@ (8014f9c <HAL_ADC_ConfigChannel+0xfc>)
 8014eea:	4293      	cmp	r3, r2
 8014eec:	d028      	beq.n	8014f40 <HAL_ADC_ConfigChannel+0xa0>
  {
    /* Enable selected channels */
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 8014eee:	687b      	ldr	r3, [r7, #4]
 8014ef0:	681b      	ldr	r3, [r3, #0]
 8014ef2:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 8014ef4:	683b      	ldr	r3, [r7, #0]
 8014ef6:	681b      	ldr	r3, [r3, #0]
 8014ef8:	035b      	lsls	r3, r3, #13
 8014efa:	0b5a      	lsrs	r2, r3, #13
 8014efc:	687b      	ldr	r3, [r7, #4]
 8014efe:	681b      	ldr	r3, [r3, #0]
 8014f00:	430a      	orrs	r2, r1
 8014f02:	629a      	str	r2, [r3, #40]	@ 0x28
    /* dedicated internal buffers and path.                                     */

#if defined(ADC_CCR_TSEN)
    /* If Temperature sensor channel is selected, then enable the internal      */
    /* buffers and path  */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8014f04:	683b      	ldr	r3, [r7, #0]
 8014f06:	681a      	ldr	r2, [r3, #0]
 8014f08:	2380      	movs	r3, #128	@ 0x80
 8014f0a:	02db      	lsls	r3, r3, #11
 8014f0c:	4013      	ands	r3, r2
 8014f0e:	d009      	beq.n	8014f24 <HAL_ADC_ConfigChannel+0x84>
    {
      ADC->CCR |= ADC_CCR_TSEN;
 8014f10:	4b23      	ldr	r3, [pc, #140]	@ (8014fa0 <HAL_ADC_ConfigChannel+0x100>)
 8014f12:	681a      	ldr	r2, [r3, #0]
 8014f14:	4b22      	ldr	r3, [pc, #136]	@ (8014fa0 <HAL_ADC_ConfigChannel+0x100>)
 8014f16:	2180      	movs	r1, #128	@ 0x80
 8014f18:	0409      	lsls	r1, r1, #16
 8014f1a:	430a      	orrs	r2, r1
 8014f1c:	601a      	str	r2, [r3, #0]

      /* Delay for temperature sensor stabilization time */
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 8014f1e:	200a      	movs	r0, #10
 8014f20:	f000 f8ac 	bl	801507c <ADC_DelayMicroSecond>
    }
#endif

    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8014f24:	683b      	ldr	r3, [r7, #0]
 8014f26:	681a      	ldr	r2, [r3, #0]
 8014f28:	2380      	movs	r3, #128	@ 0x80
 8014f2a:	029b      	lsls	r3, r3, #10
 8014f2c:	4013      	ands	r3, r2
 8014f2e:	d02b      	beq.n	8014f88 <HAL_ADC_ConfigChannel+0xe8>
    {
      ADC->CCR |= ADC_CCR_VREFEN;
 8014f30:	4b1b      	ldr	r3, [pc, #108]	@ (8014fa0 <HAL_ADC_ConfigChannel+0x100>)
 8014f32:	681a      	ldr	r2, [r3, #0]
 8014f34:	4b1a      	ldr	r3, [pc, #104]	@ (8014fa0 <HAL_ADC_ConfigChannel+0x100>)
 8014f36:	2180      	movs	r1, #128	@ 0x80
 8014f38:	03c9      	lsls	r1, r1, #15
 8014f3a:	430a      	orrs	r2, r1
 8014f3c:	601a      	str	r2, [r3, #0]
 8014f3e:	e023      	b.n	8014f88 <HAL_ADC_ConfigChannel+0xe8>
  }
  else
  {
    /* Regular sequence configuration */
    /* Reset the channel selection register from the selected channel */
    hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
 8014f40:	687b      	ldr	r3, [r7, #4]
 8014f42:	681b      	ldr	r3, [r3, #0]
 8014f44:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8014f46:	683b      	ldr	r3, [r7, #0]
 8014f48:	681b      	ldr	r3, [r3, #0]
 8014f4a:	035b      	lsls	r3, r3, #13
 8014f4c:	0b5b      	lsrs	r3, r3, #13
 8014f4e:	43d9      	mvns	r1, r3
 8014f50:	687b      	ldr	r3, [r7, #4]
 8014f52:	681b      	ldr	r3, [r3, #0]
 8014f54:	400a      	ands	r2, r1
 8014f56:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
    /* internal measurement paths disable: If internal channel selected,    */
    /* disable dedicated internal buffers and path.                         */
#if defined(ADC_CCR_TSEN)
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8014f58:	683b      	ldr	r3, [r7, #0]
 8014f5a:	681a      	ldr	r2, [r3, #0]
 8014f5c:	2380      	movs	r3, #128	@ 0x80
 8014f5e:	02db      	lsls	r3, r3, #11
 8014f60:	4013      	ands	r3, r2
 8014f62:	d005      	beq.n	8014f70 <HAL_ADC_ConfigChannel+0xd0>
    {
      ADC->CCR &= ~ADC_CCR_TSEN;
 8014f64:	4b0e      	ldr	r3, [pc, #56]	@ (8014fa0 <HAL_ADC_ConfigChannel+0x100>)
 8014f66:	681a      	ldr	r2, [r3, #0]
 8014f68:	4b0d      	ldr	r3, [pc, #52]	@ (8014fa0 <HAL_ADC_ConfigChannel+0x100>)
 8014f6a:	490e      	ldr	r1, [pc, #56]	@ (8014fa4 <HAL_ADC_ConfigChannel+0x104>)
 8014f6c:	400a      	ands	r2, r1
 8014f6e:	601a      	str	r2, [r3, #0]
    }
#endif

    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8014f70:	683b      	ldr	r3, [r7, #0]
 8014f72:	681a      	ldr	r2, [r3, #0]
 8014f74:	2380      	movs	r3, #128	@ 0x80
 8014f76:	029b      	lsls	r3, r3, #10
 8014f78:	4013      	ands	r3, r2
 8014f7a:	d005      	beq.n	8014f88 <HAL_ADC_ConfigChannel+0xe8>
    {
      ADC->CCR &= ~ADC_CCR_VREFEN;
 8014f7c:	4b08      	ldr	r3, [pc, #32]	@ (8014fa0 <HAL_ADC_ConfigChannel+0x100>)
 8014f7e:	681a      	ldr	r2, [r3, #0]
 8014f80:	4b07      	ldr	r3, [pc, #28]	@ (8014fa0 <HAL_ADC_ConfigChannel+0x100>)
 8014f82:	4909      	ldr	r1, [pc, #36]	@ (8014fa8 <HAL_ADC_ConfigChannel+0x108>)
 8014f84:	400a      	ands	r2, r1
 8014f86:	601a      	str	r2, [r3, #0]
    }
#endif
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8014f88:	687b      	ldr	r3, [r7, #4]
 8014f8a:	2250      	movs	r2, #80	@ 0x50
 8014f8c:	2100      	movs	r1, #0
 8014f8e:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8014f90:	2300      	movs	r3, #0
}
 8014f92:	0018      	movs	r0, r3
 8014f94:	46bd      	mov	sp, r7
 8014f96:	b002      	add	sp, #8
 8014f98:	bd80      	pop	{r7, pc}
 8014f9a:	46c0      	nop			@ (mov r8, r8)
 8014f9c:	00001001 	.word	0x00001001
 8014fa0:	40012708 	.word	0x40012708
 8014fa4:	ff7fffff 	.word	0xff7fffff
 8014fa8:	ffbfffff 	.word	0xffbfffff

08014fac <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8014fac:	b580      	push	{r7, lr}
 8014fae:	b084      	sub	sp, #16
 8014fb0:	af00      	add	r7, sp, #0
 8014fb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8014fb4:	2300      	movs	r3, #0
 8014fb6:	60fb      	str	r3, [r7, #12]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8014fb8:	687b      	ldr	r3, [r7, #4]
 8014fba:	681b      	ldr	r3, [r3, #0]
 8014fbc:	689b      	ldr	r3, [r3, #8]
 8014fbe:	2203      	movs	r2, #3
 8014fc0:	4013      	ands	r3, r2
 8014fc2:	2b01      	cmp	r3, #1
 8014fc4:	d108      	bne.n	8014fd8 <ADC_Enable+0x2c>
 8014fc6:	687b      	ldr	r3, [r7, #4]
 8014fc8:	681b      	ldr	r3, [r3, #0]
 8014fca:	681b      	ldr	r3, [r3, #0]
 8014fcc:	2201      	movs	r2, #1
 8014fce:	4013      	ands	r3, r2
 8014fd0:	2b01      	cmp	r3, #1
 8014fd2:	d101      	bne.n	8014fd8 <ADC_Enable+0x2c>
 8014fd4:	2301      	movs	r3, #1
 8014fd6:	e000      	b.n	8014fda <ADC_Enable+0x2e>
 8014fd8:	2300      	movs	r3, #0
 8014fda:	2b00      	cmp	r3, #0
 8014fdc:	d146      	bne.n	801506c <ADC_Enable+0xc0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8014fde:	687b      	ldr	r3, [r7, #4]
 8014fe0:	681b      	ldr	r3, [r3, #0]
 8014fe2:	689b      	ldr	r3, [r3, #8]
 8014fe4:	4a24      	ldr	r2, [pc, #144]	@ (8015078 <ADC_Enable+0xcc>)
 8014fe6:	4013      	ands	r3, r2
 8014fe8:	d00d      	beq.n	8015006 <ADC_Enable+0x5a>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8014fea:	687b      	ldr	r3, [r7, #4]
 8014fec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8014fee:	2210      	movs	r2, #16
 8014ff0:	431a      	orrs	r2, r3
 8014ff2:	687b      	ldr	r3, [r7, #4]
 8014ff4:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8014ff6:	687b      	ldr	r3, [r7, #4]
 8014ff8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8014ffa:	2201      	movs	r2, #1
 8014ffc:	431a      	orrs	r2, r3
 8014ffe:	687b      	ldr	r3, [r7, #4]
 8015000:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 8015002:	2301      	movs	r3, #1
 8015004:	e033      	b.n	801506e <ADC_Enable+0xc2>
    }

    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8015006:	687b      	ldr	r3, [r7, #4]
 8015008:	681b      	ldr	r3, [r3, #0]
 801500a:	689a      	ldr	r2, [r3, #8]
 801500c:	687b      	ldr	r3, [r7, #4]
 801500e:	681b      	ldr	r3, [r3, #0]
 8015010:	2101      	movs	r1, #1
 8015012:	430a      	orrs	r2, r1
 8015014:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time. */
    ADC_DelayMicroSecond(ADC_STAB_DELAY_US);
 8015016:	2001      	movs	r0, #1
 8015018:	f000 f830 	bl	801507c <ADC_DelayMicroSecond>

    /* Get tick count */
    tickstart = HAL_GetTick();
 801501c:	f7ff fc86 	bl	801492c <HAL_GetTick>
 8015020:	0003      	movs	r3, r0
 8015022:	60fb      	str	r3, [r7, #12]

    /* Wait for ADC effectively enabled */
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8015024:	e01b      	b.n	801505e <ADC_Enable+0xb2>
    {
      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8015026:	f7ff fc81 	bl	801492c <HAL_GetTick>
 801502a:	0002      	movs	r2, r0
 801502c:	68fb      	ldr	r3, [r7, #12]
 801502e:	1ad3      	subs	r3, r2, r3
 8015030:	2b0a      	cmp	r3, #10
 8015032:	d914      	bls.n	801505e <ADC_Enable+0xb2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8015034:	687b      	ldr	r3, [r7, #4]
 8015036:	681b      	ldr	r3, [r3, #0]
 8015038:	681b      	ldr	r3, [r3, #0]
 801503a:	2201      	movs	r2, #1
 801503c:	4013      	ands	r3, r2
 801503e:	2b01      	cmp	r3, #1
 8015040:	d00d      	beq.n	801505e <ADC_Enable+0xb2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8015042:	687b      	ldr	r3, [r7, #4]
 8015044:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8015046:	2210      	movs	r2, #16
 8015048:	431a      	orrs	r2, r3
 801504a:	687b      	ldr	r3, [r7, #4]
 801504c:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 801504e:	687b      	ldr	r3, [r7, #4]
 8015050:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8015052:	2201      	movs	r2, #1
 8015054:	431a      	orrs	r2, r3
 8015056:	687b      	ldr	r3, [r7, #4]
 8015058:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 801505a:	2301      	movs	r3, #1
 801505c:	e007      	b.n	801506e <ADC_Enable+0xc2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 801505e:	687b      	ldr	r3, [r7, #4]
 8015060:	681b      	ldr	r3, [r3, #0]
 8015062:	681b      	ldr	r3, [r3, #0]
 8015064:	2201      	movs	r2, #1
 8015066:	4013      	ands	r3, r2
 8015068:	2b01      	cmp	r3, #1
 801506a:	d1dc      	bne.n	8015026 <ADC_Enable+0x7a>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 801506c:	2300      	movs	r3, #0
}
 801506e:	0018      	movs	r0, r3
 8015070:	46bd      	mov	sp, r7
 8015072:	b004      	add	sp, #16
 8015074:	bd80      	pop	{r7, pc}
 8015076:	46c0      	nop			@ (mov r8, r8)
 8015078:	80000017 	.word	0x80000017

0801507c <ADC_DelayMicroSecond>:
  * @brief  Delay micro seconds
  * @param  microSecond  delay
  * @retval None
  */
static void ADC_DelayMicroSecond(uint32_t microSecond)
{
 801507c:	b580      	push	{r7, lr}
 801507e:	b084      	sub	sp, #16
 8015080:	af00      	add	r7, sp, #0
 8015082:	6078      	str	r0, [r7, #4]
  /* Compute number of CPU cycles to wait for */
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 8015084:	4b0b      	ldr	r3, [pc, #44]	@ (80150b4 <ADC_DelayMicroSecond+0x38>)
 8015086:	681b      	ldr	r3, [r3, #0]
 8015088:	490b      	ldr	r1, [pc, #44]	@ (80150b8 <ADC_DelayMicroSecond+0x3c>)
 801508a:	0018      	movs	r0, r3
 801508c:	f7eb f88a 	bl	80001a4 <__udivsi3>
 8015090:	0003      	movs	r3, r0
 8015092:	001a      	movs	r2, r3
 8015094:	687b      	ldr	r3, [r7, #4]
 8015096:	4353      	muls	r3, r2
 8015098:	60fb      	str	r3, [r7, #12]

  while (waitLoopIndex != 0U)
 801509a:	e002      	b.n	80150a2 <ADC_DelayMicroSecond+0x26>
  {
    waitLoopIndex--;
 801509c:	68fb      	ldr	r3, [r7, #12]
 801509e:	3b01      	subs	r3, #1
 80150a0:	60fb      	str	r3, [r7, #12]
  while (waitLoopIndex != 0U)
 80150a2:	68fb      	ldr	r3, [r7, #12]
 80150a4:	2b00      	cmp	r3, #0
 80150a6:	d1f9      	bne.n	801509c <ADC_DelayMicroSecond+0x20>
  }
}
 80150a8:	46c0      	nop			@ (mov r8, r8)
 80150aa:	46c0      	nop			@ (mov r8, r8)
 80150ac:	46bd      	mov	sp, r7
 80150ae:	b004      	add	sp, #16
 80150b0:	bd80      	pop	{r7, pc}
 80150b2:	46c0      	nop			@ (mov r8, r8)
 80150b4:	200000ec 	.word	0x200000ec
 80150b8:	000f4240 	.word	0x000f4240

080150bc <__NVIC_EnableIRQ>:
{
 80150bc:	b580      	push	{r7, lr}
 80150be:	b082      	sub	sp, #8
 80150c0:	af00      	add	r7, sp, #0
 80150c2:	0002      	movs	r2, r0
 80150c4:	1dfb      	adds	r3, r7, #7
 80150c6:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80150c8:	1dfb      	adds	r3, r7, #7
 80150ca:	781b      	ldrb	r3, [r3, #0]
 80150cc:	2b7f      	cmp	r3, #127	@ 0x7f
 80150ce:	d809      	bhi.n	80150e4 <__NVIC_EnableIRQ+0x28>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80150d0:	1dfb      	adds	r3, r7, #7
 80150d2:	781b      	ldrb	r3, [r3, #0]
 80150d4:	001a      	movs	r2, r3
 80150d6:	231f      	movs	r3, #31
 80150d8:	401a      	ands	r2, r3
 80150da:	4b04      	ldr	r3, [pc, #16]	@ (80150ec <__NVIC_EnableIRQ+0x30>)
 80150dc:	2101      	movs	r1, #1
 80150de:	4091      	lsls	r1, r2
 80150e0:	000a      	movs	r2, r1
 80150e2:	601a      	str	r2, [r3, #0]
}
 80150e4:	46c0      	nop			@ (mov r8, r8)
 80150e6:	46bd      	mov	sp, r7
 80150e8:	b002      	add	sp, #8
 80150ea:	bd80      	pop	{r7, pc}
 80150ec:	e000e100 	.word	0xe000e100

080150f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80150f0:	b590      	push	{r4, r7, lr}
 80150f2:	b083      	sub	sp, #12
 80150f4:	af00      	add	r7, sp, #0
 80150f6:	0002      	movs	r2, r0
 80150f8:	6039      	str	r1, [r7, #0]
 80150fa:	1dfb      	adds	r3, r7, #7
 80150fc:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80150fe:	1dfb      	adds	r3, r7, #7
 8015100:	781b      	ldrb	r3, [r3, #0]
 8015102:	2b7f      	cmp	r3, #127	@ 0x7f
 8015104:	d828      	bhi.n	8015158 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8015106:	4a2f      	ldr	r2, [pc, #188]	@ (80151c4 <__NVIC_SetPriority+0xd4>)
 8015108:	1dfb      	adds	r3, r7, #7
 801510a:	781b      	ldrb	r3, [r3, #0]
 801510c:	b25b      	sxtb	r3, r3
 801510e:	089b      	lsrs	r3, r3, #2
 8015110:	33c0      	adds	r3, #192	@ 0xc0
 8015112:	009b      	lsls	r3, r3, #2
 8015114:	589b      	ldr	r3, [r3, r2]
 8015116:	1dfa      	adds	r2, r7, #7
 8015118:	7812      	ldrb	r2, [r2, #0]
 801511a:	0011      	movs	r1, r2
 801511c:	2203      	movs	r2, #3
 801511e:	400a      	ands	r2, r1
 8015120:	00d2      	lsls	r2, r2, #3
 8015122:	21ff      	movs	r1, #255	@ 0xff
 8015124:	4091      	lsls	r1, r2
 8015126:	000a      	movs	r2, r1
 8015128:	43d2      	mvns	r2, r2
 801512a:	401a      	ands	r2, r3
 801512c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 801512e:	683b      	ldr	r3, [r7, #0]
 8015130:	019b      	lsls	r3, r3, #6
 8015132:	22ff      	movs	r2, #255	@ 0xff
 8015134:	401a      	ands	r2, r3
 8015136:	1dfb      	adds	r3, r7, #7
 8015138:	781b      	ldrb	r3, [r3, #0]
 801513a:	0018      	movs	r0, r3
 801513c:	2303      	movs	r3, #3
 801513e:	4003      	ands	r3, r0
 8015140:	00db      	lsls	r3, r3, #3
 8015142:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8015144:	481f      	ldr	r0, [pc, #124]	@ (80151c4 <__NVIC_SetPriority+0xd4>)
 8015146:	1dfb      	adds	r3, r7, #7
 8015148:	781b      	ldrb	r3, [r3, #0]
 801514a:	b25b      	sxtb	r3, r3
 801514c:	089b      	lsrs	r3, r3, #2
 801514e:	430a      	orrs	r2, r1
 8015150:	33c0      	adds	r3, #192	@ 0xc0
 8015152:	009b      	lsls	r3, r3, #2
 8015154:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8015156:	e031      	b.n	80151bc <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8015158:	4a1b      	ldr	r2, [pc, #108]	@ (80151c8 <__NVIC_SetPriority+0xd8>)
 801515a:	1dfb      	adds	r3, r7, #7
 801515c:	781b      	ldrb	r3, [r3, #0]
 801515e:	0019      	movs	r1, r3
 8015160:	230f      	movs	r3, #15
 8015162:	400b      	ands	r3, r1
 8015164:	3b08      	subs	r3, #8
 8015166:	089b      	lsrs	r3, r3, #2
 8015168:	3306      	adds	r3, #6
 801516a:	009b      	lsls	r3, r3, #2
 801516c:	18d3      	adds	r3, r2, r3
 801516e:	3304      	adds	r3, #4
 8015170:	681b      	ldr	r3, [r3, #0]
 8015172:	1dfa      	adds	r2, r7, #7
 8015174:	7812      	ldrb	r2, [r2, #0]
 8015176:	0011      	movs	r1, r2
 8015178:	2203      	movs	r2, #3
 801517a:	400a      	ands	r2, r1
 801517c:	00d2      	lsls	r2, r2, #3
 801517e:	21ff      	movs	r1, #255	@ 0xff
 8015180:	4091      	lsls	r1, r2
 8015182:	000a      	movs	r2, r1
 8015184:	43d2      	mvns	r2, r2
 8015186:	401a      	ands	r2, r3
 8015188:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 801518a:	683b      	ldr	r3, [r7, #0]
 801518c:	019b      	lsls	r3, r3, #6
 801518e:	22ff      	movs	r2, #255	@ 0xff
 8015190:	401a      	ands	r2, r3
 8015192:	1dfb      	adds	r3, r7, #7
 8015194:	781b      	ldrb	r3, [r3, #0]
 8015196:	0018      	movs	r0, r3
 8015198:	2303      	movs	r3, #3
 801519a:	4003      	ands	r3, r0
 801519c:	00db      	lsls	r3, r3, #3
 801519e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80151a0:	4809      	ldr	r0, [pc, #36]	@ (80151c8 <__NVIC_SetPriority+0xd8>)
 80151a2:	1dfb      	adds	r3, r7, #7
 80151a4:	781b      	ldrb	r3, [r3, #0]
 80151a6:	001c      	movs	r4, r3
 80151a8:	230f      	movs	r3, #15
 80151aa:	4023      	ands	r3, r4
 80151ac:	3b08      	subs	r3, #8
 80151ae:	089b      	lsrs	r3, r3, #2
 80151b0:	430a      	orrs	r2, r1
 80151b2:	3306      	adds	r3, #6
 80151b4:	009b      	lsls	r3, r3, #2
 80151b6:	18c3      	adds	r3, r0, r3
 80151b8:	3304      	adds	r3, #4
 80151ba:	601a      	str	r2, [r3, #0]
}
 80151bc:	46c0      	nop			@ (mov r8, r8)
 80151be:	46bd      	mov	sp, r7
 80151c0:	b003      	add	sp, #12
 80151c2:	bd90      	pop	{r4, r7, pc}
 80151c4:	e000e100 	.word	0xe000e100
 80151c8:	e000ed00 	.word	0xe000ed00

080151cc <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 80151cc:	b580      	push	{r7, lr}
 80151ce:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 80151d0:	f3bf 8f4f 	dsb	sy
}
 80151d4:	46c0      	nop			@ (mov r8, r8)
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80151d6:	4b04      	ldr	r3, [pc, #16]	@ (80151e8 <__NVIC_SystemReset+0x1c>)
 80151d8:	4a04      	ldr	r2, [pc, #16]	@ (80151ec <__NVIC_SystemReset+0x20>)
 80151da:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80151dc:	f3bf 8f4f 	dsb	sy
}
 80151e0:	46c0      	nop			@ (mov r8, r8)
                 SCB_AIRCR_SYSRESETREQ_Msk);
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80151e2:	46c0      	nop			@ (mov r8, r8)
 80151e4:	e7fd      	b.n	80151e2 <__NVIC_SystemReset+0x16>
 80151e6:	46c0      	nop			@ (mov r8, r8)
 80151e8:	e000ed00 	.word	0xe000ed00
 80151ec:	05fa0004 	.word	0x05fa0004

080151f0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80151f0:	b580      	push	{r7, lr}
 80151f2:	b082      	sub	sp, #8
 80151f4:	af00      	add	r7, sp, #0
 80151f6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80151f8:	687b      	ldr	r3, [r7, #4]
 80151fa:	1e5a      	subs	r2, r3, #1
 80151fc:	2380      	movs	r3, #128	@ 0x80
 80151fe:	045b      	lsls	r3, r3, #17
 8015200:	429a      	cmp	r2, r3
 8015202:	d301      	bcc.n	8015208 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8015204:	2301      	movs	r3, #1
 8015206:	e010      	b.n	801522a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8015208:	4b0a      	ldr	r3, [pc, #40]	@ (8015234 <SysTick_Config+0x44>)
 801520a:	687a      	ldr	r2, [r7, #4]
 801520c:	3a01      	subs	r2, #1
 801520e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8015210:	2301      	movs	r3, #1
 8015212:	425b      	negs	r3, r3
 8015214:	2103      	movs	r1, #3
 8015216:	0018      	movs	r0, r3
 8015218:	f7ff ff6a 	bl	80150f0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 801521c:	4b05      	ldr	r3, [pc, #20]	@ (8015234 <SysTick_Config+0x44>)
 801521e:	2200      	movs	r2, #0
 8015220:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8015222:	4b04      	ldr	r3, [pc, #16]	@ (8015234 <SysTick_Config+0x44>)
 8015224:	2207      	movs	r2, #7
 8015226:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8015228:	2300      	movs	r3, #0
}
 801522a:	0018      	movs	r0, r3
 801522c:	46bd      	mov	sp, r7
 801522e:	b002      	add	sp, #8
 8015230:	bd80      	pop	{r7, pc}
 8015232:	46c0      	nop			@ (mov r8, r8)
 8015234:	e000e010 	.word	0xe000e010

08015238 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8015238:	b580      	push	{r7, lr}
 801523a:	b084      	sub	sp, #16
 801523c:	af00      	add	r7, sp, #0
 801523e:	60b9      	str	r1, [r7, #8]
 8015240:	607a      	str	r2, [r7, #4]
 8015242:	210f      	movs	r1, #15
 8015244:	187b      	adds	r3, r7, r1
 8015246:	1c02      	adds	r2, r0, #0
 8015248:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 801524a:	68ba      	ldr	r2, [r7, #8]
 801524c:	187b      	adds	r3, r7, r1
 801524e:	781b      	ldrb	r3, [r3, #0]
 8015250:	b25b      	sxtb	r3, r3
 8015252:	0011      	movs	r1, r2
 8015254:	0018      	movs	r0, r3
 8015256:	f7ff ff4b 	bl	80150f0 <__NVIC_SetPriority>
}
 801525a:	46c0      	nop			@ (mov r8, r8)
 801525c:	46bd      	mov	sp, r7
 801525e:	b004      	add	sp, #16
 8015260:	bd80      	pop	{r7, pc}

08015262 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8015262:	b580      	push	{r7, lr}
 8015264:	b082      	sub	sp, #8
 8015266:	af00      	add	r7, sp, #0
 8015268:	0002      	movs	r2, r0
 801526a:	1dfb      	adds	r3, r7, #7
 801526c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 801526e:	1dfb      	adds	r3, r7, #7
 8015270:	781b      	ldrb	r3, [r3, #0]
 8015272:	b25b      	sxtb	r3, r3
 8015274:	0018      	movs	r0, r3
 8015276:	f7ff ff21 	bl	80150bc <__NVIC_EnableIRQ>
}
 801527a:	46c0      	nop			@ (mov r8, r8)
 801527c:	46bd      	mov	sp, r7
 801527e:	b002      	add	sp, #8
 8015280:	bd80      	pop	{r7, pc}

08015282 <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiate a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 8015282:	b580      	push	{r7, lr}
 8015284:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 8015286:	f7ff ffa1 	bl	80151cc <__NVIC_SystemReset>

0801528a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 801528a:	b580      	push	{r7, lr}
 801528c:	b082      	sub	sp, #8
 801528e:	af00      	add	r7, sp, #0
 8015290:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8015292:	687b      	ldr	r3, [r7, #4]
 8015294:	0018      	movs	r0, r3
 8015296:	f7ff ffab 	bl	80151f0 <SysTick_Config>
 801529a:	0003      	movs	r3, r0
}
 801529c:	0018      	movs	r0, r3
 801529e:	46bd      	mov	sp, r7
 80152a0:	b002      	add	sp, #8
 80152a2:	bd80      	pop	{r7, pc}

080152a4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80152a4:	b580      	push	{r7, lr}
 80152a6:	b084      	sub	sp, #16
 80152a8:	af00      	add	r7, sp, #0
 80152aa:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80152ac:	687b      	ldr	r3, [r7, #4]
 80152ae:	2b00      	cmp	r3, #0
 80152b0:	d101      	bne.n	80152b6 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80152b2:	2301      	movs	r3, #1
 80152b4:	e061      	b.n	801537a <HAL_DMA_Init+0xd6>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Compute the channel index */
  /* Only one DMA: DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80152b6:	687b      	ldr	r3, [r7, #4]
 80152b8:	681b      	ldr	r3, [r3, #0]
 80152ba:	4a32      	ldr	r2, [pc, #200]	@ (8015384 <HAL_DMA_Init+0xe0>)
 80152bc:	4694      	mov	ip, r2
 80152be:	4463      	add	r3, ip
 80152c0:	2114      	movs	r1, #20
 80152c2:	0018      	movs	r0, r3
 80152c4:	f7ea ff6e 	bl	80001a4 <__udivsi3>
 80152c8:	0003      	movs	r3, r0
 80152ca:	009a      	lsls	r2, r3, #2
 80152cc:	687b      	ldr	r3, [r7, #4]
 80152ce:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma->DmaBaseAddress = DMA1;
 80152d0:	687b      	ldr	r3, [r7, #4]
 80152d2:	4a2d      	ldr	r2, [pc, #180]	@ (8015388 <HAL_DMA_Init+0xe4>)
 80152d4:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80152d6:	687b      	ldr	r3, [r7, #4]
 80152d8:	2225      	movs	r2, #37	@ 0x25
 80152da:	2102      	movs	r1, #2
 80152dc:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80152de:	687b      	ldr	r3, [r7, #4]
 80152e0:	681b      	ldr	r3, [r3, #0]
 80152e2:	681b      	ldr	r3, [r3, #0]
 80152e4:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80152e6:	68fb      	ldr	r3, [r7, #12]
 80152e8:	4a28      	ldr	r2, [pc, #160]	@ (801538c <HAL_DMA_Init+0xe8>)
 80152ea:	4013      	ands	r3, r2
 80152ec:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80152ee:	687b      	ldr	r3, [r7, #4]
 80152f0:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80152f2:	687b      	ldr	r3, [r7, #4]
 80152f4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80152f6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80152f8:	687b      	ldr	r3, [r7, #4]
 80152fa:	691b      	ldr	r3, [r3, #16]
 80152fc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80152fe:	687b      	ldr	r3, [r7, #4]
 8015300:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8015302:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8015304:	687b      	ldr	r3, [r7, #4]
 8015306:	699b      	ldr	r3, [r3, #24]
 8015308:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 801530a:	687b      	ldr	r3, [r7, #4]
 801530c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 801530e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8015310:	687b      	ldr	r3, [r7, #4]
 8015312:	6a1b      	ldr	r3, [r3, #32]
 8015314:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8015316:	68fa      	ldr	r2, [r7, #12]
 8015318:	4313      	orrs	r3, r2
 801531a:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 801531c:	687b      	ldr	r3, [r7, #4]
 801531e:	681b      	ldr	r3, [r3, #0]
 8015320:	68fa      	ldr	r2, [r7, #12]
 8015322:	601a      	str	r2, [r3, #0]

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8015324:	687b      	ldr	r3, [r7, #4]
 8015326:	689a      	ldr	r2, [r3, #8]
 8015328:	2380      	movs	r3, #128	@ 0x80
 801532a:	01db      	lsls	r3, r3, #7
 801532c:	429a      	cmp	r2, r3
 801532e:	d018      	beq.n	8015362 <HAL_DMA_Init+0xbe>
  {
    /* Write to DMA channel selection register */
    /* Reset request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8015330:	4b17      	ldr	r3, [pc, #92]	@ (8015390 <HAL_DMA_Init+0xec>)
 8015332:	681a      	ldr	r2, [r3, #0]
 8015334:	687b      	ldr	r3, [r7, #4]
 8015336:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8015338:	211c      	movs	r1, #28
 801533a:	400b      	ands	r3, r1
 801533c:	210f      	movs	r1, #15
 801533e:	4099      	lsls	r1, r3
 8015340:	000b      	movs	r3, r1
 8015342:	43d9      	mvns	r1, r3
 8015344:	4b12      	ldr	r3, [pc, #72]	@ (8015390 <HAL_DMA_Init+0xec>)
 8015346:	400a      	ands	r2, r1
 8015348:	601a      	str	r2, [r3, #0]

    /* Configure request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 801534a:	4b11      	ldr	r3, [pc, #68]	@ (8015390 <HAL_DMA_Init+0xec>)
 801534c:	6819      	ldr	r1, [r3, #0]
 801534e:	687b      	ldr	r3, [r7, #4]
 8015350:	685a      	ldr	r2, [r3, #4]
 8015352:	687b      	ldr	r3, [r7, #4]
 8015354:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8015356:	201c      	movs	r0, #28
 8015358:	4003      	ands	r3, r0
 801535a:	409a      	lsls	r2, r3
 801535c:	4b0c      	ldr	r3, [pc, #48]	@ (8015390 <HAL_DMA_Init+0xec>)
 801535e:	430a      	orrs	r2, r1
 8015360:	601a      	str	r2, [r3, #0]
  }

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8015362:	687b      	ldr	r3, [r7, #4]
 8015364:	2200      	movs	r2, #0
 8015366:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8015368:	687b      	ldr	r3, [r7, #4]
 801536a:	2225      	movs	r2, #37	@ 0x25
 801536c:	2101      	movs	r1, #1
 801536e:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8015370:	687b      	ldr	r3, [r7, #4]
 8015372:	2224      	movs	r2, #36	@ 0x24
 8015374:	2100      	movs	r1, #0
 8015376:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8015378:	2300      	movs	r3, #0
}
 801537a:	0018      	movs	r0, r3
 801537c:	46bd      	mov	sp, r7
 801537e:	b004      	add	sp, #16
 8015380:	bd80      	pop	{r7, pc}
 8015382:	46c0      	nop			@ (mov r8, r8)
 8015384:	bffdfff8 	.word	0xbffdfff8
 8015388:	40020000 	.word	0x40020000
 801538c:	ffff800f 	.word	0xffff800f
 8015390:	400200a8 	.word	0x400200a8

08015394 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The amount of data items to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8015394:	b580      	push	{r7, lr}
 8015396:	b086      	sub	sp, #24
 8015398:	af00      	add	r7, sp, #0
 801539a:	60f8      	str	r0, [r7, #12]
 801539c:	60b9      	str	r1, [r7, #8]
 801539e:	607a      	str	r2, [r7, #4]
 80153a0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80153a2:	2317      	movs	r3, #23
 80153a4:	18fb      	adds	r3, r7, r3
 80153a6:	2200      	movs	r2, #0
 80153a8:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80153aa:	68fb      	ldr	r3, [r7, #12]
 80153ac:	2224      	movs	r2, #36	@ 0x24
 80153ae:	5c9b      	ldrb	r3, [r3, r2]
 80153b0:	2b01      	cmp	r3, #1
 80153b2:	d101      	bne.n	80153b8 <HAL_DMA_Start_IT+0x24>
 80153b4:	2302      	movs	r3, #2
 80153b6:	e04f      	b.n	8015458 <HAL_DMA_Start_IT+0xc4>
 80153b8:	68fb      	ldr	r3, [r7, #12]
 80153ba:	2224      	movs	r2, #36	@ 0x24
 80153bc:	2101      	movs	r1, #1
 80153be:	5499      	strb	r1, [r3, r2]

  if(HAL_DMA_STATE_READY == hdma->State)
 80153c0:	68fb      	ldr	r3, [r7, #12]
 80153c2:	2225      	movs	r2, #37	@ 0x25
 80153c4:	5c9b      	ldrb	r3, [r3, r2]
 80153c6:	b2db      	uxtb	r3, r3
 80153c8:	2b01      	cmp	r3, #1
 80153ca:	d13a      	bne.n	8015442 <HAL_DMA_Start_IT+0xae>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80153cc:	68fb      	ldr	r3, [r7, #12]
 80153ce:	2225      	movs	r2, #37	@ 0x25
 80153d0:	2102      	movs	r1, #2
 80153d2:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80153d4:	68fb      	ldr	r3, [r7, #12]
 80153d6:	2200      	movs	r2, #0
 80153d8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80153da:	68fb      	ldr	r3, [r7, #12]
 80153dc:	681b      	ldr	r3, [r3, #0]
 80153de:	681a      	ldr	r2, [r3, #0]
 80153e0:	68fb      	ldr	r3, [r7, #12]
 80153e2:	681b      	ldr	r3, [r3, #0]
 80153e4:	2101      	movs	r1, #1
 80153e6:	438a      	bics	r2, r1
 80153e8:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80153ea:	683b      	ldr	r3, [r7, #0]
 80153ec:	687a      	ldr	r2, [r7, #4]
 80153ee:	68b9      	ldr	r1, [r7, #8]
 80153f0:	68f8      	ldr	r0, [r7, #12]
 80153f2:	f000 f976 	bl	80156e2 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 80153f6:	68fb      	ldr	r3, [r7, #12]
 80153f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80153fa:	2b00      	cmp	r3, #0
 80153fc:	d008      	beq.n	8015410 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80153fe:	68fb      	ldr	r3, [r7, #12]
 8015400:	681b      	ldr	r3, [r3, #0]
 8015402:	681a      	ldr	r2, [r3, #0]
 8015404:	68fb      	ldr	r3, [r7, #12]
 8015406:	681b      	ldr	r3, [r3, #0]
 8015408:	210e      	movs	r1, #14
 801540a:	430a      	orrs	r2, r1
 801540c:	601a      	str	r2, [r3, #0]
 801540e:	e00f      	b.n	8015430 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8015410:	68fb      	ldr	r3, [r7, #12]
 8015412:	681b      	ldr	r3, [r3, #0]
 8015414:	681a      	ldr	r2, [r3, #0]
 8015416:	68fb      	ldr	r3, [r7, #12]
 8015418:	681b      	ldr	r3, [r3, #0]
 801541a:	2104      	movs	r1, #4
 801541c:	438a      	bics	r2, r1
 801541e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8015420:	68fb      	ldr	r3, [r7, #12]
 8015422:	681b      	ldr	r3, [r3, #0]
 8015424:	681a      	ldr	r2, [r3, #0]
 8015426:	68fb      	ldr	r3, [r7, #12]
 8015428:	681b      	ldr	r3, [r3, #0]
 801542a:	210a      	movs	r1, #10
 801542c:	430a      	orrs	r2, r1
 801542e:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8015430:	68fb      	ldr	r3, [r7, #12]
 8015432:	681b      	ldr	r3, [r3, #0]
 8015434:	681a      	ldr	r2, [r3, #0]
 8015436:	68fb      	ldr	r3, [r7, #12]
 8015438:	681b      	ldr	r3, [r3, #0]
 801543a:	2101      	movs	r1, #1
 801543c:	430a      	orrs	r2, r1
 801543e:	601a      	str	r2, [r3, #0]
 8015440:	e007      	b.n	8015452 <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8015442:	68fb      	ldr	r3, [r7, #12]
 8015444:	2224      	movs	r2, #36	@ 0x24
 8015446:	2100      	movs	r1, #0
 8015448:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 801544a:	2317      	movs	r3, #23
 801544c:	18fb      	adds	r3, r7, r3
 801544e:	2202      	movs	r2, #2
 8015450:	701a      	strb	r2, [r3, #0]
  }
  return status;
 8015452:	2317      	movs	r3, #23
 8015454:	18fb      	adds	r3, r7, r3
 8015456:	781b      	ldrb	r3, [r3, #0]
}
 8015458:	0018      	movs	r0, r3
 801545a:	46bd      	mov	sp, r7
 801545c:	b006      	add	sp, #24
 801545e:	bd80      	pop	{r7, pc}

08015460 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8015460:	b580      	push	{r7, lr}
 8015462:	b084      	sub	sp, #16
 8015464:	af00      	add	r7, sp, #0
 8015466:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8015468:	230f      	movs	r3, #15
 801546a:	18fb      	adds	r3, r7, r3
 801546c:	2200      	movs	r2, #0
 801546e:	701a      	strb	r2, [r3, #0]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8015470:	687b      	ldr	r3, [r7, #4]
 8015472:	2225      	movs	r2, #37	@ 0x25
 8015474:	5c9b      	ldrb	r3, [r3, r2]
 8015476:	b2db      	uxtb	r3, r3
 8015478:	2b02      	cmp	r3, #2
 801547a:	d008      	beq.n	801548e <HAL_DMA_Abort+0x2e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 801547c:	687b      	ldr	r3, [r7, #4]
 801547e:	2204      	movs	r2, #4
 8015480:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8015482:	687b      	ldr	r3, [r7, #4]
 8015484:	2224      	movs	r2, #36	@ 0x24
 8015486:	2100      	movs	r1, #0
 8015488:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 801548a:	2301      	movs	r3, #1
 801548c:	e024      	b.n	80154d8 <HAL_DMA_Abort+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 801548e:	687b      	ldr	r3, [r7, #4]
 8015490:	681b      	ldr	r3, [r3, #0]
 8015492:	681a      	ldr	r2, [r3, #0]
 8015494:	687b      	ldr	r3, [r7, #4]
 8015496:	681b      	ldr	r3, [r3, #0]
 8015498:	210e      	movs	r1, #14
 801549a:	438a      	bics	r2, r1
 801549c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 801549e:	687b      	ldr	r3, [r7, #4]
 80154a0:	681b      	ldr	r3, [r3, #0]
 80154a2:	681a      	ldr	r2, [r3, #0]
 80154a4:	687b      	ldr	r3, [r7, #4]
 80154a6:	681b      	ldr	r3, [r3, #0]
 80154a8:	2101      	movs	r1, #1
 80154aa:	438a      	bics	r2, r1
 80154ac:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80154ae:	687b      	ldr	r3, [r7, #4]
 80154b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80154b2:	221c      	movs	r2, #28
 80154b4:	401a      	ands	r2, r3
 80154b6:	687b      	ldr	r3, [r7, #4]
 80154b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80154ba:	2101      	movs	r1, #1
 80154bc:	4091      	lsls	r1, r2
 80154be:	000a      	movs	r2, r1
 80154c0:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80154c2:	687b      	ldr	r3, [r7, #4]
 80154c4:	2225      	movs	r2, #37	@ 0x25
 80154c6:	2101      	movs	r1, #1
 80154c8:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80154ca:	687b      	ldr	r3, [r7, #4]
 80154cc:	2224      	movs	r2, #36	@ 0x24
 80154ce:	2100      	movs	r1, #0
 80154d0:	5499      	strb	r1, [r3, r2]

    return status;
 80154d2:	230f      	movs	r3, #15
 80154d4:	18fb      	adds	r3, r7, r3
 80154d6:	781b      	ldrb	r3, [r3, #0]
  }
}
 80154d8:	0018      	movs	r0, r3
 80154da:	46bd      	mov	sp, r7
 80154dc:	b004      	add	sp, #16
 80154de:	bd80      	pop	{r7, pc}

080154e0 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80154e0:	b580      	push	{r7, lr}
 80154e2:	b084      	sub	sp, #16
 80154e4:	af00      	add	r7, sp, #0
 80154e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80154e8:	210f      	movs	r1, #15
 80154ea:	187b      	adds	r3, r7, r1
 80154ec:	2200      	movs	r2, #0
 80154ee:	701a      	strb	r2, [r3, #0]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 80154f0:	687b      	ldr	r3, [r7, #4]
 80154f2:	2225      	movs	r2, #37	@ 0x25
 80154f4:	5c9b      	ldrb	r3, [r3, r2]
 80154f6:	b2db      	uxtb	r3, r3
 80154f8:	2b02      	cmp	r3, #2
 80154fa:	d006      	beq.n	801550a <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80154fc:	687b      	ldr	r3, [r7, #4]
 80154fe:	2204      	movs	r2, #4
 8015500:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8015502:	187b      	adds	r3, r7, r1
 8015504:	2201      	movs	r2, #1
 8015506:	701a      	strb	r2, [r3, #0]
 8015508:	e02a      	b.n	8015560 <HAL_DMA_Abort_IT+0x80>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 801550a:	687b      	ldr	r3, [r7, #4]
 801550c:	681b      	ldr	r3, [r3, #0]
 801550e:	681a      	ldr	r2, [r3, #0]
 8015510:	687b      	ldr	r3, [r7, #4]
 8015512:	681b      	ldr	r3, [r3, #0]
 8015514:	210e      	movs	r1, #14
 8015516:	438a      	bics	r2, r1
 8015518:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 801551a:	687b      	ldr	r3, [r7, #4]
 801551c:	681b      	ldr	r3, [r3, #0]
 801551e:	681a      	ldr	r2, [r3, #0]
 8015520:	687b      	ldr	r3, [r7, #4]
 8015522:	681b      	ldr	r3, [r3, #0]
 8015524:	2101      	movs	r1, #1
 8015526:	438a      	bics	r2, r1
 8015528:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 801552a:	687b      	ldr	r3, [r7, #4]
 801552c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801552e:	221c      	movs	r2, #28
 8015530:	401a      	ands	r2, r3
 8015532:	687b      	ldr	r3, [r7, #4]
 8015534:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8015536:	2101      	movs	r1, #1
 8015538:	4091      	lsls	r1, r2
 801553a:	000a      	movs	r2, r1
 801553c:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 801553e:	687b      	ldr	r3, [r7, #4]
 8015540:	2225      	movs	r2, #37	@ 0x25
 8015542:	2101      	movs	r1, #1
 8015544:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8015546:	687b      	ldr	r3, [r7, #4]
 8015548:	2224      	movs	r2, #36	@ 0x24
 801554a:	2100      	movs	r1, #0
 801554c:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 801554e:	687b      	ldr	r3, [r7, #4]
 8015550:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8015552:	2b00      	cmp	r3, #0
 8015554:	d004      	beq.n	8015560 <HAL_DMA_Abort_IT+0x80>
    {
      hdma->XferAbortCallback(hdma);
 8015556:	687b      	ldr	r3, [r7, #4]
 8015558:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801555a:	687a      	ldr	r2, [r7, #4]
 801555c:	0010      	movs	r0, r2
 801555e:	4798      	blx	r3
    }
  }
  return status;
 8015560:	230f      	movs	r3, #15
 8015562:	18fb      	adds	r3, r7, r3
 8015564:	781b      	ldrb	r3, [r3, #0]
}
 8015566:	0018      	movs	r0, r3
 8015568:	46bd      	mov	sp, r7
 801556a:	b004      	add	sp, #16
 801556c:	bd80      	pop	{r7, pc}

0801556e <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 801556e:	b580      	push	{r7, lr}
 8015570:	b084      	sub	sp, #16
 8015572:	af00      	add	r7, sp, #0
 8015574:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8015576:	687b      	ldr	r3, [r7, #4]
 8015578:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801557a:	681b      	ldr	r3, [r3, #0]
 801557c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 801557e:	687b      	ldr	r3, [r7, #4]
 8015580:	681b      	ldr	r3, [r3, #0]
 8015582:	681b      	ldr	r3, [r3, #0]
 8015584:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 8015586:	687b      	ldr	r3, [r7, #4]
 8015588:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801558a:	221c      	movs	r2, #28
 801558c:	4013      	ands	r3, r2
 801558e:	2204      	movs	r2, #4
 8015590:	409a      	lsls	r2, r3
 8015592:	0013      	movs	r3, r2
 8015594:	68fa      	ldr	r2, [r7, #12]
 8015596:	4013      	ands	r3, r2
 8015598:	d026      	beq.n	80155e8 <HAL_DMA_IRQHandler+0x7a>
 801559a:	68bb      	ldr	r3, [r7, #8]
 801559c:	2204      	movs	r2, #4
 801559e:	4013      	ands	r3, r2
 80155a0:	d022      	beq.n	80155e8 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80155a2:	687b      	ldr	r3, [r7, #4]
 80155a4:	681b      	ldr	r3, [r3, #0]
 80155a6:	681b      	ldr	r3, [r3, #0]
 80155a8:	2220      	movs	r2, #32
 80155aa:	4013      	ands	r3, r2
 80155ac:	d107      	bne.n	80155be <HAL_DMA_IRQHandler+0x50>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80155ae:	687b      	ldr	r3, [r7, #4]
 80155b0:	681b      	ldr	r3, [r3, #0]
 80155b2:	681a      	ldr	r2, [r3, #0]
 80155b4:	687b      	ldr	r3, [r7, #4]
 80155b6:	681b      	ldr	r3, [r3, #0]
 80155b8:	2104      	movs	r1, #4
 80155ba:	438a      	bics	r2, r1
 80155bc:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1cU);
 80155be:	687b      	ldr	r3, [r7, #4]
 80155c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80155c2:	221c      	movs	r2, #28
 80155c4:	401a      	ands	r2, r3
 80155c6:	687b      	ldr	r3, [r7, #4]
 80155c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80155ca:	2104      	movs	r1, #4
 80155cc:	4091      	lsls	r1, r2
 80155ce:	000a      	movs	r2, r1
 80155d0:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

     if(hdma->XferHalfCpltCallback != NULL)
 80155d2:	687b      	ldr	r3, [r7, #4]
 80155d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80155d6:	2b00      	cmp	r3, #0
 80155d8:	d100      	bne.n	80155dc <HAL_DMA_IRQHandler+0x6e>
 80155da:	e071      	b.n	80156c0 <HAL_DMA_IRQHandler+0x152>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80155dc:	687b      	ldr	r3, [r7, #4]
 80155de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80155e0:	687a      	ldr	r2, [r7, #4]
 80155e2:	0010      	movs	r0, r2
 80155e4:	4798      	blx	r3
     if(hdma->XferHalfCpltCallback != NULL)
 80155e6:	e06b      	b.n	80156c0 <HAL_DMA_IRQHandler+0x152>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 80155e8:	687b      	ldr	r3, [r7, #4]
 80155ea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80155ec:	221c      	movs	r2, #28
 80155ee:	4013      	ands	r3, r2
 80155f0:	2202      	movs	r2, #2
 80155f2:	409a      	lsls	r2, r3
 80155f4:	0013      	movs	r3, r2
 80155f6:	68fa      	ldr	r2, [r7, #12]
 80155f8:	4013      	ands	r3, r2
 80155fa:	d02d      	beq.n	8015658 <HAL_DMA_IRQHandler+0xea>
 80155fc:	68bb      	ldr	r3, [r7, #8]
 80155fe:	2202      	movs	r2, #2
 8015600:	4013      	ands	r3, r2
 8015602:	d029      	beq.n	8015658 <HAL_DMA_IRQHandler+0xea>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8015604:	687b      	ldr	r3, [r7, #4]
 8015606:	681b      	ldr	r3, [r3, #0]
 8015608:	681b      	ldr	r3, [r3, #0]
 801560a:	2220      	movs	r2, #32
 801560c:	4013      	ands	r3, r2
 801560e:	d10b      	bne.n	8015628 <HAL_DMA_IRQHandler+0xba>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8015610:	687b      	ldr	r3, [r7, #4]
 8015612:	681b      	ldr	r3, [r3, #0]
 8015614:	681a      	ldr	r2, [r3, #0]
 8015616:	687b      	ldr	r3, [r7, #4]
 8015618:	681b      	ldr	r3, [r3, #0]
 801561a:	210a      	movs	r1, #10
 801561c:	438a      	bics	r2, r1
 801561e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8015620:	687b      	ldr	r3, [r7, #4]
 8015622:	2225      	movs	r2, #37	@ 0x25
 8015624:	2101      	movs	r1, #1
 8015626:	5499      	strb	r1, [r3, r2]
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 8015628:	687b      	ldr	r3, [r7, #4]
 801562a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801562c:	221c      	movs	r2, #28
 801562e:	401a      	ands	r2, r3
 8015630:	687b      	ldr	r3, [r7, #4]
 8015632:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8015634:	2102      	movs	r1, #2
 8015636:	4091      	lsls	r1, r2
 8015638:	000a      	movs	r2, r1
 801563a:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 801563c:	687b      	ldr	r3, [r7, #4]
 801563e:	2224      	movs	r2, #36	@ 0x24
 8015640:	2100      	movs	r1, #0
 8015642:	5499      	strb	r1, [r3, r2]

    if(hdma->XferCpltCallback != NULL)
 8015644:	687b      	ldr	r3, [r7, #4]
 8015646:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015648:	2b00      	cmp	r3, #0
 801564a:	d039      	beq.n	80156c0 <HAL_DMA_IRQHandler+0x152>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 801564c:	687b      	ldr	r3, [r7, #4]
 801564e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015650:	687a      	ldr	r2, [r7, #4]
 8015652:	0010      	movs	r0, r2
 8015654:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8015656:	e033      	b.n	80156c0 <HAL_DMA_IRQHandler+0x152>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TE)))
 8015658:	687b      	ldr	r3, [r7, #4]
 801565a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801565c:	221c      	movs	r2, #28
 801565e:	4013      	ands	r3, r2
 8015660:	2208      	movs	r2, #8
 8015662:	409a      	lsls	r2, r3
 8015664:	0013      	movs	r3, r2
 8015666:	68fa      	ldr	r2, [r7, #12]
 8015668:	4013      	ands	r3, r2
 801566a:	d02a      	beq.n	80156c2 <HAL_DMA_IRQHandler+0x154>
 801566c:	68bb      	ldr	r3, [r7, #8]
 801566e:	2208      	movs	r2, #8
 8015670:	4013      	ands	r3, r2
 8015672:	d026      	beq.n	80156c2 <HAL_DMA_IRQHandler+0x154>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8015674:	687b      	ldr	r3, [r7, #4]
 8015676:	681b      	ldr	r3, [r3, #0]
 8015678:	681a      	ldr	r2, [r3, #0]
 801567a:	687b      	ldr	r3, [r7, #4]
 801567c:	681b      	ldr	r3, [r3, #0]
 801567e:	210e      	movs	r1, #14
 8015680:	438a      	bics	r2, r1
 8015682:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8015684:	687b      	ldr	r3, [r7, #4]
 8015686:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8015688:	221c      	movs	r2, #28
 801568a:	401a      	ands	r2, r3
 801568c:	687b      	ldr	r3, [r7, #4]
 801568e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8015690:	2101      	movs	r1, #1
 8015692:	4091      	lsls	r1, r2
 8015694:	000a      	movs	r2, r1
 8015696:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8015698:	687b      	ldr	r3, [r7, #4]
 801569a:	2201      	movs	r2, #1
 801569c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 801569e:	687b      	ldr	r3, [r7, #4]
 80156a0:	2225      	movs	r2, #37	@ 0x25
 80156a2:	2101      	movs	r1, #1
 80156a4:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80156a6:	687b      	ldr	r3, [r7, #4]
 80156a8:	2224      	movs	r2, #36	@ 0x24
 80156aa:	2100      	movs	r1, #0
 80156ac:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 80156ae:	687b      	ldr	r3, [r7, #4]
 80156b0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80156b2:	2b00      	cmp	r3, #0
 80156b4:	d005      	beq.n	80156c2 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80156b6:	687b      	ldr	r3, [r7, #4]
 80156b8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80156ba:	687a      	ldr	r2, [r7, #4]
 80156bc:	0010      	movs	r0, r2
 80156be:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80156c0:	46c0      	nop			@ (mov r8, r8)
 80156c2:	46c0      	nop			@ (mov r8, r8)
}
 80156c4:	46bd      	mov	sp, r7
 80156c6:	b004      	add	sp, #16
 80156c8:	bd80      	pop	{r7, pc}

080156ca <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80156ca:	b580      	push	{r7, lr}
 80156cc:	b082      	sub	sp, #8
 80156ce:	af00      	add	r7, sp, #0
 80156d0:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 80156d2:	687b      	ldr	r3, [r7, #4]
 80156d4:	2225      	movs	r2, #37	@ 0x25
 80156d6:	5c9b      	ldrb	r3, [r3, r2]
 80156d8:	b2db      	uxtb	r3, r3
}
 80156da:	0018      	movs	r0, r3
 80156dc:	46bd      	mov	sp, r7
 80156de:	b002      	add	sp, #8
 80156e0:	bd80      	pop	{r7, pc}

080156e2 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The amount of data items to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80156e2:	b580      	push	{r7, lr}
 80156e4:	b084      	sub	sp, #16
 80156e6:	af00      	add	r7, sp, #0
 80156e8:	60f8      	str	r0, [r7, #12]
 80156ea:	60b9      	str	r1, [r7, #8]
 80156ec:	607a      	str	r2, [r7, #4]
 80156ee:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80156f0:	68fb      	ldr	r3, [r7, #12]
 80156f2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80156f4:	221c      	movs	r2, #28
 80156f6:	401a      	ands	r2, r3
 80156f8:	68fb      	ldr	r3, [r7, #12]
 80156fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80156fc:	2101      	movs	r1, #1
 80156fe:	4091      	lsls	r1, r2
 8015700:	000a      	movs	r2, r1
 8015702:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8015704:	68fb      	ldr	r3, [r7, #12]
 8015706:	681b      	ldr	r3, [r3, #0]
 8015708:	683a      	ldr	r2, [r7, #0]
 801570a:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 801570c:	68fb      	ldr	r3, [r7, #12]
 801570e:	689b      	ldr	r3, [r3, #8]
 8015710:	2b10      	cmp	r3, #16
 8015712:	d108      	bne.n	8015726 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8015714:	68fb      	ldr	r3, [r7, #12]
 8015716:	681b      	ldr	r3, [r3, #0]
 8015718:	687a      	ldr	r2, [r7, #4]
 801571a:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 801571c:	68fb      	ldr	r3, [r7, #12]
 801571e:	681b      	ldr	r3, [r3, #0]
 8015720:	68ba      	ldr	r2, [r7, #8]
 8015722:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8015724:	e007      	b.n	8015736 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8015726:	68fb      	ldr	r3, [r7, #12]
 8015728:	681b      	ldr	r3, [r3, #0]
 801572a:	68ba      	ldr	r2, [r7, #8]
 801572c:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 801572e:	68fb      	ldr	r3, [r7, #12]
 8015730:	681b      	ldr	r3, [r3, #0]
 8015732:	687a      	ldr	r2, [r7, #4]
 8015734:	60da      	str	r2, [r3, #12]
}
 8015736:	46c0      	nop			@ (mov r8, r8)
 8015738:	46bd      	mov	sp, r7
 801573a:	b004      	add	sp, #16
 801573c:	bd80      	pop	{r7, pc}
	...

08015740 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8015740:	b580      	push	{r7, lr}
 8015742:	b084      	sub	sp, #16
 8015744:	af00      	add	r7, sp, #0
 8015746:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 8015748:	f7ff f8f0 	bl	801492c <HAL_GetTick>
 801574c:	0003      	movs	r3, r0
 801574e:	60fb      	str	r3, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8015750:	e00f      	b.n	8015772 <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 8015752:	687b      	ldr	r3, [r7, #4]
 8015754:	3301      	adds	r3, #1
 8015756:	d00c      	beq.n	8015772 <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8015758:	687b      	ldr	r3, [r7, #4]
 801575a:	2b00      	cmp	r3, #0
 801575c:	d007      	beq.n	801576e <FLASH_WaitForLastOperation+0x2e>
 801575e:	f7ff f8e5 	bl	801492c <HAL_GetTick>
 8015762:	0002      	movs	r2, r0
 8015764:	68fb      	ldr	r3, [r7, #12]
 8015766:	1ad3      	subs	r3, r2, r3
 8015768:	687a      	ldr	r2, [r7, #4]
 801576a:	429a      	cmp	r2, r3
 801576c:	d201      	bcs.n	8015772 <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 801576e:	2303      	movs	r3, #3
 8015770:	e052      	b.n	8015818 <FLASH_WaitForLastOperation+0xd8>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8015772:	4b2b      	ldr	r3, [pc, #172]	@ (8015820 <FLASH_WaitForLastOperation+0xe0>)
 8015774:	699b      	ldr	r3, [r3, #24]
 8015776:	2201      	movs	r2, #1
 8015778:	4013      	ands	r3, r2
 801577a:	2b01      	cmp	r3, #1
 801577c:	d0e9      	beq.n	8015752 <FLASH_WaitForLastOperation+0x12>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 801577e:	4b28      	ldr	r3, [pc, #160]	@ (8015820 <FLASH_WaitForLastOperation+0xe0>)
 8015780:	699b      	ldr	r3, [r3, #24]
 8015782:	2202      	movs	r2, #2
 8015784:	4013      	ands	r3, r2
 8015786:	2b02      	cmp	r3, #2
 8015788:	d102      	bne.n	8015790 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 801578a:	4b25      	ldr	r3, [pc, #148]	@ (8015820 <FLASH_WaitForLastOperation+0xe0>)
 801578c:	2202      	movs	r2, #2
 801578e:	619a      	str	r2, [r3, #24]
  }
  
  if( __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)     || 
 8015790:	4b23      	ldr	r3, [pc, #140]	@ (8015820 <FLASH_WaitForLastOperation+0xe0>)
 8015792:	699a      	ldr	r2, [r3, #24]
 8015794:	2380      	movs	r3, #128	@ 0x80
 8015796:	005b      	lsls	r3, r3, #1
 8015798:	401a      	ands	r2, r3
 801579a:	2380      	movs	r3, #128	@ 0x80
 801579c:	005b      	lsls	r3, r3, #1
 801579e:	429a      	cmp	r2, r3
 80157a0:	d035      	beq.n	801580e <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR)     || 
 80157a2:	4b1f      	ldr	r3, [pc, #124]	@ (8015820 <FLASH_WaitForLastOperation+0xe0>)
 80157a4:	699a      	ldr	r2, [r3, #24]
 80157a6:	2380      	movs	r3, #128	@ 0x80
 80157a8:	009b      	lsls	r3, r3, #2
 80157aa:	401a      	ands	r2, r3
  if( __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)     || 
 80157ac:	2380      	movs	r3, #128	@ 0x80
 80157ae:	009b      	lsls	r3, r3, #2
 80157b0:	429a      	cmp	r2, r3
 80157b2:	d02c      	beq.n	801580e <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR)     || 
 80157b4:	4b1a      	ldr	r3, [pc, #104]	@ (8015820 <FLASH_WaitForLastOperation+0xe0>)
 80157b6:	699a      	ldr	r2, [r3, #24]
 80157b8:	2380      	movs	r3, #128	@ 0x80
 80157ba:	00db      	lsls	r3, r3, #3
 80157bc:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR)     || 
 80157be:	2380      	movs	r3, #128	@ 0x80
 80157c0:	00db      	lsls	r3, r3, #3
 80157c2:	429a      	cmp	r2, r3
 80157c4:	d023      	beq.n	801580e <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR)    || 
 80157c6:	4b16      	ldr	r3, [pc, #88]	@ (8015820 <FLASH_WaitForLastOperation+0xe0>)
 80157c8:	699a      	ldr	r2, [r3, #24]
 80157ca:	2380      	movs	r3, #128	@ 0x80
 80157cc:	011b      	lsls	r3, r3, #4
 80157ce:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR)     || 
 80157d0:	2380      	movs	r3, #128	@ 0x80
 80157d2:	011b      	lsls	r3, r3, #4
 80157d4:	429a      	cmp	r2, r3
 80157d6:	d01a      	beq.n	801580e <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR)      || 
 80157d8:	4b11      	ldr	r3, [pc, #68]	@ (8015820 <FLASH_WaitForLastOperation+0xe0>)
 80157da:	699a      	ldr	r2, [r3, #24]
 80157dc:	2380      	movs	r3, #128	@ 0x80
 80157de:	019b      	lsls	r3, r3, #6
 80157e0:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR)    || 
 80157e2:	2380      	movs	r3, #128	@ 0x80
 80157e4:	019b      	lsls	r3, r3, #6
 80157e6:	429a      	cmp	r2, r3
 80157e8:	d011      	beq.n	801580e <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_FWWERR)     || 
 80157ea:	4b0d      	ldr	r3, [pc, #52]	@ (8015820 <FLASH_WaitForLastOperation+0xe0>)
 80157ec:	699a      	ldr	r2, [r3, #24]
 80157ee:	2380      	movs	r3, #128	@ 0x80
 80157f0:	029b      	lsls	r3, r3, #10
 80157f2:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR)      || 
 80157f4:	2380      	movs	r3, #128	@ 0x80
 80157f6:	029b      	lsls	r3, r3, #10
 80157f8:	429a      	cmp	r2, r3
 80157fa:	d008      	beq.n	801580e <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_NOTZEROERR) )
 80157fc:	4b08      	ldr	r3, [pc, #32]	@ (8015820 <FLASH_WaitForLastOperation+0xe0>)
 80157fe:	699a      	ldr	r2, [r3, #24]
 8015800:	2380      	movs	r3, #128	@ 0x80
 8015802:	025b      	lsls	r3, r3, #9
 8015804:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_FWWERR)     || 
 8015806:	2380      	movs	r3, #128	@ 0x80
 8015808:	025b      	lsls	r3, r3, #9
 801580a:	429a      	cmp	r2, r3
 801580c:	d103      	bne.n	8015816 <FLASH_WaitForLastOperation+0xd6>
     *           cut of the STM32L031xx device or the first cut of the STM32L041xx
     *           device, this error should be ignored. The revId of the device
     *           can be retrieved via the HAL_GetREVID() function.
     *
     */
    FLASH_SetErrorCode();
 801580e:	f000 f809 	bl	8015824 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8015812:	2301      	movs	r3, #1
 8015814:	e000      	b.n	8015818 <FLASH_WaitForLastOperation+0xd8>
  }

  /* There is no error flag set */
  return HAL_OK;
 8015816:	2300      	movs	r3, #0
}
 8015818:	0018      	movs	r0, r3
 801581a:	46bd      	mov	sp, r7
 801581c:	b004      	add	sp, #16
 801581e:	bd80      	pop	{r7, pc}
 8015820:	40022000 	.word	0x40022000

08015824 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8015824:	b580      	push	{r7, lr}
 8015826:	b082      	sub	sp, #8
 8015828:	af00      	add	r7, sp, #0
  uint32_t flags = 0;
 801582a:	2300      	movs	r3, #0
 801582c:	607b      	str	r3, [r7, #4]
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 801582e:	4b49      	ldr	r3, [pc, #292]	@ (8015954 <FLASH_SetErrorCode+0x130>)
 8015830:	699a      	ldr	r2, [r3, #24]
 8015832:	2380      	movs	r3, #128	@ 0x80
 8015834:	005b      	lsls	r3, r3, #1
 8015836:	401a      	ands	r2, r3
 8015838:	2380      	movs	r3, #128	@ 0x80
 801583a:	005b      	lsls	r3, r3, #1
 801583c:	429a      	cmp	r2, r3
 801583e:	d10a      	bne.n	8015856 <FLASH_SetErrorCode+0x32>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8015840:	4b45      	ldr	r3, [pc, #276]	@ (8015958 <FLASH_SetErrorCode+0x134>)
 8015842:	695b      	ldr	r3, [r3, #20]
 8015844:	2202      	movs	r2, #2
 8015846:	431a      	orrs	r2, r3
 8015848:	4b43      	ldr	r3, [pc, #268]	@ (8015958 <FLASH_SetErrorCode+0x134>)
 801584a:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_WRPERR;
 801584c:	687b      	ldr	r3, [r7, #4]
 801584e:	2280      	movs	r2, #128	@ 0x80
 8015850:	0052      	lsls	r2, r2, #1
 8015852:	4313      	orrs	r3, r2
 8015854:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR))
 8015856:	4b3f      	ldr	r3, [pc, #252]	@ (8015954 <FLASH_SetErrorCode+0x130>)
 8015858:	699a      	ldr	r2, [r3, #24]
 801585a:	2380      	movs	r3, #128	@ 0x80
 801585c:	009b      	lsls	r3, r3, #2
 801585e:	401a      	ands	r2, r3
 8015860:	2380      	movs	r3, #128	@ 0x80
 8015862:	009b      	lsls	r3, r3, #2
 8015864:	429a      	cmp	r2, r3
 8015866:	d10a      	bne.n	801587e <FLASH_SetErrorCode+0x5a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8015868:	4b3b      	ldr	r3, [pc, #236]	@ (8015958 <FLASH_SetErrorCode+0x134>)
 801586a:	695b      	ldr	r3, [r3, #20]
 801586c:	2201      	movs	r2, #1
 801586e:	431a      	orrs	r2, r3
 8015870:	4b39      	ldr	r3, [pc, #228]	@ (8015958 <FLASH_SetErrorCode+0x134>)
 8015872:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_PGAERR;
 8015874:	687b      	ldr	r3, [r7, #4]
 8015876:	2280      	movs	r2, #128	@ 0x80
 8015878:	0092      	lsls	r2, r2, #2
 801587a:	4313      	orrs	r3, r2
 801587c:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR))
 801587e:	4b35      	ldr	r3, [pc, #212]	@ (8015954 <FLASH_SetErrorCode+0x130>)
 8015880:	699a      	ldr	r2, [r3, #24]
 8015882:	2380      	movs	r3, #128	@ 0x80
 8015884:	00db      	lsls	r3, r3, #3
 8015886:	401a      	ands	r2, r3
 8015888:	2380      	movs	r3, #128	@ 0x80
 801588a:	00db      	lsls	r3, r3, #3
 801588c:	429a      	cmp	r2, r3
 801588e:	d10a      	bne.n	80158a6 <FLASH_SetErrorCode+0x82>
  { 
    pFlash.ErrorCode |= HAL_FLASH_ERROR_SIZE;
 8015890:	4b31      	ldr	r3, [pc, #196]	@ (8015958 <FLASH_SetErrorCode+0x134>)
 8015892:	695b      	ldr	r3, [r3, #20]
 8015894:	2208      	movs	r2, #8
 8015896:	431a      	orrs	r2, r3
 8015898:	4b2f      	ldr	r3, [pc, #188]	@ (8015958 <FLASH_SetErrorCode+0x134>)
 801589a:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_SIZERR;
 801589c:	687b      	ldr	r3, [r7, #4]
 801589e:	2280      	movs	r2, #128	@ 0x80
 80158a0:	00d2      	lsls	r2, r2, #3
 80158a2:	4313      	orrs	r3, r2
 80158a4:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 80158a6:	4b2b      	ldr	r3, [pc, #172]	@ (8015954 <FLASH_SetErrorCode+0x130>)
 80158a8:	699a      	ldr	r2, [r3, #24]
 80158aa:	2380      	movs	r3, #128	@ 0x80
 80158ac:	011b      	lsls	r3, r3, #4
 80158ae:	401a      	ands	r2, r3
 80158b0:	2380      	movs	r3, #128	@ 0x80
 80158b2:	011b      	lsls	r3, r3, #4
 80158b4:	429a      	cmp	r2, r3
 80158b6:	d10a      	bne.n	80158ce <FLASH_SetErrorCode+0xaa>
     *           cut of the STM32L031xx device or the first cut of the STM32L041xx
     *           device, this error should be ignored. The revId of the device
     *           can be retrieved via the HAL_GetREVID() function.
     *
     */
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 80158b8:	4b27      	ldr	r3, [pc, #156]	@ (8015958 <FLASH_SetErrorCode+0x134>)
 80158ba:	695b      	ldr	r3, [r3, #20]
 80158bc:	2204      	movs	r2, #4
 80158be:	431a      	orrs	r2, r3
 80158c0:	4b25      	ldr	r3, [pc, #148]	@ (8015958 <FLASH_SetErrorCode+0x134>)
 80158c2:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_OPTVERR;
 80158c4:	687b      	ldr	r3, [r7, #4]
 80158c6:	2280      	movs	r2, #128	@ 0x80
 80158c8:	0112      	lsls	r2, r2, #4
 80158ca:	4313      	orrs	r3, r2
 80158cc:	607b      	str	r3, [r7, #4]
  }

  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR))
 80158ce:	4b21      	ldr	r3, [pc, #132]	@ (8015954 <FLASH_SetErrorCode+0x130>)
 80158d0:	699a      	ldr	r2, [r3, #24]
 80158d2:	2380      	movs	r3, #128	@ 0x80
 80158d4:	019b      	lsls	r3, r3, #6
 80158d6:	401a      	ands	r2, r3
 80158d8:	2380      	movs	r3, #128	@ 0x80
 80158da:	019b      	lsls	r3, r3, #6
 80158dc:	429a      	cmp	r2, r3
 80158de:	d10a      	bne.n	80158f6 <FLASH_SetErrorCode+0xd2>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 80158e0:	4b1d      	ldr	r3, [pc, #116]	@ (8015958 <FLASH_SetErrorCode+0x134>)
 80158e2:	695b      	ldr	r3, [r3, #20]
 80158e4:	2210      	movs	r2, #16
 80158e6:	431a      	orrs	r2, r3
 80158e8:	4b1b      	ldr	r3, [pc, #108]	@ (8015958 <FLASH_SetErrorCode+0x134>)
 80158ea:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_RDERR;
 80158ec:	687b      	ldr	r3, [r7, #4]
 80158ee:	2280      	movs	r2, #128	@ 0x80
 80158f0:	0192      	lsls	r2, r2, #6
 80158f2:	4313      	orrs	r3, r2
 80158f4:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_FWWERR))
 80158f6:	4b17      	ldr	r3, [pc, #92]	@ (8015954 <FLASH_SetErrorCode+0x130>)
 80158f8:	699a      	ldr	r2, [r3, #24]
 80158fa:	2380      	movs	r3, #128	@ 0x80
 80158fc:	029b      	lsls	r3, r3, #10
 80158fe:	401a      	ands	r2, r3
 8015900:	2380      	movs	r3, #128	@ 0x80
 8015902:	029b      	lsls	r3, r3, #10
 8015904:	429a      	cmp	r2, r3
 8015906:	d109      	bne.n	801591c <FLASH_SetErrorCode+0xf8>
  { 
    pFlash.ErrorCode |= HAL_FLASH_ERROR_FWWERR;
 8015908:	4b13      	ldr	r3, [pc, #76]	@ (8015958 <FLASH_SetErrorCode+0x134>)
 801590a:	695b      	ldr	r3, [r3, #20]
 801590c:	2220      	movs	r2, #32
 801590e:	431a      	orrs	r2, r3
 8015910:	4b11      	ldr	r3, [pc, #68]	@ (8015958 <FLASH_SetErrorCode+0x134>)
 8015912:	615a      	str	r2, [r3, #20]
    flags |= HAL_FLASH_ERROR_FWWERR;
 8015914:	687b      	ldr	r3, [r7, #4]
 8015916:	2220      	movs	r2, #32
 8015918:	4313      	orrs	r3, r2
 801591a:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_NOTZEROERR))
 801591c:	4b0d      	ldr	r3, [pc, #52]	@ (8015954 <FLASH_SetErrorCode+0x130>)
 801591e:	699a      	ldr	r2, [r3, #24]
 8015920:	2380      	movs	r3, #128	@ 0x80
 8015922:	025b      	lsls	r3, r3, #9
 8015924:	401a      	ands	r2, r3
 8015926:	2380      	movs	r3, #128	@ 0x80
 8015928:	025b      	lsls	r3, r3, #9
 801592a:	429a      	cmp	r2, r3
 801592c:	d10a      	bne.n	8015944 <FLASH_SetErrorCode+0x120>
  { 
    pFlash.ErrorCode |= HAL_FLASH_ERROR_NOTZERO;
 801592e:	4b0a      	ldr	r3, [pc, #40]	@ (8015958 <FLASH_SetErrorCode+0x134>)
 8015930:	695b      	ldr	r3, [r3, #20]
 8015932:	2240      	movs	r2, #64	@ 0x40
 8015934:	431a      	orrs	r2, r3
 8015936:	4b08      	ldr	r3, [pc, #32]	@ (8015958 <FLASH_SetErrorCode+0x134>)
 8015938:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_NOTZEROERR;
 801593a:	687b      	ldr	r3, [r7, #4]
 801593c:	2280      	movs	r2, #128	@ 0x80
 801593e:	0252      	lsls	r2, r2, #9
 8015940:	4313      	orrs	r3, r2
 8015942:	607b      	str	r3, [r7, #4]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8015944:	4b03      	ldr	r3, [pc, #12]	@ (8015954 <FLASH_SetErrorCode+0x130>)
 8015946:	687a      	ldr	r2, [r7, #4]
 8015948:	619a      	str	r2, [r3, #24]
}  
 801594a:	46c0      	nop			@ (mov r8, r8)
 801594c:	46bd      	mov	sp, r7
 801594e:	b002      	add	sp, #8
 8015950:	bd80      	pop	{r7, pc}
 8015952:	46c0      	nop			@ (mov r8, r8)
 8015954:	40022000 	.word	0x40022000
 8015958:	2000251c 	.word	0x2000251c

0801595c <HAL_FLASHEx_DATAEEPROM_Unlock>:
/**
  * @brief  Unlocks the data memory and FLASH_PECR register access.
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_DATAEEPROM_Unlock(void)
{
 801595c:	b580      	push	{r7, lr}
 801595e:	b084      	sub	sp, #16
 8015960:	af00      	add	r7, sp, #0
  uint32_t primask_bit;

  if((FLASH->PECR & FLASH_PECR_PELOCK) != RESET)
 8015962:	4b12      	ldr	r3, [pc, #72]	@ (80159ac <HAL_FLASHEx_DATAEEPROM_Unlock+0x50>)
 8015964:	685b      	ldr	r3, [r3, #4]
 8015966:	2201      	movs	r2, #1
 8015968:	4013      	ands	r3, r2
 801596a:	d019      	beq.n	80159a0 <HAL_FLASHEx_DATAEEPROM_Unlock+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801596c:	f3ef 8310 	mrs	r3, PRIMASK
 8015970:	607b      	str	r3, [r7, #4]
  return(result);
 8015972:	687b      	ldr	r3, [r7, #4]
  {  
    /* Disable interrupts to avoid any interruption during unlock sequence */
    primask_bit = __get_PRIMASK();
 8015974:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 8015976:	b672      	cpsid	i
}
 8015978:	46c0      	nop			@ (mov r8, r8)
    __disable_irq();

    /* Unlocking the Data memory and FLASH_PECR register access*/
    FLASH->PEKEYR = FLASH_PEKEY1;
 801597a:	4b0c      	ldr	r3, [pc, #48]	@ (80159ac <HAL_FLASHEx_DATAEEPROM_Unlock+0x50>)
 801597c:	4a0c      	ldr	r2, [pc, #48]	@ (80159b0 <HAL_FLASHEx_DATAEEPROM_Unlock+0x54>)
 801597e:	60da      	str	r2, [r3, #12]
    FLASH->PEKEYR = FLASH_PEKEY2;
 8015980:	4b0a      	ldr	r3, [pc, #40]	@ (80159ac <HAL_FLASHEx_DATAEEPROM_Unlock+0x50>)
 8015982:	4a0c      	ldr	r2, [pc, #48]	@ (80159b4 <HAL_FLASHEx_DATAEEPROM_Unlock+0x58>)
 8015984:	60da      	str	r2, [r3, #12]
 8015986:	68fb      	ldr	r3, [r7, #12]
 8015988:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801598a:	68bb      	ldr	r3, [r7, #8]
 801598c:	f383 8810 	msr	PRIMASK, r3
}
 8015990:	46c0      	nop			@ (mov r8, r8)

    /* Re-enable the interrupts: restore previous priority mask */
    __set_PRIMASK(primask_bit);

    if((FLASH->PECR & FLASH_PECR_PELOCK) != RESET)
 8015992:	4b06      	ldr	r3, [pc, #24]	@ (80159ac <HAL_FLASHEx_DATAEEPROM_Unlock+0x50>)
 8015994:	685b      	ldr	r3, [r3, #4]
 8015996:	2201      	movs	r2, #1
 8015998:	4013      	ands	r3, r2
 801599a:	d001      	beq.n	80159a0 <HAL_FLASHEx_DATAEEPROM_Unlock+0x44>
    {
      return HAL_ERROR;
 801599c:	2301      	movs	r3, #1
 801599e:	e000      	b.n	80159a2 <HAL_FLASHEx_DATAEEPROM_Unlock+0x46>
    }
  }

  return HAL_OK;  
 80159a0:	2300      	movs	r3, #0
}
 80159a2:	0018      	movs	r0, r3
 80159a4:	46bd      	mov	sp, r7
 80159a6:	b004      	add	sp, #16
 80159a8:	bd80      	pop	{r7, pc}
 80159aa:	46c0      	nop			@ (mov r8, r8)
 80159ac:	40022000 	.word	0x40022000
 80159b0:	89abcdef 	.word	0x89abcdef
 80159b4:	02030405 	.word	0x02030405

080159b8 <HAL_FLASHEx_DATAEEPROM_Lock>:
/**
  * @brief  Locks the Data memory and FLASH_PECR register access.
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_DATAEEPROM_Lock(void)
{
 80159b8:	b580      	push	{r7, lr}
 80159ba:	af00      	add	r7, sp, #0
  /* Set the PELOCK Bit to lock the data memory and FLASH_PECR register access */
  SET_BIT(FLASH->PECR, FLASH_PECR_PELOCK);
 80159bc:	4b04      	ldr	r3, [pc, #16]	@ (80159d0 <HAL_FLASHEx_DATAEEPROM_Lock+0x18>)
 80159be:	685a      	ldr	r2, [r3, #4]
 80159c0:	4b03      	ldr	r3, [pc, #12]	@ (80159d0 <HAL_FLASHEx_DATAEEPROM_Lock+0x18>)
 80159c2:	2101      	movs	r1, #1
 80159c4:	430a      	orrs	r2, r1
 80159c6:	605a      	str	r2, [r3, #4]
  
  return HAL_OK;
 80159c8:	2300      	movs	r3, #0
}
 80159ca:	0018      	movs	r0, r3
 80159cc:	46bd      	mov	sp, r7
 80159ce:	bd80      	pop	{r7, pc}
 80159d0:	40022000 	.word	0x40022000

080159d4 <HAL_FLASHEx_DATAEEPROM_Erase>:
  *         and Flash program erase control register access(recommended to protect 
  *         the DATA_EEPROM against possible unwanted operation).
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_DATAEEPROM_Erase(uint32_t Address)
{
 80159d4:	b5b0      	push	{r4, r5, r7, lr}
 80159d6:	b084      	sub	sp, #16
 80159d8:	af00      	add	r7, sp, #0
 80159da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80159dc:	250f      	movs	r5, #15
 80159de:	197b      	adds	r3, r7, r5
 80159e0:	2200      	movs	r2, #0
 80159e2:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_FLASH_DATA_ADDRESS(Address));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80159e4:	197c      	adds	r4, r7, r5
 80159e6:	4b0f      	ldr	r3, [pc, #60]	@ (8015a24 <HAL_FLASHEx_DATAEEPROM_Erase+0x50>)
 80159e8:	0018      	movs	r0, r3
 80159ea:	f7ff fea9 	bl	8015740 <FLASH_WaitForLastOperation>
 80159ee:	0003      	movs	r3, r0
 80159f0:	7023      	strb	r3, [r4, #0]
  
  if(status == HAL_OK)
 80159f2:	0029      	movs	r1, r5
 80159f4:	187b      	adds	r3, r7, r1
 80159f6:	781b      	ldrb	r3, [r3, #0]
 80159f8:	2b00      	cmp	r3, #0
 80159fa:	d10c      	bne.n	8015a16 <HAL_FLASHEx_DATAEEPROM_Erase+0x42>
  {
    /* Clean the error context */
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80159fc:	4b0a      	ldr	r3, [pc, #40]	@ (8015a28 <HAL_FLASHEx_DATAEEPROM_Erase+0x54>)
 80159fe:	2200      	movs	r2, #0
 8015a00:	615a      	str	r2, [r3, #20]

      /* Write 00000000h to valid address in the data memory */
      *(__IO uint32_t *) Address = 0x00000000U;
 8015a02:	687b      	ldr	r3, [r7, #4]
 8015a04:	2200      	movs	r2, #0
 8015a06:	601a      	str	r2, [r3, #0]

    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8015a08:	187c      	adds	r4, r7, r1
 8015a0a:	4b06      	ldr	r3, [pc, #24]	@ (8015a24 <HAL_FLASHEx_DATAEEPROM_Erase+0x50>)
 8015a0c:	0018      	movs	r0, r3
 8015a0e:	f7ff fe97 	bl	8015740 <FLASH_WaitForLastOperation>
 8015a12:	0003      	movs	r3, r0
 8015a14:	7023      	strb	r3, [r4, #0]
  }
   
  /* Return the erase status */
  return status;
 8015a16:	230f      	movs	r3, #15
 8015a18:	18fb      	adds	r3, r7, r3
 8015a1a:	781b      	ldrb	r3, [r3, #0]
}  
 8015a1c:	0018      	movs	r0, r3
 8015a1e:	46bd      	mov	sp, r7
 8015a20:	b004      	add	sp, #16
 8015a22:	bdb0      	pop	{r4, r5, r7, pc}
 8015a24:	0000c350 	.word	0x0000c350
 8015a28:	2000251c 	.word	0x2000251c

08015a2c <HAL_FLASHEx_DATAEEPROM_Program>:
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */

HAL_StatusTypeDef   HAL_FLASHEx_DATAEEPROM_Program(uint32_t TypeProgram, uint32_t Address, uint32_t Data)
{
 8015a2c:	b5b0      	push	{r4, r5, r7, lr}
 8015a2e:	b086      	sub	sp, #24
 8015a30:	af00      	add	r7, sp, #0
 8015a32:	60f8      	str	r0, [r7, #12]
 8015a34:	60b9      	str	r1, [r7, #8]
 8015a36:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8015a38:	2317      	movs	r3, #23
 8015a3a:	18fb      	adds	r3, r7, r3
 8015a3c:	2201      	movs	r2, #1
 8015a3e:	701a      	strb	r2, [r3, #0]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8015a40:	4b24      	ldr	r3, [pc, #144]	@ (8015ad4 <HAL_FLASHEx_DATAEEPROM_Program+0xa8>)
 8015a42:	7c1b      	ldrb	r3, [r3, #16]
 8015a44:	2b01      	cmp	r3, #1
 8015a46:	d101      	bne.n	8015a4c <HAL_FLASHEx_DATAEEPROM_Program+0x20>
 8015a48:	2302      	movs	r3, #2
 8015a4a:	e03e      	b.n	8015aca <HAL_FLASHEx_DATAEEPROM_Program+0x9e>
 8015a4c:	4b21      	ldr	r3, [pc, #132]	@ (8015ad4 <HAL_FLASHEx_DATAEEPROM_Program+0xa8>)
 8015a4e:	2201      	movs	r2, #1
 8015a50:	741a      	strb	r2, [r3, #16]
  /* Check the parameters */
  assert_param(IS_TYPEPROGRAMDATA(TypeProgram));
  assert_param(IS_FLASH_DATA_ADDRESS(Address));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8015a52:	2517      	movs	r5, #23
 8015a54:	197c      	adds	r4, r7, r5
 8015a56:	4b20      	ldr	r3, [pc, #128]	@ (8015ad8 <HAL_FLASHEx_DATAEEPROM_Program+0xac>)
 8015a58:	0018      	movs	r0, r3
 8015a5a:	f7ff fe71 	bl	8015740 <FLASH_WaitForLastOperation>
 8015a5e:	0003      	movs	r3, r0
 8015a60:	7023      	strb	r3, [r4, #0]
  
  if(status == HAL_OK)
 8015a62:	197b      	adds	r3, r7, r5
 8015a64:	781b      	ldrb	r3, [r3, #0]
 8015a66:	2b00      	cmp	r3, #0
 8015a68:	d129      	bne.n	8015abe <HAL_FLASHEx_DATAEEPROM_Program+0x92>
  {
    /* Clean the error context */
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8015a6a:	4b1a      	ldr	r3, [pc, #104]	@ (8015ad4 <HAL_FLASHEx_DATAEEPROM_Program+0xa8>)
 8015a6c:	2200      	movs	r2, #0
 8015a6e:	615a      	str	r2, [r3, #20]

    if(TypeProgram == FLASH_TYPEPROGRAMDATA_WORD)
 8015a70:	68fb      	ldr	r3, [r7, #12]
 8015a72:	2b02      	cmp	r3, #2
 8015a74:	d103      	bne.n	8015a7e <HAL_FLASHEx_DATAEEPROM_Program+0x52>
    {
      /* Program word (32-bit) at a specified address.*/
      *(__IO uint32_t *)Address = Data;
 8015a76:	68bb      	ldr	r3, [r7, #8]
 8015a78:	687a      	ldr	r2, [r7, #4]
 8015a7a:	601a      	str	r2, [r3, #0]
 8015a7c:	e013      	b.n	8015aa6 <HAL_FLASHEx_DATAEEPROM_Program+0x7a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAMDATA_HALFWORD)
 8015a7e:	68fb      	ldr	r3, [r7, #12]
 8015a80:	2b01      	cmp	r3, #1
 8015a82:	d104      	bne.n	8015a8e <HAL_FLASHEx_DATAEEPROM_Program+0x62>
    {
      /* Program halfword (16-bit) at a specified address.*/
      *(__IO uint16_t *)Address = (uint16_t) Data;
 8015a84:	68bb      	ldr	r3, [r7, #8]
 8015a86:	687a      	ldr	r2, [r7, #4]
 8015a88:	b292      	uxth	r2, r2
 8015a8a:	801a      	strh	r2, [r3, #0]
 8015a8c:	e00b      	b.n	8015aa6 <HAL_FLASHEx_DATAEEPROM_Program+0x7a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAMDATA_BYTE)
 8015a8e:	68fb      	ldr	r3, [r7, #12]
 8015a90:	2b00      	cmp	r3, #0
 8015a92:	d104      	bne.n	8015a9e <HAL_FLASHEx_DATAEEPROM_Program+0x72>
    {
      /* Program byte (8-bit) at a specified address.*/
      *(__IO uint8_t *)Address = (uint8_t) Data;
 8015a94:	68bb      	ldr	r3, [r7, #8]
 8015a96:	687a      	ldr	r2, [r7, #4]
 8015a98:	b2d2      	uxtb	r2, r2
 8015a9a:	701a      	strb	r2, [r3, #0]
 8015a9c:	e003      	b.n	8015aa6 <HAL_FLASHEx_DATAEEPROM_Program+0x7a>
    }
    else
    {
      status = HAL_ERROR;
 8015a9e:	2317      	movs	r3, #23
 8015aa0:	18fb      	adds	r3, r7, r3
 8015aa2:	2201      	movs	r2, #1
 8015aa4:	701a      	strb	r2, [r3, #0]
    }

    if (status == HAL_OK)
 8015aa6:	2217      	movs	r2, #23
 8015aa8:	18bb      	adds	r3, r7, r2
 8015aaa:	781b      	ldrb	r3, [r3, #0]
 8015aac:	2b00      	cmp	r3, #0
 8015aae:	d106      	bne.n	8015abe <HAL_FLASHEx_DATAEEPROM_Program+0x92>
    {
      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8015ab0:	18bc      	adds	r4, r7, r2
 8015ab2:	4b09      	ldr	r3, [pc, #36]	@ (8015ad8 <HAL_FLASHEx_DATAEEPROM_Program+0xac>)
 8015ab4:	0018      	movs	r0, r3
 8015ab6:	f7ff fe43 	bl	8015740 <FLASH_WaitForLastOperation>
 8015aba:	0003      	movs	r3, r0
 8015abc:	7023      	strb	r3, [r4, #0]
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8015abe:	4b05      	ldr	r3, [pc, #20]	@ (8015ad4 <HAL_FLASHEx_DATAEEPROM_Program+0xa8>)
 8015ac0:	2200      	movs	r2, #0
 8015ac2:	741a      	strb	r2, [r3, #16]

  return status;
 8015ac4:	2317      	movs	r3, #23
 8015ac6:	18fb      	adds	r3, r7, r3
 8015ac8:	781b      	ldrb	r3, [r3, #0]
}
 8015aca:	0018      	movs	r0, r3
 8015acc:	46bd      	mov	sp, r7
 8015ace:	b006      	add	sp, #24
 8015ad0:	bdb0      	pop	{r4, r5, r7, pc}
 8015ad2:	46c0      	nop			@ (mov r8, r8)
 8015ad4:	2000251c 	.word	0x2000251c
 8015ad8:	0000c350 	.word	0x0000c350

08015adc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8015adc:	b580      	push	{r7, lr}
 8015ade:	b086      	sub	sp, #24
 8015ae0:	af00      	add	r7, sp, #0
 8015ae2:	6078      	str	r0, [r7, #4]
 8015ae4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8015ae6:	2300      	movs	r3, #0
 8015ae8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8015aea:	2300      	movs	r3, #0
 8015aec:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8015aee:	2300      	movs	r3, #0
 8015af0:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8015af2:	e155      	b.n	8015da0 <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8015af4:	683b      	ldr	r3, [r7, #0]
 8015af6:	681b      	ldr	r3, [r3, #0]
 8015af8:	2101      	movs	r1, #1
 8015afa:	697a      	ldr	r2, [r7, #20]
 8015afc:	4091      	lsls	r1, r2
 8015afe:	000a      	movs	r2, r1
 8015b00:	4013      	ands	r3, r2
 8015b02:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8015b04:	68fb      	ldr	r3, [r7, #12]
 8015b06:	2b00      	cmp	r3, #0
 8015b08:	d100      	bne.n	8015b0c <HAL_GPIO_Init+0x30>
 8015b0a:	e146      	b.n	8015d9a <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8015b0c:	683b      	ldr	r3, [r7, #0]
 8015b0e:	685b      	ldr	r3, [r3, #4]
 8015b10:	2203      	movs	r2, #3
 8015b12:	4013      	ands	r3, r2
 8015b14:	2b01      	cmp	r3, #1
 8015b16:	d005      	beq.n	8015b24 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8015b18:	683b      	ldr	r3, [r7, #0]
 8015b1a:	685b      	ldr	r3, [r3, #4]
 8015b1c:	2203      	movs	r2, #3
 8015b1e:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8015b20:	2b02      	cmp	r3, #2
 8015b22:	d130      	bne.n	8015b86 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8015b24:	687b      	ldr	r3, [r7, #4]
 8015b26:	689b      	ldr	r3, [r3, #8]
 8015b28:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8015b2a:	697b      	ldr	r3, [r7, #20]
 8015b2c:	005b      	lsls	r3, r3, #1
 8015b2e:	2203      	movs	r2, #3
 8015b30:	409a      	lsls	r2, r3
 8015b32:	0013      	movs	r3, r2
 8015b34:	43da      	mvns	r2, r3
 8015b36:	693b      	ldr	r3, [r7, #16]
 8015b38:	4013      	ands	r3, r2
 8015b3a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8015b3c:	683b      	ldr	r3, [r7, #0]
 8015b3e:	68da      	ldr	r2, [r3, #12]
 8015b40:	697b      	ldr	r3, [r7, #20]
 8015b42:	005b      	lsls	r3, r3, #1
 8015b44:	409a      	lsls	r2, r3
 8015b46:	0013      	movs	r3, r2
 8015b48:	693a      	ldr	r2, [r7, #16]
 8015b4a:	4313      	orrs	r3, r2
 8015b4c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8015b4e:	687b      	ldr	r3, [r7, #4]
 8015b50:	693a      	ldr	r2, [r7, #16]
 8015b52:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8015b54:	687b      	ldr	r3, [r7, #4]
 8015b56:	685b      	ldr	r3, [r3, #4]
 8015b58:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8015b5a:	2201      	movs	r2, #1
 8015b5c:	697b      	ldr	r3, [r7, #20]
 8015b5e:	409a      	lsls	r2, r3
 8015b60:	0013      	movs	r3, r2
 8015b62:	43da      	mvns	r2, r3
 8015b64:	693b      	ldr	r3, [r7, #16]
 8015b66:	4013      	ands	r3, r2
 8015b68:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8015b6a:	683b      	ldr	r3, [r7, #0]
 8015b6c:	685b      	ldr	r3, [r3, #4]
 8015b6e:	091b      	lsrs	r3, r3, #4
 8015b70:	2201      	movs	r2, #1
 8015b72:	401a      	ands	r2, r3
 8015b74:	697b      	ldr	r3, [r7, #20]
 8015b76:	409a      	lsls	r2, r3
 8015b78:	0013      	movs	r3, r2
 8015b7a:	693a      	ldr	r2, [r7, #16]
 8015b7c:	4313      	orrs	r3, r2
 8015b7e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8015b80:	687b      	ldr	r3, [r7, #4]
 8015b82:	693a      	ldr	r2, [r7, #16]
 8015b84:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8015b86:	683b      	ldr	r3, [r7, #0]
 8015b88:	685b      	ldr	r3, [r3, #4]
 8015b8a:	2203      	movs	r2, #3
 8015b8c:	4013      	ands	r3, r2
 8015b8e:	2b03      	cmp	r3, #3
 8015b90:	d017      	beq.n	8015bc2 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8015b92:	687b      	ldr	r3, [r7, #4]
 8015b94:	68db      	ldr	r3, [r3, #12]
 8015b96:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8015b98:	697b      	ldr	r3, [r7, #20]
 8015b9a:	005b      	lsls	r3, r3, #1
 8015b9c:	2203      	movs	r2, #3
 8015b9e:	409a      	lsls	r2, r3
 8015ba0:	0013      	movs	r3, r2
 8015ba2:	43da      	mvns	r2, r3
 8015ba4:	693b      	ldr	r3, [r7, #16]
 8015ba6:	4013      	ands	r3, r2
 8015ba8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8015baa:	683b      	ldr	r3, [r7, #0]
 8015bac:	689a      	ldr	r2, [r3, #8]
 8015bae:	697b      	ldr	r3, [r7, #20]
 8015bb0:	005b      	lsls	r3, r3, #1
 8015bb2:	409a      	lsls	r2, r3
 8015bb4:	0013      	movs	r3, r2
 8015bb6:	693a      	ldr	r2, [r7, #16]
 8015bb8:	4313      	orrs	r3, r2
 8015bba:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8015bbc:	687b      	ldr	r3, [r7, #4]
 8015bbe:	693a      	ldr	r2, [r7, #16]
 8015bc0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8015bc2:	683b      	ldr	r3, [r7, #0]
 8015bc4:	685b      	ldr	r3, [r3, #4]
 8015bc6:	2203      	movs	r2, #3
 8015bc8:	4013      	ands	r3, r2
 8015bca:	2b02      	cmp	r3, #2
 8015bcc:	d123      	bne.n	8015c16 <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8015bce:	697b      	ldr	r3, [r7, #20]
 8015bd0:	08da      	lsrs	r2, r3, #3
 8015bd2:	687b      	ldr	r3, [r7, #4]
 8015bd4:	3208      	adds	r2, #8
 8015bd6:	0092      	lsls	r2, r2, #2
 8015bd8:	58d3      	ldr	r3, [r2, r3]
 8015bda:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8015bdc:	697b      	ldr	r3, [r7, #20]
 8015bde:	2207      	movs	r2, #7
 8015be0:	4013      	ands	r3, r2
 8015be2:	009b      	lsls	r3, r3, #2
 8015be4:	220f      	movs	r2, #15
 8015be6:	409a      	lsls	r2, r3
 8015be8:	0013      	movs	r3, r2
 8015bea:	43da      	mvns	r2, r3
 8015bec:	693b      	ldr	r3, [r7, #16]
 8015bee:	4013      	ands	r3, r2
 8015bf0:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8015bf2:	683b      	ldr	r3, [r7, #0]
 8015bf4:	691a      	ldr	r2, [r3, #16]
 8015bf6:	697b      	ldr	r3, [r7, #20]
 8015bf8:	2107      	movs	r1, #7
 8015bfa:	400b      	ands	r3, r1
 8015bfc:	009b      	lsls	r3, r3, #2
 8015bfe:	409a      	lsls	r2, r3
 8015c00:	0013      	movs	r3, r2
 8015c02:	693a      	ldr	r2, [r7, #16]
 8015c04:	4313      	orrs	r3, r2
 8015c06:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8015c08:	697b      	ldr	r3, [r7, #20]
 8015c0a:	08da      	lsrs	r2, r3, #3
 8015c0c:	687b      	ldr	r3, [r7, #4]
 8015c0e:	3208      	adds	r2, #8
 8015c10:	0092      	lsls	r2, r2, #2
 8015c12:	6939      	ldr	r1, [r7, #16]
 8015c14:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8015c16:	687b      	ldr	r3, [r7, #4]
 8015c18:	681b      	ldr	r3, [r3, #0]
 8015c1a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8015c1c:	697b      	ldr	r3, [r7, #20]
 8015c1e:	005b      	lsls	r3, r3, #1
 8015c20:	2203      	movs	r2, #3
 8015c22:	409a      	lsls	r2, r3
 8015c24:	0013      	movs	r3, r2
 8015c26:	43da      	mvns	r2, r3
 8015c28:	693b      	ldr	r3, [r7, #16]
 8015c2a:	4013      	ands	r3, r2
 8015c2c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8015c2e:	683b      	ldr	r3, [r7, #0]
 8015c30:	685b      	ldr	r3, [r3, #4]
 8015c32:	2203      	movs	r2, #3
 8015c34:	401a      	ands	r2, r3
 8015c36:	697b      	ldr	r3, [r7, #20]
 8015c38:	005b      	lsls	r3, r3, #1
 8015c3a:	409a      	lsls	r2, r3
 8015c3c:	0013      	movs	r3, r2
 8015c3e:	693a      	ldr	r2, [r7, #16]
 8015c40:	4313      	orrs	r3, r2
 8015c42:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8015c44:	687b      	ldr	r3, [r7, #4]
 8015c46:	693a      	ldr	r2, [r7, #16]
 8015c48:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8015c4a:	683b      	ldr	r3, [r7, #0]
 8015c4c:	685a      	ldr	r2, [r3, #4]
 8015c4e:	23c0      	movs	r3, #192	@ 0xc0
 8015c50:	029b      	lsls	r3, r3, #10
 8015c52:	4013      	ands	r3, r2
 8015c54:	d100      	bne.n	8015c58 <HAL_GPIO_Init+0x17c>
 8015c56:	e0a0      	b.n	8015d9a <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8015c58:	4b57      	ldr	r3, [pc, #348]	@ (8015db8 <HAL_GPIO_Init+0x2dc>)
 8015c5a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8015c5c:	4b56      	ldr	r3, [pc, #344]	@ (8015db8 <HAL_GPIO_Init+0x2dc>)
 8015c5e:	2101      	movs	r1, #1
 8015c60:	430a      	orrs	r2, r1
 8015c62:	635a      	str	r2, [r3, #52]	@ 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8015c64:	4a55      	ldr	r2, [pc, #340]	@ (8015dbc <HAL_GPIO_Init+0x2e0>)
 8015c66:	697b      	ldr	r3, [r7, #20]
 8015c68:	089b      	lsrs	r3, r3, #2
 8015c6a:	3302      	adds	r3, #2
 8015c6c:	009b      	lsls	r3, r3, #2
 8015c6e:	589b      	ldr	r3, [r3, r2]
 8015c70:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8015c72:	697b      	ldr	r3, [r7, #20]
 8015c74:	2203      	movs	r2, #3
 8015c76:	4013      	ands	r3, r2
 8015c78:	009b      	lsls	r3, r3, #2
 8015c7a:	220f      	movs	r2, #15
 8015c7c:	409a      	lsls	r2, r3
 8015c7e:	0013      	movs	r3, r2
 8015c80:	43da      	mvns	r2, r3
 8015c82:	693b      	ldr	r3, [r7, #16]
 8015c84:	4013      	ands	r3, r2
 8015c86:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8015c88:	687a      	ldr	r2, [r7, #4]
 8015c8a:	23a0      	movs	r3, #160	@ 0xa0
 8015c8c:	05db      	lsls	r3, r3, #23
 8015c8e:	429a      	cmp	r2, r3
 8015c90:	d01f      	beq.n	8015cd2 <HAL_GPIO_Init+0x1f6>
 8015c92:	687b      	ldr	r3, [r7, #4]
 8015c94:	4a4a      	ldr	r2, [pc, #296]	@ (8015dc0 <HAL_GPIO_Init+0x2e4>)
 8015c96:	4293      	cmp	r3, r2
 8015c98:	d019      	beq.n	8015cce <HAL_GPIO_Init+0x1f2>
 8015c9a:	687b      	ldr	r3, [r7, #4]
 8015c9c:	4a49      	ldr	r2, [pc, #292]	@ (8015dc4 <HAL_GPIO_Init+0x2e8>)
 8015c9e:	4293      	cmp	r3, r2
 8015ca0:	d013      	beq.n	8015cca <HAL_GPIO_Init+0x1ee>
 8015ca2:	687b      	ldr	r3, [r7, #4]
 8015ca4:	4a48      	ldr	r2, [pc, #288]	@ (8015dc8 <HAL_GPIO_Init+0x2ec>)
 8015ca6:	4293      	cmp	r3, r2
 8015ca8:	d00d      	beq.n	8015cc6 <HAL_GPIO_Init+0x1ea>
 8015caa:	687b      	ldr	r3, [r7, #4]
 8015cac:	4a47      	ldr	r2, [pc, #284]	@ (8015dcc <HAL_GPIO_Init+0x2f0>)
 8015cae:	4293      	cmp	r3, r2
 8015cb0:	d007      	beq.n	8015cc2 <HAL_GPIO_Init+0x1e6>
 8015cb2:	687b      	ldr	r3, [r7, #4]
 8015cb4:	4a46      	ldr	r2, [pc, #280]	@ (8015dd0 <HAL_GPIO_Init+0x2f4>)
 8015cb6:	4293      	cmp	r3, r2
 8015cb8:	d101      	bne.n	8015cbe <HAL_GPIO_Init+0x1e2>
 8015cba:	2305      	movs	r3, #5
 8015cbc:	e00a      	b.n	8015cd4 <HAL_GPIO_Init+0x1f8>
 8015cbe:	2306      	movs	r3, #6
 8015cc0:	e008      	b.n	8015cd4 <HAL_GPIO_Init+0x1f8>
 8015cc2:	2304      	movs	r3, #4
 8015cc4:	e006      	b.n	8015cd4 <HAL_GPIO_Init+0x1f8>
 8015cc6:	2303      	movs	r3, #3
 8015cc8:	e004      	b.n	8015cd4 <HAL_GPIO_Init+0x1f8>
 8015cca:	2302      	movs	r3, #2
 8015ccc:	e002      	b.n	8015cd4 <HAL_GPIO_Init+0x1f8>
 8015cce:	2301      	movs	r3, #1
 8015cd0:	e000      	b.n	8015cd4 <HAL_GPIO_Init+0x1f8>
 8015cd2:	2300      	movs	r3, #0
 8015cd4:	697a      	ldr	r2, [r7, #20]
 8015cd6:	2103      	movs	r1, #3
 8015cd8:	400a      	ands	r2, r1
 8015cda:	0092      	lsls	r2, r2, #2
 8015cdc:	4093      	lsls	r3, r2
 8015cde:	693a      	ldr	r2, [r7, #16]
 8015ce0:	4313      	orrs	r3, r2
 8015ce2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8015ce4:	4935      	ldr	r1, [pc, #212]	@ (8015dbc <HAL_GPIO_Init+0x2e0>)
 8015ce6:	697b      	ldr	r3, [r7, #20]
 8015ce8:	089b      	lsrs	r3, r3, #2
 8015cea:	3302      	adds	r3, #2
 8015cec:	009b      	lsls	r3, r3, #2
 8015cee:	693a      	ldr	r2, [r7, #16]
 8015cf0:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8015cf2:	4b38      	ldr	r3, [pc, #224]	@ (8015dd4 <HAL_GPIO_Init+0x2f8>)
 8015cf4:	689b      	ldr	r3, [r3, #8]
 8015cf6:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8015cf8:	68fb      	ldr	r3, [r7, #12]
 8015cfa:	43da      	mvns	r2, r3
 8015cfc:	693b      	ldr	r3, [r7, #16]
 8015cfe:	4013      	ands	r3, r2
 8015d00:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8015d02:	683b      	ldr	r3, [r7, #0]
 8015d04:	685a      	ldr	r2, [r3, #4]
 8015d06:	2380      	movs	r3, #128	@ 0x80
 8015d08:	035b      	lsls	r3, r3, #13
 8015d0a:	4013      	ands	r3, r2
 8015d0c:	d003      	beq.n	8015d16 <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 8015d0e:	693a      	ldr	r2, [r7, #16]
 8015d10:	68fb      	ldr	r3, [r7, #12]
 8015d12:	4313      	orrs	r3, r2
 8015d14:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8015d16:	4b2f      	ldr	r3, [pc, #188]	@ (8015dd4 <HAL_GPIO_Init+0x2f8>)
 8015d18:	693a      	ldr	r2, [r7, #16]
 8015d1a:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8015d1c:	4b2d      	ldr	r3, [pc, #180]	@ (8015dd4 <HAL_GPIO_Init+0x2f8>)
 8015d1e:	68db      	ldr	r3, [r3, #12]
 8015d20:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8015d22:	68fb      	ldr	r3, [r7, #12]
 8015d24:	43da      	mvns	r2, r3
 8015d26:	693b      	ldr	r3, [r7, #16]
 8015d28:	4013      	ands	r3, r2
 8015d2a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8015d2c:	683b      	ldr	r3, [r7, #0]
 8015d2e:	685a      	ldr	r2, [r3, #4]
 8015d30:	2380      	movs	r3, #128	@ 0x80
 8015d32:	039b      	lsls	r3, r3, #14
 8015d34:	4013      	ands	r3, r2
 8015d36:	d003      	beq.n	8015d40 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8015d38:	693a      	ldr	r2, [r7, #16]
 8015d3a:	68fb      	ldr	r3, [r7, #12]
 8015d3c:	4313      	orrs	r3, r2
 8015d3e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8015d40:	4b24      	ldr	r3, [pc, #144]	@ (8015dd4 <HAL_GPIO_Init+0x2f8>)
 8015d42:	693a      	ldr	r2, [r7, #16]
 8015d44:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 8015d46:	4b23      	ldr	r3, [pc, #140]	@ (8015dd4 <HAL_GPIO_Init+0x2f8>)
 8015d48:	685b      	ldr	r3, [r3, #4]
 8015d4a:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8015d4c:	68fb      	ldr	r3, [r7, #12]
 8015d4e:	43da      	mvns	r2, r3
 8015d50:	693b      	ldr	r3, [r7, #16]
 8015d52:	4013      	ands	r3, r2
 8015d54:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8015d56:	683b      	ldr	r3, [r7, #0]
 8015d58:	685a      	ldr	r2, [r3, #4]
 8015d5a:	2380      	movs	r3, #128	@ 0x80
 8015d5c:	029b      	lsls	r3, r3, #10
 8015d5e:	4013      	ands	r3, r2
 8015d60:	d003      	beq.n	8015d6a <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 8015d62:	693a      	ldr	r2, [r7, #16]
 8015d64:	68fb      	ldr	r3, [r7, #12]
 8015d66:	4313      	orrs	r3, r2
 8015d68:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8015d6a:	4b1a      	ldr	r3, [pc, #104]	@ (8015dd4 <HAL_GPIO_Init+0x2f8>)
 8015d6c:	693a      	ldr	r2, [r7, #16]
 8015d6e:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8015d70:	4b18      	ldr	r3, [pc, #96]	@ (8015dd4 <HAL_GPIO_Init+0x2f8>)
 8015d72:	681b      	ldr	r3, [r3, #0]
 8015d74:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8015d76:	68fb      	ldr	r3, [r7, #12]
 8015d78:	43da      	mvns	r2, r3
 8015d7a:	693b      	ldr	r3, [r7, #16]
 8015d7c:	4013      	ands	r3, r2
 8015d7e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8015d80:	683b      	ldr	r3, [r7, #0]
 8015d82:	685a      	ldr	r2, [r3, #4]
 8015d84:	2380      	movs	r3, #128	@ 0x80
 8015d86:	025b      	lsls	r3, r3, #9
 8015d88:	4013      	ands	r3, r2
 8015d8a:	d003      	beq.n	8015d94 <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 8015d8c:	693a      	ldr	r2, [r7, #16]
 8015d8e:	68fb      	ldr	r3, [r7, #12]
 8015d90:	4313      	orrs	r3, r2
 8015d92:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8015d94:	4b0f      	ldr	r3, [pc, #60]	@ (8015dd4 <HAL_GPIO_Init+0x2f8>)
 8015d96:	693a      	ldr	r2, [r7, #16]
 8015d98:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 8015d9a:	697b      	ldr	r3, [r7, #20]
 8015d9c:	3301      	adds	r3, #1
 8015d9e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8015da0:	683b      	ldr	r3, [r7, #0]
 8015da2:	681a      	ldr	r2, [r3, #0]
 8015da4:	697b      	ldr	r3, [r7, #20]
 8015da6:	40da      	lsrs	r2, r3
 8015da8:	1e13      	subs	r3, r2, #0
 8015daa:	d000      	beq.n	8015dae <HAL_GPIO_Init+0x2d2>
 8015dac:	e6a2      	b.n	8015af4 <HAL_GPIO_Init+0x18>
  }
}
 8015dae:	46c0      	nop			@ (mov r8, r8)
 8015db0:	46c0      	nop			@ (mov r8, r8)
 8015db2:	46bd      	mov	sp, r7
 8015db4:	b006      	add	sp, #24
 8015db6:	bd80      	pop	{r7, pc}
 8015db8:	40021000 	.word	0x40021000
 8015dbc:	40010000 	.word	0x40010000
 8015dc0:	50000400 	.word	0x50000400
 8015dc4:	50000800 	.word	0x50000800
 8015dc8:	50000c00 	.word	0x50000c00
 8015dcc:	50001000 	.word	0x50001000
 8015dd0:	50001c00 	.word	0x50001c00
 8015dd4:	40010400 	.word	0x40010400

08015dd8 <HAL_GPIO_ReadPin>:
  *                   This parameter can be GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8015dd8:	b580      	push	{r7, lr}
 8015dda:	b084      	sub	sp, #16
 8015ddc:	af00      	add	r7, sp, #0
 8015dde:	6078      	str	r0, [r7, #4]
 8015de0:	000a      	movs	r2, r1
 8015de2:	1cbb      	adds	r3, r7, #2
 8015de4:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8015de6:	687b      	ldr	r3, [r7, #4]
 8015de8:	691b      	ldr	r3, [r3, #16]
 8015dea:	1cba      	adds	r2, r7, #2
 8015dec:	8812      	ldrh	r2, [r2, #0]
 8015dee:	4013      	ands	r3, r2
 8015df0:	d004      	beq.n	8015dfc <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8015df2:	230f      	movs	r3, #15
 8015df4:	18fb      	adds	r3, r7, r3
 8015df6:	2201      	movs	r2, #1
 8015df8:	701a      	strb	r2, [r3, #0]
 8015dfa:	e003      	b.n	8015e04 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8015dfc:	230f      	movs	r3, #15
 8015dfe:	18fb      	adds	r3, r7, r3
 8015e00:	2200      	movs	r2, #0
 8015e02:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8015e04:	230f      	movs	r3, #15
 8015e06:	18fb      	adds	r3, r7, r3
 8015e08:	781b      	ldrb	r3, [r3, #0]
}
 8015e0a:	0018      	movs	r0, r3
 8015e0c:	46bd      	mov	sp, r7
 8015e0e:	b004      	add	sp, #16
 8015e10:	bd80      	pop	{r7, pc}

08015e12 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8015e12:	b580      	push	{r7, lr}
 8015e14:	b082      	sub	sp, #8
 8015e16:	af00      	add	r7, sp, #0
 8015e18:	6078      	str	r0, [r7, #4]
 8015e1a:	0008      	movs	r0, r1
 8015e1c:	0011      	movs	r1, r2
 8015e1e:	1cbb      	adds	r3, r7, #2
 8015e20:	1c02      	adds	r2, r0, #0
 8015e22:	801a      	strh	r2, [r3, #0]
 8015e24:	1c7b      	adds	r3, r7, #1
 8015e26:	1c0a      	adds	r2, r1, #0
 8015e28:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8015e2a:	1c7b      	adds	r3, r7, #1
 8015e2c:	781b      	ldrb	r3, [r3, #0]
 8015e2e:	2b00      	cmp	r3, #0
 8015e30:	d004      	beq.n	8015e3c <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8015e32:	1cbb      	adds	r3, r7, #2
 8015e34:	881a      	ldrh	r2, [r3, #0]
 8015e36:	687b      	ldr	r3, [r7, #4]
 8015e38:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8015e3a:	e003      	b.n	8015e44 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8015e3c:	1cbb      	adds	r3, r7, #2
 8015e3e:	881a      	ldrh	r2, [r3, #0]
 8015e40:	687b      	ldr	r3, [r7, #4]
 8015e42:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8015e44:	46c0      	nop			@ (mov r8, r8)
 8015e46:	46bd      	mov	sp, r7
 8015e48:	b002      	add	sp, #8
 8015e4a:	bd80      	pop	{r7, pc}

08015e4c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected to the EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8015e4c:	b580      	push	{r7, lr}
 8015e4e:	b082      	sub	sp, #8
 8015e50:	af00      	add	r7, sp, #0
 8015e52:	0002      	movs	r2, r0
 8015e54:	1dbb      	adds	r3, r7, #6
 8015e56:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8015e58:	4b09      	ldr	r3, [pc, #36]	@ (8015e80 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8015e5a:	695b      	ldr	r3, [r3, #20]
 8015e5c:	1dba      	adds	r2, r7, #6
 8015e5e:	8812      	ldrh	r2, [r2, #0]
 8015e60:	4013      	ands	r3, r2
 8015e62:	d008      	beq.n	8015e76 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8015e64:	4b06      	ldr	r3, [pc, #24]	@ (8015e80 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8015e66:	1dba      	adds	r2, r7, #6
 8015e68:	8812      	ldrh	r2, [r2, #0]
 8015e6a:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8015e6c:	1dbb      	adds	r3, r7, #6
 8015e6e:	881b      	ldrh	r3, [r3, #0]
 8015e70:	0018      	movs	r0, r3
 8015e72:	f7f7 fa7b 	bl	800d36c <HAL_GPIO_EXTI_Callback>
  }
}
 8015e76:	46c0      	nop			@ (mov r8, r8)
 8015e78:	46bd      	mov	sp, r7
 8015e7a:	b002      	add	sp, #8
 8015e7c:	bd80      	pop	{r7, pc}
 8015e7e:	46c0      	nop			@ (mov r8, r8)
 8015e80:	40010400 	.word	0x40010400

08015e84 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8015e84:	b580      	push	{r7, lr}
 8015e86:	b082      	sub	sp, #8
 8015e88:	af00      	add	r7, sp, #0
 8015e8a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8015e8c:	687b      	ldr	r3, [r7, #4]
 8015e8e:	2b00      	cmp	r3, #0
 8015e90:	d101      	bne.n	8015e96 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8015e92:	2301      	movs	r3, #1
 8015e94:	e082      	b.n	8015f9c <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8015e96:	687b      	ldr	r3, [r7, #4]
 8015e98:	2241      	movs	r2, #65	@ 0x41
 8015e9a:	5c9b      	ldrb	r3, [r3, r2]
 8015e9c:	b2db      	uxtb	r3, r3
 8015e9e:	2b00      	cmp	r3, #0
 8015ea0:	d107      	bne.n	8015eb2 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8015ea2:	687b      	ldr	r3, [r7, #4]
 8015ea4:	2240      	movs	r2, #64	@ 0x40
 8015ea6:	2100      	movs	r1, #0
 8015ea8:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8015eaa:	687b      	ldr	r3, [r7, #4]
 8015eac:	0018      	movs	r0, r3
 8015eae:	f7f6 fc7d 	bl	800c7ac <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8015eb2:	687b      	ldr	r3, [r7, #4]
 8015eb4:	2241      	movs	r2, #65	@ 0x41
 8015eb6:	2124      	movs	r1, #36	@ 0x24
 8015eb8:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8015eba:	687b      	ldr	r3, [r7, #4]
 8015ebc:	681b      	ldr	r3, [r3, #0]
 8015ebe:	681a      	ldr	r2, [r3, #0]
 8015ec0:	687b      	ldr	r3, [r7, #4]
 8015ec2:	681b      	ldr	r3, [r3, #0]
 8015ec4:	2101      	movs	r1, #1
 8015ec6:	438a      	bics	r2, r1
 8015ec8:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8015eca:	687b      	ldr	r3, [r7, #4]
 8015ecc:	685a      	ldr	r2, [r3, #4]
 8015ece:	687b      	ldr	r3, [r7, #4]
 8015ed0:	681b      	ldr	r3, [r3, #0]
 8015ed2:	4934      	ldr	r1, [pc, #208]	@ (8015fa4 <HAL_I2C_Init+0x120>)
 8015ed4:	400a      	ands	r2, r1
 8015ed6:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8015ed8:	687b      	ldr	r3, [r7, #4]
 8015eda:	681b      	ldr	r3, [r3, #0]
 8015edc:	689a      	ldr	r2, [r3, #8]
 8015ede:	687b      	ldr	r3, [r7, #4]
 8015ee0:	681b      	ldr	r3, [r3, #0]
 8015ee2:	4931      	ldr	r1, [pc, #196]	@ (8015fa8 <HAL_I2C_Init+0x124>)
 8015ee4:	400a      	ands	r2, r1
 8015ee6:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8015ee8:	687b      	ldr	r3, [r7, #4]
 8015eea:	68db      	ldr	r3, [r3, #12]
 8015eec:	2b01      	cmp	r3, #1
 8015eee:	d108      	bne.n	8015f02 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8015ef0:	687b      	ldr	r3, [r7, #4]
 8015ef2:	689a      	ldr	r2, [r3, #8]
 8015ef4:	687b      	ldr	r3, [r7, #4]
 8015ef6:	681b      	ldr	r3, [r3, #0]
 8015ef8:	2180      	movs	r1, #128	@ 0x80
 8015efa:	0209      	lsls	r1, r1, #8
 8015efc:	430a      	orrs	r2, r1
 8015efe:	609a      	str	r2, [r3, #8]
 8015f00:	e007      	b.n	8015f12 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8015f02:	687b      	ldr	r3, [r7, #4]
 8015f04:	689a      	ldr	r2, [r3, #8]
 8015f06:	687b      	ldr	r3, [r7, #4]
 8015f08:	681b      	ldr	r3, [r3, #0]
 8015f0a:	2184      	movs	r1, #132	@ 0x84
 8015f0c:	0209      	lsls	r1, r1, #8
 8015f0e:	430a      	orrs	r2, r1
 8015f10:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8015f12:	687b      	ldr	r3, [r7, #4]
 8015f14:	68db      	ldr	r3, [r3, #12]
 8015f16:	2b02      	cmp	r3, #2
 8015f18:	d104      	bne.n	8015f24 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8015f1a:	687b      	ldr	r3, [r7, #4]
 8015f1c:	681b      	ldr	r3, [r3, #0]
 8015f1e:	2280      	movs	r2, #128	@ 0x80
 8015f20:	0112      	lsls	r2, r2, #4
 8015f22:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8015f24:	687b      	ldr	r3, [r7, #4]
 8015f26:	681b      	ldr	r3, [r3, #0]
 8015f28:	685a      	ldr	r2, [r3, #4]
 8015f2a:	687b      	ldr	r3, [r7, #4]
 8015f2c:	681b      	ldr	r3, [r3, #0]
 8015f2e:	491f      	ldr	r1, [pc, #124]	@ (8015fac <HAL_I2C_Init+0x128>)
 8015f30:	430a      	orrs	r2, r1
 8015f32:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8015f34:	687b      	ldr	r3, [r7, #4]
 8015f36:	681b      	ldr	r3, [r3, #0]
 8015f38:	68da      	ldr	r2, [r3, #12]
 8015f3a:	687b      	ldr	r3, [r7, #4]
 8015f3c:	681b      	ldr	r3, [r3, #0]
 8015f3e:	491a      	ldr	r1, [pc, #104]	@ (8015fa8 <HAL_I2C_Init+0x124>)
 8015f40:	400a      	ands	r2, r1
 8015f42:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8015f44:	687b      	ldr	r3, [r7, #4]
 8015f46:	691a      	ldr	r2, [r3, #16]
 8015f48:	687b      	ldr	r3, [r7, #4]
 8015f4a:	695b      	ldr	r3, [r3, #20]
 8015f4c:	431a      	orrs	r2, r3
 8015f4e:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8015f50:	687b      	ldr	r3, [r7, #4]
 8015f52:	699b      	ldr	r3, [r3, #24]
 8015f54:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8015f56:	687b      	ldr	r3, [r7, #4]
 8015f58:	681b      	ldr	r3, [r3, #0]
 8015f5a:	430a      	orrs	r2, r1
 8015f5c:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8015f5e:	687b      	ldr	r3, [r7, #4]
 8015f60:	69d9      	ldr	r1, [r3, #28]
 8015f62:	687b      	ldr	r3, [r7, #4]
 8015f64:	6a1a      	ldr	r2, [r3, #32]
 8015f66:	687b      	ldr	r3, [r7, #4]
 8015f68:	681b      	ldr	r3, [r3, #0]
 8015f6a:	430a      	orrs	r2, r1
 8015f6c:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8015f6e:	687b      	ldr	r3, [r7, #4]
 8015f70:	681b      	ldr	r3, [r3, #0]
 8015f72:	681a      	ldr	r2, [r3, #0]
 8015f74:	687b      	ldr	r3, [r7, #4]
 8015f76:	681b      	ldr	r3, [r3, #0]
 8015f78:	2101      	movs	r1, #1
 8015f7a:	430a      	orrs	r2, r1
 8015f7c:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8015f7e:	687b      	ldr	r3, [r7, #4]
 8015f80:	2200      	movs	r2, #0
 8015f82:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8015f84:	687b      	ldr	r3, [r7, #4]
 8015f86:	2241      	movs	r2, #65	@ 0x41
 8015f88:	2120      	movs	r1, #32
 8015f8a:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8015f8c:	687b      	ldr	r3, [r7, #4]
 8015f8e:	2200      	movs	r2, #0
 8015f90:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8015f92:	687b      	ldr	r3, [r7, #4]
 8015f94:	2242      	movs	r2, #66	@ 0x42
 8015f96:	2100      	movs	r1, #0
 8015f98:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8015f9a:	2300      	movs	r3, #0
}
 8015f9c:	0018      	movs	r0, r3
 8015f9e:	46bd      	mov	sp, r7
 8015fa0:	b002      	add	sp, #8
 8015fa2:	bd80      	pop	{r7, pc}
 8015fa4:	f0ffffff 	.word	0xf0ffffff
 8015fa8:	ffff7fff 	.word	0xffff7fff
 8015fac:	02008000 	.word	0x02008000

08015fb0 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8015fb0:	b590      	push	{r4, r7, lr}
 8015fb2:	b089      	sub	sp, #36	@ 0x24
 8015fb4:	af02      	add	r7, sp, #8
 8015fb6:	60f8      	str	r0, [r7, #12]
 8015fb8:	0008      	movs	r0, r1
 8015fba:	607a      	str	r2, [r7, #4]
 8015fbc:	0019      	movs	r1, r3
 8015fbe:	230a      	movs	r3, #10
 8015fc0:	18fb      	adds	r3, r7, r3
 8015fc2:	1c02      	adds	r2, r0, #0
 8015fc4:	801a      	strh	r2, [r3, #0]
 8015fc6:	2308      	movs	r3, #8
 8015fc8:	18fb      	adds	r3, r7, r3
 8015fca:	1c0a      	adds	r2, r1, #0
 8015fcc:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8015fce:	68fb      	ldr	r3, [r7, #12]
 8015fd0:	2241      	movs	r2, #65	@ 0x41
 8015fd2:	5c9b      	ldrb	r3, [r3, r2]
 8015fd4:	b2db      	uxtb	r3, r3
 8015fd6:	2b20      	cmp	r3, #32
 8015fd8:	d000      	beq.n	8015fdc <HAL_I2C_Master_Transmit+0x2c>
 8015fda:	e0e7      	b.n	80161ac <HAL_I2C_Master_Transmit+0x1fc>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8015fdc:	68fb      	ldr	r3, [r7, #12]
 8015fde:	2240      	movs	r2, #64	@ 0x40
 8015fe0:	5c9b      	ldrb	r3, [r3, r2]
 8015fe2:	2b01      	cmp	r3, #1
 8015fe4:	d101      	bne.n	8015fea <HAL_I2C_Master_Transmit+0x3a>
 8015fe6:	2302      	movs	r3, #2
 8015fe8:	e0e1      	b.n	80161ae <HAL_I2C_Master_Transmit+0x1fe>
 8015fea:	68fb      	ldr	r3, [r7, #12]
 8015fec:	2240      	movs	r2, #64	@ 0x40
 8015fee:	2101      	movs	r1, #1
 8015ff0:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8015ff2:	f7fe fc9b 	bl	801492c <HAL_GetTick>
 8015ff6:	0003      	movs	r3, r0
 8015ff8:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8015ffa:	2380      	movs	r3, #128	@ 0x80
 8015ffc:	0219      	lsls	r1, r3, #8
 8015ffe:	68f8      	ldr	r0, [r7, #12]
 8016000:	697b      	ldr	r3, [r7, #20]
 8016002:	9300      	str	r3, [sp, #0]
 8016004:	2319      	movs	r3, #25
 8016006:	2201      	movs	r2, #1
 8016008:	f002 fb34 	bl	8018674 <I2C_WaitOnFlagUntilTimeout>
 801600c:	1e03      	subs	r3, r0, #0
 801600e:	d001      	beq.n	8016014 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 8016010:	2301      	movs	r3, #1
 8016012:	e0cc      	b.n	80161ae <HAL_I2C_Master_Transmit+0x1fe>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8016014:	68fb      	ldr	r3, [r7, #12]
 8016016:	2241      	movs	r2, #65	@ 0x41
 8016018:	2121      	movs	r1, #33	@ 0x21
 801601a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 801601c:	68fb      	ldr	r3, [r7, #12]
 801601e:	2242      	movs	r2, #66	@ 0x42
 8016020:	2110      	movs	r1, #16
 8016022:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8016024:	68fb      	ldr	r3, [r7, #12]
 8016026:	2200      	movs	r2, #0
 8016028:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 801602a:	68fb      	ldr	r3, [r7, #12]
 801602c:	687a      	ldr	r2, [r7, #4]
 801602e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8016030:	68fb      	ldr	r3, [r7, #12]
 8016032:	2208      	movs	r2, #8
 8016034:	18ba      	adds	r2, r7, r2
 8016036:	8812      	ldrh	r2, [r2, #0]
 8016038:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 801603a:	68fb      	ldr	r3, [r7, #12]
 801603c:	2200      	movs	r2, #0
 801603e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8016040:	68fb      	ldr	r3, [r7, #12]
 8016042:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8016044:	b29b      	uxth	r3, r3
 8016046:	2bff      	cmp	r3, #255	@ 0xff
 8016048:	d911      	bls.n	801606e <HAL_I2C_Master_Transmit+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 801604a:	68fb      	ldr	r3, [r7, #12]
 801604c:	22ff      	movs	r2, #255	@ 0xff
 801604e:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8016050:	68fb      	ldr	r3, [r7, #12]
 8016052:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8016054:	b2da      	uxtb	r2, r3
 8016056:	2380      	movs	r3, #128	@ 0x80
 8016058:	045c      	lsls	r4, r3, #17
 801605a:	230a      	movs	r3, #10
 801605c:	18fb      	adds	r3, r7, r3
 801605e:	8819      	ldrh	r1, [r3, #0]
 8016060:	68f8      	ldr	r0, [r7, #12]
 8016062:	4b55      	ldr	r3, [pc, #340]	@ (80161b8 <HAL_I2C_Master_Transmit+0x208>)
 8016064:	9300      	str	r3, [sp, #0]
 8016066:	0023      	movs	r3, r4
 8016068:	f002 fd56 	bl	8018b18 <I2C_TransferConfig>
 801606c:	e075      	b.n	801615a <HAL_I2C_Master_Transmit+0x1aa>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 801606e:	68fb      	ldr	r3, [r7, #12]
 8016070:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8016072:	b29a      	uxth	r2, r3
 8016074:	68fb      	ldr	r3, [r7, #12]
 8016076:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8016078:	68fb      	ldr	r3, [r7, #12]
 801607a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801607c:	b2da      	uxtb	r2, r3
 801607e:	2380      	movs	r3, #128	@ 0x80
 8016080:	049c      	lsls	r4, r3, #18
 8016082:	230a      	movs	r3, #10
 8016084:	18fb      	adds	r3, r7, r3
 8016086:	8819      	ldrh	r1, [r3, #0]
 8016088:	68f8      	ldr	r0, [r7, #12]
 801608a:	4b4b      	ldr	r3, [pc, #300]	@ (80161b8 <HAL_I2C_Master_Transmit+0x208>)
 801608c:	9300      	str	r3, [sp, #0]
 801608e:	0023      	movs	r3, r4
 8016090:	f002 fd42 	bl	8018b18 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8016094:	e061      	b.n	801615a <HAL_I2C_Master_Transmit+0x1aa>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8016096:	697a      	ldr	r2, [r7, #20]
 8016098:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 801609a:	68fb      	ldr	r3, [r7, #12]
 801609c:	0018      	movs	r0, r3
 801609e:	f002 fb37 	bl	8018710 <I2C_WaitOnTXISFlagUntilTimeout>
 80160a2:	1e03      	subs	r3, r0, #0
 80160a4:	d001      	beq.n	80160aa <HAL_I2C_Master_Transmit+0xfa>
      {
        return HAL_ERROR;
 80160a6:	2301      	movs	r3, #1
 80160a8:	e081      	b.n	80161ae <HAL_I2C_Master_Transmit+0x1fe>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80160aa:	68fb      	ldr	r3, [r7, #12]
 80160ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80160ae:	781a      	ldrb	r2, [r3, #0]
 80160b0:	68fb      	ldr	r3, [r7, #12]
 80160b2:	681b      	ldr	r3, [r3, #0]
 80160b4:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80160b6:	68fb      	ldr	r3, [r7, #12]
 80160b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80160ba:	1c5a      	adds	r2, r3, #1
 80160bc:	68fb      	ldr	r3, [r7, #12]
 80160be:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80160c0:	68fb      	ldr	r3, [r7, #12]
 80160c2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80160c4:	b29b      	uxth	r3, r3
 80160c6:	3b01      	subs	r3, #1
 80160c8:	b29a      	uxth	r2, r3
 80160ca:	68fb      	ldr	r3, [r7, #12]
 80160cc:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80160ce:	68fb      	ldr	r3, [r7, #12]
 80160d0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80160d2:	3b01      	subs	r3, #1
 80160d4:	b29a      	uxth	r2, r3
 80160d6:	68fb      	ldr	r3, [r7, #12]
 80160d8:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80160da:	68fb      	ldr	r3, [r7, #12]
 80160dc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80160de:	b29b      	uxth	r3, r3
 80160e0:	2b00      	cmp	r3, #0
 80160e2:	d03a      	beq.n	801615a <HAL_I2C_Master_Transmit+0x1aa>
 80160e4:	68fb      	ldr	r3, [r7, #12]
 80160e6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80160e8:	2b00      	cmp	r3, #0
 80160ea:	d136      	bne.n	801615a <HAL_I2C_Master_Transmit+0x1aa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80160ec:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80160ee:	68f8      	ldr	r0, [r7, #12]
 80160f0:	697b      	ldr	r3, [r7, #20]
 80160f2:	9300      	str	r3, [sp, #0]
 80160f4:	0013      	movs	r3, r2
 80160f6:	2200      	movs	r2, #0
 80160f8:	2180      	movs	r1, #128	@ 0x80
 80160fa:	f002 fabb 	bl	8018674 <I2C_WaitOnFlagUntilTimeout>
 80160fe:	1e03      	subs	r3, r0, #0
 8016100:	d001      	beq.n	8016106 <HAL_I2C_Master_Transmit+0x156>
        {
          return HAL_ERROR;
 8016102:	2301      	movs	r3, #1
 8016104:	e053      	b.n	80161ae <HAL_I2C_Master_Transmit+0x1fe>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8016106:	68fb      	ldr	r3, [r7, #12]
 8016108:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801610a:	b29b      	uxth	r3, r3
 801610c:	2bff      	cmp	r3, #255	@ 0xff
 801610e:	d911      	bls.n	8016134 <HAL_I2C_Master_Transmit+0x184>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8016110:	68fb      	ldr	r3, [r7, #12]
 8016112:	22ff      	movs	r2, #255	@ 0xff
 8016114:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8016116:	68fb      	ldr	r3, [r7, #12]
 8016118:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801611a:	b2da      	uxtb	r2, r3
 801611c:	2380      	movs	r3, #128	@ 0x80
 801611e:	045c      	lsls	r4, r3, #17
 8016120:	230a      	movs	r3, #10
 8016122:	18fb      	adds	r3, r7, r3
 8016124:	8819      	ldrh	r1, [r3, #0]
 8016126:	68f8      	ldr	r0, [r7, #12]
 8016128:	2300      	movs	r3, #0
 801612a:	9300      	str	r3, [sp, #0]
 801612c:	0023      	movs	r3, r4
 801612e:	f002 fcf3 	bl	8018b18 <I2C_TransferConfig>
 8016132:	e012      	b.n	801615a <HAL_I2C_Master_Transmit+0x1aa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8016134:	68fb      	ldr	r3, [r7, #12]
 8016136:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8016138:	b29a      	uxth	r2, r3
 801613a:	68fb      	ldr	r3, [r7, #12]
 801613c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 801613e:	68fb      	ldr	r3, [r7, #12]
 8016140:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8016142:	b2da      	uxtb	r2, r3
 8016144:	2380      	movs	r3, #128	@ 0x80
 8016146:	049c      	lsls	r4, r3, #18
 8016148:	230a      	movs	r3, #10
 801614a:	18fb      	adds	r3, r7, r3
 801614c:	8819      	ldrh	r1, [r3, #0]
 801614e:	68f8      	ldr	r0, [r7, #12]
 8016150:	2300      	movs	r3, #0
 8016152:	9300      	str	r3, [sp, #0]
 8016154:	0023      	movs	r3, r4
 8016156:	f002 fcdf 	bl	8018b18 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 801615a:	68fb      	ldr	r3, [r7, #12]
 801615c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801615e:	b29b      	uxth	r3, r3
 8016160:	2b00      	cmp	r3, #0
 8016162:	d198      	bne.n	8016096 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8016164:	697a      	ldr	r2, [r7, #20]
 8016166:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8016168:	68fb      	ldr	r3, [r7, #12]
 801616a:	0018      	movs	r0, r3
 801616c:	f002 fb16 	bl	801879c <I2C_WaitOnSTOPFlagUntilTimeout>
 8016170:	1e03      	subs	r3, r0, #0
 8016172:	d001      	beq.n	8016178 <HAL_I2C_Master_Transmit+0x1c8>
    {
      return HAL_ERROR;
 8016174:	2301      	movs	r3, #1
 8016176:	e01a      	b.n	80161ae <HAL_I2C_Master_Transmit+0x1fe>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8016178:	68fb      	ldr	r3, [r7, #12]
 801617a:	681b      	ldr	r3, [r3, #0]
 801617c:	2220      	movs	r2, #32
 801617e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8016180:	68fb      	ldr	r3, [r7, #12]
 8016182:	681b      	ldr	r3, [r3, #0]
 8016184:	685a      	ldr	r2, [r3, #4]
 8016186:	68fb      	ldr	r3, [r7, #12]
 8016188:	681b      	ldr	r3, [r3, #0]
 801618a:	490c      	ldr	r1, [pc, #48]	@ (80161bc <HAL_I2C_Master_Transmit+0x20c>)
 801618c:	400a      	ands	r2, r1
 801618e:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8016190:	68fb      	ldr	r3, [r7, #12]
 8016192:	2241      	movs	r2, #65	@ 0x41
 8016194:	2120      	movs	r1, #32
 8016196:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8016198:	68fb      	ldr	r3, [r7, #12]
 801619a:	2242      	movs	r2, #66	@ 0x42
 801619c:	2100      	movs	r1, #0
 801619e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80161a0:	68fb      	ldr	r3, [r7, #12]
 80161a2:	2240      	movs	r2, #64	@ 0x40
 80161a4:	2100      	movs	r1, #0
 80161a6:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80161a8:	2300      	movs	r3, #0
 80161aa:	e000      	b.n	80161ae <HAL_I2C_Master_Transmit+0x1fe>
  }
  else
  {
    return HAL_BUSY;
 80161ac:	2302      	movs	r3, #2
  }
}
 80161ae:	0018      	movs	r0, r3
 80161b0:	46bd      	mov	sp, r7
 80161b2:	b007      	add	sp, #28
 80161b4:	bd90      	pop	{r4, r7, pc}
 80161b6:	46c0      	nop			@ (mov r8, r8)
 80161b8:	80002000 	.word	0x80002000
 80161bc:	fe00e800 	.word	0xfe00e800

080161c0 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 80161c0:	b590      	push	{r4, r7, lr}
 80161c2:	b089      	sub	sp, #36	@ 0x24
 80161c4:	af02      	add	r7, sp, #8
 80161c6:	60f8      	str	r0, [r7, #12]
 80161c8:	0008      	movs	r0, r1
 80161ca:	607a      	str	r2, [r7, #4]
 80161cc:	0019      	movs	r1, r3
 80161ce:	230a      	movs	r3, #10
 80161d0:	18fb      	adds	r3, r7, r3
 80161d2:	1c02      	adds	r2, r0, #0
 80161d4:	801a      	strh	r2, [r3, #0]
 80161d6:	2308      	movs	r3, #8
 80161d8:	18fb      	adds	r3, r7, r3
 80161da:	1c0a      	adds	r2, r1, #0
 80161dc:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80161de:	68fb      	ldr	r3, [r7, #12]
 80161e0:	2241      	movs	r2, #65	@ 0x41
 80161e2:	5c9b      	ldrb	r3, [r3, r2]
 80161e4:	b2db      	uxtb	r3, r3
 80161e6:	2b20      	cmp	r3, #32
 80161e8:	d000      	beq.n	80161ec <HAL_I2C_Master_Receive+0x2c>
 80161ea:	e0e8      	b.n	80163be <HAL_I2C_Master_Receive+0x1fe>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80161ec:	68fb      	ldr	r3, [r7, #12]
 80161ee:	2240      	movs	r2, #64	@ 0x40
 80161f0:	5c9b      	ldrb	r3, [r3, r2]
 80161f2:	2b01      	cmp	r3, #1
 80161f4:	d101      	bne.n	80161fa <HAL_I2C_Master_Receive+0x3a>
 80161f6:	2302      	movs	r3, #2
 80161f8:	e0e2      	b.n	80163c0 <HAL_I2C_Master_Receive+0x200>
 80161fa:	68fb      	ldr	r3, [r7, #12]
 80161fc:	2240      	movs	r2, #64	@ 0x40
 80161fe:	2101      	movs	r1, #1
 8016200:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8016202:	f7fe fb93 	bl	801492c <HAL_GetTick>
 8016206:	0003      	movs	r3, r0
 8016208:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 801620a:	2380      	movs	r3, #128	@ 0x80
 801620c:	0219      	lsls	r1, r3, #8
 801620e:	68f8      	ldr	r0, [r7, #12]
 8016210:	697b      	ldr	r3, [r7, #20]
 8016212:	9300      	str	r3, [sp, #0]
 8016214:	2319      	movs	r3, #25
 8016216:	2201      	movs	r2, #1
 8016218:	f002 fa2c 	bl	8018674 <I2C_WaitOnFlagUntilTimeout>
 801621c:	1e03      	subs	r3, r0, #0
 801621e:	d001      	beq.n	8016224 <HAL_I2C_Master_Receive+0x64>
    {
      return HAL_ERROR;
 8016220:	2301      	movs	r3, #1
 8016222:	e0cd      	b.n	80163c0 <HAL_I2C_Master_Receive+0x200>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8016224:	68fb      	ldr	r3, [r7, #12]
 8016226:	2241      	movs	r2, #65	@ 0x41
 8016228:	2122      	movs	r1, #34	@ 0x22
 801622a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 801622c:	68fb      	ldr	r3, [r7, #12]
 801622e:	2242      	movs	r2, #66	@ 0x42
 8016230:	2110      	movs	r1, #16
 8016232:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8016234:	68fb      	ldr	r3, [r7, #12]
 8016236:	2200      	movs	r2, #0
 8016238:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 801623a:	68fb      	ldr	r3, [r7, #12]
 801623c:	687a      	ldr	r2, [r7, #4]
 801623e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8016240:	68fb      	ldr	r3, [r7, #12]
 8016242:	2208      	movs	r2, #8
 8016244:	18ba      	adds	r2, r7, r2
 8016246:	8812      	ldrh	r2, [r2, #0]
 8016248:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 801624a:	68fb      	ldr	r3, [r7, #12]
 801624c:	2200      	movs	r2, #0
 801624e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8016250:	68fb      	ldr	r3, [r7, #12]
 8016252:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8016254:	b29b      	uxth	r3, r3
 8016256:	2bff      	cmp	r3, #255	@ 0xff
 8016258:	d911      	bls.n	801627e <HAL_I2C_Master_Receive+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 801625a:	68fb      	ldr	r3, [r7, #12]
 801625c:	22ff      	movs	r2, #255	@ 0xff
 801625e:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8016260:	68fb      	ldr	r3, [r7, #12]
 8016262:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8016264:	b2da      	uxtb	r2, r3
 8016266:	2380      	movs	r3, #128	@ 0x80
 8016268:	045c      	lsls	r4, r3, #17
 801626a:	230a      	movs	r3, #10
 801626c:	18fb      	adds	r3, r7, r3
 801626e:	8819      	ldrh	r1, [r3, #0]
 8016270:	68f8      	ldr	r0, [r7, #12]
 8016272:	4b55      	ldr	r3, [pc, #340]	@ (80163c8 <HAL_I2C_Master_Receive+0x208>)
 8016274:	9300      	str	r3, [sp, #0]
 8016276:	0023      	movs	r3, r4
 8016278:	f002 fc4e 	bl	8018b18 <I2C_TransferConfig>
 801627c:	e076      	b.n	801636c <HAL_I2C_Master_Receive+0x1ac>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 801627e:	68fb      	ldr	r3, [r7, #12]
 8016280:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8016282:	b29a      	uxth	r2, r3
 8016284:	68fb      	ldr	r3, [r7, #12]
 8016286:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8016288:	68fb      	ldr	r3, [r7, #12]
 801628a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801628c:	b2da      	uxtb	r2, r3
 801628e:	2380      	movs	r3, #128	@ 0x80
 8016290:	049c      	lsls	r4, r3, #18
 8016292:	230a      	movs	r3, #10
 8016294:	18fb      	adds	r3, r7, r3
 8016296:	8819      	ldrh	r1, [r3, #0]
 8016298:	68f8      	ldr	r0, [r7, #12]
 801629a:	4b4b      	ldr	r3, [pc, #300]	@ (80163c8 <HAL_I2C_Master_Receive+0x208>)
 801629c:	9300      	str	r3, [sp, #0]
 801629e:	0023      	movs	r3, r4
 80162a0:	f002 fc3a 	bl	8018b18 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 80162a4:	e062      	b.n	801636c <HAL_I2C_Master_Receive+0x1ac>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80162a6:	697a      	ldr	r2, [r7, #20]
 80162a8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80162aa:	68fb      	ldr	r3, [r7, #12]
 80162ac:	0018      	movs	r0, r3
 80162ae:	f002 fab9 	bl	8018824 <I2C_WaitOnRXNEFlagUntilTimeout>
 80162b2:	1e03      	subs	r3, r0, #0
 80162b4:	d001      	beq.n	80162ba <HAL_I2C_Master_Receive+0xfa>
      {
        return HAL_ERROR;
 80162b6:	2301      	movs	r3, #1
 80162b8:	e082      	b.n	80163c0 <HAL_I2C_Master_Receive+0x200>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80162ba:	68fb      	ldr	r3, [r7, #12]
 80162bc:	681b      	ldr	r3, [r3, #0]
 80162be:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80162c0:	68fb      	ldr	r3, [r7, #12]
 80162c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80162c4:	b2d2      	uxtb	r2, r2
 80162c6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80162c8:	68fb      	ldr	r3, [r7, #12]
 80162ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80162cc:	1c5a      	adds	r2, r3, #1
 80162ce:	68fb      	ldr	r3, [r7, #12]
 80162d0:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80162d2:	68fb      	ldr	r3, [r7, #12]
 80162d4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80162d6:	3b01      	subs	r3, #1
 80162d8:	b29a      	uxth	r2, r3
 80162da:	68fb      	ldr	r3, [r7, #12]
 80162dc:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80162de:	68fb      	ldr	r3, [r7, #12]
 80162e0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80162e2:	b29b      	uxth	r3, r3
 80162e4:	3b01      	subs	r3, #1
 80162e6:	b29a      	uxth	r2, r3
 80162e8:	68fb      	ldr	r3, [r7, #12]
 80162ea:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80162ec:	68fb      	ldr	r3, [r7, #12]
 80162ee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80162f0:	b29b      	uxth	r3, r3
 80162f2:	2b00      	cmp	r3, #0
 80162f4:	d03a      	beq.n	801636c <HAL_I2C_Master_Receive+0x1ac>
 80162f6:	68fb      	ldr	r3, [r7, #12]
 80162f8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80162fa:	2b00      	cmp	r3, #0
 80162fc:	d136      	bne.n	801636c <HAL_I2C_Master_Receive+0x1ac>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80162fe:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8016300:	68f8      	ldr	r0, [r7, #12]
 8016302:	697b      	ldr	r3, [r7, #20]
 8016304:	9300      	str	r3, [sp, #0]
 8016306:	0013      	movs	r3, r2
 8016308:	2200      	movs	r2, #0
 801630a:	2180      	movs	r1, #128	@ 0x80
 801630c:	f002 f9b2 	bl	8018674 <I2C_WaitOnFlagUntilTimeout>
 8016310:	1e03      	subs	r3, r0, #0
 8016312:	d001      	beq.n	8016318 <HAL_I2C_Master_Receive+0x158>
        {
          return HAL_ERROR;
 8016314:	2301      	movs	r3, #1
 8016316:	e053      	b.n	80163c0 <HAL_I2C_Master_Receive+0x200>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8016318:	68fb      	ldr	r3, [r7, #12]
 801631a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801631c:	b29b      	uxth	r3, r3
 801631e:	2bff      	cmp	r3, #255	@ 0xff
 8016320:	d911      	bls.n	8016346 <HAL_I2C_Master_Receive+0x186>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8016322:	68fb      	ldr	r3, [r7, #12]
 8016324:	22ff      	movs	r2, #255	@ 0xff
 8016326:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8016328:	68fb      	ldr	r3, [r7, #12]
 801632a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801632c:	b2da      	uxtb	r2, r3
 801632e:	2380      	movs	r3, #128	@ 0x80
 8016330:	045c      	lsls	r4, r3, #17
 8016332:	230a      	movs	r3, #10
 8016334:	18fb      	adds	r3, r7, r3
 8016336:	8819      	ldrh	r1, [r3, #0]
 8016338:	68f8      	ldr	r0, [r7, #12]
 801633a:	2300      	movs	r3, #0
 801633c:	9300      	str	r3, [sp, #0]
 801633e:	0023      	movs	r3, r4
 8016340:	f002 fbea 	bl	8018b18 <I2C_TransferConfig>
 8016344:	e012      	b.n	801636c <HAL_I2C_Master_Receive+0x1ac>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8016346:	68fb      	ldr	r3, [r7, #12]
 8016348:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801634a:	b29a      	uxth	r2, r3
 801634c:	68fb      	ldr	r3, [r7, #12]
 801634e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8016350:	68fb      	ldr	r3, [r7, #12]
 8016352:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8016354:	b2da      	uxtb	r2, r3
 8016356:	2380      	movs	r3, #128	@ 0x80
 8016358:	049c      	lsls	r4, r3, #18
 801635a:	230a      	movs	r3, #10
 801635c:	18fb      	adds	r3, r7, r3
 801635e:	8819      	ldrh	r1, [r3, #0]
 8016360:	68f8      	ldr	r0, [r7, #12]
 8016362:	2300      	movs	r3, #0
 8016364:	9300      	str	r3, [sp, #0]
 8016366:	0023      	movs	r3, r4
 8016368:	f002 fbd6 	bl	8018b18 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 801636c:	68fb      	ldr	r3, [r7, #12]
 801636e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8016370:	b29b      	uxth	r3, r3
 8016372:	2b00      	cmp	r3, #0
 8016374:	d197      	bne.n	80162a6 <HAL_I2C_Master_Receive+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8016376:	697a      	ldr	r2, [r7, #20]
 8016378:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 801637a:	68fb      	ldr	r3, [r7, #12]
 801637c:	0018      	movs	r0, r3
 801637e:	f002 fa0d 	bl	801879c <I2C_WaitOnSTOPFlagUntilTimeout>
 8016382:	1e03      	subs	r3, r0, #0
 8016384:	d001      	beq.n	801638a <HAL_I2C_Master_Receive+0x1ca>
    {
      return HAL_ERROR;
 8016386:	2301      	movs	r3, #1
 8016388:	e01a      	b.n	80163c0 <HAL_I2C_Master_Receive+0x200>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 801638a:	68fb      	ldr	r3, [r7, #12]
 801638c:	681b      	ldr	r3, [r3, #0]
 801638e:	2220      	movs	r2, #32
 8016390:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8016392:	68fb      	ldr	r3, [r7, #12]
 8016394:	681b      	ldr	r3, [r3, #0]
 8016396:	685a      	ldr	r2, [r3, #4]
 8016398:	68fb      	ldr	r3, [r7, #12]
 801639a:	681b      	ldr	r3, [r3, #0]
 801639c:	490b      	ldr	r1, [pc, #44]	@ (80163cc <HAL_I2C_Master_Receive+0x20c>)
 801639e:	400a      	ands	r2, r1
 80163a0:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80163a2:	68fb      	ldr	r3, [r7, #12]
 80163a4:	2241      	movs	r2, #65	@ 0x41
 80163a6:	2120      	movs	r1, #32
 80163a8:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80163aa:	68fb      	ldr	r3, [r7, #12]
 80163ac:	2242      	movs	r2, #66	@ 0x42
 80163ae:	2100      	movs	r1, #0
 80163b0:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80163b2:	68fb      	ldr	r3, [r7, #12]
 80163b4:	2240      	movs	r2, #64	@ 0x40
 80163b6:	2100      	movs	r1, #0
 80163b8:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80163ba:	2300      	movs	r3, #0
 80163bc:	e000      	b.n	80163c0 <HAL_I2C_Master_Receive+0x200>
  }
  else
  {
    return HAL_BUSY;
 80163be:	2302      	movs	r3, #2
  }
}
 80163c0:	0018      	movs	r0, r3
 80163c2:	46bd      	mov	sp, r7
 80163c4:	b007      	add	sp, #28
 80163c6:	bd90      	pop	{r4, r7, pc}
 80163c8:	80002400 	.word	0x80002400
 80163cc:	fe00e800 	.word	0xfe00e800

080163d0 <HAL_I2C_Master_Transmit_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                              uint16_t Size)
{
 80163d0:	b5b0      	push	{r4, r5, r7, lr}
 80163d2:	b088      	sub	sp, #32
 80163d4:	af02      	add	r7, sp, #8
 80163d6:	60f8      	str	r0, [r7, #12]
 80163d8:	0008      	movs	r0, r1
 80163da:	607a      	str	r2, [r7, #4]
 80163dc:	0019      	movs	r1, r3
 80163de:	230a      	movs	r3, #10
 80163e0:	18fb      	adds	r3, r7, r3
 80163e2:	1c02      	adds	r2, r0, #0
 80163e4:	801a      	strh	r2, [r3, #0]
 80163e6:	2308      	movs	r3, #8
 80163e8:	18fb      	adds	r3, r7, r3
 80163ea:	1c0a      	adds	r2, r1, #0
 80163ec:	801a      	strh	r2, [r3, #0]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80163ee:	68fb      	ldr	r3, [r7, #12]
 80163f0:	2241      	movs	r2, #65	@ 0x41
 80163f2:	5c9b      	ldrb	r3, [r3, r2]
 80163f4:	b2db      	uxtb	r3, r3
 80163f6:	2b20      	cmp	r3, #32
 80163f8:	d000      	beq.n	80163fc <HAL_I2C_Master_Transmit_DMA+0x2c>
 80163fa:	e0dd      	b.n	80165b8 <HAL_I2C_Master_Transmit_DMA+0x1e8>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 80163fc:	68fb      	ldr	r3, [r7, #12]
 80163fe:	681b      	ldr	r3, [r3, #0]
 8016400:	699a      	ldr	r2, [r3, #24]
 8016402:	2380      	movs	r3, #128	@ 0x80
 8016404:	021b      	lsls	r3, r3, #8
 8016406:	401a      	ands	r2, r3
 8016408:	2380      	movs	r3, #128	@ 0x80
 801640a:	021b      	lsls	r3, r3, #8
 801640c:	429a      	cmp	r2, r3
 801640e:	d101      	bne.n	8016414 <HAL_I2C_Master_Transmit_DMA+0x44>
    {
      return HAL_BUSY;
 8016410:	2302      	movs	r3, #2
 8016412:	e0d2      	b.n	80165ba <HAL_I2C_Master_Transmit_DMA+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8016414:	68fb      	ldr	r3, [r7, #12]
 8016416:	2240      	movs	r2, #64	@ 0x40
 8016418:	5c9b      	ldrb	r3, [r3, r2]
 801641a:	2b01      	cmp	r3, #1
 801641c:	d101      	bne.n	8016422 <HAL_I2C_Master_Transmit_DMA+0x52>
 801641e:	2302      	movs	r3, #2
 8016420:	e0cb      	b.n	80165ba <HAL_I2C_Master_Transmit_DMA+0x1ea>
 8016422:	68fb      	ldr	r3, [r7, #12]
 8016424:	2240      	movs	r2, #64	@ 0x40
 8016426:	2101      	movs	r1, #1
 8016428:	5499      	strb	r1, [r3, r2]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 801642a:	68fb      	ldr	r3, [r7, #12]
 801642c:	2241      	movs	r2, #65	@ 0x41
 801642e:	2121      	movs	r1, #33	@ 0x21
 8016430:	5499      	strb	r1, [r3, r2]
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8016432:	68fb      	ldr	r3, [r7, #12]
 8016434:	2242      	movs	r2, #66	@ 0x42
 8016436:	2110      	movs	r1, #16
 8016438:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 801643a:	68fb      	ldr	r3, [r7, #12]
 801643c:	2200      	movs	r2, #0
 801643e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8016440:	68fb      	ldr	r3, [r7, #12]
 8016442:	687a      	ldr	r2, [r7, #4]
 8016444:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8016446:	68fb      	ldr	r3, [r7, #12]
 8016448:	2208      	movs	r2, #8
 801644a:	18ba      	adds	r2, r7, r2
 801644c:	8812      	ldrh	r2, [r2, #0]
 801644e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8016450:	68fb      	ldr	r3, [r7, #12]
 8016452:	4a5c      	ldr	r2, [pc, #368]	@ (80165c4 <HAL_I2C_Master_Transmit_DMA+0x1f4>)
 8016454:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 8016456:	68fb      	ldr	r3, [r7, #12]
 8016458:	4a5b      	ldr	r2, [pc, #364]	@ (80165c8 <HAL_I2C_Master_Transmit_DMA+0x1f8>)
 801645a:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 801645c:	68fb      	ldr	r3, [r7, #12]
 801645e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8016460:	b29b      	uxth	r3, r3
 8016462:	2bff      	cmp	r3, #255	@ 0xff
 8016464:	d906      	bls.n	8016474 <HAL_I2C_Master_Transmit_DMA+0xa4>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8016466:	68fb      	ldr	r3, [r7, #12]
 8016468:	22ff      	movs	r2, #255	@ 0xff
 801646a:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 801646c:	2380      	movs	r3, #128	@ 0x80
 801646e:	045b      	lsls	r3, r3, #17
 8016470:	617b      	str	r3, [r7, #20]
 8016472:	e007      	b.n	8016484 <HAL_I2C_Master_Transmit_DMA+0xb4>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8016474:	68fb      	ldr	r3, [r7, #12]
 8016476:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8016478:	b29a      	uxth	r2, r3
 801647a:	68fb      	ldr	r3, [r7, #12]
 801647c:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 801647e:	2380      	movs	r3, #128	@ 0x80
 8016480:	049b      	lsls	r3, r3, #18
 8016482:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8016484:	68fb      	ldr	r3, [r7, #12]
 8016486:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8016488:	2b00      	cmp	r3, #0
 801648a:	d100      	bne.n	801648e <HAL_I2C_Master_Transmit_DMA+0xbe>
 801648c:	e078      	b.n	8016580 <HAL_I2C_Master_Transmit_DMA+0x1b0>
    {
      if (hi2c->hdmatx != NULL)
 801648e:	68fb      	ldr	r3, [r7, #12]
 8016490:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8016492:	2b00      	cmp	r3, #0
 8016494:	d023      	beq.n	80164de <HAL_I2C_Master_Transmit_DMA+0x10e>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAMasterTransmitCplt;
 8016496:	68fb      	ldr	r3, [r7, #12]
 8016498:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801649a:	4a4c      	ldr	r2, [pc, #304]	@ (80165cc <HAL_I2C_Master_Transmit_DMA+0x1fc>)
 801649c:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 801649e:	68fb      	ldr	r3, [r7, #12]
 80164a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80164a2:	4a4b      	ldr	r2, [pc, #300]	@ (80165d0 <HAL_I2C_Master_Transmit_DMA+0x200>)
 80164a4:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 80164a6:	68fb      	ldr	r3, [r7, #12]
 80164a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80164aa:	2200      	movs	r2, #0
 80164ac:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->hdmatx->XferAbortCallback = NULL;
 80164ae:	68fb      	ldr	r3, [r7, #12]
 80164b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80164b2:	2200      	movs	r2, #0
 80164b4:	639a      	str	r2, [r3, #56]	@ 0x38

        /* Enable the DMA channel */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR,
 80164b6:	68fb      	ldr	r3, [r7, #12]
 80164b8:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 80164ba:	6879      	ldr	r1, [r7, #4]
 80164bc:	68fb      	ldr	r3, [r7, #12]
 80164be:	681b      	ldr	r3, [r3, #0]
 80164c0:	3328      	adds	r3, #40	@ 0x28
 80164c2:	001a      	movs	r2, r3
                                         hi2c->XferSize);
 80164c4:	68fb      	ldr	r3, [r7, #12]
 80164c6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR,
 80164c8:	2513      	movs	r5, #19
 80164ca:	197c      	adds	r4, r7, r5
 80164cc:	f7fe ff62 	bl	8015394 <HAL_DMA_Start_IT>
 80164d0:	0003      	movs	r3, r0
 80164d2:	7023      	strb	r3, [r4, #0]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 80164d4:	197b      	adds	r3, r7, r5
 80164d6:	781b      	ldrb	r3, [r3, #0]
 80164d8:	2b00      	cmp	r3, #0
 80164da:	d13d      	bne.n	8016558 <HAL_I2C_Master_Transmit_DMA+0x188>
 80164dc:	e013      	b.n	8016506 <HAL_I2C_Master_Transmit_DMA+0x136>
        hi2c->State     = HAL_I2C_STATE_READY;
 80164de:	68fb      	ldr	r3, [r7, #12]
 80164e0:	2241      	movs	r2, #65	@ 0x41
 80164e2:	2120      	movs	r1, #32
 80164e4:	5499      	strb	r1, [r3, r2]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 80164e6:	68fb      	ldr	r3, [r7, #12]
 80164e8:	2242      	movs	r2, #66	@ 0x42
 80164ea:	2100      	movs	r1, #0
 80164ec:	5499      	strb	r1, [r3, r2]
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 80164ee:	68fb      	ldr	r3, [r7, #12]
 80164f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80164f2:	2280      	movs	r2, #128	@ 0x80
 80164f4:	431a      	orrs	r2, r3
 80164f6:	68fb      	ldr	r3, [r7, #12]
 80164f8:	645a      	str	r2, [r3, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 80164fa:	68fb      	ldr	r3, [r7, #12]
 80164fc:	2240      	movs	r2, #64	@ 0x40
 80164fe:	2100      	movs	r1, #0
 8016500:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 8016502:	2301      	movs	r3, #1
 8016504:	e059      	b.n	80165ba <HAL_I2C_Master_Transmit_DMA+0x1ea>
      {
        /* Send Slave Address */
        /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_WRITE);
 8016506:	68fb      	ldr	r3, [r7, #12]
 8016508:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801650a:	b2da      	uxtb	r2, r3
 801650c:	697c      	ldr	r4, [r7, #20]
 801650e:	230a      	movs	r3, #10
 8016510:	18fb      	adds	r3, r7, r3
 8016512:	8819      	ldrh	r1, [r3, #0]
 8016514:	68f8      	ldr	r0, [r7, #12]
 8016516:	4b2f      	ldr	r3, [pc, #188]	@ (80165d4 <HAL_I2C_Master_Transmit_DMA+0x204>)
 8016518:	9300      	str	r3, [sp, #0]
 801651a:	0023      	movs	r3, r4
 801651c:	f002 fafc 	bl	8018b18 <I2C_TransferConfig>

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 8016520:	68fb      	ldr	r3, [r7, #12]
 8016522:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8016524:	b29a      	uxth	r2, r3
 8016526:	68fb      	ldr	r3, [r7, #12]
 8016528:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801652a:	1ad3      	subs	r3, r2, r3
 801652c:	b29a      	uxth	r2, r3
 801652e:	68fb      	ldr	r3, [r7, #12]
 8016530:	855a      	strh	r2, [r3, #42]	@ 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8016532:	68fb      	ldr	r3, [r7, #12]
 8016534:	2240      	movs	r2, #64	@ 0x40
 8016536:	2100      	movs	r1, #0
 8016538:	5499      	strb	r1, [r3, r2]

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 801653a:	68fb      	ldr	r3, [r7, #12]
 801653c:	2110      	movs	r1, #16
 801653e:	0018      	movs	r0, r3
 8016540:	f002 fb24 	bl	8018b8c <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8016544:	68fb      	ldr	r3, [r7, #12]
 8016546:	681b      	ldr	r3, [r3, #0]
 8016548:	681a      	ldr	r2, [r3, #0]
 801654a:	68fb      	ldr	r3, [r7, #12]
 801654c:	681b      	ldr	r3, [r3, #0]
 801654e:	2180      	movs	r1, #128	@ 0x80
 8016550:	01c9      	lsls	r1, r1, #7
 8016552:	430a      	orrs	r2, r1
 8016554:	601a      	str	r2, [r3, #0]
 8016556:	e02d      	b.n	80165b4 <HAL_I2C_Master_Transmit_DMA+0x1e4>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 8016558:	68fb      	ldr	r3, [r7, #12]
 801655a:	2241      	movs	r2, #65	@ 0x41
 801655c:	2120      	movs	r1, #32
 801655e:	5499      	strb	r1, [r3, r2]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8016560:	68fb      	ldr	r3, [r7, #12]
 8016562:	2242      	movs	r2, #66	@ 0x42
 8016564:	2100      	movs	r1, #0
 8016566:	5499      	strb	r1, [r3, r2]

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8016568:	68fb      	ldr	r3, [r7, #12]
 801656a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801656c:	2210      	movs	r2, #16
 801656e:	431a      	orrs	r2, r3
 8016570:	68fb      	ldr	r3, [r7, #12]
 8016572:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8016574:	68fb      	ldr	r3, [r7, #12]
 8016576:	2240      	movs	r2, #64	@ 0x40
 8016578:	2100      	movs	r1, #0
 801657a:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 801657c:	2301      	movs	r3, #1
 801657e:	e01c      	b.n	80165ba <HAL_I2C_Master_Transmit_DMA+0x1ea>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 8016580:	68fb      	ldr	r3, [r7, #12]
 8016582:	4a15      	ldr	r2, [pc, #84]	@ (80165d8 <HAL_I2C_Master_Transmit_DMA+0x208>)
 8016584:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Send Slave Address */
      /* Set NBYTES to write and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8016586:	68fb      	ldr	r3, [r7, #12]
 8016588:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801658a:	b2da      	uxtb	r2, r3
 801658c:	2380      	movs	r3, #128	@ 0x80
 801658e:	049c      	lsls	r4, r3, #18
 8016590:	230a      	movs	r3, #10
 8016592:	18fb      	adds	r3, r7, r3
 8016594:	8819      	ldrh	r1, [r3, #0]
 8016596:	68f8      	ldr	r0, [r7, #12]
 8016598:	4b0e      	ldr	r3, [pc, #56]	@ (80165d4 <HAL_I2C_Master_Transmit_DMA+0x204>)
 801659a:	9300      	str	r3, [sp, #0]
 801659c:	0023      	movs	r3, r4
 801659e:	f002 fabb 	bl	8018b18 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80165a2:	68fb      	ldr	r3, [r7, #12]
 80165a4:	2240      	movs	r2, #64	@ 0x40
 80165a6:	2100      	movs	r1, #0
 80165a8:	5499      	strb	r1, [r3, r2]
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 80165aa:	68fb      	ldr	r3, [r7, #12]
 80165ac:	2101      	movs	r1, #1
 80165ae:	0018      	movs	r0, r3
 80165b0:	f002 faec 	bl	8018b8c <I2C_Enable_IRQ>
    }

    return HAL_OK;
 80165b4:	2300      	movs	r3, #0
 80165b6:	e000      	b.n	80165ba <HAL_I2C_Master_Transmit_DMA+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80165b8:	2302      	movs	r3, #2
  }
}
 80165ba:	0018      	movs	r0, r3
 80165bc:	46bd      	mov	sp, r7
 80165be:	b006      	add	sp, #24
 80165c0:	bdb0      	pop	{r4, r5, r7, pc}
 80165c2:	46c0      	nop			@ (mov r8, r8)
 80165c4:	ffff0000 	.word	0xffff0000
 80165c8:	08017301 	.word	0x08017301
 80165cc:	080184c5 	.word	0x080184c5
 80165d0:	08018605 	.word	0x08018605
 80165d4:	80002000 	.word	0x80002000
 80165d8:	08016e55 	.word	0x08016e55

080165dc <HAL_I2C_Master_Receive_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                             uint16_t Size)
{
 80165dc:	b5b0      	push	{r4, r5, r7, lr}
 80165de:	b088      	sub	sp, #32
 80165e0:	af02      	add	r7, sp, #8
 80165e2:	60f8      	str	r0, [r7, #12]
 80165e4:	0008      	movs	r0, r1
 80165e6:	607a      	str	r2, [r7, #4]
 80165e8:	0019      	movs	r1, r3
 80165ea:	230a      	movs	r3, #10
 80165ec:	18fb      	adds	r3, r7, r3
 80165ee:	1c02      	adds	r2, r0, #0
 80165f0:	801a      	strh	r2, [r3, #0]
 80165f2:	2308      	movs	r3, #8
 80165f4:	18fb      	adds	r3, r7, r3
 80165f6:	1c0a      	adds	r2, r1, #0
 80165f8:	801a      	strh	r2, [r3, #0]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80165fa:	68fb      	ldr	r3, [r7, #12]
 80165fc:	2241      	movs	r2, #65	@ 0x41
 80165fe:	5c9b      	ldrb	r3, [r3, r2]
 8016600:	b2db      	uxtb	r3, r3
 8016602:	2b20      	cmp	r3, #32
 8016604:	d000      	beq.n	8016608 <HAL_I2C_Master_Receive_DMA+0x2c>
 8016606:	e0dd      	b.n	80167c4 <HAL_I2C_Master_Receive_DMA+0x1e8>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8016608:	68fb      	ldr	r3, [r7, #12]
 801660a:	681b      	ldr	r3, [r3, #0]
 801660c:	699a      	ldr	r2, [r3, #24]
 801660e:	2380      	movs	r3, #128	@ 0x80
 8016610:	021b      	lsls	r3, r3, #8
 8016612:	401a      	ands	r2, r3
 8016614:	2380      	movs	r3, #128	@ 0x80
 8016616:	021b      	lsls	r3, r3, #8
 8016618:	429a      	cmp	r2, r3
 801661a:	d101      	bne.n	8016620 <HAL_I2C_Master_Receive_DMA+0x44>
    {
      return HAL_BUSY;
 801661c:	2302      	movs	r3, #2
 801661e:	e0d2      	b.n	80167c6 <HAL_I2C_Master_Receive_DMA+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8016620:	68fb      	ldr	r3, [r7, #12]
 8016622:	2240      	movs	r2, #64	@ 0x40
 8016624:	5c9b      	ldrb	r3, [r3, r2]
 8016626:	2b01      	cmp	r3, #1
 8016628:	d101      	bne.n	801662e <HAL_I2C_Master_Receive_DMA+0x52>
 801662a:	2302      	movs	r3, #2
 801662c:	e0cb      	b.n	80167c6 <HAL_I2C_Master_Receive_DMA+0x1ea>
 801662e:	68fb      	ldr	r3, [r7, #12]
 8016630:	2240      	movs	r2, #64	@ 0x40
 8016632:	2101      	movs	r1, #1
 8016634:	5499      	strb	r1, [r3, r2]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8016636:	68fb      	ldr	r3, [r7, #12]
 8016638:	2241      	movs	r2, #65	@ 0x41
 801663a:	2122      	movs	r1, #34	@ 0x22
 801663c:	5499      	strb	r1, [r3, r2]
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 801663e:	68fb      	ldr	r3, [r7, #12]
 8016640:	2242      	movs	r2, #66	@ 0x42
 8016642:	2110      	movs	r1, #16
 8016644:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8016646:	68fb      	ldr	r3, [r7, #12]
 8016648:	2200      	movs	r2, #0
 801664a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 801664c:	68fb      	ldr	r3, [r7, #12]
 801664e:	687a      	ldr	r2, [r7, #4]
 8016650:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8016652:	68fb      	ldr	r3, [r7, #12]
 8016654:	2208      	movs	r2, #8
 8016656:	18ba      	adds	r2, r7, r2
 8016658:	8812      	ldrh	r2, [r2, #0]
 801665a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 801665c:	68fb      	ldr	r3, [r7, #12]
 801665e:	4a5c      	ldr	r2, [pc, #368]	@ (80167d0 <HAL_I2C_Master_Receive_DMA+0x1f4>)
 8016660:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 8016662:	68fb      	ldr	r3, [r7, #12]
 8016664:	4a5b      	ldr	r2, [pc, #364]	@ (80167d4 <HAL_I2C_Master_Receive_DMA+0x1f8>)
 8016666:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8016668:	68fb      	ldr	r3, [r7, #12]
 801666a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801666c:	b29b      	uxth	r3, r3
 801666e:	2bff      	cmp	r3, #255	@ 0xff
 8016670:	d906      	bls.n	8016680 <HAL_I2C_Master_Receive_DMA+0xa4>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8016672:	68fb      	ldr	r3, [r7, #12]
 8016674:	22ff      	movs	r2, #255	@ 0xff
 8016676:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8016678:	2380      	movs	r3, #128	@ 0x80
 801667a:	045b      	lsls	r3, r3, #17
 801667c:	617b      	str	r3, [r7, #20]
 801667e:	e007      	b.n	8016690 <HAL_I2C_Master_Receive_DMA+0xb4>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8016680:	68fb      	ldr	r3, [r7, #12]
 8016682:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8016684:	b29a      	uxth	r2, r3
 8016686:	68fb      	ldr	r3, [r7, #12]
 8016688:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 801668a:	2380      	movs	r3, #128	@ 0x80
 801668c:	049b      	lsls	r3, r3, #18
 801668e:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8016690:	68fb      	ldr	r3, [r7, #12]
 8016692:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8016694:	2b00      	cmp	r3, #0
 8016696:	d100      	bne.n	801669a <HAL_I2C_Master_Receive_DMA+0xbe>
 8016698:	e078      	b.n	801678c <HAL_I2C_Master_Receive_DMA+0x1b0>
    {
      if (hi2c->hdmarx != NULL)
 801669a:	68fb      	ldr	r3, [r7, #12]
 801669c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801669e:	2b00      	cmp	r3, #0
 80166a0:	d023      	beq.n	80166ea <HAL_I2C_Master_Receive_DMA+0x10e>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAMasterReceiveCplt;
 80166a2:	68fb      	ldr	r3, [r7, #12]
 80166a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80166a6:	4a4c      	ldr	r2, [pc, #304]	@ (80167d8 <HAL_I2C_Master_Receive_DMA+0x1fc>)
 80166a8:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 80166aa:	68fb      	ldr	r3, [r7, #12]
 80166ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80166ae:	4a4b      	ldr	r2, [pc, #300]	@ (80167dc <HAL_I2C_Master_Receive_DMA+0x200>)
 80166b0:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 80166b2:	68fb      	ldr	r3, [r7, #12]
 80166b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80166b6:	2200      	movs	r2, #0
 80166b8:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->hdmarx->XferAbortCallback = NULL;
 80166ba:	68fb      	ldr	r3, [r7, #12]
 80166bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80166be:	2200      	movs	r2, #0
 80166c0:	639a      	str	r2, [r3, #56]	@ 0x38

        /* Enable the DMA channel */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 80166c2:	68fb      	ldr	r3, [r7, #12]
 80166c4:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 80166c6:	68fb      	ldr	r3, [r7, #12]
 80166c8:	681b      	ldr	r3, [r3, #0]
 80166ca:	3324      	adds	r3, #36	@ 0x24
 80166cc:	0019      	movs	r1, r3
 80166ce:	687a      	ldr	r2, [r7, #4]
                                         hi2c->XferSize);
 80166d0:	68fb      	ldr	r3, [r7, #12]
 80166d2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 80166d4:	2513      	movs	r5, #19
 80166d6:	197c      	adds	r4, r7, r5
 80166d8:	f7fe fe5c 	bl	8015394 <HAL_DMA_Start_IT>
 80166dc:	0003      	movs	r3, r0
 80166de:	7023      	strb	r3, [r4, #0]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 80166e0:	197b      	adds	r3, r7, r5
 80166e2:	781b      	ldrb	r3, [r3, #0]
 80166e4:	2b00      	cmp	r3, #0
 80166e6:	d13d      	bne.n	8016764 <HAL_I2C_Master_Receive_DMA+0x188>
 80166e8:	e013      	b.n	8016712 <HAL_I2C_Master_Receive_DMA+0x136>
        hi2c->State     = HAL_I2C_STATE_READY;
 80166ea:	68fb      	ldr	r3, [r7, #12]
 80166ec:	2241      	movs	r2, #65	@ 0x41
 80166ee:	2120      	movs	r1, #32
 80166f0:	5499      	strb	r1, [r3, r2]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 80166f2:	68fb      	ldr	r3, [r7, #12]
 80166f4:	2242      	movs	r2, #66	@ 0x42
 80166f6:	2100      	movs	r1, #0
 80166f8:	5499      	strb	r1, [r3, r2]
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 80166fa:	68fb      	ldr	r3, [r7, #12]
 80166fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80166fe:	2280      	movs	r2, #128	@ 0x80
 8016700:	431a      	orrs	r2, r3
 8016702:	68fb      	ldr	r3, [r7, #12]
 8016704:	645a      	str	r2, [r3, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 8016706:	68fb      	ldr	r3, [r7, #12]
 8016708:	2240      	movs	r2, #64	@ 0x40
 801670a:	2100      	movs	r1, #0
 801670c:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 801670e:	2301      	movs	r3, #1
 8016710:	e059      	b.n	80167c6 <HAL_I2C_Master_Receive_DMA+0x1ea>
      {
        /* Send Slave Address */
        /* Set NBYTES to read and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_READ);
 8016712:	68fb      	ldr	r3, [r7, #12]
 8016714:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8016716:	b2da      	uxtb	r2, r3
 8016718:	697c      	ldr	r4, [r7, #20]
 801671a:	230a      	movs	r3, #10
 801671c:	18fb      	adds	r3, r7, r3
 801671e:	8819      	ldrh	r1, [r3, #0]
 8016720:	68f8      	ldr	r0, [r7, #12]
 8016722:	4b2f      	ldr	r3, [pc, #188]	@ (80167e0 <HAL_I2C_Master_Receive_DMA+0x204>)
 8016724:	9300      	str	r3, [sp, #0]
 8016726:	0023      	movs	r3, r4
 8016728:	f002 f9f6 	bl	8018b18 <I2C_TransferConfig>

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 801672c:	68fb      	ldr	r3, [r7, #12]
 801672e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8016730:	b29a      	uxth	r2, r3
 8016732:	68fb      	ldr	r3, [r7, #12]
 8016734:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8016736:	1ad3      	subs	r3, r2, r3
 8016738:	b29a      	uxth	r2, r3
 801673a:	68fb      	ldr	r3, [r7, #12]
 801673c:	855a      	strh	r2, [r3, #42]	@ 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 801673e:	68fb      	ldr	r3, [r7, #12]
 8016740:	2240      	movs	r2, #64	@ 0x40
 8016742:	2100      	movs	r1, #0
 8016744:	5499      	strb	r1, [r3, r2]

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8016746:	68fb      	ldr	r3, [r7, #12]
 8016748:	2110      	movs	r1, #16
 801674a:	0018      	movs	r0, r3
 801674c:	f002 fa1e 	bl	8018b8c <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8016750:	68fb      	ldr	r3, [r7, #12]
 8016752:	681b      	ldr	r3, [r3, #0]
 8016754:	681a      	ldr	r2, [r3, #0]
 8016756:	68fb      	ldr	r3, [r7, #12]
 8016758:	681b      	ldr	r3, [r3, #0]
 801675a:	2180      	movs	r1, #128	@ 0x80
 801675c:	0209      	lsls	r1, r1, #8
 801675e:	430a      	orrs	r2, r1
 8016760:	601a      	str	r2, [r3, #0]
 8016762:	e02d      	b.n	80167c0 <HAL_I2C_Master_Receive_DMA+0x1e4>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 8016764:	68fb      	ldr	r3, [r7, #12]
 8016766:	2241      	movs	r2, #65	@ 0x41
 8016768:	2120      	movs	r1, #32
 801676a:	5499      	strb	r1, [r3, r2]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 801676c:	68fb      	ldr	r3, [r7, #12]
 801676e:	2242      	movs	r2, #66	@ 0x42
 8016770:	2100      	movs	r1, #0
 8016772:	5499      	strb	r1, [r3, r2]

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8016774:	68fb      	ldr	r3, [r7, #12]
 8016776:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8016778:	2210      	movs	r2, #16
 801677a:	431a      	orrs	r2, r3
 801677c:	68fb      	ldr	r3, [r7, #12]
 801677e:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8016780:	68fb      	ldr	r3, [r7, #12]
 8016782:	2240      	movs	r2, #64	@ 0x40
 8016784:	2100      	movs	r1, #0
 8016786:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8016788:	2301      	movs	r3, #1
 801678a:	e01c      	b.n	80167c6 <HAL_I2C_Master_Receive_DMA+0x1ea>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 801678c:	68fb      	ldr	r3, [r7, #12]
 801678e:	4a15      	ldr	r2, [pc, #84]	@ (80167e4 <HAL_I2C_Master_Receive_DMA+0x208>)
 8016790:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Send Slave Address */
      /* Set NBYTES to read and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8016792:	68fb      	ldr	r3, [r7, #12]
 8016794:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8016796:	b2da      	uxtb	r2, r3
 8016798:	2380      	movs	r3, #128	@ 0x80
 801679a:	049c      	lsls	r4, r3, #18
 801679c:	230a      	movs	r3, #10
 801679e:	18fb      	adds	r3, r7, r3
 80167a0:	8819      	ldrh	r1, [r3, #0]
 80167a2:	68f8      	ldr	r0, [r7, #12]
 80167a4:	4b0e      	ldr	r3, [pc, #56]	@ (80167e0 <HAL_I2C_Master_Receive_DMA+0x204>)
 80167a6:	9300      	str	r3, [sp, #0]
 80167a8:	0023      	movs	r3, r4
 80167aa:	f002 f9b5 	bl	8018b18 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80167ae:	68fb      	ldr	r3, [r7, #12]
 80167b0:	2240      	movs	r2, #64	@ 0x40
 80167b2:	2100      	movs	r1, #0
 80167b4:	5499      	strb	r1, [r3, r2]
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 80167b6:	68fb      	ldr	r3, [r7, #12]
 80167b8:	2101      	movs	r1, #1
 80167ba:	0018      	movs	r0, r3
 80167bc:	f002 f9e6 	bl	8018b8c <I2C_Enable_IRQ>
    }

    return HAL_OK;
 80167c0:	2300      	movs	r3, #0
 80167c2:	e000      	b.n	80167c6 <HAL_I2C_Master_Receive_DMA+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80167c4:	2302      	movs	r3, #2
  }
}
 80167c6:	0018      	movs	r0, r3
 80167c8:	46bd      	mov	sp, r7
 80167ca:	b006      	add	sp, #24
 80167cc:	bdb0      	pop	{r4, r5, r7, pc}
 80167ce:	46c0      	nop			@ (mov r8, r8)
 80167d0:	ffff0000 	.word	0xffff0000
 80167d4:	08017301 	.word	0x08017301
 80167d8:	08018565 	.word	0x08018565
 80167dc:	08018605 	.word	0x08018605
 80167e0:	80002400 	.word	0x80002400
 80167e4:	08016e55 	.word	0x08016e55

080167e8 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80167e8:	b590      	push	{r4, r7, lr}
 80167ea:	b089      	sub	sp, #36	@ 0x24
 80167ec:	af02      	add	r7, sp, #8
 80167ee:	60f8      	str	r0, [r7, #12]
 80167f0:	000c      	movs	r4, r1
 80167f2:	0010      	movs	r0, r2
 80167f4:	0019      	movs	r1, r3
 80167f6:	230a      	movs	r3, #10
 80167f8:	18fb      	adds	r3, r7, r3
 80167fa:	1c22      	adds	r2, r4, #0
 80167fc:	801a      	strh	r2, [r3, #0]
 80167fe:	2308      	movs	r3, #8
 8016800:	18fb      	adds	r3, r7, r3
 8016802:	1c02      	adds	r2, r0, #0
 8016804:	801a      	strh	r2, [r3, #0]
 8016806:	1dbb      	adds	r3, r7, #6
 8016808:	1c0a      	adds	r2, r1, #0
 801680a:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 801680c:	68fb      	ldr	r3, [r7, #12]
 801680e:	2241      	movs	r2, #65	@ 0x41
 8016810:	5c9b      	ldrb	r3, [r3, r2]
 8016812:	b2db      	uxtb	r3, r3
 8016814:	2b20      	cmp	r3, #32
 8016816:	d000      	beq.n	801681a <HAL_I2C_Mem_Write+0x32>
 8016818:	e10c      	b.n	8016a34 <HAL_I2C_Mem_Write+0x24c>
  {
    if ((pData == NULL) || (Size == 0U))
 801681a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801681c:	2b00      	cmp	r3, #0
 801681e:	d004      	beq.n	801682a <HAL_I2C_Mem_Write+0x42>
 8016820:	232c      	movs	r3, #44	@ 0x2c
 8016822:	18fb      	adds	r3, r7, r3
 8016824:	881b      	ldrh	r3, [r3, #0]
 8016826:	2b00      	cmp	r3, #0
 8016828:	d105      	bne.n	8016836 <HAL_I2C_Mem_Write+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 801682a:	68fb      	ldr	r3, [r7, #12]
 801682c:	2280      	movs	r2, #128	@ 0x80
 801682e:	0092      	lsls	r2, r2, #2
 8016830:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8016832:	2301      	movs	r3, #1
 8016834:	e0ff      	b.n	8016a36 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8016836:	68fb      	ldr	r3, [r7, #12]
 8016838:	2240      	movs	r2, #64	@ 0x40
 801683a:	5c9b      	ldrb	r3, [r3, r2]
 801683c:	2b01      	cmp	r3, #1
 801683e:	d101      	bne.n	8016844 <HAL_I2C_Mem_Write+0x5c>
 8016840:	2302      	movs	r3, #2
 8016842:	e0f8      	b.n	8016a36 <HAL_I2C_Mem_Write+0x24e>
 8016844:	68fb      	ldr	r3, [r7, #12]
 8016846:	2240      	movs	r2, #64	@ 0x40
 8016848:	2101      	movs	r1, #1
 801684a:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 801684c:	f7fe f86e 	bl	801492c <HAL_GetTick>
 8016850:	0003      	movs	r3, r0
 8016852:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8016854:	2380      	movs	r3, #128	@ 0x80
 8016856:	0219      	lsls	r1, r3, #8
 8016858:	68f8      	ldr	r0, [r7, #12]
 801685a:	697b      	ldr	r3, [r7, #20]
 801685c:	9300      	str	r3, [sp, #0]
 801685e:	2319      	movs	r3, #25
 8016860:	2201      	movs	r2, #1
 8016862:	f001 ff07 	bl	8018674 <I2C_WaitOnFlagUntilTimeout>
 8016866:	1e03      	subs	r3, r0, #0
 8016868:	d001      	beq.n	801686e <HAL_I2C_Mem_Write+0x86>
    {
      return HAL_ERROR;
 801686a:	2301      	movs	r3, #1
 801686c:	e0e3      	b.n	8016a36 <HAL_I2C_Mem_Write+0x24e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 801686e:	68fb      	ldr	r3, [r7, #12]
 8016870:	2241      	movs	r2, #65	@ 0x41
 8016872:	2121      	movs	r1, #33	@ 0x21
 8016874:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8016876:	68fb      	ldr	r3, [r7, #12]
 8016878:	2242      	movs	r2, #66	@ 0x42
 801687a:	2140      	movs	r1, #64	@ 0x40
 801687c:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 801687e:	68fb      	ldr	r3, [r7, #12]
 8016880:	2200      	movs	r2, #0
 8016882:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8016884:	68fb      	ldr	r3, [r7, #12]
 8016886:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8016888:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 801688a:	68fb      	ldr	r3, [r7, #12]
 801688c:	222c      	movs	r2, #44	@ 0x2c
 801688e:	18ba      	adds	r2, r7, r2
 8016890:	8812      	ldrh	r2, [r2, #0]
 8016892:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8016894:	68fb      	ldr	r3, [r7, #12]
 8016896:	2200      	movs	r2, #0
 8016898:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 801689a:	1dbb      	adds	r3, r7, #6
 801689c:	881c      	ldrh	r4, [r3, #0]
 801689e:	2308      	movs	r3, #8
 80168a0:	18fb      	adds	r3, r7, r3
 80168a2:	881a      	ldrh	r2, [r3, #0]
 80168a4:	230a      	movs	r3, #10
 80168a6:	18fb      	adds	r3, r7, r3
 80168a8:	8819      	ldrh	r1, [r3, #0]
 80168aa:	68f8      	ldr	r0, [r7, #12]
 80168ac:	697b      	ldr	r3, [r7, #20]
 80168ae:	9301      	str	r3, [sp, #4]
 80168b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80168b2:	9300      	str	r3, [sp, #0]
 80168b4:	0023      	movs	r3, r4
 80168b6:	f001 f855 	bl	8017964 <I2C_RequestMemoryWrite>
 80168ba:	1e03      	subs	r3, r0, #0
 80168bc:	d005      	beq.n	80168ca <HAL_I2C_Mem_Write+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80168be:	68fb      	ldr	r3, [r7, #12]
 80168c0:	2240      	movs	r2, #64	@ 0x40
 80168c2:	2100      	movs	r1, #0
 80168c4:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 80168c6:	2301      	movs	r3, #1
 80168c8:	e0b5      	b.n	8016a36 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80168ca:	68fb      	ldr	r3, [r7, #12]
 80168cc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80168ce:	b29b      	uxth	r3, r3
 80168d0:	2bff      	cmp	r3, #255	@ 0xff
 80168d2:	d911      	bls.n	80168f8 <HAL_I2C_Mem_Write+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80168d4:	68fb      	ldr	r3, [r7, #12]
 80168d6:	22ff      	movs	r2, #255	@ 0xff
 80168d8:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80168da:	68fb      	ldr	r3, [r7, #12]
 80168dc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80168de:	b2da      	uxtb	r2, r3
 80168e0:	2380      	movs	r3, #128	@ 0x80
 80168e2:	045c      	lsls	r4, r3, #17
 80168e4:	230a      	movs	r3, #10
 80168e6:	18fb      	adds	r3, r7, r3
 80168e8:	8819      	ldrh	r1, [r3, #0]
 80168ea:	68f8      	ldr	r0, [r7, #12]
 80168ec:	2300      	movs	r3, #0
 80168ee:	9300      	str	r3, [sp, #0]
 80168f0:	0023      	movs	r3, r4
 80168f2:	f002 f911 	bl	8018b18 <I2C_TransferConfig>
 80168f6:	e012      	b.n	801691e <HAL_I2C_Mem_Write+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80168f8:	68fb      	ldr	r3, [r7, #12]
 80168fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80168fc:	b29a      	uxth	r2, r3
 80168fe:	68fb      	ldr	r3, [r7, #12]
 8016900:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8016902:	68fb      	ldr	r3, [r7, #12]
 8016904:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8016906:	b2da      	uxtb	r2, r3
 8016908:	2380      	movs	r3, #128	@ 0x80
 801690a:	049c      	lsls	r4, r3, #18
 801690c:	230a      	movs	r3, #10
 801690e:	18fb      	adds	r3, r7, r3
 8016910:	8819      	ldrh	r1, [r3, #0]
 8016912:	68f8      	ldr	r0, [r7, #12]
 8016914:	2300      	movs	r3, #0
 8016916:	9300      	str	r3, [sp, #0]
 8016918:	0023      	movs	r3, r4
 801691a:	f002 f8fd 	bl	8018b18 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 801691e:	697a      	ldr	r2, [r7, #20]
 8016920:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8016922:	68fb      	ldr	r3, [r7, #12]
 8016924:	0018      	movs	r0, r3
 8016926:	f001 fef3 	bl	8018710 <I2C_WaitOnTXISFlagUntilTimeout>
 801692a:	1e03      	subs	r3, r0, #0
 801692c:	d001      	beq.n	8016932 <HAL_I2C_Mem_Write+0x14a>
      {
        return HAL_ERROR;
 801692e:	2301      	movs	r3, #1
 8016930:	e081      	b.n	8016a36 <HAL_I2C_Mem_Write+0x24e>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8016932:	68fb      	ldr	r3, [r7, #12]
 8016934:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016936:	781a      	ldrb	r2, [r3, #0]
 8016938:	68fb      	ldr	r3, [r7, #12]
 801693a:	681b      	ldr	r3, [r3, #0]
 801693c:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 801693e:	68fb      	ldr	r3, [r7, #12]
 8016940:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016942:	1c5a      	adds	r2, r3, #1
 8016944:	68fb      	ldr	r3, [r7, #12]
 8016946:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8016948:	68fb      	ldr	r3, [r7, #12]
 801694a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801694c:	b29b      	uxth	r3, r3
 801694e:	3b01      	subs	r3, #1
 8016950:	b29a      	uxth	r2, r3
 8016952:	68fb      	ldr	r3, [r7, #12]
 8016954:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8016956:	68fb      	ldr	r3, [r7, #12]
 8016958:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801695a:	3b01      	subs	r3, #1
 801695c:	b29a      	uxth	r2, r3
 801695e:	68fb      	ldr	r3, [r7, #12]
 8016960:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8016962:	68fb      	ldr	r3, [r7, #12]
 8016964:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8016966:	b29b      	uxth	r3, r3
 8016968:	2b00      	cmp	r3, #0
 801696a:	d03a      	beq.n	80169e2 <HAL_I2C_Mem_Write+0x1fa>
 801696c:	68fb      	ldr	r3, [r7, #12]
 801696e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8016970:	2b00      	cmp	r3, #0
 8016972:	d136      	bne.n	80169e2 <HAL_I2C_Mem_Write+0x1fa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8016974:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8016976:	68f8      	ldr	r0, [r7, #12]
 8016978:	697b      	ldr	r3, [r7, #20]
 801697a:	9300      	str	r3, [sp, #0]
 801697c:	0013      	movs	r3, r2
 801697e:	2200      	movs	r2, #0
 8016980:	2180      	movs	r1, #128	@ 0x80
 8016982:	f001 fe77 	bl	8018674 <I2C_WaitOnFlagUntilTimeout>
 8016986:	1e03      	subs	r3, r0, #0
 8016988:	d001      	beq.n	801698e <HAL_I2C_Mem_Write+0x1a6>
        {
          return HAL_ERROR;
 801698a:	2301      	movs	r3, #1
 801698c:	e053      	b.n	8016a36 <HAL_I2C_Mem_Write+0x24e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 801698e:	68fb      	ldr	r3, [r7, #12]
 8016990:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8016992:	b29b      	uxth	r3, r3
 8016994:	2bff      	cmp	r3, #255	@ 0xff
 8016996:	d911      	bls.n	80169bc <HAL_I2C_Mem_Write+0x1d4>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8016998:	68fb      	ldr	r3, [r7, #12]
 801699a:	22ff      	movs	r2, #255	@ 0xff
 801699c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 801699e:	68fb      	ldr	r3, [r7, #12]
 80169a0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80169a2:	b2da      	uxtb	r2, r3
 80169a4:	2380      	movs	r3, #128	@ 0x80
 80169a6:	045c      	lsls	r4, r3, #17
 80169a8:	230a      	movs	r3, #10
 80169aa:	18fb      	adds	r3, r7, r3
 80169ac:	8819      	ldrh	r1, [r3, #0]
 80169ae:	68f8      	ldr	r0, [r7, #12]
 80169b0:	2300      	movs	r3, #0
 80169b2:	9300      	str	r3, [sp, #0]
 80169b4:	0023      	movs	r3, r4
 80169b6:	f002 f8af 	bl	8018b18 <I2C_TransferConfig>
 80169ba:	e012      	b.n	80169e2 <HAL_I2C_Mem_Write+0x1fa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80169bc:	68fb      	ldr	r3, [r7, #12]
 80169be:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80169c0:	b29a      	uxth	r2, r3
 80169c2:	68fb      	ldr	r3, [r7, #12]
 80169c4:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80169c6:	68fb      	ldr	r3, [r7, #12]
 80169c8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80169ca:	b2da      	uxtb	r2, r3
 80169cc:	2380      	movs	r3, #128	@ 0x80
 80169ce:	049c      	lsls	r4, r3, #18
 80169d0:	230a      	movs	r3, #10
 80169d2:	18fb      	adds	r3, r7, r3
 80169d4:	8819      	ldrh	r1, [r3, #0]
 80169d6:	68f8      	ldr	r0, [r7, #12]
 80169d8:	2300      	movs	r3, #0
 80169da:	9300      	str	r3, [sp, #0]
 80169dc:	0023      	movs	r3, r4
 80169de:	f002 f89b 	bl	8018b18 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80169e2:	68fb      	ldr	r3, [r7, #12]
 80169e4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80169e6:	b29b      	uxth	r3, r3
 80169e8:	2b00      	cmp	r3, #0
 80169ea:	d198      	bne.n	801691e <HAL_I2C_Mem_Write+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80169ec:	697a      	ldr	r2, [r7, #20]
 80169ee:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80169f0:	68fb      	ldr	r3, [r7, #12]
 80169f2:	0018      	movs	r0, r3
 80169f4:	f001 fed2 	bl	801879c <I2C_WaitOnSTOPFlagUntilTimeout>
 80169f8:	1e03      	subs	r3, r0, #0
 80169fa:	d001      	beq.n	8016a00 <HAL_I2C_Mem_Write+0x218>
    {
      return HAL_ERROR;
 80169fc:	2301      	movs	r3, #1
 80169fe:	e01a      	b.n	8016a36 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8016a00:	68fb      	ldr	r3, [r7, #12]
 8016a02:	681b      	ldr	r3, [r3, #0]
 8016a04:	2220      	movs	r2, #32
 8016a06:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8016a08:	68fb      	ldr	r3, [r7, #12]
 8016a0a:	681b      	ldr	r3, [r3, #0]
 8016a0c:	685a      	ldr	r2, [r3, #4]
 8016a0e:	68fb      	ldr	r3, [r7, #12]
 8016a10:	681b      	ldr	r3, [r3, #0]
 8016a12:	490b      	ldr	r1, [pc, #44]	@ (8016a40 <HAL_I2C_Mem_Write+0x258>)
 8016a14:	400a      	ands	r2, r1
 8016a16:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8016a18:	68fb      	ldr	r3, [r7, #12]
 8016a1a:	2241      	movs	r2, #65	@ 0x41
 8016a1c:	2120      	movs	r1, #32
 8016a1e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8016a20:	68fb      	ldr	r3, [r7, #12]
 8016a22:	2242      	movs	r2, #66	@ 0x42
 8016a24:	2100      	movs	r1, #0
 8016a26:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8016a28:	68fb      	ldr	r3, [r7, #12]
 8016a2a:	2240      	movs	r2, #64	@ 0x40
 8016a2c:	2100      	movs	r1, #0
 8016a2e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8016a30:	2300      	movs	r3, #0
 8016a32:	e000      	b.n	8016a36 <HAL_I2C_Mem_Write+0x24e>
  }
  else
  {
    return HAL_BUSY;
 8016a34:	2302      	movs	r3, #2
  }
}
 8016a36:	0018      	movs	r0, r3
 8016a38:	46bd      	mov	sp, r7
 8016a3a:	b007      	add	sp, #28
 8016a3c:	bd90      	pop	{r4, r7, pc}
 8016a3e:	46c0      	nop			@ (mov r8, r8)
 8016a40:	fe00e800 	.word	0xfe00e800

08016a44 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8016a44:	b590      	push	{r4, r7, lr}
 8016a46:	b089      	sub	sp, #36	@ 0x24
 8016a48:	af02      	add	r7, sp, #8
 8016a4a:	60f8      	str	r0, [r7, #12]
 8016a4c:	000c      	movs	r4, r1
 8016a4e:	0010      	movs	r0, r2
 8016a50:	0019      	movs	r1, r3
 8016a52:	230a      	movs	r3, #10
 8016a54:	18fb      	adds	r3, r7, r3
 8016a56:	1c22      	adds	r2, r4, #0
 8016a58:	801a      	strh	r2, [r3, #0]
 8016a5a:	2308      	movs	r3, #8
 8016a5c:	18fb      	adds	r3, r7, r3
 8016a5e:	1c02      	adds	r2, r0, #0
 8016a60:	801a      	strh	r2, [r3, #0]
 8016a62:	1dbb      	adds	r3, r7, #6
 8016a64:	1c0a      	adds	r2, r1, #0
 8016a66:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8016a68:	68fb      	ldr	r3, [r7, #12]
 8016a6a:	2241      	movs	r2, #65	@ 0x41
 8016a6c:	5c9b      	ldrb	r3, [r3, r2]
 8016a6e:	b2db      	uxtb	r3, r3
 8016a70:	2b20      	cmp	r3, #32
 8016a72:	d000      	beq.n	8016a76 <HAL_I2C_Mem_Read+0x32>
 8016a74:	e110      	b.n	8016c98 <HAL_I2C_Mem_Read+0x254>
  {
    if ((pData == NULL) || (Size == 0U))
 8016a76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016a78:	2b00      	cmp	r3, #0
 8016a7a:	d004      	beq.n	8016a86 <HAL_I2C_Mem_Read+0x42>
 8016a7c:	232c      	movs	r3, #44	@ 0x2c
 8016a7e:	18fb      	adds	r3, r7, r3
 8016a80:	881b      	ldrh	r3, [r3, #0]
 8016a82:	2b00      	cmp	r3, #0
 8016a84:	d105      	bne.n	8016a92 <HAL_I2C_Mem_Read+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8016a86:	68fb      	ldr	r3, [r7, #12]
 8016a88:	2280      	movs	r2, #128	@ 0x80
 8016a8a:	0092      	lsls	r2, r2, #2
 8016a8c:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8016a8e:	2301      	movs	r3, #1
 8016a90:	e103      	b.n	8016c9a <HAL_I2C_Mem_Read+0x256>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8016a92:	68fb      	ldr	r3, [r7, #12]
 8016a94:	2240      	movs	r2, #64	@ 0x40
 8016a96:	5c9b      	ldrb	r3, [r3, r2]
 8016a98:	2b01      	cmp	r3, #1
 8016a9a:	d101      	bne.n	8016aa0 <HAL_I2C_Mem_Read+0x5c>
 8016a9c:	2302      	movs	r3, #2
 8016a9e:	e0fc      	b.n	8016c9a <HAL_I2C_Mem_Read+0x256>
 8016aa0:	68fb      	ldr	r3, [r7, #12]
 8016aa2:	2240      	movs	r2, #64	@ 0x40
 8016aa4:	2101      	movs	r1, #1
 8016aa6:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8016aa8:	f7fd ff40 	bl	801492c <HAL_GetTick>
 8016aac:	0003      	movs	r3, r0
 8016aae:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8016ab0:	2380      	movs	r3, #128	@ 0x80
 8016ab2:	0219      	lsls	r1, r3, #8
 8016ab4:	68f8      	ldr	r0, [r7, #12]
 8016ab6:	697b      	ldr	r3, [r7, #20]
 8016ab8:	9300      	str	r3, [sp, #0]
 8016aba:	2319      	movs	r3, #25
 8016abc:	2201      	movs	r2, #1
 8016abe:	f001 fdd9 	bl	8018674 <I2C_WaitOnFlagUntilTimeout>
 8016ac2:	1e03      	subs	r3, r0, #0
 8016ac4:	d001      	beq.n	8016aca <HAL_I2C_Mem_Read+0x86>
    {
      return HAL_ERROR;
 8016ac6:	2301      	movs	r3, #1
 8016ac8:	e0e7      	b.n	8016c9a <HAL_I2C_Mem_Read+0x256>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8016aca:	68fb      	ldr	r3, [r7, #12]
 8016acc:	2241      	movs	r2, #65	@ 0x41
 8016ace:	2122      	movs	r1, #34	@ 0x22
 8016ad0:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8016ad2:	68fb      	ldr	r3, [r7, #12]
 8016ad4:	2242      	movs	r2, #66	@ 0x42
 8016ad6:	2140      	movs	r1, #64	@ 0x40
 8016ad8:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8016ada:	68fb      	ldr	r3, [r7, #12]
 8016adc:	2200      	movs	r2, #0
 8016ade:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8016ae0:	68fb      	ldr	r3, [r7, #12]
 8016ae2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8016ae4:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8016ae6:	68fb      	ldr	r3, [r7, #12]
 8016ae8:	222c      	movs	r2, #44	@ 0x2c
 8016aea:	18ba      	adds	r2, r7, r2
 8016aec:	8812      	ldrh	r2, [r2, #0]
 8016aee:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8016af0:	68fb      	ldr	r3, [r7, #12]
 8016af2:	2200      	movs	r2, #0
 8016af4:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8016af6:	1dbb      	adds	r3, r7, #6
 8016af8:	881c      	ldrh	r4, [r3, #0]
 8016afa:	2308      	movs	r3, #8
 8016afc:	18fb      	adds	r3, r7, r3
 8016afe:	881a      	ldrh	r2, [r3, #0]
 8016b00:	230a      	movs	r3, #10
 8016b02:	18fb      	adds	r3, r7, r3
 8016b04:	8819      	ldrh	r1, [r3, #0]
 8016b06:	68f8      	ldr	r0, [r7, #12]
 8016b08:	697b      	ldr	r3, [r7, #20]
 8016b0a:	9301      	str	r3, [sp, #4]
 8016b0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016b0e:	9300      	str	r3, [sp, #0]
 8016b10:	0023      	movs	r3, r4
 8016b12:	f000 ff8b 	bl	8017a2c <I2C_RequestMemoryRead>
 8016b16:	1e03      	subs	r3, r0, #0
 8016b18:	d005      	beq.n	8016b26 <HAL_I2C_Mem_Read+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8016b1a:	68fb      	ldr	r3, [r7, #12]
 8016b1c:	2240      	movs	r2, #64	@ 0x40
 8016b1e:	2100      	movs	r1, #0
 8016b20:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8016b22:	2301      	movs	r3, #1
 8016b24:	e0b9      	b.n	8016c9a <HAL_I2C_Mem_Read+0x256>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8016b26:	68fb      	ldr	r3, [r7, #12]
 8016b28:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8016b2a:	b29b      	uxth	r3, r3
 8016b2c:	2bff      	cmp	r3, #255	@ 0xff
 8016b2e:	d911      	bls.n	8016b54 <HAL_I2C_Mem_Read+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8016b30:	68fb      	ldr	r3, [r7, #12]
 8016b32:	22ff      	movs	r2, #255	@ 0xff
 8016b34:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8016b36:	68fb      	ldr	r3, [r7, #12]
 8016b38:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8016b3a:	b2da      	uxtb	r2, r3
 8016b3c:	2380      	movs	r3, #128	@ 0x80
 8016b3e:	045c      	lsls	r4, r3, #17
 8016b40:	230a      	movs	r3, #10
 8016b42:	18fb      	adds	r3, r7, r3
 8016b44:	8819      	ldrh	r1, [r3, #0]
 8016b46:	68f8      	ldr	r0, [r7, #12]
 8016b48:	4b56      	ldr	r3, [pc, #344]	@ (8016ca4 <HAL_I2C_Mem_Read+0x260>)
 8016b4a:	9300      	str	r3, [sp, #0]
 8016b4c:	0023      	movs	r3, r4
 8016b4e:	f001 ffe3 	bl	8018b18 <I2C_TransferConfig>
 8016b52:	e012      	b.n	8016b7a <HAL_I2C_Mem_Read+0x136>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8016b54:	68fb      	ldr	r3, [r7, #12]
 8016b56:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8016b58:	b29a      	uxth	r2, r3
 8016b5a:	68fb      	ldr	r3, [r7, #12]
 8016b5c:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8016b5e:	68fb      	ldr	r3, [r7, #12]
 8016b60:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8016b62:	b2da      	uxtb	r2, r3
 8016b64:	2380      	movs	r3, #128	@ 0x80
 8016b66:	049c      	lsls	r4, r3, #18
 8016b68:	230a      	movs	r3, #10
 8016b6a:	18fb      	adds	r3, r7, r3
 8016b6c:	8819      	ldrh	r1, [r3, #0]
 8016b6e:	68f8      	ldr	r0, [r7, #12]
 8016b70:	4b4c      	ldr	r3, [pc, #304]	@ (8016ca4 <HAL_I2C_Mem_Read+0x260>)
 8016b72:	9300      	str	r3, [sp, #0]
 8016b74:	0023      	movs	r3, r4
 8016b76:	f001 ffcf 	bl	8018b18 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8016b7a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8016b7c:	68f8      	ldr	r0, [r7, #12]
 8016b7e:	697b      	ldr	r3, [r7, #20]
 8016b80:	9300      	str	r3, [sp, #0]
 8016b82:	0013      	movs	r3, r2
 8016b84:	2200      	movs	r2, #0
 8016b86:	2104      	movs	r1, #4
 8016b88:	f001 fd74 	bl	8018674 <I2C_WaitOnFlagUntilTimeout>
 8016b8c:	1e03      	subs	r3, r0, #0
 8016b8e:	d001      	beq.n	8016b94 <HAL_I2C_Mem_Read+0x150>
      {
        return HAL_ERROR;
 8016b90:	2301      	movs	r3, #1
 8016b92:	e082      	b.n	8016c9a <HAL_I2C_Mem_Read+0x256>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8016b94:	68fb      	ldr	r3, [r7, #12]
 8016b96:	681b      	ldr	r3, [r3, #0]
 8016b98:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8016b9a:	68fb      	ldr	r3, [r7, #12]
 8016b9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016b9e:	b2d2      	uxtb	r2, r2
 8016ba0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8016ba2:	68fb      	ldr	r3, [r7, #12]
 8016ba4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016ba6:	1c5a      	adds	r2, r3, #1
 8016ba8:	68fb      	ldr	r3, [r7, #12]
 8016baa:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8016bac:	68fb      	ldr	r3, [r7, #12]
 8016bae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8016bb0:	3b01      	subs	r3, #1
 8016bb2:	b29a      	uxth	r2, r3
 8016bb4:	68fb      	ldr	r3, [r7, #12]
 8016bb6:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8016bb8:	68fb      	ldr	r3, [r7, #12]
 8016bba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8016bbc:	b29b      	uxth	r3, r3
 8016bbe:	3b01      	subs	r3, #1
 8016bc0:	b29a      	uxth	r2, r3
 8016bc2:	68fb      	ldr	r3, [r7, #12]
 8016bc4:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8016bc6:	68fb      	ldr	r3, [r7, #12]
 8016bc8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8016bca:	b29b      	uxth	r3, r3
 8016bcc:	2b00      	cmp	r3, #0
 8016bce:	d03a      	beq.n	8016c46 <HAL_I2C_Mem_Read+0x202>
 8016bd0:	68fb      	ldr	r3, [r7, #12]
 8016bd2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8016bd4:	2b00      	cmp	r3, #0
 8016bd6:	d136      	bne.n	8016c46 <HAL_I2C_Mem_Read+0x202>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8016bd8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8016bda:	68f8      	ldr	r0, [r7, #12]
 8016bdc:	697b      	ldr	r3, [r7, #20]
 8016bde:	9300      	str	r3, [sp, #0]
 8016be0:	0013      	movs	r3, r2
 8016be2:	2200      	movs	r2, #0
 8016be4:	2180      	movs	r1, #128	@ 0x80
 8016be6:	f001 fd45 	bl	8018674 <I2C_WaitOnFlagUntilTimeout>
 8016bea:	1e03      	subs	r3, r0, #0
 8016bec:	d001      	beq.n	8016bf2 <HAL_I2C_Mem_Read+0x1ae>
        {
          return HAL_ERROR;
 8016bee:	2301      	movs	r3, #1
 8016bf0:	e053      	b.n	8016c9a <HAL_I2C_Mem_Read+0x256>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8016bf2:	68fb      	ldr	r3, [r7, #12]
 8016bf4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8016bf6:	b29b      	uxth	r3, r3
 8016bf8:	2bff      	cmp	r3, #255	@ 0xff
 8016bfa:	d911      	bls.n	8016c20 <HAL_I2C_Mem_Read+0x1dc>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8016bfc:	68fb      	ldr	r3, [r7, #12]
 8016bfe:	22ff      	movs	r2, #255	@ 0xff
 8016c00:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8016c02:	68fb      	ldr	r3, [r7, #12]
 8016c04:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8016c06:	b2da      	uxtb	r2, r3
 8016c08:	2380      	movs	r3, #128	@ 0x80
 8016c0a:	045c      	lsls	r4, r3, #17
 8016c0c:	230a      	movs	r3, #10
 8016c0e:	18fb      	adds	r3, r7, r3
 8016c10:	8819      	ldrh	r1, [r3, #0]
 8016c12:	68f8      	ldr	r0, [r7, #12]
 8016c14:	2300      	movs	r3, #0
 8016c16:	9300      	str	r3, [sp, #0]
 8016c18:	0023      	movs	r3, r4
 8016c1a:	f001 ff7d 	bl	8018b18 <I2C_TransferConfig>
 8016c1e:	e012      	b.n	8016c46 <HAL_I2C_Mem_Read+0x202>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8016c20:	68fb      	ldr	r3, [r7, #12]
 8016c22:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8016c24:	b29a      	uxth	r2, r3
 8016c26:	68fb      	ldr	r3, [r7, #12]
 8016c28:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8016c2a:	68fb      	ldr	r3, [r7, #12]
 8016c2c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8016c2e:	b2da      	uxtb	r2, r3
 8016c30:	2380      	movs	r3, #128	@ 0x80
 8016c32:	049c      	lsls	r4, r3, #18
 8016c34:	230a      	movs	r3, #10
 8016c36:	18fb      	adds	r3, r7, r3
 8016c38:	8819      	ldrh	r1, [r3, #0]
 8016c3a:	68f8      	ldr	r0, [r7, #12]
 8016c3c:	2300      	movs	r3, #0
 8016c3e:	9300      	str	r3, [sp, #0]
 8016c40:	0023      	movs	r3, r4
 8016c42:	f001 ff69 	bl	8018b18 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8016c46:	68fb      	ldr	r3, [r7, #12]
 8016c48:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8016c4a:	b29b      	uxth	r3, r3
 8016c4c:	2b00      	cmp	r3, #0
 8016c4e:	d194      	bne.n	8016b7a <HAL_I2C_Mem_Read+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8016c50:	697a      	ldr	r2, [r7, #20]
 8016c52:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8016c54:	68fb      	ldr	r3, [r7, #12]
 8016c56:	0018      	movs	r0, r3
 8016c58:	f001 fda0 	bl	801879c <I2C_WaitOnSTOPFlagUntilTimeout>
 8016c5c:	1e03      	subs	r3, r0, #0
 8016c5e:	d001      	beq.n	8016c64 <HAL_I2C_Mem_Read+0x220>
    {
      return HAL_ERROR;
 8016c60:	2301      	movs	r3, #1
 8016c62:	e01a      	b.n	8016c9a <HAL_I2C_Mem_Read+0x256>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8016c64:	68fb      	ldr	r3, [r7, #12]
 8016c66:	681b      	ldr	r3, [r3, #0]
 8016c68:	2220      	movs	r2, #32
 8016c6a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8016c6c:	68fb      	ldr	r3, [r7, #12]
 8016c6e:	681b      	ldr	r3, [r3, #0]
 8016c70:	685a      	ldr	r2, [r3, #4]
 8016c72:	68fb      	ldr	r3, [r7, #12]
 8016c74:	681b      	ldr	r3, [r3, #0]
 8016c76:	490c      	ldr	r1, [pc, #48]	@ (8016ca8 <HAL_I2C_Mem_Read+0x264>)
 8016c78:	400a      	ands	r2, r1
 8016c7a:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8016c7c:	68fb      	ldr	r3, [r7, #12]
 8016c7e:	2241      	movs	r2, #65	@ 0x41
 8016c80:	2120      	movs	r1, #32
 8016c82:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8016c84:	68fb      	ldr	r3, [r7, #12]
 8016c86:	2242      	movs	r2, #66	@ 0x42
 8016c88:	2100      	movs	r1, #0
 8016c8a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8016c8c:	68fb      	ldr	r3, [r7, #12]
 8016c8e:	2240      	movs	r2, #64	@ 0x40
 8016c90:	2100      	movs	r1, #0
 8016c92:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8016c94:	2300      	movs	r3, #0
 8016c96:	e000      	b.n	8016c9a <HAL_I2C_Mem_Read+0x256>
  }
  else
  {
    return HAL_BUSY;
 8016c98:	2302      	movs	r3, #2
  }
}
 8016c9a:	0018      	movs	r0, r3
 8016c9c:	46bd      	mov	sp, r7
 8016c9e:	b007      	add	sp, #28
 8016ca0:	bd90      	pop	{r4, r7, pc}
 8016ca2:	46c0      	nop			@ (mov r8, r8)
 8016ca4:	80002400 	.word	0x80002400
 8016ca8:	fe00e800 	.word	0xfe00e800

08016cac <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8016cac:	b580      	push	{r7, lr}
 8016cae:	b084      	sub	sp, #16
 8016cb0:	af00      	add	r7, sp, #0
 8016cb2:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8016cb4:	687b      	ldr	r3, [r7, #4]
 8016cb6:	681b      	ldr	r3, [r3, #0]
 8016cb8:	699b      	ldr	r3, [r3, #24]
 8016cba:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8016cbc:	687b      	ldr	r3, [r7, #4]
 8016cbe:	681b      	ldr	r3, [r3, #0]
 8016cc0:	681b      	ldr	r3, [r3, #0]
 8016cc2:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8016cc4:	687b      	ldr	r3, [r7, #4]
 8016cc6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8016cc8:	2b00      	cmp	r3, #0
 8016cca:	d005      	beq.n	8016cd8 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8016ccc:	687b      	ldr	r3, [r7, #4]
 8016cce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8016cd0:	68ba      	ldr	r2, [r7, #8]
 8016cd2:	68f9      	ldr	r1, [r7, #12]
 8016cd4:	6878      	ldr	r0, [r7, #4]
 8016cd6:	4798      	blx	r3
  }
}
 8016cd8:	46c0      	nop			@ (mov r8, r8)
 8016cda:	46bd      	mov	sp, r7
 8016cdc:	b004      	add	sp, #16
 8016cde:	bd80      	pop	{r7, pc}

08016ce0 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8016ce0:	b580      	push	{r7, lr}
 8016ce2:	b086      	sub	sp, #24
 8016ce4:	af00      	add	r7, sp, #0
 8016ce6:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8016ce8:	687b      	ldr	r3, [r7, #4]
 8016cea:	681b      	ldr	r3, [r3, #0]
 8016cec:	699b      	ldr	r3, [r3, #24]
 8016cee:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8016cf0:	687b      	ldr	r3, [r7, #4]
 8016cf2:	681b      	ldr	r3, [r3, #0]
 8016cf4:	681b      	ldr	r3, [r3, #0]
 8016cf6:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8016cf8:	697b      	ldr	r3, [r7, #20]
 8016cfa:	0a1b      	lsrs	r3, r3, #8
 8016cfc:	001a      	movs	r2, r3
 8016cfe:	2301      	movs	r3, #1
 8016d00:	4013      	ands	r3, r2
 8016d02:	d010      	beq.n	8016d26 <HAL_I2C_ER_IRQHandler+0x46>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8016d04:	693b      	ldr	r3, [r7, #16]
 8016d06:	09db      	lsrs	r3, r3, #7
 8016d08:	001a      	movs	r2, r3
 8016d0a:	2301      	movs	r3, #1
 8016d0c:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8016d0e:	d00a      	beq.n	8016d26 <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8016d10:	687b      	ldr	r3, [r7, #4]
 8016d12:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8016d14:	2201      	movs	r2, #1
 8016d16:	431a      	orrs	r2, r3
 8016d18:	687b      	ldr	r3, [r7, #4]
 8016d1a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8016d1c:	687b      	ldr	r3, [r7, #4]
 8016d1e:	681b      	ldr	r3, [r3, #0]
 8016d20:	2280      	movs	r2, #128	@ 0x80
 8016d22:	0052      	lsls	r2, r2, #1
 8016d24:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8016d26:	697b      	ldr	r3, [r7, #20]
 8016d28:	0a9b      	lsrs	r3, r3, #10
 8016d2a:	001a      	movs	r2, r3
 8016d2c:	2301      	movs	r3, #1
 8016d2e:	4013      	ands	r3, r2
 8016d30:	d010      	beq.n	8016d54 <HAL_I2C_ER_IRQHandler+0x74>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8016d32:	693b      	ldr	r3, [r7, #16]
 8016d34:	09db      	lsrs	r3, r3, #7
 8016d36:	001a      	movs	r2, r3
 8016d38:	2301      	movs	r3, #1
 8016d3a:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8016d3c:	d00a      	beq.n	8016d54 <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8016d3e:	687b      	ldr	r3, [r7, #4]
 8016d40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8016d42:	2208      	movs	r2, #8
 8016d44:	431a      	orrs	r2, r3
 8016d46:	687b      	ldr	r3, [r7, #4]
 8016d48:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8016d4a:	687b      	ldr	r3, [r7, #4]
 8016d4c:	681b      	ldr	r3, [r3, #0]
 8016d4e:	2280      	movs	r2, #128	@ 0x80
 8016d50:	00d2      	lsls	r2, r2, #3
 8016d52:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8016d54:	697b      	ldr	r3, [r7, #20]
 8016d56:	0a5b      	lsrs	r3, r3, #9
 8016d58:	001a      	movs	r2, r3
 8016d5a:	2301      	movs	r3, #1
 8016d5c:	4013      	ands	r3, r2
 8016d5e:	d010      	beq.n	8016d82 <HAL_I2C_ER_IRQHandler+0xa2>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8016d60:	693b      	ldr	r3, [r7, #16]
 8016d62:	09db      	lsrs	r3, r3, #7
 8016d64:	001a      	movs	r2, r3
 8016d66:	2301      	movs	r3, #1
 8016d68:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8016d6a:	d00a      	beq.n	8016d82 <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8016d6c:	687b      	ldr	r3, [r7, #4]
 8016d6e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8016d70:	2202      	movs	r2, #2
 8016d72:	431a      	orrs	r2, r3
 8016d74:	687b      	ldr	r3, [r7, #4]
 8016d76:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8016d78:	687b      	ldr	r3, [r7, #4]
 8016d7a:	681b      	ldr	r3, [r3, #0]
 8016d7c:	2280      	movs	r2, #128	@ 0x80
 8016d7e:	0092      	lsls	r2, r2, #2
 8016d80:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8016d82:	687b      	ldr	r3, [r7, #4]
 8016d84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8016d86:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8016d88:	68fb      	ldr	r3, [r7, #12]
 8016d8a:	220b      	movs	r2, #11
 8016d8c:	4013      	ands	r3, r2
 8016d8e:	d005      	beq.n	8016d9c <HAL_I2C_ER_IRQHandler+0xbc>
  {
    I2C_ITError(hi2c, tmperror);
 8016d90:	68fa      	ldr	r2, [r7, #12]
 8016d92:	687b      	ldr	r3, [r7, #4]
 8016d94:	0011      	movs	r1, r2
 8016d96:	0018      	movs	r0, r3
 8016d98:	f001 fa46 	bl	8018228 <I2C_ITError>
  }
}
 8016d9c:	46c0      	nop			@ (mov r8, r8)
 8016d9e:	46bd      	mov	sp, r7
 8016da0:	b006      	add	sp, #24
 8016da2:	bd80      	pop	{r7, pc}

08016da4 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8016da4:	b580      	push	{r7, lr}
 8016da6:	b082      	sub	sp, #8
 8016da8:	af00      	add	r7, sp, #0
 8016daa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8016dac:	46c0      	nop			@ (mov r8, r8)
 8016dae:	46bd      	mov	sp, r7
 8016db0:	b002      	add	sp, #8
 8016db2:	bd80      	pop	{r7, pc}

08016db4 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8016db4:	b580      	push	{r7, lr}
 8016db6:	b082      	sub	sp, #8
 8016db8:	af00      	add	r7, sp, #0
 8016dba:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8016dbc:	46c0      	nop			@ (mov r8, r8)
 8016dbe:	46bd      	mov	sp, r7
 8016dc0:	b002      	add	sp, #8
 8016dc2:	bd80      	pop	{r7, pc}

08016dc4 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8016dc4:	b580      	push	{r7, lr}
 8016dc6:	b082      	sub	sp, #8
 8016dc8:	af00      	add	r7, sp, #0
 8016dca:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8016dcc:	46c0      	nop			@ (mov r8, r8)
 8016dce:	46bd      	mov	sp, r7
 8016dd0:	b002      	add	sp, #8
 8016dd2:	bd80      	pop	{r7, pc}

08016dd4 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8016dd4:	b580      	push	{r7, lr}
 8016dd6:	b082      	sub	sp, #8
 8016dd8:	af00      	add	r7, sp, #0
 8016dda:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8016ddc:	46c0      	nop			@ (mov r8, r8)
 8016dde:	46bd      	mov	sp, r7
 8016de0:	b002      	add	sp, #8
 8016de2:	bd80      	pop	{r7, pc}

08016de4 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8016de4:	b580      	push	{r7, lr}
 8016de6:	b082      	sub	sp, #8
 8016de8:	af00      	add	r7, sp, #0
 8016dea:	6078      	str	r0, [r7, #4]
 8016dec:	0008      	movs	r0, r1
 8016dee:	0011      	movs	r1, r2
 8016df0:	1cfb      	adds	r3, r7, #3
 8016df2:	1c02      	adds	r2, r0, #0
 8016df4:	701a      	strb	r2, [r3, #0]
 8016df6:	003b      	movs	r3, r7
 8016df8:	1c0a      	adds	r2, r1, #0
 8016dfa:	801a      	strh	r2, [r3, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8016dfc:	46c0      	nop			@ (mov r8, r8)
 8016dfe:	46bd      	mov	sp, r7
 8016e00:	b002      	add	sp, #8
 8016e02:	bd80      	pop	{r7, pc}

08016e04 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8016e04:	b580      	push	{r7, lr}
 8016e06:	b082      	sub	sp, #8
 8016e08:	af00      	add	r7, sp, #0
 8016e0a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8016e0c:	46c0      	nop			@ (mov r8, r8)
 8016e0e:	46bd      	mov	sp, r7
 8016e10:	b002      	add	sp, #8
 8016e12:	bd80      	pop	{r7, pc}

08016e14 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8016e14:	b580      	push	{r7, lr}
 8016e16:	b082      	sub	sp, #8
 8016e18:	af00      	add	r7, sp, #0
 8016e1a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8016e1c:	46c0      	nop			@ (mov r8, r8)
 8016e1e:	46bd      	mov	sp, r7
 8016e20:	b002      	add	sp, #8
 8016e22:	bd80      	pop	{r7, pc}

08016e24 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8016e24:	b580      	push	{r7, lr}
 8016e26:	b082      	sub	sp, #8
 8016e28:	af00      	add	r7, sp, #0
 8016e2a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8016e2c:	46c0      	nop			@ (mov r8, r8)
 8016e2e:	46bd      	mov	sp, r7
 8016e30:	b002      	add	sp, #8
 8016e32:	bd80      	pop	{r7, pc}

08016e34 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8016e34:	b580      	push	{r7, lr}
 8016e36:	b082      	sub	sp, #8
 8016e38:	af00      	add	r7, sp, #0
 8016e3a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8016e3c:	46c0      	nop			@ (mov r8, r8)
 8016e3e:	46bd      	mov	sp, r7
 8016e40:	b002      	add	sp, #8
 8016e42:	bd80      	pop	{r7, pc}

08016e44 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8016e44:	b580      	push	{r7, lr}
 8016e46:	b082      	sub	sp, #8
 8016e48:	af00      	add	r7, sp, #0
 8016e4a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8016e4c:	46c0      	nop			@ (mov r8, r8)
 8016e4e:	46bd      	mov	sp, r7
 8016e50:	b002      	add	sp, #8
 8016e52:	bd80      	pop	{r7, pc}

08016e54 <I2C_Master_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8016e54:	b590      	push	{r4, r7, lr}
 8016e56:	b089      	sub	sp, #36	@ 0x24
 8016e58:	af02      	add	r7, sp, #8
 8016e5a:	60f8      	str	r0, [r7, #12]
 8016e5c:	60b9      	str	r1, [r7, #8]
 8016e5e:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t tmpITFlags = ITFlags;
 8016e60:	68bb      	ldr	r3, [r7, #8]
 8016e62:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8016e64:	68fb      	ldr	r3, [r7, #12]
 8016e66:	2240      	movs	r2, #64	@ 0x40
 8016e68:	5c9b      	ldrb	r3, [r3, r2]
 8016e6a:	2b01      	cmp	r3, #1
 8016e6c:	d101      	bne.n	8016e72 <I2C_Master_ISR_IT+0x1e>
 8016e6e:	2302      	movs	r3, #2
 8016e70:	e12b      	b.n	80170ca <I2C_Master_ISR_IT+0x276>
 8016e72:	68fb      	ldr	r3, [r7, #12]
 8016e74:	2240      	movs	r2, #64	@ 0x40
 8016e76:	2101      	movs	r1, #1
 8016e78:	5499      	strb	r1, [r3, r2]

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8016e7a:	697b      	ldr	r3, [r7, #20]
 8016e7c:	091b      	lsrs	r3, r3, #4
 8016e7e:	001a      	movs	r2, r3
 8016e80:	2301      	movs	r3, #1
 8016e82:	4013      	ands	r3, r2
 8016e84:	d014      	beq.n	8016eb0 <I2C_Master_ISR_IT+0x5c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8016e86:	687b      	ldr	r3, [r7, #4]
 8016e88:	091b      	lsrs	r3, r3, #4
 8016e8a:	001a      	movs	r2, r3
 8016e8c:	2301      	movs	r3, #1
 8016e8e:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8016e90:	d00e      	beq.n	8016eb0 <I2C_Master_ISR_IT+0x5c>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8016e92:	68fb      	ldr	r3, [r7, #12]
 8016e94:	681b      	ldr	r3, [r3, #0]
 8016e96:	2210      	movs	r2, #16
 8016e98:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8016e9a:	68fb      	ldr	r3, [r7, #12]
 8016e9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8016e9e:	2204      	movs	r2, #4
 8016ea0:	431a      	orrs	r2, r3
 8016ea2:	68fb      	ldr	r3, [r7, #12]
 8016ea4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8016ea6:	68fb      	ldr	r3, [r7, #12]
 8016ea8:	0018      	movs	r0, r3
 8016eaa:	f001 fae8 	bl	801847e <I2C_Flush_TXDR>
 8016eae:	e0f5      	b.n	801709c <I2C_Master_ISR_IT+0x248>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8016eb0:	697b      	ldr	r3, [r7, #20]
 8016eb2:	089b      	lsrs	r3, r3, #2
 8016eb4:	001a      	movs	r2, r3
 8016eb6:	2301      	movs	r3, #1
 8016eb8:	4013      	ands	r3, r2
 8016eba:	d023      	beq.n	8016f04 <I2C_Master_ISR_IT+0xb0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8016ebc:	687b      	ldr	r3, [r7, #4]
 8016ebe:	089b      	lsrs	r3, r3, #2
 8016ec0:	001a      	movs	r2, r3
 8016ec2:	2301      	movs	r3, #1
 8016ec4:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8016ec6:	d01d      	beq.n	8016f04 <I2C_Master_ISR_IT+0xb0>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8016ec8:	697b      	ldr	r3, [r7, #20]
 8016eca:	2204      	movs	r2, #4
 8016ecc:	4393      	bics	r3, r2
 8016ece:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8016ed0:	68fb      	ldr	r3, [r7, #12]
 8016ed2:	681b      	ldr	r3, [r3, #0]
 8016ed4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8016ed6:	68fb      	ldr	r3, [r7, #12]
 8016ed8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016eda:	b2d2      	uxtb	r2, r2
 8016edc:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8016ede:	68fb      	ldr	r3, [r7, #12]
 8016ee0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016ee2:	1c5a      	adds	r2, r3, #1
 8016ee4:	68fb      	ldr	r3, [r7, #12]
 8016ee6:	625a      	str	r2, [r3, #36]	@ 0x24

    hi2c->XferSize--;
 8016ee8:	68fb      	ldr	r3, [r7, #12]
 8016eea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8016eec:	3b01      	subs	r3, #1
 8016eee:	b29a      	uxth	r2, r3
 8016ef0:	68fb      	ldr	r3, [r7, #12]
 8016ef2:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferCount--;
 8016ef4:	68fb      	ldr	r3, [r7, #12]
 8016ef6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8016ef8:	b29b      	uxth	r3, r3
 8016efa:	3b01      	subs	r3, #1
 8016efc:	b29a      	uxth	r2, r3
 8016efe:	68fb      	ldr	r3, [r7, #12]
 8016f00:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8016f02:	e0cb      	b.n	801709c <I2C_Master_ISR_IT+0x248>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8016f04:	697b      	ldr	r3, [r7, #20]
 8016f06:	085b      	lsrs	r3, r3, #1
 8016f08:	001a      	movs	r2, r3
 8016f0a:	2301      	movs	r3, #1
 8016f0c:	4013      	ands	r3, r2
 8016f0e:	d01e      	beq.n	8016f4e <I2C_Master_ISR_IT+0xfa>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8016f10:	687b      	ldr	r3, [r7, #4]
 8016f12:	085b      	lsrs	r3, r3, #1
 8016f14:	001a      	movs	r2, r3
 8016f16:	2301      	movs	r3, #1
 8016f18:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8016f1a:	d018      	beq.n	8016f4e <I2C_Master_ISR_IT+0xfa>
  {
    /* Write data to TXDR */
    hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8016f1c:	68fb      	ldr	r3, [r7, #12]
 8016f1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016f20:	781a      	ldrb	r2, [r3, #0]
 8016f22:	68fb      	ldr	r3, [r7, #12]
 8016f24:	681b      	ldr	r3, [r3, #0]
 8016f26:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8016f28:	68fb      	ldr	r3, [r7, #12]
 8016f2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016f2c:	1c5a      	adds	r2, r3, #1
 8016f2e:	68fb      	ldr	r3, [r7, #12]
 8016f30:	625a      	str	r2, [r3, #36]	@ 0x24

    hi2c->XferSize--;
 8016f32:	68fb      	ldr	r3, [r7, #12]
 8016f34:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8016f36:	3b01      	subs	r3, #1
 8016f38:	b29a      	uxth	r2, r3
 8016f3a:	68fb      	ldr	r3, [r7, #12]
 8016f3c:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferCount--;
 8016f3e:	68fb      	ldr	r3, [r7, #12]
 8016f40:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8016f42:	b29b      	uxth	r3, r3
 8016f44:	3b01      	subs	r3, #1
 8016f46:	b29a      	uxth	r2, r3
 8016f48:	68fb      	ldr	r3, [r7, #12]
 8016f4a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8016f4c:	e0a6      	b.n	801709c <I2C_Master_ISR_IT+0x248>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 8016f4e:	697b      	ldr	r3, [r7, #20]
 8016f50:	09db      	lsrs	r3, r3, #7
 8016f52:	001a      	movs	r2, r3
 8016f54:	2301      	movs	r3, #1
 8016f56:	4013      	ands	r3, r2
 8016f58:	d100      	bne.n	8016f5c <I2C_Master_ISR_IT+0x108>
 8016f5a:	e06b      	b.n	8017034 <I2C_Master_ISR_IT+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8016f5c:	687b      	ldr	r3, [r7, #4]
 8016f5e:	099b      	lsrs	r3, r3, #6
 8016f60:	001a      	movs	r2, r3
 8016f62:	2301      	movs	r3, #1
 8016f64:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 8016f66:	d065      	beq.n	8017034 <I2C_Master_ISR_IT+0x1e0>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8016f68:	68fb      	ldr	r3, [r7, #12]
 8016f6a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8016f6c:	b29b      	uxth	r3, r3
 8016f6e:	2b00      	cmp	r3, #0
 8016f70:	d04a      	beq.n	8017008 <I2C_Master_ISR_IT+0x1b4>
 8016f72:	68fb      	ldr	r3, [r7, #12]
 8016f74:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8016f76:	2b00      	cmp	r3, #0
 8016f78:	d146      	bne.n	8017008 <I2C_Master_ISR_IT+0x1b4>
    {
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8016f7a:	68fb      	ldr	r3, [r7, #12]
 8016f7c:	681b      	ldr	r3, [r3, #0]
 8016f7e:	685b      	ldr	r3, [r3, #4]
 8016f80:	b29a      	uxth	r2, r3
 8016f82:	2112      	movs	r1, #18
 8016f84:	187b      	adds	r3, r7, r1
 8016f86:	0592      	lsls	r2, r2, #22
 8016f88:	0d92      	lsrs	r2, r2, #22
 8016f8a:	801a      	strh	r2, [r3, #0]

      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8016f8c:	68fb      	ldr	r3, [r7, #12]
 8016f8e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8016f90:	b29b      	uxth	r3, r3
 8016f92:	2bff      	cmp	r3, #255	@ 0xff
 8016f94:	d910      	bls.n	8016fb8 <I2C_Master_ISR_IT+0x164>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8016f96:	68fb      	ldr	r3, [r7, #12]
 8016f98:	22ff      	movs	r2, #255	@ 0xff
 8016f9a:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8016f9c:	68fb      	ldr	r3, [r7, #12]
 8016f9e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8016fa0:	b2da      	uxtb	r2, r3
 8016fa2:	2380      	movs	r3, #128	@ 0x80
 8016fa4:	045c      	lsls	r4, r3, #17
 8016fa6:	187b      	adds	r3, r7, r1
 8016fa8:	8819      	ldrh	r1, [r3, #0]
 8016faa:	68f8      	ldr	r0, [r7, #12]
 8016fac:	2300      	movs	r3, #0
 8016fae:	9300      	str	r3, [sp, #0]
 8016fb0:	0023      	movs	r3, r4
 8016fb2:	f001 fdb1 	bl	8018b18 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8016fb6:	e03c      	b.n	8017032 <I2C_Master_ISR_IT+0x1de>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8016fb8:	68fb      	ldr	r3, [r7, #12]
 8016fba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8016fbc:	b29a      	uxth	r2, r3
 8016fbe:	68fb      	ldr	r3, [r7, #12]
 8016fc0:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8016fc2:	68fb      	ldr	r3, [r7, #12]
 8016fc4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8016fc6:	4a43      	ldr	r2, [pc, #268]	@ (80170d4 <I2C_Master_ISR_IT+0x280>)
 8016fc8:	4293      	cmp	r3, r2
 8016fca:	d00e      	beq.n	8016fea <I2C_Master_ISR_IT+0x196>
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8016fcc:	68fb      	ldr	r3, [r7, #12]
 8016fce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8016fd0:	b2da      	uxtb	r2, r3
                             hi2c->XferOptions, I2C_NO_STARTSTOP);
 8016fd2:	68fb      	ldr	r3, [r7, #12]
 8016fd4:	6adc      	ldr	r4, [r3, #44]	@ 0x2c
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8016fd6:	2312      	movs	r3, #18
 8016fd8:	18fb      	adds	r3, r7, r3
 8016fda:	8819      	ldrh	r1, [r3, #0]
 8016fdc:	68f8      	ldr	r0, [r7, #12]
 8016fde:	2300      	movs	r3, #0
 8016fe0:	9300      	str	r3, [sp, #0]
 8016fe2:	0023      	movs	r3, r4
 8016fe4:	f001 fd98 	bl	8018b18 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8016fe8:	e023      	b.n	8017032 <I2C_Master_ISR_IT+0x1de>
        }
        else
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8016fea:	68fb      	ldr	r3, [r7, #12]
 8016fec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8016fee:	b2da      	uxtb	r2, r3
 8016ff0:	2380      	movs	r3, #128	@ 0x80
 8016ff2:	049c      	lsls	r4, r3, #18
 8016ff4:	2312      	movs	r3, #18
 8016ff6:	18fb      	adds	r3, r7, r3
 8016ff8:	8819      	ldrh	r1, [r3, #0]
 8016ffa:	68f8      	ldr	r0, [r7, #12]
 8016ffc:	2300      	movs	r3, #0
 8016ffe:	9300      	str	r3, [sp, #0]
 8017000:	0023      	movs	r3, r4
 8017002:	f001 fd89 	bl	8018b18 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8017006:	e014      	b.n	8017032 <I2C_Master_ISR_IT+0x1de>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8017008:	68fb      	ldr	r3, [r7, #12]
 801700a:	681b      	ldr	r3, [r3, #0]
 801700c:	685a      	ldr	r2, [r3, #4]
 801700e:	2380      	movs	r3, #128	@ 0x80
 8017010:	049b      	lsls	r3, r3, #18
 8017012:	401a      	ands	r2, r3
 8017014:	2380      	movs	r3, #128	@ 0x80
 8017016:	049b      	lsls	r3, r3, #18
 8017018:	429a      	cmp	r2, r3
 801701a:	d004      	beq.n	8017026 <I2C_Master_ISR_IT+0x1d2>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 801701c:	68fb      	ldr	r3, [r7, #12]
 801701e:	0018      	movs	r0, r3
 8017020:	f000 fe0a 	bl	8017c38 <I2C_ITMasterSeqCplt>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8017024:	e03a      	b.n	801709c <I2C_Master_ISR_IT+0x248>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8017026:	68fb      	ldr	r3, [r7, #12]
 8017028:	2140      	movs	r1, #64	@ 0x40
 801702a:	0018      	movs	r0, r3
 801702c:	f001 f8fc 	bl	8018228 <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8017030:	e034      	b.n	801709c <I2C_Master_ISR_IT+0x248>
 8017032:	e033      	b.n	801709c <I2C_Master_ISR_IT+0x248>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 8017034:	697b      	ldr	r3, [r7, #20]
 8017036:	099b      	lsrs	r3, r3, #6
 8017038:	001a      	movs	r2, r3
 801703a:	2301      	movs	r3, #1
 801703c:	4013      	ands	r3, r2
 801703e:	d02d      	beq.n	801709c <I2C_Master_ISR_IT+0x248>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8017040:	687b      	ldr	r3, [r7, #4]
 8017042:	099b      	lsrs	r3, r3, #6
 8017044:	001a      	movs	r2, r3
 8017046:	2301      	movs	r3, #1
 8017048:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 801704a:	d027      	beq.n	801709c <I2C_Master_ISR_IT+0x248>
  {
    if (hi2c->XferCount == 0U)
 801704c:	68fb      	ldr	r3, [r7, #12]
 801704e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8017050:	b29b      	uxth	r3, r3
 8017052:	2b00      	cmp	r3, #0
 8017054:	d11d      	bne.n	8017092 <I2C_Master_ISR_IT+0x23e>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8017056:	68fb      	ldr	r3, [r7, #12]
 8017058:	681b      	ldr	r3, [r3, #0]
 801705a:	685a      	ldr	r2, [r3, #4]
 801705c:	2380      	movs	r3, #128	@ 0x80
 801705e:	049b      	lsls	r3, r3, #18
 8017060:	401a      	ands	r2, r3
 8017062:	2380      	movs	r3, #128	@ 0x80
 8017064:	049b      	lsls	r3, r3, #18
 8017066:	429a      	cmp	r2, r3
 8017068:	d018      	beq.n	801709c <I2C_Master_ISR_IT+0x248>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 801706a:	68fb      	ldr	r3, [r7, #12]
 801706c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801706e:	4a19      	ldr	r2, [pc, #100]	@ (80170d4 <I2C_Master_ISR_IT+0x280>)
 8017070:	4293      	cmp	r3, r2
 8017072:	d109      	bne.n	8017088 <I2C_Master_ISR_IT+0x234>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8017074:	68fb      	ldr	r3, [r7, #12]
 8017076:	681b      	ldr	r3, [r3, #0]
 8017078:	685a      	ldr	r2, [r3, #4]
 801707a:	68fb      	ldr	r3, [r7, #12]
 801707c:	681b      	ldr	r3, [r3, #0]
 801707e:	2180      	movs	r1, #128	@ 0x80
 8017080:	01c9      	lsls	r1, r1, #7
 8017082:	430a      	orrs	r2, r1
 8017084:	605a      	str	r2, [r3, #4]
 8017086:	e009      	b.n	801709c <I2C_Master_ISR_IT+0x248>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8017088:	68fb      	ldr	r3, [r7, #12]
 801708a:	0018      	movs	r0, r3
 801708c:	f000 fdd4 	bl	8017c38 <I2C_ITMasterSeqCplt>
 8017090:	e004      	b.n	801709c <I2C_Master_ISR_IT+0x248>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8017092:	68fb      	ldr	r3, [r7, #12]
 8017094:	2140      	movs	r1, #64	@ 0x40
 8017096:	0018      	movs	r0, r3
 8017098:	f001 f8c6 	bl	8018228 <I2C_ITError>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 801709c:	697b      	ldr	r3, [r7, #20]
 801709e:	095b      	lsrs	r3, r3, #5
 80170a0:	001a      	movs	r2, r3
 80170a2:	2301      	movs	r3, #1
 80170a4:	4013      	ands	r3, r2
 80170a6:	d00b      	beq.n	80170c0 <I2C_Master_ISR_IT+0x26c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80170a8:	687b      	ldr	r3, [r7, #4]
 80170aa:	095b      	lsrs	r3, r3, #5
 80170ac:	001a      	movs	r2, r3
 80170ae:	2301      	movs	r3, #1
 80170b0:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80170b2:	d005      	beq.n	80170c0 <I2C_Master_ISR_IT+0x26c>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 80170b4:	697a      	ldr	r2, [r7, #20]
 80170b6:	68fb      	ldr	r3, [r7, #12]
 80170b8:	0011      	movs	r1, r2
 80170ba:	0018      	movs	r0, r3
 80170bc:	f000 fe64 	bl	8017d88 <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80170c0:	68fb      	ldr	r3, [r7, #12]
 80170c2:	2240      	movs	r2, #64	@ 0x40
 80170c4:	2100      	movs	r1, #0
 80170c6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80170c8:	2300      	movs	r3, #0
}
 80170ca:	0018      	movs	r0, r3
 80170cc:	46bd      	mov	sp, r7
 80170ce:	b007      	add	sp, #28
 80170d0:	bd90      	pop	{r4, r7, pc}
 80170d2:	46c0      	nop			@ (mov r8, r8)
 80170d4:	ffff0000 	.word	0xffff0000

080170d8 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 80170d8:	b580      	push	{r7, lr}
 80170da:	b086      	sub	sp, #24
 80170dc:	af00      	add	r7, sp, #0
 80170de:	60f8      	str	r0, [r7, #12]
 80170e0:	60b9      	str	r1, [r7, #8]
 80170e2:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 80170e4:	68fb      	ldr	r3, [r7, #12]
 80170e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80170e8:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 80170ea:	68bb      	ldr	r3, [r7, #8]
 80170ec:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 80170ee:	68fb      	ldr	r3, [r7, #12]
 80170f0:	2240      	movs	r2, #64	@ 0x40
 80170f2:	5c9b      	ldrb	r3, [r3, r2]
 80170f4:	2b01      	cmp	r3, #1
 80170f6:	d101      	bne.n	80170fc <I2C_Slave_ISR_IT+0x24>
 80170f8:	2302      	movs	r3, #2
 80170fa:	e0fa      	b.n	80172f2 <I2C_Slave_ISR_IT+0x21a>
 80170fc:	68fb      	ldr	r3, [r7, #12]
 80170fe:	2240      	movs	r2, #64	@ 0x40
 8017100:	2101      	movs	r1, #1
 8017102:	5499      	strb	r1, [r3, r2]

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8017104:	693b      	ldr	r3, [r7, #16]
 8017106:	095b      	lsrs	r3, r3, #5
 8017108:	001a      	movs	r2, r3
 801710a:	2301      	movs	r3, #1
 801710c:	4013      	ands	r3, r2
 801710e:	d00b      	beq.n	8017128 <I2C_Slave_ISR_IT+0x50>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8017110:	687b      	ldr	r3, [r7, #4]
 8017112:	095b      	lsrs	r3, r3, #5
 8017114:	001a      	movs	r2, r3
 8017116:	2301      	movs	r3, #1
 8017118:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 801711a:	d005      	beq.n	8017128 <I2C_Slave_ISR_IT+0x50>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 801711c:	693a      	ldr	r2, [r7, #16]
 801711e:	68fb      	ldr	r3, [r7, #12]
 8017120:	0011      	movs	r1, r2
 8017122:	0018      	movs	r0, r3
 8017124:	f000 ff02 	bl	8017f2c <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8017128:	693b      	ldr	r3, [r7, #16]
 801712a:	091b      	lsrs	r3, r3, #4
 801712c:	001a      	movs	r2, r3
 801712e:	2301      	movs	r3, #1
 8017130:	4013      	ands	r3, r2
 8017132:	d054      	beq.n	80171de <I2C_Slave_ISR_IT+0x106>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8017134:	687b      	ldr	r3, [r7, #4]
 8017136:	091b      	lsrs	r3, r3, #4
 8017138:	001a      	movs	r2, r3
 801713a:	2301      	movs	r3, #1
 801713c:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 801713e:	d04e      	beq.n	80171de <I2C_Slave_ISR_IT+0x106>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8017140:	68fb      	ldr	r3, [r7, #12]
 8017142:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8017144:	b29b      	uxth	r3, r3
 8017146:	2b00      	cmp	r3, #0
 8017148:	d12d      	bne.n	80171a6 <I2C_Slave_ISR_IT+0xce>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 801714a:	68fb      	ldr	r3, [r7, #12]
 801714c:	2241      	movs	r2, #65	@ 0x41
 801714e:	5c9b      	ldrb	r3, [r3, r2]
 8017150:	b2db      	uxtb	r3, r3
 8017152:	2b28      	cmp	r3, #40	@ 0x28
 8017154:	d10b      	bne.n	801716e <I2C_Slave_ISR_IT+0x96>
 8017156:	697a      	ldr	r2, [r7, #20]
 8017158:	2380      	movs	r3, #128	@ 0x80
 801715a:	049b      	lsls	r3, r3, #18
 801715c:	429a      	cmp	r2, r3
 801715e:	d106      	bne.n	801716e <I2C_Slave_ISR_IT+0x96>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8017160:	693a      	ldr	r2, [r7, #16]
 8017162:	68fb      	ldr	r3, [r7, #12]
 8017164:	0011      	movs	r1, r2
 8017166:	0018      	movs	r0, r3
 8017168:	f001 f804 	bl	8018174 <I2C_ITListenCplt>
 801716c:	e036      	b.n	80171dc <I2C_Slave_ISR_IT+0x104>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 801716e:	68fb      	ldr	r3, [r7, #12]
 8017170:	2241      	movs	r2, #65	@ 0x41
 8017172:	5c9b      	ldrb	r3, [r3, r2]
 8017174:	b2db      	uxtb	r3, r3
 8017176:	2b29      	cmp	r3, #41	@ 0x29
 8017178:	d110      	bne.n	801719c <I2C_Slave_ISR_IT+0xc4>
 801717a:	697b      	ldr	r3, [r7, #20]
 801717c:	4a5f      	ldr	r2, [pc, #380]	@ (80172fc <I2C_Slave_ISR_IT+0x224>)
 801717e:	4293      	cmp	r3, r2
 8017180:	d00c      	beq.n	801719c <I2C_Slave_ISR_IT+0xc4>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8017182:	68fb      	ldr	r3, [r7, #12]
 8017184:	681b      	ldr	r3, [r3, #0]
 8017186:	2210      	movs	r2, #16
 8017188:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 801718a:	68fb      	ldr	r3, [r7, #12]
 801718c:	0018      	movs	r0, r3
 801718e:	f001 f976 	bl	801847e <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8017192:	68fb      	ldr	r3, [r7, #12]
 8017194:	0018      	movs	r0, r3
 8017196:	f000 fd91 	bl	8017cbc <I2C_ITSlaveSeqCplt>
 801719a:	e01f      	b.n	80171dc <I2C_Slave_ISR_IT+0x104>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 801719c:	68fb      	ldr	r3, [r7, #12]
 801719e:	681b      	ldr	r3, [r3, #0]
 80171a0:	2210      	movs	r2, #16
 80171a2:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 80171a4:	e09d      	b.n	80172e2 <I2C_Slave_ISR_IT+0x20a>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80171a6:	68fb      	ldr	r3, [r7, #12]
 80171a8:	681b      	ldr	r3, [r3, #0]
 80171aa:	2210      	movs	r2, #16
 80171ac:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80171ae:	68fb      	ldr	r3, [r7, #12]
 80171b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80171b2:	2204      	movs	r2, #4
 80171b4:	431a      	orrs	r2, r3
 80171b6:	68fb      	ldr	r3, [r7, #12]
 80171b8:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80171ba:	697b      	ldr	r3, [r7, #20]
 80171bc:	2b00      	cmp	r3, #0
 80171be:	d005      	beq.n	80171cc <I2C_Slave_ISR_IT+0xf4>
 80171c0:	697a      	ldr	r2, [r7, #20]
 80171c2:	2380      	movs	r3, #128	@ 0x80
 80171c4:	045b      	lsls	r3, r3, #17
 80171c6:	429a      	cmp	r2, r3
 80171c8:	d000      	beq.n	80171cc <I2C_Slave_ISR_IT+0xf4>
 80171ca:	e08a      	b.n	80172e2 <I2C_Slave_ISR_IT+0x20a>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 80171cc:	68fb      	ldr	r3, [r7, #12]
 80171ce:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80171d0:	68fb      	ldr	r3, [r7, #12]
 80171d2:	0011      	movs	r1, r2
 80171d4:	0018      	movs	r0, r3
 80171d6:	f001 f827 	bl	8018228 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 80171da:	e082      	b.n	80172e2 <I2C_Slave_ISR_IT+0x20a>
 80171dc:	e081      	b.n	80172e2 <I2C_Slave_ISR_IT+0x20a>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80171de:	693b      	ldr	r3, [r7, #16]
 80171e0:	089b      	lsrs	r3, r3, #2
 80171e2:	001a      	movs	r2, r3
 80171e4:	2301      	movs	r3, #1
 80171e6:	4013      	ands	r3, r2
 80171e8:	d031      	beq.n	801724e <I2C_Slave_ISR_IT+0x176>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 80171ea:	687b      	ldr	r3, [r7, #4]
 80171ec:	089b      	lsrs	r3, r3, #2
 80171ee:	001a      	movs	r2, r3
 80171f0:	2301      	movs	r3, #1
 80171f2:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80171f4:	d02b      	beq.n	801724e <I2C_Slave_ISR_IT+0x176>
  {
    if (hi2c->XferCount > 0U)
 80171f6:	68fb      	ldr	r3, [r7, #12]
 80171f8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80171fa:	b29b      	uxth	r3, r3
 80171fc:	2b00      	cmp	r3, #0
 80171fe:	d018      	beq.n	8017232 <I2C_Slave_ISR_IT+0x15a>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8017200:	68fb      	ldr	r3, [r7, #12]
 8017202:	681b      	ldr	r3, [r3, #0]
 8017204:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8017206:	68fb      	ldr	r3, [r7, #12]
 8017208:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801720a:	b2d2      	uxtb	r2, r2
 801720c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 801720e:	68fb      	ldr	r3, [r7, #12]
 8017210:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8017212:	1c5a      	adds	r2, r3, #1
 8017214:	68fb      	ldr	r3, [r7, #12]
 8017216:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8017218:	68fb      	ldr	r3, [r7, #12]
 801721a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801721c:	3b01      	subs	r3, #1
 801721e:	b29a      	uxth	r2, r3
 8017220:	68fb      	ldr	r3, [r7, #12]
 8017222:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8017224:	68fb      	ldr	r3, [r7, #12]
 8017226:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8017228:	b29b      	uxth	r3, r3
 801722a:	3b01      	subs	r3, #1
 801722c:	b29a      	uxth	r2, r3
 801722e:	68fb      	ldr	r3, [r7, #12]
 8017230:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8017232:	68fb      	ldr	r3, [r7, #12]
 8017234:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8017236:	b29b      	uxth	r3, r3
 8017238:	2b00      	cmp	r3, #0
 801723a:	d154      	bne.n	80172e6 <I2C_Slave_ISR_IT+0x20e>
 801723c:	697b      	ldr	r3, [r7, #20]
 801723e:	4a2f      	ldr	r2, [pc, #188]	@ (80172fc <I2C_Slave_ISR_IT+0x224>)
 8017240:	4293      	cmp	r3, r2
 8017242:	d050      	beq.n	80172e6 <I2C_Slave_ISR_IT+0x20e>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8017244:	68fb      	ldr	r3, [r7, #12]
 8017246:	0018      	movs	r0, r3
 8017248:	f000 fd38 	bl	8017cbc <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 801724c:	e04b      	b.n	80172e6 <I2C_Slave_ISR_IT+0x20e>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 801724e:	693b      	ldr	r3, [r7, #16]
 8017250:	08db      	lsrs	r3, r3, #3
 8017252:	001a      	movs	r2, r3
 8017254:	2301      	movs	r3, #1
 8017256:	4013      	ands	r3, r2
 8017258:	d00c      	beq.n	8017274 <I2C_Slave_ISR_IT+0x19c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 801725a:	687b      	ldr	r3, [r7, #4]
 801725c:	08db      	lsrs	r3, r3, #3
 801725e:	001a      	movs	r2, r3
 8017260:	2301      	movs	r3, #1
 8017262:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8017264:	d006      	beq.n	8017274 <I2C_Slave_ISR_IT+0x19c>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8017266:	693a      	ldr	r2, [r7, #16]
 8017268:	68fb      	ldr	r3, [r7, #12]
 801726a:	0011      	movs	r1, r2
 801726c:	0018      	movs	r0, r3
 801726e:	f000 fc3f 	bl	8017af0 <I2C_ITAddrCplt>
 8017272:	e039      	b.n	80172e8 <I2C_Slave_ISR_IT+0x210>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8017274:	693b      	ldr	r3, [r7, #16]
 8017276:	085b      	lsrs	r3, r3, #1
 8017278:	001a      	movs	r2, r3
 801727a:	2301      	movs	r3, #1
 801727c:	4013      	ands	r3, r2
 801727e:	d033      	beq.n	80172e8 <I2C_Slave_ISR_IT+0x210>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8017280:	687b      	ldr	r3, [r7, #4]
 8017282:	085b      	lsrs	r3, r3, #1
 8017284:	001a      	movs	r2, r3
 8017286:	2301      	movs	r3, #1
 8017288:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 801728a:	d02d      	beq.n	80172e8 <I2C_Slave_ISR_IT+0x210>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 801728c:	68fb      	ldr	r3, [r7, #12]
 801728e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8017290:	b29b      	uxth	r3, r3
 8017292:	2b00      	cmp	r3, #0
 8017294:	d018      	beq.n	80172c8 <I2C_Slave_ISR_IT+0x1f0>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8017296:	68fb      	ldr	r3, [r7, #12]
 8017298:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801729a:	781a      	ldrb	r2, [r3, #0]
 801729c:	68fb      	ldr	r3, [r7, #12]
 801729e:	681b      	ldr	r3, [r3, #0]
 80172a0:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80172a2:	68fb      	ldr	r3, [r7, #12]
 80172a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80172a6:	1c5a      	adds	r2, r3, #1
 80172a8:	68fb      	ldr	r3, [r7, #12]
 80172aa:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80172ac:	68fb      	ldr	r3, [r7, #12]
 80172ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80172b0:	b29b      	uxth	r3, r3
 80172b2:	3b01      	subs	r3, #1
 80172b4:	b29a      	uxth	r2, r3
 80172b6:	68fb      	ldr	r3, [r7, #12]
 80172b8:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80172ba:	68fb      	ldr	r3, [r7, #12]
 80172bc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80172be:	3b01      	subs	r3, #1
 80172c0:	b29a      	uxth	r2, r3
 80172c2:	68fb      	ldr	r3, [r7, #12]
 80172c4:	851a      	strh	r2, [r3, #40]	@ 0x28
 80172c6:	e00f      	b.n	80172e8 <I2C_Slave_ISR_IT+0x210>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 80172c8:	697a      	ldr	r2, [r7, #20]
 80172ca:	2380      	movs	r3, #128	@ 0x80
 80172cc:	045b      	lsls	r3, r3, #17
 80172ce:	429a      	cmp	r2, r3
 80172d0:	d002      	beq.n	80172d8 <I2C_Slave_ISR_IT+0x200>
 80172d2:	697b      	ldr	r3, [r7, #20]
 80172d4:	2b00      	cmp	r3, #0
 80172d6:	d107      	bne.n	80172e8 <I2C_Slave_ISR_IT+0x210>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80172d8:	68fb      	ldr	r3, [r7, #12]
 80172da:	0018      	movs	r0, r3
 80172dc:	f000 fcee 	bl	8017cbc <I2C_ITSlaveSeqCplt>
 80172e0:	e002      	b.n	80172e8 <I2C_Slave_ISR_IT+0x210>
    if (hi2c->XferCount == 0U)
 80172e2:	46c0      	nop			@ (mov r8, r8)
 80172e4:	e000      	b.n	80172e8 <I2C_Slave_ISR_IT+0x210>
    if ((hi2c->XferCount == 0U) && \
 80172e6:	46c0      	nop			@ (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80172e8:	68fb      	ldr	r3, [r7, #12]
 80172ea:	2240      	movs	r2, #64	@ 0x40
 80172ec:	2100      	movs	r1, #0
 80172ee:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80172f0:	2300      	movs	r3, #0
}
 80172f2:	0018      	movs	r0, r3
 80172f4:	46bd      	mov	sp, r7
 80172f6:	b006      	add	sp, #24
 80172f8:	bd80      	pop	{r7, pc}
 80172fa:	46c0      	nop			@ (mov r8, r8)
 80172fc:	ffff0000 	.word	0xffff0000

08017300 <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 8017300:	b590      	push	{r4, r7, lr}
 8017302:	b089      	sub	sp, #36	@ 0x24
 8017304:	af02      	add	r7, sp, #8
 8017306:	60f8      	str	r0, [r7, #12]
 8017308:	60b9      	str	r1, [r7, #8]
 801730a:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 801730c:	68fb      	ldr	r3, [r7, #12]
 801730e:	2240      	movs	r2, #64	@ 0x40
 8017310:	5c9b      	ldrb	r3, [r3, r2]
 8017312:	2b01      	cmp	r3, #1
 8017314:	d101      	bne.n	801731a <I2C_Master_ISR_DMA+0x1a>
 8017316:	2302      	movs	r3, #2
 8017318:	e0f7      	b.n	801750a <I2C_Master_ISR_DMA+0x20a>
 801731a:	68fb      	ldr	r3, [r7, #12]
 801731c:	2240      	movs	r2, #64	@ 0x40
 801731e:	2101      	movs	r1, #1
 8017320:	5499      	strb	r1, [r3, r2]

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8017322:	68bb      	ldr	r3, [r7, #8]
 8017324:	091b      	lsrs	r3, r3, #4
 8017326:	001a      	movs	r2, r3
 8017328:	2301      	movs	r3, #1
 801732a:	4013      	ands	r3, r2
 801732c:	d019      	beq.n	8017362 <I2C_Master_ISR_DMA+0x62>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 801732e:	687b      	ldr	r3, [r7, #4]
 8017330:	091b      	lsrs	r3, r3, #4
 8017332:	001a      	movs	r2, r3
 8017334:	2301      	movs	r3, #1
 8017336:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8017338:	d013      	beq.n	8017362 <I2C_Master_ISR_DMA+0x62>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 801733a:	68fb      	ldr	r3, [r7, #12]
 801733c:	681b      	ldr	r3, [r3, #0]
 801733e:	2210      	movs	r2, #16
 8017340:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8017342:	68fb      	ldr	r3, [r7, #12]
 8017344:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8017346:	2204      	movs	r2, #4
 8017348:	431a      	orrs	r2, r3
 801734a:	68fb      	ldr	r3, [r7, #12]
 801734c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 801734e:	68fb      	ldr	r3, [r7, #12]
 8017350:	2120      	movs	r1, #32
 8017352:	0018      	movs	r0, r3
 8017354:	f001 fc1a 	bl	8018b8c <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8017358:	68fb      	ldr	r3, [r7, #12]
 801735a:	0018      	movs	r0, r3
 801735c:	f001 f88f 	bl	801847e <I2C_Flush_TXDR>
 8017360:	e0ce      	b.n	8017500 <I2C_Master_ISR_DMA+0x200>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8017362:	68bb      	ldr	r3, [r7, #8]
 8017364:	09db      	lsrs	r3, r3, #7
 8017366:	001a      	movs	r2, r3
 8017368:	2301      	movs	r3, #1
 801736a:	4013      	ands	r3, r2
 801736c:	d100      	bne.n	8017370 <I2C_Master_ISR_DMA+0x70>
 801736e:	e07e      	b.n	801746e <I2C_Master_ISR_DMA+0x16e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8017370:	687b      	ldr	r3, [r7, #4]
 8017372:	099b      	lsrs	r3, r3, #6
 8017374:	001a      	movs	r2, r3
 8017376:	2301      	movs	r3, #1
 8017378:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 801737a:	d100      	bne.n	801737e <I2C_Master_ISR_DMA+0x7e>
 801737c:	e077      	b.n	801746e <I2C_Master_ISR_DMA+0x16e>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 801737e:	68fb      	ldr	r3, [r7, #12]
 8017380:	681b      	ldr	r3, [r3, #0]
 8017382:	681a      	ldr	r2, [r3, #0]
 8017384:	68fb      	ldr	r3, [r7, #12]
 8017386:	681b      	ldr	r3, [r3, #0]
 8017388:	2140      	movs	r1, #64	@ 0x40
 801738a:	438a      	bics	r2, r1
 801738c:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 801738e:	68fb      	ldr	r3, [r7, #12]
 8017390:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8017392:	b29b      	uxth	r3, r3
 8017394:	2b00      	cmp	r3, #0
 8017396:	d055      	beq.n	8017444 <I2C_Master_ISR_DMA+0x144>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8017398:	68fb      	ldr	r3, [r7, #12]
 801739a:	681b      	ldr	r3, [r3, #0]
 801739c:	685b      	ldr	r3, [r3, #4]
 801739e:	b29a      	uxth	r2, r3
 80173a0:	2312      	movs	r3, #18
 80173a2:	18fb      	adds	r3, r7, r3
 80173a4:	0592      	lsls	r2, r2, #22
 80173a6:	0d92      	lsrs	r2, r2, #22
 80173a8:	801a      	strh	r2, [r3, #0]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80173aa:	68fb      	ldr	r3, [r7, #12]
 80173ac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80173ae:	b29b      	uxth	r3, r3
 80173b0:	2bff      	cmp	r3, #255	@ 0xff
 80173b2:	d906      	bls.n	80173c2 <I2C_Master_ISR_DMA+0xc2>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 80173b4:	68fb      	ldr	r3, [r7, #12]
 80173b6:	22ff      	movs	r2, #255	@ 0xff
 80173b8:	851a      	strh	r2, [r3, #40]	@ 0x28
        xfermode = I2C_RELOAD_MODE;
 80173ba:	2380      	movs	r3, #128	@ 0x80
 80173bc:	045b      	lsls	r3, r3, #17
 80173be:	617b      	str	r3, [r7, #20]
 80173c0:	e010      	b.n	80173e4 <I2C_Master_ISR_DMA+0xe4>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 80173c2:	68fb      	ldr	r3, [r7, #12]
 80173c4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80173c6:	b29a      	uxth	r2, r3
 80173c8:	68fb      	ldr	r3, [r7, #12]
 80173ca:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80173cc:	68fb      	ldr	r3, [r7, #12]
 80173ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80173d0:	4a50      	ldr	r2, [pc, #320]	@ (8017514 <I2C_Master_ISR_DMA+0x214>)
 80173d2:	4293      	cmp	r3, r2
 80173d4:	d003      	beq.n	80173de <I2C_Master_ISR_DMA+0xde>
        {
          xfermode = hi2c->XferOptions;
 80173d6:	68fb      	ldr	r3, [r7, #12]
 80173d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80173da:	617b      	str	r3, [r7, #20]
 80173dc:	e002      	b.n	80173e4 <I2C_Master_ISR_DMA+0xe4>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 80173de:	2380      	movs	r3, #128	@ 0x80
 80173e0:	049b      	lsls	r3, r3, #18
 80173e2:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 80173e4:	68fb      	ldr	r3, [r7, #12]
 80173e6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80173e8:	b2da      	uxtb	r2, r3
 80173ea:	697c      	ldr	r4, [r7, #20]
 80173ec:	2312      	movs	r3, #18
 80173ee:	18fb      	adds	r3, r7, r3
 80173f0:	8819      	ldrh	r1, [r3, #0]
 80173f2:	68f8      	ldr	r0, [r7, #12]
 80173f4:	2300      	movs	r3, #0
 80173f6:	9300      	str	r3, [sp, #0]
 80173f8:	0023      	movs	r3, r4
 80173fa:	f001 fb8d 	bl	8018b18 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 80173fe:	68fb      	ldr	r3, [r7, #12]
 8017400:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8017402:	b29a      	uxth	r2, r3
 8017404:	68fb      	ldr	r3, [r7, #12]
 8017406:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8017408:	1ad3      	subs	r3, r2, r3
 801740a:	b29a      	uxth	r2, r3
 801740c:	68fb      	ldr	r3, [r7, #12]
 801740e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8017410:	68fb      	ldr	r3, [r7, #12]
 8017412:	2241      	movs	r2, #65	@ 0x41
 8017414:	5c9b      	ldrb	r3, [r3, r2]
 8017416:	b2db      	uxtb	r3, r3
 8017418:	2b22      	cmp	r3, #34	@ 0x22
 801741a:	d109      	bne.n	8017430 <I2C_Master_ISR_DMA+0x130>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 801741c:	68fb      	ldr	r3, [r7, #12]
 801741e:	681b      	ldr	r3, [r3, #0]
 8017420:	681a      	ldr	r2, [r3, #0]
 8017422:	68fb      	ldr	r3, [r7, #12]
 8017424:	681b      	ldr	r3, [r3, #0]
 8017426:	2180      	movs	r1, #128	@ 0x80
 8017428:	0209      	lsls	r1, r1, #8
 801742a:	430a      	orrs	r2, r1
 801742c:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 801742e:	e067      	b.n	8017500 <I2C_Master_ISR_DMA+0x200>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8017430:	68fb      	ldr	r3, [r7, #12]
 8017432:	681b      	ldr	r3, [r3, #0]
 8017434:	681a      	ldr	r2, [r3, #0]
 8017436:	68fb      	ldr	r3, [r7, #12]
 8017438:	681b      	ldr	r3, [r3, #0]
 801743a:	2180      	movs	r1, #128	@ 0x80
 801743c:	01c9      	lsls	r1, r1, #7
 801743e:	430a      	orrs	r2, r1
 8017440:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8017442:	e05d      	b.n	8017500 <I2C_Master_ISR_DMA+0x200>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8017444:	68fb      	ldr	r3, [r7, #12]
 8017446:	681b      	ldr	r3, [r3, #0]
 8017448:	685a      	ldr	r2, [r3, #4]
 801744a:	2380      	movs	r3, #128	@ 0x80
 801744c:	049b      	lsls	r3, r3, #18
 801744e:	401a      	ands	r2, r3
 8017450:	2380      	movs	r3, #128	@ 0x80
 8017452:	049b      	lsls	r3, r3, #18
 8017454:	429a      	cmp	r2, r3
 8017456:	d004      	beq.n	8017462 <I2C_Master_ISR_DMA+0x162>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8017458:	68fb      	ldr	r3, [r7, #12]
 801745a:	0018      	movs	r0, r3
 801745c:	f000 fbec 	bl	8017c38 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 8017460:	e04e      	b.n	8017500 <I2C_Master_ISR_DMA+0x200>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8017462:	68fb      	ldr	r3, [r7, #12]
 8017464:	2140      	movs	r1, #64	@ 0x40
 8017466:	0018      	movs	r0, r3
 8017468:	f000 fede 	bl	8018228 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 801746c:	e048      	b.n	8017500 <I2C_Master_ISR_DMA+0x200>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 801746e:	68bb      	ldr	r3, [r7, #8]
 8017470:	099b      	lsrs	r3, r3, #6
 8017472:	001a      	movs	r2, r3
 8017474:	2301      	movs	r3, #1
 8017476:	4013      	ands	r3, r2
 8017478:	d02e      	beq.n	80174d8 <I2C_Master_ISR_DMA+0x1d8>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 801747a:	687b      	ldr	r3, [r7, #4]
 801747c:	099b      	lsrs	r3, r3, #6
 801747e:	001a      	movs	r2, r3
 8017480:	2301      	movs	r3, #1
 8017482:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8017484:	d028      	beq.n	80174d8 <I2C_Master_ISR_DMA+0x1d8>
  {
    if (hi2c->XferCount == 0U)
 8017486:	68fb      	ldr	r3, [r7, #12]
 8017488:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801748a:	b29b      	uxth	r3, r3
 801748c:	2b00      	cmp	r3, #0
 801748e:	d11d      	bne.n	80174cc <I2C_Master_ISR_DMA+0x1cc>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8017490:	68fb      	ldr	r3, [r7, #12]
 8017492:	681b      	ldr	r3, [r3, #0]
 8017494:	685a      	ldr	r2, [r3, #4]
 8017496:	2380      	movs	r3, #128	@ 0x80
 8017498:	049b      	lsls	r3, r3, #18
 801749a:	401a      	ands	r2, r3
 801749c:	2380      	movs	r3, #128	@ 0x80
 801749e:	049b      	lsls	r3, r3, #18
 80174a0:	429a      	cmp	r2, r3
 80174a2:	d02c      	beq.n	80174fe <I2C_Master_ISR_DMA+0x1fe>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 80174a4:	68fb      	ldr	r3, [r7, #12]
 80174a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80174a8:	4a1a      	ldr	r2, [pc, #104]	@ (8017514 <I2C_Master_ISR_DMA+0x214>)
 80174aa:	4293      	cmp	r3, r2
 80174ac:	d109      	bne.n	80174c2 <I2C_Master_ISR_DMA+0x1c2>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80174ae:	68fb      	ldr	r3, [r7, #12]
 80174b0:	681b      	ldr	r3, [r3, #0]
 80174b2:	685a      	ldr	r2, [r3, #4]
 80174b4:	68fb      	ldr	r3, [r7, #12]
 80174b6:	681b      	ldr	r3, [r3, #0]
 80174b8:	2180      	movs	r1, #128	@ 0x80
 80174ba:	01c9      	lsls	r1, r1, #7
 80174bc:	430a      	orrs	r2, r1
 80174be:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 80174c0:	e01d      	b.n	80174fe <I2C_Master_ISR_DMA+0x1fe>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 80174c2:	68fb      	ldr	r3, [r7, #12]
 80174c4:	0018      	movs	r0, r3
 80174c6:	f000 fbb7 	bl	8017c38 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 80174ca:	e018      	b.n	80174fe <I2C_Master_ISR_DMA+0x1fe>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80174cc:	68fb      	ldr	r3, [r7, #12]
 80174ce:	2140      	movs	r1, #64	@ 0x40
 80174d0:	0018      	movs	r0, r3
 80174d2:	f000 fea9 	bl	8018228 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 80174d6:	e012      	b.n	80174fe <I2C_Master_ISR_DMA+0x1fe>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80174d8:	68bb      	ldr	r3, [r7, #8]
 80174da:	095b      	lsrs	r3, r3, #5
 80174dc:	001a      	movs	r2, r3
 80174de:	2301      	movs	r3, #1
 80174e0:	4013      	ands	r3, r2
 80174e2:	d00d      	beq.n	8017500 <I2C_Master_ISR_DMA+0x200>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80174e4:	687b      	ldr	r3, [r7, #4]
 80174e6:	095b      	lsrs	r3, r3, #5
 80174e8:	001a      	movs	r2, r3
 80174ea:	2301      	movs	r3, #1
 80174ec:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80174ee:	d007      	beq.n	8017500 <I2C_Master_ISR_DMA+0x200>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 80174f0:	68ba      	ldr	r2, [r7, #8]
 80174f2:	68fb      	ldr	r3, [r7, #12]
 80174f4:	0011      	movs	r1, r2
 80174f6:	0018      	movs	r0, r3
 80174f8:	f000 fc46 	bl	8017d88 <I2C_ITMasterCplt>
 80174fc:	e000      	b.n	8017500 <I2C_Master_ISR_DMA+0x200>
    if (hi2c->XferCount == 0U)
 80174fe:	46c0      	nop			@ (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8017500:	68fb      	ldr	r3, [r7, #12]
 8017502:	2240      	movs	r2, #64	@ 0x40
 8017504:	2100      	movs	r1, #0
 8017506:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8017508:	2300      	movs	r3, #0
}
 801750a:	0018      	movs	r0, r3
 801750c:	46bd      	mov	sp, r7
 801750e:	b007      	add	sp, #28
 8017510:	bd90      	pop	{r4, r7, pc}
 8017512:	46c0      	nop			@ (mov r8, r8)
 8017514:	ffff0000 	.word	0xffff0000

08017518 <I2C_Mem_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                         uint32_t ITSources)
{
 8017518:	b590      	push	{r4, r7, lr}
 801751a:	b089      	sub	sp, #36	@ 0x24
 801751c:	af02      	add	r7, sp, #8
 801751e:	60f8      	str	r0, [r7, #12]
 8017520:	60b9      	str	r1, [r7, #8]
 8017522:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 8017524:	4b92      	ldr	r3, [pc, #584]	@ (8017770 <I2C_Mem_ISR_DMA+0x258>)
 8017526:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8017528:	68fb      	ldr	r3, [r7, #12]
 801752a:	2240      	movs	r2, #64	@ 0x40
 801752c:	5c9b      	ldrb	r3, [r3, r2]
 801752e:	2b01      	cmp	r3, #1
 8017530:	d101      	bne.n	8017536 <I2C_Mem_ISR_DMA+0x1e>
 8017532:	2302      	movs	r3, #2
 8017534:	e118      	b.n	8017768 <I2C_Mem_ISR_DMA+0x250>
 8017536:	68fb      	ldr	r3, [r7, #12]
 8017538:	2240      	movs	r2, #64	@ 0x40
 801753a:	2101      	movs	r1, #1
 801753c:	5499      	strb	r1, [r3, r2]

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 801753e:	68bb      	ldr	r3, [r7, #8]
 8017540:	091b      	lsrs	r3, r3, #4
 8017542:	001a      	movs	r2, r3
 8017544:	2301      	movs	r3, #1
 8017546:	4013      	ands	r3, r2
 8017548:	d019      	beq.n	801757e <I2C_Mem_ISR_DMA+0x66>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 801754a:	687b      	ldr	r3, [r7, #4]
 801754c:	091b      	lsrs	r3, r3, #4
 801754e:	001a      	movs	r2, r3
 8017550:	2301      	movs	r3, #1
 8017552:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8017554:	d013      	beq.n	801757e <I2C_Mem_ISR_DMA+0x66>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8017556:	68fb      	ldr	r3, [r7, #12]
 8017558:	681b      	ldr	r3, [r3, #0]
 801755a:	2210      	movs	r2, #16
 801755c:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 801755e:	68fb      	ldr	r3, [r7, #12]
 8017560:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8017562:	2204      	movs	r2, #4
 8017564:	431a      	orrs	r2, r3
 8017566:	68fb      	ldr	r3, [r7, #12]
 8017568:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 801756a:	68fb      	ldr	r3, [r7, #12]
 801756c:	2120      	movs	r1, #32
 801756e:	0018      	movs	r0, r3
 8017570:	f001 fb0c 	bl	8018b8c <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8017574:	68fb      	ldr	r3, [r7, #12]
 8017576:	0018      	movs	r0, r3
 8017578:	f000 ff81 	bl	801847e <I2C_Flush_TXDR>
 801757c:	e0ef      	b.n	801775e <I2C_Mem_ISR_DMA+0x246>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 801757e:	68bb      	ldr	r3, [r7, #8]
 8017580:	085b      	lsrs	r3, r3, #1
 8017582:	001a      	movs	r2, r3
 8017584:	2301      	movs	r3, #1
 8017586:	4013      	ands	r3, r2
 8017588:	d00f      	beq.n	80175aa <I2C_Mem_ISR_DMA+0x92>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 801758a:	687b      	ldr	r3, [r7, #4]
 801758c:	085b      	lsrs	r3, r3, #1
 801758e:	001a      	movs	r2, r3
 8017590:	2301      	movs	r3, #1
 8017592:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 8017594:	d009      	beq.n	80175aa <I2C_Mem_ISR_DMA+0x92>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
 8017596:	68fb      	ldr	r3, [r7, #12]
 8017598:	681b      	ldr	r3, [r3, #0]
 801759a:	68fa      	ldr	r2, [r7, #12]
 801759c:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 801759e:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
 80175a0:	68fb      	ldr	r3, [r7, #12]
 80175a2:	2201      	movs	r2, #1
 80175a4:	4252      	negs	r2, r2
 80175a6:	651a      	str	r2, [r3, #80]	@ 0x50
 80175a8:	e0d9      	b.n	801775e <I2C_Mem_ISR_DMA+0x246>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 80175aa:	68bb      	ldr	r3, [r7, #8]
 80175ac:	09db      	lsrs	r3, r3, #7
 80175ae:	001a      	movs	r2, r3
 80175b0:	2301      	movs	r3, #1
 80175b2:	4013      	ands	r3, r2
 80175b4:	d060      	beq.n	8017678 <I2C_Mem_ISR_DMA+0x160>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80175b6:	687b      	ldr	r3, [r7, #4]
 80175b8:	099b      	lsrs	r3, r3, #6
 80175ba:	001a      	movs	r2, r3
 80175bc:	2301      	movs	r3, #1
 80175be:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 80175c0:	d05a      	beq.n	8017678 <I2C_Mem_ISR_DMA+0x160>
  {
    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 80175c2:	68fb      	ldr	r3, [r7, #12]
 80175c4:	2110      	movs	r1, #16
 80175c6:	0018      	movs	r0, r3
 80175c8:	f001 fae0 	bl	8018b8c <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
 80175cc:	68fb      	ldr	r3, [r7, #12]
 80175ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80175d0:	b29b      	uxth	r3, r3
 80175d2:	2b00      	cmp	r3, #0
 80175d4:	d04a      	beq.n	801766c <I2C_Mem_ISR_DMA+0x154>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80175d6:	68fb      	ldr	r3, [r7, #12]
 80175d8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80175da:	b29b      	uxth	r3, r3
 80175dc:	2bff      	cmp	r3, #255	@ 0xff
 80175de:	d910      	bls.n	8017602 <I2C_Mem_ISR_DMA+0xea>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 80175e0:	68fb      	ldr	r3, [r7, #12]
 80175e2:	22ff      	movs	r2, #255	@ 0xff
 80175e4:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 80175e6:	68fb      	ldr	r3, [r7, #12]
 80175e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80175ea:	b299      	uxth	r1, r3
 80175ec:	68fb      	ldr	r3, [r7, #12]
 80175ee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80175f0:	b2da      	uxtb	r2, r3
 80175f2:	2380      	movs	r3, #128	@ 0x80
 80175f4:	045b      	lsls	r3, r3, #17
 80175f6:	68f8      	ldr	r0, [r7, #12]
 80175f8:	2400      	movs	r4, #0
 80175fa:	9400      	str	r4, [sp, #0]
 80175fc:	f001 fa8c 	bl	8018b18 <I2C_TransferConfig>
 8017600:	e011      	b.n	8017626 <I2C_Mem_ISR_DMA+0x10e>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8017602:	68fb      	ldr	r3, [r7, #12]
 8017604:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8017606:	b29a      	uxth	r2, r3
 8017608:	68fb      	ldr	r3, [r7, #12]
 801760a:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 801760c:	68fb      	ldr	r3, [r7, #12]
 801760e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8017610:	b299      	uxth	r1, r3
 8017612:	68fb      	ldr	r3, [r7, #12]
 8017614:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8017616:	b2da      	uxtb	r2, r3
 8017618:	2380      	movs	r3, #128	@ 0x80
 801761a:	049b      	lsls	r3, r3, #18
 801761c:	68f8      	ldr	r0, [r7, #12]
 801761e:	2400      	movs	r4, #0
 8017620:	9400      	str	r4, [sp, #0]
 8017622:	f001 fa79 	bl	8018b18 <I2C_TransferConfig>
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8017626:	68fb      	ldr	r3, [r7, #12]
 8017628:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801762a:	b29a      	uxth	r2, r3
 801762c:	68fb      	ldr	r3, [r7, #12]
 801762e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8017630:	1ad3      	subs	r3, r2, r3
 8017632:	b29a      	uxth	r2, r3
 8017634:	68fb      	ldr	r3, [r7, #12]
 8017636:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8017638:	68fb      	ldr	r3, [r7, #12]
 801763a:	2241      	movs	r2, #65	@ 0x41
 801763c:	5c9b      	ldrb	r3, [r3, r2]
 801763e:	b2db      	uxtb	r3, r3
 8017640:	2b22      	cmp	r3, #34	@ 0x22
 8017642:	d109      	bne.n	8017658 <I2C_Mem_ISR_DMA+0x140>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8017644:	68fb      	ldr	r3, [r7, #12]
 8017646:	681b      	ldr	r3, [r3, #0]
 8017648:	681a      	ldr	r2, [r3, #0]
 801764a:	68fb      	ldr	r3, [r7, #12]
 801764c:	681b      	ldr	r3, [r3, #0]
 801764e:	2180      	movs	r1, #128	@ 0x80
 8017650:	0209      	lsls	r1, r1, #8
 8017652:	430a      	orrs	r2, r1
 8017654:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8017656:	e082      	b.n	801775e <I2C_Mem_ISR_DMA+0x246>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8017658:	68fb      	ldr	r3, [r7, #12]
 801765a:	681b      	ldr	r3, [r3, #0]
 801765c:	681a      	ldr	r2, [r3, #0]
 801765e:	68fb      	ldr	r3, [r7, #12]
 8017660:	681b      	ldr	r3, [r3, #0]
 8017662:	2180      	movs	r1, #128	@ 0x80
 8017664:	01c9      	lsls	r1, r1, #7
 8017666:	430a      	orrs	r2, r1
 8017668:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 801766a:	e078      	b.n	801775e <I2C_Mem_ISR_DMA+0x246>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 801766c:	68fb      	ldr	r3, [r7, #12]
 801766e:	2140      	movs	r1, #64	@ 0x40
 8017670:	0018      	movs	r0, r3
 8017672:	f000 fdd9 	bl	8018228 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8017676:	e072      	b.n	801775e <I2C_Mem_ISR_DMA+0x246>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8017678:	68bb      	ldr	r3, [r7, #8]
 801767a:	099b      	lsrs	r3, r3, #6
 801767c:	001a      	movs	r2, r3
 801767e:	2301      	movs	r3, #1
 8017680:	4013      	ands	r3, r2
 8017682:	d05a      	beq.n	801773a <I2C_Mem_ISR_DMA+0x222>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8017684:	687b      	ldr	r3, [r7, #4]
 8017686:	099b      	lsrs	r3, r3, #6
 8017688:	001a      	movs	r2, r3
 801768a:	2301      	movs	r3, #1
 801768c:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 801768e:	d054      	beq.n	801773a <I2C_Mem_ISR_DMA+0x222>
  {
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8017690:	68fb      	ldr	r3, [r7, #12]
 8017692:	2241      	movs	r2, #65	@ 0x41
 8017694:	5c9b      	ldrb	r3, [r3, r2]
 8017696:	b2db      	uxtb	r3, r3
 8017698:	2b22      	cmp	r3, #34	@ 0x22
 801769a:	d101      	bne.n	80176a0 <I2C_Mem_ISR_DMA+0x188>
    {
      direction = I2C_GENERATE_START_READ;
 801769c:	4b35      	ldr	r3, [pc, #212]	@ (8017774 <I2C_Mem_ISR_DMA+0x25c>)
 801769e:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80176a0:	68fb      	ldr	r3, [r7, #12]
 80176a2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80176a4:	b29b      	uxth	r3, r3
 80176a6:	2bff      	cmp	r3, #255	@ 0xff
 80176a8:	d911      	bls.n	80176ce <I2C_Mem_ISR_DMA+0x1b6>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80176aa:	68fb      	ldr	r3, [r7, #12]
 80176ac:	22ff      	movs	r2, #255	@ 0xff
 80176ae:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 80176b0:	68fb      	ldr	r3, [r7, #12]
 80176b2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80176b4:	b299      	uxth	r1, r3
 80176b6:	68fb      	ldr	r3, [r7, #12]
 80176b8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80176ba:	b2da      	uxtb	r2, r3
 80176bc:	2380      	movs	r3, #128	@ 0x80
 80176be:	045c      	lsls	r4, r3, #17
 80176c0:	68f8      	ldr	r0, [r7, #12]
 80176c2:	697b      	ldr	r3, [r7, #20]
 80176c4:	9300      	str	r3, [sp, #0]
 80176c6:	0023      	movs	r3, r4
 80176c8:	f001 fa26 	bl	8018b18 <I2C_TransferConfig>
 80176cc:	e012      	b.n	80176f4 <I2C_Mem_ISR_DMA+0x1dc>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80176ce:	68fb      	ldr	r3, [r7, #12]
 80176d0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80176d2:	b29a      	uxth	r2, r3
 80176d4:	68fb      	ldr	r3, [r7, #12]
 80176d6:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 80176d8:	68fb      	ldr	r3, [r7, #12]
 80176da:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80176dc:	b299      	uxth	r1, r3
 80176de:	68fb      	ldr	r3, [r7, #12]
 80176e0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80176e2:	b2da      	uxtb	r2, r3
 80176e4:	2380      	movs	r3, #128	@ 0x80
 80176e6:	049c      	lsls	r4, r3, #18
 80176e8:	68f8      	ldr	r0, [r7, #12]
 80176ea:	697b      	ldr	r3, [r7, #20]
 80176ec:	9300      	str	r3, [sp, #0]
 80176ee:	0023      	movs	r3, r4
 80176f0:	f001 fa12 	bl	8018b18 <I2C_TransferConfig>
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
 80176f4:	68fb      	ldr	r3, [r7, #12]
 80176f6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80176f8:	b29a      	uxth	r2, r3
 80176fa:	68fb      	ldr	r3, [r7, #12]
 80176fc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80176fe:	1ad3      	subs	r3, r2, r3
 8017700:	b29a      	uxth	r2, r3
 8017702:	68fb      	ldr	r3, [r7, #12]
 8017704:	855a      	strh	r2, [r3, #42]	@ 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8017706:	68fb      	ldr	r3, [r7, #12]
 8017708:	2241      	movs	r2, #65	@ 0x41
 801770a:	5c9b      	ldrb	r3, [r3, r2]
 801770c:	b2db      	uxtb	r3, r3
 801770e:	2b22      	cmp	r3, #34	@ 0x22
 8017710:	d109      	bne.n	8017726 <I2C_Mem_ISR_DMA+0x20e>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8017712:	68fb      	ldr	r3, [r7, #12]
 8017714:	681b      	ldr	r3, [r3, #0]
 8017716:	681a      	ldr	r2, [r3, #0]
 8017718:	68fb      	ldr	r3, [r7, #12]
 801771a:	681b      	ldr	r3, [r3, #0]
 801771c:	2180      	movs	r1, #128	@ 0x80
 801771e:	0209      	lsls	r1, r1, #8
 8017720:	430a      	orrs	r2, r1
 8017722:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8017724:	e01b      	b.n	801775e <I2C_Mem_ISR_DMA+0x246>
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8017726:	68fb      	ldr	r3, [r7, #12]
 8017728:	681b      	ldr	r3, [r3, #0]
 801772a:	681a      	ldr	r2, [r3, #0]
 801772c:	68fb      	ldr	r3, [r7, #12]
 801772e:	681b      	ldr	r3, [r3, #0]
 8017730:	2180      	movs	r1, #128	@ 0x80
 8017732:	01c9      	lsls	r1, r1, #7
 8017734:	430a      	orrs	r2, r1
 8017736:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8017738:	e011      	b.n	801775e <I2C_Mem_ISR_DMA+0x246>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 801773a:	68bb      	ldr	r3, [r7, #8]
 801773c:	095b      	lsrs	r3, r3, #5
 801773e:	001a      	movs	r2, r3
 8017740:	2301      	movs	r3, #1
 8017742:	4013      	ands	r3, r2
 8017744:	d00b      	beq.n	801775e <I2C_Mem_ISR_DMA+0x246>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8017746:	687b      	ldr	r3, [r7, #4]
 8017748:	095b      	lsrs	r3, r3, #5
 801774a:	001a      	movs	r2, r3
 801774c:	2301      	movs	r3, #1
 801774e:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8017750:	d005      	beq.n	801775e <I2C_Mem_ISR_DMA+0x246>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8017752:	68ba      	ldr	r2, [r7, #8]
 8017754:	68fb      	ldr	r3, [r7, #12]
 8017756:	0011      	movs	r1, r2
 8017758:	0018      	movs	r0, r3
 801775a:	f000 fb15 	bl	8017d88 <I2C_ITMasterCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 801775e:	68fb      	ldr	r3, [r7, #12]
 8017760:	2240      	movs	r2, #64	@ 0x40
 8017762:	2100      	movs	r1, #0
 8017764:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8017766:	2300      	movs	r3, #0
}
 8017768:	0018      	movs	r0, r3
 801776a:	46bd      	mov	sp, r7
 801776c:	b007      	add	sp, #28
 801776e:	bd90      	pop	{r4, r7, pc}
 8017770:	80002000 	.word	0x80002000
 8017774:	80002400 	.word	0x80002400

08017778 <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8017778:	b580      	push	{r7, lr}
 801777a:	b088      	sub	sp, #32
 801777c:	af00      	add	r7, sp, #0
 801777e:	60f8      	str	r0, [r7, #12]
 8017780:	60b9      	str	r1, [r7, #8]
 8017782:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8017784:	68fb      	ldr	r3, [r7, #12]
 8017786:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8017788:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 801778a:	2300      	movs	r3, #0
 801778c:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 801778e:	68fb      	ldr	r3, [r7, #12]
 8017790:	2240      	movs	r2, #64	@ 0x40
 8017792:	5c9b      	ldrb	r3, [r3, r2]
 8017794:	2b01      	cmp	r3, #1
 8017796:	d101      	bne.n	801779c <I2C_Slave_ISR_DMA+0x24>
 8017798:	2302      	movs	r3, #2
 801779a:	e0dd      	b.n	8017958 <I2C_Slave_ISR_DMA+0x1e0>
 801779c:	68fb      	ldr	r3, [r7, #12]
 801779e:	2240      	movs	r2, #64	@ 0x40
 80177a0:	2101      	movs	r1, #1
 80177a2:	5499      	strb	r1, [r3, r2]

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80177a4:	68bb      	ldr	r3, [r7, #8]
 80177a6:	095b      	lsrs	r3, r3, #5
 80177a8:	001a      	movs	r2, r3
 80177aa:	2301      	movs	r3, #1
 80177ac:	4013      	ands	r3, r2
 80177ae:	d00b      	beq.n	80177c8 <I2C_Slave_ISR_DMA+0x50>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80177b0:	687b      	ldr	r3, [r7, #4]
 80177b2:	095b      	lsrs	r3, r3, #5
 80177b4:	001a      	movs	r2, r3
 80177b6:	2301      	movs	r3, #1
 80177b8:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80177ba:	d005      	beq.n	80177c8 <I2C_Slave_ISR_DMA+0x50>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 80177bc:	68ba      	ldr	r2, [r7, #8]
 80177be:	68fb      	ldr	r3, [r7, #12]
 80177c0:	0011      	movs	r1, r2
 80177c2:	0018      	movs	r0, r3
 80177c4:	f000 fbb2 	bl	8017f2c <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80177c8:	68bb      	ldr	r3, [r7, #8]
 80177ca:	091b      	lsrs	r3, r3, #4
 80177cc:	001a      	movs	r2, r3
 80177ce:	2301      	movs	r3, #1
 80177d0:	4013      	ands	r3, r2
 80177d2:	d100      	bne.n	80177d6 <I2C_Slave_ISR_DMA+0x5e>
 80177d4:	e0a9      	b.n	801792a <I2C_Slave_ISR_DMA+0x1b2>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80177d6:	687b      	ldr	r3, [r7, #4]
 80177d8:	091b      	lsrs	r3, r3, #4
 80177da:	001a      	movs	r2, r3
 80177dc:	2301      	movs	r3, #1
 80177de:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80177e0:	d100      	bne.n	80177e4 <I2C_Slave_ISR_DMA+0x6c>
 80177e2:	e0a2      	b.n	801792a <I2C_Slave_ISR_DMA+0x1b2>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80177e4:	687b      	ldr	r3, [r7, #4]
 80177e6:	0b9b      	lsrs	r3, r3, #14
 80177e8:	001a      	movs	r2, r3
 80177ea:	2301      	movs	r3, #1
 80177ec:	4013      	ands	r3, r2
 80177ee:	d106      	bne.n	80177fe <I2C_Slave_ISR_DMA+0x86>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 80177f0:	687b      	ldr	r3, [r7, #4]
 80177f2:	0bdb      	lsrs	r3, r3, #15
 80177f4:	001a      	movs	r2, r3
 80177f6:	2301      	movs	r3, #1
 80177f8:	4013      	ands	r3, r2
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80177fa:	d100      	bne.n	80177fe <I2C_Slave_ISR_DMA+0x86>
 80177fc:	e08e      	b.n	801791c <I2C_Slave_ISR_DMA+0x1a4>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 80177fe:	68fb      	ldr	r3, [r7, #12]
 8017800:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8017802:	2b00      	cmp	r3, #0
 8017804:	d00d      	beq.n	8017822 <I2C_Slave_ISR_DMA+0xaa>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 8017806:	687b      	ldr	r3, [r7, #4]
 8017808:	0bdb      	lsrs	r3, r3, #15
 801780a:	001a      	movs	r2, r3
 801780c:	2301      	movs	r3, #1
 801780e:	4013      	ands	r3, r2
 8017810:	d007      	beq.n	8017822 <I2C_Slave_ISR_DMA+0xaa>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 8017812:	68fb      	ldr	r3, [r7, #12]
 8017814:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8017816:	681b      	ldr	r3, [r3, #0]
 8017818:	685b      	ldr	r3, [r3, #4]
 801781a:	2b00      	cmp	r3, #0
 801781c:	d101      	bne.n	8017822 <I2C_Slave_ISR_DMA+0xaa>
          {
            treatdmanack = 1U;
 801781e:	2301      	movs	r3, #1
 8017820:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 8017822:	68fb      	ldr	r3, [r7, #12]
 8017824:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8017826:	2b00      	cmp	r3, #0
 8017828:	d00d      	beq.n	8017846 <I2C_Slave_ISR_DMA+0xce>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 801782a:	687b      	ldr	r3, [r7, #4]
 801782c:	0b9b      	lsrs	r3, r3, #14
 801782e:	001a      	movs	r2, r3
 8017830:	2301      	movs	r3, #1
 8017832:	4013      	ands	r3, r2
 8017834:	d007      	beq.n	8017846 <I2C_Slave_ISR_DMA+0xce>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 8017836:	68fb      	ldr	r3, [r7, #12]
 8017838:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801783a:	681b      	ldr	r3, [r3, #0]
 801783c:	685b      	ldr	r3, [r3, #4]
 801783e:	2b00      	cmp	r3, #0
 8017840:	d101      	bne.n	8017846 <I2C_Slave_ISR_DMA+0xce>
          {
            treatdmanack = 1U;
 8017842:	2301      	movs	r3, #1
 8017844:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 8017846:	69fb      	ldr	r3, [r7, #28]
 8017848:	2b01      	cmp	r3, #1
 801784a:	d12d      	bne.n	80178a8 <I2C_Slave_ISR_DMA+0x130>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 801784c:	68fb      	ldr	r3, [r7, #12]
 801784e:	2241      	movs	r2, #65	@ 0x41
 8017850:	5c9b      	ldrb	r3, [r3, r2]
 8017852:	b2db      	uxtb	r3, r3
 8017854:	2b28      	cmp	r3, #40	@ 0x28
 8017856:	d10b      	bne.n	8017870 <I2C_Slave_ISR_DMA+0xf8>
 8017858:	69ba      	ldr	r2, [r7, #24]
 801785a:	2380      	movs	r3, #128	@ 0x80
 801785c:	049b      	lsls	r3, r3, #18
 801785e:	429a      	cmp	r2, r3
 8017860:	d106      	bne.n	8017870 <I2C_Slave_ISR_DMA+0xf8>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 8017862:	68ba      	ldr	r2, [r7, #8]
 8017864:	68fb      	ldr	r3, [r7, #12]
 8017866:	0011      	movs	r1, r2
 8017868:	0018      	movs	r0, r3
 801786a:	f000 fc83 	bl	8018174 <I2C_ITListenCplt>
 801786e:	e054      	b.n	801791a <I2C_Slave_ISR_DMA+0x1a2>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8017870:	68fb      	ldr	r3, [r7, #12]
 8017872:	2241      	movs	r2, #65	@ 0x41
 8017874:	5c9b      	ldrb	r3, [r3, r2]
 8017876:	b2db      	uxtb	r3, r3
 8017878:	2b29      	cmp	r3, #41	@ 0x29
 801787a:	d110      	bne.n	801789e <I2C_Slave_ISR_DMA+0x126>
 801787c:	69bb      	ldr	r3, [r7, #24]
 801787e:	4a38      	ldr	r2, [pc, #224]	@ (8017960 <I2C_Slave_ISR_DMA+0x1e8>)
 8017880:	4293      	cmp	r3, r2
 8017882:	d00c      	beq.n	801789e <I2C_Slave_ISR_DMA+0x126>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8017884:	68fb      	ldr	r3, [r7, #12]
 8017886:	681b      	ldr	r3, [r3, #0]
 8017888:	2210      	movs	r2, #16
 801788a:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 801788c:	68fb      	ldr	r3, [r7, #12]
 801788e:	0018      	movs	r0, r3
 8017890:	f000 fdf5 	bl	801847e <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 8017894:	68fb      	ldr	r3, [r7, #12]
 8017896:	0018      	movs	r0, r3
 8017898:	f000 fa10 	bl	8017cbc <I2C_ITSlaveSeqCplt>
 801789c:	e03d      	b.n	801791a <I2C_Slave_ISR_DMA+0x1a2>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 801789e:	68fb      	ldr	r3, [r7, #12]
 80178a0:	681b      	ldr	r3, [r3, #0]
 80178a2:	2210      	movs	r2, #16
 80178a4:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 80178a6:	e03e      	b.n	8017926 <I2C_Slave_ISR_DMA+0x1ae>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80178a8:	68fb      	ldr	r3, [r7, #12]
 80178aa:	681b      	ldr	r3, [r3, #0]
 80178ac:	2210      	movs	r2, #16
 80178ae:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80178b0:	68fb      	ldr	r3, [r7, #12]
 80178b2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80178b4:	2204      	movs	r2, #4
 80178b6:	431a      	orrs	r2, r3
 80178b8:	68fb      	ldr	r3, [r7, #12]
 80178ba:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 80178bc:	2317      	movs	r3, #23
 80178be:	18fb      	adds	r3, r7, r3
 80178c0:	68fa      	ldr	r2, [r7, #12]
 80178c2:	2141      	movs	r1, #65	@ 0x41
 80178c4:	5c52      	ldrb	r2, [r2, r1]
 80178c6:	701a      	strb	r2, [r3, #0]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80178c8:	69bb      	ldr	r3, [r7, #24]
 80178ca:	2b00      	cmp	r3, #0
 80178cc:	d004      	beq.n	80178d8 <I2C_Slave_ISR_DMA+0x160>
 80178ce:	69ba      	ldr	r2, [r7, #24]
 80178d0:	2380      	movs	r3, #128	@ 0x80
 80178d2:	045b      	lsls	r3, r3, #17
 80178d4:	429a      	cmp	r2, r3
 80178d6:	d126      	bne.n	8017926 <I2C_Slave_ISR_DMA+0x1ae>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80178d8:	2217      	movs	r2, #23
 80178da:	18bb      	adds	r3, r7, r2
 80178dc:	781b      	ldrb	r3, [r3, #0]
 80178de:	2b21      	cmp	r3, #33	@ 0x21
 80178e0:	d003      	beq.n	80178ea <I2C_Slave_ISR_DMA+0x172>
 80178e2:	18bb      	adds	r3, r7, r2
 80178e4:	781b      	ldrb	r3, [r3, #0]
 80178e6:	2b29      	cmp	r3, #41	@ 0x29
 80178e8:	d103      	bne.n	80178f2 <I2C_Slave_ISR_DMA+0x17a>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80178ea:	68fb      	ldr	r3, [r7, #12]
 80178ec:	2221      	movs	r2, #33	@ 0x21
 80178ee:	631a      	str	r2, [r3, #48]	@ 0x30
 80178f0:	e00b      	b.n	801790a <I2C_Slave_ISR_DMA+0x192>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80178f2:	2217      	movs	r2, #23
 80178f4:	18bb      	adds	r3, r7, r2
 80178f6:	781b      	ldrb	r3, [r3, #0]
 80178f8:	2b22      	cmp	r3, #34	@ 0x22
 80178fa:	d003      	beq.n	8017904 <I2C_Slave_ISR_DMA+0x18c>
 80178fc:	18bb      	adds	r3, r7, r2
 80178fe:	781b      	ldrb	r3, [r3, #0]
 8017900:	2b2a      	cmp	r3, #42	@ 0x2a
 8017902:	d102      	bne.n	801790a <I2C_Slave_ISR_DMA+0x192>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8017904:	68fb      	ldr	r3, [r7, #12]
 8017906:	2222      	movs	r2, #34	@ 0x22
 8017908:	631a      	str	r2, [r3, #48]	@ 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 801790a:	68fb      	ldr	r3, [r7, #12]
 801790c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 801790e:	68fb      	ldr	r3, [r7, #12]
 8017910:	0011      	movs	r1, r2
 8017912:	0018      	movs	r0, r3
 8017914:	f000 fc88 	bl	8018228 <I2C_ITError>
      if (treatdmanack == 1U)
 8017918:	e005      	b.n	8017926 <I2C_Slave_ISR_DMA+0x1ae>
 801791a:	e004      	b.n	8017926 <I2C_Slave_ISR_DMA+0x1ae>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 801791c:	68fb      	ldr	r3, [r7, #12]
 801791e:	681b      	ldr	r3, [r3, #0]
 8017920:	2210      	movs	r2, #16
 8017922:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8017924:	e013      	b.n	801794e <I2C_Slave_ISR_DMA+0x1d6>
      if (treatdmanack == 1U)
 8017926:	46c0      	nop			@ (mov r8, r8)
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8017928:	e011      	b.n	801794e <I2C_Slave_ISR_DMA+0x1d6>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 801792a:	68bb      	ldr	r3, [r7, #8]
 801792c:	08db      	lsrs	r3, r3, #3
 801792e:	001a      	movs	r2, r3
 8017930:	2301      	movs	r3, #1
 8017932:	4013      	ands	r3, r2
 8017934:	d00b      	beq.n	801794e <I2C_Slave_ISR_DMA+0x1d6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8017936:	687b      	ldr	r3, [r7, #4]
 8017938:	08db      	lsrs	r3, r3, #3
 801793a:	001a      	movs	r2, r3
 801793c:	2301      	movs	r3, #1
 801793e:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8017940:	d005      	beq.n	801794e <I2C_Slave_ISR_DMA+0x1d6>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 8017942:	68ba      	ldr	r2, [r7, #8]
 8017944:	68fb      	ldr	r3, [r7, #12]
 8017946:	0011      	movs	r1, r2
 8017948:	0018      	movs	r0, r3
 801794a:	f000 f8d1 	bl	8017af0 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 801794e:	68fb      	ldr	r3, [r7, #12]
 8017950:	2240      	movs	r2, #64	@ 0x40
 8017952:	2100      	movs	r1, #0
 8017954:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8017956:	2300      	movs	r3, #0
}
 8017958:	0018      	movs	r0, r3
 801795a:	46bd      	mov	sp, r7
 801795c:	b008      	add	sp, #32
 801795e:	bd80      	pop	{r7, pc}
 8017960:	ffff0000 	.word	0xffff0000

08017964 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8017964:	b5b0      	push	{r4, r5, r7, lr}
 8017966:	b086      	sub	sp, #24
 8017968:	af02      	add	r7, sp, #8
 801796a:	60f8      	str	r0, [r7, #12]
 801796c:	000c      	movs	r4, r1
 801796e:	0010      	movs	r0, r2
 8017970:	0019      	movs	r1, r3
 8017972:	250a      	movs	r5, #10
 8017974:	197b      	adds	r3, r7, r5
 8017976:	1c22      	adds	r2, r4, #0
 8017978:	801a      	strh	r2, [r3, #0]
 801797a:	2308      	movs	r3, #8
 801797c:	18fb      	adds	r3, r7, r3
 801797e:	1c02      	adds	r2, r0, #0
 8017980:	801a      	strh	r2, [r3, #0]
 8017982:	1dbb      	adds	r3, r7, #6
 8017984:	1c0a      	adds	r2, r1, #0
 8017986:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8017988:	1dbb      	adds	r3, r7, #6
 801798a:	881b      	ldrh	r3, [r3, #0]
 801798c:	b2da      	uxtb	r2, r3
 801798e:	2380      	movs	r3, #128	@ 0x80
 8017990:	045c      	lsls	r4, r3, #17
 8017992:	197b      	adds	r3, r7, r5
 8017994:	8819      	ldrh	r1, [r3, #0]
 8017996:	68f8      	ldr	r0, [r7, #12]
 8017998:	4b23      	ldr	r3, [pc, #140]	@ (8017a28 <I2C_RequestMemoryWrite+0xc4>)
 801799a:	9300      	str	r3, [sp, #0]
 801799c:	0023      	movs	r3, r4
 801799e:	f001 f8bb 	bl	8018b18 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80179a2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80179a4:	6a39      	ldr	r1, [r7, #32]
 80179a6:	68fb      	ldr	r3, [r7, #12]
 80179a8:	0018      	movs	r0, r3
 80179aa:	f000 feb1 	bl	8018710 <I2C_WaitOnTXISFlagUntilTimeout>
 80179ae:	1e03      	subs	r3, r0, #0
 80179b0:	d001      	beq.n	80179b6 <I2C_RequestMemoryWrite+0x52>
  {
    return HAL_ERROR;
 80179b2:	2301      	movs	r3, #1
 80179b4:	e033      	b.n	8017a1e <I2C_RequestMemoryWrite+0xba>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80179b6:	1dbb      	adds	r3, r7, #6
 80179b8:	881b      	ldrh	r3, [r3, #0]
 80179ba:	2b01      	cmp	r3, #1
 80179bc:	d107      	bne.n	80179ce <I2C_RequestMemoryWrite+0x6a>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80179be:	2308      	movs	r3, #8
 80179c0:	18fb      	adds	r3, r7, r3
 80179c2:	881b      	ldrh	r3, [r3, #0]
 80179c4:	b2da      	uxtb	r2, r3
 80179c6:	68fb      	ldr	r3, [r7, #12]
 80179c8:	681b      	ldr	r3, [r3, #0]
 80179ca:	629a      	str	r2, [r3, #40]	@ 0x28
 80179cc:	e019      	b.n	8017a02 <I2C_RequestMemoryWrite+0x9e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80179ce:	2308      	movs	r3, #8
 80179d0:	18fb      	adds	r3, r7, r3
 80179d2:	881b      	ldrh	r3, [r3, #0]
 80179d4:	0a1b      	lsrs	r3, r3, #8
 80179d6:	b29b      	uxth	r3, r3
 80179d8:	b2da      	uxtb	r2, r3
 80179da:	68fb      	ldr	r3, [r7, #12]
 80179dc:	681b      	ldr	r3, [r3, #0]
 80179de:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80179e0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80179e2:	6a39      	ldr	r1, [r7, #32]
 80179e4:	68fb      	ldr	r3, [r7, #12]
 80179e6:	0018      	movs	r0, r3
 80179e8:	f000 fe92 	bl	8018710 <I2C_WaitOnTXISFlagUntilTimeout>
 80179ec:	1e03      	subs	r3, r0, #0
 80179ee:	d001      	beq.n	80179f4 <I2C_RequestMemoryWrite+0x90>
    {
      return HAL_ERROR;
 80179f0:	2301      	movs	r3, #1
 80179f2:	e014      	b.n	8017a1e <I2C_RequestMemoryWrite+0xba>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80179f4:	2308      	movs	r3, #8
 80179f6:	18fb      	adds	r3, r7, r3
 80179f8:	881b      	ldrh	r3, [r3, #0]
 80179fa:	b2da      	uxtb	r2, r3
 80179fc:	68fb      	ldr	r3, [r7, #12]
 80179fe:	681b      	ldr	r3, [r3, #0]
 8017a00:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8017a02:	6a3a      	ldr	r2, [r7, #32]
 8017a04:	68f8      	ldr	r0, [r7, #12]
 8017a06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017a08:	9300      	str	r3, [sp, #0]
 8017a0a:	0013      	movs	r3, r2
 8017a0c:	2200      	movs	r2, #0
 8017a0e:	2180      	movs	r1, #128	@ 0x80
 8017a10:	f000 fe30 	bl	8018674 <I2C_WaitOnFlagUntilTimeout>
 8017a14:	1e03      	subs	r3, r0, #0
 8017a16:	d001      	beq.n	8017a1c <I2C_RequestMemoryWrite+0xb8>
  {
    return HAL_ERROR;
 8017a18:	2301      	movs	r3, #1
 8017a1a:	e000      	b.n	8017a1e <I2C_RequestMemoryWrite+0xba>
  }

  return HAL_OK;
 8017a1c:	2300      	movs	r3, #0
}
 8017a1e:	0018      	movs	r0, r3
 8017a20:	46bd      	mov	sp, r7
 8017a22:	b004      	add	sp, #16
 8017a24:	bdb0      	pop	{r4, r5, r7, pc}
 8017a26:	46c0      	nop			@ (mov r8, r8)
 8017a28:	80002000 	.word	0x80002000

08017a2c <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8017a2c:	b5b0      	push	{r4, r5, r7, lr}
 8017a2e:	b086      	sub	sp, #24
 8017a30:	af02      	add	r7, sp, #8
 8017a32:	60f8      	str	r0, [r7, #12]
 8017a34:	000c      	movs	r4, r1
 8017a36:	0010      	movs	r0, r2
 8017a38:	0019      	movs	r1, r3
 8017a3a:	250a      	movs	r5, #10
 8017a3c:	197b      	adds	r3, r7, r5
 8017a3e:	1c22      	adds	r2, r4, #0
 8017a40:	801a      	strh	r2, [r3, #0]
 8017a42:	2308      	movs	r3, #8
 8017a44:	18fb      	adds	r3, r7, r3
 8017a46:	1c02      	adds	r2, r0, #0
 8017a48:	801a      	strh	r2, [r3, #0]
 8017a4a:	1dbb      	adds	r3, r7, #6
 8017a4c:	1c0a      	adds	r2, r1, #0
 8017a4e:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8017a50:	1dbb      	adds	r3, r7, #6
 8017a52:	881b      	ldrh	r3, [r3, #0]
 8017a54:	b2da      	uxtb	r2, r3
 8017a56:	197b      	adds	r3, r7, r5
 8017a58:	8819      	ldrh	r1, [r3, #0]
 8017a5a:	68f8      	ldr	r0, [r7, #12]
 8017a5c:	4b23      	ldr	r3, [pc, #140]	@ (8017aec <I2C_RequestMemoryRead+0xc0>)
 8017a5e:	9300      	str	r3, [sp, #0]
 8017a60:	2300      	movs	r3, #0
 8017a62:	f001 f859 	bl	8018b18 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8017a66:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8017a68:	6a39      	ldr	r1, [r7, #32]
 8017a6a:	68fb      	ldr	r3, [r7, #12]
 8017a6c:	0018      	movs	r0, r3
 8017a6e:	f000 fe4f 	bl	8018710 <I2C_WaitOnTXISFlagUntilTimeout>
 8017a72:	1e03      	subs	r3, r0, #0
 8017a74:	d001      	beq.n	8017a7a <I2C_RequestMemoryRead+0x4e>
  {
    return HAL_ERROR;
 8017a76:	2301      	movs	r3, #1
 8017a78:	e033      	b.n	8017ae2 <I2C_RequestMemoryRead+0xb6>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8017a7a:	1dbb      	adds	r3, r7, #6
 8017a7c:	881b      	ldrh	r3, [r3, #0]
 8017a7e:	2b01      	cmp	r3, #1
 8017a80:	d107      	bne.n	8017a92 <I2C_RequestMemoryRead+0x66>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8017a82:	2308      	movs	r3, #8
 8017a84:	18fb      	adds	r3, r7, r3
 8017a86:	881b      	ldrh	r3, [r3, #0]
 8017a88:	b2da      	uxtb	r2, r3
 8017a8a:	68fb      	ldr	r3, [r7, #12]
 8017a8c:	681b      	ldr	r3, [r3, #0]
 8017a8e:	629a      	str	r2, [r3, #40]	@ 0x28
 8017a90:	e019      	b.n	8017ac6 <I2C_RequestMemoryRead+0x9a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8017a92:	2308      	movs	r3, #8
 8017a94:	18fb      	adds	r3, r7, r3
 8017a96:	881b      	ldrh	r3, [r3, #0]
 8017a98:	0a1b      	lsrs	r3, r3, #8
 8017a9a:	b29b      	uxth	r3, r3
 8017a9c:	b2da      	uxtb	r2, r3
 8017a9e:	68fb      	ldr	r3, [r7, #12]
 8017aa0:	681b      	ldr	r3, [r3, #0]
 8017aa2:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8017aa4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8017aa6:	6a39      	ldr	r1, [r7, #32]
 8017aa8:	68fb      	ldr	r3, [r7, #12]
 8017aaa:	0018      	movs	r0, r3
 8017aac:	f000 fe30 	bl	8018710 <I2C_WaitOnTXISFlagUntilTimeout>
 8017ab0:	1e03      	subs	r3, r0, #0
 8017ab2:	d001      	beq.n	8017ab8 <I2C_RequestMemoryRead+0x8c>
    {
      return HAL_ERROR;
 8017ab4:	2301      	movs	r3, #1
 8017ab6:	e014      	b.n	8017ae2 <I2C_RequestMemoryRead+0xb6>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8017ab8:	2308      	movs	r3, #8
 8017aba:	18fb      	adds	r3, r7, r3
 8017abc:	881b      	ldrh	r3, [r3, #0]
 8017abe:	b2da      	uxtb	r2, r3
 8017ac0:	68fb      	ldr	r3, [r7, #12]
 8017ac2:	681b      	ldr	r3, [r3, #0]
 8017ac4:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8017ac6:	6a3a      	ldr	r2, [r7, #32]
 8017ac8:	68f8      	ldr	r0, [r7, #12]
 8017aca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017acc:	9300      	str	r3, [sp, #0]
 8017ace:	0013      	movs	r3, r2
 8017ad0:	2200      	movs	r2, #0
 8017ad2:	2140      	movs	r1, #64	@ 0x40
 8017ad4:	f000 fdce 	bl	8018674 <I2C_WaitOnFlagUntilTimeout>
 8017ad8:	1e03      	subs	r3, r0, #0
 8017ada:	d001      	beq.n	8017ae0 <I2C_RequestMemoryRead+0xb4>
  {
    return HAL_ERROR;
 8017adc:	2301      	movs	r3, #1
 8017ade:	e000      	b.n	8017ae2 <I2C_RequestMemoryRead+0xb6>
  }

  return HAL_OK;
 8017ae0:	2300      	movs	r3, #0
}
 8017ae2:	0018      	movs	r0, r3
 8017ae4:	46bd      	mov	sp, r7
 8017ae6:	b004      	add	sp, #16
 8017ae8:	bdb0      	pop	{r4, r5, r7, pc}
 8017aea:	46c0      	nop			@ (mov r8, r8)
 8017aec:	80002000 	.word	0x80002000

08017af0 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8017af0:	b5b0      	push	{r4, r5, r7, lr}
 8017af2:	b084      	sub	sp, #16
 8017af4:	af00      	add	r7, sp, #0
 8017af6:	6078      	str	r0, [r7, #4]
 8017af8:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8017afa:	687b      	ldr	r3, [r7, #4]
 8017afc:	2241      	movs	r2, #65	@ 0x41
 8017afe:	5c9b      	ldrb	r3, [r3, r2]
 8017b00:	b2db      	uxtb	r3, r3
 8017b02:	001a      	movs	r2, r3
 8017b04:	2328      	movs	r3, #40	@ 0x28
 8017b06:	4013      	ands	r3, r2
 8017b08:	2b28      	cmp	r3, #40	@ 0x28
 8017b0a:	d000      	beq.n	8017b0e <I2C_ITAddrCplt+0x1e>
 8017b0c:	e088      	b.n	8017c20 <I2C_ITAddrCplt+0x130>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8017b0e:	687b      	ldr	r3, [r7, #4]
 8017b10:	681b      	ldr	r3, [r3, #0]
 8017b12:	699b      	ldr	r3, [r3, #24]
 8017b14:	0c1b      	lsrs	r3, r3, #16
 8017b16:	b2da      	uxtb	r2, r3
 8017b18:	250f      	movs	r5, #15
 8017b1a:	197b      	adds	r3, r7, r5
 8017b1c:	2101      	movs	r1, #1
 8017b1e:	400a      	ands	r2, r1
 8017b20:	701a      	strb	r2, [r3, #0]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8017b22:	687b      	ldr	r3, [r7, #4]
 8017b24:	681b      	ldr	r3, [r3, #0]
 8017b26:	699b      	ldr	r3, [r3, #24]
 8017b28:	0c1b      	lsrs	r3, r3, #16
 8017b2a:	b29a      	uxth	r2, r3
 8017b2c:	200c      	movs	r0, #12
 8017b2e:	183b      	adds	r3, r7, r0
 8017b30:	21fe      	movs	r1, #254	@ 0xfe
 8017b32:	400a      	ands	r2, r1
 8017b34:	801a      	strh	r2, [r3, #0]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8017b36:	687b      	ldr	r3, [r7, #4]
 8017b38:	681b      	ldr	r3, [r3, #0]
 8017b3a:	689b      	ldr	r3, [r3, #8]
 8017b3c:	b29a      	uxth	r2, r3
 8017b3e:	240a      	movs	r4, #10
 8017b40:	193b      	adds	r3, r7, r4
 8017b42:	0592      	lsls	r2, r2, #22
 8017b44:	0d92      	lsrs	r2, r2, #22
 8017b46:	801a      	strh	r2, [r3, #0]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8017b48:	687b      	ldr	r3, [r7, #4]
 8017b4a:	681b      	ldr	r3, [r3, #0]
 8017b4c:	68db      	ldr	r3, [r3, #12]
 8017b4e:	b29a      	uxth	r2, r3
 8017b50:	2308      	movs	r3, #8
 8017b52:	18fb      	adds	r3, r7, r3
 8017b54:	21fe      	movs	r1, #254	@ 0xfe
 8017b56:	400a      	ands	r2, r1
 8017b58:	801a      	strh	r2, [r3, #0]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8017b5a:	687b      	ldr	r3, [r7, #4]
 8017b5c:	68db      	ldr	r3, [r3, #12]
 8017b5e:	2b02      	cmp	r3, #2
 8017b60:	d148      	bne.n	8017bf4 <I2C_ITAddrCplt+0x104>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8017b62:	0021      	movs	r1, r4
 8017b64:	187b      	adds	r3, r7, r1
 8017b66:	881b      	ldrh	r3, [r3, #0]
 8017b68:	09db      	lsrs	r3, r3, #7
 8017b6a:	b29a      	uxth	r2, r3
 8017b6c:	183b      	adds	r3, r7, r0
 8017b6e:	881b      	ldrh	r3, [r3, #0]
 8017b70:	4053      	eors	r3, r2
 8017b72:	b29b      	uxth	r3, r3
 8017b74:	001a      	movs	r2, r3
 8017b76:	2306      	movs	r3, #6
 8017b78:	4013      	ands	r3, r2
 8017b7a:	d120      	bne.n	8017bbe <I2C_ITAddrCplt+0xce>
      {
        slaveaddrcode = ownadd1code;
 8017b7c:	183b      	adds	r3, r7, r0
 8017b7e:	187a      	adds	r2, r7, r1
 8017b80:	8812      	ldrh	r2, [r2, #0]
 8017b82:	801a      	strh	r2, [r3, #0]
        hi2c->AddrEventCount++;
 8017b84:	687b      	ldr	r3, [r7, #4]
 8017b86:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8017b88:	1c5a      	adds	r2, r3, #1
 8017b8a:	687b      	ldr	r3, [r7, #4]
 8017b8c:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 8017b8e:	687b      	ldr	r3, [r7, #4]
 8017b90:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8017b92:	2b02      	cmp	r3, #2
 8017b94:	d14c      	bne.n	8017c30 <I2C_ITAddrCplt+0x140>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8017b96:	687b      	ldr	r3, [r7, #4]
 8017b98:	2200      	movs	r2, #0
 8017b9a:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8017b9c:	687b      	ldr	r3, [r7, #4]
 8017b9e:	681b      	ldr	r3, [r3, #0]
 8017ba0:	2208      	movs	r2, #8
 8017ba2:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8017ba4:	687b      	ldr	r3, [r7, #4]
 8017ba6:	2240      	movs	r2, #64	@ 0x40
 8017ba8:	2100      	movs	r1, #0
 8017baa:	5499      	strb	r1, [r3, r2]

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8017bac:	183b      	adds	r3, r7, r0
 8017bae:	881a      	ldrh	r2, [r3, #0]
 8017bb0:	197b      	adds	r3, r7, r5
 8017bb2:	7819      	ldrb	r1, [r3, #0]
 8017bb4:	687b      	ldr	r3, [r7, #4]
 8017bb6:	0018      	movs	r0, r3
 8017bb8:	f7ff f914 	bl	8016de4 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8017bbc:	e038      	b.n	8017c30 <I2C_ITAddrCplt+0x140>
        slaveaddrcode = ownadd2code;
 8017bbe:	240c      	movs	r4, #12
 8017bc0:	193b      	adds	r3, r7, r4
 8017bc2:	2208      	movs	r2, #8
 8017bc4:	18ba      	adds	r2, r7, r2
 8017bc6:	8812      	ldrh	r2, [r2, #0]
 8017bc8:	801a      	strh	r2, [r3, #0]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8017bca:	2380      	movs	r3, #128	@ 0x80
 8017bcc:	021a      	lsls	r2, r3, #8
 8017bce:	687b      	ldr	r3, [r7, #4]
 8017bd0:	0011      	movs	r1, r2
 8017bd2:	0018      	movs	r0, r3
 8017bd4:	f001 f868 	bl	8018ca8 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8017bd8:	687b      	ldr	r3, [r7, #4]
 8017bda:	2240      	movs	r2, #64	@ 0x40
 8017bdc:	2100      	movs	r1, #0
 8017bde:	5499      	strb	r1, [r3, r2]
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8017be0:	193b      	adds	r3, r7, r4
 8017be2:	881a      	ldrh	r2, [r3, #0]
 8017be4:	230f      	movs	r3, #15
 8017be6:	18fb      	adds	r3, r7, r3
 8017be8:	7819      	ldrb	r1, [r3, #0]
 8017bea:	687b      	ldr	r3, [r7, #4]
 8017bec:	0018      	movs	r0, r3
 8017bee:	f7ff f8f9 	bl	8016de4 <HAL_I2C_AddrCallback>
}
 8017bf2:	e01d      	b.n	8017c30 <I2C_ITAddrCplt+0x140>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8017bf4:	2380      	movs	r3, #128	@ 0x80
 8017bf6:	021a      	lsls	r2, r3, #8
 8017bf8:	687b      	ldr	r3, [r7, #4]
 8017bfa:	0011      	movs	r1, r2
 8017bfc:	0018      	movs	r0, r3
 8017bfe:	f001 f853 	bl	8018ca8 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8017c02:	687b      	ldr	r3, [r7, #4]
 8017c04:	2240      	movs	r2, #64	@ 0x40
 8017c06:	2100      	movs	r1, #0
 8017c08:	5499      	strb	r1, [r3, r2]
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8017c0a:	230c      	movs	r3, #12
 8017c0c:	18fb      	adds	r3, r7, r3
 8017c0e:	881a      	ldrh	r2, [r3, #0]
 8017c10:	230f      	movs	r3, #15
 8017c12:	18fb      	adds	r3, r7, r3
 8017c14:	7819      	ldrb	r1, [r3, #0]
 8017c16:	687b      	ldr	r3, [r7, #4]
 8017c18:	0018      	movs	r0, r3
 8017c1a:	f7ff f8e3 	bl	8016de4 <HAL_I2C_AddrCallback>
}
 8017c1e:	e007      	b.n	8017c30 <I2C_ITAddrCplt+0x140>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8017c20:	687b      	ldr	r3, [r7, #4]
 8017c22:	681b      	ldr	r3, [r3, #0]
 8017c24:	2208      	movs	r2, #8
 8017c26:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8017c28:	687b      	ldr	r3, [r7, #4]
 8017c2a:	2240      	movs	r2, #64	@ 0x40
 8017c2c:	2100      	movs	r1, #0
 8017c2e:	5499      	strb	r1, [r3, r2]
}
 8017c30:	46c0      	nop			@ (mov r8, r8)
 8017c32:	46bd      	mov	sp, r7
 8017c34:	b004      	add	sp, #16
 8017c36:	bdb0      	pop	{r4, r5, r7, pc}

08017c38 <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8017c38:	b580      	push	{r7, lr}
 8017c3a:	b082      	sub	sp, #8
 8017c3c:	af00      	add	r7, sp, #0
 8017c3e:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8017c40:	687b      	ldr	r3, [r7, #4]
 8017c42:	2242      	movs	r2, #66	@ 0x42
 8017c44:	2100      	movs	r1, #0
 8017c46:	5499      	strb	r1, [r3, r2]

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8017c48:	687b      	ldr	r3, [r7, #4]
 8017c4a:	2241      	movs	r2, #65	@ 0x41
 8017c4c:	5c9b      	ldrb	r3, [r3, r2]
 8017c4e:	b2db      	uxtb	r3, r3
 8017c50:	2b21      	cmp	r3, #33	@ 0x21
 8017c52:	d117      	bne.n	8017c84 <I2C_ITMasterSeqCplt+0x4c>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8017c54:	687b      	ldr	r3, [r7, #4]
 8017c56:	2241      	movs	r2, #65	@ 0x41
 8017c58:	2120      	movs	r1, #32
 8017c5a:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8017c5c:	687b      	ldr	r3, [r7, #4]
 8017c5e:	2211      	movs	r2, #17
 8017c60:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 8017c62:	687b      	ldr	r3, [r7, #4]
 8017c64:	2200      	movs	r2, #0
 8017c66:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8017c68:	687b      	ldr	r3, [r7, #4]
 8017c6a:	2101      	movs	r1, #1
 8017c6c:	0018      	movs	r0, r3
 8017c6e:	f001 f81b 	bl	8018ca8 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8017c72:	687b      	ldr	r3, [r7, #4]
 8017c74:	2240      	movs	r2, #64	@ 0x40
 8017c76:	2100      	movs	r1, #0
 8017c78:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 8017c7a:	687b      	ldr	r3, [r7, #4]
 8017c7c:	0018      	movs	r0, r3
 8017c7e:	f7ff f891 	bl	8016da4 <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8017c82:	e016      	b.n	8017cb2 <I2C_ITMasterSeqCplt+0x7a>
    hi2c->State         = HAL_I2C_STATE_READY;
 8017c84:	687b      	ldr	r3, [r7, #4]
 8017c86:	2241      	movs	r2, #65	@ 0x41
 8017c88:	2120      	movs	r1, #32
 8017c8a:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8017c8c:	687b      	ldr	r3, [r7, #4]
 8017c8e:	2212      	movs	r2, #18
 8017c90:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 8017c92:	687b      	ldr	r3, [r7, #4]
 8017c94:	2200      	movs	r2, #0
 8017c96:	635a      	str	r2, [r3, #52]	@ 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8017c98:	687b      	ldr	r3, [r7, #4]
 8017c9a:	2102      	movs	r1, #2
 8017c9c:	0018      	movs	r0, r3
 8017c9e:	f001 f803 	bl	8018ca8 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8017ca2:	687b      	ldr	r3, [r7, #4]
 8017ca4:	2240      	movs	r2, #64	@ 0x40
 8017ca6:	2100      	movs	r1, #0
 8017ca8:	5499      	strb	r1, [r3, r2]
    HAL_I2C_MasterRxCpltCallback(hi2c);
 8017caa:	687b      	ldr	r3, [r7, #4]
 8017cac:	0018      	movs	r0, r3
 8017cae:	f7ff f881 	bl	8016db4 <HAL_I2C_MasterRxCpltCallback>
}
 8017cb2:	46c0      	nop			@ (mov r8, r8)
 8017cb4:	46bd      	mov	sp, r7
 8017cb6:	b002      	add	sp, #8
 8017cb8:	bd80      	pop	{r7, pc}
	...

08017cbc <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8017cbc:	b580      	push	{r7, lr}
 8017cbe:	b084      	sub	sp, #16
 8017cc0:	af00      	add	r7, sp, #0
 8017cc2:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8017cc4:	687b      	ldr	r3, [r7, #4]
 8017cc6:	681b      	ldr	r3, [r3, #0]
 8017cc8:	681b      	ldr	r3, [r3, #0]
 8017cca:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8017ccc:	687b      	ldr	r3, [r7, #4]
 8017cce:	2242      	movs	r2, #66	@ 0x42
 8017cd0:	2100      	movs	r1, #0
 8017cd2:	5499      	strb	r1, [r3, r2]

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8017cd4:	68fb      	ldr	r3, [r7, #12]
 8017cd6:	0b9b      	lsrs	r3, r3, #14
 8017cd8:	001a      	movs	r2, r3
 8017cda:	2301      	movs	r3, #1
 8017cdc:	4013      	ands	r3, r2
 8017cde:	d008      	beq.n	8017cf2 <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8017ce0:	687b      	ldr	r3, [r7, #4]
 8017ce2:	681b      	ldr	r3, [r3, #0]
 8017ce4:	681a      	ldr	r2, [r3, #0]
 8017ce6:	687b      	ldr	r3, [r7, #4]
 8017ce8:	681b      	ldr	r3, [r3, #0]
 8017cea:	4925      	ldr	r1, [pc, #148]	@ (8017d80 <I2C_ITSlaveSeqCplt+0xc4>)
 8017cec:	400a      	ands	r2, r1
 8017cee:	601a      	str	r2, [r3, #0]
 8017cf0:	e00d      	b.n	8017d0e <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8017cf2:	68fb      	ldr	r3, [r7, #12]
 8017cf4:	0bdb      	lsrs	r3, r3, #15
 8017cf6:	001a      	movs	r2, r3
 8017cf8:	2301      	movs	r3, #1
 8017cfa:	4013      	ands	r3, r2
 8017cfc:	d007      	beq.n	8017d0e <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8017cfe:	687b      	ldr	r3, [r7, #4]
 8017d00:	681b      	ldr	r3, [r3, #0]
 8017d02:	681a      	ldr	r2, [r3, #0]
 8017d04:	687b      	ldr	r3, [r7, #4]
 8017d06:	681b      	ldr	r3, [r3, #0]
 8017d08:	491e      	ldr	r1, [pc, #120]	@ (8017d84 <I2C_ITSlaveSeqCplt+0xc8>)
 8017d0a:	400a      	ands	r2, r1
 8017d0c:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8017d0e:	687b      	ldr	r3, [r7, #4]
 8017d10:	2241      	movs	r2, #65	@ 0x41
 8017d12:	5c9b      	ldrb	r3, [r3, r2]
 8017d14:	b2db      	uxtb	r3, r3
 8017d16:	2b29      	cmp	r3, #41	@ 0x29
 8017d18:	d114      	bne.n	8017d44 <I2C_ITSlaveSeqCplt+0x88>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8017d1a:	687b      	ldr	r3, [r7, #4]
 8017d1c:	2241      	movs	r2, #65	@ 0x41
 8017d1e:	2128      	movs	r1, #40	@ 0x28
 8017d20:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8017d22:	687b      	ldr	r3, [r7, #4]
 8017d24:	2221      	movs	r2, #33	@ 0x21
 8017d26:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8017d28:	687b      	ldr	r3, [r7, #4]
 8017d2a:	2101      	movs	r1, #1
 8017d2c:	0018      	movs	r0, r3
 8017d2e:	f000 ffbb 	bl	8018ca8 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8017d32:	687b      	ldr	r3, [r7, #4]
 8017d34:	2240      	movs	r2, #64	@ 0x40
 8017d36:	2100      	movs	r1, #0
 8017d38:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8017d3a:	687b      	ldr	r3, [r7, #4]
 8017d3c:	0018      	movs	r0, r3
 8017d3e:	f7ff f841 	bl	8016dc4 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8017d42:	e019      	b.n	8017d78 <I2C_ITSlaveSeqCplt+0xbc>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8017d44:	687b      	ldr	r3, [r7, #4]
 8017d46:	2241      	movs	r2, #65	@ 0x41
 8017d48:	5c9b      	ldrb	r3, [r3, r2]
 8017d4a:	b2db      	uxtb	r3, r3
 8017d4c:	2b2a      	cmp	r3, #42	@ 0x2a
 8017d4e:	d113      	bne.n	8017d78 <I2C_ITSlaveSeqCplt+0xbc>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8017d50:	687b      	ldr	r3, [r7, #4]
 8017d52:	2241      	movs	r2, #65	@ 0x41
 8017d54:	2128      	movs	r1, #40	@ 0x28
 8017d56:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8017d58:	687b      	ldr	r3, [r7, #4]
 8017d5a:	2222      	movs	r2, #34	@ 0x22
 8017d5c:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8017d5e:	687b      	ldr	r3, [r7, #4]
 8017d60:	2102      	movs	r1, #2
 8017d62:	0018      	movs	r0, r3
 8017d64:	f000 ffa0 	bl	8018ca8 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8017d68:	687b      	ldr	r3, [r7, #4]
 8017d6a:	2240      	movs	r2, #64	@ 0x40
 8017d6c:	2100      	movs	r1, #0
 8017d6e:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8017d70:	687b      	ldr	r3, [r7, #4]
 8017d72:	0018      	movs	r0, r3
 8017d74:	f7ff f82e 	bl	8016dd4 <HAL_I2C_SlaveRxCpltCallback>
}
 8017d78:	46c0      	nop			@ (mov r8, r8)
 8017d7a:	46bd      	mov	sp, r7
 8017d7c:	b004      	add	sp, #16
 8017d7e:	bd80      	pop	{r7, pc}
 8017d80:	ffffbfff 	.word	0xffffbfff
 8017d84:	ffff7fff 	.word	0xffff7fff

08017d88 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8017d88:	b580      	push	{r7, lr}
 8017d8a:	b086      	sub	sp, #24
 8017d8c:	af00      	add	r7, sp, #0
 8017d8e:	6078      	str	r0, [r7, #4]
 8017d90:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 8017d92:	683b      	ldr	r3, [r7, #0]
 8017d94:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8017d96:	687b      	ldr	r3, [r7, #4]
 8017d98:	681b      	ldr	r3, [r3, #0]
 8017d9a:	2220      	movs	r2, #32
 8017d9c:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8017d9e:	687b      	ldr	r3, [r7, #4]
 8017da0:	2241      	movs	r2, #65	@ 0x41
 8017da2:	5c9b      	ldrb	r3, [r3, r2]
 8017da4:	b2db      	uxtb	r3, r3
 8017da6:	2b21      	cmp	r3, #33	@ 0x21
 8017da8:	d108      	bne.n	8017dbc <I2C_ITMasterCplt+0x34>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8017daa:	687b      	ldr	r3, [r7, #4]
 8017dac:	2101      	movs	r1, #1
 8017dae:	0018      	movs	r0, r3
 8017db0:	f000 ff7a 	bl	8018ca8 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8017db4:	687b      	ldr	r3, [r7, #4]
 8017db6:	2211      	movs	r2, #17
 8017db8:	631a      	str	r2, [r3, #48]	@ 0x30
 8017dba:	e00d      	b.n	8017dd8 <I2C_ITMasterCplt+0x50>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8017dbc:	687b      	ldr	r3, [r7, #4]
 8017dbe:	2241      	movs	r2, #65	@ 0x41
 8017dc0:	5c9b      	ldrb	r3, [r3, r2]
 8017dc2:	b2db      	uxtb	r3, r3
 8017dc4:	2b22      	cmp	r3, #34	@ 0x22
 8017dc6:	d107      	bne.n	8017dd8 <I2C_ITMasterCplt+0x50>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8017dc8:	687b      	ldr	r3, [r7, #4]
 8017dca:	2102      	movs	r1, #2
 8017dcc:	0018      	movs	r0, r3
 8017dce:	f000 ff6b 	bl	8018ca8 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8017dd2:	687b      	ldr	r3, [r7, #4]
 8017dd4:	2212      	movs	r2, #18
 8017dd6:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8017dd8:	687b      	ldr	r3, [r7, #4]
 8017dda:	681b      	ldr	r3, [r3, #0]
 8017ddc:	685a      	ldr	r2, [r3, #4]
 8017dde:	687b      	ldr	r3, [r7, #4]
 8017de0:	681b      	ldr	r3, [r3, #0]
 8017de2:	4950      	ldr	r1, [pc, #320]	@ (8017f24 <I2C_ITMasterCplt+0x19c>)
 8017de4:	400a      	ands	r2, r1
 8017de6:	605a      	str	r2, [r3, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 8017de8:	687b      	ldr	r3, [r7, #4]
 8017dea:	2200      	movs	r2, #0
 8017dec:	635a      	str	r2, [r3, #52]	@ 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8017dee:	687b      	ldr	r3, [r7, #4]
 8017df0:	4a4d      	ldr	r2, [pc, #308]	@ (8017f28 <I2C_ITMasterCplt+0x1a0>)
 8017df2:	62da      	str	r2, [r3, #44]	@ 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 8017df4:	697b      	ldr	r3, [r7, #20]
 8017df6:	091b      	lsrs	r3, r3, #4
 8017df8:	001a      	movs	r2, r3
 8017dfa:	2301      	movs	r3, #1
 8017dfc:	4013      	ands	r3, r2
 8017dfe:	d009      	beq.n	8017e14 <I2C_ITMasterCplt+0x8c>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8017e00:	687b      	ldr	r3, [r7, #4]
 8017e02:	681b      	ldr	r3, [r3, #0]
 8017e04:	2210      	movs	r2, #16
 8017e06:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8017e08:	687b      	ldr	r3, [r7, #4]
 8017e0a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8017e0c:	2204      	movs	r2, #4
 8017e0e:	431a      	orrs	r2, r3
 8017e10:	687b      	ldr	r3, [r7, #4]
 8017e12:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 8017e14:	687b      	ldr	r3, [r7, #4]
 8017e16:	2241      	movs	r2, #65	@ 0x41
 8017e18:	5c9b      	ldrb	r3, [r3, r2]
 8017e1a:	b2db      	uxtb	r3, r3
 8017e1c:	2b60      	cmp	r3, #96	@ 0x60
 8017e1e:	d10b      	bne.n	8017e38 <I2C_ITMasterCplt+0xb0>
 8017e20:	697b      	ldr	r3, [r7, #20]
 8017e22:	089b      	lsrs	r3, r3, #2
 8017e24:	001a      	movs	r2, r3
 8017e26:	2301      	movs	r3, #1
 8017e28:	4013      	ands	r3, r2
 8017e2a:	d005      	beq.n	8017e38 <I2C_ITMasterCplt+0xb0>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 8017e2c:	687b      	ldr	r3, [r7, #4]
 8017e2e:	681b      	ldr	r3, [r3, #0]
 8017e30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8017e32:	b2db      	uxtb	r3, r3
 8017e34:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 8017e36:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8017e38:	687b      	ldr	r3, [r7, #4]
 8017e3a:	0018      	movs	r0, r3
 8017e3c:	f000 fb1f 	bl	801847e <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8017e40:	687b      	ldr	r3, [r7, #4]
 8017e42:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8017e44:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 8017e46:	687b      	ldr	r3, [r7, #4]
 8017e48:	2241      	movs	r2, #65	@ 0x41
 8017e4a:	5c9b      	ldrb	r3, [r3, r2]
 8017e4c:	b2db      	uxtb	r3, r3
 8017e4e:	2b60      	cmp	r3, #96	@ 0x60
 8017e50:	d002      	beq.n	8017e58 <I2C_ITMasterCplt+0xd0>
 8017e52:	693b      	ldr	r3, [r7, #16]
 8017e54:	2b00      	cmp	r3, #0
 8017e56:	d007      	beq.n	8017e68 <I2C_ITMasterCplt+0xe0>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8017e58:	687b      	ldr	r3, [r7, #4]
 8017e5a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8017e5c:	687b      	ldr	r3, [r7, #4]
 8017e5e:	0011      	movs	r1, r2
 8017e60:	0018      	movs	r0, r3
 8017e62:	f000 f9e1 	bl	8018228 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 8017e66:	e058      	b.n	8017f1a <I2C_ITMasterCplt+0x192>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8017e68:	687b      	ldr	r3, [r7, #4]
 8017e6a:	2241      	movs	r2, #65	@ 0x41
 8017e6c:	5c9b      	ldrb	r3, [r3, r2]
 8017e6e:	b2db      	uxtb	r3, r3
 8017e70:	2b21      	cmp	r3, #33	@ 0x21
 8017e72:	d126      	bne.n	8017ec2 <I2C_ITMasterCplt+0x13a>
    hi2c->State = HAL_I2C_STATE_READY;
 8017e74:	687b      	ldr	r3, [r7, #4]
 8017e76:	2241      	movs	r2, #65	@ 0x41
 8017e78:	2120      	movs	r1, #32
 8017e7a:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8017e7c:	687b      	ldr	r3, [r7, #4]
 8017e7e:	2200      	movs	r2, #0
 8017e80:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8017e82:	687b      	ldr	r3, [r7, #4]
 8017e84:	2242      	movs	r2, #66	@ 0x42
 8017e86:	5c9b      	ldrb	r3, [r3, r2]
 8017e88:	b2db      	uxtb	r3, r3
 8017e8a:	2b40      	cmp	r3, #64	@ 0x40
 8017e8c:	d10c      	bne.n	8017ea8 <I2C_ITMasterCplt+0x120>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8017e8e:	687b      	ldr	r3, [r7, #4]
 8017e90:	2242      	movs	r2, #66	@ 0x42
 8017e92:	2100      	movs	r1, #0
 8017e94:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 8017e96:	687b      	ldr	r3, [r7, #4]
 8017e98:	2240      	movs	r2, #64	@ 0x40
 8017e9a:	2100      	movs	r1, #0
 8017e9c:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MemTxCpltCallback(hi2c);
 8017e9e:	687b      	ldr	r3, [r7, #4]
 8017ea0:	0018      	movs	r0, r3
 8017ea2:	f7fe ffb7 	bl	8016e14 <HAL_I2C_MemTxCpltCallback>
}
 8017ea6:	e038      	b.n	8017f1a <I2C_ITMasterCplt+0x192>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8017ea8:	687b      	ldr	r3, [r7, #4]
 8017eaa:	2242      	movs	r2, #66	@ 0x42
 8017eac:	2100      	movs	r1, #0
 8017eae:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 8017eb0:	687b      	ldr	r3, [r7, #4]
 8017eb2:	2240      	movs	r2, #64	@ 0x40
 8017eb4:	2100      	movs	r1, #0
 8017eb6:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8017eb8:	687b      	ldr	r3, [r7, #4]
 8017eba:	0018      	movs	r0, r3
 8017ebc:	f7fe ff72 	bl	8016da4 <HAL_I2C_MasterTxCpltCallback>
}
 8017ec0:	e02b      	b.n	8017f1a <I2C_ITMasterCplt+0x192>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8017ec2:	687b      	ldr	r3, [r7, #4]
 8017ec4:	2241      	movs	r2, #65	@ 0x41
 8017ec6:	5c9b      	ldrb	r3, [r3, r2]
 8017ec8:	b2db      	uxtb	r3, r3
 8017eca:	2b22      	cmp	r3, #34	@ 0x22
 8017ecc:	d125      	bne.n	8017f1a <I2C_ITMasterCplt+0x192>
    hi2c->State = HAL_I2C_STATE_READY;
 8017ece:	687b      	ldr	r3, [r7, #4]
 8017ed0:	2241      	movs	r2, #65	@ 0x41
 8017ed2:	2120      	movs	r1, #32
 8017ed4:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8017ed6:	687b      	ldr	r3, [r7, #4]
 8017ed8:	2200      	movs	r2, #0
 8017eda:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8017edc:	687b      	ldr	r3, [r7, #4]
 8017ede:	2242      	movs	r2, #66	@ 0x42
 8017ee0:	5c9b      	ldrb	r3, [r3, r2]
 8017ee2:	b2db      	uxtb	r3, r3
 8017ee4:	2b40      	cmp	r3, #64	@ 0x40
 8017ee6:	d10c      	bne.n	8017f02 <I2C_ITMasterCplt+0x17a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8017ee8:	687b      	ldr	r3, [r7, #4]
 8017eea:	2242      	movs	r2, #66	@ 0x42
 8017eec:	2100      	movs	r1, #0
 8017eee:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 8017ef0:	687b      	ldr	r3, [r7, #4]
 8017ef2:	2240      	movs	r2, #64	@ 0x40
 8017ef4:	2100      	movs	r1, #0
 8017ef6:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MemRxCpltCallback(hi2c);
 8017ef8:	687b      	ldr	r3, [r7, #4]
 8017efa:	0018      	movs	r0, r3
 8017efc:	f7fe ff92 	bl	8016e24 <HAL_I2C_MemRxCpltCallback>
}
 8017f00:	e00b      	b.n	8017f1a <I2C_ITMasterCplt+0x192>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8017f02:	687b      	ldr	r3, [r7, #4]
 8017f04:	2242      	movs	r2, #66	@ 0x42
 8017f06:	2100      	movs	r1, #0
 8017f08:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 8017f0a:	687b      	ldr	r3, [r7, #4]
 8017f0c:	2240      	movs	r2, #64	@ 0x40
 8017f0e:	2100      	movs	r1, #0
 8017f10:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8017f12:	687b      	ldr	r3, [r7, #4]
 8017f14:	0018      	movs	r0, r3
 8017f16:	f7fe ff4d 	bl	8016db4 <HAL_I2C_MasterRxCpltCallback>
}
 8017f1a:	46c0      	nop			@ (mov r8, r8)
 8017f1c:	46bd      	mov	sp, r7
 8017f1e:	b006      	add	sp, #24
 8017f20:	bd80      	pop	{r7, pc}
 8017f22:	46c0      	nop			@ (mov r8, r8)
 8017f24:	fe00e800 	.word	0xfe00e800
 8017f28:	ffff0000 	.word	0xffff0000

08017f2c <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8017f2c:	b580      	push	{r7, lr}
 8017f2e:	b086      	sub	sp, #24
 8017f30:	af00      	add	r7, sp, #0
 8017f32:	6078      	str	r0, [r7, #4]
 8017f34:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8017f36:	687b      	ldr	r3, [r7, #4]
 8017f38:	681b      	ldr	r3, [r3, #0]
 8017f3a:	681b      	ldr	r3, [r3, #0]
 8017f3c:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8017f3e:	683b      	ldr	r3, [r7, #0]
 8017f40:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8017f42:	200f      	movs	r0, #15
 8017f44:	183b      	adds	r3, r7, r0
 8017f46:	687a      	ldr	r2, [r7, #4]
 8017f48:	2141      	movs	r1, #65	@ 0x41
 8017f4a:	5c52      	ldrb	r2, [r2, r1]
 8017f4c:	701a      	strb	r2, [r3, #0]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8017f4e:	687b      	ldr	r3, [r7, #4]
 8017f50:	681b      	ldr	r3, [r3, #0]
 8017f52:	2220      	movs	r2, #32
 8017f54:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8017f56:	183b      	adds	r3, r7, r0
 8017f58:	781b      	ldrb	r3, [r3, #0]
 8017f5a:	2b21      	cmp	r3, #33	@ 0x21
 8017f5c:	d003      	beq.n	8017f66 <I2C_ITSlaveCplt+0x3a>
 8017f5e:	183b      	adds	r3, r7, r0
 8017f60:	781b      	ldrb	r3, [r3, #0]
 8017f62:	2b29      	cmp	r3, #41	@ 0x29
 8017f64:	d109      	bne.n	8017f7a <I2C_ITSlaveCplt+0x4e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8017f66:	4a7d      	ldr	r2, [pc, #500]	@ (801815c <I2C_ITSlaveCplt+0x230>)
 8017f68:	687b      	ldr	r3, [r7, #4]
 8017f6a:	0011      	movs	r1, r2
 8017f6c:	0018      	movs	r0, r3
 8017f6e:	f000 fe9b 	bl	8018ca8 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8017f72:	687b      	ldr	r3, [r7, #4]
 8017f74:	2221      	movs	r2, #33	@ 0x21
 8017f76:	631a      	str	r2, [r3, #48]	@ 0x30
 8017f78:	e011      	b.n	8017f9e <I2C_ITSlaveCplt+0x72>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8017f7a:	220f      	movs	r2, #15
 8017f7c:	18bb      	adds	r3, r7, r2
 8017f7e:	781b      	ldrb	r3, [r3, #0]
 8017f80:	2b22      	cmp	r3, #34	@ 0x22
 8017f82:	d003      	beq.n	8017f8c <I2C_ITSlaveCplt+0x60>
 8017f84:	18bb      	adds	r3, r7, r2
 8017f86:	781b      	ldrb	r3, [r3, #0]
 8017f88:	2b2a      	cmp	r3, #42	@ 0x2a
 8017f8a:	d108      	bne.n	8017f9e <I2C_ITSlaveCplt+0x72>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8017f8c:	4a74      	ldr	r2, [pc, #464]	@ (8018160 <I2C_ITSlaveCplt+0x234>)
 8017f8e:	687b      	ldr	r3, [r7, #4]
 8017f90:	0011      	movs	r1, r2
 8017f92:	0018      	movs	r0, r3
 8017f94:	f000 fe88 	bl	8018ca8 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8017f98:	687b      	ldr	r3, [r7, #4]
 8017f9a:	2222      	movs	r2, #34	@ 0x22
 8017f9c:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8017f9e:	687b      	ldr	r3, [r7, #4]
 8017fa0:	681b      	ldr	r3, [r3, #0]
 8017fa2:	685a      	ldr	r2, [r3, #4]
 8017fa4:	687b      	ldr	r3, [r7, #4]
 8017fa6:	681b      	ldr	r3, [r3, #0]
 8017fa8:	2180      	movs	r1, #128	@ 0x80
 8017faa:	0209      	lsls	r1, r1, #8
 8017fac:	430a      	orrs	r2, r1
 8017fae:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8017fb0:	687b      	ldr	r3, [r7, #4]
 8017fb2:	681b      	ldr	r3, [r3, #0]
 8017fb4:	685a      	ldr	r2, [r3, #4]
 8017fb6:	687b      	ldr	r3, [r7, #4]
 8017fb8:	681b      	ldr	r3, [r3, #0]
 8017fba:	496a      	ldr	r1, [pc, #424]	@ (8018164 <I2C_ITSlaveCplt+0x238>)
 8017fbc:	400a      	ands	r2, r1
 8017fbe:	605a      	str	r2, [r3, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8017fc0:	687b      	ldr	r3, [r7, #4]
 8017fc2:	0018      	movs	r0, r3
 8017fc4:	f000 fa5b 	bl	801847e <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8017fc8:	693b      	ldr	r3, [r7, #16]
 8017fca:	0b9b      	lsrs	r3, r3, #14
 8017fcc:	001a      	movs	r2, r3
 8017fce:	2301      	movs	r3, #1
 8017fd0:	4013      	ands	r3, r2
 8017fd2:	d013      	beq.n	8017ffc <I2C_ITSlaveCplt+0xd0>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8017fd4:	687b      	ldr	r3, [r7, #4]
 8017fd6:	681b      	ldr	r3, [r3, #0]
 8017fd8:	681a      	ldr	r2, [r3, #0]
 8017fda:	687b      	ldr	r3, [r7, #4]
 8017fdc:	681b      	ldr	r3, [r3, #0]
 8017fde:	4962      	ldr	r1, [pc, #392]	@ (8018168 <I2C_ITSlaveCplt+0x23c>)
 8017fe0:	400a      	ands	r2, r1
 8017fe2:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8017fe4:	687b      	ldr	r3, [r7, #4]
 8017fe6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8017fe8:	2b00      	cmp	r3, #0
 8017fea:	d020      	beq.n	801802e <I2C_ITSlaveCplt+0x102>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8017fec:	687b      	ldr	r3, [r7, #4]
 8017fee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8017ff0:	681b      	ldr	r3, [r3, #0]
 8017ff2:	685b      	ldr	r3, [r3, #4]
 8017ff4:	b29a      	uxth	r2, r3
 8017ff6:	687b      	ldr	r3, [r7, #4]
 8017ff8:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8017ffa:	e018      	b.n	801802e <I2C_ITSlaveCplt+0x102>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8017ffc:	693b      	ldr	r3, [r7, #16]
 8017ffe:	0bdb      	lsrs	r3, r3, #15
 8018000:	001a      	movs	r2, r3
 8018002:	2301      	movs	r3, #1
 8018004:	4013      	ands	r3, r2
 8018006:	d012      	beq.n	801802e <I2C_ITSlaveCplt+0x102>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8018008:	687b      	ldr	r3, [r7, #4]
 801800a:	681b      	ldr	r3, [r3, #0]
 801800c:	681a      	ldr	r2, [r3, #0]
 801800e:	687b      	ldr	r3, [r7, #4]
 8018010:	681b      	ldr	r3, [r3, #0]
 8018012:	4956      	ldr	r1, [pc, #344]	@ (801816c <I2C_ITSlaveCplt+0x240>)
 8018014:	400a      	ands	r2, r1
 8018016:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8018018:	687b      	ldr	r3, [r7, #4]
 801801a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801801c:	2b00      	cmp	r3, #0
 801801e:	d006      	beq.n	801802e <I2C_ITSlaveCplt+0x102>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8018020:	687b      	ldr	r3, [r7, #4]
 8018022:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8018024:	681b      	ldr	r3, [r3, #0]
 8018026:	685b      	ldr	r3, [r3, #4]
 8018028:	b29a      	uxth	r2, r3
 801802a:	687b      	ldr	r3, [r7, #4]
 801802c:	855a      	strh	r2, [r3, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 801802e:	697b      	ldr	r3, [r7, #20]
 8018030:	089b      	lsrs	r3, r3, #2
 8018032:	001a      	movs	r2, r3
 8018034:	2301      	movs	r3, #1
 8018036:	4013      	ands	r3, r2
 8018038:	d020      	beq.n	801807c <I2C_ITSlaveCplt+0x150>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 801803a:	697b      	ldr	r3, [r7, #20]
 801803c:	2204      	movs	r2, #4
 801803e:	4393      	bics	r3, r2
 8018040:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8018042:	687b      	ldr	r3, [r7, #4]
 8018044:	681b      	ldr	r3, [r3, #0]
 8018046:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8018048:	687b      	ldr	r3, [r7, #4]
 801804a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801804c:	b2d2      	uxtb	r2, r2
 801804e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8018050:	687b      	ldr	r3, [r7, #4]
 8018052:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018054:	1c5a      	adds	r2, r3, #1
 8018056:	687b      	ldr	r3, [r7, #4]
 8018058:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 801805a:	687b      	ldr	r3, [r7, #4]
 801805c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801805e:	2b00      	cmp	r3, #0
 8018060:	d00c      	beq.n	801807c <I2C_ITSlaveCplt+0x150>
    {
      hi2c->XferSize--;
 8018062:	687b      	ldr	r3, [r7, #4]
 8018064:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8018066:	3b01      	subs	r3, #1
 8018068:	b29a      	uxth	r2, r3
 801806a:	687b      	ldr	r3, [r7, #4]
 801806c:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 801806e:	687b      	ldr	r3, [r7, #4]
 8018070:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8018072:	b29b      	uxth	r3, r3
 8018074:	3b01      	subs	r3, #1
 8018076:	b29a      	uxth	r2, r3
 8018078:	687b      	ldr	r3, [r7, #4]
 801807a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 801807c:	687b      	ldr	r3, [r7, #4]
 801807e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8018080:	b29b      	uxth	r3, r3
 8018082:	2b00      	cmp	r3, #0
 8018084:	d005      	beq.n	8018092 <I2C_ITSlaveCplt+0x166>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8018086:	687b      	ldr	r3, [r7, #4]
 8018088:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801808a:	2204      	movs	r2, #4
 801808c:	431a      	orrs	r2, r3
 801808e:	687b      	ldr	r3, [r7, #4]
 8018090:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8018092:	687b      	ldr	r3, [r7, #4]
 8018094:	2242      	movs	r2, #66	@ 0x42
 8018096:	2100      	movs	r1, #0
 8018098:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 801809a:	687b      	ldr	r3, [r7, #4]
 801809c:	2200      	movs	r2, #0
 801809e:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80180a0:	687b      	ldr	r3, [r7, #4]
 80180a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80180a4:	2b00      	cmp	r3, #0
 80180a6:	d013      	beq.n	80180d0 <I2C_ITSlaveCplt+0x1a4>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 80180a8:	687b      	ldr	r3, [r7, #4]
 80180aa:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80180ac:	687b      	ldr	r3, [r7, #4]
 80180ae:	0011      	movs	r1, r2
 80180b0:	0018      	movs	r0, r3
 80180b2:	f000 f8b9 	bl	8018228 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80180b6:	687b      	ldr	r3, [r7, #4]
 80180b8:	2241      	movs	r2, #65	@ 0x41
 80180ba:	5c9b      	ldrb	r3, [r3, r2]
 80180bc:	b2db      	uxtb	r3, r3
 80180be:	2b28      	cmp	r3, #40	@ 0x28
 80180c0:	d147      	bne.n	8018152 <I2C_ITSlaveCplt+0x226>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 80180c2:	697a      	ldr	r2, [r7, #20]
 80180c4:	687b      	ldr	r3, [r7, #4]
 80180c6:	0011      	movs	r1, r2
 80180c8:	0018      	movs	r0, r3
 80180ca:	f000 f853 	bl	8018174 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80180ce:	e040      	b.n	8018152 <I2C_ITSlaveCplt+0x226>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80180d0:	687b      	ldr	r3, [r7, #4]
 80180d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80180d4:	4a26      	ldr	r2, [pc, #152]	@ (8018170 <I2C_ITSlaveCplt+0x244>)
 80180d6:	4293      	cmp	r3, r2
 80180d8:	d016      	beq.n	8018108 <I2C_ITSlaveCplt+0x1dc>
    I2C_ITSlaveSeqCplt(hi2c);
 80180da:	687b      	ldr	r3, [r7, #4]
 80180dc:	0018      	movs	r0, r3
 80180de:	f7ff fded 	bl	8017cbc <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80180e2:	687b      	ldr	r3, [r7, #4]
 80180e4:	4a22      	ldr	r2, [pc, #136]	@ (8018170 <I2C_ITSlaveCplt+0x244>)
 80180e6:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 80180e8:	687b      	ldr	r3, [r7, #4]
 80180ea:	2241      	movs	r2, #65	@ 0x41
 80180ec:	2120      	movs	r1, #32
 80180ee:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 80180f0:	687b      	ldr	r3, [r7, #4]
 80180f2:	2200      	movs	r2, #0
 80180f4:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80180f6:	687b      	ldr	r3, [r7, #4]
 80180f8:	2240      	movs	r2, #64	@ 0x40
 80180fa:	2100      	movs	r1, #0
 80180fc:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ListenCpltCallback(hi2c);
 80180fe:	687b      	ldr	r3, [r7, #4]
 8018100:	0018      	movs	r0, r3
 8018102:	f7fe fe7f 	bl	8016e04 <HAL_I2C_ListenCpltCallback>
}
 8018106:	e024      	b.n	8018152 <I2C_ITSlaveCplt+0x226>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8018108:	687b      	ldr	r3, [r7, #4]
 801810a:	2241      	movs	r2, #65	@ 0x41
 801810c:	5c9b      	ldrb	r3, [r3, r2]
 801810e:	b2db      	uxtb	r3, r3
 8018110:	2b22      	cmp	r3, #34	@ 0x22
 8018112:	d10f      	bne.n	8018134 <I2C_ITSlaveCplt+0x208>
    hi2c->State = HAL_I2C_STATE_READY;
 8018114:	687b      	ldr	r3, [r7, #4]
 8018116:	2241      	movs	r2, #65	@ 0x41
 8018118:	2120      	movs	r1, #32
 801811a:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 801811c:	687b      	ldr	r3, [r7, #4]
 801811e:	2200      	movs	r2, #0
 8018120:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8018122:	687b      	ldr	r3, [r7, #4]
 8018124:	2240      	movs	r2, #64	@ 0x40
 8018126:	2100      	movs	r1, #0
 8018128:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 801812a:	687b      	ldr	r3, [r7, #4]
 801812c:	0018      	movs	r0, r3
 801812e:	f7fe fe51 	bl	8016dd4 <HAL_I2C_SlaveRxCpltCallback>
}
 8018132:	e00e      	b.n	8018152 <I2C_ITSlaveCplt+0x226>
    hi2c->State = HAL_I2C_STATE_READY;
 8018134:	687b      	ldr	r3, [r7, #4]
 8018136:	2241      	movs	r2, #65	@ 0x41
 8018138:	2120      	movs	r1, #32
 801813a:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 801813c:	687b      	ldr	r3, [r7, #4]
 801813e:	2200      	movs	r2, #0
 8018140:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8018142:	687b      	ldr	r3, [r7, #4]
 8018144:	2240      	movs	r2, #64	@ 0x40
 8018146:	2100      	movs	r1, #0
 8018148:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 801814a:	687b      	ldr	r3, [r7, #4]
 801814c:	0018      	movs	r0, r3
 801814e:	f7fe fe39 	bl	8016dc4 <HAL_I2C_SlaveTxCpltCallback>
}
 8018152:	46c0      	nop			@ (mov r8, r8)
 8018154:	46bd      	mov	sp, r7
 8018156:	b006      	add	sp, #24
 8018158:	bd80      	pop	{r7, pc}
 801815a:	46c0      	nop			@ (mov r8, r8)
 801815c:	00008001 	.word	0x00008001
 8018160:	00008002 	.word	0x00008002
 8018164:	fe00e800 	.word	0xfe00e800
 8018168:	ffffbfff 	.word	0xffffbfff
 801816c:	ffff7fff 	.word	0xffff7fff
 8018170:	ffff0000 	.word	0xffff0000

08018174 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8018174:	b580      	push	{r7, lr}
 8018176:	b082      	sub	sp, #8
 8018178:	af00      	add	r7, sp, #0
 801817a:	6078      	str	r0, [r7, #4]
 801817c:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 801817e:	687b      	ldr	r3, [r7, #4]
 8018180:	4a27      	ldr	r2, [pc, #156]	@ (8018220 <I2C_ITListenCplt+0xac>)
 8018182:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8018184:	687b      	ldr	r3, [r7, #4]
 8018186:	2200      	movs	r2, #0
 8018188:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 801818a:	687b      	ldr	r3, [r7, #4]
 801818c:	2241      	movs	r2, #65	@ 0x41
 801818e:	2120      	movs	r1, #32
 8018190:	5499      	strb	r1, [r3, r2]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8018192:	687b      	ldr	r3, [r7, #4]
 8018194:	2242      	movs	r2, #66	@ 0x42
 8018196:	2100      	movs	r1, #0
 8018198:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 801819a:	687b      	ldr	r3, [r7, #4]
 801819c:	2200      	movs	r2, #0
 801819e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 80181a0:	683b      	ldr	r3, [r7, #0]
 80181a2:	089b      	lsrs	r3, r3, #2
 80181a4:	001a      	movs	r2, r3
 80181a6:	2301      	movs	r3, #1
 80181a8:	4013      	ands	r3, r2
 80181aa:	d022      	beq.n	80181f2 <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80181ac:	687b      	ldr	r3, [r7, #4]
 80181ae:	681b      	ldr	r3, [r3, #0]
 80181b0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80181b2:	687b      	ldr	r3, [r7, #4]
 80181b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80181b6:	b2d2      	uxtb	r2, r2
 80181b8:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80181ba:	687b      	ldr	r3, [r7, #4]
 80181bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80181be:	1c5a      	adds	r2, r3, #1
 80181c0:	687b      	ldr	r3, [r7, #4]
 80181c2:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 80181c4:	687b      	ldr	r3, [r7, #4]
 80181c6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80181c8:	2b00      	cmp	r3, #0
 80181ca:	d012      	beq.n	80181f2 <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 80181cc:	687b      	ldr	r3, [r7, #4]
 80181ce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80181d0:	3b01      	subs	r3, #1
 80181d2:	b29a      	uxth	r2, r3
 80181d4:	687b      	ldr	r3, [r7, #4]
 80181d6:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80181d8:	687b      	ldr	r3, [r7, #4]
 80181da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80181dc:	b29b      	uxth	r3, r3
 80181de:	3b01      	subs	r3, #1
 80181e0:	b29a      	uxth	r2, r3
 80181e2:	687b      	ldr	r3, [r7, #4]
 80181e4:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80181e6:	687b      	ldr	r3, [r7, #4]
 80181e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80181ea:	2204      	movs	r2, #4
 80181ec:	431a      	orrs	r2, r3
 80181ee:	687b      	ldr	r3, [r7, #4]
 80181f0:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80181f2:	4a0c      	ldr	r2, [pc, #48]	@ (8018224 <I2C_ITListenCplt+0xb0>)
 80181f4:	687b      	ldr	r3, [r7, #4]
 80181f6:	0011      	movs	r1, r2
 80181f8:	0018      	movs	r0, r3
 80181fa:	f000 fd55 	bl	8018ca8 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80181fe:	687b      	ldr	r3, [r7, #4]
 8018200:	681b      	ldr	r3, [r3, #0]
 8018202:	2210      	movs	r2, #16
 8018204:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8018206:	687b      	ldr	r3, [r7, #4]
 8018208:	2240      	movs	r2, #64	@ 0x40
 801820a:	2100      	movs	r1, #0
 801820c:	5499      	strb	r1, [r3, r2]

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 801820e:	687b      	ldr	r3, [r7, #4]
 8018210:	0018      	movs	r0, r3
 8018212:	f7fe fdf7 	bl	8016e04 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8018216:	46c0      	nop			@ (mov r8, r8)
 8018218:	46bd      	mov	sp, r7
 801821a:	b002      	add	sp, #8
 801821c:	bd80      	pop	{r7, pc}
 801821e:	46c0      	nop			@ (mov r8, r8)
 8018220:	ffff0000 	.word	0xffff0000
 8018224:	00008003 	.word	0x00008003

08018228 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8018228:	b580      	push	{r7, lr}
 801822a:	b084      	sub	sp, #16
 801822c:	af00      	add	r7, sp, #0
 801822e:	6078      	str	r0, [r7, #4]
 8018230:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8018232:	200f      	movs	r0, #15
 8018234:	183b      	adds	r3, r7, r0
 8018236:	687a      	ldr	r2, [r7, #4]
 8018238:	2141      	movs	r1, #65	@ 0x41
 801823a:	5c52      	ldrb	r2, [r2, r1]
 801823c:	701a      	strb	r2, [r3, #0]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 801823e:	687b      	ldr	r3, [r7, #4]
 8018240:	2242      	movs	r2, #66	@ 0x42
 8018242:	2100      	movs	r1, #0
 8018244:	5499      	strb	r1, [r3, r2]
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8018246:	687b      	ldr	r3, [r7, #4]
 8018248:	4a72      	ldr	r2, [pc, #456]	@ (8018414 <I2C_ITError+0x1ec>)
 801824a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 801824c:	687b      	ldr	r3, [r7, #4]
 801824e:	2200      	movs	r2, #0
 8018250:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8018252:	687b      	ldr	r3, [r7, #4]
 8018254:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8018256:	683b      	ldr	r3, [r7, #0]
 8018258:	431a      	orrs	r2, r3
 801825a:	687b      	ldr	r3, [r7, #4]
 801825c:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 801825e:	183b      	adds	r3, r7, r0
 8018260:	781b      	ldrb	r3, [r3, #0]
 8018262:	2b28      	cmp	r3, #40	@ 0x28
 8018264:	d007      	beq.n	8018276 <I2C_ITError+0x4e>
 8018266:	183b      	adds	r3, r7, r0
 8018268:	781b      	ldrb	r3, [r3, #0]
 801826a:	2b29      	cmp	r3, #41	@ 0x29
 801826c:	d003      	beq.n	8018276 <I2C_ITError+0x4e>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 801826e:	183b      	adds	r3, r7, r0
 8018270:	781b      	ldrb	r3, [r3, #0]
 8018272:	2b2a      	cmp	r3, #42	@ 0x2a
 8018274:	d10c      	bne.n	8018290 <I2C_ITError+0x68>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8018276:	687b      	ldr	r3, [r7, #4]
 8018278:	2103      	movs	r1, #3
 801827a:	0018      	movs	r0, r3
 801827c:	f000 fd14 	bl	8018ca8 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8018280:	687b      	ldr	r3, [r7, #4]
 8018282:	2241      	movs	r2, #65	@ 0x41
 8018284:	2128      	movs	r1, #40	@ 0x28
 8018286:	5499      	strb	r1, [r3, r2]
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8018288:	687b      	ldr	r3, [r7, #4]
 801828a:	4a63      	ldr	r2, [pc, #396]	@ (8018418 <I2C_ITError+0x1f0>)
 801828c:	635a      	str	r2, [r3, #52]	@ 0x34
 801828e:	e032      	b.n	80182f6 <I2C_ITError+0xce>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8018290:	4a62      	ldr	r2, [pc, #392]	@ (801841c <I2C_ITError+0x1f4>)
 8018292:	687b      	ldr	r3, [r7, #4]
 8018294:	0011      	movs	r1, r2
 8018296:	0018      	movs	r0, r3
 8018298:	f000 fd06 	bl	8018ca8 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 801829c:	687b      	ldr	r3, [r7, #4]
 801829e:	0018      	movs	r0, r3
 80182a0:	f000 f8ed 	bl	801847e <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 80182a4:	687b      	ldr	r3, [r7, #4]
 80182a6:	2241      	movs	r2, #65	@ 0x41
 80182a8:	5c9b      	ldrb	r3, [r3, r2]
 80182aa:	b2db      	uxtb	r3, r3
 80182ac:	2b60      	cmp	r3, #96	@ 0x60
 80182ae:	d01f      	beq.n	80182f0 <I2C_ITError+0xc8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 80182b0:	687b      	ldr	r3, [r7, #4]
 80182b2:	2241      	movs	r2, #65	@ 0x41
 80182b4:	2120      	movs	r1, #32
 80182b6:	5499      	strb	r1, [r3, r2]

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80182b8:	687b      	ldr	r3, [r7, #4]
 80182ba:	681b      	ldr	r3, [r3, #0]
 80182bc:	699b      	ldr	r3, [r3, #24]
 80182be:	2220      	movs	r2, #32
 80182c0:	4013      	ands	r3, r2
 80182c2:	2b20      	cmp	r3, #32
 80182c4:	d114      	bne.n	80182f0 <I2C_ITError+0xc8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80182c6:	687b      	ldr	r3, [r7, #4]
 80182c8:	681b      	ldr	r3, [r3, #0]
 80182ca:	699b      	ldr	r3, [r3, #24]
 80182cc:	2210      	movs	r2, #16
 80182ce:	4013      	ands	r3, r2
 80182d0:	2b10      	cmp	r3, #16
 80182d2:	d109      	bne.n	80182e8 <I2C_ITError+0xc0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80182d4:	687b      	ldr	r3, [r7, #4]
 80182d6:	681b      	ldr	r3, [r3, #0]
 80182d8:	2210      	movs	r2, #16
 80182da:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80182dc:	687b      	ldr	r3, [r7, #4]
 80182de:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80182e0:	2204      	movs	r2, #4
 80182e2:	431a      	orrs	r2, r3
 80182e4:	687b      	ldr	r3, [r7, #4]
 80182e6:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80182e8:	687b      	ldr	r3, [r7, #4]
 80182ea:	681b      	ldr	r3, [r3, #0]
 80182ec:	2220      	movs	r2, #32
 80182ee:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 80182f0:	687b      	ldr	r3, [r7, #4]
 80182f2:	2200      	movs	r2, #0
 80182f4:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 80182f6:	687b      	ldr	r3, [r7, #4]
 80182f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80182fa:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 80182fc:	687b      	ldr	r3, [r7, #4]
 80182fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8018300:	2b00      	cmp	r3, #0
 8018302:	d03b      	beq.n	801837c <I2C_ITError+0x154>
 8018304:	68bb      	ldr	r3, [r7, #8]
 8018306:	2b11      	cmp	r3, #17
 8018308:	d002      	beq.n	8018310 <I2C_ITError+0xe8>
 801830a:	68bb      	ldr	r3, [r7, #8]
 801830c:	2b21      	cmp	r3, #33	@ 0x21
 801830e:	d135      	bne.n	801837c <I2C_ITError+0x154>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8018310:	687b      	ldr	r3, [r7, #4]
 8018312:	681b      	ldr	r3, [r3, #0]
 8018314:	681a      	ldr	r2, [r3, #0]
 8018316:	2380      	movs	r3, #128	@ 0x80
 8018318:	01db      	lsls	r3, r3, #7
 801831a:	401a      	ands	r2, r3
 801831c:	2380      	movs	r3, #128	@ 0x80
 801831e:	01db      	lsls	r3, r3, #7
 8018320:	429a      	cmp	r2, r3
 8018322:	d107      	bne.n	8018334 <I2C_ITError+0x10c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8018324:	687b      	ldr	r3, [r7, #4]
 8018326:	681b      	ldr	r3, [r3, #0]
 8018328:	681a      	ldr	r2, [r3, #0]
 801832a:	687b      	ldr	r3, [r7, #4]
 801832c:	681b      	ldr	r3, [r3, #0]
 801832e:	493c      	ldr	r1, [pc, #240]	@ (8018420 <I2C_ITError+0x1f8>)
 8018330:	400a      	ands	r2, r1
 8018332:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8018334:	687b      	ldr	r3, [r7, #4]
 8018336:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8018338:	0018      	movs	r0, r3
 801833a:	f7fd f9c6 	bl	80156ca <HAL_DMA_GetState>
 801833e:	0003      	movs	r3, r0
 8018340:	2b01      	cmp	r3, #1
 8018342:	d016      	beq.n	8018372 <I2C_ITError+0x14a>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8018344:	687b      	ldr	r3, [r7, #4]
 8018346:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8018348:	4a36      	ldr	r2, [pc, #216]	@ (8018424 <I2C_ITError+0x1fc>)
 801834a:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 801834c:	687b      	ldr	r3, [r7, #4]
 801834e:	2240      	movs	r2, #64	@ 0x40
 8018350:	2100      	movs	r1, #0
 8018352:	5499      	strb	r1, [r3, r2]

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8018354:	687b      	ldr	r3, [r7, #4]
 8018356:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8018358:	0018      	movs	r0, r3
 801835a:	f7fd f8c1 	bl	80154e0 <HAL_DMA_Abort_IT>
 801835e:	1e03      	subs	r3, r0, #0
 8018360:	d051      	beq.n	8018406 <I2C_ITError+0x1de>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8018362:	687b      	ldr	r3, [r7, #4]
 8018364:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8018366:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8018368:	687b      	ldr	r3, [r7, #4]
 801836a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801836c:	0018      	movs	r0, r3
 801836e:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8018370:	e049      	b.n	8018406 <I2C_ITError+0x1de>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8018372:	687b      	ldr	r3, [r7, #4]
 8018374:	0018      	movs	r0, r3
 8018376:	f000 f859 	bl	801842c <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 801837a:	e044      	b.n	8018406 <I2C_ITError+0x1de>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 801837c:	687b      	ldr	r3, [r7, #4]
 801837e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8018380:	2b00      	cmp	r3, #0
 8018382:	d03b      	beq.n	80183fc <I2C_ITError+0x1d4>
 8018384:	68bb      	ldr	r3, [r7, #8]
 8018386:	2b12      	cmp	r3, #18
 8018388:	d002      	beq.n	8018390 <I2C_ITError+0x168>
 801838a:	68bb      	ldr	r3, [r7, #8]
 801838c:	2b22      	cmp	r3, #34	@ 0x22
 801838e:	d135      	bne.n	80183fc <I2C_ITError+0x1d4>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8018390:	687b      	ldr	r3, [r7, #4]
 8018392:	681b      	ldr	r3, [r3, #0]
 8018394:	681a      	ldr	r2, [r3, #0]
 8018396:	2380      	movs	r3, #128	@ 0x80
 8018398:	021b      	lsls	r3, r3, #8
 801839a:	401a      	ands	r2, r3
 801839c:	2380      	movs	r3, #128	@ 0x80
 801839e:	021b      	lsls	r3, r3, #8
 80183a0:	429a      	cmp	r2, r3
 80183a2:	d107      	bne.n	80183b4 <I2C_ITError+0x18c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80183a4:	687b      	ldr	r3, [r7, #4]
 80183a6:	681b      	ldr	r3, [r3, #0]
 80183a8:	681a      	ldr	r2, [r3, #0]
 80183aa:	687b      	ldr	r3, [r7, #4]
 80183ac:	681b      	ldr	r3, [r3, #0]
 80183ae:	491e      	ldr	r1, [pc, #120]	@ (8018428 <I2C_ITError+0x200>)
 80183b0:	400a      	ands	r2, r1
 80183b2:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80183b4:	687b      	ldr	r3, [r7, #4]
 80183b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80183b8:	0018      	movs	r0, r3
 80183ba:	f7fd f986 	bl	80156ca <HAL_DMA_GetState>
 80183be:	0003      	movs	r3, r0
 80183c0:	2b01      	cmp	r3, #1
 80183c2:	d016      	beq.n	80183f2 <I2C_ITError+0x1ca>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80183c4:	687b      	ldr	r3, [r7, #4]
 80183c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80183c8:	4a16      	ldr	r2, [pc, #88]	@ (8018424 <I2C_ITError+0x1fc>)
 80183ca:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80183cc:	687b      	ldr	r3, [r7, #4]
 80183ce:	2240      	movs	r2, #64	@ 0x40
 80183d0:	2100      	movs	r1, #0
 80183d2:	5499      	strb	r1, [r3, r2]

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80183d4:	687b      	ldr	r3, [r7, #4]
 80183d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80183d8:	0018      	movs	r0, r3
 80183da:	f7fd f881 	bl	80154e0 <HAL_DMA_Abort_IT>
 80183de:	1e03      	subs	r3, r0, #0
 80183e0:	d013      	beq.n	801840a <I2C_ITError+0x1e2>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80183e2:	687b      	ldr	r3, [r7, #4]
 80183e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80183e6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80183e8:	687b      	ldr	r3, [r7, #4]
 80183ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80183ec:	0018      	movs	r0, r3
 80183ee:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80183f0:	e00b      	b.n	801840a <I2C_ITError+0x1e2>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80183f2:	687b      	ldr	r3, [r7, #4]
 80183f4:	0018      	movs	r0, r3
 80183f6:	f000 f819 	bl	801842c <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80183fa:	e006      	b.n	801840a <I2C_ITError+0x1e2>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 80183fc:	687b      	ldr	r3, [r7, #4]
 80183fe:	0018      	movs	r0, r3
 8018400:	f000 f814 	bl	801842c <I2C_TreatErrorCallback>
  }
}
 8018404:	e002      	b.n	801840c <I2C_ITError+0x1e4>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8018406:	46c0      	nop			@ (mov r8, r8)
 8018408:	e000      	b.n	801840c <I2C_ITError+0x1e4>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 801840a:	46c0      	nop			@ (mov r8, r8)
}
 801840c:	46c0      	nop			@ (mov r8, r8)
 801840e:	46bd      	mov	sp, r7
 8018410:	b004      	add	sp, #16
 8018412:	bd80      	pop	{r7, pc}
 8018414:	ffff0000 	.word	0xffff0000
 8018418:	080170d9 	.word	0x080170d9
 801841c:	00008003 	.word	0x00008003
 8018420:	ffffbfff 	.word	0xffffbfff
 8018424:	08018637 	.word	0x08018637
 8018428:	ffff7fff 	.word	0xffff7fff

0801842c <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 801842c:	b580      	push	{r7, lr}
 801842e:	b082      	sub	sp, #8
 8018430:	af00      	add	r7, sp, #0
 8018432:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8018434:	687b      	ldr	r3, [r7, #4]
 8018436:	2241      	movs	r2, #65	@ 0x41
 8018438:	5c9b      	ldrb	r3, [r3, r2]
 801843a:	b2db      	uxtb	r3, r3
 801843c:	2b60      	cmp	r3, #96	@ 0x60
 801843e:	d10f      	bne.n	8018460 <I2C_TreatErrorCallback+0x34>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8018440:	687b      	ldr	r3, [r7, #4]
 8018442:	2241      	movs	r2, #65	@ 0x41
 8018444:	2120      	movs	r1, #32
 8018446:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8018448:	687b      	ldr	r3, [r7, #4]
 801844a:	2200      	movs	r2, #0
 801844c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 801844e:	687b      	ldr	r3, [r7, #4]
 8018450:	2240      	movs	r2, #64	@ 0x40
 8018452:	2100      	movs	r1, #0
 8018454:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8018456:	687b      	ldr	r3, [r7, #4]
 8018458:	0018      	movs	r0, r3
 801845a:	f7fe fcf3 	bl	8016e44 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 801845e:	e00a      	b.n	8018476 <I2C_TreatErrorCallback+0x4a>
    hi2c->PreviousState = I2C_STATE_NONE;
 8018460:	687b      	ldr	r3, [r7, #4]
 8018462:	2200      	movs	r2, #0
 8018464:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8018466:	687b      	ldr	r3, [r7, #4]
 8018468:	2240      	movs	r2, #64	@ 0x40
 801846a:	2100      	movs	r1, #0
 801846c:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ErrorCallback(hi2c);
 801846e:	687b      	ldr	r3, [r7, #4]
 8018470:	0018      	movs	r0, r3
 8018472:	f7fe fcdf 	bl	8016e34 <HAL_I2C_ErrorCallback>
}
 8018476:	46c0      	nop			@ (mov r8, r8)
 8018478:	46bd      	mov	sp, r7
 801847a:	b002      	add	sp, #8
 801847c:	bd80      	pop	{r7, pc}

0801847e <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 801847e:	b580      	push	{r7, lr}
 8018480:	b082      	sub	sp, #8
 8018482:	af00      	add	r7, sp, #0
 8018484:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8018486:	687b      	ldr	r3, [r7, #4]
 8018488:	681b      	ldr	r3, [r3, #0]
 801848a:	699b      	ldr	r3, [r3, #24]
 801848c:	2202      	movs	r2, #2
 801848e:	4013      	ands	r3, r2
 8018490:	2b02      	cmp	r3, #2
 8018492:	d103      	bne.n	801849c <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8018494:	687b      	ldr	r3, [r7, #4]
 8018496:	681b      	ldr	r3, [r3, #0]
 8018498:	2200      	movs	r2, #0
 801849a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 801849c:	687b      	ldr	r3, [r7, #4]
 801849e:	681b      	ldr	r3, [r3, #0]
 80184a0:	699b      	ldr	r3, [r3, #24]
 80184a2:	2201      	movs	r2, #1
 80184a4:	4013      	ands	r3, r2
 80184a6:	2b01      	cmp	r3, #1
 80184a8:	d007      	beq.n	80184ba <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80184aa:	687b      	ldr	r3, [r7, #4]
 80184ac:	681b      	ldr	r3, [r3, #0]
 80184ae:	699a      	ldr	r2, [r3, #24]
 80184b0:	687b      	ldr	r3, [r7, #4]
 80184b2:	681b      	ldr	r3, [r3, #0]
 80184b4:	2101      	movs	r1, #1
 80184b6:	430a      	orrs	r2, r1
 80184b8:	619a      	str	r2, [r3, #24]
  }
}
 80184ba:	46c0      	nop			@ (mov r8, r8)
 80184bc:	46bd      	mov	sp, r7
 80184be:	b002      	add	sp, #8
 80184c0:	bd80      	pop	{r7, pc}
	...

080184c4 <I2C_DMAMasterTransmitCplt>:
  * @brief  DMA I2C master transmit process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterTransmitCplt(DMA_HandleTypeDef *hdma)
{
 80184c4:	b580      	push	{r7, lr}
 80184c6:	b084      	sub	sp, #16
 80184c8:	af00      	add	r7, sp, #0
 80184ca:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80184cc:	687b      	ldr	r3, [r7, #4]
 80184ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80184d0:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80184d2:	68fb      	ldr	r3, [r7, #12]
 80184d4:	681b      	ldr	r3, [r3, #0]
 80184d6:	681a      	ldr	r2, [r3, #0]
 80184d8:	68fb      	ldr	r3, [r7, #12]
 80184da:	681b      	ldr	r3, [r3, #0]
 80184dc:	4920      	ldr	r1, [pc, #128]	@ (8018560 <I2C_DMAMasterTransmitCplt+0x9c>)
 80184de:	400a      	ands	r2, r1
 80184e0:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 80184e2:	68fb      	ldr	r3, [r7, #12]
 80184e4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80184e6:	b29b      	uxth	r3, r3
 80184e8:	2b00      	cmp	r3, #0
 80184ea:	d105      	bne.n	80184f8 <I2C_DMAMasterTransmitCplt+0x34>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 80184ec:	68fb      	ldr	r3, [r7, #12]
 80184ee:	2120      	movs	r1, #32
 80184f0:	0018      	movs	r0, r3
 80184f2:	f000 fb4b 	bl	8018b8c <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 80184f6:	e02e      	b.n	8018556 <I2C_DMAMasterTransmitCplt+0x92>
    hi2c->pBuffPtr += hi2c->XferSize;
 80184f8:	68fb      	ldr	r3, [r7, #12]
 80184fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80184fc:	68fa      	ldr	r2, [r7, #12]
 80184fe:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 8018500:	189a      	adds	r2, r3, r2
 8018502:	68fb      	ldr	r3, [r7, #12]
 8018504:	625a      	str	r2, [r3, #36]	@ 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8018506:	68fb      	ldr	r3, [r7, #12]
 8018508:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801850a:	b29b      	uxth	r3, r3
 801850c:	2bff      	cmp	r3, #255	@ 0xff
 801850e:	d903      	bls.n	8018518 <I2C_DMAMasterTransmitCplt+0x54>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8018510:	68fb      	ldr	r3, [r7, #12]
 8018512:	22ff      	movs	r2, #255	@ 0xff
 8018514:	851a      	strh	r2, [r3, #40]	@ 0x28
 8018516:	e004      	b.n	8018522 <I2C_DMAMasterTransmitCplt+0x5e>
      hi2c->XferSize = hi2c->XferCount;
 8018518:	68fb      	ldr	r3, [r7, #12]
 801851a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801851c:	b29a      	uxth	r2, r3
 801851e:	68fb      	ldr	r3, [r7, #12]
 8018520:	851a      	strh	r2, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 8018522:	68fb      	ldr	r3, [r7, #12]
 8018524:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8018526:	68fb      	ldr	r3, [r7, #12]
 8018528:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801852a:	0019      	movs	r1, r3
 801852c:	68fb      	ldr	r3, [r7, #12]
 801852e:	681b      	ldr	r3, [r3, #0]
 8018530:	3328      	adds	r3, #40	@ 0x28
 8018532:	001a      	movs	r2, r3
                         hi2c->XferSize) != HAL_OK)
 8018534:	68fb      	ldr	r3, [r7, #12]
 8018536:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 8018538:	f7fc ff2c 	bl	8015394 <HAL_DMA_Start_IT>
 801853c:	1e03      	subs	r3, r0, #0
 801853e:	d005      	beq.n	801854c <I2C_DMAMasterTransmitCplt+0x88>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8018540:	68fb      	ldr	r3, [r7, #12]
 8018542:	2110      	movs	r1, #16
 8018544:	0018      	movs	r0, r3
 8018546:	f7ff fe6f 	bl	8018228 <I2C_ITError>
}
 801854a:	e004      	b.n	8018556 <I2C_DMAMasterTransmitCplt+0x92>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 801854c:	68fb      	ldr	r3, [r7, #12]
 801854e:	2140      	movs	r1, #64	@ 0x40
 8018550:	0018      	movs	r0, r3
 8018552:	f000 fb1b 	bl	8018b8c <I2C_Enable_IRQ>
}
 8018556:	46c0      	nop			@ (mov r8, r8)
 8018558:	46bd      	mov	sp, r7
 801855a:	b004      	add	sp, #16
 801855c:	bd80      	pop	{r7, pc}
 801855e:	46c0      	nop			@ (mov r8, r8)
 8018560:	ffffbfff 	.word	0xffffbfff

08018564 <I2C_DMAMasterReceiveCplt>:
  * @brief DMA I2C master receive process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8018564:	b580      	push	{r7, lr}
 8018566:	b084      	sub	sp, #16
 8018568:	af00      	add	r7, sp, #0
 801856a:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 801856c:	687b      	ldr	r3, [r7, #4]
 801856e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8018570:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8018572:	68fb      	ldr	r3, [r7, #12]
 8018574:	681b      	ldr	r3, [r3, #0]
 8018576:	681a      	ldr	r2, [r3, #0]
 8018578:	68fb      	ldr	r3, [r7, #12]
 801857a:	681b      	ldr	r3, [r3, #0]
 801857c:	4920      	ldr	r1, [pc, #128]	@ (8018600 <I2C_DMAMasterReceiveCplt+0x9c>)
 801857e:	400a      	ands	r2, r1
 8018580:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 8018582:	68fb      	ldr	r3, [r7, #12]
 8018584:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8018586:	b29b      	uxth	r3, r3
 8018588:	2b00      	cmp	r3, #0
 801858a:	d105      	bne.n	8018598 <I2C_DMAMasterReceiveCplt+0x34>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 801858c:	68fb      	ldr	r3, [r7, #12]
 801858e:	2120      	movs	r1, #32
 8018590:	0018      	movs	r0, r3
 8018592:	f000 fafb 	bl	8018b8c <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 8018596:	e02e      	b.n	80185f6 <I2C_DMAMasterReceiveCplt+0x92>
    hi2c->pBuffPtr += hi2c->XferSize;
 8018598:	68fb      	ldr	r3, [r7, #12]
 801859a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801859c:	68fa      	ldr	r2, [r7, #12]
 801859e:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 80185a0:	189a      	adds	r2, r3, r2
 80185a2:	68fb      	ldr	r3, [r7, #12]
 80185a4:	625a      	str	r2, [r3, #36]	@ 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80185a6:	68fb      	ldr	r3, [r7, #12]
 80185a8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80185aa:	b29b      	uxth	r3, r3
 80185ac:	2bff      	cmp	r3, #255	@ 0xff
 80185ae:	d903      	bls.n	80185b8 <I2C_DMAMasterReceiveCplt+0x54>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80185b0:	68fb      	ldr	r3, [r7, #12]
 80185b2:	22ff      	movs	r2, #255	@ 0xff
 80185b4:	851a      	strh	r2, [r3, #40]	@ 0x28
 80185b6:	e004      	b.n	80185c2 <I2C_DMAMasterReceiveCplt+0x5e>
      hi2c->XferSize = hi2c->XferCount;
 80185b8:	68fb      	ldr	r3, [r7, #12]
 80185ba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80185bc:	b29a      	uxth	r2, r3
 80185be:	68fb      	ldr	r3, [r7, #12]
 80185c0:	851a      	strh	r2, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 80185c2:	68fb      	ldr	r3, [r7, #12]
 80185c4:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 80185c6:	68fb      	ldr	r3, [r7, #12]
 80185c8:	681b      	ldr	r3, [r3, #0]
 80185ca:	3324      	adds	r3, #36	@ 0x24
 80185cc:	0019      	movs	r1, r3
 80185ce:	68fb      	ldr	r3, [r7, #12]
 80185d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80185d2:	001a      	movs	r2, r3
                         hi2c->XferSize) != HAL_OK)
 80185d4:	68fb      	ldr	r3, [r7, #12]
 80185d6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 80185d8:	f7fc fedc 	bl	8015394 <HAL_DMA_Start_IT>
 80185dc:	1e03      	subs	r3, r0, #0
 80185de:	d005      	beq.n	80185ec <I2C_DMAMasterReceiveCplt+0x88>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 80185e0:	68fb      	ldr	r3, [r7, #12]
 80185e2:	2110      	movs	r1, #16
 80185e4:	0018      	movs	r0, r3
 80185e6:	f7ff fe1f 	bl	8018228 <I2C_ITError>
}
 80185ea:	e004      	b.n	80185f6 <I2C_DMAMasterReceiveCplt+0x92>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 80185ec:	68fb      	ldr	r3, [r7, #12]
 80185ee:	2140      	movs	r1, #64	@ 0x40
 80185f0:	0018      	movs	r0, r3
 80185f2:	f000 facb 	bl	8018b8c <I2C_Enable_IRQ>
}
 80185f6:	46c0      	nop			@ (mov r8, r8)
 80185f8:	46bd      	mov	sp, r7
 80185fa:	b004      	add	sp, #16
 80185fc:	bd80      	pop	{r7, pc}
 80185fe:	46c0      	nop			@ (mov r8, r8)
 8018600:	ffff7fff 	.word	0xffff7fff

08018604 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 8018604:	b580      	push	{r7, lr}
 8018606:	b084      	sub	sp, #16
 8018608:	af00      	add	r7, sp, #0
 801860a:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 801860c:	687b      	ldr	r3, [r7, #4]
 801860e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8018610:	60fb      	str	r3, [r7, #12]

  /* Disable Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8018612:	68fb      	ldr	r3, [r7, #12]
 8018614:	681b      	ldr	r3, [r3, #0]
 8018616:	685a      	ldr	r2, [r3, #4]
 8018618:	68fb      	ldr	r3, [r7, #12]
 801861a:	681b      	ldr	r3, [r3, #0]
 801861c:	2180      	movs	r1, #128	@ 0x80
 801861e:	0209      	lsls	r1, r1, #8
 8018620:	430a      	orrs	r2, r1
 8018622:	605a      	str	r2, [r3, #4]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8018624:	68fb      	ldr	r3, [r7, #12]
 8018626:	2110      	movs	r1, #16
 8018628:	0018      	movs	r0, r3
 801862a:	f7ff fdfd 	bl	8018228 <I2C_ITError>
}
 801862e:	46c0      	nop			@ (mov r8, r8)
 8018630:	46bd      	mov	sp, r7
 8018632:	b004      	add	sp, #16
 8018634:	bd80      	pop	{r7, pc}

08018636 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8018636:	b580      	push	{r7, lr}
 8018638:	b084      	sub	sp, #16
 801863a:	af00      	add	r7, sp, #0
 801863c:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 801863e:	687b      	ldr	r3, [r7, #4]
 8018640:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8018642:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8018644:	68fb      	ldr	r3, [r7, #12]
 8018646:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8018648:	2b00      	cmp	r3, #0
 801864a:	d003      	beq.n	8018654 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 801864c:	68fb      	ldr	r3, [r7, #12]
 801864e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8018650:	2200      	movs	r2, #0
 8018652:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  if (hi2c->hdmarx != NULL)
 8018654:	68fb      	ldr	r3, [r7, #12]
 8018656:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8018658:	2b00      	cmp	r3, #0
 801865a:	d003      	beq.n	8018664 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 801865c:	68fb      	ldr	r3, [r7, #12]
 801865e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8018660:	2200      	movs	r2, #0
 8018662:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 8018664:	68fb      	ldr	r3, [r7, #12]
 8018666:	0018      	movs	r0, r3
 8018668:	f7ff fee0 	bl	801842c <I2C_TreatErrorCallback>
}
 801866c:	46c0      	nop			@ (mov r8, r8)
 801866e:	46bd      	mov	sp, r7
 8018670:	b004      	add	sp, #16
 8018672:	bd80      	pop	{r7, pc}

08018674 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8018674:	b580      	push	{r7, lr}
 8018676:	b084      	sub	sp, #16
 8018678:	af00      	add	r7, sp, #0
 801867a:	60f8      	str	r0, [r7, #12]
 801867c:	60b9      	str	r1, [r7, #8]
 801867e:	603b      	str	r3, [r7, #0]
 8018680:	1dfb      	adds	r3, r7, #7
 8018682:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8018684:	e030      	b.n	80186e8 <I2C_WaitOnFlagUntilTimeout+0x74>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8018686:	683b      	ldr	r3, [r7, #0]
 8018688:	3301      	adds	r3, #1
 801868a:	d02d      	beq.n	80186e8 <I2C_WaitOnFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801868c:	f7fc f94e 	bl	801492c <HAL_GetTick>
 8018690:	0002      	movs	r2, r0
 8018692:	69bb      	ldr	r3, [r7, #24]
 8018694:	1ad3      	subs	r3, r2, r3
 8018696:	683a      	ldr	r2, [r7, #0]
 8018698:	429a      	cmp	r2, r3
 801869a:	d302      	bcc.n	80186a2 <I2C_WaitOnFlagUntilTimeout+0x2e>
 801869c:	683b      	ldr	r3, [r7, #0]
 801869e:	2b00      	cmp	r3, #0
 80186a0:	d122      	bne.n	80186e8 <I2C_WaitOnFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80186a2:	68fb      	ldr	r3, [r7, #12]
 80186a4:	681b      	ldr	r3, [r3, #0]
 80186a6:	699b      	ldr	r3, [r3, #24]
 80186a8:	68ba      	ldr	r2, [r7, #8]
 80186aa:	4013      	ands	r3, r2
 80186ac:	68ba      	ldr	r2, [r7, #8]
 80186ae:	1ad3      	subs	r3, r2, r3
 80186b0:	425a      	negs	r2, r3
 80186b2:	4153      	adcs	r3, r2
 80186b4:	b2db      	uxtb	r3, r3
 80186b6:	001a      	movs	r2, r3
 80186b8:	1dfb      	adds	r3, r7, #7
 80186ba:	781b      	ldrb	r3, [r3, #0]
 80186bc:	429a      	cmp	r2, r3
 80186be:	d113      	bne.n	80186e8 <I2C_WaitOnFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80186c0:	68fb      	ldr	r3, [r7, #12]
 80186c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80186c4:	2220      	movs	r2, #32
 80186c6:	431a      	orrs	r2, r3
 80186c8:	68fb      	ldr	r3, [r7, #12]
 80186ca:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80186cc:	68fb      	ldr	r3, [r7, #12]
 80186ce:	2241      	movs	r2, #65	@ 0x41
 80186d0:	2120      	movs	r1, #32
 80186d2:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80186d4:	68fb      	ldr	r3, [r7, #12]
 80186d6:	2242      	movs	r2, #66	@ 0x42
 80186d8:	2100      	movs	r1, #0
 80186da:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80186dc:	68fb      	ldr	r3, [r7, #12]
 80186de:	2240      	movs	r2, #64	@ 0x40
 80186e0:	2100      	movs	r1, #0
 80186e2:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 80186e4:	2301      	movs	r3, #1
 80186e6:	e00f      	b.n	8018708 <I2C_WaitOnFlagUntilTimeout+0x94>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80186e8:	68fb      	ldr	r3, [r7, #12]
 80186ea:	681b      	ldr	r3, [r3, #0]
 80186ec:	699b      	ldr	r3, [r3, #24]
 80186ee:	68ba      	ldr	r2, [r7, #8]
 80186f0:	4013      	ands	r3, r2
 80186f2:	68ba      	ldr	r2, [r7, #8]
 80186f4:	1ad3      	subs	r3, r2, r3
 80186f6:	425a      	negs	r2, r3
 80186f8:	4153      	adcs	r3, r2
 80186fa:	b2db      	uxtb	r3, r3
 80186fc:	001a      	movs	r2, r3
 80186fe:	1dfb      	adds	r3, r7, #7
 8018700:	781b      	ldrb	r3, [r3, #0]
 8018702:	429a      	cmp	r2, r3
 8018704:	d0bf      	beq.n	8018686 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8018706:	2300      	movs	r3, #0
}
 8018708:	0018      	movs	r0, r3
 801870a:	46bd      	mov	sp, r7
 801870c:	b004      	add	sp, #16
 801870e:	bd80      	pop	{r7, pc}

08018710 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8018710:	b580      	push	{r7, lr}
 8018712:	b084      	sub	sp, #16
 8018714:	af00      	add	r7, sp, #0
 8018716:	60f8      	str	r0, [r7, #12]
 8018718:	60b9      	str	r1, [r7, #8]
 801871a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 801871c:	e032      	b.n	8018784 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 801871e:	687a      	ldr	r2, [r7, #4]
 8018720:	68b9      	ldr	r1, [r7, #8]
 8018722:	68fb      	ldr	r3, [r7, #12]
 8018724:	0018      	movs	r0, r3
 8018726:	f000 f8ff 	bl	8018928 <I2C_IsErrorOccurred>
 801872a:	1e03      	subs	r3, r0, #0
 801872c:	d001      	beq.n	8018732 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 801872e:	2301      	movs	r3, #1
 8018730:	e030      	b.n	8018794 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8018732:	68bb      	ldr	r3, [r7, #8]
 8018734:	3301      	adds	r3, #1
 8018736:	d025      	beq.n	8018784 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8018738:	f7fc f8f8 	bl	801492c <HAL_GetTick>
 801873c:	0002      	movs	r2, r0
 801873e:	687b      	ldr	r3, [r7, #4]
 8018740:	1ad3      	subs	r3, r2, r3
 8018742:	68ba      	ldr	r2, [r7, #8]
 8018744:	429a      	cmp	r2, r3
 8018746:	d302      	bcc.n	801874e <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8018748:	68bb      	ldr	r3, [r7, #8]
 801874a:	2b00      	cmp	r3, #0
 801874c:	d11a      	bne.n	8018784 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 801874e:	68fb      	ldr	r3, [r7, #12]
 8018750:	681b      	ldr	r3, [r3, #0]
 8018752:	699b      	ldr	r3, [r3, #24]
 8018754:	2202      	movs	r2, #2
 8018756:	4013      	ands	r3, r2
 8018758:	2b02      	cmp	r3, #2
 801875a:	d013      	beq.n	8018784 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 801875c:	68fb      	ldr	r3, [r7, #12]
 801875e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8018760:	2220      	movs	r2, #32
 8018762:	431a      	orrs	r2, r3
 8018764:	68fb      	ldr	r3, [r7, #12]
 8018766:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8018768:	68fb      	ldr	r3, [r7, #12]
 801876a:	2241      	movs	r2, #65	@ 0x41
 801876c:	2120      	movs	r1, #32
 801876e:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8018770:	68fb      	ldr	r3, [r7, #12]
 8018772:	2242      	movs	r2, #66	@ 0x42
 8018774:	2100      	movs	r1, #0
 8018776:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8018778:	68fb      	ldr	r3, [r7, #12]
 801877a:	2240      	movs	r2, #64	@ 0x40
 801877c:	2100      	movs	r1, #0
 801877e:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8018780:	2301      	movs	r3, #1
 8018782:	e007      	b.n	8018794 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8018784:	68fb      	ldr	r3, [r7, #12]
 8018786:	681b      	ldr	r3, [r3, #0]
 8018788:	699b      	ldr	r3, [r3, #24]
 801878a:	2202      	movs	r2, #2
 801878c:	4013      	ands	r3, r2
 801878e:	2b02      	cmp	r3, #2
 8018790:	d1c5      	bne.n	801871e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8018792:	2300      	movs	r3, #0
}
 8018794:	0018      	movs	r0, r3
 8018796:	46bd      	mov	sp, r7
 8018798:	b004      	add	sp, #16
 801879a:	bd80      	pop	{r7, pc}

0801879c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 801879c:	b580      	push	{r7, lr}
 801879e:	b084      	sub	sp, #16
 80187a0:	af00      	add	r7, sp, #0
 80187a2:	60f8      	str	r0, [r7, #12]
 80187a4:	60b9      	str	r1, [r7, #8]
 80187a6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80187a8:	e02f      	b.n	801880a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80187aa:	687a      	ldr	r2, [r7, #4]
 80187ac:	68b9      	ldr	r1, [r7, #8]
 80187ae:	68fb      	ldr	r3, [r7, #12]
 80187b0:	0018      	movs	r0, r3
 80187b2:	f000 f8b9 	bl	8018928 <I2C_IsErrorOccurred>
 80187b6:	1e03      	subs	r3, r0, #0
 80187b8:	d001      	beq.n	80187be <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80187ba:	2301      	movs	r3, #1
 80187bc:	e02d      	b.n	801881a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80187be:	f7fc f8b5 	bl	801492c <HAL_GetTick>
 80187c2:	0002      	movs	r2, r0
 80187c4:	687b      	ldr	r3, [r7, #4]
 80187c6:	1ad3      	subs	r3, r2, r3
 80187c8:	68ba      	ldr	r2, [r7, #8]
 80187ca:	429a      	cmp	r2, r3
 80187cc:	d302      	bcc.n	80187d4 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80187ce:	68bb      	ldr	r3, [r7, #8]
 80187d0:	2b00      	cmp	r3, #0
 80187d2:	d11a      	bne.n	801880a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80187d4:	68fb      	ldr	r3, [r7, #12]
 80187d6:	681b      	ldr	r3, [r3, #0]
 80187d8:	699b      	ldr	r3, [r3, #24]
 80187da:	2220      	movs	r2, #32
 80187dc:	4013      	ands	r3, r2
 80187de:	2b20      	cmp	r3, #32
 80187e0:	d013      	beq.n	801880a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80187e2:	68fb      	ldr	r3, [r7, #12]
 80187e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80187e6:	2220      	movs	r2, #32
 80187e8:	431a      	orrs	r2, r3
 80187ea:	68fb      	ldr	r3, [r7, #12]
 80187ec:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80187ee:	68fb      	ldr	r3, [r7, #12]
 80187f0:	2241      	movs	r2, #65	@ 0x41
 80187f2:	2120      	movs	r1, #32
 80187f4:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80187f6:	68fb      	ldr	r3, [r7, #12]
 80187f8:	2242      	movs	r2, #66	@ 0x42
 80187fa:	2100      	movs	r1, #0
 80187fc:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80187fe:	68fb      	ldr	r3, [r7, #12]
 8018800:	2240      	movs	r2, #64	@ 0x40
 8018802:	2100      	movs	r1, #0
 8018804:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8018806:	2301      	movs	r3, #1
 8018808:	e007      	b.n	801881a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 801880a:	68fb      	ldr	r3, [r7, #12]
 801880c:	681b      	ldr	r3, [r3, #0]
 801880e:	699b      	ldr	r3, [r3, #24]
 8018810:	2220      	movs	r2, #32
 8018812:	4013      	ands	r3, r2
 8018814:	2b20      	cmp	r3, #32
 8018816:	d1c8      	bne.n	80187aa <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8018818:	2300      	movs	r3, #0
}
 801881a:	0018      	movs	r0, r3
 801881c:	46bd      	mov	sp, r7
 801881e:	b004      	add	sp, #16
 8018820:	bd80      	pop	{r7, pc}
	...

08018824 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8018824:	b580      	push	{r7, lr}
 8018826:	b084      	sub	sp, #16
 8018828:	af00      	add	r7, sp, #0
 801882a:	60f8      	str	r0, [r7, #12]
 801882c:	60b9      	str	r1, [r7, #8]
 801882e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8018830:	e06b      	b.n	801890a <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8018832:	687a      	ldr	r2, [r7, #4]
 8018834:	68b9      	ldr	r1, [r7, #8]
 8018836:	68fb      	ldr	r3, [r7, #12]
 8018838:	0018      	movs	r0, r3
 801883a:	f000 f875 	bl	8018928 <I2C_IsErrorOccurred>
 801883e:	1e03      	subs	r3, r0, #0
 8018840:	d001      	beq.n	8018846 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8018842:	2301      	movs	r3, #1
 8018844:	e069      	b.n	801891a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8018846:	68fb      	ldr	r3, [r7, #12]
 8018848:	681b      	ldr	r3, [r3, #0]
 801884a:	699b      	ldr	r3, [r3, #24]
 801884c:	2220      	movs	r2, #32
 801884e:	4013      	ands	r3, r2
 8018850:	2b20      	cmp	r3, #32
 8018852:	d138      	bne.n	80188c6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8018854:	68fb      	ldr	r3, [r7, #12]
 8018856:	681b      	ldr	r3, [r3, #0]
 8018858:	699b      	ldr	r3, [r3, #24]
 801885a:	2204      	movs	r2, #4
 801885c:	4013      	ands	r3, r2
 801885e:	2b04      	cmp	r3, #4
 8018860:	d105      	bne.n	801886e <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8018862:	68fb      	ldr	r3, [r7, #12]
 8018864:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8018866:	2b00      	cmp	r3, #0
 8018868:	d001      	beq.n	801886e <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 801886a:	2300      	movs	r3, #0
 801886c:	e055      	b.n	801891a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 801886e:	68fb      	ldr	r3, [r7, #12]
 8018870:	681b      	ldr	r3, [r3, #0]
 8018872:	699b      	ldr	r3, [r3, #24]
 8018874:	2210      	movs	r2, #16
 8018876:	4013      	ands	r3, r2
 8018878:	2b10      	cmp	r3, #16
 801887a:	d107      	bne.n	801888c <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 801887c:	68fb      	ldr	r3, [r7, #12]
 801887e:	681b      	ldr	r3, [r3, #0]
 8018880:	2210      	movs	r2, #16
 8018882:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8018884:	68fb      	ldr	r3, [r7, #12]
 8018886:	2204      	movs	r2, #4
 8018888:	645a      	str	r2, [r3, #68]	@ 0x44
 801888a:	e002      	b.n	8018892 <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 801888c:	68fb      	ldr	r3, [r7, #12]
 801888e:	2200      	movs	r2, #0
 8018890:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8018892:	68fb      	ldr	r3, [r7, #12]
 8018894:	681b      	ldr	r3, [r3, #0]
 8018896:	2220      	movs	r2, #32
 8018898:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 801889a:	68fb      	ldr	r3, [r7, #12]
 801889c:	681b      	ldr	r3, [r3, #0]
 801889e:	685a      	ldr	r2, [r3, #4]
 80188a0:	68fb      	ldr	r3, [r7, #12]
 80188a2:	681b      	ldr	r3, [r3, #0]
 80188a4:	491f      	ldr	r1, [pc, #124]	@ (8018924 <I2C_WaitOnRXNEFlagUntilTimeout+0x100>)
 80188a6:	400a      	ands	r2, r1
 80188a8:	605a      	str	r2, [r3, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 80188aa:	68fb      	ldr	r3, [r7, #12]
 80188ac:	2241      	movs	r2, #65	@ 0x41
 80188ae:	2120      	movs	r1, #32
 80188b0:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80188b2:	68fb      	ldr	r3, [r7, #12]
 80188b4:	2242      	movs	r2, #66	@ 0x42
 80188b6:	2100      	movs	r1, #0
 80188b8:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80188ba:	68fb      	ldr	r3, [r7, #12]
 80188bc:	2240      	movs	r2, #64	@ 0x40
 80188be:	2100      	movs	r1, #0
 80188c0:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80188c2:	2301      	movs	r3, #1
 80188c4:	e029      	b.n	801891a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80188c6:	f7fc f831 	bl	801492c <HAL_GetTick>
 80188ca:	0002      	movs	r2, r0
 80188cc:	687b      	ldr	r3, [r7, #4]
 80188ce:	1ad3      	subs	r3, r2, r3
 80188d0:	68ba      	ldr	r2, [r7, #8]
 80188d2:	429a      	cmp	r2, r3
 80188d4:	d302      	bcc.n	80188dc <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 80188d6:	68bb      	ldr	r3, [r7, #8]
 80188d8:	2b00      	cmp	r3, #0
 80188da:	d116      	bne.n	801890a <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80188dc:	68fb      	ldr	r3, [r7, #12]
 80188de:	681b      	ldr	r3, [r3, #0]
 80188e0:	699b      	ldr	r3, [r3, #24]
 80188e2:	2204      	movs	r2, #4
 80188e4:	4013      	ands	r3, r2
 80188e6:	2b04      	cmp	r3, #4
 80188e8:	d00f      	beq.n	801890a <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80188ea:	68fb      	ldr	r3, [r7, #12]
 80188ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80188ee:	2220      	movs	r2, #32
 80188f0:	431a      	orrs	r2, r3
 80188f2:	68fb      	ldr	r3, [r7, #12]
 80188f4:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80188f6:	68fb      	ldr	r3, [r7, #12]
 80188f8:	2241      	movs	r2, #65	@ 0x41
 80188fa:	2120      	movs	r1, #32
 80188fc:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80188fe:	68fb      	ldr	r3, [r7, #12]
 8018900:	2240      	movs	r2, #64	@ 0x40
 8018902:	2100      	movs	r1, #0
 8018904:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8018906:	2301      	movs	r3, #1
 8018908:	e007      	b.n	801891a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 801890a:	68fb      	ldr	r3, [r7, #12]
 801890c:	681b      	ldr	r3, [r3, #0]
 801890e:	699b      	ldr	r3, [r3, #24]
 8018910:	2204      	movs	r2, #4
 8018912:	4013      	ands	r3, r2
 8018914:	2b04      	cmp	r3, #4
 8018916:	d18c      	bne.n	8018832 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8018918:	2300      	movs	r3, #0
}
 801891a:	0018      	movs	r0, r3
 801891c:	46bd      	mov	sp, r7
 801891e:	b004      	add	sp, #16
 8018920:	bd80      	pop	{r7, pc}
 8018922:	46c0      	nop			@ (mov r8, r8)
 8018924:	fe00e800 	.word	0xfe00e800

08018928 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8018928:	b580      	push	{r7, lr}
 801892a:	b08a      	sub	sp, #40	@ 0x28
 801892c:	af00      	add	r7, sp, #0
 801892e:	60f8      	str	r0, [r7, #12]
 8018930:	60b9      	str	r1, [r7, #8]
 8018932:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8018934:	2327      	movs	r3, #39	@ 0x27
 8018936:	18fb      	adds	r3, r7, r3
 8018938:	2200      	movs	r2, #0
 801893a:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 801893c:	68fb      	ldr	r3, [r7, #12]
 801893e:	681b      	ldr	r3, [r3, #0]
 8018940:	699b      	ldr	r3, [r3, #24]
 8018942:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8018944:	2300      	movs	r3, #0
 8018946:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8018948:	687b      	ldr	r3, [r7, #4]
 801894a:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 801894c:	69bb      	ldr	r3, [r7, #24]
 801894e:	2210      	movs	r2, #16
 8018950:	4013      	ands	r3, r2
 8018952:	d100      	bne.n	8018956 <I2C_IsErrorOccurred+0x2e>
 8018954:	e079      	b.n	8018a4a <I2C_IsErrorOccurred+0x122>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8018956:	68fb      	ldr	r3, [r7, #12]
 8018958:	681b      	ldr	r3, [r3, #0]
 801895a:	2210      	movs	r2, #16
 801895c:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 801895e:	e057      	b.n	8018a10 <I2C_IsErrorOccurred+0xe8>
 8018960:	2227      	movs	r2, #39	@ 0x27
 8018962:	18bb      	adds	r3, r7, r2
 8018964:	18ba      	adds	r2, r7, r2
 8018966:	7812      	ldrb	r2, [r2, #0]
 8018968:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 801896a:	68bb      	ldr	r3, [r7, #8]
 801896c:	3301      	adds	r3, #1
 801896e:	d04f      	beq.n	8018a10 <I2C_IsErrorOccurred+0xe8>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8018970:	f7fb ffdc 	bl	801492c <HAL_GetTick>
 8018974:	0002      	movs	r2, r0
 8018976:	69fb      	ldr	r3, [r7, #28]
 8018978:	1ad3      	subs	r3, r2, r3
 801897a:	68ba      	ldr	r2, [r7, #8]
 801897c:	429a      	cmp	r2, r3
 801897e:	d302      	bcc.n	8018986 <I2C_IsErrorOccurred+0x5e>
 8018980:	68bb      	ldr	r3, [r7, #8]
 8018982:	2b00      	cmp	r3, #0
 8018984:	d144      	bne.n	8018a10 <I2C_IsErrorOccurred+0xe8>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8018986:	68fb      	ldr	r3, [r7, #12]
 8018988:	681b      	ldr	r3, [r3, #0]
 801898a:	685a      	ldr	r2, [r3, #4]
 801898c:	2380      	movs	r3, #128	@ 0x80
 801898e:	01db      	lsls	r3, r3, #7
 8018990:	4013      	ands	r3, r2
 8018992:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8018994:	2013      	movs	r0, #19
 8018996:	183b      	adds	r3, r7, r0
 8018998:	68fa      	ldr	r2, [r7, #12]
 801899a:	2142      	movs	r1, #66	@ 0x42
 801899c:	5c52      	ldrb	r2, [r2, r1]
 801899e:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80189a0:	68fb      	ldr	r3, [r7, #12]
 80189a2:	681b      	ldr	r3, [r3, #0]
 80189a4:	699a      	ldr	r2, [r3, #24]
 80189a6:	2380      	movs	r3, #128	@ 0x80
 80189a8:	021b      	lsls	r3, r3, #8
 80189aa:	401a      	ands	r2, r3
 80189ac:	2380      	movs	r3, #128	@ 0x80
 80189ae:	021b      	lsls	r3, r3, #8
 80189b0:	429a      	cmp	r2, r3
 80189b2:	d126      	bne.n	8018a02 <I2C_IsErrorOccurred+0xda>
 80189b4:	697a      	ldr	r2, [r7, #20]
 80189b6:	2380      	movs	r3, #128	@ 0x80
 80189b8:	01db      	lsls	r3, r3, #7
 80189ba:	429a      	cmp	r2, r3
 80189bc:	d021      	beq.n	8018a02 <I2C_IsErrorOccurred+0xda>
              (tmp1 != I2C_CR2_STOP) && \
 80189be:	183b      	adds	r3, r7, r0
 80189c0:	781b      	ldrb	r3, [r3, #0]
 80189c2:	2b20      	cmp	r3, #32
 80189c4:	d01d      	beq.n	8018a02 <I2C_IsErrorOccurred+0xda>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80189c6:	68fb      	ldr	r3, [r7, #12]
 80189c8:	681b      	ldr	r3, [r3, #0]
 80189ca:	685a      	ldr	r2, [r3, #4]
 80189cc:	68fb      	ldr	r3, [r7, #12]
 80189ce:	681b      	ldr	r3, [r3, #0]
 80189d0:	2180      	movs	r1, #128	@ 0x80
 80189d2:	01c9      	lsls	r1, r1, #7
 80189d4:	430a      	orrs	r2, r1
 80189d6:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80189d8:	f7fb ffa8 	bl	801492c <HAL_GetTick>
 80189dc:	0003      	movs	r3, r0
 80189de:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80189e0:	e00f      	b.n	8018a02 <I2C_IsErrorOccurred+0xda>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80189e2:	f7fb ffa3 	bl	801492c <HAL_GetTick>
 80189e6:	0002      	movs	r2, r0
 80189e8:	69fb      	ldr	r3, [r7, #28]
 80189ea:	1ad3      	subs	r3, r2, r3
 80189ec:	2b19      	cmp	r3, #25
 80189ee:	d908      	bls.n	8018a02 <I2C_IsErrorOccurred+0xda>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80189f0:	6a3b      	ldr	r3, [r7, #32]
 80189f2:	2220      	movs	r2, #32
 80189f4:	4313      	orrs	r3, r2
 80189f6:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80189f8:	2327      	movs	r3, #39	@ 0x27
 80189fa:	18fb      	adds	r3, r7, r3
 80189fc:	2201      	movs	r2, #1
 80189fe:	701a      	strb	r2, [r3, #0]

              break;
 8018a00:	e006      	b.n	8018a10 <I2C_IsErrorOccurred+0xe8>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8018a02:	68fb      	ldr	r3, [r7, #12]
 8018a04:	681b      	ldr	r3, [r3, #0]
 8018a06:	699b      	ldr	r3, [r3, #24]
 8018a08:	2220      	movs	r2, #32
 8018a0a:	4013      	ands	r3, r2
 8018a0c:	2b20      	cmp	r3, #32
 8018a0e:	d1e8      	bne.n	80189e2 <I2C_IsErrorOccurred+0xba>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8018a10:	68fb      	ldr	r3, [r7, #12]
 8018a12:	681b      	ldr	r3, [r3, #0]
 8018a14:	699b      	ldr	r3, [r3, #24]
 8018a16:	2220      	movs	r2, #32
 8018a18:	4013      	ands	r3, r2
 8018a1a:	2b20      	cmp	r3, #32
 8018a1c:	d004      	beq.n	8018a28 <I2C_IsErrorOccurred+0x100>
 8018a1e:	2327      	movs	r3, #39	@ 0x27
 8018a20:	18fb      	adds	r3, r7, r3
 8018a22:	781b      	ldrb	r3, [r3, #0]
 8018a24:	2b00      	cmp	r3, #0
 8018a26:	d09b      	beq.n	8018960 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8018a28:	2327      	movs	r3, #39	@ 0x27
 8018a2a:	18fb      	adds	r3, r7, r3
 8018a2c:	781b      	ldrb	r3, [r3, #0]
 8018a2e:	2b00      	cmp	r3, #0
 8018a30:	d103      	bne.n	8018a3a <I2C_IsErrorOccurred+0x112>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8018a32:	68fb      	ldr	r3, [r7, #12]
 8018a34:	681b      	ldr	r3, [r3, #0]
 8018a36:	2220      	movs	r2, #32
 8018a38:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8018a3a:	6a3b      	ldr	r3, [r7, #32]
 8018a3c:	2204      	movs	r2, #4
 8018a3e:	4313      	orrs	r3, r2
 8018a40:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8018a42:	2327      	movs	r3, #39	@ 0x27
 8018a44:	18fb      	adds	r3, r7, r3
 8018a46:	2201      	movs	r2, #1
 8018a48:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8018a4a:	68fb      	ldr	r3, [r7, #12]
 8018a4c:	681b      	ldr	r3, [r3, #0]
 8018a4e:	699b      	ldr	r3, [r3, #24]
 8018a50:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8018a52:	69ba      	ldr	r2, [r7, #24]
 8018a54:	2380      	movs	r3, #128	@ 0x80
 8018a56:	005b      	lsls	r3, r3, #1
 8018a58:	4013      	ands	r3, r2
 8018a5a:	d00c      	beq.n	8018a76 <I2C_IsErrorOccurred+0x14e>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8018a5c:	6a3b      	ldr	r3, [r7, #32]
 8018a5e:	2201      	movs	r2, #1
 8018a60:	4313      	orrs	r3, r2
 8018a62:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8018a64:	68fb      	ldr	r3, [r7, #12]
 8018a66:	681b      	ldr	r3, [r3, #0]
 8018a68:	2280      	movs	r2, #128	@ 0x80
 8018a6a:	0052      	lsls	r2, r2, #1
 8018a6c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8018a6e:	2327      	movs	r3, #39	@ 0x27
 8018a70:	18fb      	adds	r3, r7, r3
 8018a72:	2201      	movs	r2, #1
 8018a74:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8018a76:	69ba      	ldr	r2, [r7, #24]
 8018a78:	2380      	movs	r3, #128	@ 0x80
 8018a7a:	00db      	lsls	r3, r3, #3
 8018a7c:	4013      	ands	r3, r2
 8018a7e:	d00c      	beq.n	8018a9a <I2C_IsErrorOccurred+0x172>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8018a80:	6a3b      	ldr	r3, [r7, #32]
 8018a82:	2208      	movs	r2, #8
 8018a84:	4313      	orrs	r3, r2
 8018a86:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8018a88:	68fb      	ldr	r3, [r7, #12]
 8018a8a:	681b      	ldr	r3, [r3, #0]
 8018a8c:	2280      	movs	r2, #128	@ 0x80
 8018a8e:	00d2      	lsls	r2, r2, #3
 8018a90:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8018a92:	2327      	movs	r3, #39	@ 0x27
 8018a94:	18fb      	adds	r3, r7, r3
 8018a96:	2201      	movs	r2, #1
 8018a98:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8018a9a:	69ba      	ldr	r2, [r7, #24]
 8018a9c:	2380      	movs	r3, #128	@ 0x80
 8018a9e:	009b      	lsls	r3, r3, #2
 8018aa0:	4013      	ands	r3, r2
 8018aa2:	d00c      	beq.n	8018abe <I2C_IsErrorOccurred+0x196>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8018aa4:	6a3b      	ldr	r3, [r7, #32]
 8018aa6:	2202      	movs	r2, #2
 8018aa8:	4313      	orrs	r3, r2
 8018aaa:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8018aac:	68fb      	ldr	r3, [r7, #12]
 8018aae:	681b      	ldr	r3, [r3, #0]
 8018ab0:	2280      	movs	r2, #128	@ 0x80
 8018ab2:	0092      	lsls	r2, r2, #2
 8018ab4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8018ab6:	2327      	movs	r3, #39	@ 0x27
 8018ab8:	18fb      	adds	r3, r7, r3
 8018aba:	2201      	movs	r2, #1
 8018abc:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 8018abe:	2327      	movs	r3, #39	@ 0x27
 8018ac0:	18fb      	adds	r3, r7, r3
 8018ac2:	781b      	ldrb	r3, [r3, #0]
 8018ac4:	2b00      	cmp	r3, #0
 8018ac6:	d01d      	beq.n	8018b04 <I2C_IsErrorOccurred+0x1dc>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8018ac8:	68fb      	ldr	r3, [r7, #12]
 8018aca:	0018      	movs	r0, r3
 8018acc:	f7ff fcd7 	bl	801847e <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8018ad0:	68fb      	ldr	r3, [r7, #12]
 8018ad2:	681b      	ldr	r3, [r3, #0]
 8018ad4:	685a      	ldr	r2, [r3, #4]
 8018ad6:	68fb      	ldr	r3, [r7, #12]
 8018ad8:	681b      	ldr	r3, [r3, #0]
 8018ada:	490e      	ldr	r1, [pc, #56]	@ (8018b14 <I2C_IsErrorOccurred+0x1ec>)
 8018adc:	400a      	ands	r2, r1
 8018ade:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 8018ae0:	68fb      	ldr	r3, [r7, #12]
 8018ae2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8018ae4:	6a3b      	ldr	r3, [r7, #32]
 8018ae6:	431a      	orrs	r2, r3
 8018ae8:	68fb      	ldr	r3, [r7, #12]
 8018aea:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8018aec:	68fb      	ldr	r3, [r7, #12]
 8018aee:	2241      	movs	r2, #65	@ 0x41
 8018af0:	2120      	movs	r1, #32
 8018af2:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8018af4:	68fb      	ldr	r3, [r7, #12]
 8018af6:	2242      	movs	r2, #66	@ 0x42
 8018af8:	2100      	movs	r1, #0
 8018afa:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8018afc:	68fb      	ldr	r3, [r7, #12]
 8018afe:	2240      	movs	r2, #64	@ 0x40
 8018b00:	2100      	movs	r1, #0
 8018b02:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8018b04:	2327      	movs	r3, #39	@ 0x27
 8018b06:	18fb      	adds	r3, r7, r3
 8018b08:	781b      	ldrb	r3, [r3, #0]
}
 8018b0a:	0018      	movs	r0, r3
 8018b0c:	46bd      	mov	sp, r7
 8018b0e:	b00a      	add	sp, #40	@ 0x28
 8018b10:	bd80      	pop	{r7, pc}
 8018b12:	46c0      	nop			@ (mov r8, r8)
 8018b14:	fe00e800 	.word	0xfe00e800

08018b18 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8018b18:	b590      	push	{r4, r7, lr}
 8018b1a:	b087      	sub	sp, #28
 8018b1c:	af00      	add	r7, sp, #0
 8018b1e:	60f8      	str	r0, [r7, #12]
 8018b20:	0008      	movs	r0, r1
 8018b22:	0011      	movs	r1, r2
 8018b24:	607b      	str	r3, [r7, #4]
 8018b26:	240a      	movs	r4, #10
 8018b28:	193b      	adds	r3, r7, r4
 8018b2a:	1c02      	adds	r2, r0, #0
 8018b2c:	801a      	strh	r2, [r3, #0]
 8018b2e:	2009      	movs	r0, #9
 8018b30:	183b      	adds	r3, r7, r0
 8018b32:	1c0a      	adds	r2, r1, #0
 8018b34:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8018b36:	193b      	adds	r3, r7, r4
 8018b38:	881b      	ldrh	r3, [r3, #0]
 8018b3a:	059b      	lsls	r3, r3, #22
 8018b3c:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8018b3e:	183b      	adds	r3, r7, r0
 8018b40:	781b      	ldrb	r3, [r3, #0]
 8018b42:	0419      	lsls	r1, r3, #16
 8018b44:	23ff      	movs	r3, #255	@ 0xff
 8018b46:	041b      	lsls	r3, r3, #16
 8018b48:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8018b4a:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8018b4c:	687b      	ldr	r3, [r7, #4]
 8018b4e:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8018b50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018b52:	4313      	orrs	r3, r2
 8018b54:	005b      	lsls	r3, r3, #1
 8018b56:	085b      	lsrs	r3, r3, #1
 8018b58:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8018b5a:	68fb      	ldr	r3, [r7, #12]
 8018b5c:	681b      	ldr	r3, [r3, #0]
 8018b5e:	685b      	ldr	r3, [r3, #4]
 8018b60:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8018b62:	0d51      	lsrs	r1, r2, #21
 8018b64:	2280      	movs	r2, #128	@ 0x80
 8018b66:	00d2      	lsls	r2, r2, #3
 8018b68:	400a      	ands	r2, r1
 8018b6a:	4907      	ldr	r1, [pc, #28]	@ (8018b88 <I2C_TransferConfig+0x70>)
 8018b6c:	430a      	orrs	r2, r1
 8018b6e:	43d2      	mvns	r2, r2
 8018b70:	401a      	ands	r2, r3
 8018b72:	0011      	movs	r1, r2
 8018b74:	68fb      	ldr	r3, [r7, #12]
 8018b76:	681b      	ldr	r3, [r3, #0]
 8018b78:	697a      	ldr	r2, [r7, #20]
 8018b7a:	430a      	orrs	r2, r1
 8018b7c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8018b7e:	46c0      	nop			@ (mov r8, r8)
 8018b80:	46bd      	mov	sp, r7
 8018b82:	b007      	add	sp, #28
 8018b84:	bd90      	pop	{r4, r7, pc}
 8018b86:	46c0      	nop			@ (mov r8, r8)
 8018b88:	03ff63ff 	.word	0x03ff63ff

08018b8c <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8018b8c:	b580      	push	{r7, lr}
 8018b8e:	b084      	sub	sp, #16
 8018b90:	af00      	add	r7, sp, #0
 8018b92:	6078      	str	r0, [r7, #4]
 8018b94:	000a      	movs	r2, r1
 8018b96:	1cbb      	adds	r3, r7, #2
 8018b98:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
 8018b9a:	2300      	movs	r3, #0
 8018b9c:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8018b9e:	687b      	ldr	r3, [r7, #4]
 8018ba0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8018ba2:	4b3e      	ldr	r3, [pc, #248]	@ (8018c9c <I2C_Enable_IRQ+0x110>)
 8018ba4:	429a      	cmp	r2, r3
 8018ba6:	d035      	beq.n	8018c14 <I2C_Enable_IRQ+0x88>
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8018ba8:	687b      	ldr	r3, [r7, #4]
 8018baa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8018bac:	4b3c      	ldr	r3, [pc, #240]	@ (8018ca0 <I2C_Enable_IRQ+0x114>)
 8018bae:	429a      	cmp	r2, r3
 8018bb0:	d030      	beq.n	8018c14 <I2C_Enable_IRQ+0x88>
      (hi2c->XferISR != I2C_Mem_ISR_DMA))
 8018bb2:	687b      	ldr	r3, [r7, #4]
 8018bb4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8018bb6:	4b3b      	ldr	r3, [pc, #236]	@ (8018ca4 <I2C_Enable_IRQ+0x118>)
 8018bb8:	429a      	cmp	r2, r3
 8018bba:	d02b      	beq.n	8018c14 <I2C_Enable_IRQ+0x88>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8018bbc:	1cbb      	adds	r3, r7, #2
 8018bbe:	2200      	movs	r2, #0
 8018bc0:	5e9b      	ldrsh	r3, [r3, r2]
 8018bc2:	2b00      	cmp	r3, #0
 8018bc4:	da03      	bge.n	8018bce <I2C_Enable_IRQ+0x42>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8018bc6:	68fb      	ldr	r3, [r7, #12]
 8018bc8:	22b8      	movs	r2, #184	@ 0xb8
 8018bca:	4313      	orrs	r3, r2
 8018bcc:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8018bce:	1cbb      	adds	r3, r7, #2
 8018bd0:	881b      	ldrh	r3, [r3, #0]
 8018bd2:	2201      	movs	r2, #1
 8018bd4:	4013      	ands	r3, r2
 8018bd6:	d003      	beq.n	8018be0 <I2C_Enable_IRQ+0x54>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8018bd8:	68fb      	ldr	r3, [r7, #12]
 8018bda:	22f2      	movs	r2, #242	@ 0xf2
 8018bdc:	4313      	orrs	r3, r2
 8018bde:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8018be0:	1cbb      	adds	r3, r7, #2
 8018be2:	881b      	ldrh	r3, [r3, #0]
 8018be4:	2202      	movs	r2, #2
 8018be6:	4013      	ands	r3, r2
 8018be8:	d003      	beq.n	8018bf2 <I2C_Enable_IRQ+0x66>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8018bea:	68fb      	ldr	r3, [r7, #12]
 8018bec:	22f4      	movs	r2, #244	@ 0xf4
 8018bee:	4313      	orrs	r3, r2
 8018bf0:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8018bf2:	1cbb      	adds	r3, r7, #2
 8018bf4:	881b      	ldrh	r3, [r3, #0]
 8018bf6:	2b10      	cmp	r3, #16
 8018bf8:	d103      	bne.n	8018c02 <I2C_Enable_IRQ+0x76>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8018bfa:	68fb      	ldr	r3, [r7, #12]
 8018bfc:	2290      	movs	r2, #144	@ 0x90
 8018bfe:	4313      	orrs	r3, r2
 8018c00:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8018c02:	1cbb      	adds	r3, r7, #2
 8018c04:	881b      	ldrh	r3, [r3, #0]
 8018c06:	2b20      	cmp	r3, #32
 8018c08:	d13c      	bne.n	8018c84 <I2C_Enable_IRQ+0xf8>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 8018c0a:	68fb      	ldr	r3, [r7, #12]
 8018c0c:	2220      	movs	r2, #32
 8018c0e:	4313      	orrs	r3, r2
 8018c10:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8018c12:	e037      	b.n	8018c84 <I2C_Enable_IRQ+0xf8>
    }
  }

  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8018c14:	1cbb      	adds	r3, r7, #2
 8018c16:	2200      	movs	r2, #0
 8018c18:	5e9b      	ldrsh	r3, [r3, r2]
 8018c1a:	2b00      	cmp	r3, #0
 8018c1c:	da03      	bge.n	8018c26 <I2C_Enable_IRQ+0x9a>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8018c1e:	68fb      	ldr	r3, [r7, #12]
 8018c20:	22b8      	movs	r2, #184	@ 0xb8
 8018c22:	4313      	orrs	r3, r2
 8018c24:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8018c26:	1cbb      	adds	r3, r7, #2
 8018c28:	881b      	ldrh	r3, [r3, #0]
 8018c2a:	2201      	movs	r2, #1
 8018c2c:	4013      	ands	r3, r2
 8018c2e:	d003      	beq.n	8018c38 <I2C_Enable_IRQ+0xac>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8018c30:	68fb      	ldr	r3, [r7, #12]
 8018c32:	22f2      	movs	r2, #242	@ 0xf2
 8018c34:	4313      	orrs	r3, r2
 8018c36:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8018c38:	1cbb      	adds	r3, r7, #2
 8018c3a:	881b      	ldrh	r3, [r3, #0]
 8018c3c:	2202      	movs	r2, #2
 8018c3e:	4013      	ands	r3, r2
 8018c40:	d003      	beq.n	8018c4a <I2C_Enable_IRQ+0xbe>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8018c42:	68fb      	ldr	r3, [r7, #12]
 8018c44:	22f4      	movs	r2, #244	@ 0xf4
 8018c46:	4313      	orrs	r3, r2
 8018c48:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8018c4a:	1cbb      	adds	r3, r7, #2
 8018c4c:	881b      	ldrh	r3, [r3, #0]
 8018c4e:	2b10      	cmp	r3, #16
 8018c50:	d103      	bne.n	8018c5a <I2C_Enable_IRQ+0xce>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8018c52:	68fb      	ldr	r3, [r7, #12]
 8018c54:	2290      	movs	r2, #144	@ 0x90
 8018c56:	4313      	orrs	r3, r2
 8018c58:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8018c5a:	1cbb      	adds	r3, r7, #2
 8018c5c:	881b      	ldrh	r3, [r3, #0]
 8018c5e:	2b20      	cmp	r3, #32
 8018c60:	d103      	bne.n	8018c6a <I2C_Enable_IRQ+0xde>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 8018c62:	68fb      	ldr	r3, [r7, #12]
 8018c64:	2260      	movs	r2, #96	@ 0x60
 8018c66:	4313      	orrs	r3, r2
 8018c68:	60fb      	str	r3, [r7, #12]
    }

    if ((hi2c->XferISR != I2C_Mem_ISR_DMA) && (InterruptRequest == I2C_XFER_RELOAD_IT))
 8018c6a:	687b      	ldr	r3, [r7, #4]
 8018c6c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8018c6e:	4b0d      	ldr	r3, [pc, #52]	@ (8018ca4 <I2C_Enable_IRQ+0x118>)
 8018c70:	429a      	cmp	r2, r3
 8018c72:	d007      	beq.n	8018c84 <I2C_Enable_IRQ+0xf8>
 8018c74:	1cbb      	adds	r3, r7, #2
 8018c76:	881b      	ldrh	r3, [r3, #0]
 8018c78:	2b40      	cmp	r3, #64	@ 0x40
 8018c7a:	d103      	bne.n	8018c84 <I2C_Enable_IRQ+0xf8>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 8018c7c:	68fb      	ldr	r3, [r7, #12]
 8018c7e:	2240      	movs	r2, #64	@ 0x40
 8018c80:	4313      	orrs	r3, r2
 8018c82:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8018c84:	687b      	ldr	r3, [r7, #4]
 8018c86:	681b      	ldr	r3, [r3, #0]
 8018c88:	6819      	ldr	r1, [r3, #0]
 8018c8a:	687b      	ldr	r3, [r7, #4]
 8018c8c:	681b      	ldr	r3, [r3, #0]
 8018c8e:	68fa      	ldr	r2, [r7, #12]
 8018c90:	430a      	orrs	r2, r1
 8018c92:	601a      	str	r2, [r3, #0]
}
 8018c94:	46c0      	nop			@ (mov r8, r8)
 8018c96:	46bd      	mov	sp, r7
 8018c98:	b004      	add	sp, #16
 8018c9a:	bd80      	pop	{r7, pc}
 8018c9c:	08017301 	.word	0x08017301
 8018ca0:	08017779 	.word	0x08017779
 8018ca4:	08017519 	.word	0x08017519

08018ca8 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8018ca8:	b580      	push	{r7, lr}
 8018caa:	b084      	sub	sp, #16
 8018cac:	af00      	add	r7, sp, #0
 8018cae:	6078      	str	r0, [r7, #4]
 8018cb0:	000a      	movs	r2, r1
 8018cb2:	1cbb      	adds	r3, r7, #2
 8018cb4:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
 8018cb6:	2300      	movs	r3, #0
 8018cb8:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8018cba:	1cbb      	adds	r3, r7, #2
 8018cbc:	881b      	ldrh	r3, [r3, #0]
 8018cbe:	2201      	movs	r2, #1
 8018cc0:	4013      	ands	r3, r2
 8018cc2:	d010      	beq.n	8018ce6 <I2C_Disable_IRQ+0x3e>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8018cc4:	68fb      	ldr	r3, [r7, #12]
 8018cc6:	2242      	movs	r2, #66	@ 0x42
 8018cc8:	4313      	orrs	r3, r2
 8018cca:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8018ccc:	687b      	ldr	r3, [r7, #4]
 8018cce:	2241      	movs	r2, #65	@ 0x41
 8018cd0:	5c9b      	ldrb	r3, [r3, r2]
 8018cd2:	b2db      	uxtb	r3, r3
 8018cd4:	001a      	movs	r2, r3
 8018cd6:	2328      	movs	r3, #40	@ 0x28
 8018cd8:	4013      	ands	r3, r2
 8018cda:	2b28      	cmp	r3, #40	@ 0x28
 8018cdc:	d003      	beq.n	8018ce6 <I2C_Disable_IRQ+0x3e>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8018cde:	68fb      	ldr	r3, [r7, #12]
 8018ce0:	22b0      	movs	r2, #176	@ 0xb0
 8018ce2:	4313      	orrs	r3, r2
 8018ce4:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8018ce6:	1cbb      	adds	r3, r7, #2
 8018ce8:	881b      	ldrh	r3, [r3, #0]
 8018cea:	2202      	movs	r2, #2
 8018cec:	4013      	ands	r3, r2
 8018cee:	d010      	beq.n	8018d12 <I2C_Disable_IRQ+0x6a>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8018cf0:	68fb      	ldr	r3, [r7, #12]
 8018cf2:	2244      	movs	r2, #68	@ 0x44
 8018cf4:	4313      	orrs	r3, r2
 8018cf6:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8018cf8:	687b      	ldr	r3, [r7, #4]
 8018cfa:	2241      	movs	r2, #65	@ 0x41
 8018cfc:	5c9b      	ldrb	r3, [r3, r2]
 8018cfe:	b2db      	uxtb	r3, r3
 8018d00:	001a      	movs	r2, r3
 8018d02:	2328      	movs	r3, #40	@ 0x28
 8018d04:	4013      	ands	r3, r2
 8018d06:	2b28      	cmp	r3, #40	@ 0x28
 8018d08:	d003      	beq.n	8018d12 <I2C_Disable_IRQ+0x6a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8018d0a:	68fb      	ldr	r3, [r7, #12]
 8018d0c:	22b0      	movs	r2, #176	@ 0xb0
 8018d0e:	4313      	orrs	r3, r2
 8018d10:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8018d12:	1cbb      	adds	r3, r7, #2
 8018d14:	2200      	movs	r2, #0
 8018d16:	5e9b      	ldrsh	r3, [r3, r2]
 8018d18:	2b00      	cmp	r3, #0
 8018d1a:	da03      	bge.n	8018d24 <I2C_Disable_IRQ+0x7c>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8018d1c:	68fb      	ldr	r3, [r7, #12]
 8018d1e:	22b8      	movs	r2, #184	@ 0xb8
 8018d20:	4313      	orrs	r3, r2
 8018d22:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8018d24:	1cbb      	adds	r3, r7, #2
 8018d26:	881b      	ldrh	r3, [r3, #0]
 8018d28:	2b10      	cmp	r3, #16
 8018d2a:	d103      	bne.n	8018d34 <I2C_Disable_IRQ+0x8c>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8018d2c:	68fb      	ldr	r3, [r7, #12]
 8018d2e:	2290      	movs	r2, #144	@ 0x90
 8018d30:	4313      	orrs	r3, r2
 8018d32:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8018d34:	1cbb      	adds	r3, r7, #2
 8018d36:	881b      	ldrh	r3, [r3, #0]
 8018d38:	2b20      	cmp	r3, #32
 8018d3a:	d103      	bne.n	8018d44 <I2C_Disable_IRQ+0x9c>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8018d3c:	68fb      	ldr	r3, [r7, #12]
 8018d3e:	2220      	movs	r2, #32
 8018d40:	4313      	orrs	r3, r2
 8018d42:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8018d44:	1cbb      	adds	r3, r7, #2
 8018d46:	881b      	ldrh	r3, [r3, #0]
 8018d48:	2b40      	cmp	r3, #64	@ 0x40
 8018d4a:	d103      	bne.n	8018d54 <I2C_Disable_IRQ+0xac>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8018d4c:	68fb      	ldr	r3, [r7, #12]
 8018d4e:	2240      	movs	r2, #64	@ 0x40
 8018d50:	4313      	orrs	r3, r2
 8018d52:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8018d54:	687b      	ldr	r3, [r7, #4]
 8018d56:	681b      	ldr	r3, [r3, #0]
 8018d58:	681a      	ldr	r2, [r3, #0]
 8018d5a:	68fb      	ldr	r3, [r7, #12]
 8018d5c:	43d9      	mvns	r1, r3
 8018d5e:	687b      	ldr	r3, [r7, #4]
 8018d60:	681b      	ldr	r3, [r3, #0]
 8018d62:	400a      	ands	r2, r1
 8018d64:	601a      	str	r2, [r3, #0]
}
 8018d66:	46c0      	nop			@ (mov r8, r8)
 8018d68:	46bd      	mov	sp, r7
 8018d6a:	b004      	add	sp, #16
 8018d6c:	bd80      	pop	{r7, pc}
	...

08018d70 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8018d70:	b580      	push	{r7, lr}
 8018d72:	b082      	sub	sp, #8
 8018d74:	af00      	add	r7, sp, #0
 8018d76:	6078      	str	r0, [r7, #4]
 8018d78:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8018d7a:	687b      	ldr	r3, [r7, #4]
 8018d7c:	2241      	movs	r2, #65	@ 0x41
 8018d7e:	5c9b      	ldrb	r3, [r3, r2]
 8018d80:	b2db      	uxtb	r3, r3
 8018d82:	2b20      	cmp	r3, #32
 8018d84:	d138      	bne.n	8018df8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8018d86:	687b      	ldr	r3, [r7, #4]
 8018d88:	2240      	movs	r2, #64	@ 0x40
 8018d8a:	5c9b      	ldrb	r3, [r3, r2]
 8018d8c:	2b01      	cmp	r3, #1
 8018d8e:	d101      	bne.n	8018d94 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8018d90:	2302      	movs	r3, #2
 8018d92:	e032      	b.n	8018dfa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8018d94:	687b      	ldr	r3, [r7, #4]
 8018d96:	2240      	movs	r2, #64	@ 0x40
 8018d98:	2101      	movs	r1, #1
 8018d9a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8018d9c:	687b      	ldr	r3, [r7, #4]
 8018d9e:	2241      	movs	r2, #65	@ 0x41
 8018da0:	2124      	movs	r1, #36	@ 0x24
 8018da2:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8018da4:	687b      	ldr	r3, [r7, #4]
 8018da6:	681b      	ldr	r3, [r3, #0]
 8018da8:	681a      	ldr	r2, [r3, #0]
 8018daa:	687b      	ldr	r3, [r7, #4]
 8018dac:	681b      	ldr	r3, [r3, #0]
 8018dae:	2101      	movs	r1, #1
 8018db0:	438a      	bics	r2, r1
 8018db2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8018db4:	687b      	ldr	r3, [r7, #4]
 8018db6:	681b      	ldr	r3, [r3, #0]
 8018db8:	681a      	ldr	r2, [r3, #0]
 8018dba:	687b      	ldr	r3, [r7, #4]
 8018dbc:	681b      	ldr	r3, [r3, #0]
 8018dbe:	4911      	ldr	r1, [pc, #68]	@ (8018e04 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8018dc0:	400a      	ands	r2, r1
 8018dc2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8018dc4:	687b      	ldr	r3, [r7, #4]
 8018dc6:	681b      	ldr	r3, [r3, #0]
 8018dc8:	6819      	ldr	r1, [r3, #0]
 8018dca:	687b      	ldr	r3, [r7, #4]
 8018dcc:	681b      	ldr	r3, [r3, #0]
 8018dce:	683a      	ldr	r2, [r7, #0]
 8018dd0:	430a      	orrs	r2, r1
 8018dd2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8018dd4:	687b      	ldr	r3, [r7, #4]
 8018dd6:	681b      	ldr	r3, [r3, #0]
 8018dd8:	681a      	ldr	r2, [r3, #0]
 8018dda:	687b      	ldr	r3, [r7, #4]
 8018ddc:	681b      	ldr	r3, [r3, #0]
 8018dde:	2101      	movs	r1, #1
 8018de0:	430a      	orrs	r2, r1
 8018de2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8018de4:	687b      	ldr	r3, [r7, #4]
 8018de6:	2241      	movs	r2, #65	@ 0x41
 8018de8:	2120      	movs	r1, #32
 8018dea:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8018dec:	687b      	ldr	r3, [r7, #4]
 8018dee:	2240      	movs	r2, #64	@ 0x40
 8018df0:	2100      	movs	r1, #0
 8018df2:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8018df4:	2300      	movs	r3, #0
 8018df6:	e000      	b.n	8018dfa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8018df8:	2302      	movs	r3, #2
  }
}
 8018dfa:	0018      	movs	r0, r3
 8018dfc:	46bd      	mov	sp, r7
 8018dfe:	b002      	add	sp, #8
 8018e00:	bd80      	pop	{r7, pc}
 8018e02:	46c0      	nop			@ (mov r8, r8)
 8018e04:	ffffefff 	.word	0xffffefff

08018e08 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8018e08:	b580      	push	{r7, lr}
 8018e0a:	b084      	sub	sp, #16
 8018e0c:	af00      	add	r7, sp, #0
 8018e0e:	6078      	str	r0, [r7, #4]
 8018e10:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8018e12:	687b      	ldr	r3, [r7, #4]
 8018e14:	2241      	movs	r2, #65	@ 0x41
 8018e16:	5c9b      	ldrb	r3, [r3, r2]
 8018e18:	b2db      	uxtb	r3, r3
 8018e1a:	2b20      	cmp	r3, #32
 8018e1c:	d139      	bne.n	8018e92 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8018e1e:	687b      	ldr	r3, [r7, #4]
 8018e20:	2240      	movs	r2, #64	@ 0x40
 8018e22:	5c9b      	ldrb	r3, [r3, r2]
 8018e24:	2b01      	cmp	r3, #1
 8018e26:	d101      	bne.n	8018e2c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8018e28:	2302      	movs	r3, #2
 8018e2a:	e033      	b.n	8018e94 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8018e2c:	687b      	ldr	r3, [r7, #4]
 8018e2e:	2240      	movs	r2, #64	@ 0x40
 8018e30:	2101      	movs	r1, #1
 8018e32:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8018e34:	687b      	ldr	r3, [r7, #4]
 8018e36:	2241      	movs	r2, #65	@ 0x41
 8018e38:	2124      	movs	r1, #36	@ 0x24
 8018e3a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8018e3c:	687b      	ldr	r3, [r7, #4]
 8018e3e:	681b      	ldr	r3, [r3, #0]
 8018e40:	681a      	ldr	r2, [r3, #0]
 8018e42:	687b      	ldr	r3, [r7, #4]
 8018e44:	681b      	ldr	r3, [r3, #0]
 8018e46:	2101      	movs	r1, #1
 8018e48:	438a      	bics	r2, r1
 8018e4a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8018e4c:	687b      	ldr	r3, [r7, #4]
 8018e4e:	681b      	ldr	r3, [r3, #0]
 8018e50:	681b      	ldr	r3, [r3, #0]
 8018e52:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8018e54:	68fb      	ldr	r3, [r7, #12]
 8018e56:	4a11      	ldr	r2, [pc, #68]	@ (8018e9c <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8018e58:	4013      	ands	r3, r2
 8018e5a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8018e5c:	683b      	ldr	r3, [r7, #0]
 8018e5e:	021b      	lsls	r3, r3, #8
 8018e60:	68fa      	ldr	r2, [r7, #12]
 8018e62:	4313      	orrs	r3, r2
 8018e64:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8018e66:	687b      	ldr	r3, [r7, #4]
 8018e68:	681b      	ldr	r3, [r3, #0]
 8018e6a:	68fa      	ldr	r2, [r7, #12]
 8018e6c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8018e6e:	687b      	ldr	r3, [r7, #4]
 8018e70:	681b      	ldr	r3, [r3, #0]
 8018e72:	681a      	ldr	r2, [r3, #0]
 8018e74:	687b      	ldr	r3, [r7, #4]
 8018e76:	681b      	ldr	r3, [r3, #0]
 8018e78:	2101      	movs	r1, #1
 8018e7a:	430a      	orrs	r2, r1
 8018e7c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8018e7e:	687b      	ldr	r3, [r7, #4]
 8018e80:	2241      	movs	r2, #65	@ 0x41
 8018e82:	2120      	movs	r1, #32
 8018e84:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8018e86:	687b      	ldr	r3, [r7, #4]
 8018e88:	2240      	movs	r2, #64	@ 0x40
 8018e8a:	2100      	movs	r1, #0
 8018e8c:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8018e8e:	2300      	movs	r3, #0
 8018e90:	e000      	b.n	8018e94 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8018e92:	2302      	movs	r3, #2
  }
}
 8018e94:	0018      	movs	r0, r3
 8018e96:	46bd      	mov	sp, r7
 8018e98:	b004      	add	sp, #16
 8018e9a:	bd80      	pop	{r7, pc}
 8018e9c:	fffff0ff 	.word	0xfffff0ff

08018ea0 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8018ea0:	b580      	push	{r7, lr}
 8018ea2:	b088      	sub	sp, #32
 8018ea4:	af00      	add	r7, sp, #0
 8018ea6:	6078      	str	r0, [r7, #4]
  uint32_t packetlength;
  uint32_t tmp;
  uint32_t i2sclk;

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8018ea8:	687b      	ldr	r3, [r7, #4]
 8018eaa:	2b00      	cmp	r3, #0
 8018eac:	d101      	bne.n	8018eb2 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8018eae:	2301      	movs	r3, #1
 8018eb0:	e0e1      	b.n	8019076 <HAL_I2S_Init+0x1d6>
  assert_param(IS_I2S_DATA_FORMAT(hi2s->Init.DataFormat));
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8018eb2:	687b      	ldr	r3, [r7, #4]
 8018eb4:	2235      	movs	r2, #53	@ 0x35
 8018eb6:	5c9b      	ldrb	r3, [r3, r2]
 8018eb8:	b2db      	uxtb	r3, r3
 8018eba:	2b00      	cmp	r3, #0
 8018ebc:	d107      	bne.n	8018ece <HAL_I2S_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8018ebe:	687b      	ldr	r3, [r7, #4]
 8018ec0:	2234      	movs	r2, #52	@ 0x34
 8018ec2:	2100      	movs	r1, #0
 8018ec4:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8018ec6:	687b      	ldr	r3, [r7, #4]
 8018ec8:	0018      	movs	r0, r3
 8018eca:	f7f3 fd71 	bl	800c9b0 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8018ece:	687b      	ldr	r3, [r7, #4]
 8018ed0:	2235      	movs	r2, #53	@ 0x35
 8018ed2:	2102      	movs	r1, #2
 8018ed4:	5499      	strb	r1, [r3, r2]

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8018ed6:	687b      	ldr	r3, [r7, #4]
 8018ed8:	681b      	ldr	r3, [r3, #0]
 8018eda:	69da      	ldr	r2, [r3, #28]
 8018edc:	687b      	ldr	r3, [r7, #4]
 8018ede:	681b      	ldr	r3, [r3, #0]
 8018ee0:	4967      	ldr	r1, [pc, #412]	@ (8019080 <HAL_I2S_Init+0x1e0>)
 8018ee2:	400a      	ands	r2, r1
 8018ee4:	61da      	str	r2, [r3, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8018ee6:	687b      	ldr	r3, [r7, #4]
 8018ee8:	681b      	ldr	r3, [r3, #0]
 8018eea:	2202      	movs	r2, #2
 8018eec:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8018eee:	687b      	ldr	r3, [r7, #4]
 8018ef0:	695b      	ldr	r3, [r3, #20]
 8018ef2:	2b02      	cmp	r3, #2
 8018ef4:	d073      	beq.n	8018fde <HAL_I2S_Init+0x13e>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8018ef6:	687b      	ldr	r3, [r7, #4]
 8018ef8:	68db      	ldr	r3, [r3, #12]
 8018efa:	2b00      	cmp	r3, #0
 8018efc:	d102      	bne.n	8018f04 <HAL_I2S_Init+0x64>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8018efe:	2310      	movs	r3, #16
 8018f00:	617b      	str	r3, [r7, #20]
 8018f02:	e001      	b.n	8018f08 <HAL_I2S_Init+0x68>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8018f04:	2320      	movs	r3, #32
 8018f06:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8018f08:	687b      	ldr	r3, [r7, #4]
 8018f0a:	689b      	ldr	r3, [r3, #8]
 8018f0c:	2b20      	cmp	r3, #32
 8018f0e:	d802      	bhi.n	8018f16 <HAL_I2S_Init+0x76>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8018f10:	697b      	ldr	r3, [r7, #20]
 8018f12:	005b      	lsls	r3, r3, #1
 8018f14:	617b      	str	r3, [r7, #20]
    }

    /* Get the source clock value: based on System Clock value */
    i2sclk = HAL_RCC_GetSysClockFreq();
 8018f16:	f002 febd 	bl	801bc94 <HAL_RCC_GetSysClockFreq>
 8018f1a:	0003      	movs	r3, r0
 8018f1c:	60fb      	str	r3, [r7, #12]

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8018f1e:	687b      	ldr	r3, [r7, #4]
 8018f20:	691a      	ldr	r2, [r3, #16]
 8018f22:	2380      	movs	r3, #128	@ 0x80
 8018f24:	009b      	lsls	r3, r3, #2
 8018f26:	429a      	cmp	r2, r3
 8018f28:	d131      	bne.n	8018f8e <HAL_I2S_Init+0xee>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8018f2a:	687b      	ldr	r3, [r7, #4]
 8018f2c:	68db      	ldr	r3, [r3, #12]
 8018f2e:	2b00      	cmp	r3, #0
 8018f30:	d016      	beq.n	8018f60 <HAL_I2S_Init+0xc0>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8018f32:	697b      	ldr	r3, [r7, #20]
 8018f34:	009b      	lsls	r3, r3, #2
 8018f36:	0019      	movs	r1, r3
 8018f38:	68f8      	ldr	r0, [r7, #12]
 8018f3a:	f7e7 f933 	bl	80001a4 <__udivsi3>
 8018f3e:	0003      	movs	r3, r0
 8018f40:	001a      	movs	r2, r3
 8018f42:	0013      	movs	r3, r2
 8018f44:	009b      	lsls	r3, r3, #2
 8018f46:	189b      	adds	r3, r3, r2
 8018f48:	005b      	lsls	r3, r3, #1
 8018f4a:	001a      	movs	r2, r3
 8018f4c:	687b      	ldr	r3, [r7, #4]
 8018f4e:	695b      	ldr	r3, [r3, #20]
 8018f50:	0019      	movs	r1, r3
 8018f52:	0010      	movs	r0, r2
 8018f54:	f7e7 f926 	bl	80001a4 <__udivsi3>
 8018f58:	0003      	movs	r3, r0
 8018f5a:	3305      	adds	r3, #5
 8018f5c:	613b      	str	r3, [r7, #16]
 8018f5e:	e02a      	b.n	8018fb6 <HAL_I2S_Init+0x116>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8018f60:	697b      	ldr	r3, [r7, #20]
 8018f62:	00db      	lsls	r3, r3, #3
 8018f64:	0019      	movs	r1, r3
 8018f66:	68f8      	ldr	r0, [r7, #12]
 8018f68:	f7e7 f91c 	bl	80001a4 <__udivsi3>
 8018f6c:	0003      	movs	r3, r0
 8018f6e:	001a      	movs	r2, r3
 8018f70:	0013      	movs	r3, r2
 8018f72:	009b      	lsls	r3, r3, #2
 8018f74:	189b      	adds	r3, r3, r2
 8018f76:	005b      	lsls	r3, r3, #1
 8018f78:	001a      	movs	r2, r3
 8018f7a:	687b      	ldr	r3, [r7, #4]
 8018f7c:	695b      	ldr	r3, [r3, #20]
 8018f7e:	0019      	movs	r1, r3
 8018f80:	0010      	movs	r0, r2
 8018f82:	f7e7 f90f 	bl	80001a4 <__udivsi3>
 8018f86:	0003      	movs	r3, r0
 8018f88:	3305      	adds	r3, #5
 8018f8a:	613b      	str	r3, [r7, #16]
 8018f8c:	e013      	b.n	8018fb6 <HAL_I2S_Init+0x116>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8018f8e:	6979      	ldr	r1, [r7, #20]
 8018f90:	68f8      	ldr	r0, [r7, #12]
 8018f92:	f7e7 f907 	bl	80001a4 <__udivsi3>
 8018f96:	0003      	movs	r3, r0
 8018f98:	001a      	movs	r2, r3
 8018f9a:	0013      	movs	r3, r2
 8018f9c:	009b      	lsls	r3, r3, #2
 8018f9e:	189b      	adds	r3, r3, r2
 8018fa0:	005b      	lsls	r3, r3, #1
 8018fa2:	001a      	movs	r2, r3
 8018fa4:	687b      	ldr	r3, [r7, #4]
 8018fa6:	695b      	ldr	r3, [r3, #20]
 8018fa8:	0019      	movs	r1, r3
 8018faa:	0010      	movs	r0, r2
 8018fac:	f7e7 f8fa 	bl	80001a4 <__udivsi3>
 8018fb0:	0003      	movs	r3, r0
 8018fb2:	3305      	adds	r3, #5
 8018fb4:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8018fb6:	693b      	ldr	r3, [r7, #16]
 8018fb8:	210a      	movs	r1, #10
 8018fba:	0018      	movs	r0, r3
 8018fbc:	f7e7 f8f2 	bl	80001a4 <__udivsi3>
 8018fc0:	0003      	movs	r3, r0
 8018fc2:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8018fc4:	693b      	ldr	r3, [r7, #16]
 8018fc6:	2201      	movs	r2, #1
 8018fc8:	4013      	ands	r3, r2
 8018fca:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8018fcc:	693a      	ldr	r2, [r7, #16]
 8018fce:	69bb      	ldr	r3, [r7, #24]
 8018fd0:	1ad3      	subs	r3, r2, r3
 8018fd2:	085b      	lsrs	r3, r3, #1
 8018fd4:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8018fd6:	69bb      	ldr	r3, [r7, #24]
 8018fd8:	021b      	lsls	r3, r3, #8
 8018fda:	61bb      	str	r3, [r7, #24]
 8018fdc:	e003      	b.n	8018fe6 <HAL_I2S_Init+0x146>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8018fde:	2302      	movs	r3, #2
 8018fe0:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8018fe2:	2300      	movs	r3, #0
 8018fe4:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8018fe6:	69fb      	ldr	r3, [r7, #28]
 8018fe8:	2b01      	cmp	r3, #1
 8018fea:	d902      	bls.n	8018ff2 <HAL_I2S_Init+0x152>
 8018fec:	69fb      	ldr	r3, [r7, #28]
 8018fee:	2bff      	cmp	r3, #255	@ 0xff
 8018ff0:	d907      	bls.n	8019002 <HAL_I2S_Init+0x162>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8018ff2:	687b      	ldr	r3, [r7, #4]
 8018ff4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8018ff6:	2210      	movs	r2, #16
 8018ff8:	431a      	orrs	r2, r3
 8018ffa:	687b      	ldr	r3, [r7, #4]
 8018ffc:	639a      	str	r2, [r3, #56]	@ 0x38
    return  HAL_ERROR;
 8018ffe:	2301      	movs	r3, #1
 8019000:	e039      	b.n	8019076 <HAL_I2S_Init+0x1d6>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8019002:	687b      	ldr	r3, [r7, #4]
 8019004:	691a      	ldr	r2, [r3, #16]
 8019006:	69bb      	ldr	r3, [r7, #24]
 8019008:	431a      	orrs	r2, r3
 801900a:	0011      	movs	r1, r2
 801900c:	687b      	ldr	r3, [r7, #4]
 801900e:	681b      	ldr	r3, [r3, #0]
 8019010:	69fa      	ldr	r2, [r7, #28]
 8019012:	430a      	orrs	r2, r1
 8019014:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8019016:	687b      	ldr	r3, [r7, #4]
 8019018:	681b      	ldr	r3, [r3, #0]
 801901a:	69db      	ldr	r3, [r3, #28]
 801901c:	4a18      	ldr	r2, [pc, #96]	@ (8019080 <HAL_I2S_Init+0x1e0>)
 801901e:	401a      	ands	r2, r3
 8019020:	687b      	ldr	r3, [r7, #4]
 8019022:	6859      	ldr	r1, [r3, #4]
 8019024:	687b      	ldr	r3, [r7, #4]
 8019026:	689b      	ldr	r3, [r3, #8]
 8019028:	4319      	orrs	r1, r3
 801902a:	687b      	ldr	r3, [r7, #4]
 801902c:	68db      	ldr	r3, [r3, #12]
 801902e:	4319      	orrs	r1, r3
 8019030:	687b      	ldr	r3, [r7, #4]
 8019032:	699b      	ldr	r3, [r3, #24]
 8019034:	430b      	orrs	r3, r1
 8019036:	431a      	orrs	r2, r3
 8019038:	687b      	ldr	r3, [r7, #4]
 801903a:	681b      	ldr	r3, [r3, #0]
 801903c:	2180      	movs	r1, #128	@ 0x80
 801903e:	0109      	lsls	r1, r1, #4
 8019040:	430a      	orrs	r2, r1
 8019042:	61da      	str	r2, [r3, #28]
             (SPI_I2SCFGR_I2SMOD | hi2s->Init.Mode | \
              hi2s->Init.Standard | hi2s->Init.DataFormat | \
              hi2s->Init.CPOL));

#if defined(SPI_I2SCFGR_ASTRTEN)
  if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) || ((hi2s->Init.Standard == I2S_STANDARD_PCM_LONG)))
 8019044:	687b      	ldr	r3, [r7, #4]
 8019046:	689b      	ldr	r3, [r3, #8]
 8019048:	2b30      	cmp	r3, #48	@ 0x30
 801904a:	d003      	beq.n	8019054 <HAL_I2S_Init+0x1b4>
 801904c:	687b      	ldr	r3, [r7, #4]
 801904e:	689b      	ldr	r3, [r3, #8]
 8019050:	2bb0      	cmp	r3, #176	@ 0xb0
 8019052:	d108      	bne.n	8019066 <HAL_I2S_Init+0x1c6>
  {
    /* Write to SPIx I2SCFGR */
    SET_BIT(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_ASTRTEN);
 8019054:	687b      	ldr	r3, [r7, #4]
 8019056:	681b      	ldr	r3, [r3, #0]
 8019058:	69da      	ldr	r2, [r3, #28]
 801905a:	687b      	ldr	r3, [r7, #4]
 801905c:	681b      	ldr	r3, [r3, #0]
 801905e:	2180      	movs	r1, #128	@ 0x80
 8019060:	0149      	lsls	r1, r1, #5
 8019062:	430a      	orrs	r2, r1
 8019064:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2SCFGR_ASTRTEN */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8019066:	687b      	ldr	r3, [r7, #4]
 8019068:	2200      	movs	r2, #0
 801906a:	639a      	str	r2, [r3, #56]	@ 0x38
  hi2s->State     = HAL_I2S_STATE_READY;
 801906c:	687b      	ldr	r3, [r7, #4]
 801906e:	2235      	movs	r2, #53	@ 0x35
 8019070:	2101      	movs	r1, #1
 8019072:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8019074:	2300      	movs	r3, #0
}
 8019076:	0018      	movs	r0, r3
 8019078:	46bd      	mov	sp, r7
 801907a:	b008      	add	sp, #32
 801907c:	bd80      	pop	{r7, pc}
 801907e:	46c0      	nop			@ (mov r8, r8)
 8019080:	fffff040 	.word	0xfffff040

08019084 <HAL_I2S_Receive_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Receive_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 8019084:	b580      	push	{r7, lr}
 8019086:	b086      	sub	sp, #24
 8019088:	af00      	add	r7, sp, #0
 801908a:	60f8      	str	r0, [r7, #12]
 801908c:	60b9      	str	r1, [r7, #8]
 801908e:	1dbb      	adds	r3, r7, #6
 8019090:	801a      	strh	r2, [r3, #0]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 8019092:	68bb      	ldr	r3, [r7, #8]
 8019094:	2b00      	cmp	r3, #0
 8019096:	d003      	beq.n	80190a0 <HAL_I2S_Receive_DMA+0x1c>
 8019098:	1dbb      	adds	r3, r7, #6
 801909a:	881b      	ldrh	r3, [r3, #0]
 801909c:	2b00      	cmp	r3, #0
 801909e:	d101      	bne.n	80190a4 <HAL_I2S_Receive_DMA+0x20>
  {
    return  HAL_ERROR;
 80190a0:	2301      	movs	r3, #1
 80190a2:	e0a6      	b.n	80191f2 <HAL_I2S_Receive_DMA+0x16e>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 80190a4:	68fb      	ldr	r3, [r7, #12]
 80190a6:	2234      	movs	r2, #52	@ 0x34
 80190a8:	5c9b      	ldrb	r3, [r3, r2]
 80190aa:	b2db      	uxtb	r3, r3
 80190ac:	2b01      	cmp	r3, #1
 80190ae:	d101      	bne.n	80190b4 <HAL_I2S_Receive_DMA+0x30>
 80190b0:	2302      	movs	r3, #2
 80190b2:	e09e      	b.n	80191f2 <HAL_I2S_Receive_DMA+0x16e>
 80190b4:	68fb      	ldr	r3, [r7, #12]
 80190b6:	2234      	movs	r2, #52	@ 0x34
 80190b8:	2101      	movs	r1, #1
 80190ba:	5499      	strb	r1, [r3, r2]

  if (hi2s->State != HAL_I2S_STATE_READY)
 80190bc:	68fb      	ldr	r3, [r7, #12]
 80190be:	2235      	movs	r2, #53	@ 0x35
 80190c0:	5c9b      	ldrb	r3, [r3, r2]
 80190c2:	b2db      	uxtb	r3, r3
 80190c4:	2b01      	cmp	r3, #1
 80190c6:	d005      	beq.n	80190d4 <HAL_I2S_Receive_DMA+0x50>
  {
    __HAL_UNLOCK(hi2s);
 80190c8:	68fb      	ldr	r3, [r7, #12]
 80190ca:	2234      	movs	r2, #52	@ 0x34
 80190cc:	2100      	movs	r1, #0
 80190ce:	5499      	strb	r1, [r3, r2]
    return HAL_BUSY;
 80190d0:	2302      	movs	r3, #2
 80190d2:	e08e      	b.n	80191f2 <HAL_I2S_Receive_DMA+0x16e>
  }

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_RX;
 80190d4:	68fb      	ldr	r3, [r7, #12]
 80190d6:	2235      	movs	r2, #53	@ 0x35
 80190d8:	2104      	movs	r1, #4
 80190da:	5499      	strb	r1, [r3, r2]
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80190dc:	68fb      	ldr	r3, [r7, #12]
 80190de:	2200      	movs	r2, #0
 80190e0:	639a      	str	r2, [r3, #56]	@ 0x38
  hi2s->pRxBuffPtr = pData;
 80190e2:	68fb      	ldr	r3, [r7, #12]
 80190e4:	68ba      	ldr	r2, [r7, #8]
 80190e6:	625a      	str	r2, [r3, #36]	@ 0x24

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 80190e8:	68fb      	ldr	r3, [r7, #12]
 80190ea:	681b      	ldr	r3, [r3, #0]
 80190ec:	69db      	ldr	r3, [r3, #28]
 80190ee:	2207      	movs	r2, #7
 80190f0:	4013      	ands	r3, r2
 80190f2:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 80190f4:	697b      	ldr	r3, [r7, #20]
 80190f6:	2b03      	cmp	r3, #3
 80190f8:	d002      	beq.n	8019100 <HAL_I2S_Receive_DMA+0x7c>
 80190fa:	697b      	ldr	r3, [r7, #20]
 80190fc:	2b05      	cmp	r3, #5
 80190fe:	d10c      	bne.n	801911a <HAL_I2S_Receive_DMA+0x96>
  {
    hi2s->RxXferSize = (Size << 1U);
 8019100:	1dbb      	adds	r3, r7, #6
 8019102:	881b      	ldrh	r3, [r3, #0]
 8019104:	18db      	adds	r3, r3, r3
 8019106:	b29a      	uxth	r2, r3
 8019108:	68fb      	ldr	r3, [r7, #12]
 801910a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2s->RxXferCount = (Size << 1U);
 801910c:	1dbb      	adds	r3, r7, #6
 801910e:	881b      	ldrh	r3, [r3, #0]
 8019110:	18db      	adds	r3, r3, r3
 8019112:	b29a      	uxth	r2, r3
 8019114:	68fb      	ldr	r3, [r7, #12]
 8019116:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8019118:	e007      	b.n	801912a <HAL_I2S_Receive_DMA+0xa6>
  }
  else
  {
    hi2s->RxXferSize = Size;
 801911a:	68fb      	ldr	r3, [r7, #12]
 801911c:	1dba      	adds	r2, r7, #6
 801911e:	8812      	ldrh	r2, [r2, #0]
 8019120:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2s->RxXferCount = Size;
 8019122:	68fb      	ldr	r3, [r7, #12]
 8019124:	1dba      	adds	r2, r7, #6
 8019126:	8812      	ldrh	r2, [r2, #0]
 8019128:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }

  /* Set the I2S Rx DMA Half transfer complete callback */
  hi2s->hdmarx->XferHalfCpltCallback = I2S_DMARxHalfCplt;
 801912a:	68fb      	ldr	r3, [r7, #12]
 801912c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801912e:	4a33      	ldr	r2, [pc, #204]	@ (80191fc <HAL_I2S_Receive_DMA+0x178>)
 8019130:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Set the I2S Rx DMA transfer complete callback */
  hi2s->hdmarx->XferCpltCallback = I2S_DMARxCplt;
 8019132:	68fb      	ldr	r3, [r7, #12]
 8019134:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8019136:	4a32      	ldr	r2, [pc, #200]	@ (8019200 <HAL_I2S_Receive_DMA+0x17c>)
 8019138:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the DMA error callback */
  hi2s->hdmarx->XferErrorCallback = I2S_DMAError;
 801913a:	68fb      	ldr	r3, [r7, #12]
 801913c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801913e:	4a31      	ldr	r2, [pc, #196]	@ (8019204 <HAL_I2S_Receive_DMA+0x180>)
 8019140:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check if Master Receiver mode is selected */
  if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_RX)
 8019142:	68fb      	ldr	r3, [r7, #12]
 8019144:	681b      	ldr	r3, [r3, #0]
 8019146:	69da      	ldr	r2, [r3, #28]
 8019148:	23c0      	movs	r3, #192	@ 0xc0
 801914a:	009b      	lsls	r3, r3, #2
 801914c:	401a      	ands	r2, r3
 801914e:	23c0      	movs	r3, #192	@ 0xc0
 8019150:	009b      	lsls	r3, r3, #2
 8019152:	429a      	cmp	r2, r3
 8019154:	d10a      	bne.n	801916c <HAL_I2S_Receive_DMA+0xe8>
  {
    /* Clear the Overrun Flag by a read operation to the SPI_DR register followed by a read
    access to the SPI_SR register. */
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8019156:	2300      	movs	r3, #0
 8019158:	613b      	str	r3, [r7, #16]
 801915a:	68fb      	ldr	r3, [r7, #12]
 801915c:	681b      	ldr	r3, [r3, #0]
 801915e:	68db      	ldr	r3, [r3, #12]
 8019160:	613b      	str	r3, [r7, #16]
 8019162:	68fb      	ldr	r3, [r7, #12]
 8019164:	681b      	ldr	r3, [r3, #0]
 8019166:	689b      	ldr	r3, [r3, #8]
 8019168:	613b      	str	r3, [r7, #16]
 801916a:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the Rx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, (uint32_t)hi2s->pRxBuffPtr,
 801916c:	68fb      	ldr	r3, [r7, #12]
 801916e:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8019170:	68fb      	ldr	r3, [r7, #12]
 8019172:	681b      	ldr	r3, [r3, #0]
 8019174:	330c      	adds	r3, #12
 8019176:	0019      	movs	r1, r3
 8019178:	68fb      	ldr	r3, [r7, #12]
 801917a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801917c:	001a      	movs	r2, r3
                                 hi2s->RxXferSize))
 801917e:	68fb      	ldr	r3, [r7, #12]
 8019180:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8019182:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, (uint32_t)hi2s->pRxBuffPtr,
 8019184:	f7fc f906 	bl	8015394 <HAL_DMA_Start_IT>
 8019188:	1e03      	subs	r3, r0, #0
 801918a:	d00f      	beq.n	80191ac <HAL_I2S_Receive_DMA+0x128>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 801918c:	68fb      	ldr	r3, [r7, #12]
 801918e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8019190:	2208      	movs	r2, #8
 8019192:	431a      	orrs	r2, r3
 8019194:	68fb      	ldr	r3, [r7, #12]
 8019196:	639a      	str	r2, [r3, #56]	@ 0x38
    hi2s->State = HAL_I2S_STATE_READY;
 8019198:	68fb      	ldr	r3, [r7, #12]
 801919a:	2235      	movs	r2, #53	@ 0x35
 801919c:	2101      	movs	r1, #1
 801919e:	5499      	strb	r1, [r3, r2]

    __HAL_UNLOCK(hi2s);
 80191a0:	68fb      	ldr	r3, [r7, #12]
 80191a2:	2234      	movs	r2, #52	@ 0x34
 80191a4:	2100      	movs	r1, #0
 80191a6:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 80191a8:	2301      	movs	r3, #1
 80191aa:	e022      	b.n	80191f2 <HAL_I2S_Receive_DMA+0x16e>
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 80191ac:	68fb      	ldr	r3, [r7, #12]
 80191ae:	681b      	ldr	r3, [r3, #0]
 80191b0:	69da      	ldr	r2, [r3, #28]
 80191b2:	2380      	movs	r3, #128	@ 0x80
 80191b4:	00db      	lsls	r3, r3, #3
 80191b6:	4013      	ands	r3, r2
 80191b8:	d108      	bne.n	80191cc <HAL_I2S_Receive_DMA+0x148>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 80191ba:	68fb      	ldr	r3, [r7, #12]
 80191bc:	681b      	ldr	r3, [r3, #0]
 80191be:	69da      	ldr	r2, [r3, #28]
 80191c0:	68fb      	ldr	r3, [r7, #12]
 80191c2:	681b      	ldr	r3, [r3, #0]
 80191c4:	2180      	movs	r1, #128	@ 0x80
 80191c6:	00c9      	lsls	r1, r1, #3
 80191c8:	430a      	orrs	r2, r1
 80191ca:	61da      	str	r2, [r3, #28]
  }

  /* Check if the I2S Rx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_RXDMAEN))
 80191cc:	68fb      	ldr	r3, [r7, #12]
 80191ce:	681b      	ldr	r3, [r3, #0]
 80191d0:	685b      	ldr	r3, [r3, #4]
 80191d2:	2201      	movs	r2, #1
 80191d4:	4013      	ands	r3, r2
 80191d6:	d107      	bne.n	80191e8 <HAL_I2S_Receive_DMA+0x164>
  {
    /* Enable Rx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 80191d8:	68fb      	ldr	r3, [r7, #12]
 80191da:	681b      	ldr	r3, [r3, #0]
 80191dc:	685a      	ldr	r2, [r3, #4]
 80191de:	68fb      	ldr	r3, [r7, #12]
 80191e0:	681b      	ldr	r3, [r3, #0]
 80191e2:	2101      	movs	r1, #1
 80191e4:	430a      	orrs	r2, r1
 80191e6:	605a      	str	r2, [r3, #4]
  }

  __HAL_UNLOCK(hi2s);
 80191e8:	68fb      	ldr	r3, [r7, #12]
 80191ea:	2234      	movs	r2, #52	@ 0x34
 80191ec:	2100      	movs	r1, #0
 80191ee:	5499      	strb	r1, [r3, r2]
  return HAL_OK;
 80191f0:	2300      	movs	r3, #0
}
 80191f2:	0018      	movs	r0, r3
 80191f4:	46bd      	mov	sp, r7
 80191f6:	b006      	add	sp, #24
 80191f8:	bd80      	pop	{r7, pc}
 80191fa:	46c0      	nop			@ (mov r8, r8)
 80191fc:	080193e5 	.word	0x080193e5
 8019200:	080193a1 	.word	0x080193a1
 8019204:	08019403 	.word	0x08019403

08019208 <HAL_I2S_DMAStop>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_DMAStop(I2S_HandleTypeDef *hi2s)
{
 8019208:	b580      	push	{r7, lr}
 801920a:	b086      	sub	sp, #24
 801920c:	af00      	add	r7, sp, #0
 801920e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8019210:	2317      	movs	r3, #23
 8019212:	18fb      	adds	r3, r7, r3
 8019214:	2200      	movs	r2, #0
 8019216:	701a      	strb	r2, [r3, #0]
     to call the HAL SPI API under callbacks HAL_I2S_TxCpltCallback() or HAL_I2S_RxCpltCallback()
     when calling HAL_DMA_Abort() API the DMA TX or RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_I2S_TxCpltCallback() or HAL_I2S_RxCpltCallback()
     */

  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8019218:	687b      	ldr	r3, [r7, #4]
 801921a:	685a      	ldr	r2, [r3, #4]
 801921c:	2380      	movs	r3, #128	@ 0x80
 801921e:	009b      	lsls	r3, r3, #2
 8019220:	429a      	cmp	r2, r3
 8019222:	d003      	beq.n	801922c <HAL_I2S_DMAStop+0x24>
 8019224:	687b      	ldr	r3, [r7, #4]
 8019226:	685b      	ldr	r3, [r3, #4]
 8019228:	2b00      	cmp	r3, #0
 801922a:	d158      	bne.n	80192de <HAL_I2S_DMAStop+0xd6>
  {
    /* Abort the I2S DMA tx Stream/Channel */
    if (hi2s->hdmatx != NULL)
 801922c:	687b      	ldr	r3, [r7, #4]
 801922e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8019230:	2b00      	cmp	r3, #0
 8019232:	d010      	beq.n	8019256 <HAL_I2S_DMAStop+0x4e>
    {
      /* Disable the I2S DMA tx Stream/Channel */
      if (HAL_OK != HAL_DMA_Abort(hi2s->hdmatx))
 8019234:	687b      	ldr	r3, [r7, #4]
 8019236:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8019238:	0018      	movs	r0, r3
 801923a:	f7fc f911 	bl	8015460 <HAL_DMA_Abort>
 801923e:	1e03      	subs	r3, r0, #0
 8019240:	d009      	beq.n	8019256 <HAL_I2S_DMAStop+0x4e>
      {
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8019242:	687b      	ldr	r3, [r7, #4]
 8019244:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8019246:	2208      	movs	r2, #8
 8019248:	431a      	orrs	r2, r3
 801924a:	687b      	ldr	r3, [r7, #4]
 801924c:	639a      	str	r2, [r3, #56]	@ 0x38
        errorcode = HAL_ERROR;
 801924e:	2317      	movs	r3, #23
 8019250:	18fb      	adds	r3, r7, r3
 8019252:	2201      	movs	r2, #1
 8019254:	701a      	strb	r2, [r3, #0]
      }
    }

    /* Wait until TXE flag is set */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_TXE, SET, I2S_TIMEOUT_FLAG) != HAL_OK)
 8019256:	6878      	ldr	r0, [r7, #4]
 8019258:	2364      	movs	r3, #100	@ 0x64
 801925a:	2201      	movs	r2, #1
 801925c:	2102      	movs	r1, #2
 801925e:	f000 f8f7 	bl	8019450 <I2S_WaitFlagStateUntilTimeout>
 8019262:	1e03      	subs	r3, r0, #0
 8019264:	d00d      	beq.n	8019282 <HAL_I2S_DMAStop+0x7a>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8019266:	687b      	ldr	r3, [r7, #4]
 8019268:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801926a:	2201      	movs	r2, #1
 801926c:	431a      	orrs	r2, r3
 801926e:	687b      	ldr	r3, [r7, #4]
 8019270:	639a      	str	r2, [r3, #56]	@ 0x38
      hi2s->State = HAL_I2S_STATE_READY;
 8019272:	687b      	ldr	r3, [r7, #4]
 8019274:	2235      	movs	r2, #53	@ 0x35
 8019276:	2101      	movs	r1, #1
 8019278:	5499      	strb	r1, [r3, r2]
      errorcode   = HAL_ERROR;
 801927a:	2317      	movs	r3, #23
 801927c:	18fb      	adds	r3, r7, r3
 801927e:	2201      	movs	r2, #1
 8019280:	701a      	strb	r2, [r3, #0]
    }

    /* Wait until BSY flag is Reset */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_BSY, RESET, I2S_TIMEOUT_FLAG) != HAL_OK)
 8019282:	6878      	ldr	r0, [r7, #4]
 8019284:	2364      	movs	r3, #100	@ 0x64
 8019286:	2200      	movs	r2, #0
 8019288:	2180      	movs	r1, #128	@ 0x80
 801928a:	f000 f8e1 	bl	8019450 <I2S_WaitFlagStateUntilTimeout>
 801928e:	1e03      	subs	r3, r0, #0
 8019290:	d00d      	beq.n	80192ae <HAL_I2S_DMAStop+0xa6>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8019292:	687b      	ldr	r3, [r7, #4]
 8019294:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8019296:	2201      	movs	r2, #1
 8019298:	431a      	orrs	r2, r3
 801929a:	687b      	ldr	r3, [r7, #4]
 801929c:	639a      	str	r2, [r3, #56]	@ 0x38
      hi2s->State = HAL_I2S_STATE_READY;
 801929e:	687b      	ldr	r3, [r7, #4]
 80192a0:	2235      	movs	r2, #53	@ 0x35
 80192a2:	2101      	movs	r1, #1
 80192a4:	5499      	strb	r1, [r3, r2]
      errorcode   = HAL_ERROR;
 80192a6:	2317      	movs	r3, #23
 80192a8:	18fb      	adds	r3, r7, r3
 80192aa:	2201      	movs	r2, #1
 80192ac:	701a      	strb	r2, [r3, #0]
    }

    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 80192ae:	687b      	ldr	r3, [r7, #4]
 80192b0:	681b      	ldr	r3, [r3, #0]
 80192b2:	69da      	ldr	r2, [r3, #28]
 80192b4:	687b      	ldr	r3, [r7, #4]
 80192b6:	681b      	ldr	r3, [r3, #0]
 80192b8:	4938      	ldr	r1, [pc, #224]	@ (801939c <HAL_I2S_DMAStop+0x194>)
 80192ba:	400a      	ands	r2, r1
 80192bc:	61da      	str	r2, [r3, #28]

    /* Clear UDR flag */
    __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80192be:	2300      	movs	r3, #0
 80192c0:	613b      	str	r3, [r7, #16]
 80192c2:	687b      	ldr	r3, [r7, #4]
 80192c4:	681b      	ldr	r3, [r3, #0]
 80192c6:	689b      	ldr	r3, [r3, #8]
 80192c8:	613b      	str	r3, [r7, #16]
 80192ca:	693b      	ldr	r3, [r7, #16]

    /* Disable the I2S Tx DMA requests */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 80192cc:	687b      	ldr	r3, [r7, #4]
 80192ce:	681b      	ldr	r3, [r3, #0]
 80192d0:	685a      	ldr	r2, [r3, #4]
 80192d2:	687b      	ldr	r3, [r7, #4]
 80192d4:	681b      	ldr	r3, [r3, #0]
 80192d6:	2102      	movs	r1, #2
 80192d8:	438a      	bics	r2, r1
 80192da:	605a      	str	r2, [r3, #4]
 80192dc:	e053      	b.n	8019386 <HAL_I2S_DMAStop+0x17e>

  }

  else if ((hi2s->Init.Mode == I2S_MODE_MASTER_RX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_RX))
 80192de:	687b      	ldr	r3, [r7, #4]
 80192e0:	685a      	ldr	r2, [r3, #4]
 80192e2:	23c0      	movs	r3, #192	@ 0xc0
 80192e4:	009b      	lsls	r3, r3, #2
 80192e6:	429a      	cmp	r2, r3
 80192e8:	d005      	beq.n	80192f6 <HAL_I2S_DMAStop+0xee>
 80192ea:	687b      	ldr	r3, [r7, #4]
 80192ec:	685a      	ldr	r2, [r3, #4]
 80192ee:	2380      	movs	r3, #128	@ 0x80
 80192f0:	005b      	lsls	r3, r3, #1
 80192f2:	429a      	cmp	r2, r3
 80192f4:	d147      	bne.n	8019386 <HAL_I2S_DMAStop+0x17e>
  {
    /* Abort the I2S DMA rx Stream/Channel */
    if (hi2s->hdmarx != NULL)
 80192f6:	687b      	ldr	r3, [r7, #4]
 80192f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80192fa:	2b00      	cmp	r3, #0
 80192fc:	d010      	beq.n	8019320 <HAL_I2S_DMAStop+0x118>
    {
      /* Disable the I2S DMA rx Stream/Channel */
      if (HAL_OK != HAL_DMA_Abort(hi2s->hdmarx))
 80192fe:	687b      	ldr	r3, [r7, #4]
 8019300:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8019302:	0018      	movs	r0, r3
 8019304:	f7fc f8ac 	bl	8015460 <HAL_DMA_Abort>
 8019308:	1e03      	subs	r3, r0, #0
 801930a:	d009      	beq.n	8019320 <HAL_I2S_DMAStop+0x118>
      {
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 801930c:	687b      	ldr	r3, [r7, #4]
 801930e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8019310:	2208      	movs	r2, #8
 8019312:	431a      	orrs	r2, r3
 8019314:	687b      	ldr	r3, [r7, #4]
 8019316:	639a      	str	r2, [r3, #56]	@ 0x38
        errorcode = HAL_ERROR;
 8019318:	2317      	movs	r3, #23
 801931a:	18fb      	adds	r3, r7, r3
 801931c:	2201      	movs	r2, #1
 801931e:	701a      	strb	r2, [r3, #0]
      }
    }

    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 8019320:	687b      	ldr	r3, [r7, #4]
 8019322:	681b      	ldr	r3, [r3, #0]
 8019324:	69da      	ldr	r2, [r3, #28]
 8019326:	687b      	ldr	r3, [r7, #4]
 8019328:	681b      	ldr	r3, [r3, #0]
 801932a:	491c      	ldr	r1, [pc, #112]	@ (801939c <HAL_I2S_DMAStop+0x194>)
 801932c:	400a      	ands	r2, r1
 801932e:	61da      	str	r2, [r3, #28]

    /* Clear OVR flag */
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8019330:	2300      	movs	r3, #0
 8019332:	60fb      	str	r3, [r7, #12]
 8019334:	687b      	ldr	r3, [r7, #4]
 8019336:	681b      	ldr	r3, [r3, #0]
 8019338:	68db      	ldr	r3, [r3, #12]
 801933a:	60fb      	str	r3, [r7, #12]
 801933c:	687b      	ldr	r3, [r7, #4]
 801933e:	681b      	ldr	r3, [r3, #0]
 8019340:	689b      	ldr	r3, [r3, #8]
 8019342:	60fb      	str	r3, [r7, #12]
 8019344:	68fb      	ldr	r3, [r7, #12]

    /* Disable the I2S Rx DMA request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8019346:	687b      	ldr	r3, [r7, #4]
 8019348:	681b      	ldr	r3, [r3, #0]
 801934a:	685a      	ldr	r2, [r3, #4]
 801934c:	687b      	ldr	r3, [r7, #4]
 801934e:	681b      	ldr	r3, [r3, #0]
 8019350:	2101      	movs	r1, #1
 8019352:	438a      	bics	r2, r1
 8019354:	605a      	str	r2, [r3, #4]

    if (hi2s->Init.Mode == I2S_MODE_SLAVE_RX)
 8019356:	687b      	ldr	r3, [r7, #4]
 8019358:	685a      	ldr	r2, [r3, #4]
 801935a:	2380      	movs	r3, #128	@ 0x80
 801935c:	005b      	lsls	r3, r3, #1
 801935e:	429a      	cmp	r2, r3
 8019360:	d10e      	bne.n	8019380 <HAL_I2S_DMAStop+0x178>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_BUSY_LINE_RX);
 8019362:	687b      	ldr	r3, [r7, #4]
 8019364:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8019366:	2240      	movs	r2, #64	@ 0x40
 8019368:	431a      	orrs	r2, r3
 801936a:	687b      	ldr	r3, [r7, #4]
 801936c:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 801936e:	687b      	ldr	r3, [r7, #4]
 8019370:	2235      	movs	r2, #53	@ 0x35
 8019372:	2101      	movs	r1, #1
 8019374:	5499      	strb	r1, [r3, r2]
      errorcode = HAL_ERROR;
 8019376:	2317      	movs	r3, #23
 8019378:	18fb      	adds	r3, r7, r3
 801937a:	2201      	movs	r2, #1
 801937c:	701a      	strb	r2, [r3, #0]
 801937e:	e002      	b.n	8019386 <HAL_I2S_DMAStop+0x17e>
    }
    else
    {
      /* Read DR to Flush RX Data */
      READ_REG((hi2s->Instance)->DR);
 8019380:	687b      	ldr	r3, [r7, #4]
 8019382:	681b      	ldr	r3, [r3, #0]
 8019384:	68db      	ldr	r3, [r3, #12]
    }
  }

  hi2s->State = HAL_I2S_STATE_READY;
 8019386:	687b      	ldr	r3, [r7, #4]
 8019388:	2235      	movs	r2, #53	@ 0x35
 801938a:	2101      	movs	r1, #1
 801938c:	5499      	strb	r1, [r3, r2]

  return errorcode;
 801938e:	2317      	movs	r3, #23
 8019390:	18fb      	adds	r3, r7, r3
 8019392:	781b      	ldrb	r3, [r3, #0]
}
 8019394:	0018      	movs	r0, r3
 8019396:	46bd      	mov	sp, r7
 8019398:	b006      	add	sp, #24
 801939a:	bd80      	pop	{r7, pc}
 801939c:	fffffbff 	.word	0xfffffbff

080193a0 <I2S_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 80193a0:	b580      	push	{r7, lr}
 80193a2:	b084      	sub	sp, #16
 80193a4:	af00      	add	r7, sp, #0
 80193a6:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80193a8:	687b      	ldr	r3, [r7, #4]
 80193aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80193ac:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 80193ae:	687b      	ldr	r3, [r7, #4]
 80193b0:	69db      	ldr	r3, [r3, #28]
 80193b2:	2b00      	cmp	r3, #0
 80193b4:	d10e      	bne.n	80193d4 <I2S_DMARxCplt+0x34>
  {
    /* Disable Rx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 80193b6:	68fb      	ldr	r3, [r7, #12]
 80193b8:	681b      	ldr	r3, [r3, #0]
 80193ba:	685a      	ldr	r2, [r3, #4]
 80193bc:	68fb      	ldr	r3, [r7, #12]
 80193be:	681b      	ldr	r3, [r3, #0]
 80193c0:	2101      	movs	r1, #1
 80193c2:	438a      	bics	r2, r1
 80193c4:	605a      	str	r2, [r3, #4]
    hi2s->RxXferCount = 0U;
 80193c6:	68fb      	ldr	r3, [r7, #12]
 80193c8:	2200      	movs	r2, #0
 80193ca:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2s->State = HAL_I2S_STATE_READY;
 80193cc:	68fb      	ldr	r3, [r7, #12]
 80193ce:	2235      	movs	r2, #53	@ 0x35
 80193d0:	2101      	movs	r1, #1
 80193d2:	5499      	strb	r1, [r3, r2]
  }
  /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->RxCpltCallback(hi2s);
#else
  HAL_I2S_RxCpltCallback(hi2s);
 80193d4:	68fb      	ldr	r3, [r7, #12]
 80193d6:	0018      	movs	r0, r3
 80193d8:	f7f8 fb92 	bl	8011b00 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 80193dc:	46c0      	nop			@ (mov r8, r8)
 80193de:	46bd      	mov	sp, r7
 80193e0:	b004      	add	sp, #16
 80193e2:	bd80      	pop	{r7, pc}

080193e4 <I2S_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80193e4:	b580      	push	{r7, lr}
 80193e6:	b084      	sub	sp, #16
 80193e8:	af00      	add	r7, sp, #0
 80193ea:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80193ec:	687b      	ldr	r3, [r7, #4]
 80193ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80193f0:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->RxHalfCpltCallback(hi2s);
#else
  HAL_I2S_RxHalfCpltCallback(hi2s);
 80193f2:	68fb      	ldr	r3, [r7, #12]
 80193f4:	0018      	movs	r0, r3
 80193f6:	f7f8 fb71 	bl	8011adc <HAL_I2S_RxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 80193fa:	46c0      	nop			@ (mov r8, r8)
 80193fc:	46bd      	mov	sp, r7
 80193fe:	b004      	add	sp, #16
 8019400:	bd80      	pop	{r7, pc}

08019402 <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 8019402:	b580      	push	{r7, lr}
 8019404:	b084      	sub	sp, #16
 8019406:	af00      	add	r7, sp, #0
 8019408:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 801940a:	687b      	ldr	r3, [r7, #4]
 801940c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801940e:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8019410:	68fb      	ldr	r3, [r7, #12]
 8019412:	681b      	ldr	r3, [r3, #0]
 8019414:	685a      	ldr	r2, [r3, #4]
 8019416:	68fb      	ldr	r3, [r7, #12]
 8019418:	681b      	ldr	r3, [r3, #0]
 801941a:	2103      	movs	r1, #3
 801941c:	438a      	bics	r2, r1
 801941e:	605a      	str	r2, [r3, #4]
  hi2s->TxXferCount = 0U;
 8019420:	68fb      	ldr	r3, [r7, #12]
 8019422:	2200      	movs	r2, #0
 8019424:	845a      	strh	r2, [r3, #34]	@ 0x22
  hi2s->RxXferCount = 0U;
 8019426:	68fb      	ldr	r3, [r7, #12]
 8019428:	2200      	movs	r2, #0
 801942a:	855a      	strh	r2, [r3, #42]	@ 0x2a

  hi2s->State = HAL_I2S_STATE_READY;
 801942c:	68fb      	ldr	r3, [r7, #12]
 801942e:	2235      	movs	r2, #53	@ 0x35
 8019430:	2101      	movs	r1, #1
 8019432:	5499      	strb	r1, [r3, r2]

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8019434:	68fb      	ldr	r3, [r7, #12]
 8019436:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8019438:	2208      	movs	r2, #8
 801943a:	431a      	orrs	r2, r3
 801943c:	68fb      	ldr	r3, [r7, #12]
 801943e:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 8019440:	68fb      	ldr	r3, [r7, #12]
 8019442:	0018      	movs	r0, r3
 8019444:	f7f8 fbaa 	bl	8011b9c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8019448:	46c0      	nop			@ (mov r8, r8)
 801944a:	46bd      	mov	sp, r7
 801944c:	b004      	add	sp, #16
 801944e:	bd80      	pop	{r7, pc}

08019450 <I2S_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef I2S_WaitFlagStateUntilTimeout(I2S_HandleTypeDef *hi2s, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout)
{
 8019450:	b580      	push	{r7, lr}
 8019452:	b086      	sub	sp, #24
 8019454:	af00      	add	r7, sp, #0
 8019456:	60f8      	str	r0, [r7, #12]
 8019458:	60b9      	str	r1, [r7, #8]
 801945a:	603b      	str	r3, [r7, #0]
 801945c:	1dfb      	adds	r3, r7, #7
 801945e:	701a      	strb	r2, [r3, #0]
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 8019460:	f7fb fa64 	bl	801492c <HAL_GetTick>
 8019464:	0003      	movs	r3, r0
 8019466:	617b      	str	r3, [r7, #20]

  /* Wait until flag is set to status*/
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 8019468:	e017      	b.n	801949a <I2S_WaitFlagStateUntilTimeout+0x4a>
  {
    if (Timeout != HAL_MAX_DELAY)
 801946a:	683b      	ldr	r3, [r7, #0]
 801946c:	3301      	adds	r3, #1
 801946e:	d014      	beq.n	801949a <I2S_WaitFlagStateUntilTimeout+0x4a>
    {
      if (((HAL_GetTick() - tickstart) >= Timeout) || (Timeout == 0U))
 8019470:	f7fb fa5c 	bl	801492c <HAL_GetTick>
 8019474:	0002      	movs	r2, r0
 8019476:	697b      	ldr	r3, [r7, #20]
 8019478:	1ad3      	subs	r3, r2, r3
 801947a:	683a      	ldr	r2, [r7, #0]
 801947c:	429a      	cmp	r2, r3
 801947e:	d902      	bls.n	8019486 <I2S_WaitFlagStateUntilTimeout+0x36>
 8019480:	683b      	ldr	r3, [r7, #0]
 8019482:	2b00      	cmp	r3, #0
 8019484:	d109      	bne.n	801949a <I2S_WaitFlagStateUntilTimeout+0x4a>
      {
        /* Set the I2S State ready */
        hi2s->State = HAL_I2S_STATE_READY;
 8019486:	68fb      	ldr	r3, [r7, #12]
 8019488:	2235      	movs	r2, #53	@ 0x35
 801948a:	2101      	movs	r1, #1
 801948c:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2s);
 801948e:	68fb      	ldr	r3, [r7, #12]
 8019490:	2234      	movs	r2, #52	@ 0x34
 8019492:	2100      	movs	r1, #0
 8019494:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8019496:	2303      	movs	r3, #3
 8019498:	e00f      	b.n	80194ba <I2S_WaitFlagStateUntilTimeout+0x6a>
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 801949a:	68fb      	ldr	r3, [r7, #12]
 801949c:	681b      	ldr	r3, [r3, #0]
 801949e:	689b      	ldr	r3, [r3, #8]
 80194a0:	68ba      	ldr	r2, [r7, #8]
 80194a2:	4013      	ands	r3, r2
 80194a4:	68ba      	ldr	r2, [r7, #8]
 80194a6:	1ad3      	subs	r3, r2, r3
 80194a8:	425a      	negs	r2, r3
 80194aa:	4153      	adcs	r3, r2
 80194ac:	b2db      	uxtb	r3, r3
 80194ae:	001a      	movs	r2, r3
 80194b0:	1dfb      	adds	r3, r7, #7
 80194b2:	781b      	ldrb	r3, [r3, #0]
 80194b4:	429a      	cmp	r2, r3
 80194b6:	d1d8      	bne.n	801946a <I2S_WaitFlagStateUntilTimeout+0x1a>
      }
    }
  }
  return HAL_OK;
 80194b8:	2300      	movs	r3, #0
}
 80194ba:	0018      	movs	r0, r3
 80194bc:	46bd      	mov	sp, r7
 80194be:	b006      	add	sp, #24
 80194c0:	bd80      	pop	{r7, pc}
	...

080194c4 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80194c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80194c6:	b08b      	sub	sp, #44	@ 0x2c
 80194c8:	af06      	add	r7, sp, #24
 80194ca:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80194cc:	687b      	ldr	r3, [r7, #4]
 80194ce:	2b00      	cmp	r3, #0
 80194d0:	d101      	bne.n	80194d6 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80194d2:	2301      	movs	r3, #1
 80194d4:	e0f0      	b.n	80196b8 <HAL_PCD_Init+0x1f4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80194d6:	687b      	ldr	r3, [r7, #4]
 80194d8:	4a79      	ldr	r2, [pc, #484]	@ (80196c0 <HAL_PCD_Init+0x1fc>)
 80194da:	5c9b      	ldrb	r3, [r3, r2]
 80194dc:	b2db      	uxtb	r3, r3
 80194de:	2b00      	cmp	r3, #0
 80194e0:	d108      	bne.n	80194f4 <HAL_PCD_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80194e2:	687a      	ldr	r2, [r7, #4]
 80194e4:	23aa      	movs	r3, #170	@ 0xaa
 80194e6:	009b      	lsls	r3, r3, #2
 80194e8:	2100      	movs	r1, #0
 80194ea:	54d1      	strb	r1, [r2, r3]

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80194ec:	687b      	ldr	r3, [r7, #4]
 80194ee:	0018      	movs	r0, r3
 80194f0:	f009 ff60 	bl	80233b4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80194f4:	687b      	ldr	r3, [r7, #4]
 80194f6:	4a72      	ldr	r2, [pc, #456]	@ (80196c0 <HAL_PCD_Init+0x1fc>)
 80194f8:	2103      	movs	r1, #3
 80194fa:	5499      	strb	r1, [r3, r2]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80194fc:	687b      	ldr	r3, [r7, #4]
 80194fe:	681b      	ldr	r3, [r3, #0]
 8019500:	0018      	movs	r0, r3
 8019502:	f005 ff05 	bl	801f310 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8019506:	230f      	movs	r3, #15
 8019508:	18fb      	adds	r3, r7, r3
 801950a:	2200      	movs	r2, #0
 801950c:	701a      	strb	r2, [r3, #0]
 801950e:	e049      	b.n	80195a4 <HAL_PCD_Init+0xe0>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8019510:	200f      	movs	r0, #15
 8019512:	183b      	adds	r3, r7, r0
 8019514:	781b      	ldrb	r3, [r3, #0]
 8019516:	6879      	ldr	r1, [r7, #4]
 8019518:	1c5a      	adds	r2, r3, #1
 801951a:	0013      	movs	r3, r2
 801951c:	009b      	lsls	r3, r3, #2
 801951e:	189b      	adds	r3, r3, r2
 8019520:	00db      	lsls	r3, r3, #3
 8019522:	18cb      	adds	r3, r1, r3
 8019524:	3301      	adds	r3, #1
 8019526:	2201      	movs	r2, #1
 8019528:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 801952a:	183b      	adds	r3, r7, r0
 801952c:	781b      	ldrb	r3, [r3, #0]
 801952e:	6879      	ldr	r1, [r7, #4]
 8019530:	1c5a      	adds	r2, r3, #1
 8019532:	0013      	movs	r3, r2
 8019534:	009b      	lsls	r3, r3, #2
 8019536:	189b      	adds	r3, r3, r2
 8019538:	00db      	lsls	r3, r3, #3
 801953a:	183a      	adds	r2, r7, r0
 801953c:	7812      	ldrb	r2, [r2, #0]
 801953e:	545a      	strb	r2, [r3, r1]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8019540:	183b      	adds	r3, r7, r0
 8019542:	781b      	ldrb	r3, [r3, #0]
 8019544:	6879      	ldr	r1, [r7, #4]
 8019546:	1c5a      	adds	r2, r3, #1
 8019548:	0013      	movs	r3, r2
 801954a:	009b      	lsls	r3, r3, #2
 801954c:	189b      	adds	r3, r3, r2
 801954e:	00db      	lsls	r3, r3, #3
 8019550:	18cb      	adds	r3, r1, r3
 8019552:	3303      	adds	r3, #3
 8019554:	2200      	movs	r2, #0
 8019556:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8019558:	183b      	adds	r3, r7, r0
 801955a:	781a      	ldrb	r2, [r3, #0]
 801955c:	6879      	ldr	r1, [r7, #4]
 801955e:	0013      	movs	r3, r2
 8019560:	009b      	lsls	r3, r3, #2
 8019562:	189b      	adds	r3, r3, r2
 8019564:	00db      	lsls	r3, r3, #3
 8019566:	18cb      	adds	r3, r1, r3
 8019568:	3338      	adds	r3, #56	@ 0x38
 801956a:	2200      	movs	r2, #0
 801956c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 801956e:	183b      	adds	r3, r7, r0
 8019570:	781a      	ldrb	r2, [r3, #0]
 8019572:	6879      	ldr	r1, [r7, #4]
 8019574:	0013      	movs	r3, r2
 8019576:	009b      	lsls	r3, r3, #2
 8019578:	189b      	adds	r3, r3, r2
 801957a:	00db      	lsls	r3, r3, #3
 801957c:	18cb      	adds	r3, r1, r3
 801957e:	333c      	adds	r3, #60	@ 0x3c
 8019580:	2200      	movs	r2, #0
 8019582:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8019584:	183b      	adds	r3, r7, r0
 8019586:	781a      	ldrb	r2, [r3, #0]
 8019588:	6879      	ldr	r1, [r7, #4]
 801958a:	0013      	movs	r3, r2
 801958c:	009b      	lsls	r3, r3, #2
 801958e:	189b      	adds	r3, r3, r2
 8019590:	00db      	lsls	r3, r3, #3
 8019592:	18cb      	adds	r3, r1, r3
 8019594:	3340      	adds	r3, #64	@ 0x40
 8019596:	2200      	movs	r2, #0
 8019598:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 801959a:	183b      	adds	r3, r7, r0
 801959c:	781a      	ldrb	r2, [r3, #0]
 801959e:	183b      	adds	r3, r7, r0
 80195a0:	3201      	adds	r2, #1
 80195a2:	701a      	strb	r2, [r3, #0]
 80195a4:	210f      	movs	r1, #15
 80195a6:	187b      	adds	r3, r7, r1
 80195a8:	781a      	ldrb	r2, [r3, #0]
 80195aa:	687b      	ldr	r3, [r7, #4]
 80195ac:	685b      	ldr	r3, [r3, #4]
 80195ae:	429a      	cmp	r2, r3
 80195b0:	d3ae      	bcc.n	8019510 <HAL_PCD_Init+0x4c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80195b2:	187b      	adds	r3, r7, r1
 80195b4:	2200      	movs	r2, #0
 80195b6:	701a      	strb	r2, [r3, #0]
 80195b8:	e056      	b.n	8019668 <HAL_PCD_Init+0x1a4>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80195ba:	240f      	movs	r4, #15
 80195bc:	193b      	adds	r3, r7, r4
 80195be:	781a      	ldrb	r2, [r3, #0]
 80195c0:	6878      	ldr	r0, [r7, #4]
 80195c2:	236a      	movs	r3, #106	@ 0x6a
 80195c4:	33ff      	adds	r3, #255	@ 0xff
 80195c6:	0019      	movs	r1, r3
 80195c8:	0013      	movs	r3, r2
 80195ca:	009b      	lsls	r3, r3, #2
 80195cc:	189b      	adds	r3, r3, r2
 80195ce:	00db      	lsls	r3, r3, #3
 80195d0:	18c3      	adds	r3, r0, r3
 80195d2:	185b      	adds	r3, r3, r1
 80195d4:	2200      	movs	r2, #0
 80195d6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80195d8:	193b      	adds	r3, r7, r4
 80195da:	781a      	ldrb	r2, [r3, #0]
 80195dc:	6878      	ldr	r0, [r7, #4]
 80195de:	23b4      	movs	r3, #180	@ 0xb4
 80195e0:	0059      	lsls	r1, r3, #1
 80195e2:	0013      	movs	r3, r2
 80195e4:	009b      	lsls	r3, r3, #2
 80195e6:	189b      	adds	r3, r3, r2
 80195e8:	00db      	lsls	r3, r3, #3
 80195ea:	18c3      	adds	r3, r0, r3
 80195ec:	185b      	adds	r3, r3, r1
 80195ee:	193a      	adds	r2, r7, r4
 80195f0:	7812      	ldrb	r2, [r2, #0]
 80195f2:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80195f4:	193b      	adds	r3, r7, r4
 80195f6:	781a      	ldrb	r2, [r3, #0]
 80195f8:	6878      	ldr	r0, [r7, #4]
 80195fa:	236c      	movs	r3, #108	@ 0x6c
 80195fc:	33ff      	adds	r3, #255	@ 0xff
 80195fe:	0019      	movs	r1, r3
 8019600:	0013      	movs	r3, r2
 8019602:	009b      	lsls	r3, r3, #2
 8019604:	189b      	adds	r3, r3, r2
 8019606:	00db      	lsls	r3, r3, #3
 8019608:	18c3      	adds	r3, r0, r3
 801960a:	185b      	adds	r3, r3, r1
 801960c:	2200      	movs	r2, #0
 801960e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8019610:	193b      	adds	r3, r7, r4
 8019612:	781a      	ldrb	r2, [r3, #0]
 8019614:	6878      	ldr	r0, [r7, #4]
 8019616:	23bc      	movs	r3, #188	@ 0xbc
 8019618:	0059      	lsls	r1, r3, #1
 801961a:	0013      	movs	r3, r2
 801961c:	009b      	lsls	r3, r3, #2
 801961e:	189b      	adds	r3, r3, r2
 8019620:	00db      	lsls	r3, r3, #3
 8019622:	18c3      	adds	r3, r0, r3
 8019624:	185b      	adds	r3, r3, r1
 8019626:	2200      	movs	r2, #0
 8019628:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 801962a:	193b      	adds	r3, r7, r4
 801962c:	781a      	ldrb	r2, [r3, #0]
 801962e:	6878      	ldr	r0, [r7, #4]
 8019630:	23be      	movs	r3, #190	@ 0xbe
 8019632:	0059      	lsls	r1, r3, #1
 8019634:	0013      	movs	r3, r2
 8019636:	009b      	lsls	r3, r3, #2
 8019638:	189b      	adds	r3, r3, r2
 801963a:	00db      	lsls	r3, r3, #3
 801963c:	18c3      	adds	r3, r0, r3
 801963e:	185b      	adds	r3, r3, r1
 8019640:	2200      	movs	r2, #0
 8019642:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8019644:	193b      	adds	r3, r7, r4
 8019646:	781a      	ldrb	r2, [r3, #0]
 8019648:	6878      	ldr	r0, [r7, #4]
 801964a:	23c0      	movs	r3, #192	@ 0xc0
 801964c:	0059      	lsls	r1, r3, #1
 801964e:	0013      	movs	r3, r2
 8019650:	009b      	lsls	r3, r3, #2
 8019652:	189b      	adds	r3, r3, r2
 8019654:	00db      	lsls	r3, r3, #3
 8019656:	18c3      	adds	r3, r0, r3
 8019658:	185b      	adds	r3, r3, r1
 801965a:	2200      	movs	r2, #0
 801965c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 801965e:	193b      	adds	r3, r7, r4
 8019660:	781a      	ldrb	r2, [r3, #0]
 8019662:	193b      	adds	r3, r7, r4
 8019664:	3201      	adds	r2, #1
 8019666:	701a      	strb	r2, [r3, #0]
 8019668:	230f      	movs	r3, #15
 801966a:	18fb      	adds	r3, r7, r3
 801966c:	781a      	ldrb	r2, [r3, #0]
 801966e:	687b      	ldr	r3, [r7, #4]
 8019670:	685b      	ldr	r3, [r3, #4]
 8019672:	429a      	cmp	r2, r3
 8019674:	d3a1      	bcc.n	80195ba <HAL_PCD_Init+0xf6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8019676:	687b      	ldr	r3, [r7, #4]
 8019678:	6818      	ldr	r0, [r3, #0]
 801967a:	687b      	ldr	r3, [r7, #4]
 801967c:	466a      	mov	r2, sp
 801967e:	0011      	movs	r1, r2
 8019680:	001a      	movs	r2, r3
 8019682:	3210      	adds	r2, #16
 8019684:	ca70      	ldmia	r2!, {r4, r5, r6}
 8019686:	c170      	stmia	r1!, {r4, r5, r6}
 8019688:	ca30      	ldmia	r2!, {r4, r5}
 801968a:	c130      	stmia	r1!, {r4, r5}
 801968c:	6859      	ldr	r1, [r3, #4]
 801968e:	689a      	ldr	r2, [r3, #8]
 8019690:	68db      	ldr	r3, [r3, #12]
 8019692:	f005 fe57 	bl	801f344 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8019696:	687b      	ldr	r3, [r7, #4]
 8019698:	2224      	movs	r2, #36	@ 0x24
 801969a:	2100      	movs	r1, #0
 801969c:	5499      	strb	r1, [r3, r2]
  hpcd->State = HAL_PCD_STATE_READY;
 801969e:	687b      	ldr	r3, [r7, #4]
 80196a0:	4a07      	ldr	r2, [pc, #28]	@ (80196c0 <HAL_PCD_Init+0x1fc>)
 80196a2:	2101      	movs	r1, #1
 80196a4:	5499      	strb	r1, [r3, r2]

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80196a6:	687b      	ldr	r3, [r7, #4]
 80196a8:	69db      	ldr	r3, [r3, #28]
 80196aa:	2b01      	cmp	r3, #1
 80196ac:	d103      	bne.n	80196b6 <HAL_PCD_Init+0x1f2>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80196ae:	687b      	ldr	r3, [r7, #4]
 80196b0:	0018      	movs	r0, r3
 80196b2:	f001 fd23 	bl	801b0fc <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 80196b6:	2300      	movs	r3, #0
}
 80196b8:	0018      	movs	r0, r3
 80196ba:	46bd      	mov	sp, r7
 80196bc:	b005      	add	sp, #20
 80196be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80196c0:	000002a9 	.word	0x000002a9

080196c4 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80196c4:	b580      	push	{r7, lr}
 80196c6:	b082      	sub	sp, #8
 80196c8:	af00      	add	r7, sp, #0
 80196ca:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80196cc:	687a      	ldr	r2, [r7, #4]
 80196ce:	23aa      	movs	r3, #170	@ 0xaa
 80196d0:	009b      	lsls	r3, r3, #2
 80196d2:	5cd3      	ldrb	r3, [r2, r3]
 80196d4:	2b01      	cmp	r3, #1
 80196d6:	d101      	bne.n	80196dc <HAL_PCD_Start+0x18>
 80196d8:	2302      	movs	r3, #2
 80196da:	e014      	b.n	8019706 <HAL_PCD_Start+0x42>
 80196dc:	687a      	ldr	r2, [r7, #4]
 80196de:	23aa      	movs	r3, #170	@ 0xaa
 80196e0:	009b      	lsls	r3, r3, #2
 80196e2:	2101      	movs	r1, #1
 80196e4:	54d1      	strb	r1, [r2, r3]
  __HAL_PCD_ENABLE(hpcd);
 80196e6:	687b      	ldr	r3, [r7, #4]
 80196e8:	681b      	ldr	r3, [r3, #0]
 80196ea:	0018      	movs	r0, r3
 80196ec:	f005 fdfa 	bl	801f2e4 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80196f0:	687b      	ldr	r3, [r7, #4]
 80196f2:	681b      	ldr	r3, [r3, #0]
 80196f4:	0018      	movs	r0, r3
 80196f6:	f007 fdfd 	bl	80212f4 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80196fa:	687a      	ldr	r2, [r7, #4]
 80196fc:	23aa      	movs	r3, #170	@ 0xaa
 80196fe:	009b      	lsls	r3, r3, #2
 8019700:	2100      	movs	r1, #0
 8019702:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8019704:	2300      	movs	r3, #0
}
 8019706:	0018      	movs	r0, r3
 8019708:	46bd      	mov	sp, r7
 801970a:	b002      	add	sp, #8
 801970c:	bd80      	pop	{r7, pc}
	...

08019710 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8019710:	b580      	push	{r7, lr}
 8019712:	b084      	sub	sp, #16
 8019714:	af00      	add	r7, sp, #0
 8019716:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8019718:	687b      	ldr	r3, [r7, #4]
 801971a:	681b      	ldr	r3, [r3, #0]
 801971c:	0018      	movs	r0, r3
 801971e:	f007 fdff 	bl	8021320 <USB_ReadInterrupts>
 8019722:	0003      	movs	r3, r0
 8019724:	60fb      	str	r3, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8019726:	68fa      	ldr	r2, [r7, #12]
 8019728:	2380      	movs	r3, #128	@ 0x80
 801972a:	021b      	lsls	r3, r3, #8
 801972c:	4013      	ands	r3, r2
 801972e:	d004      	beq.n	801973a <HAL_PCD_IRQHandler+0x2a>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8019730:	687b      	ldr	r3, [r7, #4]
 8019732:	0018      	movs	r0, r3
 8019734:	f000 fb62 	bl	8019dfc <PCD_EP_ISR_Handler>

    return;
 8019738:	e11d      	b.n	8019976 <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 801973a:	68fa      	ldr	r2, [r7, #12]
 801973c:	2380      	movs	r3, #128	@ 0x80
 801973e:	00db      	lsls	r3, r3, #3
 8019740:	4013      	ands	r3, r2
 8019742:	d015      	beq.n	8019770 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8019744:	687b      	ldr	r3, [r7, #4]
 8019746:	681b      	ldr	r3, [r3, #0]
 8019748:	2244      	movs	r2, #68	@ 0x44
 801974a:	5a9b      	ldrh	r3, [r3, r2]
 801974c:	b29a      	uxth	r2, r3
 801974e:	687b      	ldr	r3, [r7, #4]
 8019750:	681b      	ldr	r3, [r3, #0]
 8019752:	498a      	ldr	r1, [pc, #552]	@ (801997c <HAL_PCD_IRQHandler+0x26c>)
 8019754:	400a      	ands	r2, r1
 8019756:	b291      	uxth	r1, r2
 8019758:	2244      	movs	r2, #68	@ 0x44
 801975a:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 801975c:	687b      	ldr	r3, [r7, #4]
 801975e:	0018      	movs	r0, r3
 8019760:	f009 feab 	bl	80234ba <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8019764:	687b      	ldr	r3, [r7, #4]
 8019766:	2100      	movs	r1, #0
 8019768:	0018      	movs	r0, r3
 801976a:	f000 f915 	bl	8019998 <HAL_PCD_SetAddress>

    return;
 801976e:	e102      	b.n	8019976 <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8019770:	68fa      	ldr	r2, [r7, #12]
 8019772:	2380      	movs	r3, #128	@ 0x80
 8019774:	01db      	lsls	r3, r3, #7
 8019776:	4013      	ands	r3, r2
 8019778:	d00c      	beq.n	8019794 <HAL_PCD_IRQHandler+0x84>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 801977a:	687b      	ldr	r3, [r7, #4]
 801977c:	681b      	ldr	r3, [r3, #0]
 801977e:	2244      	movs	r2, #68	@ 0x44
 8019780:	5a9b      	ldrh	r3, [r3, r2]
 8019782:	b29a      	uxth	r2, r3
 8019784:	687b      	ldr	r3, [r7, #4]
 8019786:	681b      	ldr	r3, [r3, #0]
 8019788:	497d      	ldr	r1, [pc, #500]	@ (8019980 <HAL_PCD_IRQHandler+0x270>)
 801978a:	400a      	ands	r2, r1
 801978c:	b291      	uxth	r1, r2
 801978e:	2244      	movs	r2, #68	@ 0x44
 8019790:	5299      	strh	r1, [r3, r2]

    return;
 8019792:	e0f0      	b.n	8019976 <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8019794:	68fa      	ldr	r2, [r7, #12]
 8019796:	2380      	movs	r3, #128	@ 0x80
 8019798:	019b      	lsls	r3, r3, #6
 801979a:	4013      	ands	r3, r2
 801979c:	d00c      	beq.n	80197b8 <HAL_PCD_IRQHandler+0xa8>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 801979e:	687b      	ldr	r3, [r7, #4]
 80197a0:	681b      	ldr	r3, [r3, #0]
 80197a2:	2244      	movs	r2, #68	@ 0x44
 80197a4:	5a9b      	ldrh	r3, [r3, r2]
 80197a6:	b29a      	uxth	r2, r3
 80197a8:	687b      	ldr	r3, [r7, #4]
 80197aa:	681b      	ldr	r3, [r3, #0]
 80197ac:	4975      	ldr	r1, [pc, #468]	@ (8019984 <HAL_PCD_IRQHandler+0x274>)
 80197ae:	400a      	ands	r2, r1
 80197b0:	b291      	uxth	r1, r2
 80197b2:	2244      	movs	r2, #68	@ 0x44
 80197b4:	5299      	strh	r1, [r3, r2]

    return;
 80197b6:	e0de      	b.n	8019976 <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 80197b8:	68fa      	ldr	r2, [r7, #12]
 80197ba:	2380      	movs	r3, #128	@ 0x80
 80197bc:	015b      	lsls	r3, r3, #5
 80197be:	4013      	ands	r3, r2
 80197c0:	d038      	beq.n	8019834 <HAL_PCD_IRQHandler+0x124>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 80197c2:	687b      	ldr	r3, [r7, #4]
 80197c4:	681b      	ldr	r3, [r3, #0]
 80197c6:	2240      	movs	r2, #64	@ 0x40
 80197c8:	5a9b      	ldrh	r3, [r3, r2]
 80197ca:	b29a      	uxth	r2, r3
 80197cc:	687b      	ldr	r3, [r7, #4]
 80197ce:	681b      	ldr	r3, [r3, #0]
 80197d0:	2104      	movs	r1, #4
 80197d2:	438a      	bics	r2, r1
 80197d4:	b291      	uxth	r1, r2
 80197d6:	2240      	movs	r2, #64	@ 0x40
 80197d8:	5299      	strh	r1, [r3, r2]
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80197da:	687b      	ldr	r3, [r7, #4]
 80197dc:	681b      	ldr	r3, [r3, #0]
 80197de:	2240      	movs	r2, #64	@ 0x40
 80197e0:	5a9b      	ldrh	r3, [r3, r2]
 80197e2:	b29a      	uxth	r2, r3
 80197e4:	687b      	ldr	r3, [r7, #4]
 80197e6:	681b      	ldr	r3, [r3, #0]
 80197e8:	2108      	movs	r1, #8
 80197ea:	438a      	bics	r2, r1
 80197ec:	b291      	uxth	r1, r2
 80197ee:	2240      	movs	r2, #64	@ 0x40
 80197f0:	5299      	strh	r1, [r3, r2]

    if (hpcd->LPM_State == LPM_L1)
 80197f2:	687a      	ldr	r2, [r7, #4]
 80197f4:	23b8      	movs	r3, #184	@ 0xb8
 80197f6:	009b      	lsls	r3, r3, #2
 80197f8:	5cd3      	ldrb	r3, [r2, r3]
 80197fa:	2b01      	cmp	r3, #1
 80197fc:	d109      	bne.n	8019812 <HAL_PCD_IRQHandler+0x102>
    {
      hpcd->LPM_State = LPM_L0;
 80197fe:	687a      	ldr	r2, [r7, #4]
 8019800:	23b8      	movs	r3, #184	@ 0xb8
 8019802:	009b      	lsls	r3, r3, #2
 8019804:	2100      	movs	r1, #0
 8019806:	54d1      	strb	r1, [r2, r3]
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8019808:	687b      	ldr	r3, [r7, #4]
 801980a:	2100      	movs	r1, #0
 801980c:	0018      	movs	r0, r3
 801980e:	f001 fc9f 	bl	801b150 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8019812:	687b      	ldr	r3, [r7, #4]
 8019814:	0018      	movs	r0, r3
 8019816:	f009 fe91 	bl	802353c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 801981a:	687b      	ldr	r3, [r7, #4]
 801981c:	681b      	ldr	r3, [r3, #0]
 801981e:	2244      	movs	r2, #68	@ 0x44
 8019820:	5a9b      	ldrh	r3, [r3, r2]
 8019822:	b29a      	uxth	r2, r3
 8019824:	687b      	ldr	r3, [r7, #4]
 8019826:	681b      	ldr	r3, [r3, #0]
 8019828:	4957      	ldr	r1, [pc, #348]	@ (8019988 <HAL_PCD_IRQHandler+0x278>)
 801982a:	400a      	ands	r2, r1
 801982c:	b291      	uxth	r1, r2
 801982e:	2244      	movs	r2, #68	@ 0x44
 8019830:	5299      	strh	r1, [r3, r2]

    return;
 8019832:	e0a0      	b.n	8019976 <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8019834:	68fa      	ldr	r2, [r7, #12]
 8019836:	2380      	movs	r3, #128	@ 0x80
 8019838:	011b      	lsls	r3, r3, #4
 801983a:	4013      	ands	r3, r2
 801983c:	d028      	beq.n	8019890 <HAL_PCD_IRQHandler+0x180>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 801983e:	687b      	ldr	r3, [r7, #4]
 8019840:	681b      	ldr	r3, [r3, #0]
 8019842:	2240      	movs	r2, #64	@ 0x40
 8019844:	5a9b      	ldrh	r3, [r3, r2]
 8019846:	b29a      	uxth	r2, r3
 8019848:	687b      	ldr	r3, [r7, #4]
 801984a:	681b      	ldr	r3, [r3, #0]
 801984c:	2108      	movs	r1, #8
 801984e:	430a      	orrs	r2, r1
 8019850:	b291      	uxth	r1, r2
 8019852:	2240      	movs	r2, #64	@ 0x40
 8019854:	5299      	strh	r1, [r3, r2]

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8019856:	687b      	ldr	r3, [r7, #4]
 8019858:	681b      	ldr	r3, [r3, #0]
 801985a:	2244      	movs	r2, #68	@ 0x44
 801985c:	5a9b      	ldrh	r3, [r3, r2]
 801985e:	b29a      	uxth	r2, r3
 8019860:	687b      	ldr	r3, [r7, #4]
 8019862:	681b      	ldr	r3, [r3, #0]
 8019864:	4949      	ldr	r1, [pc, #292]	@ (801998c <HAL_PCD_IRQHandler+0x27c>)
 8019866:	400a      	ands	r2, r1
 8019868:	b291      	uxth	r1, r2
 801986a:	2244      	movs	r2, #68	@ 0x44
 801986c:	5299      	strh	r1, [r3, r2]

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 801986e:	687b      	ldr	r3, [r7, #4]
 8019870:	681b      	ldr	r3, [r3, #0]
 8019872:	2240      	movs	r2, #64	@ 0x40
 8019874:	5a9b      	ldrh	r3, [r3, r2]
 8019876:	b29a      	uxth	r2, r3
 8019878:	687b      	ldr	r3, [r7, #4]
 801987a:	681b      	ldr	r3, [r3, #0]
 801987c:	2104      	movs	r1, #4
 801987e:	430a      	orrs	r2, r1
 8019880:	b291      	uxth	r1, r2
 8019882:	2240      	movs	r2, #64	@ 0x40
 8019884:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8019886:	687b      	ldr	r3, [r7, #4]
 8019888:	0018      	movs	r0, r3
 801988a:	f009 fe3b 	bl	8023504 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 801988e:	e072      	b.n	8019976 <HAL_PCD_IRQHandler+0x266>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8019890:	68fb      	ldr	r3, [r7, #12]
 8019892:	2280      	movs	r2, #128	@ 0x80
 8019894:	4013      	ands	r3, r2
 8019896:	d046      	beq.n	8019926 <HAL_PCD_IRQHandler+0x216>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8019898:	687b      	ldr	r3, [r7, #4]
 801989a:	681b      	ldr	r3, [r3, #0]
 801989c:	2244      	movs	r2, #68	@ 0x44
 801989e:	5a9b      	ldrh	r3, [r3, r2]
 80198a0:	b29a      	uxth	r2, r3
 80198a2:	687b      	ldr	r3, [r7, #4]
 80198a4:	681b      	ldr	r3, [r3, #0]
 80198a6:	2180      	movs	r1, #128	@ 0x80
 80198a8:	438a      	bics	r2, r1
 80198aa:	b291      	uxth	r1, r2
 80198ac:	2244      	movs	r2, #68	@ 0x44
 80198ae:	5299      	strh	r1, [r3, r2]
    if (hpcd->LPM_State == LPM_L0)
 80198b0:	687a      	ldr	r2, [r7, #4]
 80198b2:	23b8      	movs	r3, #184	@ 0xb8
 80198b4:	009b      	lsls	r3, r3, #2
 80198b6:	5cd3      	ldrb	r3, [r2, r3]
 80198b8:	2b00      	cmp	r3, #0
 80198ba:	d12f      	bne.n	801991c <HAL_PCD_IRQHandler+0x20c>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 80198bc:	687b      	ldr	r3, [r7, #4]
 80198be:	681b      	ldr	r3, [r3, #0]
 80198c0:	2240      	movs	r2, #64	@ 0x40
 80198c2:	5a9b      	ldrh	r3, [r3, r2]
 80198c4:	b29a      	uxth	r2, r3
 80198c6:	687b      	ldr	r3, [r7, #4]
 80198c8:	681b      	ldr	r3, [r3, #0]
 80198ca:	2104      	movs	r1, #4
 80198cc:	430a      	orrs	r2, r1
 80198ce:	b291      	uxth	r1, r2
 80198d0:	2240      	movs	r2, #64	@ 0x40
 80198d2:	5299      	strh	r1, [r3, r2]
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80198d4:	687b      	ldr	r3, [r7, #4]
 80198d6:	681b      	ldr	r3, [r3, #0]
 80198d8:	2240      	movs	r2, #64	@ 0x40
 80198da:	5a9b      	ldrh	r3, [r3, r2]
 80198dc:	b29a      	uxth	r2, r3
 80198de:	687b      	ldr	r3, [r7, #4]
 80198e0:	681b      	ldr	r3, [r3, #0]
 80198e2:	2108      	movs	r1, #8
 80198e4:	430a      	orrs	r2, r1
 80198e6:	b291      	uxth	r1, r2
 80198e8:	2240      	movs	r2, #64	@ 0x40
 80198ea:	5299      	strh	r1, [r3, r2]

      hpcd->LPM_State = LPM_L1;
 80198ec:	687a      	ldr	r2, [r7, #4]
 80198ee:	23b8      	movs	r3, #184	@ 0xb8
 80198f0:	009b      	lsls	r3, r3, #2
 80198f2:	2101      	movs	r1, #1
 80198f4:	54d1      	strb	r1, [r2, r3]
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 80198f6:	687b      	ldr	r3, [r7, #4]
 80198f8:	681b      	ldr	r3, [r3, #0]
 80198fa:	2254      	movs	r2, #84	@ 0x54
 80198fc:	5a9b      	ldrh	r3, [r3, r2]
 80198fe:	b29b      	uxth	r3, r3
 8019900:	089b      	lsrs	r3, r3, #2
 8019902:	223c      	movs	r2, #60	@ 0x3c
 8019904:	4013      	ands	r3, r2
 8019906:	0019      	movs	r1, r3
 8019908:	687a      	ldr	r2, [r7, #4]
 801990a:	23b9      	movs	r3, #185	@ 0xb9
 801990c:	009b      	lsls	r3, r3, #2
 801990e:	50d1      	str	r1, [r2, r3]
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8019910:	687b      	ldr	r3, [r7, #4]
 8019912:	2101      	movs	r1, #1
 8019914:	0018      	movs	r0, r3
 8019916:	f001 fc1b 	bl	801b150 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 801991a:	e02c      	b.n	8019976 <HAL_PCD_IRQHandler+0x266>
      HAL_PCD_SuspendCallback(hpcd);
 801991c:	687b      	ldr	r3, [r7, #4]
 801991e:	0018      	movs	r0, r3
 8019920:	f009 fdf0 	bl	8023504 <HAL_PCD_SuspendCallback>
    return;
 8019924:	e027      	b.n	8019976 <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8019926:	68fa      	ldr	r2, [r7, #12]
 8019928:	2380      	movs	r3, #128	@ 0x80
 801992a:	009b      	lsls	r3, r3, #2
 801992c:	4013      	ands	r3, r2
 801992e:	d010      	beq.n	8019952 <HAL_PCD_IRQHandler+0x242>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8019930:	687b      	ldr	r3, [r7, #4]
 8019932:	681b      	ldr	r3, [r3, #0]
 8019934:	2244      	movs	r2, #68	@ 0x44
 8019936:	5a9b      	ldrh	r3, [r3, r2]
 8019938:	b29a      	uxth	r2, r3
 801993a:	687b      	ldr	r3, [r7, #4]
 801993c:	681b      	ldr	r3, [r3, #0]
 801993e:	4914      	ldr	r1, [pc, #80]	@ (8019990 <HAL_PCD_IRQHandler+0x280>)
 8019940:	400a      	ands	r2, r1
 8019942:	b291      	uxth	r1, r2
 8019944:	2244      	movs	r2, #68	@ 0x44
 8019946:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8019948:	687b      	ldr	r3, [r7, #4]
 801994a:	0018      	movs	r0, r3
 801994c:	f009 fda6 	bl	802349c <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8019950:	e011      	b.n	8019976 <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8019952:	68fa      	ldr	r2, [r7, #12]
 8019954:	2380      	movs	r3, #128	@ 0x80
 8019956:	005b      	lsls	r3, r3, #1
 8019958:	4013      	ands	r3, r2
 801995a:	d00c      	beq.n	8019976 <HAL_PCD_IRQHandler+0x266>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 801995c:	687b      	ldr	r3, [r7, #4]
 801995e:	681b      	ldr	r3, [r3, #0]
 8019960:	2244      	movs	r2, #68	@ 0x44
 8019962:	5a9b      	ldrh	r3, [r3, r2]
 8019964:	b29a      	uxth	r2, r3
 8019966:	687b      	ldr	r3, [r7, #4]
 8019968:	681b      	ldr	r3, [r3, #0]
 801996a:	490a      	ldr	r1, [pc, #40]	@ (8019994 <HAL_PCD_IRQHandler+0x284>)
 801996c:	400a      	ands	r2, r1
 801996e:	b291      	uxth	r1, r2
 8019970:	2244      	movs	r2, #68	@ 0x44
 8019972:	5299      	strh	r1, [r3, r2]

    return;
 8019974:	46c0      	nop			@ (mov r8, r8)
  }
}
 8019976:	46bd      	mov	sp, r7
 8019978:	b004      	add	sp, #16
 801997a:	bd80      	pop	{r7, pc}
 801997c:	fffffbff 	.word	0xfffffbff
 8019980:	ffffbfff 	.word	0xffffbfff
 8019984:	ffffdfff 	.word	0xffffdfff
 8019988:	ffffefff 	.word	0xffffefff
 801998c:	fffff7ff 	.word	0xfffff7ff
 8019990:	fffffdff 	.word	0xfffffdff
 8019994:	fffffeff 	.word	0xfffffeff

08019998 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8019998:	b580      	push	{r7, lr}
 801999a:	b082      	sub	sp, #8
 801999c:	af00      	add	r7, sp, #0
 801999e:	6078      	str	r0, [r7, #4]
 80199a0:	000a      	movs	r2, r1
 80199a2:	1cfb      	adds	r3, r7, #3
 80199a4:	701a      	strb	r2, [r3, #0]
  __HAL_LOCK(hpcd);
 80199a6:	687a      	ldr	r2, [r7, #4]
 80199a8:	23aa      	movs	r3, #170	@ 0xaa
 80199aa:	009b      	lsls	r3, r3, #2
 80199ac:	5cd3      	ldrb	r3, [r2, r3]
 80199ae:	2b01      	cmp	r3, #1
 80199b0:	d101      	bne.n	80199b6 <HAL_PCD_SetAddress+0x1e>
 80199b2:	2302      	movs	r3, #2
 80199b4:	e017      	b.n	80199e6 <HAL_PCD_SetAddress+0x4e>
 80199b6:	687a      	ldr	r2, [r7, #4]
 80199b8:	23aa      	movs	r3, #170	@ 0xaa
 80199ba:	009b      	lsls	r3, r3, #2
 80199bc:	2101      	movs	r1, #1
 80199be:	54d1      	strb	r1, [r2, r3]
  hpcd->USB_Address = address;
 80199c0:	687b      	ldr	r3, [r7, #4]
 80199c2:	1cfa      	adds	r2, r7, #3
 80199c4:	2124      	movs	r1, #36	@ 0x24
 80199c6:	7812      	ldrb	r2, [r2, #0]
 80199c8:	545a      	strb	r2, [r3, r1]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80199ca:	687b      	ldr	r3, [r7, #4]
 80199cc:	681a      	ldr	r2, [r3, #0]
 80199ce:	1cfb      	adds	r3, r7, #3
 80199d0:	781b      	ldrb	r3, [r3, #0]
 80199d2:	0019      	movs	r1, r3
 80199d4:	0010      	movs	r0, r2
 80199d6:	f007 fc79 	bl	80212cc <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80199da:	687a      	ldr	r2, [r7, #4]
 80199dc:	23aa      	movs	r3, #170	@ 0xaa
 80199de:	009b      	lsls	r3, r3, #2
 80199e0:	2100      	movs	r1, #0
 80199e2:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 80199e4:	2300      	movs	r3, #0
}
 80199e6:	0018      	movs	r0, r3
 80199e8:	46bd      	mov	sp, r7
 80199ea:	b002      	add	sp, #8
 80199ec:	bd80      	pop	{r7, pc}

080199ee <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80199ee:	b590      	push	{r4, r7, lr}
 80199f0:	b085      	sub	sp, #20
 80199f2:	af00      	add	r7, sp, #0
 80199f4:	6078      	str	r0, [r7, #4]
 80199f6:	000c      	movs	r4, r1
 80199f8:	0010      	movs	r0, r2
 80199fa:	0019      	movs	r1, r3
 80199fc:	1cfb      	adds	r3, r7, #3
 80199fe:	1c22      	adds	r2, r4, #0
 8019a00:	701a      	strb	r2, [r3, #0]
 8019a02:	003b      	movs	r3, r7
 8019a04:	1c02      	adds	r2, r0, #0
 8019a06:	801a      	strh	r2, [r3, #0]
 8019a08:	1cbb      	adds	r3, r7, #2
 8019a0a:	1c0a      	adds	r2, r1, #0
 8019a0c:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef  ret = HAL_OK;
 8019a0e:	230b      	movs	r3, #11
 8019a10:	18fb      	adds	r3, r7, r3
 8019a12:	2200      	movs	r2, #0
 8019a14:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8019a16:	1cfb      	adds	r3, r7, #3
 8019a18:	781b      	ldrb	r3, [r3, #0]
 8019a1a:	b25b      	sxtb	r3, r3
 8019a1c:	2b00      	cmp	r3, #0
 8019a1e:	da0f      	bge.n	8019a40 <HAL_PCD_EP_Open+0x52>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8019a20:	1cfb      	adds	r3, r7, #3
 8019a22:	781b      	ldrb	r3, [r3, #0]
 8019a24:	2207      	movs	r2, #7
 8019a26:	4013      	ands	r3, r2
 8019a28:	1c5a      	adds	r2, r3, #1
 8019a2a:	0013      	movs	r3, r2
 8019a2c:	009b      	lsls	r3, r3, #2
 8019a2e:	189b      	adds	r3, r3, r2
 8019a30:	00db      	lsls	r3, r3, #3
 8019a32:	687a      	ldr	r2, [r7, #4]
 8019a34:	18d3      	adds	r3, r2, r3
 8019a36:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8019a38:	68fb      	ldr	r3, [r7, #12]
 8019a3a:	2201      	movs	r2, #1
 8019a3c:	705a      	strb	r2, [r3, #1]
 8019a3e:	e00f      	b.n	8019a60 <HAL_PCD_EP_Open+0x72>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8019a40:	1cfb      	adds	r3, r7, #3
 8019a42:	781b      	ldrb	r3, [r3, #0]
 8019a44:	2207      	movs	r2, #7
 8019a46:	401a      	ands	r2, r3
 8019a48:	0013      	movs	r3, r2
 8019a4a:	009b      	lsls	r3, r3, #2
 8019a4c:	189b      	adds	r3, r3, r2
 8019a4e:	00db      	lsls	r3, r3, #3
 8019a50:	3369      	adds	r3, #105	@ 0x69
 8019a52:	33ff      	adds	r3, #255	@ 0xff
 8019a54:	687a      	ldr	r2, [r7, #4]
 8019a56:	18d3      	adds	r3, r2, r3
 8019a58:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8019a5a:	68fb      	ldr	r3, [r7, #12]
 8019a5c:	2200      	movs	r2, #0
 8019a5e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8019a60:	1cfb      	adds	r3, r7, #3
 8019a62:	781b      	ldrb	r3, [r3, #0]
 8019a64:	2207      	movs	r2, #7
 8019a66:	4013      	ands	r3, r2
 8019a68:	b2da      	uxtb	r2, r3
 8019a6a:	68fb      	ldr	r3, [r7, #12]
 8019a6c:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8019a6e:	003b      	movs	r3, r7
 8019a70:	881a      	ldrh	r2, [r3, #0]
 8019a72:	68fb      	ldr	r3, [r7, #12]
 8019a74:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8019a76:	68fb      	ldr	r3, [r7, #12]
 8019a78:	1cba      	adds	r2, r7, #2
 8019a7a:	7812      	ldrb	r2, [r2, #0]
 8019a7c:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8019a7e:	1cbb      	adds	r3, r7, #2
 8019a80:	781b      	ldrb	r3, [r3, #0]
 8019a82:	2b02      	cmp	r3, #2
 8019a84:	d102      	bne.n	8019a8c <HAL_PCD_EP_Open+0x9e>
  {
    ep->data_pid_start = 0U;
 8019a86:	68fb      	ldr	r3, [r7, #12]
 8019a88:	2200      	movs	r2, #0
 8019a8a:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8019a8c:	687a      	ldr	r2, [r7, #4]
 8019a8e:	23aa      	movs	r3, #170	@ 0xaa
 8019a90:	009b      	lsls	r3, r3, #2
 8019a92:	5cd3      	ldrb	r3, [r2, r3]
 8019a94:	2b01      	cmp	r3, #1
 8019a96:	d101      	bne.n	8019a9c <HAL_PCD_EP_Open+0xae>
 8019a98:	2302      	movs	r3, #2
 8019a9a:	e013      	b.n	8019ac4 <HAL_PCD_EP_Open+0xd6>
 8019a9c:	687a      	ldr	r2, [r7, #4]
 8019a9e:	23aa      	movs	r3, #170	@ 0xaa
 8019aa0:	009b      	lsls	r3, r3, #2
 8019aa2:	2101      	movs	r1, #1
 8019aa4:	54d1      	strb	r1, [r2, r3]
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8019aa6:	687b      	ldr	r3, [r7, #4]
 8019aa8:	681b      	ldr	r3, [r3, #0]
 8019aaa:	68fa      	ldr	r2, [r7, #12]
 8019aac:	0011      	movs	r1, r2
 8019aae:	0018      	movs	r0, r3
 8019ab0:	f005 fc70 	bl	801f394 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8019ab4:	687a      	ldr	r2, [r7, #4]
 8019ab6:	23aa      	movs	r3, #170	@ 0xaa
 8019ab8:	009b      	lsls	r3, r3, #2
 8019aba:	2100      	movs	r1, #0
 8019abc:	54d1      	strb	r1, [r2, r3]

  return ret;
 8019abe:	230b      	movs	r3, #11
 8019ac0:	18fb      	adds	r3, r7, r3
 8019ac2:	781b      	ldrb	r3, [r3, #0]
}
 8019ac4:	0018      	movs	r0, r3
 8019ac6:	46bd      	mov	sp, r7
 8019ac8:	b005      	add	sp, #20
 8019aca:	bd90      	pop	{r4, r7, pc}

08019acc <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8019acc:	b580      	push	{r7, lr}
 8019ace:	b084      	sub	sp, #16
 8019ad0:	af00      	add	r7, sp, #0
 8019ad2:	6078      	str	r0, [r7, #4]
 8019ad4:	000a      	movs	r2, r1
 8019ad6:	1cfb      	adds	r3, r7, #3
 8019ad8:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8019ada:	1cfb      	adds	r3, r7, #3
 8019adc:	781b      	ldrb	r3, [r3, #0]
 8019ade:	b25b      	sxtb	r3, r3
 8019ae0:	2b00      	cmp	r3, #0
 8019ae2:	da0f      	bge.n	8019b04 <HAL_PCD_EP_Close+0x38>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8019ae4:	1cfb      	adds	r3, r7, #3
 8019ae6:	781b      	ldrb	r3, [r3, #0]
 8019ae8:	2207      	movs	r2, #7
 8019aea:	4013      	ands	r3, r2
 8019aec:	1c5a      	adds	r2, r3, #1
 8019aee:	0013      	movs	r3, r2
 8019af0:	009b      	lsls	r3, r3, #2
 8019af2:	189b      	adds	r3, r3, r2
 8019af4:	00db      	lsls	r3, r3, #3
 8019af6:	687a      	ldr	r2, [r7, #4]
 8019af8:	18d3      	adds	r3, r2, r3
 8019afa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8019afc:	68fb      	ldr	r3, [r7, #12]
 8019afe:	2201      	movs	r2, #1
 8019b00:	705a      	strb	r2, [r3, #1]
 8019b02:	e00f      	b.n	8019b24 <HAL_PCD_EP_Close+0x58>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8019b04:	1cfb      	adds	r3, r7, #3
 8019b06:	781b      	ldrb	r3, [r3, #0]
 8019b08:	2207      	movs	r2, #7
 8019b0a:	401a      	ands	r2, r3
 8019b0c:	0013      	movs	r3, r2
 8019b0e:	009b      	lsls	r3, r3, #2
 8019b10:	189b      	adds	r3, r3, r2
 8019b12:	00db      	lsls	r3, r3, #3
 8019b14:	3369      	adds	r3, #105	@ 0x69
 8019b16:	33ff      	adds	r3, #255	@ 0xff
 8019b18:	687a      	ldr	r2, [r7, #4]
 8019b1a:	18d3      	adds	r3, r2, r3
 8019b1c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8019b1e:	68fb      	ldr	r3, [r7, #12]
 8019b20:	2200      	movs	r2, #0
 8019b22:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8019b24:	1cfb      	adds	r3, r7, #3
 8019b26:	781b      	ldrb	r3, [r3, #0]
 8019b28:	2207      	movs	r2, #7
 8019b2a:	4013      	ands	r3, r2
 8019b2c:	b2da      	uxtb	r2, r3
 8019b2e:	68fb      	ldr	r3, [r7, #12]
 8019b30:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8019b32:	687a      	ldr	r2, [r7, #4]
 8019b34:	23aa      	movs	r3, #170	@ 0xaa
 8019b36:	009b      	lsls	r3, r3, #2
 8019b38:	5cd3      	ldrb	r3, [r2, r3]
 8019b3a:	2b01      	cmp	r3, #1
 8019b3c:	d101      	bne.n	8019b42 <HAL_PCD_EP_Close+0x76>
 8019b3e:	2302      	movs	r3, #2
 8019b40:	e011      	b.n	8019b66 <HAL_PCD_EP_Close+0x9a>
 8019b42:	687a      	ldr	r2, [r7, #4]
 8019b44:	23aa      	movs	r3, #170	@ 0xaa
 8019b46:	009b      	lsls	r3, r3, #2
 8019b48:	2101      	movs	r1, #1
 8019b4a:	54d1      	strb	r1, [r2, r3]
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8019b4c:	687b      	ldr	r3, [r7, #4]
 8019b4e:	681b      	ldr	r3, [r3, #0]
 8019b50:	68fa      	ldr	r2, [r7, #12]
 8019b52:	0011      	movs	r1, r2
 8019b54:	0018      	movs	r0, r3
 8019b56:	f005 ffbf 	bl	801fad8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8019b5a:	687a      	ldr	r2, [r7, #4]
 8019b5c:	23aa      	movs	r3, #170	@ 0xaa
 8019b5e:	009b      	lsls	r3, r3, #2
 8019b60:	2100      	movs	r1, #0
 8019b62:	54d1      	strb	r1, [r2, r3]
  return HAL_OK;
 8019b64:	2300      	movs	r3, #0
}
 8019b66:	0018      	movs	r0, r3
 8019b68:	46bd      	mov	sp, r7
 8019b6a:	b004      	add	sp, #16
 8019b6c:	bd80      	pop	{r7, pc}

08019b6e <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8019b6e:	b580      	push	{r7, lr}
 8019b70:	b086      	sub	sp, #24
 8019b72:	af00      	add	r7, sp, #0
 8019b74:	60f8      	str	r0, [r7, #12]
 8019b76:	607a      	str	r2, [r7, #4]
 8019b78:	603b      	str	r3, [r7, #0]
 8019b7a:	200b      	movs	r0, #11
 8019b7c:	183b      	adds	r3, r7, r0
 8019b7e:	1c0a      	adds	r2, r1, #0
 8019b80:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8019b82:	0001      	movs	r1, r0
 8019b84:	187b      	adds	r3, r7, r1
 8019b86:	781b      	ldrb	r3, [r3, #0]
 8019b88:	2207      	movs	r2, #7
 8019b8a:	401a      	ands	r2, r3
 8019b8c:	0013      	movs	r3, r2
 8019b8e:	009b      	lsls	r3, r3, #2
 8019b90:	189b      	adds	r3, r3, r2
 8019b92:	00db      	lsls	r3, r3, #3
 8019b94:	3369      	adds	r3, #105	@ 0x69
 8019b96:	33ff      	adds	r3, #255	@ 0xff
 8019b98:	68fa      	ldr	r2, [r7, #12]
 8019b9a:	18d3      	adds	r3, r2, r3
 8019b9c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8019b9e:	697b      	ldr	r3, [r7, #20]
 8019ba0:	687a      	ldr	r2, [r7, #4]
 8019ba2:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8019ba4:	697b      	ldr	r3, [r7, #20]
 8019ba6:	683a      	ldr	r2, [r7, #0]
 8019ba8:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8019baa:	697b      	ldr	r3, [r7, #20]
 8019bac:	2200      	movs	r2, #0
 8019bae:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8019bb0:	697b      	ldr	r3, [r7, #20]
 8019bb2:	2200      	movs	r2, #0
 8019bb4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8019bb6:	187b      	adds	r3, r7, r1
 8019bb8:	781b      	ldrb	r3, [r3, #0]
 8019bba:	2207      	movs	r2, #7
 8019bbc:	4013      	ands	r3, r2
 8019bbe:	b2da      	uxtb	r2, r3
 8019bc0:	697b      	ldr	r3, [r7, #20]
 8019bc2:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8019bc4:	68fb      	ldr	r3, [r7, #12]
 8019bc6:	681b      	ldr	r3, [r3, #0]
 8019bc8:	697a      	ldr	r2, [r7, #20]
 8019bca:	0011      	movs	r1, r2
 8019bcc:	0018      	movs	r0, r3
 8019bce:	f006 f943 	bl	801fe58 <USB_EPStartXfer>

  return HAL_OK;
 8019bd2:	2300      	movs	r3, #0
}
 8019bd4:	0018      	movs	r0, r3
 8019bd6:	46bd      	mov	sp, r7
 8019bd8:	b006      	add	sp, #24
 8019bda:	bd80      	pop	{r7, pc}

08019bdc <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8019bdc:	b580      	push	{r7, lr}
 8019bde:	b082      	sub	sp, #8
 8019be0:	af00      	add	r7, sp, #0
 8019be2:	6078      	str	r0, [r7, #4]
 8019be4:	000a      	movs	r2, r1
 8019be6:	1cfb      	adds	r3, r7, #3
 8019be8:	701a      	strb	r2, [r3, #0]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8019bea:	1cfb      	adds	r3, r7, #3
 8019bec:	781b      	ldrb	r3, [r3, #0]
 8019bee:	2207      	movs	r2, #7
 8019bf0:	401a      	ands	r2, r3
 8019bf2:	6878      	ldr	r0, [r7, #4]
 8019bf4:	23c2      	movs	r3, #194	@ 0xc2
 8019bf6:	0059      	lsls	r1, r3, #1
 8019bf8:	0013      	movs	r3, r2
 8019bfa:	009b      	lsls	r3, r3, #2
 8019bfc:	189b      	adds	r3, r3, r2
 8019bfe:	00db      	lsls	r3, r3, #3
 8019c00:	18c3      	adds	r3, r0, r3
 8019c02:	185b      	adds	r3, r3, r1
 8019c04:	681b      	ldr	r3, [r3, #0]
}
 8019c06:	0018      	movs	r0, r3
 8019c08:	46bd      	mov	sp, r7
 8019c0a:	b002      	add	sp, #8
 8019c0c:	bd80      	pop	{r7, pc}

08019c0e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8019c0e:	b580      	push	{r7, lr}
 8019c10:	b086      	sub	sp, #24
 8019c12:	af00      	add	r7, sp, #0
 8019c14:	60f8      	str	r0, [r7, #12]
 8019c16:	607a      	str	r2, [r7, #4]
 8019c18:	603b      	str	r3, [r7, #0]
 8019c1a:	200b      	movs	r0, #11
 8019c1c:	183b      	adds	r3, r7, r0
 8019c1e:	1c0a      	adds	r2, r1, #0
 8019c20:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8019c22:	183b      	adds	r3, r7, r0
 8019c24:	781b      	ldrb	r3, [r3, #0]
 8019c26:	2207      	movs	r2, #7
 8019c28:	4013      	ands	r3, r2
 8019c2a:	1c5a      	adds	r2, r3, #1
 8019c2c:	0013      	movs	r3, r2
 8019c2e:	009b      	lsls	r3, r3, #2
 8019c30:	189b      	adds	r3, r3, r2
 8019c32:	00db      	lsls	r3, r3, #3
 8019c34:	68fa      	ldr	r2, [r7, #12]
 8019c36:	18d3      	adds	r3, r2, r3
 8019c38:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8019c3a:	697b      	ldr	r3, [r7, #20]
 8019c3c:	687a      	ldr	r2, [r7, #4]
 8019c3e:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8019c40:	697b      	ldr	r3, [r7, #20]
 8019c42:	683a      	ldr	r2, [r7, #0]
 8019c44:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8019c46:	697b      	ldr	r3, [r7, #20]
 8019c48:	2224      	movs	r2, #36	@ 0x24
 8019c4a:	2101      	movs	r1, #1
 8019c4c:	5499      	strb	r1, [r3, r2]
  ep->xfer_len_db = len;
 8019c4e:	697b      	ldr	r3, [r7, #20]
 8019c50:	683a      	ldr	r2, [r7, #0]
 8019c52:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8019c54:	697b      	ldr	r3, [r7, #20]
 8019c56:	2200      	movs	r2, #0
 8019c58:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8019c5a:	697b      	ldr	r3, [r7, #20]
 8019c5c:	2201      	movs	r2, #1
 8019c5e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8019c60:	183b      	adds	r3, r7, r0
 8019c62:	781b      	ldrb	r3, [r3, #0]
 8019c64:	2207      	movs	r2, #7
 8019c66:	4013      	ands	r3, r2
 8019c68:	b2da      	uxtb	r2, r3
 8019c6a:	697b      	ldr	r3, [r7, #20]
 8019c6c:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8019c6e:	68fb      	ldr	r3, [r7, #12]
 8019c70:	681b      	ldr	r3, [r3, #0]
 8019c72:	697a      	ldr	r2, [r7, #20]
 8019c74:	0011      	movs	r1, r2
 8019c76:	0018      	movs	r0, r3
 8019c78:	f006 f8ee 	bl	801fe58 <USB_EPStartXfer>

  return HAL_OK;
 8019c7c:	2300      	movs	r3, #0
}
 8019c7e:	0018      	movs	r0, r3
 8019c80:	46bd      	mov	sp, r7
 8019c82:	b006      	add	sp, #24
 8019c84:	bd80      	pop	{r7, pc}

08019c86 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8019c86:	b580      	push	{r7, lr}
 8019c88:	b084      	sub	sp, #16
 8019c8a:	af00      	add	r7, sp, #0
 8019c8c:	6078      	str	r0, [r7, #4]
 8019c8e:	000a      	movs	r2, r1
 8019c90:	1cfb      	adds	r3, r7, #3
 8019c92:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8019c94:	1cfb      	adds	r3, r7, #3
 8019c96:	781b      	ldrb	r3, [r3, #0]
 8019c98:	2207      	movs	r2, #7
 8019c9a:	401a      	ands	r2, r3
 8019c9c:	687b      	ldr	r3, [r7, #4]
 8019c9e:	685b      	ldr	r3, [r3, #4]
 8019ca0:	429a      	cmp	r2, r3
 8019ca2:	d901      	bls.n	8019ca8 <HAL_PCD_EP_SetStall+0x22>
  {
    return HAL_ERROR;
 8019ca4:	2301      	movs	r3, #1
 8019ca6:	e046      	b.n	8019d36 <HAL_PCD_EP_SetStall+0xb0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8019ca8:	1cfb      	adds	r3, r7, #3
 8019caa:	781b      	ldrb	r3, [r3, #0]
 8019cac:	b25b      	sxtb	r3, r3
 8019cae:	2b00      	cmp	r3, #0
 8019cb0:	da0f      	bge.n	8019cd2 <HAL_PCD_EP_SetStall+0x4c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8019cb2:	1cfb      	adds	r3, r7, #3
 8019cb4:	781b      	ldrb	r3, [r3, #0]
 8019cb6:	2207      	movs	r2, #7
 8019cb8:	4013      	ands	r3, r2
 8019cba:	1c5a      	adds	r2, r3, #1
 8019cbc:	0013      	movs	r3, r2
 8019cbe:	009b      	lsls	r3, r3, #2
 8019cc0:	189b      	adds	r3, r3, r2
 8019cc2:	00db      	lsls	r3, r3, #3
 8019cc4:	687a      	ldr	r2, [r7, #4]
 8019cc6:	18d3      	adds	r3, r2, r3
 8019cc8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8019cca:	68fb      	ldr	r3, [r7, #12]
 8019ccc:	2201      	movs	r2, #1
 8019cce:	705a      	strb	r2, [r3, #1]
 8019cd0:	e00d      	b.n	8019cee <HAL_PCD_EP_SetStall+0x68>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8019cd2:	1cfb      	adds	r3, r7, #3
 8019cd4:	781a      	ldrb	r2, [r3, #0]
 8019cd6:	0013      	movs	r3, r2
 8019cd8:	009b      	lsls	r3, r3, #2
 8019cda:	189b      	adds	r3, r3, r2
 8019cdc:	00db      	lsls	r3, r3, #3
 8019cde:	3369      	adds	r3, #105	@ 0x69
 8019ce0:	33ff      	adds	r3, #255	@ 0xff
 8019ce2:	687a      	ldr	r2, [r7, #4]
 8019ce4:	18d3      	adds	r3, r2, r3
 8019ce6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8019ce8:	68fb      	ldr	r3, [r7, #12]
 8019cea:	2200      	movs	r2, #0
 8019cec:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8019cee:	68fb      	ldr	r3, [r7, #12]
 8019cf0:	2201      	movs	r2, #1
 8019cf2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8019cf4:	1cfb      	adds	r3, r7, #3
 8019cf6:	781b      	ldrb	r3, [r3, #0]
 8019cf8:	2207      	movs	r2, #7
 8019cfa:	4013      	ands	r3, r2
 8019cfc:	b2da      	uxtb	r2, r3
 8019cfe:	68fb      	ldr	r3, [r7, #12]
 8019d00:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8019d02:	687a      	ldr	r2, [r7, #4]
 8019d04:	23aa      	movs	r3, #170	@ 0xaa
 8019d06:	009b      	lsls	r3, r3, #2
 8019d08:	5cd3      	ldrb	r3, [r2, r3]
 8019d0a:	2b01      	cmp	r3, #1
 8019d0c:	d101      	bne.n	8019d12 <HAL_PCD_EP_SetStall+0x8c>
 8019d0e:	2302      	movs	r3, #2
 8019d10:	e011      	b.n	8019d36 <HAL_PCD_EP_SetStall+0xb0>
 8019d12:	687a      	ldr	r2, [r7, #4]
 8019d14:	23aa      	movs	r3, #170	@ 0xaa
 8019d16:	009b      	lsls	r3, r3, #2
 8019d18:	2101      	movs	r1, #1
 8019d1a:	54d1      	strb	r1, [r2, r3]

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8019d1c:	687b      	ldr	r3, [r7, #4]
 8019d1e:	681b      	ldr	r3, [r3, #0]
 8019d20:	68fa      	ldr	r2, [r7, #12]
 8019d22:	0011      	movs	r1, r2
 8019d24:	0018      	movs	r0, r3
 8019d26:	f007 f9cf 	bl	80210c8 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8019d2a:	687a      	ldr	r2, [r7, #4]
 8019d2c:	23aa      	movs	r3, #170	@ 0xaa
 8019d2e:	009b      	lsls	r3, r3, #2
 8019d30:	2100      	movs	r1, #0
 8019d32:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8019d34:	2300      	movs	r3, #0
}
 8019d36:	0018      	movs	r0, r3
 8019d38:	46bd      	mov	sp, r7
 8019d3a:	b004      	add	sp, #16
 8019d3c:	bd80      	pop	{r7, pc}

08019d3e <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8019d3e:	b580      	push	{r7, lr}
 8019d40:	b084      	sub	sp, #16
 8019d42:	af00      	add	r7, sp, #0
 8019d44:	6078      	str	r0, [r7, #4]
 8019d46:	000a      	movs	r2, r1
 8019d48:	1cfb      	adds	r3, r7, #3
 8019d4a:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8019d4c:	1cfb      	adds	r3, r7, #3
 8019d4e:	781b      	ldrb	r3, [r3, #0]
 8019d50:	220f      	movs	r2, #15
 8019d52:	401a      	ands	r2, r3
 8019d54:	687b      	ldr	r3, [r7, #4]
 8019d56:	685b      	ldr	r3, [r3, #4]
 8019d58:	429a      	cmp	r2, r3
 8019d5a:	d901      	bls.n	8019d60 <HAL_PCD_EP_ClrStall+0x22>
  {
    return HAL_ERROR;
 8019d5c:	2301      	movs	r3, #1
 8019d5e:	e048      	b.n	8019df2 <HAL_PCD_EP_ClrStall+0xb4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8019d60:	1cfb      	adds	r3, r7, #3
 8019d62:	781b      	ldrb	r3, [r3, #0]
 8019d64:	b25b      	sxtb	r3, r3
 8019d66:	2b00      	cmp	r3, #0
 8019d68:	da0f      	bge.n	8019d8a <HAL_PCD_EP_ClrStall+0x4c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8019d6a:	1cfb      	adds	r3, r7, #3
 8019d6c:	781b      	ldrb	r3, [r3, #0]
 8019d6e:	2207      	movs	r2, #7
 8019d70:	4013      	ands	r3, r2
 8019d72:	1c5a      	adds	r2, r3, #1
 8019d74:	0013      	movs	r3, r2
 8019d76:	009b      	lsls	r3, r3, #2
 8019d78:	189b      	adds	r3, r3, r2
 8019d7a:	00db      	lsls	r3, r3, #3
 8019d7c:	687a      	ldr	r2, [r7, #4]
 8019d7e:	18d3      	adds	r3, r2, r3
 8019d80:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8019d82:	68fb      	ldr	r3, [r7, #12]
 8019d84:	2201      	movs	r2, #1
 8019d86:	705a      	strb	r2, [r3, #1]
 8019d88:	e00f      	b.n	8019daa <HAL_PCD_EP_ClrStall+0x6c>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8019d8a:	1cfb      	adds	r3, r7, #3
 8019d8c:	781b      	ldrb	r3, [r3, #0]
 8019d8e:	2207      	movs	r2, #7
 8019d90:	401a      	ands	r2, r3
 8019d92:	0013      	movs	r3, r2
 8019d94:	009b      	lsls	r3, r3, #2
 8019d96:	189b      	adds	r3, r3, r2
 8019d98:	00db      	lsls	r3, r3, #3
 8019d9a:	3369      	adds	r3, #105	@ 0x69
 8019d9c:	33ff      	adds	r3, #255	@ 0xff
 8019d9e:	687a      	ldr	r2, [r7, #4]
 8019da0:	18d3      	adds	r3, r2, r3
 8019da2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8019da4:	68fb      	ldr	r3, [r7, #12]
 8019da6:	2200      	movs	r2, #0
 8019da8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8019daa:	68fb      	ldr	r3, [r7, #12]
 8019dac:	2200      	movs	r2, #0
 8019dae:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8019db0:	1cfb      	adds	r3, r7, #3
 8019db2:	781b      	ldrb	r3, [r3, #0]
 8019db4:	2207      	movs	r2, #7
 8019db6:	4013      	ands	r3, r2
 8019db8:	b2da      	uxtb	r2, r3
 8019dba:	68fb      	ldr	r3, [r7, #12]
 8019dbc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8019dbe:	687a      	ldr	r2, [r7, #4]
 8019dc0:	23aa      	movs	r3, #170	@ 0xaa
 8019dc2:	009b      	lsls	r3, r3, #2
 8019dc4:	5cd3      	ldrb	r3, [r2, r3]
 8019dc6:	2b01      	cmp	r3, #1
 8019dc8:	d101      	bne.n	8019dce <HAL_PCD_EP_ClrStall+0x90>
 8019dca:	2302      	movs	r3, #2
 8019dcc:	e011      	b.n	8019df2 <HAL_PCD_EP_ClrStall+0xb4>
 8019dce:	687a      	ldr	r2, [r7, #4]
 8019dd0:	23aa      	movs	r3, #170	@ 0xaa
 8019dd2:	009b      	lsls	r3, r3, #2
 8019dd4:	2101      	movs	r1, #1
 8019dd6:	54d1      	strb	r1, [r2, r3]
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8019dd8:	687b      	ldr	r3, [r7, #4]
 8019dda:	681b      	ldr	r3, [r3, #0]
 8019ddc:	68fa      	ldr	r2, [r7, #12]
 8019dde:	0011      	movs	r1, r2
 8019de0:	0018      	movs	r0, r3
 8019de2:	f007 f9c1 	bl	8021168 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8019de6:	687a      	ldr	r2, [r7, #4]
 8019de8:	23aa      	movs	r3, #170	@ 0xaa
 8019dea:	009b      	lsls	r3, r3, #2
 8019dec:	2100      	movs	r1, #0
 8019dee:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8019df0:	2300      	movs	r3, #0
}
 8019df2:	0018      	movs	r0, r3
 8019df4:	46bd      	mov	sp, r7
 8019df6:	b004      	add	sp, #16
 8019df8:	bd80      	pop	{r7, pc}
	...

08019dfc <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8019dfc:	b5b0      	push	{r4, r5, r7, lr}
 8019dfe:	b096      	sub	sp, #88	@ 0x58
 8019e00:	af00      	add	r7, sp, #0
 8019e02:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8019e04:	f000 fbec 	bl	801a5e0 <PCD_EP_ISR_Handler+0x7e4>
  {
    wIstr = hpcd->Instance->ISTR;
 8019e08:	687b      	ldr	r3, [r7, #4]
 8019e0a:	681a      	ldr	r2, [r3, #0]
 8019e0c:	204e      	movs	r0, #78	@ 0x4e
 8019e0e:	183b      	adds	r3, r7, r0
 8019e10:	2144      	movs	r1, #68	@ 0x44
 8019e12:	5a52      	ldrh	r2, [r2, r1]
 8019e14:	801a      	strh	r2, [r3, #0]

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8019e16:	183b      	adds	r3, r7, r0
 8019e18:	881b      	ldrh	r3, [r3, #0]
 8019e1a:	b2da      	uxtb	r2, r3
 8019e1c:	244d      	movs	r4, #77	@ 0x4d
 8019e1e:	193b      	adds	r3, r7, r4
 8019e20:	210f      	movs	r1, #15
 8019e22:	400a      	ands	r2, r1
 8019e24:	701a      	strb	r2, [r3, #0]

    if (epindex == 0U)
 8019e26:	193b      	adds	r3, r7, r4
 8019e28:	781b      	ldrb	r3, [r3, #0]
 8019e2a:	2b00      	cmp	r3, #0
 8019e2c:	d000      	beq.n	8019e30 <PCD_EP_ISR_Handler+0x34>
 8019e2e:	e18f      	b.n	801a150 <PCD_EP_ISR_Handler+0x354>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8019e30:	183b      	adds	r3, r7, r0
 8019e32:	881b      	ldrh	r3, [r3, #0]
 8019e34:	2210      	movs	r2, #16
 8019e36:	4013      	ands	r3, r2
 8019e38:	d155      	bne.n	8019ee6 <PCD_EP_ISR_Handler+0xea>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8019e3a:	687b      	ldr	r3, [r7, #4]
 8019e3c:	681b      	ldr	r3, [r3, #0]
 8019e3e:	881b      	ldrh	r3, [r3, #0]
 8019e40:	b29a      	uxth	r2, r3
 8019e42:	200e      	movs	r0, #14
 8019e44:	183b      	adds	r3, r7, r0
 8019e46:	49bb      	ldr	r1, [pc, #748]	@ (801a134 <PCD_EP_ISR_Handler+0x338>)
 8019e48:	400a      	ands	r2, r1
 8019e4a:	801a      	strh	r2, [r3, #0]
 8019e4c:	687b      	ldr	r3, [r7, #4]
 8019e4e:	681b      	ldr	r3, [r3, #0]
 8019e50:	183a      	adds	r2, r7, r0
 8019e52:	8812      	ldrh	r2, [r2, #0]
 8019e54:	49b8      	ldr	r1, [pc, #736]	@ (801a138 <PCD_EP_ISR_Handler+0x33c>)
 8019e56:	430a      	orrs	r2, r1
 8019e58:	b292      	uxth	r2, r2
 8019e5a:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->IN_ep[0];
 8019e5c:	687b      	ldr	r3, [r7, #4]
 8019e5e:	3328      	adds	r3, #40	@ 0x28
 8019e60:	657b      	str	r3, [r7, #84]	@ 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8019e62:	687b      	ldr	r3, [r7, #4]
 8019e64:	681b      	ldr	r3, [r3, #0]
 8019e66:	2250      	movs	r2, #80	@ 0x50
 8019e68:	5a9b      	ldrh	r3, [r3, r2]
 8019e6a:	b29b      	uxth	r3, r3
 8019e6c:	001a      	movs	r2, r3
 8019e6e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019e70:	781b      	ldrb	r3, [r3, #0]
 8019e72:	00db      	lsls	r3, r3, #3
 8019e74:	18d2      	adds	r2, r2, r3
 8019e76:	687b      	ldr	r3, [r7, #4]
 8019e78:	681b      	ldr	r3, [r3, #0]
 8019e7a:	18d3      	adds	r3, r2, r3
 8019e7c:	4aaf      	ldr	r2, [pc, #700]	@ (801a13c <PCD_EP_ISR_Handler+0x340>)
 8019e7e:	4694      	mov	ip, r2
 8019e80:	4463      	add	r3, ip
 8019e82:	881b      	ldrh	r3, [r3, #0]
 8019e84:	059b      	lsls	r3, r3, #22
 8019e86:	0d9a      	lsrs	r2, r3, #22
 8019e88:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019e8a:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8019e8c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019e8e:	695a      	ldr	r2, [r3, #20]
 8019e90:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019e92:	69db      	ldr	r3, [r3, #28]
 8019e94:	18d2      	adds	r2, r2, r3
 8019e96:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019e98:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8019e9a:	687b      	ldr	r3, [r7, #4]
 8019e9c:	2100      	movs	r1, #0
 8019e9e:	0018      	movs	r0, r3
 8019ea0:	f009 fade 	bl	8023460 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8019ea4:	687b      	ldr	r3, [r7, #4]
 8019ea6:	2224      	movs	r2, #36	@ 0x24
 8019ea8:	5c9b      	ldrb	r3, [r3, r2]
 8019eaa:	b2db      	uxtb	r3, r3
 8019eac:	2b00      	cmp	r3, #0
 8019eae:	d101      	bne.n	8019eb4 <PCD_EP_ISR_Handler+0xb8>
 8019eb0:	f000 fb96 	bl	801a5e0 <PCD_EP_ISR_Handler+0x7e4>
 8019eb4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019eb6:	699b      	ldr	r3, [r3, #24]
 8019eb8:	2b00      	cmp	r3, #0
 8019eba:	d001      	beq.n	8019ec0 <PCD_EP_ISR_Handler+0xc4>
 8019ebc:	f000 fb90 	bl	801a5e0 <PCD_EP_ISR_Handler+0x7e4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8019ec0:	687b      	ldr	r3, [r7, #4]
 8019ec2:	2224      	movs	r2, #36	@ 0x24
 8019ec4:	5c9b      	ldrb	r3, [r3, r2]
 8019ec6:	b2db      	uxtb	r3, r3
 8019ec8:	2280      	movs	r2, #128	@ 0x80
 8019eca:	4252      	negs	r2, r2
 8019ecc:	4313      	orrs	r3, r2
 8019ece:	b2da      	uxtb	r2, r3
 8019ed0:	687b      	ldr	r3, [r7, #4]
 8019ed2:	681b      	ldr	r3, [r3, #0]
 8019ed4:	0011      	movs	r1, r2
 8019ed6:	224c      	movs	r2, #76	@ 0x4c
 8019ed8:	5299      	strh	r1, [r3, r2]
          hpcd->USB_Address = 0U;
 8019eda:	687b      	ldr	r3, [r7, #4]
 8019edc:	2224      	movs	r2, #36	@ 0x24
 8019ede:	2100      	movs	r1, #0
 8019ee0:	5499      	strb	r1, [r3, r2]
 8019ee2:	f000 fb7d 	bl	801a5e0 <PCD_EP_ISR_Handler+0x7e4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8019ee6:	687b      	ldr	r3, [r7, #4]
 8019ee8:	3369      	adds	r3, #105	@ 0x69
 8019eea:	33ff      	adds	r3, #255	@ 0xff
 8019eec:	657b      	str	r3, [r7, #84]	@ 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8019eee:	687b      	ldr	r3, [r7, #4]
 8019ef0:	681a      	ldr	r2, [r3, #0]
 8019ef2:	214a      	movs	r1, #74	@ 0x4a
 8019ef4:	187b      	adds	r3, r7, r1
 8019ef6:	8812      	ldrh	r2, [r2, #0]
 8019ef8:	801a      	strh	r2, [r3, #0]

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8019efa:	187b      	adds	r3, r7, r1
 8019efc:	881a      	ldrh	r2, [r3, #0]
 8019efe:	2380      	movs	r3, #128	@ 0x80
 8019f00:	011b      	lsls	r3, r3, #4
 8019f02:	4013      	ands	r3, r2
 8019f04:	d037      	beq.n	8019f76 <PCD_EP_ISR_Handler+0x17a>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8019f06:	687b      	ldr	r3, [r7, #4]
 8019f08:	681b      	ldr	r3, [r3, #0]
 8019f0a:	2250      	movs	r2, #80	@ 0x50
 8019f0c:	5a9b      	ldrh	r3, [r3, r2]
 8019f0e:	b29b      	uxth	r3, r3
 8019f10:	001a      	movs	r2, r3
 8019f12:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019f14:	781b      	ldrb	r3, [r3, #0]
 8019f16:	00db      	lsls	r3, r3, #3
 8019f18:	18d2      	adds	r2, r2, r3
 8019f1a:	687b      	ldr	r3, [r7, #4]
 8019f1c:	681b      	ldr	r3, [r3, #0]
 8019f1e:	18d3      	adds	r3, r2, r3
 8019f20:	4a87      	ldr	r2, [pc, #540]	@ (801a140 <PCD_EP_ISR_Handler+0x344>)
 8019f22:	4694      	mov	ip, r2
 8019f24:	4463      	add	r3, ip
 8019f26:	881b      	ldrh	r3, [r3, #0]
 8019f28:	059b      	lsls	r3, r3, #22
 8019f2a:	0d9a      	lsrs	r2, r3, #22
 8019f2c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019f2e:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8019f30:	687b      	ldr	r3, [r7, #4]
 8019f32:	6818      	ldr	r0, [r3, #0]
 8019f34:	687b      	ldr	r3, [r7, #4]
 8019f36:	22ac      	movs	r2, #172	@ 0xac
 8019f38:	0092      	lsls	r2, r2, #2
 8019f3a:	1899      	adds	r1, r3, r2
 8019f3c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019f3e:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8019f40:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019f42:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8019f44:	b29b      	uxth	r3, r3
 8019f46:	f007 fa43 	bl	80213d0 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8019f4a:	687b      	ldr	r3, [r7, #4]
 8019f4c:	681b      	ldr	r3, [r3, #0]
 8019f4e:	881b      	ldrh	r3, [r3, #0]
 8019f50:	b29a      	uxth	r2, r3
 8019f52:	2010      	movs	r0, #16
 8019f54:	183b      	adds	r3, r7, r0
 8019f56:	497b      	ldr	r1, [pc, #492]	@ (801a144 <PCD_EP_ISR_Handler+0x348>)
 8019f58:	400a      	ands	r2, r1
 8019f5a:	801a      	strh	r2, [r3, #0]
 8019f5c:	687b      	ldr	r3, [r7, #4]
 8019f5e:	681b      	ldr	r3, [r3, #0]
 8019f60:	183a      	adds	r2, r7, r0
 8019f62:	8812      	ldrh	r2, [r2, #0]
 8019f64:	2180      	movs	r1, #128	@ 0x80
 8019f66:	430a      	orrs	r2, r1
 8019f68:	b292      	uxth	r2, r2
 8019f6a:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8019f6c:	687b      	ldr	r3, [r7, #4]
 8019f6e:	0018      	movs	r0, r3
 8019f70:	f009 fa40 	bl	80233f4 <HAL_PCD_SetupStageCallback>
 8019f74:	e334      	b.n	801a5e0 <PCD_EP_ISR_Handler+0x7e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8019f76:	234a      	movs	r3, #74	@ 0x4a
 8019f78:	18fb      	adds	r3, r7, r3
 8019f7a:	2200      	movs	r2, #0
 8019f7c:	5e9b      	ldrsh	r3, [r3, r2]
 8019f7e:	2b00      	cmp	r3, #0
 8019f80:	db00      	blt.n	8019f84 <PCD_EP_ISR_Handler+0x188>
 8019f82:	e32d      	b.n	801a5e0 <PCD_EP_ISR_Handler+0x7e4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8019f84:	687b      	ldr	r3, [r7, #4]
 8019f86:	681b      	ldr	r3, [r3, #0]
 8019f88:	881b      	ldrh	r3, [r3, #0]
 8019f8a:	b29a      	uxth	r2, r3
 8019f8c:	201e      	movs	r0, #30
 8019f8e:	183b      	adds	r3, r7, r0
 8019f90:	496c      	ldr	r1, [pc, #432]	@ (801a144 <PCD_EP_ISR_Handler+0x348>)
 8019f92:	400a      	ands	r2, r1
 8019f94:	801a      	strh	r2, [r3, #0]
 8019f96:	687b      	ldr	r3, [r7, #4]
 8019f98:	681b      	ldr	r3, [r3, #0]
 8019f9a:	183a      	adds	r2, r7, r0
 8019f9c:	8812      	ldrh	r2, [r2, #0]
 8019f9e:	2180      	movs	r1, #128	@ 0x80
 8019fa0:	430a      	orrs	r2, r1
 8019fa2:	b292      	uxth	r2, r2
 8019fa4:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8019fa6:	687b      	ldr	r3, [r7, #4]
 8019fa8:	681b      	ldr	r3, [r3, #0]
 8019faa:	2250      	movs	r2, #80	@ 0x50
 8019fac:	5a9b      	ldrh	r3, [r3, r2]
 8019fae:	b29b      	uxth	r3, r3
 8019fb0:	001a      	movs	r2, r3
 8019fb2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019fb4:	781b      	ldrb	r3, [r3, #0]
 8019fb6:	00db      	lsls	r3, r3, #3
 8019fb8:	18d2      	adds	r2, r2, r3
 8019fba:	687b      	ldr	r3, [r7, #4]
 8019fbc:	681b      	ldr	r3, [r3, #0]
 8019fbe:	18d3      	adds	r3, r2, r3
 8019fc0:	4a5f      	ldr	r2, [pc, #380]	@ (801a140 <PCD_EP_ISR_Handler+0x344>)
 8019fc2:	4694      	mov	ip, r2
 8019fc4:	4463      	add	r3, ip
 8019fc6:	881b      	ldrh	r3, [r3, #0]
 8019fc8:	059b      	lsls	r3, r3, #22
 8019fca:	0d9a      	lsrs	r2, r3, #22
 8019fcc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019fce:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8019fd0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019fd2:	69db      	ldr	r3, [r3, #28]
 8019fd4:	2b00      	cmp	r3, #0
 8019fd6:	d01a      	beq.n	801a00e <PCD_EP_ISR_Handler+0x212>
 8019fd8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019fda:	695b      	ldr	r3, [r3, #20]
 8019fdc:	2b00      	cmp	r3, #0
 8019fde:	d016      	beq.n	801a00e <PCD_EP_ISR_Handler+0x212>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8019fe0:	687b      	ldr	r3, [r7, #4]
 8019fe2:	6818      	ldr	r0, [r3, #0]
 8019fe4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019fe6:	6959      	ldr	r1, [r3, #20]
 8019fe8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019fea:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8019fec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019fee:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8019ff0:	b29b      	uxth	r3, r3
 8019ff2:	f007 f9ed 	bl	80213d0 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8019ff6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019ff8:	695a      	ldr	r2, [r3, #20]
 8019ffa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019ffc:	69db      	ldr	r3, [r3, #28]
 8019ffe:	18d2      	adds	r2, r2, r3
 801a000:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a002:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 801a004:	687b      	ldr	r3, [r7, #4]
 801a006:	2100      	movs	r1, #0
 801a008:	0018      	movs	r0, r3
 801a00a:	f009 fa08 	bl	802341e <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 801a00e:	687b      	ldr	r3, [r7, #4]
 801a010:	681a      	ldr	r2, [r3, #0]
 801a012:	214a      	movs	r1, #74	@ 0x4a
 801a014:	187b      	adds	r3, r7, r1
 801a016:	8812      	ldrh	r2, [r2, #0]
 801a018:	801a      	strh	r2, [r3, #0]

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 801a01a:	187b      	adds	r3, r7, r1
 801a01c:	881a      	ldrh	r2, [r3, #0]
 801a01e:	2380      	movs	r3, #128	@ 0x80
 801a020:	011b      	lsls	r3, r3, #4
 801a022:	4013      	ands	r3, r2
 801a024:	d000      	beq.n	801a028 <PCD_EP_ISR_Handler+0x22c>
 801a026:	e2db      	b.n	801a5e0 <PCD_EP_ISR_Handler+0x7e4>
 801a028:	187b      	adds	r3, r7, r1
 801a02a:	881a      	ldrh	r2, [r3, #0]
 801a02c:	23c0      	movs	r3, #192	@ 0xc0
 801a02e:	019b      	lsls	r3, r3, #6
 801a030:	401a      	ands	r2, r3
 801a032:	23c0      	movs	r3, #192	@ 0xc0
 801a034:	019b      	lsls	r3, r3, #6
 801a036:	429a      	cmp	r2, r3
 801a038:	d100      	bne.n	801a03c <PCD_EP_ISR_Handler+0x240>
 801a03a:	e2d1      	b.n	801a5e0 <PCD_EP_ISR_Handler+0x7e4>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 801a03c:	687b      	ldr	r3, [r7, #4]
 801a03e:	681b      	ldr	r3, [r3, #0]
 801a040:	61bb      	str	r3, [r7, #24]
 801a042:	687b      	ldr	r3, [r7, #4]
 801a044:	681b      	ldr	r3, [r3, #0]
 801a046:	2250      	movs	r2, #80	@ 0x50
 801a048:	5a9b      	ldrh	r3, [r3, r2]
 801a04a:	b29b      	uxth	r3, r3
 801a04c:	001a      	movs	r2, r3
 801a04e:	69bb      	ldr	r3, [r7, #24]
 801a050:	189b      	adds	r3, r3, r2
 801a052:	61bb      	str	r3, [r7, #24]
 801a054:	69bb      	ldr	r3, [r7, #24]
 801a056:	4a3a      	ldr	r2, [pc, #232]	@ (801a140 <PCD_EP_ISR_Handler+0x344>)
 801a058:	4694      	mov	ip, r2
 801a05a:	4463      	add	r3, ip
 801a05c:	617b      	str	r3, [r7, #20]
 801a05e:	697b      	ldr	r3, [r7, #20]
 801a060:	881b      	ldrh	r3, [r3, #0]
 801a062:	b29b      	uxth	r3, r3
 801a064:	059b      	lsls	r3, r3, #22
 801a066:	0d9b      	lsrs	r3, r3, #22
 801a068:	b29a      	uxth	r2, r3
 801a06a:	697b      	ldr	r3, [r7, #20]
 801a06c:	801a      	strh	r2, [r3, #0]
 801a06e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a070:	691b      	ldr	r3, [r3, #16]
 801a072:	2b3e      	cmp	r3, #62	@ 0x3e
 801a074:	d91a      	bls.n	801a0ac <PCD_EP_ISR_Handler+0x2b0>
 801a076:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a078:	691b      	ldr	r3, [r3, #16]
 801a07a:	095b      	lsrs	r3, r3, #5
 801a07c:	647b      	str	r3, [r7, #68]	@ 0x44
 801a07e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a080:	691b      	ldr	r3, [r3, #16]
 801a082:	221f      	movs	r2, #31
 801a084:	4013      	ands	r3, r2
 801a086:	d102      	bne.n	801a08e <PCD_EP_ISR_Handler+0x292>
 801a088:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801a08a:	3b01      	subs	r3, #1
 801a08c:	647b      	str	r3, [r7, #68]	@ 0x44
 801a08e:	697b      	ldr	r3, [r7, #20]
 801a090:	881b      	ldrh	r3, [r3, #0]
 801a092:	b29a      	uxth	r2, r3
 801a094:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801a096:	b29b      	uxth	r3, r3
 801a098:	029b      	lsls	r3, r3, #10
 801a09a:	b29b      	uxth	r3, r3
 801a09c:	4313      	orrs	r3, r2
 801a09e:	b29b      	uxth	r3, r3
 801a0a0:	4a25      	ldr	r2, [pc, #148]	@ (801a138 <PCD_EP_ISR_Handler+0x33c>)
 801a0a2:	4313      	orrs	r3, r2
 801a0a4:	b29a      	uxth	r2, r3
 801a0a6:	697b      	ldr	r3, [r7, #20]
 801a0a8:	801a      	strh	r2, [r3, #0]
 801a0aa:	e023      	b.n	801a0f4 <PCD_EP_ISR_Handler+0x2f8>
 801a0ac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a0ae:	691b      	ldr	r3, [r3, #16]
 801a0b0:	2b00      	cmp	r3, #0
 801a0b2:	d108      	bne.n	801a0c6 <PCD_EP_ISR_Handler+0x2ca>
 801a0b4:	697b      	ldr	r3, [r7, #20]
 801a0b6:	881b      	ldrh	r3, [r3, #0]
 801a0b8:	b29b      	uxth	r3, r3
 801a0ba:	4a1f      	ldr	r2, [pc, #124]	@ (801a138 <PCD_EP_ISR_Handler+0x33c>)
 801a0bc:	4313      	orrs	r3, r2
 801a0be:	b29a      	uxth	r2, r3
 801a0c0:	697b      	ldr	r3, [r7, #20]
 801a0c2:	801a      	strh	r2, [r3, #0]
 801a0c4:	e016      	b.n	801a0f4 <PCD_EP_ISR_Handler+0x2f8>
 801a0c6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a0c8:	691b      	ldr	r3, [r3, #16]
 801a0ca:	085b      	lsrs	r3, r3, #1
 801a0cc:	647b      	str	r3, [r7, #68]	@ 0x44
 801a0ce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a0d0:	691b      	ldr	r3, [r3, #16]
 801a0d2:	2201      	movs	r2, #1
 801a0d4:	4013      	ands	r3, r2
 801a0d6:	d002      	beq.n	801a0de <PCD_EP_ISR_Handler+0x2e2>
 801a0d8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801a0da:	3301      	adds	r3, #1
 801a0dc:	647b      	str	r3, [r7, #68]	@ 0x44
 801a0de:	697b      	ldr	r3, [r7, #20]
 801a0e0:	881b      	ldrh	r3, [r3, #0]
 801a0e2:	b29a      	uxth	r2, r3
 801a0e4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801a0e6:	b29b      	uxth	r3, r3
 801a0e8:	029b      	lsls	r3, r3, #10
 801a0ea:	b29b      	uxth	r3, r3
 801a0ec:	4313      	orrs	r3, r2
 801a0ee:	b29a      	uxth	r2, r3
 801a0f0:	697b      	ldr	r3, [r7, #20]
 801a0f2:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 801a0f4:	687b      	ldr	r3, [r7, #4]
 801a0f6:	681b      	ldr	r3, [r3, #0]
 801a0f8:	881b      	ldrh	r3, [r3, #0]
 801a0fa:	b29a      	uxth	r2, r3
 801a0fc:	2012      	movs	r0, #18
 801a0fe:	183b      	adds	r3, r7, r0
 801a100:	4911      	ldr	r1, [pc, #68]	@ (801a148 <PCD_EP_ISR_Handler+0x34c>)
 801a102:	400a      	ands	r2, r1
 801a104:	801a      	strh	r2, [r3, #0]
 801a106:	183b      	adds	r3, r7, r0
 801a108:	183a      	adds	r2, r7, r0
 801a10a:	8812      	ldrh	r2, [r2, #0]
 801a10c:	2180      	movs	r1, #128	@ 0x80
 801a10e:	0149      	lsls	r1, r1, #5
 801a110:	404a      	eors	r2, r1
 801a112:	801a      	strh	r2, [r3, #0]
 801a114:	183b      	adds	r3, r7, r0
 801a116:	183a      	adds	r2, r7, r0
 801a118:	8812      	ldrh	r2, [r2, #0]
 801a11a:	2180      	movs	r1, #128	@ 0x80
 801a11c:	0189      	lsls	r1, r1, #6
 801a11e:	404a      	eors	r2, r1
 801a120:	801a      	strh	r2, [r3, #0]
 801a122:	687b      	ldr	r3, [r7, #4]
 801a124:	681b      	ldr	r3, [r3, #0]
 801a126:	183a      	adds	r2, r7, r0
 801a128:	8812      	ldrh	r2, [r2, #0]
 801a12a:	4908      	ldr	r1, [pc, #32]	@ (801a14c <PCD_EP_ISR_Handler+0x350>)
 801a12c:	430a      	orrs	r2, r1
 801a12e:	b292      	uxth	r2, r2
 801a130:	801a      	strh	r2, [r3, #0]
 801a132:	e255      	b.n	801a5e0 <PCD_EP_ISR_Handler+0x7e4>
 801a134:	ffff8f0f 	.word	0xffff8f0f
 801a138:	ffff8000 	.word	0xffff8000
 801a13c:	00000402 	.word	0x00000402
 801a140:	00000406 	.word	0x00000406
 801a144:	00000f8f 	.word	0x00000f8f
 801a148:	ffffbf8f 	.word	0xffffbf8f
 801a14c:	ffff8080 	.word	0xffff8080
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 801a150:	687b      	ldr	r3, [r7, #4]
 801a152:	681b      	ldr	r3, [r3, #0]
 801a154:	001a      	movs	r2, r3
 801a156:	204d      	movs	r0, #77	@ 0x4d
 801a158:	183b      	adds	r3, r7, r0
 801a15a:	781b      	ldrb	r3, [r3, #0]
 801a15c:	009b      	lsls	r3, r3, #2
 801a15e:	18d2      	adds	r2, r2, r3
 801a160:	214a      	movs	r1, #74	@ 0x4a
 801a162:	187b      	adds	r3, r7, r1
 801a164:	8812      	ldrh	r2, [r2, #0]
 801a166:	801a      	strh	r2, [r3, #0]

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 801a168:	187b      	adds	r3, r7, r1
 801a16a:	2200      	movs	r2, #0
 801a16c:	5e9b      	ldrsh	r3, [r3, r2]
 801a16e:	2b00      	cmp	r3, #0
 801a170:	db00      	blt.n	801a174 <PCD_EP_ISR_Handler+0x378>
 801a172:	e0fa      	b.n	801a36a <PCD_EP_ISR_Handler+0x56e>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 801a174:	687b      	ldr	r3, [r7, #4]
 801a176:	681b      	ldr	r3, [r3, #0]
 801a178:	001a      	movs	r2, r3
 801a17a:	183b      	adds	r3, r7, r0
 801a17c:	781b      	ldrb	r3, [r3, #0]
 801a17e:	009b      	lsls	r3, r3, #2
 801a180:	18d3      	adds	r3, r2, r3
 801a182:	881b      	ldrh	r3, [r3, #0]
 801a184:	b29a      	uxth	r2, r3
 801a186:	2448      	movs	r4, #72	@ 0x48
 801a188:	193b      	adds	r3, r7, r4
 801a18a:	49d1      	ldr	r1, [pc, #836]	@ (801a4d0 <PCD_EP_ISR_Handler+0x6d4>)
 801a18c:	400a      	ands	r2, r1
 801a18e:	801a      	strh	r2, [r3, #0]
 801a190:	687b      	ldr	r3, [r7, #4]
 801a192:	681b      	ldr	r3, [r3, #0]
 801a194:	001a      	movs	r2, r3
 801a196:	183b      	adds	r3, r7, r0
 801a198:	781b      	ldrb	r3, [r3, #0]
 801a19a:	009b      	lsls	r3, r3, #2
 801a19c:	18d3      	adds	r3, r2, r3
 801a19e:	193a      	adds	r2, r7, r4
 801a1a0:	8812      	ldrh	r2, [r2, #0]
 801a1a2:	2180      	movs	r1, #128	@ 0x80
 801a1a4:	430a      	orrs	r2, r1
 801a1a6:	b292      	uxth	r2, r2
 801a1a8:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 801a1aa:	183b      	adds	r3, r7, r0
 801a1ac:	781a      	ldrb	r2, [r3, #0]
 801a1ae:	0013      	movs	r3, r2
 801a1b0:	009b      	lsls	r3, r3, #2
 801a1b2:	189b      	adds	r3, r3, r2
 801a1b4:	00db      	lsls	r3, r3, #3
 801a1b6:	3369      	adds	r3, #105	@ 0x69
 801a1b8:	33ff      	adds	r3, #255	@ 0xff
 801a1ba:	687a      	ldr	r2, [r7, #4]
 801a1bc:	18d3      	adds	r3, r2, r3
 801a1be:	657b      	str	r3, [r7, #84]	@ 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 801a1c0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a1c2:	7b1b      	ldrb	r3, [r3, #12]
 801a1c4:	2b00      	cmp	r3, #0
 801a1c6:	d125      	bne.n	801a214 <PCD_EP_ISR_Handler+0x418>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 801a1c8:	687b      	ldr	r3, [r7, #4]
 801a1ca:	681b      	ldr	r3, [r3, #0]
 801a1cc:	2250      	movs	r2, #80	@ 0x50
 801a1ce:	5a9b      	ldrh	r3, [r3, r2]
 801a1d0:	b29b      	uxth	r3, r3
 801a1d2:	001a      	movs	r2, r3
 801a1d4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a1d6:	781b      	ldrb	r3, [r3, #0]
 801a1d8:	00db      	lsls	r3, r3, #3
 801a1da:	18d2      	adds	r2, r2, r3
 801a1dc:	687b      	ldr	r3, [r7, #4]
 801a1de:	681b      	ldr	r3, [r3, #0]
 801a1e0:	18d3      	adds	r3, r2, r3
 801a1e2:	4abc      	ldr	r2, [pc, #752]	@ (801a4d4 <PCD_EP_ISR_Handler+0x6d8>)
 801a1e4:	4694      	mov	ip, r2
 801a1e6:	4463      	add	r3, ip
 801a1e8:	881a      	ldrh	r2, [r3, #0]
 801a1ea:	2450      	movs	r4, #80	@ 0x50
 801a1ec:	193b      	adds	r3, r7, r4
 801a1ee:	0592      	lsls	r2, r2, #22
 801a1f0:	0d92      	lsrs	r2, r2, #22
 801a1f2:	801a      	strh	r2, [r3, #0]

          if (count != 0U)
 801a1f4:	193b      	adds	r3, r7, r4
 801a1f6:	881b      	ldrh	r3, [r3, #0]
 801a1f8:	2b00      	cmp	r3, #0
 801a1fa:	d100      	bne.n	801a1fe <PCD_EP_ISR_Handler+0x402>
 801a1fc:	e08d      	b.n	801a31a <PCD_EP_ISR_Handler+0x51e>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 801a1fe:	687b      	ldr	r3, [r7, #4]
 801a200:	6818      	ldr	r0, [r3, #0]
 801a202:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a204:	6959      	ldr	r1, [r3, #20]
 801a206:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a208:	88da      	ldrh	r2, [r3, #6]
 801a20a:	193b      	adds	r3, r7, r4
 801a20c:	881b      	ldrh	r3, [r3, #0]
 801a20e:	f007 f8df 	bl	80213d0 <USB_ReadPMA>
 801a212:	e082      	b.n	801a31a <PCD_EP_ISR_Handler+0x51e>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 801a214:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a216:	78db      	ldrb	r3, [r3, #3]
 801a218:	2b02      	cmp	r3, #2
 801a21a:	d10c      	bne.n	801a236 <PCD_EP_ISR_Handler+0x43a>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 801a21c:	2350      	movs	r3, #80	@ 0x50
 801a21e:	18fc      	adds	r4, r7, r3
 801a220:	234a      	movs	r3, #74	@ 0x4a
 801a222:	18fb      	adds	r3, r7, r3
 801a224:	881a      	ldrh	r2, [r3, #0]
 801a226:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 801a228:	687b      	ldr	r3, [r7, #4]
 801a22a:	0018      	movs	r0, r3
 801a22c:	f000 f9ec 	bl	801a608 <HAL_PCD_EP_DB_Receive>
 801a230:	0003      	movs	r3, r0
 801a232:	8023      	strh	r3, [r4, #0]
 801a234:	e071      	b.n	801a31a <PCD_EP_ISR_Handler+0x51e>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 801a236:	687b      	ldr	r3, [r7, #4]
 801a238:	681b      	ldr	r3, [r3, #0]
 801a23a:	001a      	movs	r2, r3
 801a23c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a23e:	781b      	ldrb	r3, [r3, #0]
 801a240:	009b      	lsls	r3, r3, #2
 801a242:	18d3      	adds	r3, r2, r3
 801a244:	881b      	ldrh	r3, [r3, #0]
 801a246:	b29a      	uxth	r2, r3
 801a248:	2052      	movs	r0, #82	@ 0x52
 801a24a:	183b      	adds	r3, r7, r0
 801a24c:	49a2      	ldr	r1, [pc, #648]	@ (801a4d8 <PCD_EP_ISR_Handler+0x6dc>)
 801a24e:	400a      	ands	r2, r1
 801a250:	801a      	strh	r2, [r3, #0]
 801a252:	687b      	ldr	r3, [r7, #4]
 801a254:	681b      	ldr	r3, [r3, #0]
 801a256:	001a      	movs	r2, r3
 801a258:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a25a:	781b      	ldrb	r3, [r3, #0]
 801a25c:	009b      	lsls	r3, r3, #2
 801a25e:	18d3      	adds	r3, r2, r3
 801a260:	183a      	adds	r2, r7, r0
 801a262:	8812      	ldrh	r2, [r2, #0]
 801a264:	499d      	ldr	r1, [pc, #628]	@ (801a4dc <PCD_EP_ISR_Handler+0x6e0>)
 801a266:	430a      	orrs	r2, r1
 801a268:	b292      	uxth	r2, r2
 801a26a:	801a      	strh	r2, [r3, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 801a26c:	687b      	ldr	r3, [r7, #4]
 801a26e:	681b      	ldr	r3, [r3, #0]
 801a270:	001a      	movs	r2, r3
 801a272:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a274:	781b      	ldrb	r3, [r3, #0]
 801a276:	009b      	lsls	r3, r3, #2
 801a278:	18d3      	adds	r3, r2, r3
 801a27a:	881b      	ldrh	r3, [r3, #0]
 801a27c:	b29b      	uxth	r3, r3
 801a27e:	001a      	movs	r2, r3
 801a280:	2380      	movs	r3, #128	@ 0x80
 801a282:	01db      	lsls	r3, r3, #7
 801a284:	4013      	ands	r3, r2
 801a286:	d024      	beq.n	801a2d2 <PCD_EP_ISR_Handler+0x4d6>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 801a288:	687b      	ldr	r3, [r7, #4]
 801a28a:	681b      	ldr	r3, [r3, #0]
 801a28c:	2250      	movs	r2, #80	@ 0x50
 801a28e:	5a9b      	ldrh	r3, [r3, r2]
 801a290:	b29b      	uxth	r3, r3
 801a292:	001a      	movs	r2, r3
 801a294:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a296:	781b      	ldrb	r3, [r3, #0]
 801a298:	00db      	lsls	r3, r3, #3
 801a29a:	18d2      	adds	r2, r2, r3
 801a29c:	687b      	ldr	r3, [r7, #4]
 801a29e:	681b      	ldr	r3, [r3, #0]
 801a2a0:	18d3      	adds	r3, r2, r3
 801a2a2:	4a8f      	ldr	r2, [pc, #572]	@ (801a4e0 <PCD_EP_ISR_Handler+0x6e4>)
 801a2a4:	4694      	mov	ip, r2
 801a2a6:	4463      	add	r3, ip
 801a2a8:	881a      	ldrh	r2, [r3, #0]
 801a2aa:	2450      	movs	r4, #80	@ 0x50
 801a2ac:	193b      	adds	r3, r7, r4
 801a2ae:	0592      	lsls	r2, r2, #22
 801a2b0:	0d92      	lsrs	r2, r2, #22
 801a2b2:	801a      	strh	r2, [r3, #0]

              if (count != 0U)
 801a2b4:	193b      	adds	r3, r7, r4
 801a2b6:	881b      	ldrh	r3, [r3, #0]
 801a2b8:	2b00      	cmp	r3, #0
 801a2ba:	d02e      	beq.n	801a31a <PCD_EP_ISR_Handler+0x51e>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 801a2bc:	687b      	ldr	r3, [r7, #4]
 801a2be:	6818      	ldr	r0, [r3, #0]
 801a2c0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a2c2:	6959      	ldr	r1, [r3, #20]
 801a2c4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a2c6:	891a      	ldrh	r2, [r3, #8]
 801a2c8:	193b      	adds	r3, r7, r4
 801a2ca:	881b      	ldrh	r3, [r3, #0]
 801a2cc:	f007 f880 	bl	80213d0 <USB_ReadPMA>
 801a2d0:	e023      	b.n	801a31a <PCD_EP_ISR_Handler+0x51e>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 801a2d2:	687b      	ldr	r3, [r7, #4]
 801a2d4:	681b      	ldr	r3, [r3, #0]
 801a2d6:	2250      	movs	r2, #80	@ 0x50
 801a2d8:	5a9b      	ldrh	r3, [r3, r2]
 801a2da:	b29b      	uxth	r3, r3
 801a2dc:	001a      	movs	r2, r3
 801a2de:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a2e0:	781b      	ldrb	r3, [r3, #0]
 801a2e2:	00db      	lsls	r3, r3, #3
 801a2e4:	18d2      	adds	r2, r2, r3
 801a2e6:	687b      	ldr	r3, [r7, #4]
 801a2e8:	681b      	ldr	r3, [r3, #0]
 801a2ea:	18d3      	adds	r3, r2, r3
 801a2ec:	4a79      	ldr	r2, [pc, #484]	@ (801a4d4 <PCD_EP_ISR_Handler+0x6d8>)
 801a2ee:	4694      	mov	ip, r2
 801a2f0:	4463      	add	r3, ip
 801a2f2:	881a      	ldrh	r2, [r3, #0]
 801a2f4:	2450      	movs	r4, #80	@ 0x50
 801a2f6:	193b      	adds	r3, r7, r4
 801a2f8:	0592      	lsls	r2, r2, #22
 801a2fa:	0d92      	lsrs	r2, r2, #22
 801a2fc:	801a      	strh	r2, [r3, #0]

              if (count != 0U)
 801a2fe:	193b      	adds	r3, r7, r4
 801a300:	881b      	ldrh	r3, [r3, #0]
 801a302:	2b00      	cmp	r3, #0
 801a304:	d009      	beq.n	801a31a <PCD_EP_ISR_Handler+0x51e>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 801a306:	687b      	ldr	r3, [r7, #4]
 801a308:	6818      	ldr	r0, [r3, #0]
 801a30a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a30c:	6959      	ldr	r1, [r3, #20]
 801a30e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a310:	895a      	ldrh	r2, [r3, #10]
 801a312:	193b      	adds	r3, r7, r4
 801a314:	881b      	ldrh	r3, [r3, #0]
 801a316:	f007 f85b 	bl	80213d0 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 801a31a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a31c:	69da      	ldr	r2, [r3, #28]
 801a31e:	2150      	movs	r1, #80	@ 0x50
 801a320:	187b      	adds	r3, r7, r1
 801a322:	881b      	ldrh	r3, [r3, #0]
 801a324:	18d2      	adds	r2, r2, r3
 801a326:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a328:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 801a32a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a32c:	695a      	ldr	r2, [r3, #20]
 801a32e:	187b      	adds	r3, r7, r1
 801a330:	881b      	ldrh	r3, [r3, #0]
 801a332:	18d2      	adds	r2, r2, r3
 801a334:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a336:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 801a338:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a33a:	699b      	ldr	r3, [r3, #24]
 801a33c:	2b00      	cmp	r3, #0
 801a33e:	d005      	beq.n	801a34c <PCD_EP_ISR_Handler+0x550>
 801a340:	187b      	adds	r3, r7, r1
 801a342:	881a      	ldrh	r2, [r3, #0]
 801a344:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a346:	691b      	ldr	r3, [r3, #16]
 801a348:	429a      	cmp	r2, r3
 801a34a:	d207      	bcs.n	801a35c <PCD_EP_ISR_Handler+0x560>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 801a34c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a34e:	781a      	ldrb	r2, [r3, #0]
 801a350:	687b      	ldr	r3, [r7, #4]
 801a352:	0011      	movs	r1, r2
 801a354:	0018      	movs	r0, r3
 801a356:	f009 f862 	bl	802341e <HAL_PCD_DataOutStageCallback>
 801a35a:	e006      	b.n	801a36a <PCD_EP_ISR_Handler+0x56e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 801a35c:	687b      	ldr	r3, [r7, #4]
 801a35e:	681b      	ldr	r3, [r3, #0]
 801a360:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 801a362:	0011      	movs	r1, r2
 801a364:	0018      	movs	r0, r3
 801a366:	f005 fd77 	bl	801fe58 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 801a36a:	244a      	movs	r4, #74	@ 0x4a
 801a36c:	193b      	adds	r3, r7, r4
 801a36e:	881b      	ldrh	r3, [r3, #0]
 801a370:	2280      	movs	r2, #128	@ 0x80
 801a372:	4013      	ands	r3, r2
 801a374:	d100      	bne.n	801a378 <PCD_EP_ISR_Handler+0x57c>
 801a376:	e133      	b.n	801a5e0 <PCD_EP_ISR_Handler+0x7e4>
      {
        ep = &hpcd->IN_ep[epindex];
 801a378:	204d      	movs	r0, #77	@ 0x4d
 801a37a:	183b      	adds	r3, r7, r0
 801a37c:	781b      	ldrb	r3, [r3, #0]
 801a37e:	1c5a      	adds	r2, r3, #1
 801a380:	0013      	movs	r3, r2
 801a382:	009b      	lsls	r3, r3, #2
 801a384:	189b      	adds	r3, r3, r2
 801a386:	00db      	lsls	r3, r3, #3
 801a388:	687a      	ldr	r2, [r7, #4]
 801a38a:	18d3      	adds	r3, r2, r3
 801a38c:	657b      	str	r3, [r7, #84]	@ 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 801a38e:	687b      	ldr	r3, [r7, #4]
 801a390:	681b      	ldr	r3, [r3, #0]
 801a392:	001a      	movs	r2, r3
 801a394:	183b      	adds	r3, r7, r0
 801a396:	781b      	ldrb	r3, [r3, #0]
 801a398:	009b      	lsls	r3, r3, #2
 801a39a:	18d3      	adds	r3, r2, r3
 801a39c:	881b      	ldrh	r3, [r3, #0]
 801a39e:	b29a      	uxth	r2, r3
 801a3a0:	2542      	movs	r5, #66	@ 0x42
 801a3a2:	197b      	adds	r3, r7, r5
 801a3a4:	494f      	ldr	r1, [pc, #316]	@ (801a4e4 <PCD_EP_ISR_Handler+0x6e8>)
 801a3a6:	400a      	ands	r2, r1
 801a3a8:	801a      	strh	r2, [r3, #0]
 801a3aa:	687b      	ldr	r3, [r7, #4]
 801a3ac:	681b      	ldr	r3, [r3, #0]
 801a3ae:	001a      	movs	r2, r3
 801a3b0:	183b      	adds	r3, r7, r0
 801a3b2:	781b      	ldrb	r3, [r3, #0]
 801a3b4:	009b      	lsls	r3, r3, #2
 801a3b6:	18d3      	adds	r3, r2, r3
 801a3b8:	197a      	adds	r2, r7, r5
 801a3ba:	8812      	ldrh	r2, [r2, #0]
 801a3bc:	494a      	ldr	r1, [pc, #296]	@ (801a4e8 <PCD_EP_ISR_Handler+0x6ec>)
 801a3be:	430a      	orrs	r2, r1
 801a3c0:	b292      	uxth	r2, r2
 801a3c2:	801a      	strh	r2, [r3, #0]

        if (ep->type == EP_TYPE_ISOC)
 801a3c4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a3c6:	78db      	ldrb	r3, [r3, #3]
 801a3c8:	2b01      	cmp	r3, #1
 801a3ca:	d000      	beq.n	801a3ce <PCD_EP_ISR_Handler+0x5d2>
 801a3cc:	e0af      	b.n	801a52e <PCD_EP_ISR_Handler+0x732>
        {
          ep->xfer_len = 0U;
 801a3ce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a3d0:	2200      	movs	r2, #0
 801a3d2:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 801a3d4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a3d6:	7b1b      	ldrb	r3, [r3, #12]
 801a3d8:	2b00      	cmp	r3, #0
 801a3da:	d100      	bne.n	801a3de <PCD_EP_ISR_Handler+0x5e2>
 801a3dc:	e09f      	b.n	801a51e <PCD_EP_ISR_Handler+0x722>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 801a3de:	193b      	adds	r3, r7, r4
 801a3e0:	881b      	ldrh	r3, [r3, #0]
 801a3e2:	2240      	movs	r2, #64	@ 0x40
 801a3e4:	4013      	ands	r3, r2
 801a3e6:	d046      	beq.n	801a476 <PCD_EP_ISR_Handler+0x67a>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 801a3e8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a3ea:	785b      	ldrb	r3, [r3, #1]
 801a3ec:	2b00      	cmp	r3, #0
 801a3ee:	d125      	bne.n	801a43c <PCD_EP_ISR_Handler+0x640>
 801a3f0:	687b      	ldr	r3, [r7, #4]
 801a3f2:	681b      	ldr	r3, [r3, #0]
 801a3f4:	627b      	str	r3, [r7, #36]	@ 0x24
 801a3f6:	687b      	ldr	r3, [r7, #4]
 801a3f8:	681b      	ldr	r3, [r3, #0]
 801a3fa:	2250      	movs	r2, #80	@ 0x50
 801a3fc:	5a9b      	ldrh	r3, [r3, r2]
 801a3fe:	b29b      	uxth	r3, r3
 801a400:	001a      	movs	r2, r3
 801a402:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a404:	189b      	adds	r3, r3, r2
 801a406:	627b      	str	r3, [r7, #36]	@ 0x24
 801a408:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a40a:	781b      	ldrb	r3, [r3, #0]
 801a40c:	00da      	lsls	r2, r3, #3
 801a40e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a410:	18d3      	adds	r3, r2, r3
 801a412:	4a33      	ldr	r2, [pc, #204]	@ (801a4e0 <PCD_EP_ISR_Handler+0x6e4>)
 801a414:	4694      	mov	ip, r2
 801a416:	4463      	add	r3, ip
 801a418:	623b      	str	r3, [r7, #32]
 801a41a:	6a3b      	ldr	r3, [r7, #32]
 801a41c:	881b      	ldrh	r3, [r3, #0]
 801a41e:	b29b      	uxth	r3, r3
 801a420:	059b      	lsls	r3, r3, #22
 801a422:	0d9b      	lsrs	r3, r3, #22
 801a424:	b29a      	uxth	r2, r3
 801a426:	6a3b      	ldr	r3, [r7, #32]
 801a428:	801a      	strh	r2, [r3, #0]
 801a42a:	6a3b      	ldr	r3, [r7, #32]
 801a42c:	881b      	ldrh	r3, [r3, #0]
 801a42e:	b29b      	uxth	r3, r3
 801a430:	4a2d      	ldr	r2, [pc, #180]	@ (801a4e8 <PCD_EP_ISR_Handler+0x6ec>)
 801a432:	4313      	orrs	r3, r2
 801a434:	b29a      	uxth	r2, r3
 801a436:	6a3b      	ldr	r3, [r7, #32]
 801a438:	801a      	strh	r2, [r3, #0]
 801a43a:	e070      	b.n	801a51e <PCD_EP_ISR_Handler+0x722>
 801a43c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a43e:	785b      	ldrb	r3, [r3, #1]
 801a440:	2b01      	cmp	r3, #1
 801a442:	d16c      	bne.n	801a51e <PCD_EP_ISR_Handler+0x722>
 801a444:	687b      	ldr	r3, [r7, #4]
 801a446:	681b      	ldr	r3, [r3, #0]
 801a448:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801a44a:	687b      	ldr	r3, [r7, #4]
 801a44c:	681b      	ldr	r3, [r3, #0]
 801a44e:	2250      	movs	r2, #80	@ 0x50
 801a450:	5a9b      	ldrh	r3, [r3, r2]
 801a452:	b29b      	uxth	r3, r3
 801a454:	001a      	movs	r2, r3
 801a456:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a458:	189b      	adds	r3, r3, r2
 801a45a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801a45c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a45e:	781b      	ldrb	r3, [r3, #0]
 801a460:	00da      	lsls	r2, r3, #3
 801a462:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a464:	18d3      	adds	r3, r2, r3
 801a466:	4a1e      	ldr	r2, [pc, #120]	@ (801a4e0 <PCD_EP_ISR_Handler+0x6e4>)
 801a468:	4694      	mov	ip, r2
 801a46a:	4463      	add	r3, ip
 801a46c:	62bb      	str	r3, [r7, #40]	@ 0x28
 801a46e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a470:	2200      	movs	r2, #0
 801a472:	801a      	strh	r2, [r3, #0]
 801a474:	e053      	b.n	801a51e <PCD_EP_ISR_Handler+0x722>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 801a476:	687b      	ldr	r3, [r7, #4]
 801a478:	681b      	ldr	r3, [r3, #0]
 801a47a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801a47c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a47e:	785b      	ldrb	r3, [r3, #1]
 801a480:	2b00      	cmp	r3, #0
 801a482:	d133      	bne.n	801a4ec <PCD_EP_ISR_Handler+0x6f0>
 801a484:	687b      	ldr	r3, [r7, #4]
 801a486:	681b      	ldr	r3, [r3, #0]
 801a488:	637b      	str	r3, [r7, #52]	@ 0x34
 801a48a:	687b      	ldr	r3, [r7, #4]
 801a48c:	681b      	ldr	r3, [r3, #0]
 801a48e:	2250      	movs	r2, #80	@ 0x50
 801a490:	5a9b      	ldrh	r3, [r3, r2]
 801a492:	b29b      	uxth	r3, r3
 801a494:	001a      	movs	r2, r3
 801a496:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801a498:	189b      	adds	r3, r3, r2
 801a49a:	637b      	str	r3, [r7, #52]	@ 0x34
 801a49c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a49e:	781b      	ldrb	r3, [r3, #0]
 801a4a0:	00da      	lsls	r2, r3, #3
 801a4a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801a4a4:	18d3      	adds	r3, r2, r3
 801a4a6:	4a0b      	ldr	r2, [pc, #44]	@ (801a4d4 <PCD_EP_ISR_Handler+0x6d8>)
 801a4a8:	4694      	mov	ip, r2
 801a4aa:	4463      	add	r3, ip
 801a4ac:	633b      	str	r3, [r7, #48]	@ 0x30
 801a4ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a4b0:	881b      	ldrh	r3, [r3, #0]
 801a4b2:	b29b      	uxth	r3, r3
 801a4b4:	059b      	lsls	r3, r3, #22
 801a4b6:	0d9b      	lsrs	r3, r3, #22
 801a4b8:	b29a      	uxth	r2, r3
 801a4ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a4bc:	801a      	strh	r2, [r3, #0]
 801a4be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a4c0:	881b      	ldrh	r3, [r3, #0]
 801a4c2:	b29b      	uxth	r3, r3
 801a4c4:	4a08      	ldr	r2, [pc, #32]	@ (801a4e8 <PCD_EP_ISR_Handler+0x6ec>)
 801a4c6:	4313      	orrs	r3, r2
 801a4c8:	b29a      	uxth	r2, r3
 801a4ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a4cc:	801a      	strh	r2, [r3, #0]
 801a4ce:	e026      	b.n	801a51e <PCD_EP_ISR_Handler+0x722>
 801a4d0:	00000f8f 	.word	0x00000f8f
 801a4d4:	00000406 	.word	0x00000406
 801a4d8:	ffff8f8f 	.word	0xffff8f8f
 801a4dc:	ffff80c0 	.word	0xffff80c0
 801a4e0:	00000402 	.word	0x00000402
 801a4e4:	ffff8f0f 	.word	0xffff8f0f
 801a4e8:	ffff8000 	.word	0xffff8000
 801a4ec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a4ee:	785b      	ldrb	r3, [r3, #1]
 801a4f0:	2b01      	cmp	r3, #1
 801a4f2:	d114      	bne.n	801a51e <PCD_EP_ISR_Handler+0x722>
 801a4f4:	687b      	ldr	r3, [r7, #4]
 801a4f6:	681b      	ldr	r3, [r3, #0]
 801a4f8:	2250      	movs	r2, #80	@ 0x50
 801a4fa:	5a9b      	ldrh	r3, [r3, r2]
 801a4fc:	b29b      	uxth	r3, r3
 801a4fe:	001a      	movs	r2, r3
 801a500:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801a502:	189b      	adds	r3, r3, r2
 801a504:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801a506:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a508:	781b      	ldrb	r3, [r3, #0]
 801a50a:	00da      	lsls	r2, r3, #3
 801a50c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801a50e:	18d3      	adds	r3, r2, r3
 801a510:	4a3b      	ldr	r2, [pc, #236]	@ (801a600 <PCD_EP_ISR_Handler+0x804>)
 801a512:	4694      	mov	ip, r2
 801a514:	4463      	add	r3, ip
 801a516:	63bb      	str	r3, [r7, #56]	@ 0x38
 801a518:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801a51a:	2200      	movs	r2, #0
 801a51c:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 801a51e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a520:	781a      	ldrb	r2, [r3, #0]
 801a522:	687b      	ldr	r3, [r7, #4]
 801a524:	0011      	movs	r1, r2
 801a526:	0018      	movs	r0, r3
 801a528:	f008 ff9a 	bl	8023460 <HAL_PCD_DataInStageCallback>
 801a52c:	e058      	b.n	801a5e0 <PCD_EP_ISR_Handler+0x7e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 801a52e:	234a      	movs	r3, #74	@ 0x4a
 801a530:	18fb      	adds	r3, r7, r3
 801a532:	881a      	ldrh	r2, [r3, #0]
 801a534:	2380      	movs	r3, #128	@ 0x80
 801a536:	005b      	lsls	r3, r3, #1
 801a538:	4013      	ands	r3, r2
 801a53a:	d149      	bne.n	801a5d0 <PCD_EP_ISR_Handler+0x7d4>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 801a53c:	687b      	ldr	r3, [r7, #4]
 801a53e:	681b      	ldr	r3, [r3, #0]
 801a540:	2250      	movs	r2, #80	@ 0x50
 801a542:	5a9b      	ldrh	r3, [r3, r2]
 801a544:	b29b      	uxth	r3, r3
 801a546:	001a      	movs	r2, r3
 801a548:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a54a:	781b      	ldrb	r3, [r3, #0]
 801a54c:	00db      	lsls	r3, r3, #3
 801a54e:	18d2      	adds	r2, r2, r3
 801a550:	687b      	ldr	r3, [r7, #4]
 801a552:	681b      	ldr	r3, [r3, #0]
 801a554:	18d3      	adds	r3, r2, r3
 801a556:	4a2b      	ldr	r2, [pc, #172]	@ (801a604 <PCD_EP_ISR_Handler+0x808>)
 801a558:	4694      	mov	ip, r2
 801a55a:	4463      	add	r3, ip
 801a55c:	881a      	ldrh	r2, [r3, #0]
 801a55e:	2140      	movs	r1, #64	@ 0x40
 801a560:	187b      	adds	r3, r7, r1
 801a562:	0592      	lsls	r2, r2, #22
 801a564:	0d92      	lsrs	r2, r2, #22
 801a566:	801a      	strh	r2, [r3, #0]

            if (ep->xfer_len > TxPctSize)
 801a568:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a56a:	699a      	ldr	r2, [r3, #24]
 801a56c:	187b      	adds	r3, r7, r1
 801a56e:	881b      	ldrh	r3, [r3, #0]
 801a570:	429a      	cmp	r2, r3
 801a572:	d907      	bls.n	801a584 <PCD_EP_ISR_Handler+0x788>
            {
              ep->xfer_len -= TxPctSize;
 801a574:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a576:	699a      	ldr	r2, [r3, #24]
 801a578:	187b      	adds	r3, r7, r1
 801a57a:	881b      	ldrh	r3, [r3, #0]
 801a57c:	1ad2      	subs	r2, r2, r3
 801a57e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a580:	619a      	str	r2, [r3, #24]
 801a582:	e002      	b.n	801a58a <PCD_EP_ISR_Handler+0x78e>
            }
            else
            {
              ep->xfer_len = 0U;
 801a584:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a586:	2200      	movs	r2, #0
 801a588:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 801a58a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a58c:	699b      	ldr	r3, [r3, #24]
 801a58e:	2b00      	cmp	r3, #0
 801a590:	d107      	bne.n	801a5a2 <PCD_EP_ISR_Handler+0x7a6>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 801a592:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a594:	781a      	ldrb	r2, [r3, #0]
 801a596:	687b      	ldr	r3, [r7, #4]
 801a598:	0011      	movs	r1, r2
 801a59a:	0018      	movs	r0, r3
 801a59c:	f008 ff60 	bl	8023460 <HAL_PCD_DataInStageCallback>
 801a5a0:	e01e      	b.n	801a5e0 <PCD_EP_ISR_Handler+0x7e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 801a5a2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a5a4:	695a      	ldr	r2, [r3, #20]
 801a5a6:	2140      	movs	r1, #64	@ 0x40
 801a5a8:	187b      	adds	r3, r7, r1
 801a5aa:	881b      	ldrh	r3, [r3, #0]
 801a5ac:	18d2      	adds	r2, r2, r3
 801a5ae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a5b0:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 801a5b2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a5b4:	69da      	ldr	r2, [r3, #28]
 801a5b6:	187b      	adds	r3, r7, r1
 801a5b8:	881b      	ldrh	r3, [r3, #0]
 801a5ba:	18d2      	adds	r2, r2, r3
 801a5bc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a5be:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 801a5c0:	687b      	ldr	r3, [r7, #4]
 801a5c2:	681b      	ldr	r3, [r3, #0]
 801a5c4:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 801a5c6:	0011      	movs	r1, r2
 801a5c8:	0018      	movs	r0, r3
 801a5ca:	f005 fc45 	bl	801fe58 <USB_EPStartXfer>
 801a5ce:	e007      	b.n	801a5e0 <PCD_EP_ISR_Handler+0x7e4>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 801a5d0:	234a      	movs	r3, #74	@ 0x4a
 801a5d2:	18fb      	adds	r3, r7, r3
 801a5d4:	881a      	ldrh	r2, [r3, #0]
 801a5d6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 801a5d8:	687b      	ldr	r3, [r7, #4]
 801a5da:	0018      	movs	r0, r3
 801a5dc:	f000 f930 	bl	801a840 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 801a5e0:	687b      	ldr	r3, [r7, #4]
 801a5e2:	681b      	ldr	r3, [r3, #0]
 801a5e4:	2244      	movs	r2, #68	@ 0x44
 801a5e6:	5a9b      	ldrh	r3, [r3, r2]
 801a5e8:	b29b      	uxth	r3, r3
 801a5ea:	b21b      	sxth	r3, r3
 801a5ec:	2b00      	cmp	r3, #0
 801a5ee:	da01      	bge.n	801a5f4 <PCD_EP_ISR_Handler+0x7f8>
 801a5f0:	f7ff fc0a 	bl	8019e08 <PCD_EP_ISR_Handler+0xc>
        }
      }
    }
  }

  return HAL_OK;
 801a5f4:	2300      	movs	r3, #0
}
 801a5f6:	0018      	movs	r0, r3
 801a5f8:	46bd      	mov	sp, r7
 801a5fa:	b016      	add	sp, #88	@ 0x58
 801a5fc:	bdb0      	pop	{r4, r5, r7, pc}
 801a5fe:	46c0      	nop			@ (mov r8, r8)
 801a600:	00000406 	.word	0x00000406
 801a604:	00000402 	.word	0x00000402

0801a608 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 801a608:	b590      	push	{r4, r7, lr}
 801a60a:	b089      	sub	sp, #36	@ 0x24
 801a60c:	af00      	add	r7, sp, #0
 801a60e:	60f8      	str	r0, [r7, #12]
 801a610:	60b9      	str	r1, [r7, #8]
 801a612:	1dbb      	adds	r3, r7, #6
 801a614:	801a      	strh	r2, [r3, #0]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 801a616:	1dbb      	adds	r3, r7, #6
 801a618:	881a      	ldrh	r2, [r3, #0]
 801a61a:	2380      	movs	r3, #128	@ 0x80
 801a61c:	01db      	lsls	r3, r3, #7
 801a61e:	4013      	ands	r3, r2
 801a620:	d100      	bne.n	801a624 <HAL_PCD_EP_DB_Receive+0x1c>
 801a622:	e07d      	b.n	801a720 <HAL_PCD_EP_DB_Receive+0x118>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 801a624:	68fb      	ldr	r3, [r7, #12]
 801a626:	681b      	ldr	r3, [r3, #0]
 801a628:	2250      	movs	r2, #80	@ 0x50
 801a62a:	5a9b      	ldrh	r3, [r3, r2]
 801a62c:	b29b      	uxth	r3, r3
 801a62e:	001a      	movs	r2, r3
 801a630:	68bb      	ldr	r3, [r7, #8]
 801a632:	781b      	ldrb	r3, [r3, #0]
 801a634:	00db      	lsls	r3, r3, #3
 801a636:	18d2      	adds	r2, r2, r3
 801a638:	68fb      	ldr	r3, [r7, #12]
 801a63a:	681b      	ldr	r3, [r3, #0]
 801a63c:	18d3      	adds	r3, r2, r3
 801a63e:	4a7a      	ldr	r2, [pc, #488]	@ (801a828 <HAL_PCD_EP_DB_Receive+0x220>)
 801a640:	4694      	mov	ip, r2
 801a642:	4463      	add	r3, ip
 801a644:	881a      	ldrh	r2, [r3, #0]
 801a646:	211a      	movs	r1, #26
 801a648:	187b      	adds	r3, r7, r1
 801a64a:	0592      	lsls	r2, r2, #22
 801a64c:	0d92      	lsrs	r2, r2, #22
 801a64e:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= count)
 801a650:	68bb      	ldr	r3, [r7, #8]
 801a652:	699a      	ldr	r2, [r3, #24]
 801a654:	187b      	adds	r3, r7, r1
 801a656:	881b      	ldrh	r3, [r3, #0]
 801a658:	429a      	cmp	r2, r3
 801a65a:	d307      	bcc.n	801a66c <HAL_PCD_EP_DB_Receive+0x64>
    {
      ep->xfer_len -= count;
 801a65c:	68bb      	ldr	r3, [r7, #8]
 801a65e:	699a      	ldr	r2, [r3, #24]
 801a660:	187b      	adds	r3, r7, r1
 801a662:	881b      	ldrh	r3, [r3, #0]
 801a664:	1ad2      	subs	r2, r2, r3
 801a666:	68bb      	ldr	r3, [r7, #8]
 801a668:	619a      	str	r2, [r3, #24]
 801a66a:	e002      	b.n	801a672 <HAL_PCD_EP_DB_Receive+0x6a>
    }
    else
    {
      ep->xfer_len = 0U;
 801a66c:	68bb      	ldr	r3, [r7, #8]
 801a66e:	2200      	movs	r2, #0
 801a670:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 801a672:	68bb      	ldr	r3, [r7, #8]
 801a674:	699b      	ldr	r3, [r3, #24]
 801a676:	2b00      	cmp	r3, #0
 801a678:	d121      	bne.n	801a6be <HAL_PCD_EP_DB_Receive+0xb6>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 801a67a:	68fb      	ldr	r3, [r7, #12]
 801a67c:	681b      	ldr	r3, [r3, #0]
 801a67e:	001a      	movs	r2, r3
 801a680:	68bb      	ldr	r3, [r7, #8]
 801a682:	781b      	ldrb	r3, [r3, #0]
 801a684:	009b      	lsls	r3, r3, #2
 801a686:	18d3      	adds	r3, r2, r3
 801a688:	881b      	ldrh	r3, [r3, #0]
 801a68a:	b29a      	uxth	r2, r3
 801a68c:	2018      	movs	r0, #24
 801a68e:	183b      	adds	r3, r7, r0
 801a690:	4966      	ldr	r1, [pc, #408]	@ (801a82c <HAL_PCD_EP_DB_Receive+0x224>)
 801a692:	400a      	ands	r2, r1
 801a694:	801a      	strh	r2, [r3, #0]
 801a696:	183b      	adds	r3, r7, r0
 801a698:	183a      	adds	r2, r7, r0
 801a69a:	8812      	ldrh	r2, [r2, #0]
 801a69c:	2180      	movs	r1, #128	@ 0x80
 801a69e:	0189      	lsls	r1, r1, #6
 801a6a0:	404a      	eors	r2, r1
 801a6a2:	801a      	strh	r2, [r3, #0]
 801a6a4:	68fb      	ldr	r3, [r7, #12]
 801a6a6:	681b      	ldr	r3, [r3, #0]
 801a6a8:	001a      	movs	r2, r3
 801a6aa:	68bb      	ldr	r3, [r7, #8]
 801a6ac:	781b      	ldrb	r3, [r3, #0]
 801a6ae:	009b      	lsls	r3, r3, #2
 801a6b0:	18d3      	adds	r3, r2, r3
 801a6b2:	183a      	adds	r2, r7, r0
 801a6b4:	8812      	ldrh	r2, [r2, #0]
 801a6b6:	495e      	ldr	r1, [pc, #376]	@ (801a830 <HAL_PCD_EP_DB_Receive+0x228>)
 801a6b8:	430a      	orrs	r2, r1
 801a6ba:	b292      	uxth	r2, r2
 801a6bc:	801a      	strh	r2, [r3, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 801a6be:	1dbb      	adds	r3, r7, #6
 801a6c0:	881b      	ldrh	r3, [r3, #0]
 801a6c2:	2240      	movs	r2, #64	@ 0x40
 801a6c4:	4013      	ands	r3, r2
 801a6c6:	d01a      	beq.n	801a6fe <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 801a6c8:	68fb      	ldr	r3, [r7, #12]
 801a6ca:	681b      	ldr	r3, [r3, #0]
 801a6cc:	001a      	movs	r2, r3
 801a6ce:	68bb      	ldr	r3, [r7, #8]
 801a6d0:	781b      	ldrb	r3, [r3, #0]
 801a6d2:	009b      	lsls	r3, r3, #2
 801a6d4:	18d3      	adds	r3, r2, r3
 801a6d6:	881b      	ldrh	r3, [r3, #0]
 801a6d8:	b29a      	uxth	r2, r3
 801a6da:	2016      	movs	r0, #22
 801a6dc:	183b      	adds	r3, r7, r0
 801a6de:	4955      	ldr	r1, [pc, #340]	@ (801a834 <HAL_PCD_EP_DB_Receive+0x22c>)
 801a6e0:	400a      	ands	r2, r1
 801a6e2:	801a      	strh	r2, [r3, #0]
 801a6e4:	68fb      	ldr	r3, [r7, #12]
 801a6e6:	681b      	ldr	r3, [r3, #0]
 801a6e8:	001a      	movs	r2, r3
 801a6ea:	68bb      	ldr	r3, [r7, #8]
 801a6ec:	781b      	ldrb	r3, [r3, #0]
 801a6ee:	009b      	lsls	r3, r3, #2
 801a6f0:	18d3      	adds	r3, r2, r3
 801a6f2:	183a      	adds	r2, r7, r0
 801a6f4:	8812      	ldrh	r2, [r2, #0]
 801a6f6:	4950      	ldr	r1, [pc, #320]	@ (801a838 <HAL_PCD_EP_DB_Receive+0x230>)
 801a6f8:	430a      	orrs	r2, r1
 801a6fa:	b292      	uxth	r2, r2
 801a6fc:	801a      	strh	r2, [r3, #0]
    }

    if (count != 0U)
 801a6fe:	241a      	movs	r4, #26
 801a700:	193b      	adds	r3, r7, r4
 801a702:	881b      	ldrh	r3, [r3, #0]
 801a704:	2b00      	cmp	r3, #0
 801a706:	d100      	bne.n	801a70a <HAL_PCD_EP_DB_Receive+0x102>
 801a708:	e086      	b.n	801a818 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 801a70a:	68fb      	ldr	r3, [r7, #12]
 801a70c:	6818      	ldr	r0, [r3, #0]
 801a70e:	68bb      	ldr	r3, [r7, #8]
 801a710:	6959      	ldr	r1, [r3, #20]
 801a712:	68bb      	ldr	r3, [r7, #8]
 801a714:	891a      	ldrh	r2, [r3, #8]
 801a716:	193b      	adds	r3, r7, r4
 801a718:	881b      	ldrh	r3, [r3, #0]
 801a71a:	f006 fe59 	bl	80213d0 <USB_ReadPMA>
 801a71e:	e07b      	b.n	801a818 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 801a720:	68fb      	ldr	r3, [r7, #12]
 801a722:	681b      	ldr	r3, [r3, #0]
 801a724:	2250      	movs	r2, #80	@ 0x50
 801a726:	5a9b      	ldrh	r3, [r3, r2]
 801a728:	b29b      	uxth	r3, r3
 801a72a:	001a      	movs	r2, r3
 801a72c:	68bb      	ldr	r3, [r7, #8]
 801a72e:	781b      	ldrb	r3, [r3, #0]
 801a730:	00db      	lsls	r3, r3, #3
 801a732:	18d2      	adds	r2, r2, r3
 801a734:	68fb      	ldr	r3, [r7, #12]
 801a736:	681b      	ldr	r3, [r3, #0]
 801a738:	18d3      	adds	r3, r2, r3
 801a73a:	4a40      	ldr	r2, [pc, #256]	@ (801a83c <HAL_PCD_EP_DB_Receive+0x234>)
 801a73c:	4694      	mov	ip, r2
 801a73e:	4463      	add	r3, ip
 801a740:	881a      	ldrh	r2, [r3, #0]
 801a742:	211a      	movs	r1, #26
 801a744:	187b      	adds	r3, r7, r1
 801a746:	0592      	lsls	r2, r2, #22
 801a748:	0d92      	lsrs	r2, r2, #22
 801a74a:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= count)
 801a74c:	68bb      	ldr	r3, [r7, #8]
 801a74e:	699a      	ldr	r2, [r3, #24]
 801a750:	187b      	adds	r3, r7, r1
 801a752:	881b      	ldrh	r3, [r3, #0]
 801a754:	429a      	cmp	r2, r3
 801a756:	d307      	bcc.n	801a768 <HAL_PCD_EP_DB_Receive+0x160>
    {
      ep->xfer_len -= count;
 801a758:	68bb      	ldr	r3, [r7, #8]
 801a75a:	699a      	ldr	r2, [r3, #24]
 801a75c:	187b      	adds	r3, r7, r1
 801a75e:	881b      	ldrh	r3, [r3, #0]
 801a760:	1ad2      	subs	r2, r2, r3
 801a762:	68bb      	ldr	r3, [r7, #8]
 801a764:	619a      	str	r2, [r3, #24]
 801a766:	e002      	b.n	801a76e <HAL_PCD_EP_DB_Receive+0x166>
    }
    else
    {
      ep->xfer_len = 0U;
 801a768:	68bb      	ldr	r3, [r7, #8]
 801a76a:	2200      	movs	r2, #0
 801a76c:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 801a76e:	68bb      	ldr	r3, [r7, #8]
 801a770:	699b      	ldr	r3, [r3, #24]
 801a772:	2b00      	cmp	r3, #0
 801a774:	d121      	bne.n	801a7ba <HAL_PCD_EP_DB_Receive+0x1b2>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 801a776:	68fb      	ldr	r3, [r7, #12]
 801a778:	681b      	ldr	r3, [r3, #0]
 801a77a:	001a      	movs	r2, r3
 801a77c:	68bb      	ldr	r3, [r7, #8]
 801a77e:	781b      	ldrb	r3, [r3, #0]
 801a780:	009b      	lsls	r3, r3, #2
 801a782:	18d3      	adds	r3, r2, r3
 801a784:	881b      	ldrh	r3, [r3, #0]
 801a786:	b29a      	uxth	r2, r3
 801a788:	201e      	movs	r0, #30
 801a78a:	183b      	adds	r3, r7, r0
 801a78c:	4927      	ldr	r1, [pc, #156]	@ (801a82c <HAL_PCD_EP_DB_Receive+0x224>)
 801a78e:	400a      	ands	r2, r1
 801a790:	801a      	strh	r2, [r3, #0]
 801a792:	183b      	adds	r3, r7, r0
 801a794:	183a      	adds	r2, r7, r0
 801a796:	8812      	ldrh	r2, [r2, #0]
 801a798:	2180      	movs	r1, #128	@ 0x80
 801a79a:	0189      	lsls	r1, r1, #6
 801a79c:	404a      	eors	r2, r1
 801a79e:	801a      	strh	r2, [r3, #0]
 801a7a0:	68fb      	ldr	r3, [r7, #12]
 801a7a2:	681b      	ldr	r3, [r3, #0]
 801a7a4:	001a      	movs	r2, r3
 801a7a6:	68bb      	ldr	r3, [r7, #8]
 801a7a8:	781b      	ldrb	r3, [r3, #0]
 801a7aa:	009b      	lsls	r3, r3, #2
 801a7ac:	18d3      	adds	r3, r2, r3
 801a7ae:	183a      	adds	r2, r7, r0
 801a7b0:	8812      	ldrh	r2, [r2, #0]
 801a7b2:	491f      	ldr	r1, [pc, #124]	@ (801a830 <HAL_PCD_EP_DB_Receive+0x228>)
 801a7b4:	430a      	orrs	r2, r1
 801a7b6:	b292      	uxth	r2, r2
 801a7b8:	801a      	strh	r2, [r3, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 801a7ba:	1dbb      	adds	r3, r7, #6
 801a7bc:	881b      	ldrh	r3, [r3, #0]
 801a7be:	2240      	movs	r2, #64	@ 0x40
 801a7c0:	4013      	ands	r3, r2
 801a7c2:	d11a      	bne.n	801a7fa <HAL_PCD_EP_DB_Receive+0x1f2>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 801a7c4:	68fb      	ldr	r3, [r7, #12]
 801a7c6:	681b      	ldr	r3, [r3, #0]
 801a7c8:	001a      	movs	r2, r3
 801a7ca:	68bb      	ldr	r3, [r7, #8]
 801a7cc:	781b      	ldrb	r3, [r3, #0]
 801a7ce:	009b      	lsls	r3, r3, #2
 801a7d0:	18d3      	adds	r3, r2, r3
 801a7d2:	881b      	ldrh	r3, [r3, #0]
 801a7d4:	b29a      	uxth	r2, r3
 801a7d6:	201c      	movs	r0, #28
 801a7d8:	183b      	adds	r3, r7, r0
 801a7da:	4916      	ldr	r1, [pc, #88]	@ (801a834 <HAL_PCD_EP_DB_Receive+0x22c>)
 801a7dc:	400a      	ands	r2, r1
 801a7de:	801a      	strh	r2, [r3, #0]
 801a7e0:	68fb      	ldr	r3, [r7, #12]
 801a7e2:	681b      	ldr	r3, [r3, #0]
 801a7e4:	001a      	movs	r2, r3
 801a7e6:	68bb      	ldr	r3, [r7, #8]
 801a7e8:	781b      	ldrb	r3, [r3, #0]
 801a7ea:	009b      	lsls	r3, r3, #2
 801a7ec:	18d3      	adds	r3, r2, r3
 801a7ee:	183a      	adds	r2, r7, r0
 801a7f0:	8812      	ldrh	r2, [r2, #0]
 801a7f2:	4911      	ldr	r1, [pc, #68]	@ (801a838 <HAL_PCD_EP_DB_Receive+0x230>)
 801a7f4:	430a      	orrs	r2, r1
 801a7f6:	b292      	uxth	r2, r2
 801a7f8:	801a      	strh	r2, [r3, #0]
    }

    if (count != 0U)
 801a7fa:	241a      	movs	r4, #26
 801a7fc:	193b      	adds	r3, r7, r4
 801a7fe:	881b      	ldrh	r3, [r3, #0]
 801a800:	2b00      	cmp	r3, #0
 801a802:	d009      	beq.n	801a818 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 801a804:	68fb      	ldr	r3, [r7, #12]
 801a806:	6818      	ldr	r0, [r3, #0]
 801a808:	68bb      	ldr	r3, [r7, #8]
 801a80a:	6959      	ldr	r1, [r3, #20]
 801a80c:	68bb      	ldr	r3, [r7, #8]
 801a80e:	895a      	ldrh	r2, [r3, #10]
 801a810:	193b      	adds	r3, r7, r4
 801a812:	881b      	ldrh	r3, [r3, #0]
 801a814:	f006 fddc 	bl	80213d0 <USB_ReadPMA>
    }
  }

  return count;
 801a818:	231a      	movs	r3, #26
 801a81a:	18fb      	adds	r3, r7, r3
 801a81c:	881b      	ldrh	r3, [r3, #0]
}
 801a81e:	0018      	movs	r0, r3
 801a820:	46bd      	mov	sp, r7
 801a822:	b009      	add	sp, #36	@ 0x24
 801a824:	bd90      	pop	{r4, r7, pc}
 801a826:	46c0      	nop			@ (mov r8, r8)
 801a828:	00000402 	.word	0x00000402
 801a82c:	ffffbf8f 	.word	0xffffbf8f
 801a830:	ffff8080 	.word	0xffff8080
 801a834:	ffff8f8f 	.word	0xffff8f8f
 801a838:	ffff80c0 	.word	0xffff80c0
 801a83c:	00000406 	.word	0x00000406

0801a840 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 801a840:	b580      	push	{r7, lr}
 801a842:	b0a4      	sub	sp, #144	@ 0x90
 801a844:	af00      	add	r7, sp, #0
 801a846:	60f8      	str	r0, [r7, #12]
 801a848:	60b9      	str	r1, [r7, #8]
 801a84a:	1dbb      	adds	r3, r7, #6
 801a84c:	801a      	strh	r2, [r3, #0]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 801a84e:	1dbb      	adds	r3, r7, #6
 801a850:	881b      	ldrh	r3, [r3, #0]
 801a852:	2240      	movs	r2, #64	@ 0x40
 801a854:	4013      	ands	r3, r2
 801a856:	d100      	bne.n	801a85a <HAL_PCD_EP_DB_Transmit+0x1a>
 801a858:	e1e4      	b.n	801ac24 <HAL_PCD_EP_DB_Transmit+0x3e4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 801a85a:	68fb      	ldr	r3, [r7, #12]
 801a85c:	681b      	ldr	r3, [r3, #0]
 801a85e:	2250      	movs	r2, #80	@ 0x50
 801a860:	5a9b      	ldrh	r3, [r3, r2]
 801a862:	b29b      	uxth	r3, r3
 801a864:	001a      	movs	r2, r3
 801a866:	68bb      	ldr	r3, [r7, #8]
 801a868:	781b      	ldrb	r3, [r3, #0]
 801a86a:	00db      	lsls	r3, r3, #3
 801a86c:	18d2      	adds	r2, r2, r3
 801a86e:	68fb      	ldr	r3, [r7, #12]
 801a870:	681b      	ldr	r3, [r3, #0]
 801a872:	18d3      	adds	r3, r2, r3
 801a874:	4ad0      	ldr	r2, [pc, #832]	@ (801abb8 <HAL_PCD_EP_DB_Transmit+0x378>)
 801a876:	4694      	mov	ip, r2
 801a878:	4463      	add	r3, ip
 801a87a:	881a      	ldrh	r2, [r3, #0]
 801a87c:	2186      	movs	r1, #134	@ 0x86
 801a87e:	187b      	adds	r3, r7, r1
 801a880:	0592      	lsls	r2, r2, #22
 801a882:	0d92      	lsrs	r2, r2, #22
 801a884:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len > TxPctSize)
 801a886:	68bb      	ldr	r3, [r7, #8]
 801a888:	699a      	ldr	r2, [r3, #24]
 801a88a:	187b      	adds	r3, r7, r1
 801a88c:	881b      	ldrh	r3, [r3, #0]
 801a88e:	429a      	cmp	r2, r3
 801a890:	d907      	bls.n	801a8a2 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 801a892:	68bb      	ldr	r3, [r7, #8]
 801a894:	699a      	ldr	r2, [r3, #24]
 801a896:	187b      	adds	r3, r7, r1
 801a898:	881b      	ldrh	r3, [r3, #0]
 801a89a:	1ad2      	subs	r2, r2, r3
 801a89c:	68bb      	ldr	r3, [r7, #8]
 801a89e:	619a      	str	r2, [r3, #24]
 801a8a0:	e002      	b.n	801a8a8 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 801a8a2:	68bb      	ldr	r3, [r7, #8]
 801a8a4:	2200      	movs	r2, #0
 801a8a6:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 801a8a8:	68bb      	ldr	r3, [r7, #8]
 801a8aa:	699b      	ldr	r3, [r3, #24]
 801a8ac:	2b00      	cmp	r3, #0
 801a8ae:	d000      	beq.n	801a8b2 <HAL_PCD_EP_DB_Transmit+0x72>
 801a8b0:	e0b5      	b.n	801aa1e <HAL_PCD_EP_DB_Transmit+0x1de>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 801a8b2:	68bb      	ldr	r3, [r7, #8]
 801a8b4:	785b      	ldrb	r3, [r3, #1]
 801a8b6:	2b00      	cmp	r3, #0
 801a8b8:	d125      	bne.n	801a906 <HAL_PCD_EP_DB_Transmit+0xc6>
 801a8ba:	68fb      	ldr	r3, [r7, #12]
 801a8bc:	681b      	ldr	r3, [r3, #0]
 801a8be:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801a8c0:	68fb      	ldr	r3, [r7, #12]
 801a8c2:	681b      	ldr	r3, [r3, #0]
 801a8c4:	2250      	movs	r2, #80	@ 0x50
 801a8c6:	5a9b      	ldrh	r3, [r3, r2]
 801a8c8:	b29b      	uxth	r3, r3
 801a8ca:	001a      	movs	r2, r3
 801a8cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a8ce:	189b      	adds	r3, r3, r2
 801a8d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801a8d2:	68bb      	ldr	r3, [r7, #8]
 801a8d4:	781b      	ldrb	r3, [r3, #0]
 801a8d6:	00da      	lsls	r2, r3, #3
 801a8d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a8da:	18d3      	adds	r3, r2, r3
 801a8dc:	4ab6      	ldr	r2, [pc, #728]	@ (801abb8 <HAL_PCD_EP_DB_Transmit+0x378>)
 801a8de:	4694      	mov	ip, r2
 801a8e0:	4463      	add	r3, ip
 801a8e2:	62bb      	str	r3, [r7, #40]	@ 0x28
 801a8e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a8e6:	881b      	ldrh	r3, [r3, #0]
 801a8e8:	b29b      	uxth	r3, r3
 801a8ea:	059b      	lsls	r3, r3, #22
 801a8ec:	0d9b      	lsrs	r3, r3, #22
 801a8ee:	b29a      	uxth	r2, r3
 801a8f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a8f2:	801a      	strh	r2, [r3, #0]
 801a8f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a8f6:	881b      	ldrh	r3, [r3, #0]
 801a8f8:	b29b      	uxth	r3, r3
 801a8fa:	4ab0      	ldr	r2, [pc, #704]	@ (801abbc <HAL_PCD_EP_DB_Transmit+0x37c>)
 801a8fc:	4313      	orrs	r3, r2
 801a8fe:	b29a      	uxth	r2, r3
 801a900:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a902:	801a      	strh	r2, [r3, #0]
 801a904:	e01b      	b.n	801a93e <HAL_PCD_EP_DB_Transmit+0xfe>
 801a906:	68bb      	ldr	r3, [r7, #8]
 801a908:	785b      	ldrb	r3, [r3, #1]
 801a90a:	2b01      	cmp	r3, #1
 801a90c:	d117      	bne.n	801a93e <HAL_PCD_EP_DB_Transmit+0xfe>
 801a90e:	68fb      	ldr	r3, [r7, #12]
 801a910:	681b      	ldr	r3, [r3, #0]
 801a912:	637b      	str	r3, [r7, #52]	@ 0x34
 801a914:	68fb      	ldr	r3, [r7, #12]
 801a916:	681b      	ldr	r3, [r3, #0]
 801a918:	2250      	movs	r2, #80	@ 0x50
 801a91a:	5a9b      	ldrh	r3, [r3, r2]
 801a91c:	b29b      	uxth	r3, r3
 801a91e:	001a      	movs	r2, r3
 801a920:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801a922:	189b      	adds	r3, r3, r2
 801a924:	637b      	str	r3, [r7, #52]	@ 0x34
 801a926:	68bb      	ldr	r3, [r7, #8]
 801a928:	781b      	ldrb	r3, [r3, #0]
 801a92a:	00da      	lsls	r2, r3, #3
 801a92c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801a92e:	18d3      	adds	r3, r2, r3
 801a930:	4aa1      	ldr	r2, [pc, #644]	@ (801abb8 <HAL_PCD_EP_DB_Transmit+0x378>)
 801a932:	4694      	mov	ip, r2
 801a934:	4463      	add	r3, ip
 801a936:	633b      	str	r3, [r7, #48]	@ 0x30
 801a938:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a93a:	2200      	movs	r2, #0
 801a93c:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 801a93e:	68fb      	ldr	r3, [r7, #12]
 801a940:	681b      	ldr	r3, [r3, #0]
 801a942:	627b      	str	r3, [r7, #36]	@ 0x24
 801a944:	68bb      	ldr	r3, [r7, #8]
 801a946:	785b      	ldrb	r3, [r3, #1]
 801a948:	2b00      	cmp	r3, #0
 801a94a:	d125      	bne.n	801a998 <HAL_PCD_EP_DB_Transmit+0x158>
 801a94c:	68fb      	ldr	r3, [r7, #12]
 801a94e:	681b      	ldr	r3, [r3, #0]
 801a950:	61fb      	str	r3, [r7, #28]
 801a952:	68fb      	ldr	r3, [r7, #12]
 801a954:	681b      	ldr	r3, [r3, #0]
 801a956:	2250      	movs	r2, #80	@ 0x50
 801a958:	5a9b      	ldrh	r3, [r3, r2]
 801a95a:	b29b      	uxth	r3, r3
 801a95c:	001a      	movs	r2, r3
 801a95e:	69fb      	ldr	r3, [r7, #28]
 801a960:	189b      	adds	r3, r3, r2
 801a962:	61fb      	str	r3, [r7, #28]
 801a964:	68bb      	ldr	r3, [r7, #8]
 801a966:	781b      	ldrb	r3, [r3, #0]
 801a968:	00da      	lsls	r2, r3, #3
 801a96a:	69fb      	ldr	r3, [r7, #28]
 801a96c:	18d3      	adds	r3, r2, r3
 801a96e:	4a94      	ldr	r2, [pc, #592]	@ (801abc0 <HAL_PCD_EP_DB_Transmit+0x380>)
 801a970:	4694      	mov	ip, r2
 801a972:	4463      	add	r3, ip
 801a974:	61bb      	str	r3, [r7, #24]
 801a976:	69bb      	ldr	r3, [r7, #24]
 801a978:	881b      	ldrh	r3, [r3, #0]
 801a97a:	b29b      	uxth	r3, r3
 801a97c:	059b      	lsls	r3, r3, #22
 801a97e:	0d9b      	lsrs	r3, r3, #22
 801a980:	b29a      	uxth	r2, r3
 801a982:	69bb      	ldr	r3, [r7, #24]
 801a984:	801a      	strh	r2, [r3, #0]
 801a986:	69bb      	ldr	r3, [r7, #24]
 801a988:	881b      	ldrh	r3, [r3, #0]
 801a98a:	b29b      	uxth	r3, r3
 801a98c:	4a8b      	ldr	r2, [pc, #556]	@ (801abbc <HAL_PCD_EP_DB_Transmit+0x37c>)
 801a98e:	4313      	orrs	r3, r2
 801a990:	b29a      	uxth	r2, r3
 801a992:	69bb      	ldr	r3, [r7, #24]
 801a994:	801a      	strh	r2, [r3, #0]
 801a996:	e018      	b.n	801a9ca <HAL_PCD_EP_DB_Transmit+0x18a>
 801a998:	68bb      	ldr	r3, [r7, #8]
 801a99a:	785b      	ldrb	r3, [r3, #1]
 801a99c:	2b01      	cmp	r3, #1
 801a99e:	d114      	bne.n	801a9ca <HAL_PCD_EP_DB_Transmit+0x18a>
 801a9a0:	68fb      	ldr	r3, [r7, #12]
 801a9a2:	681b      	ldr	r3, [r3, #0]
 801a9a4:	2250      	movs	r2, #80	@ 0x50
 801a9a6:	5a9b      	ldrh	r3, [r3, r2]
 801a9a8:	b29b      	uxth	r3, r3
 801a9aa:	001a      	movs	r2, r3
 801a9ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a9ae:	189b      	adds	r3, r3, r2
 801a9b0:	627b      	str	r3, [r7, #36]	@ 0x24
 801a9b2:	68bb      	ldr	r3, [r7, #8]
 801a9b4:	781b      	ldrb	r3, [r3, #0]
 801a9b6:	00da      	lsls	r2, r3, #3
 801a9b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a9ba:	18d3      	adds	r3, r2, r3
 801a9bc:	4a80      	ldr	r2, [pc, #512]	@ (801abc0 <HAL_PCD_EP_DB_Transmit+0x380>)
 801a9be:	4694      	mov	ip, r2
 801a9c0:	4463      	add	r3, ip
 801a9c2:	623b      	str	r3, [r7, #32]
 801a9c4:	6a3b      	ldr	r3, [r7, #32]
 801a9c6:	2200      	movs	r2, #0
 801a9c8:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 801a9ca:	68bb      	ldr	r3, [r7, #8]
 801a9cc:	781a      	ldrb	r2, [r3, #0]
 801a9ce:	68fb      	ldr	r3, [r7, #12]
 801a9d0:	0011      	movs	r1, r2
 801a9d2:	0018      	movs	r0, r3
 801a9d4:	f008 fd44 	bl	8023460 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 801a9d8:	1dbb      	adds	r3, r7, #6
 801a9da:	881a      	ldrh	r2, [r3, #0]
 801a9dc:	2380      	movs	r3, #128	@ 0x80
 801a9de:	01db      	lsls	r3, r3, #7
 801a9e0:	4013      	ands	r3, r2
 801a9e2:	d100      	bne.n	801a9e6 <HAL_PCD_EP_DB_Transmit+0x1a6>
 801a9e4:	e309      	b.n	801affa <HAL_PCD_EP_DB_Transmit+0x7ba>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 801a9e6:	68fb      	ldr	r3, [r7, #12]
 801a9e8:	681b      	ldr	r3, [r3, #0]
 801a9ea:	001a      	movs	r2, r3
 801a9ec:	68bb      	ldr	r3, [r7, #8]
 801a9ee:	781b      	ldrb	r3, [r3, #0]
 801a9f0:	009b      	lsls	r3, r3, #2
 801a9f2:	18d3      	adds	r3, r2, r3
 801a9f4:	881b      	ldrh	r3, [r3, #0]
 801a9f6:	b29a      	uxth	r2, r3
 801a9f8:	2016      	movs	r0, #22
 801a9fa:	183b      	adds	r3, r7, r0
 801a9fc:	4971      	ldr	r1, [pc, #452]	@ (801abc4 <HAL_PCD_EP_DB_Transmit+0x384>)
 801a9fe:	400a      	ands	r2, r1
 801aa00:	801a      	strh	r2, [r3, #0]
 801aa02:	68fb      	ldr	r3, [r7, #12]
 801aa04:	681b      	ldr	r3, [r3, #0]
 801aa06:	001a      	movs	r2, r3
 801aa08:	68bb      	ldr	r3, [r7, #8]
 801aa0a:	781b      	ldrb	r3, [r3, #0]
 801aa0c:	009b      	lsls	r3, r3, #2
 801aa0e:	18d3      	adds	r3, r2, r3
 801aa10:	183a      	adds	r2, r7, r0
 801aa12:	8812      	ldrh	r2, [r2, #0]
 801aa14:	496c      	ldr	r1, [pc, #432]	@ (801abc8 <HAL_PCD_EP_DB_Transmit+0x388>)
 801aa16:	430a      	orrs	r2, r1
 801aa18:	b292      	uxth	r2, r2
 801aa1a:	801a      	strh	r2, [r3, #0]
 801aa1c:	e2ed      	b.n	801affa <HAL_PCD_EP_DB_Transmit+0x7ba>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 801aa1e:	1dbb      	adds	r3, r7, #6
 801aa20:	881a      	ldrh	r2, [r3, #0]
 801aa22:	2380      	movs	r3, #128	@ 0x80
 801aa24:	01db      	lsls	r3, r3, #7
 801aa26:	4013      	ands	r3, r2
 801aa28:	d01a      	beq.n	801aa60 <HAL_PCD_EP_DB_Transmit+0x220>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 801aa2a:	68fb      	ldr	r3, [r7, #12]
 801aa2c:	681b      	ldr	r3, [r3, #0]
 801aa2e:	001a      	movs	r2, r3
 801aa30:	68bb      	ldr	r3, [r7, #8]
 801aa32:	781b      	ldrb	r3, [r3, #0]
 801aa34:	009b      	lsls	r3, r3, #2
 801aa36:	18d3      	adds	r3, r2, r3
 801aa38:	881b      	ldrh	r3, [r3, #0]
 801aa3a:	b29a      	uxth	r2, r3
 801aa3c:	208a      	movs	r0, #138	@ 0x8a
 801aa3e:	183b      	adds	r3, r7, r0
 801aa40:	4960      	ldr	r1, [pc, #384]	@ (801abc4 <HAL_PCD_EP_DB_Transmit+0x384>)
 801aa42:	400a      	ands	r2, r1
 801aa44:	801a      	strh	r2, [r3, #0]
 801aa46:	68fb      	ldr	r3, [r7, #12]
 801aa48:	681b      	ldr	r3, [r3, #0]
 801aa4a:	001a      	movs	r2, r3
 801aa4c:	68bb      	ldr	r3, [r7, #8]
 801aa4e:	781b      	ldrb	r3, [r3, #0]
 801aa50:	009b      	lsls	r3, r3, #2
 801aa52:	18d3      	adds	r3, r2, r3
 801aa54:	183a      	adds	r2, r7, r0
 801aa56:	8812      	ldrh	r2, [r2, #0]
 801aa58:	495b      	ldr	r1, [pc, #364]	@ (801abc8 <HAL_PCD_EP_DB_Transmit+0x388>)
 801aa5a:	430a      	orrs	r2, r1
 801aa5c:	b292      	uxth	r2, r2
 801aa5e:	801a      	strh	r2, [r3, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 801aa60:	68bb      	ldr	r3, [r7, #8]
 801aa62:	2224      	movs	r2, #36	@ 0x24
 801aa64:	5c9b      	ldrb	r3, [r3, r2]
 801aa66:	2b01      	cmp	r3, #1
 801aa68:	d000      	beq.n	801aa6c <HAL_PCD_EP_DB_Transmit+0x22c>
 801aa6a:	e2c6      	b.n	801affa <HAL_PCD_EP_DB_Transmit+0x7ba>
      {
        ep->xfer_buff += TxPctSize;
 801aa6c:	68bb      	ldr	r3, [r7, #8]
 801aa6e:	695a      	ldr	r2, [r3, #20]
 801aa70:	2186      	movs	r1, #134	@ 0x86
 801aa72:	187b      	adds	r3, r7, r1
 801aa74:	881b      	ldrh	r3, [r3, #0]
 801aa76:	18d2      	adds	r2, r2, r3
 801aa78:	68bb      	ldr	r3, [r7, #8]
 801aa7a:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 801aa7c:	68bb      	ldr	r3, [r7, #8]
 801aa7e:	69da      	ldr	r2, [r3, #28]
 801aa80:	187b      	adds	r3, r7, r1
 801aa82:	881b      	ldrh	r3, [r3, #0]
 801aa84:	18d2      	adds	r2, r2, r3
 801aa86:	68bb      	ldr	r3, [r7, #8]
 801aa88:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 801aa8a:	68bb      	ldr	r3, [r7, #8]
 801aa8c:	6a1a      	ldr	r2, [r3, #32]
 801aa8e:	68bb      	ldr	r3, [r7, #8]
 801aa90:	691b      	ldr	r3, [r3, #16]
 801aa92:	429a      	cmp	r2, r3
 801aa94:	d30c      	bcc.n	801aab0 <HAL_PCD_EP_DB_Transmit+0x270>
        {
          len = ep->maxpacket;
 801aa96:	68bb      	ldr	r3, [r7, #8]
 801aa98:	691b      	ldr	r3, [r3, #16]
 801aa9a:	218c      	movs	r1, #140	@ 0x8c
 801aa9c:	187a      	adds	r2, r7, r1
 801aa9e:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db -= len;
 801aaa0:	68bb      	ldr	r3, [r7, #8]
 801aaa2:	6a1a      	ldr	r2, [r3, #32]
 801aaa4:	187b      	adds	r3, r7, r1
 801aaa6:	681b      	ldr	r3, [r3, #0]
 801aaa8:	1ad2      	subs	r2, r2, r3
 801aaaa:	68bb      	ldr	r3, [r7, #8]
 801aaac:	621a      	str	r2, [r3, #32]
 801aaae:	e01a      	b.n	801aae6 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 801aab0:	68bb      	ldr	r3, [r7, #8]
 801aab2:	6a1b      	ldr	r3, [r3, #32]
 801aab4:	2b00      	cmp	r3, #0
 801aab6:	d10a      	bne.n	801aace <HAL_PCD_EP_DB_Transmit+0x28e>
        {
          len = TxPctSize;
 801aab8:	2386      	movs	r3, #134	@ 0x86
 801aaba:	18fb      	adds	r3, r7, r3
 801aabc:	881b      	ldrh	r3, [r3, #0]
 801aabe:	228c      	movs	r2, #140	@ 0x8c
 801aac0:	18ba      	adds	r2, r7, r2
 801aac2:	6013      	str	r3, [r2, #0]
          ep->xfer_fill_db = 0U;
 801aac4:	68bb      	ldr	r3, [r7, #8]
 801aac6:	2224      	movs	r2, #36	@ 0x24
 801aac8:	2100      	movs	r1, #0
 801aaca:	5499      	strb	r1, [r3, r2]
 801aacc:	e00b      	b.n	801aae6 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 801aace:	68bb      	ldr	r3, [r7, #8]
 801aad0:	2224      	movs	r2, #36	@ 0x24
 801aad2:	2100      	movs	r1, #0
 801aad4:	5499      	strb	r1, [r3, r2]
          len = ep->xfer_len_db;
 801aad6:	68bb      	ldr	r3, [r7, #8]
 801aad8:	6a1b      	ldr	r3, [r3, #32]
 801aada:	228c      	movs	r2, #140	@ 0x8c
 801aadc:	18ba      	adds	r2, r7, r2
 801aade:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db = 0U;
 801aae0:	68bb      	ldr	r3, [r7, #8]
 801aae2:	2200      	movs	r2, #0
 801aae4:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 801aae6:	68bb      	ldr	r3, [r7, #8]
 801aae8:	785b      	ldrb	r3, [r3, #1]
 801aaea:	2b00      	cmp	r3, #0
 801aaec:	d000      	beq.n	801aaf0 <HAL_PCD_EP_DB_Transmit+0x2b0>
 801aaee:	e06d      	b.n	801abcc <HAL_PCD_EP_DB_Transmit+0x38c>
 801aaf0:	68fb      	ldr	r3, [r7, #12]
 801aaf2:	681b      	ldr	r3, [r3, #0]
 801aaf4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801aaf6:	68fb      	ldr	r3, [r7, #12]
 801aaf8:	681b      	ldr	r3, [r3, #0]
 801aafa:	2250      	movs	r2, #80	@ 0x50
 801aafc:	5a9b      	ldrh	r3, [r3, r2]
 801aafe:	b29b      	uxth	r3, r3
 801ab00:	001a      	movs	r2, r3
 801ab02:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801ab04:	189b      	adds	r3, r3, r2
 801ab06:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801ab08:	68bb      	ldr	r3, [r7, #8]
 801ab0a:	781b      	ldrb	r3, [r3, #0]
 801ab0c:	00da      	lsls	r2, r3, #3
 801ab0e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801ab10:	18d3      	adds	r3, r2, r3
 801ab12:	4a29      	ldr	r2, [pc, #164]	@ (801abb8 <HAL_PCD_EP_DB_Transmit+0x378>)
 801ab14:	4694      	mov	ip, r2
 801ab16:	4463      	add	r3, ip
 801ab18:	63bb      	str	r3, [r7, #56]	@ 0x38
 801ab1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801ab1c:	881b      	ldrh	r3, [r3, #0]
 801ab1e:	b29b      	uxth	r3, r3
 801ab20:	059b      	lsls	r3, r3, #22
 801ab22:	0d9b      	lsrs	r3, r3, #22
 801ab24:	b29a      	uxth	r2, r3
 801ab26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801ab28:	801a      	strh	r2, [r3, #0]
 801ab2a:	228c      	movs	r2, #140	@ 0x8c
 801ab2c:	18bb      	adds	r3, r7, r2
 801ab2e:	681b      	ldr	r3, [r3, #0]
 801ab30:	2b3e      	cmp	r3, #62	@ 0x3e
 801ab32:	d91a      	bls.n	801ab6a <HAL_PCD_EP_DB_Transmit+0x32a>
 801ab34:	18bb      	adds	r3, r7, r2
 801ab36:	681b      	ldr	r3, [r3, #0]
 801ab38:	095b      	lsrs	r3, r3, #5
 801ab3a:	64bb      	str	r3, [r7, #72]	@ 0x48
 801ab3c:	18bb      	adds	r3, r7, r2
 801ab3e:	681b      	ldr	r3, [r3, #0]
 801ab40:	221f      	movs	r2, #31
 801ab42:	4013      	ands	r3, r2
 801ab44:	d102      	bne.n	801ab4c <HAL_PCD_EP_DB_Transmit+0x30c>
 801ab46:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801ab48:	3b01      	subs	r3, #1
 801ab4a:	64bb      	str	r3, [r7, #72]	@ 0x48
 801ab4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801ab4e:	881b      	ldrh	r3, [r3, #0]
 801ab50:	b29a      	uxth	r2, r3
 801ab52:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801ab54:	b29b      	uxth	r3, r3
 801ab56:	029b      	lsls	r3, r3, #10
 801ab58:	b29b      	uxth	r3, r3
 801ab5a:	4313      	orrs	r3, r2
 801ab5c:	b29b      	uxth	r3, r3
 801ab5e:	4a17      	ldr	r2, [pc, #92]	@ (801abbc <HAL_PCD_EP_DB_Transmit+0x37c>)
 801ab60:	4313      	orrs	r3, r2
 801ab62:	b29a      	uxth	r2, r3
 801ab64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801ab66:	801a      	strh	r2, [r3, #0]
 801ab68:	e04f      	b.n	801ac0a <HAL_PCD_EP_DB_Transmit+0x3ca>
 801ab6a:	238c      	movs	r3, #140	@ 0x8c
 801ab6c:	18fb      	adds	r3, r7, r3
 801ab6e:	681b      	ldr	r3, [r3, #0]
 801ab70:	2b00      	cmp	r3, #0
 801ab72:	d108      	bne.n	801ab86 <HAL_PCD_EP_DB_Transmit+0x346>
 801ab74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801ab76:	881b      	ldrh	r3, [r3, #0]
 801ab78:	b29b      	uxth	r3, r3
 801ab7a:	4a10      	ldr	r2, [pc, #64]	@ (801abbc <HAL_PCD_EP_DB_Transmit+0x37c>)
 801ab7c:	4313      	orrs	r3, r2
 801ab7e:	b29a      	uxth	r2, r3
 801ab80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801ab82:	801a      	strh	r2, [r3, #0]
 801ab84:	e041      	b.n	801ac0a <HAL_PCD_EP_DB_Transmit+0x3ca>
 801ab86:	228c      	movs	r2, #140	@ 0x8c
 801ab88:	18bb      	adds	r3, r7, r2
 801ab8a:	681b      	ldr	r3, [r3, #0]
 801ab8c:	085b      	lsrs	r3, r3, #1
 801ab8e:	64bb      	str	r3, [r7, #72]	@ 0x48
 801ab90:	18bb      	adds	r3, r7, r2
 801ab92:	681b      	ldr	r3, [r3, #0]
 801ab94:	2201      	movs	r2, #1
 801ab96:	4013      	ands	r3, r2
 801ab98:	d002      	beq.n	801aba0 <HAL_PCD_EP_DB_Transmit+0x360>
 801ab9a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801ab9c:	3301      	adds	r3, #1
 801ab9e:	64bb      	str	r3, [r7, #72]	@ 0x48
 801aba0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801aba2:	881b      	ldrh	r3, [r3, #0]
 801aba4:	b29a      	uxth	r2, r3
 801aba6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801aba8:	b29b      	uxth	r3, r3
 801abaa:	029b      	lsls	r3, r3, #10
 801abac:	b29b      	uxth	r3, r3
 801abae:	4313      	orrs	r3, r2
 801abb0:	b29a      	uxth	r2, r3
 801abb2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801abb4:	801a      	strh	r2, [r3, #0]
 801abb6:	e028      	b.n	801ac0a <HAL_PCD_EP_DB_Transmit+0x3ca>
 801abb8:	00000402 	.word	0x00000402
 801abbc:	ffff8000 	.word	0xffff8000
 801abc0:	00000406 	.word	0x00000406
 801abc4:	ffff8f8f 	.word	0xffff8f8f
 801abc8:	ffffc080 	.word	0xffffc080
 801abcc:	68bb      	ldr	r3, [r7, #8]
 801abce:	785b      	ldrb	r3, [r3, #1]
 801abd0:	2b01      	cmp	r3, #1
 801abd2:	d11a      	bne.n	801ac0a <HAL_PCD_EP_DB_Transmit+0x3ca>
 801abd4:	68fb      	ldr	r3, [r7, #12]
 801abd6:	681b      	ldr	r3, [r3, #0]
 801abd8:	647b      	str	r3, [r7, #68]	@ 0x44
 801abda:	68fb      	ldr	r3, [r7, #12]
 801abdc:	681b      	ldr	r3, [r3, #0]
 801abde:	2250      	movs	r2, #80	@ 0x50
 801abe0:	5a9b      	ldrh	r3, [r3, r2]
 801abe2:	b29b      	uxth	r3, r3
 801abe4:	001a      	movs	r2, r3
 801abe6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801abe8:	189b      	adds	r3, r3, r2
 801abea:	647b      	str	r3, [r7, #68]	@ 0x44
 801abec:	68bb      	ldr	r3, [r7, #8]
 801abee:	781b      	ldrb	r3, [r3, #0]
 801abf0:	00da      	lsls	r2, r3, #3
 801abf2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801abf4:	18d3      	adds	r3, r2, r3
 801abf6:	4adb      	ldr	r2, [pc, #876]	@ (801af64 <HAL_PCD_EP_DB_Transmit+0x724>)
 801abf8:	4694      	mov	ip, r2
 801abfa:	4463      	add	r3, ip
 801abfc:	643b      	str	r3, [r7, #64]	@ 0x40
 801abfe:	238c      	movs	r3, #140	@ 0x8c
 801ac00:	18fb      	adds	r3, r7, r3
 801ac02:	681b      	ldr	r3, [r3, #0]
 801ac04:	b29a      	uxth	r2, r3
 801ac06:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801ac08:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 801ac0a:	68fb      	ldr	r3, [r7, #12]
 801ac0c:	6818      	ldr	r0, [r3, #0]
 801ac0e:	68bb      	ldr	r3, [r7, #8]
 801ac10:	6959      	ldr	r1, [r3, #20]
 801ac12:	68bb      	ldr	r3, [r7, #8]
 801ac14:	891a      	ldrh	r2, [r3, #8]
 801ac16:	238c      	movs	r3, #140	@ 0x8c
 801ac18:	18fb      	adds	r3, r7, r3
 801ac1a:	681b      	ldr	r3, [r3, #0]
 801ac1c:	b29b      	uxth	r3, r3
 801ac1e:	f006 fb8d 	bl	802133c <USB_WritePMA>
 801ac22:	e1ea      	b.n	801affa <HAL_PCD_EP_DB_Transmit+0x7ba>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 801ac24:	68fb      	ldr	r3, [r7, #12]
 801ac26:	681b      	ldr	r3, [r3, #0]
 801ac28:	2250      	movs	r2, #80	@ 0x50
 801ac2a:	5a9b      	ldrh	r3, [r3, r2]
 801ac2c:	b29b      	uxth	r3, r3
 801ac2e:	001a      	movs	r2, r3
 801ac30:	68bb      	ldr	r3, [r7, #8]
 801ac32:	781b      	ldrb	r3, [r3, #0]
 801ac34:	00db      	lsls	r3, r3, #3
 801ac36:	18d2      	adds	r2, r2, r3
 801ac38:	68fb      	ldr	r3, [r7, #12]
 801ac3a:	681b      	ldr	r3, [r3, #0]
 801ac3c:	18d3      	adds	r3, r2, r3
 801ac3e:	4aca      	ldr	r2, [pc, #808]	@ (801af68 <HAL_PCD_EP_DB_Transmit+0x728>)
 801ac40:	4694      	mov	ip, r2
 801ac42:	4463      	add	r3, ip
 801ac44:	881a      	ldrh	r2, [r3, #0]
 801ac46:	2186      	movs	r1, #134	@ 0x86
 801ac48:	187b      	adds	r3, r7, r1
 801ac4a:	0592      	lsls	r2, r2, #22
 801ac4c:	0d92      	lsrs	r2, r2, #22
 801ac4e:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= TxPctSize)
 801ac50:	68bb      	ldr	r3, [r7, #8]
 801ac52:	699a      	ldr	r2, [r3, #24]
 801ac54:	187b      	adds	r3, r7, r1
 801ac56:	881b      	ldrh	r3, [r3, #0]
 801ac58:	429a      	cmp	r2, r3
 801ac5a:	d307      	bcc.n	801ac6c <HAL_PCD_EP_DB_Transmit+0x42c>
    {
      ep->xfer_len -= TxPctSize;
 801ac5c:	68bb      	ldr	r3, [r7, #8]
 801ac5e:	699a      	ldr	r2, [r3, #24]
 801ac60:	187b      	adds	r3, r7, r1
 801ac62:	881b      	ldrh	r3, [r3, #0]
 801ac64:	1ad2      	subs	r2, r2, r3
 801ac66:	68bb      	ldr	r3, [r7, #8]
 801ac68:	619a      	str	r2, [r3, #24]
 801ac6a:	e002      	b.n	801ac72 <HAL_PCD_EP_DB_Transmit+0x432>
    }
    else
    {
      ep->xfer_len = 0U;
 801ac6c:	68bb      	ldr	r3, [r7, #8]
 801ac6e:	2200      	movs	r2, #0
 801ac70:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 801ac72:	68bb      	ldr	r3, [r7, #8]
 801ac74:	699b      	ldr	r3, [r3, #24]
 801ac76:	2b00      	cmp	r3, #0
 801ac78:	d000      	beq.n	801ac7c <HAL_PCD_EP_DB_Transmit+0x43c>
 801ac7a:	e0bb      	b.n	801adf4 <HAL_PCD_EP_DB_Transmit+0x5b4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 801ac7c:	68bb      	ldr	r3, [r7, #8]
 801ac7e:	785b      	ldrb	r3, [r3, #1]
 801ac80:	2b00      	cmp	r3, #0
 801ac82:	d125      	bne.n	801acd0 <HAL_PCD_EP_DB_Transmit+0x490>
 801ac84:	68fb      	ldr	r3, [r7, #12]
 801ac86:	681b      	ldr	r3, [r3, #0]
 801ac88:	67fb      	str	r3, [r7, #124]	@ 0x7c
 801ac8a:	68fb      	ldr	r3, [r7, #12]
 801ac8c:	681b      	ldr	r3, [r3, #0]
 801ac8e:	2250      	movs	r2, #80	@ 0x50
 801ac90:	5a9b      	ldrh	r3, [r3, r2]
 801ac92:	b29b      	uxth	r3, r3
 801ac94:	001a      	movs	r2, r3
 801ac96:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 801ac98:	189b      	adds	r3, r3, r2
 801ac9a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 801ac9c:	68bb      	ldr	r3, [r7, #8]
 801ac9e:	781b      	ldrb	r3, [r3, #0]
 801aca0:	00da      	lsls	r2, r3, #3
 801aca2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 801aca4:	18d3      	adds	r3, r2, r3
 801aca6:	4aaf      	ldr	r2, [pc, #700]	@ (801af64 <HAL_PCD_EP_DB_Transmit+0x724>)
 801aca8:	4694      	mov	ip, r2
 801acaa:	4463      	add	r3, ip
 801acac:	67bb      	str	r3, [r7, #120]	@ 0x78
 801acae:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801acb0:	881b      	ldrh	r3, [r3, #0]
 801acb2:	b29b      	uxth	r3, r3
 801acb4:	059b      	lsls	r3, r3, #22
 801acb6:	0d9b      	lsrs	r3, r3, #22
 801acb8:	b29a      	uxth	r2, r3
 801acba:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801acbc:	801a      	strh	r2, [r3, #0]
 801acbe:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801acc0:	881b      	ldrh	r3, [r3, #0]
 801acc2:	b29b      	uxth	r3, r3
 801acc4:	4aa9      	ldr	r2, [pc, #676]	@ (801af6c <HAL_PCD_EP_DB_Transmit+0x72c>)
 801acc6:	4313      	orrs	r3, r2
 801acc8:	b29a      	uxth	r2, r3
 801acca:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801accc:	801a      	strh	r2, [r3, #0]
 801acce:	e01b      	b.n	801ad08 <HAL_PCD_EP_DB_Transmit+0x4c8>
 801acd0:	68bb      	ldr	r3, [r7, #8]
 801acd2:	785b      	ldrb	r3, [r3, #1]
 801acd4:	2b01      	cmp	r3, #1
 801acd6:	d117      	bne.n	801ad08 <HAL_PCD_EP_DB_Transmit+0x4c8>
 801acd8:	68fb      	ldr	r3, [r7, #12]
 801acda:	681b      	ldr	r3, [r3, #0]
 801acdc:	667b      	str	r3, [r7, #100]	@ 0x64
 801acde:	68fb      	ldr	r3, [r7, #12]
 801ace0:	681b      	ldr	r3, [r3, #0]
 801ace2:	2250      	movs	r2, #80	@ 0x50
 801ace4:	5a9b      	ldrh	r3, [r3, r2]
 801ace6:	b29b      	uxth	r3, r3
 801ace8:	001a      	movs	r2, r3
 801acea:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801acec:	189b      	adds	r3, r3, r2
 801acee:	667b      	str	r3, [r7, #100]	@ 0x64
 801acf0:	68bb      	ldr	r3, [r7, #8]
 801acf2:	781b      	ldrb	r3, [r3, #0]
 801acf4:	00da      	lsls	r2, r3, #3
 801acf6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801acf8:	18d3      	adds	r3, r2, r3
 801acfa:	4a9a      	ldr	r2, [pc, #616]	@ (801af64 <HAL_PCD_EP_DB_Transmit+0x724>)
 801acfc:	4694      	mov	ip, r2
 801acfe:	4463      	add	r3, ip
 801ad00:	663b      	str	r3, [r7, #96]	@ 0x60
 801ad02:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801ad04:	2200      	movs	r2, #0
 801ad06:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 801ad08:	68fb      	ldr	r3, [r7, #12]
 801ad0a:	681b      	ldr	r3, [r3, #0]
 801ad0c:	677b      	str	r3, [r7, #116]	@ 0x74
 801ad0e:	68bb      	ldr	r3, [r7, #8]
 801ad10:	785b      	ldrb	r3, [r3, #1]
 801ad12:	2b00      	cmp	r3, #0
 801ad14:	d12b      	bne.n	801ad6e <HAL_PCD_EP_DB_Transmit+0x52e>
 801ad16:	68fb      	ldr	r3, [r7, #12]
 801ad18:	681b      	ldr	r3, [r3, #0]
 801ad1a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 801ad1c:	68fb      	ldr	r3, [r7, #12]
 801ad1e:	681b      	ldr	r3, [r3, #0]
 801ad20:	2250      	movs	r2, #80	@ 0x50
 801ad22:	5a9b      	ldrh	r3, [r3, r2]
 801ad24:	b29b      	uxth	r3, r3
 801ad26:	001a      	movs	r2, r3
 801ad28:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801ad2a:	189b      	adds	r3, r3, r2
 801ad2c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 801ad2e:	68bb      	ldr	r3, [r7, #8]
 801ad30:	781b      	ldrb	r3, [r3, #0]
 801ad32:	00da      	lsls	r2, r3, #3
 801ad34:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801ad36:	18d3      	adds	r3, r2, r3
 801ad38:	4a8b      	ldr	r2, [pc, #556]	@ (801af68 <HAL_PCD_EP_DB_Transmit+0x728>)
 801ad3a:	4694      	mov	ip, r2
 801ad3c:	4463      	add	r3, ip
 801ad3e:	2180      	movs	r1, #128	@ 0x80
 801ad40:	187a      	adds	r2, r7, r1
 801ad42:	6013      	str	r3, [r2, #0]
 801ad44:	187b      	adds	r3, r7, r1
 801ad46:	681b      	ldr	r3, [r3, #0]
 801ad48:	881b      	ldrh	r3, [r3, #0]
 801ad4a:	b29b      	uxth	r3, r3
 801ad4c:	059b      	lsls	r3, r3, #22
 801ad4e:	0d9b      	lsrs	r3, r3, #22
 801ad50:	b29a      	uxth	r2, r3
 801ad52:	187b      	adds	r3, r7, r1
 801ad54:	681b      	ldr	r3, [r3, #0]
 801ad56:	801a      	strh	r2, [r3, #0]
 801ad58:	187b      	adds	r3, r7, r1
 801ad5a:	681b      	ldr	r3, [r3, #0]
 801ad5c:	881b      	ldrh	r3, [r3, #0]
 801ad5e:	b29b      	uxth	r3, r3
 801ad60:	4a82      	ldr	r2, [pc, #520]	@ (801af6c <HAL_PCD_EP_DB_Transmit+0x72c>)
 801ad62:	4313      	orrs	r3, r2
 801ad64:	b29a      	uxth	r2, r3
 801ad66:	187b      	adds	r3, r7, r1
 801ad68:	681b      	ldr	r3, [r3, #0]
 801ad6a:	801a      	strh	r2, [r3, #0]
 801ad6c:	e018      	b.n	801ada0 <HAL_PCD_EP_DB_Transmit+0x560>
 801ad6e:	68bb      	ldr	r3, [r7, #8]
 801ad70:	785b      	ldrb	r3, [r3, #1]
 801ad72:	2b01      	cmp	r3, #1
 801ad74:	d114      	bne.n	801ada0 <HAL_PCD_EP_DB_Transmit+0x560>
 801ad76:	68fb      	ldr	r3, [r7, #12]
 801ad78:	681b      	ldr	r3, [r3, #0]
 801ad7a:	2250      	movs	r2, #80	@ 0x50
 801ad7c:	5a9b      	ldrh	r3, [r3, r2]
 801ad7e:	b29b      	uxth	r3, r3
 801ad80:	001a      	movs	r2, r3
 801ad82:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 801ad84:	189b      	adds	r3, r3, r2
 801ad86:	677b      	str	r3, [r7, #116]	@ 0x74
 801ad88:	68bb      	ldr	r3, [r7, #8]
 801ad8a:	781b      	ldrb	r3, [r3, #0]
 801ad8c:	00da      	lsls	r2, r3, #3
 801ad8e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 801ad90:	18d3      	adds	r3, r2, r3
 801ad92:	4a75      	ldr	r2, [pc, #468]	@ (801af68 <HAL_PCD_EP_DB_Transmit+0x728>)
 801ad94:	4694      	mov	ip, r2
 801ad96:	4463      	add	r3, ip
 801ad98:	673b      	str	r3, [r7, #112]	@ 0x70
 801ad9a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801ad9c:	2200      	movs	r2, #0
 801ad9e:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 801ada0:	68bb      	ldr	r3, [r7, #8]
 801ada2:	781a      	ldrb	r2, [r3, #0]
 801ada4:	68fb      	ldr	r3, [r7, #12]
 801ada6:	0011      	movs	r1, r2
 801ada8:	0018      	movs	r0, r3
 801adaa:	f008 fb59 	bl	8023460 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 801adae:	1dbb      	adds	r3, r7, #6
 801adb0:	881a      	ldrh	r2, [r3, #0]
 801adb2:	2380      	movs	r3, #128	@ 0x80
 801adb4:	01db      	lsls	r3, r3, #7
 801adb6:	4013      	ands	r3, r2
 801adb8:	d000      	beq.n	801adbc <HAL_PCD_EP_DB_Transmit+0x57c>
 801adba:	e11e      	b.n	801affa <HAL_PCD_EP_DB_Transmit+0x7ba>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 801adbc:	68fb      	ldr	r3, [r7, #12]
 801adbe:	681b      	ldr	r3, [r3, #0]
 801adc0:	001a      	movs	r2, r3
 801adc2:	68bb      	ldr	r3, [r7, #8]
 801adc4:	781b      	ldrb	r3, [r3, #0]
 801adc6:	009b      	lsls	r3, r3, #2
 801adc8:	18d3      	adds	r3, r2, r3
 801adca:	881b      	ldrh	r3, [r3, #0]
 801adcc:	b29a      	uxth	r2, r3
 801adce:	2088      	movs	r0, #136	@ 0x88
 801add0:	183b      	adds	r3, r7, r0
 801add2:	4967      	ldr	r1, [pc, #412]	@ (801af70 <HAL_PCD_EP_DB_Transmit+0x730>)
 801add4:	400a      	ands	r2, r1
 801add6:	801a      	strh	r2, [r3, #0]
 801add8:	68fb      	ldr	r3, [r7, #12]
 801adda:	681b      	ldr	r3, [r3, #0]
 801addc:	001a      	movs	r2, r3
 801adde:	68bb      	ldr	r3, [r7, #8]
 801ade0:	781b      	ldrb	r3, [r3, #0]
 801ade2:	009b      	lsls	r3, r3, #2
 801ade4:	18d3      	adds	r3, r2, r3
 801ade6:	183a      	adds	r2, r7, r0
 801ade8:	8812      	ldrh	r2, [r2, #0]
 801adea:	4962      	ldr	r1, [pc, #392]	@ (801af74 <HAL_PCD_EP_DB_Transmit+0x734>)
 801adec:	430a      	orrs	r2, r1
 801adee:	b292      	uxth	r2, r2
 801adf0:	801a      	strh	r2, [r3, #0]
 801adf2:	e102      	b.n	801affa <HAL_PCD_EP_DB_Transmit+0x7ba>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 801adf4:	1dbb      	adds	r3, r7, #6
 801adf6:	881a      	ldrh	r2, [r3, #0]
 801adf8:	2380      	movs	r3, #128	@ 0x80
 801adfa:	01db      	lsls	r3, r3, #7
 801adfc:	4013      	ands	r3, r2
 801adfe:	d11a      	bne.n	801ae36 <HAL_PCD_EP_DB_Transmit+0x5f6>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 801ae00:	68fb      	ldr	r3, [r7, #12]
 801ae02:	681b      	ldr	r3, [r3, #0]
 801ae04:	001a      	movs	r2, r3
 801ae06:	68bb      	ldr	r3, [r7, #8]
 801ae08:	781b      	ldrb	r3, [r3, #0]
 801ae0a:	009b      	lsls	r3, r3, #2
 801ae0c:	18d3      	adds	r3, r2, r3
 801ae0e:	881b      	ldrh	r3, [r3, #0]
 801ae10:	b29a      	uxth	r2, r3
 801ae12:	204e      	movs	r0, #78	@ 0x4e
 801ae14:	183b      	adds	r3, r7, r0
 801ae16:	4956      	ldr	r1, [pc, #344]	@ (801af70 <HAL_PCD_EP_DB_Transmit+0x730>)
 801ae18:	400a      	ands	r2, r1
 801ae1a:	801a      	strh	r2, [r3, #0]
 801ae1c:	68fb      	ldr	r3, [r7, #12]
 801ae1e:	681b      	ldr	r3, [r3, #0]
 801ae20:	001a      	movs	r2, r3
 801ae22:	68bb      	ldr	r3, [r7, #8]
 801ae24:	781b      	ldrb	r3, [r3, #0]
 801ae26:	009b      	lsls	r3, r3, #2
 801ae28:	18d3      	adds	r3, r2, r3
 801ae2a:	183a      	adds	r2, r7, r0
 801ae2c:	8812      	ldrh	r2, [r2, #0]
 801ae2e:	4951      	ldr	r1, [pc, #324]	@ (801af74 <HAL_PCD_EP_DB_Transmit+0x734>)
 801ae30:	430a      	orrs	r2, r1
 801ae32:	b292      	uxth	r2, r2
 801ae34:	801a      	strh	r2, [r3, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 801ae36:	68bb      	ldr	r3, [r7, #8]
 801ae38:	2224      	movs	r2, #36	@ 0x24
 801ae3a:	5c9b      	ldrb	r3, [r3, r2]
 801ae3c:	2b01      	cmp	r3, #1
 801ae3e:	d000      	beq.n	801ae42 <HAL_PCD_EP_DB_Transmit+0x602>
 801ae40:	e0db      	b.n	801affa <HAL_PCD_EP_DB_Transmit+0x7ba>
      {
        ep->xfer_buff += TxPctSize;
 801ae42:	68bb      	ldr	r3, [r7, #8]
 801ae44:	695a      	ldr	r2, [r3, #20]
 801ae46:	2186      	movs	r1, #134	@ 0x86
 801ae48:	187b      	adds	r3, r7, r1
 801ae4a:	881b      	ldrh	r3, [r3, #0]
 801ae4c:	18d2      	adds	r2, r2, r3
 801ae4e:	68bb      	ldr	r3, [r7, #8]
 801ae50:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 801ae52:	68bb      	ldr	r3, [r7, #8]
 801ae54:	69da      	ldr	r2, [r3, #28]
 801ae56:	187b      	adds	r3, r7, r1
 801ae58:	881b      	ldrh	r3, [r3, #0]
 801ae5a:	18d2      	adds	r2, r2, r3
 801ae5c:	68bb      	ldr	r3, [r7, #8]
 801ae5e:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 801ae60:	68bb      	ldr	r3, [r7, #8]
 801ae62:	6a1a      	ldr	r2, [r3, #32]
 801ae64:	68bb      	ldr	r3, [r7, #8]
 801ae66:	691b      	ldr	r3, [r3, #16]
 801ae68:	429a      	cmp	r2, r3
 801ae6a:	d30c      	bcc.n	801ae86 <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 801ae6c:	68bb      	ldr	r3, [r7, #8]
 801ae6e:	691b      	ldr	r3, [r3, #16]
 801ae70:	218c      	movs	r1, #140	@ 0x8c
 801ae72:	187a      	adds	r2, r7, r1
 801ae74:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db -= len;
 801ae76:	68bb      	ldr	r3, [r7, #8]
 801ae78:	6a1a      	ldr	r2, [r3, #32]
 801ae7a:	187b      	adds	r3, r7, r1
 801ae7c:	681b      	ldr	r3, [r3, #0]
 801ae7e:	1ad2      	subs	r2, r2, r3
 801ae80:	68bb      	ldr	r3, [r7, #8]
 801ae82:	621a      	str	r2, [r3, #32]
 801ae84:	e01a      	b.n	801aebc <HAL_PCD_EP_DB_Transmit+0x67c>
        }
        else if (ep->xfer_len_db == 0U)
 801ae86:	68bb      	ldr	r3, [r7, #8]
 801ae88:	6a1b      	ldr	r3, [r3, #32]
 801ae8a:	2b00      	cmp	r3, #0
 801ae8c:	d10a      	bne.n	801aea4 <HAL_PCD_EP_DB_Transmit+0x664>
        {
          len = TxPctSize;
 801ae8e:	2386      	movs	r3, #134	@ 0x86
 801ae90:	18fb      	adds	r3, r7, r3
 801ae92:	881b      	ldrh	r3, [r3, #0]
 801ae94:	228c      	movs	r2, #140	@ 0x8c
 801ae96:	18ba      	adds	r2, r7, r2
 801ae98:	6013      	str	r3, [r2, #0]
          ep->xfer_fill_db = 0U;
 801ae9a:	68bb      	ldr	r3, [r7, #8]
 801ae9c:	2224      	movs	r2, #36	@ 0x24
 801ae9e:	2100      	movs	r1, #0
 801aea0:	5499      	strb	r1, [r3, r2]
 801aea2:	e00b      	b.n	801aebc <HAL_PCD_EP_DB_Transmit+0x67c>
        }
        else
        {
          len = ep->xfer_len_db;
 801aea4:	68bb      	ldr	r3, [r7, #8]
 801aea6:	6a1b      	ldr	r3, [r3, #32]
 801aea8:	228c      	movs	r2, #140	@ 0x8c
 801aeaa:	18ba      	adds	r2, r7, r2
 801aeac:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db = 0U;
 801aeae:	68bb      	ldr	r3, [r7, #8]
 801aeb0:	2200      	movs	r2, #0
 801aeb2:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 801aeb4:	68bb      	ldr	r3, [r7, #8]
 801aeb6:	2224      	movs	r2, #36	@ 0x24
 801aeb8:	2100      	movs	r1, #0
 801aeba:	5499      	strb	r1, [r3, r2]
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 801aebc:	68fb      	ldr	r3, [r7, #12]
 801aebe:	681b      	ldr	r3, [r3, #0]
 801aec0:	657b      	str	r3, [r7, #84]	@ 0x54
 801aec2:	68bb      	ldr	r3, [r7, #8]
 801aec4:	785b      	ldrb	r3, [r3, #1]
 801aec6:	2b00      	cmp	r3, #0
 801aec8:	d000      	beq.n	801aecc <HAL_PCD_EP_DB_Transmit+0x68c>
 801aeca:	e06e      	b.n	801afaa <HAL_PCD_EP_DB_Transmit+0x76a>
 801aecc:	68fb      	ldr	r3, [r7, #12]
 801aece:	681b      	ldr	r3, [r3, #0]
 801aed0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 801aed2:	68fb      	ldr	r3, [r7, #12]
 801aed4:	681b      	ldr	r3, [r3, #0]
 801aed6:	2250      	movs	r2, #80	@ 0x50
 801aed8:	5a9b      	ldrh	r3, [r3, r2]
 801aeda:	b29b      	uxth	r3, r3
 801aedc:	001a      	movs	r2, r3
 801aede:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801aee0:	189b      	adds	r3, r3, r2
 801aee2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 801aee4:	68bb      	ldr	r3, [r7, #8]
 801aee6:	781b      	ldrb	r3, [r3, #0]
 801aee8:	00da      	lsls	r2, r3, #3
 801aeea:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801aeec:	18d3      	adds	r3, r2, r3
 801aeee:	4a1e      	ldr	r2, [pc, #120]	@ (801af68 <HAL_PCD_EP_DB_Transmit+0x728>)
 801aef0:	4694      	mov	ip, r2
 801aef2:	4463      	add	r3, ip
 801aef4:	65bb      	str	r3, [r7, #88]	@ 0x58
 801aef6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801aef8:	881b      	ldrh	r3, [r3, #0]
 801aefa:	b29b      	uxth	r3, r3
 801aefc:	059b      	lsls	r3, r3, #22
 801aefe:	0d9b      	lsrs	r3, r3, #22
 801af00:	b29a      	uxth	r2, r3
 801af02:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801af04:	801a      	strh	r2, [r3, #0]
 801af06:	228c      	movs	r2, #140	@ 0x8c
 801af08:	18bb      	adds	r3, r7, r2
 801af0a:	681b      	ldr	r3, [r3, #0]
 801af0c:	2b3e      	cmp	r3, #62	@ 0x3e
 801af0e:	d91a      	bls.n	801af46 <HAL_PCD_EP_DB_Transmit+0x706>
 801af10:	18bb      	adds	r3, r7, r2
 801af12:	681b      	ldr	r3, [r3, #0]
 801af14:	095b      	lsrs	r3, r3, #5
 801af16:	66bb      	str	r3, [r7, #104]	@ 0x68
 801af18:	18bb      	adds	r3, r7, r2
 801af1a:	681b      	ldr	r3, [r3, #0]
 801af1c:	221f      	movs	r2, #31
 801af1e:	4013      	ands	r3, r2
 801af20:	d102      	bne.n	801af28 <HAL_PCD_EP_DB_Transmit+0x6e8>
 801af22:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801af24:	3b01      	subs	r3, #1
 801af26:	66bb      	str	r3, [r7, #104]	@ 0x68
 801af28:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801af2a:	881b      	ldrh	r3, [r3, #0]
 801af2c:	b29a      	uxth	r2, r3
 801af2e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801af30:	b29b      	uxth	r3, r3
 801af32:	029b      	lsls	r3, r3, #10
 801af34:	b29b      	uxth	r3, r3
 801af36:	4313      	orrs	r3, r2
 801af38:	b29b      	uxth	r3, r3
 801af3a:	4a0c      	ldr	r2, [pc, #48]	@ (801af6c <HAL_PCD_EP_DB_Transmit+0x72c>)
 801af3c:	4313      	orrs	r3, r2
 801af3e:	b29a      	uxth	r2, r3
 801af40:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801af42:	801a      	strh	r2, [r3, #0]
 801af44:	e04d      	b.n	801afe2 <HAL_PCD_EP_DB_Transmit+0x7a2>
 801af46:	238c      	movs	r3, #140	@ 0x8c
 801af48:	18fb      	adds	r3, r7, r3
 801af4a:	681b      	ldr	r3, [r3, #0]
 801af4c:	2b00      	cmp	r3, #0
 801af4e:	d113      	bne.n	801af78 <HAL_PCD_EP_DB_Transmit+0x738>
 801af50:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801af52:	881b      	ldrh	r3, [r3, #0]
 801af54:	b29b      	uxth	r3, r3
 801af56:	4a05      	ldr	r2, [pc, #20]	@ (801af6c <HAL_PCD_EP_DB_Transmit+0x72c>)
 801af58:	4313      	orrs	r3, r2
 801af5a:	b29a      	uxth	r2, r3
 801af5c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801af5e:	801a      	strh	r2, [r3, #0]
 801af60:	e03f      	b.n	801afe2 <HAL_PCD_EP_DB_Transmit+0x7a2>
 801af62:	46c0      	nop			@ (mov r8, r8)
 801af64:	00000402 	.word	0x00000402
 801af68:	00000406 	.word	0x00000406
 801af6c:	ffff8000 	.word	0xffff8000
 801af70:	ffff8f8f 	.word	0xffff8f8f
 801af74:	ffffc080 	.word	0xffffc080
 801af78:	228c      	movs	r2, #140	@ 0x8c
 801af7a:	18bb      	adds	r3, r7, r2
 801af7c:	681b      	ldr	r3, [r3, #0]
 801af7e:	085b      	lsrs	r3, r3, #1
 801af80:	66bb      	str	r3, [r7, #104]	@ 0x68
 801af82:	18bb      	adds	r3, r7, r2
 801af84:	681b      	ldr	r3, [r3, #0]
 801af86:	2201      	movs	r2, #1
 801af88:	4013      	ands	r3, r2
 801af8a:	d002      	beq.n	801af92 <HAL_PCD_EP_DB_Transmit+0x752>
 801af8c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801af8e:	3301      	adds	r3, #1
 801af90:	66bb      	str	r3, [r7, #104]	@ 0x68
 801af92:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801af94:	881b      	ldrh	r3, [r3, #0]
 801af96:	b29a      	uxth	r2, r3
 801af98:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801af9a:	b29b      	uxth	r3, r3
 801af9c:	029b      	lsls	r3, r3, #10
 801af9e:	b29b      	uxth	r3, r3
 801afa0:	4313      	orrs	r3, r2
 801afa2:	b29a      	uxth	r2, r3
 801afa4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801afa6:	801a      	strh	r2, [r3, #0]
 801afa8:	e01b      	b.n	801afe2 <HAL_PCD_EP_DB_Transmit+0x7a2>
 801afaa:	68bb      	ldr	r3, [r7, #8]
 801afac:	785b      	ldrb	r3, [r3, #1]
 801afae:	2b01      	cmp	r3, #1
 801afb0:	d117      	bne.n	801afe2 <HAL_PCD_EP_DB_Transmit+0x7a2>
 801afb2:	68fb      	ldr	r3, [r7, #12]
 801afb4:	681b      	ldr	r3, [r3, #0]
 801afb6:	2250      	movs	r2, #80	@ 0x50
 801afb8:	5a9b      	ldrh	r3, [r3, r2]
 801afba:	b29b      	uxth	r3, r3
 801afbc:	001a      	movs	r2, r3
 801afbe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801afc0:	189b      	adds	r3, r3, r2
 801afc2:	657b      	str	r3, [r7, #84]	@ 0x54
 801afc4:	68bb      	ldr	r3, [r7, #8]
 801afc6:	781b      	ldrb	r3, [r3, #0]
 801afc8:	00da      	lsls	r2, r3, #3
 801afca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801afcc:	18d3      	adds	r3, r2, r3
 801afce:	4a21      	ldr	r2, [pc, #132]	@ (801b054 <HAL_PCD_EP_DB_Transmit+0x814>)
 801afd0:	4694      	mov	ip, r2
 801afd2:	4463      	add	r3, ip
 801afd4:	653b      	str	r3, [r7, #80]	@ 0x50
 801afd6:	238c      	movs	r3, #140	@ 0x8c
 801afd8:	18fb      	adds	r3, r7, r3
 801afda:	681b      	ldr	r3, [r3, #0]
 801afdc:	b29a      	uxth	r2, r3
 801afde:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801afe0:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 801afe2:	68fb      	ldr	r3, [r7, #12]
 801afe4:	6818      	ldr	r0, [r3, #0]
 801afe6:	68bb      	ldr	r3, [r7, #8]
 801afe8:	6959      	ldr	r1, [r3, #20]
 801afea:	68bb      	ldr	r3, [r7, #8]
 801afec:	895a      	ldrh	r2, [r3, #10]
 801afee:	238c      	movs	r3, #140	@ 0x8c
 801aff0:	18fb      	adds	r3, r7, r3
 801aff2:	681b      	ldr	r3, [r3, #0]
 801aff4:	b29b      	uxth	r3, r3
 801aff6:	f006 f9a1 	bl	802133c <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 801affa:	68fb      	ldr	r3, [r7, #12]
 801affc:	681b      	ldr	r3, [r3, #0]
 801affe:	001a      	movs	r2, r3
 801b000:	68bb      	ldr	r3, [r7, #8]
 801b002:	781b      	ldrb	r3, [r3, #0]
 801b004:	009b      	lsls	r3, r3, #2
 801b006:	18d3      	adds	r3, r2, r3
 801b008:	881b      	ldrh	r3, [r3, #0]
 801b00a:	b29a      	uxth	r2, r3
 801b00c:	2014      	movs	r0, #20
 801b00e:	183b      	adds	r3, r7, r0
 801b010:	4911      	ldr	r1, [pc, #68]	@ (801b058 <HAL_PCD_EP_DB_Transmit+0x818>)
 801b012:	400a      	ands	r2, r1
 801b014:	801a      	strh	r2, [r3, #0]
 801b016:	183b      	adds	r3, r7, r0
 801b018:	183a      	adds	r2, r7, r0
 801b01a:	8812      	ldrh	r2, [r2, #0]
 801b01c:	2110      	movs	r1, #16
 801b01e:	404a      	eors	r2, r1
 801b020:	801a      	strh	r2, [r3, #0]
 801b022:	183b      	adds	r3, r7, r0
 801b024:	183a      	adds	r2, r7, r0
 801b026:	8812      	ldrh	r2, [r2, #0]
 801b028:	2120      	movs	r1, #32
 801b02a:	404a      	eors	r2, r1
 801b02c:	801a      	strh	r2, [r3, #0]
 801b02e:	68fb      	ldr	r3, [r7, #12]
 801b030:	681b      	ldr	r3, [r3, #0]
 801b032:	001a      	movs	r2, r3
 801b034:	68bb      	ldr	r3, [r7, #8]
 801b036:	781b      	ldrb	r3, [r3, #0]
 801b038:	009b      	lsls	r3, r3, #2
 801b03a:	18d3      	adds	r3, r2, r3
 801b03c:	183a      	adds	r2, r7, r0
 801b03e:	8812      	ldrh	r2, [r2, #0]
 801b040:	4906      	ldr	r1, [pc, #24]	@ (801b05c <HAL_PCD_EP_DB_Transmit+0x81c>)
 801b042:	430a      	orrs	r2, r1
 801b044:	b292      	uxth	r2, r2
 801b046:	801a      	strh	r2, [r3, #0]

  return HAL_OK;
 801b048:	2300      	movs	r3, #0
}
 801b04a:	0018      	movs	r0, r3
 801b04c:	46bd      	mov	sp, r7
 801b04e:	b024      	add	sp, #144	@ 0x90
 801b050:	bd80      	pop	{r7, pc}
 801b052:	46c0      	nop			@ (mov r8, r8)
 801b054:	00000406 	.word	0x00000406
 801b058:	ffff8fbf 	.word	0xffff8fbf
 801b05c:	ffff8080 	.word	0xffff8080

0801b060 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 801b060:	b590      	push	{r4, r7, lr}
 801b062:	b087      	sub	sp, #28
 801b064:	af00      	add	r7, sp, #0
 801b066:	60f8      	str	r0, [r7, #12]
 801b068:	0008      	movs	r0, r1
 801b06a:	0011      	movs	r1, r2
 801b06c:	607b      	str	r3, [r7, #4]
 801b06e:	240a      	movs	r4, #10
 801b070:	193b      	adds	r3, r7, r4
 801b072:	1c02      	adds	r2, r0, #0
 801b074:	801a      	strh	r2, [r3, #0]
 801b076:	2308      	movs	r3, #8
 801b078:	18fb      	adds	r3, r7, r3
 801b07a:	1c0a      	adds	r2, r1, #0
 801b07c:	801a      	strh	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 801b07e:	0021      	movs	r1, r4
 801b080:	187b      	adds	r3, r7, r1
 801b082:	881b      	ldrh	r3, [r3, #0]
 801b084:	2280      	movs	r2, #128	@ 0x80
 801b086:	4013      	ands	r3, r2
 801b088:	b29b      	uxth	r3, r3
 801b08a:	2b00      	cmp	r3, #0
 801b08c:	d00c      	beq.n	801b0a8 <HAL_PCDEx_PMAConfig+0x48>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 801b08e:	187b      	adds	r3, r7, r1
 801b090:	881b      	ldrh	r3, [r3, #0]
 801b092:	2207      	movs	r2, #7
 801b094:	4013      	ands	r3, r2
 801b096:	1c5a      	adds	r2, r3, #1
 801b098:	0013      	movs	r3, r2
 801b09a:	009b      	lsls	r3, r3, #2
 801b09c:	189b      	adds	r3, r3, r2
 801b09e:	00db      	lsls	r3, r3, #3
 801b0a0:	68fa      	ldr	r2, [r7, #12]
 801b0a2:	18d3      	adds	r3, r2, r3
 801b0a4:	617b      	str	r3, [r7, #20]
 801b0a6:	e00b      	b.n	801b0c0 <HAL_PCDEx_PMAConfig+0x60>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 801b0a8:	230a      	movs	r3, #10
 801b0aa:	18fb      	adds	r3, r7, r3
 801b0ac:	881a      	ldrh	r2, [r3, #0]
 801b0ae:	0013      	movs	r3, r2
 801b0b0:	009b      	lsls	r3, r3, #2
 801b0b2:	189b      	adds	r3, r3, r2
 801b0b4:	00db      	lsls	r3, r3, #3
 801b0b6:	3369      	adds	r3, #105	@ 0x69
 801b0b8:	33ff      	adds	r3, #255	@ 0xff
 801b0ba:	68fa      	ldr	r2, [r7, #12]
 801b0bc:	18d3      	adds	r3, r2, r3
 801b0be:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 801b0c0:	2308      	movs	r3, #8
 801b0c2:	18fb      	adds	r3, r7, r3
 801b0c4:	881b      	ldrh	r3, [r3, #0]
 801b0c6:	2b00      	cmp	r3, #0
 801b0c8:	d107      	bne.n	801b0da <HAL_PCDEx_PMAConfig+0x7a>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 801b0ca:	697b      	ldr	r3, [r7, #20]
 801b0cc:	2200      	movs	r2, #0
 801b0ce:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 801b0d0:	687b      	ldr	r3, [r7, #4]
 801b0d2:	b29a      	uxth	r2, r3
 801b0d4:	697b      	ldr	r3, [r7, #20]
 801b0d6:	80da      	strh	r2, [r3, #6]
 801b0d8:	e00b      	b.n	801b0f2 <HAL_PCDEx_PMAConfig+0x92>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 801b0da:	697b      	ldr	r3, [r7, #20]
 801b0dc:	2201      	movs	r2, #1
 801b0de:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 801b0e0:	687b      	ldr	r3, [r7, #4]
 801b0e2:	b29a      	uxth	r2, r3
 801b0e4:	697b      	ldr	r3, [r7, #20]
 801b0e6:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 801b0e8:	687b      	ldr	r3, [r7, #4]
 801b0ea:	0c1b      	lsrs	r3, r3, #16
 801b0ec:	b29a      	uxth	r2, r3
 801b0ee:	697b      	ldr	r3, [r7, #20]
 801b0f0:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 801b0f2:	2300      	movs	r3, #0
}
 801b0f4:	0018      	movs	r0, r3
 801b0f6:	46bd      	mov	sp, r7
 801b0f8:	b007      	add	sp, #28
 801b0fa:	bd90      	pop	{r4, r7, pc}

0801b0fc <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 801b0fc:	b580      	push	{r7, lr}
 801b0fe:	b084      	sub	sp, #16
 801b100:	af00      	add	r7, sp, #0
 801b102:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 801b104:	687b      	ldr	r3, [r7, #4]
 801b106:	681b      	ldr	r3, [r3, #0]
 801b108:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 801b10a:	687a      	ldr	r2, [r7, #4]
 801b10c:	23ba      	movs	r3, #186	@ 0xba
 801b10e:	009b      	lsls	r3, r3, #2
 801b110:	2101      	movs	r1, #1
 801b112:	50d1      	str	r1, [r2, r3]
  hpcd->LPM_State = LPM_L0;
 801b114:	687a      	ldr	r2, [r7, #4]
 801b116:	23b8      	movs	r3, #184	@ 0xb8
 801b118:	009b      	lsls	r3, r3, #2
 801b11a:	2100      	movs	r1, #0
 801b11c:	54d1      	strb	r1, [r2, r3]

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 801b11e:	68fb      	ldr	r3, [r7, #12]
 801b120:	2254      	movs	r2, #84	@ 0x54
 801b122:	5a9b      	ldrh	r3, [r3, r2]
 801b124:	b29b      	uxth	r3, r3
 801b126:	2201      	movs	r2, #1
 801b128:	4313      	orrs	r3, r2
 801b12a:	b299      	uxth	r1, r3
 801b12c:	68fb      	ldr	r3, [r7, #12]
 801b12e:	2254      	movs	r2, #84	@ 0x54
 801b130:	5299      	strh	r1, [r3, r2]
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 801b132:	68fb      	ldr	r3, [r7, #12]
 801b134:	2254      	movs	r2, #84	@ 0x54
 801b136:	5a9b      	ldrh	r3, [r3, r2]
 801b138:	b29b      	uxth	r3, r3
 801b13a:	2202      	movs	r2, #2
 801b13c:	4313      	orrs	r3, r2
 801b13e:	b299      	uxth	r1, r3
 801b140:	68fb      	ldr	r3, [r7, #12]
 801b142:	2254      	movs	r2, #84	@ 0x54
 801b144:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 801b146:	2300      	movs	r3, #0
}
 801b148:	0018      	movs	r0, r3
 801b14a:	46bd      	mov	sp, r7
 801b14c:	b004      	add	sp, #16
 801b14e:	bd80      	pop	{r7, pc}

0801b150 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 801b150:	b580      	push	{r7, lr}
 801b152:	b082      	sub	sp, #8
 801b154:	af00      	add	r7, sp, #0
 801b156:	6078      	str	r0, [r7, #4]
 801b158:	000a      	movs	r2, r1
 801b15a:	1cfb      	adds	r3, r7, #3
 801b15c:	701a      	strb	r2, [r3, #0]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 801b15e:	46c0      	nop			@ (mov r8, r8)
 801b160:	46bd      	mov	sp, r7
 801b162:	b002      	add	sp, #8
 801b164:	bd80      	pop	{r7, pc}
	...

0801b168 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 2, 4, 8 or 16 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 801b168:	b580      	push	{r7, lr}
 801b16a:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR, PWR_CR_DBP);
 801b16c:	4b04      	ldr	r3, [pc, #16]	@ (801b180 <HAL_PWR_EnableBkUpAccess+0x18>)
 801b16e:	681a      	ldr	r2, [r3, #0]
 801b170:	4b03      	ldr	r3, [pc, #12]	@ (801b180 <HAL_PWR_EnableBkUpAccess+0x18>)
 801b172:	2180      	movs	r1, #128	@ 0x80
 801b174:	0049      	lsls	r1, r1, #1
 801b176:	430a      	orrs	r2, r1
 801b178:	601a      	str	r2, [r3, #0]
}
 801b17a:	46c0      	nop			@ (mov r8, r8)
 801b17c:	46bd      	mov	sp, r7
 801b17e:	bd80      	pop	{r7, pc}
 801b180:	40007000 	.word	0x40007000

0801b184 <HAL_PWR_DisableBkUpAccess>:
  * @note   If the HSE divided by 2, 4, 8 or 16 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_DisableBkUpAccess(void)
{
 801b184:	b580      	push	{r7, lr}
 801b186:	af00      	add	r7, sp, #0
  /* Disable access to RTC and backup registers */
  CLEAR_BIT(PWR->CR, PWR_CR_DBP);
 801b188:	4b04      	ldr	r3, [pc, #16]	@ (801b19c <HAL_PWR_DisableBkUpAccess+0x18>)
 801b18a:	681a      	ldr	r2, [r3, #0]
 801b18c:	4b03      	ldr	r3, [pc, #12]	@ (801b19c <HAL_PWR_DisableBkUpAccess+0x18>)
 801b18e:	4904      	ldr	r1, [pc, #16]	@ (801b1a0 <HAL_PWR_DisableBkUpAccess+0x1c>)
 801b190:	400a      	ands	r2, r1
 801b192:	601a      	str	r2, [r3, #0]
}
 801b194:	46c0      	nop			@ (mov r8, r8)
 801b196:	46bd      	mov	sp, r7
 801b198:	bd80      	pop	{r7, pc}
 801b19a:	46c0      	nop			@ (mov r8, r8)
 801b19c:	40007000 	.word	0x40007000
 801b1a0:	fffffeff 	.word	0xfffffeff

0801b1a4 <HAL_PWR_EnterSTOPMode>:
  *            @arg PWR_STOPENTRY_WFI: Enter Stop mode with WFI instruction
  *            @arg PWR_STOPENTRY_WFE: Enter Stop mode with WFE instruction   
  * @retval None
  */
void HAL_PWR_EnterSTOPMode(uint32_t Regulator, uint8_t STOPEntry)
{
 801b1a4:	b580      	push	{r7, lr}
 801b1a6:	b086      	sub	sp, #24
 801b1a8:	af00      	add	r7, sp, #0
 801b1aa:	6078      	str	r0, [r7, #4]
 801b1ac:	000a      	movs	r2, r1
 801b1ae:	1cfb      	adds	r3, r7, #3
 801b1b0:	701a      	strb	r2, [r3, #0]
  uint32_t tmpreg = 0U;
 801b1b2:	2300      	movs	r3, #0
 801b1b4:	617b      	str	r3, [r7, #20]
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  /* It is forbidden to configure both EN_VREFINT=1 and ULP=1 if the device is
     in Stop mode or in Sleep/Low-power sleep mode */
  ulpbit = READ_BIT(PWR->CR, PWR_CR_ULP);
 801b1b6:	4b25      	ldr	r3, [pc, #148]	@ (801b24c <HAL_PWR_EnterSTOPMode+0xa8>)
 801b1b8:	681a      	ldr	r2, [r3, #0]
 801b1ba:	2380      	movs	r3, #128	@ 0x80
 801b1bc:	009b      	lsls	r3, r3, #2
 801b1be:	4013      	ands	r3, r2
 801b1c0:	613b      	str	r3, [r7, #16]
  vrefinbit = READ_BIT(SYSCFG->CFGR3, SYSCFG_CFGR3_EN_VREFINT);
 801b1c2:	4b23      	ldr	r3, [pc, #140]	@ (801b250 <HAL_PWR_EnterSTOPMode+0xac>)
 801b1c4:	6a1b      	ldr	r3, [r3, #32]
 801b1c6:	2201      	movs	r2, #1
 801b1c8:	4013      	ands	r3, r2
 801b1ca:	60fb      	str	r3, [r7, #12]
  if((ulpbit != 0) && (vrefinbit != 0))
 801b1cc:	693b      	ldr	r3, [r7, #16]
 801b1ce:	2b00      	cmp	r3, #0
 801b1d0:	d008      	beq.n	801b1e4 <HAL_PWR_EnterSTOPMode+0x40>
 801b1d2:	68fb      	ldr	r3, [r7, #12]
 801b1d4:	2b00      	cmp	r3, #0
 801b1d6:	d005      	beq.n	801b1e4 <HAL_PWR_EnterSTOPMode+0x40>
  {
    CLEAR_BIT(PWR->CR, PWR_CR_ULP);
 801b1d8:	4b1c      	ldr	r3, [pc, #112]	@ (801b24c <HAL_PWR_EnterSTOPMode+0xa8>)
 801b1da:	681a      	ldr	r2, [r3, #0]
 801b1dc:	4b1b      	ldr	r3, [pc, #108]	@ (801b24c <HAL_PWR_EnterSTOPMode+0xa8>)
 801b1de:	491d      	ldr	r1, [pc, #116]	@ (801b254 <HAL_PWR_EnterSTOPMode+0xb0>)
 801b1e0:	400a      	ands	r2, r1
 801b1e2:	601a      	str	r2, [r3, #0]
  }

  /* Select the regulator state in Stop mode ---------------------------------*/
  tmpreg = PWR->CR;
 801b1e4:	4b19      	ldr	r3, [pc, #100]	@ (801b24c <HAL_PWR_EnterSTOPMode+0xa8>)
 801b1e6:	681b      	ldr	r3, [r3, #0]
 801b1e8:	617b      	str	r3, [r7, #20]
  
  /* Clear PDDS and LPDS bits */
  CLEAR_BIT(tmpreg, (PWR_CR_PDDS | PWR_CR_LPSDSR));
 801b1ea:	697b      	ldr	r3, [r7, #20]
 801b1ec:	2203      	movs	r2, #3
 801b1ee:	4393      	bics	r3, r2
 801b1f0:	617b      	str	r3, [r7, #20]

 /* Set LPSDSR bit according to PWR_Regulator value */
  SET_BIT(tmpreg, Regulator);
 801b1f2:	697a      	ldr	r2, [r7, #20]
 801b1f4:	687b      	ldr	r3, [r7, #4]
 801b1f6:	4313      	orrs	r3, r2
 801b1f8:	617b      	str	r3, [r7, #20]

  /* Store the new value */
  PWR->CR = tmpreg;
 801b1fa:	4b14      	ldr	r3, [pc, #80]	@ (801b24c <HAL_PWR_EnterSTOPMode+0xa8>)
 801b1fc:	697a      	ldr	r2, [r7, #20]
 801b1fe:	601a      	str	r2, [r3, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 801b200:	4b15      	ldr	r3, [pc, #84]	@ (801b258 <HAL_PWR_EnterSTOPMode+0xb4>)
 801b202:	691a      	ldr	r2, [r3, #16]
 801b204:	4b14      	ldr	r3, [pc, #80]	@ (801b258 <HAL_PWR_EnterSTOPMode+0xb4>)
 801b206:	2104      	movs	r1, #4
 801b208:	430a      	orrs	r2, r1
 801b20a:	611a      	str	r2, [r3, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 801b20c:	1cfb      	adds	r3, r7, #3
 801b20e:	781b      	ldrb	r3, [r3, #0]
 801b210:	2b01      	cmp	r3, #1
 801b212:	d101      	bne.n	801b218 <HAL_PWR_EnterSTOPMode+0x74>
  {
    /* Request Wait For Interrupt */
    __WFI();
 801b214:	bf30      	wfi
 801b216:	e002      	b.n	801b21e <HAL_PWR_EnterSTOPMode+0x7a>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 801b218:	bf40      	sev
    __WFE();
 801b21a:	bf20      	wfe
    __WFE();
 801b21c:	bf20      	wfe
  }
 
  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 801b21e:	4b0e      	ldr	r3, [pc, #56]	@ (801b258 <HAL_PWR_EnterSTOPMode+0xb4>)
 801b220:	691a      	ldr	r2, [r3, #16]
 801b222:	4b0d      	ldr	r3, [pc, #52]	@ (801b258 <HAL_PWR_EnterSTOPMode+0xb4>)
 801b224:	2104      	movs	r1, #4
 801b226:	438a      	bics	r2, r1
 801b228:	611a      	str	r2, [r3, #16]

  if((ulpbit != 0) && (vrefinbit != 0))
 801b22a:	693b      	ldr	r3, [r7, #16]
 801b22c:	2b00      	cmp	r3, #0
 801b22e:	d009      	beq.n	801b244 <HAL_PWR_EnterSTOPMode+0xa0>
 801b230:	68fb      	ldr	r3, [r7, #12]
 801b232:	2b00      	cmp	r3, #0
 801b234:	d006      	beq.n	801b244 <HAL_PWR_EnterSTOPMode+0xa0>
  {
    SET_BIT(PWR->CR, PWR_CR_ULP);
 801b236:	4b05      	ldr	r3, [pc, #20]	@ (801b24c <HAL_PWR_EnterSTOPMode+0xa8>)
 801b238:	681a      	ldr	r2, [r3, #0]
 801b23a:	4b04      	ldr	r3, [pc, #16]	@ (801b24c <HAL_PWR_EnterSTOPMode+0xa8>)
 801b23c:	2180      	movs	r1, #128	@ 0x80
 801b23e:	0089      	lsls	r1, r1, #2
 801b240:	430a      	orrs	r2, r1
 801b242:	601a      	str	r2, [r3, #0]
  }
}
 801b244:	46c0      	nop			@ (mov r8, r8)
 801b246:	46bd      	mov	sp, r7
 801b248:	b006      	add	sp, #24
 801b24a:	bd80      	pop	{r7, pc}
 801b24c:	40007000 	.word	0x40007000
 801b250:	40010000 	.word	0x40010000
 801b254:	fffffdff 	.word	0xfffffdff
 801b258:	e000ed00 	.word	0xe000ed00

0801b25c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 801b25c:	b5b0      	push	{r4, r5, r7, lr}
 801b25e:	b08a      	sub	sp, #40	@ 0x28
 801b260:	af00      	add	r7, sp, #0
 801b262:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 801b264:	687b      	ldr	r3, [r7, #4]
 801b266:	2b00      	cmp	r3, #0
 801b268:	d102      	bne.n	801b270 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 801b26a:	2301      	movs	r3, #1
 801b26c:	f000 fbbf 	bl	801b9ee <HAL_RCC_OscConfig+0x792>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 801b270:	4bc9      	ldr	r3, [pc, #804]	@ (801b598 <HAL_RCC_OscConfig+0x33c>)
 801b272:	68db      	ldr	r3, [r3, #12]
 801b274:	220c      	movs	r2, #12
 801b276:	4013      	ands	r3, r2
 801b278:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 801b27a:	4bc7      	ldr	r3, [pc, #796]	@ (801b598 <HAL_RCC_OscConfig+0x33c>)
 801b27c:	68da      	ldr	r2, [r3, #12]
 801b27e:	2380      	movs	r3, #128	@ 0x80
 801b280:	025b      	lsls	r3, r3, #9
 801b282:	4013      	ands	r3, r2
 801b284:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 801b286:	687b      	ldr	r3, [r7, #4]
 801b288:	681b      	ldr	r3, [r3, #0]
 801b28a:	2201      	movs	r2, #1
 801b28c:	4013      	ands	r3, r2
 801b28e:	d100      	bne.n	801b292 <HAL_RCC_OscConfig+0x36>
 801b290:	e07e      	b.n	801b390 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 801b292:	69fb      	ldr	r3, [r7, #28]
 801b294:	2b08      	cmp	r3, #8
 801b296:	d007      	beq.n	801b2a8 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 801b298:	69fb      	ldr	r3, [r7, #28]
 801b29a:	2b0c      	cmp	r3, #12
 801b29c:	d112      	bne.n	801b2c4 <HAL_RCC_OscConfig+0x68>
 801b29e:	69ba      	ldr	r2, [r7, #24]
 801b2a0:	2380      	movs	r3, #128	@ 0x80
 801b2a2:	025b      	lsls	r3, r3, #9
 801b2a4:	429a      	cmp	r2, r3
 801b2a6:	d10d      	bne.n	801b2c4 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 801b2a8:	4bbb      	ldr	r3, [pc, #748]	@ (801b598 <HAL_RCC_OscConfig+0x33c>)
 801b2aa:	681a      	ldr	r2, [r3, #0]
 801b2ac:	2380      	movs	r3, #128	@ 0x80
 801b2ae:	029b      	lsls	r3, r3, #10
 801b2b0:	4013      	ands	r3, r2
 801b2b2:	d100      	bne.n	801b2b6 <HAL_RCC_OscConfig+0x5a>
 801b2b4:	e06b      	b.n	801b38e <HAL_RCC_OscConfig+0x132>
 801b2b6:	687b      	ldr	r3, [r7, #4]
 801b2b8:	685b      	ldr	r3, [r3, #4]
 801b2ba:	2b00      	cmp	r3, #0
 801b2bc:	d167      	bne.n	801b38e <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 801b2be:	2301      	movs	r3, #1
 801b2c0:	f000 fb95 	bl	801b9ee <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 801b2c4:	687b      	ldr	r3, [r7, #4]
 801b2c6:	685a      	ldr	r2, [r3, #4]
 801b2c8:	2380      	movs	r3, #128	@ 0x80
 801b2ca:	025b      	lsls	r3, r3, #9
 801b2cc:	429a      	cmp	r2, r3
 801b2ce:	d107      	bne.n	801b2e0 <HAL_RCC_OscConfig+0x84>
 801b2d0:	4bb1      	ldr	r3, [pc, #708]	@ (801b598 <HAL_RCC_OscConfig+0x33c>)
 801b2d2:	681a      	ldr	r2, [r3, #0]
 801b2d4:	4bb0      	ldr	r3, [pc, #704]	@ (801b598 <HAL_RCC_OscConfig+0x33c>)
 801b2d6:	2180      	movs	r1, #128	@ 0x80
 801b2d8:	0249      	lsls	r1, r1, #9
 801b2da:	430a      	orrs	r2, r1
 801b2dc:	601a      	str	r2, [r3, #0]
 801b2de:	e027      	b.n	801b330 <HAL_RCC_OscConfig+0xd4>
 801b2e0:	687b      	ldr	r3, [r7, #4]
 801b2e2:	685a      	ldr	r2, [r3, #4]
 801b2e4:	23a0      	movs	r3, #160	@ 0xa0
 801b2e6:	02db      	lsls	r3, r3, #11
 801b2e8:	429a      	cmp	r2, r3
 801b2ea:	d10e      	bne.n	801b30a <HAL_RCC_OscConfig+0xae>
 801b2ec:	4baa      	ldr	r3, [pc, #680]	@ (801b598 <HAL_RCC_OscConfig+0x33c>)
 801b2ee:	681a      	ldr	r2, [r3, #0]
 801b2f0:	4ba9      	ldr	r3, [pc, #676]	@ (801b598 <HAL_RCC_OscConfig+0x33c>)
 801b2f2:	2180      	movs	r1, #128	@ 0x80
 801b2f4:	02c9      	lsls	r1, r1, #11
 801b2f6:	430a      	orrs	r2, r1
 801b2f8:	601a      	str	r2, [r3, #0]
 801b2fa:	4ba7      	ldr	r3, [pc, #668]	@ (801b598 <HAL_RCC_OscConfig+0x33c>)
 801b2fc:	681a      	ldr	r2, [r3, #0]
 801b2fe:	4ba6      	ldr	r3, [pc, #664]	@ (801b598 <HAL_RCC_OscConfig+0x33c>)
 801b300:	2180      	movs	r1, #128	@ 0x80
 801b302:	0249      	lsls	r1, r1, #9
 801b304:	430a      	orrs	r2, r1
 801b306:	601a      	str	r2, [r3, #0]
 801b308:	e012      	b.n	801b330 <HAL_RCC_OscConfig+0xd4>
 801b30a:	4ba3      	ldr	r3, [pc, #652]	@ (801b598 <HAL_RCC_OscConfig+0x33c>)
 801b30c:	681a      	ldr	r2, [r3, #0]
 801b30e:	4ba2      	ldr	r3, [pc, #648]	@ (801b598 <HAL_RCC_OscConfig+0x33c>)
 801b310:	49a2      	ldr	r1, [pc, #648]	@ (801b59c <HAL_RCC_OscConfig+0x340>)
 801b312:	400a      	ands	r2, r1
 801b314:	601a      	str	r2, [r3, #0]
 801b316:	4ba0      	ldr	r3, [pc, #640]	@ (801b598 <HAL_RCC_OscConfig+0x33c>)
 801b318:	681a      	ldr	r2, [r3, #0]
 801b31a:	2380      	movs	r3, #128	@ 0x80
 801b31c:	025b      	lsls	r3, r3, #9
 801b31e:	4013      	ands	r3, r2
 801b320:	60fb      	str	r3, [r7, #12]
 801b322:	68fb      	ldr	r3, [r7, #12]
 801b324:	4b9c      	ldr	r3, [pc, #624]	@ (801b598 <HAL_RCC_OscConfig+0x33c>)
 801b326:	681a      	ldr	r2, [r3, #0]
 801b328:	4b9b      	ldr	r3, [pc, #620]	@ (801b598 <HAL_RCC_OscConfig+0x33c>)
 801b32a:	499d      	ldr	r1, [pc, #628]	@ (801b5a0 <HAL_RCC_OscConfig+0x344>)
 801b32c:	400a      	ands	r2, r1
 801b32e:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 801b330:	687b      	ldr	r3, [r7, #4]
 801b332:	685b      	ldr	r3, [r3, #4]
 801b334:	2b00      	cmp	r3, #0
 801b336:	d015      	beq.n	801b364 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801b338:	f7f9 faf8 	bl	801492c <HAL_GetTick>
 801b33c:	0003      	movs	r3, r0
 801b33e:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 801b340:	e009      	b.n	801b356 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 801b342:	f7f9 faf3 	bl	801492c <HAL_GetTick>
 801b346:	0002      	movs	r2, r0
 801b348:	697b      	ldr	r3, [r7, #20]
 801b34a:	1ad3      	subs	r3, r2, r3
 801b34c:	2b64      	cmp	r3, #100	@ 0x64
 801b34e:	d902      	bls.n	801b356 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 801b350:	2303      	movs	r3, #3
 801b352:	f000 fb4c 	bl	801b9ee <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 801b356:	4b90      	ldr	r3, [pc, #576]	@ (801b598 <HAL_RCC_OscConfig+0x33c>)
 801b358:	681a      	ldr	r2, [r3, #0]
 801b35a:	2380      	movs	r3, #128	@ 0x80
 801b35c:	029b      	lsls	r3, r3, #10
 801b35e:	4013      	ands	r3, r2
 801b360:	d0ef      	beq.n	801b342 <HAL_RCC_OscConfig+0xe6>
 801b362:	e015      	b.n	801b390 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801b364:	f7f9 fae2 	bl	801492c <HAL_GetTick>
 801b368:	0003      	movs	r3, r0
 801b36a:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 801b36c:	e008      	b.n	801b380 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 801b36e:	f7f9 fadd 	bl	801492c <HAL_GetTick>
 801b372:	0002      	movs	r2, r0
 801b374:	697b      	ldr	r3, [r7, #20]
 801b376:	1ad3      	subs	r3, r2, r3
 801b378:	2b64      	cmp	r3, #100	@ 0x64
 801b37a:	d901      	bls.n	801b380 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 801b37c:	2303      	movs	r3, #3
 801b37e:	e336      	b.n	801b9ee <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 801b380:	4b85      	ldr	r3, [pc, #532]	@ (801b598 <HAL_RCC_OscConfig+0x33c>)
 801b382:	681a      	ldr	r2, [r3, #0]
 801b384:	2380      	movs	r3, #128	@ 0x80
 801b386:	029b      	lsls	r3, r3, #10
 801b388:	4013      	ands	r3, r2
 801b38a:	d1f0      	bne.n	801b36e <HAL_RCC_OscConfig+0x112>
 801b38c:	e000      	b.n	801b390 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 801b38e:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 801b390:	687b      	ldr	r3, [r7, #4]
 801b392:	681b      	ldr	r3, [r3, #0]
 801b394:	2202      	movs	r2, #2
 801b396:	4013      	ands	r3, r2
 801b398:	d100      	bne.n	801b39c <HAL_RCC_OscConfig+0x140>
 801b39a:	e099      	b.n	801b4d0 <HAL_RCC_OscConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 801b39c:	687b      	ldr	r3, [r7, #4]
 801b39e:	68db      	ldr	r3, [r3, #12]
 801b3a0:	627b      	str	r3, [r7, #36]	@ 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 801b3a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b3a4:	2220      	movs	r2, #32
 801b3a6:	4013      	ands	r3, r2
 801b3a8:	d009      	beq.n	801b3be <HAL_RCC_OscConfig+0x162>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 801b3aa:	4b7b      	ldr	r3, [pc, #492]	@ (801b598 <HAL_RCC_OscConfig+0x33c>)
 801b3ac:	681a      	ldr	r2, [r3, #0]
 801b3ae:	4b7a      	ldr	r3, [pc, #488]	@ (801b598 <HAL_RCC_OscConfig+0x33c>)
 801b3b0:	2120      	movs	r1, #32
 801b3b2:	430a      	orrs	r2, r1
 801b3b4:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 801b3b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b3b8:	2220      	movs	r2, #32
 801b3ba:	4393      	bics	r3, r2
 801b3bc:	627b      	str	r3, [r7, #36]	@ 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 801b3be:	69fb      	ldr	r3, [r7, #28]
 801b3c0:	2b04      	cmp	r3, #4
 801b3c2:	d005      	beq.n	801b3d0 <HAL_RCC_OscConfig+0x174>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 801b3c4:	69fb      	ldr	r3, [r7, #28]
 801b3c6:	2b0c      	cmp	r3, #12
 801b3c8:	d13e      	bne.n	801b448 <HAL_RCC_OscConfig+0x1ec>
 801b3ca:	69bb      	ldr	r3, [r7, #24]
 801b3cc:	2b00      	cmp	r3, #0
 801b3ce:	d13b      	bne.n	801b448 <HAL_RCC_OscConfig+0x1ec>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 801b3d0:	4b71      	ldr	r3, [pc, #452]	@ (801b598 <HAL_RCC_OscConfig+0x33c>)
 801b3d2:	681b      	ldr	r3, [r3, #0]
 801b3d4:	2204      	movs	r2, #4
 801b3d6:	4013      	ands	r3, r2
 801b3d8:	d004      	beq.n	801b3e4 <HAL_RCC_OscConfig+0x188>
 801b3da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b3dc:	2b00      	cmp	r3, #0
 801b3de:	d101      	bne.n	801b3e4 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 801b3e0:	2301      	movs	r3, #1
 801b3e2:	e304      	b.n	801b9ee <HAL_RCC_OscConfig+0x792>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801b3e4:	4b6c      	ldr	r3, [pc, #432]	@ (801b598 <HAL_RCC_OscConfig+0x33c>)
 801b3e6:	685b      	ldr	r3, [r3, #4]
 801b3e8:	4a6e      	ldr	r2, [pc, #440]	@ (801b5a4 <HAL_RCC_OscConfig+0x348>)
 801b3ea:	4013      	ands	r3, r2
 801b3ec:	0019      	movs	r1, r3
 801b3ee:	687b      	ldr	r3, [r7, #4]
 801b3f0:	691b      	ldr	r3, [r3, #16]
 801b3f2:	021a      	lsls	r2, r3, #8
 801b3f4:	4b68      	ldr	r3, [pc, #416]	@ (801b598 <HAL_RCC_OscConfig+0x33c>)
 801b3f6:	430a      	orrs	r2, r1
 801b3f8:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 801b3fa:	4b67      	ldr	r3, [pc, #412]	@ (801b598 <HAL_RCC_OscConfig+0x33c>)
 801b3fc:	681b      	ldr	r3, [r3, #0]
 801b3fe:	2209      	movs	r2, #9
 801b400:	4393      	bics	r3, r2
 801b402:	0019      	movs	r1, r3
 801b404:	4b64      	ldr	r3, [pc, #400]	@ (801b598 <HAL_RCC_OscConfig+0x33c>)
 801b406:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801b408:	430a      	orrs	r2, r1
 801b40a:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 801b40c:	f000 fc42 	bl	801bc94 <HAL_RCC_GetSysClockFreq>
 801b410:	0001      	movs	r1, r0
 801b412:	4b61      	ldr	r3, [pc, #388]	@ (801b598 <HAL_RCC_OscConfig+0x33c>)
 801b414:	68db      	ldr	r3, [r3, #12]
 801b416:	091b      	lsrs	r3, r3, #4
 801b418:	220f      	movs	r2, #15
 801b41a:	4013      	ands	r3, r2
 801b41c:	4a62      	ldr	r2, [pc, #392]	@ (801b5a8 <HAL_RCC_OscConfig+0x34c>)
 801b41e:	5cd3      	ldrb	r3, [r2, r3]
 801b420:	000a      	movs	r2, r1
 801b422:	40da      	lsrs	r2, r3
 801b424:	4b61      	ldr	r3, [pc, #388]	@ (801b5ac <HAL_RCC_OscConfig+0x350>)
 801b426:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 801b428:	4b61      	ldr	r3, [pc, #388]	@ (801b5b0 <HAL_RCC_OscConfig+0x354>)
 801b42a:	681b      	ldr	r3, [r3, #0]
 801b42c:	2513      	movs	r5, #19
 801b42e:	197c      	adds	r4, r7, r5
 801b430:	0018      	movs	r0, r3
 801b432:	f7f9 fa35 	bl	80148a0 <HAL_InitTick>
 801b436:	0003      	movs	r3, r0
 801b438:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 801b43a:	197b      	adds	r3, r7, r5
 801b43c:	781b      	ldrb	r3, [r3, #0]
 801b43e:	2b00      	cmp	r3, #0
 801b440:	d046      	beq.n	801b4d0 <HAL_RCC_OscConfig+0x274>
      {
        return status;
 801b442:	197b      	adds	r3, r7, r5
 801b444:	781b      	ldrb	r3, [r3, #0]
 801b446:	e2d2      	b.n	801b9ee <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 801b448:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b44a:	2b00      	cmp	r3, #0
 801b44c:	d027      	beq.n	801b49e <HAL_RCC_OscConfig+0x242>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 801b44e:	4b52      	ldr	r3, [pc, #328]	@ (801b598 <HAL_RCC_OscConfig+0x33c>)
 801b450:	681b      	ldr	r3, [r3, #0]
 801b452:	2209      	movs	r2, #9
 801b454:	4393      	bics	r3, r2
 801b456:	0019      	movs	r1, r3
 801b458:	4b4f      	ldr	r3, [pc, #316]	@ (801b598 <HAL_RCC_OscConfig+0x33c>)
 801b45a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801b45c:	430a      	orrs	r2, r1
 801b45e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801b460:	f7f9 fa64 	bl	801492c <HAL_GetTick>
 801b464:	0003      	movs	r3, r0
 801b466:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 801b468:	e008      	b.n	801b47c <HAL_RCC_OscConfig+0x220>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 801b46a:	f7f9 fa5f 	bl	801492c <HAL_GetTick>
 801b46e:	0002      	movs	r2, r0
 801b470:	697b      	ldr	r3, [r7, #20]
 801b472:	1ad3      	subs	r3, r2, r3
 801b474:	2b02      	cmp	r3, #2
 801b476:	d901      	bls.n	801b47c <HAL_RCC_OscConfig+0x220>
          {
            return HAL_TIMEOUT;
 801b478:	2303      	movs	r3, #3
 801b47a:	e2b8      	b.n	801b9ee <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 801b47c:	4b46      	ldr	r3, [pc, #280]	@ (801b598 <HAL_RCC_OscConfig+0x33c>)
 801b47e:	681b      	ldr	r3, [r3, #0]
 801b480:	2204      	movs	r2, #4
 801b482:	4013      	ands	r3, r2
 801b484:	d0f1      	beq.n	801b46a <HAL_RCC_OscConfig+0x20e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801b486:	4b44      	ldr	r3, [pc, #272]	@ (801b598 <HAL_RCC_OscConfig+0x33c>)
 801b488:	685b      	ldr	r3, [r3, #4]
 801b48a:	4a46      	ldr	r2, [pc, #280]	@ (801b5a4 <HAL_RCC_OscConfig+0x348>)
 801b48c:	4013      	ands	r3, r2
 801b48e:	0019      	movs	r1, r3
 801b490:	687b      	ldr	r3, [r7, #4]
 801b492:	691b      	ldr	r3, [r3, #16]
 801b494:	021a      	lsls	r2, r3, #8
 801b496:	4b40      	ldr	r3, [pc, #256]	@ (801b598 <HAL_RCC_OscConfig+0x33c>)
 801b498:	430a      	orrs	r2, r1
 801b49a:	605a      	str	r2, [r3, #4]
 801b49c:	e018      	b.n	801b4d0 <HAL_RCC_OscConfig+0x274>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 801b49e:	4b3e      	ldr	r3, [pc, #248]	@ (801b598 <HAL_RCC_OscConfig+0x33c>)
 801b4a0:	681a      	ldr	r2, [r3, #0]
 801b4a2:	4b3d      	ldr	r3, [pc, #244]	@ (801b598 <HAL_RCC_OscConfig+0x33c>)
 801b4a4:	2101      	movs	r1, #1
 801b4a6:	438a      	bics	r2, r1
 801b4a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801b4aa:	f7f9 fa3f 	bl	801492c <HAL_GetTick>
 801b4ae:	0003      	movs	r3, r0
 801b4b0:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 801b4b2:	e008      	b.n	801b4c6 <HAL_RCC_OscConfig+0x26a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 801b4b4:	f7f9 fa3a 	bl	801492c <HAL_GetTick>
 801b4b8:	0002      	movs	r2, r0
 801b4ba:	697b      	ldr	r3, [r7, #20]
 801b4bc:	1ad3      	subs	r3, r2, r3
 801b4be:	2b02      	cmp	r3, #2
 801b4c0:	d901      	bls.n	801b4c6 <HAL_RCC_OscConfig+0x26a>
          {
            return HAL_TIMEOUT;
 801b4c2:	2303      	movs	r3, #3
 801b4c4:	e293      	b.n	801b9ee <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 801b4c6:	4b34      	ldr	r3, [pc, #208]	@ (801b598 <HAL_RCC_OscConfig+0x33c>)
 801b4c8:	681b      	ldr	r3, [r3, #0]
 801b4ca:	2204      	movs	r2, #4
 801b4cc:	4013      	ands	r3, r2
 801b4ce:	d1f1      	bne.n	801b4b4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 801b4d0:	687b      	ldr	r3, [r7, #4]
 801b4d2:	681b      	ldr	r3, [r3, #0]
 801b4d4:	2210      	movs	r2, #16
 801b4d6:	4013      	ands	r3, r2
 801b4d8:	d100      	bne.n	801b4dc <HAL_RCC_OscConfig+0x280>
 801b4da:	e0a2      	b.n	801b622 <HAL_RCC_OscConfig+0x3c6>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 801b4dc:	69fb      	ldr	r3, [r7, #28]
 801b4de:	2b00      	cmp	r3, #0
 801b4e0:	d140      	bne.n	801b564 <HAL_RCC_OscConfig+0x308>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 801b4e2:	4b2d      	ldr	r3, [pc, #180]	@ (801b598 <HAL_RCC_OscConfig+0x33c>)
 801b4e4:	681a      	ldr	r2, [r3, #0]
 801b4e6:	2380      	movs	r3, #128	@ 0x80
 801b4e8:	009b      	lsls	r3, r3, #2
 801b4ea:	4013      	ands	r3, r2
 801b4ec:	d005      	beq.n	801b4fa <HAL_RCC_OscConfig+0x29e>
 801b4ee:	687b      	ldr	r3, [r7, #4]
 801b4f0:	69db      	ldr	r3, [r3, #28]
 801b4f2:	2b00      	cmp	r3, #0
 801b4f4:	d101      	bne.n	801b4fa <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 801b4f6:	2301      	movs	r3, #1
 801b4f8:	e279      	b.n	801b9ee <HAL_RCC_OscConfig+0x792>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 801b4fa:	4b27      	ldr	r3, [pc, #156]	@ (801b598 <HAL_RCC_OscConfig+0x33c>)
 801b4fc:	685b      	ldr	r3, [r3, #4]
 801b4fe:	4a2d      	ldr	r2, [pc, #180]	@ (801b5b4 <HAL_RCC_OscConfig+0x358>)
 801b500:	4013      	ands	r3, r2
 801b502:	0019      	movs	r1, r3
 801b504:	687b      	ldr	r3, [r7, #4]
 801b506:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801b508:	4b23      	ldr	r3, [pc, #140]	@ (801b598 <HAL_RCC_OscConfig+0x33c>)
 801b50a:	430a      	orrs	r2, r1
 801b50c:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 801b50e:	4b22      	ldr	r3, [pc, #136]	@ (801b598 <HAL_RCC_OscConfig+0x33c>)
 801b510:	685b      	ldr	r3, [r3, #4]
 801b512:	021b      	lsls	r3, r3, #8
 801b514:	0a19      	lsrs	r1, r3, #8
 801b516:	687b      	ldr	r3, [r7, #4]
 801b518:	6a1b      	ldr	r3, [r3, #32]
 801b51a:	061a      	lsls	r2, r3, #24
 801b51c:	4b1e      	ldr	r3, [pc, #120]	@ (801b598 <HAL_RCC_OscConfig+0x33c>)
 801b51e:	430a      	orrs	r2, r1
 801b520:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 801b522:	687b      	ldr	r3, [r7, #4]
 801b524:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801b526:	0b5b      	lsrs	r3, r3, #13
 801b528:	3301      	adds	r3, #1
 801b52a:	2280      	movs	r2, #128	@ 0x80
 801b52c:	0212      	lsls	r2, r2, #8
 801b52e:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 801b530:	4b19      	ldr	r3, [pc, #100]	@ (801b598 <HAL_RCC_OscConfig+0x33c>)
 801b532:	68db      	ldr	r3, [r3, #12]
 801b534:	091b      	lsrs	r3, r3, #4
 801b536:	210f      	movs	r1, #15
 801b538:	400b      	ands	r3, r1
 801b53a:	491b      	ldr	r1, [pc, #108]	@ (801b5a8 <HAL_RCC_OscConfig+0x34c>)
 801b53c:	5ccb      	ldrb	r3, [r1, r3]
 801b53e:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 801b540:	4b1a      	ldr	r3, [pc, #104]	@ (801b5ac <HAL_RCC_OscConfig+0x350>)
 801b542:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 801b544:	4b1a      	ldr	r3, [pc, #104]	@ (801b5b0 <HAL_RCC_OscConfig+0x354>)
 801b546:	681b      	ldr	r3, [r3, #0]
 801b548:	2513      	movs	r5, #19
 801b54a:	197c      	adds	r4, r7, r5
 801b54c:	0018      	movs	r0, r3
 801b54e:	f7f9 f9a7 	bl	80148a0 <HAL_InitTick>
 801b552:	0003      	movs	r3, r0
 801b554:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 801b556:	197b      	adds	r3, r7, r5
 801b558:	781b      	ldrb	r3, [r3, #0]
 801b55a:	2b00      	cmp	r3, #0
 801b55c:	d061      	beq.n	801b622 <HAL_RCC_OscConfig+0x3c6>
        {
          return status;
 801b55e:	197b      	adds	r3, r7, r5
 801b560:	781b      	ldrb	r3, [r3, #0]
 801b562:	e244      	b.n	801b9ee <HAL_RCC_OscConfig+0x792>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 801b564:	687b      	ldr	r3, [r7, #4]
 801b566:	69db      	ldr	r3, [r3, #28]
 801b568:	2b00      	cmp	r3, #0
 801b56a:	d040      	beq.n	801b5ee <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 801b56c:	4b0a      	ldr	r3, [pc, #40]	@ (801b598 <HAL_RCC_OscConfig+0x33c>)
 801b56e:	681a      	ldr	r2, [r3, #0]
 801b570:	4b09      	ldr	r3, [pc, #36]	@ (801b598 <HAL_RCC_OscConfig+0x33c>)
 801b572:	2180      	movs	r1, #128	@ 0x80
 801b574:	0049      	lsls	r1, r1, #1
 801b576:	430a      	orrs	r2, r1
 801b578:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801b57a:	f7f9 f9d7 	bl	801492c <HAL_GetTick>
 801b57e:	0003      	movs	r3, r0
 801b580:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 801b582:	e019      	b.n	801b5b8 <HAL_RCC_OscConfig+0x35c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 801b584:	f7f9 f9d2 	bl	801492c <HAL_GetTick>
 801b588:	0002      	movs	r2, r0
 801b58a:	697b      	ldr	r3, [r7, #20]
 801b58c:	1ad3      	subs	r3, r2, r3
 801b58e:	2b02      	cmp	r3, #2
 801b590:	d912      	bls.n	801b5b8 <HAL_RCC_OscConfig+0x35c>
          {
            return HAL_TIMEOUT;
 801b592:	2303      	movs	r3, #3
 801b594:	e22b      	b.n	801b9ee <HAL_RCC_OscConfig+0x792>
 801b596:	46c0      	nop			@ (mov r8, r8)
 801b598:	40021000 	.word	0x40021000
 801b59c:	fffeffff 	.word	0xfffeffff
 801b5a0:	fffbffff 	.word	0xfffbffff
 801b5a4:	ffffe0ff 	.word	0xffffe0ff
 801b5a8:	0802e4a4 	.word	0x0802e4a4
 801b5ac:	200000ec 	.word	0x200000ec
 801b5b0:	200000fc 	.word	0x200000fc
 801b5b4:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 801b5b8:	4bca      	ldr	r3, [pc, #808]	@ (801b8e4 <HAL_RCC_OscConfig+0x688>)
 801b5ba:	681a      	ldr	r2, [r3, #0]
 801b5bc:	2380      	movs	r3, #128	@ 0x80
 801b5be:	009b      	lsls	r3, r3, #2
 801b5c0:	4013      	ands	r3, r2
 801b5c2:	d0df      	beq.n	801b584 <HAL_RCC_OscConfig+0x328>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 801b5c4:	4bc7      	ldr	r3, [pc, #796]	@ (801b8e4 <HAL_RCC_OscConfig+0x688>)
 801b5c6:	685b      	ldr	r3, [r3, #4]
 801b5c8:	4ac7      	ldr	r2, [pc, #796]	@ (801b8e8 <HAL_RCC_OscConfig+0x68c>)
 801b5ca:	4013      	ands	r3, r2
 801b5cc:	0019      	movs	r1, r3
 801b5ce:	687b      	ldr	r3, [r7, #4]
 801b5d0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801b5d2:	4bc4      	ldr	r3, [pc, #784]	@ (801b8e4 <HAL_RCC_OscConfig+0x688>)
 801b5d4:	430a      	orrs	r2, r1
 801b5d6:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 801b5d8:	4bc2      	ldr	r3, [pc, #776]	@ (801b8e4 <HAL_RCC_OscConfig+0x688>)
 801b5da:	685b      	ldr	r3, [r3, #4]
 801b5dc:	021b      	lsls	r3, r3, #8
 801b5de:	0a19      	lsrs	r1, r3, #8
 801b5e0:	687b      	ldr	r3, [r7, #4]
 801b5e2:	6a1b      	ldr	r3, [r3, #32]
 801b5e4:	061a      	lsls	r2, r3, #24
 801b5e6:	4bbf      	ldr	r3, [pc, #764]	@ (801b8e4 <HAL_RCC_OscConfig+0x688>)
 801b5e8:	430a      	orrs	r2, r1
 801b5ea:	605a      	str	r2, [r3, #4]
 801b5ec:	e019      	b.n	801b622 <HAL_RCC_OscConfig+0x3c6>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 801b5ee:	4bbd      	ldr	r3, [pc, #756]	@ (801b8e4 <HAL_RCC_OscConfig+0x688>)
 801b5f0:	681a      	ldr	r2, [r3, #0]
 801b5f2:	4bbc      	ldr	r3, [pc, #752]	@ (801b8e4 <HAL_RCC_OscConfig+0x688>)
 801b5f4:	49bd      	ldr	r1, [pc, #756]	@ (801b8ec <HAL_RCC_OscConfig+0x690>)
 801b5f6:	400a      	ands	r2, r1
 801b5f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801b5fa:	f7f9 f997 	bl	801492c <HAL_GetTick>
 801b5fe:	0003      	movs	r3, r0
 801b600:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 801b602:	e008      	b.n	801b616 <HAL_RCC_OscConfig+0x3ba>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 801b604:	f7f9 f992 	bl	801492c <HAL_GetTick>
 801b608:	0002      	movs	r2, r0
 801b60a:	697b      	ldr	r3, [r7, #20]
 801b60c:	1ad3      	subs	r3, r2, r3
 801b60e:	2b02      	cmp	r3, #2
 801b610:	d901      	bls.n	801b616 <HAL_RCC_OscConfig+0x3ba>
          {
            return HAL_TIMEOUT;
 801b612:	2303      	movs	r3, #3
 801b614:	e1eb      	b.n	801b9ee <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 801b616:	4bb3      	ldr	r3, [pc, #716]	@ (801b8e4 <HAL_RCC_OscConfig+0x688>)
 801b618:	681a      	ldr	r2, [r3, #0]
 801b61a:	2380      	movs	r3, #128	@ 0x80
 801b61c:	009b      	lsls	r3, r3, #2
 801b61e:	4013      	ands	r3, r2
 801b620:	d1f0      	bne.n	801b604 <HAL_RCC_OscConfig+0x3a8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 801b622:	687b      	ldr	r3, [r7, #4]
 801b624:	681b      	ldr	r3, [r3, #0]
 801b626:	2208      	movs	r2, #8
 801b628:	4013      	ands	r3, r2
 801b62a:	d036      	beq.n	801b69a <HAL_RCC_OscConfig+0x43e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 801b62c:	687b      	ldr	r3, [r7, #4]
 801b62e:	695b      	ldr	r3, [r3, #20]
 801b630:	2b00      	cmp	r3, #0
 801b632:	d019      	beq.n	801b668 <HAL_RCC_OscConfig+0x40c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 801b634:	4bab      	ldr	r3, [pc, #684]	@ (801b8e4 <HAL_RCC_OscConfig+0x688>)
 801b636:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801b638:	4baa      	ldr	r3, [pc, #680]	@ (801b8e4 <HAL_RCC_OscConfig+0x688>)
 801b63a:	2101      	movs	r1, #1
 801b63c:	430a      	orrs	r2, r1
 801b63e:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 801b640:	f7f9 f974 	bl	801492c <HAL_GetTick>
 801b644:	0003      	movs	r3, r0
 801b646:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 801b648:	e008      	b.n	801b65c <HAL_RCC_OscConfig+0x400>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 801b64a:	f7f9 f96f 	bl	801492c <HAL_GetTick>
 801b64e:	0002      	movs	r2, r0
 801b650:	697b      	ldr	r3, [r7, #20]
 801b652:	1ad3      	subs	r3, r2, r3
 801b654:	2b02      	cmp	r3, #2
 801b656:	d901      	bls.n	801b65c <HAL_RCC_OscConfig+0x400>
        {
          return HAL_TIMEOUT;
 801b658:	2303      	movs	r3, #3
 801b65a:	e1c8      	b.n	801b9ee <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 801b65c:	4ba1      	ldr	r3, [pc, #644]	@ (801b8e4 <HAL_RCC_OscConfig+0x688>)
 801b65e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801b660:	2202      	movs	r2, #2
 801b662:	4013      	ands	r3, r2
 801b664:	d0f1      	beq.n	801b64a <HAL_RCC_OscConfig+0x3ee>
 801b666:	e018      	b.n	801b69a <HAL_RCC_OscConfig+0x43e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 801b668:	4b9e      	ldr	r3, [pc, #632]	@ (801b8e4 <HAL_RCC_OscConfig+0x688>)
 801b66a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801b66c:	4b9d      	ldr	r3, [pc, #628]	@ (801b8e4 <HAL_RCC_OscConfig+0x688>)
 801b66e:	2101      	movs	r1, #1
 801b670:	438a      	bics	r2, r1
 801b672:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 801b674:	f7f9 f95a 	bl	801492c <HAL_GetTick>
 801b678:	0003      	movs	r3, r0
 801b67a:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 801b67c:	e008      	b.n	801b690 <HAL_RCC_OscConfig+0x434>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 801b67e:	f7f9 f955 	bl	801492c <HAL_GetTick>
 801b682:	0002      	movs	r2, r0
 801b684:	697b      	ldr	r3, [r7, #20]
 801b686:	1ad3      	subs	r3, r2, r3
 801b688:	2b02      	cmp	r3, #2
 801b68a:	d901      	bls.n	801b690 <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 801b68c:	2303      	movs	r3, #3
 801b68e:	e1ae      	b.n	801b9ee <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 801b690:	4b94      	ldr	r3, [pc, #592]	@ (801b8e4 <HAL_RCC_OscConfig+0x688>)
 801b692:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801b694:	2202      	movs	r2, #2
 801b696:	4013      	ands	r3, r2
 801b698:	d1f1      	bne.n	801b67e <HAL_RCC_OscConfig+0x422>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 801b69a:	687b      	ldr	r3, [r7, #4]
 801b69c:	681b      	ldr	r3, [r3, #0]
 801b69e:	2204      	movs	r2, #4
 801b6a0:	4013      	ands	r3, r2
 801b6a2:	d100      	bne.n	801b6a6 <HAL_RCC_OscConfig+0x44a>
 801b6a4:	e0ae      	b.n	801b804 <HAL_RCC_OscConfig+0x5a8>
  {
    FlagStatus       pwrclkchanged = RESET;
 801b6a6:	2023      	movs	r0, #35	@ 0x23
 801b6a8:	183b      	adds	r3, r7, r0
 801b6aa:	2200      	movs	r2, #0
 801b6ac:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 801b6ae:	4b8d      	ldr	r3, [pc, #564]	@ (801b8e4 <HAL_RCC_OscConfig+0x688>)
 801b6b0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801b6b2:	2380      	movs	r3, #128	@ 0x80
 801b6b4:	055b      	lsls	r3, r3, #21
 801b6b6:	4013      	ands	r3, r2
 801b6b8:	d109      	bne.n	801b6ce <HAL_RCC_OscConfig+0x472>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 801b6ba:	4b8a      	ldr	r3, [pc, #552]	@ (801b8e4 <HAL_RCC_OscConfig+0x688>)
 801b6bc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801b6be:	4b89      	ldr	r3, [pc, #548]	@ (801b8e4 <HAL_RCC_OscConfig+0x688>)
 801b6c0:	2180      	movs	r1, #128	@ 0x80
 801b6c2:	0549      	lsls	r1, r1, #21
 801b6c4:	430a      	orrs	r2, r1
 801b6c6:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 801b6c8:	183b      	adds	r3, r7, r0
 801b6ca:	2201      	movs	r2, #1
 801b6cc:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 801b6ce:	4b88      	ldr	r3, [pc, #544]	@ (801b8f0 <HAL_RCC_OscConfig+0x694>)
 801b6d0:	681a      	ldr	r2, [r3, #0]
 801b6d2:	2380      	movs	r3, #128	@ 0x80
 801b6d4:	005b      	lsls	r3, r3, #1
 801b6d6:	4013      	ands	r3, r2
 801b6d8:	d11a      	bne.n	801b710 <HAL_RCC_OscConfig+0x4b4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 801b6da:	4b85      	ldr	r3, [pc, #532]	@ (801b8f0 <HAL_RCC_OscConfig+0x694>)
 801b6dc:	681a      	ldr	r2, [r3, #0]
 801b6de:	4b84      	ldr	r3, [pc, #528]	@ (801b8f0 <HAL_RCC_OscConfig+0x694>)
 801b6e0:	2180      	movs	r1, #128	@ 0x80
 801b6e2:	0049      	lsls	r1, r1, #1
 801b6e4:	430a      	orrs	r2, r1
 801b6e6:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 801b6e8:	f7f9 f920 	bl	801492c <HAL_GetTick>
 801b6ec:	0003      	movs	r3, r0
 801b6ee:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 801b6f0:	e008      	b.n	801b704 <HAL_RCC_OscConfig+0x4a8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 801b6f2:	f7f9 f91b 	bl	801492c <HAL_GetTick>
 801b6f6:	0002      	movs	r2, r0
 801b6f8:	697b      	ldr	r3, [r7, #20]
 801b6fa:	1ad3      	subs	r3, r2, r3
 801b6fc:	2b64      	cmp	r3, #100	@ 0x64
 801b6fe:	d901      	bls.n	801b704 <HAL_RCC_OscConfig+0x4a8>
        {
          return HAL_TIMEOUT;
 801b700:	2303      	movs	r3, #3
 801b702:	e174      	b.n	801b9ee <HAL_RCC_OscConfig+0x792>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 801b704:	4b7a      	ldr	r3, [pc, #488]	@ (801b8f0 <HAL_RCC_OscConfig+0x694>)
 801b706:	681a      	ldr	r2, [r3, #0]
 801b708:	2380      	movs	r3, #128	@ 0x80
 801b70a:	005b      	lsls	r3, r3, #1
 801b70c:	4013      	ands	r3, r2
 801b70e:	d0f0      	beq.n	801b6f2 <HAL_RCC_OscConfig+0x496>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 801b710:	687b      	ldr	r3, [r7, #4]
 801b712:	689a      	ldr	r2, [r3, #8]
 801b714:	2380      	movs	r3, #128	@ 0x80
 801b716:	005b      	lsls	r3, r3, #1
 801b718:	429a      	cmp	r2, r3
 801b71a:	d107      	bne.n	801b72c <HAL_RCC_OscConfig+0x4d0>
 801b71c:	4b71      	ldr	r3, [pc, #452]	@ (801b8e4 <HAL_RCC_OscConfig+0x688>)
 801b71e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801b720:	4b70      	ldr	r3, [pc, #448]	@ (801b8e4 <HAL_RCC_OscConfig+0x688>)
 801b722:	2180      	movs	r1, #128	@ 0x80
 801b724:	0049      	lsls	r1, r1, #1
 801b726:	430a      	orrs	r2, r1
 801b728:	651a      	str	r2, [r3, #80]	@ 0x50
 801b72a:	e031      	b.n	801b790 <HAL_RCC_OscConfig+0x534>
 801b72c:	687b      	ldr	r3, [r7, #4]
 801b72e:	689b      	ldr	r3, [r3, #8]
 801b730:	2b00      	cmp	r3, #0
 801b732:	d10c      	bne.n	801b74e <HAL_RCC_OscConfig+0x4f2>
 801b734:	4b6b      	ldr	r3, [pc, #428]	@ (801b8e4 <HAL_RCC_OscConfig+0x688>)
 801b736:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801b738:	4b6a      	ldr	r3, [pc, #424]	@ (801b8e4 <HAL_RCC_OscConfig+0x688>)
 801b73a:	496c      	ldr	r1, [pc, #432]	@ (801b8ec <HAL_RCC_OscConfig+0x690>)
 801b73c:	400a      	ands	r2, r1
 801b73e:	651a      	str	r2, [r3, #80]	@ 0x50
 801b740:	4b68      	ldr	r3, [pc, #416]	@ (801b8e4 <HAL_RCC_OscConfig+0x688>)
 801b742:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801b744:	4b67      	ldr	r3, [pc, #412]	@ (801b8e4 <HAL_RCC_OscConfig+0x688>)
 801b746:	496b      	ldr	r1, [pc, #428]	@ (801b8f4 <HAL_RCC_OscConfig+0x698>)
 801b748:	400a      	ands	r2, r1
 801b74a:	651a      	str	r2, [r3, #80]	@ 0x50
 801b74c:	e020      	b.n	801b790 <HAL_RCC_OscConfig+0x534>
 801b74e:	687b      	ldr	r3, [r7, #4]
 801b750:	689a      	ldr	r2, [r3, #8]
 801b752:	23a0      	movs	r3, #160	@ 0xa0
 801b754:	00db      	lsls	r3, r3, #3
 801b756:	429a      	cmp	r2, r3
 801b758:	d10e      	bne.n	801b778 <HAL_RCC_OscConfig+0x51c>
 801b75a:	4b62      	ldr	r3, [pc, #392]	@ (801b8e4 <HAL_RCC_OscConfig+0x688>)
 801b75c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801b75e:	4b61      	ldr	r3, [pc, #388]	@ (801b8e4 <HAL_RCC_OscConfig+0x688>)
 801b760:	2180      	movs	r1, #128	@ 0x80
 801b762:	00c9      	lsls	r1, r1, #3
 801b764:	430a      	orrs	r2, r1
 801b766:	651a      	str	r2, [r3, #80]	@ 0x50
 801b768:	4b5e      	ldr	r3, [pc, #376]	@ (801b8e4 <HAL_RCC_OscConfig+0x688>)
 801b76a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801b76c:	4b5d      	ldr	r3, [pc, #372]	@ (801b8e4 <HAL_RCC_OscConfig+0x688>)
 801b76e:	2180      	movs	r1, #128	@ 0x80
 801b770:	0049      	lsls	r1, r1, #1
 801b772:	430a      	orrs	r2, r1
 801b774:	651a      	str	r2, [r3, #80]	@ 0x50
 801b776:	e00b      	b.n	801b790 <HAL_RCC_OscConfig+0x534>
 801b778:	4b5a      	ldr	r3, [pc, #360]	@ (801b8e4 <HAL_RCC_OscConfig+0x688>)
 801b77a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801b77c:	4b59      	ldr	r3, [pc, #356]	@ (801b8e4 <HAL_RCC_OscConfig+0x688>)
 801b77e:	495b      	ldr	r1, [pc, #364]	@ (801b8ec <HAL_RCC_OscConfig+0x690>)
 801b780:	400a      	ands	r2, r1
 801b782:	651a      	str	r2, [r3, #80]	@ 0x50
 801b784:	4b57      	ldr	r3, [pc, #348]	@ (801b8e4 <HAL_RCC_OscConfig+0x688>)
 801b786:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801b788:	4b56      	ldr	r3, [pc, #344]	@ (801b8e4 <HAL_RCC_OscConfig+0x688>)
 801b78a:	495a      	ldr	r1, [pc, #360]	@ (801b8f4 <HAL_RCC_OscConfig+0x698>)
 801b78c:	400a      	ands	r2, r1
 801b78e:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 801b790:	687b      	ldr	r3, [r7, #4]
 801b792:	689b      	ldr	r3, [r3, #8]
 801b794:	2b00      	cmp	r3, #0
 801b796:	d015      	beq.n	801b7c4 <HAL_RCC_OscConfig+0x568>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 801b798:	f7f9 f8c8 	bl	801492c <HAL_GetTick>
 801b79c:	0003      	movs	r3, r0
 801b79e:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 801b7a0:	e009      	b.n	801b7b6 <HAL_RCC_OscConfig+0x55a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 801b7a2:	f7f9 f8c3 	bl	801492c <HAL_GetTick>
 801b7a6:	0002      	movs	r2, r0
 801b7a8:	697b      	ldr	r3, [r7, #20]
 801b7aa:	1ad3      	subs	r3, r2, r3
 801b7ac:	4a52      	ldr	r2, [pc, #328]	@ (801b8f8 <HAL_RCC_OscConfig+0x69c>)
 801b7ae:	4293      	cmp	r3, r2
 801b7b0:	d901      	bls.n	801b7b6 <HAL_RCC_OscConfig+0x55a>
        {
          return HAL_TIMEOUT;
 801b7b2:	2303      	movs	r3, #3
 801b7b4:	e11b      	b.n	801b9ee <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 801b7b6:	4b4b      	ldr	r3, [pc, #300]	@ (801b8e4 <HAL_RCC_OscConfig+0x688>)
 801b7b8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801b7ba:	2380      	movs	r3, #128	@ 0x80
 801b7bc:	009b      	lsls	r3, r3, #2
 801b7be:	4013      	ands	r3, r2
 801b7c0:	d0ef      	beq.n	801b7a2 <HAL_RCC_OscConfig+0x546>
 801b7c2:	e014      	b.n	801b7ee <HAL_RCC_OscConfig+0x592>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 801b7c4:	f7f9 f8b2 	bl	801492c <HAL_GetTick>
 801b7c8:	0003      	movs	r3, r0
 801b7ca:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 801b7cc:	e009      	b.n	801b7e2 <HAL_RCC_OscConfig+0x586>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 801b7ce:	f7f9 f8ad 	bl	801492c <HAL_GetTick>
 801b7d2:	0002      	movs	r2, r0
 801b7d4:	697b      	ldr	r3, [r7, #20]
 801b7d6:	1ad3      	subs	r3, r2, r3
 801b7d8:	4a47      	ldr	r2, [pc, #284]	@ (801b8f8 <HAL_RCC_OscConfig+0x69c>)
 801b7da:	4293      	cmp	r3, r2
 801b7dc:	d901      	bls.n	801b7e2 <HAL_RCC_OscConfig+0x586>
        {
          return HAL_TIMEOUT;
 801b7de:	2303      	movs	r3, #3
 801b7e0:	e105      	b.n	801b9ee <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 801b7e2:	4b40      	ldr	r3, [pc, #256]	@ (801b8e4 <HAL_RCC_OscConfig+0x688>)
 801b7e4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801b7e6:	2380      	movs	r3, #128	@ 0x80
 801b7e8:	009b      	lsls	r3, r3, #2
 801b7ea:	4013      	ands	r3, r2
 801b7ec:	d1ef      	bne.n	801b7ce <HAL_RCC_OscConfig+0x572>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 801b7ee:	2323      	movs	r3, #35	@ 0x23
 801b7f0:	18fb      	adds	r3, r7, r3
 801b7f2:	781b      	ldrb	r3, [r3, #0]
 801b7f4:	2b01      	cmp	r3, #1
 801b7f6:	d105      	bne.n	801b804 <HAL_RCC_OscConfig+0x5a8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 801b7f8:	4b3a      	ldr	r3, [pc, #232]	@ (801b8e4 <HAL_RCC_OscConfig+0x688>)
 801b7fa:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801b7fc:	4b39      	ldr	r3, [pc, #228]	@ (801b8e4 <HAL_RCC_OscConfig+0x688>)
 801b7fe:	493f      	ldr	r1, [pc, #252]	@ (801b8fc <HAL_RCC_OscConfig+0x6a0>)
 801b800:	400a      	ands	r2, r1
 801b802:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 801b804:	687b      	ldr	r3, [r7, #4]
 801b806:	681b      	ldr	r3, [r3, #0]
 801b808:	2220      	movs	r2, #32
 801b80a:	4013      	ands	r3, r2
 801b80c:	d049      	beq.n	801b8a2 <HAL_RCC_OscConfig+0x646>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 801b80e:	687b      	ldr	r3, [r7, #4]
 801b810:	699b      	ldr	r3, [r3, #24]
 801b812:	2b00      	cmp	r3, #0
 801b814:	d026      	beq.n	801b864 <HAL_RCC_OscConfig+0x608>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 801b816:	4b33      	ldr	r3, [pc, #204]	@ (801b8e4 <HAL_RCC_OscConfig+0x688>)
 801b818:	689a      	ldr	r2, [r3, #8]
 801b81a:	4b32      	ldr	r3, [pc, #200]	@ (801b8e4 <HAL_RCC_OscConfig+0x688>)
 801b81c:	2101      	movs	r1, #1
 801b81e:	430a      	orrs	r2, r1
 801b820:	609a      	str	r2, [r3, #8]
 801b822:	4b30      	ldr	r3, [pc, #192]	@ (801b8e4 <HAL_RCC_OscConfig+0x688>)
 801b824:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801b826:	4b2f      	ldr	r3, [pc, #188]	@ (801b8e4 <HAL_RCC_OscConfig+0x688>)
 801b828:	2101      	movs	r1, #1
 801b82a:	430a      	orrs	r2, r1
 801b82c:	635a      	str	r2, [r3, #52]	@ 0x34
 801b82e:	4b34      	ldr	r3, [pc, #208]	@ (801b900 <HAL_RCC_OscConfig+0x6a4>)
 801b830:	6a1a      	ldr	r2, [r3, #32]
 801b832:	4b33      	ldr	r3, [pc, #204]	@ (801b900 <HAL_RCC_OscConfig+0x6a4>)
 801b834:	2180      	movs	r1, #128	@ 0x80
 801b836:	0189      	lsls	r1, r1, #6
 801b838:	430a      	orrs	r2, r1
 801b83a:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801b83c:	f7f9 f876 	bl	801492c <HAL_GetTick>
 801b840:	0003      	movs	r3, r0
 801b842:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 801b844:	e008      	b.n	801b858 <HAL_RCC_OscConfig+0x5fc>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 801b846:	f7f9 f871 	bl	801492c <HAL_GetTick>
 801b84a:	0002      	movs	r2, r0
 801b84c:	697b      	ldr	r3, [r7, #20]
 801b84e:	1ad3      	subs	r3, r2, r3
 801b850:	2b02      	cmp	r3, #2
 801b852:	d901      	bls.n	801b858 <HAL_RCC_OscConfig+0x5fc>
          {
            return HAL_TIMEOUT;
 801b854:	2303      	movs	r3, #3
 801b856:	e0ca      	b.n	801b9ee <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 801b858:	4b22      	ldr	r3, [pc, #136]	@ (801b8e4 <HAL_RCC_OscConfig+0x688>)
 801b85a:	689b      	ldr	r3, [r3, #8]
 801b85c:	2202      	movs	r2, #2
 801b85e:	4013      	ands	r3, r2
 801b860:	d0f1      	beq.n	801b846 <HAL_RCC_OscConfig+0x5ea>
 801b862:	e01e      	b.n	801b8a2 <HAL_RCC_OscConfig+0x646>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 801b864:	4b1f      	ldr	r3, [pc, #124]	@ (801b8e4 <HAL_RCC_OscConfig+0x688>)
 801b866:	689a      	ldr	r2, [r3, #8]
 801b868:	4b1e      	ldr	r3, [pc, #120]	@ (801b8e4 <HAL_RCC_OscConfig+0x688>)
 801b86a:	2101      	movs	r1, #1
 801b86c:	438a      	bics	r2, r1
 801b86e:	609a      	str	r2, [r3, #8]
 801b870:	4b23      	ldr	r3, [pc, #140]	@ (801b900 <HAL_RCC_OscConfig+0x6a4>)
 801b872:	6a1a      	ldr	r2, [r3, #32]
 801b874:	4b22      	ldr	r3, [pc, #136]	@ (801b900 <HAL_RCC_OscConfig+0x6a4>)
 801b876:	4923      	ldr	r1, [pc, #140]	@ (801b904 <HAL_RCC_OscConfig+0x6a8>)
 801b878:	400a      	ands	r2, r1
 801b87a:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801b87c:	f7f9 f856 	bl	801492c <HAL_GetTick>
 801b880:	0003      	movs	r3, r0
 801b882:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 801b884:	e008      	b.n	801b898 <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 801b886:	f7f9 f851 	bl	801492c <HAL_GetTick>
 801b88a:	0002      	movs	r2, r0
 801b88c:	697b      	ldr	r3, [r7, #20]
 801b88e:	1ad3      	subs	r3, r2, r3
 801b890:	2b02      	cmp	r3, #2
 801b892:	d901      	bls.n	801b898 <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 801b894:	2303      	movs	r3, #3
 801b896:	e0aa      	b.n	801b9ee <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 801b898:	4b12      	ldr	r3, [pc, #72]	@ (801b8e4 <HAL_RCC_OscConfig+0x688>)
 801b89a:	689b      	ldr	r3, [r3, #8]
 801b89c:	2202      	movs	r2, #2
 801b89e:	4013      	ands	r3, r2
 801b8a0:	d1f1      	bne.n	801b886 <HAL_RCC_OscConfig+0x62a>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 801b8a2:	687b      	ldr	r3, [r7, #4]
 801b8a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801b8a6:	2b00      	cmp	r3, #0
 801b8a8:	d100      	bne.n	801b8ac <HAL_RCC_OscConfig+0x650>
 801b8aa:	e09f      	b.n	801b9ec <HAL_RCC_OscConfig+0x790>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 801b8ac:	69fb      	ldr	r3, [r7, #28]
 801b8ae:	2b0c      	cmp	r3, #12
 801b8b0:	d100      	bne.n	801b8b4 <HAL_RCC_OscConfig+0x658>
 801b8b2:	e078      	b.n	801b9a6 <HAL_RCC_OscConfig+0x74a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 801b8b4:	687b      	ldr	r3, [r7, #4]
 801b8b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801b8b8:	2b02      	cmp	r3, #2
 801b8ba:	d159      	bne.n	801b970 <HAL_RCC_OscConfig+0x714>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 801b8bc:	4b09      	ldr	r3, [pc, #36]	@ (801b8e4 <HAL_RCC_OscConfig+0x688>)
 801b8be:	681a      	ldr	r2, [r3, #0]
 801b8c0:	4b08      	ldr	r3, [pc, #32]	@ (801b8e4 <HAL_RCC_OscConfig+0x688>)
 801b8c2:	4911      	ldr	r1, [pc, #68]	@ (801b908 <HAL_RCC_OscConfig+0x6ac>)
 801b8c4:	400a      	ands	r2, r1
 801b8c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801b8c8:	f7f9 f830 	bl	801492c <HAL_GetTick>
 801b8cc:	0003      	movs	r3, r0
 801b8ce:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 801b8d0:	e01c      	b.n	801b90c <HAL_RCC_OscConfig+0x6b0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 801b8d2:	f7f9 f82b 	bl	801492c <HAL_GetTick>
 801b8d6:	0002      	movs	r2, r0
 801b8d8:	697b      	ldr	r3, [r7, #20]
 801b8da:	1ad3      	subs	r3, r2, r3
 801b8dc:	2b02      	cmp	r3, #2
 801b8de:	d915      	bls.n	801b90c <HAL_RCC_OscConfig+0x6b0>
          {
            return HAL_TIMEOUT;
 801b8e0:	2303      	movs	r3, #3
 801b8e2:	e084      	b.n	801b9ee <HAL_RCC_OscConfig+0x792>
 801b8e4:	40021000 	.word	0x40021000
 801b8e8:	ffff1fff 	.word	0xffff1fff
 801b8ec:	fffffeff 	.word	0xfffffeff
 801b8f0:	40007000 	.word	0x40007000
 801b8f4:	fffffbff 	.word	0xfffffbff
 801b8f8:	00001388 	.word	0x00001388
 801b8fc:	efffffff 	.word	0xefffffff
 801b900:	40010000 	.word	0x40010000
 801b904:	ffffdfff 	.word	0xffffdfff
 801b908:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 801b90c:	4b3a      	ldr	r3, [pc, #232]	@ (801b9f8 <HAL_RCC_OscConfig+0x79c>)
 801b90e:	681a      	ldr	r2, [r3, #0]
 801b910:	2380      	movs	r3, #128	@ 0x80
 801b912:	049b      	lsls	r3, r3, #18
 801b914:	4013      	ands	r3, r2
 801b916:	d1dc      	bne.n	801b8d2 <HAL_RCC_OscConfig+0x676>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 801b918:	4b37      	ldr	r3, [pc, #220]	@ (801b9f8 <HAL_RCC_OscConfig+0x79c>)
 801b91a:	68db      	ldr	r3, [r3, #12]
 801b91c:	4a37      	ldr	r2, [pc, #220]	@ (801b9fc <HAL_RCC_OscConfig+0x7a0>)
 801b91e:	4013      	ands	r3, r2
 801b920:	0019      	movs	r1, r3
 801b922:	687b      	ldr	r3, [r7, #4]
 801b924:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801b926:	687b      	ldr	r3, [r7, #4]
 801b928:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801b92a:	431a      	orrs	r2, r3
 801b92c:	687b      	ldr	r3, [r7, #4]
 801b92e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801b930:	431a      	orrs	r2, r3
 801b932:	4b31      	ldr	r3, [pc, #196]	@ (801b9f8 <HAL_RCC_OscConfig+0x79c>)
 801b934:	430a      	orrs	r2, r1
 801b936:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 801b938:	4b2f      	ldr	r3, [pc, #188]	@ (801b9f8 <HAL_RCC_OscConfig+0x79c>)
 801b93a:	681a      	ldr	r2, [r3, #0]
 801b93c:	4b2e      	ldr	r3, [pc, #184]	@ (801b9f8 <HAL_RCC_OscConfig+0x79c>)
 801b93e:	2180      	movs	r1, #128	@ 0x80
 801b940:	0449      	lsls	r1, r1, #17
 801b942:	430a      	orrs	r2, r1
 801b944:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801b946:	f7f8 fff1 	bl	801492c <HAL_GetTick>
 801b94a:	0003      	movs	r3, r0
 801b94c:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 801b94e:	e008      	b.n	801b962 <HAL_RCC_OscConfig+0x706>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 801b950:	f7f8 ffec 	bl	801492c <HAL_GetTick>
 801b954:	0002      	movs	r2, r0
 801b956:	697b      	ldr	r3, [r7, #20]
 801b958:	1ad3      	subs	r3, r2, r3
 801b95a:	2b02      	cmp	r3, #2
 801b95c:	d901      	bls.n	801b962 <HAL_RCC_OscConfig+0x706>
          {
            return HAL_TIMEOUT;
 801b95e:	2303      	movs	r3, #3
 801b960:	e045      	b.n	801b9ee <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 801b962:	4b25      	ldr	r3, [pc, #148]	@ (801b9f8 <HAL_RCC_OscConfig+0x79c>)
 801b964:	681a      	ldr	r2, [r3, #0]
 801b966:	2380      	movs	r3, #128	@ 0x80
 801b968:	049b      	lsls	r3, r3, #18
 801b96a:	4013      	ands	r3, r2
 801b96c:	d0f0      	beq.n	801b950 <HAL_RCC_OscConfig+0x6f4>
 801b96e:	e03d      	b.n	801b9ec <HAL_RCC_OscConfig+0x790>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 801b970:	4b21      	ldr	r3, [pc, #132]	@ (801b9f8 <HAL_RCC_OscConfig+0x79c>)
 801b972:	681a      	ldr	r2, [r3, #0]
 801b974:	4b20      	ldr	r3, [pc, #128]	@ (801b9f8 <HAL_RCC_OscConfig+0x79c>)
 801b976:	4922      	ldr	r1, [pc, #136]	@ (801ba00 <HAL_RCC_OscConfig+0x7a4>)
 801b978:	400a      	ands	r2, r1
 801b97a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801b97c:	f7f8 ffd6 	bl	801492c <HAL_GetTick>
 801b980:	0003      	movs	r3, r0
 801b982:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 801b984:	e008      	b.n	801b998 <HAL_RCC_OscConfig+0x73c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 801b986:	f7f8 ffd1 	bl	801492c <HAL_GetTick>
 801b98a:	0002      	movs	r2, r0
 801b98c:	697b      	ldr	r3, [r7, #20]
 801b98e:	1ad3      	subs	r3, r2, r3
 801b990:	2b02      	cmp	r3, #2
 801b992:	d901      	bls.n	801b998 <HAL_RCC_OscConfig+0x73c>
          {
            return HAL_TIMEOUT;
 801b994:	2303      	movs	r3, #3
 801b996:	e02a      	b.n	801b9ee <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 801b998:	4b17      	ldr	r3, [pc, #92]	@ (801b9f8 <HAL_RCC_OscConfig+0x79c>)
 801b99a:	681a      	ldr	r2, [r3, #0]
 801b99c:	2380      	movs	r3, #128	@ 0x80
 801b99e:	049b      	lsls	r3, r3, #18
 801b9a0:	4013      	ands	r3, r2
 801b9a2:	d1f0      	bne.n	801b986 <HAL_RCC_OscConfig+0x72a>
 801b9a4:	e022      	b.n	801b9ec <HAL_RCC_OscConfig+0x790>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 801b9a6:	687b      	ldr	r3, [r7, #4]
 801b9a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801b9aa:	2b01      	cmp	r3, #1
 801b9ac:	d101      	bne.n	801b9b2 <HAL_RCC_OscConfig+0x756>
      {
        return HAL_ERROR;
 801b9ae:	2301      	movs	r3, #1
 801b9b0:	e01d      	b.n	801b9ee <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 801b9b2:	4b11      	ldr	r3, [pc, #68]	@ (801b9f8 <HAL_RCC_OscConfig+0x79c>)
 801b9b4:	68db      	ldr	r3, [r3, #12]
 801b9b6:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 801b9b8:	69ba      	ldr	r2, [r7, #24]
 801b9ba:	2380      	movs	r3, #128	@ 0x80
 801b9bc:	025b      	lsls	r3, r3, #9
 801b9be:	401a      	ands	r2, r3
 801b9c0:	687b      	ldr	r3, [r7, #4]
 801b9c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801b9c4:	429a      	cmp	r2, r3
 801b9c6:	d10f      	bne.n	801b9e8 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 801b9c8:	69ba      	ldr	r2, [r7, #24]
 801b9ca:	23f0      	movs	r3, #240	@ 0xf0
 801b9cc:	039b      	lsls	r3, r3, #14
 801b9ce:	401a      	ands	r2, r3
 801b9d0:	687b      	ldr	r3, [r7, #4]
 801b9d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 801b9d4:	429a      	cmp	r2, r3
 801b9d6:	d107      	bne.n	801b9e8 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 801b9d8:	69ba      	ldr	r2, [r7, #24]
 801b9da:	23c0      	movs	r3, #192	@ 0xc0
 801b9dc:	041b      	lsls	r3, r3, #16
 801b9de:	401a      	ands	r2, r3
 801b9e0:	687b      	ldr	r3, [r7, #4]
 801b9e2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 801b9e4:	429a      	cmp	r2, r3
 801b9e6:	d001      	beq.n	801b9ec <HAL_RCC_OscConfig+0x790>
        {
          return HAL_ERROR;
 801b9e8:	2301      	movs	r3, #1
 801b9ea:	e000      	b.n	801b9ee <HAL_RCC_OscConfig+0x792>
        }
      }
    }
  }
  return HAL_OK;
 801b9ec:	2300      	movs	r3, #0
}
 801b9ee:	0018      	movs	r0, r3
 801b9f0:	46bd      	mov	sp, r7
 801b9f2:	b00a      	add	sp, #40	@ 0x28
 801b9f4:	bdb0      	pop	{r4, r5, r7, pc}
 801b9f6:	46c0      	nop			@ (mov r8, r8)
 801b9f8:	40021000 	.word	0x40021000
 801b9fc:	ff02ffff 	.word	0xff02ffff
 801ba00:	feffffff 	.word	0xfeffffff

0801ba04 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 801ba04:	b5b0      	push	{r4, r5, r7, lr}
 801ba06:	b084      	sub	sp, #16
 801ba08:	af00      	add	r7, sp, #0
 801ba0a:	6078      	str	r0, [r7, #4]
 801ba0c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 801ba0e:	687b      	ldr	r3, [r7, #4]
 801ba10:	2b00      	cmp	r3, #0
 801ba12:	d101      	bne.n	801ba18 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 801ba14:	2301      	movs	r3, #1
 801ba16:	e128      	b.n	801bc6a <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 801ba18:	4b96      	ldr	r3, [pc, #600]	@ (801bc74 <HAL_RCC_ClockConfig+0x270>)
 801ba1a:	681b      	ldr	r3, [r3, #0]
 801ba1c:	2201      	movs	r2, #1
 801ba1e:	4013      	ands	r3, r2
 801ba20:	683a      	ldr	r2, [r7, #0]
 801ba22:	429a      	cmp	r2, r3
 801ba24:	d91e      	bls.n	801ba64 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 801ba26:	4b93      	ldr	r3, [pc, #588]	@ (801bc74 <HAL_RCC_ClockConfig+0x270>)
 801ba28:	681b      	ldr	r3, [r3, #0]
 801ba2a:	2201      	movs	r2, #1
 801ba2c:	4393      	bics	r3, r2
 801ba2e:	0019      	movs	r1, r3
 801ba30:	4b90      	ldr	r3, [pc, #576]	@ (801bc74 <HAL_RCC_ClockConfig+0x270>)
 801ba32:	683a      	ldr	r2, [r7, #0]
 801ba34:	430a      	orrs	r2, r1
 801ba36:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 801ba38:	f7f8 ff78 	bl	801492c <HAL_GetTick>
 801ba3c:	0003      	movs	r3, r0
 801ba3e:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 801ba40:	e009      	b.n	801ba56 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 801ba42:	f7f8 ff73 	bl	801492c <HAL_GetTick>
 801ba46:	0002      	movs	r2, r0
 801ba48:	68fb      	ldr	r3, [r7, #12]
 801ba4a:	1ad3      	subs	r3, r2, r3
 801ba4c:	4a8a      	ldr	r2, [pc, #552]	@ (801bc78 <HAL_RCC_ClockConfig+0x274>)
 801ba4e:	4293      	cmp	r3, r2
 801ba50:	d901      	bls.n	801ba56 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 801ba52:	2303      	movs	r3, #3
 801ba54:	e109      	b.n	801bc6a <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 801ba56:	4b87      	ldr	r3, [pc, #540]	@ (801bc74 <HAL_RCC_ClockConfig+0x270>)
 801ba58:	681b      	ldr	r3, [r3, #0]
 801ba5a:	2201      	movs	r2, #1
 801ba5c:	4013      	ands	r3, r2
 801ba5e:	683a      	ldr	r2, [r7, #0]
 801ba60:	429a      	cmp	r2, r3
 801ba62:	d1ee      	bne.n	801ba42 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 801ba64:	687b      	ldr	r3, [r7, #4]
 801ba66:	681b      	ldr	r3, [r3, #0]
 801ba68:	2202      	movs	r2, #2
 801ba6a:	4013      	ands	r3, r2
 801ba6c:	d009      	beq.n	801ba82 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 801ba6e:	4b83      	ldr	r3, [pc, #524]	@ (801bc7c <HAL_RCC_ClockConfig+0x278>)
 801ba70:	68db      	ldr	r3, [r3, #12]
 801ba72:	22f0      	movs	r2, #240	@ 0xf0
 801ba74:	4393      	bics	r3, r2
 801ba76:	0019      	movs	r1, r3
 801ba78:	687b      	ldr	r3, [r7, #4]
 801ba7a:	689a      	ldr	r2, [r3, #8]
 801ba7c:	4b7f      	ldr	r3, [pc, #508]	@ (801bc7c <HAL_RCC_ClockConfig+0x278>)
 801ba7e:	430a      	orrs	r2, r1
 801ba80:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 801ba82:	687b      	ldr	r3, [r7, #4]
 801ba84:	681b      	ldr	r3, [r3, #0]
 801ba86:	2201      	movs	r2, #1
 801ba88:	4013      	ands	r3, r2
 801ba8a:	d100      	bne.n	801ba8e <HAL_RCC_ClockConfig+0x8a>
 801ba8c:	e089      	b.n	801bba2 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 801ba8e:	687b      	ldr	r3, [r7, #4]
 801ba90:	685b      	ldr	r3, [r3, #4]
 801ba92:	2b02      	cmp	r3, #2
 801ba94:	d107      	bne.n	801baa6 <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 801ba96:	4b79      	ldr	r3, [pc, #484]	@ (801bc7c <HAL_RCC_ClockConfig+0x278>)
 801ba98:	681a      	ldr	r2, [r3, #0]
 801ba9a:	2380      	movs	r3, #128	@ 0x80
 801ba9c:	029b      	lsls	r3, r3, #10
 801ba9e:	4013      	ands	r3, r2
 801baa0:	d120      	bne.n	801bae4 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 801baa2:	2301      	movs	r3, #1
 801baa4:	e0e1      	b.n	801bc6a <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 801baa6:	687b      	ldr	r3, [r7, #4]
 801baa8:	685b      	ldr	r3, [r3, #4]
 801baaa:	2b03      	cmp	r3, #3
 801baac:	d107      	bne.n	801babe <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 801baae:	4b73      	ldr	r3, [pc, #460]	@ (801bc7c <HAL_RCC_ClockConfig+0x278>)
 801bab0:	681a      	ldr	r2, [r3, #0]
 801bab2:	2380      	movs	r3, #128	@ 0x80
 801bab4:	049b      	lsls	r3, r3, #18
 801bab6:	4013      	ands	r3, r2
 801bab8:	d114      	bne.n	801bae4 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 801baba:	2301      	movs	r3, #1
 801babc:	e0d5      	b.n	801bc6a <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 801babe:	687b      	ldr	r3, [r7, #4]
 801bac0:	685b      	ldr	r3, [r3, #4]
 801bac2:	2b01      	cmp	r3, #1
 801bac4:	d106      	bne.n	801bad4 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 801bac6:	4b6d      	ldr	r3, [pc, #436]	@ (801bc7c <HAL_RCC_ClockConfig+0x278>)
 801bac8:	681b      	ldr	r3, [r3, #0]
 801baca:	2204      	movs	r2, #4
 801bacc:	4013      	ands	r3, r2
 801bace:	d109      	bne.n	801bae4 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 801bad0:	2301      	movs	r3, #1
 801bad2:	e0ca      	b.n	801bc6a <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 801bad4:	4b69      	ldr	r3, [pc, #420]	@ (801bc7c <HAL_RCC_ClockConfig+0x278>)
 801bad6:	681a      	ldr	r2, [r3, #0]
 801bad8:	2380      	movs	r3, #128	@ 0x80
 801bada:	009b      	lsls	r3, r3, #2
 801badc:	4013      	ands	r3, r2
 801bade:	d101      	bne.n	801bae4 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 801bae0:	2301      	movs	r3, #1
 801bae2:	e0c2      	b.n	801bc6a <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 801bae4:	4b65      	ldr	r3, [pc, #404]	@ (801bc7c <HAL_RCC_ClockConfig+0x278>)
 801bae6:	68db      	ldr	r3, [r3, #12]
 801bae8:	2203      	movs	r2, #3
 801baea:	4393      	bics	r3, r2
 801baec:	0019      	movs	r1, r3
 801baee:	687b      	ldr	r3, [r7, #4]
 801baf0:	685a      	ldr	r2, [r3, #4]
 801baf2:	4b62      	ldr	r3, [pc, #392]	@ (801bc7c <HAL_RCC_ClockConfig+0x278>)
 801baf4:	430a      	orrs	r2, r1
 801baf6:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 801baf8:	f7f8 ff18 	bl	801492c <HAL_GetTick>
 801bafc:	0003      	movs	r3, r0
 801bafe:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 801bb00:	687b      	ldr	r3, [r7, #4]
 801bb02:	685b      	ldr	r3, [r3, #4]
 801bb04:	2b02      	cmp	r3, #2
 801bb06:	d111      	bne.n	801bb2c <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 801bb08:	e009      	b.n	801bb1e <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 801bb0a:	f7f8 ff0f 	bl	801492c <HAL_GetTick>
 801bb0e:	0002      	movs	r2, r0
 801bb10:	68fb      	ldr	r3, [r7, #12]
 801bb12:	1ad3      	subs	r3, r2, r3
 801bb14:	4a58      	ldr	r2, [pc, #352]	@ (801bc78 <HAL_RCC_ClockConfig+0x274>)
 801bb16:	4293      	cmp	r3, r2
 801bb18:	d901      	bls.n	801bb1e <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 801bb1a:	2303      	movs	r3, #3
 801bb1c:	e0a5      	b.n	801bc6a <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 801bb1e:	4b57      	ldr	r3, [pc, #348]	@ (801bc7c <HAL_RCC_ClockConfig+0x278>)
 801bb20:	68db      	ldr	r3, [r3, #12]
 801bb22:	220c      	movs	r2, #12
 801bb24:	4013      	ands	r3, r2
 801bb26:	2b08      	cmp	r3, #8
 801bb28:	d1ef      	bne.n	801bb0a <HAL_RCC_ClockConfig+0x106>
 801bb2a:	e03a      	b.n	801bba2 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 801bb2c:	687b      	ldr	r3, [r7, #4]
 801bb2e:	685b      	ldr	r3, [r3, #4]
 801bb30:	2b03      	cmp	r3, #3
 801bb32:	d111      	bne.n	801bb58 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 801bb34:	e009      	b.n	801bb4a <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 801bb36:	f7f8 fef9 	bl	801492c <HAL_GetTick>
 801bb3a:	0002      	movs	r2, r0
 801bb3c:	68fb      	ldr	r3, [r7, #12]
 801bb3e:	1ad3      	subs	r3, r2, r3
 801bb40:	4a4d      	ldr	r2, [pc, #308]	@ (801bc78 <HAL_RCC_ClockConfig+0x274>)
 801bb42:	4293      	cmp	r3, r2
 801bb44:	d901      	bls.n	801bb4a <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 801bb46:	2303      	movs	r3, #3
 801bb48:	e08f      	b.n	801bc6a <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 801bb4a:	4b4c      	ldr	r3, [pc, #304]	@ (801bc7c <HAL_RCC_ClockConfig+0x278>)
 801bb4c:	68db      	ldr	r3, [r3, #12]
 801bb4e:	220c      	movs	r2, #12
 801bb50:	4013      	ands	r3, r2
 801bb52:	2b0c      	cmp	r3, #12
 801bb54:	d1ef      	bne.n	801bb36 <HAL_RCC_ClockConfig+0x132>
 801bb56:	e024      	b.n	801bba2 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 801bb58:	687b      	ldr	r3, [r7, #4]
 801bb5a:	685b      	ldr	r3, [r3, #4]
 801bb5c:	2b01      	cmp	r3, #1
 801bb5e:	d11b      	bne.n	801bb98 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 801bb60:	e009      	b.n	801bb76 <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 801bb62:	f7f8 fee3 	bl	801492c <HAL_GetTick>
 801bb66:	0002      	movs	r2, r0
 801bb68:	68fb      	ldr	r3, [r7, #12]
 801bb6a:	1ad3      	subs	r3, r2, r3
 801bb6c:	4a42      	ldr	r2, [pc, #264]	@ (801bc78 <HAL_RCC_ClockConfig+0x274>)
 801bb6e:	4293      	cmp	r3, r2
 801bb70:	d901      	bls.n	801bb76 <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 801bb72:	2303      	movs	r3, #3
 801bb74:	e079      	b.n	801bc6a <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 801bb76:	4b41      	ldr	r3, [pc, #260]	@ (801bc7c <HAL_RCC_ClockConfig+0x278>)
 801bb78:	68db      	ldr	r3, [r3, #12]
 801bb7a:	220c      	movs	r2, #12
 801bb7c:	4013      	ands	r3, r2
 801bb7e:	2b04      	cmp	r3, #4
 801bb80:	d1ef      	bne.n	801bb62 <HAL_RCC_ClockConfig+0x15e>
 801bb82:	e00e      	b.n	801bba2 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 801bb84:	f7f8 fed2 	bl	801492c <HAL_GetTick>
 801bb88:	0002      	movs	r2, r0
 801bb8a:	68fb      	ldr	r3, [r7, #12]
 801bb8c:	1ad3      	subs	r3, r2, r3
 801bb8e:	4a3a      	ldr	r2, [pc, #232]	@ (801bc78 <HAL_RCC_ClockConfig+0x274>)
 801bb90:	4293      	cmp	r3, r2
 801bb92:	d901      	bls.n	801bb98 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 801bb94:	2303      	movs	r3, #3
 801bb96:	e068      	b.n	801bc6a <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 801bb98:	4b38      	ldr	r3, [pc, #224]	@ (801bc7c <HAL_RCC_ClockConfig+0x278>)
 801bb9a:	68db      	ldr	r3, [r3, #12]
 801bb9c:	220c      	movs	r2, #12
 801bb9e:	4013      	ands	r3, r2
 801bba0:	d1f0      	bne.n	801bb84 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 801bba2:	4b34      	ldr	r3, [pc, #208]	@ (801bc74 <HAL_RCC_ClockConfig+0x270>)
 801bba4:	681b      	ldr	r3, [r3, #0]
 801bba6:	2201      	movs	r2, #1
 801bba8:	4013      	ands	r3, r2
 801bbaa:	683a      	ldr	r2, [r7, #0]
 801bbac:	429a      	cmp	r2, r3
 801bbae:	d21e      	bcs.n	801bbee <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 801bbb0:	4b30      	ldr	r3, [pc, #192]	@ (801bc74 <HAL_RCC_ClockConfig+0x270>)
 801bbb2:	681b      	ldr	r3, [r3, #0]
 801bbb4:	2201      	movs	r2, #1
 801bbb6:	4393      	bics	r3, r2
 801bbb8:	0019      	movs	r1, r3
 801bbba:	4b2e      	ldr	r3, [pc, #184]	@ (801bc74 <HAL_RCC_ClockConfig+0x270>)
 801bbbc:	683a      	ldr	r2, [r7, #0]
 801bbbe:	430a      	orrs	r2, r1
 801bbc0:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 801bbc2:	f7f8 feb3 	bl	801492c <HAL_GetTick>
 801bbc6:	0003      	movs	r3, r0
 801bbc8:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 801bbca:	e009      	b.n	801bbe0 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 801bbcc:	f7f8 feae 	bl	801492c <HAL_GetTick>
 801bbd0:	0002      	movs	r2, r0
 801bbd2:	68fb      	ldr	r3, [r7, #12]
 801bbd4:	1ad3      	subs	r3, r2, r3
 801bbd6:	4a28      	ldr	r2, [pc, #160]	@ (801bc78 <HAL_RCC_ClockConfig+0x274>)
 801bbd8:	4293      	cmp	r3, r2
 801bbda:	d901      	bls.n	801bbe0 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 801bbdc:	2303      	movs	r3, #3
 801bbde:	e044      	b.n	801bc6a <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 801bbe0:	4b24      	ldr	r3, [pc, #144]	@ (801bc74 <HAL_RCC_ClockConfig+0x270>)
 801bbe2:	681b      	ldr	r3, [r3, #0]
 801bbe4:	2201      	movs	r2, #1
 801bbe6:	4013      	ands	r3, r2
 801bbe8:	683a      	ldr	r2, [r7, #0]
 801bbea:	429a      	cmp	r2, r3
 801bbec:	d1ee      	bne.n	801bbcc <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 801bbee:	687b      	ldr	r3, [r7, #4]
 801bbf0:	681b      	ldr	r3, [r3, #0]
 801bbf2:	2204      	movs	r2, #4
 801bbf4:	4013      	ands	r3, r2
 801bbf6:	d009      	beq.n	801bc0c <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 801bbf8:	4b20      	ldr	r3, [pc, #128]	@ (801bc7c <HAL_RCC_ClockConfig+0x278>)
 801bbfa:	68db      	ldr	r3, [r3, #12]
 801bbfc:	4a20      	ldr	r2, [pc, #128]	@ (801bc80 <HAL_RCC_ClockConfig+0x27c>)
 801bbfe:	4013      	ands	r3, r2
 801bc00:	0019      	movs	r1, r3
 801bc02:	687b      	ldr	r3, [r7, #4]
 801bc04:	68da      	ldr	r2, [r3, #12]
 801bc06:	4b1d      	ldr	r3, [pc, #116]	@ (801bc7c <HAL_RCC_ClockConfig+0x278>)
 801bc08:	430a      	orrs	r2, r1
 801bc0a:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 801bc0c:	687b      	ldr	r3, [r7, #4]
 801bc0e:	681b      	ldr	r3, [r3, #0]
 801bc10:	2208      	movs	r2, #8
 801bc12:	4013      	ands	r3, r2
 801bc14:	d00a      	beq.n	801bc2c <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 801bc16:	4b19      	ldr	r3, [pc, #100]	@ (801bc7c <HAL_RCC_ClockConfig+0x278>)
 801bc18:	68db      	ldr	r3, [r3, #12]
 801bc1a:	4a1a      	ldr	r2, [pc, #104]	@ (801bc84 <HAL_RCC_ClockConfig+0x280>)
 801bc1c:	4013      	ands	r3, r2
 801bc1e:	0019      	movs	r1, r3
 801bc20:	687b      	ldr	r3, [r7, #4]
 801bc22:	691b      	ldr	r3, [r3, #16]
 801bc24:	00da      	lsls	r2, r3, #3
 801bc26:	4b15      	ldr	r3, [pc, #84]	@ (801bc7c <HAL_RCC_ClockConfig+0x278>)
 801bc28:	430a      	orrs	r2, r1
 801bc2a:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 801bc2c:	f000 f832 	bl	801bc94 <HAL_RCC_GetSysClockFreq>
 801bc30:	0001      	movs	r1, r0
 801bc32:	4b12      	ldr	r3, [pc, #72]	@ (801bc7c <HAL_RCC_ClockConfig+0x278>)
 801bc34:	68db      	ldr	r3, [r3, #12]
 801bc36:	091b      	lsrs	r3, r3, #4
 801bc38:	220f      	movs	r2, #15
 801bc3a:	4013      	ands	r3, r2
 801bc3c:	4a12      	ldr	r2, [pc, #72]	@ (801bc88 <HAL_RCC_ClockConfig+0x284>)
 801bc3e:	5cd3      	ldrb	r3, [r2, r3]
 801bc40:	000a      	movs	r2, r1
 801bc42:	40da      	lsrs	r2, r3
 801bc44:	4b11      	ldr	r3, [pc, #68]	@ (801bc8c <HAL_RCC_ClockConfig+0x288>)
 801bc46:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 801bc48:	4b11      	ldr	r3, [pc, #68]	@ (801bc90 <HAL_RCC_ClockConfig+0x28c>)
 801bc4a:	681b      	ldr	r3, [r3, #0]
 801bc4c:	250b      	movs	r5, #11
 801bc4e:	197c      	adds	r4, r7, r5
 801bc50:	0018      	movs	r0, r3
 801bc52:	f7f8 fe25 	bl	80148a0 <HAL_InitTick>
 801bc56:	0003      	movs	r3, r0
 801bc58:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 801bc5a:	197b      	adds	r3, r7, r5
 801bc5c:	781b      	ldrb	r3, [r3, #0]
 801bc5e:	2b00      	cmp	r3, #0
 801bc60:	d002      	beq.n	801bc68 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 801bc62:	197b      	adds	r3, r7, r5
 801bc64:	781b      	ldrb	r3, [r3, #0]
 801bc66:	e000      	b.n	801bc6a <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 801bc68:	2300      	movs	r3, #0
}
 801bc6a:	0018      	movs	r0, r3
 801bc6c:	46bd      	mov	sp, r7
 801bc6e:	b004      	add	sp, #16
 801bc70:	bdb0      	pop	{r4, r5, r7, pc}
 801bc72:	46c0      	nop			@ (mov r8, r8)
 801bc74:	40022000 	.word	0x40022000
 801bc78:	00001388 	.word	0x00001388
 801bc7c:	40021000 	.word	0x40021000
 801bc80:	fffff8ff 	.word	0xfffff8ff
 801bc84:	ffffc7ff 	.word	0xffffc7ff
 801bc88:	0802e4a4 	.word	0x0802e4a4
 801bc8c:	200000ec 	.word	0x200000ec
 801bc90:	200000fc 	.word	0x200000fc

0801bc94 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 801bc94:	b5b0      	push	{r4, r5, r7, lr}
 801bc96:	b08e      	sub	sp, #56	@ 0x38
 801bc98:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 801bc9a:	4b4c      	ldr	r3, [pc, #304]	@ (801bdcc <HAL_RCC_GetSysClockFreq+0x138>)
 801bc9c:	68db      	ldr	r3, [r3, #12]
 801bc9e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 801bca0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801bca2:	230c      	movs	r3, #12
 801bca4:	4013      	ands	r3, r2
 801bca6:	2b0c      	cmp	r3, #12
 801bca8:	d014      	beq.n	801bcd4 <HAL_RCC_GetSysClockFreq+0x40>
 801bcaa:	d900      	bls.n	801bcae <HAL_RCC_GetSysClockFreq+0x1a>
 801bcac:	e07b      	b.n	801bda6 <HAL_RCC_GetSysClockFreq+0x112>
 801bcae:	2b04      	cmp	r3, #4
 801bcb0:	d002      	beq.n	801bcb8 <HAL_RCC_GetSysClockFreq+0x24>
 801bcb2:	2b08      	cmp	r3, #8
 801bcb4:	d00b      	beq.n	801bcce <HAL_RCC_GetSysClockFreq+0x3a>
 801bcb6:	e076      	b.n	801bda6 <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 801bcb8:	4b44      	ldr	r3, [pc, #272]	@ (801bdcc <HAL_RCC_GetSysClockFreq+0x138>)
 801bcba:	681b      	ldr	r3, [r3, #0]
 801bcbc:	2210      	movs	r2, #16
 801bcbe:	4013      	ands	r3, r2
 801bcc0:	d002      	beq.n	801bcc8 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 801bcc2:	4b43      	ldr	r3, [pc, #268]	@ (801bdd0 <HAL_RCC_GetSysClockFreq+0x13c>)
 801bcc4:	633b      	str	r3, [r7, #48]	@ 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 801bcc6:	e07c      	b.n	801bdc2 <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 801bcc8:	4b42      	ldr	r3, [pc, #264]	@ (801bdd4 <HAL_RCC_GetSysClockFreq+0x140>)
 801bcca:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 801bccc:	e079      	b.n	801bdc2 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 801bcce:	4b42      	ldr	r3, [pc, #264]	@ (801bdd8 <HAL_RCC_GetSysClockFreq+0x144>)
 801bcd0:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 801bcd2:	e076      	b.n	801bdc2 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 801bcd4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801bcd6:	0c9a      	lsrs	r2, r3, #18
 801bcd8:	230f      	movs	r3, #15
 801bcda:	401a      	ands	r2, r3
 801bcdc:	4b3f      	ldr	r3, [pc, #252]	@ (801bddc <HAL_RCC_GetSysClockFreq+0x148>)
 801bcde:	5c9b      	ldrb	r3, [r3, r2]
 801bce0:	62bb      	str	r3, [r7, #40]	@ 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 801bce2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801bce4:	0d9a      	lsrs	r2, r3, #22
 801bce6:	2303      	movs	r3, #3
 801bce8:	4013      	ands	r3, r2
 801bcea:	3301      	adds	r3, #1
 801bcec:	627b      	str	r3, [r7, #36]	@ 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 801bcee:	4b37      	ldr	r3, [pc, #220]	@ (801bdcc <HAL_RCC_GetSysClockFreq+0x138>)
 801bcf0:	68da      	ldr	r2, [r3, #12]
 801bcf2:	2380      	movs	r3, #128	@ 0x80
 801bcf4:	025b      	lsls	r3, r3, #9
 801bcf6:	4013      	ands	r3, r2
 801bcf8:	d01a      	beq.n	801bd30 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 801bcfa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801bcfc:	61bb      	str	r3, [r7, #24]
 801bcfe:	2300      	movs	r3, #0
 801bd00:	61fb      	str	r3, [r7, #28]
 801bd02:	4a35      	ldr	r2, [pc, #212]	@ (801bdd8 <HAL_RCC_GetSysClockFreq+0x144>)
 801bd04:	2300      	movs	r3, #0
 801bd06:	69b8      	ldr	r0, [r7, #24]
 801bd08:	69f9      	ldr	r1, [r7, #28]
 801bd0a:	f7e4 fc59 	bl	80005c0 <__aeabi_lmul>
 801bd0e:	0002      	movs	r2, r0
 801bd10:	000b      	movs	r3, r1
 801bd12:	0010      	movs	r0, r2
 801bd14:	0019      	movs	r1, r3
 801bd16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801bd18:	613b      	str	r3, [r7, #16]
 801bd1a:	2300      	movs	r3, #0
 801bd1c:	617b      	str	r3, [r7, #20]
 801bd1e:	693a      	ldr	r2, [r7, #16]
 801bd20:	697b      	ldr	r3, [r7, #20]
 801bd22:	f7e4 fc2d 	bl	8000580 <__aeabi_uldivmod>
 801bd26:	0002      	movs	r2, r0
 801bd28:	000b      	movs	r3, r1
 801bd2a:	0013      	movs	r3, r2
 801bd2c:	637b      	str	r3, [r7, #52]	@ 0x34
 801bd2e:	e037      	b.n	801bda0 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 801bd30:	4b26      	ldr	r3, [pc, #152]	@ (801bdcc <HAL_RCC_GetSysClockFreq+0x138>)
 801bd32:	681b      	ldr	r3, [r3, #0]
 801bd34:	2210      	movs	r2, #16
 801bd36:	4013      	ands	r3, r2
 801bd38:	d01a      	beq.n	801bd70 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 801bd3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801bd3c:	60bb      	str	r3, [r7, #8]
 801bd3e:	2300      	movs	r3, #0
 801bd40:	60fb      	str	r3, [r7, #12]
 801bd42:	4a23      	ldr	r2, [pc, #140]	@ (801bdd0 <HAL_RCC_GetSysClockFreq+0x13c>)
 801bd44:	2300      	movs	r3, #0
 801bd46:	68b8      	ldr	r0, [r7, #8]
 801bd48:	68f9      	ldr	r1, [r7, #12]
 801bd4a:	f7e4 fc39 	bl	80005c0 <__aeabi_lmul>
 801bd4e:	0002      	movs	r2, r0
 801bd50:	000b      	movs	r3, r1
 801bd52:	0010      	movs	r0, r2
 801bd54:	0019      	movs	r1, r3
 801bd56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801bd58:	603b      	str	r3, [r7, #0]
 801bd5a:	2300      	movs	r3, #0
 801bd5c:	607b      	str	r3, [r7, #4]
 801bd5e:	683a      	ldr	r2, [r7, #0]
 801bd60:	687b      	ldr	r3, [r7, #4]
 801bd62:	f7e4 fc0d 	bl	8000580 <__aeabi_uldivmod>
 801bd66:	0002      	movs	r2, r0
 801bd68:	000b      	movs	r3, r1
 801bd6a:	0013      	movs	r3, r2
 801bd6c:	637b      	str	r3, [r7, #52]	@ 0x34
 801bd6e:	e017      	b.n	801bda0 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 801bd70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801bd72:	0018      	movs	r0, r3
 801bd74:	2300      	movs	r3, #0
 801bd76:	0019      	movs	r1, r3
 801bd78:	4a16      	ldr	r2, [pc, #88]	@ (801bdd4 <HAL_RCC_GetSysClockFreq+0x140>)
 801bd7a:	2300      	movs	r3, #0
 801bd7c:	f7e4 fc20 	bl	80005c0 <__aeabi_lmul>
 801bd80:	0002      	movs	r2, r0
 801bd82:	000b      	movs	r3, r1
 801bd84:	0010      	movs	r0, r2
 801bd86:	0019      	movs	r1, r3
 801bd88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801bd8a:	001c      	movs	r4, r3
 801bd8c:	2300      	movs	r3, #0
 801bd8e:	001d      	movs	r5, r3
 801bd90:	0022      	movs	r2, r4
 801bd92:	002b      	movs	r3, r5
 801bd94:	f7e4 fbf4 	bl	8000580 <__aeabi_uldivmod>
 801bd98:	0002      	movs	r2, r0
 801bd9a:	000b      	movs	r3, r1
 801bd9c:	0013      	movs	r3, r2
 801bd9e:	637b      	str	r3, [r7, #52]	@ 0x34
        }
      }
      sysclockfreq = pllvco;
 801bda0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801bda2:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 801bda4:	e00d      	b.n	801bdc2 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 801bda6:	4b09      	ldr	r3, [pc, #36]	@ (801bdcc <HAL_RCC_GetSysClockFreq+0x138>)
 801bda8:	685b      	ldr	r3, [r3, #4]
 801bdaa:	0b5b      	lsrs	r3, r3, #13
 801bdac:	2207      	movs	r2, #7
 801bdae:	4013      	ands	r3, r2
 801bdb0:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 801bdb2:	6a3b      	ldr	r3, [r7, #32]
 801bdb4:	3301      	adds	r3, #1
 801bdb6:	2280      	movs	r2, #128	@ 0x80
 801bdb8:	0212      	lsls	r2, r2, #8
 801bdba:	409a      	lsls	r2, r3
 801bdbc:	0013      	movs	r3, r2
 801bdbe:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 801bdc0:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 801bdc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
}
 801bdc4:	0018      	movs	r0, r3
 801bdc6:	46bd      	mov	sp, r7
 801bdc8:	b00e      	add	sp, #56	@ 0x38
 801bdca:	bdb0      	pop	{r4, r5, r7, pc}
 801bdcc:	40021000 	.word	0x40021000
 801bdd0:	003d0900 	.word	0x003d0900
 801bdd4:	00f42400 	.word	0x00f42400
 801bdd8:	007a1200 	.word	0x007a1200
 801bddc:	0802e4bc 	.word	0x0802e4bc

0801bde0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 801bde0:	b580      	push	{r7, lr}
 801bde2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 801bde4:	4b02      	ldr	r3, [pc, #8]	@ (801bdf0 <HAL_RCC_GetHCLKFreq+0x10>)
 801bde6:	681b      	ldr	r3, [r3, #0]
}
 801bde8:	0018      	movs	r0, r3
 801bdea:	46bd      	mov	sp, r7
 801bdec:	bd80      	pop	{r7, pc}
 801bdee:	46c0      	nop			@ (mov r8, r8)
 801bdf0:	200000ec 	.word	0x200000ec

0801bdf4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 801bdf4:	b580      	push	{r7, lr}
 801bdf6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 801bdf8:	f7ff fff2 	bl	801bde0 <HAL_RCC_GetHCLKFreq>
 801bdfc:	0001      	movs	r1, r0
 801bdfe:	4b06      	ldr	r3, [pc, #24]	@ (801be18 <HAL_RCC_GetPCLK1Freq+0x24>)
 801be00:	68db      	ldr	r3, [r3, #12]
 801be02:	0a1b      	lsrs	r3, r3, #8
 801be04:	2207      	movs	r2, #7
 801be06:	4013      	ands	r3, r2
 801be08:	4a04      	ldr	r2, [pc, #16]	@ (801be1c <HAL_RCC_GetPCLK1Freq+0x28>)
 801be0a:	5cd3      	ldrb	r3, [r2, r3]
 801be0c:	40d9      	lsrs	r1, r3
 801be0e:	000b      	movs	r3, r1
}
 801be10:	0018      	movs	r0, r3
 801be12:	46bd      	mov	sp, r7
 801be14:	bd80      	pop	{r7, pc}
 801be16:	46c0      	nop			@ (mov r8, r8)
 801be18:	40021000 	.word	0x40021000
 801be1c:	0802e4b4 	.word	0x0802e4b4

0801be20 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 801be20:	b580      	push	{r7, lr}
 801be22:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 801be24:	f7ff ffdc 	bl	801bde0 <HAL_RCC_GetHCLKFreq>
 801be28:	0001      	movs	r1, r0
 801be2a:	4b06      	ldr	r3, [pc, #24]	@ (801be44 <HAL_RCC_GetPCLK2Freq+0x24>)
 801be2c:	68db      	ldr	r3, [r3, #12]
 801be2e:	0adb      	lsrs	r3, r3, #11
 801be30:	2207      	movs	r2, #7
 801be32:	4013      	ands	r3, r2
 801be34:	4a04      	ldr	r2, [pc, #16]	@ (801be48 <HAL_RCC_GetPCLK2Freq+0x28>)
 801be36:	5cd3      	ldrb	r3, [r2, r3]
 801be38:	40d9      	lsrs	r1, r3
 801be3a:	000b      	movs	r3, r1
}
 801be3c:	0018      	movs	r0, r3
 801be3e:	46bd      	mov	sp, r7
 801be40:	bd80      	pop	{r7, pc}
 801be42:	46c0      	nop			@ (mov r8, r8)
 801be44:	40021000 	.word	0x40021000
 801be48:	0802e4b4 	.word	0x0802e4b4

0801be4c <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 801be4c:	b580      	push	{r7, lr}
 801be4e:	b086      	sub	sp, #24
 801be50:	af00      	add	r7, sp, #0
 801be52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 801be54:	2017      	movs	r0, #23
 801be56:	183b      	adds	r3, r7, r0
 801be58:	2200      	movs	r2, #0
 801be5a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 801be5c:	687b      	ldr	r3, [r7, #4]
 801be5e:	681b      	ldr	r3, [r3, #0]
 801be60:	2220      	movs	r2, #32
 801be62:	4013      	ands	r3, r2
 801be64:	d100      	bne.n	801be68 <HAL_RCCEx_PeriphCLKConfig+0x1c>
 801be66:	e0c7      	b.n	801bff8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 801be68:	4b9b      	ldr	r3, [pc, #620]	@ (801c0d8 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801be6a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801be6c:	2380      	movs	r3, #128	@ 0x80
 801be6e:	055b      	lsls	r3, r3, #21
 801be70:	4013      	ands	r3, r2
 801be72:	d109      	bne.n	801be88 <HAL_RCCEx_PeriphCLKConfig+0x3c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 801be74:	4b98      	ldr	r3, [pc, #608]	@ (801c0d8 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801be76:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801be78:	4b97      	ldr	r3, [pc, #604]	@ (801c0d8 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801be7a:	2180      	movs	r1, #128	@ 0x80
 801be7c:	0549      	lsls	r1, r1, #21
 801be7e:	430a      	orrs	r2, r1
 801be80:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 801be82:	183b      	adds	r3, r7, r0
 801be84:	2201      	movs	r2, #1
 801be86:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 801be88:	4b94      	ldr	r3, [pc, #592]	@ (801c0dc <HAL_RCCEx_PeriphCLKConfig+0x290>)
 801be8a:	681a      	ldr	r2, [r3, #0]
 801be8c:	2380      	movs	r3, #128	@ 0x80
 801be8e:	005b      	lsls	r3, r3, #1
 801be90:	4013      	ands	r3, r2
 801be92:	d11a      	bne.n	801beca <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 801be94:	4b91      	ldr	r3, [pc, #580]	@ (801c0dc <HAL_RCCEx_PeriphCLKConfig+0x290>)
 801be96:	681a      	ldr	r2, [r3, #0]
 801be98:	4b90      	ldr	r3, [pc, #576]	@ (801c0dc <HAL_RCCEx_PeriphCLKConfig+0x290>)
 801be9a:	2180      	movs	r1, #128	@ 0x80
 801be9c:	0049      	lsls	r1, r1, #1
 801be9e:	430a      	orrs	r2, r1
 801bea0:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 801bea2:	f7f8 fd43 	bl	801492c <HAL_GetTick>
 801bea6:	0003      	movs	r3, r0
 801bea8:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 801beaa:	e008      	b.n	801bebe <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 801beac:	f7f8 fd3e 	bl	801492c <HAL_GetTick>
 801beb0:	0002      	movs	r2, r0
 801beb2:	693b      	ldr	r3, [r7, #16]
 801beb4:	1ad3      	subs	r3, r2, r3
 801beb6:	2b64      	cmp	r3, #100	@ 0x64
 801beb8:	d901      	bls.n	801bebe <HAL_RCCEx_PeriphCLKConfig+0x72>
        {
          return HAL_TIMEOUT;
 801beba:	2303      	movs	r3, #3
 801bebc:	e107      	b.n	801c0ce <HAL_RCCEx_PeriphCLKConfig+0x282>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 801bebe:	4b87      	ldr	r3, [pc, #540]	@ (801c0dc <HAL_RCCEx_PeriphCLKConfig+0x290>)
 801bec0:	681a      	ldr	r2, [r3, #0]
 801bec2:	2380      	movs	r3, #128	@ 0x80
 801bec4:	005b      	lsls	r3, r3, #1
 801bec6:	4013      	ands	r3, r2
 801bec8:	d0f0      	beq.n	801beac <HAL_RCCEx_PeriphCLKConfig+0x60>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 801beca:	4b83      	ldr	r3, [pc, #524]	@ (801c0d8 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801becc:	681a      	ldr	r2, [r3, #0]
 801bece:	23c0      	movs	r3, #192	@ 0xc0
 801bed0:	039b      	lsls	r3, r3, #14
 801bed2:	4013      	ands	r3, r2
 801bed4:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 801bed6:	687b      	ldr	r3, [r7, #4]
 801bed8:	685a      	ldr	r2, [r3, #4]
 801beda:	23c0      	movs	r3, #192	@ 0xc0
 801bedc:	039b      	lsls	r3, r3, #14
 801bede:	4013      	ands	r3, r2
 801bee0:	68fa      	ldr	r2, [r7, #12]
 801bee2:	429a      	cmp	r2, r3
 801bee4:	d013      	beq.n	801bf0e <HAL_RCCEx_PeriphCLKConfig+0xc2>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 801bee6:	687b      	ldr	r3, [r7, #4]
 801bee8:	685a      	ldr	r2, [r3, #4]
 801beea:	23c0      	movs	r3, #192	@ 0xc0
 801beec:	029b      	lsls	r3, r3, #10
 801beee:	401a      	ands	r2, r3
 801bef0:	23c0      	movs	r3, #192	@ 0xc0
 801bef2:	029b      	lsls	r3, r3, #10
 801bef4:	429a      	cmp	r2, r3
 801bef6:	d10a      	bne.n	801bf0e <HAL_RCCEx_PeriphCLKConfig+0xc2>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 801bef8:	4b77      	ldr	r3, [pc, #476]	@ (801c0d8 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801befa:	681a      	ldr	r2, [r3, #0]
 801befc:	2380      	movs	r3, #128	@ 0x80
 801befe:	029b      	lsls	r3, r3, #10
 801bf00:	401a      	ands	r2, r3
 801bf02:	2380      	movs	r3, #128	@ 0x80
 801bf04:	029b      	lsls	r3, r3, #10
 801bf06:	429a      	cmp	r2, r3
 801bf08:	d101      	bne.n	801bf0e <HAL_RCCEx_PeriphCLKConfig+0xc2>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 801bf0a:	2301      	movs	r3, #1
 801bf0c:	e0df      	b.n	801c0ce <HAL_RCCEx_PeriphCLKConfig+0x282>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 801bf0e:	4b72      	ldr	r3, [pc, #456]	@ (801c0d8 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801bf10:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801bf12:	23c0      	movs	r3, #192	@ 0xc0
 801bf14:	029b      	lsls	r3, r3, #10
 801bf16:	4013      	ands	r3, r2
 801bf18:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 801bf1a:	68fb      	ldr	r3, [r7, #12]
 801bf1c:	2b00      	cmp	r3, #0
 801bf1e:	d03b      	beq.n	801bf98 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 801bf20:	687b      	ldr	r3, [r7, #4]
 801bf22:	685a      	ldr	r2, [r3, #4]
 801bf24:	23c0      	movs	r3, #192	@ 0xc0
 801bf26:	029b      	lsls	r3, r3, #10
 801bf28:	4013      	ands	r3, r2
 801bf2a:	68fa      	ldr	r2, [r7, #12]
 801bf2c:	429a      	cmp	r2, r3
 801bf2e:	d033      	beq.n	801bf98 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 801bf30:	687b      	ldr	r3, [r7, #4]
 801bf32:	681b      	ldr	r3, [r3, #0]
 801bf34:	2220      	movs	r2, #32
 801bf36:	4013      	ands	r3, r2
 801bf38:	d02e      	beq.n	801bf98 <HAL_RCCEx_PeriphCLKConfig+0x14c>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 801bf3a:	4b67      	ldr	r3, [pc, #412]	@ (801c0d8 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801bf3c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801bf3e:	4a68      	ldr	r2, [pc, #416]	@ (801c0e0 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 801bf40:	4013      	ands	r3, r2
 801bf42:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 801bf44:	4b64      	ldr	r3, [pc, #400]	@ (801c0d8 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801bf46:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801bf48:	4b63      	ldr	r3, [pc, #396]	@ (801c0d8 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801bf4a:	2180      	movs	r1, #128	@ 0x80
 801bf4c:	0309      	lsls	r1, r1, #12
 801bf4e:	430a      	orrs	r2, r1
 801bf50:	651a      	str	r2, [r3, #80]	@ 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 801bf52:	4b61      	ldr	r3, [pc, #388]	@ (801c0d8 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801bf54:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801bf56:	4b60      	ldr	r3, [pc, #384]	@ (801c0d8 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801bf58:	4962      	ldr	r1, [pc, #392]	@ (801c0e4 <HAL_RCCEx_PeriphCLKConfig+0x298>)
 801bf5a:	400a      	ands	r2, r1
 801bf5c:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 801bf5e:	4b5e      	ldr	r3, [pc, #376]	@ (801c0d8 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801bf60:	68fa      	ldr	r2, [r7, #12]
 801bf62:	651a      	str	r2, [r3, #80]	@ 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 801bf64:	68fa      	ldr	r2, [r7, #12]
 801bf66:	2380      	movs	r3, #128	@ 0x80
 801bf68:	005b      	lsls	r3, r3, #1
 801bf6a:	4013      	ands	r3, r2
 801bf6c:	d014      	beq.n	801bf98 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801bf6e:	f7f8 fcdd 	bl	801492c <HAL_GetTick>
 801bf72:	0003      	movs	r3, r0
 801bf74:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 801bf76:	e009      	b.n	801bf8c <HAL_RCCEx_PeriphCLKConfig+0x140>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 801bf78:	f7f8 fcd8 	bl	801492c <HAL_GetTick>
 801bf7c:	0002      	movs	r2, r0
 801bf7e:	693b      	ldr	r3, [r7, #16]
 801bf80:	1ad3      	subs	r3, r2, r3
 801bf82:	4a59      	ldr	r2, [pc, #356]	@ (801c0e8 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 801bf84:	4293      	cmp	r3, r2
 801bf86:	d901      	bls.n	801bf8c <HAL_RCCEx_PeriphCLKConfig+0x140>
          {
            return HAL_TIMEOUT;
 801bf88:	2303      	movs	r3, #3
 801bf8a:	e0a0      	b.n	801c0ce <HAL_RCCEx_PeriphCLKConfig+0x282>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 801bf8c:	4b52      	ldr	r3, [pc, #328]	@ (801c0d8 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801bf8e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801bf90:	2380      	movs	r3, #128	@ 0x80
 801bf92:	009b      	lsls	r3, r3, #2
 801bf94:	4013      	ands	r3, r2
 801bf96:	d0ef      	beq.n	801bf78 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 801bf98:	687b      	ldr	r3, [r7, #4]
 801bf9a:	681b      	ldr	r3, [r3, #0]
 801bf9c:	2220      	movs	r2, #32
 801bf9e:	4013      	ands	r3, r2
 801bfa0:	d01f      	beq.n	801bfe2 <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 801bfa2:	687b      	ldr	r3, [r7, #4]
 801bfa4:	685a      	ldr	r2, [r3, #4]
 801bfa6:	23c0      	movs	r3, #192	@ 0xc0
 801bfa8:	029b      	lsls	r3, r3, #10
 801bfaa:	401a      	ands	r2, r3
 801bfac:	23c0      	movs	r3, #192	@ 0xc0
 801bfae:	029b      	lsls	r3, r3, #10
 801bfb0:	429a      	cmp	r2, r3
 801bfb2:	d10c      	bne.n	801bfce <HAL_RCCEx_PeriphCLKConfig+0x182>
 801bfb4:	4b48      	ldr	r3, [pc, #288]	@ (801c0d8 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801bfb6:	681b      	ldr	r3, [r3, #0]
 801bfb8:	4a4c      	ldr	r2, [pc, #304]	@ (801c0ec <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 801bfba:	4013      	ands	r3, r2
 801bfbc:	0019      	movs	r1, r3
 801bfbe:	687b      	ldr	r3, [r7, #4]
 801bfc0:	685a      	ldr	r2, [r3, #4]
 801bfc2:	23c0      	movs	r3, #192	@ 0xc0
 801bfc4:	039b      	lsls	r3, r3, #14
 801bfc6:	401a      	ands	r2, r3
 801bfc8:	4b43      	ldr	r3, [pc, #268]	@ (801c0d8 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801bfca:	430a      	orrs	r2, r1
 801bfcc:	601a      	str	r2, [r3, #0]
 801bfce:	4b42      	ldr	r3, [pc, #264]	@ (801c0d8 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801bfd0:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 801bfd2:	687b      	ldr	r3, [r7, #4]
 801bfd4:	685a      	ldr	r2, [r3, #4]
 801bfd6:	23c0      	movs	r3, #192	@ 0xc0
 801bfd8:	029b      	lsls	r3, r3, #10
 801bfda:	401a      	ands	r2, r3
 801bfdc:	4b3e      	ldr	r3, [pc, #248]	@ (801c0d8 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801bfde:	430a      	orrs	r2, r1
 801bfe0:	651a      	str	r2, [r3, #80]	@ 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 801bfe2:	2317      	movs	r3, #23
 801bfe4:	18fb      	adds	r3, r7, r3
 801bfe6:	781b      	ldrb	r3, [r3, #0]
 801bfe8:	2b01      	cmp	r3, #1
 801bfea:	d105      	bne.n	801bff8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 801bfec:	4b3a      	ldr	r3, [pc, #232]	@ (801c0d8 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801bfee:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801bff0:	4b39      	ldr	r3, [pc, #228]	@ (801c0d8 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801bff2:	493f      	ldr	r1, [pc, #252]	@ (801c0f0 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 801bff4:	400a      	ands	r2, r1
 801bff6:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 801bff8:	687b      	ldr	r3, [r7, #4]
 801bffa:	681b      	ldr	r3, [r3, #0]
 801bffc:	2201      	movs	r2, #1
 801bffe:	4013      	ands	r3, r2
 801c000:	d009      	beq.n	801c016 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 801c002:	4b35      	ldr	r3, [pc, #212]	@ (801c0d8 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801c004:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801c006:	2203      	movs	r2, #3
 801c008:	4393      	bics	r3, r2
 801c00a:	0019      	movs	r1, r3
 801c00c:	687b      	ldr	r3, [r7, #4]
 801c00e:	689a      	ldr	r2, [r3, #8]
 801c010:	4b31      	ldr	r3, [pc, #196]	@ (801c0d8 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801c012:	430a      	orrs	r2, r1
 801c014:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 801c016:	687b      	ldr	r3, [r7, #4]
 801c018:	681b      	ldr	r3, [r3, #0]
 801c01a:	2202      	movs	r2, #2
 801c01c:	4013      	ands	r3, r2
 801c01e:	d009      	beq.n	801c034 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 801c020:	4b2d      	ldr	r3, [pc, #180]	@ (801c0d8 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801c022:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801c024:	220c      	movs	r2, #12
 801c026:	4393      	bics	r3, r2
 801c028:	0019      	movs	r1, r3
 801c02a:	687b      	ldr	r3, [r7, #4]
 801c02c:	68da      	ldr	r2, [r3, #12]
 801c02e:	4b2a      	ldr	r3, [pc, #168]	@ (801c0d8 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801c030:	430a      	orrs	r2, r1
 801c032:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 801c034:	687b      	ldr	r3, [r7, #4]
 801c036:	681b      	ldr	r3, [r3, #0]
 801c038:	2204      	movs	r2, #4
 801c03a:	4013      	ands	r3, r2
 801c03c:	d009      	beq.n	801c052 <HAL_RCCEx_PeriphCLKConfig+0x206>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 801c03e:	4b26      	ldr	r3, [pc, #152]	@ (801c0d8 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801c040:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801c042:	4a2c      	ldr	r2, [pc, #176]	@ (801c0f4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 801c044:	4013      	ands	r3, r2
 801c046:	0019      	movs	r1, r3
 801c048:	687b      	ldr	r3, [r7, #4]
 801c04a:	691a      	ldr	r2, [r3, #16]
 801c04c:	4b22      	ldr	r3, [pc, #136]	@ (801c0d8 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801c04e:	430a      	orrs	r2, r1
 801c050:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 801c052:	687b      	ldr	r3, [r7, #4]
 801c054:	681b      	ldr	r3, [r3, #0]
 801c056:	2208      	movs	r2, #8
 801c058:	4013      	ands	r3, r2
 801c05a:	d009      	beq.n	801c070 <HAL_RCCEx_PeriphCLKConfig+0x224>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 801c05c:	4b1e      	ldr	r3, [pc, #120]	@ (801c0d8 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801c05e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801c060:	4a25      	ldr	r2, [pc, #148]	@ (801c0f8 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 801c062:	4013      	ands	r3, r2
 801c064:	0019      	movs	r1, r3
 801c066:	687b      	ldr	r3, [r7, #4]
 801c068:	695a      	ldr	r2, [r3, #20]
 801c06a:	4b1b      	ldr	r3, [pc, #108]	@ (801c0d8 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801c06c:	430a      	orrs	r2, r1
 801c06e:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 801c070:	687b      	ldr	r3, [r7, #4]
 801c072:	681a      	ldr	r2, [r3, #0]
 801c074:	2380      	movs	r3, #128	@ 0x80
 801c076:	005b      	lsls	r3, r3, #1
 801c078:	4013      	ands	r3, r2
 801c07a:	d009      	beq.n	801c090 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 801c07c:	4b16      	ldr	r3, [pc, #88]	@ (801c0d8 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801c07e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801c080:	4a17      	ldr	r2, [pc, #92]	@ (801c0e0 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 801c082:	4013      	ands	r3, r2
 801c084:	0019      	movs	r1, r3
 801c086:	687b      	ldr	r3, [r7, #4]
 801c088:	699a      	ldr	r2, [r3, #24]
 801c08a:	4b13      	ldr	r3, [pc, #76]	@ (801c0d8 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801c08c:	430a      	orrs	r2, r1
 801c08e:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 801c090:	687b      	ldr	r3, [r7, #4]
 801c092:	681b      	ldr	r3, [r3, #0]
 801c094:	2240      	movs	r2, #64	@ 0x40
 801c096:	4013      	ands	r3, r2
 801c098:	d009      	beq.n	801c0ae <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 801c09a:	4b0f      	ldr	r3, [pc, #60]	@ (801c0d8 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801c09c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801c09e:	4a17      	ldr	r2, [pc, #92]	@ (801c0fc <HAL_RCCEx_PeriphCLKConfig+0x2b0>)
 801c0a0:	4013      	ands	r3, r2
 801c0a2:	0019      	movs	r1, r3
 801c0a4:	687b      	ldr	r3, [r7, #4]
 801c0a6:	6a1a      	ldr	r2, [r3, #32]
 801c0a8:	4b0b      	ldr	r3, [pc, #44]	@ (801c0d8 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801c0aa:	430a      	orrs	r2, r1
 801c0ac:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 801c0ae:	687b      	ldr	r3, [r7, #4]
 801c0b0:	681b      	ldr	r3, [r3, #0]
 801c0b2:	2280      	movs	r2, #128	@ 0x80
 801c0b4:	4013      	ands	r3, r2
 801c0b6:	d009      	beq.n	801c0cc <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 801c0b8:	4b07      	ldr	r3, [pc, #28]	@ (801c0d8 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801c0ba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801c0bc:	4a10      	ldr	r2, [pc, #64]	@ (801c100 <HAL_RCCEx_PeriphCLKConfig+0x2b4>)
 801c0be:	4013      	ands	r3, r2
 801c0c0:	0019      	movs	r1, r3
 801c0c2:	687b      	ldr	r3, [r7, #4]
 801c0c4:	69da      	ldr	r2, [r3, #28]
 801c0c6:	4b04      	ldr	r3, [pc, #16]	@ (801c0d8 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801c0c8:	430a      	orrs	r2, r1
 801c0ca:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 801c0cc:	2300      	movs	r3, #0
}
 801c0ce:	0018      	movs	r0, r3
 801c0d0:	46bd      	mov	sp, r7
 801c0d2:	b006      	add	sp, #24
 801c0d4:	bd80      	pop	{r7, pc}
 801c0d6:	46c0      	nop			@ (mov r8, r8)
 801c0d8:	40021000 	.word	0x40021000
 801c0dc:	40007000 	.word	0x40007000
 801c0e0:	fffcffff 	.word	0xfffcffff
 801c0e4:	fff7ffff 	.word	0xfff7ffff
 801c0e8:	00001388 	.word	0x00001388
 801c0ec:	ffcfffff 	.word	0xffcfffff
 801c0f0:	efffffff 	.word	0xefffffff
 801c0f4:	fffff3ff 	.word	0xfffff3ff
 801c0f8:	ffffcfff 	.word	0xffffcfff
 801c0fc:	fbffffff 	.word	0xfbffffff
 801c100:	fff3ffff 	.word	0xfff3ffff

0801c104 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 801c104:	b5b0      	push	{r4, r5, r7, lr}
 801c106:	b084      	sub	sp, #16
 801c108:	af00      	add	r7, sp, #0
 801c10a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 801c10c:	230f      	movs	r3, #15
 801c10e:	18fb      	adds	r3, r7, r3
 801c110:	2201      	movs	r2, #1
 801c112:	701a      	strb	r2, [r3, #0]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 801c114:	687b      	ldr	r3, [r7, #4]
 801c116:	2b00      	cmp	r3, #0
 801c118:	d101      	bne.n	801c11e <HAL_RTC_Init+0x1a>
  {
    return HAL_ERROR;
 801c11a:	2301      	movs	r3, #1
 801c11c:	e088      	b.n	801c230 <HAL_RTC_Init+0x12c>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 801c11e:	687b      	ldr	r3, [r7, #4]
 801c120:	2221      	movs	r2, #33	@ 0x21
 801c122:	5c9b      	ldrb	r3, [r3, r2]
 801c124:	b2db      	uxtb	r3, r3
 801c126:	2b00      	cmp	r3, #0
 801c128:	d107      	bne.n	801c13a <HAL_RTC_Init+0x36>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 801c12a:	687b      	ldr	r3, [r7, #4]
 801c12c:	2220      	movs	r2, #32
 801c12e:	2100      	movs	r1, #0
 801c130:	5499      	strb	r1, [r3, r2]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 801c132:	687b      	ldr	r3, [r7, #4]
 801c134:	0018      	movs	r0, r3
 801c136:	f7f2 f9ff 	bl	800e538 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 801c13a:	687b      	ldr	r3, [r7, #4]
 801c13c:	2221      	movs	r2, #33	@ 0x21
 801c13e:	2102      	movs	r1, #2
 801c140:	5499      	strb	r1, [r3, r2]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 801c142:	687b      	ldr	r3, [r7, #4]
 801c144:	681b      	ldr	r3, [r3, #0]
 801c146:	68db      	ldr	r3, [r3, #12]
 801c148:	2210      	movs	r2, #16
 801c14a:	4013      	ands	r3, r2
 801c14c:	2b10      	cmp	r3, #16
 801c14e:	d05f      	beq.n	801c210 <HAL_RTC_Init+0x10c>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 801c150:	687b      	ldr	r3, [r7, #4]
 801c152:	681b      	ldr	r3, [r3, #0]
 801c154:	22ca      	movs	r2, #202	@ 0xca
 801c156:	625a      	str	r2, [r3, #36]	@ 0x24
 801c158:	687b      	ldr	r3, [r7, #4]
 801c15a:	681b      	ldr	r3, [r3, #0]
 801c15c:	2253      	movs	r2, #83	@ 0x53
 801c15e:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 801c160:	250f      	movs	r5, #15
 801c162:	197c      	adds	r4, r7, r5
 801c164:	687b      	ldr	r3, [r7, #4]
 801c166:	0018      	movs	r0, r3
 801c168:	f000 fa99 	bl	801c69e <RTC_EnterInitMode>
 801c16c:	0003      	movs	r3, r0
 801c16e:	7023      	strb	r3, [r4, #0]

    if (status == HAL_OK)
 801c170:	0028      	movs	r0, r5
 801c172:	183b      	adds	r3, r7, r0
 801c174:	781b      	ldrb	r3, [r3, #0]
 801c176:	2b00      	cmp	r3, #0
 801c178:	d12c      	bne.n	801c1d4 <HAL_RTC_Init+0xd0>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 801c17a:	687b      	ldr	r3, [r7, #4]
 801c17c:	681b      	ldr	r3, [r3, #0]
 801c17e:	689a      	ldr	r2, [r3, #8]
 801c180:	687b      	ldr	r3, [r7, #4]
 801c182:	681b      	ldr	r3, [r3, #0]
 801c184:	492c      	ldr	r1, [pc, #176]	@ (801c238 <HAL_RTC_Init+0x134>)
 801c186:	400a      	ands	r2, r1
 801c188:	609a      	str	r2, [r3, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 801c18a:	687b      	ldr	r3, [r7, #4]
 801c18c:	681b      	ldr	r3, [r3, #0]
 801c18e:	6899      	ldr	r1, [r3, #8]
 801c190:	687b      	ldr	r3, [r7, #4]
 801c192:	685a      	ldr	r2, [r3, #4]
 801c194:	687b      	ldr	r3, [r7, #4]
 801c196:	691b      	ldr	r3, [r3, #16]
 801c198:	431a      	orrs	r2, r3
 801c19a:	687b      	ldr	r3, [r7, #4]
 801c19c:	699b      	ldr	r3, [r3, #24]
 801c19e:	431a      	orrs	r2, r3
 801c1a0:	687b      	ldr	r3, [r7, #4]
 801c1a2:	681b      	ldr	r3, [r3, #0]
 801c1a4:	430a      	orrs	r2, r1
 801c1a6:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 801c1a8:	687b      	ldr	r3, [r7, #4]
 801c1aa:	681b      	ldr	r3, [r3, #0]
 801c1ac:	687a      	ldr	r2, [r7, #4]
 801c1ae:	68d2      	ldr	r2, [r2, #12]
 801c1b0:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 801c1b2:	687b      	ldr	r3, [r7, #4]
 801c1b4:	681b      	ldr	r3, [r3, #0]
 801c1b6:	6919      	ldr	r1, [r3, #16]
 801c1b8:	687b      	ldr	r3, [r7, #4]
 801c1ba:	689b      	ldr	r3, [r3, #8]
 801c1bc:	041a      	lsls	r2, r3, #16
 801c1be:	687b      	ldr	r3, [r7, #4]
 801c1c0:	681b      	ldr	r3, [r3, #0]
 801c1c2:	430a      	orrs	r2, r1
 801c1c4:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 801c1c6:	183c      	adds	r4, r7, r0
 801c1c8:	687b      	ldr	r3, [r7, #4]
 801c1ca:	0018      	movs	r0, r3
 801c1cc:	f000 faab 	bl	801c726 <RTC_ExitInitMode>
 801c1d0:	0003      	movs	r3, r0
 801c1d2:	7023      	strb	r3, [r4, #0]
    }

    if (status == HAL_OK)
 801c1d4:	230f      	movs	r3, #15
 801c1d6:	18fb      	adds	r3, r7, r3
 801c1d8:	781b      	ldrb	r3, [r3, #0]
 801c1da:	2b00      	cmp	r3, #0
 801c1dc:	d113      	bne.n	801c206 <HAL_RTC_Init+0x102>
    {
      hrtc->Instance->OR &= (uint32_t)~(RTC_OUTPUT_TYPE_PUSHPULL | RTC_OUTPUT_REMAP_POS1);
 801c1de:	687b      	ldr	r3, [r7, #4]
 801c1e0:	681b      	ldr	r3, [r3, #0]
 801c1e2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 801c1e4:	687b      	ldr	r3, [r7, #4]
 801c1e6:	681b      	ldr	r3, [r3, #0]
 801c1e8:	2103      	movs	r1, #3
 801c1ea:	438a      	bics	r2, r1
 801c1ec:	64da      	str	r2, [r3, #76]	@ 0x4c
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 801c1ee:	687b      	ldr	r3, [r7, #4]
 801c1f0:	681b      	ldr	r3, [r3, #0]
 801c1f2:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 801c1f4:	687b      	ldr	r3, [r7, #4]
 801c1f6:	69da      	ldr	r2, [r3, #28]
 801c1f8:	687b      	ldr	r3, [r7, #4]
 801c1fa:	695b      	ldr	r3, [r3, #20]
 801c1fc:	431a      	orrs	r2, r3
 801c1fe:	687b      	ldr	r3, [r7, #4]
 801c200:	681b      	ldr	r3, [r3, #0]
 801c202:	430a      	orrs	r2, r1
 801c204:	64da      	str	r2, [r3, #76]	@ 0x4c
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 801c206:	687b      	ldr	r3, [r7, #4]
 801c208:	681b      	ldr	r3, [r3, #0]
 801c20a:	22ff      	movs	r2, #255	@ 0xff
 801c20c:	625a      	str	r2, [r3, #36]	@ 0x24
 801c20e:	e003      	b.n	801c218 <HAL_RTC_Init+0x114>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 801c210:	230f      	movs	r3, #15
 801c212:	18fb      	adds	r3, r7, r3
 801c214:	2200      	movs	r2, #0
 801c216:	701a      	strb	r2, [r3, #0]
  }

  if (status == HAL_OK)
 801c218:	230f      	movs	r3, #15
 801c21a:	18fb      	adds	r3, r7, r3
 801c21c:	781b      	ldrb	r3, [r3, #0]
 801c21e:	2b00      	cmp	r3, #0
 801c220:	d103      	bne.n	801c22a <HAL_RTC_Init+0x126>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 801c222:	687b      	ldr	r3, [r7, #4]
 801c224:	2221      	movs	r2, #33	@ 0x21
 801c226:	2101      	movs	r1, #1
 801c228:	5499      	strb	r1, [r3, r2]
  }

  return status;
 801c22a:	230f      	movs	r3, #15
 801c22c:	18fb      	adds	r3, r7, r3
 801c22e:	781b      	ldrb	r3, [r3, #0]
}
 801c230:	0018      	movs	r0, r3
 801c232:	46bd      	mov	sp, r7
 801c234:	b004      	add	sp, #16
 801c236:	bdb0      	pop	{r4, r5, r7, pc}
 801c238:	ff8fffbf 	.word	0xff8fffbf

0801c23c <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 801c23c:	b5b0      	push	{r4, r5, r7, lr}
 801c23e:	b086      	sub	sp, #24
 801c240:	af00      	add	r7, sp, #0
 801c242:	60f8      	str	r0, [r7, #12]
 801c244:	60b9      	str	r1, [r7, #8]
 801c246:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 801c248:	2300      	movs	r3, #0
 801c24a:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 801c24c:	68fb      	ldr	r3, [r7, #12]
 801c24e:	2220      	movs	r2, #32
 801c250:	5c9b      	ldrb	r3, [r3, r2]
 801c252:	2b01      	cmp	r3, #1
 801c254:	d101      	bne.n	801c25a <HAL_RTC_SetTime+0x1e>
 801c256:	2302      	movs	r3, #2
 801c258:	e092      	b.n	801c380 <HAL_RTC_SetTime+0x144>
 801c25a:	68fb      	ldr	r3, [r7, #12]
 801c25c:	2220      	movs	r2, #32
 801c25e:	2101      	movs	r1, #1
 801c260:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 801c262:	68fb      	ldr	r3, [r7, #12]
 801c264:	2221      	movs	r2, #33	@ 0x21
 801c266:	2102      	movs	r1, #2
 801c268:	5499      	strb	r1, [r3, r2]

  if (Format == RTC_FORMAT_BIN)
 801c26a:	687b      	ldr	r3, [r7, #4]
 801c26c:	2b00      	cmp	r3, #0
 801c26e:	d125      	bne.n	801c2bc <HAL_RTC_SetTime+0x80>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 801c270:	68fb      	ldr	r3, [r7, #12]
 801c272:	681b      	ldr	r3, [r3, #0]
 801c274:	689b      	ldr	r3, [r3, #8]
 801c276:	2240      	movs	r2, #64	@ 0x40
 801c278:	4013      	ands	r3, r2
 801c27a:	d102      	bne.n	801c282 <HAL_RTC_SetTime+0x46>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 801c27c:	68bb      	ldr	r3, [r7, #8]
 801c27e:	2200      	movs	r2, #0
 801c280:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 801c282:	68bb      	ldr	r3, [r7, #8]
 801c284:	781b      	ldrb	r3, [r3, #0]
 801c286:	0018      	movs	r0, r3
 801c288:	f000 fa77 	bl	801c77a <RTC_ByteToBcd2>
 801c28c:	0003      	movs	r3, r0
 801c28e:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 801c290:	68bb      	ldr	r3, [r7, #8]
 801c292:	785b      	ldrb	r3, [r3, #1]
 801c294:	0018      	movs	r0, r3
 801c296:	f000 fa70 	bl	801c77a <RTC_ByteToBcd2>
 801c29a:	0003      	movs	r3, r0
 801c29c:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 801c29e:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 801c2a0:	68bb      	ldr	r3, [r7, #8]
 801c2a2:	789b      	ldrb	r3, [r3, #2]
 801c2a4:	0018      	movs	r0, r3
 801c2a6:	f000 fa68 	bl	801c77a <RTC_ByteToBcd2>
 801c2aa:	0003      	movs	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 801c2ac:	0022      	movs	r2, r4
 801c2ae:	431a      	orrs	r2, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 801c2b0:	68bb      	ldr	r3, [r7, #8]
 801c2b2:	78db      	ldrb	r3, [r3, #3]
 801c2b4:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 801c2b6:	4313      	orrs	r3, r2
 801c2b8:	617b      	str	r3, [r7, #20]
 801c2ba:	e017      	b.n	801c2ec <HAL_RTC_SetTime+0xb0>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 801c2bc:	68fb      	ldr	r3, [r7, #12]
 801c2be:	681b      	ldr	r3, [r3, #0]
 801c2c0:	689b      	ldr	r3, [r3, #8]
 801c2c2:	2240      	movs	r2, #64	@ 0x40
 801c2c4:	4013      	ands	r3, r2
 801c2c6:	d102      	bne.n	801c2ce <HAL_RTC_SetTime+0x92>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 801c2c8:	68bb      	ldr	r3, [r7, #8]
 801c2ca:	2200      	movs	r2, #0
 801c2cc:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 801c2ce:	68bb      	ldr	r3, [r7, #8]
 801c2d0:	781b      	ldrb	r3, [r3, #0]
 801c2d2:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 801c2d4:	68bb      	ldr	r3, [r7, #8]
 801c2d6:	785b      	ldrb	r3, [r3, #1]
 801c2d8:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 801c2da:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 801c2dc:	68ba      	ldr	r2, [r7, #8]
 801c2de:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 801c2e0:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 801c2e2:	68bb      	ldr	r3, [r7, #8]
 801c2e4:	78db      	ldrb	r3, [r3, #3]
 801c2e6:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 801c2e8:	4313      	orrs	r3, r2
 801c2ea:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 801c2ec:	68fb      	ldr	r3, [r7, #12]
 801c2ee:	681b      	ldr	r3, [r3, #0]
 801c2f0:	22ca      	movs	r2, #202	@ 0xca
 801c2f2:	625a      	str	r2, [r3, #36]	@ 0x24
 801c2f4:	68fb      	ldr	r3, [r7, #12]
 801c2f6:	681b      	ldr	r3, [r3, #0]
 801c2f8:	2253      	movs	r2, #83	@ 0x53
 801c2fa:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 801c2fc:	2513      	movs	r5, #19
 801c2fe:	197c      	adds	r4, r7, r5
 801c300:	68fb      	ldr	r3, [r7, #12]
 801c302:	0018      	movs	r0, r3
 801c304:	f000 f9cb 	bl	801c69e <RTC_EnterInitMode>
 801c308:	0003      	movs	r3, r0
 801c30a:	7023      	strb	r3, [r4, #0]

  if (status == HAL_OK)
 801c30c:	0028      	movs	r0, r5
 801c30e:	183b      	adds	r3, r7, r0
 801c310:	781b      	ldrb	r3, [r3, #0]
 801c312:	2b00      	cmp	r3, #0
 801c314:	d120      	bne.n	801c358 <HAL_RTC_SetTime+0x11c>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 801c316:	68fb      	ldr	r3, [r7, #12]
 801c318:	681b      	ldr	r3, [r3, #0]
 801c31a:	697a      	ldr	r2, [r7, #20]
 801c31c:	491a      	ldr	r1, [pc, #104]	@ (801c388 <HAL_RTC_SetTime+0x14c>)
 801c31e:	400a      	ands	r2, r1
 801c320:	601a      	str	r2, [r3, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 801c322:	68fb      	ldr	r3, [r7, #12]
 801c324:	681b      	ldr	r3, [r3, #0]
 801c326:	689a      	ldr	r2, [r3, #8]
 801c328:	68fb      	ldr	r3, [r7, #12]
 801c32a:	681b      	ldr	r3, [r3, #0]
 801c32c:	4917      	ldr	r1, [pc, #92]	@ (801c38c <HAL_RTC_SetTime+0x150>)
 801c32e:	400a      	ands	r2, r1
 801c330:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 801c332:	68fb      	ldr	r3, [r7, #12]
 801c334:	681b      	ldr	r3, [r3, #0]
 801c336:	6899      	ldr	r1, [r3, #8]
 801c338:	68bb      	ldr	r3, [r7, #8]
 801c33a:	68da      	ldr	r2, [r3, #12]
 801c33c:	68bb      	ldr	r3, [r7, #8]
 801c33e:	691b      	ldr	r3, [r3, #16]
 801c340:	431a      	orrs	r2, r3
 801c342:	68fb      	ldr	r3, [r7, #12]
 801c344:	681b      	ldr	r3, [r3, #0]
 801c346:	430a      	orrs	r2, r1
 801c348:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 801c34a:	183c      	adds	r4, r7, r0
 801c34c:	68fb      	ldr	r3, [r7, #12]
 801c34e:	0018      	movs	r0, r3
 801c350:	f000 f9e9 	bl	801c726 <RTC_ExitInitMode>
 801c354:	0003      	movs	r3, r0
 801c356:	7023      	strb	r3, [r4, #0]
  }

  if (status == HAL_OK)
 801c358:	2313      	movs	r3, #19
 801c35a:	18fb      	adds	r3, r7, r3
 801c35c:	781b      	ldrb	r3, [r3, #0]
 801c35e:	2b00      	cmp	r3, #0
 801c360:	d103      	bne.n	801c36a <HAL_RTC_SetTime+0x12e>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 801c362:	68fb      	ldr	r3, [r7, #12]
 801c364:	2221      	movs	r2, #33	@ 0x21
 801c366:	2101      	movs	r1, #1
 801c368:	5499      	strb	r1, [r3, r2]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 801c36a:	68fb      	ldr	r3, [r7, #12]
 801c36c:	681b      	ldr	r3, [r3, #0]
 801c36e:	22ff      	movs	r2, #255	@ 0xff
 801c370:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 801c372:	68fb      	ldr	r3, [r7, #12]
 801c374:	2220      	movs	r2, #32
 801c376:	2100      	movs	r1, #0
 801c378:	5499      	strb	r1, [r3, r2]

  return status;
 801c37a:	2313      	movs	r3, #19
 801c37c:	18fb      	adds	r3, r7, r3
 801c37e:	781b      	ldrb	r3, [r3, #0]
}
 801c380:	0018      	movs	r0, r3
 801c382:	46bd      	mov	sp, r7
 801c384:	b006      	add	sp, #24
 801c386:	bdb0      	pop	{r4, r5, r7, pc}
 801c388:	007f7f7f 	.word	0x007f7f7f
 801c38c:	fffbffff 	.word	0xfffbffff

0801c390 <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 801c390:	b580      	push	{r7, lr}
 801c392:	b086      	sub	sp, #24
 801c394:	af00      	add	r7, sp, #0
 801c396:	60f8      	str	r0, [r7, #12]
 801c398:	60b9      	str	r1, [r7, #8]
 801c39a:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 801c39c:	2300      	movs	r3, #0
 801c39e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 801c3a0:	68fb      	ldr	r3, [r7, #12]
 801c3a2:	681b      	ldr	r3, [r3, #0]
 801c3a4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 801c3a6:	68bb      	ldr	r3, [r7, #8]
 801c3a8:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 801c3aa:	68fb      	ldr	r3, [r7, #12]
 801c3ac:	681b      	ldr	r3, [r3, #0]
 801c3ae:	691b      	ldr	r3, [r3, #16]
 801c3b0:	045b      	lsls	r3, r3, #17
 801c3b2:	0c5a      	lsrs	r2, r3, #17
 801c3b4:	68bb      	ldr	r3, [r7, #8]
 801c3b6:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 801c3b8:	68fb      	ldr	r3, [r7, #12]
 801c3ba:	681b      	ldr	r3, [r3, #0]
 801c3bc:	681b      	ldr	r3, [r3, #0]
 801c3be:	4a22      	ldr	r2, [pc, #136]	@ (801c448 <HAL_RTC_GetTime+0xb8>)
 801c3c0:	4013      	ands	r3, r2
 801c3c2:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 801c3c4:	697b      	ldr	r3, [r7, #20]
 801c3c6:	0c1b      	lsrs	r3, r3, #16
 801c3c8:	b2db      	uxtb	r3, r3
 801c3ca:	223f      	movs	r2, #63	@ 0x3f
 801c3cc:	4013      	ands	r3, r2
 801c3ce:	b2da      	uxtb	r2, r3
 801c3d0:	68bb      	ldr	r3, [r7, #8]
 801c3d2:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 801c3d4:	697b      	ldr	r3, [r7, #20]
 801c3d6:	0a1b      	lsrs	r3, r3, #8
 801c3d8:	b2db      	uxtb	r3, r3
 801c3da:	227f      	movs	r2, #127	@ 0x7f
 801c3dc:	4013      	ands	r3, r2
 801c3de:	b2da      	uxtb	r2, r3
 801c3e0:	68bb      	ldr	r3, [r7, #8]
 801c3e2:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 801c3e4:	697b      	ldr	r3, [r7, #20]
 801c3e6:	b2db      	uxtb	r3, r3
 801c3e8:	227f      	movs	r2, #127	@ 0x7f
 801c3ea:	4013      	ands	r3, r2
 801c3ec:	b2da      	uxtb	r2, r3
 801c3ee:	68bb      	ldr	r3, [r7, #8]
 801c3f0:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 801c3f2:	697b      	ldr	r3, [r7, #20]
 801c3f4:	0d9b      	lsrs	r3, r3, #22
 801c3f6:	b2db      	uxtb	r3, r3
 801c3f8:	2201      	movs	r2, #1
 801c3fa:	4013      	ands	r3, r2
 801c3fc:	b2da      	uxtb	r2, r3
 801c3fe:	68bb      	ldr	r3, [r7, #8]
 801c400:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 801c402:	687b      	ldr	r3, [r7, #4]
 801c404:	2b00      	cmp	r3, #0
 801c406:	d11a      	bne.n	801c43e <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 801c408:	68bb      	ldr	r3, [r7, #8]
 801c40a:	781b      	ldrb	r3, [r3, #0]
 801c40c:	0018      	movs	r0, r3
 801c40e:	f000 f9d5 	bl	801c7bc <RTC_Bcd2ToByte>
 801c412:	0003      	movs	r3, r0
 801c414:	001a      	movs	r2, r3
 801c416:	68bb      	ldr	r3, [r7, #8]
 801c418:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 801c41a:	68bb      	ldr	r3, [r7, #8]
 801c41c:	785b      	ldrb	r3, [r3, #1]
 801c41e:	0018      	movs	r0, r3
 801c420:	f000 f9cc 	bl	801c7bc <RTC_Bcd2ToByte>
 801c424:	0003      	movs	r3, r0
 801c426:	001a      	movs	r2, r3
 801c428:	68bb      	ldr	r3, [r7, #8]
 801c42a:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 801c42c:	68bb      	ldr	r3, [r7, #8]
 801c42e:	789b      	ldrb	r3, [r3, #2]
 801c430:	0018      	movs	r0, r3
 801c432:	f000 f9c3 	bl	801c7bc <RTC_Bcd2ToByte>
 801c436:	0003      	movs	r3, r0
 801c438:	001a      	movs	r2, r3
 801c43a:	68bb      	ldr	r3, [r7, #8]
 801c43c:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 801c43e:	2300      	movs	r3, #0
}
 801c440:	0018      	movs	r0, r3
 801c442:	46bd      	mov	sp, r7
 801c444:	b006      	add	sp, #24
 801c446:	bd80      	pop	{r7, pc}
 801c448:	007f7f7f 	.word	0x007f7f7f

0801c44c <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 801c44c:	b5b0      	push	{r4, r5, r7, lr}
 801c44e:	b086      	sub	sp, #24
 801c450:	af00      	add	r7, sp, #0
 801c452:	60f8      	str	r0, [r7, #12]
 801c454:	60b9      	str	r1, [r7, #8]
 801c456:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 801c458:	2300      	movs	r3, #0
 801c45a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 801c45c:	68fb      	ldr	r3, [r7, #12]
 801c45e:	2220      	movs	r2, #32
 801c460:	5c9b      	ldrb	r3, [r3, r2]
 801c462:	2b01      	cmp	r3, #1
 801c464:	d101      	bne.n	801c46a <HAL_RTC_SetDate+0x1e>
 801c466:	2302      	movs	r3, #2
 801c468:	e07e      	b.n	801c568 <HAL_RTC_SetDate+0x11c>
 801c46a:	68fb      	ldr	r3, [r7, #12]
 801c46c:	2220      	movs	r2, #32
 801c46e:	2101      	movs	r1, #1
 801c470:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 801c472:	68fb      	ldr	r3, [r7, #12]
 801c474:	2221      	movs	r2, #33	@ 0x21
 801c476:	2102      	movs	r1, #2
 801c478:	5499      	strb	r1, [r3, r2]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 801c47a:	687b      	ldr	r3, [r7, #4]
 801c47c:	2b00      	cmp	r3, #0
 801c47e:	d10e      	bne.n	801c49e <HAL_RTC_SetDate+0x52>
 801c480:	68bb      	ldr	r3, [r7, #8]
 801c482:	785b      	ldrb	r3, [r3, #1]
 801c484:	001a      	movs	r2, r3
 801c486:	2310      	movs	r3, #16
 801c488:	4013      	ands	r3, r2
 801c48a:	d008      	beq.n	801c49e <HAL_RTC_SetDate+0x52>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 801c48c:	68bb      	ldr	r3, [r7, #8]
 801c48e:	785b      	ldrb	r3, [r3, #1]
 801c490:	2210      	movs	r2, #16
 801c492:	4393      	bics	r3, r2
 801c494:	b2db      	uxtb	r3, r3
 801c496:	330a      	adds	r3, #10
 801c498:	b2da      	uxtb	r2, r3
 801c49a:	68bb      	ldr	r3, [r7, #8]
 801c49c:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 801c49e:	687b      	ldr	r3, [r7, #4]
 801c4a0:	2b00      	cmp	r3, #0
 801c4a2:	d11c      	bne.n	801c4de <HAL_RTC_SetDate+0x92>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 801c4a4:	68bb      	ldr	r3, [r7, #8]
 801c4a6:	78db      	ldrb	r3, [r3, #3]
 801c4a8:	0018      	movs	r0, r3
 801c4aa:	f000 f966 	bl	801c77a <RTC_ByteToBcd2>
 801c4ae:	0003      	movs	r3, r0
 801c4b0:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 801c4b2:	68bb      	ldr	r3, [r7, #8]
 801c4b4:	785b      	ldrb	r3, [r3, #1]
 801c4b6:	0018      	movs	r0, r3
 801c4b8:	f000 f95f 	bl	801c77a <RTC_ByteToBcd2>
 801c4bc:	0003      	movs	r3, r0
 801c4be:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 801c4c0:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 801c4c2:	68bb      	ldr	r3, [r7, #8]
 801c4c4:	789b      	ldrb	r3, [r3, #2]
 801c4c6:	0018      	movs	r0, r3
 801c4c8:	f000 f957 	bl	801c77a <RTC_ByteToBcd2>
 801c4cc:	0003      	movs	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 801c4ce:	0022      	movs	r2, r4
 801c4d0:	431a      	orrs	r2, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 801c4d2:	68bb      	ldr	r3, [r7, #8]
 801c4d4:	781b      	ldrb	r3, [r3, #0]
 801c4d6:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 801c4d8:	4313      	orrs	r3, r2
 801c4da:	617b      	str	r3, [r7, #20]
 801c4dc:	e00e      	b.n	801c4fc <HAL_RTC_SetDate+0xb0>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 801c4de:	68bb      	ldr	r3, [r7, #8]
 801c4e0:	78db      	ldrb	r3, [r3, #3]
 801c4e2:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 801c4e4:	68bb      	ldr	r3, [r7, #8]
 801c4e6:	785b      	ldrb	r3, [r3, #1]
 801c4e8:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 801c4ea:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 801c4ec:	68ba      	ldr	r2, [r7, #8]
 801c4ee:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 801c4f0:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 801c4f2:	68bb      	ldr	r3, [r7, #8]
 801c4f4:	781b      	ldrb	r3, [r3, #0]
 801c4f6:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 801c4f8:	4313      	orrs	r3, r2
 801c4fa:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 801c4fc:	68fb      	ldr	r3, [r7, #12]
 801c4fe:	681b      	ldr	r3, [r3, #0]
 801c500:	22ca      	movs	r2, #202	@ 0xca
 801c502:	625a      	str	r2, [r3, #36]	@ 0x24
 801c504:	68fb      	ldr	r3, [r7, #12]
 801c506:	681b      	ldr	r3, [r3, #0]
 801c508:	2253      	movs	r2, #83	@ 0x53
 801c50a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 801c50c:	2513      	movs	r5, #19
 801c50e:	197c      	adds	r4, r7, r5
 801c510:	68fb      	ldr	r3, [r7, #12]
 801c512:	0018      	movs	r0, r3
 801c514:	f000 f8c3 	bl	801c69e <RTC_EnterInitMode>
 801c518:	0003      	movs	r3, r0
 801c51a:	7023      	strb	r3, [r4, #0]

  if (status == HAL_OK)
 801c51c:	0028      	movs	r0, r5
 801c51e:	183b      	adds	r3, r7, r0
 801c520:	781b      	ldrb	r3, [r3, #0]
 801c522:	2b00      	cmp	r3, #0
 801c524:	d10c      	bne.n	801c540 <HAL_RTC_SetDate+0xf4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 801c526:	68fb      	ldr	r3, [r7, #12]
 801c528:	681b      	ldr	r3, [r3, #0]
 801c52a:	697a      	ldr	r2, [r7, #20]
 801c52c:	4910      	ldr	r1, [pc, #64]	@ (801c570 <HAL_RTC_SetDate+0x124>)
 801c52e:	400a      	ands	r2, r1
 801c530:	605a      	str	r2, [r3, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 801c532:	183c      	adds	r4, r7, r0
 801c534:	68fb      	ldr	r3, [r7, #12]
 801c536:	0018      	movs	r0, r3
 801c538:	f000 f8f5 	bl	801c726 <RTC_ExitInitMode>
 801c53c:	0003      	movs	r3, r0
 801c53e:	7023      	strb	r3, [r4, #0]
  }

  if (status == HAL_OK)
 801c540:	2313      	movs	r3, #19
 801c542:	18fb      	adds	r3, r7, r3
 801c544:	781b      	ldrb	r3, [r3, #0]
 801c546:	2b00      	cmp	r3, #0
 801c548:	d103      	bne.n	801c552 <HAL_RTC_SetDate+0x106>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 801c54a:	68fb      	ldr	r3, [r7, #12]
 801c54c:	2221      	movs	r2, #33	@ 0x21
 801c54e:	2101      	movs	r1, #1
 801c550:	5499      	strb	r1, [r3, r2]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 801c552:	68fb      	ldr	r3, [r7, #12]
 801c554:	681b      	ldr	r3, [r3, #0]
 801c556:	22ff      	movs	r2, #255	@ 0xff
 801c558:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 801c55a:	68fb      	ldr	r3, [r7, #12]
 801c55c:	2220      	movs	r2, #32
 801c55e:	2100      	movs	r1, #0
 801c560:	5499      	strb	r1, [r3, r2]

  return status;
 801c562:	2313      	movs	r3, #19
 801c564:	18fb      	adds	r3, r7, r3
 801c566:	781b      	ldrb	r3, [r3, #0]
}
 801c568:	0018      	movs	r0, r3
 801c56a:	46bd      	mov	sp, r7
 801c56c:	b006      	add	sp, #24
 801c56e:	bdb0      	pop	{r4, r5, r7, pc}
 801c570:	00ffff3f 	.word	0x00ffff3f

0801c574 <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 801c574:	b580      	push	{r7, lr}
 801c576:	b086      	sub	sp, #24
 801c578:	af00      	add	r7, sp, #0
 801c57a:	60f8      	str	r0, [r7, #12]
 801c57c:	60b9      	str	r1, [r7, #8]
 801c57e:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 801c580:	2300      	movs	r3, #0
 801c582:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 801c584:	68fb      	ldr	r3, [r7, #12]
 801c586:	681b      	ldr	r3, [r3, #0]
 801c588:	685b      	ldr	r3, [r3, #4]
 801c58a:	4a21      	ldr	r2, [pc, #132]	@ (801c610 <HAL_RTC_GetDate+0x9c>)
 801c58c:	4013      	ands	r3, r2
 801c58e:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 801c590:	697b      	ldr	r3, [r7, #20]
 801c592:	0c1b      	lsrs	r3, r3, #16
 801c594:	b2da      	uxtb	r2, r3
 801c596:	68bb      	ldr	r3, [r7, #8]
 801c598:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 801c59a:	697b      	ldr	r3, [r7, #20]
 801c59c:	0a1b      	lsrs	r3, r3, #8
 801c59e:	b2db      	uxtb	r3, r3
 801c5a0:	221f      	movs	r2, #31
 801c5a2:	4013      	ands	r3, r2
 801c5a4:	b2da      	uxtb	r2, r3
 801c5a6:	68bb      	ldr	r3, [r7, #8]
 801c5a8:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 801c5aa:	697b      	ldr	r3, [r7, #20]
 801c5ac:	b2db      	uxtb	r3, r3
 801c5ae:	223f      	movs	r2, #63	@ 0x3f
 801c5b0:	4013      	ands	r3, r2
 801c5b2:	b2da      	uxtb	r2, r3
 801c5b4:	68bb      	ldr	r3, [r7, #8]
 801c5b6:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 801c5b8:	697b      	ldr	r3, [r7, #20]
 801c5ba:	0b5b      	lsrs	r3, r3, #13
 801c5bc:	b2db      	uxtb	r3, r3
 801c5be:	2207      	movs	r2, #7
 801c5c0:	4013      	ands	r3, r2
 801c5c2:	b2da      	uxtb	r2, r3
 801c5c4:	68bb      	ldr	r3, [r7, #8]
 801c5c6:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 801c5c8:	687b      	ldr	r3, [r7, #4]
 801c5ca:	2b00      	cmp	r3, #0
 801c5cc:	d11a      	bne.n	801c604 <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 801c5ce:	68bb      	ldr	r3, [r7, #8]
 801c5d0:	78db      	ldrb	r3, [r3, #3]
 801c5d2:	0018      	movs	r0, r3
 801c5d4:	f000 f8f2 	bl	801c7bc <RTC_Bcd2ToByte>
 801c5d8:	0003      	movs	r3, r0
 801c5da:	001a      	movs	r2, r3
 801c5dc:	68bb      	ldr	r3, [r7, #8]
 801c5de:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 801c5e0:	68bb      	ldr	r3, [r7, #8]
 801c5e2:	785b      	ldrb	r3, [r3, #1]
 801c5e4:	0018      	movs	r0, r3
 801c5e6:	f000 f8e9 	bl	801c7bc <RTC_Bcd2ToByte>
 801c5ea:	0003      	movs	r3, r0
 801c5ec:	001a      	movs	r2, r3
 801c5ee:	68bb      	ldr	r3, [r7, #8]
 801c5f0:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 801c5f2:	68bb      	ldr	r3, [r7, #8]
 801c5f4:	789b      	ldrb	r3, [r3, #2]
 801c5f6:	0018      	movs	r0, r3
 801c5f8:	f000 f8e0 	bl	801c7bc <RTC_Bcd2ToByte>
 801c5fc:	0003      	movs	r3, r0
 801c5fe:	001a      	movs	r2, r3
 801c600:	68bb      	ldr	r3, [r7, #8]
 801c602:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 801c604:	2300      	movs	r3, #0
}
 801c606:	0018      	movs	r0, r3
 801c608:	46bd      	mov	sp, r7
 801c60a:	b006      	add	sp, #24
 801c60c:	bd80      	pop	{r7, pc}
 801c60e:	46c0      	nop			@ (mov r8, r8)
 801c610:	00ffff3f 	.word	0x00ffff3f

0801c614 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 801c614:	b580      	push	{r7, lr}
 801c616:	b084      	sub	sp, #16
 801c618:	af00      	add	r7, sp, #0
 801c61a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 801c61c:	2300      	movs	r3, #0
 801c61e:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 801c620:	687b      	ldr	r3, [r7, #4]
 801c622:	681b      	ldr	r3, [r3, #0]
 801c624:	4a0e      	ldr	r2, [pc, #56]	@ (801c660 <HAL_RTC_WaitForSynchro+0x4c>)
 801c626:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 801c628:	f7f8 f980 	bl	801492c <HAL_GetTick>
 801c62c:	0003      	movs	r3, r0
 801c62e:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 801c630:	e00a      	b.n	801c648 <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 801c632:	f7f8 f97b 	bl	801492c <HAL_GetTick>
 801c636:	0002      	movs	r2, r0
 801c638:	68fb      	ldr	r3, [r7, #12]
 801c63a:	1ad2      	subs	r2, r2, r3
 801c63c:	23fa      	movs	r3, #250	@ 0xfa
 801c63e:	009b      	lsls	r3, r3, #2
 801c640:	429a      	cmp	r2, r3
 801c642:	d901      	bls.n	801c648 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 801c644:	2303      	movs	r3, #3
 801c646:	e006      	b.n	801c656 <HAL_RTC_WaitForSynchro+0x42>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 801c648:	687b      	ldr	r3, [r7, #4]
 801c64a:	681b      	ldr	r3, [r3, #0]
 801c64c:	68db      	ldr	r3, [r3, #12]
 801c64e:	2220      	movs	r2, #32
 801c650:	4013      	ands	r3, r2
 801c652:	d0ee      	beq.n	801c632 <HAL_RTC_WaitForSynchro+0x1e>
    }
  }

  return HAL_OK;
 801c654:	2300      	movs	r3, #0
}
 801c656:	0018      	movs	r0, r3
 801c658:	46bd      	mov	sp, r7
 801c65a:	b004      	add	sp, #16
 801c65c:	bd80      	pop	{r7, pc}
 801c65e:	46c0      	nop			@ (mov r8, r8)
 801c660:	0001ff5f 	.word	0x0001ff5f

0801c664 <HAL_RTC_DST_Add1Hour>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTC_DST_Add1Hour(RTC_HandleTypeDef *hrtc)
{
 801c664:	b580      	push	{r7, lr}
 801c666:	b082      	sub	sp, #8
 801c668:	af00      	add	r7, sp, #0
 801c66a:	6078      	str	r0, [r7, #4]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 801c66c:	687b      	ldr	r3, [r7, #4]
 801c66e:	681b      	ldr	r3, [r3, #0]
 801c670:	22ca      	movs	r2, #202	@ 0xca
 801c672:	625a      	str	r2, [r3, #36]	@ 0x24
 801c674:	687b      	ldr	r3, [r7, #4]
 801c676:	681b      	ldr	r3, [r3, #0]
 801c678:	2253      	movs	r2, #83	@ 0x53
 801c67a:	625a      	str	r2, [r3, #36]	@ 0x24
  SET_BIT(hrtc->Instance->CR, RTC_CR_ADD1H);
 801c67c:	687b      	ldr	r3, [r7, #4]
 801c67e:	681b      	ldr	r3, [r3, #0]
 801c680:	689a      	ldr	r2, [r3, #8]
 801c682:	687b      	ldr	r3, [r7, #4]
 801c684:	681b      	ldr	r3, [r3, #0]
 801c686:	2180      	movs	r1, #128	@ 0x80
 801c688:	0249      	lsls	r1, r1, #9
 801c68a:	430a      	orrs	r2, r1
 801c68c:	609a      	str	r2, [r3, #8]
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 801c68e:	687b      	ldr	r3, [r7, #4]
 801c690:	681b      	ldr	r3, [r3, #0]
 801c692:	22ff      	movs	r2, #255	@ 0xff
 801c694:	625a      	str	r2, [r3, #36]	@ 0x24
}
 801c696:	46c0      	nop			@ (mov r8, r8)
 801c698:	46bd      	mov	sp, r7
 801c69a:	b002      	add	sp, #8
 801c69c:	bd80      	pop	{r7, pc}

0801c69e <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 801c69e:	b580      	push	{r7, lr}
 801c6a0:	b084      	sub	sp, #16
 801c6a2:	af00      	add	r7, sp, #0
 801c6a4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 801c6a6:	2300      	movs	r3, #0
 801c6a8:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 801c6aa:	230f      	movs	r3, #15
 801c6ac:	18fb      	adds	r3, r7, r3
 801c6ae:	2200      	movs	r2, #0
 801c6b0:	701a      	strb	r2, [r3, #0]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 801c6b2:	687b      	ldr	r3, [r7, #4]
 801c6b4:	681b      	ldr	r3, [r3, #0]
 801c6b6:	68db      	ldr	r3, [r3, #12]
 801c6b8:	2240      	movs	r2, #64	@ 0x40
 801c6ba:	4013      	ands	r3, r2
 801c6bc:	d12c      	bne.n	801c718 <RTC_EnterInitMode+0x7a>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 801c6be:	687b      	ldr	r3, [r7, #4]
 801c6c0:	681b      	ldr	r3, [r3, #0]
 801c6c2:	68da      	ldr	r2, [r3, #12]
 801c6c4:	687b      	ldr	r3, [r7, #4]
 801c6c6:	681b      	ldr	r3, [r3, #0]
 801c6c8:	2180      	movs	r1, #128	@ 0x80
 801c6ca:	430a      	orrs	r2, r1
 801c6cc:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 801c6ce:	f7f8 f92d 	bl	801492c <HAL_GetTick>
 801c6d2:	0003      	movs	r3, r0
 801c6d4:	60bb      	str	r3, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 801c6d6:	e014      	b.n	801c702 <RTC_EnterInitMode+0x64>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 801c6d8:	f7f8 f928 	bl	801492c <HAL_GetTick>
 801c6dc:	0002      	movs	r2, r0
 801c6de:	68bb      	ldr	r3, [r7, #8]
 801c6e0:	1ad2      	subs	r2, r2, r3
 801c6e2:	200f      	movs	r0, #15
 801c6e4:	183b      	adds	r3, r7, r0
 801c6e6:	1839      	adds	r1, r7, r0
 801c6e8:	7809      	ldrb	r1, [r1, #0]
 801c6ea:	7019      	strb	r1, [r3, #0]
 801c6ec:	23fa      	movs	r3, #250	@ 0xfa
 801c6ee:	009b      	lsls	r3, r3, #2
 801c6f0:	429a      	cmp	r2, r3
 801c6f2:	d906      	bls.n	801c702 <RTC_EnterInitMode+0x64>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 801c6f4:	687b      	ldr	r3, [r7, #4]
 801c6f6:	2221      	movs	r2, #33	@ 0x21
 801c6f8:	2104      	movs	r1, #4
 801c6fa:	5499      	strb	r1, [r3, r2]
        status = HAL_ERROR;
 801c6fc:	183b      	adds	r3, r7, r0
 801c6fe:	2201      	movs	r2, #1
 801c700:	701a      	strb	r2, [r3, #0]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 801c702:	687b      	ldr	r3, [r7, #4]
 801c704:	681b      	ldr	r3, [r3, #0]
 801c706:	68db      	ldr	r3, [r3, #12]
 801c708:	2240      	movs	r2, #64	@ 0x40
 801c70a:	4013      	ands	r3, r2
 801c70c:	d104      	bne.n	801c718 <RTC_EnterInitMode+0x7a>
 801c70e:	230f      	movs	r3, #15
 801c710:	18fb      	adds	r3, r7, r3
 801c712:	781b      	ldrb	r3, [r3, #0]
 801c714:	2b01      	cmp	r3, #1
 801c716:	d1df      	bne.n	801c6d8 <RTC_EnterInitMode+0x3a>
      }
    }
  }

  return status;
 801c718:	230f      	movs	r3, #15
 801c71a:	18fb      	adds	r3, r7, r3
 801c71c:	781b      	ldrb	r3, [r3, #0]
}
 801c71e:	0018      	movs	r0, r3
 801c720:	46bd      	mov	sp, r7
 801c722:	b004      	add	sp, #16
 801c724:	bd80      	pop	{r7, pc}

0801c726 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 801c726:	b590      	push	{r4, r7, lr}
 801c728:	b085      	sub	sp, #20
 801c72a:	af00      	add	r7, sp, #0
 801c72c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 801c72e:	240f      	movs	r4, #15
 801c730:	193b      	adds	r3, r7, r4
 801c732:	2200      	movs	r2, #0
 801c734:	701a      	strb	r2, [r3, #0]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 801c736:	687b      	ldr	r3, [r7, #4]
 801c738:	681b      	ldr	r3, [r3, #0]
 801c73a:	68da      	ldr	r2, [r3, #12]
 801c73c:	687b      	ldr	r3, [r7, #4]
 801c73e:	681b      	ldr	r3, [r3, #0]
 801c740:	2180      	movs	r1, #128	@ 0x80
 801c742:	438a      	bics	r2, r1
 801c744:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 801c746:	687b      	ldr	r3, [r7, #4]
 801c748:	681b      	ldr	r3, [r3, #0]
 801c74a:	689b      	ldr	r3, [r3, #8]
 801c74c:	2220      	movs	r2, #32
 801c74e:	4013      	ands	r3, r2
 801c750:	d10c      	bne.n	801c76c <RTC_ExitInitMode+0x46>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 801c752:	687b      	ldr	r3, [r7, #4]
 801c754:	0018      	movs	r0, r3
 801c756:	f7ff ff5d 	bl	801c614 <HAL_RTC_WaitForSynchro>
 801c75a:	1e03      	subs	r3, r0, #0
 801c75c:	d006      	beq.n	801c76c <RTC_ExitInitMode+0x46>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 801c75e:	687b      	ldr	r3, [r7, #4]
 801c760:	2221      	movs	r2, #33	@ 0x21
 801c762:	2104      	movs	r1, #4
 801c764:	5499      	strb	r1, [r3, r2]
      status = HAL_ERROR;
 801c766:	193b      	adds	r3, r7, r4
 801c768:	2201      	movs	r2, #1
 801c76a:	701a      	strb	r2, [r3, #0]
    }
  }

  return status;
 801c76c:	230f      	movs	r3, #15
 801c76e:	18fb      	adds	r3, r7, r3
 801c770:	781b      	ldrb	r3, [r3, #0]
}
 801c772:	0018      	movs	r0, r3
 801c774:	46bd      	mov	sp, r7
 801c776:	b005      	add	sp, #20
 801c778:	bd90      	pop	{r4, r7, pc}

0801c77a <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 801c77a:	b580      	push	{r7, lr}
 801c77c:	b084      	sub	sp, #16
 801c77e:	af00      	add	r7, sp, #0
 801c780:	0002      	movs	r2, r0
 801c782:	1dfb      	adds	r3, r7, #7
 801c784:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 801c786:	2300      	movs	r3, #0
 801c788:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 801c78a:	e007      	b.n	801c79c <RTC_ByteToBcd2+0x22>
  {
    bcdhigh++;
 801c78c:	68fb      	ldr	r3, [r7, #12]
 801c78e:	3301      	adds	r3, #1
 801c790:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 801c792:	1dfb      	adds	r3, r7, #7
 801c794:	1dfa      	adds	r2, r7, #7
 801c796:	7812      	ldrb	r2, [r2, #0]
 801c798:	3a0a      	subs	r2, #10
 801c79a:	701a      	strb	r2, [r3, #0]
  while (number >= 10U)
 801c79c:	1dfb      	adds	r3, r7, #7
 801c79e:	781b      	ldrb	r3, [r3, #0]
 801c7a0:	2b09      	cmp	r3, #9
 801c7a2:	d8f3      	bhi.n	801c78c <RTC_ByteToBcd2+0x12>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 801c7a4:	68fb      	ldr	r3, [r7, #12]
 801c7a6:	b2db      	uxtb	r3, r3
 801c7a8:	011b      	lsls	r3, r3, #4
 801c7aa:	b2da      	uxtb	r2, r3
 801c7ac:	1dfb      	adds	r3, r7, #7
 801c7ae:	781b      	ldrb	r3, [r3, #0]
 801c7b0:	4313      	orrs	r3, r2
 801c7b2:	b2db      	uxtb	r3, r3
}
 801c7b4:	0018      	movs	r0, r3
 801c7b6:	46bd      	mov	sp, r7
 801c7b8:	b004      	add	sp, #16
 801c7ba:	bd80      	pop	{r7, pc}

0801c7bc <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 801c7bc:	b580      	push	{r7, lr}
 801c7be:	b084      	sub	sp, #16
 801c7c0:	af00      	add	r7, sp, #0
 801c7c2:	0002      	movs	r2, r0
 801c7c4:	1dfb      	adds	r3, r7, #7
 801c7c6:	701a      	strb	r2, [r3, #0]
  uint32_t tens = 0U;
 801c7c8:	2300      	movs	r3, #0
 801c7ca:	60fb      	str	r3, [r7, #12]
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 801c7cc:	1dfb      	adds	r3, r7, #7
 801c7ce:	781b      	ldrb	r3, [r3, #0]
 801c7d0:	091b      	lsrs	r3, r3, #4
 801c7d2:	b2db      	uxtb	r3, r3
 801c7d4:	001a      	movs	r2, r3
 801c7d6:	0013      	movs	r3, r2
 801c7d8:	009b      	lsls	r3, r3, #2
 801c7da:	189b      	adds	r3, r3, r2
 801c7dc:	005b      	lsls	r3, r3, #1
 801c7de:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 801c7e0:	68fb      	ldr	r3, [r7, #12]
 801c7e2:	b2da      	uxtb	r2, r3
 801c7e4:	1dfb      	adds	r3, r7, #7
 801c7e6:	781b      	ldrb	r3, [r3, #0]
 801c7e8:	210f      	movs	r1, #15
 801c7ea:	400b      	ands	r3, r1
 801c7ec:	b2db      	uxtb	r3, r3
 801c7ee:	18d3      	adds	r3, r2, r3
 801c7f0:	b2db      	uxtb	r3, r3
}
 801c7f2:	0018      	movs	r0, r3
 801c7f4:	46bd      	mov	sp, r7
 801c7f6:	b004      	add	sp, #16
 801c7f8:	bd80      	pop	{r7, pc}
	...

0801c7fc <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param  WakeUpCounter Wakeup counter
  * @param  WakeUpClock Wakeup clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 801c7fc:	b580      	push	{r7, lr}
 801c7fe:	b086      	sub	sp, #24
 801c800:	af00      	add	r7, sp, #0
 801c802:	60f8      	str	r0, [r7, #12]
 801c804:	60b9      	str	r1, [r7, #8]
 801c806:	607a      	str	r2, [r7, #4]
  __IO uint32_t count  = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 801c808:	4b64      	ldr	r3, [pc, #400]	@ (801c99c <HAL_RTCEx_SetWakeUpTimer_IT+0x1a0>)
 801c80a:	681b      	ldr	r3, [r3, #0]
 801c80c:	22fa      	movs	r2, #250	@ 0xfa
 801c80e:	01d1      	lsls	r1, r2, #7
 801c810:	0018      	movs	r0, r3
 801c812:	f7e3 fcc7 	bl	80001a4 <__udivsi3>
 801c816:	0003      	movs	r3, r0
 801c818:	001a      	movs	r2, r3
 801c81a:	0013      	movs	r3, r2
 801c81c:	015b      	lsls	r3, r3, #5
 801c81e:	1a9b      	subs	r3, r3, r2
 801c820:	009b      	lsls	r3, r3, #2
 801c822:	189b      	adds	r3, r3, r2
 801c824:	00db      	lsls	r3, r3, #3
 801c826:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 801c828:	68fb      	ldr	r3, [r7, #12]
 801c82a:	2220      	movs	r2, #32
 801c82c:	5c9b      	ldrb	r3, [r3, r2]
 801c82e:	2b01      	cmp	r3, #1
 801c830:	d101      	bne.n	801c836 <HAL_RTCEx_SetWakeUpTimer_IT+0x3a>
 801c832:	2302      	movs	r3, #2
 801c834:	e0ad      	b.n	801c992 <HAL_RTCEx_SetWakeUpTimer_IT+0x196>
 801c836:	68fb      	ldr	r3, [r7, #12]
 801c838:	2220      	movs	r2, #32
 801c83a:	2101      	movs	r1, #1
 801c83c:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 801c83e:	68fb      	ldr	r3, [r7, #12]
 801c840:	2221      	movs	r2, #33	@ 0x21
 801c842:	2102      	movs	r1, #2
 801c844:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 801c846:	68fb      	ldr	r3, [r7, #12]
 801c848:	681b      	ldr	r3, [r3, #0]
 801c84a:	22ca      	movs	r2, #202	@ 0xca
 801c84c:	625a      	str	r2, [r3, #36]	@ 0x24
 801c84e:	68fb      	ldr	r3, [r7, #12]
 801c850:	681b      	ldr	r3, [r3, #0]
 801c852:	2253      	movs	r2, #83	@ 0x53
 801c854:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Check RTC WUTWF flag is reset only when wakeup timer enabled */
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 801c856:	68fb      	ldr	r3, [r7, #12]
 801c858:	681b      	ldr	r3, [r3, #0]
 801c85a:	689a      	ldr	r2, [r3, #8]
 801c85c:	2380      	movs	r3, #128	@ 0x80
 801c85e:	00db      	lsls	r3, r3, #3
 801c860:	4013      	ands	r3, r2
 801c862:	d019      	beq.n	801c898 <HAL_RTCEx_SetWakeUpTimer_IT+0x9c>
  {
    /* Wait till RTC WUTWF flag is reset and if timeout is reached exit */
    do
    {
      count = count - 1U;
 801c864:	697b      	ldr	r3, [r7, #20]
 801c866:	3b01      	subs	r3, #1
 801c868:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 801c86a:	697b      	ldr	r3, [r7, #20]
 801c86c:	2b00      	cmp	r3, #0
 801c86e:	d10d      	bne.n	801c88c <HAL_RTCEx_SetWakeUpTimer_IT+0x90>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 801c870:	68fb      	ldr	r3, [r7, #12]
 801c872:	681b      	ldr	r3, [r3, #0]
 801c874:	22ff      	movs	r2, #255	@ 0xff
 801c876:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 801c878:	68fb      	ldr	r3, [r7, #12]
 801c87a:	2221      	movs	r2, #33	@ 0x21
 801c87c:	2103      	movs	r1, #3
 801c87e:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 801c880:	68fb      	ldr	r3, [r7, #12]
 801c882:	2220      	movs	r2, #32
 801c884:	2100      	movs	r1, #0
 801c886:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 801c888:	2303      	movs	r3, #3
 801c88a:	e082      	b.n	801c992 <HAL_RTCEx_SetWakeUpTimer_IT+0x196>
      }
    } while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) != 0U);
 801c88c:	68fb      	ldr	r3, [r7, #12]
 801c88e:	681b      	ldr	r3, [r3, #0]
 801c890:	68db      	ldr	r3, [r3, #12]
 801c892:	2204      	movs	r2, #4
 801c894:	4013      	ands	r3, r2
 801c896:	d1e5      	bne.n	801c864 <HAL_RTCEx_SetWakeUpTimer_IT+0x68>
  }

  /* Disable the Wakeup timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 801c898:	68fb      	ldr	r3, [r7, #12]
 801c89a:	681b      	ldr	r3, [r3, #0]
 801c89c:	689a      	ldr	r2, [r3, #8]
 801c89e:	68fb      	ldr	r3, [r7, #12]
 801c8a0:	681b      	ldr	r3, [r3, #0]
 801c8a2:	493f      	ldr	r1, [pc, #252]	@ (801c9a0 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a4>)
 801c8a4:	400a      	ands	r2, r1
 801c8a6:	609a      	str	r2, [r3, #8]

  /* Clear the Wakeup flag */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 801c8a8:	68fb      	ldr	r3, [r7, #12]
 801c8aa:	681b      	ldr	r3, [r3, #0]
 801c8ac:	68db      	ldr	r3, [r3, #12]
 801c8ae:	22ff      	movs	r2, #255	@ 0xff
 801c8b0:	401a      	ands	r2, r3
 801c8b2:	68fb      	ldr	r3, [r7, #12]
 801c8b4:	681b      	ldr	r3, [r3, #0]
 801c8b6:	493b      	ldr	r1, [pc, #236]	@ (801c9a4 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a8>)
 801c8b8:	430a      	orrs	r2, r1
 801c8ba:	60da      	str	r2, [r3, #12]

  /* Reload the counter */
  count = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 801c8bc:	4b37      	ldr	r3, [pc, #220]	@ (801c99c <HAL_RTCEx_SetWakeUpTimer_IT+0x1a0>)
 801c8be:	681b      	ldr	r3, [r3, #0]
 801c8c0:	22fa      	movs	r2, #250	@ 0xfa
 801c8c2:	01d1      	lsls	r1, r2, #7
 801c8c4:	0018      	movs	r0, r3
 801c8c6:	f7e3 fc6d 	bl	80001a4 <__udivsi3>
 801c8ca:	0003      	movs	r3, r0
 801c8cc:	001a      	movs	r2, r3
 801c8ce:	0013      	movs	r3, r2
 801c8d0:	015b      	lsls	r3, r3, #5
 801c8d2:	1a9b      	subs	r3, r3, r2
 801c8d4:	009b      	lsls	r3, r3, #2
 801c8d6:	189b      	adds	r3, r3, r2
 801c8d8:	00db      	lsls	r3, r3, #3
 801c8da:	617b      	str	r3, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if timeout is reached exit */
  do
  {
    count = count - 1U;
 801c8dc:	697b      	ldr	r3, [r7, #20]
 801c8de:	3b01      	subs	r3, #1
 801c8e0:	617b      	str	r3, [r7, #20]
    if (count == 0U)
 801c8e2:	697b      	ldr	r3, [r7, #20]
 801c8e4:	2b00      	cmp	r3, #0
 801c8e6:	d10d      	bne.n	801c904 <HAL_RTCEx_SetWakeUpTimer_IT+0x108>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 801c8e8:	68fb      	ldr	r3, [r7, #12]
 801c8ea:	681b      	ldr	r3, [r3, #0]
 801c8ec:	22ff      	movs	r2, #255	@ 0xff
 801c8ee:	625a      	str	r2, [r3, #36]	@ 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 801c8f0:	68fb      	ldr	r3, [r7, #12]
 801c8f2:	2221      	movs	r2, #33	@ 0x21
 801c8f4:	2103      	movs	r1, #3
 801c8f6:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 801c8f8:	68fb      	ldr	r3, [r7, #12]
 801c8fa:	2220      	movs	r2, #32
 801c8fc:	2100      	movs	r1, #0
 801c8fe:	5499      	strb	r1, [r3, r2]

      return HAL_TIMEOUT;
 801c900:	2303      	movs	r3, #3
 801c902:	e046      	b.n	801c992 <HAL_RTCEx_SetWakeUpTimer_IT+0x196>
    }
  } while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U);
 801c904:	68fb      	ldr	r3, [r7, #12]
 801c906:	681b      	ldr	r3, [r3, #0]
 801c908:	68db      	ldr	r3, [r3, #12]
 801c90a:	2204      	movs	r2, #4
 801c90c:	4013      	ands	r3, r2
 801c90e:	d0e5      	beq.n	801c8dc <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 801c910:	68fb      	ldr	r3, [r7, #12]
 801c912:	681b      	ldr	r3, [r3, #0]
 801c914:	689a      	ldr	r2, [r3, #8]
 801c916:	68fb      	ldr	r3, [r7, #12]
 801c918:	681b      	ldr	r3, [r3, #0]
 801c91a:	2107      	movs	r1, #7
 801c91c:	438a      	bics	r2, r1
 801c91e:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 801c920:	68fb      	ldr	r3, [r7, #12]
 801c922:	681b      	ldr	r3, [r3, #0]
 801c924:	6899      	ldr	r1, [r3, #8]
 801c926:	68fb      	ldr	r3, [r7, #12]
 801c928:	681b      	ldr	r3, [r3, #0]
 801c92a:	687a      	ldr	r2, [r7, #4]
 801c92c:	430a      	orrs	r2, r1
 801c92e:	609a      	str	r2, [r3, #8]

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 801c930:	68fb      	ldr	r3, [r7, #12]
 801c932:	681b      	ldr	r3, [r3, #0]
 801c934:	68ba      	ldr	r2, [r7, #8]
 801c936:	615a      	str	r2, [r3, #20]

  /* RTC wakeup timer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 801c938:	4b1b      	ldr	r3, [pc, #108]	@ (801c9a8 <HAL_RTCEx_SetWakeUpTimer_IT+0x1ac>)
 801c93a:	681a      	ldr	r2, [r3, #0]
 801c93c:	4b1a      	ldr	r3, [pc, #104]	@ (801c9a8 <HAL_RTCEx_SetWakeUpTimer_IT+0x1ac>)
 801c93e:	2180      	movs	r1, #128	@ 0x80
 801c940:	0349      	lsls	r1, r1, #13
 801c942:	430a      	orrs	r2, r1
 801c944:	601a      	str	r2, [r3, #0]
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 801c946:	4b18      	ldr	r3, [pc, #96]	@ (801c9a8 <HAL_RTCEx_SetWakeUpTimer_IT+0x1ac>)
 801c948:	689a      	ldr	r2, [r3, #8]
 801c94a:	4b17      	ldr	r3, [pc, #92]	@ (801c9a8 <HAL_RTCEx_SetWakeUpTimer_IT+0x1ac>)
 801c94c:	2180      	movs	r1, #128	@ 0x80
 801c94e:	0349      	lsls	r1, r1, #13
 801c950:	430a      	orrs	r2, r1
 801c952:	609a      	str	r2, [r3, #8]

  /* Configure the interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 801c954:	68fb      	ldr	r3, [r7, #12]
 801c956:	681b      	ldr	r3, [r3, #0]
 801c958:	689a      	ldr	r2, [r3, #8]
 801c95a:	68fb      	ldr	r3, [r7, #12]
 801c95c:	681b      	ldr	r3, [r3, #0]
 801c95e:	2180      	movs	r1, #128	@ 0x80
 801c960:	01c9      	lsls	r1, r1, #7
 801c962:	430a      	orrs	r2, r1
 801c964:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 801c966:	68fb      	ldr	r3, [r7, #12]
 801c968:	681b      	ldr	r3, [r3, #0]
 801c96a:	689a      	ldr	r2, [r3, #8]
 801c96c:	68fb      	ldr	r3, [r7, #12]
 801c96e:	681b      	ldr	r3, [r3, #0]
 801c970:	2180      	movs	r1, #128	@ 0x80
 801c972:	00c9      	lsls	r1, r1, #3
 801c974:	430a      	orrs	r2, r1
 801c976:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 801c978:	68fb      	ldr	r3, [r7, #12]
 801c97a:	681b      	ldr	r3, [r3, #0]
 801c97c:	22ff      	movs	r2, #255	@ 0xff
 801c97e:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 801c980:	68fb      	ldr	r3, [r7, #12]
 801c982:	2221      	movs	r2, #33	@ 0x21
 801c984:	2101      	movs	r1, #1
 801c986:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 801c988:	68fb      	ldr	r3, [r7, #12]
 801c98a:	2220      	movs	r2, #32
 801c98c:	2100      	movs	r1, #0
 801c98e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 801c990:	2300      	movs	r3, #0
}
 801c992:	0018      	movs	r0, r3
 801c994:	46bd      	mov	sp, r7
 801c996:	b006      	add	sp, #24
 801c998:	bd80      	pop	{r7, pc}
 801c99a:	46c0      	nop			@ (mov r8, r8)
 801c99c:	200000ec 	.word	0x200000ec
 801c9a0:	fffffbff 	.word	0xfffffbff
 801c9a4:	fffffb7f 	.word	0xfffffb7f
 801c9a8:	40010400 	.word	0x40010400

0801c9ac <HAL_RTCEx_DeactivateWakeUpTimer>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_DeactivateWakeUpTimer(RTC_HandleTypeDef *hrtc)
{
 801c9ac:	b580      	push	{r7, lr}
 801c9ae:	b084      	sub	sp, #16
 801c9b0:	af00      	add	r7, sp, #0
 801c9b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 801c9b4:	2300      	movs	r3, #0
 801c9b6:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(hrtc);
 801c9b8:	687b      	ldr	r3, [r7, #4]
 801c9ba:	2220      	movs	r2, #32
 801c9bc:	5c9b      	ldrb	r3, [r3, r2]
 801c9be:	2b01      	cmp	r3, #1
 801c9c0:	d101      	bne.n	801c9c6 <HAL_RTCEx_DeactivateWakeUpTimer+0x1a>
 801c9c2:	2302      	movs	r3, #2
 801c9c4:	e04e      	b.n	801ca64 <HAL_RTCEx_DeactivateWakeUpTimer+0xb8>
 801c9c6:	687b      	ldr	r3, [r7, #4]
 801c9c8:	2220      	movs	r2, #32
 801c9ca:	2101      	movs	r1, #1
 801c9cc:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 801c9ce:	687b      	ldr	r3, [r7, #4]
 801c9d0:	2221      	movs	r2, #33	@ 0x21
 801c9d2:	2102      	movs	r1, #2
 801c9d4:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 801c9d6:	687b      	ldr	r3, [r7, #4]
 801c9d8:	681b      	ldr	r3, [r3, #0]
 801c9da:	22ca      	movs	r2, #202	@ 0xca
 801c9dc:	625a      	str	r2, [r3, #36]	@ 0x24
 801c9de:	687b      	ldr	r3, [r7, #4]
 801c9e0:	681b      	ldr	r3, [r3, #0]
 801c9e2:	2253      	movs	r2, #83	@ 0x53
 801c9e4:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Disable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 801c9e6:	687b      	ldr	r3, [r7, #4]
 801c9e8:	681b      	ldr	r3, [r3, #0]
 801c9ea:	689a      	ldr	r2, [r3, #8]
 801c9ec:	687b      	ldr	r3, [r7, #4]
 801c9ee:	681b      	ldr	r3, [r3, #0]
 801c9f0:	491e      	ldr	r1, [pc, #120]	@ (801ca6c <HAL_RTCEx_DeactivateWakeUpTimer+0xc0>)
 801c9f2:	400a      	ands	r2, r1
 801c9f4:	609a      	str	r2, [r3, #8]

  /* In case of interrupt mode is used, the interrupt source must disabled */
  __HAL_RTC_WAKEUPTIMER_DISABLE_IT(hrtc, RTC_IT_WUT);
 801c9f6:	687b      	ldr	r3, [r7, #4]
 801c9f8:	681b      	ldr	r3, [r3, #0]
 801c9fa:	689a      	ldr	r2, [r3, #8]
 801c9fc:	687b      	ldr	r3, [r7, #4]
 801c9fe:	681b      	ldr	r3, [r3, #0]
 801ca00:	491b      	ldr	r1, [pc, #108]	@ (801ca70 <HAL_RTCEx_DeactivateWakeUpTimer+0xc4>)
 801ca02:	400a      	ands	r2, r1
 801ca04:	609a      	str	r2, [r3, #8]

  /* Get tick */
  tickstart = HAL_GetTick();
 801ca06:	f7f7 ff91 	bl	801492c <HAL_GetTick>
 801ca0a:	0003      	movs	r3, r0
 801ca0c:	60fb      	str	r3, [r7, #12]

  /* Wait till RTC WUTWF flag is set and if timeout is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 801ca0e:	e016      	b.n	801ca3e <HAL_RTCEx_DeactivateWakeUpTimer+0x92>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 801ca10:	f7f7 ff8c 	bl	801492c <HAL_GetTick>
 801ca14:	0002      	movs	r2, r0
 801ca16:	68fb      	ldr	r3, [r7, #12]
 801ca18:	1ad2      	subs	r2, r2, r3
 801ca1a:	23fa      	movs	r3, #250	@ 0xfa
 801ca1c:	009b      	lsls	r3, r3, #2
 801ca1e:	429a      	cmp	r2, r3
 801ca20:	d90d      	bls.n	801ca3e <HAL_RTCEx_DeactivateWakeUpTimer+0x92>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 801ca22:	687b      	ldr	r3, [r7, #4]
 801ca24:	681b      	ldr	r3, [r3, #0]
 801ca26:	22ff      	movs	r2, #255	@ 0xff
 801ca28:	625a      	str	r2, [r3, #36]	@ 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 801ca2a:	687b      	ldr	r3, [r7, #4]
 801ca2c:	2221      	movs	r2, #33	@ 0x21
 801ca2e:	2103      	movs	r1, #3
 801ca30:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 801ca32:	687b      	ldr	r3, [r7, #4]
 801ca34:	2220      	movs	r2, #32
 801ca36:	2100      	movs	r1, #0
 801ca38:	5499      	strb	r1, [r3, r2]

      return HAL_TIMEOUT;
 801ca3a:	2303      	movs	r3, #3
 801ca3c:	e012      	b.n	801ca64 <HAL_RTCEx_DeactivateWakeUpTimer+0xb8>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 801ca3e:	687b      	ldr	r3, [r7, #4]
 801ca40:	681b      	ldr	r3, [r3, #0]
 801ca42:	68db      	ldr	r3, [r3, #12]
 801ca44:	2204      	movs	r2, #4
 801ca46:	4013      	ands	r3, r2
 801ca48:	d0e2      	beq.n	801ca10 <HAL_RTCEx_DeactivateWakeUpTimer+0x64>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 801ca4a:	687b      	ldr	r3, [r7, #4]
 801ca4c:	681b      	ldr	r3, [r3, #0]
 801ca4e:	22ff      	movs	r2, #255	@ 0xff
 801ca50:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 801ca52:	687b      	ldr	r3, [r7, #4]
 801ca54:	2221      	movs	r2, #33	@ 0x21
 801ca56:	2101      	movs	r1, #1
 801ca58:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 801ca5a:	687b      	ldr	r3, [r7, #4]
 801ca5c:	2220      	movs	r2, #32
 801ca5e:	2100      	movs	r1, #0
 801ca60:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 801ca62:	2300      	movs	r3, #0
}
 801ca64:	0018      	movs	r0, r3
 801ca66:	46bd      	mov	sp, r7
 801ca68:	b004      	add	sp, #16
 801ca6a:	bd80      	pop	{r7, pc}
 801ca6c:	fffffbff 	.word	0xfffffbff
 801ca70:	ffffbfff 	.word	0xffffbfff

0801ca74 <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{
 801ca74:	b580      	push	{r7, lr}
 801ca76:	b082      	sub	sp, #8
 801ca78:	af00      	add	r7, sp, #0
 801ca7a:	6078      	str	r0, [r7, #4]
  /* Clear the EXTI's line Flag for RTC WakeUpTimer */
  __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG();
 801ca7c:	4b13      	ldr	r3, [pc, #76]	@ (801cacc <HAL_RTCEx_WakeUpTimerIRQHandler+0x58>)
 801ca7e:	2280      	movs	r2, #128	@ 0x80
 801ca80:	0352      	lsls	r2, r2, #13
 801ca82:	615a      	str	r2, [r3, #20]

  /* Get the Wakeup timer interrupt source enable status */
  if (__HAL_RTC_WAKEUPTIMER_GET_IT_SOURCE(hrtc, RTC_IT_WUT) != RESET)
 801ca84:	687b      	ldr	r3, [r7, #4]
 801ca86:	681b      	ldr	r3, [r3, #0]
 801ca88:	689a      	ldr	r2, [r3, #8]
 801ca8a:	2380      	movs	r3, #128	@ 0x80
 801ca8c:	01db      	lsls	r3, r3, #7
 801ca8e:	4013      	ands	r3, r2
 801ca90:	d014      	beq.n	801cabc <HAL_RTCEx_WakeUpTimerIRQHandler+0x48>
  {
    /* Get the pending status of the Wakeup timer Interrupt */
    if (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTF) != 0U)
 801ca92:	687b      	ldr	r3, [r7, #4]
 801ca94:	681b      	ldr	r3, [r3, #0]
 801ca96:	68da      	ldr	r2, [r3, #12]
 801ca98:	2380      	movs	r3, #128	@ 0x80
 801ca9a:	00db      	lsls	r3, r3, #3
 801ca9c:	4013      	ands	r3, r2
 801ca9e:	d00d      	beq.n	801cabc <HAL_RTCEx_WakeUpTimerIRQHandler+0x48>
    {
      /* Clear the Wakeup timer interrupt pending bit */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 801caa0:	687b      	ldr	r3, [r7, #4]
 801caa2:	681b      	ldr	r3, [r3, #0]
 801caa4:	68db      	ldr	r3, [r3, #12]
 801caa6:	22ff      	movs	r2, #255	@ 0xff
 801caa8:	401a      	ands	r2, r3
 801caaa:	687b      	ldr	r3, [r7, #4]
 801caac:	681b      	ldr	r3, [r3, #0]
 801caae:	4908      	ldr	r1, [pc, #32]	@ (801cad0 <HAL_RTCEx_WakeUpTimerIRQHandler+0x5c>)
 801cab0:	430a      	orrs	r2, r1
 801cab2:	60da      	str	r2, [r3, #12]

      /* Wakeup timer callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->WakeUpTimerEventCallback(hrtc);
#else
      HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 801cab4:	687b      	ldr	r3, [r7, #4]
 801cab6:	0018      	movs	r0, r3
 801cab8:	f000 f80c 	bl	801cad4 <HAL_RTCEx_WakeUpTimerEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 801cabc:	687b      	ldr	r3, [r7, #4]
 801cabe:	2221      	movs	r2, #33	@ 0x21
 801cac0:	2101      	movs	r1, #1
 801cac2:	5499      	strb	r1, [r3, r2]
}
 801cac4:	46c0      	nop			@ (mov r8, r8)
 801cac6:	46bd      	mov	sp, r7
 801cac8:	b002      	add	sp, #8
 801caca:	bd80      	pop	{r7, pc}
 801cacc:	40010400 	.word	0x40010400
 801cad0:	fffffb7f 	.word	0xfffffb7f

0801cad4 <HAL_RTCEx_WakeUpTimerEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc)
{
 801cad4:	b580      	push	{r7, lr}
 801cad6:	b082      	sub	sp, #8
 801cad8:	af00      	add	r7, sp, #0
 801cada:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_RTCEx_WakeUpTimerEventCallback could be implemented in the user file
   */
}
 801cadc:	46c0      	nop			@ (mov r8, r8)
 801cade:	46bd      	mov	sp, r7
 801cae0:	b002      	add	sp, #8
 801cae2:	bd80      	pop	{r7, pc}

0801cae4 <HAL_RTCEx_BKUPWrite>:
  *                                 to specify the register.
  * @param  Data Data to be written in the specified RTC Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 801cae4:	b580      	push	{r7, lr}
 801cae6:	b086      	sub	sp, #24
 801cae8:	af00      	add	r7, sp, #0
 801caea:	60f8      	str	r0, [r7, #12]
 801caec:	60b9      	str	r1, [r7, #8]
 801caee:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0U;
 801caf0:	2300      	movs	r3, #0
 801caf2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 801caf4:	68fb      	ldr	r3, [r7, #12]
 801caf6:	681b      	ldr	r3, [r3, #0]
 801caf8:	3350      	adds	r3, #80	@ 0x50
 801cafa:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 801cafc:	68bb      	ldr	r3, [r7, #8]
 801cafe:	009b      	lsls	r3, r3, #2
 801cb00:	697a      	ldr	r2, [r7, #20]
 801cb02:	18d3      	adds	r3, r2, r3
 801cb04:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 801cb06:	697b      	ldr	r3, [r7, #20]
 801cb08:	687a      	ldr	r2, [r7, #4]
 801cb0a:	601a      	str	r2, [r3, #0]
}
 801cb0c:	46c0      	nop			@ (mov r8, r8)
 801cb0e:	46bd      	mov	sp, r7
 801cb10:	b006      	add	sp, #24
 801cb12:	bd80      	pop	{r7, pc}

0801cb14 <HAL_RTCEx_BKUPRead>:
  *          This parameter can be: RTC_BKP_DRx (where x can be from 0 to 4)
  *                                 to specify the register.
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 801cb14:	b580      	push	{r7, lr}
 801cb16:	b084      	sub	sp, #16
 801cb18:	af00      	add	r7, sp, #0
 801cb1a:	6078      	str	r0, [r7, #4]
 801cb1c:	6039      	str	r1, [r7, #0]
  uint32_t tmp = 0U;
 801cb1e:	2300      	movs	r3, #0
 801cb20:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 801cb22:	687b      	ldr	r3, [r7, #4]
 801cb24:	681b      	ldr	r3, [r3, #0]
 801cb26:	3350      	adds	r3, #80	@ 0x50
 801cb28:	60fb      	str	r3, [r7, #12]
  tmp += (BackupRegister * 4U);
 801cb2a:	683b      	ldr	r3, [r7, #0]
 801cb2c:	009b      	lsls	r3, r3, #2
 801cb2e:	68fa      	ldr	r2, [r7, #12]
 801cb30:	18d3      	adds	r3, r2, r3
 801cb32:	60fb      	str	r3, [r7, #12]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 801cb34:	68fb      	ldr	r3, [r7, #12]
 801cb36:	681b      	ldr	r3, [r3, #0]
}
 801cb38:	0018      	movs	r0, r3
 801cb3a:	46bd      	mov	sp, r7
 801cb3c:	b004      	add	sp, #16
 801cb3e:	bd80      	pop	{r7, pc}

0801cb40 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 801cb40:	b580      	push	{r7, lr}
 801cb42:	b082      	sub	sp, #8
 801cb44:	af00      	add	r7, sp, #0
 801cb46:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 801cb48:	687b      	ldr	r3, [r7, #4]
 801cb4a:	2b00      	cmp	r3, #0
 801cb4c:	d101      	bne.n	801cb52 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 801cb4e:	2301      	movs	r3, #1
 801cb50:	e032      	b.n	801cbb8 <HAL_TIM_Base_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 801cb52:	687b      	ldr	r3, [r7, #4]
 801cb54:	2239      	movs	r2, #57	@ 0x39
 801cb56:	5c9b      	ldrb	r3, [r3, r2]
 801cb58:	b2db      	uxtb	r3, r3
 801cb5a:	2b00      	cmp	r3, #0
 801cb5c:	d107      	bne.n	801cb6e <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 801cb5e:	687b      	ldr	r3, [r7, #4]
 801cb60:	2238      	movs	r2, #56	@ 0x38
 801cb62:	2100      	movs	r1, #0
 801cb64:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 801cb66:	687b      	ldr	r3, [r7, #4]
 801cb68:	0018      	movs	r0, r3
 801cb6a:	f7f6 fec3 	bl	80138f4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801cb6e:	687b      	ldr	r3, [r7, #4]
 801cb70:	2239      	movs	r2, #57	@ 0x39
 801cb72:	2102      	movs	r1, #2
 801cb74:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 801cb76:	687b      	ldr	r3, [r7, #4]
 801cb78:	681a      	ldr	r2, [r3, #0]
 801cb7a:	687b      	ldr	r3, [r7, #4]
 801cb7c:	3304      	adds	r3, #4
 801cb7e:	0019      	movs	r1, r3
 801cb80:	0010      	movs	r0, r2
 801cb82:	f000 fa1d 	bl	801cfc0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 801cb86:	687b      	ldr	r3, [r7, #4]
 801cb88:	223e      	movs	r2, #62	@ 0x3e
 801cb8a:	2101      	movs	r1, #1
 801cb8c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801cb8e:	687b      	ldr	r3, [r7, #4]
 801cb90:	223a      	movs	r2, #58	@ 0x3a
 801cb92:	2101      	movs	r1, #1
 801cb94:	5499      	strb	r1, [r3, r2]
 801cb96:	687b      	ldr	r3, [r7, #4]
 801cb98:	223b      	movs	r2, #59	@ 0x3b
 801cb9a:	2101      	movs	r1, #1
 801cb9c:	5499      	strb	r1, [r3, r2]
 801cb9e:	687b      	ldr	r3, [r7, #4]
 801cba0:	223c      	movs	r2, #60	@ 0x3c
 801cba2:	2101      	movs	r1, #1
 801cba4:	5499      	strb	r1, [r3, r2]
 801cba6:	687b      	ldr	r3, [r7, #4]
 801cba8:	223d      	movs	r2, #61	@ 0x3d
 801cbaa:	2101      	movs	r1, #1
 801cbac:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 801cbae:	687b      	ldr	r3, [r7, #4]
 801cbb0:	2239      	movs	r2, #57	@ 0x39
 801cbb2:	2101      	movs	r1, #1
 801cbb4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 801cbb6:	2300      	movs	r3, #0
}
 801cbb8:	0018      	movs	r0, r3
 801cbba:	46bd      	mov	sp, r7
 801cbbc:	b002      	add	sp, #8
 801cbbe:	bd80      	pop	{r7, pc}

0801cbc0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 801cbc0:	b580      	push	{r7, lr}
 801cbc2:	b084      	sub	sp, #16
 801cbc4:	af00      	add	r7, sp, #0
 801cbc6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 801cbc8:	687b      	ldr	r3, [r7, #4]
 801cbca:	2239      	movs	r2, #57	@ 0x39
 801cbcc:	5c9b      	ldrb	r3, [r3, r2]
 801cbce:	b2db      	uxtb	r3, r3
 801cbd0:	2b01      	cmp	r3, #1
 801cbd2:	d001      	beq.n	801cbd8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 801cbd4:	2301      	movs	r3, #1
 801cbd6:	e033      	b.n	801cc40 <HAL_TIM_Base_Start+0x80>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801cbd8:	687b      	ldr	r3, [r7, #4]
 801cbda:	2239      	movs	r2, #57	@ 0x39
 801cbdc:	2102      	movs	r1, #2
 801cbde:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801cbe0:	687b      	ldr	r3, [r7, #4]
 801cbe2:	681a      	ldr	r2, [r3, #0]
 801cbe4:	2380      	movs	r3, #128	@ 0x80
 801cbe6:	05db      	lsls	r3, r3, #23
 801cbe8:	429a      	cmp	r2, r3
 801cbea:	d00e      	beq.n	801cc0a <HAL_TIM_Base_Start+0x4a>
 801cbec:	687b      	ldr	r3, [r7, #4]
 801cbee:	681b      	ldr	r3, [r3, #0]
 801cbf0:	4a15      	ldr	r2, [pc, #84]	@ (801cc48 <HAL_TIM_Base_Start+0x88>)
 801cbf2:	4293      	cmp	r3, r2
 801cbf4:	d009      	beq.n	801cc0a <HAL_TIM_Base_Start+0x4a>
 801cbf6:	687b      	ldr	r3, [r7, #4]
 801cbf8:	681b      	ldr	r3, [r3, #0]
 801cbfa:	4a14      	ldr	r2, [pc, #80]	@ (801cc4c <HAL_TIM_Base_Start+0x8c>)
 801cbfc:	4293      	cmp	r3, r2
 801cbfe:	d004      	beq.n	801cc0a <HAL_TIM_Base_Start+0x4a>
 801cc00:	687b      	ldr	r3, [r7, #4]
 801cc02:	681b      	ldr	r3, [r3, #0]
 801cc04:	4a12      	ldr	r2, [pc, #72]	@ (801cc50 <HAL_TIM_Base_Start+0x90>)
 801cc06:	4293      	cmp	r3, r2
 801cc08:	d111      	bne.n	801cc2e <HAL_TIM_Base_Start+0x6e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 801cc0a:	687b      	ldr	r3, [r7, #4]
 801cc0c:	681b      	ldr	r3, [r3, #0]
 801cc0e:	689b      	ldr	r3, [r3, #8]
 801cc10:	2207      	movs	r2, #7
 801cc12:	4013      	ands	r3, r2
 801cc14:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801cc16:	68fb      	ldr	r3, [r7, #12]
 801cc18:	2b06      	cmp	r3, #6
 801cc1a:	d010      	beq.n	801cc3e <HAL_TIM_Base_Start+0x7e>
    {
      __HAL_TIM_ENABLE(htim);
 801cc1c:	687b      	ldr	r3, [r7, #4]
 801cc1e:	681b      	ldr	r3, [r3, #0]
 801cc20:	681a      	ldr	r2, [r3, #0]
 801cc22:	687b      	ldr	r3, [r7, #4]
 801cc24:	681b      	ldr	r3, [r3, #0]
 801cc26:	2101      	movs	r1, #1
 801cc28:	430a      	orrs	r2, r1
 801cc2a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801cc2c:	e007      	b.n	801cc3e <HAL_TIM_Base_Start+0x7e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 801cc2e:	687b      	ldr	r3, [r7, #4]
 801cc30:	681b      	ldr	r3, [r3, #0]
 801cc32:	681a      	ldr	r2, [r3, #0]
 801cc34:	687b      	ldr	r3, [r7, #4]
 801cc36:	681b      	ldr	r3, [r3, #0]
 801cc38:	2101      	movs	r1, #1
 801cc3a:	430a      	orrs	r2, r1
 801cc3c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 801cc3e:	2300      	movs	r3, #0
}
 801cc40:	0018      	movs	r0, r3
 801cc42:	46bd      	mov	sp, r7
 801cc44:	b004      	add	sp, #16
 801cc46:	bd80      	pop	{r7, pc}
 801cc48:	40000400 	.word	0x40000400
 801cc4c:	40010800 	.word	0x40010800
 801cc50:	40011400 	.word	0x40011400

0801cc54 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 801cc54:	b580      	push	{r7, lr}
 801cc56:	b082      	sub	sp, #8
 801cc58:	af00      	add	r7, sp, #0
 801cc5a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 801cc5c:	687b      	ldr	r3, [r7, #4]
 801cc5e:	681b      	ldr	r3, [r3, #0]
 801cc60:	6a1b      	ldr	r3, [r3, #32]
 801cc62:	4a0a      	ldr	r2, [pc, #40]	@ (801cc8c <HAL_TIM_Base_Stop+0x38>)
 801cc64:	4013      	ands	r3, r2
 801cc66:	d107      	bne.n	801cc78 <HAL_TIM_Base_Stop+0x24>
 801cc68:	687b      	ldr	r3, [r7, #4]
 801cc6a:	681b      	ldr	r3, [r3, #0]
 801cc6c:	681a      	ldr	r2, [r3, #0]
 801cc6e:	687b      	ldr	r3, [r7, #4]
 801cc70:	681b      	ldr	r3, [r3, #0]
 801cc72:	2101      	movs	r1, #1
 801cc74:	438a      	bics	r2, r1
 801cc76:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 801cc78:	687b      	ldr	r3, [r7, #4]
 801cc7a:	2239      	movs	r2, #57	@ 0x39
 801cc7c:	2101      	movs	r1, #1
 801cc7e:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 801cc80:	2300      	movs	r3, #0
}
 801cc82:	0018      	movs	r0, r3
 801cc84:	46bd      	mov	sp, r7
 801cc86:	b002      	add	sp, #8
 801cc88:	bd80      	pop	{r7, pc}
 801cc8a:	46c0      	nop			@ (mov r8, r8)
 801cc8c:	00001111 	.word	0x00001111

0801cc90 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 801cc90:	b580      	push	{r7, lr}
 801cc92:	b082      	sub	sp, #8
 801cc94:	af00      	add	r7, sp, #0
 801cc96:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 801cc98:	687b      	ldr	r3, [r7, #4]
 801cc9a:	2b00      	cmp	r3, #0
 801cc9c:	d101      	bne.n	801cca2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 801cc9e:	2301      	movs	r3, #1
 801cca0:	e032      	b.n	801cd08 <HAL_TIM_PWM_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 801cca2:	687b      	ldr	r3, [r7, #4]
 801cca4:	2239      	movs	r2, #57	@ 0x39
 801cca6:	5c9b      	ldrb	r3, [r3, r2]
 801cca8:	b2db      	uxtb	r3, r3
 801ccaa:	2b00      	cmp	r3, #0
 801ccac:	d107      	bne.n	801ccbe <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 801ccae:	687b      	ldr	r3, [r7, #4]
 801ccb0:	2238      	movs	r2, #56	@ 0x38
 801ccb2:	2100      	movs	r1, #0
 801ccb4:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 801ccb6:	687b      	ldr	r3, [r7, #4]
 801ccb8:	0018      	movs	r0, r3
 801ccba:	f7f6 fdf7 	bl	80138ac <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801ccbe:	687b      	ldr	r3, [r7, #4]
 801ccc0:	2239      	movs	r2, #57	@ 0x39
 801ccc2:	2102      	movs	r1, #2
 801ccc4:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 801ccc6:	687b      	ldr	r3, [r7, #4]
 801ccc8:	681a      	ldr	r2, [r3, #0]
 801ccca:	687b      	ldr	r3, [r7, #4]
 801cccc:	3304      	adds	r3, #4
 801ccce:	0019      	movs	r1, r3
 801ccd0:	0010      	movs	r0, r2
 801ccd2:	f000 f975 	bl	801cfc0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 801ccd6:	687b      	ldr	r3, [r7, #4]
 801ccd8:	223e      	movs	r2, #62	@ 0x3e
 801ccda:	2101      	movs	r1, #1
 801ccdc:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801ccde:	687b      	ldr	r3, [r7, #4]
 801cce0:	223a      	movs	r2, #58	@ 0x3a
 801cce2:	2101      	movs	r1, #1
 801cce4:	5499      	strb	r1, [r3, r2]
 801cce6:	687b      	ldr	r3, [r7, #4]
 801cce8:	223b      	movs	r2, #59	@ 0x3b
 801ccea:	2101      	movs	r1, #1
 801ccec:	5499      	strb	r1, [r3, r2]
 801ccee:	687b      	ldr	r3, [r7, #4]
 801ccf0:	223c      	movs	r2, #60	@ 0x3c
 801ccf2:	2101      	movs	r1, #1
 801ccf4:	5499      	strb	r1, [r3, r2]
 801ccf6:	687b      	ldr	r3, [r7, #4]
 801ccf8:	223d      	movs	r2, #61	@ 0x3d
 801ccfa:	2101      	movs	r1, #1
 801ccfc:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 801ccfe:	687b      	ldr	r3, [r7, #4]
 801cd00:	2239      	movs	r2, #57	@ 0x39
 801cd02:	2101      	movs	r1, #1
 801cd04:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 801cd06:	2300      	movs	r3, #0
}
 801cd08:	0018      	movs	r0, r3
 801cd0a:	46bd      	mov	sp, r7
 801cd0c:	b002      	add	sp, #8
 801cd0e:	bd80      	pop	{r7, pc}

0801cd10 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 801cd10:	b580      	push	{r7, lr}
 801cd12:	b084      	sub	sp, #16
 801cd14:	af00      	add	r7, sp, #0
 801cd16:	6078      	str	r0, [r7, #4]
 801cd18:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 801cd1a:	683b      	ldr	r3, [r7, #0]
 801cd1c:	2b00      	cmp	r3, #0
 801cd1e:	d108      	bne.n	801cd32 <HAL_TIM_PWM_Start+0x22>
 801cd20:	687b      	ldr	r3, [r7, #4]
 801cd22:	223a      	movs	r2, #58	@ 0x3a
 801cd24:	5c9b      	ldrb	r3, [r3, r2]
 801cd26:	b2db      	uxtb	r3, r3
 801cd28:	3b01      	subs	r3, #1
 801cd2a:	1e5a      	subs	r2, r3, #1
 801cd2c:	4193      	sbcs	r3, r2
 801cd2e:	b2db      	uxtb	r3, r3
 801cd30:	e01f      	b.n	801cd72 <HAL_TIM_PWM_Start+0x62>
 801cd32:	683b      	ldr	r3, [r7, #0]
 801cd34:	2b04      	cmp	r3, #4
 801cd36:	d108      	bne.n	801cd4a <HAL_TIM_PWM_Start+0x3a>
 801cd38:	687b      	ldr	r3, [r7, #4]
 801cd3a:	223b      	movs	r2, #59	@ 0x3b
 801cd3c:	5c9b      	ldrb	r3, [r3, r2]
 801cd3e:	b2db      	uxtb	r3, r3
 801cd40:	3b01      	subs	r3, #1
 801cd42:	1e5a      	subs	r2, r3, #1
 801cd44:	4193      	sbcs	r3, r2
 801cd46:	b2db      	uxtb	r3, r3
 801cd48:	e013      	b.n	801cd72 <HAL_TIM_PWM_Start+0x62>
 801cd4a:	683b      	ldr	r3, [r7, #0]
 801cd4c:	2b08      	cmp	r3, #8
 801cd4e:	d108      	bne.n	801cd62 <HAL_TIM_PWM_Start+0x52>
 801cd50:	687b      	ldr	r3, [r7, #4]
 801cd52:	223c      	movs	r2, #60	@ 0x3c
 801cd54:	5c9b      	ldrb	r3, [r3, r2]
 801cd56:	b2db      	uxtb	r3, r3
 801cd58:	3b01      	subs	r3, #1
 801cd5a:	1e5a      	subs	r2, r3, #1
 801cd5c:	4193      	sbcs	r3, r2
 801cd5e:	b2db      	uxtb	r3, r3
 801cd60:	e007      	b.n	801cd72 <HAL_TIM_PWM_Start+0x62>
 801cd62:	687b      	ldr	r3, [r7, #4]
 801cd64:	223d      	movs	r2, #61	@ 0x3d
 801cd66:	5c9b      	ldrb	r3, [r3, r2]
 801cd68:	b2db      	uxtb	r3, r3
 801cd6a:	3b01      	subs	r3, #1
 801cd6c:	1e5a      	subs	r2, r3, #1
 801cd6e:	4193      	sbcs	r3, r2
 801cd70:	b2db      	uxtb	r3, r3
 801cd72:	2b00      	cmp	r3, #0
 801cd74:	d001      	beq.n	801cd7a <HAL_TIM_PWM_Start+0x6a>
  {
    return HAL_ERROR;
 801cd76:	2301      	movs	r3, #1
 801cd78:	e052      	b.n	801ce20 <HAL_TIM_PWM_Start+0x110>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 801cd7a:	683b      	ldr	r3, [r7, #0]
 801cd7c:	2b00      	cmp	r3, #0
 801cd7e:	d104      	bne.n	801cd8a <HAL_TIM_PWM_Start+0x7a>
 801cd80:	687b      	ldr	r3, [r7, #4]
 801cd82:	223a      	movs	r2, #58	@ 0x3a
 801cd84:	2102      	movs	r1, #2
 801cd86:	5499      	strb	r1, [r3, r2]
 801cd88:	e013      	b.n	801cdb2 <HAL_TIM_PWM_Start+0xa2>
 801cd8a:	683b      	ldr	r3, [r7, #0]
 801cd8c:	2b04      	cmp	r3, #4
 801cd8e:	d104      	bne.n	801cd9a <HAL_TIM_PWM_Start+0x8a>
 801cd90:	687b      	ldr	r3, [r7, #4]
 801cd92:	223b      	movs	r2, #59	@ 0x3b
 801cd94:	2102      	movs	r1, #2
 801cd96:	5499      	strb	r1, [r3, r2]
 801cd98:	e00b      	b.n	801cdb2 <HAL_TIM_PWM_Start+0xa2>
 801cd9a:	683b      	ldr	r3, [r7, #0]
 801cd9c:	2b08      	cmp	r3, #8
 801cd9e:	d104      	bne.n	801cdaa <HAL_TIM_PWM_Start+0x9a>
 801cda0:	687b      	ldr	r3, [r7, #4]
 801cda2:	223c      	movs	r2, #60	@ 0x3c
 801cda4:	2102      	movs	r1, #2
 801cda6:	5499      	strb	r1, [r3, r2]
 801cda8:	e003      	b.n	801cdb2 <HAL_TIM_PWM_Start+0xa2>
 801cdaa:	687b      	ldr	r3, [r7, #4]
 801cdac:	223d      	movs	r2, #61	@ 0x3d
 801cdae:	2102      	movs	r1, #2
 801cdb0:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 801cdb2:	687b      	ldr	r3, [r7, #4]
 801cdb4:	681b      	ldr	r3, [r3, #0]
 801cdb6:	6839      	ldr	r1, [r7, #0]
 801cdb8:	2201      	movs	r2, #1
 801cdba:	0018      	movs	r0, r3
 801cdbc:	f000 fa62 	bl	801d284 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801cdc0:	687b      	ldr	r3, [r7, #4]
 801cdc2:	681a      	ldr	r2, [r3, #0]
 801cdc4:	2380      	movs	r3, #128	@ 0x80
 801cdc6:	05db      	lsls	r3, r3, #23
 801cdc8:	429a      	cmp	r2, r3
 801cdca:	d00e      	beq.n	801cdea <HAL_TIM_PWM_Start+0xda>
 801cdcc:	687b      	ldr	r3, [r7, #4]
 801cdce:	681b      	ldr	r3, [r3, #0]
 801cdd0:	4a15      	ldr	r2, [pc, #84]	@ (801ce28 <HAL_TIM_PWM_Start+0x118>)
 801cdd2:	4293      	cmp	r3, r2
 801cdd4:	d009      	beq.n	801cdea <HAL_TIM_PWM_Start+0xda>
 801cdd6:	687b      	ldr	r3, [r7, #4]
 801cdd8:	681b      	ldr	r3, [r3, #0]
 801cdda:	4a14      	ldr	r2, [pc, #80]	@ (801ce2c <HAL_TIM_PWM_Start+0x11c>)
 801cddc:	4293      	cmp	r3, r2
 801cdde:	d004      	beq.n	801cdea <HAL_TIM_PWM_Start+0xda>
 801cde0:	687b      	ldr	r3, [r7, #4]
 801cde2:	681b      	ldr	r3, [r3, #0]
 801cde4:	4a12      	ldr	r2, [pc, #72]	@ (801ce30 <HAL_TIM_PWM_Start+0x120>)
 801cde6:	4293      	cmp	r3, r2
 801cde8:	d111      	bne.n	801ce0e <HAL_TIM_PWM_Start+0xfe>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 801cdea:	687b      	ldr	r3, [r7, #4]
 801cdec:	681b      	ldr	r3, [r3, #0]
 801cdee:	689b      	ldr	r3, [r3, #8]
 801cdf0:	2207      	movs	r2, #7
 801cdf2:	4013      	ands	r3, r2
 801cdf4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801cdf6:	68fb      	ldr	r3, [r7, #12]
 801cdf8:	2b06      	cmp	r3, #6
 801cdfa:	d010      	beq.n	801ce1e <HAL_TIM_PWM_Start+0x10e>
    {
      __HAL_TIM_ENABLE(htim);
 801cdfc:	687b      	ldr	r3, [r7, #4]
 801cdfe:	681b      	ldr	r3, [r3, #0]
 801ce00:	681a      	ldr	r2, [r3, #0]
 801ce02:	687b      	ldr	r3, [r7, #4]
 801ce04:	681b      	ldr	r3, [r3, #0]
 801ce06:	2101      	movs	r1, #1
 801ce08:	430a      	orrs	r2, r1
 801ce0a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801ce0c:	e007      	b.n	801ce1e <HAL_TIM_PWM_Start+0x10e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 801ce0e:	687b      	ldr	r3, [r7, #4]
 801ce10:	681b      	ldr	r3, [r3, #0]
 801ce12:	681a      	ldr	r2, [r3, #0]
 801ce14:	687b      	ldr	r3, [r7, #4]
 801ce16:	681b      	ldr	r3, [r3, #0]
 801ce18:	2101      	movs	r1, #1
 801ce1a:	430a      	orrs	r2, r1
 801ce1c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 801ce1e:	2300      	movs	r3, #0
}
 801ce20:	0018      	movs	r0, r3
 801ce22:	46bd      	mov	sp, r7
 801ce24:	b004      	add	sp, #16
 801ce26:	bd80      	pop	{r7, pc}
 801ce28:	40000400 	.word	0x40000400
 801ce2c:	40010800 	.word	0x40010800
 801ce30:	40011400 	.word	0x40011400

0801ce34 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 801ce34:	b580      	push	{r7, lr}
 801ce36:	b086      	sub	sp, #24
 801ce38:	af00      	add	r7, sp, #0
 801ce3a:	60f8      	str	r0, [r7, #12]
 801ce3c:	60b9      	str	r1, [r7, #8]
 801ce3e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 801ce40:	2317      	movs	r3, #23
 801ce42:	18fb      	adds	r3, r7, r3
 801ce44:	2200      	movs	r2, #0
 801ce46:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 801ce48:	68fb      	ldr	r3, [r7, #12]
 801ce4a:	2238      	movs	r2, #56	@ 0x38
 801ce4c:	5c9b      	ldrb	r3, [r3, r2]
 801ce4e:	2b01      	cmp	r3, #1
 801ce50:	d101      	bne.n	801ce56 <HAL_TIM_PWM_ConfigChannel+0x22>
 801ce52:	2302      	movs	r3, #2
 801ce54:	e0ad      	b.n	801cfb2 <HAL_TIM_PWM_ConfigChannel+0x17e>
 801ce56:	68fb      	ldr	r3, [r7, #12]
 801ce58:	2238      	movs	r2, #56	@ 0x38
 801ce5a:	2101      	movs	r1, #1
 801ce5c:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 801ce5e:	687b      	ldr	r3, [r7, #4]
 801ce60:	2b0c      	cmp	r3, #12
 801ce62:	d100      	bne.n	801ce66 <HAL_TIM_PWM_ConfigChannel+0x32>
 801ce64:	e076      	b.n	801cf54 <HAL_TIM_PWM_ConfigChannel+0x120>
 801ce66:	687b      	ldr	r3, [r7, #4]
 801ce68:	2b0c      	cmp	r3, #12
 801ce6a:	d900      	bls.n	801ce6e <HAL_TIM_PWM_ConfigChannel+0x3a>
 801ce6c:	e095      	b.n	801cf9a <HAL_TIM_PWM_ConfigChannel+0x166>
 801ce6e:	687b      	ldr	r3, [r7, #4]
 801ce70:	2b08      	cmp	r3, #8
 801ce72:	d04e      	beq.n	801cf12 <HAL_TIM_PWM_ConfigChannel+0xde>
 801ce74:	687b      	ldr	r3, [r7, #4]
 801ce76:	2b08      	cmp	r3, #8
 801ce78:	d900      	bls.n	801ce7c <HAL_TIM_PWM_ConfigChannel+0x48>
 801ce7a:	e08e      	b.n	801cf9a <HAL_TIM_PWM_ConfigChannel+0x166>
 801ce7c:	687b      	ldr	r3, [r7, #4]
 801ce7e:	2b00      	cmp	r3, #0
 801ce80:	d003      	beq.n	801ce8a <HAL_TIM_PWM_ConfigChannel+0x56>
 801ce82:	687b      	ldr	r3, [r7, #4]
 801ce84:	2b04      	cmp	r3, #4
 801ce86:	d021      	beq.n	801cecc <HAL_TIM_PWM_ConfigChannel+0x98>
 801ce88:	e087      	b.n	801cf9a <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 801ce8a:	68fb      	ldr	r3, [r7, #12]
 801ce8c:	681b      	ldr	r3, [r3, #0]
 801ce8e:	68ba      	ldr	r2, [r7, #8]
 801ce90:	0011      	movs	r1, r2
 801ce92:	0018      	movs	r0, r3
 801ce94:	f000 f8f2 	bl	801d07c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 801ce98:	68fb      	ldr	r3, [r7, #12]
 801ce9a:	681b      	ldr	r3, [r3, #0]
 801ce9c:	699a      	ldr	r2, [r3, #24]
 801ce9e:	68fb      	ldr	r3, [r7, #12]
 801cea0:	681b      	ldr	r3, [r3, #0]
 801cea2:	2108      	movs	r1, #8
 801cea4:	430a      	orrs	r2, r1
 801cea6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 801cea8:	68fb      	ldr	r3, [r7, #12]
 801ceaa:	681b      	ldr	r3, [r3, #0]
 801ceac:	699a      	ldr	r2, [r3, #24]
 801ceae:	68fb      	ldr	r3, [r7, #12]
 801ceb0:	681b      	ldr	r3, [r3, #0]
 801ceb2:	2104      	movs	r1, #4
 801ceb4:	438a      	bics	r2, r1
 801ceb6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 801ceb8:	68fb      	ldr	r3, [r7, #12]
 801ceba:	681b      	ldr	r3, [r3, #0]
 801cebc:	6999      	ldr	r1, [r3, #24]
 801cebe:	68bb      	ldr	r3, [r7, #8]
 801cec0:	68da      	ldr	r2, [r3, #12]
 801cec2:	68fb      	ldr	r3, [r7, #12]
 801cec4:	681b      	ldr	r3, [r3, #0]
 801cec6:	430a      	orrs	r2, r1
 801cec8:	619a      	str	r2, [r3, #24]
      break;
 801ceca:	e06b      	b.n	801cfa4 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 801cecc:	68fb      	ldr	r3, [r7, #12]
 801cece:	681b      	ldr	r3, [r3, #0]
 801ced0:	68ba      	ldr	r2, [r7, #8]
 801ced2:	0011      	movs	r1, r2
 801ced4:	0018      	movs	r0, r3
 801ced6:	f000 f90d 	bl	801d0f4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 801ceda:	68fb      	ldr	r3, [r7, #12]
 801cedc:	681b      	ldr	r3, [r3, #0]
 801cede:	699a      	ldr	r2, [r3, #24]
 801cee0:	68fb      	ldr	r3, [r7, #12]
 801cee2:	681b      	ldr	r3, [r3, #0]
 801cee4:	2180      	movs	r1, #128	@ 0x80
 801cee6:	0109      	lsls	r1, r1, #4
 801cee8:	430a      	orrs	r2, r1
 801ceea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 801ceec:	68fb      	ldr	r3, [r7, #12]
 801ceee:	681b      	ldr	r3, [r3, #0]
 801cef0:	699a      	ldr	r2, [r3, #24]
 801cef2:	68fb      	ldr	r3, [r7, #12]
 801cef4:	681b      	ldr	r3, [r3, #0]
 801cef6:	4931      	ldr	r1, [pc, #196]	@ (801cfbc <HAL_TIM_PWM_ConfigChannel+0x188>)
 801cef8:	400a      	ands	r2, r1
 801cefa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 801cefc:	68fb      	ldr	r3, [r7, #12]
 801cefe:	681b      	ldr	r3, [r3, #0]
 801cf00:	6999      	ldr	r1, [r3, #24]
 801cf02:	68bb      	ldr	r3, [r7, #8]
 801cf04:	68db      	ldr	r3, [r3, #12]
 801cf06:	021a      	lsls	r2, r3, #8
 801cf08:	68fb      	ldr	r3, [r7, #12]
 801cf0a:	681b      	ldr	r3, [r3, #0]
 801cf0c:	430a      	orrs	r2, r1
 801cf0e:	619a      	str	r2, [r3, #24]
      break;
 801cf10:	e048      	b.n	801cfa4 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 801cf12:	68fb      	ldr	r3, [r7, #12]
 801cf14:	681b      	ldr	r3, [r3, #0]
 801cf16:	68ba      	ldr	r2, [r7, #8]
 801cf18:	0011      	movs	r1, r2
 801cf1a:	0018      	movs	r0, r3
 801cf1c:	f000 f92c 	bl	801d178 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 801cf20:	68fb      	ldr	r3, [r7, #12]
 801cf22:	681b      	ldr	r3, [r3, #0]
 801cf24:	69da      	ldr	r2, [r3, #28]
 801cf26:	68fb      	ldr	r3, [r7, #12]
 801cf28:	681b      	ldr	r3, [r3, #0]
 801cf2a:	2108      	movs	r1, #8
 801cf2c:	430a      	orrs	r2, r1
 801cf2e:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 801cf30:	68fb      	ldr	r3, [r7, #12]
 801cf32:	681b      	ldr	r3, [r3, #0]
 801cf34:	69da      	ldr	r2, [r3, #28]
 801cf36:	68fb      	ldr	r3, [r7, #12]
 801cf38:	681b      	ldr	r3, [r3, #0]
 801cf3a:	2104      	movs	r1, #4
 801cf3c:	438a      	bics	r2, r1
 801cf3e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 801cf40:	68fb      	ldr	r3, [r7, #12]
 801cf42:	681b      	ldr	r3, [r3, #0]
 801cf44:	69d9      	ldr	r1, [r3, #28]
 801cf46:	68bb      	ldr	r3, [r7, #8]
 801cf48:	68da      	ldr	r2, [r3, #12]
 801cf4a:	68fb      	ldr	r3, [r7, #12]
 801cf4c:	681b      	ldr	r3, [r3, #0]
 801cf4e:	430a      	orrs	r2, r1
 801cf50:	61da      	str	r2, [r3, #28]
      break;
 801cf52:	e027      	b.n	801cfa4 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 801cf54:	68fb      	ldr	r3, [r7, #12]
 801cf56:	681b      	ldr	r3, [r3, #0]
 801cf58:	68ba      	ldr	r2, [r7, #8]
 801cf5a:	0011      	movs	r1, r2
 801cf5c:	0018      	movs	r0, r3
 801cf5e:	f000 f94b 	bl	801d1f8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 801cf62:	68fb      	ldr	r3, [r7, #12]
 801cf64:	681b      	ldr	r3, [r3, #0]
 801cf66:	69da      	ldr	r2, [r3, #28]
 801cf68:	68fb      	ldr	r3, [r7, #12]
 801cf6a:	681b      	ldr	r3, [r3, #0]
 801cf6c:	2180      	movs	r1, #128	@ 0x80
 801cf6e:	0109      	lsls	r1, r1, #4
 801cf70:	430a      	orrs	r2, r1
 801cf72:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 801cf74:	68fb      	ldr	r3, [r7, #12]
 801cf76:	681b      	ldr	r3, [r3, #0]
 801cf78:	69da      	ldr	r2, [r3, #28]
 801cf7a:	68fb      	ldr	r3, [r7, #12]
 801cf7c:	681b      	ldr	r3, [r3, #0]
 801cf7e:	490f      	ldr	r1, [pc, #60]	@ (801cfbc <HAL_TIM_PWM_ConfigChannel+0x188>)
 801cf80:	400a      	ands	r2, r1
 801cf82:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 801cf84:	68fb      	ldr	r3, [r7, #12]
 801cf86:	681b      	ldr	r3, [r3, #0]
 801cf88:	69d9      	ldr	r1, [r3, #28]
 801cf8a:	68bb      	ldr	r3, [r7, #8]
 801cf8c:	68db      	ldr	r3, [r3, #12]
 801cf8e:	021a      	lsls	r2, r3, #8
 801cf90:	68fb      	ldr	r3, [r7, #12]
 801cf92:	681b      	ldr	r3, [r3, #0]
 801cf94:	430a      	orrs	r2, r1
 801cf96:	61da      	str	r2, [r3, #28]
      break;
 801cf98:	e004      	b.n	801cfa4 <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 801cf9a:	2317      	movs	r3, #23
 801cf9c:	18fb      	adds	r3, r7, r3
 801cf9e:	2201      	movs	r2, #1
 801cfa0:	701a      	strb	r2, [r3, #0]
      break;
 801cfa2:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 801cfa4:	68fb      	ldr	r3, [r7, #12]
 801cfa6:	2238      	movs	r2, #56	@ 0x38
 801cfa8:	2100      	movs	r1, #0
 801cfaa:	5499      	strb	r1, [r3, r2]

  return status;
 801cfac:	2317      	movs	r3, #23
 801cfae:	18fb      	adds	r3, r7, r3
 801cfb0:	781b      	ldrb	r3, [r3, #0]
}
 801cfb2:	0018      	movs	r0, r3
 801cfb4:	46bd      	mov	sp, r7
 801cfb6:	b006      	add	sp, #24
 801cfb8:	bd80      	pop	{r7, pc}
 801cfba:	46c0      	nop			@ (mov r8, r8)
 801cfbc:	fffffbff 	.word	0xfffffbff

0801cfc0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 801cfc0:	b580      	push	{r7, lr}
 801cfc2:	b084      	sub	sp, #16
 801cfc4:	af00      	add	r7, sp, #0
 801cfc6:	6078      	str	r0, [r7, #4]
 801cfc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 801cfca:	687b      	ldr	r3, [r7, #4]
 801cfcc:	681b      	ldr	r3, [r3, #0]
 801cfce:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 801cfd0:	687a      	ldr	r2, [r7, #4]
 801cfd2:	2380      	movs	r3, #128	@ 0x80
 801cfd4:	05db      	lsls	r3, r3, #23
 801cfd6:	429a      	cmp	r2, r3
 801cfd8:	d00b      	beq.n	801cff2 <TIM_Base_SetConfig+0x32>
 801cfda:	687b      	ldr	r3, [r7, #4]
 801cfdc:	4a23      	ldr	r2, [pc, #140]	@ (801d06c <TIM_Base_SetConfig+0xac>)
 801cfde:	4293      	cmp	r3, r2
 801cfe0:	d007      	beq.n	801cff2 <TIM_Base_SetConfig+0x32>
 801cfe2:	687b      	ldr	r3, [r7, #4]
 801cfe4:	4a22      	ldr	r2, [pc, #136]	@ (801d070 <TIM_Base_SetConfig+0xb0>)
 801cfe6:	4293      	cmp	r3, r2
 801cfe8:	d003      	beq.n	801cff2 <TIM_Base_SetConfig+0x32>
 801cfea:	687b      	ldr	r3, [r7, #4]
 801cfec:	4a21      	ldr	r2, [pc, #132]	@ (801d074 <TIM_Base_SetConfig+0xb4>)
 801cfee:	4293      	cmp	r3, r2
 801cff0:	d108      	bne.n	801d004 <TIM_Base_SetConfig+0x44>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 801cff2:	68fb      	ldr	r3, [r7, #12]
 801cff4:	2270      	movs	r2, #112	@ 0x70
 801cff6:	4393      	bics	r3, r2
 801cff8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 801cffa:	683b      	ldr	r3, [r7, #0]
 801cffc:	685b      	ldr	r3, [r3, #4]
 801cffe:	68fa      	ldr	r2, [r7, #12]
 801d000:	4313      	orrs	r3, r2
 801d002:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 801d004:	687a      	ldr	r2, [r7, #4]
 801d006:	2380      	movs	r3, #128	@ 0x80
 801d008:	05db      	lsls	r3, r3, #23
 801d00a:	429a      	cmp	r2, r3
 801d00c:	d00b      	beq.n	801d026 <TIM_Base_SetConfig+0x66>
 801d00e:	687b      	ldr	r3, [r7, #4]
 801d010:	4a16      	ldr	r2, [pc, #88]	@ (801d06c <TIM_Base_SetConfig+0xac>)
 801d012:	4293      	cmp	r3, r2
 801d014:	d007      	beq.n	801d026 <TIM_Base_SetConfig+0x66>
 801d016:	687b      	ldr	r3, [r7, #4]
 801d018:	4a15      	ldr	r2, [pc, #84]	@ (801d070 <TIM_Base_SetConfig+0xb0>)
 801d01a:	4293      	cmp	r3, r2
 801d01c:	d003      	beq.n	801d026 <TIM_Base_SetConfig+0x66>
 801d01e:	687b      	ldr	r3, [r7, #4]
 801d020:	4a14      	ldr	r2, [pc, #80]	@ (801d074 <TIM_Base_SetConfig+0xb4>)
 801d022:	4293      	cmp	r3, r2
 801d024:	d108      	bne.n	801d038 <TIM_Base_SetConfig+0x78>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 801d026:	68fb      	ldr	r3, [r7, #12]
 801d028:	4a13      	ldr	r2, [pc, #76]	@ (801d078 <TIM_Base_SetConfig+0xb8>)
 801d02a:	4013      	ands	r3, r2
 801d02c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 801d02e:	683b      	ldr	r3, [r7, #0]
 801d030:	68db      	ldr	r3, [r3, #12]
 801d032:	68fa      	ldr	r2, [r7, #12]
 801d034:	4313      	orrs	r3, r2
 801d036:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 801d038:	68fb      	ldr	r3, [r7, #12]
 801d03a:	2280      	movs	r2, #128	@ 0x80
 801d03c:	4393      	bics	r3, r2
 801d03e:	001a      	movs	r2, r3
 801d040:	683b      	ldr	r3, [r7, #0]
 801d042:	691b      	ldr	r3, [r3, #16]
 801d044:	4313      	orrs	r3, r2
 801d046:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 801d048:	687b      	ldr	r3, [r7, #4]
 801d04a:	68fa      	ldr	r2, [r7, #12]
 801d04c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 801d04e:	683b      	ldr	r3, [r7, #0]
 801d050:	689a      	ldr	r2, [r3, #8]
 801d052:	687b      	ldr	r3, [r7, #4]
 801d054:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 801d056:	683b      	ldr	r3, [r7, #0]
 801d058:	681a      	ldr	r2, [r3, #0]
 801d05a:	687b      	ldr	r3, [r7, #4]
 801d05c:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 801d05e:	687b      	ldr	r3, [r7, #4]
 801d060:	2201      	movs	r2, #1
 801d062:	615a      	str	r2, [r3, #20]
}
 801d064:	46c0      	nop			@ (mov r8, r8)
 801d066:	46bd      	mov	sp, r7
 801d068:	b004      	add	sp, #16
 801d06a:	bd80      	pop	{r7, pc}
 801d06c:	40000400 	.word	0x40000400
 801d070:	40010800 	.word	0x40010800
 801d074:	40011400 	.word	0x40011400
 801d078:	fffffcff 	.word	0xfffffcff

0801d07c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 801d07c:	b580      	push	{r7, lr}
 801d07e:	b086      	sub	sp, #24
 801d080:	af00      	add	r7, sp, #0
 801d082:	6078      	str	r0, [r7, #4]
 801d084:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 801d086:	687b      	ldr	r3, [r7, #4]
 801d088:	6a1b      	ldr	r3, [r3, #32]
 801d08a:	2201      	movs	r2, #1
 801d08c:	4393      	bics	r3, r2
 801d08e:	001a      	movs	r2, r3
 801d090:	687b      	ldr	r3, [r7, #4]
 801d092:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801d094:	687b      	ldr	r3, [r7, #4]
 801d096:	6a1b      	ldr	r3, [r3, #32]
 801d098:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801d09a:	687b      	ldr	r3, [r7, #4]
 801d09c:	685b      	ldr	r3, [r3, #4]
 801d09e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 801d0a0:	687b      	ldr	r3, [r7, #4]
 801d0a2:	699b      	ldr	r3, [r3, #24]
 801d0a4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 801d0a6:	68fb      	ldr	r3, [r7, #12]
 801d0a8:	2270      	movs	r2, #112	@ 0x70
 801d0aa:	4393      	bics	r3, r2
 801d0ac:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 801d0ae:	68fb      	ldr	r3, [r7, #12]
 801d0b0:	2203      	movs	r2, #3
 801d0b2:	4393      	bics	r3, r2
 801d0b4:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 801d0b6:	683b      	ldr	r3, [r7, #0]
 801d0b8:	681b      	ldr	r3, [r3, #0]
 801d0ba:	68fa      	ldr	r2, [r7, #12]
 801d0bc:	4313      	orrs	r3, r2
 801d0be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 801d0c0:	697b      	ldr	r3, [r7, #20]
 801d0c2:	2202      	movs	r2, #2
 801d0c4:	4393      	bics	r3, r2
 801d0c6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 801d0c8:	683b      	ldr	r3, [r7, #0]
 801d0ca:	689b      	ldr	r3, [r3, #8]
 801d0cc:	697a      	ldr	r2, [r7, #20]
 801d0ce:	4313      	orrs	r3, r2
 801d0d0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801d0d2:	687b      	ldr	r3, [r7, #4]
 801d0d4:	693a      	ldr	r2, [r7, #16]
 801d0d6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 801d0d8:	687b      	ldr	r3, [r7, #4]
 801d0da:	68fa      	ldr	r2, [r7, #12]
 801d0dc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 801d0de:	683b      	ldr	r3, [r7, #0]
 801d0e0:	685a      	ldr	r2, [r3, #4]
 801d0e2:	687b      	ldr	r3, [r7, #4]
 801d0e4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801d0e6:	687b      	ldr	r3, [r7, #4]
 801d0e8:	697a      	ldr	r2, [r7, #20]
 801d0ea:	621a      	str	r2, [r3, #32]
}
 801d0ec:	46c0      	nop			@ (mov r8, r8)
 801d0ee:	46bd      	mov	sp, r7
 801d0f0:	b006      	add	sp, #24
 801d0f2:	bd80      	pop	{r7, pc}

0801d0f4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 801d0f4:	b580      	push	{r7, lr}
 801d0f6:	b086      	sub	sp, #24
 801d0f8:	af00      	add	r7, sp, #0
 801d0fa:	6078      	str	r0, [r7, #4]
 801d0fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 801d0fe:	687b      	ldr	r3, [r7, #4]
 801d100:	6a1b      	ldr	r3, [r3, #32]
 801d102:	2210      	movs	r2, #16
 801d104:	4393      	bics	r3, r2
 801d106:	001a      	movs	r2, r3
 801d108:	687b      	ldr	r3, [r7, #4]
 801d10a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801d10c:	687b      	ldr	r3, [r7, #4]
 801d10e:	6a1b      	ldr	r3, [r3, #32]
 801d110:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801d112:	687b      	ldr	r3, [r7, #4]
 801d114:	685b      	ldr	r3, [r3, #4]
 801d116:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 801d118:	687b      	ldr	r3, [r7, #4]
 801d11a:	699b      	ldr	r3, [r3, #24]
 801d11c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 801d11e:	68fb      	ldr	r3, [r7, #12]
 801d120:	4a13      	ldr	r2, [pc, #76]	@ (801d170 <TIM_OC2_SetConfig+0x7c>)
 801d122:	4013      	ands	r3, r2
 801d124:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 801d126:	68fb      	ldr	r3, [r7, #12]
 801d128:	4a12      	ldr	r2, [pc, #72]	@ (801d174 <TIM_OC2_SetConfig+0x80>)
 801d12a:	4013      	ands	r3, r2
 801d12c:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 801d12e:	683b      	ldr	r3, [r7, #0]
 801d130:	681b      	ldr	r3, [r3, #0]
 801d132:	021b      	lsls	r3, r3, #8
 801d134:	68fa      	ldr	r2, [r7, #12]
 801d136:	4313      	orrs	r3, r2
 801d138:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 801d13a:	697b      	ldr	r3, [r7, #20]
 801d13c:	2220      	movs	r2, #32
 801d13e:	4393      	bics	r3, r2
 801d140:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 801d142:	683b      	ldr	r3, [r7, #0]
 801d144:	689b      	ldr	r3, [r3, #8]
 801d146:	011b      	lsls	r3, r3, #4
 801d148:	697a      	ldr	r2, [r7, #20]
 801d14a:	4313      	orrs	r3, r2
 801d14c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801d14e:	687b      	ldr	r3, [r7, #4]
 801d150:	693a      	ldr	r2, [r7, #16]
 801d152:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 801d154:	687b      	ldr	r3, [r7, #4]
 801d156:	68fa      	ldr	r2, [r7, #12]
 801d158:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 801d15a:	683b      	ldr	r3, [r7, #0]
 801d15c:	685a      	ldr	r2, [r3, #4]
 801d15e:	687b      	ldr	r3, [r7, #4]
 801d160:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801d162:	687b      	ldr	r3, [r7, #4]
 801d164:	697a      	ldr	r2, [r7, #20]
 801d166:	621a      	str	r2, [r3, #32]
}
 801d168:	46c0      	nop			@ (mov r8, r8)
 801d16a:	46bd      	mov	sp, r7
 801d16c:	b006      	add	sp, #24
 801d16e:	bd80      	pop	{r7, pc}
 801d170:	ffff8fff 	.word	0xffff8fff
 801d174:	fffffcff 	.word	0xfffffcff

0801d178 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 801d178:	b580      	push	{r7, lr}
 801d17a:	b086      	sub	sp, #24
 801d17c:	af00      	add	r7, sp, #0
 801d17e:	6078      	str	r0, [r7, #4]
 801d180:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 801d182:	687b      	ldr	r3, [r7, #4]
 801d184:	6a1b      	ldr	r3, [r3, #32]
 801d186:	4a1a      	ldr	r2, [pc, #104]	@ (801d1f0 <TIM_OC3_SetConfig+0x78>)
 801d188:	401a      	ands	r2, r3
 801d18a:	687b      	ldr	r3, [r7, #4]
 801d18c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801d18e:	687b      	ldr	r3, [r7, #4]
 801d190:	6a1b      	ldr	r3, [r3, #32]
 801d192:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801d194:	687b      	ldr	r3, [r7, #4]
 801d196:	685b      	ldr	r3, [r3, #4]
 801d198:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 801d19a:	687b      	ldr	r3, [r7, #4]
 801d19c:	69db      	ldr	r3, [r3, #28]
 801d19e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 801d1a0:	68fb      	ldr	r3, [r7, #12]
 801d1a2:	2270      	movs	r2, #112	@ 0x70
 801d1a4:	4393      	bics	r3, r2
 801d1a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 801d1a8:	68fb      	ldr	r3, [r7, #12]
 801d1aa:	2203      	movs	r2, #3
 801d1ac:	4393      	bics	r3, r2
 801d1ae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 801d1b0:	683b      	ldr	r3, [r7, #0]
 801d1b2:	681b      	ldr	r3, [r3, #0]
 801d1b4:	68fa      	ldr	r2, [r7, #12]
 801d1b6:	4313      	orrs	r3, r2
 801d1b8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 801d1ba:	697b      	ldr	r3, [r7, #20]
 801d1bc:	4a0d      	ldr	r2, [pc, #52]	@ (801d1f4 <TIM_OC3_SetConfig+0x7c>)
 801d1be:	4013      	ands	r3, r2
 801d1c0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 801d1c2:	683b      	ldr	r3, [r7, #0]
 801d1c4:	689b      	ldr	r3, [r3, #8]
 801d1c6:	021b      	lsls	r3, r3, #8
 801d1c8:	697a      	ldr	r2, [r7, #20]
 801d1ca:	4313      	orrs	r3, r2
 801d1cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801d1ce:	687b      	ldr	r3, [r7, #4]
 801d1d0:	693a      	ldr	r2, [r7, #16]
 801d1d2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 801d1d4:	687b      	ldr	r3, [r7, #4]
 801d1d6:	68fa      	ldr	r2, [r7, #12]
 801d1d8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 801d1da:	683b      	ldr	r3, [r7, #0]
 801d1dc:	685a      	ldr	r2, [r3, #4]
 801d1de:	687b      	ldr	r3, [r7, #4]
 801d1e0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801d1e2:	687b      	ldr	r3, [r7, #4]
 801d1e4:	697a      	ldr	r2, [r7, #20]
 801d1e6:	621a      	str	r2, [r3, #32]
}
 801d1e8:	46c0      	nop			@ (mov r8, r8)
 801d1ea:	46bd      	mov	sp, r7
 801d1ec:	b006      	add	sp, #24
 801d1ee:	bd80      	pop	{r7, pc}
 801d1f0:	fffffeff 	.word	0xfffffeff
 801d1f4:	fffffdff 	.word	0xfffffdff

0801d1f8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 801d1f8:	b580      	push	{r7, lr}
 801d1fa:	b086      	sub	sp, #24
 801d1fc:	af00      	add	r7, sp, #0
 801d1fe:	6078      	str	r0, [r7, #4]
 801d200:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 801d202:	687b      	ldr	r3, [r7, #4]
 801d204:	6a1b      	ldr	r3, [r3, #32]
 801d206:	4a1b      	ldr	r2, [pc, #108]	@ (801d274 <TIM_OC4_SetConfig+0x7c>)
 801d208:	401a      	ands	r2, r3
 801d20a:	687b      	ldr	r3, [r7, #4]
 801d20c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801d20e:	687b      	ldr	r3, [r7, #4]
 801d210:	6a1b      	ldr	r3, [r3, #32]
 801d212:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801d214:	687b      	ldr	r3, [r7, #4]
 801d216:	685b      	ldr	r3, [r3, #4]
 801d218:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 801d21a:	687b      	ldr	r3, [r7, #4]
 801d21c:	69db      	ldr	r3, [r3, #28]
 801d21e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 801d220:	68fb      	ldr	r3, [r7, #12]
 801d222:	4a15      	ldr	r2, [pc, #84]	@ (801d278 <TIM_OC4_SetConfig+0x80>)
 801d224:	4013      	ands	r3, r2
 801d226:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 801d228:	68fb      	ldr	r3, [r7, #12]
 801d22a:	4a14      	ldr	r2, [pc, #80]	@ (801d27c <TIM_OC4_SetConfig+0x84>)
 801d22c:	4013      	ands	r3, r2
 801d22e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 801d230:	683b      	ldr	r3, [r7, #0]
 801d232:	681b      	ldr	r3, [r3, #0]
 801d234:	021b      	lsls	r3, r3, #8
 801d236:	68fa      	ldr	r2, [r7, #12]
 801d238:	4313      	orrs	r3, r2
 801d23a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 801d23c:	697b      	ldr	r3, [r7, #20]
 801d23e:	4a10      	ldr	r2, [pc, #64]	@ (801d280 <TIM_OC4_SetConfig+0x88>)
 801d240:	4013      	ands	r3, r2
 801d242:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 801d244:	683b      	ldr	r3, [r7, #0]
 801d246:	689b      	ldr	r3, [r3, #8]
 801d248:	031b      	lsls	r3, r3, #12
 801d24a:	697a      	ldr	r2, [r7, #20]
 801d24c:	4313      	orrs	r3, r2
 801d24e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801d250:	687b      	ldr	r3, [r7, #4]
 801d252:	693a      	ldr	r2, [r7, #16]
 801d254:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 801d256:	687b      	ldr	r3, [r7, #4]
 801d258:	68fa      	ldr	r2, [r7, #12]
 801d25a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 801d25c:	683b      	ldr	r3, [r7, #0]
 801d25e:	685a      	ldr	r2, [r3, #4]
 801d260:	687b      	ldr	r3, [r7, #4]
 801d262:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801d264:	687b      	ldr	r3, [r7, #4]
 801d266:	697a      	ldr	r2, [r7, #20]
 801d268:	621a      	str	r2, [r3, #32]
}
 801d26a:	46c0      	nop			@ (mov r8, r8)
 801d26c:	46bd      	mov	sp, r7
 801d26e:	b006      	add	sp, #24
 801d270:	bd80      	pop	{r7, pc}
 801d272:	46c0      	nop			@ (mov r8, r8)
 801d274:	ffffefff 	.word	0xffffefff
 801d278:	ffff8fff 	.word	0xffff8fff
 801d27c:	fffffcff 	.word	0xfffffcff
 801d280:	ffffdfff 	.word	0xffffdfff

0801d284 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
static void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 801d284:	b580      	push	{r7, lr}
 801d286:	b086      	sub	sp, #24
 801d288:	af00      	add	r7, sp, #0
 801d28a:	60f8      	str	r0, [r7, #12]
 801d28c:	60b9      	str	r1, [r7, #8]
 801d28e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 801d290:	68bb      	ldr	r3, [r7, #8]
 801d292:	221f      	movs	r2, #31
 801d294:	4013      	ands	r3, r2
 801d296:	2201      	movs	r2, #1
 801d298:	409a      	lsls	r2, r3
 801d29a:	0013      	movs	r3, r2
 801d29c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 801d29e:	68fb      	ldr	r3, [r7, #12]
 801d2a0:	6a1b      	ldr	r3, [r3, #32]
 801d2a2:	697a      	ldr	r2, [r7, #20]
 801d2a4:	43d2      	mvns	r2, r2
 801d2a6:	401a      	ands	r2, r3
 801d2a8:	68fb      	ldr	r3, [r7, #12]
 801d2aa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 801d2ac:	68fb      	ldr	r3, [r7, #12]
 801d2ae:	6a1a      	ldr	r2, [r3, #32]
 801d2b0:	68bb      	ldr	r3, [r7, #8]
 801d2b2:	211f      	movs	r1, #31
 801d2b4:	400b      	ands	r3, r1
 801d2b6:	6879      	ldr	r1, [r7, #4]
 801d2b8:	4099      	lsls	r1, r3
 801d2ba:	000b      	movs	r3, r1
 801d2bc:	431a      	orrs	r2, r3
 801d2be:	68fb      	ldr	r3, [r7, #12]
 801d2c0:	621a      	str	r2, [r3, #32]
}
 801d2c2:	46c0      	nop			@ (mov r8, r8)
 801d2c4:	46bd      	mov	sp, r7
 801d2c6:	b006      	add	sp, #24
 801d2c8:	bd80      	pop	{r7, pc}
	...

0801d2cc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 801d2cc:	b580      	push	{r7, lr}
 801d2ce:	b084      	sub	sp, #16
 801d2d0:	af00      	add	r7, sp, #0
 801d2d2:	6078      	str	r0, [r7, #4]
 801d2d4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 801d2d6:	687b      	ldr	r3, [r7, #4]
 801d2d8:	2238      	movs	r2, #56	@ 0x38
 801d2da:	5c9b      	ldrb	r3, [r3, r2]
 801d2dc:	2b01      	cmp	r3, #1
 801d2de:	d101      	bne.n	801d2e4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 801d2e0:	2302      	movs	r3, #2
 801d2e2:	e047      	b.n	801d374 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 801d2e4:	687b      	ldr	r3, [r7, #4]
 801d2e6:	2238      	movs	r2, #56	@ 0x38
 801d2e8:	2101      	movs	r1, #1
 801d2ea:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 801d2ec:	687b      	ldr	r3, [r7, #4]
 801d2ee:	2239      	movs	r2, #57	@ 0x39
 801d2f0:	2102      	movs	r1, #2
 801d2f2:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 801d2f4:	687b      	ldr	r3, [r7, #4]
 801d2f6:	681b      	ldr	r3, [r3, #0]
 801d2f8:	685b      	ldr	r3, [r3, #4]
 801d2fa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 801d2fc:	687b      	ldr	r3, [r7, #4]
 801d2fe:	681b      	ldr	r3, [r3, #0]
 801d300:	689b      	ldr	r3, [r3, #8]
 801d302:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 801d304:	68fb      	ldr	r3, [r7, #12]
 801d306:	2270      	movs	r2, #112	@ 0x70
 801d308:	4393      	bics	r3, r2
 801d30a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 801d30c:	683b      	ldr	r3, [r7, #0]
 801d30e:	681b      	ldr	r3, [r3, #0]
 801d310:	68fa      	ldr	r2, [r7, #12]
 801d312:	4313      	orrs	r3, r2
 801d314:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 801d316:	687b      	ldr	r3, [r7, #4]
 801d318:	681b      	ldr	r3, [r3, #0]
 801d31a:	68fa      	ldr	r2, [r7, #12]
 801d31c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801d31e:	687b      	ldr	r3, [r7, #4]
 801d320:	681a      	ldr	r2, [r3, #0]
 801d322:	2380      	movs	r3, #128	@ 0x80
 801d324:	05db      	lsls	r3, r3, #23
 801d326:	429a      	cmp	r2, r3
 801d328:	d00e      	beq.n	801d348 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 801d32a:	687b      	ldr	r3, [r7, #4]
 801d32c:	681b      	ldr	r3, [r3, #0]
 801d32e:	4a13      	ldr	r2, [pc, #76]	@ (801d37c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 801d330:	4293      	cmp	r3, r2
 801d332:	d009      	beq.n	801d348 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 801d334:	687b      	ldr	r3, [r7, #4]
 801d336:	681b      	ldr	r3, [r3, #0]
 801d338:	4a11      	ldr	r2, [pc, #68]	@ (801d380 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 801d33a:	4293      	cmp	r3, r2
 801d33c:	d004      	beq.n	801d348 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 801d33e:	687b      	ldr	r3, [r7, #4]
 801d340:	681b      	ldr	r3, [r3, #0]
 801d342:	4a10      	ldr	r2, [pc, #64]	@ (801d384 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 801d344:	4293      	cmp	r3, r2
 801d346:	d10c      	bne.n	801d362 <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 801d348:	68bb      	ldr	r3, [r7, #8]
 801d34a:	2280      	movs	r2, #128	@ 0x80
 801d34c:	4393      	bics	r3, r2
 801d34e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 801d350:	683b      	ldr	r3, [r7, #0]
 801d352:	685b      	ldr	r3, [r3, #4]
 801d354:	68ba      	ldr	r2, [r7, #8]
 801d356:	4313      	orrs	r3, r2
 801d358:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 801d35a:	687b      	ldr	r3, [r7, #4]
 801d35c:	681b      	ldr	r3, [r3, #0]
 801d35e:	68ba      	ldr	r2, [r7, #8]
 801d360:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 801d362:	687b      	ldr	r3, [r7, #4]
 801d364:	2239      	movs	r2, #57	@ 0x39
 801d366:	2101      	movs	r1, #1
 801d368:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 801d36a:	687b      	ldr	r3, [r7, #4]
 801d36c:	2238      	movs	r2, #56	@ 0x38
 801d36e:	2100      	movs	r1, #0
 801d370:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 801d372:	2300      	movs	r3, #0
}
 801d374:	0018      	movs	r0, r3
 801d376:	46bd      	mov	sp, r7
 801d378:	b004      	add	sp, #16
 801d37a:	bd80      	pop	{r7, pc}
 801d37c:	40000400 	.word	0x40000400
 801d380:	40010800 	.word	0x40010800
 801d384:	40011400 	.word	0x40011400

0801d388 <HAL_TIMEx_RemapConfig>:
  @endif
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_RemapConfig(TIM_HandleTypeDef *htim, uint32_t Remap)
{
 801d388:	b580      	push	{r7, lr}
 801d38a:	b082      	sub	sp, #8
 801d38c:	af00      	add	r7, sp, #0
 801d38e:	6078      	str	r0, [r7, #4]
 801d390:	6039      	str	r1, [r7, #0]

  /* Check parameters */
  assert_param(IS_TIM_REMAP(htim->Instance, Remap));

  __HAL_LOCK(htim);
 801d392:	687b      	ldr	r3, [r7, #4]
 801d394:	2238      	movs	r2, #56	@ 0x38
 801d396:	5c9b      	ldrb	r3, [r3, r2]
 801d398:	2b01      	cmp	r3, #1
 801d39a:	d101      	bne.n	801d3a0 <HAL_TIMEx_RemapConfig+0x18>
 801d39c:	2302      	movs	r3, #2
 801d39e:	e00c      	b.n	801d3ba <HAL_TIMEx_RemapConfig+0x32>
 801d3a0:	687b      	ldr	r3, [r7, #4]
 801d3a2:	2238      	movs	r2, #56	@ 0x38
 801d3a4:	2101      	movs	r1, #1
 801d3a6:	5499      	strb	r1, [r3, r2]

  /* Set the Timer remapping configuration */
  WRITE_REG(htim->Instance->OR, Remap);
 801d3a8:	687b      	ldr	r3, [r7, #4]
 801d3aa:	681b      	ldr	r3, [r3, #0]
 801d3ac:	683a      	ldr	r2, [r7, #0]
 801d3ae:	651a      	str	r2, [r3, #80]	@ 0x50

  __HAL_UNLOCK(htim);
 801d3b0:	687b      	ldr	r3, [r7, #4]
 801d3b2:	2238      	movs	r2, #56	@ 0x38
 801d3b4:	2100      	movs	r1, #0
 801d3b6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 801d3b8:	2300      	movs	r3, #0
}
 801d3ba:	0018      	movs	r0, r3
 801d3bc:	46bd      	mov	sp, r7
 801d3be:	b002      	add	sp, #8
 801d3c0:	bd80      	pop	{r7, pc}
	...

0801d3c4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 801d3c4:	b580      	push	{r7, lr}
 801d3c6:	b082      	sub	sp, #8
 801d3c8:	af00      	add	r7, sp, #0
 801d3ca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 801d3cc:	687b      	ldr	r3, [r7, #4]
 801d3ce:	2b00      	cmp	r3, #0
 801d3d0:	d101      	bne.n	801d3d6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 801d3d2:	2301      	movs	r3, #1
 801d3d4:	e053      	b.n	801d47e <HAL_UART_Init+0xba>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 801d3d6:	687b      	ldr	r3, [r7, #4]
 801d3d8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801d3da:	2b00      	cmp	r3, #0
 801d3dc:	d116      	bne.n	801d40c <HAL_UART_Init+0x48>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 801d3de:	687b      	ldr	r3, [r7, #4]
 801d3e0:	2278      	movs	r2, #120	@ 0x78
 801d3e2:	2100      	movs	r1, #0
 801d3e4:	5499      	strb	r1, [r3, r2]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 801d3e6:	687b      	ldr	r3, [r7, #4]
 801d3e8:	0018      	movs	r0, r3
 801d3ea:	f000 fd65 	bl	801deb8 <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 801d3ee:	687b      	ldr	r3, [r7, #4]
 801d3f0:	22b0      	movs	r2, #176	@ 0xb0
 801d3f2:	589b      	ldr	r3, [r3, r2]
 801d3f4:	2b00      	cmp	r3, #0
 801d3f6:	d103      	bne.n	801d400 <HAL_UART_Init+0x3c>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 801d3f8:	687b      	ldr	r3, [r7, #4]
 801d3fa:	21b0      	movs	r1, #176	@ 0xb0
 801d3fc:	4a22      	ldr	r2, [pc, #136]	@ (801d488 <HAL_UART_Init+0xc4>)
 801d3fe:	505a      	str	r2, [r3, r1]
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 801d400:	687b      	ldr	r3, [r7, #4]
 801d402:	22b0      	movs	r2, #176	@ 0xb0
 801d404:	589b      	ldr	r3, [r3, r2]
 801d406:	687a      	ldr	r2, [r7, #4]
 801d408:	0010      	movs	r0, r2
 801d40a:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 801d40c:	687b      	ldr	r3, [r7, #4]
 801d40e:	2224      	movs	r2, #36	@ 0x24
 801d410:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 801d412:	687b      	ldr	r3, [r7, #4]
 801d414:	681b      	ldr	r3, [r3, #0]
 801d416:	681a      	ldr	r2, [r3, #0]
 801d418:	687b      	ldr	r3, [r7, #4]
 801d41a:	681b      	ldr	r3, [r3, #0]
 801d41c:	2101      	movs	r1, #1
 801d41e:	438a      	bics	r2, r1
 801d420:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 801d422:	687b      	ldr	r3, [r7, #4]
 801d424:	0018      	movs	r0, r3
 801d426:	f000 fd8b 	bl	801df40 <UART_SetConfig>
 801d42a:	0003      	movs	r3, r0
 801d42c:	2b01      	cmp	r3, #1
 801d42e:	d101      	bne.n	801d434 <HAL_UART_Init+0x70>
  {
    return HAL_ERROR;
 801d430:	2301      	movs	r3, #1
 801d432:	e024      	b.n	801d47e <HAL_UART_Init+0xba>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 801d434:	687b      	ldr	r3, [r7, #4]
 801d436:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801d438:	2b00      	cmp	r3, #0
 801d43a:	d003      	beq.n	801d444 <HAL_UART_Init+0x80>
  {
    UART_AdvFeatureConfig(huart);
 801d43c:	687b      	ldr	r3, [r7, #4]
 801d43e:	0018      	movs	r0, r3
 801d440:	f001 f81c 	bl	801e47c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 801d444:	687b      	ldr	r3, [r7, #4]
 801d446:	681b      	ldr	r3, [r3, #0]
 801d448:	685a      	ldr	r2, [r3, #4]
 801d44a:	687b      	ldr	r3, [r7, #4]
 801d44c:	681b      	ldr	r3, [r3, #0]
 801d44e:	490f      	ldr	r1, [pc, #60]	@ (801d48c <HAL_UART_Init+0xc8>)
 801d450:	400a      	ands	r2, r1
 801d452:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 801d454:	687b      	ldr	r3, [r7, #4]
 801d456:	681b      	ldr	r3, [r3, #0]
 801d458:	689a      	ldr	r2, [r3, #8]
 801d45a:	687b      	ldr	r3, [r7, #4]
 801d45c:	681b      	ldr	r3, [r3, #0]
 801d45e:	212a      	movs	r1, #42	@ 0x2a
 801d460:	438a      	bics	r2, r1
 801d462:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 801d464:	687b      	ldr	r3, [r7, #4]
 801d466:	681b      	ldr	r3, [r3, #0]
 801d468:	681a      	ldr	r2, [r3, #0]
 801d46a:	687b      	ldr	r3, [r7, #4]
 801d46c:	681b      	ldr	r3, [r3, #0]
 801d46e:	2101      	movs	r1, #1
 801d470:	430a      	orrs	r2, r1
 801d472:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 801d474:	687b      	ldr	r3, [r7, #4]
 801d476:	0018      	movs	r0, r3
 801d478:	f001 f8b4 	bl	801e5e4 <UART_CheckIdleState>
 801d47c:	0003      	movs	r3, r0
}
 801d47e:	0018      	movs	r0, r3
 801d480:	46bd      	mov	sp, r7
 801d482:	b002      	add	sp, #8
 801d484:	bd80      	pop	{r7, pc}
 801d486:	46c0      	nop			@ (mov r8, r8)
 801d488:	08013b21 	.word	0x08013b21
 801d48c:	ffffb7ff 	.word	0xffffb7ff

0801d490 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 801d490:	b580      	push	{r7, lr}
 801d492:	b08a      	sub	sp, #40	@ 0x28
 801d494:	af02      	add	r7, sp, #8
 801d496:	60f8      	str	r0, [r7, #12]
 801d498:	60b9      	str	r1, [r7, #8]
 801d49a:	603b      	str	r3, [r7, #0]
 801d49c:	1dbb      	adds	r3, r7, #6
 801d49e:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 801d4a0:	68fb      	ldr	r3, [r7, #12]
 801d4a2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801d4a4:	2b20      	cmp	r3, #32
 801d4a6:	d000      	beq.n	801d4aa <HAL_UART_Transmit+0x1a>
 801d4a8:	e08c      	b.n	801d5c4 <HAL_UART_Transmit+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 801d4aa:	68bb      	ldr	r3, [r7, #8]
 801d4ac:	2b00      	cmp	r3, #0
 801d4ae:	d003      	beq.n	801d4b8 <HAL_UART_Transmit+0x28>
 801d4b0:	1dbb      	adds	r3, r7, #6
 801d4b2:	881b      	ldrh	r3, [r3, #0]
 801d4b4:	2b00      	cmp	r3, #0
 801d4b6:	d101      	bne.n	801d4bc <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 801d4b8:	2301      	movs	r3, #1
 801d4ba:	e084      	b.n	801d5c6 <HAL_UART_Transmit+0x136>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801d4bc:	68fb      	ldr	r3, [r7, #12]
 801d4be:	689a      	ldr	r2, [r3, #8]
 801d4c0:	2380      	movs	r3, #128	@ 0x80
 801d4c2:	015b      	lsls	r3, r3, #5
 801d4c4:	429a      	cmp	r2, r3
 801d4c6:	d109      	bne.n	801d4dc <HAL_UART_Transmit+0x4c>
 801d4c8:	68fb      	ldr	r3, [r7, #12]
 801d4ca:	691b      	ldr	r3, [r3, #16]
 801d4cc:	2b00      	cmp	r3, #0
 801d4ce:	d105      	bne.n	801d4dc <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 801d4d0:	68bb      	ldr	r3, [r7, #8]
 801d4d2:	2201      	movs	r2, #1
 801d4d4:	4013      	ands	r3, r2
 801d4d6:	d001      	beq.n	801d4dc <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 801d4d8:	2301      	movs	r3, #1
 801d4da:	e074      	b.n	801d5c6 <HAL_UART_Transmit+0x136>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 801d4dc:	68fb      	ldr	r3, [r7, #12]
 801d4de:	2284      	movs	r2, #132	@ 0x84
 801d4e0:	2100      	movs	r1, #0
 801d4e2:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 801d4e4:	68fb      	ldr	r3, [r7, #12]
 801d4e6:	2221      	movs	r2, #33	@ 0x21
 801d4e8:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 801d4ea:	f7f7 fa1f 	bl	801492c <HAL_GetTick>
 801d4ee:	0003      	movs	r3, r0
 801d4f0:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 801d4f2:	68fb      	ldr	r3, [r7, #12]
 801d4f4:	1dba      	adds	r2, r7, #6
 801d4f6:	2150      	movs	r1, #80	@ 0x50
 801d4f8:	8812      	ldrh	r2, [r2, #0]
 801d4fa:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 801d4fc:	68fb      	ldr	r3, [r7, #12]
 801d4fe:	1dba      	adds	r2, r7, #6
 801d500:	2152      	movs	r1, #82	@ 0x52
 801d502:	8812      	ldrh	r2, [r2, #0]
 801d504:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801d506:	68fb      	ldr	r3, [r7, #12]
 801d508:	689a      	ldr	r2, [r3, #8]
 801d50a:	2380      	movs	r3, #128	@ 0x80
 801d50c:	015b      	lsls	r3, r3, #5
 801d50e:	429a      	cmp	r2, r3
 801d510:	d108      	bne.n	801d524 <HAL_UART_Transmit+0x94>
 801d512:	68fb      	ldr	r3, [r7, #12]
 801d514:	691b      	ldr	r3, [r3, #16]
 801d516:	2b00      	cmp	r3, #0
 801d518:	d104      	bne.n	801d524 <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 801d51a:	2300      	movs	r3, #0
 801d51c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 801d51e:	68bb      	ldr	r3, [r7, #8]
 801d520:	61bb      	str	r3, [r7, #24]
 801d522:	e003      	b.n	801d52c <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 801d524:	68bb      	ldr	r3, [r7, #8]
 801d526:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 801d528:	2300      	movs	r3, #0
 801d52a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 801d52c:	e02f      	b.n	801d58e <HAL_UART_Transmit+0xfe>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 801d52e:	697a      	ldr	r2, [r7, #20]
 801d530:	68f8      	ldr	r0, [r7, #12]
 801d532:	683b      	ldr	r3, [r7, #0]
 801d534:	9300      	str	r3, [sp, #0]
 801d536:	0013      	movs	r3, r2
 801d538:	2200      	movs	r2, #0
 801d53a:	2180      	movs	r1, #128	@ 0x80
 801d53c:	f001 f8fa 	bl	801e734 <UART_WaitOnFlagUntilTimeout>
 801d540:	1e03      	subs	r3, r0, #0
 801d542:	d004      	beq.n	801d54e <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 801d544:	68fb      	ldr	r3, [r7, #12]
 801d546:	2220      	movs	r2, #32
 801d548:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 801d54a:	2303      	movs	r3, #3
 801d54c:	e03b      	b.n	801d5c6 <HAL_UART_Transmit+0x136>
      }
      if (pdata8bits == NULL)
 801d54e:	69fb      	ldr	r3, [r7, #28]
 801d550:	2b00      	cmp	r3, #0
 801d552:	d10b      	bne.n	801d56c <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 801d554:	69bb      	ldr	r3, [r7, #24]
 801d556:	881b      	ldrh	r3, [r3, #0]
 801d558:	001a      	movs	r2, r3
 801d55a:	68fb      	ldr	r3, [r7, #12]
 801d55c:	681b      	ldr	r3, [r3, #0]
 801d55e:	05d2      	lsls	r2, r2, #23
 801d560:	0dd2      	lsrs	r2, r2, #23
 801d562:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 801d564:	69bb      	ldr	r3, [r7, #24]
 801d566:	3302      	adds	r3, #2
 801d568:	61bb      	str	r3, [r7, #24]
 801d56a:	e007      	b.n	801d57c <HAL_UART_Transmit+0xec>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 801d56c:	69fb      	ldr	r3, [r7, #28]
 801d56e:	781a      	ldrb	r2, [r3, #0]
 801d570:	68fb      	ldr	r3, [r7, #12]
 801d572:	681b      	ldr	r3, [r3, #0]
 801d574:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 801d576:	69fb      	ldr	r3, [r7, #28]
 801d578:	3301      	adds	r3, #1
 801d57a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 801d57c:	68fb      	ldr	r3, [r7, #12]
 801d57e:	2252      	movs	r2, #82	@ 0x52
 801d580:	5a9b      	ldrh	r3, [r3, r2]
 801d582:	b29b      	uxth	r3, r3
 801d584:	3b01      	subs	r3, #1
 801d586:	b299      	uxth	r1, r3
 801d588:	68fb      	ldr	r3, [r7, #12]
 801d58a:	2252      	movs	r2, #82	@ 0x52
 801d58c:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 801d58e:	68fb      	ldr	r3, [r7, #12]
 801d590:	2252      	movs	r2, #82	@ 0x52
 801d592:	5a9b      	ldrh	r3, [r3, r2]
 801d594:	b29b      	uxth	r3, r3
 801d596:	2b00      	cmp	r3, #0
 801d598:	d1c9      	bne.n	801d52e <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 801d59a:	697a      	ldr	r2, [r7, #20]
 801d59c:	68f8      	ldr	r0, [r7, #12]
 801d59e:	683b      	ldr	r3, [r7, #0]
 801d5a0:	9300      	str	r3, [sp, #0]
 801d5a2:	0013      	movs	r3, r2
 801d5a4:	2200      	movs	r2, #0
 801d5a6:	2140      	movs	r1, #64	@ 0x40
 801d5a8:	f001 f8c4 	bl	801e734 <UART_WaitOnFlagUntilTimeout>
 801d5ac:	1e03      	subs	r3, r0, #0
 801d5ae:	d004      	beq.n	801d5ba <HAL_UART_Transmit+0x12a>
    {
      huart->gState = HAL_UART_STATE_READY;
 801d5b0:	68fb      	ldr	r3, [r7, #12]
 801d5b2:	2220      	movs	r2, #32
 801d5b4:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 801d5b6:	2303      	movs	r3, #3
 801d5b8:	e005      	b.n	801d5c6 <HAL_UART_Transmit+0x136>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 801d5ba:	68fb      	ldr	r3, [r7, #12]
 801d5bc:	2220      	movs	r2, #32
 801d5be:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 801d5c0:	2300      	movs	r3, #0
 801d5c2:	e000      	b.n	801d5c6 <HAL_UART_Transmit+0x136>
  }
  else
  {
    return HAL_BUSY;
 801d5c4:	2302      	movs	r3, #2
  }
}
 801d5c6:	0018      	movs	r0, r3
 801d5c8:	46bd      	mov	sp, r7
 801d5ca:	b008      	add	sp, #32
 801d5cc:	bd80      	pop	{r7, pc}
	...

0801d5d0 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 801d5d0:	b580      	push	{r7, lr}
 801d5d2:	b088      	sub	sp, #32
 801d5d4:	af00      	add	r7, sp, #0
 801d5d6:	60f8      	str	r0, [r7, #12]
 801d5d8:	60b9      	str	r1, [r7, #8]
 801d5da:	1dbb      	adds	r3, r7, #6
 801d5dc:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 801d5de:	68fb      	ldr	r3, [r7, #12]
 801d5e0:	2280      	movs	r2, #128	@ 0x80
 801d5e2:	589b      	ldr	r3, [r3, r2]
 801d5e4:	2b20      	cmp	r3, #32
 801d5e6:	d14a      	bne.n	801d67e <HAL_UART_Receive_IT+0xae>
  {
    if ((pData == NULL) || (Size == 0U))
 801d5e8:	68bb      	ldr	r3, [r7, #8]
 801d5ea:	2b00      	cmp	r3, #0
 801d5ec:	d003      	beq.n	801d5f6 <HAL_UART_Receive_IT+0x26>
 801d5ee:	1dbb      	adds	r3, r7, #6
 801d5f0:	881b      	ldrh	r3, [r3, #0]
 801d5f2:	2b00      	cmp	r3, #0
 801d5f4:	d101      	bne.n	801d5fa <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 801d5f6:	2301      	movs	r3, #1
 801d5f8:	e042      	b.n	801d680 <HAL_UART_Receive_IT+0xb0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801d5fa:	68fb      	ldr	r3, [r7, #12]
 801d5fc:	689a      	ldr	r2, [r3, #8]
 801d5fe:	2380      	movs	r3, #128	@ 0x80
 801d600:	015b      	lsls	r3, r3, #5
 801d602:	429a      	cmp	r2, r3
 801d604:	d109      	bne.n	801d61a <HAL_UART_Receive_IT+0x4a>
 801d606:	68fb      	ldr	r3, [r7, #12]
 801d608:	691b      	ldr	r3, [r3, #16]
 801d60a:	2b00      	cmp	r3, #0
 801d60c:	d105      	bne.n	801d61a <HAL_UART_Receive_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 801d60e:	68bb      	ldr	r3, [r7, #8]
 801d610:	2201      	movs	r2, #1
 801d612:	4013      	ands	r3, r2
 801d614:	d001      	beq.n	801d61a <HAL_UART_Receive_IT+0x4a>
      {
        return  HAL_ERROR;
 801d616:	2301      	movs	r3, #1
 801d618:	e032      	b.n	801d680 <HAL_UART_Receive_IT+0xb0>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801d61a:	68fb      	ldr	r3, [r7, #12]
 801d61c:	2200      	movs	r2, #0
 801d61e:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 801d620:	68fb      	ldr	r3, [r7, #12]
 801d622:	681b      	ldr	r3, [r3, #0]
 801d624:	4a18      	ldr	r2, [pc, #96]	@ (801d688 <HAL_UART_Receive_IT+0xb8>)
 801d626:	4293      	cmp	r3, r2
 801d628:	d020      	beq.n	801d66c <HAL_UART_Receive_IT+0x9c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 801d62a:	68fb      	ldr	r3, [r7, #12]
 801d62c:	681b      	ldr	r3, [r3, #0]
 801d62e:	685a      	ldr	r2, [r3, #4]
 801d630:	2380      	movs	r3, #128	@ 0x80
 801d632:	041b      	lsls	r3, r3, #16
 801d634:	4013      	ands	r3, r2
 801d636:	d019      	beq.n	801d66c <HAL_UART_Receive_IT+0x9c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801d638:	f3ef 8310 	mrs	r3, PRIMASK
 801d63c:	613b      	str	r3, [r7, #16]
  return(result);
 801d63e:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 801d640:	61fb      	str	r3, [r7, #28]
 801d642:	2301      	movs	r3, #1
 801d644:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801d646:	697b      	ldr	r3, [r7, #20]
 801d648:	f383 8810 	msr	PRIMASK, r3
}
 801d64c:	46c0      	nop			@ (mov r8, r8)
 801d64e:	68fb      	ldr	r3, [r7, #12]
 801d650:	681b      	ldr	r3, [r3, #0]
 801d652:	681a      	ldr	r2, [r3, #0]
 801d654:	68fb      	ldr	r3, [r7, #12]
 801d656:	681b      	ldr	r3, [r3, #0]
 801d658:	2180      	movs	r1, #128	@ 0x80
 801d65a:	04c9      	lsls	r1, r1, #19
 801d65c:	430a      	orrs	r2, r1
 801d65e:	601a      	str	r2, [r3, #0]
 801d660:	69fb      	ldr	r3, [r7, #28]
 801d662:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801d664:	69bb      	ldr	r3, [r7, #24]
 801d666:	f383 8810 	msr	PRIMASK, r3
}
 801d66a:	46c0      	nop			@ (mov r8, r8)
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 801d66c:	1dbb      	adds	r3, r7, #6
 801d66e:	881a      	ldrh	r2, [r3, #0]
 801d670:	68b9      	ldr	r1, [r7, #8]
 801d672:	68fb      	ldr	r3, [r7, #12]
 801d674:	0018      	movs	r0, r3
 801d676:	f001 f8c7 	bl	801e808 <UART_Start_Receive_IT>
 801d67a:	0003      	movs	r3, r0
 801d67c:	e000      	b.n	801d680 <HAL_UART_Receive_IT+0xb0>
  }
  else
  {
    return HAL_BUSY;
 801d67e:	2302      	movs	r3, #2
  }
}
 801d680:	0018      	movs	r0, r3
 801d682:	46bd      	mov	sp, r7
 801d684:	b008      	add	sp, #32
 801d686:	bd80      	pop	{r7, pc}
 801d688:	40004800 	.word	0x40004800

0801d68c <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 801d68c:	b580      	push	{r7, lr}
 801d68e:	b088      	sub	sp, #32
 801d690:	af00      	add	r7, sp, #0
 801d692:	60f8      	str	r0, [r7, #12]
 801d694:	60b9      	str	r1, [r7, #8]
 801d696:	1dbb      	adds	r3, r7, #6
 801d698:	801a      	strh	r2, [r3, #0]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 801d69a:	68fb      	ldr	r3, [r7, #12]
 801d69c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801d69e:	2b20      	cmp	r3, #32
 801d6a0:	d000      	beq.n	801d6a4 <HAL_UART_Transmit_DMA+0x18>
 801d6a2:	e077      	b.n	801d794 <HAL_UART_Transmit_DMA+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 801d6a4:	68bb      	ldr	r3, [r7, #8]
 801d6a6:	2b00      	cmp	r3, #0
 801d6a8:	d003      	beq.n	801d6b2 <HAL_UART_Transmit_DMA+0x26>
 801d6aa:	1dbb      	adds	r3, r7, #6
 801d6ac:	881b      	ldrh	r3, [r3, #0]
 801d6ae:	2b00      	cmp	r3, #0
 801d6b0:	d101      	bne.n	801d6b6 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 801d6b2:	2301      	movs	r3, #1
 801d6b4:	e06f      	b.n	801d796 <HAL_UART_Transmit_DMA+0x10a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy into TDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801d6b6:	68fb      	ldr	r3, [r7, #12]
 801d6b8:	689a      	ldr	r2, [r3, #8]
 801d6ba:	2380      	movs	r3, #128	@ 0x80
 801d6bc:	015b      	lsls	r3, r3, #5
 801d6be:	429a      	cmp	r2, r3
 801d6c0:	d109      	bne.n	801d6d6 <HAL_UART_Transmit_DMA+0x4a>
 801d6c2:	68fb      	ldr	r3, [r7, #12]
 801d6c4:	691b      	ldr	r3, [r3, #16]
 801d6c6:	2b00      	cmp	r3, #0
 801d6c8:	d105      	bne.n	801d6d6 <HAL_UART_Transmit_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 801d6ca:	68bb      	ldr	r3, [r7, #8]
 801d6cc:	2201      	movs	r2, #1
 801d6ce:	4013      	ands	r3, r2
 801d6d0:	d001      	beq.n	801d6d6 <HAL_UART_Transmit_DMA+0x4a>
      {
        return  HAL_ERROR;
 801d6d2:	2301      	movs	r3, #1
 801d6d4:	e05f      	b.n	801d796 <HAL_UART_Transmit_DMA+0x10a>
      }
    }

    huart->pTxBuffPtr  = pData;
 801d6d6:	68fb      	ldr	r3, [r7, #12]
 801d6d8:	68ba      	ldr	r2, [r7, #8]
 801d6da:	64da      	str	r2, [r3, #76]	@ 0x4c
    huart->TxXferSize  = Size;
 801d6dc:	68fb      	ldr	r3, [r7, #12]
 801d6de:	1dba      	adds	r2, r7, #6
 801d6e0:	2150      	movs	r1, #80	@ 0x50
 801d6e2:	8812      	ldrh	r2, [r2, #0]
 801d6e4:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 801d6e6:	68fb      	ldr	r3, [r7, #12]
 801d6e8:	1dba      	adds	r2, r7, #6
 801d6ea:	2152      	movs	r1, #82	@ 0x52
 801d6ec:	8812      	ldrh	r2, [r2, #0]
 801d6ee:	525a      	strh	r2, [r3, r1]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 801d6f0:	68fb      	ldr	r3, [r7, #12]
 801d6f2:	2284      	movs	r2, #132	@ 0x84
 801d6f4:	2100      	movs	r1, #0
 801d6f6:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 801d6f8:	68fb      	ldr	r3, [r7, #12]
 801d6fa:	2221      	movs	r2, #33	@ 0x21
 801d6fc:	67da      	str	r2, [r3, #124]	@ 0x7c

    if (huart->hdmatx != NULL)
 801d6fe:	68fb      	ldr	r3, [r7, #12]
 801d700:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801d702:	2b00      	cmp	r3, #0
 801d704:	d027      	beq.n	801d756 <HAL_UART_Transmit_DMA+0xca>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 801d706:	68fb      	ldr	r3, [r7, #12]
 801d708:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801d70a:	4a25      	ldr	r2, [pc, #148]	@ (801d7a0 <HAL_UART_Transmit_DMA+0x114>)
 801d70c:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 801d70e:	68fb      	ldr	r3, [r7, #12]
 801d710:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801d712:	4a24      	ldr	r2, [pc, #144]	@ (801d7a4 <HAL_UART_Transmit_DMA+0x118>)
 801d714:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 801d716:	68fb      	ldr	r3, [r7, #12]
 801d718:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801d71a:	4a23      	ldr	r2, [pc, #140]	@ (801d7a8 <HAL_UART_Transmit_DMA+0x11c>)
 801d71c:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 801d71e:	68fb      	ldr	r3, [r7, #12]
 801d720:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801d722:	2200      	movs	r2, #0
 801d724:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 801d726:	68fb      	ldr	r3, [r7, #12]
 801d728:	6f18      	ldr	r0, [r3, #112]	@ 0x70
 801d72a:	68fb      	ldr	r3, [r7, #12]
 801d72c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801d72e:	0019      	movs	r1, r3
 801d730:	68fb      	ldr	r3, [r7, #12]
 801d732:	681b      	ldr	r3, [r3, #0]
 801d734:	3328      	adds	r3, #40	@ 0x28
 801d736:	001a      	movs	r2, r3
 801d738:	1dbb      	adds	r3, r7, #6
 801d73a:	881b      	ldrh	r3, [r3, #0]
 801d73c:	f7f7 fe2a 	bl	8015394 <HAL_DMA_Start_IT>
 801d740:	1e03      	subs	r3, r0, #0
 801d742:	d008      	beq.n	801d756 <HAL_UART_Transmit_DMA+0xca>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 801d744:	68fb      	ldr	r3, [r7, #12]
 801d746:	2284      	movs	r2, #132	@ 0x84
 801d748:	2110      	movs	r1, #16
 801d74a:	5099      	str	r1, [r3, r2]

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 801d74c:	68fb      	ldr	r3, [r7, #12]
 801d74e:	2220      	movs	r2, #32
 801d750:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_ERROR;
 801d752:	2301      	movs	r3, #1
 801d754:	e01f      	b.n	801d796 <HAL_UART_Transmit_DMA+0x10a>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 801d756:	68fb      	ldr	r3, [r7, #12]
 801d758:	681b      	ldr	r3, [r3, #0]
 801d75a:	2240      	movs	r2, #64	@ 0x40
 801d75c:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801d75e:	f3ef 8310 	mrs	r3, PRIMASK
 801d762:	613b      	str	r3, [r7, #16]
  return(result);
 801d764:	693b      	ldr	r3, [r7, #16]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 801d766:	61fb      	str	r3, [r7, #28]
 801d768:	2301      	movs	r3, #1
 801d76a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801d76c:	697b      	ldr	r3, [r7, #20]
 801d76e:	f383 8810 	msr	PRIMASK, r3
}
 801d772:	46c0      	nop			@ (mov r8, r8)
 801d774:	68fb      	ldr	r3, [r7, #12]
 801d776:	681b      	ldr	r3, [r3, #0]
 801d778:	689a      	ldr	r2, [r3, #8]
 801d77a:	68fb      	ldr	r3, [r7, #12]
 801d77c:	681b      	ldr	r3, [r3, #0]
 801d77e:	2180      	movs	r1, #128	@ 0x80
 801d780:	430a      	orrs	r2, r1
 801d782:	609a      	str	r2, [r3, #8]
 801d784:	69fb      	ldr	r3, [r7, #28]
 801d786:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801d788:	69bb      	ldr	r3, [r7, #24]
 801d78a:	f383 8810 	msr	PRIMASK, r3
}
 801d78e:	46c0      	nop			@ (mov r8, r8)

    return HAL_OK;
 801d790:	2300      	movs	r3, #0
 801d792:	e000      	b.n	801d796 <HAL_UART_Transmit_DMA+0x10a>
  }
  else
  {
    return HAL_BUSY;
 801d794:	2302      	movs	r3, #2
  }
}
 801d796:	0018      	movs	r0, r3
 801d798:	46bd      	mov	sp, r7
 801d79a:	b008      	add	sp, #32
 801d79c:	bd80      	pop	{r7, pc}
 801d79e:	46c0      	nop			@ (mov r8, r8)
 801d7a0:	0801ebed 	.word	0x0801ebed
 801d7a4:	0801ec89 	.word	0x0801ec89
 801d7a8:	0801ee29 	.word	0x0801ee29

0801d7ac <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 801d7ac:	b580      	push	{r7, lr}
 801d7ae:	b088      	sub	sp, #32
 801d7b0:	af00      	add	r7, sp, #0
 801d7b2:	60f8      	str	r0, [r7, #12]
 801d7b4:	60b9      	str	r1, [r7, #8]
 801d7b6:	1dbb      	adds	r3, r7, #6
 801d7b8:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 801d7ba:	68fb      	ldr	r3, [r7, #12]
 801d7bc:	2280      	movs	r2, #128	@ 0x80
 801d7be:	589b      	ldr	r3, [r3, r2]
 801d7c0:	2b20      	cmp	r3, #32
 801d7c2:	d14a      	bne.n	801d85a <HAL_UART_Receive_DMA+0xae>
  {
    if ((pData == NULL) || (Size == 0U))
 801d7c4:	68bb      	ldr	r3, [r7, #8]
 801d7c6:	2b00      	cmp	r3, #0
 801d7c8:	d003      	beq.n	801d7d2 <HAL_UART_Receive_DMA+0x26>
 801d7ca:	1dbb      	adds	r3, r7, #6
 801d7cc:	881b      	ldrh	r3, [r3, #0]
 801d7ce:	2b00      	cmp	r3, #0
 801d7d0:	d101      	bne.n	801d7d6 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 801d7d2:	2301      	movs	r3, #1
 801d7d4:	e042      	b.n	801d85c <HAL_UART_Receive_DMA+0xb0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy from RDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801d7d6:	68fb      	ldr	r3, [r7, #12]
 801d7d8:	689a      	ldr	r2, [r3, #8]
 801d7da:	2380      	movs	r3, #128	@ 0x80
 801d7dc:	015b      	lsls	r3, r3, #5
 801d7de:	429a      	cmp	r2, r3
 801d7e0:	d109      	bne.n	801d7f6 <HAL_UART_Receive_DMA+0x4a>
 801d7e2:	68fb      	ldr	r3, [r7, #12]
 801d7e4:	691b      	ldr	r3, [r3, #16]
 801d7e6:	2b00      	cmp	r3, #0
 801d7e8:	d105      	bne.n	801d7f6 <HAL_UART_Receive_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 801d7ea:	68bb      	ldr	r3, [r7, #8]
 801d7ec:	2201      	movs	r2, #1
 801d7ee:	4013      	ands	r3, r2
 801d7f0:	d001      	beq.n	801d7f6 <HAL_UART_Receive_DMA+0x4a>
      {
        return  HAL_ERROR;
 801d7f2:	2301      	movs	r3, #1
 801d7f4:	e032      	b.n	801d85c <HAL_UART_Receive_DMA+0xb0>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801d7f6:	68fb      	ldr	r3, [r7, #12]
 801d7f8:	2200      	movs	r2, #0
 801d7fa:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 801d7fc:	68fb      	ldr	r3, [r7, #12]
 801d7fe:	681b      	ldr	r3, [r3, #0]
 801d800:	4a18      	ldr	r2, [pc, #96]	@ (801d864 <HAL_UART_Receive_DMA+0xb8>)
 801d802:	4293      	cmp	r3, r2
 801d804:	d020      	beq.n	801d848 <HAL_UART_Receive_DMA+0x9c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 801d806:	68fb      	ldr	r3, [r7, #12]
 801d808:	681b      	ldr	r3, [r3, #0]
 801d80a:	685a      	ldr	r2, [r3, #4]
 801d80c:	2380      	movs	r3, #128	@ 0x80
 801d80e:	041b      	lsls	r3, r3, #16
 801d810:	4013      	ands	r3, r2
 801d812:	d019      	beq.n	801d848 <HAL_UART_Receive_DMA+0x9c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801d814:	f3ef 8310 	mrs	r3, PRIMASK
 801d818:	613b      	str	r3, [r7, #16]
  return(result);
 801d81a:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 801d81c:	61fb      	str	r3, [r7, #28]
 801d81e:	2301      	movs	r3, #1
 801d820:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801d822:	697b      	ldr	r3, [r7, #20]
 801d824:	f383 8810 	msr	PRIMASK, r3
}
 801d828:	46c0      	nop			@ (mov r8, r8)
 801d82a:	68fb      	ldr	r3, [r7, #12]
 801d82c:	681b      	ldr	r3, [r3, #0]
 801d82e:	681a      	ldr	r2, [r3, #0]
 801d830:	68fb      	ldr	r3, [r7, #12]
 801d832:	681b      	ldr	r3, [r3, #0]
 801d834:	2180      	movs	r1, #128	@ 0x80
 801d836:	04c9      	lsls	r1, r1, #19
 801d838:	430a      	orrs	r2, r1
 801d83a:	601a      	str	r2, [r3, #0]
 801d83c:	69fb      	ldr	r3, [r7, #28]
 801d83e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801d840:	69bb      	ldr	r3, [r7, #24]
 801d842:	f383 8810 	msr	PRIMASK, r3
}
 801d846:	46c0      	nop			@ (mov r8, r8)
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 801d848:	1dbb      	adds	r3, r7, #6
 801d84a:	881a      	ldrh	r2, [r3, #0]
 801d84c:	68b9      	ldr	r1, [r7, #8]
 801d84e:	68fb      	ldr	r3, [r7, #12]
 801d850:	0018      	movs	r0, r3
 801d852:	f001 f8a3 	bl	801e99c <UART_Start_Receive_DMA>
 801d856:	0003      	movs	r3, r0
 801d858:	e000      	b.n	801d85c <HAL_UART_Receive_DMA+0xb0>
  }
  else
  {
    return HAL_BUSY;
 801d85a:	2302      	movs	r3, #2
  }
}
 801d85c:	0018      	movs	r0, r3
 801d85e:	46bd      	mov	sp, r7
 801d860:	b008      	add	sp, #32
 801d862:	bd80      	pop	{r7, pc}
 801d864:	40004800 	.word	0x40004800

0801d868 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 801d868:	b590      	push	{r4, r7, lr}
 801d86a:	b0ab      	sub	sp, #172	@ 0xac
 801d86c:	af00      	add	r7, sp, #0
 801d86e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 801d870:	687b      	ldr	r3, [r7, #4]
 801d872:	681b      	ldr	r3, [r3, #0]
 801d874:	69db      	ldr	r3, [r3, #28]
 801d876:	22a4      	movs	r2, #164	@ 0xa4
 801d878:	18b9      	adds	r1, r7, r2
 801d87a:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 801d87c:	687b      	ldr	r3, [r7, #4]
 801d87e:	681b      	ldr	r3, [r3, #0]
 801d880:	681b      	ldr	r3, [r3, #0]
 801d882:	20a0      	movs	r0, #160	@ 0xa0
 801d884:	1839      	adds	r1, r7, r0
 801d886:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 801d888:	687b      	ldr	r3, [r7, #4]
 801d88a:	681b      	ldr	r3, [r3, #0]
 801d88c:	689b      	ldr	r3, [r3, #8]
 801d88e:	219c      	movs	r1, #156	@ 0x9c
 801d890:	1879      	adds	r1, r7, r1
 801d892:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 801d894:	0011      	movs	r1, r2
 801d896:	18bb      	adds	r3, r7, r2
 801d898:	681b      	ldr	r3, [r3, #0]
 801d89a:	4a9c      	ldr	r2, [pc, #624]	@ (801db0c <HAL_UART_IRQHandler+0x2a4>)
 801d89c:	4013      	ands	r3, r2
 801d89e:	2298      	movs	r2, #152	@ 0x98
 801d8a0:	18bc      	adds	r4, r7, r2
 801d8a2:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 801d8a4:	18bb      	adds	r3, r7, r2
 801d8a6:	681b      	ldr	r3, [r3, #0]
 801d8a8:	2b00      	cmp	r3, #0
 801d8aa:	d114      	bne.n	801d8d6 <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 801d8ac:	187b      	adds	r3, r7, r1
 801d8ae:	681b      	ldr	r3, [r3, #0]
 801d8b0:	2220      	movs	r2, #32
 801d8b2:	4013      	ands	r3, r2
 801d8b4:	d00f      	beq.n	801d8d6 <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 801d8b6:	183b      	adds	r3, r7, r0
 801d8b8:	681b      	ldr	r3, [r3, #0]
 801d8ba:	2220      	movs	r2, #32
 801d8bc:	4013      	ands	r3, r2
 801d8be:	d00a      	beq.n	801d8d6 <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 801d8c0:	687b      	ldr	r3, [r7, #4]
 801d8c2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801d8c4:	2b00      	cmp	r3, #0
 801d8c6:	d100      	bne.n	801d8ca <HAL_UART_IRQHandler+0x62>
 801d8c8:	e2aa      	b.n	801de20 <HAL_UART_IRQHandler+0x5b8>
      {
        huart->RxISR(huart);
 801d8ca:	687b      	ldr	r3, [r7, #4]
 801d8cc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801d8ce:	687a      	ldr	r2, [r7, #4]
 801d8d0:	0010      	movs	r0, r2
 801d8d2:	4798      	blx	r3
      }
      return;
 801d8d4:	e2a4      	b.n	801de20 <HAL_UART_IRQHandler+0x5b8>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 801d8d6:	2398      	movs	r3, #152	@ 0x98
 801d8d8:	18fb      	adds	r3, r7, r3
 801d8da:	681b      	ldr	r3, [r3, #0]
 801d8dc:	2b00      	cmp	r3, #0
 801d8de:	d100      	bne.n	801d8e2 <HAL_UART_IRQHandler+0x7a>
 801d8e0:	e11a      	b.n	801db18 <HAL_UART_IRQHandler+0x2b0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 801d8e2:	239c      	movs	r3, #156	@ 0x9c
 801d8e4:	18fb      	adds	r3, r7, r3
 801d8e6:	681b      	ldr	r3, [r3, #0]
 801d8e8:	2201      	movs	r2, #1
 801d8ea:	4013      	ands	r3, r2
 801d8ec:	d106      	bne.n	801d8fc <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 801d8ee:	23a0      	movs	r3, #160	@ 0xa0
 801d8f0:	18fb      	adds	r3, r7, r3
 801d8f2:	681b      	ldr	r3, [r3, #0]
 801d8f4:	4a86      	ldr	r2, [pc, #536]	@ (801db10 <HAL_UART_IRQHandler+0x2a8>)
 801d8f6:	4013      	ands	r3, r2
 801d8f8:	d100      	bne.n	801d8fc <HAL_UART_IRQHandler+0x94>
 801d8fa:	e10d      	b.n	801db18 <HAL_UART_IRQHandler+0x2b0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 801d8fc:	23a4      	movs	r3, #164	@ 0xa4
 801d8fe:	18fb      	adds	r3, r7, r3
 801d900:	681b      	ldr	r3, [r3, #0]
 801d902:	2201      	movs	r2, #1
 801d904:	4013      	ands	r3, r2
 801d906:	d012      	beq.n	801d92e <HAL_UART_IRQHandler+0xc6>
 801d908:	23a0      	movs	r3, #160	@ 0xa0
 801d90a:	18fb      	adds	r3, r7, r3
 801d90c:	681a      	ldr	r2, [r3, #0]
 801d90e:	2380      	movs	r3, #128	@ 0x80
 801d910:	005b      	lsls	r3, r3, #1
 801d912:	4013      	ands	r3, r2
 801d914:	d00b      	beq.n	801d92e <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 801d916:	687b      	ldr	r3, [r7, #4]
 801d918:	681b      	ldr	r3, [r3, #0]
 801d91a:	2201      	movs	r2, #1
 801d91c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 801d91e:	687b      	ldr	r3, [r7, #4]
 801d920:	2284      	movs	r2, #132	@ 0x84
 801d922:	589b      	ldr	r3, [r3, r2]
 801d924:	2201      	movs	r2, #1
 801d926:	431a      	orrs	r2, r3
 801d928:	687b      	ldr	r3, [r7, #4]
 801d92a:	2184      	movs	r1, #132	@ 0x84
 801d92c:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 801d92e:	23a4      	movs	r3, #164	@ 0xa4
 801d930:	18fb      	adds	r3, r7, r3
 801d932:	681b      	ldr	r3, [r3, #0]
 801d934:	2202      	movs	r2, #2
 801d936:	4013      	ands	r3, r2
 801d938:	d011      	beq.n	801d95e <HAL_UART_IRQHandler+0xf6>
 801d93a:	239c      	movs	r3, #156	@ 0x9c
 801d93c:	18fb      	adds	r3, r7, r3
 801d93e:	681b      	ldr	r3, [r3, #0]
 801d940:	2201      	movs	r2, #1
 801d942:	4013      	ands	r3, r2
 801d944:	d00b      	beq.n	801d95e <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 801d946:	687b      	ldr	r3, [r7, #4]
 801d948:	681b      	ldr	r3, [r3, #0]
 801d94a:	2202      	movs	r2, #2
 801d94c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 801d94e:	687b      	ldr	r3, [r7, #4]
 801d950:	2284      	movs	r2, #132	@ 0x84
 801d952:	589b      	ldr	r3, [r3, r2]
 801d954:	2204      	movs	r2, #4
 801d956:	431a      	orrs	r2, r3
 801d958:	687b      	ldr	r3, [r7, #4]
 801d95a:	2184      	movs	r1, #132	@ 0x84
 801d95c:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 801d95e:	23a4      	movs	r3, #164	@ 0xa4
 801d960:	18fb      	adds	r3, r7, r3
 801d962:	681b      	ldr	r3, [r3, #0]
 801d964:	2204      	movs	r2, #4
 801d966:	4013      	ands	r3, r2
 801d968:	d011      	beq.n	801d98e <HAL_UART_IRQHandler+0x126>
 801d96a:	239c      	movs	r3, #156	@ 0x9c
 801d96c:	18fb      	adds	r3, r7, r3
 801d96e:	681b      	ldr	r3, [r3, #0]
 801d970:	2201      	movs	r2, #1
 801d972:	4013      	ands	r3, r2
 801d974:	d00b      	beq.n	801d98e <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 801d976:	687b      	ldr	r3, [r7, #4]
 801d978:	681b      	ldr	r3, [r3, #0]
 801d97a:	2204      	movs	r2, #4
 801d97c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 801d97e:	687b      	ldr	r3, [r7, #4]
 801d980:	2284      	movs	r2, #132	@ 0x84
 801d982:	589b      	ldr	r3, [r3, r2]
 801d984:	2202      	movs	r2, #2
 801d986:	431a      	orrs	r2, r3
 801d988:	687b      	ldr	r3, [r7, #4]
 801d98a:	2184      	movs	r1, #132	@ 0x84
 801d98c:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 801d98e:	23a4      	movs	r3, #164	@ 0xa4
 801d990:	18fb      	adds	r3, r7, r3
 801d992:	681b      	ldr	r3, [r3, #0]
 801d994:	2208      	movs	r2, #8
 801d996:	4013      	ands	r3, r2
 801d998:	d017      	beq.n	801d9ca <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 801d99a:	23a0      	movs	r3, #160	@ 0xa0
 801d99c:	18fb      	adds	r3, r7, r3
 801d99e:	681b      	ldr	r3, [r3, #0]
 801d9a0:	2220      	movs	r2, #32
 801d9a2:	4013      	ands	r3, r2
 801d9a4:	d105      	bne.n	801d9b2 <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 801d9a6:	239c      	movs	r3, #156	@ 0x9c
 801d9a8:	18fb      	adds	r3, r7, r3
 801d9aa:	681b      	ldr	r3, [r3, #0]
 801d9ac:	2201      	movs	r2, #1
 801d9ae:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 801d9b0:	d00b      	beq.n	801d9ca <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 801d9b2:	687b      	ldr	r3, [r7, #4]
 801d9b4:	681b      	ldr	r3, [r3, #0]
 801d9b6:	2208      	movs	r2, #8
 801d9b8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 801d9ba:	687b      	ldr	r3, [r7, #4]
 801d9bc:	2284      	movs	r2, #132	@ 0x84
 801d9be:	589b      	ldr	r3, [r3, r2]
 801d9c0:	2208      	movs	r2, #8
 801d9c2:	431a      	orrs	r2, r3
 801d9c4:	687b      	ldr	r3, [r7, #4]
 801d9c6:	2184      	movs	r1, #132	@ 0x84
 801d9c8:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 801d9ca:	23a4      	movs	r3, #164	@ 0xa4
 801d9cc:	18fb      	adds	r3, r7, r3
 801d9ce:	681a      	ldr	r2, [r3, #0]
 801d9d0:	2380      	movs	r3, #128	@ 0x80
 801d9d2:	011b      	lsls	r3, r3, #4
 801d9d4:	4013      	ands	r3, r2
 801d9d6:	d013      	beq.n	801da00 <HAL_UART_IRQHandler+0x198>
 801d9d8:	23a0      	movs	r3, #160	@ 0xa0
 801d9da:	18fb      	adds	r3, r7, r3
 801d9dc:	681a      	ldr	r2, [r3, #0]
 801d9de:	2380      	movs	r3, #128	@ 0x80
 801d9e0:	04db      	lsls	r3, r3, #19
 801d9e2:	4013      	ands	r3, r2
 801d9e4:	d00c      	beq.n	801da00 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 801d9e6:	687b      	ldr	r3, [r7, #4]
 801d9e8:	681b      	ldr	r3, [r3, #0]
 801d9ea:	2280      	movs	r2, #128	@ 0x80
 801d9ec:	0112      	lsls	r2, r2, #4
 801d9ee:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 801d9f0:	687b      	ldr	r3, [r7, #4]
 801d9f2:	2284      	movs	r2, #132	@ 0x84
 801d9f4:	589b      	ldr	r3, [r3, r2]
 801d9f6:	2220      	movs	r2, #32
 801d9f8:	431a      	orrs	r2, r3
 801d9fa:	687b      	ldr	r3, [r7, #4]
 801d9fc:	2184      	movs	r1, #132	@ 0x84
 801d9fe:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 801da00:	687b      	ldr	r3, [r7, #4]
 801da02:	2284      	movs	r2, #132	@ 0x84
 801da04:	589b      	ldr	r3, [r3, r2]
 801da06:	2b00      	cmp	r3, #0
 801da08:	d100      	bne.n	801da0c <HAL_UART_IRQHandler+0x1a4>
 801da0a:	e20b      	b.n	801de24 <HAL_UART_IRQHandler+0x5bc>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 801da0c:	23a4      	movs	r3, #164	@ 0xa4
 801da0e:	18fb      	adds	r3, r7, r3
 801da10:	681b      	ldr	r3, [r3, #0]
 801da12:	2220      	movs	r2, #32
 801da14:	4013      	ands	r3, r2
 801da16:	d00e      	beq.n	801da36 <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 801da18:	23a0      	movs	r3, #160	@ 0xa0
 801da1a:	18fb      	adds	r3, r7, r3
 801da1c:	681b      	ldr	r3, [r3, #0]
 801da1e:	2220      	movs	r2, #32
 801da20:	4013      	ands	r3, r2
 801da22:	d008      	beq.n	801da36 <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 801da24:	687b      	ldr	r3, [r7, #4]
 801da26:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801da28:	2b00      	cmp	r3, #0
 801da2a:	d004      	beq.n	801da36 <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 801da2c:	687b      	ldr	r3, [r7, #4]
 801da2e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801da30:	687a      	ldr	r2, [r7, #4]
 801da32:	0010      	movs	r0, r2
 801da34:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 801da36:	687b      	ldr	r3, [r7, #4]
 801da38:	2284      	movs	r2, #132	@ 0x84
 801da3a:	589b      	ldr	r3, [r3, r2]
 801da3c:	2194      	movs	r1, #148	@ 0x94
 801da3e:	187a      	adds	r2, r7, r1
 801da40:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 801da42:	687b      	ldr	r3, [r7, #4]
 801da44:	681b      	ldr	r3, [r3, #0]
 801da46:	689b      	ldr	r3, [r3, #8]
 801da48:	2240      	movs	r2, #64	@ 0x40
 801da4a:	4013      	ands	r3, r2
 801da4c:	2b40      	cmp	r3, #64	@ 0x40
 801da4e:	d004      	beq.n	801da5a <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 801da50:	187b      	adds	r3, r7, r1
 801da52:	681b      	ldr	r3, [r3, #0]
 801da54:	2228      	movs	r2, #40	@ 0x28
 801da56:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 801da58:	d04b      	beq.n	801daf2 <HAL_UART_IRQHandler+0x28a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 801da5a:	687b      	ldr	r3, [r7, #4]
 801da5c:	0018      	movs	r0, r3
 801da5e:	f001 f861 	bl	801eb24 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801da62:	687b      	ldr	r3, [r7, #4]
 801da64:	681b      	ldr	r3, [r3, #0]
 801da66:	689b      	ldr	r3, [r3, #8]
 801da68:	2240      	movs	r2, #64	@ 0x40
 801da6a:	4013      	ands	r3, r2
 801da6c:	2b40      	cmp	r3, #64	@ 0x40
 801da6e:	d139      	bne.n	801dae4 <HAL_UART_IRQHandler+0x27c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801da70:	f3ef 8310 	mrs	r3, PRIMASK
 801da74:	663b      	str	r3, [r7, #96]	@ 0x60
  return(result);
 801da76:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801da78:	2090      	movs	r0, #144	@ 0x90
 801da7a:	183a      	adds	r2, r7, r0
 801da7c:	6013      	str	r3, [r2, #0]
 801da7e:	2301      	movs	r3, #1
 801da80:	667b      	str	r3, [r7, #100]	@ 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801da82:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801da84:	f383 8810 	msr	PRIMASK, r3
}
 801da88:	46c0      	nop			@ (mov r8, r8)
 801da8a:	687b      	ldr	r3, [r7, #4]
 801da8c:	681b      	ldr	r3, [r3, #0]
 801da8e:	689a      	ldr	r2, [r3, #8]
 801da90:	687b      	ldr	r3, [r7, #4]
 801da92:	681b      	ldr	r3, [r3, #0]
 801da94:	2140      	movs	r1, #64	@ 0x40
 801da96:	438a      	bics	r2, r1
 801da98:	609a      	str	r2, [r3, #8]
 801da9a:	183b      	adds	r3, r7, r0
 801da9c:	681b      	ldr	r3, [r3, #0]
 801da9e:	66bb      	str	r3, [r7, #104]	@ 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801daa0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801daa2:	f383 8810 	msr	PRIMASK, r3
}
 801daa6:	46c0      	nop			@ (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 801daa8:	687b      	ldr	r3, [r7, #4]
 801daaa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801daac:	2b00      	cmp	r3, #0
 801daae:	d012      	beq.n	801dad6 <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 801dab0:	687b      	ldr	r3, [r7, #4]
 801dab2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801dab4:	4a17      	ldr	r2, [pc, #92]	@ (801db14 <HAL_UART_IRQHandler+0x2ac>)
 801dab6:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 801dab8:	687b      	ldr	r3, [r7, #4]
 801daba:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801dabc:	0018      	movs	r0, r3
 801dabe:	f7f7 fd0f 	bl	80154e0 <HAL_DMA_Abort_IT>
 801dac2:	1e03      	subs	r3, r0, #0
 801dac4:	d020      	beq.n	801db08 <HAL_UART_IRQHandler+0x2a0>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 801dac6:	687b      	ldr	r3, [r7, #4]
 801dac8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801daca:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801dacc:	687b      	ldr	r3, [r7, #4]
 801dace:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801dad0:	0018      	movs	r0, r3
 801dad2:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801dad4:	e018      	b.n	801db08 <HAL_UART_IRQHandler+0x2a0>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 801dad6:	687b      	ldr	r3, [r7, #4]
 801dad8:	2298      	movs	r2, #152	@ 0x98
 801dada:	589b      	ldr	r3, [r3, r2]
 801dadc:	687a      	ldr	r2, [r7, #4]
 801dade:	0010      	movs	r0, r2
 801dae0:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801dae2:	e011      	b.n	801db08 <HAL_UART_IRQHandler+0x2a0>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 801dae4:	687b      	ldr	r3, [r7, #4]
 801dae6:	2298      	movs	r2, #152	@ 0x98
 801dae8:	589b      	ldr	r3, [r3, r2]
 801daea:	687a      	ldr	r2, [r7, #4]
 801daec:	0010      	movs	r0, r2
 801daee:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801daf0:	e00a      	b.n	801db08 <HAL_UART_IRQHandler+0x2a0>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 801daf2:	687b      	ldr	r3, [r7, #4]
 801daf4:	2298      	movs	r2, #152	@ 0x98
 801daf6:	589b      	ldr	r3, [r3, r2]
 801daf8:	687a      	ldr	r2, [r7, #4]
 801dafa:	0010      	movs	r0, r2
 801dafc:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 801dafe:	687b      	ldr	r3, [r7, #4]
 801db00:	2284      	movs	r2, #132	@ 0x84
 801db02:	2100      	movs	r1, #0
 801db04:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 801db06:	e18d      	b.n	801de24 <HAL_UART_IRQHandler+0x5bc>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801db08:	46c0      	nop			@ (mov r8, r8)
    return;
 801db0a:	e18b      	b.n	801de24 <HAL_UART_IRQHandler+0x5bc>
 801db0c:	0000080f 	.word	0x0000080f
 801db10:	04000120 	.word	0x04000120
 801db14:	0801eeb1 	.word	0x0801eeb1

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801db18:	687b      	ldr	r3, [r7, #4]
 801db1a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801db1c:	2b01      	cmp	r3, #1
 801db1e:	d000      	beq.n	801db22 <HAL_UART_IRQHandler+0x2ba>
 801db20:	e13d      	b.n	801dd9e <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 801db22:	23a4      	movs	r3, #164	@ 0xa4
 801db24:	18fb      	adds	r3, r7, r3
 801db26:	681b      	ldr	r3, [r3, #0]
 801db28:	2210      	movs	r2, #16
 801db2a:	4013      	ands	r3, r2
 801db2c:	d100      	bne.n	801db30 <HAL_UART_IRQHandler+0x2c8>
 801db2e:	e136      	b.n	801dd9e <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 801db30:	23a0      	movs	r3, #160	@ 0xa0
 801db32:	18fb      	adds	r3, r7, r3
 801db34:	681b      	ldr	r3, [r3, #0]
 801db36:	2210      	movs	r2, #16
 801db38:	4013      	ands	r3, r2
 801db3a:	d100      	bne.n	801db3e <HAL_UART_IRQHandler+0x2d6>
 801db3c:	e12f      	b.n	801dd9e <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801db3e:	687b      	ldr	r3, [r7, #4]
 801db40:	681b      	ldr	r3, [r3, #0]
 801db42:	2210      	movs	r2, #16
 801db44:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801db46:	687b      	ldr	r3, [r7, #4]
 801db48:	681b      	ldr	r3, [r3, #0]
 801db4a:	689b      	ldr	r3, [r3, #8]
 801db4c:	2240      	movs	r2, #64	@ 0x40
 801db4e:	4013      	ands	r3, r2
 801db50:	2b40      	cmp	r3, #64	@ 0x40
 801db52:	d000      	beq.n	801db56 <HAL_UART_IRQHandler+0x2ee>
 801db54:	e0a2      	b.n	801dc9c <HAL_UART_IRQHandler+0x434>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 801db56:	687b      	ldr	r3, [r7, #4]
 801db58:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801db5a:	681b      	ldr	r3, [r3, #0]
 801db5c:	685a      	ldr	r2, [r3, #4]
 801db5e:	217e      	movs	r1, #126	@ 0x7e
 801db60:	187b      	adds	r3, r7, r1
 801db62:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 801db64:	187b      	adds	r3, r7, r1
 801db66:	881b      	ldrh	r3, [r3, #0]
 801db68:	2b00      	cmp	r3, #0
 801db6a:	d100      	bne.n	801db6e <HAL_UART_IRQHandler+0x306>
 801db6c:	e15c      	b.n	801de28 <HAL_UART_IRQHandler+0x5c0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 801db6e:	687b      	ldr	r3, [r7, #4]
 801db70:	2258      	movs	r2, #88	@ 0x58
 801db72:	5a9b      	ldrh	r3, [r3, r2]
 801db74:	187a      	adds	r2, r7, r1
 801db76:	8812      	ldrh	r2, [r2, #0]
 801db78:	429a      	cmp	r2, r3
 801db7a:	d300      	bcc.n	801db7e <HAL_UART_IRQHandler+0x316>
 801db7c:	e154      	b.n	801de28 <HAL_UART_IRQHandler+0x5c0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 801db7e:	687b      	ldr	r3, [r7, #4]
 801db80:	187a      	adds	r2, r7, r1
 801db82:	215a      	movs	r1, #90	@ 0x5a
 801db84:	8812      	ldrh	r2, [r2, #0]
 801db86:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 801db88:	687b      	ldr	r3, [r7, #4]
 801db8a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801db8c:	681b      	ldr	r3, [r3, #0]
 801db8e:	681b      	ldr	r3, [r3, #0]
 801db90:	2220      	movs	r2, #32
 801db92:	4013      	ands	r3, r2
 801db94:	d16f      	bne.n	801dc76 <HAL_UART_IRQHandler+0x40e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801db96:	f3ef 8310 	mrs	r3, PRIMASK
 801db9a:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 801db9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801db9e:	67bb      	str	r3, [r7, #120]	@ 0x78
 801dba0:	2301      	movs	r3, #1
 801dba2:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801dba4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801dba6:	f383 8810 	msr	PRIMASK, r3
}
 801dbaa:	46c0      	nop			@ (mov r8, r8)
 801dbac:	687b      	ldr	r3, [r7, #4]
 801dbae:	681b      	ldr	r3, [r3, #0]
 801dbb0:	681a      	ldr	r2, [r3, #0]
 801dbb2:	687b      	ldr	r3, [r7, #4]
 801dbb4:	681b      	ldr	r3, [r3, #0]
 801dbb6:	49a0      	ldr	r1, [pc, #640]	@ (801de38 <HAL_UART_IRQHandler+0x5d0>)
 801dbb8:	400a      	ands	r2, r1
 801dbba:	601a      	str	r2, [r3, #0]
 801dbbc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801dbbe:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801dbc0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801dbc2:	f383 8810 	msr	PRIMASK, r3
}
 801dbc6:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801dbc8:	f3ef 8310 	mrs	r3, PRIMASK
 801dbcc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 801dbce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801dbd0:	677b      	str	r3, [r7, #116]	@ 0x74
 801dbd2:	2301      	movs	r3, #1
 801dbd4:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801dbd6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801dbd8:	f383 8810 	msr	PRIMASK, r3
}
 801dbdc:	46c0      	nop			@ (mov r8, r8)
 801dbde:	687b      	ldr	r3, [r7, #4]
 801dbe0:	681b      	ldr	r3, [r3, #0]
 801dbe2:	689a      	ldr	r2, [r3, #8]
 801dbe4:	687b      	ldr	r3, [r7, #4]
 801dbe6:	681b      	ldr	r3, [r3, #0]
 801dbe8:	2101      	movs	r1, #1
 801dbea:	438a      	bics	r2, r1
 801dbec:	609a      	str	r2, [r3, #8]
 801dbee:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 801dbf0:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801dbf2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801dbf4:	f383 8810 	msr	PRIMASK, r3
}
 801dbf8:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801dbfa:	f3ef 8310 	mrs	r3, PRIMASK
 801dbfe:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 801dc00:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801dc02:	673b      	str	r3, [r7, #112]	@ 0x70
 801dc04:	2301      	movs	r3, #1
 801dc06:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801dc08:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801dc0a:	f383 8810 	msr	PRIMASK, r3
}
 801dc0e:	46c0      	nop			@ (mov r8, r8)
 801dc10:	687b      	ldr	r3, [r7, #4]
 801dc12:	681b      	ldr	r3, [r3, #0]
 801dc14:	689a      	ldr	r2, [r3, #8]
 801dc16:	687b      	ldr	r3, [r7, #4]
 801dc18:	681b      	ldr	r3, [r3, #0]
 801dc1a:	2140      	movs	r1, #64	@ 0x40
 801dc1c:	438a      	bics	r2, r1
 801dc1e:	609a      	str	r2, [r3, #8]
 801dc20:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801dc22:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801dc24:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801dc26:	f383 8810 	msr	PRIMASK, r3
}
 801dc2a:	46c0      	nop			@ (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 801dc2c:	687b      	ldr	r3, [r7, #4]
 801dc2e:	2280      	movs	r2, #128	@ 0x80
 801dc30:	2120      	movs	r1, #32
 801dc32:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801dc34:	687b      	ldr	r3, [r7, #4]
 801dc36:	2200      	movs	r2, #0
 801dc38:	661a      	str	r2, [r3, #96]	@ 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801dc3a:	f3ef 8310 	mrs	r3, PRIMASK
 801dc3e:	657b      	str	r3, [r7, #84]	@ 0x54
  return(result);
 801dc40:	6d7b      	ldr	r3, [r7, #84]	@ 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801dc42:	66fb      	str	r3, [r7, #108]	@ 0x6c
 801dc44:	2301      	movs	r3, #1
 801dc46:	65bb      	str	r3, [r7, #88]	@ 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801dc48:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801dc4a:	f383 8810 	msr	PRIMASK, r3
}
 801dc4e:	46c0      	nop			@ (mov r8, r8)
 801dc50:	687b      	ldr	r3, [r7, #4]
 801dc52:	681b      	ldr	r3, [r3, #0]
 801dc54:	681a      	ldr	r2, [r3, #0]
 801dc56:	687b      	ldr	r3, [r7, #4]
 801dc58:	681b      	ldr	r3, [r3, #0]
 801dc5a:	2110      	movs	r1, #16
 801dc5c:	438a      	bics	r2, r1
 801dc5e:	601a      	str	r2, [r3, #0]
 801dc60:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801dc62:	65fb      	str	r3, [r7, #92]	@ 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801dc64:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801dc66:	f383 8810 	msr	PRIMASK, r3
}
 801dc6a:	46c0      	nop			@ (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 801dc6c:	687b      	ldr	r3, [r7, #4]
 801dc6e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801dc70:	0018      	movs	r0, r3
 801dc72:	f7f7 fbf5 	bl	8015460 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 801dc76:	687b      	ldr	r3, [r7, #4]
 801dc78:	2202      	movs	r2, #2
 801dc7a:	665a      	str	r2, [r3, #100]	@ 0x64

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 801dc7c:	687b      	ldr	r3, [r7, #4]
 801dc7e:	22ac      	movs	r2, #172	@ 0xac
 801dc80:	589b      	ldr	r3, [r3, r2]
 801dc82:	687a      	ldr	r2, [r7, #4]
 801dc84:	2158      	movs	r1, #88	@ 0x58
 801dc86:	5a51      	ldrh	r1, [r2, r1]
 801dc88:	687a      	ldr	r2, [r7, #4]
 801dc8a:	205a      	movs	r0, #90	@ 0x5a
 801dc8c:	5a12      	ldrh	r2, [r2, r0]
 801dc8e:	b292      	uxth	r2, r2
 801dc90:	1a8a      	subs	r2, r1, r2
 801dc92:	b291      	uxth	r1, r2
 801dc94:	687a      	ldr	r2, [r7, #4]
 801dc96:	0010      	movs	r0, r2
 801dc98:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 801dc9a:	e0c5      	b.n	801de28 <HAL_UART_IRQHandler+0x5c0>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 801dc9c:	687b      	ldr	r3, [r7, #4]
 801dc9e:	2258      	movs	r2, #88	@ 0x58
 801dca0:	5a99      	ldrh	r1, [r3, r2]
 801dca2:	687b      	ldr	r3, [r7, #4]
 801dca4:	225a      	movs	r2, #90	@ 0x5a
 801dca6:	5a9b      	ldrh	r3, [r3, r2]
 801dca8:	b29a      	uxth	r2, r3
 801dcaa:	208e      	movs	r0, #142	@ 0x8e
 801dcac:	183b      	adds	r3, r7, r0
 801dcae:	1a8a      	subs	r2, r1, r2
 801dcb0:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 801dcb2:	687b      	ldr	r3, [r7, #4]
 801dcb4:	225a      	movs	r2, #90	@ 0x5a
 801dcb6:	5a9b      	ldrh	r3, [r3, r2]
 801dcb8:	b29b      	uxth	r3, r3
 801dcba:	2b00      	cmp	r3, #0
 801dcbc:	d100      	bne.n	801dcc0 <HAL_UART_IRQHandler+0x458>
 801dcbe:	e0b5      	b.n	801de2c <HAL_UART_IRQHandler+0x5c4>
          && (nb_rx_data > 0U))
 801dcc0:	183b      	adds	r3, r7, r0
 801dcc2:	881b      	ldrh	r3, [r3, #0]
 801dcc4:	2b00      	cmp	r3, #0
 801dcc6:	d100      	bne.n	801dcca <HAL_UART_IRQHandler+0x462>
 801dcc8:	e0b0      	b.n	801de2c <HAL_UART_IRQHandler+0x5c4>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801dcca:	f3ef 8310 	mrs	r3, PRIMASK
 801dcce:	60fb      	str	r3, [r7, #12]
  return(result);
 801dcd0:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 801dcd2:	2488      	movs	r4, #136	@ 0x88
 801dcd4:	193a      	adds	r2, r7, r4
 801dcd6:	6013      	str	r3, [r2, #0]
 801dcd8:	2301      	movs	r3, #1
 801dcda:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801dcdc:	693b      	ldr	r3, [r7, #16]
 801dcde:	f383 8810 	msr	PRIMASK, r3
}
 801dce2:	46c0      	nop			@ (mov r8, r8)
 801dce4:	687b      	ldr	r3, [r7, #4]
 801dce6:	681b      	ldr	r3, [r3, #0]
 801dce8:	681a      	ldr	r2, [r3, #0]
 801dcea:	687b      	ldr	r3, [r7, #4]
 801dcec:	681b      	ldr	r3, [r3, #0]
 801dcee:	4953      	ldr	r1, [pc, #332]	@ (801de3c <HAL_UART_IRQHandler+0x5d4>)
 801dcf0:	400a      	ands	r2, r1
 801dcf2:	601a      	str	r2, [r3, #0]
 801dcf4:	193b      	adds	r3, r7, r4
 801dcf6:	681b      	ldr	r3, [r3, #0]
 801dcf8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801dcfa:	697b      	ldr	r3, [r7, #20]
 801dcfc:	f383 8810 	msr	PRIMASK, r3
}
 801dd00:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801dd02:	f3ef 8310 	mrs	r3, PRIMASK
 801dd06:	61bb      	str	r3, [r7, #24]
  return(result);
 801dd08:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801dd0a:	2484      	movs	r4, #132	@ 0x84
 801dd0c:	193a      	adds	r2, r7, r4
 801dd0e:	6013      	str	r3, [r2, #0]
 801dd10:	2301      	movs	r3, #1
 801dd12:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801dd14:	69fb      	ldr	r3, [r7, #28]
 801dd16:	f383 8810 	msr	PRIMASK, r3
}
 801dd1a:	46c0      	nop			@ (mov r8, r8)
 801dd1c:	687b      	ldr	r3, [r7, #4]
 801dd1e:	681b      	ldr	r3, [r3, #0]
 801dd20:	689a      	ldr	r2, [r3, #8]
 801dd22:	687b      	ldr	r3, [r7, #4]
 801dd24:	681b      	ldr	r3, [r3, #0]
 801dd26:	2101      	movs	r1, #1
 801dd28:	438a      	bics	r2, r1
 801dd2a:	609a      	str	r2, [r3, #8]
 801dd2c:	193b      	adds	r3, r7, r4
 801dd2e:	681b      	ldr	r3, [r3, #0]
 801dd30:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801dd32:	6a3b      	ldr	r3, [r7, #32]
 801dd34:	f383 8810 	msr	PRIMASK, r3
}
 801dd38:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 801dd3a:	687b      	ldr	r3, [r7, #4]
 801dd3c:	2280      	movs	r2, #128	@ 0x80
 801dd3e:	2120      	movs	r1, #32
 801dd40:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801dd42:	687b      	ldr	r3, [r7, #4]
 801dd44:	2200      	movs	r2, #0
 801dd46:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 801dd48:	687b      	ldr	r3, [r7, #4]
 801dd4a:	2200      	movs	r2, #0
 801dd4c:	669a      	str	r2, [r3, #104]	@ 0x68
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801dd4e:	f3ef 8310 	mrs	r3, PRIMASK
 801dd52:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 801dd54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801dd56:	2480      	movs	r4, #128	@ 0x80
 801dd58:	193a      	adds	r2, r7, r4
 801dd5a:	6013      	str	r3, [r2, #0]
 801dd5c:	2301      	movs	r3, #1
 801dd5e:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801dd60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801dd62:	f383 8810 	msr	PRIMASK, r3
}
 801dd66:	46c0      	nop			@ (mov r8, r8)
 801dd68:	687b      	ldr	r3, [r7, #4]
 801dd6a:	681b      	ldr	r3, [r3, #0]
 801dd6c:	681a      	ldr	r2, [r3, #0]
 801dd6e:	687b      	ldr	r3, [r7, #4]
 801dd70:	681b      	ldr	r3, [r3, #0]
 801dd72:	2110      	movs	r1, #16
 801dd74:	438a      	bics	r2, r1
 801dd76:	601a      	str	r2, [r3, #0]
 801dd78:	193b      	adds	r3, r7, r4
 801dd7a:	681b      	ldr	r3, [r3, #0]
 801dd7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801dd7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801dd80:	f383 8810 	msr	PRIMASK, r3
}
 801dd84:	46c0      	nop			@ (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 801dd86:	687b      	ldr	r3, [r7, #4]
 801dd88:	2202      	movs	r2, #2
 801dd8a:	665a      	str	r2, [r3, #100]	@ 0x64

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 801dd8c:	687b      	ldr	r3, [r7, #4]
 801dd8e:	22ac      	movs	r2, #172	@ 0xac
 801dd90:	589b      	ldr	r3, [r3, r2]
 801dd92:	183a      	adds	r2, r7, r0
 801dd94:	8811      	ldrh	r1, [r2, #0]
 801dd96:	687a      	ldr	r2, [r7, #4]
 801dd98:	0010      	movs	r0, r2
 801dd9a:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 801dd9c:	e046      	b.n	801de2c <HAL_UART_IRQHandler+0x5c4>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 801dd9e:	23a4      	movs	r3, #164	@ 0xa4
 801dda0:	18fb      	adds	r3, r7, r3
 801dda2:	681a      	ldr	r2, [r3, #0]
 801dda4:	2380      	movs	r3, #128	@ 0x80
 801dda6:	035b      	lsls	r3, r3, #13
 801dda8:	4013      	ands	r3, r2
 801ddaa:	d012      	beq.n	801ddd2 <HAL_UART_IRQHandler+0x56a>
 801ddac:	239c      	movs	r3, #156	@ 0x9c
 801ddae:	18fb      	adds	r3, r7, r3
 801ddb0:	681a      	ldr	r2, [r3, #0]
 801ddb2:	2380      	movs	r3, #128	@ 0x80
 801ddb4:	03db      	lsls	r3, r3, #15
 801ddb6:	4013      	ands	r3, r2
 801ddb8:	d00b      	beq.n	801ddd2 <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 801ddba:	687b      	ldr	r3, [r7, #4]
 801ddbc:	681b      	ldr	r3, [r3, #0]
 801ddbe:	2280      	movs	r2, #128	@ 0x80
 801ddc0:	0352      	lsls	r2, r2, #13
 801ddc2:	621a      	str	r2, [r3, #32]
    /* UART Rx state is not reset as a reception process might be ongoing.
       If UART handle state fields need to be reset to READY, this could be done in Wakeup callback */

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
 801ddc4:	687b      	ldr	r3, [r7, #4]
 801ddc6:	22a8      	movs	r2, #168	@ 0xa8
 801ddc8:	589b      	ldr	r3, [r3, r2]
 801ddca:	687a      	ldr	r2, [r7, #4]
 801ddcc:	0010      	movs	r0, r2
 801ddce:	4798      	blx	r3
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 801ddd0:	e02f      	b.n	801de32 <HAL_UART_IRQHandler+0x5ca>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 801ddd2:	23a4      	movs	r3, #164	@ 0xa4
 801ddd4:	18fb      	adds	r3, r7, r3
 801ddd6:	681b      	ldr	r3, [r3, #0]
 801ddd8:	2280      	movs	r2, #128	@ 0x80
 801ddda:	4013      	ands	r3, r2
 801dddc:	d00f      	beq.n	801ddfe <HAL_UART_IRQHandler+0x596>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 801ddde:	23a0      	movs	r3, #160	@ 0xa0
 801dde0:	18fb      	adds	r3, r7, r3
 801dde2:	681b      	ldr	r3, [r3, #0]
 801dde4:	2280      	movs	r2, #128	@ 0x80
 801dde6:	4013      	ands	r3, r2
 801dde8:	d009      	beq.n	801ddfe <HAL_UART_IRQHandler+0x596>
  {
    if (huart->TxISR != NULL)
 801ddea:	687b      	ldr	r3, [r7, #4]
 801ddec:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801ddee:	2b00      	cmp	r3, #0
 801ddf0:	d01e      	beq.n	801de30 <HAL_UART_IRQHandler+0x5c8>
    {
      huart->TxISR(huart);
 801ddf2:	687b      	ldr	r3, [r7, #4]
 801ddf4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801ddf6:	687a      	ldr	r2, [r7, #4]
 801ddf8:	0010      	movs	r0, r2
 801ddfa:	4798      	blx	r3
    }
    return;
 801ddfc:	e018      	b.n	801de30 <HAL_UART_IRQHandler+0x5c8>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 801ddfe:	23a4      	movs	r3, #164	@ 0xa4
 801de00:	18fb      	adds	r3, r7, r3
 801de02:	681b      	ldr	r3, [r3, #0]
 801de04:	2240      	movs	r2, #64	@ 0x40
 801de06:	4013      	ands	r3, r2
 801de08:	d013      	beq.n	801de32 <HAL_UART_IRQHandler+0x5ca>
 801de0a:	23a0      	movs	r3, #160	@ 0xa0
 801de0c:	18fb      	adds	r3, r7, r3
 801de0e:	681b      	ldr	r3, [r3, #0]
 801de10:	2240      	movs	r2, #64	@ 0x40
 801de12:	4013      	ands	r3, r2
 801de14:	d00d      	beq.n	801de32 <HAL_UART_IRQHandler+0x5ca>
  {
    UART_EndTransmit_IT(huart);
 801de16:	687b      	ldr	r3, [r7, #4]
 801de18:	0018      	movs	r0, r3
 801de1a:	f001 f862 	bl	801eee2 <UART_EndTransmit_IT>
    return;
 801de1e:	e008      	b.n	801de32 <HAL_UART_IRQHandler+0x5ca>
      return;
 801de20:	46c0      	nop			@ (mov r8, r8)
 801de22:	e006      	b.n	801de32 <HAL_UART_IRQHandler+0x5ca>
    return;
 801de24:	46c0      	nop			@ (mov r8, r8)
 801de26:	e004      	b.n	801de32 <HAL_UART_IRQHandler+0x5ca>
      return;
 801de28:	46c0      	nop			@ (mov r8, r8)
 801de2a:	e002      	b.n	801de32 <HAL_UART_IRQHandler+0x5ca>
      return;
 801de2c:	46c0      	nop			@ (mov r8, r8)
 801de2e:	e000      	b.n	801de32 <HAL_UART_IRQHandler+0x5ca>
    return;
 801de30:	46c0      	nop			@ (mov r8, r8)
  }

}
 801de32:	46bd      	mov	sp, r7
 801de34:	b02b      	add	sp, #172	@ 0xac
 801de36:	bd90      	pop	{r4, r7, pc}
 801de38:	fffffeff 	.word	0xfffffeff
 801de3c:	fffffedf 	.word	0xfffffedf

0801de40 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 801de40:	b580      	push	{r7, lr}
 801de42:	b082      	sub	sp, #8
 801de44:	af00      	add	r7, sp, #0
 801de46:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 801de48:	46c0      	nop			@ (mov r8, r8)
 801de4a:	46bd      	mov	sp, r7
 801de4c:	b002      	add	sp, #8
 801de4e:	bd80      	pop	{r7, pc}

0801de50 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 801de50:	b580      	push	{r7, lr}
 801de52:	b082      	sub	sp, #8
 801de54:	af00      	add	r7, sp, #0
 801de56:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 801de58:	46c0      	nop			@ (mov r8, r8)
 801de5a:	46bd      	mov	sp, r7
 801de5c:	b002      	add	sp, #8
 801de5e:	bd80      	pop	{r7, pc}

0801de60 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 801de60:	b580      	push	{r7, lr}
 801de62:	b082      	sub	sp, #8
 801de64:	af00      	add	r7, sp, #0
 801de66:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 801de68:	46c0      	nop			@ (mov r8, r8)
 801de6a:	46bd      	mov	sp, r7
 801de6c:	b002      	add	sp, #8
 801de6e:	bd80      	pop	{r7, pc}

0801de70 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 801de70:	b580      	push	{r7, lr}
 801de72:	b082      	sub	sp, #8
 801de74:	af00      	add	r7, sp, #0
 801de76:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 801de78:	46c0      	nop			@ (mov r8, r8)
 801de7a:	46bd      	mov	sp, r7
 801de7c:	b002      	add	sp, #8
 801de7e:	bd80      	pop	{r7, pc}

0801de80 <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 801de80:	b580      	push	{r7, lr}
 801de82:	b082      	sub	sp, #8
 801de84:	af00      	add	r7, sp, #0
 801de86:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 801de88:	46c0      	nop			@ (mov r8, r8)
 801de8a:	46bd      	mov	sp, r7
 801de8c:	b002      	add	sp, #8
 801de8e:	bd80      	pop	{r7, pc}

0801de90 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 801de90:	b580      	push	{r7, lr}
 801de92:	b082      	sub	sp, #8
 801de94:	af00      	add	r7, sp, #0
 801de96:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 801de98:	46c0      	nop			@ (mov r8, r8)
 801de9a:	46bd      	mov	sp, r7
 801de9c:	b002      	add	sp, #8
 801de9e:	bd80      	pop	{r7, pc}

0801dea0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 801dea0:	b580      	push	{r7, lr}
 801dea2:	b082      	sub	sp, #8
 801dea4:	af00      	add	r7, sp, #0
 801dea6:	6078      	str	r0, [r7, #4]
 801dea8:	000a      	movs	r2, r1
 801deaa:	1cbb      	adds	r3, r7, #2
 801deac:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 801deae:	46c0      	nop			@ (mov r8, r8)
 801deb0:	46bd      	mov	sp, r7
 801deb2:	b002      	add	sp, #8
 801deb4:	bd80      	pop	{r7, pc}
	...

0801deb8 <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 801deb8:	b580      	push	{r7, lr}
 801deba:	b082      	sub	sp, #8
 801debc:	af00      	add	r7, sp, #0
 801debe:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 801dec0:	687b      	ldr	r3, [r7, #4]
 801dec2:	2188      	movs	r1, #136	@ 0x88
 801dec4:	4a14      	ldr	r2, [pc, #80]	@ (801df18 <UART_InitCallbacksToDefault+0x60>)
 801dec6:	505a      	str	r2, [r3, r1]
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 801dec8:	687b      	ldr	r3, [r7, #4]
 801deca:	218c      	movs	r1, #140	@ 0x8c
 801decc:	4a13      	ldr	r2, [pc, #76]	@ (801df1c <UART_InitCallbacksToDefault+0x64>)
 801dece:	505a      	str	r2, [r3, r1]
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 801ded0:	687b      	ldr	r3, [r7, #4]
 801ded2:	2190      	movs	r1, #144	@ 0x90
 801ded4:	4a12      	ldr	r2, [pc, #72]	@ (801df20 <UART_InitCallbacksToDefault+0x68>)
 801ded6:	505a      	str	r2, [r3, r1]
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 801ded8:	687b      	ldr	r3, [r7, #4]
 801deda:	2194      	movs	r1, #148	@ 0x94
 801dedc:	4a11      	ldr	r2, [pc, #68]	@ (801df24 <UART_InitCallbacksToDefault+0x6c>)
 801dede:	505a      	str	r2, [r3, r1]
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 801dee0:	687b      	ldr	r3, [r7, #4]
 801dee2:	2198      	movs	r1, #152	@ 0x98
 801dee4:	4a10      	ldr	r2, [pc, #64]	@ (801df28 <UART_InitCallbacksToDefault+0x70>)
 801dee6:	505a      	str	r2, [r3, r1]
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 801dee8:	687b      	ldr	r3, [r7, #4]
 801deea:	219c      	movs	r1, #156	@ 0x9c
 801deec:	4a0f      	ldr	r2, [pc, #60]	@ (801df2c <UART_InitCallbacksToDefault+0x74>)
 801deee:	505a      	str	r2, [r3, r1]
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 801def0:	687b      	ldr	r3, [r7, #4]
 801def2:	21a0      	movs	r1, #160	@ 0xa0
 801def4:	4a0e      	ldr	r2, [pc, #56]	@ (801df30 <UART_InitCallbacksToDefault+0x78>)
 801def6:	505a      	str	r2, [r3, r1]
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 801def8:	687b      	ldr	r3, [r7, #4]
 801defa:	21a4      	movs	r1, #164	@ 0xa4
 801defc:	4a0d      	ldr	r2, [pc, #52]	@ (801df34 <UART_InitCallbacksToDefault+0x7c>)
 801defe:	505a      	str	r2, [r3, r1]
  huart->WakeupCallback            = HAL_UARTEx_WakeupCallback;          /* Legacy weak WakeupCallback            */
 801df00:	687b      	ldr	r3, [r7, #4]
 801df02:	21a8      	movs	r1, #168	@ 0xa8
 801df04:	4a0c      	ldr	r2, [pc, #48]	@ (801df38 <UART_InitCallbacksToDefault+0x80>)
 801df06:	505a      	str	r2, [r3, r1]
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 801df08:	687b      	ldr	r3, [r7, #4]
 801df0a:	21ac      	movs	r1, #172	@ 0xac
 801df0c:	4a0b      	ldr	r2, [pc, #44]	@ (801df3c <UART_InitCallbacksToDefault+0x84>)
 801df0e:	505a      	str	r2, [r3, r1]

}
 801df10:	46c0      	nop			@ (mov r8, r8)
 801df12:	46bd      	mov	sp, r7
 801df14:	b002      	add	sp, #8
 801df16:	bd80      	pop	{r7, pc}
 801df18:	0801de51 	.word	0x0801de51
 801df1c:	0801de41 	.word	0x0801de41
 801df20:	0801de61 	.word	0x0801de61
 801df24:	0800d33d 	.word	0x0800d33d
 801df28:	0800511d 	.word	0x0800511d
 801df2c:	0801de71 	.word	0x0801de71
 801df30:	0801de81 	.word	0x0801de81
 801df34:	0801de91 	.word	0x0801de91
 801df38:	0801f2d5 	.word	0x0801f2d5
 801df3c:	0801dea1 	.word	0x0801dea1

0801df40 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 801df40:	b5b0      	push	{r4, r5, r7, lr}
 801df42:	b08e      	sub	sp, #56	@ 0x38
 801df44:	af00      	add	r7, sp, #0
 801df46:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 801df48:	231a      	movs	r3, #26
 801df4a:	2218      	movs	r2, #24
 801df4c:	189b      	adds	r3, r3, r2
 801df4e:	19db      	adds	r3, r3, r7
 801df50:	2200      	movs	r2, #0
 801df52:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 801df54:	69fb      	ldr	r3, [r7, #28]
 801df56:	689a      	ldr	r2, [r3, #8]
 801df58:	69fb      	ldr	r3, [r7, #28]
 801df5a:	691b      	ldr	r3, [r3, #16]
 801df5c:	431a      	orrs	r2, r3
 801df5e:	69fb      	ldr	r3, [r7, #28]
 801df60:	695b      	ldr	r3, [r3, #20]
 801df62:	431a      	orrs	r2, r3
 801df64:	69fb      	ldr	r3, [r7, #28]
 801df66:	69db      	ldr	r3, [r3, #28]
 801df68:	4313      	orrs	r3, r2
 801df6a:	637b      	str	r3, [r7, #52]	@ 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 801df6c:	69fb      	ldr	r3, [r7, #28]
 801df6e:	681b      	ldr	r3, [r3, #0]
 801df70:	681b      	ldr	r3, [r3, #0]
 801df72:	4ac3      	ldr	r2, [pc, #780]	@ (801e280 <UART_SetConfig+0x340>)
 801df74:	4013      	ands	r3, r2
 801df76:	0019      	movs	r1, r3
 801df78:	69fb      	ldr	r3, [r7, #28]
 801df7a:	681b      	ldr	r3, [r3, #0]
 801df7c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801df7e:	430a      	orrs	r2, r1
 801df80:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 801df82:	69fb      	ldr	r3, [r7, #28]
 801df84:	681b      	ldr	r3, [r3, #0]
 801df86:	685b      	ldr	r3, [r3, #4]
 801df88:	4abe      	ldr	r2, [pc, #760]	@ (801e284 <UART_SetConfig+0x344>)
 801df8a:	4013      	ands	r3, r2
 801df8c:	0019      	movs	r1, r3
 801df8e:	69fb      	ldr	r3, [r7, #28]
 801df90:	68da      	ldr	r2, [r3, #12]
 801df92:	69fb      	ldr	r3, [r7, #28]
 801df94:	681b      	ldr	r3, [r3, #0]
 801df96:	430a      	orrs	r2, r1
 801df98:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 801df9a:	69fb      	ldr	r3, [r7, #28]
 801df9c:	699b      	ldr	r3, [r3, #24]
 801df9e:	637b      	str	r3, [r7, #52]	@ 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 801dfa0:	69fb      	ldr	r3, [r7, #28]
 801dfa2:	681b      	ldr	r3, [r3, #0]
 801dfa4:	4ab8      	ldr	r2, [pc, #736]	@ (801e288 <UART_SetConfig+0x348>)
 801dfa6:	4293      	cmp	r3, r2
 801dfa8:	d004      	beq.n	801dfb4 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 801dfaa:	69fb      	ldr	r3, [r7, #28]
 801dfac:	6a1b      	ldr	r3, [r3, #32]
 801dfae:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801dfb0:	4313      	orrs	r3, r2
 801dfb2:	637b      	str	r3, [r7, #52]	@ 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 801dfb4:	69fb      	ldr	r3, [r7, #28]
 801dfb6:	681b      	ldr	r3, [r3, #0]
 801dfb8:	689b      	ldr	r3, [r3, #8]
 801dfba:	4ab4      	ldr	r2, [pc, #720]	@ (801e28c <UART_SetConfig+0x34c>)
 801dfbc:	4013      	ands	r3, r2
 801dfbe:	0019      	movs	r1, r3
 801dfc0:	69fb      	ldr	r3, [r7, #28]
 801dfc2:	681b      	ldr	r3, [r3, #0]
 801dfc4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801dfc6:	430a      	orrs	r2, r1
 801dfc8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 801dfca:	69fb      	ldr	r3, [r7, #28]
 801dfcc:	681b      	ldr	r3, [r3, #0]
 801dfce:	4ab0      	ldr	r2, [pc, #704]	@ (801e290 <UART_SetConfig+0x350>)
 801dfd0:	4293      	cmp	r3, r2
 801dfd2:	d131      	bne.n	801e038 <UART_SetConfig+0xf8>
 801dfd4:	4baf      	ldr	r3, [pc, #700]	@ (801e294 <UART_SetConfig+0x354>)
 801dfd6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801dfd8:	2203      	movs	r2, #3
 801dfda:	4013      	ands	r3, r2
 801dfdc:	2b03      	cmp	r3, #3
 801dfde:	d01d      	beq.n	801e01c <UART_SetConfig+0xdc>
 801dfe0:	d823      	bhi.n	801e02a <UART_SetConfig+0xea>
 801dfe2:	2b02      	cmp	r3, #2
 801dfe4:	d00c      	beq.n	801e000 <UART_SetConfig+0xc0>
 801dfe6:	d820      	bhi.n	801e02a <UART_SetConfig+0xea>
 801dfe8:	2b00      	cmp	r3, #0
 801dfea:	d002      	beq.n	801dff2 <UART_SetConfig+0xb2>
 801dfec:	2b01      	cmp	r3, #1
 801dfee:	d00e      	beq.n	801e00e <UART_SetConfig+0xce>
 801dff0:	e01b      	b.n	801e02a <UART_SetConfig+0xea>
 801dff2:	231b      	movs	r3, #27
 801dff4:	2218      	movs	r2, #24
 801dff6:	189b      	adds	r3, r3, r2
 801dff8:	19db      	adds	r3, r3, r7
 801dffa:	2201      	movs	r2, #1
 801dffc:	701a      	strb	r2, [r3, #0]
 801dffe:	e0b4      	b.n	801e16a <UART_SetConfig+0x22a>
 801e000:	231b      	movs	r3, #27
 801e002:	2218      	movs	r2, #24
 801e004:	189b      	adds	r3, r3, r2
 801e006:	19db      	adds	r3, r3, r7
 801e008:	2202      	movs	r2, #2
 801e00a:	701a      	strb	r2, [r3, #0]
 801e00c:	e0ad      	b.n	801e16a <UART_SetConfig+0x22a>
 801e00e:	231b      	movs	r3, #27
 801e010:	2218      	movs	r2, #24
 801e012:	189b      	adds	r3, r3, r2
 801e014:	19db      	adds	r3, r3, r7
 801e016:	2204      	movs	r2, #4
 801e018:	701a      	strb	r2, [r3, #0]
 801e01a:	e0a6      	b.n	801e16a <UART_SetConfig+0x22a>
 801e01c:	231b      	movs	r3, #27
 801e01e:	2218      	movs	r2, #24
 801e020:	189b      	adds	r3, r3, r2
 801e022:	19db      	adds	r3, r3, r7
 801e024:	2208      	movs	r2, #8
 801e026:	701a      	strb	r2, [r3, #0]
 801e028:	e09f      	b.n	801e16a <UART_SetConfig+0x22a>
 801e02a:	231b      	movs	r3, #27
 801e02c:	2218      	movs	r2, #24
 801e02e:	189b      	adds	r3, r3, r2
 801e030:	19db      	adds	r3, r3, r7
 801e032:	2210      	movs	r2, #16
 801e034:	701a      	strb	r2, [r3, #0]
 801e036:	e098      	b.n	801e16a <UART_SetConfig+0x22a>
 801e038:	69fb      	ldr	r3, [r7, #28]
 801e03a:	681b      	ldr	r3, [r3, #0]
 801e03c:	4a96      	ldr	r2, [pc, #600]	@ (801e298 <UART_SetConfig+0x358>)
 801e03e:	4293      	cmp	r3, r2
 801e040:	d131      	bne.n	801e0a6 <UART_SetConfig+0x166>
 801e042:	4b94      	ldr	r3, [pc, #592]	@ (801e294 <UART_SetConfig+0x354>)
 801e044:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801e046:	220c      	movs	r2, #12
 801e048:	4013      	ands	r3, r2
 801e04a:	2b0c      	cmp	r3, #12
 801e04c:	d01d      	beq.n	801e08a <UART_SetConfig+0x14a>
 801e04e:	d823      	bhi.n	801e098 <UART_SetConfig+0x158>
 801e050:	2b08      	cmp	r3, #8
 801e052:	d00c      	beq.n	801e06e <UART_SetConfig+0x12e>
 801e054:	d820      	bhi.n	801e098 <UART_SetConfig+0x158>
 801e056:	2b00      	cmp	r3, #0
 801e058:	d002      	beq.n	801e060 <UART_SetConfig+0x120>
 801e05a:	2b04      	cmp	r3, #4
 801e05c:	d00e      	beq.n	801e07c <UART_SetConfig+0x13c>
 801e05e:	e01b      	b.n	801e098 <UART_SetConfig+0x158>
 801e060:	231b      	movs	r3, #27
 801e062:	2218      	movs	r2, #24
 801e064:	189b      	adds	r3, r3, r2
 801e066:	19db      	adds	r3, r3, r7
 801e068:	2200      	movs	r2, #0
 801e06a:	701a      	strb	r2, [r3, #0]
 801e06c:	e07d      	b.n	801e16a <UART_SetConfig+0x22a>
 801e06e:	231b      	movs	r3, #27
 801e070:	2218      	movs	r2, #24
 801e072:	189b      	adds	r3, r3, r2
 801e074:	19db      	adds	r3, r3, r7
 801e076:	2202      	movs	r2, #2
 801e078:	701a      	strb	r2, [r3, #0]
 801e07a:	e076      	b.n	801e16a <UART_SetConfig+0x22a>
 801e07c:	231b      	movs	r3, #27
 801e07e:	2218      	movs	r2, #24
 801e080:	189b      	adds	r3, r3, r2
 801e082:	19db      	adds	r3, r3, r7
 801e084:	2204      	movs	r2, #4
 801e086:	701a      	strb	r2, [r3, #0]
 801e088:	e06f      	b.n	801e16a <UART_SetConfig+0x22a>
 801e08a:	231b      	movs	r3, #27
 801e08c:	2218      	movs	r2, #24
 801e08e:	189b      	adds	r3, r3, r2
 801e090:	19db      	adds	r3, r3, r7
 801e092:	2208      	movs	r2, #8
 801e094:	701a      	strb	r2, [r3, #0]
 801e096:	e068      	b.n	801e16a <UART_SetConfig+0x22a>
 801e098:	231b      	movs	r3, #27
 801e09a:	2218      	movs	r2, #24
 801e09c:	189b      	adds	r3, r3, r2
 801e09e:	19db      	adds	r3, r3, r7
 801e0a0:	2210      	movs	r2, #16
 801e0a2:	701a      	strb	r2, [r3, #0]
 801e0a4:	e061      	b.n	801e16a <UART_SetConfig+0x22a>
 801e0a6:	69fb      	ldr	r3, [r7, #28]
 801e0a8:	681b      	ldr	r3, [r3, #0]
 801e0aa:	4a7c      	ldr	r2, [pc, #496]	@ (801e29c <UART_SetConfig+0x35c>)
 801e0ac:	4293      	cmp	r3, r2
 801e0ae:	d106      	bne.n	801e0be <UART_SetConfig+0x17e>
 801e0b0:	231b      	movs	r3, #27
 801e0b2:	2218      	movs	r2, #24
 801e0b4:	189b      	adds	r3, r3, r2
 801e0b6:	19db      	adds	r3, r3, r7
 801e0b8:	2200      	movs	r2, #0
 801e0ba:	701a      	strb	r2, [r3, #0]
 801e0bc:	e055      	b.n	801e16a <UART_SetConfig+0x22a>
 801e0be:	69fb      	ldr	r3, [r7, #28]
 801e0c0:	681b      	ldr	r3, [r3, #0]
 801e0c2:	4a77      	ldr	r2, [pc, #476]	@ (801e2a0 <UART_SetConfig+0x360>)
 801e0c4:	4293      	cmp	r3, r2
 801e0c6:	d106      	bne.n	801e0d6 <UART_SetConfig+0x196>
 801e0c8:	231b      	movs	r3, #27
 801e0ca:	2218      	movs	r2, #24
 801e0cc:	189b      	adds	r3, r3, r2
 801e0ce:	19db      	adds	r3, r3, r7
 801e0d0:	2200      	movs	r2, #0
 801e0d2:	701a      	strb	r2, [r3, #0]
 801e0d4:	e049      	b.n	801e16a <UART_SetConfig+0x22a>
 801e0d6:	69fb      	ldr	r3, [r7, #28]
 801e0d8:	681b      	ldr	r3, [r3, #0]
 801e0da:	4a6b      	ldr	r2, [pc, #428]	@ (801e288 <UART_SetConfig+0x348>)
 801e0dc:	4293      	cmp	r3, r2
 801e0de:	d13e      	bne.n	801e15e <UART_SetConfig+0x21e>
 801e0e0:	4b6c      	ldr	r3, [pc, #432]	@ (801e294 <UART_SetConfig+0x354>)
 801e0e2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 801e0e4:	23c0      	movs	r3, #192	@ 0xc0
 801e0e6:	011b      	lsls	r3, r3, #4
 801e0e8:	4013      	ands	r3, r2
 801e0ea:	22c0      	movs	r2, #192	@ 0xc0
 801e0ec:	0112      	lsls	r2, r2, #4
 801e0ee:	4293      	cmp	r3, r2
 801e0f0:	d027      	beq.n	801e142 <UART_SetConfig+0x202>
 801e0f2:	22c0      	movs	r2, #192	@ 0xc0
 801e0f4:	0112      	lsls	r2, r2, #4
 801e0f6:	4293      	cmp	r3, r2
 801e0f8:	d82a      	bhi.n	801e150 <UART_SetConfig+0x210>
 801e0fa:	2280      	movs	r2, #128	@ 0x80
 801e0fc:	0112      	lsls	r2, r2, #4
 801e0fe:	4293      	cmp	r3, r2
 801e100:	d011      	beq.n	801e126 <UART_SetConfig+0x1e6>
 801e102:	2280      	movs	r2, #128	@ 0x80
 801e104:	0112      	lsls	r2, r2, #4
 801e106:	4293      	cmp	r3, r2
 801e108:	d822      	bhi.n	801e150 <UART_SetConfig+0x210>
 801e10a:	2b00      	cmp	r3, #0
 801e10c:	d004      	beq.n	801e118 <UART_SetConfig+0x1d8>
 801e10e:	2280      	movs	r2, #128	@ 0x80
 801e110:	00d2      	lsls	r2, r2, #3
 801e112:	4293      	cmp	r3, r2
 801e114:	d00e      	beq.n	801e134 <UART_SetConfig+0x1f4>
 801e116:	e01b      	b.n	801e150 <UART_SetConfig+0x210>
 801e118:	231b      	movs	r3, #27
 801e11a:	2218      	movs	r2, #24
 801e11c:	189b      	adds	r3, r3, r2
 801e11e:	19db      	adds	r3, r3, r7
 801e120:	2200      	movs	r2, #0
 801e122:	701a      	strb	r2, [r3, #0]
 801e124:	e021      	b.n	801e16a <UART_SetConfig+0x22a>
 801e126:	231b      	movs	r3, #27
 801e128:	2218      	movs	r2, #24
 801e12a:	189b      	adds	r3, r3, r2
 801e12c:	19db      	adds	r3, r3, r7
 801e12e:	2202      	movs	r2, #2
 801e130:	701a      	strb	r2, [r3, #0]
 801e132:	e01a      	b.n	801e16a <UART_SetConfig+0x22a>
 801e134:	231b      	movs	r3, #27
 801e136:	2218      	movs	r2, #24
 801e138:	189b      	adds	r3, r3, r2
 801e13a:	19db      	adds	r3, r3, r7
 801e13c:	2204      	movs	r2, #4
 801e13e:	701a      	strb	r2, [r3, #0]
 801e140:	e013      	b.n	801e16a <UART_SetConfig+0x22a>
 801e142:	231b      	movs	r3, #27
 801e144:	2218      	movs	r2, #24
 801e146:	189b      	adds	r3, r3, r2
 801e148:	19db      	adds	r3, r3, r7
 801e14a:	2208      	movs	r2, #8
 801e14c:	701a      	strb	r2, [r3, #0]
 801e14e:	e00c      	b.n	801e16a <UART_SetConfig+0x22a>
 801e150:	231b      	movs	r3, #27
 801e152:	2218      	movs	r2, #24
 801e154:	189b      	adds	r3, r3, r2
 801e156:	19db      	adds	r3, r3, r7
 801e158:	2210      	movs	r2, #16
 801e15a:	701a      	strb	r2, [r3, #0]
 801e15c:	e005      	b.n	801e16a <UART_SetConfig+0x22a>
 801e15e:	231b      	movs	r3, #27
 801e160:	2218      	movs	r2, #24
 801e162:	189b      	adds	r3, r3, r2
 801e164:	19db      	adds	r3, r3, r7
 801e166:	2210      	movs	r2, #16
 801e168:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 801e16a:	69fb      	ldr	r3, [r7, #28]
 801e16c:	681b      	ldr	r3, [r3, #0]
 801e16e:	4a46      	ldr	r2, [pc, #280]	@ (801e288 <UART_SetConfig+0x348>)
 801e170:	4293      	cmp	r3, r2
 801e172:	d000      	beq.n	801e176 <UART_SetConfig+0x236>
 801e174:	e09a      	b.n	801e2ac <UART_SetConfig+0x36c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 801e176:	231b      	movs	r3, #27
 801e178:	2218      	movs	r2, #24
 801e17a:	189b      	adds	r3, r3, r2
 801e17c:	19db      	adds	r3, r3, r7
 801e17e:	781b      	ldrb	r3, [r3, #0]
 801e180:	2b08      	cmp	r3, #8
 801e182:	d01d      	beq.n	801e1c0 <UART_SetConfig+0x280>
 801e184:	dc20      	bgt.n	801e1c8 <UART_SetConfig+0x288>
 801e186:	2b04      	cmp	r3, #4
 801e188:	d015      	beq.n	801e1b6 <UART_SetConfig+0x276>
 801e18a:	dc1d      	bgt.n	801e1c8 <UART_SetConfig+0x288>
 801e18c:	2b00      	cmp	r3, #0
 801e18e:	d002      	beq.n	801e196 <UART_SetConfig+0x256>
 801e190:	2b02      	cmp	r3, #2
 801e192:	d005      	beq.n	801e1a0 <UART_SetConfig+0x260>
 801e194:	e018      	b.n	801e1c8 <UART_SetConfig+0x288>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 801e196:	f7fd fe2d 	bl	801bdf4 <HAL_RCC_GetPCLK1Freq>
 801e19a:	0003      	movs	r3, r0
 801e19c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801e19e:	e01c      	b.n	801e1da <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801e1a0:	4b3c      	ldr	r3, [pc, #240]	@ (801e294 <UART_SetConfig+0x354>)
 801e1a2:	681b      	ldr	r3, [r3, #0]
 801e1a4:	2210      	movs	r2, #16
 801e1a6:	4013      	ands	r3, r2
 801e1a8:	d002      	beq.n	801e1b0 <UART_SetConfig+0x270>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 801e1aa:	4b3e      	ldr	r3, [pc, #248]	@ (801e2a4 <UART_SetConfig+0x364>)
 801e1ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 801e1ae:	e014      	b.n	801e1da <UART_SetConfig+0x29a>
          pclk = (uint32_t) HSI_VALUE;
 801e1b0:	4b3d      	ldr	r3, [pc, #244]	@ (801e2a8 <UART_SetConfig+0x368>)
 801e1b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801e1b4:	e011      	b.n	801e1da <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 801e1b6:	f7fd fd6d 	bl	801bc94 <HAL_RCC_GetSysClockFreq>
 801e1ba:	0003      	movs	r3, r0
 801e1bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801e1be:	e00c      	b.n	801e1da <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801e1c0:	2380      	movs	r3, #128	@ 0x80
 801e1c2:	021b      	lsls	r3, r3, #8
 801e1c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801e1c6:	e008      	b.n	801e1da <UART_SetConfig+0x29a>
      default:
        pclk = 0U;
 801e1c8:	2300      	movs	r3, #0
 801e1ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 801e1cc:	231a      	movs	r3, #26
 801e1ce:	2218      	movs	r2, #24
 801e1d0:	189b      	adds	r3, r3, r2
 801e1d2:	19db      	adds	r3, r3, r7
 801e1d4:	2201      	movs	r2, #1
 801e1d6:	701a      	strb	r2, [r3, #0]
        break;
 801e1d8:	46c0      	nop			@ (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 801e1da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801e1dc:	2b00      	cmp	r3, #0
 801e1de:	d100      	bne.n	801e1e2 <UART_SetConfig+0x2a2>
 801e1e0:	e133      	b.n	801e44a <UART_SetConfig+0x50a>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 801e1e2:	69fb      	ldr	r3, [r7, #28]
 801e1e4:	685a      	ldr	r2, [r3, #4]
 801e1e6:	0013      	movs	r3, r2
 801e1e8:	005b      	lsls	r3, r3, #1
 801e1ea:	189b      	adds	r3, r3, r2
 801e1ec:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801e1ee:	429a      	cmp	r2, r3
 801e1f0:	d305      	bcc.n	801e1fe <UART_SetConfig+0x2be>
          (pclk > (4096U * huart->Init.BaudRate)))
 801e1f2:	69fb      	ldr	r3, [r7, #28]
 801e1f4:	685b      	ldr	r3, [r3, #4]
 801e1f6:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 801e1f8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801e1fa:	429a      	cmp	r2, r3
 801e1fc:	d906      	bls.n	801e20c <UART_SetConfig+0x2cc>
      {
        ret = HAL_ERROR;
 801e1fe:	231a      	movs	r3, #26
 801e200:	2218      	movs	r2, #24
 801e202:	189b      	adds	r3, r3, r2
 801e204:	19db      	adds	r3, r3, r7
 801e206:	2201      	movs	r2, #1
 801e208:	701a      	strb	r2, [r3, #0]
 801e20a:	e11e      	b.n	801e44a <UART_SetConfig+0x50a>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 801e20c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801e20e:	613b      	str	r3, [r7, #16]
 801e210:	2300      	movs	r3, #0
 801e212:	617b      	str	r3, [r7, #20]
 801e214:	6939      	ldr	r1, [r7, #16]
 801e216:	697a      	ldr	r2, [r7, #20]
 801e218:	000b      	movs	r3, r1
 801e21a:	0e1b      	lsrs	r3, r3, #24
 801e21c:	0010      	movs	r0, r2
 801e21e:	0205      	lsls	r5, r0, #8
 801e220:	431d      	orrs	r5, r3
 801e222:	000b      	movs	r3, r1
 801e224:	021c      	lsls	r4, r3, #8
 801e226:	69fb      	ldr	r3, [r7, #28]
 801e228:	685b      	ldr	r3, [r3, #4]
 801e22a:	085b      	lsrs	r3, r3, #1
 801e22c:	60bb      	str	r3, [r7, #8]
 801e22e:	2300      	movs	r3, #0
 801e230:	60fb      	str	r3, [r7, #12]
 801e232:	68b8      	ldr	r0, [r7, #8]
 801e234:	68f9      	ldr	r1, [r7, #12]
 801e236:	1900      	adds	r0, r0, r4
 801e238:	4169      	adcs	r1, r5
 801e23a:	69fb      	ldr	r3, [r7, #28]
 801e23c:	685b      	ldr	r3, [r3, #4]
 801e23e:	603b      	str	r3, [r7, #0]
 801e240:	2300      	movs	r3, #0
 801e242:	607b      	str	r3, [r7, #4]
 801e244:	683a      	ldr	r2, [r7, #0]
 801e246:	687b      	ldr	r3, [r7, #4]
 801e248:	f7e2 f99a 	bl	8000580 <__aeabi_uldivmod>
 801e24c:	0002      	movs	r2, r0
 801e24e:	000b      	movs	r3, r1
 801e250:	0013      	movs	r3, r2
 801e252:	62bb      	str	r3, [r7, #40]	@ 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 801e254:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801e256:	23c0      	movs	r3, #192	@ 0xc0
 801e258:	009b      	lsls	r3, r3, #2
 801e25a:	429a      	cmp	r2, r3
 801e25c:	d309      	bcc.n	801e272 <UART_SetConfig+0x332>
 801e25e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801e260:	2380      	movs	r3, #128	@ 0x80
 801e262:	035b      	lsls	r3, r3, #13
 801e264:	429a      	cmp	r2, r3
 801e266:	d204      	bcs.n	801e272 <UART_SetConfig+0x332>
        {
          huart->Instance->BRR = usartdiv;
 801e268:	69fb      	ldr	r3, [r7, #28]
 801e26a:	681b      	ldr	r3, [r3, #0]
 801e26c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801e26e:	60da      	str	r2, [r3, #12]
 801e270:	e0eb      	b.n	801e44a <UART_SetConfig+0x50a>
        }
        else
        {
          ret = HAL_ERROR;
 801e272:	231a      	movs	r3, #26
 801e274:	2218      	movs	r2, #24
 801e276:	189b      	adds	r3, r3, r2
 801e278:	19db      	adds	r3, r3, r7
 801e27a:	2201      	movs	r2, #1
 801e27c:	701a      	strb	r2, [r3, #0]
 801e27e:	e0e4      	b.n	801e44a <UART_SetConfig+0x50a>
 801e280:	efff69f3 	.word	0xefff69f3
 801e284:	ffffcfff 	.word	0xffffcfff
 801e288:	40004800 	.word	0x40004800
 801e28c:	fffff4ff 	.word	0xfffff4ff
 801e290:	40013800 	.word	0x40013800
 801e294:	40021000 	.word	0x40021000
 801e298:	40004400 	.word	0x40004400
 801e29c:	40004c00 	.word	0x40004c00
 801e2a0:	40005000 	.word	0x40005000
 801e2a4:	003d0900 	.word	0x003d0900
 801e2a8:	00f42400 	.word	0x00f42400
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 801e2ac:	69fb      	ldr	r3, [r7, #28]
 801e2ae:	69da      	ldr	r2, [r3, #28]
 801e2b0:	2380      	movs	r3, #128	@ 0x80
 801e2b2:	021b      	lsls	r3, r3, #8
 801e2b4:	429a      	cmp	r2, r3
 801e2b6:	d000      	beq.n	801e2ba <UART_SetConfig+0x37a>
 801e2b8:	e070      	b.n	801e39c <UART_SetConfig+0x45c>
  {
    switch (clocksource)
 801e2ba:	231b      	movs	r3, #27
 801e2bc:	2218      	movs	r2, #24
 801e2be:	189b      	adds	r3, r3, r2
 801e2c0:	19db      	adds	r3, r3, r7
 801e2c2:	781b      	ldrb	r3, [r3, #0]
 801e2c4:	2b08      	cmp	r3, #8
 801e2c6:	d822      	bhi.n	801e30e <UART_SetConfig+0x3ce>
 801e2c8:	009a      	lsls	r2, r3, #2
 801e2ca:	4b67      	ldr	r3, [pc, #412]	@ (801e468 <UART_SetConfig+0x528>)
 801e2cc:	18d3      	adds	r3, r2, r3
 801e2ce:	681b      	ldr	r3, [r3, #0]
 801e2d0:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 801e2d2:	f7fd fd8f 	bl	801bdf4 <HAL_RCC_GetPCLK1Freq>
 801e2d6:	0003      	movs	r3, r0
 801e2d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801e2da:	e021      	b.n	801e320 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 801e2dc:	f7fd fda0 	bl	801be20 <HAL_RCC_GetPCLK2Freq>
 801e2e0:	0003      	movs	r3, r0
 801e2e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801e2e4:	e01c      	b.n	801e320 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801e2e6:	4b61      	ldr	r3, [pc, #388]	@ (801e46c <UART_SetConfig+0x52c>)
 801e2e8:	681b      	ldr	r3, [r3, #0]
 801e2ea:	2210      	movs	r2, #16
 801e2ec:	4013      	ands	r3, r2
 801e2ee:	d002      	beq.n	801e2f6 <UART_SetConfig+0x3b6>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 801e2f0:	4b5f      	ldr	r3, [pc, #380]	@ (801e470 <UART_SetConfig+0x530>)
 801e2f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 801e2f4:	e014      	b.n	801e320 <UART_SetConfig+0x3e0>
          pclk = (uint32_t) HSI_VALUE;
 801e2f6:	4b5f      	ldr	r3, [pc, #380]	@ (801e474 <UART_SetConfig+0x534>)
 801e2f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801e2fa:	e011      	b.n	801e320 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 801e2fc:	f7fd fcca 	bl	801bc94 <HAL_RCC_GetSysClockFreq>
 801e300:	0003      	movs	r3, r0
 801e302:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801e304:	e00c      	b.n	801e320 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801e306:	2380      	movs	r3, #128	@ 0x80
 801e308:	021b      	lsls	r3, r3, #8
 801e30a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801e30c:	e008      	b.n	801e320 <UART_SetConfig+0x3e0>
      default:
        pclk = 0U;
 801e30e:	2300      	movs	r3, #0
 801e310:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 801e312:	231a      	movs	r3, #26
 801e314:	2218      	movs	r2, #24
 801e316:	189b      	adds	r3, r3, r2
 801e318:	19db      	adds	r3, r3, r7
 801e31a:	2201      	movs	r2, #1
 801e31c:	701a      	strb	r2, [r3, #0]
        break;
 801e31e:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 801e320:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801e322:	2b00      	cmp	r3, #0
 801e324:	d100      	bne.n	801e328 <UART_SetConfig+0x3e8>
 801e326:	e090      	b.n	801e44a <UART_SetConfig+0x50a>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 801e328:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801e32a:	005a      	lsls	r2, r3, #1
 801e32c:	69fb      	ldr	r3, [r7, #28]
 801e32e:	685b      	ldr	r3, [r3, #4]
 801e330:	085b      	lsrs	r3, r3, #1
 801e332:	18d2      	adds	r2, r2, r3
 801e334:	69fb      	ldr	r3, [r7, #28]
 801e336:	685b      	ldr	r3, [r3, #4]
 801e338:	0019      	movs	r1, r3
 801e33a:	0010      	movs	r0, r2
 801e33c:	f7e1 ff32 	bl	80001a4 <__udivsi3>
 801e340:	0003      	movs	r3, r0
 801e342:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 801e344:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801e346:	2b0f      	cmp	r3, #15
 801e348:	d921      	bls.n	801e38e <UART_SetConfig+0x44e>
 801e34a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801e34c:	2380      	movs	r3, #128	@ 0x80
 801e34e:	025b      	lsls	r3, r3, #9
 801e350:	429a      	cmp	r2, r3
 801e352:	d21c      	bcs.n	801e38e <UART_SetConfig+0x44e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 801e354:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801e356:	b29a      	uxth	r2, r3
 801e358:	200e      	movs	r0, #14
 801e35a:	2418      	movs	r4, #24
 801e35c:	1903      	adds	r3, r0, r4
 801e35e:	19db      	adds	r3, r3, r7
 801e360:	210f      	movs	r1, #15
 801e362:	438a      	bics	r2, r1
 801e364:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 801e366:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801e368:	085b      	lsrs	r3, r3, #1
 801e36a:	b29b      	uxth	r3, r3
 801e36c:	2207      	movs	r2, #7
 801e36e:	4013      	ands	r3, r2
 801e370:	b299      	uxth	r1, r3
 801e372:	1903      	adds	r3, r0, r4
 801e374:	19db      	adds	r3, r3, r7
 801e376:	1902      	adds	r2, r0, r4
 801e378:	19d2      	adds	r2, r2, r7
 801e37a:	8812      	ldrh	r2, [r2, #0]
 801e37c:	430a      	orrs	r2, r1
 801e37e:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 801e380:	69fb      	ldr	r3, [r7, #28]
 801e382:	681b      	ldr	r3, [r3, #0]
 801e384:	1902      	adds	r2, r0, r4
 801e386:	19d2      	adds	r2, r2, r7
 801e388:	8812      	ldrh	r2, [r2, #0]
 801e38a:	60da      	str	r2, [r3, #12]
 801e38c:	e05d      	b.n	801e44a <UART_SetConfig+0x50a>
      }
      else
      {
        ret = HAL_ERROR;
 801e38e:	231a      	movs	r3, #26
 801e390:	2218      	movs	r2, #24
 801e392:	189b      	adds	r3, r3, r2
 801e394:	19db      	adds	r3, r3, r7
 801e396:	2201      	movs	r2, #1
 801e398:	701a      	strb	r2, [r3, #0]
 801e39a:	e056      	b.n	801e44a <UART_SetConfig+0x50a>
      }
    }
  }
  else
  {
    switch (clocksource)
 801e39c:	231b      	movs	r3, #27
 801e39e:	2218      	movs	r2, #24
 801e3a0:	189b      	adds	r3, r3, r2
 801e3a2:	19db      	adds	r3, r3, r7
 801e3a4:	781b      	ldrb	r3, [r3, #0]
 801e3a6:	2b08      	cmp	r3, #8
 801e3a8:	d822      	bhi.n	801e3f0 <UART_SetConfig+0x4b0>
 801e3aa:	009a      	lsls	r2, r3, #2
 801e3ac:	4b32      	ldr	r3, [pc, #200]	@ (801e478 <UART_SetConfig+0x538>)
 801e3ae:	18d3      	adds	r3, r2, r3
 801e3b0:	681b      	ldr	r3, [r3, #0]
 801e3b2:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 801e3b4:	f7fd fd1e 	bl	801bdf4 <HAL_RCC_GetPCLK1Freq>
 801e3b8:	0003      	movs	r3, r0
 801e3ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801e3bc:	e021      	b.n	801e402 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 801e3be:	f7fd fd2f 	bl	801be20 <HAL_RCC_GetPCLK2Freq>
 801e3c2:	0003      	movs	r3, r0
 801e3c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801e3c6:	e01c      	b.n	801e402 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801e3c8:	4b28      	ldr	r3, [pc, #160]	@ (801e46c <UART_SetConfig+0x52c>)
 801e3ca:	681b      	ldr	r3, [r3, #0]
 801e3cc:	2210      	movs	r2, #16
 801e3ce:	4013      	ands	r3, r2
 801e3d0:	d002      	beq.n	801e3d8 <UART_SetConfig+0x498>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 801e3d2:	4b27      	ldr	r3, [pc, #156]	@ (801e470 <UART_SetConfig+0x530>)
 801e3d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 801e3d6:	e014      	b.n	801e402 <UART_SetConfig+0x4c2>
          pclk = (uint32_t) HSI_VALUE;
 801e3d8:	4b26      	ldr	r3, [pc, #152]	@ (801e474 <UART_SetConfig+0x534>)
 801e3da:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801e3dc:	e011      	b.n	801e402 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 801e3de:	f7fd fc59 	bl	801bc94 <HAL_RCC_GetSysClockFreq>
 801e3e2:	0003      	movs	r3, r0
 801e3e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801e3e6:	e00c      	b.n	801e402 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801e3e8:	2380      	movs	r3, #128	@ 0x80
 801e3ea:	021b      	lsls	r3, r3, #8
 801e3ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801e3ee:	e008      	b.n	801e402 <UART_SetConfig+0x4c2>
      default:
        pclk = 0U;
 801e3f0:	2300      	movs	r3, #0
 801e3f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 801e3f4:	231a      	movs	r3, #26
 801e3f6:	2218      	movs	r2, #24
 801e3f8:	189b      	adds	r3, r3, r2
 801e3fa:	19db      	adds	r3, r3, r7
 801e3fc:	2201      	movs	r2, #1
 801e3fe:	701a      	strb	r2, [r3, #0]
        break;
 801e400:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 801e402:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801e404:	2b00      	cmp	r3, #0
 801e406:	d020      	beq.n	801e44a <UART_SetConfig+0x50a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 801e408:	69fb      	ldr	r3, [r7, #28]
 801e40a:	685b      	ldr	r3, [r3, #4]
 801e40c:	085a      	lsrs	r2, r3, #1
 801e40e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801e410:	18d2      	adds	r2, r2, r3
 801e412:	69fb      	ldr	r3, [r7, #28]
 801e414:	685b      	ldr	r3, [r3, #4]
 801e416:	0019      	movs	r1, r3
 801e418:	0010      	movs	r0, r2
 801e41a:	f7e1 fec3 	bl	80001a4 <__udivsi3>
 801e41e:	0003      	movs	r3, r0
 801e420:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 801e422:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801e424:	2b0f      	cmp	r3, #15
 801e426:	d90a      	bls.n	801e43e <UART_SetConfig+0x4fe>
 801e428:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801e42a:	2380      	movs	r3, #128	@ 0x80
 801e42c:	025b      	lsls	r3, r3, #9
 801e42e:	429a      	cmp	r2, r3
 801e430:	d205      	bcs.n	801e43e <UART_SetConfig+0x4fe>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 801e432:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801e434:	b29a      	uxth	r2, r3
 801e436:	69fb      	ldr	r3, [r7, #28]
 801e438:	681b      	ldr	r3, [r3, #0]
 801e43a:	60da      	str	r2, [r3, #12]
 801e43c:	e005      	b.n	801e44a <UART_SetConfig+0x50a>
      }
      else
      {
        ret = HAL_ERROR;
 801e43e:	231a      	movs	r3, #26
 801e440:	2218      	movs	r2, #24
 801e442:	189b      	adds	r3, r3, r2
 801e444:	19db      	adds	r3, r3, r7
 801e446:	2201      	movs	r2, #1
 801e448:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 801e44a:	69fb      	ldr	r3, [r7, #28]
 801e44c:	2200      	movs	r2, #0
 801e44e:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 801e450:	69fb      	ldr	r3, [r7, #28]
 801e452:	2200      	movs	r2, #0
 801e454:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 801e456:	231a      	movs	r3, #26
 801e458:	2218      	movs	r2, #24
 801e45a:	189b      	adds	r3, r3, r2
 801e45c:	19db      	adds	r3, r3, r7
 801e45e:	781b      	ldrb	r3, [r3, #0]
}
 801e460:	0018      	movs	r0, r3
 801e462:	46bd      	mov	sp, r7
 801e464:	b00e      	add	sp, #56	@ 0x38
 801e466:	bdb0      	pop	{r4, r5, r7, pc}
 801e468:	0802e4f0 	.word	0x0802e4f0
 801e46c:	40021000 	.word	0x40021000
 801e470:	003d0900 	.word	0x003d0900
 801e474:	00f42400 	.word	0x00f42400
 801e478:	0802e514 	.word	0x0802e514

0801e47c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 801e47c:	b580      	push	{r7, lr}
 801e47e:	b082      	sub	sp, #8
 801e480:	af00      	add	r7, sp, #0
 801e482:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 801e484:	687b      	ldr	r3, [r7, #4]
 801e486:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801e488:	2201      	movs	r2, #1
 801e48a:	4013      	ands	r3, r2
 801e48c:	d00b      	beq.n	801e4a6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 801e48e:	687b      	ldr	r3, [r7, #4]
 801e490:	681b      	ldr	r3, [r3, #0]
 801e492:	685b      	ldr	r3, [r3, #4]
 801e494:	4a4a      	ldr	r2, [pc, #296]	@ (801e5c0 <UART_AdvFeatureConfig+0x144>)
 801e496:	4013      	ands	r3, r2
 801e498:	0019      	movs	r1, r3
 801e49a:	687b      	ldr	r3, [r7, #4]
 801e49c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 801e49e:	687b      	ldr	r3, [r7, #4]
 801e4a0:	681b      	ldr	r3, [r3, #0]
 801e4a2:	430a      	orrs	r2, r1
 801e4a4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 801e4a6:	687b      	ldr	r3, [r7, #4]
 801e4a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801e4aa:	2202      	movs	r2, #2
 801e4ac:	4013      	ands	r3, r2
 801e4ae:	d00b      	beq.n	801e4c8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 801e4b0:	687b      	ldr	r3, [r7, #4]
 801e4b2:	681b      	ldr	r3, [r3, #0]
 801e4b4:	685b      	ldr	r3, [r3, #4]
 801e4b6:	4a43      	ldr	r2, [pc, #268]	@ (801e5c4 <UART_AdvFeatureConfig+0x148>)
 801e4b8:	4013      	ands	r3, r2
 801e4ba:	0019      	movs	r1, r3
 801e4bc:	687b      	ldr	r3, [r7, #4]
 801e4be:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801e4c0:	687b      	ldr	r3, [r7, #4]
 801e4c2:	681b      	ldr	r3, [r3, #0]
 801e4c4:	430a      	orrs	r2, r1
 801e4c6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 801e4c8:	687b      	ldr	r3, [r7, #4]
 801e4ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801e4cc:	2204      	movs	r2, #4
 801e4ce:	4013      	ands	r3, r2
 801e4d0:	d00b      	beq.n	801e4ea <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 801e4d2:	687b      	ldr	r3, [r7, #4]
 801e4d4:	681b      	ldr	r3, [r3, #0]
 801e4d6:	685b      	ldr	r3, [r3, #4]
 801e4d8:	4a3b      	ldr	r2, [pc, #236]	@ (801e5c8 <UART_AdvFeatureConfig+0x14c>)
 801e4da:	4013      	ands	r3, r2
 801e4dc:	0019      	movs	r1, r3
 801e4de:	687b      	ldr	r3, [r7, #4]
 801e4e0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 801e4e2:	687b      	ldr	r3, [r7, #4]
 801e4e4:	681b      	ldr	r3, [r3, #0]
 801e4e6:	430a      	orrs	r2, r1
 801e4e8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 801e4ea:	687b      	ldr	r3, [r7, #4]
 801e4ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801e4ee:	2208      	movs	r2, #8
 801e4f0:	4013      	ands	r3, r2
 801e4f2:	d00b      	beq.n	801e50c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 801e4f4:	687b      	ldr	r3, [r7, #4]
 801e4f6:	681b      	ldr	r3, [r3, #0]
 801e4f8:	685b      	ldr	r3, [r3, #4]
 801e4fa:	4a34      	ldr	r2, [pc, #208]	@ (801e5cc <UART_AdvFeatureConfig+0x150>)
 801e4fc:	4013      	ands	r3, r2
 801e4fe:	0019      	movs	r1, r3
 801e500:	687b      	ldr	r3, [r7, #4]
 801e502:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801e504:	687b      	ldr	r3, [r7, #4]
 801e506:	681b      	ldr	r3, [r3, #0]
 801e508:	430a      	orrs	r2, r1
 801e50a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 801e50c:	687b      	ldr	r3, [r7, #4]
 801e50e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801e510:	2210      	movs	r2, #16
 801e512:	4013      	ands	r3, r2
 801e514:	d00b      	beq.n	801e52e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 801e516:	687b      	ldr	r3, [r7, #4]
 801e518:	681b      	ldr	r3, [r3, #0]
 801e51a:	689b      	ldr	r3, [r3, #8]
 801e51c:	4a2c      	ldr	r2, [pc, #176]	@ (801e5d0 <UART_AdvFeatureConfig+0x154>)
 801e51e:	4013      	ands	r3, r2
 801e520:	0019      	movs	r1, r3
 801e522:	687b      	ldr	r3, [r7, #4]
 801e524:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801e526:	687b      	ldr	r3, [r7, #4]
 801e528:	681b      	ldr	r3, [r3, #0]
 801e52a:	430a      	orrs	r2, r1
 801e52c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 801e52e:	687b      	ldr	r3, [r7, #4]
 801e530:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801e532:	2220      	movs	r2, #32
 801e534:	4013      	ands	r3, r2
 801e536:	d00b      	beq.n	801e550 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 801e538:	687b      	ldr	r3, [r7, #4]
 801e53a:	681b      	ldr	r3, [r3, #0]
 801e53c:	689b      	ldr	r3, [r3, #8]
 801e53e:	4a25      	ldr	r2, [pc, #148]	@ (801e5d4 <UART_AdvFeatureConfig+0x158>)
 801e540:	4013      	ands	r3, r2
 801e542:	0019      	movs	r1, r3
 801e544:	687b      	ldr	r3, [r7, #4]
 801e546:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 801e548:	687b      	ldr	r3, [r7, #4]
 801e54a:	681b      	ldr	r3, [r3, #0]
 801e54c:	430a      	orrs	r2, r1
 801e54e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 801e550:	687b      	ldr	r3, [r7, #4]
 801e552:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801e554:	2240      	movs	r2, #64	@ 0x40
 801e556:	4013      	ands	r3, r2
 801e558:	d01d      	beq.n	801e596 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 801e55a:	687b      	ldr	r3, [r7, #4]
 801e55c:	681b      	ldr	r3, [r3, #0]
 801e55e:	685b      	ldr	r3, [r3, #4]
 801e560:	4a1d      	ldr	r2, [pc, #116]	@ (801e5d8 <UART_AdvFeatureConfig+0x15c>)
 801e562:	4013      	ands	r3, r2
 801e564:	0019      	movs	r1, r3
 801e566:	687b      	ldr	r3, [r7, #4]
 801e568:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 801e56a:	687b      	ldr	r3, [r7, #4]
 801e56c:	681b      	ldr	r3, [r3, #0]
 801e56e:	430a      	orrs	r2, r1
 801e570:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 801e572:	687b      	ldr	r3, [r7, #4]
 801e574:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 801e576:	2380      	movs	r3, #128	@ 0x80
 801e578:	035b      	lsls	r3, r3, #13
 801e57a:	429a      	cmp	r2, r3
 801e57c:	d10b      	bne.n	801e596 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 801e57e:	687b      	ldr	r3, [r7, #4]
 801e580:	681b      	ldr	r3, [r3, #0]
 801e582:	685b      	ldr	r3, [r3, #4]
 801e584:	4a15      	ldr	r2, [pc, #84]	@ (801e5dc <UART_AdvFeatureConfig+0x160>)
 801e586:	4013      	ands	r3, r2
 801e588:	0019      	movs	r1, r3
 801e58a:	687b      	ldr	r3, [r7, #4]
 801e58c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 801e58e:	687b      	ldr	r3, [r7, #4]
 801e590:	681b      	ldr	r3, [r3, #0]
 801e592:	430a      	orrs	r2, r1
 801e594:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 801e596:	687b      	ldr	r3, [r7, #4]
 801e598:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801e59a:	2280      	movs	r2, #128	@ 0x80
 801e59c:	4013      	ands	r3, r2
 801e59e:	d00b      	beq.n	801e5b8 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 801e5a0:	687b      	ldr	r3, [r7, #4]
 801e5a2:	681b      	ldr	r3, [r3, #0]
 801e5a4:	685b      	ldr	r3, [r3, #4]
 801e5a6:	4a0e      	ldr	r2, [pc, #56]	@ (801e5e0 <UART_AdvFeatureConfig+0x164>)
 801e5a8:	4013      	ands	r3, r2
 801e5aa:	0019      	movs	r1, r3
 801e5ac:	687b      	ldr	r3, [r7, #4]
 801e5ae:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 801e5b0:	687b      	ldr	r3, [r7, #4]
 801e5b2:	681b      	ldr	r3, [r3, #0]
 801e5b4:	430a      	orrs	r2, r1
 801e5b6:	605a      	str	r2, [r3, #4]
  }
}
 801e5b8:	46c0      	nop			@ (mov r8, r8)
 801e5ba:	46bd      	mov	sp, r7
 801e5bc:	b002      	add	sp, #8
 801e5be:	bd80      	pop	{r7, pc}
 801e5c0:	fffdffff 	.word	0xfffdffff
 801e5c4:	fffeffff 	.word	0xfffeffff
 801e5c8:	fffbffff 	.word	0xfffbffff
 801e5cc:	ffff7fff 	.word	0xffff7fff
 801e5d0:	ffffefff 	.word	0xffffefff
 801e5d4:	ffffdfff 	.word	0xffffdfff
 801e5d8:	ffefffff 	.word	0xffefffff
 801e5dc:	ff9fffff 	.word	0xff9fffff
 801e5e0:	fff7ffff 	.word	0xfff7ffff

0801e5e4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 801e5e4:	b580      	push	{r7, lr}
 801e5e6:	b092      	sub	sp, #72	@ 0x48
 801e5e8:	af02      	add	r7, sp, #8
 801e5ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801e5ec:	687b      	ldr	r3, [r7, #4]
 801e5ee:	2284      	movs	r2, #132	@ 0x84
 801e5f0:	2100      	movs	r1, #0
 801e5f2:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 801e5f4:	f7f6 f99a 	bl	801492c <HAL_GetTick>
 801e5f8:	0003      	movs	r3, r0
 801e5fa:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 801e5fc:	687b      	ldr	r3, [r7, #4]
 801e5fe:	681b      	ldr	r3, [r3, #0]
 801e600:	681b      	ldr	r3, [r3, #0]
 801e602:	2208      	movs	r2, #8
 801e604:	4013      	ands	r3, r2
 801e606:	2b08      	cmp	r3, #8
 801e608:	d12c      	bne.n	801e664 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 801e60a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801e60c:	2280      	movs	r2, #128	@ 0x80
 801e60e:	0391      	lsls	r1, r2, #14
 801e610:	6878      	ldr	r0, [r7, #4]
 801e612:	4a46      	ldr	r2, [pc, #280]	@ (801e72c <UART_CheckIdleState+0x148>)
 801e614:	9200      	str	r2, [sp, #0]
 801e616:	2200      	movs	r2, #0
 801e618:	f000 f88c 	bl	801e734 <UART_WaitOnFlagUntilTimeout>
 801e61c:	1e03      	subs	r3, r0, #0
 801e61e:	d021      	beq.n	801e664 <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801e620:	f3ef 8310 	mrs	r3, PRIMASK
 801e624:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 801e626:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 801e628:	63bb      	str	r3, [r7, #56]	@ 0x38
 801e62a:	2301      	movs	r3, #1
 801e62c:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801e62e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801e630:	f383 8810 	msr	PRIMASK, r3
}
 801e634:	46c0      	nop			@ (mov r8, r8)
 801e636:	687b      	ldr	r3, [r7, #4]
 801e638:	681b      	ldr	r3, [r3, #0]
 801e63a:	681a      	ldr	r2, [r3, #0]
 801e63c:	687b      	ldr	r3, [r7, #4]
 801e63e:	681b      	ldr	r3, [r3, #0]
 801e640:	2180      	movs	r1, #128	@ 0x80
 801e642:	438a      	bics	r2, r1
 801e644:	601a      	str	r2, [r3, #0]
 801e646:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801e648:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801e64a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801e64c:	f383 8810 	msr	PRIMASK, r3
}
 801e650:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 801e652:	687b      	ldr	r3, [r7, #4]
 801e654:	2220      	movs	r2, #32
 801e656:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 801e658:	687b      	ldr	r3, [r7, #4]
 801e65a:	2278      	movs	r2, #120	@ 0x78
 801e65c:	2100      	movs	r1, #0
 801e65e:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 801e660:	2303      	movs	r3, #3
 801e662:	e05f      	b.n	801e724 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 801e664:	687b      	ldr	r3, [r7, #4]
 801e666:	681b      	ldr	r3, [r3, #0]
 801e668:	681b      	ldr	r3, [r3, #0]
 801e66a:	2204      	movs	r2, #4
 801e66c:	4013      	ands	r3, r2
 801e66e:	2b04      	cmp	r3, #4
 801e670:	d146      	bne.n	801e700 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 801e672:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801e674:	2280      	movs	r2, #128	@ 0x80
 801e676:	03d1      	lsls	r1, r2, #15
 801e678:	6878      	ldr	r0, [r7, #4]
 801e67a:	4a2c      	ldr	r2, [pc, #176]	@ (801e72c <UART_CheckIdleState+0x148>)
 801e67c:	9200      	str	r2, [sp, #0]
 801e67e:	2200      	movs	r2, #0
 801e680:	f000 f858 	bl	801e734 <UART_WaitOnFlagUntilTimeout>
 801e684:	1e03      	subs	r3, r0, #0
 801e686:	d03b      	beq.n	801e700 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801e688:	f3ef 8310 	mrs	r3, PRIMASK
 801e68c:	60fb      	str	r3, [r7, #12]
  return(result);
 801e68e:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 801e690:	637b      	str	r3, [r7, #52]	@ 0x34
 801e692:	2301      	movs	r3, #1
 801e694:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801e696:	693b      	ldr	r3, [r7, #16]
 801e698:	f383 8810 	msr	PRIMASK, r3
}
 801e69c:	46c0      	nop			@ (mov r8, r8)
 801e69e:	687b      	ldr	r3, [r7, #4]
 801e6a0:	681b      	ldr	r3, [r3, #0]
 801e6a2:	681a      	ldr	r2, [r3, #0]
 801e6a4:	687b      	ldr	r3, [r7, #4]
 801e6a6:	681b      	ldr	r3, [r3, #0]
 801e6a8:	4921      	ldr	r1, [pc, #132]	@ (801e730 <UART_CheckIdleState+0x14c>)
 801e6aa:	400a      	ands	r2, r1
 801e6ac:	601a      	str	r2, [r3, #0]
 801e6ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801e6b0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801e6b2:	697b      	ldr	r3, [r7, #20]
 801e6b4:	f383 8810 	msr	PRIMASK, r3
}
 801e6b8:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801e6ba:	f3ef 8310 	mrs	r3, PRIMASK
 801e6be:	61bb      	str	r3, [r7, #24]
  return(result);
 801e6c0:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801e6c2:	633b      	str	r3, [r7, #48]	@ 0x30
 801e6c4:	2301      	movs	r3, #1
 801e6c6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801e6c8:	69fb      	ldr	r3, [r7, #28]
 801e6ca:	f383 8810 	msr	PRIMASK, r3
}
 801e6ce:	46c0      	nop			@ (mov r8, r8)
 801e6d0:	687b      	ldr	r3, [r7, #4]
 801e6d2:	681b      	ldr	r3, [r3, #0]
 801e6d4:	689a      	ldr	r2, [r3, #8]
 801e6d6:	687b      	ldr	r3, [r7, #4]
 801e6d8:	681b      	ldr	r3, [r3, #0]
 801e6da:	2101      	movs	r1, #1
 801e6dc:	438a      	bics	r2, r1
 801e6de:	609a      	str	r2, [r3, #8]
 801e6e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801e6e2:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801e6e4:	6a3b      	ldr	r3, [r7, #32]
 801e6e6:	f383 8810 	msr	PRIMASK, r3
}
 801e6ea:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 801e6ec:	687b      	ldr	r3, [r7, #4]
 801e6ee:	2280      	movs	r2, #128	@ 0x80
 801e6f0:	2120      	movs	r1, #32
 801e6f2:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 801e6f4:	687b      	ldr	r3, [r7, #4]
 801e6f6:	2278      	movs	r2, #120	@ 0x78
 801e6f8:	2100      	movs	r1, #0
 801e6fa:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 801e6fc:	2303      	movs	r3, #3
 801e6fe:	e011      	b.n	801e724 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 801e700:	687b      	ldr	r3, [r7, #4]
 801e702:	2220      	movs	r2, #32
 801e704:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 801e706:	687b      	ldr	r3, [r7, #4]
 801e708:	2280      	movs	r2, #128	@ 0x80
 801e70a:	2120      	movs	r1, #32
 801e70c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801e70e:	687b      	ldr	r3, [r7, #4]
 801e710:	2200      	movs	r2, #0
 801e712:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 801e714:	687b      	ldr	r3, [r7, #4]
 801e716:	2200      	movs	r2, #0
 801e718:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 801e71a:	687b      	ldr	r3, [r7, #4]
 801e71c:	2278      	movs	r2, #120	@ 0x78
 801e71e:	2100      	movs	r1, #0
 801e720:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 801e722:	2300      	movs	r3, #0
}
 801e724:	0018      	movs	r0, r3
 801e726:	46bd      	mov	sp, r7
 801e728:	b010      	add	sp, #64	@ 0x40
 801e72a:	bd80      	pop	{r7, pc}
 801e72c:	01ffffff 	.word	0x01ffffff
 801e730:	fffffedf 	.word	0xfffffedf

0801e734 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 801e734:	b580      	push	{r7, lr}
 801e736:	b084      	sub	sp, #16
 801e738:	af00      	add	r7, sp, #0
 801e73a:	60f8      	str	r0, [r7, #12]
 801e73c:	60b9      	str	r1, [r7, #8]
 801e73e:	603b      	str	r3, [r7, #0]
 801e740:	1dfb      	adds	r3, r7, #7
 801e742:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801e744:	e04b      	b.n	801e7de <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 801e746:	69bb      	ldr	r3, [r7, #24]
 801e748:	3301      	adds	r3, #1
 801e74a:	d048      	beq.n	801e7de <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801e74c:	f7f6 f8ee 	bl	801492c <HAL_GetTick>
 801e750:	0002      	movs	r2, r0
 801e752:	683b      	ldr	r3, [r7, #0]
 801e754:	1ad3      	subs	r3, r2, r3
 801e756:	69ba      	ldr	r2, [r7, #24]
 801e758:	429a      	cmp	r2, r3
 801e75a:	d302      	bcc.n	801e762 <UART_WaitOnFlagUntilTimeout+0x2e>
 801e75c:	69bb      	ldr	r3, [r7, #24]
 801e75e:	2b00      	cmp	r3, #0
 801e760:	d101      	bne.n	801e766 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 801e762:	2303      	movs	r3, #3
 801e764:	e04b      	b.n	801e7fe <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 801e766:	68fb      	ldr	r3, [r7, #12]
 801e768:	681b      	ldr	r3, [r3, #0]
 801e76a:	681b      	ldr	r3, [r3, #0]
 801e76c:	2204      	movs	r2, #4
 801e76e:	4013      	ands	r3, r2
 801e770:	d035      	beq.n	801e7de <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 801e772:	68fb      	ldr	r3, [r7, #12]
 801e774:	681b      	ldr	r3, [r3, #0]
 801e776:	69db      	ldr	r3, [r3, #28]
 801e778:	2208      	movs	r2, #8
 801e77a:	4013      	ands	r3, r2
 801e77c:	2b08      	cmp	r3, #8
 801e77e:	d111      	bne.n	801e7a4 <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 801e780:	68fb      	ldr	r3, [r7, #12]
 801e782:	681b      	ldr	r3, [r3, #0]
 801e784:	2208      	movs	r2, #8
 801e786:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 801e788:	68fb      	ldr	r3, [r7, #12]
 801e78a:	0018      	movs	r0, r3
 801e78c:	f000 f9ca 	bl	801eb24 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 801e790:	68fb      	ldr	r3, [r7, #12]
 801e792:	2284      	movs	r2, #132	@ 0x84
 801e794:	2108      	movs	r1, #8
 801e796:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 801e798:	68fb      	ldr	r3, [r7, #12]
 801e79a:	2278      	movs	r2, #120	@ 0x78
 801e79c:	2100      	movs	r1, #0
 801e79e:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 801e7a0:	2301      	movs	r3, #1
 801e7a2:	e02c      	b.n	801e7fe <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 801e7a4:	68fb      	ldr	r3, [r7, #12]
 801e7a6:	681b      	ldr	r3, [r3, #0]
 801e7a8:	69da      	ldr	r2, [r3, #28]
 801e7aa:	2380      	movs	r3, #128	@ 0x80
 801e7ac:	011b      	lsls	r3, r3, #4
 801e7ae:	401a      	ands	r2, r3
 801e7b0:	2380      	movs	r3, #128	@ 0x80
 801e7b2:	011b      	lsls	r3, r3, #4
 801e7b4:	429a      	cmp	r2, r3
 801e7b6:	d112      	bne.n	801e7de <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 801e7b8:	68fb      	ldr	r3, [r7, #12]
 801e7ba:	681b      	ldr	r3, [r3, #0]
 801e7bc:	2280      	movs	r2, #128	@ 0x80
 801e7be:	0112      	lsls	r2, r2, #4
 801e7c0:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 801e7c2:	68fb      	ldr	r3, [r7, #12]
 801e7c4:	0018      	movs	r0, r3
 801e7c6:	f000 f9ad 	bl	801eb24 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 801e7ca:	68fb      	ldr	r3, [r7, #12]
 801e7cc:	2284      	movs	r2, #132	@ 0x84
 801e7ce:	2120      	movs	r1, #32
 801e7d0:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 801e7d2:	68fb      	ldr	r3, [r7, #12]
 801e7d4:	2278      	movs	r2, #120	@ 0x78
 801e7d6:	2100      	movs	r1, #0
 801e7d8:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 801e7da:	2303      	movs	r3, #3
 801e7dc:	e00f      	b.n	801e7fe <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801e7de:	68fb      	ldr	r3, [r7, #12]
 801e7e0:	681b      	ldr	r3, [r3, #0]
 801e7e2:	69db      	ldr	r3, [r3, #28]
 801e7e4:	68ba      	ldr	r2, [r7, #8]
 801e7e6:	4013      	ands	r3, r2
 801e7e8:	68ba      	ldr	r2, [r7, #8]
 801e7ea:	1ad3      	subs	r3, r2, r3
 801e7ec:	425a      	negs	r2, r3
 801e7ee:	4153      	adcs	r3, r2
 801e7f0:	b2db      	uxtb	r3, r3
 801e7f2:	001a      	movs	r2, r3
 801e7f4:	1dfb      	adds	r3, r7, #7
 801e7f6:	781b      	ldrb	r3, [r3, #0]
 801e7f8:	429a      	cmp	r2, r3
 801e7fa:	d0a4      	beq.n	801e746 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 801e7fc:	2300      	movs	r3, #0
}
 801e7fe:	0018      	movs	r0, r3
 801e800:	46bd      	mov	sp, r7
 801e802:	b004      	add	sp, #16
 801e804:	bd80      	pop	{r7, pc}
	...

0801e808 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 801e808:	b580      	push	{r7, lr}
 801e80a:	b090      	sub	sp, #64	@ 0x40
 801e80c:	af00      	add	r7, sp, #0
 801e80e:	60f8      	str	r0, [r7, #12]
 801e810:	60b9      	str	r1, [r7, #8]
 801e812:	1dbb      	adds	r3, r7, #6
 801e814:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 801e816:	68fb      	ldr	r3, [r7, #12]
 801e818:	68ba      	ldr	r2, [r7, #8]
 801e81a:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 801e81c:	68fb      	ldr	r3, [r7, #12]
 801e81e:	1dba      	adds	r2, r7, #6
 801e820:	2158      	movs	r1, #88	@ 0x58
 801e822:	8812      	ldrh	r2, [r2, #0]
 801e824:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 801e826:	68fb      	ldr	r3, [r7, #12]
 801e828:	1dba      	adds	r2, r7, #6
 801e82a:	215a      	movs	r1, #90	@ 0x5a
 801e82c:	8812      	ldrh	r2, [r2, #0]
 801e82e:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 801e830:	68fb      	ldr	r3, [r7, #12]
 801e832:	2200      	movs	r2, #0
 801e834:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 801e836:	68fb      	ldr	r3, [r7, #12]
 801e838:	689a      	ldr	r2, [r3, #8]
 801e83a:	2380      	movs	r3, #128	@ 0x80
 801e83c:	015b      	lsls	r3, r3, #5
 801e83e:	429a      	cmp	r2, r3
 801e840:	d10d      	bne.n	801e85e <UART_Start_Receive_IT+0x56>
 801e842:	68fb      	ldr	r3, [r7, #12]
 801e844:	691b      	ldr	r3, [r3, #16]
 801e846:	2b00      	cmp	r3, #0
 801e848:	d104      	bne.n	801e854 <UART_Start_Receive_IT+0x4c>
 801e84a:	68fb      	ldr	r3, [r7, #12]
 801e84c:	225c      	movs	r2, #92	@ 0x5c
 801e84e:	4950      	ldr	r1, [pc, #320]	@ (801e990 <UART_Start_Receive_IT+0x188>)
 801e850:	5299      	strh	r1, [r3, r2]
 801e852:	e02e      	b.n	801e8b2 <UART_Start_Receive_IT+0xaa>
 801e854:	68fb      	ldr	r3, [r7, #12]
 801e856:	225c      	movs	r2, #92	@ 0x5c
 801e858:	21ff      	movs	r1, #255	@ 0xff
 801e85a:	5299      	strh	r1, [r3, r2]
 801e85c:	e029      	b.n	801e8b2 <UART_Start_Receive_IT+0xaa>
 801e85e:	68fb      	ldr	r3, [r7, #12]
 801e860:	689b      	ldr	r3, [r3, #8]
 801e862:	2b00      	cmp	r3, #0
 801e864:	d10d      	bne.n	801e882 <UART_Start_Receive_IT+0x7a>
 801e866:	68fb      	ldr	r3, [r7, #12]
 801e868:	691b      	ldr	r3, [r3, #16]
 801e86a:	2b00      	cmp	r3, #0
 801e86c:	d104      	bne.n	801e878 <UART_Start_Receive_IT+0x70>
 801e86e:	68fb      	ldr	r3, [r7, #12]
 801e870:	225c      	movs	r2, #92	@ 0x5c
 801e872:	21ff      	movs	r1, #255	@ 0xff
 801e874:	5299      	strh	r1, [r3, r2]
 801e876:	e01c      	b.n	801e8b2 <UART_Start_Receive_IT+0xaa>
 801e878:	68fb      	ldr	r3, [r7, #12]
 801e87a:	225c      	movs	r2, #92	@ 0x5c
 801e87c:	217f      	movs	r1, #127	@ 0x7f
 801e87e:	5299      	strh	r1, [r3, r2]
 801e880:	e017      	b.n	801e8b2 <UART_Start_Receive_IT+0xaa>
 801e882:	68fb      	ldr	r3, [r7, #12]
 801e884:	689a      	ldr	r2, [r3, #8]
 801e886:	2380      	movs	r3, #128	@ 0x80
 801e888:	055b      	lsls	r3, r3, #21
 801e88a:	429a      	cmp	r2, r3
 801e88c:	d10d      	bne.n	801e8aa <UART_Start_Receive_IT+0xa2>
 801e88e:	68fb      	ldr	r3, [r7, #12]
 801e890:	691b      	ldr	r3, [r3, #16]
 801e892:	2b00      	cmp	r3, #0
 801e894:	d104      	bne.n	801e8a0 <UART_Start_Receive_IT+0x98>
 801e896:	68fb      	ldr	r3, [r7, #12]
 801e898:	225c      	movs	r2, #92	@ 0x5c
 801e89a:	217f      	movs	r1, #127	@ 0x7f
 801e89c:	5299      	strh	r1, [r3, r2]
 801e89e:	e008      	b.n	801e8b2 <UART_Start_Receive_IT+0xaa>
 801e8a0:	68fb      	ldr	r3, [r7, #12]
 801e8a2:	225c      	movs	r2, #92	@ 0x5c
 801e8a4:	213f      	movs	r1, #63	@ 0x3f
 801e8a6:	5299      	strh	r1, [r3, r2]
 801e8a8:	e003      	b.n	801e8b2 <UART_Start_Receive_IT+0xaa>
 801e8aa:	68fb      	ldr	r3, [r7, #12]
 801e8ac:	225c      	movs	r2, #92	@ 0x5c
 801e8ae:	2100      	movs	r1, #0
 801e8b0:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801e8b2:	68fb      	ldr	r3, [r7, #12]
 801e8b4:	2284      	movs	r2, #132	@ 0x84
 801e8b6:	2100      	movs	r1, #0
 801e8b8:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 801e8ba:	68fb      	ldr	r3, [r7, #12]
 801e8bc:	2280      	movs	r2, #128	@ 0x80
 801e8be:	2122      	movs	r1, #34	@ 0x22
 801e8c0:	5099      	str	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801e8c2:	f3ef 8310 	mrs	r3, PRIMASK
 801e8c6:	62bb      	str	r3, [r7, #40]	@ 0x28
  return(result);
 801e8c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801e8ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801e8cc:	2301      	movs	r3, #1
 801e8ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801e8d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801e8d2:	f383 8810 	msr	PRIMASK, r3
}
 801e8d6:	46c0      	nop			@ (mov r8, r8)
 801e8d8:	68fb      	ldr	r3, [r7, #12]
 801e8da:	681b      	ldr	r3, [r3, #0]
 801e8dc:	689a      	ldr	r2, [r3, #8]
 801e8de:	68fb      	ldr	r3, [r7, #12]
 801e8e0:	681b      	ldr	r3, [r3, #0]
 801e8e2:	2101      	movs	r1, #1
 801e8e4:	430a      	orrs	r2, r1
 801e8e6:	609a      	str	r2, [r3, #8]
 801e8e8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801e8ea:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801e8ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801e8ee:	f383 8810 	msr	PRIMASK, r3
}
 801e8f2:	46c0      	nop			@ (mov r8, r8)

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801e8f4:	68fb      	ldr	r3, [r7, #12]
 801e8f6:	689a      	ldr	r2, [r3, #8]
 801e8f8:	2380      	movs	r3, #128	@ 0x80
 801e8fa:	015b      	lsls	r3, r3, #5
 801e8fc:	429a      	cmp	r2, r3
 801e8fe:	d107      	bne.n	801e910 <UART_Start_Receive_IT+0x108>
 801e900:	68fb      	ldr	r3, [r7, #12]
 801e902:	691b      	ldr	r3, [r3, #16]
 801e904:	2b00      	cmp	r3, #0
 801e906:	d103      	bne.n	801e910 <UART_Start_Receive_IT+0x108>
  {
    huart->RxISR = UART_RxISR_16BIT;
 801e908:	68fb      	ldr	r3, [r7, #12]
 801e90a:	4a22      	ldr	r2, [pc, #136]	@ (801e994 <UART_Start_Receive_IT+0x18c>)
 801e90c:	669a      	str	r2, [r3, #104]	@ 0x68
 801e90e:	e002      	b.n	801e916 <UART_Start_Receive_IT+0x10e>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 801e910:	68fb      	ldr	r3, [r7, #12]
 801e912:	4a21      	ldr	r2, [pc, #132]	@ (801e998 <UART_Start_Receive_IT+0x190>)
 801e914:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 801e916:	68fb      	ldr	r3, [r7, #12]
 801e918:	691b      	ldr	r3, [r3, #16]
 801e91a:	2b00      	cmp	r3, #0
 801e91c:	d019      	beq.n	801e952 <UART_Start_Receive_IT+0x14a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801e91e:	f3ef 8310 	mrs	r3, PRIMASK
 801e922:	61fb      	str	r3, [r7, #28]
  return(result);
 801e924:	69fb      	ldr	r3, [r7, #28]
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 801e926:	637b      	str	r3, [r7, #52]	@ 0x34
 801e928:	2301      	movs	r3, #1
 801e92a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801e92c:	6a3b      	ldr	r3, [r7, #32]
 801e92e:	f383 8810 	msr	PRIMASK, r3
}
 801e932:	46c0      	nop			@ (mov r8, r8)
 801e934:	68fb      	ldr	r3, [r7, #12]
 801e936:	681b      	ldr	r3, [r3, #0]
 801e938:	681a      	ldr	r2, [r3, #0]
 801e93a:	68fb      	ldr	r3, [r7, #12]
 801e93c:	681b      	ldr	r3, [r3, #0]
 801e93e:	2190      	movs	r1, #144	@ 0x90
 801e940:	0049      	lsls	r1, r1, #1
 801e942:	430a      	orrs	r2, r1
 801e944:	601a      	str	r2, [r3, #0]
 801e946:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801e948:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801e94a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801e94c:	f383 8810 	msr	PRIMASK, r3
}
 801e950:	e018      	b.n	801e984 <UART_Start_Receive_IT+0x17c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801e952:	f3ef 8310 	mrs	r3, PRIMASK
 801e956:	613b      	str	r3, [r7, #16]
  return(result);
 801e958:	693b      	ldr	r3, [r7, #16]
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 801e95a:	63bb      	str	r3, [r7, #56]	@ 0x38
 801e95c:	2301      	movs	r3, #1
 801e95e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801e960:	697b      	ldr	r3, [r7, #20]
 801e962:	f383 8810 	msr	PRIMASK, r3
}
 801e966:	46c0      	nop			@ (mov r8, r8)
 801e968:	68fb      	ldr	r3, [r7, #12]
 801e96a:	681b      	ldr	r3, [r3, #0]
 801e96c:	681a      	ldr	r2, [r3, #0]
 801e96e:	68fb      	ldr	r3, [r7, #12]
 801e970:	681b      	ldr	r3, [r3, #0]
 801e972:	2120      	movs	r1, #32
 801e974:	430a      	orrs	r2, r1
 801e976:	601a      	str	r2, [r3, #0]
 801e978:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801e97a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801e97c:	69bb      	ldr	r3, [r7, #24]
 801e97e:	f383 8810 	msr	PRIMASK, r3
}
 801e982:	46c0      	nop			@ (mov r8, r8)
  }
  return HAL_OK;
 801e984:	2300      	movs	r3, #0
}
 801e986:	0018      	movs	r0, r3
 801e988:	46bd      	mov	sp, r7
 801e98a:	b010      	add	sp, #64	@ 0x40
 801e98c:	bd80      	pop	{r7, pc}
 801e98e:	46c0      	nop			@ (mov r8, r8)
 801e990:	000001ff 	.word	0x000001ff
 801e994:	0801f109 	.word	0x0801f109
 801e998:	0801ef3d 	.word	0x0801ef3d

0801e99c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 801e99c:	b580      	push	{r7, lr}
 801e99e:	b090      	sub	sp, #64	@ 0x40
 801e9a0:	af00      	add	r7, sp, #0
 801e9a2:	60f8      	str	r0, [r7, #12]
 801e9a4:	60b9      	str	r1, [r7, #8]
 801e9a6:	1dbb      	adds	r3, r7, #6
 801e9a8:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr = pData;
 801e9aa:	68fb      	ldr	r3, [r7, #12]
 801e9ac:	68ba      	ldr	r2, [r7, #8]
 801e9ae:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize = Size;
 801e9b0:	68fb      	ldr	r3, [r7, #12]
 801e9b2:	1dba      	adds	r2, r7, #6
 801e9b4:	2158      	movs	r1, #88	@ 0x58
 801e9b6:	8812      	ldrh	r2, [r2, #0]
 801e9b8:	525a      	strh	r2, [r3, r1]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801e9ba:	68fb      	ldr	r3, [r7, #12]
 801e9bc:	2284      	movs	r2, #132	@ 0x84
 801e9be:	2100      	movs	r1, #0
 801e9c0:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 801e9c2:	68fb      	ldr	r3, [r7, #12]
 801e9c4:	2280      	movs	r2, #128	@ 0x80
 801e9c6:	2122      	movs	r1, #34	@ 0x22
 801e9c8:	5099      	str	r1, [r3, r2]

  if (huart->hdmarx != NULL)
 801e9ca:	68fb      	ldr	r3, [r7, #12]
 801e9cc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801e9ce:	2b00      	cmp	r3, #0
 801e9d0:	d028      	beq.n	801ea24 <UART_Start_Receive_DMA+0x88>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 801e9d2:	68fb      	ldr	r3, [r7, #12]
 801e9d4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801e9d6:	4a3e      	ldr	r2, [pc, #248]	@ (801ead0 <UART_Start_Receive_DMA+0x134>)
 801e9d8:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 801e9da:	68fb      	ldr	r3, [r7, #12]
 801e9dc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801e9de:	4a3d      	ldr	r2, [pc, #244]	@ (801ead4 <UART_Start_Receive_DMA+0x138>)
 801e9e0:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 801e9e2:	68fb      	ldr	r3, [r7, #12]
 801e9e4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801e9e6:	4a3c      	ldr	r2, [pc, #240]	@ (801ead8 <UART_Start_Receive_DMA+0x13c>)
 801e9e8:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 801e9ea:	68fb      	ldr	r3, [r7, #12]
 801e9ec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801e9ee:	2200      	movs	r2, #0
 801e9f0:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 801e9f2:	68fb      	ldr	r3, [r7, #12]
 801e9f4:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 801e9f6:	68fb      	ldr	r3, [r7, #12]
 801e9f8:	681b      	ldr	r3, [r3, #0]
 801e9fa:	3324      	adds	r3, #36	@ 0x24
 801e9fc:	0019      	movs	r1, r3
 801e9fe:	68fb      	ldr	r3, [r7, #12]
 801ea00:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801ea02:	001a      	movs	r2, r3
 801ea04:	1dbb      	adds	r3, r7, #6
 801ea06:	881b      	ldrh	r3, [r3, #0]
 801ea08:	f7f6 fcc4 	bl	8015394 <HAL_DMA_Start_IT>
 801ea0c:	1e03      	subs	r3, r0, #0
 801ea0e:	d009      	beq.n	801ea24 <UART_Start_Receive_DMA+0x88>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 801ea10:	68fb      	ldr	r3, [r7, #12]
 801ea12:	2284      	movs	r2, #132	@ 0x84
 801ea14:	2110      	movs	r1, #16
 801ea16:	5099      	str	r1, [r3, r2]

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 801ea18:	68fb      	ldr	r3, [r7, #12]
 801ea1a:	2280      	movs	r2, #128	@ 0x80
 801ea1c:	2120      	movs	r1, #32
 801ea1e:	5099      	str	r1, [r3, r2]

      return HAL_ERROR;
 801ea20:	2301      	movs	r3, #1
 801ea22:	e050      	b.n	801eac6 <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 801ea24:	68fb      	ldr	r3, [r7, #12]
 801ea26:	691b      	ldr	r3, [r3, #16]
 801ea28:	2b00      	cmp	r3, #0
 801ea2a:	d019      	beq.n	801ea60 <UART_Start_Receive_DMA+0xc4>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801ea2c:	f3ef 8310 	mrs	r3, PRIMASK
 801ea30:	62bb      	str	r3, [r7, #40]	@ 0x28
  return(result);
 801ea32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801ea34:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801ea36:	2301      	movs	r3, #1
 801ea38:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ea3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801ea3c:	f383 8810 	msr	PRIMASK, r3
}
 801ea40:	46c0      	nop			@ (mov r8, r8)
 801ea42:	68fb      	ldr	r3, [r7, #12]
 801ea44:	681b      	ldr	r3, [r3, #0]
 801ea46:	681a      	ldr	r2, [r3, #0]
 801ea48:	68fb      	ldr	r3, [r7, #12]
 801ea4a:	681b      	ldr	r3, [r3, #0]
 801ea4c:	2180      	movs	r1, #128	@ 0x80
 801ea4e:	0049      	lsls	r1, r1, #1
 801ea50:	430a      	orrs	r2, r1
 801ea52:	601a      	str	r2, [r3, #0]
 801ea54:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801ea56:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ea58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801ea5a:	f383 8810 	msr	PRIMASK, r3
}
 801ea5e:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801ea60:	f3ef 8310 	mrs	r3, PRIMASK
 801ea64:	613b      	str	r3, [r7, #16]
  return(result);
 801ea66:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801ea68:	63bb      	str	r3, [r7, #56]	@ 0x38
 801ea6a:	2301      	movs	r3, #1
 801ea6c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ea6e:	697b      	ldr	r3, [r7, #20]
 801ea70:	f383 8810 	msr	PRIMASK, r3
}
 801ea74:	46c0      	nop			@ (mov r8, r8)
 801ea76:	68fb      	ldr	r3, [r7, #12]
 801ea78:	681b      	ldr	r3, [r3, #0]
 801ea7a:	689a      	ldr	r2, [r3, #8]
 801ea7c:	68fb      	ldr	r3, [r7, #12]
 801ea7e:	681b      	ldr	r3, [r3, #0]
 801ea80:	2101      	movs	r1, #1
 801ea82:	430a      	orrs	r2, r1
 801ea84:	609a      	str	r2, [r3, #8]
 801ea86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801ea88:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ea8a:	69bb      	ldr	r3, [r7, #24]
 801ea8c:	f383 8810 	msr	PRIMASK, r3
}
 801ea90:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801ea92:	f3ef 8310 	mrs	r3, PRIMASK
 801ea96:	61fb      	str	r3, [r7, #28]
  return(result);
 801ea98:	69fb      	ldr	r3, [r7, #28]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801ea9a:	637b      	str	r3, [r7, #52]	@ 0x34
 801ea9c:	2301      	movs	r3, #1
 801ea9e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801eaa0:	6a3b      	ldr	r3, [r7, #32]
 801eaa2:	f383 8810 	msr	PRIMASK, r3
}
 801eaa6:	46c0      	nop			@ (mov r8, r8)
 801eaa8:	68fb      	ldr	r3, [r7, #12]
 801eaaa:	681b      	ldr	r3, [r3, #0]
 801eaac:	689a      	ldr	r2, [r3, #8]
 801eaae:	68fb      	ldr	r3, [r7, #12]
 801eab0:	681b      	ldr	r3, [r3, #0]
 801eab2:	2140      	movs	r1, #64	@ 0x40
 801eab4:	430a      	orrs	r2, r1
 801eab6:	609a      	str	r2, [r3, #8]
 801eab8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801eaba:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801eabc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801eabe:	f383 8810 	msr	PRIMASK, r3
}
 801eac2:	46c0      	nop			@ (mov r8, r8)

  return HAL_OK;
 801eac4:	2300      	movs	r3, #0
}
 801eac6:	0018      	movs	r0, r3
 801eac8:	46bd      	mov	sp, r7
 801eaca:	b010      	add	sp, #64	@ 0x40
 801eacc:	bd80      	pop	{r7, pc}
 801eace:	46c0      	nop			@ (mov r8, r8)
 801ead0:	0801ecad 	.word	0x0801ecad
 801ead4:	0801ede1 	.word	0x0801ede1
 801ead8:	0801ee29 	.word	0x0801ee29

0801eadc <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 801eadc:	b580      	push	{r7, lr}
 801eade:	b086      	sub	sp, #24
 801eae0:	af00      	add	r7, sp, #0
 801eae2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801eae4:	f3ef 8310 	mrs	r3, PRIMASK
 801eae8:	60bb      	str	r3, [r7, #8]
  return(result);
 801eaea:	68bb      	ldr	r3, [r7, #8]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 801eaec:	617b      	str	r3, [r7, #20]
 801eaee:	2301      	movs	r3, #1
 801eaf0:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801eaf2:	68fb      	ldr	r3, [r7, #12]
 801eaf4:	f383 8810 	msr	PRIMASK, r3
}
 801eaf8:	46c0      	nop			@ (mov r8, r8)
 801eafa:	687b      	ldr	r3, [r7, #4]
 801eafc:	681b      	ldr	r3, [r3, #0]
 801eafe:	681a      	ldr	r2, [r3, #0]
 801eb00:	687b      	ldr	r3, [r7, #4]
 801eb02:	681b      	ldr	r3, [r3, #0]
 801eb04:	21c0      	movs	r1, #192	@ 0xc0
 801eb06:	438a      	bics	r2, r1
 801eb08:	601a      	str	r2, [r3, #0]
 801eb0a:	697b      	ldr	r3, [r7, #20]
 801eb0c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801eb0e:	693b      	ldr	r3, [r7, #16]
 801eb10:	f383 8810 	msr	PRIMASK, r3
}
 801eb14:	46c0      	nop			@ (mov r8, r8)

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 801eb16:	687b      	ldr	r3, [r7, #4]
 801eb18:	2220      	movs	r2, #32
 801eb1a:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 801eb1c:	46c0      	nop			@ (mov r8, r8)
 801eb1e:	46bd      	mov	sp, r7
 801eb20:	b006      	add	sp, #24
 801eb22:	bd80      	pop	{r7, pc}

0801eb24 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 801eb24:	b580      	push	{r7, lr}
 801eb26:	b08e      	sub	sp, #56	@ 0x38
 801eb28:	af00      	add	r7, sp, #0
 801eb2a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801eb2c:	f3ef 8310 	mrs	r3, PRIMASK
 801eb30:	617b      	str	r3, [r7, #20]
  return(result);
 801eb32:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 801eb34:	637b      	str	r3, [r7, #52]	@ 0x34
 801eb36:	2301      	movs	r3, #1
 801eb38:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801eb3a:	69bb      	ldr	r3, [r7, #24]
 801eb3c:	f383 8810 	msr	PRIMASK, r3
}
 801eb40:	46c0      	nop			@ (mov r8, r8)
 801eb42:	687b      	ldr	r3, [r7, #4]
 801eb44:	681b      	ldr	r3, [r3, #0]
 801eb46:	681a      	ldr	r2, [r3, #0]
 801eb48:	687b      	ldr	r3, [r7, #4]
 801eb4a:	681b      	ldr	r3, [r3, #0]
 801eb4c:	4926      	ldr	r1, [pc, #152]	@ (801ebe8 <UART_EndRxTransfer+0xc4>)
 801eb4e:	400a      	ands	r2, r1
 801eb50:	601a      	str	r2, [r3, #0]
 801eb52:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801eb54:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801eb56:	69fb      	ldr	r3, [r7, #28]
 801eb58:	f383 8810 	msr	PRIMASK, r3
}
 801eb5c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801eb5e:	f3ef 8310 	mrs	r3, PRIMASK
 801eb62:	623b      	str	r3, [r7, #32]
  return(result);
 801eb64:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801eb66:	633b      	str	r3, [r7, #48]	@ 0x30
 801eb68:	2301      	movs	r3, #1
 801eb6a:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801eb6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801eb6e:	f383 8810 	msr	PRIMASK, r3
}
 801eb72:	46c0      	nop			@ (mov r8, r8)
 801eb74:	687b      	ldr	r3, [r7, #4]
 801eb76:	681b      	ldr	r3, [r3, #0]
 801eb78:	689a      	ldr	r2, [r3, #8]
 801eb7a:	687b      	ldr	r3, [r7, #4]
 801eb7c:	681b      	ldr	r3, [r3, #0]
 801eb7e:	2101      	movs	r1, #1
 801eb80:	438a      	bics	r2, r1
 801eb82:	609a      	str	r2, [r3, #8]
 801eb84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801eb86:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801eb88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801eb8a:	f383 8810 	msr	PRIMASK, r3
}
 801eb8e:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801eb90:	687b      	ldr	r3, [r7, #4]
 801eb92:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801eb94:	2b01      	cmp	r3, #1
 801eb96:	d118      	bne.n	801ebca <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801eb98:	f3ef 8310 	mrs	r3, PRIMASK
 801eb9c:	60bb      	str	r3, [r7, #8]
  return(result);
 801eb9e:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801eba0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801eba2:	2301      	movs	r3, #1
 801eba4:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801eba6:	68fb      	ldr	r3, [r7, #12]
 801eba8:	f383 8810 	msr	PRIMASK, r3
}
 801ebac:	46c0      	nop			@ (mov r8, r8)
 801ebae:	687b      	ldr	r3, [r7, #4]
 801ebb0:	681b      	ldr	r3, [r3, #0]
 801ebb2:	681a      	ldr	r2, [r3, #0]
 801ebb4:	687b      	ldr	r3, [r7, #4]
 801ebb6:	681b      	ldr	r3, [r3, #0]
 801ebb8:	2110      	movs	r1, #16
 801ebba:	438a      	bics	r2, r1
 801ebbc:	601a      	str	r2, [r3, #0]
 801ebbe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801ebc0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ebc2:	693b      	ldr	r3, [r7, #16]
 801ebc4:	f383 8810 	msr	PRIMASK, r3
}
 801ebc8:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 801ebca:	687b      	ldr	r3, [r7, #4]
 801ebcc:	2280      	movs	r2, #128	@ 0x80
 801ebce:	2120      	movs	r1, #32
 801ebd0:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801ebd2:	687b      	ldr	r3, [r7, #4]
 801ebd4:	2200      	movs	r2, #0
 801ebd6:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 801ebd8:	687b      	ldr	r3, [r7, #4]
 801ebda:	2200      	movs	r2, #0
 801ebdc:	669a      	str	r2, [r3, #104]	@ 0x68
}
 801ebde:	46c0      	nop			@ (mov r8, r8)
 801ebe0:	46bd      	mov	sp, r7
 801ebe2:	b00e      	add	sp, #56	@ 0x38
 801ebe4:	bd80      	pop	{r7, pc}
 801ebe6:	46c0      	nop			@ (mov r8, r8)
 801ebe8:	fffffedf 	.word	0xfffffedf

0801ebec <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 801ebec:	b580      	push	{r7, lr}
 801ebee:	b08c      	sub	sp, #48	@ 0x30
 801ebf0:	af00      	add	r7, sp, #0
 801ebf2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801ebf4:	687b      	ldr	r3, [r7, #4]
 801ebf6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801ebf8:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 801ebfa:	687b      	ldr	r3, [r7, #4]
 801ebfc:	681b      	ldr	r3, [r3, #0]
 801ebfe:	681b      	ldr	r3, [r3, #0]
 801ec00:	2220      	movs	r2, #32
 801ec02:	4013      	ands	r3, r2
 801ec04:	d135      	bne.n	801ec72 <UART_DMATransmitCplt+0x86>
  {
    huart->TxXferCount = 0U;
 801ec06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801ec08:	2252      	movs	r2, #82	@ 0x52
 801ec0a:	2100      	movs	r1, #0
 801ec0c:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801ec0e:	f3ef 8310 	mrs	r3, PRIMASK
 801ec12:	60fb      	str	r3, [r7, #12]
  return(result);
 801ec14:	68fb      	ldr	r3, [r7, #12]

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 801ec16:	62bb      	str	r3, [r7, #40]	@ 0x28
 801ec18:	2301      	movs	r3, #1
 801ec1a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ec1c:	693b      	ldr	r3, [r7, #16]
 801ec1e:	f383 8810 	msr	PRIMASK, r3
}
 801ec22:	46c0      	nop			@ (mov r8, r8)
 801ec24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801ec26:	681b      	ldr	r3, [r3, #0]
 801ec28:	689a      	ldr	r2, [r3, #8]
 801ec2a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801ec2c:	681b      	ldr	r3, [r3, #0]
 801ec2e:	2180      	movs	r1, #128	@ 0x80
 801ec30:	438a      	bics	r2, r1
 801ec32:	609a      	str	r2, [r3, #8]
 801ec34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801ec36:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ec38:	697b      	ldr	r3, [r7, #20]
 801ec3a:	f383 8810 	msr	PRIMASK, r3
}
 801ec3e:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801ec40:	f3ef 8310 	mrs	r3, PRIMASK
 801ec44:	61bb      	str	r3, [r7, #24]
  return(result);
 801ec46:	69bb      	ldr	r3, [r7, #24]

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 801ec48:	627b      	str	r3, [r7, #36]	@ 0x24
 801ec4a:	2301      	movs	r3, #1
 801ec4c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ec4e:	69fb      	ldr	r3, [r7, #28]
 801ec50:	f383 8810 	msr	PRIMASK, r3
}
 801ec54:	46c0      	nop			@ (mov r8, r8)
 801ec56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801ec58:	681b      	ldr	r3, [r3, #0]
 801ec5a:	681a      	ldr	r2, [r3, #0]
 801ec5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801ec5e:	681b      	ldr	r3, [r3, #0]
 801ec60:	2140      	movs	r1, #64	@ 0x40
 801ec62:	430a      	orrs	r2, r1
 801ec64:	601a      	str	r2, [r3, #0]
 801ec66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ec68:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ec6a:	6a3b      	ldr	r3, [r7, #32]
 801ec6c:	f383 8810 	msr	PRIMASK, r3
}
 801ec70:	e006      	b.n	801ec80 <UART_DMATransmitCplt+0x94>
  /* DMA Circular mode */
  else
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Tx complete callback*/
    huart->TxCpltCallback(huart);
 801ec72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801ec74:	228c      	movs	r2, #140	@ 0x8c
 801ec76:	589b      	ldr	r3, [r3, r2]
 801ec78:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801ec7a:	0010      	movs	r0, r2
 801ec7c:	4798      	blx	r3
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 801ec7e:	46c0      	nop			@ (mov r8, r8)
 801ec80:	46c0      	nop			@ (mov r8, r8)
 801ec82:	46bd      	mov	sp, r7
 801ec84:	b00c      	add	sp, #48	@ 0x30
 801ec86:	bd80      	pop	{r7, pc}

0801ec88 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 801ec88:	b580      	push	{r7, lr}
 801ec8a:	b084      	sub	sp, #16
 801ec8c:	af00      	add	r7, sp, #0
 801ec8e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801ec90:	687b      	ldr	r3, [r7, #4]
 801ec92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801ec94:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
 801ec96:	68fb      	ldr	r3, [r7, #12]
 801ec98:	2288      	movs	r2, #136	@ 0x88
 801ec9a:	589b      	ldr	r3, [r3, r2]
 801ec9c:	68fa      	ldr	r2, [r7, #12]
 801ec9e:	0010      	movs	r0, r2
 801eca0:	4798      	blx	r3
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801eca2:	46c0      	nop			@ (mov r8, r8)
 801eca4:	46bd      	mov	sp, r7
 801eca6:	b004      	add	sp, #16
 801eca8:	bd80      	pop	{r7, pc}
	...

0801ecac <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 801ecac:	b580      	push	{r7, lr}
 801ecae:	b094      	sub	sp, #80	@ 0x50
 801ecb0:	af00      	add	r7, sp, #0
 801ecb2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801ecb4:	687b      	ldr	r3, [r7, #4]
 801ecb6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801ecb8:	64fb      	str	r3, [r7, #76]	@ 0x4c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 801ecba:	687b      	ldr	r3, [r7, #4]
 801ecbc:	681b      	ldr	r3, [r3, #0]
 801ecbe:	681b      	ldr	r3, [r3, #0]
 801ecc0:	2220      	movs	r2, #32
 801ecc2:	4013      	ands	r3, r2
 801ecc4:	d16f      	bne.n	801eda6 <UART_DMAReceiveCplt+0xfa>
  {
    huart->RxXferCount = 0U;
 801ecc6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801ecc8:	225a      	movs	r2, #90	@ 0x5a
 801ecca:	2100      	movs	r1, #0
 801eccc:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801ecce:	f3ef 8310 	mrs	r3, PRIMASK
 801ecd2:	61bb      	str	r3, [r7, #24]
  return(result);
 801ecd4:	69bb      	ldr	r3, [r7, #24]

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801ecd6:	64bb      	str	r3, [r7, #72]	@ 0x48
 801ecd8:	2301      	movs	r3, #1
 801ecda:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ecdc:	69fb      	ldr	r3, [r7, #28]
 801ecde:	f383 8810 	msr	PRIMASK, r3
}
 801ece2:	46c0      	nop			@ (mov r8, r8)
 801ece4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801ece6:	681b      	ldr	r3, [r3, #0]
 801ece8:	681a      	ldr	r2, [r3, #0]
 801ecea:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801ecec:	681b      	ldr	r3, [r3, #0]
 801ecee:	493b      	ldr	r1, [pc, #236]	@ (801eddc <UART_DMAReceiveCplt+0x130>)
 801ecf0:	400a      	ands	r2, r1
 801ecf2:	601a      	str	r2, [r3, #0]
 801ecf4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801ecf6:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ecf8:	6a3b      	ldr	r3, [r7, #32]
 801ecfa:	f383 8810 	msr	PRIMASK, r3
}
 801ecfe:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801ed00:	f3ef 8310 	mrs	r3, PRIMASK
 801ed04:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 801ed06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801ed08:	647b      	str	r3, [r7, #68]	@ 0x44
 801ed0a:	2301      	movs	r3, #1
 801ed0c:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ed0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801ed10:	f383 8810 	msr	PRIMASK, r3
}
 801ed14:	46c0      	nop			@ (mov r8, r8)
 801ed16:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801ed18:	681b      	ldr	r3, [r3, #0]
 801ed1a:	689a      	ldr	r2, [r3, #8]
 801ed1c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801ed1e:	681b      	ldr	r3, [r3, #0]
 801ed20:	2101      	movs	r1, #1
 801ed22:	438a      	bics	r2, r1
 801ed24:	609a      	str	r2, [r3, #8]
 801ed26:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801ed28:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ed2a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801ed2c:	f383 8810 	msr	PRIMASK, r3
}
 801ed30:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801ed32:	f3ef 8310 	mrs	r3, PRIMASK
 801ed36:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 801ed38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801ed3a:	643b      	str	r3, [r7, #64]	@ 0x40
 801ed3c:	2301      	movs	r3, #1
 801ed3e:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ed40:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801ed42:	f383 8810 	msr	PRIMASK, r3
}
 801ed46:	46c0      	nop			@ (mov r8, r8)
 801ed48:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801ed4a:	681b      	ldr	r3, [r3, #0]
 801ed4c:	689a      	ldr	r2, [r3, #8]
 801ed4e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801ed50:	681b      	ldr	r3, [r3, #0]
 801ed52:	2140      	movs	r1, #64	@ 0x40
 801ed54:	438a      	bics	r2, r1
 801ed56:	609a      	str	r2, [r3, #8]
 801ed58:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801ed5a:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ed5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801ed5e:	f383 8810 	msr	PRIMASK, r3
}
 801ed62:	46c0      	nop			@ (mov r8, r8)

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 801ed64:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801ed66:	2280      	movs	r2, #128	@ 0x80
 801ed68:	2120      	movs	r1, #32
 801ed6a:	5099      	str	r1, [r3, r2]

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801ed6c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801ed6e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801ed70:	2b01      	cmp	r3, #1
 801ed72:	d118      	bne.n	801eda6 <UART_DMAReceiveCplt+0xfa>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801ed74:	f3ef 8310 	mrs	r3, PRIMASK
 801ed78:	60fb      	str	r3, [r7, #12]
  return(result);
 801ed7a:	68fb      	ldr	r3, [r7, #12]
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801ed7c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801ed7e:	2301      	movs	r3, #1
 801ed80:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ed82:	693b      	ldr	r3, [r7, #16]
 801ed84:	f383 8810 	msr	PRIMASK, r3
}
 801ed88:	46c0      	nop			@ (mov r8, r8)
 801ed8a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801ed8c:	681b      	ldr	r3, [r3, #0]
 801ed8e:	681a      	ldr	r2, [r3, #0]
 801ed90:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801ed92:	681b      	ldr	r3, [r3, #0]
 801ed94:	2110      	movs	r1, #16
 801ed96:	438a      	bics	r2, r1
 801ed98:	601a      	str	r2, [r3, #0]
 801ed9a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801ed9c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ed9e:	697b      	ldr	r3, [r7, #20]
 801eda0:	f383 8810 	msr	PRIMASK, r3
}
 801eda4:	46c0      	nop			@ (mov r8, r8)
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 801eda6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801eda8:	2200      	movs	r2, #0
 801edaa:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801edac:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801edae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801edb0:	2b01      	cmp	r3, #1
 801edb2:	d109      	bne.n	801edc8 <UART_DMAReceiveCplt+0x11c>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
 801edb4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801edb6:	22ac      	movs	r2, #172	@ 0xac
 801edb8:	589b      	ldr	r3, [r3, r2]
 801edba:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 801edbc:	2158      	movs	r1, #88	@ 0x58
 801edbe:	5a51      	ldrh	r1, [r2, r1]
 801edc0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 801edc2:	0010      	movs	r0, r2
 801edc4:	4798      	blx	r3
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 801edc6:	e005      	b.n	801edd4 <UART_DMAReceiveCplt+0x128>
    huart->RxCpltCallback(huart);
 801edc8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801edca:	2294      	movs	r2, #148	@ 0x94
 801edcc:	589b      	ldr	r3, [r3, r2]
 801edce:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 801edd0:	0010      	movs	r0, r2
 801edd2:	4798      	blx	r3
}
 801edd4:	46c0      	nop			@ (mov r8, r8)
 801edd6:	46bd      	mov	sp, r7
 801edd8:	b014      	add	sp, #80	@ 0x50
 801edda:	bd80      	pop	{r7, pc}
 801eddc:	fffffeff 	.word	0xfffffeff

0801ede0 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 801ede0:	b580      	push	{r7, lr}
 801ede2:	b084      	sub	sp, #16
 801ede4:	af00      	add	r7, sp, #0
 801ede6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801ede8:	687b      	ldr	r3, [r7, #4]
 801edea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801edec:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 801edee:	68fb      	ldr	r3, [r7, #12]
 801edf0:	2201      	movs	r2, #1
 801edf2:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801edf4:	68fb      	ldr	r3, [r7, #12]
 801edf6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801edf8:	2b01      	cmp	r3, #1
 801edfa:	d10b      	bne.n	801ee14 <UART_DMARxHalfCplt+0x34>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
 801edfc:	68fb      	ldr	r3, [r7, #12]
 801edfe:	22ac      	movs	r2, #172	@ 0xac
 801ee00:	589b      	ldr	r3, [r3, r2]
 801ee02:	68fa      	ldr	r2, [r7, #12]
 801ee04:	2158      	movs	r1, #88	@ 0x58
 801ee06:	5a52      	ldrh	r2, [r2, r1]
 801ee08:	0852      	lsrs	r2, r2, #1
 801ee0a:	b291      	uxth	r1, r2
 801ee0c:	68fa      	ldr	r2, [r7, #12]
 801ee0e:	0010      	movs	r0, r2
 801ee10:	4798      	blx	r3
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 801ee12:	e005      	b.n	801ee20 <UART_DMARxHalfCplt+0x40>
    huart->RxHalfCpltCallback(huart);
 801ee14:	68fb      	ldr	r3, [r7, #12]
 801ee16:	2290      	movs	r2, #144	@ 0x90
 801ee18:	589b      	ldr	r3, [r3, r2]
 801ee1a:	68fa      	ldr	r2, [r7, #12]
 801ee1c:	0010      	movs	r0, r2
 801ee1e:	4798      	blx	r3
}
 801ee20:	46c0      	nop			@ (mov r8, r8)
 801ee22:	46bd      	mov	sp, r7
 801ee24:	b004      	add	sp, #16
 801ee26:	bd80      	pop	{r7, pc}

0801ee28 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 801ee28:	b580      	push	{r7, lr}
 801ee2a:	b086      	sub	sp, #24
 801ee2c:	af00      	add	r7, sp, #0
 801ee2e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801ee30:	687b      	ldr	r3, [r7, #4]
 801ee32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801ee34:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 801ee36:	697b      	ldr	r3, [r7, #20]
 801ee38:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801ee3a:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 801ee3c:	697b      	ldr	r3, [r7, #20]
 801ee3e:	2280      	movs	r2, #128	@ 0x80
 801ee40:	589b      	ldr	r3, [r3, r2]
 801ee42:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 801ee44:	697b      	ldr	r3, [r7, #20]
 801ee46:	681b      	ldr	r3, [r3, #0]
 801ee48:	689b      	ldr	r3, [r3, #8]
 801ee4a:	2280      	movs	r2, #128	@ 0x80
 801ee4c:	4013      	ands	r3, r2
 801ee4e:	2b80      	cmp	r3, #128	@ 0x80
 801ee50:	d10a      	bne.n	801ee68 <UART_DMAError+0x40>
 801ee52:	693b      	ldr	r3, [r7, #16]
 801ee54:	2b21      	cmp	r3, #33	@ 0x21
 801ee56:	d107      	bne.n	801ee68 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 801ee58:	697b      	ldr	r3, [r7, #20]
 801ee5a:	2252      	movs	r2, #82	@ 0x52
 801ee5c:	2100      	movs	r1, #0
 801ee5e:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 801ee60:	697b      	ldr	r3, [r7, #20]
 801ee62:	0018      	movs	r0, r3
 801ee64:	f7ff fe3a 	bl	801eadc <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 801ee68:	697b      	ldr	r3, [r7, #20]
 801ee6a:	681b      	ldr	r3, [r3, #0]
 801ee6c:	689b      	ldr	r3, [r3, #8]
 801ee6e:	2240      	movs	r2, #64	@ 0x40
 801ee70:	4013      	ands	r3, r2
 801ee72:	2b40      	cmp	r3, #64	@ 0x40
 801ee74:	d10a      	bne.n	801ee8c <UART_DMAError+0x64>
 801ee76:	68fb      	ldr	r3, [r7, #12]
 801ee78:	2b22      	cmp	r3, #34	@ 0x22
 801ee7a:	d107      	bne.n	801ee8c <UART_DMAError+0x64>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 801ee7c:	697b      	ldr	r3, [r7, #20]
 801ee7e:	225a      	movs	r2, #90	@ 0x5a
 801ee80:	2100      	movs	r1, #0
 801ee82:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 801ee84:	697b      	ldr	r3, [r7, #20]
 801ee86:	0018      	movs	r0, r3
 801ee88:	f7ff fe4c 	bl	801eb24 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 801ee8c:	697b      	ldr	r3, [r7, #20]
 801ee8e:	2284      	movs	r2, #132	@ 0x84
 801ee90:	589b      	ldr	r3, [r3, r2]
 801ee92:	2210      	movs	r2, #16
 801ee94:	431a      	orrs	r2, r3
 801ee96:	697b      	ldr	r3, [r7, #20]
 801ee98:	2184      	movs	r1, #132	@ 0x84
 801ee9a:	505a      	str	r2, [r3, r1]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 801ee9c:	697b      	ldr	r3, [r7, #20]
 801ee9e:	2298      	movs	r2, #152	@ 0x98
 801eea0:	589b      	ldr	r3, [r3, r2]
 801eea2:	697a      	ldr	r2, [r7, #20]
 801eea4:	0010      	movs	r0, r2
 801eea6:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801eea8:	46c0      	nop			@ (mov r8, r8)
 801eeaa:	46bd      	mov	sp, r7
 801eeac:	b006      	add	sp, #24
 801eeae:	bd80      	pop	{r7, pc}

0801eeb0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 801eeb0:	b580      	push	{r7, lr}
 801eeb2:	b084      	sub	sp, #16
 801eeb4:	af00      	add	r7, sp, #0
 801eeb6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801eeb8:	687b      	ldr	r3, [r7, #4]
 801eeba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801eebc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 801eebe:	68fb      	ldr	r3, [r7, #12]
 801eec0:	225a      	movs	r2, #90	@ 0x5a
 801eec2:	2100      	movs	r1, #0
 801eec4:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 801eec6:	68fb      	ldr	r3, [r7, #12]
 801eec8:	2252      	movs	r2, #82	@ 0x52
 801eeca:	2100      	movs	r1, #0
 801eecc:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 801eece:	68fb      	ldr	r3, [r7, #12]
 801eed0:	2298      	movs	r2, #152	@ 0x98
 801eed2:	589b      	ldr	r3, [r3, r2]
 801eed4:	68fa      	ldr	r2, [r7, #12]
 801eed6:	0010      	movs	r0, r2
 801eed8:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801eeda:	46c0      	nop			@ (mov r8, r8)
 801eedc:	46bd      	mov	sp, r7
 801eede:	b004      	add	sp, #16
 801eee0:	bd80      	pop	{r7, pc}

0801eee2 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 801eee2:	b580      	push	{r7, lr}
 801eee4:	b086      	sub	sp, #24
 801eee6:	af00      	add	r7, sp, #0
 801eee8:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801eeea:	f3ef 8310 	mrs	r3, PRIMASK
 801eeee:	60bb      	str	r3, [r7, #8]
  return(result);
 801eef0:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 801eef2:	617b      	str	r3, [r7, #20]
 801eef4:	2301      	movs	r3, #1
 801eef6:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801eef8:	68fb      	ldr	r3, [r7, #12]
 801eefa:	f383 8810 	msr	PRIMASK, r3
}
 801eefe:	46c0      	nop			@ (mov r8, r8)
 801ef00:	687b      	ldr	r3, [r7, #4]
 801ef02:	681b      	ldr	r3, [r3, #0]
 801ef04:	681a      	ldr	r2, [r3, #0]
 801ef06:	687b      	ldr	r3, [r7, #4]
 801ef08:	681b      	ldr	r3, [r3, #0]
 801ef0a:	2140      	movs	r1, #64	@ 0x40
 801ef0c:	438a      	bics	r2, r1
 801ef0e:	601a      	str	r2, [r3, #0]
 801ef10:	697b      	ldr	r3, [r7, #20]
 801ef12:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ef14:	693b      	ldr	r3, [r7, #16]
 801ef16:	f383 8810 	msr	PRIMASK, r3
}
 801ef1a:	46c0      	nop			@ (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 801ef1c:	687b      	ldr	r3, [r7, #4]
 801ef1e:	2220      	movs	r2, #32
 801ef20:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 801ef22:	687b      	ldr	r3, [r7, #4]
 801ef24:	2200      	movs	r2, #0
 801ef26:	66da      	str	r2, [r3, #108]	@ 0x6c

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 801ef28:	687b      	ldr	r3, [r7, #4]
 801ef2a:	228c      	movs	r2, #140	@ 0x8c
 801ef2c:	589b      	ldr	r3, [r3, r2]
 801ef2e:	687a      	ldr	r2, [r7, #4]
 801ef30:	0010      	movs	r0, r2
 801ef32:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801ef34:	46c0      	nop			@ (mov r8, r8)
 801ef36:	46bd      	mov	sp, r7
 801ef38:	b006      	add	sp, #24
 801ef3a:	bd80      	pop	{r7, pc}

0801ef3c <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 801ef3c:	b580      	push	{r7, lr}
 801ef3e:	b094      	sub	sp, #80	@ 0x50
 801ef40:	af00      	add	r7, sp, #0
 801ef42:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 801ef44:	204e      	movs	r0, #78	@ 0x4e
 801ef46:	183b      	adds	r3, r7, r0
 801ef48:	687a      	ldr	r2, [r7, #4]
 801ef4a:	215c      	movs	r1, #92	@ 0x5c
 801ef4c:	5a52      	ldrh	r2, [r2, r1]
 801ef4e:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 801ef50:	687b      	ldr	r3, [r7, #4]
 801ef52:	2280      	movs	r2, #128	@ 0x80
 801ef54:	589b      	ldr	r3, [r3, r2]
 801ef56:	2b22      	cmp	r3, #34	@ 0x22
 801ef58:	d000      	beq.n	801ef5c <UART_RxISR_8BIT+0x20>
 801ef5a:	e0c2      	b.n	801f0e2 <UART_RxISR_8BIT+0x1a6>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 801ef5c:	687b      	ldr	r3, [r7, #4]
 801ef5e:	681b      	ldr	r3, [r3, #0]
 801ef60:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801ef62:	214c      	movs	r1, #76	@ 0x4c
 801ef64:	187b      	adds	r3, r7, r1
 801ef66:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 801ef68:	187b      	adds	r3, r7, r1
 801ef6a:	881b      	ldrh	r3, [r3, #0]
 801ef6c:	b2da      	uxtb	r2, r3
 801ef6e:	183b      	adds	r3, r7, r0
 801ef70:	881b      	ldrh	r3, [r3, #0]
 801ef72:	b2d9      	uxtb	r1, r3
 801ef74:	687b      	ldr	r3, [r7, #4]
 801ef76:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801ef78:	400a      	ands	r2, r1
 801ef7a:	b2d2      	uxtb	r2, r2
 801ef7c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 801ef7e:	687b      	ldr	r3, [r7, #4]
 801ef80:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801ef82:	1c5a      	adds	r2, r3, #1
 801ef84:	687b      	ldr	r3, [r7, #4]
 801ef86:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 801ef88:	687b      	ldr	r3, [r7, #4]
 801ef8a:	225a      	movs	r2, #90	@ 0x5a
 801ef8c:	5a9b      	ldrh	r3, [r3, r2]
 801ef8e:	b29b      	uxth	r3, r3
 801ef90:	3b01      	subs	r3, #1
 801ef92:	b299      	uxth	r1, r3
 801ef94:	687b      	ldr	r3, [r7, #4]
 801ef96:	225a      	movs	r2, #90	@ 0x5a
 801ef98:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 801ef9a:	687b      	ldr	r3, [r7, #4]
 801ef9c:	225a      	movs	r2, #90	@ 0x5a
 801ef9e:	5a9b      	ldrh	r3, [r3, r2]
 801efa0:	b29b      	uxth	r3, r3
 801efa2:	2b00      	cmp	r3, #0
 801efa4:	d000      	beq.n	801efa8 <UART_RxISR_8BIT+0x6c>
 801efa6:	e0a4      	b.n	801f0f2 <UART_RxISR_8BIT+0x1b6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801efa8:	f3ef 8310 	mrs	r3, PRIMASK
 801efac:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 801efae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 801efb0:	64bb      	str	r3, [r7, #72]	@ 0x48
 801efb2:	2301      	movs	r3, #1
 801efb4:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801efb6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801efb8:	f383 8810 	msr	PRIMASK, r3
}
 801efbc:	46c0      	nop			@ (mov r8, r8)
 801efbe:	687b      	ldr	r3, [r7, #4]
 801efc0:	681b      	ldr	r3, [r3, #0]
 801efc2:	681a      	ldr	r2, [r3, #0]
 801efc4:	687b      	ldr	r3, [r7, #4]
 801efc6:	681b      	ldr	r3, [r3, #0]
 801efc8:	494c      	ldr	r1, [pc, #304]	@ (801f0fc <UART_RxISR_8BIT+0x1c0>)
 801efca:	400a      	ands	r2, r1
 801efcc:	601a      	str	r2, [r3, #0]
 801efce:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801efd0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801efd2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801efd4:	f383 8810 	msr	PRIMASK, r3
}
 801efd8:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801efda:	f3ef 8310 	mrs	r3, PRIMASK
 801efde:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 801efe0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801efe2:	647b      	str	r3, [r7, #68]	@ 0x44
 801efe4:	2301      	movs	r3, #1
 801efe6:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801efe8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801efea:	f383 8810 	msr	PRIMASK, r3
}
 801efee:	46c0      	nop			@ (mov r8, r8)
 801eff0:	687b      	ldr	r3, [r7, #4]
 801eff2:	681b      	ldr	r3, [r3, #0]
 801eff4:	689a      	ldr	r2, [r3, #8]
 801eff6:	687b      	ldr	r3, [r7, #4]
 801eff8:	681b      	ldr	r3, [r3, #0]
 801effa:	2101      	movs	r1, #1
 801effc:	438a      	bics	r2, r1
 801effe:	609a      	str	r2, [r3, #8]
 801f000:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801f002:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801f004:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801f006:	f383 8810 	msr	PRIMASK, r3
}
 801f00a:	46c0      	nop			@ (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 801f00c:	687b      	ldr	r3, [r7, #4]
 801f00e:	2280      	movs	r2, #128	@ 0x80
 801f010:	2120      	movs	r1, #32
 801f012:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 801f014:	687b      	ldr	r3, [r7, #4]
 801f016:	2200      	movs	r2, #0
 801f018:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 801f01a:	687b      	ldr	r3, [r7, #4]
 801f01c:	2200      	movs	r2, #0
 801f01e:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 801f020:	687b      	ldr	r3, [r7, #4]
 801f022:	681b      	ldr	r3, [r3, #0]
 801f024:	4a36      	ldr	r2, [pc, #216]	@ (801f100 <UART_RxISR_8BIT+0x1c4>)
 801f026:	4293      	cmp	r3, r2
 801f028:	d01f      	beq.n	801f06a <UART_RxISR_8BIT+0x12e>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 801f02a:	687b      	ldr	r3, [r7, #4]
 801f02c:	681b      	ldr	r3, [r3, #0]
 801f02e:	685a      	ldr	r2, [r3, #4]
 801f030:	2380      	movs	r3, #128	@ 0x80
 801f032:	041b      	lsls	r3, r3, #16
 801f034:	4013      	ands	r3, r2
 801f036:	d018      	beq.n	801f06a <UART_RxISR_8BIT+0x12e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801f038:	f3ef 8310 	mrs	r3, PRIMASK
 801f03c:	61bb      	str	r3, [r7, #24]
  return(result);
 801f03e:	69bb      	ldr	r3, [r7, #24]
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 801f040:	643b      	str	r3, [r7, #64]	@ 0x40
 801f042:	2301      	movs	r3, #1
 801f044:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801f046:	69fb      	ldr	r3, [r7, #28]
 801f048:	f383 8810 	msr	PRIMASK, r3
}
 801f04c:	46c0      	nop			@ (mov r8, r8)
 801f04e:	687b      	ldr	r3, [r7, #4]
 801f050:	681b      	ldr	r3, [r3, #0]
 801f052:	681a      	ldr	r2, [r3, #0]
 801f054:	687b      	ldr	r3, [r7, #4]
 801f056:	681b      	ldr	r3, [r3, #0]
 801f058:	492a      	ldr	r1, [pc, #168]	@ (801f104 <UART_RxISR_8BIT+0x1c8>)
 801f05a:	400a      	ands	r2, r1
 801f05c:	601a      	str	r2, [r3, #0]
 801f05e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801f060:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801f062:	6a3b      	ldr	r3, [r7, #32]
 801f064:	f383 8810 	msr	PRIMASK, r3
}
 801f068:	46c0      	nop			@ (mov r8, r8)
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801f06a:	687b      	ldr	r3, [r7, #4]
 801f06c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801f06e:	2b01      	cmp	r3, #1
 801f070:	d130      	bne.n	801f0d4 <UART_RxISR_8BIT+0x198>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801f072:	687b      	ldr	r3, [r7, #4]
 801f074:	2200      	movs	r2, #0
 801f076:	661a      	str	r2, [r3, #96]	@ 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801f078:	f3ef 8310 	mrs	r3, PRIMASK
 801f07c:	60fb      	str	r3, [r7, #12]
  return(result);
 801f07e:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801f080:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801f082:	2301      	movs	r3, #1
 801f084:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801f086:	693b      	ldr	r3, [r7, #16]
 801f088:	f383 8810 	msr	PRIMASK, r3
}
 801f08c:	46c0      	nop			@ (mov r8, r8)
 801f08e:	687b      	ldr	r3, [r7, #4]
 801f090:	681b      	ldr	r3, [r3, #0]
 801f092:	681a      	ldr	r2, [r3, #0]
 801f094:	687b      	ldr	r3, [r7, #4]
 801f096:	681b      	ldr	r3, [r3, #0]
 801f098:	2110      	movs	r1, #16
 801f09a:	438a      	bics	r2, r1
 801f09c:	601a      	str	r2, [r3, #0]
 801f09e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801f0a0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801f0a2:	697b      	ldr	r3, [r7, #20]
 801f0a4:	f383 8810 	msr	PRIMASK, r3
}
 801f0a8:	46c0      	nop			@ (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 801f0aa:	687b      	ldr	r3, [r7, #4]
 801f0ac:	681b      	ldr	r3, [r3, #0]
 801f0ae:	69db      	ldr	r3, [r3, #28]
 801f0b0:	2210      	movs	r2, #16
 801f0b2:	4013      	ands	r3, r2
 801f0b4:	2b10      	cmp	r3, #16
 801f0b6:	d103      	bne.n	801f0c0 <UART_RxISR_8BIT+0x184>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801f0b8:	687b      	ldr	r3, [r7, #4]
 801f0ba:	681b      	ldr	r3, [r3, #0]
 801f0bc:	2210      	movs	r2, #16
 801f0be:	621a      	str	r2, [r3, #32]
        }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
 801f0c0:	687b      	ldr	r3, [r7, #4]
 801f0c2:	22ac      	movs	r2, #172	@ 0xac
 801f0c4:	589b      	ldr	r3, [r3, r2]
 801f0c6:	687a      	ldr	r2, [r7, #4]
 801f0c8:	2158      	movs	r1, #88	@ 0x58
 801f0ca:	5a51      	ldrh	r1, [r2, r1]
 801f0cc:	687a      	ldr	r2, [r7, #4]
 801f0ce:	0010      	movs	r0, r2
 801f0d0:	4798      	blx	r3
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 801f0d2:	e00e      	b.n	801f0f2 <UART_RxISR_8BIT+0x1b6>
        huart->RxCpltCallback(huart);
 801f0d4:	687b      	ldr	r3, [r7, #4]
 801f0d6:	2294      	movs	r2, #148	@ 0x94
 801f0d8:	589b      	ldr	r3, [r3, r2]
 801f0da:	687a      	ldr	r2, [r7, #4]
 801f0dc:	0010      	movs	r0, r2
 801f0de:	4798      	blx	r3
}
 801f0e0:	e007      	b.n	801f0f2 <UART_RxISR_8BIT+0x1b6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 801f0e2:	687b      	ldr	r3, [r7, #4]
 801f0e4:	681b      	ldr	r3, [r3, #0]
 801f0e6:	699a      	ldr	r2, [r3, #24]
 801f0e8:	687b      	ldr	r3, [r7, #4]
 801f0ea:	681b      	ldr	r3, [r3, #0]
 801f0ec:	2108      	movs	r1, #8
 801f0ee:	430a      	orrs	r2, r1
 801f0f0:	619a      	str	r2, [r3, #24]
}
 801f0f2:	46c0      	nop			@ (mov r8, r8)
 801f0f4:	46bd      	mov	sp, r7
 801f0f6:	b014      	add	sp, #80	@ 0x50
 801f0f8:	bd80      	pop	{r7, pc}
 801f0fa:	46c0      	nop			@ (mov r8, r8)
 801f0fc:	fffffedf 	.word	0xfffffedf
 801f100:	40004800 	.word	0x40004800
 801f104:	fbffffff 	.word	0xfbffffff

0801f108 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 801f108:	b580      	push	{r7, lr}
 801f10a:	b094      	sub	sp, #80	@ 0x50
 801f10c:	af00      	add	r7, sp, #0
 801f10e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 801f110:	204e      	movs	r0, #78	@ 0x4e
 801f112:	183b      	adds	r3, r7, r0
 801f114:	687a      	ldr	r2, [r7, #4]
 801f116:	215c      	movs	r1, #92	@ 0x5c
 801f118:	5a52      	ldrh	r2, [r2, r1]
 801f11a:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 801f11c:	687b      	ldr	r3, [r7, #4]
 801f11e:	2280      	movs	r2, #128	@ 0x80
 801f120:	589b      	ldr	r3, [r3, r2]
 801f122:	2b22      	cmp	r3, #34	@ 0x22
 801f124:	d000      	beq.n	801f128 <UART_RxISR_16BIT+0x20>
 801f126:	e0c2      	b.n	801f2ae <UART_RxISR_16BIT+0x1a6>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 801f128:	687b      	ldr	r3, [r7, #4]
 801f12a:	681b      	ldr	r3, [r3, #0]
 801f12c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801f12e:	214c      	movs	r1, #76	@ 0x4c
 801f130:	187b      	adds	r3, r7, r1
 801f132:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 801f134:	687b      	ldr	r3, [r7, #4]
 801f136:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801f138:	64bb      	str	r3, [r7, #72]	@ 0x48
    *tmp = (uint16_t)(uhdata & uhMask);
 801f13a:	187b      	adds	r3, r7, r1
 801f13c:	183a      	adds	r2, r7, r0
 801f13e:	881b      	ldrh	r3, [r3, #0]
 801f140:	8812      	ldrh	r2, [r2, #0]
 801f142:	4013      	ands	r3, r2
 801f144:	b29a      	uxth	r2, r3
 801f146:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801f148:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 801f14a:	687b      	ldr	r3, [r7, #4]
 801f14c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801f14e:	1c9a      	adds	r2, r3, #2
 801f150:	687b      	ldr	r3, [r7, #4]
 801f152:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 801f154:	687b      	ldr	r3, [r7, #4]
 801f156:	225a      	movs	r2, #90	@ 0x5a
 801f158:	5a9b      	ldrh	r3, [r3, r2]
 801f15a:	b29b      	uxth	r3, r3
 801f15c:	3b01      	subs	r3, #1
 801f15e:	b299      	uxth	r1, r3
 801f160:	687b      	ldr	r3, [r7, #4]
 801f162:	225a      	movs	r2, #90	@ 0x5a
 801f164:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 801f166:	687b      	ldr	r3, [r7, #4]
 801f168:	225a      	movs	r2, #90	@ 0x5a
 801f16a:	5a9b      	ldrh	r3, [r3, r2]
 801f16c:	b29b      	uxth	r3, r3
 801f16e:	2b00      	cmp	r3, #0
 801f170:	d000      	beq.n	801f174 <UART_RxISR_16BIT+0x6c>
 801f172:	e0a4      	b.n	801f2be <UART_RxISR_16BIT+0x1b6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801f174:	f3ef 8310 	mrs	r3, PRIMASK
 801f178:	623b      	str	r3, [r7, #32]
  return(result);
 801f17a:	6a3b      	ldr	r3, [r7, #32]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 801f17c:	647b      	str	r3, [r7, #68]	@ 0x44
 801f17e:	2301      	movs	r3, #1
 801f180:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801f182:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801f184:	f383 8810 	msr	PRIMASK, r3
}
 801f188:	46c0      	nop			@ (mov r8, r8)
 801f18a:	687b      	ldr	r3, [r7, #4]
 801f18c:	681b      	ldr	r3, [r3, #0]
 801f18e:	681a      	ldr	r2, [r3, #0]
 801f190:	687b      	ldr	r3, [r7, #4]
 801f192:	681b      	ldr	r3, [r3, #0]
 801f194:	494c      	ldr	r1, [pc, #304]	@ (801f2c8 <UART_RxISR_16BIT+0x1c0>)
 801f196:	400a      	ands	r2, r1
 801f198:	601a      	str	r2, [r3, #0]
 801f19a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801f19c:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801f19e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801f1a0:	f383 8810 	msr	PRIMASK, r3
}
 801f1a4:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801f1a6:	f3ef 8310 	mrs	r3, PRIMASK
 801f1aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return(result);
 801f1ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801f1ae:	643b      	str	r3, [r7, #64]	@ 0x40
 801f1b0:	2301      	movs	r3, #1
 801f1b2:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801f1b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801f1b6:	f383 8810 	msr	PRIMASK, r3
}
 801f1ba:	46c0      	nop			@ (mov r8, r8)
 801f1bc:	687b      	ldr	r3, [r7, #4]
 801f1be:	681b      	ldr	r3, [r3, #0]
 801f1c0:	689a      	ldr	r2, [r3, #8]
 801f1c2:	687b      	ldr	r3, [r7, #4]
 801f1c4:	681b      	ldr	r3, [r3, #0]
 801f1c6:	2101      	movs	r1, #1
 801f1c8:	438a      	bics	r2, r1
 801f1ca:	609a      	str	r2, [r3, #8]
 801f1cc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801f1ce:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801f1d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801f1d2:	f383 8810 	msr	PRIMASK, r3
}
 801f1d6:	46c0      	nop			@ (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 801f1d8:	687b      	ldr	r3, [r7, #4]
 801f1da:	2280      	movs	r2, #128	@ 0x80
 801f1dc:	2120      	movs	r1, #32
 801f1de:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 801f1e0:	687b      	ldr	r3, [r7, #4]
 801f1e2:	2200      	movs	r2, #0
 801f1e4:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 801f1e6:	687b      	ldr	r3, [r7, #4]
 801f1e8:	2200      	movs	r2, #0
 801f1ea:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 801f1ec:	687b      	ldr	r3, [r7, #4]
 801f1ee:	681b      	ldr	r3, [r3, #0]
 801f1f0:	4a36      	ldr	r2, [pc, #216]	@ (801f2cc <UART_RxISR_16BIT+0x1c4>)
 801f1f2:	4293      	cmp	r3, r2
 801f1f4:	d01f      	beq.n	801f236 <UART_RxISR_16BIT+0x12e>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 801f1f6:	687b      	ldr	r3, [r7, #4]
 801f1f8:	681b      	ldr	r3, [r3, #0]
 801f1fa:	685a      	ldr	r2, [r3, #4]
 801f1fc:	2380      	movs	r3, #128	@ 0x80
 801f1fe:	041b      	lsls	r3, r3, #16
 801f200:	4013      	ands	r3, r2
 801f202:	d018      	beq.n	801f236 <UART_RxISR_16BIT+0x12e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801f204:	f3ef 8310 	mrs	r3, PRIMASK
 801f208:	617b      	str	r3, [r7, #20]
  return(result);
 801f20a:	697b      	ldr	r3, [r7, #20]
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 801f20c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801f20e:	2301      	movs	r3, #1
 801f210:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801f212:	69bb      	ldr	r3, [r7, #24]
 801f214:	f383 8810 	msr	PRIMASK, r3
}
 801f218:	46c0      	nop			@ (mov r8, r8)
 801f21a:	687b      	ldr	r3, [r7, #4]
 801f21c:	681b      	ldr	r3, [r3, #0]
 801f21e:	681a      	ldr	r2, [r3, #0]
 801f220:	687b      	ldr	r3, [r7, #4]
 801f222:	681b      	ldr	r3, [r3, #0]
 801f224:	492a      	ldr	r1, [pc, #168]	@ (801f2d0 <UART_RxISR_16BIT+0x1c8>)
 801f226:	400a      	ands	r2, r1
 801f228:	601a      	str	r2, [r3, #0]
 801f22a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801f22c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801f22e:	69fb      	ldr	r3, [r7, #28]
 801f230:	f383 8810 	msr	PRIMASK, r3
}
 801f234:	46c0      	nop			@ (mov r8, r8)
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801f236:	687b      	ldr	r3, [r7, #4]
 801f238:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801f23a:	2b01      	cmp	r3, #1
 801f23c:	d130      	bne.n	801f2a0 <UART_RxISR_16BIT+0x198>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801f23e:	687b      	ldr	r3, [r7, #4]
 801f240:	2200      	movs	r2, #0
 801f242:	661a      	str	r2, [r3, #96]	@ 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801f244:	f3ef 8310 	mrs	r3, PRIMASK
 801f248:	60bb      	str	r3, [r7, #8]
  return(result);
 801f24a:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801f24c:	63bb      	str	r3, [r7, #56]	@ 0x38
 801f24e:	2301      	movs	r3, #1
 801f250:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801f252:	68fb      	ldr	r3, [r7, #12]
 801f254:	f383 8810 	msr	PRIMASK, r3
}
 801f258:	46c0      	nop			@ (mov r8, r8)
 801f25a:	687b      	ldr	r3, [r7, #4]
 801f25c:	681b      	ldr	r3, [r3, #0]
 801f25e:	681a      	ldr	r2, [r3, #0]
 801f260:	687b      	ldr	r3, [r7, #4]
 801f262:	681b      	ldr	r3, [r3, #0]
 801f264:	2110      	movs	r1, #16
 801f266:	438a      	bics	r2, r1
 801f268:	601a      	str	r2, [r3, #0]
 801f26a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801f26c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801f26e:	693b      	ldr	r3, [r7, #16]
 801f270:	f383 8810 	msr	PRIMASK, r3
}
 801f274:	46c0      	nop			@ (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 801f276:	687b      	ldr	r3, [r7, #4]
 801f278:	681b      	ldr	r3, [r3, #0]
 801f27a:	69db      	ldr	r3, [r3, #28]
 801f27c:	2210      	movs	r2, #16
 801f27e:	4013      	ands	r3, r2
 801f280:	2b10      	cmp	r3, #16
 801f282:	d103      	bne.n	801f28c <UART_RxISR_16BIT+0x184>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801f284:	687b      	ldr	r3, [r7, #4]
 801f286:	681b      	ldr	r3, [r3, #0]
 801f288:	2210      	movs	r2, #16
 801f28a:	621a      	str	r2, [r3, #32]
        }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
 801f28c:	687b      	ldr	r3, [r7, #4]
 801f28e:	22ac      	movs	r2, #172	@ 0xac
 801f290:	589b      	ldr	r3, [r3, r2]
 801f292:	687a      	ldr	r2, [r7, #4]
 801f294:	2158      	movs	r1, #88	@ 0x58
 801f296:	5a51      	ldrh	r1, [r2, r1]
 801f298:	687a      	ldr	r2, [r7, #4]
 801f29a:	0010      	movs	r0, r2
 801f29c:	4798      	blx	r3
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 801f29e:	e00e      	b.n	801f2be <UART_RxISR_16BIT+0x1b6>
        huart->RxCpltCallback(huart);
 801f2a0:	687b      	ldr	r3, [r7, #4]
 801f2a2:	2294      	movs	r2, #148	@ 0x94
 801f2a4:	589b      	ldr	r3, [r3, r2]
 801f2a6:	687a      	ldr	r2, [r7, #4]
 801f2a8:	0010      	movs	r0, r2
 801f2aa:	4798      	blx	r3
}
 801f2ac:	e007      	b.n	801f2be <UART_RxISR_16BIT+0x1b6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 801f2ae:	687b      	ldr	r3, [r7, #4]
 801f2b0:	681b      	ldr	r3, [r3, #0]
 801f2b2:	699a      	ldr	r2, [r3, #24]
 801f2b4:	687b      	ldr	r3, [r7, #4]
 801f2b6:	681b      	ldr	r3, [r3, #0]
 801f2b8:	2108      	movs	r1, #8
 801f2ba:	430a      	orrs	r2, r1
 801f2bc:	619a      	str	r2, [r3, #24]
}
 801f2be:	46c0      	nop			@ (mov r8, r8)
 801f2c0:	46bd      	mov	sp, r7
 801f2c2:	b014      	add	sp, #80	@ 0x50
 801f2c4:	bd80      	pop	{r7, pc}
 801f2c6:	46c0      	nop			@ (mov r8, r8)
 801f2c8:	fffffedf 	.word	0xfffffedf
 801f2cc:	40004800 	.word	0x40004800
 801f2d0:	fbffffff 	.word	0xfbffffff

0801f2d4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 801f2d4:	b580      	push	{r7, lr}
 801f2d6:	b082      	sub	sp, #8
 801f2d8:	af00      	add	r7, sp, #0
 801f2da:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 801f2dc:	46c0      	nop			@ (mov r8, r8)
 801f2de:	46bd      	mov	sp, r7
 801f2e0:	b002      	add	sp, #8
 801f2e2:	bd80      	pop	{r7, pc}

0801f2e4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 801f2e4:	b580      	push	{r7, lr}
 801f2e6:	b084      	sub	sp, #16
 801f2e8:	af00      	add	r7, sp, #0
 801f2ea:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 801f2ec:	687b      	ldr	r3, [r7, #4]
 801f2ee:	2244      	movs	r2, #68	@ 0x44
 801f2f0:	2100      	movs	r1, #0
 801f2f2:	5299      	strh	r1, [r3, r2]

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 801f2f4:	4b05      	ldr	r3, [pc, #20]	@ (801f30c <USB_EnableGlobalInt+0x28>)
 801f2f6:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 801f2f8:	68fb      	ldr	r3, [r7, #12]
 801f2fa:	b299      	uxth	r1, r3
 801f2fc:	687b      	ldr	r3, [r7, #4]
 801f2fe:	2240      	movs	r2, #64	@ 0x40
 801f300:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 801f302:	2300      	movs	r3, #0
}
 801f304:	0018      	movs	r0, r3
 801f306:	46bd      	mov	sp, r7
 801f308:	b004      	add	sp, #16
 801f30a:	bd80      	pop	{r7, pc}
 801f30c:	0000bf80 	.word	0x0000bf80

0801f310 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 801f310:	b580      	push	{r7, lr}
 801f312:	b084      	sub	sp, #16
 801f314:	af00      	add	r7, sp, #0
 801f316:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 801f318:	4b09      	ldr	r3, [pc, #36]	@ (801f340 <USB_DisableGlobalInt+0x30>)
 801f31a:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 801f31c:	687b      	ldr	r3, [r7, #4]
 801f31e:	2240      	movs	r2, #64	@ 0x40
 801f320:	5a9b      	ldrh	r3, [r3, r2]
 801f322:	b29b      	uxth	r3, r3
 801f324:	68fa      	ldr	r2, [r7, #12]
 801f326:	b292      	uxth	r2, r2
 801f328:	43d2      	mvns	r2, r2
 801f32a:	b292      	uxth	r2, r2
 801f32c:	4013      	ands	r3, r2
 801f32e:	b299      	uxth	r1, r3
 801f330:	687b      	ldr	r3, [r7, #4]
 801f332:	2240      	movs	r2, #64	@ 0x40
 801f334:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 801f336:	2300      	movs	r3, #0
}
 801f338:	0018      	movs	r0, r3
 801f33a:	46bd      	mov	sp, r7
 801f33c:	b004      	add	sp, #16
 801f33e:	bd80      	pop	{r7, pc}
 801f340:	0000bf80 	.word	0x0000bf80

0801f344 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 801f344:	b084      	sub	sp, #16
 801f346:	b590      	push	{r4, r7, lr}
 801f348:	b083      	sub	sp, #12
 801f34a:	af00      	add	r7, sp, #0
 801f34c:	6078      	str	r0, [r7, #4]
 801f34e:	2004      	movs	r0, #4
 801f350:	2410      	movs	r4, #16
 801f352:	1900      	adds	r0, r0, r4
 801f354:	2408      	movs	r4, #8
 801f356:	46a4      	mov	ip, r4
 801f358:	44bc      	add	ip, r7
 801f35a:	4460      	add	r0, ip
 801f35c:	6001      	str	r1, [r0, #0]
 801f35e:	6042      	str	r2, [r0, #4]
 801f360:	6083      	str	r3, [r0, #8]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 801f362:	687b      	ldr	r3, [r7, #4]
 801f364:	2240      	movs	r2, #64	@ 0x40
 801f366:	2101      	movs	r1, #1
 801f368:	5299      	strh	r1, [r3, r2]

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 801f36a:	687b      	ldr	r3, [r7, #4]
 801f36c:	2240      	movs	r2, #64	@ 0x40
 801f36e:	2100      	movs	r1, #0
 801f370:	5299      	strh	r1, [r3, r2]

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 801f372:	687b      	ldr	r3, [r7, #4]
 801f374:	2244      	movs	r2, #68	@ 0x44
 801f376:	2100      	movs	r1, #0
 801f378:	5299      	strh	r1, [r3, r2]

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 801f37a:	687b      	ldr	r3, [r7, #4]
 801f37c:	2250      	movs	r2, #80	@ 0x50
 801f37e:	2100      	movs	r1, #0
 801f380:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 801f382:	2300      	movs	r3, #0
}
 801f384:	0018      	movs	r0, r3
 801f386:	46bd      	mov	sp, r7
 801f388:	b003      	add	sp, #12
 801f38a:	bc90      	pop	{r4, r7}
 801f38c:	bc08      	pop	{r3}
 801f38e:	b004      	add	sp, #16
 801f390:	4718      	bx	r3
	...

0801f394 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 801f394:	b580      	push	{r7, lr}
 801f396:	b09c      	sub	sp, #112	@ 0x70
 801f398:	af00      	add	r7, sp, #0
 801f39a:	6078      	str	r0, [r7, #4]
 801f39c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 801f39e:	236f      	movs	r3, #111	@ 0x6f
 801f3a0:	18fb      	adds	r3, r7, r3
 801f3a2:	2200      	movs	r2, #0
 801f3a4:	701a      	strb	r2, [r3, #0]
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 801f3a6:	687a      	ldr	r2, [r7, #4]
 801f3a8:	683b      	ldr	r3, [r7, #0]
 801f3aa:	781b      	ldrb	r3, [r3, #0]
 801f3ac:	009b      	lsls	r3, r3, #2
 801f3ae:	18d3      	adds	r3, r2, r3
 801f3b0:	881b      	ldrh	r3, [r3, #0]
 801f3b2:	b29a      	uxth	r2, r3
 801f3b4:	236c      	movs	r3, #108	@ 0x6c
 801f3b6:	18fb      	adds	r3, r7, r3
 801f3b8:	49a3      	ldr	r1, [pc, #652]	@ (801f648 <USB_ActivateEndpoint+0x2b4>)
 801f3ba:	400a      	ands	r2, r1
 801f3bc:	801a      	strh	r2, [r3, #0]

  /* initialize Endpoint */
  switch (ep->type)
 801f3be:	683b      	ldr	r3, [r7, #0]
 801f3c0:	78db      	ldrb	r3, [r3, #3]
 801f3c2:	2b03      	cmp	r3, #3
 801f3c4:	d017      	beq.n	801f3f6 <USB_ActivateEndpoint+0x62>
 801f3c6:	dc28      	bgt.n	801f41a <USB_ActivateEndpoint+0x86>
 801f3c8:	2b02      	cmp	r3, #2
 801f3ca:	d00e      	beq.n	801f3ea <USB_ActivateEndpoint+0x56>
 801f3cc:	dc25      	bgt.n	801f41a <USB_ActivateEndpoint+0x86>
 801f3ce:	2b00      	cmp	r3, #0
 801f3d0:	d002      	beq.n	801f3d8 <USB_ActivateEndpoint+0x44>
 801f3d2:	2b01      	cmp	r3, #1
 801f3d4:	d018      	beq.n	801f408 <USB_ActivateEndpoint+0x74>
 801f3d6:	e020      	b.n	801f41a <USB_ActivateEndpoint+0x86>
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 801f3d8:	226c      	movs	r2, #108	@ 0x6c
 801f3da:	18bb      	adds	r3, r7, r2
 801f3dc:	18ba      	adds	r2, r7, r2
 801f3de:	8812      	ldrh	r2, [r2, #0]
 801f3e0:	2180      	movs	r1, #128	@ 0x80
 801f3e2:	0089      	lsls	r1, r1, #2
 801f3e4:	430a      	orrs	r2, r1
 801f3e6:	801a      	strh	r2, [r3, #0]
      break;
 801f3e8:	e01c      	b.n	801f424 <USB_ActivateEndpoint+0x90>

    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
 801f3ea:	226c      	movs	r2, #108	@ 0x6c
 801f3ec:	18bb      	adds	r3, r7, r2
 801f3ee:	18ba      	adds	r2, r7, r2
 801f3f0:	8812      	ldrh	r2, [r2, #0]
 801f3f2:	801a      	strh	r2, [r3, #0]
      break;
 801f3f4:	e016      	b.n	801f424 <USB_ActivateEndpoint+0x90>

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 801f3f6:	226c      	movs	r2, #108	@ 0x6c
 801f3f8:	18bb      	adds	r3, r7, r2
 801f3fa:	18ba      	adds	r2, r7, r2
 801f3fc:	8812      	ldrh	r2, [r2, #0]
 801f3fe:	21c0      	movs	r1, #192	@ 0xc0
 801f400:	00c9      	lsls	r1, r1, #3
 801f402:	430a      	orrs	r2, r1
 801f404:	801a      	strh	r2, [r3, #0]
      break;
 801f406:	e00d      	b.n	801f424 <USB_ActivateEndpoint+0x90>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 801f408:	226c      	movs	r2, #108	@ 0x6c
 801f40a:	18bb      	adds	r3, r7, r2
 801f40c:	18ba      	adds	r2, r7, r2
 801f40e:	8812      	ldrh	r2, [r2, #0]
 801f410:	2180      	movs	r1, #128	@ 0x80
 801f412:	00c9      	lsls	r1, r1, #3
 801f414:	430a      	orrs	r2, r1
 801f416:	801a      	strh	r2, [r3, #0]
      break;
 801f418:	e004      	b.n	801f424 <USB_ActivateEndpoint+0x90>

    default:
      ret = HAL_ERROR;
 801f41a:	236f      	movs	r3, #111	@ 0x6f
 801f41c:	18fb      	adds	r3, r7, r3
 801f41e:	2201      	movs	r2, #1
 801f420:	701a      	strb	r2, [r3, #0]
      break;
 801f422:	46c0      	nop			@ (mov r8, r8)
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 801f424:	687a      	ldr	r2, [r7, #4]
 801f426:	683b      	ldr	r3, [r7, #0]
 801f428:	781b      	ldrb	r3, [r3, #0]
 801f42a:	009b      	lsls	r3, r3, #2
 801f42c:	18d3      	adds	r3, r2, r3
 801f42e:	226c      	movs	r2, #108	@ 0x6c
 801f430:	18ba      	adds	r2, r7, r2
 801f432:	8812      	ldrh	r2, [r2, #0]
 801f434:	4985      	ldr	r1, [pc, #532]	@ (801f64c <USB_ActivateEndpoint+0x2b8>)
 801f436:	430a      	orrs	r2, r1
 801f438:	b292      	uxth	r2, r2
 801f43a:	801a      	strh	r2, [r3, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 801f43c:	687a      	ldr	r2, [r7, #4]
 801f43e:	683b      	ldr	r3, [r7, #0]
 801f440:	781b      	ldrb	r3, [r3, #0]
 801f442:	009b      	lsls	r3, r3, #2
 801f444:	18d3      	adds	r3, r2, r3
 801f446:	881b      	ldrh	r3, [r3, #0]
 801f448:	b29b      	uxth	r3, r3
 801f44a:	b21b      	sxth	r3, r3
 801f44c:	4a80      	ldr	r2, [pc, #512]	@ (801f650 <USB_ActivateEndpoint+0x2bc>)
 801f44e:	4013      	ands	r3, r2
 801f450:	b21a      	sxth	r2, r3
 801f452:	683b      	ldr	r3, [r7, #0]
 801f454:	781b      	ldrb	r3, [r3, #0]
 801f456:	b21b      	sxth	r3, r3
 801f458:	4313      	orrs	r3, r2
 801f45a:	b21a      	sxth	r2, r3
 801f45c:	2166      	movs	r1, #102	@ 0x66
 801f45e:	187b      	adds	r3, r7, r1
 801f460:	801a      	strh	r2, [r3, #0]
 801f462:	687a      	ldr	r2, [r7, #4]
 801f464:	683b      	ldr	r3, [r7, #0]
 801f466:	781b      	ldrb	r3, [r3, #0]
 801f468:	009b      	lsls	r3, r3, #2
 801f46a:	18d3      	adds	r3, r2, r3
 801f46c:	187a      	adds	r2, r7, r1
 801f46e:	8812      	ldrh	r2, [r2, #0]
 801f470:	4976      	ldr	r1, [pc, #472]	@ (801f64c <USB_ActivateEndpoint+0x2b8>)
 801f472:	430a      	orrs	r2, r1
 801f474:	b292      	uxth	r2, r2
 801f476:	801a      	strh	r2, [r3, #0]

  if (ep->doublebuffer == 0U)
 801f478:	683b      	ldr	r3, [r7, #0]
 801f47a:	7b1b      	ldrb	r3, [r3, #12]
 801f47c:	2b00      	cmp	r3, #0
 801f47e:	d000      	beq.n	801f482 <USB_ActivateEndpoint+0xee>
 801f480:	e178      	b.n	801f774 <USB_ActivateEndpoint+0x3e0>
  {
    if (ep->is_in != 0U)
 801f482:	683b      	ldr	r3, [r7, #0]
 801f484:	785b      	ldrb	r3, [r3, #1]
 801f486:	2b00      	cmp	r3, #0
 801f488:	d100      	bne.n	801f48c <USB_ActivateEndpoint+0xf8>
 801f48a:	e07a      	b.n	801f582 <USB_ActivateEndpoint+0x1ee>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 801f48c:	687b      	ldr	r3, [r7, #4]
 801f48e:	61bb      	str	r3, [r7, #24]
 801f490:	687b      	ldr	r3, [r7, #4]
 801f492:	2250      	movs	r2, #80	@ 0x50
 801f494:	5a9b      	ldrh	r3, [r3, r2]
 801f496:	b29b      	uxth	r3, r3
 801f498:	001a      	movs	r2, r3
 801f49a:	69bb      	ldr	r3, [r7, #24]
 801f49c:	189b      	adds	r3, r3, r2
 801f49e:	61bb      	str	r3, [r7, #24]
 801f4a0:	683b      	ldr	r3, [r7, #0]
 801f4a2:	781b      	ldrb	r3, [r3, #0]
 801f4a4:	00da      	lsls	r2, r3, #3
 801f4a6:	69bb      	ldr	r3, [r7, #24]
 801f4a8:	18d3      	adds	r3, r2, r3
 801f4aa:	2280      	movs	r2, #128	@ 0x80
 801f4ac:	00d2      	lsls	r2, r2, #3
 801f4ae:	4694      	mov	ip, r2
 801f4b0:	4463      	add	r3, ip
 801f4b2:	617b      	str	r3, [r7, #20]
 801f4b4:	683b      	ldr	r3, [r7, #0]
 801f4b6:	88db      	ldrh	r3, [r3, #6]
 801f4b8:	085b      	lsrs	r3, r3, #1
 801f4ba:	b29b      	uxth	r3, r3
 801f4bc:	18db      	adds	r3, r3, r3
 801f4be:	b29a      	uxth	r2, r3
 801f4c0:	697b      	ldr	r3, [r7, #20]
 801f4c2:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 801f4c4:	687a      	ldr	r2, [r7, #4]
 801f4c6:	683b      	ldr	r3, [r7, #0]
 801f4c8:	781b      	ldrb	r3, [r3, #0]
 801f4ca:	009b      	lsls	r3, r3, #2
 801f4cc:	18d2      	adds	r2, r2, r3
 801f4ce:	2112      	movs	r1, #18
 801f4d0:	187b      	adds	r3, r7, r1
 801f4d2:	8812      	ldrh	r2, [r2, #0]
 801f4d4:	801a      	strh	r2, [r3, #0]
 801f4d6:	187b      	adds	r3, r7, r1
 801f4d8:	881b      	ldrh	r3, [r3, #0]
 801f4da:	2240      	movs	r2, #64	@ 0x40
 801f4dc:	4013      	ands	r3, r2
 801f4de:	d016      	beq.n	801f50e <USB_ActivateEndpoint+0x17a>
 801f4e0:	687a      	ldr	r2, [r7, #4]
 801f4e2:	683b      	ldr	r3, [r7, #0]
 801f4e4:	781b      	ldrb	r3, [r3, #0]
 801f4e6:	009b      	lsls	r3, r3, #2
 801f4e8:	18d3      	adds	r3, r2, r3
 801f4ea:	881b      	ldrh	r3, [r3, #0]
 801f4ec:	b29a      	uxth	r2, r3
 801f4ee:	2010      	movs	r0, #16
 801f4f0:	183b      	adds	r3, r7, r0
 801f4f2:	4957      	ldr	r1, [pc, #348]	@ (801f650 <USB_ActivateEndpoint+0x2bc>)
 801f4f4:	400a      	ands	r2, r1
 801f4f6:	801a      	strh	r2, [r3, #0]
 801f4f8:	687a      	ldr	r2, [r7, #4]
 801f4fa:	683b      	ldr	r3, [r7, #0]
 801f4fc:	781b      	ldrb	r3, [r3, #0]
 801f4fe:	009b      	lsls	r3, r3, #2
 801f500:	18d3      	adds	r3, r2, r3
 801f502:	183a      	adds	r2, r7, r0
 801f504:	8812      	ldrh	r2, [r2, #0]
 801f506:	4953      	ldr	r1, [pc, #332]	@ (801f654 <USB_ActivateEndpoint+0x2c0>)
 801f508:	430a      	orrs	r2, r1
 801f50a:	b292      	uxth	r2, r2
 801f50c:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 801f50e:	683b      	ldr	r3, [r7, #0]
 801f510:	78db      	ldrb	r3, [r3, #3]
 801f512:	2b01      	cmp	r3, #1
 801f514:	d01d      	beq.n	801f552 <USB_ActivateEndpoint+0x1be>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 801f516:	687a      	ldr	r2, [r7, #4]
 801f518:	683b      	ldr	r3, [r7, #0]
 801f51a:	781b      	ldrb	r3, [r3, #0]
 801f51c:	009b      	lsls	r3, r3, #2
 801f51e:	18d3      	adds	r3, r2, r3
 801f520:	881b      	ldrh	r3, [r3, #0]
 801f522:	b29a      	uxth	r2, r3
 801f524:	200c      	movs	r0, #12
 801f526:	183b      	adds	r3, r7, r0
 801f528:	494b      	ldr	r1, [pc, #300]	@ (801f658 <USB_ActivateEndpoint+0x2c4>)
 801f52a:	400a      	ands	r2, r1
 801f52c:	801a      	strh	r2, [r3, #0]
 801f52e:	183b      	adds	r3, r7, r0
 801f530:	183a      	adds	r2, r7, r0
 801f532:	8812      	ldrh	r2, [r2, #0]
 801f534:	2120      	movs	r1, #32
 801f536:	404a      	eors	r2, r1
 801f538:	801a      	strh	r2, [r3, #0]
 801f53a:	687a      	ldr	r2, [r7, #4]
 801f53c:	683b      	ldr	r3, [r7, #0]
 801f53e:	781b      	ldrb	r3, [r3, #0]
 801f540:	009b      	lsls	r3, r3, #2
 801f542:	18d3      	adds	r3, r2, r3
 801f544:	183a      	adds	r2, r7, r0
 801f546:	8812      	ldrh	r2, [r2, #0]
 801f548:	4940      	ldr	r1, [pc, #256]	@ (801f64c <USB_ActivateEndpoint+0x2b8>)
 801f54a:	430a      	orrs	r2, r1
 801f54c:	b292      	uxth	r2, r2
 801f54e:	801a      	strh	r2, [r3, #0]
 801f550:	e2b4      	b.n	801fabc <USB_ActivateEndpoint+0x728>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 801f552:	687a      	ldr	r2, [r7, #4]
 801f554:	683b      	ldr	r3, [r7, #0]
 801f556:	781b      	ldrb	r3, [r3, #0]
 801f558:	009b      	lsls	r3, r3, #2
 801f55a:	18d3      	adds	r3, r2, r3
 801f55c:	881b      	ldrh	r3, [r3, #0]
 801f55e:	b29a      	uxth	r2, r3
 801f560:	200e      	movs	r0, #14
 801f562:	183b      	adds	r3, r7, r0
 801f564:	493c      	ldr	r1, [pc, #240]	@ (801f658 <USB_ActivateEndpoint+0x2c4>)
 801f566:	400a      	ands	r2, r1
 801f568:	801a      	strh	r2, [r3, #0]
 801f56a:	687a      	ldr	r2, [r7, #4]
 801f56c:	683b      	ldr	r3, [r7, #0]
 801f56e:	781b      	ldrb	r3, [r3, #0]
 801f570:	009b      	lsls	r3, r3, #2
 801f572:	18d3      	adds	r3, r2, r3
 801f574:	183a      	adds	r2, r7, r0
 801f576:	8812      	ldrh	r2, [r2, #0]
 801f578:	4934      	ldr	r1, [pc, #208]	@ (801f64c <USB_ActivateEndpoint+0x2b8>)
 801f57a:	430a      	orrs	r2, r1
 801f57c:	b292      	uxth	r2, r2
 801f57e:	801a      	strh	r2, [r3, #0]
 801f580:	e29c      	b.n	801fabc <USB_ActivateEndpoint+0x728>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 801f582:	687b      	ldr	r3, [r7, #4]
 801f584:	633b      	str	r3, [r7, #48]	@ 0x30
 801f586:	687b      	ldr	r3, [r7, #4]
 801f588:	2250      	movs	r2, #80	@ 0x50
 801f58a:	5a9b      	ldrh	r3, [r3, r2]
 801f58c:	b29b      	uxth	r3, r3
 801f58e:	001a      	movs	r2, r3
 801f590:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801f592:	189b      	adds	r3, r3, r2
 801f594:	633b      	str	r3, [r7, #48]	@ 0x30
 801f596:	683b      	ldr	r3, [r7, #0]
 801f598:	781b      	ldrb	r3, [r3, #0]
 801f59a:	00da      	lsls	r2, r3, #3
 801f59c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801f59e:	18d3      	adds	r3, r2, r3
 801f5a0:	4a2e      	ldr	r2, [pc, #184]	@ (801f65c <USB_ActivateEndpoint+0x2c8>)
 801f5a2:	4694      	mov	ip, r2
 801f5a4:	4463      	add	r3, ip
 801f5a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801f5a8:	683b      	ldr	r3, [r7, #0]
 801f5aa:	88db      	ldrh	r3, [r3, #6]
 801f5ac:	085b      	lsrs	r3, r3, #1
 801f5ae:	b29b      	uxth	r3, r3
 801f5b0:	18db      	adds	r3, r3, r3
 801f5b2:	b29a      	uxth	r2, r3
 801f5b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801f5b6:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 801f5b8:	687b      	ldr	r3, [r7, #4]
 801f5ba:	62bb      	str	r3, [r7, #40]	@ 0x28
 801f5bc:	687b      	ldr	r3, [r7, #4]
 801f5be:	2250      	movs	r2, #80	@ 0x50
 801f5c0:	5a9b      	ldrh	r3, [r3, r2]
 801f5c2:	b29b      	uxth	r3, r3
 801f5c4:	001a      	movs	r2, r3
 801f5c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801f5c8:	189b      	adds	r3, r3, r2
 801f5ca:	62bb      	str	r3, [r7, #40]	@ 0x28
 801f5cc:	683b      	ldr	r3, [r7, #0]
 801f5ce:	781b      	ldrb	r3, [r3, #0]
 801f5d0:	00da      	lsls	r2, r3, #3
 801f5d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801f5d4:	18d3      	adds	r3, r2, r3
 801f5d6:	4a22      	ldr	r2, [pc, #136]	@ (801f660 <USB_ActivateEndpoint+0x2cc>)
 801f5d8:	4694      	mov	ip, r2
 801f5da:	4463      	add	r3, ip
 801f5dc:	627b      	str	r3, [r7, #36]	@ 0x24
 801f5de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801f5e0:	881b      	ldrh	r3, [r3, #0]
 801f5e2:	b29b      	uxth	r3, r3
 801f5e4:	059b      	lsls	r3, r3, #22
 801f5e6:	0d9b      	lsrs	r3, r3, #22
 801f5e8:	b29a      	uxth	r2, r3
 801f5ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801f5ec:	801a      	strh	r2, [r3, #0]
 801f5ee:	683b      	ldr	r3, [r7, #0]
 801f5f0:	691b      	ldr	r3, [r3, #16]
 801f5f2:	2b3e      	cmp	r3, #62	@ 0x3e
 801f5f4:	d91a      	bls.n	801f62c <USB_ActivateEndpoint+0x298>
 801f5f6:	683b      	ldr	r3, [r7, #0]
 801f5f8:	691b      	ldr	r3, [r3, #16]
 801f5fa:	095b      	lsrs	r3, r3, #5
 801f5fc:	66bb      	str	r3, [r7, #104]	@ 0x68
 801f5fe:	683b      	ldr	r3, [r7, #0]
 801f600:	691b      	ldr	r3, [r3, #16]
 801f602:	221f      	movs	r2, #31
 801f604:	4013      	ands	r3, r2
 801f606:	d102      	bne.n	801f60e <USB_ActivateEndpoint+0x27a>
 801f608:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801f60a:	3b01      	subs	r3, #1
 801f60c:	66bb      	str	r3, [r7, #104]	@ 0x68
 801f60e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801f610:	881b      	ldrh	r3, [r3, #0]
 801f612:	b29a      	uxth	r2, r3
 801f614:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801f616:	b29b      	uxth	r3, r3
 801f618:	029b      	lsls	r3, r3, #10
 801f61a:	b29b      	uxth	r3, r3
 801f61c:	4313      	orrs	r3, r2
 801f61e:	b29b      	uxth	r3, r3
 801f620:	4a10      	ldr	r2, [pc, #64]	@ (801f664 <USB_ActivateEndpoint+0x2d0>)
 801f622:	4313      	orrs	r3, r2
 801f624:	b29a      	uxth	r2, r3
 801f626:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801f628:	801a      	strh	r2, [r3, #0]
 801f62a:	e034      	b.n	801f696 <USB_ActivateEndpoint+0x302>
 801f62c:	683b      	ldr	r3, [r7, #0]
 801f62e:	691b      	ldr	r3, [r3, #16]
 801f630:	2b00      	cmp	r3, #0
 801f632:	d119      	bne.n	801f668 <USB_ActivateEndpoint+0x2d4>
 801f634:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801f636:	881b      	ldrh	r3, [r3, #0]
 801f638:	b29b      	uxth	r3, r3
 801f63a:	4a0a      	ldr	r2, [pc, #40]	@ (801f664 <USB_ActivateEndpoint+0x2d0>)
 801f63c:	4313      	orrs	r3, r2
 801f63e:	b29a      	uxth	r2, r3
 801f640:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801f642:	801a      	strh	r2, [r3, #0]
 801f644:	e027      	b.n	801f696 <USB_ActivateEndpoint+0x302>
 801f646:	46c0      	nop			@ (mov r8, r8)
 801f648:	ffff898f 	.word	0xffff898f
 801f64c:	ffff8080 	.word	0xffff8080
 801f650:	ffff8f8f 	.word	0xffff8f8f
 801f654:	ffff80c0 	.word	0xffff80c0
 801f658:	ffff8fbf 	.word	0xffff8fbf
 801f65c:	00000404 	.word	0x00000404
 801f660:	00000406 	.word	0x00000406
 801f664:	ffff8000 	.word	0xffff8000
 801f668:	683b      	ldr	r3, [r7, #0]
 801f66a:	691b      	ldr	r3, [r3, #16]
 801f66c:	085b      	lsrs	r3, r3, #1
 801f66e:	66bb      	str	r3, [r7, #104]	@ 0x68
 801f670:	683b      	ldr	r3, [r7, #0]
 801f672:	691b      	ldr	r3, [r3, #16]
 801f674:	2201      	movs	r2, #1
 801f676:	4013      	ands	r3, r2
 801f678:	d002      	beq.n	801f680 <USB_ActivateEndpoint+0x2ec>
 801f67a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801f67c:	3301      	adds	r3, #1
 801f67e:	66bb      	str	r3, [r7, #104]	@ 0x68
 801f680:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801f682:	881b      	ldrh	r3, [r3, #0]
 801f684:	b29a      	uxth	r2, r3
 801f686:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801f688:	b29b      	uxth	r3, r3
 801f68a:	029b      	lsls	r3, r3, #10
 801f68c:	b29b      	uxth	r3, r3
 801f68e:	4313      	orrs	r3, r2
 801f690:	b29a      	uxth	r2, r3
 801f692:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801f694:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 801f696:	687a      	ldr	r2, [r7, #4]
 801f698:	683b      	ldr	r3, [r7, #0]
 801f69a:	781b      	ldrb	r3, [r3, #0]
 801f69c:	009b      	lsls	r3, r3, #2
 801f69e:	18d2      	adds	r2, r2, r3
 801f6a0:	2122      	movs	r1, #34	@ 0x22
 801f6a2:	187b      	adds	r3, r7, r1
 801f6a4:	8812      	ldrh	r2, [r2, #0]
 801f6a6:	801a      	strh	r2, [r3, #0]
 801f6a8:	187b      	adds	r3, r7, r1
 801f6aa:	881a      	ldrh	r2, [r3, #0]
 801f6ac:	2380      	movs	r3, #128	@ 0x80
 801f6ae:	01db      	lsls	r3, r3, #7
 801f6b0:	4013      	ands	r3, r2
 801f6b2:	d016      	beq.n	801f6e2 <USB_ActivateEndpoint+0x34e>
 801f6b4:	687a      	ldr	r2, [r7, #4]
 801f6b6:	683b      	ldr	r3, [r7, #0]
 801f6b8:	781b      	ldrb	r3, [r3, #0]
 801f6ba:	009b      	lsls	r3, r3, #2
 801f6bc:	18d3      	adds	r3, r2, r3
 801f6be:	881b      	ldrh	r3, [r3, #0]
 801f6c0:	b29a      	uxth	r2, r3
 801f6c2:	2020      	movs	r0, #32
 801f6c4:	183b      	adds	r3, r7, r0
 801f6c6:	49dd      	ldr	r1, [pc, #884]	@ (801fa3c <USB_ActivateEndpoint+0x6a8>)
 801f6c8:	400a      	ands	r2, r1
 801f6ca:	801a      	strh	r2, [r3, #0]
 801f6cc:	687a      	ldr	r2, [r7, #4]
 801f6ce:	683b      	ldr	r3, [r7, #0]
 801f6d0:	781b      	ldrb	r3, [r3, #0]
 801f6d2:	009b      	lsls	r3, r3, #2
 801f6d4:	18d3      	adds	r3, r2, r3
 801f6d6:	183a      	adds	r2, r7, r0
 801f6d8:	8812      	ldrh	r2, [r2, #0]
 801f6da:	49d9      	ldr	r1, [pc, #868]	@ (801fa40 <USB_ActivateEndpoint+0x6ac>)
 801f6dc:	430a      	orrs	r2, r1
 801f6de:	b292      	uxth	r2, r2
 801f6e0:	801a      	strh	r2, [r3, #0]

      if (ep->num == 0U)
 801f6e2:	683b      	ldr	r3, [r7, #0]
 801f6e4:	781b      	ldrb	r3, [r3, #0]
 801f6e6:	2b00      	cmp	r3, #0
 801f6e8:	d125      	bne.n	801f736 <USB_ActivateEndpoint+0x3a2>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 801f6ea:	687a      	ldr	r2, [r7, #4]
 801f6ec:	683b      	ldr	r3, [r7, #0]
 801f6ee:	781b      	ldrb	r3, [r3, #0]
 801f6f0:	009b      	lsls	r3, r3, #2
 801f6f2:	18d3      	adds	r3, r2, r3
 801f6f4:	881b      	ldrh	r3, [r3, #0]
 801f6f6:	b29a      	uxth	r2, r3
 801f6f8:	201c      	movs	r0, #28
 801f6fa:	183b      	adds	r3, r7, r0
 801f6fc:	49d1      	ldr	r1, [pc, #836]	@ (801fa44 <USB_ActivateEndpoint+0x6b0>)
 801f6fe:	400a      	ands	r2, r1
 801f700:	801a      	strh	r2, [r3, #0]
 801f702:	183b      	adds	r3, r7, r0
 801f704:	183a      	adds	r2, r7, r0
 801f706:	8812      	ldrh	r2, [r2, #0]
 801f708:	2180      	movs	r1, #128	@ 0x80
 801f70a:	0149      	lsls	r1, r1, #5
 801f70c:	404a      	eors	r2, r1
 801f70e:	801a      	strh	r2, [r3, #0]
 801f710:	183b      	adds	r3, r7, r0
 801f712:	183a      	adds	r2, r7, r0
 801f714:	8812      	ldrh	r2, [r2, #0]
 801f716:	2180      	movs	r1, #128	@ 0x80
 801f718:	0189      	lsls	r1, r1, #6
 801f71a:	404a      	eors	r2, r1
 801f71c:	801a      	strh	r2, [r3, #0]
 801f71e:	687a      	ldr	r2, [r7, #4]
 801f720:	683b      	ldr	r3, [r7, #0]
 801f722:	781b      	ldrb	r3, [r3, #0]
 801f724:	009b      	lsls	r3, r3, #2
 801f726:	18d3      	adds	r3, r2, r3
 801f728:	183a      	adds	r2, r7, r0
 801f72a:	8812      	ldrh	r2, [r2, #0]
 801f72c:	49c6      	ldr	r1, [pc, #792]	@ (801fa48 <USB_ActivateEndpoint+0x6b4>)
 801f72e:	430a      	orrs	r2, r1
 801f730:	b292      	uxth	r2, r2
 801f732:	801a      	strh	r2, [r3, #0]
 801f734:	e1c2      	b.n	801fabc <USB_ActivateEndpoint+0x728>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 801f736:	687a      	ldr	r2, [r7, #4]
 801f738:	683b      	ldr	r3, [r7, #0]
 801f73a:	781b      	ldrb	r3, [r3, #0]
 801f73c:	009b      	lsls	r3, r3, #2
 801f73e:	18d3      	adds	r3, r2, r3
 801f740:	881b      	ldrh	r3, [r3, #0]
 801f742:	b29a      	uxth	r2, r3
 801f744:	201e      	movs	r0, #30
 801f746:	183b      	adds	r3, r7, r0
 801f748:	49be      	ldr	r1, [pc, #760]	@ (801fa44 <USB_ActivateEndpoint+0x6b0>)
 801f74a:	400a      	ands	r2, r1
 801f74c:	801a      	strh	r2, [r3, #0]
 801f74e:	183b      	adds	r3, r7, r0
 801f750:	183a      	adds	r2, r7, r0
 801f752:	8812      	ldrh	r2, [r2, #0]
 801f754:	2180      	movs	r1, #128	@ 0x80
 801f756:	0189      	lsls	r1, r1, #6
 801f758:	404a      	eors	r2, r1
 801f75a:	801a      	strh	r2, [r3, #0]
 801f75c:	687a      	ldr	r2, [r7, #4]
 801f75e:	683b      	ldr	r3, [r7, #0]
 801f760:	781b      	ldrb	r3, [r3, #0]
 801f762:	009b      	lsls	r3, r3, #2
 801f764:	18d3      	adds	r3, r2, r3
 801f766:	183a      	adds	r2, r7, r0
 801f768:	8812      	ldrh	r2, [r2, #0]
 801f76a:	49b7      	ldr	r1, [pc, #732]	@ (801fa48 <USB_ActivateEndpoint+0x6b4>)
 801f76c:	430a      	orrs	r2, r1
 801f76e:	b292      	uxth	r2, r2
 801f770:	801a      	strh	r2, [r3, #0]
 801f772:	e1a3      	b.n	801fabc <USB_ActivateEndpoint+0x728>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 801f774:	683b      	ldr	r3, [r7, #0]
 801f776:	78db      	ldrb	r3, [r3, #3]
 801f778:	2b02      	cmp	r3, #2
 801f77a:	d117      	bne.n	801f7ac <USB_ActivateEndpoint+0x418>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 801f77c:	687a      	ldr	r2, [r7, #4]
 801f77e:	683b      	ldr	r3, [r7, #0]
 801f780:	781b      	ldrb	r3, [r3, #0]
 801f782:	009b      	lsls	r3, r3, #2
 801f784:	18d3      	adds	r3, r2, r3
 801f786:	881b      	ldrh	r3, [r3, #0]
 801f788:	b29a      	uxth	r2, r3
 801f78a:	2062      	movs	r0, #98	@ 0x62
 801f78c:	183b      	adds	r3, r7, r0
 801f78e:	49ab      	ldr	r1, [pc, #684]	@ (801fa3c <USB_ActivateEndpoint+0x6a8>)
 801f790:	400a      	ands	r2, r1
 801f792:	801a      	strh	r2, [r3, #0]
 801f794:	687a      	ldr	r2, [r7, #4]
 801f796:	683b      	ldr	r3, [r7, #0]
 801f798:	781b      	ldrb	r3, [r3, #0]
 801f79a:	009b      	lsls	r3, r3, #2
 801f79c:	18d3      	adds	r3, r2, r3
 801f79e:	183a      	adds	r2, r7, r0
 801f7a0:	8812      	ldrh	r2, [r2, #0]
 801f7a2:	49aa      	ldr	r1, [pc, #680]	@ (801fa4c <USB_ActivateEndpoint+0x6b8>)
 801f7a4:	430a      	orrs	r2, r1
 801f7a6:	b292      	uxth	r2, r2
 801f7a8:	801a      	strh	r2, [r3, #0]
 801f7aa:	e016      	b.n	801f7da <USB_ActivateEndpoint+0x446>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 801f7ac:	687a      	ldr	r2, [r7, #4]
 801f7ae:	683b      	ldr	r3, [r7, #0]
 801f7b0:	781b      	ldrb	r3, [r3, #0]
 801f7b2:	009b      	lsls	r3, r3, #2
 801f7b4:	18d3      	adds	r3, r2, r3
 801f7b6:	881b      	ldrh	r3, [r3, #0]
 801f7b8:	b29a      	uxth	r2, r3
 801f7ba:	2064      	movs	r0, #100	@ 0x64
 801f7bc:	183b      	adds	r3, r7, r0
 801f7be:	49a4      	ldr	r1, [pc, #656]	@ (801fa50 <USB_ActivateEndpoint+0x6bc>)
 801f7c0:	400a      	ands	r2, r1
 801f7c2:	801a      	strh	r2, [r3, #0]
 801f7c4:	687a      	ldr	r2, [r7, #4]
 801f7c6:	683b      	ldr	r3, [r7, #0]
 801f7c8:	781b      	ldrb	r3, [r3, #0]
 801f7ca:	009b      	lsls	r3, r3, #2
 801f7cc:	18d3      	adds	r3, r2, r3
 801f7ce:	183a      	adds	r2, r7, r0
 801f7d0:	8812      	ldrh	r2, [r2, #0]
 801f7d2:	499d      	ldr	r1, [pc, #628]	@ (801fa48 <USB_ActivateEndpoint+0x6b4>)
 801f7d4:	430a      	orrs	r2, r1
 801f7d6:	b292      	uxth	r2, r2
 801f7d8:	801a      	strh	r2, [r3, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 801f7da:	687b      	ldr	r3, [r7, #4]
 801f7dc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 801f7de:	687b      	ldr	r3, [r7, #4]
 801f7e0:	2250      	movs	r2, #80	@ 0x50
 801f7e2:	5a9b      	ldrh	r3, [r3, r2]
 801f7e4:	b29b      	uxth	r3, r3
 801f7e6:	001a      	movs	r2, r3
 801f7e8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801f7ea:	189b      	adds	r3, r3, r2
 801f7ec:	65fb      	str	r3, [r7, #92]	@ 0x5c
 801f7ee:	683b      	ldr	r3, [r7, #0]
 801f7f0:	781b      	ldrb	r3, [r3, #0]
 801f7f2:	00da      	lsls	r2, r3, #3
 801f7f4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801f7f6:	18d3      	adds	r3, r2, r3
 801f7f8:	2280      	movs	r2, #128	@ 0x80
 801f7fa:	00d2      	lsls	r2, r2, #3
 801f7fc:	4694      	mov	ip, r2
 801f7fe:	4463      	add	r3, ip
 801f800:	65bb      	str	r3, [r7, #88]	@ 0x58
 801f802:	683b      	ldr	r3, [r7, #0]
 801f804:	891b      	ldrh	r3, [r3, #8]
 801f806:	085b      	lsrs	r3, r3, #1
 801f808:	b29b      	uxth	r3, r3
 801f80a:	18db      	adds	r3, r3, r3
 801f80c:	b29a      	uxth	r2, r3
 801f80e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801f810:	801a      	strh	r2, [r3, #0]
 801f812:	687b      	ldr	r3, [r7, #4]
 801f814:	657b      	str	r3, [r7, #84]	@ 0x54
 801f816:	687b      	ldr	r3, [r7, #4]
 801f818:	2250      	movs	r2, #80	@ 0x50
 801f81a:	5a9b      	ldrh	r3, [r3, r2]
 801f81c:	b29b      	uxth	r3, r3
 801f81e:	001a      	movs	r2, r3
 801f820:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801f822:	189b      	adds	r3, r3, r2
 801f824:	657b      	str	r3, [r7, #84]	@ 0x54
 801f826:	683b      	ldr	r3, [r7, #0]
 801f828:	781b      	ldrb	r3, [r3, #0]
 801f82a:	00da      	lsls	r2, r3, #3
 801f82c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801f82e:	18d3      	adds	r3, r2, r3
 801f830:	4a88      	ldr	r2, [pc, #544]	@ (801fa54 <USB_ActivateEndpoint+0x6c0>)
 801f832:	4694      	mov	ip, r2
 801f834:	4463      	add	r3, ip
 801f836:	653b      	str	r3, [r7, #80]	@ 0x50
 801f838:	683b      	ldr	r3, [r7, #0]
 801f83a:	895b      	ldrh	r3, [r3, #10]
 801f83c:	085b      	lsrs	r3, r3, #1
 801f83e:	b29b      	uxth	r3, r3
 801f840:	18db      	adds	r3, r3, r3
 801f842:	b29a      	uxth	r2, r3
 801f844:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801f846:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 801f848:	683b      	ldr	r3, [r7, #0]
 801f84a:	785b      	ldrb	r3, [r3, #1]
 801f84c:	2b00      	cmp	r3, #0
 801f84e:	d000      	beq.n	801f852 <USB_ActivateEndpoint+0x4be>
 801f850:	e087      	b.n	801f962 <USB_ActivateEndpoint+0x5ce>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 801f852:	687a      	ldr	r2, [r7, #4]
 801f854:	683b      	ldr	r3, [r7, #0]
 801f856:	781b      	ldrb	r3, [r3, #0]
 801f858:	009b      	lsls	r3, r3, #2
 801f85a:	18d2      	adds	r2, r2, r3
 801f85c:	2140      	movs	r1, #64	@ 0x40
 801f85e:	187b      	adds	r3, r7, r1
 801f860:	8812      	ldrh	r2, [r2, #0]
 801f862:	801a      	strh	r2, [r3, #0]
 801f864:	187b      	adds	r3, r7, r1
 801f866:	881a      	ldrh	r2, [r3, #0]
 801f868:	2380      	movs	r3, #128	@ 0x80
 801f86a:	01db      	lsls	r3, r3, #7
 801f86c:	4013      	ands	r3, r2
 801f86e:	d016      	beq.n	801f89e <USB_ActivateEndpoint+0x50a>
 801f870:	687a      	ldr	r2, [r7, #4]
 801f872:	683b      	ldr	r3, [r7, #0]
 801f874:	781b      	ldrb	r3, [r3, #0]
 801f876:	009b      	lsls	r3, r3, #2
 801f878:	18d3      	adds	r3, r2, r3
 801f87a:	881b      	ldrh	r3, [r3, #0]
 801f87c:	b29a      	uxth	r2, r3
 801f87e:	203e      	movs	r0, #62	@ 0x3e
 801f880:	183b      	adds	r3, r7, r0
 801f882:	496e      	ldr	r1, [pc, #440]	@ (801fa3c <USB_ActivateEndpoint+0x6a8>)
 801f884:	400a      	ands	r2, r1
 801f886:	801a      	strh	r2, [r3, #0]
 801f888:	687a      	ldr	r2, [r7, #4]
 801f88a:	683b      	ldr	r3, [r7, #0]
 801f88c:	781b      	ldrb	r3, [r3, #0]
 801f88e:	009b      	lsls	r3, r3, #2
 801f890:	18d3      	adds	r3, r2, r3
 801f892:	183a      	adds	r2, r7, r0
 801f894:	8812      	ldrh	r2, [r2, #0]
 801f896:	496a      	ldr	r1, [pc, #424]	@ (801fa40 <USB_ActivateEndpoint+0x6ac>)
 801f898:	430a      	orrs	r2, r1
 801f89a:	b292      	uxth	r2, r2
 801f89c:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 801f89e:	687a      	ldr	r2, [r7, #4]
 801f8a0:	683b      	ldr	r3, [r7, #0]
 801f8a2:	781b      	ldrb	r3, [r3, #0]
 801f8a4:	009b      	lsls	r3, r3, #2
 801f8a6:	18d2      	adds	r2, r2, r3
 801f8a8:	213c      	movs	r1, #60	@ 0x3c
 801f8aa:	187b      	adds	r3, r7, r1
 801f8ac:	8812      	ldrh	r2, [r2, #0]
 801f8ae:	801a      	strh	r2, [r3, #0]
 801f8b0:	187b      	adds	r3, r7, r1
 801f8b2:	881b      	ldrh	r3, [r3, #0]
 801f8b4:	2240      	movs	r2, #64	@ 0x40
 801f8b6:	4013      	ands	r3, r2
 801f8b8:	d016      	beq.n	801f8e8 <USB_ActivateEndpoint+0x554>
 801f8ba:	687a      	ldr	r2, [r7, #4]
 801f8bc:	683b      	ldr	r3, [r7, #0]
 801f8be:	781b      	ldrb	r3, [r3, #0]
 801f8c0:	009b      	lsls	r3, r3, #2
 801f8c2:	18d3      	adds	r3, r2, r3
 801f8c4:	881b      	ldrh	r3, [r3, #0]
 801f8c6:	b29a      	uxth	r2, r3
 801f8c8:	203a      	movs	r0, #58	@ 0x3a
 801f8ca:	183b      	adds	r3, r7, r0
 801f8cc:	495b      	ldr	r1, [pc, #364]	@ (801fa3c <USB_ActivateEndpoint+0x6a8>)
 801f8ce:	400a      	ands	r2, r1
 801f8d0:	801a      	strh	r2, [r3, #0]
 801f8d2:	687a      	ldr	r2, [r7, #4]
 801f8d4:	683b      	ldr	r3, [r7, #0]
 801f8d6:	781b      	ldrb	r3, [r3, #0]
 801f8d8:	009b      	lsls	r3, r3, #2
 801f8da:	18d3      	adds	r3, r2, r3
 801f8dc:	183a      	adds	r2, r7, r0
 801f8de:	8812      	ldrh	r2, [r2, #0]
 801f8e0:	495d      	ldr	r1, [pc, #372]	@ (801fa58 <USB_ActivateEndpoint+0x6c4>)
 801f8e2:	430a      	orrs	r2, r1
 801f8e4:	b292      	uxth	r2, r2
 801f8e6:	801a      	strh	r2, [r3, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 801f8e8:	687a      	ldr	r2, [r7, #4]
 801f8ea:	683b      	ldr	r3, [r7, #0]
 801f8ec:	781b      	ldrb	r3, [r3, #0]
 801f8ee:	009b      	lsls	r3, r3, #2
 801f8f0:	18d3      	adds	r3, r2, r3
 801f8f2:	881b      	ldrh	r3, [r3, #0]
 801f8f4:	b29a      	uxth	r2, r3
 801f8f6:	2038      	movs	r0, #56	@ 0x38
 801f8f8:	183b      	adds	r3, r7, r0
 801f8fa:	4952      	ldr	r1, [pc, #328]	@ (801fa44 <USB_ActivateEndpoint+0x6b0>)
 801f8fc:	400a      	ands	r2, r1
 801f8fe:	801a      	strh	r2, [r3, #0]
 801f900:	183b      	adds	r3, r7, r0
 801f902:	183a      	adds	r2, r7, r0
 801f904:	8812      	ldrh	r2, [r2, #0]
 801f906:	2180      	movs	r1, #128	@ 0x80
 801f908:	0149      	lsls	r1, r1, #5
 801f90a:	404a      	eors	r2, r1
 801f90c:	801a      	strh	r2, [r3, #0]
 801f90e:	183b      	adds	r3, r7, r0
 801f910:	183a      	adds	r2, r7, r0
 801f912:	8812      	ldrh	r2, [r2, #0]
 801f914:	2180      	movs	r1, #128	@ 0x80
 801f916:	0189      	lsls	r1, r1, #6
 801f918:	404a      	eors	r2, r1
 801f91a:	801a      	strh	r2, [r3, #0]
 801f91c:	687a      	ldr	r2, [r7, #4]
 801f91e:	683b      	ldr	r3, [r7, #0]
 801f920:	781b      	ldrb	r3, [r3, #0]
 801f922:	009b      	lsls	r3, r3, #2
 801f924:	18d3      	adds	r3, r2, r3
 801f926:	183a      	adds	r2, r7, r0
 801f928:	8812      	ldrh	r2, [r2, #0]
 801f92a:	4947      	ldr	r1, [pc, #284]	@ (801fa48 <USB_ActivateEndpoint+0x6b4>)
 801f92c:	430a      	orrs	r2, r1
 801f92e:	b292      	uxth	r2, r2
 801f930:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 801f932:	687a      	ldr	r2, [r7, #4]
 801f934:	683b      	ldr	r3, [r7, #0]
 801f936:	781b      	ldrb	r3, [r3, #0]
 801f938:	009b      	lsls	r3, r3, #2
 801f93a:	18d3      	adds	r3, r2, r3
 801f93c:	881b      	ldrh	r3, [r3, #0]
 801f93e:	b29a      	uxth	r2, r3
 801f940:	2036      	movs	r0, #54	@ 0x36
 801f942:	183b      	adds	r3, r7, r0
 801f944:	4945      	ldr	r1, [pc, #276]	@ (801fa5c <USB_ActivateEndpoint+0x6c8>)
 801f946:	400a      	ands	r2, r1
 801f948:	801a      	strh	r2, [r3, #0]
 801f94a:	687a      	ldr	r2, [r7, #4]
 801f94c:	683b      	ldr	r3, [r7, #0]
 801f94e:	781b      	ldrb	r3, [r3, #0]
 801f950:	009b      	lsls	r3, r3, #2
 801f952:	18d3      	adds	r3, r2, r3
 801f954:	183a      	adds	r2, r7, r0
 801f956:	8812      	ldrh	r2, [r2, #0]
 801f958:	493b      	ldr	r1, [pc, #236]	@ (801fa48 <USB_ActivateEndpoint+0x6b4>)
 801f95a:	430a      	orrs	r2, r1
 801f95c:	b292      	uxth	r2, r2
 801f95e:	801a      	strh	r2, [r3, #0]
 801f960:	e0ac      	b.n	801fabc <USB_ActivateEndpoint+0x728>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 801f962:	687a      	ldr	r2, [r7, #4]
 801f964:	683b      	ldr	r3, [r7, #0]
 801f966:	781b      	ldrb	r3, [r3, #0]
 801f968:	009b      	lsls	r3, r3, #2
 801f96a:	18d2      	adds	r2, r2, r3
 801f96c:	214e      	movs	r1, #78	@ 0x4e
 801f96e:	187b      	adds	r3, r7, r1
 801f970:	8812      	ldrh	r2, [r2, #0]
 801f972:	801a      	strh	r2, [r3, #0]
 801f974:	187b      	adds	r3, r7, r1
 801f976:	881a      	ldrh	r2, [r3, #0]
 801f978:	2380      	movs	r3, #128	@ 0x80
 801f97a:	01db      	lsls	r3, r3, #7
 801f97c:	4013      	ands	r3, r2
 801f97e:	d016      	beq.n	801f9ae <USB_ActivateEndpoint+0x61a>
 801f980:	687a      	ldr	r2, [r7, #4]
 801f982:	683b      	ldr	r3, [r7, #0]
 801f984:	781b      	ldrb	r3, [r3, #0]
 801f986:	009b      	lsls	r3, r3, #2
 801f988:	18d3      	adds	r3, r2, r3
 801f98a:	881b      	ldrh	r3, [r3, #0]
 801f98c:	b29a      	uxth	r2, r3
 801f98e:	204c      	movs	r0, #76	@ 0x4c
 801f990:	183b      	adds	r3, r7, r0
 801f992:	492a      	ldr	r1, [pc, #168]	@ (801fa3c <USB_ActivateEndpoint+0x6a8>)
 801f994:	400a      	ands	r2, r1
 801f996:	801a      	strh	r2, [r3, #0]
 801f998:	687a      	ldr	r2, [r7, #4]
 801f99a:	683b      	ldr	r3, [r7, #0]
 801f99c:	781b      	ldrb	r3, [r3, #0]
 801f99e:	009b      	lsls	r3, r3, #2
 801f9a0:	18d3      	adds	r3, r2, r3
 801f9a2:	183a      	adds	r2, r7, r0
 801f9a4:	8812      	ldrh	r2, [r2, #0]
 801f9a6:	4926      	ldr	r1, [pc, #152]	@ (801fa40 <USB_ActivateEndpoint+0x6ac>)
 801f9a8:	430a      	orrs	r2, r1
 801f9aa:	b292      	uxth	r2, r2
 801f9ac:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 801f9ae:	687a      	ldr	r2, [r7, #4]
 801f9b0:	683b      	ldr	r3, [r7, #0]
 801f9b2:	781b      	ldrb	r3, [r3, #0]
 801f9b4:	009b      	lsls	r3, r3, #2
 801f9b6:	18d2      	adds	r2, r2, r3
 801f9b8:	214a      	movs	r1, #74	@ 0x4a
 801f9ba:	187b      	adds	r3, r7, r1
 801f9bc:	8812      	ldrh	r2, [r2, #0]
 801f9be:	801a      	strh	r2, [r3, #0]
 801f9c0:	187b      	adds	r3, r7, r1
 801f9c2:	881b      	ldrh	r3, [r3, #0]
 801f9c4:	2240      	movs	r2, #64	@ 0x40
 801f9c6:	4013      	ands	r3, r2
 801f9c8:	d016      	beq.n	801f9f8 <USB_ActivateEndpoint+0x664>
 801f9ca:	687a      	ldr	r2, [r7, #4]
 801f9cc:	683b      	ldr	r3, [r7, #0]
 801f9ce:	781b      	ldrb	r3, [r3, #0]
 801f9d0:	009b      	lsls	r3, r3, #2
 801f9d2:	18d3      	adds	r3, r2, r3
 801f9d4:	881b      	ldrh	r3, [r3, #0]
 801f9d6:	b29a      	uxth	r2, r3
 801f9d8:	2048      	movs	r0, #72	@ 0x48
 801f9da:	183b      	adds	r3, r7, r0
 801f9dc:	4917      	ldr	r1, [pc, #92]	@ (801fa3c <USB_ActivateEndpoint+0x6a8>)
 801f9de:	400a      	ands	r2, r1
 801f9e0:	801a      	strh	r2, [r3, #0]
 801f9e2:	687a      	ldr	r2, [r7, #4]
 801f9e4:	683b      	ldr	r3, [r7, #0]
 801f9e6:	781b      	ldrb	r3, [r3, #0]
 801f9e8:	009b      	lsls	r3, r3, #2
 801f9ea:	18d3      	adds	r3, r2, r3
 801f9ec:	183a      	adds	r2, r7, r0
 801f9ee:	8812      	ldrh	r2, [r2, #0]
 801f9f0:	4919      	ldr	r1, [pc, #100]	@ (801fa58 <USB_ActivateEndpoint+0x6c4>)
 801f9f2:	430a      	orrs	r2, r1
 801f9f4:	b292      	uxth	r2, r2
 801f9f6:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 801f9f8:	683b      	ldr	r3, [r7, #0]
 801f9fa:	78db      	ldrb	r3, [r3, #3]
 801f9fc:	2b01      	cmp	r3, #1
 801f9fe:	d02f      	beq.n	801fa60 <USB_ActivateEndpoint+0x6cc>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 801fa00:	687a      	ldr	r2, [r7, #4]
 801fa02:	683b      	ldr	r3, [r7, #0]
 801fa04:	781b      	ldrb	r3, [r3, #0]
 801fa06:	009b      	lsls	r3, r3, #2
 801fa08:	18d3      	adds	r3, r2, r3
 801fa0a:	881b      	ldrh	r3, [r3, #0]
 801fa0c:	b29a      	uxth	r2, r3
 801fa0e:	2044      	movs	r0, #68	@ 0x44
 801fa10:	183b      	adds	r3, r7, r0
 801fa12:	4912      	ldr	r1, [pc, #72]	@ (801fa5c <USB_ActivateEndpoint+0x6c8>)
 801fa14:	400a      	ands	r2, r1
 801fa16:	801a      	strh	r2, [r3, #0]
 801fa18:	183b      	adds	r3, r7, r0
 801fa1a:	183a      	adds	r2, r7, r0
 801fa1c:	8812      	ldrh	r2, [r2, #0]
 801fa1e:	2120      	movs	r1, #32
 801fa20:	404a      	eors	r2, r1
 801fa22:	801a      	strh	r2, [r3, #0]
 801fa24:	687a      	ldr	r2, [r7, #4]
 801fa26:	683b      	ldr	r3, [r7, #0]
 801fa28:	781b      	ldrb	r3, [r3, #0]
 801fa2a:	009b      	lsls	r3, r3, #2
 801fa2c:	18d3      	adds	r3, r2, r3
 801fa2e:	183a      	adds	r2, r7, r0
 801fa30:	8812      	ldrh	r2, [r2, #0]
 801fa32:	4905      	ldr	r1, [pc, #20]	@ (801fa48 <USB_ActivateEndpoint+0x6b4>)
 801fa34:	430a      	orrs	r2, r1
 801fa36:	b292      	uxth	r2, r2
 801fa38:	801a      	strh	r2, [r3, #0]
 801fa3a:	e028      	b.n	801fa8e <USB_ActivateEndpoint+0x6fa>
 801fa3c:	ffff8f8f 	.word	0xffff8f8f
 801fa40:	ffffc080 	.word	0xffffc080
 801fa44:	ffffbf8f 	.word	0xffffbf8f
 801fa48:	ffff8080 	.word	0xffff8080
 801fa4c:	ffff8180 	.word	0xffff8180
 801fa50:	ffff8e8f 	.word	0xffff8e8f
 801fa54:	00000404 	.word	0x00000404
 801fa58:	ffff80c0 	.word	0xffff80c0
 801fa5c:	ffff8fbf 	.word	0xffff8fbf
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 801fa60:	687a      	ldr	r2, [r7, #4]
 801fa62:	683b      	ldr	r3, [r7, #0]
 801fa64:	781b      	ldrb	r3, [r3, #0]
 801fa66:	009b      	lsls	r3, r3, #2
 801fa68:	18d3      	adds	r3, r2, r3
 801fa6a:	881b      	ldrh	r3, [r3, #0]
 801fa6c:	b29a      	uxth	r2, r3
 801fa6e:	2046      	movs	r0, #70	@ 0x46
 801fa70:	183b      	adds	r3, r7, r0
 801fa72:	4916      	ldr	r1, [pc, #88]	@ (801facc <USB_ActivateEndpoint+0x738>)
 801fa74:	400a      	ands	r2, r1
 801fa76:	801a      	strh	r2, [r3, #0]
 801fa78:	687a      	ldr	r2, [r7, #4]
 801fa7a:	683b      	ldr	r3, [r7, #0]
 801fa7c:	781b      	ldrb	r3, [r3, #0]
 801fa7e:	009b      	lsls	r3, r3, #2
 801fa80:	18d3      	adds	r3, r2, r3
 801fa82:	183a      	adds	r2, r7, r0
 801fa84:	8812      	ldrh	r2, [r2, #0]
 801fa86:	4912      	ldr	r1, [pc, #72]	@ (801fad0 <USB_ActivateEndpoint+0x73c>)
 801fa88:	430a      	orrs	r2, r1
 801fa8a:	b292      	uxth	r2, r2
 801fa8c:	801a      	strh	r2, [r3, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 801fa8e:	687a      	ldr	r2, [r7, #4]
 801fa90:	683b      	ldr	r3, [r7, #0]
 801fa92:	781b      	ldrb	r3, [r3, #0]
 801fa94:	009b      	lsls	r3, r3, #2
 801fa96:	18d3      	adds	r3, r2, r3
 801fa98:	881b      	ldrh	r3, [r3, #0]
 801fa9a:	b29a      	uxth	r2, r3
 801fa9c:	2042      	movs	r0, #66	@ 0x42
 801fa9e:	183b      	adds	r3, r7, r0
 801faa0:	490c      	ldr	r1, [pc, #48]	@ (801fad4 <USB_ActivateEndpoint+0x740>)
 801faa2:	400a      	ands	r2, r1
 801faa4:	801a      	strh	r2, [r3, #0]
 801faa6:	687a      	ldr	r2, [r7, #4]
 801faa8:	683b      	ldr	r3, [r7, #0]
 801faaa:	781b      	ldrb	r3, [r3, #0]
 801faac:	009b      	lsls	r3, r3, #2
 801faae:	18d3      	adds	r3, r2, r3
 801fab0:	183a      	adds	r2, r7, r0
 801fab2:	8812      	ldrh	r2, [r2, #0]
 801fab4:	4906      	ldr	r1, [pc, #24]	@ (801fad0 <USB_ActivateEndpoint+0x73c>)
 801fab6:	430a      	orrs	r2, r1
 801fab8:	b292      	uxth	r2, r2
 801faba:	801a      	strh	r2, [r3, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 801fabc:	236f      	movs	r3, #111	@ 0x6f
 801fabe:	18fb      	adds	r3, r7, r3
 801fac0:	781b      	ldrb	r3, [r3, #0]
}
 801fac2:	0018      	movs	r0, r3
 801fac4:	46bd      	mov	sp, r7
 801fac6:	b01c      	add	sp, #112	@ 0x70
 801fac8:	bd80      	pop	{r7, pc}
 801faca:	46c0      	nop			@ (mov r8, r8)
 801facc:	ffff8fbf 	.word	0xffff8fbf
 801fad0:	ffff8080 	.word	0xffff8080
 801fad4:	ffffbf8f 	.word	0xffffbf8f

0801fad8 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 801fad8:	b580      	push	{r7, lr}
 801fada:	b08c      	sub	sp, #48	@ 0x30
 801fadc:	af00      	add	r7, sp, #0
 801fade:	6078      	str	r0, [r7, #4]
 801fae0:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 801fae2:	683b      	ldr	r3, [r7, #0]
 801fae4:	7b1b      	ldrb	r3, [r3, #12]
 801fae6:	2b00      	cmp	r3, #0
 801fae8:	d000      	beq.n	801faec <USB_DeactivateEndpoint+0x14>
 801faea:	e07e      	b.n	801fbea <USB_DeactivateEndpoint+0x112>
  {
    if (ep->is_in != 0U)
 801faec:	683b      	ldr	r3, [r7, #0]
 801faee:	785b      	ldrb	r3, [r3, #1]
 801faf0:	2b00      	cmp	r3, #0
 801faf2:	d03c      	beq.n	801fb6e <USB_DeactivateEndpoint+0x96>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 801faf4:	687a      	ldr	r2, [r7, #4]
 801faf6:	683b      	ldr	r3, [r7, #0]
 801faf8:	781b      	ldrb	r3, [r3, #0]
 801fafa:	009b      	lsls	r3, r3, #2
 801fafc:	18d2      	adds	r2, r2, r3
 801fafe:	210c      	movs	r1, #12
 801fb00:	187b      	adds	r3, r7, r1
 801fb02:	8812      	ldrh	r2, [r2, #0]
 801fb04:	801a      	strh	r2, [r3, #0]
 801fb06:	187b      	adds	r3, r7, r1
 801fb08:	881b      	ldrh	r3, [r3, #0]
 801fb0a:	2240      	movs	r2, #64	@ 0x40
 801fb0c:	4013      	ands	r3, r2
 801fb0e:	d016      	beq.n	801fb3e <USB_DeactivateEndpoint+0x66>
 801fb10:	687a      	ldr	r2, [r7, #4]
 801fb12:	683b      	ldr	r3, [r7, #0]
 801fb14:	781b      	ldrb	r3, [r3, #0]
 801fb16:	009b      	lsls	r3, r3, #2
 801fb18:	18d3      	adds	r3, r2, r3
 801fb1a:	881b      	ldrh	r3, [r3, #0]
 801fb1c:	b29a      	uxth	r2, r3
 801fb1e:	200a      	movs	r0, #10
 801fb20:	183b      	adds	r3, r7, r0
 801fb22:	49c7      	ldr	r1, [pc, #796]	@ (801fe40 <USB_DeactivateEndpoint+0x368>)
 801fb24:	400a      	ands	r2, r1
 801fb26:	801a      	strh	r2, [r3, #0]
 801fb28:	687a      	ldr	r2, [r7, #4]
 801fb2a:	683b      	ldr	r3, [r7, #0]
 801fb2c:	781b      	ldrb	r3, [r3, #0]
 801fb2e:	009b      	lsls	r3, r3, #2
 801fb30:	18d3      	adds	r3, r2, r3
 801fb32:	183a      	adds	r2, r7, r0
 801fb34:	8812      	ldrh	r2, [r2, #0]
 801fb36:	49c3      	ldr	r1, [pc, #780]	@ (801fe44 <USB_DeactivateEndpoint+0x36c>)
 801fb38:	430a      	orrs	r2, r1
 801fb3a:	b292      	uxth	r2, r2
 801fb3c:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 801fb3e:	687a      	ldr	r2, [r7, #4]
 801fb40:	683b      	ldr	r3, [r7, #0]
 801fb42:	781b      	ldrb	r3, [r3, #0]
 801fb44:	009b      	lsls	r3, r3, #2
 801fb46:	18d3      	adds	r3, r2, r3
 801fb48:	881b      	ldrh	r3, [r3, #0]
 801fb4a:	b29a      	uxth	r2, r3
 801fb4c:	2008      	movs	r0, #8
 801fb4e:	183b      	adds	r3, r7, r0
 801fb50:	49bd      	ldr	r1, [pc, #756]	@ (801fe48 <USB_DeactivateEndpoint+0x370>)
 801fb52:	400a      	ands	r2, r1
 801fb54:	801a      	strh	r2, [r3, #0]
 801fb56:	687a      	ldr	r2, [r7, #4]
 801fb58:	683b      	ldr	r3, [r7, #0]
 801fb5a:	781b      	ldrb	r3, [r3, #0]
 801fb5c:	009b      	lsls	r3, r3, #2
 801fb5e:	18d3      	adds	r3, r2, r3
 801fb60:	183a      	adds	r2, r7, r0
 801fb62:	8812      	ldrh	r2, [r2, #0]
 801fb64:	49b9      	ldr	r1, [pc, #740]	@ (801fe4c <USB_DeactivateEndpoint+0x374>)
 801fb66:	430a      	orrs	r2, r1
 801fb68:	b292      	uxth	r2, r2
 801fb6a:	801a      	strh	r2, [r3, #0]
 801fb6c:	e163      	b.n	801fe36 <USB_DeactivateEndpoint+0x35e>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 801fb6e:	687a      	ldr	r2, [r7, #4]
 801fb70:	683b      	ldr	r3, [r7, #0]
 801fb72:	781b      	ldrb	r3, [r3, #0]
 801fb74:	009b      	lsls	r3, r3, #2
 801fb76:	18d2      	adds	r2, r2, r3
 801fb78:	2112      	movs	r1, #18
 801fb7a:	187b      	adds	r3, r7, r1
 801fb7c:	8812      	ldrh	r2, [r2, #0]
 801fb7e:	801a      	strh	r2, [r3, #0]
 801fb80:	187b      	adds	r3, r7, r1
 801fb82:	881a      	ldrh	r2, [r3, #0]
 801fb84:	2380      	movs	r3, #128	@ 0x80
 801fb86:	01db      	lsls	r3, r3, #7
 801fb88:	4013      	ands	r3, r2
 801fb8a:	d016      	beq.n	801fbba <USB_DeactivateEndpoint+0xe2>
 801fb8c:	687a      	ldr	r2, [r7, #4]
 801fb8e:	683b      	ldr	r3, [r7, #0]
 801fb90:	781b      	ldrb	r3, [r3, #0]
 801fb92:	009b      	lsls	r3, r3, #2
 801fb94:	18d3      	adds	r3, r2, r3
 801fb96:	881b      	ldrh	r3, [r3, #0]
 801fb98:	b29a      	uxth	r2, r3
 801fb9a:	2010      	movs	r0, #16
 801fb9c:	183b      	adds	r3, r7, r0
 801fb9e:	49a8      	ldr	r1, [pc, #672]	@ (801fe40 <USB_DeactivateEndpoint+0x368>)
 801fba0:	400a      	ands	r2, r1
 801fba2:	801a      	strh	r2, [r3, #0]
 801fba4:	687a      	ldr	r2, [r7, #4]
 801fba6:	683b      	ldr	r3, [r7, #0]
 801fba8:	781b      	ldrb	r3, [r3, #0]
 801fbaa:	009b      	lsls	r3, r3, #2
 801fbac:	18d3      	adds	r3, r2, r3
 801fbae:	183a      	adds	r2, r7, r0
 801fbb0:	8812      	ldrh	r2, [r2, #0]
 801fbb2:	49a7      	ldr	r1, [pc, #668]	@ (801fe50 <USB_DeactivateEndpoint+0x378>)
 801fbb4:	430a      	orrs	r2, r1
 801fbb6:	b292      	uxth	r2, r2
 801fbb8:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 801fbba:	687a      	ldr	r2, [r7, #4]
 801fbbc:	683b      	ldr	r3, [r7, #0]
 801fbbe:	781b      	ldrb	r3, [r3, #0]
 801fbc0:	009b      	lsls	r3, r3, #2
 801fbc2:	18d3      	adds	r3, r2, r3
 801fbc4:	881b      	ldrh	r3, [r3, #0]
 801fbc6:	b29a      	uxth	r2, r3
 801fbc8:	200e      	movs	r0, #14
 801fbca:	183b      	adds	r3, r7, r0
 801fbcc:	49a1      	ldr	r1, [pc, #644]	@ (801fe54 <USB_DeactivateEndpoint+0x37c>)
 801fbce:	400a      	ands	r2, r1
 801fbd0:	801a      	strh	r2, [r3, #0]
 801fbd2:	687a      	ldr	r2, [r7, #4]
 801fbd4:	683b      	ldr	r3, [r7, #0]
 801fbd6:	781b      	ldrb	r3, [r3, #0]
 801fbd8:	009b      	lsls	r3, r3, #2
 801fbda:	18d3      	adds	r3, r2, r3
 801fbdc:	183a      	adds	r2, r7, r0
 801fbde:	8812      	ldrh	r2, [r2, #0]
 801fbe0:	499a      	ldr	r1, [pc, #616]	@ (801fe4c <USB_DeactivateEndpoint+0x374>)
 801fbe2:	430a      	orrs	r2, r1
 801fbe4:	b292      	uxth	r2, r2
 801fbe6:	801a      	strh	r2, [r3, #0]
 801fbe8:	e125      	b.n	801fe36 <USB_DeactivateEndpoint+0x35e>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 801fbea:	683b      	ldr	r3, [r7, #0]
 801fbec:	785b      	ldrb	r3, [r3, #1]
 801fbee:	2b00      	cmp	r3, #0
 801fbf0:	d000      	beq.n	801fbf4 <USB_DeactivateEndpoint+0x11c>
 801fbf2:	e090      	b.n	801fd16 <USB_DeactivateEndpoint+0x23e>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 801fbf4:	687a      	ldr	r2, [r7, #4]
 801fbf6:	683b      	ldr	r3, [r7, #0]
 801fbf8:	781b      	ldrb	r3, [r3, #0]
 801fbfa:	009b      	lsls	r3, r3, #2
 801fbfc:	18d2      	adds	r2, r2, r3
 801fbfe:	2120      	movs	r1, #32
 801fc00:	187b      	adds	r3, r7, r1
 801fc02:	8812      	ldrh	r2, [r2, #0]
 801fc04:	801a      	strh	r2, [r3, #0]
 801fc06:	187b      	adds	r3, r7, r1
 801fc08:	881a      	ldrh	r2, [r3, #0]
 801fc0a:	2380      	movs	r3, #128	@ 0x80
 801fc0c:	01db      	lsls	r3, r3, #7
 801fc0e:	4013      	ands	r3, r2
 801fc10:	d016      	beq.n	801fc40 <USB_DeactivateEndpoint+0x168>
 801fc12:	687a      	ldr	r2, [r7, #4]
 801fc14:	683b      	ldr	r3, [r7, #0]
 801fc16:	781b      	ldrb	r3, [r3, #0]
 801fc18:	009b      	lsls	r3, r3, #2
 801fc1a:	18d3      	adds	r3, r2, r3
 801fc1c:	881b      	ldrh	r3, [r3, #0]
 801fc1e:	b29a      	uxth	r2, r3
 801fc20:	201e      	movs	r0, #30
 801fc22:	183b      	adds	r3, r7, r0
 801fc24:	4986      	ldr	r1, [pc, #536]	@ (801fe40 <USB_DeactivateEndpoint+0x368>)
 801fc26:	400a      	ands	r2, r1
 801fc28:	801a      	strh	r2, [r3, #0]
 801fc2a:	687a      	ldr	r2, [r7, #4]
 801fc2c:	683b      	ldr	r3, [r7, #0]
 801fc2e:	781b      	ldrb	r3, [r3, #0]
 801fc30:	009b      	lsls	r3, r3, #2
 801fc32:	18d3      	adds	r3, r2, r3
 801fc34:	183a      	adds	r2, r7, r0
 801fc36:	8812      	ldrh	r2, [r2, #0]
 801fc38:	4985      	ldr	r1, [pc, #532]	@ (801fe50 <USB_DeactivateEndpoint+0x378>)
 801fc3a:	430a      	orrs	r2, r1
 801fc3c:	b292      	uxth	r2, r2
 801fc3e:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 801fc40:	687a      	ldr	r2, [r7, #4]
 801fc42:	683b      	ldr	r3, [r7, #0]
 801fc44:	781b      	ldrb	r3, [r3, #0]
 801fc46:	009b      	lsls	r3, r3, #2
 801fc48:	18d2      	adds	r2, r2, r3
 801fc4a:	211c      	movs	r1, #28
 801fc4c:	187b      	adds	r3, r7, r1
 801fc4e:	8812      	ldrh	r2, [r2, #0]
 801fc50:	801a      	strh	r2, [r3, #0]
 801fc52:	187b      	adds	r3, r7, r1
 801fc54:	881b      	ldrh	r3, [r3, #0]
 801fc56:	2240      	movs	r2, #64	@ 0x40
 801fc58:	4013      	ands	r3, r2
 801fc5a:	d016      	beq.n	801fc8a <USB_DeactivateEndpoint+0x1b2>
 801fc5c:	687a      	ldr	r2, [r7, #4]
 801fc5e:	683b      	ldr	r3, [r7, #0]
 801fc60:	781b      	ldrb	r3, [r3, #0]
 801fc62:	009b      	lsls	r3, r3, #2
 801fc64:	18d3      	adds	r3, r2, r3
 801fc66:	881b      	ldrh	r3, [r3, #0]
 801fc68:	b29a      	uxth	r2, r3
 801fc6a:	201a      	movs	r0, #26
 801fc6c:	183b      	adds	r3, r7, r0
 801fc6e:	4974      	ldr	r1, [pc, #464]	@ (801fe40 <USB_DeactivateEndpoint+0x368>)
 801fc70:	400a      	ands	r2, r1
 801fc72:	801a      	strh	r2, [r3, #0]
 801fc74:	687a      	ldr	r2, [r7, #4]
 801fc76:	683b      	ldr	r3, [r7, #0]
 801fc78:	781b      	ldrb	r3, [r3, #0]
 801fc7a:	009b      	lsls	r3, r3, #2
 801fc7c:	18d3      	adds	r3, r2, r3
 801fc7e:	183a      	adds	r2, r7, r0
 801fc80:	8812      	ldrh	r2, [r2, #0]
 801fc82:	4970      	ldr	r1, [pc, #448]	@ (801fe44 <USB_DeactivateEndpoint+0x36c>)
 801fc84:	430a      	orrs	r2, r1
 801fc86:	b292      	uxth	r2, r2
 801fc88:	801a      	strh	r2, [r3, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 801fc8a:	687a      	ldr	r2, [r7, #4]
 801fc8c:	683b      	ldr	r3, [r7, #0]
 801fc8e:	781b      	ldrb	r3, [r3, #0]
 801fc90:	009b      	lsls	r3, r3, #2
 801fc92:	18d3      	adds	r3, r2, r3
 801fc94:	881b      	ldrh	r3, [r3, #0]
 801fc96:	b29a      	uxth	r2, r3
 801fc98:	2018      	movs	r0, #24
 801fc9a:	183b      	adds	r3, r7, r0
 801fc9c:	4968      	ldr	r1, [pc, #416]	@ (801fe40 <USB_DeactivateEndpoint+0x368>)
 801fc9e:	400a      	ands	r2, r1
 801fca0:	801a      	strh	r2, [r3, #0]
 801fca2:	687a      	ldr	r2, [r7, #4]
 801fca4:	683b      	ldr	r3, [r7, #0]
 801fca6:	781b      	ldrb	r3, [r3, #0]
 801fca8:	009b      	lsls	r3, r3, #2
 801fcaa:	18d3      	adds	r3, r2, r3
 801fcac:	183a      	adds	r2, r7, r0
 801fcae:	8812      	ldrh	r2, [r2, #0]
 801fcb0:	4964      	ldr	r1, [pc, #400]	@ (801fe44 <USB_DeactivateEndpoint+0x36c>)
 801fcb2:	430a      	orrs	r2, r1
 801fcb4:	b292      	uxth	r2, r2
 801fcb6:	801a      	strh	r2, [r3, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 801fcb8:	687a      	ldr	r2, [r7, #4]
 801fcba:	683b      	ldr	r3, [r7, #0]
 801fcbc:	781b      	ldrb	r3, [r3, #0]
 801fcbe:	009b      	lsls	r3, r3, #2
 801fcc0:	18d3      	adds	r3, r2, r3
 801fcc2:	881b      	ldrh	r3, [r3, #0]
 801fcc4:	b29a      	uxth	r2, r3
 801fcc6:	2016      	movs	r0, #22
 801fcc8:	183b      	adds	r3, r7, r0
 801fcca:	4962      	ldr	r1, [pc, #392]	@ (801fe54 <USB_DeactivateEndpoint+0x37c>)
 801fccc:	400a      	ands	r2, r1
 801fcce:	801a      	strh	r2, [r3, #0]
 801fcd0:	687a      	ldr	r2, [r7, #4]
 801fcd2:	683b      	ldr	r3, [r7, #0]
 801fcd4:	781b      	ldrb	r3, [r3, #0]
 801fcd6:	009b      	lsls	r3, r3, #2
 801fcd8:	18d3      	adds	r3, r2, r3
 801fcda:	183a      	adds	r2, r7, r0
 801fcdc:	8812      	ldrh	r2, [r2, #0]
 801fcde:	495b      	ldr	r1, [pc, #364]	@ (801fe4c <USB_DeactivateEndpoint+0x374>)
 801fce0:	430a      	orrs	r2, r1
 801fce2:	b292      	uxth	r2, r2
 801fce4:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 801fce6:	687a      	ldr	r2, [r7, #4]
 801fce8:	683b      	ldr	r3, [r7, #0]
 801fcea:	781b      	ldrb	r3, [r3, #0]
 801fcec:	009b      	lsls	r3, r3, #2
 801fcee:	18d3      	adds	r3, r2, r3
 801fcf0:	881b      	ldrh	r3, [r3, #0]
 801fcf2:	b29a      	uxth	r2, r3
 801fcf4:	2014      	movs	r0, #20
 801fcf6:	183b      	adds	r3, r7, r0
 801fcf8:	4953      	ldr	r1, [pc, #332]	@ (801fe48 <USB_DeactivateEndpoint+0x370>)
 801fcfa:	400a      	ands	r2, r1
 801fcfc:	801a      	strh	r2, [r3, #0]
 801fcfe:	687a      	ldr	r2, [r7, #4]
 801fd00:	683b      	ldr	r3, [r7, #0]
 801fd02:	781b      	ldrb	r3, [r3, #0]
 801fd04:	009b      	lsls	r3, r3, #2
 801fd06:	18d3      	adds	r3, r2, r3
 801fd08:	183a      	adds	r2, r7, r0
 801fd0a:	8812      	ldrh	r2, [r2, #0]
 801fd0c:	494f      	ldr	r1, [pc, #316]	@ (801fe4c <USB_DeactivateEndpoint+0x374>)
 801fd0e:	430a      	orrs	r2, r1
 801fd10:	b292      	uxth	r2, r2
 801fd12:	801a      	strh	r2, [r3, #0]
 801fd14:	e08f      	b.n	801fe36 <USB_DeactivateEndpoint+0x35e>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 801fd16:	687a      	ldr	r2, [r7, #4]
 801fd18:	683b      	ldr	r3, [r7, #0]
 801fd1a:	781b      	ldrb	r3, [r3, #0]
 801fd1c:	009b      	lsls	r3, r3, #2
 801fd1e:	18d2      	adds	r2, r2, r3
 801fd20:	212e      	movs	r1, #46	@ 0x2e
 801fd22:	187b      	adds	r3, r7, r1
 801fd24:	8812      	ldrh	r2, [r2, #0]
 801fd26:	801a      	strh	r2, [r3, #0]
 801fd28:	187b      	adds	r3, r7, r1
 801fd2a:	881a      	ldrh	r2, [r3, #0]
 801fd2c:	2380      	movs	r3, #128	@ 0x80
 801fd2e:	01db      	lsls	r3, r3, #7
 801fd30:	4013      	ands	r3, r2
 801fd32:	d016      	beq.n	801fd62 <USB_DeactivateEndpoint+0x28a>
 801fd34:	687a      	ldr	r2, [r7, #4]
 801fd36:	683b      	ldr	r3, [r7, #0]
 801fd38:	781b      	ldrb	r3, [r3, #0]
 801fd3a:	009b      	lsls	r3, r3, #2
 801fd3c:	18d3      	adds	r3, r2, r3
 801fd3e:	881b      	ldrh	r3, [r3, #0]
 801fd40:	b29a      	uxth	r2, r3
 801fd42:	202c      	movs	r0, #44	@ 0x2c
 801fd44:	183b      	adds	r3, r7, r0
 801fd46:	493e      	ldr	r1, [pc, #248]	@ (801fe40 <USB_DeactivateEndpoint+0x368>)
 801fd48:	400a      	ands	r2, r1
 801fd4a:	801a      	strh	r2, [r3, #0]
 801fd4c:	687a      	ldr	r2, [r7, #4]
 801fd4e:	683b      	ldr	r3, [r7, #0]
 801fd50:	781b      	ldrb	r3, [r3, #0]
 801fd52:	009b      	lsls	r3, r3, #2
 801fd54:	18d3      	adds	r3, r2, r3
 801fd56:	183a      	adds	r2, r7, r0
 801fd58:	8812      	ldrh	r2, [r2, #0]
 801fd5a:	493d      	ldr	r1, [pc, #244]	@ (801fe50 <USB_DeactivateEndpoint+0x378>)
 801fd5c:	430a      	orrs	r2, r1
 801fd5e:	b292      	uxth	r2, r2
 801fd60:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 801fd62:	687a      	ldr	r2, [r7, #4]
 801fd64:	683b      	ldr	r3, [r7, #0]
 801fd66:	781b      	ldrb	r3, [r3, #0]
 801fd68:	009b      	lsls	r3, r3, #2
 801fd6a:	18d2      	adds	r2, r2, r3
 801fd6c:	212a      	movs	r1, #42	@ 0x2a
 801fd6e:	187b      	adds	r3, r7, r1
 801fd70:	8812      	ldrh	r2, [r2, #0]
 801fd72:	801a      	strh	r2, [r3, #0]
 801fd74:	187b      	adds	r3, r7, r1
 801fd76:	881b      	ldrh	r3, [r3, #0]
 801fd78:	2240      	movs	r2, #64	@ 0x40
 801fd7a:	4013      	ands	r3, r2
 801fd7c:	d016      	beq.n	801fdac <USB_DeactivateEndpoint+0x2d4>
 801fd7e:	687a      	ldr	r2, [r7, #4]
 801fd80:	683b      	ldr	r3, [r7, #0]
 801fd82:	781b      	ldrb	r3, [r3, #0]
 801fd84:	009b      	lsls	r3, r3, #2
 801fd86:	18d3      	adds	r3, r2, r3
 801fd88:	881b      	ldrh	r3, [r3, #0]
 801fd8a:	b29a      	uxth	r2, r3
 801fd8c:	2028      	movs	r0, #40	@ 0x28
 801fd8e:	183b      	adds	r3, r7, r0
 801fd90:	492b      	ldr	r1, [pc, #172]	@ (801fe40 <USB_DeactivateEndpoint+0x368>)
 801fd92:	400a      	ands	r2, r1
 801fd94:	801a      	strh	r2, [r3, #0]
 801fd96:	687a      	ldr	r2, [r7, #4]
 801fd98:	683b      	ldr	r3, [r7, #0]
 801fd9a:	781b      	ldrb	r3, [r3, #0]
 801fd9c:	009b      	lsls	r3, r3, #2
 801fd9e:	18d3      	adds	r3, r2, r3
 801fda0:	183a      	adds	r2, r7, r0
 801fda2:	8812      	ldrh	r2, [r2, #0]
 801fda4:	4927      	ldr	r1, [pc, #156]	@ (801fe44 <USB_DeactivateEndpoint+0x36c>)
 801fda6:	430a      	orrs	r2, r1
 801fda8:	b292      	uxth	r2, r2
 801fdaa:	801a      	strh	r2, [r3, #0]
      PCD_RX_DTOG(USBx, ep->num);
 801fdac:	687a      	ldr	r2, [r7, #4]
 801fdae:	683b      	ldr	r3, [r7, #0]
 801fdb0:	781b      	ldrb	r3, [r3, #0]
 801fdb2:	009b      	lsls	r3, r3, #2
 801fdb4:	18d3      	adds	r3, r2, r3
 801fdb6:	881b      	ldrh	r3, [r3, #0]
 801fdb8:	b29a      	uxth	r2, r3
 801fdba:	2026      	movs	r0, #38	@ 0x26
 801fdbc:	183b      	adds	r3, r7, r0
 801fdbe:	4920      	ldr	r1, [pc, #128]	@ (801fe40 <USB_DeactivateEndpoint+0x368>)
 801fdc0:	400a      	ands	r2, r1
 801fdc2:	801a      	strh	r2, [r3, #0]
 801fdc4:	687a      	ldr	r2, [r7, #4]
 801fdc6:	683b      	ldr	r3, [r7, #0]
 801fdc8:	781b      	ldrb	r3, [r3, #0]
 801fdca:	009b      	lsls	r3, r3, #2
 801fdcc:	18d3      	adds	r3, r2, r3
 801fdce:	183a      	adds	r2, r7, r0
 801fdd0:	8812      	ldrh	r2, [r2, #0]
 801fdd2:	491f      	ldr	r1, [pc, #124]	@ (801fe50 <USB_DeactivateEndpoint+0x378>)
 801fdd4:	430a      	orrs	r2, r1
 801fdd6:	b292      	uxth	r2, r2
 801fdd8:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 801fdda:	687a      	ldr	r2, [r7, #4]
 801fddc:	683b      	ldr	r3, [r7, #0]
 801fdde:	781b      	ldrb	r3, [r3, #0]
 801fde0:	009b      	lsls	r3, r3, #2
 801fde2:	18d3      	adds	r3, r2, r3
 801fde4:	881b      	ldrh	r3, [r3, #0]
 801fde6:	b29a      	uxth	r2, r3
 801fde8:	2024      	movs	r0, #36	@ 0x24
 801fdea:	183b      	adds	r3, r7, r0
 801fdec:	4916      	ldr	r1, [pc, #88]	@ (801fe48 <USB_DeactivateEndpoint+0x370>)
 801fdee:	400a      	ands	r2, r1
 801fdf0:	801a      	strh	r2, [r3, #0]
 801fdf2:	687a      	ldr	r2, [r7, #4]
 801fdf4:	683b      	ldr	r3, [r7, #0]
 801fdf6:	781b      	ldrb	r3, [r3, #0]
 801fdf8:	009b      	lsls	r3, r3, #2
 801fdfa:	18d3      	adds	r3, r2, r3
 801fdfc:	183a      	adds	r2, r7, r0
 801fdfe:	8812      	ldrh	r2, [r2, #0]
 801fe00:	4912      	ldr	r1, [pc, #72]	@ (801fe4c <USB_DeactivateEndpoint+0x374>)
 801fe02:	430a      	orrs	r2, r1
 801fe04:	b292      	uxth	r2, r2
 801fe06:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 801fe08:	687a      	ldr	r2, [r7, #4]
 801fe0a:	683b      	ldr	r3, [r7, #0]
 801fe0c:	781b      	ldrb	r3, [r3, #0]
 801fe0e:	009b      	lsls	r3, r3, #2
 801fe10:	18d3      	adds	r3, r2, r3
 801fe12:	881b      	ldrh	r3, [r3, #0]
 801fe14:	b29a      	uxth	r2, r3
 801fe16:	2022      	movs	r0, #34	@ 0x22
 801fe18:	183b      	adds	r3, r7, r0
 801fe1a:	490e      	ldr	r1, [pc, #56]	@ (801fe54 <USB_DeactivateEndpoint+0x37c>)
 801fe1c:	400a      	ands	r2, r1
 801fe1e:	801a      	strh	r2, [r3, #0]
 801fe20:	687a      	ldr	r2, [r7, #4]
 801fe22:	683b      	ldr	r3, [r7, #0]
 801fe24:	781b      	ldrb	r3, [r3, #0]
 801fe26:	009b      	lsls	r3, r3, #2
 801fe28:	18d3      	adds	r3, r2, r3
 801fe2a:	183a      	adds	r2, r7, r0
 801fe2c:	8812      	ldrh	r2, [r2, #0]
 801fe2e:	4907      	ldr	r1, [pc, #28]	@ (801fe4c <USB_DeactivateEndpoint+0x374>)
 801fe30:	430a      	orrs	r2, r1
 801fe32:	b292      	uxth	r2, r2
 801fe34:	801a      	strh	r2, [r3, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 801fe36:	2300      	movs	r3, #0
}
 801fe38:	0018      	movs	r0, r3
 801fe3a:	46bd      	mov	sp, r7
 801fe3c:	b00c      	add	sp, #48	@ 0x30
 801fe3e:	bd80      	pop	{r7, pc}
 801fe40:	ffff8f8f 	.word	0xffff8f8f
 801fe44:	ffff80c0 	.word	0xffff80c0
 801fe48:	ffff8fbf 	.word	0xffff8fbf
 801fe4c:	ffff8080 	.word	0xffff8080
 801fe50:	ffffc080 	.word	0xffffc080
 801fe54:	ffffbf8f 	.word	0xffffbf8f

0801fe58 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 801fe58:	b590      	push	{r4, r7, lr}
 801fe5a:	b0c3      	sub	sp, #268	@ 0x10c
 801fe5c:	af00      	add	r7, sp, #0
 801fe5e:	6078      	str	r0, [r7, #4]
 801fe60:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 801fe62:	683b      	ldr	r3, [r7, #0]
 801fe64:	785b      	ldrb	r3, [r3, #1]
 801fe66:	2b01      	cmp	r3, #1
 801fe68:	d001      	beq.n	801fe6e <USB_EPStartXfer+0x16>
 801fe6a:	f000 fd2d 	bl	80208c8 <USB_EPStartXfer+0xa70>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 801fe6e:	683b      	ldr	r3, [r7, #0]
 801fe70:	699a      	ldr	r2, [r3, #24]
 801fe72:	683b      	ldr	r3, [r7, #0]
 801fe74:	691b      	ldr	r3, [r3, #16]
 801fe76:	429a      	cmp	r2, r3
 801fe78:	d905      	bls.n	801fe86 <USB_EPStartXfer+0x2e>
    {
      len = ep->maxpacket;
 801fe7a:	683b      	ldr	r3, [r7, #0]
 801fe7c:	691b      	ldr	r3, [r3, #16]
 801fe7e:	1d7a      	adds	r2, r7, #5
 801fe80:	32ff      	adds	r2, #255	@ 0xff
 801fe82:	6013      	str	r3, [r2, #0]
 801fe84:	e004      	b.n	801fe90 <USB_EPStartXfer+0x38>
    }
    else
    {
      len = ep->xfer_len;
 801fe86:	683b      	ldr	r3, [r7, #0]
 801fe88:	699b      	ldr	r3, [r3, #24]
 801fe8a:	1d7a      	adds	r2, r7, #5
 801fe8c:	32ff      	adds	r2, #255	@ 0xff
 801fe8e:	6013      	str	r3, [r2, #0]
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 801fe90:	683b      	ldr	r3, [r7, #0]
 801fe92:	7b1b      	ldrb	r3, [r3, #12]
 801fe94:	2b00      	cmp	r3, #0
 801fe96:	d125      	bne.n	801fee4 <USB_EPStartXfer+0x8c>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 801fe98:	683b      	ldr	r3, [r7, #0]
 801fe9a:	6959      	ldr	r1, [r3, #20]
 801fe9c:	683b      	ldr	r3, [r7, #0]
 801fe9e:	88da      	ldrh	r2, [r3, #6]
 801fea0:	1d7b      	adds	r3, r7, #5
 801fea2:	33ff      	adds	r3, #255	@ 0xff
 801fea4:	681b      	ldr	r3, [r3, #0]
 801fea6:	b29b      	uxth	r3, r3
 801fea8:	6878      	ldr	r0, [r7, #4]
 801feaa:	f001 fa47 	bl	802133c <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 801feae:	687b      	ldr	r3, [r7, #4]
 801feb0:	613b      	str	r3, [r7, #16]
 801feb2:	687b      	ldr	r3, [r7, #4]
 801feb4:	2250      	movs	r2, #80	@ 0x50
 801feb6:	5a9b      	ldrh	r3, [r3, r2]
 801feb8:	b29b      	uxth	r3, r3
 801feba:	001a      	movs	r2, r3
 801febc:	693b      	ldr	r3, [r7, #16]
 801febe:	189b      	adds	r3, r3, r2
 801fec0:	613b      	str	r3, [r7, #16]
 801fec2:	683b      	ldr	r3, [r7, #0]
 801fec4:	781b      	ldrb	r3, [r3, #0]
 801fec6:	00da      	lsls	r2, r3, #3
 801fec8:	693b      	ldr	r3, [r7, #16]
 801feca:	18d3      	adds	r3, r2, r3
 801fecc:	4ad7      	ldr	r2, [pc, #860]	@ (802022c <USB_EPStartXfer+0x3d4>)
 801fece:	4694      	mov	ip, r2
 801fed0:	4463      	add	r3, ip
 801fed2:	60fb      	str	r3, [r7, #12]
 801fed4:	1d7b      	adds	r3, r7, #5
 801fed6:	33ff      	adds	r3, #255	@ 0xff
 801fed8:	681b      	ldr	r3, [r3, #0]
 801feda:	b29a      	uxth	r2, r3
 801fedc:	68fb      	ldr	r3, [r7, #12]
 801fede:	801a      	strh	r2, [r3, #0]
 801fee0:	f000 fccd 	bl	802087e <USB_EPStartXfer+0xa26>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 801fee4:	683b      	ldr	r3, [r7, #0]
 801fee6:	78db      	ldrb	r3, [r3, #3]
 801fee8:	2b02      	cmp	r3, #2
 801feea:	d000      	beq.n	801feee <USB_EPStartXfer+0x96>
 801feec:	e362      	b.n	80205b4 <USB_EPStartXfer+0x75c>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 801feee:	683b      	ldr	r3, [r7, #0]
 801fef0:	6a1a      	ldr	r2, [r3, #32]
 801fef2:	683b      	ldr	r3, [r7, #0]
 801fef4:	691b      	ldr	r3, [r3, #16]
 801fef6:	429a      	cmp	r2, r3
 801fef8:	d800      	bhi.n	801fefc <USB_EPStartXfer+0xa4>
 801fefa:	e309      	b.n	8020510 <USB_EPStartXfer+0x6b8>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 801fefc:	687a      	ldr	r2, [r7, #4]
 801fefe:	683b      	ldr	r3, [r7, #0]
 801ff00:	781b      	ldrb	r3, [r3, #0]
 801ff02:	009b      	lsls	r3, r3, #2
 801ff04:	18d3      	adds	r3, r2, r3
 801ff06:	881b      	ldrh	r3, [r3, #0]
 801ff08:	b29a      	uxth	r2, r3
 801ff0a:	2056      	movs	r0, #86	@ 0x56
 801ff0c:	183b      	adds	r3, r7, r0
 801ff0e:	49c8      	ldr	r1, [pc, #800]	@ (8020230 <USB_EPStartXfer+0x3d8>)
 801ff10:	400a      	ands	r2, r1
 801ff12:	801a      	strh	r2, [r3, #0]
 801ff14:	687a      	ldr	r2, [r7, #4]
 801ff16:	683b      	ldr	r3, [r7, #0]
 801ff18:	781b      	ldrb	r3, [r3, #0]
 801ff1a:	009b      	lsls	r3, r3, #2
 801ff1c:	18d3      	adds	r3, r2, r3
 801ff1e:	183a      	adds	r2, r7, r0
 801ff20:	8812      	ldrh	r2, [r2, #0]
 801ff22:	49c4      	ldr	r1, [pc, #784]	@ (8020234 <USB_EPStartXfer+0x3dc>)
 801ff24:	430a      	orrs	r2, r1
 801ff26:	b292      	uxth	r2, r2
 801ff28:	801a      	strh	r2, [r3, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 801ff2a:	683b      	ldr	r3, [r7, #0]
 801ff2c:	6a1a      	ldr	r2, [r3, #32]
 801ff2e:	1d7b      	adds	r3, r7, #5
 801ff30:	33ff      	adds	r3, #255	@ 0xff
 801ff32:	681b      	ldr	r3, [r3, #0]
 801ff34:	1ad2      	subs	r2, r2, r3
 801ff36:	683b      	ldr	r3, [r7, #0]
 801ff38:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 801ff3a:	687a      	ldr	r2, [r7, #4]
 801ff3c:	683b      	ldr	r3, [r7, #0]
 801ff3e:	781b      	ldrb	r3, [r3, #0]
 801ff40:	009b      	lsls	r3, r3, #2
 801ff42:	18d3      	adds	r3, r2, r3
 801ff44:	881b      	ldrh	r3, [r3, #0]
 801ff46:	b29b      	uxth	r3, r3
 801ff48:	001a      	movs	r2, r3
 801ff4a:	2340      	movs	r3, #64	@ 0x40
 801ff4c:	4013      	ands	r3, r2
 801ff4e:	d100      	bne.n	801ff52 <USB_EPStartXfer+0xfa>
 801ff50:	e176      	b.n	8020240 <USB_EPStartXfer+0x3e8>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 801ff52:	687b      	ldr	r3, [r7, #4]
 801ff54:	633b      	str	r3, [r7, #48]	@ 0x30
 801ff56:	683b      	ldr	r3, [r7, #0]
 801ff58:	785b      	ldrb	r3, [r3, #1]
 801ff5a:	2b00      	cmp	r3, #0
 801ff5c:	d000      	beq.n	801ff60 <USB_EPStartXfer+0x108>
 801ff5e:	e074      	b.n	802004a <USB_EPStartXfer+0x1f2>
 801ff60:	687b      	ldr	r3, [r7, #4]
 801ff62:	62bb      	str	r3, [r7, #40]	@ 0x28
 801ff64:	687b      	ldr	r3, [r7, #4]
 801ff66:	2250      	movs	r2, #80	@ 0x50
 801ff68:	5a9b      	ldrh	r3, [r3, r2]
 801ff6a:	b29b      	uxth	r3, r3
 801ff6c:	001a      	movs	r2, r3
 801ff6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801ff70:	189b      	adds	r3, r3, r2
 801ff72:	62bb      	str	r3, [r7, #40]	@ 0x28
 801ff74:	683b      	ldr	r3, [r7, #0]
 801ff76:	781b      	ldrb	r3, [r3, #0]
 801ff78:	00da      	lsls	r2, r3, #3
 801ff7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801ff7c:	18d3      	adds	r3, r2, r3
 801ff7e:	4aae      	ldr	r2, [pc, #696]	@ (8020238 <USB_EPStartXfer+0x3e0>)
 801ff80:	4694      	mov	ip, r2
 801ff82:	4463      	add	r3, ip
 801ff84:	627b      	str	r3, [r7, #36]	@ 0x24
 801ff86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ff88:	881b      	ldrh	r3, [r3, #0]
 801ff8a:	b29b      	uxth	r3, r3
 801ff8c:	059b      	lsls	r3, r3, #22
 801ff8e:	0d9b      	lsrs	r3, r3, #22
 801ff90:	b29a      	uxth	r2, r3
 801ff92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ff94:	801a      	strh	r2, [r3, #0]
 801ff96:	1d7b      	adds	r3, r7, #5
 801ff98:	33ff      	adds	r3, #255	@ 0xff
 801ff9a:	681b      	ldr	r3, [r3, #0]
 801ff9c:	2b3e      	cmp	r3, #62	@ 0x3e
 801ff9e:	d924      	bls.n	801ffea <USB_EPStartXfer+0x192>
 801ffa0:	1d7b      	adds	r3, r7, #5
 801ffa2:	33ff      	adds	r3, #255	@ 0xff
 801ffa4:	681b      	ldr	r3, [r3, #0]
 801ffa6:	095b      	lsrs	r3, r3, #5
 801ffa8:	1c7a      	adds	r2, r7, #1
 801ffaa:	32ff      	adds	r2, #255	@ 0xff
 801ffac:	6013      	str	r3, [r2, #0]
 801ffae:	1d7b      	adds	r3, r7, #5
 801ffb0:	33ff      	adds	r3, #255	@ 0xff
 801ffb2:	681b      	ldr	r3, [r3, #0]
 801ffb4:	221f      	movs	r2, #31
 801ffb6:	4013      	ands	r3, r2
 801ffb8:	d106      	bne.n	801ffc8 <USB_EPStartXfer+0x170>
 801ffba:	1c7b      	adds	r3, r7, #1
 801ffbc:	33ff      	adds	r3, #255	@ 0xff
 801ffbe:	681b      	ldr	r3, [r3, #0]
 801ffc0:	3b01      	subs	r3, #1
 801ffc2:	1c7a      	adds	r2, r7, #1
 801ffc4:	32ff      	adds	r2, #255	@ 0xff
 801ffc6:	6013      	str	r3, [r2, #0]
 801ffc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ffca:	881b      	ldrh	r3, [r3, #0]
 801ffcc:	b29a      	uxth	r2, r3
 801ffce:	1c7b      	adds	r3, r7, #1
 801ffd0:	33ff      	adds	r3, #255	@ 0xff
 801ffd2:	681b      	ldr	r3, [r3, #0]
 801ffd4:	b29b      	uxth	r3, r3
 801ffd6:	029b      	lsls	r3, r3, #10
 801ffd8:	b29b      	uxth	r3, r3
 801ffda:	4313      	orrs	r3, r2
 801ffdc:	b29b      	uxth	r3, r3
 801ffde:	4a97      	ldr	r2, [pc, #604]	@ (802023c <USB_EPStartXfer+0x3e4>)
 801ffe0:	4313      	orrs	r3, r2
 801ffe2:	b29a      	uxth	r2, r3
 801ffe4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ffe6:	801a      	strh	r2, [r3, #0]
 801ffe8:	e04a      	b.n	8020080 <USB_EPStartXfer+0x228>
 801ffea:	1d7b      	adds	r3, r7, #5
 801ffec:	33ff      	adds	r3, #255	@ 0xff
 801ffee:	681b      	ldr	r3, [r3, #0]
 801fff0:	2b00      	cmp	r3, #0
 801fff2:	d108      	bne.n	8020006 <USB_EPStartXfer+0x1ae>
 801fff4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801fff6:	881b      	ldrh	r3, [r3, #0]
 801fff8:	b29b      	uxth	r3, r3
 801fffa:	4a90      	ldr	r2, [pc, #576]	@ (802023c <USB_EPStartXfer+0x3e4>)
 801fffc:	4313      	orrs	r3, r2
 801fffe:	b29a      	uxth	r2, r3
 8020000:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8020002:	801a      	strh	r2, [r3, #0]
 8020004:	e03c      	b.n	8020080 <USB_EPStartXfer+0x228>
 8020006:	1d7b      	adds	r3, r7, #5
 8020008:	33ff      	adds	r3, #255	@ 0xff
 802000a:	681b      	ldr	r3, [r3, #0]
 802000c:	085b      	lsrs	r3, r3, #1
 802000e:	1c7a      	adds	r2, r7, #1
 8020010:	32ff      	adds	r2, #255	@ 0xff
 8020012:	6013      	str	r3, [r2, #0]
 8020014:	1d7b      	adds	r3, r7, #5
 8020016:	33ff      	adds	r3, #255	@ 0xff
 8020018:	681b      	ldr	r3, [r3, #0]
 802001a:	2201      	movs	r2, #1
 802001c:	4013      	ands	r3, r2
 802001e:	d006      	beq.n	802002e <USB_EPStartXfer+0x1d6>
 8020020:	1c7b      	adds	r3, r7, #1
 8020022:	33ff      	adds	r3, #255	@ 0xff
 8020024:	681b      	ldr	r3, [r3, #0]
 8020026:	3301      	adds	r3, #1
 8020028:	1c7a      	adds	r2, r7, #1
 802002a:	32ff      	adds	r2, #255	@ 0xff
 802002c:	6013      	str	r3, [r2, #0]
 802002e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8020030:	881b      	ldrh	r3, [r3, #0]
 8020032:	b29a      	uxth	r2, r3
 8020034:	1c7b      	adds	r3, r7, #1
 8020036:	33ff      	adds	r3, #255	@ 0xff
 8020038:	681b      	ldr	r3, [r3, #0]
 802003a:	b29b      	uxth	r3, r3
 802003c:	029b      	lsls	r3, r3, #10
 802003e:	b29b      	uxth	r3, r3
 8020040:	4313      	orrs	r3, r2
 8020042:	b29a      	uxth	r2, r3
 8020044:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8020046:	801a      	strh	r2, [r3, #0]
 8020048:	e01a      	b.n	8020080 <USB_EPStartXfer+0x228>
 802004a:	683b      	ldr	r3, [r7, #0]
 802004c:	785b      	ldrb	r3, [r3, #1]
 802004e:	2b01      	cmp	r3, #1
 8020050:	d116      	bne.n	8020080 <USB_EPStartXfer+0x228>
 8020052:	687b      	ldr	r3, [r7, #4]
 8020054:	2250      	movs	r2, #80	@ 0x50
 8020056:	5a9b      	ldrh	r3, [r3, r2]
 8020058:	b29b      	uxth	r3, r3
 802005a:	001a      	movs	r2, r3
 802005c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 802005e:	189b      	adds	r3, r3, r2
 8020060:	633b      	str	r3, [r7, #48]	@ 0x30
 8020062:	683b      	ldr	r3, [r7, #0]
 8020064:	781b      	ldrb	r3, [r3, #0]
 8020066:	00da      	lsls	r2, r3, #3
 8020068:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 802006a:	18d3      	adds	r3, r2, r3
 802006c:	4a72      	ldr	r2, [pc, #456]	@ (8020238 <USB_EPStartXfer+0x3e0>)
 802006e:	4694      	mov	ip, r2
 8020070:	4463      	add	r3, ip
 8020072:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8020074:	1d7b      	adds	r3, r7, #5
 8020076:	33ff      	adds	r3, #255	@ 0xff
 8020078:	681b      	ldr	r3, [r3, #0]
 802007a:	b29a      	uxth	r2, r3
 802007c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 802007e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8020080:	2076      	movs	r0, #118	@ 0x76
 8020082:	183b      	adds	r3, r7, r0
 8020084:	683a      	ldr	r2, [r7, #0]
 8020086:	8952      	ldrh	r2, [r2, #10]
 8020088:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 802008a:	683b      	ldr	r3, [r7, #0]
 802008c:	6959      	ldr	r1, [r3, #20]
 802008e:	1d7b      	adds	r3, r7, #5
 8020090:	33ff      	adds	r3, #255	@ 0xff
 8020092:	681b      	ldr	r3, [r3, #0]
 8020094:	b29c      	uxth	r4, r3
 8020096:	183b      	adds	r3, r7, r0
 8020098:	881a      	ldrh	r2, [r3, #0]
 802009a:	6878      	ldr	r0, [r7, #4]
 802009c:	0023      	movs	r3, r4
 802009e:	f001 f94d 	bl	802133c <USB_WritePMA>
            ep->xfer_buff += len;
 80200a2:	683b      	ldr	r3, [r7, #0]
 80200a4:	695a      	ldr	r2, [r3, #20]
 80200a6:	1d7b      	adds	r3, r7, #5
 80200a8:	33ff      	adds	r3, #255	@ 0xff
 80200aa:	681b      	ldr	r3, [r3, #0]
 80200ac:	18d2      	adds	r2, r2, r3
 80200ae:	683b      	ldr	r3, [r7, #0]
 80200b0:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80200b2:	683b      	ldr	r3, [r7, #0]
 80200b4:	6a1a      	ldr	r2, [r3, #32]
 80200b6:	683b      	ldr	r3, [r7, #0]
 80200b8:	691b      	ldr	r3, [r3, #16]
 80200ba:	429a      	cmp	r2, r3
 80200bc:	d908      	bls.n	80200d0 <USB_EPStartXfer+0x278>
            {
              ep->xfer_len_db -= len;
 80200be:	683b      	ldr	r3, [r7, #0]
 80200c0:	6a1a      	ldr	r2, [r3, #32]
 80200c2:	1d7b      	adds	r3, r7, #5
 80200c4:	33ff      	adds	r3, #255	@ 0xff
 80200c6:	681b      	ldr	r3, [r3, #0]
 80200c8:	1ad2      	subs	r2, r2, r3
 80200ca:	683b      	ldr	r3, [r7, #0]
 80200cc:	621a      	str	r2, [r3, #32]
 80200ce:	e007      	b.n	80200e0 <USB_EPStartXfer+0x288>
            }
            else
            {
              len = ep->xfer_len_db;
 80200d0:	683b      	ldr	r3, [r7, #0]
 80200d2:	6a1b      	ldr	r3, [r3, #32]
 80200d4:	1d7a      	adds	r2, r7, #5
 80200d6:	32ff      	adds	r2, #255	@ 0xff
 80200d8:	6013      	str	r3, [r2, #0]
              ep->xfer_len_db = 0U;
 80200da:	683b      	ldr	r3, [r7, #0]
 80200dc:	2200      	movs	r2, #0
 80200de:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80200e0:	683b      	ldr	r3, [r7, #0]
 80200e2:	785b      	ldrb	r3, [r3, #1]
 80200e4:	2b00      	cmp	r3, #0
 80200e6:	d000      	beq.n	80200ea <USB_EPStartXfer+0x292>
 80200e8:	e070      	b.n	80201cc <USB_EPStartXfer+0x374>
 80200ea:	687b      	ldr	r3, [r7, #4]
 80200ec:	61bb      	str	r3, [r7, #24]
 80200ee:	687b      	ldr	r3, [r7, #4]
 80200f0:	2250      	movs	r2, #80	@ 0x50
 80200f2:	5a9b      	ldrh	r3, [r3, r2]
 80200f4:	b29b      	uxth	r3, r3
 80200f6:	001a      	movs	r2, r3
 80200f8:	69bb      	ldr	r3, [r7, #24]
 80200fa:	189b      	adds	r3, r3, r2
 80200fc:	61bb      	str	r3, [r7, #24]
 80200fe:	683b      	ldr	r3, [r7, #0]
 8020100:	781b      	ldrb	r3, [r3, #0]
 8020102:	00da      	lsls	r2, r3, #3
 8020104:	69bb      	ldr	r3, [r7, #24]
 8020106:	18d3      	adds	r3, r2, r3
 8020108:	4a48      	ldr	r2, [pc, #288]	@ (802022c <USB_EPStartXfer+0x3d4>)
 802010a:	4694      	mov	ip, r2
 802010c:	4463      	add	r3, ip
 802010e:	617b      	str	r3, [r7, #20]
 8020110:	697b      	ldr	r3, [r7, #20]
 8020112:	881b      	ldrh	r3, [r3, #0]
 8020114:	b29b      	uxth	r3, r3
 8020116:	059b      	lsls	r3, r3, #22
 8020118:	0d9b      	lsrs	r3, r3, #22
 802011a:	b29a      	uxth	r2, r3
 802011c:	697b      	ldr	r3, [r7, #20]
 802011e:	801a      	strh	r2, [r3, #0]
 8020120:	1d7b      	adds	r3, r7, #5
 8020122:	33ff      	adds	r3, #255	@ 0xff
 8020124:	681b      	ldr	r3, [r3, #0]
 8020126:	2b3e      	cmp	r3, #62	@ 0x3e
 8020128:	d922      	bls.n	8020170 <USB_EPStartXfer+0x318>
 802012a:	1d7b      	adds	r3, r7, #5
 802012c:	33ff      	adds	r3, #255	@ 0xff
 802012e:	681b      	ldr	r3, [r3, #0]
 8020130:	095b      	lsrs	r3, r3, #5
 8020132:	21fc      	movs	r1, #252	@ 0xfc
 8020134:	187a      	adds	r2, r7, r1
 8020136:	6013      	str	r3, [r2, #0]
 8020138:	1d7b      	adds	r3, r7, #5
 802013a:	33ff      	adds	r3, #255	@ 0xff
 802013c:	681b      	ldr	r3, [r3, #0]
 802013e:	221f      	movs	r2, #31
 8020140:	4013      	ands	r3, r2
 8020142:	d104      	bne.n	802014e <USB_EPStartXfer+0x2f6>
 8020144:	187b      	adds	r3, r7, r1
 8020146:	681b      	ldr	r3, [r3, #0]
 8020148:	3b01      	subs	r3, #1
 802014a:	187a      	adds	r2, r7, r1
 802014c:	6013      	str	r3, [r2, #0]
 802014e:	697b      	ldr	r3, [r7, #20]
 8020150:	881b      	ldrh	r3, [r3, #0]
 8020152:	b29a      	uxth	r2, r3
 8020154:	23fc      	movs	r3, #252	@ 0xfc
 8020156:	18fb      	adds	r3, r7, r3
 8020158:	681b      	ldr	r3, [r3, #0]
 802015a:	b29b      	uxth	r3, r3
 802015c:	029b      	lsls	r3, r3, #10
 802015e:	b29b      	uxth	r3, r3
 8020160:	4313      	orrs	r3, r2
 8020162:	b29b      	uxth	r3, r3
 8020164:	4a35      	ldr	r2, [pc, #212]	@ (802023c <USB_EPStartXfer+0x3e4>)
 8020166:	4313      	orrs	r3, r2
 8020168:	b29a      	uxth	r2, r3
 802016a:	697b      	ldr	r3, [r7, #20]
 802016c:	801a      	strh	r2, [r3, #0]
 802016e:	e04a      	b.n	8020206 <USB_EPStartXfer+0x3ae>
 8020170:	1d7b      	adds	r3, r7, #5
 8020172:	33ff      	adds	r3, #255	@ 0xff
 8020174:	681b      	ldr	r3, [r3, #0]
 8020176:	2b00      	cmp	r3, #0
 8020178:	d108      	bne.n	802018c <USB_EPStartXfer+0x334>
 802017a:	697b      	ldr	r3, [r7, #20]
 802017c:	881b      	ldrh	r3, [r3, #0]
 802017e:	b29b      	uxth	r3, r3
 8020180:	4a2e      	ldr	r2, [pc, #184]	@ (802023c <USB_EPStartXfer+0x3e4>)
 8020182:	4313      	orrs	r3, r2
 8020184:	b29a      	uxth	r2, r3
 8020186:	697b      	ldr	r3, [r7, #20]
 8020188:	801a      	strh	r2, [r3, #0]
 802018a:	e03c      	b.n	8020206 <USB_EPStartXfer+0x3ae>
 802018c:	1d7b      	adds	r3, r7, #5
 802018e:	33ff      	adds	r3, #255	@ 0xff
 8020190:	681b      	ldr	r3, [r3, #0]
 8020192:	085b      	lsrs	r3, r3, #1
 8020194:	21fc      	movs	r1, #252	@ 0xfc
 8020196:	187a      	adds	r2, r7, r1
 8020198:	6013      	str	r3, [r2, #0]
 802019a:	1d7b      	adds	r3, r7, #5
 802019c:	33ff      	adds	r3, #255	@ 0xff
 802019e:	681b      	ldr	r3, [r3, #0]
 80201a0:	2201      	movs	r2, #1
 80201a2:	4013      	ands	r3, r2
 80201a4:	d004      	beq.n	80201b0 <USB_EPStartXfer+0x358>
 80201a6:	187b      	adds	r3, r7, r1
 80201a8:	681b      	ldr	r3, [r3, #0]
 80201aa:	3301      	adds	r3, #1
 80201ac:	187a      	adds	r2, r7, r1
 80201ae:	6013      	str	r3, [r2, #0]
 80201b0:	697b      	ldr	r3, [r7, #20]
 80201b2:	881b      	ldrh	r3, [r3, #0]
 80201b4:	b29a      	uxth	r2, r3
 80201b6:	23fc      	movs	r3, #252	@ 0xfc
 80201b8:	18fb      	adds	r3, r7, r3
 80201ba:	681b      	ldr	r3, [r3, #0]
 80201bc:	b29b      	uxth	r3, r3
 80201be:	029b      	lsls	r3, r3, #10
 80201c0:	b29b      	uxth	r3, r3
 80201c2:	4313      	orrs	r3, r2
 80201c4:	b29a      	uxth	r2, r3
 80201c6:	697b      	ldr	r3, [r7, #20]
 80201c8:	801a      	strh	r2, [r3, #0]
 80201ca:	e01c      	b.n	8020206 <USB_EPStartXfer+0x3ae>
 80201cc:	683b      	ldr	r3, [r7, #0]
 80201ce:	785b      	ldrb	r3, [r3, #1]
 80201d0:	2b01      	cmp	r3, #1
 80201d2:	d118      	bne.n	8020206 <USB_EPStartXfer+0x3ae>
 80201d4:	687b      	ldr	r3, [r7, #4]
 80201d6:	623b      	str	r3, [r7, #32]
 80201d8:	687b      	ldr	r3, [r7, #4]
 80201da:	2250      	movs	r2, #80	@ 0x50
 80201dc:	5a9b      	ldrh	r3, [r3, r2]
 80201de:	b29b      	uxth	r3, r3
 80201e0:	001a      	movs	r2, r3
 80201e2:	6a3b      	ldr	r3, [r7, #32]
 80201e4:	189b      	adds	r3, r3, r2
 80201e6:	623b      	str	r3, [r7, #32]
 80201e8:	683b      	ldr	r3, [r7, #0]
 80201ea:	781b      	ldrb	r3, [r3, #0]
 80201ec:	00da      	lsls	r2, r3, #3
 80201ee:	6a3b      	ldr	r3, [r7, #32]
 80201f0:	18d3      	adds	r3, r2, r3
 80201f2:	4a0e      	ldr	r2, [pc, #56]	@ (802022c <USB_EPStartXfer+0x3d4>)
 80201f4:	4694      	mov	ip, r2
 80201f6:	4463      	add	r3, ip
 80201f8:	61fb      	str	r3, [r7, #28]
 80201fa:	1d7b      	adds	r3, r7, #5
 80201fc:	33ff      	adds	r3, #255	@ 0xff
 80201fe:	681b      	ldr	r3, [r3, #0]
 8020200:	b29a      	uxth	r2, r3
 8020202:	69fb      	ldr	r3, [r7, #28]
 8020204:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8020206:	2076      	movs	r0, #118	@ 0x76
 8020208:	183b      	adds	r3, r7, r0
 802020a:	683a      	ldr	r2, [r7, #0]
 802020c:	8912      	ldrh	r2, [r2, #8]
 802020e:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8020210:	683b      	ldr	r3, [r7, #0]
 8020212:	6959      	ldr	r1, [r3, #20]
 8020214:	1d7b      	adds	r3, r7, #5
 8020216:	33ff      	adds	r3, #255	@ 0xff
 8020218:	681b      	ldr	r3, [r3, #0]
 802021a:	b29c      	uxth	r4, r3
 802021c:	183b      	adds	r3, r7, r0
 802021e:	881a      	ldrh	r2, [r3, #0]
 8020220:	6878      	ldr	r0, [r7, #4]
 8020222:	0023      	movs	r3, r4
 8020224:	f001 f88a 	bl	802133c <USB_WritePMA>
 8020228:	e329      	b.n	802087e <USB_EPStartXfer+0xa26>
 802022a:	46c0      	nop			@ (mov r8, r8)
 802022c:	00000402 	.word	0x00000402
 8020230:	ffff8f8f 	.word	0xffff8f8f
 8020234:	ffff8180 	.word	0xffff8180
 8020238:	00000406 	.word	0x00000406
 802023c:	ffff8000 	.word	0xffff8000
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8020240:	683b      	ldr	r3, [r7, #0]
 8020242:	785b      	ldrb	r3, [r3, #1]
 8020244:	2b00      	cmp	r3, #0
 8020246:	d000      	beq.n	802024a <USB_EPStartXfer+0x3f2>
 8020248:	e070      	b.n	802032c <USB_EPStartXfer+0x4d4>
 802024a:	687b      	ldr	r3, [r7, #4]
 802024c:	64bb      	str	r3, [r7, #72]	@ 0x48
 802024e:	687b      	ldr	r3, [r7, #4]
 8020250:	2250      	movs	r2, #80	@ 0x50
 8020252:	5a9b      	ldrh	r3, [r3, r2]
 8020254:	b29b      	uxth	r3, r3
 8020256:	001a      	movs	r2, r3
 8020258:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 802025a:	189b      	adds	r3, r3, r2
 802025c:	64bb      	str	r3, [r7, #72]	@ 0x48
 802025e:	683b      	ldr	r3, [r7, #0]
 8020260:	781b      	ldrb	r3, [r3, #0]
 8020262:	00da      	lsls	r2, r3, #3
 8020264:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8020266:	18d3      	adds	r3, r2, r3
 8020268:	4acd      	ldr	r2, [pc, #820]	@ (80205a0 <USB_EPStartXfer+0x748>)
 802026a:	4694      	mov	ip, r2
 802026c:	4463      	add	r3, ip
 802026e:	647b      	str	r3, [r7, #68]	@ 0x44
 8020270:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8020272:	881b      	ldrh	r3, [r3, #0]
 8020274:	b29b      	uxth	r3, r3
 8020276:	059b      	lsls	r3, r3, #22
 8020278:	0d9b      	lsrs	r3, r3, #22
 802027a:	b29a      	uxth	r2, r3
 802027c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 802027e:	801a      	strh	r2, [r3, #0]
 8020280:	1d7b      	adds	r3, r7, #5
 8020282:	33ff      	adds	r3, #255	@ 0xff
 8020284:	681b      	ldr	r3, [r3, #0]
 8020286:	2b3e      	cmp	r3, #62	@ 0x3e
 8020288:	d922      	bls.n	80202d0 <USB_EPStartXfer+0x478>
 802028a:	1d7b      	adds	r3, r7, #5
 802028c:	33ff      	adds	r3, #255	@ 0xff
 802028e:	681b      	ldr	r3, [r3, #0]
 8020290:	095b      	lsrs	r3, r3, #5
 8020292:	21f8      	movs	r1, #248	@ 0xf8
 8020294:	187a      	adds	r2, r7, r1
 8020296:	6013      	str	r3, [r2, #0]
 8020298:	1d7b      	adds	r3, r7, #5
 802029a:	33ff      	adds	r3, #255	@ 0xff
 802029c:	681b      	ldr	r3, [r3, #0]
 802029e:	221f      	movs	r2, #31
 80202a0:	4013      	ands	r3, r2
 80202a2:	d104      	bne.n	80202ae <USB_EPStartXfer+0x456>
 80202a4:	187b      	adds	r3, r7, r1
 80202a6:	681b      	ldr	r3, [r3, #0]
 80202a8:	3b01      	subs	r3, #1
 80202aa:	187a      	adds	r2, r7, r1
 80202ac:	6013      	str	r3, [r2, #0]
 80202ae:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80202b0:	881b      	ldrh	r3, [r3, #0]
 80202b2:	b29a      	uxth	r2, r3
 80202b4:	23f8      	movs	r3, #248	@ 0xf8
 80202b6:	18fb      	adds	r3, r7, r3
 80202b8:	681b      	ldr	r3, [r3, #0]
 80202ba:	b29b      	uxth	r3, r3
 80202bc:	029b      	lsls	r3, r3, #10
 80202be:	b29b      	uxth	r3, r3
 80202c0:	4313      	orrs	r3, r2
 80202c2:	b29b      	uxth	r3, r3
 80202c4:	4ab7      	ldr	r2, [pc, #732]	@ (80205a4 <USB_EPStartXfer+0x74c>)
 80202c6:	4313      	orrs	r3, r2
 80202c8:	b29a      	uxth	r2, r3
 80202ca:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80202cc:	801a      	strh	r2, [r3, #0]
 80202ce:	e04a      	b.n	8020366 <USB_EPStartXfer+0x50e>
 80202d0:	1d7b      	adds	r3, r7, #5
 80202d2:	33ff      	adds	r3, #255	@ 0xff
 80202d4:	681b      	ldr	r3, [r3, #0]
 80202d6:	2b00      	cmp	r3, #0
 80202d8:	d108      	bne.n	80202ec <USB_EPStartXfer+0x494>
 80202da:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80202dc:	881b      	ldrh	r3, [r3, #0]
 80202de:	b29b      	uxth	r3, r3
 80202e0:	4ab0      	ldr	r2, [pc, #704]	@ (80205a4 <USB_EPStartXfer+0x74c>)
 80202e2:	4313      	orrs	r3, r2
 80202e4:	b29a      	uxth	r2, r3
 80202e6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80202e8:	801a      	strh	r2, [r3, #0]
 80202ea:	e03c      	b.n	8020366 <USB_EPStartXfer+0x50e>
 80202ec:	1d7b      	adds	r3, r7, #5
 80202ee:	33ff      	adds	r3, #255	@ 0xff
 80202f0:	681b      	ldr	r3, [r3, #0]
 80202f2:	085b      	lsrs	r3, r3, #1
 80202f4:	21f8      	movs	r1, #248	@ 0xf8
 80202f6:	187a      	adds	r2, r7, r1
 80202f8:	6013      	str	r3, [r2, #0]
 80202fa:	1d7b      	adds	r3, r7, #5
 80202fc:	33ff      	adds	r3, #255	@ 0xff
 80202fe:	681b      	ldr	r3, [r3, #0]
 8020300:	2201      	movs	r2, #1
 8020302:	4013      	ands	r3, r2
 8020304:	d004      	beq.n	8020310 <USB_EPStartXfer+0x4b8>
 8020306:	187b      	adds	r3, r7, r1
 8020308:	681b      	ldr	r3, [r3, #0]
 802030a:	3301      	adds	r3, #1
 802030c:	187a      	adds	r2, r7, r1
 802030e:	6013      	str	r3, [r2, #0]
 8020310:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8020312:	881b      	ldrh	r3, [r3, #0]
 8020314:	b29a      	uxth	r2, r3
 8020316:	23f8      	movs	r3, #248	@ 0xf8
 8020318:	18fb      	adds	r3, r7, r3
 802031a:	681b      	ldr	r3, [r3, #0]
 802031c:	b29b      	uxth	r3, r3
 802031e:	029b      	lsls	r3, r3, #10
 8020320:	b29b      	uxth	r3, r3
 8020322:	4313      	orrs	r3, r2
 8020324:	b29a      	uxth	r2, r3
 8020326:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8020328:	801a      	strh	r2, [r3, #0]
 802032a:	e01c      	b.n	8020366 <USB_EPStartXfer+0x50e>
 802032c:	683b      	ldr	r3, [r7, #0]
 802032e:	785b      	ldrb	r3, [r3, #1]
 8020330:	2b01      	cmp	r3, #1
 8020332:	d118      	bne.n	8020366 <USB_EPStartXfer+0x50e>
 8020334:	687b      	ldr	r3, [r7, #4]
 8020336:	653b      	str	r3, [r7, #80]	@ 0x50
 8020338:	687b      	ldr	r3, [r7, #4]
 802033a:	2250      	movs	r2, #80	@ 0x50
 802033c:	5a9b      	ldrh	r3, [r3, r2]
 802033e:	b29b      	uxth	r3, r3
 8020340:	001a      	movs	r2, r3
 8020342:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8020344:	189b      	adds	r3, r3, r2
 8020346:	653b      	str	r3, [r7, #80]	@ 0x50
 8020348:	683b      	ldr	r3, [r7, #0]
 802034a:	781b      	ldrb	r3, [r3, #0]
 802034c:	00da      	lsls	r2, r3, #3
 802034e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8020350:	18d3      	adds	r3, r2, r3
 8020352:	4a93      	ldr	r2, [pc, #588]	@ (80205a0 <USB_EPStartXfer+0x748>)
 8020354:	4694      	mov	ip, r2
 8020356:	4463      	add	r3, ip
 8020358:	64fb      	str	r3, [r7, #76]	@ 0x4c
 802035a:	1d7b      	adds	r3, r7, #5
 802035c:	33ff      	adds	r3, #255	@ 0xff
 802035e:	681b      	ldr	r3, [r3, #0]
 8020360:	b29a      	uxth	r2, r3
 8020362:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8020364:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8020366:	2076      	movs	r0, #118	@ 0x76
 8020368:	183b      	adds	r3, r7, r0
 802036a:	683a      	ldr	r2, [r7, #0]
 802036c:	8912      	ldrh	r2, [r2, #8]
 802036e:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8020370:	683b      	ldr	r3, [r7, #0]
 8020372:	6959      	ldr	r1, [r3, #20]
 8020374:	1d7b      	adds	r3, r7, #5
 8020376:	33ff      	adds	r3, #255	@ 0xff
 8020378:	681b      	ldr	r3, [r3, #0]
 802037a:	b29c      	uxth	r4, r3
 802037c:	183b      	adds	r3, r7, r0
 802037e:	881a      	ldrh	r2, [r3, #0]
 8020380:	6878      	ldr	r0, [r7, #4]
 8020382:	0023      	movs	r3, r4
 8020384:	f000 ffda 	bl	802133c <USB_WritePMA>
            ep->xfer_buff += len;
 8020388:	683b      	ldr	r3, [r7, #0]
 802038a:	695a      	ldr	r2, [r3, #20]
 802038c:	1d7b      	adds	r3, r7, #5
 802038e:	33ff      	adds	r3, #255	@ 0xff
 8020390:	681b      	ldr	r3, [r3, #0]
 8020392:	18d2      	adds	r2, r2, r3
 8020394:	683b      	ldr	r3, [r7, #0]
 8020396:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8020398:	683b      	ldr	r3, [r7, #0]
 802039a:	6a1a      	ldr	r2, [r3, #32]
 802039c:	683b      	ldr	r3, [r7, #0]
 802039e:	691b      	ldr	r3, [r3, #16]
 80203a0:	429a      	cmp	r2, r3
 80203a2:	d908      	bls.n	80203b6 <USB_EPStartXfer+0x55e>
            {
              ep->xfer_len_db -= len;
 80203a4:	683b      	ldr	r3, [r7, #0]
 80203a6:	6a1a      	ldr	r2, [r3, #32]
 80203a8:	1d7b      	adds	r3, r7, #5
 80203aa:	33ff      	adds	r3, #255	@ 0xff
 80203ac:	681b      	ldr	r3, [r3, #0]
 80203ae:	1ad2      	subs	r2, r2, r3
 80203b0:	683b      	ldr	r3, [r7, #0]
 80203b2:	621a      	str	r2, [r3, #32]
 80203b4:	e007      	b.n	80203c6 <USB_EPStartXfer+0x56e>
            }
            else
            {
              len = ep->xfer_len_db;
 80203b6:	683b      	ldr	r3, [r7, #0]
 80203b8:	6a1b      	ldr	r3, [r3, #32]
 80203ba:	1d7a      	adds	r2, r7, #5
 80203bc:	32ff      	adds	r2, #255	@ 0xff
 80203be:	6013      	str	r3, [r2, #0]
              ep->xfer_len_db = 0U;
 80203c0:	683b      	ldr	r3, [r7, #0]
 80203c2:	2200      	movs	r2, #0
 80203c4:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80203c6:	687b      	ldr	r3, [r7, #4]
 80203c8:	643b      	str	r3, [r7, #64]	@ 0x40
 80203ca:	683b      	ldr	r3, [r7, #0]
 80203cc:	785b      	ldrb	r3, [r3, #1]
 80203ce:	2b00      	cmp	r3, #0
 80203d0:	d000      	beq.n	80203d4 <USB_EPStartXfer+0x57c>
 80203d2:	e070      	b.n	80204b6 <USB_EPStartXfer+0x65e>
 80203d4:	687b      	ldr	r3, [r7, #4]
 80203d6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80203d8:	687b      	ldr	r3, [r7, #4]
 80203da:	2250      	movs	r2, #80	@ 0x50
 80203dc:	5a9b      	ldrh	r3, [r3, r2]
 80203de:	b29b      	uxth	r3, r3
 80203e0:	001a      	movs	r2, r3
 80203e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80203e4:	189b      	adds	r3, r3, r2
 80203e6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80203e8:	683b      	ldr	r3, [r7, #0]
 80203ea:	781b      	ldrb	r3, [r3, #0]
 80203ec:	00da      	lsls	r2, r3, #3
 80203ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80203f0:	18d3      	adds	r3, r2, r3
 80203f2:	4a6d      	ldr	r2, [pc, #436]	@ (80205a8 <USB_EPStartXfer+0x750>)
 80203f4:	4694      	mov	ip, r2
 80203f6:	4463      	add	r3, ip
 80203f8:	637b      	str	r3, [r7, #52]	@ 0x34
 80203fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80203fc:	881b      	ldrh	r3, [r3, #0]
 80203fe:	b29b      	uxth	r3, r3
 8020400:	059b      	lsls	r3, r3, #22
 8020402:	0d9b      	lsrs	r3, r3, #22
 8020404:	b29a      	uxth	r2, r3
 8020406:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8020408:	801a      	strh	r2, [r3, #0]
 802040a:	1d7b      	adds	r3, r7, #5
 802040c:	33ff      	adds	r3, #255	@ 0xff
 802040e:	681b      	ldr	r3, [r3, #0]
 8020410:	2b3e      	cmp	r3, #62	@ 0x3e
 8020412:	d922      	bls.n	802045a <USB_EPStartXfer+0x602>
 8020414:	1d7b      	adds	r3, r7, #5
 8020416:	33ff      	adds	r3, #255	@ 0xff
 8020418:	681b      	ldr	r3, [r3, #0]
 802041a:	095b      	lsrs	r3, r3, #5
 802041c:	21f4      	movs	r1, #244	@ 0xf4
 802041e:	187a      	adds	r2, r7, r1
 8020420:	6013      	str	r3, [r2, #0]
 8020422:	1d7b      	adds	r3, r7, #5
 8020424:	33ff      	adds	r3, #255	@ 0xff
 8020426:	681b      	ldr	r3, [r3, #0]
 8020428:	221f      	movs	r2, #31
 802042a:	4013      	ands	r3, r2
 802042c:	d104      	bne.n	8020438 <USB_EPStartXfer+0x5e0>
 802042e:	187b      	adds	r3, r7, r1
 8020430:	681b      	ldr	r3, [r3, #0]
 8020432:	3b01      	subs	r3, #1
 8020434:	187a      	adds	r2, r7, r1
 8020436:	6013      	str	r3, [r2, #0]
 8020438:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 802043a:	881b      	ldrh	r3, [r3, #0]
 802043c:	b29a      	uxth	r2, r3
 802043e:	23f4      	movs	r3, #244	@ 0xf4
 8020440:	18fb      	adds	r3, r7, r3
 8020442:	681b      	ldr	r3, [r3, #0]
 8020444:	b29b      	uxth	r3, r3
 8020446:	029b      	lsls	r3, r3, #10
 8020448:	b29b      	uxth	r3, r3
 802044a:	4313      	orrs	r3, r2
 802044c:	b29b      	uxth	r3, r3
 802044e:	4a55      	ldr	r2, [pc, #340]	@ (80205a4 <USB_EPStartXfer+0x74c>)
 8020450:	4313      	orrs	r3, r2
 8020452:	b29a      	uxth	r2, r3
 8020454:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8020456:	801a      	strh	r2, [r3, #0]
 8020458:	e048      	b.n	80204ec <USB_EPStartXfer+0x694>
 802045a:	1d7b      	adds	r3, r7, #5
 802045c:	33ff      	adds	r3, #255	@ 0xff
 802045e:	681b      	ldr	r3, [r3, #0]
 8020460:	2b00      	cmp	r3, #0
 8020462:	d108      	bne.n	8020476 <USB_EPStartXfer+0x61e>
 8020464:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8020466:	881b      	ldrh	r3, [r3, #0]
 8020468:	b29b      	uxth	r3, r3
 802046a:	4a4e      	ldr	r2, [pc, #312]	@ (80205a4 <USB_EPStartXfer+0x74c>)
 802046c:	4313      	orrs	r3, r2
 802046e:	b29a      	uxth	r2, r3
 8020470:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8020472:	801a      	strh	r2, [r3, #0]
 8020474:	e03a      	b.n	80204ec <USB_EPStartXfer+0x694>
 8020476:	1d7b      	adds	r3, r7, #5
 8020478:	33ff      	adds	r3, #255	@ 0xff
 802047a:	681b      	ldr	r3, [r3, #0]
 802047c:	085b      	lsrs	r3, r3, #1
 802047e:	21f4      	movs	r1, #244	@ 0xf4
 8020480:	187a      	adds	r2, r7, r1
 8020482:	6013      	str	r3, [r2, #0]
 8020484:	1d7b      	adds	r3, r7, #5
 8020486:	33ff      	adds	r3, #255	@ 0xff
 8020488:	681b      	ldr	r3, [r3, #0]
 802048a:	2201      	movs	r2, #1
 802048c:	4013      	ands	r3, r2
 802048e:	d004      	beq.n	802049a <USB_EPStartXfer+0x642>
 8020490:	187b      	adds	r3, r7, r1
 8020492:	681b      	ldr	r3, [r3, #0]
 8020494:	3301      	adds	r3, #1
 8020496:	187a      	adds	r2, r7, r1
 8020498:	6013      	str	r3, [r2, #0]
 802049a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 802049c:	881b      	ldrh	r3, [r3, #0]
 802049e:	b29a      	uxth	r2, r3
 80204a0:	23f4      	movs	r3, #244	@ 0xf4
 80204a2:	18fb      	adds	r3, r7, r3
 80204a4:	681b      	ldr	r3, [r3, #0]
 80204a6:	b29b      	uxth	r3, r3
 80204a8:	029b      	lsls	r3, r3, #10
 80204aa:	b29b      	uxth	r3, r3
 80204ac:	4313      	orrs	r3, r2
 80204ae:	b29a      	uxth	r2, r3
 80204b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80204b2:	801a      	strh	r2, [r3, #0]
 80204b4:	e01a      	b.n	80204ec <USB_EPStartXfer+0x694>
 80204b6:	683b      	ldr	r3, [r7, #0]
 80204b8:	785b      	ldrb	r3, [r3, #1]
 80204ba:	2b01      	cmp	r3, #1
 80204bc:	d116      	bne.n	80204ec <USB_EPStartXfer+0x694>
 80204be:	687b      	ldr	r3, [r7, #4]
 80204c0:	2250      	movs	r2, #80	@ 0x50
 80204c2:	5a9b      	ldrh	r3, [r3, r2]
 80204c4:	b29b      	uxth	r3, r3
 80204c6:	001a      	movs	r2, r3
 80204c8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80204ca:	189b      	adds	r3, r3, r2
 80204cc:	643b      	str	r3, [r7, #64]	@ 0x40
 80204ce:	683b      	ldr	r3, [r7, #0]
 80204d0:	781b      	ldrb	r3, [r3, #0]
 80204d2:	00da      	lsls	r2, r3, #3
 80204d4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80204d6:	18d3      	adds	r3, r2, r3
 80204d8:	4a33      	ldr	r2, [pc, #204]	@ (80205a8 <USB_EPStartXfer+0x750>)
 80204da:	4694      	mov	ip, r2
 80204dc:	4463      	add	r3, ip
 80204de:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80204e0:	1d7b      	adds	r3, r7, #5
 80204e2:	33ff      	adds	r3, #255	@ 0xff
 80204e4:	681b      	ldr	r3, [r3, #0]
 80204e6:	b29a      	uxth	r2, r3
 80204e8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80204ea:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80204ec:	2076      	movs	r0, #118	@ 0x76
 80204ee:	183b      	adds	r3, r7, r0
 80204f0:	683a      	ldr	r2, [r7, #0]
 80204f2:	8952      	ldrh	r2, [r2, #10]
 80204f4:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80204f6:	683b      	ldr	r3, [r7, #0]
 80204f8:	6959      	ldr	r1, [r3, #20]
 80204fa:	1d7b      	adds	r3, r7, #5
 80204fc:	33ff      	adds	r3, #255	@ 0xff
 80204fe:	681b      	ldr	r3, [r3, #0]
 8020500:	b29c      	uxth	r4, r3
 8020502:	183b      	adds	r3, r7, r0
 8020504:	881a      	ldrh	r2, [r3, #0]
 8020506:	6878      	ldr	r0, [r7, #4]
 8020508:	0023      	movs	r3, r4
 802050a:	f000 ff17 	bl	802133c <USB_WritePMA>
 802050e:	e1b6      	b.n	802087e <USB_EPStartXfer+0xa26>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8020510:	683b      	ldr	r3, [r7, #0]
 8020512:	6a1b      	ldr	r3, [r3, #32]
 8020514:	1d7a      	adds	r2, r7, #5
 8020516:	32ff      	adds	r2, #255	@ 0xff
 8020518:	6013      	str	r3, [r2, #0]

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 802051a:	687a      	ldr	r2, [r7, #4]
 802051c:	683b      	ldr	r3, [r7, #0]
 802051e:	781b      	ldrb	r3, [r3, #0]
 8020520:	009b      	lsls	r3, r3, #2
 8020522:	18d3      	adds	r3, r2, r3
 8020524:	881b      	ldrh	r3, [r3, #0]
 8020526:	b29a      	uxth	r2, r3
 8020528:	2062      	movs	r0, #98	@ 0x62
 802052a:	183b      	adds	r3, r7, r0
 802052c:	491f      	ldr	r1, [pc, #124]	@ (80205ac <USB_EPStartXfer+0x754>)
 802052e:	400a      	ands	r2, r1
 8020530:	801a      	strh	r2, [r3, #0]
 8020532:	687a      	ldr	r2, [r7, #4]
 8020534:	683b      	ldr	r3, [r7, #0]
 8020536:	781b      	ldrb	r3, [r3, #0]
 8020538:	009b      	lsls	r3, r3, #2
 802053a:	18d3      	adds	r3, r2, r3
 802053c:	183a      	adds	r2, r7, r0
 802053e:	8812      	ldrh	r2, [r2, #0]
 8020540:	491b      	ldr	r1, [pc, #108]	@ (80205b0 <USB_EPStartXfer+0x758>)
 8020542:	430a      	orrs	r2, r1
 8020544:	b292      	uxth	r2, r2
 8020546:	801a      	strh	r2, [r3, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8020548:	687b      	ldr	r3, [r7, #4]
 802054a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 802054c:	687b      	ldr	r3, [r7, #4]
 802054e:	2250      	movs	r2, #80	@ 0x50
 8020550:	5a9b      	ldrh	r3, [r3, r2]
 8020552:	b29b      	uxth	r3, r3
 8020554:	001a      	movs	r2, r3
 8020556:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8020558:	189b      	adds	r3, r3, r2
 802055a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 802055c:	683b      	ldr	r3, [r7, #0]
 802055e:	781b      	ldrb	r3, [r3, #0]
 8020560:	00da      	lsls	r2, r3, #3
 8020562:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8020564:	18d3      	adds	r3, r2, r3
 8020566:	4a0e      	ldr	r2, [pc, #56]	@ (80205a0 <USB_EPStartXfer+0x748>)
 8020568:	4694      	mov	ip, r2
 802056a:	4463      	add	r3, ip
 802056c:	65bb      	str	r3, [r7, #88]	@ 0x58
 802056e:	1d7b      	adds	r3, r7, #5
 8020570:	33ff      	adds	r3, #255	@ 0xff
 8020572:	681b      	ldr	r3, [r3, #0]
 8020574:	b29a      	uxth	r2, r3
 8020576:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8020578:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 802057a:	2076      	movs	r0, #118	@ 0x76
 802057c:	183b      	adds	r3, r7, r0
 802057e:	683a      	ldr	r2, [r7, #0]
 8020580:	8912      	ldrh	r2, [r2, #8]
 8020582:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8020584:	683b      	ldr	r3, [r7, #0]
 8020586:	6959      	ldr	r1, [r3, #20]
 8020588:	1d7b      	adds	r3, r7, #5
 802058a:	33ff      	adds	r3, #255	@ 0xff
 802058c:	681b      	ldr	r3, [r3, #0]
 802058e:	b29c      	uxth	r4, r3
 8020590:	183b      	adds	r3, r7, r0
 8020592:	881a      	ldrh	r2, [r3, #0]
 8020594:	6878      	ldr	r0, [r7, #4]
 8020596:	0023      	movs	r3, r4
 8020598:	f000 fed0 	bl	802133c <USB_WritePMA>
 802059c:	e16f      	b.n	802087e <USB_EPStartXfer+0xa26>
 802059e:	46c0      	nop			@ (mov r8, r8)
 80205a0:	00000402 	.word	0x00000402
 80205a4:	ffff8000 	.word	0xffff8000
 80205a8:	00000406 	.word	0x00000406
 80205ac:	ffff8e8f 	.word	0xffff8e8f
 80205b0:	ffff8080 	.word	0xffff8080
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 80205b4:	683b      	ldr	r3, [r7, #0]
 80205b6:	6a1a      	ldr	r2, [r3, #32]
 80205b8:	1d7b      	adds	r3, r7, #5
 80205ba:	33ff      	adds	r3, #255	@ 0xff
 80205bc:	681b      	ldr	r3, [r3, #0]
 80205be:	1ad2      	subs	r2, r2, r3
 80205c0:	683b      	ldr	r3, [r7, #0]
 80205c2:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80205c4:	687a      	ldr	r2, [r7, #4]
 80205c6:	683b      	ldr	r3, [r7, #0]
 80205c8:	781b      	ldrb	r3, [r3, #0]
 80205ca:	009b      	lsls	r3, r3, #2
 80205cc:	18d3      	adds	r3, r2, r3
 80205ce:	881b      	ldrh	r3, [r3, #0]
 80205d0:	b29b      	uxth	r3, r3
 80205d2:	001a      	movs	r2, r3
 80205d4:	2340      	movs	r3, #64	@ 0x40
 80205d6:	4013      	ands	r3, r2
 80205d8:	d100      	bne.n	80205dc <USB_EPStartXfer+0x784>
 80205da:	e0a4      	b.n	8020726 <USB_EPStartXfer+0x8ce>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80205dc:	687b      	ldr	r3, [r7, #4]
 80205de:	673b      	str	r3, [r7, #112]	@ 0x70
 80205e0:	683b      	ldr	r3, [r7, #0]
 80205e2:	785b      	ldrb	r3, [r3, #1]
 80205e4:	2b00      	cmp	r3, #0
 80205e6:	d000      	beq.n	80205ea <USB_EPStartXfer+0x792>
 80205e8:	e070      	b.n	80206cc <USB_EPStartXfer+0x874>
 80205ea:	687b      	ldr	r3, [r7, #4]
 80205ec:	66bb      	str	r3, [r7, #104]	@ 0x68
 80205ee:	687b      	ldr	r3, [r7, #4]
 80205f0:	2250      	movs	r2, #80	@ 0x50
 80205f2:	5a9b      	ldrh	r3, [r3, r2]
 80205f4:	b29b      	uxth	r3, r3
 80205f6:	001a      	movs	r2, r3
 80205f8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80205fa:	189b      	adds	r3, r3, r2
 80205fc:	66bb      	str	r3, [r7, #104]	@ 0x68
 80205fe:	683b      	ldr	r3, [r7, #0]
 8020600:	781b      	ldrb	r3, [r3, #0]
 8020602:	00da      	lsls	r2, r3, #3
 8020604:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8020606:	18d3      	adds	r3, r2, r3
 8020608:	4abc      	ldr	r2, [pc, #752]	@ (80208fc <USB_EPStartXfer+0xaa4>)
 802060a:	4694      	mov	ip, r2
 802060c:	4463      	add	r3, ip
 802060e:	667b      	str	r3, [r7, #100]	@ 0x64
 8020610:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8020612:	881b      	ldrh	r3, [r3, #0]
 8020614:	b29b      	uxth	r3, r3
 8020616:	059b      	lsls	r3, r3, #22
 8020618:	0d9b      	lsrs	r3, r3, #22
 802061a:	b29a      	uxth	r2, r3
 802061c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 802061e:	801a      	strh	r2, [r3, #0]
 8020620:	1d7b      	adds	r3, r7, #5
 8020622:	33ff      	adds	r3, #255	@ 0xff
 8020624:	681b      	ldr	r3, [r3, #0]
 8020626:	2b3e      	cmp	r3, #62	@ 0x3e
 8020628:	d922      	bls.n	8020670 <USB_EPStartXfer+0x818>
 802062a:	1d7b      	adds	r3, r7, #5
 802062c:	33ff      	adds	r3, #255	@ 0xff
 802062e:	681b      	ldr	r3, [r3, #0]
 8020630:	095b      	lsrs	r3, r3, #5
 8020632:	21f0      	movs	r1, #240	@ 0xf0
 8020634:	187a      	adds	r2, r7, r1
 8020636:	6013      	str	r3, [r2, #0]
 8020638:	1d7b      	adds	r3, r7, #5
 802063a:	33ff      	adds	r3, #255	@ 0xff
 802063c:	681b      	ldr	r3, [r3, #0]
 802063e:	221f      	movs	r2, #31
 8020640:	4013      	ands	r3, r2
 8020642:	d104      	bne.n	802064e <USB_EPStartXfer+0x7f6>
 8020644:	187b      	adds	r3, r7, r1
 8020646:	681b      	ldr	r3, [r3, #0]
 8020648:	3b01      	subs	r3, #1
 802064a:	187a      	adds	r2, r7, r1
 802064c:	6013      	str	r3, [r2, #0]
 802064e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8020650:	881b      	ldrh	r3, [r3, #0]
 8020652:	b29a      	uxth	r2, r3
 8020654:	23f0      	movs	r3, #240	@ 0xf0
 8020656:	18fb      	adds	r3, r7, r3
 8020658:	681b      	ldr	r3, [r3, #0]
 802065a:	b29b      	uxth	r3, r3
 802065c:	029b      	lsls	r3, r3, #10
 802065e:	b29b      	uxth	r3, r3
 8020660:	4313      	orrs	r3, r2
 8020662:	b29b      	uxth	r3, r3
 8020664:	4aa6      	ldr	r2, [pc, #664]	@ (8020900 <USB_EPStartXfer+0xaa8>)
 8020666:	4313      	orrs	r3, r2
 8020668:	b29a      	uxth	r2, r3
 802066a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 802066c:	801a      	strh	r2, [r3, #0]
 802066e:	e048      	b.n	8020702 <USB_EPStartXfer+0x8aa>
 8020670:	1d7b      	adds	r3, r7, #5
 8020672:	33ff      	adds	r3, #255	@ 0xff
 8020674:	681b      	ldr	r3, [r3, #0]
 8020676:	2b00      	cmp	r3, #0
 8020678:	d108      	bne.n	802068c <USB_EPStartXfer+0x834>
 802067a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 802067c:	881b      	ldrh	r3, [r3, #0]
 802067e:	b29b      	uxth	r3, r3
 8020680:	4a9f      	ldr	r2, [pc, #636]	@ (8020900 <USB_EPStartXfer+0xaa8>)
 8020682:	4313      	orrs	r3, r2
 8020684:	b29a      	uxth	r2, r3
 8020686:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8020688:	801a      	strh	r2, [r3, #0]
 802068a:	e03a      	b.n	8020702 <USB_EPStartXfer+0x8aa>
 802068c:	1d7b      	adds	r3, r7, #5
 802068e:	33ff      	adds	r3, #255	@ 0xff
 8020690:	681b      	ldr	r3, [r3, #0]
 8020692:	085b      	lsrs	r3, r3, #1
 8020694:	21f0      	movs	r1, #240	@ 0xf0
 8020696:	187a      	adds	r2, r7, r1
 8020698:	6013      	str	r3, [r2, #0]
 802069a:	1d7b      	adds	r3, r7, #5
 802069c:	33ff      	adds	r3, #255	@ 0xff
 802069e:	681b      	ldr	r3, [r3, #0]
 80206a0:	2201      	movs	r2, #1
 80206a2:	4013      	ands	r3, r2
 80206a4:	d004      	beq.n	80206b0 <USB_EPStartXfer+0x858>
 80206a6:	187b      	adds	r3, r7, r1
 80206a8:	681b      	ldr	r3, [r3, #0]
 80206aa:	3301      	adds	r3, #1
 80206ac:	187a      	adds	r2, r7, r1
 80206ae:	6013      	str	r3, [r2, #0]
 80206b0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80206b2:	881b      	ldrh	r3, [r3, #0]
 80206b4:	b29a      	uxth	r2, r3
 80206b6:	23f0      	movs	r3, #240	@ 0xf0
 80206b8:	18fb      	adds	r3, r7, r3
 80206ba:	681b      	ldr	r3, [r3, #0]
 80206bc:	b29b      	uxth	r3, r3
 80206be:	029b      	lsls	r3, r3, #10
 80206c0:	b29b      	uxth	r3, r3
 80206c2:	4313      	orrs	r3, r2
 80206c4:	b29a      	uxth	r2, r3
 80206c6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80206c8:	801a      	strh	r2, [r3, #0]
 80206ca:	e01a      	b.n	8020702 <USB_EPStartXfer+0x8aa>
 80206cc:	683b      	ldr	r3, [r7, #0]
 80206ce:	785b      	ldrb	r3, [r3, #1]
 80206d0:	2b01      	cmp	r3, #1
 80206d2:	d116      	bne.n	8020702 <USB_EPStartXfer+0x8aa>
 80206d4:	687b      	ldr	r3, [r7, #4]
 80206d6:	2250      	movs	r2, #80	@ 0x50
 80206d8:	5a9b      	ldrh	r3, [r3, r2]
 80206da:	b29b      	uxth	r3, r3
 80206dc:	001a      	movs	r2, r3
 80206de:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80206e0:	189b      	adds	r3, r3, r2
 80206e2:	673b      	str	r3, [r7, #112]	@ 0x70
 80206e4:	683b      	ldr	r3, [r7, #0]
 80206e6:	781b      	ldrb	r3, [r3, #0]
 80206e8:	00da      	lsls	r2, r3, #3
 80206ea:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80206ec:	18d3      	adds	r3, r2, r3
 80206ee:	4a83      	ldr	r2, [pc, #524]	@ (80208fc <USB_EPStartXfer+0xaa4>)
 80206f0:	4694      	mov	ip, r2
 80206f2:	4463      	add	r3, ip
 80206f4:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80206f6:	1d7b      	adds	r3, r7, #5
 80206f8:	33ff      	adds	r3, #255	@ 0xff
 80206fa:	681b      	ldr	r3, [r3, #0]
 80206fc:	b29a      	uxth	r2, r3
 80206fe:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8020700:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8020702:	2076      	movs	r0, #118	@ 0x76
 8020704:	183b      	adds	r3, r7, r0
 8020706:	683a      	ldr	r2, [r7, #0]
 8020708:	8952      	ldrh	r2, [r2, #10]
 802070a:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 802070c:	683b      	ldr	r3, [r7, #0]
 802070e:	6959      	ldr	r1, [r3, #20]
 8020710:	1d7b      	adds	r3, r7, #5
 8020712:	33ff      	adds	r3, #255	@ 0xff
 8020714:	681b      	ldr	r3, [r3, #0]
 8020716:	b29c      	uxth	r4, r3
 8020718:	183b      	adds	r3, r7, r0
 802071a:	881a      	ldrh	r2, [r3, #0]
 802071c:	6878      	ldr	r0, [r7, #4]
 802071e:	0023      	movs	r3, r4
 8020720:	f000 fe0c 	bl	802133c <USB_WritePMA>
 8020724:	e0ab      	b.n	802087e <USB_EPStartXfer+0xa26>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8020726:	683b      	ldr	r3, [r7, #0]
 8020728:	785b      	ldrb	r3, [r3, #1]
 802072a:	2b00      	cmp	r3, #0
 802072c:	d000      	beq.n	8020730 <USB_EPStartXfer+0x8d8>
 802072e:	e070      	b.n	8020812 <USB_EPStartXfer+0x9ba>
 8020730:	687b      	ldr	r3, [r7, #4]
 8020732:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8020734:	687b      	ldr	r3, [r7, #4]
 8020736:	2250      	movs	r2, #80	@ 0x50
 8020738:	5a9b      	ldrh	r3, [r3, r2]
 802073a:	b29b      	uxth	r3, r3
 802073c:	001a      	movs	r2, r3
 802073e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8020740:	189b      	adds	r3, r3, r2
 8020742:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8020744:	683b      	ldr	r3, [r7, #0]
 8020746:	781b      	ldrb	r3, [r3, #0]
 8020748:	00da      	lsls	r2, r3, #3
 802074a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 802074c:	18d3      	adds	r3, r2, r3
 802074e:	4a6d      	ldr	r2, [pc, #436]	@ (8020904 <USB_EPStartXfer+0xaac>)
 8020750:	4694      	mov	ip, r2
 8020752:	4463      	add	r3, ip
 8020754:	67bb      	str	r3, [r7, #120]	@ 0x78
 8020756:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8020758:	881b      	ldrh	r3, [r3, #0]
 802075a:	b29b      	uxth	r3, r3
 802075c:	059b      	lsls	r3, r3, #22
 802075e:	0d9b      	lsrs	r3, r3, #22
 8020760:	b29a      	uxth	r2, r3
 8020762:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8020764:	801a      	strh	r2, [r3, #0]
 8020766:	1d7b      	adds	r3, r7, #5
 8020768:	33ff      	adds	r3, #255	@ 0xff
 802076a:	681b      	ldr	r3, [r3, #0]
 802076c:	2b3e      	cmp	r3, #62	@ 0x3e
 802076e:	d922      	bls.n	80207b6 <USB_EPStartXfer+0x95e>
 8020770:	1d7b      	adds	r3, r7, #5
 8020772:	33ff      	adds	r3, #255	@ 0xff
 8020774:	681b      	ldr	r3, [r3, #0]
 8020776:	095b      	lsrs	r3, r3, #5
 8020778:	21ec      	movs	r1, #236	@ 0xec
 802077a:	187a      	adds	r2, r7, r1
 802077c:	6013      	str	r3, [r2, #0]
 802077e:	1d7b      	adds	r3, r7, #5
 8020780:	33ff      	adds	r3, #255	@ 0xff
 8020782:	681b      	ldr	r3, [r3, #0]
 8020784:	221f      	movs	r2, #31
 8020786:	4013      	ands	r3, r2
 8020788:	d104      	bne.n	8020794 <USB_EPStartXfer+0x93c>
 802078a:	187b      	adds	r3, r7, r1
 802078c:	681b      	ldr	r3, [r3, #0]
 802078e:	3b01      	subs	r3, #1
 8020790:	187a      	adds	r2, r7, r1
 8020792:	6013      	str	r3, [r2, #0]
 8020794:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8020796:	881b      	ldrh	r3, [r3, #0]
 8020798:	b29a      	uxth	r2, r3
 802079a:	23ec      	movs	r3, #236	@ 0xec
 802079c:	18fb      	adds	r3, r7, r3
 802079e:	681b      	ldr	r3, [r3, #0]
 80207a0:	b29b      	uxth	r3, r3
 80207a2:	029b      	lsls	r3, r3, #10
 80207a4:	b29b      	uxth	r3, r3
 80207a6:	4313      	orrs	r3, r2
 80207a8:	b29b      	uxth	r3, r3
 80207aa:	4a55      	ldr	r2, [pc, #340]	@ (8020900 <USB_EPStartXfer+0xaa8>)
 80207ac:	4313      	orrs	r3, r2
 80207ae:	b29a      	uxth	r2, r3
 80207b0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80207b2:	801a      	strh	r2, [r3, #0]
 80207b4:	e052      	b.n	802085c <USB_EPStartXfer+0xa04>
 80207b6:	1d7b      	adds	r3, r7, #5
 80207b8:	33ff      	adds	r3, #255	@ 0xff
 80207ba:	681b      	ldr	r3, [r3, #0]
 80207bc:	2b00      	cmp	r3, #0
 80207be:	d108      	bne.n	80207d2 <USB_EPStartXfer+0x97a>
 80207c0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80207c2:	881b      	ldrh	r3, [r3, #0]
 80207c4:	b29b      	uxth	r3, r3
 80207c6:	4a4e      	ldr	r2, [pc, #312]	@ (8020900 <USB_EPStartXfer+0xaa8>)
 80207c8:	4313      	orrs	r3, r2
 80207ca:	b29a      	uxth	r2, r3
 80207cc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80207ce:	801a      	strh	r2, [r3, #0]
 80207d0:	e044      	b.n	802085c <USB_EPStartXfer+0xa04>
 80207d2:	1d7b      	adds	r3, r7, #5
 80207d4:	33ff      	adds	r3, #255	@ 0xff
 80207d6:	681b      	ldr	r3, [r3, #0]
 80207d8:	085b      	lsrs	r3, r3, #1
 80207da:	21ec      	movs	r1, #236	@ 0xec
 80207dc:	187a      	adds	r2, r7, r1
 80207de:	6013      	str	r3, [r2, #0]
 80207e0:	1d7b      	adds	r3, r7, #5
 80207e2:	33ff      	adds	r3, #255	@ 0xff
 80207e4:	681b      	ldr	r3, [r3, #0]
 80207e6:	2201      	movs	r2, #1
 80207e8:	4013      	ands	r3, r2
 80207ea:	d004      	beq.n	80207f6 <USB_EPStartXfer+0x99e>
 80207ec:	187b      	adds	r3, r7, r1
 80207ee:	681b      	ldr	r3, [r3, #0]
 80207f0:	3301      	adds	r3, #1
 80207f2:	187a      	adds	r2, r7, r1
 80207f4:	6013      	str	r3, [r2, #0]
 80207f6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80207f8:	881b      	ldrh	r3, [r3, #0]
 80207fa:	b29a      	uxth	r2, r3
 80207fc:	23ec      	movs	r3, #236	@ 0xec
 80207fe:	18fb      	adds	r3, r7, r3
 8020800:	681b      	ldr	r3, [r3, #0]
 8020802:	b29b      	uxth	r3, r3
 8020804:	029b      	lsls	r3, r3, #10
 8020806:	b29b      	uxth	r3, r3
 8020808:	4313      	orrs	r3, r2
 802080a:	b29a      	uxth	r2, r3
 802080c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 802080e:	801a      	strh	r2, [r3, #0]
 8020810:	e024      	b.n	802085c <USB_EPStartXfer+0xa04>
 8020812:	683b      	ldr	r3, [r7, #0]
 8020814:	785b      	ldrb	r3, [r3, #1]
 8020816:	2b01      	cmp	r3, #1
 8020818:	d120      	bne.n	802085c <USB_EPStartXfer+0xa04>
 802081a:	687b      	ldr	r3, [r7, #4]
 802081c:	2184      	movs	r1, #132	@ 0x84
 802081e:	187a      	adds	r2, r7, r1
 8020820:	6013      	str	r3, [r2, #0]
 8020822:	687b      	ldr	r3, [r7, #4]
 8020824:	2250      	movs	r2, #80	@ 0x50
 8020826:	5a9b      	ldrh	r3, [r3, r2]
 8020828:	b29b      	uxth	r3, r3
 802082a:	001a      	movs	r2, r3
 802082c:	187b      	adds	r3, r7, r1
 802082e:	681b      	ldr	r3, [r3, #0]
 8020830:	189b      	adds	r3, r3, r2
 8020832:	187a      	adds	r2, r7, r1
 8020834:	6013      	str	r3, [r2, #0]
 8020836:	683b      	ldr	r3, [r7, #0]
 8020838:	781b      	ldrb	r3, [r3, #0]
 802083a:	00da      	lsls	r2, r3, #3
 802083c:	187b      	adds	r3, r7, r1
 802083e:	681b      	ldr	r3, [r3, #0]
 8020840:	18d3      	adds	r3, r2, r3
 8020842:	4a30      	ldr	r2, [pc, #192]	@ (8020904 <USB_EPStartXfer+0xaac>)
 8020844:	4694      	mov	ip, r2
 8020846:	4463      	add	r3, ip
 8020848:	2180      	movs	r1, #128	@ 0x80
 802084a:	187a      	adds	r2, r7, r1
 802084c:	6013      	str	r3, [r2, #0]
 802084e:	1d7b      	adds	r3, r7, #5
 8020850:	33ff      	adds	r3, #255	@ 0xff
 8020852:	681b      	ldr	r3, [r3, #0]
 8020854:	b29a      	uxth	r2, r3
 8020856:	187b      	adds	r3, r7, r1
 8020858:	681b      	ldr	r3, [r3, #0]
 802085a:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 802085c:	2076      	movs	r0, #118	@ 0x76
 802085e:	183b      	adds	r3, r7, r0
 8020860:	683a      	ldr	r2, [r7, #0]
 8020862:	8912      	ldrh	r2, [r2, #8]
 8020864:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8020866:	683b      	ldr	r3, [r7, #0]
 8020868:	6959      	ldr	r1, [r3, #20]
 802086a:	1d7b      	adds	r3, r7, #5
 802086c:	33ff      	adds	r3, #255	@ 0xff
 802086e:	681b      	ldr	r3, [r3, #0]
 8020870:	b29c      	uxth	r4, r3
 8020872:	183b      	adds	r3, r7, r0
 8020874:	881a      	ldrh	r2, [r3, #0]
 8020876:	6878      	ldr	r0, [r7, #4]
 8020878:	0023      	movs	r3, r4
 802087a:	f000 fd5f 	bl	802133c <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 802087e:	687a      	ldr	r2, [r7, #4]
 8020880:	683b      	ldr	r3, [r7, #0]
 8020882:	781b      	ldrb	r3, [r3, #0]
 8020884:	009b      	lsls	r3, r3, #2
 8020886:	18d3      	adds	r3, r2, r3
 8020888:	881b      	ldrh	r3, [r3, #0]
 802088a:	b29a      	uxth	r2, r3
 802088c:	200a      	movs	r0, #10
 802088e:	183b      	adds	r3, r7, r0
 8020890:	491d      	ldr	r1, [pc, #116]	@ (8020908 <USB_EPStartXfer+0xab0>)
 8020892:	400a      	ands	r2, r1
 8020894:	801a      	strh	r2, [r3, #0]
 8020896:	183b      	adds	r3, r7, r0
 8020898:	183a      	adds	r2, r7, r0
 802089a:	8812      	ldrh	r2, [r2, #0]
 802089c:	2110      	movs	r1, #16
 802089e:	404a      	eors	r2, r1
 80208a0:	801a      	strh	r2, [r3, #0]
 80208a2:	183b      	adds	r3, r7, r0
 80208a4:	183a      	adds	r2, r7, r0
 80208a6:	8812      	ldrh	r2, [r2, #0]
 80208a8:	2120      	movs	r1, #32
 80208aa:	404a      	eors	r2, r1
 80208ac:	801a      	strh	r2, [r3, #0]
 80208ae:	687a      	ldr	r2, [r7, #4]
 80208b0:	683b      	ldr	r3, [r7, #0]
 80208b2:	781b      	ldrb	r3, [r3, #0]
 80208b4:	009b      	lsls	r3, r3, #2
 80208b6:	18d3      	adds	r3, r2, r3
 80208b8:	183a      	adds	r2, r7, r0
 80208ba:	8812      	ldrh	r2, [r2, #0]
 80208bc:	4913      	ldr	r1, [pc, #76]	@ (802090c <USB_EPStartXfer+0xab4>)
 80208be:	430a      	orrs	r2, r1
 80208c0:	b292      	uxth	r2, r2
 80208c2:	801a      	strh	r2, [r3, #0]
 80208c4:	f000 fbf4 	bl	80210b0 <USB_EPStartXfer+0x1258>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 80208c8:	683b      	ldr	r3, [r7, #0]
 80208ca:	7b1b      	ldrb	r3, [r3, #12]
 80208cc:	2b00      	cmp	r3, #0
 80208ce:	d000      	beq.n	80208d2 <USB_EPStartXfer+0xa7a>
 80208d0:	e0a9      	b.n	8020a26 <USB_EPStartXfer+0xbce>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 80208d2:	683b      	ldr	r3, [r7, #0]
 80208d4:	699a      	ldr	r2, [r3, #24]
 80208d6:	683b      	ldr	r3, [r7, #0]
 80208d8:	691b      	ldr	r3, [r3, #16]
 80208da:	429a      	cmp	r2, r3
 80208dc:	d918      	bls.n	8020910 <USB_EPStartXfer+0xab8>
      {
        len = ep->maxpacket;
 80208de:	683b      	ldr	r3, [r7, #0]
 80208e0:	691b      	ldr	r3, [r3, #16]
 80208e2:	1d7a      	adds	r2, r7, #5
 80208e4:	32ff      	adds	r2, #255	@ 0xff
 80208e6:	6013      	str	r3, [r2, #0]
        ep->xfer_len -= len;
 80208e8:	683b      	ldr	r3, [r7, #0]
 80208ea:	699a      	ldr	r2, [r3, #24]
 80208ec:	1d7b      	adds	r3, r7, #5
 80208ee:	33ff      	adds	r3, #255	@ 0xff
 80208f0:	681b      	ldr	r3, [r3, #0]
 80208f2:	1ad2      	subs	r2, r2, r3
 80208f4:	683b      	ldr	r3, [r7, #0]
 80208f6:	619a      	str	r2, [r3, #24]
 80208f8:	e012      	b.n	8020920 <USB_EPStartXfer+0xac8>
 80208fa:	46c0      	nop			@ (mov r8, r8)
 80208fc:	00000406 	.word	0x00000406
 8020900:	ffff8000 	.word	0xffff8000
 8020904:	00000402 	.word	0x00000402
 8020908:	ffff8fbf 	.word	0xffff8fbf
 802090c:	ffff8080 	.word	0xffff8080
      }
      else
      {
        len = ep->xfer_len;
 8020910:	683b      	ldr	r3, [r7, #0]
 8020912:	699b      	ldr	r3, [r3, #24]
 8020914:	1d7a      	adds	r2, r7, #5
 8020916:	32ff      	adds	r2, #255	@ 0xff
 8020918:	6013      	str	r3, [r2, #0]
        ep->xfer_len = 0U;
 802091a:	683b      	ldr	r3, [r7, #0]
 802091c:	2200      	movs	r2, #0
 802091e:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8020920:	687b      	ldr	r3, [r7, #4]
 8020922:	2190      	movs	r1, #144	@ 0x90
 8020924:	187a      	adds	r2, r7, r1
 8020926:	6013      	str	r3, [r2, #0]
 8020928:	687b      	ldr	r3, [r7, #4]
 802092a:	2250      	movs	r2, #80	@ 0x50
 802092c:	5a9b      	ldrh	r3, [r3, r2]
 802092e:	b29b      	uxth	r3, r3
 8020930:	001a      	movs	r2, r3
 8020932:	187b      	adds	r3, r7, r1
 8020934:	681b      	ldr	r3, [r3, #0]
 8020936:	189b      	adds	r3, r3, r2
 8020938:	187a      	adds	r2, r7, r1
 802093a:	6013      	str	r3, [r2, #0]
 802093c:	683b      	ldr	r3, [r7, #0]
 802093e:	781b      	ldrb	r3, [r3, #0]
 8020940:	00da      	lsls	r2, r3, #3
 8020942:	187b      	adds	r3, r7, r1
 8020944:	681b      	ldr	r3, [r3, #0]
 8020946:	18d3      	adds	r3, r2, r3
 8020948:	4acf      	ldr	r2, [pc, #828]	@ (8020c88 <USB_EPStartXfer+0xe30>)
 802094a:	4694      	mov	ip, r2
 802094c:	4463      	add	r3, ip
 802094e:	218c      	movs	r1, #140	@ 0x8c
 8020950:	187a      	adds	r2, r7, r1
 8020952:	6013      	str	r3, [r2, #0]
 8020954:	187b      	adds	r3, r7, r1
 8020956:	681b      	ldr	r3, [r3, #0]
 8020958:	881b      	ldrh	r3, [r3, #0]
 802095a:	b29b      	uxth	r3, r3
 802095c:	059b      	lsls	r3, r3, #22
 802095e:	0d9b      	lsrs	r3, r3, #22
 8020960:	b29a      	uxth	r2, r3
 8020962:	187b      	adds	r3, r7, r1
 8020964:	681b      	ldr	r3, [r3, #0]
 8020966:	801a      	strh	r2, [r3, #0]
 8020968:	1d7b      	adds	r3, r7, #5
 802096a:	33ff      	adds	r3, #255	@ 0xff
 802096c:	681b      	ldr	r3, [r3, #0]
 802096e:	2b3e      	cmp	r3, #62	@ 0x3e
 8020970:	d925      	bls.n	80209be <USB_EPStartXfer+0xb66>
 8020972:	1d7b      	adds	r3, r7, #5
 8020974:	33ff      	adds	r3, #255	@ 0xff
 8020976:	681b      	ldr	r3, [r3, #0]
 8020978:	095b      	lsrs	r3, r3, #5
 802097a:	21e8      	movs	r1, #232	@ 0xe8
 802097c:	187a      	adds	r2, r7, r1
 802097e:	6013      	str	r3, [r2, #0]
 8020980:	1d7b      	adds	r3, r7, #5
 8020982:	33ff      	adds	r3, #255	@ 0xff
 8020984:	681b      	ldr	r3, [r3, #0]
 8020986:	221f      	movs	r2, #31
 8020988:	4013      	ands	r3, r2
 802098a:	d104      	bne.n	8020996 <USB_EPStartXfer+0xb3e>
 802098c:	187b      	adds	r3, r7, r1
 802098e:	681b      	ldr	r3, [r3, #0]
 8020990:	3b01      	subs	r3, #1
 8020992:	187a      	adds	r2, r7, r1
 8020994:	6013      	str	r3, [r2, #0]
 8020996:	218c      	movs	r1, #140	@ 0x8c
 8020998:	187b      	adds	r3, r7, r1
 802099a:	681b      	ldr	r3, [r3, #0]
 802099c:	881b      	ldrh	r3, [r3, #0]
 802099e:	b29a      	uxth	r2, r3
 80209a0:	23e8      	movs	r3, #232	@ 0xe8
 80209a2:	18fb      	adds	r3, r7, r3
 80209a4:	681b      	ldr	r3, [r3, #0]
 80209a6:	b29b      	uxth	r3, r3
 80209a8:	029b      	lsls	r3, r3, #10
 80209aa:	b29b      	uxth	r3, r3
 80209ac:	4313      	orrs	r3, r2
 80209ae:	b29b      	uxth	r3, r3
 80209b0:	4ab6      	ldr	r2, [pc, #728]	@ (8020c8c <USB_EPStartXfer+0xe34>)
 80209b2:	4313      	orrs	r3, r2
 80209b4:	b29a      	uxth	r2, r3
 80209b6:	187b      	adds	r3, r7, r1
 80209b8:	681b      	ldr	r3, [r3, #0]
 80209ba:	801a      	strh	r2, [r3, #0]
 80209bc:	e353      	b.n	8021066 <USB_EPStartXfer+0x120e>
 80209be:	1d7b      	adds	r3, r7, #5
 80209c0:	33ff      	adds	r3, #255	@ 0xff
 80209c2:	681b      	ldr	r3, [r3, #0]
 80209c4:	2b00      	cmp	r3, #0
 80209c6:	d10b      	bne.n	80209e0 <USB_EPStartXfer+0xb88>
 80209c8:	218c      	movs	r1, #140	@ 0x8c
 80209ca:	187b      	adds	r3, r7, r1
 80209cc:	681b      	ldr	r3, [r3, #0]
 80209ce:	881b      	ldrh	r3, [r3, #0]
 80209d0:	b29b      	uxth	r3, r3
 80209d2:	4aae      	ldr	r2, [pc, #696]	@ (8020c8c <USB_EPStartXfer+0xe34>)
 80209d4:	4313      	orrs	r3, r2
 80209d6:	b29a      	uxth	r2, r3
 80209d8:	187b      	adds	r3, r7, r1
 80209da:	681b      	ldr	r3, [r3, #0]
 80209dc:	801a      	strh	r2, [r3, #0]
 80209de:	e342      	b.n	8021066 <USB_EPStartXfer+0x120e>
 80209e0:	1d7b      	adds	r3, r7, #5
 80209e2:	33ff      	adds	r3, #255	@ 0xff
 80209e4:	681b      	ldr	r3, [r3, #0]
 80209e6:	085b      	lsrs	r3, r3, #1
 80209e8:	21e8      	movs	r1, #232	@ 0xe8
 80209ea:	187a      	adds	r2, r7, r1
 80209ec:	6013      	str	r3, [r2, #0]
 80209ee:	1d7b      	adds	r3, r7, #5
 80209f0:	33ff      	adds	r3, #255	@ 0xff
 80209f2:	681b      	ldr	r3, [r3, #0]
 80209f4:	2201      	movs	r2, #1
 80209f6:	4013      	ands	r3, r2
 80209f8:	d004      	beq.n	8020a04 <USB_EPStartXfer+0xbac>
 80209fa:	187b      	adds	r3, r7, r1
 80209fc:	681b      	ldr	r3, [r3, #0]
 80209fe:	3301      	adds	r3, #1
 8020a00:	187a      	adds	r2, r7, r1
 8020a02:	6013      	str	r3, [r2, #0]
 8020a04:	218c      	movs	r1, #140	@ 0x8c
 8020a06:	187b      	adds	r3, r7, r1
 8020a08:	681b      	ldr	r3, [r3, #0]
 8020a0a:	881b      	ldrh	r3, [r3, #0]
 8020a0c:	b29a      	uxth	r2, r3
 8020a0e:	23e8      	movs	r3, #232	@ 0xe8
 8020a10:	18fb      	adds	r3, r7, r3
 8020a12:	681b      	ldr	r3, [r3, #0]
 8020a14:	b29b      	uxth	r3, r3
 8020a16:	029b      	lsls	r3, r3, #10
 8020a18:	b29b      	uxth	r3, r3
 8020a1a:	4313      	orrs	r3, r2
 8020a1c:	b29a      	uxth	r2, r3
 8020a1e:	187b      	adds	r3, r7, r1
 8020a20:	681b      	ldr	r3, [r3, #0]
 8020a22:	801a      	strh	r2, [r3, #0]
 8020a24:	e31f      	b.n	8021066 <USB_EPStartXfer+0x120e>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8020a26:	683b      	ldr	r3, [r7, #0]
 8020a28:	78db      	ldrb	r3, [r3, #3]
 8020a2a:	2b02      	cmp	r3, #2
 8020a2c:	d000      	beq.n	8020a30 <USB_EPStartXfer+0xbd8>
 8020a2e:	e191      	b.n	8020d54 <USB_EPStartXfer+0xefc>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8020a30:	683b      	ldr	r3, [r7, #0]
 8020a32:	785b      	ldrb	r3, [r3, #1]
 8020a34:	2b00      	cmp	r3, #0
 8020a36:	d000      	beq.n	8020a3a <USB_EPStartXfer+0xbe2>
 8020a38:	e07c      	b.n	8020b34 <USB_EPStartXfer+0xcdc>
 8020a3a:	687b      	ldr	r3, [r7, #4]
 8020a3c:	21ac      	movs	r1, #172	@ 0xac
 8020a3e:	187a      	adds	r2, r7, r1
 8020a40:	6013      	str	r3, [r2, #0]
 8020a42:	687b      	ldr	r3, [r7, #4]
 8020a44:	2250      	movs	r2, #80	@ 0x50
 8020a46:	5a9b      	ldrh	r3, [r3, r2]
 8020a48:	b29b      	uxth	r3, r3
 8020a4a:	001a      	movs	r2, r3
 8020a4c:	187b      	adds	r3, r7, r1
 8020a4e:	681b      	ldr	r3, [r3, #0]
 8020a50:	189b      	adds	r3, r3, r2
 8020a52:	187a      	adds	r2, r7, r1
 8020a54:	6013      	str	r3, [r2, #0]
 8020a56:	683b      	ldr	r3, [r7, #0]
 8020a58:	781b      	ldrb	r3, [r3, #0]
 8020a5a:	00da      	lsls	r2, r3, #3
 8020a5c:	187b      	adds	r3, r7, r1
 8020a5e:	681b      	ldr	r3, [r3, #0]
 8020a60:	18d3      	adds	r3, r2, r3
 8020a62:	4a8b      	ldr	r2, [pc, #556]	@ (8020c90 <USB_EPStartXfer+0xe38>)
 8020a64:	4694      	mov	ip, r2
 8020a66:	4463      	add	r3, ip
 8020a68:	21a8      	movs	r1, #168	@ 0xa8
 8020a6a:	187a      	adds	r2, r7, r1
 8020a6c:	6013      	str	r3, [r2, #0]
 8020a6e:	187b      	adds	r3, r7, r1
 8020a70:	681b      	ldr	r3, [r3, #0]
 8020a72:	881b      	ldrh	r3, [r3, #0]
 8020a74:	b29b      	uxth	r3, r3
 8020a76:	059b      	lsls	r3, r3, #22
 8020a78:	0d9b      	lsrs	r3, r3, #22
 8020a7a:	b29a      	uxth	r2, r3
 8020a7c:	187b      	adds	r3, r7, r1
 8020a7e:	681b      	ldr	r3, [r3, #0]
 8020a80:	801a      	strh	r2, [r3, #0]
 8020a82:	683b      	ldr	r3, [r7, #0]
 8020a84:	691b      	ldr	r3, [r3, #16]
 8020a86:	2b3e      	cmp	r3, #62	@ 0x3e
 8020a88:	d923      	bls.n	8020ad2 <USB_EPStartXfer+0xc7a>
 8020a8a:	683b      	ldr	r3, [r7, #0]
 8020a8c:	691b      	ldr	r3, [r3, #16]
 8020a8e:	095b      	lsrs	r3, r3, #5
 8020a90:	21e4      	movs	r1, #228	@ 0xe4
 8020a92:	187a      	adds	r2, r7, r1
 8020a94:	6013      	str	r3, [r2, #0]
 8020a96:	683b      	ldr	r3, [r7, #0]
 8020a98:	691b      	ldr	r3, [r3, #16]
 8020a9a:	221f      	movs	r2, #31
 8020a9c:	4013      	ands	r3, r2
 8020a9e:	d104      	bne.n	8020aaa <USB_EPStartXfer+0xc52>
 8020aa0:	187b      	adds	r3, r7, r1
 8020aa2:	681b      	ldr	r3, [r3, #0]
 8020aa4:	3b01      	subs	r3, #1
 8020aa6:	187a      	adds	r2, r7, r1
 8020aa8:	6013      	str	r3, [r2, #0]
 8020aaa:	21a8      	movs	r1, #168	@ 0xa8
 8020aac:	187b      	adds	r3, r7, r1
 8020aae:	681b      	ldr	r3, [r3, #0]
 8020ab0:	881b      	ldrh	r3, [r3, #0]
 8020ab2:	b29a      	uxth	r2, r3
 8020ab4:	23e4      	movs	r3, #228	@ 0xe4
 8020ab6:	18fb      	adds	r3, r7, r3
 8020ab8:	681b      	ldr	r3, [r3, #0]
 8020aba:	b29b      	uxth	r3, r3
 8020abc:	029b      	lsls	r3, r3, #10
 8020abe:	b29b      	uxth	r3, r3
 8020ac0:	4313      	orrs	r3, r2
 8020ac2:	b29b      	uxth	r3, r3
 8020ac4:	4a71      	ldr	r2, [pc, #452]	@ (8020c8c <USB_EPStartXfer+0xe34>)
 8020ac6:	4313      	orrs	r3, r2
 8020ac8:	b29a      	uxth	r2, r3
 8020aca:	187b      	adds	r3, r7, r1
 8020acc:	681b      	ldr	r3, [r3, #0]
 8020ace:	801a      	strh	r2, [r3, #0]
 8020ad0:	e054      	b.n	8020b7c <USB_EPStartXfer+0xd24>
 8020ad2:	683b      	ldr	r3, [r7, #0]
 8020ad4:	691b      	ldr	r3, [r3, #16]
 8020ad6:	2b00      	cmp	r3, #0
 8020ad8:	d10b      	bne.n	8020af2 <USB_EPStartXfer+0xc9a>
 8020ada:	21a8      	movs	r1, #168	@ 0xa8
 8020adc:	187b      	adds	r3, r7, r1
 8020ade:	681b      	ldr	r3, [r3, #0]
 8020ae0:	881b      	ldrh	r3, [r3, #0]
 8020ae2:	b29b      	uxth	r3, r3
 8020ae4:	4a69      	ldr	r2, [pc, #420]	@ (8020c8c <USB_EPStartXfer+0xe34>)
 8020ae6:	4313      	orrs	r3, r2
 8020ae8:	b29a      	uxth	r2, r3
 8020aea:	187b      	adds	r3, r7, r1
 8020aec:	681b      	ldr	r3, [r3, #0]
 8020aee:	801a      	strh	r2, [r3, #0]
 8020af0:	e044      	b.n	8020b7c <USB_EPStartXfer+0xd24>
 8020af2:	683b      	ldr	r3, [r7, #0]
 8020af4:	691b      	ldr	r3, [r3, #16]
 8020af6:	085b      	lsrs	r3, r3, #1
 8020af8:	21e4      	movs	r1, #228	@ 0xe4
 8020afa:	187a      	adds	r2, r7, r1
 8020afc:	6013      	str	r3, [r2, #0]
 8020afe:	683b      	ldr	r3, [r7, #0]
 8020b00:	691b      	ldr	r3, [r3, #16]
 8020b02:	2201      	movs	r2, #1
 8020b04:	4013      	ands	r3, r2
 8020b06:	d004      	beq.n	8020b12 <USB_EPStartXfer+0xcba>
 8020b08:	187b      	adds	r3, r7, r1
 8020b0a:	681b      	ldr	r3, [r3, #0]
 8020b0c:	3301      	adds	r3, #1
 8020b0e:	187a      	adds	r2, r7, r1
 8020b10:	6013      	str	r3, [r2, #0]
 8020b12:	21a8      	movs	r1, #168	@ 0xa8
 8020b14:	187b      	adds	r3, r7, r1
 8020b16:	681b      	ldr	r3, [r3, #0]
 8020b18:	881b      	ldrh	r3, [r3, #0]
 8020b1a:	b29a      	uxth	r2, r3
 8020b1c:	23e4      	movs	r3, #228	@ 0xe4
 8020b1e:	18fb      	adds	r3, r7, r3
 8020b20:	681b      	ldr	r3, [r3, #0]
 8020b22:	b29b      	uxth	r3, r3
 8020b24:	029b      	lsls	r3, r3, #10
 8020b26:	b29b      	uxth	r3, r3
 8020b28:	4313      	orrs	r3, r2
 8020b2a:	b29a      	uxth	r2, r3
 8020b2c:	187b      	adds	r3, r7, r1
 8020b2e:	681b      	ldr	r3, [r3, #0]
 8020b30:	801a      	strh	r2, [r3, #0]
 8020b32:	e023      	b.n	8020b7c <USB_EPStartXfer+0xd24>
 8020b34:	683b      	ldr	r3, [r7, #0]
 8020b36:	785b      	ldrb	r3, [r3, #1]
 8020b38:	2b01      	cmp	r3, #1
 8020b3a:	d11f      	bne.n	8020b7c <USB_EPStartXfer+0xd24>
 8020b3c:	687b      	ldr	r3, [r7, #4]
 8020b3e:	21b4      	movs	r1, #180	@ 0xb4
 8020b40:	187a      	adds	r2, r7, r1
 8020b42:	6013      	str	r3, [r2, #0]
 8020b44:	687b      	ldr	r3, [r7, #4]
 8020b46:	2250      	movs	r2, #80	@ 0x50
 8020b48:	5a9b      	ldrh	r3, [r3, r2]
 8020b4a:	b29b      	uxth	r3, r3
 8020b4c:	001a      	movs	r2, r3
 8020b4e:	187b      	adds	r3, r7, r1
 8020b50:	681b      	ldr	r3, [r3, #0]
 8020b52:	189b      	adds	r3, r3, r2
 8020b54:	187a      	adds	r2, r7, r1
 8020b56:	6013      	str	r3, [r2, #0]
 8020b58:	683b      	ldr	r3, [r7, #0]
 8020b5a:	781b      	ldrb	r3, [r3, #0]
 8020b5c:	00da      	lsls	r2, r3, #3
 8020b5e:	187b      	adds	r3, r7, r1
 8020b60:	681b      	ldr	r3, [r3, #0]
 8020b62:	18d3      	adds	r3, r2, r3
 8020b64:	4a4a      	ldr	r2, [pc, #296]	@ (8020c90 <USB_EPStartXfer+0xe38>)
 8020b66:	4694      	mov	ip, r2
 8020b68:	4463      	add	r3, ip
 8020b6a:	21b0      	movs	r1, #176	@ 0xb0
 8020b6c:	187a      	adds	r2, r7, r1
 8020b6e:	6013      	str	r3, [r2, #0]
 8020b70:	683b      	ldr	r3, [r7, #0]
 8020b72:	691b      	ldr	r3, [r3, #16]
 8020b74:	b29a      	uxth	r2, r3
 8020b76:	187b      	adds	r3, r7, r1
 8020b78:	681b      	ldr	r3, [r3, #0]
 8020b7a:	801a      	strh	r2, [r3, #0]
 8020b7c:	687b      	ldr	r3, [r7, #4]
 8020b7e:	22a4      	movs	r2, #164	@ 0xa4
 8020b80:	18ba      	adds	r2, r7, r2
 8020b82:	6013      	str	r3, [r2, #0]
 8020b84:	683b      	ldr	r3, [r7, #0]
 8020b86:	785b      	ldrb	r3, [r3, #1]
 8020b88:	2b00      	cmp	r3, #0
 8020b8a:	d000      	beq.n	8020b8e <USB_EPStartXfer+0xd36>
 8020b8c:	e082      	b.n	8020c94 <USB_EPStartXfer+0xe3c>
 8020b8e:	687b      	ldr	r3, [r7, #4]
 8020b90:	219c      	movs	r1, #156	@ 0x9c
 8020b92:	187a      	adds	r2, r7, r1
 8020b94:	6013      	str	r3, [r2, #0]
 8020b96:	687b      	ldr	r3, [r7, #4]
 8020b98:	2250      	movs	r2, #80	@ 0x50
 8020b9a:	5a9b      	ldrh	r3, [r3, r2]
 8020b9c:	b29b      	uxth	r3, r3
 8020b9e:	001a      	movs	r2, r3
 8020ba0:	187b      	adds	r3, r7, r1
 8020ba2:	681b      	ldr	r3, [r3, #0]
 8020ba4:	189b      	adds	r3, r3, r2
 8020ba6:	187a      	adds	r2, r7, r1
 8020ba8:	6013      	str	r3, [r2, #0]
 8020baa:	683b      	ldr	r3, [r7, #0]
 8020bac:	781b      	ldrb	r3, [r3, #0]
 8020bae:	00da      	lsls	r2, r3, #3
 8020bb0:	187b      	adds	r3, r7, r1
 8020bb2:	681b      	ldr	r3, [r3, #0]
 8020bb4:	18d3      	adds	r3, r2, r3
 8020bb6:	4a34      	ldr	r2, [pc, #208]	@ (8020c88 <USB_EPStartXfer+0xe30>)
 8020bb8:	4694      	mov	ip, r2
 8020bba:	4463      	add	r3, ip
 8020bbc:	2198      	movs	r1, #152	@ 0x98
 8020bbe:	187a      	adds	r2, r7, r1
 8020bc0:	6013      	str	r3, [r2, #0]
 8020bc2:	187b      	adds	r3, r7, r1
 8020bc4:	681b      	ldr	r3, [r3, #0]
 8020bc6:	881b      	ldrh	r3, [r3, #0]
 8020bc8:	b29b      	uxth	r3, r3
 8020bca:	059b      	lsls	r3, r3, #22
 8020bcc:	0d9b      	lsrs	r3, r3, #22
 8020bce:	b29a      	uxth	r2, r3
 8020bd0:	187b      	adds	r3, r7, r1
 8020bd2:	681b      	ldr	r3, [r3, #0]
 8020bd4:	801a      	strh	r2, [r3, #0]
 8020bd6:	683b      	ldr	r3, [r7, #0]
 8020bd8:	691b      	ldr	r3, [r3, #16]
 8020bda:	2b3e      	cmp	r3, #62	@ 0x3e
 8020bdc:	d923      	bls.n	8020c26 <USB_EPStartXfer+0xdce>
 8020bde:	683b      	ldr	r3, [r7, #0]
 8020be0:	691b      	ldr	r3, [r3, #16]
 8020be2:	095b      	lsrs	r3, r3, #5
 8020be4:	21e0      	movs	r1, #224	@ 0xe0
 8020be6:	187a      	adds	r2, r7, r1
 8020be8:	6013      	str	r3, [r2, #0]
 8020bea:	683b      	ldr	r3, [r7, #0]
 8020bec:	691b      	ldr	r3, [r3, #16]
 8020bee:	221f      	movs	r2, #31
 8020bf0:	4013      	ands	r3, r2
 8020bf2:	d104      	bne.n	8020bfe <USB_EPStartXfer+0xda6>
 8020bf4:	187b      	adds	r3, r7, r1
 8020bf6:	681b      	ldr	r3, [r3, #0]
 8020bf8:	3b01      	subs	r3, #1
 8020bfa:	187a      	adds	r2, r7, r1
 8020bfc:	6013      	str	r3, [r2, #0]
 8020bfe:	2198      	movs	r1, #152	@ 0x98
 8020c00:	187b      	adds	r3, r7, r1
 8020c02:	681b      	ldr	r3, [r3, #0]
 8020c04:	881b      	ldrh	r3, [r3, #0]
 8020c06:	b29a      	uxth	r2, r3
 8020c08:	23e0      	movs	r3, #224	@ 0xe0
 8020c0a:	18fb      	adds	r3, r7, r3
 8020c0c:	681b      	ldr	r3, [r3, #0]
 8020c0e:	b29b      	uxth	r3, r3
 8020c10:	029b      	lsls	r3, r3, #10
 8020c12:	b29b      	uxth	r3, r3
 8020c14:	4313      	orrs	r3, r2
 8020c16:	b29b      	uxth	r3, r3
 8020c18:	4a1c      	ldr	r2, [pc, #112]	@ (8020c8c <USB_EPStartXfer+0xe34>)
 8020c1a:	4313      	orrs	r3, r2
 8020c1c:	b29a      	uxth	r2, r3
 8020c1e:	187b      	adds	r3, r7, r1
 8020c20:	681b      	ldr	r3, [r3, #0]
 8020c22:	801a      	strh	r2, [r3, #0]
 8020c24:	e057      	b.n	8020cd6 <USB_EPStartXfer+0xe7e>
 8020c26:	683b      	ldr	r3, [r7, #0]
 8020c28:	691b      	ldr	r3, [r3, #16]
 8020c2a:	2b00      	cmp	r3, #0
 8020c2c:	d10b      	bne.n	8020c46 <USB_EPStartXfer+0xdee>
 8020c2e:	2198      	movs	r1, #152	@ 0x98
 8020c30:	187b      	adds	r3, r7, r1
 8020c32:	681b      	ldr	r3, [r3, #0]
 8020c34:	881b      	ldrh	r3, [r3, #0]
 8020c36:	b29b      	uxth	r3, r3
 8020c38:	4a14      	ldr	r2, [pc, #80]	@ (8020c8c <USB_EPStartXfer+0xe34>)
 8020c3a:	4313      	orrs	r3, r2
 8020c3c:	b29a      	uxth	r2, r3
 8020c3e:	187b      	adds	r3, r7, r1
 8020c40:	681b      	ldr	r3, [r3, #0]
 8020c42:	801a      	strh	r2, [r3, #0]
 8020c44:	e047      	b.n	8020cd6 <USB_EPStartXfer+0xe7e>
 8020c46:	683b      	ldr	r3, [r7, #0]
 8020c48:	691b      	ldr	r3, [r3, #16]
 8020c4a:	085b      	lsrs	r3, r3, #1
 8020c4c:	21e0      	movs	r1, #224	@ 0xe0
 8020c4e:	187a      	adds	r2, r7, r1
 8020c50:	6013      	str	r3, [r2, #0]
 8020c52:	683b      	ldr	r3, [r7, #0]
 8020c54:	691b      	ldr	r3, [r3, #16]
 8020c56:	2201      	movs	r2, #1
 8020c58:	4013      	ands	r3, r2
 8020c5a:	d004      	beq.n	8020c66 <USB_EPStartXfer+0xe0e>
 8020c5c:	187b      	adds	r3, r7, r1
 8020c5e:	681b      	ldr	r3, [r3, #0]
 8020c60:	3301      	adds	r3, #1
 8020c62:	187a      	adds	r2, r7, r1
 8020c64:	6013      	str	r3, [r2, #0]
 8020c66:	2198      	movs	r1, #152	@ 0x98
 8020c68:	187b      	adds	r3, r7, r1
 8020c6a:	681b      	ldr	r3, [r3, #0]
 8020c6c:	881b      	ldrh	r3, [r3, #0]
 8020c6e:	b29a      	uxth	r2, r3
 8020c70:	23e0      	movs	r3, #224	@ 0xe0
 8020c72:	18fb      	adds	r3, r7, r3
 8020c74:	681b      	ldr	r3, [r3, #0]
 8020c76:	b29b      	uxth	r3, r3
 8020c78:	029b      	lsls	r3, r3, #10
 8020c7a:	b29b      	uxth	r3, r3
 8020c7c:	4313      	orrs	r3, r2
 8020c7e:	b29a      	uxth	r2, r3
 8020c80:	187b      	adds	r3, r7, r1
 8020c82:	681b      	ldr	r3, [r3, #0]
 8020c84:	801a      	strh	r2, [r3, #0]
 8020c86:	e026      	b.n	8020cd6 <USB_EPStartXfer+0xe7e>
 8020c88:	00000406 	.word	0x00000406
 8020c8c:	ffff8000 	.word	0xffff8000
 8020c90:	00000402 	.word	0x00000402
 8020c94:	683b      	ldr	r3, [r7, #0]
 8020c96:	785b      	ldrb	r3, [r3, #1]
 8020c98:	2b01      	cmp	r3, #1
 8020c9a:	d11c      	bne.n	8020cd6 <USB_EPStartXfer+0xe7e>
 8020c9c:	687b      	ldr	r3, [r7, #4]
 8020c9e:	2250      	movs	r2, #80	@ 0x50
 8020ca0:	5a9b      	ldrh	r3, [r3, r2]
 8020ca2:	b29b      	uxth	r3, r3
 8020ca4:	001a      	movs	r2, r3
 8020ca6:	21a4      	movs	r1, #164	@ 0xa4
 8020ca8:	187b      	adds	r3, r7, r1
 8020caa:	681b      	ldr	r3, [r3, #0]
 8020cac:	189b      	adds	r3, r3, r2
 8020cae:	187a      	adds	r2, r7, r1
 8020cb0:	6013      	str	r3, [r2, #0]
 8020cb2:	683b      	ldr	r3, [r7, #0]
 8020cb4:	781b      	ldrb	r3, [r3, #0]
 8020cb6:	00da      	lsls	r2, r3, #3
 8020cb8:	187b      	adds	r3, r7, r1
 8020cba:	681b      	ldr	r3, [r3, #0]
 8020cbc:	18d3      	adds	r3, r2, r3
 8020cbe:	4ad2      	ldr	r2, [pc, #840]	@ (8021008 <USB_EPStartXfer+0x11b0>)
 8020cc0:	4694      	mov	ip, r2
 8020cc2:	4463      	add	r3, ip
 8020cc4:	21a0      	movs	r1, #160	@ 0xa0
 8020cc6:	187a      	adds	r2, r7, r1
 8020cc8:	6013      	str	r3, [r2, #0]
 8020cca:	683b      	ldr	r3, [r7, #0]
 8020ccc:	691b      	ldr	r3, [r3, #16]
 8020cce:	b29a      	uxth	r2, r3
 8020cd0:	187b      	adds	r3, r7, r1
 8020cd2:	681b      	ldr	r3, [r3, #0]
 8020cd4:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8020cd6:	683b      	ldr	r3, [r7, #0]
 8020cd8:	69db      	ldr	r3, [r3, #28]
 8020cda:	2b00      	cmp	r3, #0
 8020cdc:	d100      	bne.n	8020ce0 <USB_EPStartXfer+0xe88>
 8020cde:	e1c2      	b.n	8021066 <USB_EPStartXfer+0x120e>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8020ce0:	687a      	ldr	r2, [r7, #4]
 8020ce2:	683b      	ldr	r3, [r7, #0]
 8020ce4:	781b      	ldrb	r3, [r3, #0]
 8020ce6:	009b      	lsls	r3, r3, #2
 8020ce8:	18d2      	adds	r2, r2, r3
 8020cea:	2196      	movs	r1, #150	@ 0x96
 8020cec:	187b      	adds	r3, r7, r1
 8020cee:	8812      	ldrh	r2, [r2, #0]
 8020cf0:	801a      	strh	r2, [r3, #0]

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8020cf2:	187b      	adds	r3, r7, r1
 8020cf4:	881a      	ldrh	r2, [r3, #0]
 8020cf6:	2380      	movs	r3, #128	@ 0x80
 8020cf8:	01db      	lsls	r3, r3, #7
 8020cfa:	4013      	ands	r3, r2
 8020cfc:	d004      	beq.n	8020d08 <USB_EPStartXfer+0xeb0>
 8020cfe:	187b      	adds	r3, r7, r1
 8020d00:	881b      	ldrh	r3, [r3, #0]
 8020d02:	2240      	movs	r2, #64	@ 0x40
 8020d04:	4013      	ands	r3, r2
 8020d06:	d10d      	bne.n	8020d24 <USB_EPStartXfer+0xecc>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8020d08:	2196      	movs	r1, #150	@ 0x96
 8020d0a:	187b      	adds	r3, r7, r1
 8020d0c:	881a      	ldrh	r2, [r3, #0]
 8020d0e:	2380      	movs	r3, #128	@ 0x80
 8020d10:	01db      	lsls	r3, r3, #7
 8020d12:	4013      	ands	r3, r2
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8020d14:	d000      	beq.n	8020d18 <USB_EPStartXfer+0xec0>
 8020d16:	e1a6      	b.n	8021066 <USB_EPStartXfer+0x120e>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8020d18:	187b      	adds	r3, r7, r1
 8020d1a:	881b      	ldrh	r3, [r3, #0]
 8020d1c:	2240      	movs	r2, #64	@ 0x40
 8020d1e:	4013      	ands	r3, r2
 8020d20:	d000      	beq.n	8020d24 <USB_EPStartXfer+0xecc>
 8020d22:	e1a0      	b.n	8021066 <USB_EPStartXfer+0x120e>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8020d24:	687a      	ldr	r2, [r7, #4]
 8020d26:	683b      	ldr	r3, [r7, #0]
 8020d28:	781b      	ldrb	r3, [r3, #0]
 8020d2a:	009b      	lsls	r3, r3, #2
 8020d2c:	18d3      	adds	r3, r2, r3
 8020d2e:	881b      	ldrh	r3, [r3, #0]
 8020d30:	b29a      	uxth	r2, r3
 8020d32:	2094      	movs	r0, #148	@ 0x94
 8020d34:	183b      	adds	r3, r7, r0
 8020d36:	49b5      	ldr	r1, [pc, #724]	@ (802100c <USB_EPStartXfer+0x11b4>)
 8020d38:	400a      	ands	r2, r1
 8020d3a:	801a      	strh	r2, [r3, #0]
 8020d3c:	687a      	ldr	r2, [r7, #4]
 8020d3e:	683b      	ldr	r3, [r7, #0]
 8020d40:	781b      	ldrb	r3, [r3, #0]
 8020d42:	009b      	lsls	r3, r3, #2
 8020d44:	18d3      	adds	r3, r2, r3
 8020d46:	183a      	adds	r2, r7, r0
 8020d48:	8812      	ldrh	r2, [r2, #0]
 8020d4a:	49b1      	ldr	r1, [pc, #708]	@ (8021010 <USB_EPStartXfer+0x11b8>)
 8020d4c:	430a      	orrs	r2, r1
 8020d4e:	b292      	uxth	r2, r2
 8020d50:	801a      	strh	r2, [r3, #0]
 8020d52:	e188      	b.n	8021066 <USB_EPStartXfer+0x120e>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8020d54:	683b      	ldr	r3, [r7, #0]
 8020d56:	78db      	ldrb	r3, [r3, #3]
 8020d58:	2b01      	cmp	r3, #1
 8020d5a:	d000      	beq.n	8020d5e <USB_EPStartXfer+0xf06>
 8020d5c:	e181      	b.n	8021062 <USB_EPStartXfer+0x120a>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8020d5e:	683b      	ldr	r3, [r7, #0]
 8020d60:	699a      	ldr	r2, [r3, #24]
 8020d62:	683b      	ldr	r3, [r7, #0]
 8020d64:	691b      	ldr	r3, [r3, #16]
 8020d66:	429a      	cmp	r2, r3
 8020d68:	d90d      	bls.n	8020d86 <USB_EPStartXfer+0xf2e>
        {
          len = ep->maxpacket;
 8020d6a:	683b      	ldr	r3, [r7, #0]
 8020d6c:	691b      	ldr	r3, [r3, #16]
 8020d6e:	1d7a      	adds	r2, r7, #5
 8020d70:	32ff      	adds	r2, #255	@ 0xff
 8020d72:	6013      	str	r3, [r2, #0]
          ep->xfer_len -= len;
 8020d74:	683b      	ldr	r3, [r7, #0]
 8020d76:	699a      	ldr	r2, [r3, #24]
 8020d78:	1d7b      	adds	r3, r7, #5
 8020d7a:	33ff      	adds	r3, #255	@ 0xff
 8020d7c:	681b      	ldr	r3, [r3, #0]
 8020d7e:	1ad2      	subs	r2, r2, r3
 8020d80:	683b      	ldr	r3, [r7, #0]
 8020d82:	619a      	str	r2, [r3, #24]
 8020d84:	e007      	b.n	8020d96 <USB_EPStartXfer+0xf3e>
        }
        else
        {
          len = ep->xfer_len;
 8020d86:	683b      	ldr	r3, [r7, #0]
 8020d88:	699b      	ldr	r3, [r3, #24]
 8020d8a:	1d7a      	adds	r2, r7, #5
 8020d8c:	32ff      	adds	r2, #255	@ 0xff
 8020d8e:	6013      	str	r3, [r2, #0]
          ep->xfer_len = 0U;
 8020d90:	683b      	ldr	r3, [r7, #0]
 8020d92:	2200      	movs	r2, #0
 8020d94:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8020d96:	683b      	ldr	r3, [r7, #0]
 8020d98:	785b      	ldrb	r3, [r3, #1]
 8020d9a:	2b00      	cmp	r3, #0
 8020d9c:	d000      	beq.n	8020da0 <USB_EPStartXfer+0xf48>
 8020d9e:	e082      	b.n	8020ea6 <USB_EPStartXfer+0x104e>
 8020da0:	687b      	ldr	r3, [r7, #4]
 8020da2:	21cc      	movs	r1, #204	@ 0xcc
 8020da4:	187a      	adds	r2, r7, r1
 8020da6:	6013      	str	r3, [r2, #0]
 8020da8:	687b      	ldr	r3, [r7, #4]
 8020daa:	2250      	movs	r2, #80	@ 0x50
 8020dac:	5a9b      	ldrh	r3, [r3, r2]
 8020dae:	b29b      	uxth	r3, r3
 8020db0:	001a      	movs	r2, r3
 8020db2:	187b      	adds	r3, r7, r1
 8020db4:	681b      	ldr	r3, [r3, #0]
 8020db6:	189b      	adds	r3, r3, r2
 8020db8:	187a      	adds	r2, r7, r1
 8020dba:	6013      	str	r3, [r2, #0]
 8020dbc:	683b      	ldr	r3, [r7, #0]
 8020dbe:	781b      	ldrb	r3, [r3, #0]
 8020dc0:	00da      	lsls	r2, r3, #3
 8020dc2:	187b      	adds	r3, r7, r1
 8020dc4:	681b      	ldr	r3, [r3, #0]
 8020dc6:	18d3      	adds	r3, r2, r3
 8020dc8:	4a92      	ldr	r2, [pc, #584]	@ (8021014 <USB_EPStartXfer+0x11bc>)
 8020dca:	4694      	mov	ip, r2
 8020dcc:	4463      	add	r3, ip
 8020dce:	21c8      	movs	r1, #200	@ 0xc8
 8020dd0:	187a      	adds	r2, r7, r1
 8020dd2:	6013      	str	r3, [r2, #0]
 8020dd4:	187b      	adds	r3, r7, r1
 8020dd6:	681b      	ldr	r3, [r3, #0]
 8020dd8:	881b      	ldrh	r3, [r3, #0]
 8020dda:	b29b      	uxth	r3, r3
 8020ddc:	059b      	lsls	r3, r3, #22
 8020dde:	0d9b      	lsrs	r3, r3, #22
 8020de0:	b29a      	uxth	r2, r3
 8020de2:	187b      	adds	r3, r7, r1
 8020de4:	681b      	ldr	r3, [r3, #0]
 8020de6:	801a      	strh	r2, [r3, #0]
 8020de8:	1d7b      	adds	r3, r7, #5
 8020dea:	33ff      	adds	r3, #255	@ 0xff
 8020dec:	681b      	ldr	r3, [r3, #0]
 8020dee:	2b3e      	cmp	r3, #62	@ 0x3e
 8020df0:	d925      	bls.n	8020e3e <USB_EPStartXfer+0xfe6>
 8020df2:	1d7b      	adds	r3, r7, #5
 8020df4:	33ff      	adds	r3, #255	@ 0xff
 8020df6:	681b      	ldr	r3, [r3, #0]
 8020df8:	095b      	lsrs	r3, r3, #5
 8020dfa:	21dc      	movs	r1, #220	@ 0xdc
 8020dfc:	187a      	adds	r2, r7, r1
 8020dfe:	6013      	str	r3, [r2, #0]
 8020e00:	1d7b      	adds	r3, r7, #5
 8020e02:	33ff      	adds	r3, #255	@ 0xff
 8020e04:	681b      	ldr	r3, [r3, #0]
 8020e06:	221f      	movs	r2, #31
 8020e08:	4013      	ands	r3, r2
 8020e0a:	d104      	bne.n	8020e16 <USB_EPStartXfer+0xfbe>
 8020e0c:	187b      	adds	r3, r7, r1
 8020e0e:	681b      	ldr	r3, [r3, #0]
 8020e10:	3b01      	subs	r3, #1
 8020e12:	187a      	adds	r2, r7, r1
 8020e14:	6013      	str	r3, [r2, #0]
 8020e16:	21c8      	movs	r1, #200	@ 0xc8
 8020e18:	187b      	adds	r3, r7, r1
 8020e1a:	681b      	ldr	r3, [r3, #0]
 8020e1c:	881b      	ldrh	r3, [r3, #0]
 8020e1e:	b29a      	uxth	r2, r3
 8020e20:	23dc      	movs	r3, #220	@ 0xdc
 8020e22:	18fb      	adds	r3, r7, r3
 8020e24:	681b      	ldr	r3, [r3, #0]
 8020e26:	b29b      	uxth	r3, r3
 8020e28:	029b      	lsls	r3, r3, #10
 8020e2a:	b29b      	uxth	r3, r3
 8020e2c:	4313      	orrs	r3, r2
 8020e2e:	b29b      	uxth	r3, r3
 8020e30:	4a79      	ldr	r2, [pc, #484]	@ (8021018 <USB_EPStartXfer+0x11c0>)
 8020e32:	4313      	orrs	r3, r2
 8020e34:	b29a      	uxth	r2, r3
 8020e36:	187b      	adds	r3, r7, r1
 8020e38:	681b      	ldr	r3, [r3, #0]
 8020e3a:	801a      	strh	r2, [r3, #0]
 8020e3c:	e058      	b.n	8020ef0 <USB_EPStartXfer+0x1098>
 8020e3e:	1d7b      	adds	r3, r7, #5
 8020e40:	33ff      	adds	r3, #255	@ 0xff
 8020e42:	681b      	ldr	r3, [r3, #0]
 8020e44:	2b00      	cmp	r3, #0
 8020e46:	d10b      	bne.n	8020e60 <USB_EPStartXfer+0x1008>
 8020e48:	21c8      	movs	r1, #200	@ 0xc8
 8020e4a:	187b      	adds	r3, r7, r1
 8020e4c:	681b      	ldr	r3, [r3, #0]
 8020e4e:	881b      	ldrh	r3, [r3, #0]
 8020e50:	b29b      	uxth	r3, r3
 8020e52:	4a71      	ldr	r2, [pc, #452]	@ (8021018 <USB_EPStartXfer+0x11c0>)
 8020e54:	4313      	orrs	r3, r2
 8020e56:	b29a      	uxth	r2, r3
 8020e58:	187b      	adds	r3, r7, r1
 8020e5a:	681b      	ldr	r3, [r3, #0]
 8020e5c:	801a      	strh	r2, [r3, #0]
 8020e5e:	e047      	b.n	8020ef0 <USB_EPStartXfer+0x1098>
 8020e60:	1d7b      	adds	r3, r7, #5
 8020e62:	33ff      	adds	r3, #255	@ 0xff
 8020e64:	681b      	ldr	r3, [r3, #0]
 8020e66:	085b      	lsrs	r3, r3, #1
 8020e68:	21dc      	movs	r1, #220	@ 0xdc
 8020e6a:	187a      	adds	r2, r7, r1
 8020e6c:	6013      	str	r3, [r2, #0]
 8020e6e:	1d7b      	adds	r3, r7, #5
 8020e70:	33ff      	adds	r3, #255	@ 0xff
 8020e72:	681b      	ldr	r3, [r3, #0]
 8020e74:	2201      	movs	r2, #1
 8020e76:	4013      	ands	r3, r2
 8020e78:	d004      	beq.n	8020e84 <USB_EPStartXfer+0x102c>
 8020e7a:	187b      	adds	r3, r7, r1
 8020e7c:	681b      	ldr	r3, [r3, #0]
 8020e7e:	3301      	adds	r3, #1
 8020e80:	187a      	adds	r2, r7, r1
 8020e82:	6013      	str	r3, [r2, #0]
 8020e84:	21c8      	movs	r1, #200	@ 0xc8
 8020e86:	187b      	adds	r3, r7, r1
 8020e88:	681b      	ldr	r3, [r3, #0]
 8020e8a:	881b      	ldrh	r3, [r3, #0]
 8020e8c:	b29a      	uxth	r2, r3
 8020e8e:	23dc      	movs	r3, #220	@ 0xdc
 8020e90:	18fb      	adds	r3, r7, r3
 8020e92:	681b      	ldr	r3, [r3, #0]
 8020e94:	b29b      	uxth	r3, r3
 8020e96:	029b      	lsls	r3, r3, #10
 8020e98:	b29b      	uxth	r3, r3
 8020e9a:	4313      	orrs	r3, r2
 8020e9c:	b29a      	uxth	r2, r3
 8020e9e:	187b      	adds	r3, r7, r1
 8020ea0:	681b      	ldr	r3, [r3, #0]
 8020ea2:	801a      	strh	r2, [r3, #0]
 8020ea4:	e024      	b.n	8020ef0 <USB_EPStartXfer+0x1098>
 8020ea6:	683b      	ldr	r3, [r7, #0]
 8020ea8:	785b      	ldrb	r3, [r3, #1]
 8020eaa:	2b01      	cmp	r3, #1
 8020eac:	d120      	bne.n	8020ef0 <USB_EPStartXfer+0x1098>
 8020eae:	687b      	ldr	r3, [r7, #4]
 8020eb0:	21d4      	movs	r1, #212	@ 0xd4
 8020eb2:	187a      	adds	r2, r7, r1
 8020eb4:	6013      	str	r3, [r2, #0]
 8020eb6:	687b      	ldr	r3, [r7, #4]
 8020eb8:	2250      	movs	r2, #80	@ 0x50
 8020eba:	5a9b      	ldrh	r3, [r3, r2]
 8020ebc:	b29b      	uxth	r3, r3
 8020ebe:	001a      	movs	r2, r3
 8020ec0:	187b      	adds	r3, r7, r1
 8020ec2:	681b      	ldr	r3, [r3, #0]
 8020ec4:	189b      	adds	r3, r3, r2
 8020ec6:	187a      	adds	r2, r7, r1
 8020ec8:	6013      	str	r3, [r2, #0]
 8020eca:	683b      	ldr	r3, [r7, #0]
 8020ecc:	781b      	ldrb	r3, [r3, #0]
 8020ece:	00da      	lsls	r2, r3, #3
 8020ed0:	187b      	adds	r3, r7, r1
 8020ed2:	681b      	ldr	r3, [r3, #0]
 8020ed4:	18d3      	adds	r3, r2, r3
 8020ed6:	4a4f      	ldr	r2, [pc, #316]	@ (8021014 <USB_EPStartXfer+0x11bc>)
 8020ed8:	4694      	mov	ip, r2
 8020eda:	4463      	add	r3, ip
 8020edc:	21d0      	movs	r1, #208	@ 0xd0
 8020ede:	187a      	adds	r2, r7, r1
 8020ee0:	6013      	str	r3, [r2, #0]
 8020ee2:	1d7b      	adds	r3, r7, #5
 8020ee4:	33ff      	adds	r3, #255	@ 0xff
 8020ee6:	681b      	ldr	r3, [r3, #0]
 8020ee8:	b29a      	uxth	r2, r3
 8020eea:	187b      	adds	r3, r7, r1
 8020eec:	681b      	ldr	r3, [r3, #0]
 8020eee:	801a      	strh	r2, [r3, #0]
 8020ef0:	687b      	ldr	r3, [r7, #4]
 8020ef2:	22c4      	movs	r2, #196	@ 0xc4
 8020ef4:	18ba      	adds	r2, r7, r2
 8020ef6:	6013      	str	r3, [r2, #0]
 8020ef8:	683b      	ldr	r3, [r7, #0]
 8020efa:	785b      	ldrb	r3, [r3, #1]
 8020efc:	2b00      	cmp	r3, #0
 8020efe:	d000      	beq.n	8020f02 <USB_EPStartXfer+0x10aa>
 8020f00:	e08c      	b.n	802101c <USB_EPStartXfer+0x11c4>
 8020f02:	687b      	ldr	r3, [r7, #4]
 8020f04:	21bc      	movs	r1, #188	@ 0xbc
 8020f06:	187a      	adds	r2, r7, r1
 8020f08:	6013      	str	r3, [r2, #0]
 8020f0a:	687b      	ldr	r3, [r7, #4]
 8020f0c:	2250      	movs	r2, #80	@ 0x50
 8020f0e:	5a9b      	ldrh	r3, [r3, r2]
 8020f10:	b29b      	uxth	r3, r3
 8020f12:	001a      	movs	r2, r3
 8020f14:	187b      	adds	r3, r7, r1
 8020f16:	681b      	ldr	r3, [r3, #0]
 8020f18:	189b      	adds	r3, r3, r2
 8020f1a:	187a      	adds	r2, r7, r1
 8020f1c:	6013      	str	r3, [r2, #0]
 8020f1e:	683b      	ldr	r3, [r7, #0]
 8020f20:	781b      	ldrb	r3, [r3, #0]
 8020f22:	00da      	lsls	r2, r3, #3
 8020f24:	187b      	adds	r3, r7, r1
 8020f26:	681b      	ldr	r3, [r3, #0]
 8020f28:	18d3      	adds	r3, r2, r3
 8020f2a:	4a37      	ldr	r2, [pc, #220]	@ (8021008 <USB_EPStartXfer+0x11b0>)
 8020f2c:	4694      	mov	ip, r2
 8020f2e:	4463      	add	r3, ip
 8020f30:	21b8      	movs	r1, #184	@ 0xb8
 8020f32:	187a      	adds	r2, r7, r1
 8020f34:	6013      	str	r3, [r2, #0]
 8020f36:	187b      	adds	r3, r7, r1
 8020f38:	681b      	ldr	r3, [r3, #0]
 8020f3a:	881b      	ldrh	r3, [r3, #0]
 8020f3c:	b29b      	uxth	r3, r3
 8020f3e:	059b      	lsls	r3, r3, #22
 8020f40:	0d9b      	lsrs	r3, r3, #22
 8020f42:	b29a      	uxth	r2, r3
 8020f44:	187b      	adds	r3, r7, r1
 8020f46:	681b      	ldr	r3, [r3, #0]
 8020f48:	801a      	strh	r2, [r3, #0]
 8020f4a:	1d7b      	adds	r3, r7, #5
 8020f4c:	33ff      	adds	r3, #255	@ 0xff
 8020f4e:	681b      	ldr	r3, [r3, #0]
 8020f50:	2b3e      	cmp	r3, #62	@ 0x3e
 8020f52:	d925      	bls.n	8020fa0 <USB_EPStartXfer+0x1148>
 8020f54:	1d7b      	adds	r3, r7, #5
 8020f56:	33ff      	adds	r3, #255	@ 0xff
 8020f58:	681b      	ldr	r3, [r3, #0]
 8020f5a:	095b      	lsrs	r3, r3, #5
 8020f5c:	21d8      	movs	r1, #216	@ 0xd8
 8020f5e:	187a      	adds	r2, r7, r1
 8020f60:	6013      	str	r3, [r2, #0]
 8020f62:	1d7b      	adds	r3, r7, #5
 8020f64:	33ff      	adds	r3, #255	@ 0xff
 8020f66:	681b      	ldr	r3, [r3, #0]
 8020f68:	221f      	movs	r2, #31
 8020f6a:	4013      	ands	r3, r2
 8020f6c:	d104      	bne.n	8020f78 <USB_EPStartXfer+0x1120>
 8020f6e:	187b      	adds	r3, r7, r1
 8020f70:	681b      	ldr	r3, [r3, #0]
 8020f72:	3b01      	subs	r3, #1
 8020f74:	187a      	adds	r2, r7, r1
 8020f76:	6013      	str	r3, [r2, #0]
 8020f78:	21b8      	movs	r1, #184	@ 0xb8
 8020f7a:	187b      	adds	r3, r7, r1
 8020f7c:	681b      	ldr	r3, [r3, #0]
 8020f7e:	881b      	ldrh	r3, [r3, #0]
 8020f80:	b29a      	uxth	r2, r3
 8020f82:	23d8      	movs	r3, #216	@ 0xd8
 8020f84:	18fb      	adds	r3, r7, r3
 8020f86:	681b      	ldr	r3, [r3, #0]
 8020f88:	b29b      	uxth	r3, r3
 8020f8a:	029b      	lsls	r3, r3, #10
 8020f8c:	b29b      	uxth	r3, r3
 8020f8e:	4313      	orrs	r3, r2
 8020f90:	b29b      	uxth	r3, r3
 8020f92:	4a21      	ldr	r2, [pc, #132]	@ (8021018 <USB_EPStartXfer+0x11c0>)
 8020f94:	4313      	orrs	r3, r2
 8020f96:	b29a      	uxth	r2, r3
 8020f98:	187b      	adds	r3, r7, r1
 8020f9a:	681b      	ldr	r3, [r3, #0]
 8020f9c:	801a      	strh	r2, [r3, #0]
 8020f9e:	e062      	b.n	8021066 <USB_EPStartXfer+0x120e>
 8020fa0:	1d7b      	adds	r3, r7, #5
 8020fa2:	33ff      	adds	r3, #255	@ 0xff
 8020fa4:	681b      	ldr	r3, [r3, #0]
 8020fa6:	2b00      	cmp	r3, #0
 8020fa8:	d10b      	bne.n	8020fc2 <USB_EPStartXfer+0x116a>
 8020faa:	21b8      	movs	r1, #184	@ 0xb8
 8020fac:	187b      	adds	r3, r7, r1
 8020fae:	681b      	ldr	r3, [r3, #0]
 8020fb0:	881b      	ldrh	r3, [r3, #0]
 8020fb2:	b29b      	uxth	r3, r3
 8020fb4:	4a18      	ldr	r2, [pc, #96]	@ (8021018 <USB_EPStartXfer+0x11c0>)
 8020fb6:	4313      	orrs	r3, r2
 8020fb8:	b29a      	uxth	r2, r3
 8020fba:	187b      	adds	r3, r7, r1
 8020fbc:	681b      	ldr	r3, [r3, #0]
 8020fbe:	801a      	strh	r2, [r3, #0]
 8020fc0:	e051      	b.n	8021066 <USB_EPStartXfer+0x120e>
 8020fc2:	1d7b      	adds	r3, r7, #5
 8020fc4:	33ff      	adds	r3, #255	@ 0xff
 8020fc6:	681b      	ldr	r3, [r3, #0]
 8020fc8:	085b      	lsrs	r3, r3, #1
 8020fca:	21d8      	movs	r1, #216	@ 0xd8
 8020fcc:	187a      	adds	r2, r7, r1
 8020fce:	6013      	str	r3, [r2, #0]
 8020fd0:	1d7b      	adds	r3, r7, #5
 8020fd2:	33ff      	adds	r3, #255	@ 0xff
 8020fd4:	681b      	ldr	r3, [r3, #0]
 8020fd6:	2201      	movs	r2, #1
 8020fd8:	4013      	ands	r3, r2
 8020fda:	d004      	beq.n	8020fe6 <USB_EPStartXfer+0x118e>
 8020fdc:	187b      	adds	r3, r7, r1
 8020fde:	681b      	ldr	r3, [r3, #0]
 8020fe0:	3301      	adds	r3, #1
 8020fe2:	187a      	adds	r2, r7, r1
 8020fe4:	6013      	str	r3, [r2, #0]
 8020fe6:	21b8      	movs	r1, #184	@ 0xb8
 8020fe8:	187b      	adds	r3, r7, r1
 8020fea:	681b      	ldr	r3, [r3, #0]
 8020fec:	881b      	ldrh	r3, [r3, #0]
 8020fee:	b29a      	uxth	r2, r3
 8020ff0:	23d8      	movs	r3, #216	@ 0xd8
 8020ff2:	18fb      	adds	r3, r7, r3
 8020ff4:	681b      	ldr	r3, [r3, #0]
 8020ff6:	b29b      	uxth	r3, r3
 8020ff8:	029b      	lsls	r3, r3, #10
 8020ffa:	b29b      	uxth	r3, r3
 8020ffc:	4313      	orrs	r3, r2
 8020ffe:	b29a      	uxth	r2, r3
 8021000:	187b      	adds	r3, r7, r1
 8021002:	681b      	ldr	r3, [r3, #0]
 8021004:	801a      	strh	r2, [r3, #0]
 8021006:	e02e      	b.n	8021066 <USB_EPStartXfer+0x120e>
 8021008:	00000406 	.word	0x00000406
 802100c:	ffff8f8f 	.word	0xffff8f8f
 8021010:	ffff80c0 	.word	0xffff80c0
 8021014:	00000402 	.word	0x00000402
 8021018:	ffff8000 	.word	0xffff8000
 802101c:	683b      	ldr	r3, [r7, #0]
 802101e:	785b      	ldrb	r3, [r3, #1]
 8021020:	2b01      	cmp	r3, #1
 8021022:	d120      	bne.n	8021066 <USB_EPStartXfer+0x120e>
 8021024:	687b      	ldr	r3, [r7, #4]
 8021026:	2250      	movs	r2, #80	@ 0x50
 8021028:	5a9b      	ldrh	r3, [r3, r2]
 802102a:	b29b      	uxth	r3, r3
 802102c:	001a      	movs	r2, r3
 802102e:	21c4      	movs	r1, #196	@ 0xc4
 8021030:	187b      	adds	r3, r7, r1
 8021032:	681b      	ldr	r3, [r3, #0]
 8021034:	189b      	adds	r3, r3, r2
 8021036:	187a      	adds	r2, r7, r1
 8021038:	6013      	str	r3, [r2, #0]
 802103a:	683b      	ldr	r3, [r7, #0]
 802103c:	781b      	ldrb	r3, [r3, #0]
 802103e:	00da      	lsls	r2, r3, #3
 8021040:	187b      	adds	r3, r7, r1
 8021042:	681b      	ldr	r3, [r3, #0]
 8021044:	18d3      	adds	r3, r2, r3
 8021046:	4a1d      	ldr	r2, [pc, #116]	@ (80210bc <USB_EPStartXfer+0x1264>)
 8021048:	4694      	mov	ip, r2
 802104a:	4463      	add	r3, ip
 802104c:	21c0      	movs	r1, #192	@ 0xc0
 802104e:	187a      	adds	r2, r7, r1
 8021050:	6013      	str	r3, [r2, #0]
 8021052:	1d7b      	adds	r3, r7, #5
 8021054:	33ff      	adds	r3, #255	@ 0xff
 8021056:	681b      	ldr	r3, [r3, #0]
 8021058:	b29a      	uxth	r2, r3
 802105a:	187b      	adds	r3, r7, r1
 802105c:	681b      	ldr	r3, [r3, #0]
 802105e:	801a      	strh	r2, [r3, #0]
 8021060:	e001      	b.n	8021066 <USB_EPStartXfer+0x120e>
      }
      else
      {
        return HAL_ERROR;
 8021062:	2301      	movs	r3, #1
 8021064:	e025      	b.n	80210b2 <USB_EPStartXfer+0x125a>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8021066:	687a      	ldr	r2, [r7, #4]
 8021068:	683b      	ldr	r3, [r7, #0]
 802106a:	781b      	ldrb	r3, [r3, #0]
 802106c:	009b      	lsls	r3, r3, #2
 802106e:	18d3      	adds	r3, r2, r3
 8021070:	881b      	ldrh	r3, [r3, #0]
 8021072:	b29a      	uxth	r2, r3
 8021074:	208a      	movs	r0, #138	@ 0x8a
 8021076:	183b      	adds	r3, r7, r0
 8021078:	4911      	ldr	r1, [pc, #68]	@ (80210c0 <USB_EPStartXfer+0x1268>)
 802107a:	400a      	ands	r2, r1
 802107c:	801a      	strh	r2, [r3, #0]
 802107e:	183b      	adds	r3, r7, r0
 8021080:	183a      	adds	r2, r7, r0
 8021082:	8812      	ldrh	r2, [r2, #0]
 8021084:	2180      	movs	r1, #128	@ 0x80
 8021086:	0149      	lsls	r1, r1, #5
 8021088:	404a      	eors	r2, r1
 802108a:	801a      	strh	r2, [r3, #0]
 802108c:	183b      	adds	r3, r7, r0
 802108e:	183a      	adds	r2, r7, r0
 8021090:	8812      	ldrh	r2, [r2, #0]
 8021092:	2180      	movs	r1, #128	@ 0x80
 8021094:	0189      	lsls	r1, r1, #6
 8021096:	404a      	eors	r2, r1
 8021098:	801a      	strh	r2, [r3, #0]
 802109a:	687a      	ldr	r2, [r7, #4]
 802109c:	683b      	ldr	r3, [r7, #0]
 802109e:	781b      	ldrb	r3, [r3, #0]
 80210a0:	009b      	lsls	r3, r3, #2
 80210a2:	18d3      	adds	r3, r2, r3
 80210a4:	183a      	adds	r2, r7, r0
 80210a6:	8812      	ldrh	r2, [r2, #0]
 80210a8:	4906      	ldr	r1, [pc, #24]	@ (80210c4 <USB_EPStartXfer+0x126c>)
 80210aa:	430a      	orrs	r2, r1
 80210ac:	b292      	uxth	r2, r2
 80210ae:	801a      	strh	r2, [r3, #0]
  }

  return HAL_OK;
 80210b0:	2300      	movs	r3, #0
}
 80210b2:	0018      	movs	r0, r3
 80210b4:	46bd      	mov	sp, r7
 80210b6:	b043      	add	sp, #268	@ 0x10c
 80210b8:	bd90      	pop	{r4, r7, pc}
 80210ba:	46c0      	nop			@ (mov r8, r8)
 80210bc:	00000406 	.word	0x00000406
 80210c0:	ffffbf8f 	.word	0xffffbf8f
 80210c4:	ffff8080 	.word	0xffff8080

080210c8 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80210c8:	b580      	push	{r7, lr}
 80210ca:	b084      	sub	sp, #16
 80210cc:	af00      	add	r7, sp, #0
 80210ce:	6078      	str	r0, [r7, #4]
 80210d0:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 80210d2:	683b      	ldr	r3, [r7, #0]
 80210d4:	785b      	ldrb	r3, [r3, #1]
 80210d6:	2b00      	cmp	r3, #0
 80210d8:	d01d      	beq.n	8021116 <USB_EPSetStall+0x4e>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 80210da:	687a      	ldr	r2, [r7, #4]
 80210dc:	683b      	ldr	r3, [r7, #0]
 80210de:	781b      	ldrb	r3, [r3, #0]
 80210e0:	009b      	lsls	r3, r3, #2
 80210e2:	18d3      	adds	r3, r2, r3
 80210e4:	881b      	ldrh	r3, [r3, #0]
 80210e6:	b29a      	uxth	r2, r3
 80210e8:	200c      	movs	r0, #12
 80210ea:	183b      	adds	r3, r7, r0
 80210ec:	491b      	ldr	r1, [pc, #108]	@ (802115c <USB_EPSetStall+0x94>)
 80210ee:	400a      	ands	r2, r1
 80210f0:	801a      	strh	r2, [r3, #0]
 80210f2:	183b      	adds	r3, r7, r0
 80210f4:	183a      	adds	r2, r7, r0
 80210f6:	8812      	ldrh	r2, [r2, #0]
 80210f8:	2110      	movs	r1, #16
 80210fa:	404a      	eors	r2, r1
 80210fc:	801a      	strh	r2, [r3, #0]
 80210fe:	687a      	ldr	r2, [r7, #4]
 8021100:	683b      	ldr	r3, [r7, #0]
 8021102:	781b      	ldrb	r3, [r3, #0]
 8021104:	009b      	lsls	r3, r3, #2
 8021106:	18d3      	adds	r3, r2, r3
 8021108:	183a      	adds	r2, r7, r0
 802110a:	8812      	ldrh	r2, [r2, #0]
 802110c:	4914      	ldr	r1, [pc, #80]	@ (8021160 <USB_EPSetStall+0x98>)
 802110e:	430a      	orrs	r2, r1
 8021110:	b292      	uxth	r2, r2
 8021112:	801a      	strh	r2, [r3, #0]
 8021114:	e01d      	b.n	8021152 <USB_EPSetStall+0x8a>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8021116:	687a      	ldr	r2, [r7, #4]
 8021118:	683b      	ldr	r3, [r7, #0]
 802111a:	781b      	ldrb	r3, [r3, #0]
 802111c:	009b      	lsls	r3, r3, #2
 802111e:	18d3      	adds	r3, r2, r3
 8021120:	881b      	ldrh	r3, [r3, #0]
 8021122:	b29a      	uxth	r2, r3
 8021124:	200e      	movs	r0, #14
 8021126:	183b      	adds	r3, r7, r0
 8021128:	490e      	ldr	r1, [pc, #56]	@ (8021164 <USB_EPSetStall+0x9c>)
 802112a:	400a      	ands	r2, r1
 802112c:	801a      	strh	r2, [r3, #0]
 802112e:	183b      	adds	r3, r7, r0
 8021130:	183a      	adds	r2, r7, r0
 8021132:	8812      	ldrh	r2, [r2, #0]
 8021134:	2180      	movs	r1, #128	@ 0x80
 8021136:	0149      	lsls	r1, r1, #5
 8021138:	404a      	eors	r2, r1
 802113a:	801a      	strh	r2, [r3, #0]
 802113c:	687a      	ldr	r2, [r7, #4]
 802113e:	683b      	ldr	r3, [r7, #0]
 8021140:	781b      	ldrb	r3, [r3, #0]
 8021142:	009b      	lsls	r3, r3, #2
 8021144:	18d3      	adds	r3, r2, r3
 8021146:	183a      	adds	r2, r7, r0
 8021148:	8812      	ldrh	r2, [r2, #0]
 802114a:	4905      	ldr	r1, [pc, #20]	@ (8021160 <USB_EPSetStall+0x98>)
 802114c:	430a      	orrs	r2, r1
 802114e:	b292      	uxth	r2, r2
 8021150:	801a      	strh	r2, [r3, #0]
  }

  return HAL_OK;
 8021152:	2300      	movs	r3, #0
}
 8021154:	0018      	movs	r0, r3
 8021156:	46bd      	mov	sp, r7
 8021158:	b004      	add	sp, #16
 802115a:	bd80      	pop	{r7, pc}
 802115c:	ffff8fbf 	.word	0xffff8fbf
 8021160:	ffff8080 	.word	0xffff8080
 8021164:	ffffbf8f 	.word	0xffffbf8f

08021168 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8021168:	b580      	push	{r7, lr}
 802116a:	b086      	sub	sp, #24
 802116c:	af00      	add	r7, sp, #0
 802116e:	6078      	str	r0, [r7, #4]
 8021170:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8021172:	683b      	ldr	r3, [r7, #0]
 8021174:	7b1b      	ldrb	r3, [r3, #12]
 8021176:	2b00      	cmp	r3, #0
 8021178:	d000      	beq.n	802117c <USB_EPClearStall+0x14>
 802117a:	e095      	b.n	80212a8 <USB_EPClearStall+0x140>
  {
    if (ep->is_in != 0U)
 802117c:	683b      	ldr	r3, [r7, #0]
 802117e:	785b      	ldrb	r3, [r3, #1]
 8021180:	2b00      	cmp	r3, #0
 8021182:	d046      	beq.n	8021212 <USB_EPClearStall+0xaa>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8021184:	687a      	ldr	r2, [r7, #4]
 8021186:	683b      	ldr	r3, [r7, #0]
 8021188:	781b      	ldrb	r3, [r3, #0]
 802118a:	009b      	lsls	r3, r3, #2
 802118c:	18d2      	adds	r2, r2, r3
 802118e:	2110      	movs	r1, #16
 8021190:	187b      	adds	r3, r7, r1
 8021192:	8812      	ldrh	r2, [r2, #0]
 8021194:	801a      	strh	r2, [r3, #0]
 8021196:	187b      	adds	r3, r7, r1
 8021198:	881b      	ldrh	r3, [r3, #0]
 802119a:	2240      	movs	r2, #64	@ 0x40
 802119c:	4013      	ands	r3, r2
 802119e:	d016      	beq.n	80211ce <USB_EPClearStall+0x66>
 80211a0:	687a      	ldr	r2, [r7, #4]
 80211a2:	683b      	ldr	r3, [r7, #0]
 80211a4:	781b      	ldrb	r3, [r3, #0]
 80211a6:	009b      	lsls	r3, r3, #2
 80211a8:	18d3      	adds	r3, r2, r3
 80211aa:	881b      	ldrh	r3, [r3, #0]
 80211ac:	b29a      	uxth	r2, r3
 80211ae:	200e      	movs	r0, #14
 80211b0:	183b      	adds	r3, r7, r0
 80211b2:	4940      	ldr	r1, [pc, #256]	@ (80212b4 <USB_EPClearStall+0x14c>)
 80211b4:	400a      	ands	r2, r1
 80211b6:	801a      	strh	r2, [r3, #0]
 80211b8:	687a      	ldr	r2, [r7, #4]
 80211ba:	683b      	ldr	r3, [r7, #0]
 80211bc:	781b      	ldrb	r3, [r3, #0]
 80211be:	009b      	lsls	r3, r3, #2
 80211c0:	18d3      	adds	r3, r2, r3
 80211c2:	183a      	adds	r2, r7, r0
 80211c4:	8812      	ldrh	r2, [r2, #0]
 80211c6:	493c      	ldr	r1, [pc, #240]	@ (80212b8 <USB_EPClearStall+0x150>)
 80211c8:	430a      	orrs	r2, r1
 80211ca:	b292      	uxth	r2, r2
 80211cc:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 80211ce:	683b      	ldr	r3, [r7, #0]
 80211d0:	78db      	ldrb	r3, [r3, #3]
 80211d2:	2b01      	cmp	r3, #1
 80211d4:	d068      	beq.n	80212a8 <USB_EPClearStall+0x140>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80211d6:	687a      	ldr	r2, [r7, #4]
 80211d8:	683b      	ldr	r3, [r7, #0]
 80211da:	781b      	ldrb	r3, [r3, #0]
 80211dc:	009b      	lsls	r3, r3, #2
 80211de:	18d3      	adds	r3, r2, r3
 80211e0:	881b      	ldrh	r3, [r3, #0]
 80211e2:	b29a      	uxth	r2, r3
 80211e4:	200c      	movs	r0, #12
 80211e6:	183b      	adds	r3, r7, r0
 80211e8:	4934      	ldr	r1, [pc, #208]	@ (80212bc <USB_EPClearStall+0x154>)
 80211ea:	400a      	ands	r2, r1
 80211ec:	801a      	strh	r2, [r3, #0]
 80211ee:	183b      	adds	r3, r7, r0
 80211f0:	183a      	adds	r2, r7, r0
 80211f2:	8812      	ldrh	r2, [r2, #0]
 80211f4:	2120      	movs	r1, #32
 80211f6:	404a      	eors	r2, r1
 80211f8:	801a      	strh	r2, [r3, #0]
 80211fa:	687a      	ldr	r2, [r7, #4]
 80211fc:	683b      	ldr	r3, [r7, #0]
 80211fe:	781b      	ldrb	r3, [r3, #0]
 8021200:	009b      	lsls	r3, r3, #2
 8021202:	18d3      	adds	r3, r2, r3
 8021204:	183a      	adds	r2, r7, r0
 8021206:	8812      	ldrh	r2, [r2, #0]
 8021208:	492d      	ldr	r1, [pc, #180]	@ (80212c0 <USB_EPClearStall+0x158>)
 802120a:	430a      	orrs	r2, r1
 802120c:	b292      	uxth	r2, r2
 802120e:	801a      	strh	r2, [r3, #0]
 8021210:	e04a      	b.n	80212a8 <USB_EPClearStall+0x140>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8021212:	687a      	ldr	r2, [r7, #4]
 8021214:	683b      	ldr	r3, [r7, #0]
 8021216:	781b      	ldrb	r3, [r3, #0]
 8021218:	009b      	lsls	r3, r3, #2
 802121a:	18d2      	adds	r2, r2, r3
 802121c:	2116      	movs	r1, #22
 802121e:	187b      	adds	r3, r7, r1
 8021220:	8812      	ldrh	r2, [r2, #0]
 8021222:	801a      	strh	r2, [r3, #0]
 8021224:	187b      	adds	r3, r7, r1
 8021226:	881a      	ldrh	r2, [r3, #0]
 8021228:	2380      	movs	r3, #128	@ 0x80
 802122a:	01db      	lsls	r3, r3, #7
 802122c:	4013      	ands	r3, r2
 802122e:	d016      	beq.n	802125e <USB_EPClearStall+0xf6>
 8021230:	687a      	ldr	r2, [r7, #4]
 8021232:	683b      	ldr	r3, [r7, #0]
 8021234:	781b      	ldrb	r3, [r3, #0]
 8021236:	009b      	lsls	r3, r3, #2
 8021238:	18d3      	adds	r3, r2, r3
 802123a:	881b      	ldrh	r3, [r3, #0]
 802123c:	b29a      	uxth	r2, r3
 802123e:	2014      	movs	r0, #20
 8021240:	183b      	adds	r3, r7, r0
 8021242:	491c      	ldr	r1, [pc, #112]	@ (80212b4 <USB_EPClearStall+0x14c>)
 8021244:	400a      	ands	r2, r1
 8021246:	801a      	strh	r2, [r3, #0]
 8021248:	687a      	ldr	r2, [r7, #4]
 802124a:	683b      	ldr	r3, [r7, #0]
 802124c:	781b      	ldrb	r3, [r3, #0]
 802124e:	009b      	lsls	r3, r3, #2
 8021250:	18d3      	adds	r3, r2, r3
 8021252:	183a      	adds	r2, r7, r0
 8021254:	8812      	ldrh	r2, [r2, #0]
 8021256:	491b      	ldr	r1, [pc, #108]	@ (80212c4 <USB_EPClearStall+0x15c>)
 8021258:	430a      	orrs	r2, r1
 802125a:	b292      	uxth	r2, r2
 802125c:	801a      	strh	r2, [r3, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 802125e:	687a      	ldr	r2, [r7, #4]
 8021260:	683b      	ldr	r3, [r7, #0]
 8021262:	781b      	ldrb	r3, [r3, #0]
 8021264:	009b      	lsls	r3, r3, #2
 8021266:	18d3      	adds	r3, r2, r3
 8021268:	881b      	ldrh	r3, [r3, #0]
 802126a:	b29a      	uxth	r2, r3
 802126c:	2012      	movs	r0, #18
 802126e:	183b      	adds	r3, r7, r0
 8021270:	4915      	ldr	r1, [pc, #84]	@ (80212c8 <USB_EPClearStall+0x160>)
 8021272:	400a      	ands	r2, r1
 8021274:	801a      	strh	r2, [r3, #0]
 8021276:	183b      	adds	r3, r7, r0
 8021278:	183a      	adds	r2, r7, r0
 802127a:	8812      	ldrh	r2, [r2, #0]
 802127c:	2180      	movs	r1, #128	@ 0x80
 802127e:	0149      	lsls	r1, r1, #5
 8021280:	404a      	eors	r2, r1
 8021282:	801a      	strh	r2, [r3, #0]
 8021284:	183b      	adds	r3, r7, r0
 8021286:	183a      	adds	r2, r7, r0
 8021288:	8812      	ldrh	r2, [r2, #0]
 802128a:	2180      	movs	r1, #128	@ 0x80
 802128c:	0189      	lsls	r1, r1, #6
 802128e:	404a      	eors	r2, r1
 8021290:	801a      	strh	r2, [r3, #0]
 8021292:	687a      	ldr	r2, [r7, #4]
 8021294:	683b      	ldr	r3, [r7, #0]
 8021296:	781b      	ldrb	r3, [r3, #0]
 8021298:	009b      	lsls	r3, r3, #2
 802129a:	18d3      	adds	r3, r2, r3
 802129c:	183a      	adds	r2, r7, r0
 802129e:	8812      	ldrh	r2, [r2, #0]
 80212a0:	4907      	ldr	r1, [pc, #28]	@ (80212c0 <USB_EPClearStall+0x158>)
 80212a2:	430a      	orrs	r2, r1
 80212a4:	b292      	uxth	r2, r2
 80212a6:	801a      	strh	r2, [r3, #0]
    }
  }

  return HAL_OK;
 80212a8:	2300      	movs	r3, #0
}
 80212aa:	0018      	movs	r0, r3
 80212ac:	46bd      	mov	sp, r7
 80212ae:	b006      	add	sp, #24
 80212b0:	bd80      	pop	{r7, pc}
 80212b2:	46c0      	nop			@ (mov r8, r8)
 80212b4:	ffff8f8f 	.word	0xffff8f8f
 80212b8:	ffff80c0 	.word	0xffff80c0
 80212bc:	ffff8fbf 	.word	0xffff8fbf
 80212c0:	ffff8080 	.word	0xffff8080
 80212c4:	ffffc080 	.word	0xffffc080
 80212c8:	ffffbf8f 	.word	0xffffbf8f

080212cc <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 80212cc:	b580      	push	{r7, lr}
 80212ce:	b082      	sub	sp, #8
 80212d0:	af00      	add	r7, sp, #0
 80212d2:	6078      	str	r0, [r7, #4]
 80212d4:	000a      	movs	r2, r1
 80212d6:	1cfb      	adds	r3, r7, #3
 80212d8:	701a      	strb	r2, [r3, #0]
  if (address == 0U)
 80212da:	1cfb      	adds	r3, r7, #3
 80212dc:	781b      	ldrb	r3, [r3, #0]
 80212de:	2b00      	cmp	r3, #0
 80212e0:	d103      	bne.n	80212ea <USB_SetDevAddress+0x1e>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 80212e2:	687b      	ldr	r3, [r7, #4]
 80212e4:	224c      	movs	r2, #76	@ 0x4c
 80212e6:	2180      	movs	r1, #128	@ 0x80
 80212e8:	5299      	strh	r1, [r3, r2]
  }

  return HAL_OK;
 80212ea:	2300      	movs	r3, #0
}
 80212ec:	0018      	movs	r0, r3
 80212ee:	46bd      	mov	sp, r7
 80212f0:	b002      	add	sp, #8
 80212f2:	bd80      	pop	{r7, pc}

080212f4 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 80212f4:	b580      	push	{r7, lr}
 80212f6:	b082      	sub	sp, #8
 80212f8:	af00      	add	r7, sp, #0
 80212fa:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 80212fc:	687b      	ldr	r3, [r7, #4]
 80212fe:	2258      	movs	r2, #88	@ 0x58
 8021300:	5a9b      	ldrh	r3, [r3, r2]
 8021302:	b29b      	uxth	r3, r3
 8021304:	4a05      	ldr	r2, [pc, #20]	@ (802131c <USB_DevConnect+0x28>)
 8021306:	4313      	orrs	r3, r2
 8021308:	b299      	uxth	r1, r3
 802130a:	687b      	ldr	r3, [r7, #4]
 802130c:	2258      	movs	r2, #88	@ 0x58
 802130e:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8021310:	2300      	movs	r3, #0
}
 8021312:	0018      	movs	r0, r3
 8021314:	46bd      	mov	sp, r7
 8021316:	b002      	add	sp, #8
 8021318:	bd80      	pop	{r7, pc}
 802131a:	46c0      	nop			@ (mov r8, r8)
 802131c:	ffff8000 	.word	0xffff8000

08021320 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8021320:	b580      	push	{r7, lr}
 8021322:	b084      	sub	sp, #16
 8021324:	af00      	add	r7, sp, #0
 8021326:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8021328:	687b      	ldr	r3, [r7, #4]
 802132a:	2244      	movs	r2, #68	@ 0x44
 802132c:	5a9b      	ldrh	r3, [r3, r2]
 802132e:	b29b      	uxth	r3, r3
 8021330:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8021332:	68fb      	ldr	r3, [r7, #12]
}
 8021334:	0018      	movs	r0, r3
 8021336:	46bd      	mov	sp, r7
 8021338:	b004      	add	sp, #16
 802133a:	bd80      	pop	{r7, pc}

0802133c <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 802133c:	b580      	push	{r7, lr}
 802133e:	b08a      	sub	sp, #40	@ 0x28
 8021340:	af00      	add	r7, sp, #0
 8021342:	60f8      	str	r0, [r7, #12]
 8021344:	60b9      	str	r1, [r7, #8]
 8021346:	0019      	movs	r1, r3
 8021348:	1dbb      	adds	r3, r7, #6
 802134a:	801a      	strh	r2, [r3, #0]
 802134c:	1d3b      	adds	r3, r7, #4
 802134e:	1c0a      	adds	r2, r1, #0
 8021350:	801a      	strh	r2, [r3, #0]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8021352:	1d3b      	adds	r3, r7, #4
 8021354:	881b      	ldrh	r3, [r3, #0]
 8021356:	3301      	adds	r3, #1
 8021358:	085b      	lsrs	r3, r3, #1
 802135a:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 802135c:	68fb      	ldr	r3, [r7, #12]
 802135e:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8021360:	68bb      	ldr	r3, [r7, #8]
 8021362:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8021364:	1dbb      	adds	r3, r7, #6
 8021366:	881a      	ldrh	r2, [r3, #0]
 8021368:	697b      	ldr	r3, [r7, #20]
 802136a:	18d3      	adds	r3, r2, r3
 802136c:	2280      	movs	r2, #128	@ 0x80
 802136e:	00d2      	lsls	r2, r2, #3
 8021370:	4694      	mov	ip, r2
 8021372:	4463      	add	r3, ip
 8021374:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8021376:	69bb      	ldr	r3, [r7, #24]
 8021378:	627b      	str	r3, [r7, #36]	@ 0x24
 802137a:	e021      	b.n	80213c0 <USB_WritePMA+0x84>
  {
    WrVal = pBuf[0];
 802137c:	69fb      	ldr	r3, [r7, #28]
 802137e:	781a      	ldrb	r2, [r3, #0]
 8021380:	2112      	movs	r1, #18
 8021382:	187b      	adds	r3, r7, r1
 8021384:	801a      	strh	r2, [r3, #0]
    WrVal |= (uint16_t)pBuf[1] << 8;
 8021386:	69fb      	ldr	r3, [r7, #28]
 8021388:	3301      	adds	r3, #1
 802138a:	781b      	ldrb	r3, [r3, #0]
 802138c:	b21b      	sxth	r3, r3
 802138e:	021b      	lsls	r3, r3, #8
 8021390:	b21a      	sxth	r2, r3
 8021392:	187b      	adds	r3, r7, r1
 8021394:	2000      	movs	r0, #0
 8021396:	5e1b      	ldrsh	r3, [r3, r0]
 8021398:	4313      	orrs	r3, r2
 802139a:	b21a      	sxth	r2, r3
 802139c:	187b      	adds	r3, r7, r1
 802139e:	801a      	strh	r2, [r3, #0]
    *pdwVal = (WrVal & 0xFFFFU);
 80213a0:	6a3b      	ldr	r3, [r7, #32]
 80213a2:	187a      	adds	r2, r7, r1
 80213a4:	8812      	ldrh	r2, [r2, #0]
 80213a6:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 80213a8:	6a3b      	ldr	r3, [r7, #32]
 80213aa:	3302      	adds	r3, #2
 80213ac:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 80213ae:	69fb      	ldr	r3, [r7, #28]
 80213b0:	3301      	adds	r3, #1
 80213b2:	61fb      	str	r3, [r7, #28]
    pBuf++;
 80213b4:	69fb      	ldr	r3, [r7, #28]
 80213b6:	3301      	adds	r3, #1
 80213b8:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 80213ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80213bc:	3b01      	subs	r3, #1
 80213be:	627b      	str	r3, [r7, #36]	@ 0x24
 80213c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80213c2:	2b00      	cmp	r3, #0
 80213c4:	d1da      	bne.n	802137c <USB_WritePMA+0x40>
  }
}
 80213c6:	46c0      	nop			@ (mov r8, r8)
 80213c8:	46c0      	nop			@ (mov r8, r8)
 80213ca:	46bd      	mov	sp, r7
 80213cc:	b00a      	add	sp, #40	@ 0x28
 80213ce:	bd80      	pop	{r7, pc}

080213d0 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80213d0:	b580      	push	{r7, lr}
 80213d2:	b08a      	sub	sp, #40	@ 0x28
 80213d4:	af00      	add	r7, sp, #0
 80213d6:	60f8      	str	r0, [r7, #12]
 80213d8:	60b9      	str	r1, [r7, #8]
 80213da:	0019      	movs	r1, r3
 80213dc:	1dbb      	adds	r3, r7, #6
 80213de:	801a      	strh	r2, [r3, #0]
 80213e0:	1d3b      	adds	r3, r7, #4
 80213e2:	1c0a      	adds	r2, r1, #0
 80213e4:	801a      	strh	r2, [r3, #0]
  uint32_t n = (uint32_t)wNBytes >> 1;
 80213e6:	1d3b      	adds	r3, r7, #4
 80213e8:	881b      	ldrh	r3, [r3, #0]
 80213ea:	085b      	lsrs	r3, r3, #1
 80213ec:	b29b      	uxth	r3, r3
 80213ee:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80213f0:	68fb      	ldr	r3, [r7, #12]
 80213f2:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80213f4:	68bb      	ldr	r3, [r7, #8]
 80213f6:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80213f8:	1dbb      	adds	r3, r7, #6
 80213fa:	881a      	ldrh	r2, [r3, #0]
 80213fc:	697b      	ldr	r3, [r7, #20]
 80213fe:	18d3      	adds	r3, r2, r3
 8021400:	2280      	movs	r2, #128	@ 0x80
 8021402:	00d2      	lsls	r2, r2, #3
 8021404:	4694      	mov	ip, r2
 8021406:	4463      	add	r3, ip
 8021408:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 802140a:	69bb      	ldr	r3, [r7, #24]
 802140c:	627b      	str	r3, [r7, #36]	@ 0x24
 802140e:	e018      	b.n	8021442 <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 8021410:	6a3b      	ldr	r3, [r7, #32]
 8021412:	881b      	ldrh	r3, [r3, #0]
 8021414:	b29b      	uxth	r3, r3
 8021416:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8021418:	6a3b      	ldr	r3, [r7, #32]
 802141a:	3302      	adds	r3, #2
 802141c:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 802141e:	693b      	ldr	r3, [r7, #16]
 8021420:	b2da      	uxtb	r2, r3
 8021422:	69fb      	ldr	r3, [r7, #28]
 8021424:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8021426:	69fb      	ldr	r3, [r7, #28]
 8021428:	3301      	adds	r3, #1
 802142a:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 802142c:	693b      	ldr	r3, [r7, #16]
 802142e:	0a1b      	lsrs	r3, r3, #8
 8021430:	b2da      	uxtb	r2, r3
 8021432:	69fb      	ldr	r3, [r7, #28]
 8021434:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8021436:	69fb      	ldr	r3, [r7, #28]
 8021438:	3301      	adds	r3, #1
 802143a:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 802143c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 802143e:	3b01      	subs	r3, #1
 8021440:	627b      	str	r3, [r7, #36]	@ 0x24
 8021442:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8021444:	2b00      	cmp	r3, #0
 8021446:	d1e3      	bne.n	8021410 <USB_ReadPMA+0x40>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8021448:	1d3b      	adds	r3, r7, #4
 802144a:	881b      	ldrh	r3, [r3, #0]
 802144c:	2201      	movs	r2, #1
 802144e:	4013      	ands	r3, r2
 8021450:	b29b      	uxth	r3, r3
 8021452:	2b00      	cmp	r3, #0
 8021454:	d007      	beq.n	8021466 <USB_ReadPMA+0x96>
  {
    RdVal = *pdwVal;
 8021456:	6a3b      	ldr	r3, [r7, #32]
 8021458:	881b      	ldrh	r3, [r3, #0]
 802145a:	b29b      	uxth	r3, r3
 802145c:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 802145e:	693b      	ldr	r3, [r7, #16]
 8021460:	b2da      	uxtb	r2, r3
 8021462:	69fb      	ldr	r3, [r7, #28]
 8021464:	701a      	strb	r2, [r3, #0]
  }
}
 8021466:	46c0      	nop			@ (mov r8, r8)
 8021468:	46bd      	mov	sp, r7
 802146a:	b00a      	add	sp, #40	@ 0x28
 802146c:	bd80      	pop	{r7, pc}

0802146e <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 802146e:	b580      	push	{r7, lr}
 8021470:	b084      	sub	sp, #16
 8021472:	af00      	add	r7, sp, #0
 8021474:	6078      	str	r0, [r7, #4]
 8021476:	000a      	movs	r2, r1
 8021478:	1cfb      	adds	r3, r7, #3
 802147a:	701a      	strb	r2, [r3, #0]
  uint8_t ret = 0U;
 802147c:	230f      	movs	r3, #15
 802147e:	18fb      	adds	r3, r7, r3
 8021480:	2200      	movs	r2, #0
 8021482:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8021484:	687b      	ldr	r3, [r7, #4]
 8021486:	7c1b      	ldrb	r3, [r3, #16]
 8021488:	2b00      	cmp	r3, #0
 802148a:	d116      	bne.n	80214ba <USBD_CDC_Init+0x4c>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 802148c:	2380      	movs	r3, #128	@ 0x80
 802148e:	009b      	lsls	r3, r3, #2
 8021490:	6878      	ldr	r0, [r7, #4]
 8021492:	2202      	movs	r2, #2
 8021494:	2181      	movs	r1, #129	@ 0x81
 8021496:	f002 f8f8 	bl	802368a <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 802149a:	687b      	ldr	r3, [r7, #4]
 802149c:	2201      	movs	r2, #1
 802149e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80214a0:	2380      	movs	r3, #128	@ 0x80
 80214a2:	009b      	lsls	r3, r3, #2
 80214a4:	6878      	ldr	r0, [r7, #4]
 80214a6:	2202      	movs	r2, #2
 80214a8:	2101      	movs	r1, #1
 80214aa:	f002 f8ee 	bl	802368a <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80214ae:	687a      	ldr	r2, [r7, #4]
 80214b0:	23b6      	movs	r3, #182	@ 0xb6
 80214b2:	005b      	lsls	r3, r3, #1
 80214b4:	2101      	movs	r1, #1
 80214b6:	50d1      	str	r1, [r2, r3]
 80214b8:	e013      	b.n	80214e2 <USBD_CDC_Init+0x74>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80214ba:	6878      	ldr	r0, [r7, #4]
 80214bc:	2340      	movs	r3, #64	@ 0x40
 80214be:	2202      	movs	r2, #2
 80214c0:	2181      	movs	r1, #129	@ 0x81
 80214c2:	f002 f8e2 	bl	802368a <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80214c6:	687b      	ldr	r3, [r7, #4]
 80214c8:	2201      	movs	r2, #1
 80214ca:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80214cc:	6878      	ldr	r0, [r7, #4]
 80214ce:	2340      	movs	r3, #64	@ 0x40
 80214d0:	2202      	movs	r2, #2
 80214d2:	2101      	movs	r1, #1
 80214d4:	f002 f8d9 	bl	802368a <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80214d8:	687a      	ldr	r2, [r7, #4]
 80214da:	23b6      	movs	r3, #182	@ 0xb6
 80214dc:	005b      	lsls	r3, r3, #1
 80214de:	2101      	movs	r1, #1
 80214e0:	50d1      	str	r1, [r2, r3]
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80214e2:	6878      	ldr	r0, [r7, #4]
 80214e4:	2308      	movs	r3, #8
 80214e6:	2203      	movs	r2, #3
 80214e8:	2182      	movs	r1, #130	@ 0x82
 80214ea:	f002 f8ce 	bl	802368a <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80214ee:	687b      	ldr	r3, [r7, #4]
 80214f0:	2201      	movs	r2, #1
 80214f2:	641a      	str	r2, [r3, #64]	@ 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80214f4:	2387      	movs	r3, #135	@ 0x87
 80214f6:	009b      	lsls	r3, r3, #2
 80214f8:	0018      	movs	r0, r3
 80214fa:	f002 fa5f 	bl	80239bc <USBD_static_malloc>
 80214fe:	0001      	movs	r1, r0
 8021500:	687a      	ldr	r2, [r7, #4]
 8021502:	23ae      	movs	r3, #174	@ 0xae
 8021504:	009b      	lsls	r3, r3, #2
 8021506:	50d1      	str	r1, [r2, r3]

  if (pdev->pClassData == NULL)
 8021508:	687a      	ldr	r2, [r7, #4]
 802150a:	23ae      	movs	r3, #174	@ 0xae
 802150c:	009b      	lsls	r3, r3, #2
 802150e:	58d3      	ldr	r3, [r2, r3]
 8021510:	2b00      	cmp	r3, #0
 8021512:	d104      	bne.n	802151e <USBD_CDC_Init+0xb0>
  {
    ret = 1U;
 8021514:	230f      	movs	r3, #15
 8021516:	18fb      	adds	r3, r7, r3
 8021518:	2201      	movs	r2, #1
 802151a:	701a      	strb	r2, [r3, #0]
 802151c:	e02c      	b.n	8021578 <USBD_CDC_Init+0x10a>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 802151e:	687a      	ldr	r2, [r7, #4]
 8021520:	23ae      	movs	r3, #174	@ 0xae
 8021522:	009b      	lsls	r3, r3, #2
 8021524:	58d3      	ldr	r3, [r2, r3]
 8021526:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8021528:	687a      	ldr	r2, [r7, #4]
 802152a:	23af      	movs	r3, #175	@ 0xaf
 802152c:	009b      	lsls	r3, r3, #2
 802152e:	58d3      	ldr	r3, [r2, r3]
 8021530:	681b      	ldr	r3, [r3, #0]
 8021532:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8021534:	68ba      	ldr	r2, [r7, #8]
 8021536:	2385      	movs	r3, #133	@ 0x85
 8021538:	009b      	lsls	r3, r3, #2
 802153a:	2100      	movs	r1, #0
 802153c:	50d1      	str	r1, [r2, r3]
    hcdc->RxState = 0U;
 802153e:	68ba      	ldr	r2, [r7, #8]
 8021540:	2386      	movs	r3, #134	@ 0x86
 8021542:	009b      	lsls	r3, r3, #2
 8021544:	2100      	movs	r1, #0
 8021546:	50d1      	str	r1, [r2, r3]

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8021548:	687b      	ldr	r3, [r7, #4]
 802154a:	7c1b      	ldrb	r3, [r3, #16]
 802154c:	2b00      	cmp	r3, #0
 802154e:	d10a      	bne.n	8021566 <USBD_CDC_Init+0xf8>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8021550:	68ba      	ldr	r2, [r7, #8]
 8021552:	2381      	movs	r3, #129	@ 0x81
 8021554:	009b      	lsls	r3, r3, #2
 8021556:	58d2      	ldr	r2, [r2, r3]
 8021558:	2380      	movs	r3, #128	@ 0x80
 802155a:	009b      	lsls	r3, r3, #2
 802155c:	6878      	ldr	r0, [r7, #4]
 802155e:	2101      	movs	r1, #1
 8021560:	f002 f9de 	bl	8023920 <USBD_LL_PrepareReceive>
 8021564:	e008      	b.n	8021578 <USBD_CDC_Init+0x10a>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8021566:	68ba      	ldr	r2, [r7, #8]
 8021568:	2381      	movs	r3, #129	@ 0x81
 802156a:	009b      	lsls	r3, r3, #2
 802156c:	58d2      	ldr	r2, [r2, r3]
 802156e:	6878      	ldr	r0, [r7, #4]
 8021570:	2340      	movs	r3, #64	@ 0x40
 8021572:	2101      	movs	r1, #1
 8021574:	f002 f9d4 	bl	8023920 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8021578:	230f      	movs	r3, #15
 802157a:	18fb      	adds	r3, r7, r3
 802157c:	781b      	ldrb	r3, [r3, #0]
}
 802157e:	0018      	movs	r0, r3
 8021580:	46bd      	mov	sp, r7
 8021582:	b004      	add	sp, #16
 8021584:	bd80      	pop	{r7, pc}

08021586 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8021586:	b580      	push	{r7, lr}
 8021588:	b084      	sub	sp, #16
 802158a:	af00      	add	r7, sp, #0
 802158c:	6078      	str	r0, [r7, #4]
 802158e:	000a      	movs	r2, r1
 8021590:	1cfb      	adds	r3, r7, #3
 8021592:	701a      	strb	r2, [r3, #0]
  uint8_t ret = 0U;
 8021594:	230f      	movs	r3, #15
 8021596:	18fb      	adds	r3, r7, r3
 8021598:	2200      	movs	r2, #0
 802159a:	701a      	strb	r2, [r3, #0]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 802159c:	687b      	ldr	r3, [r7, #4]
 802159e:	2181      	movs	r1, #129	@ 0x81
 80215a0:	0018      	movs	r0, r3
 80215a2:	f002 f8a9 	bl	80236f8 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 80215a6:	687b      	ldr	r3, [r7, #4]
 80215a8:	2200      	movs	r2, #0
 80215aa:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 80215ac:	687b      	ldr	r3, [r7, #4]
 80215ae:	2101      	movs	r1, #1
 80215b0:	0018      	movs	r0, r3
 80215b2:	f002 f8a1 	bl	80236f8 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 80215b6:	687a      	ldr	r2, [r7, #4]
 80215b8:	23b6      	movs	r3, #182	@ 0xb6
 80215ba:	005b      	lsls	r3, r3, #1
 80215bc:	2100      	movs	r1, #0
 80215be:	50d1      	str	r1, [r2, r3]

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 80215c0:	687b      	ldr	r3, [r7, #4]
 80215c2:	2182      	movs	r1, #130	@ 0x82
 80215c4:	0018      	movs	r0, r3
 80215c6:	f002 f897 	bl	80236f8 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 80215ca:	687b      	ldr	r3, [r7, #4]
 80215cc:	2200      	movs	r2, #0
 80215ce:	641a      	str	r2, [r3, #64]	@ 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 80215d0:	687a      	ldr	r2, [r7, #4]
 80215d2:	23ae      	movs	r3, #174	@ 0xae
 80215d4:	009b      	lsls	r3, r3, #2
 80215d6:	58d3      	ldr	r3, [r2, r3]
 80215d8:	2b00      	cmp	r3, #0
 80215da:	d011      	beq.n	8021600 <USBD_CDC_DeInit+0x7a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 80215dc:	687a      	ldr	r2, [r7, #4]
 80215de:	23af      	movs	r3, #175	@ 0xaf
 80215e0:	009b      	lsls	r3, r3, #2
 80215e2:	58d3      	ldr	r3, [r2, r3]
 80215e4:	685b      	ldr	r3, [r3, #4]
 80215e6:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 80215e8:	687a      	ldr	r2, [r7, #4]
 80215ea:	23ae      	movs	r3, #174	@ 0xae
 80215ec:	009b      	lsls	r3, r3, #2
 80215ee:	58d3      	ldr	r3, [r2, r3]
 80215f0:	0018      	movs	r0, r3
 80215f2:	f002 f9ef 	bl	80239d4 <USBD_static_free>
    pdev->pClassData = NULL;
 80215f6:	687a      	ldr	r2, [r7, #4]
 80215f8:	23ae      	movs	r3, #174	@ 0xae
 80215fa:	009b      	lsls	r3, r3, #2
 80215fc:	2100      	movs	r1, #0
 80215fe:	50d1      	str	r1, [r2, r3]
  }

  return ret;
 8021600:	230f      	movs	r3, #15
 8021602:	18fb      	adds	r3, r7, r3
 8021604:	781b      	ldrb	r3, [r3, #0]
}
 8021606:	0018      	movs	r0, r3
 8021608:	46bd      	mov	sp, r7
 802160a:	b004      	add	sp, #16
 802160c:	bd80      	pop	{r7, pc}
	...

08021610 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8021610:	b580      	push	{r7, lr}
 8021612:	b086      	sub	sp, #24
 8021614:	af00      	add	r7, sp, #0
 8021616:	6078      	str	r0, [r7, #4]
 8021618:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 802161a:	687a      	ldr	r2, [r7, #4]
 802161c:	23ae      	movs	r3, #174	@ 0xae
 802161e:	009b      	lsls	r3, r3, #2
 8021620:	58d3      	ldr	r3, [r2, r3]
 8021622:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8021624:	230f      	movs	r3, #15
 8021626:	18fb      	adds	r3, r7, r3
 8021628:	2200      	movs	r2, #0
 802162a:	701a      	strb	r2, [r3, #0]
  uint16_t status_info = 0U;
 802162c:	230c      	movs	r3, #12
 802162e:	18fb      	adds	r3, r7, r3
 8021630:	2200      	movs	r2, #0
 8021632:	801a      	strh	r2, [r3, #0]
  uint8_t ret = USBD_OK;
 8021634:	2317      	movs	r3, #23
 8021636:	18fb      	adds	r3, r7, r3
 8021638:	2200      	movs	r2, #0
 802163a:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 802163c:	683b      	ldr	r3, [r7, #0]
 802163e:	781b      	ldrb	r3, [r3, #0]
 8021640:	001a      	movs	r2, r3
 8021642:	2360      	movs	r3, #96	@ 0x60
 8021644:	4013      	ands	r3, r2
 8021646:	d03d      	beq.n	80216c4 <USBD_CDC_Setup+0xb4>
 8021648:	2b20      	cmp	r3, #32
 802164a:	d000      	beq.n	802164e <USBD_CDC_Setup+0x3e>
 802164c:	e094      	b.n	8021778 <USBD_CDC_Setup+0x168>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 802164e:	683b      	ldr	r3, [r7, #0]
 8021650:	88db      	ldrh	r3, [r3, #6]
 8021652:	2b00      	cmp	r3, #0
 8021654:	d02b      	beq.n	80216ae <USBD_CDC_Setup+0x9e>
      {
        if (req->bmRequest & 0x80U)
 8021656:	683b      	ldr	r3, [r7, #0]
 8021658:	781b      	ldrb	r3, [r3, #0]
 802165a:	b25b      	sxtb	r3, r3
 802165c:	2b00      	cmp	r3, #0
 802165e:	da12      	bge.n	8021686 <USBD_CDC_Setup+0x76>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8021660:	687a      	ldr	r2, [r7, #4]
 8021662:	23af      	movs	r3, #175	@ 0xaf
 8021664:	009b      	lsls	r3, r3, #2
 8021666:	58d3      	ldr	r3, [r2, r3]
 8021668:	689b      	ldr	r3, [r3, #8]
 802166a:	683a      	ldr	r2, [r7, #0]
 802166c:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 802166e:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8021670:	683a      	ldr	r2, [r7, #0]
 8021672:	88d2      	ldrh	r2, [r2, #6]
 8021674:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8021676:	6939      	ldr	r1, [r7, #16]
 8021678:	683b      	ldr	r3, [r7, #0]
 802167a:	88da      	ldrh	r2, [r3, #6]
 802167c:	687b      	ldr	r3, [r7, #4]
 802167e:	0018      	movs	r0, r3
 8021680:	f001 fbaf 	bl	8022de2 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8021684:	e083      	b.n	802178e <USBD_CDC_Setup+0x17e>
          hcdc->CmdOpCode = req->bRequest;
 8021686:	683b      	ldr	r3, [r7, #0]
 8021688:	7859      	ldrb	r1, [r3, #1]
 802168a:	693a      	ldr	r2, [r7, #16]
 802168c:	2380      	movs	r3, #128	@ 0x80
 802168e:	009b      	lsls	r3, r3, #2
 8021690:	54d1      	strb	r1, [r2, r3]
          hcdc->CmdLength = (uint8_t)req->wLength;
 8021692:	683b      	ldr	r3, [r7, #0]
 8021694:	88db      	ldrh	r3, [r3, #6]
 8021696:	b2d9      	uxtb	r1, r3
 8021698:	693b      	ldr	r3, [r7, #16]
 802169a:	4a40      	ldr	r2, [pc, #256]	@ (802179c <USBD_CDC_Setup+0x18c>)
 802169c:	5499      	strb	r1, [r3, r2]
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 802169e:	6939      	ldr	r1, [r7, #16]
 80216a0:	683b      	ldr	r3, [r7, #0]
 80216a2:	88da      	ldrh	r2, [r3, #6]
 80216a4:	687b      	ldr	r3, [r7, #4]
 80216a6:	0018      	movs	r0, r3
 80216a8:	f001 fbce 	bl	8022e48 <USBD_CtlPrepareRx>
      break;
 80216ac:	e06f      	b.n	802178e <USBD_CDC_Setup+0x17e>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80216ae:	687a      	ldr	r2, [r7, #4]
 80216b0:	23af      	movs	r3, #175	@ 0xaf
 80216b2:	009b      	lsls	r3, r3, #2
 80216b4:	58d3      	ldr	r3, [r2, r3]
 80216b6:	689b      	ldr	r3, [r3, #8]
 80216b8:	683a      	ldr	r2, [r7, #0]
 80216ba:	7850      	ldrb	r0, [r2, #1]
 80216bc:	6839      	ldr	r1, [r7, #0]
 80216be:	2200      	movs	r2, #0
 80216c0:	4798      	blx	r3
      break;
 80216c2:	e064      	b.n	802178e <USBD_CDC_Setup+0x17e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80216c4:	683b      	ldr	r3, [r7, #0]
 80216c6:	785b      	ldrb	r3, [r3, #1]
 80216c8:	2b0b      	cmp	r3, #11
 80216ca:	d037      	beq.n	802173c <USBD_CDC_Setup+0x12c>
 80216cc:	dc47      	bgt.n	802175e <USBD_CDC_Setup+0x14e>
 80216ce:	2b00      	cmp	r3, #0
 80216d0:	d002      	beq.n	80216d8 <USBD_CDC_Setup+0xc8>
 80216d2:	2b0a      	cmp	r3, #10
 80216d4:	d019      	beq.n	802170a <USBD_CDC_Setup+0xfa>
 80216d6:	e042      	b.n	802175e <USBD_CDC_Setup+0x14e>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80216d8:	687a      	ldr	r2, [r7, #4]
 80216da:	23a7      	movs	r3, #167	@ 0xa7
 80216dc:	009b      	lsls	r3, r3, #2
 80216de:	5cd3      	ldrb	r3, [r2, r3]
 80216e0:	2b03      	cmp	r3, #3
 80216e2:	d107      	bne.n	80216f4 <USBD_CDC_Setup+0xe4>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 80216e4:	230c      	movs	r3, #12
 80216e6:	18f9      	adds	r1, r7, r3
 80216e8:	687b      	ldr	r3, [r7, #4]
 80216ea:	2202      	movs	r2, #2
 80216ec:	0018      	movs	r0, r3
 80216ee:	f001 fb78 	bl	8022de2 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80216f2:	e040      	b.n	8021776 <USBD_CDC_Setup+0x166>
            USBD_CtlError(pdev, req);
 80216f4:	683a      	ldr	r2, [r7, #0]
 80216f6:	687b      	ldr	r3, [r7, #4]
 80216f8:	0011      	movs	r1, r2
 80216fa:	0018      	movs	r0, r3
 80216fc:	f001 faf3 	bl	8022ce6 <USBD_CtlError>
            ret = USBD_FAIL;
 8021700:	2317      	movs	r3, #23
 8021702:	18fb      	adds	r3, r7, r3
 8021704:	2202      	movs	r2, #2
 8021706:	701a      	strb	r2, [r3, #0]
          break;
 8021708:	e035      	b.n	8021776 <USBD_CDC_Setup+0x166>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 802170a:	687a      	ldr	r2, [r7, #4]
 802170c:	23a7      	movs	r3, #167	@ 0xa7
 802170e:	009b      	lsls	r3, r3, #2
 8021710:	5cd3      	ldrb	r3, [r2, r3]
 8021712:	2b03      	cmp	r3, #3
 8021714:	d107      	bne.n	8021726 <USBD_CDC_Setup+0x116>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8021716:	230f      	movs	r3, #15
 8021718:	18f9      	adds	r1, r7, r3
 802171a:	687b      	ldr	r3, [r7, #4]
 802171c:	2201      	movs	r2, #1
 802171e:	0018      	movs	r0, r3
 8021720:	f001 fb5f 	bl	8022de2 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8021724:	e027      	b.n	8021776 <USBD_CDC_Setup+0x166>
            USBD_CtlError(pdev, req);
 8021726:	683a      	ldr	r2, [r7, #0]
 8021728:	687b      	ldr	r3, [r7, #4]
 802172a:	0011      	movs	r1, r2
 802172c:	0018      	movs	r0, r3
 802172e:	f001 fada 	bl	8022ce6 <USBD_CtlError>
            ret = USBD_FAIL;
 8021732:	2317      	movs	r3, #23
 8021734:	18fb      	adds	r3, r7, r3
 8021736:	2202      	movs	r2, #2
 8021738:	701a      	strb	r2, [r3, #0]
          break;
 802173a:	e01c      	b.n	8021776 <USBD_CDC_Setup+0x166>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 802173c:	687a      	ldr	r2, [r7, #4]
 802173e:	23a7      	movs	r3, #167	@ 0xa7
 8021740:	009b      	lsls	r3, r3, #2
 8021742:	5cd3      	ldrb	r3, [r2, r3]
 8021744:	2b03      	cmp	r3, #3
 8021746:	d015      	beq.n	8021774 <USBD_CDC_Setup+0x164>
          {
            USBD_CtlError(pdev, req);
 8021748:	683a      	ldr	r2, [r7, #0]
 802174a:	687b      	ldr	r3, [r7, #4]
 802174c:	0011      	movs	r1, r2
 802174e:	0018      	movs	r0, r3
 8021750:	f001 fac9 	bl	8022ce6 <USBD_CtlError>
            ret = USBD_FAIL;
 8021754:	2317      	movs	r3, #23
 8021756:	18fb      	adds	r3, r7, r3
 8021758:	2202      	movs	r2, #2
 802175a:	701a      	strb	r2, [r3, #0]
          }
          break;
 802175c:	e00a      	b.n	8021774 <USBD_CDC_Setup+0x164>

        default:
          USBD_CtlError(pdev, req);
 802175e:	683a      	ldr	r2, [r7, #0]
 8021760:	687b      	ldr	r3, [r7, #4]
 8021762:	0011      	movs	r1, r2
 8021764:	0018      	movs	r0, r3
 8021766:	f001 fabe 	bl	8022ce6 <USBD_CtlError>
          ret = USBD_FAIL;
 802176a:	2317      	movs	r3, #23
 802176c:	18fb      	adds	r3, r7, r3
 802176e:	2202      	movs	r2, #2
 8021770:	701a      	strb	r2, [r3, #0]
          break;
 8021772:	e000      	b.n	8021776 <USBD_CDC_Setup+0x166>
          break;
 8021774:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 8021776:	e00a      	b.n	802178e <USBD_CDC_Setup+0x17e>

    default:
      USBD_CtlError(pdev, req);
 8021778:	683a      	ldr	r2, [r7, #0]
 802177a:	687b      	ldr	r3, [r7, #4]
 802177c:	0011      	movs	r1, r2
 802177e:	0018      	movs	r0, r3
 8021780:	f001 fab1 	bl	8022ce6 <USBD_CtlError>
      ret = USBD_FAIL;
 8021784:	2317      	movs	r3, #23
 8021786:	18fb      	adds	r3, r7, r3
 8021788:	2202      	movs	r2, #2
 802178a:	701a      	strb	r2, [r3, #0]
      break;
 802178c:	46c0      	nop			@ (mov r8, r8)
  }

  return ret;
 802178e:	2317      	movs	r3, #23
 8021790:	18fb      	adds	r3, r7, r3
 8021792:	781b      	ldrb	r3, [r3, #0]
}
 8021794:	0018      	movs	r0, r3
 8021796:	46bd      	mov	sp, r7
 8021798:	b006      	add	sp, #24
 802179a:	bd80      	pop	{r7, pc}
 802179c:	00000201 	.word	0x00000201

080217a0 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80217a0:	b580      	push	{r7, lr}
 80217a2:	b084      	sub	sp, #16
 80217a4:	af00      	add	r7, sp, #0
 80217a6:	6078      	str	r0, [r7, #4]
 80217a8:	000a      	movs	r2, r1
 80217aa:	1cfb      	adds	r3, r7, #3
 80217ac:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80217ae:	687a      	ldr	r2, [r7, #4]
 80217b0:	23ae      	movs	r3, #174	@ 0xae
 80217b2:	009b      	lsls	r3, r3, #2
 80217b4:	58d3      	ldr	r3, [r2, r3]
 80217b6:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 80217b8:	687a      	ldr	r2, [r7, #4]
 80217ba:	23b0      	movs	r3, #176	@ 0xb0
 80217bc:	009b      	lsls	r3, r3, #2
 80217be:	58d3      	ldr	r3, [r2, r3]
 80217c0:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 80217c2:	687a      	ldr	r2, [r7, #4]
 80217c4:	23ae      	movs	r3, #174	@ 0xae
 80217c6:	009b      	lsls	r3, r3, #2
 80217c8:	58d3      	ldr	r3, [r2, r3]
 80217ca:	2b00      	cmp	r3, #0
 80217cc:	d03e      	beq.n	802184c <USBD_CDC_DataIn+0xac>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 80217ce:	1cfb      	adds	r3, r7, #3
 80217d0:	781a      	ldrb	r2, [r3, #0]
 80217d2:	6879      	ldr	r1, [r7, #4]
 80217d4:	0013      	movs	r3, r2
 80217d6:	009b      	lsls	r3, r3, #2
 80217d8:	189b      	adds	r3, r3, r2
 80217da:	009b      	lsls	r3, r3, #2
 80217dc:	18cb      	adds	r3, r1, r3
 80217de:	331c      	adds	r3, #28
 80217e0:	681b      	ldr	r3, [r3, #0]
 80217e2:	2b00      	cmp	r3, #0
 80217e4:	d02b      	beq.n	802183e <USBD_CDC_DataIn+0x9e>
 80217e6:	1cfb      	adds	r3, r7, #3
 80217e8:	781a      	ldrb	r2, [r3, #0]
 80217ea:	6879      	ldr	r1, [r7, #4]
 80217ec:	0013      	movs	r3, r2
 80217ee:	009b      	lsls	r3, r3, #2
 80217f0:	189b      	adds	r3, r3, r2
 80217f2:	009b      	lsls	r3, r3, #2
 80217f4:	18cb      	adds	r3, r1, r3
 80217f6:	331c      	adds	r3, #28
 80217f8:	6818      	ldr	r0, [r3, #0]
 80217fa:	1cfb      	adds	r3, r7, #3
 80217fc:	781a      	ldrb	r2, [r3, #0]
 80217fe:	68b9      	ldr	r1, [r7, #8]
 8021800:	0013      	movs	r3, r2
 8021802:	009b      	lsls	r3, r3, #2
 8021804:	189b      	adds	r3, r3, r2
 8021806:	00db      	lsls	r3, r3, #3
 8021808:	18cb      	adds	r3, r1, r3
 802180a:	3338      	adds	r3, #56	@ 0x38
 802180c:	681b      	ldr	r3, [r3, #0]
 802180e:	0019      	movs	r1, r3
 8021810:	f7de fd4e 	bl	80002b0 <__aeabi_uidivmod>
 8021814:	1e0b      	subs	r3, r1, #0
 8021816:	d112      	bne.n	802183e <USBD_CDC_DataIn+0x9e>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8021818:	1cfb      	adds	r3, r7, #3
 802181a:	781a      	ldrb	r2, [r3, #0]
 802181c:	6879      	ldr	r1, [r7, #4]
 802181e:	0013      	movs	r3, r2
 8021820:	009b      	lsls	r3, r3, #2
 8021822:	189b      	adds	r3, r3, r2
 8021824:	009b      	lsls	r3, r3, #2
 8021826:	18cb      	adds	r3, r1, r3
 8021828:	331c      	adds	r3, #28
 802182a:	2200      	movs	r2, #0
 802182c:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 802182e:	1cfb      	adds	r3, r7, #3
 8021830:	7819      	ldrb	r1, [r3, #0]
 8021832:	6878      	ldr	r0, [r7, #4]
 8021834:	2300      	movs	r3, #0
 8021836:	2200      	movs	r2, #0
 8021838:	f002 f83b 	bl	80238b2 <USBD_LL_Transmit>
 802183c:	e004      	b.n	8021848 <USBD_CDC_DataIn+0xa8>
    }
    else
    {
      hcdc->TxState = 0U;
 802183e:	68fa      	ldr	r2, [r7, #12]
 8021840:	2385      	movs	r3, #133	@ 0x85
 8021842:	009b      	lsls	r3, r3, #2
 8021844:	2100      	movs	r1, #0
 8021846:	50d1      	str	r1, [r2, r3]
    }
    return USBD_OK;
 8021848:	2300      	movs	r3, #0
 802184a:	e000      	b.n	802184e <USBD_CDC_DataIn+0xae>
  }
  else
  {
    return USBD_FAIL;
 802184c:	2302      	movs	r3, #2
  }
}
 802184e:	0018      	movs	r0, r3
 8021850:	46bd      	mov	sp, r7
 8021852:	b004      	add	sp, #16
 8021854:	bd80      	pop	{r7, pc}

08021856 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8021856:	b580      	push	{r7, lr}
 8021858:	b084      	sub	sp, #16
 802185a:	af00      	add	r7, sp, #0
 802185c:	6078      	str	r0, [r7, #4]
 802185e:	000a      	movs	r2, r1
 8021860:	1cfb      	adds	r3, r7, #3
 8021862:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8021864:	687a      	ldr	r2, [r7, #4]
 8021866:	23ae      	movs	r3, #174	@ 0xae
 8021868:	009b      	lsls	r3, r3, #2
 802186a:	58d3      	ldr	r3, [r2, r3]
 802186c:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 802186e:	1cfb      	adds	r3, r7, #3
 8021870:	781a      	ldrb	r2, [r3, #0]
 8021872:	687b      	ldr	r3, [r7, #4]
 8021874:	0011      	movs	r1, r2
 8021876:	0018      	movs	r0, r3
 8021878:	f002 f889 	bl	802398e <USBD_LL_GetRxDataSize>
 802187c:	0001      	movs	r1, r0
 802187e:	68fa      	ldr	r2, [r7, #12]
 8021880:	2383      	movs	r3, #131	@ 0x83
 8021882:	009b      	lsls	r3, r3, #2
 8021884:	50d1      	str	r1, [r2, r3]

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8021886:	687a      	ldr	r2, [r7, #4]
 8021888:	23ae      	movs	r3, #174	@ 0xae
 802188a:	009b      	lsls	r3, r3, #2
 802188c:	58d3      	ldr	r3, [r2, r3]
 802188e:	2b00      	cmp	r3, #0
 8021890:	d011      	beq.n	80218b6 <USBD_CDC_DataOut+0x60>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8021892:	687a      	ldr	r2, [r7, #4]
 8021894:	23af      	movs	r3, #175	@ 0xaf
 8021896:	009b      	lsls	r3, r3, #2
 8021898:	58d3      	ldr	r3, [r2, r3]
 802189a:	68da      	ldr	r2, [r3, #12]
 802189c:	68f9      	ldr	r1, [r7, #12]
 802189e:	2381      	movs	r3, #129	@ 0x81
 80218a0:	009b      	lsls	r3, r3, #2
 80218a2:	58c8      	ldr	r0, [r1, r3]
 80218a4:	68fb      	ldr	r3, [r7, #12]
 80218a6:	2183      	movs	r1, #131	@ 0x83
 80218a8:	0089      	lsls	r1, r1, #2
 80218aa:	468c      	mov	ip, r1
 80218ac:	4463      	add	r3, ip
 80218ae:	0019      	movs	r1, r3
 80218b0:	4790      	blx	r2

    return USBD_OK;
 80218b2:	2300      	movs	r3, #0
 80218b4:	e000      	b.n	80218b8 <USBD_CDC_DataOut+0x62>
  }
  else
  {
    return USBD_FAIL;
 80218b6:	2302      	movs	r3, #2
  }
}
 80218b8:	0018      	movs	r0, r3
 80218ba:	46bd      	mov	sp, r7
 80218bc:	b004      	add	sp, #16
 80218be:	bd80      	pop	{r7, pc}

080218c0 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80218c0:	b590      	push	{r4, r7, lr}
 80218c2:	b085      	sub	sp, #20
 80218c4:	af00      	add	r7, sp, #0
 80218c6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80218c8:	687a      	ldr	r2, [r7, #4]
 80218ca:	23ae      	movs	r3, #174	@ 0xae
 80218cc:	009b      	lsls	r3, r3, #2
 80218ce:	58d3      	ldr	r3, [r2, r3]
 80218d0:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80218d2:	687a      	ldr	r2, [r7, #4]
 80218d4:	23af      	movs	r3, #175	@ 0xaf
 80218d6:	009b      	lsls	r3, r3, #2
 80218d8:	58d3      	ldr	r3, [r2, r3]
 80218da:	2b00      	cmp	r3, #0
 80218dc:	d018      	beq.n	8021910 <USBD_CDC_EP0_RxReady+0x50>
 80218de:	68fa      	ldr	r2, [r7, #12]
 80218e0:	2380      	movs	r3, #128	@ 0x80
 80218e2:	009b      	lsls	r3, r3, #2
 80218e4:	5cd3      	ldrb	r3, [r2, r3]
 80218e6:	2bff      	cmp	r3, #255	@ 0xff
 80218e8:	d012      	beq.n	8021910 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80218ea:	687a      	ldr	r2, [r7, #4]
 80218ec:	23af      	movs	r3, #175	@ 0xaf
 80218ee:	009b      	lsls	r3, r3, #2
 80218f0:	58d3      	ldr	r3, [r2, r3]
 80218f2:	689b      	ldr	r3, [r3, #8]
 80218f4:	68f9      	ldr	r1, [r7, #12]
 80218f6:	2280      	movs	r2, #128	@ 0x80
 80218f8:	0092      	lsls	r2, r2, #2
 80218fa:	5c88      	ldrb	r0, [r1, r2]
                                                      (uint8_t *)(void *)hcdc->data,
 80218fc:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 80218fe:	68fa      	ldr	r2, [r7, #12]
 8021900:	4c06      	ldr	r4, [pc, #24]	@ (802191c <USBD_CDC_EP0_RxReady+0x5c>)
 8021902:	5d12      	ldrb	r2, [r2, r4]
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8021904:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8021906:	68fa      	ldr	r2, [r7, #12]
 8021908:	2380      	movs	r3, #128	@ 0x80
 802190a:	009b      	lsls	r3, r3, #2
 802190c:	21ff      	movs	r1, #255	@ 0xff
 802190e:	54d1      	strb	r1, [r2, r3]

  }
  return USBD_OK;
 8021910:	2300      	movs	r3, #0
}
 8021912:	0018      	movs	r0, r3
 8021914:	46bd      	mov	sp, r7
 8021916:	b005      	add	sp, #20
 8021918:	bd90      	pop	{r4, r7, pc}
 802191a:	46c0      	nop			@ (mov r8, r8)
 802191c:	00000201 	.word	0x00000201

08021920 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8021920:	b580      	push	{r7, lr}
 8021922:	b082      	sub	sp, #8
 8021924:	af00      	add	r7, sp, #0
 8021926:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8021928:	687b      	ldr	r3, [r7, #4]
 802192a:	2243      	movs	r2, #67	@ 0x43
 802192c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 802192e:	4b02      	ldr	r3, [pc, #8]	@ (8021938 <USBD_CDC_GetFSCfgDesc+0x18>)
}
 8021930:	0018      	movs	r0, r3
 8021932:	46bd      	mov	sp, r7
 8021934:	b002      	add	sp, #8
 8021936:	bd80      	pop	{r7, pc}
 8021938:	2000018c 	.word	0x2000018c

0802193c <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 802193c:	b580      	push	{r7, lr}
 802193e:	b082      	sub	sp, #8
 8021940:	af00      	add	r7, sp, #0
 8021942:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8021944:	687b      	ldr	r3, [r7, #4]
 8021946:	2243      	movs	r2, #67	@ 0x43
 8021948:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 802194a:	4b02      	ldr	r3, [pc, #8]	@ (8021954 <USBD_CDC_GetHSCfgDesc+0x18>)
}
 802194c:	0018      	movs	r0, r3
 802194e:	46bd      	mov	sp, r7
 8021950:	b002      	add	sp, #8
 8021952:	bd80      	pop	{r7, pc}
 8021954:	20000148 	.word	0x20000148

08021958 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8021958:	b580      	push	{r7, lr}
 802195a:	b082      	sub	sp, #8
 802195c:	af00      	add	r7, sp, #0
 802195e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8021960:	687b      	ldr	r3, [r7, #4]
 8021962:	2243      	movs	r2, #67	@ 0x43
 8021964:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8021966:	4b02      	ldr	r3, [pc, #8]	@ (8021970 <USBD_CDC_GetOtherSpeedCfgDesc+0x18>)
}
 8021968:	0018      	movs	r0, r3
 802196a:	46bd      	mov	sp, r7
 802196c:	b002      	add	sp, #8
 802196e:	bd80      	pop	{r7, pc}
 8021970:	200001d0 	.word	0x200001d0

08021974 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8021974:	b580      	push	{r7, lr}
 8021976:	b082      	sub	sp, #8
 8021978:	af00      	add	r7, sp, #0
 802197a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 802197c:	687b      	ldr	r3, [r7, #4]
 802197e:	220a      	movs	r2, #10
 8021980:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8021982:	4b02      	ldr	r3, [pc, #8]	@ (802198c <USBD_CDC_GetDeviceQualifierDescriptor+0x18>)
}
 8021984:	0018      	movs	r0, r3
 8021986:	46bd      	mov	sp, r7
 8021988:	b002      	add	sp, #8
 802198a:	bd80      	pop	{r7, pc}
 802198c:	20000104 	.word	0x20000104

08021990 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8021990:	b580      	push	{r7, lr}
 8021992:	b084      	sub	sp, #16
 8021994:	af00      	add	r7, sp, #0
 8021996:	6078      	str	r0, [r7, #4]
 8021998:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 802199a:	200f      	movs	r0, #15
 802199c:	183b      	adds	r3, r7, r0
 802199e:	2202      	movs	r2, #2
 80219a0:	701a      	strb	r2, [r3, #0]

  if (fops != NULL)
 80219a2:	683b      	ldr	r3, [r7, #0]
 80219a4:	2b00      	cmp	r3, #0
 80219a6:	d007      	beq.n	80219b8 <USBD_CDC_RegisterInterface+0x28>
  {
    pdev->pUserData = fops;
 80219a8:	687a      	ldr	r2, [r7, #4]
 80219aa:	23af      	movs	r3, #175	@ 0xaf
 80219ac:	009b      	lsls	r3, r3, #2
 80219ae:	6839      	ldr	r1, [r7, #0]
 80219b0:	50d1      	str	r1, [r2, r3]
    ret = USBD_OK;
 80219b2:	183b      	adds	r3, r7, r0
 80219b4:	2200      	movs	r2, #0
 80219b6:	701a      	strb	r2, [r3, #0]
  }

  return ret;
 80219b8:	230f      	movs	r3, #15
 80219ba:	18fb      	adds	r3, r7, r3
 80219bc:	781b      	ldrb	r3, [r3, #0]
}
 80219be:	0018      	movs	r0, r3
 80219c0:	46bd      	mov	sp, r7
 80219c2:	b004      	add	sp, #16
 80219c4:	bd80      	pop	{r7, pc}

080219c6 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 80219c6:	b580      	push	{r7, lr}
 80219c8:	b086      	sub	sp, #24
 80219ca:	af00      	add	r7, sp, #0
 80219cc:	60f8      	str	r0, [r7, #12]
 80219ce:	60b9      	str	r1, [r7, #8]
 80219d0:	1dbb      	adds	r3, r7, #6
 80219d2:	801a      	strh	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80219d4:	68fa      	ldr	r2, [r7, #12]
 80219d6:	23ae      	movs	r3, #174	@ 0xae
 80219d8:	009b      	lsls	r3, r3, #2
 80219da:	58d3      	ldr	r3, [r2, r3]
 80219dc:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 80219de:	697a      	ldr	r2, [r7, #20]
 80219e0:	2382      	movs	r3, #130	@ 0x82
 80219e2:	009b      	lsls	r3, r3, #2
 80219e4:	68b9      	ldr	r1, [r7, #8]
 80219e6:	50d1      	str	r1, [r2, r3]
  hcdc->TxLength = length;
 80219e8:	1dbb      	adds	r3, r7, #6
 80219ea:	8819      	ldrh	r1, [r3, #0]
 80219ec:	697a      	ldr	r2, [r7, #20]
 80219ee:	2384      	movs	r3, #132	@ 0x84
 80219f0:	009b      	lsls	r3, r3, #2
 80219f2:	50d1      	str	r1, [r2, r3]

  return USBD_OK;
 80219f4:	2300      	movs	r3, #0
}
 80219f6:	0018      	movs	r0, r3
 80219f8:	46bd      	mov	sp, r7
 80219fa:	b006      	add	sp, #24
 80219fc:	bd80      	pop	{r7, pc}

080219fe <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 80219fe:	b580      	push	{r7, lr}
 8021a00:	b084      	sub	sp, #16
 8021a02:	af00      	add	r7, sp, #0
 8021a04:	6078      	str	r0, [r7, #4]
 8021a06:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8021a08:	687a      	ldr	r2, [r7, #4]
 8021a0a:	23ae      	movs	r3, #174	@ 0xae
 8021a0c:	009b      	lsls	r3, r3, #2
 8021a0e:	58d3      	ldr	r3, [r2, r3]
 8021a10:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8021a12:	68fa      	ldr	r2, [r7, #12]
 8021a14:	2381      	movs	r3, #129	@ 0x81
 8021a16:	009b      	lsls	r3, r3, #2
 8021a18:	6839      	ldr	r1, [r7, #0]
 8021a1a:	50d1      	str	r1, [r2, r3]

  return USBD_OK;
 8021a1c:	2300      	movs	r3, #0
}
 8021a1e:	0018      	movs	r0, r3
 8021a20:	46bd      	mov	sp, r7
 8021a22:	b004      	add	sp, #16
 8021a24:	bd80      	pop	{r7, pc}

08021a26 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8021a26:	b580      	push	{r7, lr}
 8021a28:	b084      	sub	sp, #16
 8021a2a:	af00      	add	r7, sp, #0
 8021a2c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8021a2e:	687a      	ldr	r2, [r7, #4]
 8021a30:	23ae      	movs	r3, #174	@ 0xae
 8021a32:	009b      	lsls	r3, r3, #2
 8021a34:	58d3      	ldr	r3, [r2, r3]
 8021a36:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 8021a38:	687a      	ldr	r2, [r7, #4]
 8021a3a:	23ae      	movs	r3, #174	@ 0xae
 8021a3c:	009b      	lsls	r3, r3, #2
 8021a3e:	58d3      	ldr	r3, [r2, r3]
 8021a40:	2b00      	cmp	r3, #0
 8021a42:	d022      	beq.n	8021a8a <USBD_CDC_TransmitPacket+0x64>
  {
    if (hcdc->TxState == 0U)
 8021a44:	68fa      	ldr	r2, [r7, #12]
 8021a46:	2385      	movs	r3, #133	@ 0x85
 8021a48:	009b      	lsls	r3, r3, #2
 8021a4a:	58d3      	ldr	r3, [r2, r3]
 8021a4c:	2b00      	cmp	r3, #0
 8021a4e:	d11a      	bne.n	8021a86 <USBD_CDC_TransmitPacket+0x60>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8021a50:	68fa      	ldr	r2, [r7, #12]
 8021a52:	2385      	movs	r3, #133	@ 0x85
 8021a54:	009b      	lsls	r3, r3, #2
 8021a56:	2101      	movs	r1, #1
 8021a58:	50d1      	str	r1, [r2, r3]

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8021a5a:	68fa      	ldr	r2, [r7, #12]
 8021a5c:	2384      	movs	r3, #132	@ 0x84
 8021a5e:	009b      	lsls	r3, r3, #2
 8021a60:	58d2      	ldr	r2, [r2, r3]
 8021a62:	687b      	ldr	r3, [r7, #4]
 8021a64:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8021a66:	68fa      	ldr	r2, [r7, #12]
 8021a68:	2382      	movs	r3, #130	@ 0x82
 8021a6a:	009b      	lsls	r3, r3, #2
 8021a6c:	58d1      	ldr	r1, [r2, r3]
                       (uint16_t)hcdc->TxLength);
 8021a6e:	68fa      	ldr	r2, [r7, #12]
 8021a70:	2384      	movs	r3, #132	@ 0x84
 8021a72:	009b      	lsls	r3, r3, #2
 8021a74:	58d3      	ldr	r3, [r2, r3]
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8021a76:	b29b      	uxth	r3, r3
 8021a78:	6878      	ldr	r0, [r7, #4]
 8021a7a:	000a      	movs	r2, r1
 8021a7c:	2181      	movs	r1, #129	@ 0x81
 8021a7e:	f001 ff18 	bl	80238b2 <USBD_LL_Transmit>

      return USBD_OK;
 8021a82:	2300      	movs	r3, #0
 8021a84:	e002      	b.n	8021a8c <USBD_CDC_TransmitPacket+0x66>
    }
    else
    {
      return USBD_BUSY;
 8021a86:	2301      	movs	r3, #1
 8021a88:	e000      	b.n	8021a8c <USBD_CDC_TransmitPacket+0x66>
    }
  }
  else
  {
    return USBD_FAIL;
 8021a8a:	2302      	movs	r3, #2
  }
}
 8021a8c:	0018      	movs	r0, r3
 8021a8e:	46bd      	mov	sp, r7
 8021a90:	b004      	add	sp, #16
 8021a92:	bd80      	pop	{r7, pc}

08021a94 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8021a94:	b580      	push	{r7, lr}
 8021a96:	b084      	sub	sp, #16
 8021a98:	af00      	add	r7, sp, #0
 8021a9a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8021a9c:	687a      	ldr	r2, [r7, #4]
 8021a9e:	23ae      	movs	r3, #174	@ 0xae
 8021aa0:	009b      	lsls	r3, r3, #2
 8021aa2:	58d3      	ldr	r3, [r2, r3]
 8021aa4:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8021aa6:	687a      	ldr	r2, [r7, #4]
 8021aa8:	23ae      	movs	r3, #174	@ 0xae
 8021aaa:	009b      	lsls	r3, r3, #2
 8021aac:	58d3      	ldr	r3, [r2, r3]
 8021aae:	2b00      	cmp	r3, #0
 8021ab0:	d019      	beq.n	8021ae6 <USBD_CDC_ReceivePacket+0x52>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8021ab2:	687b      	ldr	r3, [r7, #4]
 8021ab4:	7c1b      	ldrb	r3, [r3, #16]
 8021ab6:	2b00      	cmp	r3, #0
 8021ab8:	d10a      	bne.n	8021ad0 <USBD_CDC_ReceivePacket+0x3c>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8021aba:	68fa      	ldr	r2, [r7, #12]
 8021abc:	2381      	movs	r3, #129	@ 0x81
 8021abe:	009b      	lsls	r3, r3, #2
 8021ac0:	58d2      	ldr	r2, [r2, r3]
 8021ac2:	2380      	movs	r3, #128	@ 0x80
 8021ac4:	009b      	lsls	r3, r3, #2
 8021ac6:	6878      	ldr	r0, [r7, #4]
 8021ac8:	2101      	movs	r1, #1
 8021aca:	f001 ff29 	bl	8023920 <USBD_LL_PrepareReceive>
 8021ace:	e008      	b.n	8021ae2 <USBD_CDC_ReceivePacket+0x4e>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8021ad0:	68fa      	ldr	r2, [r7, #12]
 8021ad2:	2381      	movs	r3, #129	@ 0x81
 8021ad4:	009b      	lsls	r3, r3, #2
 8021ad6:	58d2      	ldr	r2, [r2, r3]
 8021ad8:	6878      	ldr	r0, [r7, #4]
 8021ada:	2340      	movs	r3, #64	@ 0x40
 8021adc:	2101      	movs	r1, #1
 8021ade:	f001 ff1f 	bl	8023920 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8021ae2:	2300      	movs	r3, #0
 8021ae4:	e000      	b.n	8021ae8 <USBD_CDC_ReceivePacket+0x54>
  }
  else
  {
    return USBD_FAIL;
 8021ae6:	2302      	movs	r3, #2
  }
}
 8021ae8:	0018      	movs	r0, r3
 8021aea:	46bd      	mov	sp, r7
 8021aec:	b004      	add	sp, #16
 8021aee:	bd80      	pop	{r7, pc}

08021af0 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8021af0:	b580      	push	{r7, lr}
 8021af2:	b084      	sub	sp, #16
 8021af4:	af00      	add	r7, sp, #0
 8021af6:	60f8      	str	r0, [r7, #12]
 8021af8:	60b9      	str	r1, [r7, #8]
 8021afa:	1dfb      	adds	r3, r7, #7
 8021afc:	701a      	strb	r2, [r3, #0]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8021afe:	68fb      	ldr	r3, [r7, #12]
 8021b00:	2b00      	cmp	r3, #0
 8021b02:	d101      	bne.n	8021b08 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8021b04:	2302      	movs	r3, #2
 8021b06:	e020      	b.n	8021b4a <USBD_Init+0x5a>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8021b08:	68fa      	ldr	r2, [r7, #12]
 8021b0a:	23ad      	movs	r3, #173	@ 0xad
 8021b0c:	009b      	lsls	r3, r3, #2
 8021b0e:	58d3      	ldr	r3, [r2, r3]
 8021b10:	2b00      	cmp	r3, #0
 8021b12:	d004      	beq.n	8021b1e <USBD_Init+0x2e>
  {
    pdev->pClass = NULL;
 8021b14:	68fa      	ldr	r2, [r7, #12]
 8021b16:	23ad      	movs	r3, #173	@ 0xad
 8021b18:	009b      	lsls	r3, r3, #2
 8021b1a:	2100      	movs	r1, #0
 8021b1c:	50d1      	str	r1, [r2, r3]
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8021b1e:	68bb      	ldr	r3, [r7, #8]
 8021b20:	2b00      	cmp	r3, #0
 8021b22:	d004      	beq.n	8021b2e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8021b24:	68fa      	ldr	r2, [r7, #12]
 8021b26:	23ac      	movs	r3, #172	@ 0xac
 8021b28:	009b      	lsls	r3, r3, #2
 8021b2a:	68b9      	ldr	r1, [r7, #8]
 8021b2c:	50d1      	str	r1, [r2, r3]
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8021b2e:	68fa      	ldr	r2, [r7, #12]
 8021b30:	23a7      	movs	r3, #167	@ 0xa7
 8021b32:	009b      	lsls	r3, r3, #2
 8021b34:	2101      	movs	r1, #1
 8021b36:	54d1      	strb	r1, [r2, r3]
  pdev->id = id;
 8021b38:	68fb      	ldr	r3, [r7, #12]
 8021b3a:	1dfa      	adds	r2, r7, #7
 8021b3c:	7812      	ldrb	r2, [r2, #0]
 8021b3e:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8021b40:	68fb      	ldr	r3, [r7, #12]
 8021b42:	0018      	movs	r0, r3
 8021b44:	f001 fd18 	bl	8023578 <USBD_LL_Init>

  return USBD_OK;
 8021b48:	2300      	movs	r3, #0
}
 8021b4a:	0018      	movs	r0, r3
 8021b4c:	46bd      	mov	sp, r7
 8021b4e:	b004      	add	sp, #16
 8021b50:	bd80      	pop	{r7, pc}

08021b52 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8021b52:	b580      	push	{r7, lr}
 8021b54:	b084      	sub	sp, #16
 8021b56:	af00      	add	r7, sp, #0
 8021b58:	6078      	str	r0, [r7, #4]
 8021b5a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8021b5c:	200f      	movs	r0, #15
 8021b5e:	183b      	adds	r3, r7, r0
 8021b60:	2200      	movs	r2, #0
 8021b62:	701a      	strb	r2, [r3, #0]
  if (pclass != NULL)
 8021b64:	683b      	ldr	r3, [r7, #0]
 8021b66:	2b00      	cmp	r3, #0
 8021b68:	d008      	beq.n	8021b7c <USBD_RegisterClass+0x2a>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8021b6a:	687a      	ldr	r2, [r7, #4]
 8021b6c:	23ad      	movs	r3, #173	@ 0xad
 8021b6e:	009b      	lsls	r3, r3, #2
 8021b70:	6839      	ldr	r1, [r7, #0]
 8021b72:	50d1      	str	r1, [r2, r3]
    status = USBD_OK;
 8021b74:	183b      	adds	r3, r7, r0
 8021b76:	2200      	movs	r2, #0
 8021b78:	701a      	strb	r2, [r3, #0]
 8021b7a:	e003      	b.n	8021b84 <USBD_RegisterClass+0x32>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8021b7c:	230f      	movs	r3, #15
 8021b7e:	18fb      	adds	r3, r7, r3
 8021b80:	2202      	movs	r2, #2
 8021b82:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8021b84:	230f      	movs	r3, #15
 8021b86:	18fb      	adds	r3, r7, r3
 8021b88:	781b      	ldrb	r3, [r3, #0]
}
 8021b8a:	0018      	movs	r0, r3
 8021b8c:	46bd      	mov	sp, r7
 8021b8e:	b004      	add	sp, #16
 8021b90:	bd80      	pop	{r7, pc}

08021b92 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8021b92:	b580      	push	{r7, lr}
 8021b94:	b082      	sub	sp, #8
 8021b96:	af00      	add	r7, sp, #0
 8021b98:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8021b9a:	687b      	ldr	r3, [r7, #4]
 8021b9c:	0018      	movs	r0, r3
 8021b9e:	f001 fd4f 	bl	8023640 <USBD_LL_Start>

  return USBD_OK;
 8021ba2:	2300      	movs	r3, #0
}
 8021ba4:	0018      	movs	r0, r3
 8021ba6:	46bd      	mov	sp, r7
 8021ba8:	b002      	add	sp, #8
 8021baa:	bd80      	pop	{r7, pc}

08021bac <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8021bac:	b580      	push	{r7, lr}
 8021bae:	b082      	sub	sp, #8
 8021bb0:	af00      	add	r7, sp, #0
 8021bb2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8021bb4:	2300      	movs	r3, #0
}
 8021bb6:	0018      	movs	r0, r3
 8021bb8:	46bd      	mov	sp, r7
 8021bba:	b002      	add	sp, #8
 8021bbc:	bd80      	pop	{r7, pc}

08021bbe <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8021bbe:	b590      	push	{r4, r7, lr}
 8021bc0:	b085      	sub	sp, #20
 8021bc2:	af00      	add	r7, sp, #0
 8021bc4:	6078      	str	r0, [r7, #4]
 8021bc6:	000a      	movs	r2, r1
 8021bc8:	1cfb      	adds	r3, r7, #3
 8021bca:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8021bcc:	240f      	movs	r4, #15
 8021bce:	193b      	adds	r3, r7, r4
 8021bd0:	2202      	movs	r2, #2
 8021bd2:	701a      	strb	r2, [r3, #0]

  if (pdev->pClass != NULL)
 8021bd4:	687a      	ldr	r2, [r7, #4]
 8021bd6:	23ad      	movs	r3, #173	@ 0xad
 8021bd8:	009b      	lsls	r3, r3, #2
 8021bda:	58d3      	ldr	r3, [r2, r3]
 8021bdc:	2b00      	cmp	r3, #0
 8021bde:	d00e      	beq.n	8021bfe <USBD_SetClassConfig+0x40>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8021be0:	687a      	ldr	r2, [r7, #4]
 8021be2:	23ad      	movs	r3, #173	@ 0xad
 8021be4:	009b      	lsls	r3, r3, #2
 8021be6:	58d3      	ldr	r3, [r2, r3]
 8021be8:	681b      	ldr	r3, [r3, #0]
 8021bea:	1cfa      	adds	r2, r7, #3
 8021bec:	7811      	ldrb	r1, [r2, #0]
 8021bee:	687a      	ldr	r2, [r7, #4]
 8021bf0:	0010      	movs	r0, r2
 8021bf2:	4798      	blx	r3
 8021bf4:	1e03      	subs	r3, r0, #0
 8021bf6:	d102      	bne.n	8021bfe <USBD_SetClassConfig+0x40>
    {
      ret = USBD_OK;
 8021bf8:	193b      	adds	r3, r7, r4
 8021bfa:	2200      	movs	r2, #0
 8021bfc:	701a      	strb	r2, [r3, #0]
    }
  }

  return ret;
 8021bfe:	230f      	movs	r3, #15
 8021c00:	18fb      	adds	r3, r7, r3
 8021c02:	781b      	ldrb	r3, [r3, #0]
}
 8021c04:	0018      	movs	r0, r3
 8021c06:	46bd      	mov	sp, r7
 8021c08:	b005      	add	sp, #20
 8021c0a:	bd90      	pop	{r4, r7, pc}

08021c0c <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8021c0c:	b580      	push	{r7, lr}
 8021c0e:	b082      	sub	sp, #8
 8021c10:	af00      	add	r7, sp, #0
 8021c12:	6078      	str	r0, [r7, #4]
 8021c14:	000a      	movs	r2, r1
 8021c16:	1cfb      	adds	r3, r7, #3
 8021c18:	701a      	strb	r2, [r3, #0]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8021c1a:	687a      	ldr	r2, [r7, #4]
 8021c1c:	23ad      	movs	r3, #173	@ 0xad
 8021c1e:	009b      	lsls	r3, r3, #2
 8021c20:	58d3      	ldr	r3, [r2, r3]
 8021c22:	685b      	ldr	r3, [r3, #4]
 8021c24:	1cfa      	adds	r2, r7, #3
 8021c26:	7811      	ldrb	r1, [r2, #0]
 8021c28:	687a      	ldr	r2, [r7, #4]
 8021c2a:	0010      	movs	r0, r2
 8021c2c:	4798      	blx	r3

  return USBD_OK;
 8021c2e:	2300      	movs	r3, #0
}
 8021c30:	0018      	movs	r0, r3
 8021c32:	46bd      	mov	sp, r7
 8021c34:	b002      	add	sp, #8
 8021c36:	bd80      	pop	{r7, pc}

08021c38 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8021c38:	b580      	push	{r7, lr}
 8021c3a:	b082      	sub	sp, #8
 8021c3c:	af00      	add	r7, sp, #0
 8021c3e:	6078      	str	r0, [r7, #4]
 8021c40:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8021c42:	687b      	ldr	r3, [r7, #4]
 8021c44:	22aa      	movs	r2, #170	@ 0xaa
 8021c46:	0092      	lsls	r2, r2, #2
 8021c48:	4694      	mov	ip, r2
 8021c4a:	4463      	add	r3, ip
 8021c4c:	683a      	ldr	r2, [r7, #0]
 8021c4e:	0011      	movs	r1, r2
 8021c50:	0018      	movs	r0, r3
 8021c52:	f001 f810 	bl	8022c76 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8021c56:	687a      	ldr	r2, [r7, #4]
 8021c58:	23a5      	movs	r3, #165	@ 0xa5
 8021c5a:	009b      	lsls	r3, r3, #2
 8021c5c:	2101      	movs	r1, #1
 8021c5e:	50d1      	str	r1, [r2, r3]

  pdev->ep0_data_len = pdev->request.wLength;
 8021c60:	687b      	ldr	r3, [r7, #4]
 8021c62:	4a23      	ldr	r2, [pc, #140]	@ (8021cf0 <USBD_LL_SetupStage+0xb8>)
 8021c64:	5a9b      	ldrh	r3, [r3, r2]
 8021c66:	0019      	movs	r1, r3
 8021c68:	687a      	ldr	r2, [r7, #4]
 8021c6a:	23a6      	movs	r3, #166	@ 0xa6
 8021c6c:	009b      	lsls	r3, r3, #2
 8021c6e:	50d1      	str	r1, [r2, r3]

  switch (pdev->request.bmRequest & 0x1FU)
 8021c70:	687a      	ldr	r2, [r7, #4]
 8021c72:	23aa      	movs	r3, #170	@ 0xaa
 8021c74:	009b      	lsls	r3, r3, #2
 8021c76:	5cd3      	ldrb	r3, [r2, r3]
 8021c78:	001a      	movs	r2, r3
 8021c7a:	231f      	movs	r3, #31
 8021c7c:	4013      	ands	r3, r2
 8021c7e:	2b02      	cmp	r3, #2
 8021c80:	d019      	beq.n	8021cb6 <USBD_LL_SetupStage+0x7e>
 8021c82:	d822      	bhi.n	8021cca <USBD_LL_SetupStage+0x92>
 8021c84:	2b00      	cmp	r3, #0
 8021c86:	d002      	beq.n	8021c8e <USBD_LL_SetupStage+0x56>
 8021c88:	2b01      	cmp	r3, #1
 8021c8a:	d00a      	beq.n	8021ca2 <USBD_LL_SetupStage+0x6a>
 8021c8c:	e01d      	b.n	8021cca <USBD_LL_SetupStage+0x92>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8021c8e:	687b      	ldr	r3, [r7, #4]
 8021c90:	22aa      	movs	r2, #170	@ 0xaa
 8021c92:	0092      	lsls	r2, r2, #2
 8021c94:	189a      	adds	r2, r3, r2
 8021c96:	687b      	ldr	r3, [r7, #4]
 8021c98:	0011      	movs	r1, r2
 8021c9a:	0018      	movs	r0, r3
 8021c9c:	f000 fa10 	bl	80220c0 <USBD_StdDevReq>
      break;
 8021ca0:	e020      	b.n	8021ce4 <USBD_LL_SetupStage+0xac>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8021ca2:	687b      	ldr	r3, [r7, #4]
 8021ca4:	22aa      	movs	r2, #170	@ 0xaa
 8021ca6:	0092      	lsls	r2, r2, #2
 8021ca8:	189a      	adds	r2, r3, r2
 8021caa:	687b      	ldr	r3, [r7, #4]
 8021cac:	0011      	movs	r1, r2
 8021cae:	0018      	movs	r0, r3
 8021cb0:	f000 fa78 	bl	80221a4 <USBD_StdItfReq>
      break;
 8021cb4:	e016      	b.n	8021ce4 <USBD_LL_SetupStage+0xac>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8021cb6:	687b      	ldr	r3, [r7, #4]
 8021cb8:	22aa      	movs	r2, #170	@ 0xaa
 8021cba:	0092      	lsls	r2, r2, #2
 8021cbc:	189a      	adds	r2, r3, r2
 8021cbe:	687b      	ldr	r3, [r7, #4]
 8021cc0:	0011      	movs	r1, r2
 8021cc2:	0018      	movs	r0, r3
 8021cc4:	f000 fac5 	bl	8022252 <USBD_StdEPReq>
      break;
 8021cc8:	e00c      	b.n	8021ce4 <USBD_LL_SetupStage+0xac>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8021cca:	687a      	ldr	r2, [r7, #4]
 8021ccc:	23aa      	movs	r3, #170	@ 0xaa
 8021cce:	009b      	lsls	r3, r3, #2
 8021cd0:	5cd3      	ldrb	r3, [r2, r3]
 8021cd2:	227f      	movs	r2, #127	@ 0x7f
 8021cd4:	4393      	bics	r3, r2
 8021cd6:	b2da      	uxtb	r2, r3
 8021cd8:	687b      	ldr	r3, [r7, #4]
 8021cda:	0011      	movs	r1, r2
 8021cdc:	0018      	movs	r0, r3
 8021cde:	f001 fd36 	bl	802374e <USBD_LL_StallEP>
      break;
 8021ce2:	46c0      	nop			@ (mov r8, r8)
  }

  return USBD_OK;
 8021ce4:	2300      	movs	r3, #0
}
 8021ce6:	0018      	movs	r0, r3
 8021ce8:	46bd      	mov	sp, r7
 8021cea:	b002      	add	sp, #8
 8021cec:	bd80      	pop	{r7, pc}
 8021cee:	46c0      	nop			@ (mov r8, r8)
 8021cf0:	000002ae 	.word	0x000002ae

08021cf4 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8021cf4:	b580      	push	{r7, lr}
 8021cf6:	b086      	sub	sp, #24
 8021cf8:	af00      	add	r7, sp, #0
 8021cfa:	60f8      	str	r0, [r7, #12]
 8021cfc:	607a      	str	r2, [r7, #4]
 8021cfe:	200b      	movs	r0, #11
 8021d00:	183b      	adds	r3, r7, r0
 8021d02:	1c0a      	adds	r2, r1, #0
 8021d04:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8021d06:	183b      	adds	r3, r7, r0
 8021d08:	781b      	ldrb	r3, [r3, #0]
 8021d0a:	2b00      	cmp	r3, #0
 8021d0c:	d154      	bne.n	8021db8 <USBD_LL_DataOutStage+0xc4>
  {
    pep = &pdev->ep_out[0];
 8021d0e:	68fb      	ldr	r3, [r7, #12]
 8021d10:	3355      	adds	r3, #85	@ 0x55
 8021d12:	33ff      	adds	r3, #255	@ 0xff
 8021d14:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8021d16:	68fa      	ldr	r2, [r7, #12]
 8021d18:	23a5      	movs	r3, #165	@ 0xa5
 8021d1a:	009b      	lsls	r3, r3, #2
 8021d1c:	58d3      	ldr	r3, [r2, r3]
 8021d1e:	2b03      	cmp	r3, #3
 8021d20:	d139      	bne.n	8021d96 <USBD_LL_DataOutStage+0xa2>
    {
      if (pep->rem_length > pep->maxpacket)
 8021d22:	697b      	ldr	r3, [r7, #20]
 8021d24:	68da      	ldr	r2, [r3, #12]
 8021d26:	697b      	ldr	r3, [r7, #20]
 8021d28:	691b      	ldr	r3, [r3, #16]
 8021d2a:	429a      	cmp	r2, r3
 8021d2c:	d919      	bls.n	8021d62 <USBD_LL_DataOutStage+0x6e>
      {
        pep->rem_length -= pep->maxpacket;
 8021d2e:	697b      	ldr	r3, [r7, #20]
 8021d30:	68da      	ldr	r2, [r3, #12]
 8021d32:	697b      	ldr	r3, [r7, #20]
 8021d34:	691b      	ldr	r3, [r3, #16]
 8021d36:	1ad2      	subs	r2, r2, r3
 8021d38:	697b      	ldr	r3, [r7, #20]
 8021d3a:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8021d3c:	697b      	ldr	r3, [r7, #20]
 8021d3e:	68da      	ldr	r2, [r3, #12]
 8021d40:	697b      	ldr	r3, [r7, #20]
 8021d42:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8021d44:	429a      	cmp	r2, r3
 8021d46:	d203      	bcs.n	8021d50 <USBD_LL_DataOutStage+0x5c>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8021d48:	697b      	ldr	r3, [r7, #20]
 8021d4a:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8021d4c:	b29b      	uxth	r3, r3
 8021d4e:	e002      	b.n	8021d56 <USBD_LL_DataOutStage+0x62>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8021d50:	697b      	ldr	r3, [r7, #20]
 8021d52:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8021d54:	b29b      	uxth	r3, r3
 8021d56:	6879      	ldr	r1, [r7, #4]
 8021d58:	68f8      	ldr	r0, [r7, #12]
 8021d5a:	001a      	movs	r2, r3
 8021d5c:	f001 f898 	bl	8022e90 <USBD_CtlContinueRx>
 8021d60:	e045      	b.n	8021dee <USBD_LL_DataOutStage+0xfa>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8021d62:	68fa      	ldr	r2, [r7, #12]
 8021d64:	23ad      	movs	r3, #173	@ 0xad
 8021d66:	009b      	lsls	r3, r3, #2
 8021d68:	58d3      	ldr	r3, [r2, r3]
 8021d6a:	691b      	ldr	r3, [r3, #16]
 8021d6c:	2b00      	cmp	r3, #0
 8021d6e:	d00d      	beq.n	8021d8c <USBD_LL_DataOutStage+0x98>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8021d70:	68fa      	ldr	r2, [r7, #12]
 8021d72:	23a7      	movs	r3, #167	@ 0xa7
 8021d74:	009b      	lsls	r3, r3, #2
 8021d76:	5cd3      	ldrb	r3, [r2, r3]
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8021d78:	2b03      	cmp	r3, #3
 8021d7a:	d107      	bne.n	8021d8c <USBD_LL_DataOutStage+0x98>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8021d7c:	68fa      	ldr	r2, [r7, #12]
 8021d7e:	23ad      	movs	r3, #173	@ 0xad
 8021d80:	009b      	lsls	r3, r3, #2
 8021d82:	58d3      	ldr	r3, [r2, r3]
 8021d84:	691b      	ldr	r3, [r3, #16]
 8021d86:	68fa      	ldr	r2, [r7, #12]
 8021d88:	0010      	movs	r0, r2
 8021d8a:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8021d8c:	68fb      	ldr	r3, [r7, #12]
 8021d8e:	0018      	movs	r0, r3
 8021d90:	f001 f891 	bl	8022eb6 <USBD_CtlSendStatus>
 8021d94:	e02b      	b.n	8021dee <USBD_LL_DataOutStage+0xfa>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8021d96:	68fa      	ldr	r2, [r7, #12]
 8021d98:	23a5      	movs	r3, #165	@ 0xa5
 8021d9a:	009b      	lsls	r3, r3, #2
 8021d9c:	58d3      	ldr	r3, [r2, r3]
 8021d9e:	2b05      	cmp	r3, #5
 8021da0:	d125      	bne.n	8021dee <USBD_LL_DataOutStage+0xfa>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8021da2:	68fa      	ldr	r2, [r7, #12]
 8021da4:	23a5      	movs	r3, #165	@ 0xa5
 8021da6:	009b      	lsls	r3, r3, #2
 8021da8:	2100      	movs	r1, #0
 8021daa:	50d1      	str	r1, [r2, r3]
        USBD_LL_StallEP(pdev, 0U);
 8021dac:	68fb      	ldr	r3, [r7, #12]
 8021dae:	2100      	movs	r1, #0
 8021db0:	0018      	movs	r0, r3
 8021db2:	f001 fccc 	bl	802374e <USBD_LL_StallEP>
 8021db6:	e01a      	b.n	8021dee <USBD_LL_DataOutStage+0xfa>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8021db8:	68fa      	ldr	r2, [r7, #12]
 8021dba:	23ad      	movs	r3, #173	@ 0xad
 8021dbc:	009b      	lsls	r3, r3, #2
 8021dbe:	58d3      	ldr	r3, [r2, r3]
 8021dc0:	699b      	ldr	r3, [r3, #24]
 8021dc2:	2b00      	cmp	r3, #0
 8021dc4:	d011      	beq.n	8021dea <USBD_LL_DataOutStage+0xf6>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8021dc6:	68fa      	ldr	r2, [r7, #12]
 8021dc8:	23a7      	movs	r3, #167	@ 0xa7
 8021dca:	009b      	lsls	r3, r3, #2
 8021dcc:	5cd3      	ldrb	r3, [r2, r3]
  else if ((pdev->pClass->DataOut != NULL) &&
 8021dce:	2b03      	cmp	r3, #3
 8021dd0:	d10b      	bne.n	8021dea <USBD_LL_DataOutStage+0xf6>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8021dd2:	68fa      	ldr	r2, [r7, #12]
 8021dd4:	23ad      	movs	r3, #173	@ 0xad
 8021dd6:	009b      	lsls	r3, r3, #2
 8021dd8:	58d3      	ldr	r3, [r2, r3]
 8021dda:	699b      	ldr	r3, [r3, #24]
 8021ddc:	220b      	movs	r2, #11
 8021dde:	18ba      	adds	r2, r7, r2
 8021de0:	7811      	ldrb	r1, [r2, #0]
 8021de2:	68fa      	ldr	r2, [r7, #12]
 8021de4:	0010      	movs	r0, r2
 8021de6:	4798      	blx	r3
 8021de8:	e001      	b.n	8021dee <USBD_LL_DataOutStage+0xfa>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8021dea:	2302      	movs	r3, #2
 8021dec:	e000      	b.n	8021df0 <USBD_LL_DataOutStage+0xfc>
  }

  return USBD_OK;
 8021dee:	2300      	movs	r3, #0
}
 8021df0:	0018      	movs	r0, r3
 8021df2:	46bd      	mov	sp, r7
 8021df4:	b006      	add	sp, #24
 8021df6:	bd80      	pop	{r7, pc}

08021df8 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8021df8:	b580      	push	{r7, lr}
 8021dfa:	b086      	sub	sp, #24
 8021dfc:	af00      	add	r7, sp, #0
 8021dfe:	60f8      	str	r0, [r7, #12]
 8021e00:	607a      	str	r2, [r7, #4]
 8021e02:	200b      	movs	r0, #11
 8021e04:	183b      	adds	r3, r7, r0
 8021e06:	1c0a      	adds	r2, r1, #0
 8021e08:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8021e0a:	183b      	adds	r3, r7, r0
 8021e0c:	781b      	ldrb	r3, [r3, #0]
 8021e0e:	2b00      	cmp	r3, #0
 8021e10:	d000      	beq.n	8021e14 <USBD_LL_DataInStage+0x1c>
 8021e12:	e08e      	b.n	8021f32 <USBD_LL_DataInStage+0x13a>
  {
    pep = &pdev->ep_in[0];
 8021e14:	68fb      	ldr	r3, [r7, #12]
 8021e16:	3314      	adds	r3, #20
 8021e18:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8021e1a:	68fa      	ldr	r2, [r7, #12]
 8021e1c:	23a5      	movs	r3, #165	@ 0xa5
 8021e1e:	009b      	lsls	r3, r3, #2
 8021e20:	58d3      	ldr	r3, [r2, r3]
 8021e22:	2b02      	cmp	r3, #2
 8021e24:	d164      	bne.n	8021ef0 <USBD_LL_DataInStage+0xf8>
    {
      if (pep->rem_length > pep->maxpacket)
 8021e26:	697b      	ldr	r3, [r7, #20]
 8021e28:	68da      	ldr	r2, [r3, #12]
 8021e2a:	697b      	ldr	r3, [r7, #20]
 8021e2c:	691b      	ldr	r3, [r3, #16]
 8021e2e:	429a      	cmp	r2, r3
 8021e30:	d915      	bls.n	8021e5e <USBD_LL_DataInStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8021e32:	697b      	ldr	r3, [r7, #20]
 8021e34:	68da      	ldr	r2, [r3, #12]
 8021e36:	697b      	ldr	r3, [r7, #20]
 8021e38:	691b      	ldr	r3, [r3, #16]
 8021e3a:	1ad2      	subs	r2, r2, r3
 8021e3c:	697b      	ldr	r3, [r7, #20]
 8021e3e:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8021e40:	697b      	ldr	r3, [r7, #20]
 8021e42:	68db      	ldr	r3, [r3, #12]
 8021e44:	b29a      	uxth	r2, r3
 8021e46:	6879      	ldr	r1, [r7, #4]
 8021e48:	68fb      	ldr	r3, [r7, #12]
 8021e4a:	0018      	movs	r0, r3
 8021e4c:	f000 ffe9 	bl	8022e22 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8021e50:	68f8      	ldr	r0, [r7, #12]
 8021e52:	2300      	movs	r3, #0
 8021e54:	2200      	movs	r2, #0
 8021e56:	2100      	movs	r1, #0
 8021e58:	f001 fd62 	bl	8023920 <USBD_LL_PrepareReceive>
 8021e5c:	e059      	b.n	8021f12 <USBD_LL_DataInStage+0x11a>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8021e5e:	697b      	ldr	r3, [r7, #20]
 8021e60:	689a      	ldr	r2, [r3, #8]
 8021e62:	697b      	ldr	r3, [r7, #20]
 8021e64:	691b      	ldr	r3, [r3, #16]
 8021e66:	0019      	movs	r1, r3
 8021e68:	0010      	movs	r0, r2
 8021e6a:	f7de fa21 	bl	80002b0 <__aeabi_uidivmod>
 8021e6e:	1e0b      	subs	r3, r1, #0
 8021e70:	d11f      	bne.n	8021eb2 <USBD_LL_DataInStage+0xba>
            (pep->total_length >= pep->maxpacket) &&
 8021e72:	697b      	ldr	r3, [r7, #20]
 8021e74:	689a      	ldr	r2, [r3, #8]
 8021e76:	697b      	ldr	r3, [r7, #20]
 8021e78:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8021e7a:	429a      	cmp	r2, r3
 8021e7c:	d319      	bcc.n	8021eb2 <USBD_LL_DataInStage+0xba>
            (pep->total_length < pdev->ep0_data_len))
 8021e7e:	697b      	ldr	r3, [r7, #20]
 8021e80:	689a      	ldr	r2, [r3, #8]
 8021e82:	68f9      	ldr	r1, [r7, #12]
 8021e84:	23a6      	movs	r3, #166	@ 0xa6
 8021e86:	009b      	lsls	r3, r3, #2
 8021e88:	58cb      	ldr	r3, [r1, r3]
            (pep->total_length >= pep->maxpacket) &&
 8021e8a:	429a      	cmp	r2, r3
 8021e8c:	d211      	bcs.n	8021eb2 <USBD_LL_DataInStage+0xba>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8021e8e:	68fb      	ldr	r3, [r7, #12]
 8021e90:	2200      	movs	r2, #0
 8021e92:	2100      	movs	r1, #0
 8021e94:	0018      	movs	r0, r3
 8021e96:	f000 ffc4 	bl	8022e22 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8021e9a:	68fa      	ldr	r2, [r7, #12]
 8021e9c:	23a6      	movs	r3, #166	@ 0xa6
 8021e9e:	009b      	lsls	r3, r3, #2
 8021ea0:	2100      	movs	r1, #0
 8021ea2:	50d1      	str	r1, [r2, r3]

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8021ea4:	68f8      	ldr	r0, [r7, #12]
 8021ea6:	2300      	movs	r3, #0
 8021ea8:	2200      	movs	r2, #0
 8021eaa:	2100      	movs	r1, #0
 8021eac:	f001 fd38 	bl	8023920 <USBD_LL_PrepareReceive>
 8021eb0:	e02f      	b.n	8021f12 <USBD_LL_DataInStage+0x11a>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8021eb2:	68fa      	ldr	r2, [r7, #12]
 8021eb4:	23ad      	movs	r3, #173	@ 0xad
 8021eb6:	009b      	lsls	r3, r3, #2
 8021eb8:	58d3      	ldr	r3, [r2, r3]
 8021eba:	68db      	ldr	r3, [r3, #12]
 8021ebc:	2b00      	cmp	r3, #0
 8021ebe:	d00d      	beq.n	8021edc <USBD_LL_DataInStage+0xe4>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8021ec0:	68fa      	ldr	r2, [r7, #12]
 8021ec2:	23a7      	movs	r3, #167	@ 0xa7
 8021ec4:	009b      	lsls	r3, r3, #2
 8021ec6:	5cd3      	ldrb	r3, [r2, r3]
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8021ec8:	2b03      	cmp	r3, #3
 8021eca:	d107      	bne.n	8021edc <USBD_LL_DataInStage+0xe4>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8021ecc:	68fa      	ldr	r2, [r7, #12]
 8021ece:	23ad      	movs	r3, #173	@ 0xad
 8021ed0:	009b      	lsls	r3, r3, #2
 8021ed2:	58d3      	ldr	r3, [r2, r3]
 8021ed4:	68db      	ldr	r3, [r3, #12]
 8021ed6:	68fa      	ldr	r2, [r7, #12]
 8021ed8:	0010      	movs	r0, r2
 8021eda:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8021edc:	68fb      	ldr	r3, [r7, #12]
 8021ede:	2180      	movs	r1, #128	@ 0x80
 8021ee0:	0018      	movs	r0, r3
 8021ee2:	f001 fc34 	bl	802374e <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8021ee6:	68fb      	ldr	r3, [r7, #12]
 8021ee8:	0018      	movs	r0, r3
 8021eea:	f000 fff8 	bl	8022ede <USBD_CtlReceiveStatus>
 8021eee:	e010      	b.n	8021f12 <USBD_LL_DataInStage+0x11a>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8021ef0:	68fa      	ldr	r2, [r7, #12]
 8021ef2:	23a5      	movs	r3, #165	@ 0xa5
 8021ef4:	009b      	lsls	r3, r3, #2
 8021ef6:	58d3      	ldr	r3, [r2, r3]
 8021ef8:	2b04      	cmp	r3, #4
 8021efa:	d005      	beq.n	8021f08 <USBD_LL_DataInStage+0x110>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8021efc:	68fa      	ldr	r2, [r7, #12]
 8021efe:	23a5      	movs	r3, #165	@ 0xa5
 8021f00:	009b      	lsls	r3, r3, #2
 8021f02:	58d3      	ldr	r3, [r2, r3]
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8021f04:	2b00      	cmp	r3, #0
 8021f06:	d104      	bne.n	8021f12 <USBD_LL_DataInStage+0x11a>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8021f08:	68fb      	ldr	r3, [r7, #12]
 8021f0a:	2180      	movs	r1, #128	@ 0x80
 8021f0c:	0018      	movs	r0, r3
 8021f0e:	f001 fc1e 	bl	802374e <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8021f12:	68fa      	ldr	r2, [r7, #12]
 8021f14:	23a8      	movs	r3, #168	@ 0xa8
 8021f16:	009b      	lsls	r3, r3, #2
 8021f18:	5cd3      	ldrb	r3, [r2, r3]
 8021f1a:	2b01      	cmp	r3, #1
 8021f1c:	d124      	bne.n	8021f68 <USBD_LL_DataInStage+0x170>
    {
      USBD_RunTestMode(pdev);
 8021f1e:	68fb      	ldr	r3, [r7, #12]
 8021f20:	0018      	movs	r0, r3
 8021f22:	f7ff fe43 	bl	8021bac <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8021f26:	68fa      	ldr	r2, [r7, #12]
 8021f28:	23a8      	movs	r3, #168	@ 0xa8
 8021f2a:	009b      	lsls	r3, r3, #2
 8021f2c:	2100      	movs	r1, #0
 8021f2e:	54d1      	strb	r1, [r2, r3]
 8021f30:	e01a      	b.n	8021f68 <USBD_LL_DataInStage+0x170>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8021f32:	68fa      	ldr	r2, [r7, #12]
 8021f34:	23ad      	movs	r3, #173	@ 0xad
 8021f36:	009b      	lsls	r3, r3, #2
 8021f38:	58d3      	ldr	r3, [r2, r3]
 8021f3a:	695b      	ldr	r3, [r3, #20]
 8021f3c:	2b00      	cmp	r3, #0
 8021f3e:	d011      	beq.n	8021f64 <USBD_LL_DataInStage+0x16c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8021f40:	68fa      	ldr	r2, [r7, #12]
 8021f42:	23a7      	movs	r3, #167	@ 0xa7
 8021f44:	009b      	lsls	r3, r3, #2
 8021f46:	5cd3      	ldrb	r3, [r2, r3]
  else if ((pdev->pClass->DataIn != NULL) &&
 8021f48:	2b03      	cmp	r3, #3
 8021f4a:	d10b      	bne.n	8021f64 <USBD_LL_DataInStage+0x16c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8021f4c:	68fa      	ldr	r2, [r7, #12]
 8021f4e:	23ad      	movs	r3, #173	@ 0xad
 8021f50:	009b      	lsls	r3, r3, #2
 8021f52:	58d3      	ldr	r3, [r2, r3]
 8021f54:	695b      	ldr	r3, [r3, #20]
 8021f56:	220b      	movs	r2, #11
 8021f58:	18ba      	adds	r2, r7, r2
 8021f5a:	7811      	ldrb	r1, [r2, #0]
 8021f5c:	68fa      	ldr	r2, [r7, #12]
 8021f5e:	0010      	movs	r0, r2
 8021f60:	4798      	blx	r3
 8021f62:	e001      	b.n	8021f68 <USBD_LL_DataInStage+0x170>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8021f64:	2302      	movs	r3, #2
 8021f66:	e000      	b.n	8021f6a <USBD_LL_DataInStage+0x172>
  }

  return USBD_OK;
 8021f68:	2300      	movs	r3, #0
}
 8021f6a:	0018      	movs	r0, r3
 8021f6c:	46bd      	mov	sp, r7
 8021f6e:	b006      	add	sp, #24
 8021f70:	bd80      	pop	{r7, pc}

08021f72 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8021f72:	b580      	push	{r7, lr}
 8021f74:	b082      	sub	sp, #8
 8021f76:	af00      	add	r7, sp, #0
 8021f78:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8021f7a:	6878      	ldr	r0, [r7, #4]
 8021f7c:	2340      	movs	r3, #64	@ 0x40
 8021f7e:	2200      	movs	r2, #0
 8021f80:	2100      	movs	r1, #0
 8021f82:	f001 fb82 	bl	802368a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8021f86:	687a      	ldr	r2, [r7, #4]
 8021f88:	23ac      	movs	r3, #172	@ 0xac
 8021f8a:	005b      	lsls	r3, r3, #1
 8021f8c:	2101      	movs	r1, #1
 8021f8e:	50d1      	str	r1, [r2, r3]

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8021f90:	687a      	ldr	r2, [r7, #4]
 8021f92:	23b2      	movs	r3, #178	@ 0xb2
 8021f94:	005b      	lsls	r3, r3, #1
 8021f96:	2140      	movs	r1, #64	@ 0x40
 8021f98:	50d1      	str	r1, [r2, r3]

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8021f9a:	6878      	ldr	r0, [r7, #4]
 8021f9c:	2340      	movs	r3, #64	@ 0x40
 8021f9e:	2200      	movs	r2, #0
 8021fa0:	2180      	movs	r1, #128	@ 0x80
 8021fa2:	f001 fb72 	bl	802368a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8021fa6:	687b      	ldr	r3, [r7, #4]
 8021fa8:	2201      	movs	r2, #1
 8021faa:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8021fac:	687b      	ldr	r3, [r7, #4]
 8021fae:	2240      	movs	r2, #64	@ 0x40
 8021fb0:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8021fb2:	687a      	ldr	r2, [r7, #4]
 8021fb4:	23a7      	movs	r3, #167	@ 0xa7
 8021fb6:	009b      	lsls	r3, r3, #2
 8021fb8:	2101      	movs	r1, #1
 8021fba:	54d1      	strb	r1, [r2, r3]
  pdev->ep0_state = USBD_EP0_IDLE;
 8021fbc:	687a      	ldr	r2, [r7, #4]
 8021fbe:	23a5      	movs	r3, #165	@ 0xa5
 8021fc0:	009b      	lsls	r3, r3, #2
 8021fc2:	2100      	movs	r1, #0
 8021fc4:	50d1      	str	r1, [r2, r3]
  pdev->dev_config = 0U;
 8021fc6:	687b      	ldr	r3, [r7, #4]
 8021fc8:	2200      	movs	r2, #0
 8021fca:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8021fcc:	687a      	ldr	r2, [r7, #4]
 8021fce:	23a9      	movs	r3, #169	@ 0xa9
 8021fd0:	009b      	lsls	r3, r3, #2
 8021fd2:	2100      	movs	r1, #0
 8021fd4:	50d1      	str	r1, [r2, r3]

  if (pdev->pClassData)
 8021fd6:	687a      	ldr	r2, [r7, #4]
 8021fd8:	23ae      	movs	r3, #174	@ 0xae
 8021fda:	009b      	lsls	r3, r3, #2
 8021fdc:	58d3      	ldr	r3, [r2, r3]
 8021fde:	2b00      	cmp	r3, #0
 8021fe0:	d00a      	beq.n	8021ff8 <USBD_LL_Reset+0x86>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8021fe2:	687a      	ldr	r2, [r7, #4]
 8021fe4:	23ad      	movs	r3, #173	@ 0xad
 8021fe6:	009b      	lsls	r3, r3, #2
 8021fe8:	58d3      	ldr	r3, [r2, r3]
 8021fea:	685a      	ldr	r2, [r3, #4]
 8021fec:	687b      	ldr	r3, [r7, #4]
 8021fee:	685b      	ldr	r3, [r3, #4]
 8021ff0:	b2d9      	uxtb	r1, r3
 8021ff2:	687b      	ldr	r3, [r7, #4]
 8021ff4:	0018      	movs	r0, r3
 8021ff6:	4790      	blx	r2
  }

  return USBD_OK;
 8021ff8:	2300      	movs	r3, #0
}
 8021ffa:	0018      	movs	r0, r3
 8021ffc:	46bd      	mov	sp, r7
 8021ffe:	b002      	add	sp, #8
 8022000:	bd80      	pop	{r7, pc}

08022002 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8022002:	b580      	push	{r7, lr}
 8022004:	b082      	sub	sp, #8
 8022006:	af00      	add	r7, sp, #0
 8022008:	6078      	str	r0, [r7, #4]
 802200a:	000a      	movs	r2, r1
 802200c:	1cfb      	adds	r3, r7, #3
 802200e:	701a      	strb	r2, [r3, #0]
  pdev->dev_speed = speed;
 8022010:	687b      	ldr	r3, [r7, #4]
 8022012:	1cfa      	adds	r2, r7, #3
 8022014:	7812      	ldrb	r2, [r2, #0]
 8022016:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8022018:	2300      	movs	r3, #0
}
 802201a:	0018      	movs	r0, r3
 802201c:	46bd      	mov	sp, r7
 802201e:	b002      	add	sp, #8
 8022020:	bd80      	pop	{r7, pc}
	...

08022024 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8022024:	b580      	push	{r7, lr}
 8022026:	b082      	sub	sp, #8
 8022028:	af00      	add	r7, sp, #0
 802202a:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 802202c:	687a      	ldr	r2, [r7, #4]
 802202e:	23a7      	movs	r3, #167	@ 0xa7
 8022030:	009b      	lsls	r3, r3, #2
 8022032:	5cd1      	ldrb	r1, [r2, r3]
 8022034:	687b      	ldr	r3, [r7, #4]
 8022036:	4a06      	ldr	r2, [pc, #24]	@ (8022050 <USBD_LL_Suspend+0x2c>)
 8022038:	5499      	strb	r1, [r3, r2]
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 802203a:	687a      	ldr	r2, [r7, #4]
 802203c:	23a7      	movs	r3, #167	@ 0xa7
 802203e:	009b      	lsls	r3, r3, #2
 8022040:	2104      	movs	r1, #4
 8022042:	54d1      	strb	r1, [r2, r3]

  return USBD_OK;
 8022044:	2300      	movs	r3, #0
}
 8022046:	0018      	movs	r0, r3
 8022048:	46bd      	mov	sp, r7
 802204a:	b002      	add	sp, #8
 802204c:	bd80      	pop	{r7, pc}
 802204e:	46c0      	nop			@ (mov r8, r8)
 8022050:	0000029d 	.word	0x0000029d

08022054 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8022054:	b580      	push	{r7, lr}
 8022056:	b082      	sub	sp, #8
 8022058:	af00      	add	r7, sp, #0
 802205a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 802205c:	687a      	ldr	r2, [r7, #4]
 802205e:	23a7      	movs	r3, #167	@ 0xa7
 8022060:	009b      	lsls	r3, r3, #2
 8022062:	5cd3      	ldrb	r3, [r2, r3]
 8022064:	2b04      	cmp	r3, #4
 8022066:	d106      	bne.n	8022076 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8022068:	687b      	ldr	r3, [r7, #4]
 802206a:	4a05      	ldr	r2, [pc, #20]	@ (8022080 <USBD_LL_Resume+0x2c>)
 802206c:	5c99      	ldrb	r1, [r3, r2]
 802206e:	687a      	ldr	r2, [r7, #4]
 8022070:	23a7      	movs	r3, #167	@ 0xa7
 8022072:	009b      	lsls	r3, r3, #2
 8022074:	54d1      	strb	r1, [r2, r3]
  }

  return USBD_OK;
 8022076:	2300      	movs	r3, #0
}
 8022078:	0018      	movs	r0, r3
 802207a:	46bd      	mov	sp, r7
 802207c:	b002      	add	sp, #8
 802207e:	bd80      	pop	{r7, pc}
 8022080:	0000029d 	.word	0x0000029d

08022084 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8022084:	b580      	push	{r7, lr}
 8022086:	b082      	sub	sp, #8
 8022088:	af00      	add	r7, sp, #0
 802208a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 802208c:	687a      	ldr	r2, [r7, #4]
 802208e:	23a7      	movs	r3, #167	@ 0xa7
 8022090:	009b      	lsls	r3, r3, #2
 8022092:	5cd3      	ldrb	r3, [r2, r3]
 8022094:	2b03      	cmp	r3, #3
 8022096:	d10e      	bne.n	80220b6 <USBD_LL_SOF+0x32>
  {
    if (pdev->pClass->SOF != NULL)
 8022098:	687a      	ldr	r2, [r7, #4]
 802209a:	23ad      	movs	r3, #173	@ 0xad
 802209c:	009b      	lsls	r3, r3, #2
 802209e:	58d3      	ldr	r3, [r2, r3]
 80220a0:	69db      	ldr	r3, [r3, #28]
 80220a2:	2b00      	cmp	r3, #0
 80220a4:	d007      	beq.n	80220b6 <USBD_LL_SOF+0x32>
    {
      pdev->pClass->SOF(pdev);
 80220a6:	687a      	ldr	r2, [r7, #4]
 80220a8:	23ad      	movs	r3, #173	@ 0xad
 80220aa:	009b      	lsls	r3, r3, #2
 80220ac:	58d3      	ldr	r3, [r2, r3]
 80220ae:	69db      	ldr	r3, [r3, #28]
 80220b0:	687a      	ldr	r2, [r7, #4]
 80220b2:	0010      	movs	r0, r2
 80220b4:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80220b6:	2300      	movs	r3, #0
}
 80220b8:	0018      	movs	r0, r3
 80220ba:	46bd      	mov	sp, r7
 80220bc:	b002      	add	sp, #8
 80220be:	bd80      	pop	{r7, pc}

080220c0 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 80220c0:	b580      	push	{r7, lr}
 80220c2:	b084      	sub	sp, #16
 80220c4:	af00      	add	r7, sp, #0
 80220c6:	6078      	str	r0, [r7, #4]
 80220c8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80220ca:	230f      	movs	r3, #15
 80220cc:	18fb      	adds	r3, r7, r3
 80220ce:	2200      	movs	r2, #0
 80220d0:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80220d2:	683b      	ldr	r3, [r7, #0]
 80220d4:	781b      	ldrb	r3, [r3, #0]
 80220d6:	001a      	movs	r2, r3
 80220d8:	2360      	movs	r3, #96	@ 0x60
 80220da:	4013      	ands	r3, r2
 80220dc:	2b40      	cmp	r3, #64	@ 0x40
 80220de:	d004      	beq.n	80220ea <USBD_StdDevReq+0x2a>
 80220e0:	d84f      	bhi.n	8022182 <USBD_StdDevReq+0xc2>
 80220e2:	2b00      	cmp	r3, #0
 80220e4:	d00b      	beq.n	80220fe <USBD_StdDevReq+0x3e>
 80220e6:	2b20      	cmp	r3, #32
 80220e8:	d14b      	bne.n	8022182 <USBD_StdDevReq+0xc2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80220ea:	687a      	ldr	r2, [r7, #4]
 80220ec:	23ad      	movs	r3, #173	@ 0xad
 80220ee:	009b      	lsls	r3, r3, #2
 80220f0:	58d3      	ldr	r3, [r2, r3]
 80220f2:	689b      	ldr	r3, [r3, #8]
 80220f4:	6839      	ldr	r1, [r7, #0]
 80220f6:	687a      	ldr	r2, [r7, #4]
 80220f8:	0010      	movs	r0, r2
 80220fa:	4798      	blx	r3
      break;
 80220fc:	e048      	b.n	8022190 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80220fe:	683b      	ldr	r3, [r7, #0]
 8022100:	785b      	ldrb	r3, [r3, #1]
 8022102:	2b09      	cmp	r3, #9
 8022104:	d835      	bhi.n	8022172 <USBD_StdDevReq+0xb2>
 8022106:	009a      	lsls	r2, r3, #2
 8022108:	4b25      	ldr	r3, [pc, #148]	@ (80221a0 <USBD_StdDevReq+0xe0>)
 802210a:	18d3      	adds	r3, r2, r3
 802210c:	681b      	ldr	r3, [r3, #0]
 802210e:	469f      	mov	pc, r3
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8022110:	683a      	ldr	r2, [r7, #0]
 8022112:	687b      	ldr	r3, [r7, #4]
 8022114:	0011      	movs	r1, r2
 8022116:	0018      	movs	r0, r3
 8022118:	f000 fa52 	bl	80225c0 <USBD_GetDescriptor>
          break;
 802211c:	e030      	b.n	8022180 <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 802211e:	683a      	ldr	r2, [r7, #0]
 8022120:	687b      	ldr	r3, [r7, #4]
 8022122:	0011      	movs	r1, r2
 8022124:	0018      	movs	r0, r3
 8022126:	f000 fbfd 	bl	8022924 <USBD_SetAddress>
          break;
 802212a:	e029      	b.n	8022180 <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 802212c:	683a      	ldr	r2, [r7, #0]
 802212e:	687b      	ldr	r3, [r7, #4]
 8022130:	0011      	movs	r1, r2
 8022132:	0018      	movs	r0, r3
 8022134:	f000 fc4a 	bl	80229cc <USBD_SetConfig>
          break;
 8022138:	e022      	b.n	8022180 <USBD_StdDevReq+0xc0>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 802213a:	683a      	ldr	r2, [r7, #0]
 802213c:	687b      	ldr	r3, [r7, #4]
 802213e:	0011      	movs	r1, r2
 8022140:	0018      	movs	r0, r3
 8022142:	f000 fce7 	bl	8022b14 <USBD_GetConfig>
          break;
 8022146:	e01b      	b.n	8022180 <USBD_StdDevReq+0xc0>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8022148:	683a      	ldr	r2, [r7, #0]
 802214a:	687b      	ldr	r3, [r7, #4]
 802214c:	0011      	movs	r1, r2
 802214e:	0018      	movs	r0, r3
 8022150:	f000 fd1b 	bl	8022b8a <USBD_GetStatus>
          break;
 8022154:	e014      	b.n	8022180 <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8022156:	683a      	ldr	r2, [r7, #0]
 8022158:	687b      	ldr	r3, [r7, #4]
 802215a:	0011      	movs	r1, r2
 802215c:	0018      	movs	r0, r3
 802215e:	f000 fd4e 	bl	8022bfe <USBD_SetFeature>
          break;
 8022162:	e00d      	b.n	8022180 <USBD_StdDevReq+0xc0>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8022164:	683a      	ldr	r2, [r7, #0]
 8022166:	687b      	ldr	r3, [r7, #4]
 8022168:	0011      	movs	r1, r2
 802216a:	0018      	movs	r0, r3
 802216c:	f000 fd5d 	bl	8022c2a <USBD_ClrFeature>
          break;
 8022170:	e006      	b.n	8022180 <USBD_StdDevReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8022172:	683a      	ldr	r2, [r7, #0]
 8022174:	687b      	ldr	r3, [r7, #4]
 8022176:	0011      	movs	r1, r2
 8022178:	0018      	movs	r0, r3
 802217a:	f000 fdb4 	bl	8022ce6 <USBD_CtlError>
          break;
 802217e:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 8022180:	e006      	b.n	8022190 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 8022182:	683a      	ldr	r2, [r7, #0]
 8022184:	687b      	ldr	r3, [r7, #4]
 8022186:	0011      	movs	r1, r2
 8022188:	0018      	movs	r0, r3
 802218a:	f000 fdac 	bl	8022ce6 <USBD_CtlError>
      break;
 802218e:	46c0      	nop			@ (mov r8, r8)
  }

  return ret;
 8022190:	230f      	movs	r3, #15
 8022192:	18fb      	adds	r3, r7, r3
 8022194:	781b      	ldrb	r3, [r3, #0]
}
 8022196:	0018      	movs	r0, r3
 8022198:	46bd      	mov	sp, r7
 802219a:	b004      	add	sp, #16
 802219c:	bd80      	pop	{r7, pc}
 802219e:	46c0      	nop			@ (mov r8, r8)
 80221a0:	0802e538 	.word	0x0802e538

080221a4 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 80221a4:	b5b0      	push	{r4, r5, r7, lr}
 80221a6:	b084      	sub	sp, #16
 80221a8:	af00      	add	r7, sp, #0
 80221aa:	6078      	str	r0, [r7, #4]
 80221ac:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80221ae:	230f      	movs	r3, #15
 80221b0:	18fb      	adds	r3, r7, r3
 80221b2:	2200      	movs	r2, #0
 80221b4:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80221b6:	683b      	ldr	r3, [r7, #0]
 80221b8:	781b      	ldrb	r3, [r3, #0]
 80221ba:	001a      	movs	r2, r3
 80221bc:	2360      	movs	r3, #96	@ 0x60
 80221be:	4013      	ands	r3, r2
 80221c0:	2b40      	cmp	r3, #64	@ 0x40
 80221c2:	d004      	beq.n	80221ce <USBD_StdItfReq+0x2a>
 80221c4:	d839      	bhi.n	802223a <USBD_StdItfReq+0x96>
 80221c6:	2b00      	cmp	r3, #0
 80221c8:	d001      	beq.n	80221ce <USBD_StdItfReq+0x2a>
 80221ca:	2b20      	cmp	r3, #32
 80221cc:	d135      	bne.n	802223a <USBD_StdItfReq+0x96>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80221ce:	687a      	ldr	r2, [r7, #4]
 80221d0:	23a7      	movs	r3, #167	@ 0xa7
 80221d2:	009b      	lsls	r3, r3, #2
 80221d4:	5cd3      	ldrb	r3, [r2, r3]
 80221d6:	3b01      	subs	r3, #1
 80221d8:	2b02      	cmp	r3, #2
 80221da:	d825      	bhi.n	8022228 <USBD_StdItfReq+0x84>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80221dc:	683b      	ldr	r3, [r7, #0]
 80221de:	889b      	ldrh	r3, [r3, #4]
 80221e0:	b2db      	uxtb	r3, r3
 80221e2:	2b01      	cmp	r3, #1
 80221e4:	d819      	bhi.n	802221a <USBD_StdItfReq+0x76>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80221e6:	687a      	ldr	r2, [r7, #4]
 80221e8:	23ad      	movs	r3, #173	@ 0xad
 80221ea:	009b      	lsls	r3, r3, #2
 80221ec:	58d3      	ldr	r3, [r2, r3]
 80221ee:	689b      	ldr	r3, [r3, #8]
 80221f0:	250f      	movs	r5, #15
 80221f2:	197c      	adds	r4, r7, r5
 80221f4:	6839      	ldr	r1, [r7, #0]
 80221f6:	687a      	ldr	r2, [r7, #4]
 80221f8:	0010      	movs	r0, r2
 80221fa:	4798      	blx	r3
 80221fc:	0003      	movs	r3, r0
 80221fe:	7023      	strb	r3, [r4, #0]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8022200:	683b      	ldr	r3, [r7, #0]
 8022202:	88db      	ldrh	r3, [r3, #6]
 8022204:	2b00      	cmp	r3, #0
 8022206:	d116      	bne.n	8022236 <USBD_StdItfReq+0x92>
 8022208:	197b      	adds	r3, r7, r5
 802220a:	781b      	ldrb	r3, [r3, #0]
 802220c:	2b00      	cmp	r3, #0
 802220e:	d112      	bne.n	8022236 <USBD_StdItfReq+0x92>
            {
              USBD_CtlSendStatus(pdev);
 8022210:	687b      	ldr	r3, [r7, #4]
 8022212:	0018      	movs	r0, r3
 8022214:	f000 fe4f 	bl	8022eb6 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8022218:	e00d      	b.n	8022236 <USBD_StdItfReq+0x92>
            USBD_CtlError(pdev, req);
 802221a:	683a      	ldr	r2, [r7, #0]
 802221c:	687b      	ldr	r3, [r7, #4]
 802221e:	0011      	movs	r1, r2
 8022220:	0018      	movs	r0, r3
 8022222:	f000 fd60 	bl	8022ce6 <USBD_CtlError>
          break;
 8022226:	e006      	b.n	8022236 <USBD_StdItfReq+0x92>

        default:
          USBD_CtlError(pdev, req);
 8022228:	683a      	ldr	r2, [r7, #0]
 802222a:	687b      	ldr	r3, [r7, #4]
 802222c:	0011      	movs	r1, r2
 802222e:	0018      	movs	r0, r3
 8022230:	f000 fd59 	bl	8022ce6 <USBD_CtlError>
          break;
 8022234:	e000      	b.n	8022238 <USBD_StdItfReq+0x94>
          break;
 8022236:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 8022238:	e006      	b.n	8022248 <USBD_StdItfReq+0xa4>

    default:
      USBD_CtlError(pdev, req);
 802223a:	683a      	ldr	r2, [r7, #0]
 802223c:	687b      	ldr	r3, [r7, #4]
 802223e:	0011      	movs	r1, r2
 8022240:	0018      	movs	r0, r3
 8022242:	f000 fd50 	bl	8022ce6 <USBD_CtlError>
      break;
 8022246:	46c0      	nop			@ (mov r8, r8)
  }

  return USBD_OK;
 8022248:	2300      	movs	r3, #0
}
 802224a:	0018      	movs	r0, r3
 802224c:	46bd      	mov	sp, r7
 802224e:	b004      	add	sp, #16
 8022250:	bdb0      	pop	{r4, r5, r7, pc}

08022252 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8022252:	b5b0      	push	{r4, r5, r7, lr}
 8022254:	b084      	sub	sp, #16
 8022256:	af00      	add	r7, sp, #0
 8022258:	6078      	str	r0, [r7, #4]
 802225a:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 802225c:	230f      	movs	r3, #15
 802225e:	18fb      	adds	r3, r7, r3
 8022260:	2200      	movs	r2, #0
 8022262:	701a      	strb	r2, [r3, #0]
  ep_addr  = LOBYTE(req->wIndex);
 8022264:	683b      	ldr	r3, [r7, #0]
 8022266:	889a      	ldrh	r2, [r3, #4]
 8022268:	230e      	movs	r3, #14
 802226a:	18fb      	adds	r3, r7, r3
 802226c:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 802226e:	683b      	ldr	r3, [r7, #0]
 8022270:	781b      	ldrb	r3, [r3, #0]
 8022272:	001a      	movs	r2, r3
 8022274:	2360      	movs	r3, #96	@ 0x60
 8022276:	4013      	ands	r3, r2
 8022278:	2b40      	cmp	r3, #64	@ 0x40
 802227a:	d006      	beq.n	802228a <USBD_StdEPReq+0x38>
 802227c:	d900      	bls.n	8022280 <USBD_StdEPReq+0x2e>
 802227e:	e190      	b.n	80225a2 <USBD_StdEPReq+0x350>
 8022280:	2b00      	cmp	r3, #0
 8022282:	d00c      	beq.n	802229e <USBD_StdEPReq+0x4c>
 8022284:	2b20      	cmp	r3, #32
 8022286:	d000      	beq.n	802228a <USBD_StdEPReq+0x38>
 8022288:	e18b      	b.n	80225a2 <USBD_StdEPReq+0x350>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 802228a:	687a      	ldr	r2, [r7, #4]
 802228c:	23ad      	movs	r3, #173	@ 0xad
 802228e:	009b      	lsls	r3, r3, #2
 8022290:	58d3      	ldr	r3, [r2, r3]
 8022292:	689b      	ldr	r3, [r3, #8]
 8022294:	6839      	ldr	r1, [r7, #0]
 8022296:	687a      	ldr	r2, [r7, #4]
 8022298:	0010      	movs	r0, r2
 802229a:	4798      	blx	r3
      break;
 802229c:	e188      	b.n	80225b0 <USBD_StdEPReq+0x35e>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 802229e:	683b      	ldr	r3, [r7, #0]
 80222a0:	781b      	ldrb	r3, [r3, #0]
 80222a2:	001a      	movs	r2, r3
 80222a4:	2360      	movs	r3, #96	@ 0x60
 80222a6:	4013      	ands	r3, r2
 80222a8:	2b20      	cmp	r3, #32
 80222aa:	d10f      	bne.n	80222cc <USBD_StdEPReq+0x7a>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80222ac:	687a      	ldr	r2, [r7, #4]
 80222ae:	23ad      	movs	r3, #173	@ 0xad
 80222b0:	009b      	lsls	r3, r3, #2
 80222b2:	58d3      	ldr	r3, [r2, r3]
 80222b4:	689b      	ldr	r3, [r3, #8]
 80222b6:	250f      	movs	r5, #15
 80222b8:	197c      	adds	r4, r7, r5
 80222ba:	6839      	ldr	r1, [r7, #0]
 80222bc:	687a      	ldr	r2, [r7, #4]
 80222be:	0010      	movs	r0, r2
 80222c0:	4798      	blx	r3
 80222c2:	0003      	movs	r3, r0
 80222c4:	7023      	strb	r3, [r4, #0]

        return ret;
 80222c6:	197b      	adds	r3, r7, r5
 80222c8:	781b      	ldrb	r3, [r3, #0]
 80222ca:	e174      	b.n	80225b6 <USBD_StdEPReq+0x364>
      }

      switch (req->bRequest)
 80222cc:	683b      	ldr	r3, [r7, #0]
 80222ce:	785b      	ldrb	r3, [r3, #1]
 80222d0:	2b03      	cmp	r3, #3
 80222d2:	d007      	beq.n	80222e4 <USBD_StdEPReq+0x92>
 80222d4:	dd00      	ble.n	80222d8 <USBD_StdEPReq+0x86>
 80222d6:	e15c      	b.n	8022592 <USBD_StdEPReq+0x340>
 80222d8:	2b00      	cmp	r3, #0
 80222da:	d100      	bne.n	80222de <USBD_StdEPReq+0x8c>
 80222dc:	e092      	b.n	8022404 <USBD_StdEPReq+0x1b2>
 80222de:	2b01      	cmp	r3, #1
 80222e0:	d04b      	beq.n	802237a <USBD_StdEPReq+0x128>
 80222e2:	e156      	b.n	8022592 <USBD_StdEPReq+0x340>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80222e4:	687a      	ldr	r2, [r7, #4]
 80222e6:	23a7      	movs	r3, #167	@ 0xa7
 80222e8:	009b      	lsls	r3, r3, #2
 80222ea:	5cd3      	ldrb	r3, [r2, r3]
 80222ec:	2b02      	cmp	r3, #2
 80222ee:	d002      	beq.n	80222f6 <USBD_StdEPReq+0xa4>
 80222f0:	2b03      	cmp	r3, #3
 80222f2:	d01d      	beq.n	8022330 <USBD_StdEPReq+0xde>
 80222f4:	e039      	b.n	802236a <USBD_StdEPReq+0x118>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80222f6:	220e      	movs	r2, #14
 80222f8:	18bb      	adds	r3, r7, r2
 80222fa:	781b      	ldrb	r3, [r3, #0]
 80222fc:	2b00      	cmp	r3, #0
 80222fe:	d010      	beq.n	8022322 <USBD_StdEPReq+0xd0>
 8022300:	18bb      	adds	r3, r7, r2
 8022302:	781b      	ldrb	r3, [r3, #0]
 8022304:	2b80      	cmp	r3, #128	@ 0x80
 8022306:	d00c      	beq.n	8022322 <USBD_StdEPReq+0xd0>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8022308:	18bb      	adds	r3, r7, r2
 802230a:	781a      	ldrb	r2, [r3, #0]
 802230c:	687b      	ldr	r3, [r7, #4]
 802230e:	0011      	movs	r1, r2
 8022310:	0018      	movs	r0, r3
 8022312:	f001 fa1c 	bl	802374e <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8022316:	687b      	ldr	r3, [r7, #4]
 8022318:	2180      	movs	r1, #128	@ 0x80
 802231a:	0018      	movs	r0, r3
 802231c:	f001 fa17 	bl	802374e <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8022320:	e02a      	b.n	8022378 <USBD_StdEPReq+0x126>
                USBD_CtlError(pdev, req);
 8022322:	683a      	ldr	r2, [r7, #0]
 8022324:	687b      	ldr	r3, [r7, #4]
 8022326:	0011      	movs	r1, r2
 8022328:	0018      	movs	r0, r3
 802232a:	f000 fcdc 	bl	8022ce6 <USBD_CtlError>
              break;
 802232e:	e023      	b.n	8022378 <USBD_StdEPReq+0x126>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8022330:	683b      	ldr	r3, [r7, #0]
 8022332:	885b      	ldrh	r3, [r3, #2]
 8022334:	2b00      	cmp	r3, #0
 8022336:	d113      	bne.n	8022360 <USBD_StdEPReq+0x10e>
              {
                if ((ep_addr != 0x00U) &&
 8022338:	220e      	movs	r2, #14
 802233a:	18bb      	adds	r3, r7, r2
 802233c:	781b      	ldrb	r3, [r3, #0]
 802233e:	2b00      	cmp	r3, #0
 8022340:	d00e      	beq.n	8022360 <USBD_StdEPReq+0x10e>
 8022342:	18bb      	adds	r3, r7, r2
 8022344:	781b      	ldrb	r3, [r3, #0]
 8022346:	2b80      	cmp	r3, #128	@ 0x80
 8022348:	d00a      	beq.n	8022360 <USBD_StdEPReq+0x10e>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 802234a:	683b      	ldr	r3, [r7, #0]
 802234c:	88db      	ldrh	r3, [r3, #6]
 802234e:	2b00      	cmp	r3, #0
 8022350:	d106      	bne.n	8022360 <USBD_StdEPReq+0x10e>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8022352:	18bb      	adds	r3, r7, r2
 8022354:	781a      	ldrb	r2, [r3, #0]
 8022356:	687b      	ldr	r3, [r7, #4]
 8022358:	0011      	movs	r1, r2
 802235a:	0018      	movs	r0, r3
 802235c:	f001 f9f7 	bl	802374e <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8022360:	687b      	ldr	r3, [r7, #4]
 8022362:	0018      	movs	r0, r3
 8022364:	f000 fda7 	bl	8022eb6 <USBD_CtlSendStatus>

              break;
 8022368:	e006      	b.n	8022378 <USBD_StdEPReq+0x126>

            default:
              USBD_CtlError(pdev, req);
 802236a:	683a      	ldr	r2, [r7, #0]
 802236c:	687b      	ldr	r3, [r7, #4]
 802236e:	0011      	movs	r1, r2
 8022370:	0018      	movs	r0, r3
 8022372:	f000 fcb8 	bl	8022ce6 <USBD_CtlError>
              break;
 8022376:	46c0      	nop			@ (mov r8, r8)
          }
          break;
 8022378:	e112      	b.n	80225a0 <USBD_StdEPReq+0x34e>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 802237a:	687a      	ldr	r2, [r7, #4]
 802237c:	23a7      	movs	r3, #167	@ 0xa7
 802237e:	009b      	lsls	r3, r3, #2
 8022380:	5cd3      	ldrb	r3, [r2, r3]
 8022382:	2b02      	cmp	r3, #2
 8022384:	d002      	beq.n	802238c <USBD_StdEPReq+0x13a>
 8022386:	2b03      	cmp	r3, #3
 8022388:	d01d      	beq.n	80223c6 <USBD_StdEPReq+0x174>
 802238a:	e032      	b.n	80223f2 <USBD_StdEPReq+0x1a0>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 802238c:	220e      	movs	r2, #14
 802238e:	18bb      	adds	r3, r7, r2
 8022390:	781b      	ldrb	r3, [r3, #0]
 8022392:	2b00      	cmp	r3, #0
 8022394:	d010      	beq.n	80223b8 <USBD_StdEPReq+0x166>
 8022396:	18bb      	adds	r3, r7, r2
 8022398:	781b      	ldrb	r3, [r3, #0]
 802239a:	2b80      	cmp	r3, #128	@ 0x80
 802239c:	d00c      	beq.n	80223b8 <USBD_StdEPReq+0x166>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 802239e:	18bb      	adds	r3, r7, r2
 80223a0:	781a      	ldrb	r2, [r3, #0]
 80223a2:	687b      	ldr	r3, [r7, #4]
 80223a4:	0011      	movs	r1, r2
 80223a6:	0018      	movs	r0, r3
 80223a8:	f001 f9d1 	bl	802374e <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80223ac:	687b      	ldr	r3, [r7, #4]
 80223ae:	2180      	movs	r1, #128	@ 0x80
 80223b0:	0018      	movs	r0, r3
 80223b2:	f001 f9cc 	bl	802374e <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80223b6:	e024      	b.n	8022402 <USBD_StdEPReq+0x1b0>
                USBD_CtlError(pdev, req);
 80223b8:	683a      	ldr	r2, [r7, #0]
 80223ba:	687b      	ldr	r3, [r7, #4]
 80223bc:	0011      	movs	r1, r2
 80223be:	0018      	movs	r0, r3
 80223c0:	f000 fc91 	bl	8022ce6 <USBD_CtlError>
              break;
 80223c4:	e01d      	b.n	8022402 <USBD_StdEPReq+0x1b0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80223c6:	683b      	ldr	r3, [r7, #0]
 80223c8:	885b      	ldrh	r3, [r3, #2]
 80223ca:	2b00      	cmp	r3, #0
 80223cc:	d118      	bne.n	8022400 <USBD_StdEPReq+0x1ae>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80223ce:	210e      	movs	r1, #14
 80223d0:	187b      	adds	r3, r7, r1
 80223d2:	781b      	ldrb	r3, [r3, #0]
 80223d4:	227f      	movs	r2, #127	@ 0x7f
 80223d6:	4013      	ands	r3, r2
 80223d8:	d006      	beq.n	80223e8 <USBD_StdEPReq+0x196>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 80223da:	187b      	adds	r3, r7, r1
 80223dc:	781a      	ldrb	r2, [r3, #0]
 80223de:	687b      	ldr	r3, [r7, #4]
 80223e0:	0011      	movs	r1, r2
 80223e2:	0018      	movs	r0, r3
 80223e4:	f001 f9de 	bl	80237a4 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 80223e8:	687b      	ldr	r3, [r7, #4]
 80223ea:	0018      	movs	r0, r3
 80223ec:	f000 fd63 	bl	8022eb6 <USBD_CtlSendStatus>
              }
              break;
 80223f0:	e006      	b.n	8022400 <USBD_StdEPReq+0x1ae>

            default:
              USBD_CtlError(pdev, req);
 80223f2:	683a      	ldr	r2, [r7, #0]
 80223f4:	687b      	ldr	r3, [r7, #4]
 80223f6:	0011      	movs	r1, r2
 80223f8:	0018      	movs	r0, r3
 80223fa:	f000 fc74 	bl	8022ce6 <USBD_CtlError>
              break;
 80223fe:	e000      	b.n	8022402 <USBD_StdEPReq+0x1b0>
              break;
 8022400:	46c0      	nop			@ (mov r8, r8)
          }
          break;
 8022402:	e0cd      	b.n	80225a0 <USBD_StdEPReq+0x34e>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8022404:	687a      	ldr	r2, [r7, #4]
 8022406:	23a7      	movs	r3, #167	@ 0xa7
 8022408:	009b      	lsls	r3, r3, #2
 802240a:	5cd3      	ldrb	r3, [r2, r3]
 802240c:	2b02      	cmp	r3, #2
 802240e:	d002      	beq.n	8022416 <USBD_StdEPReq+0x1c4>
 8022410:	2b03      	cmp	r3, #3
 8022412:	d03c      	beq.n	802248e <USBD_StdEPReq+0x23c>
 8022414:	e0b5      	b.n	8022582 <USBD_StdEPReq+0x330>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8022416:	220e      	movs	r2, #14
 8022418:	18bb      	adds	r3, r7, r2
 802241a:	781b      	ldrb	r3, [r3, #0]
 802241c:	2b00      	cmp	r3, #0
 802241e:	d00a      	beq.n	8022436 <USBD_StdEPReq+0x1e4>
 8022420:	18bb      	adds	r3, r7, r2
 8022422:	781b      	ldrb	r3, [r3, #0]
 8022424:	2b80      	cmp	r3, #128	@ 0x80
 8022426:	d006      	beq.n	8022436 <USBD_StdEPReq+0x1e4>
              {
                USBD_CtlError(pdev, req);
 8022428:	683a      	ldr	r2, [r7, #0]
 802242a:	687b      	ldr	r3, [r7, #4]
 802242c:	0011      	movs	r1, r2
 802242e:	0018      	movs	r0, r3
 8022430:	f000 fc59 	bl	8022ce6 <USBD_CtlError>
                break;
 8022434:	e0ac      	b.n	8022590 <USBD_StdEPReq+0x33e>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8022436:	220e      	movs	r2, #14
 8022438:	18bb      	adds	r3, r7, r2
 802243a:	781b      	ldrb	r3, [r3, #0]
 802243c:	b25b      	sxtb	r3, r3
 802243e:	2b00      	cmp	r3, #0
 8022440:	da0c      	bge.n	802245c <USBD_StdEPReq+0x20a>
 8022442:	18bb      	adds	r3, r7, r2
 8022444:	781b      	ldrb	r3, [r3, #0]
 8022446:	227f      	movs	r2, #127	@ 0x7f
 8022448:	401a      	ands	r2, r3
 802244a:	0013      	movs	r3, r2
 802244c:	009b      	lsls	r3, r3, #2
 802244e:	189b      	adds	r3, r3, r2
 8022450:	009b      	lsls	r3, r3, #2
 8022452:	3310      	adds	r3, #16
 8022454:	687a      	ldr	r2, [r7, #4]
 8022456:	18d3      	adds	r3, r2, r3
 8022458:	3304      	adds	r3, #4
 802245a:	e00d      	b.n	8022478 <USBD_StdEPReq+0x226>
                    &pdev->ep_out[ep_addr & 0x7FU];
 802245c:	230e      	movs	r3, #14
 802245e:	18fb      	adds	r3, r7, r3
 8022460:	781b      	ldrb	r3, [r3, #0]
 8022462:	227f      	movs	r2, #127	@ 0x7f
 8022464:	401a      	ands	r2, r3
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8022466:	0013      	movs	r3, r2
 8022468:	009b      	lsls	r3, r3, #2
 802246a:	189b      	adds	r3, r3, r2
 802246c:	009b      	lsls	r3, r3, #2
 802246e:	3351      	adds	r3, #81	@ 0x51
 8022470:	33ff      	adds	r3, #255	@ 0xff
 8022472:	687a      	ldr	r2, [r7, #4]
 8022474:	18d3      	adds	r3, r2, r3
 8022476:	3304      	adds	r3, #4
 8022478:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 802247a:	68bb      	ldr	r3, [r7, #8]
 802247c:	2200      	movs	r2, #0
 802247e:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8022480:	68b9      	ldr	r1, [r7, #8]
 8022482:	687b      	ldr	r3, [r7, #4]
 8022484:	2202      	movs	r2, #2
 8022486:	0018      	movs	r0, r3
 8022488:	f000 fcab 	bl	8022de2 <USBD_CtlSendData>
              break;
 802248c:	e080      	b.n	8022590 <USBD_StdEPReq+0x33e>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 802248e:	220e      	movs	r2, #14
 8022490:	18bb      	adds	r3, r7, r2
 8022492:	781b      	ldrb	r3, [r3, #0]
 8022494:	b25b      	sxtb	r3, r3
 8022496:	2b00      	cmp	r3, #0
 8022498:	da14      	bge.n	80224c4 <USBD_StdEPReq+0x272>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 802249a:	18bb      	adds	r3, r7, r2
 802249c:	781b      	ldrb	r3, [r3, #0]
 802249e:	220f      	movs	r2, #15
 80224a0:	401a      	ands	r2, r3
 80224a2:	6879      	ldr	r1, [r7, #4]
 80224a4:	0013      	movs	r3, r2
 80224a6:	009b      	lsls	r3, r3, #2
 80224a8:	189b      	adds	r3, r3, r2
 80224aa:	009b      	lsls	r3, r3, #2
 80224ac:	18cb      	adds	r3, r1, r3
 80224ae:	3318      	adds	r3, #24
 80224b0:	681b      	ldr	r3, [r3, #0]
 80224b2:	2b00      	cmp	r3, #0
 80224b4:	d11e      	bne.n	80224f4 <USBD_StdEPReq+0x2a2>
                {
                  USBD_CtlError(pdev, req);
 80224b6:	683a      	ldr	r2, [r7, #0]
 80224b8:	687b      	ldr	r3, [r7, #4]
 80224ba:	0011      	movs	r1, r2
 80224bc:	0018      	movs	r0, r3
 80224be:	f000 fc12 	bl	8022ce6 <USBD_CtlError>
                  break;
 80224c2:	e065      	b.n	8022590 <USBD_StdEPReq+0x33e>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80224c4:	230e      	movs	r3, #14
 80224c6:	18fb      	adds	r3, r7, r3
 80224c8:	781b      	ldrb	r3, [r3, #0]
 80224ca:	220f      	movs	r2, #15
 80224cc:	401a      	ands	r2, r3
 80224ce:	6878      	ldr	r0, [r7, #4]
 80224d0:	23ac      	movs	r3, #172	@ 0xac
 80224d2:	0059      	lsls	r1, r3, #1
 80224d4:	0013      	movs	r3, r2
 80224d6:	009b      	lsls	r3, r3, #2
 80224d8:	189b      	adds	r3, r3, r2
 80224da:	009b      	lsls	r3, r3, #2
 80224dc:	18c3      	adds	r3, r0, r3
 80224de:	185b      	adds	r3, r3, r1
 80224e0:	681b      	ldr	r3, [r3, #0]
 80224e2:	2b00      	cmp	r3, #0
 80224e4:	d106      	bne.n	80224f4 <USBD_StdEPReq+0x2a2>
                {
                  USBD_CtlError(pdev, req);
 80224e6:	683a      	ldr	r2, [r7, #0]
 80224e8:	687b      	ldr	r3, [r7, #4]
 80224ea:	0011      	movs	r1, r2
 80224ec:	0018      	movs	r0, r3
 80224ee:	f000 fbfa 	bl	8022ce6 <USBD_CtlError>
                  break;
 80224f2:	e04d      	b.n	8022590 <USBD_StdEPReq+0x33e>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80224f4:	220e      	movs	r2, #14
 80224f6:	18bb      	adds	r3, r7, r2
 80224f8:	781b      	ldrb	r3, [r3, #0]
 80224fa:	b25b      	sxtb	r3, r3
 80224fc:	2b00      	cmp	r3, #0
 80224fe:	da0c      	bge.n	802251a <USBD_StdEPReq+0x2c8>
 8022500:	18bb      	adds	r3, r7, r2
 8022502:	781b      	ldrb	r3, [r3, #0]
 8022504:	227f      	movs	r2, #127	@ 0x7f
 8022506:	401a      	ands	r2, r3
 8022508:	0013      	movs	r3, r2
 802250a:	009b      	lsls	r3, r3, #2
 802250c:	189b      	adds	r3, r3, r2
 802250e:	009b      	lsls	r3, r3, #2
 8022510:	3310      	adds	r3, #16
 8022512:	687a      	ldr	r2, [r7, #4]
 8022514:	18d3      	adds	r3, r2, r3
 8022516:	3304      	adds	r3, #4
 8022518:	e00d      	b.n	8022536 <USBD_StdEPReq+0x2e4>
                    &pdev->ep_out[ep_addr & 0x7FU];
 802251a:	230e      	movs	r3, #14
 802251c:	18fb      	adds	r3, r7, r3
 802251e:	781b      	ldrb	r3, [r3, #0]
 8022520:	227f      	movs	r2, #127	@ 0x7f
 8022522:	401a      	ands	r2, r3
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8022524:	0013      	movs	r3, r2
 8022526:	009b      	lsls	r3, r3, #2
 8022528:	189b      	adds	r3, r3, r2
 802252a:	009b      	lsls	r3, r3, #2
 802252c:	3351      	adds	r3, #81	@ 0x51
 802252e:	33ff      	adds	r3, #255	@ 0xff
 8022530:	687a      	ldr	r2, [r7, #4]
 8022532:	18d3      	adds	r3, r2, r3
 8022534:	3304      	adds	r3, #4
 8022536:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8022538:	220e      	movs	r2, #14
 802253a:	18bb      	adds	r3, r7, r2
 802253c:	781b      	ldrb	r3, [r3, #0]
 802253e:	2b00      	cmp	r3, #0
 8022540:	d003      	beq.n	802254a <USBD_StdEPReq+0x2f8>
 8022542:	18bb      	adds	r3, r7, r2
 8022544:	781b      	ldrb	r3, [r3, #0]
 8022546:	2b80      	cmp	r3, #128	@ 0x80
 8022548:	d103      	bne.n	8022552 <USBD_StdEPReq+0x300>
              {
                pep->status = 0x0000U;
 802254a:	68bb      	ldr	r3, [r7, #8]
 802254c:	2200      	movs	r2, #0
 802254e:	601a      	str	r2, [r3, #0]
 8022550:	e010      	b.n	8022574 <USBD_StdEPReq+0x322>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8022552:	230e      	movs	r3, #14
 8022554:	18fb      	adds	r3, r7, r3
 8022556:	781a      	ldrb	r2, [r3, #0]
 8022558:	687b      	ldr	r3, [r7, #4]
 802255a:	0011      	movs	r1, r2
 802255c:	0018      	movs	r0, r3
 802255e:	f001 f94c 	bl	80237fa <USBD_LL_IsStallEP>
 8022562:	1e03      	subs	r3, r0, #0
 8022564:	d003      	beq.n	802256e <USBD_StdEPReq+0x31c>
              {
                pep->status = 0x0001U;
 8022566:	68bb      	ldr	r3, [r7, #8]
 8022568:	2201      	movs	r2, #1
 802256a:	601a      	str	r2, [r3, #0]
 802256c:	e002      	b.n	8022574 <USBD_StdEPReq+0x322>
              }
              else
              {
                pep->status = 0x0000U;
 802256e:	68bb      	ldr	r3, [r7, #8]
 8022570:	2200      	movs	r2, #0
 8022572:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8022574:	68b9      	ldr	r1, [r7, #8]
 8022576:	687b      	ldr	r3, [r7, #4]
 8022578:	2202      	movs	r2, #2
 802257a:	0018      	movs	r0, r3
 802257c:	f000 fc31 	bl	8022de2 <USBD_CtlSendData>
              break;
 8022580:	e006      	b.n	8022590 <USBD_StdEPReq+0x33e>

            default:
              USBD_CtlError(pdev, req);
 8022582:	683a      	ldr	r2, [r7, #0]
 8022584:	687b      	ldr	r3, [r7, #4]
 8022586:	0011      	movs	r1, r2
 8022588:	0018      	movs	r0, r3
 802258a:	f000 fbac 	bl	8022ce6 <USBD_CtlError>
              break;
 802258e:	46c0      	nop			@ (mov r8, r8)
          }
          break;
 8022590:	e006      	b.n	80225a0 <USBD_StdEPReq+0x34e>

        default:
          USBD_CtlError(pdev, req);
 8022592:	683a      	ldr	r2, [r7, #0]
 8022594:	687b      	ldr	r3, [r7, #4]
 8022596:	0011      	movs	r1, r2
 8022598:	0018      	movs	r0, r3
 802259a:	f000 fba4 	bl	8022ce6 <USBD_CtlError>
          break;
 802259e:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 80225a0:	e006      	b.n	80225b0 <USBD_StdEPReq+0x35e>

    default:
      USBD_CtlError(pdev, req);
 80225a2:	683a      	ldr	r2, [r7, #0]
 80225a4:	687b      	ldr	r3, [r7, #4]
 80225a6:	0011      	movs	r1, r2
 80225a8:	0018      	movs	r0, r3
 80225aa:	f000 fb9c 	bl	8022ce6 <USBD_CtlError>
      break;
 80225ae:	46c0      	nop			@ (mov r8, r8)
  }

  return ret;
 80225b0:	230f      	movs	r3, #15
 80225b2:	18fb      	adds	r3, r7, r3
 80225b4:	781b      	ldrb	r3, [r3, #0]
}
 80225b6:	0018      	movs	r0, r3
 80225b8:	46bd      	mov	sp, r7
 80225ba:	b004      	add	sp, #16
 80225bc:	bdb0      	pop	{r4, r5, r7, pc}
	...

080225c0 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 80225c0:	b580      	push	{r7, lr}
 80225c2:	b084      	sub	sp, #16
 80225c4:	af00      	add	r7, sp, #0
 80225c6:	6078      	str	r0, [r7, #4]
 80225c8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80225ca:	2308      	movs	r3, #8
 80225cc:	18fb      	adds	r3, r7, r3
 80225ce:	2200      	movs	r2, #0
 80225d0:	801a      	strh	r2, [r3, #0]
  uint8_t *pbuf = NULL;
 80225d2:	2300      	movs	r3, #0
 80225d4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80225d6:	230b      	movs	r3, #11
 80225d8:	18fb      	adds	r3, r7, r3
 80225da:	2200      	movs	r2, #0
 80225dc:	701a      	strb	r2, [r3, #0]

  switch (req->wValue >> 8)
 80225de:	683b      	ldr	r3, [r7, #0]
 80225e0:	885b      	ldrh	r3, [r3, #2]
 80225e2:	0a1b      	lsrs	r3, r3, #8
 80225e4:	b29b      	uxth	r3, r3
 80225e6:	2b07      	cmp	r3, #7
 80225e8:	d900      	bls.n	80225ec <USBD_GetDescriptor+0x2c>
 80225ea:	e159      	b.n	80228a0 <USBD_GetDescriptor+0x2e0>
 80225ec:	009a      	lsls	r2, r3, #2
 80225ee:	4bcb      	ldr	r3, [pc, #812]	@ (802291c <USBD_GetDescriptor+0x35c>)
 80225f0:	18d3      	adds	r3, r2, r3
 80225f2:	681b      	ldr	r3, [r3, #0]
 80225f4:	469f      	mov	pc, r3
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80225f6:	687a      	ldr	r2, [r7, #4]
 80225f8:	23ac      	movs	r3, #172	@ 0xac
 80225fa:	009b      	lsls	r3, r3, #2
 80225fc:	58d3      	ldr	r3, [r2, r3]
 80225fe:	681b      	ldr	r3, [r3, #0]
 8022600:	687a      	ldr	r2, [r7, #4]
 8022602:	7c12      	ldrb	r2, [r2, #16]
 8022604:	2108      	movs	r1, #8
 8022606:	1879      	adds	r1, r7, r1
 8022608:	0010      	movs	r0, r2
 802260a:	4798      	blx	r3
 802260c:	0003      	movs	r3, r0
 802260e:	60fb      	str	r3, [r7, #12]
      break;
 8022610:	e153      	b.n	80228ba <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8022612:	687b      	ldr	r3, [r7, #4]
 8022614:	7c1b      	ldrb	r3, [r3, #16]
 8022616:	2b00      	cmp	r3, #0
 8022618:	d10f      	bne.n	802263a <USBD_GetDescriptor+0x7a>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 802261a:	687a      	ldr	r2, [r7, #4]
 802261c:	23ad      	movs	r3, #173	@ 0xad
 802261e:	009b      	lsls	r3, r3, #2
 8022620:	58d3      	ldr	r3, [r2, r3]
 8022622:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8022624:	2208      	movs	r2, #8
 8022626:	18ba      	adds	r2, r7, r2
 8022628:	0010      	movs	r0, r2
 802262a:	4798      	blx	r3
 802262c:	0003      	movs	r3, r0
 802262e:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8022630:	68fb      	ldr	r3, [r7, #12]
 8022632:	3301      	adds	r3, #1
 8022634:	2202      	movs	r2, #2
 8022636:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8022638:	e13f      	b.n	80228ba <USBD_GetDescriptor+0x2fa>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 802263a:	687a      	ldr	r2, [r7, #4]
 802263c:	23ad      	movs	r3, #173	@ 0xad
 802263e:	009b      	lsls	r3, r3, #2
 8022640:	58d3      	ldr	r3, [r2, r3]
 8022642:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8022644:	2208      	movs	r2, #8
 8022646:	18ba      	adds	r2, r7, r2
 8022648:	0010      	movs	r0, r2
 802264a:	4798      	blx	r3
 802264c:	0003      	movs	r3, r0
 802264e:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8022650:	68fb      	ldr	r3, [r7, #12]
 8022652:	3301      	adds	r3, #1
 8022654:	2202      	movs	r2, #2
 8022656:	701a      	strb	r2, [r3, #0]
      break;
 8022658:	e12f      	b.n	80228ba <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 802265a:	683b      	ldr	r3, [r7, #0]
 802265c:	885b      	ldrh	r3, [r3, #2]
 802265e:	b2db      	uxtb	r3, r3
 8022660:	2b05      	cmp	r3, #5
 8022662:	d900      	bls.n	8022666 <USBD_GetDescriptor+0xa6>
 8022664:	e0d0      	b.n	8022808 <USBD_GetDescriptor+0x248>
 8022666:	009a      	lsls	r2, r3, #2
 8022668:	4bad      	ldr	r3, [pc, #692]	@ (8022920 <USBD_GetDescriptor+0x360>)
 802266a:	18d3      	adds	r3, r2, r3
 802266c:	681b      	ldr	r3, [r3, #0]
 802266e:	469f      	mov	pc, r3
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8022670:	687a      	ldr	r2, [r7, #4]
 8022672:	23ac      	movs	r3, #172	@ 0xac
 8022674:	009b      	lsls	r3, r3, #2
 8022676:	58d3      	ldr	r3, [r2, r3]
 8022678:	685b      	ldr	r3, [r3, #4]
 802267a:	2b00      	cmp	r3, #0
 802267c:	d00d      	beq.n	802269a <USBD_GetDescriptor+0xda>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 802267e:	687a      	ldr	r2, [r7, #4]
 8022680:	23ac      	movs	r3, #172	@ 0xac
 8022682:	009b      	lsls	r3, r3, #2
 8022684:	58d3      	ldr	r3, [r2, r3]
 8022686:	685b      	ldr	r3, [r3, #4]
 8022688:	687a      	ldr	r2, [r7, #4]
 802268a:	7c12      	ldrb	r2, [r2, #16]
 802268c:	2108      	movs	r1, #8
 802268e:	1879      	adds	r1, r7, r1
 8022690:	0010      	movs	r0, r2
 8022692:	4798      	blx	r3
 8022694:	0003      	movs	r3, r0
 8022696:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8022698:	e0c3      	b.n	8022822 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 802269a:	683a      	ldr	r2, [r7, #0]
 802269c:	687b      	ldr	r3, [r7, #4]
 802269e:	0011      	movs	r1, r2
 80226a0:	0018      	movs	r0, r3
 80226a2:	f000 fb20 	bl	8022ce6 <USBD_CtlError>
            err++;
 80226a6:	210b      	movs	r1, #11
 80226a8:	187b      	adds	r3, r7, r1
 80226aa:	781a      	ldrb	r2, [r3, #0]
 80226ac:	187b      	adds	r3, r7, r1
 80226ae:	3201      	adds	r2, #1
 80226b0:	701a      	strb	r2, [r3, #0]
          break;
 80226b2:	e0b6      	b.n	8022822 <USBD_GetDescriptor+0x262>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80226b4:	687a      	ldr	r2, [r7, #4]
 80226b6:	23ac      	movs	r3, #172	@ 0xac
 80226b8:	009b      	lsls	r3, r3, #2
 80226ba:	58d3      	ldr	r3, [r2, r3]
 80226bc:	689b      	ldr	r3, [r3, #8]
 80226be:	2b00      	cmp	r3, #0
 80226c0:	d00d      	beq.n	80226de <USBD_GetDescriptor+0x11e>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80226c2:	687a      	ldr	r2, [r7, #4]
 80226c4:	23ac      	movs	r3, #172	@ 0xac
 80226c6:	009b      	lsls	r3, r3, #2
 80226c8:	58d3      	ldr	r3, [r2, r3]
 80226ca:	689b      	ldr	r3, [r3, #8]
 80226cc:	687a      	ldr	r2, [r7, #4]
 80226ce:	7c12      	ldrb	r2, [r2, #16]
 80226d0:	2108      	movs	r1, #8
 80226d2:	1879      	adds	r1, r7, r1
 80226d4:	0010      	movs	r0, r2
 80226d6:	4798      	blx	r3
 80226d8:	0003      	movs	r3, r0
 80226da:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80226dc:	e0a1      	b.n	8022822 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 80226de:	683a      	ldr	r2, [r7, #0]
 80226e0:	687b      	ldr	r3, [r7, #4]
 80226e2:	0011      	movs	r1, r2
 80226e4:	0018      	movs	r0, r3
 80226e6:	f000 fafe 	bl	8022ce6 <USBD_CtlError>
            err++;
 80226ea:	210b      	movs	r1, #11
 80226ec:	187b      	adds	r3, r7, r1
 80226ee:	781a      	ldrb	r2, [r3, #0]
 80226f0:	187b      	adds	r3, r7, r1
 80226f2:	3201      	adds	r2, #1
 80226f4:	701a      	strb	r2, [r3, #0]
          break;
 80226f6:	e094      	b.n	8022822 <USBD_GetDescriptor+0x262>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80226f8:	687a      	ldr	r2, [r7, #4]
 80226fa:	23ac      	movs	r3, #172	@ 0xac
 80226fc:	009b      	lsls	r3, r3, #2
 80226fe:	58d3      	ldr	r3, [r2, r3]
 8022700:	68db      	ldr	r3, [r3, #12]
 8022702:	2b00      	cmp	r3, #0
 8022704:	d00d      	beq.n	8022722 <USBD_GetDescriptor+0x162>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8022706:	687a      	ldr	r2, [r7, #4]
 8022708:	23ac      	movs	r3, #172	@ 0xac
 802270a:	009b      	lsls	r3, r3, #2
 802270c:	58d3      	ldr	r3, [r2, r3]
 802270e:	68db      	ldr	r3, [r3, #12]
 8022710:	687a      	ldr	r2, [r7, #4]
 8022712:	7c12      	ldrb	r2, [r2, #16]
 8022714:	2108      	movs	r1, #8
 8022716:	1879      	adds	r1, r7, r1
 8022718:	0010      	movs	r0, r2
 802271a:	4798      	blx	r3
 802271c:	0003      	movs	r3, r0
 802271e:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8022720:	e07f      	b.n	8022822 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 8022722:	683a      	ldr	r2, [r7, #0]
 8022724:	687b      	ldr	r3, [r7, #4]
 8022726:	0011      	movs	r1, r2
 8022728:	0018      	movs	r0, r3
 802272a:	f000 fadc 	bl	8022ce6 <USBD_CtlError>
            err++;
 802272e:	210b      	movs	r1, #11
 8022730:	187b      	adds	r3, r7, r1
 8022732:	781a      	ldrb	r2, [r3, #0]
 8022734:	187b      	adds	r3, r7, r1
 8022736:	3201      	adds	r2, #1
 8022738:	701a      	strb	r2, [r3, #0]
          break;
 802273a:	e072      	b.n	8022822 <USBD_GetDescriptor+0x262>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 802273c:	687a      	ldr	r2, [r7, #4]
 802273e:	23ac      	movs	r3, #172	@ 0xac
 8022740:	009b      	lsls	r3, r3, #2
 8022742:	58d3      	ldr	r3, [r2, r3]
 8022744:	691b      	ldr	r3, [r3, #16]
 8022746:	2b00      	cmp	r3, #0
 8022748:	d00d      	beq.n	8022766 <USBD_GetDescriptor+0x1a6>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 802274a:	687a      	ldr	r2, [r7, #4]
 802274c:	23ac      	movs	r3, #172	@ 0xac
 802274e:	009b      	lsls	r3, r3, #2
 8022750:	58d3      	ldr	r3, [r2, r3]
 8022752:	691b      	ldr	r3, [r3, #16]
 8022754:	687a      	ldr	r2, [r7, #4]
 8022756:	7c12      	ldrb	r2, [r2, #16]
 8022758:	2108      	movs	r1, #8
 802275a:	1879      	adds	r1, r7, r1
 802275c:	0010      	movs	r0, r2
 802275e:	4798      	blx	r3
 8022760:	0003      	movs	r3, r0
 8022762:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8022764:	e05d      	b.n	8022822 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 8022766:	683a      	ldr	r2, [r7, #0]
 8022768:	687b      	ldr	r3, [r7, #4]
 802276a:	0011      	movs	r1, r2
 802276c:	0018      	movs	r0, r3
 802276e:	f000 faba 	bl	8022ce6 <USBD_CtlError>
            err++;
 8022772:	210b      	movs	r1, #11
 8022774:	187b      	adds	r3, r7, r1
 8022776:	781a      	ldrb	r2, [r3, #0]
 8022778:	187b      	adds	r3, r7, r1
 802277a:	3201      	adds	r2, #1
 802277c:	701a      	strb	r2, [r3, #0]
          break;
 802277e:	e050      	b.n	8022822 <USBD_GetDescriptor+0x262>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8022780:	687a      	ldr	r2, [r7, #4]
 8022782:	23ac      	movs	r3, #172	@ 0xac
 8022784:	009b      	lsls	r3, r3, #2
 8022786:	58d3      	ldr	r3, [r2, r3]
 8022788:	695b      	ldr	r3, [r3, #20]
 802278a:	2b00      	cmp	r3, #0
 802278c:	d00d      	beq.n	80227aa <USBD_GetDescriptor+0x1ea>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 802278e:	687a      	ldr	r2, [r7, #4]
 8022790:	23ac      	movs	r3, #172	@ 0xac
 8022792:	009b      	lsls	r3, r3, #2
 8022794:	58d3      	ldr	r3, [r2, r3]
 8022796:	695b      	ldr	r3, [r3, #20]
 8022798:	687a      	ldr	r2, [r7, #4]
 802279a:	7c12      	ldrb	r2, [r2, #16]
 802279c:	2108      	movs	r1, #8
 802279e:	1879      	adds	r1, r7, r1
 80227a0:	0010      	movs	r0, r2
 80227a2:	4798      	blx	r3
 80227a4:	0003      	movs	r3, r0
 80227a6:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80227a8:	e03b      	b.n	8022822 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 80227aa:	683a      	ldr	r2, [r7, #0]
 80227ac:	687b      	ldr	r3, [r7, #4]
 80227ae:	0011      	movs	r1, r2
 80227b0:	0018      	movs	r0, r3
 80227b2:	f000 fa98 	bl	8022ce6 <USBD_CtlError>
            err++;
 80227b6:	210b      	movs	r1, #11
 80227b8:	187b      	adds	r3, r7, r1
 80227ba:	781a      	ldrb	r2, [r3, #0]
 80227bc:	187b      	adds	r3, r7, r1
 80227be:	3201      	adds	r2, #1
 80227c0:	701a      	strb	r2, [r3, #0]
          break;
 80227c2:	e02e      	b.n	8022822 <USBD_GetDescriptor+0x262>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80227c4:	687a      	ldr	r2, [r7, #4]
 80227c6:	23ac      	movs	r3, #172	@ 0xac
 80227c8:	009b      	lsls	r3, r3, #2
 80227ca:	58d3      	ldr	r3, [r2, r3]
 80227cc:	699b      	ldr	r3, [r3, #24]
 80227ce:	2b00      	cmp	r3, #0
 80227d0:	d00d      	beq.n	80227ee <USBD_GetDescriptor+0x22e>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80227d2:	687a      	ldr	r2, [r7, #4]
 80227d4:	23ac      	movs	r3, #172	@ 0xac
 80227d6:	009b      	lsls	r3, r3, #2
 80227d8:	58d3      	ldr	r3, [r2, r3]
 80227da:	699b      	ldr	r3, [r3, #24]
 80227dc:	687a      	ldr	r2, [r7, #4]
 80227de:	7c12      	ldrb	r2, [r2, #16]
 80227e0:	2108      	movs	r1, #8
 80227e2:	1879      	adds	r1, r7, r1
 80227e4:	0010      	movs	r0, r2
 80227e6:	4798      	blx	r3
 80227e8:	0003      	movs	r3, r0
 80227ea:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80227ec:	e019      	b.n	8022822 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 80227ee:	683a      	ldr	r2, [r7, #0]
 80227f0:	687b      	ldr	r3, [r7, #4]
 80227f2:	0011      	movs	r1, r2
 80227f4:	0018      	movs	r0, r3
 80227f6:	f000 fa76 	bl	8022ce6 <USBD_CtlError>
            err++;
 80227fa:	210b      	movs	r1, #11
 80227fc:	187b      	adds	r3, r7, r1
 80227fe:	781a      	ldrb	r2, [r3, #0]
 8022800:	187b      	adds	r3, r7, r1
 8022802:	3201      	adds	r2, #1
 8022804:	701a      	strb	r2, [r3, #0]
          break;
 8022806:	e00c      	b.n	8022822 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8022808:	683a      	ldr	r2, [r7, #0]
 802280a:	687b      	ldr	r3, [r7, #4]
 802280c:	0011      	movs	r1, r2
 802280e:	0018      	movs	r0, r3
 8022810:	f000 fa69 	bl	8022ce6 <USBD_CtlError>
          err++;
 8022814:	210b      	movs	r1, #11
 8022816:	187b      	adds	r3, r7, r1
 8022818:	781a      	ldrb	r2, [r3, #0]
 802281a:	187b      	adds	r3, r7, r1
 802281c:	3201      	adds	r2, #1
 802281e:	701a      	strb	r2, [r3, #0]
#endif
      }
      break;
 8022820:	e04b      	b.n	80228ba <USBD_GetDescriptor+0x2fa>
 8022822:	e04a      	b.n	80228ba <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8022824:	687b      	ldr	r3, [r7, #4]
 8022826:	7c1b      	ldrb	r3, [r3, #16]
 8022828:	2b00      	cmp	r3, #0
 802282a:	d10b      	bne.n	8022844 <USBD_GetDescriptor+0x284>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 802282c:	687a      	ldr	r2, [r7, #4]
 802282e:	23ad      	movs	r3, #173	@ 0xad
 8022830:	009b      	lsls	r3, r3, #2
 8022832:	58d3      	ldr	r3, [r2, r3]
 8022834:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8022836:	2208      	movs	r2, #8
 8022838:	18ba      	adds	r2, r7, r2
 802283a:	0010      	movs	r0, r2
 802283c:	4798      	blx	r3
 802283e:	0003      	movs	r3, r0
 8022840:	60fb      	str	r3, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8022842:	e03a      	b.n	80228ba <USBD_GetDescriptor+0x2fa>
        USBD_CtlError(pdev, req);
 8022844:	683a      	ldr	r2, [r7, #0]
 8022846:	687b      	ldr	r3, [r7, #4]
 8022848:	0011      	movs	r1, r2
 802284a:	0018      	movs	r0, r3
 802284c:	f000 fa4b 	bl	8022ce6 <USBD_CtlError>
        err++;
 8022850:	210b      	movs	r1, #11
 8022852:	187b      	adds	r3, r7, r1
 8022854:	781a      	ldrb	r2, [r3, #0]
 8022856:	187b      	adds	r3, r7, r1
 8022858:	3201      	adds	r2, #1
 802285a:	701a      	strb	r2, [r3, #0]
      break;
 802285c:	e02d      	b.n	80228ba <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 802285e:	687b      	ldr	r3, [r7, #4]
 8022860:	7c1b      	ldrb	r3, [r3, #16]
 8022862:	2b00      	cmp	r3, #0
 8022864:	d10f      	bne.n	8022886 <USBD_GetDescriptor+0x2c6>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8022866:	687a      	ldr	r2, [r7, #4]
 8022868:	23ad      	movs	r3, #173	@ 0xad
 802286a:	009b      	lsls	r3, r3, #2
 802286c:	58d3      	ldr	r3, [r2, r3]
 802286e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8022870:	2208      	movs	r2, #8
 8022872:	18ba      	adds	r2, r7, r2
 8022874:	0010      	movs	r0, r2
 8022876:	4798      	blx	r3
 8022878:	0003      	movs	r3, r0
 802287a:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 802287c:	68fb      	ldr	r3, [r7, #12]
 802287e:	3301      	adds	r3, #1
 8022880:	2207      	movs	r2, #7
 8022882:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8022884:	e019      	b.n	80228ba <USBD_GetDescriptor+0x2fa>
        USBD_CtlError(pdev, req);
 8022886:	683a      	ldr	r2, [r7, #0]
 8022888:	687b      	ldr	r3, [r7, #4]
 802288a:	0011      	movs	r1, r2
 802288c:	0018      	movs	r0, r3
 802288e:	f000 fa2a 	bl	8022ce6 <USBD_CtlError>
        err++;
 8022892:	210b      	movs	r1, #11
 8022894:	187b      	adds	r3, r7, r1
 8022896:	781a      	ldrb	r2, [r3, #0]
 8022898:	187b      	adds	r3, r7, r1
 802289a:	3201      	adds	r2, #1
 802289c:	701a      	strb	r2, [r3, #0]
      break;
 802289e:	e00c      	b.n	80228ba <USBD_GetDescriptor+0x2fa>

    default:
      USBD_CtlError(pdev, req);
 80228a0:	683a      	ldr	r2, [r7, #0]
 80228a2:	687b      	ldr	r3, [r7, #4]
 80228a4:	0011      	movs	r1, r2
 80228a6:	0018      	movs	r0, r3
 80228a8:	f000 fa1d 	bl	8022ce6 <USBD_CtlError>
      err++;
 80228ac:	210b      	movs	r1, #11
 80228ae:	187b      	adds	r3, r7, r1
 80228b0:	781a      	ldrb	r2, [r3, #0]
 80228b2:	187b      	adds	r3, r7, r1
 80228b4:	3201      	adds	r2, #1
 80228b6:	701a      	strb	r2, [r3, #0]
      break;
 80228b8:	46c0      	nop			@ (mov r8, r8)
  }

  if (err != 0U)
 80228ba:	230b      	movs	r3, #11
 80228bc:	18fb      	adds	r3, r7, r3
 80228be:	781b      	ldrb	r3, [r3, #0]
 80228c0:	2b00      	cmp	r3, #0
 80228c2:	d127      	bne.n	8022914 <USBD_GetDescriptor+0x354>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 80228c4:	2108      	movs	r1, #8
 80228c6:	187b      	adds	r3, r7, r1
 80228c8:	881b      	ldrh	r3, [r3, #0]
 80228ca:	2b00      	cmp	r3, #0
 80228cc:	d019      	beq.n	8022902 <USBD_GetDescriptor+0x342>
 80228ce:	683b      	ldr	r3, [r7, #0]
 80228d0:	88db      	ldrh	r3, [r3, #6]
 80228d2:	2b00      	cmp	r3, #0
 80228d4:	d015      	beq.n	8022902 <USBD_GetDescriptor+0x342>
    {
      len = MIN(len, req->wLength);
 80228d6:	683b      	ldr	r3, [r7, #0]
 80228d8:	88da      	ldrh	r2, [r3, #6]
 80228da:	187b      	adds	r3, r7, r1
 80228dc:	881b      	ldrh	r3, [r3, #0]
 80228de:	1c18      	adds	r0, r3, #0
 80228e0:	1c11      	adds	r1, r2, #0
 80228e2:	b28a      	uxth	r2, r1
 80228e4:	b283      	uxth	r3, r0
 80228e6:	429a      	cmp	r2, r3
 80228e8:	d900      	bls.n	80228ec <USBD_GetDescriptor+0x32c>
 80228ea:	1c01      	adds	r1, r0, #0
 80228ec:	b28a      	uxth	r2, r1
 80228ee:	2108      	movs	r1, #8
 80228f0:	187b      	adds	r3, r7, r1
 80228f2:	801a      	strh	r2, [r3, #0]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80228f4:	187b      	adds	r3, r7, r1
 80228f6:	881a      	ldrh	r2, [r3, #0]
 80228f8:	68f9      	ldr	r1, [r7, #12]
 80228fa:	687b      	ldr	r3, [r7, #4]
 80228fc:	0018      	movs	r0, r3
 80228fe:	f000 fa70 	bl	8022de2 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8022902:	683b      	ldr	r3, [r7, #0]
 8022904:	88db      	ldrh	r3, [r3, #6]
 8022906:	2b00      	cmp	r3, #0
 8022908:	d105      	bne.n	8022916 <USBD_GetDescriptor+0x356>
    {
      (void)USBD_CtlSendStatus(pdev);
 802290a:	687b      	ldr	r3, [r7, #4]
 802290c:	0018      	movs	r0, r3
 802290e:	f000 fad2 	bl	8022eb6 <USBD_CtlSendStatus>
 8022912:	e000      	b.n	8022916 <USBD_GetDescriptor+0x356>
    return;
 8022914:	46c0      	nop			@ (mov r8, r8)
    }
  }
}
 8022916:	46bd      	mov	sp, r7
 8022918:	b004      	add	sp, #16
 802291a:	bd80      	pop	{r7, pc}
 802291c:	0802e560 	.word	0x0802e560
 8022920:	0802e580 	.word	0x0802e580

08022924 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8022924:	b590      	push	{r4, r7, lr}
 8022926:	b085      	sub	sp, #20
 8022928:	af00      	add	r7, sp, #0
 802292a:	6078      	str	r0, [r7, #4]
 802292c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 802292e:	683b      	ldr	r3, [r7, #0]
 8022930:	889b      	ldrh	r3, [r3, #4]
 8022932:	2b00      	cmp	r3, #0
 8022934:	d13d      	bne.n	80229b2 <USBD_SetAddress+0x8e>
 8022936:	683b      	ldr	r3, [r7, #0]
 8022938:	88db      	ldrh	r3, [r3, #6]
 802293a:	2b00      	cmp	r3, #0
 802293c:	d139      	bne.n	80229b2 <USBD_SetAddress+0x8e>
 802293e:	683b      	ldr	r3, [r7, #0]
 8022940:	885b      	ldrh	r3, [r3, #2]
 8022942:	2b7f      	cmp	r3, #127	@ 0x7f
 8022944:	d835      	bhi.n	80229b2 <USBD_SetAddress+0x8e>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8022946:	683b      	ldr	r3, [r7, #0]
 8022948:	885b      	ldrh	r3, [r3, #2]
 802294a:	b2da      	uxtb	r2, r3
 802294c:	230f      	movs	r3, #15
 802294e:	18fb      	adds	r3, r7, r3
 8022950:	217f      	movs	r1, #127	@ 0x7f
 8022952:	400a      	ands	r2, r1
 8022954:	701a      	strb	r2, [r3, #0]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8022956:	687a      	ldr	r2, [r7, #4]
 8022958:	23a7      	movs	r3, #167	@ 0xa7
 802295a:	009b      	lsls	r3, r3, #2
 802295c:	5cd3      	ldrb	r3, [r2, r3]
 802295e:	2b03      	cmp	r3, #3
 8022960:	d106      	bne.n	8022970 <USBD_SetAddress+0x4c>
    {
      USBD_CtlError(pdev, req);
 8022962:	683a      	ldr	r2, [r7, #0]
 8022964:	687b      	ldr	r3, [r7, #4]
 8022966:	0011      	movs	r1, r2
 8022968:	0018      	movs	r0, r3
 802296a:	f000 f9bc 	bl	8022ce6 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 802296e:	e027      	b.n	80229c0 <USBD_SetAddress+0x9c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8022970:	687b      	ldr	r3, [r7, #4]
 8022972:	240f      	movs	r4, #15
 8022974:	193a      	adds	r2, r7, r4
 8022976:	4914      	ldr	r1, [pc, #80]	@ (80229c8 <USBD_SetAddress+0xa4>)
 8022978:	7812      	ldrb	r2, [r2, #0]
 802297a:	545a      	strb	r2, [r3, r1]
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 802297c:	193b      	adds	r3, r7, r4
 802297e:	781a      	ldrb	r2, [r3, #0]
 8022980:	687b      	ldr	r3, [r7, #4]
 8022982:	0011      	movs	r1, r2
 8022984:	0018      	movs	r0, r3
 8022986:	f000 ff69 	bl	802385c <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 802298a:	687b      	ldr	r3, [r7, #4]
 802298c:	0018      	movs	r0, r3
 802298e:	f000 fa92 	bl	8022eb6 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8022992:	193b      	adds	r3, r7, r4
 8022994:	781b      	ldrb	r3, [r3, #0]
 8022996:	2b00      	cmp	r3, #0
 8022998:	d005      	beq.n	80229a6 <USBD_SetAddress+0x82>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 802299a:	687a      	ldr	r2, [r7, #4]
 802299c:	23a7      	movs	r3, #167	@ 0xa7
 802299e:	009b      	lsls	r3, r3, #2
 80229a0:	2102      	movs	r1, #2
 80229a2:	54d1      	strb	r1, [r2, r3]
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80229a4:	e00c      	b.n	80229c0 <USBD_SetAddress+0x9c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80229a6:	687a      	ldr	r2, [r7, #4]
 80229a8:	23a7      	movs	r3, #167	@ 0xa7
 80229aa:	009b      	lsls	r3, r3, #2
 80229ac:	2101      	movs	r1, #1
 80229ae:	54d1      	strb	r1, [r2, r3]
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80229b0:	e006      	b.n	80229c0 <USBD_SetAddress+0x9c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80229b2:	683a      	ldr	r2, [r7, #0]
 80229b4:	687b      	ldr	r3, [r7, #4]
 80229b6:	0011      	movs	r1, r2
 80229b8:	0018      	movs	r0, r3
 80229ba:	f000 f994 	bl	8022ce6 <USBD_CtlError>
  }
}
 80229be:	46c0      	nop			@ (mov r8, r8)
 80229c0:	46c0      	nop			@ (mov r8, r8)
 80229c2:	46bd      	mov	sp, r7
 80229c4:	b005      	add	sp, #20
 80229c6:	bd90      	pop	{r4, r7, pc}
 80229c8:	0000029e 	.word	0x0000029e

080229cc <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80229cc:	b580      	push	{r7, lr}
 80229ce:	b082      	sub	sp, #8
 80229d0:	af00      	add	r7, sp, #0
 80229d2:	6078      	str	r0, [r7, #4]
 80229d4:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80229d6:	683b      	ldr	r3, [r7, #0]
 80229d8:	885b      	ldrh	r3, [r3, #2]
 80229da:	b2da      	uxtb	r2, r3
 80229dc:	4b4c      	ldr	r3, [pc, #304]	@ (8022b10 <USBD_SetConfig+0x144>)
 80229de:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80229e0:	4b4b      	ldr	r3, [pc, #300]	@ (8022b10 <USBD_SetConfig+0x144>)
 80229e2:	781b      	ldrb	r3, [r3, #0]
 80229e4:	2b01      	cmp	r3, #1
 80229e6:	d906      	bls.n	80229f6 <USBD_SetConfig+0x2a>
  {
    USBD_CtlError(pdev, req);
 80229e8:	683a      	ldr	r2, [r7, #0]
 80229ea:	687b      	ldr	r3, [r7, #4]
 80229ec:	0011      	movs	r1, r2
 80229ee:	0018      	movs	r0, r3
 80229f0:	f000 f979 	bl	8022ce6 <USBD_CtlError>
 80229f4:	e088      	b.n	8022b08 <USBD_SetConfig+0x13c>
  }
  else
  {
    switch (pdev->dev_state)
 80229f6:	687a      	ldr	r2, [r7, #4]
 80229f8:	23a7      	movs	r3, #167	@ 0xa7
 80229fa:	009b      	lsls	r3, r3, #2
 80229fc:	5cd3      	ldrb	r3, [r2, r3]
 80229fe:	2b02      	cmp	r3, #2
 8022a00:	d002      	beq.n	8022a08 <USBD_SetConfig+0x3c>
 8022a02:	2b03      	cmp	r3, #3
 8022a04:	d029      	beq.n	8022a5a <USBD_SetConfig+0x8e>
 8022a06:	e071      	b.n	8022aec <USBD_SetConfig+0x120>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8022a08:	4b41      	ldr	r3, [pc, #260]	@ (8022b10 <USBD_SetConfig+0x144>)
 8022a0a:	781b      	ldrb	r3, [r3, #0]
 8022a0c:	2b00      	cmp	r3, #0
 8022a0e:	d01f      	beq.n	8022a50 <USBD_SetConfig+0x84>
        {
          pdev->dev_config = cfgidx;
 8022a10:	4b3f      	ldr	r3, [pc, #252]	@ (8022b10 <USBD_SetConfig+0x144>)
 8022a12:	781b      	ldrb	r3, [r3, #0]
 8022a14:	001a      	movs	r2, r3
 8022a16:	687b      	ldr	r3, [r7, #4]
 8022a18:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8022a1a:	687a      	ldr	r2, [r7, #4]
 8022a1c:	23a7      	movs	r3, #167	@ 0xa7
 8022a1e:	009b      	lsls	r3, r3, #2
 8022a20:	2103      	movs	r1, #3
 8022a22:	54d1      	strb	r1, [r2, r3]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8022a24:	4b3a      	ldr	r3, [pc, #232]	@ (8022b10 <USBD_SetConfig+0x144>)
 8022a26:	781a      	ldrb	r2, [r3, #0]
 8022a28:	687b      	ldr	r3, [r7, #4]
 8022a2a:	0011      	movs	r1, r2
 8022a2c:	0018      	movs	r0, r3
 8022a2e:	f7ff f8c6 	bl	8021bbe <USBD_SetClassConfig>
 8022a32:	0003      	movs	r3, r0
 8022a34:	2b02      	cmp	r3, #2
 8022a36:	d106      	bne.n	8022a46 <USBD_SetConfig+0x7a>
          {
            USBD_CtlError(pdev, req);
 8022a38:	683a      	ldr	r2, [r7, #0]
 8022a3a:	687b      	ldr	r3, [r7, #4]
 8022a3c:	0011      	movs	r1, r2
 8022a3e:	0018      	movs	r0, r3
 8022a40:	f000 f951 	bl	8022ce6 <USBD_CtlError>
            return;
 8022a44:	e060      	b.n	8022b08 <USBD_SetConfig+0x13c>
          }
          USBD_CtlSendStatus(pdev);
 8022a46:	687b      	ldr	r3, [r7, #4]
 8022a48:	0018      	movs	r0, r3
 8022a4a:	f000 fa34 	bl	8022eb6 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8022a4e:	e05b      	b.n	8022b08 <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 8022a50:	687b      	ldr	r3, [r7, #4]
 8022a52:	0018      	movs	r0, r3
 8022a54:	f000 fa2f 	bl	8022eb6 <USBD_CtlSendStatus>
        break;
 8022a58:	e056      	b.n	8022b08 <USBD_SetConfig+0x13c>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8022a5a:	4b2d      	ldr	r3, [pc, #180]	@ (8022b10 <USBD_SetConfig+0x144>)
 8022a5c:	781b      	ldrb	r3, [r3, #0]
 8022a5e:	2b00      	cmp	r3, #0
 8022a60:	d115      	bne.n	8022a8e <USBD_SetConfig+0xc2>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8022a62:	687a      	ldr	r2, [r7, #4]
 8022a64:	23a7      	movs	r3, #167	@ 0xa7
 8022a66:	009b      	lsls	r3, r3, #2
 8022a68:	2102      	movs	r1, #2
 8022a6a:	54d1      	strb	r1, [r2, r3]
          pdev->dev_config = cfgidx;
 8022a6c:	4b28      	ldr	r3, [pc, #160]	@ (8022b10 <USBD_SetConfig+0x144>)
 8022a6e:	781b      	ldrb	r3, [r3, #0]
 8022a70:	001a      	movs	r2, r3
 8022a72:	687b      	ldr	r3, [r7, #4]
 8022a74:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8022a76:	4b26      	ldr	r3, [pc, #152]	@ (8022b10 <USBD_SetConfig+0x144>)
 8022a78:	781a      	ldrb	r2, [r3, #0]
 8022a7a:	687b      	ldr	r3, [r7, #4]
 8022a7c:	0011      	movs	r1, r2
 8022a7e:	0018      	movs	r0, r3
 8022a80:	f7ff f8c4 	bl	8021c0c <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8022a84:	687b      	ldr	r3, [r7, #4]
 8022a86:	0018      	movs	r0, r3
 8022a88:	f000 fa15 	bl	8022eb6 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8022a8c:	e03c      	b.n	8022b08 <USBD_SetConfig+0x13c>
        else if (cfgidx != pdev->dev_config)
 8022a8e:	4b20      	ldr	r3, [pc, #128]	@ (8022b10 <USBD_SetConfig+0x144>)
 8022a90:	781b      	ldrb	r3, [r3, #0]
 8022a92:	001a      	movs	r2, r3
 8022a94:	687b      	ldr	r3, [r7, #4]
 8022a96:	685b      	ldr	r3, [r3, #4]
 8022a98:	429a      	cmp	r2, r3
 8022a9a:	d022      	beq.n	8022ae2 <USBD_SetConfig+0x116>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8022a9c:	687b      	ldr	r3, [r7, #4]
 8022a9e:	685b      	ldr	r3, [r3, #4]
 8022aa0:	b2da      	uxtb	r2, r3
 8022aa2:	687b      	ldr	r3, [r7, #4]
 8022aa4:	0011      	movs	r1, r2
 8022aa6:	0018      	movs	r0, r3
 8022aa8:	f7ff f8b0 	bl	8021c0c <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8022aac:	4b18      	ldr	r3, [pc, #96]	@ (8022b10 <USBD_SetConfig+0x144>)
 8022aae:	781b      	ldrb	r3, [r3, #0]
 8022ab0:	001a      	movs	r2, r3
 8022ab2:	687b      	ldr	r3, [r7, #4]
 8022ab4:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8022ab6:	4b16      	ldr	r3, [pc, #88]	@ (8022b10 <USBD_SetConfig+0x144>)
 8022ab8:	781a      	ldrb	r2, [r3, #0]
 8022aba:	687b      	ldr	r3, [r7, #4]
 8022abc:	0011      	movs	r1, r2
 8022abe:	0018      	movs	r0, r3
 8022ac0:	f7ff f87d 	bl	8021bbe <USBD_SetClassConfig>
 8022ac4:	0003      	movs	r3, r0
 8022ac6:	2b02      	cmp	r3, #2
 8022ac8:	d106      	bne.n	8022ad8 <USBD_SetConfig+0x10c>
            USBD_CtlError(pdev, req);
 8022aca:	683a      	ldr	r2, [r7, #0]
 8022acc:	687b      	ldr	r3, [r7, #4]
 8022ace:	0011      	movs	r1, r2
 8022ad0:	0018      	movs	r0, r3
 8022ad2:	f000 f908 	bl	8022ce6 <USBD_CtlError>
            return;
 8022ad6:	e017      	b.n	8022b08 <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 8022ad8:	687b      	ldr	r3, [r7, #4]
 8022ada:	0018      	movs	r0, r3
 8022adc:	f000 f9eb 	bl	8022eb6 <USBD_CtlSendStatus>
        break;
 8022ae0:	e012      	b.n	8022b08 <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 8022ae2:	687b      	ldr	r3, [r7, #4]
 8022ae4:	0018      	movs	r0, r3
 8022ae6:	f000 f9e6 	bl	8022eb6 <USBD_CtlSendStatus>
        break;
 8022aea:	e00d      	b.n	8022b08 <USBD_SetConfig+0x13c>

      default:
        USBD_CtlError(pdev, req);
 8022aec:	683a      	ldr	r2, [r7, #0]
 8022aee:	687b      	ldr	r3, [r7, #4]
 8022af0:	0011      	movs	r1, r2
 8022af2:	0018      	movs	r0, r3
 8022af4:	f000 f8f7 	bl	8022ce6 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8022af8:	4b05      	ldr	r3, [pc, #20]	@ (8022b10 <USBD_SetConfig+0x144>)
 8022afa:	781a      	ldrb	r2, [r3, #0]
 8022afc:	687b      	ldr	r3, [r7, #4]
 8022afe:	0011      	movs	r1, r2
 8022b00:	0018      	movs	r0, r3
 8022b02:	f7ff f883 	bl	8021c0c <USBD_ClrClassConfig>
        break;
 8022b06:	46c0      	nop			@ (mov r8, r8)
    }
  }
}
 8022b08:	46bd      	mov	sp, r7
 8022b0a:	b002      	add	sp, #8
 8022b0c:	bd80      	pop	{r7, pc}
 8022b0e:	46c0      	nop			@ (mov r8, r8)
 8022b10:	20002534 	.word	0x20002534

08022b14 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8022b14:	b580      	push	{r7, lr}
 8022b16:	b082      	sub	sp, #8
 8022b18:	af00      	add	r7, sp, #0
 8022b1a:	6078      	str	r0, [r7, #4]
 8022b1c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8022b1e:	683b      	ldr	r3, [r7, #0]
 8022b20:	88db      	ldrh	r3, [r3, #6]
 8022b22:	2b01      	cmp	r3, #1
 8022b24:	d006      	beq.n	8022b34 <USBD_GetConfig+0x20>
  {
    USBD_CtlError(pdev, req);
 8022b26:	683a      	ldr	r2, [r7, #0]
 8022b28:	687b      	ldr	r3, [r7, #4]
 8022b2a:	0011      	movs	r1, r2
 8022b2c:	0018      	movs	r0, r3
 8022b2e:	f000 f8da 	bl	8022ce6 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8022b32:	e026      	b.n	8022b82 <USBD_GetConfig+0x6e>
    switch (pdev->dev_state)
 8022b34:	687a      	ldr	r2, [r7, #4]
 8022b36:	23a7      	movs	r3, #167	@ 0xa7
 8022b38:	009b      	lsls	r3, r3, #2
 8022b3a:	5cd3      	ldrb	r3, [r2, r3]
 8022b3c:	2b02      	cmp	r3, #2
 8022b3e:	dc02      	bgt.n	8022b46 <USBD_GetConfig+0x32>
 8022b40:	2b00      	cmp	r3, #0
 8022b42:	dc03      	bgt.n	8022b4c <USBD_GetConfig+0x38>
 8022b44:	e016      	b.n	8022b74 <USBD_GetConfig+0x60>
 8022b46:	2b03      	cmp	r3, #3
 8022b48:	d00c      	beq.n	8022b64 <USBD_GetConfig+0x50>
 8022b4a:	e013      	b.n	8022b74 <USBD_GetConfig+0x60>
        pdev->dev_default_config = 0U;
 8022b4c:	687b      	ldr	r3, [r7, #4]
 8022b4e:	2200      	movs	r2, #0
 8022b50:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8022b52:	687b      	ldr	r3, [r7, #4]
 8022b54:	3308      	adds	r3, #8
 8022b56:	0019      	movs	r1, r3
 8022b58:	687b      	ldr	r3, [r7, #4]
 8022b5a:	2201      	movs	r2, #1
 8022b5c:	0018      	movs	r0, r3
 8022b5e:	f000 f940 	bl	8022de2 <USBD_CtlSendData>
        break;
 8022b62:	e00e      	b.n	8022b82 <USBD_GetConfig+0x6e>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8022b64:	687b      	ldr	r3, [r7, #4]
 8022b66:	1d19      	adds	r1, r3, #4
 8022b68:	687b      	ldr	r3, [r7, #4]
 8022b6a:	2201      	movs	r2, #1
 8022b6c:	0018      	movs	r0, r3
 8022b6e:	f000 f938 	bl	8022de2 <USBD_CtlSendData>
        break;
 8022b72:	e006      	b.n	8022b82 <USBD_GetConfig+0x6e>
        USBD_CtlError(pdev, req);
 8022b74:	683a      	ldr	r2, [r7, #0]
 8022b76:	687b      	ldr	r3, [r7, #4]
 8022b78:	0011      	movs	r1, r2
 8022b7a:	0018      	movs	r0, r3
 8022b7c:	f000 f8b3 	bl	8022ce6 <USBD_CtlError>
        break;
 8022b80:	46c0      	nop			@ (mov r8, r8)
}
 8022b82:	46c0      	nop			@ (mov r8, r8)
 8022b84:	46bd      	mov	sp, r7
 8022b86:	b002      	add	sp, #8
 8022b88:	bd80      	pop	{r7, pc}

08022b8a <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8022b8a:	b580      	push	{r7, lr}
 8022b8c:	b082      	sub	sp, #8
 8022b8e:	af00      	add	r7, sp, #0
 8022b90:	6078      	str	r0, [r7, #4]
 8022b92:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8022b94:	687a      	ldr	r2, [r7, #4]
 8022b96:	23a7      	movs	r3, #167	@ 0xa7
 8022b98:	009b      	lsls	r3, r3, #2
 8022b9a:	5cd3      	ldrb	r3, [r2, r3]
 8022b9c:	3b01      	subs	r3, #1
 8022b9e:	2b02      	cmp	r3, #2
 8022ba0:	d822      	bhi.n	8022be8 <USBD_GetStatus+0x5e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8022ba2:	683b      	ldr	r3, [r7, #0]
 8022ba4:	88db      	ldrh	r3, [r3, #6]
 8022ba6:	2b02      	cmp	r3, #2
 8022ba8:	d006      	beq.n	8022bb8 <USBD_GetStatus+0x2e>
      {
        USBD_CtlError(pdev, req);
 8022baa:	683a      	ldr	r2, [r7, #0]
 8022bac:	687b      	ldr	r3, [r7, #4]
 8022bae:	0011      	movs	r1, r2
 8022bb0:	0018      	movs	r0, r3
 8022bb2:	f000 f898 	bl	8022ce6 <USBD_CtlError>
        break;
 8022bb6:	e01e      	b.n	8022bf6 <USBD_GetStatus+0x6c>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8022bb8:	687b      	ldr	r3, [r7, #4]
 8022bba:	2201      	movs	r2, #1
 8022bbc:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8022bbe:	687a      	ldr	r2, [r7, #4]
 8022bc0:	23a9      	movs	r3, #169	@ 0xa9
 8022bc2:	009b      	lsls	r3, r3, #2
 8022bc4:	58d3      	ldr	r3, [r2, r3]
 8022bc6:	2b00      	cmp	r3, #0
 8022bc8:	d005      	beq.n	8022bd6 <USBD_GetStatus+0x4c>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8022bca:	687b      	ldr	r3, [r7, #4]
 8022bcc:	68db      	ldr	r3, [r3, #12]
 8022bce:	2202      	movs	r2, #2
 8022bd0:	431a      	orrs	r2, r3
 8022bd2:	687b      	ldr	r3, [r7, #4]
 8022bd4:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8022bd6:	687b      	ldr	r3, [r7, #4]
 8022bd8:	330c      	adds	r3, #12
 8022bda:	0019      	movs	r1, r3
 8022bdc:	687b      	ldr	r3, [r7, #4]
 8022bde:	2202      	movs	r2, #2
 8022be0:	0018      	movs	r0, r3
 8022be2:	f000 f8fe 	bl	8022de2 <USBD_CtlSendData>
      break;
 8022be6:	e006      	b.n	8022bf6 <USBD_GetStatus+0x6c>

    default:
      USBD_CtlError(pdev, req);
 8022be8:	683a      	ldr	r2, [r7, #0]
 8022bea:	687b      	ldr	r3, [r7, #4]
 8022bec:	0011      	movs	r1, r2
 8022bee:	0018      	movs	r0, r3
 8022bf0:	f000 f879 	bl	8022ce6 <USBD_CtlError>
      break;
 8022bf4:	46c0      	nop			@ (mov r8, r8)
  }
}
 8022bf6:	46c0      	nop			@ (mov r8, r8)
 8022bf8:	46bd      	mov	sp, r7
 8022bfa:	b002      	add	sp, #8
 8022bfc:	bd80      	pop	{r7, pc}

08022bfe <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8022bfe:	b580      	push	{r7, lr}
 8022c00:	b082      	sub	sp, #8
 8022c02:	af00      	add	r7, sp, #0
 8022c04:	6078      	str	r0, [r7, #4]
 8022c06:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8022c08:	683b      	ldr	r3, [r7, #0]
 8022c0a:	885b      	ldrh	r3, [r3, #2]
 8022c0c:	2b01      	cmp	r3, #1
 8022c0e:	d108      	bne.n	8022c22 <USBD_SetFeature+0x24>
  {
    pdev->dev_remote_wakeup = 1U;
 8022c10:	687a      	ldr	r2, [r7, #4]
 8022c12:	23a9      	movs	r3, #169	@ 0xa9
 8022c14:	009b      	lsls	r3, r3, #2
 8022c16:	2101      	movs	r1, #1
 8022c18:	50d1      	str	r1, [r2, r3]
    USBD_CtlSendStatus(pdev);
 8022c1a:	687b      	ldr	r3, [r7, #4]
 8022c1c:	0018      	movs	r0, r3
 8022c1e:	f000 f94a 	bl	8022eb6 <USBD_CtlSendStatus>
  }
}
 8022c22:	46c0      	nop			@ (mov r8, r8)
 8022c24:	46bd      	mov	sp, r7
 8022c26:	b002      	add	sp, #8
 8022c28:	bd80      	pop	{r7, pc}

08022c2a <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8022c2a:	b580      	push	{r7, lr}
 8022c2c:	b082      	sub	sp, #8
 8022c2e:	af00      	add	r7, sp, #0
 8022c30:	6078      	str	r0, [r7, #4]
 8022c32:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8022c34:	687a      	ldr	r2, [r7, #4]
 8022c36:	23a7      	movs	r3, #167	@ 0xa7
 8022c38:	009b      	lsls	r3, r3, #2
 8022c3a:	5cd3      	ldrb	r3, [r2, r3]
 8022c3c:	3b01      	subs	r3, #1
 8022c3e:	2b02      	cmp	r3, #2
 8022c40:	d80d      	bhi.n	8022c5e <USBD_ClrFeature+0x34>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8022c42:	683b      	ldr	r3, [r7, #0]
 8022c44:	885b      	ldrh	r3, [r3, #2]
 8022c46:	2b01      	cmp	r3, #1
 8022c48:	d110      	bne.n	8022c6c <USBD_ClrFeature+0x42>
      {
        pdev->dev_remote_wakeup = 0U;
 8022c4a:	687a      	ldr	r2, [r7, #4]
 8022c4c:	23a9      	movs	r3, #169	@ 0xa9
 8022c4e:	009b      	lsls	r3, r3, #2
 8022c50:	2100      	movs	r1, #0
 8022c52:	50d1      	str	r1, [r2, r3]
        USBD_CtlSendStatus(pdev);
 8022c54:	687b      	ldr	r3, [r7, #4]
 8022c56:	0018      	movs	r0, r3
 8022c58:	f000 f92d 	bl	8022eb6 <USBD_CtlSendStatus>
      }
      break;
 8022c5c:	e006      	b.n	8022c6c <USBD_ClrFeature+0x42>

    default:
      USBD_CtlError(pdev, req);
 8022c5e:	683a      	ldr	r2, [r7, #0]
 8022c60:	687b      	ldr	r3, [r7, #4]
 8022c62:	0011      	movs	r1, r2
 8022c64:	0018      	movs	r0, r3
 8022c66:	f000 f83e 	bl	8022ce6 <USBD_CtlError>
      break;
 8022c6a:	e000      	b.n	8022c6e <USBD_ClrFeature+0x44>
      break;
 8022c6c:	46c0      	nop			@ (mov r8, r8)
  }
}
 8022c6e:	46c0      	nop			@ (mov r8, r8)
 8022c70:	46bd      	mov	sp, r7
 8022c72:	b002      	add	sp, #8
 8022c74:	bd80      	pop	{r7, pc}

08022c76 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8022c76:	b580      	push	{r7, lr}
 8022c78:	b082      	sub	sp, #8
 8022c7a:	af00      	add	r7, sp, #0
 8022c7c:	6078      	str	r0, [r7, #4]
 8022c7e:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8022c80:	683b      	ldr	r3, [r7, #0]
 8022c82:	781a      	ldrb	r2, [r3, #0]
 8022c84:	687b      	ldr	r3, [r7, #4]
 8022c86:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8022c88:	683b      	ldr	r3, [r7, #0]
 8022c8a:	785a      	ldrb	r2, [r3, #1]
 8022c8c:	687b      	ldr	r3, [r7, #4]
 8022c8e:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8022c90:	683b      	ldr	r3, [r7, #0]
 8022c92:	3302      	adds	r3, #2
 8022c94:	781b      	ldrb	r3, [r3, #0]
 8022c96:	001a      	movs	r2, r3
 8022c98:	683b      	ldr	r3, [r7, #0]
 8022c9a:	3303      	adds	r3, #3
 8022c9c:	781b      	ldrb	r3, [r3, #0]
 8022c9e:	021b      	lsls	r3, r3, #8
 8022ca0:	b29b      	uxth	r3, r3
 8022ca2:	18d3      	adds	r3, r2, r3
 8022ca4:	b29a      	uxth	r2, r3
 8022ca6:	687b      	ldr	r3, [r7, #4]
 8022ca8:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8022caa:	683b      	ldr	r3, [r7, #0]
 8022cac:	3304      	adds	r3, #4
 8022cae:	781b      	ldrb	r3, [r3, #0]
 8022cb0:	001a      	movs	r2, r3
 8022cb2:	683b      	ldr	r3, [r7, #0]
 8022cb4:	3305      	adds	r3, #5
 8022cb6:	781b      	ldrb	r3, [r3, #0]
 8022cb8:	021b      	lsls	r3, r3, #8
 8022cba:	b29b      	uxth	r3, r3
 8022cbc:	18d3      	adds	r3, r2, r3
 8022cbe:	b29a      	uxth	r2, r3
 8022cc0:	687b      	ldr	r3, [r7, #4]
 8022cc2:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8022cc4:	683b      	ldr	r3, [r7, #0]
 8022cc6:	3306      	adds	r3, #6
 8022cc8:	781b      	ldrb	r3, [r3, #0]
 8022cca:	001a      	movs	r2, r3
 8022ccc:	683b      	ldr	r3, [r7, #0]
 8022cce:	3307      	adds	r3, #7
 8022cd0:	781b      	ldrb	r3, [r3, #0]
 8022cd2:	021b      	lsls	r3, r3, #8
 8022cd4:	b29b      	uxth	r3, r3
 8022cd6:	18d3      	adds	r3, r2, r3
 8022cd8:	b29a      	uxth	r2, r3
 8022cda:	687b      	ldr	r3, [r7, #4]
 8022cdc:	80da      	strh	r2, [r3, #6]

}
 8022cde:	46c0      	nop			@ (mov r8, r8)
 8022ce0:	46bd      	mov	sp, r7
 8022ce2:	b002      	add	sp, #8
 8022ce4:	bd80      	pop	{r7, pc}

08022ce6 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8022ce6:	b580      	push	{r7, lr}
 8022ce8:	b082      	sub	sp, #8
 8022cea:	af00      	add	r7, sp, #0
 8022cec:	6078      	str	r0, [r7, #4]
 8022cee:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8022cf0:	687b      	ldr	r3, [r7, #4]
 8022cf2:	2180      	movs	r1, #128	@ 0x80
 8022cf4:	0018      	movs	r0, r3
 8022cf6:	f000 fd2a 	bl	802374e <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8022cfa:	687b      	ldr	r3, [r7, #4]
 8022cfc:	2100      	movs	r1, #0
 8022cfe:	0018      	movs	r0, r3
 8022d00:	f000 fd25 	bl	802374e <USBD_LL_StallEP>
}
 8022d04:	46c0      	nop			@ (mov r8, r8)
 8022d06:	46bd      	mov	sp, r7
 8022d08:	b002      	add	sp, #8
 8022d0a:	bd80      	pop	{r7, pc}

08022d0c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8022d0c:	b590      	push	{r4, r7, lr}
 8022d0e:	b087      	sub	sp, #28
 8022d10:	af00      	add	r7, sp, #0
 8022d12:	60f8      	str	r0, [r7, #12]
 8022d14:	60b9      	str	r1, [r7, #8]
 8022d16:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8022d18:	2417      	movs	r4, #23
 8022d1a:	193b      	adds	r3, r7, r4
 8022d1c:	2200      	movs	r2, #0
 8022d1e:	701a      	strb	r2, [r3, #0]

  if (desc != NULL)
 8022d20:	68fb      	ldr	r3, [r7, #12]
 8022d22:	2b00      	cmp	r3, #0
 8022d24:	d03c      	beq.n	8022da0 <USBD_GetString+0x94>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8022d26:	68fb      	ldr	r3, [r7, #12]
 8022d28:	0018      	movs	r0, r3
 8022d2a:	f000 f83d 	bl	8022da8 <USBD_GetLen>
 8022d2e:	0003      	movs	r3, r0
 8022d30:	3301      	adds	r3, #1
 8022d32:	b29b      	uxth	r3, r3
 8022d34:	18db      	adds	r3, r3, r3
 8022d36:	b29a      	uxth	r2, r3
 8022d38:	687b      	ldr	r3, [r7, #4]
 8022d3a:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8022d3c:	193b      	adds	r3, r7, r4
 8022d3e:	781b      	ldrb	r3, [r3, #0]
 8022d40:	193a      	adds	r2, r7, r4
 8022d42:	1c59      	adds	r1, r3, #1
 8022d44:	7011      	strb	r1, [r2, #0]
 8022d46:	001a      	movs	r2, r3
 8022d48:	68bb      	ldr	r3, [r7, #8]
 8022d4a:	189b      	adds	r3, r3, r2
 8022d4c:	687a      	ldr	r2, [r7, #4]
 8022d4e:	7812      	ldrb	r2, [r2, #0]
 8022d50:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8022d52:	193b      	adds	r3, r7, r4
 8022d54:	781b      	ldrb	r3, [r3, #0]
 8022d56:	193a      	adds	r2, r7, r4
 8022d58:	1c59      	adds	r1, r3, #1
 8022d5a:	7011      	strb	r1, [r2, #0]
 8022d5c:	001a      	movs	r2, r3
 8022d5e:	68bb      	ldr	r3, [r7, #8]
 8022d60:	189b      	adds	r3, r3, r2
 8022d62:	2203      	movs	r2, #3
 8022d64:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8022d66:	e017      	b.n	8022d98 <USBD_GetString+0x8c>
    {
      unicode[idx++] = *desc++;
 8022d68:	68fb      	ldr	r3, [r7, #12]
 8022d6a:	1c5a      	adds	r2, r3, #1
 8022d6c:	60fa      	str	r2, [r7, #12]
 8022d6e:	2417      	movs	r4, #23
 8022d70:	193a      	adds	r2, r7, r4
 8022d72:	7812      	ldrb	r2, [r2, #0]
 8022d74:	1939      	adds	r1, r7, r4
 8022d76:	1c50      	adds	r0, r2, #1
 8022d78:	7008      	strb	r0, [r1, #0]
 8022d7a:	0011      	movs	r1, r2
 8022d7c:	68ba      	ldr	r2, [r7, #8]
 8022d7e:	1852      	adds	r2, r2, r1
 8022d80:	781b      	ldrb	r3, [r3, #0]
 8022d82:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8022d84:	193b      	adds	r3, r7, r4
 8022d86:	781b      	ldrb	r3, [r3, #0]
 8022d88:	193a      	adds	r2, r7, r4
 8022d8a:	1c59      	adds	r1, r3, #1
 8022d8c:	7011      	strb	r1, [r2, #0]
 8022d8e:	001a      	movs	r2, r3
 8022d90:	68bb      	ldr	r3, [r7, #8]
 8022d92:	189b      	adds	r3, r3, r2
 8022d94:	2200      	movs	r2, #0
 8022d96:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8022d98:	68fb      	ldr	r3, [r7, #12]
 8022d9a:	781b      	ldrb	r3, [r3, #0]
 8022d9c:	2b00      	cmp	r3, #0
 8022d9e:	d1e3      	bne.n	8022d68 <USBD_GetString+0x5c>
    }
  }
}
 8022da0:	46c0      	nop			@ (mov r8, r8)
 8022da2:	46bd      	mov	sp, r7
 8022da4:	b007      	add	sp, #28
 8022da6:	bd90      	pop	{r4, r7, pc}

08022da8 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8022da8:	b580      	push	{r7, lr}
 8022daa:	b084      	sub	sp, #16
 8022dac:	af00      	add	r7, sp, #0
 8022dae:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8022db0:	230f      	movs	r3, #15
 8022db2:	18fb      	adds	r3, r7, r3
 8022db4:	2200      	movs	r2, #0
 8022db6:	701a      	strb	r2, [r3, #0]

  while (*buf != '\0')
 8022db8:	e008      	b.n	8022dcc <USBD_GetLen+0x24>
  {
    len++;
 8022dba:	210f      	movs	r1, #15
 8022dbc:	187b      	adds	r3, r7, r1
 8022dbe:	781a      	ldrb	r2, [r3, #0]
 8022dc0:	187b      	adds	r3, r7, r1
 8022dc2:	3201      	adds	r2, #1
 8022dc4:	701a      	strb	r2, [r3, #0]
    buf++;
 8022dc6:	687b      	ldr	r3, [r7, #4]
 8022dc8:	3301      	adds	r3, #1
 8022dca:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8022dcc:	687b      	ldr	r3, [r7, #4]
 8022dce:	781b      	ldrb	r3, [r3, #0]
 8022dd0:	2b00      	cmp	r3, #0
 8022dd2:	d1f2      	bne.n	8022dba <USBD_GetLen+0x12>
  }

  return len;
 8022dd4:	230f      	movs	r3, #15
 8022dd6:	18fb      	adds	r3, r7, r3
 8022dd8:	781b      	ldrb	r3, [r3, #0]
}
 8022dda:	0018      	movs	r0, r3
 8022ddc:	46bd      	mov	sp, r7
 8022dde:	b004      	add	sp, #16
 8022de0:	bd80      	pop	{r7, pc}

08022de2 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8022de2:	b580      	push	{r7, lr}
 8022de4:	b084      	sub	sp, #16
 8022de6:	af00      	add	r7, sp, #0
 8022de8:	60f8      	str	r0, [r7, #12]
 8022dea:	60b9      	str	r1, [r7, #8]
 8022dec:	1dbb      	adds	r3, r7, #6
 8022dee:	801a      	strh	r2, [r3, #0]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8022df0:	68fa      	ldr	r2, [r7, #12]
 8022df2:	23a5      	movs	r3, #165	@ 0xa5
 8022df4:	009b      	lsls	r3, r3, #2
 8022df6:	2102      	movs	r1, #2
 8022df8:	50d1      	str	r1, [r2, r3]
  pdev->ep_in[0].total_length = len;
 8022dfa:	1dbb      	adds	r3, r7, #6
 8022dfc:	881a      	ldrh	r2, [r3, #0]
 8022dfe:	68fb      	ldr	r3, [r7, #12]
 8022e00:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8022e02:	1dbb      	adds	r3, r7, #6
 8022e04:	881a      	ldrh	r2, [r3, #0]
 8022e06:	68fb      	ldr	r3, [r7, #12]
 8022e08:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8022e0a:	1dbb      	adds	r3, r7, #6
 8022e0c:	881b      	ldrh	r3, [r3, #0]
 8022e0e:	68ba      	ldr	r2, [r7, #8]
 8022e10:	68f8      	ldr	r0, [r7, #12]
 8022e12:	2100      	movs	r1, #0
 8022e14:	f000 fd4d 	bl	80238b2 <USBD_LL_Transmit>

  return USBD_OK;
 8022e18:	2300      	movs	r3, #0
}
 8022e1a:	0018      	movs	r0, r3
 8022e1c:	46bd      	mov	sp, r7
 8022e1e:	b004      	add	sp, #16
 8022e20:	bd80      	pop	{r7, pc}

08022e22 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8022e22:	b580      	push	{r7, lr}
 8022e24:	b084      	sub	sp, #16
 8022e26:	af00      	add	r7, sp, #0
 8022e28:	60f8      	str	r0, [r7, #12]
 8022e2a:	60b9      	str	r1, [r7, #8]
 8022e2c:	1dbb      	adds	r3, r7, #6
 8022e2e:	801a      	strh	r2, [r3, #0]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8022e30:	1dbb      	adds	r3, r7, #6
 8022e32:	881b      	ldrh	r3, [r3, #0]
 8022e34:	68ba      	ldr	r2, [r7, #8]
 8022e36:	68f8      	ldr	r0, [r7, #12]
 8022e38:	2100      	movs	r1, #0
 8022e3a:	f000 fd3a 	bl	80238b2 <USBD_LL_Transmit>

  return USBD_OK;
 8022e3e:	2300      	movs	r3, #0
}
 8022e40:	0018      	movs	r0, r3
 8022e42:	46bd      	mov	sp, r7
 8022e44:	b004      	add	sp, #16
 8022e46:	bd80      	pop	{r7, pc}

08022e48 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8022e48:	b580      	push	{r7, lr}
 8022e4a:	b084      	sub	sp, #16
 8022e4c:	af00      	add	r7, sp, #0
 8022e4e:	60f8      	str	r0, [r7, #12]
 8022e50:	60b9      	str	r1, [r7, #8]
 8022e52:	1dbb      	adds	r3, r7, #6
 8022e54:	801a      	strh	r2, [r3, #0]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8022e56:	68fa      	ldr	r2, [r7, #12]
 8022e58:	23a5      	movs	r3, #165	@ 0xa5
 8022e5a:	009b      	lsls	r3, r3, #2
 8022e5c:	2103      	movs	r1, #3
 8022e5e:	50d1      	str	r1, [r2, r3]
  pdev->ep_out[0].total_length = len;
 8022e60:	1dbb      	adds	r3, r7, #6
 8022e62:	8819      	ldrh	r1, [r3, #0]
 8022e64:	68fa      	ldr	r2, [r7, #12]
 8022e66:	23ae      	movs	r3, #174	@ 0xae
 8022e68:	005b      	lsls	r3, r3, #1
 8022e6a:	50d1      	str	r1, [r2, r3]
  pdev->ep_out[0].rem_length   = len;
 8022e6c:	1dbb      	adds	r3, r7, #6
 8022e6e:	8819      	ldrh	r1, [r3, #0]
 8022e70:	68fa      	ldr	r2, [r7, #12]
 8022e72:	23b0      	movs	r3, #176	@ 0xb0
 8022e74:	005b      	lsls	r3, r3, #1
 8022e76:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8022e78:	1dbb      	adds	r3, r7, #6
 8022e7a:	881b      	ldrh	r3, [r3, #0]
 8022e7c:	68ba      	ldr	r2, [r7, #8]
 8022e7e:	68f8      	ldr	r0, [r7, #12]
 8022e80:	2100      	movs	r1, #0
 8022e82:	f000 fd4d 	bl	8023920 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8022e86:	2300      	movs	r3, #0
}
 8022e88:	0018      	movs	r0, r3
 8022e8a:	46bd      	mov	sp, r7
 8022e8c:	b004      	add	sp, #16
 8022e8e:	bd80      	pop	{r7, pc}

08022e90 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8022e90:	b580      	push	{r7, lr}
 8022e92:	b084      	sub	sp, #16
 8022e94:	af00      	add	r7, sp, #0
 8022e96:	60f8      	str	r0, [r7, #12]
 8022e98:	60b9      	str	r1, [r7, #8]
 8022e9a:	1dbb      	adds	r3, r7, #6
 8022e9c:	801a      	strh	r2, [r3, #0]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8022e9e:	1dbb      	adds	r3, r7, #6
 8022ea0:	881b      	ldrh	r3, [r3, #0]
 8022ea2:	68ba      	ldr	r2, [r7, #8]
 8022ea4:	68f8      	ldr	r0, [r7, #12]
 8022ea6:	2100      	movs	r1, #0
 8022ea8:	f000 fd3a 	bl	8023920 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8022eac:	2300      	movs	r3, #0
}
 8022eae:	0018      	movs	r0, r3
 8022eb0:	46bd      	mov	sp, r7
 8022eb2:	b004      	add	sp, #16
 8022eb4:	bd80      	pop	{r7, pc}

08022eb6 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8022eb6:	b580      	push	{r7, lr}
 8022eb8:	b082      	sub	sp, #8
 8022eba:	af00      	add	r7, sp, #0
 8022ebc:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8022ebe:	687a      	ldr	r2, [r7, #4]
 8022ec0:	23a5      	movs	r3, #165	@ 0xa5
 8022ec2:	009b      	lsls	r3, r3, #2
 8022ec4:	2104      	movs	r1, #4
 8022ec6:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8022ec8:	6878      	ldr	r0, [r7, #4]
 8022eca:	2300      	movs	r3, #0
 8022ecc:	2200      	movs	r2, #0
 8022ece:	2100      	movs	r1, #0
 8022ed0:	f000 fcef 	bl	80238b2 <USBD_LL_Transmit>

  return USBD_OK;
 8022ed4:	2300      	movs	r3, #0
}
 8022ed6:	0018      	movs	r0, r3
 8022ed8:	46bd      	mov	sp, r7
 8022eda:	b002      	add	sp, #8
 8022edc:	bd80      	pop	{r7, pc}

08022ede <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8022ede:	b580      	push	{r7, lr}
 8022ee0:	b082      	sub	sp, #8
 8022ee2:	af00      	add	r7, sp, #0
 8022ee4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8022ee6:	687a      	ldr	r2, [r7, #4]
 8022ee8:	23a5      	movs	r3, #165	@ 0xa5
 8022eea:	009b      	lsls	r3, r3, #2
 8022eec:	2105      	movs	r1, #5
 8022eee:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8022ef0:	6878      	ldr	r0, [r7, #4]
 8022ef2:	2300      	movs	r3, #0
 8022ef4:	2200      	movs	r2, #0
 8022ef6:	2100      	movs	r1, #0
 8022ef8:	f000 fd12 	bl	8023920 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8022efc:	2300      	movs	r3, #0
}
 8022efe:	0018      	movs	r0, r3
 8022f00:	46bd      	mov	sp, r7
 8022f02:	b002      	add	sp, #8
 8022f04:	bd80      	pop	{r7, pc}
	...

08022f08 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8022f08:	b580      	push	{r7, lr}
 8022f0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8022f0c:	4914      	ldr	r1, [pc, #80]	@ (8022f60 <MX_USB_DEVICE_Init+0x58>)
 8022f0e:	4b15      	ldr	r3, [pc, #84]	@ (8022f64 <MX_USB_DEVICE_Init+0x5c>)
 8022f10:	2200      	movs	r2, #0
 8022f12:	0018      	movs	r0, r3
 8022f14:	f7fe fdec 	bl	8021af0 <USBD_Init>
 8022f18:	1e03      	subs	r3, r0, #0
 8022f1a:	d001      	beq.n	8022f20 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8022f1c:	f7ea fa44 	bl	800d3a8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8022f20:	4a11      	ldr	r2, [pc, #68]	@ (8022f68 <MX_USB_DEVICE_Init+0x60>)
 8022f22:	4b10      	ldr	r3, [pc, #64]	@ (8022f64 <MX_USB_DEVICE_Init+0x5c>)
 8022f24:	0011      	movs	r1, r2
 8022f26:	0018      	movs	r0, r3
 8022f28:	f7fe fe13 	bl	8021b52 <USBD_RegisterClass>
 8022f2c:	1e03      	subs	r3, r0, #0
 8022f2e:	d001      	beq.n	8022f34 <MX_USB_DEVICE_Init+0x2c>
  {
    Error_Handler();
 8022f30:	f7ea fa3a 	bl	800d3a8 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8022f34:	4a0d      	ldr	r2, [pc, #52]	@ (8022f6c <MX_USB_DEVICE_Init+0x64>)
 8022f36:	4b0b      	ldr	r3, [pc, #44]	@ (8022f64 <MX_USB_DEVICE_Init+0x5c>)
 8022f38:	0011      	movs	r1, r2
 8022f3a:	0018      	movs	r0, r3
 8022f3c:	f7fe fd28 	bl	8021990 <USBD_CDC_RegisterInterface>
 8022f40:	1e03      	subs	r3, r0, #0
 8022f42:	d001      	beq.n	8022f48 <MX_USB_DEVICE_Init+0x40>
  {
    Error_Handler();
 8022f44:	f7ea fa30 	bl	800d3a8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8022f48:	4b06      	ldr	r3, [pc, #24]	@ (8022f64 <MX_USB_DEVICE_Init+0x5c>)
 8022f4a:	0018      	movs	r0, r3
 8022f4c:	f7fe fe21 	bl	8021b92 <USBD_Start>
 8022f50:	1e03      	subs	r3, r0, #0
 8022f52:	d001      	beq.n	8022f58 <MX_USB_DEVICE_Init+0x50>
  {
    Error_Handler();
 8022f54:	f7ea fa28 	bl	800d3a8 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8022f58:	46c0      	nop			@ (mov r8, r8)
 8022f5a:	46bd      	mov	sp, r7
 8022f5c:	bd80      	pop	{r7, pc}
 8022f5e:	46c0      	nop			@ (mov r8, r8)
 8022f60:	20000224 	.word	0x20000224
 8022f64:	20002538 	.word	0x20002538
 8022f68:	20000110 	.word	0x20000110
 8022f6c:	20000214 	.word	0x20000214

08022f70 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8022f70:	b580      	push	{r7, lr}
 8022f72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8022f74:	4907      	ldr	r1, [pc, #28]	@ (8022f94 <CDC_Init_FS+0x24>)
 8022f76:	4b08      	ldr	r3, [pc, #32]	@ (8022f98 <CDC_Init_FS+0x28>)
 8022f78:	2200      	movs	r2, #0
 8022f7a:	0018      	movs	r0, r3
 8022f7c:	f7fe fd23 	bl	80219c6 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8022f80:	4a06      	ldr	r2, [pc, #24]	@ (8022f9c <CDC_Init_FS+0x2c>)
 8022f82:	4b05      	ldr	r3, [pc, #20]	@ (8022f98 <CDC_Init_FS+0x28>)
 8022f84:	0011      	movs	r1, r2
 8022f86:	0018      	movs	r0, r3
 8022f88:	f7fe fd39 	bl	80219fe <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8022f8c:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8022f8e:	0018      	movs	r0, r3
 8022f90:	46bd      	mov	sp, r7
 8022f92:	bd80      	pop	{r7, pc}
 8022f94:	20002cbc 	.word	0x20002cbc
 8022f98:	20002538 	.word	0x20002538
 8022f9c:	200028bc 	.word	0x200028bc

08022fa0 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8022fa0:	b580      	push	{r7, lr}
 8022fa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8022fa4:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8022fa6:	0018      	movs	r0, r3
 8022fa8:	46bd      	mov	sp, r7
 8022faa:	bd80      	pop	{r7, pc}

08022fac <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8022fac:	b580      	push	{r7, lr}
 8022fae:	b084      	sub	sp, #16
 8022fb0:	af00      	add	r7, sp, #0
 8022fb2:	6039      	str	r1, [r7, #0]
 8022fb4:	0011      	movs	r1, r2
 8022fb6:	1dfb      	adds	r3, r7, #7
 8022fb8:	1c02      	adds	r2, r0, #0
 8022fba:	701a      	strb	r2, [r3, #0]
 8022fbc:	1d3b      	adds	r3, r7, #4
 8022fbe:	1c0a      	adds	r2, r1, #0
 8022fc0:	801a      	strh	r2, [r3, #0]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8022fc2:	1dfb      	adds	r3, r7, #7
 8022fc4:	781b      	ldrb	r3, [r3, #0]
 8022fc6:	2b23      	cmp	r3, #35	@ 0x23
 8022fc8:	d810      	bhi.n	8022fec <CDC_Control_FS+0x40>
 8022fca:	009a      	lsls	r2, r3, #2
 8022fcc:	4b0a      	ldr	r3, [pc, #40]	@ (8022ff8 <CDC_Control_FS+0x4c>)
 8022fce:	18d3      	adds	r3, r2, r3
 8022fd0:	681b      	ldr	r3, [r3, #0]
 8022fd2:	469f      	mov	pc, r3

    break;

    case CDC_SET_CONTROL_LINE_STATE:
      // === inserted for detecting USB is ready for dumping USB_LOGGING 28-jul-2025
            USBD_SetupReqTypedef * req = (USBD_SetupReqTypedef *)pbuf;
 8022fd4:	683b      	ldr	r3, [r7, #0]
 8022fd6:	60fb      	str	r3, [r7, #12]

            if((req->wValue &0x0001) != 0)
 8022fd8:	68fb      	ldr	r3, [r7, #12]
 8022fda:	885b      	ldrh	r3, [r3, #2]
 8022fdc:	001a      	movs	r2, r3
 8022fde:	2301      	movs	r3, #1
 8022fe0:	4013      	ands	r3, r2
 8022fe2:	d001      	beq.n	8022fe8 <CDC_Control_FS+0x3c>
              return (USBD_FAIL);
 8022fe4:	2302      	movs	r3, #2
 8022fe6:	e003      	b.n	8022ff0 <CDC_Control_FS+0x44>
              //host_com_port_open = 1;
            else
              return (USBD_OK);
 8022fe8:	2300      	movs	r3, #0
 8022fea:	e001      	b.n	8022ff0 <CDC_Control_FS+0x44>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8022fec:	46c0      	nop			@ (mov r8, r8)
  }

  return (USBD_OK);
 8022fee:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8022ff0:	0018      	movs	r0, r3
 8022ff2:	46bd      	mov	sp, r7
 8022ff4:	b004      	add	sp, #16
 8022ff6:	bd80      	pop	{r7, pc}
 8022ff8:	0802e598 	.word	0x0802e598

08022ffc <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8022ffc:	b580      	push	{r7, lr}
 8022ffe:	b082      	sub	sp, #8
 8023000:	af00      	add	r7, sp, #0
 8023002:	6078      	str	r0, [r7, #4]
 8023004:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  if (ESPProg)
 8023006:	4b12      	ldr	r3, [pc, #72]	@ (8023050 <CDC_Receive_FS+0x54>)
 8023008:	781b      	ldrb	r3, [r3, #0]
 802300a:	2b00      	cmp	r3, #0
 802300c:	d013      	beq.n	8023036 <CDC_Receive_FS+0x3a>
  {
    HAL_UART_Transmit(&UsedUart, Buf, *Len, HAL_MAX_DELAY);
 802300e:	683b      	ldr	r3, [r7, #0]
 8023010:	681b      	ldr	r3, [r3, #0]
 8023012:	b29a      	uxth	r2, r3
 8023014:	2301      	movs	r3, #1
 8023016:	425b      	negs	r3, r3
 8023018:	6879      	ldr	r1, [r7, #4]
 802301a:	480e      	ldr	r0, [pc, #56]	@ (8023054 <CDC_Receive_FS+0x58>)
 802301c:	f7fa fa38 	bl	801d490 <HAL_UART_Transmit>
    USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8023020:	687a      	ldr	r2, [r7, #4]
 8023022:	4b0d      	ldr	r3, [pc, #52]	@ (8023058 <CDC_Receive_FS+0x5c>)
 8023024:	0011      	movs	r1, r2
 8023026:	0018      	movs	r0, r3
 8023028:	f7fe fce9 	bl	80219fe <USBD_CDC_SetRxBuffer>
    USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 802302c:	4b0a      	ldr	r3, [pc, #40]	@ (8023058 <CDC_Receive_FS+0x5c>)
 802302e:	0018      	movs	r0, r3
 8023030:	f7fe fd30 	bl	8021a94 <USBD_CDC_ReceivePacket>
 8023034:	e006      	b.n	8023044 <CDC_Receive_FS+0x48>
  }
  else
   {
     UsbRxDataSize += *Len;
 8023036:	683b      	ldr	r3, [r7, #0]
 8023038:	681a      	ldr	r2, [r3, #0]
 802303a:	4b08      	ldr	r3, [pc, #32]	@ (802305c <CDC_Receive_FS+0x60>)
 802303c:	681b      	ldr	r3, [r3, #0]
 802303e:	18d2      	adds	r2, r2, r3
 8023040:	4b06      	ldr	r3, [pc, #24]	@ (802305c <CDC_Receive_FS+0x60>)
 8023042:	601a      	str	r2, [r3, #0]
   }
   return (USBD_OK);
 8023044:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8023046:	0018      	movs	r0, r3
 8023048:	46bd      	mov	sp, r7
 802304a:	b002      	add	sp, #8
 802304c:	bd80      	pop	{r7, pc}
 802304e:	46c0      	nop			@ (mov r8, r8)
 8023050:	200027fc 	.word	0x200027fc
 8023054:	20002800 	.word	0x20002800
 8023058:	20002538 	.word	0x20002538
 802305c:	200028b8 	.word	0x200028b8

08023060 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8023060:	b5b0      	push	{r4, r5, r7, lr}
 8023062:	b084      	sub	sp, #16
 8023064:	af00      	add	r7, sp, #0
 8023066:	6078      	str	r0, [r7, #4]
 8023068:	000a      	movs	r2, r1
 802306a:	1cbb      	adds	r3, r7, #2
 802306c:	801a      	strh	r2, [r3, #0]
  uint8_t result = USBD_OK;
 802306e:	230f      	movs	r3, #15
 8023070:	18fb      	adds	r3, r7, r3
 8023072:	2200      	movs	r2, #0
 8023074:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8023076:	4a11      	ldr	r2, [pc, #68]	@ (80230bc <CDC_Transmit_FS+0x5c>)
 8023078:	23ae      	movs	r3, #174	@ 0xae
 802307a:	009b      	lsls	r3, r3, #2
 802307c:	58d3      	ldr	r3, [r2, r3]
 802307e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8023080:	68ba      	ldr	r2, [r7, #8]
 8023082:	2385      	movs	r3, #133	@ 0x85
 8023084:	009b      	lsls	r3, r3, #2
 8023086:	58d3      	ldr	r3, [r2, r3]
 8023088:	2b00      	cmp	r3, #0
 802308a:	d001      	beq.n	8023090 <CDC_Transmit_FS+0x30>
    return USBD_BUSY;
 802308c:	2301      	movs	r3, #1
 802308e:	e010      	b.n	80230b2 <CDC_Transmit_FS+0x52>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8023090:	1cbb      	adds	r3, r7, #2
 8023092:	881a      	ldrh	r2, [r3, #0]
 8023094:	6879      	ldr	r1, [r7, #4]
 8023096:	4b09      	ldr	r3, [pc, #36]	@ (80230bc <CDC_Transmit_FS+0x5c>)
 8023098:	0018      	movs	r0, r3
 802309a:	f7fe fc94 	bl	80219c6 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 802309e:	250f      	movs	r5, #15
 80230a0:	197c      	adds	r4, r7, r5
 80230a2:	4b06      	ldr	r3, [pc, #24]	@ (80230bc <CDC_Transmit_FS+0x5c>)
 80230a4:	0018      	movs	r0, r3
 80230a6:	f7fe fcbe 	bl	8021a26 <USBD_CDC_TransmitPacket>
 80230aa:	0003      	movs	r3, r0
 80230ac:	7023      	strb	r3, [r4, #0]
  /* USER CODE END 7 */
  return result;
 80230ae:	197b      	adds	r3, r7, r5
 80230b0:	781b      	ldrb	r3, [r3, #0]
}
 80230b2:	0018      	movs	r0, r3
 80230b4:	46bd      	mov	sp, r7
 80230b6:	b004      	add	sp, #16
 80230b8:	bdb0      	pop	{r4, r5, r7, pc}
 80230ba:	46c0      	nop			@ (mov r8, r8)
 80230bc:	20002538 	.word	0x20002538

080230c0 <EnableESPProg>:

/* USER CODE BEGIN PRIVATE_FUNCTIONS_IMPLEMENTATION */
void EnableESPProg(){
 80230c0:	b580      	push	{r7, lr}
 80230c2:	af00      	add	r7, sp, #0
  ESPProg = true;
 80230c4:	4b02      	ldr	r3, [pc, #8]	@ (80230d0 <EnableESPProg+0x10>)
 80230c6:	2201      	movs	r2, #1
 80230c8:	701a      	strb	r2, [r3, #0]
}
 80230ca:	46c0      	nop			@ (mov r8, r8)
 80230cc:	46bd      	mov	sp, r7
 80230ce:	bd80      	pop	{r7, pc}
 80230d0:	200027fc 	.word	0x200027fc

080230d4 <GetUsbRxPointer>:
{
  UsedUart = *uart;
}

uint8_t* GetUsbRxPointer(void)
{
 80230d4:	b580      	push	{r7, lr}
 80230d6:	af00      	add	r7, sp, #0
  return UserRxBufferFS;
 80230d8:	4b01      	ldr	r3, [pc, #4]	@ (80230e0 <GetUsbRxPointer+0xc>)
}
 80230da:	0018      	movs	r0, r3
 80230dc:	46bd      	mov	sp, r7
 80230de:	bd80      	pop	{r7, pc}
 80230e0:	200028bc 	.word	0x200028bc

080230e4 <ResetUsbRxDataSize>:

void ResetUsbRxDataSize(void)
{
 80230e4:	b580      	push	{r7, lr}
 80230e6:	af00      	add	r7, sp, #0
  UsbRxDataSize = 0;
 80230e8:	4b07      	ldr	r3, [pc, #28]	@ (8023108 <ResetUsbRxDataSize+0x24>)
 80230ea:	2200      	movs	r2, #0
 80230ec:	601a      	str	r2, [r3, #0]
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &UserRxBufferFS[0]);
 80230ee:	4a07      	ldr	r2, [pc, #28]	@ (802310c <ResetUsbRxDataSize+0x28>)
 80230f0:	4b07      	ldr	r3, [pc, #28]	@ (8023110 <ResetUsbRxDataSize+0x2c>)
 80230f2:	0011      	movs	r1, r2
 80230f4:	0018      	movs	r0, r3
 80230f6:	f7fe fc82 	bl	80219fe <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80230fa:	4b05      	ldr	r3, [pc, #20]	@ (8023110 <ResetUsbRxDataSize+0x2c>)
 80230fc:	0018      	movs	r0, r3
 80230fe:	f7fe fcc9 	bl	8021a94 <USBD_CDC_ReceivePacket>
}
 8023102:	46c0      	nop			@ (mov r8, r8)
 8023104:	46bd      	mov	sp, r7
 8023106:	bd80      	pop	{r7, pc}
 8023108:	200028b8 	.word	0x200028b8
 802310c:	200028bc 	.word	0x200028bc
 8023110:	20002538 	.word	0x20002538

08023114 <GetUsbRxDataSize>:

uint32_t GetUsbRxDataSize()
{
 8023114:	b580      	push	{r7, lr}
 8023116:	af00      	add	r7, sp, #0
  return UsbRxDataSize;
 8023118:	4b02      	ldr	r3, [pc, #8]	@ (8023124 <GetUsbRxDataSize+0x10>)
 802311a:	681b      	ldr	r3, [r3, #0]
}
 802311c:	0018      	movs	r0, r3
 802311e:	46bd      	mov	sp, r7
 8023120:	bd80      	pop	{r7, pc}
 8023122:	46c0      	nop			@ (mov r8, r8)
 8023124:	200028b8 	.word	0x200028b8

08023128 <GetUsbRxNextChunk>:

void GetUsbRxNextChunk(uint32_t writePointer)
{
 8023128:	b580      	push	{r7, lr}
 802312a:	b082      	sub	sp, #8
 802312c:	af00      	add	r7, sp, #0
 802312e:	6078      	str	r0, [r7, #4]
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &UserRxBufferFS[writePointer]);
 8023130:	687a      	ldr	r2, [r7, #4]
 8023132:	4b07      	ldr	r3, [pc, #28]	@ (8023150 <GetUsbRxNextChunk+0x28>)
 8023134:	18d2      	adds	r2, r2, r3
 8023136:	4b07      	ldr	r3, [pc, #28]	@ (8023154 <GetUsbRxNextChunk+0x2c>)
 8023138:	0011      	movs	r1, r2
 802313a:	0018      	movs	r0, r3
 802313c:	f7fe fc5f 	bl	80219fe <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8023140:	4b04      	ldr	r3, [pc, #16]	@ (8023154 <GetUsbRxNextChunk+0x2c>)
 8023142:	0018      	movs	r0, r3
 8023144:	f7fe fca6 	bl	8021a94 <USBD_CDC_ReceivePacket>
}
 8023148:	46c0      	nop			@ (mov r8, r8)
 802314a:	46bd      	mov	sp, r7
 802314c:	b002      	add	sp, #8
 802314e:	bd80      	pop	{r7, pc}
 8023150:	200028bc 	.word	0x200028bc
 8023154:	20002538 	.word	0x20002538

08023158 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8023158:	b580      	push	{r7, lr}
 802315a:	b082      	sub	sp, #8
 802315c:	af00      	add	r7, sp, #0
 802315e:	0002      	movs	r2, r0
 8023160:	6039      	str	r1, [r7, #0]
 8023162:	1dfb      	adds	r3, r7, #7
 8023164:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8023166:	683b      	ldr	r3, [r7, #0]
 8023168:	2212      	movs	r2, #18
 802316a:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 802316c:	4b02      	ldr	r3, [pc, #8]	@ (8023178 <USBD_FS_DeviceDescriptor+0x20>)
}
 802316e:	0018      	movs	r0, r3
 8023170:	46bd      	mov	sp, r7
 8023172:	b002      	add	sp, #8
 8023174:	bd80      	pop	{r7, pc}
 8023176:	46c0      	nop			@ (mov r8, r8)
 8023178:	20000240 	.word	0x20000240

0802317c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 802317c:	b580      	push	{r7, lr}
 802317e:	b082      	sub	sp, #8
 8023180:	af00      	add	r7, sp, #0
 8023182:	0002      	movs	r2, r0
 8023184:	6039      	str	r1, [r7, #0]
 8023186:	1dfb      	adds	r3, r7, #7
 8023188:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 802318a:	683b      	ldr	r3, [r7, #0]
 802318c:	2204      	movs	r2, #4
 802318e:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8023190:	4b02      	ldr	r3, [pc, #8]	@ (802319c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8023192:	0018      	movs	r0, r3
 8023194:	46bd      	mov	sp, r7
 8023196:	b002      	add	sp, #8
 8023198:	bd80      	pop	{r7, pc}
 802319a:	46c0      	nop			@ (mov r8, r8)
 802319c:	20000254 	.word	0x20000254

080231a0 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80231a0:	b580      	push	{r7, lr}
 80231a2:	b082      	sub	sp, #8
 80231a4:	af00      	add	r7, sp, #0
 80231a6:	0002      	movs	r2, r0
 80231a8:	6039      	str	r1, [r7, #0]
 80231aa:	1dfb      	adds	r3, r7, #7
 80231ac:	701a      	strb	r2, [r3, #0]
  if(speed == 0)
 80231ae:	1dfb      	adds	r3, r7, #7
 80231b0:	781b      	ldrb	r3, [r3, #0]
 80231b2:	2b00      	cmp	r3, #0
 80231b4:	d106      	bne.n	80231c4 <USBD_FS_ProductStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80231b6:	683a      	ldr	r2, [r7, #0]
 80231b8:	4908      	ldr	r1, [pc, #32]	@ (80231dc <USBD_FS_ProductStrDescriptor+0x3c>)
 80231ba:	4b09      	ldr	r3, [pc, #36]	@ (80231e0 <USBD_FS_ProductStrDescriptor+0x40>)
 80231bc:	0018      	movs	r0, r3
 80231be:	f7ff fda5 	bl	8022d0c <USBD_GetString>
 80231c2:	e005      	b.n	80231d0 <USBD_FS_ProductStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80231c4:	683a      	ldr	r2, [r7, #0]
 80231c6:	4905      	ldr	r1, [pc, #20]	@ (80231dc <USBD_FS_ProductStrDescriptor+0x3c>)
 80231c8:	4b05      	ldr	r3, [pc, #20]	@ (80231e0 <USBD_FS_ProductStrDescriptor+0x40>)
 80231ca:	0018      	movs	r0, r3
 80231cc:	f7ff fd9e 	bl	8022d0c <USBD_GetString>
  }
  return USBD_StrDesc;
 80231d0:	4b02      	ldr	r3, [pc, #8]	@ (80231dc <USBD_FS_ProductStrDescriptor+0x3c>)
}
 80231d2:	0018      	movs	r0, r3
 80231d4:	46bd      	mov	sp, r7
 80231d6:	b002      	add	sp, #8
 80231d8:	bd80      	pop	{r7, pc}
 80231da:	46c0      	nop			@ (mov r8, r8)
 80231dc:	200030bc 	.word	0x200030bc
 80231e0:	0802dc38 	.word	0x0802dc38

080231e4 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80231e4:	b580      	push	{r7, lr}
 80231e6:	b082      	sub	sp, #8
 80231e8:	af00      	add	r7, sp, #0
 80231ea:	0002      	movs	r2, r0
 80231ec:	6039      	str	r1, [r7, #0]
 80231ee:	1dfb      	adds	r3, r7, #7
 80231f0:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80231f2:	683a      	ldr	r2, [r7, #0]
 80231f4:	4904      	ldr	r1, [pc, #16]	@ (8023208 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80231f6:	4b05      	ldr	r3, [pc, #20]	@ (802320c <USBD_FS_ManufacturerStrDescriptor+0x28>)
 80231f8:	0018      	movs	r0, r3
 80231fa:	f7ff fd87 	bl	8022d0c <USBD_GetString>
  return USBD_StrDesc;
 80231fe:	4b02      	ldr	r3, [pc, #8]	@ (8023208 <USBD_FS_ManufacturerStrDescriptor+0x24>)
}
 8023200:	0018      	movs	r0, r3
 8023202:	46bd      	mov	sp, r7
 8023204:	b002      	add	sp, #8
 8023206:	bd80      	pop	{r7, pc}
 8023208:	200030bc 	.word	0x200030bc
 802320c:	0802dc50 	.word	0x0802dc50

08023210 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8023210:	b580      	push	{r7, lr}
 8023212:	b082      	sub	sp, #8
 8023214:	af00      	add	r7, sp, #0
 8023216:	0002      	movs	r2, r0
 8023218:	6039      	str	r1, [r7, #0]
 802321a:	1dfb      	adds	r3, r7, #7
 802321c:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 802321e:	683b      	ldr	r3, [r7, #0]
 8023220:	221a      	movs	r2, #26
 8023222:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8023224:	f000 f84c 	bl	80232c0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8023228:	4b02      	ldr	r3, [pc, #8]	@ (8023234 <USBD_FS_SerialStrDescriptor+0x24>)
}
 802322a:	0018      	movs	r0, r3
 802322c:	46bd      	mov	sp, r7
 802322e:	b002      	add	sp, #8
 8023230:	bd80      	pop	{r7, pc}
 8023232:	46c0      	nop			@ (mov r8, r8)
 8023234:	20000258 	.word	0x20000258

08023238 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8023238:	b580      	push	{r7, lr}
 802323a:	b082      	sub	sp, #8
 802323c:	af00      	add	r7, sp, #0
 802323e:	0002      	movs	r2, r0
 8023240:	6039      	str	r1, [r7, #0]
 8023242:	1dfb      	adds	r3, r7, #7
 8023244:	701a      	strb	r2, [r3, #0]
  if(speed == USBD_SPEED_HIGH)
 8023246:	1dfb      	adds	r3, r7, #7
 8023248:	781b      	ldrb	r3, [r3, #0]
 802324a:	2b00      	cmp	r3, #0
 802324c:	d106      	bne.n	802325c <USBD_FS_ConfigStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 802324e:	683a      	ldr	r2, [r7, #0]
 8023250:	4908      	ldr	r1, [pc, #32]	@ (8023274 <USBD_FS_ConfigStrDescriptor+0x3c>)
 8023252:	4b09      	ldr	r3, [pc, #36]	@ (8023278 <USBD_FS_ConfigStrDescriptor+0x40>)
 8023254:	0018      	movs	r0, r3
 8023256:	f7ff fd59 	bl	8022d0c <USBD_GetString>
 802325a:	e005      	b.n	8023268 <USBD_FS_ConfigStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 802325c:	683a      	ldr	r2, [r7, #0]
 802325e:	4905      	ldr	r1, [pc, #20]	@ (8023274 <USBD_FS_ConfigStrDescriptor+0x3c>)
 8023260:	4b05      	ldr	r3, [pc, #20]	@ (8023278 <USBD_FS_ConfigStrDescriptor+0x40>)
 8023262:	0018      	movs	r0, r3
 8023264:	f7ff fd52 	bl	8022d0c <USBD_GetString>
  }
  return USBD_StrDesc;
 8023268:	4b02      	ldr	r3, [pc, #8]	@ (8023274 <USBD_FS_ConfigStrDescriptor+0x3c>)
}
 802326a:	0018      	movs	r0, r3
 802326c:	46bd      	mov	sp, r7
 802326e:	b002      	add	sp, #8
 8023270:	bd80      	pop	{r7, pc}
 8023272:	46c0      	nop			@ (mov r8, r8)
 8023274:	200030bc 	.word	0x200030bc
 8023278:	0802dc64 	.word	0x0802dc64

0802327c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 802327c:	b580      	push	{r7, lr}
 802327e:	b082      	sub	sp, #8
 8023280:	af00      	add	r7, sp, #0
 8023282:	0002      	movs	r2, r0
 8023284:	6039      	str	r1, [r7, #0]
 8023286:	1dfb      	adds	r3, r7, #7
 8023288:	701a      	strb	r2, [r3, #0]
  if(speed == 0)
 802328a:	1dfb      	adds	r3, r7, #7
 802328c:	781b      	ldrb	r3, [r3, #0]
 802328e:	2b00      	cmp	r3, #0
 8023290:	d106      	bne.n	80232a0 <USBD_FS_InterfaceStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8023292:	683a      	ldr	r2, [r7, #0]
 8023294:	4908      	ldr	r1, [pc, #32]	@ (80232b8 <USBD_FS_InterfaceStrDescriptor+0x3c>)
 8023296:	4b09      	ldr	r3, [pc, #36]	@ (80232bc <USBD_FS_InterfaceStrDescriptor+0x40>)
 8023298:	0018      	movs	r0, r3
 802329a:	f7ff fd37 	bl	8022d0c <USBD_GetString>
 802329e:	e005      	b.n	80232ac <USBD_FS_InterfaceStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80232a0:	683a      	ldr	r2, [r7, #0]
 80232a2:	4905      	ldr	r1, [pc, #20]	@ (80232b8 <USBD_FS_InterfaceStrDescriptor+0x3c>)
 80232a4:	4b05      	ldr	r3, [pc, #20]	@ (80232bc <USBD_FS_InterfaceStrDescriptor+0x40>)
 80232a6:	0018      	movs	r0, r3
 80232a8:	f7ff fd30 	bl	8022d0c <USBD_GetString>
  }
  return USBD_StrDesc;
 80232ac:	4b02      	ldr	r3, [pc, #8]	@ (80232b8 <USBD_FS_InterfaceStrDescriptor+0x3c>)
}
 80232ae:	0018      	movs	r0, r3
 80232b0:	46bd      	mov	sp, r7
 80232b2:	b002      	add	sp, #8
 80232b4:	bd80      	pop	{r7, pc}
 80232b6:	46c0      	nop			@ (mov r8, r8)
 80232b8:	200030bc 	.word	0x200030bc
 80232bc:	0802dc70 	.word	0x0802dc70

080232c0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80232c0:	b580      	push	{r7, lr}
 80232c2:	b084      	sub	sp, #16
 80232c4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80232c6:	4b10      	ldr	r3, [pc, #64]	@ (8023308 <Get_SerialNum+0x48>)
 80232c8:	681b      	ldr	r3, [r3, #0]
 80232ca:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80232cc:	4b0f      	ldr	r3, [pc, #60]	@ (802330c <Get_SerialNum+0x4c>)
 80232ce:	681b      	ldr	r3, [r3, #0]
 80232d0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80232d2:	4b0f      	ldr	r3, [pc, #60]	@ (8023310 <Get_SerialNum+0x50>)
 80232d4:	681b      	ldr	r3, [r3, #0]
 80232d6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80232d8:	68fa      	ldr	r2, [r7, #12]
 80232da:	687b      	ldr	r3, [r7, #4]
 80232dc:	18d3      	adds	r3, r2, r3
 80232de:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80232e0:	68fb      	ldr	r3, [r7, #12]
 80232e2:	2b00      	cmp	r3, #0
 80232e4:	d00b      	beq.n	80232fe <Get_SerialNum+0x3e>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80232e6:	490b      	ldr	r1, [pc, #44]	@ (8023314 <Get_SerialNum+0x54>)
 80232e8:	68fb      	ldr	r3, [r7, #12]
 80232ea:	2208      	movs	r2, #8
 80232ec:	0018      	movs	r0, r3
 80232ee:	f000 f815 	bl	802331c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80232f2:	4909      	ldr	r1, [pc, #36]	@ (8023318 <Get_SerialNum+0x58>)
 80232f4:	68bb      	ldr	r3, [r7, #8]
 80232f6:	2204      	movs	r2, #4
 80232f8:	0018      	movs	r0, r3
 80232fa:	f000 f80f 	bl	802331c <IntToUnicode>
  }
}
 80232fe:	46c0      	nop			@ (mov r8, r8)
 8023300:	46bd      	mov	sp, r7
 8023302:	b004      	add	sp, #16
 8023304:	bd80      	pop	{r7, pc}
 8023306:	46c0      	nop			@ (mov r8, r8)
 8023308:	1ff80050 	.word	0x1ff80050
 802330c:	1ff80054 	.word	0x1ff80054
 8023310:	1ff80058 	.word	0x1ff80058
 8023314:	2000025a 	.word	0x2000025a
 8023318:	2000026a 	.word	0x2000026a

0802331c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 802331c:	b580      	push	{r7, lr}
 802331e:	b086      	sub	sp, #24
 8023320:	af00      	add	r7, sp, #0
 8023322:	60f8      	str	r0, [r7, #12]
 8023324:	60b9      	str	r1, [r7, #8]
 8023326:	1dfb      	adds	r3, r7, #7
 8023328:	701a      	strb	r2, [r3, #0]
  uint8_t idx = 0;
 802332a:	2117      	movs	r1, #23
 802332c:	187b      	adds	r3, r7, r1
 802332e:	2200      	movs	r2, #0
 8023330:	701a      	strb	r2, [r3, #0]

  for (idx = 0; idx < len; idx++)
 8023332:	187b      	adds	r3, r7, r1
 8023334:	2200      	movs	r2, #0
 8023336:	701a      	strb	r2, [r3, #0]
 8023338:	e02f      	b.n	802339a <IntToUnicode+0x7e>
  {
    if (((value >> 28)) < 0xA)
 802333a:	68fb      	ldr	r3, [r7, #12]
 802333c:	0f1b      	lsrs	r3, r3, #28
 802333e:	2b09      	cmp	r3, #9
 8023340:	d80d      	bhi.n	802335e <IntToUnicode+0x42>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8023342:	68fb      	ldr	r3, [r7, #12]
 8023344:	0f1b      	lsrs	r3, r3, #28
 8023346:	b2da      	uxtb	r2, r3
 8023348:	2317      	movs	r3, #23
 802334a:	18fb      	adds	r3, r7, r3
 802334c:	781b      	ldrb	r3, [r3, #0]
 802334e:	005b      	lsls	r3, r3, #1
 8023350:	0019      	movs	r1, r3
 8023352:	68bb      	ldr	r3, [r7, #8]
 8023354:	185b      	adds	r3, r3, r1
 8023356:	3230      	adds	r2, #48	@ 0x30
 8023358:	b2d2      	uxtb	r2, r2
 802335a:	701a      	strb	r2, [r3, #0]
 802335c:	e00c      	b.n	8023378 <IntToUnicode+0x5c>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 802335e:	68fb      	ldr	r3, [r7, #12]
 8023360:	0f1b      	lsrs	r3, r3, #28
 8023362:	b2da      	uxtb	r2, r3
 8023364:	2317      	movs	r3, #23
 8023366:	18fb      	adds	r3, r7, r3
 8023368:	781b      	ldrb	r3, [r3, #0]
 802336a:	005b      	lsls	r3, r3, #1
 802336c:	0019      	movs	r1, r3
 802336e:	68bb      	ldr	r3, [r7, #8]
 8023370:	185b      	adds	r3, r3, r1
 8023372:	3237      	adds	r2, #55	@ 0x37
 8023374:	b2d2      	uxtb	r2, r2
 8023376:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8023378:	68fb      	ldr	r3, [r7, #12]
 802337a:	011b      	lsls	r3, r3, #4
 802337c:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 802337e:	2117      	movs	r1, #23
 8023380:	187b      	adds	r3, r7, r1
 8023382:	781b      	ldrb	r3, [r3, #0]
 8023384:	005b      	lsls	r3, r3, #1
 8023386:	3301      	adds	r3, #1
 8023388:	68ba      	ldr	r2, [r7, #8]
 802338a:	18d3      	adds	r3, r2, r3
 802338c:	2200      	movs	r2, #0
 802338e:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8023390:	187b      	adds	r3, r7, r1
 8023392:	781a      	ldrb	r2, [r3, #0]
 8023394:	187b      	adds	r3, r7, r1
 8023396:	3201      	adds	r2, #1
 8023398:	701a      	strb	r2, [r3, #0]
 802339a:	2317      	movs	r3, #23
 802339c:	18fa      	adds	r2, r7, r3
 802339e:	1dfb      	adds	r3, r7, #7
 80233a0:	7812      	ldrb	r2, [r2, #0]
 80233a2:	781b      	ldrb	r3, [r3, #0]
 80233a4:	429a      	cmp	r2, r3
 80233a6:	d3c8      	bcc.n	802333a <IntToUnicode+0x1e>
  }
}
 80233a8:	46c0      	nop			@ (mov r8, r8)
 80233aa:	46c0      	nop			@ (mov r8, r8)
 80233ac:	46bd      	mov	sp, r7
 80233ae:	b006      	add	sp, #24
 80233b0:	bd80      	pop	{r7, pc}
	...

080233b4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80233b4:	b580      	push	{r7, lr}
 80233b6:	b082      	sub	sp, #8
 80233b8:	af00      	add	r7, sp, #0
 80233ba:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 80233bc:	687b      	ldr	r3, [r7, #4]
 80233be:	681b      	ldr	r3, [r3, #0]
 80233c0:	4a0a      	ldr	r2, [pc, #40]	@ (80233ec <HAL_PCD_MspInit+0x38>)
 80233c2:	4293      	cmp	r3, r2
 80233c4:	d10e      	bne.n	80233e4 <HAL_PCD_MspInit+0x30>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80233c6:	4b0a      	ldr	r3, [pc, #40]	@ (80233f0 <HAL_PCD_MspInit+0x3c>)
 80233c8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80233ca:	4b09      	ldr	r3, [pc, #36]	@ (80233f0 <HAL_PCD_MspInit+0x3c>)
 80233cc:	2180      	movs	r1, #128	@ 0x80
 80233ce:	0409      	lsls	r1, r1, #16
 80233d0:	430a      	orrs	r2, r1
 80233d2:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_IRQn, 0, 0);
 80233d4:	2200      	movs	r2, #0
 80233d6:	2100      	movs	r1, #0
 80233d8:	201f      	movs	r0, #31
 80233da:	f7f1 ff2d 	bl	8015238 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_IRQn);
 80233de:	201f      	movs	r0, #31
 80233e0:	f7f1 ff3f 	bl	8015262 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 80233e4:	46c0      	nop			@ (mov r8, r8)
 80233e6:	46bd      	mov	sp, r7
 80233e8:	b002      	add	sp, #8
 80233ea:	bd80      	pop	{r7, pc}
 80233ec:	40005c00 	.word	0x40005c00
 80233f0:	40021000 	.word	0x40021000

080233f4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80233f4:	b580      	push	{r7, lr}
 80233f6:	b082      	sub	sp, #8
 80233f8:	af00      	add	r7, sp, #0
 80233fa:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80233fc:	687a      	ldr	r2, [r7, #4]
 80233fe:	23bc      	movs	r3, #188	@ 0xbc
 8023400:	009b      	lsls	r3, r3, #2
 8023402:	58d2      	ldr	r2, [r2, r3]
 8023404:	687b      	ldr	r3, [r7, #4]
 8023406:	21ac      	movs	r1, #172	@ 0xac
 8023408:	0089      	lsls	r1, r1, #2
 802340a:	468c      	mov	ip, r1
 802340c:	4463      	add	r3, ip
 802340e:	0019      	movs	r1, r3
 8023410:	0010      	movs	r0, r2
 8023412:	f7fe fc11 	bl	8021c38 <USBD_LL_SetupStage>
}
 8023416:	46c0      	nop			@ (mov r8, r8)
 8023418:	46bd      	mov	sp, r7
 802341a:	b002      	add	sp, #8
 802341c:	bd80      	pop	{r7, pc}

0802341e <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 802341e:	b590      	push	{r4, r7, lr}
 8023420:	b083      	sub	sp, #12
 8023422:	af00      	add	r7, sp, #0
 8023424:	6078      	str	r0, [r7, #4]
 8023426:	000a      	movs	r2, r1
 8023428:	1cfb      	adds	r3, r7, #3
 802342a:	701a      	strb	r2, [r3, #0]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 802342c:	687a      	ldr	r2, [r7, #4]
 802342e:	23bc      	movs	r3, #188	@ 0xbc
 8023430:	009b      	lsls	r3, r3, #2
 8023432:	58d4      	ldr	r4, [r2, r3]
 8023434:	1cfb      	adds	r3, r7, #3
 8023436:	781a      	ldrb	r2, [r3, #0]
 8023438:	6878      	ldr	r0, [r7, #4]
 802343a:	23be      	movs	r3, #190	@ 0xbe
 802343c:	0059      	lsls	r1, r3, #1
 802343e:	0013      	movs	r3, r2
 8023440:	009b      	lsls	r3, r3, #2
 8023442:	189b      	adds	r3, r3, r2
 8023444:	00db      	lsls	r3, r3, #3
 8023446:	18c3      	adds	r3, r0, r3
 8023448:	185b      	adds	r3, r3, r1
 802344a:	681a      	ldr	r2, [r3, #0]
 802344c:	1cfb      	adds	r3, r7, #3
 802344e:	781b      	ldrb	r3, [r3, #0]
 8023450:	0019      	movs	r1, r3
 8023452:	0020      	movs	r0, r4
 8023454:	f7fe fc4e 	bl	8021cf4 <USBD_LL_DataOutStage>
}
 8023458:	46c0      	nop			@ (mov r8, r8)
 802345a:	46bd      	mov	sp, r7
 802345c:	b003      	add	sp, #12
 802345e:	bd90      	pop	{r4, r7, pc}

08023460 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8023460:	b580      	push	{r7, lr}
 8023462:	b082      	sub	sp, #8
 8023464:	af00      	add	r7, sp, #0
 8023466:	6078      	str	r0, [r7, #4]
 8023468:	000a      	movs	r2, r1
 802346a:	1cfb      	adds	r3, r7, #3
 802346c:	701a      	strb	r2, [r3, #0]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 802346e:	687a      	ldr	r2, [r7, #4]
 8023470:	23bc      	movs	r3, #188	@ 0xbc
 8023472:	009b      	lsls	r3, r3, #2
 8023474:	58d0      	ldr	r0, [r2, r3]
 8023476:	1cfb      	adds	r3, r7, #3
 8023478:	781a      	ldrb	r2, [r3, #0]
 802347a:	6879      	ldr	r1, [r7, #4]
 802347c:	0013      	movs	r3, r2
 802347e:	009b      	lsls	r3, r3, #2
 8023480:	189b      	adds	r3, r3, r2
 8023482:	00db      	lsls	r3, r3, #3
 8023484:	18cb      	adds	r3, r1, r3
 8023486:	333c      	adds	r3, #60	@ 0x3c
 8023488:	681a      	ldr	r2, [r3, #0]
 802348a:	1cfb      	adds	r3, r7, #3
 802348c:	781b      	ldrb	r3, [r3, #0]
 802348e:	0019      	movs	r1, r3
 8023490:	f7fe fcb2 	bl	8021df8 <USBD_LL_DataInStage>
}
 8023494:	46c0      	nop			@ (mov r8, r8)
 8023496:	46bd      	mov	sp, r7
 8023498:	b002      	add	sp, #8
 802349a:	bd80      	pop	{r7, pc}

0802349c <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 802349c:	b580      	push	{r7, lr}
 802349e:	b082      	sub	sp, #8
 80234a0:	af00      	add	r7, sp, #0
 80234a2:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80234a4:	687a      	ldr	r2, [r7, #4]
 80234a6:	23bc      	movs	r3, #188	@ 0xbc
 80234a8:	009b      	lsls	r3, r3, #2
 80234aa:	58d3      	ldr	r3, [r2, r3]
 80234ac:	0018      	movs	r0, r3
 80234ae:	f7fe fde9 	bl	8022084 <USBD_LL_SOF>
}
 80234b2:	46c0      	nop			@ (mov r8, r8)
 80234b4:	46bd      	mov	sp, r7
 80234b6:	b002      	add	sp, #8
 80234b8:	bd80      	pop	{r7, pc}

080234ba <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80234ba:	b580      	push	{r7, lr}
 80234bc:	b084      	sub	sp, #16
 80234be:	af00      	add	r7, sp, #0
 80234c0:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80234c2:	230f      	movs	r3, #15
 80234c4:	18fb      	adds	r3, r7, r3
 80234c6:	2201      	movs	r2, #1
 80234c8:	701a      	strb	r2, [r3, #0]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80234ca:	687b      	ldr	r3, [r7, #4]
 80234cc:	689b      	ldr	r3, [r3, #8]
 80234ce:	2b02      	cmp	r3, #2
 80234d0:	d001      	beq.n	80234d6 <HAL_PCD_ResetCallback+0x1c>
  {
    Error_Handler();
 80234d2:	f7e9 ff69 	bl	800d3a8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80234d6:	687a      	ldr	r2, [r7, #4]
 80234d8:	23bc      	movs	r3, #188	@ 0xbc
 80234da:	009b      	lsls	r3, r3, #2
 80234dc:	58d2      	ldr	r2, [r2, r3]
 80234de:	230f      	movs	r3, #15
 80234e0:	18fb      	adds	r3, r7, r3
 80234e2:	781b      	ldrb	r3, [r3, #0]
 80234e4:	0019      	movs	r1, r3
 80234e6:	0010      	movs	r0, r2
 80234e8:	f7fe fd8b 	bl	8022002 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80234ec:	687a      	ldr	r2, [r7, #4]
 80234ee:	23bc      	movs	r3, #188	@ 0xbc
 80234f0:	009b      	lsls	r3, r3, #2
 80234f2:	58d3      	ldr	r3, [r2, r3]
 80234f4:	0018      	movs	r0, r3
 80234f6:	f7fe fd3c 	bl	8021f72 <USBD_LL_Reset>
}
 80234fa:	46c0      	nop			@ (mov r8, r8)
 80234fc:	46bd      	mov	sp, r7
 80234fe:	b004      	add	sp, #16
 8023500:	bd80      	pop	{r7, pc}
	...

08023504 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8023504:	b580      	push	{r7, lr}
 8023506:	b082      	sub	sp, #8
 8023508:	af00      	add	r7, sp, #0
 802350a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 802350c:	687a      	ldr	r2, [r7, #4]
 802350e:	23bc      	movs	r3, #188	@ 0xbc
 8023510:	009b      	lsls	r3, r3, #2
 8023512:	58d3      	ldr	r3, [r2, r3]
 8023514:	0018      	movs	r0, r3
 8023516:	f7fe fd85 	bl	8022024 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 802351a:	687b      	ldr	r3, [r7, #4]
 802351c:	699b      	ldr	r3, [r3, #24]
 802351e:	2b00      	cmp	r3, #0
 8023520:	d005      	beq.n	802352e <HAL_PCD_SuspendCallback+0x2a>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8023522:	4b05      	ldr	r3, [pc, #20]	@ (8023538 <HAL_PCD_SuspendCallback+0x34>)
 8023524:	691a      	ldr	r2, [r3, #16]
 8023526:	4b04      	ldr	r3, [pc, #16]	@ (8023538 <HAL_PCD_SuspendCallback+0x34>)
 8023528:	2106      	movs	r1, #6
 802352a:	430a      	orrs	r2, r1
 802352c:	611a      	str	r2, [r3, #16]
  }
  /* USER CODE END 2 */
}
 802352e:	46c0      	nop			@ (mov r8, r8)
 8023530:	46bd      	mov	sp, r7
 8023532:	b002      	add	sp, #8
 8023534:	bd80      	pop	{r7, pc}
 8023536:	46c0      	nop			@ (mov r8, r8)
 8023538:	e000ed00 	.word	0xe000ed00

0802353c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 802353c:	b580      	push	{r7, lr}
 802353e:	b082      	sub	sp, #8
 8023540:	af00      	add	r7, sp, #0
 8023542:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 8023544:	687b      	ldr	r3, [r7, #4]
 8023546:	699b      	ldr	r3, [r3, #24]
 8023548:	2b00      	cmp	r3, #0
 802354a:	d007      	beq.n	802355c <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 802354c:	4b09      	ldr	r3, [pc, #36]	@ (8023574 <HAL_PCD_ResumeCallback+0x38>)
 802354e:	691a      	ldr	r2, [r3, #16]
 8023550:	4b08      	ldr	r3, [pc, #32]	@ (8023574 <HAL_PCD_ResumeCallback+0x38>)
 8023552:	2106      	movs	r1, #6
 8023554:	438a      	bics	r2, r1
 8023556:	611a      	str	r2, [r3, #16]
    SystemClockConfig_Resume();
 8023558:	f000 fa44 	bl	80239e4 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 802355c:	687a      	ldr	r2, [r7, #4]
 802355e:	23bc      	movs	r3, #188	@ 0xbc
 8023560:	009b      	lsls	r3, r3, #2
 8023562:	58d3      	ldr	r3, [r2, r3]
 8023564:	0018      	movs	r0, r3
 8023566:	f7fe fd75 	bl	8022054 <USBD_LL_Resume>
}
 802356a:	46c0      	nop			@ (mov r8, r8)
 802356c:	46bd      	mov	sp, r7
 802356e:	b002      	add	sp, #8
 8023570:	bd80      	pop	{r7, pc}
 8023572:	46c0      	nop			@ (mov r8, r8)
 8023574:	e000ed00 	.word	0xe000ed00

08023578 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8023578:	b580      	push	{r7, lr}
 802357a:	b082      	sub	sp, #8
 802357c:	af00      	add	r7, sp, #0
 802357e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8023580:	4a2d      	ldr	r2, [pc, #180]	@ (8023638 <USBD_LL_Init+0xc0>)
 8023582:	23bc      	movs	r3, #188	@ 0xbc
 8023584:	009b      	lsls	r3, r3, #2
 8023586:	6879      	ldr	r1, [r7, #4]
 8023588:	50d1      	str	r1, [r2, r3]
  pdev->pData = &hpcd_USB_FS;
 802358a:	687a      	ldr	r2, [r7, #4]
 802358c:	23b0      	movs	r3, #176	@ 0xb0
 802358e:	009b      	lsls	r3, r3, #2
 8023590:	4929      	ldr	r1, [pc, #164]	@ (8023638 <USBD_LL_Init+0xc0>)
 8023592:	50d1      	str	r1, [r2, r3]

  hpcd_USB_FS.Instance = USB;
 8023594:	4b28      	ldr	r3, [pc, #160]	@ (8023638 <USBD_LL_Init+0xc0>)
 8023596:	4a29      	ldr	r2, [pc, #164]	@ (802363c <USBD_LL_Init+0xc4>)
 8023598:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 802359a:	4b27      	ldr	r3, [pc, #156]	@ (8023638 <USBD_LL_Init+0xc0>)
 802359c:	2208      	movs	r2, #8
 802359e:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80235a0:	4b25      	ldr	r3, [pc, #148]	@ (8023638 <USBD_LL_Init+0xc0>)
 80235a2:	2202      	movs	r2, #2
 80235a4:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80235a6:	4b24      	ldr	r3, [pc, #144]	@ (8023638 <USBD_LL_Init+0xc0>)
 80235a8:	2202      	movs	r2, #2
 80235aa:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80235ac:	4b22      	ldr	r3, [pc, #136]	@ (8023638 <USBD_LL_Init+0xc0>)
 80235ae:	2200      	movs	r2, #0
 80235b0:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 80235b2:	4b21      	ldr	r3, [pc, #132]	@ (8023638 <USBD_LL_Init+0xc0>)
 80235b4:	2200      	movs	r2, #0
 80235b6:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80235b8:	4b1f      	ldr	r3, [pc, #124]	@ (8023638 <USBD_LL_Init+0xc0>)
 80235ba:	2200      	movs	r2, #0
 80235bc:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80235be:	4b1e      	ldr	r3, [pc, #120]	@ (8023638 <USBD_LL_Init+0xc0>)
 80235c0:	0018      	movs	r0, r3
 80235c2:	f7f5 ff7f 	bl	80194c4 <HAL_PCD_Init>
 80235c6:	1e03      	subs	r3, r0, #0
 80235c8:	d001      	beq.n	80235ce <USBD_LL_Init+0x56>
  {
    Error_Handler( );
 80235ca:	f7e9 feed 	bl	800d3a8 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 80235ce:	687a      	ldr	r2, [r7, #4]
 80235d0:	23b0      	movs	r3, #176	@ 0xb0
 80235d2:	009b      	lsls	r3, r3, #2
 80235d4:	58d0      	ldr	r0, [r2, r3]
 80235d6:	2318      	movs	r3, #24
 80235d8:	2200      	movs	r2, #0
 80235da:	2100      	movs	r1, #0
 80235dc:	f7f7 fd40 	bl	801b060 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 80235e0:	687a      	ldr	r2, [r7, #4]
 80235e2:	23b0      	movs	r3, #176	@ 0xb0
 80235e4:	009b      	lsls	r3, r3, #2
 80235e6:	58d0      	ldr	r0, [r2, r3]
 80235e8:	2358      	movs	r3, #88	@ 0x58
 80235ea:	2200      	movs	r2, #0
 80235ec:	2180      	movs	r1, #128	@ 0x80
 80235ee:	f7f7 fd37 	bl	801b060 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 80235f2:	687a      	ldr	r2, [r7, #4]
 80235f4:	23b0      	movs	r3, #176	@ 0xb0
 80235f6:	009b      	lsls	r3, r3, #2
 80235f8:	58d0      	ldr	r0, [r2, r3]
 80235fa:	23c0      	movs	r3, #192	@ 0xc0
 80235fc:	2200      	movs	r2, #0
 80235fe:	2181      	movs	r1, #129	@ 0x81
 8023600:	f7f7 fd2e 	bl	801b060 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8023604:	687a      	ldr	r2, [r7, #4]
 8023606:	23b0      	movs	r3, #176	@ 0xb0
 8023608:	009b      	lsls	r3, r3, #2
 802360a:	58d0      	ldr	r0, [r2, r3]
 802360c:	2388      	movs	r3, #136	@ 0x88
 802360e:	005b      	lsls	r3, r3, #1
 8023610:	2200      	movs	r2, #0
 8023612:	2101      	movs	r1, #1
 8023614:	f7f7 fd24 	bl	801b060 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8023618:	687a      	ldr	r2, [r7, #4]
 802361a:	23b0      	movs	r3, #176	@ 0xb0
 802361c:	009b      	lsls	r3, r3, #2
 802361e:	58d0      	ldr	r0, [r2, r3]
 8023620:	2380      	movs	r3, #128	@ 0x80
 8023622:	005b      	lsls	r3, r3, #1
 8023624:	2200      	movs	r2, #0
 8023626:	2182      	movs	r1, #130	@ 0x82
 8023628:	f7f7 fd1a 	bl	801b060 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 802362c:	2300      	movs	r3, #0
}
 802362e:	0018      	movs	r0, r3
 8023630:	46bd      	mov	sp, r7
 8023632:	b002      	add	sp, #8
 8023634:	bd80      	pop	{r7, pc}
 8023636:	46c0      	nop			@ (mov r8, r8)
 8023638:	200032bc 	.word	0x200032bc
 802363c:	40005c00 	.word	0x40005c00

08023640 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8023640:	b5f0      	push	{r4, r5, r6, r7, lr}
 8023642:	b085      	sub	sp, #20
 8023644:	af00      	add	r7, sp, #0
 8023646:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8023648:	210f      	movs	r1, #15
 802364a:	187b      	adds	r3, r7, r1
 802364c:	2200      	movs	r2, #0
 802364e:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8023650:	260e      	movs	r6, #14
 8023652:	19bb      	adds	r3, r7, r6
 8023654:	2200      	movs	r2, #0
 8023656:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_Start(pdev->pData);
 8023658:	687a      	ldr	r2, [r7, #4]
 802365a:	23b0      	movs	r3, #176	@ 0xb0
 802365c:	009b      	lsls	r3, r3, #2
 802365e:	58d3      	ldr	r3, [r2, r3]
 8023660:	000d      	movs	r5, r1
 8023662:	187c      	adds	r4, r7, r1
 8023664:	0018      	movs	r0, r3
 8023666:	f7f6 f82d 	bl	80196c4 <HAL_PCD_Start>
 802366a:	0003      	movs	r3, r0
 802366c:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 802366e:	19bc      	adds	r4, r7, r6
 8023670:	197b      	adds	r3, r7, r5
 8023672:	781b      	ldrb	r3, [r3, #0]
 8023674:	0018      	movs	r0, r3
 8023676:	f000 f9bc 	bl	80239f2 <USBD_Get_USB_Status>
 802367a:	0003      	movs	r3, r0
 802367c:	7023      	strb	r3, [r4, #0]

  return usb_status;
 802367e:	19bb      	adds	r3, r7, r6
 8023680:	781b      	ldrb	r3, [r3, #0]
}
 8023682:	0018      	movs	r0, r3
 8023684:	46bd      	mov	sp, r7
 8023686:	b005      	add	sp, #20
 8023688:	bdf0      	pop	{r4, r5, r6, r7, pc}

0802368a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 802368a:	b5f0      	push	{r4, r5, r6, r7, lr}
 802368c:	b085      	sub	sp, #20
 802368e:	af00      	add	r7, sp, #0
 8023690:	6078      	str	r0, [r7, #4]
 8023692:	000c      	movs	r4, r1
 8023694:	0010      	movs	r0, r2
 8023696:	0019      	movs	r1, r3
 8023698:	1cfb      	adds	r3, r7, #3
 802369a:	1c22      	adds	r2, r4, #0
 802369c:	701a      	strb	r2, [r3, #0]
 802369e:	1cbb      	adds	r3, r7, #2
 80236a0:	1c02      	adds	r2, r0, #0
 80236a2:	701a      	strb	r2, [r3, #0]
 80236a4:	003b      	movs	r3, r7
 80236a6:	1c0a      	adds	r2, r1, #0
 80236a8:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80236aa:	260f      	movs	r6, #15
 80236ac:	19bb      	adds	r3, r7, r6
 80236ae:	2200      	movs	r2, #0
 80236b0:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80236b2:	250e      	movs	r5, #14
 80236b4:	197b      	adds	r3, r7, r5
 80236b6:	2200      	movs	r2, #0
 80236b8:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80236ba:	687a      	ldr	r2, [r7, #4]
 80236bc:	23b0      	movs	r3, #176	@ 0xb0
 80236be:	009b      	lsls	r3, r3, #2
 80236c0:	58d0      	ldr	r0, [r2, r3]
 80236c2:	19bc      	adds	r4, r7, r6
 80236c4:	1cbb      	adds	r3, r7, #2
 80236c6:	781d      	ldrb	r5, [r3, #0]
 80236c8:	003b      	movs	r3, r7
 80236ca:	881a      	ldrh	r2, [r3, #0]
 80236cc:	1cfb      	adds	r3, r7, #3
 80236ce:	7819      	ldrb	r1, [r3, #0]
 80236d0:	002b      	movs	r3, r5
 80236d2:	f7f6 f98c 	bl	80199ee <HAL_PCD_EP_Open>
 80236d6:	0003      	movs	r3, r0
 80236d8:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80236da:	250e      	movs	r5, #14
 80236dc:	197c      	adds	r4, r7, r5
 80236de:	19bb      	adds	r3, r7, r6
 80236e0:	781b      	ldrb	r3, [r3, #0]
 80236e2:	0018      	movs	r0, r3
 80236e4:	f000 f985 	bl	80239f2 <USBD_Get_USB_Status>
 80236e8:	0003      	movs	r3, r0
 80236ea:	7023      	strb	r3, [r4, #0]

  return usb_status;
 80236ec:	197b      	adds	r3, r7, r5
 80236ee:	781b      	ldrb	r3, [r3, #0]
}
 80236f0:	0018      	movs	r0, r3
 80236f2:	46bd      	mov	sp, r7
 80236f4:	b005      	add	sp, #20
 80236f6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080236f8 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80236f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80236fa:	b085      	sub	sp, #20
 80236fc:	af00      	add	r7, sp, #0
 80236fe:	6078      	str	r0, [r7, #4]
 8023700:	000a      	movs	r2, r1
 8023702:	1cfb      	adds	r3, r7, #3
 8023704:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8023706:	210f      	movs	r1, #15
 8023708:	187b      	adds	r3, r7, r1
 802370a:	2200      	movs	r2, #0
 802370c:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 802370e:	260e      	movs	r6, #14
 8023710:	19bb      	adds	r3, r7, r6
 8023712:	2200      	movs	r2, #0
 8023714:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8023716:	687a      	ldr	r2, [r7, #4]
 8023718:	23b0      	movs	r3, #176	@ 0xb0
 802371a:	009b      	lsls	r3, r3, #2
 802371c:	58d2      	ldr	r2, [r2, r3]
 802371e:	000d      	movs	r5, r1
 8023720:	187c      	adds	r4, r7, r1
 8023722:	1cfb      	adds	r3, r7, #3
 8023724:	781b      	ldrb	r3, [r3, #0]
 8023726:	0019      	movs	r1, r3
 8023728:	0010      	movs	r0, r2
 802372a:	f7f6 f9cf 	bl	8019acc <HAL_PCD_EP_Close>
 802372e:	0003      	movs	r3, r0
 8023730:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8023732:	19bc      	adds	r4, r7, r6
 8023734:	197b      	adds	r3, r7, r5
 8023736:	781b      	ldrb	r3, [r3, #0]
 8023738:	0018      	movs	r0, r3
 802373a:	f000 f95a 	bl	80239f2 <USBD_Get_USB_Status>
 802373e:	0003      	movs	r3, r0
 8023740:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8023742:	19bb      	adds	r3, r7, r6
 8023744:	781b      	ldrb	r3, [r3, #0]
}
 8023746:	0018      	movs	r0, r3
 8023748:	46bd      	mov	sp, r7
 802374a:	b005      	add	sp, #20
 802374c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0802374e <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 802374e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8023750:	b085      	sub	sp, #20
 8023752:	af00      	add	r7, sp, #0
 8023754:	6078      	str	r0, [r7, #4]
 8023756:	000a      	movs	r2, r1
 8023758:	1cfb      	adds	r3, r7, #3
 802375a:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 802375c:	210f      	movs	r1, #15
 802375e:	187b      	adds	r3, r7, r1
 8023760:	2200      	movs	r2, #0
 8023762:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8023764:	260e      	movs	r6, #14
 8023766:	19bb      	adds	r3, r7, r6
 8023768:	2200      	movs	r2, #0
 802376a:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 802376c:	687a      	ldr	r2, [r7, #4]
 802376e:	23b0      	movs	r3, #176	@ 0xb0
 8023770:	009b      	lsls	r3, r3, #2
 8023772:	58d2      	ldr	r2, [r2, r3]
 8023774:	000d      	movs	r5, r1
 8023776:	187c      	adds	r4, r7, r1
 8023778:	1cfb      	adds	r3, r7, #3
 802377a:	781b      	ldrb	r3, [r3, #0]
 802377c:	0019      	movs	r1, r3
 802377e:	0010      	movs	r0, r2
 8023780:	f7f6 fa81 	bl	8019c86 <HAL_PCD_EP_SetStall>
 8023784:	0003      	movs	r3, r0
 8023786:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8023788:	19bc      	adds	r4, r7, r6
 802378a:	197b      	adds	r3, r7, r5
 802378c:	781b      	ldrb	r3, [r3, #0]
 802378e:	0018      	movs	r0, r3
 8023790:	f000 f92f 	bl	80239f2 <USBD_Get_USB_Status>
 8023794:	0003      	movs	r3, r0
 8023796:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8023798:	19bb      	adds	r3, r7, r6
 802379a:	781b      	ldrb	r3, [r3, #0]
}
 802379c:	0018      	movs	r0, r3
 802379e:	46bd      	mov	sp, r7
 80237a0:	b005      	add	sp, #20
 80237a2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080237a4 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80237a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80237a6:	b085      	sub	sp, #20
 80237a8:	af00      	add	r7, sp, #0
 80237aa:	6078      	str	r0, [r7, #4]
 80237ac:	000a      	movs	r2, r1
 80237ae:	1cfb      	adds	r3, r7, #3
 80237b0:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80237b2:	210f      	movs	r1, #15
 80237b4:	187b      	adds	r3, r7, r1
 80237b6:	2200      	movs	r2, #0
 80237b8:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80237ba:	260e      	movs	r6, #14
 80237bc:	19bb      	adds	r3, r7, r6
 80237be:	2200      	movs	r2, #0
 80237c0:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80237c2:	687a      	ldr	r2, [r7, #4]
 80237c4:	23b0      	movs	r3, #176	@ 0xb0
 80237c6:	009b      	lsls	r3, r3, #2
 80237c8:	58d2      	ldr	r2, [r2, r3]
 80237ca:	000d      	movs	r5, r1
 80237cc:	187c      	adds	r4, r7, r1
 80237ce:	1cfb      	adds	r3, r7, #3
 80237d0:	781b      	ldrb	r3, [r3, #0]
 80237d2:	0019      	movs	r1, r3
 80237d4:	0010      	movs	r0, r2
 80237d6:	f7f6 fab2 	bl	8019d3e <HAL_PCD_EP_ClrStall>
 80237da:	0003      	movs	r3, r0
 80237dc:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80237de:	19bc      	adds	r4, r7, r6
 80237e0:	197b      	adds	r3, r7, r5
 80237e2:	781b      	ldrb	r3, [r3, #0]
 80237e4:	0018      	movs	r0, r3
 80237e6:	f000 f904 	bl	80239f2 <USBD_Get_USB_Status>
 80237ea:	0003      	movs	r3, r0
 80237ec:	7023      	strb	r3, [r4, #0]

  return usb_status;
 80237ee:	19bb      	adds	r3, r7, r6
 80237f0:	781b      	ldrb	r3, [r3, #0]
}
 80237f2:	0018      	movs	r0, r3
 80237f4:	46bd      	mov	sp, r7
 80237f6:	b005      	add	sp, #20
 80237f8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080237fa <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80237fa:	b580      	push	{r7, lr}
 80237fc:	b084      	sub	sp, #16
 80237fe:	af00      	add	r7, sp, #0
 8023800:	6078      	str	r0, [r7, #4]
 8023802:	000a      	movs	r2, r1
 8023804:	1cfb      	adds	r3, r7, #3
 8023806:	701a      	strb	r2, [r3, #0]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8023808:	687a      	ldr	r2, [r7, #4]
 802380a:	23b0      	movs	r3, #176	@ 0xb0
 802380c:	009b      	lsls	r3, r3, #2
 802380e:	58d3      	ldr	r3, [r2, r3]
 8023810:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8023812:	1cfb      	adds	r3, r7, #3
 8023814:	781b      	ldrb	r3, [r3, #0]
 8023816:	b25b      	sxtb	r3, r3
 8023818:	2b00      	cmp	r3, #0
 802381a:	da0d      	bge.n	8023838 <USBD_LL_IsStallEP+0x3e>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 802381c:	1cfb      	adds	r3, r7, #3
 802381e:	781b      	ldrb	r3, [r3, #0]
 8023820:	227f      	movs	r2, #127	@ 0x7f
 8023822:	4013      	ands	r3, r2
 8023824:	68f9      	ldr	r1, [r7, #12]
 8023826:	1c5a      	adds	r2, r3, #1
 8023828:	0013      	movs	r3, r2
 802382a:	009b      	lsls	r3, r3, #2
 802382c:	189b      	adds	r3, r3, r2
 802382e:	00db      	lsls	r3, r3, #3
 8023830:	18cb      	adds	r3, r1, r3
 8023832:	3302      	adds	r3, #2
 8023834:	781b      	ldrb	r3, [r3, #0]
 8023836:	e00d      	b.n	8023854 <USBD_LL_IsStallEP+0x5a>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8023838:	1cfb      	adds	r3, r7, #3
 802383a:	781b      	ldrb	r3, [r3, #0]
 802383c:	227f      	movs	r2, #127	@ 0x7f
 802383e:	401a      	ands	r2, r3
 8023840:	68f8      	ldr	r0, [r7, #12]
 8023842:	23b5      	movs	r3, #181	@ 0xb5
 8023844:	0059      	lsls	r1, r3, #1
 8023846:	0013      	movs	r3, r2
 8023848:	009b      	lsls	r3, r3, #2
 802384a:	189b      	adds	r3, r3, r2
 802384c:	00db      	lsls	r3, r3, #3
 802384e:	18c3      	adds	r3, r0, r3
 8023850:	185b      	adds	r3, r3, r1
 8023852:	781b      	ldrb	r3, [r3, #0]
  }
}
 8023854:	0018      	movs	r0, r3
 8023856:	46bd      	mov	sp, r7
 8023858:	b004      	add	sp, #16
 802385a:	bd80      	pop	{r7, pc}

0802385c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 802385c:	b5f0      	push	{r4, r5, r6, r7, lr}
 802385e:	b085      	sub	sp, #20
 8023860:	af00      	add	r7, sp, #0
 8023862:	6078      	str	r0, [r7, #4]
 8023864:	000a      	movs	r2, r1
 8023866:	1cfb      	adds	r3, r7, #3
 8023868:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 802386a:	210f      	movs	r1, #15
 802386c:	187b      	adds	r3, r7, r1
 802386e:	2200      	movs	r2, #0
 8023870:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8023872:	260e      	movs	r6, #14
 8023874:	19bb      	adds	r3, r7, r6
 8023876:	2200      	movs	r2, #0
 8023878:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 802387a:	687a      	ldr	r2, [r7, #4]
 802387c:	23b0      	movs	r3, #176	@ 0xb0
 802387e:	009b      	lsls	r3, r3, #2
 8023880:	58d2      	ldr	r2, [r2, r3]
 8023882:	000d      	movs	r5, r1
 8023884:	187c      	adds	r4, r7, r1
 8023886:	1cfb      	adds	r3, r7, #3
 8023888:	781b      	ldrb	r3, [r3, #0]
 802388a:	0019      	movs	r1, r3
 802388c:	0010      	movs	r0, r2
 802388e:	f7f6 f883 	bl	8019998 <HAL_PCD_SetAddress>
 8023892:	0003      	movs	r3, r0
 8023894:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8023896:	19bc      	adds	r4, r7, r6
 8023898:	197b      	adds	r3, r7, r5
 802389a:	781b      	ldrb	r3, [r3, #0]
 802389c:	0018      	movs	r0, r3
 802389e:	f000 f8a8 	bl	80239f2 <USBD_Get_USB_Status>
 80238a2:	0003      	movs	r3, r0
 80238a4:	7023      	strb	r3, [r4, #0]

  return usb_status;
 80238a6:	19bb      	adds	r3, r7, r6
 80238a8:	781b      	ldrb	r3, [r3, #0]
}
 80238aa:	0018      	movs	r0, r3
 80238ac:	46bd      	mov	sp, r7
 80238ae:	b005      	add	sp, #20
 80238b0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080238b2 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80238b2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80238b4:	b087      	sub	sp, #28
 80238b6:	af00      	add	r7, sp, #0
 80238b8:	60f8      	str	r0, [r7, #12]
 80238ba:	0008      	movs	r0, r1
 80238bc:	607a      	str	r2, [r7, #4]
 80238be:	0019      	movs	r1, r3
 80238c0:	230b      	movs	r3, #11
 80238c2:	18fb      	adds	r3, r7, r3
 80238c4:	1c02      	adds	r2, r0, #0
 80238c6:	701a      	strb	r2, [r3, #0]
 80238c8:	2408      	movs	r4, #8
 80238ca:	193b      	adds	r3, r7, r4
 80238cc:	1c0a      	adds	r2, r1, #0
 80238ce:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80238d0:	2117      	movs	r1, #23
 80238d2:	187b      	adds	r3, r7, r1
 80238d4:	2200      	movs	r2, #0
 80238d6:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80238d8:	2516      	movs	r5, #22
 80238da:	197b      	adds	r3, r7, r5
 80238dc:	2200      	movs	r2, #0
 80238de:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80238e0:	68fa      	ldr	r2, [r7, #12]
 80238e2:	23b0      	movs	r3, #176	@ 0xb0
 80238e4:	009b      	lsls	r3, r3, #2
 80238e6:	58d0      	ldr	r0, [r2, r3]
 80238e8:	193b      	adds	r3, r7, r4
 80238ea:	881d      	ldrh	r5, [r3, #0]
 80238ec:	000e      	movs	r6, r1
 80238ee:	187c      	adds	r4, r7, r1
 80238f0:	687a      	ldr	r2, [r7, #4]
 80238f2:	230b      	movs	r3, #11
 80238f4:	18fb      	adds	r3, r7, r3
 80238f6:	7819      	ldrb	r1, [r3, #0]
 80238f8:	002b      	movs	r3, r5
 80238fa:	f7f6 f988 	bl	8019c0e <HAL_PCD_EP_Transmit>
 80238fe:	0003      	movs	r3, r0
 8023900:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8023902:	2516      	movs	r5, #22
 8023904:	197c      	adds	r4, r7, r5
 8023906:	19bb      	adds	r3, r7, r6
 8023908:	781b      	ldrb	r3, [r3, #0]
 802390a:	0018      	movs	r0, r3
 802390c:	f000 f871 	bl	80239f2 <USBD_Get_USB_Status>
 8023910:	0003      	movs	r3, r0
 8023912:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8023914:	197b      	adds	r3, r7, r5
 8023916:	781b      	ldrb	r3, [r3, #0]
}
 8023918:	0018      	movs	r0, r3
 802391a:	46bd      	mov	sp, r7
 802391c:	b007      	add	sp, #28
 802391e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08023920 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8023920:	b5f0      	push	{r4, r5, r6, r7, lr}
 8023922:	b087      	sub	sp, #28
 8023924:	af00      	add	r7, sp, #0
 8023926:	60f8      	str	r0, [r7, #12]
 8023928:	0008      	movs	r0, r1
 802392a:	607a      	str	r2, [r7, #4]
 802392c:	0019      	movs	r1, r3
 802392e:	230b      	movs	r3, #11
 8023930:	18fb      	adds	r3, r7, r3
 8023932:	1c02      	adds	r2, r0, #0
 8023934:	701a      	strb	r2, [r3, #0]
 8023936:	2408      	movs	r4, #8
 8023938:	193b      	adds	r3, r7, r4
 802393a:	1c0a      	adds	r2, r1, #0
 802393c:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 802393e:	2117      	movs	r1, #23
 8023940:	187b      	adds	r3, r7, r1
 8023942:	2200      	movs	r2, #0
 8023944:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8023946:	2516      	movs	r5, #22
 8023948:	197b      	adds	r3, r7, r5
 802394a:	2200      	movs	r2, #0
 802394c:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 802394e:	68fa      	ldr	r2, [r7, #12]
 8023950:	23b0      	movs	r3, #176	@ 0xb0
 8023952:	009b      	lsls	r3, r3, #2
 8023954:	58d0      	ldr	r0, [r2, r3]
 8023956:	193b      	adds	r3, r7, r4
 8023958:	881d      	ldrh	r5, [r3, #0]
 802395a:	000e      	movs	r6, r1
 802395c:	187c      	adds	r4, r7, r1
 802395e:	687a      	ldr	r2, [r7, #4]
 8023960:	230b      	movs	r3, #11
 8023962:	18fb      	adds	r3, r7, r3
 8023964:	7819      	ldrb	r1, [r3, #0]
 8023966:	002b      	movs	r3, r5
 8023968:	f7f6 f901 	bl	8019b6e <HAL_PCD_EP_Receive>
 802396c:	0003      	movs	r3, r0
 802396e:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8023970:	2516      	movs	r5, #22
 8023972:	197c      	adds	r4, r7, r5
 8023974:	19bb      	adds	r3, r7, r6
 8023976:	781b      	ldrb	r3, [r3, #0]
 8023978:	0018      	movs	r0, r3
 802397a:	f000 f83a 	bl	80239f2 <USBD_Get_USB_Status>
 802397e:	0003      	movs	r3, r0
 8023980:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8023982:	197b      	adds	r3, r7, r5
 8023984:	781b      	ldrb	r3, [r3, #0]
}
 8023986:	0018      	movs	r0, r3
 8023988:	46bd      	mov	sp, r7
 802398a:	b007      	add	sp, #28
 802398c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0802398e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 802398e:	b580      	push	{r7, lr}
 8023990:	b082      	sub	sp, #8
 8023992:	af00      	add	r7, sp, #0
 8023994:	6078      	str	r0, [r7, #4]
 8023996:	000a      	movs	r2, r1
 8023998:	1cfb      	adds	r3, r7, #3
 802399a:	701a      	strb	r2, [r3, #0]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 802399c:	687a      	ldr	r2, [r7, #4]
 802399e:	23b0      	movs	r3, #176	@ 0xb0
 80239a0:	009b      	lsls	r3, r3, #2
 80239a2:	58d2      	ldr	r2, [r2, r3]
 80239a4:	1cfb      	adds	r3, r7, #3
 80239a6:	781b      	ldrb	r3, [r3, #0]
 80239a8:	0019      	movs	r1, r3
 80239aa:	0010      	movs	r0, r2
 80239ac:	f7f6 f916 	bl	8019bdc <HAL_PCD_EP_GetRxCount>
 80239b0:	0003      	movs	r3, r0
}
 80239b2:	0018      	movs	r0, r3
 80239b4:	46bd      	mov	sp, r7
 80239b6:	b002      	add	sp, #8
 80239b8:	bd80      	pop	{r7, pc}
	...

080239bc <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80239bc:	b580      	push	{r7, lr}
 80239be:	b082      	sub	sp, #8
 80239c0:	af00      	add	r7, sp, #0
 80239c2:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80239c4:	4b02      	ldr	r3, [pc, #8]	@ (80239d0 <USBD_static_malloc+0x14>)
}
 80239c6:	0018      	movs	r0, r3
 80239c8:	46bd      	mov	sp, r7
 80239ca:	b002      	add	sp, #8
 80239cc:	bd80      	pop	{r7, pc}
 80239ce:	46c0      	nop			@ (mov r8, r8)
 80239d0:	200035b0 	.word	0x200035b0

080239d4 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80239d4:	b580      	push	{r7, lr}
 80239d6:	b082      	sub	sp, #8
 80239d8:	af00      	add	r7, sp, #0
 80239da:	6078      	str	r0, [r7, #4]

}
 80239dc:	46c0      	nop			@ (mov r8, r8)
 80239de:	46bd      	mov	sp, r7
 80239e0:	b002      	add	sp, #8
 80239e2:	bd80      	pop	{r7, pc}

080239e4 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 80239e4:	b580      	push	{r7, lr}
 80239e6:	af00      	add	r7, sp, #0
  SystemClock_Config();
 80239e8:	f7e9 fb72 	bl	800d0d0 <SystemClock_Config>
}
 80239ec:	46c0      	nop			@ (mov r8, r8)
 80239ee:	46bd      	mov	sp, r7
 80239f0:	bd80      	pop	{r7, pc}

080239f2 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80239f2:	b580      	push	{r7, lr}
 80239f4:	b084      	sub	sp, #16
 80239f6:	af00      	add	r7, sp, #0
 80239f8:	0002      	movs	r2, r0
 80239fa:	1dfb      	adds	r3, r7, #7
 80239fc:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80239fe:	230f      	movs	r3, #15
 8023a00:	18fb      	adds	r3, r7, r3
 8023a02:	2200      	movs	r2, #0
 8023a04:	701a      	strb	r2, [r3, #0]

  switch (hal_status)
 8023a06:	1dfb      	adds	r3, r7, #7
 8023a08:	781b      	ldrb	r3, [r3, #0]
 8023a0a:	2b03      	cmp	r3, #3
 8023a0c:	d017      	beq.n	8023a3e <USBD_Get_USB_Status+0x4c>
 8023a0e:	dc1b      	bgt.n	8023a48 <USBD_Get_USB_Status+0x56>
 8023a10:	2b02      	cmp	r3, #2
 8023a12:	d00f      	beq.n	8023a34 <USBD_Get_USB_Status+0x42>
 8023a14:	dc18      	bgt.n	8023a48 <USBD_Get_USB_Status+0x56>
 8023a16:	2b00      	cmp	r3, #0
 8023a18:	d002      	beq.n	8023a20 <USBD_Get_USB_Status+0x2e>
 8023a1a:	2b01      	cmp	r3, #1
 8023a1c:	d005      	beq.n	8023a2a <USBD_Get_USB_Status+0x38>
 8023a1e:	e013      	b.n	8023a48 <USBD_Get_USB_Status+0x56>
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8023a20:	230f      	movs	r3, #15
 8023a22:	18fb      	adds	r3, r7, r3
 8023a24:	2200      	movs	r2, #0
 8023a26:	701a      	strb	r2, [r3, #0]
    break;
 8023a28:	e013      	b.n	8023a52 <USBD_Get_USB_Status+0x60>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8023a2a:	230f      	movs	r3, #15
 8023a2c:	18fb      	adds	r3, r7, r3
 8023a2e:	2202      	movs	r2, #2
 8023a30:	701a      	strb	r2, [r3, #0]
    break;
 8023a32:	e00e      	b.n	8023a52 <USBD_Get_USB_Status+0x60>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8023a34:	230f      	movs	r3, #15
 8023a36:	18fb      	adds	r3, r7, r3
 8023a38:	2201      	movs	r2, #1
 8023a3a:	701a      	strb	r2, [r3, #0]
    break;
 8023a3c:	e009      	b.n	8023a52 <USBD_Get_USB_Status+0x60>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8023a3e:	230f      	movs	r3, #15
 8023a40:	18fb      	adds	r3, r7, r3
 8023a42:	2202      	movs	r2, #2
 8023a44:	701a      	strb	r2, [r3, #0]
    break;
 8023a46:	e004      	b.n	8023a52 <USBD_Get_USB_Status+0x60>
    default :
      usb_status = USBD_FAIL;
 8023a48:	230f      	movs	r3, #15
 8023a4a:	18fb      	adds	r3, r7, r3
 8023a4c:	2202      	movs	r2, #2
 8023a4e:	701a      	strb	r2, [r3, #0]
    break;
 8023a50:	46c0      	nop			@ (mov r8, r8)
  }
  return usb_status;
 8023a52:	230f      	movs	r3, #15
 8023a54:	18fb      	adds	r3, r7, r3
 8023a56:	781b      	ldrb	r3, [r3, #0]
}
 8023a58:	0018      	movs	r0, r3
 8023a5a:	46bd      	mov	sp, r7
 8023a5c:	b004      	add	sp, #16
 8023a5e:	bd80      	pop	{r7, pc}

08023a60 <arm_cfft_radix4by2_q31>:
 8023a60:	b5f0      	push	{r4, r5, r6, r7, lr}
 8023a62:	465f      	mov	r7, fp
 8023a64:	4656      	mov	r6, sl
 8023a66:	464d      	mov	r5, r9
 8023a68:	4644      	mov	r4, r8
 8023a6a:	000b      	movs	r3, r1
 8023a6c:	b4f0      	push	{r4, r5, r6, r7}
 8023a6e:	085b      	lsrs	r3, r3, #1
 8023a70:	b08f      	sub	sp, #60	@ 0x3c
 8023a72:	910a      	str	r1, [sp, #40]	@ 0x28
 8023a74:	0007      	movs	r7, r0
 8023a76:	9009      	str	r0, [sp, #36]	@ 0x24
 8023a78:	0011      	movs	r1, r2
 8023a7a:	920b      	str	r2, [sp, #44]	@ 0x2c
 8023a7c:	930c      	str	r3, [sp, #48]	@ 0x30
 8023a7e:	2b00      	cmp	r3, #0
 8023a80:	d100      	bne.n	8023a84 <arm_cfft_radix4by2_q31+0x24>
 8023a82:	e0a0      	b.n	8023bc6 <arm_cfft_radix4by2_q31+0x166>
 8023a84:	0002      	movs	r2, r0
 8023a86:	00db      	lsls	r3, r3, #3
 8023a88:	3204      	adds	r2, #4
 8023a8a:	4691      	mov	r9, r2
 8023a8c:	4698      	mov	r8, r3
 8023a8e:	000a      	movs	r2, r1
 8023a90:	464e      	mov	r6, r9
 8023a92:	4442      	add	r2, r8
 8023a94:	4699      	mov	r9, r3
 8023a96:	4688      	mov	r8, r1
 8023a98:	9208      	str	r2, [sp, #32]
 8023a9a:	900d      	str	r0, [sp, #52]	@ 0x34
 8023a9c:	4643      	mov	r3, r8
 8023a9e:	681b      	ldr	r3, [r3, #0]
 8023aa0:	469b      	mov	fp, r3
 8023aa2:	4643      	mov	r3, r8
 8023aa4:	685b      	ldr	r3, [r3, #4]
 8023aa6:	469a      	mov	sl, r3
 8023aa8:	683b      	ldr	r3, [r7, #0]
 8023aaa:	109c      	asrs	r4, r3, #2
 8023aac:	464b      	mov	r3, r9
 8023aae:	58fb      	ldr	r3, [r7, r3]
 8023ab0:	109a      	asrs	r2, r3, #2
 8023ab2:	18a3      	adds	r3, r4, r2
 8023ab4:	603b      	str	r3, [r7, #0]
 8023ab6:	6833      	ldr	r3, [r6, #0]
 8023ab8:	1aa4      	subs	r4, r4, r2
 8023aba:	109d      	asrs	r5, r3, #2
 8023abc:	464b      	mov	r3, r9
 8023abe:	58f3      	ldr	r3, [r6, r3]
 8023ac0:	17e2      	asrs	r2, r4, #31
 8023ac2:	109b      	asrs	r3, r3, #2
 8023ac4:	18e9      	adds	r1, r5, r3
 8023ac6:	6031      	str	r1, [r6, #0]
 8023ac8:	0011      	movs	r1, r2
 8023aca:	465a      	mov	r2, fp
 8023acc:	17d2      	asrs	r2, r2, #31
 8023ace:	0010      	movs	r0, r2
 8023ad0:	4652      	mov	r2, sl
 8023ad2:	1aed      	subs	r5, r5, r3
 8023ad4:	17eb      	asrs	r3, r5, #31
 8023ad6:	17d2      	asrs	r2, r2, #31
 8023ad8:	9307      	str	r3, [sp, #28]
 8023ada:	9204      	str	r2, [sp, #16]
 8023adc:	0003      	movs	r3, r0
 8023ade:	465a      	mov	r2, fp
 8023ae0:	9006      	str	r0, [sp, #24]
 8023ae2:	0020      	movs	r0, r4
 8023ae4:	9105      	str	r1, [sp, #20]
 8023ae6:	f7dc fd6b 	bl	80005c0 <__aeabi_lmul>
 8023aea:	2280      	movs	r2, #128	@ 0x80
 8023aec:	2300      	movs	r3, #0
 8023aee:	0612      	lsls	r2, r2, #24
 8023af0:	1880      	adds	r0, r0, r2
 8023af2:	4159      	adcs	r1, r3
 8023af4:	2300      	movs	r3, #0
 8023af6:	9101      	str	r1, [sp, #4]
 8023af8:	9300      	str	r3, [sp, #0]
 8023afa:	4652      	mov	r2, sl
 8023afc:	9b04      	ldr	r3, [sp, #16]
 8023afe:	0028      	movs	r0, r5
 8023b00:	17e9      	asrs	r1, r5, #31
 8023b02:	f7dc fd5d 	bl	80005c0 <__aeabi_lmul>
 8023b06:	9a00      	ldr	r2, [sp, #0]
 8023b08:	9b01      	ldr	r3, [sp, #4]
 8023b0a:	1880      	adds	r0, r0, r2
 8023b0c:	4159      	adcs	r1, r3
 8023b0e:	2280      	movs	r2, #128	@ 0x80
 8023b10:	2300      	movs	r3, #0
 8023b12:	0612      	lsls	r2, r2, #24
 8023b14:	1880      	adds	r0, r0, r2
 8023b16:	4159      	adcs	r1, r3
 8023b18:	464a      	mov	r2, r9
 8023b1a:	004b      	lsls	r3, r1, #1
 8023b1c:	50bb      	str	r3, [r7, r2]
 8023b1e:	4658      	mov	r0, fp
 8023b20:	002a      	movs	r2, r5
 8023b22:	9b07      	ldr	r3, [sp, #28]
 8023b24:	9906      	ldr	r1, [sp, #24]
 8023b26:	f7dc fd4b 	bl	80005c0 <__aeabi_lmul>
 8023b2a:	2280      	movs	r2, #128	@ 0x80
 8023b2c:	2300      	movs	r3, #0
 8023b2e:	0612      	lsls	r2, r2, #24
 8023b30:	1880      	adds	r0, r0, r2
 8023b32:	4159      	adcs	r1, r3
 8023b34:	2000      	movs	r0, #0
 8023b36:	9103      	str	r1, [sp, #12]
 8023b38:	9002      	str	r0, [sp, #8]
 8023b3a:	4652      	mov	r2, sl
 8023b3c:	9b04      	ldr	r3, [sp, #16]
 8023b3e:	0020      	movs	r0, r4
 8023b40:	9905      	ldr	r1, [sp, #20]
 8023b42:	f7dc fd3d 	bl	80005c0 <__aeabi_lmul>
 8023b46:	9a02      	ldr	r2, [sp, #8]
 8023b48:	9b03      	ldr	r3, [sp, #12]
 8023b4a:	1a12      	subs	r2, r2, r0
 8023b4c:	418b      	sbcs	r3, r1
 8023b4e:	2080      	movs	r0, #128	@ 0x80
 8023b50:	2100      	movs	r1, #0
 8023b52:	0600      	lsls	r0, r0, #24
 8023b54:	1812      	adds	r2, r2, r0
 8023b56:	414b      	adcs	r3, r1
 8023b58:	464a      	mov	r2, r9
 8023b5a:	005b      	lsls	r3, r3, #1
 8023b5c:	50b3      	str	r3, [r6, r2]
 8023b5e:	2308      	movs	r3, #8
 8023b60:	469c      	mov	ip, r3
 8023b62:	9b08      	ldr	r3, [sp, #32]
 8023b64:	44e0      	add	r8, ip
 8023b66:	3708      	adds	r7, #8
 8023b68:	3608      	adds	r6, #8
 8023b6a:	4598      	cmp	r8, r3
 8023b6c:	d196      	bne.n	8023a9c <arm_cfft_radix4by2_q31+0x3c>
 8023b6e:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 8023b70:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 8023b72:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8023b74:	2302      	movs	r3, #2
 8023b76:	003a      	movs	r2, r7
 8023b78:	0029      	movs	r1, r5
 8023b7a:	0020      	movs	r0, r4
 8023b7c:	9e0d      	ldr	r6, [sp, #52]	@ 0x34
 8023b7e:	f000 f957 	bl	8023e30 <arm_radix4_butterfly_q31>
 8023b82:	46a4      	mov	ip, r4
 8023b84:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8023b86:	2302      	movs	r3, #2
 8023b88:	0088      	lsls	r0, r1, #2
 8023b8a:	4460      	add	r0, ip
 8023b8c:	003a      	movs	r2, r7
 8023b8e:	0029      	movs	r1, r5
 8023b90:	f000 f94e 	bl	8023e30 <arm_radix4_butterfly_q31>
 8023b94:	46a4      	mov	ip, r4
 8023b96:	0128      	lsls	r0, r5, #4
 8023b98:	4460      	add	r0, ip
 8023b9a:	6833      	ldr	r3, [r6, #0]
 8023b9c:	005b      	lsls	r3, r3, #1
 8023b9e:	6033      	str	r3, [r6, #0]
 8023ba0:	6873      	ldr	r3, [r6, #4]
 8023ba2:	005b      	lsls	r3, r3, #1
 8023ba4:	6073      	str	r3, [r6, #4]
 8023ba6:	68b3      	ldr	r3, [r6, #8]
 8023ba8:	005b      	lsls	r3, r3, #1
 8023baa:	60b3      	str	r3, [r6, #8]
 8023bac:	68f3      	ldr	r3, [r6, #12]
 8023bae:	005b      	lsls	r3, r3, #1
 8023bb0:	60f3      	str	r3, [r6, #12]
 8023bb2:	3610      	adds	r6, #16
 8023bb4:	42b0      	cmp	r0, r6
 8023bb6:	d1f0      	bne.n	8023b9a <arm_cfft_radix4by2_q31+0x13a>
 8023bb8:	b00f      	add	sp, #60	@ 0x3c
 8023bba:	bc3c      	pop	{r2, r3, r4, r5}
 8023bbc:	4690      	mov	r8, r2
 8023bbe:	4699      	mov	r9, r3
 8023bc0:	46a2      	mov	sl, r4
 8023bc2:	46ab      	mov	fp, r5
 8023bc4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8023bc6:	2302      	movs	r3, #2
 8023bc8:	2100      	movs	r1, #0
 8023bca:	0015      	movs	r5, r2
 8023bcc:	f000 f930 	bl	8023e30 <arm_radix4_butterfly_q31>
 8023bd0:	46bc      	mov	ip, r7
 8023bd2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8023bd4:	002a      	movs	r2, r5
 8023bd6:	0098      	lsls	r0, r3, #2
 8023bd8:	4460      	add	r0, ip
 8023bda:	2302      	movs	r3, #2
 8023bdc:	2100      	movs	r1, #0
 8023bde:	f000 f927 	bl	8023e30 <arm_radix4_butterfly_q31>
 8023be2:	e7e9      	b.n	8023bb8 <arm_cfft_radix4by2_q31+0x158>

08023be4 <arm_cfft_radix4by2_inverse_q31>:
 8023be4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8023be6:	465f      	mov	r7, fp
 8023be8:	4656      	mov	r6, sl
 8023bea:	464d      	mov	r5, r9
 8023bec:	4644      	mov	r4, r8
 8023bee:	000b      	movs	r3, r1
 8023bf0:	b4f0      	push	{r4, r5, r6, r7}
 8023bf2:	085b      	lsrs	r3, r3, #1
 8023bf4:	b08f      	sub	sp, #60	@ 0x3c
 8023bf6:	910a      	str	r1, [sp, #40]	@ 0x28
 8023bf8:	0007      	movs	r7, r0
 8023bfa:	9009      	str	r0, [sp, #36]	@ 0x24
 8023bfc:	0011      	movs	r1, r2
 8023bfe:	920b      	str	r2, [sp, #44]	@ 0x2c
 8023c00:	930c      	str	r3, [sp, #48]	@ 0x30
 8023c02:	2b00      	cmp	r3, #0
 8023c04:	d100      	bne.n	8023c08 <arm_cfft_radix4by2_inverse_q31+0x24>
 8023c06:	e0a0      	b.n	8023d4a <arm_cfft_radix4by2_inverse_q31+0x166>
 8023c08:	0002      	movs	r2, r0
 8023c0a:	00db      	lsls	r3, r3, #3
 8023c0c:	3204      	adds	r2, #4
 8023c0e:	4691      	mov	r9, r2
 8023c10:	4698      	mov	r8, r3
 8023c12:	000a      	movs	r2, r1
 8023c14:	464e      	mov	r6, r9
 8023c16:	4442      	add	r2, r8
 8023c18:	4699      	mov	r9, r3
 8023c1a:	4688      	mov	r8, r1
 8023c1c:	9208      	str	r2, [sp, #32]
 8023c1e:	900d      	str	r0, [sp, #52]	@ 0x34
 8023c20:	4643      	mov	r3, r8
 8023c22:	681b      	ldr	r3, [r3, #0]
 8023c24:	469b      	mov	fp, r3
 8023c26:	4643      	mov	r3, r8
 8023c28:	685b      	ldr	r3, [r3, #4]
 8023c2a:	469a      	mov	sl, r3
 8023c2c:	683b      	ldr	r3, [r7, #0]
 8023c2e:	109c      	asrs	r4, r3, #2
 8023c30:	464b      	mov	r3, r9
 8023c32:	58fb      	ldr	r3, [r7, r3]
 8023c34:	109a      	asrs	r2, r3, #2
 8023c36:	18a3      	adds	r3, r4, r2
 8023c38:	603b      	str	r3, [r7, #0]
 8023c3a:	6833      	ldr	r3, [r6, #0]
 8023c3c:	1aa4      	subs	r4, r4, r2
 8023c3e:	109d      	asrs	r5, r3, #2
 8023c40:	464b      	mov	r3, r9
 8023c42:	58f3      	ldr	r3, [r6, r3]
 8023c44:	17e2      	asrs	r2, r4, #31
 8023c46:	109b      	asrs	r3, r3, #2
 8023c48:	18e9      	adds	r1, r5, r3
 8023c4a:	6031      	str	r1, [r6, #0]
 8023c4c:	0011      	movs	r1, r2
 8023c4e:	465a      	mov	r2, fp
 8023c50:	17d2      	asrs	r2, r2, #31
 8023c52:	0010      	movs	r0, r2
 8023c54:	4652      	mov	r2, sl
 8023c56:	1aed      	subs	r5, r5, r3
 8023c58:	17eb      	asrs	r3, r5, #31
 8023c5a:	17d2      	asrs	r2, r2, #31
 8023c5c:	9307      	str	r3, [sp, #28]
 8023c5e:	9204      	str	r2, [sp, #16]
 8023c60:	0003      	movs	r3, r0
 8023c62:	465a      	mov	r2, fp
 8023c64:	9006      	str	r0, [sp, #24]
 8023c66:	0020      	movs	r0, r4
 8023c68:	9105      	str	r1, [sp, #20]
 8023c6a:	f7dc fca9 	bl	80005c0 <__aeabi_lmul>
 8023c6e:	2280      	movs	r2, #128	@ 0x80
 8023c70:	2300      	movs	r3, #0
 8023c72:	0612      	lsls	r2, r2, #24
 8023c74:	1880      	adds	r0, r0, r2
 8023c76:	4159      	adcs	r1, r3
 8023c78:	2300      	movs	r3, #0
 8023c7a:	9101      	str	r1, [sp, #4]
 8023c7c:	9300      	str	r3, [sp, #0]
 8023c7e:	4652      	mov	r2, sl
 8023c80:	9b04      	ldr	r3, [sp, #16]
 8023c82:	0028      	movs	r0, r5
 8023c84:	17e9      	asrs	r1, r5, #31
 8023c86:	f7dc fc9b 	bl	80005c0 <__aeabi_lmul>
 8023c8a:	9a00      	ldr	r2, [sp, #0]
 8023c8c:	9b01      	ldr	r3, [sp, #4]
 8023c8e:	1a12      	subs	r2, r2, r0
 8023c90:	418b      	sbcs	r3, r1
 8023c92:	2080      	movs	r0, #128	@ 0x80
 8023c94:	2100      	movs	r1, #0
 8023c96:	0600      	lsls	r0, r0, #24
 8023c98:	1812      	adds	r2, r2, r0
 8023c9a:	414b      	adcs	r3, r1
 8023c9c:	464a      	mov	r2, r9
 8023c9e:	005b      	lsls	r3, r3, #1
 8023ca0:	50bb      	str	r3, [r7, r2]
 8023ca2:	4658      	mov	r0, fp
 8023ca4:	002a      	movs	r2, r5
 8023ca6:	9b07      	ldr	r3, [sp, #28]
 8023ca8:	9906      	ldr	r1, [sp, #24]
 8023caa:	f7dc fc89 	bl	80005c0 <__aeabi_lmul>
 8023cae:	2280      	movs	r2, #128	@ 0x80
 8023cb0:	2300      	movs	r3, #0
 8023cb2:	0612      	lsls	r2, r2, #24
 8023cb4:	1880      	adds	r0, r0, r2
 8023cb6:	4159      	adcs	r1, r3
 8023cb8:	2000      	movs	r0, #0
 8023cba:	9103      	str	r1, [sp, #12]
 8023cbc:	9002      	str	r0, [sp, #8]
 8023cbe:	4652      	mov	r2, sl
 8023cc0:	9b04      	ldr	r3, [sp, #16]
 8023cc2:	0020      	movs	r0, r4
 8023cc4:	9905      	ldr	r1, [sp, #20]
 8023cc6:	f7dc fc7b 	bl	80005c0 <__aeabi_lmul>
 8023cca:	9b02      	ldr	r3, [sp, #8]
 8023ccc:	9c03      	ldr	r4, [sp, #12]
 8023cce:	18c0      	adds	r0, r0, r3
 8023cd0:	4161      	adcs	r1, r4
 8023cd2:	2380      	movs	r3, #128	@ 0x80
 8023cd4:	2400      	movs	r4, #0
 8023cd6:	061b      	lsls	r3, r3, #24
 8023cd8:	18c0      	adds	r0, r0, r3
 8023cda:	4161      	adcs	r1, r4
 8023cdc:	464a      	mov	r2, r9
 8023cde:	004b      	lsls	r3, r1, #1
 8023ce0:	50b3      	str	r3, [r6, r2]
 8023ce2:	2308      	movs	r3, #8
 8023ce4:	469c      	mov	ip, r3
 8023ce6:	9b08      	ldr	r3, [sp, #32]
 8023ce8:	44e0      	add	r8, ip
 8023cea:	3708      	adds	r7, #8
 8023cec:	3608      	adds	r6, #8
 8023cee:	4598      	cmp	r8, r3
 8023cf0:	d196      	bne.n	8023c20 <arm_cfft_radix4by2_inverse_q31+0x3c>
 8023cf2:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 8023cf4:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 8023cf6:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8023cf8:	2302      	movs	r3, #2
 8023cfa:	003a      	movs	r2, r7
 8023cfc:	0029      	movs	r1, r5
 8023cfe:	0020      	movs	r0, r4
 8023d00:	9e0d      	ldr	r6, [sp, #52]	@ 0x34
 8023d02:	f000 fb3b 	bl	802437c <arm_radix4_butterfly_inverse_q31>
 8023d06:	46a4      	mov	ip, r4
 8023d08:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8023d0a:	2302      	movs	r3, #2
 8023d0c:	0088      	lsls	r0, r1, #2
 8023d0e:	4460      	add	r0, ip
 8023d10:	003a      	movs	r2, r7
 8023d12:	0029      	movs	r1, r5
 8023d14:	f000 fb32 	bl	802437c <arm_radix4_butterfly_inverse_q31>
 8023d18:	46a4      	mov	ip, r4
 8023d1a:	0128      	lsls	r0, r5, #4
 8023d1c:	4460      	add	r0, ip
 8023d1e:	6833      	ldr	r3, [r6, #0]
 8023d20:	005b      	lsls	r3, r3, #1
 8023d22:	6033      	str	r3, [r6, #0]
 8023d24:	6873      	ldr	r3, [r6, #4]
 8023d26:	005b      	lsls	r3, r3, #1
 8023d28:	6073      	str	r3, [r6, #4]
 8023d2a:	68b3      	ldr	r3, [r6, #8]
 8023d2c:	005b      	lsls	r3, r3, #1
 8023d2e:	60b3      	str	r3, [r6, #8]
 8023d30:	68f3      	ldr	r3, [r6, #12]
 8023d32:	005b      	lsls	r3, r3, #1
 8023d34:	60f3      	str	r3, [r6, #12]
 8023d36:	3610      	adds	r6, #16
 8023d38:	42b0      	cmp	r0, r6
 8023d3a:	d1f0      	bne.n	8023d1e <arm_cfft_radix4by2_inverse_q31+0x13a>
 8023d3c:	b00f      	add	sp, #60	@ 0x3c
 8023d3e:	bc3c      	pop	{r2, r3, r4, r5}
 8023d40:	4690      	mov	r8, r2
 8023d42:	4699      	mov	r9, r3
 8023d44:	46a2      	mov	sl, r4
 8023d46:	46ab      	mov	fp, r5
 8023d48:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8023d4a:	2302      	movs	r3, #2
 8023d4c:	2100      	movs	r1, #0
 8023d4e:	0015      	movs	r5, r2
 8023d50:	f000 fb14 	bl	802437c <arm_radix4_butterfly_inverse_q31>
 8023d54:	46bc      	mov	ip, r7
 8023d56:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8023d58:	002a      	movs	r2, r5
 8023d5a:	0098      	lsls	r0, r3, #2
 8023d5c:	4460      	add	r0, ip
 8023d5e:	2302      	movs	r3, #2
 8023d60:	2100      	movs	r1, #0
 8023d62:	f000 fb0b 	bl	802437c <arm_radix4_butterfly_inverse_q31>
 8023d66:	e7e9      	b.n	8023d3c <arm_cfft_radix4by2_inverse_q31+0x158>

08023d68 <arm_cfft_q31>:
 8023d68:	b570      	push	{r4, r5, r6, lr}
 8023d6a:	001e      	movs	r6, r3
 8023d6c:	2380      	movs	r3, #128	@ 0x80
 8023d6e:	000d      	movs	r5, r1
 8023d70:	0004      	movs	r4, r0
 8023d72:	8801      	ldrh	r1, [r0, #0]
 8023d74:	005b      	lsls	r3, r3, #1
 8023d76:	2a01      	cmp	r2, #1
 8023d78:	d028      	beq.n	8023dcc <arm_cfft_q31+0x64>
 8023d7a:	4299      	cmp	r1, r3
 8023d7c:	d020      	beq.n	8023dc0 <arm_cfft_q31+0x58>
 8023d7e:	d812      	bhi.n	8023da6 <arm_cfft_q31+0x3e>
 8023d80:	2920      	cmp	r1, #32
 8023d82:	d004      	beq.n	8023d8e <arm_cfft_q31+0x26>
 8023d84:	d949      	bls.n	8023e1a <arm_cfft_q31+0xb2>
 8023d86:	2940      	cmp	r1, #64	@ 0x40
 8023d88:	d01a      	beq.n	8023dc0 <arm_cfft_q31+0x58>
 8023d8a:	2980      	cmp	r1, #128	@ 0x80
 8023d8c:	d103      	bne.n	8023d96 <arm_cfft_q31+0x2e>
 8023d8e:	6862      	ldr	r2, [r4, #4]
 8023d90:	0028      	movs	r0, r5
 8023d92:	f7ff fe65 	bl	8023a60 <arm_cfft_radix4by2_q31>
 8023d96:	2e00      	cmp	r6, #0
 8023d98:	d004      	beq.n	8023da4 <arm_cfft_q31+0x3c>
 8023d9a:	68a2      	ldr	r2, [r4, #8]
 8023d9c:	89a1      	ldrh	r1, [r4, #12]
 8023d9e:	0028      	movs	r0, r5
 8023da0:	f7dc f9b2 	bl	8000108 <arm_bitreversal_32>
 8023da4:	bd70      	pop	{r4, r5, r6, pc}
 8023da6:	2380      	movs	r3, #128	@ 0x80
 8023da8:	00db      	lsls	r3, r3, #3
 8023daa:	4299      	cmp	r1, r3
 8023dac:	d008      	beq.n	8023dc0 <arm_cfft_q31+0x58>
 8023dae:	d92f      	bls.n	8023e10 <arm_cfft_q31+0xa8>
 8023db0:	2380      	movs	r3, #128	@ 0x80
 8023db2:	011b      	lsls	r3, r3, #4
 8023db4:	4299      	cmp	r1, r3
 8023db6:	d0ea      	beq.n	8023d8e <arm_cfft_q31+0x26>
 8023db8:	2380      	movs	r3, #128	@ 0x80
 8023dba:	015b      	lsls	r3, r3, #5
 8023dbc:	4299      	cmp	r1, r3
 8023dbe:	d1ea      	bne.n	8023d96 <arm_cfft_q31+0x2e>
 8023dc0:	2301      	movs	r3, #1
 8023dc2:	6862      	ldr	r2, [r4, #4]
 8023dc4:	0028      	movs	r0, r5
 8023dc6:	f000 f833 	bl	8023e30 <arm_radix4_butterfly_q31>
 8023dca:	e7e4      	b.n	8023d96 <arm_cfft_q31+0x2e>
 8023dcc:	4299      	cmp	r1, r3
 8023dce:	d019      	beq.n	8023e04 <arm_cfft_q31+0x9c>
 8023dd0:	d80b      	bhi.n	8023dea <arm_cfft_q31+0x82>
 8023dd2:	2920      	cmp	r1, #32
 8023dd4:	d004      	beq.n	8023de0 <arm_cfft_q31+0x78>
 8023dd6:	d928      	bls.n	8023e2a <arm_cfft_q31+0xc2>
 8023dd8:	2940      	cmp	r1, #64	@ 0x40
 8023dda:	d013      	beq.n	8023e04 <arm_cfft_q31+0x9c>
 8023ddc:	2980      	cmp	r1, #128	@ 0x80
 8023dde:	d1da      	bne.n	8023d96 <arm_cfft_q31+0x2e>
 8023de0:	6862      	ldr	r2, [r4, #4]
 8023de2:	0028      	movs	r0, r5
 8023de4:	f7ff fefe 	bl	8023be4 <arm_cfft_radix4by2_inverse_q31>
 8023de8:	e7d5      	b.n	8023d96 <arm_cfft_q31+0x2e>
 8023dea:	2380      	movs	r3, #128	@ 0x80
 8023dec:	00db      	lsls	r3, r3, #3
 8023dee:	4299      	cmp	r1, r3
 8023df0:	d008      	beq.n	8023e04 <arm_cfft_q31+0x9c>
 8023df2:	d915      	bls.n	8023e20 <arm_cfft_q31+0xb8>
 8023df4:	2380      	movs	r3, #128	@ 0x80
 8023df6:	011b      	lsls	r3, r3, #4
 8023df8:	4299      	cmp	r1, r3
 8023dfa:	d0f1      	beq.n	8023de0 <arm_cfft_q31+0x78>
 8023dfc:	2380      	movs	r3, #128	@ 0x80
 8023dfe:	015b      	lsls	r3, r3, #5
 8023e00:	4299      	cmp	r1, r3
 8023e02:	d1c8      	bne.n	8023d96 <arm_cfft_q31+0x2e>
 8023e04:	2301      	movs	r3, #1
 8023e06:	6862      	ldr	r2, [r4, #4]
 8023e08:	0028      	movs	r0, r5
 8023e0a:	f000 fab7 	bl	802437c <arm_radix4_butterfly_inverse_q31>
 8023e0e:	e7c2      	b.n	8023d96 <arm_cfft_q31+0x2e>
 8023e10:	2380      	movs	r3, #128	@ 0x80
 8023e12:	009b      	lsls	r3, r3, #2
 8023e14:	4299      	cmp	r1, r3
 8023e16:	d0ba      	beq.n	8023d8e <arm_cfft_q31+0x26>
 8023e18:	e7bd      	b.n	8023d96 <arm_cfft_q31+0x2e>
 8023e1a:	2910      	cmp	r1, #16
 8023e1c:	d1bb      	bne.n	8023d96 <arm_cfft_q31+0x2e>
 8023e1e:	e7cf      	b.n	8023dc0 <arm_cfft_q31+0x58>
 8023e20:	2380      	movs	r3, #128	@ 0x80
 8023e22:	009b      	lsls	r3, r3, #2
 8023e24:	4299      	cmp	r1, r3
 8023e26:	d0db      	beq.n	8023de0 <arm_cfft_q31+0x78>
 8023e28:	e7b5      	b.n	8023d96 <arm_cfft_q31+0x2e>
 8023e2a:	2910      	cmp	r1, #16
 8023e2c:	d1b3      	bne.n	8023d96 <arm_cfft_q31+0x2e>
 8023e2e:	e7e9      	b.n	8023e04 <arm_cfft_q31+0x9c>

08023e30 <arm_radix4_butterfly_q31>:
 8023e30:	b5f0      	push	{r4, r5, r6, r7, lr}
 8023e32:	464d      	mov	r5, r9
 8023e34:	4644      	mov	r4, r8
 8023e36:	465f      	mov	r7, fp
 8023e38:	4656      	mov	r6, sl
 8023e3a:	469c      	mov	ip, r3
 8023e3c:	b4f0      	push	{r4, r5, r6, r7}
 8023e3e:	b0a7      	sub	sp, #156	@ 0x9c
 8023e40:	9114      	str	r1, [sp, #80]	@ 0x50
 8023e42:	0889      	lsrs	r1, r1, #2
 8023e44:	9310      	str	r3, [sp, #64]	@ 0x40
 8023e46:	00cb      	lsls	r3, r1, #3
 8023e48:	0015      	movs	r5, r2
 8023e4a:	9223      	str	r2, [sp, #140]	@ 0x8c
 8023e4c:	18c2      	adds	r2, r0, r3
 8023e4e:	000c      	movs	r4, r1
 8023e50:	469a      	mov	sl, r3
 8023e52:	9124      	str	r1, [sp, #144]	@ 0x90
 8023e54:	18d1      	adds	r1, r2, r3
 8023e56:	4663      	mov	r3, ip
 8023e58:	468b      	mov	fp, r1
 8023e5a:	0119      	lsls	r1, r3, #4
 8023e5c:	910d      	str	r1, [sp, #52]	@ 0x34
 8023e5e:	00d9      	lsls	r1, r3, #3
 8023e60:	005b      	lsls	r3, r3, #1
 8023e62:	4463      	add	r3, ip
 8023e64:	910e      	str	r1, [sp, #56]	@ 0x38
 8023e66:	00d9      	lsls	r1, r3, #3
 8023e68:	465b      	mov	r3, fp
 8023e6a:	44da      	add	sl, fp
 8023e6c:	4690      	mov	r8, r2
 8023e6e:	4683      	mov	fp, r0
 8023e70:	4699      	mov	r9, r3
 8023e72:	9022      	str	r0, [sp, #136]	@ 0x88
 8023e74:	9025      	str	r0, [sp, #148]	@ 0x94
 8023e76:	910f      	str	r1, [sp, #60]	@ 0x3c
 8023e78:	9502      	str	r5, [sp, #8]
 8023e7a:	9500      	str	r5, [sp, #0]
 8023e7c:	9501      	str	r5, [sp, #4]
 8023e7e:	9407      	str	r4, [sp, #28]
 8023e80:	465b      	mov	r3, fp
 8023e82:	681b      	ldr	r3, [r3, #0]
 8023e84:	4642      	mov	r2, r8
 8023e86:	111c      	asrs	r4, r3, #4
 8023e88:	464b      	mov	r3, r9
 8023e8a:	4658      	mov	r0, fp
 8023e8c:	681b      	ldr	r3, [r3, #0]
 8023e8e:	6812      	ldr	r2, [r2, #0]
 8023e90:	111b      	asrs	r3, r3, #4
 8023e92:	18e7      	adds	r7, r4, r3
 8023e94:	1ae3      	subs	r3, r4, r3
 8023e96:	1114      	asrs	r4, r2, #4
 8023e98:	4652      	mov	r2, sl
 8023e9a:	6840      	ldr	r0, [r0, #4]
 8023e9c:	6812      	ldr	r2, [r2, #0]
 8023e9e:	1105      	asrs	r5, r0, #4
 8023ea0:	4648      	mov	r0, r9
 8023ea2:	9303      	str	r3, [sp, #12]
 8023ea4:	1113      	asrs	r3, r2, #4
 8023ea6:	18e2      	adds	r2, r4, r3
 8023ea8:	465c      	mov	r4, fp
 8023eaa:	6840      	ldr	r0, [r0, #4]
 8023eac:	1103      	asrs	r3, r0, #4
 8023eae:	18ee      	adds	r6, r5, r3
 8023eb0:	1ae8      	subs	r0, r5, r3
 8023eb2:	18bb      	adds	r3, r7, r2
 8023eb4:	6023      	str	r3, [r4, #0]
 8023eb6:	4644      	mov	r4, r8
 8023eb8:	6864      	ldr	r4, [r4, #4]
 8023eba:	9004      	str	r0, [sp, #16]
 8023ebc:	1125      	asrs	r5, r4, #4
 8023ebe:	4654      	mov	r4, sl
 8023ec0:	6864      	ldr	r4, [r4, #4]
 8023ec2:	1123      	asrs	r3, r4, #4
 8023ec4:	465c      	mov	r4, fp
 8023ec6:	18eb      	adds	r3, r5, r3
 8023ec8:	18f1      	adds	r1, r6, r3
 8023eca:	6061      	str	r1, [r4, #4]
 8023ecc:	4655      	mov	r5, sl
 8023ece:	4644      	mov	r4, r8
 8023ed0:	686d      	ldr	r5, [r5, #4]
 8023ed2:	6864      	ldr	r4, [r4, #4]
 8023ed4:	1129      	asrs	r1, r5, #4
 8023ed6:	1124      	asrs	r4, r4, #4
 8023ed8:	1a64      	subs	r4, r4, r1
 8023eda:	4641      	mov	r1, r8
 8023edc:	6809      	ldr	r1, [r1, #0]
 8023ede:	9405      	str	r4, [sp, #20]
 8023ee0:	1108      	asrs	r0, r1, #4
 8023ee2:	4651      	mov	r1, sl
 8023ee4:	6809      	ldr	r1, [r1, #0]
 8023ee6:	1abc      	subs	r4, r7, r2
 8023ee8:	1109      	asrs	r1, r1, #4
 8023eea:	1a41      	subs	r1, r0, r1
 8023eec:	17e2      	asrs	r2, r4, #31
 8023eee:	9106      	str	r1, [sp, #24]
 8023ef0:	0011      	movs	r1, r2
 8023ef2:	9a01      	ldr	r2, [sp, #4]
 8023ef4:	9108      	str	r1, [sp, #32]
 8023ef6:	6817      	ldr	r7, [r2, #0]
 8023ef8:	17fd      	asrs	r5, r7, #31
 8023efa:	0028      	movs	r0, r5
 8023efc:	1af5      	subs	r5, r6, r3
 8023efe:	17ee      	asrs	r6, r5, #31
 8023f00:	960a      	str	r6, [sp, #40]	@ 0x28
 8023f02:	6856      	ldr	r6, [r2, #4]
 8023f04:	9009      	str	r0, [sp, #36]	@ 0x24
 8023f06:	17f3      	asrs	r3, r6, #31
 8023f08:	003a      	movs	r2, r7
 8023f0a:	930b      	str	r3, [sp, #44]	@ 0x2c
 8023f0c:	0003      	movs	r3, r0
 8023f0e:	0020      	movs	r0, r4
 8023f10:	f7dc fb56 	bl	80005c0 <__aeabi_lmul>
 8023f14:	0032      	movs	r2, r6
 8023f16:	17f3      	asrs	r3, r6, #31
 8023f18:	910c      	str	r1, [sp, #48]	@ 0x30
 8023f1a:	0028      	movs	r0, r5
 8023f1c:	17e9      	asrs	r1, r5, #31
 8023f1e:	f7dc fb4f 	bl	80005c0 <__aeabi_lmul>
 8023f22:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8023f24:	002a      	movs	r2, r5
 8023f26:	4684      	mov	ip, r0
 8023f28:	4640      	mov	r0, r8
 8023f2a:	4461      	add	r1, ip
 8023f2c:	0049      	lsls	r1, r1, #1
 8023f2e:	6001      	str	r1, [r0, #0]
 8023f30:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8023f32:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8023f34:	0038      	movs	r0, r7
 8023f36:	f7dc fb43 	bl	80005c0 <__aeabi_lmul>
 8023f3a:	0032      	movs	r2, r6
 8023f3c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8023f3e:	000d      	movs	r5, r1
 8023f40:	0020      	movs	r0, r4
 8023f42:	9908      	ldr	r1, [sp, #32]
 8023f44:	f7dc fb3c 	bl	80005c0 <__aeabi_lmul>
 8023f48:	4646      	mov	r6, r8
 8023f4a:	1a6d      	subs	r5, r5, r1
 8023f4c:	006d      	lsls	r5, r5, #1
 8023f4e:	6075      	str	r5, [r6, #4]
 8023f50:	9903      	ldr	r1, [sp, #12]
 8023f52:	9d05      	ldr	r5, [sp, #20]
 8023f54:	000c      	movs	r4, r1
 8023f56:	46ac      	mov	ip, r5
 8023f58:	4464      	add	r4, ip
 8023f5a:	17e6      	asrs	r6, r4, #31
 8023f5c:	0031      	movs	r1, r6
 8023f5e:	9b00      	ldr	r3, [sp, #0]
 8023f60:	9804      	ldr	r0, [sp, #16]
 8023f62:	681e      	ldr	r6, [r3, #0]
 8023f64:	17f7      	asrs	r7, r6, #31
 8023f66:	9709      	str	r7, [sp, #36]	@ 0x24
 8023f68:	9f06      	ldr	r7, [sp, #24]
 8023f6a:	0032      	movs	r2, r6
 8023f6c:	1bc7      	subs	r7, r0, r7
 8023f6e:	17fd      	asrs	r5, r7, #31
 8023f70:	950a      	str	r5, [sp, #40]	@ 0x28
 8023f72:	685d      	ldr	r5, [r3, #4]
 8023f74:	17f3      	asrs	r3, r6, #31
 8023f76:	17e8      	asrs	r0, r5, #31
 8023f78:	900b      	str	r0, [sp, #44]	@ 0x2c
 8023f7a:	0020      	movs	r0, r4
 8023f7c:	9108      	str	r1, [sp, #32]
 8023f7e:	f7dc fb1f 	bl	80005c0 <__aeabi_lmul>
 8023f82:	002a      	movs	r2, r5
 8023f84:	17eb      	asrs	r3, r5, #31
 8023f86:	910c      	str	r1, [sp, #48]	@ 0x30
 8023f88:	0038      	movs	r0, r7
 8023f8a:	17f9      	asrs	r1, r7, #31
 8023f8c:	f7dc fb18 	bl	80005c0 <__aeabi_lmul>
 8023f90:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8023f92:	003a      	movs	r2, r7
 8023f94:	4684      	mov	ip, r0
 8023f96:	4648      	mov	r0, r9
 8023f98:	4461      	add	r1, ip
 8023f9a:	0049      	lsls	r1, r1, #1
 8023f9c:	6001      	str	r1, [r0, #0]
 8023f9e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8023fa0:	0030      	movs	r0, r6
 8023fa2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8023fa4:	f7dc fb0c 	bl	80005c0 <__aeabi_lmul>
 8023fa8:	002a      	movs	r2, r5
 8023faa:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8023fac:	000e      	movs	r6, r1
 8023fae:	0020      	movs	r0, r4
 8023fb0:	9908      	ldr	r1, [sp, #32]
 8023fb2:	f7dc fb05 	bl	80005c0 <__aeabi_lmul>
 8023fb6:	464c      	mov	r4, r9
 8023fb8:	9d05      	ldr	r5, [sp, #20]
 8023fba:	1a76      	subs	r6, r6, r1
 8023fbc:	9903      	ldr	r1, [sp, #12]
 8023fbe:	0076      	lsls	r6, r6, #1
 8023fc0:	6066      	str	r6, [r4, #4]
 8023fc2:	1b4c      	subs	r4, r1, r5
 8023fc4:	9e06      	ldr	r6, [sp, #24]
 8023fc6:	17e1      	asrs	r1, r4, #31
 8023fc8:	9103      	str	r1, [sp, #12]
 8023fca:	9902      	ldr	r1, [sp, #8]
 8023fcc:	46b4      	mov	ip, r6
 8023fce:	680f      	ldr	r7, [r1, #0]
 8023fd0:	9804      	ldr	r0, [sp, #16]
 8023fd2:	17fd      	asrs	r5, r7, #31
 8023fd4:	002b      	movs	r3, r5
 8023fd6:	684e      	ldr	r6, [r1, #4]
 8023fd8:	4460      	add	r0, ip
 8023fda:	0005      	movs	r5, r0
 8023fdc:	17c0      	asrs	r0, r0, #31
 8023fde:	9005      	str	r0, [sp, #20]
 8023fe0:	17f0      	asrs	r0, r6, #31
 8023fe2:	9006      	str	r0, [sp, #24]
 8023fe4:	003a      	movs	r2, r7
 8023fe6:	0020      	movs	r0, r4
 8023fe8:	17e1      	asrs	r1, r4, #31
 8023fea:	9304      	str	r3, [sp, #16]
 8023fec:	f7dc fae8 	bl	80005c0 <__aeabi_lmul>
 8023ff0:	0032      	movs	r2, r6
 8023ff2:	9108      	str	r1, [sp, #32]
 8023ff4:	17f3      	asrs	r3, r6, #31
 8023ff6:	0028      	movs	r0, r5
 8023ff8:	17e9      	asrs	r1, r5, #31
 8023ffa:	f7dc fae1 	bl	80005c0 <__aeabi_lmul>
 8023ffe:	9808      	ldr	r0, [sp, #32]
 8024000:	002a      	movs	r2, r5
 8024002:	4684      	mov	ip, r0
 8024004:	4650      	mov	r0, sl
 8024006:	4461      	add	r1, ip
 8024008:	0049      	lsls	r1, r1, #1
 802400a:	6001      	str	r1, [r0, #0]
 802400c:	9b05      	ldr	r3, [sp, #20]
 802400e:	9904      	ldr	r1, [sp, #16]
 8024010:	0038      	movs	r0, r7
 8024012:	f7dc fad5 	bl	80005c0 <__aeabi_lmul>
 8024016:	0020      	movs	r0, r4
 8024018:	2408      	movs	r4, #8
 802401a:	000d      	movs	r5, r1
 802401c:	0032      	movs	r2, r6
 802401e:	9b06      	ldr	r3, [sp, #24]
 8024020:	9903      	ldr	r1, [sp, #12]
 8024022:	f7dc facd 	bl	80005c0 <__aeabi_lmul>
 8024026:	46a4      	mov	ip, r4
 8024028:	4650      	mov	r0, sl
 802402a:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 802402c:	44e3      	add	fp, ip
 802402e:	44e0      	add	r8, ip
 8024030:	44e1      	add	r9, ip
 8024032:	44e2      	add	sl, ip
 8024034:	46a4      	mov	ip, r4
 8024036:	1a6d      	subs	r5, r5, r1
 8024038:	006d      	lsls	r5, r5, #1
 802403a:	9a01      	ldr	r2, [sp, #4]
 802403c:	6045      	str	r5, [r0, #4]
 802403e:	9807      	ldr	r0, [sp, #28]
 8024040:	4462      	add	r2, ip
 8024042:	3801      	subs	r0, #1
 8024044:	9201      	str	r2, [sp, #4]
 8024046:	9007      	str	r0, [sp, #28]
 8024048:	9b00      	ldr	r3, [sp, #0]
 802404a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 802404c:	9902      	ldr	r1, [sp, #8]
 802404e:	4694      	mov	ip, r2
 8024050:	4463      	add	r3, ip
 8024052:	9300      	str	r3, [sp, #0]
 8024054:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8024056:	469c      	mov	ip, r3
 8024058:	4461      	add	r1, ip
 802405a:	9102      	str	r1, [sp, #8]
 802405c:	2800      	cmp	r0, #0
 802405e:	d000      	beq.n	8024062 <arm_radix4_butterfly_q31+0x232>
 8024060:	e70e      	b.n	8023e80 <arm_radix4_butterfly_q31+0x50>
 8024062:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8024064:	009b      	lsls	r3, r3, #2
 8024066:	931f      	str	r3, [sp, #124]	@ 0x7c
 8024068:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 802406a:	9320      	str	r3, [sp, #128]	@ 0x80
 802406c:	9313      	str	r3, [sp, #76]	@ 0x4c
 802406e:	2b04      	cmp	r3, #4
 8024070:	d800      	bhi.n	8024074 <arm_radix4_butterfly_q31+0x244>
 8024072:	e180      	b.n	8024376 <arm_radix4_butterfly_q31+0x546>
 8024074:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8024076:	0893      	lsrs	r3, r2, #2
 8024078:	1e59      	subs	r1, r3, #1
 802407a:	9321      	str	r3, [sp, #132]	@ 0x84
 802407c:	00db      	lsls	r3, r3, #3
 802407e:	931b      	str	r3, [sp, #108]	@ 0x6c
 8024080:	00d3      	lsls	r3, r2, #3
 8024082:	9300      	str	r3, [sp, #0]
 8024084:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 8024086:	911a      	str	r1, [sp, #104]	@ 0x68
 8024088:	00da      	lsls	r2, r3, #3
 802408a:	921e      	str	r2, [sp, #120]	@ 0x78
 802408c:	011a      	lsls	r2, r3, #4
 802408e:	921d      	str	r2, [sp, #116]	@ 0x74
 8024090:	001a      	movs	r2, r3
 8024092:	4694      	mov	ip, r2
 8024094:	005b      	lsls	r3, r3, #1
 8024096:	4463      	add	r3, ip
 8024098:	00db      	lsls	r3, r3, #3
 802409a:	931c      	str	r3, [sp, #112]	@ 0x70
 802409c:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 802409e:	9317      	str	r3, [sp, #92]	@ 0x5c
 80240a0:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80240a2:	9318      	str	r3, [sp, #96]	@ 0x60
 80240a4:	9319      	str	r3, [sp, #100]	@ 0x64
 80240a6:	9316      	str	r3, [sp, #88]	@ 0x58
 80240a8:	2300      	movs	r3, #0
 80240aa:	9315      	str	r3, [sp, #84]	@ 0x54
 80240ac:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80240ae:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 80240b0:	681a      	ldr	r2, [r3, #0]
 80240b2:	685b      	ldr	r3, [r3, #4]
 80240b4:	9205      	str	r2, [sp, #20]
 80240b6:	9306      	str	r3, [sp, #24]
 80240b8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80240ba:	468c      	mov	ip, r1
 80240bc:	681a      	ldr	r2, [r3, #0]
 80240be:	685b      	ldr	r3, [r3, #4]
 80240c0:	9207      	str	r2, [sp, #28]
 80240c2:	9308      	str	r3, [sp, #32]
 80240c4:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 80240c6:	681a      	ldr	r2, [r3, #0]
 80240c8:	685b      	ldr	r3, [r3, #4]
 80240ca:	9209      	str	r2, [sp, #36]	@ 0x24
 80240cc:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 80240ce:	930a      	str	r3, [sp, #40]	@ 0x28
 80240d0:	0013      	movs	r3, r2
 80240d2:	4463      	add	r3, ip
 80240d4:	4698      	mov	r8, r3
 80240d6:	0013      	movs	r3, r2
 80240d8:	4442      	add	r2, r8
 80240da:	4691      	mov	r9, r2
 80240dc:	001a      	movs	r2, r3
 80240de:	444a      	add	r2, r9
 80240e0:	4692      	mov	sl, r2
 80240e2:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80240e4:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 80240e6:	4293      	cmp	r3, r2
 80240e8:	d800      	bhi.n	80240ec <arm_radix4_butterfly_q31+0x2bc>
 80240ea:	e0dd      	b.n	80242a8 <arm_radix4_butterfly_q31+0x478>
 80240ec:	4694      	mov	ip, r2
 80240ee:	468b      	mov	fp, r1
 80240f0:	4644      	mov	r4, r8
 80240f2:	4655      	mov	r5, sl
 80240f4:	9b07      	ldr	r3, [sp, #28]
 80240f6:	17db      	asrs	r3, r3, #31
 80240f8:	930c      	str	r3, [sp, #48]	@ 0x30
 80240fa:	9b08      	ldr	r3, [sp, #32]
 80240fc:	17db      	asrs	r3, r3, #31
 80240fe:	930d      	str	r3, [sp, #52]	@ 0x34
 8024100:	9b05      	ldr	r3, [sp, #20]
 8024102:	17db      	asrs	r3, r3, #31
 8024104:	930e      	str	r3, [sp, #56]	@ 0x38
 8024106:	9b06      	ldr	r3, [sp, #24]
 8024108:	17db      	asrs	r3, r3, #31
 802410a:	930f      	str	r3, [sp, #60]	@ 0x3c
 802410c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802410e:	17db      	asrs	r3, r3, #31
 8024110:	9310      	str	r3, [sp, #64]	@ 0x40
 8024112:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8024114:	17db      	asrs	r3, r3, #31
 8024116:	9311      	str	r3, [sp, #68]	@ 0x44
 8024118:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 802411a:	4463      	add	r3, ip
 802411c:	930b      	str	r3, [sp, #44]	@ 0x2c
 802411e:	465b      	mov	r3, fp
 8024120:	4659      	mov	r1, fp
 8024122:	681a      	ldr	r2, [r3, #0]
 8024124:	464b      	mov	r3, r9
 8024126:	684f      	ldr	r7, [r1, #4]
 8024128:	4649      	mov	r1, r9
 802412a:	681b      	ldr	r3, [r3, #0]
 802412c:	18d6      	adds	r6, r2, r3
 802412e:	1ad3      	subs	r3, r2, r3
 8024130:	9301      	str	r3, [sp, #4]
 8024132:	684b      	ldr	r3, [r1, #4]
 8024134:	18f8      	adds	r0, r7, r3
 8024136:	1af9      	subs	r1, r7, r3
 8024138:	6827      	ldr	r7, [r4, #0]
 802413a:	9102      	str	r1, [sp, #8]
 802413c:	003a      	movs	r2, r7
 802413e:	682f      	ldr	r7, [r5, #0]
 8024140:	46bc      	mov	ip, r7
 8024142:	465f      	mov	r7, fp
 8024144:	4462      	add	r2, ip
 8024146:	18b3      	adds	r3, r6, r2
 8024148:	109b      	asrs	r3, r3, #2
 802414a:	603b      	str	r3, [r7, #0]
 802414c:	6867      	ldr	r7, [r4, #4]
 802414e:	1ab6      	subs	r6, r6, r2
 8024150:	46b8      	mov	r8, r7
 8024152:	686f      	ldr	r7, [r5, #4]
 8024154:	17f2      	asrs	r2, r6, #31
 8024156:	46bc      	mov	ip, r7
 8024158:	44e0      	add	r8, ip
 802415a:	4643      	mov	r3, r8
 802415c:	465f      	mov	r7, fp
 802415e:	18c1      	adds	r1, r0, r3
 8024160:	1089      	asrs	r1, r1, #2
 8024162:	6079      	str	r1, [r7, #4]
 8024164:	9900      	ldr	r1, [sp, #0]
 8024166:	4690      	mov	r8, r2
 8024168:	468c      	mov	ip, r1
 802416a:	6867      	ldr	r7, [r4, #4]
 802416c:	6869      	ldr	r1, [r5, #4]
 802416e:	44e3      	add	fp, ip
 8024170:	1a7f      	subs	r7, r7, r1
 8024172:	9703      	str	r7, [sp, #12]
 8024174:	6829      	ldr	r1, [r5, #0]
 8024176:	6827      	ldr	r7, [r4, #0]
 8024178:	1a7f      	subs	r7, r7, r1
 802417a:	9704      	str	r7, [sp, #16]
 802417c:	1ac7      	subs	r7, r0, r3
 802417e:	17fa      	asrs	r2, r7, #31
 8024180:	4692      	mov	sl, r2
 8024182:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8024184:	9a07      	ldr	r2, [sp, #28]
 8024186:	0030      	movs	r0, r6
 8024188:	4641      	mov	r1, r8
 802418a:	f7dc fa19 	bl	80005c0 <__aeabi_lmul>
 802418e:	9a08      	ldr	r2, [sp, #32]
 8024190:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8024192:	9112      	str	r1, [sp, #72]	@ 0x48
 8024194:	0038      	movs	r0, r7
 8024196:	4651      	mov	r1, sl
 8024198:	f7dc fa12 	bl	80005c0 <__aeabi_lmul>
 802419c:	9812      	ldr	r0, [sp, #72]	@ 0x48
 802419e:	9a07      	ldr	r2, [sp, #28]
 80241a0:	4684      	mov	ip, r0
 80241a2:	4461      	add	r1, ip
 80241a4:	1049      	asrs	r1, r1, #1
 80241a6:	6021      	str	r1, [r4, #0]
 80241a8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80241aa:	0038      	movs	r0, r7
 80241ac:	4651      	mov	r1, sl
 80241ae:	f7dc fa07 	bl	80005c0 <__aeabi_lmul>
 80241b2:	9a08      	ldr	r2, [sp, #32]
 80241b4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80241b6:	000f      	movs	r7, r1
 80241b8:	0030      	movs	r0, r6
 80241ba:	4641      	mov	r1, r8
 80241bc:	f7dc fa00 	bl	80005c0 <__aeabi_lmul>
 80241c0:	9b00      	ldr	r3, [sp, #0]
 80241c2:	9a01      	ldr	r2, [sp, #4]
 80241c4:	469c      	mov	ip, r3
 80241c6:	9803      	ldr	r0, [sp, #12]
 80241c8:	1a7f      	subs	r7, r7, r1
 80241ca:	107f      	asrs	r7, r7, #1
 80241cc:	6067      	str	r7, [r4, #4]
 80241ce:	0016      	movs	r6, r2
 80241d0:	4464      	add	r4, ip
 80241d2:	4684      	mov	ip, r0
 80241d4:	4466      	add	r6, ip
 80241d6:	17f2      	asrs	r2, r6, #31
 80241d8:	4690      	mov	r8, r2
 80241da:	9902      	ldr	r1, [sp, #8]
 80241dc:	9f04      	ldr	r7, [sp, #16]
 80241de:	0030      	movs	r0, r6
 80241e0:	1bcf      	subs	r7, r1, r7
 80241e2:	17fa      	asrs	r2, r7, #31
 80241e4:	4692      	mov	sl, r2
 80241e6:	4641      	mov	r1, r8
 80241e8:	9a05      	ldr	r2, [sp, #20]
 80241ea:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80241ec:	f7dc f9e8 	bl	80005c0 <__aeabi_lmul>
 80241f0:	9a06      	ldr	r2, [sp, #24]
 80241f2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80241f4:	9112      	str	r1, [sp, #72]	@ 0x48
 80241f6:	0038      	movs	r0, r7
 80241f8:	4651      	mov	r1, sl
 80241fa:	f7dc f9e1 	bl	80005c0 <__aeabi_lmul>
 80241fe:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8024200:	9a05      	ldr	r2, [sp, #20]
 8024202:	4684      	mov	ip, r0
 8024204:	4648      	mov	r0, r9
 8024206:	4461      	add	r1, ip
 8024208:	1049      	asrs	r1, r1, #1
 802420a:	6001      	str	r1, [r0, #0]
 802420c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 802420e:	0038      	movs	r0, r7
 8024210:	4651      	mov	r1, sl
 8024212:	f7dc f9d5 	bl	80005c0 <__aeabi_lmul>
 8024216:	9a06      	ldr	r2, [sp, #24]
 8024218:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 802421a:	000f      	movs	r7, r1
 802421c:	0030      	movs	r0, r6
 802421e:	4641      	mov	r1, r8
 8024220:	f7dc f9ce 	bl	80005c0 <__aeabi_lmul>
 8024224:	464e      	mov	r6, r9
 8024226:	9a00      	ldr	r2, [sp, #0]
 8024228:	9b01      	ldr	r3, [sp, #4]
 802422a:	4694      	mov	ip, r2
 802422c:	9803      	ldr	r0, [sp, #12]
 802422e:	1a7f      	subs	r7, r7, r1
 8024230:	107f      	asrs	r7, r7, #1
 8024232:	6077      	str	r7, [r6, #4]
 8024234:	1a1e      	subs	r6, r3, r0
 8024236:	9b04      	ldr	r3, [sp, #16]
 8024238:	44e1      	add	r9, ip
 802423a:	469c      	mov	ip, r3
 802423c:	17f0      	asrs	r0, r6, #31
 802423e:	4680      	mov	r8, r0
 8024240:	9902      	ldr	r1, [sp, #8]
 8024242:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8024244:	4461      	add	r1, ip
 8024246:	17cb      	asrs	r3, r1, #31
 8024248:	000f      	movs	r7, r1
 802424a:	469a      	mov	sl, r3
 802424c:	0030      	movs	r0, r6
 802424e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8024250:	4641      	mov	r1, r8
 8024252:	f7dc f9b5 	bl	80005c0 <__aeabi_lmul>
 8024256:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8024258:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 802425a:	9101      	str	r1, [sp, #4]
 802425c:	0038      	movs	r0, r7
 802425e:	4651      	mov	r1, sl
 8024260:	f7dc f9ae 	bl	80005c0 <__aeabi_lmul>
 8024264:	9801      	ldr	r0, [sp, #4]
 8024266:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8024268:	4684      	mov	ip, r0
 802426a:	4461      	add	r1, ip
 802426c:	1049      	asrs	r1, r1, #1
 802426e:	6029      	str	r1, [r5, #0]
 8024270:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8024272:	0038      	movs	r0, r7
 8024274:	4651      	mov	r1, sl
 8024276:	f7dc f9a3 	bl	80005c0 <__aeabi_lmul>
 802427a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 802427c:	000f      	movs	r7, r1
 802427e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8024280:	0030      	movs	r0, r6
 8024282:	4641      	mov	r1, r8
 8024284:	f7dc f99c 	bl	80005c0 <__aeabi_lmul>
 8024288:	1a7f      	subs	r7, r7, r1
 802428a:	107f      	asrs	r7, r7, #1
 802428c:	606f      	str	r7, [r5, #4]
 802428e:	9a00      	ldr	r2, [sp, #0]
 8024290:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8024292:	4694      	mov	ip, r2
 8024294:	4465      	add	r5, ip
 8024296:	468c      	mov	ip, r1
 8024298:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 802429a:	0013      	movs	r3, r2
 802429c:	4462      	add	r2, ip
 802429e:	920b      	str	r2, [sp, #44]	@ 0x2c
 80242a0:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80242a2:	429a      	cmp	r2, r3
 80242a4:	d900      	bls.n	80242a8 <arm_radix4_butterfly_q31+0x478>
 80242a6:	e73a      	b.n	802411e <arm_radix4_butterfly_q31+0x2ee>
 80242a8:	991e      	ldr	r1, [sp, #120]	@ 0x78
 80242aa:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 80242ac:	468c      	mov	ip, r1
 80242ae:	991d      	ldr	r1, [sp, #116]	@ 0x74
 80242b0:	4462      	add	r2, ip
 80242b2:	468c      	mov	ip, r1
 80242b4:	9216      	str	r2, [sp, #88]	@ 0x58
 80242b6:	991c      	ldr	r1, [sp, #112]	@ 0x70
 80242b8:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80242ba:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80242bc:	4462      	add	r2, ip
 80242be:	468c      	mov	ip, r1
 80242c0:	9219      	str	r2, [sp, #100]	@ 0x64
 80242c2:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 80242c4:	3301      	adds	r3, #1
 80242c6:	4462      	add	r2, ip
 80242c8:	9218      	str	r2, [sp, #96]	@ 0x60
 80242ca:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 80242cc:	9315      	str	r3, [sp, #84]	@ 0x54
 80242ce:	3208      	adds	r2, #8
 80242d0:	9217      	str	r2, [sp, #92]	@ 0x5c
 80242d2:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80242d4:	4293      	cmp	r3, r2
 80242d6:	d800      	bhi.n	80242da <arm_radix4_butterfly_q31+0x4aa>
 80242d8:	e6e8      	b.n	80240ac <arm_radix4_butterfly_q31+0x27c>
 80242da:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 80242dc:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 80242de:	009b      	lsls	r3, r3, #2
 80242e0:	931f      	str	r3, [sp, #124]	@ 0x7c
 80242e2:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80242e4:	9213      	str	r2, [sp, #76]	@ 0x4c
 80242e6:	089b      	lsrs	r3, r3, #2
 80242e8:	9320      	str	r3, [sp, #128]	@ 0x80
 80242ea:	2b04      	cmp	r3, #4
 80242ec:	d900      	bls.n	80242f0 <arm_radix4_butterfly_q31+0x4c0>
 80242ee:	e6c1      	b.n	8024074 <arm_radix4_butterfly_q31+0x244>
 80242f0:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80242f2:	469a      	mov	sl, r3
 80242f4:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 80242f6:	691c      	ldr	r4, [r3, #16]
 80242f8:	685a      	ldr	r2, [r3, #4]
 80242fa:	46a1      	mov	r9, r4
 80242fc:	4690      	mov	r8, r2
 80242fe:	6819      	ldr	r1, [r3, #0]
 8024300:	689a      	ldr	r2, [r3, #8]
 8024302:	699f      	ldr	r7, [r3, #24]
 8024304:	188d      	adds	r5, r1, r2
 8024306:	444d      	add	r5, r9
 8024308:	19ed      	adds	r5, r5, r7
 802430a:	69de      	ldr	r6, [r3, #28]
 802430c:	601d      	str	r5, [r3, #0]
 802430e:	4645      	mov	r5, r8
 8024310:	46b4      	mov	ip, r6
 8024312:	68d8      	ldr	r0, [r3, #12]
 8024314:	695c      	ldr	r4, [r3, #20]
 8024316:	182d      	adds	r5, r5, r0
 8024318:	192d      	adds	r5, r5, r4
 802431a:	4465      	add	r5, ip
 802431c:	605d      	str	r5, [r3, #4]
 802431e:	1a8d      	subs	r5, r1, r2
 8024320:	444d      	add	r5, r9
 8024322:	1bed      	subs	r5, r5, r7
 8024324:	609d      	str	r5, [r3, #8]
 8024326:	4645      	mov	r5, r8
 8024328:	1a2d      	subs	r5, r5, r0
 802432a:	192d      	adds	r5, r5, r4
 802432c:	1bad      	subs	r5, r5, r6
 802432e:	464e      	mov	r6, r9
 8024330:	60dd      	str	r5, [r3, #12]
 8024332:	180d      	adds	r5, r1, r0
 8024334:	1bad      	subs	r5, r5, r6
 8024336:	4666      	mov	r6, ip
 8024338:	1bad      	subs	r5, r5, r6
 802433a:	611d      	str	r5, [r3, #16]
 802433c:	4645      	mov	r5, r8
 802433e:	1aad      	subs	r5, r5, r2
 8024340:	4442      	add	r2, r8
 8024342:	1b12      	subs	r2, r2, r4
 8024344:	1bd2      	subs	r2, r2, r7
 8024346:	1a08      	subs	r0, r1, r0
 8024348:	61da      	str	r2, [r3, #28]
 802434a:	4649      	mov	r1, r9
 802434c:	2201      	movs	r2, #1
 802434e:	1a41      	subs	r1, r0, r1
 8024350:	4252      	negs	r2, r2
 8024352:	4461      	add	r1, ip
 8024354:	4694      	mov	ip, r2
 8024356:	44e2      	add	sl, ip
 8024358:	4652      	mov	r2, sl
 802435a:	1b2d      	subs	r5, r5, r4
 802435c:	19ed      	adds	r5, r5, r7
 802435e:	615d      	str	r5, [r3, #20]
 8024360:	6199      	str	r1, [r3, #24]
 8024362:	3320      	adds	r3, #32
 8024364:	2a00      	cmp	r2, #0
 8024366:	d1c6      	bne.n	80242f6 <arm_radix4_butterfly_q31+0x4c6>
 8024368:	b027      	add	sp, #156	@ 0x9c
 802436a:	bc3c      	pop	{r2, r3, r4, r5}
 802436c:	4690      	mov	r8, r2
 802436e:	4699      	mov	r9, r3
 8024370:	46a2      	mov	sl, r4
 8024372:	46ab      	mov	fp, r5
 8024374:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8024376:	469a      	mov	sl, r3
 8024378:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 802437a:	e7bc      	b.n	80242f6 <arm_radix4_butterfly_q31+0x4c6>

0802437c <arm_radix4_butterfly_inverse_q31>:
 802437c:	b5f0      	push	{r4, r5, r6, r7, lr}
 802437e:	464d      	mov	r5, r9
 8024380:	4644      	mov	r4, r8
 8024382:	465f      	mov	r7, fp
 8024384:	4656      	mov	r6, sl
 8024386:	b4f0      	push	{r4, r5, r6, r7}
 8024388:	b0a7      	sub	sp, #156	@ 0x9c
 802438a:	469c      	mov	ip, r3
 802438c:	9114      	str	r1, [sp, #80]	@ 0x50
 802438e:	0889      	lsrs	r1, r1, #2
 8024390:	9310      	str	r3, [sp, #64]	@ 0x40
 8024392:	00cb      	lsls	r3, r1, #3
 8024394:	0015      	movs	r5, r2
 8024396:	9223      	str	r2, [sp, #140]	@ 0x8c
 8024398:	18c2      	adds	r2, r0, r3
 802439a:	000c      	movs	r4, r1
 802439c:	9124      	str	r1, [sp, #144]	@ 0x90
 802439e:	18d1      	adds	r1, r2, r3
 80243a0:	468b      	mov	fp, r1
 80243a2:	469a      	mov	sl, r3
 80243a4:	4663      	mov	r3, ip
 80243a6:	44da      	add	sl, fp
 80243a8:	46d0      	mov	r8, sl
 80243aa:	4681      	mov	r9, r0
 80243ac:	4692      	mov	sl, r2
 80243ae:	0119      	lsls	r1, r3, #4
 80243b0:	910d      	str	r1, [sp, #52]	@ 0x34
 80243b2:	00d9      	lsls	r1, r3, #3
 80243b4:	005b      	lsls	r3, r3, #1
 80243b6:	4463      	add	r3, ip
 80243b8:	910e      	str	r1, [sp, #56]	@ 0x38
 80243ba:	00d9      	lsls	r1, r3, #3
 80243bc:	9022      	str	r0, [sp, #136]	@ 0x88
 80243be:	9025      	str	r0, [sp, #148]	@ 0x94
 80243c0:	910f      	str	r1, [sp, #60]	@ 0x3c
 80243c2:	9502      	str	r5, [sp, #8]
 80243c4:	9500      	str	r5, [sp, #0]
 80243c6:	9501      	str	r5, [sp, #4]
 80243c8:	9409      	str	r4, [sp, #36]	@ 0x24
 80243ca:	464b      	mov	r3, r9
 80243cc:	681b      	ldr	r3, [r3, #0]
 80243ce:	4652      	mov	r2, sl
 80243d0:	111c      	asrs	r4, r3, #4
 80243d2:	465b      	mov	r3, fp
 80243d4:	4648      	mov	r0, r9
 80243d6:	681b      	ldr	r3, [r3, #0]
 80243d8:	6812      	ldr	r2, [r2, #0]
 80243da:	6840      	ldr	r0, [r0, #4]
 80243dc:	111b      	asrs	r3, r3, #4
 80243de:	18e7      	adds	r7, r4, r3
 80243e0:	1ae3      	subs	r3, r4, r3
 80243e2:	1114      	asrs	r4, r2, #4
 80243e4:	4642      	mov	r2, r8
 80243e6:	1105      	asrs	r5, r0, #4
 80243e8:	4658      	mov	r0, fp
 80243ea:	6812      	ldr	r2, [r2, #0]
 80243ec:	6840      	ldr	r0, [r0, #4]
 80243ee:	9303      	str	r3, [sp, #12]
 80243f0:	1113      	asrs	r3, r2, #4
 80243f2:	18e2      	adds	r2, r4, r3
 80243f4:	1103      	asrs	r3, r0, #4
 80243f6:	18ee      	adds	r6, r5, r3
 80243f8:	1ae8      	subs	r0, r5, r3
 80243fa:	464d      	mov	r5, r9
 80243fc:	18bb      	adds	r3, r7, r2
 80243fe:	602b      	str	r3, [r5, #0]
 8024400:	4641      	mov	r1, r8
 8024402:	4655      	mov	r5, sl
 8024404:	6849      	ldr	r1, [r1, #4]
 8024406:	686d      	ldr	r5, [r5, #4]
 8024408:	110b      	asrs	r3, r1, #4
 802440a:	112d      	asrs	r5, r5, #4
 802440c:	18eb      	adds	r3, r5, r3
 802440e:	464d      	mov	r5, r9
 8024410:	18f1      	adds	r1, r6, r3
 8024412:	6069      	str	r1, [r5, #4]
 8024414:	4655      	mov	r5, sl
 8024416:	686d      	ldr	r5, [r5, #4]
 8024418:	9004      	str	r0, [sp, #16]
 802441a:	112c      	asrs	r4, r5, #4
 802441c:	4645      	mov	r5, r8
 802441e:	686d      	ldr	r5, [r5, #4]
 8024420:	1129      	asrs	r1, r5, #4
 8024422:	1a65      	subs	r5, r4, r1
 8024424:	4651      	mov	r1, sl
 8024426:	6809      	ldr	r1, [r1, #0]
 8024428:	1abc      	subs	r4, r7, r2
 802442a:	1108      	asrs	r0, r1, #4
 802442c:	4641      	mov	r1, r8
 802442e:	17e2      	asrs	r2, r4, #31
 8024430:	6809      	ldr	r1, [r1, #0]
 8024432:	9207      	str	r2, [sp, #28]
 8024434:	9a01      	ldr	r2, [sp, #4]
 8024436:	1109      	asrs	r1, r1, #4
 8024438:	6817      	ldr	r7, [r2, #0]
 802443a:	1a41      	subs	r1, r0, r1
 802443c:	9106      	str	r1, [sp, #24]
 802443e:	0039      	movs	r1, r7
 8024440:	17ff      	asrs	r7, r7, #31
 8024442:	0038      	movs	r0, r7
 8024444:	9505      	str	r5, [sp, #20]
 8024446:	1af5      	subs	r5, r6, r3
 8024448:	17ef      	asrs	r7, r5, #31
 802444a:	970b      	str	r7, [sp, #44]	@ 0x2c
 802444c:	6857      	ldr	r7, [r2, #4]
 802444e:	0003      	movs	r3, r0
 8024450:	17fe      	asrs	r6, r7, #31
 8024452:	000a      	movs	r2, r1
 8024454:	9108      	str	r1, [sp, #32]
 8024456:	900a      	str	r0, [sp, #40]	@ 0x28
 8024458:	17e1      	asrs	r1, r4, #31
 802445a:	0020      	movs	r0, r4
 802445c:	960c      	str	r6, [sp, #48]	@ 0x30
 802445e:	f7dc f8af 	bl	80005c0 <__aeabi_lmul>
 8024462:	003a      	movs	r2, r7
 8024464:	17fb      	asrs	r3, r7, #31
 8024466:	000e      	movs	r6, r1
 8024468:	0028      	movs	r0, r5
 802446a:	17e9      	asrs	r1, r5, #31
 802446c:	f7dc f8a8 	bl	80005c0 <__aeabi_lmul>
 8024470:	4653      	mov	r3, sl
 8024472:	1a76      	subs	r6, r6, r1
 8024474:	0076      	lsls	r6, r6, #1
 8024476:	601e      	str	r6, [r3, #0]
 8024478:	002a      	movs	r2, r5
 802447a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 802447c:	9808      	ldr	r0, [sp, #32]
 802447e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8024480:	f7dc f89e 	bl	80005c0 <__aeabi_lmul>
 8024484:	003a      	movs	r2, r7
 8024486:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8024488:	000d      	movs	r5, r1
 802448a:	0020      	movs	r0, r4
 802448c:	9907      	ldr	r1, [sp, #28]
 802448e:	f7dc f897 	bl	80005c0 <__aeabi_lmul>
 8024492:	4657      	mov	r7, sl
 8024494:	186d      	adds	r5, r5, r1
 8024496:	006d      	lsls	r5, r5, #1
 8024498:	607d      	str	r5, [r7, #4]
 802449a:	9b03      	ldr	r3, [sp, #12]
 802449c:	9e06      	ldr	r6, [sp, #24]
 802449e:	9d05      	ldr	r5, [sp, #20]
 80244a0:	46b4      	mov	ip, r6
 80244a2:	1b5d      	subs	r5, r3, r5
 80244a4:	9b00      	ldr	r3, [sp, #0]
 80244a6:	17ef      	asrs	r7, r5, #31
 80244a8:	0039      	movs	r1, r7
 80244aa:	681f      	ldr	r7, [r3, #0]
 80244ac:	17fc      	asrs	r4, r7, #31
 80244ae:	0020      	movs	r0, r4
 80244b0:	9c04      	ldr	r4, [sp, #16]
 80244b2:	4464      	add	r4, ip
 80244b4:	17e6      	asrs	r6, r4, #31
 80244b6:	9407      	str	r4, [sp, #28]
 80244b8:	9608      	str	r6, [sp, #32]
 80244ba:	685e      	ldr	r6, [r3, #4]
 80244bc:	900b      	str	r0, [sp, #44]	@ 0x2c
 80244be:	17f2      	asrs	r2, r6, #31
 80244c0:	0003      	movs	r3, r0
 80244c2:	920c      	str	r2, [sp, #48]	@ 0x30
 80244c4:	0028      	movs	r0, r5
 80244c6:	003a      	movs	r2, r7
 80244c8:	910a      	str	r1, [sp, #40]	@ 0x28
 80244ca:	f7dc f879 	bl	80005c0 <__aeabi_lmul>
 80244ce:	0032      	movs	r2, r6
 80244d0:	17f3      	asrs	r3, r6, #31
 80244d2:	9807      	ldr	r0, [sp, #28]
 80244d4:	000c      	movs	r4, r1
 80244d6:	9908      	ldr	r1, [sp, #32]
 80244d8:	f7dc f872 	bl	80005c0 <__aeabi_lmul>
 80244dc:	4658      	mov	r0, fp
 80244de:	1a64      	subs	r4, r4, r1
 80244e0:	0064      	lsls	r4, r4, #1
 80244e2:	9a07      	ldr	r2, [sp, #28]
 80244e4:	6004      	str	r4, [r0, #0]
 80244e6:	9b08      	ldr	r3, [sp, #32]
 80244e8:	0038      	movs	r0, r7
 80244ea:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80244ec:	f7dc f868 	bl	80005c0 <__aeabi_lmul>
 80244f0:	0032      	movs	r2, r6
 80244f2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80244f4:	000c      	movs	r4, r1
 80244f6:	0028      	movs	r0, r5
 80244f8:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80244fa:	f7dc f861 	bl	80005c0 <__aeabi_lmul>
 80244fe:	9d05      	ldr	r5, [sp, #20]
 8024500:	465f      	mov	r7, fp
 8024502:	46ac      	mov	ip, r5
 8024504:	1864      	adds	r4, r4, r1
 8024506:	9903      	ldr	r1, [sp, #12]
 8024508:	0064      	lsls	r4, r4, #1
 802450a:	4461      	add	r1, ip
 802450c:	607c      	str	r4, [r7, #4]
 802450e:	000c      	movs	r4, r1
 8024510:	17c9      	asrs	r1, r1, #31
 8024512:	9105      	str	r1, [sp, #20]
 8024514:	9902      	ldr	r1, [sp, #8]
 8024516:	9804      	ldr	r0, [sp, #16]
 8024518:	680d      	ldr	r5, [r1, #0]
 802451a:	9e06      	ldr	r6, [sp, #24]
 802451c:	002b      	movs	r3, r5
 802451e:	17ed      	asrs	r5, r5, #31
 8024520:	684f      	ldr	r7, [r1, #4]
 8024522:	9503      	str	r5, [sp, #12]
 8024524:	1b85      	subs	r5, r0, r6
 8024526:	17e8      	asrs	r0, r5, #31
 8024528:	001a      	movs	r2, r3
 802452a:	9006      	str	r0, [sp, #24]
 802452c:	17fe      	asrs	r6, r7, #31
 802452e:	9304      	str	r3, [sp, #16]
 8024530:	0020      	movs	r0, r4
 8024532:	9b03      	ldr	r3, [sp, #12]
 8024534:	17e1      	asrs	r1, r4, #31
 8024536:	9607      	str	r6, [sp, #28]
 8024538:	f7dc f842 	bl	80005c0 <__aeabi_lmul>
 802453c:	003a      	movs	r2, r7
 802453e:	000e      	movs	r6, r1
 8024540:	17fb      	asrs	r3, r7, #31
 8024542:	0028      	movs	r0, r5
 8024544:	17e9      	asrs	r1, r5, #31
 8024546:	f7dc f83b 	bl	80005c0 <__aeabi_lmul>
 802454a:	4640      	mov	r0, r8
 802454c:	1a76      	subs	r6, r6, r1
 802454e:	0076      	lsls	r6, r6, #1
 8024550:	002a      	movs	r2, r5
 8024552:	9b06      	ldr	r3, [sp, #24]
 8024554:	6006      	str	r6, [r0, #0]
 8024556:	9903      	ldr	r1, [sp, #12]
 8024558:	9804      	ldr	r0, [sp, #16]
 802455a:	f7dc f831 	bl	80005c0 <__aeabi_lmul>
 802455e:	0020      	movs	r0, r4
 8024560:	2408      	movs	r4, #8
 8024562:	9b07      	ldr	r3, [sp, #28]
 8024564:	000d      	movs	r5, r1
 8024566:	003a      	movs	r2, r7
 8024568:	9905      	ldr	r1, [sp, #20]
 802456a:	f7dc f829 	bl	80005c0 <__aeabi_lmul>
 802456e:	4640      	mov	r0, r8
 8024570:	46a4      	mov	ip, r4
 8024572:	186d      	adds	r5, r5, r1
 8024574:	006d      	lsls	r5, r5, #1
 8024576:	6045      	str	r5, [r0, #4]
 8024578:	9809      	ldr	r0, [sp, #36]	@ 0x24
 802457a:	44e1      	add	r9, ip
 802457c:	3801      	subs	r0, #1
 802457e:	9009      	str	r0, [sp, #36]	@ 0x24
 8024580:	9a01      	ldr	r2, [sp, #4]
 8024582:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 8024584:	44e2      	add	sl, ip
 8024586:	44e3      	add	fp, ip
 8024588:	44e0      	add	r8, ip
 802458a:	46a4      	mov	ip, r4
 802458c:	4462      	add	r2, ip
 802458e:	9201      	str	r2, [sp, #4]
 8024590:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8024592:	9b00      	ldr	r3, [sp, #0]
 8024594:	4694      	mov	ip, r2
 8024596:	4463      	add	r3, ip
 8024598:	9300      	str	r3, [sp, #0]
 802459a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 802459c:	9902      	ldr	r1, [sp, #8]
 802459e:	469c      	mov	ip, r3
 80245a0:	4461      	add	r1, ip
 80245a2:	9102      	str	r1, [sp, #8]
 80245a4:	2800      	cmp	r0, #0
 80245a6:	d000      	beq.n	80245aa <arm_radix4_butterfly_inverse_q31+0x22e>
 80245a8:	e70f      	b.n	80243ca <arm_radix4_butterfly_inverse_q31+0x4e>
 80245aa:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80245ac:	009b      	lsls	r3, r3, #2
 80245ae:	931f      	str	r3, [sp, #124]	@ 0x7c
 80245b0:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80245b2:	9320      	str	r3, [sp, #128]	@ 0x80
 80245b4:	9313      	str	r3, [sp, #76]	@ 0x4c
 80245b6:	2b04      	cmp	r3, #4
 80245b8:	d800      	bhi.n	80245bc <arm_radix4_butterfly_inverse_q31+0x240>
 80245ba:	e17c      	b.n	80248b6 <arm_radix4_butterfly_inverse_q31+0x53a>
 80245bc:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80245be:	0893      	lsrs	r3, r2, #2
 80245c0:	1e59      	subs	r1, r3, #1
 80245c2:	9321      	str	r3, [sp, #132]	@ 0x84
 80245c4:	00db      	lsls	r3, r3, #3
 80245c6:	931b      	str	r3, [sp, #108]	@ 0x6c
 80245c8:	00d3      	lsls	r3, r2, #3
 80245ca:	9300      	str	r3, [sp, #0]
 80245cc:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 80245ce:	911a      	str	r1, [sp, #104]	@ 0x68
 80245d0:	00da      	lsls	r2, r3, #3
 80245d2:	921e      	str	r2, [sp, #120]	@ 0x78
 80245d4:	011a      	lsls	r2, r3, #4
 80245d6:	921d      	str	r2, [sp, #116]	@ 0x74
 80245d8:	001a      	movs	r2, r3
 80245da:	4694      	mov	ip, r2
 80245dc:	005b      	lsls	r3, r3, #1
 80245de:	4463      	add	r3, ip
 80245e0:	00db      	lsls	r3, r3, #3
 80245e2:	931c      	str	r3, [sp, #112]	@ 0x70
 80245e4:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 80245e6:	9317      	str	r3, [sp, #92]	@ 0x5c
 80245e8:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80245ea:	9318      	str	r3, [sp, #96]	@ 0x60
 80245ec:	9319      	str	r3, [sp, #100]	@ 0x64
 80245ee:	9316      	str	r3, [sp, #88]	@ 0x58
 80245f0:	2300      	movs	r3, #0
 80245f2:	9315      	str	r3, [sp, #84]	@ 0x54
 80245f4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80245f6:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 80245f8:	681a      	ldr	r2, [r3, #0]
 80245fa:	685b      	ldr	r3, [r3, #4]
 80245fc:	9205      	str	r2, [sp, #20]
 80245fe:	9306      	str	r3, [sp, #24]
 8024600:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8024602:	468c      	mov	ip, r1
 8024604:	681a      	ldr	r2, [r3, #0]
 8024606:	685b      	ldr	r3, [r3, #4]
 8024608:	9207      	str	r2, [sp, #28]
 802460a:	9308      	str	r3, [sp, #32]
 802460c:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 802460e:	681a      	ldr	r2, [r3, #0]
 8024610:	685b      	ldr	r3, [r3, #4]
 8024612:	9209      	str	r2, [sp, #36]	@ 0x24
 8024614:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8024616:	930a      	str	r3, [sp, #40]	@ 0x28
 8024618:	0013      	movs	r3, r2
 802461a:	4463      	add	r3, ip
 802461c:	4698      	mov	r8, r3
 802461e:	0013      	movs	r3, r2
 8024620:	4442      	add	r2, r8
 8024622:	4691      	mov	r9, r2
 8024624:	001a      	movs	r2, r3
 8024626:	444a      	add	r2, r9
 8024628:	4692      	mov	sl, r2
 802462a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 802462c:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 802462e:	4293      	cmp	r3, r2
 8024630:	d800      	bhi.n	8024634 <arm_radix4_butterfly_inverse_q31+0x2b8>
 8024632:	e0d9      	b.n	80247e8 <arm_radix4_butterfly_inverse_q31+0x46c>
 8024634:	4694      	mov	ip, r2
 8024636:	4644      	mov	r4, r8
 8024638:	4655      	mov	r5, sl
 802463a:	4688      	mov	r8, r1
 802463c:	9b07      	ldr	r3, [sp, #28]
 802463e:	17db      	asrs	r3, r3, #31
 8024640:	930c      	str	r3, [sp, #48]	@ 0x30
 8024642:	9b08      	ldr	r3, [sp, #32]
 8024644:	17db      	asrs	r3, r3, #31
 8024646:	930d      	str	r3, [sp, #52]	@ 0x34
 8024648:	9b05      	ldr	r3, [sp, #20]
 802464a:	17db      	asrs	r3, r3, #31
 802464c:	930e      	str	r3, [sp, #56]	@ 0x38
 802464e:	9b06      	ldr	r3, [sp, #24]
 8024650:	17db      	asrs	r3, r3, #31
 8024652:	930f      	str	r3, [sp, #60]	@ 0x3c
 8024654:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8024656:	17db      	asrs	r3, r3, #31
 8024658:	9310      	str	r3, [sp, #64]	@ 0x40
 802465a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802465c:	17db      	asrs	r3, r3, #31
 802465e:	9311      	str	r3, [sp, #68]	@ 0x44
 8024660:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8024662:	4463      	add	r3, ip
 8024664:	930b      	str	r3, [sp, #44]	@ 0x2c
 8024666:	4643      	mov	r3, r8
 8024668:	4641      	mov	r1, r8
 802466a:	681a      	ldr	r2, [r3, #0]
 802466c:	464b      	mov	r3, r9
 802466e:	684f      	ldr	r7, [r1, #4]
 8024670:	4649      	mov	r1, r9
 8024672:	681b      	ldr	r3, [r3, #0]
 8024674:	18d6      	adds	r6, r2, r3
 8024676:	1ad3      	subs	r3, r2, r3
 8024678:	9301      	str	r3, [sp, #4]
 802467a:	684b      	ldr	r3, [r1, #4]
 802467c:	1af9      	subs	r1, r7, r3
 802467e:	9102      	str	r1, [sp, #8]
 8024680:	6829      	ldr	r1, [r5, #0]
 8024682:	18f8      	adds	r0, r7, r3
 8024684:	468c      	mov	ip, r1
 8024686:	6827      	ldr	r7, [r4, #0]
 8024688:	4467      	add	r7, ip
 802468a:	003a      	movs	r2, r7
 802468c:	19f3      	adds	r3, r6, r7
 802468e:	4647      	mov	r7, r8
 8024690:	109b      	asrs	r3, r3, #2
 8024692:	603b      	str	r3, [r7, #0]
 8024694:	6869      	ldr	r1, [r5, #4]
 8024696:	6867      	ldr	r7, [r4, #4]
 8024698:	468c      	mov	ip, r1
 802469a:	4467      	add	r7, ip
 802469c:	003b      	movs	r3, r7
 802469e:	19c1      	adds	r1, r0, r7
 80246a0:	4647      	mov	r7, r8
 80246a2:	1ab6      	subs	r6, r6, r2
 80246a4:	1089      	asrs	r1, r1, #2
 80246a6:	6079      	str	r1, [r7, #4]
 80246a8:	17f2      	asrs	r2, r6, #31
 80246aa:	9900      	ldr	r1, [sp, #0]
 80246ac:	4692      	mov	sl, r2
 80246ae:	468c      	mov	ip, r1
 80246b0:	6867      	ldr	r7, [r4, #4]
 80246b2:	6869      	ldr	r1, [r5, #4]
 80246b4:	44e0      	add	r8, ip
 80246b6:	1a7f      	subs	r7, r7, r1
 80246b8:	9703      	str	r7, [sp, #12]
 80246ba:	6821      	ldr	r1, [r4, #0]
 80246bc:	682f      	ldr	r7, [r5, #0]
 80246be:	1bc9      	subs	r1, r1, r7
 80246c0:	1ac7      	subs	r7, r0, r3
 80246c2:	17fa      	asrs	r2, r7, #31
 80246c4:	4693      	mov	fp, r2
 80246c6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80246c8:	9a07      	ldr	r2, [sp, #28]
 80246ca:	9104      	str	r1, [sp, #16]
 80246cc:	0030      	movs	r0, r6
 80246ce:	4651      	mov	r1, sl
 80246d0:	f7db ff76 	bl	80005c0 <__aeabi_lmul>
 80246d4:	9a08      	ldr	r2, [sp, #32]
 80246d6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80246d8:	9112      	str	r1, [sp, #72]	@ 0x48
 80246da:	0038      	movs	r0, r7
 80246dc:	4659      	mov	r1, fp
 80246de:	f7db ff6f 	bl	80005c0 <__aeabi_lmul>
 80246e2:	9812      	ldr	r0, [sp, #72]	@ 0x48
 80246e4:	9a07      	ldr	r2, [sp, #28]
 80246e6:	1a41      	subs	r1, r0, r1
 80246e8:	1049      	asrs	r1, r1, #1
 80246ea:	6021      	str	r1, [r4, #0]
 80246ec:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80246ee:	0038      	movs	r0, r7
 80246f0:	4659      	mov	r1, fp
 80246f2:	f7db ff65 	bl	80005c0 <__aeabi_lmul>
 80246f6:	9a08      	ldr	r2, [sp, #32]
 80246f8:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80246fa:	000f      	movs	r7, r1
 80246fc:	0030      	movs	r0, r6
 80246fe:	4651      	mov	r1, sl
 8024700:	f7db ff5e 	bl	80005c0 <__aeabi_lmul>
 8024704:	9b00      	ldr	r3, [sp, #0]
 8024706:	187f      	adds	r7, r7, r1
 8024708:	469c      	mov	ip, r3
 802470a:	107f      	asrs	r7, r7, #1
 802470c:	6067      	str	r7, [r4, #4]
 802470e:	9a01      	ldr	r2, [sp, #4]
 8024710:	9f03      	ldr	r7, [sp, #12]
 8024712:	9802      	ldr	r0, [sp, #8]
 8024714:	1bd7      	subs	r7, r2, r7
 8024716:	17fe      	asrs	r6, r7, #31
 8024718:	0031      	movs	r1, r6
 802471a:	9e04      	ldr	r6, [sp, #16]
 802471c:	4682      	mov	sl, r0
 802471e:	4464      	add	r4, ip
 8024720:	46b4      	mov	ip, r6
 8024722:	44e2      	add	sl, ip
 8024724:	4652      	mov	r2, sl
 8024726:	17d2      	asrs	r2, r2, #31
 8024728:	4693      	mov	fp, r2
 802472a:	0038      	movs	r0, r7
 802472c:	9a05      	ldr	r2, [sp, #20]
 802472e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8024730:	9112      	str	r1, [sp, #72]	@ 0x48
 8024732:	f7db ff45 	bl	80005c0 <__aeabi_lmul>
 8024736:	9a06      	ldr	r2, [sp, #24]
 8024738:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 802473a:	000e      	movs	r6, r1
 802473c:	4650      	mov	r0, sl
 802473e:	4659      	mov	r1, fp
 8024740:	f7db ff3e 	bl	80005c0 <__aeabi_lmul>
 8024744:	4648      	mov	r0, r9
 8024746:	1a76      	subs	r6, r6, r1
 8024748:	1076      	asrs	r6, r6, #1
 802474a:	6006      	str	r6, [r0, #0]
 802474c:	9a05      	ldr	r2, [sp, #20]
 802474e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8024750:	4650      	mov	r0, sl
 8024752:	4659      	mov	r1, fp
 8024754:	f7db ff34 	bl	80005c0 <__aeabi_lmul>
 8024758:	9a06      	ldr	r2, [sp, #24]
 802475a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 802475c:	000e      	movs	r6, r1
 802475e:	0038      	movs	r0, r7
 8024760:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8024762:	f7db ff2d 	bl	80005c0 <__aeabi_lmul>
 8024766:	9a00      	ldr	r2, [sp, #0]
 8024768:	9f03      	ldr	r7, [sp, #12]
 802476a:	4694      	mov	ip, r2
 802476c:	1876      	adds	r6, r6, r1
 802476e:	4649      	mov	r1, r9
 8024770:	44e1      	add	r9, ip
 8024772:	46bc      	mov	ip, r7
 8024774:	9b01      	ldr	r3, [sp, #4]
 8024776:	1076      	asrs	r6, r6, #1
 8024778:	4463      	add	r3, ip
 802477a:	17df      	asrs	r7, r3, #31
 802477c:	604e      	str	r6, [r1, #4]
 802477e:	46ba      	mov	sl, r7
 8024780:	001e      	movs	r6, r3
 8024782:	9802      	ldr	r0, [sp, #8]
 8024784:	9b04      	ldr	r3, [sp, #16]
 8024786:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8024788:	1ac7      	subs	r7, r0, r3
 802478a:	17fb      	asrs	r3, r7, #31
 802478c:	469b      	mov	fp, r3
 802478e:	0030      	movs	r0, r6
 8024790:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8024792:	4651      	mov	r1, sl
 8024794:	f7db ff14 	bl	80005c0 <__aeabi_lmul>
 8024798:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 802479a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 802479c:	9101      	str	r1, [sp, #4]
 802479e:	0038      	movs	r0, r7
 80247a0:	4659      	mov	r1, fp
 80247a2:	f7db ff0d 	bl	80005c0 <__aeabi_lmul>
 80247a6:	9801      	ldr	r0, [sp, #4]
 80247a8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80247aa:	1a41      	subs	r1, r0, r1
 80247ac:	1049      	asrs	r1, r1, #1
 80247ae:	6029      	str	r1, [r5, #0]
 80247b0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80247b2:	0038      	movs	r0, r7
 80247b4:	4659      	mov	r1, fp
 80247b6:	f7db ff03 	bl	80005c0 <__aeabi_lmul>
 80247ba:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80247bc:	000f      	movs	r7, r1
 80247be:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80247c0:	0030      	movs	r0, r6
 80247c2:	4651      	mov	r1, sl
 80247c4:	f7db fefc 	bl	80005c0 <__aeabi_lmul>
 80247c8:	187f      	adds	r7, r7, r1
 80247ca:	107f      	asrs	r7, r7, #1
 80247cc:	606f      	str	r7, [r5, #4]
 80247ce:	9a00      	ldr	r2, [sp, #0]
 80247d0:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 80247d2:	4694      	mov	ip, r2
 80247d4:	4465      	add	r5, ip
 80247d6:	468c      	mov	ip, r1
 80247d8:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80247da:	0013      	movs	r3, r2
 80247dc:	4462      	add	r2, ip
 80247de:	920b      	str	r2, [sp, #44]	@ 0x2c
 80247e0:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80247e2:	429a      	cmp	r2, r3
 80247e4:	d900      	bls.n	80247e8 <arm_radix4_butterfly_inverse_q31+0x46c>
 80247e6:	e73e      	b.n	8024666 <arm_radix4_butterfly_inverse_q31+0x2ea>
 80247e8:	991e      	ldr	r1, [sp, #120]	@ 0x78
 80247ea:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 80247ec:	468c      	mov	ip, r1
 80247ee:	991d      	ldr	r1, [sp, #116]	@ 0x74
 80247f0:	4462      	add	r2, ip
 80247f2:	468c      	mov	ip, r1
 80247f4:	9216      	str	r2, [sp, #88]	@ 0x58
 80247f6:	991c      	ldr	r1, [sp, #112]	@ 0x70
 80247f8:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80247fa:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80247fc:	4462      	add	r2, ip
 80247fe:	468c      	mov	ip, r1
 8024800:	9219      	str	r2, [sp, #100]	@ 0x64
 8024802:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 8024804:	3301      	adds	r3, #1
 8024806:	4462      	add	r2, ip
 8024808:	9218      	str	r2, [sp, #96]	@ 0x60
 802480a:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 802480c:	9315      	str	r3, [sp, #84]	@ 0x54
 802480e:	3208      	adds	r2, #8
 8024810:	9217      	str	r2, [sp, #92]	@ 0x5c
 8024812:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8024814:	4293      	cmp	r3, r2
 8024816:	d800      	bhi.n	802481a <arm_radix4_butterfly_inverse_q31+0x49e>
 8024818:	e6ec      	b.n	80245f4 <arm_radix4_butterfly_inverse_q31+0x278>
 802481a:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 802481c:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 802481e:	009b      	lsls	r3, r3, #2
 8024820:	931f      	str	r3, [sp, #124]	@ 0x7c
 8024822:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8024824:	9213      	str	r2, [sp, #76]	@ 0x4c
 8024826:	089b      	lsrs	r3, r3, #2
 8024828:	9320      	str	r3, [sp, #128]	@ 0x80
 802482a:	2b04      	cmp	r3, #4
 802482c:	d900      	bls.n	8024830 <arm_radix4_butterfly_inverse_q31+0x4b4>
 802482e:	e6c5      	b.n	80245bc <arm_radix4_butterfly_inverse_q31+0x240>
 8024830:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8024832:	469a      	mov	sl, r3
 8024834:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 8024836:	681a      	ldr	r2, [r3, #0]
 8024838:	6918      	ldr	r0, [r3, #16]
 802483a:	4691      	mov	r9, r2
 802483c:	464c      	mov	r4, r9
 802483e:	4680      	mov	r8, r0
 8024840:	69de      	ldr	r6, [r3, #28]
 8024842:	689d      	ldr	r5, [r3, #8]
 8024844:	46b4      	mov	ip, r6
 8024846:	6998      	ldr	r0, [r3, #24]
 8024848:	1964      	adds	r4, r4, r5
 802484a:	6859      	ldr	r1, [r3, #4]
 802484c:	68da      	ldr	r2, [r3, #12]
 802484e:	4444      	add	r4, r8
 8024850:	695f      	ldr	r7, [r3, #20]
 8024852:	1824      	adds	r4, r4, r0
 8024854:	601c      	str	r4, [r3, #0]
 8024856:	188c      	adds	r4, r1, r2
 8024858:	19e4      	adds	r4, r4, r7
 802485a:	4464      	add	r4, ip
 802485c:	605c      	str	r4, [r3, #4]
 802485e:	464c      	mov	r4, r9
 8024860:	1b64      	subs	r4, r4, r5
 8024862:	4444      	add	r4, r8
 8024864:	1a24      	subs	r4, r4, r0
 8024866:	609c      	str	r4, [r3, #8]
 8024868:	1a8c      	subs	r4, r1, r2
 802486a:	19e4      	adds	r4, r4, r7
 802486c:	1ba4      	subs	r4, r4, r6
 802486e:	60dc      	str	r4, [r3, #12]
 8024870:	464c      	mov	r4, r9
 8024872:	4646      	mov	r6, r8
 8024874:	1aa4      	subs	r4, r4, r2
 8024876:	1ba4      	subs	r4, r4, r6
 8024878:	4464      	add	r4, ip
 802487a:	611c      	str	r4, [r3, #16]
 802487c:	194c      	adds	r4, r1, r5
 802487e:	1be4      	subs	r4, r4, r7
 8024880:	1a24      	subs	r4, r4, r0
 8024882:	615c      	str	r4, [r3, #20]
 8024884:	4644      	mov	r4, r8
 8024886:	4666      	mov	r6, ip
 8024888:	444a      	add	r2, r9
 802488a:	1b12      	subs	r2, r2, r4
 802488c:	1b92      	subs	r2, r2, r6
 802488e:	619a      	str	r2, [r3, #24]
 8024890:	1b4a      	subs	r2, r1, r5
 8024892:	1bd1      	subs	r1, r2, r7
 8024894:	2201      	movs	r2, #1
 8024896:	4252      	negs	r2, r2
 8024898:	4694      	mov	ip, r2
 802489a:	44e2      	add	sl, ip
 802489c:	4652      	mov	r2, sl
 802489e:	1809      	adds	r1, r1, r0
 80248a0:	61d9      	str	r1, [r3, #28]
 80248a2:	3320      	adds	r3, #32
 80248a4:	2a00      	cmp	r2, #0
 80248a6:	d1c6      	bne.n	8024836 <arm_radix4_butterfly_inverse_q31+0x4ba>
 80248a8:	b027      	add	sp, #156	@ 0x9c
 80248aa:	bc3c      	pop	{r2, r3, r4, r5}
 80248ac:	4690      	mov	r8, r2
 80248ae:	4699      	mov	r9, r3
 80248b0:	46a2      	mov	sl, r4
 80248b2:	46ab      	mov	fp, r5
 80248b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80248b6:	469a      	mov	sl, r3
 80248b8:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 80248ba:	e7bc      	b.n	8024836 <arm_radix4_butterfly_inverse_q31+0x4ba>

080248bc <arm_cmplx_mag_squared_q31>:
 80248bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80248be:	464f      	mov	r7, r9
 80248c0:	4646      	mov	r6, r8
 80248c2:	0004      	movs	r4, r0
 80248c4:	b4c0      	push	{r6, r7}
 80248c6:	0016      	movs	r6, r2
 80248c8:	000f      	movs	r7, r1
 80248ca:	2a00      	cmp	r2, #0
 80248cc:	d018      	beq.n	8024900 <arm_cmplx_mag_squared_q31+0x44>
 80248ce:	6823      	ldr	r3, [r4, #0]
 80248d0:	6822      	ldr	r2, [r4, #0]
 80248d2:	17d9      	asrs	r1, r3, #31
 80248d4:	6863      	ldr	r3, [r4, #4]
 80248d6:	0010      	movs	r0, r2
 80248d8:	4698      	mov	r8, r3
 80248da:	17db      	asrs	r3, r3, #31
 80248dc:	4699      	mov	r9, r3
 80248de:	000b      	movs	r3, r1
 80248e0:	f7db fe6e 	bl	80005c0 <__aeabi_lmul>
 80248e4:	4642      	mov	r2, r8
 80248e6:	104d      	asrs	r5, r1, #1
 80248e8:	464b      	mov	r3, r9
 80248ea:	4640      	mov	r0, r8
 80248ec:	4649      	mov	r1, r9
 80248ee:	f7db fe67 	bl	80005c0 <__aeabi_lmul>
 80248f2:	1049      	asrs	r1, r1, #1
 80248f4:	1869      	adds	r1, r5, r1
 80248f6:	3e01      	subs	r6, #1
 80248f8:	c702      	stmia	r7!, {r1}
 80248fa:	3408      	adds	r4, #8
 80248fc:	2e00      	cmp	r6, #0
 80248fe:	d1e6      	bne.n	80248ce <arm_cmplx_mag_squared_q31+0x12>
 8024900:	bc0c      	pop	{r2, r3}
 8024902:	4690      	mov	r8, r2
 8024904:	4699      	mov	r9, r3
 8024906:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08024908 <arm_mult_q31>:
 8024908:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802490a:	4646      	mov	r6, r8
 802490c:	464f      	mov	r7, r9
 802490e:	4690      	mov	r8, r2
 8024910:	b4c0      	push	{r6, r7}
 8024912:	001d      	movs	r5, r3
 8024914:	0006      	movs	r6, r0
 8024916:	000f      	movs	r7, r1
 8024918:	2400      	movs	r4, #0
 802491a:	2b00      	cmp	r3, #0
 802491c:	d020      	beq.n	8024960 <arm_mult_q31+0x58>
 802491e:	4b12      	ldr	r3, [pc, #72]	@ (8024968 <arm_mult_q31+0x60>)
 8024920:	4699      	mov	r9, r3
 8024922:	e007      	b.n	8024934 <arm_mult_q31+0x2c>
 8024924:	464b      	mov	r3, r9
 8024926:	4059      	eors	r1, r3
 8024928:	4643      	mov	r3, r8
 802492a:	3d01      	subs	r5, #1
 802492c:	5119      	str	r1, [r3, r4]
 802492e:	3404      	adds	r4, #4
 8024930:	2d00      	cmp	r5, #0
 8024932:	d015      	beq.n	8024960 <arm_mult_q31+0x58>
 8024934:	5933      	ldr	r3, [r6, r4]
 8024936:	593a      	ldr	r2, [r7, r4]
 8024938:	17d9      	asrs	r1, r3, #31
 802493a:	593b      	ldr	r3, [r7, r4]
 802493c:	5930      	ldr	r0, [r6, r4]
 802493e:	17db      	asrs	r3, r3, #31
 8024940:	f7db fe3e 	bl	80005c0 <__aeabi_lmul>
 8024944:	004b      	lsls	r3, r1, #1
 8024946:	0fc0      	lsrs	r0, r0, #31
 8024948:	4318      	orrs	r0, r3
 802494a:	17c9      	asrs	r1, r1, #31
 802494c:	17c3      	asrs	r3, r0, #31
 802494e:	428b      	cmp	r3, r1
 8024950:	d1e8      	bne.n	8024924 <arm_mult_q31+0x1c>
 8024952:	0001      	movs	r1, r0
 8024954:	4643      	mov	r3, r8
 8024956:	3d01      	subs	r5, #1
 8024958:	5119      	str	r1, [r3, r4]
 802495a:	3404      	adds	r4, #4
 802495c:	2d00      	cmp	r5, #0
 802495e:	d1e9      	bne.n	8024934 <arm_mult_q31+0x2c>
 8024960:	bc0c      	pop	{r2, r3}
 8024962:	4690      	mov	r8, r2
 8024964:	4699      	mov	r9, r3
 8024966:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8024968:	7fffffff 	.word	0x7fffffff

0802496c <arm_add_q31>:
 802496c:	b5f0      	push	{r4, r5, r6, r7, lr}
 802496e:	465f      	mov	r7, fp
 8024970:	4656      	mov	r6, sl
 8024972:	464d      	mov	r5, r9
 8024974:	4644      	mov	r4, r8
 8024976:	b4f0      	push	{r4, r5, r6, r7}
 8024978:	4693      	mov	fp, r2
 802497a:	b083      	sub	sp, #12
 802497c:	4681      	mov	r9, r0
 802497e:	468a      	mov	sl, r1
 8024980:	4698      	mov	r8, r3
 8024982:	2200      	movs	r2, #0
 8024984:	2b00      	cmp	r3, #0
 8024986:	d020      	beq.n	80249ca <arm_add_q31+0x5e>
 8024988:	4649      	mov	r1, r9
 802498a:	4653      	mov	r3, sl
 802498c:	588e      	ldr	r6, [r1, r2]
 802498e:	589b      	ldr	r3, [r3, r2]
 8024990:	17f7      	asrs	r7, r6, #31
 8024992:	001c      	movs	r4, r3
 8024994:	0030      	movs	r0, r6
 8024996:	0039      	movs	r1, r7
 8024998:	17dd      	asrs	r5, r3, #31
 802499a:	46b4      	mov	ip, r6
 802499c:	1900      	adds	r0, r0, r4
 802499e:	4169      	adcs	r1, r5
 80249a0:	4463      	add	r3, ip
 80249a2:	9000      	str	r0, [sp, #0]
 80249a4:	9101      	str	r1, [sp, #4]
 80249a6:	17d9      	asrs	r1, r3, #31
 80249a8:	468c      	mov	ip, r1
 80249aa:	9901      	ldr	r1, [sp, #4]
 80249ac:	458c      	cmp	ip, r1
 80249ae:	d002      	beq.n	80249b6 <arm_add_q31+0x4a>
 80249b0:	17cb      	asrs	r3, r1, #31
 80249b2:	4909      	ldr	r1, [pc, #36]	@ (80249d8 <arm_add_q31+0x6c>)
 80249b4:	404b      	eors	r3, r1
 80249b6:	4659      	mov	r1, fp
 80249b8:	508b      	str	r3, [r1, r2]
 80249ba:	2301      	movs	r3, #1
 80249bc:	425b      	negs	r3, r3
 80249be:	469c      	mov	ip, r3
 80249c0:	44e0      	add	r8, ip
 80249c2:	4643      	mov	r3, r8
 80249c4:	3204      	adds	r2, #4
 80249c6:	2b00      	cmp	r3, #0
 80249c8:	d1de      	bne.n	8024988 <arm_add_q31+0x1c>
 80249ca:	b003      	add	sp, #12
 80249cc:	bc3c      	pop	{r2, r3, r4, r5}
 80249ce:	4690      	mov	r8, r2
 80249d0:	4699      	mov	r9, r3
 80249d2:	46a2      	mov	sl, r4
 80249d4:	46ab      	mov	fp, r5
 80249d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80249d8:	7fffffff 	.word	0x7fffffff

080249dc <atof>:
 80249dc:	b510      	push	{r4, lr}
 80249de:	2100      	movs	r1, #0
 80249e0:	f000 fe1e 	bl	8025620 <strtod>
 80249e4:	bd10      	pop	{r4, pc}

080249e6 <atoi>:
 80249e6:	b510      	push	{r4, lr}
 80249e8:	220a      	movs	r2, #10
 80249ea:	2100      	movs	r1, #0
 80249ec:	f000 feb0 	bl	8025750 <strtol>
 80249f0:	bd10      	pop	{r4, pc}
	...

080249f4 <sulp>:
 80249f4:	b570      	push	{r4, r5, r6, lr}
 80249f6:	0016      	movs	r6, r2
 80249f8:	000d      	movs	r5, r1
 80249fa:	f003 fced 	bl	80283d8 <__ulp>
 80249fe:	2e00      	cmp	r6, #0
 8024a00:	d00d      	beq.n	8024a1e <sulp+0x2a>
 8024a02:	236b      	movs	r3, #107	@ 0x6b
 8024a04:	006a      	lsls	r2, r5, #1
 8024a06:	0d52      	lsrs	r2, r2, #21
 8024a08:	1a9b      	subs	r3, r3, r2
 8024a0a:	2b00      	cmp	r3, #0
 8024a0c:	dd07      	ble.n	8024a1e <sulp+0x2a>
 8024a0e:	2400      	movs	r4, #0
 8024a10:	4a03      	ldr	r2, [pc, #12]	@ (8024a20 <sulp+0x2c>)
 8024a12:	051b      	lsls	r3, r3, #20
 8024a14:	189d      	adds	r5, r3, r2
 8024a16:	002b      	movs	r3, r5
 8024a18:	0022      	movs	r2, r4
 8024a1a:	f7dd ff9b 	bl	8002954 <__aeabi_dmul>
 8024a1e:	bd70      	pop	{r4, r5, r6, pc}
 8024a20:	3ff00000 	.word	0x3ff00000

08024a24 <_strtod_l>:
 8024a24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8024a26:	b0a3      	sub	sp, #140	@ 0x8c
 8024a28:	921b      	str	r2, [sp, #108]	@ 0x6c
 8024a2a:	2200      	movs	r2, #0
 8024a2c:	2600      	movs	r6, #0
 8024a2e:	2700      	movs	r7, #0
 8024a30:	9005      	str	r0, [sp, #20]
 8024a32:	9109      	str	r1, [sp, #36]	@ 0x24
 8024a34:	921e      	str	r2, [sp, #120]	@ 0x78
 8024a36:	911d      	str	r1, [sp, #116]	@ 0x74
 8024a38:	780a      	ldrb	r2, [r1, #0]
 8024a3a:	2a2b      	cmp	r2, #43	@ 0x2b
 8024a3c:	d053      	beq.n	8024ae6 <_strtod_l+0xc2>
 8024a3e:	d83f      	bhi.n	8024ac0 <_strtod_l+0x9c>
 8024a40:	2a0d      	cmp	r2, #13
 8024a42:	d839      	bhi.n	8024ab8 <_strtod_l+0x94>
 8024a44:	2a08      	cmp	r2, #8
 8024a46:	d839      	bhi.n	8024abc <_strtod_l+0x98>
 8024a48:	2a00      	cmp	r2, #0
 8024a4a:	d042      	beq.n	8024ad2 <_strtod_l+0xae>
 8024a4c:	2200      	movs	r2, #0
 8024a4e:	9212      	str	r2, [sp, #72]	@ 0x48
 8024a50:	2100      	movs	r1, #0
 8024a52:	9d1d      	ldr	r5, [sp, #116]	@ 0x74
 8024a54:	910c      	str	r1, [sp, #48]	@ 0x30
 8024a56:	782a      	ldrb	r2, [r5, #0]
 8024a58:	2a30      	cmp	r2, #48	@ 0x30
 8024a5a:	d000      	beq.n	8024a5e <_strtod_l+0x3a>
 8024a5c:	e083      	b.n	8024b66 <_strtod_l+0x142>
 8024a5e:	786a      	ldrb	r2, [r5, #1]
 8024a60:	3120      	adds	r1, #32
 8024a62:	438a      	bics	r2, r1
 8024a64:	2a58      	cmp	r2, #88	@ 0x58
 8024a66:	d000      	beq.n	8024a6a <_strtod_l+0x46>
 8024a68:	e073      	b.n	8024b52 <_strtod_l+0x12e>
 8024a6a:	9302      	str	r3, [sp, #8]
 8024a6c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8024a6e:	4a9b      	ldr	r2, [pc, #620]	@ (8024cdc <_strtod_l+0x2b8>)
 8024a70:	9301      	str	r3, [sp, #4]
 8024a72:	ab1e      	add	r3, sp, #120	@ 0x78
 8024a74:	9300      	str	r3, [sp, #0]
 8024a76:	9805      	ldr	r0, [sp, #20]
 8024a78:	ab1f      	add	r3, sp, #124	@ 0x7c
 8024a7a:	a91d      	add	r1, sp, #116	@ 0x74
 8024a7c:	f002 fd64 	bl	8027548 <__gethex>
 8024a80:	230f      	movs	r3, #15
 8024a82:	0002      	movs	r2, r0
 8024a84:	401a      	ands	r2, r3
 8024a86:	0004      	movs	r4, r0
 8024a88:	9206      	str	r2, [sp, #24]
 8024a8a:	4218      	tst	r0, r3
 8024a8c:	d005      	beq.n	8024a9a <_strtod_l+0x76>
 8024a8e:	2a06      	cmp	r2, #6
 8024a90:	d12b      	bne.n	8024aea <_strtod_l+0xc6>
 8024a92:	2300      	movs	r3, #0
 8024a94:	3501      	adds	r5, #1
 8024a96:	951d      	str	r5, [sp, #116]	@ 0x74
 8024a98:	9312      	str	r3, [sp, #72]	@ 0x48
 8024a9a:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8024a9c:	2b00      	cmp	r3, #0
 8024a9e:	d002      	beq.n	8024aa6 <_strtod_l+0x82>
 8024aa0:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8024aa2:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8024aa4:	6013      	str	r3, [r2, #0]
 8024aa6:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8024aa8:	2b00      	cmp	r3, #0
 8024aaa:	d019      	beq.n	8024ae0 <_strtod_l+0xbc>
 8024aac:	2380      	movs	r3, #128	@ 0x80
 8024aae:	0030      	movs	r0, r6
 8024ab0:	061b      	lsls	r3, r3, #24
 8024ab2:	18f9      	adds	r1, r7, r3
 8024ab4:	b023      	add	sp, #140	@ 0x8c
 8024ab6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8024ab8:	2a20      	cmp	r2, #32
 8024aba:	d1c7      	bne.n	8024a4c <_strtod_l+0x28>
 8024abc:	3101      	adds	r1, #1
 8024abe:	e7ba      	b.n	8024a36 <_strtod_l+0x12>
 8024ac0:	2a2d      	cmp	r2, #45	@ 0x2d
 8024ac2:	d1c3      	bne.n	8024a4c <_strtod_l+0x28>
 8024ac4:	3a2c      	subs	r2, #44	@ 0x2c
 8024ac6:	9212      	str	r2, [sp, #72]	@ 0x48
 8024ac8:	1c4a      	adds	r2, r1, #1
 8024aca:	921d      	str	r2, [sp, #116]	@ 0x74
 8024acc:	784a      	ldrb	r2, [r1, #1]
 8024ace:	2a00      	cmp	r2, #0
 8024ad0:	d1be      	bne.n	8024a50 <_strtod_l+0x2c>
 8024ad2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8024ad4:	931d      	str	r3, [sp, #116]	@ 0x74
 8024ad6:	2300      	movs	r3, #0
 8024ad8:	9312      	str	r3, [sp, #72]	@ 0x48
 8024ada:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8024adc:	2b00      	cmp	r3, #0
 8024ade:	d1df      	bne.n	8024aa0 <_strtod_l+0x7c>
 8024ae0:	0030      	movs	r0, r6
 8024ae2:	0039      	movs	r1, r7
 8024ae4:	e7e6      	b.n	8024ab4 <_strtod_l+0x90>
 8024ae6:	2200      	movs	r2, #0
 8024ae8:	e7ed      	b.n	8024ac6 <_strtod_l+0xa2>
 8024aea:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 8024aec:	2a00      	cmp	r2, #0
 8024aee:	d007      	beq.n	8024b00 <_strtod_l+0xdc>
 8024af0:	2135      	movs	r1, #53	@ 0x35
 8024af2:	a820      	add	r0, sp, #128	@ 0x80
 8024af4:	f003 fd66 	bl	80285c4 <__copybits>
 8024af8:	991e      	ldr	r1, [sp, #120]	@ 0x78
 8024afa:	9805      	ldr	r0, [sp, #20]
 8024afc:	f003 f928 	bl	8027d50 <_Bfree>
 8024b00:	9806      	ldr	r0, [sp, #24]
 8024b02:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 8024b04:	3801      	subs	r0, #1
 8024b06:	2804      	cmp	r0, #4
 8024b08:	d806      	bhi.n	8024b18 <_strtod_l+0xf4>
 8024b0a:	f7db fb37 	bl	800017c <__gnu_thumb1_case_uqi>
 8024b0e:	0312      	.short	0x0312
 8024b10:	1e1c      	.short	0x1e1c
 8024b12:	12          	.byte	0x12
 8024b13:	00          	.byte	0x00
 8024b14:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8024b16:	9f21      	ldr	r7, [sp, #132]	@ 0x84
 8024b18:	05e4      	lsls	r4, r4, #23
 8024b1a:	d502      	bpl.n	8024b22 <_strtod_l+0xfe>
 8024b1c:	2380      	movs	r3, #128	@ 0x80
 8024b1e:	061b      	lsls	r3, r3, #24
 8024b20:	431f      	orrs	r7, r3
 8024b22:	4b6f      	ldr	r3, [pc, #444]	@ (8024ce0 <_strtod_l+0x2bc>)
 8024b24:	423b      	tst	r3, r7
 8024b26:	d1b8      	bne.n	8024a9a <_strtod_l+0x76>
 8024b28:	f001 fd9e 	bl	8026668 <__errno>
 8024b2c:	2322      	movs	r3, #34	@ 0x22
 8024b2e:	6003      	str	r3, [r0, #0]
 8024b30:	e7b3      	b.n	8024a9a <_strtod_l+0x76>
 8024b32:	496c      	ldr	r1, [pc, #432]	@ (8024ce4 <_strtod_l+0x2c0>)
 8024b34:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8024b36:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8024b38:	400a      	ands	r2, r1
 8024b3a:	496b      	ldr	r1, [pc, #428]	@ (8024ce8 <_strtod_l+0x2c4>)
 8024b3c:	185b      	adds	r3, r3, r1
 8024b3e:	051b      	lsls	r3, r3, #20
 8024b40:	431a      	orrs	r2, r3
 8024b42:	0017      	movs	r7, r2
 8024b44:	e7e8      	b.n	8024b18 <_strtod_l+0xf4>
 8024b46:	4f66      	ldr	r7, [pc, #408]	@ (8024ce0 <_strtod_l+0x2bc>)
 8024b48:	e7e6      	b.n	8024b18 <_strtod_l+0xf4>
 8024b4a:	2601      	movs	r6, #1
 8024b4c:	4f67      	ldr	r7, [pc, #412]	@ (8024cec <_strtod_l+0x2c8>)
 8024b4e:	4276      	negs	r6, r6
 8024b50:	e7e2      	b.n	8024b18 <_strtod_l+0xf4>
 8024b52:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8024b54:	1c5a      	adds	r2, r3, #1
 8024b56:	921d      	str	r2, [sp, #116]	@ 0x74
 8024b58:	785b      	ldrb	r3, [r3, #1]
 8024b5a:	2b30      	cmp	r3, #48	@ 0x30
 8024b5c:	d0f9      	beq.n	8024b52 <_strtod_l+0x12e>
 8024b5e:	2b00      	cmp	r3, #0
 8024b60:	d09b      	beq.n	8024a9a <_strtod_l+0x76>
 8024b62:	2301      	movs	r3, #1
 8024b64:	930c      	str	r3, [sp, #48]	@ 0x30
 8024b66:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8024b68:	220a      	movs	r2, #10
 8024b6a:	9313      	str	r3, [sp, #76]	@ 0x4c
 8024b6c:	2300      	movs	r3, #0
 8024b6e:	9310      	str	r3, [sp, #64]	@ 0x40
 8024b70:	930d      	str	r3, [sp, #52]	@ 0x34
 8024b72:	9308      	str	r3, [sp, #32]
 8024b74:	981d      	ldr	r0, [sp, #116]	@ 0x74
 8024b76:	7804      	ldrb	r4, [r0, #0]
 8024b78:	0023      	movs	r3, r4
 8024b7a:	3b30      	subs	r3, #48	@ 0x30
 8024b7c:	b2d9      	uxtb	r1, r3
 8024b7e:	2909      	cmp	r1, #9
 8024b80:	d927      	bls.n	8024bd2 <_strtod_l+0x1ae>
 8024b82:	2201      	movs	r2, #1
 8024b84:	495a      	ldr	r1, [pc, #360]	@ (8024cf0 <_strtod_l+0x2cc>)
 8024b86:	f001 fce1 	bl	802654c <strncmp>
 8024b8a:	2800      	cmp	r0, #0
 8024b8c:	d033      	beq.n	8024bf6 <_strtod_l+0x1d2>
 8024b8e:	2000      	movs	r0, #0
 8024b90:	0023      	movs	r3, r4
 8024b92:	4684      	mov	ip, r0
 8024b94:	9a08      	ldr	r2, [sp, #32]
 8024b96:	900e      	str	r0, [sp, #56]	@ 0x38
 8024b98:	9206      	str	r2, [sp, #24]
 8024b9a:	2220      	movs	r2, #32
 8024b9c:	0019      	movs	r1, r3
 8024b9e:	4391      	bics	r1, r2
 8024ba0:	000a      	movs	r2, r1
 8024ba2:	2100      	movs	r1, #0
 8024ba4:	9107      	str	r1, [sp, #28]
 8024ba6:	2a45      	cmp	r2, #69	@ 0x45
 8024ba8:	d000      	beq.n	8024bac <_strtod_l+0x188>
 8024baa:	e0cb      	b.n	8024d44 <_strtod_l+0x320>
 8024bac:	9b06      	ldr	r3, [sp, #24]
 8024bae:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8024bb0:	4303      	orrs	r3, r0
 8024bb2:	4313      	orrs	r3, r2
 8024bb4:	428b      	cmp	r3, r1
 8024bb6:	d08c      	beq.n	8024ad2 <_strtod_l+0xae>
 8024bb8:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8024bba:	9309      	str	r3, [sp, #36]	@ 0x24
 8024bbc:	3301      	adds	r3, #1
 8024bbe:	931d      	str	r3, [sp, #116]	@ 0x74
 8024bc0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8024bc2:	785b      	ldrb	r3, [r3, #1]
 8024bc4:	2b2b      	cmp	r3, #43	@ 0x2b
 8024bc6:	d07b      	beq.n	8024cc0 <_strtod_l+0x29c>
 8024bc8:	000c      	movs	r4, r1
 8024bca:	2b2d      	cmp	r3, #45	@ 0x2d
 8024bcc:	d17e      	bne.n	8024ccc <_strtod_l+0x2a8>
 8024bce:	2401      	movs	r4, #1
 8024bd0:	e077      	b.n	8024cc2 <_strtod_l+0x29e>
 8024bd2:	9908      	ldr	r1, [sp, #32]
 8024bd4:	2908      	cmp	r1, #8
 8024bd6:	dc09      	bgt.n	8024bec <_strtod_l+0x1c8>
 8024bd8:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8024bda:	4351      	muls	r1, r2
 8024bdc:	185b      	adds	r3, r3, r1
 8024bde:	930d      	str	r3, [sp, #52]	@ 0x34
 8024be0:	9b08      	ldr	r3, [sp, #32]
 8024be2:	3001      	adds	r0, #1
 8024be4:	3301      	adds	r3, #1
 8024be6:	9308      	str	r3, [sp, #32]
 8024be8:	901d      	str	r0, [sp, #116]	@ 0x74
 8024bea:	e7c3      	b.n	8024b74 <_strtod_l+0x150>
 8024bec:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 8024bee:	4355      	muls	r5, r2
 8024bf0:	195b      	adds	r3, r3, r5
 8024bf2:	9310      	str	r3, [sp, #64]	@ 0x40
 8024bf4:	e7f4      	b.n	8024be0 <_strtod_l+0x1bc>
 8024bf6:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8024bf8:	1c5a      	adds	r2, r3, #1
 8024bfa:	921d      	str	r2, [sp, #116]	@ 0x74
 8024bfc:	9a08      	ldr	r2, [sp, #32]
 8024bfe:	785b      	ldrb	r3, [r3, #1]
 8024c00:	2a00      	cmp	r2, #0
 8024c02:	d03e      	beq.n	8024c82 <_strtod_l+0x25e>
 8024c04:	900e      	str	r0, [sp, #56]	@ 0x38
 8024c06:	9206      	str	r2, [sp, #24]
 8024c08:	001a      	movs	r2, r3
 8024c0a:	3a30      	subs	r2, #48	@ 0x30
 8024c0c:	2a09      	cmp	r2, #9
 8024c0e:	d912      	bls.n	8024c36 <_strtod_l+0x212>
 8024c10:	2201      	movs	r2, #1
 8024c12:	4694      	mov	ip, r2
 8024c14:	e7c1      	b.n	8024b9a <_strtod_l+0x176>
 8024c16:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8024c18:	3001      	adds	r0, #1
 8024c1a:	1c5a      	adds	r2, r3, #1
 8024c1c:	921d      	str	r2, [sp, #116]	@ 0x74
 8024c1e:	785b      	ldrb	r3, [r3, #1]
 8024c20:	2b30      	cmp	r3, #48	@ 0x30
 8024c22:	d0f8      	beq.n	8024c16 <_strtod_l+0x1f2>
 8024c24:	001a      	movs	r2, r3
 8024c26:	3a31      	subs	r2, #49	@ 0x31
 8024c28:	2a08      	cmp	r2, #8
 8024c2a:	d844      	bhi.n	8024cb6 <_strtod_l+0x292>
 8024c2c:	900e      	str	r0, [sp, #56]	@ 0x38
 8024c2e:	2000      	movs	r0, #0
 8024c30:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 8024c32:	9006      	str	r0, [sp, #24]
 8024c34:	9213      	str	r2, [sp, #76]	@ 0x4c
 8024c36:	001c      	movs	r4, r3
 8024c38:	1c42      	adds	r2, r0, #1
 8024c3a:	3c30      	subs	r4, #48	@ 0x30
 8024c3c:	2b30      	cmp	r3, #48	@ 0x30
 8024c3e:	d01a      	beq.n	8024c76 <_strtod_l+0x252>
 8024c40:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8024c42:	9906      	ldr	r1, [sp, #24]
 8024c44:	189b      	adds	r3, r3, r2
 8024c46:	930e      	str	r3, [sp, #56]	@ 0x38
 8024c48:	230a      	movs	r3, #10
 8024c4a:	469c      	mov	ip, r3
 8024c4c:	9d06      	ldr	r5, [sp, #24]
 8024c4e:	1c4b      	adds	r3, r1, #1
 8024c50:	1b5d      	subs	r5, r3, r5
 8024c52:	42aa      	cmp	r2, r5
 8024c54:	dc17      	bgt.n	8024c86 <_strtod_l+0x262>
 8024c56:	43c3      	mvns	r3, r0
 8024c58:	9a06      	ldr	r2, [sp, #24]
 8024c5a:	17db      	asrs	r3, r3, #31
 8024c5c:	4003      	ands	r3, r0
 8024c5e:	18d1      	adds	r1, r2, r3
 8024c60:	3201      	adds	r2, #1
 8024c62:	18d3      	adds	r3, r2, r3
 8024c64:	9306      	str	r3, [sp, #24]
 8024c66:	2908      	cmp	r1, #8
 8024c68:	dc1c      	bgt.n	8024ca4 <_strtod_l+0x280>
 8024c6a:	230a      	movs	r3, #10
 8024c6c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8024c6e:	4353      	muls	r3, r2
 8024c70:	2200      	movs	r2, #0
 8024c72:	18e3      	adds	r3, r4, r3
 8024c74:	930d      	str	r3, [sp, #52]	@ 0x34
 8024c76:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8024c78:	0010      	movs	r0, r2
 8024c7a:	1c59      	adds	r1, r3, #1
 8024c7c:	911d      	str	r1, [sp, #116]	@ 0x74
 8024c7e:	785b      	ldrb	r3, [r3, #1]
 8024c80:	e7c2      	b.n	8024c08 <_strtod_l+0x1e4>
 8024c82:	9808      	ldr	r0, [sp, #32]
 8024c84:	e7cc      	b.n	8024c20 <_strtod_l+0x1fc>
 8024c86:	2908      	cmp	r1, #8
 8024c88:	dc05      	bgt.n	8024c96 <_strtod_l+0x272>
 8024c8a:	4665      	mov	r5, ip
 8024c8c:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8024c8e:	4369      	muls	r1, r5
 8024c90:	910d      	str	r1, [sp, #52]	@ 0x34
 8024c92:	0019      	movs	r1, r3
 8024c94:	e7da      	b.n	8024c4c <_strtod_l+0x228>
 8024c96:	2b10      	cmp	r3, #16
 8024c98:	dcfb      	bgt.n	8024c92 <_strtod_l+0x26e>
 8024c9a:	4661      	mov	r1, ip
 8024c9c:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 8024c9e:	434d      	muls	r5, r1
 8024ca0:	9510      	str	r5, [sp, #64]	@ 0x40
 8024ca2:	e7f6      	b.n	8024c92 <_strtod_l+0x26e>
 8024ca4:	2200      	movs	r2, #0
 8024ca6:	290f      	cmp	r1, #15
 8024ca8:	dce5      	bgt.n	8024c76 <_strtod_l+0x252>
 8024caa:	230a      	movs	r3, #10
 8024cac:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 8024cae:	435d      	muls	r5, r3
 8024cb0:	1963      	adds	r3, r4, r5
 8024cb2:	9310      	str	r3, [sp, #64]	@ 0x40
 8024cb4:	e7df      	b.n	8024c76 <_strtod_l+0x252>
 8024cb6:	2200      	movs	r2, #0
 8024cb8:	920e      	str	r2, [sp, #56]	@ 0x38
 8024cba:	9206      	str	r2, [sp, #24]
 8024cbc:	3201      	adds	r2, #1
 8024cbe:	e7a8      	b.n	8024c12 <_strtod_l+0x1ee>
 8024cc0:	2400      	movs	r4, #0
 8024cc2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8024cc4:	3302      	adds	r3, #2
 8024cc6:	931d      	str	r3, [sp, #116]	@ 0x74
 8024cc8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8024cca:	789b      	ldrb	r3, [r3, #2]
 8024ccc:	001a      	movs	r2, r3
 8024cce:	3a30      	subs	r2, #48	@ 0x30
 8024cd0:	2a09      	cmp	r2, #9
 8024cd2:	d913      	bls.n	8024cfc <_strtod_l+0x2d8>
 8024cd4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8024cd6:	921d      	str	r2, [sp, #116]	@ 0x74
 8024cd8:	2200      	movs	r2, #0
 8024cda:	e032      	b.n	8024d42 <_strtod_l+0x31e>
 8024cdc:	0802ec00 	.word	0x0802ec00
 8024ce0:	7ff00000 	.word	0x7ff00000
 8024ce4:	ffefffff 	.word	0xffefffff
 8024ce8:	00000433 	.word	0x00000433
 8024cec:	7fffffff 	.word	0x7fffffff
 8024cf0:	0802ea18 	.word	0x0802ea18
 8024cf4:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8024cf6:	1c5a      	adds	r2, r3, #1
 8024cf8:	921d      	str	r2, [sp, #116]	@ 0x74
 8024cfa:	785b      	ldrb	r3, [r3, #1]
 8024cfc:	2b30      	cmp	r3, #48	@ 0x30
 8024cfe:	d0f9      	beq.n	8024cf4 <_strtod_l+0x2d0>
 8024d00:	2200      	movs	r2, #0
 8024d02:	9207      	str	r2, [sp, #28]
 8024d04:	001a      	movs	r2, r3
 8024d06:	3a31      	subs	r2, #49	@ 0x31
 8024d08:	2a08      	cmp	r2, #8
 8024d0a:	d81b      	bhi.n	8024d44 <_strtod_l+0x320>
 8024d0c:	3b30      	subs	r3, #48	@ 0x30
 8024d0e:	001a      	movs	r2, r3
 8024d10:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8024d12:	9307      	str	r3, [sp, #28]
 8024d14:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8024d16:	1c59      	adds	r1, r3, #1
 8024d18:	911d      	str	r1, [sp, #116]	@ 0x74
 8024d1a:	785b      	ldrb	r3, [r3, #1]
 8024d1c:	001d      	movs	r5, r3
 8024d1e:	3d30      	subs	r5, #48	@ 0x30
 8024d20:	2d09      	cmp	r5, #9
 8024d22:	d93a      	bls.n	8024d9a <_strtod_l+0x376>
 8024d24:	9d07      	ldr	r5, [sp, #28]
 8024d26:	1b49      	subs	r1, r1, r5
 8024d28:	000d      	movs	r5, r1
 8024d2a:	49b3      	ldr	r1, [pc, #716]	@ (8024ff8 <_strtod_l+0x5d4>)
 8024d2c:	9107      	str	r1, [sp, #28]
 8024d2e:	2d08      	cmp	r5, #8
 8024d30:	dc03      	bgt.n	8024d3a <_strtod_l+0x316>
 8024d32:	9207      	str	r2, [sp, #28]
 8024d34:	428a      	cmp	r2, r1
 8024d36:	dd00      	ble.n	8024d3a <_strtod_l+0x316>
 8024d38:	9107      	str	r1, [sp, #28]
 8024d3a:	2c00      	cmp	r4, #0
 8024d3c:	d002      	beq.n	8024d44 <_strtod_l+0x320>
 8024d3e:	9a07      	ldr	r2, [sp, #28]
 8024d40:	4252      	negs	r2, r2
 8024d42:	9207      	str	r2, [sp, #28]
 8024d44:	9a06      	ldr	r2, [sp, #24]
 8024d46:	2a00      	cmp	r2, #0
 8024d48:	d14b      	bne.n	8024de2 <_strtod_l+0x3be>
 8024d4a:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8024d4c:	4310      	orrs	r0, r2
 8024d4e:	d000      	beq.n	8024d52 <_strtod_l+0x32e>
 8024d50:	e6a3      	b.n	8024a9a <_strtod_l+0x76>
 8024d52:	4662      	mov	r2, ip
 8024d54:	2a00      	cmp	r2, #0
 8024d56:	d000      	beq.n	8024d5a <_strtod_l+0x336>
 8024d58:	e6bb      	b.n	8024ad2 <_strtod_l+0xae>
 8024d5a:	2b69      	cmp	r3, #105	@ 0x69
 8024d5c:	d025      	beq.n	8024daa <_strtod_l+0x386>
 8024d5e:	dc21      	bgt.n	8024da4 <_strtod_l+0x380>
 8024d60:	2b49      	cmp	r3, #73	@ 0x49
 8024d62:	d022      	beq.n	8024daa <_strtod_l+0x386>
 8024d64:	2b4e      	cmp	r3, #78	@ 0x4e
 8024d66:	d000      	beq.n	8024d6a <_strtod_l+0x346>
 8024d68:	e6b3      	b.n	8024ad2 <_strtod_l+0xae>
 8024d6a:	49a4      	ldr	r1, [pc, #656]	@ (8024ffc <_strtod_l+0x5d8>)
 8024d6c:	a81d      	add	r0, sp, #116	@ 0x74
 8024d6e:	f002 fe21 	bl	80279b4 <__match>
 8024d72:	2800      	cmp	r0, #0
 8024d74:	d100      	bne.n	8024d78 <_strtod_l+0x354>
 8024d76:	e6ac      	b.n	8024ad2 <_strtod_l+0xae>
 8024d78:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8024d7a:	781b      	ldrb	r3, [r3, #0]
 8024d7c:	2b28      	cmp	r3, #40	@ 0x28
 8024d7e:	d12a      	bne.n	8024dd6 <_strtod_l+0x3b2>
 8024d80:	499f      	ldr	r1, [pc, #636]	@ (8025000 <_strtod_l+0x5dc>)
 8024d82:	aa20      	add	r2, sp, #128	@ 0x80
 8024d84:	a81d      	add	r0, sp, #116	@ 0x74
 8024d86:	f002 fe29 	bl	80279dc <__hexnan>
 8024d8a:	2805      	cmp	r0, #5
 8024d8c:	d123      	bne.n	8024dd6 <_strtod_l+0x3b2>
 8024d8e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8024d90:	4a9c      	ldr	r2, [pc, #624]	@ (8025004 <_strtod_l+0x5e0>)
 8024d92:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8024d94:	431a      	orrs	r2, r3
 8024d96:	0017      	movs	r7, r2
 8024d98:	e67f      	b.n	8024a9a <_strtod_l+0x76>
 8024d9a:	210a      	movs	r1, #10
 8024d9c:	434a      	muls	r2, r1
 8024d9e:	18d2      	adds	r2, r2, r3
 8024da0:	3a30      	subs	r2, #48	@ 0x30
 8024da2:	e7b7      	b.n	8024d14 <_strtod_l+0x2f0>
 8024da4:	2b6e      	cmp	r3, #110	@ 0x6e
 8024da6:	d0e0      	beq.n	8024d6a <_strtod_l+0x346>
 8024da8:	e693      	b.n	8024ad2 <_strtod_l+0xae>
 8024daa:	4997      	ldr	r1, [pc, #604]	@ (8025008 <_strtod_l+0x5e4>)
 8024dac:	a81d      	add	r0, sp, #116	@ 0x74
 8024dae:	f002 fe01 	bl	80279b4 <__match>
 8024db2:	2800      	cmp	r0, #0
 8024db4:	d100      	bne.n	8024db8 <_strtod_l+0x394>
 8024db6:	e68c      	b.n	8024ad2 <_strtod_l+0xae>
 8024db8:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8024dba:	4994      	ldr	r1, [pc, #592]	@ (802500c <_strtod_l+0x5e8>)
 8024dbc:	3b01      	subs	r3, #1
 8024dbe:	a81d      	add	r0, sp, #116	@ 0x74
 8024dc0:	931d      	str	r3, [sp, #116]	@ 0x74
 8024dc2:	f002 fdf7 	bl	80279b4 <__match>
 8024dc6:	2800      	cmp	r0, #0
 8024dc8:	d102      	bne.n	8024dd0 <_strtod_l+0x3ac>
 8024dca:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8024dcc:	3301      	adds	r3, #1
 8024dce:	931d      	str	r3, [sp, #116]	@ 0x74
 8024dd0:	2600      	movs	r6, #0
 8024dd2:	4f8c      	ldr	r7, [pc, #560]	@ (8025004 <_strtod_l+0x5e0>)
 8024dd4:	e661      	b.n	8024a9a <_strtod_l+0x76>
 8024dd6:	488e      	ldr	r0, [pc, #568]	@ (8025010 <_strtod_l+0x5ec>)
 8024dd8:	f001 fc88 	bl	80266ec <nan>
 8024ddc:	0006      	movs	r6, r0
 8024dde:	000f      	movs	r7, r1
 8024de0:	e65b      	b.n	8024a9a <_strtod_l+0x76>
 8024de2:	9b07      	ldr	r3, [sp, #28]
 8024de4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8024de6:	1a9b      	subs	r3, r3, r2
 8024de8:	930c      	str	r3, [sp, #48]	@ 0x30
 8024dea:	9b08      	ldr	r3, [sp, #32]
 8024dec:	2b00      	cmp	r3, #0
 8024dee:	d101      	bne.n	8024df4 <_strtod_l+0x3d0>
 8024df0:	9b06      	ldr	r3, [sp, #24]
 8024df2:	9308      	str	r3, [sp, #32]
 8024df4:	9c06      	ldr	r4, [sp, #24]
 8024df6:	2c10      	cmp	r4, #16
 8024df8:	dd00      	ble.n	8024dfc <_strtod_l+0x3d8>
 8024dfa:	2410      	movs	r4, #16
 8024dfc:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8024dfe:	f7de fd25 	bl	800384c <__aeabi_ui2d>
 8024e02:	9b06      	ldr	r3, [sp, #24]
 8024e04:	0006      	movs	r6, r0
 8024e06:	000f      	movs	r7, r1
 8024e08:	2b09      	cmp	r3, #9
 8024e0a:	dc13      	bgt.n	8024e34 <_strtod_l+0x410>
 8024e0c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8024e0e:	2b00      	cmp	r3, #0
 8024e10:	d100      	bne.n	8024e14 <_strtod_l+0x3f0>
 8024e12:	e642      	b.n	8024a9a <_strtod_l+0x76>
 8024e14:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8024e16:	2b00      	cmp	r3, #0
 8024e18:	dc00      	bgt.n	8024e1c <_strtod_l+0x3f8>
 8024e1a:	e07e      	b.n	8024f1a <_strtod_l+0x4f6>
 8024e1c:	2b16      	cmp	r3, #22
 8024e1e:	dc63      	bgt.n	8024ee8 <_strtod_l+0x4c4>
 8024e20:	497c      	ldr	r1, [pc, #496]	@ (8025014 <_strtod_l+0x5f0>)
 8024e22:	00db      	lsls	r3, r3, #3
 8024e24:	18c9      	adds	r1, r1, r3
 8024e26:	0032      	movs	r2, r6
 8024e28:	6808      	ldr	r0, [r1, #0]
 8024e2a:	6849      	ldr	r1, [r1, #4]
 8024e2c:	003b      	movs	r3, r7
 8024e2e:	f7dd fd91 	bl	8002954 <__aeabi_dmul>
 8024e32:	e7d3      	b.n	8024ddc <_strtod_l+0x3b8>
 8024e34:	0022      	movs	r2, r4
 8024e36:	4b77      	ldr	r3, [pc, #476]	@ (8025014 <_strtod_l+0x5f0>)
 8024e38:	3a09      	subs	r2, #9
 8024e3a:	00d2      	lsls	r2, r2, #3
 8024e3c:	189b      	adds	r3, r3, r2
 8024e3e:	681a      	ldr	r2, [r3, #0]
 8024e40:	685b      	ldr	r3, [r3, #4]
 8024e42:	f7dd fd87 	bl	8002954 <__aeabi_dmul>
 8024e46:	0006      	movs	r6, r0
 8024e48:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8024e4a:	000f      	movs	r7, r1
 8024e4c:	f7de fcfe 	bl	800384c <__aeabi_ui2d>
 8024e50:	000b      	movs	r3, r1
 8024e52:	0002      	movs	r2, r0
 8024e54:	0039      	movs	r1, r7
 8024e56:	0030      	movs	r0, r6
 8024e58:	f7dc fd7c 	bl	8001954 <__aeabi_dadd>
 8024e5c:	9b06      	ldr	r3, [sp, #24]
 8024e5e:	0006      	movs	r6, r0
 8024e60:	000f      	movs	r7, r1
 8024e62:	2b0f      	cmp	r3, #15
 8024e64:	ddd2      	ble.n	8024e0c <_strtod_l+0x3e8>
 8024e66:	9b06      	ldr	r3, [sp, #24]
 8024e68:	1b1c      	subs	r4, r3, r4
 8024e6a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8024e6c:	18e4      	adds	r4, r4, r3
 8024e6e:	2c00      	cmp	r4, #0
 8024e70:	dc00      	bgt.n	8024e74 <_strtod_l+0x450>
 8024e72:	e09b      	b.n	8024fac <_strtod_l+0x588>
 8024e74:	220f      	movs	r2, #15
 8024e76:	0023      	movs	r3, r4
 8024e78:	4013      	ands	r3, r2
 8024e7a:	4214      	tst	r4, r2
 8024e7c:	d00a      	beq.n	8024e94 <_strtod_l+0x470>
 8024e7e:	4965      	ldr	r1, [pc, #404]	@ (8025014 <_strtod_l+0x5f0>)
 8024e80:	00db      	lsls	r3, r3, #3
 8024e82:	18c9      	adds	r1, r1, r3
 8024e84:	0032      	movs	r2, r6
 8024e86:	6808      	ldr	r0, [r1, #0]
 8024e88:	6849      	ldr	r1, [r1, #4]
 8024e8a:	003b      	movs	r3, r7
 8024e8c:	f7dd fd62 	bl	8002954 <__aeabi_dmul>
 8024e90:	0006      	movs	r6, r0
 8024e92:	000f      	movs	r7, r1
 8024e94:	230f      	movs	r3, #15
 8024e96:	439c      	bics	r4, r3
 8024e98:	d073      	beq.n	8024f82 <_strtod_l+0x55e>
 8024e9a:	3326      	adds	r3, #38	@ 0x26
 8024e9c:	33ff      	adds	r3, #255	@ 0xff
 8024e9e:	429c      	cmp	r4, r3
 8024ea0:	dd4b      	ble.n	8024f3a <_strtod_l+0x516>
 8024ea2:	2300      	movs	r3, #0
 8024ea4:	9306      	str	r3, [sp, #24]
 8024ea6:	9307      	str	r3, [sp, #28]
 8024ea8:	930d      	str	r3, [sp, #52]	@ 0x34
 8024eaa:	9308      	str	r3, [sp, #32]
 8024eac:	2322      	movs	r3, #34	@ 0x22
 8024eae:	2600      	movs	r6, #0
 8024eb0:	9a05      	ldr	r2, [sp, #20]
 8024eb2:	4f54      	ldr	r7, [pc, #336]	@ (8025004 <_strtod_l+0x5e0>)
 8024eb4:	6013      	str	r3, [r2, #0]
 8024eb6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8024eb8:	42b3      	cmp	r3, r6
 8024eba:	d100      	bne.n	8024ebe <_strtod_l+0x49a>
 8024ebc:	e5ed      	b.n	8024a9a <_strtod_l+0x76>
 8024ebe:	991e      	ldr	r1, [sp, #120]	@ 0x78
 8024ec0:	9805      	ldr	r0, [sp, #20]
 8024ec2:	f002 ff45 	bl	8027d50 <_Bfree>
 8024ec6:	9908      	ldr	r1, [sp, #32]
 8024ec8:	9805      	ldr	r0, [sp, #20]
 8024eca:	f002 ff41 	bl	8027d50 <_Bfree>
 8024ece:	9907      	ldr	r1, [sp, #28]
 8024ed0:	9805      	ldr	r0, [sp, #20]
 8024ed2:	f002 ff3d 	bl	8027d50 <_Bfree>
 8024ed6:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8024ed8:	9805      	ldr	r0, [sp, #20]
 8024eda:	f002 ff39 	bl	8027d50 <_Bfree>
 8024ede:	9906      	ldr	r1, [sp, #24]
 8024ee0:	9805      	ldr	r0, [sp, #20]
 8024ee2:	f002 ff35 	bl	8027d50 <_Bfree>
 8024ee6:	e5d8      	b.n	8024a9a <_strtod_l+0x76>
 8024ee8:	2325      	movs	r3, #37	@ 0x25
 8024eea:	9a06      	ldr	r2, [sp, #24]
 8024eec:	1a9b      	subs	r3, r3, r2
 8024eee:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8024ef0:	4293      	cmp	r3, r2
 8024ef2:	dbb8      	blt.n	8024e66 <_strtod_l+0x442>
 8024ef4:	240f      	movs	r4, #15
 8024ef6:	9b06      	ldr	r3, [sp, #24]
 8024ef8:	4d46      	ldr	r5, [pc, #280]	@ (8025014 <_strtod_l+0x5f0>)
 8024efa:	1ae4      	subs	r4, r4, r3
 8024efc:	00e1      	lsls	r1, r4, #3
 8024efe:	1869      	adds	r1, r5, r1
 8024f00:	0032      	movs	r2, r6
 8024f02:	6808      	ldr	r0, [r1, #0]
 8024f04:	6849      	ldr	r1, [r1, #4]
 8024f06:	003b      	movs	r3, r7
 8024f08:	f7dd fd24 	bl	8002954 <__aeabi_dmul>
 8024f0c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8024f0e:	1b1c      	subs	r4, r3, r4
 8024f10:	00e4      	lsls	r4, r4, #3
 8024f12:	192d      	adds	r5, r5, r4
 8024f14:	682a      	ldr	r2, [r5, #0]
 8024f16:	686b      	ldr	r3, [r5, #4]
 8024f18:	e789      	b.n	8024e2e <_strtod_l+0x40a>
 8024f1a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8024f1c:	3316      	adds	r3, #22
 8024f1e:	dba2      	blt.n	8024e66 <_strtod_l+0x442>
 8024f20:	9907      	ldr	r1, [sp, #28]
 8024f22:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8024f24:	4b3b      	ldr	r3, [pc, #236]	@ (8025014 <_strtod_l+0x5f0>)
 8024f26:	1a52      	subs	r2, r2, r1
 8024f28:	00d2      	lsls	r2, r2, #3
 8024f2a:	189b      	adds	r3, r3, r2
 8024f2c:	0030      	movs	r0, r6
 8024f2e:	681a      	ldr	r2, [r3, #0]
 8024f30:	685b      	ldr	r3, [r3, #4]
 8024f32:	0039      	movs	r1, r7
 8024f34:	f7dd f8d4 	bl	80020e0 <__aeabi_ddiv>
 8024f38:	e750      	b.n	8024ddc <_strtod_l+0x3b8>
 8024f3a:	2300      	movs	r3, #0
 8024f3c:	0030      	movs	r0, r6
 8024f3e:	0039      	movs	r1, r7
 8024f40:	4d35      	ldr	r5, [pc, #212]	@ (8025018 <_strtod_l+0x5f4>)
 8024f42:	1124      	asrs	r4, r4, #4
 8024f44:	9309      	str	r3, [sp, #36]	@ 0x24
 8024f46:	2c01      	cmp	r4, #1
 8024f48:	dc1e      	bgt.n	8024f88 <_strtod_l+0x564>
 8024f4a:	2b00      	cmp	r3, #0
 8024f4c:	d001      	beq.n	8024f52 <_strtod_l+0x52e>
 8024f4e:	0006      	movs	r6, r0
 8024f50:	000f      	movs	r7, r1
 8024f52:	4b32      	ldr	r3, [pc, #200]	@ (802501c <_strtod_l+0x5f8>)
 8024f54:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8024f56:	18ff      	adds	r7, r7, r3
 8024f58:	4b2f      	ldr	r3, [pc, #188]	@ (8025018 <_strtod_l+0x5f4>)
 8024f5a:	00d5      	lsls	r5, r2, #3
 8024f5c:	195d      	adds	r5, r3, r5
 8024f5e:	0032      	movs	r2, r6
 8024f60:	6828      	ldr	r0, [r5, #0]
 8024f62:	6869      	ldr	r1, [r5, #4]
 8024f64:	003b      	movs	r3, r7
 8024f66:	f7dd fcf5 	bl	8002954 <__aeabi_dmul>
 8024f6a:	4b26      	ldr	r3, [pc, #152]	@ (8025004 <_strtod_l+0x5e0>)
 8024f6c:	4a2c      	ldr	r2, [pc, #176]	@ (8025020 <_strtod_l+0x5fc>)
 8024f6e:	0006      	movs	r6, r0
 8024f70:	400b      	ands	r3, r1
 8024f72:	4293      	cmp	r3, r2
 8024f74:	d895      	bhi.n	8024ea2 <_strtod_l+0x47e>
 8024f76:	4a2b      	ldr	r2, [pc, #172]	@ (8025024 <_strtod_l+0x600>)
 8024f78:	4293      	cmp	r3, r2
 8024f7a:	d913      	bls.n	8024fa4 <_strtod_l+0x580>
 8024f7c:	2601      	movs	r6, #1
 8024f7e:	4f2a      	ldr	r7, [pc, #168]	@ (8025028 <_strtod_l+0x604>)
 8024f80:	4276      	negs	r6, r6
 8024f82:	2300      	movs	r3, #0
 8024f84:	9309      	str	r3, [sp, #36]	@ 0x24
 8024f86:	e086      	b.n	8025096 <_strtod_l+0x672>
 8024f88:	2201      	movs	r2, #1
 8024f8a:	4214      	tst	r4, r2
 8024f8c:	d004      	beq.n	8024f98 <_strtod_l+0x574>
 8024f8e:	682a      	ldr	r2, [r5, #0]
 8024f90:	686b      	ldr	r3, [r5, #4]
 8024f92:	f7dd fcdf 	bl	8002954 <__aeabi_dmul>
 8024f96:	2301      	movs	r3, #1
 8024f98:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8024f9a:	1064      	asrs	r4, r4, #1
 8024f9c:	3201      	adds	r2, #1
 8024f9e:	9209      	str	r2, [sp, #36]	@ 0x24
 8024fa0:	3508      	adds	r5, #8
 8024fa2:	e7d0      	b.n	8024f46 <_strtod_l+0x522>
 8024fa4:	23d4      	movs	r3, #212	@ 0xd4
 8024fa6:	049b      	lsls	r3, r3, #18
 8024fa8:	18cf      	adds	r7, r1, r3
 8024faa:	e7ea      	b.n	8024f82 <_strtod_l+0x55e>
 8024fac:	2c00      	cmp	r4, #0
 8024fae:	d0e8      	beq.n	8024f82 <_strtod_l+0x55e>
 8024fb0:	4264      	negs	r4, r4
 8024fb2:	230f      	movs	r3, #15
 8024fb4:	0022      	movs	r2, r4
 8024fb6:	401a      	ands	r2, r3
 8024fb8:	421c      	tst	r4, r3
 8024fba:	d00a      	beq.n	8024fd2 <_strtod_l+0x5ae>
 8024fbc:	4b15      	ldr	r3, [pc, #84]	@ (8025014 <_strtod_l+0x5f0>)
 8024fbe:	00d2      	lsls	r2, r2, #3
 8024fc0:	189b      	adds	r3, r3, r2
 8024fc2:	0030      	movs	r0, r6
 8024fc4:	681a      	ldr	r2, [r3, #0]
 8024fc6:	685b      	ldr	r3, [r3, #4]
 8024fc8:	0039      	movs	r1, r7
 8024fca:	f7dd f889 	bl	80020e0 <__aeabi_ddiv>
 8024fce:	0006      	movs	r6, r0
 8024fd0:	000f      	movs	r7, r1
 8024fd2:	1124      	asrs	r4, r4, #4
 8024fd4:	d0d5      	beq.n	8024f82 <_strtod_l+0x55e>
 8024fd6:	2c1f      	cmp	r4, #31
 8024fd8:	dd28      	ble.n	802502c <_strtod_l+0x608>
 8024fda:	2300      	movs	r3, #0
 8024fdc:	9306      	str	r3, [sp, #24]
 8024fde:	9307      	str	r3, [sp, #28]
 8024fe0:	930d      	str	r3, [sp, #52]	@ 0x34
 8024fe2:	9308      	str	r3, [sp, #32]
 8024fe4:	2322      	movs	r3, #34	@ 0x22
 8024fe6:	9a05      	ldr	r2, [sp, #20]
 8024fe8:	2600      	movs	r6, #0
 8024fea:	6013      	str	r3, [r2, #0]
 8024fec:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8024fee:	2700      	movs	r7, #0
 8024ff0:	2b00      	cmp	r3, #0
 8024ff2:	d000      	beq.n	8024ff6 <_strtod_l+0x5d2>
 8024ff4:	e763      	b.n	8024ebe <_strtod_l+0x49a>
 8024ff6:	e550      	b.n	8024a9a <_strtod_l+0x76>
 8024ff8:	00004e1f 	.word	0x00004e1f
 8024ffc:	0802ea27 	.word	0x0802ea27
 8025000:	0802ebec 	.word	0x0802ebec
 8025004:	7ff00000 	.word	0x7ff00000
 8025008:	0802ea1f 	.word	0x0802ea1f
 802500c:	0802ea59 	.word	0x0802ea59
 8025010:	0802ebe8 	.word	0x0802ebe8
 8025014:	0802ed78 	.word	0x0802ed78
 8025018:	0802ed50 	.word	0x0802ed50
 802501c:	fcb00000 	.word	0xfcb00000
 8025020:	7ca00000 	.word	0x7ca00000
 8025024:	7c900000 	.word	0x7c900000
 8025028:	7fefffff 	.word	0x7fefffff
 802502c:	2310      	movs	r3, #16
 802502e:	0022      	movs	r2, r4
 8025030:	401a      	ands	r2, r3
 8025032:	9209      	str	r2, [sp, #36]	@ 0x24
 8025034:	421c      	tst	r4, r3
 8025036:	d001      	beq.n	802503c <_strtod_l+0x618>
 8025038:	335a      	adds	r3, #90	@ 0x5a
 802503a:	9309      	str	r3, [sp, #36]	@ 0x24
 802503c:	0030      	movs	r0, r6
 802503e:	0039      	movs	r1, r7
 8025040:	2300      	movs	r3, #0
 8025042:	4dc0      	ldr	r5, [pc, #768]	@ (8025344 <_strtod_l+0x920>)
 8025044:	2201      	movs	r2, #1
 8025046:	4214      	tst	r4, r2
 8025048:	d004      	beq.n	8025054 <_strtod_l+0x630>
 802504a:	682a      	ldr	r2, [r5, #0]
 802504c:	686b      	ldr	r3, [r5, #4]
 802504e:	f7dd fc81 	bl	8002954 <__aeabi_dmul>
 8025052:	2301      	movs	r3, #1
 8025054:	1064      	asrs	r4, r4, #1
 8025056:	3508      	adds	r5, #8
 8025058:	2c00      	cmp	r4, #0
 802505a:	d1f3      	bne.n	8025044 <_strtod_l+0x620>
 802505c:	2b00      	cmp	r3, #0
 802505e:	d001      	beq.n	8025064 <_strtod_l+0x640>
 8025060:	0006      	movs	r6, r0
 8025062:	000f      	movs	r7, r1
 8025064:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8025066:	2b00      	cmp	r3, #0
 8025068:	d00d      	beq.n	8025086 <_strtod_l+0x662>
 802506a:	236b      	movs	r3, #107	@ 0x6b
 802506c:	007a      	lsls	r2, r7, #1
 802506e:	0d52      	lsrs	r2, r2, #21
 8025070:	0039      	movs	r1, r7
 8025072:	1a9b      	subs	r3, r3, r2
 8025074:	2b00      	cmp	r3, #0
 8025076:	dd06      	ble.n	8025086 <_strtod_l+0x662>
 8025078:	2b1f      	cmp	r3, #31
 802507a:	dd5c      	ble.n	8025136 <_strtod_l+0x712>
 802507c:	2600      	movs	r6, #0
 802507e:	2b34      	cmp	r3, #52	@ 0x34
 8025080:	dd52      	ble.n	8025128 <_strtod_l+0x704>
 8025082:	27dc      	movs	r7, #220	@ 0xdc
 8025084:	04bf      	lsls	r7, r7, #18
 8025086:	2200      	movs	r2, #0
 8025088:	2300      	movs	r3, #0
 802508a:	0030      	movs	r0, r6
 802508c:	0039      	movs	r1, r7
 802508e:	f7db fa0f 	bl	80004b0 <__aeabi_dcmpeq>
 8025092:	2800      	cmp	r0, #0
 8025094:	d1a1      	bne.n	8024fda <_strtod_l+0x5b6>
 8025096:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8025098:	9a08      	ldr	r2, [sp, #32]
 802509a:	9300      	str	r3, [sp, #0]
 802509c:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 802509e:	9b06      	ldr	r3, [sp, #24]
 80250a0:	9805      	ldr	r0, [sp, #20]
 80250a2:	f002 febd 	bl	8027e20 <__s2b>
 80250a6:	900d      	str	r0, [sp, #52]	@ 0x34
 80250a8:	2800      	cmp	r0, #0
 80250aa:	d100      	bne.n	80250ae <_strtod_l+0x68a>
 80250ac:	e6f9      	b.n	8024ea2 <_strtod_l+0x47e>
 80250ae:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80250b0:	9907      	ldr	r1, [sp, #28]
 80250b2:	43db      	mvns	r3, r3
 80250b4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80250b6:	17db      	asrs	r3, r3, #31
 80250b8:	1a52      	subs	r2, r2, r1
 80250ba:	9214      	str	r2, [sp, #80]	@ 0x50
 80250bc:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80250be:	9914      	ldr	r1, [sp, #80]	@ 0x50
 80250c0:	17d2      	asrs	r2, r2, #31
 80250c2:	4011      	ands	r1, r2
 80250c4:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80250c6:	9114      	str	r1, [sp, #80]	@ 0x50
 80250c8:	401a      	ands	r2, r3
 80250ca:	2300      	movs	r3, #0
 80250cc:	921a      	str	r2, [sp, #104]	@ 0x68
 80250ce:	9306      	str	r3, [sp, #24]
 80250d0:	9307      	str	r3, [sp, #28]
 80250d2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80250d4:	9805      	ldr	r0, [sp, #20]
 80250d6:	6859      	ldr	r1, [r3, #4]
 80250d8:	f002 fdf6 	bl	8027cc8 <_Balloc>
 80250dc:	9008      	str	r0, [sp, #32]
 80250de:	2800      	cmp	r0, #0
 80250e0:	d100      	bne.n	80250e4 <_strtod_l+0x6c0>
 80250e2:	e6e3      	b.n	8024eac <_strtod_l+0x488>
 80250e4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80250e6:	300c      	adds	r0, #12
 80250e8:	0019      	movs	r1, r3
 80250ea:	691a      	ldr	r2, [r3, #16]
 80250ec:	310c      	adds	r1, #12
 80250ee:	3202      	adds	r2, #2
 80250f0:	0092      	lsls	r2, r2, #2
 80250f2:	f001 faf1 	bl	80266d8 <memcpy>
 80250f6:	ab20      	add	r3, sp, #128	@ 0x80
 80250f8:	9301      	str	r3, [sp, #4]
 80250fa:	ab1f      	add	r3, sp, #124	@ 0x7c
 80250fc:	9300      	str	r3, [sp, #0]
 80250fe:	0032      	movs	r2, r6
 8025100:	003b      	movs	r3, r7
 8025102:	9805      	ldr	r0, [sp, #20]
 8025104:	9610      	str	r6, [sp, #64]	@ 0x40
 8025106:	9711      	str	r7, [sp, #68]	@ 0x44
 8025108:	f003 f9d2 	bl	80284b0 <__d2b>
 802510c:	901e      	str	r0, [sp, #120]	@ 0x78
 802510e:	2800      	cmp	r0, #0
 8025110:	d100      	bne.n	8025114 <_strtod_l+0x6f0>
 8025112:	e6cb      	b.n	8024eac <_strtod_l+0x488>
 8025114:	2101      	movs	r1, #1
 8025116:	9805      	ldr	r0, [sp, #20]
 8025118:	f002 ff1e 	bl	8027f58 <__i2b>
 802511c:	9007      	str	r0, [sp, #28]
 802511e:	2800      	cmp	r0, #0
 8025120:	d10e      	bne.n	8025140 <_strtod_l+0x71c>
 8025122:	2300      	movs	r3, #0
 8025124:	9307      	str	r3, [sp, #28]
 8025126:	e6c1      	b.n	8024eac <_strtod_l+0x488>
 8025128:	234b      	movs	r3, #75	@ 0x4b
 802512a:	1a9a      	subs	r2, r3, r2
 802512c:	3b4c      	subs	r3, #76	@ 0x4c
 802512e:	4093      	lsls	r3, r2
 8025130:	4019      	ands	r1, r3
 8025132:	000f      	movs	r7, r1
 8025134:	e7a7      	b.n	8025086 <_strtod_l+0x662>
 8025136:	2201      	movs	r2, #1
 8025138:	4252      	negs	r2, r2
 802513a:	409a      	lsls	r2, r3
 802513c:	4016      	ands	r6, r2
 802513e:	e7a2      	b.n	8025086 <_strtod_l+0x662>
 8025140:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 8025142:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8025144:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 8025146:	1ad4      	subs	r4, r2, r3
 8025148:	2b00      	cmp	r3, #0
 802514a:	db01      	blt.n	8025150 <_strtod_l+0x72c>
 802514c:	9c1a      	ldr	r4, [sp, #104]	@ 0x68
 802514e:	195d      	adds	r5, r3, r5
 8025150:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8025152:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8025154:	1a5b      	subs	r3, r3, r1
 8025156:	2136      	movs	r1, #54	@ 0x36
 8025158:	189b      	adds	r3, r3, r2
 802515a:	1a8a      	subs	r2, r1, r2
 802515c:	497a      	ldr	r1, [pc, #488]	@ (8025348 <_strtod_l+0x924>)
 802515e:	2001      	movs	r0, #1
 8025160:	468c      	mov	ip, r1
 8025162:	2100      	movs	r1, #0
 8025164:	3b01      	subs	r3, #1
 8025166:	9115      	str	r1, [sp, #84]	@ 0x54
 8025168:	9016      	str	r0, [sp, #88]	@ 0x58
 802516a:	4563      	cmp	r3, ip
 802516c:	da06      	bge.n	802517c <_strtod_l+0x758>
 802516e:	4661      	mov	r1, ip
 8025170:	1ac9      	subs	r1, r1, r3
 8025172:	1a52      	subs	r2, r2, r1
 8025174:	291f      	cmp	r1, #31
 8025176:	dc3f      	bgt.n	80251f8 <_strtod_l+0x7d4>
 8025178:	4088      	lsls	r0, r1
 802517a:	9016      	str	r0, [sp, #88]	@ 0x58
 802517c:	18ab      	adds	r3, r5, r2
 802517e:	930e      	str	r3, [sp, #56]	@ 0x38
 8025180:	18a4      	adds	r4, r4, r2
 8025182:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8025184:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8025186:	191c      	adds	r4, r3, r4
 8025188:	002b      	movs	r3, r5
 802518a:	4295      	cmp	r5, r2
 802518c:	dd00      	ble.n	8025190 <_strtod_l+0x76c>
 802518e:	0013      	movs	r3, r2
 8025190:	42a3      	cmp	r3, r4
 8025192:	dd00      	ble.n	8025196 <_strtod_l+0x772>
 8025194:	0023      	movs	r3, r4
 8025196:	2b00      	cmp	r3, #0
 8025198:	dd04      	ble.n	80251a4 <_strtod_l+0x780>
 802519a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 802519c:	1ae4      	subs	r4, r4, r3
 802519e:	1ad2      	subs	r2, r2, r3
 80251a0:	920e      	str	r2, [sp, #56]	@ 0x38
 80251a2:	1aed      	subs	r5, r5, r3
 80251a4:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80251a6:	2b00      	cmp	r3, #0
 80251a8:	dd16      	ble.n	80251d8 <_strtod_l+0x7b4>
 80251aa:	001a      	movs	r2, r3
 80251ac:	9907      	ldr	r1, [sp, #28]
 80251ae:	9805      	ldr	r0, [sp, #20]
 80251b0:	f002 ff94 	bl	80280dc <__pow5mult>
 80251b4:	9007      	str	r0, [sp, #28]
 80251b6:	2800      	cmp	r0, #0
 80251b8:	d0b3      	beq.n	8025122 <_strtod_l+0x6fe>
 80251ba:	0001      	movs	r1, r0
 80251bc:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 80251be:	9805      	ldr	r0, [sp, #20]
 80251c0:	f002 fee2 	bl	8027f88 <__multiply>
 80251c4:	9013      	str	r0, [sp, #76]	@ 0x4c
 80251c6:	2800      	cmp	r0, #0
 80251c8:	d100      	bne.n	80251cc <_strtod_l+0x7a8>
 80251ca:	e66f      	b.n	8024eac <_strtod_l+0x488>
 80251cc:	991e      	ldr	r1, [sp, #120]	@ 0x78
 80251ce:	9805      	ldr	r0, [sp, #20]
 80251d0:	f002 fdbe 	bl	8027d50 <_Bfree>
 80251d4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80251d6:	931e      	str	r3, [sp, #120]	@ 0x78
 80251d8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80251da:	2b00      	cmp	r3, #0
 80251dc:	dc12      	bgt.n	8025204 <_strtod_l+0x7e0>
 80251de:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80251e0:	2b00      	cmp	r3, #0
 80251e2:	dd18      	ble.n	8025216 <_strtod_l+0x7f2>
 80251e4:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80251e6:	9908      	ldr	r1, [sp, #32]
 80251e8:	9805      	ldr	r0, [sp, #20]
 80251ea:	f002 ff77 	bl	80280dc <__pow5mult>
 80251ee:	9008      	str	r0, [sp, #32]
 80251f0:	2800      	cmp	r0, #0
 80251f2:	d110      	bne.n	8025216 <_strtod_l+0x7f2>
 80251f4:	2300      	movs	r3, #0
 80251f6:	e658      	b.n	8024eaa <_strtod_l+0x486>
 80251f8:	4954      	ldr	r1, [pc, #336]	@ (802534c <_strtod_l+0x928>)
 80251fa:	1acb      	subs	r3, r1, r3
 80251fc:	0001      	movs	r1, r0
 80251fe:	4099      	lsls	r1, r3
 8025200:	9115      	str	r1, [sp, #84]	@ 0x54
 8025202:	e7ba      	b.n	802517a <_strtod_l+0x756>
 8025204:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8025206:	991e      	ldr	r1, [sp, #120]	@ 0x78
 8025208:	9805      	ldr	r0, [sp, #20]
 802520a:	f002 ffc3 	bl	8028194 <__lshift>
 802520e:	901e      	str	r0, [sp, #120]	@ 0x78
 8025210:	2800      	cmp	r0, #0
 8025212:	d1e4      	bne.n	80251de <_strtod_l+0x7ba>
 8025214:	e64a      	b.n	8024eac <_strtod_l+0x488>
 8025216:	2c00      	cmp	r4, #0
 8025218:	dd07      	ble.n	802522a <_strtod_l+0x806>
 802521a:	0022      	movs	r2, r4
 802521c:	9908      	ldr	r1, [sp, #32]
 802521e:	9805      	ldr	r0, [sp, #20]
 8025220:	f002 ffb8 	bl	8028194 <__lshift>
 8025224:	9008      	str	r0, [sp, #32]
 8025226:	2800      	cmp	r0, #0
 8025228:	d0e4      	beq.n	80251f4 <_strtod_l+0x7d0>
 802522a:	2d00      	cmp	r5, #0
 802522c:	dd08      	ble.n	8025240 <_strtod_l+0x81c>
 802522e:	002a      	movs	r2, r5
 8025230:	9907      	ldr	r1, [sp, #28]
 8025232:	9805      	ldr	r0, [sp, #20]
 8025234:	f002 ffae 	bl	8028194 <__lshift>
 8025238:	9007      	str	r0, [sp, #28]
 802523a:	2800      	cmp	r0, #0
 802523c:	d100      	bne.n	8025240 <_strtod_l+0x81c>
 802523e:	e635      	b.n	8024eac <_strtod_l+0x488>
 8025240:	9a08      	ldr	r2, [sp, #32]
 8025242:	991e      	ldr	r1, [sp, #120]	@ 0x78
 8025244:	9805      	ldr	r0, [sp, #20]
 8025246:	f003 f82d 	bl	80282a4 <__mdiff>
 802524a:	9006      	str	r0, [sp, #24]
 802524c:	2800      	cmp	r0, #0
 802524e:	d100      	bne.n	8025252 <_strtod_l+0x82e>
 8025250:	e62c      	b.n	8024eac <_strtod_l+0x488>
 8025252:	68c3      	ldr	r3, [r0, #12]
 8025254:	9907      	ldr	r1, [sp, #28]
 8025256:	9313      	str	r3, [sp, #76]	@ 0x4c
 8025258:	2300      	movs	r3, #0
 802525a:	60c3      	str	r3, [r0, #12]
 802525c:	f003 f806 	bl	802826c <__mcmp>
 8025260:	2800      	cmp	r0, #0
 8025262:	da3b      	bge.n	80252dc <_strtod_l+0x8b8>
 8025264:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8025266:	4333      	orrs	r3, r6
 8025268:	d167      	bne.n	802533a <_strtod_l+0x916>
 802526a:	033b      	lsls	r3, r7, #12
 802526c:	d165      	bne.n	802533a <_strtod_l+0x916>
 802526e:	22d6      	movs	r2, #214	@ 0xd6
 8025270:	4b37      	ldr	r3, [pc, #220]	@ (8025350 <_strtod_l+0x92c>)
 8025272:	04d2      	lsls	r2, r2, #19
 8025274:	403b      	ands	r3, r7
 8025276:	4293      	cmp	r3, r2
 8025278:	d95f      	bls.n	802533a <_strtod_l+0x916>
 802527a:	9b06      	ldr	r3, [sp, #24]
 802527c:	695b      	ldr	r3, [r3, #20]
 802527e:	2b00      	cmp	r3, #0
 8025280:	d103      	bne.n	802528a <_strtod_l+0x866>
 8025282:	9b06      	ldr	r3, [sp, #24]
 8025284:	691b      	ldr	r3, [r3, #16]
 8025286:	2b01      	cmp	r3, #1
 8025288:	dd57      	ble.n	802533a <_strtod_l+0x916>
 802528a:	9906      	ldr	r1, [sp, #24]
 802528c:	2201      	movs	r2, #1
 802528e:	9805      	ldr	r0, [sp, #20]
 8025290:	f002 ff80 	bl	8028194 <__lshift>
 8025294:	9907      	ldr	r1, [sp, #28]
 8025296:	9006      	str	r0, [sp, #24]
 8025298:	f002 ffe8 	bl	802826c <__mcmp>
 802529c:	2800      	cmp	r0, #0
 802529e:	dd4c      	ble.n	802533a <_strtod_l+0x916>
 80252a0:	4b2b      	ldr	r3, [pc, #172]	@ (8025350 <_strtod_l+0x92c>)
 80252a2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80252a4:	403b      	ands	r3, r7
 80252a6:	2a00      	cmp	r2, #0
 80252a8:	d074      	beq.n	8025394 <_strtod_l+0x970>
 80252aa:	22d6      	movs	r2, #214	@ 0xd6
 80252ac:	04d2      	lsls	r2, r2, #19
 80252ae:	4293      	cmp	r3, r2
 80252b0:	d870      	bhi.n	8025394 <_strtod_l+0x970>
 80252b2:	22dc      	movs	r2, #220	@ 0xdc
 80252b4:	0492      	lsls	r2, r2, #18
 80252b6:	4293      	cmp	r3, r2
 80252b8:	d800      	bhi.n	80252bc <_strtod_l+0x898>
 80252ba:	e693      	b.n	8024fe4 <_strtod_l+0x5c0>
 80252bc:	0030      	movs	r0, r6
 80252be:	0039      	movs	r1, r7
 80252c0:	4b24      	ldr	r3, [pc, #144]	@ (8025354 <_strtod_l+0x930>)
 80252c2:	2200      	movs	r2, #0
 80252c4:	f7dd fb46 	bl	8002954 <__aeabi_dmul>
 80252c8:	4b21      	ldr	r3, [pc, #132]	@ (8025350 <_strtod_l+0x92c>)
 80252ca:	0006      	movs	r6, r0
 80252cc:	000f      	movs	r7, r1
 80252ce:	420b      	tst	r3, r1
 80252d0:	d000      	beq.n	80252d4 <_strtod_l+0x8b0>
 80252d2:	e5f4      	b.n	8024ebe <_strtod_l+0x49a>
 80252d4:	2322      	movs	r3, #34	@ 0x22
 80252d6:	9a05      	ldr	r2, [sp, #20]
 80252d8:	6013      	str	r3, [r2, #0]
 80252da:	e5f0      	b.n	8024ebe <_strtod_l+0x49a>
 80252dc:	970e      	str	r7, [sp, #56]	@ 0x38
 80252de:	2800      	cmp	r0, #0
 80252e0:	d175      	bne.n	80253ce <_strtod_l+0x9aa>
 80252e2:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80252e4:	033b      	lsls	r3, r7, #12
 80252e6:	0b1b      	lsrs	r3, r3, #12
 80252e8:	2a00      	cmp	r2, #0
 80252ea:	d039      	beq.n	8025360 <_strtod_l+0x93c>
 80252ec:	4a1a      	ldr	r2, [pc, #104]	@ (8025358 <_strtod_l+0x934>)
 80252ee:	4293      	cmp	r3, r2
 80252f0:	d138      	bne.n	8025364 <_strtod_l+0x940>
 80252f2:	2101      	movs	r1, #1
 80252f4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80252f6:	4249      	negs	r1, r1
 80252f8:	0032      	movs	r2, r6
 80252fa:	0008      	movs	r0, r1
 80252fc:	2b00      	cmp	r3, #0
 80252fe:	d00b      	beq.n	8025318 <_strtod_l+0x8f4>
 8025300:	24d4      	movs	r4, #212	@ 0xd4
 8025302:	4b13      	ldr	r3, [pc, #76]	@ (8025350 <_strtod_l+0x92c>)
 8025304:	0008      	movs	r0, r1
 8025306:	403b      	ands	r3, r7
 8025308:	04e4      	lsls	r4, r4, #19
 802530a:	42a3      	cmp	r3, r4
 802530c:	d804      	bhi.n	8025318 <_strtod_l+0x8f4>
 802530e:	306c      	adds	r0, #108	@ 0x6c
 8025310:	0d1b      	lsrs	r3, r3, #20
 8025312:	1ac3      	subs	r3, r0, r3
 8025314:	4099      	lsls	r1, r3
 8025316:	0008      	movs	r0, r1
 8025318:	4282      	cmp	r2, r0
 802531a:	d123      	bne.n	8025364 <_strtod_l+0x940>
 802531c:	4b0f      	ldr	r3, [pc, #60]	@ (802535c <_strtod_l+0x938>)
 802531e:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8025320:	4299      	cmp	r1, r3
 8025322:	d102      	bne.n	802532a <_strtod_l+0x906>
 8025324:	3201      	adds	r2, #1
 8025326:	d100      	bne.n	802532a <_strtod_l+0x906>
 8025328:	e5c0      	b.n	8024eac <_strtod_l+0x488>
 802532a:	4b09      	ldr	r3, [pc, #36]	@ (8025350 <_strtod_l+0x92c>)
 802532c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 802532e:	2600      	movs	r6, #0
 8025330:	401a      	ands	r2, r3
 8025332:	0013      	movs	r3, r2
 8025334:	2280      	movs	r2, #128	@ 0x80
 8025336:	0352      	lsls	r2, r2, #13
 8025338:	189f      	adds	r7, r3, r2
 802533a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802533c:	2b00      	cmp	r3, #0
 802533e:	d1bd      	bne.n	80252bc <_strtod_l+0x898>
 8025340:	e5bd      	b.n	8024ebe <_strtod_l+0x49a>
 8025342:	46c0      	nop			@ (mov r8, r8)
 8025344:	0802ec18 	.word	0x0802ec18
 8025348:	fffffc02 	.word	0xfffffc02
 802534c:	fffffbe2 	.word	0xfffffbe2
 8025350:	7ff00000 	.word	0x7ff00000
 8025354:	39500000 	.word	0x39500000
 8025358:	000fffff 	.word	0x000fffff
 802535c:	7fefffff 	.word	0x7fefffff
 8025360:	4333      	orrs	r3, r6
 8025362:	d09d      	beq.n	80252a0 <_strtod_l+0x87c>
 8025364:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8025366:	2b00      	cmp	r3, #0
 8025368:	d01c      	beq.n	80253a4 <_strtod_l+0x980>
 802536a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 802536c:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 802536e:	4213      	tst	r3, r2
 8025370:	d0e3      	beq.n	802533a <_strtod_l+0x916>
 8025372:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8025374:	0030      	movs	r0, r6
 8025376:	0039      	movs	r1, r7
 8025378:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 802537a:	2b00      	cmp	r3, #0
 802537c:	d016      	beq.n	80253ac <_strtod_l+0x988>
 802537e:	f7ff fb39 	bl	80249f4 <sulp>
 8025382:	0002      	movs	r2, r0
 8025384:	000b      	movs	r3, r1
 8025386:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8025388:	9911      	ldr	r1, [sp, #68]	@ 0x44
 802538a:	f7dc fae3 	bl	8001954 <__aeabi_dadd>
 802538e:	0006      	movs	r6, r0
 8025390:	000f      	movs	r7, r1
 8025392:	e7d2      	b.n	802533a <_strtod_l+0x916>
 8025394:	2601      	movs	r6, #1
 8025396:	4a92      	ldr	r2, [pc, #584]	@ (80255e0 <_strtod_l+0xbbc>)
 8025398:	4276      	negs	r6, r6
 802539a:	189b      	adds	r3, r3, r2
 802539c:	4a91      	ldr	r2, [pc, #580]	@ (80255e4 <_strtod_l+0xbc0>)
 802539e:	431a      	orrs	r2, r3
 80253a0:	0017      	movs	r7, r2
 80253a2:	e7ca      	b.n	802533a <_strtod_l+0x916>
 80253a4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80253a6:	4233      	tst	r3, r6
 80253a8:	d0c7      	beq.n	802533a <_strtod_l+0x916>
 80253aa:	e7e2      	b.n	8025372 <_strtod_l+0x94e>
 80253ac:	f7ff fb22 	bl	80249f4 <sulp>
 80253b0:	0002      	movs	r2, r0
 80253b2:	000b      	movs	r3, r1
 80253b4:	9810      	ldr	r0, [sp, #64]	@ 0x40
 80253b6:	9911      	ldr	r1, [sp, #68]	@ 0x44
 80253b8:	f7dd fdb2 	bl	8002f20 <__aeabi_dsub>
 80253bc:	2200      	movs	r2, #0
 80253be:	2300      	movs	r3, #0
 80253c0:	0006      	movs	r6, r0
 80253c2:	000f      	movs	r7, r1
 80253c4:	f7db f874 	bl	80004b0 <__aeabi_dcmpeq>
 80253c8:	2800      	cmp	r0, #0
 80253ca:	d0b6      	beq.n	802533a <_strtod_l+0x916>
 80253cc:	e60a      	b.n	8024fe4 <_strtod_l+0x5c0>
 80253ce:	9907      	ldr	r1, [sp, #28]
 80253d0:	9806      	ldr	r0, [sp, #24]
 80253d2:	f003 f8cd 	bl	8028570 <__ratio>
 80253d6:	2380      	movs	r3, #128	@ 0x80
 80253d8:	2200      	movs	r2, #0
 80253da:	05db      	lsls	r3, r3, #23
 80253dc:	0004      	movs	r4, r0
 80253de:	000d      	movs	r5, r1
 80253e0:	f7db f876 	bl	80004d0 <__aeabi_dcmple>
 80253e4:	2800      	cmp	r0, #0
 80253e6:	d06c      	beq.n	80254c2 <_strtod_l+0xa9e>
 80253e8:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80253ea:	2b00      	cmp	r3, #0
 80253ec:	d177      	bne.n	80254de <_strtod_l+0xaba>
 80253ee:	2e00      	cmp	r6, #0
 80253f0:	d157      	bne.n	80254a2 <_strtod_l+0xa7e>
 80253f2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80253f4:	031b      	lsls	r3, r3, #12
 80253f6:	d15a      	bne.n	80254ae <_strtod_l+0xa8a>
 80253f8:	2200      	movs	r2, #0
 80253fa:	0020      	movs	r0, r4
 80253fc:	0029      	movs	r1, r5
 80253fe:	4b7a      	ldr	r3, [pc, #488]	@ (80255e8 <_strtod_l+0xbc4>)
 8025400:	f7db f85c 	bl	80004bc <__aeabi_dcmplt>
 8025404:	2800      	cmp	r0, #0
 8025406:	d159      	bne.n	80254bc <_strtod_l+0xa98>
 8025408:	0020      	movs	r0, r4
 802540a:	0029      	movs	r1, r5
 802540c:	2200      	movs	r2, #0
 802540e:	4b77      	ldr	r3, [pc, #476]	@ (80255ec <_strtod_l+0xbc8>)
 8025410:	f7dd faa0 	bl	8002954 <__aeabi_dmul>
 8025414:	0004      	movs	r4, r0
 8025416:	000d      	movs	r5, r1
 8025418:	2380      	movs	r3, #128	@ 0x80
 802541a:	061b      	lsls	r3, r3, #24
 802541c:	18eb      	adds	r3, r5, r3
 802541e:	940a      	str	r4, [sp, #40]	@ 0x28
 8025420:	930b      	str	r3, [sp, #44]	@ 0x2c
 8025422:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8025424:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8025426:	9216      	str	r2, [sp, #88]	@ 0x58
 8025428:	9317      	str	r3, [sp, #92]	@ 0x5c
 802542a:	4a71      	ldr	r2, [pc, #452]	@ (80255f0 <_strtod_l+0xbcc>)
 802542c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 802542e:	4013      	ands	r3, r2
 8025430:	9315      	str	r3, [sp, #84]	@ 0x54
 8025432:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8025434:	4b6f      	ldr	r3, [pc, #444]	@ (80255f4 <_strtod_l+0xbd0>)
 8025436:	429a      	cmp	r2, r3
 8025438:	d000      	beq.n	802543c <_strtod_l+0xa18>
 802543a:	e087      	b.n	802554c <_strtod_l+0xb28>
 802543c:	4a6e      	ldr	r2, [pc, #440]	@ (80255f8 <_strtod_l+0xbd4>)
 802543e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8025440:	4694      	mov	ip, r2
 8025442:	4463      	add	r3, ip
 8025444:	001f      	movs	r7, r3
 8025446:	0030      	movs	r0, r6
 8025448:	0019      	movs	r1, r3
 802544a:	f002 ffc5 	bl	80283d8 <__ulp>
 802544e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8025450:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8025452:	f7dd fa7f 	bl	8002954 <__aeabi_dmul>
 8025456:	0032      	movs	r2, r6
 8025458:	003b      	movs	r3, r7
 802545a:	f7dc fa7b 	bl	8001954 <__aeabi_dadd>
 802545e:	4a64      	ldr	r2, [pc, #400]	@ (80255f0 <_strtod_l+0xbcc>)
 8025460:	4b66      	ldr	r3, [pc, #408]	@ (80255fc <_strtod_l+0xbd8>)
 8025462:	0006      	movs	r6, r0
 8025464:	400a      	ands	r2, r1
 8025466:	429a      	cmp	r2, r3
 8025468:	d940      	bls.n	80254ec <_strtod_l+0xac8>
 802546a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 802546c:	4a64      	ldr	r2, [pc, #400]	@ (8025600 <_strtod_l+0xbdc>)
 802546e:	4293      	cmp	r3, r2
 8025470:	d103      	bne.n	802547a <_strtod_l+0xa56>
 8025472:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8025474:	3301      	adds	r3, #1
 8025476:	d100      	bne.n	802547a <_strtod_l+0xa56>
 8025478:	e518      	b.n	8024eac <_strtod_l+0x488>
 802547a:	2601      	movs	r6, #1
 802547c:	4f60      	ldr	r7, [pc, #384]	@ (8025600 <_strtod_l+0xbdc>)
 802547e:	4276      	negs	r6, r6
 8025480:	991e      	ldr	r1, [sp, #120]	@ 0x78
 8025482:	9805      	ldr	r0, [sp, #20]
 8025484:	f002 fc64 	bl	8027d50 <_Bfree>
 8025488:	9908      	ldr	r1, [sp, #32]
 802548a:	9805      	ldr	r0, [sp, #20]
 802548c:	f002 fc60 	bl	8027d50 <_Bfree>
 8025490:	9907      	ldr	r1, [sp, #28]
 8025492:	9805      	ldr	r0, [sp, #20]
 8025494:	f002 fc5c 	bl	8027d50 <_Bfree>
 8025498:	9906      	ldr	r1, [sp, #24]
 802549a:	9805      	ldr	r0, [sp, #20]
 802549c:	f002 fc58 	bl	8027d50 <_Bfree>
 80254a0:	e617      	b.n	80250d2 <_strtod_l+0x6ae>
 80254a2:	2e01      	cmp	r6, #1
 80254a4:	d103      	bne.n	80254ae <_strtod_l+0xa8a>
 80254a6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80254a8:	2b00      	cmp	r3, #0
 80254aa:	d100      	bne.n	80254ae <_strtod_l+0xa8a>
 80254ac:	e59a      	b.n	8024fe4 <_strtod_l+0x5c0>
 80254ae:	2300      	movs	r3, #0
 80254b0:	4c54      	ldr	r4, [pc, #336]	@ (8025604 <_strtod_l+0xbe0>)
 80254b2:	4d4d      	ldr	r5, [pc, #308]	@ (80255e8 <_strtod_l+0xbc4>)
 80254b4:	930a      	str	r3, [sp, #40]	@ 0x28
 80254b6:	940b      	str	r4, [sp, #44]	@ 0x2c
 80254b8:	2400      	movs	r4, #0
 80254ba:	e7b2      	b.n	8025422 <_strtod_l+0x9fe>
 80254bc:	2400      	movs	r4, #0
 80254be:	4d4b      	ldr	r5, [pc, #300]	@ (80255ec <_strtod_l+0xbc8>)
 80254c0:	e7aa      	b.n	8025418 <_strtod_l+0x9f4>
 80254c2:	0020      	movs	r0, r4
 80254c4:	0029      	movs	r1, r5
 80254c6:	4b49      	ldr	r3, [pc, #292]	@ (80255ec <_strtod_l+0xbc8>)
 80254c8:	2200      	movs	r2, #0
 80254ca:	f7dd fa43 	bl	8002954 <__aeabi_dmul>
 80254ce:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80254d0:	0004      	movs	r4, r0
 80254d2:	000d      	movs	r5, r1
 80254d4:	2b00      	cmp	r3, #0
 80254d6:	d09f      	beq.n	8025418 <_strtod_l+0x9f4>
 80254d8:	940a      	str	r4, [sp, #40]	@ 0x28
 80254da:	950b      	str	r5, [sp, #44]	@ 0x2c
 80254dc:	e7a1      	b.n	8025422 <_strtod_l+0x9fe>
 80254de:	2300      	movs	r3, #0
 80254e0:	4c41      	ldr	r4, [pc, #260]	@ (80255e8 <_strtod_l+0xbc4>)
 80254e2:	0025      	movs	r5, r4
 80254e4:	930a      	str	r3, [sp, #40]	@ 0x28
 80254e6:	940b      	str	r4, [sp, #44]	@ 0x2c
 80254e8:	001c      	movs	r4, r3
 80254ea:	e79a      	b.n	8025422 <_strtod_l+0x9fe>
 80254ec:	23d4      	movs	r3, #212	@ 0xd4
 80254ee:	049b      	lsls	r3, r3, #18
 80254f0:	18cf      	adds	r7, r1, r3
 80254f2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80254f4:	9710      	str	r7, [sp, #64]	@ 0x40
 80254f6:	2b00      	cmp	r3, #0
 80254f8:	d1c2      	bne.n	8025480 <_strtod_l+0xa5c>
 80254fa:	4b3d      	ldr	r3, [pc, #244]	@ (80255f0 <_strtod_l+0xbcc>)
 80254fc:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 80254fe:	403b      	ands	r3, r7
 8025500:	429a      	cmp	r2, r3
 8025502:	d1bd      	bne.n	8025480 <_strtod_l+0xa5c>
 8025504:	0020      	movs	r0, r4
 8025506:	0029      	movs	r1, r5
 8025508:	f7db f8be 	bl	8000688 <__aeabi_d2lz>
 802550c:	f7db f8f6 	bl	80006fc <__aeabi_l2d>
 8025510:	0002      	movs	r2, r0
 8025512:	000b      	movs	r3, r1
 8025514:	0020      	movs	r0, r4
 8025516:	0029      	movs	r1, r5
 8025518:	f7dd fd02 	bl	8002f20 <__aeabi_dsub>
 802551c:	033c      	lsls	r4, r7, #12
 802551e:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8025520:	0b24      	lsrs	r4, r4, #12
 8025522:	4334      	orrs	r4, r6
 8025524:	900e      	str	r0, [sp, #56]	@ 0x38
 8025526:	910f      	str	r1, [sp, #60]	@ 0x3c
 8025528:	4a37      	ldr	r2, [pc, #220]	@ (8025608 <_strtod_l+0xbe4>)
 802552a:	431c      	orrs	r4, r3
 802552c:	d052      	beq.n	80255d4 <_strtod_l+0xbb0>
 802552e:	4b37      	ldr	r3, [pc, #220]	@ (802560c <_strtod_l+0xbe8>)
 8025530:	f7da ffc4 	bl	80004bc <__aeabi_dcmplt>
 8025534:	2800      	cmp	r0, #0
 8025536:	d000      	beq.n	802553a <_strtod_l+0xb16>
 8025538:	e4c1      	b.n	8024ebe <_strtod_l+0x49a>
 802553a:	980e      	ldr	r0, [sp, #56]	@ 0x38
 802553c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 802553e:	4a34      	ldr	r2, [pc, #208]	@ (8025610 <_strtod_l+0xbec>)
 8025540:	4b2a      	ldr	r3, [pc, #168]	@ (80255ec <_strtod_l+0xbc8>)
 8025542:	f7da ffcf 	bl	80004e4 <__aeabi_dcmpgt>
 8025546:	2800      	cmp	r0, #0
 8025548:	d09a      	beq.n	8025480 <_strtod_l+0xa5c>
 802554a:	e4b8      	b.n	8024ebe <_strtod_l+0x49a>
 802554c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802554e:	2b00      	cmp	r3, #0
 8025550:	d02a      	beq.n	80255a8 <_strtod_l+0xb84>
 8025552:	23d4      	movs	r3, #212	@ 0xd4
 8025554:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8025556:	04db      	lsls	r3, r3, #19
 8025558:	429a      	cmp	r2, r3
 802555a:	d825      	bhi.n	80255a8 <_strtod_l+0xb84>
 802555c:	0020      	movs	r0, r4
 802555e:	0029      	movs	r1, r5
 8025560:	4a2c      	ldr	r2, [pc, #176]	@ (8025614 <_strtod_l+0xbf0>)
 8025562:	4b2d      	ldr	r3, [pc, #180]	@ (8025618 <_strtod_l+0xbf4>)
 8025564:	f7da ffb4 	bl	80004d0 <__aeabi_dcmple>
 8025568:	2800      	cmp	r0, #0
 802556a:	d016      	beq.n	802559a <_strtod_l+0xb76>
 802556c:	0020      	movs	r0, r4
 802556e:	0029      	movs	r1, r5
 8025570:	f7db f86c 	bl	800064c <__aeabi_d2uiz>
 8025574:	2800      	cmp	r0, #0
 8025576:	d100      	bne.n	802557a <_strtod_l+0xb56>
 8025578:	3001      	adds	r0, #1
 802557a:	f7de f967 	bl	800384c <__aeabi_ui2d>
 802557e:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8025580:	0004      	movs	r4, r0
 8025582:	000d      	movs	r5, r1
 8025584:	2b00      	cmp	r3, #0
 8025586:	d122      	bne.n	80255ce <_strtod_l+0xbaa>
 8025588:	2380      	movs	r3, #128	@ 0x80
 802558a:	061b      	lsls	r3, r3, #24
 802558c:	18cb      	adds	r3, r1, r3
 802558e:	9018      	str	r0, [sp, #96]	@ 0x60
 8025590:	9319      	str	r3, [sp, #100]	@ 0x64
 8025592:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 8025594:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8025596:	9216      	str	r2, [sp, #88]	@ 0x58
 8025598:	9317      	str	r3, [sp, #92]	@ 0x5c
 802559a:	22d6      	movs	r2, #214	@ 0xd6
 802559c:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 802559e:	04d2      	lsls	r2, r2, #19
 80255a0:	189b      	adds	r3, r3, r2
 80255a2:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 80255a4:	1a9b      	subs	r3, r3, r2
 80255a6:	9317      	str	r3, [sp, #92]	@ 0x5c
 80255a8:	9810      	ldr	r0, [sp, #64]	@ 0x40
 80255aa:	9911      	ldr	r1, [sp, #68]	@ 0x44
 80255ac:	9e16      	ldr	r6, [sp, #88]	@ 0x58
 80255ae:	9f17      	ldr	r7, [sp, #92]	@ 0x5c
 80255b0:	f002 ff12 	bl	80283d8 <__ulp>
 80255b4:	0002      	movs	r2, r0
 80255b6:	000b      	movs	r3, r1
 80255b8:	0030      	movs	r0, r6
 80255ba:	0039      	movs	r1, r7
 80255bc:	f7dd f9ca 	bl	8002954 <__aeabi_dmul>
 80255c0:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 80255c2:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80255c4:	f7dc f9c6 	bl	8001954 <__aeabi_dadd>
 80255c8:	0006      	movs	r6, r0
 80255ca:	000f      	movs	r7, r1
 80255cc:	e791      	b.n	80254f2 <_strtod_l+0xace>
 80255ce:	9418      	str	r4, [sp, #96]	@ 0x60
 80255d0:	9519      	str	r5, [sp, #100]	@ 0x64
 80255d2:	e7de      	b.n	8025592 <_strtod_l+0xb6e>
 80255d4:	4b11      	ldr	r3, [pc, #68]	@ (802561c <_strtod_l+0xbf8>)
 80255d6:	980e      	ldr	r0, [sp, #56]	@ 0x38
 80255d8:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80255da:	f7da ff6f 	bl	80004bc <__aeabi_dcmplt>
 80255de:	e7b2      	b.n	8025546 <_strtod_l+0xb22>
 80255e0:	fff00000 	.word	0xfff00000
 80255e4:	000fffff 	.word	0x000fffff
 80255e8:	3ff00000 	.word	0x3ff00000
 80255ec:	3fe00000 	.word	0x3fe00000
 80255f0:	7ff00000 	.word	0x7ff00000
 80255f4:	7fe00000 	.word	0x7fe00000
 80255f8:	fcb00000 	.word	0xfcb00000
 80255fc:	7c9fffff 	.word	0x7c9fffff
 8025600:	7fefffff 	.word	0x7fefffff
 8025604:	bff00000 	.word	0xbff00000
 8025608:	94a03595 	.word	0x94a03595
 802560c:	3fdfffff 	.word	0x3fdfffff
 8025610:	35afe535 	.word	0x35afe535
 8025614:	ffc00000 	.word	0xffc00000
 8025618:	41dfffff 	.word	0x41dfffff
 802561c:	3fcfffff 	.word	0x3fcfffff

08025620 <strtod>:
 8025620:	b510      	push	{r4, lr}
 8025622:	4c04      	ldr	r4, [pc, #16]	@ (8025634 <strtod+0x14>)
 8025624:	000a      	movs	r2, r1
 8025626:	0001      	movs	r1, r0
 8025628:	4b03      	ldr	r3, [pc, #12]	@ (8025638 <strtod+0x18>)
 802562a:	6820      	ldr	r0, [r4, #0]
 802562c:	f7ff f9fa 	bl	8024a24 <_strtod_l>
 8025630:	bd10      	pop	{r4, pc}
 8025632:	46c0      	nop			@ (mov r8, r8)
 8025634:	200003ec 	.word	0x200003ec
 8025638:	20000280 	.word	0x20000280

0802563c <_strtol_l.isra.0>:
 802563c:	b5f0      	push	{r4, r5, r6, r7, lr}
 802563e:	b085      	sub	sp, #20
 8025640:	0017      	movs	r7, r2
 8025642:	001e      	movs	r6, r3
 8025644:	9003      	str	r0, [sp, #12]
 8025646:	9101      	str	r1, [sp, #4]
 8025648:	2b24      	cmp	r3, #36	@ 0x24
 802564a:	d823      	bhi.n	8025694 <_strtol_l.isra.0+0x58>
 802564c:	000c      	movs	r4, r1
 802564e:	2b01      	cmp	r3, #1
 8025650:	d020      	beq.n	8025694 <_strtol_l.isra.0+0x58>
 8025652:	4b3d      	ldr	r3, [pc, #244]	@ (8025748 <_strtol_l.isra.0+0x10c>)
 8025654:	2208      	movs	r2, #8
 8025656:	469c      	mov	ip, r3
 8025658:	0023      	movs	r3, r4
 802565a:	4661      	mov	r1, ip
 802565c:	781d      	ldrb	r5, [r3, #0]
 802565e:	3401      	adds	r4, #1
 8025660:	5d48      	ldrb	r0, [r1, r5]
 8025662:	0001      	movs	r1, r0
 8025664:	4011      	ands	r1, r2
 8025666:	4210      	tst	r0, r2
 8025668:	d1f6      	bne.n	8025658 <_strtol_l.isra.0+0x1c>
 802566a:	2d2d      	cmp	r5, #45	@ 0x2d
 802566c:	d119      	bne.n	80256a2 <_strtol_l.isra.0+0x66>
 802566e:	7825      	ldrb	r5, [r4, #0]
 8025670:	1c9c      	adds	r4, r3, #2
 8025672:	2301      	movs	r3, #1
 8025674:	9300      	str	r3, [sp, #0]
 8025676:	2210      	movs	r2, #16
 8025678:	0033      	movs	r3, r6
 802567a:	4393      	bics	r3, r2
 802567c:	d11d      	bne.n	80256ba <_strtol_l.isra.0+0x7e>
 802567e:	2d30      	cmp	r5, #48	@ 0x30
 8025680:	d115      	bne.n	80256ae <_strtol_l.isra.0+0x72>
 8025682:	2120      	movs	r1, #32
 8025684:	7823      	ldrb	r3, [r4, #0]
 8025686:	438b      	bics	r3, r1
 8025688:	2b58      	cmp	r3, #88	@ 0x58
 802568a:	d110      	bne.n	80256ae <_strtol_l.isra.0+0x72>
 802568c:	7865      	ldrb	r5, [r4, #1]
 802568e:	3402      	adds	r4, #2
 8025690:	2610      	movs	r6, #16
 8025692:	e012      	b.n	80256ba <_strtol_l.isra.0+0x7e>
 8025694:	f000 ffe8 	bl	8026668 <__errno>
 8025698:	2316      	movs	r3, #22
 802569a:	6003      	str	r3, [r0, #0]
 802569c:	2000      	movs	r0, #0
 802569e:	b005      	add	sp, #20
 80256a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80256a2:	9100      	str	r1, [sp, #0]
 80256a4:	2d2b      	cmp	r5, #43	@ 0x2b
 80256a6:	d1e6      	bne.n	8025676 <_strtol_l.isra.0+0x3a>
 80256a8:	7825      	ldrb	r5, [r4, #0]
 80256aa:	1c9c      	adds	r4, r3, #2
 80256ac:	e7e3      	b.n	8025676 <_strtol_l.isra.0+0x3a>
 80256ae:	2e00      	cmp	r6, #0
 80256b0:	d1ee      	bne.n	8025690 <_strtol_l.isra.0+0x54>
 80256b2:	360a      	adds	r6, #10
 80256b4:	2d30      	cmp	r5, #48	@ 0x30
 80256b6:	d100      	bne.n	80256ba <_strtol_l.isra.0+0x7e>
 80256b8:	3e02      	subs	r6, #2
 80256ba:	4a24      	ldr	r2, [pc, #144]	@ (802574c <_strtol_l.isra.0+0x110>)
 80256bc:	9b00      	ldr	r3, [sp, #0]
 80256be:	4694      	mov	ip, r2
 80256c0:	4463      	add	r3, ip
 80256c2:	0031      	movs	r1, r6
 80256c4:	0018      	movs	r0, r3
 80256c6:	9302      	str	r3, [sp, #8]
 80256c8:	f7da fdf2 	bl	80002b0 <__aeabi_uidivmod>
 80256cc:	2200      	movs	r2, #0
 80256ce:	4684      	mov	ip, r0
 80256d0:	0010      	movs	r0, r2
 80256d2:	002b      	movs	r3, r5
 80256d4:	3b30      	subs	r3, #48	@ 0x30
 80256d6:	2b09      	cmp	r3, #9
 80256d8:	d811      	bhi.n	80256fe <_strtol_l.isra.0+0xc2>
 80256da:	001d      	movs	r5, r3
 80256dc:	42ae      	cmp	r6, r5
 80256de:	dd1d      	ble.n	802571c <_strtol_l.isra.0+0xe0>
 80256e0:	1c53      	adds	r3, r2, #1
 80256e2:	d009      	beq.n	80256f8 <_strtol_l.isra.0+0xbc>
 80256e4:	2201      	movs	r2, #1
 80256e6:	4252      	negs	r2, r2
 80256e8:	4584      	cmp	ip, r0
 80256ea:	d305      	bcc.n	80256f8 <_strtol_l.isra.0+0xbc>
 80256ec:	d101      	bne.n	80256f2 <_strtol_l.isra.0+0xb6>
 80256ee:	42a9      	cmp	r1, r5
 80256f0:	db11      	blt.n	8025716 <_strtol_l.isra.0+0xda>
 80256f2:	2201      	movs	r2, #1
 80256f4:	4370      	muls	r0, r6
 80256f6:	1828      	adds	r0, r5, r0
 80256f8:	7825      	ldrb	r5, [r4, #0]
 80256fa:	3401      	adds	r4, #1
 80256fc:	e7e9      	b.n	80256d2 <_strtol_l.isra.0+0x96>
 80256fe:	002b      	movs	r3, r5
 8025700:	3b41      	subs	r3, #65	@ 0x41
 8025702:	2b19      	cmp	r3, #25
 8025704:	d801      	bhi.n	802570a <_strtol_l.isra.0+0xce>
 8025706:	3d37      	subs	r5, #55	@ 0x37
 8025708:	e7e8      	b.n	80256dc <_strtol_l.isra.0+0xa0>
 802570a:	002b      	movs	r3, r5
 802570c:	3b61      	subs	r3, #97	@ 0x61
 802570e:	2b19      	cmp	r3, #25
 8025710:	d804      	bhi.n	802571c <_strtol_l.isra.0+0xe0>
 8025712:	3d57      	subs	r5, #87	@ 0x57
 8025714:	e7e2      	b.n	80256dc <_strtol_l.isra.0+0xa0>
 8025716:	2201      	movs	r2, #1
 8025718:	4252      	negs	r2, r2
 802571a:	e7ed      	b.n	80256f8 <_strtol_l.isra.0+0xbc>
 802571c:	1c53      	adds	r3, r2, #1
 802571e:	d108      	bne.n	8025732 <_strtol_l.isra.0+0xf6>
 8025720:	2322      	movs	r3, #34	@ 0x22
 8025722:	9a03      	ldr	r2, [sp, #12]
 8025724:	9802      	ldr	r0, [sp, #8]
 8025726:	6013      	str	r3, [r2, #0]
 8025728:	2f00      	cmp	r7, #0
 802572a:	d0b8      	beq.n	802569e <_strtol_l.isra.0+0x62>
 802572c:	1e63      	subs	r3, r4, #1
 802572e:	9301      	str	r3, [sp, #4]
 8025730:	e007      	b.n	8025742 <_strtol_l.isra.0+0x106>
 8025732:	9b00      	ldr	r3, [sp, #0]
 8025734:	2b00      	cmp	r3, #0
 8025736:	d000      	beq.n	802573a <_strtol_l.isra.0+0xfe>
 8025738:	4240      	negs	r0, r0
 802573a:	2f00      	cmp	r7, #0
 802573c:	d0af      	beq.n	802569e <_strtol_l.isra.0+0x62>
 802573e:	2a00      	cmp	r2, #0
 8025740:	d1f4      	bne.n	802572c <_strtol_l.isra.0+0xf0>
 8025742:	9b01      	ldr	r3, [sp, #4]
 8025744:	603b      	str	r3, [r7, #0]
 8025746:	e7aa      	b.n	802569e <_strtol_l.isra.0+0x62>
 8025748:	0802ec41 	.word	0x0802ec41
 802574c:	7fffffff 	.word	0x7fffffff

08025750 <strtol>:
 8025750:	b510      	push	{r4, lr}
 8025752:	4c04      	ldr	r4, [pc, #16]	@ (8025764 <strtol+0x14>)
 8025754:	0013      	movs	r3, r2
 8025756:	000a      	movs	r2, r1
 8025758:	0001      	movs	r1, r0
 802575a:	6820      	ldr	r0, [r4, #0]
 802575c:	f7ff ff6e 	bl	802563c <_strtol_l.isra.0>
 8025760:	bd10      	pop	{r4, pc}
 8025762:	46c0      	nop			@ (mov r8, r8)
 8025764:	200003ec 	.word	0x200003ec

08025768 <__cvt>:
 8025768:	b5f0      	push	{r4, r5, r6, r7, lr}
 802576a:	001f      	movs	r7, r3
 802576c:	2300      	movs	r3, #0
 802576e:	0016      	movs	r6, r2
 8025770:	b08b      	sub	sp, #44	@ 0x2c
 8025772:	429f      	cmp	r7, r3
 8025774:	da04      	bge.n	8025780 <__cvt+0x18>
 8025776:	2180      	movs	r1, #128	@ 0x80
 8025778:	0609      	lsls	r1, r1, #24
 802577a:	187b      	adds	r3, r7, r1
 802577c:	001f      	movs	r7, r3
 802577e:	232d      	movs	r3, #45	@ 0x2d
 8025780:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8025782:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 8025784:	7013      	strb	r3, [r2, #0]
 8025786:	2320      	movs	r3, #32
 8025788:	2203      	movs	r2, #3
 802578a:	439d      	bics	r5, r3
 802578c:	2d46      	cmp	r5, #70	@ 0x46
 802578e:	d007      	beq.n	80257a0 <__cvt+0x38>
 8025790:	002b      	movs	r3, r5
 8025792:	3b45      	subs	r3, #69	@ 0x45
 8025794:	4259      	negs	r1, r3
 8025796:	414b      	adcs	r3, r1
 8025798:	9910      	ldr	r1, [sp, #64]	@ 0x40
 802579a:	3a01      	subs	r2, #1
 802579c:	18cb      	adds	r3, r1, r3
 802579e:	9310      	str	r3, [sp, #64]	@ 0x40
 80257a0:	ab09      	add	r3, sp, #36	@ 0x24
 80257a2:	9304      	str	r3, [sp, #16]
 80257a4:	ab08      	add	r3, sp, #32
 80257a6:	9303      	str	r3, [sp, #12]
 80257a8:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80257aa:	9200      	str	r2, [sp, #0]
 80257ac:	9302      	str	r3, [sp, #8]
 80257ae:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80257b0:	0032      	movs	r2, r6
 80257b2:	9301      	str	r3, [sp, #4]
 80257b4:	003b      	movs	r3, r7
 80257b6:	f001 f825 	bl	8026804 <_dtoa_r>
 80257ba:	0004      	movs	r4, r0
 80257bc:	2d47      	cmp	r5, #71	@ 0x47
 80257be:	d11b      	bne.n	80257f8 <__cvt+0x90>
 80257c0:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80257c2:	07db      	lsls	r3, r3, #31
 80257c4:	d511      	bpl.n	80257ea <__cvt+0x82>
 80257c6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80257c8:	18c3      	adds	r3, r0, r3
 80257ca:	9307      	str	r3, [sp, #28]
 80257cc:	2200      	movs	r2, #0
 80257ce:	2300      	movs	r3, #0
 80257d0:	0030      	movs	r0, r6
 80257d2:	0039      	movs	r1, r7
 80257d4:	f7da fe6c 	bl	80004b0 <__aeabi_dcmpeq>
 80257d8:	2800      	cmp	r0, #0
 80257da:	d001      	beq.n	80257e0 <__cvt+0x78>
 80257dc:	9b07      	ldr	r3, [sp, #28]
 80257de:	9309      	str	r3, [sp, #36]	@ 0x24
 80257e0:	2230      	movs	r2, #48	@ 0x30
 80257e2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80257e4:	9907      	ldr	r1, [sp, #28]
 80257e6:	428b      	cmp	r3, r1
 80257e8:	d320      	bcc.n	802582c <__cvt+0xc4>
 80257ea:	0020      	movs	r0, r4
 80257ec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80257ee:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 80257f0:	1b1b      	subs	r3, r3, r4
 80257f2:	6013      	str	r3, [r2, #0]
 80257f4:	b00b      	add	sp, #44	@ 0x2c
 80257f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80257f8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80257fa:	18c3      	adds	r3, r0, r3
 80257fc:	9307      	str	r3, [sp, #28]
 80257fe:	2d46      	cmp	r5, #70	@ 0x46
 8025800:	d1e4      	bne.n	80257cc <__cvt+0x64>
 8025802:	7803      	ldrb	r3, [r0, #0]
 8025804:	2b30      	cmp	r3, #48	@ 0x30
 8025806:	d10c      	bne.n	8025822 <__cvt+0xba>
 8025808:	2200      	movs	r2, #0
 802580a:	2300      	movs	r3, #0
 802580c:	0030      	movs	r0, r6
 802580e:	0039      	movs	r1, r7
 8025810:	f7da fe4e 	bl	80004b0 <__aeabi_dcmpeq>
 8025814:	2800      	cmp	r0, #0
 8025816:	d104      	bne.n	8025822 <__cvt+0xba>
 8025818:	2301      	movs	r3, #1
 802581a:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 802581c:	1a9b      	subs	r3, r3, r2
 802581e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8025820:	6013      	str	r3, [r2, #0]
 8025822:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8025824:	9a07      	ldr	r2, [sp, #28]
 8025826:	681b      	ldr	r3, [r3, #0]
 8025828:	18d3      	adds	r3, r2, r3
 802582a:	e7ce      	b.n	80257ca <__cvt+0x62>
 802582c:	1c59      	adds	r1, r3, #1
 802582e:	9109      	str	r1, [sp, #36]	@ 0x24
 8025830:	701a      	strb	r2, [r3, #0]
 8025832:	e7d6      	b.n	80257e2 <__cvt+0x7a>

08025834 <__exponent>:
 8025834:	b5f0      	push	{r4, r5, r6, r7, lr}
 8025836:	232b      	movs	r3, #43	@ 0x2b
 8025838:	b085      	sub	sp, #20
 802583a:	0005      	movs	r5, r0
 802583c:	1e0c      	subs	r4, r1, #0
 802583e:	7002      	strb	r2, [r0, #0]
 8025840:	da01      	bge.n	8025846 <__exponent+0x12>
 8025842:	424c      	negs	r4, r1
 8025844:	3302      	adds	r3, #2
 8025846:	706b      	strb	r3, [r5, #1]
 8025848:	2c09      	cmp	r4, #9
 802584a:	dd2c      	ble.n	80258a6 <__exponent+0x72>
 802584c:	ab02      	add	r3, sp, #8
 802584e:	1dde      	adds	r6, r3, #7
 8025850:	0020      	movs	r0, r4
 8025852:	210a      	movs	r1, #10
 8025854:	f7da fe16 	bl	8000484 <__aeabi_idivmod>
 8025858:	0037      	movs	r7, r6
 802585a:	3130      	adds	r1, #48	@ 0x30
 802585c:	3e01      	subs	r6, #1
 802585e:	0020      	movs	r0, r4
 8025860:	7031      	strb	r1, [r6, #0]
 8025862:	210a      	movs	r1, #10
 8025864:	9401      	str	r4, [sp, #4]
 8025866:	f7da fd27 	bl	80002b8 <__divsi3>
 802586a:	9b01      	ldr	r3, [sp, #4]
 802586c:	0004      	movs	r4, r0
 802586e:	2b63      	cmp	r3, #99	@ 0x63
 8025870:	dcee      	bgt.n	8025850 <__exponent+0x1c>
 8025872:	1eba      	subs	r2, r7, #2
 8025874:	1ca8      	adds	r0, r5, #2
 8025876:	0001      	movs	r1, r0
 8025878:	0013      	movs	r3, r2
 802587a:	3430      	adds	r4, #48	@ 0x30
 802587c:	7014      	strb	r4, [r2, #0]
 802587e:	ac02      	add	r4, sp, #8
 8025880:	3407      	adds	r4, #7
 8025882:	429c      	cmp	r4, r3
 8025884:	d80a      	bhi.n	802589c <__exponent+0x68>
 8025886:	2300      	movs	r3, #0
 8025888:	4294      	cmp	r4, r2
 802588a:	d303      	bcc.n	8025894 <__exponent+0x60>
 802588c:	3309      	adds	r3, #9
 802588e:	aa02      	add	r2, sp, #8
 8025890:	189b      	adds	r3, r3, r2
 8025892:	1bdb      	subs	r3, r3, r7
 8025894:	18c0      	adds	r0, r0, r3
 8025896:	1b40      	subs	r0, r0, r5
 8025898:	b005      	add	sp, #20
 802589a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802589c:	781c      	ldrb	r4, [r3, #0]
 802589e:	3301      	adds	r3, #1
 80258a0:	700c      	strb	r4, [r1, #0]
 80258a2:	3101      	adds	r1, #1
 80258a4:	e7eb      	b.n	802587e <__exponent+0x4a>
 80258a6:	2330      	movs	r3, #48	@ 0x30
 80258a8:	18e4      	adds	r4, r4, r3
 80258aa:	70ab      	strb	r3, [r5, #2]
 80258ac:	1d28      	adds	r0, r5, #4
 80258ae:	70ec      	strb	r4, [r5, #3]
 80258b0:	e7f1      	b.n	8025896 <__exponent+0x62>
	...

080258b4 <_printf_float>:
 80258b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80258b6:	b097      	sub	sp, #92	@ 0x5c
 80258b8:	000d      	movs	r5, r1
 80258ba:	920a      	str	r2, [sp, #40]	@ 0x28
 80258bc:	9c1c      	ldr	r4, [sp, #112]	@ 0x70
 80258be:	930b      	str	r3, [sp, #44]	@ 0x2c
 80258c0:	9009      	str	r0, [sp, #36]	@ 0x24
 80258c2:	f000 fe7f 	bl	80265c4 <_localeconv_r>
 80258c6:	6803      	ldr	r3, [r0, #0]
 80258c8:	0018      	movs	r0, r3
 80258ca:	930d      	str	r3, [sp, #52]	@ 0x34
 80258cc:	f7da fc4e 	bl	800016c <strlen>
 80258d0:	2300      	movs	r3, #0
 80258d2:	900f      	str	r0, [sp, #60]	@ 0x3c
 80258d4:	9314      	str	r3, [sp, #80]	@ 0x50
 80258d6:	7e2b      	ldrb	r3, [r5, #24]
 80258d8:	2207      	movs	r2, #7
 80258da:	930c      	str	r3, [sp, #48]	@ 0x30
 80258dc:	682b      	ldr	r3, [r5, #0]
 80258de:	930e      	str	r3, [sp, #56]	@ 0x38
 80258e0:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80258e2:	6823      	ldr	r3, [r4, #0]
 80258e4:	05c9      	lsls	r1, r1, #23
 80258e6:	d545      	bpl.n	8025974 <_printf_float+0xc0>
 80258e8:	189b      	adds	r3, r3, r2
 80258ea:	4393      	bics	r3, r2
 80258ec:	001a      	movs	r2, r3
 80258ee:	3208      	adds	r2, #8
 80258f0:	6022      	str	r2, [r4, #0]
 80258f2:	2201      	movs	r2, #1
 80258f4:	681e      	ldr	r6, [r3, #0]
 80258f6:	685f      	ldr	r7, [r3, #4]
 80258f8:	007b      	lsls	r3, r7, #1
 80258fa:	085b      	lsrs	r3, r3, #1
 80258fc:	9311      	str	r3, [sp, #68]	@ 0x44
 80258fe:	9610      	str	r6, [sp, #64]	@ 0x40
 8025900:	64ae      	str	r6, [r5, #72]	@ 0x48
 8025902:	64ef      	str	r7, [r5, #76]	@ 0x4c
 8025904:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8025906:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8025908:	4ba7      	ldr	r3, [pc, #668]	@ (8025ba8 <_printf_float+0x2f4>)
 802590a:	4252      	negs	r2, r2
 802590c:	f7dd ff12 	bl	8003734 <__aeabi_dcmpun>
 8025910:	2800      	cmp	r0, #0
 8025912:	d131      	bne.n	8025978 <_printf_float+0xc4>
 8025914:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8025916:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8025918:	2201      	movs	r2, #1
 802591a:	4ba3      	ldr	r3, [pc, #652]	@ (8025ba8 <_printf_float+0x2f4>)
 802591c:	4252      	negs	r2, r2
 802591e:	f7da fdd7 	bl	80004d0 <__aeabi_dcmple>
 8025922:	2800      	cmp	r0, #0
 8025924:	d128      	bne.n	8025978 <_printf_float+0xc4>
 8025926:	2200      	movs	r2, #0
 8025928:	2300      	movs	r3, #0
 802592a:	0030      	movs	r0, r6
 802592c:	0039      	movs	r1, r7
 802592e:	f7da fdc5 	bl	80004bc <__aeabi_dcmplt>
 8025932:	2800      	cmp	r0, #0
 8025934:	d003      	beq.n	802593e <_printf_float+0x8a>
 8025936:	002b      	movs	r3, r5
 8025938:	222d      	movs	r2, #45	@ 0x2d
 802593a:	3343      	adds	r3, #67	@ 0x43
 802593c:	701a      	strb	r2, [r3, #0]
 802593e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8025940:	4f9a      	ldr	r7, [pc, #616]	@ (8025bac <_printf_float+0x2f8>)
 8025942:	2b47      	cmp	r3, #71	@ 0x47
 8025944:	d800      	bhi.n	8025948 <_printf_float+0x94>
 8025946:	4f9a      	ldr	r7, [pc, #616]	@ (8025bb0 <_printf_float+0x2fc>)
 8025948:	2303      	movs	r3, #3
 802594a:	2400      	movs	r4, #0
 802594c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 802594e:	612b      	str	r3, [r5, #16]
 8025950:	3301      	adds	r3, #1
 8025952:	439a      	bics	r2, r3
 8025954:	602a      	str	r2, [r5, #0]
 8025956:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8025958:	0029      	movs	r1, r5
 802595a:	9300      	str	r3, [sp, #0]
 802595c:	9809      	ldr	r0, [sp, #36]	@ 0x24
 802595e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8025960:	aa15      	add	r2, sp, #84	@ 0x54
 8025962:	f000 f9e5 	bl	8025d30 <_printf_common>
 8025966:	3001      	adds	r0, #1
 8025968:	d000      	beq.n	802596c <_printf_float+0xb8>
 802596a:	e09e      	b.n	8025aaa <_printf_float+0x1f6>
 802596c:	2001      	movs	r0, #1
 802596e:	4240      	negs	r0, r0
 8025970:	b017      	add	sp, #92	@ 0x5c
 8025972:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8025974:	3307      	adds	r3, #7
 8025976:	e7b8      	b.n	80258ea <_printf_float+0x36>
 8025978:	0032      	movs	r2, r6
 802597a:	003b      	movs	r3, r7
 802597c:	0030      	movs	r0, r6
 802597e:	0039      	movs	r1, r7
 8025980:	f7dd fed8 	bl	8003734 <__aeabi_dcmpun>
 8025984:	2800      	cmp	r0, #0
 8025986:	d00b      	beq.n	80259a0 <_printf_float+0xec>
 8025988:	2f00      	cmp	r7, #0
 802598a:	da03      	bge.n	8025994 <_printf_float+0xe0>
 802598c:	002b      	movs	r3, r5
 802598e:	222d      	movs	r2, #45	@ 0x2d
 8025990:	3343      	adds	r3, #67	@ 0x43
 8025992:	701a      	strb	r2, [r3, #0]
 8025994:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8025996:	4f87      	ldr	r7, [pc, #540]	@ (8025bb4 <_printf_float+0x300>)
 8025998:	2b47      	cmp	r3, #71	@ 0x47
 802599a:	d8d5      	bhi.n	8025948 <_printf_float+0x94>
 802599c:	4f86      	ldr	r7, [pc, #536]	@ (8025bb8 <_printf_float+0x304>)
 802599e:	e7d3      	b.n	8025948 <_printf_float+0x94>
 80259a0:	2220      	movs	r2, #32
 80259a2:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 80259a4:	686b      	ldr	r3, [r5, #4]
 80259a6:	4394      	bics	r4, r2
 80259a8:	1c5a      	adds	r2, r3, #1
 80259aa:	d146      	bne.n	8025a3a <_printf_float+0x186>
 80259ac:	3307      	adds	r3, #7
 80259ae:	606b      	str	r3, [r5, #4]
 80259b0:	2380      	movs	r3, #128	@ 0x80
 80259b2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80259b4:	00db      	lsls	r3, r3, #3
 80259b6:	4313      	orrs	r3, r2
 80259b8:	2200      	movs	r2, #0
 80259ba:	602b      	str	r3, [r5, #0]
 80259bc:	9206      	str	r2, [sp, #24]
 80259be:	aa14      	add	r2, sp, #80	@ 0x50
 80259c0:	9205      	str	r2, [sp, #20]
 80259c2:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80259c4:	a90a      	add	r1, sp, #40	@ 0x28
 80259c6:	9204      	str	r2, [sp, #16]
 80259c8:	aa13      	add	r2, sp, #76	@ 0x4c
 80259ca:	9203      	str	r2, [sp, #12]
 80259cc:	2223      	movs	r2, #35	@ 0x23
 80259ce:	1852      	adds	r2, r2, r1
 80259d0:	9202      	str	r2, [sp, #8]
 80259d2:	9301      	str	r3, [sp, #4]
 80259d4:	686b      	ldr	r3, [r5, #4]
 80259d6:	0032      	movs	r2, r6
 80259d8:	9300      	str	r3, [sp, #0]
 80259da:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80259dc:	003b      	movs	r3, r7
 80259de:	f7ff fec3 	bl	8025768 <__cvt>
 80259e2:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80259e4:	0007      	movs	r7, r0
 80259e6:	2c47      	cmp	r4, #71	@ 0x47
 80259e8:	d12d      	bne.n	8025a46 <_printf_float+0x192>
 80259ea:	1cd3      	adds	r3, r2, #3
 80259ec:	db02      	blt.n	80259f4 <_printf_float+0x140>
 80259ee:	686b      	ldr	r3, [r5, #4]
 80259f0:	429a      	cmp	r2, r3
 80259f2:	dd47      	ble.n	8025a84 <_printf_float+0x1d0>
 80259f4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80259f6:	3b02      	subs	r3, #2
 80259f8:	b2db      	uxtb	r3, r3
 80259fa:	930c      	str	r3, [sp, #48]	@ 0x30
 80259fc:	0028      	movs	r0, r5
 80259fe:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8025a00:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8025a02:	3901      	subs	r1, #1
 8025a04:	3050      	adds	r0, #80	@ 0x50
 8025a06:	9113      	str	r1, [sp, #76]	@ 0x4c
 8025a08:	f7ff ff14 	bl	8025834 <__exponent>
 8025a0c:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8025a0e:	0004      	movs	r4, r0
 8025a10:	1813      	adds	r3, r2, r0
 8025a12:	612b      	str	r3, [r5, #16]
 8025a14:	2a01      	cmp	r2, #1
 8025a16:	dc02      	bgt.n	8025a1e <_printf_float+0x16a>
 8025a18:	682a      	ldr	r2, [r5, #0]
 8025a1a:	07d2      	lsls	r2, r2, #31
 8025a1c:	d501      	bpl.n	8025a22 <_printf_float+0x16e>
 8025a1e:	3301      	adds	r3, #1
 8025a20:	612b      	str	r3, [r5, #16]
 8025a22:	2323      	movs	r3, #35	@ 0x23
 8025a24:	aa0a      	add	r2, sp, #40	@ 0x28
 8025a26:	189b      	adds	r3, r3, r2
 8025a28:	781b      	ldrb	r3, [r3, #0]
 8025a2a:	2b00      	cmp	r3, #0
 8025a2c:	d100      	bne.n	8025a30 <_printf_float+0x17c>
 8025a2e:	e792      	b.n	8025956 <_printf_float+0xa2>
 8025a30:	002b      	movs	r3, r5
 8025a32:	222d      	movs	r2, #45	@ 0x2d
 8025a34:	3343      	adds	r3, #67	@ 0x43
 8025a36:	701a      	strb	r2, [r3, #0]
 8025a38:	e78d      	b.n	8025956 <_printf_float+0xa2>
 8025a3a:	2c47      	cmp	r4, #71	@ 0x47
 8025a3c:	d1b8      	bne.n	80259b0 <_printf_float+0xfc>
 8025a3e:	2b00      	cmp	r3, #0
 8025a40:	d1b6      	bne.n	80259b0 <_printf_float+0xfc>
 8025a42:	3301      	adds	r3, #1
 8025a44:	e7b3      	b.n	80259ae <_printf_float+0xfa>
 8025a46:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8025a48:	2b65      	cmp	r3, #101	@ 0x65
 8025a4a:	d9d7      	bls.n	80259fc <_printf_float+0x148>
 8025a4c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8025a4e:	2b66      	cmp	r3, #102	@ 0x66
 8025a50:	d11a      	bne.n	8025a88 <_printf_float+0x1d4>
 8025a52:	686b      	ldr	r3, [r5, #4]
 8025a54:	2a00      	cmp	r2, #0
 8025a56:	dd09      	ble.n	8025a6c <_printf_float+0x1b8>
 8025a58:	612a      	str	r2, [r5, #16]
 8025a5a:	2b00      	cmp	r3, #0
 8025a5c:	d102      	bne.n	8025a64 <_printf_float+0x1b0>
 8025a5e:	6829      	ldr	r1, [r5, #0]
 8025a60:	07c9      	lsls	r1, r1, #31
 8025a62:	d50b      	bpl.n	8025a7c <_printf_float+0x1c8>
 8025a64:	3301      	adds	r3, #1
 8025a66:	189b      	adds	r3, r3, r2
 8025a68:	612b      	str	r3, [r5, #16]
 8025a6a:	e007      	b.n	8025a7c <_printf_float+0x1c8>
 8025a6c:	2b00      	cmp	r3, #0
 8025a6e:	d103      	bne.n	8025a78 <_printf_float+0x1c4>
 8025a70:	2201      	movs	r2, #1
 8025a72:	6829      	ldr	r1, [r5, #0]
 8025a74:	4211      	tst	r1, r2
 8025a76:	d000      	beq.n	8025a7a <_printf_float+0x1c6>
 8025a78:	1c9a      	adds	r2, r3, #2
 8025a7a:	612a      	str	r2, [r5, #16]
 8025a7c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8025a7e:	2400      	movs	r4, #0
 8025a80:	65ab      	str	r3, [r5, #88]	@ 0x58
 8025a82:	e7ce      	b.n	8025a22 <_printf_float+0x16e>
 8025a84:	2367      	movs	r3, #103	@ 0x67
 8025a86:	930c      	str	r3, [sp, #48]	@ 0x30
 8025a88:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8025a8a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8025a8c:	4299      	cmp	r1, r3
 8025a8e:	db06      	blt.n	8025a9e <_printf_float+0x1ea>
 8025a90:	682b      	ldr	r3, [r5, #0]
 8025a92:	6129      	str	r1, [r5, #16]
 8025a94:	07db      	lsls	r3, r3, #31
 8025a96:	d5f1      	bpl.n	8025a7c <_printf_float+0x1c8>
 8025a98:	3101      	adds	r1, #1
 8025a9a:	6129      	str	r1, [r5, #16]
 8025a9c:	e7ee      	b.n	8025a7c <_printf_float+0x1c8>
 8025a9e:	2201      	movs	r2, #1
 8025aa0:	2900      	cmp	r1, #0
 8025aa2:	dce0      	bgt.n	8025a66 <_printf_float+0x1b2>
 8025aa4:	1892      	adds	r2, r2, r2
 8025aa6:	1a52      	subs	r2, r2, r1
 8025aa8:	e7dd      	b.n	8025a66 <_printf_float+0x1b2>
 8025aaa:	682a      	ldr	r2, [r5, #0]
 8025aac:	0553      	lsls	r3, r2, #21
 8025aae:	d408      	bmi.n	8025ac2 <_printf_float+0x20e>
 8025ab0:	692b      	ldr	r3, [r5, #16]
 8025ab2:	003a      	movs	r2, r7
 8025ab4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8025ab6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8025ab8:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8025aba:	47a0      	blx	r4
 8025abc:	3001      	adds	r0, #1
 8025abe:	d129      	bne.n	8025b14 <_printf_float+0x260>
 8025ac0:	e754      	b.n	802596c <_printf_float+0xb8>
 8025ac2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8025ac4:	2b65      	cmp	r3, #101	@ 0x65
 8025ac6:	d800      	bhi.n	8025aca <_printf_float+0x216>
 8025ac8:	e0db      	b.n	8025c82 <_printf_float+0x3ce>
 8025aca:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 8025acc:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 8025ace:	2200      	movs	r2, #0
 8025ad0:	2300      	movs	r3, #0
 8025ad2:	f7da fced 	bl	80004b0 <__aeabi_dcmpeq>
 8025ad6:	2800      	cmp	r0, #0
 8025ad8:	d033      	beq.n	8025b42 <_printf_float+0x28e>
 8025ada:	2301      	movs	r3, #1
 8025adc:	4a37      	ldr	r2, [pc, #220]	@ (8025bbc <_printf_float+0x308>)
 8025ade:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8025ae0:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8025ae2:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8025ae4:	47a0      	blx	r4
 8025ae6:	3001      	adds	r0, #1
 8025ae8:	d100      	bne.n	8025aec <_printf_float+0x238>
 8025aea:	e73f      	b.n	802596c <_printf_float+0xb8>
 8025aec:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 8025aee:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8025af0:	42b3      	cmp	r3, r6
 8025af2:	db02      	blt.n	8025afa <_printf_float+0x246>
 8025af4:	682b      	ldr	r3, [r5, #0]
 8025af6:	07db      	lsls	r3, r3, #31
 8025af8:	d50c      	bpl.n	8025b14 <_printf_float+0x260>
 8025afa:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8025afc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8025afe:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8025b00:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8025b02:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8025b04:	47a0      	blx	r4
 8025b06:	2400      	movs	r4, #0
 8025b08:	3001      	adds	r0, #1
 8025b0a:	d100      	bne.n	8025b0e <_printf_float+0x25a>
 8025b0c:	e72e      	b.n	802596c <_printf_float+0xb8>
 8025b0e:	1e73      	subs	r3, r6, #1
 8025b10:	42a3      	cmp	r3, r4
 8025b12:	dc0a      	bgt.n	8025b2a <_printf_float+0x276>
 8025b14:	682b      	ldr	r3, [r5, #0]
 8025b16:	079b      	lsls	r3, r3, #30
 8025b18:	d500      	bpl.n	8025b1c <_printf_float+0x268>
 8025b1a:	e106      	b.n	8025d2a <_printf_float+0x476>
 8025b1c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8025b1e:	68e8      	ldr	r0, [r5, #12]
 8025b20:	4298      	cmp	r0, r3
 8025b22:	db00      	blt.n	8025b26 <_printf_float+0x272>
 8025b24:	e724      	b.n	8025970 <_printf_float+0xbc>
 8025b26:	0018      	movs	r0, r3
 8025b28:	e722      	b.n	8025970 <_printf_float+0xbc>
 8025b2a:	002a      	movs	r2, r5
 8025b2c:	2301      	movs	r3, #1
 8025b2e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8025b30:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8025b32:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8025b34:	321a      	adds	r2, #26
 8025b36:	47b8      	blx	r7
 8025b38:	3001      	adds	r0, #1
 8025b3a:	d100      	bne.n	8025b3e <_printf_float+0x28a>
 8025b3c:	e716      	b.n	802596c <_printf_float+0xb8>
 8025b3e:	3401      	adds	r4, #1
 8025b40:	e7e5      	b.n	8025b0e <_printf_float+0x25a>
 8025b42:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8025b44:	2b00      	cmp	r3, #0
 8025b46:	dc3b      	bgt.n	8025bc0 <_printf_float+0x30c>
 8025b48:	2301      	movs	r3, #1
 8025b4a:	4a1c      	ldr	r2, [pc, #112]	@ (8025bbc <_printf_float+0x308>)
 8025b4c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8025b4e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8025b50:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8025b52:	47a0      	blx	r4
 8025b54:	3001      	adds	r0, #1
 8025b56:	d100      	bne.n	8025b5a <_printf_float+0x2a6>
 8025b58:	e708      	b.n	802596c <_printf_float+0xb8>
 8025b5a:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 8025b5c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8025b5e:	4333      	orrs	r3, r6
 8025b60:	d102      	bne.n	8025b68 <_printf_float+0x2b4>
 8025b62:	682b      	ldr	r3, [r5, #0]
 8025b64:	07db      	lsls	r3, r3, #31
 8025b66:	d5d5      	bpl.n	8025b14 <_printf_float+0x260>
 8025b68:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8025b6a:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8025b6c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8025b6e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8025b70:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8025b72:	47a0      	blx	r4
 8025b74:	2300      	movs	r3, #0
 8025b76:	3001      	adds	r0, #1
 8025b78:	d100      	bne.n	8025b7c <_printf_float+0x2c8>
 8025b7a:	e6f7      	b.n	802596c <_printf_float+0xb8>
 8025b7c:	930c      	str	r3, [sp, #48]	@ 0x30
 8025b7e:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8025b80:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8025b82:	425b      	negs	r3, r3
 8025b84:	4293      	cmp	r3, r2
 8025b86:	dc01      	bgt.n	8025b8c <_printf_float+0x2d8>
 8025b88:	0033      	movs	r3, r6
 8025b8a:	e792      	b.n	8025ab2 <_printf_float+0x1fe>
 8025b8c:	002a      	movs	r2, r5
 8025b8e:	2301      	movs	r3, #1
 8025b90:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8025b92:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8025b94:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8025b96:	321a      	adds	r2, #26
 8025b98:	47a0      	blx	r4
 8025b9a:	3001      	adds	r0, #1
 8025b9c:	d100      	bne.n	8025ba0 <_printf_float+0x2ec>
 8025b9e:	e6e5      	b.n	802596c <_printf_float+0xb8>
 8025ba0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8025ba2:	3301      	adds	r3, #1
 8025ba4:	e7ea      	b.n	8025b7c <_printf_float+0x2c8>
 8025ba6:	46c0      	nop			@ (mov r8, r8)
 8025ba8:	7fefffff 	.word	0x7fefffff
 8025bac:	0802ea1e 	.word	0x0802ea1e
 8025bb0:	0802ea1a 	.word	0x0802ea1a
 8025bb4:	0802ea26 	.word	0x0802ea26
 8025bb8:	0802ea22 	.word	0x0802ea22
 8025bbc:	0802ea2a 	.word	0x0802ea2a
 8025bc0:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8025bc2:	6dae      	ldr	r6, [r5, #88]	@ 0x58
 8025bc4:	930c      	str	r3, [sp, #48]	@ 0x30
 8025bc6:	429e      	cmp	r6, r3
 8025bc8:	dd00      	ble.n	8025bcc <_printf_float+0x318>
 8025bca:	001e      	movs	r6, r3
 8025bcc:	2e00      	cmp	r6, #0
 8025bce:	dc31      	bgt.n	8025c34 <_printf_float+0x380>
 8025bd0:	43f3      	mvns	r3, r6
 8025bd2:	2400      	movs	r4, #0
 8025bd4:	17db      	asrs	r3, r3, #31
 8025bd6:	4033      	ands	r3, r6
 8025bd8:	930e      	str	r3, [sp, #56]	@ 0x38
 8025bda:	6dae      	ldr	r6, [r5, #88]	@ 0x58
 8025bdc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8025bde:	1af3      	subs	r3, r6, r3
 8025be0:	42a3      	cmp	r3, r4
 8025be2:	dc30      	bgt.n	8025c46 <_printf_float+0x392>
 8025be4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8025be6:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8025be8:	429a      	cmp	r2, r3
 8025bea:	dc38      	bgt.n	8025c5e <_printf_float+0x3aa>
 8025bec:	682b      	ldr	r3, [r5, #0]
 8025bee:	07db      	lsls	r3, r3, #31
 8025bf0:	d435      	bmi.n	8025c5e <_printf_float+0x3aa>
 8025bf2:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8025bf4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8025bf6:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8025bf8:	1b9b      	subs	r3, r3, r6
 8025bfa:	1b14      	subs	r4, r2, r4
 8025bfc:	429c      	cmp	r4, r3
 8025bfe:	dd00      	ble.n	8025c02 <_printf_float+0x34e>
 8025c00:	001c      	movs	r4, r3
 8025c02:	2c00      	cmp	r4, #0
 8025c04:	dc34      	bgt.n	8025c70 <_printf_float+0x3bc>
 8025c06:	43e3      	mvns	r3, r4
 8025c08:	2600      	movs	r6, #0
 8025c0a:	17db      	asrs	r3, r3, #31
 8025c0c:	401c      	ands	r4, r3
 8025c0e:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8025c10:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8025c12:	1ad3      	subs	r3, r2, r3
 8025c14:	1b1b      	subs	r3, r3, r4
 8025c16:	42b3      	cmp	r3, r6
 8025c18:	dc00      	bgt.n	8025c1c <_printf_float+0x368>
 8025c1a:	e77b      	b.n	8025b14 <_printf_float+0x260>
 8025c1c:	002a      	movs	r2, r5
 8025c1e:	2301      	movs	r3, #1
 8025c20:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8025c22:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8025c24:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8025c26:	321a      	adds	r2, #26
 8025c28:	47b8      	blx	r7
 8025c2a:	3001      	adds	r0, #1
 8025c2c:	d100      	bne.n	8025c30 <_printf_float+0x37c>
 8025c2e:	e69d      	b.n	802596c <_printf_float+0xb8>
 8025c30:	3601      	adds	r6, #1
 8025c32:	e7ec      	b.n	8025c0e <_printf_float+0x35a>
 8025c34:	0033      	movs	r3, r6
 8025c36:	003a      	movs	r2, r7
 8025c38:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8025c3a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8025c3c:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8025c3e:	47a0      	blx	r4
 8025c40:	3001      	adds	r0, #1
 8025c42:	d1c5      	bne.n	8025bd0 <_printf_float+0x31c>
 8025c44:	e692      	b.n	802596c <_printf_float+0xb8>
 8025c46:	002a      	movs	r2, r5
 8025c48:	2301      	movs	r3, #1
 8025c4a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8025c4c:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8025c4e:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8025c50:	321a      	adds	r2, #26
 8025c52:	47b0      	blx	r6
 8025c54:	3001      	adds	r0, #1
 8025c56:	d100      	bne.n	8025c5a <_printf_float+0x3a6>
 8025c58:	e688      	b.n	802596c <_printf_float+0xb8>
 8025c5a:	3401      	adds	r4, #1
 8025c5c:	e7bd      	b.n	8025bda <_printf_float+0x326>
 8025c5e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8025c60:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8025c62:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8025c64:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8025c66:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8025c68:	47a0      	blx	r4
 8025c6a:	3001      	adds	r0, #1
 8025c6c:	d1c1      	bne.n	8025bf2 <_printf_float+0x33e>
 8025c6e:	e67d      	b.n	802596c <_printf_float+0xb8>
 8025c70:	19ba      	adds	r2, r7, r6
 8025c72:	0023      	movs	r3, r4
 8025c74:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8025c76:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8025c78:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8025c7a:	47b0      	blx	r6
 8025c7c:	3001      	adds	r0, #1
 8025c7e:	d1c2      	bne.n	8025c06 <_printf_float+0x352>
 8025c80:	e674      	b.n	802596c <_printf_float+0xb8>
 8025c82:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8025c84:	930c      	str	r3, [sp, #48]	@ 0x30
 8025c86:	2b01      	cmp	r3, #1
 8025c88:	dc02      	bgt.n	8025c90 <_printf_float+0x3dc>
 8025c8a:	2301      	movs	r3, #1
 8025c8c:	421a      	tst	r2, r3
 8025c8e:	d039      	beq.n	8025d04 <_printf_float+0x450>
 8025c90:	2301      	movs	r3, #1
 8025c92:	003a      	movs	r2, r7
 8025c94:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8025c96:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8025c98:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8025c9a:	47b0      	blx	r6
 8025c9c:	3001      	adds	r0, #1
 8025c9e:	d100      	bne.n	8025ca2 <_printf_float+0x3ee>
 8025ca0:	e664      	b.n	802596c <_printf_float+0xb8>
 8025ca2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8025ca4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8025ca6:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8025ca8:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8025caa:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8025cac:	47b0      	blx	r6
 8025cae:	3001      	adds	r0, #1
 8025cb0:	d100      	bne.n	8025cb4 <_printf_float+0x400>
 8025cb2:	e65b      	b.n	802596c <_printf_float+0xb8>
 8025cb4:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 8025cb6:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 8025cb8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8025cba:	2200      	movs	r2, #0
 8025cbc:	3b01      	subs	r3, #1
 8025cbe:	930c      	str	r3, [sp, #48]	@ 0x30
 8025cc0:	2300      	movs	r3, #0
 8025cc2:	f7da fbf5 	bl	80004b0 <__aeabi_dcmpeq>
 8025cc6:	2800      	cmp	r0, #0
 8025cc8:	d11a      	bne.n	8025d00 <_printf_float+0x44c>
 8025cca:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8025ccc:	1c7a      	adds	r2, r7, #1
 8025cce:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8025cd0:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8025cd2:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8025cd4:	47b0      	blx	r6
 8025cd6:	3001      	adds	r0, #1
 8025cd8:	d10e      	bne.n	8025cf8 <_printf_float+0x444>
 8025cda:	e647      	b.n	802596c <_printf_float+0xb8>
 8025cdc:	002a      	movs	r2, r5
 8025cde:	2301      	movs	r3, #1
 8025ce0:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8025ce2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8025ce4:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8025ce6:	321a      	adds	r2, #26
 8025ce8:	47b8      	blx	r7
 8025cea:	3001      	adds	r0, #1
 8025cec:	d100      	bne.n	8025cf0 <_printf_float+0x43c>
 8025cee:	e63d      	b.n	802596c <_printf_float+0xb8>
 8025cf0:	3601      	adds	r6, #1
 8025cf2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8025cf4:	429e      	cmp	r6, r3
 8025cf6:	dbf1      	blt.n	8025cdc <_printf_float+0x428>
 8025cf8:	002a      	movs	r2, r5
 8025cfa:	0023      	movs	r3, r4
 8025cfc:	3250      	adds	r2, #80	@ 0x50
 8025cfe:	e6d9      	b.n	8025ab4 <_printf_float+0x200>
 8025d00:	2600      	movs	r6, #0
 8025d02:	e7f6      	b.n	8025cf2 <_printf_float+0x43e>
 8025d04:	003a      	movs	r2, r7
 8025d06:	e7e2      	b.n	8025cce <_printf_float+0x41a>
 8025d08:	002a      	movs	r2, r5
 8025d0a:	2301      	movs	r3, #1
 8025d0c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8025d0e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8025d10:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8025d12:	3219      	adds	r2, #25
 8025d14:	47b0      	blx	r6
 8025d16:	3001      	adds	r0, #1
 8025d18:	d100      	bne.n	8025d1c <_printf_float+0x468>
 8025d1a:	e627      	b.n	802596c <_printf_float+0xb8>
 8025d1c:	3401      	adds	r4, #1
 8025d1e:	68eb      	ldr	r3, [r5, #12]
 8025d20:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8025d22:	1a9b      	subs	r3, r3, r2
 8025d24:	42a3      	cmp	r3, r4
 8025d26:	dcef      	bgt.n	8025d08 <_printf_float+0x454>
 8025d28:	e6f8      	b.n	8025b1c <_printf_float+0x268>
 8025d2a:	2400      	movs	r4, #0
 8025d2c:	e7f7      	b.n	8025d1e <_printf_float+0x46a>
 8025d2e:	46c0      	nop			@ (mov r8, r8)

08025d30 <_printf_common>:
 8025d30:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8025d32:	0016      	movs	r6, r2
 8025d34:	9301      	str	r3, [sp, #4]
 8025d36:	688a      	ldr	r2, [r1, #8]
 8025d38:	690b      	ldr	r3, [r1, #16]
 8025d3a:	000c      	movs	r4, r1
 8025d3c:	9000      	str	r0, [sp, #0]
 8025d3e:	4293      	cmp	r3, r2
 8025d40:	da00      	bge.n	8025d44 <_printf_common+0x14>
 8025d42:	0013      	movs	r3, r2
 8025d44:	0022      	movs	r2, r4
 8025d46:	6033      	str	r3, [r6, #0]
 8025d48:	3243      	adds	r2, #67	@ 0x43
 8025d4a:	7812      	ldrb	r2, [r2, #0]
 8025d4c:	2a00      	cmp	r2, #0
 8025d4e:	d001      	beq.n	8025d54 <_printf_common+0x24>
 8025d50:	3301      	adds	r3, #1
 8025d52:	6033      	str	r3, [r6, #0]
 8025d54:	6823      	ldr	r3, [r4, #0]
 8025d56:	069b      	lsls	r3, r3, #26
 8025d58:	d502      	bpl.n	8025d60 <_printf_common+0x30>
 8025d5a:	6833      	ldr	r3, [r6, #0]
 8025d5c:	3302      	adds	r3, #2
 8025d5e:	6033      	str	r3, [r6, #0]
 8025d60:	6822      	ldr	r2, [r4, #0]
 8025d62:	2306      	movs	r3, #6
 8025d64:	0015      	movs	r5, r2
 8025d66:	401d      	ands	r5, r3
 8025d68:	421a      	tst	r2, r3
 8025d6a:	d027      	beq.n	8025dbc <_printf_common+0x8c>
 8025d6c:	0023      	movs	r3, r4
 8025d6e:	3343      	adds	r3, #67	@ 0x43
 8025d70:	781b      	ldrb	r3, [r3, #0]
 8025d72:	1e5a      	subs	r2, r3, #1
 8025d74:	4193      	sbcs	r3, r2
 8025d76:	6822      	ldr	r2, [r4, #0]
 8025d78:	0692      	lsls	r2, r2, #26
 8025d7a:	d430      	bmi.n	8025dde <_printf_common+0xae>
 8025d7c:	0022      	movs	r2, r4
 8025d7e:	9901      	ldr	r1, [sp, #4]
 8025d80:	9800      	ldr	r0, [sp, #0]
 8025d82:	9d08      	ldr	r5, [sp, #32]
 8025d84:	3243      	adds	r2, #67	@ 0x43
 8025d86:	47a8      	blx	r5
 8025d88:	3001      	adds	r0, #1
 8025d8a:	d025      	beq.n	8025dd8 <_printf_common+0xa8>
 8025d8c:	2206      	movs	r2, #6
 8025d8e:	6823      	ldr	r3, [r4, #0]
 8025d90:	2500      	movs	r5, #0
 8025d92:	4013      	ands	r3, r2
 8025d94:	2b04      	cmp	r3, #4
 8025d96:	d105      	bne.n	8025da4 <_printf_common+0x74>
 8025d98:	6833      	ldr	r3, [r6, #0]
 8025d9a:	68e5      	ldr	r5, [r4, #12]
 8025d9c:	1aed      	subs	r5, r5, r3
 8025d9e:	43eb      	mvns	r3, r5
 8025da0:	17db      	asrs	r3, r3, #31
 8025da2:	401d      	ands	r5, r3
 8025da4:	68a3      	ldr	r3, [r4, #8]
 8025da6:	6922      	ldr	r2, [r4, #16]
 8025da8:	4293      	cmp	r3, r2
 8025daa:	dd01      	ble.n	8025db0 <_printf_common+0x80>
 8025dac:	1a9b      	subs	r3, r3, r2
 8025dae:	18ed      	adds	r5, r5, r3
 8025db0:	2600      	movs	r6, #0
 8025db2:	42b5      	cmp	r5, r6
 8025db4:	d120      	bne.n	8025df8 <_printf_common+0xc8>
 8025db6:	2000      	movs	r0, #0
 8025db8:	e010      	b.n	8025ddc <_printf_common+0xac>
 8025dba:	3501      	adds	r5, #1
 8025dbc:	68e3      	ldr	r3, [r4, #12]
 8025dbe:	6832      	ldr	r2, [r6, #0]
 8025dc0:	1a9b      	subs	r3, r3, r2
 8025dc2:	42ab      	cmp	r3, r5
 8025dc4:	ddd2      	ble.n	8025d6c <_printf_common+0x3c>
 8025dc6:	0022      	movs	r2, r4
 8025dc8:	2301      	movs	r3, #1
 8025dca:	9901      	ldr	r1, [sp, #4]
 8025dcc:	9800      	ldr	r0, [sp, #0]
 8025dce:	9f08      	ldr	r7, [sp, #32]
 8025dd0:	3219      	adds	r2, #25
 8025dd2:	47b8      	blx	r7
 8025dd4:	3001      	adds	r0, #1
 8025dd6:	d1f0      	bne.n	8025dba <_printf_common+0x8a>
 8025dd8:	2001      	movs	r0, #1
 8025dda:	4240      	negs	r0, r0
 8025ddc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8025dde:	2030      	movs	r0, #48	@ 0x30
 8025de0:	18e1      	adds	r1, r4, r3
 8025de2:	3143      	adds	r1, #67	@ 0x43
 8025de4:	7008      	strb	r0, [r1, #0]
 8025de6:	0021      	movs	r1, r4
 8025de8:	1c5a      	adds	r2, r3, #1
 8025dea:	3145      	adds	r1, #69	@ 0x45
 8025dec:	7809      	ldrb	r1, [r1, #0]
 8025dee:	18a2      	adds	r2, r4, r2
 8025df0:	3243      	adds	r2, #67	@ 0x43
 8025df2:	3302      	adds	r3, #2
 8025df4:	7011      	strb	r1, [r2, #0]
 8025df6:	e7c1      	b.n	8025d7c <_printf_common+0x4c>
 8025df8:	0022      	movs	r2, r4
 8025dfa:	2301      	movs	r3, #1
 8025dfc:	9901      	ldr	r1, [sp, #4]
 8025dfe:	9800      	ldr	r0, [sp, #0]
 8025e00:	9f08      	ldr	r7, [sp, #32]
 8025e02:	321a      	adds	r2, #26
 8025e04:	47b8      	blx	r7
 8025e06:	3001      	adds	r0, #1
 8025e08:	d0e6      	beq.n	8025dd8 <_printf_common+0xa8>
 8025e0a:	3601      	adds	r6, #1
 8025e0c:	e7d1      	b.n	8025db2 <_printf_common+0x82>
	...

08025e10 <_printf_i>:
 8025e10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8025e12:	b08b      	sub	sp, #44	@ 0x2c
 8025e14:	9206      	str	r2, [sp, #24]
 8025e16:	000a      	movs	r2, r1
 8025e18:	3243      	adds	r2, #67	@ 0x43
 8025e1a:	9307      	str	r3, [sp, #28]
 8025e1c:	9005      	str	r0, [sp, #20]
 8025e1e:	9203      	str	r2, [sp, #12]
 8025e20:	7e0a      	ldrb	r2, [r1, #24]
 8025e22:	000c      	movs	r4, r1
 8025e24:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8025e26:	2a78      	cmp	r2, #120	@ 0x78
 8025e28:	d809      	bhi.n	8025e3e <_printf_i+0x2e>
 8025e2a:	2a62      	cmp	r2, #98	@ 0x62
 8025e2c:	d80b      	bhi.n	8025e46 <_printf_i+0x36>
 8025e2e:	2a00      	cmp	r2, #0
 8025e30:	d100      	bne.n	8025e34 <_printf_i+0x24>
 8025e32:	e0ba      	b.n	8025faa <_printf_i+0x19a>
 8025e34:	497a      	ldr	r1, [pc, #488]	@ (8026020 <_printf_i+0x210>)
 8025e36:	9104      	str	r1, [sp, #16]
 8025e38:	2a58      	cmp	r2, #88	@ 0x58
 8025e3a:	d100      	bne.n	8025e3e <_printf_i+0x2e>
 8025e3c:	e08e      	b.n	8025f5c <_printf_i+0x14c>
 8025e3e:	0025      	movs	r5, r4
 8025e40:	3542      	adds	r5, #66	@ 0x42
 8025e42:	702a      	strb	r2, [r5, #0]
 8025e44:	e022      	b.n	8025e8c <_printf_i+0x7c>
 8025e46:	0010      	movs	r0, r2
 8025e48:	3863      	subs	r0, #99	@ 0x63
 8025e4a:	2815      	cmp	r0, #21
 8025e4c:	d8f7      	bhi.n	8025e3e <_printf_i+0x2e>
 8025e4e:	f7da f99f 	bl	8000190 <__gnu_thumb1_case_shi>
 8025e52:	0016      	.short	0x0016
 8025e54:	fff6001f 	.word	0xfff6001f
 8025e58:	fff6fff6 	.word	0xfff6fff6
 8025e5c:	001ffff6 	.word	0x001ffff6
 8025e60:	fff6fff6 	.word	0xfff6fff6
 8025e64:	fff6fff6 	.word	0xfff6fff6
 8025e68:	0036009f 	.word	0x0036009f
 8025e6c:	fff6007e 	.word	0xfff6007e
 8025e70:	00b0fff6 	.word	0x00b0fff6
 8025e74:	0036fff6 	.word	0x0036fff6
 8025e78:	fff6fff6 	.word	0xfff6fff6
 8025e7c:	0082      	.short	0x0082
 8025e7e:	0025      	movs	r5, r4
 8025e80:	681a      	ldr	r2, [r3, #0]
 8025e82:	3542      	adds	r5, #66	@ 0x42
 8025e84:	1d11      	adds	r1, r2, #4
 8025e86:	6019      	str	r1, [r3, #0]
 8025e88:	6813      	ldr	r3, [r2, #0]
 8025e8a:	702b      	strb	r3, [r5, #0]
 8025e8c:	2301      	movs	r3, #1
 8025e8e:	e09e      	b.n	8025fce <_printf_i+0x1be>
 8025e90:	6818      	ldr	r0, [r3, #0]
 8025e92:	6809      	ldr	r1, [r1, #0]
 8025e94:	1d02      	adds	r2, r0, #4
 8025e96:	060d      	lsls	r5, r1, #24
 8025e98:	d50b      	bpl.n	8025eb2 <_printf_i+0xa2>
 8025e9a:	6806      	ldr	r6, [r0, #0]
 8025e9c:	601a      	str	r2, [r3, #0]
 8025e9e:	2e00      	cmp	r6, #0
 8025ea0:	da03      	bge.n	8025eaa <_printf_i+0x9a>
 8025ea2:	232d      	movs	r3, #45	@ 0x2d
 8025ea4:	9a03      	ldr	r2, [sp, #12]
 8025ea6:	4276      	negs	r6, r6
 8025ea8:	7013      	strb	r3, [r2, #0]
 8025eaa:	4b5d      	ldr	r3, [pc, #372]	@ (8026020 <_printf_i+0x210>)
 8025eac:	270a      	movs	r7, #10
 8025eae:	9304      	str	r3, [sp, #16]
 8025eb0:	e018      	b.n	8025ee4 <_printf_i+0xd4>
 8025eb2:	6806      	ldr	r6, [r0, #0]
 8025eb4:	601a      	str	r2, [r3, #0]
 8025eb6:	0649      	lsls	r1, r1, #25
 8025eb8:	d5f1      	bpl.n	8025e9e <_printf_i+0x8e>
 8025eba:	b236      	sxth	r6, r6
 8025ebc:	e7ef      	b.n	8025e9e <_printf_i+0x8e>
 8025ebe:	6808      	ldr	r0, [r1, #0]
 8025ec0:	6819      	ldr	r1, [r3, #0]
 8025ec2:	c940      	ldmia	r1!, {r6}
 8025ec4:	0605      	lsls	r5, r0, #24
 8025ec6:	d402      	bmi.n	8025ece <_printf_i+0xbe>
 8025ec8:	0640      	lsls	r0, r0, #25
 8025eca:	d500      	bpl.n	8025ece <_printf_i+0xbe>
 8025ecc:	b2b6      	uxth	r6, r6
 8025ece:	6019      	str	r1, [r3, #0]
 8025ed0:	4b53      	ldr	r3, [pc, #332]	@ (8026020 <_printf_i+0x210>)
 8025ed2:	270a      	movs	r7, #10
 8025ed4:	9304      	str	r3, [sp, #16]
 8025ed6:	2a6f      	cmp	r2, #111	@ 0x6f
 8025ed8:	d100      	bne.n	8025edc <_printf_i+0xcc>
 8025eda:	3f02      	subs	r7, #2
 8025edc:	0023      	movs	r3, r4
 8025ede:	2200      	movs	r2, #0
 8025ee0:	3343      	adds	r3, #67	@ 0x43
 8025ee2:	701a      	strb	r2, [r3, #0]
 8025ee4:	6863      	ldr	r3, [r4, #4]
 8025ee6:	60a3      	str	r3, [r4, #8]
 8025ee8:	2b00      	cmp	r3, #0
 8025eea:	db06      	blt.n	8025efa <_printf_i+0xea>
 8025eec:	2104      	movs	r1, #4
 8025eee:	6822      	ldr	r2, [r4, #0]
 8025ef0:	9d03      	ldr	r5, [sp, #12]
 8025ef2:	438a      	bics	r2, r1
 8025ef4:	6022      	str	r2, [r4, #0]
 8025ef6:	4333      	orrs	r3, r6
 8025ef8:	d00c      	beq.n	8025f14 <_printf_i+0x104>
 8025efa:	9d03      	ldr	r5, [sp, #12]
 8025efc:	0030      	movs	r0, r6
 8025efe:	0039      	movs	r1, r7
 8025f00:	f7da f9d6 	bl	80002b0 <__aeabi_uidivmod>
 8025f04:	9b04      	ldr	r3, [sp, #16]
 8025f06:	3d01      	subs	r5, #1
 8025f08:	5c5b      	ldrb	r3, [r3, r1]
 8025f0a:	702b      	strb	r3, [r5, #0]
 8025f0c:	0033      	movs	r3, r6
 8025f0e:	0006      	movs	r6, r0
 8025f10:	429f      	cmp	r7, r3
 8025f12:	d9f3      	bls.n	8025efc <_printf_i+0xec>
 8025f14:	2f08      	cmp	r7, #8
 8025f16:	d109      	bne.n	8025f2c <_printf_i+0x11c>
 8025f18:	6823      	ldr	r3, [r4, #0]
 8025f1a:	07db      	lsls	r3, r3, #31
 8025f1c:	d506      	bpl.n	8025f2c <_printf_i+0x11c>
 8025f1e:	6862      	ldr	r2, [r4, #4]
 8025f20:	6923      	ldr	r3, [r4, #16]
 8025f22:	429a      	cmp	r2, r3
 8025f24:	dc02      	bgt.n	8025f2c <_printf_i+0x11c>
 8025f26:	2330      	movs	r3, #48	@ 0x30
 8025f28:	3d01      	subs	r5, #1
 8025f2a:	702b      	strb	r3, [r5, #0]
 8025f2c:	9b03      	ldr	r3, [sp, #12]
 8025f2e:	1b5b      	subs	r3, r3, r5
 8025f30:	6123      	str	r3, [r4, #16]
 8025f32:	9b07      	ldr	r3, [sp, #28]
 8025f34:	0021      	movs	r1, r4
 8025f36:	9300      	str	r3, [sp, #0]
 8025f38:	9805      	ldr	r0, [sp, #20]
 8025f3a:	9b06      	ldr	r3, [sp, #24]
 8025f3c:	aa09      	add	r2, sp, #36	@ 0x24
 8025f3e:	f7ff fef7 	bl	8025d30 <_printf_common>
 8025f42:	3001      	adds	r0, #1
 8025f44:	d148      	bne.n	8025fd8 <_printf_i+0x1c8>
 8025f46:	2001      	movs	r0, #1
 8025f48:	4240      	negs	r0, r0
 8025f4a:	b00b      	add	sp, #44	@ 0x2c
 8025f4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8025f4e:	2220      	movs	r2, #32
 8025f50:	6809      	ldr	r1, [r1, #0]
 8025f52:	430a      	orrs	r2, r1
 8025f54:	6022      	str	r2, [r4, #0]
 8025f56:	2278      	movs	r2, #120	@ 0x78
 8025f58:	4932      	ldr	r1, [pc, #200]	@ (8026024 <_printf_i+0x214>)
 8025f5a:	9104      	str	r1, [sp, #16]
 8025f5c:	0021      	movs	r1, r4
 8025f5e:	3145      	adds	r1, #69	@ 0x45
 8025f60:	700a      	strb	r2, [r1, #0]
 8025f62:	6819      	ldr	r1, [r3, #0]
 8025f64:	6822      	ldr	r2, [r4, #0]
 8025f66:	c940      	ldmia	r1!, {r6}
 8025f68:	0610      	lsls	r0, r2, #24
 8025f6a:	d402      	bmi.n	8025f72 <_printf_i+0x162>
 8025f6c:	0650      	lsls	r0, r2, #25
 8025f6e:	d500      	bpl.n	8025f72 <_printf_i+0x162>
 8025f70:	b2b6      	uxth	r6, r6
 8025f72:	6019      	str	r1, [r3, #0]
 8025f74:	07d3      	lsls	r3, r2, #31
 8025f76:	d502      	bpl.n	8025f7e <_printf_i+0x16e>
 8025f78:	2320      	movs	r3, #32
 8025f7a:	4313      	orrs	r3, r2
 8025f7c:	6023      	str	r3, [r4, #0]
 8025f7e:	2e00      	cmp	r6, #0
 8025f80:	d001      	beq.n	8025f86 <_printf_i+0x176>
 8025f82:	2710      	movs	r7, #16
 8025f84:	e7aa      	b.n	8025edc <_printf_i+0xcc>
 8025f86:	2220      	movs	r2, #32
 8025f88:	6823      	ldr	r3, [r4, #0]
 8025f8a:	4393      	bics	r3, r2
 8025f8c:	6023      	str	r3, [r4, #0]
 8025f8e:	e7f8      	b.n	8025f82 <_printf_i+0x172>
 8025f90:	681a      	ldr	r2, [r3, #0]
 8025f92:	680d      	ldr	r5, [r1, #0]
 8025f94:	1d10      	adds	r0, r2, #4
 8025f96:	6949      	ldr	r1, [r1, #20]
 8025f98:	6018      	str	r0, [r3, #0]
 8025f9a:	6813      	ldr	r3, [r2, #0]
 8025f9c:	062e      	lsls	r6, r5, #24
 8025f9e:	d501      	bpl.n	8025fa4 <_printf_i+0x194>
 8025fa0:	6019      	str	r1, [r3, #0]
 8025fa2:	e002      	b.n	8025faa <_printf_i+0x19a>
 8025fa4:	066d      	lsls	r5, r5, #25
 8025fa6:	d5fb      	bpl.n	8025fa0 <_printf_i+0x190>
 8025fa8:	8019      	strh	r1, [r3, #0]
 8025faa:	2300      	movs	r3, #0
 8025fac:	9d03      	ldr	r5, [sp, #12]
 8025fae:	6123      	str	r3, [r4, #16]
 8025fb0:	e7bf      	b.n	8025f32 <_printf_i+0x122>
 8025fb2:	681a      	ldr	r2, [r3, #0]
 8025fb4:	1d11      	adds	r1, r2, #4
 8025fb6:	6019      	str	r1, [r3, #0]
 8025fb8:	6815      	ldr	r5, [r2, #0]
 8025fba:	2100      	movs	r1, #0
 8025fbc:	0028      	movs	r0, r5
 8025fbe:	6862      	ldr	r2, [r4, #4]
 8025fc0:	f000 fb7f 	bl	80266c2 <memchr>
 8025fc4:	2800      	cmp	r0, #0
 8025fc6:	d001      	beq.n	8025fcc <_printf_i+0x1bc>
 8025fc8:	1b40      	subs	r0, r0, r5
 8025fca:	6060      	str	r0, [r4, #4]
 8025fcc:	6863      	ldr	r3, [r4, #4]
 8025fce:	6123      	str	r3, [r4, #16]
 8025fd0:	2300      	movs	r3, #0
 8025fd2:	9a03      	ldr	r2, [sp, #12]
 8025fd4:	7013      	strb	r3, [r2, #0]
 8025fd6:	e7ac      	b.n	8025f32 <_printf_i+0x122>
 8025fd8:	002a      	movs	r2, r5
 8025fda:	6923      	ldr	r3, [r4, #16]
 8025fdc:	9906      	ldr	r1, [sp, #24]
 8025fde:	9805      	ldr	r0, [sp, #20]
 8025fe0:	9d07      	ldr	r5, [sp, #28]
 8025fe2:	47a8      	blx	r5
 8025fe4:	3001      	adds	r0, #1
 8025fe6:	d0ae      	beq.n	8025f46 <_printf_i+0x136>
 8025fe8:	6823      	ldr	r3, [r4, #0]
 8025fea:	079b      	lsls	r3, r3, #30
 8025fec:	d415      	bmi.n	802601a <_printf_i+0x20a>
 8025fee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8025ff0:	68e0      	ldr	r0, [r4, #12]
 8025ff2:	4298      	cmp	r0, r3
 8025ff4:	daa9      	bge.n	8025f4a <_printf_i+0x13a>
 8025ff6:	0018      	movs	r0, r3
 8025ff8:	e7a7      	b.n	8025f4a <_printf_i+0x13a>
 8025ffa:	0022      	movs	r2, r4
 8025ffc:	2301      	movs	r3, #1
 8025ffe:	9906      	ldr	r1, [sp, #24]
 8026000:	9805      	ldr	r0, [sp, #20]
 8026002:	9e07      	ldr	r6, [sp, #28]
 8026004:	3219      	adds	r2, #25
 8026006:	47b0      	blx	r6
 8026008:	3001      	adds	r0, #1
 802600a:	d09c      	beq.n	8025f46 <_printf_i+0x136>
 802600c:	3501      	adds	r5, #1
 802600e:	68e3      	ldr	r3, [r4, #12]
 8026010:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8026012:	1a9b      	subs	r3, r3, r2
 8026014:	42ab      	cmp	r3, r5
 8026016:	dcf0      	bgt.n	8025ffa <_printf_i+0x1ea>
 8026018:	e7e9      	b.n	8025fee <_printf_i+0x1de>
 802601a:	2500      	movs	r5, #0
 802601c:	e7f7      	b.n	802600e <_printf_i+0x1fe>
 802601e:	46c0      	nop			@ (mov r8, r8)
 8026020:	0802ea2c 	.word	0x0802ea2c
 8026024:	0802ea3d 	.word	0x0802ea3d

08026028 <std>:
 8026028:	2300      	movs	r3, #0
 802602a:	b510      	push	{r4, lr}
 802602c:	0004      	movs	r4, r0
 802602e:	6003      	str	r3, [r0, #0]
 8026030:	6043      	str	r3, [r0, #4]
 8026032:	6083      	str	r3, [r0, #8]
 8026034:	8181      	strh	r1, [r0, #12]
 8026036:	6643      	str	r3, [r0, #100]	@ 0x64
 8026038:	81c2      	strh	r2, [r0, #14]
 802603a:	6103      	str	r3, [r0, #16]
 802603c:	6143      	str	r3, [r0, #20]
 802603e:	6183      	str	r3, [r0, #24]
 8026040:	0019      	movs	r1, r3
 8026042:	2208      	movs	r2, #8
 8026044:	305c      	adds	r0, #92	@ 0x5c
 8026046:	f000 fa6b 	bl	8026520 <memset>
 802604a:	4b0b      	ldr	r3, [pc, #44]	@ (8026078 <std+0x50>)
 802604c:	6224      	str	r4, [r4, #32]
 802604e:	6263      	str	r3, [r4, #36]	@ 0x24
 8026050:	4b0a      	ldr	r3, [pc, #40]	@ (802607c <std+0x54>)
 8026052:	62a3      	str	r3, [r4, #40]	@ 0x28
 8026054:	4b0a      	ldr	r3, [pc, #40]	@ (8026080 <std+0x58>)
 8026056:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8026058:	4b0a      	ldr	r3, [pc, #40]	@ (8026084 <std+0x5c>)
 802605a:	6323      	str	r3, [r4, #48]	@ 0x30
 802605c:	4b0a      	ldr	r3, [pc, #40]	@ (8026088 <std+0x60>)
 802605e:	429c      	cmp	r4, r3
 8026060:	d005      	beq.n	802606e <std+0x46>
 8026062:	4b0a      	ldr	r3, [pc, #40]	@ (802608c <std+0x64>)
 8026064:	429c      	cmp	r4, r3
 8026066:	d002      	beq.n	802606e <std+0x46>
 8026068:	4b09      	ldr	r3, [pc, #36]	@ (8026090 <std+0x68>)
 802606a:	429c      	cmp	r4, r3
 802606c:	d103      	bne.n	8026076 <std+0x4e>
 802606e:	0020      	movs	r0, r4
 8026070:	3058      	adds	r0, #88	@ 0x58
 8026072:	f000 fb23 	bl	80266bc <__retarget_lock_init_recursive>
 8026076:	bd10      	pop	{r4, pc}
 8026078:	080262d5 	.word	0x080262d5
 802607c:	080262fd 	.word	0x080262fd
 8026080:	08026335 	.word	0x08026335
 8026084:	08026361 	.word	0x08026361
 8026088:	200037d0 	.word	0x200037d0
 802608c:	20003838 	.word	0x20003838
 8026090:	200038a0 	.word	0x200038a0

08026094 <stdio_exit_handler>:
 8026094:	b510      	push	{r4, lr}
 8026096:	4a03      	ldr	r2, [pc, #12]	@ (80260a4 <stdio_exit_handler+0x10>)
 8026098:	4903      	ldr	r1, [pc, #12]	@ (80260a8 <stdio_exit_handler+0x14>)
 802609a:	4804      	ldr	r0, [pc, #16]	@ (80260ac <stdio_exit_handler+0x18>)
 802609c:	f000 f86c 	bl	8026178 <_fwalk_sglue>
 80260a0:	bd10      	pop	{r4, pc}
 80260a2:	46c0      	nop			@ (mov r8, r8)
 80260a4:	20000274 	.word	0x20000274
 80260a8:	08028cb9 	.word	0x08028cb9
 80260ac:	200003f0 	.word	0x200003f0

080260b0 <cleanup_stdio>:
 80260b0:	6841      	ldr	r1, [r0, #4]
 80260b2:	4b0b      	ldr	r3, [pc, #44]	@ (80260e0 <cleanup_stdio+0x30>)
 80260b4:	b510      	push	{r4, lr}
 80260b6:	0004      	movs	r4, r0
 80260b8:	4299      	cmp	r1, r3
 80260ba:	d001      	beq.n	80260c0 <cleanup_stdio+0x10>
 80260bc:	f002 fdfc 	bl	8028cb8 <_fflush_r>
 80260c0:	68a1      	ldr	r1, [r4, #8]
 80260c2:	4b08      	ldr	r3, [pc, #32]	@ (80260e4 <cleanup_stdio+0x34>)
 80260c4:	4299      	cmp	r1, r3
 80260c6:	d002      	beq.n	80260ce <cleanup_stdio+0x1e>
 80260c8:	0020      	movs	r0, r4
 80260ca:	f002 fdf5 	bl	8028cb8 <_fflush_r>
 80260ce:	68e1      	ldr	r1, [r4, #12]
 80260d0:	4b05      	ldr	r3, [pc, #20]	@ (80260e8 <cleanup_stdio+0x38>)
 80260d2:	4299      	cmp	r1, r3
 80260d4:	d002      	beq.n	80260dc <cleanup_stdio+0x2c>
 80260d6:	0020      	movs	r0, r4
 80260d8:	f002 fdee 	bl	8028cb8 <_fflush_r>
 80260dc:	bd10      	pop	{r4, pc}
 80260de:	46c0      	nop			@ (mov r8, r8)
 80260e0:	200037d0 	.word	0x200037d0
 80260e4:	20003838 	.word	0x20003838
 80260e8:	200038a0 	.word	0x200038a0

080260ec <global_stdio_init.part.0>:
 80260ec:	b510      	push	{r4, lr}
 80260ee:	4b09      	ldr	r3, [pc, #36]	@ (8026114 <global_stdio_init.part.0+0x28>)
 80260f0:	4a09      	ldr	r2, [pc, #36]	@ (8026118 <global_stdio_init.part.0+0x2c>)
 80260f2:	2104      	movs	r1, #4
 80260f4:	601a      	str	r2, [r3, #0]
 80260f6:	4809      	ldr	r0, [pc, #36]	@ (802611c <global_stdio_init.part.0+0x30>)
 80260f8:	2200      	movs	r2, #0
 80260fa:	f7ff ff95 	bl	8026028 <std>
 80260fe:	2201      	movs	r2, #1
 8026100:	2109      	movs	r1, #9
 8026102:	4807      	ldr	r0, [pc, #28]	@ (8026120 <global_stdio_init.part.0+0x34>)
 8026104:	f7ff ff90 	bl	8026028 <std>
 8026108:	2202      	movs	r2, #2
 802610a:	2112      	movs	r1, #18
 802610c:	4805      	ldr	r0, [pc, #20]	@ (8026124 <global_stdio_init.part.0+0x38>)
 802610e:	f7ff ff8b 	bl	8026028 <std>
 8026112:	bd10      	pop	{r4, pc}
 8026114:	20003908 	.word	0x20003908
 8026118:	08026095 	.word	0x08026095
 802611c:	200037d0 	.word	0x200037d0
 8026120:	20003838 	.word	0x20003838
 8026124:	200038a0 	.word	0x200038a0

08026128 <__sfp_lock_acquire>:
 8026128:	b510      	push	{r4, lr}
 802612a:	4802      	ldr	r0, [pc, #8]	@ (8026134 <__sfp_lock_acquire+0xc>)
 802612c:	f000 fac7 	bl	80266be <__retarget_lock_acquire_recursive>
 8026130:	bd10      	pop	{r4, pc}
 8026132:	46c0      	nop			@ (mov r8, r8)
 8026134:	20003911 	.word	0x20003911

08026138 <__sfp_lock_release>:
 8026138:	b510      	push	{r4, lr}
 802613a:	4802      	ldr	r0, [pc, #8]	@ (8026144 <__sfp_lock_release+0xc>)
 802613c:	f000 fac0 	bl	80266c0 <__retarget_lock_release_recursive>
 8026140:	bd10      	pop	{r4, pc}
 8026142:	46c0      	nop			@ (mov r8, r8)
 8026144:	20003911 	.word	0x20003911

08026148 <__sinit>:
 8026148:	b510      	push	{r4, lr}
 802614a:	0004      	movs	r4, r0
 802614c:	f7ff ffec 	bl	8026128 <__sfp_lock_acquire>
 8026150:	6a23      	ldr	r3, [r4, #32]
 8026152:	2b00      	cmp	r3, #0
 8026154:	d002      	beq.n	802615c <__sinit+0x14>
 8026156:	f7ff ffef 	bl	8026138 <__sfp_lock_release>
 802615a:	bd10      	pop	{r4, pc}
 802615c:	4b04      	ldr	r3, [pc, #16]	@ (8026170 <__sinit+0x28>)
 802615e:	6223      	str	r3, [r4, #32]
 8026160:	4b04      	ldr	r3, [pc, #16]	@ (8026174 <__sinit+0x2c>)
 8026162:	681b      	ldr	r3, [r3, #0]
 8026164:	2b00      	cmp	r3, #0
 8026166:	d1f6      	bne.n	8026156 <__sinit+0xe>
 8026168:	f7ff ffc0 	bl	80260ec <global_stdio_init.part.0>
 802616c:	e7f3      	b.n	8026156 <__sinit+0xe>
 802616e:	46c0      	nop			@ (mov r8, r8)
 8026170:	080260b1 	.word	0x080260b1
 8026174:	20003908 	.word	0x20003908

08026178 <_fwalk_sglue>:
 8026178:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 802617a:	0014      	movs	r4, r2
 802617c:	2600      	movs	r6, #0
 802617e:	9000      	str	r0, [sp, #0]
 8026180:	9101      	str	r1, [sp, #4]
 8026182:	68a5      	ldr	r5, [r4, #8]
 8026184:	6867      	ldr	r7, [r4, #4]
 8026186:	3f01      	subs	r7, #1
 8026188:	d504      	bpl.n	8026194 <_fwalk_sglue+0x1c>
 802618a:	6824      	ldr	r4, [r4, #0]
 802618c:	2c00      	cmp	r4, #0
 802618e:	d1f8      	bne.n	8026182 <_fwalk_sglue+0xa>
 8026190:	0030      	movs	r0, r6
 8026192:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8026194:	89ab      	ldrh	r3, [r5, #12]
 8026196:	2b01      	cmp	r3, #1
 8026198:	d908      	bls.n	80261ac <_fwalk_sglue+0x34>
 802619a:	220e      	movs	r2, #14
 802619c:	5eab      	ldrsh	r3, [r5, r2]
 802619e:	3301      	adds	r3, #1
 80261a0:	d004      	beq.n	80261ac <_fwalk_sglue+0x34>
 80261a2:	0029      	movs	r1, r5
 80261a4:	9800      	ldr	r0, [sp, #0]
 80261a6:	9b01      	ldr	r3, [sp, #4]
 80261a8:	4798      	blx	r3
 80261aa:	4306      	orrs	r6, r0
 80261ac:	3568      	adds	r5, #104	@ 0x68
 80261ae:	e7ea      	b.n	8026186 <_fwalk_sglue+0xe>

080261b0 <iprintf>:
 80261b0:	b40f      	push	{r0, r1, r2, r3}
 80261b2:	b507      	push	{r0, r1, r2, lr}
 80261b4:	4905      	ldr	r1, [pc, #20]	@ (80261cc <iprintf+0x1c>)
 80261b6:	ab04      	add	r3, sp, #16
 80261b8:	6808      	ldr	r0, [r1, #0]
 80261ba:	cb04      	ldmia	r3!, {r2}
 80261bc:	6881      	ldr	r1, [r0, #8]
 80261be:	9301      	str	r3, [sp, #4]
 80261c0:	f002 fbd8 	bl	8028974 <_vfiprintf_r>
 80261c4:	b003      	add	sp, #12
 80261c6:	bc08      	pop	{r3}
 80261c8:	b004      	add	sp, #16
 80261ca:	4718      	bx	r3
 80261cc:	200003ec 	.word	0x200003ec

080261d0 <_puts_r>:
 80261d0:	6a03      	ldr	r3, [r0, #32]
 80261d2:	b570      	push	{r4, r5, r6, lr}
 80261d4:	0005      	movs	r5, r0
 80261d6:	000e      	movs	r6, r1
 80261d8:	6884      	ldr	r4, [r0, #8]
 80261da:	2b00      	cmp	r3, #0
 80261dc:	d101      	bne.n	80261e2 <_puts_r+0x12>
 80261de:	f7ff ffb3 	bl	8026148 <__sinit>
 80261e2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80261e4:	07db      	lsls	r3, r3, #31
 80261e6:	d405      	bmi.n	80261f4 <_puts_r+0x24>
 80261e8:	89a3      	ldrh	r3, [r4, #12]
 80261ea:	059b      	lsls	r3, r3, #22
 80261ec:	d402      	bmi.n	80261f4 <_puts_r+0x24>
 80261ee:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80261f0:	f000 fa65 	bl	80266be <__retarget_lock_acquire_recursive>
 80261f4:	89a3      	ldrh	r3, [r4, #12]
 80261f6:	071b      	lsls	r3, r3, #28
 80261f8:	d502      	bpl.n	8026200 <_puts_r+0x30>
 80261fa:	6923      	ldr	r3, [r4, #16]
 80261fc:	2b00      	cmp	r3, #0
 80261fe:	d11f      	bne.n	8026240 <_puts_r+0x70>
 8026200:	0021      	movs	r1, r4
 8026202:	0028      	movs	r0, r5
 8026204:	f000 f92e 	bl	8026464 <__swsetup_r>
 8026208:	2800      	cmp	r0, #0
 802620a:	d019      	beq.n	8026240 <_puts_r+0x70>
 802620c:	2501      	movs	r5, #1
 802620e:	426d      	negs	r5, r5
 8026210:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8026212:	07db      	lsls	r3, r3, #31
 8026214:	d405      	bmi.n	8026222 <_puts_r+0x52>
 8026216:	89a3      	ldrh	r3, [r4, #12]
 8026218:	059b      	lsls	r3, r3, #22
 802621a:	d402      	bmi.n	8026222 <_puts_r+0x52>
 802621c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 802621e:	f000 fa4f 	bl	80266c0 <__retarget_lock_release_recursive>
 8026222:	0028      	movs	r0, r5
 8026224:	bd70      	pop	{r4, r5, r6, pc}
 8026226:	3601      	adds	r6, #1
 8026228:	60a3      	str	r3, [r4, #8]
 802622a:	2b00      	cmp	r3, #0
 802622c:	da04      	bge.n	8026238 <_puts_r+0x68>
 802622e:	69a2      	ldr	r2, [r4, #24]
 8026230:	429a      	cmp	r2, r3
 8026232:	dc16      	bgt.n	8026262 <_puts_r+0x92>
 8026234:	290a      	cmp	r1, #10
 8026236:	d014      	beq.n	8026262 <_puts_r+0x92>
 8026238:	6823      	ldr	r3, [r4, #0]
 802623a:	1c5a      	adds	r2, r3, #1
 802623c:	6022      	str	r2, [r4, #0]
 802623e:	7019      	strb	r1, [r3, #0]
 8026240:	68a3      	ldr	r3, [r4, #8]
 8026242:	7831      	ldrb	r1, [r6, #0]
 8026244:	3b01      	subs	r3, #1
 8026246:	2900      	cmp	r1, #0
 8026248:	d1ed      	bne.n	8026226 <_puts_r+0x56>
 802624a:	60a3      	str	r3, [r4, #8]
 802624c:	2b00      	cmp	r3, #0
 802624e:	da0f      	bge.n	8026270 <_puts_r+0xa0>
 8026250:	0022      	movs	r2, r4
 8026252:	0028      	movs	r0, r5
 8026254:	310a      	adds	r1, #10
 8026256:	f000 f8c3 	bl	80263e0 <__swbuf_r>
 802625a:	3001      	adds	r0, #1
 802625c:	d0d6      	beq.n	802620c <_puts_r+0x3c>
 802625e:	250a      	movs	r5, #10
 8026260:	e7d6      	b.n	8026210 <_puts_r+0x40>
 8026262:	0022      	movs	r2, r4
 8026264:	0028      	movs	r0, r5
 8026266:	f000 f8bb 	bl	80263e0 <__swbuf_r>
 802626a:	3001      	adds	r0, #1
 802626c:	d1e8      	bne.n	8026240 <_puts_r+0x70>
 802626e:	e7cd      	b.n	802620c <_puts_r+0x3c>
 8026270:	6823      	ldr	r3, [r4, #0]
 8026272:	1c5a      	adds	r2, r3, #1
 8026274:	6022      	str	r2, [r4, #0]
 8026276:	220a      	movs	r2, #10
 8026278:	701a      	strb	r2, [r3, #0]
 802627a:	e7f0      	b.n	802625e <_puts_r+0x8e>

0802627c <puts>:
 802627c:	b510      	push	{r4, lr}
 802627e:	4b03      	ldr	r3, [pc, #12]	@ (802628c <puts+0x10>)
 8026280:	0001      	movs	r1, r0
 8026282:	6818      	ldr	r0, [r3, #0]
 8026284:	f7ff ffa4 	bl	80261d0 <_puts_r>
 8026288:	bd10      	pop	{r4, pc}
 802628a:	46c0      	nop			@ (mov r8, r8)
 802628c:	200003ec 	.word	0x200003ec

08026290 <siprintf>:
 8026290:	b40e      	push	{r1, r2, r3}
 8026292:	b510      	push	{r4, lr}
 8026294:	2400      	movs	r4, #0
 8026296:	490c      	ldr	r1, [pc, #48]	@ (80262c8 <siprintf+0x38>)
 8026298:	b09d      	sub	sp, #116	@ 0x74
 802629a:	ab1f      	add	r3, sp, #124	@ 0x7c
 802629c:	9002      	str	r0, [sp, #8]
 802629e:	9006      	str	r0, [sp, #24]
 80262a0:	9107      	str	r1, [sp, #28]
 80262a2:	9104      	str	r1, [sp, #16]
 80262a4:	4809      	ldr	r0, [pc, #36]	@ (80262cc <siprintf+0x3c>)
 80262a6:	490a      	ldr	r1, [pc, #40]	@ (80262d0 <siprintf+0x40>)
 80262a8:	cb04      	ldmia	r3!, {r2}
 80262aa:	9105      	str	r1, [sp, #20]
 80262ac:	6800      	ldr	r0, [r0, #0]
 80262ae:	a902      	add	r1, sp, #8
 80262b0:	9301      	str	r3, [sp, #4]
 80262b2:	941b      	str	r4, [sp, #108]	@ 0x6c
 80262b4:	f002 fa38 	bl	8028728 <_svfiprintf_r>
 80262b8:	9b02      	ldr	r3, [sp, #8]
 80262ba:	701c      	strb	r4, [r3, #0]
 80262bc:	b01d      	add	sp, #116	@ 0x74
 80262be:	bc10      	pop	{r4}
 80262c0:	bc08      	pop	{r3}
 80262c2:	b003      	add	sp, #12
 80262c4:	4718      	bx	r3
 80262c6:	46c0      	nop			@ (mov r8, r8)
 80262c8:	7fffffff 	.word	0x7fffffff
 80262cc:	200003ec 	.word	0x200003ec
 80262d0:	ffff0208 	.word	0xffff0208

080262d4 <__sread>:
 80262d4:	b570      	push	{r4, r5, r6, lr}
 80262d6:	000c      	movs	r4, r1
 80262d8:	250e      	movs	r5, #14
 80262da:	5f49      	ldrsh	r1, [r1, r5]
 80262dc:	f000 f99c 	bl	8026618 <_read_r>
 80262e0:	2800      	cmp	r0, #0
 80262e2:	db03      	blt.n	80262ec <__sread+0x18>
 80262e4:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80262e6:	181b      	adds	r3, r3, r0
 80262e8:	6563      	str	r3, [r4, #84]	@ 0x54
 80262ea:	bd70      	pop	{r4, r5, r6, pc}
 80262ec:	89a3      	ldrh	r3, [r4, #12]
 80262ee:	4a02      	ldr	r2, [pc, #8]	@ (80262f8 <__sread+0x24>)
 80262f0:	4013      	ands	r3, r2
 80262f2:	81a3      	strh	r3, [r4, #12]
 80262f4:	e7f9      	b.n	80262ea <__sread+0x16>
 80262f6:	46c0      	nop			@ (mov r8, r8)
 80262f8:	ffffefff 	.word	0xffffefff

080262fc <__swrite>:
 80262fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80262fe:	001f      	movs	r7, r3
 8026300:	898b      	ldrh	r3, [r1, #12]
 8026302:	0005      	movs	r5, r0
 8026304:	000c      	movs	r4, r1
 8026306:	0016      	movs	r6, r2
 8026308:	05db      	lsls	r3, r3, #23
 802630a:	d505      	bpl.n	8026318 <__swrite+0x1c>
 802630c:	230e      	movs	r3, #14
 802630e:	5ec9      	ldrsh	r1, [r1, r3]
 8026310:	2200      	movs	r2, #0
 8026312:	2302      	movs	r3, #2
 8026314:	f000 f96c 	bl	80265f0 <_lseek_r>
 8026318:	89a3      	ldrh	r3, [r4, #12]
 802631a:	4a05      	ldr	r2, [pc, #20]	@ (8026330 <__swrite+0x34>)
 802631c:	0028      	movs	r0, r5
 802631e:	4013      	ands	r3, r2
 8026320:	81a3      	strh	r3, [r4, #12]
 8026322:	0032      	movs	r2, r6
 8026324:	230e      	movs	r3, #14
 8026326:	5ee1      	ldrsh	r1, [r4, r3]
 8026328:	003b      	movs	r3, r7
 802632a:	f000 f989 	bl	8026640 <_write_r>
 802632e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8026330:	ffffefff 	.word	0xffffefff

08026334 <__sseek>:
 8026334:	b570      	push	{r4, r5, r6, lr}
 8026336:	000c      	movs	r4, r1
 8026338:	250e      	movs	r5, #14
 802633a:	5f49      	ldrsh	r1, [r1, r5]
 802633c:	f000 f958 	bl	80265f0 <_lseek_r>
 8026340:	89a3      	ldrh	r3, [r4, #12]
 8026342:	1c42      	adds	r2, r0, #1
 8026344:	d103      	bne.n	802634e <__sseek+0x1a>
 8026346:	4a05      	ldr	r2, [pc, #20]	@ (802635c <__sseek+0x28>)
 8026348:	4013      	ands	r3, r2
 802634a:	81a3      	strh	r3, [r4, #12]
 802634c:	bd70      	pop	{r4, r5, r6, pc}
 802634e:	2280      	movs	r2, #128	@ 0x80
 8026350:	0152      	lsls	r2, r2, #5
 8026352:	4313      	orrs	r3, r2
 8026354:	81a3      	strh	r3, [r4, #12]
 8026356:	6560      	str	r0, [r4, #84]	@ 0x54
 8026358:	e7f8      	b.n	802634c <__sseek+0x18>
 802635a:	46c0      	nop			@ (mov r8, r8)
 802635c:	ffffefff 	.word	0xffffefff

08026360 <__sclose>:
 8026360:	b510      	push	{r4, lr}
 8026362:	230e      	movs	r3, #14
 8026364:	5ec9      	ldrsh	r1, [r1, r3]
 8026366:	f000 f931 	bl	80265cc <_close_r>
 802636a:	bd10      	pop	{r4, pc}

0802636c <_vsniprintf_r>:
 802636c:	b530      	push	{r4, r5, lr}
 802636e:	0005      	movs	r5, r0
 8026370:	0014      	movs	r4, r2
 8026372:	0008      	movs	r0, r1
 8026374:	001a      	movs	r2, r3
 8026376:	b09b      	sub	sp, #108	@ 0x6c
 8026378:	2c00      	cmp	r4, #0
 802637a:	da05      	bge.n	8026388 <_vsniprintf_r+0x1c>
 802637c:	238b      	movs	r3, #139	@ 0x8b
 802637e:	2001      	movs	r0, #1
 8026380:	602b      	str	r3, [r5, #0]
 8026382:	4240      	negs	r0, r0
 8026384:	b01b      	add	sp, #108	@ 0x6c
 8026386:	bd30      	pop	{r4, r5, pc}
 8026388:	2382      	movs	r3, #130	@ 0x82
 802638a:	4669      	mov	r1, sp
 802638c:	009b      	lsls	r3, r3, #2
 802638e:	818b      	strh	r3, [r1, #12]
 8026390:	2100      	movs	r1, #0
 8026392:	9000      	str	r0, [sp, #0]
 8026394:	9119      	str	r1, [sp, #100]	@ 0x64
 8026396:	9004      	str	r0, [sp, #16]
 8026398:	428c      	cmp	r4, r1
 802639a:	d000      	beq.n	802639e <_vsniprintf_r+0x32>
 802639c:	1e61      	subs	r1, r4, #1
 802639e:	2301      	movs	r3, #1
 80263a0:	9102      	str	r1, [sp, #8]
 80263a2:	9105      	str	r1, [sp, #20]
 80263a4:	4669      	mov	r1, sp
 80263a6:	425b      	negs	r3, r3
 80263a8:	81cb      	strh	r3, [r1, #14]
 80263aa:	0028      	movs	r0, r5
 80263ac:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 80263ae:	f002 f9bb 	bl	8028728 <_svfiprintf_r>
 80263b2:	1c43      	adds	r3, r0, #1
 80263b4:	da01      	bge.n	80263ba <_vsniprintf_r+0x4e>
 80263b6:	238b      	movs	r3, #139	@ 0x8b
 80263b8:	602b      	str	r3, [r5, #0]
 80263ba:	2c00      	cmp	r4, #0
 80263bc:	d0e2      	beq.n	8026384 <_vsniprintf_r+0x18>
 80263be:	2200      	movs	r2, #0
 80263c0:	9b00      	ldr	r3, [sp, #0]
 80263c2:	701a      	strb	r2, [r3, #0]
 80263c4:	e7de      	b.n	8026384 <_vsniprintf_r+0x18>
	...

080263c8 <vsniprintf>:
 80263c8:	b513      	push	{r0, r1, r4, lr}
 80263ca:	4c04      	ldr	r4, [pc, #16]	@ (80263dc <vsniprintf+0x14>)
 80263cc:	9300      	str	r3, [sp, #0]
 80263ce:	0013      	movs	r3, r2
 80263d0:	000a      	movs	r2, r1
 80263d2:	0001      	movs	r1, r0
 80263d4:	6820      	ldr	r0, [r4, #0]
 80263d6:	f7ff ffc9 	bl	802636c <_vsniprintf_r>
 80263da:	bd16      	pop	{r1, r2, r4, pc}
 80263dc:	200003ec 	.word	0x200003ec

080263e0 <__swbuf_r>:
 80263e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80263e2:	0006      	movs	r6, r0
 80263e4:	000d      	movs	r5, r1
 80263e6:	0014      	movs	r4, r2
 80263e8:	2800      	cmp	r0, #0
 80263ea:	d004      	beq.n	80263f6 <__swbuf_r+0x16>
 80263ec:	6a03      	ldr	r3, [r0, #32]
 80263ee:	2b00      	cmp	r3, #0
 80263f0:	d101      	bne.n	80263f6 <__swbuf_r+0x16>
 80263f2:	f7ff fea9 	bl	8026148 <__sinit>
 80263f6:	69a3      	ldr	r3, [r4, #24]
 80263f8:	60a3      	str	r3, [r4, #8]
 80263fa:	89a3      	ldrh	r3, [r4, #12]
 80263fc:	071b      	lsls	r3, r3, #28
 80263fe:	d502      	bpl.n	8026406 <__swbuf_r+0x26>
 8026400:	6923      	ldr	r3, [r4, #16]
 8026402:	2b00      	cmp	r3, #0
 8026404:	d109      	bne.n	802641a <__swbuf_r+0x3a>
 8026406:	0021      	movs	r1, r4
 8026408:	0030      	movs	r0, r6
 802640a:	f000 f82b 	bl	8026464 <__swsetup_r>
 802640e:	2800      	cmp	r0, #0
 8026410:	d003      	beq.n	802641a <__swbuf_r+0x3a>
 8026412:	2501      	movs	r5, #1
 8026414:	426d      	negs	r5, r5
 8026416:	0028      	movs	r0, r5
 8026418:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802641a:	6923      	ldr	r3, [r4, #16]
 802641c:	6820      	ldr	r0, [r4, #0]
 802641e:	b2ef      	uxtb	r7, r5
 8026420:	1ac0      	subs	r0, r0, r3
 8026422:	6963      	ldr	r3, [r4, #20]
 8026424:	b2ed      	uxtb	r5, r5
 8026426:	4283      	cmp	r3, r0
 8026428:	dc05      	bgt.n	8026436 <__swbuf_r+0x56>
 802642a:	0021      	movs	r1, r4
 802642c:	0030      	movs	r0, r6
 802642e:	f002 fc43 	bl	8028cb8 <_fflush_r>
 8026432:	2800      	cmp	r0, #0
 8026434:	d1ed      	bne.n	8026412 <__swbuf_r+0x32>
 8026436:	68a3      	ldr	r3, [r4, #8]
 8026438:	3001      	adds	r0, #1
 802643a:	3b01      	subs	r3, #1
 802643c:	60a3      	str	r3, [r4, #8]
 802643e:	6823      	ldr	r3, [r4, #0]
 8026440:	1c5a      	adds	r2, r3, #1
 8026442:	6022      	str	r2, [r4, #0]
 8026444:	701f      	strb	r7, [r3, #0]
 8026446:	6963      	ldr	r3, [r4, #20]
 8026448:	4283      	cmp	r3, r0
 802644a:	d004      	beq.n	8026456 <__swbuf_r+0x76>
 802644c:	89a3      	ldrh	r3, [r4, #12]
 802644e:	07db      	lsls	r3, r3, #31
 8026450:	d5e1      	bpl.n	8026416 <__swbuf_r+0x36>
 8026452:	2d0a      	cmp	r5, #10
 8026454:	d1df      	bne.n	8026416 <__swbuf_r+0x36>
 8026456:	0021      	movs	r1, r4
 8026458:	0030      	movs	r0, r6
 802645a:	f002 fc2d 	bl	8028cb8 <_fflush_r>
 802645e:	2800      	cmp	r0, #0
 8026460:	d0d9      	beq.n	8026416 <__swbuf_r+0x36>
 8026462:	e7d6      	b.n	8026412 <__swbuf_r+0x32>

08026464 <__swsetup_r>:
 8026464:	4b2d      	ldr	r3, [pc, #180]	@ (802651c <__swsetup_r+0xb8>)
 8026466:	b570      	push	{r4, r5, r6, lr}
 8026468:	0005      	movs	r5, r0
 802646a:	6818      	ldr	r0, [r3, #0]
 802646c:	000c      	movs	r4, r1
 802646e:	2800      	cmp	r0, #0
 8026470:	d004      	beq.n	802647c <__swsetup_r+0x18>
 8026472:	6a03      	ldr	r3, [r0, #32]
 8026474:	2b00      	cmp	r3, #0
 8026476:	d101      	bne.n	802647c <__swsetup_r+0x18>
 8026478:	f7ff fe66 	bl	8026148 <__sinit>
 802647c:	220c      	movs	r2, #12
 802647e:	5ea3      	ldrsh	r3, [r4, r2]
 8026480:	071a      	lsls	r2, r3, #28
 8026482:	d423      	bmi.n	80264cc <__swsetup_r+0x68>
 8026484:	06da      	lsls	r2, r3, #27
 8026486:	d407      	bmi.n	8026498 <__swsetup_r+0x34>
 8026488:	2209      	movs	r2, #9
 802648a:	602a      	str	r2, [r5, #0]
 802648c:	2240      	movs	r2, #64	@ 0x40
 802648e:	2001      	movs	r0, #1
 8026490:	4313      	orrs	r3, r2
 8026492:	81a3      	strh	r3, [r4, #12]
 8026494:	4240      	negs	r0, r0
 8026496:	e03a      	b.n	802650e <__swsetup_r+0xaa>
 8026498:	075b      	lsls	r3, r3, #29
 802649a:	d513      	bpl.n	80264c4 <__swsetup_r+0x60>
 802649c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 802649e:	2900      	cmp	r1, #0
 80264a0:	d008      	beq.n	80264b4 <__swsetup_r+0x50>
 80264a2:	0023      	movs	r3, r4
 80264a4:	3344      	adds	r3, #68	@ 0x44
 80264a6:	4299      	cmp	r1, r3
 80264a8:	d002      	beq.n	80264b0 <__swsetup_r+0x4c>
 80264aa:	0028      	movs	r0, r5
 80264ac:	f000 ff9a 	bl	80273e4 <_free_r>
 80264b0:	2300      	movs	r3, #0
 80264b2:	6363      	str	r3, [r4, #52]	@ 0x34
 80264b4:	2224      	movs	r2, #36	@ 0x24
 80264b6:	89a3      	ldrh	r3, [r4, #12]
 80264b8:	4393      	bics	r3, r2
 80264ba:	81a3      	strh	r3, [r4, #12]
 80264bc:	2300      	movs	r3, #0
 80264be:	6063      	str	r3, [r4, #4]
 80264c0:	6923      	ldr	r3, [r4, #16]
 80264c2:	6023      	str	r3, [r4, #0]
 80264c4:	2308      	movs	r3, #8
 80264c6:	89a2      	ldrh	r2, [r4, #12]
 80264c8:	4313      	orrs	r3, r2
 80264ca:	81a3      	strh	r3, [r4, #12]
 80264cc:	6923      	ldr	r3, [r4, #16]
 80264ce:	2b00      	cmp	r3, #0
 80264d0:	d10b      	bne.n	80264ea <__swsetup_r+0x86>
 80264d2:	21a0      	movs	r1, #160	@ 0xa0
 80264d4:	2280      	movs	r2, #128	@ 0x80
 80264d6:	89a3      	ldrh	r3, [r4, #12]
 80264d8:	0089      	lsls	r1, r1, #2
 80264da:	0092      	lsls	r2, r2, #2
 80264dc:	400b      	ands	r3, r1
 80264de:	4293      	cmp	r3, r2
 80264e0:	d003      	beq.n	80264ea <__swsetup_r+0x86>
 80264e2:	0021      	movs	r1, r4
 80264e4:	0028      	movs	r0, r5
 80264e6:	f002 fc3d 	bl	8028d64 <__smakebuf_r>
 80264ea:	220c      	movs	r2, #12
 80264ec:	5ea3      	ldrsh	r3, [r4, r2]
 80264ee:	2101      	movs	r1, #1
 80264f0:	001a      	movs	r2, r3
 80264f2:	400a      	ands	r2, r1
 80264f4:	420b      	tst	r3, r1
 80264f6:	d00b      	beq.n	8026510 <__swsetup_r+0xac>
 80264f8:	2200      	movs	r2, #0
 80264fa:	60a2      	str	r2, [r4, #8]
 80264fc:	6962      	ldr	r2, [r4, #20]
 80264fe:	4252      	negs	r2, r2
 8026500:	61a2      	str	r2, [r4, #24]
 8026502:	2000      	movs	r0, #0
 8026504:	6922      	ldr	r2, [r4, #16]
 8026506:	4282      	cmp	r2, r0
 8026508:	d101      	bne.n	802650e <__swsetup_r+0xaa>
 802650a:	061a      	lsls	r2, r3, #24
 802650c:	d4be      	bmi.n	802648c <__swsetup_r+0x28>
 802650e:	bd70      	pop	{r4, r5, r6, pc}
 8026510:	0799      	lsls	r1, r3, #30
 8026512:	d400      	bmi.n	8026516 <__swsetup_r+0xb2>
 8026514:	6962      	ldr	r2, [r4, #20]
 8026516:	60a2      	str	r2, [r4, #8]
 8026518:	e7f3      	b.n	8026502 <__swsetup_r+0x9e>
 802651a:	46c0      	nop			@ (mov r8, r8)
 802651c:	200003ec 	.word	0x200003ec

08026520 <memset>:
 8026520:	0003      	movs	r3, r0
 8026522:	1882      	adds	r2, r0, r2
 8026524:	4293      	cmp	r3, r2
 8026526:	d100      	bne.n	802652a <memset+0xa>
 8026528:	4770      	bx	lr
 802652a:	7019      	strb	r1, [r3, #0]
 802652c:	3301      	adds	r3, #1
 802652e:	e7f9      	b.n	8026524 <memset+0x4>

08026530 <strchr>:
 8026530:	b2c9      	uxtb	r1, r1
 8026532:	7803      	ldrb	r3, [r0, #0]
 8026534:	2b00      	cmp	r3, #0
 8026536:	d004      	beq.n	8026542 <strchr+0x12>
 8026538:	428b      	cmp	r3, r1
 802653a:	d100      	bne.n	802653e <strchr+0xe>
 802653c:	4770      	bx	lr
 802653e:	3001      	adds	r0, #1
 8026540:	e7f7      	b.n	8026532 <strchr+0x2>
 8026542:	424b      	negs	r3, r1
 8026544:	4159      	adcs	r1, r3
 8026546:	4249      	negs	r1, r1
 8026548:	4008      	ands	r0, r1
 802654a:	e7f7      	b.n	802653c <strchr+0xc>

0802654c <strncmp>:
 802654c:	b530      	push	{r4, r5, lr}
 802654e:	0005      	movs	r5, r0
 8026550:	1e10      	subs	r0, r2, #0
 8026552:	d00b      	beq.n	802656c <strncmp+0x20>
 8026554:	2400      	movs	r4, #0
 8026556:	3a01      	subs	r2, #1
 8026558:	5d2b      	ldrb	r3, [r5, r4]
 802655a:	5d08      	ldrb	r0, [r1, r4]
 802655c:	4283      	cmp	r3, r0
 802655e:	d104      	bne.n	802656a <strncmp+0x1e>
 8026560:	4294      	cmp	r4, r2
 8026562:	d002      	beq.n	802656a <strncmp+0x1e>
 8026564:	3401      	adds	r4, #1
 8026566:	2b00      	cmp	r3, #0
 8026568:	d1f6      	bne.n	8026558 <strncmp+0xc>
 802656a:	1a18      	subs	r0, r3, r0
 802656c:	bd30      	pop	{r4, r5, pc}

0802656e <strncpy>:
 802656e:	0003      	movs	r3, r0
 8026570:	b530      	push	{r4, r5, lr}
 8026572:	001d      	movs	r5, r3
 8026574:	2a00      	cmp	r2, #0
 8026576:	d006      	beq.n	8026586 <strncpy+0x18>
 8026578:	780c      	ldrb	r4, [r1, #0]
 802657a:	3a01      	subs	r2, #1
 802657c:	3301      	adds	r3, #1
 802657e:	702c      	strb	r4, [r5, #0]
 8026580:	3101      	adds	r1, #1
 8026582:	2c00      	cmp	r4, #0
 8026584:	d1f5      	bne.n	8026572 <strncpy+0x4>
 8026586:	2100      	movs	r1, #0
 8026588:	189a      	adds	r2, r3, r2
 802658a:	4293      	cmp	r3, r2
 802658c:	d100      	bne.n	8026590 <strncpy+0x22>
 802658e:	bd30      	pop	{r4, r5, pc}
 8026590:	7019      	strb	r1, [r3, #0]
 8026592:	3301      	adds	r3, #1
 8026594:	e7f9      	b.n	802658a <strncpy+0x1c>

08026596 <strstr>:
 8026596:	780a      	ldrb	r2, [r1, #0]
 8026598:	b530      	push	{r4, r5, lr}
 802659a:	2a00      	cmp	r2, #0
 802659c:	d10c      	bne.n	80265b8 <strstr+0x22>
 802659e:	bd30      	pop	{r4, r5, pc}
 80265a0:	429a      	cmp	r2, r3
 80265a2:	d108      	bne.n	80265b6 <strstr+0x20>
 80265a4:	2301      	movs	r3, #1
 80265a6:	5ccc      	ldrb	r4, [r1, r3]
 80265a8:	2c00      	cmp	r4, #0
 80265aa:	d0f8      	beq.n	802659e <strstr+0x8>
 80265ac:	5cc5      	ldrb	r5, [r0, r3]
 80265ae:	42a5      	cmp	r5, r4
 80265b0:	d101      	bne.n	80265b6 <strstr+0x20>
 80265b2:	3301      	adds	r3, #1
 80265b4:	e7f7      	b.n	80265a6 <strstr+0x10>
 80265b6:	3001      	adds	r0, #1
 80265b8:	7803      	ldrb	r3, [r0, #0]
 80265ba:	2b00      	cmp	r3, #0
 80265bc:	d1f0      	bne.n	80265a0 <strstr+0xa>
 80265be:	0018      	movs	r0, r3
 80265c0:	e7ed      	b.n	802659e <strstr+0x8>
	...

080265c4 <_localeconv_r>:
 80265c4:	4800      	ldr	r0, [pc, #0]	@ (80265c8 <_localeconv_r+0x4>)
 80265c6:	4770      	bx	lr
 80265c8:	20000370 	.word	0x20000370

080265cc <_close_r>:
 80265cc:	2300      	movs	r3, #0
 80265ce:	b570      	push	{r4, r5, r6, lr}
 80265d0:	4d06      	ldr	r5, [pc, #24]	@ (80265ec <_close_r+0x20>)
 80265d2:	0004      	movs	r4, r0
 80265d4:	0008      	movs	r0, r1
 80265d6:	602b      	str	r3, [r5, #0]
 80265d8:	f7ec ffd2 	bl	8013580 <_close>
 80265dc:	1c43      	adds	r3, r0, #1
 80265de:	d103      	bne.n	80265e8 <_close_r+0x1c>
 80265e0:	682b      	ldr	r3, [r5, #0]
 80265e2:	2b00      	cmp	r3, #0
 80265e4:	d000      	beq.n	80265e8 <_close_r+0x1c>
 80265e6:	6023      	str	r3, [r4, #0]
 80265e8:	bd70      	pop	{r4, r5, r6, pc}
 80265ea:	46c0      	nop			@ (mov r8, r8)
 80265ec:	2000390c 	.word	0x2000390c

080265f0 <_lseek_r>:
 80265f0:	b570      	push	{r4, r5, r6, lr}
 80265f2:	0004      	movs	r4, r0
 80265f4:	0008      	movs	r0, r1
 80265f6:	0011      	movs	r1, r2
 80265f8:	001a      	movs	r2, r3
 80265fa:	2300      	movs	r3, #0
 80265fc:	4d05      	ldr	r5, [pc, #20]	@ (8026614 <_lseek_r+0x24>)
 80265fe:	602b      	str	r3, [r5, #0]
 8026600:	f7ec ffdf 	bl	80135c2 <_lseek>
 8026604:	1c43      	adds	r3, r0, #1
 8026606:	d103      	bne.n	8026610 <_lseek_r+0x20>
 8026608:	682b      	ldr	r3, [r5, #0]
 802660a:	2b00      	cmp	r3, #0
 802660c:	d000      	beq.n	8026610 <_lseek_r+0x20>
 802660e:	6023      	str	r3, [r4, #0]
 8026610:	bd70      	pop	{r4, r5, r6, pc}
 8026612:	46c0      	nop			@ (mov r8, r8)
 8026614:	2000390c 	.word	0x2000390c

08026618 <_read_r>:
 8026618:	b570      	push	{r4, r5, r6, lr}
 802661a:	0004      	movs	r4, r0
 802661c:	0008      	movs	r0, r1
 802661e:	0011      	movs	r1, r2
 8026620:	001a      	movs	r2, r3
 8026622:	2300      	movs	r3, #0
 8026624:	4d05      	ldr	r5, [pc, #20]	@ (802663c <_read_r+0x24>)
 8026626:	602b      	str	r3, [r5, #0]
 8026628:	f7ec ff8d 	bl	8013546 <_read>
 802662c:	1c43      	adds	r3, r0, #1
 802662e:	d103      	bne.n	8026638 <_read_r+0x20>
 8026630:	682b      	ldr	r3, [r5, #0]
 8026632:	2b00      	cmp	r3, #0
 8026634:	d000      	beq.n	8026638 <_read_r+0x20>
 8026636:	6023      	str	r3, [r4, #0]
 8026638:	bd70      	pop	{r4, r5, r6, pc}
 802663a:	46c0      	nop			@ (mov r8, r8)
 802663c:	2000390c 	.word	0x2000390c

08026640 <_write_r>:
 8026640:	b570      	push	{r4, r5, r6, lr}
 8026642:	0004      	movs	r4, r0
 8026644:	0008      	movs	r0, r1
 8026646:	0011      	movs	r1, r2
 8026648:	001a      	movs	r2, r3
 802664a:	2300      	movs	r3, #0
 802664c:	4d05      	ldr	r5, [pc, #20]	@ (8026664 <_write_r+0x24>)
 802664e:	602b      	str	r3, [r5, #0]
 8026650:	f7ed fc5a 	bl	8013f08 <_write>
 8026654:	1c43      	adds	r3, r0, #1
 8026656:	d103      	bne.n	8026660 <_write_r+0x20>
 8026658:	682b      	ldr	r3, [r5, #0]
 802665a:	2b00      	cmp	r3, #0
 802665c:	d000      	beq.n	8026660 <_write_r+0x20>
 802665e:	6023      	str	r3, [r4, #0]
 8026660:	bd70      	pop	{r4, r5, r6, pc}
 8026662:	46c0      	nop			@ (mov r8, r8)
 8026664:	2000390c 	.word	0x2000390c

08026668 <__errno>:
 8026668:	4b01      	ldr	r3, [pc, #4]	@ (8026670 <__errno+0x8>)
 802666a:	6818      	ldr	r0, [r3, #0]
 802666c:	4770      	bx	lr
 802666e:	46c0      	nop			@ (mov r8, r8)
 8026670:	200003ec 	.word	0x200003ec

08026674 <__libc_init_array>:
 8026674:	b570      	push	{r4, r5, r6, lr}
 8026676:	2600      	movs	r6, #0
 8026678:	4c0c      	ldr	r4, [pc, #48]	@ (80266ac <__libc_init_array+0x38>)
 802667a:	4d0d      	ldr	r5, [pc, #52]	@ (80266b0 <__libc_init_array+0x3c>)
 802667c:	1b64      	subs	r4, r4, r5
 802667e:	10a4      	asrs	r4, r4, #2
 8026680:	42a6      	cmp	r6, r4
 8026682:	d109      	bne.n	8026698 <__libc_init_array+0x24>
 8026684:	2600      	movs	r6, #0
 8026686:	f003 ffcb 	bl	802a620 <_init>
 802668a:	4c0a      	ldr	r4, [pc, #40]	@ (80266b4 <__libc_init_array+0x40>)
 802668c:	4d0a      	ldr	r5, [pc, #40]	@ (80266b8 <__libc_init_array+0x44>)
 802668e:	1b64      	subs	r4, r4, r5
 8026690:	10a4      	asrs	r4, r4, #2
 8026692:	42a6      	cmp	r6, r4
 8026694:	d105      	bne.n	80266a2 <__libc_init_array+0x2e>
 8026696:	bd70      	pop	{r4, r5, r6, pc}
 8026698:	00b3      	lsls	r3, r6, #2
 802669a:	58eb      	ldr	r3, [r5, r3]
 802669c:	4798      	blx	r3
 802669e:	3601      	adds	r6, #1
 80266a0:	e7ee      	b.n	8026680 <__libc_init_array+0xc>
 80266a2:	00b3      	lsls	r3, r6, #2
 80266a4:	58eb      	ldr	r3, [r5, r3]
 80266a6:	4798      	blx	r3
 80266a8:	3601      	adds	r6, #1
 80266aa:	e7f2      	b.n	8026692 <__libc_init_array+0x1e>
 80266ac:	0802eea8 	.word	0x0802eea8
 80266b0:	0802eea8 	.word	0x0802eea8
 80266b4:	0802eeac 	.word	0x0802eeac
 80266b8:	0802eea8 	.word	0x0802eea8

080266bc <__retarget_lock_init_recursive>:
 80266bc:	4770      	bx	lr

080266be <__retarget_lock_acquire_recursive>:
 80266be:	4770      	bx	lr

080266c0 <__retarget_lock_release_recursive>:
 80266c0:	4770      	bx	lr

080266c2 <memchr>:
 80266c2:	b2c9      	uxtb	r1, r1
 80266c4:	1882      	adds	r2, r0, r2
 80266c6:	4290      	cmp	r0, r2
 80266c8:	d101      	bne.n	80266ce <memchr+0xc>
 80266ca:	2000      	movs	r0, #0
 80266cc:	4770      	bx	lr
 80266ce:	7803      	ldrb	r3, [r0, #0]
 80266d0:	428b      	cmp	r3, r1
 80266d2:	d0fb      	beq.n	80266cc <memchr+0xa>
 80266d4:	3001      	adds	r0, #1
 80266d6:	e7f6      	b.n	80266c6 <memchr+0x4>

080266d8 <memcpy>:
 80266d8:	2300      	movs	r3, #0
 80266da:	b510      	push	{r4, lr}
 80266dc:	429a      	cmp	r2, r3
 80266de:	d100      	bne.n	80266e2 <memcpy+0xa>
 80266e0:	bd10      	pop	{r4, pc}
 80266e2:	5ccc      	ldrb	r4, [r1, r3]
 80266e4:	54c4      	strb	r4, [r0, r3]
 80266e6:	3301      	adds	r3, #1
 80266e8:	e7f8      	b.n	80266dc <memcpy+0x4>
	...

080266ec <nan>:
 80266ec:	2000      	movs	r0, #0
 80266ee:	4901      	ldr	r1, [pc, #4]	@ (80266f4 <nan+0x8>)
 80266f0:	4770      	bx	lr
 80266f2:	46c0      	nop			@ (mov r8, r8)
 80266f4:	7ff80000 	.word	0x7ff80000

080266f8 <quorem>:
 80266f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80266fa:	6903      	ldr	r3, [r0, #16]
 80266fc:	690c      	ldr	r4, [r1, #16]
 80266fe:	b089      	sub	sp, #36	@ 0x24
 8026700:	9003      	str	r0, [sp, #12]
 8026702:	9106      	str	r1, [sp, #24]
 8026704:	2000      	movs	r0, #0
 8026706:	42a3      	cmp	r3, r4
 8026708:	db63      	blt.n	80267d2 <quorem+0xda>
 802670a:	000b      	movs	r3, r1
 802670c:	3c01      	subs	r4, #1
 802670e:	3314      	adds	r3, #20
 8026710:	00a5      	lsls	r5, r4, #2
 8026712:	9304      	str	r3, [sp, #16]
 8026714:	195b      	adds	r3, r3, r5
 8026716:	9305      	str	r3, [sp, #20]
 8026718:	9b03      	ldr	r3, [sp, #12]
 802671a:	3314      	adds	r3, #20
 802671c:	9301      	str	r3, [sp, #4]
 802671e:	195d      	adds	r5, r3, r5
 8026720:	9b05      	ldr	r3, [sp, #20]
 8026722:	682f      	ldr	r7, [r5, #0]
 8026724:	681e      	ldr	r6, [r3, #0]
 8026726:	0038      	movs	r0, r7
 8026728:	3601      	adds	r6, #1
 802672a:	0031      	movs	r1, r6
 802672c:	f7d9 fd3a 	bl	80001a4 <__udivsi3>
 8026730:	9002      	str	r0, [sp, #8]
 8026732:	42b7      	cmp	r7, r6
 8026734:	d327      	bcc.n	8026786 <quorem+0x8e>
 8026736:	9b04      	ldr	r3, [sp, #16]
 8026738:	2700      	movs	r7, #0
 802673a:	469c      	mov	ip, r3
 802673c:	9e01      	ldr	r6, [sp, #4]
 802673e:	9707      	str	r7, [sp, #28]
 8026740:	4662      	mov	r2, ip
 8026742:	ca08      	ldmia	r2!, {r3}
 8026744:	6830      	ldr	r0, [r6, #0]
 8026746:	4694      	mov	ip, r2
 8026748:	9a02      	ldr	r2, [sp, #8]
 802674a:	b299      	uxth	r1, r3
 802674c:	4351      	muls	r1, r2
 802674e:	0c1b      	lsrs	r3, r3, #16
 8026750:	4353      	muls	r3, r2
 8026752:	19c9      	adds	r1, r1, r7
 8026754:	0c0a      	lsrs	r2, r1, #16
 8026756:	189b      	adds	r3, r3, r2
 8026758:	b289      	uxth	r1, r1
 802675a:	b282      	uxth	r2, r0
 802675c:	1a52      	subs	r2, r2, r1
 802675e:	9907      	ldr	r1, [sp, #28]
 8026760:	0c1f      	lsrs	r7, r3, #16
 8026762:	1852      	adds	r2, r2, r1
 8026764:	0c00      	lsrs	r0, r0, #16
 8026766:	b29b      	uxth	r3, r3
 8026768:	1411      	asrs	r1, r2, #16
 802676a:	1ac3      	subs	r3, r0, r3
 802676c:	185b      	adds	r3, r3, r1
 802676e:	1419      	asrs	r1, r3, #16
 8026770:	b292      	uxth	r2, r2
 8026772:	041b      	lsls	r3, r3, #16
 8026774:	431a      	orrs	r2, r3
 8026776:	9b05      	ldr	r3, [sp, #20]
 8026778:	9107      	str	r1, [sp, #28]
 802677a:	c604      	stmia	r6!, {r2}
 802677c:	4563      	cmp	r3, ip
 802677e:	d2df      	bcs.n	8026740 <quorem+0x48>
 8026780:	682b      	ldr	r3, [r5, #0]
 8026782:	2b00      	cmp	r3, #0
 8026784:	d02b      	beq.n	80267de <quorem+0xe6>
 8026786:	9906      	ldr	r1, [sp, #24]
 8026788:	9803      	ldr	r0, [sp, #12]
 802678a:	f001 fd6f 	bl	802826c <__mcmp>
 802678e:	2800      	cmp	r0, #0
 8026790:	db1e      	blt.n	80267d0 <quorem+0xd8>
 8026792:	2600      	movs	r6, #0
 8026794:	9d01      	ldr	r5, [sp, #4]
 8026796:	9904      	ldr	r1, [sp, #16]
 8026798:	c901      	ldmia	r1!, {r0}
 802679a:	682b      	ldr	r3, [r5, #0]
 802679c:	b287      	uxth	r7, r0
 802679e:	b29a      	uxth	r2, r3
 80267a0:	1bd2      	subs	r2, r2, r7
 80267a2:	1992      	adds	r2, r2, r6
 80267a4:	0c00      	lsrs	r0, r0, #16
 80267a6:	0c1b      	lsrs	r3, r3, #16
 80267a8:	1a1b      	subs	r3, r3, r0
 80267aa:	1410      	asrs	r0, r2, #16
 80267ac:	181b      	adds	r3, r3, r0
 80267ae:	141e      	asrs	r6, r3, #16
 80267b0:	b292      	uxth	r2, r2
 80267b2:	041b      	lsls	r3, r3, #16
 80267b4:	431a      	orrs	r2, r3
 80267b6:	9b05      	ldr	r3, [sp, #20]
 80267b8:	c504      	stmia	r5!, {r2}
 80267ba:	428b      	cmp	r3, r1
 80267bc:	d2ec      	bcs.n	8026798 <quorem+0xa0>
 80267be:	9a01      	ldr	r2, [sp, #4]
 80267c0:	00a3      	lsls	r3, r4, #2
 80267c2:	18d3      	adds	r3, r2, r3
 80267c4:	681a      	ldr	r2, [r3, #0]
 80267c6:	2a00      	cmp	r2, #0
 80267c8:	d014      	beq.n	80267f4 <quorem+0xfc>
 80267ca:	9b02      	ldr	r3, [sp, #8]
 80267cc:	3301      	adds	r3, #1
 80267ce:	9302      	str	r3, [sp, #8]
 80267d0:	9802      	ldr	r0, [sp, #8]
 80267d2:	b009      	add	sp, #36	@ 0x24
 80267d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80267d6:	682b      	ldr	r3, [r5, #0]
 80267d8:	2b00      	cmp	r3, #0
 80267da:	d104      	bne.n	80267e6 <quorem+0xee>
 80267dc:	3c01      	subs	r4, #1
 80267de:	9b01      	ldr	r3, [sp, #4]
 80267e0:	3d04      	subs	r5, #4
 80267e2:	42ab      	cmp	r3, r5
 80267e4:	d3f7      	bcc.n	80267d6 <quorem+0xde>
 80267e6:	9b03      	ldr	r3, [sp, #12]
 80267e8:	611c      	str	r4, [r3, #16]
 80267ea:	e7cc      	b.n	8026786 <quorem+0x8e>
 80267ec:	681a      	ldr	r2, [r3, #0]
 80267ee:	2a00      	cmp	r2, #0
 80267f0:	d104      	bne.n	80267fc <quorem+0x104>
 80267f2:	3c01      	subs	r4, #1
 80267f4:	9a01      	ldr	r2, [sp, #4]
 80267f6:	3b04      	subs	r3, #4
 80267f8:	429a      	cmp	r2, r3
 80267fa:	d3f7      	bcc.n	80267ec <quorem+0xf4>
 80267fc:	9b03      	ldr	r3, [sp, #12]
 80267fe:	611c      	str	r4, [r3, #16]
 8026800:	e7e3      	b.n	80267ca <quorem+0xd2>
	...

08026804 <_dtoa_r>:
 8026804:	b5f0      	push	{r4, r5, r6, r7, lr}
 8026806:	0014      	movs	r4, r2
 8026808:	001d      	movs	r5, r3
 802680a:	69c6      	ldr	r6, [r0, #28]
 802680c:	b09d      	sub	sp, #116	@ 0x74
 802680e:	940a      	str	r4, [sp, #40]	@ 0x28
 8026810:	950b      	str	r5, [sp, #44]	@ 0x2c
 8026812:	9f25      	ldr	r7, [sp, #148]	@ 0x94
 8026814:	9003      	str	r0, [sp, #12]
 8026816:	2e00      	cmp	r6, #0
 8026818:	d10f      	bne.n	802683a <_dtoa_r+0x36>
 802681a:	2010      	movs	r0, #16
 802681c:	f001 f986 	bl	8027b2c <malloc>
 8026820:	9b03      	ldr	r3, [sp, #12]
 8026822:	1e02      	subs	r2, r0, #0
 8026824:	61d8      	str	r0, [r3, #28]
 8026826:	d104      	bne.n	8026832 <_dtoa_r+0x2e>
 8026828:	21ef      	movs	r1, #239	@ 0xef
 802682a:	4bc7      	ldr	r3, [pc, #796]	@ (8026b48 <_dtoa_r+0x344>)
 802682c:	48c7      	ldr	r0, [pc, #796]	@ (8026b4c <_dtoa_r+0x348>)
 802682e:	f002 fb23 	bl	8028e78 <__assert_func>
 8026832:	6046      	str	r6, [r0, #4]
 8026834:	6086      	str	r6, [r0, #8]
 8026836:	6006      	str	r6, [r0, #0]
 8026838:	60c6      	str	r6, [r0, #12]
 802683a:	9b03      	ldr	r3, [sp, #12]
 802683c:	69db      	ldr	r3, [r3, #28]
 802683e:	6819      	ldr	r1, [r3, #0]
 8026840:	2900      	cmp	r1, #0
 8026842:	d00b      	beq.n	802685c <_dtoa_r+0x58>
 8026844:	685a      	ldr	r2, [r3, #4]
 8026846:	2301      	movs	r3, #1
 8026848:	4093      	lsls	r3, r2
 802684a:	604a      	str	r2, [r1, #4]
 802684c:	608b      	str	r3, [r1, #8]
 802684e:	9803      	ldr	r0, [sp, #12]
 8026850:	f001 fa7e 	bl	8027d50 <_Bfree>
 8026854:	2200      	movs	r2, #0
 8026856:	9b03      	ldr	r3, [sp, #12]
 8026858:	69db      	ldr	r3, [r3, #28]
 802685a:	601a      	str	r2, [r3, #0]
 802685c:	2d00      	cmp	r5, #0
 802685e:	da1e      	bge.n	802689e <_dtoa_r+0x9a>
 8026860:	2301      	movs	r3, #1
 8026862:	603b      	str	r3, [r7, #0]
 8026864:	006b      	lsls	r3, r5, #1
 8026866:	085b      	lsrs	r3, r3, #1
 8026868:	930b      	str	r3, [sp, #44]	@ 0x2c
 802686a:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 802686c:	4bb8      	ldr	r3, [pc, #736]	@ (8026b50 <_dtoa_r+0x34c>)
 802686e:	4ab8      	ldr	r2, [pc, #736]	@ (8026b50 <_dtoa_r+0x34c>)
 8026870:	403b      	ands	r3, r7
 8026872:	4293      	cmp	r3, r2
 8026874:	d116      	bne.n	80268a4 <_dtoa_r+0xa0>
 8026876:	4bb7      	ldr	r3, [pc, #732]	@ (8026b54 <_dtoa_r+0x350>)
 8026878:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 802687a:	6013      	str	r3, [r2, #0]
 802687c:	033b      	lsls	r3, r7, #12
 802687e:	0b1b      	lsrs	r3, r3, #12
 8026880:	4323      	orrs	r3, r4
 8026882:	d101      	bne.n	8026888 <_dtoa_r+0x84>
 8026884:	f000 fd80 	bl	8027388 <_dtoa_r+0xb84>
 8026888:	4bb3      	ldr	r3, [pc, #716]	@ (8026b58 <_dtoa_r+0x354>)
 802688a:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 802688c:	9308      	str	r3, [sp, #32]
 802688e:	2a00      	cmp	r2, #0
 8026890:	d002      	beq.n	8026898 <_dtoa_r+0x94>
 8026892:	4bb2      	ldr	r3, [pc, #712]	@ (8026b5c <_dtoa_r+0x358>)
 8026894:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 8026896:	6013      	str	r3, [r2, #0]
 8026898:	9808      	ldr	r0, [sp, #32]
 802689a:	b01d      	add	sp, #116	@ 0x74
 802689c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802689e:	2300      	movs	r3, #0
 80268a0:	603b      	str	r3, [r7, #0]
 80268a2:	e7e2      	b.n	802686a <_dtoa_r+0x66>
 80268a4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80268a6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80268a8:	9212      	str	r2, [sp, #72]	@ 0x48
 80268aa:	9313      	str	r3, [sp, #76]	@ 0x4c
 80268ac:	9812      	ldr	r0, [sp, #72]	@ 0x48
 80268ae:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 80268b0:	2200      	movs	r2, #0
 80268b2:	2300      	movs	r3, #0
 80268b4:	f7d9 fdfc 	bl	80004b0 <__aeabi_dcmpeq>
 80268b8:	1e06      	subs	r6, r0, #0
 80268ba:	d00b      	beq.n	80268d4 <_dtoa_r+0xd0>
 80268bc:	2301      	movs	r3, #1
 80268be:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 80268c0:	6013      	str	r3, [r2, #0]
 80268c2:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 80268c4:	2b00      	cmp	r3, #0
 80268c6:	d002      	beq.n	80268ce <_dtoa_r+0xca>
 80268c8:	4ba5      	ldr	r3, [pc, #660]	@ (8026b60 <_dtoa_r+0x35c>)
 80268ca:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 80268cc:	6013      	str	r3, [r2, #0]
 80268ce:	4ba5      	ldr	r3, [pc, #660]	@ (8026b64 <_dtoa_r+0x360>)
 80268d0:	9308      	str	r3, [sp, #32]
 80268d2:	e7e1      	b.n	8026898 <_dtoa_r+0x94>
 80268d4:	ab1a      	add	r3, sp, #104	@ 0x68
 80268d6:	9301      	str	r3, [sp, #4]
 80268d8:	ab1b      	add	r3, sp, #108	@ 0x6c
 80268da:	9300      	str	r3, [sp, #0]
 80268dc:	9803      	ldr	r0, [sp, #12]
 80268de:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80268e0:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80268e2:	f001 fde5 	bl	80284b0 <__d2b>
 80268e6:	007a      	lsls	r2, r7, #1
 80268e8:	9005      	str	r0, [sp, #20]
 80268ea:	0d52      	lsrs	r2, r2, #21
 80268ec:	d100      	bne.n	80268f0 <_dtoa_r+0xec>
 80268ee:	e07b      	b.n	80269e8 <_dtoa_r+0x1e4>
 80268f0:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80268f2:	9618      	str	r6, [sp, #96]	@ 0x60
 80268f4:	0319      	lsls	r1, r3, #12
 80268f6:	4b9c      	ldr	r3, [pc, #624]	@ (8026b68 <_dtoa_r+0x364>)
 80268f8:	0b09      	lsrs	r1, r1, #12
 80268fa:	430b      	orrs	r3, r1
 80268fc:	499b      	ldr	r1, [pc, #620]	@ (8026b6c <_dtoa_r+0x368>)
 80268fe:	1857      	adds	r7, r2, r1
 8026900:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8026902:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8026904:	0019      	movs	r1, r3
 8026906:	2200      	movs	r2, #0
 8026908:	4b99      	ldr	r3, [pc, #612]	@ (8026b70 <_dtoa_r+0x36c>)
 802690a:	f7dc fb09 	bl	8002f20 <__aeabi_dsub>
 802690e:	4a99      	ldr	r2, [pc, #612]	@ (8026b74 <_dtoa_r+0x370>)
 8026910:	4b99      	ldr	r3, [pc, #612]	@ (8026b78 <_dtoa_r+0x374>)
 8026912:	f7dc f81f 	bl	8002954 <__aeabi_dmul>
 8026916:	4a99      	ldr	r2, [pc, #612]	@ (8026b7c <_dtoa_r+0x378>)
 8026918:	4b99      	ldr	r3, [pc, #612]	@ (8026b80 <_dtoa_r+0x37c>)
 802691a:	f7db f81b 	bl	8001954 <__aeabi_dadd>
 802691e:	0004      	movs	r4, r0
 8026920:	0038      	movs	r0, r7
 8026922:	000d      	movs	r5, r1
 8026924:	f7dc ff64 	bl	80037f0 <__aeabi_i2d>
 8026928:	4a96      	ldr	r2, [pc, #600]	@ (8026b84 <_dtoa_r+0x380>)
 802692a:	4b97      	ldr	r3, [pc, #604]	@ (8026b88 <_dtoa_r+0x384>)
 802692c:	f7dc f812 	bl	8002954 <__aeabi_dmul>
 8026930:	0002      	movs	r2, r0
 8026932:	000b      	movs	r3, r1
 8026934:	0020      	movs	r0, r4
 8026936:	0029      	movs	r1, r5
 8026938:	f7db f80c 	bl	8001954 <__aeabi_dadd>
 802693c:	0004      	movs	r4, r0
 802693e:	000d      	movs	r5, r1
 8026940:	f7dc ff1a 	bl	8003778 <__aeabi_d2iz>
 8026944:	2200      	movs	r2, #0
 8026946:	9004      	str	r0, [sp, #16]
 8026948:	2300      	movs	r3, #0
 802694a:	0020      	movs	r0, r4
 802694c:	0029      	movs	r1, r5
 802694e:	f7d9 fdb5 	bl	80004bc <__aeabi_dcmplt>
 8026952:	2800      	cmp	r0, #0
 8026954:	d00b      	beq.n	802696e <_dtoa_r+0x16a>
 8026956:	9804      	ldr	r0, [sp, #16]
 8026958:	f7dc ff4a 	bl	80037f0 <__aeabi_i2d>
 802695c:	002b      	movs	r3, r5
 802695e:	0022      	movs	r2, r4
 8026960:	f7d9 fda6 	bl	80004b0 <__aeabi_dcmpeq>
 8026964:	4243      	negs	r3, r0
 8026966:	4158      	adcs	r0, r3
 8026968:	9b04      	ldr	r3, [sp, #16]
 802696a:	1a1b      	subs	r3, r3, r0
 802696c:	9304      	str	r3, [sp, #16]
 802696e:	2301      	movs	r3, #1
 8026970:	9315      	str	r3, [sp, #84]	@ 0x54
 8026972:	9b04      	ldr	r3, [sp, #16]
 8026974:	2b16      	cmp	r3, #22
 8026976:	d810      	bhi.n	802699a <_dtoa_r+0x196>
 8026978:	9812      	ldr	r0, [sp, #72]	@ 0x48
 802697a:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 802697c:	9a04      	ldr	r2, [sp, #16]
 802697e:	4b83      	ldr	r3, [pc, #524]	@ (8026b8c <_dtoa_r+0x388>)
 8026980:	00d2      	lsls	r2, r2, #3
 8026982:	189b      	adds	r3, r3, r2
 8026984:	681a      	ldr	r2, [r3, #0]
 8026986:	685b      	ldr	r3, [r3, #4]
 8026988:	f7d9 fd98 	bl	80004bc <__aeabi_dcmplt>
 802698c:	2800      	cmp	r0, #0
 802698e:	d047      	beq.n	8026a20 <_dtoa_r+0x21c>
 8026990:	9b04      	ldr	r3, [sp, #16]
 8026992:	3b01      	subs	r3, #1
 8026994:	9304      	str	r3, [sp, #16]
 8026996:	2300      	movs	r3, #0
 8026998:	9315      	str	r3, [sp, #84]	@ 0x54
 802699a:	2200      	movs	r2, #0
 802699c:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 802699e:	9206      	str	r2, [sp, #24]
 80269a0:	1bdb      	subs	r3, r3, r7
 80269a2:	1e5a      	subs	r2, r3, #1
 80269a4:	d53e      	bpl.n	8026a24 <_dtoa_r+0x220>
 80269a6:	2201      	movs	r2, #1
 80269a8:	1ad3      	subs	r3, r2, r3
 80269aa:	9306      	str	r3, [sp, #24]
 80269ac:	2300      	movs	r3, #0
 80269ae:	930d      	str	r3, [sp, #52]	@ 0x34
 80269b0:	9b04      	ldr	r3, [sp, #16]
 80269b2:	2b00      	cmp	r3, #0
 80269b4:	db38      	blt.n	8026a28 <_dtoa_r+0x224>
 80269b6:	9a04      	ldr	r2, [sp, #16]
 80269b8:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80269ba:	4694      	mov	ip, r2
 80269bc:	4463      	add	r3, ip
 80269be:	930d      	str	r3, [sp, #52]	@ 0x34
 80269c0:	2300      	movs	r3, #0
 80269c2:	9214      	str	r2, [sp, #80]	@ 0x50
 80269c4:	930f      	str	r3, [sp, #60]	@ 0x3c
 80269c6:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 80269c8:	2401      	movs	r4, #1
 80269ca:	2b09      	cmp	r3, #9
 80269cc:	d862      	bhi.n	8026a94 <_dtoa_r+0x290>
 80269ce:	2b05      	cmp	r3, #5
 80269d0:	dd02      	ble.n	80269d8 <_dtoa_r+0x1d4>
 80269d2:	2400      	movs	r4, #0
 80269d4:	3b04      	subs	r3, #4
 80269d6:	9322      	str	r3, [sp, #136]	@ 0x88
 80269d8:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 80269da:	1e98      	subs	r0, r3, #2
 80269dc:	2803      	cmp	r0, #3
 80269de:	d863      	bhi.n	8026aa8 <_dtoa_r+0x2a4>
 80269e0:	f7d9 fbcc 	bl	800017c <__gnu_thumb1_case_uqi>
 80269e4:	2b385654 	.word	0x2b385654
 80269e8:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 80269ea:	9e1a      	ldr	r6, [sp, #104]	@ 0x68
 80269ec:	18f6      	adds	r6, r6, r3
 80269ee:	4b68      	ldr	r3, [pc, #416]	@ (8026b90 <_dtoa_r+0x38c>)
 80269f0:	18f2      	adds	r2, r6, r3
 80269f2:	2a20      	cmp	r2, #32
 80269f4:	dd0f      	ble.n	8026a16 <_dtoa_r+0x212>
 80269f6:	2340      	movs	r3, #64	@ 0x40
 80269f8:	1a9b      	subs	r3, r3, r2
 80269fa:	409f      	lsls	r7, r3
 80269fc:	4b65      	ldr	r3, [pc, #404]	@ (8026b94 <_dtoa_r+0x390>)
 80269fe:	0038      	movs	r0, r7
 8026a00:	18f3      	adds	r3, r6, r3
 8026a02:	40dc      	lsrs	r4, r3
 8026a04:	4320      	orrs	r0, r4
 8026a06:	f7dc ff21 	bl	800384c <__aeabi_ui2d>
 8026a0a:	2201      	movs	r2, #1
 8026a0c:	4b62      	ldr	r3, [pc, #392]	@ (8026b98 <_dtoa_r+0x394>)
 8026a0e:	1e77      	subs	r7, r6, #1
 8026a10:	18cb      	adds	r3, r1, r3
 8026a12:	9218      	str	r2, [sp, #96]	@ 0x60
 8026a14:	e776      	b.n	8026904 <_dtoa_r+0x100>
 8026a16:	2320      	movs	r3, #32
 8026a18:	0020      	movs	r0, r4
 8026a1a:	1a9b      	subs	r3, r3, r2
 8026a1c:	4098      	lsls	r0, r3
 8026a1e:	e7f2      	b.n	8026a06 <_dtoa_r+0x202>
 8026a20:	9015      	str	r0, [sp, #84]	@ 0x54
 8026a22:	e7ba      	b.n	802699a <_dtoa_r+0x196>
 8026a24:	920d      	str	r2, [sp, #52]	@ 0x34
 8026a26:	e7c3      	b.n	80269b0 <_dtoa_r+0x1ac>
 8026a28:	9b06      	ldr	r3, [sp, #24]
 8026a2a:	9a04      	ldr	r2, [sp, #16]
 8026a2c:	1a9b      	subs	r3, r3, r2
 8026a2e:	9306      	str	r3, [sp, #24]
 8026a30:	4253      	negs	r3, r2
 8026a32:	930f      	str	r3, [sp, #60]	@ 0x3c
 8026a34:	2300      	movs	r3, #0
 8026a36:	9314      	str	r3, [sp, #80]	@ 0x50
 8026a38:	e7c5      	b.n	80269c6 <_dtoa_r+0x1c2>
 8026a3a:	2301      	movs	r3, #1
 8026a3c:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8026a3e:	9310      	str	r3, [sp, #64]	@ 0x40
 8026a40:	4694      	mov	ip, r2
 8026a42:	9b04      	ldr	r3, [sp, #16]
 8026a44:	4463      	add	r3, ip
 8026a46:	930e      	str	r3, [sp, #56]	@ 0x38
 8026a48:	3301      	adds	r3, #1
 8026a4a:	9309      	str	r3, [sp, #36]	@ 0x24
 8026a4c:	2b00      	cmp	r3, #0
 8026a4e:	dc08      	bgt.n	8026a62 <_dtoa_r+0x25e>
 8026a50:	2301      	movs	r3, #1
 8026a52:	e006      	b.n	8026a62 <_dtoa_r+0x25e>
 8026a54:	2301      	movs	r3, #1
 8026a56:	9310      	str	r3, [sp, #64]	@ 0x40
 8026a58:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8026a5a:	2b00      	cmp	r3, #0
 8026a5c:	dd28      	ble.n	8026ab0 <_dtoa_r+0x2ac>
 8026a5e:	930e      	str	r3, [sp, #56]	@ 0x38
 8026a60:	9309      	str	r3, [sp, #36]	@ 0x24
 8026a62:	9a03      	ldr	r2, [sp, #12]
 8026a64:	2100      	movs	r1, #0
 8026a66:	69d0      	ldr	r0, [r2, #28]
 8026a68:	2204      	movs	r2, #4
 8026a6a:	0015      	movs	r5, r2
 8026a6c:	3514      	adds	r5, #20
 8026a6e:	429d      	cmp	r5, r3
 8026a70:	d923      	bls.n	8026aba <_dtoa_r+0x2b6>
 8026a72:	6041      	str	r1, [r0, #4]
 8026a74:	9803      	ldr	r0, [sp, #12]
 8026a76:	f001 f927 	bl	8027cc8 <_Balloc>
 8026a7a:	9008      	str	r0, [sp, #32]
 8026a7c:	2800      	cmp	r0, #0
 8026a7e:	d11f      	bne.n	8026ac0 <_dtoa_r+0x2bc>
 8026a80:	21b0      	movs	r1, #176	@ 0xb0
 8026a82:	4b46      	ldr	r3, [pc, #280]	@ (8026b9c <_dtoa_r+0x398>)
 8026a84:	4831      	ldr	r0, [pc, #196]	@ (8026b4c <_dtoa_r+0x348>)
 8026a86:	9a08      	ldr	r2, [sp, #32]
 8026a88:	31ff      	adds	r1, #255	@ 0xff
 8026a8a:	e6d0      	b.n	802682e <_dtoa_r+0x2a>
 8026a8c:	2300      	movs	r3, #0
 8026a8e:	e7e2      	b.n	8026a56 <_dtoa_r+0x252>
 8026a90:	2300      	movs	r3, #0
 8026a92:	e7d3      	b.n	8026a3c <_dtoa_r+0x238>
 8026a94:	2300      	movs	r3, #0
 8026a96:	9410      	str	r4, [sp, #64]	@ 0x40
 8026a98:	9322      	str	r3, [sp, #136]	@ 0x88
 8026a9a:	3b01      	subs	r3, #1
 8026a9c:	2200      	movs	r2, #0
 8026a9e:	930e      	str	r3, [sp, #56]	@ 0x38
 8026aa0:	9309      	str	r3, [sp, #36]	@ 0x24
 8026aa2:	3313      	adds	r3, #19
 8026aa4:	9223      	str	r2, [sp, #140]	@ 0x8c
 8026aa6:	e7dc      	b.n	8026a62 <_dtoa_r+0x25e>
 8026aa8:	2301      	movs	r3, #1
 8026aaa:	9310      	str	r3, [sp, #64]	@ 0x40
 8026aac:	3b02      	subs	r3, #2
 8026aae:	e7f5      	b.n	8026a9c <_dtoa_r+0x298>
 8026ab0:	2301      	movs	r3, #1
 8026ab2:	001a      	movs	r2, r3
 8026ab4:	930e      	str	r3, [sp, #56]	@ 0x38
 8026ab6:	9309      	str	r3, [sp, #36]	@ 0x24
 8026ab8:	e7f4      	b.n	8026aa4 <_dtoa_r+0x2a0>
 8026aba:	3101      	adds	r1, #1
 8026abc:	0052      	lsls	r2, r2, #1
 8026abe:	e7d4      	b.n	8026a6a <_dtoa_r+0x266>
 8026ac0:	9b03      	ldr	r3, [sp, #12]
 8026ac2:	9a08      	ldr	r2, [sp, #32]
 8026ac4:	69db      	ldr	r3, [r3, #28]
 8026ac6:	601a      	str	r2, [r3, #0]
 8026ac8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8026aca:	2b0e      	cmp	r3, #14
 8026acc:	d900      	bls.n	8026ad0 <_dtoa_r+0x2cc>
 8026ace:	e0d6      	b.n	8026c7e <_dtoa_r+0x47a>
 8026ad0:	2c00      	cmp	r4, #0
 8026ad2:	d100      	bne.n	8026ad6 <_dtoa_r+0x2d2>
 8026ad4:	e0d3      	b.n	8026c7e <_dtoa_r+0x47a>
 8026ad6:	9b04      	ldr	r3, [sp, #16]
 8026ad8:	2b00      	cmp	r3, #0
 8026ada:	dd63      	ble.n	8026ba4 <_dtoa_r+0x3a0>
 8026adc:	210f      	movs	r1, #15
 8026ade:	9a04      	ldr	r2, [sp, #16]
 8026ae0:	4b2a      	ldr	r3, [pc, #168]	@ (8026b8c <_dtoa_r+0x388>)
 8026ae2:	400a      	ands	r2, r1
 8026ae4:	00d2      	lsls	r2, r2, #3
 8026ae6:	189b      	adds	r3, r3, r2
 8026ae8:	681e      	ldr	r6, [r3, #0]
 8026aea:	685f      	ldr	r7, [r3, #4]
 8026aec:	9b04      	ldr	r3, [sp, #16]
 8026aee:	2402      	movs	r4, #2
 8026af0:	111d      	asrs	r5, r3, #4
 8026af2:	05db      	lsls	r3, r3, #23
 8026af4:	d50a      	bpl.n	8026b0c <_dtoa_r+0x308>
 8026af6:	4b2a      	ldr	r3, [pc, #168]	@ (8026ba0 <_dtoa_r+0x39c>)
 8026af8:	400d      	ands	r5, r1
 8026afa:	6a1a      	ldr	r2, [r3, #32]
 8026afc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8026afe:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8026b00:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8026b02:	f7db faed 	bl	80020e0 <__aeabi_ddiv>
 8026b06:	900a      	str	r0, [sp, #40]	@ 0x28
 8026b08:	910b      	str	r1, [sp, #44]	@ 0x2c
 8026b0a:	3401      	adds	r4, #1
 8026b0c:	4b24      	ldr	r3, [pc, #144]	@ (8026ba0 <_dtoa_r+0x39c>)
 8026b0e:	930c      	str	r3, [sp, #48]	@ 0x30
 8026b10:	2d00      	cmp	r5, #0
 8026b12:	d108      	bne.n	8026b26 <_dtoa_r+0x322>
 8026b14:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8026b16:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8026b18:	0032      	movs	r2, r6
 8026b1a:	003b      	movs	r3, r7
 8026b1c:	f7db fae0 	bl	80020e0 <__aeabi_ddiv>
 8026b20:	900a      	str	r0, [sp, #40]	@ 0x28
 8026b22:	910b      	str	r1, [sp, #44]	@ 0x2c
 8026b24:	e059      	b.n	8026bda <_dtoa_r+0x3d6>
 8026b26:	2301      	movs	r3, #1
 8026b28:	421d      	tst	r5, r3
 8026b2a:	d009      	beq.n	8026b40 <_dtoa_r+0x33c>
 8026b2c:	18e4      	adds	r4, r4, r3
 8026b2e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8026b30:	0030      	movs	r0, r6
 8026b32:	681a      	ldr	r2, [r3, #0]
 8026b34:	685b      	ldr	r3, [r3, #4]
 8026b36:	0039      	movs	r1, r7
 8026b38:	f7db ff0c 	bl	8002954 <__aeabi_dmul>
 8026b3c:	0006      	movs	r6, r0
 8026b3e:	000f      	movs	r7, r1
 8026b40:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8026b42:	106d      	asrs	r5, r5, #1
 8026b44:	3308      	adds	r3, #8
 8026b46:	e7e2      	b.n	8026b0e <_dtoa_r+0x30a>
 8026b48:	0802ea63 	.word	0x0802ea63
 8026b4c:	0802ea7a 	.word	0x0802ea7a
 8026b50:	7ff00000 	.word	0x7ff00000
 8026b54:	0000270f 	.word	0x0000270f
 8026b58:	0802ea5f 	.word	0x0802ea5f
 8026b5c:	0802ea62 	.word	0x0802ea62
 8026b60:	0802ea2b 	.word	0x0802ea2b
 8026b64:	0802ea2a 	.word	0x0802ea2a
 8026b68:	3ff00000 	.word	0x3ff00000
 8026b6c:	fffffc01 	.word	0xfffffc01
 8026b70:	3ff80000 	.word	0x3ff80000
 8026b74:	636f4361 	.word	0x636f4361
 8026b78:	3fd287a7 	.word	0x3fd287a7
 8026b7c:	8b60c8b3 	.word	0x8b60c8b3
 8026b80:	3fc68a28 	.word	0x3fc68a28
 8026b84:	509f79fb 	.word	0x509f79fb
 8026b88:	3fd34413 	.word	0x3fd34413
 8026b8c:	0802ed78 	.word	0x0802ed78
 8026b90:	00000432 	.word	0x00000432
 8026b94:	00000412 	.word	0x00000412
 8026b98:	fe100000 	.word	0xfe100000
 8026b9c:	0802ead2 	.word	0x0802ead2
 8026ba0:	0802ed50 	.word	0x0802ed50
 8026ba4:	9b04      	ldr	r3, [sp, #16]
 8026ba6:	2402      	movs	r4, #2
 8026ba8:	2b00      	cmp	r3, #0
 8026baa:	d016      	beq.n	8026bda <_dtoa_r+0x3d6>
 8026bac:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8026bae:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8026bb0:	220f      	movs	r2, #15
 8026bb2:	425d      	negs	r5, r3
 8026bb4:	402a      	ands	r2, r5
 8026bb6:	4bd5      	ldr	r3, [pc, #852]	@ (8026f0c <_dtoa_r+0x708>)
 8026bb8:	00d2      	lsls	r2, r2, #3
 8026bba:	189b      	adds	r3, r3, r2
 8026bbc:	681a      	ldr	r2, [r3, #0]
 8026bbe:	685b      	ldr	r3, [r3, #4]
 8026bc0:	f7db fec8 	bl	8002954 <__aeabi_dmul>
 8026bc4:	2701      	movs	r7, #1
 8026bc6:	2300      	movs	r3, #0
 8026bc8:	900a      	str	r0, [sp, #40]	@ 0x28
 8026bca:	910b      	str	r1, [sp, #44]	@ 0x2c
 8026bcc:	4ed0      	ldr	r6, [pc, #832]	@ (8026f10 <_dtoa_r+0x70c>)
 8026bce:	112d      	asrs	r5, r5, #4
 8026bd0:	2d00      	cmp	r5, #0
 8026bd2:	d000      	beq.n	8026bd6 <_dtoa_r+0x3d2>
 8026bd4:	e095      	b.n	8026d02 <_dtoa_r+0x4fe>
 8026bd6:	2b00      	cmp	r3, #0
 8026bd8:	d1a2      	bne.n	8026b20 <_dtoa_r+0x31c>
 8026bda:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8026bdc:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8026bde:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8026be0:	2b00      	cmp	r3, #0
 8026be2:	d100      	bne.n	8026be6 <_dtoa_r+0x3e2>
 8026be4:	e098      	b.n	8026d18 <_dtoa_r+0x514>
 8026be6:	2200      	movs	r2, #0
 8026be8:	0030      	movs	r0, r6
 8026bea:	0039      	movs	r1, r7
 8026bec:	4bc9      	ldr	r3, [pc, #804]	@ (8026f14 <_dtoa_r+0x710>)
 8026bee:	f7d9 fc65 	bl	80004bc <__aeabi_dcmplt>
 8026bf2:	2800      	cmp	r0, #0
 8026bf4:	d100      	bne.n	8026bf8 <_dtoa_r+0x3f4>
 8026bf6:	e08f      	b.n	8026d18 <_dtoa_r+0x514>
 8026bf8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8026bfa:	2b00      	cmp	r3, #0
 8026bfc:	d100      	bne.n	8026c00 <_dtoa_r+0x3fc>
 8026bfe:	e08b      	b.n	8026d18 <_dtoa_r+0x514>
 8026c00:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8026c02:	2b00      	cmp	r3, #0
 8026c04:	dd37      	ble.n	8026c76 <_dtoa_r+0x472>
 8026c06:	9b04      	ldr	r3, [sp, #16]
 8026c08:	2200      	movs	r2, #0
 8026c0a:	3b01      	subs	r3, #1
 8026c0c:	930c      	str	r3, [sp, #48]	@ 0x30
 8026c0e:	0030      	movs	r0, r6
 8026c10:	4bc1      	ldr	r3, [pc, #772]	@ (8026f18 <_dtoa_r+0x714>)
 8026c12:	0039      	movs	r1, r7
 8026c14:	f7db fe9e 	bl	8002954 <__aeabi_dmul>
 8026c18:	900a      	str	r0, [sp, #40]	@ 0x28
 8026c1a:	910b      	str	r1, [sp, #44]	@ 0x2c
 8026c1c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8026c1e:	3401      	adds	r4, #1
 8026c20:	0020      	movs	r0, r4
 8026c22:	9311      	str	r3, [sp, #68]	@ 0x44
 8026c24:	f7dc fde4 	bl	80037f0 <__aeabi_i2d>
 8026c28:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8026c2a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8026c2c:	f7db fe92 	bl	8002954 <__aeabi_dmul>
 8026c30:	4bba      	ldr	r3, [pc, #744]	@ (8026f1c <_dtoa_r+0x718>)
 8026c32:	2200      	movs	r2, #0
 8026c34:	f7da fe8e 	bl	8001954 <__aeabi_dadd>
 8026c38:	4bb9      	ldr	r3, [pc, #740]	@ (8026f20 <_dtoa_r+0x71c>)
 8026c3a:	0006      	movs	r6, r0
 8026c3c:	18cf      	adds	r7, r1, r3
 8026c3e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8026c40:	2b00      	cmp	r3, #0
 8026c42:	d16d      	bne.n	8026d20 <_dtoa_r+0x51c>
 8026c44:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8026c46:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8026c48:	2200      	movs	r2, #0
 8026c4a:	4bb6      	ldr	r3, [pc, #728]	@ (8026f24 <_dtoa_r+0x720>)
 8026c4c:	f7dc f968 	bl	8002f20 <__aeabi_dsub>
 8026c50:	0032      	movs	r2, r6
 8026c52:	003b      	movs	r3, r7
 8026c54:	0004      	movs	r4, r0
 8026c56:	000d      	movs	r5, r1
 8026c58:	f7d9 fc44 	bl	80004e4 <__aeabi_dcmpgt>
 8026c5c:	2800      	cmp	r0, #0
 8026c5e:	d000      	beq.n	8026c62 <_dtoa_r+0x45e>
 8026c60:	e2b6      	b.n	80271d0 <_dtoa_r+0x9cc>
 8026c62:	2180      	movs	r1, #128	@ 0x80
 8026c64:	0609      	lsls	r1, r1, #24
 8026c66:	187b      	adds	r3, r7, r1
 8026c68:	0032      	movs	r2, r6
 8026c6a:	0020      	movs	r0, r4
 8026c6c:	0029      	movs	r1, r5
 8026c6e:	f7d9 fc25 	bl	80004bc <__aeabi_dcmplt>
 8026c72:	2800      	cmp	r0, #0
 8026c74:	d128      	bne.n	8026cc8 <_dtoa_r+0x4c4>
 8026c76:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8026c78:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8026c7a:	930a      	str	r3, [sp, #40]	@ 0x28
 8026c7c:	940b      	str	r4, [sp, #44]	@ 0x2c
 8026c7e:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8026c80:	2b00      	cmp	r3, #0
 8026c82:	da00      	bge.n	8026c86 <_dtoa_r+0x482>
 8026c84:	e174      	b.n	8026f70 <_dtoa_r+0x76c>
 8026c86:	9a04      	ldr	r2, [sp, #16]
 8026c88:	2a0e      	cmp	r2, #14
 8026c8a:	dd00      	ble.n	8026c8e <_dtoa_r+0x48a>
 8026c8c:	e170      	b.n	8026f70 <_dtoa_r+0x76c>
 8026c8e:	4b9f      	ldr	r3, [pc, #636]	@ (8026f0c <_dtoa_r+0x708>)
 8026c90:	00d2      	lsls	r2, r2, #3
 8026c92:	189b      	adds	r3, r3, r2
 8026c94:	685c      	ldr	r4, [r3, #4]
 8026c96:	681b      	ldr	r3, [r3, #0]
 8026c98:	9306      	str	r3, [sp, #24]
 8026c9a:	9407      	str	r4, [sp, #28]
 8026c9c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8026c9e:	2b00      	cmp	r3, #0
 8026ca0:	db00      	blt.n	8026ca4 <_dtoa_r+0x4a0>
 8026ca2:	e0e7      	b.n	8026e74 <_dtoa_r+0x670>
 8026ca4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8026ca6:	2b00      	cmp	r3, #0
 8026ca8:	dd00      	ble.n	8026cac <_dtoa_r+0x4a8>
 8026caa:	e0e3      	b.n	8026e74 <_dtoa_r+0x670>
 8026cac:	d10c      	bne.n	8026cc8 <_dtoa_r+0x4c4>
 8026cae:	9806      	ldr	r0, [sp, #24]
 8026cb0:	9907      	ldr	r1, [sp, #28]
 8026cb2:	2200      	movs	r2, #0
 8026cb4:	4b9b      	ldr	r3, [pc, #620]	@ (8026f24 <_dtoa_r+0x720>)
 8026cb6:	f7db fe4d 	bl	8002954 <__aeabi_dmul>
 8026cba:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8026cbc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8026cbe:	f7d9 fc1b 	bl	80004f8 <__aeabi_dcmpge>
 8026cc2:	2800      	cmp	r0, #0
 8026cc4:	d100      	bne.n	8026cc8 <_dtoa_r+0x4c4>
 8026cc6:	e286      	b.n	80271d6 <_dtoa_r+0x9d2>
 8026cc8:	2600      	movs	r6, #0
 8026cca:	0037      	movs	r7, r6
 8026ccc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8026cce:	9c08      	ldr	r4, [sp, #32]
 8026cd0:	43db      	mvns	r3, r3
 8026cd2:	930c      	str	r3, [sp, #48]	@ 0x30
 8026cd4:	9704      	str	r7, [sp, #16]
 8026cd6:	2700      	movs	r7, #0
 8026cd8:	0031      	movs	r1, r6
 8026cda:	9803      	ldr	r0, [sp, #12]
 8026cdc:	f001 f838 	bl	8027d50 <_Bfree>
 8026ce0:	9b04      	ldr	r3, [sp, #16]
 8026ce2:	2b00      	cmp	r3, #0
 8026ce4:	d100      	bne.n	8026ce8 <_dtoa_r+0x4e4>
 8026ce6:	e0bb      	b.n	8026e60 <_dtoa_r+0x65c>
 8026ce8:	2f00      	cmp	r7, #0
 8026cea:	d005      	beq.n	8026cf8 <_dtoa_r+0x4f4>
 8026cec:	429f      	cmp	r7, r3
 8026cee:	d003      	beq.n	8026cf8 <_dtoa_r+0x4f4>
 8026cf0:	0039      	movs	r1, r7
 8026cf2:	9803      	ldr	r0, [sp, #12]
 8026cf4:	f001 f82c 	bl	8027d50 <_Bfree>
 8026cf8:	9904      	ldr	r1, [sp, #16]
 8026cfa:	9803      	ldr	r0, [sp, #12]
 8026cfc:	f001 f828 	bl	8027d50 <_Bfree>
 8026d00:	e0ae      	b.n	8026e60 <_dtoa_r+0x65c>
 8026d02:	423d      	tst	r5, r7
 8026d04:	d005      	beq.n	8026d12 <_dtoa_r+0x50e>
 8026d06:	6832      	ldr	r2, [r6, #0]
 8026d08:	6873      	ldr	r3, [r6, #4]
 8026d0a:	f7db fe23 	bl	8002954 <__aeabi_dmul>
 8026d0e:	003b      	movs	r3, r7
 8026d10:	3401      	adds	r4, #1
 8026d12:	106d      	asrs	r5, r5, #1
 8026d14:	3608      	adds	r6, #8
 8026d16:	e75b      	b.n	8026bd0 <_dtoa_r+0x3cc>
 8026d18:	9b04      	ldr	r3, [sp, #16]
 8026d1a:	930c      	str	r3, [sp, #48]	@ 0x30
 8026d1c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8026d1e:	e77f      	b.n	8026c20 <_dtoa_r+0x41c>
 8026d20:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8026d22:	4b7a      	ldr	r3, [pc, #488]	@ (8026f0c <_dtoa_r+0x708>)
 8026d24:	3a01      	subs	r2, #1
 8026d26:	00d2      	lsls	r2, r2, #3
 8026d28:	9910      	ldr	r1, [sp, #64]	@ 0x40
 8026d2a:	189b      	adds	r3, r3, r2
 8026d2c:	681a      	ldr	r2, [r3, #0]
 8026d2e:	685b      	ldr	r3, [r3, #4]
 8026d30:	2900      	cmp	r1, #0
 8026d32:	d04c      	beq.n	8026dce <_dtoa_r+0x5ca>
 8026d34:	2000      	movs	r0, #0
 8026d36:	497c      	ldr	r1, [pc, #496]	@ (8026f28 <_dtoa_r+0x724>)
 8026d38:	f7db f9d2 	bl	80020e0 <__aeabi_ddiv>
 8026d3c:	0032      	movs	r2, r6
 8026d3e:	003b      	movs	r3, r7
 8026d40:	f7dc f8ee 	bl	8002f20 <__aeabi_dsub>
 8026d44:	9a08      	ldr	r2, [sp, #32]
 8026d46:	0006      	movs	r6, r0
 8026d48:	4694      	mov	ip, r2
 8026d4a:	000f      	movs	r7, r1
 8026d4c:	9b08      	ldr	r3, [sp, #32]
 8026d4e:	9316      	str	r3, [sp, #88]	@ 0x58
 8026d50:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8026d52:	4463      	add	r3, ip
 8026d54:	9311      	str	r3, [sp, #68]	@ 0x44
 8026d56:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8026d58:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8026d5a:	f7dc fd0d 	bl	8003778 <__aeabi_d2iz>
 8026d5e:	0005      	movs	r5, r0
 8026d60:	f7dc fd46 	bl	80037f0 <__aeabi_i2d>
 8026d64:	0002      	movs	r2, r0
 8026d66:	000b      	movs	r3, r1
 8026d68:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8026d6a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8026d6c:	f7dc f8d8 	bl	8002f20 <__aeabi_dsub>
 8026d70:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8026d72:	3530      	adds	r5, #48	@ 0x30
 8026d74:	1c5c      	adds	r4, r3, #1
 8026d76:	701d      	strb	r5, [r3, #0]
 8026d78:	0032      	movs	r2, r6
 8026d7a:	003b      	movs	r3, r7
 8026d7c:	900a      	str	r0, [sp, #40]	@ 0x28
 8026d7e:	910b      	str	r1, [sp, #44]	@ 0x2c
 8026d80:	f7d9 fb9c 	bl	80004bc <__aeabi_dcmplt>
 8026d84:	2800      	cmp	r0, #0
 8026d86:	d16b      	bne.n	8026e60 <_dtoa_r+0x65c>
 8026d88:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8026d8a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8026d8c:	2000      	movs	r0, #0
 8026d8e:	4961      	ldr	r1, [pc, #388]	@ (8026f14 <_dtoa_r+0x710>)
 8026d90:	f7dc f8c6 	bl	8002f20 <__aeabi_dsub>
 8026d94:	0032      	movs	r2, r6
 8026d96:	003b      	movs	r3, r7
 8026d98:	f7d9 fb90 	bl	80004bc <__aeabi_dcmplt>
 8026d9c:	2800      	cmp	r0, #0
 8026d9e:	d000      	beq.n	8026da2 <_dtoa_r+0x59e>
 8026da0:	e0c6      	b.n	8026f30 <_dtoa_r+0x72c>
 8026da2:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8026da4:	42a3      	cmp	r3, r4
 8026da6:	d100      	bne.n	8026daa <_dtoa_r+0x5a6>
 8026da8:	e765      	b.n	8026c76 <_dtoa_r+0x472>
 8026daa:	2200      	movs	r2, #0
 8026dac:	0030      	movs	r0, r6
 8026dae:	0039      	movs	r1, r7
 8026db0:	4b59      	ldr	r3, [pc, #356]	@ (8026f18 <_dtoa_r+0x714>)
 8026db2:	f7db fdcf 	bl	8002954 <__aeabi_dmul>
 8026db6:	2200      	movs	r2, #0
 8026db8:	0006      	movs	r6, r0
 8026dba:	000f      	movs	r7, r1
 8026dbc:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8026dbe:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8026dc0:	4b55      	ldr	r3, [pc, #340]	@ (8026f18 <_dtoa_r+0x714>)
 8026dc2:	f7db fdc7 	bl	8002954 <__aeabi_dmul>
 8026dc6:	9416      	str	r4, [sp, #88]	@ 0x58
 8026dc8:	900a      	str	r0, [sp, #40]	@ 0x28
 8026dca:	910b      	str	r1, [sp, #44]	@ 0x2c
 8026dcc:	e7c3      	b.n	8026d56 <_dtoa_r+0x552>
 8026dce:	0030      	movs	r0, r6
 8026dd0:	0039      	movs	r1, r7
 8026dd2:	f7db fdbf 	bl	8002954 <__aeabi_dmul>
 8026dd6:	9d08      	ldr	r5, [sp, #32]
 8026dd8:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8026dda:	002b      	movs	r3, r5
 8026ddc:	4694      	mov	ip, r2
 8026dde:	9016      	str	r0, [sp, #88]	@ 0x58
 8026de0:	9117      	str	r1, [sp, #92]	@ 0x5c
 8026de2:	4463      	add	r3, ip
 8026de4:	9319      	str	r3, [sp, #100]	@ 0x64
 8026de6:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8026de8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8026dea:	f7dc fcc5 	bl	8003778 <__aeabi_d2iz>
 8026dee:	0004      	movs	r4, r0
 8026df0:	f7dc fcfe 	bl	80037f0 <__aeabi_i2d>
 8026df4:	000b      	movs	r3, r1
 8026df6:	0002      	movs	r2, r0
 8026df8:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8026dfa:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8026dfc:	f7dc f890 	bl	8002f20 <__aeabi_dsub>
 8026e00:	3430      	adds	r4, #48	@ 0x30
 8026e02:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8026e04:	702c      	strb	r4, [r5, #0]
 8026e06:	3501      	adds	r5, #1
 8026e08:	0006      	movs	r6, r0
 8026e0a:	000f      	movs	r7, r1
 8026e0c:	42ab      	cmp	r3, r5
 8026e0e:	d12a      	bne.n	8026e66 <_dtoa_r+0x662>
 8026e10:	9816      	ldr	r0, [sp, #88]	@ 0x58
 8026e12:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 8026e14:	9b08      	ldr	r3, [sp, #32]
 8026e16:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 8026e18:	469c      	mov	ip, r3
 8026e1a:	2200      	movs	r2, #0
 8026e1c:	4b42      	ldr	r3, [pc, #264]	@ (8026f28 <_dtoa_r+0x724>)
 8026e1e:	4464      	add	r4, ip
 8026e20:	f7da fd98 	bl	8001954 <__aeabi_dadd>
 8026e24:	0002      	movs	r2, r0
 8026e26:	000b      	movs	r3, r1
 8026e28:	0030      	movs	r0, r6
 8026e2a:	0039      	movs	r1, r7
 8026e2c:	f7d9 fb5a 	bl	80004e4 <__aeabi_dcmpgt>
 8026e30:	2800      	cmp	r0, #0
 8026e32:	d000      	beq.n	8026e36 <_dtoa_r+0x632>
 8026e34:	e07c      	b.n	8026f30 <_dtoa_r+0x72c>
 8026e36:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8026e38:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8026e3a:	2000      	movs	r0, #0
 8026e3c:	493a      	ldr	r1, [pc, #232]	@ (8026f28 <_dtoa_r+0x724>)
 8026e3e:	f7dc f86f 	bl	8002f20 <__aeabi_dsub>
 8026e42:	0002      	movs	r2, r0
 8026e44:	000b      	movs	r3, r1
 8026e46:	0030      	movs	r0, r6
 8026e48:	0039      	movs	r1, r7
 8026e4a:	f7d9 fb37 	bl	80004bc <__aeabi_dcmplt>
 8026e4e:	2800      	cmp	r0, #0
 8026e50:	d100      	bne.n	8026e54 <_dtoa_r+0x650>
 8026e52:	e710      	b.n	8026c76 <_dtoa_r+0x472>
 8026e54:	0023      	movs	r3, r4
 8026e56:	3c01      	subs	r4, #1
 8026e58:	7822      	ldrb	r2, [r4, #0]
 8026e5a:	2a30      	cmp	r2, #48	@ 0x30
 8026e5c:	d0fa      	beq.n	8026e54 <_dtoa_r+0x650>
 8026e5e:	001c      	movs	r4, r3
 8026e60:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8026e62:	9304      	str	r3, [sp, #16]
 8026e64:	e042      	b.n	8026eec <_dtoa_r+0x6e8>
 8026e66:	2200      	movs	r2, #0
 8026e68:	4b2b      	ldr	r3, [pc, #172]	@ (8026f18 <_dtoa_r+0x714>)
 8026e6a:	f7db fd73 	bl	8002954 <__aeabi_dmul>
 8026e6e:	900a      	str	r0, [sp, #40]	@ 0x28
 8026e70:	910b      	str	r1, [sp, #44]	@ 0x2c
 8026e72:	e7b8      	b.n	8026de6 <_dtoa_r+0x5e2>
 8026e74:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8026e76:	9d08      	ldr	r5, [sp, #32]
 8026e78:	3b01      	subs	r3, #1
 8026e7a:	195b      	adds	r3, r3, r5
 8026e7c:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8026e7e:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8026e80:	930a      	str	r3, [sp, #40]	@ 0x28
 8026e82:	9a06      	ldr	r2, [sp, #24]
 8026e84:	9b07      	ldr	r3, [sp, #28]
 8026e86:	0030      	movs	r0, r6
 8026e88:	0039      	movs	r1, r7
 8026e8a:	f7db f929 	bl	80020e0 <__aeabi_ddiv>
 8026e8e:	f7dc fc73 	bl	8003778 <__aeabi_d2iz>
 8026e92:	9009      	str	r0, [sp, #36]	@ 0x24
 8026e94:	f7dc fcac 	bl	80037f0 <__aeabi_i2d>
 8026e98:	9a06      	ldr	r2, [sp, #24]
 8026e9a:	9b07      	ldr	r3, [sp, #28]
 8026e9c:	f7db fd5a 	bl	8002954 <__aeabi_dmul>
 8026ea0:	0002      	movs	r2, r0
 8026ea2:	000b      	movs	r3, r1
 8026ea4:	0030      	movs	r0, r6
 8026ea6:	0039      	movs	r1, r7
 8026ea8:	f7dc f83a 	bl	8002f20 <__aeabi_dsub>
 8026eac:	002b      	movs	r3, r5
 8026eae:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8026eb0:	3501      	adds	r5, #1
 8026eb2:	3230      	adds	r2, #48	@ 0x30
 8026eb4:	701a      	strb	r2, [r3, #0]
 8026eb6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8026eb8:	002c      	movs	r4, r5
 8026eba:	429a      	cmp	r2, r3
 8026ebc:	d14b      	bne.n	8026f56 <_dtoa_r+0x752>
 8026ebe:	0002      	movs	r2, r0
 8026ec0:	000b      	movs	r3, r1
 8026ec2:	f7da fd47 	bl	8001954 <__aeabi_dadd>
 8026ec6:	9a06      	ldr	r2, [sp, #24]
 8026ec8:	9b07      	ldr	r3, [sp, #28]
 8026eca:	0006      	movs	r6, r0
 8026ecc:	000f      	movs	r7, r1
 8026ece:	f7d9 fb09 	bl	80004e4 <__aeabi_dcmpgt>
 8026ed2:	2800      	cmp	r0, #0
 8026ed4:	d12a      	bne.n	8026f2c <_dtoa_r+0x728>
 8026ed6:	9a06      	ldr	r2, [sp, #24]
 8026ed8:	9b07      	ldr	r3, [sp, #28]
 8026eda:	0030      	movs	r0, r6
 8026edc:	0039      	movs	r1, r7
 8026ede:	f7d9 fae7 	bl	80004b0 <__aeabi_dcmpeq>
 8026ee2:	2800      	cmp	r0, #0
 8026ee4:	d002      	beq.n	8026eec <_dtoa_r+0x6e8>
 8026ee6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8026ee8:	07dd      	lsls	r5, r3, #31
 8026eea:	d41f      	bmi.n	8026f2c <_dtoa_r+0x728>
 8026eec:	9905      	ldr	r1, [sp, #20]
 8026eee:	9803      	ldr	r0, [sp, #12]
 8026ef0:	f000 ff2e 	bl	8027d50 <_Bfree>
 8026ef4:	2300      	movs	r3, #0
 8026ef6:	7023      	strb	r3, [r4, #0]
 8026ef8:	9b04      	ldr	r3, [sp, #16]
 8026efa:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8026efc:	3301      	adds	r3, #1
 8026efe:	6013      	str	r3, [r2, #0]
 8026f00:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8026f02:	2b00      	cmp	r3, #0
 8026f04:	d100      	bne.n	8026f08 <_dtoa_r+0x704>
 8026f06:	e4c7      	b.n	8026898 <_dtoa_r+0x94>
 8026f08:	601c      	str	r4, [r3, #0]
 8026f0a:	e4c5      	b.n	8026898 <_dtoa_r+0x94>
 8026f0c:	0802ed78 	.word	0x0802ed78
 8026f10:	0802ed50 	.word	0x0802ed50
 8026f14:	3ff00000 	.word	0x3ff00000
 8026f18:	40240000 	.word	0x40240000
 8026f1c:	401c0000 	.word	0x401c0000
 8026f20:	fcc00000 	.word	0xfcc00000
 8026f24:	40140000 	.word	0x40140000
 8026f28:	3fe00000 	.word	0x3fe00000
 8026f2c:	9b04      	ldr	r3, [sp, #16]
 8026f2e:	930c      	str	r3, [sp, #48]	@ 0x30
 8026f30:	0023      	movs	r3, r4
 8026f32:	001c      	movs	r4, r3
 8026f34:	3b01      	subs	r3, #1
 8026f36:	781a      	ldrb	r2, [r3, #0]
 8026f38:	2a39      	cmp	r2, #57	@ 0x39
 8026f3a:	d108      	bne.n	8026f4e <_dtoa_r+0x74a>
 8026f3c:	9a08      	ldr	r2, [sp, #32]
 8026f3e:	429a      	cmp	r2, r3
 8026f40:	d1f7      	bne.n	8026f32 <_dtoa_r+0x72e>
 8026f42:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8026f44:	9908      	ldr	r1, [sp, #32]
 8026f46:	3201      	adds	r2, #1
 8026f48:	920c      	str	r2, [sp, #48]	@ 0x30
 8026f4a:	2230      	movs	r2, #48	@ 0x30
 8026f4c:	700a      	strb	r2, [r1, #0]
 8026f4e:	781a      	ldrb	r2, [r3, #0]
 8026f50:	3201      	adds	r2, #1
 8026f52:	701a      	strb	r2, [r3, #0]
 8026f54:	e784      	b.n	8026e60 <_dtoa_r+0x65c>
 8026f56:	2200      	movs	r2, #0
 8026f58:	4bc6      	ldr	r3, [pc, #792]	@ (8027274 <_dtoa_r+0xa70>)
 8026f5a:	f7db fcfb 	bl	8002954 <__aeabi_dmul>
 8026f5e:	2200      	movs	r2, #0
 8026f60:	2300      	movs	r3, #0
 8026f62:	0006      	movs	r6, r0
 8026f64:	000f      	movs	r7, r1
 8026f66:	f7d9 faa3 	bl	80004b0 <__aeabi_dcmpeq>
 8026f6a:	2800      	cmp	r0, #0
 8026f6c:	d089      	beq.n	8026e82 <_dtoa_r+0x67e>
 8026f6e:	e7bd      	b.n	8026eec <_dtoa_r+0x6e8>
 8026f70:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 8026f72:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 8026f74:	9c06      	ldr	r4, [sp, #24]
 8026f76:	2f00      	cmp	r7, #0
 8026f78:	d014      	beq.n	8026fa4 <_dtoa_r+0x7a0>
 8026f7a:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8026f7c:	2a01      	cmp	r2, #1
 8026f7e:	dd00      	ble.n	8026f82 <_dtoa_r+0x77e>
 8026f80:	e0e4      	b.n	802714c <_dtoa_r+0x948>
 8026f82:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 8026f84:	2a00      	cmp	r2, #0
 8026f86:	d100      	bne.n	8026f8a <_dtoa_r+0x786>
 8026f88:	e0da      	b.n	8027140 <_dtoa_r+0x93c>
 8026f8a:	4abb      	ldr	r2, [pc, #748]	@ (8027278 <_dtoa_r+0xa74>)
 8026f8c:	189b      	adds	r3, r3, r2
 8026f8e:	9a06      	ldr	r2, [sp, #24]
 8026f90:	2101      	movs	r1, #1
 8026f92:	18d2      	adds	r2, r2, r3
 8026f94:	9206      	str	r2, [sp, #24]
 8026f96:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8026f98:	9803      	ldr	r0, [sp, #12]
 8026f9a:	18d3      	adds	r3, r2, r3
 8026f9c:	930d      	str	r3, [sp, #52]	@ 0x34
 8026f9e:	f000 ffdb 	bl	8027f58 <__i2b>
 8026fa2:	0007      	movs	r7, r0
 8026fa4:	2c00      	cmp	r4, #0
 8026fa6:	d00e      	beq.n	8026fc6 <_dtoa_r+0x7c2>
 8026fa8:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8026faa:	2b00      	cmp	r3, #0
 8026fac:	dd0b      	ble.n	8026fc6 <_dtoa_r+0x7c2>
 8026fae:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8026fb0:	0023      	movs	r3, r4
 8026fb2:	4294      	cmp	r4, r2
 8026fb4:	dd00      	ble.n	8026fb8 <_dtoa_r+0x7b4>
 8026fb6:	0013      	movs	r3, r2
 8026fb8:	9a06      	ldr	r2, [sp, #24]
 8026fba:	1ae4      	subs	r4, r4, r3
 8026fbc:	1ad2      	subs	r2, r2, r3
 8026fbe:	9206      	str	r2, [sp, #24]
 8026fc0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8026fc2:	1ad3      	subs	r3, r2, r3
 8026fc4:	930d      	str	r3, [sp, #52]	@ 0x34
 8026fc6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8026fc8:	2b00      	cmp	r3, #0
 8026fca:	d021      	beq.n	8027010 <_dtoa_r+0x80c>
 8026fcc:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8026fce:	2b00      	cmp	r3, #0
 8026fd0:	d100      	bne.n	8026fd4 <_dtoa_r+0x7d0>
 8026fd2:	e0d3      	b.n	802717c <_dtoa_r+0x978>
 8026fd4:	9e05      	ldr	r6, [sp, #20]
 8026fd6:	2d00      	cmp	r5, #0
 8026fd8:	d014      	beq.n	8027004 <_dtoa_r+0x800>
 8026fda:	0039      	movs	r1, r7
 8026fdc:	002a      	movs	r2, r5
 8026fde:	9803      	ldr	r0, [sp, #12]
 8026fe0:	f001 f87c 	bl	80280dc <__pow5mult>
 8026fe4:	9a05      	ldr	r2, [sp, #20]
 8026fe6:	0001      	movs	r1, r0
 8026fe8:	0007      	movs	r7, r0
 8026fea:	9803      	ldr	r0, [sp, #12]
 8026fec:	f000 ffcc 	bl	8027f88 <__multiply>
 8026ff0:	0006      	movs	r6, r0
 8026ff2:	9905      	ldr	r1, [sp, #20]
 8026ff4:	9803      	ldr	r0, [sp, #12]
 8026ff6:	f000 feab 	bl	8027d50 <_Bfree>
 8026ffa:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8026ffc:	9605      	str	r6, [sp, #20]
 8026ffe:	1b5b      	subs	r3, r3, r5
 8027000:	930f      	str	r3, [sp, #60]	@ 0x3c
 8027002:	d005      	beq.n	8027010 <_dtoa_r+0x80c>
 8027004:	0031      	movs	r1, r6
 8027006:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8027008:	9803      	ldr	r0, [sp, #12]
 802700a:	f001 f867 	bl	80280dc <__pow5mult>
 802700e:	9005      	str	r0, [sp, #20]
 8027010:	2101      	movs	r1, #1
 8027012:	9803      	ldr	r0, [sp, #12]
 8027014:	f000 ffa0 	bl	8027f58 <__i2b>
 8027018:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 802701a:	0006      	movs	r6, r0
 802701c:	2b00      	cmp	r3, #0
 802701e:	d100      	bne.n	8027022 <_dtoa_r+0x81e>
 8027020:	e1bc      	b.n	802739c <_dtoa_r+0xb98>
 8027022:	001a      	movs	r2, r3
 8027024:	0001      	movs	r1, r0
 8027026:	9803      	ldr	r0, [sp, #12]
 8027028:	f001 f858 	bl	80280dc <__pow5mult>
 802702c:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 802702e:	0006      	movs	r6, r0
 8027030:	2500      	movs	r5, #0
 8027032:	2b01      	cmp	r3, #1
 8027034:	dc16      	bgt.n	8027064 <_dtoa_r+0x860>
 8027036:	2500      	movs	r5, #0
 8027038:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802703a:	42ab      	cmp	r3, r5
 802703c:	d10e      	bne.n	802705c <_dtoa_r+0x858>
 802703e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8027040:	031b      	lsls	r3, r3, #12
 8027042:	42ab      	cmp	r3, r5
 8027044:	d10a      	bne.n	802705c <_dtoa_r+0x858>
 8027046:	4b8d      	ldr	r3, [pc, #564]	@ (802727c <_dtoa_r+0xa78>)
 8027048:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 802704a:	4213      	tst	r3, r2
 802704c:	d006      	beq.n	802705c <_dtoa_r+0x858>
 802704e:	9b06      	ldr	r3, [sp, #24]
 8027050:	3501      	adds	r5, #1
 8027052:	3301      	adds	r3, #1
 8027054:	9306      	str	r3, [sp, #24]
 8027056:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8027058:	3301      	adds	r3, #1
 802705a:	930d      	str	r3, [sp, #52]	@ 0x34
 802705c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 802705e:	2001      	movs	r0, #1
 8027060:	2b00      	cmp	r3, #0
 8027062:	d008      	beq.n	8027076 <_dtoa_r+0x872>
 8027064:	6933      	ldr	r3, [r6, #16]
 8027066:	3303      	adds	r3, #3
 8027068:	009b      	lsls	r3, r3, #2
 802706a:	18f3      	adds	r3, r6, r3
 802706c:	6858      	ldr	r0, [r3, #4]
 802706e:	f000 ff23 	bl	8027eb8 <__hi0bits>
 8027072:	2320      	movs	r3, #32
 8027074:	1a18      	subs	r0, r3, r0
 8027076:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8027078:	1818      	adds	r0, r3, r0
 802707a:	0002      	movs	r2, r0
 802707c:	231f      	movs	r3, #31
 802707e:	401a      	ands	r2, r3
 8027080:	4218      	tst	r0, r3
 8027082:	d100      	bne.n	8027086 <_dtoa_r+0x882>
 8027084:	e081      	b.n	802718a <_dtoa_r+0x986>
 8027086:	3301      	adds	r3, #1
 8027088:	1a9b      	subs	r3, r3, r2
 802708a:	2b04      	cmp	r3, #4
 802708c:	dd79      	ble.n	8027182 <_dtoa_r+0x97e>
 802708e:	231c      	movs	r3, #28
 8027090:	1a9b      	subs	r3, r3, r2
 8027092:	9a06      	ldr	r2, [sp, #24]
 8027094:	18e4      	adds	r4, r4, r3
 8027096:	18d2      	adds	r2, r2, r3
 8027098:	9206      	str	r2, [sp, #24]
 802709a:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 802709c:	18d3      	adds	r3, r2, r3
 802709e:	930d      	str	r3, [sp, #52]	@ 0x34
 80270a0:	9b06      	ldr	r3, [sp, #24]
 80270a2:	2b00      	cmp	r3, #0
 80270a4:	dd05      	ble.n	80270b2 <_dtoa_r+0x8ae>
 80270a6:	001a      	movs	r2, r3
 80270a8:	9905      	ldr	r1, [sp, #20]
 80270aa:	9803      	ldr	r0, [sp, #12]
 80270ac:	f001 f872 	bl	8028194 <__lshift>
 80270b0:	9005      	str	r0, [sp, #20]
 80270b2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80270b4:	2b00      	cmp	r3, #0
 80270b6:	dd05      	ble.n	80270c4 <_dtoa_r+0x8c0>
 80270b8:	0031      	movs	r1, r6
 80270ba:	001a      	movs	r2, r3
 80270bc:	9803      	ldr	r0, [sp, #12]
 80270be:	f001 f869 	bl	8028194 <__lshift>
 80270c2:	0006      	movs	r6, r0
 80270c4:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80270c6:	2b00      	cmp	r3, #0
 80270c8:	d061      	beq.n	802718e <_dtoa_r+0x98a>
 80270ca:	0031      	movs	r1, r6
 80270cc:	9805      	ldr	r0, [sp, #20]
 80270ce:	f001 f8cd 	bl	802826c <__mcmp>
 80270d2:	2800      	cmp	r0, #0
 80270d4:	da5b      	bge.n	802718e <_dtoa_r+0x98a>
 80270d6:	9b04      	ldr	r3, [sp, #16]
 80270d8:	220a      	movs	r2, #10
 80270da:	3b01      	subs	r3, #1
 80270dc:	930c      	str	r3, [sp, #48]	@ 0x30
 80270de:	9905      	ldr	r1, [sp, #20]
 80270e0:	2300      	movs	r3, #0
 80270e2:	9803      	ldr	r0, [sp, #12]
 80270e4:	f000 fe58 	bl	8027d98 <__multadd>
 80270e8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80270ea:	9005      	str	r0, [sp, #20]
 80270ec:	2b00      	cmp	r3, #0
 80270ee:	d100      	bne.n	80270f2 <_dtoa_r+0x8ee>
 80270f0:	e15b      	b.n	80273aa <_dtoa_r+0xba6>
 80270f2:	2300      	movs	r3, #0
 80270f4:	0039      	movs	r1, r7
 80270f6:	220a      	movs	r2, #10
 80270f8:	9803      	ldr	r0, [sp, #12]
 80270fa:	f000 fe4d 	bl	8027d98 <__multadd>
 80270fe:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8027100:	0007      	movs	r7, r0
 8027102:	2b00      	cmp	r3, #0
 8027104:	dc4d      	bgt.n	80271a2 <_dtoa_r+0x99e>
 8027106:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8027108:	2b02      	cmp	r3, #2
 802710a:	dd46      	ble.n	802719a <_dtoa_r+0x996>
 802710c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 802710e:	2b00      	cmp	r3, #0
 8027110:	d000      	beq.n	8027114 <_dtoa_r+0x910>
 8027112:	e5db      	b.n	8026ccc <_dtoa_r+0x4c8>
 8027114:	0031      	movs	r1, r6
 8027116:	2205      	movs	r2, #5
 8027118:	9803      	ldr	r0, [sp, #12]
 802711a:	f000 fe3d 	bl	8027d98 <__multadd>
 802711e:	0006      	movs	r6, r0
 8027120:	0001      	movs	r1, r0
 8027122:	9805      	ldr	r0, [sp, #20]
 8027124:	f001 f8a2 	bl	802826c <__mcmp>
 8027128:	2800      	cmp	r0, #0
 802712a:	dc00      	bgt.n	802712e <_dtoa_r+0x92a>
 802712c:	e5ce      	b.n	8026ccc <_dtoa_r+0x4c8>
 802712e:	9b08      	ldr	r3, [sp, #32]
 8027130:	9a08      	ldr	r2, [sp, #32]
 8027132:	1c5c      	adds	r4, r3, #1
 8027134:	2331      	movs	r3, #49	@ 0x31
 8027136:	7013      	strb	r3, [r2, #0]
 8027138:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 802713a:	3301      	adds	r3, #1
 802713c:	930c      	str	r3, [sp, #48]	@ 0x30
 802713e:	e5c9      	b.n	8026cd4 <_dtoa_r+0x4d0>
 8027140:	2336      	movs	r3, #54	@ 0x36
 8027142:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8027144:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 8027146:	1a9b      	subs	r3, r3, r2
 8027148:	9c06      	ldr	r4, [sp, #24]
 802714a:	e720      	b.n	8026f8e <_dtoa_r+0x78a>
 802714c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802714e:	1e5d      	subs	r5, r3, #1
 8027150:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8027152:	42ab      	cmp	r3, r5
 8027154:	db08      	blt.n	8027168 <_dtoa_r+0x964>
 8027156:	1b5d      	subs	r5, r3, r5
 8027158:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802715a:	2b00      	cmp	r3, #0
 802715c:	daf4      	bge.n	8027148 <_dtoa_r+0x944>
 802715e:	9b06      	ldr	r3, [sp, #24]
 8027160:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8027162:	1a9c      	subs	r4, r3, r2
 8027164:	2300      	movs	r3, #0
 8027166:	e712      	b.n	8026f8e <_dtoa_r+0x78a>
 8027168:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 802716a:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 802716c:	1aeb      	subs	r3, r5, r3
 802716e:	18d3      	adds	r3, r2, r3
 8027170:	9314      	str	r3, [sp, #80]	@ 0x50
 8027172:	950f      	str	r5, [sp, #60]	@ 0x3c
 8027174:	9c06      	ldr	r4, [sp, #24]
 8027176:	2500      	movs	r5, #0
 8027178:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802717a:	e708      	b.n	8026f8e <_dtoa_r+0x78a>
 802717c:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 802717e:	9905      	ldr	r1, [sp, #20]
 8027180:	e742      	b.n	8027008 <_dtoa_r+0x804>
 8027182:	2b04      	cmp	r3, #4
 8027184:	d08c      	beq.n	80270a0 <_dtoa_r+0x89c>
 8027186:	331c      	adds	r3, #28
 8027188:	e783      	b.n	8027092 <_dtoa_r+0x88e>
 802718a:	0013      	movs	r3, r2
 802718c:	e7fb      	b.n	8027186 <_dtoa_r+0x982>
 802718e:	9b04      	ldr	r3, [sp, #16]
 8027190:	930c      	str	r3, [sp, #48]	@ 0x30
 8027192:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8027194:	930e      	str	r3, [sp, #56]	@ 0x38
 8027196:	2b00      	cmp	r3, #0
 8027198:	ddb5      	ble.n	8027106 <_dtoa_r+0x902>
 802719a:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 802719c:	2b00      	cmp	r3, #0
 802719e:	d100      	bne.n	80271a2 <_dtoa_r+0x99e>
 80271a0:	e107      	b.n	80273b2 <_dtoa_r+0xbae>
 80271a2:	2c00      	cmp	r4, #0
 80271a4:	dd05      	ble.n	80271b2 <_dtoa_r+0x9ae>
 80271a6:	0039      	movs	r1, r7
 80271a8:	0022      	movs	r2, r4
 80271aa:	9803      	ldr	r0, [sp, #12]
 80271ac:	f000 fff2 	bl	8028194 <__lshift>
 80271b0:	0007      	movs	r7, r0
 80271b2:	9704      	str	r7, [sp, #16]
 80271b4:	2d00      	cmp	r5, #0
 80271b6:	d020      	beq.n	80271fa <_dtoa_r+0x9f6>
 80271b8:	6879      	ldr	r1, [r7, #4]
 80271ba:	9803      	ldr	r0, [sp, #12]
 80271bc:	f000 fd84 	bl	8027cc8 <_Balloc>
 80271c0:	1e04      	subs	r4, r0, #0
 80271c2:	d10c      	bne.n	80271de <_dtoa_r+0x9da>
 80271c4:	0022      	movs	r2, r4
 80271c6:	4b2e      	ldr	r3, [pc, #184]	@ (8027280 <_dtoa_r+0xa7c>)
 80271c8:	482e      	ldr	r0, [pc, #184]	@ (8027284 <_dtoa_r+0xa80>)
 80271ca:	492f      	ldr	r1, [pc, #188]	@ (8027288 <_dtoa_r+0xa84>)
 80271cc:	f7ff fb2f 	bl	802682e <_dtoa_r+0x2a>
 80271d0:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 80271d2:	0037      	movs	r7, r6
 80271d4:	e7ab      	b.n	802712e <_dtoa_r+0x92a>
 80271d6:	9b04      	ldr	r3, [sp, #16]
 80271d8:	9e09      	ldr	r6, [sp, #36]	@ 0x24
 80271da:	930c      	str	r3, [sp, #48]	@ 0x30
 80271dc:	e7f9      	b.n	80271d2 <_dtoa_r+0x9ce>
 80271de:	0039      	movs	r1, r7
 80271e0:	693a      	ldr	r2, [r7, #16]
 80271e2:	310c      	adds	r1, #12
 80271e4:	3202      	adds	r2, #2
 80271e6:	0092      	lsls	r2, r2, #2
 80271e8:	300c      	adds	r0, #12
 80271ea:	f7ff fa75 	bl	80266d8 <memcpy>
 80271ee:	2201      	movs	r2, #1
 80271f0:	0021      	movs	r1, r4
 80271f2:	9803      	ldr	r0, [sp, #12]
 80271f4:	f000 ffce 	bl	8028194 <__lshift>
 80271f8:	9004      	str	r0, [sp, #16]
 80271fa:	9b08      	ldr	r3, [sp, #32]
 80271fc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80271fe:	9306      	str	r3, [sp, #24]
 8027200:	3b01      	subs	r3, #1
 8027202:	189b      	adds	r3, r3, r2
 8027204:	2201      	movs	r2, #1
 8027206:	930f      	str	r3, [sp, #60]	@ 0x3c
 8027208:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802720a:	4013      	ands	r3, r2
 802720c:	930e      	str	r3, [sp, #56]	@ 0x38
 802720e:	0031      	movs	r1, r6
 8027210:	9805      	ldr	r0, [sp, #20]
 8027212:	f7ff fa71 	bl	80266f8 <quorem>
 8027216:	0039      	movs	r1, r7
 8027218:	0005      	movs	r5, r0
 802721a:	900a      	str	r0, [sp, #40]	@ 0x28
 802721c:	9805      	ldr	r0, [sp, #20]
 802721e:	f001 f825 	bl	802826c <__mcmp>
 8027222:	9a04      	ldr	r2, [sp, #16]
 8027224:	900d      	str	r0, [sp, #52]	@ 0x34
 8027226:	0031      	movs	r1, r6
 8027228:	9803      	ldr	r0, [sp, #12]
 802722a:	f001 f83b 	bl	80282a4 <__mdiff>
 802722e:	2201      	movs	r2, #1
 8027230:	68c3      	ldr	r3, [r0, #12]
 8027232:	0004      	movs	r4, r0
 8027234:	3530      	adds	r5, #48	@ 0x30
 8027236:	9209      	str	r2, [sp, #36]	@ 0x24
 8027238:	2b00      	cmp	r3, #0
 802723a:	d104      	bne.n	8027246 <_dtoa_r+0xa42>
 802723c:	0001      	movs	r1, r0
 802723e:	9805      	ldr	r0, [sp, #20]
 8027240:	f001 f814 	bl	802826c <__mcmp>
 8027244:	9009      	str	r0, [sp, #36]	@ 0x24
 8027246:	0021      	movs	r1, r4
 8027248:	9803      	ldr	r0, [sp, #12]
 802724a:	f000 fd81 	bl	8027d50 <_Bfree>
 802724e:	9b06      	ldr	r3, [sp, #24]
 8027250:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8027252:	1c5c      	adds	r4, r3, #1
 8027254:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8027256:	4313      	orrs	r3, r2
 8027258:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 802725a:	4313      	orrs	r3, r2
 802725c:	d116      	bne.n	802728c <_dtoa_r+0xa88>
 802725e:	2d39      	cmp	r5, #57	@ 0x39
 8027260:	d02f      	beq.n	80272c2 <_dtoa_r+0xabe>
 8027262:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8027264:	2b00      	cmp	r3, #0
 8027266:	dd01      	ble.n	802726c <_dtoa_r+0xa68>
 8027268:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 802726a:	3531      	adds	r5, #49	@ 0x31
 802726c:	9b06      	ldr	r3, [sp, #24]
 802726e:	701d      	strb	r5, [r3, #0]
 8027270:	e532      	b.n	8026cd8 <_dtoa_r+0x4d4>
 8027272:	46c0      	nop			@ (mov r8, r8)
 8027274:	40240000 	.word	0x40240000
 8027278:	00000433 	.word	0x00000433
 802727c:	7ff00000 	.word	0x7ff00000
 8027280:	0802ead2 	.word	0x0802ead2
 8027284:	0802ea7a 	.word	0x0802ea7a
 8027288:	000002ef 	.word	0x000002ef
 802728c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 802728e:	2b00      	cmp	r3, #0
 8027290:	db04      	blt.n	802729c <_dtoa_r+0xa98>
 8027292:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8027294:	4313      	orrs	r3, r2
 8027296:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8027298:	4313      	orrs	r3, r2
 802729a:	d11e      	bne.n	80272da <_dtoa_r+0xad6>
 802729c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802729e:	2b00      	cmp	r3, #0
 80272a0:	dde4      	ble.n	802726c <_dtoa_r+0xa68>
 80272a2:	9905      	ldr	r1, [sp, #20]
 80272a4:	2201      	movs	r2, #1
 80272a6:	9803      	ldr	r0, [sp, #12]
 80272a8:	f000 ff74 	bl	8028194 <__lshift>
 80272ac:	0031      	movs	r1, r6
 80272ae:	9005      	str	r0, [sp, #20]
 80272b0:	f000 ffdc 	bl	802826c <__mcmp>
 80272b4:	2800      	cmp	r0, #0
 80272b6:	dc02      	bgt.n	80272be <_dtoa_r+0xaba>
 80272b8:	d1d8      	bne.n	802726c <_dtoa_r+0xa68>
 80272ba:	07eb      	lsls	r3, r5, #31
 80272bc:	d5d6      	bpl.n	802726c <_dtoa_r+0xa68>
 80272be:	2d39      	cmp	r5, #57	@ 0x39
 80272c0:	d1d2      	bne.n	8027268 <_dtoa_r+0xa64>
 80272c2:	2339      	movs	r3, #57	@ 0x39
 80272c4:	9a06      	ldr	r2, [sp, #24]
 80272c6:	7013      	strb	r3, [r2, #0]
 80272c8:	0023      	movs	r3, r4
 80272ca:	001c      	movs	r4, r3
 80272cc:	3b01      	subs	r3, #1
 80272ce:	781a      	ldrb	r2, [r3, #0]
 80272d0:	2a39      	cmp	r2, #57	@ 0x39
 80272d2:	d050      	beq.n	8027376 <_dtoa_r+0xb72>
 80272d4:	3201      	adds	r2, #1
 80272d6:	701a      	strb	r2, [r3, #0]
 80272d8:	e4fe      	b.n	8026cd8 <_dtoa_r+0x4d4>
 80272da:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80272dc:	2b00      	cmp	r3, #0
 80272de:	dd03      	ble.n	80272e8 <_dtoa_r+0xae4>
 80272e0:	2d39      	cmp	r5, #57	@ 0x39
 80272e2:	d0ee      	beq.n	80272c2 <_dtoa_r+0xabe>
 80272e4:	3501      	adds	r5, #1
 80272e6:	e7c1      	b.n	802726c <_dtoa_r+0xa68>
 80272e8:	9b06      	ldr	r3, [sp, #24]
 80272ea:	9a06      	ldr	r2, [sp, #24]
 80272ec:	701d      	strb	r5, [r3, #0]
 80272ee:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80272f0:	4293      	cmp	r3, r2
 80272f2:	d02b      	beq.n	802734c <_dtoa_r+0xb48>
 80272f4:	2300      	movs	r3, #0
 80272f6:	220a      	movs	r2, #10
 80272f8:	9905      	ldr	r1, [sp, #20]
 80272fa:	9803      	ldr	r0, [sp, #12]
 80272fc:	f000 fd4c 	bl	8027d98 <__multadd>
 8027300:	9b04      	ldr	r3, [sp, #16]
 8027302:	9005      	str	r0, [sp, #20]
 8027304:	429f      	cmp	r7, r3
 8027306:	d109      	bne.n	802731c <_dtoa_r+0xb18>
 8027308:	0039      	movs	r1, r7
 802730a:	2300      	movs	r3, #0
 802730c:	220a      	movs	r2, #10
 802730e:	9803      	ldr	r0, [sp, #12]
 8027310:	f000 fd42 	bl	8027d98 <__multadd>
 8027314:	0007      	movs	r7, r0
 8027316:	9004      	str	r0, [sp, #16]
 8027318:	9406      	str	r4, [sp, #24]
 802731a:	e778      	b.n	802720e <_dtoa_r+0xa0a>
 802731c:	0039      	movs	r1, r7
 802731e:	2300      	movs	r3, #0
 8027320:	220a      	movs	r2, #10
 8027322:	9803      	ldr	r0, [sp, #12]
 8027324:	f000 fd38 	bl	8027d98 <__multadd>
 8027328:	2300      	movs	r3, #0
 802732a:	0007      	movs	r7, r0
 802732c:	220a      	movs	r2, #10
 802732e:	9904      	ldr	r1, [sp, #16]
 8027330:	9803      	ldr	r0, [sp, #12]
 8027332:	f000 fd31 	bl	8027d98 <__multadd>
 8027336:	9004      	str	r0, [sp, #16]
 8027338:	e7ee      	b.n	8027318 <_dtoa_r+0xb14>
 802733a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 802733c:	2401      	movs	r4, #1
 802733e:	2b00      	cmp	r3, #0
 8027340:	dd00      	ble.n	8027344 <_dtoa_r+0xb40>
 8027342:	001c      	movs	r4, r3
 8027344:	9704      	str	r7, [sp, #16]
 8027346:	2700      	movs	r7, #0
 8027348:	9b08      	ldr	r3, [sp, #32]
 802734a:	191c      	adds	r4, r3, r4
 802734c:	9905      	ldr	r1, [sp, #20]
 802734e:	2201      	movs	r2, #1
 8027350:	9803      	ldr	r0, [sp, #12]
 8027352:	f000 ff1f 	bl	8028194 <__lshift>
 8027356:	0031      	movs	r1, r6
 8027358:	9005      	str	r0, [sp, #20]
 802735a:	f000 ff87 	bl	802826c <__mcmp>
 802735e:	2800      	cmp	r0, #0
 8027360:	dcb2      	bgt.n	80272c8 <_dtoa_r+0xac4>
 8027362:	d101      	bne.n	8027368 <_dtoa_r+0xb64>
 8027364:	07ed      	lsls	r5, r5, #31
 8027366:	d4af      	bmi.n	80272c8 <_dtoa_r+0xac4>
 8027368:	0023      	movs	r3, r4
 802736a:	001c      	movs	r4, r3
 802736c:	3b01      	subs	r3, #1
 802736e:	781a      	ldrb	r2, [r3, #0]
 8027370:	2a30      	cmp	r2, #48	@ 0x30
 8027372:	d0fa      	beq.n	802736a <_dtoa_r+0xb66>
 8027374:	e4b0      	b.n	8026cd8 <_dtoa_r+0x4d4>
 8027376:	9a08      	ldr	r2, [sp, #32]
 8027378:	429a      	cmp	r2, r3
 802737a:	d1a6      	bne.n	80272ca <_dtoa_r+0xac6>
 802737c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 802737e:	3301      	adds	r3, #1
 8027380:	930c      	str	r3, [sp, #48]	@ 0x30
 8027382:	2331      	movs	r3, #49	@ 0x31
 8027384:	7013      	strb	r3, [r2, #0]
 8027386:	e4a7      	b.n	8026cd8 <_dtoa_r+0x4d4>
 8027388:	4b14      	ldr	r3, [pc, #80]	@ (80273dc <_dtoa_r+0xbd8>)
 802738a:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 802738c:	9308      	str	r3, [sp, #32]
 802738e:	4b14      	ldr	r3, [pc, #80]	@ (80273e0 <_dtoa_r+0xbdc>)
 8027390:	2a00      	cmp	r2, #0
 8027392:	d001      	beq.n	8027398 <_dtoa_r+0xb94>
 8027394:	f7ff fa7e 	bl	8026894 <_dtoa_r+0x90>
 8027398:	f7ff fa7e 	bl	8026898 <_dtoa_r+0x94>
 802739c:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 802739e:	2b01      	cmp	r3, #1
 80273a0:	dc00      	bgt.n	80273a4 <_dtoa_r+0xba0>
 80273a2:	e648      	b.n	8027036 <_dtoa_r+0x832>
 80273a4:	2001      	movs	r0, #1
 80273a6:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 80273a8:	e665      	b.n	8027076 <_dtoa_r+0x872>
 80273aa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80273ac:	2b00      	cmp	r3, #0
 80273ae:	dc00      	bgt.n	80273b2 <_dtoa_r+0xbae>
 80273b0:	e6a9      	b.n	8027106 <_dtoa_r+0x902>
 80273b2:	2400      	movs	r4, #0
 80273b4:	0031      	movs	r1, r6
 80273b6:	9805      	ldr	r0, [sp, #20]
 80273b8:	f7ff f99e 	bl	80266f8 <quorem>
 80273bc:	9b08      	ldr	r3, [sp, #32]
 80273be:	3030      	adds	r0, #48	@ 0x30
 80273c0:	5518      	strb	r0, [r3, r4]
 80273c2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80273c4:	3401      	adds	r4, #1
 80273c6:	0005      	movs	r5, r0
 80273c8:	42a3      	cmp	r3, r4
 80273ca:	ddb6      	ble.n	802733a <_dtoa_r+0xb36>
 80273cc:	2300      	movs	r3, #0
 80273ce:	220a      	movs	r2, #10
 80273d0:	9905      	ldr	r1, [sp, #20]
 80273d2:	9803      	ldr	r0, [sp, #12]
 80273d4:	f000 fce0 	bl	8027d98 <__multadd>
 80273d8:	9005      	str	r0, [sp, #20]
 80273da:	e7eb      	b.n	80273b4 <_dtoa_r+0xbb0>
 80273dc:	0802ea56 	.word	0x0802ea56
 80273e0:	0802ea5e 	.word	0x0802ea5e

080273e4 <_free_r>:
 80273e4:	b570      	push	{r4, r5, r6, lr}
 80273e6:	0005      	movs	r5, r0
 80273e8:	1e0c      	subs	r4, r1, #0
 80273ea:	d010      	beq.n	802740e <_free_r+0x2a>
 80273ec:	3c04      	subs	r4, #4
 80273ee:	6823      	ldr	r3, [r4, #0]
 80273f0:	2b00      	cmp	r3, #0
 80273f2:	da00      	bge.n	80273f6 <_free_r+0x12>
 80273f4:	18e4      	adds	r4, r4, r3
 80273f6:	0028      	movs	r0, r5
 80273f8:	f000 fc56 	bl	8027ca8 <__malloc_lock>
 80273fc:	4a1d      	ldr	r2, [pc, #116]	@ (8027474 <_free_r+0x90>)
 80273fe:	6813      	ldr	r3, [r2, #0]
 8027400:	2b00      	cmp	r3, #0
 8027402:	d105      	bne.n	8027410 <_free_r+0x2c>
 8027404:	6063      	str	r3, [r4, #4]
 8027406:	6014      	str	r4, [r2, #0]
 8027408:	0028      	movs	r0, r5
 802740a:	f000 fc55 	bl	8027cb8 <__malloc_unlock>
 802740e:	bd70      	pop	{r4, r5, r6, pc}
 8027410:	42a3      	cmp	r3, r4
 8027412:	d908      	bls.n	8027426 <_free_r+0x42>
 8027414:	6820      	ldr	r0, [r4, #0]
 8027416:	1821      	adds	r1, r4, r0
 8027418:	428b      	cmp	r3, r1
 802741a:	d1f3      	bne.n	8027404 <_free_r+0x20>
 802741c:	6819      	ldr	r1, [r3, #0]
 802741e:	685b      	ldr	r3, [r3, #4]
 8027420:	1809      	adds	r1, r1, r0
 8027422:	6021      	str	r1, [r4, #0]
 8027424:	e7ee      	b.n	8027404 <_free_r+0x20>
 8027426:	001a      	movs	r2, r3
 8027428:	685b      	ldr	r3, [r3, #4]
 802742a:	2b00      	cmp	r3, #0
 802742c:	d001      	beq.n	8027432 <_free_r+0x4e>
 802742e:	42a3      	cmp	r3, r4
 8027430:	d9f9      	bls.n	8027426 <_free_r+0x42>
 8027432:	6811      	ldr	r1, [r2, #0]
 8027434:	1850      	adds	r0, r2, r1
 8027436:	42a0      	cmp	r0, r4
 8027438:	d10b      	bne.n	8027452 <_free_r+0x6e>
 802743a:	6820      	ldr	r0, [r4, #0]
 802743c:	1809      	adds	r1, r1, r0
 802743e:	1850      	adds	r0, r2, r1
 8027440:	6011      	str	r1, [r2, #0]
 8027442:	4283      	cmp	r3, r0
 8027444:	d1e0      	bne.n	8027408 <_free_r+0x24>
 8027446:	6818      	ldr	r0, [r3, #0]
 8027448:	685b      	ldr	r3, [r3, #4]
 802744a:	1841      	adds	r1, r0, r1
 802744c:	6011      	str	r1, [r2, #0]
 802744e:	6053      	str	r3, [r2, #4]
 8027450:	e7da      	b.n	8027408 <_free_r+0x24>
 8027452:	42a0      	cmp	r0, r4
 8027454:	d902      	bls.n	802745c <_free_r+0x78>
 8027456:	230c      	movs	r3, #12
 8027458:	602b      	str	r3, [r5, #0]
 802745a:	e7d5      	b.n	8027408 <_free_r+0x24>
 802745c:	6820      	ldr	r0, [r4, #0]
 802745e:	1821      	adds	r1, r4, r0
 8027460:	428b      	cmp	r3, r1
 8027462:	d103      	bne.n	802746c <_free_r+0x88>
 8027464:	6819      	ldr	r1, [r3, #0]
 8027466:	685b      	ldr	r3, [r3, #4]
 8027468:	1809      	adds	r1, r1, r0
 802746a:	6021      	str	r1, [r4, #0]
 802746c:	6063      	str	r3, [r4, #4]
 802746e:	6054      	str	r4, [r2, #4]
 8027470:	e7ca      	b.n	8027408 <_free_r+0x24>
 8027472:	46c0      	nop			@ (mov r8, r8)
 8027474:	20003918 	.word	0x20003918

08027478 <rshift>:
 8027478:	0002      	movs	r2, r0
 802747a:	b5f0      	push	{r4, r5, r6, r7, lr}
 802747c:	6904      	ldr	r4, [r0, #16]
 802747e:	b085      	sub	sp, #20
 8027480:	3214      	adds	r2, #20
 8027482:	114b      	asrs	r3, r1, #5
 8027484:	0016      	movs	r6, r2
 8027486:	9302      	str	r3, [sp, #8]
 8027488:	429c      	cmp	r4, r3
 802748a:	dd31      	ble.n	80274f0 <rshift+0x78>
 802748c:	261f      	movs	r6, #31
 802748e:	000f      	movs	r7, r1
 8027490:	009b      	lsls	r3, r3, #2
 8027492:	00a5      	lsls	r5, r4, #2
 8027494:	18d3      	adds	r3, r2, r3
 8027496:	4037      	ands	r7, r6
 8027498:	1955      	adds	r5, r2, r5
 802749a:	9300      	str	r3, [sp, #0]
 802749c:	9701      	str	r7, [sp, #4]
 802749e:	4231      	tst	r1, r6
 80274a0:	d10d      	bne.n	80274be <rshift+0x46>
 80274a2:	0016      	movs	r6, r2
 80274a4:	0019      	movs	r1, r3
 80274a6:	428d      	cmp	r5, r1
 80274a8:	d836      	bhi.n	8027518 <rshift+0xa0>
 80274aa:	9b00      	ldr	r3, [sp, #0]
 80274ac:	2600      	movs	r6, #0
 80274ae:	3b03      	subs	r3, #3
 80274b0:	429d      	cmp	r5, r3
 80274b2:	d302      	bcc.n	80274ba <rshift+0x42>
 80274b4:	9b02      	ldr	r3, [sp, #8]
 80274b6:	1ae4      	subs	r4, r4, r3
 80274b8:	00a6      	lsls	r6, r4, #2
 80274ba:	1996      	adds	r6, r2, r6
 80274bc:	e018      	b.n	80274f0 <rshift+0x78>
 80274be:	2120      	movs	r1, #32
 80274c0:	9e01      	ldr	r6, [sp, #4]
 80274c2:	9f01      	ldr	r7, [sp, #4]
 80274c4:	1b89      	subs	r1, r1, r6
 80274c6:	9e00      	ldr	r6, [sp, #0]
 80274c8:	9103      	str	r1, [sp, #12]
 80274ca:	ce02      	ldmia	r6!, {r1}
 80274cc:	4694      	mov	ip, r2
 80274ce:	40f9      	lsrs	r1, r7
 80274d0:	42b5      	cmp	r5, r6
 80274d2:	d816      	bhi.n	8027502 <rshift+0x8a>
 80274d4:	9b00      	ldr	r3, [sp, #0]
 80274d6:	2600      	movs	r6, #0
 80274d8:	3301      	adds	r3, #1
 80274da:	429d      	cmp	r5, r3
 80274dc:	d303      	bcc.n	80274e6 <rshift+0x6e>
 80274de:	9b02      	ldr	r3, [sp, #8]
 80274e0:	1ae4      	subs	r4, r4, r3
 80274e2:	00a6      	lsls	r6, r4, #2
 80274e4:	3e04      	subs	r6, #4
 80274e6:	1996      	adds	r6, r2, r6
 80274e8:	6031      	str	r1, [r6, #0]
 80274ea:	2900      	cmp	r1, #0
 80274ec:	d000      	beq.n	80274f0 <rshift+0x78>
 80274ee:	3604      	adds	r6, #4
 80274f0:	1ab1      	subs	r1, r6, r2
 80274f2:	1089      	asrs	r1, r1, #2
 80274f4:	6101      	str	r1, [r0, #16]
 80274f6:	4296      	cmp	r6, r2
 80274f8:	d101      	bne.n	80274fe <rshift+0x86>
 80274fa:	2300      	movs	r3, #0
 80274fc:	6143      	str	r3, [r0, #20]
 80274fe:	b005      	add	sp, #20
 8027500:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8027502:	6837      	ldr	r7, [r6, #0]
 8027504:	9b03      	ldr	r3, [sp, #12]
 8027506:	409f      	lsls	r7, r3
 8027508:	430f      	orrs	r7, r1
 802750a:	4661      	mov	r1, ip
 802750c:	c180      	stmia	r1!, {r7}
 802750e:	468c      	mov	ip, r1
 8027510:	9b01      	ldr	r3, [sp, #4]
 8027512:	ce02      	ldmia	r6!, {r1}
 8027514:	40d9      	lsrs	r1, r3
 8027516:	e7db      	b.n	80274d0 <rshift+0x58>
 8027518:	c980      	ldmia	r1!, {r7}
 802751a:	c680      	stmia	r6!, {r7}
 802751c:	e7c3      	b.n	80274a6 <rshift+0x2e>

0802751e <__hexdig_fun>:
 802751e:	0002      	movs	r2, r0
 8027520:	3a30      	subs	r2, #48	@ 0x30
 8027522:	0003      	movs	r3, r0
 8027524:	2a09      	cmp	r2, #9
 8027526:	d802      	bhi.n	802752e <__hexdig_fun+0x10>
 8027528:	3b20      	subs	r3, #32
 802752a:	b2d8      	uxtb	r0, r3
 802752c:	4770      	bx	lr
 802752e:	0002      	movs	r2, r0
 8027530:	3a61      	subs	r2, #97	@ 0x61
 8027532:	2a05      	cmp	r2, #5
 8027534:	d801      	bhi.n	802753a <__hexdig_fun+0x1c>
 8027536:	3b47      	subs	r3, #71	@ 0x47
 8027538:	e7f7      	b.n	802752a <__hexdig_fun+0xc>
 802753a:	001a      	movs	r2, r3
 802753c:	3a41      	subs	r2, #65	@ 0x41
 802753e:	2000      	movs	r0, #0
 8027540:	2a05      	cmp	r2, #5
 8027542:	d8f3      	bhi.n	802752c <__hexdig_fun+0xe>
 8027544:	3b27      	subs	r3, #39	@ 0x27
 8027546:	e7f0      	b.n	802752a <__hexdig_fun+0xc>

08027548 <__gethex>:
 8027548:	b5f0      	push	{r4, r5, r6, r7, lr}
 802754a:	b089      	sub	sp, #36	@ 0x24
 802754c:	9307      	str	r3, [sp, #28]
 802754e:	680b      	ldr	r3, [r1, #0]
 8027550:	9201      	str	r2, [sp, #4]
 8027552:	9003      	str	r0, [sp, #12]
 8027554:	9106      	str	r1, [sp, #24]
 8027556:	1c9a      	adds	r2, r3, #2
 8027558:	0011      	movs	r1, r2
 802755a:	3201      	adds	r2, #1
 802755c:	1e50      	subs	r0, r2, #1
 802755e:	7800      	ldrb	r0, [r0, #0]
 8027560:	2830      	cmp	r0, #48	@ 0x30
 8027562:	d0f9      	beq.n	8027558 <__gethex+0x10>
 8027564:	1acb      	subs	r3, r1, r3
 8027566:	3b02      	subs	r3, #2
 8027568:	9305      	str	r3, [sp, #20]
 802756a:	9100      	str	r1, [sp, #0]
 802756c:	f7ff ffd7 	bl	802751e <__hexdig_fun>
 8027570:	2300      	movs	r3, #0
 8027572:	001d      	movs	r5, r3
 8027574:	9302      	str	r3, [sp, #8]
 8027576:	4298      	cmp	r0, r3
 8027578:	d11e      	bne.n	80275b8 <__gethex+0x70>
 802757a:	2201      	movs	r2, #1
 802757c:	49a6      	ldr	r1, [pc, #664]	@ (8027818 <__gethex+0x2d0>)
 802757e:	9800      	ldr	r0, [sp, #0]
 8027580:	f7fe ffe4 	bl	802654c <strncmp>
 8027584:	0007      	movs	r7, r0
 8027586:	42a8      	cmp	r0, r5
 8027588:	d000      	beq.n	802758c <__gethex+0x44>
 802758a:	e06a      	b.n	8027662 <__gethex+0x11a>
 802758c:	9b00      	ldr	r3, [sp, #0]
 802758e:	7858      	ldrb	r0, [r3, #1]
 8027590:	1c5c      	adds	r4, r3, #1
 8027592:	f7ff ffc4 	bl	802751e <__hexdig_fun>
 8027596:	2301      	movs	r3, #1
 8027598:	9302      	str	r3, [sp, #8]
 802759a:	42a8      	cmp	r0, r5
 802759c:	d02f      	beq.n	80275fe <__gethex+0xb6>
 802759e:	9400      	str	r4, [sp, #0]
 80275a0:	9b00      	ldr	r3, [sp, #0]
 80275a2:	7818      	ldrb	r0, [r3, #0]
 80275a4:	2830      	cmp	r0, #48	@ 0x30
 80275a6:	d009      	beq.n	80275bc <__gethex+0x74>
 80275a8:	f7ff ffb9 	bl	802751e <__hexdig_fun>
 80275ac:	4242      	negs	r2, r0
 80275ae:	4142      	adcs	r2, r0
 80275b0:	2301      	movs	r3, #1
 80275b2:	0025      	movs	r5, r4
 80275b4:	9202      	str	r2, [sp, #8]
 80275b6:	9305      	str	r3, [sp, #20]
 80275b8:	9c00      	ldr	r4, [sp, #0]
 80275ba:	e004      	b.n	80275c6 <__gethex+0x7e>
 80275bc:	9b00      	ldr	r3, [sp, #0]
 80275be:	3301      	adds	r3, #1
 80275c0:	9300      	str	r3, [sp, #0]
 80275c2:	e7ed      	b.n	80275a0 <__gethex+0x58>
 80275c4:	3401      	adds	r4, #1
 80275c6:	7820      	ldrb	r0, [r4, #0]
 80275c8:	f7ff ffa9 	bl	802751e <__hexdig_fun>
 80275cc:	1e07      	subs	r7, r0, #0
 80275ce:	d1f9      	bne.n	80275c4 <__gethex+0x7c>
 80275d0:	2201      	movs	r2, #1
 80275d2:	0020      	movs	r0, r4
 80275d4:	4990      	ldr	r1, [pc, #576]	@ (8027818 <__gethex+0x2d0>)
 80275d6:	f7fe ffb9 	bl	802654c <strncmp>
 80275da:	2800      	cmp	r0, #0
 80275dc:	d10d      	bne.n	80275fa <__gethex+0xb2>
 80275de:	2d00      	cmp	r5, #0
 80275e0:	d106      	bne.n	80275f0 <__gethex+0xa8>
 80275e2:	3401      	adds	r4, #1
 80275e4:	0025      	movs	r5, r4
 80275e6:	7820      	ldrb	r0, [r4, #0]
 80275e8:	f7ff ff99 	bl	802751e <__hexdig_fun>
 80275ec:	2800      	cmp	r0, #0
 80275ee:	d102      	bne.n	80275f6 <__gethex+0xae>
 80275f0:	1b2d      	subs	r5, r5, r4
 80275f2:	00af      	lsls	r7, r5, #2
 80275f4:	e003      	b.n	80275fe <__gethex+0xb6>
 80275f6:	3401      	adds	r4, #1
 80275f8:	e7f5      	b.n	80275e6 <__gethex+0x9e>
 80275fa:	2d00      	cmp	r5, #0
 80275fc:	d1f8      	bne.n	80275f0 <__gethex+0xa8>
 80275fe:	2220      	movs	r2, #32
 8027600:	7823      	ldrb	r3, [r4, #0]
 8027602:	0026      	movs	r6, r4
 8027604:	4393      	bics	r3, r2
 8027606:	2b50      	cmp	r3, #80	@ 0x50
 8027608:	d11d      	bne.n	8027646 <__gethex+0xfe>
 802760a:	7863      	ldrb	r3, [r4, #1]
 802760c:	2b2b      	cmp	r3, #43	@ 0x2b
 802760e:	d02d      	beq.n	802766c <__gethex+0x124>
 8027610:	2b2d      	cmp	r3, #45	@ 0x2d
 8027612:	d02f      	beq.n	8027674 <__gethex+0x12c>
 8027614:	2300      	movs	r3, #0
 8027616:	1c66      	adds	r6, r4, #1
 8027618:	9304      	str	r3, [sp, #16]
 802761a:	7830      	ldrb	r0, [r6, #0]
 802761c:	f7ff ff7f 	bl	802751e <__hexdig_fun>
 8027620:	1e43      	subs	r3, r0, #1
 8027622:	b2db      	uxtb	r3, r3
 8027624:	0005      	movs	r5, r0
 8027626:	2b18      	cmp	r3, #24
 8027628:	d82a      	bhi.n	8027680 <__gethex+0x138>
 802762a:	7870      	ldrb	r0, [r6, #1]
 802762c:	f7ff ff77 	bl	802751e <__hexdig_fun>
 8027630:	1e43      	subs	r3, r0, #1
 8027632:	b2db      	uxtb	r3, r3
 8027634:	3601      	adds	r6, #1
 8027636:	3d10      	subs	r5, #16
 8027638:	2b18      	cmp	r3, #24
 802763a:	d91d      	bls.n	8027678 <__gethex+0x130>
 802763c:	9b04      	ldr	r3, [sp, #16]
 802763e:	2b00      	cmp	r3, #0
 8027640:	d000      	beq.n	8027644 <__gethex+0xfc>
 8027642:	426d      	negs	r5, r5
 8027644:	197f      	adds	r7, r7, r5
 8027646:	9b06      	ldr	r3, [sp, #24]
 8027648:	601e      	str	r6, [r3, #0]
 802764a:	9b02      	ldr	r3, [sp, #8]
 802764c:	2b00      	cmp	r3, #0
 802764e:	d019      	beq.n	8027684 <__gethex+0x13c>
 8027650:	9b05      	ldr	r3, [sp, #20]
 8027652:	2606      	movs	r6, #6
 8027654:	425a      	negs	r2, r3
 8027656:	4153      	adcs	r3, r2
 8027658:	425b      	negs	r3, r3
 802765a:	401e      	ands	r6, r3
 802765c:	0030      	movs	r0, r6
 802765e:	b009      	add	sp, #36	@ 0x24
 8027660:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8027662:	2301      	movs	r3, #1
 8027664:	2700      	movs	r7, #0
 8027666:	9c00      	ldr	r4, [sp, #0]
 8027668:	9302      	str	r3, [sp, #8]
 802766a:	e7c8      	b.n	80275fe <__gethex+0xb6>
 802766c:	2300      	movs	r3, #0
 802766e:	9304      	str	r3, [sp, #16]
 8027670:	1ca6      	adds	r6, r4, #2
 8027672:	e7d2      	b.n	802761a <__gethex+0xd2>
 8027674:	2301      	movs	r3, #1
 8027676:	e7fa      	b.n	802766e <__gethex+0x126>
 8027678:	230a      	movs	r3, #10
 802767a:	435d      	muls	r5, r3
 802767c:	182d      	adds	r5, r5, r0
 802767e:	e7d4      	b.n	802762a <__gethex+0xe2>
 8027680:	0026      	movs	r6, r4
 8027682:	e7e0      	b.n	8027646 <__gethex+0xfe>
 8027684:	9b00      	ldr	r3, [sp, #0]
 8027686:	9902      	ldr	r1, [sp, #8]
 8027688:	1ae3      	subs	r3, r4, r3
 802768a:	3b01      	subs	r3, #1
 802768c:	2b07      	cmp	r3, #7
 802768e:	dc0a      	bgt.n	80276a6 <__gethex+0x15e>
 8027690:	9803      	ldr	r0, [sp, #12]
 8027692:	f000 fb19 	bl	8027cc8 <_Balloc>
 8027696:	1e05      	subs	r5, r0, #0
 8027698:	d108      	bne.n	80276ac <__gethex+0x164>
 802769a:	002a      	movs	r2, r5
 802769c:	21e4      	movs	r1, #228	@ 0xe4
 802769e:	4b5f      	ldr	r3, [pc, #380]	@ (802781c <__gethex+0x2d4>)
 80276a0:	485f      	ldr	r0, [pc, #380]	@ (8027820 <__gethex+0x2d8>)
 80276a2:	f001 fbe9 	bl	8028e78 <__assert_func>
 80276a6:	3101      	adds	r1, #1
 80276a8:	105b      	asrs	r3, r3, #1
 80276aa:	e7ef      	b.n	802768c <__gethex+0x144>
 80276ac:	0003      	movs	r3, r0
 80276ae:	3314      	adds	r3, #20
 80276b0:	9302      	str	r3, [sp, #8]
 80276b2:	9305      	str	r3, [sp, #20]
 80276b4:	2300      	movs	r3, #0
 80276b6:	001e      	movs	r6, r3
 80276b8:	9304      	str	r3, [sp, #16]
 80276ba:	9b00      	ldr	r3, [sp, #0]
 80276bc:	42a3      	cmp	r3, r4
 80276be:	d338      	bcc.n	8027732 <__gethex+0x1ea>
 80276c0:	9c05      	ldr	r4, [sp, #20]
 80276c2:	9b02      	ldr	r3, [sp, #8]
 80276c4:	c440      	stmia	r4!, {r6}
 80276c6:	1ae4      	subs	r4, r4, r3
 80276c8:	10a4      	asrs	r4, r4, #2
 80276ca:	0030      	movs	r0, r6
 80276cc:	612c      	str	r4, [r5, #16]
 80276ce:	f000 fbf3 	bl	8027eb8 <__hi0bits>
 80276d2:	9b01      	ldr	r3, [sp, #4]
 80276d4:	0164      	lsls	r4, r4, #5
 80276d6:	681b      	ldr	r3, [r3, #0]
 80276d8:	1a26      	subs	r6, r4, r0
 80276da:	9300      	str	r3, [sp, #0]
 80276dc:	429e      	cmp	r6, r3
 80276de:	dd52      	ble.n	8027786 <__gethex+0x23e>
 80276e0:	1af6      	subs	r6, r6, r3
 80276e2:	0031      	movs	r1, r6
 80276e4:	0028      	movs	r0, r5
 80276e6:	f000 ff8e 	bl	8028606 <__any_on>
 80276ea:	1e04      	subs	r4, r0, #0
 80276ec:	d00f      	beq.n	802770e <__gethex+0x1c6>
 80276ee:	2401      	movs	r4, #1
 80276f0:	211f      	movs	r1, #31
 80276f2:	0020      	movs	r0, r4
 80276f4:	1e73      	subs	r3, r6, #1
 80276f6:	4019      	ands	r1, r3
 80276f8:	4088      	lsls	r0, r1
 80276fa:	0001      	movs	r1, r0
 80276fc:	115a      	asrs	r2, r3, #5
 80276fe:	9802      	ldr	r0, [sp, #8]
 8027700:	0092      	lsls	r2, r2, #2
 8027702:	5812      	ldr	r2, [r2, r0]
 8027704:	420a      	tst	r2, r1
 8027706:	d002      	beq.n	802770e <__gethex+0x1c6>
 8027708:	42a3      	cmp	r3, r4
 802770a:	dc34      	bgt.n	8027776 <__gethex+0x22e>
 802770c:	2402      	movs	r4, #2
 802770e:	0031      	movs	r1, r6
 8027710:	0028      	movs	r0, r5
 8027712:	f7ff feb1 	bl	8027478 <rshift>
 8027716:	19bf      	adds	r7, r7, r6
 8027718:	9b01      	ldr	r3, [sp, #4]
 802771a:	689b      	ldr	r3, [r3, #8]
 802771c:	42bb      	cmp	r3, r7
 802771e:	da42      	bge.n	80277a6 <__gethex+0x25e>
 8027720:	0029      	movs	r1, r5
 8027722:	9803      	ldr	r0, [sp, #12]
 8027724:	f000 fb14 	bl	8027d50 <_Bfree>
 8027728:	2300      	movs	r3, #0
 802772a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 802772c:	26a3      	movs	r6, #163	@ 0xa3
 802772e:	6013      	str	r3, [r2, #0]
 8027730:	e794      	b.n	802765c <__gethex+0x114>
 8027732:	3c01      	subs	r4, #1
 8027734:	7823      	ldrb	r3, [r4, #0]
 8027736:	2b2e      	cmp	r3, #46	@ 0x2e
 8027738:	d012      	beq.n	8027760 <__gethex+0x218>
 802773a:	9b04      	ldr	r3, [sp, #16]
 802773c:	2b20      	cmp	r3, #32
 802773e:	d104      	bne.n	802774a <__gethex+0x202>
 8027740:	9b05      	ldr	r3, [sp, #20]
 8027742:	c340      	stmia	r3!, {r6}
 8027744:	2600      	movs	r6, #0
 8027746:	9305      	str	r3, [sp, #20]
 8027748:	9604      	str	r6, [sp, #16]
 802774a:	7820      	ldrb	r0, [r4, #0]
 802774c:	f7ff fee7 	bl	802751e <__hexdig_fun>
 8027750:	230f      	movs	r3, #15
 8027752:	4018      	ands	r0, r3
 8027754:	9b04      	ldr	r3, [sp, #16]
 8027756:	4098      	lsls	r0, r3
 8027758:	3304      	adds	r3, #4
 802775a:	4306      	orrs	r6, r0
 802775c:	9304      	str	r3, [sp, #16]
 802775e:	e7ac      	b.n	80276ba <__gethex+0x172>
 8027760:	9b00      	ldr	r3, [sp, #0]
 8027762:	42a3      	cmp	r3, r4
 8027764:	d8e9      	bhi.n	802773a <__gethex+0x1f2>
 8027766:	2201      	movs	r2, #1
 8027768:	0020      	movs	r0, r4
 802776a:	492b      	ldr	r1, [pc, #172]	@ (8027818 <__gethex+0x2d0>)
 802776c:	f7fe feee 	bl	802654c <strncmp>
 8027770:	2800      	cmp	r0, #0
 8027772:	d1e2      	bne.n	802773a <__gethex+0x1f2>
 8027774:	e7a1      	b.n	80276ba <__gethex+0x172>
 8027776:	0028      	movs	r0, r5
 8027778:	1eb1      	subs	r1, r6, #2
 802777a:	f000 ff44 	bl	8028606 <__any_on>
 802777e:	2800      	cmp	r0, #0
 8027780:	d0c4      	beq.n	802770c <__gethex+0x1c4>
 8027782:	2403      	movs	r4, #3
 8027784:	e7c3      	b.n	802770e <__gethex+0x1c6>
 8027786:	9b00      	ldr	r3, [sp, #0]
 8027788:	2400      	movs	r4, #0
 802778a:	429e      	cmp	r6, r3
 802778c:	dac4      	bge.n	8027718 <__gethex+0x1d0>
 802778e:	1b9e      	subs	r6, r3, r6
 8027790:	0029      	movs	r1, r5
 8027792:	0032      	movs	r2, r6
 8027794:	9803      	ldr	r0, [sp, #12]
 8027796:	f000 fcfd 	bl	8028194 <__lshift>
 802779a:	0003      	movs	r3, r0
 802779c:	3314      	adds	r3, #20
 802779e:	0005      	movs	r5, r0
 80277a0:	1bbf      	subs	r7, r7, r6
 80277a2:	9302      	str	r3, [sp, #8]
 80277a4:	e7b8      	b.n	8027718 <__gethex+0x1d0>
 80277a6:	9b01      	ldr	r3, [sp, #4]
 80277a8:	685e      	ldr	r6, [r3, #4]
 80277aa:	42be      	cmp	r6, r7
 80277ac:	dd6f      	ble.n	802788e <__gethex+0x346>
 80277ae:	9b00      	ldr	r3, [sp, #0]
 80277b0:	1bf6      	subs	r6, r6, r7
 80277b2:	42b3      	cmp	r3, r6
 80277b4:	dc36      	bgt.n	8027824 <__gethex+0x2dc>
 80277b6:	9b01      	ldr	r3, [sp, #4]
 80277b8:	68db      	ldr	r3, [r3, #12]
 80277ba:	2b02      	cmp	r3, #2
 80277bc:	d024      	beq.n	8027808 <__gethex+0x2c0>
 80277be:	2b03      	cmp	r3, #3
 80277c0:	d026      	beq.n	8027810 <__gethex+0x2c8>
 80277c2:	2b01      	cmp	r3, #1
 80277c4:	d117      	bne.n	80277f6 <__gethex+0x2ae>
 80277c6:	9b00      	ldr	r3, [sp, #0]
 80277c8:	42b3      	cmp	r3, r6
 80277ca:	d114      	bne.n	80277f6 <__gethex+0x2ae>
 80277cc:	2b01      	cmp	r3, #1
 80277ce:	d10b      	bne.n	80277e8 <__gethex+0x2a0>
 80277d0:	9b01      	ldr	r3, [sp, #4]
 80277d2:	9a07      	ldr	r2, [sp, #28]
 80277d4:	685b      	ldr	r3, [r3, #4]
 80277d6:	2662      	movs	r6, #98	@ 0x62
 80277d8:	6013      	str	r3, [r2, #0]
 80277da:	2301      	movs	r3, #1
 80277dc:	9a02      	ldr	r2, [sp, #8]
 80277de:	612b      	str	r3, [r5, #16]
 80277e0:	6013      	str	r3, [r2, #0]
 80277e2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80277e4:	601d      	str	r5, [r3, #0]
 80277e6:	e739      	b.n	802765c <__gethex+0x114>
 80277e8:	9900      	ldr	r1, [sp, #0]
 80277ea:	0028      	movs	r0, r5
 80277ec:	3901      	subs	r1, #1
 80277ee:	f000 ff0a 	bl	8028606 <__any_on>
 80277f2:	2800      	cmp	r0, #0
 80277f4:	d1ec      	bne.n	80277d0 <__gethex+0x288>
 80277f6:	0029      	movs	r1, r5
 80277f8:	9803      	ldr	r0, [sp, #12]
 80277fa:	f000 faa9 	bl	8027d50 <_Bfree>
 80277fe:	2300      	movs	r3, #0
 8027800:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8027802:	2650      	movs	r6, #80	@ 0x50
 8027804:	6013      	str	r3, [r2, #0]
 8027806:	e729      	b.n	802765c <__gethex+0x114>
 8027808:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 802780a:	2b00      	cmp	r3, #0
 802780c:	d1f3      	bne.n	80277f6 <__gethex+0x2ae>
 802780e:	e7df      	b.n	80277d0 <__gethex+0x288>
 8027810:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8027812:	2b00      	cmp	r3, #0
 8027814:	d1dc      	bne.n	80277d0 <__gethex+0x288>
 8027816:	e7ee      	b.n	80277f6 <__gethex+0x2ae>
 8027818:	0802ea18 	.word	0x0802ea18
 802781c:	0802ead2 	.word	0x0802ead2
 8027820:	0802eae3 	.word	0x0802eae3
 8027824:	1e77      	subs	r7, r6, #1
 8027826:	2c00      	cmp	r4, #0
 8027828:	d12f      	bne.n	802788a <__gethex+0x342>
 802782a:	2f00      	cmp	r7, #0
 802782c:	d004      	beq.n	8027838 <__gethex+0x2f0>
 802782e:	0039      	movs	r1, r7
 8027830:	0028      	movs	r0, r5
 8027832:	f000 fee8 	bl	8028606 <__any_on>
 8027836:	0004      	movs	r4, r0
 8027838:	231f      	movs	r3, #31
 802783a:	117a      	asrs	r2, r7, #5
 802783c:	401f      	ands	r7, r3
 802783e:	3b1e      	subs	r3, #30
 8027840:	40bb      	lsls	r3, r7
 8027842:	9902      	ldr	r1, [sp, #8]
 8027844:	0092      	lsls	r2, r2, #2
 8027846:	5852      	ldr	r2, [r2, r1]
 8027848:	421a      	tst	r2, r3
 802784a:	d001      	beq.n	8027850 <__gethex+0x308>
 802784c:	2302      	movs	r3, #2
 802784e:	431c      	orrs	r4, r3
 8027850:	9b00      	ldr	r3, [sp, #0]
 8027852:	0031      	movs	r1, r6
 8027854:	1b9b      	subs	r3, r3, r6
 8027856:	2602      	movs	r6, #2
 8027858:	0028      	movs	r0, r5
 802785a:	9300      	str	r3, [sp, #0]
 802785c:	f7ff fe0c 	bl	8027478 <rshift>
 8027860:	9b01      	ldr	r3, [sp, #4]
 8027862:	685f      	ldr	r7, [r3, #4]
 8027864:	2c00      	cmp	r4, #0
 8027866:	d03f      	beq.n	80278e8 <__gethex+0x3a0>
 8027868:	9b01      	ldr	r3, [sp, #4]
 802786a:	68db      	ldr	r3, [r3, #12]
 802786c:	2b02      	cmp	r3, #2
 802786e:	d010      	beq.n	8027892 <__gethex+0x34a>
 8027870:	2b03      	cmp	r3, #3
 8027872:	d012      	beq.n	802789a <__gethex+0x352>
 8027874:	2b01      	cmp	r3, #1
 8027876:	d106      	bne.n	8027886 <__gethex+0x33e>
 8027878:	07a2      	lsls	r2, r4, #30
 802787a:	d504      	bpl.n	8027886 <__gethex+0x33e>
 802787c:	9a02      	ldr	r2, [sp, #8]
 802787e:	6812      	ldr	r2, [r2, #0]
 8027880:	4314      	orrs	r4, r2
 8027882:	421c      	tst	r4, r3
 8027884:	d10c      	bne.n	80278a0 <__gethex+0x358>
 8027886:	2310      	movs	r3, #16
 8027888:	e02d      	b.n	80278e6 <__gethex+0x39e>
 802788a:	2401      	movs	r4, #1
 802788c:	e7d4      	b.n	8027838 <__gethex+0x2f0>
 802788e:	2601      	movs	r6, #1
 8027890:	e7e8      	b.n	8027864 <__gethex+0x31c>
 8027892:	2301      	movs	r3, #1
 8027894:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8027896:	1a9b      	subs	r3, r3, r2
 8027898:	930f      	str	r3, [sp, #60]	@ 0x3c
 802789a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 802789c:	2b00      	cmp	r3, #0
 802789e:	d0f2      	beq.n	8027886 <__gethex+0x33e>
 80278a0:	692b      	ldr	r3, [r5, #16]
 80278a2:	2000      	movs	r0, #0
 80278a4:	9302      	str	r3, [sp, #8]
 80278a6:	009b      	lsls	r3, r3, #2
 80278a8:	9304      	str	r3, [sp, #16]
 80278aa:	002b      	movs	r3, r5
 80278ac:	9a04      	ldr	r2, [sp, #16]
 80278ae:	3314      	adds	r3, #20
 80278b0:	1899      	adds	r1, r3, r2
 80278b2:	681a      	ldr	r2, [r3, #0]
 80278b4:	1c54      	adds	r4, r2, #1
 80278b6:	d01c      	beq.n	80278f2 <__gethex+0x3aa>
 80278b8:	3201      	adds	r2, #1
 80278ba:	601a      	str	r2, [r3, #0]
 80278bc:	002b      	movs	r3, r5
 80278be:	3314      	adds	r3, #20
 80278c0:	2e02      	cmp	r6, #2
 80278c2:	d13f      	bne.n	8027944 <__gethex+0x3fc>
 80278c4:	9a01      	ldr	r2, [sp, #4]
 80278c6:	9900      	ldr	r1, [sp, #0]
 80278c8:	6812      	ldr	r2, [r2, #0]
 80278ca:	3a01      	subs	r2, #1
 80278cc:	428a      	cmp	r2, r1
 80278ce:	d109      	bne.n	80278e4 <__gethex+0x39c>
 80278d0:	000a      	movs	r2, r1
 80278d2:	201f      	movs	r0, #31
 80278d4:	4010      	ands	r0, r2
 80278d6:	2201      	movs	r2, #1
 80278d8:	4082      	lsls	r2, r0
 80278da:	1149      	asrs	r1, r1, #5
 80278dc:	0089      	lsls	r1, r1, #2
 80278de:	58cb      	ldr	r3, [r1, r3]
 80278e0:	4213      	tst	r3, r2
 80278e2:	d13d      	bne.n	8027960 <__gethex+0x418>
 80278e4:	2320      	movs	r3, #32
 80278e6:	431e      	orrs	r6, r3
 80278e8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80278ea:	601d      	str	r5, [r3, #0]
 80278ec:	9b07      	ldr	r3, [sp, #28]
 80278ee:	601f      	str	r7, [r3, #0]
 80278f0:	e6b4      	b.n	802765c <__gethex+0x114>
 80278f2:	c301      	stmia	r3!, {r0}
 80278f4:	4299      	cmp	r1, r3
 80278f6:	d8dc      	bhi.n	80278b2 <__gethex+0x36a>
 80278f8:	68ab      	ldr	r3, [r5, #8]
 80278fa:	9a02      	ldr	r2, [sp, #8]
 80278fc:	429a      	cmp	r2, r3
 80278fe:	db18      	blt.n	8027932 <__gethex+0x3ea>
 8027900:	6869      	ldr	r1, [r5, #4]
 8027902:	9803      	ldr	r0, [sp, #12]
 8027904:	3101      	adds	r1, #1
 8027906:	f000 f9df 	bl	8027cc8 <_Balloc>
 802790a:	1e04      	subs	r4, r0, #0
 802790c:	d104      	bne.n	8027918 <__gethex+0x3d0>
 802790e:	0022      	movs	r2, r4
 8027910:	2184      	movs	r1, #132	@ 0x84
 8027912:	4b1d      	ldr	r3, [pc, #116]	@ (8027988 <__gethex+0x440>)
 8027914:	481d      	ldr	r0, [pc, #116]	@ (802798c <__gethex+0x444>)
 8027916:	e6c4      	b.n	80276a2 <__gethex+0x15a>
 8027918:	0029      	movs	r1, r5
 802791a:	692a      	ldr	r2, [r5, #16]
 802791c:	310c      	adds	r1, #12
 802791e:	3202      	adds	r2, #2
 8027920:	0092      	lsls	r2, r2, #2
 8027922:	300c      	adds	r0, #12
 8027924:	f7fe fed8 	bl	80266d8 <memcpy>
 8027928:	0029      	movs	r1, r5
 802792a:	9803      	ldr	r0, [sp, #12]
 802792c:	f000 fa10 	bl	8027d50 <_Bfree>
 8027930:	0025      	movs	r5, r4
 8027932:	692b      	ldr	r3, [r5, #16]
 8027934:	1c5a      	adds	r2, r3, #1
 8027936:	612a      	str	r2, [r5, #16]
 8027938:	2201      	movs	r2, #1
 802793a:	3304      	adds	r3, #4
 802793c:	009b      	lsls	r3, r3, #2
 802793e:	18eb      	adds	r3, r5, r3
 8027940:	605a      	str	r2, [r3, #4]
 8027942:	e7bb      	b.n	80278bc <__gethex+0x374>
 8027944:	692a      	ldr	r2, [r5, #16]
 8027946:	9902      	ldr	r1, [sp, #8]
 8027948:	428a      	cmp	r2, r1
 802794a:	dd0b      	ble.n	8027964 <__gethex+0x41c>
 802794c:	2101      	movs	r1, #1
 802794e:	0028      	movs	r0, r5
 8027950:	f7ff fd92 	bl	8027478 <rshift>
 8027954:	9b01      	ldr	r3, [sp, #4]
 8027956:	3701      	adds	r7, #1
 8027958:	689b      	ldr	r3, [r3, #8]
 802795a:	42bb      	cmp	r3, r7
 802795c:	da00      	bge.n	8027960 <__gethex+0x418>
 802795e:	e6df      	b.n	8027720 <__gethex+0x1d8>
 8027960:	2601      	movs	r6, #1
 8027962:	e7bf      	b.n	80278e4 <__gethex+0x39c>
 8027964:	221f      	movs	r2, #31
 8027966:	9c00      	ldr	r4, [sp, #0]
 8027968:	9900      	ldr	r1, [sp, #0]
 802796a:	4014      	ands	r4, r2
 802796c:	4211      	tst	r1, r2
 802796e:	d0f7      	beq.n	8027960 <__gethex+0x418>
 8027970:	9a04      	ldr	r2, [sp, #16]
 8027972:	189b      	adds	r3, r3, r2
 8027974:	3b04      	subs	r3, #4
 8027976:	6818      	ldr	r0, [r3, #0]
 8027978:	f000 fa9e 	bl	8027eb8 <__hi0bits>
 802797c:	2320      	movs	r3, #32
 802797e:	1b1b      	subs	r3, r3, r4
 8027980:	4298      	cmp	r0, r3
 8027982:	dbe3      	blt.n	802794c <__gethex+0x404>
 8027984:	e7ec      	b.n	8027960 <__gethex+0x418>
 8027986:	46c0      	nop			@ (mov r8, r8)
 8027988:	0802ead2 	.word	0x0802ead2
 802798c:	0802eae3 	.word	0x0802eae3

08027990 <L_shift>:
 8027990:	2308      	movs	r3, #8
 8027992:	b570      	push	{r4, r5, r6, lr}
 8027994:	2520      	movs	r5, #32
 8027996:	1a9a      	subs	r2, r3, r2
 8027998:	0092      	lsls	r2, r2, #2
 802799a:	1aad      	subs	r5, r5, r2
 802799c:	6843      	ldr	r3, [r0, #4]
 802799e:	6804      	ldr	r4, [r0, #0]
 80279a0:	001e      	movs	r6, r3
 80279a2:	40ae      	lsls	r6, r5
 80279a4:	40d3      	lsrs	r3, r2
 80279a6:	4334      	orrs	r4, r6
 80279a8:	6004      	str	r4, [r0, #0]
 80279aa:	6043      	str	r3, [r0, #4]
 80279ac:	3004      	adds	r0, #4
 80279ae:	4288      	cmp	r0, r1
 80279b0:	d3f4      	bcc.n	802799c <L_shift+0xc>
 80279b2:	bd70      	pop	{r4, r5, r6, pc}

080279b4 <__match>:
 80279b4:	b530      	push	{r4, r5, lr}
 80279b6:	6803      	ldr	r3, [r0, #0]
 80279b8:	780c      	ldrb	r4, [r1, #0]
 80279ba:	3301      	adds	r3, #1
 80279bc:	2c00      	cmp	r4, #0
 80279be:	d102      	bne.n	80279c6 <__match+0x12>
 80279c0:	6003      	str	r3, [r0, #0]
 80279c2:	2001      	movs	r0, #1
 80279c4:	bd30      	pop	{r4, r5, pc}
 80279c6:	781a      	ldrb	r2, [r3, #0]
 80279c8:	0015      	movs	r5, r2
 80279ca:	3d41      	subs	r5, #65	@ 0x41
 80279cc:	2d19      	cmp	r5, #25
 80279ce:	d800      	bhi.n	80279d2 <__match+0x1e>
 80279d0:	3220      	adds	r2, #32
 80279d2:	3101      	adds	r1, #1
 80279d4:	42a2      	cmp	r2, r4
 80279d6:	d0ef      	beq.n	80279b8 <__match+0x4>
 80279d8:	2000      	movs	r0, #0
 80279da:	e7f3      	b.n	80279c4 <__match+0x10>

080279dc <__hexnan>:
 80279dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80279de:	680b      	ldr	r3, [r1, #0]
 80279e0:	b08b      	sub	sp, #44	@ 0x2c
 80279e2:	9201      	str	r2, [sp, #4]
 80279e4:	9901      	ldr	r1, [sp, #4]
 80279e6:	115a      	asrs	r2, r3, #5
 80279e8:	0092      	lsls	r2, r2, #2
 80279ea:	188a      	adds	r2, r1, r2
 80279ec:	9202      	str	r2, [sp, #8]
 80279ee:	0019      	movs	r1, r3
 80279f0:	221f      	movs	r2, #31
 80279f2:	4011      	ands	r1, r2
 80279f4:	9008      	str	r0, [sp, #32]
 80279f6:	9106      	str	r1, [sp, #24]
 80279f8:	4213      	tst	r3, r2
 80279fa:	d002      	beq.n	8027a02 <__hexnan+0x26>
 80279fc:	9b02      	ldr	r3, [sp, #8]
 80279fe:	3304      	adds	r3, #4
 8027a00:	9302      	str	r3, [sp, #8]
 8027a02:	9b02      	ldr	r3, [sp, #8]
 8027a04:	2500      	movs	r5, #0
 8027a06:	1f1f      	subs	r7, r3, #4
 8027a08:	003e      	movs	r6, r7
 8027a0a:	003c      	movs	r4, r7
 8027a0c:	9b08      	ldr	r3, [sp, #32]
 8027a0e:	603d      	str	r5, [r7, #0]
 8027a10:	681b      	ldr	r3, [r3, #0]
 8027a12:	9507      	str	r5, [sp, #28]
 8027a14:	9305      	str	r3, [sp, #20]
 8027a16:	9503      	str	r5, [sp, #12]
 8027a18:	9b05      	ldr	r3, [sp, #20]
 8027a1a:	3301      	adds	r3, #1
 8027a1c:	9309      	str	r3, [sp, #36]	@ 0x24
 8027a1e:	9b05      	ldr	r3, [sp, #20]
 8027a20:	785b      	ldrb	r3, [r3, #1]
 8027a22:	9304      	str	r3, [sp, #16]
 8027a24:	2b00      	cmp	r3, #0
 8027a26:	d028      	beq.n	8027a7a <__hexnan+0x9e>
 8027a28:	9804      	ldr	r0, [sp, #16]
 8027a2a:	f7ff fd78 	bl	802751e <__hexdig_fun>
 8027a2e:	2800      	cmp	r0, #0
 8027a30:	d155      	bne.n	8027ade <__hexnan+0x102>
 8027a32:	9b04      	ldr	r3, [sp, #16]
 8027a34:	2b20      	cmp	r3, #32
 8027a36:	d819      	bhi.n	8027a6c <__hexnan+0x90>
 8027a38:	9b03      	ldr	r3, [sp, #12]
 8027a3a:	9a07      	ldr	r2, [sp, #28]
 8027a3c:	4293      	cmp	r3, r2
 8027a3e:	dd12      	ble.n	8027a66 <__hexnan+0x8a>
 8027a40:	42b4      	cmp	r4, r6
 8027a42:	d206      	bcs.n	8027a52 <__hexnan+0x76>
 8027a44:	2d07      	cmp	r5, #7
 8027a46:	dc04      	bgt.n	8027a52 <__hexnan+0x76>
 8027a48:	002a      	movs	r2, r5
 8027a4a:	0031      	movs	r1, r6
 8027a4c:	0020      	movs	r0, r4
 8027a4e:	f7ff ff9f 	bl	8027990 <L_shift>
 8027a52:	9b01      	ldr	r3, [sp, #4]
 8027a54:	2508      	movs	r5, #8
 8027a56:	429c      	cmp	r4, r3
 8027a58:	d905      	bls.n	8027a66 <__hexnan+0x8a>
 8027a5a:	1f26      	subs	r6, r4, #4
 8027a5c:	2500      	movs	r5, #0
 8027a5e:	0034      	movs	r4, r6
 8027a60:	9b03      	ldr	r3, [sp, #12]
 8027a62:	6035      	str	r5, [r6, #0]
 8027a64:	9307      	str	r3, [sp, #28]
 8027a66:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8027a68:	9305      	str	r3, [sp, #20]
 8027a6a:	e7d5      	b.n	8027a18 <__hexnan+0x3c>
 8027a6c:	9b04      	ldr	r3, [sp, #16]
 8027a6e:	2b29      	cmp	r3, #41	@ 0x29
 8027a70:	d15a      	bne.n	8027b28 <__hexnan+0x14c>
 8027a72:	9b05      	ldr	r3, [sp, #20]
 8027a74:	9a08      	ldr	r2, [sp, #32]
 8027a76:	3302      	adds	r3, #2
 8027a78:	6013      	str	r3, [r2, #0]
 8027a7a:	9b03      	ldr	r3, [sp, #12]
 8027a7c:	2b00      	cmp	r3, #0
 8027a7e:	d053      	beq.n	8027b28 <__hexnan+0x14c>
 8027a80:	42b4      	cmp	r4, r6
 8027a82:	d206      	bcs.n	8027a92 <__hexnan+0xb6>
 8027a84:	2d07      	cmp	r5, #7
 8027a86:	dc04      	bgt.n	8027a92 <__hexnan+0xb6>
 8027a88:	002a      	movs	r2, r5
 8027a8a:	0031      	movs	r1, r6
 8027a8c:	0020      	movs	r0, r4
 8027a8e:	f7ff ff7f 	bl	8027990 <L_shift>
 8027a92:	9b01      	ldr	r3, [sp, #4]
 8027a94:	429c      	cmp	r4, r3
 8027a96:	d936      	bls.n	8027b06 <__hexnan+0x12a>
 8027a98:	001a      	movs	r2, r3
 8027a9a:	0023      	movs	r3, r4
 8027a9c:	cb02      	ldmia	r3!, {r1}
 8027a9e:	c202      	stmia	r2!, {r1}
 8027aa0:	429f      	cmp	r7, r3
 8027aa2:	d2fb      	bcs.n	8027a9c <__hexnan+0xc0>
 8027aa4:	9b02      	ldr	r3, [sp, #8]
 8027aa6:	1c62      	adds	r2, r4, #1
 8027aa8:	1ed9      	subs	r1, r3, #3
 8027aaa:	2304      	movs	r3, #4
 8027aac:	4291      	cmp	r1, r2
 8027aae:	d305      	bcc.n	8027abc <__hexnan+0xe0>
 8027ab0:	9b02      	ldr	r3, [sp, #8]
 8027ab2:	3b04      	subs	r3, #4
 8027ab4:	1b1b      	subs	r3, r3, r4
 8027ab6:	089b      	lsrs	r3, r3, #2
 8027ab8:	3301      	adds	r3, #1
 8027aba:	009b      	lsls	r3, r3, #2
 8027abc:	9a01      	ldr	r2, [sp, #4]
 8027abe:	18d3      	adds	r3, r2, r3
 8027ac0:	2200      	movs	r2, #0
 8027ac2:	c304      	stmia	r3!, {r2}
 8027ac4:	429f      	cmp	r7, r3
 8027ac6:	d2fc      	bcs.n	8027ac2 <__hexnan+0xe6>
 8027ac8:	683b      	ldr	r3, [r7, #0]
 8027aca:	2b00      	cmp	r3, #0
 8027acc:	d104      	bne.n	8027ad8 <__hexnan+0xfc>
 8027ace:	9b01      	ldr	r3, [sp, #4]
 8027ad0:	429f      	cmp	r7, r3
 8027ad2:	d127      	bne.n	8027b24 <__hexnan+0x148>
 8027ad4:	2301      	movs	r3, #1
 8027ad6:	603b      	str	r3, [r7, #0]
 8027ad8:	2005      	movs	r0, #5
 8027ada:	b00b      	add	sp, #44	@ 0x2c
 8027adc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8027ade:	9b03      	ldr	r3, [sp, #12]
 8027ae0:	3501      	adds	r5, #1
 8027ae2:	3301      	adds	r3, #1
 8027ae4:	9303      	str	r3, [sp, #12]
 8027ae6:	2d08      	cmp	r5, #8
 8027ae8:	dd06      	ble.n	8027af8 <__hexnan+0x11c>
 8027aea:	9b01      	ldr	r3, [sp, #4]
 8027aec:	429c      	cmp	r4, r3
 8027aee:	d9ba      	bls.n	8027a66 <__hexnan+0x8a>
 8027af0:	2300      	movs	r3, #0
 8027af2:	2501      	movs	r5, #1
 8027af4:	3c04      	subs	r4, #4
 8027af6:	6023      	str	r3, [r4, #0]
 8027af8:	220f      	movs	r2, #15
 8027afa:	6823      	ldr	r3, [r4, #0]
 8027afc:	4010      	ands	r0, r2
 8027afe:	011b      	lsls	r3, r3, #4
 8027b00:	4303      	orrs	r3, r0
 8027b02:	6023      	str	r3, [r4, #0]
 8027b04:	e7af      	b.n	8027a66 <__hexnan+0x8a>
 8027b06:	9b06      	ldr	r3, [sp, #24]
 8027b08:	2b00      	cmp	r3, #0
 8027b0a:	d0dd      	beq.n	8027ac8 <__hexnan+0xec>
 8027b0c:	2320      	movs	r3, #32
 8027b0e:	9a06      	ldr	r2, [sp, #24]
 8027b10:	9902      	ldr	r1, [sp, #8]
 8027b12:	1a9b      	subs	r3, r3, r2
 8027b14:	2201      	movs	r2, #1
 8027b16:	4252      	negs	r2, r2
 8027b18:	40da      	lsrs	r2, r3
 8027b1a:	3904      	subs	r1, #4
 8027b1c:	680b      	ldr	r3, [r1, #0]
 8027b1e:	4013      	ands	r3, r2
 8027b20:	600b      	str	r3, [r1, #0]
 8027b22:	e7d1      	b.n	8027ac8 <__hexnan+0xec>
 8027b24:	3f04      	subs	r7, #4
 8027b26:	e7cf      	b.n	8027ac8 <__hexnan+0xec>
 8027b28:	2004      	movs	r0, #4
 8027b2a:	e7d6      	b.n	8027ada <__hexnan+0xfe>

08027b2c <malloc>:
 8027b2c:	b510      	push	{r4, lr}
 8027b2e:	4b03      	ldr	r3, [pc, #12]	@ (8027b3c <malloc+0x10>)
 8027b30:	0001      	movs	r1, r0
 8027b32:	6818      	ldr	r0, [r3, #0]
 8027b34:	f000 f826 	bl	8027b84 <_malloc_r>
 8027b38:	bd10      	pop	{r4, pc}
 8027b3a:	46c0      	nop			@ (mov r8, r8)
 8027b3c:	200003ec 	.word	0x200003ec

08027b40 <sbrk_aligned>:
 8027b40:	b570      	push	{r4, r5, r6, lr}
 8027b42:	4e0f      	ldr	r6, [pc, #60]	@ (8027b80 <sbrk_aligned+0x40>)
 8027b44:	000d      	movs	r5, r1
 8027b46:	6831      	ldr	r1, [r6, #0]
 8027b48:	0004      	movs	r4, r0
 8027b4a:	2900      	cmp	r1, #0
 8027b4c:	d102      	bne.n	8027b54 <sbrk_aligned+0x14>
 8027b4e:	f001 f981 	bl	8028e54 <_sbrk_r>
 8027b52:	6030      	str	r0, [r6, #0]
 8027b54:	0029      	movs	r1, r5
 8027b56:	0020      	movs	r0, r4
 8027b58:	f001 f97c 	bl	8028e54 <_sbrk_r>
 8027b5c:	1c43      	adds	r3, r0, #1
 8027b5e:	d103      	bne.n	8027b68 <sbrk_aligned+0x28>
 8027b60:	2501      	movs	r5, #1
 8027b62:	426d      	negs	r5, r5
 8027b64:	0028      	movs	r0, r5
 8027b66:	bd70      	pop	{r4, r5, r6, pc}
 8027b68:	2303      	movs	r3, #3
 8027b6a:	1cc5      	adds	r5, r0, #3
 8027b6c:	439d      	bics	r5, r3
 8027b6e:	42a8      	cmp	r0, r5
 8027b70:	d0f8      	beq.n	8027b64 <sbrk_aligned+0x24>
 8027b72:	1a29      	subs	r1, r5, r0
 8027b74:	0020      	movs	r0, r4
 8027b76:	f001 f96d 	bl	8028e54 <_sbrk_r>
 8027b7a:	3001      	adds	r0, #1
 8027b7c:	d1f2      	bne.n	8027b64 <sbrk_aligned+0x24>
 8027b7e:	e7ef      	b.n	8027b60 <sbrk_aligned+0x20>
 8027b80:	20003914 	.word	0x20003914

08027b84 <_malloc_r>:
 8027b84:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8027b86:	2203      	movs	r2, #3
 8027b88:	1ccb      	adds	r3, r1, #3
 8027b8a:	4393      	bics	r3, r2
 8027b8c:	3308      	adds	r3, #8
 8027b8e:	0005      	movs	r5, r0
 8027b90:	001f      	movs	r7, r3
 8027b92:	2b0c      	cmp	r3, #12
 8027b94:	d234      	bcs.n	8027c00 <_malloc_r+0x7c>
 8027b96:	270c      	movs	r7, #12
 8027b98:	42b9      	cmp	r1, r7
 8027b9a:	d833      	bhi.n	8027c04 <_malloc_r+0x80>
 8027b9c:	0028      	movs	r0, r5
 8027b9e:	f000 f883 	bl	8027ca8 <__malloc_lock>
 8027ba2:	4e37      	ldr	r6, [pc, #220]	@ (8027c80 <_malloc_r+0xfc>)
 8027ba4:	6833      	ldr	r3, [r6, #0]
 8027ba6:	001c      	movs	r4, r3
 8027ba8:	2c00      	cmp	r4, #0
 8027baa:	d12f      	bne.n	8027c0c <_malloc_r+0x88>
 8027bac:	0039      	movs	r1, r7
 8027bae:	0028      	movs	r0, r5
 8027bb0:	f7ff ffc6 	bl	8027b40 <sbrk_aligned>
 8027bb4:	0004      	movs	r4, r0
 8027bb6:	1c43      	adds	r3, r0, #1
 8027bb8:	d15f      	bne.n	8027c7a <_malloc_r+0xf6>
 8027bba:	6834      	ldr	r4, [r6, #0]
 8027bbc:	9400      	str	r4, [sp, #0]
 8027bbe:	9b00      	ldr	r3, [sp, #0]
 8027bc0:	2b00      	cmp	r3, #0
 8027bc2:	d14a      	bne.n	8027c5a <_malloc_r+0xd6>
 8027bc4:	2c00      	cmp	r4, #0
 8027bc6:	d052      	beq.n	8027c6e <_malloc_r+0xea>
 8027bc8:	6823      	ldr	r3, [r4, #0]
 8027bca:	0028      	movs	r0, r5
 8027bcc:	18e3      	adds	r3, r4, r3
 8027bce:	9900      	ldr	r1, [sp, #0]
 8027bd0:	9301      	str	r3, [sp, #4]
 8027bd2:	f001 f93f 	bl	8028e54 <_sbrk_r>
 8027bd6:	9b01      	ldr	r3, [sp, #4]
 8027bd8:	4283      	cmp	r3, r0
 8027bda:	d148      	bne.n	8027c6e <_malloc_r+0xea>
 8027bdc:	6823      	ldr	r3, [r4, #0]
 8027bde:	0028      	movs	r0, r5
 8027be0:	1aff      	subs	r7, r7, r3
 8027be2:	0039      	movs	r1, r7
 8027be4:	f7ff ffac 	bl	8027b40 <sbrk_aligned>
 8027be8:	3001      	adds	r0, #1
 8027bea:	d040      	beq.n	8027c6e <_malloc_r+0xea>
 8027bec:	6823      	ldr	r3, [r4, #0]
 8027bee:	19db      	adds	r3, r3, r7
 8027bf0:	6023      	str	r3, [r4, #0]
 8027bf2:	6833      	ldr	r3, [r6, #0]
 8027bf4:	685a      	ldr	r2, [r3, #4]
 8027bf6:	2a00      	cmp	r2, #0
 8027bf8:	d133      	bne.n	8027c62 <_malloc_r+0xde>
 8027bfa:	9b00      	ldr	r3, [sp, #0]
 8027bfc:	6033      	str	r3, [r6, #0]
 8027bfe:	e019      	b.n	8027c34 <_malloc_r+0xb0>
 8027c00:	2b00      	cmp	r3, #0
 8027c02:	dac9      	bge.n	8027b98 <_malloc_r+0x14>
 8027c04:	230c      	movs	r3, #12
 8027c06:	602b      	str	r3, [r5, #0]
 8027c08:	2000      	movs	r0, #0
 8027c0a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8027c0c:	6821      	ldr	r1, [r4, #0]
 8027c0e:	1bc9      	subs	r1, r1, r7
 8027c10:	d420      	bmi.n	8027c54 <_malloc_r+0xd0>
 8027c12:	290b      	cmp	r1, #11
 8027c14:	d90a      	bls.n	8027c2c <_malloc_r+0xa8>
 8027c16:	19e2      	adds	r2, r4, r7
 8027c18:	6027      	str	r7, [r4, #0]
 8027c1a:	42a3      	cmp	r3, r4
 8027c1c:	d104      	bne.n	8027c28 <_malloc_r+0xa4>
 8027c1e:	6032      	str	r2, [r6, #0]
 8027c20:	6863      	ldr	r3, [r4, #4]
 8027c22:	6011      	str	r1, [r2, #0]
 8027c24:	6053      	str	r3, [r2, #4]
 8027c26:	e005      	b.n	8027c34 <_malloc_r+0xb0>
 8027c28:	605a      	str	r2, [r3, #4]
 8027c2a:	e7f9      	b.n	8027c20 <_malloc_r+0x9c>
 8027c2c:	6862      	ldr	r2, [r4, #4]
 8027c2e:	42a3      	cmp	r3, r4
 8027c30:	d10e      	bne.n	8027c50 <_malloc_r+0xcc>
 8027c32:	6032      	str	r2, [r6, #0]
 8027c34:	0028      	movs	r0, r5
 8027c36:	f000 f83f 	bl	8027cb8 <__malloc_unlock>
 8027c3a:	0020      	movs	r0, r4
 8027c3c:	2207      	movs	r2, #7
 8027c3e:	300b      	adds	r0, #11
 8027c40:	1d23      	adds	r3, r4, #4
 8027c42:	4390      	bics	r0, r2
 8027c44:	1ac2      	subs	r2, r0, r3
 8027c46:	4298      	cmp	r0, r3
 8027c48:	d0df      	beq.n	8027c0a <_malloc_r+0x86>
 8027c4a:	1a1b      	subs	r3, r3, r0
 8027c4c:	50a3      	str	r3, [r4, r2]
 8027c4e:	e7dc      	b.n	8027c0a <_malloc_r+0x86>
 8027c50:	605a      	str	r2, [r3, #4]
 8027c52:	e7ef      	b.n	8027c34 <_malloc_r+0xb0>
 8027c54:	0023      	movs	r3, r4
 8027c56:	6864      	ldr	r4, [r4, #4]
 8027c58:	e7a6      	b.n	8027ba8 <_malloc_r+0x24>
 8027c5a:	9c00      	ldr	r4, [sp, #0]
 8027c5c:	6863      	ldr	r3, [r4, #4]
 8027c5e:	9300      	str	r3, [sp, #0]
 8027c60:	e7ad      	b.n	8027bbe <_malloc_r+0x3a>
 8027c62:	001a      	movs	r2, r3
 8027c64:	685b      	ldr	r3, [r3, #4]
 8027c66:	42a3      	cmp	r3, r4
 8027c68:	d1fb      	bne.n	8027c62 <_malloc_r+0xde>
 8027c6a:	2300      	movs	r3, #0
 8027c6c:	e7da      	b.n	8027c24 <_malloc_r+0xa0>
 8027c6e:	230c      	movs	r3, #12
 8027c70:	0028      	movs	r0, r5
 8027c72:	602b      	str	r3, [r5, #0]
 8027c74:	f000 f820 	bl	8027cb8 <__malloc_unlock>
 8027c78:	e7c6      	b.n	8027c08 <_malloc_r+0x84>
 8027c7a:	6007      	str	r7, [r0, #0]
 8027c7c:	e7da      	b.n	8027c34 <_malloc_r+0xb0>
 8027c7e:	46c0      	nop			@ (mov r8, r8)
 8027c80:	20003918 	.word	0x20003918

08027c84 <__ascii_mbtowc>:
 8027c84:	b082      	sub	sp, #8
 8027c86:	2900      	cmp	r1, #0
 8027c88:	d100      	bne.n	8027c8c <__ascii_mbtowc+0x8>
 8027c8a:	a901      	add	r1, sp, #4
 8027c8c:	1e10      	subs	r0, r2, #0
 8027c8e:	d006      	beq.n	8027c9e <__ascii_mbtowc+0x1a>
 8027c90:	2b00      	cmp	r3, #0
 8027c92:	d006      	beq.n	8027ca2 <__ascii_mbtowc+0x1e>
 8027c94:	7813      	ldrb	r3, [r2, #0]
 8027c96:	600b      	str	r3, [r1, #0]
 8027c98:	7810      	ldrb	r0, [r2, #0]
 8027c9a:	1e43      	subs	r3, r0, #1
 8027c9c:	4198      	sbcs	r0, r3
 8027c9e:	b002      	add	sp, #8
 8027ca0:	4770      	bx	lr
 8027ca2:	2002      	movs	r0, #2
 8027ca4:	4240      	negs	r0, r0
 8027ca6:	e7fa      	b.n	8027c9e <__ascii_mbtowc+0x1a>

08027ca8 <__malloc_lock>:
 8027ca8:	b510      	push	{r4, lr}
 8027caa:	4802      	ldr	r0, [pc, #8]	@ (8027cb4 <__malloc_lock+0xc>)
 8027cac:	f7fe fd07 	bl	80266be <__retarget_lock_acquire_recursive>
 8027cb0:	bd10      	pop	{r4, pc}
 8027cb2:	46c0      	nop			@ (mov r8, r8)
 8027cb4:	20003910 	.word	0x20003910

08027cb8 <__malloc_unlock>:
 8027cb8:	b510      	push	{r4, lr}
 8027cba:	4802      	ldr	r0, [pc, #8]	@ (8027cc4 <__malloc_unlock+0xc>)
 8027cbc:	f7fe fd00 	bl	80266c0 <__retarget_lock_release_recursive>
 8027cc0:	bd10      	pop	{r4, pc}
 8027cc2:	46c0      	nop			@ (mov r8, r8)
 8027cc4:	20003910 	.word	0x20003910

08027cc8 <_Balloc>:
 8027cc8:	b570      	push	{r4, r5, r6, lr}
 8027cca:	69c5      	ldr	r5, [r0, #28]
 8027ccc:	0006      	movs	r6, r0
 8027cce:	000c      	movs	r4, r1
 8027cd0:	2d00      	cmp	r5, #0
 8027cd2:	d10e      	bne.n	8027cf2 <_Balloc+0x2a>
 8027cd4:	2010      	movs	r0, #16
 8027cd6:	f7ff ff29 	bl	8027b2c <malloc>
 8027cda:	1e02      	subs	r2, r0, #0
 8027cdc:	61f0      	str	r0, [r6, #28]
 8027cde:	d104      	bne.n	8027cea <_Balloc+0x22>
 8027ce0:	216b      	movs	r1, #107	@ 0x6b
 8027ce2:	4b19      	ldr	r3, [pc, #100]	@ (8027d48 <_Balloc+0x80>)
 8027ce4:	4819      	ldr	r0, [pc, #100]	@ (8027d4c <_Balloc+0x84>)
 8027ce6:	f001 f8c7 	bl	8028e78 <__assert_func>
 8027cea:	6045      	str	r5, [r0, #4]
 8027cec:	6085      	str	r5, [r0, #8]
 8027cee:	6005      	str	r5, [r0, #0]
 8027cf0:	60c5      	str	r5, [r0, #12]
 8027cf2:	69f5      	ldr	r5, [r6, #28]
 8027cf4:	68eb      	ldr	r3, [r5, #12]
 8027cf6:	2b00      	cmp	r3, #0
 8027cf8:	d013      	beq.n	8027d22 <_Balloc+0x5a>
 8027cfa:	69f3      	ldr	r3, [r6, #28]
 8027cfc:	00a2      	lsls	r2, r4, #2
 8027cfe:	68db      	ldr	r3, [r3, #12]
 8027d00:	189b      	adds	r3, r3, r2
 8027d02:	6818      	ldr	r0, [r3, #0]
 8027d04:	2800      	cmp	r0, #0
 8027d06:	d118      	bne.n	8027d3a <_Balloc+0x72>
 8027d08:	2101      	movs	r1, #1
 8027d0a:	000d      	movs	r5, r1
 8027d0c:	40a5      	lsls	r5, r4
 8027d0e:	1d6a      	adds	r2, r5, #5
 8027d10:	0030      	movs	r0, r6
 8027d12:	0092      	lsls	r2, r2, #2
 8027d14:	f001 f8ce 	bl	8028eb4 <_calloc_r>
 8027d18:	2800      	cmp	r0, #0
 8027d1a:	d00c      	beq.n	8027d36 <_Balloc+0x6e>
 8027d1c:	6044      	str	r4, [r0, #4]
 8027d1e:	6085      	str	r5, [r0, #8]
 8027d20:	e00d      	b.n	8027d3e <_Balloc+0x76>
 8027d22:	2221      	movs	r2, #33	@ 0x21
 8027d24:	2104      	movs	r1, #4
 8027d26:	0030      	movs	r0, r6
 8027d28:	f001 f8c4 	bl	8028eb4 <_calloc_r>
 8027d2c:	69f3      	ldr	r3, [r6, #28]
 8027d2e:	60e8      	str	r0, [r5, #12]
 8027d30:	68db      	ldr	r3, [r3, #12]
 8027d32:	2b00      	cmp	r3, #0
 8027d34:	d1e1      	bne.n	8027cfa <_Balloc+0x32>
 8027d36:	2000      	movs	r0, #0
 8027d38:	bd70      	pop	{r4, r5, r6, pc}
 8027d3a:	6802      	ldr	r2, [r0, #0]
 8027d3c:	601a      	str	r2, [r3, #0]
 8027d3e:	2300      	movs	r3, #0
 8027d40:	6103      	str	r3, [r0, #16]
 8027d42:	60c3      	str	r3, [r0, #12]
 8027d44:	e7f8      	b.n	8027d38 <_Balloc+0x70>
 8027d46:	46c0      	nop			@ (mov r8, r8)
 8027d48:	0802ea63 	.word	0x0802ea63
 8027d4c:	0802eb43 	.word	0x0802eb43

08027d50 <_Bfree>:
 8027d50:	b570      	push	{r4, r5, r6, lr}
 8027d52:	69c6      	ldr	r6, [r0, #28]
 8027d54:	0005      	movs	r5, r0
 8027d56:	000c      	movs	r4, r1
 8027d58:	2e00      	cmp	r6, #0
 8027d5a:	d10e      	bne.n	8027d7a <_Bfree+0x2a>
 8027d5c:	2010      	movs	r0, #16
 8027d5e:	f7ff fee5 	bl	8027b2c <malloc>
 8027d62:	1e02      	subs	r2, r0, #0
 8027d64:	61e8      	str	r0, [r5, #28]
 8027d66:	d104      	bne.n	8027d72 <_Bfree+0x22>
 8027d68:	218f      	movs	r1, #143	@ 0x8f
 8027d6a:	4b09      	ldr	r3, [pc, #36]	@ (8027d90 <_Bfree+0x40>)
 8027d6c:	4809      	ldr	r0, [pc, #36]	@ (8027d94 <_Bfree+0x44>)
 8027d6e:	f001 f883 	bl	8028e78 <__assert_func>
 8027d72:	6046      	str	r6, [r0, #4]
 8027d74:	6086      	str	r6, [r0, #8]
 8027d76:	6006      	str	r6, [r0, #0]
 8027d78:	60c6      	str	r6, [r0, #12]
 8027d7a:	2c00      	cmp	r4, #0
 8027d7c:	d007      	beq.n	8027d8e <_Bfree+0x3e>
 8027d7e:	69eb      	ldr	r3, [r5, #28]
 8027d80:	6862      	ldr	r2, [r4, #4]
 8027d82:	68db      	ldr	r3, [r3, #12]
 8027d84:	0092      	lsls	r2, r2, #2
 8027d86:	189b      	adds	r3, r3, r2
 8027d88:	681a      	ldr	r2, [r3, #0]
 8027d8a:	6022      	str	r2, [r4, #0]
 8027d8c:	601c      	str	r4, [r3, #0]
 8027d8e:	bd70      	pop	{r4, r5, r6, pc}
 8027d90:	0802ea63 	.word	0x0802ea63
 8027d94:	0802eb43 	.word	0x0802eb43

08027d98 <__multadd>:
 8027d98:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8027d9a:	000f      	movs	r7, r1
 8027d9c:	9001      	str	r0, [sp, #4]
 8027d9e:	000c      	movs	r4, r1
 8027da0:	001e      	movs	r6, r3
 8027da2:	2000      	movs	r0, #0
 8027da4:	690d      	ldr	r5, [r1, #16]
 8027da6:	3714      	adds	r7, #20
 8027da8:	683b      	ldr	r3, [r7, #0]
 8027daa:	3001      	adds	r0, #1
 8027dac:	b299      	uxth	r1, r3
 8027dae:	4351      	muls	r1, r2
 8027db0:	0c1b      	lsrs	r3, r3, #16
 8027db2:	4353      	muls	r3, r2
 8027db4:	1989      	adds	r1, r1, r6
 8027db6:	0c0e      	lsrs	r6, r1, #16
 8027db8:	199b      	adds	r3, r3, r6
 8027dba:	0c1e      	lsrs	r6, r3, #16
 8027dbc:	b289      	uxth	r1, r1
 8027dbe:	041b      	lsls	r3, r3, #16
 8027dc0:	185b      	adds	r3, r3, r1
 8027dc2:	c708      	stmia	r7!, {r3}
 8027dc4:	4285      	cmp	r5, r0
 8027dc6:	dcef      	bgt.n	8027da8 <__multadd+0x10>
 8027dc8:	2e00      	cmp	r6, #0
 8027dca:	d022      	beq.n	8027e12 <__multadd+0x7a>
 8027dcc:	68a3      	ldr	r3, [r4, #8]
 8027dce:	42ab      	cmp	r3, r5
 8027dd0:	dc19      	bgt.n	8027e06 <__multadd+0x6e>
 8027dd2:	6861      	ldr	r1, [r4, #4]
 8027dd4:	9801      	ldr	r0, [sp, #4]
 8027dd6:	3101      	adds	r1, #1
 8027dd8:	f7ff ff76 	bl	8027cc8 <_Balloc>
 8027ddc:	1e07      	subs	r7, r0, #0
 8027dde:	d105      	bne.n	8027dec <__multadd+0x54>
 8027de0:	003a      	movs	r2, r7
 8027de2:	21ba      	movs	r1, #186	@ 0xba
 8027de4:	4b0c      	ldr	r3, [pc, #48]	@ (8027e18 <__multadd+0x80>)
 8027de6:	480d      	ldr	r0, [pc, #52]	@ (8027e1c <__multadd+0x84>)
 8027de8:	f001 f846 	bl	8028e78 <__assert_func>
 8027dec:	0021      	movs	r1, r4
 8027dee:	6922      	ldr	r2, [r4, #16]
 8027df0:	310c      	adds	r1, #12
 8027df2:	3202      	adds	r2, #2
 8027df4:	0092      	lsls	r2, r2, #2
 8027df6:	300c      	adds	r0, #12
 8027df8:	f7fe fc6e 	bl	80266d8 <memcpy>
 8027dfc:	0021      	movs	r1, r4
 8027dfe:	9801      	ldr	r0, [sp, #4]
 8027e00:	f7ff ffa6 	bl	8027d50 <_Bfree>
 8027e04:	003c      	movs	r4, r7
 8027e06:	1d2b      	adds	r3, r5, #4
 8027e08:	009b      	lsls	r3, r3, #2
 8027e0a:	18e3      	adds	r3, r4, r3
 8027e0c:	3501      	adds	r5, #1
 8027e0e:	605e      	str	r6, [r3, #4]
 8027e10:	6125      	str	r5, [r4, #16]
 8027e12:	0020      	movs	r0, r4
 8027e14:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8027e16:	46c0      	nop			@ (mov r8, r8)
 8027e18:	0802ead2 	.word	0x0802ead2
 8027e1c:	0802eb43 	.word	0x0802eb43

08027e20 <__s2b>:
 8027e20:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8027e22:	0007      	movs	r7, r0
 8027e24:	0018      	movs	r0, r3
 8027e26:	000c      	movs	r4, r1
 8027e28:	3008      	adds	r0, #8
 8027e2a:	2109      	movs	r1, #9
 8027e2c:	9301      	str	r3, [sp, #4]
 8027e2e:	0015      	movs	r5, r2
 8027e30:	f7d8 fa42 	bl	80002b8 <__divsi3>
 8027e34:	2301      	movs	r3, #1
 8027e36:	2100      	movs	r1, #0
 8027e38:	4283      	cmp	r3, r0
 8027e3a:	db0a      	blt.n	8027e52 <__s2b+0x32>
 8027e3c:	0038      	movs	r0, r7
 8027e3e:	f7ff ff43 	bl	8027cc8 <_Balloc>
 8027e42:	1e01      	subs	r1, r0, #0
 8027e44:	d108      	bne.n	8027e58 <__s2b+0x38>
 8027e46:	000a      	movs	r2, r1
 8027e48:	4b19      	ldr	r3, [pc, #100]	@ (8027eb0 <__s2b+0x90>)
 8027e4a:	481a      	ldr	r0, [pc, #104]	@ (8027eb4 <__s2b+0x94>)
 8027e4c:	31d3      	adds	r1, #211	@ 0xd3
 8027e4e:	f001 f813 	bl	8028e78 <__assert_func>
 8027e52:	005b      	lsls	r3, r3, #1
 8027e54:	3101      	adds	r1, #1
 8027e56:	e7ef      	b.n	8027e38 <__s2b+0x18>
 8027e58:	9b08      	ldr	r3, [sp, #32]
 8027e5a:	6143      	str	r3, [r0, #20]
 8027e5c:	2301      	movs	r3, #1
 8027e5e:	6103      	str	r3, [r0, #16]
 8027e60:	2d09      	cmp	r5, #9
 8027e62:	dd18      	ble.n	8027e96 <__s2b+0x76>
 8027e64:	0023      	movs	r3, r4
 8027e66:	3309      	adds	r3, #9
 8027e68:	001e      	movs	r6, r3
 8027e6a:	9300      	str	r3, [sp, #0]
 8027e6c:	1964      	adds	r4, r4, r5
 8027e6e:	7833      	ldrb	r3, [r6, #0]
 8027e70:	220a      	movs	r2, #10
 8027e72:	0038      	movs	r0, r7
 8027e74:	3b30      	subs	r3, #48	@ 0x30
 8027e76:	f7ff ff8f 	bl	8027d98 <__multadd>
 8027e7a:	3601      	adds	r6, #1
 8027e7c:	0001      	movs	r1, r0
 8027e7e:	42a6      	cmp	r6, r4
 8027e80:	d1f5      	bne.n	8027e6e <__s2b+0x4e>
 8027e82:	002c      	movs	r4, r5
 8027e84:	9b00      	ldr	r3, [sp, #0]
 8027e86:	3c08      	subs	r4, #8
 8027e88:	191c      	adds	r4, r3, r4
 8027e8a:	002e      	movs	r6, r5
 8027e8c:	9b01      	ldr	r3, [sp, #4]
 8027e8e:	429e      	cmp	r6, r3
 8027e90:	db04      	blt.n	8027e9c <__s2b+0x7c>
 8027e92:	0008      	movs	r0, r1
 8027e94:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8027e96:	2509      	movs	r5, #9
 8027e98:	340a      	adds	r4, #10
 8027e9a:	e7f6      	b.n	8027e8a <__s2b+0x6a>
 8027e9c:	1b63      	subs	r3, r4, r5
 8027e9e:	5d9b      	ldrb	r3, [r3, r6]
 8027ea0:	220a      	movs	r2, #10
 8027ea2:	0038      	movs	r0, r7
 8027ea4:	3b30      	subs	r3, #48	@ 0x30
 8027ea6:	f7ff ff77 	bl	8027d98 <__multadd>
 8027eaa:	3601      	adds	r6, #1
 8027eac:	0001      	movs	r1, r0
 8027eae:	e7ed      	b.n	8027e8c <__s2b+0x6c>
 8027eb0:	0802ead2 	.word	0x0802ead2
 8027eb4:	0802eb43 	.word	0x0802eb43

08027eb8 <__hi0bits>:
 8027eb8:	2280      	movs	r2, #128	@ 0x80
 8027eba:	0003      	movs	r3, r0
 8027ebc:	0252      	lsls	r2, r2, #9
 8027ebe:	2000      	movs	r0, #0
 8027ec0:	4293      	cmp	r3, r2
 8027ec2:	d201      	bcs.n	8027ec8 <__hi0bits+0x10>
 8027ec4:	041b      	lsls	r3, r3, #16
 8027ec6:	3010      	adds	r0, #16
 8027ec8:	2280      	movs	r2, #128	@ 0x80
 8027eca:	0452      	lsls	r2, r2, #17
 8027ecc:	4293      	cmp	r3, r2
 8027ece:	d201      	bcs.n	8027ed4 <__hi0bits+0x1c>
 8027ed0:	3008      	adds	r0, #8
 8027ed2:	021b      	lsls	r3, r3, #8
 8027ed4:	2280      	movs	r2, #128	@ 0x80
 8027ed6:	0552      	lsls	r2, r2, #21
 8027ed8:	4293      	cmp	r3, r2
 8027eda:	d201      	bcs.n	8027ee0 <__hi0bits+0x28>
 8027edc:	3004      	adds	r0, #4
 8027ede:	011b      	lsls	r3, r3, #4
 8027ee0:	2280      	movs	r2, #128	@ 0x80
 8027ee2:	05d2      	lsls	r2, r2, #23
 8027ee4:	4293      	cmp	r3, r2
 8027ee6:	d201      	bcs.n	8027eec <__hi0bits+0x34>
 8027ee8:	3002      	adds	r0, #2
 8027eea:	009b      	lsls	r3, r3, #2
 8027eec:	2b00      	cmp	r3, #0
 8027eee:	db03      	blt.n	8027ef8 <__hi0bits+0x40>
 8027ef0:	3001      	adds	r0, #1
 8027ef2:	4213      	tst	r3, r2
 8027ef4:	d100      	bne.n	8027ef8 <__hi0bits+0x40>
 8027ef6:	2020      	movs	r0, #32
 8027ef8:	4770      	bx	lr

08027efa <__lo0bits>:
 8027efa:	6803      	ldr	r3, [r0, #0]
 8027efc:	0001      	movs	r1, r0
 8027efe:	2207      	movs	r2, #7
 8027f00:	0018      	movs	r0, r3
 8027f02:	4010      	ands	r0, r2
 8027f04:	4213      	tst	r3, r2
 8027f06:	d00d      	beq.n	8027f24 <__lo0bits+0x2a>
 8027f08:	3a06      	subs	r2, #6
 8027f0a:	2000      	movs	r0, #0
 8027f0c:	4213      	tst	r3, r2
 8027f0e:	d105      	bne.n	8027f1c <__lo0bits+0x22>
 8027f10:	3002      	adds	r0, #2
 8027f12:	4203      	tst	r3, r0
 8027f14:	d003      	beq.n	8027f1e <__lo0bits+0x24>
 8027f16:	40d3      	lsrs	r3, r2
 8027f18:	0010      	movs	r0, r2
 8027f1a:	600b      	str	r3, [r1, #0]
 8027f1c:	4770      	bx	lr
 8027f1e:	089b      	lsrs	r3, r3, #2
 8027f20:	600b      	str	r3, [r1, #0]
 8027f22:	e7fb      	b.n	8027f1c <__lo0bits+0x22>
 8027f24:	b29a      	uxth	r2, r3
 8027f26:	2a00      	cmp	r2, #0
 8027f28:	d101      	bne.n	8027f2e <__lo0bits+0x34>
 8027f2a:	2010      	movs	r0, #16
 8027f2c:	0c1b      	lsrs	r3, r3, #16
 8027f2e:	b2da      	uxtb	r2, r3
 8027f30:	2a00      	cmp	r2, #0
 8027f32:	d101      	bne.n	8027f38 <__lo0bits+0x3e>
 8027f34:	3008      	adds	r0, #8
 8027f36:	0a1b      	lsrs	r3, r3, #8
 8027f38:	071a      	lsls	r2, r3, #28
 8027f3a:	d101      	bne.n	8027f40 <__lo0bits+0x46>
 8027f3c:	3004      	adds	r0, #4
 8027f3e:	091b      	lsrs	r3, r3, #4
 8027f40:	079a      	lsls	r2, r3, #30
 8027f42:	d101      	bne.n	8027f48 <__lo0bits+0x4e>
 8027f44:	3002      	adds	r0, #2
 8027f46:	089b      	lsrs	r3, r3, #2
 8027f48:	07da      	lsls	r2, r3, #31
 8027f4a:	d4e9      	bmi.n	8027f20 <__lo0bits+0x26>
 8027f4c:	3001      	adds	r0, #1
 8027f4e:	085b      	lsrs	r3, r3, #1
 8027f50:	d1e6      	bne.n	8027f20 <__lo0bits+0x26>
 8027f52:	2020      	movs	r0, #32
 8027f54:	e7e2      	b.n	8027f1c <__lo0bits+0x22>
	...

08027f58 <__i2b>:
 8027f58:	b510      	push	{r4, lr}
 8027f5a:	000c      	movs	r4, r1
 8027f5c:	2101      	movs	r1, #1
 8027f5e:	f7ff feb3 	bl	8027cc8 <_Balloc>
 8027f62:	2800      	cmp	r0, #0
 8027f64:	d107      	bne.n	8027f76 <__i2b+0x1e>
 8027f66:	2146      	movs	r1, #70	@ 0x46
 8027f68:	4c05      	ldr	r4, [pc, #20]	@ (8027f80 <__i2b+0x28>)
 8027f6a:	0002      	movs	r2, r0
 8027f6c:	4b05      	ldr	r3, [pc, #20]	@ (8027f84 <__i2b+0x2c>)
 8027f6e:	0020      	movs	r0, r4
 8027f70:	31ff      	adds	r1, #255	@ 0xff
 8027f72:	f000 ff81 	bl	8028e78 <__assert_func>
 8027f76:	2301      	movs	r3, #1
 8027f78:	6144      	str	r4, [r0, #20]
 8027f7a:	6103      	str	r3, [r0, #16]
 8027f7c:	bd10      	pop	{r4, pc}
 8027f7e:	46c0      	nop			@ (mov r8, r8)
 8027f80:	0802eb43 	.word	0x0802eb43
 8027f84:	0802ead2 	.word	0x0802ead2

08027f88 <__multiply>:
 8027f88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8027f8a:	0014      	movs	r4, r2
 8027f8c:	690a      	ldr	r2, [r1, #16]
 8027f8e:	6923      	ldr	r3, [r4, #16]
 8027f90:	000d      	movs	r5, r1
 8027f92:	b089      	sub	sp, #36	@ 0x24
 8027f94:	429a      	cmp	r2, r3
 8027f96:	db02      	blt.n	8027f9e <__multiply+0x16>
 8027f98:	0023      	movs	r3, r4
 8027f9a:	000c      	movs	r4, r1
 8027f9c:	001d      	movs	r5, r3
 8027f9e:	6927      	ldr	r7, [r4, #16]
 8027fa0:	692e      	ldr	r6, [r5, #16]
 8027fa2:	6861      	ldr	r1, [r4, #4]
 8027fa4:	19bb      	adds	r3, r7, r6
 8027fa6:	9300      	str	r3, [sp, #0]
 8027fa8:	68a3      	ldr	r3, [r4, #8]
 8027faa:	19ba      	adds	r2, r7, r6
 8027fac:	4293      	cmp	r3, r2
 8027fae:	da00      	bge.n	8027fb2 <__multiply+0x2a>
 8027fb0:	3101      	adds	r1, #1
 8027fb2:	f7ff fe89 	bl	8027cc8 <_Balloc>
 8027fb6:	4684      	mov	ip, r0
 8027fb8:	2800      	cmp	r0, #0
 8027fba:	d106      	bne.n	8027fca <__multiply+0x42>
 8027fbc:	21b1      	movs	r1, #177	@ 0xb1
 8027fbe:	4662      	mov	r2, ip
 8027fc0:	4b44      	ldr	r3, [pc, #272]	@ (80280d4 <__multiply+0x14c>)
 8027fc2:	4845      	ldr	r0, [pc, #276]	@ (80280d8 <__multiply+0x150>)
 8027fc4:	0049      	lsls	r1, r1, #1
 8027fc6:	f000 ff57 	bl	8028e78 <__assert_func>
 8027fca:	0002      	movs	r2, r0
 8027fcc:	19bb      	adds	r3, r7, r6
 8027fce:	3214      	adds	r2, #20
 8027fd0:	009b      	lsls	r3, r3, #2
 8027fd2:	18d3      	adds	r3, r2, r3
 8027fd4:	9301      	str	r3, [sp, #4]
 8027fd6:	2100      	movs	r1, #0
 8027fd8:	0013      	movs	r3, r2
 8027fda:	9801      	ldr	r0, [sp, #4]
 8027fdc:	4283      	cmp	r3, r0
 8027fde:	d328      	bcc.n	8028032 <__multiply+0xaa>
 8027fe0:	0023      	movs	r3, r4
 8027fe2:	00bf      	lsls	r7, r7, #2
 8027fe4:	3314      	adds	r3, #20
 8027fe6:	9304      	str	r3, [sp, #16]
 8027fe8:	3514      	adds	r5, #20
 8027fea:	19db      	adds	r3, r3, r7
 8027fec:	00b6      	lsls	r6, r6, #2
 8027fee:	9302      	str	r3, [sp, #8]
 8027ff0:	19ab      	adds	r3, r5, r6
 8027ff2:	9307      	str	r3, [sp, #28]
 8027ff4:	2304      	movs	r3, #4
 8027ff6:	9305      	str	r3, [sp, #20]
 8027ff8:	0023      	movs	r3, r4
 8027ffa:	9902      	ldr	r1, [sp, #8]
 8027ffc:	3315      	adds	r3, #21
 8027ffe:	4299      	cmp	r1, r3
 8028000:	d305      	bcc.n	802800e <__multiply+0x86>
 8028002:	1b0c      	subs	r4, r1, r4
 8028004:	3c15      	subs	r4, #21
 8028006:	08a4      	lsrs	r4, r4, #2
 8028008:	3401      	adds	r4, #1
 802800a:	00a3      	lsls	r3, r4, #2
 802800c:	9305      	str	r3, [sp, #20]
 802800e:	9b07      	ldr	r3, [sp, #28]
 8028010:	429d      	cmp	r5, r3
 8028012:	d310      	bcc.n	8028036 <__multiply+0xae>
 8028014:	9b00      	ldr	r3, [sp, #0]
 8028016:	2b00      	cmp	r3, #0
 8028018:	dd05      	ble.n	8028026 <__multiply+0x9e>
 802801a:	9b01      	ldr	r3, [sp, #4]
 802801c:	3b04      	subs	r3, #4
 802801e:	9301      	str	r3, [sp, #4]
 8028020:	681b      	ldr	r3, [r3, #0]
 8028022:	2b00      	cmp	r3, #0
 8028024:	d052      	beq.n	80280cc <__multiply+0x144>
 8028026:	4663      	mov	r3, ip
 8028028:	4660      	mov	r0, ip
 802802a:	9a00      	ldr	r2, [sp, #0]
 802802c:	611a      	str	r2, [r3, #16]
 802802e:	b009      	add	sp, #36	@ 0x24
 8028030:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8028032:	c302      	stmia	r3!, {r1}
 8028034:	e7d1      	b.n	8027fda <__multiply+0x52>
 8028036:	682c      	ldr	r4, [r5, #0]
 8028038:	b2a4      	uxth	r4, r4
 802803a:	2c00      	cmp	r4, #0
 802803c:	d01f      	beq.n	802807e <__multiply+0xf6>
 802803e:	2300      	movs	r3, #0
 8028040:	0017      	movs	r7, r2
 8028042:	9e04      	ldr	r6, [sp, #16]
 8028044:	9303      	str	r3, [sp, #12]
 8028046:	ce08      	ldmia	r6!, {r3}
 8028048:	6839      	ldr	r1, [r7, #0]
 802804a:	9306      	str	r3, [sp, #24]
 802804c:	466b      	mov	r3, sp
 802804e:	8b1b      	ldrh	r3, [r3, #24]
 8028050:	b288      	uxth	r0, r1
 8028052:	4363      	muls	r3, r4
 8028054:	181b      	adds	r3, r3, r0
 8028056:	9803      	ldr	r0, [sp, #12]
 8028058:	0c09      	lsrs	r1, r1, #16
 802805a:	181b      	adds	r3, r3, r0
 802805c:	9806      	ldr	r0, [sp, #24]
 802805e:	0c00      	lsrs	r0, r0, #16
 8028060:	4360      	muls	r0, r4
 8028062:	1840      	adds	r0, r0, r1
 8028064:	0c19      	lsrs	r1, r3, #16
 8028066:	1841      	adds	r1, r0, r1
 8028068:	0c08      	lsrs	r0, r1, #16
 802806a:	b29b      	uxth	r3, r3
 802806c:	0409      	lsls	r1, r1, #16
 802806e:	4319      	orrs	r1, r3
 8028070:	9b02      	ldr	r3, [sp, #8]
 8028072:	9003      	str	r0, [sp, #12]
 8028074:	c702      	stmia	r7!, {r1}
 8028076:	42b3      	cmp	r3, r6
 8028078:	d8e5      	bhi.n	8028046 <__multiply+0xbe>
 802807a:	9b05      	ldr	r3, [sp, #20]
 802807c:	50d0      	str	r0, [r2, r3]
 802807e:	682c      	ldr	r4, [r5, #0]
 8028080:	0c24      	lsrs	r4, r4, #16
 8028082:	d020      	beq.n	80280c6 <__multiply+0x13e>
 8028084:	2100      	movs	r1, #0
 8028086:	0010      	movs	r0, r2
 8028088:	6813      	ldr	r3, [r2, #0]
 802808a:	9e04      	ldr	r6, [sp, #16]
 802808c:	9103      	str	r1, [sp, #12]
 802808e:	6831      	ldr	r1, [r6, #0]
 8028090:	6807      	ldr	r7, [r0, #0]
 8028092:	b289      	uxth	r1, r1
 8028094:	4361      	muls	r1, r4
 8028096:	0c3f      	lsrs	r7, r7, #16
 8028098:	19c9      	adds	r1, r1, r7
 802809a:	9f03      	ldr	r7, [sp, #12]
 802809c:	b29b      	uxth	r3, r3
 802809e:	19c9      	adds	r1, r1, r7
 80280a0:	040f      	lsls	r7, r1, #16
 80280a2:	431f      	orrs	r7, r3
 80280a4:	6007      	str	r7, [r0, #0]
 80280a6:	ce80      	ldmia	r6!, {r7}
 80280a8:	6843      	ldr	r3, [r0, #4]
 80280aa:	0c3f      	lsrs	r7, r7, #16
 80280ac:	4367      	muls	r7, r4
 80280ae:	b29b      	uxth	r3, r3
 80280b0:	0c09      	lsrs	r1, r1, #16
 80280b2:	18fb      	adds	r3, r7, r3
 80280b4:	185b      	adds	r3, r3, r1
 80280b6:	0c19      	lsrs	r1, r3, #16
 80280b8:	9103      	str	r1, [sp, #12]
 80280ba:	9902      	ldr	r1, [sp, #8]
 80280bc:	3004      	adds	r0, #4
 80280be:	42b1      	cmp	r1, r6
 80280c0:	d8e5      	bhi.n	802808e <__multiply+0x106>
 80280c2:	9905      	ldr	r1, [sp, #20]
 80280c4:	5053      	str	r3, [r2, r1]
 80280c6:	3504      	adds	r5, #4
 80280c8:	3204      	adds	r2, #4
 80280ca:	e7a0      	b.n	802800e <__multiply+0x86>
 80280cc:	9b00      	ldr	r3, [sp, #0]
 80280ce:	3b01      	subs	r3, #1
 80280d0:	9300      	str	r3, [sp, #0]
 80280d2:	e79f      	b.n	8028014 <__multiply+0x8c>
 80280d4:	0802ead2 	.word	0x0802ead2
 80280d8:	0802eb43 	.word	0x0802eb43

080280dc <__pow5mult>:
 80280dc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80280de:	2303      	movs	r3, #3
 80280e0:	0015      	movs	r5, r2
 80280e2:	0007      	movs	r7, r0
 80280e4:	000e      	movs	r6, r1
 80280e6:	401a      	ands	r2, r3
 80280e8:	421d      	tst	r5, r3
 80280ea:	d008      	beq.n	80280fe <__pow5mult+0x22>
 80280ec:	4925      	ldr	r1, [pc, #148]	@ (8028184 <__pow5mult+0xa8>)
 80280ee:	3a01      	subs	r2, #1
 80280f0:	0092      	lsls	r2, r2, #2
 80280f2:	5852      	ldr	r2, [r2, r1]
 80280f4:	2300      	movs	r3, #0
 80280f6:	0031      	movs	r1, r6
 80280f8:	f7ff fe4e 	bl	8027d98 <__multadd>
 80280fc:	0006      	movs	r6, r0
 80280fe:	10ad      	asrs	r5, r5, #2
 8028100:	d03d      	beq.n	802817e <__pow5mult+0xa2>
 8028102:	69fc      	ldr	r4, [r7, #28]
 8028104:	2c00      	cmp	r4, #0
 8028106:	d10f      	bne.n	8028128 <__pow5mult+0x4c>
 8028108:	2010      	movs	r0, #16
 802810a:	f7ff fd0f 	bl	8027b2c <malloc>
 802810e:	1e02      	subs	r2, r0, #0
 8028110:	61f8      	str	r0, [r7, #28]
 8028112:	d105      	bne.n	8028120 <__pow5mult+0x44>
 8028114:	21b4      	movs	r1, #180	@ 0xb4
 8028116:	4b1c      	ldr	r3, [pc, #112]	@ (8028188 <__pow5mult+0xac>)
 8028118:	481c      	ldr	r0, [pc, #112]	@ (802818c <__pow5mult+0xb0>)
 802811a:	31ff      	adds	r1, #255	@ 0xff
 802811c:	f000 feac 	bl	8028e78 <__assert_func>
 8028120:	6044      	str	r4, [r0, #4]
 8028122:	6084      	str	r4, [r0, #8]
 8028124:	6004      	str	r4, [r0, #0]
 8028126:	60c4      	str	r4, [r0, #12]
 8028128:	69fb      	ldr	r3, [r7, #28]
 802812a:	689c      	ldr	r4, [r3, #8]
 802812c:	9301      	str	r3, [sp, #4]
 802812e:	2c00      	cmp	r4, #0
 8028130:	d108      	bne.n	8028144 <__pow5mult+0x68>
 8028132:	0038      	movs	r0, r7
 8028134:	4916      	ldr	r1, [pc, #88]	@ (8028190 <__pow5mult+0xb4>)
 8028136:	f7ff ff0f 	bl	8027f58 <__i2b>
 802813a:	9b01      	ldr	r3, [sp, #4]
 802813c:	0004      	movs	r4, r0
 802813e:	6098      	str	r0, [r3, #8]
 8028140:	2300      	movs	r3, #0
 8028142:	6003      	str	r3, [r0, #0]
 8028144:	2301      	movs	r3, #1
 8028146:	421d      	tst	r5, r3
 8028148:	d00a      	beq.n	8028160 <__pow5mult+0x84>
 802814a:	0031      	movs	r1, r6
 802814c:	0022      	movs	r2, r4
 802814e:	0038      	movs	r0, r7
 8028150:	f7ff ff1a 	bl	8027f88 <__multiply>
 8028154:	0031      	movs	r1, r6
 8028156:	9001      	str	r0, [sp, #4]
 8028158:	0038      	movs	r0, r7
 802815a:	f7ff fdf9 	bl	8027d50 <_Bfree>
 802815e:	9e01      	ldr	r6, [sp, #4]
 8028160:	106d      	asrs	r5, r5, #1
 8028162:	d00c      	beq.n	802817e <__pow5mult+0xa2>
 8028164:	6820      	ldr	r0, [r4, #0]
 8028166:	2800      	cmp	r0, #0
 8028168:	d107      	bne.n	802817a <__pow5mult+0x9e>
 802816a:	0022      	movs	r2, r4
 802816c:	0021      	movs	r1, r4
 802816e:	0038      	movs	r0, r7
 8028170:	f7ff ff0a 	bl	8027f88 <__multiply>
 8028174:	2300      	movs	r3, #0
 8028176:	6020      	str	r0, [r4, #0]
 8028178:	6003      	str	r3, [r0, #0]
 802817a:	0004      	movs	r4, r0
 802817c:	e7e2      	b.n	8028144 <__pow5mult+0x68>
 802817e:	0030      	movs	r0, r6
 8028180:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8028182:	46c0      	nop			@ (mov r8, r8)
 8028184:	0802ed44 	.word	0x0802ed44
 8028188:	0802ea63 	.word	0x0802ea63
 802818c:	0802eb43 	.word	0x0802eb43
 8028190:	00000271 	.word	0x00000271

08028194 <__lshift>:
 8028194:	b5f0      	push	{r4, r5, r6, r7, lr}
 8028196:	000c      	movs	r4, r1
 8028198:	0016      	movs	r6, r2
 802819a:	6923      	ldr	r3, [r4, #16]
 802819c:	1157      	asrs	r7, r2, #5
 802819e:	b085      	sub	sp, #20
 80281a0:	18fb      	adds	r3, r7, r3
 80281a2:	9301      	str	r3, [sp, #4]
 80281a4:	3301      	adds	r3, #1
 80281a6:	9300      	str	r3, [sp, #0]
 80281a8:	6849      	ldr	r1, [r1, #4]
 80281aa:	68a3      	ldr	r3, [r4, #8]
 80281ac:	9002      	str	r0, [sp, #8]
 80281ae:	9a00      	ldr	r2, [sp, #0]
 80281b0:	4293      	cmp	r3, r2
 80281b2:	db10      	blt.n	80281d6 <__lshift+0x42>
 80281b4:	9802      	ldr	r0, [sp, #8]
 80281b6:	f7ff fd87 	bl	8027cc8 <_Balloc>
 80281ba:	2300      	movs	r3, #0
 80281bc:	0001      	movs	r1, r0
 80281be:	0005      	movs	r5, r0
 80281c0:	001a      	movs	r2, r3
 80281c2:	3114      	adds	r1, #20
 80281c4:	4298      	cmp	r0, r3
 80281c6:	d10c      	bne.n	80281e2 <__lshift+0x4e>
 80281c8:	21ef      	movs	r1, #239	@ 0xef
 80281ca:	002a      	movs	r2, r5
 80281cc:	4b25      	ldr	r3, [pc, #148]	@ (8028264 <__lshift+0xd0>)
 80281ce:	4826      	ldr	r0, [pc, #152]	@ (8028268 <__lshift+0xd4>)
 80281d0:	0049      	lsls	r1, r1, #1
 80281d2:	f000 fe51 	bl	8028e78 <__assert_func>
 80281d6:	3101      	adds	r1, #1
 80281d8:	005b      	lsls	r3, r3, #1
 80281da:	e7e8      	b.n	80281ae <__lshift+0x1a>
 80281dc:	0098      	lsls	r0, r3, #2
 80281de:	500a      	str	r2, [r1, r0]
 80281e0:	3301      	adds	r3, #1
 80281e2:	42bb      	cmp	r3, r7
 80281e4:	dbfa      	blt.n	80281dc <__lshift+0x48>
 80281e6:	43fb      	mvns	r3, r7
 80281e8:	17db      	asrs	r3, r3, #31
 80281ea:	401f      	ands	r7, r3
 80281ec:	00bf      	lsls	r7, r7, #2
 80281ee:	0023      	movs	r3, r4
 80281f0:	201f      	movs	r0, #31
 80281f2:	19c9      	adds	r1, r1, r7
 80281f4:	0037      	movs	r7, r6
 80281f6:	6922      	ldr	r2, [r4, #16]
 80281f8:	3314      	adds	r3, #20
 80281fa:	0092      	lsls	r2, r2, #2
 80281fc:	189a      	adds	r2, r3, r2
 80281fe:	4007      	ands	r7, r0
 8028200:	4206      	tst	r6, r0
 8028202:	d029      	beq.n	8028258 <__lshift+0xc4>
 8028204:	3001      	adds	r0, #1
 8028206:	1bc0      	subs	r0, r0, r7
 8028208:	9003      	str	r0, [sp, #12]
 802820a:	468c      	mov	ip, r1
 802820c:	2000      	movs	r0, #0
 802820e:	681e      	ldr	r6, [r3, #0]
 8028210:	40be      	lsls	r6, r7
 8028212:	4306      	orrs	r6, r0
 8028214:	4660      	mov	r0, ip
 8028216:	c040      	stmia	r0!, {r6}
 8028218:	4684      	mov	ip, r0
 802821a:	9e03      	ldr	r6, [sp, #12]
 802821c:	cb01      	ldmia	r3!, {r0}
 802821e:	40f0      	lsrs	r0, r6
 8028220:	429a      	cmp	r2, r3
 8028222:	d8f4      	bhi.n	802820e <__lshift+0x7a>
 8028224:	0026      	movs	r6, r4
 8028226:	3615      	adds	r6, #21
 8028228:	2304      	movs	r3, #4
 802822a:	42b2      	cmp	r2, r6
 802822c:	d304      	bcc.n	8028238 <__lshift+0xa4>
 802822e:	1b13      	subs	r3, r2, r4
 8028230:	3b15      	subs	r3, #21
 8028232:	089b      	lsrs	r3, r3, #2
 8028234:	3301      	adds	r3, #1
 8028236:	009b      	lsls	r3, r3, #2
 8028238:	50c8      	str	r0, [r1, r3]
 802823a:	2800      	cmp	r0, #0
 802823c:	d002      	beq.n	8028244 <__lshift+0xb0>
 802823e:	9b01      	ldr	r3, [sp, #4]
 8028240:	3302      	adds	r3, #2
 8028242:	9300      	str	r3, [sp, #0]
 8028244:	9b00      	ldr	r3, [sp, #0]
 8028246:	9802      	ldr	r0, [sp, #8]
 8028248:	3b01      	subs	r3, #1
 802824a:	0021      	movs	r1, r4
 802824c:	612b      	str	r3, [r5, #16]
 802824e:	f7ff fd7f 	bl	8027d50 <_Bfree>
 8028252:	0028      	movs	r0, r5
 8028254:	b005      	add	sp, #20
 8028256:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8028258:	cb01      	ldmia	r3!, {r0}
 802825a:	c101      	stmia	r1!, {r0}
 802825c:	429a      	cmp	r2, r3
 802825e:	d8fb      	bhi.n	8028258 <__lshift+0xc4>
 8028260:	e7f0      	b.n	8028244 <__lshift+0xb0>
 8028262:	46c0      	nop			@ (mov r8, r8)
 8028264:	0802ead2 	.word	0x0802ead2
 8028268:	0802eb43 	.word	0x0802eb43

0802826c <__mcmp>:
 802826c:	b530      	push	{r4, r5, lr}
 802826e:	690b      	ldr	r3, [r1, #16]
 8028270:	6904      	ldr	r4, [r0, #16]
 8028272:	0002      	movs	r2, r0
 8028274:	1ae0      	subs	r0, r4, r3
 8028276:	429c      	cmp	r4, r3
 8028278:	d10f      	bne.n	802829a <__mcmp+0x2e>
 802827a:	3214      	adds	r2, #20
 802827c:	009b      	lsls	r3, r3, #2
 802827e:	3114      	adds	r1, #20
 8028280:	0014      	movs	r4, r2
 8028282:	18c9      	adds	r1, r1, r3
 8028284:	18d2      	adds	r2, r2, r3
 8028286:	3a04      	subs	r2, #4
 8028288:	3904      	subs	r1, #4
 802828a:	6815      	ldr	r5, [r2, #0]
 802828c:	680b      	ldr	r3, [r1, #0]
 802828e:	429d      	cmp	r5, r3
 8028290:	d004      	beq.n	802829c <__mcmp+0x30>
 8028292:	2001      	movs	r0, #1
 8028294:	429d      	cmp	r5, r3
 8028296:	d200      	bcs.n	802829a <__mcmp+0x2e>
 8028298:	3802      	subs	r0, #2
 802829a:	bd30      	pop	{r4, r5, pc}
 802829c:	4294      	cmp	r4, r2
 802829e:	d3f2      	bcc.n	8028286 <__mcmp+0x1a>
 80282a0:	e7fb      	b.n	802829a <__mcmp+0x2e>
	...

080282a4 <__mdiff>:
 80282a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80282a6:	000c      	movs	r4, r1
 80282a8:	b087      	sub	sp, #28
 80282aa:	9000      	str	r0, [sp, #0]
 80282ac:	0011      	movs	r1, r2
 80282ae:	0020      	movs	r0, r4
 80282b0:	0017      	movs	r7, r2
 80282b2:	f7ff ffdb 	bl	802826c <__mcmp>
 80282b6:	1e05      	subs	r5, r0, #0
 80282b8:	d110      	bne.n	80282dc <__mdiff+0x38>
 80282ba:	0001      	movs	r1, r0
 80282bc:	9800      	ldr	r0, [sp, #0]
 80282be:	f7ff fd03 	bl	8027cc8 <_Balloc>
 80282c2:	1e02      	subs	r2, r0, #0
 80282c4:	d104      	bne.n	80282d0 <__mdiff+0x2c>
 80282c6:	4b40      	ldr	r3, [pc, #256]	@ (80283c8 <__mdiff+0x124>)
 80282c8:	4840      	ldr	r0, [pc, #256]	@ (80283cc <__mdiff+0x128>)
 80282ca:	4941      	ldr	r1, [pc, #260]	@ (80283d0 <__mdiff+0x12c>)
 80282cc:	f000 fdd4 	bl	8028e78 <__assert_func>
 80282d0:	2301      	movs	r3, #1
 80282d2:	6145      	str	r5, [r0, #20]
 80282d4:	6103      	str	r3, [r0, #16]
 80282d6:	0010      	movs	r0, r2
 80282d8:	b007      	add	sp, #28
 80282da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80282dc:	2600      	movs	r6, #0
 80282de:	42b0      	cmp	r0, r6
 80282e0:	da03      	bge.n	80282ea <__mdiff+0x46>
 80282e2:	0023      	movs	r3, r4
 80282e4:	003c      	movs	r4, r7
 80282e6:	001f      	movs	r7, r3
 80282e8:	3601      	adds	r6, #1
 80282ea:	6861      	ldr	r1, [r4, #4]
 80282ec:	9800      	ldr	r0, [sp, #0]
 80282ee:	f7ff fceb 	bl	8027cc8 <_Balloc>
 80282f2:	1e02      	subs	r2, r0, #0
 80282f4:	d103      	bne.n	80282fe <__mdiff+0x5a>
 80282f6:	4b34      	ldr	r3, [pc, #208]	@ (80283c8 <__mdiff+0x124>)
 80282f8:	4834      	ldr	r0, [pc, #208]	@ (80283cc <__mdiff+0x128>)
 80282fa:	4936      	ldr	r1, [pc, #216]	@ (80283d4 <__mdiff+0x130>)
 80282fc:	e7e6      	b.n	80282cc <__mdiff+0x28>
 80282fe:	6923      	ldr	r3, [r4, #16]
 8028300:	3414      	adds	r4, #20
 8028302:	9300      	str	r3, [sp, #0]
 8028304:	009b      	lsls	r3, r3, #2
 8028306:	18e3      	adds	r3, r4, r3
 8028308:	0021      	movs	r1, r4
 802830a:	9401      	str	r4, [sp, #4]
 802830c:	003c      	movs	r4, r7
 802830e:	9302      	str	r3, [sp, #8]
 8028310:	693b      	ldr	r3, [r7, #16]
 8028312:	3414      	adds	r4, #20
 8028314:	009b      	lsls	r3, r3, #2
 8028316:	18e3      	adds	r3, r4, r3
 8028318:	9303      	str	r3, [sp, #12]
 802831a:	0003      	movs	r3, r0
 802831c:	60c6      	str	r6, [r0, #12]
 802831e:	468c      	mov	ip, r1
 8028320:	2000      	movs	r0, #0
 8028322:	3314      	adds	r3, #20
 8028324:	9304      	str	r3, [sp, #16]
 8028326:	9305      	str	r3, [sp, #20]
 8028328:	4663      	mov	r3, ip
 802832a:	cb20      	ldmia	r3!, {r5}
 802832c:	b2a9      	uxth	r1, r5
 802832e:	000e      	movs	r6, r1
 8028330:	469c      	mov	ip, r3
 8028332:	cc08      	ldmia	r4!, {r3}
 8028334:	0c2d      	lsrs	r5, r5, #16
 8028336:	b299      	uxth	r1, r3
 8028338:	1a71      	subs	r1, r6, r1
 802833a:	1809      	adds	r1, r1, r0
 802833c:	0c1b      	lsrs	r3, r3, #16
 802833e:	1408      	asrs	r0, r1, #16
 8028340:	1aeb      	subs	r3, r5, r3
 8028342:	181b      	adds	r3, r3, r0
 8028344:	1418      	asrs	r0, r3, #16
 8028346:	b289      	uxth	r1, r1
 8028348:	041b      	lsls	r3, r3, #16
 802834a:	4319      	orrs	r1, r3
 802834c:	9b05      	ldr	r3, [sp, #20]
 802834e:	c302      	stmia	r3!, {r1}
 8028350:	9305      	str	r3, [sp, #20]
 8028352:	9b03      	ldr	r3, [sp, #12]
 8028354:	42a3      	cmp	r3, r4
 8028356:	d8e7      	bhi.n	8028328 <__mdiff+0x84>
 8028358:	0039      	movs	r1, r7
 802835a:	9c03      	ldr	r4, [sp, #12]
 802835c:	3115      	adds	r1, #21
 802835e:	2304      	movs	r3, #4
 8028360:	428c      	cmp	r4, r1
 8028362:	d304      	bcc.n	802836e <__mdiff+0xca>
 8028364:	1be3      	subs	r3, r4, r7
 8028366:	3b15      	subs	r3, #21
 8028368:	089b      	lsrs	r3, r3, #2
 802836a:	3301      	adds	r3, #1
 802836c:	009b      	lsls	r3, r3, #2
 802836e:	9901      	ldr	r1, [sp, #4]
 8028370:	18cd      	adds	r5, r1, r3
 8028372:	9904      	ldr	r1, [sp, #16]
 8028374:	002e      	movs	r6, r5
 8028376:	18cb      	adds	r3, r1, r3
 8028378:	001f      	movs	r7, r3
 802837a:	9902      	ldr	r1, [sp, #8]
 802837c:	428e      	cmp	r6, r1
 802837e:	d311      	bcc.n	80283a4 <__mdiff+0x100>
 8028380:	9c02      	ldr	r4, [sp, #8]
 8028382:	1ee9      	subs	r1, r5, #3
 8028384:	2000      	movs	r0, #0
 8028386:	428c      	cmp	r4, r1
 8028388:	d304      	bcc.n	8028394 <__mdiff+0xf0>
 802838a:	0021      	movs	r1, r4
 802838c:	3103      	adds	r1, #3
 802838e:	1b49      	subs	r1, r1, r5
 8028390:	0889      	lsrs	r1, r1, #2
 8028392:	0088      	lsls	r0, r1, #2
 8028394:	181b      	adds	r3, r3, r0
 8028396:	3b04      	subs	r3, #4
 8028398:	6819      	ldr	r1, [r3, #0]
 802839a:	2900      	cmp	r1, #0
 802839c:	d010      	beq.n	80283c0 <__mdiff+0x11c>
 802839e:	9b00      	ldr	r3, [sp, #0]
 80283a0:	6113      	str	r3, [r2, #16]
 80283a2:	e798      	b.n	80282d6 <__mdiff+0x32>
 80283a4:	4684      	mov	ip, r0
 80283a6:	ce02      	ldmia	r6!, {r1}
 80283a8:	b288      	uxth	r0, r1
 80283aa:	4460      	add	r0, ip
 80283ac:	1400      	asrs	r0, r0, #16
 80283ae:	0c0c      	lsrs	r4, r1, #16
 80283b0:	1904      	adds	r4, r0, r4
 80283b2:	4461      	add	r1, ip
 80283b4:	1420      	asrs	r0, r4, #16
 80283b6:	b289      	uxth	r1, r1
 80283b8:	0424      	lsls	r4, r4, #16
 80283ba:	4321      	orrs	r1, r4
 80283bc:	c702      	stmia	r7!, {r1}
 80283be:	e7dc      	b.n	802837a <__mdiff+0xd6>
 80283c0:	9900      	ldr	r1, [sp, #0]
 80283c2:	3901      	subs	r1, #1
 80283c4:	9100      	str	r1, [sp, #0]
 80283c6:	e7e6      	b.n	8028396 <__mdiff+0xf2>
 80283c8:	0802ead2 	.word	0x0802ead2
 80283cc:	0802eb43 	.word	0x0802eb43
 80283d0:	00000237 	.word	0x00000237
 80283d4:	00000245 	.word	0x00000245

080283d8 <__ulp>:
 80283d8:	b510      	push	{r4, lr}
 80283da:	2400      	movs	r4, #0
 80283dc:	4b0c      	ldr	r3, [pc, #48]	@ (8028410 <__ulp+0x38>)
 80283de:	4a0d      	ldr	r2, [pc, #52]	@ (8028414 <__ulp+0x3c>)
 80283e0:	400b      	ands	r3, r1
 80283e2:	189b      	adds	r3, r3, r2
 80283e4:	42a3      	cmp	r3, r4
 80283e6:	dc06      	bgt.n	80283f6 <__ulp+0x1e>
 80283e8:	425b      	negs	r3, r3
 80283ea:	151a      	asrs	r2, r3, #20
 80283ec:	2a13      	cmp	r2, #19
 80283ee:	dc05      	bgt.n	80283fc <__ulp+0x24>
 80283f0:	2380      	movs	r3, #128	@ 0x80
 80283f2:	031b      	lsls	r3, r3, #12
 80283f4:	4113      	asrs	r3, r2
 80283f6:	0019      	movs	r1, r3
 80283f8:	0020      	movs	r0, r4
 80283fa:	bd10      	pop	{r4, pc}
 80283fc:	3a14      	subs	r2, #20
 80283fe:	2401      	movs	r4, #1
 8028400:	2a1e      	cmp	r2, #30
 8028402:	dc02      	bgt.n	802840a <__ulp+0x32>
 8028404:	2480      	movs	r4, #128	@ 0x80
 8028406:	0624      	lsls	r4, r4, #24
 8028408:	40d4      	lsrs	r4, r2
 802840a:	2300      	movs	r3, #0
 802840c:	e7f3      	b.n	80283f6 <__ulp+0x1e>
 802840e:	46c0      	nop			@ (mov r8, r8)
 8028410:	7ff00000 	.word	0x7ff00000
 8028414:	fcc00000 	.word	0xfcc00000

08028418 <__b2d>:
 8028418:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 802841a:	0006      	movs	r6, r0
 802841c:	6903      	ldr	r3, [r0, #16]
 802841e:	3614      	adds	r6, #20
 8028420:	009b      	lsls	r3, r3, #2
 8028422:	18f3      	adds	r3, r6, r3
 8028424:	1f1d      	subs	r5, r3, #4
 8028426:	682c      	ldr	r4, [r5, #0]
 8028428:	000f      	movs	r7, r1
 802842a:	0020      	movs	r0, r4
 802842c:	9301      	str	r3, [sp, #4]
 802842e:	f7ff fd43 	bl	8027eb8 <__hi0bits>
 8028432:	2220      	movs	r2, #32
 8028434:	1a12      	subs	r2, r2, r0
 8028436:	603a      	str	r2, [r7, #0]
 8028438:	0003      	movs	r3, r0
 802843a:	4a1c      	ldr	r2, [pc, #112]	@ (80284ac <__b2d+0x94>)
 802843c:	280a      	cmp	r0, #10
 802843e:	dc15      	bgt.n	802846c <__b2d+0x54>
 8028440:	210b      	movs	r1, #11
 8028442:	0027      	movs	r7, r4
 8028444:	1a09      	subs	r1, r1, r0
 8028446:	40cf      	lsrs	r7, r1
 8028448:	433a      	orrs	r2, r7
 802844a:	468c      	mov	ip, r1
 802844c:	0011      	movs	r1, r2
 802844e:	2200      	movs	r2, #0
 8028450:	42ae      	cmp	r6, r5
 8028452:	d202      	bcs.n	802845a <__b2d+0x42>
 8028454:	9a01      	ldr	r2, [sp, #4]
 8028456:	3a08      	subs	r2, #8
 8028458:	6812      	ldr	r2, [r2, #0]
 802845a:	3315      	adds	r3, #21
 802845c:	409c      	lsls	r4, r3
 802845e:	4663      	mov	r3, ip
 8028460:	0027      	movs	r7, r4
 8028462:	40da      	lsrs	r2, r3
 8028464:	4317      	orrs	r7, r2
 8028466:	0038      	movs	r0, r7
 8028468:	b003      	add	sp, #12
 802846a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802846c:	2700      	movs	r7, #0
 802846e:	42ae      	cmp	r6, r5
 8028470:	d202      	bcs.n	8028478 <__b2d+0x60>
 8028472:	9d01      	ldr	r5, [sp, #4]
 8028474:	3d08      	subs	r5, #8
 8028476:	682f      	ldr	r7, [r5, #0]
 8028478:	210b      	movs	r1, #11
 802847a:	4249      	negs	r1, r1
 802847c:	468c      	mov	ip, r1
 802847e:	449c      	add	ip, r3
 8028480:	2b0b      	cmp	r3, #11
 8028482:	d010      	beq.n	80284a6 <__b2d+0x8e>
 8028484:	4661      	mov	r1, ip
 8028486:	2320      	movs	r3, #32
 8028488:	408c      	lsls	r4, r1
 802848a:	1a5b      	subs	r3, r3, r1
 802848c:	0039      	movs	r1, r7
 802848e:	40d9      	lsrs	r1, r3
 8028490:	430c      	orrs	r4, r1
 8028492:	4322      	orrs	r2, r4
 8028494:	0011      	movs	r1, r2
 8028496:	2200      	movs	r2, #0
 8028498:	42b5      	cmp	r5, r6
 802849a:	d901      	bls.n	80284a0 <__b2d+0x88>
 802849c:	3d04      	subs	r5, #4
 802849e:	682a      	ldr	r2, [r5, #0]
 80284a0:	4664      	mov	r4, ip
 80284a2:	40a7      	lsls	r7, r4
 80284a4:	e7dd      	b.n	8028462 <__b2d+0x4a>
 80284a6:	4322      	orrs	r2, r4
 80284a8:	0011      	movs	r1, r2
 80284aa:	e7dc      	b.n	8028466 <__b2d+0x4e>
 80284ac:	3ff00000 	.word	0x3ff00000

080284b0 <__d2b>:
 80284b0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80284b2:	2101      	movs	r1, #1
 80284b4:	0016      	movs	r6, r2
 80284b6:	001f      	movs	r7, r3
 80284b8:	f7ff fc06 	bl	8027cc8 <_Balloc>
 80284bc:	1e04      	subs	r4, r0, #0
 80284be:	d105      	bne.n	80284cc <__d2b+0x1c>
 80284c0:	0022      	movs	r2, r4
 80284c2:	4b25      	ldr	r3, [pc, #148]	@ (8028558 <__d2b+0xa8>)
 80284c4:	4825      	ldr	r0, [pc, #148]	@ (802855c <__d2b+0xac>)
 80284c6:	4926      	ldr	r1, [pc, #152]	@ (8028560 <__d2b+0xb0>)
 80284c8:	f000 fcd6 	bl	8028e78 <__assert_func>
 80284cc:	033b      	lsls	r3, r7, #12
 80284ce:	007d      	lsls	r5, r7, #1
 80284d0:	0b1b      	lsrs	r3, r3, #12
 80284d2:	0d6d      	lsrs	r5, r5, #21
 80284d4:	d002      	beq.n	80284dc <__d2b+0x2c>
 80284d6:	2280      	movs	r2, #128	@ 0x80
 80284d8:	0352      	lsls	r2, r2, #13
 80284da:	4313      	orrs	r3, r2
 80284dc:	9301      	str	r3, [sp, #4]
 80284de:	2e00      	cmp	r6, #0
 80284e0:	d025      	beq.n	802852e <__d2b+0x7e>
 80284e2:	4668      	mov	r0, sp
 80284e4:	9600      	str	r6, [sp, #0]
 80284e6:	f7ff fd08 	bl	8027efa <__lo0bits>
 80284ea:	9b01      	ldr	r3, [sp, #4]
 80284ec:	9900      	ldr	r1, [sp, #0]
 80284ee:	2800      	cmp	r0, #0
 80284f0:	d01b      	beq.n	802852a <__d2b+0x7a>
 80284f2:	2220      	movs	r2, #32
 80284f4:	001e      	movs	r6, r3
 80284f6:	1a12      	subs	r2, r2, r0
 80284f8:	4096      	lsls	r6, r2
 80284fa:	0032      	movs	r2, r6
 80284fc:	40c3      	lsrs	r3, r0
 80284fe:	430a      	orrs	r2, r1
 8028500:	6162      	str	r2, [r4, #20]
 8028502:	9301      	str	r3, [sp, #4]
 8028504:	9e01      	ldr	r6, [sp, #4]
 8028506:	61a6      	str	r6, [r4, #24]
 8028508:	1e73      	subs	r3, r6, #1
 802850a:	419e      	sbcs	r6, r3
 802850c:	3601      	adds	r6, #1
 802850e:	6126      	str	r6, [r4, #16]
 8028510:	2d00      	cmp	r5, #0
 8028512:	d014      	beq.n	802853e <__d2b+0x8e>
 8028514:	2635      	movs	r6, #53	@ 0x35
 8028516:	4b13      	ldr	r3, [pc, #76]	@ (8028564 <__d2b+0xb4>)
 8028518:	18ed      	adds	r5, r5, r3
 802851a:	9b08      	ldr	r3, [sp, #32]
 802851c:	182d      	adds	r5, r5, r0
 802851e:	601d      	str	r5, [r3, #0]
 8028520:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8028522:	1a36      	subs	r6, r6, r0
 8028524:	601e      	str	r6, [r3, #0]
 8028526:	0020      	movs	r0, r4
 8028528:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 802852a:	6161      	str	r1, [r4, #20]
 802852c:	e7ea      	b.n	8028504 <__d2b+0x54>
 802852e:	a801      	add	r0, sp, #4
 8028530:	f7ff fce3 	bl	8027efa <__lo0bits>
 8028534:	9b01      	ldr	r3, [sp, #4]
 8028536:	2601      	movs	r6, #1
 8028538:	6163      	str	r3, [r4, #20]
 802853a:	3020      	adds	r0, #32
 802853c:	e7e7      	b.n	802850e <__d2b+0x5e>
 802853e:	4b0a      	ldr	r3, [pc, #40]	@ (8028568 <__d2b+0xb8>)
 8028540:	18c0      	adds	r0, r0, r3
 8028542:	9b08      	ldr	r3, [sp, #32]
 8028544:	6018      	str	r0, [r3, #0]
 8028546:	4b09      	ldr	r3, [pc, #36]	@ (802856c <__d2b+0xbc>)
 8028548:	18f3      	adds	r3, r6, r3
 802854a:	009b      	lsls	r3, r3, #2
 802854c:	18e3      	adds	r3, r4, r3
 802854e:	6958      	ldr	r0, [r3, #20]
 8028550:	f7ff fcb2 	bl	8027eb8 <__hi0bits>
 8028554:	0176      	lsls	r6, r6, #5
 8028556:	e7e3      	b.n	8028520 <__d2b+0x70>
 8028558:	0802ead2 	.word	0x0802ead2
 802855c:	0802eb43 	.word	0x0802eb43
 8028560:	0000030f 	.word	0x0000030f
 8028564:	fffffbcd 	.word	0xfffffbcd
 8028568:	fffffbce 	.word	0xfffffbce
 802856c:	3fffffff 	.word	0x3fffffff

08028570 <__ratio>:
 8028570:	b5f0      	push	{r4, r5, r6, r7, lr}
 8028572:	b087      	sub	sp, #28
 8028574:	000f      	movs	r7, r1
 8028576:	a904      	add	r1, sp, #16
 8028578:	0006      	movs	r6, r0
 802857a:	f7ff ff4d 	bl	8028418 <__b2d>
 802857e:	9000      	str	r0, [sp, #0]
 8028580:	9101      	str	r1, [sp, #4]
 8028582:	9b00      	ldr	r3, [sp, #0]
 8028584:	9c01      	ldr	r4, [sp, #4]
 8028586:	0038      	movs	r0, r7
 8028588:	a905      	add	r1, sp, #20
 802858a:	9302      	str	r3, [sp, #8]
 802858c:	9403      	str	r4, [sp, #12]
 802858e:	f7ff ff43 	bl	8028418 <__b2d>
 8028592:	000d      	movs	r5, r1
 8028594:	0002      	movs	r2, r0
 8028596:	000b      	movs	r3, r1
 8028598:	6930      	ldr	r0, [r6, #16]
 802859a:	6939      	ldr	r1, [r7, #16]
 802859c:	9e04      	ldr	r6, [sp, #16]
 802859e:	1a40      	subs	r0, r0, r1
 80285a0:	9905      	ldr	r1, [sp, #20]
 80285a2:	0140      	lsls	r0, r0, #5
 80285a4:	1a71      	subs	r1, r6, r1
 80285a6:	1841      	adds	r1, r0, r1
 80285a8:	0508      	lsls	r0, r1, #20
 80285aa:	2900      	cmp	r1, #0
 80285ac:	dd08      	ble.n	80285c0 <__ratio+0x50>
 80285ae:	9901      	ldr	r1, [sp, #4]
 80285b0:	1841      	adds	r1, r0, r1
 80285b2:	9103      	str	r1, [sp, #12]
 80285b4:	9802      	ldr	r0, [sp, #8]
 80285b6:	9903      	ldr	r1, [sp, #12]
 80285b8:	f7d9 fd92 	bl	80020e0 <__aeabi_ddiv>
 80285bc:	b007      	add	sp, #28
 80285be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80285c0:	1a2b      	subs	r3, r5, r0
 80285c2:	e7f7      	b.n	80285b4 <__ratio+0x44>

080285c4 <__copybits>:
 80285c4:	b570      	push	{r4, r5, r6, lr}
 80285c6:	0014      	movs	r4, r2
 80285c8:	0005      	movs	r5, r0
 80285ca:	3901      	subs	r1, #1
 80285cc:	6913      	ldr	r3, [r2, #16]
 80285ce:	1149      	asrs	r1, r1, #5
 80285d0:	3101      	adds	r1, #1
 80285d2:	0089      	lsls	r1, r1, #2
 80285d4:	3414      	adds	r4, #20
 80285d6:	009b      	lsls	r3, r3, #2
 80285d8:	1841      	adds	r1, r0, r1
 80285da:	18e3      	adds	r3, r4, r3
 80285dc:	42a3      	cmp	r3, r4
 80285de:	d80d      	bhi.n	80285fc <__copybits+0x38>
 80285e0:	0014      	movs	r4, r2
 80285e2:	3411      	adds	r4, #17
 80285e4:	2500      	movs	r5, #0
 80285e6:	42a3      	cmp	r3, r4
 80285e8:	d303      	bcc.n	80285f2 <__copybits+0x2e>
 80285ea:	1a9b      	subs	r3, r3, r2
 80285ec:	3b11      	subs	r3, #17
 80285ee:	089b      	lsrs	r3, r3, #2
 80285f0:	009d      	lsls	r5, r3, #2
 80285f2:	2300      	movs	r3, #0
 80285f4:	1940      	adds	r0, r0, r5
 80285f6:	4281      	cmp	r1, r0
 80285f8:	d803      	bhi.n	8028602 <__copybits+0x3e>
 80285fa:	bd70      	pop	{r4, r5, r6, pc}
 80285fc:	cc40      	ldmia	r4!, {r6}
 80285fe:	c540      	stmia	r5!, {r6}
 8028600:	e7ec      	b.n	80285dc <__copybits+0x18>
 8028602:	c008      	stmia	r0!, {r3}
 8028604:	e7f7      	b.n	80285f6 <__copybits+0x32>

08028606 <__any_on>:
 8028606:	0002      	movs	r2, r0
 8028608:	6900      	ldr	r0, [r0, #16]
 802860a:	b510      	push	{r4, lr}
 802860c:	3214      	adds	r2, #20
 802860e:	114b      	asrs	r3, r1, #5
 8028610:	4298      	cmp	r0, r3
 8028612:	db13      	blt.n	802863c <__any_on+0x36>
 8028614:	dd0c      	ble.n	8028630 <__any_on+0x2a>
 8028616:	241f      	movs	r4, #31
 8028618:	0008      	movs	r0, r1
 802861a:	4020      	ands	r0, r4
 802861c:	4221      	tst	r1, r4
 802861e:	d007      	beq.n	8028630 <__any_on+0x2a>
 8028620:	0099      	lsls	r1, r3, #2
 8028622:	588c      	ldr	r4, [r1, r2]
 8028624:	0021      	movs	r1, r4
 8028626:	40c1      	lsrs	r1, r0
 8028628:	4081      	lsls	r1, r0
 802862a:	2001      	movs	r0, #1
 802862c:	428c      	cmp	r4, r1
 802862e:	d104      	bne.n	802863a <__any_on+0x34>
 8028630:	009b      	lsls	r3, r3, #2
 8028632:	18d3      	adds	r3, r2, r3
 8028634:	4293      	cmp	r3, r2
 8028636:	d803      	bhi.n	8028640 <__any_on+0x3a>
 8028638:	2000      	movs	r0, #0
 802863a:	bd10      	pop	{r4, pc}
 802863c:	0003      	movs	r3, r0
 802863e:	e7f7      	b.n	8028630 <__any_on+0x2a>
 8028640:	3b04      	subs	r3, #4
 8028642:	6819      	ldr	r1, [r3, #0]
 8028644:	2900      	cmp	r1, #0
 8028646:	d0f5      	beq.n	8028634 <__any_on+0x2e>
 8028648:	2001      	movs	r0, #1
 802864a:	e7f6      	b.n	802863a <__any_on+0x34>

0802864c <__ascii_wctomb>:
 802864c:	0003      	movs	r3, r0
 802864e:	1e08      	subs	r0, r1, #0
 8028650:	d005      	beq.n	802865e <__ascii_wctomb+0x12>
 8028652:	2aff      	cmp	r2, #255	@ 0xff
 8028654:	d904      	bls.n	8028660 <__ascii_wctomb+0x14>
 8028656:	228a      	movs	r2, #138	@ 0x8a
 8028658:	2001      	movs	r0, #1
 802865a:	601a      	str	r2, [r3, #0]
 802865c:	4240      	negs	r0, r0
 802865e:	4770      	bx	lr
 8028660:	2001      	movs	r0, #1
 8028662:	700a      	strb	r2, [r1, #0]
 8028664:	e7fb      	b.n	802865e <__ascii_wctomb+0x12>
	...

08028668 <__ssputs_r>:
 8028668:	b5f0      	push	{r4, r5, r6, r7, lr}
 802866a:	688e      	ldr	r6, [r1, #8]
 802866c:	b085      	sub	sp, #20
 802866e:	001f      	movs	r7, r3
 8028670:	000c      	movs	r4, r1
 8028672:	680b      	ldr	r3, [r1, #0]
 8028674:	9002      	str	r0, [sp, #8]
 8028676:	9203      	str	r2, [sp, #12]
 8028678:	42be      	cmp	r6, r7
 802867a:	d830      	bhi.n	80286de <__ssputs_r+0x76>
 802867c:	210c      	movs	r1, #12
 802867e:	5e62      	ldrsh	r2, [r4, r1]
 8028680:	2190      	movs	r1, #144	@ 0x90
 8028682:	00c9      	lsls	r1, r1, #3
 8028684:	420a      	tst	r2, r1
 8028686:	d028      	beq.n	80286da <__ssputs_r+0x72>
 8028688:	2003      	movs	r0, #3
 802868a:	6921      	ldr	r1, [r4, #16]
 802868c:	1a5b      	subs	r3, r3, r1
 802868e:	9301      	str	r3, [sp, #4]
 8028690:	6963      	ldr	r3, [r4, #20]
 8028692:	4343      	muls	r3, r0
 8028694:	9801      	ldr	r0, [sp, #4]
 8028696:	0fdd      	lsrs	r5, r3, #31
 8028698:	18ed      	adds	r5, r5, r3
 802869a:	1c7b      	adds	r3, r7, #1
 802869c:	181b      	adds	r3, r3, r0
 802869e:	106d      	asrs	r5, r5, #1
 80286a0:	42ab      	cmp	r3, r5
 80286a2:	d900      	bls.n	80286a6 <__ssputs_r+0x3e>
 80286a4:	001d      	movs	r5, r3
 80286a6:	0552      	lsls	r2, r2, #21
 80286a8:	d528      	bpl.n	80286fc <__ssputs_r+0x94>
 80286aa:	0029      	movs	r1, r5
 80286ac:	9802      	ldr	r0, [sp, #8]
 80286ae:	f7ff fa69 	bl	8027b84 <_malloc_r>
 80286b2:	1e06      	subs	r6, r0, #0
 80286b4:	d02c      	beq.n	8028710 <__ssputs_r+0xa8>
 80286b6:	9a01      	ldr	r2, [sp, #4]
 80286b8:	6921      	ldr	r1, [r4, #16]
 80286ba:	f7fe f80d 	bl	80266d8 <memcpy>
 80286be:	89a2      	ldrh	r2, [r4, #12]
 80286c0:	4b18      	ldr	r3, [pc, #96]	@ (8028724 <__ssputs_r+0xbc>)
 80286c2:	401a      	ands	r2, r3
 80286c4:	2380      	movs	r3, #128	@ 0x80
 80286c6:	4313      	orrs	r3, r2
 80286c8:	81a3      	strh	r3, [r4, #12]
 80286ca:	9b01      	ldr	r3, [sp, #4]
 80286cc:	6126      	str	r6, [r4, #16]
 80286ce:	18f6      	adds	r6, r6, r3
 80286d0:	6026      	str	r6, [r4, #0]
 80286d2:	003e      	movs	r6, r7
 80286d4:	6165      	str	r5, [r4, #20]
 80286d6:	1aed      	subs	r5, r5, r3
 80286d8:	60a5      	str	r5, [r4, #8]
 80286da:	42be      	cmp	r6, r7
 80286dc:	d900      	bls.n	80286e0 <__ssputs_r+0x78>
 80286de:	003e      	movs	r6, r7
 80286e0:	0032      	movs	r2, r6
 80286e2:	9903      	ldr	r1, [sp, #12]
 80286e4:	6820      	ldr	r0, [r4, #0]
 80286e6:	f000 fb7e 	bl	8028de6 <memmove>
 80286ea:	2000      	movs	r0, #0
 80286ec:	68a3      	ldr	r3, [r4, #8]
 80286ee:	1b9b      	subs	r3, r3, r6
 80286f0:	60a3      	str	r3, [r4, #8]
 80286f2:	6823      	ldr	r3, [r4, #0]
 80286f4:	199b      	adds	r3, r3, r6
 80286f6:	6023      	str	r3, [r4, #0]
 80286f8:	b005      	add	sp, #20
 80286fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80286fc:	002a      	movs	r2, r5
 80286fe:	9802      	ldr	r0, [sp, #8]
 8028700:	f000 fc05 	bl	8028f0e <_realloc_r>
 8028704:	1e06      	subs	r6, r0, #0
 8028706:	d1e0      	bne.n	80286ca <__ssputs_r+0x62>
 8028708:	6921      	ldr	r1, [r4, #16]
 802870a:	9802      	ldr	r0, [sp, #8]
 802870c:	f7fe fe6a 	bl	80273e4 <_free_r>
 8028710:	230c      	movs	r3, #12
 8028712:	2001      	movs	r0, #1
 8028714:	9a02      	ldr	r2, [sp, #8]
 8028716:	4240      	negs	r0, r0
 8028718:	6013      	str	r3, [r2, #0]
 802871a:	89a2      	ldrh	r2, [r4, #12]
 802871c:	3334      	adds	r3, #52	@ 0x34
 802871e:	4313      	orrs	r3, r2
 8028720:	81a3      	strh	r3, [r4, #12]
 8028722:	e7e9      	b.n	80286f8 <__ssputs_r+0x90>
 8028724:	fffffb7f 	.word	0xfffffb7f

08028728 <_svfiprintf_r>:
 8028728:	b5f0      	push	{r4, r5, r6, r7, lr}
 802872a:	b0a1      	sub	sp, #132	@ 0x84
 802872c:	9003      	str	r0, [sp, #12]
 802872e:	001d      	movs	r5, r3
 8028730:	898b      	ldrh	r3, [r1, #12]
 8028732:	000f      	movs	r7, r1
 8028734:	0016      	movs	r6, r2
 8028736:	061b      	lsls	r3, r3, #24
 8028738:	d511      	bpl.n	802875e <_svfiprintf_r+0x36>
 802873a:	690b      	ldr	r3, [r1, #16]
 802873c:	2b00      	cmp	r3, #0
 802873e:	d10e      	bne.n	802875e <_svfiprintf_r+0x36>
 8028740:	2140      	movs	r1, #64	@ 0x40
 8028742:	f7ff fa1f 	bl	8027b84 <_malloc_r>
 8028746:	6038      	str	r0, [r7, #0]
 8028748:	6138      	str	r0, [r7, #16]
 802874a:	2800      	cmp	r0, #0
 802874c:	d105      	bne.n	802875a <_svfiprintf_r+0x32>
 802874e:	230c      	movs	r3, #12
 8028750:	9a03      	ldr	r2, [sp, #12]
 8028752:	6013      	str	r3, [r2, #0]
 8028754:	2001      	movs	r0, #1
 8028756:	4240      	negs	r0, r0
 8028758:	e0cf      	b.n	80288fa <_svfiprintf_r+0x1d2>
 802875a:	2340      	movs	r3, #64	@ 0x40
 802875c:	617b      	str	r3, [r7, #20]
 802875e:	2300      	movs	r3, #0
 8028760:	ac08      	add	r4, sp, #32
 8028762:	6163      	str	r3, [r4, #20]
 8028764:	3320      	adds	r3, #32
 8028766:	7663      	strb	r3, [r4, #25]
 8028768:	3310      	adds	r3, #16
 802876a:	76a3      	strb	r3, [r4, #26]
 802876c:	9507      	str	r5, [sp, #28]
 802876e:	0035      	movs	r5, r6
 8028770:	782b      	ldrb	r3, [r5, #0]
 8028772:	2b00      	cmp	r3, #0
 8028774:	d001      	beq.n	802877a <_svfiprintf_r+0x52>
 8028776:	2b25      	cmp	r3, #37	@ 0x25
 8028778:	d148      	bne.n	802880c <_svfiprintf_r+0xe4>
 802877a:	1bab      	subs	r3, r5, r6
 802877c:	9305      	str	r3, [sp, #20]
 802877e:	42b5      	cmp	r5, r6
 8028780:	d00b      	beq.n	802879a <_svfiprintf_r+0x72>
 8028782:	0032      	movs	r2, r6
 8028784:	0039      	movs	r1, r7
 8028786:	9803      	ldr	r0, [sp, #12]
 8028788:	f7ff ff6e 	bl	8028668 <__ssputs_r>
 802878c:	3001      	adds	r0, #1
 802878e:	d100      	bne.n	8028792 <_svfiprintf_r+0x6a>
 8028790:	e0ae      	b.n	80288f0 <_svfiprintf_r+0x1c8>
 8028792:	6963      	ldr	r3, [r4, #20]
 8028794:	9a05      	ldr	r2, [sp, #20]
 8028796:	189b      	adds	r3, r3, r2
 8028798:	6163      	str	r3, [r4, #20]
 802879a:	782b      	ldrb	r3, [r5, #0]
 802879c:	2b00      	cmp	r3, #0
 802879e:	d100      	bne.n	80287a2 <_svfiprintf_r+0x7a>
 80287a0:	e0a6      	b.n	80288f0 <_svfiprintf_r+0x1c8>
 80287a2:	2201      	movs	r2, #1
 80287a4:	2300      	movs	r3, #0
 80287a6:	4252      	negs	r2, r2
 80287a8:	6062      	str	r2, [r4, #4]
 80287aa:	a904      	add	r1, sp, #16
 80287ac:	3254      	adds	r2, #84	@ 0x54
 80287ae:	1852      	adds	r2, r2, r1
 80287b0:	1c6e      	adds	r6, r5, #1
 80287b2:	6023      	str	r3, [r4, #0]
 80287b4:	60e3      	str	r3, [r4, #12]
 80287b6:	60a3      	str	r3, [r4, #8]
 80287b8:	7013      	strb	r3, [r2, #0]
 80287ba:	65a3      	str	r3, [r4, #88]	@ 0x58
 80287bc:	4b54      	ldr	r3, [pc, #336]	@ (8028910 <_svfiprintf_r+0x1e8>)
 80287be:	2205      	movs	r2, #5
 80287c0:	0018      	movs	r0, r3
 80287c2:	7831      	ldrb	r1, [r6, #0]
 80287c4:	9305      	str	r3, [sp, #20]
 80287c6:	f7fd ff7c 	bl	80266c2 <memchr>
 80287ca:	1c75      	adds	r5, r6, #1
 80287cc:	2800      	cmp	r0, #0
 80287ce:	d11f      	bne.n	8028810 <_svfiprintf_r+0xe8>
 80287d0:	6822      	ldr	r2, [r4, #0]
 80287d2:	06d3      	lsls	r3, r2, #27
 80287d4:	d504      	bpl.n	80287e0 <_svfiprintf_r+0xb8>
 80287d6:	2353      	movs	r3, #83	@ 0x53
 80287d8:	a904      	add	r1, sp, #16
 80287da:	185b      	adds	r3, r3, r1
 80287dc:	2120      	movs	r1, #32
 80287de:	7019      	strb	r1, [r3, #0]
 80287e0:	0713      	lsls	r3, r2, #28
 80287e2:	d504      	bpl.n	80287ee <_svfiprintf_r+0xc6>
 80287e4:	2353      	movs	r3, #83	@ 0x53
 80287e6:	a904      	add	r1, sp, #16
 80287e8:	185b      	adds	r3, r3, r1
 80287ea:	212b      	movs	r1, #43	@ 0x2b
 80287ec:	7019      	strb	r1, [r3, #0]
 80287ee:	7833      	ldrb	r3, [r6, #0]
 80287f0:	2b2a      	cmp	r3, #42	@ 0x2a
 80287f2:	d016      	beq.n	8028822 <_svfiprintf_r+0xfa>
 80287f4:	0035      	movs	r5, r6
 80287f6:	2100      	movs	r1, #0
 80287f8:	200a      	movs	r0, #10
 80287fa:	68e3      	ldr	r3, [r4, #12]
 80287fc:	782a      	ldrb	r2, [r5, #0]
 80287fe:	1c6e      	adds	r6, r5, #1
 8028800:	3a30      	subs	r2, #48	@ 0x30
 8028802:	2a09      	cmp	r2, #9
 8028804:	d950      	bls.n	80288a8 <_svfiprintf_r+0x180>
 8028806:	2900      	cmp	r1, #0
 8028808:	d111      	bne.n	802882e <_svfiprintf_r+0x106>
 802880a:	e017      	b.n	802883c <_svfiprintf_r+0x114>
 802880c:	3501      	adds	r5, #1
 802880e:	e7af      	b.n	8028770 <_svfiprintf_r+0x48>
 8028810:	9b05      	ldr	r3, [sp, #20]
 8028812:	6822      	ldr	r2, [r4, #0]
 8028814:	1ac0      	subs	r0, r0, r3
 8028816:	2301      	movs	r3, #1
 8028818:	4083      	lsls	r3, r0
 802881a:	4313      	orrs	r3, r2
 802881c:	002e      	movs	r6, r5
 802881e:	6023      	str	r3, [r4, #0]
 8028820:	e7cc      	b.n	80287bc <_svfiprintf_r+0x94>
 8028822:	9b07      	ldr	r3, [sp, #28]
 8028824:	1d19      	adds	r1, r3, #4
 8028826:	681b      	ldr	r3, [r3, #0]
 8028828:	9107      	str	r1, [sp, #28]
 802882a:	2b00      	cmp	r3, #0
 802882c:	db01      	blt.n	8028832 <_svfiprintf_r+0x10a>
 802882e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8028830:	e004      	b.n	802883c <_svfiprintf_r+0x114>
 8028832:	425b      	negs	r3, r3
 8028834:	60e3      	str	r3, [r4, #12]
 8028836:	2302      	movs	r3, #2
 8028838:	4313      	orrs	r3, r2
 802883a:	6023      	str	r3, [r4, #0]
 802883c:	782b      	ldrb	r3, [r5, #0]
 802883e:	2b2e      	cmp	r3, #46	@ 0x2e
 8028840:	d10c      	bne.n	802885c <_svfiprintf_r+0x134>
 8028842:	786b      	ldrb	r3, [r5, #1]
 8028844:	2b2a      	cmp	r3, #42	@ 0x2a
 8028846:	d134      	bne.n	80288b2 <_svfiprintf_r+0x18a>
 8028848:	9b07      	ldr	r3, [sp, #28]
 802884a:	3502      	adds	r5, #2
 802884c:	1d1a      	adds	r2, r3, #4
 802884e:	681b      	ldr	r3, [r3, #0]
 8028850:	9207      	str	r2, [sp, #28]
 8028852:	2b00      	cmp	r3, #0
 8028854:	da01      	bge.n	802885a <_svfiprintf_r+0x132>
 8028856:	2301      	movs	r3, #1
 8028858:	425b      	negs	r3, r3
 802885a:	9309      	str	r3, [sp, #36]	@ 0x24
 802885c:	4e2d      	ldr	r6, [pc, #180]	@ (8028914 <_svfiprintf_r+0x1ec>)
 802885e:	2203      	movs	r2, #3
 8028860:	0030      	movs	r0, r6
 8028862:	7829      	ldrb	r1, [r5, #0]
 8028864:	f7fd ff2d 	bl	80266c2 <memchr>
 8028868:	2800      	cmp	r0, #0
 802886a:	d006      	beq.n	802887a <_svfiprintf_r+0x152>
 802886c:	2340      	movs	r3, #64	@ 0x40
 802886e:	1b80      	subs	r0, r0, r6
 8028870:	4083      	lsls	r3, r0
 8028872:	6822      	ldr	r2, [r4, #0]
 8028874:	3501      	adds	r5, #1
 8028876:	4313      	orrs	r3, r2
 8028878:	6023      	str	r3, [r4, #0]
 802887a:	7829      	ldrb	r1, [r5, #0]
 802887c:	2206      	movs	r2, #6
 802887e:	4826      	ldr	r0, [pc, #152]	@ (8028918 <_svfiprintf_r+0x1f0>)
 8028880:	1c6e      	adds	r6, r5, #1
 8028882:	7621      	strb	r1, [r4, #24]
 8028884:	f7fd ff1d 	bl	80266c2 <memchr>
 8028888:	2800      	cmp	r0, #0
 802888a:	d038      	beq.n	80288fe <_svfiprintf_r+0x1d6>
 802888c:	4b23      	ldr	r3, [pc, #140]	@ (802891c <_svfiprintf_r+0x1f4>)
 802888e:	2b00      	cmp	r3, #0
 8028890:	d122      	bne.n	80288d8 <_svfiprintf_r+0x1b0>
 8028892:	2207      	movs	r2, #7
 8028894:	9b07      	ldr	r3, [sp, #28]
 8028896:	3307      	adds	r3, #7
 8028898:	4393      	bics	r3, r2
 802889a:	3308      	adds	r3, #8
 802889c:	9307      	str	r3, [sp, #28]
 802889e:	6963      	ldr	r3, [r4, #20]
 80288a0:	9a04      	ldr	r2, [sp, #16]
 80288a2:	189b      	adds	r3, r3, r2
 80288a4:	6163      	str	r3, [r4, #20]
 80288a6:	e762      	b.n	802876e <_svfiprintf_r+0x46>
 80288a8:	4343      	muls	r3, r0
 80288aa:	0035      	movs	r5, r6
 80288ac:	2101      	movs	r1, #1
 80288ae:	189b      	adds	r3, r3, r2
 80288b0:	e7a4      	b.n	80287fc <_svfiprintf_r+0xd4>
 80288b2:	2300      	movs	r3, #0
 80288b4:	200a      	movs	r0, #10
 80288b6:	0019      	movs	r1, r3
 80288b8:	3501      	adds	r5, #1
 80288ba:	6063      	str	r3, [r4, #4]
 80288bc:	782a      	ldrb	r2, [r5, #0]
 80288be:	1c6e      	adds	r6, r5, #1
 80288c0:	3a30      	subs	r2, #48	@ 0x30
 80288c2:	2a09      	cmp	r2, #9
 80288c4:	d903      	bls.n	80288ce <_svfiprintf_r+0x1a6>
 80288c6:	2b00      	cmp	r3, #0
 80288c8:	d0c8      	beq.n	802885c <_svfiprintf_r+0x134>
 80288ca:	9109      	str	r1, [sp, #36]	@ 0x24
 80288cc:	e7c6      	b.n	802885c <_svfiprintf_r+0x134>
 80288ce:	4341      	muls	r1, r0
 80288d0:	0035      	movs	r5, r6
 80288d2:	2301      	movs	r3, #1
 80288d4:	1889      	adds	r1, r1, r2
 80288d6:	e7f1      	b.n	80288bc <_svfiprintf_r+0x194>
 80288d8:	aa07      	add	r2, sp, #28
 80288da:	9200      	str	r2, [sp, #0]
 80288dc:	0021      	movs	r1, r4
 80288de:	003a      	movs	r2, r7
 80288e0:	4b0f      	ldr	r3, [pc, #60]	@ (8028920 <_svfiprintf_r+0x1f8>)
 80288e2:	9803      	ldr	r0, [sp, #12]
 80288e4:	f7fc ffe6 	bl	80258b4 <_printf_float>
 80288e8:	9004      	str	r0, [sp, #16]
 80288ea:	9b04      	ldr	r3, [sp, #16]
 80288ec:	3301      	adds	r3, #1
 80288ee:	d1d6      	bne.n	802889e <_svfiprintf_r+0x176>
 80288f0:	89bb      	ldrh	r3, [r7, #12]
 80288f2:	980d      	ldr	r0, [sp, #52]	@ 0x34
 80288f4:	065b      	lsls	r3, r3, #25
 80288f6:	d500      	bpl.n	80288fa <_svfiprintf_r+0x1d2>
 80288f8:	e72c      	b.n	8028754 <_svfiprintf_r+0x2c>
 80288fa:	b021      	add	sp, #132	@ 0x84
 80288fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80288fe:	aa07      	add	r2, sp, #28
 8028900:	9200      	str	r2, [sp, #0]
 8028902:	0021      	movs	r1, r4
 8028904:	003a      	movs	r2, r7
 8028906:	4b06      	ldr	r3, [pc, #24]	@ (8028920 <_svfiprintf_r+0x1f8>)
 8028908:	9803      	ldr	r0, [sp, #12]
 802890a:	f7fd fa81 	bl	8025e10 <_printf_i>
 802890e:	e7eb      	b.n	80288e8 <_svfiprintf_r+0x1c0>
 8028910:	0802eb9c 	.word	0x0802eb9c
 8028914:	0802eba2 	.word	0x0802eba2
 8028918:	0802eba6 	.word	0x0802eba6
 802891c:	080258b5 	.word	0x080258b5
 8028920:	08028669 	.word	0x08028669

08028924 <__sfputc_r>:
 8028924:	6893      	ldr	r3, [r2, #8]
 8028926:	b510      	push	{r4, lr}
 8028928:	3b01      	subs	r3, #1
 802892a:	6093      	str	r3, [r2, #8]
 802892c:	2b00      	cmp	r3, #0
 802892e:	da04      	bge.n	802893a <__sfputc_r+0x16>
 8028930:	6994      	ldr	r4, [r2, #24]
 8028932:	42a3      	cmp	r3, r4
 8028934:	db07      	blt.n	8028946 <__sfputc_r+0x22>
 8028936:	290a      	cmp	r1, #10
 8028938:	d005      	beq.n	8028946 <__sfputc_r+0x22>
 802893a:	6813      	ldr	r3, [r2, #0]
 802893c:	1c58      	adds	r0, r3, #1
 802893e:	6010      	str	r0, [r2, #0]
 8028940:	7019      	strb	r1, [r3, #0]
 8028942:	0008      	movs	r0, r1
 8028944:	bd10      	pop	{r4, pc}
 8028946:	f7fd fd4b 	bl	80263e0 <__swbuf_r>
 802894a:	0001      	movs	r1, r0
 802894c:	e7f9      	b.n	8028942 <__sfputc_r+0x1e>

0802894e <__sfputs_r>:
 802894e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8028950:	0006      	movs	r6, r0
 8028952:	000f      	movs	r7, r1
 8028954:	0014      	movs	r4, r2
 8028956:	18d5      	adds	r5, r2, r3
 8028958:	42ac      	cmp	r4, r5
 802895a:	d101      	bne.n	8028960 <__sfputs_r+0x12>
 802895c:	2000      	movs	r0, #0
 802895e:	e007      	b.n	8028970 <__sfputs_r+0x22>
 8028960:	7821      	ldrb	r1, [r4, #0]
 8028962:	003a      	movs	r2, r7
 8028964:	0030      	movs	r0, r6
 8028966:	f7ff ffdd 	bl	8028924 <__sfputc_r>
 802896a:	3401      	adds	r4, #1
 802896c:	1c43      	adds	r3, r0, #1
 802896e:	d1f3      	bne.n	8028958 <__sfputs_r+0xa>
 8028970:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08028974 <_vfiprintf_r>:
 8028974:	b5f0      	push	{r4, r5, r6, r7, lr}
 8028976:	b0a1      	sub	sp, #132	@ 0x84
 8028978:	000f      	movs	r7, r1
 802897a:	0015      	movs	r5, r2
 802897c:	001e      	movs	r6, r3
 802897e:	9003      	str	r0, [sp, #12]
 8028980:	2800      	cmp	r0, #0
 8028982:	d004      	beq.n	802898e <_vfiprintf_r+0x1a>
 8028984:	6a03      	ldr	r3, [r0, #32]
 8028986:	2b00      	cmp	r3, #0
 8028988:	d101      	bne.n	802898e <_vfiprintf_r+0x1a>
 802898a:	f7fd fbdd 	bl	8026148 <__sinit>
 802898e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8028990:	07db      	lsls	r3, r3, #31
 8028992:	d405      	bmi.n	80289a0 <_vfiprintf_r+0x2c>
 8028994:	89bb      	ldrh	r3, [r7, #12]
 8028996:	059b      	lsls	r3, r3, #22
 8028998:	d402      	bmi.n	80289a0 <_vfiprintf_r+0x2c>
 802899a:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 802899c:	f7fd fe8f 	bl	80266be <__retarget_lock_acquire_recursive>
 80289a0:	89bb      	ldrh	r3, [r7, #12]
 80289a2:	071b      	lsls	r3, r3, #28
 80289a4:	d502      	bpl.n	80289ac <_vfiprintf_r+0x38>
 80289a6:	693b      	ldr	r3, [r7, #16]
 80289a8:	2b00      	cmp	r3, #0
 80289aa:	d113      	bne.n	80289d4 <_vfiprintf_r+0x60>
 80289ac:	0039      	movs	r1, r7
 80289ae:	9803      	ldr	r0, [sp, #12]
 80289b0:	f7fd fd58 	bl	8026464 <__swsetup_r>
 80289b4:	2800      	cmp	r0, #0
 80289b6:	d00d      	beq.n	80289d4 <_vfiprintf_r+0x60>
 80289b8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80289ba:	07db      	lsls	r3, r3, #31
 80289bc:	d503      	bpl.n	80289c6 <_vfiprintf_r+0x52>
 80289be:	2001      	movs	r0, #1
 80289c0:	4240      	negs	r0, r0
 80289c2:	b021      	add	sp, #132	@ 0x84
 80289c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80289c6:	89bb      	ldrh	r3, [r7, #12]
 80289c8:	059b      	lsls	r3, r3, #22
 80289ca:	d4f8      	bmi.n	80289be <_vfiprintf_r+0x4a>
 80289cc:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 80289ce:	f7fd fe77 	bl	80266c0 <__retarget_lock_release_recursive>
 80289d2:	e7f4      	b.n	80289be <_vfiprintf_r+0x4a>
 80289d4:	2300      	movs	r3, #0
 80289d6:	ac08      	add	r4, sp, #32
 80289d8:	6163      	str	r3, [r4, #20]
 80289da:	3320      	adds	r3, #32
 80289dc:	7663      	strb	r3, [r4, #25]
 80289de:	3310      	adds	r3, #16
 80289e0:	76a3      	strb	r3, [r4, #26]
 80289e2:	9607      	str	r6, [sp, #28]
 80289e4:	002e      	movs	r6, r5
 80289e6:	7833      	ldrb	r3, [r6, #0]
 80289e8:	2b00      	cmp	r3, #0
 80289ea:	d001      	beq.n	80289f0 <_vfiprintf_r+0x7c>
 80289ec:	2b25      	cmp	r3, #37	@ 0x25
 80289ee:	d148      	bne.n	8028a82 <_vfiprintf_r+0x10e>
 80289f0:	1b73      	subs	r3, r6, r5
 80289f2:	9305      	str	r3, [sp, #20]
 80289f4:	42ae      	cmp	r6, r5
 80289f6:	d00b      	beq.n	8028a10 <_vfiprintf_r+0x9c>
 80289f8:	002a      	movs	r2, r5
 80289fa:	0039      	movs	r1, r7
 80289fc:	9803      	ldr	r0, [sp, #12]
 80289fe:	f7ff ffa6 	bl	802894e <__sfputs_r>
 8028a02:	3001      	adds	r0, #1
 8028a04:	d100      	bne.n	8028a08 <_vfiprintf_r+0x94>
 8028a06:	e0ae      	b.n	8028b66 <_vfiprintf_r+0x1f2>
 8028a08:	6963      	ldr	r3, [r4, #20]
 8028a0a:	9a05      	ldr	r2, [sp, #20]
 8028a0c:	189b      	adds	r3, r3, r2
 8028a0e:	6163      	str	r3, [r4, #20]
 8028a10:	7833      	ldrb	r3, [r6, #0]
 8028a12:	2b00      	cmp	r3, #0
 8028a14:	d100      	bne.n	8028a18 <_vfiprintf_r+0xa4>
 8028a16:	e0a6      	b.n	8028b66 <_vfiprintf_r+0x1f2>
 8028a18:	2201      	movs	r2, #1
 8028a1a:	2300      	movs	r3, #0
 8028a1c:	4252      	negs	r2, r2
 8028a1e:	6062      	str	r2, [r4, #4]
 8028a20:	a904      	add	r1, sp, #16
 8028a22:	3254      	adds	r2, #84	@ 0x54
 8028a24:	1852      	adds	r2, r2, r1
 8028a26:	1c75      	adds	r5, r6, #1
 8028a28:	6023      	str	r3, [r4, #0]
 8028a2a:	60e3      	str	r3, [r4, #12]
 8028a2c:	60a3      	str	r3, [r4, #8]
 8028a2e:	7013      	strb	r3, [r2, #0]
 8028a30:	65a3      	str	r3, [r4, #88]	@ 0x58
 8028a32:	4b59      	ldr	r3, [pc, #356]	@ (8028b98 <_vfiprintf_r+0x224>)
 8028a34:	2205      	movs	r2, #5
 8028a36:	0018      	movs	r0, r3
 8028a38:	7829      	ldrb	r1, [r5, #0]
 8028a3a:	9305      	str	r3, [sp, #20]
 8028a3c:	f7fd fe41 	bl	80266c2 <memchr>
 8028a40:	1c6e      	adds	r6, r5, #1
 8028a42:	2800      	cmp	r0, #0
 8028a44:	d11f      	bne.n	8028a86 <_vfiprintf_r+0x112>
 8028a46:	6822      	ldr	r2, [r4, #0]
 8028a48:	06d3      	lsls	r3, r2, #27
 8028a4a:	d504      	bpl.n	8028a56 <_vfiprintf_r+0xe2>
 8028a4c:	2353      	movs	r3, #83	@ 0x53
 8028a4e:	a904      	add	r1, sp, #16
 8028a50:	185b      	adds	r3, r3, r1
 8028a52:	2120      	movs	r1, #32
 8028a54:	7019      	strb	r1, [r3, #0]
 8028a56:	0713      	lsls	r3, r2, #28
 8028a58:	d504      	bpl.n	8028a64 <_vfiprintf_r+0xf0>
 8028a5a:	2353      	movs	r3, #83	@ 0x53
 8028a5c:	a904      	add	r1, sp, #16
 8028a5e:	185b      	adds	r3, r3, r1
 8028a60:	212b      	movs	r1, #43	@ 0x2b
 8028a62:	7019      	strb	r1, [r3, #0]
 8028a64:	782b      	ldrb	r3, [r5, #0]
 8028a66:	2b2a      	cmp	r3, #42	@ 0x2a
 8028a68:	d016      	beq.n	8028a98 <_vfiprintf_r+0x124>
 8028a6a:	002e      	movs	r6, r5
 8028a6c:	2100      	movs	r1, #0
 8028a6e:	200a      	movs	r0, #10
 8028a70:	68e3      	ldr	r3, [r4, #12]
 8028a72:	7832      	ldrb	r2, [r6, #0]
 8028a74:	1c75      	adds	r5, r6, #1
 8028a76:	3a30      	subs	r2, #48	@ 0x30
 8028a78:	2a09      	cmp	r2, #9
 8028a7a:	d950      	bls.n	8028b1e <_vfiprintf_r+0x1aa>
 8028a7c:	2900      	cmp	r1, #0
 8028a7e:	d111      	bne.n	8028aa4 <_vfiprintf_r+0x130>
 8028a80:	e017      	b.n	8028ab2 <_vfiprintf_r+0x13e>
 8028a82:	3601      	adds	r6, #1
 8028a84:	e7af      	b.n	80289e6 <_vfiprintf_r+0x72>
 8028a86:	9b05      	ldr	r3, [sp, #20]
 8028a88:	6822      	ldr	r2, [r4, #0]
 8028a8a:	1ac0      	subs	r0, r0, r3
 8028a8c:	2301      	movs	r3, #1
 8028a8e:	4083      	lsls	r3, r0
 8028a90:	4313      	orrs	r3, r2
 8028a92:	0035      	movs	r5, r6
 8028a94:	6023      	str	r3, [r4, #0]
 8028a96:	e7cc      	b.n	8028a32 <_vfiprintf_r+0xbe>
 8028a98:	9b07      	ldr	r3, [sp, #28]
 8028a9a:	1d19      	adds	r1, r3, #4
 8028a9c:	681b      	ldr	r3, [r3, #0]
 8028a9e:	9107      	str	r1, [sp, #28]
 8028aa0:	2b00      	cmp	r3, #0
 8028aa2:	db01      	blt.n	8028aa8 <_vfiprintf_r+0x134>
 8028aa4:	930b      	str	r3, [sp, #44]	@ 0x2c
 8028aa6:	e004      	b.n	8028ab2 <_vfiprintf_r+0x13e>
 8028aa8:	425b      	negs	r3, r3
 8028aaa:	60e3      	str	r3, [r4, #12]
 8028aac:	2302      	movs	r3, #2
 8028aae:	4313      	orrs	r3, r2
 8028ab0:	6023      	str	r3, [r4, #0]
 8028ab2:	7833      	ldrb	r3, [r6, #0]
 8028ab4:	2b2e      	cmp	r3, #46	@ 0x2e
 8028ab6:	d10c      	bne.n	8028ad2 <_vfiprintf_r+0x15e>
 8028ab8:	7873      	ldrb	r3, [r6, #1]
 8028aba:	2b2a      	cmp	r3, #42	@ 0x2a
 8028abc:	d134      	bne.n	8028b28 <_vfiprintf_r+0x1b4>
 8028abe:	9b07      	ldr	r3, [sp, #28]
 8028ac0:	3602      	adds	r6, #2
 8028ac2:	1d1a      	adds	r2, r3, #4
 8028ac4:	681b      	ldr	r3, [r3, #0]
 8028ac6:	9207      	str	r2, [sp, #28]
 8028ac8:	2b00      	cmp	r3, #0
 8028aca:	da01      	bge.n	8028ad0 <_vfiprintf_r+0x15c>
 8028acc:	2301      	movs	r3, #1
 8028ace:	425b      	negs	r3, r3
 8028ad0:	9309      	str	r3, [sp, #36]	@ 0x24
 8028ad2:	4d32      	ldr	r5, [pc, #200]	@ (8028b9c <_vfiprintf_r+0x228>)
 8028ad4:	2203      	movs	r2, #3
 8028ad6:	0028      	movs	r0, r5
 8028ad8:	7831      	ldrb	r1, [r6, #0]
 8028ada:	f7fd fdf2 	bl	80266c2 <memchr>
 8028ade:	2800      	cmp	r0, #0
 8028ae0:	d006      	beq.n	8028af0 <_vfiprintf_r+0x17c>
 8028ae2:	2340      	movs	r3, #64	@ 0x40
 8028ae4:	1b40      	subs	r0, r0, r5
 8028ae6:	4083      	lsls	r3, r0
 8028ae8:	6822      	ldr	r2, [r4, #0]
 8028aea:	3601      	adds	r6, #1
 8028aec:	4313      	orrs	r3, r2
 8028aee:	6023      	str	r3, [r4, #0]
 8028af0:	7831      	ldrb	r1, [r6, #0]
 8028af2:	2206      	movs	r2, #6
 8028af4:	482a      	ldr	r0, [pc, #168]	@ (8028ba0 <_vfiprintf_r+0x22c>)
 8028af6:	1c75      	adds	r5, r6, #1
 8028af8:	7621      	strb	r1, [r4, #24]
 8028afa:	f7fd fde2 	bl	80266c2 <memchr>
 8028afe:	2800      	cmp	r0, #0
 8028b00:	d040      	beq.n	8028b84 <_vfiprintf_r+0x210>
 8028b02:	4b28      	ldr	r3, [pc, #160]	@ (8028ba4 <_vfiprintf_r+0x230>)
 8028b04:	2b00      	cmp	r3, #0
 8028b06:	d122      	bne.n	8028b4e <_vfiprintf_r+0x1da>
 8028b08:	2207      	movs	r2, #7
 8028b0a:	9b07      	ldr	r3, [sp, #28]
 8028b0c:	3307      	adds	r3, #7
 8028b0e:	4393      	bics	r3, r2
 8028b10:	3308      	adds	r3, #8
 8028b12:	9307      	str	r3, [sp, #28]
 8028b14:	6963      	ldr	r3, [r4, #20]
 8028b16:	9a04      	ldr	r2, [sp, #16]
 8028b18:	189b      	adds	r3, r3, r2
 8028b1a:	6163      	str	r3, [r4, #20]
 8028b1c:	e762      	b.n	80289e4 <_vfiprintf_r+0x70>
 8028b1e:	4343      	muls	r3, r0
 8028b20:	002e      	movs	r6, r5
 8028b22:	2101      	movs	r1, #1
 8028b24:	189b      	adds	r3, r3, r2
 8028b26:	e7a4      	b.n	8028a72 <_vfiprintf_r+0xfe>
 8028b28:	2300      	movs	r3, #0
 8028b2a:	200a      	movs	r0, #10
 8028b2c:	0019      	movs	r1, r3
 8028b2e:	3601      	adds	r6, #1
 8028b30:	6063      	str	r3, [r4, #4]
 8028b32:	7832      	ldrb	r2, [r6, #0]
 8028b34:	1c75      	adds	r5, r6, #1
 8028b36:	3a30      	subs	r2, #48	@ 0x30
 8028b38:	2a09      	cmp	r2, #9
 8028b3a:	d903      	bls.n	8028b44 <_vfiprintf_r+0x1d0>
 8028b3c:	2b00      	cmp	r3, #0
 8028b3e:	d0c8      	beq.n	8028ad2 <_vfiprintf_r+0x15e>
 8028b40:	9109      	str	r1, [sp, #36]	@ 0x24
 8028b42:	e7c6      	b.n	8028ad2 <_vfiprintf_r+0x15e>
 8028b44:	4341      	muls	r1, r0
 8028b46:	002e      	movs	r6, r5
 8028b48:	2301      	movs	r3, #1
 8028b4a:	1889      	adds	r1, r1, r2
 8028b4c:	e7f1      	b.n	8028b32 <_vfiprintf_r+0x1be>
 8028b4e:	aa07      	add	r2, sp, #28
 8028b50:	9200      	str	r2, [sp, #0]
 8028b52:	0021      	movs	r1, r4
 8028b54:	003a      	movs	r2, r7
 8028b56:	4b14      	ldr	r3, [pc, #80]	@ (8028ba8 <_vfiprintf_r+0x234>)
 8028b58:	9803      	ldr	r0, [sp, #12]
 8028b5a:	f7fc feab 	bl	80258b4 <_printf_float>
 8028b5e:	9004      	str	r0, [sp, #16]
 8028b60:	9b04      	ldr	r3, [sp, #16]
 8028b62:	3301      	adds	r3, #1
 8028b64:	d1d6      	bne.n	8028b14 <_vfiprintf_r+0x1a0>
 8028b66:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8028b68:	07db      	lsls	r3, r3, #31
 8028b6a:	d405      	bmi.n	8028b78 <_vfiprintf_r+0x204>
 8028b6c:	89bb      	ldrh	r3, [r7, #12]
 8028b6e:	059b      	lsls	r3, r3, #22
 8028b70:	d402      	bmi.n	8028b78 <_vfiprintf_r+0x204>
 8028b72:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8028b74:	f7fd fda4 	bl	80266c0 <__retarget_lock_release_recursive>
 8028b78:	89bb      	ldrh	r3, [r7, #12]
 8028b7a:	065b      	lsls	r3, r3, #25
 8028b7c:	d500      	bpl.n	8028b80 <_vfiprintf_r+0x20c>
 8028b7e:	e71e      	b.n	80289be <_vfiprintf_r+0x4a>
 8028b80:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8028b82:	e71e      	b.n	80289c2 <_vfiprintf_r+0x4e>
 8028b84:	aa07      	add	r2, sp, #28
 8028b86:	9200      	str	r2, [sp, #0]
 8028b88:	0021      	movs	r1, r4
 8028b8a:	003a      	movs	r2, r7
 8028b8c:	4b06      	ldr	r3, [pc, #24]	@ (8028ba8 <_vfiprintf_r+0x234>)
 8028b8e:	9803      	ldr	r0, [sp, #12]
 8028b90:	f7fd f93e 	bl	8025e10 <_printf_i>
 8028b94:	e7e3      	b.n	8028b5e <_vfiprintf_r+0x1ea>
 8028b96:	46c0      	nop			@ (mov r8, r8)
 8028b98:	0802eb9c 	.word	0x0802eb9c
 8028b9c:	0802eba2 	.word	0x0802eba2
 8028ba0:	0802eba6 	.word	0x0802eba6
 8028ba4:	080258b5 	.word	0x080258b5
 8028ba8:	0802894f 	.word	0x0802894f

08028bac <__sflush_r>:
 8028bac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8028bae:	220c      	movs	r2, #12
 8028bb0:	5e8b      	ldrsh	r3, [r1, r2]
 8028bb2:	0005      	movs	r5, r0
 8028bb4:	000c      	movs	r4, r1
 8028bb6:	071a      	lsls	r2, r3, #28
 8028bb8:	d456      	bmi.n	8028c68 <__sflush_r+0xbc>
 8028bba:	684a      	ldr	r2, [r1, #4]
 8028bbc:	2a00      	cmp	r2, #0
 8028bbe:	dc02      	bgt.n	8028bc6 <__sflush_r+0x1a>
 8028bc0:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
 8028bc2:	2a00      	cmp	r2, #0
 8028bc4:	dd4e      	ble.n	8028c64 <__sflush_r+0xb8>
 8028bc6:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8028bc8:	2f00      	cmp	r7, #0
 8028bca:	d04b      	beq.n	8028c64 <__sflush_r+0xb8>
 8028bcc:	2200      	movs	r2, #0
 8028bce:	2080      	movs	r0, #128	@ 0x80
 8028bd0:	682e      	ldr	r6, [r5, #0]
 8028bd2:	602a      	str	r2, [r5, #0]
 8028bd4:	001a      	movs	r2, r3
 8028bd6:	0140      	lsls	r0, r0, #5
 8028bd8:	6a21      	ldr	r1, [r4, #32]
 8028bda:	4002      	ands	r2, r0
 8028bdc:	4203      	tst	r3, r0
 8028bde:	d033      	beq.n	8028c48 <__sflush_r+0x9c>
 8028be0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8028be2:	89a3      	ldrh	r3, [r4, #12]
 8028be4:	075b      	lsls	r3, r3, #29
 8028be6:	d506      	bpl.n	8028bf6 <__sflush_r+0x4a>
 8028be8:	6863      	ldr	r3, [r4, #4]
 8028bea:	1ad2      	subs	r2, r2, r3
 8028bec:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8028bee:	2b00      	cmp	r3, #0
 8028bf0:	d001      	beq.n	8028bf6 <__sflush_r+0x4a>
 8028bf2:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8028bf4:	1ad2      	subs	r2, r2, r3
 8028bf6:	2300      	movs	r3, #0
 8028bf8:	0028      	movs	r0, r5
 8028bfa:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8028bfc:	6a21      	ldr	r1, [r4, #32]
 8028bfe:	47b8      	blx	r7
 8028c00:	89a2      	ldrh	r2, [r4, #12]
 8028c02:	1c43      	adds	r3, r0, #1
 8028c04:	d106      	bne.n	8028c14 <__sflush_r+0x68>
 8028c06:	6829      	ldr	r1, [r5, #0]
 8028c08:	291d      	cmp	r1, #29
 8028c0a:	d846      	bhi.n	8028c9a <__sflush_r+0xee>
 8028c0c:	4b29      	ldr	r3, [pc, #164]	@ (8028cb4 <__sflush_r+0x108>)
 8028c0e:	40cb      	lsrs	r3, r1
 8028c10:	07db      	lsls	r3, r3, #31
 8028c12:	d542      	bpl.n	8028c9a <__sflush_r+0xee>
 8028c14:	2300      	movs	r3, #0
 8028c16:	6063      	str	r3, [r4, #4]
 8028c18:	6923      	ldr	r3, [r4, #16]
 8028c1a:	6023      	str	r3, [r4, #0]
 8028c1c:	04d2      	lsls	r2, r2, #19
 8028c1e:	d505      	bpl.n	8028c2c <__sflush_r+0x80>
 8028c20:	1c43      	adds	r3, r0, #1
 8028c22:	d102      	bne.n	8028c2a <__sflush_r+0x7e>
 8028c24:	682b      	ldr	r3, [r5, #0]
 8028c26:	2b00      	cmp	r3, #0
 8028c28:	d100      	bne.n	8028c2c <__sflush_r+0x80>
 8028c2a:	6560      	str	r0, [r4, #84]	@ 0x54
 8028c2c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8028c2e:	602e      	str	r6, [r5, #0]
 8028c30:	2900      	cmp	r1, #0
 8028c32:	d017      	beq.n	8028c64 <__sflush_r+0xb8>
 8028c34:	0023      	movs	r3, r4
 8028c36:	3344      	adds	r3, #68	@ 0x44
 8028c38:	4299      	cmp	r1, r3
 8028c3a:	d002      	beq.n	8028c42 <__sflush_r+0x96>
 8028c3c:	0028      	movs	r0, r5
 8028c3e:	f7fe fbd1 	bl	80273e4 <_free_r>
 8028c42:	2300      	movs	r3, #0
 8028c44:	6363      	str	r3, [r4, #52]	@ 0x34
 8028c46:	e00d      	b.n	8028c64 <__sflush_r+0xb8>
 8028c48:	2301      	movs	r3, #1
 8028c4a:	0028      	movs	r0, r5
 8028c4c:	47b8      	blx	r7
 8028c4e:	0002      	movs	r2, r0
 8028c50:	1c43      	adds	r3, r0, #1
 8028c52:	d1c6      	bne.n	8028be2 <__sflush_r+0x36>
 8028c54:	682b      	ldr	r3, [r5, #0]
 8028c56:	2b00      	cmp	r3, #0
 8028c58:	d0c3      	beq.n	8028be2 <__sflush_r+0x36>
 8028c5a:	2b1d      	cmp	r3, #29
 8028c5c:	d001      	beq.n	8028c62 <__sflush_r+0xb6>
 8028c5e:	2b16      	cmp	r3, #22
 8028c60:	d11a      	bne.n	8028c98 <__sflush_r+0xec>
 8028c62:	602e      	str	r6, [r5, #0]
 8028c64:	2000      	movs	r0, #0
 8028c66:	e01e      	b.n	8028ca6 <__sflush_r+0xfa>
 8028c68:	690e      	ldr	r6, [r1, #16]
 8028c6a:	2e00      	cmp	r6, #0
 8028c6c:	d0fa      	beq.n	8028c64 <__sflush_r+0xb8>
 8028c6e:	680f      	ldr	r7, [r1, #0]
 8028c70:	600e      	str	r6, [r1, #0]
 8028c72:	1bba      	subs	r2, r7, r6
 8028c74:	9201      	str	r2, [sp, #4]
 8028c76:	2200      	movs	r2, #0
 8028c78:	079b      	lsls	r3, r3, #30
 8028c7a:	d100      	bne.n	8028c7e <__sflush_r+0xd2>
 8028c7c:	694a      	ldr	r2, [r1, #20]
 8028c7e:	60a2      	str	r2, [r4, #8]
 8028c80:	9b01      	ldr	r3, [sp, #4]
 8028c82:	2b00      	cmp	r3, #0
 8028c84:	ddee      	ble.n	8028c64 <__sflush_r+0xb8>
 8028c86:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8028c88:	0032      	movs	r2, r6
 8028c8a:	001f      	movs	r7, r3
 8028c8c:	0028      	movs	r0, r5
 8028c8e:	9b01      	ldr	r3, [sp, #4]
 8028c90:	6a21      	ldr	r1, [r4, #32]
 8028c92:	47b8      	blx	r7
 8028c94:	2800      	cmp	r0, #0
 8028c96:	dc07      	bgt.n	8028ca8 <__sflush_r+0xfc>
 8028c98:	89a2      	ldrh	r2, [r4, #12]
 8028c9a:	2340      	movs	r3, #64	@ 0x40
 8028c9c:	2001      	movs	r0, #1
 8028c9e:	4313      	orrs	r3, r2
 8028ca0:	b21b      	sxth	r3, r3
 8028ca2:	81a3      	strh	r3, [r4, #12]
 8028ca4:	4240      	negs	r0, r0
 8028ca6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8028ca8:	9b01      	ldr	r3, [sp, #4]
 8028caa:	1836      	adds	r6, r6, r0
 8028cac:	1a1b      	subs	r3, r3, r0
 8028cae:	9301      	str	r3, [sp, #4]
 8028cb0:	e7e6      	b.n	8028c80 <__sflush_r+0xd4>
 8028cb2:	46c0      	nop			@ (mov r8, r8)
 8028cb4:	20400001 	.word	0x20400001

08028cb8 <_fflush_r>:
 8028cb8:	690b      	ldr	r3, [r1, #16]
 8028cba:	b570      	push	{r4, r5, r6, lr}
 8028cbc:	0005      	movs	r5, r0
 8028cbe:	000c      	movs	r4, r1
 8028cc0:	2b00      	cmp	r3, #0
 8028cc2:	d102      	bne.n	8028cca <_fflush_r+0x12>
 8028cc4:	2500      	movs	r5, #0
 8028cc6:	0028      	movs	r0, r5
 8028cc8:	bd70      	pop	{r4, r5, r6, pc}
 8028cca:	2800      	cmp	r0, #0
 8028ccc:	d004      	beq.n	8028cd8 <_fflush_r+0x20>
 8028cce:	6a03      	ldr	r3, [r0, #32]
 8028cd0:	2b00      	cmp	r3, #0
 8028cd2:	d101      	bne.n	8028cd8 <_fflush_r+0x20>
 8028cd4:	f7fd fa38 	bl	8026148 <__sinit>
 8028cd8:	220c      	movs	r2, #12
 8028cda:	5ea3      	ldrsh	r3, [r4, r2]
 8028cdc:	2b00      	cmp	r3, #0
 8028cde:	d0f1      	beq.n	8028cc4 <_fflush_r+0xc>
 8028ce0:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8028ce2:	07d2      	lsls	r2, r2, #31
 8028ce4:	d404      	bmi.n	8028cf0 <_fflush_r+0x38>
 8028ce6:	059b      	lsls	r3, r3, #22
 8028ce8:	d402      	bmi.n	8028cf0 <_fflush_r+0x38>
 8028cea:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8028cec:	f7fd fce7 	bl	80266be <__retarget_lock_acquire_recursive>
 8028cf0:	0028      	movs	r0, r5
 8028cf2:	0021      	movs	r1, r4
 8028cf4:	f7ff ff5a 	bl	8028bac <__sflush_r>
 8028cf8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8028cfa:	0005      	movs	r5, r0
 8028cfc:	07db      	lsls	r3, r3, #31
 8028cfe:	d4e2      	bmi.n	8028cc6 <_fflush_r+0xe>
 8028d00:	89a3      	ldrh	r3, [r4, #12]
 8028d02:	059b      	lsls	r3, r3, #22
 8028d04:	d4df      	bmi.n	8028cc6 <_fflush_r+0xe>
 8028d06:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8028d08:	f7fd fcda 	bl	80266c0 <__retarget_lock_release_recursive>
 8028d0c:	e7db      	b.n	8028cc6 <_fflush_r+0xe>
	...

08028d10 <__swhatbuf_r>:
 8028d10:	b570      	push	{r4, r5, r6, lr}
 8028d12:	000e      	movs	r6, r1
 8028d14:	001d      	movs	r5, r3
 8028d16:	230e      	movs	r3, #14
 8028d18:	5ec9      	ldrsh	r1, [r1, r3]
 8028d1a:	0014      	movs	r4, r2
 8028d1c:	b096      	sub	sp, #88	@ 0x58
 8028d1e:	2900      	cmp	r1, #0
 8028d20:	da0c      	bge.n	8028d3c <__swhatbuf_r+0x2c>
 8028d22:	89b2      	ldrh	r2, [r6, #12]
 8028d24:	2380      	movs	r3, #128	@ 0x80
 8028d26:	0011      	movs	r1, r2
 8028d28:	4019      	ands	r1, r3
 8028d2a:	421a      	tst	r2, r3
 8028d2c:	d114      	bne.n	8028d58 <__swhatbuf_r+0x48>
 8028d2e:	2380      	movs	r3, #128	@ 0x80
 8028d30:	00db      	lsls	r3, r3, #3
 8028d32:	2000      	movs	r0, #0
 8028d34:	6029      	str	r1, [r5, #0]
 8028d36:	6023      	str	r3, [r4, #0]
 8028d38:	b016      	add	sp, #88	@ 0x58
 8028d3a:	bd70      	pop	{r4, r5, r6, pc}
 8028d3c:	466a      	mov	r2, sp
 8028d3e:	f000 f865 	bl	8028e0c <_fstat_r>
 8028d42:	2800      	cmp	r0, #0
 8028d44:	dbed      	blt.n	8028d22 <__swhatbuf_r+0x12>
 8028d46:	23f0      	movs	r3, #240	@ 0xf0
 8028d48:	9901      	ldr	r1, [sp, #4]
 8028d4a:	021b      	lsls	r3, r3, #8
 8028d4c:	4019      	ands	r1, r3
 8028d4e:	4b04      	ldr	r3, [pc, #16]	@ (8028d60 <__swhatbuf_r+0x50>)
 8028d50:	18c9      	adds	r1, r1, r3
 8028d52:	424b      	negs	r3, r1
 8028d54:	4159      	adcs	r1, r3
 8028d56:	e7ea      	b.n	8028d2e <__swhatbuf_r+0x1e>
 8028d58:	2100      	movs	r1, #0
 8028d5a:	2340      	movs	r3, #64	@ 0x40
 8028d5c:	e7e9      	b.n	8028d32 <__swhatbuf_r+0x22>
 8028d5e:	46c0      	nop			@ (mov r8, r8)
 8028d60:	ffffe000 	.word	0xffffe000

08028d64 <__smakebuf_r>:
 8028d64:	b5f0      	push	{r4, r5, r6, r7, lr}
 8028d66:	2602      	movs	r6, #2
 8028d68:	898b      	ldrh	r3, [r1, #12]
 8028d6a:	0005      	movs	r5, r0
 8028d6c:	000c      	movs	r4, r1
 8028d6e:	b085      	sub	sp, #20
 8028d70:	4233      	tst	r3, r6
 8028d72:	d007      	beq.n	8028d84 <__smakebuf_r+0x20>
 8028d74:	0023      	movs	r3, r4
 8028d76:	3347      	adds	r3, #71	@ 0x47
 8028d78:	6023      	str	r3, [r4, #0]
 8028d7a:	6123      	str	r3, [r4, #16]
 8028d7c:	2301      	movs	r3, #1
 8028d7e:	6163      	str	r3, [r4, #20]
 8028d80:	b005      	add	sp, #20
 8028d82:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8028d84:	ab03      	add	r3, sp, #12
 8028d86:	aa02      	add	r2, sp, #8
 8028d88:	f7ff ffc2 	bl	8028d10 <__swhatbuf_r>
 8028d8c:	9f02      	ldr	r7, [sp, #8]
 8028d8e:	9001      	str	r0, [sp, #4]
 8028d90:	0039      	movs	r1, r7
 8028d92:	0028      	movs	r0, r5
 8028d94:	f7fe fef6 	bl	8027b84 <_malloc_r>
 8028d98:	2800      	cmp	r0, #0
 8028d9a:	d108      	bne.n	8028dae <__smakebuf_r+0x4a>
 8028d9c:	220c      	movs	r2, #12
 8028d9e:	5ea3      	ldrsh	r3, [r4, r2]
 8028da0:	059a      	lsls	r2, r3, #22
 8028da2:	d4ed      	bmi.n	8028d80 <__smakebuf_r+0x1c>
 8028da4:	2203      	movs	r2, #3
 8028da6:	4393      	bics	r3, r2
 8028da8:	431e      	orrs	r6, r3
 8028daa:	81a6      	strh	r6, [r4, #12]
 8028dac:	e7e2      	b.n	8028d74 <__smakebuf_r+0x10>
 8028dae:	2380      	movs	r3, #128	@ 0x80
 8028db0:	89a2      	ldrh	r2, [r4, #12]
 8028db2:	6020      	str	r0, [r4, #0]
 8028db4:	4313      	orrs	r3, r2
 8028db6:	81a3      	strh	r3, [r4, #12]
 8028db8:	9b03      	ldr	r3, [sp, #12]
 8028dba:	6120      	str	r0, [r4, #16]
 8028dbc:	6167      	str	r7, [r4, #20]
 8028dbe:	2b00      	cmp	r3, #0
 8028dc0:	d00c      	beq.n	8028ddc <__smakebuf_r+0x78>
 8028dc2:	0028      	movs	r0, r5
 8028dc4:	230e      	movs	r3, #14
 8028dc6:	5ee1      	ldrsh	r1, [r4, r3]
 8028dc8:	f000 f832 	bl	8028e30 <_isatty_r>
 8028dcc:	2800      	cmp	r0, #0
 8028dce:	d005      	beq.n	8028ddc <__smakebuf_r+0x78>
 8028dd0:	2303      	movs	r3, #3
 8028dd2:	89a2      	ldrh	r2, [r4, #12]
 8028dd4:	439a      	bics	r2, r3
 8028dd6:	3b02      	subs	r3, #2
 8028dd8:	4313      	orrs	r3, r2
 8028dda:	81a3      	strh	r3, [r4, #12]
 8028ddc:	89a3      	ldrh	r3, [r4, #12]
 8028dde:	9a01      	ldr	r2, [sp, #4]
 8028de0:	4313      	orrs	r3, r2
 8028de2:	81a3      	strh	r3, [r4, #12]
 8028de4:	e7cc      	b.n	8028d80 <__smakebuf_r+0x1c>

08028de6 <memmove>:
 8028de6:	b510      	push	{r4, lr}
 8028de8:	4288      	cmp	r0, r1
 8028dea:	d902      	bls.n	8028df2 <memmove+0xc>
 8028dec:	188b      	adds	r3, r1, r2
 8028dee:	4298      	cmp	r0, r3
 8028df0:	d308      	bcc.n	8028e04 <memmove+0x1e>
 8028df2:	2300      	movs	r3, #0
 8028df4:	429a      	cmp	r2, r3
 8028df6:	d007      	beq.n	8028e08 <memmove+0x22>
 8028df8:	5ccc      	ldrb	r4, [r1, r3]
 8028dfa:	54c4      	strb	r4, [r0, r3]
 8028dfc:	3301      	adds	r3, #1
 8028dfe:	e7f9      	b.n	8028df4 <memmove+0xe>
 8028e00:	5c8b      	ldrb	r3, [r1, r2]
 8028e02:	5483      	strb	r3, [r0, r2]
 8028e04:	3a01      	subs	r2, #1
 8028e06:	d2fb      	bcs.n	8028e00 <memmove+0x1a>
 8028e08:	bd10      	pop	{r4, pc}
	...

08028e0c <_fstat_r>:
 8028e0c:	2300      	movs	r3, #0
 8028e0e:	b570      	push	{r4, r5, r6, lr}
 8028e10:	4d06      	ldr	r5, [pc, #24]	@ (8028e2c <_fstat_r+0x20>)
 8028e12:	0004      	movs	r4, r0
 8028e14:	0008      	movs	r0, r1
 8028e16:	0011      	movs	r1, r2
 8028e18:	602b      	str	r3, [r5, #0]
 8028e1a:	f7ea fbbb 	bl	8013594 <_fstat>
 8028e1e:	1c43      	adds	r3, r0, #1
 8028e20:	d103      	bne.n	8028e2a <_fstat_r+0x1e>
 8028e22:	682b      	ldr	r3, [r5, #0]
 8028e24:	2b00      	cmp	r3, #0
 8028e26:	d000      	beq.n	8028e2a <_fstat_r+0x1e>
 8028e28:	6023      	str	r3, [r4, #0]
 8028e2a:	bd70      	pop	{r4, r5, r6, pc}
 8028e2c:	2000390c 	.word	0x2000390c

08028e30 <_isatty_r>:
 8028e30:	2300      	movs	r3, #0
 8028e32:	b570      	push	{r4, r5, r6, lr}
 8028e34:	4d06      	ldr	r5, [pc, #24]	@ (8028e50 <_isatty_r+0x20>)
 8028e36:	0004      	movs	r4, r0
 8028e38:	0008      	movs	r0, r1
 8028e3a:	602b      	str	r3, [r5, #0]
 8028e3c:	f7ea fbb8 	bl	80135b0 <_isatty>
 8028e40:	1c43      	adds	r3, r0, #1
 8028e42:	d103      	bne.n	8028e4c <_isatty_r+0x1c>
 8028e44:	682b      	ldr	r3, [r5, #0]
 8028e46:	2b00      	cmp	r3, #0
 8028e48:	d000      	beq.n	8028e4c <_isatty_r+0x1c>
 8028e4a:	6023      	str	r3, [r4, #0]
 8028e4c:	bd70      	pop	{r4, r5, r6, pc}
 8028e4e:	46c0      	nop			@ (mov r8, r8)
 8028e50:	2000390c 	.word	0x2000390c

08028e54 <_sbrk_r>:
 8028e54:	2300      	movs	r3, #0
 8028e56:	b570      	push	{r4, r5, r6, lr}
 8028e58:	4d06      	ldr	r5, [pc, #24]	@ (8028e74 <_sbrk_r+0x20>)
 8028e5a:	0004      	movs	r4, r0
 8028e5c:	0008      	movs	r0, r1
 8028e5e:	602b      	str	r3, [r5, #0]
 8028e60:	f7ea fbba 	bl	80135d8 <_sbrk>
 8028e64:	1c43      	adds	r3, r0, #1
 8028e66:	d103      	bne.n	8028e70 <_sbrk_r+0x1c>
 8028e68:	682b      	ldr	r3, [r5, #0]
 8028e6a:	2b00      	cmp	r3, #0
 8028e6c:	d000      	beq.n	8028e70 <_sbrk_r+0x1c>
 8028e6e:	6023      	str	r3, [r4, #0]
 8028e70:	bd70      	pop	{r4, r5, r6, pc}
 8028e72:	46c0      	nop			@ (mov r8, r8)
 8028e74:	2000390c 	.word	0x2000390c

08028e78 <__assert_func>:
 8028e78:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8028e7a:	0014      	movs	r4, r2
 8028e7c:	001a      	movs	r2, r3
 8028e7e:	4b09      	ldr	r3, [pc, #36]	@ (8028ea4 <__assert_func+0x2c>)
 8028e80:	0005      	movs	r5, r0
 8028e82:	681b      	ldr	r3, [r3, #0]
 8028e84:	000e      	movs	r6, r1
 8028e86:	68d8      	ldr	r0, [r3, #12]
 8028e88:	4b07      	ldr	r3, [pc, #28]	@ (8028ea8 <__assert_func+0x30>)
 8028e8a:	2c00      	cmp	r4, #0
 8028e8c:	d101      	bne.n	8028e92 <__assert_func+0x1a>
 8028e8e:	4b07      	ldr	r3, [pc, #28]	@ (8028eac <__assert_func+0x34>)
 8028e90:	001c      	movs	r4, r3
 8028e92:	4907      	ldr	r1, [pc, #28]	@ (8028eb0 <__assert_func+0x38>)
 8028e94:	9301      	str	r3, [sp, #4]
 8028e96:	9402      	str	r4, [sp, #8]
 8028e98:	002b      	movs	r3, r5
 8028e9a:	9600      	str	r6, [sp, #0]
 8028e9c:	f000 f868 	bl	8028f70 <fiprintf>
 8028ea0:	f000 f876 	bl	8028f90 <abort>
 8028ea4:	200003ec 	.word	0x200003ec
 8028ea8:	0802ebad 	.word	0x0802ebad
 8028eac:	0802ebe8 	.word	0x0802ebe8
 8028eb0:	0802ebba 	.word	0x0802ebba

08028eb4 <_calloc_r>:
 8028eb4:	b570      	push	{r4, r5, r6, lr}
 8028eb6:	0c0b      	lsrs	r3, r1, #16
 8028eb8:	0c15      	lsrs	r5, r2, #16
 8028eba:	2b00      	cmp	r3, #0
 8028ebc:	d11e      	bne.n	8028efc <_calloc_r+0x48>
 8028ebe:	2d00      	cmp	r5, #0
 8028ec0:	d10c      	bne.n	8028edc <_calloc_r+0x28>
 8028ec2:	b289      	uxth	r1, r1
 8028ec4:	b294      	uxth	r4, r2
 8028ec6:	434c      	muls	r4, r1
 8028ec8:	0021      	movs	r1, r4
 8028eca:	f7fe fe5b 	bl	8027b84 <_malloc_r>
 8028ece:	1e05      	subs	r5, r0, #0
 8028ed0:	d01b      	beq.n	8028f0a <_calloc_r+0x56>
 8028ed2:	0022      	movs	r2, r4
 8028ed4:	2100      	movs	r1, #0
 8028ed6:	f7fd fb23 	bl	8026520 <memset>
 8028eda:	e016      	b.n	8028f0a <_calloc_r+0x56>
 8028edc:	1c2b      	adds	r3, r5, #0
 8028ede:	1c0c      	adds	r4, r1, #0
 8028ee0:	b289      	uxth	r1, r1
 8028ee2:	b292      	uxth	r2, r2
 8028ee4:	434a      	muls	r2, r1
 8028ee6:	b29b      	uxth	r3, r3
 8028ee8:	b2a1      	uxth	r1, r4
 8028eea:	4359      	muls	r1, r3
 8028eec:	0c14      	lsrs	r4, r2, #16
 8028eee:	190c      	adds	r4, r1, r4
 8028ef0:	0c23      	lsrs	r3, r4, #16
 8028ef2:	d107      	bne.n	8028f04 <_calloc_r+0x50>
 8028ef4:	0424      	lsls	r4, r4, #16
 8028ef6:	b292      	uxth	r2, r2
 8028ef8:	4314      	orrs	r4, r2
 8028efa:	e7e5      	b.n	8028ec8 <_calloc_r+0x14>
 8028efc:	2d00      	cmp	r5, #0
 8028efe:	d101      	bne.n	8028f04 <_calloc_r+0x50>
 8028f00:	1c14      	adds	r4, r2, #0
 8028f02:	e7ed      	b.n	8028ee0 <_calloc_r+0x2c>
 8028f04:	230c      	movs	r3, #12
 8028f06:	2500      	movs	r5, #0
 8028f08:	6003      	str	r3, [r0, #0]
 8028f0a:	0028      	movs	r0, r5
 8028f0c:	bd70      	pop	{r4, r5, r6, pc}

08028f0e <_realloc_r>:
 8028f0e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8028f10:	0006      	movs	r6, r0
 8028f12:	000c      	movs	r4, r1
 8028f14:	0015      	movs	r5, r2
 8028f16:	2900      	cmp	r1, #0
 8028f18:	d105      	bne.n	8028f26 <_realloc_r+0x18>
 8028f1a:	0011      	movs	r1, r2
 8028f1c:	f7fe fe32 	bl	8027b84 <_malloc_r>
 8028f20:	0004      	movs	r4, r0
 8028f22:	0020      	movs	r0, r4
 8028f24:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8028f26:	2a00      	cmp	r2, #0
 8028f28:	d103      	bne.n	8028f32 <_realloc_r+0x24>
 8028f2a:	f7fe fa5b 	bl	80273e4 <_free_r>
 8028f2e:	002c      	movs	r4, r5
 8028f30:	e7f7      	b.n	8028f22 <_realloc_r+0x14>
 8028f32:	f000 f834 	bl	8028f9e <_malloc_usable_size_r>
 8028f36:	0007      	movs	r7, r0
 8028f38:	4285      	cmp	r5, r0
 8028f3a:	d802      	bhi.n	8028f42 <_realloc_r+0x34>
 8028f3c:	0843      	lsrs	r3, r0, #1
 8028f3e:	42ab      	cmp	r3, r5
 8028f40:	d3ef      	bcc.n	8028f22 <_realloc_r+0x14>
 8028f42:	0029      	movs	r1, r5
 8028f44:	0030      	movs	r0, r6
 8028f46:	f7fe fe1d 	bl	8027b84 <_malloc_r>
 8028f4a:	9001      	str	r0, [sp, #4]
 8028f4c:	2800      	cmp	r0, #0
 8028f4e:	d101      	bne.n	8028f54 <_realloc_r+0x46>
 8028f50:	9c01      	ldr	r4, [sp, #4]
 8028f52:	e7e6      	b.n	8028f22 <_realloc_r+0x14>
 8028f54:	002a      	movs	r2, r5
 8028f56:	42bd      	cmp	r5, r7
 8028f58:	d900      	bls.n	8028f5c <_realloc_r+0x4e>
 8028f5a:	003a      	movs	r2, r7
 8028f5c:	0021      	movs	r1, r4
 8028f5e:	9801      	ldr	r0, [sp, #4]
 8028f60:	f7fd fbba 	bl	80266d8 <memcpy>
 8028f64:	0021      	movs	r1, r4
 8028f66:	0030      	movs	r0, r6
 8028f68:	f7fe fa3c 	bl	80273e4 <_free_r>
 8028f6c:	e7f0      	b.n	8028f50 <_realloc_r+0x42>
	...

08028f70 <fiprintf>:
 8028f70:	b40e      	push	{r1, r2, r3}
 8028f72:	b517      	push	{r0, r1, r2, r4, lr}
 8028f74:	4c05      	ldr	r4, [pc, #20]	@ (8028f8c <fiprintf+0x1c>)
 8028f76:	ab05      	add	r3, sp, #20
 8028f78:	cb04      	ldmia	r3!, {r2}
 8028f7a:	0001      	movs	r1, r0
 8028f7c:	6820      	ldr	r0, [r4, #0]
 8028f7e:	9301      	str	r3, [sp, #4]
 8028f80:	f7ff fcf8 	bl	8028974 <_vfiprintf_r>
 8028f84:	bc1e      	pop	{r1, r2, r3, r4}
 8028f86:	bc08      	pop	{r3}
 8028f88:	b003      	add	sp, #12
 8028f8a:	4718      	bx	r3
 8028f8c:	200003ec 	.word	0x200003ec

08028f90 <abort>:
 8028f90:	2006      	movs	r0, #6
 8028f92:	b510      	push	{r4, lr}
 8028f94:	f000 f834 	bl	8029000 <raise>
 8028f98:	2001      	movs	r0, #1
 8028f9a:	f7ea fac7 	bl	801352c <_exit>

08028f9e <_malloc_usable_size_r>:
 8028f9e:	1f0b      	subs	r3, r1, #4
 8028fa0:	681b      	ldr	r3, [r3, #0]
 8028fa2:	1f18      	subs	r0, r3, #4
 8028fa4:	2b00      	cmp	r3, #0
 8028fa6:	da01      	bge.n	8028fac <_malloc_usable_size_r+0xe>
 8028fa8:	580b      	ldr	r3, [r1, r0]
 8028faa:	18c0      	adds	r0, r0, r3
 8028fac:	4770      	bx	lr

08028fae <_raise_r>:
 8028fae:	b570      	push	{r4, r5, r6, lr}
 8028fb0:	0004      	movs	r4, r0
 8028fb2:	000d      	movs	r5, r1
 8028fb4:	291f      	cmp	r1, #31
 8028fb6:	d904      	bls.n	8028fc2 <_raise_r+0x14>
 8028fb8:	2316      	movs	r3, #22
 8028fba:	6003      	str	r3, [r0, #0]
 8028fbc:	2001      	movs	r0, #1
 8028fbe:	4240      	negs	r0, r0
 8028fc0:	bd70      	pop	{r4, r5, r6, pc}
 8028fc2:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 8028fc4:	2b00      	cmp	r3, #0
 8028fc6:	d004      	beq.n	8028fd2 <_raise_r+0x24>
 8028fc8:	008a      	lsls	r2, r1, #2
 8028fca:	189b      	adds	r3, r3, r2
 8028fcc:	681a      	ldr	r2, [r3, #0]
 8028fce:	2a00      	cmp	r2, #0
 8028fd0:	d108      	bne.n	8028fe4 <_raise_r+0x36>
 8028fd2:	0020      	movs	r0, r4
 8028fd4:	f000 f830 	bl	8029038 <_getpid_r>
 8028fd8:	002a      	movs	r2, r5
 8028fda:	0001      	movs	r1, r0
 8028fdc:	0020      	movs	r0, r4
 8028fde:	f000 f819 	bl	8029014 <_kill_r>
 8028fe2:	e7ed      	b.n	8028fc0 <_raise_r+0x12>
 8028fe4:	2a01      	cmp	r2, #1
 8028fe6:	d009      	beq.n	8028ffc <_raise_r+0x4e>
 8028fe8:	1c51      	adds	r1, r2, #1
 8028fea:	d103      	bne.n	8028ff4 <_raise_r+0x46>
 8028fec:	2316      	movs	r3, #22
 8028fee:	6003      	str	r3, [r0, #0]
 8028ff0:	2001      	movs	r0, #1
 8028ff2:	e7e5      	b.n	8028fc0 <_raise_r+0x12>
 8028ff4:	2100      	movs	r1, #0
 8028ff6:	0028      	movs	r0, r5
 8028ff8:	6019      	str	r1, [r3, #0]
 8028ffa:	4790      	blx	r2
 8028ffc:	2000      	movs	r0, #0
 8028ffe:	e7df      	b.n	8028fc0 <_raise_r+0x12>

08029000 <raise>:
 8029000:	b510      	push	{r4, lr}
 8029002:	4b03      	ldr	r3, [pc, #12]	@ (8029010 <raise+0x10>)
 8029004:	0001      	movs	r1, r0
 8029006:	6818      	ldr	r0, [r3, #0]
 8029008:	f7ff ffd1 	bl	8028fae <_raise_r>
 802900c:	bd10      	pop	{r4, pc}
 802900e:	46c0      	nop			@ (mov r8, r8)
 8029010:	200003ec 	.word	0x200003ec

08029014 <_kill_r>:
 8029014:	2300      	movs	r3, #0
 8029016:	b570      	push	{r4, r5, r6, lr}
 8029018:	4d06      	ldr	r5, [pc, #24]	@ (8029034 <_kill_r+0x20>)
 802901a:	0004      	movs	r4, r0
 802901c:	0008      	movs	r0, r1
 802901e:	0011      	movs	r1, r2
 8029020:	602b      	str	r3, [r5, #0]
 8029022:	f7ea fa73 	bl	801350c <_kill>
 8029026:	1c43      	adds	r3, r0, #1
 8029028:	d103      	bne.n	8029032 <_kill_r+0x1e>
 802902a:	682b      	ldr	r3, [r5, #0]
 802902c:	2b00      	cmp	r3, #0
 802902e:	d000      	beq.n	8029032 <_kill_r+0x1e>
 8029030:	6023      	str	r3, [r4, #0]
 8029032:	bd70      	pop	{r4, r5, r6, pc}
 8029034:	2000390c 	.word	0x2000390c

08029038 <_getpid_r>:
 8029038:	b510      	push	{r4, lr}
 802903a:	f7ea fa61 	bl	8013500 <_getpid>
 802903e:	bd10      	pop	{r4, pc}

08029040 <log>:
 8029040:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8029042:	0004      	movs	r4, r0
 8029044:	000d      	movs	r5, r1
 8029046:	f000 f98d 	bl	8029364 <__ieee754_log>
 802904a:	0022      	movs	r2, r4
 802904c:	0006      	movs	r6, r0
 802904e:	000f      	movs	r7, r1
 8029050:	002b      	movs	r3, r5
 8029052:	0020      	movs	r0, r4
 8029054:	0029      	movs	r1, r5
 8029056:	f7da fb6d 	bl	8003734 <__aeabi_dcmpun>
 802905a:	2800      	cmp	r0, #0
 802905c:	d115      	bne.n	802908a <log+0x4a>
 802905e:	2200      	movs	r2, #0
 8029060:	2300      	movs	r3, #0
 8029062:	0020      	movs	r0, r4
 8029064:	0029      	movs	r1, r5
 8029066:	f7d7 fa3d 	bl	80004e4 <__aeabi_dcmpgt>
 802906a:	2800      	cmp	r0, #0
 802906c:	d10d      	bne.n	802908a <log+0x4a>
 802906e:	2200      	movs	r2, #0
 8029070:	2300      	movs	r3, #0
 8029072:	0020      	movs	r0, r4
 8029074:	0029      	movs	r1, r5
 8029076:	f7d7 fa1b 	bl	80004b0 <__aeabi_dcmpeq>
 802907a:	2800      	cmp	r0, #0
 802907c:	d008      	beq.n	8029090 <log+0x50>
 802907e:	f7fd faf3 	bl	8026668 <__errno>
 8029082:	2322      	movs	r3, #34	@ 0x22
 8029084:	2600      	movs	r6, #0
 8029086:	4f07      	ldr	r7, [pc, #28]	@ (80290a4 <log+0x64>)
 8029088:	6003      	str	r3, [r0, #0]
 802908a:	0030      	movs	r0, r6
 802908c:	0039      	movs	r1, r7
 802908e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8029090:	f7fd faea 	bl	8026668 <__errno>
 8029094:	2321      	movs	r3, #33	@ 0x21
 8029096:	6003      	str	r3, [r0, #0]
 8029098:	4803      	ldr	r0, [pc, #12]	@ (80290a8 <log+0x68>)
 802909a:	f7fd fb27 	bl	80266ec <nan>
 802909e:	0006      	movs	r6, r0
 80290a0:	000f      	movs	r7, r1
 80290a2:	e7f2      	b.n	802908a <log+0x4a>
 80290a4:	fff00000 	.word	0xfff00000
 80290a8:	0802ebe8 	.word	0x0802ebe8

080290ac <pow>:
 80290ac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80290ae:	0014      	movs	r4, r2
 80290b0:	001d      	movs	r5, r3
 80290b2:	9000      	str	r0, [sp, #0]
 80290b4:	9101      	str	r1, [sp, #4]
 80290b6:	f000 fb07 	bl	80296c8 <__ieee754_pow>
 80290ba:	0022      	movs	r2, r4
 80290bc:	0006      	movs	r6, r0
 80290be:	000f      	movs	r7, r1
 80290c0:	002b      	movs	r3, r5
 80290c2:	0020      	movs	r0, r4
 80290c4:	0029      	movs	r1, r5
 80290c6:	f7da fb35 	bl	8003734 <__aeabi_dcmpun>
 80290ca:	2800      	cmp	r0, #0
 80290cc:	d13f      	bne.n	802914e <pow+0xa2>
 80290ce:	9800      	ldr	r0, [sp, #0]
 80290d0:	9901      	ldr	r1, [sp, #4]
 80290d2:	2200      	movs	r2, #0
 80290d4:	2300      	movs	r3, #0
 80290d6:	f7d7 f9eb 	bl	80004b0 <__aeabi_dcmpeq>
 80290da:	2800      	cmp	r0, #0
 80290dc:	d019      	beq.n	8029112 <pow+0x66>
 80290de:	2200      	movs	r2, #0
 80290e0:	2300      	movs	r3, #0
 80290e2:	0020      	movs	r0, r4
 80290e4:	0029      	movs	r1, r5
 80290e6:	f7d7 f9e3 	bl	80004b0 <__aeabi_dcmpeq>
 80290ea:	2800      	cmp	r0, #0
 80290ec:	d146      	bne.n	802917c <pow+0xd0>
 80290ee:	0020      	movs	r0, r4
 80290f0:	0029      	movs	r1, r5
 80290f2:	f000 f88d 	bl	8029210 <finite>
 80290f6:	2800      	cmp	r0, #0
 80290f8:	d029      	beq.n	802914e <pow+0xa2>
 80290fa:	2200      	movs	r2, #0
 80290fc:	2300      	movs	r3, #0
 80290fe:	0020      	movs	r0, r4
 8029100:	0029      	movs	r1, r5
 8029102:	f7d7 f9db 	bl	80004bc <__aeabi_dcmplt>
 8029106:	2800      	cmp	r0, #0
 8029108:	d021      	beq.n	802914e <pow+0xa2>
 802910a:	f7fd faad 	bl	8026668 <__errno>
 802910e:	2322      	movs	r3, #34	@ 0x22
 8029110:	e01c      	b.n	802914c <pow+0xa0>
 8029112:	0030      	movs	r0, r6
 8029114:	0039      	movs	r1, r7
 8029116:	f000 f87b 	bl	8029210 <finite>
 802911a:	2800      	cmp	r0, #0
 802911c:	d11b      	bne.n	8029156 <pow+0xaa>
 802911e:	9800      	ldr	r0, [sp, #0]
 8029120:	9901      	ldr	r1, [sp, #4]
 8029122:	f000 f875 	bl	8029210 <finite>
 8029126:	2800      	cmp	r0, #0
 8029128:	d015      	beq.n	8029156 <pow+0xaa>
 802912a:	0020      	movs	r0, r4
 802912c:	0029      	movs	r1, r5
 802912e:	f000 f86f 	bl	8029210 <finite>
 8029132:	2800      	cmp	r0, #0
 8029134:	d00f      	beq.n	8029156 <pow+0xaa>
 8029136:	0032      	movs	r2, r6
 8029138:	003b      	movs	r3, r7
 802913a:	0030      	movs	r0, r6
 802913c:	0039      	movs	r1, r7
 802913e:	f7da faf9 	bl	8003734 <__aeabi_dcmpun>
 8029142:	2800      	cmp	r0, #0
 8029144:	d0e1      	beq.n	802910a <pow+0x5e>
 8029146:	f7fd fa8f 	bl	8026668 <__errno>
 802914a:	2321      	movs	r3, #33	@ 0x21
 802914c:	6003      	str	r3, [r0, #0]
 802914e:	0030      	movs	r0, r6
 8029150:	0039      	movs	r1, r7
 8029152:	b003      	add	sp, #12
 8029154:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8029156:	2200      	movs	r2, #0
 8029158:	2300      	movs	r3, #0
 802915a:	0030      	movs	r0, r6
 802915c:	0039      	movs	r1, r7
 802915e:	f7d7 f9a7 	bl	80004b0 <__aeabi_dcmpeq>
 8029162:	2800      	cmp	r0, #0
 8029164:	d0f3      	beq.n	802914e <pow+0xa2>
 8029166:	9800      	ldr	r0, [sp, #0]
 8029168:	9901      	ldr	r1, [sp, #4]
 802916a:	f000 f851 	bl	8029210 <finite>
 802916e:	2800      	cmp	r0, #0
 8029170:	d0ed      	beq.n	802914e <pow+0xa2>
 8029172:	0020      	movs	r0, r4
 8029174:	0029      	movs	r1, r5
 8029176:	f000 f84b 	bl	8029210 <finite>
 802917a:	e7c4      	b.n	8029106 <pow+0x5a>
 802917c:	2600      	movs	r6, #0
 802917e:	4f01      	ldr	r7, [pc, #4]	@ (8029184 <pow+0xd8>)
 8029180:	e7e5      	b.n	802914e <pow+0xa2>
 8029182:	46c0      	nop			@ (mov r8, r8)
 8029184:	3ff00000 	.word	0x3ff00000

08029188 <expf>:
 8029188:	b570      	push	{r4, r5, r6, lr}
 802918a:	1c04      	adds	r4, r0, #0
 802918c:	f000 ffb8 	bl	802a100 <__ieee754_expf>
 8029190:	1c05      	adds	r5, r0, #0
 8029192:	1c20      	adds	r0, r4, #0
 8029194:	f000 f844 	bl	8029220 <finitef>
 8029198:	2800      	cmp	r0, #0
 802919a:	d00b      	beq.n	80291b4 <expf+0x2c>
 802919c:	490c      	ldr	r1, [pc, #48]	@ (80291d0 <expf+0x48>)
 802919e:	1c20      	adds	r0, r4, #0
 80291a0:	f7d7 f9da 	bl	8000558 <__aeabi_fcmpgt>
 80291a4:	2800      	cmp	r0, #0
 80291a6:	d007      	beq.n	80291b8 <expf+0x30>
 80291a8:	f7fd fa5e 	bl	8026668 <__errno>
 80291ac:	25ff      	movs	r5, #255	@ 0xff
 80291ae:	2322      	movs	r3, #34	@ 0x22
 80291b0:	05ed      	lsls	r5, r5, #23
 80291b2:	6003      	str	r3, [r0, #0]
 80291b4:	1c28      	adds	r0, r5, #0
 80291b6:	bd70      	pop	{r4, r5, r6, pc}
 80291b8:	4906      	ldr	r1, [pc, #24]	@ (80291d4 <expf+0x4c>)
 80291ba:	1c20      	adds	r0, r4, #0
 80291bc:	f7d7 f9b8 	bl	8000530 <__aeabi_fcmplt>
 80291c0:	2800      	cmp	r0, #0
 80291c2:	d0f7      	beq.n	80291b4 <expf+0x2c>
 80291c4:	f7fd fa50 	bl	8026668 <__errno>
 80291c8:	2322      	movs	r3, #34	@ 0x22
 80291ca:	2500      	movs	r5, #0
 80291cc:	6003      	str	r3, [r0, #0]
 80291ce:	e7f1      	b.n	80291b4 <expf+0x2c>
 80291d0:	42b17217 	.word	0x42b17217
 80291d4:	c2cff1b5 	.word	0xc2cff1b5

080291d8 <sqrtf>:
 80291d8:	b570      	push	{r4, r5, r6, lr}
 80291da:	1c05      	adds	r5, r0, #0
 80291dc:	f000 f82a 	bl	8029234 <__ieee754_sqrtf>
 80291e0:	1c29      	adds	r1, r5, #0
 80291e2:	1c04      	adds	r4, r0, #0
 80291e4:	1c28      	adds	r0, r5, #0
 80291e6:	f7d8 fae9 	bl	80017bc <__aeabi_fcmpun>
 80291ea:	2800      	cmp	r0, #0
 80291ec:	d10e      	bne.n	802920c <sqrtf+0x34>
 80291ee:	2100      	movs	r1, #0
 80291f0:	1c28      	adds	r0, r5, #0
 80291f2:	f7d7 f99d 	bl	8000530 <__aeabi_fcmplt>
 80291f6:	2800      	cmp	r0, #0
 80291f8:	d008      	beq.n	802920c <sqrtf+0x34>
 80291fa:	f7fd fa35 	bl	8026668 <__errno>
 80291fe:	2321      	movs	r3, #33	@ 0x21
 8029200:	2100      	movs	r1, #0
 8029202:	6003      	str	r3, [r0, #0]
 8029204:	1c08      	adds	r0, r1, #0
 8029206:	f7d7 fd4d 	bl	8000ca4 <__aeabi_fdiv>
 802920a:	1c04      	adds	r4, r0, #0
 802920c:	1c20      	adds	r0, r4, #0
 802920e:	bd70      	pop	{r4, r5, r6, pc}

08029210 <finite>:
 8029210:	4b02      	ldr	r3, [pc, #8]	@ (802921c <finite+0xc>)
 8029212:	0048      	lsls	r0, r1, #1
 8029214:	0840      	lsrs	r0, r0, #1
 8029216:	18c0      	adds	r0, r0, r3
 8029218:	0fc0      	lsrs	r0, r0, #31
 802921a:	4770      	bx	lr
 802921c:	80100000 	.word	0x80100000

08029220 <finitef>:
 8029220:	22ff      	movs	r2, #255	@ 0xff
 8029222:	0043      	lsls	r3, r0, #1
 8029224:	085b      	lsrs	r3, r3, #1
 8029226:	2001      	movs	r0, #1
 8029228:	05d2      	lsls	r2, r2, #23
 802922a:	4293      	cmp	r3, r2
 802922c:	db00      	blt.n	8029230 <finitef+0x10>
 802922e:	2000      	movs	r0, #0
 8029230:	4770      	bx	lr
	...

08029234 <__ieee754_sqrtf>:
 8029234:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8029236:	21ff      	movs	r1, #255	@ 0xff
 8029238:	0042      	lsls	r2, r0, #1
 802923a:	0003      	movs	r3, r0
 802923c:	1c04      	adds	r4, r0, #0
 802923e:	0852      	lsrs	r2, r2, #1
 8029240:	05c9      	lsls	r1, r1, #23
 8029242:	428a      	cmp	r2, r1
 8029244:	d309      	bcc.n	802925a <__ieee754_sqrtf+0x26>
 8029246:	1c01      	adds	r1, r0, #0
 8029248:	f7d7 fefa 	bl	8001040 <__aeabi_fmul>
 802924c:	1c01      	adds	r1, r0, #0
 802924e:	1c20      	adds	r0, r4, #0
 8029250:	f7d7 fb36 	bl	80008c0 <__aeabi_fadd>
 8029254:	1c04      	adds	r4, r0, #0
 8029256:	1c20      	adds	r0, r4, #0
 8029258:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 802925a:	2a00      	cmp	r2, #0
 802925c:	d0fb      	beq.n	8029256 <__ieee754_sqrtf+0x22>
 802925e:	2800      	cmp	r0, #0
 8029260:	da06      	bge.n	8029270 <__ieee754_sqrtf+0x3c>
 8029262:	1c01      	adds	r1, r0, #0
 8029264:	f7d8 f846 	bl	80012f4 <__aeabi_fsub>
 8029268:	1c01      	adds	r1, r0, #0
 802926a:	f7d7 fd1b 	bl	8000ca4 <__aeabi_fdiv>
 802926e:	e7f1      	b.n	8029254 <__ieee754_sqrtf+0x20>
 8029270:	0002      	movs	r2, r0
 8029272:	400a      	ands	r2, r1
 8029274:	4208      	tst	r0, r1
 8029276:	d040      	beq.n	80292fa <__ieee754_sqrtf+0xc6>
 8029278:	15c1      	asrs	r1, r0, #23
 802927a:	2280      	movs	r2, #128	@ 0x80
 802927c:	000f      	movs	r7, r1
 802927e:	025b      	lsls	r3, r3, #9
 8029280:	0a5b      	lsrs	r3, r3, #9
 8029282:	0412      	lsls	r2, r2, #16
 8029284:	3f7f      	subs	r7, #127	@ 0x7f
 8029286:	4313      	orrs	r3, r2
 8029288:	07c9      	lsls	r1, r1, #31
 802928a:	d400      	bmi.n	802928e <__ieee754_sqrtf+0x5a>
 802928c:	005b      	lsls	r3, r3, #1
 802928e:	2400      	movs	r4, #0
 8029290:	2180      	movs	r1, #128	@ 0x80
 8029292:	2019      	movs	r0, #25
 8029294:	0026      	movs	r6, r4
 8029296:	107f      	asrs	r7, r7, #1
 8029298:	005b      	lsls	r3, r3, #1
 802929a:	0449      	lsls	r1, r1, #17
 802929c:	1875      	adds	r5, r6, r1
 802929e:	001a      	movs	r2, r3
 80292a0:	429d      	cmp	r5, r3
 80292a2:	dc02      	bgt.n	80292aa <__ieee754_sqrtf+0x76>
 80292a4:	186e      	adds	r6, r5, r1
 80292a6:	1b5a      	subs	r2, r3, r5
 80292a8:	1864      	adds	r4, r4, r1
 80292aa:	3801      	subs	r0, #1
 80292ac:	0053      	lsls	r3, r2, #1
 80292ae:	0849      	lsrs	r1, r1, #1
 80292b0:	2800      	cmp	r0, #0
 80292b2:	d1f3      	bne.n	802929c <__ieee754_sqrtf+0x68>
 80292b4:	2a00      	cmp	r2, #0
 80292b6:	d019      	beq.n	80292ec <__ieee754_sqrtf+0xb8>
 80292b8:	4d16      	ldr	r5, [pc, #88]	@ (8029314 <__ieee754_sqrtf+0xe0>)
 80292ba:	4e17      	ldr	r6, [pc, #92]	@ (8029318 <__ieee754_sqrtf+0xe4>)
 80292bc:	6828      	ldr	r0, [r5, #0]
 80292be:	6831      	ldr	r1, [r6, #0]
 80292c0:	682b      	ldr	r3, [r5, #0]
 80292c2:	9301      	str	r3, [sp, #4]
 80292c4:	f7d8 f816 	bl	80012f4 <__aeabi_fsub>
 80292c8:	1c01      	adds	r1, r0, #0
 80292ca:	9801      	ldr	r0, [sp, #4]
 80292cc:	f7d7 f93a 	bl	8000544 <__aeabi_fcmple>
 80292d0:	2800      	cmp	r0, #0
 80292d2:	d00b      	beq.n	80292ec <__ieee754_sqrtf+0xb8>
 80292d4:	6828      	ldr	r0, [r5, #0]
 80292d6:	6831      	ldr	r1, [r6, #0]
 80292d8:	f7d7 faf2 	bl	80008c0 <__aeabi_fadd>
 80292dc:	682d      	ldr	r5, [r5, #0]
 80292de:	1c01      	adds	r1, r0, #0
 80292e0:	1c28      	adds	r0, r5, #0
 80292e2:	f7d7 f925 	bl	8000530 <__aeabi_fcmplt>
 80292e6:	2800      	cmp	r0, #0
 80292e8:	d010      	beq.n	802930c <__ieee754_sqrtf+0xd8>
 80292ea:	3402      	adds	r4, #2
 80292ec:	23fc      	movs	r3, #252	@ 0xfc
 80292ee:	1064      	asrs	r4, r4, #1
 80292f0:	059b      	lsls	r3, r3, #22
 80292f2:	18e3      	adds	r3, r4, r3
 80292f4:	05fc      	lsls	r4, r7, #23
 80292f6:	18e4      	adds	r4, r4, r3
 80292f8:	e7ad      	b.n	8029256 <__ieee754_sqrtf+0x22>
 80292fa:	2080      	movs	r0, #128	@ 0x80
 80292fc:	0400      	lsls	r0, r0, #16
 80292fe:	005b      	lsls	r3, r3, #1
 8029300:	0011      	movs	r1, r2
 8029302:	3201      	adds	r2, #1
 8029304:	4203      	tst	r3, r0
 8029306:	d0fa      	beq.n	80292fe <__ieee754_sqrtf+0xca>
 8029308:	4249      	negs	r1, r1
 802930a:	e7b6      	b.n	802927a <__ieee754_sqrtf+0x46>
 802930c:	2301      	movs	r3, #1
 802930e:	3401      	adds	r4, #1
 8029310:	439c      	bics	r4, r3
 8029312:	e7eb      	b.n	80292ec <__ieee754_sqrtf+0xb8>
 8029314:	0802ee44 	.word	0x0802ee44
 8029318:	0802ee40 	.word	0x0802ee40

0802931c <roundf>:
 802931c:	0dc3      	lsrs	r3, r0, #23
 802931e:	b2db      	uxtb	r3, r3
 8029320:	3b7f      	subs	r3, #127	@ 0x7f
 8029322:	0002      	movs	r2, r0
 8029324:	b510      	push	{r4, lr}
 8029326:	2b16      	cmp	r3, #22
 8029328:	dc13      	bgt.n	8029352 <roundf+0x36>
 802932a:	2b00      	cmp	r3, #0
 802932c:	da07      	bge.n	802933e <roundf+0x22>
 802932e:	0fc2      	lsrs	r2, r0, #31
 8029330:	07d0      	lsls	r0, r2, #31
 8029332:	3301      	adds	r3, #1
 8029334:	d102      	bne.n	802933c <roundf+0x20>
 8029336:	23fe      	movs	r3, #254	@ 0xfe
 8029338:	059b      	lsls	r3, r3, #22
 802933a:	4318      	orrs	r0, r3
 802933c:	bd10      	pop	{r4, pc}
 802933e:	4908      	ldr	r1, [pc, #32]	@ (8029360 <roundf+0x44>)
 8029340:	4119      	asrs	r1, r3
 8029342:	4208      	tst	r0, r1
 8029344:	d0fa      	beq.n	802933c <roundf+0x20>
 8029346:	2080      	movs	r0, #128	@ 0x80
 8029348:	03c0      	lsls	r0, r0, #15
 802934a:	4118      	asrs	r0, r3
 802934c:	1880      	adds	r0, r0, r2
 802934e:	4388      	bics	r0, r1
 8029350:	e7f4      	b.n	802933c <roundf+0x20>
 8029352:	2b80      	cmp	r3, #128	@ 0x80
 8029354:	d1f2      	bne.n	802933c <roundf+0x20>
 8029356:	1c01      	adds	r1, r0, #0
 8029358:	f7d7 fab2 	bl	80008c0 <__aeabi_fadd>
 802935c:	e7ee      	b.n	802933c <roundf+0x20>
 802935e:	46c0      	nop			@ (mov r8, r8)
 8029360:	007fffff 	.word	0x007fffff

08029364 <__ieee754_log>:
 8029364:	2380      	movs	r3, #128	@ 0x80
 8029366:	b5f0      	push	{r4, r5, r6, r7, lr}
 8029368:	035b      	lsls	r3, r3, #13
 802936a:	000e      	movs	r6, r1
 802936c:	b08d      	sub	sp, #52	@ 0x34
 802936e:	4299      	cmp	r1, r3
 8029370:	da23      	bge.n	80293ba <__ieee754_log+0x56>
 8029372:	004b      	lsls	r3, r1, #1
 8029374:	085b      	lsrs	r3, r3, #1
 8029376:	4303      	orrs	r3, r0
 8029378:	d107      	bne.n	802938a <__ieee754_log+0x26>
 802937a:	2200      	movs	r2, #0
 802937c:	2300      	movs	r3, #0
 802937e:	2000      	movs	r0, #0
 8029380:	49b4      	ldr	r1, [pc, #720]	@ (8029654 <__ieee754_log+0x2f0>)
 8029382:	f7d8 fead 	bl	80020e0 <__aeabi_ddiv>
 8029386:	b00d      	add	sp, #52	@ 0x34
 8029388:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802938a:	2900      	cmp	r1, #0
 802938c:	da06      	bge.n	802939c <__ieee754_log+0x38>
 802938e:	0002      	movs	r2, r0
 8029390:	000b      	movs	r3, r1
 8029392:	f7d9 fdc5 	bl	8002f20 <__aeabi_dsub>
 8029396:	2200      	movs	r2, #0
 8029398:	2300      	movs	r3, #0
 802939a:	e7f2      	b.n	8029382 <__ieee754_log+0x1e>
 802939c:	4bae      	ldr	r3, [pc, #696]	@ (8029658 <__ieee754_log+0x2f4>)
 802939e:	2200      	movs	r2, #0
 80293a0:	f7d9 fad8 	bl	8002954 <__aeabi_dmul>
 80293a4:	2336      	movs	r3, #54	@ 0x36
 80293a6:	000e      	movs	r6, r1
 80293a8:	425b      	negs	r3, r3
 80293aa:	4aac      	ldr	r2, [pc, #688]	@ (802965c <__ieee754_log+0x2f8>)
 80293ac:	4296      	cmp	r6, r2
 80293ae:	dd06      	ble.n	80293be <__ieee754_log+0x5a>
 80293b0:	0002      	movs	r2, r0
 80293b2:	000b      	movs	r3, r1
 80293b4:	f7d8 face 	bl	8001954 <__aeabi_dadd>
 80293b8:	e7e5      	b.n	8029386 <__ieee754_log+0x22>
 80293ba:	2300      	movs	r3, #0
 80293bc:	e7f5      	b.n	80293aa <__ieee754_log+0x46>
 80293be:	4ca8      	ldr	r4, [pc, #672]	@ (8029660 <__ieee754_log+0x2fc>)
 80293c0:	1532      	asrs	r2, r6, #20
 80293c2:	1912      	adds	r2, r2, r4
 80293c4:	0336      	lsls	r6, r6, #12
 80293c6:	4ca7      	ldr	r4, [pc, #668]	@ (8029664 <__ieee754_log+0x300>)
 80293c8:	18d2      	adds	r2, r2, r3
 80293ca:	0b33      	lsrs	r3, r6, #12
 80293cc:	9302      	str	r3, [sp, #8]
 80293ce:	191b      	adds	r3, r3, r4
 80293d0:	2480      	movs	r4, #128	@ 0x80
 80293d2:	0364      	lsls	r4, r4, #13
 80293d4:	4023      	ands	r3, r4
 80293d6:	4ca4      	ldr	r4, [pc, #656]	@ (8029668 <__ieee754_log+0x304>)
 80293d8:	9d02      	ldr	r5, [sp, #8]
 80293da:	405c      	eors	r4, r3
 80293dc:	151b      	asrs	r3, r3, #20
 80293de:	189b      	adds	r3, r3, r2
 80293e0:	4325      	orrs	r5, r4
 80293e2:	2200      	movs	r2, #0
 80293e4:	9300      	str	r3, [sp, #0]
 80293e6:	0029      	movs	r1, r5
 80293e8:	4b9f      	ldr	r3, [pc, #636]	@ (8029668 <__ieee754_log+0x304>)
 80293ea:	f7d9 fd99 	bl	8002f20 <__aeabi_dsub>
 80293ee:	9b02      	ldr	r3, [sp, #8]
 80293f0:	0006      	movs	r6, r0
 80293f2:	3302      	adds	r3, #2
 80293f4:	031b      	lsls	r3, r3, #12
 80293f6:	000f      	movs	r7, r1
 80293f8:	2200      	movs	r2, #0
 80293fa:	0b1b      	lsrs	r3, r3, #12
 80293fc:	2b02      	cmp	r3, #2
 80293fe:	dc64      	bgt.n	80294ca <__ieee754_log+0x166>
 8029400:	2300      	movs	r3, #0
 8029402:	f7d7 f855 	bl	80004b0 <__aeabi_dcmpeq>
 8029406:	2800      	cmp	r0, #0
 8029408:	d019      	beq.n	802943e <__ieee754_log+0xda>
 802940a:	9b00      	ldr	r3, [sp, #0]
 802940c:	2b00      	cmp	r3, #0
 802940e:	d100      	bne.n	8029412 <__ieee754_log+0xae>
 8029410:	e11c      	b.n	802964c <__ieee754_log+0x2e8>
 8029412:	0018      	movs	r0, r3
 8029414:	f7da f9ec 	bl	80037f0 <__aeabi_i2d>
 8029418:	4a94      	ldr	r2, [pc, #592]	@ (802966c <__ieee754_log+0x308>)
 802941a:	4b95      	ldr	r3, [pc, #596]	@ (8029670 <__ieee754_log+0x30c>)
 802941c:	0004      	movs	r4, r0
 802941e:	000d      	movs	r5, r1
 8029420:	f7d9 fa98 	bl	8002954 <__aeabi_dmul>
 8029424:	4a93      	ldr	r2, [pc, #588]	@ (8029674 <__ieee754_log+0x310>)
 8029426:	0006      	movs	r6, r0
 8029428:	000f      	movs	r7, r1
 802942a:	4b93      	ldr	r3, [pc, #588]	@ (8029678 <__ieee754_log+0x314>)
 802942c:	0020      	movs	r0, r4
 802942e:	0029      	movs	r1, r5
 8029430:	f7d9 fa90 	bl	8002954 <__aeabi_dmul>
 8029434:	0002      	movs	r2, r0
 8029436:	000b      	movs	r3, r1
 8029438:	0030      	movs	r0, r6
 802943a:	0039      	movs	r1, r7
 802943c:	e7ba      	b.n	80293b4 <__ieee754_log+0x50>
 802943e:	4a8f      	ldr	r2, [pc, #572]	@ (802967c <__ieee754_log+0x318>)
 8029440:	4b8f      	ldr	r3, [pc, #572]	@ (8029680 <__ieee754_log+0x31c>)
 8029442:	0030      	movs	r0, r6
 8029444:	0039      	movs	r1, r7
 8029446:	f7d9 fa85 	bl	8002954 <__aeabi_dmul>
 802944a:	0002      	movs	r2, r0
 802944c:	000b      	movs	r3, r1
 802944e:	2000      	movs	r0, #0
 8029450:	498c      	ldr	r1, [pc, #560]	@ (8029684 <__ieee754_log+0x320>)
 8029452:	f7d9 fd65 	bl	8002f20 <__aeabi_dsub>
 8029456:	0032      	movs	r2, r6
 8029458:	0004      	movs	r4, r0
 802945a:	000d      	movs	r5, r1
 802945c:	003b      	movs	r3, r7
 802945e:	0030      	movs	r0, r6
 8029460:	0039      	movs	r1, r7
 8029462:	f7d9 fa77 	bl	8002954 <__aeabi_dmul>
 8029466:	000b      	movs	r3, r1
 8029468:	0002      	movs	r2, r0
 802946a:	0029      	movs	r1, r5
 802946c:	0020      	movs	r0, r4
 802946e:	f7d9 fa71 	bl	8002954 <__aeabi_dmul>
 8029472:	9b00      	ldr	r3, [sp, #0]
 8029474:	9002      	str	r0, [sp, #8]
 8029476:	9103      	str	r1, [sp, #12]
 8029478:	2b00      	cmp	r3, #0
 802947a:	d106      	bne.n	802948a <__ieee754_log+0x126>
 802947c:	0002      	movs	r2, r0
 802947e:	000b      	movs	r3, r1
 8029480:	0030      	movs	r0, r6
 8029482:	0039      	movs	r1, r7
 8029484:	f7d9 fd4c 	bl	8002f20 <__aeabi_dsub>
 8029488:	e77d      	b.n	8029386 <__ieee754_log+0x22>
 802948a:	9800      	ldr	r0, [sp, #0]
 802948c:	f7da f9b0 	bl	80037f0 <__aeabi_i2d>
 8029490:	4a76      	ldr	r2, [pc, #472]	@ (802966c <__ieee754_log+0x308>)
 8029492:	4b77      	ldr	r3, [pc, #476]	@ (8029670 <__ieee754_log+0x30c>)
 8029494:	0004      	movs	r4, r0
 8029496:	000d      	movs	r5, r1
 8029498:	f7d9 fa5c 	bl	8002954 <__aeabi_dmul>
 802949c:	4a75      	ldr	r2, [pc, #468]	@ (8029674 <__ieee754_log+0x310>)
 802949e:	9000      	str	r0, [sp, #0]
 80294a0:	9101      	str	r1, [sp, #4]
 80294a2:	4b75      	ldr	r3, [pc, #468]	@ (8029678 <__ieee754_log+0x314>)
 80294a4:	0020      	movs	r0, r4
 80294a6:	0029      	movs	r1, r5
 80294a8:	f7d9 fa54 	bl	8002954 <__aeabi_dmul>
 80294ac:	0002      	movs	r2, r0
 80294ae:	000b      	movs	r3, r1
 80294b0:	9802      	ldr	r0, [sp, #8]
 80294b2:	9903      	ldr	r1, [sp, #12]
 80294b4:	f7d9 fd34 	bl	8002f20 <__aeabi_dsub>
 80294b8:	0032      	movs	r2, r6
 80294ba:	003b      	movs	r3, r7
 80294bc:	f7d9 fd30 	bl	8002f20 <__aeabi_dsub>
 80294c0:	0002      	movs	r2, r0
 80294c2:	000b      	movs	r3, r1
 80294c4:	9800      	ldr	r0, [sp, #0]
 80294c6:	9901      	ldr	r1, [sp, #4]
 80294c8:	e7dc      	b.n	8029484 <__ieee754_log+0x120>
 80294ca:	2380      	movs	r3, #128	@ 0x80
 80294cc:	05db      	lsls	r3, r3, #23
 80294ce:	f7d8 fa41 	bl	8001954 <__aeabi_dadd>
 80294d2:	0002      	movs	r2, r0
 80294d4:	000b      	movs	r3, r1
 80294d6:	0030      	movs	r0, r6
 80294d8:	0039      	movs	r1, r7
 80294da:	f7d8 fe01 	bl	80020e0 <__aeabi_ddiv>
 80294de:	9004      	str	r0, [sp, #16]
 80294e0:	9105      	str	r1, [sp, #20]
 80294e2:	9800      	ldr	r0, [sp, #0]
 80294e4:	f7da f984 	bl	80037f0 <__aeabi_i2d>
 80294e8:	9a04      	ldr	r2, [sp, #16]
 80294ea:	9b05      	ldr	r3, [sp, #20]
 80294ec:	9006      	str	r0, [sp, #24]
 80294ee:	9107      	str	r1, [sp, #28]
 80294f0:	0010      	movs	r0, r2
 80294f2:	0019      	movs	r1, r3
 80294f4:	f7d9 fa2e 	bl	8002954 <__aeabi_dmul>
 80294f8:	4a63      	ldr	r2, [pc, #396]	@ (8029688 <__ieee754_log+0x324>)
 80294fa:	9b02      	ldr	r3, [sp, #8]
 80294fc:	4694      	mov	ip, r2
 80294fe:	4463      	add	r3, ip
 8029500:	0002      	movs	r2, r0
 8029502:	930b      	str	r3, [sp, #44]	@ 0x2c
 8029504:	000b      	movs	r3, r1
 8029506:	9008      	str	r0, [sp, #32]
 8029508:	9109      	str	r1, [sp, #36]	@ 0x24
 802950a:	f7d9 fa23 	bl	8002954 <__aeabi_dmul>
 802950e:	0004      	movs	r4, r0
 8029510:	000d      	movs	r5, r1
 8029512:	4a5e      	ldr	r2, [pc, #376]	@ (802968c <__ieee754_log+0x328>)
 8029514:	4b5e      	ldr	r3, [pc, #376]	@ (8029690 <__ieee754_log+0x32c>)
 8029516:	f7d9 fa1d 	bl	8002954 <__aeabi_dmul>
 802951a:	4a5e      	ldr	r2, [pc, #376]	@ (8029694 <__ieee754_log+0x330>)
 802951c:	4b5e      	ldr	r3, [pc, #376]	@ (8029698 <__ieee754_log+0x334>)
 802951e:	f7d8 fa19 	bl	8001954 <__aeabi_dadd>
 8029522:	0022      	movs	r2, r4
 8029524:	002b      	movs	r3, r5
 8029526:	f7d9 fa15 	bl	8002954 <__aeabi_dmul>
 802952a:	4a5c      	ldr	r2, [pc, #368]	@ (802969c <__ieee754_log+0x338>)
 802952c:	4b5c      	ldr	r3, [pc, #368]	@ (80296a0 <__ieee754_log+0x33c>)
 802952e:	f7d8 fa11 	bl	8001954 <__aeabi_dadd>
 8029532:	0022      	movs	r2, r4
 8029534:	002b      	movs	r3, r5
 8029536:	f7d9 fa0d 	bl	8002954 <__aeabi_dmul>
 802953a:	4a5a      	ldr	r2, [pc, #360]	@ (80296a4 <__ieee754_log+0x340>)
 802953c:	4b5a      	ldr	r3, [pc, #360]	@ (80296a8 <__ieee754_log+0x344>)
 802953e:	f7d8 fa09 	bl	8001954 <__aeabi_dadd>
 8029542:	9a08      	ldr	r2, [sp, #32]
 8029544:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8029546:	f7d9 fa05 	bl	8002954 <__aeabi_dmul>
 802954a:	4a58      	ldr	r2, [pc, #352]	@ (80296ac <__ieee754_log+0x348>)
 802954c:	9008      	str	r0, [sp, #32]
 802954e:	9109      	str	r1, [sp, #36]	@ 0x24
 8029550:	4b57      	ldr	r3, [pc, #348]	@ (80296b0 <__ieee754_log+0x34c>)
 8029552:	0020      	movs	r0, r4
 8029554:	0029      	movs	r1, r5
 8029556:	f7d9 f9fd 	bl	8002954 <__aeabi_dmul>
 802955a:	4a56      	ldr	r2, [pc, #344]	@ (80296b4 <__ieee754_log+0x350>)
 802955c:	4b56      	ldr	r3, [pc, #344]	@ (80296b8 <__ieee754_log+0x354>)
 802955e:	f7d8 f9f9 	bl	8001954 <__aeabi_dadd>
 8029562:	0022      	movs	r2, r4
 8029564:	002b      	movs	r3, r5
 8029566:	f7d9 f9f5 	bl	8002954 <__aeabi_dmul>
 802956a:	4a54      	ldr	r2, [pc, #336]	@ (80296bc <__ieee754_log+0x358>)
 802956c:	4b54      	ldr	r3, [pc, #336]	@ (80296c0 <__ieee754_log+0x35c>)
 802956e:	f7d8 f9f1 	bl	8001954 <__aeabi_dadd>
 8029572:	0022      	movs	r2, r4
 8029574:	002b      	movs	r3, r5
 8029576:	f7d9 f9ed 	bl	8002954 <__aeabi_dmul>
 802957a:	0002      	movs	r2, r0
 802957c:	000b      	movs	r3, r1
 802957e:	9808      	ldr	r0, [sp, #32]
 8029580:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8029582:	f7d8 f9e7 	bl	8001954 <__aeabi_dadd>
 8029586:	9a02      	ldr	r2, [sp, #8]
 8029588:	4b4e      	ldr	r3, [pc, #312]	@ (80296c4 <__ieee754_log+0x360>)
 802958a:	0004      	movs	r4, r0
 802958c:	1a9b      	subs	r3, r3, r2
 802958e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8029590:	000d      	movs	r5, r1
 8029592:	4313      	orrs	r3, r2
 8029594:	2b00      	cmp	r3, #0
 8029596:	dd34      	ble.n	8029602 <__ieee754_log+0x29e>
 8029598:	2200      	movs	r2, #0
 802959a:	4b3a      	ldr	r3, [pc, #232]	@ (8029684 <__ieee754_log+0x320>)
 802959c:	0030      	movs	r0, r6
 802959e:	0039      	movs	r1, r7
 80295a0:	f7d9 f9d8 	bl	8002954 <__aeabi_dmul>
 80295a4:	0032      	movs	r2, r6
 80295a6:	003b      	movs	r3, r7
 80295a8:	f7d9 f9d4 	bl	8002954 <__aeabi_dmul>
 80295ac:	0002      	movs	r2, r0
 80295ae:	000b      	movs	r3, r1
 80295b0:	9002      	str	r0, [sp, #8]
 80295b2:	9103      	str	r1, [sp, #12]
 80295b4:	0020      	movs	r0, r4
 80295b6:	0029      	movs	r1, r5
 80295b8:	f7d8 f9cc 	bl	8001954 <__aeabi_dadd>
 80295bc:	9a04      	ldr	r2, [sp, #16]
 80295be:	9b05      	ldr	r3, [sp, #20]
 80295c0:	f7d9 f9c8 	bl	8002954 <__aeabi_dmul>
 80295c4:	9b00      	ldr	r3, [sp, #0]
 80295c6:	0004      	movs	r4, r0
 80295c8:	000d      	movs	r5, r1
 80295ca:	2b00      	cmp	r3, #0
 80295cc:	d106      	bne.n	80295dc <__ieee754_log+0x278>
 80295ce:	0002      	movs	r2, r0
 80295d0:	000b      	movs	r3, r1
 80295d2:	9802      	ldr	r0, [sp, #8]
 80295d4:	9903      	ldr	r1, [sp, #12]
 80295d6:	f7d9 fca3 	bl	8002f20 <__aeabi_dsub>
 80295da:	e74f      	b.n	802947c <__ieee754_log+0x118>
 80295dc:	4a23      	ldr	r2, [pc, #140]	@ (802966c <__ieee754_log+0x308>)
 80295de:	4b24      	ldr	r3, [pc, #144]	@ (8029670 <__ieee754_log+0x30c>)
 80295e0:	9806      	ldr	r0, [sp, #24]
 80295e2:	9907      	ldr	r1, [sp, #28]
 80295e4:	f7d9 f9b6 	bl	8002954 <__aeabi_dmul>
 80295e8:	4a22      	ldr	r2, [pc, #136]	@ (8029674 <__ieee754_log+0x310>)
 80295ea:	9000      	str	r0, [sp, #0]
 80295ec:	9101      	str	r1, [sp, #4]
 80295ee:	9806      	ldr	r0, [sp, #24]
 80295f0:	9907      	ldr	r1, [sp, #28]
 80295f2:	4b21      	ldr	r3, [pc, #132]	@ (8029678 <__ieee754_log+0x314>)
 80295f4:	f7d9 f9ae 	bl	8002954 <__aeabi_dmul>
 80295f8:	0022      	movs	r2, r4
 80295fa:	002b      	movs	r3, r5
 80295fc:	f7d8 f9aa 	bl	8001954 <__aeabi_dadd>
 8029600:	e754      	b.n	80294ac <__ieee754_log+0x148>
 8029602:	0002      	movs	r2, r0
 8029604:	000b      	movs	r3, r1
 8029606:	0030      	movs	r0, r6
 8029608:	0039      	movs	r1, r7
 802960a:	f7d9 fc89 	bl	8002f20 <__aeabi_dsub>
 802960e:	9a04      	ldr	r2, [sp, #16]
 8029610:	9b05      	ldr	r3, [sp, #20]
 8029612:	f7d9 f99f 	bl	8002954 <__aeabi_dmul>
 8029616:	9b00      	ldr	r3, [sp, #0]
 8029618:	0004      	movs	r4, r0
 802961a:	000d      	movs	r5, r1
 802961c:	2b00      	cmp	r3, #0
 802961e:	d102      	bne.n	8029626 <__ieee754_log+0x2c2>
 8029620:	0002      	movs	r2, r0
 8029622:	000b      	movs	r3, r1
 8029624:	e72c      	b.n	8029480 <__ieee754_log+0x11c>
 8029626:	4a11      	ldr	r2, [pc, #68]	@ (802966c <__ieee754_log+0x308>)
 8029628:	4b11      	ldr	r3, [pc, #68]	@ (8029670 <__ieee754_log+0x30c>)
 802962a:	9806      	ldr	r0, [sp, #24]
 802962c:	9907      	ldr	r1, [sp, #28]
 802962e:	f7d9 f991 	bl	8002954 <__aeabi_dmul>
 8029632:	4a10      	ldr	r2, [pc, #64]	@ (8029674 <__ieee754_log+0x310>)
 8029634:	9000      	str	r0, [sp, #0]
 8029636:	9101      	str	r1, [sp, #4]
 8029638:	9806      	ldr	r0, [sp, #24]
 802963a:	9907      	ldr	r1, [sp, #28]
 802963c:	4b0e      	ldr	r3, [pc, #56]	@ (8029678 <__ieee754_log+0x314>)
 802963e:	f7d9 f989 	bl	8002954 <__aeabi_dmul>
 8029642:	0002      	movs	r2, r0
 8029644:	000b      	movs	r3, r1
 8029646:	0020      	movs	r0, r4
 8029648:	0029      	movs	r1, r5
 802964a:	e733      	b.n	80294b4 <__ieee754_log+0x150>
 802964c:	2000      	movs	r0, #0
 802964e:	2100      	movs	r1, #0
 8029650:	e699      	b.n	8029386 <__ieee754_log+0x22>
 8029652:	46c0      	nop			@ (mov r8, r8)
 8029654:	c3500000 	.word	0xc3500000
 8029658:	43500000 	.word	0x43500000
 802965c:	7fefffff 	.word	0x7fefffff
 8029660:	fffffc01 	.word	0xfffffc01
 8029664:	00095f64 	.word	0x00095f64
 8029668:	3ff00000 	.word	0x3ff00000
 802966c:	fee00000 	.word	0xfee00000
 8029670:	3fe62e42 	.word	0x3fe62e42
 8029674:	35793c76 	.word	0x35793c76
 8029678:	3dea39ef 	.word	0x3dea39ef
 802967c:	55555555 	.word	0x55555555
 8029680:	3fd55555 	.word	0x3fd55555
 8029684:	3fe00000 	.word	0x3fe00000
 8029688:	fff9eb86 	.word	0xfff9eb86
 802968c:	df3e5244 	.word	0xdf3e5244
 8029690:	3fc2f112 	.word	0x3fc2f112
 8029694:	96cb03de 	.word	0x96cb03de
 8029698:	3fc74664 	.word	0x3fc74664
 802969c:	94229359 	.word	0x94229359
 80296a0:	3fd24924 	.word	0x3fd24924
 80296a4:	55555593 	.word	0x55555593
 80296a8:	3fe55555 	.word	0x3fe55555
 80296ac:	d078c69f 	.word	0xd078c69f
 80296b0:	3fc39a09 	.word	0x3fc39a09
 80296b4:	1d8e78af 	.word	0x1d8e78af
 80296b8:	3fcc71c5 	.word	0x3fcc71c5
 80296bc:	9997fa04 	.word	0x9997fa04
 80296c0:	3fd99999 	.word	0x3fd99999
 80296c4:	0006b851 	.word	0x0006b851

080296c8 <__ieee754_pow>:
 80296c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80296ca:	b095      	sub	sp, #84	@ 0x54
 80296cc:	9204      	str	r2, [sp, #16]
 80296ce:	9305      	str	r3, [sp, #20]
 80296d0:	9b04      	ldr	r3, [sp, #16]
 80296d2:	9f05      	ldr	r7, [sp, #20]
 80296d4:	001a      	movs	r2, r3
 80296d6:	007d      	lsls	r5, r7, #1
 80296d8:	086d      	lsrs	r5, r5, #1
 80296da:	9002      	str	r0, [sp, #8]
 80296dc:	9103      	str	r1, [sp, #12]
 80296de:	432a      	orrs	r2, r5
 80296e0:	d11a      	bne.n	8029718 <__ieee754_pow+0x50>
 80296e2:	2180      	movs	r1, #128	@ 0x80
 80296e4:	9a02      	ldr	r2, [sp, #8]
 80296e6:	9803      	ldr	r0, [sp, #12]
 80296e8:	0309      	lsls	r1, r1, #12
 80296ea:	4048      	eors	r0, r1
 80296ec:	0003      	movs	r3, r0
 80296ee:	1892      	adds	r2, r2, r2
 80296f0:	415b      	adcs	r3, r3
 80296f2:	4996      	ldr	r1, [pc, #600]	@ (802994c <__ieee754_pow+0x284>)
 80296f4:	428b      	cmp	r3, r1
 80296f6:	d806      	bhi.n	8029706 <__ieee754_pow+0x3e>
 80296f8:	d001      	beq.n	80296fe <__ieee754_pow+0x36>
 80296fa:	f000 fcce 	bl	802a09a <__ieee754_pow+0x9d2>
 80296fe:	2a00      	cmp	r2, #0
 8029700:	d101      	bne.n	8029706 <__ieee754_pow+0x3e>
 8029702:	f000 fcca 	bl	802a09a <__ieee754_pow+0x9d2>
 8029706:	9a04      	ldr	r2, [sp, #16]
 8029708:	9b05      	ldr	r3, [sp, #20]
 802970a:	9802      	ldr	r0, [sp, #8]
 802970c:	9903      	ldr	r1, [sp, #12]
 802970e:	f7d8 f921 	bl	8001954 <__aeabi_dadd>
 8029712:	9000      	str	r0, [sp, #0]
 8029714:	9101      	str	r1, [sp, #4]
 8029716:	e08e      	b.n	8029836 <__ieee754_pow+0x16e>
 8029718:	9a03      	ldr	r2, [sp, #12]
 802971a:	9206      	str	r2, [sp, #24]
 802971c:	9a02      	ldr	r2, [sp, #8]
 802971e:	920a      	str	r2, [sp, #40]	@ 0x28
 8029720:	9a03      	ldr	r2, [sp, #12]
 8029722:	0054      	lsls	r4, r2, #1
 8029724:	4a8a      	ldr	r2, [pc, #552]	@ (8029950 <__ieee754_pow+0x288>)
 8029726:	0864      	lsrs	r4, r4, #1
 8029728:	4294      	cmp	r4, r2
 802972a:	d80e      	bhi.n	802974a <__ieee754_pow+0x82>
 802972c:	d105      	bne.n	802973a <__ieee754_pow+0x72>
 802972e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8029730:	2a00      	cmp	r2, #0
 8029732:	d1e8      	bne.n	8029706 <__ieee754_pow+0x3e>
 8029734:	42a5      	cmp	r5, r4
 8029736:	d8e6      	bhi.n	8029706 <__ieee754_pow+0x3e>
 8029738:	e002      	b.n	8029740 <__ieee754_pow+0x78>
 802973a:	4a85      	ldr	r2, [pc, #532]	@ (8029950 <__ieee754_pow+0x288>)
 802973c:	4295      	cmp	r5, r2
 802973e:	d804      	bhi.n	802974a <__ieee754_pow+0x82>
 8029740:	4a83      	ldr	r2, [pc, #524]	@ (8029950 <__ieee754_pow+0x288>)
 8029742:	4295      	cmp	r5, r2
 8029744:	d10c      	bne.n	8029760 <__ieee754_pow+0x98>
 8029746:	2b00      	cmp	r3, #0
 8029748:	d00a      	beq.n	8029760 <__ieee754_pow+0x98>
 802974a:	4a82      	ldr	r2, [pc, #520]	@ (8029954 <__ieee754_pow+0x28c>)
 802974c:	9b03      	ldr	r3, [sp, #12]
 802974e:	189b      	adds	r3, r3, r2
 8029750:	9a02      	ldr	r2, [sp, #8]
 8029752:	4313      	orrs	r3, r2
 8029754:	d1d7      	bne.n	8029706 <__ieee754_pow+0x3e>
 8029756:	2180      	movs	r1, #128	@ 0x80
 8029758:	9a04      	ldr	r2, [sp, #16]
 802975a:	9805      	ldr	r0, [sp, #20]
 802975c:	0309      	lsls	r1, r1, #12
 802975e:	e7c4      	b.n	80296ea <__ieee754_pow+0x22>
 8029760:	2600      	movs	r6, #0
 8029762:	9a06      	ldr	r2, [sp, #24]
 8029764:	9408      	str	r4, [sp, #32]
 8029766:	42b2      	cmp	r2, r6
 8029768:	da42      	bge.n	80297f0 <__ieee754_pow+0x128>
 802976a:	4a7b      	ldr	r2, [pc, #492]	@ (8029958 <__ieee754_pow+0x290>)
 802976c:	4295      	cmp	r5, r2
 802976e:	d83e      	bhi.n	80297ee <__ieee754_pow+0x126>
 8029770:	4a7a      	ldr	r2, [pc, #488]	@ (802995c <__ieee754_pow+0x294>)
 8029772:	4295      	cmp	r5, r2
 8029774:	d910      	bls.n	8029798 <__ieee754_pow+0xd0>
 8029776:	497a      	ldr	r1, [pc, #488]	@ (8029960 <__ieee754_pow+0x298>)
 8029778:	152a      	asrs	r2, r5, #20
 802977a:	1852      	adds	r2, r2, r1
 802977c:	2a14      	cmp	r2, #20
 802977e:	dd18      	ble.n	80297b2 <__ieee754_pow+0xea>
 8029780:	2134      	movs	r1, #52	@ 0x34
 8029782:	1a89      	subs	r1, r1, r2
 8029784:	9a04      	ldr	r2, [sp, #16]
 8029786:	40ca      	lsrs	r2, r1
 8029788:	0010      	movs	r0, r2
 802978a:	4088      	lsls	r0, r1
 802978c:	4298      	cmp	r0, r3
 802978e:	d103      	bne.n	8029798 <__ieee754_pow+0xd0>
 8029790:	2101      	movs	r1, #1
 8029792:	3602      	adds	r6, #2
 8029794:	400a      	ands	r2, r1
 8029796:	1ab6      	subs	r6, r6, r2
 8029798:	2b00      	cmp	r3, #0
 802979a:	d15b      	bne.n	8029854 <__ieee754_pow+0x18c>
 802979c:	2380      	movs	r3, #128	@ 0x80
 802979e:	05db      	lsls	r3, r3, #23
 80297a0:	429f      	cmp	r7, r3
 80297a2:	d14c      	bne.n	802983e <__ieee754_pow+0x176>
 80297a4:	9a02      	ldr	r2, [sp, #8]
 80297a6:	9b03      	ldr	r3, [sp, #12]
 80297a8:	0010      	movs	r0, r2
 80297aa:	0019      	movs	r1, r3
 80297ac:	f7d9 f8d2 	bl	8002954 <__aeabi_dmul>
 80297b0:	e7af      	b.n	8029712 <__ieee754_pow+0x4a>
 80297b2:	2b00      	cmp	r3, #0
 80297b4:	d14e      	bne.n	8029854 <__ieee754_pow+0x18c>
 80297b6:	3314      	adds	r3, #20
 80297b8:	1a9a      	subs	r2, r3, r2
 80297ba:	002b      	movs	r3, r5
 80297bc:	4113      	asrs	r3, r2
 80297be:	0019      	movs	r1, r3
 80297c0:	4091      	lsls	r1, r2
 80297c2:	42a9      	cmp	r1, r5
 80297c4:	d103      	bne.n	80297ce <__ieee754_pow+0x106>
 80297c6:	2201      	movs	r2, #1
 80297c8:	2602      	movs	r6, #2
 80297ca:	4013      	ands	r3, r2
 80297cc:	1af6      	subs	r6, r6, r3
 80297ce:	4b65      	ldr	r3, [pc, #404]	@ (8029964 <__ieee754_pow+0x29c>)
 80297d0:	429d      	cmp	r5, r3
 80297d2:	d1e3      	bne.n	802979c <__ieee754_pow+0xd4>
 80297d4:	9b02      	ldr	r3, [sp, #8]
 80297d6:	9c03      	ldr	r4, [sp, #12]
 80297d8:	9300      	str	r3, [sp, #0]
 80297da:	9401      	str	r4, [sp, #4]
 80297dc:	2f00      	cmp	r7, #0
 80297de:	da2a      	bge.n	8029836 <__ieee754_pow+0x16e>
 80297e0:	001a      	movs	r2, r3
 80297e2:	2000      	movs	r0, #0
 80297e4:	0023      	movs	r3, r4
 80297e6:	495f      	ldr	r1, [pc, #380]	@ (8029964 <__ieee754_pow+0x29c>)
 80297e8:	f7d8 fc7a 	bl	80020e0 <__aeabi_ddiv>
 80297ec:	e791      	b.n	8029712 <__ieee754_pow+0x4a>
 80297ee:	2602      	movs	r6, #2
 80297f0:	2b00      	cmp	r3, #0
 80297f2:	d12f      	bne.n	8029854 <__ieee754_pow+0x18c>
 80297f4:	4b56      	ldr	r3, [pc, #344]	@ (8029950 <__ieee754_pow+0x288>)
 80297f6:	429d      	cmp	r5, r3
 80297f8:	d1e9      	bne.n	80297ce <__ieee754_pow+0x106>
 80297fa:	4b56      	ldr	r3, [pc, #344]	@ (8029954 <__ieee754_pow+0x28c>)
 80297fc:	9a02      	ldr	r2, [sp, #8]
 80297fe:	18e3      	adds	r3, r4, r3
 8029800:	4313      	orrs	r3, r2
 8029802:	d101      	bne.n	8029808 <__ieee754_pow+0x140>
 8029804:	f000 fc49 	bl	802a09a <__ieee754_pow+0x9d2>
 8029808:	4b54      	ldr	r3, [pc, #336]	@ (802995c <__ieee754_pow+0x294>)
 802980a:	429c      	cmp	r4, r3
 802980c:	d909      	bls.n	8029822 <__ieee754_pow+0x15a>
 802980e:	9b04      	ldr	r3, [sp, #16]
 8029810:	9c05      	ldr	r4, [sp, #20]
 8029812:	9300      	str	r3, [sp, #0]
 8029814:	9401      	str	r4, [sp, #4]
 8029816:	2f00      	cmp	r7, #0
 8029818:	da0d      	bge.n	8029836 <__ieee754_pow+0x16e>
 802981a:	2300      	movs	r3, #0
 802981c:	2400      	movs	r4, #0
 802981e:	f000 fc3e 	bl	802a09e <__ieee754_pow+0x9d6>
 8029822:	2f00      	cmp	r7, #0
 8029824:	daf9      	bge.n	802981a <__ieee754_pow+0x152>
 8029826:	2280      	movs	r2, #128	@ 0x80
 8029828:	0612      	lsls	r2, r2, #24
 802982a:	4694      	mov	ip, r2
 802982c:	9b04      	ldr	r3, [sp, #16]
 802982e:	9300      	str	r3, [sp, #0]
 8029830:	9b05      	ldr	r3, [sp, #20]
 8029832:	4463      	add	r3, ip
 8029834:	9301      	str	r3, [sp, #4]
 8029836:	9800      	ldr	r0, [sp, #0]
 8029838:	9901      	ldr	r1, [sp, #4]
 802983a:	b015      	add	sp, #84	@ 0x54
 802983c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802983e:	4b4a      	ldr	r3, [pc, #296]	@ (8029968 <__ieee754_pow+0x2a0>)
 8029840:	429f      	cmp	r7, r3
 8029842:	d107      	bne.n	8029854 <__ieee754_pow+0x18c>
 8029844:	9b06      	ldr	r3, [sp, #24]
 8029846:	2b00      	cmp	r3, #0
 8029848:	db04      	blt.n	8029854 <__ieee754_pow+0x18c>
 802984a:	9802      	ldr	r0, [sp, #8]
 802984c:	9903      	ldr	r1, [sp, #12]
 802984e:	f000 fe03 	bl	802a458 <__ieee754_sqrt>
 8029852:	e75e      	b.n	8029712 <__ieee754_pow+0x4a>
 8029854:	9802      	ldr	r0, [sp, #8]
 8029856:	9903      	ldr	r1, [sp, #12]
 8029858:	f000 fc4e 	bl	802a0f8 <fabs>
 802985c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802985e:	9000      	str	r0, [sp, #0]
 8029860:	9101      	str	r1, [sp, #4]
 8029862:	2b00      	cmp	r3, #0
 8029864:	d12c      	bne.n	80298c0 <__ieee754_pow+0x1f8>
 8029866:	9b03      	ldr	r3, [sp, #12]
 8029868:	4a3e      	ldr	r2, [pc, #248]	@ (8029964 <__ieee754_pow+0x29c>)
 802986a:	009b      	lsls	r3, r3, #2
 802986c:	089b      	lsrs	r3, r3, #2
 802986e:	4293      	cmp	r3, r2
 8029870:	d001      	beq.n	8029876 <__ieee754_pow+0x1ae>
 8029872:	2c00      	cmp	r4, #0
 8029874:	d124      	bne.n	80298c0 <__ieee754_pow+0x1f8>
 8029876:	2f00      	cmp	r7, #0
 8029878:	da07      	bge.n	802988a <__ieee754_pow+0x1c2>
 802987a:	9a00      	ldr	r2, [sp, #0]
 802987c:	9b01      	ldr	r3, [sp, #4]
 802987e:	2000      	movs	r0, #0
 8029880:	4938      	ldr	r1, [pc, #224]	@ (8029964 <__ieee754_pow+0x29c>)
 8029882:	f7d8 fc2d 	bl	80020e0 <__aeabi_ddiv>
 8029886:	9000      	str	r0, [sp, #0]
 8029888:	9101      	str	r1, [sp, #4]
 802988a:	9b06      	ldr	r3, [sp, #24]
 802988c:	2b00      	cmp	r3, #0
 802988e:	dad2      	bge.n	8029836 <__ieee754_pow+0x16e>
 8029890:	4b30      	ldr	r3, [pc, #192]	@ (8029954 <__ieee754_pow+0x28c>)
 8029892:	18e4      	adds	r4, r4, r3
 8029894:	4334      	orrs	r4, r6
 8029896:	d108      	bne.n	80298aa <__ieee754_pow+0x1e2>
 8029898:	9a00      	ldr	r2, [sp, #0]
 802989a:	9b01      	ldr	r3, [sp, #4]
 802989c:	0010      	movs	r0, r2
 802989e:	0019      	movs	r1, r3
 80298a0:	f7d9 fb3e 	bl	8002f20 <__aeabi_dsub>
 80298a4:	0002      	movs	r2, r0
 80298a6:	000b      	movs	r3, r1
 80298a8:	e79e      	b.n	80297e8 <__ieee754_pow+0x120>
 80298aa:	2e01      	cmp	r6, #1
 80298ac:	d1c3      	bne.n	8029836 <__ieee754_pow+0x16e>
 80298ae:	9800      	ldr	r0, [sp, #0]
 80298b0:	2180      	movs	r1, #128	@ 0x80
 80298b2:	0002      	movs	r2, r0
 80298b4:	9801      	ldr	r0, [sp, #4]
 80298b6:	0609      	lsls	r1, r1, #24
 80298b8:	1843      	adds	r3, r0, r1
 80298ba:	9200      	str	r2, [sp, #0]
 80298bc:	9301      	str	r3, [sp, #4]
 80298be:	e7ba      	b.n	8029836 <__ieee754_pow+0x16e>
 80298c0:	9b03      	ldr	r3, [sp, #12]
 80298c2:	0fdb      	lsrs	r3, r3, #31
 80298c4:	3b01      	subs	r3, #1
 80298c6:	001a      	movs	r2, r3
 80298c8:	4332      	orrs	r2, r6
 80298ca:	d102      	bne.n	80298d2 <__ieee754_pow+0x20a>
 80298cc:	9a02      	ldr	r2, [sp, #8]
 80298ce:	9b03      	ldr	r3, [sp, #12]
 80298d0:	e7e4      	b.n	802989c <__ieee754_pow+0x1d4>
 80298d2:	3e01      	subs	r6, #1
 80298d4:	2200      	movs	r2, #0
 80298d6:	431e      	orrs	r6, r3
 80298d8:	d013      	beq.n	8029902 <__ieee754_pow+0x23a>
 80298da:	4b22      	ldr	r3, [pc, #136]	@ (8029964 <__ieee754_pow+0x29c>)
 80298dc:	9206      	str	r2, [sp, #24]
 80298de:	9307      	str	r3, [sp, #28]
 80298e0:	2384      	movs	r3, #132	@ 0x84
 80298e2:	05db      	lsls	r3, r3, #23
 80298e4:	429d      	cmp	r5, r3
 80298e6:	d800      	bhi.n	80298ea <__ieee754_pow+0x222>
 80298e8:	e0fa      	b.n	8029ae0 <__ieee754_pow+0x418>
 80298ea:	4b20      	ldr	r3, [pc, #128]	@ (802996c <__ieee754_pow+0x2a4>)
 80298ec:	429d      	cmp	r5, r3
 80298ee:	d910      	bls.n	8029912 <__ieee754_pow+0x24a>
 80298f0:	4b1a      	ldr	r3, [pc, #104]	@ (802995c <__ieee754_pow+0x294>)
 80298f2:	429c      	cmp	r4, r3
 80298f4:	d807      	bhi.n	8029906 <__ieee754_pow+0x23e>
 80298f6:	2f00      	cmp	r7, #0
 80298f8:	da07      	bge.n	802990a <__ieee754_pow+0x242>
 80298fa:	2000      	movs	r0, #0
 80298fc:	f000 fd82 	bl	802a404 <__math_oflow>
 8029900:	e707      	b.n	8029712 <__ieee754_pow+0x4a>
 8029902:	4b1b      	ldr	r3, [pc, #108]	@ (8029970 <__ieee754_pow+0x2a8>)
 8029904:	e7ea      	b.n	80298dc <__ieee754_pow+0x214>
 8029906:	2f00      	cmp	r7, #0
 8029908:	dcf7      	bgt.n	80298fa <__ieee754_pow+0x232>
 802990a:	2000      	movs	r0, #0
 802990c:	f000 fd73 	bl	802a3f6 <__math_uflow>
 8029910:	e6ff      	b.n	8029712 <__ieee754_pow+0x4a>
 8029912:	4b18      	ldr	r3, [pc, #96]	@ (8029974 <__ieee754_pow+0x2ac>)
 8029914:	429c      	cmp	r4, r3
 8029916:	d80a      	bhi.n	802992e <__ieee754_pow+0x266>
 8029918:	9806      	ldr	r0, [sp, #24]
 802991a:	9907      	ldr	r1, [sp, #28]
 802991c:	2300      	movs	r3, #0
 802991e:	2200      	movs	r2, #0
 8029920:	f7d6 fdcc 	bl	80004bc <__aeabi_dcmplt>
 8029924:	1e43      	subs	r3, r0, #1
 8029926:	4198      	sbcs	r0, r3
 8029928:	2f00      	cmp	r7, #0
 802992a:	daef      	bge.n	802990c <__ieee754_pow+0x244>
 802992c:	e7e6      	b.n	80298fc <__ieee754_pow+0x234>
 802992e:	4b0d      	ldr	r3, [pc, #52]	@ (8029964 <__ieee754_pow+0x29c>)
 8029930:	2200      	movs	r2, #0
 8029932:	429c      	cmp	r4, r3
 8029934:	d920      	bls.n	8029978 <__ieee754_pow+0x2b0>
 8029936:	9806      	ldr	r0, [sp, #24]
 8029938:	9907      	ldr	r1, [sp, #28]
 802993a:	2300      	movs	r3, #0
 802993c:	f7d6 fdbe 	bl	80004bc <__aeabi_dcmplt>
 8029940:	1e43      	subs	r3, r0, #1
 8029942:	4198      	sbcs	r0, r3
 8029944:	2f00      	cmp	r7, #0
 8029946:	dcd9      	bgt.n	80298fc <__ieee754_pow+0x234>
 8029948:	e7e0      	b.n	802990c <__ieee754_pow+0x244>
 802994a:	46c0      	nop			@ (mov r8, r8)
 802994c:	fff00000 	.word	0xfff00000
 8029950:	7ff00000 	.word	0x7ff00000
 8029954:	c0100000 	.word	0xc0100000
 8029958:	433fffff 	.word	0x433fffff
 802995c:	3fefffff 	.word	0x3fefffff
 8029960:	fffffc01 	.word	0xfffffc01
 8029964:	3ff00000 	.word	0x3ff00000
 8029968:	3fe00000 	.word	0x3fe00000
 802996c:	43f00000 	.word	0x43f00000
 8029970:	bff00000 	.word	0xbff00000
 8029974:	3feffffe 	.word	0x3feffffe
 8029978:	9800      	ldr	r0, [sp, #0]
 802997a:	9901      	ldr	r1, [sp, #4]
 802997c:	4b4d      	ldr	r3, [pc, #308]	@ (8029ab4 <__ieee754_pow+0x3ec>)
 802997e:	f7d9 facf 	bl	8002f20 <__aeabi_dsub>
 8029982:	22c0      	movs	r2, #192	@ 0xc0
 8029984:	4b4c      	ldr	r3, [pc, #304]	@ (8029ab8 <__ieee754_pow+0x3f0>)
 8029986:	05d2      	lsls	r2, r2, #23
 8029988:	0006      	movs	r6, r0
 802998a:	000f      	movs	r7, r1
 802998c:	f7d8 ffe2 	bl	8002954 <__aeabi_dmul>
 8029990:	4a4a      	ldr	r2, [pc, #296]	@ (8029abc <__ieee754_pow+0x3f4>)
 8029992:	9002      	str	r0, [sp, #8]
 8029994:	9103      	str	r1, [sp, #12]
 8029996:	4b4a      	ldr	r3, [pc, #296]	@ (8029ac0 <__ieee754_pow+0x3f8>)
 8029998:	0030      	movs	r0, r6
 802999a:	0039      	movs	r1, r7
 802999c:	f7d8 ffda 	bl	8002954 <__aeabi_dmul>
 80299a0:	2200      	movs	r2, #0
 80299a2:	9000      	str	r0, [sp, #0]
 80299a4:	9101      	str	r1, [sp, #4]
 80299a6:	4b47      	ldr	r3, [pc, #284]	@ (8029ac4 <__ieee754_pow+0x3fc>)
 80299a8:	0030      	movs	r0, r6
 80299aa:	0039      	movs	r1, r7
 80299ac:	f7d8 ffd2 	bl	8002954 <__aeabi_dmul>
 80299b0:	0002      	movs	r2, r0
 80299b2:	000b      	movs	r3, r1
 80299b4:	4844      	ldr	r0, [pc, #272]	@ (8029ac8 <__ieee754_pow+0x400>)
 80299b6:	4945      	ldr	r1, [pc, #276]	@ (8029acc <__ieee754_pow+0x404>)
 80299b8:	f7d9 fab2 	bl	8002f20 <__aeabi_dsub>
 80299bc:	0032      	movs	r2, r6
 80299be:	003b      	movs	r3, r7
 80299c0:	f7d8 ffc8 	bl	8002954 <__aeabi_dmul>
 80299c4:	0002      	movs	r2, r0
 80299c6:	000b      	movs	r3, r1
 80299c8:	2000      	movs	r0, #0
 80299ca:	4941      	ldr	r1, [pc, #260]	@ (8029ad0 <__ieee754_pow+0x408>)
 80299cc:	f7d9 faa8 	bl	8002f20 <__aeabi_dsub>
 80299d0:	0032      	movs	r2, r6
 80299d2:	0004      	movs	r4, r0
 80299d4:	000d      	movs	r5, r1
 80299d6:	003b      	movs	r3, r7
 80299d8:	0030      	movs	r0, r6
 80299da:	0039      	movs	r1, r7
 80299dc:	f7d8 ffba 	bl	8002954 <__aeabi_dmul>
 80299e0:	0002      	movs	r2, r0
 80299e2:	000b      	movs	r3, r1
 80299e4:	0020      	movs	r0, r4
 80299e6:	0029      	movs	r1, r5
 80299e8:	f7d8 ffb4 	bl	8002954 <__aeabi_dmul>
 80299ec:	4a39      	ldr	r2, [pc, #228]	@ (8029ad4 <__ieee754_pow+0x40c>)
 80299ee:	4b32      	ldr	r3, [pc, #200]	@ (8029ab8 <__ieee754_pow+0x3f0>)
 80299f0:	f7d8 ffb0 	bl	8002954 <__aeabi_dmul>
 80299f4:	0002      	movs	r2, r0
 80299f6:	000b      	movs	r3, r1
 80299f8:	9800      	ldr	r0, [sp, #0]
 80299fa:	9901      	ldr	r1, [sp, #4]
 80299fc:	f7d9 fa90 	bl	8002f20 <__aeabi_dsub>
 8029a00:	0002      	movs	r2, r0
 8029a02:	000b      	movs	r3, r1
 8029a04:	0004      	movs	r4, r0
 8029a06:	000d      	movs	r5, r1
 8029a08:	9802      	ldr	r0, [sp, #8]
 8029a0a:	9903      	ldr	r1, [sp, #12]
 8029a0c:	f7d7 ffa2 	bl	8001954 <__aeabi_dadd>
 8029a10:	9a02      	ldr	r2, [sp, #8]
 8029a12:	9b03      	ldr	r3, [sp, #12]
 8029a14:	2000      	movs	r0, #0
 8029a16:	9000      	str	r0, [sp, #0]
 8029a18:	9101      	str	r1, [sp, #4]
 8029a1a:	f7d9 fa81 	bl	8002f20 <__aeabi_dsub>
 8029a1e:	0002      	movs	r2, r0
 8029a20:	000b      	movs	r3, r1
 8029a22:	0020      	movs	r0, r4
 8029a24:	0029      	movs	r1, r5
 8029a26:	f7d9 fa7b 	bl	8002f20 <__aeabi_dsub>
 8029a2a:	9c04      	ldr	r4, [sp, #16]
 8029a2c:	9d05      	ldr	r5, [sp, #20]
 8029a2e:	2400      	movs	r4, #0
 8029a30:	0006      	movs	r6, r0
 8029a32:	000f      	movs	r7, r1
 8029a34:	9804      	ldr	r0, [sp, #16]
 8029a36:	9905      	ldr	r1, [sp, #20]
 8029a38:	0022      	movs	r2, r4
 8029a3a:	002b      	movs	r3, r5
 8029a3c:	9402      	str	r4, [sp, #8]
 8029a3e:	9503      	str	r5, [sp, #12]
 8029a40:	f7d9 fa6e 	bl	8002f20 <__aeabi_dsub>
 8029a44:	9a00      	ldr	r2, [sp, #0]
 8029a46:	9b01      	ldr	r3, [sp, #4]
 8029a48:	f7d8 ff84 	bl	8002954 <__aeabi_dmul>
 8029a4c:	9a04      	ldr	r2, [sp, #16]
 8029a4e:	9b05      	ldr	r3, [sp, #20]
 8029a50:	9008      	str	r0, [sp, #32]
 8029a52:	9109      	str	r1, [sp, #36]	@ 0x24
 8029a54:	0030      	movs	r0, r6
 8029a56:	0039      	movs	r1, r7
 8029a58:	f7d8 ff7c 	bl	8002954 <__aeabi_dmul>
 8029a5c:	0002      	movs	r2, r0
 8029a5e:	000b      	movs	r3, r1
 8029a60:	9808      	ldr	r0, [sp, #32]
 8029a62:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8029a64:	f7d7 ff76 	bl	8001954 <__aeabi_dadd>
 8029a68:	0022      	movs	r2, r4
 8029a6a:	002b      	movs	r3, r5
 8029a6c:	9004      	str	r0, [sp, #16]
 8029a6e:	9105      	str	r1, [sp, #20]
 8029a70:	9800      	ldr	r0, [sp, #0]
 8029a72:	9901      	ldr	r1, [sp, #4]
 8029a74:	f7d8 ff6e 	bl	8002954 <__aeabi_dmul>
 8029a78:	000b      	movs	r3, r1
 8029a7a:	0002      	movs	r2, r0
 8029a7c:	9000      	str	r0, [sp, #0]
 8029a7e:	9101      	str	r1, [sp, #4]
 8029a80:	9804      	ldr	r0, [sp, #16]
 8029a82:	9905      	ldr	r1, [sp, #20]
 8029a84:	f7d7 ff66 	bl	8001954 <__aeabi_dadd>
 8029a88:	4b13      	ldr	r3, [pc, #76]	@ (8029ad8 <__ieee754_pow+0x410>)
 8029a8a:	0006      	movs	r6, r0
 8029a8c:	000f      	movs	r7, r1
 8029a8e:	9108      	str	r1, [sp, #32]
 8029a90:	4299      	cmp	r1, r3
 8029a92:	dc00      	bgt.n	8029a96 <__ieee754_pow+0x3ce>
 8029a94:	e1c0      	b.n	8029e18 <__ieee754_pow+0x750>
 8029a96:	4b11      	ldr	r3, [pc, #68]	@ (8029adc <__ieee754_pow+0x414>)
 8029a98:	18cb      	adds	r3, r1, r3
 8029a9a:	4303      	orrs	r3, r0
 8029a9c:	42a3      	cmp	r3, r4
 8029a9e:	d100      	bne.n	8029aa2 <__ieee754_pow+0x3da>
 8029aa0:	e1a1      	b.n	8029de6 <__ieee754_pow+0x71e>
 8029aa2:	9806      	ldr	r0, [sp, #24]
 8029aa4:	9907      	ldr	r1, [sp, #28]
 8029aa6:	2300      	movs	r3, #0
 8029aa8:	2200      	movs	r2, #0
 8029aaa:	f7d6 fd07 	bl	80004bc <__aeabi_dcmplt>
 8029aae:	1e43      	subs	r3, r0, #1
 8029ab0:	4198      	sbcs	r0, r3
 8029ab2:	e723      	b.n	80298fc <__ieee754_pow+0x234>
 8029ab4:	3ff00000 	.word	0x3ff00000
 8029ab8:	3ff71547 	.word	0x3ff71547
 8029abc:	f85ddf44 	.word	0xf85ddf44
 8029ac0:	3e54ae0b 	.word	0x3e54ae0b
 8029ac4:	3fd00000 	.word	0x3fd00000
 8029ac8:	55555555 	.word	0x55555555
 8029acc:	3fd55555 	.word	0x3fd55555
 8029ad0:	3fe00000 	.word	0x3fe00000
 8029ad4:	652b82fe 	.word	0x652b82fe
 8029ad8:	408fffff 	.word	0x408fffff
 8029adc:	bf700000 	.word	0xbf700000
 8029ae0:	4bdc      	ldr	r3, [pc, #880]	@ (8029e54 <__ieee754_pow+0x78c>)
 8029ae2:	9903      	ldr	r1, [sp, #12]
 8029ae4:	2200      	movs	r2, #0
 8029ae6:	420b      	tst	r3, r1
 8029ae8:	d10b      	bne.n	8029b02 <__ieee754_pow+0x43a>
 8029aea:	9800      	ldr	r0, [sp, #0]
 8029aec:	9901      	ldr	r1, [sp, #4]
 8029aee:	2200      	movs	r2, #0
 8029af0:	4bd9      	ldr	r3, [pc, #868]	@ (8029e58 <__ieee754_pow+0x790>)
 8029af2:	f7d8 ff2f 	bl	8002954 <__aeabi_dmul>
 8029af6:	2235      	movs	r2, #53	@ 0x35
 8029af8:	9000      	str	r0, [sp, #0]
 8029afa:	9101      	str	r1, [sp, #4]
 8029afc:	9b01      	ldr	r3, [sp, #4]
 8029afe:	4252      	negs	r2, r2
 8029b00:	9308      	str	r3, [sp, #32]
 8029b02:	9b08      	ldr	r3, [sp, #32]
 8029b04:	49d5      	ldr	r1, [pc, #852]	@ (8029e5c <__ieee754_pow+0x794>)
 8029b06:	151b      	asrs	r3, r3, #20
 8029b08:	185b      	adds	r3, r3, r1
 8029b0a:	189b      	adds	r3, r3, r2
 8029b0c:	930e      	str	r3, [sp, #56]	@ 0x38
 8029b0e:	9b08      	ldr	r3, [sp, #32]
 8029b10:	4dd3      	ldr	r5, [pc, #844]	@ (8029e60 <__ieee754_pow+0x798>)
 8029b12:	031b      	lsls	r3, r3, #12
 8029b14:	4ad3      	ldr	r2, [pc, #844]	@ (8029e64 <__ieee754_pow+0x79c>)
 8029b16:	0b1b      	lsrs	r3, r3, #12
 8029b18:	2600      	movs	r6, #0
 8029b1a:	431d      	orrs	r5, r3
 8029b1c:	4293      	cmp	r3, r2
 8029b1e:	dd09      	ble.n	8029b34 <__ieee754_pow+0x46c>
 8029b20:	4ad1      	ldr	r2, [pc, #836]	@ (8029e68 <__ieee754_pow+0x7a0>)
 8029b22:	3601      	adds	r6, #1
 8029b24:	4293      	cmp	r3, r2
 8029b26:	dd05      	ble.n	8029b34 <__ieee754_pow+0x46c>
 8029b28:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8029b2a:	199b      	adds	r3, r3, r6
 8029b2c:	2600      	movs	r6, #0
 8029b2e:	930e      	str	r3, [sp, #56]	@ 0x38
 8029b30:	4bce      	ldr	r3, [pc, #824]	@ (8029e6c <__ieee754_pow+0x7a4>)
 8029b32:	18ed      	adds	r5, r5, r3
 8029b34:	9800      	ldr	r0, [sp, #0]
 8029b36:	9901      	ldr	r1, [sp, #4]
 8029b38:	0029      	movs	r1, r5
 8029b3a:	4bcd      	ldr	r3, [pc, #820]	@ (8029e70 <__ieee754_pow+0x7a8>)
 8029b3c:	00f2      	lsls	r2, r6, #3
 8029b3e:	189b      	adds	r3, r3, r2
 8029b40:	685c      	ldr	r4, [r3, #4]
 8029b42:	681b      	ldr	r3, [r3, #0]
 8029b44:	920f      	str	r2, [sp, #60]	@ 0x3c
 8029b46:	930a      	str	r3, [sp, #40]	@ 0x28
 8029b48:	940b      	str	r4, [sp, #44]	@ 0x2c
 8029b4a:	001a      	movs	r2, r3
 8029b4c:	0023      	movs	r3, r4
 8029b4e:	900c      	str	r0, [sp, #48]	@ 0x30
 8029b50:	910d      	str	r1, [sp, #52]	@ 0x34
 8029b52:	f7d9 f9e5 	bl	8002f20 <__aeabi_dsub>
 8029b56:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8029b58:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8029b5a:	9010      	str	r0, [sp, #64]	@ 0x40
 8029b5c:	9111      	str	r1, [sp, #68]	@ 0x44
 8029b5e:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8029b60:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8029b62:	f7d7 fef7 	bl	8001954 <__aeabi_dadd>
 8029b66:	0002      	movs	r2, r0
 8029b68:	000b      	movs	r3, r1
 8029b6a:	2000      	movs	r0, #0
 8029b6c:	49bc      	ldr	r1, [pc, #752]	@ (8029e60 <__ieee754_pow+0x798>)
 8029b6e:	f7d8 fab7 	bl	80020e0 <__aeabi_ddiv>
 8029b72:	0002      	movs	r2, r0
 8029b74:	000b      	movs	r3, r1
 8029b76:	9012      	str	r0, [sp, #72]	@ 0x48
 8029b78:	9113      	str	r1, [sp, #76]	@ 0x4c
 8029b7a:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8029b7c:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8029b7e:	f7d8 fee9 	bl	8002954 <__aeabi_dmul>
 8029b82:	9008      	str	r0, [sp, #32]
 8029b84:	9109      	str	r1, [sp, #36]	@ 0x24
 8029b86:	9b08      	ldr	r3, [sp, #32]
 8029b88:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 8029b8a:	2180      	movs	r1, #128	@ 0x80
 8029b8c:	9302      	str	r3, [sp, #8]
 8029b8e:	9403      	str	r4, [sp, #12]
 8029b90:	2080      	movs	r0, #128	@ 0x80
 8029b92:	2300      	movs	r3, #0
 8029b94:	2200      	movs	r2, #0
 8029b96:	106d      	asrs	r5, r5, #1
 8029b98:	0589      	lsls	r1, r1, #22
 8029b9a:	9302      	str	r3, [sp, #8]
 8029b9c:	4329      	orrs	r1, r5
 8029b9e:	0300      	lsls	r0, r0, #12
 8029ba0:	9b02      	ldr	r3, [sp, #8]
 8029ba2:	9c03      	ldr	r4, [sp, #12]
 8029ba4:	1809      	adds	r1, r1, r0
 8029ba6:	9300      	str	r3, [sp, #0]
 8029ba8:	9401      	str	r4, [sp, #4]
 8029baa:	04b6      	lsls	r6, r6, #18
 8029bac:	198b      	adds	r3, r1, r6
 8029bae:	9800      	ldr	r0, [sp, #0]
 8029bb0:	9901      	ldr	r1, [sp, #4]
 8029bb2:	0014      	movs	r4, r2
 8029bb4:	001d      	movs	r5, r3
 8029bb6:	f7d8 fecd 	bl	8002954 <__aeabi_dmul>
 8029bba:	0002      	movs	r2, r0
 8029bbc:	000b      	movs	r3, r1
 8029bbe:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8029bc0:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8029bc2:	f7d9 f9ad 	bl	8002f20 <__aeabi_dsub>
 8029bc6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8029bc8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8029bca:	0006      	movs	r6, r0
 8029bcc:	000f      	movs	r7, r1
 8029bce:	0020      	movs	r0, r4
 8029bd0:	0029      	movs	r1, r5
 8029bd2:	f7d9 f9a5 	bl	8002f20 <__aeabi_dsub>
 8029bd6:	0002      	movs	r2, r0
 8029bd8:	000b      	movs	r3, r1
 8029bda:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8029bdc:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8029bde:	f7d9 f99f 	bl	8002f20 <__aeabi_dsub>
 8029be2:	9a00      	ldr	r2, [sp, #0]
 8029be4:	9b01      	ldr	r3, [sp, #4]
 8029be6:	f7d8 feb5 	bl	8002954 <__aeabi_dmul>
 8029bea:	0002      	movs	r2, r0
 8029bec:	000b      	movs	r3, r1
 8029bee:	0030      	movs	r0, r6
 8029bf0:	0039      	movs	r1, r7
 8029bf2:	f7d9 f995 	bl	8002f20 <__aeabi_dsub>
 8029bf6:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8029bf8:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8029bfa:	f7d8 feab 	bl	8002954 <__aeabi_dmul>
 8029bfe:	9a08      	ldr	r2, [sp, #32]
 8029c00:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8029c02:	900a      	str	r0, [sp, #40]	@ 0x28
 8029c04:	910b      	str	r1, [sp, #44]	@ 0x2c
 8029c06:	0010      	movs	r0, r2
 8029c08:	0019      	movs	r1, r3
 8029c0a:	f7d8 fea3 	bl	8002954 <__aeabi_dmul>
 8029c0e:	0006      	movs	r6, r0
 8029c10:	000f      	movs	r7, r1
 8029c12:	4a98      	ldr	r2, [pc, #608]	@ (8029e74 <__ieee754_pow+0x7ac>)
 8029c14:	4b98      	ldr	r3, [pc, #608]	@ (8029e78 <__ieee754_pow+0x7b0>)
 8029c16:	f7d8 fe9d 	bl	8002954 <__aeabi_dmul>
 8029c1a:	4a98      	ldr	r2, [pc, #608]	@ (8029e7c <__ieee754_pow+0x7b4>)
 8029c1c:	4b98      	ldr	r3, [pc, #608]	@ (8029e80 <__ieee754_pow+0x7b8>)
 8029c1e:	f7d7 fe99 	bl	8001954 <__aeabi_dadd>
 8029c22:	0032      	movs	r2, r6
 8029c24:	003b      	movs	r3, r7
 8029c26:	f7d8 fe95 	bl	8002954 <__aeabi_dmul>
 8029c2a:	4a96      	ldr	r2, [pc, #600]	@ (8029e84 <__ieee754_pow+0x7bc>)
 8029c2c:	4b96      	ldr	r3, [pc, #600]	@ (8029e88 <__ieee754_pow+0x7c0>)
 8029c2e:	f7d7 fe91 	bl	8001954 <__aeabi_dadd>
 8029c32:	0032      	movs	r2, r6
 8029c34:	003b      	movs	r3, r7
 8029c36:	f7d8 fe8d 	bl	8002954 <__aeabi_dmul>
 8029c3a:	4a94      	ldr	r2, [pc, #592]	@ (8029e8c <__ieee754_pow+0x7c4>)
 8029c3c:	4b94      	ldr	r3, [pc, #592]	@ (8029e90 <__ieee754_pow+0x7c8>)
 8029c3e:	f7d7 fe89 	bl	8001954 <__aeabi_dadd>
 8029c42:	0032      	movs	r2, r6
 8029c44:	003b      	movs	r3, r7
 8029c46:	f7d8 fe85 	bl	8002954 <__aeabi_dmul>
 8029c4a:	4a92      	ldr	r2, [pc, #584]	@ (8029e94 <__ieee754_pow+0x7cc>)
 8029c4c:	4b92      	ldr	r3, [pc, #584]	@ (8029e98 <__ieee754_pow+0x7d0>)
 8029c4e:	f7d7 fe81 	bl	8001954 <__aeabi_dadd>
 8029c52:	0032      	movs	r2, r6
 8029c54:	003b      	movs	r3, r7
 8029c56:	f7d8 fe7d 	bl	8002954 <__aeabi_dmul>
 8029c5a:	4a90      	ldr	r2, [pc, #576]	@ (8029e9c <__ieee754_pow+0x7d4>)
 8029c5c:	4b90      	ldr	r3, [pc, #576]	@ (8029ea0 <__ieee754_pow+0x7d8>)
 8029c5e:	f7d7 fe79 	bl	8001954 <__aeabi_dadd>
 8029c62:	0032      	movs	r2, r6
 8029c64:	0004      	movs	r4, r0
 8029c66:	000d      	movs	r5, r1
 8029c68:	003b      	movs	r3, r7
 8029c6a:	0030      	movs	r0, r6
 8029c6c:	0039      	movs	r1, r7
 8029c6e:	f7d8 fe71 	bl	8002954 <__aeabi_dmul>
 8029c72:	0002      	movs	r2, r0
 8029c74:	000b      	movs	r3, r1
 8029c76:	0020      	movs	r0, r4
 8029c78:	0029      	movs	r1, r5
 8029c7a:	f7d8 fe6b 	bl	8002954 <__aeabi_dmul>
 8029c7e:	9a00      	ldr	r2, [sp, #0]
 8029c80:	9b01      	ldr	r3, [sp, #4]
 8029c82:	0004      	movs	r4, r0
 8029c84:	000d      	movs	r5, r1
 8029c86:	9808      	ldr	r0, [sp, #32]
 8029c88:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8029c8a:	f7d7 fe63 	bl	8001954 <__aeabi_dadd>
 8029c8e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8029c90:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8029c92:	f7d8 fe5f 	bl	8002954 <__aeabi_dmul>
 8029c96:	0022      	movs	r2, r4
 8029c98:	002b      	movs	r3, r5
 8029c9a:	f7d7 fe5b 	bl	8001954 <__aeabi_dadd>
 8029c9e:	9a00      	ldr	r2, [sp, #0]
 8029ca0:	9b01      	ldr	r3, [sp, #4]
 8029ca2:	900c      	str	r0, [sp, #48]	@ 0x30
 8029ca4:	910d      	str	r1, [sp, #52]	@ 0x34
 8029ca6:	0010      	movs	r0, r2
 8029ca8:	0019      	movs	r1, r3
 8029caa:	f7d8 fe53 	bl	8002954 <__aeabi_dmul>
 8029cae:	2200      	movs	r2, #0
 8029cb0:	4b7c      	ldr	r3, [pc, #496]	@ (8029ea4 <__ieee754_pow+0x7dc>)
 8029cb2:	0004      	movs	r4, r0
 8029cb4:	000d      	movs	r5, r1
 8029cb6:	f7d7 fe4d 	bl	8001954 <__aeabi_dadd>
 8029cba:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8029cbc:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8029cbe:	f7d7 fe49 	bl	8001954 <__aeabi_dadd>
 8029cc2:	2000      	movs	r0, #0
 8029cc4:	000f      	movs	r7, r1
 8029cc6:	0006      	movs	r6, r0
 8029cc8:	0002      	movs	r2, r0
 8029cca:	000b      	movs	r3, r1
 8029ccc:	9800      	ldr	r0, [sp, #0]
 8029cce:	9901      	ldr	r1, [sp, #4]
 8029cd0:	f7d8 fe40 	bl	8002954 <__aeabi_dmul>
 8029cd4:	2200      	movs	r2, #0
 8029cd6:	9000      	str	r0, [sp, #0]
 8029cd8:	9101      	str	r1, [sp, #4]
 8029cda:	4b72      	ldr	r3, [pc, #456]	@ (8029ea4 <__ieee754_pow+0x7dc>)
 8029cdc:	0030      	movs	r0, r6
 8029cde:	0039      	movs	r1, r7
 8029ce0:	f7d9 f91e 	bl	8002f20 <__aeabi_dsub>
 8029ce4:	0022      	movs	r2, r4
 8029ce6:	002b      	movs	r3, r5
 8029ce8:	f7d9 f91a 	bl	8002f20 <__aeabi_dsub>
 8029cec:	0002      	movs	r2, r0
 8029cee:	000b      	movs	r3, r1
 8029cf0:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8029cf2:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8029cf4:	f7d9 f914 	bl	8002f20 <__aeabi_dsub>
 8029cf8:	9a08      	ldr	r2, [sp, #32]
 8029cfa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8029cfc:	f7d8 fe2a 	bl	8002954 <__aeabi_dmul>
 8029d00:	0032      	movs	r2, r6
 8029d02:	0004      	movs	r4, r0
 8029d04:	000d      	movs	r5, r1
 8029d06:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8029d08:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8029d0a:	003b      	movs	r3, r7
 8029d0c:	f7d8 fe22 	bl	8002954 <__aeabi_dmul>
 8029d10:	0002      	movs	r2, r0
 8029d12:	000b      	movs	r3, r1
 8029d14:	0020      	movs	r0, r4
 8029d16:	0029      	movs	r1, r5
 8029d18:	f7d7 fe1c 	bl	8001954 <__aeabi_dadd>
 8029d1c:	0004      	movs	r4, r0
 8029d1e:	000d      	movs	r5, r1
 8029d20:	0002      	movs	r2, r0
 8029d22:	000b      	movs	r3, r1
 8029d24:	9800      	ldr	r0, [sp, #0]
 8029d26:	9901      	ldr	r1, [sp, #4]
 8029d28:	f7d7 fe14 	bl	8001954 <__aeabi_dadd>
 8029d2c:	22e0      	movs	r2, #224	@ 0xe0
 8029d2e:	2000      	movs	r0, #0
 8029d30:	4b5d      	ldr	r3, [pc, #372]	@ (8029ea8 <__ieee754_pow+0x7e0>)
 8029d32:	0612      	lsls	r2, r2, #24
 8029d34:	0006      	movs	r6, r0
 8029d36:	000f      	movs	r7, r1
 8029d38:	f7d8 fe0c 	bl	8002954 <__aeabi_dmul>
 8029d3c:	9008      	str	r0, [sp, #32]
 8029d3e:	9109      	str	r1, [sp, #36]	@ 0x24
 8029d40:	9a00      	ldr	r2, [sp, #0]
 8029d42:	9b01      	ldr	r3, [sp, #4]
 8029d44:	0030      	movs	r0, r6
 8029d46:	0039      	movs	r1, r7
 8029d48:	f7d9 f8ea 	bl	8002f20 <__aeabi_dsub>
 8029d4c:	0002      	movs	r2, r0
 8029d4e:	000b      	movs	r3, r1
 8029d50:	0020      	movs	r0, r4
 8029d52:	0029      	movs	r1, r5
 8029d54:	f7d9 f8e4 	bl	8002f20 <__aeabi_dsub>
 8029d58:	4a54      	ldr	r2, [pc, #336]	@ (8029eac <__ieee754_pow+0x7e4>)
 8029d5a:	4b53      	ldr	r3, [pc, #332]	@ (8029ea8 <__ieee754_pow+0x7e0>)
 8029d5c:	f7d8 fdfa 	bl	8002954 <__aeabi_dmul>
 8029d60:	4a53      	ldr	r2, [pc, #332]	@ (8029eb0 <__ieee754_pow+0x7e8>)
 8029d62:	0004      	movs	r4, r0
 8029d64:	000d      	movs	r5, r1
 8029d66:	0030      	movs	r0, r6
 8029d68:	0039      	movs	r1, r7
 8029d6a:	4b52      	ldr	r3, [pc, #328]	@ (8029eb4 <__ieee754_pow+0x7ec>)
 8029d6c:	f7d8 fdf2 	bl	8002954 <__aeabi_dmul>
 8029d70:	0002      	movs	r2, r0
 8029d72:	000b      	movs	r3, r1
 8029d74:	0020      	movs	r0, r4
 8029d76:	0029      	movs	r1, r5
 8029d78:	f7d7 fdec 	bl	8001954 <__aeabi_dadd>
 8029d7c:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8029d7e:	4b4e      	ldr	r3, [pc, #312]	@ (8029eb8 <__ieee754_pow+0x7f0>)
 8029d80:	189b      	adds	r3, r3, r2
 8029d82:	681a      	ldr	r2, [r3, #0]
 8029d84:	685b      	ldr	r3, [r3, #4]
 8029d86:	f7d7 fde5 	bl	8001954 <__aeabi_dadd>
 8029d8a:	900a      	str	r0, [sp, #40]	@ 0x28
 8029d8c:	910b      	str	r1, [sp, #44]	@ 0x2c
 8029d8e:	980e      	ldr	r0, [sp, #56]	@ 0x38
 8029d90:	f7d9 fd2e 	bl	80037f0 <__aeabi_i2d>
 8029d94:	0004      	movs	r4, r0
 8029d96:	000d      	movs	r5, r1
 8029d98:	9808      	ldr	r0, [sp, #32]
 8029d9a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8029d9c:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8029d9e:	4b47      	ldr	r3, [pc, #284]	@ (8029ebc <__ieee754_pow+0x7f4>)
 8029da0:	189b      	adds	r3, r3, r2
 8029da2:	681e      	ldr	r6, [r3, #0]
 8029da4:	685f      	ldr	r7, [r3, #4]
 8029da6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8029da8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8029daa:	f7d7 fdd3 	bl	8001954 <__aeabi_dadd>
 8029dae:	0032      	movs	r2, r6
 8029db0:	003b      	movs	r3, r7
 8029db2:	f7d7 fdcf 	bl	8001954 <__aeabi_dadd>
 8029db6:	0022      	movs	r2, r4
 8029db8:	002b      	movs	r3, r5
 8029dba:	f7d7 fdcb 	bl	8001954 <__aeabi_dadd>
 8029dbe:	2000      	movs	r0, #0
 8029dc0:	0022      	movs	r2, r4
 8029dc2:	002b      	movs	r3, r5
 8029dc4:	9000      	str	r0, [sp, #0]
 8029dc6:	9101      	str	r1, [sp, #4]
 8029dc8:	f7d9 f8aa 	bl	8002f20 <__aeabi_dsub>
 8029dcc:	0032      	movs	r2, r6
 8029dce:	003b      	movs	r3, r7
 8029dd0:	f7d9 f8a6 	bl	8002f20 <__aeabi_dsub>
 8029dd4:	9a08      	ldr	r2, [sp, #32]
 8029dd6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8029dd8:	f7d9 f8a2 	bl	8002f20 <__aeabi_dsub>
 8029ddc:	0002      	movs	r2, r0
 8029dde:	000b      	movs	r3, r1
 8029de0:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8029de2:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8029de4:	e61f      	b.n	8029a26 <__ieee754_pow+0x35e>
 8029de6:	4a36      	ldr	r2, [pc, #216]	@ (8029ec0 <__ieee754_pow+0x7f8>)
 8029de8:	4b36      	ldr	r3, [pc, #216]	@ (8029ec4 <__ieee754_pow+0x7fc>)
 8029dea:	9804      	ldr	r0, [sp, #16]
 8029dec:	9905      	ldr	r1, [sp, #20]
 8029dee:	f7d7 fdb1 	bl	8001954 <__aeabi_dadd>
 8029df2:	9a00      	ldr	r2, [sp, #0]
 8029df4:	9b01      	ldr	r3, [sp, #4]
 8029df6:	0004      	movs	r4, r0
 8029df8:	000d      	movs	r5, r1
 8029dfa:	0030      	movs	r0, r6
 8029dfc:	0039      	movs	r1, r7
 8029dfe:	f7d9 f88f 	bl	8002f20 <__aeabi_dsub>
 8029e02:	0002      	movs	r2, r0
 8029e04:	000b      	movs	r3, r1
 8029e06:	0020      	movs	r0, r4
 8029e08:	0029      	movs	r1, r5
 8029e0a:	f7d6 fb6b 	bl	80004e4 <__aeabi_dcmpgt>
 8029e0e:	2800      	cmp	r0, #0
 8029e10:	d000      	beq.n	8029e14 <__ieee754_pow+0x74c>
 8029e12:	e646      	b.n	8029aa2 <__ieee754_pow+0x3da>
 8029e14:	4b2c      	ldr	r3, [pc, #176]	@ (8029ec8 <__ieee754_pow+0x800>)
 8029e16:	e063      	b.n	8029ee0 <__ieee754_pow+0x818>
 8029e18:	4a2c      	ldr	r2, [pc, #176]	@ (8029ecc <__ieee754_pow+0x804>)
 8029e1a:	004b      	lsls	r3, r1, #1
 8029e1c:	085b      	lsrs	r3, r3, #1
 8029e1e:	4293      	cmp	r3, r2
 8029e20:	d95a      	bls.n	8029ed8 <__ieee754_pow+0x810>
 8029e22:	4b2b      	ldr	r3, [pc, #172]	@ (8029ed0 <__ieee754_pow+0x808>)
 8029e24:	18cb      	adds	r3, r1, r3
 8029e26:	4303      	orrs	r3, r0
 8029e28:	d008      	beq.n	8029e3c <__ieee754_pow+0x774>
 8029e2a:	9806      	ldr	r0, [sp, #24]
 8029e2c:	9907      	ldr	r1, [sp, #28]
 8029e2e:	2300      	movs	r3, #0
 8029e30:	2200      	movs	r2, #0
 8029e32:	f7d6 fb43 	bl	80004bc <__aeabi_dcmplt>
 8029e36:	1e43      	subs	r3, r0, #1
 8029e38:	4198      	sbcs	r0, r3
 8029e3a:	e567      	b.n	802990c <__ieee754_pow+0x244>
 8029e3c:	9a00      	ldr	r2, [sp, #0]
 8029e3e:	9b01      	ldr	r3, [sp, #4]
 8029e40:	f7d9 f86e 	bl	8002f20 <__aeabi_dsub>
 8029e44:	9a04      	ldr	r2, [sp, #16]
 8029e46:	9b05      	ldr	r3, [sp, #20]
 8029e48:	f7d6 fb56 	bl	80004f8 <__aeabi_dcmpge>
 8029e4c:	2800      	cmp	r0, #0
 8029e4e:	d1ec      	bne.n	8029e2a <__ieee754_pow+0x762>
 8029e50:	4b20      	ldr	r3, [pc, #128]	@ (8029ed4 <__ieee754_pow+0x80c>)
 8029e52:	e045      	b.n	8029ee0 <__ieee754_pow+0x818>
 8029e54:	7ff00000 	.word	0x7ff00000
 8029e58:	43400000 	.word	0x43400000
 8029e5c:	fffffc01 	.word	0xfffffc01
 8029e60:	3ff00000 	.word	0x3ff00000
 8029e64:	0003988e 	.word	0x0003988e
 8029e68:	000bb679 	.word	0x000bb679
 8029e6c:	fff00000 	.word	0xfff00000
 8029e70:	0802ee68 	.word	0x0802ee68
 8029e74:	4a454eef 	.word	0x4a454eef
 8029e78:	3fca7e28 	.word	0x3fca7e28
 8029e7c:	93c9db65 	.word	0x93c9db65
 8029e80:	3fcd864a 	.word	0x3fcd864a
 8029e84:	a91d4101 	.word	0xa91d4101
 8029e88:	3fd17460 	.word	0x3fd17460
 8029e8c:	518f264d 	.word	0x518f264d
 8029e90:	3fd55555 	.word	0x3fd55555
 8029e94:	db6fabff 	.word	0xdb6fabff
 8029e98:	3fdb6db6 	.word	0x3fdb6db6
 8029e9c:	33333303 	.word	0x33333303
 8029ea0:	3fe33333 	.word	0x3fe33333
 8029ea4:	40080000 	.word	0x40080000
 8029ea8:	3feec709 	.word	0x3feec709
 8029eac:	dc3a03fd 	.word	0xdc3a03fd
 8029eb0:	145b01f5 	.word	0x145b01f5
 8029eb4:	be3e2fe0 	.word	0xbe3e2fe0
 8029eb8:	0802ee48 	.word	0x0802ee48
 8029ebc:	0802ee58 	.word	0x0802ee58
 8029ec0:	652b82fe 	.word	0x652b82fe
 8029ec4:	3c971547 	.word	0x3c971547
 8029ec8:	40900000 	.word	0x40900000
 8029ecc:	4090cbff 	.word	0x4090cbff
 8029ed0:	3f6f3400 	.word	0x3f6f3400
 8029ed4:	4090cc00 	.word	0x4090cc00
 8029ed8:	4a73      	ldr	r2, [pc, #460]	@ (802a0a8 <__ieee754_pow+0x9e0>)
 8029eda:	9402      	str	r4, [sp, #8]
 8029edc:	4293      	cmp	r3, r2
 8029ede:	d925      	bls.n	8029f2c <__ieee754_pow+0x864>
 8029ee0:	4a72      	ldr	r2, [pc, #456]	@ (802a0ac <__ieee754_pow+0x9e4>)
 8029ee2:	151b      	asrs	r3, r3, #20
 8029ee4:	189b      	adds	r3, r3, r2
 8029ee6:	2280      	movs	r2, #128	@ 0x80
 8029ee8:	0352      	lsls	r2, r2, #13
 8029eea:	0011      	movs	r1, r2
 8029eec:	4119      	asrs	r1, r3
 8029eee:	19cb      	adds	r3, r1, r7
 8029ef0:	005c      	lsls	r4, r3, #1
 8029ef2:	496f      	ldr	r1, [pc, #444]	@ (802a0b0 <__ieee754_pow+0x9e8>)
 8029ef4:	4d6f      	ldr	r5, [pc, #444]	@ (802a0b4 <__ieee754_pow+0x9ec>)
 8029ef6:	0d64      	lsrs	r4, r4, #21
 8029ef8:	1864      	adds	r4, r4, r1
 8029efa:	4125      	asrs	r5, r4
 8029efc:	401d      	ands	r5, r3
 8029efe:	031b      	lsls	r3, r3, #12
 8029f00:	0b1b      	lsrs	r3, r3, #12
 8029f02:	4313      	orrs	r3, r2
 8029f04:	2214      	movs	r2, #20
 8029f06:	1b12      	subs	r2, r2, r4
 8029f08:	4113      	asrs	r3, r2
 8029f0a:	9302      	str	r3, [sp, #8]
 8029f0c:	9b08      	ldr	r3, [sp, #32]
 8029f0e:	2000      	movs	r0, #0
 8029f10:	0029      	movs	r1, r5
 8029f12:	2b00      	cmp	r3, #0
 8029f14:	da02      	bge.n	8029f1c <__ieee754_pow+0x854>
 8029f16:	9b02      	ldr	r3, [sp, #8]
 8029f18:	425b      	negs	r3, r3
 8029f1a:	9302      	str	r3, [sp, #8]
 8029f1c:	0002      	movs	r2, r0
 8029f1e:	000b      	movs	r3, r1
 8029f20:	9800      	ldr	r0, [sp, #0]
 8029f22:	9901      	ldr	r1, [sp, #4]
 8029f24:	f7d8 fffc 	bl	8002f20 <__aeabi_dsub>
 8029f28:	9000      	str	r0, [sp, #0]
 8029f2a:	9101      	str	r1, [sp, #4]
 8029f2c:	9a04      	ldr	r2, [sp, #16]
 8029f2e:	9b05      	ldr	r3, [sp, #20]
 8029f30:	9800      	ldr	r0, [sp, #0]
 8029f32:	9901      	ldr	r1, [sp, #4]
 8029f34:	f7d7 fd0e 	bl	8001954 <__aeabi_dadd>
 8029f38:	2000      	movs	r0, #0
 8029f3a:	2200      	movs	r2, #0
 8029f3c:	4b5e      	ldr	r3, [pc, #376]	@ (802a0b8 <__ieee754_pow+0x9f0>)
 8029f3e:	0006      	movs	r6, r0
 8029f40:	000f      	movs	r7, r1
 8029f42:	f7d8 fd07 	bl	8002954 <__aeabi_dmul>
 8029f46:	9a00      	ldr	r2, [sp, #0]
 8029f48:	9b01      	ldr	r3, [sp, #4]
 8029f4a:	9008      	str	r0, [sp, #32]
 8029f4c:	9109      	str	r1, [sp, #36]	@ 0x24
 8029f4e:	0030      	movs	r0, r6
 8029f50:	0039      	movs	r1, r7
 8029f52:	f7d8 ffe5 	bl	8002f20 <__aeabi_dsub>
 8029f56:	0002      	movs	r2, r0
 8029f58:	000b      	movs	r3, r1
 8029f5a:	9804      	ldr	r0, [sp, #16]
 8029f5c:	9905      	ldr	r1, [sp, #20]
 8029f5e:	f7d8 ffdf 	bl	8002f20 <__aeabi_dsub>
 8029f62:	4a56      	ldr	r2, [pc, #344]	@ (802a0bc <__ieee754_pow+0x9f4>)
 8029f64:	4b56      	ldr	r3, [pc, #344]	@ (802a0c0 <__ieee754_pow+0x9f8>)
 8029f66:	f7d8 fcf5 	bl	8002954 <__aeabi_dmul>
 8029f6a:	4a56      	ldr	r2, [pc, #344]	@ (802a0c4 <__ieee754_pow+0x9fc>)
 8029f6c:	0004      	movs	r4, r0
 8029f6e:	000d      	movs	r5, r1
 8029f70:	0030      	movs	r0, r6
 8029f72:	0039      	movs	r1, r7
 8029f74:	4b54      	ldr	r3, [pc, #336]	@ (802a0c8 <__ieee754_pow+0xa00>)
 8029f76:	f7d8 fced 	bl	8002954 <__aeabi_dmul>
 8029f7a:	0002      	movs	r2, r0
 8029f7c:	000b      	movs	r3, r1
 8029f7e:	0020      	movs	r0, r4
 8029f80:	0029      	movs	r1, r5
 8029f82:	f7d7 fce7 	bl	8001954 <__aeabi_dadd>
 8029f86:	0004      	movs	r4, r0
 8029f88:	000d      	movs	r5, r1
 8029f8a:	0002      	movs	r2, r0
 8029f8c:	000b      	movs	r3, r1
 8029f8e:	9808      	ldr	r0, [sp, #32]
 8029f90:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8029f92:	f7d7 fcdf 	bl	8001954 <__aeabi_dadd>
 8029f96:	9a08      	ldr	r2, [sp, #32]
 8029f98:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8029f9a:	0006      	movs	r6, r0
 8029f9c:	000f      	movs	r7, r1
 8029f9e:	f7d8 ffbf 	bl	8002f20 <__aeabi_dsub>
 8029fa2:	0002      	movs	r2, r0
 8029fa4:	000b      	movs	r3, r1
 8029fa6:	0020      	movs	r0, r4
 8029fa8:	0029      	movs	r1, r5
 8029faa:	f7d8 ffb9 	bl	8002f20 <__aeabi_dsub>
 8029fae:	0032      	movs	r2, r6
 8029fb0:	9000      	str	r0, [sp, #0]
 8029fb2:	9101      	str	r1, [sp, #4]
 8029fb4:	003b      	movs	r3, r7
 8029fb6:	0030      	movs	r0, r6
 8029fb8:	0039      	movs	r1, r7
 8029fba:	f7d8 fccb 	bl	8002954 <__aeabi_dmul>
 8029fbe:	0004      	movs	r4, r0
 8029fc0:	000d      	movs	r5, r1
 8029fc2:	4a42      	ldr	r2, [pc, #264]	@ (802a0cc <__ieee754_pow+0xa04>)
 8029fc4:	4b42      	ldr	r3, [pc, #264]	@ (802a0d0 <__ieee754_pow+0xa08>)
 8029fc6:	f7d8 fcc5 	bl	8002954 <__aeabi_dmul>
 8029fca:	4a42      	ldr	r2, [pc, #264]	@ (802a0d4 <__ieee754_pow+0xa0c>)
 8029fcc:	4b42      	ldr	r3, [pc, #264]	@ (802a0d8 <__ieee754_pow+0xa10>)
 8029fce:	f7d8 ffa7 	bl	8002f20 <__aeabi_dsub>
 8029fd2:	0022      	movs	r2, r4
 8029fd4:	002b      	movs	r3, r5
 8029fd6:	f7d8 fcbd 	bl	8002954 <__aeabi_dmul>
 8029fda:	4a40      	ldr	r2, [pc, #256]	@ (802a0dc <__ieee754_pow+0xa14>)
 8029fdc:	4b40      	ldr	r3, [pc, #256]	@ (802a0e0 <__ieee754_pow+0xa18>)
 8029fde:	f7d7 fcb9 	bl	8001954 <__aeabi_dadd>
 8029fe2:	0022      	movs	r2, r4
 8029fe4:	002b      	movs	r3, r5
 8029fe6:	f7d8 fcb5 	bl	8002954 <__aeabi_dmul>
 8029fea:	4a3e      	ldr	r2, [pc, #248]	@ (802a0e4 <__ieee754_pow+0xa1c>)
 8029fec:	4b3e      	ldr	r3, [pc, #248]	@ (802a0e8 <__ieee754_pow+0xa20>)
 8029fee:	f7d8 ff97 	bl	8002f20 <__aeabi_dsub>
 8029ff2:	0022      	movs	r2, r4
 8029ff4:	002b      	movs	r3, r5
 8029ff6:	f7d8 fcad 	bl	8002954 <__aeabi_dmul>
 8029ffa:	4a3c      	ldr	r2, [pc, #240]	@ (802a0ec <__ieee754_pow+0xa24>)
 8029ffc:	4b3c      	ldr	r3, [pc, #240]	@ (802a0f0 <__ieee754_pow+0xa28>)
 8029ffe:	f7d7 fca9 	bl	8001954 <__aeabi_dadd>
 802a002:	0022      	movs	r2, r4
 802a004:	002b      	movs	r3, r5
 802a006:	f7d8 fca5 	bl	8002954 <__aeabi_dmul>
 802a00a:	0002      	movs	r2, r0
 802a00c:	000b      	movs	r3, r1
 802a00e:	0030      	movs	r0, r6
 802a010:	0039      	movs	r1, r7
 802a012:	f7d8 ff85 	bl	8002f20 <__aeabi_dsub>
 802a016:	0004      	movs	r4, r0
 802a018:	000d      	movs	r5, r1
 802a01a:	0002      	movs	r2, r0
 802a01c:	000b      	movs	r3, r1
 802a01e:	0030      	movs	r0, r6
 802a020:	0039      	movs	r1, r7
 802a022:	f7d8 fc97 	bl	8002954 <__aeabi_dmul>
 802a026:	2380      	movs	r3, #128	@ 0x80
 802a028:	9004      	str	r0, [sp, #16]
 802a02a:	9105      	str	r1, [sp, #20]
 802a02c:	2200      	movs	r2, #0
 802a02e:	0020      	movs	r0, r4
 802a030:	0029      	movs	r1, r5
 802a032:	05db      	lsls	r3, r3, #23
 802a034:	f7d8 ff74 	bl	8002f20 <__aeabi_dsub>
 802a038:	0002      	movs	r2, r0
 802a03a:	000b      	movs	r3, r1
 802a03c:	9804      	ldr	r0, [sp, #16]
 802a03e:	9905      	ldr	r1, [sp, #20]
 802a040:	f7d8 f84e 	bl	80020e0 <__aeabi_ddiv>
 802a044:	9a00      	ldr	r2, [sp, #0]
 802a046:	9b01      	ldr	r3, [sp, #4]
 802a048:	0004      	movs	r4, r0
 802a04a:	000d      	movs	r5, r1
 802a04c:	0030      	movs	r0, r6
 802a04e:	0039      	movs	r1, r7
 802a050:	f7d8 fc80 	bl	8002954 <__aeabi_dmul>
 802a054:	9a00      	ldr	r2, [sp, #0]
 802a056:	9b01      	ldr	r3, [sp, #4]
 802a058:	f7d7 fc7c 	bl	8001954 <__aeabi_dadd>
 802a05c:	0002      	movs	r2, r0
 802a05e:	000b      	movs	r3, r1
 802a060:	0020      	movs	r0, r4
 802a062:	0029      	movs	r1, r5
 802a064:	f7d8 ff5c 	bl	8002f20 <__aeabi_dsub>
 802a068:	0032      	movs	r2, r6
 802a06a:	003b      	movs	r3, r7
 802a06c:	f7d8 ff58 	bl	8002f20 <__aeabi_dsub>
 802a070:	0002      	movs	r2, r0
 802a072:	000b      	movs	r3, r1
 802a074:	2000      	movs	r0, #0
 802a076:	491f      	ldr	r1, [pc, #124]	@ (802a0f4 <__ieee754_pow+0xa2c>)
 802a078:	f7d8 ff52 	bl	8002f20 <__aeabi_dsub>
 802a07c:	9b02      	ldr	r3, [sp, #8]
 802a07e:	051b      	lsls	r3, r3, #20
 802a080:	185b      	adds	r3, r3, r1
 802a082:	151a      	asrs	r2, r3, #20
 802a084:	2a00      	cmp	r2, #0
 802a086:	dc06      	bgt.n	802a096 <__ieee754_pow+0x9ce>
 802a088:	9a02      	ldr	r2, [sp, #8]
 802a08a:	f000 f929 	bl	802a2e0 <scalbn>
 802a08e:	9a06      	ldr	r2, [sp, #24]
 802a090:	9b07      	ldr	r3, [sp, #28]
 802a092:	f7ff fb8b 	bl	80297ac <__ieee754_pow+0xe4>
 802a096:	0019      	movs	r1, r3
 802a098:	e7f9      	b.n	802a08e <__ieee754_pow+0x9c6>
 802a09a:	2300      	movs	r3, #0
 802a09c:	4c15      	ldr	r4, [pc, #84]	@ (802a0f4 <__ieee754_pow+0xa2c>)
 802a09e:	9300      	str	r3, [sp, #0]
 802a0a0:	9401      	str	r4, [sp, #4]
 802a0a2:	f7ff fbc8 	bl	8029836 <__ieee754_pow+0x16e>
 802a0a6:	46c0      	nop			@ (mov r8, r8)
 802a0a8:	3fe00000 	.word	0x3fe00000
 802a0ac:	fffffc02 	.word	0xfffffc02
 802a0b0:	fffffc01 	.word	0xfffffc01
 802a0b4:	fff00000 	.word	0xfff00000
 802a0b8:	3fe62e43 	.word	0x3fe62e43
 802a0bc:	fefa39ef 	.word	0xfefa39ef
 802a0c0:	3fe62e42 	.word	0x3fe62e42
 802a0c4:	0ca86c39 	.word	0x0ca86c39
 802a0c8:	be205c61 	.word	0xbe205c61
 802a0cc:	72bea4d0 	.word	0x72bea4d0
 802a0d0:	3e663769 	.word	0x3e663769
 802a0d4:	c5d26bf1 	.word	0xc5d26bf1
 802a0d8:	3ebbbd41 	.word	0x3ebbbd41
 802a0dc:	af25de2c 	.word	0xaf25de2c
 802a0e0:	3f11566a 	.word	0x3f11566a
 802a0e4:	16bebd93 	.word	0x16bebd93
 802a0e8:	3f66c16c 	.word	0x3f66c16c
 802a0ec:	5555553e 	.word	0x5555553e
 802a0f0:	3fc55555 	.word	0x3fc55555
 802a0f4:	3ff00000 	.word	0x3ff00000

0802a0f8 <fabs>:
 802a0f8:	0049      	lsls	r1, r1, #1
 802a0fa:	084b      	lsrs	r3, r1, #1
 802a0fc:	0019      	movs	r1, r3
 802a0fe:	4770      	bx	lr

0802a100 <__ieee754_expf>:
 802a100:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 802a102:	21ff      	movs	r1, #255	@ 0xff
 802a104:	0043      	lsls	r3, r0, #1
 802a106:	1c04      	adds	r4, r0, #0
 802a108:	085b      	lsrs	r3, r3, #1
 802a10a:	05c9      	lsls	r1, r1, #23
 802a10c:	428b      	cmp	r3, r1
 802a10e:	d904      	bls.n	802a11a <__ieee754_expf+0x1a>
 802a110:	1c01      	adds	r1, r0, #0
 802a112:	1c20      	adds	r0, r4, #0
 802a114:	f7d6 fbd4 	bl	80008c0 <__aeabi_fadd>
 802a118:	e00d      	b.n	802a136 <__ieee754_expf+0x36>
 802a11a:	0fc6      	lsrs	r6, r0, #31
 802a11c:	428b      	cmp	r3, r1
 802a11e:	d104      	bne.n	802a12a <__ieee754_expf+0x2a>
 802a120:	2e00      	cmp	r6, #0
 802a122:	d000      	beq.n	802a126 <__ieee754_expf+0x26>
 802a124:	e0ba      	b.n	802a29c <__ieee754_expf+0x19c>
 802a126:	1c20      	adds	r0, r4, #0
 802a128:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 802a12a:	495d      	ldr	r1, [pc, #372]	@ (802a2a0 <__ieee754_expf+0x1a0>)
 802a12c:	4288      	cmp	r0, r1
 802a12e:	dd04      	ble.n	802a13a <__ieee754_expf+0x3a>
 802a130:	2000      	movs	r0, #0
 802a132:	f000 f98a 	bl	802a44a <__math_oflowf>
 802a136:	1c04      	adds	r4, r0, #0
 802a138:	e7f5      	b.n	802a126 <__ieee754_expf+0x26>
 802a13a:	2800      	cmp	r0, #0
 802a13c:	da06      	bge.n	802a14c <__ieee754_expf+0x4c>
 802a13e:	4a59      	ldr	r2, [pc, #356]	@ (802a2a4 <__ieee754_expf+0x1a4>)
 802a140:	4293      	cmp	r3, r2
 802a142:	d903      	bls.n	802a14c <__ieee754_expf+0x4c>
 802a144:	2000      	movs	r0, #0
 802a146:	f000 f97a 	bl	802a43e <__math_uflowf>
 802a14a:	e7f4      	b.n	802a136 <__ieee754_expf+0x36>
 802a14c:	4a56      	ldr	r2, [pc, #344]	@ (802a2a8 <__ieee754_expf+0x1a8>)
 802a14e:	4293      	cmp	r3, r2
 802a150:	d96e      	bls.n	802a230 <__ieee754_expf+0x130>
 802a152:	4a56      	ldr	r2, [pc, #344]	@ (802a2ac <__ieee754_expf+0x1ac>)
 802a154:	00b5      	lsls	r5, r6, #2
 802a156:	4293      	cmp	r3, r2
 802a158:	d84e      	bhi.n	802a1f8 <__ieee754_expf+0xf8>
 802a15a:	4b55      	ldr	r3, [pc, #340]	@ (802a2b0 <__ieee754_expf+0x1b0>)
 802a15c:	1c20      	adds	r0, r4, #0
 802a15e:	5959      	ldr	r1, [r3, r5]
 802a160:	f7d7 f8c8 	bl	80012f4 <__aeabi_fsub>
 802a164:	4b53      	ldr	r3, [pc, #332]	@ (802a2b4 <__ieee754_expf+0x1b4>)
 802a166:	1c07      	adds	r7, r0, #0
 802a168:	595b      	ldr	r3, [r3, r5]
 802a16a:	2501      	movs	r5, #1
 802a16c:	4075      	eors	r5, r6
 802a16e:	9300      	str	r3, [sp, #0]
 802a170:	1bad      	subs	r5, r5, r6
 802a172:	9900      	ldr	r1, [sp, #0]
 802a174:	1c38      	adds	r0, r7, #0
 802a176:	f7d7 f8bd 	bl	80012f4 <__aeabi_fsub>
 802a17a:	1c04      	adds	r4, r0, #0
 802a17c:	1c21      	adds	r1, r4, #0
 802a17e:	1c20      	adds	r0, r4, #0
 802a180:	f7d6 ff5e 	bl	8001040 <__aeabi_fmul>
 802a184:	494c      	ldr	r1, [pc, #304]	@ (802a2b8 <__ieee754_expf+0x1b8>)
 802a186:	1c06      	adds	r6, r0, #0
 802a188:	f7d6 ff5a 	bl	8001040 <__aeabi_fmul>
 802a18c:	494b      	ldr	r1, [pc, #300]	@ (802a2bc <__ieee754_expf+0x1bc>)
 802a18e:	f7d7 f8b1 	bl	80012f4 <__aeabi_fsub>
 802a192:	1c31      	adds	r1, r6, #0
 802a194:	f7d6 ff54 	bl	8001040 <__aeabi_fmul>
 802a198:	4949      	ldr	r1, [pc, #292]	@ (802a2c0 <__ieee754_expf+0x1c0>)
 802a19a:	f7d6 fb91 	bl	80008c0 <__aeabi_fadd>
 802a19e:	1c31      	adds	r1, r6, #0
 802a1a0:	f7d6 ff4e 	bl	8001040 <__aeabi_fmul>
 802a1a4:	4947      	ldr	r1, [pc, #284]	@ (802a2c4 <__ieee754_expf+0x1c4>)
 802a1a6:	f7d7 f8a5 	bl	80012f4 <__aeabi_fsub>
 802a1aa:	1c31      	adds	r1, r6, #0
 802a1ac:	f7d6 ff48 	bl	8001040 <__aeabi_fmul>
 802a1b0:	4945      	ldr	r1, [pc, #276]	@ (802a2c8 <__ieee754_expf+0x1c8>)
 802a1b2:	f7d6 fb85 	bl	80008c0 <__aeabi_fadd>
 802a1b6:	1c31      	adds	r1, r6, #0
 802a1b8:	f7d6 ff42 	bl	8001040 <__aeabi_fmul>
 802a1bc:	1c01      	adds	r1, r0, #0
 802a1be:	1c20      	adds	r0, r4, #0
 802a1c0:	f7d7 f898 	bl	80012f4 <__aeabi_fsub>
 802a1c4:	1c01      	adds	r1, r0, #0
 802a1c6:	1c06      	adds	r6, r0, #0
 802a1c8:	1c20      	adds	r0, r4, #0
 802a1ca:	f7d6 ff39 	bl	8001040 <__aeabi_fmul>
 802a1ce:	9001      	str	r0, [sp, #4]
 802a1d0:	2d00      	cmp	r5, #0
 802a1d2:	d140      	bne.n	802a256 <__ieee754_expf+0x156>
 802a1d4:	2180      	movs	r1, #128	@ 0x80
 802a1d6:	1c30      	adds	r0, r6, #0
 802a1d8:	05c9      	lsls	r1, r1, #23
 802a1da:	f7d7 f88b 	bl	80012f4 <__aeabi_fsub>
 802a1de:	1c01      	adds	r1, r0, #0
 802a1e0:	9801      	ldr	r0, [sp, #4]
 802a1e2:	f7d6 fd5f 	bl	8000ca4 <__aeabi_fdiv>
 802a1e6:	1c21      	adds	r1, r4, #0
 802a1e8:	f7d7 f884 	bl	80012f4 <__aeabi_fsub>
 802a1ec:	1c01      	adds	r1, r0, #0
 802a1ee:	20fe      	movs	r0, #254	@ 0xfe
 802a1f0:	0580      	lsls	r0, r0, #22
 802a1f2:	f7d7 f87f 	bl	80012f4 <__aeabi_fsub>
 802a1f6:	e79e      	b.n	802a136 <__ieee754_expf+0x36>
 802a1f8:	4934      	ldr	r1, [pc, #208]	@ (802a2cc <__ieee754_expf+0x1cc>)
 802a1fa:	1c20      	adds	r0, r4, #0
 802a1fc:	f7d6 ff20 	bl	8001040 <__aeabi_fmul>
 802a200:	4b33      	ldr	r3, [pc, #204]	@ (802a2d0 <__ieee754_expf+0x1d0>)
 802a202:	5959      	ldr	r1, [r3, r5]
 802a204:	f7d6 fb5c 	bl	80008c0 <__aeabi_fadd>
 802a208:	f7d7 faee 	bl	80017e8 <__aeabi_f2iz>
 802a20c:	0005      	movs	r5, r0
 802a20e:	f7d7 fb0b 	bl	8001828 <__aeabi_i2f>
 802a212:	4930      	ldr	r1, [pc, #192]	@ (802a2d4 <__ieee754_expf+0x1d4>)
 802a214:	1c06      	adds	r6, r0, #0
 802a216:	f7d6 ff13 	bl	8001040 <__aeabi_fmul>
 802a21a:	1c01      	adds	r1, r0, #0
 802a21c:	1c20      	adds	r0, r4, #0
 802a21e:	f7d7 f869 	bl	80012f4 <__aeabi_fsub>
 802a222:	492d      	ldr	r1, [pc, #180]	@ (802a2d8 <__ieee754_expf+0x1d8>)
 802a224:	1c07      	adds	r7, r0, #0
 802a226:	1c30      	adds	r0, r6, #0
 802a228:	f7d6 ff0a 	bl	8001040 <__aeabi_fmul>
 802a22c:	9000      	str	r0, [sp, #0]
 802a22e:	e7a0      	b.n	802a172 <__ieee754_expf+0x72>
 802a230:	22d0      	movs	r2, #208	@ 0xd0
 802a232:	0592      	lsls	r2, r2, #22
 802a234:	4293      	cmp	r3, r2
 802a236:	d20c      	bcs.n	802a252 <__ieee754_expf+0x152>
 802a238:	4928      	ldr	r1, [pc, #160]	@ (802a2dc <__ieee754_expf+0x1dc>)
 802a23a:	1c20      	adds	r0, r4, #0
 802a23c:	f7d6 fb40 	bl	80008c0 <__aeabi_fadd>
 802a240:	21fe      	movs	r1, #254	@ 0xfe
 802a242:	0589      	lsls	r1, r1, #22
 802a244:	f7d6 f988 	bl	8000558 <__aeabi_fcmpgt>
 802a248:	1e05      	subs	r5, r0, #0
 802a24a:	d097      	beq.n	802a17c <__ieee754_expf+0x7c>
 802a24c:	21fe      	movs	r1, #254	@ 0xfe
 802a24e:	0589      	lsls	r1, r1, #22
 802a250:	e75f      	b.n	802a112 <__ieee754_expf+0x12>
 802a252:	2500      	movs	r5, #0
 802a254:	e792      	b.n	802a17c <__ieee754_expf+0x7c>
 802a256:	2080      	movs	r0, #128	@ 0x80
 802a258:	1c31      	adds	r1, r6, #0
 802a25a:	05c0      	lsls	r0, r0, #23
 802a25c:	f7d7 f84a 	bl	80012f4 <__aeabi_fsub>
 802a260:	1c01      	adds	r1, r0, #0
 802a262:	9801      	ldr	r0, [sp, #4]
 802a264:	f7d6 fd1e 	bl	8000ca4 <__aeabi_fdiv>
 802a268:	1c01      	adds	r1, r0, #0
 802a26a:	9800      	ldr	r0, [sp, #0]
 802a26c:	f7d7 f842 	bl	80012f4 <__aeabi_fsub>
 802a270:	1c39      	adds	r1, r7, #0
 802a272:	f7d7 f83f 	bl	80012f4 <__aeabi_fsub>
 802a276:	1c01      	adds	r1, r0, #0
 802a278:	20fe      	movs	r0, #254	@ 0xfe
 802a27a:	0580      	lsls	r0, r0, #22
 802a27c:	f7d7 f83a 	bl	80012f4 <__aeabi_fsub>
 802a280:	002b      	movs	r3, r5
 802a282:	337d      	adds	r3, #125	@ 0x7d
 802a284:	db02      	blt.n	802a28c <__ieee754_expf+0x18c>
 802a286:	05ec      	lsls	r4, r5, #23
 802a288:	1824      	adds	r4, r4, r0
 802a28a:	e74c      	b.n	802a126 <__ieee754_expf+0x26>
 802a28c:	21d8      	movs	r1, #216	@ 0xd8
 802a28e:	3564      	adds	r5, #100	@ 0x64
 802a290:	05ed      	lsls	r5, r5, #23
 802a292:	1828      	adds	r0, r5, r0
 802a294:	0509      	lsls	r1, r1, #20
 802a296:	f7d6 fed3 	bl	8001040 <__aeabi_fmul>
 802a29a:	e74c      	b.n	802a136 <__ieee754_expf+0x36>
 802a29c:	2400      	movs	r4, #0
 802a29e:	e742      	b.n	802a126 <__ieee754_expf+0x26>
 802a2a0:	42b17217 	.word	0x42b17217
 802a2a4:	42cff1b5 	.word	0x42cff1b5
 802a2a8:	3eb17218 	.word	0x3eb17218
 802a2ac:	3f851591 	.word	0x3f851591
 802a2b0:	0802ee80 	.word	0x0802ee80
 802a2b4:	0802ee78 	.word	0x0802ee78
 802a2b8:	3331bb4c 	.word	0x3331bb4c
 802a2bc:	35ddea0e 	.word	0x35ddea0e
 802a2c0:	388ab355 	.word	0x388ab355
 802a2c4:	3b360b61 	.word	0x3b360b61
 802a2c8:	3e2aaaab 	.word	0x3e2aaaab
 802a2cc:	3fb8aa3b 	.word	0x3fb8aa3b
 802a2d0:	0802ee88 	.word	0x0802ee88
 802a2d4:	3f317180 	.word	0x3f317180
 802a2d8:	3717f7d1 	.word	0x3717f7d1
 802a2dc:	7149f2ca 	.word	0x7149f2ca

0802a2e0 <scalbn>:
 802a2e0:	004b      	lsls	r3, r1, #1
 802a2e2:	b570      	push	{r4, r5, r6, lr}
 802a2e4:	0d5b      	lsrs	r3, r3, #21
 802a2e6:	0014      	movs	r4, r2
 802a2e8:	000d      	movs	r5, r1
 802a2ea:	2b00      	cmp	r3, #0
 802a2ec:	d10f      	bne.n	802a30e <scalbn+0x2e>
 802a2ee:	004b      	lsls	r3, r1, #1
 802a2f0:	085b      	lsrs	r3, r3, #1
 802a2f2:	4303      	orrs	r3, r0
 802a2f4:	d012      	beq.n	802a31c <scalbn+0x3c>
 802a2f6:	4b23      	ldr	r3, [pc, #140]	@ (802a384 <scalbn+0xa4>)
 802a2f8:	2200      	movs	r2, #0
 802a2fa:	f7d8 fb2b 	bl	8002954 <__aeabi_dmul>
 802a2fe:	4b22      	ldr	r3, [pc, #136]	@ (802a388 <scalbn+0xa8>)
 802a300:	429c      	cmp	r4, r3
 802a302:	da0c      	bge.n	802a31e <scalbn+0x3e>
 802a304:	4a21      	ldr	r2, [pc, #132]	@ (802a38c <scalbn+0xac>)
 802a306:	4b22      	ldr	r3, [pc, #136]	@ (802a390 <scalbn+0xb0>)
 802a308:	f7d8 fb24 	bl	8002954 <__aeabi_dmul>
 802a30c:	e006      	b.n	802a31c <scalbn+0x3c>
 802a30e:	4a21      	ldr	r2, [pc, #132]	@ (802a394 <scalbn+0xb4>)
 802a310:	4293      	cmp	r3, r2
 802a312:	d108      	bne.n	802a326 <scalbn+0x46>
 802a314:	0002      	movs	r2, r0
 802a316:	000b      	movs	r3, r1
 802a318:	f7d7 fb1c 	bl	8001954 <__aeabi_dadd>
 802a31c:	bd70      	pop	{r4, r5, r6, pc}
 802a31e:	000d      	movs	r5, r1
 802a320:	004b      	lsls	r3, r1, #1
 802a322:	0d5b      	lsrs	r3, r3, #21
 802a324:	3b36      	subs	r3, #54	@ 0x36
 802a326:	4a1c      	ldr	r2, [pc, #112]	@ (802a398 <scalbn+0xb8>)
 802a328:	4294      	cmp	r4, r2
 802a32a:	dd0a      	ble.n	802a342 <scalbn+0x62>
 802a32c:	4c1b      	ldr	r4, [pc, #108]	@ (802a39c <scalbn+0xbc>)
 802a32e:	4d1c      	ldr	r5, [pc, #112]	@ (802a3a0 <scalbn+0xc0>)
 802a330:	2900      	cmp	r1, #0
 802a332:	da01      	bge.n	802a338 <scalbn+0x58>
 802a334:	4c19      	ldr	r4, [pc, #100]	@ (802a39c <scalbn+0xbc>)
 802a336:	4d1b      	ldr	r5, [pc, #108]	@ (802a3a4 <scalbn+0xc4>)
 802a338:	4a18      	ldr	r2, [pc, #96]	@ (802a39c <scalbn+0xbc>)
 802a33a:	4b19      	ldr	r3, [pc, #100]	@ (802a3a0 <scalbn+0xc0>)
 802a33c:	0020      	movs	r0, r4
 802a33e:	0029      	movs	r1, r5
 802a340:	e7e2      	b.n	802a308 <scalbn+0x28>
 802a342:	18e2      	adds	r2, r4, r3
 802a344:	4b18      	ldr	r3, [pc, #96]	@ (802a3a8 <scalbn+0xc8>)
 802a346:	429a      	cmp	r2, r3
 802a348:	dcf0      	bgt.n	802a32c <scalbn+0x4c>
 802a34a:	2a00      	cmp	r2, #0
 802a34c:	dd05      	ble.n	802a35a <scalbn+0x7a>
 802a34e:	4b17      	ldr	r3, [pc, #92]	@ (802a3ac <scalbn+0xcc>)
 802a350:	0512      	lsls	r2, r2, #20
 802a352:	402b      	ands	r3, r5
 802a354:	4313      	orrs	r3, r2
 802a356:	0019      	movs	r1, r3
 802a358:	e7e0      	b.n	802a31c <scalbn+0x3c>
 802a35a:	0013      	movs	r3, r2
 802a35c:	3335      	adds	r3, #53	@ 0x35
 802a35e:	da08      	bge.n	802a372 <scalbn+0x92>
 802a360:	4c0a      	ldr	r4, [pc, #40]	@ (802a38c <scalbn+0xac>)
 802a362:	4d0b      	ldr	r5, [pc, #44]	@ (802a390 <scalbn+0xb0>)
 802a364:	2900      	cmp	r1, #0
 802a366:	da01      	bge.n	802a36c <scalbn+0x8c>
 802a368:	4c08      	ldr	r4, [pc, #32]	@ (802a38c <scalbn+0xac>)
 802a36a:	4d11      	ldr	r5, [pc, #68]	@ (802a3b0 <scalbn+0xd0>)
 802a36c:	4a07      	ldr	r2, [pc, #28]	@ (802a38c <scalbn+0xac>)
 802a36e:	4b08      	ldr	r3, [pc, #32]	@ (802a390 <scalbn+0xb0>)
 802a370:	e7e4      	b.n	802a33c <scalbn+0x5c>
 802a372:	4b0e      	ldr	r3, [pc, #56]	@ (802a3ac <scalbn+0xcc>)
 802a374:	3236      	adds	r2, #54	@ 0x36
 802a376:	401d      	ands	r5, r3
 802a378:	0512      	lsls	r2, r2, #20
 802a37a:	432a      	orrs	r2, r5
 802a37c:	0011      	movs	r1, r2
 802a37e:	4b0d      	ldr	r3, [pc, #52]	@ (802a3b4 <scalbn+0xd4>)
 802a380:	2200      	movs	r2, #0
 802a382:	e7c1      	b.n	802a308 <scalbn+0x28>
 802a384:	43500000 	.word	0x43500000
 802a388:	ffff3cb0 	.word	0xffff3cb0
 802a38c:	c2f8f359 	.word	0xc2f8f359
 802a390:	01a56e1f 	.word	0x01a56e1f
 802a394:	000007ff 	.word	0x000007ff
 802a398:	0000c350 	.word	0x0000c350
 802a39c:	8800759c 	.word	0x8800759c
 802a3a0:	7e37e43c 	.word	0x7e37e43c
 802a3a4:	fe37e43c 	.word	0xfe37e43c
 802a3a8:	000007fe 	.word	0x000007fe
 802a3ac:	800fffff 	.word	0x800fffff
 802a3b0:	81a56e1f 	.word	0x81a56e1f
 802a3b4:	3c900000 	.word	0x3c900000

0802a3b8 <with_errno>:
 802a3b8:	b570      	push	{r4, r5, r6, lr}
 802a3ba:	000d      	movs	r5, r1
 802a3bc:	0016      	movs	r6, r2
 802a3be:	0004      	movs	r4, r0
 802a3c0:	f7fc f952 	bl	8026668 <__errno>
 802a3c4:	0029      	movs	r1, r5
 802a3c6:	6006      	str	r6, [r0, #0]
 802a3c8:	0020      	movs	r0, r4
 802a3ca:	bd70      	pop	{r4, r5, r6, pc}

0802a3cc <xflow>:
 802a3cc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 802a3ce:	0014      	movs	r4, r2
 802a3d0:	001d      	movs	r5, r3
 802a3d2:	2800      	cmp	r0, #0
 802a3d4:	d002      	beq.n	802a3dc <xflow+0x10>
 802a3d6:	2180      	movs	r1, #128	@ 0x80
 802a3d8:	0609      	lsls	r1, r1, #24
 802a3da:	185b      	adds	r3, r3, r1
 802a3dc:	9200      	str	r2, [sp, #0]
 802a3de:	9301      	str	r3, [sp, #4]
 802a3e0:	9a00      	ldr	r2, [sp, #0]
 802a3e2:	9b01      	ldr	r3, [sp, #4]
 802a3e4:	0020      	movs	r0, r4
 802a3e6:	0029      	movs	r1, r5
 802a3e8:	f7d8 fab4 	bl	8002954 <__aeabi_dmul>
 802a3ec:	2222      	movs	r2, #34	@ 0x22
 802a3ee:	f7ff ffe3 	bl	802a3b8 <with_errno>
 802a3f2:	b003      	add	sp, #12
 802a3f4:	bd30      	pop	{r4, r5, pc}

0802a3f6 <__math_uflow>:
 802a3f6:	2380      	movs	r3, #128	@ 0x80
 802a3f8:	b510      	push	{r4, lr}
 802a3fa:	2200      	movs	r2, #0
 802a3fc:	055b      	lsls	r3, r3, #21
 802a3fe:	f7ff ffe5 	bl	802a3cc <xflow>
 802a402:	bd10      	pop	{r4, pc}

0802a404 <__math_oflow>:
 802a404:	23e0      	movs	r3, #224	@ 0xe0
 802a406:	b510      	push	{r4, lr}
 802a408:	2200      	movs	r2, #0
 802a40a:	05db      	lsls	r3, r3, #23
 802a40c:	f7ff ffde 	bl	802a3cc <xflow>
 802a410:	bd10      	pop	{r4, pc}

0802a412 <with_errnof>:
 802a412:	b570      	push	{r4, r5, r6, lr}
 802a414:	000d      	movs	r5, r1
 802a416:	1c04      	adds	r4, r0, #0
 802a418:	f7fc f926 	bl	8026668 <__errno>
 802a41c:	6005      	str	r5, [r0, #0]
 802a41e:	1c20      	adds	r0, r4, #0
 802a420:	bd70      	pop	{r4, r5, r6, pc}

0802a422 <xflowf>:
 802a422:	b510      	push	{r4, lr}
 802a424:	1c0b      	adds	r3, r1, #0
 802a426:	2800      	cmp	r0, #0
 802a428:	d002      	beq.n	802a430 <xflowf+0xe>
 802a42a:	2380      	movs	r3, #128	@ 0x80
 802a42c:	061b      	lsls	r3, r3, #24
 802a42e:	18cb      	adds	r3, r1, r3
 802a430:	1c18      	adds	r0, r3, #0
 802a432:	f7d6 fe05 	bl	8001040 <__aeabi_fmul>
 802a436:	2122      	movs	r1, #34	@ 0x22
 802a438:	f7ff ffeb 	bl	802a412 <with_errnof>
 802a43c:	bd10      	pop	{r4, pc}

0802a43e <__math_uflowf>:
 802a43e:	2180      	movs	r1, #128	@ 0x80
 802a440:	b510      	push	{r4, lr}
 802a442:	0549      	lsls	r1, r1, #21
 802a444:	f7ff ffed 	bl	802a422 <xflowf>
 802a448:	bd10      	pop	{r4, pc}

0802a44a <__math_oflowf>:
 802a44a:	21e0      	movs	r1, #224	@ 0xe0
 802a44c:	b510      	push	{r4, lr}
 802a44e:	05c9      	lsls	r1, r1, #23
 802a450:	f7ff ffe7 	bl	802a422 <xflowf>
 802a454:	bd10      	pop	{r4, pc}
	...

0802a458 <__ieee754_sqrt>:
 802a458:	b5f0      	push	{r4, r5, r6, r7, lr}
 802a45a:	000a      	movs	r2, r1
 802a45c:	000d      	movs	r5, r1
 802a45e:	496b      	ldr	r1, [pc, #428]	@ (802a60c <__ieee754_sqrt+0x1b4>)
 802a460:	0004      	movs	r4, r0
 802a462:	0003      	movs	r3, r0
 802a464:	0008      	movs	r0, r1
 802a466:	b087      	sub	sp, #28
 802a468:	4028      	ands	r0, r5
 802a46a:	4288      	cmp	r0, r1
 802a46c:	d111      	bne.n	802a492 <__ieee754_sqrt+0x3a>
 802a46e:	0022      	movs	r2, r4
 802a470:	002b      	movs	r3, r5
 802a472:	0020      	movs	r0, r4
 802a474:	0029      	movs	r1, r5
 802a476:	f7d8 fa6d 	bl	8002954 <__aeabi_dmul>
 802a47a:	0002      	movs	r2, r0
 802a47c:	000b      	movs	r3, r1
 802a47e:	0020      	movs	r0, r4
 802a480:	0029      	movs	r1, r5
 802a482:	f7d7 fa67 	bl	8001954 <__aeabi_dadd>
 802a486:	0004      	movs	r4, r0
 802a488:	000d      	movs	r5, r1
 802a48a:	0020      	movs	r0, r4
 802a48c:	0029      	movs	r1, r5
 802a48e:	b007      	add	sp, #28
 802a490:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802a492:	2d00      	cmp	r5, #0
 802a494:	dc11      	bgt.n	802a4ba <__ieee754_sqrt+0x62>
 802a496:	0069      	lsls	r1, r5, #1
 802a498:	0849      	lsrs	r1, r1, #1
 802a49a:	4321      	orrs	r1, r4
 802a49c:	d0f5      	beq.n	802a48a <__ieee754_sqrt+0x32>
 802a49e:	2000      	movs	r0, #0
 802a4a0:	4285      	cmp	r5, r0
 802a4a2:	d010      	beq.n	802a4c6 <__ieee754_sqrt+0x6e>
 802a4a4:	0022      	movs	r2, r4
 802a4a6:	002b      	movs	r3, r5
 802a4a8:	0020      	movs	r0, r4
 802a4aa:	0029      	movs	r1, r5
 802a4ac:	f7d8 fd38 	bl	8002f20 <__aeabi_dsub>
 802a4b0:	0002      	movs	r2, r0
 802a4b2:	000b      	movs	r3, r1
 802a4b4:	f7d7 fe14 	bl	80020e0 <__aeabi_ddiv>
 802a4b8:	e7e5      	b.n	802a486 <__ieee754_sqrt+0x2e>
 802a4ba:	1528      	asrs	r0, r5, #20
 802a4bc:	d115      	bne.n	802a4ea <__ieee754_sqrt+0x92>
 802a4be:	2480      	movs	r4, #128	@ 0x80
 802a4c0:	2100      	movs	r1, #0
 802a4c2:	0364      	lsls	r4, r4, #13
 802a4c4:	e007      	b.n	802a4d6 <__ieee754_sqrt+0x7e>
 802a4c6:	0ada      	lsrs	r2, r3, #11
 802a4c8:	3815      	subs	r0, #21
 802a4ca:	055b      	lsls	r3, r3, #21
 802a4cc:	2a00      	cmp	r2, #0
 802a4ce:	d0fa      	beq.n	802a4c6 <__ieee754_sqrt+0x6e>
 802a4d0:	e7f5      	b.n	802a4be <__ieee754_sqrt+0x66>
 802a4d2:	0052      	lsls	r2, r2, #1
 802a4d4:	3101      	adds	r1, #1
 802a4d6:	4222      	tst	r2, r4
 802a4d8:	d0fb      	beq.n	802a4d2 <__ieee754_sqrt+0x7a>
 802a4da:	1e4c      	subs	r4, r1, #1
 802a4dc:	1b00      	subs	r0, r0, r4
 802a4de:	2420      	movs	r4, #32
 802a4e0:	001d      	movs	r5, r3
 802a4e2:	1a64      	subs	r4, r4, r1
 802a4e4:	40e5      	lsrs	r5, r4
 802a4e6:	408b      	lsls	r3, r1
 802a4e8:	432a      	orrs	r2, r5
 802a4ea:	4949      	ldr	r1, [pc, #292]	@ (802a610 <__ieee754_sqrt+0x1b8>)
 802a4ec:	0312      	lsls	r2, r2, #12
 802a4ee:	1844      	adds	r4, r0, r1
 802a4f0:	2180      	movs	r1, #128	@ 0x80
 802a4f2:	0b12      	lsrs	r2, r2, #12
 802a4f4:	0349      	lsls	r1, r1, #13
 802a4f6:	4311      	orrs	r1, r2
 802a4f8:	07c0      	lsls	r0, r0, #31
 802a4fa:	d403      	bmi.n	802a504 <__ieee754_sqrt+0xac>
 802a4fc:	0fda      	lsrs	r2, r3, #31
 802a4fe:	0049      	lsls	r1, r1, #1
 802a500:	1851      	adds	r1, r2, r1
 802a502:	005b      	lsls	r3, r3, #1
 802a504:	2500      	movs	r5, #0
 802a506:	1062      	asrs	r2, r4, #1
 802a508:	0049      	lsls	r1, r1, #1
 802a50a:	2480      	movs	r4, #128	@ 0x80
 802a50c:	9205      	str	r2, [sp, #20]
 802a50e:	0fda      	lsrs	r2, r3, #31
 802a510:	1852      	adds	r2, r2, r1
 802a512:	2016      	movs	r0, #22
 802a514:	0029      	movs	r1, r5
 802a516:	005b      	lsls	r3, r3, #1
 802a518:	03a4      	lsls	r4, r4, #14
 802a51a:	190e      	adds	r6, r1, r4
 802a51c:	4296      	cmp	r6, r2
 802a51e:	dc02      	bgt.n	802a526 <__ieee754_sqrt+0xce>
 802a520:	1931      	adds	r1, r6, r4
 802a522:	1b92      	subs	r2, r2, r6
 802a524:	192d      	adds	r5, r5, r4
 802a526:	0fde      	lsrs	r6, r3, #31
 802a528:	0052      	lsls	r2, r2, #1
 802a52a:	3801      	subs	r0, #1
 802a52c:	1992      	adds	r2, r2, r6
 802a52e:	005b      	lsls	r3, r3, #1
 802a530:	0864      	lsrs	r4, r4, #1
 802a532:	2800      	cmp	r0, #0
 802a534:	d1f1      	bne.n	802a51a <__ieee754_sqrt+0xc2>
 802a536:	2620      	movs	r6, #32
 802a538:	2780      	movs	r7, #128	@ 0x80
 802a53a:	0004      	movs	r4, r0
 802a53c:	9604      	str	r6, [sp, #16]
 802a53e:	063f      	lsls	r7, r7, #24
 802a540:	183e      	adds	r6, r7, r0
 802a542:	46b4      	mov	ip, r6
 802a544:	428a      	cmp	r2, r1
 802a546:	dc02      	bgt.n	802a54e <__ieee754_sqrt+0xf6>
 802a548:	d114      	bne.n	802a574 <__ieee754_sqrt+0x11c>
 802a54a:	429e      	cmp	r6, r3
 802a54c:	d812      	bhi.n	802a574 <__ieee754_sqrt+0x11c>
 802a54e:	4660      	mov	r0, ip
 802a550:	4666      	mov	r6, ip
 802a552:	19c0      	adds	r0, r0, r7
 802a554:	9100      	str	r1, [sp, #0]
 802a556:	2e00      	cmp	r6, #0
 802a558:	da03      	bge.n	802a562 <__ieee754_sqrt+0x10a>
 802a55a:	43c6      	mvns	r6, r0
 802a55c:	0ff6      	lsrs	r6, r6, #31
 802a55e:	198e      	adds	r6, r1, r6
 802a560:	9600      	str	r6, [sp, #0]
 802a562:	1a52      	subs	r2, r2, r1
 802a564:	4563      	cmp	r3, ip
 802a566:	4189      	sbcs	r1, r1
 802a568:	4249      	negs	r1, r1
 802a56a:	1a52      	subs	r2, r2, r1
 802a56c:	4661      	mov	r1, ip
 802a56e:	1a5b      	subs	r3, r3, r1
 802a570:	9900      	ldr	r1, [sp, #0]
 802a572:	19e4      	adds	r4, r4, r7
 802a574:	0fde      	lsrs	r6, r3, #31
 802a576:	0052      	lsls	r2, r2, #1
 802a578:	1992      	adds	r2, r2, r6
 802a57a:	9e04      	ldr	r6, [sp, #16]
 802a57c:	005b      	lsls	r3, r3, #1
 802a57e:	3e01      	subs	r6, #1
 802a580:	087f      	lsrs	r7, r7, #1
 802a582:	9604      	str	r6, [sp, #16]
 802a584:	2e00      	cmp	r6, #0
 802a586:	d1db      	bne.n	802a540 <__ieee754_sqrt+0xe8>
 802a588:	431a      	orrs	r2, r3
 802a58a:	d01f      	beq.n	802a5cc <__ieee754_sqrt+0x174>
 802a58c:	4e21      	ldr	r6, [pc, #132]	@ (802a614 <__ieee754_sqrt+0x1bc>)
 802a58e:	4f22      	ldr	r7, [pc, #136]	@ (802a618 <__ieee754_sqrt+0x1c0>)
 802a590:	6830      	ldr	r0, [r6, #0]
 802a592:	6871      	ldr	r1, [r6, #4]
 802a594:	683a      	ldr	r2, [r7, #0]
 802a596:	687b      	ldr	r3, [r7, #4]
 802a598:	9200      	str	r2, [sp, #0]
 802a59a:	9301      	str	r3, [sp, #4]
 802a59c:	6832      	ldr	r2, [r6, #0]
 802a59e:	6873      	ldr	r3, [r6, #4]
 802a5a0:	9202      	str	r2, [sp, #8]
 802a5a2:	9303      	str	r3, [sp, #12]
 802a5a4:	9a00      	ldr	r2, [sp, #0]
 802a5a6:	9b01      	ldr	r3, [sp, #4]
 802a5a8:	f7d8 fcba 	bl	8002f20 <__aeabi_dsub>
 802a5ac:	0002      	movs	r2, r0
 802a5ae:	000b      	movs	r3, r1
 802a5b0:	9802      	ldr	r0, [sp, #8]
 802a5b2:	9903      	ldr	r1, [sp, #12]
 802a5b4:	f7d5 ff8c 	bl	80004d0 <__aeabi_dcmple>
 802a5b8:	2800      	cmp	r0, #0
 802a5ba:	d007      	beq.n	802a5cc <__ieee754_sqrt+0x174>
 802a5bc:	6830      	ldr	r0, [r6, #0]
 802a5be:	6871      	ldr	r1, [r6, #4]
 802a5c0:	683a      	ldr	r2, [r7, #0]
 802a5c2:	687b      	ldr	r3, [r7, #4]
 802a5c4:	1c67      	adds	r7, r4, #1
 802a5c6:	d10c      	bne.n	802a5e2 <__ieee754_sqrt+0x18a>
 802a5c8:	9c04      	ldr	r4, [sp, #16]
 802a5ca:	3501      	adds	r5, #1
 802a5cc:	4a13      	ldr	r2, [pc, #76]	@ (802a61c <__ieee754_sqrt+0x1c4>)
 802a5ce:	106b      	asrs	r3, r5, #1
 802a5d0:	189b      	adds	r3, r3, r2
 802a5d2:	9a05      	ldr	r2, [sp, #20]
 802a5d4:	07ed      	lsls	r5, r5, #31
 802a5d6:	0864      	lsrs	r4, r4, #1
 802a5d8:	0512      	lsls	r2, r2, #20
 802a5da:	4325      	orrs	r5, r4
 802a5dc:	0028      	movs	r0, r5
 802a5de:	18d1      	adds	r1, r2, r3
 802a5e0:	e751      	b.n	802a486 <__ieee754_sqrt+0x2e>
 802a5e2:	f7d7 f9b7 	bl	8001954 <__aeabi_dadd>
 802a5e6:	6877      	ldr	r7, [r6, #4]
 802a5e8:	6836      	ldr	r6, [r6, #0]
 802a5ea:	0002      	movs	r2, r0
 802a5ec:	000b      	movs	r3, r1
 802a5ee:	0030      	movs	r0, r6
 802a5f0:	0039      	movs	r1, r7
 802a5f2:	f7d5 ff63 	bl	80004bc <__aeabi_dcmplt>
 802a5f6:	2800      	cmp	r0, #0
 802a5f8:	d004      	beq.n	802a604 <__ieee754_sqrt+0x1ac>
 802a5fa:	3402      	adds	r4, #2
 802a5fc:	4263      	negs	r3, r4
 802a5fe:	4163      	adcs	r3, r4
 802a600:	18ed      	adds	r5, r5, r3
 802a602:	e7e3      	b.n	802a5cc <__ieee754_sqrt+0x174>
 802a604:	2301      	movs	r3, #1
 802a606:	3401      	adds	r4, #1
 802a608:	439c      	bics	r4, r3
 802a60a:	e7df      	b.n	802a5cc <__ieee754_sqrt+0x174>
 802a60c:	7ff00000 	.word	0x7ff00000
 802a610:	fffffc01 	.word	0xfffffc01
 802a614:	0802ee98 	.word	0x0802ee98
 802a618:	0802ee90 	.word	0x0802ee90
 802a61c:	3fe00000 	.word	0x3fe00000

0802a620 <_init>:
 802a620:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802a622:	46c0      	nop			@ (mov r8, r8)
 802a624:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802a626:	bc08      	pop	{r3}
 802a628:	469e      	mov	lr, r3
 802a62a:	4770      	bx	lr

0802a62c <_fini>:
 802a62c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802a62e:	46c0      	nop			@ (mov r8, r8)
 802a630:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802a632:	bc08      	pop	{r3}
 802a634:	469e      	mov	lr, r3
 802a636:	4770      	bx	lr
