
MJSGadget - dB meter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00022780  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002bb8  08022840  08022840  00023840  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080253f8  080253f8  00027424  2**0
                  CONTENTS
  4 .ARM          00000008  080253f8  080253f8  000263f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08025400  08025400  00027424  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08025400  08025400  00026400  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08025404  08025404  00026404  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000424  20000000  08025408  00027000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003574  20000424  0802582c  00027424  2**2
                  ALLOC
 10 ._user_heap_stack 00000500  20003998  0802582c  00027998  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00027424  2**0
                  CONTENTS, READONLY
 12 .debug_info   00033e49  00000000  00000000  0002744c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000937a  00000000  00000000  0005b295  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002a80  00000000  00000000  00064610  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001f7f  00000000  00000000  00067090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022892  00000000  00000000  0006900f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000414ee  00000000  00000000  0008b8a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a03a6  00000000  00000000  000ccd8f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000b1  00000000  00000000  0016d135  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000ad18  00000000  00000000  0016d1e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  00177f00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loc    0000257c  00000000  00000000  00177f6d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_ranges 00000088  00000000  00000000  0017a4e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000424 	.word	0x20000424
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08022828 	.word	0x08022828

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000428 	.word	0x20000428
 8000104:	08022828 	.word	0x08022828

08000108 <arm_bitreversal_32>:
 8000108:	1c4b      	adds	r3, r1, #1
 800010a:	b470      	push	{r4, r5, r6}
 800010c:	1c11      	adds	r1, r2, #0
 800010e:	085b      	lsrs	r3, r3, #1

08000110 <arm_bitreversal_32_0>:
 8000110:	884a      	ldrh	r2, [r1, #2]
 8000112:	880e      	ldrh	r6, [r1, #0]
 8000114:	4402      	add	r2, r0
 8000116:	4406      	add	r6, r0
 8000118:	6815      	ldr	r5, [r2, #0]
 800011a:	6834      	ldr	r4, [r6, #0]
 800011c:	6035      	str	r5, [r6, #0]
 800011e:	6014      	str	r4, [r2, #0]
 8000120:	6855      	ldr	r5, [r2, #4]
 8000122:	6874      	ldr	r4, [r6, #4]
 8000124:	6075      	str	r5, [r6, #4]
 8000126:	6054      	str	r4, [r2, #4]
 8000128:	3104      	adds	r1, #4
 800012a:	3b01      	subs	r3, #1
 800012c:	d1f0      	bne.n	8000110 <arm_bitreversal_32_0>
 800012e:	bc70      	pop	{r4, r5, r6}
 8000130:	4770      	bx	lr

08000132 <arm_bitreversal_16>:
 8000132:	1c4b      	adds	r3, r1, #1
 8000134:	b470      	push	{r4, r5, r6}
 8000136:	1c11      	adds	r1, r2, #0
 8000138:	085b      	lsrs	r3, r3, #1

0800013a <arm_bitreversal_16_0>:
 800013a:	884a      	ldrh	r2, [r1, #2]
 800013c:	880e      	ldrh	r6, [r1, #0]
 800013e:	0852      	lsrs	r2, r2, #1
 8000140:	0876      	lsrs	r6, r6, #1
 8000142:	4402      	add	r2, r0
 8000144:	4406      	add	r6, r0
 8000146:	6815      	ldr	r5, [r2, #0]
 8000148:	6834      	ldr	r4, [r6, #0]
 800014a:	6035      	str	r5, [r6, #0]
 800014c:	6014      	str	r4, [r2, #0]
 800014e:	3104      	adds	r1, #4
 8000150:	3b01      	subs	r3, #1
 8000152:	d1f2      	bne.n	800013a <arm_bitreversal_16_0>
 8000154:	bc70      	pop	{r4, r5, r6}
 8000156:	4770      	bx	lr

08000158 <strcmp>:
 8000158:	7802      	ldrb	r2, [r0, #0]
 800015a:	780b      	ldrb	r3, [r1, #0]
 800015c:	2a00      	cmp	r2, #0
 800015e:	d003      	beq.n	8000168 <strcmp+0x10>
 8000160:	3001      	adds	r0, #1
 8000162:	3101      	adds	r1, #1
 8000164:	429a      	cmp	r2, r3
 8000166:	d0f7      	beq.n	8000158 <strcmp>
 8000168:	1ad0      	subs	r0, r2, r3
 800016a:	4770      	bx	lr

0800016c <strlen>:
 800016c:	2300      	movs	r3, #0
 800016e:	5cc2      	ldrb	r2, [r0, r3]
 8000170:	3301      	adds	r3, #1
 8000172:	2a00      	cmp	r2, #0
 8000174:	d1fb      	bne.n	800016e <strlen+0x2>
 8000176:	1e58      	subs	r0, r3, #1
 8000178:	4770      	bx	lr
	...

0800017c <__gnu_thumb1_case_uqi>:
 800017c:	b402      	push	{r1}
 800017e:	4671      	mov	r1, lr
 8000180:	0849      	lsrs	r1, r1, #1
 8000182:	0049      	lsls	r1, r1, #1
 8000184:	5c09      	ldrb	r1, [r1, r0]
 8000186:	0049      	lsls	r1, r1, #1
 8000188:	448e      	add	lr, r1
 800018a:	bc02      	pop	{r1}
 800018c:	4770      	bx	lr
 800018e:	46c0      	nop			@ (mov r8, r8)

08000190 <__gnu_thumb1_case_shi>:
 8000190:	b403      	push	{r0, r1}
 8000192:	4671      	mov	r1, lr
 8000194:	0849      	lsrs	r1, r1, #1
 8000196:	0040      	lsls	r0, r0, #1
 8000198:	0049      	lsls	r1, r1, #1
 800019a:	5e09      	ldrsh	r1, [r1, r0]
 800019c:	0049      	lsls	r1, r1, #1
 800019e:	448e      	add	lr, r1
 80001a0:	bc03      	pop	{r0, r1}
 80001a2:	4770      	bx	lr

080001a4 <__udivsi3>:
 80001a4:	2200      	movs	r2, #0
 80001a6:	0843      	lsrs	r3, r0, #1
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d374      	bcc.n	8000296 <__udivsi3+0xf2>
 80001ac:	0903      	lsrs	r3, r0, #4
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d35f      	bcc.n	8000272 <__udivsi3+0xce>
 80001b2:	0a03      	lsrs	r3, r0, #8
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d344      	bcc.n	8000242 <__udivsi3+0x9e>
 80001b8:	0b03      	lsrs	r3, r0, #12
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d328      	bcc.n	8000210 <__udivsi3+0x6c>
 80001be:	0c03      	lsrs	r3, r0, #16
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d30d      	bcc.n	80001e0 <__udivsi3+0x3c>
 80001c4:	22ff      	movs	r2, #255	@ 0xff
 80001c6:	0209      	lsls	r1, r1, #8
 80001c8:	ba12      	rev	r2, r2
 80001ca:	0c03      	lsrs	r3, r0, #16
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d302      	bcc.n	80001d6 <__udivsi3+0x32>
 80001d0:	1212      	asrs	r2, r2, #8
 80001d2:	0209      	lsls	r1, r1, #8
 80001d4:	d065      	beq.n	80002a2 <__udivsi3+0xfe>
 80001d6:	0b03      	lsrs	r3, r0, #12
 80001d8:	428b      	cmp	r3, r1
 80001da:	d319      	bcc.n	8000210 <__udivsi3+0x6c>
 80001dc:	e000      	b.n	80001e0 <__udivsi3+0x3c>
 80001de:	0a09      	lsrs	r1, r1, #8
 80001e0:	0bc3      	lsrs	r3, r0, #15
 80001e2:	428b      	cmp	r3, r1
 80001e4:	d301      	bcc.n	80001ea <__udivsi3+0x46>
 80001e6:	03cb      	lsls	r3, r1, #15
 80001e8:	1ac0      	subs	r0, r0, r3
 80001ea:	4152      	adcs	r2, r2
 80001ec:	0b83      	lsrs	r3, r0, #14
 80001ee:	428b      	cmp	r3, r1
 80001f0:	d301      	bcc.n	80001f6 <__udivsi3+0x52>
 80001f2:	038b      	lsls	r3, r1, #14
 80001f4:	1ac0      	subs	r0, r0, r3
 80001f6:	4152      	adcs	r2, r2
 80001f8:	0b43      	lsrs	r3, r0, #13
 80001fa:	428b      	cmp	r3, r1
 80001fc:	d301      	bcc.n	8000202 <__udivsi3+0x5e>
 80001fe:	034b      	lsls	r3, r1, #13
 8000200:	1ac0      	subs	r0, r0, r3
 8000202:	4152      	adcs	r2, r2
 8000204:	0b03      	lsrs	r3, r0, #12
 8000206:	428b      	cmp	r3, r1
 8000208:	d301      	bcc.n	800020e <__udivsi3+0x6a>
 800020a:	030b      	lsls	r3, r1, #12
 800020c:	1ac0      	subs	r0, r0, r3
 800020e:	4152      	adcs	r2, r2
 8000210:	0ac3      	lsrs	r3, r0, #11
 8000212:	428b      	cmp	r3, r1
 8000214:	d301      	bcc.n	800021a <__udivsi3+0x76>
 8000216:	02cb      	lsls	r3, r1, #11
 8000218:	1ac0      	subs	r0, r0, r3
 800021a:	4152      	adcs	r2, r2
 800021c:	0a83      	lsrs	r3, r0, #10
 800021e:	428b      	cmp	r3, r1
 8000220:	d301      	bcc.n	8000226 <__udivsi3+0x82>
 8000222:	028b      	lsls	r3, r1, #10
 8000224:	1ac0      	subs	r0, r0, r3
 8000226:	4152      	adcs	r2, r2
 8000228:	0a43      	lsrs	r3, r0, #9
 800022a:	428b      	cmp	r3, r1
 800022c:	d301      	bcc.n	8000232 <__udivsi3+0x8e>
 800022e:	024b      	lsls	r3, r1, #9
 8000230:	1ac0      	subs	r0, r0, r3
 8000232:	4152      	adcs	r2, r2
 8000234:	0a03      	lsrs	r3, r0, #8
 8000236:	428b      	cmp	r3, r1
 8000238:	d301      	bcc.n	800023e <__udivsi3+0x9a>
 800023a:	020b      	lsls	r3, r1, #8
 800023c:	1ac0      	subs	r0, r0, r3
 800023e:	4152      	adcs	r2, r2
 8000240:	d2cd      	bcs.n	80001de <__udivsi3+0x3a>
 8000242:	09c3      	lsrs	r3, r0, #7
 8000244:	428b      	cmp	r3, r1
 8000246:	d301      	bcc.n	800024c <__udivsi3+0xa8>
 8000248:	01cb      	lsls	r3, r1, #7
 800024a:	1ac0      	subs	r0, r0, r3
 800024c:	4152      	adcs	r2, r2
 800024e:	0983      	lsrs	r3, r0, #6
 8000250:	428b      	cmp	r3, r1
 8000252:	d301      	bcc.n	8000258 <__udivsi3+0xb4>
 8000254:	018b      	lsls	r3, r1, #6
 8000256:	1ac0      	subs	r0, r0, r3
 8000258:	4152      	adcs	r2, r2
 800025a:	0943      	lsrs	r3, r0, #5
 800025c:	428b      	cmp	r3, r1
 800025e:	d301      	bcc.n	8000264 <__udivsi3+0xc0>
 8000260:	014b      	lsls	r3, r1, #5
 8000262:	1ac0      	subs	r0, r0, r3
 8000264:	4152      	adcs	r2, r2
 8000266:	0903      	lsrs	r3, r0, #4
 8000268:	428b      	cmp	r3, r1
 800026a:	d301      	bcc.n	8000270 <__udivsi3+0xcc>
 800026c:	010b      	lsls	r3, r1, #4
 800026e:	1ac0      	subs	r0, r0, r3
 8000270:	4152      	adcs	r2, r2
 8000272:	08c3      	lsrs	r3, r0, #3
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__udivsi3+0xd8>
 8000278:	00cb      	lsls	r3, r1, #3
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0883      	lsrs	r3, r0, #2
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__udivsi3+0xe4>
 8000284:	008b      	lsls	r3, r1, #2
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0843      	lsrs	r3, r0, #1
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__udivsi3+0xf0>
 8000290:	004b      	lsls	r3, r1, #1
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	1a41      	subs	r1, r0, r1
 8000298:	d200      	bcs.n	800029c <__udivsi3+0xf8>
 800029a:	4601      	mov	r1, r0
 800029c:	4152      	adcs	r2, r2
 800029e:	4610      	mov	r0, r2
 80002a0:	4770      	bx	lr
 80002a2:	e7ff      	b.n	80002a4 <__udivsi3+0x100>
 80002a4:	b501      	push	{r0, lr}
 80002a6:	2000      	movs	r0, #0
 80002a8:	f000 f8f0 	bl	800048c <__aeabi_idiv0>
 80002ac:	bd02      	pop	{r1, pc}
 80002ae:	46c0      	nop			@ (mov r8, r8)

080002b0 <__aeabi_uidivmod>:
 80002b0:	2900      	cmp	r1, #0
 80002b2:	d0f7      	beq.n	80002a4 <__udivsi3+0x100>
 80002b4:	e776      	b.n	80001a4 <__udivsi3>
 80002b6:	4770      	bx	lr

080002b8 <__divsi3>:
 80002b8:	4603      	mov	r3, r0
 80002ba:	430b      	orrs	r3, r1
 80002bc:	d47f      	bmi.n	80003be <__divsi3+0x106>
 80002be:	2200      	movs	r2, #0
 80002c0:	0843      	lsrs	r3, r0, #1
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d374      	bcc.n	80003b0 <__divsi3+0xf8>
 80002c6:	0903      	lsrs	r3, r0, #4
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d35f      	bcc.n	800038c <__divsi3+0xd4>
 80002cc:	0a03      	lsrs	r3, r0, #8
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d344      	bcc.n	800035c <__divsi3+0xa4>
 80002d2:	0b03      	lsrs	r3, r0, #12
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d328      	bcc.n	800032a <__divsi3+0x72>
 80002d8:	0c03      	lsrs	r3, r0, #16
 80002da:	428b      	cmp	r3, r1
 80002dc:	d30d      	bcc.n	80002fa <__divsi3+0x42>
 80002de:	22ff      	movs	r2, #255	@ 0xff
 80002e0:	0209      	lsls	r1, r1, #8
 80002e2:	ba12      	rev	r2, r2
 80002e4:	0c03      	lsrs	r3, r0, #16
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d302      	bcc.n	80002f0 <__divsi3+0x38>
 80002ea:	1212      	asrs	r2, r2, #8
 80002ec:	0209      	lsls	r1, r1, #8
 80002ee:	d065      	beq.n	80003bc <__divsi3+0x104>
 80002f0:	0b03      	lsrs	r3, r0, #12
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d319      	bcc.n	800032a <__divsi3+0x72>
 80002f6:	e000      	b.n	80002fa <__divsi3+0x42>
 80002f8:	0a09      	lsrs	r1, r1, #8
 80002fa:	0bc3      	lsrs	r3, r0, #15
 80002fc:	428b      	cmp	r3, r1
 80002fe:	d301      	bcc.n	8000304 <__divsi3+0x4c>
 8000300:	03cb      	lsls	r3, r1, #15
 8000302:	1ac0      	subs	r0, r0, r3
 8000304:	4152      	adcs	r2, r2
 8000306:	0b83      	lsrs	r3, r0, #14
 8000308:	428b      	cmp	r3, r1
 800030a:	d301      	bcc.n	8000310 <__divsi3+0x58>
 800030c:	038b      	lsls	r3, r1, #14
 800030e:	1ac0      	subs	r0, r0, r3
 8000310:	4152      	adcs	r2, r2
 8000312:	0b43      	lsrs	r3, r0, #13
 8000314:	428b      	cmp	r3, r1
 8000316:	d301      	bcc.n	800031c <__divsi3+0x64>
 8000318:	034b      	lsls	r3, r1, #13
 800031a:	1ac0      	subs	r0, r0, r3
 800031c:	4152      	adcs	r2, r2
 800031e:	0b03      	lsrs	r3, r0, #12
 8000320:	428b      	cmp	r3, r1
 8000322:	d301      	bcc.n	8000328 <__divsi3+0x70>
 8000324:	030b      	lsls	r3, r1, #12
 8000326:	1ac0      	subs	r0, r0, r3
 8000328:	4152      	adcs	r2, r2
 800032a:	0ac3      	lsrs	r3, r0, #11
 800032c:	428b      	cmp	r3, r1
 800032e:	d301      	bcc.n	8000334 <__divsi3+0x7c>
 8000330:	02cb      	lsls	r3, r1, #11
 8000332:	1ac0      	subs	r0, r0, r3
 8000334:	4152      	adcs	r2, r2
 8000336:	0a83      	lsrs	r3, r0, #10
 8000338:	428b      	cmp	r3, r1
 800033a:	d301      	bcc.n	8000340 <__divsi3+0x88>
 800033c:	028b      	lsls	r3, r1, #10
 800033e:	1ac0      	subs	r0, r0, r3
 8000340:	4152      	adcs	r2, r2
 8000342:	0a43      	lsrs	r3, r0, #9
 8000344:	428b      	cmp	r3, r1
 8000346:	d301      	bcc.n	800034c <__divsi3+0x94>
 8000348:	024b      	lsls	r3, r1, #9
 800034a:	1ac0      	subs	r0, r0, r3
 800034c:	4152      	adcs	r2, r2
 800034e:	0a03      	lsrs	r3, r0, #8
 8000350:	428b      	cmp	r3, r1
 8000352:	d301      	bcc.n	8000358 <__divsi3+0xa0>
 8000354:	020b      	lsls	r3, r1, #8
 8000356:	1ac0      	subs	r0, r0, r3
 8000358:	4152      	adcs	r2, r2
 800035a:	d2cd      	bcs.n	80002f8 <__divsi3+0x40>
 800035c:	09c3      	lsrs	r3, r0, #7
 800035e:	428b      	cmp	r3, r1
 8000360:	d301      	bcc.n	8000366 <__divsi3+0xae>
 8000362:	01cb      	lsls	r3, r1, #7
 8000364:	1ac0      	subs	r0, r0, r3
 8000366:	4152      	adcs	r2, r2
 8000368:	0983      	lsrs	r3, r0, #6
 800036a:	428b      	cmp	r3, r1
 800036c:	d301      	bcc.n	8000372 <__divsi3+0xba>
 800036e:	018b      	lsls	r3, r1, #6
 8000370:	1ac0      	subs	r0, r0, r3
 8000372:	4152      	adcs	r2, r2
 8000374:	0943      	lsrs	r3, r0, #5
 8000376:	428b      	cmp	r3, r1
 8000378:	d301      	bcc.n	800037e <__divsi3+0xc6>
 800037a:	014b      	lsls	r3, r1, #5
 800037c:	1ac0      	subs	r0, r0, r3
 800037e:	4152      	adcs	r2, r2
 8000380:	0903      	lsrs	r3, r0, #4
 8000382:	428b      	cmp	r3, r1
 8000384:	d301      	bcc.n	800038a <__divsi3+0xd2>
 8000386:	010b      	lsls	r3, r1, #4
 8000388:	1ac0      	subs	r0, r0, r3
 800038a:	4152      	adcs	r2, r2
 800038c:	08c3      	lsrs	r3, r0, #3
 800038e:	428b      	cmp	r3, r1
 8000390:	d301      	bcc.n	8000396 <__divsi3+0xde>
 8000392:	00cb      	lsls	r3, r1, #3
 8000394:	1ac0      	subs	r0, r0, r3
 8000396:	4152      	adcs	r2, r2
 8000398:	0883      	lsrs	r3, r0, #2
 800039a:	428b      	cmp	r3, r1
 800039c:	d301      	bcc.n	80003a2 <__divsi3+0xea>
 800039e:	008b      	lsls	r3, r1, #2
 80003a0:	1ac0      	subs	r0, r0, r3
 80003a2:	4152      	adcs	r2, r2
 80003a4:	0843      	lsrs	r3, r0, #1
 80003a6:	428b      	cmp	r3, r1
 80003a8:	d301      	bcc.n	80003ae <__divsi3+0xf6>
 80003aa:	004b      	lsls	r3, r1, #1
 80003ac:	1ac0      	subs	r0, r0, r3
 80003ae:	4152      	adcs	r2, r2
 80003b0:	1a41      	subs	r1, r0, r1
 80003b2:	d200      	bcs.n	80003b6 <__divsi3+0xfe>
 80003b4:	4601      	mov	r1, r0
 80003b6:	4152      	adcs	r2, r2
 80003b8:	4610      	mov	r0, r2
 80003ba:	4770      	bx	lr
 80003bc:	e05d      	b.n	800047a <__divsi3+0x1c2>
 80003be:	0fca      	lsrs	r2, r1, #31
 80003c0:	d000      	beq.n	80003c4 <__divsi3+0x10c>
 80003c2:	4249      	negs	r1, r1
 80003c4:	1003      	asrs	r3, r0, #32
 80003c6:	d300      	bcc.n	80003ca <__divsi3+0x112>
 80003c8:	4240      	negs	r0, r0
 80003ca:	4053      	eors	r3, r2
 80003cc:	2200      	movs	r2, #0
 80003ce:	469c      	mov	ip, r3
 80003d0:	0903      	lsrs	r3, r0, #4
 80003d2:	428b      	cmp	r3, r1
 80003d4:	d32d      	bcc.n	8000432 <__divsi3+0x17a>
 80003d6:	0a03      	lsrs	r3, r0, #8
 80003d8:	428b      	cmp	r3, r1
 80003da:	d312      	bcc.n	8000402 <__divsi3+0x14a>
 80003dc:	22fc      	movs	r2, #252	@ 0xfc
 80003de:	0189      	lsls	r1, r1, #6
 80003e0:	ba12      	rev	r2, r2
 80003e2:	0a03      	lsrs	r3, r0, #8
 80003e4:	428b      	cmp	r3, r1
 80003e6:	d30c      	bcc.n	8000402 <__divsi3+0x14a>
 80003e8:	0189      	lsls	r1, r1, #6
 80003ea:	1192      	asrs	r2, r2, #6
 80003ec:	428b      	cmp	r3, r1
 80003ee:	d308      	bcc.n	8000402 <__divsi3+0x14a>
 80003f0:	0189      	lsls	r1, r1, #6
 80003f2:	1192      	asrs	r2, r2, #6
 80003f4:	428b      	cmp	r3, r1
 80003f6:	d304      	bcc.n	8000402 <__divsi3+0x14a>
 80003f8:	0189      	lsls	r1, r1, #6
 80003fa:	d03a      	beq.n	8000472 <__divsi3+0x1ba>
 80003fc:	1192      	asrs	r2, r2, #6
 80003fe:	e000      	b.n	8000402 <__divsi3+0x14a>
 8000400:	0989      	lsrs	r1, r1, #6
 8000402:	09c3      	lsrs	r3, r0, #7
 8000404:	428b      	cmp	r3, r1
 8000406:	d301      	bcc.n	800040c <__divsi3+0x154>
 8000408:	01cb      	lsls	r3, r1, #7
 800040a:	1ac0      	subs	r0, r0, r3
 800040c:	4152      	adcs	r2, r2
 800040e:	0983      	lsrs	r3, r0, #6
 8000410:	428b      	cmp	r3, r1
 8000412:	d301      	bcc.n	8000418 <__divsi3+0x160>
 8000414:	018b      	lsls	r3, r1, #6
 8000416:	1ac0      	subs	r0, r0, r3
 8000418:	4152      	adcs	r2, r2
 800041a:	0943      	lsrs	r3, r0, #5
 800041c:	428b      	cmp	r3, r1
 800041e:	d301      	bcc.n	8000424 <__divsi3+0x16c>
 8000420:	014b      	lsls	r3, r1, #5
 8000422:	1ac0      	subs	r0, r0, r3
 8000424:	4152      	adcs	r2, r2
 8000426:	0903      	lsrs	r3, r0, #4
 8000428:	428b      	cmp	r3, r1
 800042a:	d301      	bcc.n	8000430 <__divsi3+0x178>
 800042c:	010b      	lsls	r3, r1, #4
 800042e:	1ac0      	subs	r0, r0, r3
 8000430:	4152      	adcs	r2, r2
 8000432:	08c3      	lsrs	r3, r0, #3
 8000434:	428b      	cmp	r3, r1
 8000436:	d301      	bcc.n	800043c <__divsi3+0x184>
 8000438:	00cb      	lsls	r3, r1, #3
 800043a:	1ac0      	subs	r0, r0, r3
 800043c:	4152      	adcs	r2, r2
 800043e:	0883      	lsrs	r3, r0, #2
 8000440:	428b      	cmp	r3, r1
 8000442:	d301      	bcc.n	8000448 <__divsi3+0x190>
 8000444:	008b      	lsls	r3, r1, #2
 8000446:	1ac0      	subs	r0, r0, r3
 8000448:	4152      	adcs	r2, r2
 800044a:	d2d9      	bcs.n	8000400 <__divsi3+0x148>
 800044c:	0843      	lsrs	r3, r0, #1
 800044e:	428b      	cmp	r3, r1
 8000450:	d301      	bcc.n	8000456 <__divsi3+0x19e>
 8000452:	004b      	lsls	r3, r1, #1
 8000454:	1ac0      	subs	r0, r0, r3
 8000456:	4152      	adcs	r2, r2
 8000458:	1a41      	subs	r1, r0, r1
 800045a:	d200      	bcs.n	800045e <__divsi3+0x1a6>
 800045c:	4601      	mov	r1, r0
 800045e:	4663      	mov	r3, ip
 8000460:	4152      	adcs	r2, r2
 8000462:	105b      	asrs	r3, r3, #1
 8000464:	4610      	mov	r0, r2
 8000466:	d301      	bcc.n	800046c <__divsi3+0x1b4>
 8000468:	4240      	negs	r0, r0
 800046a:	2b00      	cmp	r3, #0
 800046c:	d500      	bpl.n	8000470 <__divsi3+0x1b8>
 800046e:	4249      	negs	r1, r1
 8000470:	4770      	bx	lr
 8000472:	4663      	mov	r3, ip
 8000474:	105b      	asrs	r3, r3, #1
 8000476:	d300      	bcc.n	800047a <__divsi3+0x1c2>
 8000478:	4240      	negs	r0, r0
 800047a:	b501      	push	{r0, lr}
 800047c:	2000      	movs	r0, #0
 800047e:	f000 f805 	bl	800048c <__aeabi_idiv0>
 8000482:	bd02      	pop	{r1, pc}

08000484 <__aeabi_idivmod>:
 8000484:	2900      	cmp	r1, #0
 8000486:	d0f8      	beq.n	800047a <__divsi3+0x1c2>
 8000488:	e716      	b.n	80002b8 <__divsi3>
 800048a:	4770      	bx	lr

0800048c <__aeabi_idiv0>:
 800048c:	4770      	bx	lr
 800048e:	46c0      	nop			@ (mov r8, r8)

08000490 <__aeabi_cdrcmple>:
 8000490:	4684      	mov	ip, r0
 8000492:	0010      	movs	r0, r2
 8000494:	4662      	mov	r2, ip
 8000496:	468c      	mov	ip, r1
 8000498:	0019      	movs	r1, r3
 800049a:	4663      	mov	r3, ip
 800049c:	e000      	b.n	80004a0 <__aeabi_cdcmpeq>
 800049e:	46c0      	nop			@ (mov r8, r8)

080004a0 <__aeabi_cdcmpeq>:
 80004a0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80004a2:	f002 f859 	bl	8002558 <__ledf2>
 80004a6:	2800      	cmp	r0, #0
 80004a8:	d401      	bmi.n	80004ae <__aeabi_cdcmpeq+0xe>
 80004aa:	2100      	movs	r1, #0
 80004ac:	42c8      	cmn	r0, r1
 80004ae:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080004b0 <__aeabi_dcmpeq>:
 80004b0:	b510      	push	{r4, lr}
 80004b2:	f001 ff99 	bl	80023e8 <__eqdf2>
 80004b6:	4240      	negs	r0, r0
 80004b8:	3001      	adds	r0, #1
 80004ba:	bd10      	pop	{r4, pc}

080004bc <__aeabi_dcmplt>:
 80004bc:	b510      	push	{r4, lr}
 80004be:	f002 f84b 	bl	8002558 <__ledf2>
 80004c2:	2800      	cmp	r0, #0
 80004c4:	db01      	blt.n	80004ca <__aeabi_dcmplt+0xe>
 80004c6:	2000      	movs	r0, #0
 80004c8:	bd10      	pop	{r4, pc}
 80004ca:	2001      	movs	r0, #1
 80004cc:	bd10      	pop	{r4, pc}
 80004ce:	46c0      	nop			@ (mov r8, r8)

080004d0 <__aeabi_dcmple>:
 80004d0:	b510      	push	{r4, lr}
 80004d2:	f002 f841 	bl	8002558 <__ledf2>
 80004d6:	2800      	cmp	r0, #0
 80004d8:	dd01      	ble.n	80004de <__aeabi_dcmple+0xe>
 80004da:	2000      	movs	r0, #0
 80004dc:	bd10      	pop	{r4, pc}
 80004de:	2001      	movs	r0, #1
 80004e0:	bd10      	pop	{r4, pc}
 80004e2:	46c0      	nop			@ (mov r8, r8)

080004e4 <__aeabi_dcmpgt>:
 80004e4:	b510      	push	{r4, lr}
 80004e6:	f001 ffc3 	bl	8002470 <__gedf2>
 80004ea:	2800      	cmp	r0, #0
 80004ec:	dc01      	bgt.n	80004f2 <__aeabi_dcmpgt+0xe>
 80004ee:	2000      	movs	r0, #0
 80004f0:	bd10      	pop	{r4, pc}
 80004f2:	2001      	movs	r0, #1
 80004f4:	bd10      	pop	{r4, pc}
 80004f6:	46c0      	nop			@ (mov r8, r8)

080004f8 <__aeabi_dcmpge>:
 80004f8:	b510      	push	{r4, lr}
 80004fa:	f001 ffb9 	bl	8002470 <__gedf2>
 80004fe:	2800      	cmp	r0, #0
 8000500:	da01      	bge.n	8000506 <__aeabi_dcmpge+0xe>
 8000502:	2000      	movs	r0, #0
 8000504:	bd10      	pop	{r4, pc}
 8000506:	2001      	movs	r0, #1
 8000508:	bd10      	pop	{r4, pc}
 800050a:	46c0      	nop			@ (mov r8, r8)

0800050c <__aeabi_cfrcmple>:
 800050c:	4684      	mov	ip, r0
 800050e:	0008      	movs	r0, r1
 8000510:	4661      	mov	r1, ip
 8000512:	e7ff      	b.n	8000514 <__aeabi_cfcmpeq>

08000514 <__aeabi_cfcmpeq>:
 8000514:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000516:	f000 fcf5 	bl	8000f04 <__lesf2>
 800051a:	2800      	cmp	r0, #0
 800051c:	d401      	bmi.n	8000522 <__aeabi_cfcmpeq+0xe>
 800051e:	2100      	movs	r1, #0
 8000520:	42c8      	cmn	r0, r1
 8000522:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000524 <__aeabi_fcmpeq>:
 8000524:	b510      	push	{r4, lr}
 8000526:	f000 fc75 	bl	8000e14 <__eqsf2>
 800052a:	4240      	negs	r0, r0
 800052c:	3001      	adds	r0, #1
 800052e:	bd10      	pop	{r4, pc}

08000530 <__aeabi_fcmplt>:
 8000530:	b510      	push	{r4, lr}
 8000532:	f000 fce7 	bl	8000f04 <__lesf2>
 8000536:	2800      	cmp	r0, #0
 8000538:	db01      	blt.n	800053e <__aeabi_fcmplt+0xe>
 800053a:	2000      	movs	r0, #0
 800053c:	bd10      	pop	{r4, pc}
 800053e:	2001      	movs	r0, #1
 8000540:	bd10      	pop	{r4, pc}
 8000542:	46c0      	nop			@ (mov r8, r8)

08000544 <__aeabi_fcmple>:
 8000544:	b510      	push	{r4, lr}
 8000546:	f000 fcdd 	bl	8000f04 <__lesf2>
 800054a:	2800      	cmp	r0, #0
 800054c:	dd01      	ble.n	8000552 <__aeabi_fcmple+0xe>
 800054e:	2000      	movs	r0, #0
 8000550:	bd10      	pop	{r4, pc}
 8000552:	2001      	movs	r0, #1
 8000554:	bd10      	pop	{r4, pc}
 8000556:	46c0      	nop			@ (mov r8, r8)

08000558 <__aeabi_fcmpgt>:
 8000558:	b510      	push	{r4, lr}
 800055a:	f000 fc83 	bl	8000e64 <__gesf2>
 800055e:	2800      	cmp	r0, #0
 8000560:	dc01      	bgt.n	8000566 <__aeabi_fcmpgt+0xe>
 8000562:	2000      	movs	r0, #0
 8000564:	bd10      	pop	{r4, pc}
 8000566:	2001      	movs	r0, #1
 8000568:	bd10      	pop	{r4, pc}
 800056a:	46c0      	nop			@ (mov r8, r8)

0800056c <__aeabi_fcmpge>:
 800056c:	b510      	push	{r4, lr}
 800056e:	f000 fc79 	bl	8000e64 <__gesf2>
 8000572:	2800      	cmp	r0, #0
 8000574:	da01      	bge.n	800057a <__aeabi_fcmpge+0xe>
 8000576:	2000      	movs	r0, #0
 8000578:	bd10      	pop	{r4, pc}
 800057a:	2001      	movs	r0, #1
 800057c:	bd10      	pop	{r4, pc}
 800057e:	46c0      	nop			@ (mov r8, r8)

08000580 <__aeabi_uldivmod>:
 8000580:	2b00      	cmp	r3, #0
 8000582:	d111      	bne.n	80005a8 <__aeabi_uldivmod+0x28>
 8000584:	2a00      	cmp	r2, #0
 8000586:	d10f      	bne.n	80005a8 <__aeabi_uldivmod+0x28>
 8000588:	2900      	cmp	r1, #0
 800058a:	d100      	bne.n	800058e <__aeabi_uldivmod+0xe>
 800058c:	2800      	cmp	r0, #0
 800058e:	d002      	beq.n	8000596 <__aeabi_uldivmod+0x16>
 8000590:	2100      	movs	r1, #0
 8000592:	43c9      	mvns	r1, r1
 8000594:	0008      	movs	r0, r1
 8000596:	b407      	push	{r0, r1, r2}
 8000598:	4802      	ldr	r0, [pc, #8]	@ (80005a4 <__aeabi_uldivmod+0x24>)
 800059a:	a102      	add	r1, pc, #8	@ (adr r1, 80005a4 <__aeabi_uldivmod+0x24>)
 800059c:	1840      	adds	r0, r0, r1
 800059e:	9002      	str	r0, [sp, #8]
 80005a0:	bd03      	pop	{r0, r1, pc}
 80005a2:	46c0      	nop			@ (mov r8, r8)
 80005a4:	fffffee9 	.word	0xfffffee9
 80005a8:	b403      	push	{r0, r1}
 80005aa:	4668      	mov	r0, sp
 80005ac:	b501      	push	{r0, lr}
 80005ae:	9802      	ldr	r0, [sp, #8]
 80005b0:	f000 f8ba 	bl	8000728 <__udivmoddi4>
 80005b4:	9b01      	ldr	r3, [sp, #4]
 80005b6:	469e      	mov	lr, r3
 80005b8:	b002      	add	sp, #8
 80005ba:	bc0c      	pop	{r2, r3}
 80005bc:	4770      	bx	lr
 80005be:	46c0      	nop			@ (mov r8, r8)

080005c0 <__aeabi_lmul>:
 80005c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80005c2:	46ce      	mov	lr, r9
 80005c4:	4699      	mov	r9, r3
 80005c6:	0c03      	lsrs	r3, r0, #16
 80005c8:	469c      	mov	ip, r3
 80005ca:	0413      	lsls	r3, r2, #16
 80005cc:	4647      	mov	r7, r8
 80005ce:	0c1b      	lsrs	r3, r3, #16
 80005d0:	001d      	movs	r5, r3
 80005d2:	000e      	movs	r6, r1
 80005d4:	4661      	mov	r1, ip
 80005d6:	0404      	lsls	r4, r0, #16
 80005d8:	0c24      	lsrs	r4, r4, #16
 80005da:	b580      	push	{r7, lr}
 80005dc:	0007      	movs	r7, r0
 80005de:	0c10      	lsrs	r0, r2, #16
 80005e0:	434b      	muls	r3, r1
 80005e2:	4365      	muls	r5, r4
 80005e4:	4341      	muls	r1, r0
 80005e6:	4360      	muls	r0, r4
 80005e8:	0c2c      	lsrs	r4, r5, #16
 80005ea:	18c0      	adds	r0, r0, r3
 80005ec:	1824      	adds	r4, r4, r0
 80005ee:	468c      	mov	ip, r1
 80005f0:	42a3      	cmp	r3, r4
 80005f2:	d903      	bls.n	80005fc <__aeabi_lmul+0x3c>
 80005f4:	2380      	movs	r3, #128	@ 0x80
 80005f6:	025b      	lsls	r3, r3, #9
 80005f8:	4698      	mov	r8, r3
 80005fa:	44c4      	add	ip, r8
 80005fc:	4649      	mov	r1, r9
 80005fe:	4379      	muls	r1, r7
 8000600:	4356      	muls	r6, r2
 8000602:	0c23      	lsrs	r3, r4, #16
 8000604:	042d      	lsls	r5, r5, #16
 8000606:	0c2d      	lsrs	r5, r5, #16
 8000608:	1989      	adds	r1, r1, r6
 800060a:	4463      	add	r3, ip
 800060c:	0424      	lsls	r4, r4, #16
 800060e:	1960      	adds	r0, r4, r5
 8000610:	18c9      	adds	r1, r1, r3
 8000612:	bcc0      	pop	{r6, r7}
 8000614:	46b9      	mov	r9, r7
 8000616:	46b0      	mov	r8, r6
 8000618:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800061a:	46c0      	nop			@ (mov r8, r8)

0800061c <__aeabi_f2uiz>:
 800061c:	219e      	movs	r1, #158	@ 0x9e
 800061e:	b510      	push	{r4, lr}
 8000620:	05c9      	lsls	r1, r1, #23
 8000622:	1c04      	adds	r4, r0, #0
 8000624:	f7ff ffa2 	bl	800056c <__aeabi_fcmpge>
 8000628:	2800      	cmp	r0, #0
 800062a:	d103      	bne.n	8000634 <__aeabi_f2uiz+0x18>
 800062c:	1c20      	adds	r0, r4, #0
 800062e:	f000 ffaf 	bl	8001590 <__aeabi_f2iz>
 8000632:	bd10      	pop	{r4, pc}
 8000634:	219e      	movs	r1, #158	@ 0x9e
 8000636:	1c20      	adds	r0, r4, #0
 8000638:	05c9      	lsls	r1, r1, #23
 800063a:	f000 fdef 	bl	800121c <__aeabi_fsub>
 800063e:	f000 ffa7 	bl	8001590 <__aeabi_f2iz>
 8000642:	2380      	movs	r3, #128	@ 0x80
 8000644:	061b      	lsls	r3, r3, #24
 8000646:	469c      	mov	ip, r3
 8000648:	4460      	add	r0, ip
 800064a:	e7f2      	b.n	8000632 <__aeabi_f2uiz+0x16>

0800064c <__aeabi_d2uiz>:
 800064c:	b570      	push	{r4, r5, r6, lr}
 800064e:	2200      	movs	r2, #0
 8000650:	4b0c      	ldr	r3, [pc, #48]	@ (8000684 <__aeabi_d2uiz+0x38>)
 8000652:	0004      	movs	r4, r0
 8000654:	000d      	movs	r5, r1
 8000656:	f7ff ff4f 	bl	80004f8 <__aeabi_dcmpge>
 800065a:	2800      	cmp	r0, #0
 800065c:	d104      	bne.n	8000668 <__aeabi_d2uiz+0x1c>
 800065e:	0020      	movs	r0, r4
 8000660:	0029      	movs	r1, r5
 8000662:	f002 fe71 	bl	8003348 <__aeabi_d2iz>
 8000666:	bd70      	pop	{r4, r5, r6, pc}
 8000668:	4b06      	ldr	r3, [pc, #24]	@ (8000684 <__aeabi_d2uiz+0x38>)
 800066a:	2200      	movs	r2, #0
 800066c:	0020      	movs	r0, r4
 800066e:	0029      	movs	r1, r5
 8000670:	f002 faac 	bl	8002bcc <__aeabi_dsub>
 8000674:	f002 fe68 	bl	8003348 <__aeabi_d2iz>
 8000678:	2380      	movs	r3, #128	@ 0x80
 800067a:	061b      	lsls	r3, r3, #24
 800067c:	469c      	mov	ip, r3
 800067e:	4460      	add	r0, ip
 8000680:	e7f1      	b.n	8000666 <__aeabi_d2uiz+0x1a>
 8000682:	46c0      	nop			@ (mov r8, r8)
 8000684:	41e00000 	.word	0x41e00000

08000688 <__aeabi_d2lz>:
 8000688:	b570      	push	{r4, r5, r6, lr}
 800068a:	2200      	movs	r2, #0
 800068c:	2300      	movs	r3, #0
 800068e:	0004      	movs	r4, r0
 8000690:	000d      	movs	r5, r1
 8000692:	f7ff ff13 	bl	80004bc <__aeabi_dcmplt>
 8000696:	2800      	cmp	r0, #0
 8000698:	d108      	bne.n	80006ac <__aeabi_d2lz+0x24>
 800069a:	0020      	movs	r0, r4
 800069c:	0029      	movs	r1, r5
 800069e:	f000 f80f 	bl	80006c0 <__aeabi_d2ulz>
 80006a2:	0002      	movs	r2, r0
 80006a4:	000b      	movs	r3, r1
 80006a6:	0010      	movs	r0, r2
 80006a8:	0019      	movs	r1, r3
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	2380      	movs	r3, #128	@ 0x80
 80006ae:	061b      	lsls	r3, r3, #24
 80006b0:	18e9      	adds	r1, r5, r3
 80006b2:	0020      	movs	r0, r4
 80006b4:	f000 f804 	bl	80006c0 <__aeabi_d2ulz>
 80006b8:	2300      	movs	r3, #0
 80006ba:	4242      	negs	r2, r0
 80006bc:	418b      	sbcs	r3, r1
 80006be:	e7f2      	b.n	80006a6 <__aeabi_d2lz+0x1e>

080006c0 <__aeabi_d2ulz>:
 80006c0:	b570      	push	{r4, r5, r6, lr}
 80006c2:	2200      	movs	r2, #0
 80006c4:	4b0b      	ldr	r3, [pc, #44]	@ (80006f4 <__aeabi_d2ulz+0x34>)
 80006c6:	000d      	movs	r5, r1
 80006c8:	0004      	movs	r4, r0
 80006ca:	f001 ffb7 	bl	800263c <__aeabi_dmul>
 80006ce:	f7ff ffbd 	bl	800064c <__aeabi_d2uiz>
 80006d2:	0006      	movs	r6, r0
 80006d4:	f002 fea2 	bl	800341c <__aeabi_ui2d>
 80006d8:	2200      	movs	r2, #0
 80006da:	4b07      	ldr	r3, [pc, #28]	@ (80006f8 <__aeabi_d2ulz+0x38>)
 80006dc:	f001 ffae 	bl	800263c <__aeabi_dmul>
 80006e0:	0002      	movs	r2, r0
 80006e2:	000b      	movs	r3, r1
 80006e4:	0020      	movs	r0, r4
 80006e6:	0029      	movs	r1, r5
 80006e8:	f002 fa70 	bl	8002bcc <__aeabi_dsub>
 80006ec:	f7ff ffae 	bl	800064c <__aeabi_d2uiz>
 80006f0:	0031      	movs	r1, r6
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	3df00000 	.word	0x3df00000
 80006f8:	41f00000 	.word	0x41f00000

080006fc <__aeabi_l2d>:
 80006fc:	b570      	push	{r4, r5, r6, lr}
 80006fe:	0006      	movs	r6, r0
 8000700:	0008      	movs	r0, r1
 8000702:	f002 fe5d 	bl	80033c0 <__aeabi_i2d>
 8000706:	2200      	movs	r2, #0
 8000708:	4b06      	ldr	r3, [pc, #24]	@ (8000724 <__aeabi_l2d+0x28>)
 800070a:	f001 ff97 	bl	800263c <__aeabi_dmul>
 800070e:	000d      	movs	r5, r1
 8000710:	0004      	movs	r4, r0
 8000712:	0030      	movs	r0, r6
 8000714:	f002 fe82 	bl	800341c <__aeabi_ui2d>
 8000718:	002b      	movs	r3, r5
 800071a:	0022      	movs	r2, r4
 800071c:	f000 ffe6 	bl	80016ec <__aeabi_dadd>
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	46c0      	nop			@ (mov r8, r8)
 8000724:	41f00000 	.word	0x41f00000

08000728 <__udivmoddi4>:
 8000728:	b5f0      	push	{r4, r5, r6, r7, lr}
 800072a:	4657      	mov	r7, sl
 800072c:	464e      	mov	r6, r9
 800072e:	4645      	mov	r5, r8
 8000730:	46de      	mov	lr, fp
 8000732:	b5e0      	push	{r5, r6, r7, lr}
 8000734:	0004      	movs	r4, r0
 8000736:	000d      	movs	r5, r1
 8000738:	4692      	mov	sl, r2
 800073a:	4699      	mov	r9, r3
 800073c:	b083      	sub	sp, #12
 800073e:	428b      	cmp	r3, r1
 8000740:	d830      	bhi.n	80007a4 <__udivmoddi4+0x7c>
 8000742:	d02d      	beq.n	80007a0 <__udivmoddi4+0x78>
 8000744:	4649      	mov	r1, r9
 8000746:	4650      	mov	r0, sl
 8000748:	f002 ff76 	bl	8003638 <__clzdi2>
 800074c:	0029      	movs	r1, r5
 800074e:	0006      	movs	r6, r0
 8000750:	0020      	movs	r0, r4
 8000752:	f002 ff71 	bl	8003638 <__clzdi2>
 8000756:	1a33      	subs	r3, r6, r0
 8000758:	4698      	mov	r8, r3
 800075a:	3b20      	subs	r3, #32
 800075c:	d434      	bmi.n	80007c8 <__udivmoddi4+0xa0>
 800075e:	469b      	mov	fp, r3
 8000760:	4653      	mov	r3, sl
 8000762:	465a      	mov	r2, fp
 8000764:	4093      	lsls	r3, r2
 8000766:	4642      	mov	r2, r8
 8000768:	001f      	movs	r7, r3
 800076a:	4653      	mov	r3, sl
 800076c:	4093      	lsls	r3, r2
 800076e:	001e      	movs	r6, r3
 8000770:	42af      	cmp	r7, r5
 8000772:	d83b      	bhi.n	80007ec <__udivmoddi4+0xc4>
 8000774:	42af      	cmp	r7, r5
 8000776:	d100      	bne.n	800077a <__udivmoddi4+0x52>
 8000778:	e079      	b.n	800086e <__udivmoddi4+0x146>
 800077a:	465b      	mov	r3, fp
 800077c:	1ba4      	subs	r4, r4, r6
 800077e:	41bd      	sbcs	r5, r7
 8000780:	2b00      	cmp	r3, #0
 8000782:	da00      	bge.n	8000786 <__udivmoddi4+0x5e>
 8000784:	e076      	b.n	8000874 <__udivmoddi4+0x14c>
 8000786:	2200      	movs	r2, #0
 8000788:	2300      	movs	r3, #0
 800078a:	9200      	str	r2, [sp, #0]
 800078c:	9301      	str	r3, [sp, #4]
 800078e:	2301      	movs	r3, #1
 8000790:	465a      	mov	r2, fp
 8000792:	4093      	lsls	r3, r2
 8000794:	9301      	str	r3, [sp, #4]
 8000796:	2301      	movs	r3, #1
 8000798:	4642      	mov	r2, r8
 800079a:	4093      	lsls	r3, r2
 800079c:	9300      	str	r3, [sp, #0]
 800079e:	e029      	b.n	80007f4 <__udivmoddi4+0xcc>
 80007a0:	4282      	cmp	r2, r0
 80007a2:	d9cf      	bls.n	8000744 <__udivmoddi4+0x1c>
 80007a4:	2200      	movs	r2, #0
 80007a6:	2300      	movs	r3, #0
 80007a8:	9200      	str	r2, [sp, #0]
 80007aa:	9301      	str	r3, [sp, #4]
 80007ac:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d001      	beq.n	80007b6 <__udivmoddi4+0x8e>
 80007b2:	601c      	str	r4, [r3, #0]
 80007b4:	605d      	str	r5, [r3, #4]
 80007b6:	9800      	ldr	r0, [sp, #0]
 80007b8:	9901      	ldr	r1, [sp, #4]
 80007ba:	b003      	add	sp, #12
 80007bc:	bcf0      	pop	{r4, r5, r6, r7}
 80007be:	46bb      	mov	fp, r7
 80007c0:	46b2      	mov	sl, r6
 80007c2:	46a9      	mov	r9, r5
 80007c4:	46a0      	mov	r8, r4
 80007c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80007c8:	4642      	mov	r2, r8
 80007ca:	469b      	mov	fp, r3
 80007cc:	2320      	movs	r3, #32
 80007ce:	1a9b      	subs	r3, r3, r2
 80007d0:	4652      	mov	r2, sl
 80007d2:	40da      	lsrs	r2, r3
 80007d4:	4641      	mov	r1, r8
 80007d6:	0013      	movs	r3, r2
 80007d8:	464a      	mov	r2, r9
 80007da:	408a      	lsls	r2, r1
 80007dc:	0017      	movs	r7, r2
 80007de:	4642      	mov	r2, r8
 80007e0:	431f      	orrs	r7, r3
 80007e2:	4653      	mov	r3, sl
 80007e4:	4093      	lsls	r3, r2
 80007e6:	001e      	movs	r6, r3
 80007e8:	42af      	cmp	r7, r5
 80007ea:	d9c3      	bls.n	8000774 <__udivmoddi4+0x4c>
 80007ec:	2200      	movs	r2, #0
 80007ee:	2300      	movs	r3, #0
 80007f0:	9200      	str	r2, [sp, #0]
 80007f2:	9301      	str	r3, [sp, #4]
 80007f4:	4643      	mov	r3, r8
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d0d8      	beq.n	80007ac <__udivmoddi4+0x84>
 80007fa:	07fb      	lsls	r3, r7, #31
 80007fc:	0872      	lsrs	r2, r6, #1
 80007fe:	431a      	orrs	r2, r3
 8000800:	4646      	mov	r6, r8
 8000802:	087b      	lsrs	r3, r7, #1
 8000804:	e00e      	b.n	8000824 <__udivmoddi4+0xfc>
 8000806:	42ab      	cmp	r3, r5
 8000808:	d101      	bne.n	800080e <__udivmoddi4+0xe6>
 800080a:	42a2      	cmp	r2, r4
 800080c:	d80c      	bhi.n	8000828 <__udivmoddi4+0x100>
 800080e:	1aa4      	subs	r4, r4, r2
 8000810:	419d      	sbcs	r5, r3
 8000812:	2001      	movs	r0, #1
 8000814:	1924      	adds	r4, r4, r4
 8000816:	416d      	adcs	r5, r5
 8000818:	2100      	movs	r1, #0
 800081a:	3e01      	subs	r6, #1
 800081c:	1824      	adds	r4, r4, r0
 800081e:	414d      	adcs	r5, r1
 8000820:	2e00      	cmp	r6, #0
 8000822:	d006      	beq.n	8000832 <__udivmoddi4+0x10a>
 8000824:	42ab      	cmp	r3, r5
 8000826:	d9ee      	bls.n	8000806 <__udivmoddi4+0xde>
 8000828:	3e01      	subs	r6, #1
 800082a:	1924      	adds	r4, r4, r4
 800082c:	416d      	adcs	r5, r5
 800082e:	2e00      	cmp	r6, #0
 8000830:	d1f8      	bne.n	8000824 <__udivmoddi4+0xfc>
 8000832:	9800      	ldr	r0, [sp, #0]
 8000834:	9901      	ldr	r1, [sp, #4]
 8000836:	465b      	mov	r3, fp
 8000838:	1900      	adds	r0, r0, r4
 800083a:	4169      	adcs	r1, r5
 800083c:	2b00      	cmp	r3, #0
 800083e:	db24      	blt.n	800088a <__udivmoddi4+0x162>
 8000840:	002b      	movs	r3, r5
 8000842:	465a      	mov	r2, fp
 8000844:	4644      	mov	r4, r8
 8000846:	40d3      	lsrs	r3, r2
 8000848:	002a      	movs	r2, r5
 800084a:	40e2      	lsrs	r2, r4
 800084c:	001c      	movs	r4, r3
 800084e:	465b      	mov	r3, fp
 8000850:	0015      	movs	r5, r2
 8000852:	2b00      	cmp	r3, #0
 8000854:	db2a      	blt.n	80008ac <__udivmoddi4+0x184>
 8000856:	0026      	movs	r6, r4
 8000858:	409e      	lsls	r6, r3
 800085a:	0033      	movs	r3, r6
 800085c:	0026      	movs	r6, r4
 800085e:	4647      	mov	r7, r8
 8000860:	40be      	lsls	r6, r7
 8000862:	0032      	movs	r2, r6
 8000864:	1a80      	subs	r0, r0, r2
 8000866:	4199      	sbcs	r1, r3
 8000868:	9000      	str	r0, [sp, #0]
 800086a:	9101      	str	r1, [sp, #4]
 800086c:	e79e      	b.n	80007ac <__udivmoddi4+0x84>
 800086e:	42a3      	cmp	r3, r4
 8000870:	d8bc      	bhi.n	80007ec <__udivmoddi4+0xc4>
 8000872:	e782      	b.n	800077a <__udivmoddi4+0x52>
 8000874:	4642      	mov	r2, r8
 8000876:	2320      	movs	r3, #32
 8000878:	2100      	movs	r1, #0
 800087a:	1a9b      	subs	r3, r3, r2
 800087c:	2200      	movs	r2, #0
 800087e:	9100      	str	r1, [sp, #0]
 8000880:	9201      	str	r2, [sp, #4]
 8000882:	2201      	movs	r2, #1
 8000884:	40da      	lsrs	r2, r3
 8000886:	9201      	str	r2, [sp, #4]
 8000888:	e785      	b.n	8000796 <__udivmoddi4+0x6e>
 800088a:	4642      	mov	r2, r8
 800088c:	2320      	movs	r3, #32
 800088e:	1a9b      	subs	r3, r3, r2
 8000890:	002a      	movs	r2, r5
 8000892:	4646      	mov	r6, r8
 8000894:	409a      	lsls	r2, r3
 8000896:	0023      	movs	r3, r4
 8000898:	40f3      	lsrs	r3, r6
 800089a:	4644      	mov	r4, r8
 800089c:	4313      	orrs	r3, r2
 800089e:	002a      	movs	r2, r5
 80008a0:	40e2      	lsrs	r2, r4
 80008a2:	001c      	movs	r4, r3
 80008a4:	465b      	mov	r3, fp
 80008a6:	0015      	movs	r5, r2
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	dad4      	bge.n	8000856 <__udivmoddi4+0x12e>
 80008ac:	4642      	mov	r2, r8
 80008ae:	002f      	movs	r7, r5
 80008b0:	2320      	movs	r3, #32
 80008b2:	0026      	movs	r6, r4
 80008b4:	4097      	lsls	r7, r2
 80008b6:	1a9b      	subs	r3, r3, r2
 80008b8:	40de      	lsrs	r6, r3
 80008ba:	003b      	movs	r3, r7
 80008bc:	4333      	orrs	r3, r6
 80008be:	e7cd      	b.n	800085c <__udivmoddi4+0x134>

080008c0 <__aeabi_fadd>:
 80008c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80008c2:	46ce      	mov	lr, r9
 80008c4:	4647      	mov	r7, r8
 80008c6:	0243      	lsls	r3, r0, #9
 80008c8:	0a5a      	lsrs	r2, r3, #9
 80008ca:	024e      	lsls	r6, r1, #9
 80008cc:	0045      	lsls	r5, r0, #1
 80008ce:	0fc4      	lsrs	r4, r0, #31
 80008d0:	0048      	lsls	r0, r1, #1
 80008d2:	4691      	mov	r9, r2
 80008d4:	0e2d      	lsrs	r5, r5, #24
 80008d6:	0a72      	lsrs	r2, r6, #9
 80008d8:	0e00      	lsrs	r0, r0, #24
 80008da:	4694      	mov	ip, r2
 80008dc:	b580      	push	{r7, lr}
 80008de:	099b      	lsrs	r3, r3, #6
 80008e0:	0fc9      	lsrs	r1, r1, #31
 80008e2:	09b6      	lsrs	r6, r6, #6
 80008e4:	1a2a      	subs	r2, r5, r0
 80008e6:	428c      	cmp	r4, r1
 80008e8:	d021      	beq.n	800092e <__aeabi_fadd+0x6e>
 80008ea:	2a00      	cmp	r2, #0
 80008ec:	dd0d      	ble.n	800090a <__aeabi_fadd+0x4a>
 80008ee:	2800      	cmp	r0, #0
 80008f0:	d12d      	bne.n	800094e <__aeabi_fadd+0x8e>
 80008f2:	2e00      	cmp	r6, #0
 80008f4:	d100      	bne.n	80008f8 <__aeabi_fadd+0x38>
 80008f6:	e08d      	b.n	8000a14 <__aeabi_fadd+0x154>
 80008f8:	1e51      	subs	r1, r2, #1
 80008fa:	2a01      	cmp	r2, #1
 80008fc:	d100      	bne.n	8000900 <__aeabi_fadd+0x40>
 80008fe:	e11d      	b.n	8000b3c <__aeabi_fadd+0x27c>
 8000900:	2aff      	cmp	r2, #255	@ 0xff
 8000902:	d100      	bne.n	8000906 <__aeabi_fadd+0x46>
 8000904:	e0ab      	b.n	8000a5e <__aeabi_fadd+0x19e>
 8000906:	000a      	movs	r2, r1
 8000908:	e027      	b.n	800095a <__aeabi_fadd+0x9a>
 800090a:	2a00      	cmp	r2, #0
 800090c:	d04d      	beq.n	80009aa <__aeabi_fadd+0xea>
 800090e:	1b42      	subs	r2, r0, r5
 8000910:	2d00      	cmp	r5, #0
 8000912:	d000      	beq.n	8000916 <__aeabi_fadd+0x56>
 8000914:	e0cc      	b.n	8000ab0 <__aeabi_fadd+0x1f0>
 8000916:	2b00      	cmp	r3, #0
 8000918:	d100      	bne.n	800091c <__aeabi_fadd+0x5c>
 800091a:	e079      	b.n	8000a10 <__aeabi_fadd+0x150>
 800091c:	1e54      	subs	r4, r2, #1
 800091e:	2a01      	cmp	r2, #1
 8000920:	d100      	bne.n	8000924 <__aeabi_fadd+0x64>
 8000922:	e128      	b.n	8000b76 <__aeabi_fadd+0x2b6>
 8000924:	2aff      	cmp	r2, #255	@ 0xff
 8000926:	d100      	bne.n	800092a <__aeabi_fadd+0x6a>
 8000928:	e097      	b.n	8000a5a <__aeabi_fadd+0x19a>
 800092a:	0022      	movs	r2, r4
 800092c:	e0c5      	b.n	8000aba <__aeabi_fadd+0x1fa>
 800092e:	2a00      	cmp	r2, #0
 8000930:	dc00      	bgt.n	8000934 <__aeabi_fadd+0x74>
 8000932:	e096      	b.n	8000a62 <__aeabi_fadd+0x1a2>
 8000934:	2800      	cmp	r0, #0
 8000936:	d04f      	beq.n	80009d8 <__aeabi_fadd+0x118>
 8000938:	2dff      	cmp	r5, #255	@ 0xff
 800093a:	d100      	bne.n	800093e <__aeabi_fadd+0x7e>
 800093c:	e08f      	b.n	8000a5e <__aeabi_fadd+0x19e>
 800093e:	2180      	movs	r1, #128	@ 0x80
 8000940:	04c9      	lsls	r1, r1, #19
 8000942:	430e      	orrs	r6, r1
 8000944:	2a1b      	cmp	r2, #27
 8000946:	dd51      	ble.n	80009ec <__aeabi_fadd+0x12c>
 8000948:	002a      	movs	r2, r5
 800094a:	3301      	adds	r3, #1
 800094c:	e018      	b.n	8000980 <__aeabi_fadd+0xc0>
 800094e:	2dff      	cmp	r5, #255	@ 0xff
 8000950:	d100      	bne.n	8000954 <__aeabi_fadd+0x94>
 8000952:	e084      	b.n	8000a5e <__aeabi_fadd+0x19e>
 8000954:	2180      	movs	r1, #128	@ 0x80
 8000956:	04c9      	lsls	r1, r1, #19
 8000958:	430e      	orrs	r6, r1
 800095a:	2101      	movs	r1, #1
 800095c:	2a1b      	cmp	r2, #27
 800095e:	dc08      	bgt.n	8000972 <__aeabi_fadd+0xb2>
 8000960:	0031      	movs	r1, r6
 8000962:	2020      	movs	r0, #32
 8000964:	40d1      	lsrs	r1, r2
 8000966:	1a82      	subs	r2, r0, r2
 8000968:	4096      	lsls	r6, r2
 800096a:	0032      	movs	r2, r6
 800096c:	1e50      	subs	r0, r2, #1
 800096e:	4182      	sbcs	r2, r0
 8000970:	4311      	orrs	r1, r2
 8000972:	1a5b      	subs	r3, r3, r1
 8000974:	015a      	lsls	r2, r3, #5
 8000976:	d459      	bmi.n	8000a2c <__aeabi_fadd+0x16c>
 8000978:	2107      	movs	r1, #7
 800097a:	002a      	movs	r2, r5
 800097c:	4019      	ands	r1, r3
 800097e:	d049      	beq.n	8000a14 <__aeabi_fadd+0x154>
 8000980:	210f      	movs	r1, #15
 8000982:	4019      	ands	r1, r3
 8000984:	2904      	cmp	r1, #4
 8000986:	d000      	beq.n	800098a <__aeabi_fadd+0xca>
 8000988:	3304      	adds	r3, #4
 800098a:	0159      	lsls	r1, r3, #5
 800098c:	d542      	bpl.n	8000a14 <__aeabi_fadd+0x154>
 800098e:	1c50      	adds	r0, r2, #1
 8000990:	2afe      	cmp	r2, #254	@ 0xfe
 8000992:	d03a      	beq.n	8000a0a <__aeabi_fadd+0x14a>
 8000994:	019b      	lsls	r3, r3, #6
 8000996:	b2c0      	uxtb	r0, r0
 8000998:	0a5b      	lsrs	r3, r3, #9
 800099a:	05c0      	lsls	r0, r0, #23
 800099c:	4318      	orrs	r0, r3
 800099e:	07e4      	lsls	r4, r4, #31
 80009a0:	4320      	orrs	r0, r4
 80009a2:	bcc0      	pop	{r6, r7}
 80009a4:	46b9      	mov	r9, r7
 80009a6:	46b0      	mov	r8, r6
 80009a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80009aa:	20fe      	movs	r0, #254	@ 0xfe
 80009ac:	4680      	mov	r8, r0
 80009ae:	1c6f      	adds	r7, r5, #1
 80009b0:	0038      	movs	r0, r7
 80009b2:	4647      	mov	r7, r8
 80009b4:	4207      	tst	r7, r0
 80009b6:	d000      	beq.n	80009ba <__aeabi_fadd+0xfa>
 80009b8:	e08e      	b.n	8000ad8 <__aeabi_fadd+0x218>
 80009ba:	2d00      	cmp	r5, #0
 80009bc:	d000      	beq.n	80009c0 <__aeabi_fadd+0x100>
 80009be:	e0b4      	b.n	8000b2a <__aeabi_fadd+0x26a>
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	d100      	bne.n	80009c6 <__aeabi_fadd+0x106>
 80009c4:	e0db      	b.n	8000b7e <__aeabi_fadd+0x2be>
 80009c6:	2e00      	cmp	r6, #0
 80009c8:	d06c      	beq.n	8000aa4 <__aeabi_fadd+0x1e4>
 80009ca:	1b98      	subs	r0, r3, r6
 80009cc:	0145      	lsls	r5, r0, #5
 80009ce:	d400      	bmi.n	80009d2 <__aeabi_fadd+0x112>
 80009d0:	e0f7      	b.n	8000bc2 <__aeabi_fadd+0x302>
 80009d2:	000c      	movs	r4, r1
 80009d4:	1af3      	subs	r3, r6, r3
 80009d6:	e03d      	b.n	8000a54 <__aeabi_fadd+0x194>
 80009d8:	2e00      	cmp	r6, #0
 80009da:	d01b      	beq.n	8000a14 <__aeabi_fadd+0x154>
 80009dc:	1e51      	subs	r1, r2, #1
 80009de:	2a01      	cmp	r2, #1
 80009e0:	d100      	bne.n	80009e4 <__aeabi_fadd+0x124>
 80009e2:	e082      	b.n	8000aea <__aeabi_fadd+0x22a>
 80009e4:	2aff      	cmp	r2, #255	@ 0xff
 80009e6:	d03a      	beq.n	8000a5e <__aeabi_fadd+0x19e>
 80009e8:	000a      	movs	r2, r1
 80009ea:	e7ab      	b.n	8000944 <__aeabi_fadd+0x84>
 80009ec:	0031      	movs	r1, r6
 80009ee:	2020      	movs	r0, #32
 80009f0:	40d1      	lsrs	r1, r2
 80009f2:	1a82      	subs	r2, r0, r2
 80009f4:	4096      	lsls	r6, r2
 80009f6:	0032      	movs	r2, r6
 80009f8:	1e50      	subs	r0, r2, #1
 80009fa:	4182      	sbcs	r2, r0
 80009fc:	430a      	orrs	r2, r1
 80009fe:	189b      	adds	r3, r3, r2
 8000a00:	015a      	lsls	r2, r3, #5
 8000a02:	d5b9      	bpl.n	8000978 <__aeabi_fadd+0xb8>
 8000a04:	1c6a      	adds	r2, r5, #1
 8000a06:	2dfe      	cmp	r5, #254	@ 0xfe
 8000a08:	d175      	bne.n	8000af6 <__aeabi_fadd+0x236>
 8000a0a:	20ff      	movs	r0, #255	@ 0xff
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	e7c4      	b.n	800099a <__aeabi_fadd+0xda>
 8000a10:	000c      	movs	r4, r1
 8000a12:	0033      	movs	r3, r6
 8000a14:	08db      	lsrs	r3, r3, #3
 8000a16:	2aff      	cmp	r2, #255	@ 0xff
 8000a18:	d146      	bne.n	8000aa8 <__aeabi_fadd+0x1e8>
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d0f5      	beq.n	8000a0a <__aeabi_fadd+0x14a>
 8000a1e:	2280      	movs	r2, #128	@ 0x80
 8000a20:	03d2      	lsls	r2, r2, #15
 8000a22:	4313      	orrs	r3, r2
 8000a24:	025b      	lsls	r3, r3, #9
 8000a26:	20ff      	movs	r0, #255	@ 0xff
 8000a28:	0a5b      	lsrs	r3, r3, #9
 8000a2a:	e7b6      	b.n	800099a <__aeabi_fadd+0xda>
 8000a2c:	019f      	lsls	r7, r3, #6
 8000a2e:	09bf      	lsrs	r7, r7, #6
 8000a30:	0038      	movs	r0, r7
 8000a32:	f002 fde3 	bl	80035fc <__clzsi2>
 8000a36:	3805      	subs	r0, #5
 8000a38:	4087      	lsls	r7, r0
 8000a3a:	4285      	cmp	r5, r0
 8000a3c:	dc24      	bgt.n	8000a88 <__aeabi_fadd+0x1c8>
 8000a3e:	003b      	movs	r3, r7
 8000a40:	2120      	movs	r1, #32
 8000a42:	1b42      	subs	r2, r0, r5
 8000a44:	3201      	adds	r2, #1
 8000a46:	40d3      	lsrs	r3, r2
 8000a48:	1a8a      	subs	r2, r1, r2
 8000a4a:	4097      	lsls	r7, r2
 8000a4c:	1e7a      	subs	r2, r7, #1
 8000a4e:	4197      	sbcs	r7, r2
 8000a50:	2200      	movs	r2, #0
 8000a52:	433b      	orrs	r3, r7
 8000a54:	0759      	lsls	r1, r3, #29
 8000a56:	d193      	bne.n	8000980 <__aeabi_fadd+0xc0>
 8000a58:	e797      	b.n	800098a <__aeabi_fadd+0xca>
 8000a5a:	000c      	movs	r4, r1
 8000a5c:	0033      	movs	r3, r6
 8000a5e:	08db      	lsrs	r3, r3, #3
 8000a60:	e7db      	b.n	8000a1a <__aeabi_fadd+0x15a>
 8000a62:	2a00      	cmp	r2, #0
 8000a64:	d014      	beq.n	8000a90 <__aeabi_fadd+0x1d0>
 8000a66:	1b42      	subs	r2, r0, r5
 8000a68:	2d00      	cmp	r5, #0
 8000a6a:	d14b      	bne.n	8000b04 <__aeabi_fadd+0x244>
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d0d0      	beq.n	8000a12 <__aeabi_fadd+0x152>
 8000a70:	1e51      	subs	r1, r2, #1
 8000a72:	2a01      	cmp	r2, #1
 8000a74:	d100      	bne.n	8000a78 <__aeabi_fadd+0x1b8>
 8000a76:	e09e      	b.n	8000bb6 <__aeabi_fadd+0x2f6>
 8000a78:	2aff      	cmp	r2, #255	@ 0xff
 8000a7a:	d0ef      	beq.n	8000a5c <__aeabi_fadd+0x19c>
 8000a7c:	000a      	movs	r2, r1
 8000a7e:	2a1b      	cmp	r2, #27
 8000a80:	dd5f      	ble.n	8000b42 <__aeabi_fadd+0x282>
 8000a82:	0002      	movs	r2, r0
 8000a84:	1c73      	adds	r3, r6, #1
 8000a86:	e77b      	b.n	8000980 <__aeabi_fadd+0xc0>
 8000a88:	4b50      	ldr	r3, [pc, #320]	@ (8000bcc <__aeabi_fadd+0x30c>)
 8000a8a:	1a2a      	subs	r2, r5, r0
 8000a8c:	403b      	ands	r3, r7
 8000a8e:	e7e1      	b.n	8000a54 <__aeabi_fadd+0x194>
 8000a90:	21fe      	movs	r1, #254	@ 0xfe
 8000a92:	1c6a      	adds	r2, r5, #1
 8000a94:	4211      	tst	r1, r2
 8000a96:	d13b      	bne.n	8000b10 <__aeabi_fadd+0x250>
 8000a98:	2d00      	cmp	r5, #0
 8000a9a:	d15d      	bne.n	8000b58 <__aeabi_fadd+0x298>
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d07f      	beq.n	8000ba0 <__aeabi_fadd+0x2e0>
 8000aa0:	2e00      	cmp	r6, #0
 8000aa2:	d17f      	bne.n	8000ba4 <__aeabi_fadd+0x2e4>
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	08db      	lsrs	r3, r3, #3
 8000aa8:	025b      	lsls	r3, r3, #9
 8000aaa:	0a5b      	lsrs	r3, r3, #9
 8000aac:	b2d0      	uxtb	r0, r2
 8000aae:	e774      	b.n	800099a <__aeabi_fadd+0xda>
 8000ab0:	28ff      	cmp	r0, #255	@ 0xff
 8000ab2:	d0d2      	beq.n	8000a5a <__aeabi_fadd+0x19a>
 8000ab4:	2480      	movs	r4, #128	@ 0x80
 8000ab6:	04e4      	lsls	r4, r4, #19
 8000ab8:	4323      	orrs	r3, r4
 8000aba:	2401      	movs	r4, #1
 8000abc:	2a1b      	cmp	r2, #27
 8000abe:	dc07      	bgt.n	8000ad0 <__aeabi_fadd+0x210>
 8000ac0:	001c      	movs	r4, r3
 8000ac2:	2520      	movs	r5, #32
 8000ac4:	40d4      	lsrs	r4, r2
 8000ac6:	1aaa      	subs	r2, r5, r2
 8000ac8:	4093      	lsls	r3, r2
 8000aca:	1e5a      	subs	r2, r3, #1
 8000acc:	4193      	sbcs	r3, r2
 8000ace:	431c      	orrs	r4, r3
 8000ad0:	1b33      	subs	r3, r6, r4
 8000ad2:	0005      	movs	r5, r0
 8000ad4:	000c      	movs	r4, r1
 8000ad6:	e74d      	b.n	8000974 <__aeabi_fadd+0xb4>
 8000ad8:	1b9f      	subs	r7, r3, r6
 8000ada:	017a      	lsls	r2, r7, #5
 8000adc:	d422      	bmi.n	8000b24 <__aeabi_fadd+0x264>
 8000ade:	2f00      	cmp	r7, #0
 8000ae0:	d1a6      	bne.n	8000a30 <__aeabi_fadd+0x170>
 8000ae2:	2400      	movs	r4, #0
 8000ae4:	2000      	movs	r0, #0
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	e757      	b.n	800099a <__aeabi_fadd+0xda>
 8000aea:	199b      	adds	r3, r3, r6
 8000aec:	2501      	movs	r5, #1
 8000aee:	3201      	adds	r2, #1
 8000af0:	0159      	lsls	r1, r3, #5
 8000af2:	d400      	bmi.n	8000af6 <__aeabi_fadd+0x236>
 8000af4:	e740      	b.n	8000978 <__aeabi_fadd+0xb8>
 8000af6:	2101      	movs	r1, #1
 8000af8:	4835      	ldr	r0, [pc, #212]	@ (8000bd0 <__aeabi_fadd+0x310>)
 8000afa:	4019      	ands	r1, r3
 8000afc:	085b      	lsrs	r3, r3, #1
 8000afe:	4003      	ands	r3, r0
 8000b00:	430b      	orrs	r3, r1
 8000b02:	e7a7      	b.n	8000a54 <__aeabi_fadd+0x194>
 8000b04:	28ff      	cmp	r0, #255	@ 0xff
 8000b06:	d0a9      	beq.n	8000a5c <__aeabi_fadd+0x19c>
 8000b08:	2180      	movs	r1, #128	@ 0x80
 8000b0a:	04c9      	lsls	r1, r1, #19
 8000b0c:	430b      	orrs	r3, r1
 8000b0e:	e7b6      	b.n	8000a7e <__aeabi_fadd+0x1be>
 8000b10:	2aff      	cmp	r2, #255	@ 0xff
 8000b12:	d100      	bne.n	8000b16 <__aeabi_fadd+0x256>
 8000b14:	e779      	b.n	8000a0a <__aeabi_fadd+0x14a>
 8000b16:	199b      	adds	r3, r3, r6
 8000b18:	085b      	lsrs	r3, r3, #1
 8000b1a:	0759      	lsls	r1, r3, #29
 8000b1c:	d000      	beq.n	8000b20 <__aeabi_fadd+0x260>
 8000b1e:	e72f      	b.n	8000980 <__aeabi_fadd+0xc0>
 8000b20:	08db      	lsrs	r3, r3, #3
 8000b22:	e7c1      	b.n	8000aa8 <__aeabi_fadd+0x1e8>
 8000b24:	000c      	movs	r4, r1
 8000b26:	1af7      	subs	r7, r6, r3
 8000b28:	e782      	b.n	8000a30 <__aeabi_fadd+0x170>
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d12c      	bne.n	8000b88 <__aeabi_fadd+0x2c8>
 8000b2e:	2e00      	cmp	r6, #0
 8000b30:	d193      	bne.n	8000a5a <__aeabi_fadd+0x19a>
 8000b32:	2380      	movs	r3, #128	@ 0x80
 8000b34:	2400      	movs	r4, #0
 8000b36:	20ff      	movs	r0, #255	@ 0xff
 8000b38:	03db      	lsls	r3, r3, #15
 8000b3a:	e72e      	b.n	800099a <__aeabi_fadd+0xda>
 8000b3c:	2501      	movs	r5, #1
 8000b3e:	1b9b      	subs	r3, r3, r6
 8000b40:	e718      	b.n	8000974 <__aeabi_fadd+0xb4>
 8000b42:	0019      	movs	r1, r3
 8000b44:	2520      	movs	r5, #32
 8000b46:	40d1      	lsrs	r1, r2
 8000b48:	1aaa      	subs	r2, r5, r2
 8000b4a:	4093      	lsls	r3, r2
 8000b4c:	1e5a      	subs	r2, r3, #1
 8000b4e:	4193      	sbcs	r3, r2
 8000b50:	430b      	orrs	r3, r1
 8000b52:	0005      	movs	r5, r0
 8000b54:	199b      	adds	r3, r3, r6
 8000b56:	e753      	b.n	8000a00 <__aeabi_fadd+0x140>
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d100      	bne.n	8000b5e <__aeabi_fadd+0x29e>
 8000b5c:	e77e      	b.n	8000a5c <__aeabi_fadd+0x19c>
 8000b5e:	2e00      	cmp	r6, #0
 8000b60:	d100      	bne.n	8000b64 <__aeabi_fadd+0x2a4>
 8000b62:	e77c      	b.n	8000a5e <__aeabi_fadd+0x19e>
 8000b64:	2280      	movs	r2, #128	@ 0x80
 8000b66:	03d2      	lsls	r2, r2, #15
 8000b68:	4591      	cmp	r9, r2
 8000b6a:	d302      	bcc.n	8000b72 <__aeabi_fadd+0x2b2>
 8000b6c:	4594      	cmp	ip, r2
 8000b6e:	d200      	bcs.n	8000b72 <__aeabi_fadd+0x2b2>
 8000b70:	0033      	movs	r3, r6
 8000b72:	08db      	lsrs	r3, r3, #3
 8000b74:	e753      	b.n	8000a1e <__aeabi_fadd+0x15e>
 8000b76:	000c      	movs	r4, r1
 8000b78:	1af3      	subs	r3, r6, r3
 8000b7a:	3501      	adds	r5, #1
 8000b7c:	e6fa      	b.n	8000974 <__aeabi_fadd+0xb4>
 8000b7e:	2e00      	cmp	r6, #0
 8000b80:	d0af      	beq.n	8000ae2 <__aeabi_fadd+0x222>
 8000b82:	000c      	movs	r4, r1
 8000b84:	0033      	movs	r3, r6
 8000b86:	e78d      	b.n	8000aa4 <__aeabi_fadd+0x1e4>
 8000b88:	2e00      	cmp	r6, #0
 8000b8a:	d100      	bne.n	8000b8e <__aeabi_fadd+0x2ce>
 8000b8c:	e767      	b.n	8000a5e <__aeabi_fadd+0x19e>
 8000b8e:	2280      	movs	r2, #128	@ 0x80
 8000b90:	03d2      	lsls	r2, r2, #15
 8000b92:	4591      	cmp	r9, r2
 8000b94:	d3ed      	bcc.n	8000b72 <__aeabi_fadd+0x2b2>
 8000b96:	4594      	cmp	ip, r2
 8000b98:	d2eb      	bcs.n	8000b72 <__aeabi_fadd+0x2b2>
 8000b9a:	000c      	movs	r4, r1
 8000b9c:	0033      	movs	r3, r6
 8000b9e:	e7e8      	b.n	8000b72 <__aeabi_fadd+0x2b2>
 8000ba0:	0033      	movs	r3, r6
 8000ba2:	e77f      	b.n	8000aa4 <__aeabi_fadd+0x1e4>
 8000ba4:	199b      	adds	r3, r3, r6
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	0159      	lsls	r1, r3, #5
 8000baa:	d5b9      	bpl.n	8000b20 <__aeabi_fadd+0x260>
 8000bac:	4a07      	ldr	r2, [pc, #28]	@ (8000bcc <__aeabi_fadd+0x30c>)
 8000bae:	4013      	ands	r3, r2
 8000bb0:	08db      	lsrs	r3, r3, #3
 8000bb2:	2201      	movs	r2, #1
 8000bb4:	e778      	b.n	8000aa8 <__aeabi_fadd+0x1e8>
 8000bb6:	199b      	adds	r3, r3, r6
 8000bb8:	3201      	adds	r2, #1
 8000bba:	3501      	adds	r5, #1
 8000bbc:	0159      	lsls	r1, r3, #5
 8000bbe:	d49a      	bmi.n	8000af6 <__aeabi_fadd+0x236>
 8000bc0:	e6da      	b.n	8000978 <__aeabi_fadd+0xb8>
 8000bc2:	1e03      	subs	r3, r0, #0
 8000bc4:	d08d      	beq.n	8000ae2 <__aeabi_fadd+0x222>
 8000bc6:	08db      	lsrs	r3, r3, #3
 8000bc8:	e76e      	b.n	8000aa8 <__aeabi_fadd+0x1e8>
 8000bca:	46c0      	nop			@ (mov r8, r8)
 8000bcc:	fbffffff 	.word	0xfbffffff
 8000bd0:	7dffffff 	.word	0x7dffffff

08000bd4 <__aeabi_fdiv>:
 8000bd4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000bd6:	464f      	mov	r7, r9
 8000bd8:	4646      	mov	r6, r8
 8000bda:	46d6      	mov	lr, sl
 8000bdc:	0244      	lsls	r4, r0, #9
 8000bde:	b5c0      	push	{r6, r7, lr}
 8000be0:	0047      	lsls	r7, r0, #1
 8000be2:	1c0e      	adds	r6, r1, #0
 8000be4:	0a64      	lsrs	r4, r4, #9
 8000be6:	0e3f      	lsrs	r7, r7, #24
 8000be8:	0fc5      	lsrs	r5, r0, #31
 8000bea:	2f00      	cmp	r7, #0
 8000bec:	d03c      	beq.n	8000c68 <__aeabi_fdiv+0x94>
 8000bee:	2fff      	cmp	r7, #255	@ 0xff
 8000bf0:	d042      	beq.n	8000c78 <__aeabi_fdiv+0xa4>
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	2280      	movs	r2, #128	@ 0x80
 8000bf6:	4699      	mov	r9, r3
 8000bf8:	469a      	mov	sl, r3
 8000bfa:	00e4      	lsls	r4, r4, #3
 8000bfc:	04d2      	lsls	r2, r2, #19
 8000bfe:	4314      	orrs	r4, r2
 8000c00:	3f7f      	subs	r7, #127	@ 0x7f
 8000c02:	0273      	lsls	r3, r6, #9
 8000c04:	0a5b      	lsrs	r3, r3, #9
 8000c06:	4698      	mov	r8, r3
 8000c08:	0073      	lsls	r3, r6, #1
 8000c0a:	0e1b      	lsrs	r3, r3, #24
 8000c0c:	0ff6      	lsrs	r6, r6, #31
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d01b      	beq.n	8000c4a <__aeabi_fdiv+0x76>
 8000c12:	2bff      	cmp	r3, #255	@ 0xff
 8000c14:	d013      	beq.n	8000c3e <__aeabi_fdiv+0x6a>
 8000c16:	4642      	mov	r2, r8
 8000c18:	2180      	movs	r1, #128	@ 0x80
 8000c1a:	00d2      	lsls	r2, r2, #3
 8000c1c:	04c9      	lsls	r1, r1, #19
 8000c1e:	4311      	orrs	r1, r2
 8000c20:	4688      	mov	r8, r1
 8000c22:	2000      	movs	r0, #0
 8000c24:	3b7f      	subs	r3, #127	@ 0x7f
 8000c26:	0029      	movs	r1, r5
 8000c28:	1aff      	subs	r7, r7, r3
 8000c2a:	464b      	mov	r3, r9
 8000c2c:	4071      	eors	r1, r6
 8000c2e:	b2c9      	uxtb	r1, r1
 8000c30:	2b0f      	cmp	r3, #15
 8000c32:	d900      	bls.n	8000c36 <__aeabi_fdiv+0x62>
 8000c34:	e0b5      	b.n	8000da2 <__aeabi_fdiv+0x1ce>
 8000c36:	4a74      	ldr	r2, [pc, #464]	@ (8000e08 <__aeabi_fdiv+0x234>)
 8000c38:	009b      	lsls	r3, r3, #2
 8000c3a:	58d3      	ldr	r3, [r2, r3]
 8000c3c:	469f      	mov	pc, r3
 8000c3e:	4643      	mov	r3, r8
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d13f      	bne.n	8000cc4 <__aeabi_fdiv+0xf0>
 8000c44:	3fff      	subs	r7, #255	@ 0xff
 8000c46:	3302      	adds	r3, #2
 8000c48:	e003      	b.n	8000c52 <__aeabi_fdiv+0x7e>
 8000c4a:	4643      	mov	r3, r8
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d12d      	bne.n	8000cac <__aeabi_fdiv+0xd8>
 8000c50:	2301      	movs	r3, #1
 8000c52:	0029      	movs	r1, r5
 8000c54:	464a      	mov	r2, r9
 8000c56:	4071      	eors	r1, r6
 8000c58:	b2c9      	uxtb	r1, r1
 8000c5a:	431a      	orrs	r2, r3
 8000c5c:	2a0e      	cmp	r2, #14
 8000c5e:	d838      	bhi.n	8000cd2 <__aeabi_fdiv+0xfe>
 8000c60:	486a      	ldr	r0, [pc, #424]	@ (8000e0c <__aeabi_fdiv+0x238>)
 8000c62:	0092      	lsls	r2, r2, #2
 8000c64:	5882      	ldr	r2, [r0, r2]
 8000c66:	4697      	mov	pc, r2
 8000c68:	2c00      	cmp	r4, #0
 8000c6a:	d113      	bne.n	8000c94 <__aeabi_fdiv+0xc0>
 8000c6c:	2304      	movs	r3, #4
 8000c6e:	4699      	mov	r9, r3
 8000c70:	3b03      	subs	r3, #3
 8000c72:	2700      	movs	r7, #0
 8000c74:	469a      	mov	sl, r3
 8000c76:	e7c4      	b.n	8000c02 <__aeabi_fdiv+0x2e>
 8000c78:	2c00      	cmp	r4, #0
 8000c7a:	d105      	bne.n	8000c88 <__aeabi_fdiv+0xb4>
 8000c7c:	2308      	movs	r3, #8
 8000c7e:	4699      	mov	r9, r3
 8000c80:	3b06      	subs	r3, #6
 8000c82:	27ff      	movs	r7, #255	@ 0xff
 8000c84:	469a      	mov	sl, r3
 8000c86:	e7bc      	b.n	8000c02 <__aeabi_fdiv+0x2e>
 8000c88:	230c      	movs	r3, #12
 8000c8a:	4699      	mov	r9, r3
 8000c8c:	3b09      	subs	r3, #9
 8000c8e:	27ff      	movs	r7, #255	@ 0xff
 8000c90:	469a      	mov	sl, r3
 8000c92:	e7b6      	b.n	8000c02 <__aeabi_fdiv+0x2e>
 8000c94:	0020      	movs	r0, r4
 8000c96:	f002 fcb1 	bl	80035fc <__clzsi2>
 8000c9a:	2776      	movs	r7, #118	@ 0x76
 8000c9c:	1f43      	subs	r3, r0, #5
 8000c9e:	409c      	lsls	r4, r3
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	427f      	negs	r7, r7
 8000ca4:	4699      	mov	r9, r3
 8000ca6:	469a      	mov	sl, r3
 8000ca8:	1a3f      	subs	r7, r7, r0
 8000caa:	e7aa      	b.n	8000c02 <__aeabi_fdiv+0x2e>
 8000cac:	4640      	mov	r0, r8
 8000cae:	f002 fca5 	bl	80035fc <__clzsi2>
 8000cb2:	4642      	mov	r2, r8
 8000cb4:	1f43      	subs	r3, r0, #5
 8000cb6:	409a      	lsls	r2, r3
 8000cb8:	2376      	movs	r3, #118	@ 0x76
 8000cba:	425b      	negs	r3, r3
 8000cbc:	1a1b      	subs	r3, r3, r0
 8000cbe:	4690      	mov	r8, r2
 8000cc0:	2000      	movs	r0, #0
 8000cc2:	e7b0      	b.n	8000c26 <__aeabi_fdiv+0x52>
 8000cc4:	2303      	movs	r3, #3
 8000cc6:	464a      	mov	r2, r9
 8000cc8:	431a      	orrs	r2, r3
 8000cca:	4691      	mov	r9, r2
 8000ccc:	2003      	movs	r0, #3
 8000cce:	33fc      	adds	r3, #252	@ 0xfc
 8000cd0:	e7a9      	b.n	8000c26 <__aeabi_fdiv+0x52>
 8000cd2:	000d      	movs	r5, r1
 8000cd4:	20ff      	movs	r0, #255	@ 0xff
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	05c0      	lsls	r0, r0, #23
 8000cda:	07ed      	lsls	r5, r5, #31
 8000cdc:	4310      	orrs	r0, r2
 8000cde:	4328      	orrs	r0, r5
 8000ce0:	bce0      	pop	{r5, r6, r7}
 8000ce2:	46ba      	mov	sl, r7
 8000ce4:	46b1      	mov	r9, r6
 8000ce6:	46a8      	mov	r8, r5
 8000ce8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000cea:	000d      	movs	r5, r1
 8000cec:	2000      	movs	r0, #0
 8000cee:	2200      	movs	r2, #0
 8000cf0:	e7f2      	b.n	8000cd8 <__aeabi_fdiv+0x104>
 8000cf2:	4653      	mov	r3, sl
 8000cf4:	2b02      	cmp	r3, #2
 8000cf6:	d0ed      	beq.n	8000cd4 <__aeabi_fdiv+0x100>
 8000cf8:	2b03      	cmp	r3, #3
 8000cfa:	d033      	beq.n	8000d64 <__aeabi_fdiv+0x190>
 8000cfc:	46a0      	mov	r8, r4
 8000cfe:	2b01      	cmp	r3, #1
 8000d00:	d105      	bne.n	8000d0e <__aeabi_fdiv+0x13a>
 8000d02:	2000      	movs	r0, #0
 8000d04:	2200      	movs	r2, #0
 8000d06:	e7e7      	b.n	8000cd8 <__aeabi_fdiv+0x104>
 8000d08:	0035      	movs	r5, r6
 8000d0a:	2803      	cmp	r0, #3
 8000d0c:	d07a      	beq.n	8000e04 <__aeabi_fdiv+0x230>
 8000d0e:	003b      	movs	r3, r7
 8000d10:	337f      	adds	r3, #127	@ 0x7f
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	dd2d      	ble.n	8000d72 <__aeabi_fdiv+0x19e>
 8000d16:	4642      	mov	r2, r8
 8000d18:	0752      	lsls	r2, r2, #29
 8000d1a:	d007      	beq.n	8000d2c <__aeabi_fdiv+0x158>
 8000d1c:	220f      	movs	r2, #15
 8000d1e:	4641      	mov	r1, r8
 8000d20:	400a      	ands	r2, r1
 8000d22:	2a04      	cmp	r2, #4
 8000d24:	d002      	beq.n	8000d2c <__aeabi_fdiv+0x158>
 8000d26:	2204      	movs	r2, #4
 8000d28:	4694      	mov	ip, r2
 8000d2a:	44e0      	add	r8, ip
 8000d2c:	4642      	mov	r2, r8
 8000d2e:	0112      	lsls	r2, r2, #4
 8000d30:	d505      	bpl.n	8000d3e <__aeabi_fdiv+0x16a>
 8000d32:	4642      	mov	r2, r8
 8000d34:	4b36      	ldr	r3, [pc, #216]	@ (8000e10 <__aeabi_fdiv+0x23c>)
 8000d36:	401a      	ands	r2, r3
 8000d38:	003b      	movs	r3, r7
 8000d3a:	4690      	mov	r8, r2
 8000d3c:	3380      	adds	r3, #128	@ 0x80
 8000d3e:	2bfe      	cmp	r3, #254	@ 0xfe
 8000d40:	dcc8      	bgt.n	8000cd4 <__aeabi_fdiv+0x100>
 8000d42:	4642      	mov	r2, r8
 8000d44:	0192      	lsls	r2, r2, #6
 8000d46:	0a52      	lsrs	r2, r2, #9
 8000d48:	b2d8      	uxtb	r0, r3
 8000d4a:	e7c5      	b.n	8000cd8 <__aeabi_fdiv+0x104>
 8000d4c:	2280      	movs	r2, #128	@ 0x80
 8000d4e:	2500      	movs	r5, #0
 8000d50:	20ff      	movs	r0, #255	@ 0xff
 8000d52:	03d2      	lsls	r2, r2, #15
 8000d54:	e7c0      	b.n	8000cd8 <__aeabi_fdiv+0x104>
 8000d56:	2280      	movs	r2, #128	@ 0x80
 8000d58:	03d2      	lsls	r2, r2, #15
 8000d5a:	4214      	tst	r4, r2
 8000d5c:	d002      	beq.n	8000d64 <__aeabi_fdiv+0x190>
 8000d5e:	4643      	mov	r3, r8
 8000d60:	4213      	tst	r3, r2
 8000d62:	d049      	beq.n	8000df8 <__aeabi_fdiv+0x224>
 8000d64:	2280      	movs	r2, #128	@ 0x80
 8000d66:	03d2      	lsls	r2, r2, #15
 8000d68:	4322      	orrs	r2, r4
 8000d6a:	0252      	lsls	r2, r2, #9
 8000d6c:	20ff      	movs	r0, #255	@ 0xff
 8000d6e:	0a52      	lsrs	r2, r2, #9
 8000d70:	e7b2      	b.n	8000cd8 <__aeabi_fdiv+0x104>
 8000d72:	2201      	movs	r2, #1
 8000d74:	1ad3      	subs	r3, r2, r3
 8000d76:	2b1b      	cmp	r3, #27
 8000d78:	dcc3      	bgt.n	8000d02 <__aeabi_fdiv+0x12e>
 8000d7a:	4642      	mov	r2, r8
 8000d7c:	40da      	lsrs	r2, r3
 8000d7e:	4643      	mov	r3, r8
 8000d80:	379e      	adds	r7, #158	@ 0x9e
 8000d82:	40bb      	lsls	r3, r7
 8000d84:	1e59      	subs	r1, r3, #1
 8000d86:	418b      	sbcs	r3, r1
 8000d88:	431a      	orrs	r2, r3
 8000d8a:	0753      	lsls	r3, r2, #29
 8000d8c:	d004      	beq.n	8000d98 <__aeabi_fdiv+0x1c4>
 8000d8e:	230f      	movs	r3, #15
 8000d90:	4013      	ands	r3, r2
 8000d92:	2b04      	cmp	r3, #4
 8000d94:	d000      	beq.n	8000d98 <__aeabi_fdiv+0x1c4>
 8000d96:	3204      	adds	r2, #4
 8000d98:	0153      	lsls	r3, r2, #5
 8000d9a:	d529      	bpl.n	8000df0 <__aeabi_fdiv+0x21c>
 8000d9c:	2001      	movs	r0, #1
 8000d9e:	2200      	movs	r2, #0
 8000da0:	e79a      	b.n	8000cd8 <__aeabi_fdiv+0x104>
 8000da2:	4642      	mov	r2, r8
 8000da4:	0163      	lsls	r3, r4, #5
 8000da6:	0155      	lsls	r5, r2, #5
 8000da8:	42ab      	cmp	r3, r5
 8000daa:	d215      	bcs.n	8000dd8 <__aeabi_fdiv+0x204>
 8000dac:	201b      	movs	r0, #27
 8000dae:	2200      	movs	r2, #0
 8000db0:	3f01      	subs	r7, #1
 8000db2:	2601      	movs	r6, #1
 8000db4:	001c      	movs	r4, r3
 8000db6:	0052      	lsls	r2, r2, #1
 8000db8:	005b      	lsls	r3, r3, #1
 8000dba:	2c00      	cmp	r4, #0
 8000dbc:	db01      	blt.n	8000dc2 <__aeabi_fdiv+0x1ee>
 8000dbe:	429d      	cmp	r5, r3
 8000dc0:	d801      	bhi.n	8000dc6 <__aeabi_fdiv+0x1f2>
 8000dc2:	1b5b      	subs	r3, r3, r5
 8000dc4:	4332      	orrs	r2, r6
 8000dc6:	3801      	subs	r0, #1
 8000dc8:	2800      	cmp	r0, #0
 8000dca:	d1f3      	bne.n	8000db4 <__aeabi_fdiv+0x1e0>
 8000dcc:	1e58      	subs	r0, r3, #1
 8000dce:	4183      	sbcs	r3, r0
 8000dd0:	4313      	orrs	r3, r2
 8000dd2:	4698      	mov	r8, r3
 8000dd4:	000d      	movs	r5, r1
 8000dd6:	e79a      	b.n	8000d0e <__aeabi_fdiv+0x13a>
 8000dd8:	201a      	movs	r0, #26
 8000dda:	2201      	movs	r2, #1
 8000ddc:	1b5b      	subs	r3, r3, r5
 8000dde:	e7e8      	b.n	8000db2 <__aeabi_fdiv+0x1de>
 8000de0:	3b02      	subs	r3, #2
 8000de2:	425a      	negs	r2, r3
 8000de4:	4153      	adcs	r3, r2
 8000de6:	425b      	negs	r3, r3
 8000de8:	0035      	movs	r5, r6
 8000dea:	2200      	movs	r2, #0
 8000dec:	b2d8      	uxtb	r0, r3
 8000dee:	e773      	b.n	8000cd8 <__aeabi_fdiv+0x104>
 8000df0:	0192      	lsls	r2, r2, #6
 8000df2:	2000      	movs	r0, #0
 8000df4:	0a52      	lsrs	r2, r2, #9
 8000df6:	e76f      	b.n	8000cd8 <__aeabi_fdiv+0x104>
 8000df8:	431a      	orrs	r2, r3
 8000dfa:	0252      	lsls	r2, r2, #9
 8000dfc:	0035      	movs	r5, r6
 8000dfe:	20ff      	movs	r0, #255	@ 0xff
 8000e00:	0a52      	lsrs	r2, r2, #9
 8000e02:	e769      	b.n	8000cd8 <__aeabi_fdiv+0x104>
 8000e04:	4644      	mov	r4, r8
 8000e06:	e7ad      	b.n	8000d64 <__aeabi_fdiv+0x190>
 8000e08:	0802460c 	.word	0x0802460c
 8000e0c:	0802464c 	.word	0x0802464c
 8000e10:	f7ffffff 	.word	0xf7ffffff

08000e14 <__eqsf2>:
 8000e14:	b570      	push	{r4, r5, r6, lr}
 8000e16:	0042      	lsls	r2, r0, #1
 8000e18:	024e      	lsls	r6, r1, #9
 8000e1a:	004c      	lsls	r4, r1, #1
 8000e1c:	0245      	lsls	r5, r0, #9
 8000e1e:	0a6d      	lsrs	r5, r5, #9
 8000e20:	0e12      	lsrs	r2, r2, #24
 8000e22:	0fc3      	lsrs	r3, r0, #31
 8000e24:	0a76      	lsrs	r6, r6, #9
 8000e26:	0e24      	lsrs	r4, r4, #24
 8000e28:	0fc9      	lsrs	r1, r1, #31
 8000e2a:	2aff      	cmp	r2, #255	@ 0xff
 8000e2c:	d010      	beq.n	8000e50 <__eqsf2+0x3c>
 8000e2e:	2cff      	cmp	r4, #255	@ 0xff
 8000e30:	d00c      	beq.n	8000e4c <__eqsf2+0x38>
 8000e32:	2001      	movs	r0, #1
 8000e34:	42a2      	cmp	r2, r4
 8000e36:	d10a      	bne.n	8000e4e <__eqsf2+0x3a>
 8000e38:	42b5      	cmp	r5, r6
 8000e3a:	d108      	bne.n	8000e4e <__eqsf2+0x3a>
 8000e3c:	428b      	cmp	r3, r1
 8000e3e:	d00f      	beq.n	8000e60 <__eqsf2+0x4c>
 8000e40:	2a00      	cmp	r2, #0
 8000e42:	d104      	bne.n	8000e4e <__eqsf2+0x3a>
 8000e44:	0028      	movs	r0, r5
 8000e46:	1e43      	subs	r3, r0, #1
 8000e48:	4198      	sbcs	r0, r3
 8000e4a:	e000      	b.n	8000e4e <__eqsf2+0x3a>
 8000e4c:	2001      	movs	r0, #1
 8000e4e:	bd70      	pop	{r4, r5, r6, pc}
 8000e50:	2001      	movs	r0, #1
 8000e52:	2cff      	cmp	r4, #255	@ 0xff
 8000e54:	d1fb      	bne.n	8000e4e <__eqsf2+0x3a>
 8000e56:	4335      	orrs	r5, r6
 8000e58:	d1f9      	bne.n	8000e4e <__eqsf2+0x3a>
 8000e5a:	404b      	eors	r3, r1
 8000e5c:	0018      	movs	r0, r3
 8000e5e:	e7f6      	b.n	8000e4e <__eqsf2+0x3a>
 8000e60:	2000      	movs	r0, #0
 8000e62:	e7f4      	b.n	8000e4e <__eqsf2+0x3a>

08000e64 <__gesf2>:
 8000e64:	b530      	push	{r4, r5, lr}
 8000e66:	0042      	lsls	r2, r0, #1
 8000e68:	0244      	lsls	r4, r0, #9
 8000e6a:	024d      	lsls	r5, r1, #9
 8000e6c:	0fc3      	lsrs	r3, r0, #31
 8000e6e:	0048      	lsls	r0, r1, #1
 8000e70:	0a64      	lsrs	r4, r4, #9
 8000e72:	0e12      	lsrs	r2, r2, #24
 8000e74:	0a6d      	lsrs	r5, r5, #9
 8000e76:	0e00      	lsrs	r0, r0, #24
 8000e78:	0fc9      	lsrs	r1, r1, #31
 8000e7a:	2aff      	cmp	r2, #255	@ 0xff
 8000e7c:	d019      	beq.n	8000eb2 <__gesf2+0x4e>
 8000e7e:	28ff      	cmp	r0, #255	@ 0xff
 8000e80:	d00b      	beq.n	8000e9a <__gesf2+0x36>
 8000e82:	2a00      	cmp	r2, #0
 8000e84:	d11e      	bne.n	8000ec4 <__gesf2+0x60>
 8000e86:	2800      	cmp	r0, #0
 8000e88:	d10b      	bne.n	8000ea2 <__gesf2+0x3e>
 8000e8a:	2d00      	cmp	r5, #0
 8000e8c:	d027      	beq.n	8000ede <__gesf2+0x7a>
 8000e8e:	2c00      	cmp	r4, #0
 8000e90:	d134      	bne.n	8000efc <__gesf2+0x98>
 8000e92:	2900      	cmp	r1, #0
 8000e94:	d02f      	beq.n	8000ef6 <__gesf2+0x92>
 8000e96:	0008      	movs	r0, r1
 8000e98:	bd30      	pop	{r4, r5, pc}
 8000e9a:	2d00      	cmp	r5, #0
 8000e9c:	d128      	bne.n	8000ef0 <__gesf2+0x8c>
 8000e9e:	2a00      	cmp	r2, #0
 8000ea0:	d101      	bne.n	8000ea6 <__gesf2+0x42>
 8000ea2:	2c00      	cmp	r4, #0
 8000ea4:	d0f5      	beq.n	8000e92 <__gesf2+0x2e>
 8000ea6:	428b      	cmp	r3, r1
 8000ea8:	d107      	bne.n	8000eba <__gesf2+0x56>
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d023      	beq.n	8000ef6 <__gesf2+0x92>
 8000eae:	0018      	movs	r0, r3
 8000eb0:	e7f2      	b.n	8000e98 <__gesf2+0x34>
 8000eb2:	2c00      	cmp	r4, #0
 8000eb4:	d11c      	bne.n	8000ef0 <__gesf2+0x8c>
 8000eb6:	28ff      	cmp	r0, #255	@ 0xff
 8000eb8:	d014      	beq.n	8000ee4 <__gesf2+0x80>
 8000eba:	1e58      	subs	r0, r3, #1
 8000ebc:	2302      	movs	r3, #2
 8000ebe:	4018      	ands	r0, r3
 8000ec0:	3801      	subs	r0, #1
 8000ec2:	e7e9      	b.n	8000e98 <__gesf2+0x34>
 8000ec4:	2800      	cmp	r0, #0
 8000ec6:	d0f8      	beq.n	8000eba <__gesf2+0x56>
 8000ec8:	428b      	cmp	r3, r1
 8000eca:	d1f6      	bne.n	8000eba <__gesf2+0x56>
 8000ecc:	4282      	cmp	r2, r0
 8000ece:	dcf4      	bgt.n	8000eba <__gesf2+0x56>
 8000ed0:	dbeb      	blt.n	8000eaa <__gesf2+0x46>
 8000ed2:	42ac      	cmp	r4, r5
 8000ed4:	d8f1      	bhi.n	8000eba <__gesf2+0x56>
 8000ed6:	2000      	movs	r0, #0
 8000ed8:	42ac      	cmp	r4, r5
 8000eda:	d2dd      	bcs.n	8000e98 <__gesf2+0x34>
 8000edc:	e7e5      	b.n	8000eaa <__gesf2+0x46>
 8000ede:	2c00      	cmp	r4, #0
 8000ee0:	d0da      	beq.n	8000e98 <__gesf2+0x34>
 8000ee2:	e7ea      	b.n	8000eba <__gesf2+0x56>
 8000ee4:	2d00      	cmp	r5, #0
 8000ee6:	d103      	bne.n	8000ef0 <__gesf2+0x8c>
 8000ee8:	428b      	cmp	r3, r1
 8000eea:	d1e6      	bne.n	8000eba <__gesf2+0x56>
 8000eec:	2000      	movs	r0, #0
 8000eee:	e7d3      	b.n	8000e98 <__gesf2+0x34>
 8000ef0:	2002      	movs	r0, #2
 8000ef2:	4240      	negs	r0, r0
 8000ef4:	e7d0      	b.n	8000e98 <__gesf2+0x34>
 8000ef6:	2001      	movs	r0, #1
 8000ef8:	4240      	negs	r0, r0
 8000efa:	e7cd      	b.n	8000e98 <__gesf2+0x34>
 8000efc:	428b      	cmp	r3, r1
 8000efe:	d0e8      	beq.n	8000ed2 <__gesf2+0x6e>
 8000f00:	e7db      	b.n	8000eba <__gesf2+0x56>
 8000f02:	46c0      	nop			@ (mov r8, r8)

08000f04 <__lesf2>:
 8000f04:	b530      	push	{r4, r5, lr}
 8000f06:	0042      	lsls	r2, r0, #1
 8000f08:	0244      	lsls	r4, r0, #9
 8000f0a:	024d      	lsls	r5, r1, #9
 8000f0c:	0fc3      	lsrs	r3, r0, #31
 8000f0e:	0048      	lsls	r0, r1, #1
 8000f10:	0a64      	lsrs	r4, r4, #9
 8000f12:	0e12      	lsrs	r2, r2, #24
 8000f14:	0a6d      	lsrs	r5, r5, #9
 8000f16:	0e00      	lsrs	r0, r0, #24
 8000f18:	0fc9      	lsrs	r1, r1, #31
 8000f1a:	2aff      	cmp	r2, #255	@ 0xff
 8000f1c:	d01a      	beq.n	8000f54 <__lesf2+0x50>
 8000f1e:	28ff      	cmp	r0, #255	@ 0xff
 8000f20:	d00e      	beq.n	8000f40 <__lesf2+0x3c>
 8000f22:	2a00      	cmp	r2, #0
 8000f24:	d11e      	bne.n	8000f64 <__lesf2+0x60>
 8000f26:	2800      	cmp	r0, #0
 8000f28:	d10e      	bne.n	8000f48 <__lesf2+0x44>
 8000f2a:	2d00      	cmp	r5, #0
 8000f2c:	d02a      	beq.n	8000f84 <__lesf2+0x80>
 8000f2e:	2c00      	cmp	r4, #0
 8000f30:	d00c      	beq.n	8000f4c <__lesf2+0x48>
 8000f32:	428b      	cmp	r3, r1
 8000f34:	d01d      	beq.n	8000f72 <__lesf2+0x6e>
 8000f36:	1e58      	subs	r0, r3, #1
 8000f38:	2302      	movs	r3, #2
 8000f3a:	4018      	ands	r0, r3
 8000f3c:	3801      	subs	r0, #1
 8000f3e:	e010      	b.n	8000f62 <__lesf2+0x5e>
 8000f40:	2d00      	cmp	r5, #0
 8000f42:	d10d      	bne.n	8000f60 <__lesf2+0x5c>
 8000f44:	2a00      	cmp	r2, #0
 8000f46:	d120      	bne.n	8000f8a <__lesf2+0x86>
 8000f48:	2c00      	cmp	r4, #0
 8000f4a:	d11e      	bne.n	8000f8a <__lesf2+0x86>
 8000f4c:	2900      	cmp	r1, #0
 8000f4e:	d023      	beq.n	8000f98 <__lesf2+0x94>
 8000f50:	0008      	movs	r0, r1
 8000f52:	e006      	b.n	8000f62 <__lesf2+0x5e>
 8000f54:	2c00      	cmp	r4, #0
 8000f56:	d103      	bne.n	8000f60 <__lesf2+0x5c>
 8000f58:	28ff      	cmp	r0, #255	@ 0xff
 8000f5a:	d1ec      	bne.n	8000f36 <__lesf2+0x32>
 8000f5c:	2d00      	cmp	r5, #0
 8000f5e:	d017      	beq.n	8000f90 <__lesf2+0x8c>
 8000f60:	2002      	movs	r0, #2
 8000f62:	bd30      	pop	{r4, r5, pc}
 8000f64:	2800      	cmp	r0, #0
 8000f66:	d0e6      	beq.n	8000f36 <__lesf2+0x32>
 8000f68:	428b      	cmp	r3, r1
 8000f6a:	d1e4      	bne.n	8000f36 <__lesf2+0x32>
 8000f6c:	4282      	cmp	r2, r0
 8000f6e:	dce2      	bgt.n	8000f36 <__lesf2+0x32>
 8000f70:	db04      	blt.n	8000f7c <__lesf2+0x78>
 8000f72:	42ac      	cmp	r4, r5
 8000f74:	d8df      	bhi.n	8000f36 <__lesf2+0x32>
 8000f76:	2000      	movs	r0, #0
 8000f78:	42ac      	cmp	r4, r5
 8000f7a:	d2f2      	bcs.n	8000f62 <__lesf2+0x5e>
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d00b      	beq.n	8000f98 <__lesf2+0x94>
 8000f80:	0018      	movs	r0, r3
 8000f82:	e7ee      	b.n	8000f62 <__lesf2+0x5e>
 8000f84:	2c00      	cmp	r4, #0
 8000f86:	d0ec      	beq.n	8000f62 <__lesf2+0x5e>
 8000f88:	e7d5      	b.n	8000f36 <__lesf2+0x32>
 8000f8a:	428b      	cmp	r3, r1
 8000f8c:	d1d3      	bne.n	8000f36 <__lesf2+0x32>
 8000f8e:	e7f5      	b.n	8000f7c <__lesf2+0x78>
 8000f90:	2000      	movs	r0, #0
 8000f92:	428b      	cmp	r3, r1
 8000f94:	d0e5      	beq.n	8000f62 <__lesf2+0x5e>
 8000f96:	e7ce      	b.n	8000f36 <__lesf2+0x32>
 8000f98:	2001      	movs	r0, #1
 8000f9a:	4240      	negs	r0, r0
 8000f9c:	e7e1      	b.n	8000f62 <__lesf2+0x5e>
 8000f9e:	46c0      	nop			@ (mov r8, r8)

08000fa0 <__aeabi_fmul>:
 8000fa0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000fa2:	464f      	mov	r7, r9
 8000fa4:	4646      	mov	r6, r8
 8000fa6:	46d6      	mov	lr, sl
 8000fa8:	0243      	lsls	r3, r0, #9
 8000faa:	0a5b      	lsrs	r3, r3, #9
 8000fac:	0045      	lsls	r5, r0, #1
 8000fae:	b5c0      	push	{r6, r7, lr}
 8000fb0:	4699      	mov	r9, r3
 8000fb2:	1c0f      	adds	r7, r1, #0
 8000fb4:	0e2d      	lsrs	r5, r5, #24
 8000fb6:	0fc6      	lsrs	r6, r0, #31
 8000fb8:	2d00      	cmp	r5, #0
 8000fba:	d100      	bne.n	8000fbe <__aeabi_fmul+0x1e>
 8000fbc:	e088      	b.n	80010d0 <__aeabi_fmul+0x130>
 8000fbe:	2dff      	cmp	r5, #255	@ 0xff
 8000fc0:	d100      	bne.n	8000fc4 <__aeabi_fmul+0x24>
 8000fc2:	e08d      	b.n	80010e0 <__aeabi_fmul+0x140>
 8000fc4:	2280      	movs	r2, #128	@ 0x80
 8000fc6:	00db      	lsls	r3, r3, #3
 8000fc8:	04d2      	lsls	r2, r2, #19
 8000fca:	431a      	orrs	r2, r3
 8000fcc:	2300      	movs	r3, #0
 8000fce:	4691      	mov	r9, r2
 8000fd0:	4698      	mov	r8, r3
 8000fd2:	469a      	mov	sl, r3
 8000fd4:	3d7f      	subs	r5, #127	@ 0x7f
 8000fd6:	027c      	lsls	r4, r7, #9
 8000fd8:	007b      	lsls	r3, r7, #1
 8000fda:	0a64      	lsrs	r4, r4, #9
 8000fdc:	0e1b      	lsrs	r3, r3, #24
 8000fde:	0fff      	lsrs	r7, r7, #31
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d068      	beq.n	80010b6 <__aeabi_fmul+0x116>
 8000fe4:	2bff      	cmp	r3, #255	@ 0xff
 8000fe6:	d021      	beq.n	800102c <__aeabi_fmul+0x8c>
 8000fe8:	2280      	movs	r2, #128	@ 0x80
 8000fea:	00e4      	lsls	r4, r4, #3
 8000fec:	04d2      	lsls	r2, r2, #19
 8000fee:	4314      	orrs	r4, r2
 8000ff0:	4642      	mov	r2, r8
 8000ff2:	3b7f      	subs	r3, #127	@ 0x7f
 8000ff4:	195b      	adds	r3, r3, r5
 8000ff6:	2100      	movs	r1, #0
 8000ff8:	1c5d      	adds	r5, r3, #1
 8000ffa:	2a0a      	cmp	r2, #10
 8000ffc:	dc2e      	bgt.n	800105c <__aeabi_fmul+0xbc>
 8000ffe:	407e      	eors	r6, r7
 8001000:	4642      	mov	r2, r8
 8001002:	2a02      	cmp	r2, #2
 8001004:	dc23      	bgt.n	800104e <__aeabi_fmul+0xae>
 8001006:	3a01      	subs	r2, #1
 8001008:	2a01      	cmp	r2, #1
 800100a:	d900      	bls.n	800100e <__aeabi_fmul+0x6e>
 800100c:	e0bd      	b.n	800118a <__aeabi_fmul+0x1ea>
 800100e:	2902      	cmp	r1, #2
 8001010:	d06e      	beq.n	80010f0 <__aeabi_fmul+0x150>
 8001012:	2901      	cmp	r1, #1
 8001014:	d12c      	bne.n	8001070 <__aeabi_fmul+0xd0>
 8001016:	2000      	movs	r0, #0
 8001018:	2200      	movs	r2, #0
 800101a:	05c0      	lsls	r0, r0, #23
 800101c:	07f6      	lsls	r6, r6, #31
 800101e:	4310      	orrs	r0, r2
 8001020:	4330      	orrs	r0, r6
 8001022:	bce0      	pop	{r5, r6, r7}
 8001024:	46ba      	mov	sl, r7
 8001026:	46b1      	mov	r9, r6
 8001028:	46a8      	mov	r8, r5
 800102a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800102c:	002b      	movs	r3, r5
 800102e:	33ff      	adds	r3, #255	@ 0xff
 8001030:	2c00      	cmp	r4, #0
 8001032:	d065      	beq.n	8001100 <__aeabi_fmul+0x160>
 8001034:	2203      	movs	r2, #3
 8001036:	4641      	mov	r1, r8
 8001038:	4311      	orrs	r1, r2
 800103a:	0032      	movs	r2, r6
 800103c:	3501      	adds	r5, #1
 800103e:	4688      	mov	r8, r1
 8001040:	407a      	eors	r2, r7
 8001042:	35ff      	adds	r5, #255	@ 0xff
 8001044:	290a      	cmp	r1, #10
 8001046:	dd00      	ble.n	800104a <__aeabi_fmul+0xaa>
 8001048:	e0d8      	b.n	80011fc <__aeabi_fmul+0x25c>
 800104a:	0016      	movs	r6, r2
 800104c:	2103      	movs	r1, #3
 800104e:	4640      	mov	r0, r8
 8001050:	2201      	movs	r2, #1
 8001052:	4082      	lsls	r2, r0
 8001054:	20a6      	movs	r0, #166	@ 0xa6
 8001056:	00c0      	lsls	r0, r0, #3
 8001058:	4202      	tst	r2, r0
 800105a:	d020      	beq.n	800109e <__aeabi_fmul+0xfe>
 800105c:	4653      	mov	r3, sl
 800105e:	2b02      	cmp	r3, #2
 8001060:	d046      	beq.n	80010f0 <__aeabi_fmul+0x150>
 8001062:	2b03      	cmp	r3, #3
 8001064:	d100      	bne.n	8001068 <__aeabi_fmul+0xc8>
 8001066:	e0bb      	b.n	80011e0 <__aeabi_fmul+0x240>
 8001068:	4651      	mov	r1, sl
 800106a:	464c      	mov	r4, r9
 800106c:	2901      	cmp	r1, #1
 800106e:	d0d2      	beq.n	8001016 <__aeabi_fmul+0x76>
 8001070:	002b      	movs	r3, r5
 8001072:	337f      	adds	r3, #127	@ 0x7f
 8001074:	2b00      	cmp	r3, #0
 8001076:	dd70      	ble.n	800115a <__aeabi_fmul+0x1ba>
 8001078:	0762      	lsls	r2, r4, #29
 800107a:	d004      	beq.n	8001086 <__aeabi_fmul+0xe6>
 800107c:	220f      	movs	r2, #15
 800107e:	4022      	ands	r2, r4
 8001080:	2a04      	cmp	r2, #4
 8001082:	d000      	beq.n	8001086 <__aeabi_fmul+0xe6>
 8001084:	3404      	adds	r4, #4
 8001086:	0122      	lsls	r2, r4, #4
 8001088:	d503      	bpl.n	8001092 <__aeabi_fmul+0xf2>
 800108a:	4b63      	ldr	r3, [pc, #396]	@ (8001218 <__aeabi_fmul+0x278>)
 800108c:	401c      	ands	r4, r3
 800108e:	002b      	movs	r3, r5
 8001090:	3380      	adds	r3, #128	@ 0x80
 8001092:	2bfe      	cmp	r3, #254	@ 0xfe
 8001094:	dc2c      	bgt.n	80010f0 <__aeabi_fmul+0x150>
 8001096:	01a2      	lsls	r2, r4, #6
 8001098:	0a52      	lsrs	r2, r2, #9
 800109a:	b2d8      	uxtb	r0, r3
 800109c:	e7bd      	b.n	800101a <__aeabi_fmul+0x7a>
 800109e:	2090      	movs	r0, #144	@ 0x90
 80010a0:	0080      	lsls	r0, r0, #2
 80010a2:	4202      	tst	r2, r0
 80010a4:	d127      	bne.n	80010f6 <__aeabi_fmul+0x156>
 80010a6:	38b9      	subs	r0, #185	@ 0xb9
 80010a8:	38ff      	subs	r0, #255	@ 0xff
 80010aa:	4210      	tst	r0, r2
 80010ac:	d06d      	beq.n	800118a <__aeabi_fmul+0x1ea>
 80010ae:	003e      	movs	r6, r7
 80010b0:	46a1      	mov	r9, r4
 80010b2:	468a      	mov	sl, r1
 80010b4:	e7d2      	b.n	800105c <__aeabi_fmul+0xbc>
 80010b6:	2c00      	cmp	r4, #0
 80010b8:	d141      	bne.n	800113e <__aeabi_fmul+0x19e>
 80010ba:	2301      	movs	r3, #1
 80010bc:	4642      	mov	r2, r8
 80010be:	431a      	orrs	r2, r3
 80010c0:	4690      	mov	r8, r2
 80010c2:	002b      	movs	r3, r5
 80010c4:	4642      	mov	r2, r8
 80010c6:	2101      	movs	r1, #1
 80010c8:	1c5d      	adds	r5, r3, #1
 80010ca:	2a0a      	cmp	r2, #10
 80010cc:	dd97      	ble.n	8000ffe <__aeabi_fmul+0x5e>
 80010ce:	e7c5      	b.n	800105c <__aeabi_fmul+0xbc>
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d126      	bne.n	8001122 <__aeabi_fmul+0x182>
 80010d4:	2304      	movs	r3, #4
 80010d6:	4698      	mov	r8, r3
 80010d8:	3b03      	subs	r3, #3
 80010da:	2500      	movs	r5, #0
 80010dc:	469a      	mov	sl, r3
 80010de:	e77a      	b.n	8000fd6 <__aeabi_fmul+0x36>
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d118      	bne.n	8001116 <__aeabi_fmul+0x176>
 80010e4:	2308      	movs	r3, #8
 80010e6:	4698      	mov	r8, r3
 80010e8:	3b06      	subs	r3, #6
 80010ea:	25ff      	movs	r5, #255	@ 0xff
 80010ec:	469a      	mov	sl, r3
 80010ee:	e772      	b.n	8000fd6 <__aeabi_fmul+0x36>
 80010f0:	20ff      	movs	r0, #255	@ 0xff
 80010f2:	2200      	movs	r2, #0
 80010f4:	e791      	b.n	800101a <__aeabi_fmul+0x7a>
 80010f6:	2280      	movs	r2, #128	@ 0x80
 80010f8:	2600      	movs	r6, #0
 80010fa:	20ff      	movs	r0, #255	@ 0xff
 80010fc:	03d2      	lsls	r2, r2, #15
 80010fe:	e78c      	b.n	800101a <__aeabi_fmul+0x7a>
 8001100:	4641      	mov	r1, r8
 8001102:	2202      	movs	r2, #2
 8001104:	3501      	adds	r5, #1
 8001106:	4311      	orrs	r1, r2
 8001108:	4688      	mov	r8, r1
 800110a:	35ff      	adds	r5, #255	@ 0xff
 800110c:	290a      	cmp	r1, #10
 800110e:	dca5      	bgt.n	800105c <__aeabi_fmul+0xbc>
 8001110:	2102      	movs	r1, #2
 8001112:	407e      	eors	r6, r7
 8001114:	e774      	b.n	8001000 <__aeabi_fmul+0x60>
 8001116:	230c      	movs	r3, #12
 8001118:	4698      	mov	r8, r3
 800111a:	3b09      	subs	r3, #9
 800111c:	25ff      	movs	r5, #255	@ 0xff
 800111e:	469a      	mov	sl, r3
 8001120:	e759      	b.n	8000fd6 <__aeabi_fmul+0x36>
 8001122:	0018      	movs	r0, r3
 8001124:	f002 fa6a 	bl	80035fc <__clzsi2>
 8001128:	464a      	mov	r2, r9
 800112a:	1f43      	subs	r3, r0, #5
 800112c:	2576      	movs	r5, #118	@ 0x76
 800112e:	409a      	lsls	r2, r3
 8001130:	2300      	movs	r3, #0
 8001132:	426d      	negs	r5, r5
 8001134:	4691      	mov	r9, r2
 8001136:	4698      	mov	r8, r3
 8001138:	469a      	mov	sl, r3
 800113a:	1a2d      	subs	r5, r5, r0
 800113c:	e74b      	b.n	8000fd6 <__aeabi_fmul+0x36>
 800113e:	0020      	movs	r0, r4
 8001140:	f002 fa5c 	bl	80035fc <__clzsi2>
 8001144:	4642      	mov	r2, r8
 8001146:	1f43      	subs	r3, r0, #5
 8001148:	409c      	lsls	r4, r3
 800114a:	1a2b      	subs	r3, r5, r0
 800114c:	3b76      	subs	r3, #118	@ 0x76
 800114e:	2100      	movs	r1, #0
 8001150:	1c5d      	adds	r5, r3, #1
 8001152:	2a0a      	cmp	r2, #10
 8001154:	dc00      	bgt.n	8001158 <__aeabi_fmul+0x1b8>
 8001156:	e752      	b.n	8000ffe <__aeabi_fmul+0x5e>
 8001158:	e780      	b.n	800105c <__aeabi_fmul+0xbc>
 800115a:	2201      	movs	r2, #1
 800115c:	1ad3      	subs	r3, r2, r3
 800115e:	2b1b      	cmp	r3, #27
 8001160:	dd00      	ble.n	8001164 <__aeabi_fmul+0x1c4>
 8001162:	e758      	b.n	8001016 <__aeabi_fmul+0x76>
 8001164:	359e      	adds	r5, #158	@ 0x9e
 8001166:	0022      	movs	r2, r4
 8001168:	40ac      	lsls	r4, r5
 800116a:	40da      	lsrs	r2, r3
 800116c:	1e63      	subs	r3, r4, #1
 800116e:	419c      	sbcs	r4, r3
 8001170:	4322      	orrs	r2, r4
 8001172:	0753      	lsls	r3, r2, #29
 8001174:	d004      	beq.n	8001180 <__aeabi_fmul+0x1e0>
 8001176:	230f      	movs	r3, #15
 8001178:	4013      	ands	r3, r2
 800117a:	2b04      	cmp	r3, #4
 800117c:	d000      	beq.n	8001180 <__aeabi_fmul+0x1e0>
 800117e:	3204      	adds	r2, #4
 8001180:	0153      	lsls	r3, r2, #5
 8001182:	d537      	bpl.n	80011f4 <__aeabi_fmul+0x254>
 8001184:	2001      	movs	r0, #1
 8001186:	2200      	movs	r2, #0
 8001188:	e747      	b.n	800101a <__aeabi_fmul+0x7a>
 800118a:	0c21      	lsrs	r1, r4, #16
 800118c:	464a      	mov	r2, r9
 800118e:	0424      	lsls	r4, r4, #16
 8001190:	0c24      	lsrs	r4, r4, #16
 8001192:	0027      	movs	r7, r4
 8001194:	0c10      	lsrs	r0, r2, #16
 8001196:	0412      	lsls	r2, r2, #16
 8001198:	0c12      	lsrs	r2, r2, #16
 800119a:	4344      	muls	r4, r0
 800119c:	4357      	muls	r7, r2
 800119e:	4348      	muls	r0, r1
 80011a0:	4351      	muls	r1, r2
 80011a2:	0c3a      	lsrs	r2, r7, #16
 80011a4:	1909      	adds	r1, r1, r4
 80011a6:	1852      	adds	r2, r2, r1
 80011a8:	4294      	cmp	r4, r2
 80011aa:	d903      	bls.n	80011b4 <__aeabi_fmul+0x214>
 80011ac:	2180      	movs	r1, #128	@ 0x80
 80011ae:	0249      	lsls	r1, r1, #9
 80011b0:	468c      	mov	ip, r1
 80011b2:	4460      	add	r0, ip
 80011b4:	043f      	lsls	r7, r7, #16
 80011b6:	0411      	lsls	r1, r2, #16
 80011b8:	0c3f      	lsrs	r7, r7, #16
 80011ba:	19c9      	adds	r1, r1, r7
 80011bc:	018c      	lsls	r4, r1, #6
 80011be:	1e67      	subs	r7, r4, #1
 80011c0:	41bc      	sbcs	r4, r7
 80011c2:	0c12      	lsrs	r2, r2, #16
 80011c4:	0e89      	lsrs	r1, r1, #26
 80011c6:	1812      	adds	r2, r2, r0
 80011c8:	430c      	orrs	r4, r1
 80011ca:	0192      	lsls	r2, r2, #6
 80011cc:	4314      	orrs	r4, r2
 80011ce:	0112      	lsls	r2, r2, #4
 80011d0:	d50e      	bpl.n	80011f0 <__aeabi_fmul+0x250>
 80011d2:	2301      	movs	r3, #1
 80011d4:	0862      	lsrs	r2, r4, #1
 80011d6:	401c      	ands	r4, r3
 80011d8:	4314      	orrs	r4, r2
 80011da:	e749      	b.n	8001070 <__aeabi_fmul+0xd0>
 80011dc:	003e      	movs	r6, r7
 80011de:	46a1      	mov	r9, r4
 80011e0:	2280      	movs	r2, #128	@ 0x80
 80011e2:	464b      	mov	r3, r9
 80011e4:	03d2      	lsls	r2, r2, #15
 80011e6:	431a      	orrs	r2, r3
 80011e8:	0252      	lsls	r2, r2, #9
 80011ea:	20ff      	movs	r0, #255	@ 0xff
 80011ec:	0a52      	lsrs	r2, r2, #9
 80011ee:	e714      	b.n	800101a <__aeabi_fmul+0x7a>
 80011f0:	001d      	movs	r5, r3
 80011f2:	e73d      	b.n	8001070 <__aeabi_fmul+0xd0>
 80011f4:	0192      	lsls	r2, r2, #6
 80011f6:	2000      	movs	r0, #0
 80011f8:	0a52      	lsrs	r2, r2, #9
 80011fa:	e70e      	b.n	800101a <__aeabi_fmul+0x7a>
 80011fc:	290f      	cmp	r1, #15
 80011fe:	d1ed      	bne.n	80011dc <__aeabi_fmul+0x23c>
 8001200:	2280      	movs	r2, #128	@ 0x80
 8001202:	464b      	mov	r3, r9
 8001204:	03d2      	lsls	r2, r2, #15
 8001206:	4213      	tst	r3, r2
 8001208:	d0ea      	beq.n	80011e0 <__aeabi_fmul+0x240>
 800120a:	4214      	tst	r4, r2
 800120c:	d1e8      	bne.n	80011e0 <__aeabi_fmul+0x240>
 800120e:	003e      	movs	r6, r7
 8001210:	20ff      	movs	r0, #255	@ 0xff
 8001212:	4322      	orrs	r2, r4
 8001214:	e701      	b.n	800101a <__aeabi_fmul+0x7a>
 8001216:	46c0      	nop			@ (mov r8, r8)
 8001218:	f7ffffff 	.word	0xf7ffffff

0800121c <__aeabi_fsub>:
 800121c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800121e:	4647      	mov	r7, r8
 8001220:	46ce      	mov	lr, r9
 8001222:	024e      	lsls	r6, r1, #9
 8001224:	0243      	lsls	r3, r0, #9
 8001226:	0045      	lsls	r5, r0, #1
 8001228:	0a72      	lsrs	r2, r6, #9
 800122a:	0fc4      	lsrs	r4, r0, #31
 800122c:	0048      	lsls	r0, r1, #1
 800122e:	b580      	push	{r7, lr}
 8001230:	4694      	mov	ip, r2
 8001232:	0a5f      	lsrs	r7, r3, #9
 8001234:	0e2d      	lsrs	r5, r5, #24
 8001236:	099b      	lsrs	r3, r3, #6
 8001238:	0e00      	lsrs	r0, r0, #24
 800123a:	0fc9      	lsrs	r1, r1, #31
 800123c:	09b6      	lsrs	r6, r6, #6
 800123e:	28ff      	cmp	r0, #255	@ 0xff
 8001240:	d024      	beq.n	800128c <__aeabi_fsub+0x70>
 8001242:	2201      	movs	r2, #1
 8001244:	4051      	eors	r1, r2
 8001246:	1a2a      	subs	r2, r5, r0
 8001248:	428c      	cmp	r4, r1
 800124a:	d00f      	beq.n	800126c <__aeabi_fsub+0x50>
 800124c:	2a00      	cmp	r2, #0
 800124e:	dc00      	bgt.n	8001252 <__aeabi_fsub+0x36>
 8001250:	e16a      	b.n	8001528 <__aeabi_fsub+0x30c>
 8001252:	2800      	cmp	r0, #0
 8001254:	d135      	bne.n	80012c2 <__aeabi_fsub+0xa6>
 8001256:	2e00      	cmp	r6, #0
 8001258:	d100      	bne.n	800125c <__aeabi_fsub+0x40>
 800125a:	e0a2      	b.n	80013a2 <__aeabi_fsub+0x186>
 800125c:	1e51      	subs	r1, r2, #1
 800125e:	2a01      	cmp	r2, #1
 8001260:	d100      	bne.n	8001264 <__aeabi_fsub+0x48>
 8001262:	e124      	b.n	80014ae <__aeabi_fsub+0x292>
 8001264:	2aff      	cmp	r2, #255	@ 0xff
 8001266:	d021      	beq.n	80012ac <__aeabi_fsub+0x90>
 8001268:	000a      	movs	r2, r1
 800126a:	e02f      	b.n	80012cc <__aeabi_fsub+0xb0>
 800126c:	2a00      	cmp	r2, #0
 800126e:	dc00      	bgt.n	8001272 <__aeabi_fsub+0x56>
 8001270:	e167      	b.n	8001542 <__aeabi_fsub+0x326>
 8001272:	2800      	cmp	r0, #0
 8001274:	d05e      	beq.n	8001334 <__aeabi_fsub+0x118>
 8001276:	2dff      	cmp	r5, #255	@ 0xff
 8001278:	d018      	beq.n	80012ac <__aeabi_fsub+0x90>
 800127a:	2180      	movs	r1, #128	@ 0x80
 800127c:	04c9      	lsls	r1, r1, #19
 800127e:	430e      	orrs	r6, r1
 8001280:	2a1b      	cmp	r2, #27
 8001282:	dc00      	bgt.n	8001286 <__aeabi_fsub+0x6a>
 8001284:	e076      	b.n	8001374 <__aeabi_fsub+0x158>
 8001286:	002a      	movs	r2, r5
 8001288:	3301      	adds	r3, #1
 800128a:	e032      	b.n	80012f2 <__aeabi_fsub+0xd6>
 800128c:	002a      	movs	r2, r5
 800128e:	3aff      	subs	r2, #255	@ 0xff
 8001290:	4691      	mov	r9, r2
 8001292:	2e00      	cmp	r6, #0
 8001294:	d042      	beq.n	800131c <__aeabi_fsub+0x100>
 8001296:	428c      	cmp	r4, r1
 8001298:	d055      	beq.n	8001346 <__aeabi_fsub+0x12a>
 800129a:	464a      	mov	r2, r9
 800129c:	2a00      	cmp	r2, #0
 800129e:	d100      	bne.n	80012a2 <__aeabi_fsub+0x86>
 80012a0:	e09c      	b.n	80013dc <__aeabi_fsub+0x1c0>
 80012a2:	2d00      	cmp	r5, #0
 80012a4:	d100      	bne.n	80012a8 <__aeabi_fsub+0x8c>
 80012a6:	e077      	b.n	8001398 <__aeabi_fsub+0x17c>
 80012a8:	000c      	movs	r4, r1
 80012aa:	0033      	movs	r3, r6
 80012ac:	08db      	lsrs	r3, r3, #3
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d100      	bne.n	80012b4 <__aeabi_fsub+0x98>
 80012b2:	e06e      	b.n	8001392 <__aeabi_fsub+0x176>
 80012b4:	2280      	movs	r2, #128	@ 0x80
 80012b6:	03d2      	lsls	r2, r2, #15
 80012b8:	4313      	orrs	r3, r2
 80012ba:	025b      	lsls	r3, r3, #9
 80012bc:	20ff      	movs	r0, #255	@ 0xff
 80012be:	0a5b      	lsrs	r3, r3, #9
 80012c0:	e024      	b.n	800130c <__aeabi_fsub+0xf0>
 80012c2:	2dff      	cmp	r5, #255	@ 0xff
 80012c4:	d0f2      	beq.n	80012ac <__aeabi_fsub+0x90>
 80012c6:	2180      	movs	r1, #128	@ 0x80
 80012c8:	04c9      	lsls	r1, r1, #19
 80012ca:	430e      	orrs	r6, r1
 80012cc:	2101      	movs	r1, #1
 80012ce:	2a1b      	cmp	r2, #27
 80012d0:	dc08      	bgt.n	80012e4 <__aeabi_fsub+0xc8>
 80012d2:	0031      	movs	r1, r6
 80012d4:	2020      	movs	r0, #32
 80012d6:	40d1      	lsrs	r1, r2
 80012d8:	1a82      	subs	r2, r0, r2
 80012da:	4096      	lsls	r6, r2
 80012dc:	0032      	movs	r2, r6
 80012de:	1e50      	subs	r0, r2, #1
 80012e0:	4182      	sbcs	r2, r0
 80012e2:	4311      	orrs	r1, r2
 80012e4:	1a5b      	subs	r3, r3, r1
 80012e6:	015a      	lsls	r2, r3, #5
 80012e8:	d460      	bmi.n	80013ac <__aeabi_fsub+0x190>
 80012ea:	2107      	movs	r1, #7
 80012ec:	002a      	movs	r2, r5
 80012ee:	4019      	ands	r1, r3
 80012f0:	d057      	beq.n	80013a2 <__aeabi_fsub+0x186>
 80012f2:	210f      	movs	r1, #15
 80012f4:	4019      	ands	r1, r3
 80012f6:	2904      	cmp	r1, #4
 80012f8:	d000      	beq.n	80012fc <__aeabi_fsub+0xe0>
 80012fa:	3304      	adds	r3, #4
 80012fc:	0159      	lsls	r1, r3, #5
 80012fe:	d550      	bpl.n	80013a2 <__aeabi_fsub+0x186>
 8001300:	1c50      	adds	r0, r2, #1
 8001302:	2afe      	cmp	r2, #254	@ 0xfe
 8001304:	d045      	beq.n	8001392 <__aeabi_fsub+0x176>
 8001306:	019b      	lsls	r3, r3, #6
 8001308:	b2c0      	uxtb	r0, r0
 800130a:	0a5b      	lsrs	r3, r3, #9
 800130c:	05c0      	lsls	r0, r0, #23
 800130e:	4318      	orrs	r0, r3
 8001310:	07e4      	lsls	r4, r4, #31
 8001312:	4320      	orrs	r0, r4
 8001314:	bcc0      	pop	{r6, r7}
 8001316:	46b9      	mov	r9, r7
 8001318:	46b0      	mov	r8, r6
 800131a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800131c:	2201      	movs	r2, #1
 800131e:	4051      	eors	r1, r2
 8001320:	428c      	cmp	r4, r1
 8001322:	d1ba      	bne.n	800129a <__aeabi_fsub+0x7e>
 8001324:	464a      	mov	r2, r9
 8001326:	2a00      	cmp	r2, #0
 8001328:	d010      	beq.n	800134c <__aeabi_fsub+0x130>
 800132a:	2d00      	cmp	r5, #0
 800132c:	d100      	bne.n	8001330 <__aeabi_fsub+0x114>
 800132e:	e098      	b.n	8001462 <__aeabi_fsub+0x246>
 8001330:	2300      	movs	r3, #0
 8001332:	e7bb      	b.n	80012ac <__aeabi_fsub+0x90>
 8001334:	2e00      	cmp	r6, #0
 8001336:	d034      	beq.n	80013a2 <__aeabi_fsub+0x186>
 8001338:	1e51      	subs	r1, r2, #1
 800133a:	2a01      	cmp	r2, #1
 800133c:	d06e      	beq.n	800141c <__aeabi_fsub+0x200>
 800133e:	2aff      	cmp	r2, #255	@ 0xff
 8001340:	d0b4      	beq.n	80012ac <__aeabi_fsub+0x90>
 8001342:	000a      	movs	r2, r1
 8001344:	e79c      	b.n	8001280 <__aeabi_fsub+0x64>
 8001346:	2a00      	cmp	r2, #0
 8001348:	d000      	beq.n	800134c <__aeabi_fsub+0x130>
 800134a:	e088      	b.n	800145e <__aeabi_fsub+0x242>
 800134c:	20fe      	movs	r0, #254	@ 0xfe
 800134e:	1c6a      	adds	r2, r5, #1
 8001350:	4210      	tst	r0, r2
 8001352:	d000      	beq.n	8001356 <__aeabi_fsub+0x13a>
 8001354:	e092      	b.n	800147c <__aeabi_fsub+0x260>
 8001356:	2d00      	cmp	r5, #0
 8001358:	d000      	beq.n	800135c <__aeabi_fsub+0x140>
 800135a:	e0a4      	b.n	80014a6 <__aeabi_fsub+0x28a>
 800135c:	2b00      	cmp	r3, #0
 800135e:	d100      	bne.n	8001362 <__aeabi_fsub+0x146>
 8001360:	e0cb      	b.n	80014fa <__aeabi_fsub+0x2de>
 8001362:	2e00      	cmp	r6, #0
 8001364:	d000      	beq.n	8001368 <__aeabi_fsub+0x14c>
 8001366:	e0ca      	b.n	80014fe <__aeabi_fsub+0x2e2>
 8001368:	2200      	movs	r2, #0
 800136a:	08db      	lsrs	r3, r3, #3
 800136c:	025b      	lsls	r3, r3, #9
 800136e:	0a5b      	lsrs	r3, r3, #9
 8001370:	b2d0      	uxtb	r0, r2
 8001372:	e7cb      	b.n	800130c <__aeabi_fsub+0xf0>
 8001374:	0031      	movs	r1, r6
 8001376:	2020      	movs	r0, #32
 8001378:	40d1      	lsrs	r1, r2
 800137a:	1a82      	subs	r2, r0, r2
 800137c:	4096      	lsls	r6, r2
 800137e:	0032      	movs	r2, r6
 8001380:	1e50      	subs	r0, r2, #1
 8001382:	4182      	sbcs	r2, r0
 8001384:	430a      	orrs	r2, r1
 8001386:	189b      	adds	r3, r3, r2
 8001388:	015a      	lsls	r2, r3, #5
 800138a:	d5ae      	bpl.n	80012ea <__aeabi_fsub+0xce>
 800138c:	1c6a      	adds	r2, r5, #1
 800138e:	2dfe      	cmp	r5, #254	@ 0xfe
 8001390:	d14a      	bne.n	8001428 <__aeabi_fsub+0x20c>
 8001392:	20ff      	movs	r0, #255	@ 0xff
 8001394:	2300      	movs	r3, #0
 8001396:	e7b9      	b.n	800130c <__aeabi_fsub+0xf0>
 8001398:	22ff      	movs	r2, #255	@ 0xff
 800139a:	2b00      	cmp	r3, #0
 800139c:	d14b      	bne.n	8001436 <__aeabi_fsub+0x21a>
 800139e:	000c      	movs	r4, r1
 80013a0:	0033      	movs	r3, r6
 80013a2:	08db      	lsrs	r3, r3, #3
 80013a4:	2aff      	cmp	r2, #255	@ 0xff
 80013a6:	d100      	bne.n	80013aa <__aeabi_fsub+0x18e>
 80013a8:	e781      	b.n	80012ae <__aeabi_fsub+0x92>
 80013aa:	e7df      	b.n	800136c <__aeabi_fsub+0x150>
 80013ac:	019f      	lsls	r7, r3, #6
 80013ae:	09bf      	lsrs	r7, r7, #6
 80013b0:	0038      	movs	r0, r7
 80013b2:	f002 f923 	bl	80035fc <__clzsi2>
 80013b6:	3805      	subs	r0, #5
 80013b8:	4087      	lsls	r7, r0
 80013ba:	4285      	cmp	r5, r0
 80013bc:	dc21      	bgt.n	8001402 <__aeabi_fsub+0x1e6>
 80013be:	003b      	movs	r3, r7
 80013c0:	2120      	movs	r1, #32
 80013c2:	1b42      	subs	r2, r0, r5
 80013c4:	3201      	adds	r2, #1
 80013c6:	40d3      	lsrs	r3, r2
 80013c8:	1a8a      	subs	r2, r1, r2
 80013ca:	4097      	lsls	r7, r2
 80013cc:	1e7a      	subs	r2, r7, #1
 80013ce:	4197      	sbcs	r7, r2
 80013d0:	2200      	movs	r2, #0
 80013d2:	433b      	orrs	r3, r7
 80013d4:	0759      	lsls	r1, r3, #29
 80013d6:	d000      	beq.n	80013da <__aeabi_fsub+0x1be>
 80013d8:	e78b      	b.n	80012f2 <__aeabi_fsub+0xd6>
 80013da:	e78f      	b.n	80012fc <__aeabi_fsub+0xe0>
 80013dc:	20fe      	movs	r0, #254	@ 0xfe
 80013de:	1c6a      	adds	r2, r5, #1
 80013e0:	4210      	tst	r0, r2
 80013e2:	d112      	bne.n	800140a <__aeabi_fsub+0x1ee>
 80013e4:	2d00      	cmp	r5, #0
 80013e6:	d152      	bne.n	800148e <__aeabi_fsub+0x272>
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d07c      	beq.n	80014e6 <__aeabi_fsub+0x2ca>
 80013ec:	2e00      	cmp	r6, #0
 80013ee:	d0bb      	beq.n	8001368 <__aeabi_fsub+0x14c>
 80013f0:	1b9a      	subs	r2, r3, r6
 80013f2:	0150      	lsls	r0, r2, #5
 80013f4:	d400      	bmi.n	80013f8 <__aeabi_fsub+0x1dc>
 80013f6:	e08b      	b.n	8001510 <__aeabi_fsub+0x2f4>
 80013f8:	2401      	movs	r4, #1
 80013fa:	2200      	movs	r2, #0
 80013fc:	1af3      	subs	r3, r6, r3
 80013fe:	400c      	ands	r4, r1
 8001400:	e7e8      	b.n	80013d4 <__aeabi_fsub+0x1b8>
 8001402:	4b56      	ldr	r3, [pc, #344]	@ (800155c <__aeabi_fsub+0x340>)
 8001404:	1a2a      	subs	r2, r5, r0
 8001406:	403b      	ands	r3, r7
 8001408:	e7e4      	b.n	80013d4 <__aeabi_fsub+0x1b8>
 800140a:	1b9f      	subs	r7, r3, r6
 800140c:	017a      	lsls	r2, r7, #5
 800140e:	d446      	bmi.n	800149e <__aeabi_fsub+0x282>
 8001410:	2f00      	cmp	r7, #0
 8001412:	d1cd      	bne.n	80013b0 <__aeabi_fsub+0x194>
 8001414:	2400      	movs	r4, #0
 8001416:	2000      	movs	r0, #0
 8001418:	2300      	movs	r3, #0
 800141a:	e777      	b.n	800130c <__aeabi_fsub+0xf0>
 800141c:	199b      	adds	r3, r3, r6
 800141e:	2501      	movs	r5, #1
 8001420:	3201      	adds	r2, #1
 8001422:	0159      	lsls	r1, r3, #5
 8001424:	d400      	bmi.n	8001428 <__aeabi_fsub+0x20c>
 8001426:	e760      	b.n	80012ea <__aeabi_fsub+0xce>
 8001428:	2101      	movs	r1, #1
 800142a:	484d      	ldr	r0, [pc, #308]	@ (8001560 <__aeabi_fsub+0x344>)
 800142c:	4019      	ands	r1, r3
 800142e:	085b      	lsrs	r3, r3, #1
 8001430:	4003      	ands	r3, r0
 8001432:	430b      	orrs	r3, r1
 8001434:	e7ce      	b.n	80013d4 <__aeabi_fsub+0x1b8>
 8001436:	1e57      	subs	r7, r2, #1
 8001438:	2a01      	cmp	r2, #1
 800143a:	d05a      	beq.n	80014f2 <__aeabi_fsub+0x2d6>
 800143c:	000c      	movs	r4, r1
 800143e:	2aff      	cmp	r2, #255	@ 0xff
 8001440:	d033      	beq.n	80014aa <__aeabi_fsub+0x28e>
 8001442:	2201      	movs	r2, #1
 8001444:	2f1b      	cmp	r7, #27
 8001446:	dc07      	bgt.n	8001458 <__aeabi_fsub+0x23c>
 8001448:	2120      	movs	r1, #32
 800144a:	1bc9      	subs	r1, r1, r7
 800144c:	001a      	movs	r2, r3
 800144e:	408b      	lsls	r3, r1
 8001450:	40fa      	lsrs	r2, r7
 8001452:	1e59      	subs	r1, r3, #1
 8001454:	418b      	sbcs	r3, r1
 8001456:	431a      	orrs	r2, r3
 8001458:	0005      	movs	r5, r0
 800145a:	1ab3      	subs	r3, r6, r2
 800145c:	e743      	b.n	80012e6 <__aeabi_fsub+0xca>
 800145e:	2d00      	cmp	r5, #0
 8001460:	d123      	bne.n	80014aa <__aeabi_fsub+0x28e>
 8001462:	22ff      	movs	r2, #255	@ 0xff
 8001464:	2b00      	cmp	r3, #0
 8001466:	d09b      	beq.n	80013a0 <__aeabi_fsub+0x184>
 8001468:	1e51      	subs	r1, r2, #1
 800146a:	2a01      	cmp	r2, #1
 800146c:	d0d6      	beq.n	800141c <__aeabi_fsub+0x200>
 800146e:	2aff      	cmp	r2, #255	@ 0xff
 8001470:	d01b      	beq.n	80014aa <__aeabi_fsub+0x28e>
 8001472:	291b      	cmp	r1, #27
 8001474:	dd2c      	ble.n	80014d0 <__aeabi_fsub+0x2b4>
 8001476:	0002      	movs	r2, r0
 8001478:	1c73      	adds	r3, r6, #1
 800147a:	e73a      	b.n	80012f2 <__aeabi_fsub+0xd6>
 800147c:	2aff      	cmp	r2, #255	@ 0xff
 800147e:	d088      	beq.n	8001392 <__aeabi_fsub+0x176>
 8001480:	199b      	adds	r3, r3, r6
 8001482:	085b      	lsrs	r3, r3, #1
 8001484:	0759      	lsls	r1, r3, #29
 8001486:	d000      	beq.n	800148a <__aeabi_fsub+0x26e>
 8001488:	e733      	b.n	80012f2 <__aeabi_fsub+0xd6>
 800148a:	08db      	lsrs	r3, r3, #3
 800148c:	e76e      	b.n	800136c <__aeabi_fsub+0x150>
 800148e:	2b00      	cmp	r3, #0
 8001490:	d110      	bne.n	80014b4 <__aeabi_fsub+0x298>
 8001492:	2e00      	cmp	r6, #0
 8001494:	d043      	beq.n	800151e <__aeabi_fsub+0x302>
 8001496:	2401      	movs	r4, #1
 8001498:	0033      	movs	r3, r6
 800149a:	400c      	ands	r4, r1
 800149c:	e706      	b.n	80012ac <__aeabi_fsub+0x90>
 800149e:	2401      	movs	r4, #1
 80014a0:	1af7      	subs	r7, r6, r3
 80014a2:	400c      	ands	r4, r1
 80014a4:	e784      	b.n	80013b0 <__aeabi_fsub+0x194>
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d104      	bne.n	80014b4 <__aeabi_fsub+0x298>
 80014aa:	0033      	movs	r3, r6
 80014ac:	e6fe      	b.n	80012ac <__aeabi_fsub+0x90>
 80014ae:	2501      	movs	r5, #1
 80014b0:	1b9b      	subs	r3, r3, r6
 80014b2:	e718      	b.n	80012e6 <__aeabi_fsub+0xca>
 80014b4:	2e00      	cmp	r6, #0
 80014b6:	d100      	bne.n	80014ba <__aeabi_fsub+0x29e>
 80014b8:	e6f8      	b.n	80012ac <__aeabi_fsub+0x90>
 80014ba:	2280      	movs	r2, #128	@ 0x80
 80014bc:	03d2      	lsls	r2, r2, #15
 80014be:	4297      	cmp	r7, r2
 80014c0:	d304      	bcc.n	80014cc <__aeabi_fsub+0x2b0>
 80014c2:	4594      	cmp	ip, r2
 80014c4:	d202      	bcs.n	80014cc <__aeabi_fsub+0x2b0>
 80014c6:	2401      	movs	r4, #1
 80014c8:	0033      	movs	r3, r6
 80014ca:	400c      	ands	r4, r1
 80014cc:	08db      	lsrs	r3, r3, #3
 80014ce:	e6f1      	b.n	80012b4 <__aeabi_fsub+0x98>
 80014d0:	001a      	movs	r2, r3
 80014d2:	2520      	movs	r5, #32
 80014d4:	40ca      	lsrs	r2, r1
 80014d6:	1a69      	subs	r1, r5, r1
 80014d8:	408b      	lsls	r3, r1
 80014da:	1e59      	subs	r1, r3, #1
 80014dc:	418b      	sbcs	r3, r1
 80014de:	4313      	orrs	r3, r2
 80014e0:	0005      	movs	r5, r0
 80014e2:	199b      	adds	r3, r3, r6
 80014e4:	e750      	b.n	8001388 <__aeabi_fsub+0x16c>
 80014e6:	2e00      	cmp	r6, #0
 80014e8:	d094      	beq.n	8001414 <__aeabi_fsub+0x1f8>
 80014ea:	2401      	movs	r4, #1
 80014ec:	0033      	movs	r3, r6
 80014ee:	400c      	ands	r4, r1
 80014f0:	e73a      	b.n	8001368 <__aeabi_fsub+0x14c>
 80014f2:	000c      	movs	r4, r1
 80014f4:	2501      	movs	r5, #1
 80014f6:	1af3      	subs	r3, r6, r3
 80014f8:	e6f5      	b.n	80012e6 <__aeabi_fsub+0xca>
 80014fa:	0033      	movs	r3, r6
 80014fc:	e734      	b.n	8001368 <__aeabi_fsub+0x14c>
 80014fe:	199b      	adds	r3, r3, r6
 8001500:	2200      	movs	r2, #0
 8001502:	0159      	lsls	r1, r3, #5
 8001504:	d5c1      	bpl.n	800148a <__aeabi_fsub+0x26e>
 8001506:	4a15      	ldr	r2, [pc, #84]	@ (800155c <__aeabi_fsub+0x340>)
 8001508:	4013      	ands	r3, r2
 800150a:	08db      	lsrs	r3, r3, #3
 800150c:	2201      	movs	r2, #1
 800150e:	e72d      	b.n	800136c <__aeabi_fsub+0x150>
 8001510:	2a00      	cmp	r2, #0
 8001512:	d100      	bne.n	8001516 <__aeabi_fsub+0x2fa>
 8001514:	e77e      	b.n	8001414 <__aeabi_fsub+0x1f8>
 8001516:	0013      	movs	r3, r2
 8001518:	2200      	movs	r2, #0
 800151a:	08db      	lsrs	r3, r3, #3
 800151c:	e726      	b.n	800136c <__aeabi_fsub+0x150>
 800151e:	2380      	movs	r3, #128	@ 0x80
 8001520:	2400      	movs	r4, #0
 8001522:	20ff      	movs	r0, #255	@ 0xff
 8001524:	03db      	lsls	r3, r3, #15
 8001526:	e6f1      	b.n	800130c <__aeabi_fsub+0xf0>
 8001528:	2a00      	cmp	r2, #0
 800152a:	d100      	bne.n	800152e <__aeabi_fsub+0x312>
 800152c:	e756      	b.n	80013dc <__aeabi_fsub+0x1c0>
 800152e:	1b47      	subs	r7, r0, r5
 8001530:	003a      	movs	r2, r7
 8001532:	2d00      	cmp	r5, #0
 8001534:	d100      	bne.n	8001538 <__aeabi_fsub+0x31c>
 8001536:	e730      	b.n	800139a <__aeabi_fsub+0x17e>
 8001538:	2280      	movs	r2, #128	@ 0x80
 800153a:	04d2      	lsls	r2, r2, #19
 800153c:	000c      	movs	r4, r1
 800153e:	4313      	orrs	r3, r2
 8001540:	e77f      	b.n	8001442 <__aeabi_fsub+0x226>
 8001542:	2a00      	cmp	r2, #0
 8001544:	d100      	bne.n	8001548 <__aeabi_fsub+0x32c>
 8001546:	e701      	b.n	800134c <__aeabi_fsub+0x130>
 8001548:	1b41      	subs	r1, r0, r5
 800154a:	2d00      	cmp	r5, #0
 800154c:	d101      	bne.n	8001552 <__aeabi_fsub+0x336>
 800154e:	000a      	movs	r2, r1
 8001550:	e788      	b.n	8001464 <__aeabi_fsub+0x248>
 8001552:	2280      	movs	r2, #128	@ 0x80
 8001554:	04d2      	lsls	r2, r2, #19
 8001556:	4313      	orrs	r3, r2
 8001558:	e78b      	b.n	8001472 <__aeabi_fsub+0x256>
 800155a:	46c0      	nop			@ (mov r8, r8)
 800155c:	fbffffff 	.word	0xfbffffff
 8001560:	7dffffff 	.word	0x7dffffff

08001564 <__aeabi_fcmpun>:
 8001564:	0243      	lsls	r3, r0, #9
 8001566:	024a      	lsls	r2, r1, #9
 8001568:	0040      	lsls	r0, r0, #1
 800156a:	0049      	lsls	r1, r1, #1
 800156c:	0a5b      	lsrs	r3, r3, #9
 800156e:	0a52      	lsrs	r2, r2, #9
 8001570:	0e09      	lsrs	r1, r1, #24
 8001572:	0e00      	lsrs	r0, r0, #24
 8001574:	28ff      	cmp	r0, #255	@ 0xff
 8001576:	d006      	beq.n	8001586 <__aeabi_fcmpun+0x22>
 8001578:	2000      	movs	r0, #0
 800157a:	29ff      	cmp	r1, #255	@ 0xff
 800157c:	d102      	bne.n	8001584 <__aeabi_fcmpun+0x20>
 800157e:	1e53      	subs	r3, r2, #1
 8001580:	419a      	sbcs	r2, r3
 8001582:	0010      	movs	r0, r2
 8001584:	4770      	bx	lr
 8001586:	38fe      	subs	r0, #254	@ 0xfe
 8001588:	2b00      	cmp	r3, #0
 800158a:	d1fb      	bne.n	8001584 <__aeabi_fcmpun+0x20>
 800158c:	e7f4      	b.n	8001578 <__aeabi_fcmpun+0x14>
 800158e:	46c0      	nop			@ (mov r8, r8)

08001590 <__aeabi_f2iz>:
 8001590:	0241      	lsls	r1, r0, #9
 8001592:	0042      	lsls	r2, r0, #1
 8001594:	0fc3      	lsrs	r3, r0, #31
 8001596:	0a49      	lsrs	r1, r1, #9
 8001598:	2000      	movs	r0, #0
 800159a:	0e12      	lsrs	r2, r2, #24
 800159c:	2a7e      	cmp	r2, #126	@ 0x7e
 800159e:	dd03      	ble.n	80015a8 <__aeabi_f2iz+0x18>
 80015a0:	2a9d      	cmp	r2, #157	@ 0x9d
 80015a2:	dd02      	ble.n	80015aa <__aeabi_f2iz+0x1a>
 80015a4:	4a09      	ldr	r2, [pc, #36]	@ (80015cc <__aeabi_f2iz+0x3c>)
 80015a6:	1898      	adds	r0, r3, r2
 80015a8:	4770      	bx	lr
 80015aa:	2080      	movs	r0, #128	@ 0x80
 80015ac:	0400      	lsls	r0, r0, #16
 80015ae:	4301      	orrs	r1, r0
 80015b0:	2a95      	cmp	r2, #149	@ 0x95
 80015b2:	dc07      	bgt.n	80015c4 <__aeabi_f2iz+0x34>
 80015b4:	2096      	movs	r0, #150	@ 0x96
 80015b6:	1a82      	subs	r2, r0, r2
 80015b8:	40d1      	lsrs	r1, r2
 80015ba:	4248      	negs	r0, r1
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d1f3      	bne.n	80015a8 <__aeabi_f2iz+0x18>
 80015c0:	0008      	movs	r0, r1
 80015c2:	e7f1      	b.n	80015a8 <__aeabi_f2iz+0x18>
 80015c4:	3a96      	subs	r2, #150	@ 0x96
 80015c6:	4091      	lsls	r1, r2
 80015c8:	e7f7      	b.n	80015ba <__aeabi_f2iz+0x2a>
 80015ca:	46c0      	nop			@ (mov r8, r8)
 80015cc:	7fffffff 	.word	0x7fffffff

080015d0 <__aeabi_i2f>:
 80015d0:	b570      	push	{r4, r5, r6, lr}
 80015d2:	2800      	cmp	r0, #0
 80015d4:	d013      	beq.n	80015fe <__aeabi_i2f+0x2e>
 80015d6:	17c3      	asrs	r3, r0, #31
 80015d8:	18c5      	adds	r5, r0, r3
 80015da:	405d      	eors	r5, r3
 80015dc:	0fc4      	lsrs	r4, r0, #31
 80015de:	0028      	movs	r0, r5
 80015e0:	f002 f80c 	bl	80035fc <__clzsi2>
 80015e4:	239e      	movs	r3, #158	@ 0x9e
 80015e6:	0001      	movs	r1, r0
 80015e8:	1a1b      	subs	r3, r3, r0
 80015ea:	2b96      	cmp	r3, #150	@ 0x96
 80015ec:	dc0f      	bgt.n	800160e <__aeabi_i2f+0x3e>
 80015ee:	2808      	cmp	r0, #8
 80015f0:	d034      	beq.n	800165c <__aeabi_i2f+0x8c>
 80015f2:	3908      	subs	r1, #8
 80015f4:	408d      	lsls	r5, r1
 80015f6:	026d      	lsls	r5, r5, #9
 80015f8:	0a6d      	lsrs	r5, r5, #9
 80015fa:	b2d8      	uxtb	r0, r3
 80015fc:	e002      	b.n	8001604 <__aeabi_i2f+0x34>
 80015fe:	2400      	movs	r4, #0
 8001600:	2000      	movs	r0, #0
 8001602:	2500      	movs	r5, #0
 8001604:	05c0      	lsls	r0, r0, #23
 8001606:	4328      	orrs	r0, r5
 8001608:	07e4      	lsls	r4, r4, #31
 800160a:	4320      	orrs	r0, r4
 800160c:	bd70      	pop	{r4, r5, r6, pc}
 800160e:	2b99      	cmp	r3, #153	@ 0x99
 8001610:	dc16      	bgt.n	8001640 <__aeabi_i2f+0x70>
 8001612:	1f42      	subs	r2, r0, #5
 8001614:	2805      	cmp	r0, #5
 8001616:	d000      	beq.n	800161a <__aeabi_i2f+0x4a>
 8001618:	4095      	lsls	r5, r2
 800161a:	002a      	movs	r2, r5
 800161c:	4811      	ldr	r0, [pc, #68]	@ (8001664 <__aeabi_i2f+0x94>)
 800161e:	4002      	ands	r2, r0
 8001620:	076e      	lsls	r6, r5, #29
 8001622:	d009      	beq.n	8001638 <__aeabi_i2f+0x68>
 8001624:	260f      	movs	r6, #15
 8001626:	4035      	ands	r5, r6
 8001628:	2d04      	cmp	r5, #4
 800162a:	d005      	beq.n	8001638 <__aeabi_i2f+0x68>
 800162c:	3204      	adds	r2, #4
 800162e:	0155      	lsls	r5, r2, #5
 8001630:	d502      	bpl.n	8001638 <__aeabi_i2f+0x68>
 8001632:	239f      	movs	r3, #159	@ 0x9f
 8001634:	4002      	ands	r2, r0
 8001636:	1a5b      	subs	r3, r3, r1
 8001638:	0192      	lsls	r2, r2, #6
 800163a:	0a55      	lsrs	r5, r2, #9
 800163c:	b2d8      	uxtb	r0, r3
 800163e:	e7e1      	b.n	8001604 <__aeabi_i2f+0x34>
 8001640:	2205      	movs	r2, #5
 8001642:	1a12      	subs	r2, r2, r0
 8001644:	0028      	movs	r0, r5
 8001646:	40d0      	lsrs	r0, r2
 8001648:	0002      	movs	r2, r0
 800164a:	0008      	movs	r0, r1
 800164c:	301b      	adds	r0, #27
 800164e:	4085      	lsls	r5, r0
 8001650:	0028      	movs	r0, r5
 8001652:	1e45      	subs	r5, r0, #1
 8001654:	41a8      	sbcs	r0, r5
 8001656:	4302      	orrs	r2, r0
 8001658:	0015      	movs	r5, r2
 800165a:	e7de      	b.n	800161a <__aeabi_i2f+0x4a>
 800165c:	026d      	lsls	r5, r5, #9
 800165e:	2096      	movs	r0, #150	@ 0x96
 8001660:	0a6d      	lsrs	r5, r5, #9
 8001662:	e7cf      	b.n	8001604 <__aeabi_i2f+0x34>
 8001664:	fbffffff 	.word	0xfbffffff

08001668 <__aeabi_ui2f>:
 8001668:	b570      	push	{r4, r5, r6, lr}
 800166a:	1e04      	subs	r4, r0, #0
 800166c:	d00e      	beq.n	800168c <__aeabi_ui2f+0x24>
 800166e:	f001 ffc5 	bl	80035fc <__clzsi2>
 8001672:	239e      	movs	r3, #158	@ 0x9e
 8001674:	0001      	movs	r1, r0
 8001676:	1a1b      	subs	r3, r3, r0
 8001678:	2b96      	cmp	r3, #150	@ 0x96
 800167a:	dc0c      	bgt.n	8001696 <__aeabi_ui2f+0x2e>
 800167c:	2808      	cmp	r0, #8
 800167e:	d02f      	beq.n	80016e0 <__aeabi_ui2f+0x78>
 8001680:	3908      	subs	r1, #8
 8001682:	408c      	lsls	r4, r1
 8001684:	0264      	lsls	r4, r4, #9
 8001686:	0a64      	lsrs	r4, r4, #9
 8001688:	b2d8      	uxtb	r0, r3
 800168a:	e001      	b.n	8001690 <__aeabi_ui2f+0x28>
 800168c:	2000      	movs	r0, #0
 800168e:	2400      	movs	r4, #0
 8001690:	05c0      	lsls	r0, r0, #23
 8001692:	4320      	orrs	r0, r4
 8001694:	bd70      	pop	{r4, r5, r6, pc}
 8001696:	2b99      	cmp	r3, #153	@ 0x99
 8001698:	dc16      	bgt.n	80016c8 <__aeabi_ui2f+0x60>
 800169a:	1f42      	subs	r2, r0, #5
 800169c:	2805      	cmp	r0, #5
 800169e:	d000      	beq.n	80016a2 <__aeabi_ui2f+0x3a>
 80016a0:	4094      	lsls	r4, r2
 80016a2:	0022      	movs	r2, r4
 80016a4:	4810      	ldr	r0, [pc, #64]	@ (80016e8 <__aeabi_ui2f+0x80>)
 80016a6:	4002      	ands	r2, r0
 80016a8:	0765      	lsls	r5, r4, #29
 80016aa:	d009      	beq.n	80016c0 <__aeabi_ui2f+0x58>
 80016ac:	250f      	movs	r5, #15
 80016ae:	402c      	ands	r4, r5
 80016b0:	2c04      	cmp	r4, #4
 80016b2:	d005      	beq.n	80016c0 <__aeabi_ui2f+0x58>
 80016b4:	3204      	adds	r2, #4
 80016b6:	0154      	lsls	r4, r2, #5
 80016b8:	d502      	bpl.n	80016c0 <__aeabi_ui2f+0x58>
 80016ba:	239f      	movs	r3, #159	@ 0x9f
 80016bc:	4002      	ands	r2, r0
 80016be:	1a5b      	subs	r3, r3, r1
 80016c0:	0192      	lsls	r2, r2, #6
 80016c2:	0a54      	lsrs	r4, r2, #9
 80016c4:	b2d8      	uxtb	r0, r3
 80016c6:	e7e3      	b.n	8001690 <__aeabi_ui2f+0x28>
 80016c8:	0002      	movs	r2, r0
 80016ca:	0020      	movs	r0, r4
 80016cc:	321b      	adds	r2, #27
 80016ce:	4090      	lsls	r0, r2
 80016d0:	0002      	movs	r2, r0
 80016d2:	1e50      	subs	r0, r2, #1
 80016d4:	4182      	sbcs	r2, r0
 80016d6:	2005      	movs	r0, #5
 80016d8:	1a40      	subs	r0, r0, r1
 80016da:	40c4      	lsrs	r4, r0
 80016dc:	4314      	orrs	r4, r2
 80016de:	e7e0      	b.n	80016a2 <__aeabi_ui2f+0x3a>
 80016e0:	0264      	lsls	r4, r4, #9
 80016e2:	2096      	movs	r0, #150	@ 0x96
 80016e4:	0a64      	lsrs	r4, r4, #9
 80016e6:	e7d3      	b.n	8001690 <__aeabi_ui2f+0x28>
 80016e8:	fbffffff 	.word	0xfbffffff

080016ec <__aeabi_dadd>:
 80016ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80016ee:	4657      	mov	r7, sl
 80016f0:	464e      	mov	r6, r9
 80016f2:	4645      	mov	r5, r8
 80016f4:	46de      	mov	lr, fp
 80016f6:	b5e0      	push	{r5, r6, r7, lr}
 80016f8:	b083      	sub	sp, #12
 80016fa:	9000      	str	r0, [sp, #0]
 80016fc:	9101      	str	r1, [sp, #4]
 80016fe:	030c      	lsls	r4, r1, #12
 8001700:	004f      	lsls	r7, r1, #1
 8001702:	0fce      	lsrs	r6, r1, #31
 8001704:	0a61      	lsrs	r1, r4, #9
 8001706:	9c00      	ldr	r4, [sp, #0]
 8001708:	031d      	lsls	r5, r3, #12
 800170a:	0f64      	lsrs	r4, r4, #29
 800170c:	430c      	orrs	r4, r1
 800170e:	9900      	ldr	r1, [sp, #0]
 8001710:	9200      	str	r2, [sp, #0]
 8001712:	9301      	str	r3, [sp, #4]
 8001714:	00c8      	lsls	r0, r1, #3
 8001716:	0059      	lsls	r1, r3, #1
 8001718:	0d4b      	lsrs	r3, r1, #21
 800171a:	4699      	mov	r9, r3
 800171c:	9a00      	ldr	r2, [sp, #0]
 800171e:	9b01      	ldr	r3, [sp, #4]
 8001720:	0a6d      	lsrs	r5, r5, #9
 8001722:	0fd9      	lsrs	r1, r3, #31
 8001724:	0f53      	lsrs	r3, r2, #29
 8001726:	432b      	orrs	r3, r5
 8001728:	469a      	mov	sl, r3
 800172a:	9b00      	ldr	r3, [sp, #0]
 800172c:	0d7f      	lsrs	r7, r7, #21
 800172e:	00da      	lsls	r2, r3, #3
 8001730:	4694      	mov	ip, r2
 8001732:	464a      	mov	r2, r9
 8001734:	46b0      	mov	r8, r6
 8001736:	1aba      	subs	r2, r7, r2
 8001738:	428e      	cmp	r6, r1
 800173a:	d100      	bne.n	800173e <__aeabi_dadd+0x52>
 800173c:	e0b0      	b.n	80018a0 <__aeabi_dadd+0x1b4>
 800173e:	2a00      	cmp	r2, #0
 8001740:	dc00      	bgt.n	8001744 <__aeabi_dadd+0x58>
 8001742:	e078      	b.n	8001836 <__aeabi_dadd+0x14a>
 8001744:	4649      	mov	r1, r9
 8001746:	2900      	cmp	r1, #0
 8001748:	d100      	bne.n	800174c <__aeabi_dadd+0x60>
 800174a:	e0e9      	b.n	8001920 <__aeabi_dadd+0x234>
 800174c:	49c9      	ldr	r1, [pc, #804]	@ (8001a74 <__aeabi_dadd+0x388>)
 800174e:	428f      	cmp	r7, r1
 8001750:	d100      	bne.n	8001754 <__aeabi_dadd+0x68>
 8001752:	e195      	b.n	8001a80 <__aeabi_dadd+0x394>
 8001754:	2501      	movs	r5, #1
 8001756:	2a38      	cmp	r2, #56	@ 0x38
 8001758:	dc16      	bgt.n	8001788 <__aeabi_dadd+0x9c>
 800175a:	2180      	movs	r1, #128	@ 0x80
 800175c:	4653      	mov	r3, sl
 800175e:	0409      	lsls	r1, r1, #16
 8001760:	430b      	orrs	r3, r1
 8001762:	469a      	mov	sl, r3
 8001764:	2a1f      	cmp	r2, #31
 8001766:	dd00      	ble.n	800176a <__aeabi_dadd+0x7e>
 8001768:	e1e7      	b.n	8001b3a <__aeabi_dadd+0x44e>
 800176a:	2120      	movs	r1, #32
 800176c:	4655      	mov	r5, sl
 800176e:	1a8b      	subs	r3, r1, r2
 8001770:	4661      	mov	r1, ip
 8001772:	409d      	lsls	r5, r3
 8001774:	40d1      	lsrs	r1, r2
 8001776:	430d      	orrs	r5, r1
 8001778:	4661      	mov	r1, ip
 800177a:	4099      	lsls	r1, r3
 800177c:	1e4b      	subs	r3, r1, #1
 800177e:	4199      	sbcs	r1, r3
 8001780:	4653      	mov	r3, sl
 8001782:	40d3      	lsrs	r3, r2
 8001784:	430d      	orrs	r5, r1
 8001786:	1ae4      	subs	r4, r4, r3
 8001788:	1b45      	subs	r5, r0, r5
 800178a:	42a8      	cmp	r0, r5
 800178c:	4180      	sbcs	r0, r0
 800178e:	4240      	negs	r0, r0
 8001790:	1a24      	subs	r4, r4, r0
 8001792:	0223      	lsls	r3, r4, #8
 8001794:	d400      	bmi.n	8001798 <__aeabi_dadd+0xac>
 8001796:	e10f      	b.n	80019b8 <__aeabi_dadd+0x2cc>
 8001798:	0264      	lsls	r4, r4, #9
 800179a:	0a64      	lsrs	r4, r4, #9
 800179c:	2c00      	cmp	r4, #0
 800179e:	d100      	bne.n	80017a2 <__aeabi_dadd+0xb6>
 80017a0:	e139      	b.n	8001a16 <__aeabi_dadd+0x32a>
 80017a2:	0020      	movs	r0, r4
 80017a4:	f001 ff2a 	bl	80035fc <__clzsi2>
 80017a8:	0003      	movs	r3, r0
 80017aa:	3b08      	subs	r3, #8
 80017ac:	2120      	movs	r1, #32
 80017ae:	0028      	movs	r0, r5
 80017b0:	1aca      	subs	r2, r1, r3
 80017b2:	40d0      	lsrs	r0, r2
 80017b4:	409c      	lsls	r4, r3
 80017b6:	0002      	movs	r2, r0
 80017b8:	409d      	lsls	r5, r3
 80017ba:	4322      	orrs	r2, r4
 80017bc:	429f      	cmp	r7, r3
 80017be:	dd00      	ble.n	80017c2 <__aeabi_dadd+0xd6>
 80017c0:	e173      	b.n	8001aaa <__aeabi_dadd+0x3be>
 80017c2:	1bd8      	subs	r0, r3, r7
 80017c4:	3001      	adds	r0, #1
 80017c6:	1a09      	subs	r1, r1, r0
 80017c8:	002c      	movs	r4, r5
 80017ca:	408d      	lsls	r5, r1
 80017cc:	40c4      	lsrs	r4, r0
 80017ce:	1e6b      	subs	r3, r5, #1
 80017d0:	419d      	sbcs	r5, r3
 80017d2:	0013      	movs	r3, r2
 80017d4:	40c2      	lsrs	r2, r0
 80017d6:	408b      	lsls	r3, r1
 80017d8:	4325      	orrs	r5, r4
 80017da:	2700      	movs	r7, #0
 80017dc:	0014      	movs	r4, r2
 80017de:	431d      	orrs	r5, r3
 80017e0:	076b      	lsls	r3, r5, #29
 80017e2:	d009      	beq.n	80017f8 <__aeabi_dadd+0x10c>
 80017e4:	230f      	movs	r3, #15
 80017e6:	402b      	ands	r3, r5
 80017e8:	2b04      	cmp	r3, #4
 80017ea:	d005      	beq.n	80017f8 <__aeabi_dadd+0x10c>
 80017ec:	1d2b      	adds	r3, r5, #4
 80017ee:	42ab      	cmp	r3, r5
 80017f0:	41ad      	sbcs	r5, r5
 80017f2:	426d      	negs	r5, r5
 80017f4:	1964      	adds	r4, r4, r5
 80017f6:	001d      	movs	r5, r3
 80017f8:	0223      	lsls	r3, r4, #8
 80017fa:	d400      	bmi.n	80017fe <__aeabi_dadd+0x112>
 80017fc:	e12d      	b.n	8001a5a <__aeabi_dadd+0x36e>
 80017fe:	4a9d      	ldr	r2, [pc, #628]	@ (8001a74 <__aeabi_dadd+0x388>)
 8001800:	3701      	adds	r7, #1
 8001802:	4297      	cmp	r7, r2
 8001804:	d100      	bne.n	8001808 <__aeabi_dadd+0x11c>
 8001806:	e0d3      	b.n	80019b0 <__aeabi_dadd+0x2c4>
 8001808:	4646      	mov	r6, r8
 800180a:	499b      	ldr	r1, [pc, #620]	@ (8001a78 <__aeabi_dadd+0x38c>)
 800180c:	08ed      	lsrs	r5, r5, #3
 800180e:	4021      	ands	r1, r4
 8001810:	074a      	lsls	r2, r1, #29
 8001812:	432a      	orrs	r2, r5
 8001814:	057c      	lsls	r4, r7, #21
 8001816:	024d      	lsls	r5, r1, #9
 8001818:	0b2d      	lsrs	r5, r5, #12
 800181a:	0d64      	lsrs	r4, r4, #21
 800181c:	0524      	lsls	r4, r4, #20
 800181e:	432c      	orrs	r4, r5
 8001820:	07f6      	lsls	r6, r6, #31
 8001822:	4334      	orrs	r4, r6
 8001824:	0010      	movs	r0, r2
 8001826:	0021      	movs	r1, r4
 8001828:	b003      	add	sp, #12
 800182a:	bcf0      	pop	{r4, r5, r6, r7}
 800182c:	46bb      	mov	fp, r7
 800182e:	46b2      	mov	sl, r6
 8001830:	46a9      	mov	r9, r5
 8001832:	46a0      	mov	r8, r4
 8001834:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001836:	2a00      	cmp	r2, #0
 8001838:	d100      	bne.n	800183c <__aeabi_dadd+0x150>
 800183a:	e084      	b.n	8001946 <__aeabi_dadd+0x25a>
 800183c:	464a      	mov	r2, r9
 800183e:	1bd2      	subs	r2, r2, r7
 8001840:	2f00      	cmp	r7, #0
 8001842:	d000      	beq.n	8001846 <__aeabi_dadd+0x15a>
 8001844:	e16d      	b.n	8001b22 <__aeabi_dadd+0x436>
 8001846:	0025      	movs	r5, r4
 8001848:	4305      	orrs	r5, r0
 800184a:	d100      	bne.n	800184e <__aeabi_dadd+0x162>
 800184c:	e127      	b.n	8001a9e <__aeabi_dadd+0x3b2>
 800184e:	1e56      	subs	r6, r2, #1
 8001850:	2a01      	cmp	r2, #1
 8001852:	d100      	bne.n	8001856 <__aeabi_dadd+0x16a>
 8001854:	e23b      	b.n	8001cce <__aeabi_dadd+0x5e2>
 8001856:	4d87      	ldr	r5, [pc, #540]	@ (8001a74 <__aeabi_dadd+0x388>)
 8001858:	42aa      	cmp	r2, r5
 800185a:	d100      	bne.n	800185e <__aeabi_dadd+0x172>
 800185c:	e26a      	b.n	8001d34 <__aeabi_dadd+0x648>
 800185e:	2501      	movs	r5, #1
 8001860:	2e38      	cmp	r6, #56	@ 0x38
 8001862:	dc12      	bgt.n	800188a <__aeabi_dadd+0x19e>
 8001864:	0032      	movs	r2, r6
 8001866:	2a1f      	cmp	r2, #31
 8001868:	dd00      	ble.n	800186c <__aeabi_dadd+0x180>
 800186a:	e1f8      	b.n	8001c5e <__aeabi_dadd+0x572>
 800186c:	2620      	movs	r6, #32
 800186e:	0025      	movs	r5, r4
 8001870:	1ab6      	subs	r6, r6, r2
 8001872:	0007      	movs	r7, r0
 8001874:	4653      	mov	r3, sl
 8001876:	40b0      	lsls	r0, r6
 8001878:	40d4      	lsrs	r4, r2
 800187a:	40b5      	lsls	r5, r6
 800187c:	40d7      	lsrs	r7, r2
 800187e:	1e46      	subs	r6, r0, #1
 8001880:	41b0      	sbcs	r0, r6
 8001882:	1b1b      	subs	r3, r3, r4
 8001884:	469a      	mov	sl, r3
 8001886:	433d      	orrs	r5, r7
 8001888:	4305      	orrs	r5, r0
 800188a:	4662      	mov	r2, ip
 800188c:	1b55      	subs	r5, r2, r5
 800188e:	45ac      	cmp	ip, r5
 8001890:	4192      	sbcs	r2, r2
 8001892:	4653      	mov	r3, sl
 8001894:	4252      	negs	r2, r2
 8001896:	000e      	movs	r6, r1
 8001898:	464f      	mov	r7, r9
 800189a:	4688      	mov	r8, r1
 800189c:	1a9c      	subs	r4, r3, r2
 800189e:	e778      	b.n	8001792 <__aeabi_dadd+0xa6>
 80018a0:	2a00      	cmp	r2, #0
 80018a2:	dc00      	bgt.n	80018a6 <__aeabi_dadd+0x1ba>
 80018a4:	e08e      	b.n	80019c4 <__aeabi_dadd+0x2d8>
 80018a6:	4649      	mov	r1, r9
 80018a8:	2900      	cmp	r1, #0
 80018aa:	d175      	bne.n	8001998 <__aeabi_dadd+0x2ac>
 80018ac:	4661      	mov	r1, ip
 80018ae:	4653      	mov	r3, sl
 80018b0:	4319      	orrs	r1, r3
 80018b2:	d100      	bne.n	80018b6 <__aeabi_dadd+0x1ca>
 80018b4:	e0f6      	b.n	8001aa4 <__aeabi_dadd+0x3b8>
 80018b6:	1e51      	subs	r1, r2, #1
 80018b8:	2a01      	cmp	r2, #1
 80018ba:	d100      	bne.n	80018be <__aeabi_dadd+0x1d2>
 80018bc:	e191      	b.n	8001be2 <__aeabi_dadd+0x4f6>
 80018be:	4d6d      	ldr	r5, [pc, #436]	@ (8001a74 <__aeabi_dadd+0x388>)
 80018c0:	42aa      	cmp	r2, r5
 80018c2:	d100      	bne.n	80018c6 <__aeabi_dadd+0x1da>
 80018c4:	e0dc      	b.n	8001a80 <__aeabi_dadd+0x394>
 80018c6:	2501      	movs	r5, #1
 80018c8:	2938      	cmp	r1, #56	@ 0x38
 80018ca:	dc14      	bgt.n	80018f6 <__aeabi_dadd+0x20a>
 80018cc:	000a      	movs	r2, r1
 80018ce:	2a1f      	cmp	r2, #31
 80018d0:	dd00      	ble.n	80018d4 <__aeabi_dadd+0x1e8>
 80018d2:	e1a2      	b.n	8001c1a <__aeabi_dadd+0x52e>
 80018d4:	2120      	movs	r1, #32
 80018d6:	4653      	mov	r3, sl
 80018d8:	1a89      	subs	r1, r1, r2
 80018da:	408b      	lsls	r3, r1
 80018dc:	001d      	movs	r5, r3
 80018de:	4663      	mov	r3, ip
 80018e0:	40d3      	lsrs	r3, r2
 80018e2:	431d      	orrs	r5, r3
 80018e4:	4663      	mov	r3, ip
 80018e6:	408b      	lsls	r3, r1
 80018e8:	0019      	movs	r1, r3
 80018ea:	1e4b      	subs	r3, r1, #1
 80018ec:	4199      	sbcs	r1, r3
 80018ee:	4653      	mov	r3, sl
 80018f0:	40d3      	lsrs	r3, r2
 80018f2:	430d      	orrs	r5, r1
 80018f4:	18e4      	adds	r4, r4, r3
 80018f6:	182d      	adds	r5, r5, r0
 80018f8:	4285      	cmp	r5, r0
 80018fa:	4180      	sbcs	r0, r0
 80018fc:	4240      	negs	r0, r0
 80018fe:	1824      	adds	r4, r4, r0
 8001900:	0223      	lsls	r3, r4, #8
 8001902:	d559      	bpl.n	80019b8 <__aeabi_dadd+0x2cc>
 8001904:	4b5b      	ldr	r3, [pc, #364]	@ (8001a74 <__aeabi_dadd+0x388>)
 8001906:	3701      	adds	r7, #1
 8001908:	429f      	cmp	r7, r3
 800190a:	d051      	beq.n	80019b0 <__aeabi_dadd+0x2c4>
 800190c:	2101      	movs	r1, #1
 800190e:	4b5a      	ldr	r3, [pc, #360]	@ (8001a78 <__aeabi_dadd+0x38c>)
 8001910:	086a      	lsrs	r2, r5, #1
 8001912:	401c      	ands	r4, r3
 8001914:	4029      	ands	r1, r5
 8001916:	430a      	orrs	r2, r1
 8001918:	07e5      	lsls	r5, r4, #31
 800191a:	4315      	orrs	r5, r2
 800191c:	0864      	lsrs	r4, r4, #1
 800191e:	e75f      	b.n	80017e0 <__aeabi_dadd+0xf4>
 8001920:	4661      	mov	r1, ip
 8001922:	4653      	mov	r3, sl
 8001924:	4319      	orrs	r1, r3
 8001926:	d100      	bne.n	800192a <__aeabi_dadd+0x23e>
 8001928:	e0bc      	b.n	8001aa4 <__aeabi_dadd+0x3b8>
 800192a:	1e51      	subs	r1, r2, #1
 800192c:	2a01      	cmp	r2, #1
 800192e:	d100      	bne.n	8001932 <__aeabi_dadd+0x246>
 8001930:	e164      	b.n	8001bfc <__aeabi_dadd+0x510>
 8001932:	4d50      	ldr	r5, [pc, #320]	@ (8001a74 <__aeabi_dadd+0x388>)
 8001934:	42aa      	cmp	r2, r5
 8001936:	d100      	bne.n	800193a <__aeabi_dadd+0x24e>
 8001938:	e16a      	b.n	8001c10 <__aeabi_dadd+0x524>
 800193a:	2501      	movs	r5, #1
 800193c:	2938      	cmp	r1, #56	@ 0x38
 800193e:	dd00      	ble.n	8001942 <__aeabi_dadd+0x256>
 8001940:	e722      	b.n	8001788 <__aeabi_dadd+0x9c>
 8001942:	000a      	movs	r2, r1
 8001944:	e70e      	b.n	8001764 <__aeabi_dadd+0x78>
 8001946:	4a4d      	ldr	r2, [pc, #308]	@ (8001a7c <__aeabi_dadd+0x390>)
 8001948:	1c7d      	adds	r5, r7, #1
 800194a:	4215      	tst	r5, r2
 800194c:	d000      	beq.n	8001950 <__aeabi_dadd+0x264>
 800194e:	e0d0      	b.n	8001af2 <__aeabi_dadd+0x406>
 8001950:	0025      	movs	r5, r4
 8001952:	4662      	mov	r2, ip
 8001954:	4653      	mov	r3, sl
 8001956:	4305      	orrs	r5, r0
 8001958:	431a      	orrs	r2, r3
 800195a:	2f00      	cmp	r7, #0
 800195c:	d000      	beq.n	8001960 <__aeabi_dadd+0x274>
 800195e:	e137      	b.n	8001bd0 <__aeabi_dadd+0x4e4>
 8001960:	2d00      	cmp	r5, #0
 8001962:	d100      	bne.n	8001966 <__aeabi_dadd+0x27a>
 8001964:	e1a8      	b.n	8001cb8 <__aeabi_dadd+0x5cc>
 8001966:	2a00      	cmp	r2, #0
 8001968:	d100      	bne.n	800196c <__aeabi_dadd+0x280>
 800196a:	e16a      	b.n	8001c42 <__aeabi_dadd+0x556>
 800196c:	4663      	mov	r3, ip
 800196e:	1ac5      	subs	r5, r0, r3
 8001970:	4653      	mov	r3, sl
 8001972:	1ae2      	subs	r2, r4, r3
 8001974:	42a8      	cmp	r0, r5
 8001976:	419b      	sbcs	r3, r3
 8001978:	425b      	negs	r3, r3
 800197a:	1ad3      	subs	r3, r2, r3
 800197c:	021a      	lsls	r2, r3, #8
 800197e:	d400      	bmi.n	8001982 <__aeabi_dadd+0x296>
 8001980:	e203      	b.n	8001d8a <__aeabi_dadd+0x69e>
 8001982:	4663      	mov	r3, ip
 8001984:	1a1d      	subs	r5, r3, r0
 8001986:	45ac      	cmp	ip, r5
 8001988:	4192      	sbcs	r2, r2
 800198a:	4653      	mov	r3, sl
 800198c:	4252      	negs	r2, r2
 800198e:	1b1c      	subs	r4, r3, r4
 8001990:	000e      	movs	r6, r1
 8001992:	4688      	mov	r8, r1
 8001994:	1aa4      	subs	r4, r4, r2
 8001996:	e723      	b.n	80017e0 <__aeabi_dadd+0xf4>
 8001998:	4936      	ldr	r1, [pc, #216]	@ (8001a74 <__aeabi_dadd+0x388>)
 800199a:	428f      	cmp	r7, r1
 800199c:	d070      	beq.n	8001a80 <__aeabi_dadd+0x394>
 800199e:	2501      	movs	r5, #1
 80019a0:	2a38      	cmp	r2, #56	@ 0x38
 80019a2:	dca8      	bgt.n	80018f6 <__aeabi_dadd+0x20a>
 80019a4:	2180      	movs	r1, #128	@ 0x80
 80019a6:	4653      	mov	r3, sl
 80019a8:	0409      	lsls	r1, r1, #16
 80019aa:	430b      	orrs	r3, r1
 80019ac:	469a      	mov	sl, r3
 80019ae:	e78e      	b.n	80018ce <__aeabi_dadd+0x1e2>
 80019b0:	003c      	movs	r4, r7
 80019b2:	2500      	movs	r5, #0
 80019b4:	2200      	movs	r2, #0
 80019b6:	e731      	b.n	800181c <__aeabi_dadd+0x130>
 80019b8:	2307      	movs	r3, #7
 80019ba:	402b      	ands	r3, r5
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d000      	beq.n	80019c2 <__aeabi_dadd+0x2d6>
 80019c0:	e710      	b.n	80017e4 <__aeabi_dadd+0xf8>
 80019c2:	e093      	b.n	8001aec <__aeabi_dadd+0x400>
 80019c4:	2a00      	cmp	r2, #0
 80019c6:	d074      	beq.n	8001ab2 <__aeabi_dadd+0x3c6>
 80019c8:	464a      	mov	r2, r9
 80019ca:	1bd2      	subs	r2, r2, r7
 80019cc:	2f00      	cmp	r7, #0
 80019ce:	d100      	bne.n	80019d2 <__aeabi_dadd+0x2e6>
 80019d0:	e0c7      	b.n	8001b62 <__aeabi_dadd+0x476>
 80019d2:	4928      	ldr	r1, [pc, #160]	@ (8001a74 <__aeabi_dadd+0x388>)
 80019d4:	4589      	cmp	r9, r1
 80019d6:	d100      	bne.n	80019da <__aeabi_dadd+0x2ee>
 80019d8:	e185      	b.n	8001ce6 <__aeabi_dadd+0x5fa>
 80019da:	2501      	movs	r5, #1
 80019dc:	2a38      	cmp	r2, #56	@ 0x38
 80019de:	dc12      	bgt.n	8001a06 <__aeabi_dadd+0x31a>
 80019e0:	2180      	movs	r1, #128	@ 0x80
 80019e2:	0409      	lsls	r1, r1, #16
 80019e4:	430c      	orrs	r4, r1
 80019e6:	2a1f      	cmp	r2, #31
 80019e8:	dd00      	ble.n	80019ec <__aeabi_dadd+0x300>
 80019ea:	e1ab      	b.n	8001d44 <__aeabi_dadd+0x658>
 80019ec:	2120      	movs	r1, #32
 80019ee:	0025      	movs	r5, r4
 80019f0:	1a89      	subs	r1, r1, r2
 80019f2:	0007      	movs	r7, r0
 80019f4:	4088      	lsls	r0, r1
 80019f6:	408d      	lsls	r5, r1
 80019f8:	40d7      	lsrs	r7, r2
 80019fa:	1e41      	subs	r1, r0, #1
 80019fc:	4188      	sbcs	r0, r1
 80019fe:	40d4      	lsrs	r4, r2
 8001a00:	433d      	orrs	r5, r7
 8001a02:	4305      	orrs	r5, r0
 8001a04:	44a2      	add	sl, r4
 8001a06:	4465      	add	r5, ip
 8001a08:	4565      	cmp	r5, ip
 8001a0a:	4192      	sbcs	r2, r2
 8001a0c:	4252      	negs	r2, r2
 8001a0e:	4452      	add	r2, sl
 8001a10:	0014      	movs	r4, r2
 8001a12:	464f      	mov	r7, r9
 8001a14:	e774      	b.n	8001900 <__aeabi_dadd+0x214>
 8001a16:	0028      	movs	r0, r5
 8001a18:	f001 fdf0 	bl	80035fc <__clzsi2>
 8001a1c:	0003      	movs	r3, r0
 8001a1e:	3318      	adds	r3, #24
 8001a20:	2b1f      	cmp	r3, #31
 8001a22:	dc00      	bgt.n	8001a26 <__aeabi_dadd+0x33a>
 8001a24:	e6c2      	b.n	80017ac <__aeabi_dadd+0xc0>
 8001a26:	002a      	movs	r2, r5
 8001a28:	3808      	subs	r0, #8
 8001a2a:	4082      	lsls	r2, r0
 8001a2c:	429f      	cmp	r7, r3
 8001a2e:	dd00      	ble.n	8001a32 <__aeabi_dadd+0x346>
 8001a30:	e0a9      	b.n	8001b86 <__aeabi_dadd+0x49a>
 8001a32:	1bdb      	subs	r3, r3, r7
 8001a34:	1c58      	adds	r0, r3, #1
 8001a36:	281f      	cmp	r0, #31
 8001a38:	dc00      	bgt.n	8001a3c <__aeabi_dadd+0x350>
 8001a3a:	e1ac      	b.n	8001d96 <__aeabi_dadd+0x6aa>
 8001a3c:	0015      	movs	r5, r2
 8001a3e:	3b1f      	subs	r3, #31
 8001a40:	40dd      	lsrs	r5, r3
 8001a42:	2820      	cmp	r0, #32
 8001a44:	d005      	beq.n	8001a52 <__aeabi_dadd+0x366>
 8001a46:	2340      	movs	r3, #64	@ 0x40
 8001a48:	1a1b      	subs	r3, r3, r0
 8001a4a:	409a      	lsls	r2, r3
 8001a4c:	1e53      	subs	r3, r2, #1
 8001a4e:	419a      	sbcs	r2, r3
 8001a50:	4315      	orrs	r5, r2
 8001a52:	2307      	movs	r3, #7
 8001a54:	2700      	movs	r7, #0
 8001a56:	402b      	ands	r3, r5
 8001a58:	e7b0      	b.n	80019bc <__aeabi_dadd+0x2d0>
 8001a5a:	08ed      	lsrs	r5, r5, #3
 8001a5c:	4b05      	ldr	r3, [pc, #20]	@ (8001a74 <__aeabi_dadd+0x388>)
 8001a5e:	0762      	lsls	r2, r4, #29
 8001a60:	432a      	orrs	r2, r5
 8001a62:	08e4      	lsrs	r4, r4, #3
 8001a64:	429f      	cmp	r7, r3
 8001a66:	d00f      	beq.n	8001a88 <__aeabi_dadd+0x39c>
 8001a68:	0324      	lsls	r4, r4, #12
 8001a6a:	0b25      	lsrs	r5, r4, #12
 8001a6c:	057c      	lsls	r4, r7, #21
 8001a6e:	0d64      	lsrs	r4, r4, #21
 8001a70:	e6d4      	b.n	800181c <__aeabi_dadd+0x130>
 8001a72:	46c0      	nop			@ (mov r8, r8)
 8001a74:	000007ff 	.word	0x000007ff
 8001a78:	ff7fffff 	.word	0xff7fffff
 8001a7c:	000007fe 	.word	0x000007fe
 8001a80:	08c0      	lsrs	r0, r0, #3
 8001a82:	0762      	lsls	r2, r4, #29
 8001a84:	4302      	orrs	r2, r0
 8001a86:	08e4      	lsrs	r4, r4, #3
 8001a88:	0013      	movs	r3, r2
 8001a8a:	4323      	orrs	r3, r4
 8001a8c:	d100      	bne.n	8001a90 <__aeabi_dadd+0x3a4>
 8001a8e:	e186      	b.n	8001d9e <__aeabi_dadd+0x6b2>
 8001a90:	2580      	movs	r5, #128	@ 0x80
 8001a92:	032d      	lsls	r5, r5, #12
 8001a94:	4325      	orrs	r5, r4
 8001a96:	032d      	lsls	r5, r5, #12
 8001a98:	4cc3      	ldr	r4, [pc, #780]	@ (8001da8 <__aeabi_dadd+0x6bc>)
 8001a9a:	0b2d      	lsrs	r5, r5, #12
 8001a9c:	e6be      	b.n	800181c <__aeabi_dadd+0x130>
 8001a9e:	4660      	mov	r0, ip
 8001aa0:	4654      	mov	r4, sl
 8001aa2:	000e      	movs	r6, r1
 8001aa4:	0017      	movs	r7, r2
 8001aa6:	08c5      	lsrs	r5, r0, #3
 8001aa8:	e7d8      	b.n	8001a5c <__aeabi_dadd+0x370>
 8001aaa:	4cc0      	ldr	r4, [pc, #768]	@ (8001dac <__aeabi_dadd+0x6c0>)
 8001aac:	1aff      	subs	r7, r7, r3
 8001aae:	4014      	ands	r4, r2
 8001ab0:	e696      	b.n	80017e0 <__aeabi_dadd+0xf4>
 8001ab2:	4abf      	ldr	r2, [pc, #764]	@ (8001db0 <__aeabi_dadd+0x6c4>)
 8001ab4:	1c79      	adds	r1, r7, #1
 8001ab6:	4211      	tst	r1, r2
 8001ab8:	d16b      	bne.n	8001b92 <__aeabi_dadd+0x4a6>
 8001aba:	0022      	movs	r2, r4
 8001abc:	4302      	orrs	r2, r0
 8001abe:	2f00      	cmp	r7, #0
 8001ac0:	d000      	beq.n	8001ac4 <__aeabi_dadd+0x3d8>
 8001ac2:	e0db      	b.n	8001c7c <__aeabi_dadd+0x590>
 8001ac4:	2a00      	cmp	r2, #0
 8001ac6:	d100      	bne.n	8001aca <__aeabi_dadd+0x3de>
 8001ac8:	e12d      	b.n	8001d26 <__aeabi_dadd+0x63a>
 8001aca:	4662      	mov	r2, ip
 8001acc:	4653      	mov	r3, sl
 8001ace:	431a      	orrs	r2, r3
 8001ad0:	d100      	bne.n	8001ad4 <__aeabi_dadd+0x3e8>
 8001ad2:	e0b6      	b.n	8001c42 <__aeabi_dadd+0x556>
 8001ad4:	4663      	mov	r3, ip
 8001ad6:	18c5      	adds	r5, r0, r3
 8001ad8:	4285      	cmp	r5, r0
 8001ada:	4180      	sbcs	r0, r0
 8001adc:	4454      	add	r4, sl
 8001ade:	4240      	negs	r0, r0
 8001ae0:	1824      	adds	r4, r4, r0
 8001ae2:	0223      	lsls	r3, r4, #8
 8001ae4:	d502      	bpl.n	8001aec <__aeabi_dadd+0x400>
 8001ae6:	000f      	movs	r7, r1
 8001ae8:	4bb0      	ldr	r3, [pc, #704]	@ (8001dac <__aeabi_dadd+0x6c0>)
 8001aea:	401c      	ands	r4, r3
 8001aec:	003a      	movs	r2, r7
 8001aee:	0028      	movs	r0, r5
 8001af0:	e7d8      	b.n	8001aa4 <__aeabi_dadd+0x3b8>
 8001af2:	4662      	mov	r2, ip
 8001af4:	1a85      	subs	r5, r0, r2
 8001af6:	42a8      	cmp	r0, r5
 8001af8:	4192      	sbcs	r2, r2
 8001afa:	4653      	mov	r3, sl
 8001afc:	4252      	negs	r2, r2
 8001afe:	4691      	mov	r9, r2
 8001b00:	1ae3      	subs	r3, r4, r3
 8001b02:	001a      	movs	r2, r3
 8001b04:	464b      	mov	r3, r9
 8001b06:	1ad2      	subs	r2, r2, r3
 8001b08:	0013      	movs	r3, r2
 8001b0a:	4691      	mov	r9, r2
 8001b0c:	021a      	lsls	r2, r3, #8
 8001b0e:	d454      	bmi.n	8001bba <__aeabi_dadd+0x4ce>
 8001b10:	464a      	mov	r2, r9
 8001b12:	464c      	mov	r4, r9
 8001b14:	432a      	orrs	r2, r5
 8001b16:	d000      	beq.n	8001b1a <__aeabi_dadd+0x42e>
 8001b18:	e640      	b.n	800179c <__aeabi_dadd+0xb0>
 8001b1a:	2600      	movs	r6, #0
 8001b1c:	2400      	movs	r4, #0
 8001b1e:	2500      	movs	r5, #0
 8001b20:	e67c      	b.n	800181c <__aeabi_dadd+0x130>
 8001b22:	4da1      	ldr	r5, [pc, #644]	@ (8001da8 <__aeabi_dadd+0x6bc>)
 8001b24:	45a9      	cmp	r9, r5
 8001b26:	d100      	bne.n	8001b2a <__aeabi_dadd+0x43e>
 8001b28:	e090      	b.n	8001c4c <__aeabi_dadd+0x560>
 8001b2a:	2501      	movs	r5, #1
 8001b2c:	2a38      	cmp	r2, #56	@ 0x38
 8001b2e:	dd00      	ble.n	8001b32 <__aeabi_dadd+0x446>
 8001b30:	e6ab      	b.n	800188a <__aeabi_dadd+0x19e>
 8001b32:	2580      	movs	r5, #128	@ 0x80
 8001b34:	042d      	lsls	r5, r5, #16
 8001b36:	432c      	orrs	r4, r5
 8001b38:	e695      	b.n	8001866 <__aeabi_dadd+0x17a>
 8001b3a:	0011      	movs	r1, r2
 8001b3c:	4655      	mov	r5, sl
 8001b3e:	3920      	subs	r1, #32
 8001b40:	40cd      	lsrs	r5, r1
 8001b42:	46a9      	mov	r9, r5
 8001b44:	2a20      	cmp	r2, #32
 8001b46:	d006      	beq.n	8001b56 <__aeabi_dadd+0x46a>
 8001b48:	2140      	movs	r1, #64	@ 0x40
 8001b4a:	4653      	mov	r3, sl
 8001b4c:	1a8a      	subs	r2, r1, r2
 8001b4e:	4093      	lsls	r3, r2
 8001b50:	4662      	mov	r2, ip
 8001b52:	431a      	orrs	r2, r3
 8001b54:	4694      	mov	ip, r2
 8001b56:	4665      	mov	r5, ip
 8001b58:	1e6b      	subs	r3, r5, #1
 8001b5a:	419d      	sbcs	r5, r3
 8001b5c:	464b      	mov	r3, r9
 8001b5e:	431d      	orrs	r5, r3
 8001b60:	e612      	b.n	8001788 <__aeabi_dadd+0x9c>
 8001b62:	0021      	movs	r1, r4
 8001b64:	4301      	orrs	r1, r0
 8001b66:	d100      	bne.n	8001b6a <__aeabi_dadd+0x47e>
 8001b68:	e0c4      	b.n	8001cf4 <__aeabi_dadd+0x608>
 8001b6a:	1e51      	subs	r1, r2, #1
 8001b6c:	2a01      	cmp	r2, #1
 8001b6e:	d100      	bne.n	8001b72 <__aeabi_dadd+0x486>
 8001b70:	e0fb      	b.n	8001d6a <__aeabi_dadd+0x67e>
 8001b72:	4d8d      	ldr	r5, [pc, #564]	@ (8001da8 <__aeabi_dadd+0x6bc>)
 8001b74:	42aa      	cmp	r2, r5
 8001b76:	d100      	bne.n	8001b7a <__aeabi_dadd+0x48e>
 8001b78:	e0b5      	b.n	8001ce6 <__aeabi_dadd+0x5fa>
 8001b7a:	2501      	movs	r5, #1
 8001b7c:	2938      	cmp	r1, #56	@ 0x38
 8001b7e:	dd00      	ble.n	8001b82 <__aeabi_dadd+0x496>
 8001b80:	e741      	b.n	8001a06 <__aeabi_dadd+0x31a>
 8001b82:	000a      	movs	r2, r1
 8001b84:	e72f      	b.n	80019e6 <__aeabi_dadd+0x2fa>
 8001b86:	4c89      	ldr	r4, [pc, #548]	@ (8001dac <__aeabi_dadd+0x6c0>)
 8001b88:	1aff      	subs	r7, r7, r3
 8001b8a:	4014      	ands	r4, r2
 8001b8c:	0762      	lsls	r2, r4, #29
 8001b8e:	08e4      	lsrs	r4, r4, #3
 8001b90:	e76a      	b.n	8001a68 <__aeabi_dadd+0x37c>
 8001b92:	4a85      	ldr	r2, [pc, #532]	@ (8001da8 <__aeabi_dadd+0x6bc>)
 8001b94:	4291      	cmp	r1, r2
 8001b96:	d100      	bne.n	8001b9a <__aeabi_dadd+0x4ae>
 8001b98:	e0e3      	b.n	8001d62 <__aeabi_dadd+0x676>
 8001b9a:	4663      	mov	r3, ip
 8001b9c:	18c2      	adds	r2, r0, r3
 8001b9e:	4282      	cmp	r2, r0
 8001ba0:	4180      	sbcs	r0, r0
 8001ba2:	0023      	movs	r3, r4
 8001ba4:	4240      	negs	r0, r0
 8001ba6:	4453      	add	r3, sl
 8001ba8:	181b      	adds	r3, r3, r0
 8001baa:	07dd      	lsls	r5, r3, #31
 8001bac:	085c      	lsrs	r4, r3, #1
 8001bae:	2307      	movs	r3, #7
 8001bb0:	0852      	lsrs	r2, r2, #1
 8001bb2:	4315      	orrs	r5, r2
 8001bb4:	000f      	movs	r7, r1
 8001bb6:	402b      	ands	r3, r5
 8001bb8:	e700      	b.n	80019bc <__aeabi_dadd+0x2d0>
 8001bba:	4663      	mov	r3, ip
 8001bbc:	1a1d      	subs	r5, r3, r0
 8001bbe:	45ac      	cmp	ip, r5
 8001bc0:	4192      	sbcs	r2, r2
 8001bc2:	4653      	mov	r3, sl
 8001bc4:	4252      	negs	r2, r2
 8001bc6:	1b1c      	subs	r4, r3, r4
 8001bc8:	000e      	movs	r6, r1
 8001bca:	4688      	mov	r8, r1
 8001bcc:	1aa4      	subs	r4, r4, r2
 8001bce:	e5e5      	b.n	800179c <__aeabi_dadd+0xb0>
 8001bd0:	2d00      	cmp	r5, #0
 8001bd2:	d000      	beq.n	8001bd6 <__aeabi_dadd+0x4ea>
 8001bd4:	e091      	b.n	8001cfa <__aeabi_dadd+0x60e>
 8001bd6:	2a00      	cmp	r2, #0
 8001bd8:	d138      	bne.n	8001c4c <__aeabi_dadd+0x560>
 8001bda:	2480      	movs	r4, #128	@ 0x80
 8001bdc:	2600      	movs	r6, #0
 8001bde:	0324      	lsls	r4, r4, #12
 8001be0:	e756      	b.n	8001a90 <__aeabi_dadd+0x3a4>
 8001be2:	4663      	mov	r3, ip
 8001be4:	18c5      	adds	r5, r0, r3
 8001be6:	4285      	cmp	r5, r0
 8001be8:	4180      	sbcs	r0, r0
 8001bea:	4454      	add	r4, sl
 8001bec:	4240      	negs	r0, r0
 8001bee:	1824      	adds	r4, r4, r0
 8001bf0:	2701      	movs	r7, #1
 8001bf2:	0223      	lsls	r3, r4, #8
 8001bf4:	d400      	bmi.n	8001bf8 <__aeabi_dadd+0x50c>
 8001bf6:	e6df      	b.n	80019b8 <__aeabi_dadd+0x2cc>
 8001bf8:	2702      	movs	r7, #2
 8001bfa:	e687      	b.n	800190c <__aeabi_dadd+0x220>
 8001bfc:	4663      	mov	r3, ip
 8001bfe:	1ac5      	subs	r5, r0, r3
 8001c00:	42a8      	cmp	r0, r5
 8001c02:	4180      	sbcs	r0, r0
 8001c04:	4653      	mov	r3, sl
 8001c06:	4240      	negs	r0, r0
 8001c08:	1ae4      	subs	r4, r4, r3
 8001c0a:	2701      	movs	r7, #1
 8001c0c:	1a24      	subs	r4, r4, r0
 8001c0e:	e5c0      	b.n	8001792 <__aeabi_dadd+0xa6>
 8001c10:	0762      	lsls	r2, r4, #29
 8001c12:	08c0      	lsrs	r0, r0, #3
 8001c14:	4302      	orrs	r2, r0
 8001c16:	08e4      	lsrs	r4, r4, #3
 8001c18:	e736      	b.n	8001a88 <__aeabi_dadd+0x39c>
 8001c1a:	0011      	movs	r1, r2
 8001c1c:	4653      	mov	r3, sl
 8001c1e:	3920      	subs	r1, #32
 8001c20:	40cb      	lsrs	r3, r1
 8001c22:	4699      	mov	r9, r3
 8001c24:	2a20      	cmp	r2, #32
 8001c26:	d006      	beq.n	8001c36 <__aeabi_dadd+0x54a>
 8001c28:	2140      	movs	r1, #64	@ 0x40
 8001c2a:	4653      	mov	r3, sl
 8001c2c:	1a8a      	subs	r2, r1, r2
 8001c2e:	4093      	lsls	r3, r2
 8001c30:	4662      	mov	r2, ip
 8001c32:	431a      	orrs	r2, r3
 8001c34:	4694      	mov	ip, r2
 8001c36:	4665      	mov	r5, ip
 8001c38:	1e6b      	subs	r3, r5, #1
 8001c3a:	419d      	sbcs	r5, r3
 8001c3c:	464b      	mov	r3, r9
 8001c3e:	431d      	orrs	r5, r3
 8001c40:	e659      	b.n	80018f6 <__aeabi_dadd+0x20a>
 8001c42:	0762      	lsls	r2, r4, #29
 8001c44:	08c0      	lsrs	r0, r0, #3
 8001c46:	4302      	orrs	r2, r0
 8001c48:	08e4      	lsrs	r4, r4, #3
 8001c4a:	e70d      	b.n	8001a68 <__aeabi_dadd+0x37c>
 8001c4c:	4653      	mov	r3, sl
 8001c4e:	075a      	lsls	r2, r3, #29
 8001c50:	4663      	mov	r3, ip
 8001c52:	08d8      	lsrs	r0, r3, #3
 8001c54:	4653      	mov	r3, sl
 8001c56:	000e      	movs	r6, r1
 8001c58:	4302      	orrs	r2, r0
 8001c5a:	08dc      	lsrs	r4, r3, #3
 8001c5c:	e714      	b.n	8001a88 <__aeabi_dadd+0x39c>
 8001c5e:	0015      	movs	r5, r2
 8001c60:	0026      	movs	r6, r4
 8001c62:	3d20      	subs	r5, #32
 8001c64:	40ee      	lsrs	r6, r5
 8001c66:	2a20      	cmp	r2, #32
 8001c68:	d003      	beq.n	8001c72 <__aeabi_dadd+0x586>
 8001c6a:	2540      	movs	r5, #64	@ 0x40
 8001c6c:	1aaa      	subs	r2, r5, r2
 8001c6e:	4094      	lsls	r4, r2
 8001c70:	4320      	orrs	r0, r4
 8001c72:	1e42      	subs	r2, r0, #1
 8001c74:	4190      	sbcs	r0, r2
 8001c76:	0005      	movs	r5, r0
 8001c78:	4335      	orrs	r5, r6
 8001c7a:	e606      	b.n	800188a <__aeabi_dadd+0x19e>
 8001c7c:	2a00      	cmp	r2, #0
 8001c7e:	d07c      	beq.n	8001d7a <__aeabi_dadd+0x68e>
 8001c80:	4662      	mov	r2, ip
 8001c82:	4653      	mov	r3, sl
 8001c84:	08c0      	lsrs	r0, r0, #3
 8001c86:	431a      	orrs	r2, r3
 8001c88:	d100      	bne.n	8001c8c <__aeabi_dadd+0x5a0>
 8001c8a:	e6fa      	b.n	8001a82 <__aeabi_dadd+0x396>
 8001c8c:	0762      	lsls	r2, r4, #29
 8001c8e:	4310      	orrs	r0, r2
 8001c90:	2280      	movs	r2, #128	@ 0x80
 8001c92:	08e4      	lsrs	r4, r4, #3
 8001c94:	0312      	lsls	r2, r2, #12
 8001c96:	4214      	tst	r4, r2
 8001c98:	d008      	beq.n	8001cac <__aeabi_dadd+0x5c0>
 8001c9a:	08d9      	lsrs	r1, r3, #3
 8001c9c:	4211      	tst	r1, r2
 8001c9e:	d105      	bne.n	8001cac <__aeabi_dadd+0x5c0>
 8001ca0:	4663      	mov	r3, ip
 8001ca2:	08d8      	lsrs	r0, r3, #3
 8001ca4:	4653      	mov	r3, sl
 8001ca6:	000c      	movs	r4, r1
 8001ca8:	075b      	lsls	r3, r3, #29
 8001caa:	4318      	orrs	r0, r3
 8001cac:	0f42      	lsrs	r2, r0, #29
 8001cae:	00c0      	lsls	r0, r0, #3
 8001cb0:	08c0      	lsrs	r0, r0, #3
 8001cb2:	0752      	lsls	r2, r2, #29
 8001cb4:	4302      	orrs	r2, r0
 8001cb6:	e6e7      	b.n	8001a88 <__aeabi_dadd+0x39c>
 8001cb8:	2a00      	cmp	r2, #0
 8001cba:	d100      	bne.n	8001cbe <__aeabi_dadd+0x5d2>
 8001cbc:	e72d      	b.n	8001b1a <__aeabi_dadd+0x42e>
 8001cbe:	4663      	mov	r3, ip
 8001cc0:	08d8      	lsrs	r0, r3, #3
 8001cc2:	4653      	mov	r3, sl
 8001cc4:	075a      	lsls	r2, r3, #29
 8001cc6:	000e      	movs	r6, r1
 8001cc8:	4302      	orrs	r2, r0
 8001cca:	08dc      	lsrs	r4, r3, #3
 8001ccc:	e6cc      	b.n	8001a68 <__aeabi_dadd+0x37c>
 8001cce:	4663      	mov	r3, ip
 8001cd0:	1a1d      	subs	r5, r3, r0
 8001cd2:	45ac      	cmp	ip, r5
 8001cd4:	4192      	sbcs	r2, r2
 8001cd6:	4653      	mov	r3, sl
 8001cd8:	4252      	negs	r2, r2
 8001cda:	1b1c      	subs	r4, r3, r4
 8001cdc:	000e      	movs	r6, r1
 8001cde:	4688      	mov	r8, r1
 8001ce0:	1aa4      	subs	r4, r4, r2
 8001ce2:	3701      	adds	r7, #1
 8001ce4:	e555      	b.n	8001792 <__aeabi_dadd+0xa6>
 8001ce6:	4663      	mov	r3, ip
 8001ce8:	08d9      	lsrs	r1, r3, #3
 8001cea:	4653      	mov	r3, sl
 8001cec:	075a      	lsls	r2, r3, #29
 8001cee:	430a      	orrs	r2, r1
 8001cf0:	08dc      	lsrs	r4, r3, #3
 8001cf2:	e6c9      	b.n	8001a88 <__aeabi_dadd+0x39c>
 8001cf4:	4660      	mov	r0, ip
 8001cf6:	4654      	mov	r4, sl
 8001cf8:	e6d4      	b.n	8001aa4 <__aeabi_dadd+0x3b8>
 8001cfa:	08c0      	lsrs	r0, r0, #3
 8001cfc:	2a00      	cmp	r2, #0
 8001cfe:	d100      	bne.n	8001d02 <__aeabi_dadd+0x616>
 8001d00:	e6bf      	b.n	8001a82 <__aeabi_dadd+0x396>
 8001d02:	0762      	lsls	r2, r4, #29
 8001d04:	4310      	orrs	r0, r2
 8001d06:	2280      	movs	r2, #128	@ 0x80
 8001d08:	08e4      	lsrs	r4, r4, #3
 8001d0a:	0312      	lsls	r2, r2, #12
 8001d0c:	4214      	tst	r4, r2
 8001d0e:	d0cd      	beq.n	8001cac <__aeabi_dadd+0x5c0>
 8001d10:	08dd      	lsrs	r5, r3, #3
 8001d12:	4215      	tst	r5, r2
 8001d14:	d1ca      	bne.n	8001cac <__aeabi_dadd+0x5c0>
 8001d16:	4663      	mov	r3, ip
 8001d18:	08d8      	lsrs	r0, r3, #3
 8001d1a:	4653      	mov	r3, sl
 8001d1c:	075b      	lsls	r3, r3, #29
 8001d1e:	000e      	movs	r6, r1
 8001d20:	002c      	movs	r4, r5
 8001d22:	4318      	orrs	r0, r3
 8001d24:	e7c2      	b.n	8001cac <__aeabi_dadd+0x5c0>
 8001d26:	4663      	mov	r3, ip
 8001d28:	08d9      	lsrs	r1, r3, #3
 8001d2a:	4653      	mov	r3, sl
 8001d2c:	075a      	lsls	r2, r3, #29
 8001d2e:	430a      	orrs	r2, r1
 8001d30:	08dc      	lsrs	r4, r3, #3
 8001d32:	e699      	b.n	8001a68 <__aeabi_dadd+0x37c>
 8001d34:	4663      	mov	r3, ip
 8001d36:	08d8      	lsrs	r0, r3, #3
 8001d38:	4653      	mov	r3, sl
 8001d3a:	075a      	lsls	r2, r3, #29
 8001d3c:	000e      	movs	r6, r1
 8001d3e:	4302      	orrs	r2, r0
 8001d40:	08dc      	lsrs	r4, r3, #3
 8001d42:	e6a1      	b.n	8001a88 <__aeabi_dadd+0x39c>
 8001d44:	0011      	movs	r1, r2
 8001d46:	0027      	movs	r7, r4
 8001d48:	3920      	subs	r1, #32
 8001d4a:	40cf      	lsrs	r7, r1
 8001d4c:	2a20      	cmp	r2, #32
 8001d4e:	d003      	beq.n	8001d58 <__aeabi_dadd+0x66c>
 8001d50:	2140      	movs	r1, #64	@ 0x40
 8001d52:	1a8a      	subs	r2, r1, r2
 8001d54:	4094      	lsls	r4, r2
 8001d56:	4320      	orrs	r0, r4
 8001d58:	1e42      	subs	r2, r0, #1
 8001d5a:	4190      	sbcs	r0, r2
 8001d5c:	0005      	movs	r5, r0
 8001d5e:	433d      	orrs	r5, r7
 8001d60:	e651      	b.n	8001a06 <__aeabi_dadd+0x31a>
 8001d62:	000c      	movs	r4, r1
 8001d64:	2500      	movs	r5, #0
 8001d66:	2200      	movs	r2, #0
 8001d68:	e558      	b.n	800181c <__aeabi_dadd+0x130>
 8001d6a:	4460      	add	r0, ip
 8001d6c:	4560      	cmp	r0, ip
 8001d6e:	4192      	sbcs	r2, r2
 8001d70:	4454      	add	r4, sl
 8001d72:	4252      	negs	r2, r2
 8001d74:	0005      	movs	r5, r0
 8001d76:	18a4      	adds	r4, r4, r2
 8001d78:	e73a      	b.n	8001bf0 <__aeabi_dadd+0x504>
 8001d7a:	4653      	mov	r3, sl
 8001d7c:	075a      	lsls	r2, r3, #29
 8001d7e:	4663      	mov	r3, ip
 8001d80:	08d9      	lsrs	r1, r3, #3
 8001d82:	4653      	mov	r3, sl
 8001d84:	430a      	orrs	r2, r1
 8001d86:	08dc      	lsrs	r4, r3, #3
 8001d88:	e67e      	b.n	8001a88 <__aeabi_dadd+0x39c>
 8001d8a:	001a      	movs	r2, r3
 8001d8c:	001c      	movs	r4, r3
 8001d8e:	432a      	orrs	r2, r5
 8001d90:	d000      	beq.n	8001d94 <__aeabi_dadd+0x6a8>
 8001d92:	e6ab      	b.n	8001aec <__aeabi_dadd+0x400>
 8001d94:	e6c1      	b.n	8001b1a <__aeabi_dadd+0x42e>
 8001d96:	2120      	movs	r1, #32
 8001d98:	2500      	movs	r5, #0
 8001d9a:	1a09      	subs	r1, r1, r0
 8001d9c:	e519      	b.n	80017d2 <__aeabi_dadd+0xe6>
 8001d9e:	2200      	movs	r2, #0
 8001da0:	2500      	movs	r5, #0
 8001da2:	4c01      	ldr	r4, [pc, #4]	@ (8001da8 <__aeabi_dadd+0x6bc>)
 8001da4:	e53a      	b.n	800181c <__aeabi_dadd+0x130>
 8001da6:	46c0      	nop			@ (mov r8, r8)
 8001da8:	000007ff 	.word	0x000007ff
 8001dac:	ff7fffff 	.word	0xff7fffff
 8001db0:	000007fe 	.word	0x000007fe

08001db4 <__aeabi_ddiv>:
 8001db4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001db6:	46de      	mov	lr, fp
 8001db8:	4645      	mov	r5, r8
 8001dba:	4657      	mov	r7, sl
 8001dbc:	464e      	mov	r6, r9
 8001dbe:	b5e0      	push	{r5, r6, r7, lr}
 8001dc0:	b087      	sub	sp, #28
 8001dc2:	9200      	str	r2, [sp, #0]
 8001dc4:	9301      	str	r3, [sp, #4]
 8001dc6:	030b      	lsls	r3, r1, #12
 8001dc8:	0b1b      	lsrs	r3, r3, #12
 8001dca:	469b      	mov	fp, r3
 8001dcc:	0fca      	lsrs	r2, r1, #31
 8001dce:	004b      	lsls	r3, r1, #1
 8001dd0:	0004      	movs	r4, r0
 8001dd2:	4680      	mov	r8, r0
 8001dd4:	0d5b      	lsrs	r3, r3, #21
 8001dd6:	9202      	str	r2, [sp, #8]
 8001dd8:	d100      	bne.n	8001ddc <__aeabi_ddiv+0x28>
 8001dda:	e16a      	b.n	80020b2 <__aeabi_ddiv+0x2fe>
 8001ddc:	4ad4      	ldr	r2, [pc, #848]	@ (8002130 <__aeabi_ddiv+0x37c>)
 8001dde:	4293      	cmp	r3, r2
 8001de0:	d100      	bne.n	8001de4 <__aeabi_ddiv+0x30>
 8001de2:	e18c      	b.n	80020fe <__aeabi_ddiv+0x34a>
 8001de4:	4659      	mov	r1, fp
 8001de6:	0f42      	lsrs	r2, r0, #29
 8001de8:	00c9      	lsls	r1, r1, #3
 8001dea:	430a      	orrs	r2, r1
 8001dec:	2180      	movs	r1, #128	@ 0x80
 8001dee:	0409      	lsls	r1, r1, #16
 8001df0:	4311      	orrs	r1, r2
 8001df2:	00c2      	lsls	r2, r0, #3
 8001df4:	4690      	mov	r8, r2
 8001df6:	4acf      	ldr	r2, [pc, #828]	@ (8002134 <__aeabi_ddiv+0x380>)
 8001df8:	4689      	mov	r9, r1
 8001dfa:	4692      	mov	sl, r2
 8001dfc:	449a      	add	sl, r3
 8001dfe:	2300      	movs	r3, #0
 8001e00:	2400      	movs	r4, #0
 8001e02:	9303      	str	r3, [sp, #12]
 8001e04:	9e00      	ldr	r6, [sp, #0]
 8001e06:	9f01      	ldr	r7, [sp, #4]
 8001e08:	033b      	lsls	r3, r7, #12
 8001e0a:	0b1b      	lsrs	r3, r3, #12
 8001e0c:	469b      	mov	fp, r3
 8001e0e:	007b      	lsls	r3, r7, #1
 8001e10:	0030      	movs	r0, r6
 8001e12:	0d5b      	lsrs	r3, r3, #21
 8001e14:	0ffd      	lsrs	r5, r7, #31
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d100      	bne.n	8001e1c <__aeabi_ddiv+0x68>
 8001e1a:	e128      	b.n	800206e <__aeabi_ddiv+0x2ba>
 8001e1c:	4ac4      	ldr	r2, [pc, #784]	@ (8002130 <__aeabi_ddiv+0x37c>)
 8001e1e:	4293      	cmp	r3, r2
 8001e20:	d100      	bne.n	8001e24 <__aeabi_ddiv+0x70>
 8001e22:	e177      	b.n	8002114 <__aeabi_ddiv+0x360>
 8001e24:	4659      	mov	r1, fp
 8001e26:	0f72      	lsrs	r2, r6, #29
 8001e28:	00c9      	lsls	r1, r1, #3
 8001e2a:	430a      	orrs	r2, r1
 8001e2c:	2180      	movs	r1, #128	@ 0x80
 8001e2e:	0409      	lsls	r1, r1, #16
 8001e30:	4311      	orrs	r1, r2
 8001e32:	468b      	mov	fp, r1
 8001e34:	49bf      	ldr	r1, [pc, #764]	@ (8002134 <__aeabi_ddiv+0x380>)
 8001e36:	00f2      	lsls	r2, r6, #3
 8001e38:	468c      	mov	ip, r1
 8001e3a:	4651      	mov	r1, sl
 8001e3c:	4463      	add	r3, ip
 8001e3e:	1acb      	subs	r3, r1, r3
 8001e40:	469a      	mov	sl, r3
 8001e42:	2300      	movs	r3, #0
 8001e44:	9e02      	ldr	r6, [sp, #8]
 8001e46:	406e      	eors	r6, r5
 8001e48:	2c0f      	cmp	r4, #15
 8001e4a:	d827      	bhi.n	8001e9c <__aeabi_ddiv+0xe8>
 8001e4c:	49ba      	ldr	r1, [pc, #744]	@ (8002138 <__aeabi_ddiv+0x384>)
 8001e4e:	00a4      	lsls	r4, r4, #2
 8001e50:	5909      	ldr	r1, [r1, r4]
 8001e52:	468f      	mov	pc, r1
 8001e54:	46cb      	mov	fp, r9
 8001e56:	4642      	mov	r2, r8
 8001e58:	9e02      	ldr	r6, [sp, #8]
 8001e5a:	9b03      	ldr	r3, [sp, #12]
 8001e5c:	2b02      	cmp	r3, #2
 8001e5e:	d016      	beq.n	8001e8e <__aeabi_ddiv+0xda>
 8001e60:	2b03      	cmp	r3, #3
 8001e62:	d100      	bne.n	8001e66 <__aeabi_ddiv+0xb2>
 8001e64:	e2a6      	b.n	80023b4 <__aeabi_ddiv+0x600>
 8001e66:	2b01      	cmp	r3, #1
 8001e68:	d000      	beq.n	8001e6c <__aeabi_ddiv+0xb8>
 8001e6a:	e0df      	b.n	800202c <__aeabi_ddiv+0x278>
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	2300      	movs	r3, #0
 8001e70:	2400      	movs	r4, #0
 8001e72:	4690      	mov	r8, r2
 8001e74:	051b      	lsls	r3, r3, #20
 8001e76:	4323      	orrs	r3, r4
 8001e78:	07f6      	lsls	r6, r6, #31
 8001e7a:	4333      	orrs	r3, r6
 8001e7c:	4640      	mov	r0, r8
 8001e7e:	0019      	movs	r1, r3
 8001e80:	b007      	add	sp, #28
 8001e82:	bcf0      	pop	{r4, r5, r6, r7}
 8001e84:	46bb      	mov	fp, r7
 8001e86:	46b2      	mov	sl, r6
 8001e88:	46a9      	mov	r9, r5
 8001e8a:	46a0      	mov	r8, r4
 8001e8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001e8e:	2200      	movs	r2, #0
 8001e90:	2400      	movs	r4, #0
 8001e92:	4690      	mov	r8, r2
 8001e94:	4ba6      	ldr	r3, [pc, #664]	@ (8002130 <__aeabi_ddiv+0x37c>)
 8001e96:	e7ed      	b.n	8001e74 <__aeabi_ddiv+0xc0>
 8001e98:	002e      	movs	r6, r5
 8001e9a:	e7df      	b.n	8001e5c <__aeabi_ddiv+0xa8>
 8001e9c:	45cb      	cmp	fp, r9
 8001e9e:	d200      	bcs.n	8001ea2 <__aeabi_ddiv+0xee>
 8001ea0:	e1d4      	b.n	800224c <__aeabi_ddiv+0x498>
 8001ea2:	d100      	bne.n	8001ea6 <__aeabi_ddiv+0xf2>
 8001ea4:	e1cf      	b.n	8002246 <__aeabi_ddiv+0x492>
 8001ea6:	2301      	movs	r3, #1
 8001ea8:	425b      	negs	r3, r3
 8001eaa:	469c      	mov	ip, r3
 8001eac:	4644      	mov	r4, r8
 8001eae:	4648      	mov	r0, r9
 8001eb0:	2700      	movs	r7, #0
 8001eb2:	44e2      	add	sl, ip
 8001eb4:	465b      	mov	r3, fp
 8001eb6:	0e15      	lsrs	r5, r2, #24
 8001eb8:	021b      	lsls	r3, r3, #8
 8001eba:	431d      	orrs	r5, r3
 8001ebc:	0c19      	lsrs	r1, r3, #16
 8001ebe:	042b      	lsls	r3, r5, #16
 8001ec0:	0212      	lsls	r2, r2, #8
 8001ec2:	9500      	str	r5, [sp, #0]
 8001ec4:	0c1d      	lsrs	r5, r3, #16
 8001ec6:	4691      	mov	r9, r2
 8001ec8:	9102      	str	r1, [sp, #8]
 8001eca:	9503      	str	r5, [sp, #12]
 8001ecc:	f7fe f9f0 	bl	80002b0 <__aeabi_uidivmod>
 8001ed0:	0002      	movs	r2, r0
 8001ed2:	436a      	muls	r2, r5
 8001ed4:	040b      	lsls	r3, r1, #16
 8001ed6:	0c21      	lsrs	r1, r4, #16
 8001ed8:	4680      	mov	r8, r0
 8001eda:	4319      	orrs	r1, r3
 8001edc:	428a      	cmp	r2, r1
 8001ede:	d909      	bls.n	8001ef4 <__aeabi_ddiv+0x140>
 8001ee0:	9d00      	ldr	r5, [sp, #0]
 8001ee2:	2301      	movs	r3, #1
 8001ee4:	46ac      	mov	ip, r5
 8001ee6:	425b      	negs	r3, r3
 8001ee8:	4461      	add	r1, ip
 8001eea:	469c      	mov	ip, r3
 8001eec:	44e0      	add	r8, ip
 8001eee:	428d      	cmp	r5, r1
 8001ef0:	d800      	bhi.n	8001ef4 <__aeabi_ddiv+0x140>
 8001ef2:	e1fb      	b.n	80022ec <__aeabi_ddiv+0x538>
 8001ef4:	1a88      	subs	r0, r1, r2
 8001ef6:	9902      	ldr	r1, [sp, #8]
 8001ef8:	f7fe f9da 	bl	80002b0 <__aeabi_uidivmod>
 8001efc:	9a03      	ldr	r2, [sp, #12]
 8001efe:	0424      	lsls	r4, r4, #16
 8001f00:	4342      	muls	r2, r0
 8001f02:	0409      	lsls	r1, r1, #16
 8001f04:	0c24      	lsrs	r4, r4, #16
 8001f06:	0003      	movs	r3, r0
 8001f08:	430c      	orrs	r4, r1
 8001f0a:	42a2      	cmp	r2, r4
 8001f0c:	d906      	bls.n	8001f1c <__aeabi_ddiv+0x168>
 8001f0e:	9900      	ldr	r1, [sp, #0]
 8001f10:	3b01      	subs	r3, #1
 8001f12:	468c      	mov	ip, r1
 8001f14:	4464      	add	r4, ip
 8001f16:	42a1      	cmp	r1, r4
 8001f18:	d800      	bhi.n	8001f1c <__aeabi_ddiv+0x168>
 8001f1a:	e1e1      	b.n	80022e0 <__aeabi_ddiv+0x52c>
 8001f1c:	1aa0      	subs	r0, r4, r2
 8001f1e:	4642      	mov	r2, r8
 8001f20:	0412      	lsls	r2, r2, #16
 8001f22:	431a      	orrs	r2, r3
 8001f24:	4693      	mov	fp, r2
 8001f26:	464b      	mov	r3, r9
 8001f28:	4659      	mov	r1, fp
 8001f2a:	0c1b      	lsrs	r3, r3, #16
 8001f2c:	001d      	movs	r5, r3
 8001f2e:	9304      	str	r3, [sp, #16]
 8001f30:	040b      	lsls	r3, r1, #16
 8001f32:	4649      	mov	r1, r9
 8001f34:	0409      	lsls	r1, r1, #16
 8001f36:	0c09      	lsrs	r1, r1, #16
 8001f38:	000c      	movs	r4, r1
 8001f3a:	0c1b      	lsrs	r3, r3, #16
 8001f3c:	435c      	muls	r4, r3
 8001f3e:	0c12      	lsrs	r2, r2, #16
 8001f40:	436b      	muls	r3, r5
 8001f42:	4688      	mov	r8, r1
 8001f44:	4351      	muls	r1, r2
 8001f46:	436a      	muls	r2, r5
 8001f48:	0c25      	lsrs	r5, r4, #16
 8001f4a:	46ac      	mov	ip, r5
 8001f4c:	185b      	adds	r3, r3, r1
 8001f4e:	4463      	add	r3, ip
 8001f50:	4299      	cmp	r1, r3
 8001f52:	d903      	bls.n	8001f5c <__aeabi_ddiv+0x1a8>
 8001f54:	2180      	movs	r1, #128	@ 0x80
 8001f56:	0249      	lsls	r1, r1, #9
 8001f58:	468c      	mov	ip, r1
 8001f5a:	4462      	add	r2, ip
 8001f5c:	0c19      	lsrs	r1, r3, #16
 8001f5e:	0424      	lsls	r4, r4, #16
 8001f60:	041b      	lsls	r3, r3, #16
 8001f62:	0c24      	lsrs	r4, r4, #16
 8001f64:	188a      	adds	r2, r1, r2
 8001f66:	191c      	adds	r4, r3, r4
 8001f68:	4290      	cmp	r0, r2
 8001f6a:	d302      	bcc.n	8001f72 <__aeabi_ddiv+0x1be>
 8001f6c:	d116      	bne.n	8001f9c <__aeabi_ddiv+0x1e8>
 8001f6e:	42a7      	cmp	r7, r4
 8001f70:	d214      	bcs.n	8001f9c <__aeabi_ddiv+0x1e8>
 8001f72:	465b      	mov	r3, fp
 8001f74:	9d00      	ldr	r5, [sp, #0]
 8001f76:	3b01      	subs	r3, #1
 8001f78:	444f      	add	r7, r9
 8001f7a:	9305      	str	r3, [sp, #20]
 8001f7c:	454f      	cmp	r7, r9
 8001f7e:	419b      	sbcs	r3, r3
 8001f80:	46ac      	mov	ip, r5
 8001f82:	425b      	negs	r3, r3
 8001f84:	4463      	add	r3, ip
 8001f86:	18c0      	adds	r0, r0, r3
 8001f88:	4285      	cmp	r5, r0
 8001f8a:	d300      	bcc.n	8001f8e <__aeabi_ddiv+0x1da>
 8001f8c:	e1a1      	b.n	80022d2 <__aeabi_ddiv+0x51e>
 8001f8e:	4282      	cmp	r2, r0
 8001f90:	d900      	bls.n	8001f94 <__aeabi_ddiv+0x1e0>
 8001f92:	e1f6      	b.n	8002382 <__aeabi_ddiv+0x5ce>
 8001f94:	d100      	bne.n	8001f98 <__aeabi_ddiv+0x1e4>
 8001f96:	e1f1      	b.n	800237c <__aeabi_ddiv+0x5c8>
 8001f98:	9b05      	ldr	r3, [sp, #20]
 8001f9a:	469b      	mov	fp, r3
 8001f9c:	1b3c      	subs	r4, r7, r4
 8001f9e:	42a7      	cmp	r7, r4
 8001fa0:	41bf      	sbcs	r7, r7
 8001fa2:	9d00      	ldr	r5, [sp, #0]
 8001fa4:	1a80      	subs	r0, r0, r2
 8001fa6:	427f      	negs	r7, r7
 8001fa8:	1bc0      	subs	r0, r0, r7
 8001faa:	4285      	cmp	r5, r0
 8001fac:	d100      	bne.n	8001fb0 <__aeabi_ddiv+0x1fc>
 8001fae:	e1d0      	b.n	8002352 <__aeabi_ddiv+0x59e>
 8001fb0:	9902      	ldr	r1, [sp, #8]
 8001fb2:	f7fe f97d 	bl	80002b0 <__aeabi_uidivmod>
 8001fb6:	9a03      	ldr	r2, [sp, #12]
 8001fb8:	040b      	lsls	r3, r1, #16
 8001fba:	4342      	muls	r2, r0
 8001fbc:	0c21      	lsrs	r1, r4, #16
 8001fbe:	0007      	movs	r7, r0
 8001fc0:	4319      	orrs	r1, r3
 8001fc2:	428a      	cmp	r2, r1
 8001fc4:	d900      	bls.n	8001fc8 <__aeabi_ddiv+0x214>
 8001fc6:	e178      	b.n	80022ba <__aeabi_ddiv+0x506>
 8001fc8:	1a88      	subs	r0, r1, r2
 8001fca:	9902      	ldr	r1, [sp, #8]
 8001fcc:	f7fe f970 	bl	80002b0 <__aeabi_uidivmod>
 8001fd0:	9a03      	ldr	r2, [sp, #12]
 8001fd2:	0424      	lsls	r4, r4, #16
 8001fd4:	4342      	muls	r2, r0
 8001fd6:	0409      	lsls	r1, r1, #16
 8001fd8:	0c24      	lsrs	r4, r4, #16
 8001fda:	0003      	movs	r3, r0
 8001fdc:	430c      	orrs	r4, r1
 8001fde:	42a2      	cmp	r2, r4
 8001fe0:	d900      	bls.n	8001fe4 <__aeabi_ddiv+0x230>
 8001fe2:	e15d      	b.n	80022a0 <__aeabi_ddiv+0x4ec>
 8001fe4:	4641      	mov	r1, r8
 8001fe6:	1aa4      	subs	r4, r4, r2
 8001fe8:	043a      	lsls	r2, r7, #16
 8001fea:	431a      	orrs	r2, r3
 8001fec:	9d04      	ldr	r5, [sp, #16]
 8001fee:	0413      	lsls	r3, r2, #16
 8001ff0:	0c1b      	lsrs	r3, r3, #16
 8001ff2:	4359      	muls	r1, r3
 8001ff4:	4647      	mov	r7, r8
 8001ff6:	436b      	muls	r3, r5
 8001ff8:	469c      	mov	ip, r3
 8001ffa:	0c10      	lsrs	r0, r2, #16
 8001ffc:	4347      	muls	r7, r0
 8001ffe:	0c0b      	lsrs	r3, r1, #16
 8002000:	44bc      	add	ip, r7
 8002002:	4463      	add	r3, ip
 8002004:	4368      	muls	r0, r5
 8002006:	429f      	cmp	r7, r3
 8002008:	d903      	bls.n	8002012 <__aeabi_ddiv+0x25e>
 800200a:	2580      	movs	r5, #128	@ 0x80
 800200c:	026d      	lsls	r5, r5, #9
 800200e:	46ac      	mov	ip, r5
 8002010:	4460      	add	r0, ip
 8002012:	0c1f      	lsrs	r7, r3, #16
 8002014:	0409      	lsls	r1, r1, #16
 8002016:	041b      	lsls	r3, r3, #16
 8002018:	0c09      	lsrs	r1, r1, #16
 800201a:	183f      	adds	r7, r7, r0
 800201c:	185b      	adds	r3, r3, r1
 800201e:	42bc      	cmp	r4, r7
 8002020:	d200      	bcs.n	8002024 <__aeabi_ddiv+0x270>
 8002022:	e102      	b.n	800222a <__aeabi_ddiv+0x476>
 8002024:	d100      	bne.n	8002028 <__aeabi_ddiv+0x274>
 8002026:	e0fd      	b.n	8002224 <__aeabi_ddiv+0x470>
 8002028:	2301      	movs	r3, #1
 800202a:	431a      	orrs	r2, r3
 800202c:	4b43      	ldr	r3, [pc, #268]	@ (800213c <__aeabi_ddiv+0x388>)
 800202e:	4453      	add	r3, sl
 8002030:	2b00      	cmp	r3, #0
 8002032:	dc00      	bgt.n	8002036 <__aeabi_ddiv+0x282>
 8002034:	e0ae      	b.n	8002194 <__aeabi_ddiv+0x3e0>
 8002036:	0751      	lsls	r1, r2, #29
 8002038:	d000      	beq.n	800203c <__aeabi_ddiv+0x288>
 800203a:	e198      	b.n	800236e <__aeabi_ddiv+0x5ba>
 800203c:	4659      	mov	r1, fp
 800203e:	01c9      	lsls	r1, r1, #7
 8002040:	d506      	bpl.n	8002050 <__aeabi_ddiv+0x29c>
 8002042:	4659      	mov	r1, fp
 8002044:	4b3e      	ldr	r3, [pc, #248]	@ (8002140 <__aeabi_ddiv+0x38c>)
 8002046:	4019      	ands	r1, r3
 8002048:	2380      	movs	r3, #128	@ 0x80
 800204a:	468b      	mov	fp, r1
 800204c:	00db      	lsls	r3, r3, #3
 800204e:	4453      	add	r3, sl
 8002050:	493c      	ldr	r1, [pc, #240]	@ (8002144 <__aeabi_ddiv+0x390>)
 8002052:	428b      	cmp	r3, r1
 8002054:	dd00      	ble.n	8002058 <__aeabi_ddiv+0x2a4>
 8002056:	e71a      	b.n	8001e8e <__aeabi_ddiv+0xda>
 8002058:	4659      	mov	r1, fp
 800205a:	08d2      	lsrs	r2, r2, #3
 800205c:	0749      	lsls	r1, r1, #29
 800205e:	4311      	orrs	r1, r2
 8002060:	465a      	mov	r2, fp
 8002062:	055b      	lsls	r3, r3, #21
 8002064:	0254      	lsls	r4, r2, #9
 8002066:	4688      	mov	r8, r1
 8002068:	0b24      	lsrs	r4, r4, #12
 800206a:	0d5b      	lsrs	r3, r3, #21
 800206c:	e702      	b.n	8001e74 <__aeabi_ddiv+0xc0>
 800206e:	465a      	mov	r2, fp
 8002070:	9b00      	ldr	r3, [sp, #0]
 8002072:	431a      	orrs	r2, r3
 8002074:	d100      	bne.n	8002078 <__aeabi_ddiv+0x2c4>
 8002076:	e07e      	b.n	8002176 <__aeabi_ddiv+0x3c2>
 8002078:	465b      	mov	r3, fp
 800207a:	2b00      	cmp	r3, #0
 800207c:	d100      	bne.n	8002080 <__aeabi_ddiv+0x2cc>
 800207e:	e100      	b.n	8002282 <__aeabi_ddiv+0x4ce>
 8002080:	4658      	mov	r0, fp
 8002082:	f001 fabb 	bl	80035fc <__clzsi2>
 8002086:	0002      	movs	r2, r0
 8002088:	0003      	movs	r3, r0
 800208a:	3a0b      	subs	r2, #11
 800208c:	271d      	movs	r7, #29
 800208e:	9e00      	ldr	r6, [sp, #0]
 8002090:	1aba      	subs	r2, r7, r2
 8002092:	0019      	movs	r1, r3
 8002094:	4658      	mov	r0, fp
 8002096:	40d6      	lsrs	r6, r2
 8002098:	3908      	subs	r1, #8
 800209a:	4088      	lsls	r0, r1
 800209c:	0032      	movs	r2, r6
 800209e:	4302      	orrs	r2, r0
 80020a0:	4693      	mov	fp, r2
 80020a2:	9a00      	ldr	r2, [sp, #0]
 80020a4:	408a      	lsls	r2, r1
 80020a6:	4928      	ldr	r1, [pc, #160]	@ (8002148 <__aeabi_ddiv+0x394>)
 80020a8:	4453      	add	r3, sl
 80020aa:	468a      	mov	sl, r1
 80020ac:	449a      	add	sl, r3
 80020ae:	2300      	movs	r3, #0
 80020b0:	e6c8      	b.n	8001e44 <__aeabi_ddiv+0x90>
 80020b2:	465b      	mov	r3, fp
 80020b4:	4303      	orrs	r3, r0
 80020b6:	4699      	mov	r9, r3
 80020b8:	d056      	beq.n	8002168 <__aeabi_ddiv+0x3b4>
 80020ba:	465b      	mov	r3, fp
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d100      	bne.n	80020c2 <__aeabi_ddiv+0x30e>
 80020c0:	e0cd      	b.n	800225e <__aeabi_ddiv+0x4aa>
 80020c2:	4658      	mov	r0, fp
 80020c4:	f001 fa9a 	bl	80035fc <__clzsi2>
 80020c8:	230b      	movs	r3, #11
 80020ca:	425b      	negs	r3, r3
 80020cc:	469c      	mov	ip, r3
 80020ce:	0002      	movs	r2, r0
 80020d0:	4484      	add	ip, r0
 80020d2:	4666      	mov	r6, ip
 80020d4:	231d      	movs	r3, #29
 80020d6:	1b9b      	subs	r3, r3, r6
 80020d8:	0026      	movs	r6, r4
 80020da:	0011      	movs	r1, r2
 80020dc:	4658      	mov	r0, fp
 80020de:	40de      	lsrs	r6, r3
 80020e0:	3908      	subs	r1, #8
 80020e2:	4088      	lsls	r0, r1
 80020e4:	0033      	movs	r3, r6
 80020e6:	4303      	orrs	r3, r0
 80020e8:	4699      	mov	r9, r3
 80020ea:	0023      	movs	r3, r4
 80020ec:	408b      	lsls	r3, r1
 80020ee:	4698      	mov	r8, r3
 80020f0:	4b16      	ldr	r3, [pc, #88]	@ (800214c <__aeabi_ddiv+0x398>)
 80020f2:	2400      	movs	r4, #0
 80020f4:	1a9b      	subs	r3, r3, r2
 80020f6:	469a      	mov	sl, r3
 80020f8:	2300      	movs	r3, #0
 80020fa:	9303      	str	r3, [sp, #12]
 80020fc:	e682      	b.n	8001e04 <__aeabi_ddiv+0x50>
 80020fe:	465a      	mov	r2, fp
 8002100:	4302      	orrs	r2, r0
 8002102:	4691      	mov	r9, r2
 8002104:	d12a      	bne.n	800215c <__aeabi_ddiv+0x3a8>
 8002106:	2200      	movs	r2, #0
 8002108:	469a      	mov	sl, r3
 800210a:	2302      	movs	r3, #2
 800210c:	4690      	mov	r8, r2
 800210e:	2408      	movs	r4, #8
 8002110:	9303      	str	r3, [sp, #12]
 8002112:	e677      	b.n	8001e04 <__aeabi_ddiv+0x50>
 8002114:	465a      	mov	r2, fp
 8002116:	9b00      	ldr	r3, [sp, #0]
 8002118:	431a      	orrs	r2, r3
 800211a:	4b0d      	ldr	r3, [pc, #52]	@ (8002150 <__aeabi_ddiv+0x39c>)
 800211c:	469c      	mov	ip, r3
 800211e:	44e2      	add	sl, ip
 8002120:	2a00      	cmp	r2, #0
 8002122:	d117      	bne.n	8002154 <__aeabi_ddiv+0x3a0>
 8002124:	2302      	movs	r3, #2
 8002126:	431c      	orrs	r4, r3
 8002128:	2300      	movs	r3, #0
 800212a:	469b      	mov	fp, r3
 800212c:	3302      	adds	r3, #2
 800212e:	e689      	b.n	8001e44 <__aeabi_ddiv+0x90>
 8002130:	000007ff 	.word	0x000007ff
 8002134:	fffffc01 	.word	0xfffffc01
 8002138:	08024688 	.word	0x08024688
 800213c:	000003ff 	.word	0x000003ff
 8002140:	feffffff 	.word	0xfeffffff
 8002144:	000007fe 	.word	0x000007fe
 8002148:	000003f3 	.word	0x000003f3
 800214c:	fffffc0d 	.word	0xfffffc0d
 8002150:	fffff801 	.word	0xfffff801
 8002154:	2303      	movs	r3, #3
 8002156:	0032      	movs	r2, r6
 8002158:	431c      	orrs	r4, r3
 800215a:	e673      	b.n	8001e44 <__aeabi_ddiv+0x90>
 800215c:	469a      	mov	sl, r3
 800215e:	2303      	movs	r3, #3
 8002160:	46d9      	mov	r9, fp
 8002162:	240c      	movs	r4, #12
 8002164:	9303      	str	r3, [sp, #12]
 8002166:	e64d      	b.n	8001e04 <__aeabi_ddiv+0x50>
 8002168:	2300      	movs	r3, #0
 800216a:	4698      	mov	r8, r3
 800216c:	469a      	mov	sl, r3
 800216e:	3301      	adds	r3, #1
 8002170:	2404      	movs	r4, #4
 8002172:	9303      	str	r3, [sp, #12]
 8002174:	e646      	b.n	8001e04 <__aeabi_ddiv+0x50>
 8002176:	2301      	movs	r3, #1
 8002178:	431c      	orrs	r4, r3
 800217a:	2300      	movs	r3, #0
 800217c:	469b      	mov	fp, r3
 800217e:	3301      	adds	r3, #1
 8002180:	e660      	b.n	8001e44 <__aeabi_ddiv+0x90>
 8002182:	2300      	movs	r3, #0
 8002184:	2480      	movs	r4, #128	@ 0x80
 8002186:	4698      	mov	r8, r3
 8002188:	2600      	movs	r6, #0
 800218a:	4b92      	ldr	r3, [pc, #584]	@ (80023d4 <__aeabi_ddiv+0x620>)
 800218c:	0324      	lsls	r4, r4, #12
 800218e:	e671      	b.n	8001e74 <__aeabi_ddiv+0xc0>
 8002190:	2201      	movs	r2, #1
 8002192:	4252      	negs	r2, r2
 8002194:	2101      	movs	r1, #1
 8002196:	1ac9      	subs	r1, r1, r3
 8002198:	2938      	cmp	r1, #56	@ 0x38
 800219a:	dd00      	ble.n	800219e <__aeabi_ddiv+0x3ea>
 800219c:	e666      	b.n	8001e6c <__aeabi_ddiv+0xb8>
 800219e:	291f      	cmp	r1, #31
 80021a0:	dc00      	bgt.n	80021a4 <__aeabi_ddiv+0x3f0>
 80021a2:	e0ab      	b.n	80022fc <__aeabi_ddiv+0x548>
 80021a4:	201f      	movs	r0, #31
 80021a6:	4240      	negs	r0, r0
 80021a8:	1ac3      	subs	r3, r0, r3
 80021aa:	4658      	mov	r0, fp
 80021ac:	40d8      	lsrs	r0, r3
 80021ae:	0003      	movs	r3, r0
 80021b0:	2920      	cmp	r1, #32
 80021b2:	d004      	beq.n	80021be <__aeabi_ddiv+0x40a>
 80021b4:	4658      	mov	r0, fp
 80021b6:	4988      	ldr	r1, [pc, #544]	@ (80023d8 <__aeabi_ddiv+0x624>)
 80021b8:	4451      	add	r1, sl
 80021ba:	4088      	lsls	r0, r1
 80021bc:	4302      	orrs	r2, r0
 80021be:	1e51      	subs	r1, r2, #1
 80021c0:	418a      	sbcs	r2, r1
 80021c2:	431a      	orrs	r2, r3
 80021c4:	2307      	movs	r3, #7
 80021c6:	0019      	movs	r1, r3
 80021c8:	2400      	movs	r4, #0
 80021ca:	4011      	ands	r1, r2
 80021cc:	4213      	tst	r3, r2
 80021ce:	d00c      	beq.n	80021ea <__aeabi_ddiv+0x436>
 80021d0:	230f      	movs	r3, #15
 80021d2:	4013      	ands	r3, r2
 80021d4:	2b04      	cmp	r3, #4
 80021d6:	d100      	bne.n	80021da <__aeabi_ddiv+0x426>
 80021d8:	e0f9      	b.n	80023ce <__aeabi_ddiv+0x61a>
 80021da:	1d11      	adds	r1, r2, #4
 80021dc:	4291      	cmp	r1, r2
 80021de:	419b      	sbcs	r3, r3
 80021e0:	000a      	movs	r2, r1
 80021e2:	425b      	negs	r3, r3
 80021e4:	0759      	lsls	r1, r3, #29
 80021e6:	025b      	lsls	r3, r3, #9
 80021e8:	0b1c      	lsrs	r4, r3, #12
 80021ea:	08d2      	lsrs	r2, r2, #3
 80021ec:	430a      	orrs	r2, r1
 80021ee:	4690      	mov	r8, r2
 80021f0:	2300      	movs	r3, #0
 80021f2:	e63f      	b.n	8001e74 <__aeabi_ddiv+0xc0>
 80021f4:	2480      	movs	r4, #128	@ 0x80
 80021f6:	464b      	mov	r3, r9
 80021f8:	0324      	lsls	r4, r4, #12
 80021fa:	4223      	tst	r3, r4
 80021fc:	d009      	beq.n	8002212 <__aeabi_ddiv+0x45e>
 80021fe:	465b      	mov	r3, fp
 8002200:	4223      	tst	r3, r4
 8002202:	d106      	bne.n	8002212 <__aeabi_ddiv+0x45e>
 8002204:	431c      	orrs	r4, r3
 8002206:	0324      	lsls	r4, r4, #12
 8002208:	002e      	movs	r6, r5
 800220a:	4690      	mov	r8, r2
 800220c:	4b71      	ldr	r3, [pc, #452]	@ (80023d4 <__aeabi_ddiv+0x620>)
 800220e:	0b24      	lsrs	r4, r4, #12
 8002210:	e630      	b.n	8001e74 <__aeabi_ddiv+0xc0>
 8002212:	2480      	movs	r4, #128	@ 0x80
 8002214:	464b      	mov	r3, r9
 8002216:	0324      	lsls	r4, r4, #12
 8002218:	431c      	orrs	r4, r3
 800221a:	0324      	lsls	r4, r4, #12
 800221c:	9e02      	ldr	r6, [sp, #8]
 800221e:	4b6d      	ldr	r3, [pc, #436]	@ (80023d4 <__aeabi_ddiv+0x620>)
 8002220:	0b24      	lsrs	r4, r4, #12
 8002222:	e627      	b.n	8001e74 <__aeabi_ddiv+0xc0>
 8002224:	2b00      	cmp	r3, #0
 8002226:	d100      	bne.n	800222a <__aeabi_ddiv+0x476>
 8002228:	e700      	b.n	800202c <__aeabi_ddiv+0x278>
 800222a:	9800      	ldr	r0, [sp, #0]
 800222c:	1e51      	subs	r1, r2, #1
 800222e:	4684      	mov	ip, r0
 8002230:	4464      	add	r4, ip
 8002232:	4284      	cmp	r4, r0
 8002234:	d200      	bcs.n	8002238 <__aeabi_ddiv+0x484>
 8002236:	e084      	b.n	8002342 <__aeabi_ddiv+0x58e>
 8002238:	42bc      	cmp	r4, r7
 800223a:	d200      	bcs.n	800223e <__aeabi_ddiv+0x48a>
 800223c:	e0ae      	b.n	800239c <__aeabi_ddiv+0x5e8>
 800223e:	d100      	bne.n	8002242 <__aeabi_ddiv+0x48e>
 8002240:	e0c1      	b.n	80023c6 <__aeabi_ddiv+0x612>
 8002242:	000a      	movs	r2, r1
 8002244:	e6f0      	b.n	8002028 <__aeabi_ddiv+0x274>
 8002246:	4542      	cmp	r2, r8
 8002248:	d900      	bls.n	800224c <__aeabi_ddiv+0x498>
 800224a:	e62c      	b.n	8001ea6 <__aeabi_ddiv+0xf2>
 800224c:	464b      	mov	r3, r9
 800224e:	07dc      	lsls	r4, r3, #31
 8002250:	0858      	lsrs	r0, r3, #1
 8002252:	4643      	mov	r3, r8
 8002254:	085b      	lsrs	r3, r3, #1
 8002256:	431c      	orrs	r4, r3
 8002258:	4643      	mov	r3, r8
 800225a:	07df      	lsls	r7, r3, #31
 800225c:	e62a      	b.n	8001eb4 <__aeabi_ddiv+0x100>
 800225e:	f001 f9cd 	bl	80035fc <__clzsi2>
 8002262:	2315      	movs	r3, #21
 8002264:	469c      	mov	ip, r3
 8002266:	4484      	add	ip, r0
 8002268:	0002      	movs	r2, r0
 800226a:	4663      	mov	r3, ip
 800226c:	3220      	adds	r2, #32
 800226e:	2b1c      	cmp	r3, #28
 8002270:	dc00      	bgt.n	8002274 <__aeabi_ddiv+0x4c0>
 8002272:	e72e      	b.n	80020d2 <__aeabi_ddiv+0x31e>
 8002274:	0023      	movs	r3, r4
 8002276:	3808      	subs	r0, #8
 8002278:	4083      	lsls	r3, r0
 800227a:	4699      	mov	r9, r3
 800227c:	2300      	movs	r3, #0
 800227e:	4698      	mov	r8, r3
 8002280:	e736      	b.n	80020f0 <__aeabi_ddiv+0x33c>
 8002282:	f001 f9bb 	bl	80035fc <__clzsi2>
 8002286:	0002      	movs	r2, r0
 8002288:	0003      	movs	r3, r0
 800228a:	3215      	adds	r2, #21
 800228c:	3320      	adds	r3, #32
 800228e:	2a1c      	cmp	r2, #28
 8002290:	dc00      	bgt.n	8002294 <__aeabi_ddiv+0x4e0>
 8002292:	e6fb      	b.n	800208c <__aeabi_ddiv+0x2d8>
 8002294:	9900      	ldr	r1, [sp, #0]
 8002296:	3808      	subs	r0, #8
 8002298:	4081      	lsls	r1, r0
 800229a:	2200      	movs	r2, #0
 800229c:	468b      	mov	fp, r1
 800229e:	e702      	b.n	80020a6 <__aeabi_ddiv+0x2f2>
 80022a0:	9900      	ldr	r1, [sp, #0]
 80022a2:	3b01      	subs	r3, #1
 80022a4:	468c      	mov	ip, r1
 80022a6:	4464      	add	r4, ip
 80022a8:	42a1      	cmp	r1, r4
 80022aa:	d900      	bls.n	80022ae <__aeabi_ddiv+0x4fa>
 80022ac:	e69a      	b.n	8001fe4 <__aeabi_ddiv+0x230>
 80022ae:	42a2      	cmp	r2, r4
 80022b0:	d800      	bhi.n	80022b4 <__aeabi_ddiv+0x500>
 80022b2:	e697      	b.n	8001fe4 <__aeabi_ddiv+0x230>
 80022b4:	1e83      	subs	r3, r0, #2
 80022b6:	4464      	add	r4, ip
 80022b8:	e694      	b.n	8001fe4 <__aeabi_ddiv+0x230>
 80022ba:	46ac      	mov	ip, r5
 80022bc:	4461      	add	r1, ip
 80022be:	3f01      	subs	r7, #1
 80022c0:	428d      	cmp	r5, r1
 80022c2:	d900      	bls.n	80022c6 <__aeabi_ddiv+0x512>
 80022c4:	e680      	b.n	8001fc8 <__aeabi_ddiv+0x214>
 80022c6:	428a      	cmp	r2, r1
 80022c8:	d800      	bhi.n	80022cc <__aeabi_ddiv+0x518>
 80022ca:	e67d      	b.n	8001fc8 <__aeabi_ddiv+0x214>
 80022cc:	1e87      	subs	r7, r0, #2
 80022ce:	4461      	add	r1, ip
 80022d0:	e67a      	b.n	8001fc8 <__aeabi_ddiv+0x214>
 80022d2:	4285      	cmp	r5, r0
 80022d4:	d000      	beq.n	80022d8 <__aeabi_ddiv+0x524>
 80022d6:	e65f      	b.n	8001f98 <__aeabi_ddiv+0x1e4>
 80022d8:	45b9      	cmp	r9, r7
 80022da:	d900      	bls.n	80022de <__aeabi_ddiv+0x52a>
 80022dc:	e65c      	b.n	8001f98 <__aeabi_ddiv+0x1e4>
 80022de:	e656      	b.n	8001f8e <__aeabi_ddiv+0x1da>
 80022e0:	42a2      	cmp	r2, r4
 80022e2:	d800      	bhi.n	80022e6 <__aeabi_ddiv+0x532>
 80022e4:	e61a      	b.n	8001f1c <__aeabi_ddiv+0x168>
 80022e6:	1e83      	subs	r3, r0, #2
 80022e8:	4464      	add	r4, ip
 80022ea:	e617      	b.n	8001f1c <__aeabi_ddiv+0x168>
 80022ec:	428a      	cmp	r2, r1
 80022ee:	d800      	bhi.n	80022f2 <__aeabi_ddiv+0x53e>
 80022f0:	e600      	b.n	8001ef4 <__aeabi_ddiv+0x140>
 80022f2:	46ac      	mov	ip, r5
 80022f4:	1e83      	subs	r3, r0, #2
 80022f6:	4698      	mov	r8, r3
 80022f8:	4461      	add	r1, ip
 80022fa:	e5fb      	b.n	8001ef4 <__aeabi_ddiv+0x140>
 80022fc:	4837      	ldr	r0, [pc, #220]	@ (80023dc <__aeabi_ddiv+0x628>)
 80022fe:	0014      	movs	r4, r2
 8002300:	4450      	add	r0, sl
 8002302:	4082      	lsls	r2, r0
 8002304:	465b      	mov	r3, fp
 8002306:	0017      	movs	r7, r2
 8002308:	4083      	lsls	r3, r0
 800230a:	40cc      	lsrs	r4, r1
 800230c:	1e7a      	subs	r2, r7, #1
 800230e:	4197      	sbcs	r7, r2
 8002310:	4323      	orrs	r3, r4
 8002312:	433b      	orrs	r3, r7
 8002314:	001a      	movs	r2, r3
 8002316:	465b      	mov	r3, fp
 8002318:	40cb      	lsrs	r3, r1
 800231a:	0751      	lsls	r1, r2, #29
 800231c:	d009      	beq.n	8002332 <__aeabi_ddiv+0x57e>
 800231e:	210f      	movs	r1, #15
 8002320:	4011      	ands	r1, r2
 8002322:	2904      	cmp	r1, #4
 8002324:	d005      	beq.n	8002332 <__aeabi_ddiv+0x57e>
 8002326:	1d11      	adds	r1, r2, #4
 8002328:	4291      	cmp	r1, r2
 800232a:	4192      	sbcs	r2, r2
 800232c:	4252      	negs	r2, r2
 800232e:	189b      	adds	r3, r3, r2
 8002330:	000a      	movs	r2, r1
 8002332:	0219      	lsls	r1, r3, #8
 8002334:	d400      	bmi.n	8002338 <__aeabi_ddiv+0x584>
 8002336:	e755      	b.n	80021e4 <__aeabi_ddiv+0x430>
 8002338:	2200      	movs	r2, #0
 800233a:	2301      	movs	r3, #1
 800233c:	2400      	movs	r4, #0
 800233e:	4690      	mov	r8, r2
 8002340:	e598      	b.n	8001e74 <__aeabi_ddiv+0xc0>
 8002342:	000a      	movs	r2, r1
 8002344:	42bc      	cmp	r4, r7
 8002346:	d000      	beq.n	800234a <__aeabi_ddiv+0x596>
 8002348:	e66e      	b.n	8002028 <__aeabi_ddiv+0x274>
 800234a:	454b      	cmp	r3, r9
 800234c:	d000      	beq.n	8002350 <__aeabi_ddiv+0x59c>
 800234e:	e66b      	b.n	8002028 <__aeabi_ddiv+0x274>
 8002350:	e66c      	b.n	800202c <__aeabi_ddiv+0x278>
 8002352:	4b23      	ldr	r3, [pc, #140]	@ (80023e0 <__aeabi_ddiv+0x62c>)
 8002354:	4a23      	ldr	r2, [pc, #140]	@ (80023e4 <__aeabi_ddiv+0x630>)
 8002356:	4453      	add	r3, sl
 8002358:	4592      	cmp	sl, r2
 800235a:	da00      	bge.n	800235e <__aeabi_ddiv+0x5aa>
 800235c:	e718      	b.n	8002190 <__aeabi_ddiv+0x3dc>
 800235e:	2101      	movs	r1, #1
 8002360:	4249      	negs	r1, r1
 8002362:	1d0a      	adds	r2, r1, #4
 8002364:	428a      	cmp	r2, r1
 8002366:	4189      	sbcs	r1, r1
 8002368:	4249      	negs	r1, r1
 800236a:	448b      	add	fp, r1
 800236c:	e666      	b.n	800203c <__aeabi_ddiv+0x288>
 800236e:	210f      	movs	r1, #15
 8002370:	4011      	ands	r1, r2
 8002372:	2904      	cmp	r1, #4
 8002374:	d100      	bne.n	8002378 <__aeabi_ddiv+0x5c4>
 8002376:	e661      	b.n	800203c <__aeabi_ddiv+0x288>
 8002378:	0011      	movs	r1, r2
 800237a:	e7f2      	b.n	8002362 <__aeabi_ddiv+0x5ae>
 800237c:	42bc      	cmp	r4, r7
 800237e:	d800      	bhi.n	8002382 <__aeabi_ddiv+0x5ce>
 8002380:	e60a      	b.n	8001f98 <__aeabi_ddiv+0x1e4>
 8002382:	2302      	movs	r3, #2
 8002384:	425b      	negs	r3, r3
 8002386:	469c      	mov	ip, r3
 8002388:	9900      	ldr	r1, [sp, #0]
 800238a:	444f      	add	r7, r9
 800238c:	454f      	cmp	r7, r9
 800238e:	419b      	sbcs	r3, r3
 8002390:	44e3      	add	fp, ip
 8002392:	468c      	mov	ip, r1
 8002394:	425b      	negs	r3, r3
 8002396:	4463      	add	r3, ip
 8002398:	18c0      	adds	r0, r0, r3
 800239a:	e5ff      	b.n	8001f9c <__aeabi_ddiv+0x1e8>
 800239c:	4649      	mov	r1, r9
 800239e:	9d00      	ldr	r5, [sp, #0]
 80023a0:	0048      	lsls	r0, r1, #1
 80023a2:	4548      	cmp	r0, r9
 80023a4:	4189      	sbcs	r1, r1
 80023a6:	46ac      	mov	ip, r5
 80023a8:	4249      	negs	r1, r1
 80023aa:	4461      	add	r1, ip
 80023ac:	4681      	mov	r9, r0
 80023ae:	3a02      	subs	r2, #2
 80023b0:	1864      	adds	r4, r4, r1
 80023b2:	e7c7      	b.n	8002344 <__aeabi_ddiv+0x590>
 80023b4:	2480      	movs	r4, #128	@ 0x80
 80023b6:	465b      	mov	r3, fp
 80023b8:	0324      	lsls	r4, r4, #12
 80023ba:	431c      	orrs	r4, r3
 80023bc:	0324      	lsls	r4, r4, #12
 80023be:	4690      	mov	r8, r2
 80023c0:	4b04      	ldr	r3, [pc, #16]	@ (80023d4 <__aeabi_ddiv+0x620>)
 80023c2:	0b24      	lsrs	r4, r4, #12
 80023c4:	e556      	b.n	8001e74 <__aeabi_ddiv+0xc0>
 80023c6:	4599      	cmp	r9, r3
 80023c8:	d3e8      	bcc.n	800239c <__aeabi_ddiv+0x5e8>
 80023ca:	000a      	movs	r2, r1
 80023cc:	e7bd      	b.n	800234a <__aeabi_ddiv+0x596>
 80023ce:	2300      	movs	r3, #0
 80023d0:	e708      	b.n	80021e4 <__aeabi_ddiv+0x430>
 80023d2:	46c0      	nop			@ (mov r8, r8)
 80023d4:	000007ff 	.word	0x000007ff
 80023d8:	0000043e 	.word	0x0000043e
 80023dc:	0000041e 	.word	0x0000041e
 80023e0:	000003ff 	.word	0x000003ff
 80023e4:	fffffc02 	.word	0xfffffc02

080023e8 <__eqdf2>:
 80023e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80023ea:	4657      	mov	r7, sl
 80023ec:	46de      	mov	lr, fp
 80023ee:	464e      	mov	r6, r9
 80023f0:	4645      	mov	r5, r8
 80023f2:	b5e0      	push	{r5, r6, r7, lr}
 80023f4:	000d      	movs	r5, r1
 80023f6:	0004      	movs	r4, r0
 80023f8:	0fe8      	lsrs	r0, r5, #31
 80023fa:	4683      	mov	fp, r0
 80023fc:	0309      	lsls	r1, r1, #12
 80023fe:	0fd8      	lsrs	r0, r3, #31
 8002400:	0b09      	lsrs	r1, r1, #12
 8002402:	4682      	mov	sl, r0
 8002404:	4819      	ldr	r0, [pc, #100]	@ (800246c <__eqdf2+0x84>)
 8002406:	468c      	mov	ip, r1
 8002408:	031f      	lsls	r7, r3, #12
 800240a:	0069      	lsls	r1, r5, #1
 800240c:	005e      	lsls	r6, r3, #1
 800240e:	0d49      	lsrs	r1, r1, #21
 8002410:	0b3f      	lsrs	r7, r7, #12
 8002412:	0d76      	lsrs	r6, r6, #21
 8002414:	4281      	cmp	r1, r0
 8002416:	d018      	beq.n	800244a <__eqdf2+0x62>
 8002418:	4286      	cmp	r6, r0
 800241a:	d00f      	beq.n	800243c <__eqdf2+0x54>
 800241c:	2001      	movs	r0, #1
 800241e:	42b1      	cmp	r1, r6
 8002420:	d10d      	bne.n	800243e <__eqdf2+0x56>
 8002422:	45bc      	cmp	ip, r7
 8002424:	d10b      	bne.n	800243e <__eqdf2+0x56>
 8002426:	4294      	cmp	r4, r2
 8002428:	d109      	bne.n	800243e <__eqdf2+0x56>
 800242a:	45d3      	cmp	fp, sl
 800242c:	d01c      	beq.n	8002468 <__eqdf2+0x80>
 800242e:	2900      	cmp	r1, #0
 8002430:	d105      	bne.n	800243e <__eqdf2+0x56>
 8002432:	4660      	mov	r0, ip
 8002434:	4320      	orrs	r0, r4
 8002436:	1e43      	subs	r3, r0, #1
 8002438:	4198      	sbcs	r0, r3
 800243a:	e000      	b.n	800243e <__eqdf2+0x56>
 800243c:	2001      	movs	r0, #1
 800243e:	bcf0      	pop	{r4, r5, r6, r7}
 8002440:	46bb      	mov	fp, r7
 8002442:	46b2      	mov	sl, r6
 8002444:	46a9      	mov	r9, r5
 8002446:	46a0      	mov	r8, r4
 8002448:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800244a:	2001      	movs	r0, #1
 800244c:	428e      	cmp	r6, r1
 800244e:	d1f6      	bne.n	800243e <__eqdf2+0x56>
 8002450:	4661      	mov	r1, ip
 8002452:	4339      	orrs	r1, r7
 8002454:	000f      	movs	r7, r1
 8002456:	4317      	orrs	r7, r2
 8002458:	4327      	orrs	r7, r4
 800245a:	d1f0      	bne.n	800243e <__eqdf2+0x56>
 800245c:	465b      	mov	r3, fp
 800245e:	4652      	mov	r2, sl
 8002460:	1a98      	subs	r0, r3, r2
 8002462:	1e43      	subs	r3, r0, #1
 8002464:	4198      	sbcs	r0, r3
 8002466:	e7ea      	b.n	800243e <__eqdf2+0x56>
 8002468:	2000      	movs	r0, #0
 800246a:	e7e8      	b.n	800243e <__eqdf2+0x56>
 800246c:	000007ff 	.word	0x000007ff

08002470 <__gedf2>:
 8002470:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002472:	4657      	mov	r7, sl
 8002474:	464e      	mov	r6, r9
 8002476:	4645      	mov	r5, r8
 8002478:	46de      	mov	lr, fp
 800247a:	b5e0      	push	{r5, r6, r7, lr}
 800247c:	000d      	movs	r5, r1
 800247e:	030f      	lsls	r7, r1, #12
 8002480:	0b39      	lsrs	r1, r7, #12
 8002482:	b083      	sub	sp, #12
 8002484:	0004      	movs	r4, r0
 8002486:	4680      	mov	r8, r0
 8002488:	9101      	str	r1, [sp, #4]
 800248a:	0058      	lsls	r0, r3, #1
 800248c:	0fe9      	lsrs	r1, r5, #31
 800248e:	4f31      	ldr	r7, [pc, #196]	@ (8002554 <__gedf2+0xe4>)
 8002490:	0d40      	lsrs	r0, r0, #21
 8002492:	468c      	mov	ip, r1
 8002494:	006e      	lsls	r6, r5, #1
 8002496:	0319      	lsls	r1, r3, #12
 8002498:	4682      	mov	sl, r0
 800249a:	4691      	mov	r9, r2
 800249c:	0d76      	lsrs	r6, r6, #21
 800249e:	0b09      	lsrs	r1, r1, #12
 80024a0:	0fd8      	lsrs	r0, r3, #31
 80024a2:	42be      	cmp	r6, r7
 80024a4:	d01f      	beq.n	80024e6 <__gedf2+0x76>
 80024a6:	45ba      	cmp	sl, r7
 80024a8:	d00f      	beq.n	80024ca <__gedf2+0x5a>
 80024aa:	2e00      	cmp	r6, #0
 80024ac:	d12f      	bne.n	800250e <__gedf2+0x9e>
 80024ae:	4655      	mov	r5, sl
 80024b0:	9e01      	ldr	r6, [sp, #4]
 80024b2:	4334      	orrs	r4, r6
 80024b4:	2d00      	cmp	r5, #0
 80024b6:	d127      	bne.n	8002508 <__gedf2+0x98>
 80024b8:	430a      	orrs	r2, r1
 80024ba:	d03a      	beq.n	8002532 <__gedf2+0xc2>
 80024bc:	2c00      	cmp	r4, #0
 80024be:	d145      	bne.n	800254c <__gedf2+0xdc>
 80024c0:	2800      	cmp	r0, #0
 80024c2:	d11a      	bne.n	80024fa <__gedf2+0x8a>
 80024c4:	2001      	movs	r0, #1
 80024c6:	4240      	negs	r0, r0
 80024c8:	e017      	b.n	80024fa <__gedf2+0x8a>
 80024ca:	4311      	orrs	r1, r2
 80024cc:	d13b      	bne.n	8002546 <__gedf2+0xd6>
 80024ce:	2e00      	cmp	r6, #0
 80024d0:	d102      	bne.n	80024d8 <__gedf2+0x68>
 80024d2:	9f01      	ldr	r7, [sp, #4]
 80024d4:	4327      	orrs	r7, r4
 80024d6:	d0f3      	beq.n	80024c0 <__gedf2+0x50>
 80024d8:	4584      	cmp	ip, r0
 80024da:	d109      	bne.n	80024f0 <__gedf2+0x80>
 80024dc:	4663      	mov	r3, ip
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d0f0      	beq.n	80024c4 <__gedf2+0x54>
 80024e2:	4660      	mov	r0, ip
 80024e4:	e009      	b.n	80024fa <__gedf2+0x8a>
 80024e6:	9f01      	ldr	r7, [sp, #4]
 80024e8:	4327      	orrs	r7, r4
 80024ea:	d12c      	bne.n	8002546 <__gedf2+0xd6>
 80024ec:	45b2      	cmp	sl, r6
 80024ee:	d024      	beq.n	800253a <__gedf2+0xca>
 80024f0:	4663      	mov	r3, ip
 80024f2:	2002      	movs	r0, #2
 80024f4:	3b01      	subs	r3, #1
 80024f6:	4018      	ands	r0, r3
 80024f8:	3801      	subs	r0, #1
 80024fa:	b003      	add	sp, #12
 80024fc:	bcf0      	pop	{r4, r5, r6, r7}
 80024fe:	46bb      	mov	fp, r7
 8002500:	46b2      	mov	sl, r6
 8002502:	46a9      	mov	r9, r5
 8002504:	46a0      	mov	r8, r4
 8002506:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002508:	2c00      	cmp	r4, #0
 800250a:	d0d9      	beq.n	80024c0 <__gedf2+0x50>
 800250c:	e7e4      	b.n	80024d8 <__gedf2+0x68>
 800250e:	4654      	mov	r4, sl
 8002510:	2c00      	cmp	r4, #0
 8002512:	d0ed      	beq.n	80024f0 <__gedf2+0x80>
 8002514:	4584      	cmp	ip, r0
 8002516:	d1eb      	bne.n	80024f0 <__gedf2+0x80>
 8002518:	4556      	cmp	r6, sl
 800251a:	dce9      	bgt.n	80024f0 <__gedf2+0x80>
 800251c:	dbde      	blt.n	80024dc <__gedf2+0x6c>
 800251e:	9b01      	ldr	r3, [sp, #4]
 8002520:	428b      	cmp	r3, r1
 8002522:	d8e5      	bhi.n	80024f0 <__gedf2+0x80>
 8002524:	d1da      	bne.n	80024dc <__gedf2+0x6c>
 8002526:	45c8      	cmp	r8, r9
 8002528:	d8e2      	bhi.n	80024f0 <__gedf2+0x80>
 800252a:	2000      	movs	r0, #0
 800252c:	45c8      	cmp	r8, r9
 800252e:	d2e4      	bcs.n	80024fa <__gedf2+0x8a>
 8002530:	e7d4      	b.n	80024dc <__gedf2+0x6c>
 8002532:	2000      	movs	r0, #0
 8002534:	2c00      	cmp	r4, #0
 8002536:	d0e0      	beq.n	80024fa <__gedf2+0x8a>
 8002538:	e7da      	b.n	80024f0 <__gedf2+0x80>
 800253a:	4311      	orrs	r1, r2
 800253c:	d103      	bne.n	8002546 <__gedf2+0xd6>
 800253e:	4584      	cmp	ip, r0
 8002540:	d1d6      	bne.n	80024f0 <__gedf2+0x80>
 8002542:	2000      	movs	r0, #0
 8002544:	e7d9      	b.n	80024fa <__gedf2+0x8a>
 8002546:	2002      	movs	r0, #2
 8002548:	4240      	negs	r0, r0
 800254a:	e7d6      	b.n	80024fa <__gedf2+0x8a>
 800254c:	4584      	cmp	ip, r0
 800254e:	d0e6      	beq.n	800251e <__gedf2+0xae>
 8002550:	e7ce      	b.n	80024f0 <__gedf2+0x80>
 8002552:	46c0      	nop			@ (mov r8, r8)
 8002554:	000007ff 	.word	0x000007ff

08002558 <__ledf2>:
 8002558:	b5f0      	push	{r4, r5, r6, r7, lr}
 800255a:	4657      	mov	r7, sl
 800255c:	464e      	mov	r6, r9
 800255e:	4645      	mov	r5, r8
 8002560:	46de      	mov	lr, fp
 8002562:	b5e0      	push	{r5, r6, r7, lr}
 8002564:	000d      	movs	r5, r1
 8002566:	030f      	lsls	r7, r1, #12
 8002568:	0004      	movs	r4, r0
 800256a:	4680      	mov	r8, r0
 800256c:	0fe8      	lsrs	r0, r5, #31
 800256e:	0b39      	lsrs	r1, r7, #12
 8002570:	4684      	mov	ip, r0
 8002572:	b083      	sub	sp, #12
 8002574:	0058      	lsls	r0, r3, #1
 8002576:	4f30      	ldr	r7, [pc, #192]	@ (8002638 <__ledf2+0xe0>)
 8002578:	0d40      	lsrs	r0, r0, #21
 800257a:	9101      	str	r1, [sp, #4]
 800257c:	031e      	lsls	r6, r3, #12
 800257e:	0069      	lsls	r1, r5, #1
 8002580:	4682      	mov	sl, r0
 8002582:	4691      	mov	r9, r2
 8002584:	0d49      	lsrs	r1, r1, #21
 8002586:	0b36      	lsrs	r6, r6, #12
 8002588:	0fd8      	lsrs	r0, r3, #31
 800258a:	42b9      	cmp	r1, r7
 800258c:	d020      	beq.n	80025d0 <__ledf2+0x78>
 800258e:	45ba      	cmp	sl, r7
 8002590:	d00f      	beq.n	80025b2 <__ledf2+0x5a>
 8002592:	2900      	cmp	r1, #0
 8002594:	d12b      	bne.n	80025ee <__ledf2+0x96>
 8002596:	9901      	ldr	r1, [sp, #4]
 8002598:	430c      	orrs	r4, r1
 800259a:	4651      	mov	r1, sl
 800259c:	2900      	cmp	r1, #0
 800259e:	d137      	bne.n	8002610 <__ledf2+0xb8>
 80025a0:	4332      	orrs	r2, r6
 80025a2:	d038      	beq.n	8002616 <__ledf2+0xbe>
 80025a4:	2c00      	cmp	r4, #0
 80025a6:	d144      	bne.n	8002632 <__ledf2+0xda>
 80025a8:	2800      	cmp	r0, #0
 80025aa:	d119      	bne.n	80025e0 <__ledf2+0x88>
 80025ac:	2001      	movs	r0, #1
 80025ae:	4240      	negs	r0, r0
 80025b0:	e016      	b.n	80025e0 <__ledf2+0x88>
 80025b2:	4316      	orrs	r6, r2
 80025b4:	d113      	bne.n	80025de <__ledf2+0x86>
 80025b6:	2900      	cmp	r1, #0
 80025b8:	d102      	bne.n	80025c0 <__ledf2+0x68>
 80025ba:	9f01      	ldr	r7, [sp, #4]
 80025bc:	4327      	orrs	r7, r4
 80025be:	d0f3      	beq.n	80025a8 <__ledf2+0x50>
 80025c0:	4584      	cmp	ip, r0
 80025c2:	d020      	beq.n	8002606 <__ledf2+0xae>
 80025c4:	4663      	mov	r3, ip
 80025c6:	2002      	movs	r0, #2
 80025c8:	3b01      	subs	r3, #1
 80025ca:	4018      	ands	r0, r3
 80025cc:	3801      	subs	r0, #1
 80025ce:	e007      	b.n	80025e0 <__ledf2+0x88>
 80025d0:	9f01      	ldr	r7, [sp, #4]
 80025d2:	4327      	orrs	r7, r4
 80025d4:	d103      	bne.n	80025de <__ledf2+0x86>
 80025d6:	458a      	cmp	sl, r1
 80025d8:	d1f4      	bne.n	80025c4 <__ledf2+0x6c>
 80025da:	4316      	orrs	r6, r2
 80025dc:	d01f      	beq.n	800261e <__ledf2+0xc6>
 80025de:	2002      	movs	r0, #2
 80025e0:	b003      	add	sp, #12
 80025e2:	bcf0      	pop	{r4, r5, r6, r7}
 80025e4:	46bb      	mov	fp, r7
 80025e6:	46b2      	mov	sl, r6
 80025e8:	46a9      	mov	r9, r5
 80025ea:	46a0      	mov	r8, r4
 80025ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80025ee:	4654      	mov	r4, sl
 80025f0:	2c00      	cmp	r4, #0
 80025f2:	d0e7      	beq.n	80025c4 <__ledf2+0x6c>
 80025f4:	4584      	cmp	ip, r0
 80025f6:	d1e5      	bne.n	80025c4 <__ledf2+0x6c>
 80025f8:	4551      	cmp	r1, sl
 80025fa:	dce3      	bgt.n	80025c4 <__ledf2+0x6c>
 80025fc:	db03      	blt.n	8002606 <__ledf2+0xae>
 80025fe:	9b01      	ldr	r3, [sp, #4]
 8002600:	42b3      	cmp	r3, r6
 8002602:	d8df      	bhi.n	80025c4 <__ledf2+0x6c>
 8002604:	d00f      	beq.n	8002626 <__ledf2+0xce>
 8002606:	4663      	mov	r3, ip
 8002608:	2b00      	cmp	r3, #0
 800260a:	d0cf      	beq.n	80025ac <__ledf2+0x54>
 800260c:	4660      	mov	r0, ip
 800260e:	e7e7      	b.n	80025e0 <__ledf2+0x88>
 8002610:	2c00      	cmp	r4, #0
 8002612:	d0c9      	beq.n	80025a8 <__ledf2+0x50>
 8002614:	e7d4      	b.n	80025c0 <__ledf2+0x68>
 8002616:	2000      	movs	r0, #0
 8002618:	2c00      	cmp	r4, #0
 800261a:	d0e1      	beq.n	80025e0 <__ledf2+0x88>
 800261c:	e7d2      	b.n	80025c4 <__ledf2+0x6c>
 800261e:	4584      	cmp	ip, r0
 8002620:	d1d0      	bne.n	80025c4 <__ledf2+0x6c>
 8002622:	2000      	movs	r0, #0
 8002624:	e7dc      	b.n	80025e0 <__ledf2+0x88>
 8002626:	45c8      	cmp	r8, r9
 8002628:	d8cc      	bhi.n	80025c4 <__ledf2+0x6c>
 800262a:	2000      	movs	r0, #0
 800262c:	45c8      	cmp	r8, r9
 800262e:	d2d7      	bcs.n	80025e0 <__ledf2+0x88>
 8002630:	e7e9      	b.n	8002606 <__ledf2+0xae>
 8002632:	4584      	cmp	ip, r0
 8002634:	d0e3      	beq.n	80025fe <__ledf2+0xa6>
 8002636:	e7c5      	b.n	80025c4 <__ledf2+0x6c>
 8002638:	000007ff 	.word	0x000007ff

0800263c <__aeabi_dmul>:
 800263c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800263e:	4657      	mov	r7, sl
 8002640:	46de      	mov	lr, fp
 8002642:	464e      	mov	r6, r9
 8002644:	4645      	mov	r5, r8
 8002646:	b5e0      	push	{r5, r6, r7, lr}
 8002648:	001f      	movs	r7, r3
 800264a:	030b      	lsls	r3, r1, #12
 800264c:	0b1b      	lsrs	r3, r3, #12
 800264e:	0016      	movs	r6, r2
 8002650:	469a      	mov	sl, r3
 8002652:	0fca      	lsrs	r2, r1, #31
 8002654:	004b      	lsls	r3, r1, #1
 8002656:	0004      	movs	r4, r0
 8002658:	4693      	mov	fp, r2
 800265a:	b087      	sub	sp, #28
 800265c:	0d5b      	lsrs	r3, r3, #21
 800265e:	d100      	bne.n	8002662 <__aeabi_dmul+0x26>
 8002660:	e0d5      	b.n	800280e <__aeabi_dmul+0x1d2>
 8002662:	4abb      	ldr	r2, [pc, #748]	@ (8002950 <__aeabi_dmul+0x314>)
 8002664:	4293      	cmp	r3, r2
 8002666:	d100      	bne.n	800266a <__aeabi_dmul+0x2e>
 8002668:	e0f8      	b.n	800285c <__aeabi_dmul+0x220>
 800266a:	4651      	mov	r1, sl
 800266c:	0f42      	lsrs	r2, r0, #29
 800266e:	00c9      	lsls	r1, r1, #3
 8002670:	430a      	orrs	r2, r1
 8002672:	2180      	movs	r1, #128	@ 0x80
 8002674:	0409      	lsls	r1, r1, #16
 8002676:	4311      	orrs	r1, r2
 8002678:	00c2      	lsls	r2, r0, #3
 800267a:	4691      	mov	r9, r2
 800267c:	4ab5      	ldr	r2, [pc, #724]	@ (8002954 <__aeabi_dmul+0x318>)
 800267e:	468a      	mov	sl, r1
 8002680:	189d      	adds	r5, r3, r2
 8002682:	2300      	movs	r3, #0
 8002684:	4698      	mov	r8, r3
 8002686:	9302      	str	r3, [sp, #8]
 8002688:	033c      	lsls	r4, r7, #12
 800268a:	007b      	lsls	r3, r7, #1
 800268c:	0ffa      	lsrs	r2, r7, #31
 800268e:	0030      	movs	r0, r6
 8002690:	0b24      	lsrs	r4, r4, #12
 8002692:	0d5b      	lsrs	r3, r3, #21
 8002694:	9200      	str	r2, [sp, #0]
 8002696:	d100      	bne.n	800269a <__aeabi_dmul+0x5e>
 8002698:	e096      	b.n	80027c8 <__aeabi_dmul+0x18c>
 800269a:	4aad      	ldr	r2, [pc, #692]	@ (8002950 <__aeabi_dmul+0x314>)
 800269c:	4293      	cmp	r3, r2
 800269e:	d031      	beq.n	8002704 <__aeabi_dmul+0xc8>
 80026a0:	0f72      	lsrs	r2, r6, #29
 80026a2:	00e4      	lsls	r4, r4, #3
 80026a4:	4322      	orrs	r2, r4
 80026a6:	2480      	movs	r4, #128	@ 0x80
 80026a8:	0424      	lsls	r4, r4, #16
 80026aa:	4314      	orrs	r4, r2
 80026ac:	4aa9      	ldr	r2, [pc, #676]	@ (8002954 <__aeabi_dmul+0x318>)
 80026ae:	00f0      	lsls	r0, r6, #3
 80026b0:	4694      	mov	ip, r2
 80026b2:	4463      	add	r3, ip
 80026b4:	195b      	adds	r3, r3, r5
 80026b6:	1c5a      	adds	r2, r3, #1
 80026b8:	9201      	str	r2, [sp, #4]
 80026ba:	4642      	mov	r2, r8
 80026bc:	2600      	movs	r6, #0
 80026be:	2a0a      	cmp	r2, #10
 80026c0:	dc42      	bgt.n	8002748 <__aeabi_dmul+0x10c>
 80026c2:	465a      	mov	r2, fp
 80026c4:	9900      	ldr	r1, [sp, #0]
 80026c6:	404a      	eors	r2, r1
 80026c8:	4693      	mov	fp, r2
 80026ca:	4642      	mov	r2, r8
 80026cc:	2a02      	cmp	r2, #2
 80026ce:	dc32      	bgt.n	8002736 <__aeabi_dmul+0xfa>
 80026d0:	3a01      	subs	r2, #1
 80026d2:	2a01      	cmp	r2, #1
 80026d4:	d900      	bls.n	80026d8 <__aeabi_dmul+0x9c>
 80026d6:	e149      	b.n	800296c <__aeabi_dmul+0x330>
 80026d8:	2e02      	cmp	r6, #2
 80026da:	d100      	bne.n	80026de <__aeabi_dmul+0xa2>
 80026dc:	e0ca      	b.n	8002874 <__aeabi_dmul+0x238>
 80026de:	2e01      	cmp	r6, #1
 80026e0:	d13d      	bne.n	800275e <__aeabi_dmul+0x122>
 80026e2:	2300      	movs	r3, #0
 80026e4:	2400      	movs	r4, #0
 80026e6:	2200      	movs	r2, #0
 80026e8:	0010      	movs	r0, r2
 80026ea:	465a      	mov	r2, fp
 80026ec:	051b      	lsls	r3, r3, #20
 80026ee:	4323      	orrs	r3, r4
 80026f0:	07d2      	lsls	r2, r2, #31
 80026f2:	4313      	orrs	r3, r2
 80026f4:	0019      	movs	r1, r3
 80026f6:	b007      	add	sp, #28
 80026f8:	bcf0      	pop	{r4, r5, r6, r7}
 80026fa:	46bb      	mov	fp, r7
 80026fc:	46b2      	mov	sl, r6
 80026fe:	46a9      	mov	r9, r5
 8002700:	46a0      	mov	r8, r4
 8002702:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002704:	4b92      	ldr	r3, [pc, #584]	@ (8002950 <__aeabi_dmul+0x314>)
 8002706:	4326      	orrs	r6, r4
 8002708:	18eb      	adds	r3, r5, r3
 800270a:	2e00      	cmp	r6, #0
 800270c:	d100      	bne.n	8002710 <__aeabi_dmul+0xd4>
 800270e:	e0bb      	b.n	8002888 <__aeabi_dmul+0x24c>
 8002710:	2203      	movs	r2, #3
 8002712:	4641      	mov	r1, r8
 8002714:	4311      	orrs	r1, r2
 8002716:	465a      	mov	r2, fp
 8002718:	4688      	mov	r8, r1
 800271a:	9900      	ldr	r1, [sp, #0]
 800271c:	404a      	eors	r2, r1
 800271e:	2180      	movs	r1, #128	@ 0x80
 8002720:	0109      	lsls	r1, r1, #4
 8002722:	468c      	mov	ip, r1
 8002724:	0029      	movs	r1, r5
 8002726:	4461      	add	r1, ip
 8002728:	9101      	str	r1, [sp, #4]
 800272a:	4641      	mov	r1, r8
 800272c:	290a      	cmp	r1, #10
 800272e:	dd00      	ble.n	8002732 <__aeabi_dmul+0xf6>
 8002730:	e233      	b.n	8002b9a <__aeabi_dmul+0x55e>
 8002732:	4693      	mov	fp, r2
 8002734:	2603      	movs	r6, #3
 8002736:	4642      	mov	r2, r8
 8002738:	2701      	movs	r7, #1
 800273a:	4097      	lsls	r7, r2
 800273c:	21a6      	movs	r1, #166	@ 0xa6
 800273e:	003a      	movs	r2, r7
 8002740:	00c9      	lsls	r1, r1, #3
 8002742:	400a      	ands	r2, r1
 8002744:	420f      	tst	r7, r1
 8002746:	d031      	beq.n	80027ac <__aeabi_dmul+0x170>
 8002748:	9e02      	ldr	r6, [sp, #8]
 800274a:	2e02      	cmp	r6, #2
 800274c:	d100      	bne.n	8002750 <__aeabi_dmul+0x114>
 800274e:	e235      	b.n	8002bbc <__aeabi_dmul+0x580>
 8002750:	2e03      	cmp	r6, #3
 8002752:	d100      	bne.n	8002756 <__aeabi_dmul+0x11a>
 8002754:	e1d2      	b.n	8002afc <__aeabi_dmul+0x4c0>
 8002756:	4654      	mov	r4, sl
 8002758:	4648      	mov	r0, r9
 800275a:	2e01      	cmp	r6, #1
 800275c:	d0c1      	beq.n	80026e2 <__aeabi_dmul+0xa6>
 800275e:	9a01      	ldr	r2, [sp, #4]
 8002760:	4b7d      	ldr	r3, [pc, #500]	@ (8002958 <__aeabi_dmul+0x31c>)
 8002762:	4694      	mov	ip, r2
 8002764:	4463      	add	r3, ip
 8002766:	2b00      	cmp	r3, #0
 8002768:	dc00      	bgt.n	800276c <__aeabi_dmul+0x130>
 800276a:	e0c0      	b.n	80028ee <__aeabi_dmul+0x2b2>
 800276c:	0742      	lsls	r2, r0, #29
 800276e:	d009      	beq.n	8002784 <__aeabi_dmul+0x148>
 8002770:	220f      	movs	r2, #15
 8002772:	4002      	ands	r2, r0
 8002774:	2a04      	cmp	r2, #4
 8002776:	d005      	beq.n	8002784 <__aeabi_dmul+0x148>
 8002778:	1d02      	adds	r2, r0, #4
 800277a:	4282      	cmp	r2, r0
 800277c:	4180      	sbcs	r0, r0
 800277e:	4240      	negs	r0, r0
 8002780:	1824      	adds	r4, r4, r0
 8002782:	0010      	movs	r0, r2
 8002784:	01e2      	lsls	r2, r4, #7
 8002786:	d506      	bpl.n	8002796 <__aeabi_dmul+0x15a>
 8002788:	4b74      	ldr	r3, [pc, #464]	@ (800295c <__aeabi_dmul+0x320>)
 800278a:	9a01      	ldr	r2, [sp, #4]
 800278c:	401c      	ands	r4, r3
 800278e:	2380      	movs	r3, #128	@ 0x80
 8002790:	4694      	mov	ip, r2
 8002792:	00db      	lsls	r3, r3, #3
 8002794:	4463      	add	r3, ip
 8002796:	4a72      	ldr	r2, [pc, #456]	@ (8002960 <__aeabi_dmul+0x324>)
 8002798:	4293      	cmp	r3, r2
 800279a:	dc6b      	bgt.n	8002874 <__aeabi_dmul+0x238>
 800279c:	0762      	lsls	r2, r4, #29
 800279e:	08c0      	lsrs	r0, r0, #3
 80027a0:	0264      	lsls	r4, r4, #9
 80027a2:	055b      	lsls	r3, r3, #21
 80027a4:	4302      	orrs	r2, r0
 80027a6:	0b24      	lsrs	r4, r4, #12
 80027a8:	0d5b      	lsrs	r3, r3, #21
 80027aa:	e79d      	b.n	80026e8 <__aeabi_dmul+0xac>
 80027ac:	2190      	movs	r1, #144	@ 0x90
 80027ae:	0089      	lsls	r1, r1, #2
 80027b0:	420f      	tst	r7, r1
 80027b2:	d163      	bne.n	800287c <__aeabi_dmul+0x240>
 80027b4:	2288      	movs	r2, #136	@ 0x88
 80027b6:	423a      	tst	r2, r7
 80027b8:	d100      	bne.n	80027bc <__aeabi_dmul+0x180>
 80027ba:	e0d7      	b.n	800296c <__aeabi_dmul+0x330>
 80027bc:	9b00      	ldr	r3, [sp, #0]
 80027be:	46a2      	mov	sl, r4
 80027c0:	469b      	mov	fp, r3
 80027c2:	4681      	mov	r9, r0
 80027c4:	9602      	str	r6, [sp, #8]
 80027c6:	e7bf      	b.n	8002748 <__aeabi_dmul+0x10c>
 80027c8:	0023      	movs	r3, r4
 80027ca:	4333      	orrs	r3, r6
 80027cc:	d100      	bne.n	80027d0 <__aeabi_dmul+0x194>
 80027ce:	e07f      	b.n	80028d0 <__aeabi_dmul+0x294>
 80027d0:	2c00      	cmp	r4, #0
 80027d2:	d100      	bne.n	80027d6 <__aeabi_dmul+0x19a>
 80027d4:	e1ad      	b.n	8002b32 <__aeabi_dmul+0x4f6>
 80027d6:	0020      	movs	r0, r4
 80027d8:	f000 ff10 	bl	80035fc <__clzsi2>
 80027dc:	0002      	movs	r2, r0
 80027de:	0003      	movs	r3, r0
 80027e0:	3a0b      	subs	r2, #11
 80027e2:	201d      	movs	r0, #29
 80027e4:	0019      	movs	r1, r3
 80027e6:	1a82      	subs	r2, r0, r2
 80027e8:	0030      	movs	r0, r6
 80027ea:	3908      	subs	r1, #8
 80027ec:	40d0      	lsrs	r0, r2
 80027ee:	408c      	lsls	r4, r1
 80027f0:	4304      	orrs	r4, r0
 80027f2:	0030      	movs	r0, r6
 80027f4:	4088      	lsls	r0, r1
 80027f6:	4a5b      	ldr	r2, [pc, #364]	@ (8002964 <__aeabi_dmul+0x328>)
 80027f8:	1aeb      	subs	r3, r5, r3
 80027fa:	4694      	mov	ip, r2
 80027fc:	4463      	add	r3, ip
 80027fe:	1c5a      	adds	r2, r3, #1
 8002800:	9201      	str	r2, [sp, #4]
 8002802:	4642      	mov	r2, r8
 8002804:	2600      	movs	r6, #0
 8002806:	2a0a      	cmp	r2, #10
 8002808:	dc00      	bgt.n	800280c <__aeabi_dmul+0x1d0>
 800280a:	e75a      	b.n	80026c2 <__aeabi_dmul+0x86>
 800280c:	e79c      	b.n	8002748 <__aeabi_dmul+0x10c>
 800280e:	4653      	mov	r3, sl
 8002810:	4303      	orrs	r3, r0
 8002812:	4699      	mov	r9, r3
 8002814:	d054      	beq.n	80028c0 <__aeabi_dmul+0x284>
 8002816:	4653      	mov	r3, sl
 8002818:	2b00      	cmp	r3, #0
 800281a:	d100      	bne.n	800281e <__aeabi_dmul+0x1e2>
 800281c:	e177      	b.n	8002b0e <__aeabi_dmul+0x4d2>
 800281e:	4650      	mov	r0, sl
 8002820:	f000 feec 	bl	80035fc <__clzsi2>
 8002824:	230b      	movs	r3, #11
 8002826:	425b      	negs	r3, r3
 8002828:	469c      	mov	ip, r3
 800282a:	0002      	movs	r2, r0
 800282c:	4484      	add	ip, r0
 800282e:	0011      	movs	r1, r2
 8002830:	4650      	mov	r0, sl
 8002832:	3908      	subs	r1, #8
 8002834:	4088      	lsls	r0, r1
 8002836:	231d      	movs	r3, #29
 8002838:	4680      	mov	r8, r0
 800283a:	4660      	mov	r0, ip
 800283c:	1a1b      	subs	r3, r3, r0
 800283e:	0020      	movs	r0, r4
 8002840:	40d8      	lsrs	r0, r3
 8002842:	0003      	movs	r3, r0
 8002844:	4640      	mov	r0, r8
 8002846:	4303      	orrs	r3, r0
 8002848:	469a      	mov	sl, r3
 800284a:	0023      	movs	r3, r4
 800284c:	408b      	lsls	r3, r1
 800284e:	4699      	mov	r9, r3
 8002850:	2300      	movs	r3, #0
 8002852:	4d44      	ldr	r5, [pc, #272]	@ (8002964 <__aeabi_dmul+0x328>)
 8002854:	4698      	mov	r8, r3
 8002856:	1aad      	subs	r5, r5, r2
 8002858:	9302      	str	r3, [sp, #8]
 800285a:	e715      	b.n	8002688 <__aeabi_dmul+0x4c>
 800285c:	4652      	mov	r2, sl
 800285e:	4302      	orrs	r2, r0
 8002860:	4691      	mov	r9, r2
 8002862:	d126      	bne.n	80028b2 <__aeabi_dmul+0x276>
 8002864:	2200      	movs	r2, #0
 8002866:	001d      	movs	r5, r3
 8002868:	2302      	movs	r3, #2
 800286a:	4692      	mov	sl, r2
 800286c:	3208      	adds	r2, #8
 800286e:	4690      	mov	r8, r2
 8002870:	9302      	str	r3, [sp, #8]
 8002872:	e709      	b.n	8002688 <__aeabi_dmul+0x4c>
 8002874:	2400      	movs	r4, #0
 8002876:	2200      	movs	r2, #0
 8002878:	4b35      	ldr	r3, [pc, #212]	@ (8002950 <__aeabi_dmul+0x314>)
 800287a:	e735      	b.n	80026e8 <__aeabi_dmul+0xac>
 800287c:	2300      	movs	r3, #0
 800287e:	2480      	movs	r4, #128	@ 0x80
 8002880:	469b      	mov	fp, r3
 8002882:	0324      	lsls	r4, r4, #12
 8002884:	4b32      	ldr	r3, [pc, #200]	@ (8002950 <__aeabi_dmul+0x314>)
 8002886:	e72f      	b.n	80026e8 <__aeabi_dmul+0xac>
 8002888:	2202      	movs	r2, #2
 800288a:	4641      	mov	r1, r8
 800288c:	4311      	orrs	r1, r2
 800288e:	2280      	movs	r2, #128	@ 0x80
 8002890:	0112      	lsls	r2, r2, #4
 8002892:	4694      	mov	ip, r2
 8002894:	002a      	movs	r2, r5
 8002896:	4462      	add	r2, ip
 8002898:	4688      	mov	r8, r1
 800289a:	9201      	str	r2, [sp, #4]
 800289c:	290a      	cmp	r1, #10
 800289e:	dd00      	ble.n	80028a2 <__aeabi_dmul+0x266>
 80028a0:	e752      	b.n	8002748 <__aeabi_dmul+0x10c>
 80028a2:	465a      	mov	r2, fp
 80028a4:	2000      	movs	r0, #0
 80028a6:	9900      	ldr	r1, [sp, #0]
 80028a8:	0004      	movs	r4, r0
 80028aa:	404a      	eors	r2, r1
 80028ac:	4693      	mov	fp, r2
 80028ae:	2602      	movs	r6, #2
 80028b0:	e70b      	b.n	80026ca <__aeabi_dmul+0x8e>
 80028b2:	220c      	movs	r2, #12
 80028b4:	001d      	movs	r5, r3
 80028b6:	2303      	movs	r3, #3
 80028b8:	4681      	mov	r9, r0
 80028ba:	4690      	mov	r8, r2
 80028bc:	9302      	str	r3, [sp, #8]
 80028be:	e6e3      	b.n	8002688 <__aeabi_dmul+0x4c>
 80028c0:	2300      	movs	r3, #0
 80028c2:	469a      	mov	sl, r3
 80028c4:	3304      	adds	r3, #4
 80028c6:	4698      	mov	r8, r3
 80028c8:	3b03      	subs	r3, #3
 80028ca:	2500      	movs	r5, #0
 80028cc:	9302      	str	r3, [sp, #8]
 80028ce:	e6db      	b.n	8002688 <__aeabi_dmul+0x4c>
 80028d0:	4642      	mov	r2, r8
 80028d2:	3301      	adds	r3, #1
 80028d4:	431a      	orrs	r2, r3
 80028d6:	002b      	movs	r3, r5
 80028d8:	4690      	mov	r8, r2
 80028da:	1c5a      	adds	r2, r3, #1
 80028dc:	9201      	str	r2, [sp, #4]
 80028de:	4642      	mov	r2, r8
 80028e0:	2400      	movs	r4, #0
 80028e2:	2000      	movs	r0, #0
 80028e4:	2601      	movs	r6, #1
 80028e6:	2a0a      	cmp	r2, #10
 80028e8:	dc00      	bgt.n	80028ec <__aeabi_dmul+0x2b0>
 80028ea:	e6ea      	b.n	80026c2 <__aeabi_dmul+0x86>
 80028ec:	e72c      	b.n	8002748 <__aeabi_dmul+0x10c>
 80028ee:	2201      	movs	r2, #1
 80028f0:	1ad2      	subs	r2, r2, r3
 80028f2:	2a38      	cmp	r2, #56	@ 0x38
 80028f4:	dd00      	ble.n	80028f8 <__aeabi_dmul+0x2bc>
 80028f6:	e6f4      	b.n	80026e2 <__aeabi_dmul+0xa6>
 80028f8:	2a1f      	cmp	r2, #31
 80028fa:	dc00      	bgt.n	80028fe <__aeabi_dmul+0x2c2>
 80028fc:	e12a      	b.n	8002b54 <__aeabi_dmul+0x518>
 80028fe:	211f      	movs	r1, #31
 8002900:	4249      	negs	r1, r1
 8002902:	1acb      	subs	r3, r1, r3
 8002904:	0021      	movs	r1, r4
 8002906:	40d9      	lsrs	r1, r3
 8002908:	000b      	movs	r3, r1
 800290a:	2a20      	cmp	r2, #32
 800290c:	d005      	beq.n	800291a <__aeabi_dmul+0x2de>
 800290e:	4a16      	ldr	r2, [pc, #88]	@ (8002968 <__aeabi_dmul+0x32c>)
 8002910:	9d01      	ldr	r5, [sp, #4]
 8002912:	4694      	mov	ip, r2
 8002914:	4465      	add	r5, ip
 8002916:	40ac      	lsls	r4, r5
 8002918:	4320      	orrs	r0, r4
 800291a:	1e42      	subs	r2, r0, #1
 800291c:	4190      	sbcs	r0, r2
 800291e:	4318      	orrs	r0, r3
 8002920:	2307      	movs	r3, #7
 8002922:	0019      	movs	r1, r3
 8002924:	2400      	movs	r4, #0
 8002926:	4001      	ands	r1, r0
 8002928:	4203      	tst	r3, r0
 800292a:	d00c      	beq.n	8002946 <__aeabi_dmul+0x30a>
 800292c:	230f      	movs	r3, #15
 800292e:	4003      	ands	r3, r0
 8002930:	2b04      	cmp	r3, #4
 8002932:	d100      	bne.n	8002936 <__aeabi_dmul+0x2fa>
 8002934:	e140      	b.n	8002bb8 <__aeabi_dmul+0x57c>
 8002936:	1d03      	adds	r3, r0, #4
 8002938:	4283      	cmp	r3, r0
 800293a:	41a4      	sbcs	r4, r4
 800293c:	0018      	movs	r0, r3
 800293e:	4264      	negs	r4, r4
 8002940:	0761      	lsls	r1, r4, #29
 8002942:	0264      	lsls	r4, r4, #9
 8002944:	0b24      	lsrs	r4, r4, #12
 8002946:	08c2      	lsrs	r2, r0, #3
 8002948:	2300      	movs	r3, #0
 800294a:	430a      	orrs	r2, r1
 800294c:	e6cc      	b.n	80026e8 <__aeabi_dmul+0xac>
 800294e:	46c0      	nop			@ (mov r8, r8)
 8002950:	000007ff 	.word	0x000007ff
 8002954:	fffffc01 	.word	0xfffffc01
 8002958:	000003ff 	.word	0x000003ff
 800295c:	feffffff 	.word	0xfeffffff
 8002960:	000007fe 	.word	0x000007fe
 8002964:	fffffc0d 	.word	0xfffffc0d
 8002968:	0000043e 	.word	0x0000043e
 800296c:	4649      	mov	r1, r9
 800296e:	464a      	mov	r2, r9
 8002970:	0409      	lsls	r1, r1, #16
 8002972:	0c09      	lsrs	r1, r1, #16
 8002974:	000d      	movs	r5, r1
 8002976:	0c16      	lsrs	r6, r2, #16
 8002978:	0c02      	lsrs	r2, r0, #16
 800297a:	0400      	lsls	r0, r0, #16
 800297c:	0c00      	lsrs	r0, r0, #16
 800297e:	4345      	muls	r5, r0
 8002980:	46ac      	mov	ip, r5
 8002982:	0005      	movs	r5, r0
 8002984:	4375      	muls	r5, r6
 8002986:	46a8      	mov	r8, r5
 8002988:	0015      	movs	r5, r2
 800298a:	000f      	movs	r7, r1
 800298c:	4375      	muls	r5, r6
 800298e:	9200      	str	r2, [sp, #0]
 8002990:	9502      	str	r5, [sp, #8]
 8002992:	002a      	movs	r2, r5
 8002994:	9d00      	ldr	r5, [sp, #0]
 8002996:	436f      	muls	r7, r5
 8002998:	4665      	mov	r5, ip
 800299a:	0c2d      	lsrs	r5, r5, #16
 800299c:	46a9      	mov	r9, r5
 800299e:	4447      	add	r7, r8
 80029a0:	444f      	add	r7, r9
 80029a2:	45b8      	cmp	r8, r7
 80029a4:	d905      	bls.n	80029b2 <__aeabi_dmul+0x376>
 80029a6:	0015      	movs	r5, r2
 80029a8:	2280      	movs	r2, #128	@ 0x80
 80029aa:	0252      	lsls	r2, r2, #9
 80029ac:	4690      	mov	r8, r2
 80029ae:	4445      	add	r5, r8
 80029b0:	9502      	str	r5, [sp, #8]
 80029b2:	0c3d      	lsrs	r5, r7, #16
 80029b4:	9503      	str	r5, [sp, #12]
 80029b6:	4665      	mov	r5, ip
 80029b8:	042d      	lsls	r5, r5, #16
 80029ba:	043f      	lsls	r7, r7, #16
 80029bc:	0c2d      	lsrs	r5, r5, #16
 80029be:	46ac      	mov	ip, r5
 80029c0:	003d      	movs	r5, r7
 80029c2:	4465      	add	r5, ip
 80029c4:	9504      	str	r5, [sp, #16]
 80029c6:	0c25      	lsrs	r5, r4, #16
 80029c8:	0424      	lsls	r4, r4, #16
 80029ca:	0c24      	lsrs	r4, r4, #16
 80029cc:	46ac      	mov	ip, r5
 80029ce:	0025      	movs	r5, r4
 80029d0:	4375      	muls	r5, r6
 80029d2:	46a8      	mov	r8, r5
 80029d4:	4665      	mov	r5, ip
 80029d6:	000f      	movs	r7, r1
 80029d8:	4369      	muls	r1, r5
 80029da:	4441      	add	r1, r8
 80029dc:	4689      	mov	r9, r1
 80029de:	4367      	muls	r7, r4
 80029e0:	0c39      	lsrs	r1, r7, #16
 80029e2:	4449      	add	r1, r9
 80029e4:	436e      	muls	r6, r5
 80029e6:	4588      	cmp	r8, r1
 80029e8:	d903      	bls.n	80029f2 <__aeabi_dmul+0x3b6>
 80029ea:	2280      	movs	r2, #128	@ 0x80
 80029ec:	0252      	lsls	r2, r2, #9
 80029ee:	4690      	mov	r8, r2
 80029f0:	4446      	add	r6, r8
 80029f2:	0c0d      	lsrs	r5, r1, #16
 80029f4:	46a8      	mov	r8, r5
 80029f6:	0035      	movs	r5, r6
 80029f8:	4445      	add	r5, r8
 80029fa:	9505      	str	r5, [sp, #20]
 80029fc:	9d03      	ldr	r5, [sp, #12]
 80029fe:	043f      	lsls	r7, r7, #16
 8002a00:	46a8      	mov	r8, r5
 8002a02:	0c3f      	lsrs	r7, r7, #16
 8002a04:	0409      	lsls	r1, r1, #16
 8002a06:	19c9      	adds	r1, r1, r7
 8002a08:	4488      	add	r8, r1
 8002a0a:	4645      	mov	r5, r8
 8002a0c:	9503      	str	r5, [sp, #12]
 8002a0e:	4655      	mov	r5, sl
 8002a10:	042e      	lsls	r6, r5, #16
 8002a12:	0c36      	lsrs	r6, r6, #16
 8002a14:	0c2f      	lsrs	r7, r5, #16
 8002a16:	0035      	movs	r5, r6
 8002a18:	4345      	muls	r5, r0
 8002a1a:	4378      	muls	r0, r7
 8002a1c:	4681      	mov	r9, r0
 8002a1e:	0038      	movs	r0, r7
 8002a20:	46a8      	mov	r8, r5
 8002a22:	0c2d      	lsrs	r5, r5, #16
 8002a24:	46aa      	mov	sl, r5
 8002a26:	9a00      	ldr	r2, [sp, #0]
 8002a28:	4350      	muls	r0, r2
 8002a2a:	4372      	muls	r2, r6
 8002a2c:	444a      	add	r2, r9
 8002a2e:	4452      	add	r2, sl
 8002a30:	4591      	cmp	r9, r2
 8002a32:	d903      	bls.n	8002a3c <__aeabi_dmul+0x400>
 8002a34:	2580      	movs	r5, #128	@ 0x80
 8002a36:	026d      	lsls	r5, r5, #9
 8002a38:	46a9      	mov	r9, r5
 8002a3a:	4448      	add	r0, r9
 8002a3c:	0c15      	lsrs	r5, r2, #16
 8002a3e:	46a9      	mov	r9, r5
 8002a40:	4645      	mov	r5, r8
 8002a42:	042d      	lsls	r5, r5, #16
 8002a44:	0c2d      	lsrs	r5, r5, #16
 8002a46:	46a8      	mov	r8, r5
 8002a48:	4665      	mov	r5, ip
 8002a4a:	437d      	muls	r5, r7
 8002a4c:	0412      	lsls	r2, r2, #16
 8002a4e:	4448      	add	r0, r9
 8002a50:	4490      	add	r8, r2
 8002a52:	46a9      	mov	r9, r5
 8002a54:	0032      	movs	r2, r6
 8002a56:	4665      	mov	r5, ip
 8002a58:	4362      	muls	r2, r4
 8002a5a:	436e      	muls	r6, r5
 8002a5c:	437c      	muls	r4, r7
 8002a5e:	0c17      	lsrs	r7, r2, #16
 8002a60:	1936      	adds	r6, r6, r4
 8002a62:	19bf      	adds	r7, r7, r6
 8002a64:	42bc      	cmp	r4, r7
 8002a66:	d903      	bls.n	8002a70 <__aeabi_dmul+0x434>
 8002a68:	2480      	movs	r4, #128	@ 0x80
 8002a6a:	0264      	lsls	r4, r4, #9
 8002a6c:	46a4      	mov	ip, r4
 8002a6e:	44e1      	add	r9, ip
 8002a70:	9c02      	ldr	r4, [sp, #8]
 8002a72:	9e03      	ldr	r6, [sp, #12]
 8002a74:	46a4      	mov	ip, r4
 8002a76:	9d05      	ldr	r5, [sp, #20]
 8002a78:	4466      	add	r6, ip
 8002a7a:	428e      	cmp	r6, r1
 8002a7c:	4189      	sbcs	r1, r1
 8002a7e:	46ac      	mov	ip, r5
 8002a80:	0412      	lsls	r2, r2, #16
 8002a82:	043c      	lsls	r4, r7, #16
 8002a84:	0c12      	lsrs	r2, r2, #16
 8002a86:	18a2      	adds	r2, r4, r2
 8002a88:	4462      	add	r2, ip
 8002a8a:	4249      	negs	r1, r1
 8002a8c:	1854      	adds	r4, r2, r1
 8002a8e:	4446      	add	r6, r8
 8002a90:	46a4      	mov	ip, r4
 8002a92:	4546      	cmp	r6, r8
 8002a94:	41a4      	sbcs	r4, r4
 8002a96:	4682      	mov	sl, r0
 8002a98:	4264      	negs	r4, r4
 8002a9a:	46a0      	mov	r8, r4
 8002a9c:	42aa      	cmp	r2, r5
 8002a9e:	4192      	sbcs	r2, r2
 8002aa0:	458c      	cmp	ip, r1
 8002aa2:	4189      	sbcs	r1, r1
 8002aa4:	44e2      	add	sl, ip
 8002aa6:	44d0      	add	r8, sl
 8002aa8:	4249      	negs	r1, r1
 8002aaa:	4252      	negs	r2, r2
 8002aac:	430a      	orrs	r2, r1
 8002aae:	45a0      	cmp	r8, r4
 8002ab0:	41a4      	sbcs	r4, r4
 8002ab2:	4582      	cmp	sl, r0
 8002ab4:	4189      	sbcs	r1, r1
 8002ab6:	4264      	negs	r4, r4
 8002ab8:	4249      	negs	r1, r1
 8002aba:	430c      	orrs	r4, r1
 8002abc:	4641      	mov	r1, r8
 8002abe:	0c3f      	lsrs	r7, r7, #16
 8002ac0:	19d2      	adds	r2, r2, r7
 8002ac2:	1912      	adds	r2, r2, r4
 8002ac4:	0dcc      	lsrs	r4, r1, #23
 8002ac6:	9904      	ldr	r1, [sp, #16]
 8002ac8:	0270      	lsls	r0, r6, #9
 8002aca:	4308      	orrs	r0, r1
 8002acc:	1e41      	subs	r1, r0, #1
 8002ace:	4188      	sbcs	r0, r1
 8002ad0:	4641      	mov	r1, r8
 8002ad2:	444a      	add	r2, r9
 8002ad4:	0df6      	lsrs	r6, r6, #23
 8002ad6:	0252      	lsls	r2, r2, #9
 8002ad8:	4330      	orrs	r0, r6
 8002ada:	0249      	lsls	r1, r1, #9
 8002adc:	4314      	orrs	r4, r2
 8002ade:	4308      	orrs	r0, r1
 8002ae0:	01d2      	lsls	r2, r2, #7
 8002ae2:	d535      	bpl.n	8002b50 <__aeabi_dmul+0x514>
 8002ae4:	2201      	movs	r2, #1
 8002ae6:	0843      	lsrs	r3, r0, #1
 8002ae8:	4002      	ands	r2, r0
 8002aea:	4313      	orrs	r3, r2
 8002aec:	07e0      	lsls	r0, r4, #31
 8002aee:	4318      	orrs	r0, r3
 8002af0:	0864      	lsrs	r4, r4, #1
 8002af2:	e634      	b.n	800275e <__aeabi_dmul+0x122>
 8002af4:	9b00      	ldr	r3, [sp, #0]
 8002af6:	46a2      	mov	sl, r4
 8002af8:	469b      	mov	fp, r3
 8002afa:	4681      	mov	r9, r0
 8002afc:	2480      	movs	r4, #128	@ 0x80
 8002afe:	4653      	mov	r3, sl
 8002b00:	0324      	lsls	r4, r4, #12
 8002b02:	431c      	orrs	r4, r3
 8002b04:	0324      	lsls	r4, r4, #12
 8002b06:	464a      	mov	r2, r9
 8002b08:	4b2e      	ldr	r3, [pc, #184]	@ (8002bc4 <__aeabi_dmul+0x588>)
 8002b0a:	0b24      	lsrs	r4, r4, #12
 8002b0c:	e5ec      	b.n	80026e8 <__aeabi_dmul+0xac>
 8002b0e:	f000 fd75 	bl	80035fc <__clzsi2>
 8002b12:	2315      	movs	r3, #21
 8002b14:	469c      	mov	ip, r3
 8002b16:	4484      	add	ip, r0
 8002b18:	0002      	movs	r2, r0
 8002b1a:	4663      	mov	r3, ip
 8002b1c:	3220      	adds	r2, #32
 8002b1e:	2b1c      	cmp	r3, #28
 8002b20:	dc00      	bgt.n	8002b24 <__aeabi_dmul+0x4e8>
 8002b22:	e684      	b.n	800282e <__aeabi_dmul+0x1f2>
 8002b24:	2300      	movs	r3, #0
 8002b26:	4699      	mov	r9, r3
 8002b28:	0023      	movs	r3, r4
 8002b2a:	3808      	subs	r0, #8
 8002b2c:	4083      	lsls	r3, r0
 8002b2e:	469a      	mov	sl, r3
 8002b30:	e68e      	b.n	8002850 <__aeabi_dmul+0x214>
 8002b32:	f000 fd63 	bl	80035fc <__clzsi2>
 8002b36:	0002      	movs	r2, r0
 8002b38:	0003      	movs	r3, r0
 8002b3a:	3215      	adds	r2, #21
 8002b3c:	3320      	adds	r3, #32
 8002b3e:	2a1c      	cmp	r2, #28
 8002b40:	dc00      	bgt.n	8002b44 <__aeabi_dmul+0x508>
 8002b42:	e64e      	b.n	80027e2 <__aeabi_dmul+0x1a6>
 8002b44:	0002      	movs	r2, r0
 8002b46:	0034      	movs	r4, r6
 8002b48:	3a08      	subs	r2, #8
 8002b4a:	2000      	movs	r0, #0
 8002b4c:	4094      	lsls	r4, r2
 8002b4e:	e652      	b.n	80027f6 <__aeabi_dmul+0x1ba>
 8002b50:	9301      	str	r3, [sp, #4]
 8002b52:	e604      	b.n	800275e <__aeabi_dmul+0x122>
 8002b54:	4b1c      	ldr	r3, [pc, #112]	@ (8002bc8 <__aeabi_dmul+0x58c>)
 8002b56:	0021      	movs	r1, r4
 8002b58:	469c      	mov	ip, r3
 8002b5a:	0003      	movs	r3, r0
 8002b5c:	9d01      	ldr	r5, [sp, #4]
 8002b5e:	40d3      	lsrs	r3, r2
 8002b60:	4465      	add	r5, ip
 8002b62:	40a9      	lsls	r1, r5
 8002b64:	4319      	orrs	r1, r3
 8002b66:	0003      	movs	r3, r0
 8002b68:	40ab      	lsls	r3, r5
 8002b6a:	1e58      	subs	r0, r3, #1
 8002b6c:	4183      	sbcs	r3, r0
 8002b6e:	4319      	orrs	r1, r3
 8002b70:	0008      	movs	r0, r1
 8002b72:	40d4      	lsrs	r4, r2
 8002b74:	074b      	lsls	r3, r1, #29
 8002b76:	d009      	beq.n	8002b8c <__aeabi_dmul+0x550>
 8002b78:	230f      	movs	r3, #15
 8002b7a:	400b      	ands	r3, r1
 8002b7c:	2b04      	cmp	r3, #4
 8002b7e:	d005      	beq.n	8002b8c <__aeabi_dmul+0x550>
 8002b80:	1d0b      	adds	r3, r1, #4
 8002b82:	428b      	cmp	r3, r1
 8002b84:	4180      	sbcs	r0, r0
 8002b86:	4240      	negs	r0, r0
 8002b88:	1824      	adds	r4, r4, r0
 8002b8a:	0018      	movs	r0, r3
 8002b8c:	0223      	lsls	r3, r4, #8
 8002b8e:	d400      	bmi.n	8002b92 <__aeabi_dmul+0x556>
 8002b90:	e6d6      	b.n	8002940 <__aeabi_dmul+0x304>
 8002b92:	2301      	movs	r3, #1
 8002b94:	2400      	movs	r4, #0
 8002b96:	2200      	movs	r2, #0
 8002b98:	e5a6      	b.n	80026e8 <__aeabi_dmul+0xac>
 8002b9a:	290f      	cmp	r1, #15
 8002b9c:	d1aa      	bne.n	8002af4 <__aeabi_dmul+0x4b8>
 8002b9e:	2380      	movs	r3, #128	@ 0x80
 8002ba0:	4652      	mov	r2, sl
 8002ba2:	031b      	lsls	r3, r3, #12
 8002ba4:	421a      	tst	r2, r3
 8002ba6:	d0a9      	beq.n	8002afc <__aeabi_dmul+0x4c0>
 8002ba8:	421c      	tst	r4, r3
 8002baa:	d1a7      	bne.n	8002afc <__aeabi_dmul+0x4c0>
 8002bac:	431c      	orrs	r4, r3
 8002bae:	9b00      	ldr	r3, [sp, #0]
 8002bb0:	0002      	movs	r2, r0
 8002bb2:	469b      	mov	fp, r3
 8002bb4:	4b03      	ldr	r3, [pc, #12]	@ (8002bc4 <__aeabi_dmul+0x588>)
 8002bb6:	e597      	b.n	80026e8 <__aeabi_dmul+0xac>
 8002bb8:	2400      	movs	r4, #0
 8002bba:	e6c1      	b.n	8002940 <__aeabi_dmul+0x304>
 8002bbc:	2400      	movs	r4, #0
 8002bbe:	4b01      	ldr	r3, [pc, #4]	@ (8002bc4 <__aeabi_dmul+0x588>)
 8002bc0:	0022      	movs	r2, r4
 8002bc2:	e591      	b.n	80026e8 <__aeabi_dmul+0xac>
 8002bc4:	000007ff 	.word	0x000007ff
 8002bc8:	0000041e 	.word	0x0000041e

08002bcc <__aeabi_dsub>:
 8002bcc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002bce:	464e      	mov	r6, r9
 8002bd0:	4645      	mov	r5, r8
 8002bd2:	46de      	mov	lr, fp
 8002bd4:	4657      	mov	r7, sl
 8002bd6:	b5e0      	push	{r5, r6, r7, lr}
 8002bd8:	b085      	sub	sp, #20
 8002bda:	9000      	str	r0, [sp, #0]
 8002bdc:	9101      	str	r1, [sp, #4]
 8002bde:	030c      	lsls	r4, r1, #12
 8002be0:	004f      	lsls	r7, r1, #1
 8002be2:	0fce      	lsrs	r6, r1, #31
 8002be4:	0a61      	lsrs	r1, r4, #9
 8002be6:	9c00      	ldr	r4, [sp, #0]
 8002be8:	46b0      	mov	r8, r6
 8002bea:	0f64      	lsrs	r4, r4, #29
 8002bec:	430c      	orrs	r4, r1
 8002bee:	9900      	ldr	r1, [sp, #0]
 8002bf0:	0d7f      	lsrs	r7, r7, #21
 8002bf2:	00c8      	lsls	r0, r1, #3
 8002bf4:	0011      	movs	r1, r2
 8002bf6:	001a      	movs	r2, r3
 8002bf8:	031b      	lsls	r3, r3, #12
 8002bfa:	469c      	mov	ip, r3
 8002bfc:	9100      	str	r1, [sp, #0]
 8002bfe:	9201      	str	r2, [sp, #4]
 8002c00:	0051      	lsls	r1, r2, #1
 8002c02:	0d4b      	lsrs	r3, r1, #21
 8002c04:	4699      	mov	r9, r3
 8002c06:	9b01      	ldr	r3, [sp, #4]
 8002c08:	9d00      	ldr	r5, [sp, #0]
 8002c0a:	0fd9      	lsrs	r1, r3, #31
 8002c0c:	4663      	mov	r3, ip
 8002c0e:	0f6a      	lsrs	r2, r5, #29
 8002c10:	0a5b      	lsrs	r3, r3, #9
 8002c12:	4313      	orrs	r3, r2
 8002c14:	00ea      	lsls	r2, r5, #3
 8002c16:	4694      	mov	ip, r2
 8002c18:	4693      	mov	fp, r2
 8002c1a:	4ac1      	ldr	r2, [pc, #772]	@ (8002f20 <__aeabi_dsub+0x354>)
 8002c1c:	9003      	str	r0, [sp, #12]
 8002c1e:	9302      	str	r3, [sp, #8]
 8002c20:	4591      	cmp	r9, r2
 8002c22:	d100      	bne.n	8002c26 <__aeabi_dsub+0x5a>
 8002c24:	e0cd      	b.n	8002dc2 <__aeabi_dsub+0x1f6>
 8002c26:	2501      	movs	r5, #1
 8002c28:	4069      	eors	r1, r5
 8002c2a:	464d      	mov	r5, r9
 8002c2c:	1b7d      	subs	r5, r7, r5
 8002c2e:	46aa      	mov	sl, r5
 8002c30:	428e      	cmp	r6, r1
 8002c32:	d100      	bne.n	8002c36 <__aeabi_dsub+0x6a>
 8002c34:	e080      	b.n	8002d38 <__aeabi_dsub+0x16c>
 8002c36:	2d00      	cmp	r5, #0
 8002c38:	dc00      	bgt.n	8002c3c <__aeabi_dsub+0x70>
 8002c3a:	e335      	b.n	80032a8 <__aeabi_dsub+0x6dc>
 8002c3c:	4649      	mov	r1, r9
 8002c3e:	2900      	cmp	r1, #0
 8002c40:	d100      	bne.n	8002c44 <__aeabi_dsub+0x78>
 8002c42:	e0df      	b.n	8002e04 <__aeabi_dsub+0x238>
 8002c44:	4297      	cmp	r7, r2
 8002c46:	d100      	bne.n	8002c4a <__aeabi_dsub+0x7e>
 8002c48:	e194      	b.n	8002f74 <__aeabi_dsub+0x3a8>
 8002c4a:	4652      	mov	r2, sl
 8002c4c:	2501      	movs	r5, #1
 8002c4e:	2a38      	cmp	r2, #56	@ 0x38
 8002c50:	dc19      	bgt.n	8002c86 <__aeabi_dsub+0xba>
 8002c52:	2280      	movs	r2, #128	@ 0x80
 8002c54:	9b02      	ldr	r3, [sp, #8]
 8002c56:	0412      	lsls	r2, r2, #16
 8002c58:	4313      	orrs	r3, r2
 8002c5a:	9302      	str	r3, [sp, #8]
 8002c5c:	4652      	mov	r2, sl
 8002c5e:	2a1f      	cmp	r2, #31
 8002c60:	dd00      	ble.n	8002c64 <__aeabi_dsub+0x98>
 8002c62:	e1e3      	b.n	800302c <__aeabi_dsub+0x460>
 8002c64:	4653      	mov	r3, sl
 8002c66:	2220      	movs	r2, #32
 8002c68:	4661      	mov	r1, ip
 8002c6a:	9d02      	ldr	r5, [sp, #8]
 8002c6c:	1ad2      	subs	r2, r2, r3
 8002c6e:	4095      	lsls	r5, r2
 8002c70:	40d9      	lsrs	r1, r3
 8002c72:	430d      	orrs	r5, r1
 8002c74:	4661      	mov	r1, ip
 8002c76:	4091      	lsls	r1, r2
 8002c78:	000a      	movs	r2, r1
 8002c7a:	1e51      	subs	r1, r2, #1
 8002c7c:	418a      	sbcs	r2, r1
 8002c7e:	4315      	orrs	r5, r2
 8002c80:	9a02      	ldr	r2, [sp, #8]
 8002c82:	40da      	lsrs	r2, r3
 8002c84:	1aa4      	subs	r4, r4, r2
 8002c86:	1b45      	subs	r5, r0, r5
 8002c88:	42a8      	cmp	r0, r5
 8002c8a:	4180      	sbcs	r0, r0
 8002c8c:	4240      	negs	r0, r0
 8002c8e:	1a24      	subs	r4, r4, r0
 8002c90:	0223      	lsls	r3, r4, #8
 8002c92:	d400      	bmi.n	8002c96 <__aeabi_dsub+0xca>
 8002c94:	e13d      	b.n	8002f12 <__aeabi_dsub+0x346>
 8002c96:	0264      	lsls	r4, r4, #9
 8002c98:	0a64      	lsrs	r4, r4, #9
 8002c9a:	2c00      	cmp	r4, #0
 8002c9c:	d100      	bne.n	8002ca0 <__aeabi_dsub+0xd4>
 8002c9e:	e147      	b.n	8002f30 <__aeabi_dsub+0x364>
 8002ca0:	0020      	movs	r0, r4
 8002ca2:	f000 fcab 	bl	80035fc <__clzsi2>
 8002ca6:	0003      	movs	r3, r0
 8002ca8:	3b08      	subs	r3, #8
 8002caa:	2120      	movs	r1, #32
 8002cac:	0028      	movs	r0, r5
 8002cae:	1aca      	subs	r2, r1, r3
 8002cb0:	40d0      	lsrs	r0, r2
 8002cb2:	409c      	lsls	r4, r3
 8002cb4:	0002      	movs	r2, r0
 8002cb6:	409d      	lsls	r5, r3
 8002cb8:	4322      	orrs	r2, r4
 8002cba:	429f      	cmp	r7, r3
 8002cbc:	dd00      	ble.n	8002cc0 <__aeabi_dsub+0xf4>
 8002cbe:	e177      	b.n	8002fb0 <__aeabi_dsub+0x3e4>
 8002cc0:	1bd8      	subs	r0, r3, r7
 8002cc2:	3001      	adds	r0, #1
 8002cc4:	1a09      	subs	r1, r1, r0
 8002cc6:	002c      	movs	r4, r5
 8002cc8:	408d      	lsls	r5, r1
 8002cca:	40c4      	lsrs	r4, r0
 8002ccc:	1e6b      	subs	r3, r5, #1
 8002cce:	419d      	sbcs	r5, r3
 8002cd0:	0013      	movs	r3, r2
 8002cd2:	40c2      	lsrs	r2, r0
 8002cd4:	408b      	lsls	r3, r1
 8002cd6:	4325      	orrs	r5, r4
 8002cd8:	2700      	movs	r7, #0
 8002cda:	0014      	movs	r4, r2
 8002cdc:	431d      	orrs	r5, r3
 8002cde:	076b      	lsls	r3, r5, #29
 8002ce0:	d009      	beq.n	8002cf6 <__aeabi_dsub+0x12a>
 8002ce2:	230f      	movs	r3, #15
 8002ce4:	402b      	ands	r3, r5
 8002ce6:	2b04      	cmp	r3, #4
 8002ce8:	d005      	beq.n	8002cf6 <__aeabi_dsub+0x12a>
 8002cea:	1d2b      	adds	r3, r5, #4
 8002cec:	42ab      	cmp	r3, r5
 8002cee:	41ad      	sbcs	r5, r5
 8002cf0:	426d      	negs	r5, r5
 8002cf2:	1964      	adds	r4, r4, r5
 8002cf4:	001d      	movs	r5, r3
 8002cf6:	0223      	lsls	r3, r4, #8
 8002cf8:	d400      	bmi.n	8002cfc <__aeabi_dsub+0x130>
 8002cfa:	e140      	b.n	8002f7e <__aeabi_dsub+0x3b2>
 8002cfc:	4a88      	ldr	r2, [pc, #544]	@ (8002f20 <__aeabi_dsub+0x354>)
 8002cfe:	3701      	adds	r7, #1
 8002d00:	4297      	cmp	r7, r2
 8002d02:	d100      	bne.n	8002d06 <__aeabi_dsub+0x13a>
 8002d04:	e101      	b.n	8002f0a <__aeabi_dsub+0x33e>
 8002d06:	2601      	movs	r6, #1
 8002d08:	4643      	mov	r3, r8
 8002d0a:	4986      	ldr	r1, [pc, #536]	@ (8002f24 <__aeabi_dsub+0x358>)
 8002d0c:	08ed      	lsrs	r5, r5, #3
 8002d0e:	4021      	ands	r1, r4
 8002d10:	074a      	lsls	r2, r1, #29
 8002d12:	432a      	orrs	r2, r5
 8002d14:	057c      	lsls	r4, r7, #21
 8002d16:	024d      	lsls	r5, r1, #9
 8002d18:	0b2d      	lsrs	r5, r5, #12
 8002d1a:	0d64      	lsrs	r4, r4, #21
 8002d1c:	401e      	ands	r6, r3
 8002d1e:	0524      	lsls	r4, r4, #20
 8002d20:	432c      	orrs	r4, r5
 8002d22:	07f6      	lsls	r6, r6, #31
 8002d24:	4334      	orrs	r4, r6
 8002d26:	0010      	movs	r0, r2
 8002d28:	0021      	movs	r1, r4
 8002d2a:	b005      	add	sp, #20
 8002d2c:	bcf0      	pop	{r4, r5, r6, r7}
 8002d2e:	46bb      	mov	fp, r7
 8002d30:	46b2      	mov	sl, r6
 8002d32:	46a9      	mov	r9, r5
 8002d34:	46a0      	mov	r8, r4
 8002d36:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002d38:	2d00      	cmp	r5, #0
 8002d3a:	dc00      	bgt.n	8002d3e <__aeabi_dsub+0x172>
 8002d3c:	e2d0      	b.n	80032e0 <__aeabi_dsub+0x714>
 8002d3e:	4649      	mov	r1, r9
 8002d40:	2900      	cmp	r1, #0
 8002d42:	d000      	beq.n	8002d46 <__aeabi_dsub+0x17a>
 8002d44:	e0d4      	b.n	8002ef0 <__aeabi_dsub+0x324>
 8002d46:	4661      	mov	r1, ip
 8002d48:	9b02      	ldr	r3, [sp, #8]
 8002d4a:	4319      	orrs	r1, r3
 8002d4c:	d100      	bne.n	8002d50 <__aeabi_dsub+0x184>
 8002d4e:	e12b      	b.n	8002fa8 <__aeabi_dsub+0x3dc>
 8002d50:	1e69      	subs	r1, r5, #1
 8002d52:	2d01      	cmp	r5, #1
 8002d54:	d100      	bne.n	8002d58 <__aeabi_dsub+0x18c>
 8002d56:	e1d9      	b.n	800310c <__aeabi_dsub+0x540>
 8002d58:	4295      	cmp	r5, r2
 8002d5a:	d100      	bne.n	8002d5e <__aeabi_dsub+0x192>
 8002d5c:	e10a      	b.n	8002f74 <__aeabi_dsub+0x3a8>
 8002d5e:	2501      	movs	r5, #1
 8002d60:	2938      	cmp	r1, #56	@ 0x38
 8002d62:	dc17      	bgt.n	8002d94 <__aeabi_dsub+0x1c8>
 8002d64:	468a      	mov	sl, r1
 8002d66:	4653      	mov	r3, sl
 8002d68:	2b1f      	cmp	r3, #31
 8002d6a:	dd00      	ble.n	8002d6e <__aeabi_dsub+0x1a2>
 8002d6c:	e1e7      	b.n	800313e <__aeabi_dsub+0x572>
 8002d6e:	2220      	movs	r2, #32
 8002d70:	1ad2      	subs	r2, r2, r3
 8002d72:	9b02      	ldr	r3, [sp, #8]
 8002d74:	4661      	mov	r1, ip
 8002d76:	4093      	lsls	r3, r2
 8002d78:	001d      	movs	r5, r3
 8002d7a:	4653      	mov	r3, sl
 8002d7c:	40d9      	lsrs	r1, r3
 8002d7e:	4663      	mov	r3, ip
 8002d80:	4093      	lsls	r3, r2
 8002d82:	001a      	movs	r2, r3
 8002d84:	430d      	orrs	r5, r1
 8002d86:	1e51      	subs	r1, r2, #1
 8002d88:	418a      	sbcs	r2, r1
 8002d8a:	4653      	mov	r3, sl
 8002d8c:	4315      	orrs	r5, r2
 8002d8e:	9a02      	ldr	r2, [sp, #8]
 8002d90:	40da      	lsrs	r2, r3
 8002d92:	18a4      	adds	r4, r4, r2
 8002d94:	182d      	adds	r5, r5, r0
 8002d96:	4285      	cmp	r5, r0
 8002d98:	4180      	sbcs	r0, r0
 8002d9a:	4240      	negs	r0, r0
 8002d9c:	1824      	adds	r4, r4, r0
 8002d9e:	0223      	lsls	r3, r4, #8
 8002da0:	d400      	bmi.n	8002da4 <__aeabi_dsub+0x1d8>
 8002da2:	e0b6      	b.n	8002f12 <__aeabi_dsub+0x346>
 8002da4:	4b5e      	ldr	r3, [pc, #376]	@ (8002f20 <__aeabi_dsub+0x354>)
 8002da6:	3701      	adds	r7, #1
 8002da8:	429f      	cmp	r7, r3
 8002daa:	d100      	bne.n	8002dae <__aeabi_dsub+0x1e2>
 8002dac:	e0ad      	b.n	8002f0a <__aeabi_dsub+0x33e>
 8002dae:	2101      	movs	r1, #1
 8002db0:	4b5c      	ldr	r3, [pc, #368]	@ (8002f24 <__aeabi_dsub+0x358>)
 8002db2:	086a      	lsrs	r2, r5, #1
 8002db4:	401c      	ands	r4, r3
 8002db6:	4029      	ands	r1, r5
 8002db8:	430a      	orrs	r2, r1
 8002dba:	07e5      	lsls	r5, r4, #31
 8002dbc:	4315      	orrs	r5, r2
 8002dbe:	0864      	lsrs	r4, r4, #1
 8002dc0:	e78d      	b.n	8002cde <__aeabi_dsub+0x112>
 8002dc2:	4a59      	ldr	r2, [pc, #356]	@ (8002f28 <__aeabi_dsub+0x35c>)
 8002dc4:	9b02      	ldr	r3, [sp, #8]
 8002dc6:	4692      	mov	sl, r2
 8002dc8:	4662      	mov	r2, ip
 8002dca:	44ba      	add	sl, r7
 8002dcc:	431a      	orrs	r2, r3
 8002dce:	d02c      	beq.n	8002e2a <__aeabi_dsub+0x25e>
 8002dd0:	428e      	cmp	r6, r1
 8002dd2:	d02e      	beq.n	8002e32 <__aeabi_dsub+0x266>
 8002dd4:	4652      	mov	r2, sl
 8002dd6:	2a00      	cmp	r2, #0
 8002dd8:	d060      	beq.n	8002e9c <__aeabi_dsub+0x2d0>
 8002dda:	2f00      	cmp	r7, #0
 8002ddc:	d100      	bne.n	8002de0 <__aeabi_dsub+0x214>
 8002dde:	e0db      	b.n	8002f98 <__aeabi_dsub+0x3cc>
 8002de0:	4663      	mov	r3, ip
 8002de2:	000e      	movs	r6, r1
 8002de4:	9c02      	ldr	r4, [sp, #8]
 8002de6:	08d8      	lsrs	r0, r3, #3
 8002de8:	0762      	lsls	r2, r4, #29
 8002dea:	4302      	orrs	r2, r0
 8002dec:	08e4      	lsrs	r4, r4, #3
 8002dee:	0013      	movs	r3, r2
 8002df0:	4323      	orrs	r3, r4
 8002df2:	d100      	bne.n	8002df6 <__aeabi_dsub+0x22a>
 8002df4:	e254      	b.n	80032a0 <__aeabi_dsub+0x6d4>
 8002df6:	2580      	movs	r5, #128	@ 0x80
 8002df8:	032d      	lsls	r5, r5, #12
 8002dfa:	4325      	orrs	r5, r4
 8002dfc:	032d      	lsls	r5, r5, #12
 8002dfe:	4c48      	ldr	r4, [pc, #288]	@ (8002f20 <__aeabi_dsub+0x354>)
 8002e00:	0b2d      	lsrs	r5, r5, #12
 8002e02:	e78c      	b.n	8002d1e <__aeabi_dsub+0x152>
 8002e04:	4661      	mov	r1, ip
 8002e06:	9b02      	ldr	r3, [sp, #8]
 8002e08:	4319      	orrs	r1, r3
 8002e0a:	d100      	bne.n	8002e0e <__aeabi_dsub+0x242>
 8002e0c:	e0cc      	b.n	8002fa8 <__aeabi_dsub+0x3dc>
 8002e0e:	0029      	movs	r1, r5
 8002e10:	3901      	subs	r1, #1
 8002e12:	2d01      	cmp	r5, #1
 8002e14:	d100      	bne.n	8002e18 <__aeabi_dsub+0x24c>
 8002e16:	e188      	b.n	800312a <__aeabi_dsub+0x55e>
 8002e18:	4295      	cmp	r5, r2
 8002e1a:	d100      	bne.n	8002e1e <__aeabi_dsub+0x252>
 8002e1c:	e0aa      	b.n	8002f74 <__aeabi_dsub+0x3a8>
 8002e1e:	2501      	movs	r5, #1
 8002e20:	2938      	cmp	r1, #56	@ 0x38
 8002e22:	dd00      	ble.n	8002e26 <__aeabi_dsub+0x25a>
 8002e24:	e72f      	b.n	8002c86 <__aeabi_dsub+0xba>
 8002e26:	468a      	mov	sl, r1
 8002e28:	e718      	b.n	8002c5c <__aeabi_dsub+0x90>
 8002e2a:	2201      	movs	r2, #1
 8002e2c:	4051      	eors	r1, r2
 8002e2e:	428e      	cmp	r6, r1
 8002e30:	d1d0      	bne.n	8002dd4 <__aeabi_dsub+0x208>
 8002e32:	4653      	mov	r3, sl
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d100      	bne.n	8002e3a <__aeabi_dsub+0x26e>
 8002e38:	e0be      	b.n	8002fb8 <__aeabi_dsub+0x3ec>
 8002e3a:	2f00      	cmp	r7, #0
 8002e3c:	d000      	beq.n	8002e40 <__aeabi_dsub+0x274>
 8002e3e:	e138      	b.n	80030b2 <__aeabi_dsub+0x4e6>
 8002e40:	46ca      	mov	sl, r9
 8002e42:	0022      	movs	r2, r4
 8002e44:	4302      	orrs	r2, r0
 8002e46:	d100      	bne.n	8002e4a <__aeabi_dsub+0x27e>
 8002e48:	e1e2      	b.n	8003210 <__aeabi_dsub+0x644>
 8002e4a:	4653      	mov	r3, sl
 8002e4c:	1e59      	subs	r1, r3, #1
 8002e4e:	2b01      	cmp	r3, #1
 8002e50:	d100      	bne.n	8002e54 <__aeabi_dsub+0x288>
 8002e52:	e20d      	b.n	8003270 <__aeabi_dsub+0x6a4>
 8002e54:	4a32      	ldr	r2, [pc, #200]	@ (8002f20 <__aeabi_dsub+0x354>)
 8002e56:	4592      	cmp	sl, r2
 8002e58:	d100      	bne.n	8002e5c <__aeabi_dsub+0x290>
 8002e5a:	e1d2      	b.n	8003202 <__aeabi_dsub+0x636>
 8002e5c:	2701      	movs	r7, #1
 8002e5e:	2938      	cmp	r1, #56	@ 0x38
 8002e60:	dc13      	bgt.n	8002e8a <__aeabi_dsub+0x2be>
 8002e62:	291f      	cmp	r1, #31
 8002e64:	dd00      	ble.n	8002e68 <__aeabi_dsub+0x29c>
 8002e66:	e1ee      	b.n	8003246 <__aeabi_dsub+0x67a>
 8002e68:	2220      	movs	r2, #32
 8002e6a:	9b02      	ldr	r3, [sp, #8]
 8002e6c:	1a52      	subs	r2, r2, r1
 8002e6e:	0025      	movs	r5, r4
 8002e70:	0007      	movs	r7, r0
 8002e72:	469a      	mov	sl, r3
 8002e74:	40cc      	lsrs	r4, r1
 8002e76:	4090      	lsls	r0, r2
 8002e78:	4095      	lsls	r5, r2
 8002e7a:	40cf      	lsrs	r7, r1
 8002e7c:	44a2      	add	sl, r4
 8002e7e:	1e42      	subs	r2, r0, #1
 8002e80:	4190      	sbcs	r0, r2
 8002e82:	4653      	mov	r3, sl
 8002e84:	432f      	orrs	r7, r5
 8002e86:	4307      	orrs	r7, r0
 8002e88:	9302      	str	r3, [sp, #8]
 8002e8a:	003d      	movs	r5, r7
 8002e8c:	4465      	add	r5, ip
 8002e8e:	4565      	cmp	r5, ip
 8002e90:	4192      	sbcs	r2, r2
 8002e92:	9b02      	ldr	r3, [sp, #8]
 8002e94:	4252      	negs	r2, r2
 8002e96:	464f      	mov	r7, r9
 8002e98:	18d4      	adds	r4, r2, r3
 8002e9a:	e780      	b.n	8002d9e <__aeabi_dsub+0x1d2>
 8002e9c:	4a23      	ldr	r2, [pc, #140]	@ (8002f2c <__aeabi_dsub+0x360>)
 8002e9e:	1c7d      	adds	r5, r7, #1
 8002ea0:	4215      	tst	r5, r2
 8002ea2:	d000      	beq.n	8002ea6 <__aeabi_dsub+0x2da>
 8002ea4:	e0aa      	b.n	8002ffc <__aeabi_dsub+0x430>
 8002ea6:	4662      	mov	r2, ip
 8002ea8:	0025      	movs	r5, r4
 8002eaa:	9b02      	ldr	r3, [sp, #8]
 8002eac:	4305      	orrs	r5, r0
 8002eae:	431a      	orrs	r2, r3
 8002eb0:	2f00      	cmp	r7, #0
 8002eb2:	d000      	beq.n	8002eb6 <__aeabi_dsub+0x2ea>
 8002eb4:	e0f5      	b.n	80030a2 <__aeabi_dsub+0x4d6>
 8002eb6:	2d00      	cmp	r5, #0
 8002eb8:	d100      	bne.n	8002ebc <__aeabi_dsub+0x2f0>
 8002eba:	e16b      	b.n	8003194 <__aeabi_dsub+0x5c8>
 8002ebc:	2a00      	cmp	r2, #0
 8002ebe:	d100      	bne.n	8002ec2 <__aeabi_dsub+0x2f6>
 8002ec0:	e152      	b.n	8003168 <__aeabi_dsub+0x59c>
 8002ec2:	4663      	mov	r3, ip
 8002ec4:	1ac5      	subs	r5, r0, r3
 8002ec6:	9b02      	ldr	r3, [sp, #8]
 8002ec8:	1ae2      	subs	r2, r4, r3
 8002eca:	42a8      	cmp	r0, r5
 8002ecc:	419b      	sbcs	r3, r3
 8002ece:	425b      	negs	r3, r3
 8002ed0:	1ad3      	subs	r3, r2, r3
 8002ed2:	021a      	lsls	r2, r3, #8
 8002ed4:	d400      	bmi.n	8002ed8 <__aeabi_dsub+0x30c>
 8002ed6:	e1d5      	b.n	8003284 <__aeabi_dsub+0x6b8>
 8002ed8:	4663      	mov	r3, ip
 8002eda:	1a1d      	subs	r5, r3, r0
 8002edc:	45ac      	cmp	ip, r5
 8002ede:	4192      	sbcs	r2, r2
 8002ee0:	2601      	movs	r6, #1
 8002ee2:	9b02      	ldr	r3, [sp, #8]
 8002ee4:	4252      	negs	r2, r2
 8002ee6:	1b1c      	subs	r4, r3, r4
 8002ee8:	4688      	mov	r8, r1
 8002eea:	1aa4      	subs	r4, r4, r2
 8002eec:	400e      	ands	r6, r1
 8002eee:	e6f6      	b.n	8002cde <__aeabi_dsub+0x112>
 8002ef0:	4297      	cmp	r7, r2
 8002ef2:	d03f      	beq.n	8002f74 <__aeabi_dsub+0x3a8>
 8002ef4:	4652      	mov	r2, sl
 8002ef6:	2501      	movs	r5, #1
 8002ef8:	2a38      	cmp	r2, #56	@ 0x38
 8002efa:	dd00      	ble.n	8002efe <__aeabi_dsub+0x332>
 8002efc:	e74a      	b.n	8002d94 <__aeabi_dsub+0x1c8>
 8002efe:	2280      	movs	r2, #128	@ 0x80
 8002f00:	9b02      	ldr	r3, [sp, #8]
 8002f02:	0412      	lsls	r2, r2, #16
 8002f04:	4313      	orrs	r3, r2
 8002f06:	9302      	str	r3, [sp, #8]
 8002f08:	e72d      	b.n	8002d66 <__aeabi_dsub+0x19a>
 8002f0a:	003c      	movs	r4, r7
 8002f0c:	2500      	movs	r5, #0
 8002f0e:	2200      	movs	r2, #0
 8002f10:	e705      	b.n	8002d1e <__aeabi_dsub+0x152>
 8002f12:	2307      	movs	r3, #7
 8002f14:	402b      	ands	r3, r5
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d000      	beq.n	8002f1c <__aeabi_dsub+0x350>
 8002f1a:	e6e2      	b.n	8002ce2 <__aeabi_dsub+0x116>
 8002f1c:	e06b      	b.n	8002ff6 <__aeabi_dsub+0x42a>
 8002f1e:	46c0      	nop			@ (mov r8, r8)
 8002f20:	000007ff 	.word	0x000007ff
 8002f24:	ff7fffff 	.word	0xff7fffff
 8002f28:	fffff801 	.word	0xfffff801
 8002f2c:	000007fe 	.word	0x000007fe
 8002f30:	0028      	movs	r0, r5
 8002f32:	f000 fb63 	bl	80035fc <__clzsi2>
 8002f36:	0003      	movs	r3, r0
 8002f38:	3318      	adds	r3, #24
 8002f3a:	2b1f      	cmp	r3, #31
 8002f3c:	dc00      	bgt.n	8002f40 <__aeabi_dsub+0x374>
 8002f3e:	e6b4      	b.n	8002caa <__aeabi_dsub+0xde>
 8002f40:	002a      	movs	r2, r5
 8002f42:	3808      	subs	r0, #8
 8002f44:	4082      	lsls	r2, r0
 8002f46:	429f      	cmp	r7, r3
 8002f48:	dd00      	ble.n	8002f4c <__aeabi_dsub+0x380>
 8002f4a:	e0b9      	b.n	80030c0 <__aeabi_dsub+0x4f4>
 8002f4c:	1bdb      	subs	r3, r3, r7
 8002f4e:	1c58      	adds	r0, r3, #1
 8002f50:	281f      	cmp	r0, #31
 8002f52:	dc00      	bgt.n	8002f56 <__aeabi_dsub+0x38a>
 8002f54:	e1a0      	b.n	8003298 <__aeabi_dsub+0x6cc>
 8002f56:	0015      	movs	r5, r2
 8002f58:	3b1f      	subs	r3, #31
 8002f5a:	40dd      	lsrs	r5, r3
 8002f5c:	2820      	cmp	r0, #32
 8002f5e:	d005      	beq.n	8002f6c <__aeabi_dsub+0x3a0>
 8002f60:	2340      	movs	r3, #64	@ 0x40
 8002f62:	1a1b      	subs	r3, r3, r0
 8002f64:	409a      	lsls	r2, r3
 8002f66:	1e53      	subs	r3, r2, #1
 8002f68:	419a      	sbcs	r2, r3
 8002f6a:	4315      	orrs	r5, r2
 8002f6c:	2307      	movs	r3, #7
 8002f6e:	2700      	movs	r7, #0
 8002f70:	402b      	ands	r3, r5
 8002f72:	e7d0      	b.n	8002f16 <__aeabi_dsub+0x34a>
 8002f74:	08c0      	lsrs	r0, r0, #3
 8002f76:	0762      	lsls	r2, r4, #29
 8002f78:	4302      	orrs	r2, r0
 8002f7a:	08e4      	lsrs	r4, r4, #3
 8002f7c:	e737      	b.n	8002dee <__aeabi_dsub+0x222>
 8002f7e:	08ea      	lsrs	r2, r5, #3
 8002f80:	0763      	lsls	r3, r4, #29
 8002f82:	431a      	orrs	r2, r3
 8002f84:	4bd3      	ldr	r3, [pc, #844]	@ (80032d4 <__aeabi_dsub+0x708>)
 8002f86:	08e4      	lsrs	r4, r4, #3
 8002f88:	429f      	cmp	r7, r3
 8002f8a:	d100      	bne.n	8002f8e <__aeabi_dsub+0x3c2>
 8002f8c:	e72f      	b.n	8002dee <__aeabi_dsub+0x222>
 8002f8e:	0324      	lsls	r4, r4, #12
 8002f90:	0b25      	lsrs	r5, r4, #12
 8002f92:	057c      	lsls	r4, r7, #21
 8002f94:	0d64      	lsrs	r4, r4, #21
 8002f96:	e6c2      	b.n	8002d1e <__aeabi_dsub+0x152>
 8002f98:	46ca      	mov	sl, r9
 8002f9a:	0022      	movs	r2, r4
 8002f9c:	4302      	orrs	r2, r0
 8002f9e:	d158      	bne.n	8003052 <__aeabi_dsub+0x486>
 8002fa0:	4663      	mov	r3, ip
 8002fa2:	000e      	movs	r6, r1
 8002fa4:	9c02      	ldr	r4, [sp, #8]
 8002fa6:	9303      	str	r3, [sp, #12]
 8002fa8:	9b03      	ldr	r3, [sp, #12]
 8002faa:	4657      	mov	r7, sl
 8002fac:	08da      	lsrs	r2, r3, #3
 8002fae:	e7e7      	b.n	8002f80 <__aeabi_dsub+0x3b4>
 8002fb0:	4cc9      	ldr	r4, [pc, #804]	@ (80032d8 <__aeabi_dsub+0x70c>)
 8002fb2:	1aff      	subs	r7, r7, r3
 8002fb4:	4014      	ands	r4, r2
 8002fb6:	e692      	b.n	8002cde <__aeabi_dsub+0x112>
 8002fb8:	4dc8      	ldr	r5, [pc, #800]	@ (80032dc <__aeabi_dsub+0x710>)
 8002fba:	1c7a      	adds	r2, r7, #1
 8002fbc:	422a      	tst	r2, r5
 8002fbe:	d000      	beq.n	8002fc2 <__aeabi_dsub+0x3f6>
 8002fc0:	e084      	b.n	80030cc <__aeabi_dsub+0x500>
 8002fc2:	0022      	movs	r2, r4
 8002fc4:	4302      	orrs	r2, r0
 8002fc6:	2f00      	cmp	r7, #0
 8002fc8:	d000      	beq.n	8002fcc <__aeabi_dsub+0x400>
 8002fca:	e0ef      	b.n	80031ac <__aeabi_dsub+0x5e0>
 8002fcc:	2a00      	cmp	r2, #0
 8002fce:	d100      	bne.n	8002fd2 <__aeabi_dsub+0x406>
 8002fd0:	e0e5      	b.n	800319e <__aeabi_dsub+0x5d2>
 8002fd2:	4662      	mov	r2, ip
 8002fd4:	9902      	ldr	r1, [sp, #8]
 8002fd6:	430a      	orrs	r2, r1
 8002fd8:	d100      	bne.n	8002fdc <__aeabi_dsub+0x410>
 8002fda:	e0c5      	b.n	8003168 <__aeabi_dsub+0x59c>
 8002fdc:	4663      	mov	r3, ip
 8002fde:	18c5      	adds	r5, r0, r3
 8002fe0:	468c      	mov	ip, r1
 8002fe2:	4285      	cmp	r5, r0
 8002fe4:	4180      	sbcs	r0, r0
 8002fe6:	4464      	add	r4, ip
 8002fe8:	4240      	negs	r0, r0
 8002fea:	1824      	adds	r4, r4, r0
 8002fec:	0223      	lsls	r3, r4, #8
 8002fee:	d502      	bpl.n	8002ff6 <__aeabi_dsub+0x42a>
 8002ff0:	4bb9      	ldr	r3, [pc, #740]	@ (80032d8 <__aeabi_dsub+0x70c>)
 8002ff2:	3701      	adds	r7, #1
 8002ff4:	401c      	ands	r4, r3
 8002ff6:	46ba      	mov	sl, r7
 8002ff8:	9503      	str	r5, [sp, #12]
 8002ffa:	e7d5      	b.n	8002fa8 <__aeabi_dsub+0x3dc>
 8002ffc:	4662      	mov	r2, ip
 8002ffe:	1a85      	subs	r5, r0, r2
 8003000:	42a8      	cmp	r0, r5
 8003002:	4192      	sbcs	r2, r2
 8003004:	4252      	negs	r2, r2
 8003006:	4691      	mov	r9, r2
 8003008:	9b02      	ldr	r3, [sp, #8]
 800300a:	1ae3      	subs	r3, r4, r3
 800300c:	001a      	movs	r2, r3
 800300e:	464b      	mov	r3, r9
 8003010:	1ad2      	subs	r2, r2, r3
 8003012:	0013      	movs	r3, r2
 8003014:	4691      	mov	r9, r2
 8003016:	021a      	lsls	r2, r3, #8
 8003018:	d46c      	bmi.n	80030f4 <__aeabi_dsub+0x528>
 800301a:	464a      	mov	r2, r9
 800301c:	464c      	mov	r4, r9
 800301e:	432a      	orrs	r2, r5
 8003020:	d000      	beq.n	8003024 <__aeabi_dsub+0x458>
 8003022:	e63a      	b.n	8002c9a <__aeabi_dsub+0xce>
 8003024:	2600      	movs	r6, #0
 8003026:	2400      	movs	r4, #0
 8003028:	2500      	movs	r5, #0
 800302a:	e678      	b.n	8002d1e <__aeabi_dsub+0x152>
 800302c:	9902      	ldr	r1, [sp, #8]
 800302e:	4653      	mov	r3, sl
 8003030:	000d      	movs	r5, r1
 8003032:	3a20      	subs	r2, #32
 8003034:	40d5      	lsrs	r5, r2
 8003036:	2b20      	cmp	r3, #32
 8003038:	d006      	beq.n	8003048 <__aeabi_dsub+0x47c>
 800303a:	2240      	movs	r2, #64	@ 0x40
 800303c:	1ad2      	subs	r2, r2, r3
 800303e:	000b      	movs	r3, r1
 8003040:	4093      	lsls	r3, r2
 8003042:	4662      	mov	r2, ip
 8003044:	431a      	orrs	r2, r3
 8003046:	4693      	mov	fp, r2
 8003048:	465b      	mov	r3, fp
 800304a:	1e5a      	subs	r2, r3, #1
 800304c:	4193      	sbcs	r3, r2
 800304e:	431d      	orrs	r5, r3
 8003050:	e619      	b.n	8002c86 <__aeabi_dsub+0xba>
 8003052:	4653      	mov	r3, sl
 8003054:	1e5a      	subs	r2, r3, #1
 8003056:	2b01      	cmp	r3, #1
 8003058:	d100      	bne.n	800305c <__aeabi_dsub+0x490>
 800305a:	e0c6      	b.n	80031ea <__aeabi_dsub+0x61e>
 800305c:	4e9d      	ldr	r6, [pc, #628]	@ (80032d4 <__aeabi_dsub+0x708>)
 800305e:	45b2      	cmp	sl, r6
 8003060:	d100      	bne.n	8003064 <__aeabi_dsub+0x498>
 8003062:	e6bd      	b.n	8002de0 <__aeabi_dsub+0x214>
 8003064:	4688      	mov	r8, r1
 8003066:	000e      	movs	r6, r1
 8003068:	2501      	movs	r5, #1
 800306a:	2a38      	cmp	r2, #56	@ 0x38
 800306c:	dc10      	bgt.n	8003090 <__aeabi_dsub+0x4c4>
 800306e:	2a1f      	cmp	r2, #31
 8003070:	dc7f      	bgt.n	8003172 <__aeabi_dsub+0x5a6>
 8003072:	2120      	movs	r1, #32
 8003074:	0025      	movs	r5, r4
 8003076:	1a89      	subs	r1, r1, r2
 8003078:	0007      	movs	r7, r0
 800307a:	4088      	lsls	r0, r1
 800307c:	408d      	lsls	r5, r1
 800307e:	40d7      	lsrs	r7, r2
 8003080:	40d4      	lsrs	r4, r2
 8003082:	1e41      	subs	r1, r0, #1
 8003084:	4188      	sbcs	r0, r1
 8003086:	9b02      	ldr	r3, [sp, #8]
 8003088:	433d      	orrs	r5, r7
 800308a:	1b1b      	subs	r3, r3, r4
 800308c:	4305      	orrs	r5, r0
 800308e:	9302      	str	r3, [sp, #8]
 8003090:	4662      	mov	r2, ip
 8003092:	1b55      	subs	r5, r2, r5
 8003094:	45ac      	cmp	ip, r5
 8003096:	4192      	sbcs	r2, r2
 8003098:	9b02      	ldr	r3, [sp, #8]
 800309a:	4252      	negs	r2, r2
 800309c:	464f      	mov	r7, r9
 800309e:	1a9c      	subs	r4, r3, r2
 80030a0:	e5f6      	b.n	8002c90 <__aeabi_dsub+0xc4>
 80030a2:	2d00      	cmp	r5, #0
 80030a4:	d000      	beq.n	80030a8 <__aeabi_dsub+0x4dc>
 80030a6:	e0b7      	b.n	8003218 <__aeabi_dsub+0x64c>
 80030a8:	2a00      	cmp	r2, #0
 80030aa:	d100      	bne.n	80030ae <__aeabi_dsub+0x4e2>
 80030ac:	e0f0      	b.n	8003290 <__aeabi_dsub+0x6c4>
 80030ae:	2601      	movs	r6, #1
 80030b0:	400e      	ands	r6, r1
 80030b2:	4663      	mov	r3, ip
 80030b4:	9802      	ldr	r0, [sp, #8]
 80030b6:	08d9      	lsrs	r1, r3, #3
 80030b8:	0742      	lsls	r2, r0, #29
 80030ba:	430a      	orrs	r2, r1
 80030bc:	08c4      	lsrs	r4, r0, #3
 80030be:	e696      	b.n	8002dee <__aeabi_dsub+0x222>
 80030c0:	4c85      	ldr	r4, [pc, #532]	@ (80032d8 <__aeabi_dsub+0x70c>)
 80030c2:	1aff      	subs	r7, r7, r3
 80030c4:	4014      	ands	r4, r2
 80030c6:	0762      	lsls	r2, r4, #29
 80030c8:	08e4      	lsrs	r4, r4, #3
 80030ca:	e760      	b.n	8002f8e <__aeabi_dsub+0x3c2>
 80030cc:	4981      	ldr	r1, [pc, #516]	@ (80032d4 <__aeabi_dsub+0x708>)
 80030ce:	428a      	cmp	r2, r1
 80030d0:	d100      	bne.n	80030d4 <__aeabi_dsub+0x508>
 80030d2:	e0c9      	b.n	8003268 <__aeabi_dsub+0x69c>
 80030d4:	4663      	mov	r3, ip
 80030d6:	18c1      	adds	r1, r0, r3
 80030d8:	4281      	cmp	r1, r0
 80030da:	4180      	sbcs	r0, r0
 80030dc:	9b02      	ldr	r3, [sp, #8]
 80030de:	4240      	negs	r0, r0
 80030e0:	18e3      	adds	r3, r4, r3
 80030e2:	181b      	adds	r3, r3, r0
 80030e4:	07dd      	lsls	r5, r3, #31
 80030e6:	085c      	lsrs	r4, r3, #1
 80030e8:	2307      	movs	r3, #7
 80030ea:	0849      	lsrs	r1, r1, #1
 80030ec:	430d      	orrs	r5, r1
 80030ee:	0017      	movs	r7, r2
 80030f0:	402b      	ands	r3, r5
 80030f2:	e710      	b.n	8002f16 <__aeabi_dsub+0x34a>
 80030f4:	4663      	mov	r3, ip
 80030f6:	1a1d      	subs	r5, r3, r0
 80030f8:	45ac      	cmp	ip, r5
 80030fa:	4192      	sbcs	r2, r2
 80030fc:	2601      	movs	r6, #1
 80030fe:	9b02      	ldr	r3, [sp, #8]
 8003100:	4252      	negs	r2, r2
 8003102:	1b1c      	subs	r4, r3, r4
 8003104:	4688      	mov	r8, r1
 8003106:	1aa4      	subs	r4, r4, r2
 8003108:	400e      	ands	r6, r1
 800310a:	e5c6      	b.n	8002c9a <__aeabi_dsub+0xce>
 800310c:	4663      	mov	r3, ip
 800310e:	18c5      	adds	r5, r0, r3
 8003110:	9b02      	ldr	r3, [sp, #8]
 8003112:	4285      	cmp	r5, r0
 8003114:	4180      	sbcs	r0, r0
 8003116:	469c      	mov	ip, r3
 8003118:	4240      	negs	r0, r0
 800311a:	4464      	add	r4, ip
 800311c:	1824      	adds	r4, r4, r0
 800311e:	2701      	movs	r7, #1
 8003120:	0223      	lsls	r3, r4, #8
 8003122:	d400      	bmi.n	8003126 <__aeabi_dsub+0x55a>
 8003124:	e6f5      	b.n	8002f12 <__aeabi_dsub+0x346>
 8003126:	2702      	movs	r7, #2
 8003128:	e641      	b.n	8002dae <__aeabi_dsub+0x1e2>
 800312a:	4663      	mov	r3, ip
 800312c:	1ac5      	subs	r5, r0, r3
 800312e:	42a8      	cmp	r0, r5
 8003130:	4180      	sbcs	r0, r0
 8003132:	9b02      	ldr	r3, [sp, #8]
 8003134:	4240      	negs	r0, r0
 8003136:	1ae4      	subs	r4, r4, r3
 8003138:	2701      	movs	r7, #1
 800313a:	1a24      	subs	r4, r4, r0
 800313c:	e5a8      	b.n	8002c90 <__aeabi_dsub+0xc4>
 800313e:	9d02      	ldr	r5, [sp, #8]
 8003140:	4652      	mov	r2, sl
 8003142:	002b      	movs	r3, r5
 8003144:	3a20      	subs	r2, #32
 8003146:	40d3      	lsrs	r3, r2
 8003148:	0019      	movs	r1, r3
 800314a:	4653      	mov	r3, sl
 800314c:	2b20      	cmp	r3, #32
 800314e:	d006      	beq.n	800315e <__aeabi_dsub+0x592>
 8003150:	2240      	movs	r2, #64	@ 0x40
 8003152:	1ad2      	subs	r2, r2, r3
 8003154:	002b      	movs	r3, r5
 8003156:	4093      	lsls	r3, r2
 8003158:	4662      	mov	r2, ip
 800315a:	431a      	orrs	r2, r3
 800315c:	4693      	mov	fp, r2
 800315e:	465d      	mov	r5, fp
 8003160:	1e6b      	subs	r3, r5, #1
 8003162:	419d      	sbcs	r5, r3
 8003164:	430d      	orrs	r5, r1
 8003166:	e615      	b.n	8002d94 <__aeabi_dsub+0x1c8>
 8003168:	0762      	lsls	r2, r4, #29
 800316a:	08c0      	lsrs	r0, r0, #3
 800316c:	4302      	orrs	r2, r0
 800316e:	08e4      	lsrs	r4, r4, #3
 8003170:	e70d      	b.n	8002f8e <__aeabi_dsub+0x3c2>
 8003172:	0011      	movs	r1, r2
 8003174:	0027      	movs	r7, r4
 8003176:	3920      	subs	r1, #32
 8003178:	40cf      	lsrs	r7, r1
 800317a:	2a20      	cmp	r2, #32
 800317c:	d005      	beq.n	800318a <__aeabi_dsub+0x5be>
 800317e:	2140      	movs	r1, #64	@ 0x40
 8003180:	1a8a      	subs	r2, r1, r2
 8003182:	4094      	lsls	r4, r2
 8003184:	0025      	movs	r5, r4
 8003186:	4305      	orrs	r5, r0
 8003188:	9503      	str	r5, [sp, #12]
 800318a:	9d03      	ldr	r5, [sp, #12]
 800318c:	1e6a      	subs	r2, r5, #1
 800318e:	4195      	sbcs	r5, r2
 8003190:	433d      	orrs	r5, r7
 8003192:	e77d      	b.n	8003090 <__aeabi_dsub+0x4c4>
 8003194:	2a00      	cmp	r2, #0
 8003196:	d100      	bne.n	800319a <__aeabi_dsub+0x5ce>
 8003198:	e744      	b.n	8003024 <__aeabi_dsub+0x458>
 800319a:	2601      	movs	r6, #1
 800319c:	400e      	ands	r6, r1
 800319e:	4663      	mov	r3, ip
 80031a0:	08d9      	lsrs	r1, r3, #3
 80031a2:	9b02      	ldr	r3, [sp, #8]
 80031a4:	075a      	lsls	r2, r3, #29
 80031a6:	430a      	orrs	r2, r1
 80031a8:	08dc      	lsrs	r4, r3, #3
 80031aa:	e6f0      	b.n	8002f8e <__aeabi_dsub+0x3c2>
 80031ac:	2a00      	cmp	r2, #0
 80031ae:	d028      	beq.n	8003202 <__aeabi_dsub+0x636>
 80031b0:	4662      	mov	r2, ip
 80031b2:	9f02      	ldr	r7, [sp, #8]
 80031b4:	08c0      	lsrs	r0, r0, #3
 80031b6:	433a      	orrs	r2, r7
 80031b8:	d100      	bne.n	80031bc <__aeabi_dsub+0x5f0>
 80031ba:	e6dc      	b.n	8002f76 <__aeabi_dsub+0x3aa>
 80031bc:	0762      	lsls	r2, r4, #29
 80031be:	4310      	orrs	r0, r2
 80031c0:	2280      	movs	r2, #128	@ 0x80
 80031c2:	08e4      	lsrs	r4, r4, #3
 80031c4:	0312      	lsls	r2, r2, #12
 80031c6:	4214      	tst	r4, r2
 80031c8:	d009      	beq.n	80031de <__aeabi_dsub+0x612>
 80031ca:	08fd      	lsrs	r5, r7, #3
 80031cc:	4215      	tst	r5, r2
 80031ce:	d106      	bne.n	80031de <__aeabi_dsub+0x612>
 80031d0:	4663      	mov	r3, ip
 80031d2:	2601      	movs	r6, #1
 80031d4:	002c      	movs	r4, r5
 80031d6:	08d8      	lsrs	r0, r3, #3
 80031d8:	077b      	lsls	r3, r7, #29
 80031da:	4318      	orrs	r0, r3
 80031dc:	400e      	ands	r6, r1
 80031de:	0f42      	lsrs	r2, r0, #29
 80031e0:	00c0      	lsls	r0, r0, #3
 80031e2:	08c0      	lsrs	r0, r0, #3
 80031e4:	0752      	lsls	r2, r2, #29
 80031e6:	4302      	orrs	r2, r0
 80031e8:	e601      	b.n	8002dee <__aeabi_dsub+0x222>
 80031ea:	4663      	mov	r3, ip
 80031ec:	1a1d      	subs	r5, r3, r0
 80031ee:	45ac      	cmp	ip, r5
 80031f0:	4192      	sbcs	r2, r2
 80031f2:	9b02      	ldr	r3, [sp, #8]
 80031f4:	4252      	negs	r2, r2
 80031f6:	1b1c      	subs	r4, r3, r4
 80031f8:	000e      	movs	r6, r1
 80031fa:	4688      	mov	r8, r1
 80031fc:	2701      	movs	r7, #1
 80031fe:	1aa4      	subs	r4, r4, r2
 8003200:	e546      	b.n	8002c90 <__aeabi_dsub+0xc4>
 8003202:	4663      	mov	r3, ip
 8003204:	08d9      	lsrs	r1, r3, #3
 8003206:	9b02      	ldr	r3, [sp, #8]
 8003208:	075a      	lsls	r2, r3, #29
 800320a:	430a      	orrs	r2, r1
 800320c:	08dc      	lsrs	r4, r3, #3
 800320e:	e5ee      	b.n	8002dee <__aeabi_dsub+0x222>
 8003210:	4663      	mov	r3, ip
 8003212:	9c02      	ldr	r4, [sp, #8]
 8003214:	9303      	str	r3, [sp, #12]
 8003216:	e6c7      	b.n	8002fa8 <__aeabi_dsub+0x3dc>
 8003218:	08c0      	lsrs	r0, r0, #3
 800321a:	2a00      	cmp	r2, #0
 800321c:	d100      	bne.n	8003220 <__aeabi_dsub+0x654>
 800321e:	e6aa      	b.n	8002f76 <__aeabi_dsub+0x3aa>
 8003220:	0762      	lsls	r2, r4, #29
 8003222:	4310      	orrs	r0, r2
 8003224:	2280      	movs	r2, #128	@ 0x80
 8003226:	08e4      	lsrs	r4, r4, #3
 8003228:	0312      	lsls	r2, r2, #12
 800322a:	4214      	tst	r4, r2
 800322c:	d0d7      	beq.n	80031de <__aeabi_dsub+0x612>
 800322e:	9f02      	ldr	r7, [sp, #8]
 8003230:	08fd      	lsrs	r5, r7, #3
 8003232:	4215      	tst	r5, r2
 8003234:	d1d3      	bne.n	80031de <__aeabi_dsub+0x612>
 8003236:	4663      	mov	r3, ip
 8003238:	2601      	movs	r6, #1
 800323a:	08d8      	lsrs	r0, r3, #3
 800323c:	077b      	lsls	r3, r7, #29
 800323e:	002c      	movs	r4, r5
 8003240:	4318      	orrs	r0, r3
 8003242:	400e      	ands	r6, r1
 8003244:	e7cb      	b.n	80031de <__aeabi_dsub+0x612>
 8003246:	000a      	movs	r2, r1
 8003248:	0027      	movs	r7, r4
 800324a:	3a20      	subs	r2, #32
 800324c:	40d7      	lsrs	r7, r2
 800324e:	2920      	cmp	r1, #32
 8003250:	d005      	beq.n	800325e <__aeabi_dsub+0x692>
 8003252:	2240      	movs	r2, #64	@ 0x40
 8003254:	1a52      	subs	r2, r2, r1
 8003256:	4094      	lsls	r4, r2
 8003258:	0025      	movs	r5, r4
 800325a:	4305      	orrs	r5, r0
 800325c:	9503      	str	r5, [sp, #12]
 800325e:	9d03      	ldr	r5, [sp, #12]
 8003260:	1e6a      	subs	r2, r5, #1
 8003262:	4195      	sbcs	r5, r2
 8003264:	432f      	orrs	r7, r5
 8003266:	e610      	b.n	8002e8a <__aeabi_dsub+0x2be>
 8003268:	0014      	movs	r4, r2
 800326a:	2500      	movs	r5, #0
 800326c:	2200      	movs	r2, #0
 800326e:	e556      	b.n	8002d1e <__aeabi_dsub+0x152>
 8003270:	9b02      	ldr	r3, [sp, #8]
 8003272:	4460      	add	r0, ip
 8003274:	4699      	mov	r9, r3
 8003276:	4560      	cmp	r0, ip
 8003278:	4192      	sbcs	r2, r2
 800327a:	444c      	add	r4, r9
 800327c:	4252      	negs	r2, r2
 800327e:	0005      	movs	r5, r0
 8003280:	18a4      	adds	r4, r4, r2
 8003282:	e74c      	b.n	800311e <__aeabi_dsub+0x552>
 8003284:	001a      	movs	r2, r3
 8003286:	001c      	movs	r4, r3
 8003288:	432a      	orrs	r2, r5
 800328a:	d000      	beq.n	800328e <__aeabi_dsub+0x6c2>
 800328c:	e6b3      	b.n	8002ff6 <__aeabi_dsub+0x42a>
 800328e:	e6c9      	b.n	8003024 <__aeabi_dsub+0x458>
 8003290:	2480      	movs	r4, #128	@ 0x80
 8003292:	2600      	movs	r6, #0
 8003294:	0324      	lsls	r4, r4, #12
 8003296:	e5ae      	b.n	8002df6 <__aeabi_dsub+0x22a>
 8003298:	2120      	movs	r1, #32
 800329a:	2500      	movs	r5, #0
 800329c:	1a09      	subs	r1, r1, r0
 800329e:	e517      	b.n	8002cd0 <__aeabi_dsub+0x104>
 80032a0:	2200      	movs	r2, #0
 80032a2:	2500      	movs	r5, #0
 80032a4:	4c0b      	ldr	r4, [pc, #44]	@ (80032d4 <__aeabi_dsub+0x708>)
 80032a6:	e53a      	b.n	8002d1e <__aeabi_dsub+0x152>
 80032a8:	2d00      	cmp	r5, #0
 80032aa:	d100      	bne.n	80032ae <__aeabi_dsub+0x6e2>
 80032ac:	e5f6      	b.n	8002e9c <__aeabi_dsub+0x2d0>
 80032ae:	464b      	mov	r3, r9
 80032b0:	1bda      	subs	r2, r3, r7
 80032b2:	4692      	mov	sl, r2
 80032b4:	2f00      	cmp	r7, #0
 80032b6:	d100      	bne.n	80032ba <__aeabi_dsub+0x6ee>
 80032b8:	e66f      	b.n	8002f9a <__aeabi_dsub+0x3ce>
 80032ba:	2a38      	cmp	r2, #56	@ 0x38
 80032bc:	dc05      	bgt.n	80032ca <__aeabi_dsub+0x6fe>
 80032be:	2680      	movs	r6, #128	@ 0x80
 80032c0:	0436      	lsls	r6, r6, #16
 80032c2:	4334      	orrs	r4, r6
 80032c4:	4688      	mov	r8, r1
 80032c6:	000e      	movs	r6, r1
 80032c8:	e6d1      	b.n	800306e <__aeabi_dsub+0x4a2>
 80032ca:	4688      	mov	r8, r1
 80032cc:	000e      	movs	r6, r1
 80032ce:	2501      	movs	r5, #1
 80032d0:	e6de      	b.n	8003090 <__aeabi_dsub+0x4c4>
 80032d2:	46c0      	nop			@ (mov r8, r8)
 80032d4:	000007ff 	.word	0x000007ff
 80032d8:	ff7fffff 	.word	0xff7fffff
 80032dc:	000007fe 	.word	0x000007fe
 80032e0:	2d00      	cmp	r5, #0
 80032e2:	d100      	bne.n	80032e6 <__aeabi_dsub+0x71a>
 80032e4:	e668      	b.n	8002fb8 <__aeabi_dsub+0x3ec>
 80032e6:	464b      	mov	r3, r9
 80032e8:	1bd9      	subs	r1, r3, r7
 80032ea:	2f00      	cmp	r7, #0
 80032ec:	d101      	bne.n	80032f2 <__aeabi_dsub+0x726>
 80032ee:	468a      	mov	sl, r1
 80032f0:	e5a7      	b.n	8002e42 <__aeabi_dsub+0x276>
 80032f2:	2701      	movs	r7, #1
 80032f4:	2938      	cmp	r1, #56	@ 0x38
 80032f6:	dd00      	ble.n	80032fa <__aeabi_dsub+0x72e>
 80032f8:	e5c7      	b.n	8002e8a <__aeabi_dsub+0x2be>
 80032fa:	2280      	movs	r2, #128	@ 0x80
 80032fc:	0412      	lsls	r2, r2, #16
 80032fe:	4314      	orrs	r4, r2
 8003300:	e5af      	b.n	8002e62 <__aeabi_dsub+0x296>
 8003302:	46c0      	nop			@ (mov r8, r8)

08003304 <__aeabi_dcmpun>:
 8003304:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003306:	46c6      	mov	lr, r8
 8003308:	031e      	lsls	r6, r3, #12
 800330a:	0b36      	lsrs	r6, r6, #12
 800330c:	46b0      	mov	r8, r6
 800330e:	4e0d      	ldr	r6, [pc, #52]	@ (8003344 <__aeabi_dcmpun+0x40>)
 8003310:	030c      	lsls	r4, r1, #12
 8003312:	004d      	lsls	r5, r1, #1
 8003314:	005f      	lsls	r7, r3, #1
 8003316:	b500      	push	{lr}
 8003318:	0b24      	lsrs	r4, r4, #12
 800331a:	0d6d      	lsrs	r5, r5, #21
 800331c:	0d7f      	lsrs	r7, r7, #21
 800331e:	42b5      	cmp	r5, r6
 8003320:	d00b      	beq.n	800333a <__aeabi_dcmpun+0x36>
 8003322:	4908      	ldr	r1, [pc, #32]	@ (8003344 <__aeabi_dcmpun+0x40>)
 8003324:	2000      	movs	r0, #0
 8003326:	428f      	cmp	r7, r1
 8003328:	d104      	bne.n	8003334 <__aeabi_dcmpun+0x30>
 800332a:	4646      	mov	r6, r8
 800332c:	4316      	orrs	r6, r2
 800332e:	0030      	movs	r0, r6
 8003330:	1e43      	subs	r3, r0, #1
 8003332:	4198      	sbcs	r0, r3
 8003334:	bc80      	pop	{r7}
 8003336:	46b8      	mov	r8, r7
 8003338:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800333a:	4304      	orrs	r4, r0
 800333c:	2001      	movs	r0, #1
 800333e:	2c00      	cmp	r4, #0
 8003340:	d1f8      	bne.n	8003334 <__aeabi_dcmpun+0x30>
 8003342:	e7ee      	b.n	8003322 <__aeabi_dcmpun+0x1e>
 8003344:	000007ff 	.word	0x000007ff

08003348 <__aeabi_d2iz>:
 8003348:	000b      	movs	r3, r1
 800334a:	0002      	movs	r2, r0
 800334c:	b570      	push	{r4, r5, r6, lr}
 800334e:	4d16      	ldr	r5, [pc, #88]	@ (80033a8 <__aeabi_d2iz+0x60>)
 8003350:	030c      	lsls	r4, r1, #12
 8003352:	b082      	sub	sp, #8
 8003354:	0049      	lsls	r1, r1, #1
 8003356:	2000      	movs	r0, #0
 8003358:	9200      	str	r2, [sp, #0]
 800335a:	9301      	str	r3, [sp, #4]
 800335c:	0b24      	lsrs	r4, r4, #12
 800335e:	0d49      	lsrs	r1, r1, #21
 8003360:	0fde      	lsrs	r6, r3, #31
 8003362:	42a9      	cmp	r1, r5
 8003364:	dd04      	ble.n	8003370 <__aeabi_d2iz+0x28>
 8003366:	4811      	ldr	r0, [pc, #68]	@ (80033ac <__aeabi_d2iz+0x64>)
 8003368:	4281      	cmp	r1, r0
 800336a:	dd03      	ble.n	8003374 <__aeabi_d2iz+0x2c>
 800336c:	4b10      	ldr	r3, [pc, #64]	@ (80033b0 <__aeabi_d2iz+0x68>)
 800336e:	18f0      	adds	r0, r6, r3
 8003370:	b002      	add	sp, #8
 8003372:	bd70      	pop	{r4, r5, r6, pc}
 8003374:	2080      	movs	r0, #128	@ 0x80
 8003376:	0340      	lsls	r0, r0, #13
 8003378:	4320      	orrs	r0, r4
 800337a:	4c0e      	ldr	r4, [pc, #56]	@ (80033b4 <__aeabi_d2iz+0x6c>)
 800337c:	1a64      	subs	r4, r4, r1
 800337e:	2c1f      	cmp	r4, #31
 8003380:	dd08      	ble.n	8003394 <__aeabi_d2iz+0x4c>
 8003382:	4b0d      	ldr	r3, [pc, #52]	@ (80033b8 <__aeabi_d2iz+0x70>)
 8003384:	1a5b      	subs	r3, r3, r1
 8003386:	40d8      	lsrs	r0, r3
 8003388:	0003      	movs	r3, r0
 800338a:	4258      	negs	r0, r3
 800338c:	2e00      	cmp	r6, #0
 800338e:	d1ef      	bne.n	8003370 <__aeabi_d2iz+0x28>
 8003390:	0018      	movs	r0, r3
 8003392:	e7ed      	b.n	8003370 <__aeabi_d2iz+0x28>
 8003394:	4b09      	ldr	r3, [pc, #36]	@ (80033bc <__aeabi_d2iz+0x74>)
 8003396:	9a00      	ldr	r2, [sp, #0]
 8003398:	469c      	mov	ip, r3
 800339a:	0003      	movs	r3, r0
 800339c:	4461      	add	r1, ip
 800339e:	408b      	lsls	r3, r1
 80033a0:	40e2      	lsrs	r2, r4
 80033a2:	4313      	orrs	r3, r2
 80033a4:	e7f1      	b.n	800338a <__aeabi_d2iz+0x42>
 80033a6:	46c0      	nop			@ (mov r8, r8)
 80033a8:	000003fe 	.word	0x000003fe
 80033ac:	0000041d 	.word	0x0000041d
 80033b0:	7fffffff 	.word	0x7fffffff
 80033b4:	00000433 	.word	0x00000433
 80033b8:	00000413 	.word	0x00000413
 80033bc:	fffffbed 	.word	0xfffffbed

080033c0 <__aeabi_i2d>:
 80033c0:	b570      	push	{r4, r5, r6, lr}
 80033c2:	2800      	cmp	r0, #0
 80033c4:	d016      	beq.n	80033f4 <__aeabi_i2d+0x34>
 80033c6:	17c3      	asrs	r3, r0, #31
 80033c8:	18c5      	adds	r5, r0, r3
 80033ca:	405d      	eors	r5, r3
 80033cc:	0fc4      	lsrs	r4, r0, #31
 80033ce:	0028      	movs	r0, r5
 80033d0:	f000 f914 	bl	80035fc <__clzsi2>
 80033d4:	4b10      	ldr	r3, [pc, #64]	@ (8003418 <__aeabi_i2d+0x58>)
 80033d6:	1a1b      	subs	r3, r3, r0
 80033d8:	055b      	lsls	r3, r3, #21
 80033da:	0d5b      	lsrs	r3, r3, #21
 80033dc:	280a      	cmp	r0, #10
 80033de:	dc14      	bgt.n	800340a <__aeabi_i2d+0x4a>
 80033e0:	0002      	movs	r2, r0
 80033e2:	002e      	movs	r6, r5
 80033e4:	3215      	adds	r2, #21
 80033e6:	4096      	lsls	r6, r2
 80033e8:	220b      	movs	r2, #11
 80033ea:	1a12      	subs	r2, r2, r0
 80033ec:	40d5      	lsrs	r5, r2
 80033ee:	032d      	lsls	r5, r5, #12
 80033f0:	0b2d      	lsrs	r5, r5, #12
 80033f2:	e003      	b.n	80033fc <__aeabi_i2d+0x3c>
 80033f4:	2400      	movs	r4, #0
 80033f6:	2300      	movs	r3, #0
 80033f8:	2500      	movs	r5, #0
 80033fa:	2600      	movs	r6, #0
 80033fc:	051b      	lsls	r3, r3, #20
 80033fe:	432b      	orrs	r3, r5
 8003400:	07e4      	lsls	r4, r4, #31
 8003402:	4323      	orrs	r3, r4
 8003404:	0030      	movs	r0, r6
 8003406:	0019      	movs	r1, r3
 8003408:	bd70      	pop	{r4, r5, r6, pc}
 800340a:	380b      	subs	r0, #11
 800340c:	4085      	lsls	r5, r0
 800340e:	032d      	lsls	r5, r5, #12
 8003410:	2600      	movs	r6, #0
 8003412:	0b2d      	lsrs	r5, r5, #12
 8003414:	e7f2      	b.n	80033fc <__aeabi_i2d+0x3c>
 8003416:	46c0      	nop			@ (mov r8, r8)
 8003418:	0000041e 	.word	0x0000041e

0800341c <__aeabi_ui2d>:
 800341c:	b510      	push	{r4, lr}
 800341e:	1e04      	subs	r4, r0, #0
 8003420:	d010      	beq.n	8003444 <__aeabi_ui2d+0x28>
 8003422:	f000 f8eb 	bl	80035fc <__clzsi2>
 8003426:	4b0e      	ldr	r3, [pc, #56]	@ (8003460 <__aeabi_ui2d+0x44>)
 8003428:	1a1b      	subs	r3, r3, r0
 800342a:	055b      	lsls	r3, r3, #21
 800342c:	0d5b      	lsrs	r3, r3, #21
 800342e:	280a      	cmp	r0, #10
 8003430:	dc0f      	bgt.n	8003452 <__aeabi_ui2d+0x36>
 8003432:	220b      	movs	r2, #11
 8003434:	0021      	movs	r1, r4
 8003436:	1a12      	subs	r2, r2, r0
 8003438:	40d1      	lsrs	r1, r2
 800343a:	3015      	adds	r0, #21
 800343c:	030a      	lsls	r2, r1, #12
 800343e:	4084      	lsls	r4, r0
 8003440:	0b12      	lsrs	r2, r2, #12
 8003442:	e001      	b.n	8003448 <__aeabi_ui2d+0x2c>
 8003444:	2300      	movs	r3, #0
 8003446:	2200      	movs	r2, #0
 8003448:	051b      	lsls	r3, r3, #20
 800344a:	4313      	orrs	r3, r2
 800344c:	0020      	movs	r0, r4
 800344e:	0019      	movs	r1, r3
 8003450:	bd10      	pop	{r4, pc}
 8003452:	0022      	movs	r2, r4
 8003454:	380b      	subs	r0, #11
 8003456:	4082      	lsls	r2, r0
 8003458:	0312      	lsls	r2, r2, #12
 800345a:	2400      	movs	r4, #0
 800345c:	0b12      	lsrs	r2, r2, #12
 800345e:	e7f3      	b.n	8003448 <__aeabi_ui2d+0x2c>
 8003460:	0000041e 	.word	0x0000041e

08003464 <__aeabi_f2d>:
 8003464:	b570      	push	{r4, r5, r6, lr}
 8003466:	0242      	lsls	r2, r0, #9
 8003468:	0043      	lsls	r3, r0, #1
 800346a:	0fc4      	lsrs	r4, r0, #31
 800346c:	20fe      	movs	r0, #254	@ 0xfe
 800346e:	0e1b      	lsrs	r3, r3, #24
 8003470:	1c59      	adds	r1, r3, #1
 8003472:	0a55      	lsrs	r5, r2, #9
 8003474:	4208      	tst	r0, r1
 8003476:	d00c      	beq.n	8003492 <__aeabi_f2d+0x2e>
 8003478:	21e0      	movs	r1, #224	@ 0xe0
 800347a:	0089      	lsls	r1, r1, #2
 800347c:	468c      	mov	ip, r1
 800347e:	076d      	lsls	r5, r5, #29
 8003480:	0b12      	lsrs	r2, r2, #12
 8003482:	4463      	add	r3, ip
 8003484:	051b      	lsls	r3, r3, #20
 8003486:	4313      	orrs	r3, r2
 8003488:	07e4      	lsls	r4, r4, #31
 800348a:	4323      	orrs	r3, r4
 800348c:	0028      	movs	r0, r5
 800348e:	0019      	movs	r1, r3
 8003490:	bd70      	pop	{r4, r5, r6, pc}
 8003492:	2b00      	cmp	r3, #0
 8003494:	d114      	bne.n	80034c0 <__aeabi_f2d+0x5c>
 8003496:	2d00      	cmp	r5, #0
 8003498:	d01b      	beq.n	80034d2 <__aeabi_f2d+0x6e>
 800349a:	0028      	movs	r0, r5
 800349c:	f000 f8ae 	bl	80035fc <__clzsi2>
 80034a0:	280a      	cmp	r0, #10
 80034a2:	dc1c      	bgt.n	80034de <__aeabi_f2d+0x7a>
 80034a4:	230b      	movs	r3, #11
 80034a6:	002a      	movs	r2, r5
 80034a8:	1a1b      	subs	r3, r3, r0
 80034aa:	40da      	lsrs	r2, r3
 80034ac:	0003      	movs	r3, r0
 80034ae:	3315      	adds	r3, #21
 80034b0:	409d      	lsls	r5, r3
 80034b2:	4b0e      	ldr	r3, [pc, #56]	@ (80034ec <__aeabi_f2d+0x88>)
 80034b4:	0312      	lsls	r2, r2, #12
 80034b6:	1a1b      	subs	r3, r3, r0
 80034b8:	055b      	lsls	r3, r3, #21
 80034ba:	0b12      	lsrs	r2, r2, #12
 80034bc:	0d5b      	lsrs	r3, r3, #21
 80034be:	e7e1      	b.n	8003484 <__aeabi_f2d+0x20>
 80034c0:	2d00      	cmp	r5, #0
 80034c2:	d009      	beq.n	80034d8 <__aeabi_f2d+0x74>
 80034c4:	0b13      	lsrs	r3, r2, #12
 80034c6:	2280      	movs	r2, #128	@ 0x80
 80034c8:	0312      	lsls	r2, r2, #12
 80034ca:	431a      	orrs	r2, r3
 80034cc:	076d      	lsls	r5, r5, #29
 80034ce:	4b08      	ldr	r3, [pc, #32]	@ (80034f0 <__aeabi_f2d+0x8c>)
 80034d0:	e7d8      	b.n	8003484 <__aeabi_f2d+0x20>
 80034d2:	2300      	movs	r3, #0
 80034d4:	2200      	movs	r2, #0
 80034d6:	e7d5      	b.n	8003484 <__aeabi_f2d+0x20>
 80034d8:	2200      	movs	r2, #0
 80034da:	4b05      	ldr	r3, [pc, #20]	@ (80034f0 <__aeabi_f2d+0x8c>)
 80034dc:	e7d2      	b.n	8003484 <__aeabi_f2d+0x20>
 80034de:	0003      	movs	r3, r0
 80034e0:	002a      	movs	r2, r5
 80034e2:	3b0b      	subs	r3, #11
 80034e4:	409a      	lsls	r2, r3
 80034e6:	2500      	movs	r5, #0
 80034e8:	e7e3      	b.n	80034b2 <__aeabi_f2d+0x4e>
 80034ea:	46c0      	nop			@ (mov r8, r8)
 80034ec:	00000389 	.word	0x00000389
 80034f0:	000007ff 	.word	0x000007ff

080034f4 <__aeabi_d2f>:
 80034f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80034f6:	004b      	lsls	r3, r1, #1
 80034f8:	030f      	lsls	r7, r1, #12
 80034fa:	0d5b      	lsrs	r3, r3, #21
 80034fc:	4c3b      	ldr	r4, [pc, #236]	@ (80035ec <__aeabi_d2f+0xf8>)
 80034fe:	0f45      	lsrs	r5, r0, #29
 8003500:	b083      	sub	sp, #12
 8003502:	0a7f      	lsrs	r7, r7, #9
 8003504:	1c5e      	adds	r6, r3, #1
 8003506:	432f      	orrs	r7, r5
 8003508:	9000      	str	r0, [sp, #0]
 800350a:	9101      	str	r1, [sp, #4]
 800350c:	0fca      	lsrs	r2, r1, #31
 800350e:	00c5      	lsls	r5, r0, #3
 8003510:	4226      	tst	r6, r4
 8003512:	d00b      	beq.n	800352c <__aeabi_d2f+0x38>
 8003514:	4936      	ldr	r1, [pc, #216]	@ (80035f0 <__aeabi_d2f+0xfc>)
 8003516:	185c      	adds	r4, r3, r1
 8003518:	2cfe      	cmp	r4, #254	@ 0xfe
 800351a:	dd13      	ble.n	8003544 <__aeabi_d2f+0x50>
 800351c:	20ff      	movs	r0, #255	@ 0xff
 800351e:	2300      	movs	r3, #0
 8003520:	05c0      	lsls	r0, r0, #23
 8003522:	4318      	orrs	r0, r3
 8003524:	07d2      	lsls	r2, r2, #31
 8003526:	4310      	orrs	r0, r2
 8003528:	b003      	add	sp, #12
 800352a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800352c:	2b00      	cmp	r3, #0
 800352e:	d102      	bne.n	8003536 <__aeabi_d2f+0x42>
 8003530:	2000      	movs	r0, #0
 8003532:	2300      	movs	r3, #0
 8003534:	e7f4      	b.n	8003520 <__aeabi_d2f+0x2c>
 8003536:	433d      	orrs	r5, r7
 8003538:	d0f0      	beq.n	800351c <__aeabi_d2f+0x28>
 800353a:	2380      	movs	r3, #128	@ 0x80
 800353c:	03db      	lsls	r3, r3, #15
 800353e:	20ff      	movs	r0, #255	@ 0xff
 8003540:	433b      	orrs	r3, r7
 8003542:	e7ed      	b.n	8003520 <__aeabi_d2f+0x2c>
 8003544:	2c00      	cmp	r4, #0
 8003546:	dd14      	ble.n	8003572 <__aeabi_d2f+0x7e>
 8003548:	9b00      	ldr	r3, [sp, #0]
 800354a:	00ff      	lsls	r7, r7, #3
 800354c:	019b      	lsls	r3, r3, #6
 800354e:	1e58      	subs	r0, r3, #1
 8003550:	4183      	sbcs	r3, r0
 8003552:	0f69      	lsrs	r1, r5, #29
 8003554:	433b      	orrs	r3, r7
 8003556:	430b      	orrs	r3, r1
 8003558:	0759      	lsls	r1, r3, #29
 800355a:	d041      	beq.n	80035e0 <__aeabi_d2f+0xec>
 800355c:	210f      	movs	r1, #15
 800355e:	4019      	ands	r1, r3
 8003560:	2904      	cmp	r1, #4
 8003562:	d028      	beq.n	80035b6 <__aeabi_d2f+0xc2>
 8003564:	3304      	adds	r3, #4
 8003566:	0159      	lsls	r1, r3, #5
 8003568:	d525      	bpl.n	80035b6 <__aeabi_d2f+0xc2>
 800356a:	3401      	adds	r4, #1
 800356c:	2300      	movs	r3, #0
 800356e:	b2e0      	uxtb	r0, r4
 8003570:	e7d6      	b.n	8003520 <__aeabi_d2f+0x2c>
 8003572:	0021      	movs	r1, r4
 8003574:	3117      	adds	r1, #23
 8003576:	dbdb      	blt.n	8003530 <__aeabi_d2f+0x3c>
 8003578:	2180      	movs	r1, #128	@ 0x80
 800357a:	201e      	movs	r0, #30
 800357c:	0409      	lsls	r1, r1, #16
 800357e:	4339      	orrs	r1, r7
 8003580:	1b00      	subs	r0, r0, r4
 8003582:	281f      	cmp	r0, #31
 8003584:	dd1b      	ble.n	80035be <__aeabi_d2f+0xca>
 8003586:	2602      	movs	r6, #2
 8003588:	4276      	negs	r6, r6
 800358a:	1b34      	subs	r4, r6, r4
 800358c:	000e      	movs	r6, r1
 800358e:	40e6      	lsrs	r6, r4
 8003590:	0034      	movs	r4, r6
 8003592:	2820      	cmp	r0, #32
 8003594:	d004      	beq.n	80035a0 <__aeabi_d2f+0xac>
 8003596:	4817      	ldr	r0, [pc, #92]	@ (80035f4 <__aeabi_d2f+0x100>)
 8003598:	4684      	mov	ip, r0
 800359a:	4463      	add	r3, ip
 800359c:	4099      	lsls	r1, r3
 800359e:	430d      	orrs	r5, r1
 80035a0:	002b      	movs	r3, r5
 80035a2:	1e59      	subs	r1, r3, #1
 80035a4:	418b      	sbcs	r3, r1
 80035a6:	4323      	orrs	r3, r4
 80035a8:	0759      	lsls	r1, r3, #29
 80035aa:	d015      	beq.n	80035d8 <__aeabi_d2f+0xe4>
 80035ac:	210f      	movs	r1, #15
 80035ae:	2400      	movs	r4, #0
 80035b0:	4019      	ands	r1, r3
 80035b2:	2904      	cmp	r1, #4
 80035b4:	d117      	bne.n	80035e6 <__aeabi_d2f+0xf2>
 80035b6:	019b      	lsls	r3, r3, #6
 80035b8:	0a5b      	lsrs	r3, r3, #9
 80035ba:	b2e0      	uxtb	r0, r4
 80035bc:	e7b0      	b.n	8003520 <__aeabi_d2f+0x2c>
 80035be:	4c0e      	ldr	r4, [pc, #56]	@ (80035f8 <__aeabi_d2f+0x104>)
 80035c0:	191c      	adds	r4, r3, r4
 80035c2:	002b      	movs	r3, r5
 80035c4:	40a5      	lsls	r5, r4
 80035c6:	40c3      	lsrs	r3, r0
 80035c8:	40a1      	lsls	r1, r4
 80035ca:	1e68      	subs	r0, r5, #1
 80035cc:	4185      	sbcs	r5, r0
 80035ce:	4329      	orrs	r1, r5
 80035d0:	430b      	orrs	r3, r1
 80035d2:	2400      	movs	r4, #0
 80035d4:	0759      	lsls	r1, r3, #29
 80035d6:	d1c1      	bne.n	800355c <__aeabi_d2f+0x68>
 80035d8:	019b      	lsls	r3, r3, #6
 80035da:	2000      	movs	r0, #0
 80035dc:	0a5b      	lsrs	r3, r3, #9
 80035de:	e79f      	b.n	8003520 <__aeabi_d2f+0x2c>
 80035e0:	08db      	lsrs	r3, r3, #3
 80035e2:	b2e0      	uxtb	r0, r4
 80035e4:	e79c      	b.n	8003520 <__aeabi_d2f+0x2c>
 80035e6:	3304      	adds	r3, #4
 80035e8:	e7e5      	b.n	80035b6 <__aeabi_d2f+0xc2>
 80035ea:	46c0      	nop			@ (mov r8, r8)
 80035ec:	000007fe 	.word	0x000007fe
 80035f0:	fffffc80 	.word	0xfffffc80
 80035f4:	fffffca2 	.word	0xfffffca2
 80035f8:	fffffc82 	.word	0xfffffc82

080035fc <__clzsi2>:
 80035fc:	211c      	movs	r1, #28
 80035fe:	2301      	movs	r3, #1
 8003600:	041b      	lsls	r3, r3, #16
 8003602:	4298      	cmp	r0, r3
 8003604:	d301      	bcc.n	800360a <__clzsi2+0xe>
 8003606:	0c00      	lsrs	r0, r0, #16
 8003608:	3910      	subs	r1, #16
 800360a:	0a1b      	lsrs	r3, r3, #8
 800360c:	4298      	cmp	r0, r3
 800360e:	d301      	bcc.n	8003614 <__clzsi2+0x18>
 8003610:	0a00      	lsrs	r0, r0, #8
 8003612:	3908      	subs	r1, #8
 8003614:	091b      	lsrs	r3, r3, #4
 8003616:	4298      	cmp	r0, r3
 8003618:	d301      	bcc.n	800361e <__clzsi2+0x22>
 800361a:	0900      	lsrs	r0, r0, #4
 800361c:	3904      	subs	r1, #4
 800361e:	a202      	add	r2, pc, #8	@ (adr r2, 8003628 <__clzsi2+0x2c>)
 8003620:	5c10      	ldrb	r0, [r2, r0]
 8003622:	1840      	adds	r0, r0, r1
 8003624:	4770      	bx	lr
 8003626:	46c0      	nop			@ (mov r8, r8)
 8003628:	02020304 	.word	0x02020304
 800362c:	01010101 	.word	0x01010101
	...

08003638 <__clzdi2>:
 8003638:	b510      	push	{r4, lr}
 800363a:	2900      	cmp	r1, #0
 800363c:	d103      	bne.n	8003646 <__clzdi2+0xe>
 800363e:	f7ff ffdd 	bl	80035fc <__clzsi2>
 8003642:	3020      	adds	r0, #32
 8003644:	e002      	b.n	800364c <__clzdi2+0x14>
 8003646:	0008      	movs	r0, r1
 8003648:	f7ff ffd8 	bl	80035fc <__clzsi2>
 800364c:	bd10      	pop	{r4, pc}
 800364e:	46c0      	nop			@ (mov r8, r8)

08003650 <WriteUint8ArrayEeprom>:
#include "../Inc/EEProm.h"

uint32_t WriteUint8ArrayEeprom(uint32_t startAddr, uint8_t data[], uint16_t size)
{
 8003650:	b590      	push	{r4, r7, lr}
 8003652:	b087      	sub	sp, #28
 8003654:	af00      	add	r7, sp, #0
 8003656:	60f8      	str	r0, [r7, #12]
 8003658:	60b9      	str	r1, [r7, #8]
 800365a:	1dbb      	adds	r3, r7, #6
 800365c:	801a      	strh	r2, [r3, #0]
    static uint32_t addr;
    addr = startAddr;
 800365e:	4b17      	ldr	r3, [pc, #92]	@ (80036bc <WriteUint8ArrayEeprom+0x6c>)
 8003660:	68fa      	ldr	r2, [r7, #12]
 8003662:	601a      	str	r2, [r3, #0]
    HAL_FLASHEx_DATAEEPROM_Unlock();
 8003664:	f00b ff36 	bl	800f4d4 <HAL_FLASHEx_DATAEEPROM_Unlock>
    for (uint16_t i = 0; i < size; i++)
 8003668:	2316      	movs	r3, #22
 800366a:	18fb      	adds	r3, r7, r3
 800366c:	2200      	movs	r2, #0
 800366e:	801a      	strh	r2, [r3, #0]
 8003670:	e015      	b.n	800369e <WriteUint8ArrayEeprom+0x4e>
    {
        HAL_FLASHEx_DATAEEPROM_Program(FLASH_TYPEPROGRAMDATA_BYTE, addr, data[i]);
 8003672:	4b12      	ldr	r3, [pc, #72]	@ (80036bc <WriteUint8ArrayEeprom+0x6c>)
 8003674:	6819      	ldr	r1, [r3, #0]
 8003676:	2416      	movs	r4, #22
 8003678:	193b      	adds	r3, r7, r4
 800367a:	881b      	ldrh	r3, [r3, #0]
 800367c:	68ba      	ldr	r2, [r7, #8]
 800367e:	18d3      	adds	r3, r2, r3
 8003680:	781b      	ldrb	r3, [r3, #0]
 8003682:	001a      	movs	r2, r3
 8003684:	2000      	movs	r0, #0
 8003686:	f00b ff8d 	bl	800f5a4 <HAL_FLASHEx_DATAEEPROM_Program>
        addr++;
 800368a:	4b0c      	ldr	r3, [pc, #48]	@ (80036bc <WriteUint8ArrayEeprom+0x6c>)
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	1c5a      	adds	r2, r3, #1
 8003690:	4b0a      	ldr	r3, [pc, #40]	@ (80036bc <WriteUint8ArrayEeprom+0x6c>)
 8003692:	601a      	str	r2, [r3, #0]
    for (uint16_t i = 0; i < size; i++)
 8003694:	193b      	adds	r3, r7, r4
 8003696:	881a      	ldrh	r2, [r3, #0]
 8003698:	193b      	adds	r3, r7, r4
 800369a:	3201      	adds	r2, #1
 800369c:	801a      	strh	r2, [r3, #0]
 800369e:	2316      	movs	r3, #22
 80036a0:	18fa      	adds	r2, r7, r3
 80036a2:	1dbb      	adds	r3, r7, #6
 80036a4:	8812      	ldrh	r2, [r2, #0]
 80036a6:	881b      	ldrh	r3, [r3, #0]
 80036a8:	429a      	cmp	r2, r3
 80036aa:	d3e2      	bcc.n	8003672 <WriteUint8ArrayEeprom+0x22>
    }
    HAL_FLASHEx_DATAEEPROM_Lock();
 80036ac:	f00b ff40 	bl	800f530 <HAL_FLASHEx_DATAEEPROM_Lock>
    return addr;
 80036b0:	4b02      	ldr	r3, [pc, #8]	@ (80036bc <WriteUint8ArrayEeprom+0x6c>)
 80036b2:	681b      	ldr	r3, [r3, #0]
}
 80036b4:	0018      	movs	r0, r3
 80036b6:	46bd      	mov	sp, r7
 80036b8:	b007      	add	sp, #28
 80036ba:	bd90      	pop	{r4, r7, pc}
 80036bc:	20000440 	.word	0x20000440

080036c0 <WriteUint8ArrayEepromSafe>:

void WriteUint8ArrayEepromSafe(uint32_t startAddr, uint8_t data[], uint16_t size, uint16_t maxSize)
{
 80036c0:	b580      	push	{r7, lr}
 80036c2:	b084      	sub	sp, #16
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	60f8      	str	r0, [r7, #12]
 80036c8:	60b9      	str	r1, [r7, #8]
 80036ca:	0019      	movs	r1, r3
 80036cc:	1dbb      	adds	r3, r7, #6
 80036ce:	801a      	strh	r2, [r3, #0]
 80036d0:	1d3b      	adds	r3, r7, #4
 80036d2:	1c0a      	adds	r2, r1, #0
 80036d4:	801a      	strh	r2, [r3, #0]
    if (size <= maxSize)
 80036d6:	1dba      	adds	r2, r7, #6
 80036d8:	1d3b      	adds	r3, r7, #4
 80036da:	8812      	ldrh	r2, [r2, #0]
 80036dc:	881b      	ldrh	r3, [r3, #0]
 80036de:	429a      	cmp	r2, r3
 80036e0:	d806      	bhi.n	80036f0 <WriteUint8ArrayEepromSafe+0x30>
    {
        WriteUint8ArrayEeprom(startAddr, data, size);
 80036e2:	1dbb      	adds	r3, r7, #6
 80036e4:	881a      	ldrh	r2, [r3, #0]
 80036e6:	68b9      	ldr	r1, [r7, #8]
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	0018      	movs	r0, r3
 80036ec:	f7ff ffb0 	bl	8003650 <WriteUint8ArrayEeprom>
    }
}
 80036f0:	46c0      	nop			@ (mov r8, r8)
 80036f2:	46bd      	mov	sp, r7
 80036f4:	b004      	add	sp, #16
 80036f6:	bd80      	pop	{r7, pc}

080036f8 <ReadUint8ArrayEEprom>:

void ReadUint8ArrayEEprom(uint32_t startAddr, uint8_t data[], uint16_t size)
{
 80036f8:	b580      	push	{r7, lr}
 80036fa:	b086      	sub	sp, #24
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	60f8      	str	r0, [r7, #12]
 8003700:	60b9      	str	r1, [r7, #8]
 8003702:	1dbb      	adds	r3, r7, #6
 8003704:	801a      	strh	r2, [r3, #0]
    for (uint16_t i = 0; i < size; i++)
 8003706:	2316      	movs	r3, #22
 8003708:	18fb      	adds	r3, r7, r3
 800370a:	2200      	movs	r2, #0
 800370c:	801a      	strh	r2, [r3, #0]
 800370e:	e010      	b.n	8003732 <ReadUint8ArrayEEprom+0x3a>
    {
        data[i] = *(uint8_t*)(startAddr + i);
 8003710:	2016      	movs	r0, #22
 8003712:	183b      	adds	r3, r7, r0
 8003714:	881a      	ldrh	r2, [r3, #0]
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	18d3      	adds	r3, r2, r3
 800371a:	0019      	movs	r1, r3
 800371c:	183b      	adds	r3, r7, r0
 800371e:	881b      	ldrh	r3, [r3, #0]
 8003720:	68ba      	ldr	r2, [r7, #8]
 8003722:	18d3      	adds	r3, r2, r3
 8003724:	780a      	ldrb	r2, [r1, #0]
 8003726:	701a      	strb	r2, [r3, #0]
    for (uint16_t i = 0; i < size; i++)
 8003728:	183b      	adds	r3, r7, r0
 800372a:	881a      	ldrh	r2, [r3, #0]
 800372c:	183b      	adds	r3, r7, r0
 800372e:	3201      	adds	r2, #1
 8003730:	801a      	strh	r2, [r3, #0]
 8003732:	2316      	movs	r3, #22
 8003734:	18fa      	adds	r2, r7, r3
 8003736:	1dbb      	adds	r3, r7, #6
 8003738:	8812      	ldrh	r2, [r2, #0]
 800373a:	881b      	ldrh	r3, [r3, #0]
 800373c:	429a      	cmp	r2, r3
 800373e:	d3e7      	bcc.n	8003710 <ReadUint8ArrayEEprom+0x18>
    }
}
 8003740:	46c0      	nop			@ (mov r8, r8)
 8003742:	46c0      	nop			@ (mov r8, r8)
 8003744:	46bd      	mov	sp, r7
 8003746:	b006      	add	sp, #24
 8003748:	bd80      	pop	{r7, pc}

0800374a <ClearEEprom>:

void ClearEEprom(uint32_t startAddr, uint16_t size)
{
 800374a:	b590      	push	{r4, r7, lr}
 800374c:	b085      	sub	sp, #20
 800374e:	af00      	add	r7, sp, #0
 8003750:	6078      	str	r0, [r7, #4]
 8003752:	000a      	movs	r2, r1
 8003754:	1cbb      	adds	r3, r7, #2
 8003756:	801a      	strh	r2, [r3, #0]
    HAL_FLASHEx_DATAEEPROM_Unlock();
 8003758:	f00b febc 	bl	800f4d4 <HAL_FLASHEx_DATAEEPROM_Unlock>
    for (uint16_t i = 0; i < size; i+=4)
 800375c:	230e      	movs	r3, #14
 800375e:	18fb      	adds	r3, r7, r3
 8003760:	2200      	movs	r2, #0
 8003762:	801a      	strh	r2, [r3, #0]
 8003764:	e00c      	b.n	8003780 <ClearEEprom+0x36>
    {
        HAL_FLASHEx_DATAEEPROM_Erase(startAddr+i);
 8003766:	240e      	movs	r4, #14
 8003768:	193b      	adds	r3, r7, r4
 800376a:	881a      	ldrh	r2, [r3, #0]
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	18d3      	adds	r3, r2, r3
 8003770:	0018      	movs	r0, r3
 8003772:	f00b feeb 	bl	800f54c <HAL_FLASHEx_DATAEEPROM_Erase>
    for (uint16_t i = 0; i < size; i+=4)
 8003776:	193b      	adds	r3, r7, r4
 8003778:	193a      	adds	r2, r7, r4
 800377a:	8812      	ldrh	r2, [r2, #0]
 800377c:	3204      	adds	r2, #4
 800377e:	801a      	strh	r2, [r3, #0]
 8003780:	230e      	movs	r3, #14
 8003782:	18fa      	adds	r2, r7, r3
 8003784:	1cbb      	adds	r3, r7, #2
 8003786:	8812      	ldrh	r2, [r2, #0]
 8003788:	881b      	ldrh	r3, [r3, #0]
 800378a:	429a      	cmp	r2, r3
 800378c:	d3eb      	bcc.n	8003766 <ClearEEprom+0x1c>
    }
    HAL_FLASHEx_DATAEEPROM_Lock();
 800378e:	f00b fecf 	bl	800f530 <HAL_FLASHEx_DATAEEPROM_Lock>
}
 8003792:	46c0      	nop			@ (mov r8, r8)
 8003794:	46bd      	mov	sp, r7
 8003796:	b005      	add	sp, #20
 8003798:	bd90      	pop	{r4, r7, pc}
	...

0800379c <forceNTPupdate>:
static ESP_States EspState = ESP_STATE_INIT;
static AT_Mode Mode;
static ESP_Test TestState = ESP_TEST_INIT;
//static ATCommandsParameters ATCommands[ESP_AT_COMMANDS_COUNT];

void forceNTPupdate() {
 800379c:	b580      	push	{r7, lr}
 800379e:	af00      	add	r7, sp, #0
  ESPNTPTimeStamp = 0;
 80037a0:	4b02      	ldr	r3, [pc, #8]	@ (80037ac <forceNTPupdate+0x10>)
 80037a2:	2200      	movs	r2, #0
 80037a4:	601a      	str	r2, [r3, #0]
}
 80037a6:	46c0      	nop			@ (mov r8, r8)
 80037a8:	46bd      	mov	sp, r7
 80037aa:	bd80      	pop	{r7, pc}
 80037ac:	20000a20 	.word	0x20000a20

080037b0 <setESPTimeStamp>:

void setESPTimeStamp(uint32_t delayms) {
 80037b0:	b580      	push	{r7, lr}
 80037b2:	b082      	sub	sp, #8
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	6078      	str	r0, [r7, #4]
  ESPTimeStamp = HAL_GetTick() + delayms;
 80037b8:	f00a fe56 	bl	800e468 <HAL_GetTick>
 80037bc:	0002      	movs	r2, r0
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	18d2      	adds	r2, r2, r3
 80037c2:	4b03      	ldr	r3, [pc, #12]	@ (80037d0 <setESPTimeStamp+0x20>)
 80037c4:	601a      	str	r2, [r3, #0]
//  ATExpectation = RECEIVE_EXPECTATION_OK;
//  ATCommand = AT_WAKEUP;
//  EspState = ESP_STATE_INIT;
}
 80037c6:	46c0      	nop			@ (mov r8, r8)
 80037c8:	46bd      	mov	sp, r7
 80037ca:	b002      	add	sp, #8
 80037cc:	bd80      	pop	{r7, pc}
 80037ce:	46c0      	nop			@ (mov r8, r8)
 80037d0:	20000a1c 	.word	0x20000a1c

080037d4 <setCharges>:
void setCharges(){
 80037d4:	b580      	push	{r7, lr}
 80037d6:	af00      	add	r7, sp, #0
  batteryCharge = ReadBatteryVoltage();
 80037d8:	f002 fd18 	bl	800620c <ReadBatteryVoltage>
 80037dc:	1c02      	adds	r2, r0, #0
 80037de:	4b05      	ldr	r3, [pc, #20]	@ (80037f4 <setCharges+0x20>)
 80037e0:	601a      	str	r2, [r3, #0]
  solarCharge = ReadSolarVoltage();
 80037e2:	f002 fd75 	bl	80062d0 <ReadSolarVoltage>
 80037e6:	1c02      	adds	r2, r0, #0
 80037e8:	4b03      	ldr	r3, [pc, #12]	@ (80037f8 <setCharges+0x24>)
 80037ea:	601a      	str	r2, [r3, #0]
}
 80037ec:	46c0      	nop			@ (mov r8, r8)
 80037ee:	46bd      	mov	sp, r7
 80037f0:	bd80      	pop	{r7, pc}
 80037f2:	46c0      	nop			@ (mov r8, r8)
 80037f4:	20000570 	.word	0x20000570
 80037f8:	20000574 	.word	0x20000574

080037fc <checkEEprom>:
bool checkEEprom(){
 80037fc:	b580      	push	{r7, lr}
 80037fe:	b082      	sub	sp, #8
 8003800:	af00      	add	r7, sp, #0
  static uint8_t tempConfig[IdSize];
  static uint32_t configSum = 0;
  static bool test;
  ReadUint8ArrayEEprom(TempConfigAddr, tempConfig, IdSize);
 8003802:	4b15      	ldr	r3, [pc, #84]	@ (8003858 <checkEEprom+0x5c>)
 8003804:	4815      	ldr	r0, [pc, #84]	@ (800385c <checkEEprom+0x60>)
 8003806:	220c      	movs	r2, #12
 8003808:	0019      	movs	r1, r3
 800380a:	f7ff ff75 	bl	80036f8 <ReadUint8ArrayEEprom>
  for(uint8_t i = 0; i < IdSize; i++){
 800380e:	1dfb      	adds	r3, r7, #7
 8003810:	2200      	movs	r2, #0
 8003812:	701a      	strb	r2, [r3, #0]
 8003814:	e00e      	b.n	8003834 <checkEEprom+0x38>
    configSum += tempConfig[i];
 8003816:	1dfb      	adds	r3, r7, #7
 8003818:	781b      	ldrb	r3, [r3, #0]
 800381a:	4a0f      	ldr	r2, [pc, #60]	@ (8003858 <checkEEprom+0x5c>)
 800381c:	5cd3      	ldrb	r3, [r2, r3]
 800381e:	001a      	movs	r2, r3
 8003820:	4b0f      	ldr	r3, [pc, #60]	@ (8003860 <checkEEprom+0x64>)
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	18d2      	adds	r2, r2, r3
 8003826:	4b0e      	ldr	r3, [pc, #56]	@ (8003860 <checkEEprom+0x64>)
 8003828:	601a      	str	r2, [r3, #0]
  for(uint8_t i = 0; i < IdSize; i++){
 800382a:	1dfb      	adds	r3, r7, #7
 800382c:	781a      	ldrb	r2, [r3, #0]
 800382e:	1dfb      	adds	r3, r7, #7
 8003830:	3201      	adds	r2, #1
 8003832:	701a      	strb	r2, [r3, #0]
 8003834:	1dfb      	adds	r3, r7, #7
 8003836:	781b      	ldrb	r3, [r3, #0]
 8003838:	2b0b      	cmp	r3, #11
 800383a:	d9ec      	bls.n	8003816 <checkEEprom+0x1a>
  }
  test = (configSum == 0);
 800383c:	4b08      	ldr	r3, [pc, #32]	@ (8003860 <checkEEprom+0x64>)
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	425a      	negs	r2, r3
 8003842:	4153      	adcs	r3, r2
 8003844:	b2da      	uxtb	r2, r3
 8003846:	4b07      	ldr	r3, [pc, #28]	@ (8003864 <checkEEprom+0x68>)
 8003848:	701a      	strb	r2, [r3, #0]
  return test;
 800384a:	4b06      	ldr	r3, [pc, #24]	@ (8003864 <checkEEprom+0x68>)
 800384c:	781b      	ldrb	r3, [r3, #0]
}
 800384e:	0018      	movs	r0, r3
 8003850:	46bd      	mov	sp, r7
 8003852:	b002      	add	sp, #8
 8003854:	bd80      	pop	{r7, pc}
 8003856:	46c0      	nop			@ (mov r8, r8)
 8003858:	20000a30 	.word	0x20000a30
 800385c:	0808000c 	.word	0x0808000c
 8003860:	20000a3c 	.word	0x20000a3c
 8003864:	20000a40 	.word	0x20000a40

08003868 <checkName>:
bool checkName(){
 8003868:	b580      	push	{r7, lr}
 800386a:	b082      	sub	sp, #8
 800386c:	af00      	add	r7, sp, #0
  static uint8_t nameConfig[CustomNameMaxLength];
  static uint32_t configSum = 0;
  static bool test;
  ReadUint8ArrayEEprom(CustomNameConfigAddr, nameConfig, CustomNameMaxLength);
 800386e:	4b15      	ldr	r3, [pc, #84]	@ (80038c4 <checkName+0x5c>)
 8003870:	4815      	ldr	r0, [pc, #84]	@ (80038c8 <checkName+0x60>)
 8003872:	221e      	movs	r2, #30
 8003874:	0019      	movs	r1, r3
 8003876:	f7ff ff3f 	bl	80036f8 <ReadUint8ArrayEEprom>
  for(uint8_t i = 0; i < IdSize; i++){
 800387a:	1dfb      	adds	r3, r7, #7
 800387c:	2200      	movs	r2, #0
 800387e:	701a      	strb	r2, [r3, #0]
 8003880:	e00e      	b.n	80038a0 <checkName+0x38>
    configSum += nameConfig[i];
 8003882:	1dfb      	adds	r3, r7, #7
 8003884:	781b      	ldrb	r3, [r3, #0]
 8003886:	4a0f      	ldr	r2, [pc, #60]	@ (80038c4 <checkName+0x5c>)
 8003888:	5cd3      	ldrb	r3, [r2, r3]
 800388a:	001a      	movs	r2, r3
 800388c:	4b0f      	ldr	r3, [pc, #60]	@ (80038cc <checkName+0x64>)
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	18d2      	adds	r2, r2, r3
 8003892:	4b0e      	ldr	r3, [pc, #56]	@ (80038cc <checkName+0x64>)
 8003894:	601a      	str	r2, [r3, #0]
  for(uint8_t i = 0; i < IdSize; i++){
 8003896:	1dfb      	adds	r3, r7, #7
 8003898:	781a      	ldrb	r2, [r3, #0]
 800389a:	1dfb      	adds	r3, r7, #7
 800389c:	3201      	adds	r2, #1
 800389e:	701a      	strb	r2, [r3, #0]
 80038a0:	1dfb      	adds	r3, r7, #7
 80038a2:	781b      	ldrb	r3, [r3, #0]
 80038a4:	2b0b      	cmp	r3, #11
 80038a6:	d9ec      	bls.n	8003882 <checkName+0x1a>
  }
  test = (configSum != 0);
 80038a8:	4b08      	ldr	r3, [pc, #32]	@ (80038cc <checkName+0x64>)
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	1e5a      	subs	r2, r3, #1
 80038ae:	4193      	sbcs	r3, r2
 80038b0:	b2da      	uxtb	r2, r3
 80038b2:	4b07      	ldr	r3, [pc, #28]	@ (80038d0 <checkName+0x68>)
 80038b4:	701a      	strb	r2, [r3, #0]
  return test;
 80038b6:	4b06      	ldr	r3, [pc, #24]	@ (80038d0 <checkName+0x68>)
 80038b8:	781b      	ldrb	r3, [r3, #0]
}
 80038ba:	0018      	movs	r0, r3
 80038bc:	46bd      	mov	sp, r7
 80038be:	b002      	add	sp, #8
 80038c0:	bd80      	pop	{r7, pc}
 80038c2:	46c0      	nop			@ (mov r8, r8)
 80038c4:	20000a44 	.word	0x20000a44
 80038c8:	08080090 	.word	0x08080090
 80038cc:	20000a64 	.word	0x20000a64
 80038d0:	20000a68 	.word	0x20000a68

080038d4 <ESP_GetHT>:
void ESP_GetHT(float temp, float humid){
 80038d4:	b580      	push	{r7, lr}
 80038d6:	b082      	sub	sp, #8
 80038d8:	af00      	add	r7, sp, #0
 80038da:	6078      	str	r0, [r7, #4]
 80038dc:	6039      	str	r1, [r7, #0]
  Temperature = temp;
 80038de:	4b05      	ldr	r3, [pc, #20]	@ (80038f4 <ESP_GetHT+0x20>)
 80038e0:	687a      	ldr	r2, [r7, #4]
 80038e2:	601a      	str	r2, [r3, #0]
  Humidity = humid;
 80038e4:	4b04      	ldr	r3, [pc, #16]	@ (80038f8 <ESP_GetHT+0x24>)
 80038e6:	683a      	ldr	r2, [r7, #0]
 80038e8:	601a      	str	r2, [r3, #0]
}
 80038ea:	46c0      	nop			@ (mov r8, r8)
 80038ec:	46bd      	mov	sp, r7
 80038ee:	b002      	add	sp, #8
 80038f0:	bd80      	pop	{r7, pc}
 80038f2:	46c0      	nop			@ (mov r8, r8)
 80038f4:	20000568 	.word	0x20000568
 80038f8:	2000056c 	.word	0x2000056c

080038fc <setHIDS>:
void setHIDS(float temp, float humid){
 80038fc:	b580      	push	{r7, lr}
 80038fe:	b082      	sub	sp, #8
 8003900:	af00      	add	r7, sp, #0
 8003902:	6078      	str	r0, [r7, #4]
 8003904:	6039      	str	r1, [r7, #0]
  Temperature = temp;
 8003906:	4b05      	ldr	r3, [pc, #20]	@ (800391c <setHIDS+0x20>)
 8003908:	687a      	ldr	r2, [r7, #4]
 800390a:	601a      	str	r2, [r3, #0]
  Humidity = humid;
 800390c:	4b04      	ldr	r3, [pc, #16]	@ (8003920 <setHIDS+0x24>)
 800390e:	683a      	ldr	r2, [r7, #0]
 8003910:	601a      	str	r2, [r3, #0]
}
 8003912:	46c0      	nop			@ (mov r8, r8)
 8003914:	46bd      	mov	sp, r7
 8003916:	b002      	add	sp, #8
 8003918:	bd80      	pop	{r7, pc}
 800391a:	46c0      	nop			@ (mov r8, r8)
 800391c:	20000568 	.word	0x20000568
 8003920:	2000056c 	.word	0x2000056c

08003924 <setVOC>:
void setVOC(uint16_t voc){
 8003924:	b580      	push	{r7, lr}
 8003926:	b082      	sub	sp, #8
 8003928:	af00      	add	r7, sp, #0
 800392a:	0002      	movs	r2, r0
 800392c:	1dbb      	adds	r3, r7, #6
 800392e:	801a      	strh	r2, [r3, #0]
  VOCIndex = voc;
 8003930:	4b03      	ldr	r3, [pc, #12]	@ (8003940 <setVOC+0x1c>)
 8003932:	1dba      	adds	r2, r7, #6
 8003934:	8812      	ldrh	r2, [r2, #0]
 8003936:	801a      	strh	r2, [r3, #0]
}
 8003938:	46c0      	nop			@ (mov r8, r8)
 800393a:	46bd      	mov	sp, r7
 800393c:	b002      	add	sp, #8
 800393e:	bd80      	pop	{r7, pc}
 8003940:	20000578 	.word	0x20000578

08003944 <setMic>:
void setMic(float dB){
 8003944:	b580      	push	{r7, lr}
 8003946:	b082      	sub	sp, #8
 8003948:	af00      	add	r7, sp, #0
 800394a:	6078      	str	r0, [r7, #4]
  dBA = dB;
 800394c:	4b03      	ldr	r3, [pc, #12]	@ (800395c <setMic+0x18>)
 800394e:	687a      	ldr	r2, [r7, #4]
 8003950:	601a      	str	r2, [r3, #0]
}
 8003952:	46c0      	nop			@ (mov r8, r8)
 8003954:	46bd      	mov	sp, r7
 8003956:	b002      	add	sp, #8
 8003958:	bd80      	pop	{r7, pc}
 800395a:	46c0      	nop			@ (mov r8, r8)
 800395c:	2000057c 	.word	0x2000057c

08003960 <setPMs>:

void setPMs(uint16_t PM2, uint16_t PM10, uint16_t nox) {
 8003960:	b590      	push	{r4, r7, lr}
 8003962:	b083      	sub	sp, #12
 8003964:	af00      	add	r7, sp, #0
 8003966:	0004      	movs	r4, r0
 8003968:	0008      	movs	r0, r1
 800396a:	0011      	movs	r1, r2
 800396c:	1dbb      	adds	r3, r7, #6
 800396e:	1c22      	adds	r2, r4, #0
 8003970:	801a      	strh	r2, [r3, #0]
 8003972:	1d3b      	adds	r3, r7, #4
 8003974:	1c02      	adds	r2, r0, #0
 8003976:	801a      	strh	r2, [r3, #0]
 8003978:	1cbb      	adds	r3, r7, #2
 800397a:	1c0a      	adds	r2, r1, #0
 800397c:	801a      	strh	r2, [r3, #0]
  airPM2 = PM2 / 10.0f;
 800397e:	1dbb      	adds	r3, r7, #6
 8003980:	881b      	ldrh	r3, [r3, #0]
 8003982:	0018      	movs	r0, r3
 8003984:	f7fd fe24 	bl	80015d0 <__aeabi_i2f>
 8003988:	1c03      	adds	r3, r0, #0
 800398a:	4914      	ldr	r1, [pc, #80]	@ (80039dc <setPMs+0x7c>)
 800398c:	1c18      	adds	r0, r3, #0
 800398e:	f7fd f921 	bl	8000bd4 <__aeabi_fdiv>
 8003992:	1c03      	adds	r3, r0, #0
 8003994:	1c1a      	adds	r2, r3, #0
 8003996:	4b12      	ldr	r3, [pc, #72]	@ (80039e0 <setPMs+0x80>)
 8003998:	601a      	str	r2, [r3, #0]
  airPM10 = PM10 / 10.0f;
 800399a:	1d3b      	adds	r3, r7, #4
 800399c:	881b      	ldrh	r3, [r3, #0]
 800399e:	0018      	movs	r0, r3
 80039a0:	f7fd fe16 	bl	80015d0 <__aeabi_i2f>
 80039a4:	1c03      	adds	r3, r0, #0
 80039a6:	490d      	ldr	r1, [pc, #52]	@ (80039dc <setPMs+0x7c>)
 80039a8:	1c18      	adds	r0, r3, #0
 80039aa:	f7fd f913 	bl	8000bd4 <__aeabi_fdiv>
 80039ae:	1c03      	adds	r3, r0, #0
 80039b0:	1c1a      	adds	r2, r3, #0
 80039b2:	4b0c      	ldr	r3, [pc, #48]	@ (80039e4 <setPMs+0x84>)
 80039b4:	601a      	str	r2, [r3, #0]
  airNOx = nox / 10.0f;
 80039b6:	1cbb      	adds	r3, r7, #2
 80039b8:	881b      	ldrh	r3, [r3, #0]
 80039ba:	0018      	movs	r0, r3
 80039bc:	f7fd fe08 	bl	80015d0 <__aeabi_i2f>
 80039c0:	1c03      	adds	r3, r0, #0
 80039c2:	4906      	ldr	r1, [pc, #24]	@ (80039dc <setPMs+0x7c>)
 80039c4:	1c18      	adds	r0, r3, #0
 80039c6:	f7fd f905 	bl	8000bd4 <__aeabi_fdiv>
 80039ca:	1c03      	adds	r3, r0, #0
 80039cc:	1c1a      	adds	r2, r3, #0
 80039ce:	4b06      	ldr	r3, [pc, #24]	@ (80039e8 <setPMs+0x88>)
 80039d0:	601a      	str	r2, [r3, #0]
}
 80039d2:	46c0      	nop			@ (mov r8, r8)
 80039d4:	46bd      	mov	sp, r7
 80039d6:	b003      	add	sp, #12
 80039d8:	bd90      	pop	{r4, r7, pc}
 80039da:	46c0      	nop			@ (mov r8, r8)
 80039dc:	41200000 	.word	0x41200000
 80039e0:	20000580 	.word	0x20000580
 80039e4:	20000584 	.word	0x20000584
 80039e8:	20000588 	.word	0x20000588

080039ec <SetConfigMode>:

void SetConfigMode(){
 80039ec:	b580      	push	{r7, lr}
 80039ee:	af00      	add	r7, sp, #0
  ReconfigSet = true;
 80039f0:	4b02      	ldr	r3, [pc, #8]	@ (80039fc <SetConfigMode+0x10>)
 80039f2:	2201      	movs	r2, #1
 80039f4:	701a      	strb	r2, [r3, #0]
}
 80039f6:	46c0      	nop			@ (mov r8, r8)
 80039f8:	46bd      	mov	sp, r7
 80039fa:	bd80      	pop	{r7, pc}
 80039fc:	2000054f 	.word	0x2000054f

08003a00 <ESP_GetUID>:
//};


//TODO: Add de-init if ESP is off. Otherwise there is going to be 3.3V on the ESP.

void ESP_GetUID(){
 8003a00:	b580      	push	{r7, lr}
 8003a02:	af00      	add	r7, sp, #0
  uid[0] = HAL_GetUIDw0();
 8003a04:	f00a fd7a 	bl	800e4fc <HAL_GetUIDw0>
 8003a08:	0002      	movs	r2, r0
 8003a0a:	4b07      	ldr	r3, [pc, #28]	@ (8003a28 <ESP_GetUID+0x28>)
 8003a0c:	601a      	str	r2, [r3, #0]
  uid[1] = HAL_GetUIDw1();
 8003a0e:	f00a fd7f 	bl	800e510 <HAL_GetUIDw1>
 8003a12:	0002      	movs	r2, r0
 8003a14:	4b04      	ldr	r3, [pc, #16]	@ (8003a28 <ESP_GetUID+0x28>)
 8003a16:	605a      	str	r2, [r3, #4]
  uid[2] = HAL_GetUIDw2();
 8003a18:	f00a fd84 	bl	800e524 <HAL_GetUIDw2>
 8003a1c:	0002      	movs	r2, r0
 8003a1e:	4b02      	ldr	r3, [pc, #8]	@ (8003a28 <ESP_GetUID+0x28>)
 8003a20:	609a      	str	r2, [r3, #8]
}
 8003a22:	46c0      	nop			@ (mov r8, r8)
 8003a24:	46bd      	mov	sp, r7
 8003a26:	bd80      	pop	{r7, pc}
 8003a28:	20000554 	.word	0x20000554

08003a2c <ESP_Init>:
void ESP_Init(UART_HandleTypeDef* espUart) {
 8003a2c:	b580      	push	{r7, lr}
 8003a2e:	b082      	sub	sp, #8
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	6078      	str	r0, [r7, #4]
  EspUart = espUart;
 8003a34:	4b08      	ldr	r3, [pc, #32]	@ (8003a58 <ESP_Init+0x2c>)
 8003a36:	687a      	ldr	r2, [r7, #4]
 8003a38:	601a      	str	r2, [r3, #0]
  EspState = ESP_STATE_INIT;
 8003a3a:	4b08      	ldr	r3, [pc, #32]	@ (8003a5c <ESP_Init+0x30>)
 8003a3c:	2202      	movs	r2, #2
 8003a3e:	701a      	strb	r2, [r3, #0]
  ESP_GetUID();
 8003a40:	f7ff ffde 	bl	8003a00 <ESP_GetUID>
  beurs = checkEEprom();
 8003a44:	f7ff feda 	bl	80037fc <checkEEprom>
 8003a48:	0003      	movs	r3, r0
 8003a4a:	001a      	movs	r2, r3
 8003a4c:	4b04      	ldr	r3, [pc, #16]	@ (8003a60 <ESP_Init+0x34>)
 8003a4e:	701a      	strb	r2, [r3, #0]
}
 8003a50:	46c0      	nop			@ (mov r8, r8)
 8003a52:	46bd      	mov	sp, r7
 8003a54:	b002      	add	sp, #8
 8003a56:	bd80      	pop	{r7, pc}
 8003a58:	20000444 	.word	0x20000444
 8003a5c:	20000028 	.word	0x20000028
 8003a60:	20000552 	.word	0x20000552

08003a64 <ESP_Send>:

static bool ESP_Send(uint8_t* command, uint16_t length) {
 8003a64:	b5b0      	push	{r4, r5, r7, lr}
 8003a66:	b084      	sub	sp, #16
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	6078      	str	r0, [r7, #4]
 8003a6c:	000a      	movs	r2, r1
 8003a6e:	1cbb      	adds	r3, r7, #2
 8003a70:	801a      	strh	r2, [r3, #0]
#ifdef LONGMESSAGES
  printf("ESP_Send: %s\r\n", command);
#else
  Debug("ESP_Send: %s", command);
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	4a10      	ldr	r2, [pc, #64]	@ (8003ab8 <ESP_Send+0x54>)
 8003a76:	4911      	ldr	r1, [pc, #68]	@ (8003abc <ESP_Send+0x58>)
 8003a78:	2003      	movs	r0, #3
 8003a7a:	f00a f89f 	bl	800dbbc <CreateLine>
#endif
  HAL_StatusTypeDef status = HAL_UART_Transmit_DMA(EspUart, command, length);
 8003a7e:	4b10      	ldr	r3, [pc, #64]	@ (8003ac0 <ESP_Send+0x5c>)
 8003a80:	6818      	ldr	r0, [r3, #0]
 8003a82:	250f      	movs	r5, #15
 8003a84:	197c      	adds	r4, r7, r5
 8003a86:	1cbb      	adds	r3, r7, #2
 8003a88:	881a      	ldrh	r2, [r3, #0]
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	0019      	movs	r1, r3
 8003a8e:	f012 ffff 	bl	8016a90 <HAL_UART_Transmit_DMA>
 8003a92:	0003      	movs	r3, r0
 8003a94:	7023      	strb	r3, [r4, #0]
  if (status != HAL_OK) {
 8003a96:	197b      	adds	r3, r7, r5
 8003a98:	781b      	ldrb	r3, [r3, #0]
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d007      	beq.n	8003aae <ESP_Send+0x4a>
    Error("Error in HAL_UART_Transmit_DMA");
 8003a9e:	4a09      	ldr	r2, [pc, #36]	@ (8003ac4 <ESP_Send+0x60>)
 8003aa0:	4b09      	ldr	r3, [pc, #36]	@ (8003ac8 <ESP_Send+0x64>)
 8003aa2:	0019      	movs	r1, r3
 8003aa4:	2001      	movs	r0, #1
 8003aa6:	f00a f889 	bl	800dbbc <CreateLine>
    return false;
 8003aaa:	2300      	movs	r3, #0
 8003aac:	e000      	b.n	8003ab0 <ESP_Send+0x4c>
  }
  return true;
 8003aae:	2301      	movs	r3, #1
}
 8003ab0:	0018      	movs	r0, r3
 8003ab2:	46bd      	mov	sp, r7
 8003ab4:	b004      	add	sp, #16
 8003ab6:	bdb0      	pop	{r4, r5, r7, pc}
 8003ab8:	08022840 	.word	0x08022840
 8003abc:	08022850 	.word	0x08022850
 8003ac0:	20000444 	.word	0x20000444
 8003ac4:	08022854 	.word	0x08022854
 8003ac8:	08022874 	.word	0x08022874

08003acc <ESP_Receive>:
static bool ESP_Receive(uint8_t* reply, uint16_t length) {
 8003acc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003ace:	b085      	sub	sp, #20
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	6078      	str	r0, [r7, #4]
 8003ad4:	000a      	movs	r2, r1
 8003ad6:	1cbb      	adds	r3, r7, #2
 8003ad8:	801a      	strh	r2, [r3, #0]
//  HAL_UART_DMAStop(EspUart);
  RxComplete = false;
 8003ada:	4b56      	ldr	r3, [pc, #344]	@ (8003c34 <ESP_Receive+0x168>)
 8003adc:	2200      	movs	r2, #0
 8003ade:	701a      	strb	r2, [r3, #0]
  bool reset = false;
 8003ae0:	260f      	movs	r6, #15
 8003ae2:	19bb      	adds	r3, r7, r6
 8003ae4:	2200      	movs	r2, #0
 8003ae6:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_UART_Receive_DMA(EspUart, reply, length);
 8003ae8:	4b53      	ldr	r3, [pc, #332]	@ (8003c38 <ESP_Receive+0x16c>)
 8003aea:	6818      	ldr	r0, [r3, #0]
 8003aec:	250e      	movs	r5, #14
 8003aee:	197c      	adds	r4, r7, r5
 8003af0:	1cbb      	adds	r3, r7, #2
 8003af2:	881a      	ldrh	r2, [r3, #0]
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	0019      	movs	r1, r3
 8003af8:	f013 f85a 	bl	8016bb0 <HAL_UART_Receive_DMA>
 8003afc:	0003      	movs	r3, r0
 8003afe:	7023      	strb	r3, [r4, #0]
  if (status != HAL_OK) {
 8003b00:	002c      	movs	r4, r5
 8003b02:	193b      	adds	r3, r7, r4
 8003b04:	781b      	ldrb	r3, [r3, #0]
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d100      	bne.n	8003b0c <ESP_Receive+0x40>
 8003b0a:	e08e      	b.n	8003c2a <ESP_Receive+0x15e>
    Error("Error in HAL_UART_Receive_DMA. errorcode: %d", EspUart->ErrorCode);
 8003b0c:	4b4a      	ldr	r3, [pc, #296]	@ (8003c38 <ESP_Receive+0x16c>)
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	2284      	movs	r2, #132	@ 0x84
 8003b12:	589b      	ldr	r3, [r3, r2]
 8003b14:	4a49      	ldr	r2, [pc, #292]	@ (8003c3c <ESP_Receive+0x170>)
 8003b16:	494a      	ldr	r1, [pc, #296]	@ (8003c40 <ESP_Receive+0x174>)
 8003b18:	2001      	movs	r0, #1
 8003b1a:	f00a f84f 	bl	800dbbc <CreateLine>
    if (status & HAL_UART_ERROR_PE) {
 8003b1e:	193b      	adds	r3, r7, r4
 8003b20:	781b      	ldrb	r3, [r3, #0]
 8003b22:	2201      	movs	r2, #1
 8003b24:	4013      	ands	r3, r2
 8003b26:	d008      	beq.n	8003b3a <ESP_Receive+0x6e>
      Error("Parity error in UART to ESP module");
 8003b28:	4a46      	ldr	r2, [pc, #280]	@ (8003c44 <ESP_Receive+0x178>)
 8003b2a:	4b45      	ldr	r3, [pc, #276]	@ (8003c40 <ESP_Receive+0x174>)
 8003b2c:	0019      	movs	r1, r3
 8003b2e:	2001      	movs	r0, #1
 8003b30:	f00a f844 	bl	800dbbc <CreateLine>
      reset = true;
 8003b34:	19bb      	adds	r3, r7, r6
 8003b36:	2201      	movs	r2, #1
 8003b38:	701a      	strb	r2, [r3, #0]
    }
    if (status & HAL_UART_ERROR_NE) {
 8003b3a:	230e      	movs	r3, #14
 8003b3c:	18fb      	adds	r3, r7, r3
 8003b3e:	781b      	ldrb	r3, [r3, #0]
 8003b40:	2202      	movs	r2, #2
 8003b42:	4013      	ands	r3, r2
 8003b44:	d005      	beq.n	8003b52 <ESP_Receive+0x86>
      Error("Noise error in UART to ESP module");
 8003b46:	4a40      	ldr	r2, [pc, #256]	@ (8003c48 <ESP_Receive+0x17c>)
 8003b48:	4b3d      	ldr	r3, [pc, #244]	@ (8003c40 <ESP_Receive+0x174>)
 8003b4a:	0019      	movs	r1, r3
 8003b4c:	2001      	movs	r0, #1
 8003b4e:	f00a f835 	bl	800dbbc <CreateLine>
    }
    if (status & HAL_UART_ERROR_FE) {
 8003b52:	230e      	movs	r3, #14
 8003b54:	18fb      	adds	r3, r7, r3
 8003b56:	781b      	ldrb	r3, [r3, #0]
 8003b58:	2204      	movs	r2, #4
 8003b5a:	4013      	ands	r3, r2
 8003b5c:	d005      	beq.n	8003b6a <ESP_Receive+0x9e>
      Error("Frame error in UART to ESP module");
 8003b5e:	4a3b      	ldr	r2, [pc, #236]	@ (8003c4c <ESP_Receive+0x180>)
 8003b60:	4b37      	ldr	r3, [pc, #220]	@ (8003c40 <ESP_Receive+0x174>)
 8003b62:	0019      	movs	r1, r3
 8003b64:	2001      	movs	r0, #1
 8003b66:	f00a f829 	bl	800dbbc <CreateLine>
    }
    if (status & HAL_UART_ERROR_ORE) {
 8003b6a:	230e      	movs	r3, #14
 8003b6c:	18fb      	adds	r3, r7, r3
 8003b6e:	781b      	ldrb	r3, [r3, #0]
 8003b70:	2208      	movs	r2, #8
 8003b72:	4013      	ands	r3, r2
 8003b74:	d005      	beq.n	8003b82 <ESP_Receive+0xb6>
      Error("Overrun error in UART to ESP module");
 8003b76:	4a36      	ldr	r2, [pc, #216]	@ (8003c50 <ESP_Receive+0x184>)
 8003b78:	4b31      	ldr	r3, [pc, #196]	@ (8003c40 <ESP_Receive+0x174>)
 8003b7a:	0019      	movs	r1, r3
 8003b7c:	2001      	movs	r0, #1
 8003b7e:	f00a f81d 	bl	800dbbc <CreateLine>
    }
    if (status & HAL_UART_ERROR_DMA) {
 8003b82:	230e      	movs	r3, #14
 8003b84:	18fb      	adds	r3, r7, r3
 8003b86:	781b      	ldrb	r3, [r3, #0]
 8003b88:	2210      	movs	r2, #16
 8003b8a:	4013      	ands	r3, r2
 8003b8c:	d005      	beq.n	8003b9a <ESP_Receive+0xce>
      Error("DMA transfer error in UART to ESP module");
 8003b8e:	4a31      	ldr	r2, [pc, #196]	@ (8003c54 <ESP_Receive+0x188>)
 8003b90:	4b2b      	ldr	r3, [pc, #172]	@ (8003c40 <ESP_Receive+0x174>)
 8003b92:	0019      	movs	r1, r3
 8003b94:	2001      	movs	r0, #1
 8003b96:	f00a f811 	bl	800dbbc <CreateLine>
    }
    if (status & HAL_UART_ERROR_RTO) {
 8003b9a:	230e      	movs	r3, #14
 8003b9c:	18fb      	adds	r3, r7, r3
 8003b9e:	781b      	ldrb	r3, [r3, #0]
 8003ba0:	2220      	movs	r2, #32
 8003ba2:	4013      	ands	r3, r2
 8003ba4:	d005      	beq.n	8003bb2 <ESP_Receive+0xe6>
      Error("Receiver Timeout error in UART to ESP module");
 8003ba6:	4a2c      	ldr	r2, [pc, #176]	@ (8003c58 <ESP_Receive+0x18c>)
 8003ba8:	4b25      	ldr	r3, [pc, #148]	@ (8003c40 <ESP_Receive+0x174>)
 8003baa:	0019      	movs	r1, r3
 8003bac:	2001      	movs	r0, #1
 8003bae:	f00a f805 	bl	800dbbc <CreateLine>
    }
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    if (status & HAL_UART_ERROR_INVALID_CALLBACK) {
 8003bb2:	230e      	movs	r3, #14
 8003bb4:	18fb      	adds	r3, r7, r3
 8003bb6:	781b      	ldrb	r3, [r3, #0]
 8003bb8:	2240      	movs	r2, #64	@ 0x40
 8003bba:	4013      	ands	r3, r2
 8003bbc:	d005      	beq.n	8003bca <ESP_Receive+0xfe>
      Error("Invalid Callback error in UART to ESP module");
 8003bbe:	4a27      	ldr	r2, [pc, #156]	@ (8003c5c <ESP_Receive+0x190>)
 8003bc0:	4b1f      	ldr	r3, [pc, #124]	@ (8003c40 <ESP_Receive+0x174>)
 8003bc2:	0019      	movs	r1, r3
 8003bc4:	2001      	movs	r0, #1
 8003bc6:	f009 fff9 	bl	800dbbc <CreateLine>
    }
#endif
    if (reset) {
 8003bca:	230f      	movs	r3, #15
 8003bcc:	18fb      	adds	r3, r7, r3
 8003bce:	781b      	ldrb	r3, [r3, #0]
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d025      	beq.n	8003c20 <ESP_Receive+0x154>
    // Fire all LEDs to red independent of usertoggle or power status and reboot
      TIM2 -> CCR1 = 0;
 8003bd4:	2380      	movs	r3, #128	@ 0x80
 8003bd6:	05db      	lsls	r3, r3, #23
 8003bd8:	2200      	movs	r2, #0
 8003bda:	635a      	str	r2, [r3, #52]	@ 0x34
      TIM2 -> CCR3 = 4000;
 8003bdc:	2380      	movs	r3, #128	@ 0x80
 8003bde:	05db      	lsls	r3, r3, #23
 8003be0:	22fa      	movs	r2, #250	@ 0xfa
 8003be2:	0112      	lsls	r2, r2, #4
 8003be4:	63da      	str	r2, [r3, #60]	@ 0x3c
      TIM2 -> CCR4 = 4000;
 8003be6:	2380      	movs	r3, #128	@ 0x80
 8003be8:	05db      	lsls	r3, r3, #23
 8003bea:	22fa      	movs	r2, #250	@ 0xfa
 8003bec:	0112      	lsls	r2, r2, #4
 8003bee:	641a      	str	r2, [r3, #64]	@ 0x40
      TIM3 -> CCR1 = 0;
 8003bf0:	4b1b      	ldr	r3, [pc, #108]	@ (8003c60 <ESP_Receive+0x194>)
 8003bf2:	2200      	movs	r2, #0
 8003bf4:	635a      	str	r2, [r3, #52]	@ 0x34
      TIM3 -> CCR2 = 4000;
 8003bf6:	4b1a      	ldr	r3, [pc, #104]	@ (8003c60 <ESP_Receive+0x194>)
 8003bf8:	22fa      	movs	r2, #250	@ 0xfa
 8003bfa:	0112      	lsls	r2, r2, #4
 8003bfc:	639a      	str	r2, [r3, #56]	@ 0x38
      TIM3 -> CCR3 = 4000;
 8003bfe:	4b18      	ldr	r3, [pc, #96]	@ (8003c60 <ESP_Receive+0x194>)
 8003c00:	22fa      	movs	r2, #250	@ 0xfa
 8003c02:	0112      	lsls	r2, r2, #4
 8003c04:	63da      	str	r2, [r3, #60]	@ 0x3c

      HAL_GPIO_WritePin(MCU_LED_C_R_GPIO_Port, MCU_LED_C_R_Pin, false);
 8003c06:	4b17      	ldr	r3, [pc, #92]	@ (8003c64 <ESP_Receive+0x198>)
 8003c08:	2200      	movs	r2, #0
 8003c0a:	2101      	movs	r1, #1
 8003c0c:	0018      	movs	r0, r3
 8003c0e:	f00b febc 	bl	800f98a <HAL_GPIO_WritePin>
      HAL_Delay(2000);
 8003c12:	23fa      	movs	r3, #250	@ 0xfa
 8003c14:	00db      	lsls	r3, r3, #3
 8003c16:	0018      	movs	r0, r3
 8003c18:	f00a fc30 	bl	800e47c <HAL_Delay>
      HAL_NVIC_SystemReset();
 8003c1c:	f00b f8ed 	bl	800edfa <HAL_NVIC_SystemReset>
    }
    RxComplete = true;
 8003c20:	4b04      	ldr	r3, [pc, #16]	@ (8003c34 <ESP_Receive+0x168>)
 8003c22:	2201      	movs	r2, #1
 8003c24:	701a      	strb	r2, [r3, #0]
    return false;
 8003c26:	2300      	movs	r3, #0
 8003c28:	e000      	b.n	8003c2c <ESP_Receive+0x160>
  }
  return true;
 8003c2a:	2301      	movs	r3, #1
}
 8003c2c:	0018      	movs	r0, r3
 8003c2e:	46bd      	mov	sp, r7
 8003c30:	b005      	add	sp, #20
 8003c32:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003c34:	20000448 	.word	0x20000448
 8003c38:	20000444 	.word	0x20000444
 8003c3c:	08022878 	.word	0x08022878
 8003c40:	08022874 	.word	0x08022874
 8003c44:	080228a8 	.word	0x080228a8
 8003c48:	080228cc 	.word	0x080228cc
 8003c4c:	080228f0 	.word	0x080228f0
 8003c50:	08022914 	.word	0x08022914
 8003c54:	08022938 	.word	0x08022938
 8003c58:	08022964 	.word	0x08022964
 8003c5c:	08022994 	.word	0x08022994
 8003c60:	40000400 	.word	0x40000400
 8003c64:	50000400 	.word	0x50000400

08003c68 <HAL_UART_ErrorCallback>:
//    Debug("RxComplete");
//  }
//}

// Callback for UART error
void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart) {
 8003c68:	b580      	push	{r7, lr}
 8003c6a:	b082      	sub	sp, #8
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	6078      	str	r0, [r7, #4]
  if (huart == EspUart) {
 8003c70:	4b0a      	ldr	r3, [pc, #40]	@ (8003c9c <HAL_UART_ErrorCallback+0x34>)
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	687a      	ldr	r2, [r7, #4]
 8003c76:	429a      	cmp	r2, r3
 8003c78:	d10c      	bne.n	8003c94 <HAL_UART_ErrorCallback+0x2c>
    // Handle error
    //EspState = ESP_STATE_ERROR;
    if (huart->ErrorCode != 4) {
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	2284      	movs	r2, #132	@ 0x84
 8003c7e:	589b      	ldr	r3, [r3, r2]
 8003c80:	2b04      	cmp	r3, #4
 8003c82:	d007      	beq.n	8003c94 <HAL_UART_ErrorCallback+0x2c>
      Debug("A callback error has occurred, errorcode %d", huart->ErrorCode);
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	2284      	movs	r2, #132	@ 0x84
 8003c88:	589b      	ldr	r3, [r3, r2]
 8003c8a:	4a05      	ldr	r2, [pc, #20]	@ (8003ca0 <HAL_UART_ErrorCallback+0x38>)
 8003c8c:	4905      	ldr	r1, [pc, #20]	@ (8003ca4 <HAL_UART_ErrorCallback+0x3c>)
 8003c8e:	2003      	movs	r0, #3
 8003c90:	f009 ff94 	bl	800dbbc <CreateLine>
    }
  }
}
 8003c94:	46c0      	nop			@ (mov r8, r8)
 8003c96:	46bd      	mov	sp, r7
 8003c98:	b002      	add	sp, #8
 8003c9a:	bd80      	pop	{r7, pc}
 8003c9c:	20000444 	.word	0x20000444
 8003ca0:	080229c4 	.word	0x080229c4
 8003ca4:	08022850 	.word	0x08022850

08003ca8 <uint8ArrayToString>:
void uint8ArrayToString(char *destination, uint8_t data[])
{
 8003ca8:	b580      	push	{r7, lr}
 8003caa:	b084      	sub	sp, #16
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	6078      	str	r0, [r7, #4]
 8003cb0:	6039      	str	r1, [r7, #0]
  for (int i = 0; i < 12; i++)
 8003cb2:	2300      	movs	r3, #0
 8003cb4:	60fb      	str	r3, [r7, #12]
 8003cb6:	e010      	b.n	8003cda <uint8ArrayToString+0x32>
  {
    sprintf(&destination[i * 2], "%02x", data[i]);
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	005b      	lsls	r3, r3, #1
 8003cbc:	001a      	movs	r2, r3
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	1898      	adds	r0, r3, r2
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	683a      	ldr	r2, [r7, #0]
 8003cc6:	18d3      	adds	r3, r2, r3
 8003cc8:	781b      	ldrb	r3, [r3, #0]
 8003cca:	001a      	movs	r2, r3
 8003ccc:	4b07      	ldr	r3, [pc, #28]	@ (8003cec <uint8ArrayToString+0x44>)
 8003cce:	0019      	movs	r1, r3
 8003cd0:	f01b fcc8 	bl	801f664 <siprintf>
  for (int i = 0; i < 12; i++)
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	3301      	adds	r3, #1
 8003cd8:	60fb      	str	r3, [r7, #12]
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	2b0b      	cmp	r3, #11
 8003cde:	ddeb      	ble.n	8003cb8 <uint8ArrayToString+0x10>
  }
}
 8003ce0:	46c0      	nop			@ (mov r8, r8)
 8003ce2:	46c0      	nop			@ (mov r8, r8)
 8003ce4:	46bd      	mov	sp, r7
 8003ce6:	b004      	add	sp, #16
 8003ce8:	bd80      	pop	{r7, pc}
 8003cea:	46c0      	nop			@ (mov r8, r8)
 8003cec:	080229f0 	.word	0x080229f0

08003cf0 <CreateMessage>:
uint16_t CreateMessage(bool onBeurs){
 8003cf0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003cf2:	b089      	sub	sp, #36	@ 0x24
 8003cf4:	af04      	add	r7, sp, #16
 8003cf6:	0002      	movs	r2, r0
 8003cf8:	1dfb      	adds	r3, r7, #7
 8003cfa:	701a      	strb	r2, [r3, #0]
  static uint8_t solarConfig[IdSize];
  static uint8_t noxConfig[IdSize];
  static uint8_t PM2Config[IdSize];
  static uint8_t PM10Config[IdSize];
  static uint8_t nameConfig[CustomNameMaxLength];
  ReadUint8ArrayEEprom(TempConfigAddr, tempConfig, IdSize);
 8003cfc:	4bdb      	ldr	r3, [pc, #876]	@ (800406c <CreateMessage+0x37c>)
 8003cfe:	48dc      	ldr	r0, [pc, #880]	@ (8004070 <CreateMessage+0x380>)
 8003d00:	220c      	movs	r2, #12
 8003d02:	0019      	movs	r1, r3
 8003d04:	f7ff fcf8 	bl	80036f8 <ReadUint8ArrayEEprom>
  ReadUint8ArrayEEprom(HumidConfigAddr, humidConfig, IdSize);
 8003d08:	4bda      	ldr	r3, [pc, #872]	@ (8004074 <CreateMessage+0x384>)
 8003d0a:	48db      	ldr	r0, [pc, #876]	@ (8004078 <CreateMessage+0x388>)
 8003d0c:	220c      	movs	r2, #12
 8003d0e:	0019      	movs	r1, r3
 8003d10:	f7ff fcf2 	bl	80036f8 <ReadUint8ArrayEEprom>
  ReadUint8ArrayEEprom(dBAConfigAddr, soundConfig, IdSize);
 8003d14:	4bd9      	ldr	r3, [pc, #868]	@ (800407c <CreateMessage+0x38c>)
 8003d16:	48da      	ldr	r0, [pc, #872]	@ (8004080 <CreateMessage+0x390>)
 8003d18:	220c      	movs	r2, #12
 8003d1a:	0019      	movs	r1, r3
 8003d1c:	f7ff fcec 	bl	80036f8 <ReadUint8ArrayEEprom>
  ReadUint8ArrayEEprom(VocIndexConfigAddr, vocConfig, IdSize);
 8003d20:	4bd8      	ldr	r3, [pc, #864]	@ (8004084 <CreateMessage+0x394>)
 8003d22:	48d9      	ldr	r0, [pc, #868]	@ (8004088 <CreateMessage+0x398>)
 8003d24:	220c      	movs	r2, #12
 8003d26:	0019      	movs	r1, r3
 8003d28:	f7ff fce6 	bl	80036f8 <ReadUint8ArrayEEprom>
  ReadUint8ArrayEEprom(BatVoltConfigAddr, batteryConfig, IdSize);
 8003d2c:	4bd7      	ldr	r3, [pc, #860]	@ (800408c <CreateMessage+0x39c>)
 8003d2e:	48d8      	ldr	r0, [pc, #864]	@ (8004090 <CreateMessage+0x3a0>)
 8003d30:	220c      	movs	r2, #12
 8003d32:	0019      	movs	r1, r3
 8003d34:	f7ff fce0 	bl	80036f8 <ReadUint8ArrayEEprom>
  ReadUint8ArrayEEprom(SolVoltConfigAddr, solarConfig, IdSize);
 8003d38:	4bd6      	ldr	r3, [pc, #856]	@ (8004094 <CreateMessage+0x3a4>)
 8003d3a:	48d7      	ldr	r0, [pc, #860]	@ (8004098 <CreateMessage+0x3a8>)
 8003d3c:	220c      	movs	r2, #12
 8003d3e:	0019      	movs	r1, r3
 8003d40:	f7ff fcda 	bl	80036f8 <ReadUint8ArrayEEprom>
  ReadUint8ArrayEEprom(NOxIndexConfigAddr, noxConfig, IdSize);
 8003d44:	4bd5      	ldr	r3, [pc, #852]	@ (800409c <CreateMessage+0x3ac>)
 8003d46:	48d6      	ldr	r0, [pc, #856]	@ (80040a0 <CreateMessage+0x3b0>)
 8003d48:	220c      	movs	r2, #12
 8003d4a:	0019      	movs	r1, r3
 8003d4c:	f7ff fcd4 	bl	80036f8 <ReadUint8ArrayEEprom>
  ReadUint8ArrayEEprom(PM2ConfigAddr, PM2Config, IdSize);
 8003d50:	4bd4      	ldr	r3, [pc, #848]	@ (80040a4 <CreateMessage+0x3b4>)
 8003d52:	48d5      	ldr	r0, [pc, #852]	@ (80040a8 <CreateMessage+0x3b8>)
 8003d54:	220c      	movs	r2, #12
 8003d56:	0019      	movs	r1, r3
 8003d58:	f7ff fcce 	bl	80036f8 <ReadUint8ArrayEEprom>
  ReadUint8ArrayEEprom(PM10ConfigAddr, PM10Config, IdSize);
 8003d5c:	4bd3      	ldr	r3, [pc, #844]	@ (80040ac <CreateMessage+0x3bc>)
 8003d5e:	48d4      	ldr	r0, [pc, #848]	@ (80040b0 <CreateMessage+0x3c0>)
 8003d60:	220c      	movs	r2, #12
 8003d62:	0019      	movs	r1, r3
 8003d64:	f7ff fcc8 	bl	80036f8 <ReadUint8ArrayEEprom>
  if(checkName()){
 8003d68:	f7ff fd7e 	bl	8003868 <checkName>
 8003d6c:	1e03      	subs	r3, r0, #0
 8003d6e:	d006      	beq.n	8003d7e <CreateMessage+0x8e>
    ReadUint8ArrayEEprom(CustomNameConfigAddr, nameConfig, CustomNameMaxLength);
 8003d70:	4bd0      	ldr	r3, [pc, #832]	@ (80040b4 <CreateMessage+0x3c4>)
 8003d72:	48d1      	ldr	r0, [pc, #836]	@ (80040b8 <CreateMessage+0x3c8>)
 8003d74:	221e      	movs	r2, #30
 8003d76:	0019      	movs	r1, r3
 8003d78:	f7ff fcbe 	bl	80036f8 <ReadUint8ArrayEEprom>
 8003d7c:	e005      	b.n	8003d8a <CreateMessage+0x9a>
  }
  else{
    strncpy((char*)nameConfig, user, 5);
 8003d7e:	4bcd      	ldr	r3, [pc, #820]	@ (80040b4 <CreateMessage+0x3c4>)
 8003d80:	4ace      	ldr	r2, [pc, #824]	@ (80040bc <CreateMessage+0x3cc>)
 8003d82:	6811      	ldr	r1, [r2, #0]
 8003d84:	6019      	str	r1, [r3, #0]
 8003d86:	7912      	ldrb	r2, [r2, #4]
 8003d88:	711a      	strb	r2, [r3, #4]
  }
  //(char*)nameConfig
  //get name etc from EEprom
  Debug("sensorid voor opensensmaps nox: %d", noxConfig);
 8003d8a:	4bc4      	ldr	r3, [pc, #784]	@ (800409c <CreateMessage+0x3ac>)
 8003d8c:	4acc      	ldr	r2, [pc, #816]	@ (80040c0 <CreateMessage+0x3d0>)
 8003d8e:	49cd      	ldr	r1, [pc, #820]	@ (80040c4 <CreateMessage+0x3d4>)
 8003d90:	2003      	movs	r0, #3
 8003d92:	f009 ff13 	bl	800dbbc <CreateLine>
  setCharges();
 8003d96:	f7ff fd1d 	bl	80037d4 <setCharges>
#ifdef LONGDATAGRAM
  memset(message, '\0', 1152);
 8003d9a:	2390      	movs	r3, #144	@ 0x90
 8003d9c:	00da      	lsls	r2, r3, #3
 8003d9e:	4bca      	ldr	r3, [pc, #808]	@ (80040c8 <CreateMessage+0x3d8>)
 8003da0:	2100      	movs	r1, #0
 8003da2:	0018      	movs	r0, r3
 8003da4:	f01b fda2 	bl	801f8ec <memset>
  uint16_t index = 0;
 8003da8:	260e      	movs	r6, #14
 8003daa:	19bb      	adds	r3, r7, r6
 8003dac:	2200      	movs	r2, #0
 8003dae:	801a      	strh	r2, [r3, #0]
  sprintf(&message[index], "[");
 8003db0:	19bb      	adds	r3, r7, r6
 8003db2:	881a      	ldrh	r2, [r3, #0]
 8003db4:	4bc4      	ldr	r3, [pc, #784]	@ (80040c8 <CreateMessage+0x3d8>)
 8003db6:	18d3      	adds	r3, r2, r3
 8003db8:	4ac4      	ldr	r2, [pc, #784]	@ (80040cc <CreateMessage+0x3dc>)
 8003dba:	0011      	movs	r1, r2
 8003dbc:	0018      	movs	r0, r3
 8003dbe:	f01b fc51 	bl	801f664 <siprintf>
  index = strlen(message);
 8003dc2:	4bc1      	ldr	r3, [pc, #772]	@ (80040c8 <CreateMessage+0x3d8>)
 8003dc4:	0018      	movs	r0, r3
 8003dc6:	f7fc f9d1 	bl	800016c <strlen>
 8003dca:	0002      	movs	r2, r0
 8003dcc:	19bb      	adds	r3, r7, r6
 8003dce:	801a      	strh	r2, [r3, #0]

  uint8ArrayToString(Buffer, tempConfig);
 8003dd0:	4aa6      	ldr	r2, [pc, #664]	@ (800406c <CreateMessage+0x37c>)
 8003dd2:	4bbf      	ldr	r3, [pc, #764]	@ (80040d0 <CreateMessage+0x3e0>)
 8003dd4:	0011      	movs	r1, r2
 8003dd6:	0018      	movs	r0, r3
 8003dd8:	f7ff ff66 	bl	8003ca8 <uint8ArrayToString>
  sprintf(&message[index], "{\"name\":\"temp\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.2f, \"unit\":\"C\"},", uid[2], (char*)nameConfig, Buffer, Temperature);
 8003ddc:	19bb      	adds	r3, r7, r6
 8003dde:	881a      	ldrh	r2, [r3, #0]
 8003de0:	4bb9      	ldr	r3, [pc, #740]	@ (80040c8 <CreateMessage+0x3d8>)
 8003de2:	18d4      	adds	r4, r2, r3
 8003de4:	4bbb      	ldr	r3, [pc, #748]	@ (80040d4 <CreateMessage+0x3e4>)
 8003de6:	689d      	ldr	r5, [r3, #8]
 8003de8:	4bbb      	ldr	r3, [pc, #748]	@ (80040d8 <CreateMessage+0x3e8>)
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	1c18      	adds	r0, r3, #0
 8003dee:	f7ff fb39 	bl	8003464 <__aeabi_f2d>
 8003df2:	0002      	movs	r2, r0
 8003df4:	000b      	movs	r3, r1
 8003df6:	48af      	ldr	r0, [pc, #700]	@ (80040b4 <CreateMessage+0x3c4>)
 8003df8:	49b8      	ldr	r1, [pc, #736]	@ (80040dc <CreateMessage+0x3ec>)
 8003dfa:	9202      	str	r2, [sp, #8]
 8003dfc:	9303      	str	r3, [sp, #12]
 8003dfe:	4bb4      	ldr	r3, [pc, #720]	@ (80040d0 <CreateMessage+0x3e0>)
 8003e00:	9300      	str	r3, [sp, #0]
 8003e02:	0003      	movs	r3, r0
 8003e04:	002a      	movs	r2, r5
 8003e06:	0020      	movs	r0, r4
 8003e08:	f01b fc2c 	bl	801f664 <siprintf>
  index = strlen(message);
 8003e0c:	4bae      	ldr	r3, [pc, #696]	@ (80040c8 <CreateMessage+0x3d8>)
 8003e0e:	0018      	movs	r0, r3
 8003e10:	f7fc f9ac 	bl	800016c <strlen>
 8003e14:	0002      	movs	r2, r0
 8003e16:	19bb      	adds	r3, r7, r6
 8003e18:	801a      	strh	r2, [r3, #0]

  uint8ArrayToString(Buffer, humidConfig);
 8003e1a:	4a96      	ldr	r2, [pc, #600]	@ (8004074 <CreateMessage+0x384>)
 8003e1c:	4bac      	ldr	r3, [pc, #688]	@ (80040d0 <CreateMessage+0x3e0>)
 8003e1e:	0011      	movs	r1, r2
 8003e20:	0018      	movs	r0, r3
 8003e22:	f7ff ff41 	bl	8003ca8 <uint8ArrayToString>
  sprintf(&message[index], "{\"name\":\"humid\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.1f, \"unit\":\"%%\"},", uid[2], (char*)nameConfig, Buffer, Humidity);
 8003e26:	19bb      	adds	r3, r7, r6
 8003e28:	881a      	ldrh	r2, [r3, #0]
 8003e2a:	4ba7      	ldr	r3, [pc, #668]	@ (80040c8 <CreateMessage+0x3d8>)
 8003e2c:	18d4      	adds	r4, r2, r3
 8003e2e:	4ba9      	ldr	r3, [pc, #676]	@ (80040d4 <CreateMessage+0x3e4>)
 8003e30:	689d      	ldr	r5, [r3, #8]
 8003e32:	4bab      	ldr	r3, [pc, #684]	@ (80040e0 <CreateMessage+0x3f0>)
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	1c18      	adds	r0, r3, #0
 8003e38:	f7ff fb14 	bl	8003464 <__aeabi_f2d>
 8003e3c:	0002      	movs	r2, r0
 8003e3e:	000b      	movs	r3, r1
 8003e40:	489c      	ldr	r0, [pc, #624]	@ (80040b4 <CreateMessage+0x3c4>)
 8003e42:	49a8      	ldr	r1, [pc, #672]	@ (80040e4 <CreateMessage+0x3f4>)
 8003e44:	9202      	str	r2, [sp, #8]
 8003e46:	9303      	str	r3, [sp, #12]
 8003e48:	4ba1      	ldr	r3, [pc, #644]	@ (80040d0 <CreateMessage+0x3e0>)
 8003e4a:	9300      	str	r3, [sp, #0]
 8003e4c:	0003      	movs	r3, r0
 8003e4e:	002a      	movs	r2, r5
 8003e50:	0020      	movs	r0, r4
 8003e52:	f01b fc07 	bl	801f664 <siprintf>
  index = strlen(message);
 8003e56:	4b9c      	ldr	r3, [pc, #624]	@ (80040c8 <CreateMessage+0x3d8>)
 8003e58:	0018      	movs	r0, r3
 8003e5a:	f7fc f987 	bl	800016c <strlen>
 8003e5e:	0002      	movs	r2, r0
 8003e60:	19bb      	adds	r3, r7, r6
 8003e62:	801a      	strh	r2, [r3, #0]

  uint8ArrayToString(Buffer, soundConfig);
 8003e64:	4a85      	ldr	r2, [pc, #532]	@ (800407c <CreateMessage+0x38c>)
 8003e66:	4b9a      	ldr	r3, [pc, #616]	@ (80040d0 <CreateMessage+0x3e0>)
 8003e68:	0011      	movs	r1, r2
 8003e6a:	0018      	movs	r0, r3
 8003e6c:	f7ff ff1c 	bl	8003ca8 <uint8ArrayToString>
  sprintf(&message[index], "{\"name\":\"Sound\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.2f, \"unit\":\"dB(A)\"},", uid[2], (char*)nameConfig, Buffer, dBA);
 8003e70:	19bb      	adds	r3, r7, r6
 8003e72:	881a      	ldrh	r2, [r3, #0]
 8003e74:	4b94      	ldr	r3, [pc, #592]	@ (80040c8 <CreateMessage+0x3d8>)
 8003e76:	18d4      	adds	r4, r2, r3
 8003e78:	4b96      	ldr	r3, [pc, #600]	@ (80040d4 <CreateMessage+0x3e4>)
 8003e7a:	689d      	ldr	r5, [r3, #8]
 8003e7c:	4b9a      	ldr	r3, [pc, #616]	@ (80040e8 <CreateMessage+0x3f8>)
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	1c18      	adds	r0, r3, #0
 8003e82:	f7ff faef 	bl	8003464 <__aeabi_f2d>
 8003e86:	0002      	movs	r2, r0
 8003e88:	000b      	movs	r3, r1
 8003e8a:	488a      	ldr	r0, [pc, #552]	@ (80040b4 <CreateMessage+0x3c4>)
 8003e8c:	4997      	ldr	r1, [pc, #604]	@ (80040ec <CreateMessage+0x3fc>)
 8003e8e:	9202      	str	r2, [sp, #8]
 8003e90:	9303      	str	r3, [sp, #12]
 8003e92:	4b8f      	ldr	r3, [pc, #572]	@ (80040d0 <CreateMessage+0x3e0>)
 8003e94:	9300      	str	r3, [sp, #0]
 8003e96:	0003      	movs	r3, r0
 8003e98:	002a      	movs	r2, r5
 8003e9a:	0020      	movs	r0, r4
 8003e9c:	f01b fbe2 	bl	801f664 <siprintf>
  index = strlen(message);
 8003ea0:	4b89      	ldr	r3, [pc, #548]	@ (80040c8 <CreateMessage+0x3d8>)
 8003ea2:	0018      	movs	r0, r3
 8003ea4:	f7fc f962 	bl	800016c <strlen>
 8003ea8:	0002      	movs	r2, r0
 8003eaa:	19bb      	adds	r3, r7, r6
 8003eac:	801a      	strh	r2, [r3, #0]

  uint8ArrayToString(Buffer, vocConfig);
 8003eae:	4a75      	ldr	r2, [pc, #468]	@ (8004084 <CreateMessage+0x394>)
 8003eb0:	4b87      	ldr	r3, [pc, #540]	@ (80040d0 <CreateMessage+0x3e0>)
 8003eb2:	0011      	movs	r1, r2
 8003eb4:	0018      	movs	r0, r3
 8003eb6:	f7ff fef7 	bl	8003ca8 <uint8ArrayToString>
  sprintf(&message[index], "{\"name\":\"voc\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%d, \"unit\":\"VOCi\"},", uid[2], (char*)nameConfig, Buffer, VOCIndex);
 8003eba:	19bb      	adds	r3, r7, r6
 8003ebc:	881a      	ldrh	r2, [r3, #0]
 8003ebe:	4b82      	ldr	r3, [pc, #520]	@ (80040c8 <CreateMessage+0x3d8>)
 8003ec0:	18d0      	adds	r0, r2, r3
 8003ec2:	4b84      	ldr	r3, [pc, #528]	@ (80040d4 <CreateMessage+0x3e4>)
 8003ec4:	689a      	ldr	r2, [r3, #8]
 8003ec6:	4b8a      	ldr	r3, [pc, #552]	@ (80040f0 <CreateMessage+0x400>)
 8003ec8:	881b      	ldrh	r3, [r3, #0]
 8003eca:	4c7a      	ldr	r4, [pc, #488]	@ (80040b4 <CreateMessage+0x3c4>)
 8003ecc:	4989      	ldr	r1, [pc, #548]	@ (80040f4 <CreateMessage+0x404>)
 8003ece:	9301      	str	r3, [sp, #4]
 8003ed0:	4b7f      	ldr	r3, [pc, #508]	@ (80040d0 <CreateMessage+0x3e0>)
 8003ed2:	9300      	str	r3, [sp, #0]
 8003ed4:	0023      	movs	r3, r4
 8003ed6:	f01b fbc5 	bl	801f664 <siprintf>
  index = strlen(message);
 8003eda:	4b7b      	ldr	r3, [pc, #492]	@ (80040c8 <CreateMessage+0x3d8>)
 8003edc:	0018      	movs	r0, r3
 8003ede:	f7fc f945 	bl	800016c <strlen>
 8003ee2:	0002      	movs	r2, r0
 8003ee4:	19bb      	adds	r3, r7, r6
 8003ee6:	801a      	strh	r2, [r3, #0]

  if(!onBeurs){
 8003ee8:	1dfb      	adds	r3, r7, #7
 8003eea:	781b      	ldrb	r3, [r3, #0]
 8003eec:	2201      	movs	r2, #1
 8003eee:	4053      	eors	r3, r2
 8003ef0:	b2db      	uxtb	r3, r3
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d100      	bne.n	8003ef8 <CreateMessage+0x208>
 8003ef6:	e113      	b.n	8004120 <CreateMessage+0x430>
    uint8ArrayToString(Buffer, batteryConfig);
 8003ef8:	4a64      	ldr	r2, [pc, #400]	@ (800408c <CreateMessage+0x39c>)
 8003efa:	4b75      	ldr	r3, [pc, #468]	@ (80040d0 <CreateMessage+0x3e0>)
 8003efc:	0011      	movs	r1, r2
 8003efe:	0018      	movs	r0, r3
 8003f00:	f7ff fed2 	bl	8003ca8 <uint8ArrayToString>
    sprintf(&message[index], "{\"name\":\"battery voltage\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.2f, \"unit\":\"V\"},", uid[2], (char*)nameConfig, Buffer, batteryCharge);
 8003f04:	19bb      	adds	r3, r7, r6
 8003f06:	881a      	ldrh	r2, [r3, #0]
 8003f08:	4b6f      	ldr	r3, [pc, #444]	@ (80040c8 <CreateMessage+0x3d8>)
 8003f0a:	18d4      	adds	r4, r2, r3
 8003f0c:	4b71      	ldr	r3, [pc, #452]	@ (80040d4 <CreateMessage+0x3e4>)
 8003f0e:	689d      	ldr	r5, [r3, #8]
 8003f10:	4b79      	ldr	r3, [pc, #484]	@ (80040f8 <CreateMessage+0x408>)
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	1c18      	adds	r0, r3, #0
 8003f16:	f7ff faa5 	bl	8003464 <__aeabi_f2d>
 8003f1a:	0002      	movs	r2, r0
 8003f1c:	000b      	movs	r3, r1
 8003f1e:	4865      	ldr	r0, [pc, #404]	@ (80040b4 <CreateMessage+0x3c4>)
 8003f20:	4976      	ldr	r1, [pc, #472]	@ (80040fc <CreateMessage+0x40c>)
 8003f22:	9202      	str	r2, [sp, #8]
 8003f24:	9303      	str	r3, [sp, #12]
 8003f26:	4b6a      	ldr	r3, [pc, #424]	@ (80040d0 <CreateMessage+0x3e0>)
 8003f28:	9300      	str	r3, [sp, #0]
 8003f2a:	0003      	movs	r3, r0
 8003f2c:	002a      	movs	r2, r5
 8003f2e:	0020      	movs	r0, r4
 8003f30:	f01b fb98 	bl	801f664 <siprintf>
    index = strlen(message);
 8003f34:	4b64      	ldr	r3, [pc, #400]	@ (80040c8 <CreateMessage+0x3d8>)
 8003f36:	0018      	movs	r0, r3
 8003f38:	f7fc f918 	bl	800016c <strlen>
 8003f3c:	0002      	movs	r2, r0
 8003f3e:	19bb      	adds	r3, r7, r6
 8003f40:	801a      	strh	r2, [r3, #0]

    uint8ArrayToString(Buffer, solarConfig);
 8003f42:	4a54      	ldr	r2, [pc, #336]	@ (8004094 <CreateMessage+0x3a4>)
 8003f44:	4b62      	ldr	r3, [pc, #392]	@ (80040d0 <CreateMessage+0x3e0>)
 8003f46:	0011      	movs	r1, r2
 8003f48:	0018      	movs	r0, r3
 8003f4a:	f7ff fead 	bl	8003ca8 <uint8ArrayToString>
    sprintf(&message[index], "{\"name\":\"Solar voltage\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.2f, \"unit\":\"V\"},", uid[2], (char*)nameConfig, Buffer, solarCharge);
 8003f4e:	19bb      	adds	r3, r7, r6
 8003f50:	881a      	ldrh	r2, [r3, #0]
 8003f52:	4b5d      	ldr	r3, [pc, #372]	@ (80040c8 <CreateMessage+0x3d8>)
 8003f54:	18d4      	adds	r4, r2, r3
 8003f56:	4b5f      	ldr	r3, [pc, #380]	@ (80040d4 <CreateMessage+0x3e4>)
 8003f58:	689d      	ldr	r5, [r3, #8]
 8003f5a:	4b69      	ldr	r3, [pc, #420]	@ (8004100 <CreateMessage+0x410>)
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	1c18      	adds	r0, r3, #0
 8003f60:	f7ff fa80 	bl	8003464 <__aeabi_f2d>
 8003f64:	0002      	movs	r2, r0
 8003f66:	000b      	movs	r3, r1
 8003f68:	4852      	ldr	r0, [pc, #328]	@ (80040b4 <CreateMessage+0x3c4>)
 8003f6a:	4966      	ldr	r1, [pc, #408]	@ (8004104 <CreateMessage+0x414>)
 8003f6c:	9202      	str	r2, [sp, #8]
 8003f6e:	9303      	str	r3, [sp, #12]
 8003f70:	4b57      	ldr	r3, [pc, #348]	@ (80040d0 <CreateMessage+0x3e0>)
 8003f72:	9300      	str	r3, [sp, #0]
 8003f74:	0003      	movs	r3, r0
 8003f76:	002a      	movs	r2, r5
 8003f78:	0020      	movs	r0, r4
 8003f7a:	f01b fb73 	bl	801f664 <siprintf>
    index = strlen(message);
 8003f7e:	4b52      	ldr	r3, [pc, #328]	@ (80040c8 <CreateMessage+0x3d8>)
 8003f80:	0018      	movs	r0, r3
 8003f82:	f7fc f8f3 	bl	800016c <strlen>
 8003f86:	0002      	movs	r2, r0
 8003f88:	19bb      	adds	r3, r7, r6
 8003f8a:	801a      	strh	r2, [r3, #0]

    uint8ArrayToString(Buffer, noxConfig);
 8003f8c:	4a43      	ldr	r2, [pc, #268]	@ (800409c <CreateMessage+0x3ac>)
 8003f8e:	4b50      	ldr	r3, [pc, #320]	@ (80040d0 <CreateMessage+0x3e0>)
 8003f90:	0011      	movs	r1, r2
 8003f92:	0018      	movs	r0, r3
 8003f94:	f7ff fe88 	bl	8003ca8 <uint8ArrayToString>
    sprintf(&message[index], "{\"name\":\"NOx\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.1f, \"unit\":\"NOxr\"},", uid[2], (char*)nameConfig, Buffer, airNOx);
 8003f98:	19bb      	adds	r3, r7, r6
 8003f9a:	881a      	ldrh	r2, [r3, #0]
 8003f9c:	4b4a      	ldr	r3, [pc, #296]	@ (80040c8 <CreateMessage+0x3d8>)
 8003f9e:	18d4      	adds	r4, r2, r3
 8003fa0:	4b4c      	ldr	r3, [pc, #304]	@ (80040d4 <CreateMessage+0x3e4>)
 8003fa2:	689d      	ldr	r5, [r3, #8]
 8003fa4:	4b58      	ldr	r3, [pc, #352]	@ (8004108 <CreateMessage+0x418>)
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	1c18      	adds	r0, r3, #0
 8003faa:	f7ff fa5b 	bl	8003464 <__aeabi_f2d>
 8003fae:	0002      	movs	r2, r0
 8003fb0:	000b      	movs	r3, r1
 8003fb2:	4840      	ldr	r0, [pc, #256]	@ (80040b4 <CreateMessage+0x3c4>)
 8003fb4:	4955      	ldr	r1, [pc, #340]	@ (800410c <CreateMessage+0x41c>)
 8003fb6:	9202      	str	r2, [sp, #8]
 8003fb8:	9303      	str	r3, [sp, #12]
 8003fba:	4b45      	ldr	r3, [pc, #276]	@ (80040d0 <CreateMessage+0x3e0>)
 8003fbc:	9300      	str	r3, [sp, #0]
 8003fbe:	0003      	movs	r3, r0
 8003fc0:	002a      	movs	r2, r5
 8003fc2:	0020      	movs	r0, r4
 8003fc4:	f01b fb4e 	bl	801f664 <siprintf>
    index = strlen(message);
 8003fc8:	4b3f      	ldr	r3, [pc, #252]	@ (80040c8 <CreateMessage+0x3d8>)
 8003fca:	0018      	movs	r0, r3
 8003fcc:	f7fc f8ce 	bl	800016c <strlen>
 8003fd0:	0002      	movs	r2, r0
 8003fd2:	19bb      	adds	r3, r7, r6
 8003fd4:	801a      	strh	r2, [r3, #0]

    uint8ArrayToString(Buffer, PM2Config);
 8003fd6:	4a33      	ldr	r2, [pc, #204]	@ (80040a4 <CreateMessage+0x3b4>)
 8003fd8:	4b3d      	ldr	r3, [pc, #244]	@ (80040d0 <CreateMessage+0x3e0>)
 8003fda:	0011      	movs	r1, r2
 8003fdc:	0018      	movs	r0, r3
 8003fde:	f7ff fe63 	bl	8003ca8 <uint8ArrayToString>
    sprintf(&message[index], "{\"name\":\"PM2.5\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.1f, \"unit\":\"µg/m3\"},", uid[2], (char*)nameConfig, Buffer, airPM2);
 8003fe2:	19bb      	adds	r3, r7, r6
 8003fe4:	881a      	ldrh	r2, [r3, #0]
 8003fe6:	4b38      	ldr	r3, [pc, #224]	@ (80040c8 <CreateMessage+0x3d8>)
 8003fe8:	18d4      	adds	r4, r2, r3
 8003fea:	4b3a      	ldr	r3, [pc, #232]	@ (80040d4 <CreateMessage+0x3e4>)
 8003fec:	689d      	ldr	r5, [r3, #8]
 8003fee:	4b48      	ldr	r3, [pc, #288]	@ (8004110 <CreateMessage+0x420>)
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	1c18      	adds	r0, r3, #0
 8003ff4:	f7ff fa36 	bl	8003464 <__aeabi_f2d>
 8003ff8:	0002      	movs	r2, r0
 8003ffa:	000b      	movs	r3, r1
 8003ffc:	482d      	ldr	r0, [pc, #180]	@ (80040b4 <CreateMessage+0x3c4>)
 8003ffe:	4945      	ldr	r1, [pc, #276]	@ (8004114 <CreateMessage+0x424>)
 8004000:	9202      	str	r2, [sp, #8]
 8004002:	9303      	str	r3, [sp, #12]
 8004004:	4b32      	ldr	r3, [pc, #200]	@ (80040d0 <CreateMessage+0x3e0>)
 8004006:	9300      	str	r3, [sp, #0]
 8004008:	0003      	movs	r3, r0
 800400a:	002a      	movs	r2, r5
 800400c:	0020      	movs	r0, r4
 800400e:	f01b fb29 	bl	801f664 <siprintf>
    index = strlen(message);
 8004012:	4b2d      	ldr	r3, [pc, #180]	@ (80040c8 <CreateMessage+0x3d8>)
 8004014:	0018      	movs	r0, r3
 8004016:	f7fc f8a9 	bl	800016c <strlen>
 800401a:	0002      	movs	r2, r0
 800401c:	19bb      	adds	r3, r7, r6
 800401e:	801a      	strh	r2, [r3, #0]

    uint8ArrayToString(Buffer, PM10Config);
 8004020:	4a22      	ldr	r2, [pc, #136]	@ (80040ac <CreateMessage+0x3bc>)
 8004022:	4b2b      	ldr	r3, [pc, #172]	@ (80040d0 <CreateMessage+0x3e0>)
 8004024:	0011      	movs	r1, r2
 8004026:	0018      	movs	r0, r3
 8004028:	f7ff fe3e 	bl	8003ca8 <uint8ArrayToString>
    sprintf(&message[index], "{\"name\":\"PM10\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.1f, \"unit\":\"µg/m3\"}", uid[2], (char*)nameConfig, Buffer, airPM10);
 800402c:	19bb      	adds	r3, r7, r6
 800402e:	881a      	ldrh	r2, [r3, #0]
 8004030:	4b25      	ldr	r3, [pc, #148]	@ (80040c8 <CreateMessage+0x3d8>)
 8004032:	18d4      	adds	r4, r2, r3
 8004034:	4b27      	ldr	r3, [pc, #156]	@ (80040d4 <CreateMessage+0x3e4>)
 8004036:	689d      	ldr	r5, [r3, #8]
 8004038:	4b37      	ldr	r3, [pc, #220]	@ (8004118 <CreateMessage+0x428>)
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	1c18      	adds	r0, r3, #0
 800403e:	f7ff fa11 	bl	8003464 <__aeabi_f2d>
 8004042:	0002      	movs	r2, r0
 8004044:	000b      	movs	r3, r1
 8004046:	481b      	ldr	r0, [pc, #108]	@ (80040b4 <CreateMessage+0x3c4>)
 8004048:	4934      	ldr	r1, [pc, #208]	@ (800411c <CreateMessage+0x42c>)
 800404a:	9202      	str	r2, [sp, #8]
 800404c:	9303      	str	r3, [sp, #12]
 800404e:	4b20      	ldr	r3, [pc, #128]	@ (80040d0 <CreateMessage+0x3e0>)
 8004050:	9300      	str	r3, [sp, #0]
 8004052:	0003      	movs	r3, r0
 8004054:	002a      	movs	r2, r5
 8004056:	0020      	movs	r0, r4
 8004058:	f01b fb04 	bl	801f664 <siprintf>
    index = strlen(message);
 800405c:	4b1a      	ldr	r3, [pc, #104]	@ (80040c8 <CreateMessage+0x3d8>)
 800405e:	0018      	movs	r0, r3
 8004060:	f7fc f884 	bl	800016c <strlen>
 8004064:	0002      	movs	r2, r0
 8004066:	19bb      	adds	r3, r7, r6
 8004068:	801a      	strh	r2, [r3, #0]
 800406a:	e07f      	b.n	800416c <CreateMessage+0x47c>
 800406c:	20000a6c 	.word	0x20000a6c
 8004070:	0808000c 	.word	0x0808000c
 8004074:	20000a78 	.word	0x20000a78
 8004078:	08080018 	.word	0x08080018
 800407c:	20000a84 	.word	0x20000a84
 8004080:	08080048 	.word	0x08080048
 8004084:	20000a90 	.word	0x20000a90
 8004088:	08080030 	.word	0x08080030
 800408c:	20000a9c 	.word	0x20000a9c
 8004090:	0808006c 	.word	0x0808006c
 8004094:	20000aa8 	.word	0x20000aa8
 8004098:	08080078 	.word	0x08080078
 800409c:	20000ab4 	.word	0x20000ab4
 80040a0:	08080024 	.word	0x08080024
 80040a4:	20000ac0 	.word	0x20000ac0
 80040a8:	08080054 	.word	0x08080054
 80040ac:	20000acc 	.word	0x20000acc
 80040b0:	08080060 	.word	0x08080060
 80040b4:	20000ad8 	.word	0x20000ad8
 80040b8:	08080090 	.word	0x08080090
 80040bc:	080246e8 	.word	0x080246e8
 80040c0:	080229f8 	.word	0x080229f8
 80040c4:	08022850 	.word	0x08022850
 80040c8:	2000058c 	.word	0x2000058c
 80040cc:	08022a1c 	.word	0x08022a1c
 80040d0:	20000af8 	.word	0x20000af8
 80040d4:	20000554 	.word	0x20000554
 80040d8:	20000568 	.word	0x20000568
 80040dc:	08022a20 	.word	0x08022a20
 80040e0:	2000056c 	.word	0x2000056c
 80040e4:	08022a74 	.word	0x08022a74
 80040e8:	2000057c 	.word	0x2000057c
 80040ec:	08022acc 	.word	0x08022acc
 80040f0:	20000578 	.word	0x20000578
 80040f4:	08022b28 	.word	0x08022b28
 80040f8:	20000570 	.word	0x20000570
 80040fc:	08022b7c 	.word	0x08022b7c
 8004100:	20000574 	.word	0x20000574
 8004104:	08022bdc 	.word	0x08022bdc
 8004108:	20000588 	.word	0x20000588
 800410c:	08022c3c 	.word	0x08022c3c
 8004110:	20000580 	.word	0x20000580
 8004114:	08022c94 	.word	0x08022c94
 8004118:	20000584 	.word	0x20000584
 800411c:	08022cf0 	.word	0x08022cf0

  }
  else{
    uint8ArrayToString(Buffer, batteryConfig);
 8004120:	4a21      	ldr	r2, [pc, #132]	@ (80041a8 <CreateMessage+0x4b8>)
 8004122:	4b22      	ldr	r3, [pc, #136]	@ (80041ac <CreateMessage+0x4bc>)
 8004124:	0011      	movs	r1, r2
 8004126:	0018      	movs	r0, r3
 8004128:	f7ff fdbe 	bl	8003ca8 <uint8ArrayToString>
    sprintf(&message[index], "{\"name\":\"battery\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.2f, \"unit\":\"V\"}", uid[2], (char*)nameConfig, Buffer, batteryCharge);
 800412c:	260e      	movs	r6, #14
 800412e:	19bb      	adds	r3, r7, r6
 8004130:	881a      	ldrh	r2, [r3, #0]
 8004132:	4b1f      	ldr	r3, [pc, #124]	@ (80041b0 <CreateMessage+0x4c0>)
 8004134:	18d4      	adds	r4, r2, r3
 8004136:	4b1f      	ldr	r3, [pc, #124]	@ (80041b4 <CreateMessage+0x4c4>)
 8004138:	689d      	ldr	r5, [r3, #8]
 800413a:	4b1f      	ldr	r3, [pc, #124]	@ (80041b8 <CreateMessage+0x4c8>)
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	1c18      	adds	r0, r3, #0
 8004140:	f7ff f990 	bl	8003464 <__aeabi_f2d>
 8004144:	0002      	movs	r2, r0
 8004146:	000b      	movs	r3, r1
 8004148:	481c      	ldr	r0, [pc, #112]	@ (80041bc <CreateMessage+0x4cc>)
 800414a:	491d      	ldr	r1, [pc, #116]	@ (80041c0 <CreateMessage+0x4d0>)
 800414c:	9202      	str	r2, [sp, #8]
 800414e:	9303      	str	r3, [sp, #12]
 8004150:	4b16      	ldr	r3, [pc, #88]	@ (80041ac <CreateMessage+0x4bc>)
 8004152:	9300      	str	r3, [sp, #0]
 8004154:	0003      	movs	r3, r0
 8004156:	002a      	movs	r2, r5
 8004158:	0020      	movs	r0, r4
 800415a:	f01b fa83 	bl	801f664 <siprintf>
    index = strlen(message);
 800415e:	4b14      	ldr	r3, [pc, #80]	@ (80041b0 <CreateMessage+0x4c0>)
 8004160:	0018      	movs	r0, r3
 8004162:	f7fc f803 	bl	800016c <strlen>
 8004166:	0002      	movs	r2, r0
 8004168:	19bb      	adds	r3, r7, r6
 800416a:	801a      	strh	r2, [r3, #0]
    index = strlen(message);


    sprintf(&message[index], "{\"SolarVoltage\":%.2f}", solarCharge);
#endif
  Debug("Length of datagram: %d", index);
 800416c:	240e      	movs	r4, #14
 800416e:	193b      	adds	r3, r7, r4
 8004170:	881b      	ldrh	r3, [r3, #0]
 8004172:	4a14      	ldr	r2, [pc, #80]	@ (80041c4 <CreateMessage+0x4d4>)
 8004174:	4914      	ldr	r1, [pc, #80]	@ (80041c8 <CreateMessage+0x4d8>)
 8004176:	2003      	movs	r0, #3
 8004178:	f009 fd20 	bl	800dbbc <CreateLine>
  index = sprintf(&message[index], "]");
 800417c:	193b      	adds	r3, r7, r4
 800417e:	881a      	ldrh	r2, [r3, #0]
 8004180:	4b0b      	ldr	r3, [pc, #44]	@ (80041b0 <CreateMessage+0x4c0>)
 8004182:	18d3      	adds	r3, r2, r3
 8004184:	4a11      	ldr	r2, [pc, #68]	@ (80041cc <CreateMessage+0x4dc>)
 8004186:	0011      	movs	r1, r2
 8004188:	0018      	movs	r0, r3
 800418a:	f01b fa6b 	bl	801f664 <siprintf>
 800418e:	0002      	movs	r2, r0
 8004190:	193b      	adds	r3, r7, r4
 8004192:	801a      	strh	r2, [r3, #0]
  return strlen(message);
 8004194:	4b06      	ldr	r3, [pc, #24]	@ (80041b0 <CreateMessage+0x4c0>)
 8004196:	0018      	movs	r0, r3
 8004198:	f7fb ffe8 	bl	800016c <strlen>
 800419c:	0003      	movs	r3, r0
 800419e:	b29b      	uxth	r3, r3
}
 80041a0:	0018      	movs	r0, r3
 80041a2:	46bd      	mov	sp, r7
 80041a4:	b005      	add	sp, #20
 80041a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80041a8:	20000a9c 	.word	0x20000a9c
 80041ac:	20000af8 	.word	0x20000af8
 80041b0:	2000058c 	.word	0x2000058c
 80041b4:	20000554 	.word	0x20000554
 80041b8:	20000570 	.word	0x20000570
 80041bc:	20000ad8 	.word	0x20000ad8
 80041c0:	08022d48 	.word	0x08022d48
 80041c4:	08022da0 	.word	0x08022da0
 80041c8:	08022850 	.word	0x08022850
 80041cc:	08022db8 	.word	0x08022db8

080041d0 <StartProg>:

//void //SetCommandBuffer(const char* command) {
//    strncpy(CommandBuffer, command, ESP_TX_BUFFER_SIZE);
//    CommandEchoed = false; // Reset the flag when a new command is sent
//}
void StartProg(){
 80041d0:	b580      	push	{r7, lr}
 80041d2:	af00      	add	r7, sp, #0
  //InitWifiConfig();
  HAL_Delay(100);
 80041d4:	2064      	movs	r0, #100	@ 0x64
 80041d6:	f00a f951 	bl	800e47c <HAL_Delay>
  HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_RESET);
 80041da:	4b15      	ldr	r3, [pc, #84]	@ (8004230 <StartProg+0x60>)
 80041dc:	2200      	movs	r2, #0
 80041de:	2101      	movs	r1, #1
 80041e0:	0018      	movs	r0, r3
 80041e2:	f00b fbd2 	bl	800f98a <HAL_GPIO_WritePin>
  HAL_Delay(100);
 80041e6:	2064      	movs	r0, #100	@ 0x64
 80041e8:	f00a f948 	bl	800e47c <HAL_Delay>
  HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, GPIO_PIN_RESET);
 80041ec:	4b10      	ldr	r3, [pc, #64]	@ (8004230 <StartProg+0x60>)
 80041ee:	2200      	movs	r2, #0
 80041f0:	2102      	movs	r1, #2
 80041f2:	0018      	movs	r0, r3
 80041f4:	f00b fbc9 	bl	800f98a <HAL_GPIO_WritePin>
  HAL_Delay(500);
 80041f8:	23fa      	movs	r3, #250	@ 0xfa
 80041fa:	005b      	lsls	r3, r3, #1
 80041fc:	0018      	movs	r0, r3
 80041fe:	f00a f93d 	bl	800e47c <HAL_Delay>
  HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_SET);
 8004202:	4b0b      	ldr	r3, [pc, #44]	@ (8004230 <StartProg+0x60>)
 8004204:	2201      	movs	r2, #1
 8004206:	2101      	movs	r1, #1
 8004208:	0018      	movs	r0, r3
 800420a:	f00b fbbe 	bl	800f98a <HAL_GPIO_WritePin>
  HAL_Delay(500);
 800420e:	23fa      	movs	r3, #250	@ 0xfa
 8004210:	005b      	lsls	r3, r3, #1
 8004212:	0018      	movs	r0, r3
 8004214:	f00a f932 	bl	800e47c <HAL_Delay>
  HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, GPIO_PIN_SET);
 8004218:	4b05      	ldr	r3, [pc, #20]	@ (8004230 <StartProg+0x60>)
 800421a:	2201      	movs	r2, #1
 800421c:	2102      	movs	r1, #2
 800421e:	0018      	movs	r0, r3
 8004220:	f00b fbb3 	bl	800f98a <HAL_GPIO_WritePin>
  HAL_Delay(40);
 8004224:	2028      	movs	r0, #40	@ 0x28
 8004226:	f00a f929 	bl	800e47c <HAL_Delay>
}
 800422a:	46c0      	nop			@ (mov r8, r8)
 800422c:	46bd      	mov	sp, r7
 800422e:	bd80      	pop	{r7, pc}
 8004230:	50001c00 	.word	0x50001c00

08004234 <ParseBuffer>:
 uint8_t ParseBuffer(uint8_t* buffer, uint16_t len, uint8_t expectation) {
 8004234:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004236:	b0d9      	sub	sp, #356	@ 0x164
 8004238:	af00      	add	r7, sp, #0
 800423a:	6078      	str	r0, [r7, #4]
 800423c:	0008      	movs	r0, r1
 800423e:	0011      	movs	r1, r2
 8004240:	4ba4      	ldr	r3, [pc, #656]	@ (80044d4 <ParseBuffer+0x2a0>)
 8004242:	24b0      	movs	r4, #176	@ 0xb0
 8004244:	0064      	lsls	r4, r4, #1
 8004246:	191b      	adds	r3, r3, r4
 8004248:	19db      	adds	r3, r3, r7
 800424a:	1c02      	adds	r2, r0, #0
 800424c:	801a      	strh	r2, [r3, #0]
 800424e:	4ba2      	ldr	r3, [pc, #648]	@ (80044d8 <ParseBuffer+0x2a4>)
 8004250:	191b      	adds	r3, r3, r4
 8004252:	19db      	adds	r3, r3, r7
 8004254:	1c0a      	adds	r2, r1, #0
 8004256:	701a      	strb	r2, [r3, #0]
  char tempBuf[256];
  memset(tempBuf, '\0', 256);
 8004258:	2380      	movs	r3, #128	@ 0x80
 800425a:	005a      	lsls	r2, r3, #1
 800425c:	2348      	movs	r3, #72	@ 0x48
 800425e:	18fb      	adds	r3, r7, r3
 8004260:	2100      	movs	r1, #0
 8004262:	0018      	movs	r0, r3
 8004264:	f01b fb42 	bl	801f8ec <memset>
  char status = RECEIVE_STATUS_INCOMPLETE;
 8004268:	2360      	movs	r3, #96	@ 0x60
 800426a:	33ff      	adds	r3, #255	@ 0xff
 800426c:	18fb      	adds	r3, r7, r3
 800426e:	2203      	movs	r2, #3
 8004270:	701a      	strb	r2, [r3, #0]
  for(uint16_t i=0; i<len; i++){
 8004272:	23ae      	movs	r3, #174	@ 0xae
 8004274:	005b      	lsls	r3, r3, #1
 8004276:	18fb      	adds	r3, r7, r3
 8004278:	2200      	movs	r2, #0
 800427a:	801a      	strh	r2, [r3, #0]
 800427c:	e013      	b.n	80042a6 <ParseBuffer+0x72>
    tempBuf[i] = (char)buffer[i];
 800427e:	20ae      	movs	r0, #174	@ 0xae
 8004280:	0040      	lsls	r0, r0, #1
 8004282:	183b      	adds	r3, r7, r0
 8004284:	881b      	ldrh	r3, [r3, #0]
 8004286:	687a      	ldr	r2, [r7, #4]
 8004288:	18d2      	adds	r2, r2, r3
 800428a:	183b      	adds	r3, r7, r0
 800428c:	881b      	ldrh	r3, [r3, #0]
 800428e:	7811      	ldrb	r1, [r2, #0]
 8004290:	4a92      	ldr	r2, [pc, #584]	@ (80044dc <ParseBuffer+0x2a8>)
 8004292:	24b0      	movs	r4, #176	@ 0xb0
 8004294:	0064      	lsls	r4, r4, #1
 8004296:	1912      	adds	r2, r2, r4
 8004298:	19d2      	adds	r2, r2, r7
 800429a:	54d1      	strb	r1, [r2, r3]
  for(uint16_t i=0; i<len; i++){
 800429c:	183b      	adds	r3, r7, r0
 800429e:	881a      	ldrh	r2, [r3, #0]
 80042a0:	183b      	adds	r3, r7, r0
 80042a2:	3201      	adds	r2, #1
 80042a4:	801a      	strh	r2, [r3, #0]
 80042a6:	23ae      	movs	r3, #174	@ 0xae
 80042a8:	005b      	lsls	r3, r3, #1
 80042aa:	18fa      	adds	r2, r7, r3
 80042ac:	4b89      	ldr	r3, [pc, #548]	@ (80044d4 <ParseBuffer+0x2a0>)
 80042ae:	21b0      	movs	r1, #176	@ 0xb0
 80042b0:	0049      	lsls	r1, r1, #1
 80042b2:	185b      	adds	r3, r3, r1
 80042b4:	19db      	adds	r3, r3, r7
 80042b6:	8812      	ldrh	r2, [r2, #0]
 80042b8:	881b      	ldrh	r3, [r3, #0]
 80042ba:	429a      	cmp	r2, r3
 80042bc:	d3df      	bcc.n	800427e <ParseBuffer+0x4a>
  }
  tempBuf[len] = '\0';
 80042be:	4b85      	ldr	r3, [pc, #532]	@ (80044d4 <ParseBuffer+0x2a0>)
 80042c0:	185b      	adds	r3, r3, r1
 80042c2:	19db      	adds	r3, r3, r7
 80042c4:	881b      	ldrh	r3, [r3, #0]
 80042c6:	4a85      	ldr	r2, [pc, #532]	@ (80044dc <ParseBuffer+0x2a8>)
 80042c8:	1852      	adds	r2, r2, r1
 80042ca:	19d2      	adds	r2, r2, r7
 80042cc:	2100      	movs	r1, #0
 80042ce:	54d1      	strb	r1, [r2, r3]
  if (GetVerboseLevel() == VERBOSE_ALL) {
 80042d0:	f009 fcee 	bl	800dcb0 <GetVerboseLevel>
 80042d4:	0003      	movs	r3, r0
 80042d6:	2b03      	cmp	r3, #3
 80042d8:	d106      	bne.n	80042e8 <ParseBuffer+0xb4>
#ifdef LONGMESSAGES
  printf("Receive ParseBuffer: %s", tempBuf );
#else
  Debug("Receive ParseBuffer: %s", tempBuf );
 80042da:	2348      	movs	r3, #72	@ 0x48
 80042dc:	18fb      	adds	r3, r7, r3
 80042de:	4a80      	ldr	r2, [pc, #512]	@ (80044e0 <ParseBuffer+0x2ac>)
 80042e0:	4980      	ldr	r1, [pc, #512]	@ (80044e4 <ParseBuffer+0x2b0>)
 80042e2:	2003      	movs	r0, #3
 80042e4:	f009 fc6a 	bl	800dbbc <CreateLine>
#endif
  }
  char * ParsePoint = 0;
 80042e8:	2300      	movs	r3, #0
 80042ea:	26ac      	movs	r6, #172	@ 0xac
 80042ec:	0076      	lsls	r6, r6, #1
 80042ee:	19ba      	adds	r2, r7, r6
 80042f0:	6013      	str	r3, [r2, #0]
  const char OK[] = AT_RESPONSE_OK;
 80042f2:	4b7d      	ldr	r3, [pc, #500]	@ (80044e8 <ParseBuffer+0x2b4>)
 80042f4:	25b0      	movs	r5, #176	@ 0xb0
 80042f6:	006d      	lsls	r5, r5, #1
 80042f8:	195b      	adds	r3, r3, r5
 80042fa:	19db      	adds	r3, r3, r7
 80042fc:	4a7b      	ldr	r2, [pc, #492]	@ (80044ec <ParseBuffer+0x2b8>)
 80042fe:	8811      	ldrh	r1, [r2, #0]
 8004300:	8019      	strh	r1, [r3, #0]
 8004302:	7892      	ldrb	r2, [r2, #2]
 8004304:	709a      	strb	r2, [r3, #2]
  const char ERROR[] = AT_RESPONSE_ERROR;
 8004306:	4b7a      	ldr	r3, [pc, #488]	@ (80044f0 <ParseBuffer+0x2bc>)
 8004308:	195b      	adds	r3, r3, r5
 800430a:	19db      	adds	r3, r3, r7
 800430c:	4a79      	ldr	r2, [pc, #484]	@ (80044f4 <ParseBuffer+0x2c0>)
 800430e:	6811      	ldr	r1, [r2, #0]
 8004310:	6019      	str	r1, [r3, #0]
 8004312:	8892      	ldrh	r2, [r2, #4]
 8004314:	809a      	strh	r2, [r3, #4]
  const char FAIL[] = AT_RESPONSE_FAIL;
 8004316:	4b78      	ldr	r3, [pc, #480]	@ (80044f8 <ParseBuffer+0x2c4>)
 8004318:	195b      	adds	r3, r3, r5
 800431a:	19db      	adds	r3, r3, r7
 800431c:	4a77      	ldr	r2, [pc, #476]	@ (80044fc <ParseBuffer+0x2c8>)
 800431e:	6811      	ldr	r1, [r2, #0]
 8004320:	6019      	str	r1, [r3, #0]
 8004322:	7912      	ldrb	r2, [r2, #4]
 8004324:	711a      	strb	r2, [r3, #4]
  const char ready[] = AT_RESPONSE_READY;
 8004326:	4b76      	ldr	r3, [pc, #472]	@ (8004500 <ParseBuffer+0x2cc>)
 8004328:	195b      	adds	r3, r3, r5
 800432a:	19db      	adds	r3, r3, r7
 800432c:	4a75      	ldr	r2, [pc, #468]	@ (8004504 <ParseBuffer+0x2d0>)
 800432e:	6811      	ldr	r1, [r2, #0]
 8004330:	6019      	str	r1, [r3, #0]
 8004332:	8892      	ldrh	r2, [r2, #4]
 8004334:	809a      	strh	r2, [r3, #4]
  const char start[] = AT_RESPONSE_START;
 8004336:	4b74      	ldr	r3, [pc, #464]	@ (8004508 <ParseBuffer+0x2d4>)
 8004338:	195b      	adds	r3, r3, r5
 800433a:	19db      	adds	r3, r3, r7
 800433c:	223e      	movs	r2, #62	@ 0x3e
 800433e:	801a      	strh	r2, [r3, #0]
  const char WIFI[] = AT_RESPONSE_WIFI;
 8004340:	4b72      	ldr	r3, [pc, #456]	@ (800450c <ParseBuffer+0x2d8>)
 8004342:	195b      	adds	r3, r3, r5
 8004344:	19db      	adds	r3, r3, r7
 8004346:	4a72      	ldr	r2, [pc, #456]	@ (8004510 <ParseBuffer+0x2dc>)
 8004348:	ca13      	ldmia	r2!, {r0, r1, r4}
 800434a:	c313      	stmia	r3!, {r0, r1, r4}
 800434c:	8811      	ldrh	r1, [r2, #0]
 800434e:	8019      	strh	r1, [r3, #0]
 8004350:	7892      	ldrb	r2, [r2, #2]
 8004352:	709a      	strb	r2, [r3, #2]
  const char TIME[] = AT_RESPONSE_TIME_UPDATED;
 8004354:	4b6f      	ldr	r3, [pc, #444]	@ (8004514 <ParseBuffer+0x2e0>)
 8004356:	195b      	adds	r3, r3, r5
 8004358:	19db      	adds	r3, r3, r7
 800435a:	4a6f      	ldr	r2, [pc, #444]	@ (8004518 <ParseBuffer+0x2e4>)
 800435c:	ca13      	ldmia	r2!, {r0, r1, r4}
 800435e:	c313      	stmia	r3!, {r0, r1, r4}
 8004360:	8812      	ldrh	r2, [r2, #0]
 8004362:	801a      	strh	r2, [r3, #0]
  if(expectation == RECEIVE_EXPECTATION_OK){
 8004364:	4b5c      	ldr	r3, [pc, #368]	@ (80044d8 <ParseBuffer+0x2a4>)
 8004366:	195b      	adds	r3, r3, r5
 8004368:	19db      	adds	r3, r3, r7
 800436a:	781b      	ldrb	r3, [r3, #0]
 800436c:	2b00      	cmp	r3, #0
 800436e:	d10a      	bne.n	8004386 <ParseBuffer+0x152>
    ParsePoint = strstr(tempBuf, OK);
 8004370:	2344      	movs	r3, #68	@ 0x44
 8004372:	18fa      	adds	r2, r7, r3
 8004374:	2348      	movs	r3, #72	@ 0x48
 8004376:	18fb      	adds	r3, r7, r3
 8004378:	0011      	movs	r1, r2
 800437a:	0018      	movs	r0, r3
 800437c:	f01b faf1 	bl	801f962 <strstr>
 8004380:	0003      	movs	r3, r0
 8004382:	19ba      	adds	r2, r7, r6
 8004384:	6013      	str	r3, [r2, #0]
  }
  if(expectation == RECEIVE_EXPECTATION_READY){
 8004386:	4b54      	ldr	r3, [pc, #336]	@ (80044d8 <ParseBuffer+0x2a4>)
 8004388:	22b0      	movs	r2, #176	@ 0xb0
 800438a:	0052      	lsls	r2, r2, #1
 800438c:	189b      	adds	r3, r3, r2
 800438e:	19db      	adds	r3, r3, r7
 8004390:	781b      	ldrb	r3, [r3, #0]
 8004392:	2b01      	cmp	r3, #1
 8004394:	d10c      	bne.n	80043b0 <ParseBuffer+0x17c>
    ParsePoint = strstr(tempBuf, ready);
 8004396:	232c      	movs	r3, #44	@ 0x2c
 8004398:	18fa      	adds	r2, r7, r3
 800439a:	2348      	movs	r3, #72	@ 0x48
 800439c:	18fb      	adds	r3, r7, r3
 800439e:	0011      	movs	r1, r2
 80043a0:	0018      	movs	r0, r3
 80043a2:	f01b fade 	bl	801f962 <strstr>
 80043a6:	0003      	movs	r3, r0
 80043a8:	22ac      	movs	r2, #172	@ 0xac
 80043aa:	0052      	lsls	r2, r2, #1
 80043ac:	18ba      	adds	r2, r7, r2
 80043ae:	6013      	str	r3, [r2, #0]
  }
  if(expectation == RECEIVE_EXPECTATION_START){
 80043b0:	4b49      	ldr	r3, [pc, #292]	@ (80044d8 <ParseBuffer+0x2a4>)
 80043b2:	22b0      	movs	r2, #176	@ 0xb0
 80043b4:	0052      	lsls	r2, r2, #1
 80043b6:	189b      	adds	r3, r3, r2
 80043b8:	19db      	adds	r3, r3, r7
 80043ba:	781b      	ldrb	r3, [r3, #0]
 80043bc:	2b02      	cmp	r3, #2
 80043be:	d10c      	bne.n	80043da <ParseBuffer+0x1a6>
    ParsePoint = strstr(tempBuf, start);
 80043c0:	2328      	movs	r3, #40	@ 0x28
 80043c2:	18fa      	adds	r2, r7, r3
 80043c4:	2348      	movs	r3, #72	@ 0x48
 80043c6:	18fb      	adds	r3, r7, r3
 80043c8:	0011      	movs	r1, r2
 80043ca:	0018      	movs	r0, r3
 80043cc:	f01b fac9 	bl	801f962 <strstr>
 80043d0:	0003      	movs	r3, r0
 80043d2:	22ac      	movs	r2, #172	@ 0xac
 80043d4:	0052      	lsls	r2, r2, #1
 80043d6:	18ba      	adds	r2, r7, r2
 80043d8:	6013      	str	r3, [r2, #0]
  }
  if(expectation == RECEIVE_EXPECTATION_TIME){
 80043da:	4b3f      	ldr	r3, [pc, #252]	@ (80044d8 <ParseBuffer+0x2a4>)
 80043dc:	22b0      	movs	r2, #176	@ 0xb0
 80043de:	0052      	lsls	r2, r2, #1
 80043e0:	189b      	adds	r3, r3, r2
 80043e2:	19db      	adds	r3, r3, r7
 80043e4:	781b      	ldrb	r3, [r3, #0]
 80043e6:	2b05      	cmp	r3, #5
 80043e8:	d10c      	bne.n	8004404 <ParseBuffer+0x1d0>
    ParsePoint = strstr(tempBuf, TIME);
 80043ea:	2308      	movs	r3, #8
 80043ec:	18fa      	adds	r2, r7, r3
 80043ee:	2348      	movs	r3, #72	@ 0x48
 80043f0:	18fb      	adds	r3, r7, r3
 80043f2:	0011      	movs	r1, r2
 80043f4:	0018      	movs	r0, r3
 80043f6:	f01b fab4 	bl	801f962 <strstr>
 80043fa:	0003      	movs	r3, r0
 80043fc:	22ac      	movs	r2, #172	@ 0xac
 80043fe:	0052      	lsls	r2, r2, #1
 8004400:	18ba      	adds	r2, r7, r2
 8004402:	6013      	str	r3, [r2, #0]
  }

  char *ParsePoint2 = strstr(tempBuf, ERROR);
 8004404:	233c      	movs	r3, #60	@ 0x3c
 8004406:	18fa      	adds	r2, r7, r3
 8004408:	2448      	movs	r4, #72	@ 0x48
 800440a:	193b      	adds	r3, r7, r4
 800440c:	0011      	movs	r1, r2
 800440e:	0018      	movs	r0, r3
 8004410:	f01b faa7 	bl	801f962 <strstr>
 8004414:	0003      	movs	r3, r0
 8004416:	22aa      	movs	r2, #170	@ 0xaa
 8004418:	0052      	lsls	r2, r2, #1
 800441a:	18ba      	adds	r2, r7, r2
 800441c:	6013      	str	r3, [r2, #0]
  char *ParsePoint3 = strstr(tempBuf, WIFI);
 800441e:	2318      	movs	r3, #24
 8004420:	18fa      	adds	r2, r7, r3
 8004422:	193b      	adds	r3, r7, r4
 8004424:	0011      	movs	r1, r2
 8004426:	0018      	movs	r0, r3
 8004428:	f01b fa9b 	bl	801f962 <strstr>
 800442c:	0003      	movs	r3, r0
 800442e:	22a8      	movs	r2, #168	@ 0xa8
 8004430:	0052      	lsls	r2, r2, #1
 8004432:	18ba      	adds	r2, r7, r2
 8004434:	6013      	str	r3, [r2, #0]
  char *ParsePoint4 = strstr(tempBuf, SSIDBeurs);
 8004436:	4a39      	ldr	r2, [pc, #228]	@ (800451c <ParseBuffer+0x2e8>)
 8004438:	193b      	adds	r3, r7, r4
 800443a:	0011      	movs	r1, r2
 800443c:	0018      	movs	r0, r3
 800443e:	f01b fa90 	bl	801f962 <strstr>
 8004442:	0003      	movs	r3, r0
 8004444:	22a6      	movs	r2, #166	@ 0xa6
 8004446:	0052      	lsls	r2, r2, #1
 8004448:	18ba      	adds	r2, r7, r2
 800444a:	6013      	str	r3, [r2, #0]
  char *ParsePoint5 = strstr(tempBuf, FAIL);
 800444c:	2334      	movs	r3, #52	@ 0x34
 800444e:	18fa      	adds	r2, r7, r3
 8004450:	193b      	adds	r3, r7, r4
 8004452:	0011      	movs	r1, r2
 8004454:	0018      	movs	r0, r3
 8004456:	f01b fa84 	bl	801f962 <strstr>
 800445a:	0003      	movs	r3, r0
 800445c:	22a4      	movs	r2, #164	@ 0xa4
 800445e:	0052      	lsls	r2, r2, #1
 8004460:	18ba      	adds	r2, r7, r2
 8004462:	6013      	str	r3, [r2, #0]
  if(len > 1 ){
 8004464:	4b1b      	ldr	r3, [pc, #108]	@ (80044d4 <ParseBuffer+0x2a0>)
 8004466:	21b0      	movs	r1, #176	@ 0xb0
 8004468:	0049      	lsls	r1, r1, #1
 800446a:	185b      	adds	r3, r3, r1
 800446c:	19db      	adds	r3, r3, r7
 800446e:	881b      	ldrh	r3, [r3, #0]
 8004470:	2b01      	cmp	r3, #1
 8004472:	d800      	bhi.n	8004476 <ParseBuffer+0x242>
 8004474:	e0c1      	b.n	80045fa <ParseBuffer+0x3c6>
    if(ParsePoint != 0 && *ParsePoint == 'O'){
 8004476:	22ac      	movs	r2, #172	@ 0xac
 8004478:	0052      	lsls	r2, r2, #1
 800447a:	18bb      	adds	r3, r7, r2
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	2b00      	cmp	r3, #0
 8004480:	d054      	beq.n	800452c <ParseBuffer+0x2f8>
 8004482:	18bb      	adds	r3, r7, r2
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	781b      	ldrb	r3, [r3, #0]
 8004488:	2b4f      	cmp	r3, #79	@ 0x4f
 800448a:	d14f      	bne.n	800452c <ParseBuffer+0x2f8>
// call function to update time in realtimeclock.c
      status = RECEIVE_STATUS_OK;
 800448c:	2360      	movs	r3, #96	@ 0x60
 800448e:	33ff      	adds	r3, #255	@ 0xff
 8004490:	18fb      	adds	r3, r7, r3
 8004492:	2200      	movs	r2, #0
 8004494:	701a      	strb	r2, [r3, #0]
      if ( ATCommand == AT_CIPSNTPTIME ) {
 8004496:	4b22      	ldr	r3, [pc, #136]	@ (8004520 <ParseBuffer+0x2ec>)
 8004498:	781b      	ldrb	r3, [r3, #0]
 800449a:	2b12      	cmp	r3, #18
 800449c:	d146      	bne.n	800452c <ParseBuffer+0x2f8>
        if ((len == 43) && (tempBuf[33] == '2' )) {  // validity check
 800449e:	4b0d      	ldr	r3, [pc, #52]	@ (80044d4 <ParseBuffer+0x2a0>)
 80044a0:	185b      	adds	r3, r3, r1
 80044a2:	19db      	adds	r3, r3, r7
 80044a4:	881b      	ldrh	r3, [r3, #0]
 80044a6:	2b2b      	cmp	r3, #43	@ 0x2b
 80044a8:	d10b      	bne.n	80044c2 <ParseBuffer+0x28e>
 80044aa:	4b0c      	ldr	r3, [pc, #48]	@ (80044dc <ParseBuffer+0x2a8>)
 80044ac:	185b      	adds	r3, r3, r1
 80044ae:	19db      	adds	r3, r3, r7
 80044b0:	2221      	movs	r2, #33	@ 0x21
 80044b2:	5c9b      	ldrb	r3, [r3, r2]
 80044b4:	2b32      	cmp	r3, #50	@ 0x32
 80044b6:	d104      	bne.n	80044c2 <ParseBuffer+0x28e>
          ParseTime(tempBuf);
 80044b8:	193b      	adds	r3, r7, r4
 80044ba:	0018      	movs	r0, r3
 80044bc:	f002 f8d8 	bl	8006670 <ParseTime>
 80044c0:	e034      	b.n	800452c <ParseBuffer+0x2f8>
        }
        else {
          Error("Error getting time");
 80044c2:	4a18      	ldr	r2, [pc, #96]	@ (8004524 <ParseBuffer+0x2f0>)
 80044c4:	4b18      	ldr	r3, [pc, #96]	@ (8004528 <ParseBuffer+0x2f4>)
 80044c6:	0019      	movs	r1, r3
 80044c8:	2001      	movs	r0, #1
 80044ca:	f009 fb77 	bl	800dbbc <CreateLine>
          return RECEIVE_STATUS_TIMEOUT;
 80044ce:	2306      	movs	r3, #6
 80044d0:	e097      	b.n	8004602 <ParseBuffer+0x3ce>
 80044d2:	46c0      	nop			@ (mov r8, r8)
 80044d4:	fffffea2 	.word	0xfffffea2
 80044d8:	fffffea1 	.word	0xfffffea1
 80044dc:	fffffee8 	.word	0xfffffee8
 80044e0:	08022dbc 	.word	0x08022dbc
 80044e4:	08022850 	.word	0x08022850
 80044e8:	fffffee4 	.word	0xfffffee4
 80044ec:	08022de8 	.word	0x08022de8
 80044f0:	fffffedc 	.word	0xfffffedc
 80044f4:	08022dec 	.word	0x08022dec
 80044f8:	fffffed4 	.word	0xfffffed4
 80044fc:	08022df4 	.word	0x08022df4
 8004500:	fffffecc 	.word	0xfffffecc
 8004504:	08022dfc 	.word	0x08022dfc
 8004508:	fffffec8 	.word	0xfffffec8
 800450c:	fffffeb8 	.word	0xfffffeb8
 8004510:	08022e04 	.word	0x08022e04
 8004514:	fffffea8 	.word	0xfffffea8
 8004518:	08022e14 	.word	0x08022e14
 800451c:	080246c8 	.word	0x080246c8
 8004520:	20000a2a 	.word	0x20000a2a
 8004524:	08022dd4 	.word	0x08022dd4
 8004528:	08022874 	.word	0x08022874
        }
      }
    }
    if(ParsePoint != 0 && *ParsePoint == 'r') {
 800452c:	22ac      	movs	r2, #172	@ 0xac
 800452e:	0052      	lsls	r2, r2, #1
 8004530:	18bb      	adds	r3, r7, r2
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	2b00      	cmp	r3, #0
 8004536:	d009      	beq.n	800454c <ParseBuffer+0x318>
 8004538:	18bb      	adds	r3, r7, r2
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	781b      	ldrb	r3, [r3, #0]
 800453e:	2b72      	cmp	r3, #114	@ 0x72
 8004540:	d104      	bne.n	800454c <ParseBuffer+0x318>
      status = RECEIVE_STATUS_READY;
 8004542:	2360      	movs	r3, #96	@ 0x60
 8004544:	33ff      	adds	r3, #255	@ 0xff
 8004546:	18fb      	adds	r3, r7, r3
 8004548:	2202      	movs	r2, #2
 800454a:	701a      	strb	r2, [r3, #0]
    }
    if(ParsePoint != 0 && *ParsePoint == '>') {
 800454c:	22ac      	movs	r2, #172	@ 0xac
 800454e:	0052      	lsls	r2, r2, #1
 8004550:	18bb      	adds	r3, r7, r2
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	2b00      	cmp	r3, #0
 8004556:	d009      	beq.n	800456c <ParseBuffer+0x338>
 8004558:	18bb      	adds	r3, r7, r2
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	781b      	ldrb	r3, [r3, #0]
 800455e:	2b3e      	cmp	r3, #62	@ 0x3e
 8004560:	d104      	bne.n	800456c <ParseBuffer+0x338>
      status = RECEIVE_STATUS_START;
 8004562:	2360      	movs	r3, #96	@ 0x60
 8004564:	33ff      	adds	r3, #255	@ 0xff
 8004566:	18fb      	adds	r3, r7, r3
 8004568:	2205      	movs	r2, #5
 800456a:	701a      	strb	r2, [r3, #0]
    }
    if(ParsePoint != 0 && *ParsePoint == '+') {
 800456c:	22ac      	movs	r2, #172	@ 0xac
 800456e:	0052      	lsls	r2, r2, #1
 8004570:	18bb      	adds	r3, r7, r2
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	2b00      	cmp	r3, #0
 8004576:	d009      	beq.n	800458c <ParseBuffer+0x358>
 8004578:	18bb      	adds	r3, r7, r2
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	781b      	ldrb	r3, [r3, #0]
 800457e:	2b2b      	cmp	r3, #43	@ 0x2b
 8004580:	d104      	bne.n	800458c <ParseBuffer+0x358>
      status = RECEIVE_STATUS_TIME;
 8004582:	2360      	movs	r3, #96	@ 0x60
 8004584:	33ff      	adds	r3, #255	@ 0xff
 8004586:	18fb      	adds	r3, r7, r3
 8004588:	220b      	movs	r2, #11
 800458a:	701a      	strb	r2, [r3, #0]
    }
    if((ParsePoint2 != 0 && *ParsePoint2 == 'E') || (ParsePoint5 != 0 && *ParsePoint5 == 'F')) {
 800458c:	22aa      	movs	r2, #170	@ 0xaa
 800458e:	0052      	lsls	r2, r2, #1
 8004590:	18bb      	adds	r3, r7, r2
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	2b00      	cmp	r3, #0
 8004596:	d004      	beq.n	80045a2 <ParseBuffer+0x36e>
 8004598:	18bb      	adds	r3, r7, r2
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	781b      	ldrb	r3, [r3, #0]
 800459e:	2b45      	cmp	r3, #69	@ 0x45
 80045a0:	d00a      	beq.n	80045b8 <ParseBuffer+0x384>
 80045a2:	22a4      	movs	r2, #164	@ 0xa4
 80045a4:	0052      	lsls	r2, r2, #1
 80045a6:	18bb      	adds	r3, r7, r2
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d009      	beq.n	80045c2 <ParseBuffer+0x38e>
 80045ae:	18bb      	adds	r3, r7, r2
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	781b      	ldrb	r3, [r3, #0]
 80045b4:	2b46      	cmp	r3, #70	@ 0x46
 80045b6:	d104      	bne.n	80045c2 <ParseBuffer+0x38e>
      status = RECEIVE_STATUS_ERROR;
 80045b8:	2360      	movs	r3, #96	@ 0x60
 80045ba:	33ff      	adds	r3, #255	@ 0xff
 80045bc:	18fb      	adds	r3, r7, r3
 80045be:	2201      	movs	r2, #1
 80045c0:	701a      	strb	r2, [r3, #0]
    }
    if(ParsePoint3 != 0 && *ParsePoint3 == 'W'){
 80045c2:	22a8      	movs	r2, #168	@ 0xa8
 80045c4:	0052      	lsls	r2, r2, #1
 80045c6:	18bb      	adds	r3, r7, r2
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d007      	beq.n	80045de <ParseBuffer+0x3aa>
 80045ce:	18bb      	adds	r3, r7, r2
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	781b      	ldrb	r3, [r3, #0]
 80045d4:	2b57      	cmp	r3, #87	@ 0x57
 80045d6:	d102      	bne.n	80045de <ParseBuffer+0x3aa>
      ConnectionMade = true;
 80045d8:	4b0c      	ldr	r3, [pc, #48]	@ (800460c <ParseBuffer+0x3d8>)
 80045da:	2201      	movs	r2, #1
 80045dc:	701a      	strb	r2, [r3, #0]
    }
    if(ParsePoint4 != 0 && *ParsePoint4 == '2'){
 80045de:	22a6      	movs	r2, #166	@ 0xa6
 80045e0:	0052      	lsls	r2, r2, #1
 80045e2:	18bb      	adds	r3, r7, r2
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d007      	beq.n	80045fa <ParseBuffer+0x3c6>
 80045ea:	18bb      	adds	r3, r7, r2
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	781b      	ldrb	r3, [r3, #0]
 80045f0:	2b32      	cmp	r3, #50	@ 0x32
 80045f2:	d102      	bne.n	80045fa <ParseBuffer+0x3c6>
      beurs = true;
 80045f4:	4b06      	ldr	r3, [pc, #24]	@ (8004610 <ParseBuffer+0x3dc>)
 80045f6:	2201      	movs	r2, #1
 80045f8:	701a      	strb	r2, [r3, #0]
    }
  }
  return(status);
 80045fa:	2360      	movs	r3, #96	@ 0x60
 80045fc:	33ff      	adds	r3, #255	@ 0xff
 80045fe:	18fb      	adds	r3, r7, r3
 8004600:	781b      	ldrb	r3, [r3, #0]

}
 8004602:	0018      	movs	r0, r3
 8004604:	46bd      	mov	sp, r7
 8004606:	b059      	add	sp, #356	@ 0x164
 8004608:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800460a:	46c0      	nop			@ (mov r8, r8)
 800460c:	20000550 	.word	0x20000550
 8004610:	20000552 	.word	0x20000552

08004614 <PollAwake>:
 //PollAwake, RFPOWER and CheckRFPower necesarry when comming out of sleep mode.
bool PollAwake(){
 8004614:	b580      	push	{r7, lr}
 8004616:	b082      	sub	sp, #8
 8004618:	af00      	add	r7, sp, #0
  char* atCommand = "ATE0\r\n";
 800461a:	4b0b      	ldr	r3, [pc, #44]	@ (8004648 <PollAwake+0x34>)
 800461c:	607b      	str	r3, [r7, #4]
  //SetCommandBuffer(atCommand);
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	0018      	movs	r0, r3
 8004622:	f7fb fda3 	bl	800016c <strlen>
 8004626:	0003      	movs	r3, r0
 8004628:	b29a      	uxth	r2, r3
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	0011      	movs	r1, r2
 800462e:	0018      	movs	r0, r3
 8004630:	f7ff fa18 	bl	8003a64 <ESP_Send>
 8004634:	1e03      	subs	r3, r0, #0
 8004636:	d001      	beq.n	800463c <PollAwake+0x28>
    return true;
 8004638:	2301      	movs	r3, #1
 800463a:	e000      	b.n	800463e <PollAwake+0x2a>
  }
  else{
    return false;
 800463c:	2300      	movs	r3, #0
  }
}
 800463e:	0018      	movs	r0, r3
 8004640:	46bd      	mov	sp, r7
 8004642:	b002      	add	sp, #8
 8004644:	bd80      	pop	{r7, pc}
 8004646:	46c0      	nop			@ (mov r8, r8)
 8004648:	08022e24 	.word	0x08022e24

0800464c <RFPower>:
bool RFPower(){
 800464c:	b580      	push	{r7, lr}
 800464e:	b082      	sub	sp, #8
 8004650:	af00      	add	r7, sp, #0
  char* atCommand = "AT+RFPOWER=70\r\n";
 8004652:	4b0b      	ldr	r3, [pc, #44]	@ (8004680 <RFPower+0x34>)
 8004654:	607b      	str	r3, [r7, #4]
  //SetCommandBuffer(atCommand);
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	0018      	movs	r0, r3
 800465a:	f7fb fd87 	bl	800016c <strlen>
 800465e:	0003      	movs	r3, r0
 8004660:	b29a      	uxth	r2, r3
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	0011      	movs	r1, r2
 8004666:	0018      	movs	r0, r3
 8004668:	f7ff f9fc 	bl	8003a64 <ESP_Send>
 800466c:	1e03      	subs	r3, r0, #0
 800466e:	d001      	beq.n	8004674 <RFPower+0x28>
    return true;
 8004670:	2301      	movs	r3, #1
 8004672:	e000      	b.n	8004676 <RFPower+0x2a>
  }
  else{
    return false;
 8004674:	2300      	movs	r3, #0
  }
}
 8004676:	0018      	movs	r0, r3
 8004678:	46bd      	mov	sp, r7
 800467a:	b002      	add	sp, #8
 800467c:	bd80      	pop	{r7, pc}
 800467e:	46c0      	nop			@ (mov r8, r8)
 8004680:	08022e2c 	.word	0x08022e2c

08004684 <CheckRFPower>:
bool CheckRFPower(){
 8004684:	b580      	push	{r7, lr}
 8004686:	b082      	sub	sp, #8
 8004688:	af00      	add	r7, sp, #0
  char* atCommand = "AT+RFPOWER?\r\n";
 800468a:	4b0b      	ldr	r3, [pc, #44]	@ (80046b8 <CheckRFPower+0x34>)
 800468c:	607b      	str	r3, [r7, #4]
  //SetCommandBuffer(atCommand);
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	0018      	movs	r0, r3
 8004692:	f7fb fd6b 	bl	800016c <strlen>
 8004696:	0003      	movs	r3, r0
 8004698:	b29a      	uxth	r2, r3
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	0011      	movs	r1, r2
 800469e:	0018      	movs	r0, r3
 80046a0:	f7ff f9e0 	bl	8003a64 <ESP_Send>
 80046a4:	1e03      	subs	r3, r0, #0
 80046a6:	d001      	beq.n	80046ac <CheckRFPower+0x28>
    return true;
 80046a8:	2301      	movs	r3, #1
 80046aa:	e000      	b.n	80046ae <CheckRFPower+0x2a>
  }
  else{
    return false;
 80046ac:	2300      	movs	r3, #0
  }
}
 80046ae:	0018      	movs	r0, r3
 80046b0:	46bd      	mov	sp, r7
 80046b2:	b002      	add	sp, #8
 80046b4:	bd80      	pop	{r7, pc}
 80046b6:	46c0      	nop			@ (mov r8, r8)
 80046b8:	08022e3c 	.word	0x08022e3c

080046bc <ATRestore>:
//Only necesarry on first init
bool ATRestore(){
 80046bc:	b580      	push	{r7, lr}
 80046be:	b082      	sub	sp, #8
 80046c0:	af00      	add	r7, sp, #0
  char* atCommand = "AT+RESTORE\r\n";
 80046c2:	4b0b      	ldr	r3, [pc, #44]	@ (80046f0 <ATRestore+0x34>)
 80046c4:	607b      	str	r3, [r7, #4]
  //SetCommandBuffer(atCommand);
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	0018      	movs	r0, r3
 80046ca:	f7fb fd4f 	bl	800016c <strlen>
 80046ce:	0003      	movs	r3, r0
 80046d0:	b29a      	uxth	r2, r3
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	0011      	movs	r1, r2
 80046d6:	0018      	movs	r0, r3
 80046d8:	f7ff f9c4 	bl	8003a64 <ESP_Send>
 80046dc:	1e03      	subs	r3, r0, #0
 80046de:	d001      	beq.n	80046e4 <ATRestore+0x28>
    return true;
 80046e0:	2301      	movs	r3, #1
 80046e2:	e000      	b.n	80046e6 <ATRestore+0x2a>
  }
  else{
    return false;
 80046e4:	2300      	movs	r3, #0
  }
}
 80046e6:	0018      	movs	r0, r3
 80046e8:	46bd      	mov	sp, r7
 80046ea:	b002      	add	sp, #8
 80046ec:	bd80      	pop	{r7, pc}
 80046ee:	46c0      	nop			@ (mov r8, r8)
 80046f0:	08022e4c 	.word	0x08022e4c

080046f4 <CWINIT>:
bool CWINIT(){
 80046f4:	b580      	push	{r7, lr}
 80046f6:	b082      	sub	sp, #8
 80046f8:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWINIT=1\r\n";
 80046fa:	4b0b      	ldr	r3, [pc, #44]	@ (8004728 <CWINIT+0x34>)
 80046fc:	607b      	str	r3, [r7, #4]
  //SetCommandBuffer(atCommand);
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	0018      	movs	r0, r3
 8004702:	f7fb fd33 	bl	800016c <strlen>
 8004706:	0003      	movs	r3, r0
 8004708:	b29a      	uxth	r2, r3
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	0011      	movs	r1, r2
 800470e:	0018      	movs	r0, r3
 8004710:	f7ff f9a8 	bl	8003a64 <ESP_Send>
 8004714:	1e03      	subs	r3, r0, #0
 8004716:	d001      	beq.n	800471c <CWINIT+0x28>
    return true;
 8004718:	2301      	movs	r3, #1
 800471a:	e000      	b.n	800471e <CWINIT+0x2a>
  }
  else{
    return false;
 800471c:	2300      	movs	r3, #0
  }
}
 800471e:	0018      	movs	r0, r3
 8004720:	46bd      	mov	sp, r7
 8004722:	b002      	add	sp, #8
 8004724:	bd80      	pop	{r7, pc}
 8004726:	46c0      	nop			@ (mov r8, r8)
 8004728:	08022e5c 	.word	0x08022e5c

0800472c <CWMODE1>:
bool CWMODE1(){
 800472c:	b580      	push	{r7, lr}
 800472e:	b082      	sub	sp, #8
 8004730:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWMODE=1\r\n";
 8004732:	4b0b      	ldr	r3, [pc, #44]	@ (8004760 <CWMODE1+0x34>)
 8004734:	607b      	str	r3, [r7, #4]
  //SetCommandBuffer(atCommand);
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	0018      	movs	r0, r3
 800473a:	f7fb fd17 	bl	800016c <strlen>
 800473e:	0003      	movs	r3, r0
 8004740:	b29a      	uxth	r2, r3
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	0011      	movs	r1, r2
 8004746:	0018      	movs	r0, r3
 8004748:	f7ff f98c 	bl	8003a64 <ESP_Send>
 800474c:	1e03      	subs	r3, r0, #0
 800474e:	d001      	beq.n	8004754 <CWMODE1+0x28>
    return true;
 8004750:	2301      	movs	r3, #1
 8004752:	e000      	b.n	8004756 <CWMODE1+0x2a>
  }
  else{
    return false;
 8004754:	2300      	movs	r3, #0
  }
}
 8004756:	0018      	movs	r0, r3
 8004758:	46bd      	mov	sp, r7
 800475a:	b002      	add	sp, #8
 800475c:	bd80      	pop	{r7, pc}
 800475e:	46c0      	nop			@ (mov r8, r8)
 8004760:	08022e6c 	.word	0x08022e6c

08004764 <CWMODE2>:
bool CWMODE2(){
 8004764:	b580      	push	{r7, lr}
 8004766:	b082      	sub	sp, #8
 8004768:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWMODE=2\r\n";
 800476a:	4b0b      	ldr	r3, [pc, #44]	@ (8004798 <CWMODE2+0x34>)
 800476c:	607b      	str	r3, [r7, #4]
  //SetCommandBuffer(atCommand);
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	0018      	movs	r0, r3
 8004772:	f7fb fcfb 	bl	800016c <strlen>
 8004776:	0003      	movs	r3, r0
 8004778:	b29a      	uxth	r2, r3
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	0011      	movs	r1, r2
 800477e:	0018      	movs	r0, r3
 8004780:	f7ff f970 	bl	8003a64 <ESP_Send>
 8004784:	1e03      	subs	r3, r0, #0
 8004786:	d001      	beq.n	800478c <CWMODE2+0x28>
    return true;
 8004788:	2301      	movs	r3, #1
 800478a:	e000      	b.n	800478e <CWMODE2+0x2a>
  }
  else{
    return false;
 800478c:	2300      	movs	r3, #0
  }
}
 800478e:	0018      	movs	r0, r3
 8004790:	46bd      	mov	sp, r7
 8004792:	b002      	add	sp, #8
 8004794:	bd80      	pop	{r7, pc}
 8004796:	46c0      	nop			@ (mov r8, r8)
 8004798:	08022e7c 	.word	0x08022e7c

0800479c <CWAUTOCONN>:
bool CWAUTOCONN(){
 800479c:	b580      	push	{r7, lr}
 800479e:	b082      	sub	sp, #8
 80047a0:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWAUTOCONN=1\r\n";
 80047a2:	4b0b      	ldr	r3, [pc, #44]	@ (80047d0 <CWAUTOCONN+0x34>)
 80047a4:	607b      	str	r3, [r7, #4]
  //SetCommandBuffer(atCommand);
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	0018      	movs	r0, r3
 80047aa:	f7fb fcdf 	bl	800016c <strlen>
 80047ae:	0003      	movs	r3, r0
 80047b0:	b29a      	uxth	r2, r3
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	0011      	movs	r1, r2
 80047b6:	0018      	movs	r0, r3
 80047b8:	f7ff f954 	bl	8003a64 <ESP_Send>
 80047bc:	1e03      	subs	r3, r0, #0
 80047be:	d001      	beq.n	80047c4 <CWAUTOCONN+0x28>
    return true;
 80047c0:	2301      	movs	r3, #1
 80047c2:	e000      	b.n	80047c6 <CWAUTOCONN+0x2a>
  }
  else{
    return false;
 80047c4:	2300      	movs	r3, #0
  }
}
 80047c6:	0018      	movs	r0, r3
 80047c8:	46bd      	mov	sp, r7
 80047ca:	b002      	add	sp, #8
 80047cc:	bd80      	pop	{r7, pc}
 80047ce:	46c0      	nop			@ (mov r8, r8)
 80047d0:	08022e8c 	.word	0x08022e8c

080047d4 <CWJAP>:
bool CWJAP(){
 80047d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80047d6:	46c6      	mov	lr, r8
 80047d8:	b500      	push	{lr}
 80047da:	b0a2      	sub	sp, #136	@ 0x88
 80047dc:	af00      	add	r7, sp, #0
 80047de:	466b      	mov	r3, sp
 80047e0:	4698      	mov	r8, r3
  beursTest = true;
 80047e2:	4b39      	ldr	r3, [pc, #228]	@ (80048c8 <CWJAP+0xf4>)
 80047e4:	2201      	movs	r2, #1
 80047e6:	701a      	strb	r2, [r3, #0]
  char atCommandBuff[100];
  memset(atCommandBuff, '\0', 100);
 80047e8:	2618      	movs	r6, #24
 80047ea:	19bb      	adds	r3, r7, r6
 80047ec:	2264      	movs	r2, #100	@ 0x64
 80047ee:	2100      	movs	r1, #0
 80047f0:	0018      	movs	r0, r3
 80047f2:	f01b f87b 	bl	801f8ec <memset>
  sprintf(atCommandBuff, "AT+CWJAP=\"%s\",\"%s\"\r\n", SSIDBeurs, PasswordBeurs);
 80047f6:	4b35      	ldr	r3, [pc, #212]	@ (80048cc <CWJAP+0xf8>)
 80047f8:	4a35      	ldr	r2, [pc, #212]	@ (80048d0 <CWJAP+0xfc>)
 80047fa:	4936      	ldr	r1, [pc, #216]	@ (80048d4 <CWJAP+0x100>)
 80047fc:	19b8      	adds	r0, r7, r6
 80047fe:	f01a ff31 	bl	801f664 <siprintf>
  uint8_t len = strlen(atCommandBuff);
 8004802:	19bb      	adds	r3, r7, r6
 8004804:	0018      	movs	r0, r3
 8004806:	f7fb fcb1 	bl	800016c <strlen>
 800480a:	0002      	movs	r2, r0
 800480c:	216f      	movs	r1, #111	@ 0x6f
 800480e:	0030      	movs	r0, r6
 8004810:	180b      	adds	r3, r1, r0
 8004812:	19db      	adds	r3, r3, r7
 8004814:	701a      	strb	r2, [r3, #0]
  char atCommand[len+1];
 8004816:	180b      	adds	r3, r1, r0
 8004818:	19db      	adds	r3, r3, r7
 800481a:	781b      	ldrb	r3, [r3, #0]
 800481c:	3301      	adds	r3, #1
 800481e:	1e5a      	subs	r2, r3, #1
 8004820:	2180      	movs	r1, #128	@ 0x80
 8004822:	1879      	adds	r1, r7, r1
 8004824:	600a      	str	r2, [r1, #0]
 8004826:	001a      	movs	r2, r3
 8004828:	60ba      	str	r2, [r7, #8]
 800482a:	2200      	movs	r2, #0
 800482c:	60fa      	str	r2, [r7, #12]
 800482e:	68b8      	ldr	r0, [r7, #8]
 8004830:	68f9      	ldr	r1, [r7, #12]
 8004832:	0002      	movs	r2, r0
 8004834:	0f52      	lsrs	r2, r2, #29
 8004836:	000e      	movs	r6, r1
 8004838:	00f6      	lsls	r6, r6, #3
 800483a:	617e      	str	r6, [r7, #20]
 800483c:	697e      	ldr	r6, [r7, #20]
 800483e:	4316      	orrs	r6, r2
 8004840:	617e      	str	r6, [r7, #20]
 8004842:	0002      	movs	r2, r0
 8004844:	00d2      	lsls	r2, r2, #3
 8004846:	613a      	str	r2, [r7, #16]
 8004848:	001a      	movs	r2, r3
 800484a:	603a      	str	r2, [r7, #0]
 800484c:	2200      	movs	r2, #0
 800484e:	607a      	str	r2, [r7, #4]
 8004850:	6838      	ldr	r0, [r7, #0]
 8004852:	6879      	ldr	r1, [r7, #4]
 8004854:	0002      	movs	r2, r0
 8004856:	0f52      	lsrs	r2, r2, #29
 8004858:	000e      	movs	r6, r1
 800485a:	00f5      	lsls	r5, r6, #3
 800485c:	4315      	orrs	r5, r2
 800485e:	0002      	movs	r2, r0
 8004860:	00d4      	lsls	r4, r2, #3
 8004862:	3307      	adds	r3, #7
 8004864:	08db      	lsrs	r3, r3, #3
 8004866:	00db      	lsls	r3, r3, #3
 8004868:	466a      	mov	r2, sp
 800486a:	1ad3      	subs	r3, r2, r3
 800486c:	469d      	mov	sp, r3
 800486e:	466b      	mov	r3, sp
 8004870:	3300      	adds	r3, #0
 8004872:	67fb      	str	r3, [r7, #124]	@ 0x7c
  memset(atCommand, '\0', len+1);
 8004874:	246f      	movs	r4, #111	@ 0x6f
 8004876:	2518      	movs	r5, #24
 8004878:	1963      	adds	r3, r4, r5
 800487a:	19db      	adds	r3, r3, r7
 800487c:	781b      	ldrb	r3, [r3, #0]
 800487e:	3301      	adds	r3, #1
 8004880:	001a      	movs	r2, r3
 8004882:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004884:	2100      	movs	r1, #0
 8004886:	0018      	movs	r0, r3
 8004888:	f01b f830 	bl	801f8ec <memset>
  strncpy(atCommand, atCommandBuff, len);
 800488c:	1963      	adds	r3, r4, r5
 800488e:	19db      	adds	r3, r3, r7
 8004890:	781a      	ldrb	r2, [r3, #0]
 8004892:	1979      	adds	r1, r7, r5
 8004894:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004896:	0018      	movs	r0, r3
 8004898:	f01b f84f 	bl	801f93a <strncpy>
  //SetCommandBuffer(atCommand);
  if(ESP_Send((uint8_t*)atCommand, len)) {
 800489c:	1963      	adds	r3, r4, r5
 800489e:	19db      	adds	r3, r3, r7
 80048a0:	781b      	ldrb	r3, [r3, #0]
 80048a2:	b29a      	uxth	r2, r3
 80048a4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80048a6:	0011      	movs	r1, r2
 80048a8:	0018      	movs	r0, r3
 80048aa:	f7ff f8db 	bl	8003a64 <ESP_Send>
 80048ae:	1e03      	subs	r3, r0, #0
 80048b0:	d001      	beq.n	80048b6 <CWJAP+0xe2>
    return true;
 80048b2:	2301      	movs	r3, #1
 80048b4:	e000      	b.n	80048b8 <CWJAP+0xe4>
  }
  else{
    return false;
 80048b6:	2300      	movs	r3, #0
 80048b8:	46c5      	mov	sp, r8
  }
}
 80048ba:	0018      	movs	r0, r3
 80048bc:	46bd      	mov	sp, r7
 80048be:	b022      	add	sp, #136	@ 0x88
 80048c0:	bc80      	pop	{r7}
 80048c2:	46b8      	mov	r8, r7
 80048c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80048c6:	46c0      	nop			@ (mov r8, r8)
 80048c8:	20000551 	.word	0x20000551
 80048cc:	080246d4 	.word	0x080246d4
 80048d0:	080246c8 	.word	0x080246c8
 80048d4:	08022ea0 	.word	0x08022ea0

080048d8 <CWMODE3>:
bool CWMODE3(){
 80048d8:	b580      	push	{r7, lr}
 80048da:	b082      	sub	sp, #8
 80048dc:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWMODE=3\r\n";
 80048de:	4b0b      	ldr	r3, [pc, #44]	@ (800490c <CWMODE3+0x34>)
 80048e0:	607b      	str	r3, [r7, #4]
  //SetCommandBuffer(atCommand);
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	0018      	movs	r0, r3
 80048e6:	f7fb fc41 	bl	800016c <strlen>
 80048ea:	0003      	movs	r3, r0
 80048ec:	b29a      	uxth	r2, r3
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	0011      	movs	r1, r2
 80048f2:	0018      	movs	r0, r3
 80048f4:	f7ff f8b6 	bl	8003a64 <ESP_Send>
 80048f8:	1e03      	subs	r3, r0, #0
 80048fa:	d001      	beq.n	8004900 <CWMODE3+0x28>
    return true;
 80048fc:	2301      	movs	r3, #1
 80048fe:	e000      	b.n	8004902 <CWMODE3+0x2a>
  }
  else{
    return false;
 8004900:	2300      	movs	r3, #0
  }
}
 8004902:	0018      	movs	r0, r3
 8004904:	46bd      	mov	sp, r7
 8004906:	b002      	add	sp, #8
 8004908:	bd80      	pop	{r7, pc}
 800490a:	46c0      	nop			@ (mov r8, r8)
 800490c:	08022eb8 	.word	0x08022eb8

08004910 <CWSTATE>:
bool CWSTATE(){
 8004910:	b580      	push	{r7, lr}
 8004912:	b082      	sub	sp, #8
 8004914:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWSTATE?\r\n";
 8004916:	4b0b      	ldr	r3, [pc, #44]	@ (8004944 <CWSTATE+0x34>)
 8004918:	607b      	str	r3, [r7, #4]
  //SetCommandBuffer(atCommand);
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	0018      	movs	r0, r3
 800491e:	f7fb fc25 	bl	800016c <strlen>
 8004922:	0003      	movs	r3, r0
 8004924:	b29a      	uxth	r2, r3
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	0011      	movs	r1, r2
 800492a:	0018      	movs	r0, r3
 800492c:	f7ff f89a 	bl	8003a64 <ESP_Send>
 8004930:	1e03      	subs	r3, r0, #0
 8004932:	d001      	beq.n	8004938 <CWSTATE+0x28>
    return true;
 8004934:	2301      	movs	r3, #1
 8004936:	e000      	b.n	800493a <CWSTATE+0x2a>
  }
  else{
    return false;
 8004938:	2300      	movs	r3, #0
  }
}
 800493a:	0018      	movs	r0, r3
 800493c:	46bd      	mov	sp, r7
 800493e:	b002      	add	sp, #8
 8004940:	bd80      	pop	{r7, pc}
 8004942:	46c0      	nop			@ (mov r8, r8)
 8004944:	08022ec8 	.word	0x08022ec8

08004948 <CWSAP>:
bool CWSAP(){
 8004948:	b580      	push	{r7, lr}
 800494a:	b082      	sub	sp, #8
 800494c:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWSAP=\"WOTS_Config\",\"\",11,0,1\r\n";
 800494e:	4b0b      	ldr	r3, [pc, #44]	@ (800497c <CWSAP+0x34>)
 8004950:	607b      	str	r3, [r7, #4]
  //SetCommandBuffer(atCommand);
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	0018      	movs	r0, r3
 8004956:	f7fb fc09 	bl	800016c <strlen>
 800495a:	0003      	movs	r3, r0
 800495c:	b29a      	uxth	r2, r3
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	0011      	movs	r1, r2
 8004962:	0018      	movs	r0, r3
 8004964:	f7ff f87e 	bl	8003a64 <ESP_Send>
 8004968:	1e03      	subs	r3, r0, #0
 800496a:	d001      	beq.n	8004970 <CWSAP+0x28>
    return true;
 800496c:	2301      	movs	r3, #1
 800496e:	e000      	b.n	8004972 <CWSAP+0x2a>
  }
  else{
    return false;
 8004970:	2300      	movs	r3, #0
  }
}
 8004972:	0018      	movs	r0, r3
 8004974:	46bd      	mov	sp, r7
 8004976:	b002      	add	sp, #8
 8004978:	bd80      	pop	{r7, pc}
 800497a:	46c0      	nop			@ (mov r8, r8)
 800497c:	08022ed8 	.word	0x08022ed8

08004980 <CIPMUX>:
bool CIPMUX(){
 8004980:	b580      	push	{r7, lr}
 8004982:	b082      	sub	sp, #8
 8004984:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CIPMUX=0\r\n";
 8004986:	4b0b      	ldr	r3, [pc, #44]	@ (80049b4 <CIPMUX+0x34>)
 8004988:	607b      	str	r3, [r7, #4]
  //SetCommandBuffer(atCommand);
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	0018      	movs	r0, r3
 800498e:	f7fb fbed 	bl	800016c <strlen>
 8004992:	0003      	movs	r3, r0
 8004994:	b29a      	uxth	r2, r3
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	0011      	movs	r1, r2
 800499a:	0018      	movs	r0, r3
 800499c:	f7ff f862 	bl	8003a64 <ESP_Send>
 80049a0:	1e03      	subs	r3, r0, #0
 80049a2:	d001      	beq.n	80049a8 <CIPMUX+0x28>
    return true;
 80049a4:	2301      	movs	r3, #1
 80049a6:	e000      	b.n	80049aa <CIPMUX+0x2a>
  }
  else{
    return false;
 80049a8:	2300      	movs	r3, #0
  }
}
 80049aa:	0018      	movs	r0, r3
 80049ac:	46bd      	mov	sp, r7
 80049ae:	b002      	add	sp, #8
 80049b0:	bd80      	pop	{r7, pc}
 80049b2:	46c0      	nop			@ (mov r8, r8)
 80049b4:	08022efc 	.word	0x08022efc

080049b8 <WEBSERVER>:
//This command sets the webserver, only necessary for first initialization.
bool WEBSERVER(){
 80049b8:	b580      	push	{r7, lr}
 80049ba:	b082      	sub	sp, #8
 80049bc:	af00      	add	r7, sp, #0
  char* atCommand = "AT+WEBSERVER=1,80,60\r\n";
 80049be:	4b0b      	ldr	r3, [pc, #44]	@ (80049ec <WEBSERVER+0x34>)
 80049c0:	607b      	str	r3, [r7, #4]
  //SetCommandBuffer(atCommand);
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	0018      	movs	r0, r3
 80049c6:	f7fb fbd1 	bl	800016c <strlen>
 80049ca:	0003      	movs	r3, r0
 80049cc:	b29a      	uxth	r2, r3
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	0011      	movs	r1, r2
 80049d2:	0018      	movs	r0, r3
 80049d4:	f7ff f846 	bl	8003a64 <ESP_Send>
 80049d8:	1e03      	subs	r3, r0, #0
 80049da:	d001      	beq.n	80049e0 <WEBSERVER+0x28>
    return true;
 80049dc:	2301      	movs	r3, #1
 80049de:	e000      	b.n	80049e2 <WEBSERVER+0x2a>
  }
  else{
    return false;
 80049e0:	2300      	movs	r3, #0
  }
}
 80049e2:	0018      	movs	r0, r3
 80049e4:	46bd      	mov	sp, r7
 80049e6:	b002      	add	sp, #8
 80049e8:	bd80      	pop	{r7, pc}
 80049ea:	46c0      	nop			@ (mov r8, r8)
 80049ec:	08022f0c 	.word	0x08022f0c

080049f0 <HTTPCPOST>:
//These are the commands necesarry for sending data.
bool HTTPCPOST(){
 80049f0:	b590      	push	{r4, r7, lr}
 80049f2:	b0c5      	sub	sp, #276	@ 0x114
 80049f4:	af02      	add	r7, sp, #8
  char atCommandBuff[256];
  memset(atCommandBuff, '\0', 256);
 80049f6:	2380      	movs	r3, #128	@ 0x80
 80049f8:	005a      	lsls	r2, r3, #1
 80049fa:	1d3b      	adds	r3, r7, #4
 80049fc:	2100      	movs	r1, #0
 80049fe:	0018      	movs	r0, r3
 8004a00:	f01a ff74 	bl	801f8ec <memset>
  uint16_t length = CreateMessage(beurs);
 8004a04:	4b22      	ldr	r3, [pc, #136]	@ (8004a90 <HTTPCPOST+0xa0>)
 8004a06:	781b      	ldrb	r3, [r3, #0]
 8004a08:	1dfc      	adds	r4, r7, #7
 8004a0a:	34ff      	adds	r4, #255	@ 0xff
 8004a0c:	0018      	movs	r0, r3
 8004a0e:	f7ff f96f 	bl	8003cf0 <CreateMessage>
 8004a12:	0003      	movs	r3, r0
 8004a14:	8023      	strh	r3, [r4, #0]
  if(beurs){
 8004a16:	4b1e      	ldr	r3, [pc, #120]	@ (8004a90 <HTTPCPOST+0xa0>)
 8004a18:	781b      	ldrb	r3, [r3, #0]
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d008      	beq.n	8004a30 <HTTPCPOST+0x40>
    sprintf(atCommandBuff, "AT+HTTPCPOST=%s,%d,1,\"content-type: application/json\"\r\n", APIBeurs, length);
 8004a1e:	1dfb      	adds	r3, r7, #7
 8004a20:	33ff      	adds	r3, #255	@ 0xff
 8004a22:	881b      	ldrh	r3, [r3, #0]
 8004a24:	4a1b      	ldr	r2, [pc, #108]	@ (8004a94 <HTTPCPOST+0xa4>)
 8004a26:	491c      	ldr	r1, [pc, #112]	@ (8004a98 <HTTPCPOST+0xa8>)
 8004a28:	1d38      	adds	r0, r7, #4
 8004a2a:	f01a fe1b 	bl	801f664 <siprintf>
 8004a2e:	e016      	b.n	8004a5e <HTTPCPOST+0x6e>
  }
  else{
    static uint8_t boxConfig[IdSize];
    static char Buffer[25];
    ReadUint8ArrayEEprom(BoxConfigAddr, boxConfig, IdSize);
 8004a30:	4b1a      	ldr	r3, [pc, #104]	@ (8004a9c <HTTPCPOST+0xac>)
 8004a32:	481b      	ldr	r0, [pc, #108]	@ (8004aa0 <HTTPCPOST+0xb0>)
 8004a34:	220c      	movs	r2, #12
 8004a36:	0019      	movs	r1, r3
 8004a38:	f7fe fe5e 	bl	80036f8 <ReadUint8ArrayEEprom>
    uint8ArrayToString(Buffer, boxConfig);
 8004a3c:	4a17      	ldr	r2, [pc, #92]	@ (8004a9c <HTTPCPOST+0xac>)
 8004a3e:	4b19      	ldr	r3, [pc, #100]	@ (8004aa4 <HTTPCPOST+0xb4>)
 8004a40:	0011      	movs	r1, r2
 8004a42:	0018      	movs	r0, r3
 8004a44:	f7ff f930 	bl	8003ca8 <uint8ArrayToString>
    sprintf(atCommandBuff, "AT+HTTPCPOST=%s%s/data\",%d,1,\"content-type: application/json\"\r\n", API, Buffer, length);
 8004a48:	1dfb      	adds	r3, r7, #7
 8004a4a:	33ff      	adds	r3, #255	@ 0xff
 8004a4c:	881b      	ldrh	r3, [r3, #0]
 8004a4e:	4c15      	ldr	r4, [pc, #84]	@ (8004aa4 <HTTPCPOST+0xb4>)
 8004a50:	4a15      	ldr	r2, [pc, #84]	@ (8004aa8 <HTTPCPOST+0xb8>)
 8004a52:	4916      	ldr	r1, [pc, #88]	@ (8004aac <HTTPCPOST+0xbc>)
 8004a54:	1d38      	adds	r0, r7, #4
 8004a56:	9300      	str	r3, [sp, #0]
 8004a58:	0023      	movs	r3, r4
 8004a5a:	f01a fe03 	bl	801f664 <siprintf>
  }
  uint16_t len = strlen(atCommandBuff);
 8004a5e:	1d3b      	adds	r3, r7, #4
 8004a60:	0018      	movs	r0, r3
 8004a62:	f7fb fb83 	bl	800016c <strlen>
 8004a66:	0002      	movs	r2, r0
 8004a68:	1d7b      	adds	r3, r7, #5
 8004a6a:	33ff      	adds	r3, #255	@ 0xff
 8004a6c:	801a      	strh	r2, [r3, #0]
  if(ESP_Send((uint8_t*)atCommandBuff, len)){
 8004a6e:	1d7b      	adds	r3, r7, #5
 8004a70:	33ff      	adds	r3, #255	@ 0xff
 8004a72:	881a      	ldrh	r2, [r3, #0]
 8004a74:	1d3b      	adds	r3, r7, #4
 8004a76:	0011      	movs	r1, r2
 8004a78:	0018      	movs	r0, r3
 8004a7a:	f7fe fff3 	bl	8003a64 <ESP_Send>
 8004a7e:	1e03      	subs	r3, r0, #0
 8004a80:	d001      	beq.n	8004a86 <HTTPCPOST+0x96>
    return true;
 8004a82:	2301      	movs	r3, #1
 8004a84:	e000      	b.n	8004a88 <HTTPCPOST+0x98>
  }
  else{
    return false;
 8004a86:	2300      	movs	r3, #0
  }
}
 8004a88:	0018      	movs	r0, r3
 8004a8a:	46bd      	mov	sp, r7
 8004a8c:	b043      	add	sp, #268	@ 0x10c
 8004a8e:	bd90      	pop	{r4, r7, pc}
 8004a90:	20000552 	.word	0x20000552
 8004a94:	080246f0 	.word	0x080246f0
 8004a98:	08022f24 	.word	0x08022f24
 8004a9c:	20000b14 	.word	0x20000b14
 8004aa0:	08080000 	.word	0x08080000
 8004aa4:	20000b20 	.word	0x20000b20
 8004aa8:	0802472c 	.word	0x0802472c
 8004aac:	08022f5c 	.word	0x08022f5c

08004ab0 <SENDDATA>:
bool SENDDATA(){
 8004ab0:	b580      	push	{r7, lr}
 8004ab2:	b082      	sub	sp, #8
 8004ab4:	af00      	add	r7, sp, #0
  uint16_t len = strlen(message);
 8004ab6:	4b0b      	ldr	r3, [pc, #44]	@ (8004ae4 <SENDDATA+0x34>)
 8004ab8:	0018      	movs	r0, r3
 8004aba:	f7fb fb57 	bl	800016c <strlen>
 8004abe:	0002      	movs	r2, r0
 8004ac0:	1dbb      	adds	r3, r7, #6
 8004ac2:	801a      	strh	r2, [r3, #0]
  if(ESP_Send((uint8_t*)message, len)) {
 8004ac4:	1dbb      	adds	r3, r7, #6
 8004ac6:	881a      	ldrh	r2, [r3, #0]
 8004ac8:	4b06      	ldr	r3, [pc, #24]	@ (8004ae4 <SENDDATA+0x34>)
 8004aca:	0011      	movs	r1, r2
 8004acc:	0018      	movs	r0, r3
 8004ace:	f7fe ffc9 	bl	8003a64 <ESP_Send>
 8004ad2:	1e03      	subs	r3, r0, #0
 8004ad4:	d001      	beq.n	8004ada <SENDDATA+0x2a>
    return true;
 8004ad6:	2301      	movs	r3, #1
 8004ad8:	e000      	b.n	8004adc <SENDDATA+0x2c>
  }
  else{
    return false;
 8004ada:	2300      	movs	r3, #0
  }
}
 8004adc:	0018      	movs	r0, r3
 8004ade:	46bd      	mov	sp, r7
 8004ae0:	b002      	add	sp, #8
 8004ae2:	bd80      	pop	{r7, pc}
 8004ae4:	2000058c 	.word	0x2000058c

08004ae8 <SLEEP>:
bool SLEEP(){
 8004ae8:	b580      	push	{r7, lr}
 8004aea:	b082      	sub	sp, #8
 8004aec:	af00      	add	r7, sp, #0
  char* atCommand = "AT+GSLP=30000\r\n";
 8004aee:	4b0b      	ldr	r3, [pc, #44]	@ (8004b1c <SLEEP+0x34>)
 8004af0:	607b      	str	r3, [r7, #4]
  //SetCommandBuffer(atCommand);
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	0018      	movs	r0, r3
 8004af6:	f7fb fb39 	bl	800016c <strlen>
 8004afa:	0003      	movs	r3, r0
 8004afc:	b29a      	uxth	r2, r3
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	0011      	movs	r1, r2
 8004b02:	0018      	movs	r0, r3
 8004b04:	f7fe ffae 	bl	8003a64 <ESP_Send>
 8004b08:	1e03      	subs	r3, r0, #0
 8004b0a:	d001      	beq.n	8004b10 <SLEEP+0x28>
    return true;
 8004b0c:	2301      	movs	r3, #1
 8004b0e:	e000      	b.n	8004b12 <SLEEP+0x2a>
  }
  else{
    return false;
 8004b10:	2300      	movs	r3, #0
  }
}
 8004b12:	0018      	movs	r0, r3
 8004b14:	46bd      	mov	sp, r7
 8004b16:	b002      	add	sp, #8
 8004b18:	bd80      	pop	{r7, pc}
 8004b1a:	46c0      	nop			@ (mov r8, r8)
 8004b1c:	08022f9c 	.word	0x08022f9c

08004b20 <CIPSNTPCFG>:
bool CIPSNTPCFG(){
 8004b20:	b580      	push	{r7, lr}
 8004b22:	b082      	sub	sp, #8
 8004b24:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CIPSNTPCFG=1,100,\"nl.pool.ntp.org\",\"time.google.com\",\"time.windows.com\"\r\n";
 8004b26:	4b0d      	ldr	r3, [pc, #52]	@ (8004b5c <CIPSNTPCFG+0x3c>)
 8004b28:	607b      	str	r3, [r7, #4]
  //SetCommandBuffer(atCommand);
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	0018      	movs	r0, r3
 8004b2e:	f7fb fb1d 	bl	800016c <strlen>
 8004b32:	0003      	movs	r3, r0
 8004b34:	b29a      	uxth	r2, r3
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	0011      	movs	r1, r2
 8004b3a:	0018      	movs	r0, r3
 8004b3c:	f7fe ff92 	bl	8003a64 <ESP_Send>
 8004b40:	1e03      	subs	r3, r0, #0
 8004b42:	d006      	beq.n	8004b52 <CIPSNTPCFG+0x32>
    HAL_Delay(1000);
 8004b44:	23fa      	movs	r3, #250	@ 0xfa
 8004b46:	009b      	lsls	r3, r3, #2
 8004b48:	0018      	movs	r0, r3
 8004b4a:	f009 fc97 	bl	800e47c <HAL_Delay>
    return true;
 8004b4e:	2301      	movs	r3, #1
 8004b50:	e000      	b.n	8004b54 <CIPSNTPCFG+0x34>
  }
  else{
    return false;
 8004b52:	2300      	movs	r3, #0
  }
}
 8004b54:	0018      	movs	r0, r3
 8004b56:	46bd      	mov	sp, r7
 8004b58:	b002      	add	sp, #8
 8004b5a:	bd80      	pop	{r7, pc}
 8004b5c:	08022fac 	.word	0x08022fac

08004b60 <CIPSNTPTIME>:
bool CIPSNTPTIME(){
 8004b60:	b580      	push	{r7, lr}
 8004b62:	b082      	sub	sp, #8
 8004b64:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CIPSNTPTIME?\r\n";
 8004b66:	4b0b      	ldr	r3, [pc, #44]	@ (8004b94 <CIPSNTPTIME+0x34>)
 8004b68:	607b      	str	r3, [r7, #4]
  //SetCommandBuffer(atCommand);
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	0018      	movs	r0, r3
 8004b6e:	f7fb fafd 	bl	800016c <strlen>
 8004b72:	0003      	movs	r3, r0
 8004b74:	b29a      	uxth	r2, r3
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	0011      	movs	r1, r2
 8004b7a:	0018      	movs	r0, r3
 8004b7c:	f7fe ff72 	bl	8003a64 <ESP_Send>
 8004b80:	1e03      	subs	r3, r0, #0
 8004b82:	d001      	beq.n	8004b88 <CIPSNTPTIME+0x28>
    return true;
 8004b84:	2301      	movs	r3, #1
 8004b86:	e000      	b.n	8004b8a <CIPSNTPTIME+0x2a>
  }
  else{
    return false;
 8004b88:	2300      	movs	r3, #0
  }
}
 8004b8a:	0018      	movs	r0, r3
 8004b8c:	46bd      	mov	sp, r7
 8004b8e:	b002      	add	sp, #8
 8004b90:	bd80      	pop	{r7, pc}
 8004b92:	46c0      	nop			@ (mov r8, r8)
 8004b94:	08022ffc 	.word	0x08022ffc

08004b98 <CIPSNTPINTV>:
bool CIPSNTPINTV(){
 8004b98:	b580      	push	{r7, lr}
 8004b9a:	b082      	sub	sp, #8
 8004b9c:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CIPSNTPINTV=14400\r\n";
 8004b9e:	4b0b      	ldr	r3, [pc, #44]	@ (8004bcc <CIPSNTPINTV+0x34>)
 8004ba0:	607b      	str	r3, [r7, #4]
  //SetCommandBuffer(atCommand);
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	0018      	movs	r0, r3
 8004ba6:	f7fb fae1 	bl	800016c <strlen>
 8004baa:	0003      	movs	r3, r0
 8004bac:	b29a      	uxth	r2, r3
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	0011      	movs	r1, r2
 8004bb2:	0018      	movs	r0, r3
 8004bb4:	f7fe ff56 	bl	8003a64 <ESP_Send>
 8004bb8:	1e03      	subs	r3, r0, #0
 8004bba:	d001      	beq.n	8004bc0 <CIPSNTPINTV+0x28>
    return true;
 8004bbc:	2301      	movs	r3, #1
 8004bbe:	e000      	b.n	8004bc2 <CIPSNTPINTV+0x2a>
  }
  else{
    return false;
 8004bc0:	2300      	movs	r3, #0
  }
}
 8004bc2:	0018      	movs	r0, r3
 8004bc4:	46bd      	mov	sp, r7
 8004bc6:	b002      	add	sp, #8
 8004bc8:	bd80      	pop	{r7, pc}
 8004bca:	46c0      	nop			@ (mov r8, r8)
 8004bcc:	08023010 	.word	0x08023010

08004bd0 <DMA_ProcessBuffer>:

Receive_Status DMA_ProcessBuffer(uint8_t expectation) {
 8004bd0:	b5b0      	push	{r4, r5, r7, lr}
 8004bd2:	b084      	sub	sp, #16
 8004bd4:	af00      	add	r7, sp, #0
 8004bd6:	0002      	movs	r2, r0
 8004bd8:	1dfb      	adds	r3, r7, #7
 8004bda:	701a      	strb	r2, [r3, #0]
    uint16_t pos = ESP_MAX_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(&hdma_usart4_rx);
 8004bdc:	4b6c      	ldr	r3, [pc, #432]	@ (8004d90 <DMA_ProcessBuffer+0x1c0>)
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	685b      	ldr	r3, [r3, #4]
 8004be2:	b29a      	uxth	r2, r3
 8004be4:	200e      	movs	r0, #14
 8004be6:	183b      	adds	r3, r7, r0
 8004be8:	2180      	movs	r1, #128	@ 0x80
 8004bea:	0049      	lsls	r1, r1, #1
 8004bec:	1a8a      	subs	r2, r1, r2
 8004bee:	801a      	strh	r2, [r3, #0]
    static volatile uint8_t OldPos = 0;
    static volatile uint8_t TempPos = 0;
    Receive_Status status = RECEIVE_STATUS_INCOMPLETE;
 8004bf0:	230d      	movs	r3, #13
 8004bf2:	18fb      	adds	r3, r7, r3
 8004bf4:	2203      	movs	r2, #3
 8004bf6:	701a      	strb	r2, [r3, #0]
    if(pos > ESP_MAX_BUFFER_SIZE) {
 8004bf8:	183b      	adds	r3, r7, r0
 8004bfa:	881a      	ldrh	r2, [r3, #0]
 8004bfc:	2380      	movs	r3, #128	@ 0x80
 8004bfe:	005b      	lsls	r3, r3, #1
 8004c00:	429a      	cmp	r2, r3
 8004c02:	d903      	bls.n	8004c0c <DMA_ProcessBuffer+0x3c>
      pos = ESP_MAX_BUFFER_SIZE;
 8004c04:	183b      	adds	r3, r7, r0
 8004c06:	2280      	movs	r2, #128	@ 0x80
 8004c08:	0052      	lsls	r2, r2, #1
 8004c0a:	801a      	strh	r2, [r3, #0]
    }
    if(pos == OldPos){
 8004c0c:	4b61      	ldr	r3, [pc, #388]	@ (8004d94 <DMA_ProcessBuffer+0x1c4>)
 8004c0e:	781b      	ldrb	r3, [r3, #0]
 8004c10:	b2db      	uxtb	r3, r3
 8004c12:	001a      	movs	r2, r3
 8004c14:	230e      	movs	r3, #14
 8004c16:	18fb      	adds	r3, r7, r3
 8004c18:	881b      	ldrh	r3, [r3, #0]
 8004c1a:	4293      	cmp	r3, r2
 8004c1c:	d131      	bne.n	8004c82 <DMA_ProcessBuffer+0xb2>
      if(retry > ESP_WIFI_WAIT_RESPONSE_TIME_FACTOR){
 8004c1e:	4b5e      	ldr	r3, [pc, #376]	@ (8004d98 <DMA_ProcessBuffer+0x1c8>)
 8004c20:	781b      	ldrb	r3, [r3, #0]
 8004c22:	2b14      	cmp	r3, #20
 8004c24:	d91b      	bls.n	8004c5e <DMA_ProcessBuffer+0x8e>
        retry = 0;
 8004c26:	4b5c      	ldr	r3, [pc, #368]	@ (8004d98 <DMA_ProcessBuffer+0x1c8>)
 8004c28:	2200      	movs	r2, #0
 8004c2a:	701a      	strb	r2, [r3, #0]
        //EspState = ESP_STATE_SEND;
        if(ATCommand == AT_WAKEUP && testRound == true){
 8004c2c:	4b5b      	ldr	r3, [pc, #364]	@ (8004d9c <DMA_ProcessBuffer+0x1cc>)
 8004c2e:	781b      	ldrb	r3, [r3, #0]
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d107      	bne.n	8004c44 <DMA_ProcessBuffer+0x74>
 8004c34:	4b5a      	ldr	r3, [pc, #360]	@ (8004da0 <DMA_ProcessBuffer+0x1d0>)
 8004c36:	781b      	ldrb	r3, [r3, #0]
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d003      	beq.n	8004c44 <DMA_ProcessBuffer+0x74>
          status = RECEIVE_STATUS_UNPROGGED;
 8004c3c:	230d      	movs	r3, #13
 8004c3e:	18fb      	adds	r3, r7, r3
 8004c40:	2207      	movs	r2, #7
 8004c42:	701a      	strb	r2, [r3, #0]
        }
        if(ATCommand == AT_CWJAP){
 8004c44:	4b55      	ldr	r3, [pc, #340]	@ (8004d9c <DMA_ProcessBuffer+0x1cc>)
 8004c46:	781b      	ldrb	r3, [r3, #0]
 8004c48:	2b08      	cmp	r3, #8
 8004c4a:	d103      	bne.n	8004c54 <DMA_ProcessBuffer+0x84>
          EspState = ESP_STATE_MODE_SELECT;
 8004c4c:	4b55      	ldr	r3, [pc, #340]	@ (8004da4 <DMA_ProcessBuffer+0x1d4>)
 8004c4e:	220b      	movs	r2, #11
 8004c50:	701a      	strb	r2, [r3, #0]
 8004c52:	e016      	b.n	8004c82 <DMA_ProcessBuffer+0xb2>
        }
        else{
          status = RECEIVE_STATUS_TIMEOUT;
 8004c54:	230d      	movs	r3, #13
 8004c56:	18fb      	adds	r3, r7, r3
 8004c58:	2206      	movs	r2, #6
 8004c5a:	701a      	strb	r2, [r3, #0]
 8004c5c:	e011      	b.n	8004c82 <DMA_ProcessBuffer+0xb2>
        }
      }
     else{
       retry ++;
 8004c5e:	4b4e      	ldr	r3, [pc, #312]	@ (8004d98 <DMA_ProcessBuffer+0x1c8>)
 8004c60:	781b      	ldrb	r3, [r3, #0]
 8004c62:	3301      	adds	r3, #1
 8004c64:	b2da      	uxtb	r2, r3
 8004c66:	4b4c      	ldr	r3, [pc, #304]	@ (8004d98 <DMA_ProcessBuffer+0x1c8>)
 8004c68:	701a      	strb	r2, [r3, #0]
       ESPTimeStamp = HAL_GetTick() + ESP_WIFI_RETRY_TIME;
 8004c6a:	f009 fbfd 	bl	800e468 <HAL_GetTick>
 8004c6e:	0003      	movs	r3, r0
 8004c70:	33f5      	adds	r3, #245	@ 0xf5
 8004c72:	33ff      	adds	r3, #255	@ 0xff
 8004c74:	001a      	movs	r2, r3
 8004c76:	4b4c      	ldr	r3, [pc, #304]	@ (8004da8 <DMA_ProcessBuffer+0x1d8>)
 8004c78:	601a      	str	r2, [r3, #0]
       status = RECEIVE_STATUS_RETRY;
 8004c7a:	230d      	movs	r3, #13
 8004c7c:	18fb      	adds	r3, r7, r3
 8004c7e:	2204      	movs	r2, #4
 8004c80:	701a      	strb	r2, [r3, #0]
      }
    }
    if (pos != OldPos) {
 8004c82:	4b44      	ldr	r3, [pc, #272]	@ (8004d94 <DMA_ProcessBuffer+0x1c4>)
 8004c84:	781b      	ldrb	r3, [r3, #0]
 8004c86:	b2db      	uxtb	r3, r3
 8004c88:	001a      	movs	r2, r3
 8004c8a:	210e      	movs	r1, #14
 8004c8c:	187b      	adds	r3, r7, r1
 8004c8e:	881b      	ldrh	r3, [r3, #0]
 8004c90:	4293      	cmp	r3, r2
 8004c92:	d100      	bne.n	8004c96 <DMA_ProcessBuffer+0xc6>
 8004c94:	e075      	b.n	8004d82 <DMA_ProcessBuffer+0x1b2>
      retry = 0;
 8004c96:	4b40      	ldr	r3, [pc, #256]	@ (8004d98 <DMA_ProcessBuffer+0x1c8>)
 8004c98:	2200      	movs	r2, #0
 8004c9a:	701a      	strb	r2, [r3, #0]
      if(TempPos == OldPos){
 8004c9c:	4b43      	ldr	r3, [pc, #268]	@ (8004dac <DMA_ProcessBuffer+0x1dc>)
 8004c9e:	781b      	ldrb	r3, [r3, #0]
 8004ca0:	b2da      	uxtb	r2, r3
 8004ca2:	4b3c      	ldr	r3, [pc, #240]	@ (8004d94 <DMA_ProcessBuffer+0x1c4>)
 8004ca4:	781b      	ldrb	r3, [r3, #0]
 8004ca6:	b2db      	uxtb	r3, r3
 8004ca8:	429a      	cmp	r2, r3
 8004caa:	d109      	bne.n	8004cc0 <DMA_ProcessBuffer+0xf0>
        TempPos = pos;
 8004cac:	187b      	adds	r3, r7, r1
 8004cae:	881b      	ldrh	r3, [r3, #0]
 8004cb0:	b2da      	uxtb	r2, r3
 8004cb2:	4b3e      	ldr	r3, [pc, #248]	@ (8004dac <DMA_ProcessBuffer+0x1dc>)
 8004cb4:	701a      	strb	r2, [r3, #0]
        status = RECEIVE_STATUS_LOOP;
 8004cb6:	230d      	movs	r3, #13
 8004cb8:	18fb      	adds	r3, r7, r3
 8004cba:	220a      	movs	r2, #10
 8004cbc:	701a      	strb	r2, [r3, #0]
 8004cbe:	e060      	b.n	8004d82 <DMA_ProcessBuffer+0x1b2>
      }
      else{
        if(TempPos != pos){
 8004cc0:	4b3a      	ldr	r3, [pc, #232]	@ (8004dac <DMA_ProcessBuffer+0x1dc>)
 8004cc2:	781b      	ldrb	r3, [r3, #0]
 8004cc4:	b2db      	uxtb	r3, r3
 8004cc6:	001a      	movs	r2, r3
 8004cc8:	210e      	movs	r1, #14
 8004cca:	187b      	adds	r3, r7, r1
 8004ccc:	881b      	ldrh	r3, [r3, #0]
 8004cce:	4293      	cmp	r3, r2
 8004cd0:	d009      	beq.n	8004ce6 <DMA_ProcessBuffer+0x116>
          TempPos = pos;
 8004cd2:	187b      	adds	r3, r7, r1
 8004cd4:	881b      	ldrh	r3, [r3, #0]
 8004cd6:	b2da      	uxtb	r2, r3
 8004cd8:	4b34      	ldr	r3, [pc, #208]	@ (8004dac <DMA_ProcessBuffer+0x1dc>)
 8004cda:	701a      	strb	r2, [r3, #0]
          status = RECEIVE_STATUS_LOOP;
 8004cdc:	230d      	movs	r3, #13
 8004cde:	18fb      	adds	r3, r7, r3
 8004ce0:	220a      	movs	r2, #10
 8004ce2:	701a      	strb	r2, [r3, #0]
 8004ce4:	e04d      	b.n	8004d82 <DMA_ProcessBuffer+0x1b2>
        }
        else{
          if (pos > OldPos) {
 8004ce6:	4b2b      	ldr	r3, [pc, #172]	@ (8004d94 <DMA_ProcessBuffer+0x1c4>)
 8004ce8:	781b      	ldrb	r3, [r3, #0]
 8004cea:	b2db      	uxtb	r3, r3
 8004cec:	001a      	movs	r2, r3
 8004cee:	210e      	movs	r1, #14
 8004cf0:	187b      	adds	r3, r7, r1
 8004cf2:	881b      	ldrh	r3, [r3, #0]
 8004cf4:	4293      	cmp	r3, r2
 8004cf6:	d917      	bls.n	8004d28 <DMA_ProcessBuffer+0x158>
              status = ParseBuffer(&RxBuffer[OldPos], (pos - OldPos), expectation);
 8004cf8:	4b26      	ldr	r3, [pc, #152]	@ (8004d94 <DMA_ProcessBuffer+0x1c4>)
 8004cfa:	781b      	ldrb	r3, [r3, #0]
 8004cfc:	b2db      	uxtb	r3, r3
 8004cfe:	001a      	movs	r2, r3
 8004d00:	4b2b      	ldr	r3, [pc, #172]	@ (8004db0 <DMA_ProcessBuffer+0x1e0>)
 8004d02:	18d0      	adds	r0, r2, r3
 8004d04:	4b23      	ldr	r3, [pc, #140]	@ (8004d94 <DMA_ProcessBuffer+0x1c4>)
 8004d06:	781b      	ldrb	r3, [r3, #0]
 8004d08:	b2db      	uxtb	r3, r3
 8004d0a:	001a      	movs	r2, r3
 8004d0c:	187b      	adds	r3, r7, r1
 8004d0e:	881b      	ldrh	r3, [r3, #0]
 8004d10:	1a9b      	subs	r3, r3, r2
 8004d12:	b299      	uxth	r1, r3
 8004d14:	230d      	movs	r3, #13
 8004d16:	18fc      	adds	r4, r7, r3
 8004d18:	1dfb      	adds	r3, r7, #7
 8004d1a:	781b      	ldrb	r3, [r3, #0]
 8004d1c:	001a      	movs	r2, r3
 8004d1e:	f7ff fa89 	bl	8004234 <ParseBuffer>
 8004d22:	0003      	movs	r3, r0
 8004d24:	7023      	strb	r3, [r4, #0]
 8004d26:	e026      	b.n	8004d76 <DMA_ProcessBuffer+0x1a6>
          }
          else {
              // Buffer wrap-around
              status = ParseBuffer(&RxBuffer[OldPos], ESP_MAX_BUFFER_SIZE - OldPos, expectation);
 8004d28:	4b1a      	ldr	r3, [pc, #104]	@ (8004d94 <DMA_ProcessBuffer+0x1c4>)
 8004d2a:	781b      	ldrb	r3, [r3, #0]
 8004d2c:	b2db      	uxtb	r3, r3
 8004d2e:	001a      	movs	r2, r3
 8004d30:	4b1f      	ldr	r3, [pc, #124]	@ (8004db0 <DMA_ProcessBuffer+0x1e0>)
 8004d32:	18d0      	adds	r0, r2, r3
 8004d34:	4b17      	ldr	r3, [pc, #92]	@ (8004d94 <DMA_ProcessBuffer+0x1c4>)
 8004d36:	781b      	ldrb	r3, [r3, #0]
 8004d38:	b2db      	uxtb	r3, r3
 8004d3a:	001a      	movs	r2, r3
 8004d3c:	2380      	movs	r3, #128	@ 0x80
 8004d3e:	005b      	lsls	r3, r3, #1
 8004d40:	1a9b      	subs	r3, r3, r2
 8004d42:	b299      	uxth	r1, r3
 8004d44:	250d      	movs	r5, #13
 8004d46:	197c      	adds	r4, r7, r5
 8004d48:	1dfb      	adds	r3, r7, #7
 8004d4a:	781b      	ldrb	r3, [r3, #0]
 8004d4c:	001a      	movs	r2, r3
 8004d4e:	f7ff fa71 	bl	8004234 <ParseBuffer>
 8004d52:	0003      	movs	r3, r0
 8004d54:	7023      	strb	r3, [r4, #0]
              if (pos > 0) {
 8004d56:	210e      	movs	r1, #14
 8004d58:	187b      	adds	r3, r7, r1
 8004d5a:	881b      	ldrh	r3, [r3, #0]
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d00a      	beq.n	8004d76 <DMA_ProcessBuffer+0x1a6>
                  status = ParseBuffer(&RxBuffer[0], pos, expectation);
 8004d60:	197c      	adds	r4, r7, r5
 8004d62:	1dfb      	adds	r3, r7, #7
 8004d64:	781a      	ldrb	r2, [r3, #0]
 8004d66:	187b      	adds	r3, r7, r1
 8004d68:	8819      	ldrh	r1, [r3, #0]
 8004d6a:	4b11      	ldr	r3, [pc, #68]	@ (8004db0 <DMA_ProcessBuffer+0x1e0>)
 8004d6c:	0018      	movs	r0, r3
 8004d6e:	f7ff fa61 	bl	8004234 <ParseBuffer>
 8004d72:	0003      	movs	r3, r0
 8004d74:	7023      	strb	r3, [r4, #0]
              }
          }
//          Debug("DMA ESP RxBuffer OldPos: %d, pos: %d", OldPos, pos);
          OldPos = pos;
 8004d76:	230e      	movs	r3, #14
 8004d78:	18fb      	adds	r3, r7, r3
 8004d7a:	881b      	ldrh	r3, [r3, #0]
 8004d7c:	b2da      	uxtb	r2, r3
 8004d7e:	4b05      	ldr	r3, [pc, #20]	@ (8004d94 <DMA_ProcessBuffer+0x1c4>)
 8004d80:	701a      	strb	r2, [r3, #0]
        }
      }
    }
    return status;
 8004d82:	230d      	movs	r3, #13
 8004d84:	18fb      	adds	r3, r7, r3
 8004d86:	781b      	ldrb	r3, [r3, #0]
}
 8004d88:	0018      	movs	r0, r3
 8004d8a:	46bd      	mov	sp, r7
 8004d8c:	b004      	add	sp, #16
 8004d8e:	bdb0      	pop	{r4, r5, r7, pc}
 8004d90:	200024dc 	.word	0x200024dc
 8004d94:	20000b39 	.word	0x20000b39
 8004d98:	20000a28 	.word	0x20000a28
 8004d9c:	20000a2a 	.word	0x20000a2a
 8004da0:	20000000 	.word	0x20000000
 8004da4:	20000028 	.word	0x20000028
 8004da8:	20000a1c 	.word	0x20000a1c
 8004dac:	20000b3a 	.word	0x20000b3a
 8004db0:	2000044c 	.word	0x2000044c

08004db4 <clearDMABuffer>:

void clearDMABuffer(){
 8004db4:	b580      	push	{r7, lr}
 8004db6:	af00      	add	r7, sp, #0
  memset(RxBuffer, '\0', ESP_MAX_BUFFER_SIZE);
 8004db8:	2380      	movs	r3, #128	@ 0x80
 8004dba:	005a      	lsls	r2, r3, #1
 8004dbc:	4b03      	ldr	r3, [pc, #12]	@ (8004dcc <clearDMABuffer+0x18>)
 8004dbe:	2100      	movs	r1, #0
 8004dc0:	0018      	movs	r0, r3
 8004dc2:	f01a fd93 	bl	801f8ec <memset>
}
 8004dc6:	46c0      	nop			@ (mov r8, r8)
 8004dc8:	46bd      	mov	sp, r7
 8004dca:	bd80      	pop	{r7, pc}
 8004dcc:	2000044c 	.word	0x2000044c

08004dd0 <ATCompare>:
//Compares the received status to the expected status (OK, ready, >).
bool ATCompare(uint8_t AT_Command_Received, uint8_t AT_Command_Expected){
 8004dd0:	b580      	push	{r7, lr}
 8004dd2:	b084      	sub	sp, #16
 8004dd4:	af00      	add	r7, sp, #0
 8004dd6:	0002      	movs	r2, r0
 8004dd8:	1dfb      	adds	r3, r7, #7
 8004dda:	701a      	strb	r2, [r3, #0]
 8004ddc:	1dbb      	adds	r3, r7, #6
 8004dde:	1c0a      	adds	r2, r1, #0
 8004de0:	701a      	strb	r2, [r3, #0]
  bool value = false;
 8004de2:	210f      	movs	r1, #15
 8004de4:	187b      	adds	r3, r7, r1
 8004de6:	2200      	movs	r2, #0
 8004de8:	701a      	strb	r2, [r3, #0]
  if(AT_Command_Expected == RECEIVE_EXPECTATION_OK){
 8004dea:	1dbb      	adds	r3, r7, #6
 8004dec:	781b      	ldrb	r3, [r3, #0]
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d105      	bne.n	8004dfe <ATCompare+0x2e>
    value = (AT_Command_Received == RECEIVE_STATUS_OK);
 8004df2:	187b      	adds	r3, r7, r1
 8004df4:	1dfa      	adds	r2, r7, #7
 8004df6:	7812      	ldrb	r2, [r2, #0]
 8004df8:	4251      	negs	r1, r2
 8004dfa:	414a      	adcs	r2, r1
 8004dfc:	701a      	strb	r2, [r3, #0]
  }
  if(AT_Command_Expected == RECEIVE_EXPECTATION_READY){
 8004dfe:	1dbb      	adds	r3, r7, #6
 8004e00:	781b      	ldrb	r3, [r3, #0]
 8004e02:	2b01      	cmp	r3, #1
 8004e04:	d107      	bne.n	8004e16 <ATCompare+0x46>
    value = (AT_Command_Received == RECEIVE_STATUS_READY);
 8004e06:	230f      	movs	r3, #15
 8004e08:	18fb      	adds	r3, r7, r3
 8004e0a:	1dfa      	adds	r2, r7, #7
 8004e0c:	7812      	ldrb	r2, [r2, #0]
 8004e0e:	3a02      	subs	r2, #2
 8004e10:	4251      	negs	r1, r2
 8004e12:	414a      	adcs	r2, r1
 8004e14:	701a      	strb	r2, [r3, #0]
  }
  if(AT_Command_Expected == RECEIVE_EXPECTATION_START){
 8004e16:	1dbb      	adds	r3, r7, #6
 8004e18:	781b      	ldrb	r3, [r3, #0]
 8004e1a:	2b02      	cmp	r3, #2
 8004e1c:	d107      	bne.n	8004e2e <ATCompare+0x5e>
    value = (AT_Command_Received == RECEIVE_STATUS_START);
 8004e1e:	230f      	movs	r3, #15
 8004e20:	18fb      	adds	r3, r7, r3
 8004e22:	1dfa      	adds	r2, r7, #7
 8004e24:	7812      	ldrb	r2, [r2, #0]
 8004e26:	3a05      	subs	r2, #5
 8004e28:	4251      	negs	r1, r2
 8004e2a:	414a      	adcs	r2, r1
 8004e2c:	701a      	strb	r2, [r3, #0]
  }
  if(AT_Command_Expected == RECEIVE_EXPECTATION_TIME){
 8004e2e:	1dbb      	adds	r3, r7, #6
 8004e30:	781b      	ldrb	r3, [r3, #0]
 8004e32:	2b05      	cmp	r3, #5
 8004e34:	d107      	bne.n	8004e46 <ATCompare+0x76>
    value = (AT_Command_Received == RECEIVE_STATUS_TIME);
 8004e36:	230f      	movs	r3, #15
 8004e38:	18fb      	adds	r3, r7, r3
 8004e3a:	1dfa      	adds	r2, r7, #7
 8004e3c:	7812      	ldrb	r2, [r2, #0]
 8004e3e:	3a0b      	subs	r2, #11
 8004e40:	4251      	negs	r1, r2
 8004e42:	414a      	adcs	r2, r1
 8004e44:	701a      	strb	r2, [r3, #0]
  }
  return(value);
 8004e46:	230f      	movs	r3, #15
 8004e48:	18fb      	adds	r3, r7, r3
 8004e4a:	781b      	ldrb	r3, [r3, #0]
}
 8004e4c:	0018      	movs	r0, r3
 8004e4e:	46bd      	mov	sp, r7
 8004e50:	b004      	add	sp, #16
 8004e52:	bd80      	pop	{r7, pc}

08004e54 <AT_Send>:

bool AT_Send(AT_Commands state){
 8004e54:	b590      	push	{r4, r7, lr}
 8004e56:	b085      	sub	sp, #20
 8004e58:	af00      	add	r7, sp, #0
 8004e5a:	0002      	movs	r2, r0
 8004e5c:	1dfb      	adds	r3, r7, #7
 8004e5e:	701a      	strb	r2, [r3, #0]
  bool ATCommandSend = false;
 8004e60:	230f      	movs	r3, #15
 8004e62:	18fb      	adds	r3, r7, r3
 8004e64:	2200      	movs	r2, #0
 8004e66:	701a      	strb	r2, [r3, #0]
  switch (state){
 8004e68:	1dfb      	adds	r3, r7, #7
 8004e6a:	781b      	ldrb	r3, [r3, #0]
 8004e6c:	2b14      	cmp	r3, #20
 8004e6e:	d900      	bls.n	8004e72 <AT_Send+0x1e>
 8004e70:	e18c      	b.n	800518c <AT_Send+0x338>
 8004e72:	009a      	lsls	r2, r3, #2
 8004e74:	4bc9      	ldr	r3, [pc, #804]	@ (800519c <AT_Send+0x348>)
 8004e76:	18d3      	adds	r3, r2, r3
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	469f      	mov	pc, r3

  case AT_WAKEUP:
  if(TimestampIsReached(ESPTimeStamp)){
 8004e7c:	4bc8      	ldr	r3, [pc, #800]	@ (80051a0 <AT_Send+0x34c>)
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	0018      	movs	r0, r3
 8004e82:	f008 fe45 	bl	800db10 <TimestampIsReached>
 8004e86:	1e03      	subs	r3, r0, #0
 8004e88:	d100      	bne.n	8004e8c <AT_Send+0x38>
 8004e8a:	e17e      	b.n	800518a <AT_Send+0x336>
    ATCommandSend = PollAwake();
 8004e8c:	230f      	movs	r3, #15
 8004e8e:	18fc      	adds	r4, r7, r3
 8004e90:	f7ff fbc0 	bl	8004614 <PollAwake>
 8004e94:	0003      	movs	r3, r0
 8004e96:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_LONG;
 8004e98:	f009 fae6 	bl	800e468 <HAL_GetTick>
 8004e9c:	0003      	movs	r3, r0
 8004e9e:	3332      	adds	r3, #50	@ 0x32
 8004ea0:	001a      	movs	r2, r3
 8004ea2:	4bbf      	ldr	r3, [pc, #764]	@ (80051a0 <AT_Send+0x34c>)
 8004ea4:	601a      	str	r2, [r3, #0]
  }
  break;
 8004ea6:	e170      	b.n	800518a <AT_Send+0x336>

  case AT_SET_RFPOWER:
    Debug("Setting RF Power");
 8004ea8:	4abe      	ldr	r2, [pc, #760]	@ (80051a4 <AT_Send+0x350>)
 8004eaa:	4bbf      	ldr	r3, [pc, #764]	@ (80051a8 <AT_Send+0x354>)
 8004eac:	0019      	movs	r1, r3
 8004eae:	2003      	movs	r0, #3
 8004eb0:	f008 fe84 	bl	800dbbc <CreateLine>
    ATCommandSend = RFPower();
 8004eb4:	230f      	movs	r3, #15
 8004eb6:	18fc      	adds	r4, r7, r3
 8004eb8:	f7ff fbc8 	bl	800464c <RFPower>
 8004ebc:	0003      	movs	r3, r0
 8004ebe:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8004ec0:	f009 fad2 	bl	800e468 <HAL_GetTick>
 8004ec4:	0003      	movs	r3, r0
 8004ec6:	330a      	adds	r3, #10
 8004ec8:	001a      	movs	r2, r3
 8004eca:	4bb5      	ldr	r3, [pc, #724]	@ (80051a0 <AT_Send+0x34c>)
 8004ecc:	601a      	str	r2, [r3, #0]
    break;
 8004ece:	e15d      	b.n	800518c <AT_Send+0x338>

  case AT_CHECK_RFPOWER:
    Debug("Checking RF Power");
 8004ed0:	4ab6      	ldr	r2, [pc, #728]	@ (80051ac <AT_Send+0x358>)
 8004ed2:	4bb5      	ldr	r3, [pc, #724]	@ (80051a8 <AT_Send+0x354>)
 8004ed4:	0019      	movs	r1, r3
 8004ed6:	2003      	movs	r0, #3
 8004ed8:	f008 fe70 	bl	800dbbc <CreateLine>
    ATCommandSend = CheckRFPower();
 8004edc:	230f      	movs	r3, #15
 8004ede:	18fc      	adds	r4, r7, r3
 8004ee0:	f7ff fbd0 	bl	8004684 <CheckRFPower>
 8004ee4:	0003      	movs	r3, r0
 8004ee6:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8004ee8:	f009 fabe 	bl	800e468 <HAL_GetTick>
 8004eec:	0003      	movs	r3, r0
 8004eee:	330a      	adds	r3, #10
 8004ef0:	001a      	movs	r2, r3
 8004ef2:	4bab      	ldr	r3, [pc, #684]	@ (80051a0 <AT_Send+0x34c>)
 8004ef4:	601a      	str	r2, [r3, #0]
    break;
 8004ef6:	e149      	b.n	800518c <AT_Send+0x338>

  case AT_RESTORE:
    Debug("Restoring ESP");
 8004ef8:	4aad      	ldr	r2, [pc, #692]	@ (80051b0 <AT_Send+0x35c>)
 8004efa:	4bab      	ldr	r3, [pc, #684]	@ (80051a8 <AT_Send+0x354>)
 8004efc:	0019      	movs	r1, r3
 8004efe:	2003      	movs	r0, #3
 8004f00:	f008 fe5c 	bl	800dbbc <CreateLine>
    ATCommandSend = ATRestore();
 8004f04:	230f      	movs	r3, #15
 8004f06:	18fc      	adds	r4, r7, r3
 8004f08:	f7ff fbd8 	bl	80046bc <ATRestore>
 8004f0c:	0003      	movs	r3, r0
 8004f0e:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_LONG;
 8004f10:	f009 faaa 	bl	800e468 <HAL_GetTick>
 8004f14:	0003      	movs	r3, r0
 8004f16:	3332      	adds	r3, #50	@ 0x32
 8004f18:	001a      	movs	r2, r3
 8004f1a:	4ba1      	ldr	r3, [pc, #644]	@ (80051a0 <AT_Send+0x34c>)
 8004f1c:	601a      	str	r2, [r3, #0]
    break;
 8004f1e:	e135      	b.n	800518c <AT_Send+0x338>

  case AT_CWINIT:
    Debug("Initializing Wi-Fi");
 8004f20:	4aa4      	ldr	r2, [pc, #656]	@ (80051b4 <AT_Send+0x360>)
 8004f22:	4ba1      	ldr	r3, [pc, #644]	@ (80051a8 <AT_Send+0x354>)
 8004f24:	0019      	movs	r1, r3
 8004f26:	2003      	movs	r0, #3
 8004f28:	f008 fe48 	bl	800dbbc <CreateLine>
    ATCommandSend = CWINIT();
 8004f2c:	230f      	movs	r3, #15
 8004f2e:	18fc      	adds	r4, r7, r3
 8004f30:	f7ff fbe0 	bl	80046f4 <CWINIT>
 8004f34:	0003      	movs	r3, r0
 8004f36:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_WIFI_INIT_TIME;
 8004f38:	f009 fa96 	bl	800e468 <HAL_GetTick>
 8004f3c:	0003      	movs	r3, r0
 8004f3e:	33f5      	adds	r3, #245	@ 0xf5
 8004f40:	33ff      	adds	r3, #255	@ 0xff
 8004f42:	001a      	movs	r2, r3
 8004f44:	4b96      	ldr	r3, [pc, #600]	@ (80051a0 <AT_Send+0x34c>)
 8004f46:	601a      	str	r2, [r3, #0]
    break;
 8004f48:	e120      	b.n	800518c <AT_Send+0x338>

  case AT_CWSTATE:
    Debug("Checking current SSID");
 8004f4a:	4a9b      	ldr	r2, [pc, #620]	@ (80051b8 <AT_Send+0x364>)
 8004f4c:	4b96      	ldr	r3, [pc, #600]	@ (80051a8 <AT_Send+0x354>)
 8004f4e:	0019      	movs	r1, r3
 8004f50:	2003      	movs	r0, #3
 8004f52:	f008 fe33 	bl	800dbbc <CreateLine>
    ATCommandSend = CWSTATE();
 8004f56:	230f      	movs	r3, #15
 8004f58:	18fc      	adds	r4, r7, r3
 8004f5a:	f7ff fcd9 	bl	8004910 <CWSTATE>
 8004f5e:	0003      	movs	r3, r0
 8004f60:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_WIFI_INIT_TIME;
 8004f62:	f009 fa81 	bl	800e468 <HAL_GetTick>
 8004f66:	0003      	movs	r3, r0
 8004f68:	33f5      	adds	r3, #245	@ 0xf5
 8004f6a:	33ff      	adds	r3, #255	@ 0xff
 8004f6c:	001a      	movs	r2, r3
 8004f6e:	4b8c      	ldr	r3, [pc, #560]	@ (80051a0 <AT_Send+0x34c>)
 8004f70:	601a      	str	r2, [r3, #0]
    break;
 8004f72:	e10b      	b.n	800518c <AT_Send+0x338>

  case AT_CWMODE1:
    Debug("Setting to station mode");
 8004f74:	4a91      	ldr	r2, [pc, #580]	@ (80051bc <AT_Send+0x368>)
 8004f76:	4b8c      	ldr	r3, [pc, #560]	@ (80051a8 <AT_Send+0x354>)
 8004f78:	0019      	movs	r1, r3
 8004f7a:	2003      	movs	r0, #3
 8004f7c:	f008 fe1e 	bl	800dbbc <CreateLine>
    ATCommandSend = CWMODE1();
 8004f80:	230f      	movs	r3, #15
 8004f82:	18fc      	adds	r4, r7, r3
 8004f84:	f7ff fbd2 	bl	800472c <CWMODE1>
 8004f88:	0003      	movs	r3, r0
 8004f8a:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8004f8c:	f009 fa6c 	bl	800e468 <HAL_GetTick>
 8004f90:	0003      	movs	r3, r0
 8004f92:	330a      	adds	r3, #10
 8004f94:	001a      	movs	r2, r3
 8004f96:	4b82      	ldr	r3, [pc, #520]	@ (80051a0 <AT_Send+0x34c>)
 8004f98:	601a      	str	r2, [r3, #0]
    break;
 8004f9a:	e0f7      	b.n	800518c <AT_Send+0x338>

  case AT_CWMODE2:
    Debug("Setting to station mode");
 8004f9c:	4a87      	ldr	r2, [pc, #540]	@ (80051bc <AT_Send+0x368>)
 8004f9e:	4b82      	ldr	r3, [pc, #520]	@ (80051a8 <AT_Send+0x354>)
 8004fa0:	0019      	movs	r1, r3
 8004fa2:	2003      	movs	r0, #3
 8004fa4:	f008 fe0a 	bl	800dbbc <CreateLine>
    ATCommandSend = CWMODE2();
 8004fa8:	230f      	movs	r3, #15
 8004faa:	18fc      	adds	r4, r7, r3
 8004fac:	f7ff fbda 	bl	8004764 <CWMODE2>
 8004fb0:	0003      	movs	r3, r0
 8004fb2:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8004fb4:	f009 fa58 	bl	800e468 <HAL_GetTick>
 8004fb8:	0003      	movs	r3, r0
 8004fba:	330a      	adds	r3, #10
 8004fbc:	001a      	movs	r2, r3
 8004fbe:	4b78      	ldr	r3, [pc, #480]	@ (80051a0 <AT_Send+0x34c>)
 8004fc0:	601a      	str	r2, [r3, #0]
    break;
 8004fc2:	e0e3      	b.n	800518c <AT_Send+0x338>

  case AT_CWAUTOCONN:
    Debug("Setting auto connect");
 8004fc4:	4a7e      	ldr	r2, [pc, #504]	@ (80051c0 <AT_Send+0x36c>)
 8004fc6:	4b78      	ldr	r3, [pc, #480]	@ (80051a8 <AT_Send+0x354>)
 8004fc8:	0019      	movs	r1, r3
 8004fca:	2003      	movs	r0, #3
 8004fcc:	f008 fdf6 	bl	800dbbc <CreateLine>
    ATCommandSend = CWAUTOCONN();
 8004fd0:	230f      	movs	r3, #15
 8004fd2:	18fc      	adds	r4, r7, r3
 8004fd4:	f7ff fbe2 	bl	800479c <CWAUTOCONN>
 8004fd8:	0003      	movs	r3, r0
 8004fda:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8004fdc:	f009 fa44 	bl	800e468 <HAL_GetTick>
 8004fe0:	0003      	movs	r3, r0
 8004fe2:	330a      	adds	r3, #10
 8004fe4:	001a      	movs	r2, r3
 8004fe6:	4b6e      	ldr	r3, [pc, #440]	@ (80051a0 <AT_Send+0x34c>)
 8004fe8:	601a      	str	r2, [r3, #0]
    break;
 8004fea:	e0cf      	b.n	800518c <AT_Send+0x338>

  case AT_CWJAP:
    Debug("Connect to Wi-Fi");
 8004fec:	4a75      	ldr	r2, [pc, #468]	@ (80051c4 <AT_Send+0x370>)
 8004fee:	4b6e      	ldr	r3, [pc, #440]	@ (80051a8 <AT_Send+0x354>)
 8004ff0:	0019      	movs	r1, r3
 8004ff2:	2003      	movs	r0, #3
 8004ff4:	f008 fde2 	bl	800dbbc <CreateLine>
    ATCommandSend = CWJAP();
 8004ff8:	230f      	movs	r3, #15
 8004ffa:	18fc      	adds	r4, r7, r3
 8004ffc:	f7ff fbea 	bl	80047d4 <CWJAP>
 8005000:	0003      	movs	r3, r0
 8005002:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_LONG;
 8005004:	f009 fa30 	bl	800e468 <HAL_GetTick>
 8005008:	0003      	movs	r3, r0
 800500a:	3332      	adds	r3, #50	@ 0x32
 800500c:	001a      	movs	r2, r3
 800500e:	4b64      	ldr	r3, [pc, #400]	@ (80051a0 <AT_Send+0x34c>)
 8005010:	601a      	str	r2, [r3, #0]
    break;
 8005012:	e0bb      	b.n	800518c <AT_Send+0x338>

  case AT_CWMODE3:
    Debug("SET in station/soft-ap mode");
 8005014:	4a6c      	ldr	r2, [pc, #432]	@ (80051c8 <AT_Send+0x374>)
 8005016:	4b64      	ldr	r3, [pc, #400]	@ (80051a8 <AT_Send+0x354>)
 8005018:	0019      	movs	r1, r3
 800501a:	2003      	movs	r0, #3
 800501c:	f008 fdce 	bl	800dbbc <CreateLine>
    ATCommandSend = CWMODE3();
 8005020:	230f      	movs	r3, #15
 8005022:	18fc      	adds	r4, r7, r3
 8005024:	f7ff fc58 	bl	80048d8 <CWMODE3>
 8005028:	0003      	movs	r3, r0
 800502a:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 800502c:	f009 fa1c 	bl	800e468 <HAL_GetTick>
 8005030:	0003      	movs	r3, r0
 8005032:	330a      	adds	r3, #10
 8005034:	001a      	movs	r2, r3
 8005036:	4b5a      	ldr	r3, [pc, #360]	@ (80051a0 <AT_Send+0x34c>)
 8005038:	601a      	str	r2, [r3, #0]
    break;
 800503a:	e0a7      	b.n	800518c <AT_Send+0x338>

  case AT_CWSAP:
    Debug("SET soft AP mode parameters");
 800503c:	4a63      	ldr	r2, [pc, #396]	@ (80051cc <AT_Send+0x378>)
 800503e:	4b5a      	ldr	r3, [pc, #360]	@ (80051a8 <AT_Send+0x354>)
 8005040:	0019      	movs	r1, r3
 8005042:	2003      	movs	r0, #3
 8005044:	f008 fdba 	bl	800dbbc <CreateLine>
    ATCommandSend = CWSAP();
 8005048:	230f      	movs	r3, #15
 800504a:	18fc      	adds	r4, r7, r3
 800504c:	f7ff fc7c 	bl	8004948 <CWSAP>
 8005050:	0003      	movs	r3, r0
 8005052:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8005054:	f009 fa08 	bl	800e468 <HAL_GetTick>
 8005058:	0003      	movs	r3, r0
 800505a:	330a      	adds	r3, #10
 800505c:	001a      	movs	r2, r3
 800505e:	4b50      	ldr	r3, [pc, #320]	@ (80051a0 <AT_Send+0x34c>)
 8005060:	601a      	str	r2, [r3, #0]
    break;
 8005062:	e093      	b.n	800518c <AT_Send+0x338>

  case AT_CIPMUX:
    ATCommandSend = CIPMUX();
 8005064:	230f      	movs	r3, #15
 8005066:	18fc      	adds	r4, r7, r3
 8005068:	f7ff fc8a 	bl	8004980 <CIPMUX>
 800506c:	0003      	movs	r3, r0
 800506e:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8005070:	f009 f9fa 	bl	800e468 <HAL_GetTick>
 8005074:	0003      	movs	r3, r0
 8005076:	330a      	adds	r3, #10
 8005078:	001a      	movs	r2, r3
 800507a:	4b49      	ldr	r3, [pc, #292]	@ (80051a0 <AT_Send+0x34c>)
 800507c:	601a      	str	r2, [r3, #0]
    break;
 800507e:	e085      	b.n	800518c <AT_Send+0x338>

  case AT_WEBSERVER:
    ATCommandSend = WEBSERVER();
 8005080:	230f      	movs	r3, #15
 8005082:	18fc      	adds	r4, r7, r3
 8005084:	f7ff fc98 	bl	80049b8 <WEBSERVER>
 8005088:	0003      	movs	r3, r0
 800508a:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 800508c:	f009 f9ec 	bl	800e468 <HAL_GetTick>
 8005090:	0003      	movs	r3, r0
 8005092:	330a      	adds	r3, #10
 8005094:	001a      	movs	r2, r3
 8005096:	4b42      	ldr	r3, [pc, #264]	@ (80051a0 <AT_Send+0x34c>)
 8005098:	601a      	str	r2, [r3, #0]
    break;
 800509a:	e077      	b.n	800518c <AT_Send+0x338>

  case AT_HTTPCPOST:
    ATCommandSend = HTTPCPOST();
 800509c:	230f      	movs	r3, #15
 800509e:	18fc      	adds	r4, r7, r3
 80050a0:	f7ff fca6 	bl	80049f0 <HTTPCPOST>
 80050a4:	0003      	movs	r3, r0
 80050a6:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_WIFI_INIT_TIME;
 80050a8:	f009 f9de 	bl	800e468 <HAL_GetTick>
 80050ac:	0003      	movs	r3, r0
 80050ae:	33f5      	adds	r3, #245	@ 0xf5
 80050b0:	33ff      	adds	r3, #255	@ 0xff
 80050b2:	001a      	movs	r2, r3
 80050b4:	4b3a      	ldr	r3, [pc, #232]	@ (80051a0 <AT_Send+0x34c>)
 80050b6:	601a      	str	r2, [r3, #0]
    break;
 80050b8:	e068      	b.n	800518c <AT_Send+0x338>

  case AT_SENDDATA:
    Debug("Send the data");
 80050ba:	4a45      	ldr	r2, [pc, #276]	@ (80051d0 <AT_Send+0x37c>)
 80050bc:	4b3a      	ldr	r3, [pc, #232]	@ (80051a8 <AT_Send+0x354>)
 80050be:	0019      	movs	r1, r3
 80050c0:	2003      	movs	r0, #3
 80050c2:	f008 fd7b 	bl	800dbbc <CreateLine>
    ATCommandSend = SENDDATA();
 80050c6:	230f      	movs	r3, #15
 80050c8:	18fc      	adds	r4, r7, r3
 80050ca:	f7ff fcf1 	bl	8004ab0 <SENDDATA>
 80050ce:	0003      	movs	r3, r0
 80050d0:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_WIFI_INIT_TIME; // + 7000;
 80050d2:	f009 f9c9 	bl	800e468 <HAL_GetTick>
 80050d6:	0003      	movs	r3, r0
 80050d8:	33f5      	adds	r3, #245	@ 0xf5
 80050da:	33ff      	adds	r3, #255	@ 0xff
 80050dc:	001a      	movs	r2, r3
 80050de:	4b30      	ldr	r3, [pc, #192]	@ (80051a0 <AT_Send+0x34c>)
 80050e0:	601a      	str	r2, [r3, #0]
    break;
 80050e2:	e053      	b.n	800518c <AT_Send+0x338>

  case AT_SLEEP:
    Debug("Setting ESP in sleep mode for 5 min");
 80050e4:	4a3b      	ldr	r2, [pc, #236]	@ (80051d4 <AT_Send+0x380>)
 80050e6:	4b30      	ldr	r3, [pc, #192]	@ (80051a8 <AT_Send+0x354>)
 80050e8:	0019      	movs	r1, r3
 80050ea:	2003      	movs	r0, #3
 80050ec:	f008 fd66 	bl	800dbbc <CreateLine>
    ATCommandSend = SLEEP();
 80050f0:	230f      	movs	r3, #15
 80050f2:	18fc      	adds	r4, r7, r3
 80050f4:	f7ff fcf8 	bl	8004ae8 <SLEEP>
 80050f8:	0003      	movs	r3, r0
 80050fa:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 80050fc:	f009 f9b4 	bl	800e468 <HAL_GetTick>
 8005100:	0003      	movs	r3, r0
 8005102:	330a      	adds	r3, #10
 8005104:	001a      	movs	r2, r3
 8005106:	4b26      	ldr	r3, [pc, #152]	@ (80051a0 <AT_Send+0x34c>)
 8005108:	601a      	str	r2, [r3, #0]
    break;
 800510a:	e03f      	b.n	800518c <AT_Send+0x338>
  case AT_CIPSNTPCFG:
    Debug("Config SNTP client");
 800510c:	4a32      	ldr	r2, [pc, #200]	@ (80051d8 <AT_Send+0x384>)
 800510e:	4b26      	ldr	r3, [pc, #152]	@ (80051a8 <AT_Send+0x354>)
 8005110:	0019      	movs	r1, r3
 8005112:	2003      	movs	r0, #3
 8005114:	f008 fd52 	bl	800dbbc <CreateLine>
    ATCommandSend = CIPSNTPCFG();
 8005118:	230f      	movs	r3, #15
 800511a:	18fc      	adds	r4, r7, r3
 800511c:	f7ff fd00 	bl	8004b20 <CIPSNTPCFG>
 8005120:	0003      	movs	r3, r0
 8005122:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8005124:	f009 f9a0 	bl	800e468 <HAL_GetTick>
 8005128:	0003      	movs	r3, r0
 800512a:	330a      	adds	r3, #10
 800512c:	001a      	movs	r2, r3
 800512e:	4b1c      	ldr	r3, [pc, #112]	@ (80051a0 <AT_Send+0x34c>)
 8005130:	601a      	str	r2, [r3, #0]
    break;
 8005132:	e02b      	b.n	800518c <AT_Send+0x338>
  case AT_CIPSNTPTIME:
    Debug("Get time from internet");
 8005134:	4a29      	ldr	r2, [pc, #164]	@ (80051dc <AT_Send+0x388>)
 8005136:	4b1c      	ldr	r3, [pc, #112]	@ (80051a8 <AT_Send+0x354>)
 8005138:	0019      	movs	r1, r3
 800513a:	2003      	movs	r0, #3
 800513c:	f008 fd3e 	bl	800dbbc <CreateLine>
    ATCommandSend = CIPSNTPTIME();
 8005140:	230f      	movs	r3, #15
 8005142:	18fc      	adds	r4, r7, r3
 8005144:	f7ff fd0c 	bl	8004b60 <CIPSNTPTIME>
 8005148:	0003      	movs	r3, r0
 800514a:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_WIFI_INIT_TIME;
 800514c:	f009 f98c 	bl	800e468 <HAL_GetTick>
 8005150:	0003      	movs	r3, r0
 8005152:	33f5      	adds	r3, #245	@ 0xf5
 8005154:	33ff      	adds	r3, #255	@ 0xff
 8005156:	001a      	movs	r2, r3
 8005158:	4b11      	ldr	r3, [pc, #68]	@ (80051a0 <AT_Send+0x34c>)
 800515a:	601a      	str	r2, [r3, #0]
    break;
 800515c:	e016      	b.n	800518c <AT_Send+0x338>
  case AT_CIPSNTPINTV:
    Debug("Set the interval to timesync");
 800515e:	4a20      	ldr	r2, [pc, #128]	@ (80051e0 <AT_Send+0x38c>)
 8005160:	4b11      	ldr	r3, [pc, #68]	@ (80051a8 <AT_Send+0x354>)
 8005162:	0019      	movs	r1, r3
 8005164:	2003      	movs	r0, #3
 8005166:	f008 fd29 	bl	800dbbc <CreateLine>
    ATCommandSend = CIPSNTPINTV();
 800516a:	230f      	movs	r3, #15
 800516c:	18fc      	adds	r4, r7, r3
 800516e:	f7ff fd13 	bl	8004b98 <CIPSNTPINTV>
 8005172:	0003      	movs	r3, r0
 8005174:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8005176:	f009 f977 	bl	800e468 <HAL_GetTick>
 800517a:	0003      	movs	r3, r0
 800517c:	330a      	adds	r3, #10
 800517e:	001a      	movs	r2, r3
 8005180:	4b07      	ldr	r3, [pc, #28]	@ (80051a0 <AT_Send+0x34c>)
 8005182:	601a      	str	r2, [r3, #0]
    break;
 8005184:	e002      	b.n	800518c <AT_Send+0x338>
  case AT_END:
    break;
 8005186:	46c0      	nop			@ (mov r8, r8)
 8005188:	e000      	b.n	800518c <AT_Send+0x338>
  break;
 800518a:	46c0      	nop			@ (mov r8, r8)
  }

  return(ATCommandSend);
 800518c:	230f      	movs	r3, #15
 800518e:	18fb      	adds	r3, r7, r3
 8005190:	781b      	ldrb	r3, [r3, #0]
}
 8005192:	0018      	movs	r0, r3
 8005194:	46bd      	mov	sp, r7
 8005196:	b005      	add	sp, #20
 8005198:	bd90      	pop	{r4, r7, pc}
 800519a:	46c0      	nop			@ (mov r8, r8)
 800519c:	08024754 	.word	0x08024754
 80051a0:	20000a1c 	.word	0x20000a1c
 80051a4:	08023028 	.word	0x08023028
 80051a8:	08022850 	.word	0x08022850
 80051ac:	0802303c 	.word	0x0802303c
 80051b0:	08023050 	.word	0x08023050
 80051b4:	08023060 	.word	0x08023060
 80051b8:	08023074 	.word	0x08023074
 80051bc:	0802308c 	.word	0x0802308c
 80051c0:	080230a4 	.word	0x080230a4
 80051c4:	080230bc 	.word	0x080230bc
 80051c8:	080230d0 	.word	0x080230d0
 80051cc:	080230ec 	.word	0x080230ec
 80051d0:	08023108 	.word	0x08023108
 80051d4:	08023118 	.word	0x08023118
 80051d8:	0802313c 	.word	0x0802313c
 80051dc:	08023150 	.word	0x08023150
 80051e0:	08023168 	.word	0x08023168

080051e4 <ESP_WakeTest>:

void ESP_WakeTest(void) {
 80051e4:	b590      	push	{r4, r7, lr}
 80051e6:	b083      	sub	sp, #12
 80051e8:	af00      	add	r7, sp, #0
  bool ATSend = false;
 80051ea:	1dfb      	adds	r3, r7, #7
 80051ec:	2200      	movs	r2, #0
 80051ee:	701a      	strb	r2, [r3, #0]
  static Receive_Status ATReceived = RECEIVE_STATUS_INCOMPLETE;
  switch (TestState){
 80051f0:	4b7a      	ldr	r3, [pc, #488]	@ (80053dc <ESP_WakeTest+0x1f8>)
 80051f2:	781b      	ldrb	r3, [r3, #0]
 80051f4:	2b05      	cmp	r3, #5
 80051f6:	d900      	bls.n	80051fa <ESP_WakeTest+0x16>
 80051f8:	e0d6      	b.n	80053a8 <ESP_WakeTest+0x1c4>
 80051fa:	009a      	lsls	r2, r3, #2
 80051fc:	4b78      	ldr	r3, [pc, #480]	@ (80053e0 <ESP_WakeTest+0x1fc>)
 80051fe:	18d3      	adds	r3, r2, r3
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	469f      	mov	pc, r3

    case ESP_TEST_INIT:
//      Debug("TestState: ESP_TEST_INIT");
      if(!EspTurnedOn){
 8005204:	4b77      	ldr	r3, [pc, #476]	@ (80053e4 <ESP_WakeTest+0x200>)
 8005206:	781b      	ldrb	r3, [r3, #0]
 8005208:	2201      	movs	r2, #1
 800520a:	4053      	eors	r3, r2
 800520c:	b2db      	uxtb	r3, r3
 800520e:	2b00      	cmp	r3, #0
 8005210:	d036      	beq.n	8005280 <ESP_WakeTest+0x9c>
        HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_RESET);
 8005212:	2380      	movs	r3, #128	@ 0x80
 8005214:	011b      	lsls	r3, r3, #4
 8005216:	4874      	ldr	r0, [pc, #464]	@ (80053e8 <ESP_WakeTest+0x204>)
 8005218:	2200      	movs	r2, #0
 800521a:	0019      	movs	r1, r3
 800521c:	f00a fbb5 	bl	800f98a <HAL_GPIO_WritePin>
        HAL_Delay(50);
 8005220:	2032      	movs	r0, #50	@ 0x32
 8005222:	f009 f92b 	bl	800e47c <HAL_Delay>
        HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_SET);
 8005226:	2380      	movs	r3, #128	@ 0x80
 8005228:	011b      	lsls	r3, r3, #4
 800522a:	486f      	ldr	r0, [pc, #444]	@ (80053e8 <ESP_WakeTest+0x204>)
 800522c:	2201      	movs	r2, #1
 800522e:	0019      	movs	r1, r3
 8005230:	f00a fbab 	bl	800f98a <HAL_GPIO_WritePin>
        HAL_Delay(10);
 8005234:	200a      	movs	r0, #10
 8005236:	f009 f921 	bl	800e47c <HAL_Delay>
        // Reset ESP, so we're sure that we're in the right state.
        HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_RESET);
 800523a:	4b6c      	ldr	r3, [pc, #432]	@ (80053ec <ESP_WakeTest+0x208>)
 800523c:	2200      	movs	r2, #0
 800523e:	2101      	movs	r1, #1
 8005240:	0018      	movs	r0, r3
 8005242:	f00a fba2 	bl	800f98a <HAL_GPIO_WritePin>
        HAL_Delay(10);
 8005246:	200a      	movs	r0, #10
 8005248:	f009 f918 	bl	800e47c <HAL_Delay>
        HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, 1);
 800524c:	4b67      	ldr	r3, [pc, #412]	@ (80053ec <ESP_WakeTest+0x208>)
 800524e:	2201      	movs	r2, #1
 8005250:	2102      	movs	r1, #2
 8005252:	0018      	movs	r0, r3
 8005254:	f00a fb99 	bl	800f98a <HAL_GPIO_WritePin>
        HAL_Delay(10);
 8005258:	200a      	movs	r0, #10
 800525a:	f009 f90f 	bl	800e47c <HAL_Delay>
        HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_SET);
 800525e:	4b63      	ldr	r3, [pc, #396]	@ (80053ec <ESP_WakeTest+0x208>)
 8005260:	2201      	movs	r2, #1
 8005262:	2101      	movs	r1, #1
 8005264:	0018      	movs	r0, r3
 8005266:	f00a fb90 	bl	800f98a <HAL_GPIO_WritePin>
        ESPTimeStamp = HAL_GetTick() + ESP_START_UP_TIME;
 800526a:	f009 f8fd 	bl	800e468 <HAL_GetTick>
 800526e:	0003      	movs	r3, r0
 8005270:	22af      	movs	r2, #175	@ 0xaf
 8005272:	0092      	lsls	r2, r2, #2
 8005274:	189a      	adds	r2, r3, r2
 8005276:	4b5e      	ldr	r3, [pc, #376]	@ (80053f0 <ESP_WakeTest+0x20c>)
 8005278:	601a      	str	r2, [r3, #0]
        EspTurnedOn = true;
 800527a:	4b5a      	ldr	r3, [pc, #360]	@ (80053e4 <ESP_WakeTest+0x200>)
 800527c:	2201      	movs	r2, #1
 800527e:	701a      	strb	r2, [r3, #0]
      }
      if(ESP_Receive(RxBuffer, ESP_MAX_BUFFER_SIZE)) {
 8005280:	2380      	movs	r3, #128	@ 0x80
 8005282:	005a      	lsls	r2, r3, #1
 8005284:	4b5b      	ldr	r3, [pc, #364]	@ (80053f4 <ESP_WakeTest+0x210>)
 8005286:	0011      	movs	r1, r2
 8005288:	0018      	movs	r0, r3
 800528a:	f7fe fc1f 	bl	8003acc <ESP_Receive>
 800528e:	1e03      	subs	r3, r0, #0
 8005290:	d100      	bne.n	8005294 <ESP_WakeTest+0xb0>
 8005292:	e099      	b.n	80053c8 <ESP_WakeTest+0x1e4>
        TestState = ESP_TEST_SEND;
 8005294:	4b51      	ldr	r3, [pc, #324]	@ (80053dc <ESP_WakeTest+0x1f8>)
 8005296:	2201      	movs	r2, #1
 8005298:	701a      	strb	r2, [r3, #0]
      }
      break;
 800529a:	e095      	b.n	80053c8 <ESP_WakeTest+0x1e4>

    case ESP_TEST_SEND:
//      Debug("TestState: ESP_TEST_SEND");
      if(TimestampIsReached(ESPTimeStamp)){
 800529c:	4b54      	ldr	r3, [pc, #336]	@ (80053f0 <ESP_WakeTest+0x20c>)
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	0018      	movs	r0, r3
 80052a2:	f008 fc35 	bl	800db10 <TimestampIsReached>
 80052a6:	1e03      	subs	r3, r0, #0
 80052a8:	d100      	bne.n	80052ac <ESP_WakeTest+0xc8>
 80052aa:	e08f      	b.n	80053cc <ESP_WakeTest+0x1e8>
        ATSend = AT_Send(ATCommand);
 80052ac:	4b52      	ldr	r3, [pc, #328]	@ (80053f8 <ESP_WakeTest+0x214>)
 80052ae:	781b      	ldrb	r3, [r3, #0]
 80052b0:	1dfc      	adds	r4, r7, #7
 80052b2:	0018      	movs	r0, r3
 80052b4:	f7ff fdce 	bl	8004e54 <AT_Send>
 80052b8:	0003      	movs	r3, r0
 80052ba:	7023      	strb	r3, [r4, #0]
        if(ATSend){
 80052bc:	1dfb      	adds	r3, r7, #7
 80052be:	781b      	ldrb	r3, [r3, #0]
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d100      	bne.n	80052c6 <ESP_WakeTest+0xe2>
 80052c4:	e082      	b.n	80053cc <ESP_WakeTest+0x1e8>
          TestState = ESP_TEST_RECEIVE;
 80052c6:	4b45      	ldr	r3, [pc, #276]	@ (80053dc <ESP_WakeTest+0x1f8>)
 80052c8:	2202      	movs	r2, #2
 80052ca:	701a      	strb	r2, [r3, #0]
        }
      }
      break;
 80052cc:	e07e      	b.n	80053cc <ESP_WakeTest+0x1e8>

    case ESP_TEST_RECEIVE:
//      Debug("TestState: ESP_TEST_RECEIVE");
      if(TimestampIsReached(ESPTimeStamp)){
 80052ce:	4b48      	ldr	r3, [pc, #288]	@ (80053f0 <ESP_WakeTest+0x20c>)
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	0018      	movs	r0, r3
 80052d4:	f008 fc1c 	bl	800db10 <TimestampIsReached>
 80052d8:	1e03      	subs	r3, r0, #0
 80052da:	d100      	bne.n	80052de <ESP_WakeTest+0xfa>
 80052dc:	e078      	b.n	80053d0 <ESP_WakeTest+0x1ec>
        ATReceived = DMA_ProcessBuffer(ATExpectation);
 80052de:	4b47      	ldr	r3, [pc, #284]	@ (80053fc <ESP_WakeTest+0x218>)
 80052e0:	781b      	ldrb	r3, [r3, #0]
 80052e2:	0018      	movs	r0, r3
 80052e4:	f7ff fc74 	bl	8004bd0 <DMA_ProcessBuffer>
 80052e8:	0003      	movs	r3, r0
 80052ea:	001a      	movs	r2, r3
 80052ec:	4b44      	ldr	r3, [pc, #272]	@ (8005400 <ESP_WakeTest+0x21c>)
 80052ee:	701a      	strb	r2, [r3, #0]
        bool proceed = ATCompare(ATReceived, ATExpectation);
 80052f0:	4b43      	ldr	r3, [pc, #268]	@ (8005400 <ESP_WakeTest+0x21c>)
 80052f2:	781a      	ldrb	r2, [r3, #0]
 80052f4:	4b41      	ldr	r3, [pc, #260]	@ (80053fc <ESP_WakeTest+0x218>)
 80052f6:	781b      	ldrb	r3, [r3, #0]
 80052f8:	1dbc      	adds	r4, r7, #6
 80052fa:	0019      	movs	r1, r3
 80052fc:	0010      	movs	r0, r2
 80052fe:	f7ff fd67 	bl	8004dd0 <ATCompare>
 8005302:	0003      	movs	r3, r0
 8005304:	7023      	strb	r3, [r4, #0]
        if(ATReceived == RECEIVE_STATUS_ERROR){
 8005306:	4b3e      	ldr	r3, [pc, #248]	@ (8005400 <ESP_WakeTest+0x21c>)
 8005308:	781b      	ldrb	r3, [r3, #0]
 800530a:	2b01      	cmp	r3, #1
 800530c:	d102      	bne.n	8005314 <ESP_WakeTest+0x130>
          TestState = ESP_TEST_SEND;
 800530e:	4b33      	ldr	r3, [pc, #204]	@ (80053dc <ESP_WakeTest+0x1f8>)
 8005310:	2201      	movs	r2, #1
 8005312:	701a      	strb	r2, [r3, #0]
        }
        if(ATReceived == RECEIVE_STATUS_RETRY){
          //TestState = ESP_TEST_SEND;
          //ESPTimeStamp = HAL_GetTick() + 2*ESP_START_UP_TIME;
        }
        if(ATReceived == RECEIVE_STATUS_UNPROGGED){
 8005314:	4b3a      	ldr	r3, [pc, #232]	@ (8005400 <ESP_WakeTest+0x21c>)
 8005316:	781b      	ldrb	r3, [r3, #0]
 8005318:	2b07      	cmp	r3, #7
 800531a:	d104      	bne.n	8005326 <ESP_WakeTest+0x142>
          StartProg();
 800531c:	f7fe ff58 	bl	80041d0 <StartProg>
          TestState = ESP_TEST_BOOT;
 8005320:	4b2e      	ldr	r3, [pc, #184]	@ (80053dc <ESP_WakeTest+0x1f8>)
 8005322:	2205      	movs	r2, #5
 8005324:	701a      	strb	r2, [r3, #0]
        }
        if(ATReceived == RECEIVE_STATUS_INCOMPLETE){
 8005326:	4b36      	ldr	r3, [pc, #216]	@ (8005400 <ESP_WakeTest+0x21c>)
 8005328:	781b      	ldrb	r3, [r3, #0]
 800532a:	2b03      	cmp	r3, #3
 800532c:	d109      	bne.n	8005342 <ESP_WakeTest+0x15e>
          ESPTimeStamp = HAL_GetTick() + 50;
 800532e:	f009 f89b 	bl	800e468 <HAL_GetTick>
 8005332:	0003      	movs	r3, r0
 8005334:	3332      	adds	r3, #50	@ 0x32
 8005336:	001a      	movs	r2, r3
 8005338:	4b2d      	ldr	r3, [pc, #180]	@ (80053f0 <ESP_WakeTest+0x20c>)
 800533a:	601a      	str	r2, [r3, #0]
          TestState = ESP_TEST_SEND;
 800533c:	4b27      	ldr	r3, [pc, #156]	@ (80053dc <ESP_WakeTest+0x1f8>)
 800533e:	2201      	movs	r2, #1
 8005340:	701a      	strb	r2, [r3, #0]
        }
        if(proceed){
 8005342:	1dbb      	adds	r3, r7, #6
 8005344:	781b      	ldrb	r3, [r3, #0]
 8005346:	2b00      	cmp	r3, #0
 8005348:	d042      	beq.n	80053d0 <ESP_WakeTest+0x1ec>
          TestState = ESP_TEST_VALIDATE;
 800534a:	4b24      	ldr	r3, [pc, #144]	@ (80053dc <ESP_WakeTest+0x1f8>)
 800534c:	2203      	movs	r2, #3
 800534e:	701a      	strb	r2, [r3, #0]
        }
      }
      break;
 8005350:	e03e      	b.n	80053d0 <ESP_WakeTest+0x1ec>

    case ESP_TEST_VALIDATE:
//      Debug("TestState: ESP_TEST_VALIDATE");
      //Set measurement completed
      TIM3 -> CCR1 = LED_OFF;
 8005352:	4b2c      	ldr	r3, [pc, #176]	@ (8005404 <ESP_WakeTest+0x220>)
 8005354:	22fa      	movs	r2, #250	@ 0xfa
 8005356:	0112      	lsls	r2, r2, #4
 8005358:	635a      	str	r2, [r3, #52]	@ 0x34
      TIM3 -> CCR2 = LED_ON;
 800535a:	4b2a      	ldr	r3, [pc, #168]	@ (8005404 <ESP_WakeTest+0x220>)
 800535c:	4a2a      	ldr	r2, [pc, #168]	@ (8005408 <ESP_WakeTest+0x224>)
 800535e:	639a      	str	r2, [r3, #56]	@ 0x38
      TIM3 -> CCR3 = LED_OFF;
 8005360:	4b28      	ldr	r3, [pc, #160]	@ (8005404 <ESP_WakeTest+0x220>)
 8005362:	22fa      	movs	r2, #250	@ 0xfa
 8005364:	0112      	lsls	r2, r2, #4
 8005366:	63da      	str	r2, [r3, #60]	@ 0x3c
      TestState = ESP_TEST_DEINIT;
 8005368:	4b1c      	ldr	r3, [pc, #112]	@ (80053dc <ESP_WakeTest+0x1f8>)
 800536a:	2204      	movs	r2, #4
 800536c:	701a      	strb	r2, [r3, #0]

      break;
 800536e:	e030      	b.n	80053d2 <ESP_WakeTest+0x1ee>

    case ESP_TEST_DEINIT:
//      Debug("TestState: ESP_TEST_DEINIT");
      testRound = false;
 8005370:	4b26      	ldr	r3, [pc, #152]	@ (800540c <ESP_WakeTest+0x228>)
 8005372:	2200      	movs	r2, #0
 8005374:	701a      	strb	r2, [r3, #0]
      EspTurnedOn = false;
 8005376:	4b1b      	ldr	r3, [pc, #108]	@ (80053e4 <ESP_WakeTest+0x200>)
 8005378:	2200      	movs	r2, #0
 800537a:	701a      	strb	r2, [r3, #0]
      HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_RESET);
 800537c:	4b1b      	ldr	r3, [pc, #108]	@ (80053ec <ESP_WakeTest+0x208>)
 800537e:	2200      	movs	r2, #0
 8005380:	2101      	movs	r1, #1
 8005382:	0018      	movs	r0, r3
 8005384:	f00a fb01 	bl	800f98a <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_RESET);
 8005388:	2380      	movs	r3, #128	@ 0x80
 800538a:	011b      	lsls	r3, r3, #4
 800538c:	4816      	ldr	r0, [pc, #88]	@ (80053e8 <ESP_WakeTest+0x204>)
 800538e:	2200      	movs	r2, #0
 8005390:	0019      	movs	r1, r3
 8005392:	f00a fafa 	bl	800f98a <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, 0);
 8005396:	4b15      	ldr	r3, [pc, #84]	@ (80053ec <ESP_WakeTest+0x208>)
 8005398:	2200      	movs	r2, #0
 800539a:	2102      	movs	r1, #2
 800539c:	0018      	movs	r0, r3
 800539e:	f00a faf4 	bl	800f98a <HAL_GPIO_WritePin>
      // Reset ESP, so we're sure that we're in the right state.
      SetESPMeasurementDone();
 80053a2:	f002 fec1 	bl	8008128 <SetESPMeasurementDone>
      break;
 80053a6:	e014      	b.n	80053d2 <ESP_WakeTest+0x1ee>

    default:
//      Debug("TestState: ESP_TEST_INIT");
      TestState = ESP_TEST_INIT;
 80053a8:	4b0c      	ldr	r3, [pc, #48]	@ (80053dc <ESP_WakeTest+0x1f8>)
 80053aa:	2200      	movs	r2, #0
 80053ac:	701a      	strb	r2, [r3, #0]
      break;
 80053ae:	e010      	b.n	80053d2 <ESP_WakeTest+0x1ee>

    case ESP_TEST_BOOT:
//      Debug("TestState: ESP_TEST_BOOT");
      TIM3 -> CCR1 = 4000;
 80053b0:	4b14      	ldr	r3, [pc, #80]	@ (8005404 <ESP_WakeTest+0x220>)
 80053b2:	22fa      	movs	r2, #250	@ 0xfa
 80053b4:	0112      	lsls	r2, r2, #4
 80053b6:	635a      	str	r2, [r3, #52]	@ 0x34
      TIM3 -> CCR2 = 4000;
 80053b8:	4b12      	ldr	r3, [pc, #72]	@ (8005404 <ESP_WakeTest+0x220>)
 80053ba:	22fa      	movs	r2, #250	@ 0xfa
 80053bc:	0112      	lsls	r2, r2, #4
 80053be:	639a      	str	r2, [r3, #56]	@ 0x38
      TIM3 -> CCR3 = 0;
 80053c0:	4b10      	ldr	r3, [pc, #64]	@ (8005404 <ESP_WakeTest+0x220>)
 80053c2:	2200      	movs	r2, #0
 80053c4:	63da      	str	r2, [r3, #60]	@ 0x3c
      //WAIT FOR RESET;
      break;
 80053c6:	e004      	b.n	80053d2 <ESP_WakeTest+0x1ee>
      break;
 80053c8:	46c0      	nop			@ (mov r8, r8)
 80053ca:	e002      	b.n	80053d2 <ESP_WakeTest+0x1ee>
      break;
 80053cc:	46c0      	nop			@ (mov r8, r8)
 80053ce:	e000      	b.n	80053d2 <ESP_WakeTest+0x1ee>
      break;
 80053d0:	46c0      	nop			@ (mov r8, r8)
  }
}
 80053d2:	46c0      	nop			@ (mov r8, r8)
 80053d4:	46bd      	mov	sp, r7
 80053d6:	b003      	add	sp, #12
 80053d8:	bd90      	pop	{r4, r7, pc}
 80053da:	46c0      	nop			@ (mov r8, r8)
 80053dc:	20000a2c 	.word	0x20000a2c
 80053e0:	080247a8 	.word	0x080247a8
 80053e4:	2000054c 	.word	0x2000054c
 80053e8:	50000800 	.word	0x50000800
 80053ec:	50001c00 	.word	0x50001c00
 80053f0:	20000a1c 	.word	0x20000a1c
 80053f4:	2000044c 	.word	0x2000044c
 80053f8:	20000a2a 	.word	0x20000a2a
 80053fc:	20000a29 	.word	0x20000a29
 8005400:	20000029 	.word	0x20000029
 8005404:	40000400 	.word	0x40000400
 8005408:	00000bb8 	.word	0x00000bb8
 800540c:	20000000 	.word	0x20000000

08005410 <ESP_Upkeep>:

ESP_States ESP_Upkeep(void) {
 8005410:	b5b0      	push	{r4, r5, r7, lr}
 8005412:	b086      	sub	sp, #24
 8005414:	af04      	add	r7, sp, #16
  bool ATSend = false;
 8005416:	1dfb      	adds	r3, r7, #7
 8005418:	2200      	movs	r2, #0
 800541a:	701a      	strb	r2, [r3, #0]
  static uint32_t timeoutTimer = 0;
  static Receive_Status ATReceived = RECEIVE_STATUS_INCOMPLETE;

  if ((EspState != oldEspState) && (GetVerboseLevel() == VERBOSE_ALL)) {
 800541c:	4be3      	ldr	r3, [pc, #908]	@ (80057ac <ESP_Upkeep+0x39c>)
 800541e:	781a      	ldrb	r2, [r3, #0]
 8005420:	4be3      	ldr	r3, [pc, #908]	@ (80057b0 <ESP_Upkeep+0x3a0>)
 8005422:	781b      	ldrb	r3, [r3, #0]
 8005424:	429a      	cmp	r2, r3
 8005426:	d024      	beq.n	8005472 <ESP_Upkeep+0x62>
 8005428:	f008 fc42 	bl	800dcb0 <GetVerboseLevel>
 800542c:	0003      	movs	r3, r0
 800542e:	2b03      	cmp	r3, #3
 8005430:	d11f      	bne.n	8005472 <ESP_Upkeep+0x62>
    oldEspState = EspState;
 8005432:	4bde      	ldr	r3, [pc, #888]	@ (80057ac <ESP_Upkeep+0x39c>)
 8005434:	781a      	ldrb	r2, [r3, #0]
 8005436:	4bde      	ldr	r3, [pc, #888]	@ (80057b0 <ESP_Upkeep+0x3a0>)
 8005438:	701a      	strb	r2, [r3, #0]
    if (!((oldEspState == 3) && (ATCommand == AT_HTTPCPOST)) ) {
 800543a:	4bdd      	ldr	r3, [pc, #884]	@ (80057b0 <ESP_Upkeep+0x3a0>)
 800543c:	781b      	ldrb	r3, [r3, #0]
 800543e:	2b03      	cmp	r3, #3
 8005440:	d103      	bne.n	800544a <ESP_Upkeep+0x3a>
 8005442:	4bdc      	ldr	r3, [pc, #880]	@ (80057b4 <ESP_Upkeep+0x3a4>)
 8005444:	781b      	ldrb	r3, [r3, #0]
 8005446:	2b0e      	cmp	r3, #14
 8005448:	d013      	beq.n	8005472 <ESP_Upkeep+0x62>
      Debug("EspState: %d ATcmd: %d Mode: %d ATExp: %d", oldEspState, ATCommand, Mode, ATExpectation);
 800544a:	4bd9      	ldr	r3, [pc, #868]	@ (80057b0 <ESP_Upkeep+0x3a0>)
 800544c:	781b      	ldrb	r3, [r3, #0]
 800544e:	001d      	movs	r5, r3
 8005450:	4bd8      	ldr	r3, [pc, #864]	@ (80057b4 <ESP_Upkeep+0x3a4>)
 8005452:	781b      	ldrb	r3, [r3, #0]
 8005454:	0018      	movs	r0, r3
 8005456:	4bd8      	ldr	r3, [pc, #864]	@ (80057b8 <ESP_Upkeep+0x3a8>)
 8005458:	781b      	ldrb	r3, [r3, #0]
 800545a:	001c      	movs	r4, r3
 800545c:	4bd7      	ldr	r3, [pc, #860]	@ (80057bc <ESP_Upkeep+0x3ac>)
 800545e:	781b      	ldrb	r3, [r3, #0]
 8005460:	4ad7      	ldr	r2, [pc, #860]	@ (80057c0 <ESP_Upkeep+0x3b0>)
 8005462:	49d8      	ldr	r1, [pc, #864]	@ (80057c4 <ESP_Upkeep+0x3b4>)
 8005464:	9302      	str	r3, [sp, #8]
 8005466:	9401      	str	r4, [sp, #4]
 8005468:	9000      	str	r0, [sp, #0]
 800546a:	002b      	movs	r3, r5
 800546c:	2003      	movs	r0, #3
 800546e:	f008 fba5 	bl	800dbbc <CreateLine>
    }
  }
  switch (EspState) {
 8005472:	4bce      	ldr	r3, [pc, #824]	@ (80057ac <ESP_Upkeep+0x39c>)
 8005474:	781b      	ldrb	r3, [r3, #0]
 8005476:	2b0f      	cmp	r3, #15
 8005478:	d901      	bls.n	800547e <ESP_Upkeep+0x6e>
 800547a:	f000 fc0e 	bl	8005c9a <ESP_Upkeep+0x88a>
 800547e:	009a      	lsls	r2, r3, #2
 8005480:	4bd1      	ldr	r3, [pc, #836]	@ (80057c8 <ESP_Upkeep+0x3b8>)
 8005482:	18d3      	adds	r3, r2, r3
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	469f      	mov	pc, r3
    case ESP_STATE_OFF:
      // Turning off the ESP
      // Disable UART

//      EspTurnedOn = false;
      EspState = ESP_STATE_IDLE;
 8005488:	4bc8      	ldr	r3, [pc, #800]	@ (80057ac <ESP_Upkeep+0x39c>)
 800548a:	2201      	movs	r2, #1
 800548c:	701a      	strb	r2, [r3, #0]
      break;
 800548e:	f000 fc1d 	bl	8005ccc <ESP_Upkeep+0x8bc>
    case ESP_STATE_IDLE:
      // Waiting for wake up call.
      break;

    case ESP_STATE_INIT:
      if(!EspTurnedOn){
 8005492:	4bce      	ldr	r3, [pc, #824]	@ (80057cc <ESP_Upkeep+0x3bc>)
 8005494:	781b      	ldrb	r3, [r3, #0]
 8005496:	2201      	movs	r2, #1
 8005498:	4053      	eors	r3, r2
 800549a:	b2db      	uxtb	r3, r3
 800549c:	2b00      	cmp	r3, #0
 800549e:	d036      	beq.n	800550e <ESP_Upkeep+0xfe>
        HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_RESET);
 80054a0:	2380      	movs	r3, #128	@ 0x80
 80054a2:	011b      	lsls	r3, r3, #4
 80054a4:	48ca      	ldr	r0, [pc, #808]	@ (80057d0 <ESP_Upkeep+0x3c0>)
 80054a6:	2200      	movs	r2, #0
 80054a8:	0019      	movs	r1, r3
 80054aa:	f00a fa6e 	bl	800f98a <HAL_GPIO_WritePin>
        HAL_Delay(1);
 80054ae:	2001      	movs	r0, #1
 80054b0:	f008 ffe4 	bl	800e47c <HAL_Delay>
        HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_SET);
 80054b4:	2380      	movs	r3, #128	@ 0x80
 80054b6:	011b      	lsls	r3, r3, #4
 80054b8:	48c5      	ldr	r0, [pc, #788]	@ (80057d0 <ESP_Upkeep+0x3c0>)
 80054ba:	2201      	movs	r2, #1
 80054bc:	0019      	movs	r1, r3
 80054be:	f00a fa64 	bl	800f98a <HAL_GPIO_WritePin>
        HAL_Delay(1);
 80054c2:	2001      	movs	r0, #1
 80054c4:	f008 ffda 	bl	800e47c <HAL_Delay>
        // Reset ESP, so we're sure that we're in the right state.
        HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_RESET);
 80054c8:	4bc2      	ldr	r3, [pc, #776]	@ (80057d4 <ESP_Upkeep+0x3c4>)
 80054ca:	2200      	movs	r2, #0
 80054cc:	2101      	movs	r1, #1
 80054ce:	0018      	movs	r0, r3
 80054d0:	f00a fa5b 	bl	800f98a <HAL_GPIO_WritePin>
        HAL_Delay(1);
 80054d4:	2001      	movs	r0, #1
 80054d6:	f008 ffd1 	bl	800e47c <HAL_Delay>
        HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, 1);
 80054da:	4bbe      	ldr	r3, [pc, #760]	@ (80057d4 <ESP_Upkeep+0x3c4>)
 80054dc:	2201      	movs	r2, #1
 80054de:	2102      	movs	r1, #2
 80054e0:	0018      	movs	r0, r3
 80054e2:	f00a fa52 	bl	800f98a <HAL_GPIO_WritePin>
        HAL_Delay(1);
 80054e6:	2001      	movs	r0, #1
 80054e8:	f008 ffc8 	bl	800e47c <HAL_Delay>
        HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_SET);
 80054ec:	4bb9      	ldr	r3, [pc, #740]	@ (80057d4 <ESP_Upkeep+0x3c4>)
 80054ee:	2201      	movs	r2, #1
 80054f0:	2101      	movs	r1, #1
 80054f2:	0018      	movs	r0, r3
 80054f4:	f00a fa49 	bl	800f98a <HAL_GPIO_WritePin>
        ESPTimeStamp = HAL_GetTick() + ESP_START_UP_TIME;
 80054f8:	f008 ffb6 	bl	800e468 <HAL_GetTick>
 80054fc:	0003      	movs	r3, r0
 80054fe:	22af      	movs	r2, #175	@ 0xaf
 8005500:	0092      	lsls	r2, r2, #2
 8005502:	189a      	adds	r2, r3, r2
 8005504:	4bb4      	ldr	r3, [pc, #720]	@ (80057d8 <ESP_Upkeep+0x3c8>)
 8005506:	601a      	str	r2, [r3, #0]
        EspTurnedOn = true;
 8005508:	4bb0      	ldr	r3, [pc, #704]	@ (80057cc <ESP_Upkeep+0x3bc>)
 800550a:	2201      	movs	r2, #1
 800550c:	701a      	strb	r2, [r3, #0]
      }
      // Wait for ESP to be ready
      // Start reading DMA buffer for AT commands
      if(ESP_Receive(RxBuffer, ESP_MAX_BUFFER_SIZE)) {
 800550e:	2380      	movs	r3, #128	@ 0x80
 8005510:	005a      	lsls	r2, r3, #1
 8005512:	4bb2      	ldr	r3, [pc, #712]	@ (80057dc <ESP_Upkeep+0x3cc>)
 8005514:	0011      	movs	r1, r2
 8005516:	0018      	movs	r0, r3
 8005518:	f7fe fad8 	bl	8003acc <ESP_Receive>
 800551c:	1e03      	subs	r3, r0, #0
 800551e:	d101      	bne.n	8005524 <ESP_Upkeep+0x114>
 8005520:	f000 fbc7 	bl	8005cb2 <ESP_Upkeep+0x8a2>
        EspState = ESP_STATE_WAIT_AWAKE;
 8005524:	4ba1      	ldr	r3, [pc, #644]	@ (80057ac <ESP_Upkeep+0x39c>)
 8005526:	220f      	movs	r2, #15
 8005528:	701a      	strb	r2, [r3, #0]
        timeoutTimer = HAL_GetTick() + 2000;
 800552a:	f008 ff9d 	bl	800e468 <HAL_GetTick>
 800552e:	0003      	movs	r3, r0
 8005530:	22fa      	movs	r2, #250	@ 0xfa
 8005532:	00d2      	lsls	r2, r2, #3
 8005534:	189a      	adds	r2, r3, r2
 8005536:	4baa      	ldr	r3, [pc, #680]	@ (80057e0 <ESP_Upkeep+0x3d0>)
 8005538:	601a      	str	r2, [r3, #0]
      }
      break;
 800553a:	f000 fbba 	bl	8005cb2 <ESP_Upkeep+0x8a2>

    case ESP_STATE_WAIT_AWAKE:
        ATReceived = DMA_ProcessBuffer(RECEIVE_EXPECTATION_READY);
 800553e:	2001      	movs	r0, #1
 8005540:	f7ff fb46 	bl	8004bd0 <DMA_ProcessBuffer>
 8005544:	0003      	movs	r3, r0
 8005546:	001a      	movs	r2, r3
 8005548:	4ba6      	ldr	r3, [pc, #664]	@ (80057e4 <ESP_Upkeep+0x3d4>)
 800554a:	701a      	strb	r2, [r3, #0]
        bool proceed = ATCompare(ATReceived, RECEIVE_EXPECTATION_READY);
 800554c:	4ba5      	ldr	r3, [pc, #660]	@ (80057e4 <ESP_Upkeep+0x3d4>)
 800554e:	781b      	ldrb	r3, [r3, #0]
 8005550:	1dbc      	adds	r4, r7, #6
 8005552:	2101      	movs	r1, #1
 8005554:	0018      	movs	r0, r3
 8005556:	f7ff fc3b 	bl	8004dd0 <ATCompare>
 800555a:	0003      	movs	r3, r0
 800555c:	7023      	strb	r3, [r4, #0]
        if(proceed || TimestampIsReached(timeoutTimer)){
 800555e:	1dbb      	adds	r3, r7, #6
 8005560:	781b      	ldrb	r3, [r3, #0]
 8005562:	2b00      	cmp	r3, #0
 8005564:	d108      	bne.n	8005578 <ESP_Upkeep+0x168>
 8005566:	4b9e      	ldr	r3, [pc, #632]	@ (80057e0 <ESP_Upkeep+0x3d0>)
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	0018      	movs	r0, r3
 800556c:	f008 fad0 	bl	800db10 <TimestampIsReached>
 8005570:	1e03      	subs	r3, r0, #0
 8005572:	d101      	bne.n	8005578 <ESP_Upkeep+0x168>
 8005574:	f000 fb9f 	bl	8005cb6 <ESP_Upkeep+0x8a6>
          EspState = ESP_STATE_MODE_SELECT;
 8005578:	4b8c      	ldr	r3, [pc, #560]	@ (80057ac <ESP_Upkeep+0x39c>)
 800557a:	220b      	movs	r2, #11
 800557c:	701a      	strb	r2, [r3, #0]
        }
        break;
 800557e:	f000 fb9a 	bl	8005cb6 <ESP_Upkeep+0x8a6>

    case ESP_STATE_MODE_SELECT:
      memset(ATCommandArray, AT_END, 9);
 8005582:	4b99      	ldr	r3, [pc, #612]	@ (80057e8 <ESP_Upkeep+0x3d8>)
 8005584:	2209      	movs	r2, #9
 8005586:	2114      	movs	r1, #20
 8005588:	0018      	movs	r0, r3
 800558a:	f01a f9af 	bl	801f8ec <memset>
      if(!InitIsDone || WifiReset){
 800558e:	4b97      	ldr	r3, [pc, #604]	@ (80057ec <ESP_Upkeep+0x3dc>)
 8005590:	781b      	ldrb	r3, [r3, #0]
 8005592:	2201      	movs	r2, #1
 8005594:	4053      	eors	r3, r2
 8005596:	b2db      	uxtb	r3, r3
 8005598:	2b00      	cmp	r3, #0
 800559a:	d103      	bne.n	80055a4 <ESP_Upkeep+0x194>
 800559c:	4b94      	ldr	r3, [pc, #592]	@ (80057f0 <ESP_Upkeep+0x3e0>)
 800559e:	781b      	ldrb	r3, [r3, #0]
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d01a      	beq.n	80055da <ESP_Upkeep+0x1ca>
        memcpy(ATCommandArray, AT_INIT, 7);
 80055a4:	4b90      	ldr	r3, [pc, #576]	@ (80057e8 <ESP_Upkeep+0x3d8>)
 80055a6:	4a93      	ldr	r2, [pc, #588]	@ (80057f4 <ESP_Upkeep+0x3e4>)
 80055a8:	6811      	ldr	r1, [r2, #0]
 80055aa:	6019      	str	r1, [r3, #0]
 80055ac:	8891      	ldrh	r1, [r2, #4]
 80055ae:	8099      	strh	r1, [r3, #4]
 80055b0:	7992      	ldrb	r2, [r2, #6]
 80055b2:	719a      	strb	r2, [r3, #6]
        EspState = ESP_STATE_SEND;
 80055b4:	4b7d      	ldr	r3, [pc, #500]	@ (80057ac <ESP_Upkeep+0x39c>)
 80055b6:	2204      	movs	r2, #4
 80055b8:	701a      	strb	r2, [r3, #0]
        ATCounter = 0;
 80055ba:	4b8f      	ldr	r3, [pc, #572]	@ (80057f8 <ESP_Upkeep+0x3e8>)
 80055bc:	2200      	movs	r2, #0
 80055be:	701a      	strb	r2, [r3, #0]
        Mode = AT_MODE_INIT;
 80055c0:	4b7d      	ldr	r3, [pc, #500]	@ (80057b8 <ESP_Upkeep+0x3a8>)
 80055c2:	2200      	movs	r2, #0
 80055c4:	701a      	strb	r2, [r3, #0]
        ATCommand = ATCommandArray[ATCounter];
 80055c6:	4b8c      	ldr	r3, [pc, #560]	@ (80057f8 <ESP_Upkeep+0x3e8>)
 80055c8:	781b      	ldrb	r3, [r3, #0]
 80055ca:	001a      	movs	r2, r3
 80055cc:	4b86      	ldr	r3, [pc, #536]	@ (80057e8 <ESP_Upkeep+0x3d8>)
 80055ce:	5c9a      	ldrb	r2, [r3, r2]
 80055d0:	4b78      	ldr	r3, [pc, #480]	@ (80057b4 <ESP_Upkeep+0x3a4>)
 80055d2:	701a      	strb	r2, [r3, #0]
        ATExpectation = RECEIVE_EXPECTATION_OK;
 80055d4:	4b79      	ldr	r3, [pc, #484]	@ (80057bc <ESP_Upkeep+0x3ac>)
 80055d6:	2200      	movs	r2, #0
 80055d8:	701a      	strb	r2, [r3, #0]
      }
      if(InitIsDone && !ConnectionMade){
 80055da:	4b84      	ldr	r3, [pc, #528]	@ (80057ec <ESP_Upkeep+0x3dc>)
 80055dc:	781b      	ldrb	r3, [r3, #0]
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d01f      	beq.n	8005622 <ESP_Upkeep+0x212>
 80055e2:	4b86      	ldr	r3, [pc, #536]	@ (80057fc <ESP_Upkeep+0x3ec>)
 80055e4:	781b      	ldrb	r3, [r3, #0]
 80055e6:	2201      	movs	r2, #1
 80055e8:	4053      	eors	r3, r2
 80055ea:	b2db      	uxtb	r3, r3
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d018      	beq.n	8005622 <ESP_Upkeep+0x212>
        memcpy(ATCommandArray, AT_WIFI_CONFIG, 6);
 80055f0:	4b7d      	ldr	r3, [pc, #500]	@ (80057e8 <ESP_Upkeep+0x3d8>)
 80055f2:	4a83      	ldr	r2, [pc, #524]	@ (8005800 <ESP_Upkeep+0x3f0>)
 80055f4:	6811      	ldr	r1, [r2, #0]
 80055f6:	6019      	str	r1, [r3, #0]
 80055f8:	8892      	ldrh	r2, [r2, #4]
 80055fa:	809a      	strh	r2, [r3, #4]
        EspState = ESP_STATE_SEND;
 80055fc:	4b6b      	ldr	r3, [pc, #428]	@ (80057ac <ESP_Upkeep+0x39c>)
 80055fe:	2204      	movs	r2, #4
 8005600:	701a      	strb	r2, [r3, #0]
        ATCounter = 0;
 8005602:	4b7d      	ldr	r3, [pc, #500]	@ (80057f8 <ESP_Upkeep+0x3e8>)
 8005604:	2200      	movs	r2, #0
 8005606:	701a      	strb	r2, [r3, #0]
        Mode = AT_MODE_CONFIG;
 8005608:	4b6b      	ldr	r3, [pc, #428]	@ (80057b8 <ESP_Upkeep+0x3a8>)
 800560a:	2201      	movs	r2, #1
 800560c:	701a      	strb	r2, [r3, #0]
        ATCommand = ATCommandArray[ATCounter];
 800560e:	4b7a      	ldr	r3, [pc, #488]	@ (80057f8 <ESP_Upkeep+0x3e8>)
 8005610:	781b      	ldrb	r3, [r3, #0]
 8005612:	001a      	movs	r2, r3
 8005614:	4b74      	ldr	r3, [pc, #464]	@ (80057e8 <ESP_Upkeep+0x3d8>)
 8005616:	5c9a      	ldrb	r2, [r3, r2]
 8005618:	4b66      	ldr	r3, [pc, #408]	@ (80057b4 <ESP_Upkeep+0x3a4>)
 800561a:	701a      	strb	r2, [r3, #0]
        ATExpectation = RECEIVE_EXPECTATION_OK;
 800561c:	4b67      	ldr	r3, [pc, #412]	@ (80057bc <ESP_Upkeep+0x3ac>)
 800561e:	2200      	movs	r2, #0
 8005620:	701a      	strb	r2, [r3, #0]
      }
      if(InitIsDone && ConnectionMade && !beursTest){
 8005622:	4b72      	ldr	r3, [pc, #456]	@ (80057ec <ESP_Upkeep+0x3dc>)
 8005624:	781b      	ldrb	r3, [r3, #0]
 8005626:	2b00      	cmp	r3, #0
 8005628:	d021      	beq.n	800566e <ESP_Upkeep+0x25e>
 800562a:	4b74      	ldr	r3, [pc, #464]	@ (80057fc <ESP_Upkeep+0x3ec>)
 800562c:	781b      	ldrb	r3, [r3, #0]
 800562e:	2b00      	cmp	r3, #0
 8005630:	d01d      	beq.n	800566e <ESP_Upkeep+0x25e>
 8005632:	4b74      	ldr	r3, [pc, #464]	@ (8005804 <ESP_Upkeep+0x3f4>)
 8005634:	781b      	ldrb	r3, [r3, #0]
 8005636:	2201      	movs	r2, #1
 8005638:	4053      	eors	r3, r2
 800563a:	b2db      	uxtb	r3, r3
 800563c:	2b00      	cmp	r3, #0
 800563e:	d016      	beq.n	800566e <ESP_Upkeep+0x25e>
        memcpy(ATCommandArray, AT_BEURSTEST, 2);
 8005640:	4b71      	ldr	r3, [pc, #452]	@ (8005808 <ESP_Upkeep+0x3f8>)
 8005642:	881a      	ldrh	r2, [r3, #0]
 8005644:	4b68      	ldr	r3, [pc, #416]	@ (80057e8 <ESP_Upkeep+0x3d8>)
 8005646:	801a      	strh	r2, [r3, #0]
        EspState = ESP_STATE_SEND;
 8005648:	4b58      	ldr	r3, [pc, #352]	@ (80057ac <ESP_Upkeep+0x39c>)
 800564a:	2204      	movs	r2, #4
 800564c:	701a      	strb	r2, [r3, #0]
        ATCounter = 0;
 800564e:	4b6a      	ldr	r3, [pc, #424]	@ (80057f8 <ESP_Upkeep+0x3e8>)
 8005650:	2200      	movs	r2, #0
 8005652:	701a      	strb	r2, [r3, #0]
        Mode = AT_MODE_TEST;
 8005654:	4b58      	ldr	r3, [pc, #352]	@ (80057b8 <ESP_Upkeep+0x3a8>)
 8005656:	2204      	movs	r2, #4
 8005658:	701a      	strb	r2, [r3, #0]
        ATCommand = ATCommandArray[ATCounter];
 800565a:	4b67      	ldr	r3, [pc, #412]	@ (80057f8 <ESP_Upkeep+0x3e8>)
 800565c:	781b      	ldrb	r3, [r3, #0]
 800565e:	001a      	movs	r2, r3
 8005660:	4b61      	ldr	r3, [pc, #388]	@ (80057e8 <ESP_Upkeep+0x3d8>)
 8005662:	5c9a      	ldrb	r2, [r3, r2]
 8005664:	4b53      	ldr	r3, [pc, #332]	@ (80057b4 <ESP_Upkeep+0x3a4>)
 8005666:	701a      	strb	r2, [r3, #0]
        ATExpectation = RECEIVE_EXPECTATION_OK;
 8005668:	4b54      	ldr	r3, [pc, #336]	@ (80057bc <ESP_Upkeep+0x3ac>)
 800566a:	2200      	movs	r2, #0
 800566c:	701a      	strb	r2, [r3, #0]
      }
      if(InitIsDone && ConnectionMade && beursTest && !setTime){
 800566e:	4b5f      	ldr	r3, [pc, #380]	@ (80057ec <ESP_Upkeep+0x3dc>)
 8005670:	781b      	ldrb	r3, [r3, #0]
 8005672:	2b00      	cmp	r3, #0
 8005674:	d02e      	beq.n	80056d4 <ESP_Upkeep+0x2c4>
 8005676:	4b61      	ldr	r3, [pc, #388]	@ (80057fc <ESP_Upkeep+0x3ec>)
 8005678:	781b      	ldrb	r3, [r3, #0]
 800567a:	2b00      	cmp	r3, #0
 800567c:	d02a      	beq.n	80056d4 <ESP_Upkeep+0x2c4>
 800567e:	4b61      	ldr	r3, [pc, #388]	@ (8005804 <ESP_Upkeep+0x3f4>)
 8005680:	781b      	ldrb	r3, [r3, #0]
 8005682:	2b00      	cmp	r3, #0
 8005684:	d026      	beq.n	80056d4 <ESP_Upkeep+0x2c4>
 8005686:	4b61      	ldr	r3, [pc, #388]	@ (800580c <ESP_Upkeep+0x3fc>)
 8005688:	781b      	ldrb	r3, [r3, #0]
 800568a:	2201      	movs	r2, #1
 800568c:	4053      	eors	r3, r2
 800568e:	b2db      	uxtb	r3, r3
 8005690:	2b00      	cmp	r3, #0
 8005692:	d01f      	beq.n	80056d4 <ESP_Upkeep+0x2c4>
        memcpy(ATCommandArray, AT_SEND, 3);
 8005694:	4b54      	ldr	r3, [pc, #336]	@ (80057e8 <ESP_Upkeep+0x3d8>)
 8005696:	4a5e      	ldr	r2, [pc, #376]	@ (8005810 <ESP_Upkeep+0x400>)
 8005698:	8811      	ldrh	r1, [r2, #0]
 800569a:	8019      	strh	r1, [r3, #0]
 800569c:	7892      	ldrb	r2, [r2, #2]
 800569e:	709a      	strb	r2, [r3, #2]
        EspState = ESP_STATE_SEND;
 80056a0:	4b42      	ldr	r3, [pc, #264]	@ (80057ac <ESP_Upkeep+0x39c>)
 80056a2:	2204      	movs	r2, #4
 80056a4:	701a      	strb	r2, [r3, #0]
        ATCounter = 0;
 80056a6:	4b54      	ldr	r3, [pc, #336]	@ (80057f8 <ESP_Upkeep+0x3e8>)
 80056a8:	2200      	movs	r2, #0
 80056aa:	701a      	strb	r2, [r3, #0]
        Mode = AT_MODE_SEND;
 80056ac:	4b42      	ldr	r3, [pc, #264]	@ (80057b8 <ESP_Upkeep+0x3a8>)
 80056ae:	2202      	movs	r2, #2
 80056b0:	701a      	strb	r2, [r3, #0]
        start = HAL_GetTick();
 80056b2:	f008 fed9 	bl	800e468 <HAL_GetTick>
 80056b6:	0002      	movs	r2, r0
 80056b8:	4b56      	ldr	r3, [pc, #344]	@ (8005814 <ESP_Upkeep+0x404>)
 80056ba:	601a      	str	r2, [r3, #0]
        SetESPIndicator();
 80056bc:	f007 fbbc 	bl	800ce38 <SetESPIndicator>
        ATCommand = ATCommandArray[ATCounter];
 80056c0:	4b4d      	ldr	r3, [pc, #308]	@ (80057f8 <ESP_Upkeep+0x3e8>)
 80056c2:	781b      	ldrb	r3, [r3, #0]
 80056c4:	001a      	movs	r2, r3
 80056c6:	4b48      	ldr	r3, [pc, #288]	@ (80057e8 <ESP_Upkeep+0x3d8>)
 80056c8:	5c9a      	ldrb	r2, [r3, r2]
 80056ca:	4b3a      	ldr	r3, [pc, #232]	@ (80057b4 <ESP_Upkeep+0x3a4>)
 80056cc:	701a      	strb	r2, [r3, #0]
        ATExpectation = RECEIVE_EXPECTATION_OK;
 80056ce:	4b3b      	ldr	r3, [pc, #236]	@ (80057bc <ESP_Upkeep+0x3ac>)
 80056d0:	2200      	movs	r2, #0
 80056d2:	701a      	strb	r2, [r3, #0]
      }
      if(ReconfigSet){
 80056d4:	4b50      	ldr	r3, [pc, #320]	@ (8005818 <ESP_Upkeep+0x408>)
 80056d6:	781b      	ldrb	r3, [r3, #0]
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d022      	beq.n	8005722 <ESP_Upkeep+0x312>
        memcpy(ATCommandArray, AT_WIFI_RECONFIG, 5);
 80056dc:	4b42      	ldr	r3, [pc, #264]	@ (80057e8 <ESP_Upkeep+0x3d8>)
 80056de:	4a4f      	ldr	r2, [pc, #316]	@ (800581c <ESP_Upkeep+0x40c>)
 80056e0:	6811      	ldr	r1, [r2, #0]
 80056e2:	6019      	str	r1, [r3, #0]
 80056e4:	7912      	ldrb	r2, [r2, #4]
 80056e6:	711a      	strb	r2, [r3, #4]
        Debug("Reconfig mode voor local wifi config selected");
 80056e8:	4a4d      	ldr	r2, [pc, #308]	@ (8005820 <ESP_Upkeep+0x410>)
 80056ea:	4b36      	ldr	r3, [pc, #216]	@ (80057c4 <ESP_Upkeep+0x3b4>)
 80056ec:	0019      	movs	r1, r3
 80056ee:	2003      	movs	r0, #3
 80056f0:	f008 fa64 	bl	800dbbc <CreateLine>
        DisableConnectedDevices();
 80056f4:	f002 ff4a 	bl	800858c <DisableConnectedDevices>
        EspState = ESP_STATE_SEND;
 80056f8:	4b2c      	ldr	r3, [pc, #176]	@ (80057ac <ESP_Upkeep+0x39c>)
 80056fa:	2204      	movs	r2, #4
 80056fc:	701a      	strb	r2, [r3, #0]
        ATCounter = 0;
 80056fe:	4b3e      	ldr	r3, [pc, #248]	@ (80057f8 <ESP_Upkeep+0x3e8>)
 8005700:	2200      	movs	r2, #0
 8005702:	701a      	strb	r2, [r3, #0]
        Mode = AT_MODE_RECONFIG;
 8005704:	4b2c      	ldr	r3, [pc, #176]	@ (80057b8 <ESP_Upkeep+0x3a8>)
 8005706:	2203      	movs	r2, #3
 8005708:	701a      	strb	r2, [r3, #0]
        SetESPIndicator();
 800570a:	f007 fb95 	bl	800ce38 <SetESPIndicator>
        ATCommand = ATCommandArray[ATCounter];
 800570e:	4b3a      	ldr	r3, [pc, #232]	@ (80057f8 <ESP_Upkeep+0x3e8>)
 8005710:	781b      	ldrb	r3, [r3, #0]
 8005712:	001a      	movs	r2, r3
 8005714:	4b34      	ldr	r3, [pc, #208]	@ (80057e8 <ESP_Upkeep+0x3d8>)
 8005716:	5c9a      	ldrb	r2, [r3, r2]
 8005718:	4b26      	ldr	r3, [pc, #152]	@ (80057b4 <ESP_Upkeep+0x3a4>)
 800571a:	701a      	strb	r2, [r3, #0]
        ATExpectation = RECEIVE_EXPECTATION_OK;
 800571c:	4b27      	ldr	r3, [pc, #156]	@ (80057bc <ESP_Upkeep+0x3ac>)
 800571e:	2200      	movs	r2, #0
 8005720:	701a      	strb	r2, [r3, #0]
      }
      if(InitIsDone && ConnectionMade && beursTest && setTime){
 8005722:	4b32      	ldr	r3, [pc, #200]	@ (80057ec <ESP_Upkeep+0x3dc>)
 8005724:	781b      	ldrb	r3, [r3, #0]
 8005726:	2b00      	cmp	r3, #0
 8005728:	d100      	bne.n	800572c <ESP_Upkeep+0x31c>
 800572a:	e2c6      	b.n	8005cba <ESP_Upkeep+0x8aa>
 800572c:	4b33      	ldr	r3, [pc, #204]	@ (80057fc <ESP_Upkeep+0x3ec>)
 800572e:	781b      	ldrb	r3, [r3, #0]
 8005730:	2b00      	cmp	r3, #0
 8005732:	d100      	bne.n	8005736 <ESP_Upkeep+0x326>
 8005734:	e2c1      	b.n	8005cba <ESP_Upkeep+0x8aa>
 8005736:	4b33      	ldr	r3, [pc, #204]	@ (8005804 <ESP_Upkeep+0x3f4>)
 8005738:	781b      	ldrb	r3, [r3, #0]
 800573a:	2b00      	cmp	r3, #0
 800573c:	d100      	bne.n	8005740 <ESP_Upkeep+0x330>
 800573e:	e2bc      	b.n	8005cba <ESP_Upkeep+0x8aa>
 8005740:	4b32      	ldr	r3, [pc, #200]	@ (800580c <ESP_Upkeep+0x3fc>)
 8005742:	781b      	ldrb	r3, [r3, #0]
 8005744:	2b00      	cmp	r3, #0
 8005746:	d100      	bne.n	800574a <ESP_Upkeep+0x33a>
 8005748:	e2b7      	b.n	8005cba <ESP_Upkeep+0x8aa>
        memcpy(ATCommandArray, AT_SNTP, 4);
 800574a:	4b36      	ldr	r3, [pc, #216]	@ (8005824 <ESP_Upkeep+0x414>)
 800574c:	681a      	ldr	r2, [r3, #0]
 800574e:	4b26      	ldr	r3, [pc, #152]	@ (80057e8 <ESP_Upkeep+0x3d8>)
 8005750:	601a      	str	r2, [r3, #0]
        EspState = ESP_STATE_SEND;
 8005752:	4b16      	ldr	r3, [pc, #88]	@ (80057ac <ESP_Upkeep+0x39c>)
 8005754:	2204      	movs	r2, #4
 8005756:	701a      	strb	r2, [r3, #0]
        ATCounter = 0;
 8005758:	4b27      	ldr	r3, [pc, #156]	@ (80057f8 <ESP_Upkeep+0x3e8>)
 800575a:	2200      	movs	r2, #0
 800575c:	701a      	strb	r2, [r3, #0]
        Mode = AT_MODE_GETTIME;
 800575e:	4b16      	ldr	r3, [pc, #88]	@ (80057b8 <ESP_Upkeep+0x3a8>)
 8005760:	2205      	movs	r2, #5
 8005762:	701a      	strb	r2, [r3, #0]
        start = HAL_GetTick();
 8005764:	f008 fe80 	bl	800e468 <HAL_GetTick>
 8005768:	0002      	movs	r2, r0
 800576a:	4b2a      	ldr	r3, [pc, #168]	@ (8005814 <ESP_Upkeep+0x404>)
 800576c:	601a      	str	r2, [r3, #0]
        SetESPIndicator();
 800576e:	f007 fb63 	bl	800ce38 <SetESPIndicator>
        ATCommand = ATCommandArray[ATCounter];
 8005772:	4b21      	ldr	r3, [pc, #132]	@ (80057f8 <ESP_Upkeep+0x3e8>)
 8005774:	781b      	ldrb	r3, [r3, #0]
 8005776:	001a      	movs	r2, r3
 8005778:	4b1b      	ldr	r3, [pc, #108]	@ (80057e8 <ESP_Upkeep+0x3d8>)
 800577a:	5c9a      	ldrb	r2, [r3, r2]
 800577c:	4b0d      	ldr	r3, [pc, #52]	@ (80057b4 <ESP_Upkeep+0x3a4>)
 800577e:	701a      	strb	r2, [r3, #0]
        ATExpectation = RECEIVE_EXPECTATION_OK;
 8005780:	4b0e      	ldr	r3, [pc, #56]	@ (80057bc <ESP_Upkeep+0x3ac>)
 8005782:	2200      	movs	r2, #0
 8005784:	701a      	strb	r2, [r3, #0]
      }
    break;
 8005786:	e298      	b.n	8005cba <ESP_Upkeep+0x8aa>

    case ESP_STATE_SEND:
        ATSend = AT_Send(ATCommand);
 8005788:	4b0a      	ldr	r3, [pc, #40]	@ (80057b4 <ESP_Upkeep+0x3a4>)
 800578a:	781b      	ldrb	r3, [r3, #0]
 800578c:	1dfc      	adds	r4, r7, #7
 800578e:	0018      	movs	r0, r3
 8005790:	f7ff fb60 	bl	8004e54 <AT_Send>
 8005794:	0003      	movs	r3, r0
 8005796:	7023      	strb	r3, [r4, #0]
        if(ATSend){
 8005798:	1dfb      	adds	r3, r7, #7
 800579a:	781b      	ldrb	r3, [r3, #0]
 800579c:	2b00      	cmp	r3, #0
 800579e:	d100      	bne.n	80057a2 <ESP_Upkeep+0x392>
 80057a0:	e28d      	b.n	8005cbe <ESP_Upkeep+0x8ae>
          EspState = ESP_STATE_WAIT_FOR_REPLY;
 80057a2:	4b02      	ldr	r3, [pc, #8]	@ (80057ac <ESP_Upkeep+0x39c>)
 80057a4:	2203      	movs	r2, #3
 80057a6:	701a      	strb	r2, [r3, #0]
        }
    break;
 80057a8:	e289      	b.n	8005cbe <ESP_Upkeep+0x8ae>
 80057aa:	46c0      	nop			@ (mov r8, r8)
 80057ac:	20000028 	.word	0x20000028
 80057b0:	20000002 	.word	0x20000002
 80057b4:	20000a2a 	.word	0x20000a2a
 80057b8:	20000a2b 	.word	0x20000a2b
 80057bc:	20000a29 	.word	0x20000a29
 80057c0:	08023188 	.word	0x08023188
 80057c4:	08022850 	.word	0x08022850
 80057c8:	080247c0 	.word	0x080247c0
 80057cc:	2000054c 	.word	0x2000054c
 80057d0:	50000800 	.word	0x50000800
 80057d4:	50001c00 	.word	0x50001c00
 80057d8:	20000a1c 	.word	0x20000a1c
 80057dc:	2000044c 	.word	0x2000044c
 80057e0:	20000b3c 	.word	0x20000b3c
 80057e4:	2000002a 	.word	0x2000002a
 80057e8:	20000a0c 	.word	0x20000a0c
 80057ec:	2000054d 	.word	0x2000054d
 80057f0:	2000054e 	.word	0x2000054e
 80057f4:	20000004 	.word	0x20000004
 80057f8:	20000a16 	.word	0x20000a16
 80057fc:	20000550 	.word	0x20000550
 8005800:	20000014 	.word	0x20000014
 8005804:	20000551 	.word	0x20000551
 8005808:	20000010 	.word	0x20000010
 800580c:	20000001 	.word	0x20000001
 8005810:	2000000c 	.word	0x2000000c
 8005814:	20000560 	.word	0x20000560
 8005818:	2000054f 	.word	0x2000054f
 800581c:	2000001c 	.word	0x2000001c
 8005820:	080231b4 	.word	0x080231b4
 8005824:	20000024 	.word	0x20000024

    case ESP_STATE_WAIT_FOR_REPLY:
      if(TimestampIsReached(ESPTimeStamp)){
 8005828:	4be1      	ldr	r3, [pc, #900]	@ (8005bb0 <ESP_Upkeep+0x7a0>)
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	0018      	movs	r0, r3
 800582e:	f008 f96f 	bl	800db10 <TimestampIsReached>
 8005832:	1e03      	subs	r3, r0, #0
 8005834:	d100      	bne.n	8005838 <ESP_Upkeep+0x428>
 8005836:	e244      	b.n	8005cc2 <ESP_Upkeep+0x8b2>
        ATReceived = DMA_ProcessBuffer(ATExpectation);
 8005838:	4bde      	ldr	r3, [pc, #888]	@ (8005bb4 <ESP_Upkeep+0x7a4>)
 800583a:	781b      	ldrb	r3, [r3, #0]
 800583c:	0018      	movs	r0, r3
 800583e:	f7ff f9c7 	bl	8004bd0 <DMA_ProcessBuffer>
 8005842:	0003      	movs	r3, r0
 8005844:	001a      	movs	r2, r3
 8005846:	4bdc      	ldr	r3, [pc, #880]	@ (8005bb8 <ESP_Upkeep+0x7a8>)
 8005848:	701a      	strb	r2, [r3, #0]
        bool proceed = ATCompare(ATReceived, ATExpectation);
 800584a:	4bdb      	ldr	r3, [pc, #876]	@ (8005bb8 <ESP_Upkeep+0x7a8>)
 800584c:	781a      	ldrb	r2, [r3, #0]
 800584e:	4bd9      	ldr	r3, [pc, #868]	@ (8005bb4 <ESP_Upkeep+0x7a4>)
 8005850:	781b      	ldrb	r3, [r3, #0]
 8005852:	1d7c      	adds	r4, r7, #5
 8005854:	0019      	movs	r1, r3
 8005856:	0010      	movs	r0, r2
 8005858:	f7ff faba 	bl	8004dd0 <ATCompare>
 800585c:	0003      	movs	r3, r0
 800585e:	7023      	strb	r3, [r4, #0]
        if(ATReceived == RECEIVE_STATUS_ERROR){
 8005860:	4bd5      	ldr	r3, [pc, #852]	@ (8005bb8 <ESP_Upkeep+0x7a8>)
 8005862:	781b      	ldrb	r3, [r3, #0]
 8005864:	2b01      	cmp	r3, #1
 8005866:	d139      	bne.n	80058dc <ESP_Upkeep+0x4cc>
          if(ATCommand == AT_SENDDATA){
 8005868:	4bd4      	ldr	r3, [pc, #848]	@ (8005bbc <ESP_Upkeep+0x7ac>)
 800586a:	781b      	ldrb	r3, [r3, #0]
 800586c:	2b0f      	cmp	r3, #15
 800586e:	d108      	bne.n	8005882 <ESP_Upkeep+0x472>
            ATCommand = AT_HTTPCPOST;
 8005870:	4bd2      	ldr	r3, [pc, #840]	@ (8005bbc <ESP_Upkeep+0x7ac>)
 8005872:	220e      	movs	r2, #14
 8005874:	701a      	strb	r2, [r3, #0]
            ATExpectation = RECEIVE_EXPECTATION_START;
 8005876:	4bcf      	ldr	r3, [pc, #828]	@ (8005bb4 <ESP_Upkeep+0x7a4>)
 8005878:	2202      	movs	r2, #2
 800587a:	701a      	strb	r2, [r3, #0]
            ATCounter = 1;
 800587c:	4bd0      	ldr	r3, [pc, #832]	@ (8005bc0 <ESP_Upkeep+0x7b0>)
 800587e:	2201      	movs	r2, #1
 8005880:	701a      	strb	r2, [r3, #0]
          }
          EspState = ESP_STATE_SEND;
 8005882:	4bd0      	ldr	r3, [pc, #832]	@ (8005bc4 <ESP_Upkeep+0x7b4>)
 8005884:	2204      	movs	r2, #4
 8005886:	701a      	strb	r2, [r3, #0]
          errorcntr++;
 8005888:	4bcf      	ldr	r3, [pc, #828]	@ (8005bc8 <ESP_Upkeep+0x7b8>)
 800588a:	781b      	ldrb	r3, [r3, #0]
 800588c:	3301      	adds	r3, #1
 800588e:	b2da      	uxtb	r2, r3
 8005890:	4bcd      	ldr	r3, [pc, #820]	@ (8005bc8 <ESP_Upkeep+0x7b8>)
 8005892:	701a      	strb	r2, [r3, #0]
          if (errorcntr == ESP_MAX_RETRANSMITIONS) {
 8005894:	4bcc      	ldr	r3, [pc, #816]	@ (8005bc8 <ESP_Upkeep+0x7b8>)
 8005896:	781b      	ldrb	r3, [r3, #0]
 8005898:	2b03      	cmp	r3, #3
 800589a:	d11f      	bne.n	80058dc <ESP_Upkeep+0x4cc>
            ESPTimeStamp = HAL_GetTick() + ESP_UNTIL_NEXT_SEND;
 800589c:	f008 fde4 	bl	800e468 <HAL_GetTick>
 80058a0:	0003      	movs	r3, r0
 80058a2:	4aca      	ldr	r2, [pc, #808]	@ (8005bcc <ESP_Upkeep+0x7bc>)
 80058a4:	189a      	adds	r2, r3, r2
 80058a6:	4bc2      	ldr	r3, [pc, #776]	@ (8005bb0 <ESP_Upkeep+0x7a0>)
 80058a8:	601a      	str	r2, [r3, #0]
            ESPTransmitDone = true;
 80058aa:	4bc9      	ldr	r3, [pc, #804]	@ (8005bd0 <ESP_Upkeep+0x7c0>)
 80058ac:	2201      	movs	r2, #1
 80058ae:	701a      	strb	r2, [r3, #0]
            ResetESPIndicator();
 80058b0:	f007 fada 	bl	800ce68 <ResetESPIndicator>
            clearDMABuffer();
 80058b4:	f7ff fa7e 	bl	8004db4 <clearDMABuffer>
            stop = HAL_GetTick();
 80058b8:	f008 fdd6 	bl	800e468 <HAL_GetTick>
 80058bc:	0002      	movs	r2, r0
 80058be:	4bc5      	ldr	r3, [pc, #788]	@ (8005bd4 <ESP_Upkeep+0x7c4>)
 80058c0:	601a      	str	r2, [r3, #0]
            Error("ESP to many retransmits, terminated after %lu ms", (stop-start));
 80058c2:	4bc4      	ldr	r3, [pc, #784]	@ (8005bd4 <ESP_Upkeep+0x7c4>)
 80058c4:	681a      	ldr	r2, [r3, #0]
 80058c6:	4bc4      	ldr	r3, [pc, #784]	@ (8005bd8 <ESP_Upkeep+0x7c8>)
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	1ad3      	subs	r3, r2, r3
 80058cc:	4ac3      	ldr	r2, [pc, #780]	@ (8005bdc <ESP_Upkeep+0x7cc>)
 80058ce:	49c4      	ldr	r1, [pc, #784]	@ (8005be0 <ESP_Upkeep+0x7d0>)
 80058d0:	2001      	movs	r0, #1
 80058d2:	f008 f973 	bl	800dbbc <CreateLine>
            EspState = ESP_STATE_DEINIT;
 80058d6:	4bbb      	ldr	r3, [pc, #748]	@ (8005bc4 <ESP_Upkeep+0x7b4>)
 80058d8:	220d      	movs	r2, #13
 80058da:	701a      	strb	r2, [r3, #0]
          }
        }
        if(ATReceived == RECEIVE_STATUS_INCOMPLETE){
 80058dc:	4bb6      	ldr	r3, [pc, #728]	@ (8005bb8 <ESP_Upkeep+0x7a8>)
 80058de:	781b      	ldrb	r3, [r3, #0]
 80058e0:	2b03      	cmp	r3, #3
 80058e2:	d106      	bne.n	80058f2 <ESP_Upkeep+0x4e2>
          ESPTimeStamp = HAL_GetTick() + 10;
 80058e4:	f008 fdc0 	bl	800e468 <HAL_GetTick>
 80058e8:	0003      	movs	r3, r0
 80058ea:	330a      	adds	r3, #10
 80058ec:	001a      	movs	r2, r3
 80058ee:	4bb0      	ldr	r3, [pc, #704]	@ (8005bb0 <ESP_Upkeep+0x7a0>)
 80058f0:	601a      	str	r2, [r3, #0]
        }
        if(ATReceived == RECEIVE_STATUS_LOOP){
 80058f2:	4bb1      	ldr	r3, [pc, #708]	@ (8005bb8 <ESP_Upkeep+0x7a8>)
 80058f4:	781b      	ldrb	r3, [r3, #0]
 80058f6:	2b0a      	cmp	r3, #10
 80058f8:	d106      	bne.n	8005908 <ESP_Upkeep+0x4f8>
          ESPTimeStamp = HAL_GetTick() + 10;
 80058fa:	f008 fdb5 	bl	800e468 <HAL_GetTick>
 80058fe:	0003      	movs	r3, r0
 8005900:	330a      	adds	r3, #10
 8005902:	001a      	movs	r2, r3
 8005904:	4baa      	ldr	r3, [pc, #680]	@ (8005bb0 <ESP_Upkeep+0x7a0>)
 8005906:	601a      	str	r2, [r3, #0]
        }
        if(ATReceived == RECEIVE_STATUS_TIMEOUT){
 8005908:	4bab      	ldr	r3, [pc, #684]	@ (8005bb8 <ESP_Upkeep+0x7a8>)
 800590a:	781b      	ldrb	r3, [r3, #0]
 800590c:	2b06      	cmp	r3, #6
 800590e:	d146      	bne.n	800599e <ESP_Upkeep+0x58e>
          timeoutcntr++;
 8005910:	4bb4      	ldr	r3, [pc, #720]	@ (8005be4 <ESP_Upkeep+0x7d4>)
 8005912:	781b      	ldrb	r3, [r3, #0]
 8005914:	3301      	adds	r3, #1
 8005916:	b2da      	uxtb	r2, r3
 8005918:	4bb2      	ldr	r3, [pc, #712]	@ (8005be4 <ESP_Upkeep+0x7d4>)
 800591a:	701a      	strb	r2, [r3, #0]
          if (timeoutcntr == ESP_MAX_RETRANSMITIONS) {
 800591c:	4bb1      	ldr	r3, [pc, #708]	@ (8005be4 <ESP_Upkeep+0x7d4>)
 800591e:	781b      	ldrb	r3, [r3, #0]
 8005920:	2b03      	cmp	r3, #3
 8005922:	d125      	bne.n	8005970 <ESP_Upkeep+0x560>
            ESPTimeStamp = HAL_GetTick() + ESP_UNTIL_NEXT_SEND;
 8005924:	f008 fda0 	bl	800e468 <HAL_GetTick>
 8005928:	0003      	movs	r3, r0
 800592a:	4aa8      	ldr	r2, [pc, #672]	@ (8005bcc <ESP_Upkeep+0x7bc>)
 800592c:	189a      	adds	r2, r3, r2
 800592e:	4ba0      	ldr	r3, [pc, #640]	@ (8005bb0 <ESP_Upkeep+0x7a0>)
 8005930:	601a      	str	r2, [r3, #0]
            ESPTransmitDone = true;
 8005932:	4ba7      	ldr	r3, [pc, #668]	@ (8005bd0 <ESP_Upkeep+0x7c0>)
 8005934:	2201      	movs	r2, #1
 8005936:	701a      	strb	r2, [r3, #0]
            ResetESPIndicator();
 8005938:	f007 fa96 	bl	800ce68 <ResetESPIndicator>
            clearDMABuffer();
 800593c:	f7ff fa3a 	bl	8004db4 <clearDMABuffer>
            stop = HAL_GetTick();
 8005940:	f008 fd92 	bl	800e468 <HAL_GetTick>
 8005944:	0002      	movs	r2, r0
 8005946:	4ba3      	ldr	r3, [pc, #652]	@ (8005bd4 <ESP_Upkeep+0x7c4>)
 8005948:	601a      	str	r2, [r3, #0]
            Error("ESP to many timeouts, terminated after %lu ms", (stop-start));
 800594a:	4ba2      	ldr	r3, [pc, #648]	@ (8005bd4 <ESP_Upkeep+0x7c4>)
 800594c:	681a      	ldr	r2, [r3, #0]
 800594e:	4ba2      	ldr	r3, [pc, #648]	@ (8005bd8 <ESP_Upkeep+0x7c8>)
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	1ad3      	subs	r3, r2, r3
 8005954:	4aa4      	ldr	r2, [pc, #656]	@ (8005be8 <ESP_Upkeep+0x7d8>)
 8005956:	49a2      	ldr	r1, [pc, #648]	@ (8005be0 <ESP_Upkeep+0x7d0>)
 8005958:	2001      	movs	r0, #1
 800595a:	f008 f92f 	bl	800dbbc <CreateLine>
            EspState = ESP_STATE_DEINIT;
 800595e:	4b99      	ldr	r3, [pc, #612]	@ (8005bc4 <ESP_Upkeep+0x7b4>)
 8005960:	220d      	movs	r2, #13
 8005962:	701a      	strb	r2, [r3, #0]
            ATCommand = AT_END;
 8005964:	4b95      	ldr	r3, [pc, #596]	@ (8005bbc <ESP_Upkeep+0x7ac>)
 8005966:	2214      	movs	r2, #20
 8005968:	701a      	strb	r2, [r3, #0]
            ATExpectation = RECEIVE_EXPECTATION_OK;
 800596a:	4b92      	ldr	r3, [pc, #584]	@ (8005bb4 <ESP_Upkeep+0x7a4>)
 800596c:	2200      	movs	r2, #0
 800596e:	701a      	strb	r2, [r3, #0]
          }
          if(ATCommand != AT_SENDDATA){
 8005970:	4b92      	ldr	r3, [pc, #584]	@ (8005bbc <ESP_Upkeep+0x7ac>)
 8005972:	781b      	ldrb	r3, [r3, #0]
 8005974:	2b0f      	cmp	r3, #15
 8005976:	d003      	beq.n	8005980 <ESP_Upkeep+0x570>
            EspState = ESP_STATE_SEND;
 8005978:	4b92      	ldr	r3, [pc, #584]	@ (8005bc4 <ESP_Upkeep+0x7b4>)
 800597a:	2204      	movs	r2, #4
 800597c:	701a      	strb	r2, [r3, #0]
 800597e:	e00e      	b.n	800599e <ESP_Upkeep+0x58e>
          }
          else{
            ATCommand = AT_HTTPCPOST;
 8005980:	4b8e      	ldr	r3, [pc, #568]	@ (8005bbc <ESP_Upkeep+0x7ac>)
 8005982:	220e      	movs	r2, #14
 8005984:	701a      	strb	r2, [r3, #0]
            ATCounter -= 1;
 8005986:	4b8e      	ldr	r3, [pc, #568]	@ (8005bc0 <ESP_Upkeep+0x7b0>)
 8005988:	781b      	ldrb	r3, [r3, #0]
 800598a:	3b01      	subs	r3, #1
 800598c:	b2da      	uxtb	r2, r3
 800598e:	4b8c      	ldr	r3, [pc, #560]	@ (8005bc0 <ESP_Upkeep+0x7b0>)
 8005990:	701a      	strb	r2, [r3, #0]
            ATExpectation = RECEIVE_EXPECTATION_START;
 8005992:	4b88      	ldr	r3, [pc, #544]	@ (8005bb4 <ESP_Upkeep+0x7a4>)
 8005994:	2202      	movs	r2, #2
 8005996:	701a      	strb	r2, [r3, #0]
            EspState = ESP_STATE_SEND;
 8005998:	4b8a      	ldr	r3, [pc, #552]	@ (8005bc4 <ESP_Upkeep+0x7b4>)
 800599a:	2204      	movs	r2, #4
 800599c:	701a      	strb	r2, [r3, #0]
          }
        }
        if(proceed){
 800599e:	1d7b      	adds	r3, r7, #5
 80059a0:	781b      	ldrb	r3, [r3, #0]
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d100      	bne.n	80059a8 <ESP_Upkeep+0x598>
 80059a6:	e18c      	b.n	8005cc2 <ESP_Upkeep+0x8b2>
          EspState = ESP_STATE_NEXT_AT;
 80059a8:	4b86      	ldr	r3, [pc, #536]	@ (8005bc4 <ESP_Upkeep+0x7b4>)
 80059aa:	2205      	movs	r2, #5
 80059ac:	701a      	strb	r2, [r3, #0]
        }
      }
      break;
 80059ae:	e188      	b.n	8005cc2 <ESP_Upkeep+0x8b2>

    case ESP_STATE_NEXT_AT:
      ATCounter += 1;
 80059b0:	4b83      	ldr	r3, [pc, #524]	@ (8005bc0 <ESP_Upkeep+0x7b0>)
 80059b2:	781b      	ldrb	r3, [r3, #0]
 80059b4:	3301      	adds	r3, #1
 80059b6:	b2da      	uxtb	r2, r3
 80059b8:	4b81      	ldr	r3, [pc, #516]	@ (8005bc0 <ESP_Upkeep+0x7b0>)
 80059ba:	701a      	strb	r2, [r3, #0]
      ATCommand = ATCommandArray[ATCounter];
 80059bc:	4b80      	ldr	r3, [pc, #512]	@ (8005bc0 <ESP_Upkeep+0x7b0>)
 80059be:	781b      	ldrb	r3, [r3, #0]
 80059c0:	001a      	movs	r2, r3
 80059c2:	4b8a      	ldr	r3, [pc, #552]	@ (8005bec <ESP_Upkeep+0x7dc>)
 80059c4:	5c9a      	ldrb	r2, [r3, r2]
 80059c6:	4b7d      	ldr	r3, [pc, #500]	@ (8005bbc <ESP_Upkeep+0x7ac>)
 80059c8:	701a      	strb	r2, [r3, #0]
      if(ATCommand == AT_RESTORE){
 80059ca:	4b7c      	ldr	r3, [pc, #496]	@ (8005bbc <ESP_Upkeep+0x7ac>)
 80059cc:	781b      	ldrb	r3, [r3, #0]
 80059ce:	2b03      	cmp	r3, #3
 80059d0:	d102      	bne.n	80059d8 <ESP_Upkeep+0x5c8>
         ATExpectation = RECEIVE_EXPECTATION_READY;
 80059d2:	4b78      	ldr	r3, [pc, #480]	@ (8005bb4 <ESP_Upkeep+0x7a4>)
 80059d4:	2201      	movs	r2, #1
 80059d6:	701a      	strb	r2, [r3, #0]
      }
      if(ATCommand == AT_HTTPCPOST){
 80059d8:	4b78      	ldr	r3, [pc, #480]	@ (8005bbc <ESP_Upkeep+0x7ac>)
 80059da:	781b      	ldrb	r3, [r3, #0]
 80059dc:	2b0e      	cmp	r3, #14
 80059de:	d102      	bne.n	80059e6 <ESP_Upkeep+0x5d6>
        ATExpectation = RECEIVE_EXPECTATION_START;
 80059e0:	4b74      	ldr	r3, [pc, #464]	@ (8005bb4 <ESP_Upkeep+0x7a4>)
 80059e2:	2202      	movs	r2, #2
 80059e4:	701a      	strb	r2, [r3, #0]
      }
      if(ATCommand != AT_HTTPCPOST && ATCommand != AT_RESTORE){
 80059e6:	4b75      	ldr	r3, [pc, #468]	@ (8005bbc <ESP_Upkeep+0x7ac>)
 80059e8:	781b      	ldrb	r3, [r3, #0]
 80059ea:	2b0e      	cmp	r3, #14
 80059ec:	d006      	beq.n	80059fc <ESP_Upkeep+0x5ec>
 80059ee:	4b73      	ldr	r3, [pc, #460]	@ (8005bbc <ESP_Upkeep+0x7ac>)
 80059f0:	781b      	ldrb	r3, [r3, #0]
 80059f2:	2b03      	cmp	r3, #3
 80059f4:	d002      	beq.n	80059fc <ESP_Upkeep+0x5ec>
        ATExpectation = RECEIVE_EXPECTATION_OK;
 80059f6:	4b6f      	ldr	r3, [pc, #444]	@ (8005bb4 <ESP_Upkeep+0x7a4>)
 80059f8:	2200      	movs	r2, #0
 80059fa:	701a      	strb	r2, [r3, #0]
      }
      if(ATCommand == AT_CIPSNTPCFG){
 80059fc:	4b6f      	ldr	r3, [pc, #444]	@ (8005bbc <ESP_Upkeep+0x7ac>)
 80059fe:	781b      	ldrb	r3, [r3, #0]
 8005a00:	2b11      	cmp	r3, #17
 8005a02:	d102      	bne.n	8005a0a <ESP_Upkeep+0x5fa>
         ATExpectation = RECEIVE_EXPECTATION_TIME;
 8005a04:	4b6b      	ldr	r3, [pc, #428]	@ (8005bb4 <ESP_Upkeep+0x7a4>)
 8005a06:	2205      	movs	r2, #5
 8005a08:	701a      	strb	r2, [r3, #0]
      }
      EspState = ESP_STATE_SEND;
 8005a0a:	4b6e      	ldr	r3, [pc, #440]	@ (8005bc4 <ESP_Upkeep+0x7b4>)
 8005a0c:	2204      	movs	r2, #4
 8005a0e:	701a      	strb	r2, [r3, #0]
      if(ATCommand == AT_END){
 8005a10:	4b6a      	ldr	r3, [pc, #424]	@ (8005bbc <ESP_Upkeep+0x7ac>)
 8005a12:	781b      	ldrb	r3, [r3, #0]
 8005a14:	2b14      	cmp	r3, #20
 8005a16:	d000      	beq.n	8005a1a <ESP_Upkeep+0x60a>
 8005a18:	e155      	b.n	8005cc6 <ESP_Upkeep+0x8b6>
        if(Mode == AT_MODE_SEND){
 8005a1a:	4b75      	ldr	r3, [pc, #468]	@ (8005bf0 <ESP_Upkeep+0x7e0>)
 8005a1c:	781b      	ldrb	r3, [r3, #0]
 8005a1e:	2b02      	cmp	r3, #2
 8005a20:	d124      	bne.n	8005a6c <ESP_Upkeep+0x65c>
          ESPTimeStamp = HAL_GetTick() + ESP_UNTIL_NEXT_SEND;
 8005a22:	f008 fd21 	bl	800e468 <HAL_GetTick>
 8005a26:	0003      	movs	r3, r0
 8005a28:	4a68      	ldr	r2, [pc, #416]	@ (8005bcc <ESP_Upkeep+0x7bc>)
 8005a2a:	189a      	adds	r2, r3, r2
 8005a2c:	4b60      	ldr	r3, [pc, #384]	@ (8005bb0 <ESP_Upkeep+0x7a0>)
 8005a2e:	601a      	str	r2, [r3, #0]
          ResetESPIndicator();
 8005a30:	f007 fa1a 	bl	800ce68 <ResetESPIndicator>
          clearDMABuffer();
 8005a34:	f7ff f9be 	bl	8004db4 <clearDMABuffer>
          stop = HAL_GetTick();
 8005a38:	f008 fd16 	bl	800e468 <HAL_GetTick>
 8005a3c:	0002      	movs	r2, r0
 8005a3e:	4b65      	ldr	r3, [pc, #404]	@ (8005bd4 <ESP_Upkeep+0x7c4>)
 8005a40:	601a      	str	r2, [r3, #0]
          Info("Message send in %lu ms", (stop-start));
 8005a42:	4b64      	ldr	r3, [pc, #400]	@ (8005bd4 <ESP_Upkeep+0x7c4>)
 8005a44:	681a      	ldr	r2, [r3, #0]
 8005a46:	4b64      	ldr	r3, [pc, #400]	@ (8005bd8 <ESP_Upkeep+0x7c8>)
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	1ad3      	subs	r3, r2, r3
 8005a4c:	4a69      	ldr	r2, [pc, #420]	@ (8005bf4 <ESP_Upkeep+0x7e4>)
 8005a4e:	496a      	ldr	r1, [pc, #424]	@ (8005bf8 <ESP_Upkeep+0x7e8>)
 8005a50:	2002      	movs	r0, #2
 8005a52:	f008 f8b3 	bl	800dbbc <CreateLine>
          ResetdBAmax();
 8005a56:	f002 fdad 	bl	80085b4 <ResetdBAmax>
          showTime();
 8005a5a:	f000 fccd 	bl	80063f8 <showTime>
          ESPTransmitDone = true;
 8005a5e:	4b5c      	ldr	r3, [pc, #368]	@ (8005bd0 <ESP_Upkeep+0x7c0>)
 8005a60:	2201      	movs	r2, #1
 8005a62:	701a      	strb	r2, [r3, #0]
          EspState = ESP_STATE_DEINIT;
 8005a64:	4b57      	ldr	r3, [pc, #348]	@ (8005bc4 <ESP_Upkeep+0x7b4>)
 8005a66:	220d      	movs	r2, #13
 8005a68:	701a      	strb	r2, [r3, #0]
          }
        else{
          EspState = ESP_STATE_RESET;
        }
      }
    break;
 8005a6a:	e12c      	b.n	8005cc6 <ESP_Upkeep+0x8b6>
        else if (Mode == AT_MODE_GETTIME) {
 8005a6c:	4b60      	ldr	r3, [pc, #384]	@ (8005bf0 <ESP_Upkeep+0x7e0>)
 8005a6e:	781b      	ldrb	r3, [r3, #0]
 8005a70:	2b05      	cmp	r3, #5
 8005a72:	d12e      	bne.n	8005ad2 <ESP_Upkeep+0x6c2>
            setTime = false;
 8005a74:	4b61      	ldr	r3, [pc, #388]	@ (8005bfc <ESP_Upkeep+0x7ec>)
 8005a76:	2200      	movs	r2, #0
 8005a78:	701a      	strb	r2, [r3, #0]
            ESPNTPTimeStamp = HAL_GetTick()+ESP_UNTIL_NEXT_NTP;
 8005a7a:	f008 fcf5 	bl	800e468 <HAL_GetTick>
 8005a7e:	0003      	movs	r3, r0
 8005a80:	4a5f      	ldr	r2, [pc, #380]	@ (8005c00 <ESP_Upkeep+0x7f0>)
 8005a82:	189a      	adds	r2, r3, r2
 8005a84:	4b5f      	ldr	r3, [pc, #380]	@ (8005c04 <ESP_Upkeep+0x7f4>)
 8005a86:	601a      	str	r2, [r3, #0]
            Info("Time synchronized by NTP, next NTP should be called at tick: %lu", ESPNTPTimeStamp);
 8005a88:	4b5e      	ldr	r3, [pc, #376]	@ (8005c04 <ESP_Upkeep+0x7f4>)
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	4a5e      	ldr	r2, [pc, #376]	@ (8005c08 <ESP_Upkeep+0x7f8>)
 8005a8e:	495a      	ldr	r1, [pc, #360]	@ (8005bf8 <ESP_Upkeep+0x7e8>)
 8005a90:	2002      	movs	r0, #2
 8005a92:	f008 f893 	bl	800dbbc <CreateLine>
            ESPTimeStamp = savedESPTimeStamp;
 8005a96:	4b5d      	ldr	r3, [pc, #372]	@ (8005c0c <ESP_Upkeep+0x7fc>)
 8005a98:	681a      	ldr	r2, [r3, #0]
 8005a9a:	4b45      	ldr	r3, [pc, #276]	@ (8005bb0 <ESP_Upkeep+0x7a0>)
 8005a9c:	601a      	str	r2, [r3, #0]
            ResetESPIndicator();
 8005a9e:	f007 f9e3 	bl	800ce68 <ResetESPIndicator>
            clearDMABuffer();
 8005aa2:	f7ff f987 	bl	8004db4 <clearDMABuffer>
            stop = HAL_GetTick();
 8005aa6:	f008 fcdf 	bl	800e468 <HAL_GetTick>
 8005aaa:	0002      	movs	r2, r0
 8005aac:	4b49      	ldr	r3, [pc, #292]	@ (8005bd4 <ESP_Upkeep+0x7c4>)
 8005aae:	601a      	str	r2, [r3, #0]
            Info("Message time update in %lu ms", (stop-start));
 8005ab0:	4b48      	ldr	r3, [pc, #288]	@ (8005bd4 <ESP_Upkeep+0x7c4>)
 8005ab2:	681a      	ldr	r2, [r3, #0]
 8005ab4:	4b48      	ldr	r3, [pc, #288]	@ (8005bd8 <ESP_Upkeep+0x7c8>)
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	1ad3      	subs	r3, r2, r3
 8005aba:	4a55      	ldr	r2, [pc, #340]	@ (8005c10 <ESP_Upkeep+0x800>)
 8005abc:	494e      	ldr	r1, [pc, #312]	@ (8005bf8 <ESP_Upkeep+0x7e8>)
 8005abe:	2002      	movs	r0, #2
 8005ac0:	f008 f87c 	bl	800dbbc <CreateLine>
            EspState = ESP_STATE_DEINIT;
 8005ac4:	4b3f      	ldr	r3, [pc, #252]	@ (8005bc4 <ESP_Upkeep+0x7b4>)
 8005ac6:	220d      	movs	r2, #13
 8005ac8:	701a      	strb	r2, [r3, #0]
            Mode = AT_MODE_SEND;
 8005aca:	4b49      	ldr	r3, [pc, #292]	@ (8005bf0 <ESP_Upkeep+0x7e0>)
 8005acc:	2202      	movs	r2, #2
 8005ace:	701a      	strb	r2, [r3, #0]
    break;
 8005ad0:	e0f9      	b.n	8005cc6 <ESP_Upkeep+0x8b6>
          EspState = ESP_STATE_RESET;
 8005ad2:	4b3c      	ldr	r3, [pc, #240]	@ (8005bc4 <ESP_Upkeep+0x7b4>)
 8005ad4:	2209      	movs	r2, #9
 8005ad6:	701a      	strb	r2, [r3, #0]
    break;
 8005ad8:	e0f5      	b.n	8005cc6 <ESP_Upkeep+0x8b6>

    case ESP_STATE_DEINIT:
      EspTurnedOn = false;
 8005ada:	4b4e      	ldr	r3, [pc, #312]	@ (8005c14 <ESP_Upkeep+0x804>)
 8005adc:	2200      	movs	r2, #0
 8005ade:	701a      	strb	r2, [r3, #0]
      HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_RESET);
 8005ae0:	4b4d      	ldr	r3, [pc, #308]	@ (8005c18 <ESP_Upkeep+0x808>)
 8005ae2:	2200      	movs	r2, #0
 8005ae4:	2101      	movs	r1, #1
 8005ae6:	0018      	movs	r0, r3
 8005ae8:	f009 ff4f 	bl	800f98a <HAL_GPIO_WritePin>
      HAL_Delay(1);
 8005aec:	2001      	movs	r0, #1
 8005aee:	f008 fcc5 	bl	800e47c <HAL_Delay>
      HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_RESET);
 8005af2:	2380      	movs	r3, #128	@ 0x80
 8005af4:	011b      	lsls	r3, r3, #4
 8005af6:	4849      	ldr	r0, [pc, #292]	@ (8005c1c <ESP_Upkeep+0x80c>)
 8005af8:	2200      	movs	r2, #0
 8005afa:	0019      	movs	r1, r3
 8005afc:	f009 ff45 	bl	800f98a <HAL_GPIO_WritePin>
      HAL_Delay(1);
 8005b00:	2001      	movs	r0, #1
 8005b02:	f008 fcbb 	bl	800e47c <HAL_Delay>
      HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, 0);
 8005b06:	4b44      	ldr	r3, [pc, #272]	@ (8005c18 <ESP_Upkeep+0x808>)
 8005b08:	2200      	movs	r2, #0
 8005b0a:	2102      	movs	r1, #2
 8005b0c:	0018      	movs	r0, r3
 8005b0e:	f009 ff3c 	bl	800f98a <HAL_GPIO_WritePin>
      EspState = ESP_STATE_RESET;
 8005b12:	4b2c      	ldr	r3, [pc, #176]	@ (8005bc4 <ESP_Upkeep+0x7b4>)
 8005b14:	2209      	movs	r2, #9
 8005b16:	701a      	strb	r2, [r3, #0]
      HAL_Delay(1);
 8005b18:	2001      	movs	r0, #1
 8005b1a:	f008 fcaf 	bl	800e47c <HAL_Delay>
      errorcntr = 0;
 8005b1e:	4b2a      	ldr	r3, [pc, #168]	@ (8005bc8 <ESP_Upkeep+0x7b8>)
 8005b20:	2200      	movs	r2, #0
 8005b22:	701a      	strb	r2, [r3, #0]
      break;
 8005b24:	e0d2      	b.n	8005ccc <ESP_Upkeep+0x8bc>

    case ESP_STATE_RESET:
      if(TimestampIsReached(ESPTimeStamp) || ReconfigSet){
 8005b26:	4b22      	ldr	r3, [pc, #136]	@ (8005bb0 <ESP_Upkeep+0x7a0>)
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	0018      	movs	r0, r3
 8005b2c:	f007 fff0 	bl	800db10 <TimestampIsReached>
 8005b30:	1e03      	subs	r3, r0, #0
 8005b32:	d104      	bne.n	8005b3e <ESP_Upkeep+0x72e>
 8005b34:	4b3a      	ldr	r3, [pc, #232]	@ (8005c20 <ESP_Upkeep+0x810>)
 8005b36:	781b      	ldrb	r3, [r3, #0]
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d100      	bne.n	8005b3e <ESP_Upkeep+0x72e>
 8005b3c:	e07c      	b.n	8005c38 <ESP_Upkeep+0x828>
        ESPTransmitDone = false;
 8005b3e:	4b24      	ldr	r3, [pc, #144]	@ (8005bd0 <ESP_Upkeep+0x7c0>)
 8005b40:	2200      	movs	r2, #0
 8005b42:	701a      	strb	r2, [r3, #0]
        if(Mode == AT_MODE_INIT){
 8005b44:	4b2a      	ldr	r3, [pc, #168]	@ (8005bf0 <ESP_Upkeep+0x7e0>)
 8005b46:	781b      	ldrb	r3, [r3, #0]
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d105      	bne.n	8005b58 <ESP_Upkeep+0x748>
          InitIsDone = true;
 8005b4c:	4b35      	ldr	r3, [pc, #212]	@ (8005c24 <ESP_Upkeep+0x814>)
 8005b4e:	2201      	movs	r2, #1
 8005b50:	701a      	strb	r2, [r3, #0]
          EspState = ESP_STATE_MODE_SELECT;
 8005b52:	4b1c      	ldr	r3, [pc, #112]	@ (8005bc4 <ESP_Upkeep+0x7b4>)
 8005b54:	220b      	movs	r2, #11
 8005b56:	701a      	strb	r2, [r3, #0]
        }
        if(Mode == AT_MODE_CONFIG){
 8005b58:	4b25      	ldr	r3, [pc, #148]	@ (8005bf0 <ESP_Upkeep+0x7e0>)
 8005b5a:	781b      	ldrb	r3, [r3, #0]
 8005b5c:	2b01      	cmp	r3, #1
 8005b5e:	d108      	bne.n	8005b72 <ESP_Upkeep+0x762>
          ConnectionMade = true;
 8005b60:	4b31      	ldr	r3, [pc, #196]	@ (8005c28 <ESP_Upkeep+0x818>)
 8005b62:	2201      	movs	r2, #1
 8005b64:	701a      	strb	r2, [r3, #0]
          beurs = true;
 8005b66:	4b31      	ldr	r3, [pc, #196]	@ (8005c2c <ESP_Upkeep+0x81c>)
 8005b68:	2201      	movs	r2, #1
 8005b6a:	701a      	strb	r2, [r3, #0]
          EspState = ESP_STATE_MODE_SELECT;
 8005b6c:	4b15      	ldr	r3, [pc, #84]	@ (8005bc4 <ESP_Upkeep+0x7b4>)
 8005b6e:	220b      	movs	r2, #11
 8005b70:	701a      	strb	r2, [r3, #0]
        }
        if(Mode == AT_MODE_SEND){
 8005b72:	4b1f      	ldr	r3, [pc, #124]	@ (8005bf0 <ESP_Upkeep+0x7e0>)
 8005b74:	781b      	ldrb	r3, [r3, #0]
 8005b76:	2b02      	cmp	r3, #2
 8005b78:	d102      	bne.n	8005b80 <ESP_Upkeep+0x770>
          EspState = ESP_STATE_INIT;
 8005b7a:	4b12      	ldr	r3, [pc, #72]	@ (8005bc4 <ESP_Upkeep+0x7b4>)
 8005b7c:	2202      	movs	r2, #2
 8005b7e:	701a      	strb	r2, [r3, #0]
        }
        if(Mode == AT_MODE_RECONFIG){
 8005b80:	4b1b      	ldr	r3, [pc, #108]	@ (8005bf0 <ESP_Upkeep+0x7e0>)
 8005b82:	781b      	ldrb	r3, [r3, #0]
 8005b84:	2b03      	cmp	r3, #3
 8005b86:	d108      	bne.n	8005b9a <ESP_Upkeep+0x78a>
          EspState = ESP_STATE_CONFIG;
 8005b88:	4b0e      	ldr	r3, [pc, #56]	@ (8005bc4 <ESP_Upkeep+0x7b4>)
 8005b8a:	220e      	movs	r2, #14
 8005b8c:	701a      	strb	r2, [r3, #0]
          Info("Do nothing until reset");
 8005b8e:	4a28      	ldr	r2, [pc, #160]	@ (8005c30 <ESP_Upkeep+0x820>)
 8005b90:	4b19      	ldr	r3, [pc, #100]	@ (8005bf8 <ESP_Upkeep+0x7e8>)
 8005b92:	0019      	movs	r1, r3
 8005b94:	2002      	movs	r0, #2
 8005b96:	f008 f811 	bl	800dbbc <CreateLine>
        }
        if(Mode == AT_MODE_TEST){
 8005b9a:	4b15      	ldr	r3, [pc, #84]	@ (8005bf0 <ESP_Upkeep+0x7e0>)
 8005b9c:	781b      	ldrb	r3, [r3, #0]
 8005b9e:	2b04      	cmp	r3, #4
 8005ba0:	d163      	bne.n	8005c6a <ESP_Upkeep+0x85a>
          EspState = ESP_STATE_MODE_SELECT;
 8005ba2:	4b08      	ldr	r3, [pc, #32]	@ (8005bc4 <ESP_Upkeep+0x7b4>)
 8005ba4:	220b      	movs	r2, #11
 8005ba6:	701a      	strb	r2, [r3, #0]
          beursTest = true;
 8005ba8:	4b22      	ldr	r3, [pc, #136]	@ (8005c34 <ESP_Upkeep+0x824>)
 8005baa:	2201      	movs	r2, #1
 8005bac:	701a      	strb	r2, [r3, #0]
        if(Mode == AT_MODE_TEST){
 8005bae:	e05c      	b.n	8005c6a <ESP_Upkeep+0x85a>
 8005bb0:	20000a1c 	.word	0x20000a1c
 8005bb4:	20000a29 	.word	0x20000a29
 8005bb8:	2000002a 	.word	0x2000002a
 8005bbc:	20000a2a 	.word	0x20000a2a
 8005bc0:	20000a16 	.word	0x20000a16
 8005bc4:	20000028 	.word	0x20000028
 8005bc8:	20000a17 	.word	0x20000a17
 8005bcc:	0003a980 	.word	0x0003a980
 8005bd0:	20000553 	.word	0x20000553
 8005bd4:	20000564 	.word	0x20000564
 8005bd8:	20000560 	.word	0x20000560
 8005bdc:	080231e4 	.word	0x080231e4
 8005be0:	08022874 	.word	0x08022874
 8005be4:	20000a18 	.word	0x20000a18
 8005be8:	08023218 	.word	0x08023218
 8005bec:	20000a0c 	.word	0x20000a0c
 8005bf0:	20000a2b 	.word	0x20000a2b
 8005bf4:	08023248 	.word	0x08023248
 8005bf8:	08023260 	.word	0x08023260
 8005bfc:	20000001 	.word	0x20000001
 8005c00:	001096de 	.word	0x001096de
 8005c04:	20000a20 	.word	0x20000a20
 8005c08:	08023264 	.word	0x08023264
 8005c0c:	20000a24 	.word	0x20000a24
 8005c10:	080232a8 	.word	0x080232a8
 8005c14:	2000054c 	.word	0x2000054c
 8005c18:	50001c00 	.word	0x50001c00
 8005c1c:	50000800 	.word	0x50000800
 8005c20:	2000054f 	.word	0x2000054f
 8005c24:	2000054d 	.word	0x2000054d
 8005c28:	20000550 	.word	0x20000550
 8005c2c:	20000552 	.word	0x20000552
 8005c30:	080232c8 	.word	0x080232c8
 8005c34:	20000551 	.word	0x20000551
        }
      }
      else if (TimestampIsReached(ESPNTPTimeStamp)) {
 8005c38:	4b27      	ldr	r3, [pc, #156]	@ (8005cd8 <ESP_Upkeep+0x8c8>)
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	0018      	movs	r0, r3
 8005c3e:	f007 ff67 	bl	800db10 <TimestampIsReached>
 8005c42:	1e03      	subs	r3, r0, #0
 8005c44:	d041      	beq.n	8005cca <ESP_Upkeep+0x8ba>
        if(Mode == AT_MODE_SEND ) {
 8005c46:	4b25      	ldr	r3, [pc, #148]	@ (8005cdc <ESP_Upkeep+0x8cc>)
 8005c48:	781b      	ldrb	r3, [r3, #0]
 8005c4a:	2b02      	cmp	r3, #2
 8005c4c:	d13d      	bne.n	8005cca <ESP_Upkeep+0x8ba>
            Mode = AT_MODE_GETTIME;
 8005c4e:	4b23      	ldr	r3, [pc, #140]	@ (8005cdc <ESP_Upkeep+0x8cc>)
 8005c50:	2205      	movs	r2, #5
 8005c52:	701a      	strb	r2, [r3, #0]
//          EspState = ESP_STATE_MODE_SELECT;
         EspState = ESP_STATE_INIT;
 8005c54:	4b22      	ldr	r3, [pc, #136]	@ (8005ce0 <ESP_Upkeep+0x8d0>)
 8005c56:	2202      	movs	r2, #2
 8005c58:	701a      	strb	r2, [r3, #0]
         savedESPTimeStamp = ESPTimeStamp;
 8005c5a:	4b22      	ldr	r3, [pc, #136]	@ (8005ce4 <ESP_Upkeep+0x8d4>)
 8005c5c:	681a      	ldr	r2, [r3, #0]
 8005c5e:	4b22      	ldr	r3, [pc, #136]	@ (8005ce8 <ESP_Upkeep+0x8d8>)
 8005c60:	601a      	str	r2, [r3, #0]
         setTime = true;
 8005c62:	4b22      	ldr	r3, [pc, #136]	@ (8005cec <ESP_Upkeep+0x8dc>)
 8005c64:	2201      	movs	r2, #1
 8005c66:	701a      	strb	r2, [r3, #0]
 //        Debug("setTime to true");
        }
      }
      break;
 8005c68:	e02f      	b.n	8005cca <ESP_Upkeep+0x8ba>
 8005c6a:	e02e      	b.n	8005cca <ESP_Upkeep+0x8ba>

    case ESP_STATE_CONFIG:
      Info("Do nothing until reset");
 8005c6c:	4a20      	ldr	r2, [pc, #128]	@ (8005cf0 <ESP_Upkeep+0x8e0>)
 8005c6e:	4b21      	ldr	r3, [pc, #132]	@ (8005cf4 <ESP_Upkeep+0x8e4>)
 8005c70:	0019      	movs	r1, r3
 8005c72:	2002      	movs	r0, #2
 8005c74:	f007 ffa2 	bl	800dbbc <CreateLine>
      Process_PC_Config(GetUsbRxPointer());
 8005c78:	f016 fc20 	bl	801c4bc <GetUsbRxPointer>
 8005c7c:	0003      	movs	r3, r0
 8005c7e:	0018      	movs	r0, r3
 8005c80:	f000 f8b2 	bl	8005de8 <Process_PC_Config>
      break;
 8005c84:	e022      	b.n	8005ccc <ESP_Upkeep+0x8bc>

    case ESP_STATE_ERROR:
      // Handle error state
      Error("ESP Error occurred");
 8005c86:	4a1c      	ldr	r2, [pc, #112]	@ (8005cf8 <ESP_Upkeep+0x8e8>)
 8005c88:	4b1c      	ldr	r3, [pc, #112]	@ (8005cfc <ESP_Upkeep+0x8ec>)
 8005c8a:	0019      	movs	r1, r3
 8005c8c:	2001      	movs	r0, #1
 8005c8e:	f007 ff95 	bl	800dbbc <CreateLine>
      EspState = ESP_STATE_INIT;
 8005c92:	4b13      	ldr	r3, [pc, #76]	@ (8005ce0 <ESP_Upkeep+0x8d0>)
 8005c94:	2202      	movs	r2, #2
 8005c96:	701a      	strb	r2, [r3, #0]
      break;
 8005c98:	e018      	b.n	8005ccc <ESP_Upkeep+0x8bc>

    default:
      // Handle unexpected state
      Error("Something unknown went wrong with the ESP_STATE");
 8005c9a:	4a19      	ldr	r2, [pc, #100]	@ (8005d00 <ESP_Upkeep+0x8f0>)
 8005c9c:	4b17      	ldr	r3, [pc, #92]	@ (8005cfc <ESP_Upkeep+0x8ec>)
 8005c9e:	0019      	movs	r1, r3
 8005ca0:	2001      	movs	r0, #1
 8005ca2:	f007 ff8b 	bl	800dbbc <CreateLine>
      EspState = ESP_STATE_ERROR;
 8005ca6:	4b0e      	ldr	r3, [pc, #56]	@ (8005ce0 <ESP_Upkeep+0x8d0>)
 8005ca8:	2207      	movs	r2, #7
 8005caa:	701a      	strb	r2, [r3, #0]
      break;
 8005cac:	e00e      	b.n	8005ccc <ESP_Upkeep+0x8bc>
      break;
 8005cae:	46c0      	nop			@ (mov r8, r8)
 8005cb0:	e00c      	b.n	8005ccc <ESP_Upkeep+0x8bc>
      break;
 8005cb2:	46c0      	nop			@ (mov r8, r8)
 8005cb4:	e00a      	b.n	8005ccc <ESP_Upkeep+0x8bc>
        break;
 8005cb6:	46c0      	nop			@ (mov r8, r8)
 8005cb8:	e008      	b.n	8005ccc <ESP_Upkeep+0x8bc>
    break;
 8005cba:	46c0      	nop			@ (mov r8, r8)
 8005cbc:	e006      	b.n	8005ccc <ESP_Upkeep+0x8bc>
    break;
 8005cbe:	46c0      	nop			@ (mov r8, r8)
 8005cc0:	e004      	b.n	8005ccc <ESP_Upkeep+0x8bc>
      break;
 8005cc2:	46c0      	nop			@ (mov r8, r8)
 8005cc4:	e002      	b.n	8005ccc <ESP_Upkeep+0x8bc>
    break;
 8005cc6:	46c0      	nop			@ (mov r8, r8)
 8005cc8:	e000      	b.n	8005ccc <ESP_Upkeep+0x8bc>
      break;
 8005cca:	46c0      	nop			@ (mov r8, r8)
  }
  return EspState;
 8005ccc:	4b04      	ldr	r3, [pc, #16]	@ (8005ce0 <ESP_Upkeep+0x8d0>)
 8005cce:	781b      	ldrb	r3, [r3, #0]
}
 8005cd0:	0018      	movs	r0, r3
 8005cd2:	46bd      	mov	sp, r7
 8005cd4:	b002      	add	sp, #8
 8005cd6:	bdb0      	pop	{r4, r5, r7, pc}
 8005cd8:	20000a20 	.word	0x20000a20
 8005cdc:	20000a2b 	.word	0x20000a2b
 8005ce0:	20000028 	.word	0x20000028
 8005ce4:	20000a1c 	.word	0x20000a1c
 8005ce8:	20000a24 	.word	0x20000a24
 8005cec:	20000001 	.word	0x20000001
 8005cf0:	080232c8 	.word	0x080232c8
 8005cf4:	08023260 	.word	0x08023260
 8005cf8:	080232e0 	.word	0x080232e0
 8005cfc:	08022874 	.word	0x08022874
 8005d00:	080232f4 	.word	0x080232f4

08005d04 <I2CSensors_Init>:
static I2C_HandleTypeDef* SensorI2C = NULL;

static bool ReadI2C(uint8_t address, uint8_t* buffer, uint8_t nrBytes);
static bool WriteI2C(uint8_t address, uint8_t* buffer, uint8_t nrBytes);

void I2CSensors_Init(I2C_HandleTypeDef* sensorI2C) {
 8005d04:	b580      	push	{r7, lr}
 8005d06:	b082      	sub	sp, #8
 8005d08:	af00      	add	r7, sp, #0
 8005d0a:	6078      	str	r0, [r7, #4]
    SensorI2C = sensorI2C;
 8005d0c:	4b09      	ldr	r3, [pc, #36]	@ (8005d34 <I2CSensors_Init+0x30>)
 8005d0e:	687a      	ldr	r2, [r7, #4]
 8005d10:	601a      	str	r2, [r3, #0]
//    HT_Init(ReadI2C, WriteI2C);
    HIDS_Init(ReadI2C, WriteI2C);
 8005d12:	4a09      	ldr	r2, [pc, #36]	@ (8005d38 <I2CSensors_Init+0x34>)
 8005d14:	4b09      	ldr	r3, [pc, #36]	@ (8005d3c <I2CSensors_Init+0x38>)
 8005d16:	0011      	movs	r1, r2
 8005d18:	0018      	movs	r0, r3
 8005d1a:	f008 f8b3 	bl	800de84 <HIDS_Init>
//    Gas_Init(ReadI2C, WriteI2C);
    SGP_Init(ReadI2C, WriteI2C);
 8005d1e:	4a06      	ldr	r2, [pc, #24]	@ (8005d38 <I2CSensors_Init+0x34>)
 8005d20:	4b06      	ldr	r3, [pc, #24]	@ (8005d3c <I2CSensors_Init+0x38>)
 8005d22:	0011      	movs	r1, r2
 8005d24:	0018      	movs	r0, r3
 8005d26:	f005 fa1f 	bl	800b168 <SGP_Init>
}
 8005d2a:	46c0      	nop			@ (mov r8, r8)
 8005d2c:	46bd      	mov	sp, r7
 8005d2e:	b002      	add	sp, #8
 8005d30:	bd80      	pop	{r7, pc}
 8005d32:	46c0      	nop			@ (mov r8, r8)
 8005d34:	20000b40 	.word	0x20000b40
 8005d38:	08005d95 	.word	0x08005d95
 8005d3c:	08005d41 	.word	0x08005d41

08005d40 <ReadI2C>:

static bool ReadI2C(uint8_t address, uint8_t* buffer, uint8_t nrBytes) {
 8005d40:	b5b0      	push	{r4, r5, r7, lr}
 8005d42:	b084      	sub	sp, #16
 8005d44:	af00      	add	r7, sp, #0
 8005d46:	6039      	str	r1, [r7, #0]
 8005d48:	0011      	movs	r1, r2
 8005d4a:	1dfb      	adds	r3, r7, #7
 8005d4c:	1c02      	adds	r2, r0, #0
 8005d4e:	701a      	strb	r2, [r3, #0]
 8005d50:	1dbb      	adds	r3, r7, #6
 8005d52:	1c0a      	adds	r2, r1, #0
 8005d54:	701a      	strb	r2, [r3, #0]
    HAL_StatusTypeDef status = HAL_I2C_Master_Receive_DMA(SensorI2C, (address << 1), buffer, nrBytes);
 8005d56:	4b0e      	ldr	r3, [pc, #56]	@ (8005d90 <ReadI2C+0x50>)
 8005d58:	6818      	ldr	r0, [r3, #0]
 8005d5a:	1dfb      	adds	r3, r7, #7
 8005d5c:	781b      	ldrb	r3, [r3, #0]
 8005d5e:	b29b      	uxth	r3, r3
 8005d60:	18db      	adds	r3, r3, r3
 8005d62:	b299      	uxth	r1, r3
 8005d64:	1dbb      	adds	r3, r7, #6
 8005d66:	781b      	ldrb	r3, [r3, #0]
 8005d68:	b29b      	uxth	r3, r3
 8005d6a:	250f      	movs	r5, #15
 8005d6c:	197c      	adds	r4, r7, r5
 8005d6e:	683a      	ldr	r2, [r7, #0]
 8005d70:	f00a f9f0 	bl	8010154 <HAL_I2C_Master_Receive_DMA>
 8005d74:	0003      	movs	r3, r0
 8005d76:	7023      	strb	r3, [r4, #0]
    if (status != HAL_OK) {
 8005d78:	197b      	adds	r3, r7, r5
 8005d7a:	781b      	ldrb	r3, [r3, #0]
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d001      	beq.n	8005d84 <ReadI2C+0x44>
        return false;
 8005d80:	2300      	movs	r3, #0
 8005d82:	e000      	b.n	8005d86 <ReadI2C+0x46>
    }
    return true;
 8005d84:	2301      	movs	r3, #1
}
 8005d86:	0018      	movs	r0, r3
 8005d88:	46bd      	mov	sp, r7
 8005d8a:	b004      	add	sp, #16
 8005d8c:	bdb0      	pop	{r4, r5, r7, pc}
 8005d8e:	46c0      	nop			@ (mov r8, r8)
 8005d90:	20000b40 	.word	0x20000b40

08005d94 <WriteI2C>:

static bool WriteI2C(uint8_t address, uint8_t* buffer, uint8_t nrBytes) {
 8005d94:	b5b0      	push	{r4, r5, r7, lr}
 8005d96:	b084      	sub	sp, #16
 8005d98:	af00      	add	r7, sp, #0
 8005d9a:	6039      	str	r1, [r7, #0]
 8005d9c:	0011      	movs	r1, r2
 8005d9e:	1dfb      	adds	r3, r7, #7
 8005da0:	1c02      	adds	r2, r0, #0
 8005da2:	701a      	strb	r2, [r3, #0]
 8005da4:	1dbb      	adds	r3, r7, #6
 8005da6:	1c0a      	adds	r2, r1, #0
 8005da8:	701a      	strb	r2, [r3, #0]
    HAL_StatusTypeDef status = HAL_I2C_Master_Transmit_DMA(SensorI2C, (address << 1), buffer, nrBytes);
 8005daa:	4b0e      	ldr	r3, [pc, #56]	@ (8005de4 <WriteI2C+0x50>)
 8005dac:	6818      	ldr	r0, [r3, #0]
 8005dae:	1dfb      	adds	r3, r7, #7
 8005db0:	781b      	ldrb	r3, [r3, #0]
 8005db2:	b29b      	uxth	r3, r3
 8005db4:	18db      	adds	r3, r3, r3
 8005db6:	b299      	uxth	r1, r3
 8005db8:	1dbb      	adds	r3, r7, #6
 8005dba:	781b      	ldrb	r3, [r3, #0]
 8005dbc:	b29b      	uxth	r3, r3
 8005dbe:	250f      	movs	r5, #15
 8005dc0:	197c      	adds	r4, r7, r5
 8005dc2:	683a      	ldr	r2, [r7, #0]
 8005dc4:	f00a f8c0 	bl	800ff48 <HAL_I2C_Master_Transmit_DMA>
 8005dc8:	0003      	movs	r3, r0
 8005dca:	7023      	strb	r3, [r4, #0]
    if (status != HAL_OK) {
 8005dcc:	197b      	adds	r3, r7, r5
 8005dce:	781b      	ldrb	r3, [r3, #0]
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d001      	beq.n	8005dd8 <WriteI2C+0x44>
        return false;
 8005dd4:	2300      	movs	r3, #0
 8005dd6:	e000      	b.n	8005dda <WriteI2C+0x46>
    }
    return true;
 8005dd8:	2301      	movs	r3, #1
}
 8005dda:	0018      	movs	r0, r3
 8005ddc:	46bd      	mov	sp, r7
 8005dde:	b004      	add	sp, #16
 8005de0:	bdb0      	pop	{r4, r5, r7, pc}
 8005de2:	46c0      	nop			@ (mov r8, r8)
 8005de4:	20000b40 	.word	0x20000b40

08005de8 <Process_PC_Config>:
// Command value:   0 = ...
//                  1 = ...
//**************************************************************************************************

void Process_PC_Config(uint8_t* data) //, uint16_t length)
{
 8005de8:	b590      	push	{r4, r7, lr}
 8005dea:	b0c3      	sub	sp, #268	@ 0x10c
 8005dec:	af3e      	add	r7, sp, #248	@ 0xf8
 8005dee:	6078      	str	r0, [r7, #4]
    uint32_t length = GetUsbRxDataSize();
 8005df0:	f016 fb84 	bl	801c4fc <GetUsbRxDataSize>
 8005df4:	0003      	movs	r3, r0
 8005df6:	60fb      	str	r3, [r7, #12]
    if (length > 5)
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	2b05      	cmp	r3, #5
 8005dfc:	d971      	bls.n	8005ee2 <Process_PC_Config+0xfa>
    {
        uint8_t* message = (unsigned char*)strstr((const char*)data, PREABMLE);
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	2123      	movs	r1, #35	@ 0x23
 8005e02:	0018      	movs	r0, r3
 8005e04:	f019 fd7a 	bl	801f8fc <strchr>
 8005e08:	0003      	movs	r3, r0
 8005e0a:	60bb      	str	r3, [r7, #8]
        if(message != NULL)// && strlen((const char*)message) > 5)
 8005e0c:	68bb      	ldr	r3, [r7, #8]
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d065      	beq.n	8005ede <Process_PC_Config+0xf6>
        {
            received.Command = message[1];
 8005e12:	68bb      	ldr	r3, [r7, #8]
 8005e14:	785a      	ldrb	r2, [r3, #1]
 8005e16:	4b34      	ldr	r3, [pc, #208]	@ (8005ee8 <Process_PC_Config+0x100>)
 8005e18:	701a      	strb	r2, [r3, #0]
            received.PayloadLength = message[2];
 8005e1a:	68bb      	ldr	r3, [r7, #8]
 8005e1c:	789a      	ldrb	r2, [r3, #2]
 8005e1e:	4b32      	ldr	r3, [pc, #200]	@ (8005ee8 <Process_PC_Config+0x100>)
 8005e20:	705a      	strb	r2, [r3, #1]
            if (length >= (uint32_t)(received.PayloadLength + HEADER_SIZE + CRC_SIZE))
 8005e22:	4b31      	ldr	r3, [pc, #196]	@ (8005ee8 <Process_PC_Config+0x100>)
 8005e24:	785b      	ldrb	r3, [r3, #1]
 8005e26:	3305      	adds	r3, #5
 8005e28:	001a      	movs	r2, r3
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	4293      	cmp	r3, r2
 8005e2e:	d351      	bcc.n	8005ed4 <Process_PC_Config+0xec>
            {
                memcpy(received.Payload, &message[3], received.PayloadLength);
 8005e30:	68bb      	ldr	r3, [r7, #8]
 8005e32:	1cd9      	adds	r1, r3, #3
 8005e34:	4b2c      	ldr	r3, [pc, #176]	@ (8005ee8 <Process_PC_Config+0x100>)
 8005e36:	785b      	ldrb	r3, [r3, #1]
 8005e38:	001a      	movs	r2, r3
 8005e3a:	4b2c      	ldr	r3, [pc, #176]	@ (8005eec <Process_PC_Config+0x104>)
 8005e3c:	0018      	movs	r0, r3
 8005e3e:	f019 fe31 	bl	801faa4 <memcpy>
                received.Crc = message[3 + received.PayloadLength] << 8 | message[3 + received.PayloadLength + 1];
 8005e42:	4b29      	ldr	r3, [pc, #164]	@ (8005ee8 <Process_PC_Config+0x100>)
 8005e44:	785b      	ldrb	r3, [r3, #1]
 8005e46:	3303      	adds	r3, #3
 8005e48:	001a      	movs	r2, r3
 8005e4a:	68bb      	ldr	r3, [r7, #8]
 8005e4c:	189b      	adds	r3, r3, r2
 8005e4e:	781b      	ldrb	r3, [r3, #0]
 8005e50:	021b      	lsls	r3, r3, #8
 8005e52:	b21a      	sxth	r2, r3
 8005e54:	4b24      	ldr	r3, [pc, #144]	@ (8005ee8 <Process_PC_Config+0x100>)
 8005e56:	785b      	ldrb	r3, [r3, #1]
 8005e58:	3304      	adds	r3, #4
 8005e5a:	68b9      	ldr	r1, [r7, #8]
 8005e5c:	18cb      	adds	r3, r1, r3
 8005e5e:	781b      	ldrb	r3, [r3, #0]
 8005e60:	b21b      	sxth	r3, r3
 8005e62:	4313      	orrs	r3, r2
 8005e64:	b21b      	sxth	r3, r3
 8005e66:	b299      	uxth	r1, r3
 8005e68:	4a1f      	ldr	r2, [pc, #124]	@ (8005ee8 <Process_PC_Config+0x100>)
 8005e6a:	2381      	movs	r3, #129	@ 0x81
 8005e6c:	005b      	lsls	r3, r3, #1
 8005e6e:	52d1      	strh	r1, [r2, r3]

                if (received.Crc != CRC16_ARC(message, received.PayloadLength + 3))
 8005e70:	4a1d      	ldr	r2, [pc, #116]	@ (8005ee8 <Process_PC_Config+0x100>)
 8005e72:	2381      	movs	r3, #129	@ 0x81
 8005e74:	005b      	lsls	r3, r3, #1
 8005e76:	5ad4      	ldrh	r4, [r2, r3]
 8005e78:	4b1b      	ldr	r3, [pc, #108]	@ (8005ee8 <Process_PC_Config+0x100>)
 8005e7a:	785b      	ldrb	r3, [r3, #1]
 8005e7c:	3303      	adds	r3, #3
 8005e7e:	b29a      	uxth	r2, r3
 8005e80:	68bb      	ldr	r3, [r7, #8]
 8005e82:	0011      	movs	r1, r2
 8005e84:	0018      	movs	r0, r3
 8005e86:	f000 f975 	bl	8006174 <CRC16_ARC>
 8005e8a:	0003      	movs	r3, r0
 8005e8c:	429c      	cmp	r4, r3
 8005e8e:	d007      	beq.n	8005ea0 <Process_PC_Config+0xb8>
                {
                    Create_Message(ERROR, received.Payload, received.PayloadLength);
 8005e90:	4b15      	ldr	r3, [pc, #84]	@ (8005ee8 <Process_PC_Config+0x100>)
 8005e92:	785a      	ldrb	r2, [r3, #1]
 8005e94:	4b15      	ldr	r3, [pc, #84]	@ (8005eec <Process_PC_Config+0x104>)
 8005e96:	0019      	movs	r1, r3
 8005e98:	2001      	movs	r0, #1
 8005e9a:	f000 f919 	bl	80060d0 <Create_Message>
 8005e9e:	e016      	b.n	8005ece <Process_PC_Config+0xe6>
                    //Handel het foutief ontvangen bericht af
                }
                else
                {
                    //Handel het correct ontvangen bericht af
                    ProcessCmd(received);
 8005ea0:	4c11      	ldr	r4, [pc, #68]	@ (8005ee8 <Process_PC_Config+0x100>)
 8005ea2:	466b      	mov	r3, sp
 8005ea4:	0018      	movs	r0, r3
 8005ea6:	0023      	movs	r3, r4
 8005ea8:	3310      	adds	r3, #16
 8005eaa:	22f4      	movs	r2, #244	@ 0xf4
 8005eac:	0019      	movs	r1, r3
 8005eae:	f019 fdf9 	bl	801faa4 <memcpy>
 8005eb2:	6820      	ldr	r0, [r4, #0]
 8005eb4:	6861      	ldr	r1, [r4, #4]
 8005eb6:	68a2      	ldr	r2, [r4, #8]
 8005eb8:	68e3      	ldr	r3, [r4, #12]
 8005eba:	f000 f819 	bl	8005ef0 <ProcessCmd>
                    Create_Message(received.Command, received.Payload, received.PayloadLength);
 8005ebe:	4b0a      	ldr	r3, [pc, #40]	@ (8005ee8 <Process_PC_Config+0x100>)
 8005ec0:	7818      	ldrb	r0, [r3, #0]
 8005ec2:	4b09      	ldr	r3, [pc, #36]	@ (8005ee8 <Process_PC_Config+0x100>)
 8005ec4:	785a      	ldrb	r2, [r3, #1]
 8005ec6:	4b09      	ldr	r3, [pc, #36]	@ (8005eec <Process_PC_Config+0x104>)
 8005ec8:	0019      	movs	r1, r3
 8005eca:	f000 f901 	bl	80060d0 <Create_Message>
                }
                ResetUsbRxDataSize();
 8005ece:	f016 fafd 	bl	801c4cc <ResetUsbRxDataSize>
                return;
 8005ed2:	e006      	b.n	8005ee2 <Process_PC_Config+0xfa>
            }
            GetUsbRxNextChunk(length);
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	0018      	movs	r0, r3
 8005ed8:	f016 fb1a 	bl	801c510 <GetUsbRxNextChunk>
 8005edc:	e001      	b.n	8005ee2 <Process_PC_Config+0xfa>
        }
        else
        {
            ResetUsbRxDataSize();
 8005ede:	f016 faf5 	bl	801c4cc <ResetUsbRxDataSize>
        }
    }
}
 8005ee2:	46bd      	mov	sp, r7
 8005ee4:	b005      	add	sp, #20
 8005ee6:	bd90      	pop	{r4, r7, pc}
 8005ee8:	20000b44 	.word	0x20000b44
 8005eec:	20000b46 	.word	0x20000b46

08005ef0 <ProcessCmd>:

void ProcessCmd(Receive_MSG msg)
{
 8005ef0:	b084      	sub	sp, #16
 8005ef2:	b5b0      	push	{r4, r5, r7, lr}
 8005ef4:	b082      	sub	sp, #8
 8005ef6:	af00      	add	r7, sp, #0
 8005ef8:	2518      	movs	r5, #24
 8005efa:	197c      	adds	r4, r7, r5
 8005efc:	6020      	str	r0, [r4, #0]
 8005efe:	6061      	str	r1, [r4, #4]
 8005f00:	60a2      	str	r2, [r4, #8]
 8005f02:	60e3      	str	r3, [r4, #12]
    switch (msg.Command)
 8005f04:	197b      	adds	r3, r7, r5
 8005f06:	781b      	ldrb	r3, [r3, #0]
 8005f08:	2bfe      	cmp	r3, #254	@ 0xfe
 8005f0a:	d100      	bne.n	8005f0e <ProcessCmd+0x1e>
 8005f0c:	e09c      	b.n	8006048 <ProcessCmd+0x158>
 8005f0e:	dd00      	ble.n	8005f12 <ProcessCmd+0x22>
 8005f10:	e0bc      	b.n	800608c <ProcessCmd+0x19c>
 8005f12:	2b0c      	cmp	r3, #12
 8005f14:	dc0a      	bgt.n	8005f2c <ProcessCmd+0x3c>
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	da00      	bge.n	8005f1c <ProcessCmd+0x2c>
 8005f1a:	e0b7      	b.n	800608c <ProcessCmd+0x19c>
 8005f1c:	2b0c      	cmp	r3, #12
 8005f1e:	d900      	bls.n	8005f22 <ProcessCmd+0x32>
 8005f20:	e0b4      	b.n	800608c <ProcessCmd+0x19c>
 8005f22:	009a      	lsls	r2, r3, #2
 8005f24:	4b5d      	ldr	r3, [pc, #372]	@ (800609c <ProcessCmd+0x1ac>)
 8005f26:	18d3      	adds	r3, r2, r3
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	469f      	mov	pc, r3
 8005f2c:	2bfd      	cmp	r3, #253	@ 0xfd
 8005f2e:	d100      	bne.n	8005f32 <ProcessCmd+0x42>
 8005f30:	e084      	b.n	800603c <ProcessCmd+0x14c>
                ClearEEprom(EEPROM_START, EEPROM_SIZE);
            }
            break;
        }
    }
}
 8005f32:	e0ab      	b.n	800608c <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(BoxConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8005f34:	2118      	movs	r1, #24
 8005f36:	187b      	adds	r3, r7, r1
 8005f38:	785b      	ldrb	r3, [r3, #1]
 8005f3a:	001a      	movs	r2, r3
 8005f3c:	187b      	adds	r3, r7, r1
 8005f3e:	1c99      	adds	r1, r3, #2
 8005f40:	4857      	ldr	r0, [pc, #348]	@ (80060a0 <ProcessCmd+0x1b0>)
 8005f42:	230c      	movs	r3, #12
 8005f44:	f7fd fbbc 	bl	80036c0 <WriteUint8ArrayEepromSafe>
        break;
 8005f48:	e0a0      	b.n	800608c <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(TempConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8005f4a:	2118      	movs	r1, #24
 8005f4c:	187b      	adds	r3, r7, r1
 8005f4e:	785b      	ldrb	r3, [r3, #1]
 8005f50:	001a      	movs	r2, r3
 8005f52:	187b      	adds	r3, r7, r1
 8005f54:	1c99      	adds	r1, r3, #2
 8005f56:	4853      	ldr	r0, [pc, #332]	@ (80060a4 <ProcessCmd+0x1b4>)
 8005f58:	230c      	movs	r3, #12
 8005f5a:	f7fd fbb1 	bl	80036c0 <WriteUint8ArrayEepromSafe>
        break;
 8005f5e:	e095      	b.n	800608c <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(HumidConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8005f60:	2118      	movs	r1, #24
 8005f62:	187b      	adds	r3, r7, r1
 8005f64:	785b      	ldrb	r3, [r3, #1]
 8005f66:	001a      	movs	r2, r3
 8005f68:	187b      	adds	r3, r7, r1
 8005f6a:	1c99      	adds	r1, r3, #2
 8005f6c:	484e      	ldr	r0, [pc, #312]	@ (80060a8 <ProcessCmd+0x1b8>)
 8005f6e:	230c      	movs	r3, #12
 8005f70:	f7fd fba6 	bl	80036c0 <WriteUint8ArrayEepromSafe>
        break;
 8005f74:	e08a      	b.n	800608c <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(NOxIndexConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8005f76:	2118      	movs	r1, #24
 8005f78:	187b      	adds	r3, r7, r1
 8005f7a:	785b      	ldrb	r3, [r3, #1]
 8005f7c:	001a      	movs	r2, r3
 8005f7e:	187b      	adds	r3, r7, r1
 8005f80:	1c99      	adds	r1, r3, #2
 8005f82:	484a      	ldr	r0, [pc, #296]	@ (80060ac <ProcessCmd+0x1bc>)
 8005f84:	230c      	movs	r3, #12
 8005f86:	f7fd fb9b 	bl	80036c0 <WriteUint8ArrayEepromSafe>
        break;
 8005f8a:	e07f      	b.n	800608c <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(VocIndexConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8005f8c:	2118      	movs	r1, #24
 8005f8e:	187b      	adds	r3, r7, r1
 8005f90:	785b      	ldrb	r3, [r3, #1]
 8005f92:	001a      	movs	r2, r3
 8005f94:	187b      	adds	r3, r7, r1
 8005f96:	1c99      	adds	r1, r3, #2
 8005f98:	4845      	ldr	r0, [pc, #276]	@ (80060b0 <ProcessCmd+0x1c0>)
 8005f9a:	230c      	movs	r3, #12
 8005f9c:	f7fd fb90 	bl	80036c0 <WriteUint8ArrayEepromSafe>
        break;
 8005fa0:	e074      	b.n	800608c <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(dBaConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8005fa2:	2118      	movs	r1, #24
 8005fa4:	187b      	adds	r3, r7, r1
 8005fa6:	785b      	ldrb	r3, [r3, #1]
 8005fa8:	001a      	movs	r2, r3
 8005faa:	187b      	adds	r3, r7, r1
 8005fac:	1c99      	adds	r1, r3, #2
 8005fae:	4841      	ldr	r0, [pc, #260]	@ (80060b4 <ProcessCmd+0x1c4>)
 8005fb0:	230c      	movs	r3, #12
 8005fb2:	f7fd fb85 	bl	80036c0 <WriteUint8ArrayEepromSafe>
        break;
 8005fb6:	e069      	b.n	800608c <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(dBAConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8005fb8:	2118      	movs	r1, #24
 8005fba:	187b      	adds	r3, r7, r1
 8005fbc:	785b      	ldrb	r3, [r3, #1]
 8005fbe:	001a      	movs	r2, r3
 8005fc0:	187b      	adds	r3, r7, r1
 8005fc2:	1c99      	adds	r1, r3, #2
 8005fc4:	483c      	ldr	r0, [pc, #240]	@ (80060b8 <ProcessCmd+0x1c8>)
 8005fc6:	230c      	movs	r3, #12
 8005fc8:	f7fd fb7a 	bl	80036c0 <WriteUint8ArrayEepromSafe>
        break;
 8005fcc:	e05e      	b.n	800608c <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(CustomNameConfigAddr, msg.Payload, msg.PayloadLength, CustomNameMaxLength);
 8005fce:	2118      	movs	r1, #24
 8005fd0:	187b      	adds	r3, r7, r1
 8005fd2:	785b      	ldrb	r3, [r3, #1]
 8005fd4:	001a      	movs	r2, r3
 8005fd6:	187b      	adds	r3, r7, r1
 8005fd8:	1c99      	adds	r1, r3, #2
 8005fda:	4838      	ldr	r0, [pc, #224]	@ (80060bc <ProcessCmd+0x1cc>)
 8005fdc:	231e      	movs	r3, #30
 8005fde:	f7fd fb6f 	bl	80036c0 <WriteUint8ArrayEepromSafe>
        break;
 8005fe2:	e053      	b.n	800608c <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(SolVoltConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8005fe4:	2118      	movs	r1, #24
 8005fe6:	187b      	adds	r3, r7, r1
 8005fe8:	785b      	ldrb	r3, [r3, #1]
 8005fea:	001a      	movs	r2, r3
 8005fec:	187b      	adds	r3, r7, r1
 8005fee:	1c99      	adds	r1, r3, #2
 8005ff0:	4833      	ldr	r0, [pc, #204]	@ (80060c0 <ProcessCmd+0x1d0>)
 8005ff2:	230c      	movs	r3, #12
 8005ff4:	f7fd fb64 	bl	80036c0 <WriteUint8ArrayEepromSafe>
        break;
 8005ff8:	e048      	b.n	800608c <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(BatVoltConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8005ffa:	2118      	movs	r1, #24
 8005ffc:	187b      	adds	r3, r7, r1
 8005ffe:	785b      	ldrb	r3, [r3, #1]
 8006000:	001a      	movs	r2, r3
 8006002:	187b      	adds	r3, r7, r1
 8006004:	1c99      	adds	r1, r3, #2
 8006006:	482f      	ldr	r0, [pc, #188]	@ (80060c4 <ProcessCmd+0x1d4>)
 8006008:	230c      	movs	r3, #12
 800600a:	f7fd fb59 	bl	80036c0 <WriteUint8ArrayEepromSafe>
        break;
 800600e:	e03d      	b.n	800608c <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(PM10ConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8006010:	2118      	movs	r1, #24
 8006012:	187b      	adds	r3, r7, r1
 8006014:	785b      	ldrb	r3, [r3, #1]
 8006016:	001a      	movs	r2, r3
 8006018:	187b      	adds	r3, r7, r1
 800601a:	1c99      	adds	r1, r3, #2
 800601c:	482a      	ldr	r0, [pc, #168]	@ (80060c8 <ProcessCmd+0x1d8>)
 800601e:	230c      	movs	r3, #12
 8006020:	f7fd fb4e 	bl	80036c0 <WriteUint8ArrayEepromSafe>
        break;
 8006024:	e032      	b.n	800608c <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(PM2ConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8006026:	2118      	movs	r1, #24
 8006028:	187b      	adds	r3, r7, r1
 800602a:	785b      	ldrb	r3, [r3, #1]
 800602c:	001a      	movs	r2, r3
 800602e:	187b      	adds	r3, r7, r1
 8006030:	1c99      	adds	r1, r3, #2
 8006032:	4826      	ldr	r0, [pc, #152]	@ (80060cc <ProcessCmd+0x1dc>)
 8006034:	230c      	movs	r3, #12
 8006036:	f7fd fb43 	bl	80036c0 <WriteUint8ArrayEepromSafe>
        break;
 800603a:	e027      	b.n	800608c <ProcessCmd+0x19c>
            ClearEEprom(EEPromStartAddr, ConfigSize);
 800603c:	4b18      	ldr	r3, [pc, #96]	@ (80060a0 <ProcessCmd+0x1b0>)
 800603e:	21ba      	movs	r1, #186	@ 0xba
 8006040:	0018      	movs	r0, r3
 8006042:	f7fd fb82 	bl	800374a <ClearEEprom>
        break;
 8006046:	e021      	b.n	800608c <ProcessCmd+0x19c>
            uint16_t size = ((uint16_t)msg.Payload[0] << 8 | msg.Payload[1]);
 8006048:	2118      	movs	r1, #24
 800604a:	187b      	adds	r3, r7, r1
 800604c:	789b      	ldrb	r3, [r3, #2]
 800604e:	021b      	lsls	r3, r3, #8
 8006050:	b21a      	sxth	r2, r3
 8006052:	187b      	adds	r3, r7, r1
 8006054:	78db      	ldrb	r3, [r3, #3]
 8006056:	b21b      	sxth	r3, r3
 8006058:	4313      	orrs	r3, r2
 800605a:	b21a      	sxth	r2, r3
 800605c:	1dbb      	adds	r3, r7, #6
 800605e:	801a      	strh	r2, [r3, #0]
            if (size < EEPROM_SIZE)
 8006060:	1dbb      	adds	r3, r7, #6
 8006062:	881a      	ldrh	r2, [r3, #0]
 8006064:	23c0      	movs	r3, #192	@ 0xc0
 8006066:	015b      	lsls	r3, r3, #5
 8006068:	429a      	cmp	r2, r3
 800606a:	d207      	bcs.n	800607c <ProcessCmd+0x18c>
                ClearEEprom(EEPromStartAddr, size);
 800606c:	1dbb      	adds	r3, r7, #6
 800606e:	881b      	ldrh	r3, [r3, #0]
 8006070:	4a0b      	ldr	r2, [pc, #44]	@ (80060a0 <ProcessCmd+0x1b0>)
 8006072:	0019      	movs	r1, r3
 8006074:	0010      	movs	r0, r2
 8006076:	f7fd fb68 	bl	800374a <ClearEEprom>
            break;
 800607a:	e006      	b.n	800608a <ProcessCmd+0x19a>
                ClearEEprom(EEPROM_START, EEPROM_SIZE);
 800607c:	23c0      	movs	r3, #192	@ 0xc0
 800607e:	015b      	lsls	r3, r3, #5
 8006080:	4a07      	ldr	r2, [pc, #28]	@ (80060a0 <ProcessCmd+0x1b0>)
 8006082:	0019      	movs	r1, r3
 8006084:	0010      	movs	r0, r2
 8006086:	f7fd fb60 	bl	800374a <ClearEEprom>
            break;
 800608a:	46c0      	nop			@ (mov r8, r8)
}
 800608c:	46c0      	nop			@ (mov r8, r8)
 800608e:	46bd      	mov	sp, r7
 8006090:	b002      	add	sp, #8
 8006092:	bcb0      	pop	{r4, r5, r7}
 8006094:	bc08      	pop	{r3}
 8006096:	b004      	add	sp, #16
 8006098:	4718      	bx	r3
 800609a:	46c0      	nop			@ (mov r8, r8)
 800609c:	08024800 	.word	0x08024800
 80060a0:	08080000 	.word	0x08080000
 80060a4:	0808000c 	.word	0x0808000c
 80060a8:	08080018 	.word	0x08080018
 80060ac:	08080024 	.word	0x08080024
 80060b0:	08080030 	.word	0x08080030
 80060b4:	0808003c 	.word	0x0808003c
 80060b8:	08080048 	.word	0x08080048
 80060bc:	08080090 	.word	0x08080090
 80060c0:	08080078 	.word	0x08080078
 80060c4:	0808006c 	.word	0x0808006c
 80060c8:	08080060 	.word	0x08080060
 80060cc:	08080054 	.word	0x08080054

080060d0 <Create_Message>:

void Create_Message(uint8_t command, uint8_t *payload, uint8_t payloadLength)
{
 80060d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80060d2:	b085      	sub	sp, #20
 80060d4:	af00      	add	r7, sp, #0
 80060d6:	6039      	str	r1, [r7, #0]
 80060d8:	0011      	movs	r1, r2
 80060da:	1dfb      	adds	r3, r7, #7
 80060dc:	1c02      	adds	r2, r0, #0
 80060de:	701a      	strb	r2, [r3, #0]
 80060e0:	1dbb      	adds	r3, r7, #6
 80060e2:	1c0a      	adds	r2, r1, #0
 80060e4:	701a      	strb	r2, [r3, #0]
    static uint8_t message[TOTAL_BUFFER_SIZE];
    message[0] = (uint8_t)PREABMLE[0];
 80060e6:	2223      	movs	r2, #35	@ 0x23
 80060e8:	4b20      	ldr	r3, [pc, #128]	@ (800616c <Create_Message+0x9c>)
 80060ea:	701a      	strb	r2, [r3, #0]
    message[1] = command;
 80060ec:	4b1f      	ldr	r3, [pc, #124]	@ (800616c <Create_Message+0x9c>)
 80060ee:	1dfa      	adds	r2, r7, #7
 80060f0:	7812      	ldrb	r2, [r2, #0]
 80060f2:	705a      	strb	r2, [r3, #1]
    message[2] = payloadLength;
 80060f4:	4b1d      	ldr	r3, [pc, #116]	@ (800616c <Create_Message+0x9c>)
 80060f6:	1dba      	adds	r2, r7, #6
 80060f8:	7812      	ldrb	r2, [r2, #0]
 80060fa:	709a      	strb	r2, [r3, #2]
    memcpy(&message[3], payload, payloadLength);
 80060fc:	1dbb      	adds	r3, r7, #6
 80060fe:	781a      	ldrb	r2, [r3, #0]
 8006100:	6839      	ldr	r1, [r7, #0]
 8006102:	4b1b      	ldr	r3, [pc, #108]	@ (8006170 <Create_Message+0xa0>)
 8006104:	0018      	movs	r0, r3
 8006106:	f019 fccd 	bl	801faa4 <memcpy>
    uint16_t crcIndex = (HEADER_SIZE + payloadLength);
 800610a:	1dbb      	adds	r3, r7, #6
 800610c:	781b      	ldrb	r3, [r3, #0]
 800610e:	b29a      	uxth	r2, r3
 8006110:	250e      	movs	r5, #14
 8006112:	197b      	adds	r3, r7, r5
 8006114:	3203      	adds	r2, #3
 8006116:	801a      	strh	r2, [r3, #0]
    uint16_t calculatedCRC = CRC16_ARC(message, crcIndex);
 8006118:	260c      	movs	r6, #12
 800611a:	19bc      	adds	r4, r7, r6
 800611c:	197b      	adds	r3, r7, r5
 800611e:	881a      	ldrh	r2, [r3, #0]
 8006120:	4b12      	ldr	r3, [pc, #72]	@ (800616c <Create_Message+0x9c>)
 8006122:	0011      	movs	r1, r2
 8006124:	0018      	movs	r0, r3
 8006126:	f000 f825 	bl	8006174 <CRC16_ARC>
 800612a:	0003      	movs	r3, r0
 800612c:	8023      	strh	r3, [r4, #0]
    message[crcIndex] = calculatedCRC >> 8;
 800612e:	0030      	movs	r0, r6
 8006130:	183b      	adds	r3, r7, r0
 8006132:	881b      	ldrh	r3, [r3, #0]
 8006134:	0a1b      	lsrs	r3, r3, #8
 8006136:	b29a      	uxth	r2, r3
 8006138:	197b      	adds	r3, r7, r5
 800613a:	881b      	ldrh	r3, [r3, #0]
 800613c:	b2d1      	uxtb	r1, r2
 800613e:	4a0b      	ldr	r2, [pc, #44]	@ (800616c <Create_Message+0x9c>)
 8006140:	54d1      	strb	r1, [r2, r3]
    message[crcIndex + 1] = calculatedCRC & 0xFF;
 8006142:	197b      	adds	r3, r7, r5
 8006144:	881b      	ldrh	r3, [r3, #0]
 8006146:	3301      	adds	r3, #1
 8006148:	183a      	adds	r2, r7, r0
 800614a:	8812      	ldrh	r2, [r2, #0]
 800614c:	b2d1      	uxtb	r1, r2
 800614e:	4a07      	ldr	r2, [pc, #28]	@ (800616c <Create_Message+0x9c>)
 8006150:	54d1      	strb	r1, [r2, r3]
    CDC_Transmit_FS(message, (crcIndex + 2));
 8006152:	197b      	adds	r3, r7, r5
 8006154:	881b      	ldrh	r3, [r3, #0]
 8006156:	3302      	adds	r3, #2
 8006158:	b29a      	uxth	r2, r3
 800615a:	4b04      	ldr	r3, [pc, #16]	@ (800616c <Create_Message+0x9c>)
 800615c:	0011      	movs	r1, r2
 800615e:	0018      	movs	r0, r3
 8006160:	f016 f972 	bl	801c448 <CDC_Transmit_FS>
}
 8006164:	46c0      	nop			@ (mov r8, r8)
 8006166:	46bd      	mov	sp, r7
 8006168:	b005      	add	sp, #20
 800616a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800616c:	20000c48 	.word	0x20000c48
 8006170:	20000c4b 	.word	0x20000c4b

08006174 <CRC16_ARC>:

static uint16_t CRC16_ARC(uint8_t data[], uint16_t size)
{
 8006174:	b580      	push	{r7, lr}
 8006176:	b086      	sub	sp, #24
 8006178:	af00      	add	r7, sp, #0
 800617a:	6078      	str	r0, [r7, #4]
 800617c:	000a      	movs	r2, r1
 800617e:	1cbb      	adds	r3, r7, #2
 8006180:	801a      	strh	r2, [r3, #0]
    uint16_t crc = 0;
 8006182:	2316      	movs	r3, #22
 8006184:	18fb      	adds	r3, r7, r3
 8006186:	2200      	movs	r2, #0
 8006188:	801a      	strh	r2, [r3, #0]

    for (int i = 0; i < size; i++)
 800618a:	2300      	movs	r3, #0
 800618c:	613b      	str	r3, [r7, #16]
 800618e:	e02e      	b.n	80061ee <CRC16_ARC+0x7a>
    {
        crc ^= data[i];
 8006190:	693b      	ldr	r3, [r7, #16]
 8006192:	687a      	ldr	r2, [r7, #4]
 8006194:	18d3      	adds	r3, r2, r3
 8006196:	781b      	ldrb	r3, [r3, #0]
 8006198:	0019      	movs	r1, r3
 800619a:	2216      	movs	r2, #22
 800619c:	18bb      	adds	r3, r7, r2
 800619e:	18ba      	adds	r2, r7, r2
 80061a0:	8812      	ldrh	r2, [r2, #0]
 80061a2:	404a      	eors	r2, r1
 80061a4:	801a      	strh	r2, [r3, #0]

        for (int j = 0; j < 8; j++)
 80061a6:	2300      	movs	r3, #0
 80061a8:	60fb      	str	r3, [r7, #12]
 80061aa:	e01a      	b.n	80061e2 <CRC16_ARC+0x6e>
        {
            if ((crc & 0x0001) != 0)
 80061ac:	2116      	movs	r1, #22
 80061ae:	187b      	adds	r3, r7, r1
 80061b0:	881b      	ldrh	r3, [r3, #0]
 80061b2:	2201      	movs	r2, #1
 80061b4:	4013      	ands	r3, r2
 80061b6:	d00b      	beq.n	80061d0 <CRC16_ARC+0x5c>
            {
                crc >>= 1;
 80061b8:	187b      	adds	r3, r7, r1
 80061ba:	187a      	adds	r2, r7, r1
 80061bc:	8812      	ldrh	r2, [r2, #0]
 80061be:	0852      	lsrs	r2, r2, #1
 80061c0:	801a      	strh	r2, [r3, #0]
                crc ^= 0xA001;
 80061c2:	187b      	adds	r3, r7, r1
 80061c4:	187a      	adds	r2, r7, r1
 80061c6:	8812      	ldrh	r2, [r2, #0]
 80061c8:	490f      	ldr	r1, [pc, #60]	@ (8006208 <CRC16_ARC+0x94>)
 80061ca:	404a      	eors	r2, r1
 80061cc:	801a      	strh	r2, [r3, #0]
 80061ce:	e005      	b.n	80061dc <CRC16_ARC+0x68>
            }
            else
            {
                crc >>= 1;
 80061d0:	2216      	movs	r2, #22
 80061d2:	18bb      	adds	r3, r7, r2
 80061d4:	18ba      	adds	r2, r7, r2
 80061d6:	8812      	ldrh	r2, [r2, #0]
 80061d8:	0852      	lsrs	r2, r2, #1
 80061da:	801a      	strh	r2, [r3, #0]
        for (int j = 0; j < 8; j++)
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	3301      	adds	r3, #1
 80061e0:	60fb      	str	r3, [r7, #12]
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	2b07      	cmp	r3, #7
 80061e6:	dde1      	ble.n	80061ac <CRC16_ARC+0x38>
    for (int i = 0; i < size; i++)
 80061e8:	693b      	ldr	r3, [r7, #16]
 80061ea:	3301      	adds	r3, #1
 80061ec:	613b      	str	r3, [r7, #16]
 80061ee:	1cbb      	adds	r3, r7, #2
 80061f0:	881b      	ldrh	r3, [r3, #0]
 80061f2:	693a      	ldr	r2, [r7, #16]
 80061f4:	429a      	cmp	r2, r3
 80061f6:	dbcb      	blt.n	8006190 <CRC16_ARC+0x1c>
            }
        }
    }
    return crc; 
 80061f8:	2316      	movs	r3, #22
 80061fa:	18fb      	adds	r3, r7, r3
 80061fc:	881b      	ldrh	r3, [r3, #0]
}
 80061fe:	0018      	movs	r0, r3
 8006200:	46bd      	mov	sp, r7
 8006202:	b006      	add	sp, #24
 8006204:	bd80      	pop	{r7, pc}
 8006206:	46c0      	nop			@ (mov r8, r8)
 8006208:	ffffa001 	.word	0xffffa001

0800620c <ReadBatteryVoltage>:

  ADC_ChannelConfTypeDef sConfig = {0};
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  uint32_t Vref = 2915;   // reference voltage in mV

float ReadBatteryVoltage(void){
 800620c:	b580      	push	{r7, lr}
 800620e:	af00      	add	r7, sp, #0
  /* Channel 14 is de battery voltage */
  static uint32_t value = 0;
  static float trueValue = 0;
  sConfig.Channel = ADC_CHANNEL_14;
 8006210:	4b26      	ldr	r3, [pc, #152]	@ (80062ac <ReadBatteryVoltage+0xa0>)
 8006212:	4a27      	ldr	r2, [pc, #156]	@ (80062b0 <ReadBatteryVoltage+0xa4>)
 8006214:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8006216:	4b25      	ldr	r3, [pc, #148]	@ (80062ac <ReadBatteryVoltage+0xa0>)
 8006218:	2280      	movs	r2, #128	@ 0x80
 800621a:	0152      	lsls	r2, r2, #5
 800621c:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 800621e:	4a23      	ldr	r2, [pc, #140]	@ (80062ac <ReadBatteryVoltage+0xa0>)
 8006220:	4b24      	ldr	r3, [pc, #144]	@ (80062b4 <ReadBatteryVoltage+0xa8>)
 8006222:	0011      	movs	r1, r2
 8006224:	0018      	movs	r0, r3
 8006226:	f008 fbf7 	bl	800ea18 <HAL_ADC_ConfigChannel>
 800622a:	1e03      	subs	r3, r0, #0
 800622c:	d001      	beq.n	8006232 <ReadBatteryVoltage+0x26>
    Error_Handler();
 800622e:	f001 ff1b 	bl	8008068 <Error_Handler>
  }
  HAL_ADC_Start(&hadc);
 8006232:	4b20      	ldr	r3, [pc, #128]	@ (80062b4 <ReadBatteryVoltage+0xa8>)
 8006234:	0018      	movs	r0, r3
 8006236:	f008 faf3 	bl	800e820 <HAL_ADC_Start>
  HAL_ADC_PollForConversion(&hadc, 1);
 800623a:	4b1e      	ldr	r3, [pc, #120]	@ (80062b4 <ReadBatteryVoltage+0xa8>)
 800623c:	2101      	movs	r1, #1
 800623e:	0018      	movs	r0, r3
 8006240:	f008 fb42 	bl	800e8c8 <HAL_ADC_PollForConversion>
  value = (HAL_ADC_GetValue(&hadc)*Vref*2)/4095;
 8006244:	4b1b      	ldr	r3, [pc, #108]	@ (80062b4 <ReadBatteryVoltage+0xa8>)
 8006246:	0018      	movs	r0, r3
 8006248:	f008 fbda 	bl	800ea00 <HAL_ADC_GetValue>
 800624c:	0002      	movs	r2, r0
 800624e:	4b1a      	ldr	r3, [pc, #104]	@ (80062b8 <ReadBatteryVoltage+0xac>)
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	4353      	muls	r3, r2
 8006254:	005b      	lsls	r3, r3, #1
 8006256:	4919      	ldr	r1, [pc, #100]	@ (80062bc <ReadBatteryVoltage+0xb0>)
 8006258:	0018      	movs	r0, r3
 800625a:	f7f9 ffa3 	bl	80001a4 <__udivsi3>
 800625e:	0003      	movs	r3, r0
 8006260:	001a      	movs	r2, r3
 8006262:	4b17      	ldr	r3, [pc, #92]	@ (80062c0 <ReadBatteryVoltage+0xb4>)
 8006264:	601a      	str	r2, [r3, #0]
  trueValue = (float)value/1000.0;
 8006266:	4b16      	ldr	r3, [pc, #88]	@ (80062c0 <ReadBatteryVoltage+0xb4>)
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	0018      	movs	r0, r3
 800626c:	f7fb f9fc 	bl	8001668 <__aeabi_ui2f>
 8006270:	1c03      	adds	r3, r0, #0
 8006272:	4914      	ldr	r1, [pc, #80]	@ (80062c4 <ReadBatteryVoltage+0xb8>)
 8006274:	1c18      	adds	r0, r3, #0
 8006276:	f7fa fcad 	bl	8000bd4 <__aeabi_fdiv>
 800627a:	1c03      	adds	r3, r0, #0
 800627c:	1c1a      	adds	r2, r3, #0
 800627e:	4b12      	ldr	r3, [pc, #72]	@ (80062c8 <ReadBatteryVoltage+0xbc>)
 8006280:	601a      	str	r2, [r3, #0]
  /* Disable Channel 14 */
  sConfig.Channel = ADC_CHANNEL_14;
 8006282:	4b0a      	ldr	r3, [pc, #40]	@ (80062ac <ReadBatteryVoltage+0xa0>)
 8006284:	4a0a      	ldr	r2, [pc, #40]	@ (80062b0 <ReadBatteryVoltage+0xa4>)
 8006286:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_NONE;
 8006288:	4b08      	ldr	r3, [pc, #32]	@ (80062ac <ReadBatteryVoltage+0xa0>)
 800628a:	4a10      	ldr	r2, [pc, #64]	@ (80062cc <ReadBatteryVoltage+0xc0>)
 800628c:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 800628e:	4a07      	ldr	r2, [pc, #28]	@ (80062ac <ReadBatteryVoltage+0xa0>)
 8006290:	4b08      	ldr	r3, [pc, #32]	@ (80062b4 <ReadBatteryVoltage+0xa8>)
 8006292:	0011      	movs	r1, r2
 8006294:	0018      	movs	r0, r3
 8006296:	f008 fbbf 	bl	800ea18 <HAL_ADC_ConfigChannel>
 800629a:	1e03      	subs	r3, r0, #0
 800629c:	d001      	beq.n	80062a2 <ReadBatteryVoltage+0x96>
    Error_Handler();
 800629e:	f001 fee3 	bl	8008068 <Error_Handler>
  }
  return trueValue;
 80062a2:	4b09      	ldr	r3, [pc, #36]	@ (80062c8 <ReadBatteryVoltage+0xbc>)
 80062a4:	681b      	ldr	r3, [r3, #0]
 }
 80062a6:	1c18      	adds	r0, r3, #0
 80062a8:	46bd      	mov	sp, r7
 80062aa:	bd80      	pop	{r7, pc}
 80062ac:	20000d50 	.word	0x20000d50
 80062b0:	38004000 	.word	0x38004000
 80062b4:	20000d90 	.word	0x20000d90
 80062b8:	2000002c 	.word	0x2000002c
 80062bc:	00000fff 	.word	0x00000fff
 80062c0:	20000d58 	.word	0x20000d58
 80062c4:	447a0000 	.word	0x447a0000
 80062c8:	20000d5c 	.word	0x20000d5c
 80062cc:	00001001 	.word	0x00001001

080062d0 <ReadSolarVoltage>:

/* function to read the actual battery voltage */

float ReadSolarVoltage(void){
 80062d0:	b580      	push	{r7, lr}
 80062d2:	af00      	add	r7, sp, #0
  /* Channel 15 is the Solar voltage */
  static uint32_t value = 0;
  static float trueValue = 0;
  sConfig.Channel = ADC_CHANNEL_15;
 80062d4:	4b27      	ldr	r3, [pc, #156]	@ (8006374 <ReadSolarVoltage+0xa4>)
 80062d6:	4a28      	ldr	r2, [pc, #160]	@ (8006378 <ReadSolarVoltage+0xa8>)
 80062d8:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 80062da:	4b26      	ldr	r3, [pc, #152]	@ (8006374 <ReadSolarVoltage+0xa4>)
 80062dc:	2280      	movs	r2, #128	@ 0x80
 80062de:	0152      	lsls	r2, r2, #5
 80062e0:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 80062e2:	4a24      	ldr	r2, [pc, #144]	@ (8006374 <ReadSolarVoltage+0xa4>)
 80062e4:	4b25      	ldr	r3, [pc, #148]	@ (800637c <ReadSolarVoltage+0xac>)
 80062e6:	0011      	movs	r1, r2
 80062e8:	0018      	movs	r0, r3
 80062ea:	f008 fb95 	bl	800ea18 <HAL_ADC_ConfigChannel>
 80062ee:	1e03      	subs	r3, r0, #0
 80062f0:	d001      	beq.n	80062f6 <ReadSolarVoltage+0x26>
    Error_Handler();
 80062f2:	f001 feb9 	bl	8008068 <Error_Handler>
  }
  HAL_ADC_Start(&hadc);
 80062f6:	4b21      	ldr	r3, [pc, #132]	@ (800637c <ReadSolarVoltage+0xac>)
 80062f8:	0018      	movs	r0, r3
 80062fa:	f008 fa91 	bl	800e820 <HAL_ADC_Start>
  HAL_ADC_PollForConversion(&hadc, 1);
 80062fe:	4b1f      	ldr	r3, [pc, #124]	@ (800637c <ReadSolarVoltage+0xac>)
 8006300:	2101      	movs	r1, #1
 8006302:	0018      	movs	r0, r3
 8006304:	f008 fae0 	bl	800e8c8 <HAL_ADC_PollForConversion>
  value = (HAL_ADC_GetValue(&hadc)*Vref*3)/4095;
 8006308:	4b1c      	ldr	r3, [pc, #112]	@ (800637c <ReadSolarVoltage+0xac>)
 800630a:	0018      	movs	r0, r3
 800630c:	f008 fb78 	bl	800ea00 <HAL_ADC_GetValue>
 8006310:	0002      	movs	r2, r0
 8006312:	4b1b      	ldr	r3, [pc, #108]	@ (8006380 <ReadSolarVoltage+0xb0>)
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	435a      	muls	r2, r3
 8006318:	0013      	movs	r3, r2
 800631a:	005b      	lsls	r3, r3, #1
 800631c:	189b      	adds	r3, r3, r2
 800631e:	4919      	ldr	r1, [pc, #100]	@ (8006384 <ReadSolarVoltage+0xb4>)
 8006320:	0018      	movs	r0, r3
 8006322:	f7f9 ff3f 	bl	80001a4 <__udivsi3>
 8006326:	0003      	movs	r3, r0
 8006328:	001a      	movs	r2, r3
 800632a:	4b17      	ldr	r3, [pc, #92]	@ (8006388 <ReadSolarVoltage+0xb8>)
 800632c:	601a      	str	r2, [r3, #0]
  trueValue = (float)value / 1000.0;
 800632e:	4b16      	ldr	r3, [pc, #88]	@ (8006388 <ReadSolarVoltage+0xb8>)
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	0018      	movs	r0, r3
 8006334:	f7fb f998 	bl	8001668 <__aeabi_ui2f>
 8006338:	1c03      	adds	r3, r0, #0
 800633a:	4914      	ldr	r1, [pc, #80]	@ (800638c <ReadSolarVoltage+0xbc>)
 800633c:	1c18      	adds	r0, r3, #0
 800633e:	f7fa fc49 	bl	8000bd4 <__aeabi_fdiv>
 8006342:	1c03      	adds	r3, r0, #0
 8006344:	1c1a      	adds	r2, r3, #0
 8006346:	4b12      	ldr	r3, [pc, #72]	@ (8006390 <ReadSolarVoltage+0xc0>)
 8006348:	601a      	str	r2, [r3, #0]
  /* Disable Channel 14 */
  sConfig.Channel = ADC_CHANNEL_15;
 800634a:	4b0a      	ldr	r3, [pc, #40]	@ (8006374 <ReadSolarVoltage+0xa4>)
 800634c:	4a0a      	ldr	r2, [pc, #40]	@ (8006378 <ReadSolarVoltage+0xa8>)
 800634e:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_NONE;
 8006350:	4b08      	ldr	r3, [pc, #32]	@ (8006374 <ReadSolarVoltage+0xa4>)
 8006352:	4a10      	ldr	r2, [pc, #64]	@ (8006394 <ReadSolarVoltage+0xc4>)
 8006354:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 8006356:	4a07      	ldr	r2, [pc, #28]	@ (8006374 <ReadSolarVoltage+0xa4>)
 8006358:	4b08      	ldr	r3, [pc, #32]	@ (800637c <ReadSolarVoltage+0xac>)
 800635a:	0011      	movs	r1, r2
 800635c:	0018      	movs	r0, r3
 800635e:	f008 fb5b 	bl	800ea18 <HAL_ADC_ConfigChannel>
 8006362:	1e03      	subs	r3, r0, #0
 8006364:	d001      	beq.n	800636a <ReadSolarVoltage+0x9a>
    Error_Handler();
 8006366:	f001 fe7f 	bl	8008068 <Error_Handler>
  }
  return trueValue;
 800636a:	4b09      	ldr	r3, [pc, #36]	@ (8006390 <ReadSolarVoltage+0xc0>)
 800636c:	681b      	ldr	r3, [r3, #0]
 }
 800636e:	1c18      	adds	r0, r3, #0
 8006370:	46bd      	mov	sp, r7
 8006372:	bd80      	pop	{r7, pc}
 8006374:	20000d50 	.word	0x20000d50
 8006378:	3c008000 	.word	0x3c008000
 800637c:	20000d90 	.word	0x20000d90
 8006380:	2000002c 	.word	0x2000002c
 8006384:	00000fff 	.word	0x00000fff
 8006388:	20000d60 	.word	0x20000d60
 800638c:	447a0000 	.word	0x447a0000
 8006390:	20000d64 	.word	0x20000d64
 8006394:	00001001 	.word	0x00001001

08006398 <Check_USB_PowerOn>:

// True if 5V on USB Connector
bool Check_USB_PowerOn(void){
 8006398:	b580      	push	{r7, lr}
 800639a:	af00      	add	r7, sp, #0
  return (HAL_GPIO_ReadPin(VusbDetect_GPIO_Port, VusbDetect_Pin));
 800639c:	23a0      	movs	r3, #160	@ 0xa0
 800639e:	05db      	lsls	r3, r3, #23
 80063a0:	2180      	movs	r1, #128	@ 0x80
 80063a2:	0018      	movs	r0, r3
 80063a4:	f009 fad4 	bl	800f950 <HAL_GPIO_ReadPin>
 80063a8:	0003      	movs	r3, r0
 80063aa:	1e5a      	subs	r2, r3, #1
 80063ac:	4193      	sbcs	r3, r2
 80063ae:	b2db      	uxtb	r3, r3
}
 80063b0:	0018      	movs	r0, r3
 80063b2:	46bd      	mov	sp, r7
 80063b4:	bd80      	pop	{r7, pc}

080063b6 <BootButton_Pressed>:

// True if Userbutton A ( Boot ) is pressed
// It is NOT Possible to read the Boot0 pin after powerup / Reset!!
// So a copy is hard wired to PA15

bool     BootButton_Pressed(void){
 80063b6:	b580      	push	{r7, lr}
 80063b8:	af00      	add	r7, sp, #0
  return   (HAL_GPIO_ReadPin(BOOT0_GPIO_Port, BOOT0_Pin));
 80063ba:	2380      	movs	r3, #128	@ 0x80
 80063bc:	021a      	lsls	r2, r3, #8
 80063be:	23a0      	movs	r3, #160	@ 0xa0
 80063c0:	05db      	lsls	r3, r3, #23
 80063c2:	0011      	movs	r1, r2
 80063c4:	0018      	movs	r0, r3
 80063c6:	f009 fac3 	bl	800f950 <HAL_GPIO_ReadPin>
 80063ca:	0003      	movs	r3, r0
 80063cc:	1e5a      	subs	r2, r3, #1
 80063ce:	4193      	sbcs	r3, r2
 80063d0:	b2db      	uxtb	r3, r3
}
 80063d2:	0018      	movs	r0, r3
 80063d4:	46bd      	mov	sp, r7
 80063d6:	bd80      	pop	{r7, pc}

080063d8 <UserButton_Pressed>:

// True if Userbutton B is pressed
bool     UserButton_Pressed(void){
 80063d8:	b580      	push	{r7, lr}
 80063da:	af00      	add	r7, sp, #0
  return   (!HAL_GPIO_ReadPin(User_Button_GPIO_Port, User_Button_Pin));
 80063dc:	4b05      	ldr	r3, [pc, #20]	@ (80063f4 <UserButton_Pressed+0x1c>)
 80063de:	2104      	movs	r1, #4
 80063e0:	0018      	movs	r0, r3
 80063e2:	f009 fab5 	bl	800f950 <HAL_GPIO_ReadPin>
 80063e6:	0003      	movs	r3, r0
 80063e8:	425a      	negs	r2, r3
 80063ea:	4153      	adcs	r3, r2
 80063ec:	b2db      	uxtb	r3, r3
}
 80063ee:	0018      	movs	r0, r3
 80063f0:	46bd      	mov	sp, r7
 80063f2:	bd80      	pop	{r7, pc}
 80063f4:	50000c00 	.word	0x50000c00

080063f8 <showTime>:
char strbuf[24] = {0}; //22-jan-24 23h:12m:23s

uint32_t makeTime(RTC_DateTypeDef* currentDate, RTC_TimeTypeDef* currentTime);
void breakPosixTime(uint32_t timeInput, RTC_DateTypeDef* currentDate, RTC_TimeTypeDef* currentTime);

void showTime() {
 80063f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80063fa:	46d6      	mov	lr, sl
 80063fc:	464f      	mov	r7, r9
 80063fe:	4646      	mov	r6, r8
 8006400:	b5c0      	push	{r6, r7, lr}
 8006402:	b08e      	sub	sp, #56	@ 0x38
 8006404:	af08      	add	r7, sp, #32
  if (posixBootTime == 0) {
 8006406:	4b21      	ldr	r3, [pc, #132]	@ (800648c <showTime+0x94>)
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	2b00      	cmp	r3, #0
 800640c:	d036      	beq.n	800647c <showTime+0x84>
    return;
  }
  RTC_TimeTypeDef currentTime;
  RTC_DateTypeDef currentDate;
  RTC_GetTime(&currentTime, &currentDate);
 800640e:	003a      	movs	r2, r7
 8006410:	1d3b      	adds	r3, r7, #4
 8006412:	0011      	movs	r1, r2
 8006414:	0018      	movs	r0, r3
 8006416:	f000 fa2b 	bl	8006870 <RTC_GetTime>
  UpdateSystemUptime();
 800641a:	f000 f83f 	bl	800649c <UpdateSystemUptime>
  printf("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm:%02ds\r\n",
      currentDate.Date, monthNames[currentDate.Month-1], currentDate.Year, currentTime.Hours, currentTime.Minutes,
 800641e:	003b      	movs	r3, r7
 8006420:	789b      	ldrb	r3, [r3, #2]
  printf("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm:%02ds\r\n",
 8006422:	4699      	mov	r9, r3
      currentDate.Date, monthNames[currentDate.Month-1], currentDate.Year, currentTime.Hours, currentTime.Minutes,
 8006424:	003b      	movs	r3, r7
 8006426:	785b      	ldrb	r3, [r3, #1]
 8006428:	1e5a      	subs	r2, r3, #1
  printf("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm:%02ds\r\n",
 800642a:	4b19      	ldr	r3, [pc, #100]	@ (8006490 <showTime+0x98>)
 800642c:	0092      	lsls	r2, r2, #2
 800642e:	58d2      	ldr	r2, [r2, r3]
      currentDate.Date, monthNames[currentDate.Month-1], currentDate.Year, currentTime.Hours, currentTime.Minutes,
 8006430:	003b      	movs	r3, r7
 8006432:	78db      	ldrb	r3, [r3, #3]
  printf("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm:%02ds\r\n",
 8006434:	469a      	mov	sl, r3
      currentDate.Date, monthNames[currentDate.Month-1], currentDate.Year, currentTime.Hours, currentTime.Minutes,
 8006436:	1d3b      	adds	r3, r7, #4
 8006438:	781b      	ldrb	r3, [r3, #0]
  printf("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm:%02ds\r\n",
 800643a:	0019      	movs	r1, r3
      currentDate.Date, monthNames[currentDate.Month-1], currentDate.Year, currentTime.Hours, currentTime.Minutes,
 800643c:	1d3b      	adds	r3, r7, #4
 800643e:	785b      	ldrb	r3, [r3, #1]
  printf("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm:%02ds\r\n",
 8006440:	001c      	movs	r4, r3
      currentTime.Seconds, myUpTime.Day, myUpTime.Hour, myUpTime.Minutes, myUpTime.Seconds);
 8006442:	1d3b      	adds	r3, r7, #4
 8006444:	789b      	ldrb	r3, [r3, #2]
  printf("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm:%02ds\r\n",
 8006446:	001d      	movs	r5, r3
      currentTime.Seconds, myUpTime.Day, myUpTime.Hour, myUpTime.Minutes, myUpTime.Seconds);
 8006448:	4b12      	ldr	r3, [pc, #72]	@ (8006494 <showTime+0x9c>)
 800644a:	881b      	ldrh	r3, [r3, #0]
  printf("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm:%02ds\r\n",
 800644c:	001e      	movs	r6, r3
      currentTime.Seconds, myUpTime.Day, myUpTime.Hour, myUpTime.Minutes, myUpTime.Seconds);
 800644e:	4b11      	ldr	r3, [pc, #68]	@ (8006494 <showTime+0x9c>)
 8006450:	789b      	ldrb	r3, [r3, #2]
  printf("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm:%02ds\r\n",
 8006452:	469c      	mov	ip, r3
      currentTime.Seconds, myUpTime.Day, myUpTime.Hour, myUpTime.Minutes, myUpTime.Seconds);
 8006454:	4b0f      	ldr	r3, [pc, #60]	@ (8006494 <showTime+0x9c>)
 8006456:	78db      	ldrb	r3, [r3, #3]
  printf("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm:%02ds\r\n",
 8006458:	4698      	mov	r8, r3
      currentTime.Seconds, myUpTime.Day, myUpTime.Hour, myUpTime.Minutes, myUpTime.Seconds);
 800645a:	4b0e      	ldr	r3, [pc, #56]	@ (8006494 <showTime+0x9c>)
 800645c:	791b      	ldrb	r3, [r3, #4]
  printf("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm:%02ds\r\n",
 800645e:	480e      	ldr	r0, [pc, #56]	@ (8006498 <showTime+0xa0>)
 8006460:	9306      	str	r3, [sp, #24]
 8006462:	4643      	mov	r3, r8
 8006464:	9305      	str	r3, [sp, #20]
 8006466:	4663      	mov	r3, ip
 8006468:	9304      	str	r3, [sp, #16]
 800646a:	9603      	str	r6, [sp, #12]
 800646c:	9502      	str	r5, [sp, #8]
 800646e:	9401      	str	r4, [sp, #4]
 8006470:	9100      	str	r1, [sp, #0]
 8006472:	4653      	mov	r3, sl
 8006474:	4649      	mov	r1, r9
 8006476:	f019 f885 	bl	801f584 <iprintf>
 800647a:	e000      	b.n	800647e <showTime+0x86>
    return;
 800647c:	46c0      	nop			@ (mov r8, r8)
}
 800647e:	46bd      	mov	sp, r7
 8006480:	b006      	add	sp, #24
 8006482:	bce0      	pop	{r5, r6, r7}
 8006484:	46ba      	mov	sl, r7
 8006486:	46b1      	mov	r9, r6
 8006488:	46a8      	mov	r8, r5
 800648a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800648c:	20000d74 	.word	0x20000d74
 8006490:	2000004c 	.word	0x2000004c
 8006494:	20000d68 	.word	0x20000d68
 8006498:	08023370 	.word	0x08023370

0800649c <UpdateSystemUptime>:
  RTC_GetTime(&currentTime, &currentDate);
  posixBootTime = makeTime(&currentDate, &currentTime);
}
*/

void UpdateSystemUptime() {
 800649c:	b580      	push	{r7, lr}
 800649e:	b088      	sub	sp, #32
 80064a0:	af00      	add	r7, sp, #0
  RTC_TimeTypeDef currentTime;
  RTC_DateTypeDef currentDate;
  uint32_t uxUptime;
  uint32_t time;
  RTC_GetTime(&currentTime, &currentDate);
 80064a2:	003a      	movs	r2, r7
 80064a4:	1d3b      	adds	r3, r7, #4
 80064a6:	0011      	movs	r1, r2
 80064a8:	0018      	movs	r0, r3
 80064aa:	f000 f9e1 	bl	8006870 <RTC_GetTime>
  uxUptime = makeTime(&currentDate, &currentTime) - posixBootTime;
 80064ae:	1d3a      	adds	r2, r7, #4
 80064b0:	003b      	movs	r3, r7
 80064b2:	0011      	movs	r1, r2
 80064b4:	0018      	movs	r0, r3
 80064b6:	f000 fb7d 	bl	8006bb4 <makeTime>
 80064ba:	0002      	movs	r2, r0
 80064bc:	4b1e      	ldr	r3, [pc, #120]	@ (8006538 <UpdateSystemUptime+0x9c>)
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	1ad3      	subs	r3, r2, r3
 80064c2:	61fb      	str	r3, [r7, #28]
  time = uxUptime;
 80064c4:	69fb      	ldr	r3, [r7, #28]
 80064c6:	61bb      	str	r3, [r7, #24]
  myUpTime.Seconds = time % 60;
 80064c8:	69bb      	ldr	r3, [r7, #24]
 80064ca:	213c      	movs	r1, #60	@ 0x3c
 80064cc:	0018      	movs	r0, r3
 80064ce:	f7f9 feef 	bl	80002b0 <__aeabi_uidivmod>
 80064d2:	000b      	movs	r3, r1
 80064d4:	b2da      	uxtb	r2, r3
 80064d6:	4b19      	ldr	r3, [pc, #100]	@ (800653c <UpdateSystemUptime+0xa0>)
 80064d8:	711a      	strb	r2, [r3, #4]
  time /= 60; // now it is minutes
 80064da:	69bb      	ldr	r3, [r7, #24]
 80064dc:	213c      	movs	r1, #60	@ 0x3c
 80064de:	0018      	movs	r0, r3
 80064e0:	f7f9 fe60 	bl	80001a4 <__udivsi3>
 80064e4:	0003      	movs	r3, r0
 80064e6:	61bb      	str	r3, [r7, #24]
  myUpTime.Minutes = time % 60;
 80064e8:	69bb      	ldr	r3, [r7, #24]
 80064ea:	213c      	movs	r1, #60	@ 0x3c
 80064ec:	0018      	movs	r0, r3
 80064ee:	f7f9 fedf 	bl	80002b0 <__aeabi_uidivmod>
 80064f2:	000b      	movs	r3, r1
 80064f4:	b2da      	uxtb	r2, r3
 80064f6:	4b11      	ldr	r3, [pc, #68]	@ (800653c <UpdateSystemUptime+0xa0>)
 80064f8:	70da      	strb	r2, [r3, #3]
  time /= 60; // now it is hours
 80064fa:	69bb      	ldr	r3, [r7, #24]
 80064fc:	213c      	movs	r1, #60	@ 0x3c
 80064fe:	0018      	movs	r0, r3
 8006500:	f7f9 fe50 	bl	80001a4 <__udivsi3>
 8006504:	0003      	movs	r3, r0
 8006506:	61bb      	str	r3, [r7, #24]
  myUpTime.Hour = time % 24;
 8006508:	69bb      	ldr	r3, [r7, #24]
 800650a:	2118      	movs	r1, #24
 800650c:	0018      	movs	r0, r3
 800650e:	f7f9 fecf 	bl	80002b0 <__aeabi_uidivmod>
 8006512:	000b      	movs	r3, r1
 8006514:	b2da      	uxtb	r2, r3
 8006516:	4b09      	ldr	r3, [pc, #36]	@ (800653c <UpdateSystemUptime+0xa0>)
 8006518:	709a      	strb	r2, [r3, #2]
  time /= 24; // now it is days
 800651a:	69bb      	ldr	r3, [r7, #24]
 800651c:	2118      	movs	r1, #24
 800651e:	0018      	movs	r0, r3
 8006520:	f7f9 fe40 	bl	80001a4 <__udivsi3>
 8006524:	0003      	movs	r3, r0
 8006526:	61bb      	str	r3, [r7, #24]
  myUpTime.Day = time; // now it is days
 8006528:	69bb      	ldr	r3, [r7, #24]
 800652a:	b29a      	uxth	r2, r3
 800652c:	4b03      	ldr	r3, [pc, #12]	@ (800653c <UpdateSystemUptime+0xa0>)
 800652e:	801a      	strh	r2, [r3, #0]
//  Info("Current time is: %02d:%02d:%02d System uptime is: %dd %02dh:%02dm:%02ds",
//      currentTime.Hours, currentTime.Minutes, currentTime.Seconds, myUpTime.Day, myUpTime.Hour, myUpTime.Minutes, myUpTime.Seconds);
}
 8006530:	46c0      	nop			@ (mov r8, r8)
 8006532:	46bd      	mov	sp, r7
 8006534:	b008      	add	sp, #32
 8006536:	bd80      	pop	{r7, pc}
 8006538:	20000d74 	.word	0x20000d74
 800653c:	20000d68 	.word	0x20000d68

08006540 <aBuff2int>:

//  0         1         2         3  3
//  0         0         0         0  3
//  +CIPSNTPTIME:Thu Jan  1 01:00:03 1970
//OK
uint8_t aBuff2int(char* aBuff, uint8_t start, uint8_t stop) {
 8006540:	b590      	push	{r4, r7, lr}
 8006542:	b085      	sub	sp, #20
 8006544:	af00      	add	r7, sp, #0
 8006546:	6078      	str	r0, [r7, #4]
 8006548:	0008      	movs	r0, r1
 800654a:	0011      	movs	r1, r2
 800654c:	1cfb      	adds	r3, r7, #3
 800654e:	1c02      	adds	r2, r0, #0
 8006550:	701a      	strb	r2, [r3, #0]
 8006552:	1cbb      	adds	r3, r7, #2
 8006554:	1c0a      	adds	r2, r1, #0
 8006556:	701a      	strb	r2, [r3, #0]
  char iBuff[5];
  uint8_t i;
  uint8_t pos = 0;
 8006558:	230e      	movs	r3, #14
 800655a:	18fb      	adds	r3, r7, r3
 800655c:	2200      	movs	r2, #0
 800655e:	701a      	strb	r2, [r3, #0]
  for (i = start; i <= stop ; i++){
 8006560:	230f      	movs	r3, #15
 8006562:	18fb      	adds	r3, r7, r3
 8006564:	1cfa      	adds	r2, r7, #3
 8006566:	7812      	ldrb	r2, [r2, #0]
 8006568:	701a      	strb	r2, [r3, #0]
 800656a:	e015      	b.n	8006598 <aBuff2int+0x58>
    iBuff[pos] = aBuff[i];
 800656c:	200f      	movs	r0, #15
 800656e:	183b      	adds	r3, r7, r0
 8006570:	781b      	ldrb	r3, [r3, #0]
 8006572:	687a      	ldr	r2, [r7, #4]
 8006574:	18d2      	adds	r2, r2, r3
 8006576:	240e      	movs	r4, #14
 8006578:	193b      	adds	r3, r7, r4
 800657a:	781b      	ldrb	r3, [r3, #0]
 800657c:	7811      	ldrb	r1, [r2, #0]
 800657e:	2208      	movs	r2, #8
 8006580:	18ba      	adds	r2, r7, r2
 8006582:	54d1      	strb	r1, [r2, r3]
    pos++;
 8006584:	193b      	adds	r3, r7, r4
 8006586:	781a      	ldrb	r2, [r3, #0]
 8006588:	193b      	adds	r3, r7, r4
 800658a:	3201      	adds	r2, #1
 800658c:	701a      	strb	r2, [r3, #0]
  for (i = start; i <= stop ; i++){
 800658e:	183b      	adds	r3, r7, r0
 8006590:	781a      	ldrb	r2, [r3, #0]
 8006592:	183b      	adds	r3, r7, r0
 8006594:	3201      	adds	r2, #1
 8006596:	701a      	strb	r2, [r3, #0]
 8006598:	200f      	movs	r0, #15
 800659a:	183a      	adds	r2, r7, r0
 800659c:	1cbb      	adds	r3, r7, #2
 800659e:	7812      	ldrb	r2, [r2, #0]
 80065a0:	781b      	ldrb	r3, [r3, #0]
 80065a2:	429a      	cmp	r2, r3
 80065a4:	d9e2      	bls.n	800656c <aBuff2int+0x2c>
  }
  iBuff[pos] = '\0';
 80065a6:	230e      	movs	r3, #14
 80065a8:	18fb      	adds	r3, r7, r3
 80065aa:	781b      	ldrb	r3, [r3, #0]
 80065ac:	2208      	movs	r2, #8
 80065ae:	18ba      	adds	r2, r7, r2
 80065b0:	2100      	movs	r1, #0
 80065b2:	54d1      	strb	r1, [r2, r3]
  if (start < 20) {
 80065b4:	1cfb      	adds	r3, r7, #3
 80065b6:	781b      	ldrb	r3, [r3, #0]
 80065b8:	2b13      	cmp	r3, #19
 80065ba:	d849      	bhi.n	8006650 <aBuff2int+0x110>
    if (start == 17) { //month
 80065bc:	1cfb      	adds	r3, r7, #3
 80065be:	781b      	ldrb	r3, [r3, #0]
 80065c0:	2b11      	cmp	r3, #17
 80065c2:	d122      	bne.n	800660a <aBuff2int+0xca>
      for (i = 0; i < 12; i++) {
 80065c4:	183b      	adds	r3, r7, r0
 80065c6:	2200      	movs	r2, #0
 80065c8:	701a      	strb	r2, [r3, #0]
 80065ca:	e018      	b.n	80065fe <aBuff2int+0xbe>
        if (strcmp( iBuff, monthNames[i]) == 0) {
 80065cc:	240f      	movs	r4, #15
 80065ce:	193b      	adds	r3, r7, r4
 80065d0:	781a      	ldrb	r2, [r3, #0]
 80065d2:	4b25      	ldr	r3, [pc, #148]	@ (8006668 <aBuff2int+0x128>)
 80065d4:	0092      	lsls	r2, r2, #2
 80065d6:	58d2      	ldr	r2, [r2, r3]
 80065d8:	2308      	movs	r3, #8
 80065da:	18fb      	adds	r3, r7, r3
 80065dc:	0011      	movs	r1, r2
 80065de:	0018      	movs	r0, r3
 80065e0:	f7f9 fdba 	bl	8000158 <strcmp>
 80065e4:	1e03      	subs	r3, r0, #0
 80065e6:	d104      	bne.n	80065f2 <aBuff2int+0xb2>
          return i+1;
 80065e8:	193b      	adds	r3, r7, r4
 80065ea:	781b      	ldrb	r3, [r3, #0]
 80065ec:	3301      	adds	r3, #1
 80065ee:	b2db      	uxtb	r3, r3
 80065f0:	e035      	b.n	800665e <aBuff2int+0x11e>
      for (i = 0; i < 12; i++) {
 80065f2:	210f      	movs	r1, #15
 80065f4:	187b      	adds	r3, r7, r1
 80065f6:	781a      	ldrb	r2, [r3, #0]
 80065f8:	187b      	adds	r3, r7, r1
 80065fa:	3201      	adds	r2, #1
 80065fc:	701a      	strb	r2, [r3, #0]
 80065fe:	230f      	movs	r3, #15
 8006600:	18fb      	adds	r3, r7, r3
 8006602:	781b      	ldrb	r3, [r3, #0]
 8006604:	2b0b      	cmp	r3, #11
 8006606:	d9e1      	bls.n	80065cc <aBuff2int+0x8c>
 8006608:	e022      	b.n	8006650 <aBuff2int+0x110>
        }
      }
    }
    else {
      //day
      for (i = 0; i < 7; i++) {
 800660a:	230f      	movs	r3, #15
 800660c:	18fb      	adds	r3, r7, r3
 800660e:	2200      	movs	r2, #0
 8006610:	701a      	strb	r2, [r3, #0]
 8006612:	e018      	b.n	8006646 <aBuff2int+0x106>
        if (strcmp( iBuff, dayNames[i]) == 0) {
 8006614:	240f      	movs	r4, #15
 8006616:	193b      	adds	r3, r7, r4
 8006618:	781a      	ldrb	r2, [r3, #0]
 800661a:	4b14      	ldr	r3, [pc, #80]	@ (800666c <aBuff2int+0x12c>)
 800661c:	0092      	lsls	r2, r2, #2
 800661e:	58d2      	ldr	r2, [r2, r3]
 8006620:	2308      	movs	r3, #8
 8006622:	18fb      	adds	r3, r7, r3
 8006624:	0011      	movs	r1, r2
 8006626:	0018      	movs	r0, r3
 8006628:	f7f9 fd96 	bl	8000158 <strcmp>
 800662c:	1e03      	subs	r3, r0, #0
 800662e:	d104      	bne.n	800663a <aBuff2int+0xfa>
          return i+1;
 8006630:	193b      	adds	r3, r7, r4
 8006632:	781b      	ldrb	r3, [r3, #0]
 8006634:	3301      	adds	r3, #1
 8006636:	b2db      	uxtb	r3, r3
 8006638:	e011      	b.n	800665e <aBuff2int+0x11e>
      for (i = 0; i < 7; i++) {
 800663a:	210f      	movs	r1, #15
 800663c:	187b      	adds	r3, r7, r1
 800663e:	781a      	ldrb	r2, [r3, #0]
 8006640:	187b      	adds	r3, r7, r1
 8006642:	3201      	adds	r2, #1
 8006644:	701a      	strb	r2, [r3, #0]
 8006646:	230f      	movs	r3, #15
 8006648:	18fb      	adds	r3, r7, r3
 800664a:	781b      	ldrb	r3, [r3, #0]
 800664c:	2b06      	cmp	r3, #6
 800664e:	d9e1      	bls.n	8006614 <aBuff2int+0xd4>
        }
      }
    }
  }
  return atoi(iBuff);
 8006650:	2308      	movs	r3, #8
 8006652:	18fb      	adds	r3, r7, r3
 8006654:	0018      	movs	r0, r3
 8006656:	f017 fbba 	bl	801ddce <atoi>
 800665a:	0003      	movs	r3, r0
 800665c:	b2db      	uxtb	r3, r3
}
 800665e:	0018      	movs	r0, r3
 8006660:	46bd      	mov	sp, r7
 8006662:	b005      	add	sp, #20
 8006664:	bd90      	pop	{r4, r7, pc}
 8006666:	46c0      	nop			@ (mov r8, r8)
 8006668:	2000004c 	.word	0x2000004c
 800666c:	20000030 	.word	0x20000030

08006670 <ParseTime>:

void ParseTime(char* buffer) {
 8006670:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006672:	b08b      	sub	sp, #44	@ 0x2c
 8006674:	af02      	add	r7, sp, #8
 8006676:	6078      	str	r0, [r7, #4]
  RTC_TimeTypeDef currentTime;
  RTC_DateTypeDef currentDate;
  RTC_GetTime(&currentTime, &currentDate);
 8006678:	2408      	movs	r4, #8
 800667a:	193a      	adds	r2, r7, r4
 800667c:	260c      	movs	r6, #12
 800667e:	19bb      	adds	r3, r7, r6
 8006680:	0011      	movs	r1, r2
 8006682:	0018      	movs	r0, r3
 8006684:	f000 f8f4 	bl	8006870 <RTC_GetTime>
  currentTime.Hours = aBuff2int(buffer, 24, 25);
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	2219      	movs	r2, #25
 800668c:	2118      	movs	r1, #24
 800668e:	0018      	movs	r0, r3
 8006690:	f7ff ff56 	bl	8006540 <aBuff2int>
 8006694:	0003      	movs	r3, r0
 8006696:	001a      	movs	r2, r3
 8006698:	19bb      	adds	r3, r7, r6
 800669a:	701a      	strb	r2, [r3, #0]
  currentTime.Minutes = aBuff2int(buffer, 27, 28);
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	221c      	movs	r2, #28
 80066a0:	211b      	movs	r1, #27
 80066a2:	0018      	movs	r0, r3
 80066a4:	f7ff ff4c 	bl	8006540 <aBuff2int>
 80066a8:	0003      	movs	r3, r0
 80066aa:	001a      	movs	r2, r3
 80066ac:	19bb      	adds	r3, r7, r6
 80066ae:	705a      	strb	r2, [r3, #1]
  currentTime.Seconds = aBuff2int(buffer, 30, 31);
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	221f      	movs	r2, #31
 80066b4:	211e      	movs	r1, #30
 80066b6:	0018      	movs	r0, r3
 80066b8:	f7ff ff42 	bl	8006540 <aBuff2int>
 80066bc:	0003      	movs	r3, r0
 80066be:	001a      	movs	r2, r3
 80066c0:	19bb      	adds	r3, r7, r6
 80066c2:	709a      	strb	r2, [r3, #2]
  currentDate.Year = aBuff2int(buffer, 35, 36);
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	2224      	movs	r2, #36	@ 0x24
 80066c8:	2123      	movs	r1, #35	@ 0x23
 80066ca:	0018      	movs	r0, r3
 80066cc:	f7ff ff38 	bl	8006540 <aBuff2int>
 80066d0:	0003      	movs	r3, r0
 80066d2:	001a      	movs	r2, r3
 80066d4:	0025      	movs	r5, r4
 80066d6:	197b      	adds	r3, r7, r5
 80066d8:	70da      	strb	r2, [r3, #3]
  currentDate.Month = aBuff2int(buffer, 17, 19);
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	2213      	movs	r2, #19
 80066de:	2111      	movs	r1, #17
 80066e0:	0018      	movs	r0, r3
 80066e2:	f7ff ff2d 	bl	8006540 <aBuff2int>
 80066e6:	0003      	movs	r3, r0
 80066e8:	001a      	movs	r2, r3
 80066ea:	197b      	adds	r3, r7, r5
 80066ec:	705a      	strb	r2, [r3, #1]
  currentDate.Date = aBuff2int(buffer, 21,22);
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	2216      	movs	r2, #22
 80066f2:	2115      	movs	r1, #21
 80066f4:	0018      	movs	r0, r3
 80066f6:	f7ff ff23 	bl	8006540 <aBuff2int>
 80066fa:	0003      	movs	r3, r0
 80066fc:	001a      	movs	r2, r3
 80066fe:	197b      	adds	r3, r7, r5
 8006700:	709a      	strb	r2, [r3, #2]
  currentDate.WeekDay = aBuff2int(buffer, 13, 15);
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	220f      	movs	r2, #15
 8006706:	210d      	movs	r1, #13
 8006708:	0018      	movs	r0, r3
 800670a:	f7ff ff19 	bl	8006540 <aBuff2int>
 800670e:	0003      	movs	r3, r0
 8006710:	001a      	movs	r2, r3
 8006712:	197b      	adds	r3, r7, r5
 8006714:	701a      	strb	r2, [r3, #0]
  Debug("Current RTC time before update is: %02dh:%02dm:%02ds", currentTime.Hours , currentTime.Minutes, currentTime.Seconds);
 8006716:	19bb      	adds	r3, r7, r6
 8006718:	781b      	ldrb	r3, [r3, #0]
 800671a:	001c      	movs	r4, r3
 800671c:	19bb      	adds	r3, r7, r6
 800671e:	785b      	ldrb	r3, [r3, #1]
 8006720:	0018      	movs	r0, r3
 8006722:	19bb      	adds	r3, r7, r6
 8006724:	789b      	ldrb	r3, [r3, #2]
 8006726:	4a1c      	ldr	r2, [pc, #112]	@ (8006798 <ParseTime+0x128>)
 8006728:	491c      	ldr	r1, [pc, #112]	@ (800679c <ParseTime+0x12c>)
 800672a:	9301      	str	r3, [sp, #4]
 800672c:	9000      	str	r0, [sp, #0]
 800672e:	0023      	movs	r3, r4
 8006730:	2003      	movs	r0, #3
 8006732:	f007 fa43 	bl	800dbbc <CreateLine>
  Debug("Current RTC date before update is: %02d-%02d-%02d", currentDate.Date , currentDate.Month, currentDate.Year  );
 8006736:	197b      	adds	r3, r7, r5
 8006738:	789b      	ldrb	r3, [r3, #2]
 800673a:	001c      	movs	r4, r3
 800673c:	197b      	adds	r3, r7, r5
 800673e:	785b      	ldrb	r3, [r3, #1]
 8006740:	0018      	movs	r0, r3
 8006742:	197b      	adds	r3, r7, r5
 8006744:	78db      	ldrb	r3, [r3, #3]
 8006746:	4a16      	ldr	r2, [pc, #88]	@ (80067a0 <ParseTime+0x130>)
 8006748:	4914      	ldr	r1, [pc, #80]	@ (800679c <ParseTime+0x12c>)
 800674a:	9301      	str	r3, [sp, #4]
 800674c:	9000      	str	r0, [sp, #0]
 800674e:	0023      	movs	r3, r4
 8006750:	2003      	movs	r0, #3
 8006752:	f007 fa33 	bl	800dbbc <CreateLine>
  RTC_SetTime(&currentTime);
 8006756:	19bb      	adds	r3, r7, r6
 8006758:	0018      	movs	r0, r3
 800675a:	f000 f825 	bl	80067a8 <RTC_SetTime>
  RTC_SetDate(&currentDate);
 800675e:	197b      	adds	r3, r7, r5
 8006760:	0018      	movs	r0, r3
 8006762:	f000 f847 	bl	80067f4 <RTC_SetDate>
  if (currentDate.WeekDay == 2) {
 8006766:	197b      	adds	r3, r7, r5
 8006768:	781b      	ldrb	r3, [r3, #0]
 800676a:	2b02      	cmp	r3, #2
 800676c:	d101      	bne.n	8006772 <ParseTime+0x102>
    reset_fanCleaningDone();
 800676e:	f002 fb4b 	bl	8008e08 <reset_fanCleaningDone>
  }
//  Debug("PARSETIME parameters => weekday: %d, year: %d, month: %d, day: %d, hours: %d, minutes: %d, seconds: %d", weekday, year, month, day, hours, minutes, seconds);
  if (posixBootTime == 0) {
 8006772:	4b0c      	ldr	r3, [pc, #48]	@ (80067a4 <ParseTime+0x134>)
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	2b00      	cmp	r3, #0
 8006778:	d10a      	bne.n	8006790 <ParseTime+0x120>
    posixBootTime = makeTime(&currentDate, &currentTime);
 800677a:	230c      	movs	r3, #12
 800677c:	18fa      	adds	r2, r7, r3
 800677e:	2308      	movs	r3, #8
 8006780:	18fb      	adds	r3, r7, r3
 8006782:	0011      	movs	r1, r2
 8006784:	0018      	movs	r0, r3
 8006786:	f000 fa15 	bl	8006bb4 <makeTime>
 800678a:	0002      	movs	r2, r0
 800678c:	4b05      	ldr	r3, [pc, #20]	@ (80067a4 <ParseTime+0x134>)
 800678e:	601a      	str	r2, [r3, #0]
//    Debug("posixBootTime: %lu", posixBootTime);
  }
}
 8006790:	46c0      	nop			@ (mov r8, r8)
 8006792:	46bd      	mov	sp, r7
 8006794:	b009      	add	sp, #36	@ 0x24
 8006796:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006798:	080233c8 	.word	0x080233c8
 800679c:	08023400 	.word	0x08023400
 80067a0:	08023404 	.word	0x08023404
 80067a4:	20000d74 	.word	0x20000d74

080067a8 <RTC_SetTime>:

// Functie om de tijd in te stellen
void RTC_SetTime(RTC_TimeTypeDef* sTime) {
 80067a8:	b580      	push	{r7, lr}
 80067aa:	b082      	sub	sp, #8
 80067ac:	af00      	add	r7, sp, #0
 80067ae:	6078      	str	r0, [r7, #4]
    sTime->TimeFormat = RTC_HOURFORMAT_24;
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	2200      	movs	r2, #0
 80067b4:	70da      	strb	r2, [r3, #3]
    sTime->DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	2200      	movs	r2, #0
 80067ba:	60da      	str	r2, [r3, #12]
    sTime->StoreOperation = RTC_STOREOPERATION_RESET;
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	2200      	movs	r2, #0
 80067c0:	611a      	str	r2, [r3, #16]
    
    if (HAL_RTC_SetTime(RealTime_Handle, sTime, RTC_FORMAT_BIN) != HAL_OK) {
 80067c2:	4b09      	ldr	r3, [pc, #36]	@ (80067e8 <RTC_SetTime+0x40>)
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	6879      	ldr	r1, [r7, #4]
 80067c8:	2200      	movs	r2, #0
 80067ca:	0018      	movs	r0, r3
 80067cc:	f00e ff56 	bl	801567c <HAL_RTC_SetTime>
 80067d0:	1e03      	subs	r3, r0, #0
 80067d2:	d005      	beq.n	80067e0 <RTC_SetTime+0x38>
        // Foutafhandeling
      Error("Error setting time to RTC");
 80067d4:	4a05      	ldr	r2, [pc, #20]	@ (80067ec <RTC_SetTime+0x44>)
 80067d6:	4b06      	ldr	r3, [pc, #24]	@ (80067f0 <RTC_SetTime+0x48>)
 80067d8:	0019      	movs	r1, r3
 80067da:	2001      	movs	r0, #1
 80067dc:	f007 f9ee 	bl	800dbbc <CreateLine>
    }
}
 80067e0:	46c0      	nop			@ (mov r8, r8)
 80067e2:	46bd      	mov	sp, r7
 80067e4:	b002      	add	sp, #8
 80067e6:	bd80      	pop	{r7, pc}
 80067e8:	20000d70 	.word	0x20000d70
 80067ec:	08023438 	.word	0x08023438
 80067f0:	08023454 	.word	0x08023454

080067f4 <RTC_SetDate>:

// Functie om de datum in te stellen
void RTC_SetDate(RTC_DateTypeDef* sDate) {
 80067f4:	b580      	push	{r7, lr}
 80067f6:	b082      	sub	sp, #8
 80067f8:	af00      	add	r7, sp, #0
 80067fa:	6078      	str	r0, [r7, #4]
    if (HAL_RTC_SetDate(RealTime_Handle, sDate, RTC_FORMAT_BIN) != HAL_OK) {
 80067fc:	4b16      	ldr	r3, [pc, #88]	@ (8006858 <RTC_SetDate+0x64>)
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	6879      	ldr	r1, [r7, #4]
 8006802:	2200      	movs	r2, #0
 8006804:	0018      	movs	r0, r3
 8006806:	f00f f841 	bl	801588c <HAL_RTC_SetDate>
 800680a:	1e03      	subs	r3, r0, #0
 800680c:	d005      	beq.n	800681a <RTC_SetDate+0x26>
        // Foutafhandeling
      Error("Error setting date to RTC");
 800680e:	4a13      	ldr	r2, [pc, #76]	@ (800685c <RTC_SetDate+0x68>)
 8006810:	4b13      	ldr	r3, [pc, #76]	@ (8006860 <RTC_SetDate+0x6c>)
 8006812:	0019      	movs	r1, r3
 8006814:	2001      	movs	r0, #1
 8006816:	f007 f9d1 	bl	800dbbc <CreateLine>
    }
    //check the backup register
    if (HAL_RTCEx_BKUPRead(RealTime_Handle, RTC_BKP_DR1) != 0xBEBE) {
 800681a:	4b0f      	ldr	r3, [pc, #60]	@ (8006858 <RTC_SetDate+0x64>)
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	2101      	movs	r1, #1
 8006820:	0018      	movs	r0, r3
 8006822:	f00f fb79 	bl	8015f18 <HAL_RTCEx_BKUPRead>
 8006826:	0003      	movs	r3, r0
 8006828:	4a0e      	ldr	r2, [pc, #56]	@ (8006864 <RTC_SetDate+0x70>)
 800682a:	4293      	cmp	r3, r2
 800682c:	d010      	beq.n	8006850 <RTC_SetDate+0x5c>
      // Write Back Up Register 1 Data
      Debug("writing backup register");
 800682e:	4a0e      	ldr	r2, [pc, #56]	@ (8006868 <RTC_SetDate+0x74>)
 8006830:	4b0e      	ldr	r3, [pc, #56]	@ (800686c <RTC_SetDate+0x78>)
 8006832:	0019      	movs	r1, r3
 8006834:	2003      	movs	r0, #3
 8006836:	f007 f9c1 	bl	800dbbc <CreateLine>
      HAL_PWR_EnableBkUpAccess();
 800683a:	f00d feb5 	bl	80145a8 <HAL_PWR_EnableBkUpAccess>
      // Writes a data in a RTC Backup data Register 1
      HAL_RTCEx_BKUPWrite(RealTime_Handle, RTC_BKP_DR1, 0xBEBE);
 800683e:	4b06      	ldr	r3, [pc, #24]	@ (8006858 <RTC_SetDate+0x64>)
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	4a08      	ldr	r2, [pc, #32]	@ (8006864 <RTC_SetDate+0x70>)
 8006844:	2101      	movs	r1, #1
 8006846:	0018      	movs	r0, r3
 8006848:	f00f fb4e 	bl	8015ee8 <HAL_RTCEx_BKUPWrite>
      HAL_PWR_DisableBkUpAccess();
 800684c:	f00d feba 	bl	80145c4 <HAL_PWR_DisableBkUpAccess>
    }
}
 8006850:	46c0      	nop			@ (mov r8, r8)
 8006852:	46bd      	mov	sp, r7
 8006854:	b002      	add	sp, #8
 8006856:	bd80      	pop	{r7, pc}
 8006858:	20000d70 	.word	0x20000d70
 800685c:	08023458 	.word	0x08023458
 8006860:	08023454 	.word	0x08023454
 8006864:	0000bebe 	.word	0x0000bebe
 8006868:	08023474 	.word	0x08023474
 800686c:	08023400 	.word	0x08023400

08006870 <RTC_GetTime>:

// Functie om de tijd uit te lezen
void RTC_GetTime(RTC_TimeTypeDef* gTime, RTC_DateTypeDef* gDate) {
 8006870:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006872:	b085      	sub	sp, #20
 8006874:	af00      	add	r7, sp, #0
 8006876:	6078      	str	r0, [r7, #4]
 8006878:	6039      	str	r1, [r7, #0]
uint8_t t = 1;
 800687a:	250f      	movs	r5, #15
 800687c:	197b      	adds	r3, r7, r5
 800687e:	2201      	movs	r2, #1
 8006880:	701a      	strb	r2, [r3, #0]
uint8_t prevValue = 0;
 8006882:	230e      	movs	r3, #14
 8006884:	18fb      	adds	r3, r7, r3
 8006886:	2200      	movs	r2, #0
 8006888:	701a      	strb	r2, [r3, #0]
Battery_Status status;
  status = powerCheck();
 800688a:	260c      	movs	r6, #12
 800688c:	19bc      	adds	r4, r7, r6
 800688e:	f006 fb1d 	bl	800cecc <powerCheck>
 8006892:	0003      	movs	r3, r0
 8006894:	7023      	strb	r3, [r4, #0]
  if ( status == BATTERY_CRITICAL) {
 8006896:	19bb      	adds	r3, r7, r6
 8006898:	781b      	ldrb	r3, [r3, #0]
 800689a:	2b00      	cmp	r3, #0
 800689c:	d104      	bne.n	80068a8 <RTC_GetTime+0x38>
//    To be able to read the RTC calendar register when the APB1 clock frequency is less than
//    seven times the RTC clock frequency (7*RTCLCK), the software must read the calendar
//    time and date registers twice.
    t++; //
 800689e:	197b      	adds	r3, r7, r5
 80068a0:	781a      	ldrb	r2, [r3, #0]
 80068a2:	197b      	adds	r3, r7, r5
 80068a4:	3201      	adds	r2, #1
 80068a6:	701a      	strb	r2, [r3, #0]
  }
  for (uint8_t i= 0; i < t; i++) {
 80068a8:	230d      	movs	r3, #13
 80068aa:	18fb      	adds	r3, r7, r3
 80068ac:	2200      	movs	r2, #0
 80068ae:	701a      	strb	r2, [r3, #0]
 80068b0:	e039      	b.n	8006926 <RTC_GetTime+0xb6>
    if (HAL_RTC_GetTime(RealTime_Handle, gTime, RTC_FORMAT_BIN) != HAL_OK) {
 80068b2:	4b23      	ldr	r3, [pc, #140]	@ (8006940 <RTC_GetTime+0xd0>)
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	6879      	ldr	r1, [r7, #4]
 80068b8:	2200      	movs	r2, #0
 80068ba:	0018      	movs	r0, r3
 80068bc:	f00e ff88 	bl	80157d0 <HAL_RTC_GetTime>
 80068c0:	1e03      	subs	r3, r0, #0
 80068c2:	d005      	beq.n	80068d0 <RTC_GetTime+0x60>
      Error("Error getting time from RTC");
 80068c4:	4a1f      	ldr	r2, [pc, #124]	@ (8006944 <RTC_GetTime+0xd4>)
 80068c6:	4b20      	ldr	r3, [pc, #128]	@ (8006948 <RTC_GetTime+0xd8>)
 80068c8:	0019      	movs	r1, r3
 80068ca:	2001      	movs	r0, #1
 80068cc:	f007 f976 	bl	800dbbc <CreateLine>
    }
    if (HAL_RTC_GetDate(RealTime_Handle, gDate, RTC_FORMAT_BIN) != HAL_OK) {
 80068d0:	4b1b      	ldr	r3, [pc, #108]	@ (8006940 <RTC_GetTime+0xd0>)
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	6839      	ldr	r1, [r7, #0]
 80068d6:	2200      	movs	r2, #0
 80068d8:	0018      	movs	r0, r3
 80068da:	f00f f86b 	bl	80159b4 <HAL_RTC_GetDate>
 80068de:	1e03      	subs	r3, r0, #0
 80068e0:	d005      	beq.n	80068ee <RTC_GetTime+0x7e>
      Error("Error getting date from RTC");
 80068e2:	4a1a      	ldr	r2, [pc, #104]	@ (800694c <RTC_GetTime+0xdc>)
 80068e4:	4b18      	ldr	r3, [pc, #96]	@ (8006948 <RTC_GetTime+0xd8>)
 80068e6:	0019      	movs	r1, r3
 80068e8:	2001      	movs	r0, #1
 80068ea:	f007 f967 	bl	800dbbc <CreateLine>
    }
    if ( status == BATTERY_CRITICAL) {
 80068ee:	230c      	movs	r3, #12
 80068f0:	18fb      	adds	r3, r7, r3
 80068f2:	781b      	ldrb	r3, [r3, #0]
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d110      	bne.n	800691a <RTC_GetTime+0xaa>
      if (prevValue != gTime->Hours) {
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	781b      	ldrb	r3, [r3, #0]
 80068fc:	210e      	movs	r1, #14
 80068fe:	187a      	adds	r2, r7, r1
 8006900:	7812      	ldrb	r2, [r2, #0]
 8006902:	429a      	cmp	r2, r3
 8006904:	d018      	beq.n	8006938 <RTC_GetTime+0xc8>
        prevValue = gTime->Hours;
 8006906:	187b      	adds	r3, r7, r1
 8006908:	687a      	ldr	r2, [r7, #4]
 800690a:	7812      	ldrb	r2, [r2, #0]
 800690c:	701a      	strb	r2, [r3, #0]
        t++;
 800690e:	210f      	movs	r1, #15
 8006910:	187b      	adds	r3, r7, r1
 8006912:	781a      	ldrb	r2, [r3, #0]
 8006914:	187b      	adds	r3, r7, r1
 8006916:	3201      	adds	r2, #1
 8006918:	701a      	strb	r2, [r3, #0]
  for (uint8_t i= 0; i < t; i++) {
 800691a:	210d      	movs	r1, #13
 800691c:	187b      	adds	r3, r7, r1
 800691e:	781a      	ldrb	r2, [r3, #0]
 8006920:	187b      	adds	r3, r7, r1
 8006922:	3201      	adds	r2, #1
 8006924:	701a      	strb	r2, [r3, #0]
 8006926:	230d      	movs	r3, #13
 8006928:	18fa      	adds	r2, r7, r3
 800692a:	230f      	movs	r3, #15
 800692c:	18fb      	adds	r3, r7, r3
 800692e:	7812      	ldrb	r2, [r2, #0]
 8006930:	781b      	ldrb	r3, [r3, #0]
 8006932:	429a      	cmp	r2, r3
 8006934:	d3bd      	bcc.n	80068b2 <RTC_GetTime+0x42>
 8006936:	e000      	b.n	800693a <RTC_GetTime+0xca>
      }
      else {
        return;
 8006938:	46c0      	nop			@ (mov r8, r8)
      }
    }
  }
}
 800693a:	46bd      	mov	sp, r7
 800693c:	b005      	add	sp, #20
 800693e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006940:	20000d70 	.word	0x20000d70
 8006944:	0802348c 	.word	0x0802348c
 8006948:	08023454 	.word	0x08023454
 800694c:	080234a8 	.word	0x080234a8

08006950 <RTC_GetWeekday>:

uint8_t RTC_GetWeekday(void) {
 8006950:	b580      	push	{r7, lr}
 8006952:	b086      	sub	sp, #24
 8006954:	af00      	add	r7, sp, #0
  RTC_TimeTypeDef currentTime;
  RTC_DateTypeDef currentDate;
  RTC_GetTime(&currentTime, &currentDate);
 8006956:	003a      	movs	r2, r7
 8006958:	1d3b      	adds	r3, r7, #4
 800695a:	0011      	movs	r1, r2
 800695c:	0018      	movs	r0, r3
 800695e:	f7ff ff87 	bl	8006870 <RTC_GetTime>
  return currentDate.WeekDay;
 8006962:	003b      	movs	r3, r7
 8006964:	781b      	ldrb	r3, [r3, #0]
}
 8006966:	0018      	movs	r0, r3
 8006968:	46bd      	mov	sp, r7
 800696a:	b006      	add	sp, #24
 800696c:	bd80      	pop	{r7, pc}

0800696e <getPosixTime>:

uint32_t getPosixTime(void) {
 800696e:	b580      	push	{r7, lr}
 8006970:	b086      	sub	sp, #24
 8006972:	af00      	add	r7, sp, #0
  RTC_TimeTypeDef currentTime;
  RTC_DateTypeDef currentDate;
  RTC_GetTime(&currentTime, &currentDate);
 8006974:	003a      	movs	r2, r7
 8006976:	1d3b      	adds	r3, r7, #4
 8006978:	0011      	movs	r1, r2
 800697a:	0018      	movs	r0, r3
 800697c:	f7ff ff78 	bl	8006870 <RTC_GetTime>
  return makeTime(&currentDate, &currentTime);
 8006980:	1d3a      	adds	r2, r7, #4
 8006982:	003b      	movs	r3, r7
 8006984:	0011      	movs	r1, r2
 8006986:	0018      	movs	r0, r3
 8006988:	f000 f914 	bl	8006bb4 <makeTime>
 800698c:	0003      	movs	r3, r0
}
 800698e:	0018      	movs	r0, r3
 8006990:	46bd      	mov	sp, r7
 8006992:	b006      	add	sp, #24
 8006994:	bd80      	pop	{r7, pc}
	...

08006998 <getUTCfromPosixTime>:

void getUTCfromPosixTime(uint32_t posixTime, char* strbuf1) {
 8006998:	b5f0      	push	{r4, r5, r6, r7, lr}
 800699a:	b08d      	sub	sp, #52	@ 0x34
 800699c:	af04      	add	r7, sp, #16
 800699e:	6078      	str	r0, [r7, #4]
 80069a0:	6039      	str	r1, [r7, #0]
  RTC_TimeTypeDef currentTime;
  RTC_DateTypeDef currentDate;
//  RTC_GetTime(&currentTime, &currentDate);
  breakPosixTime(posixTime, &currentDate, &currentTime);
 80069a2:	240c      	movs	r4, #12
 80069a4:	193a      	adds	r2, r7, r4
 80069a6:	2508      	movs	r5, #8
 80069a8:	1979      	adds	r1, r7, r5
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	0018      	movs	r0, r3
 80069ae:	f000 f9cb 	bl	8006d48 <breakPosixTime>
//  printf("%s %d-%d-%d %dh:%dm:%ds\r\n", dayNames[currentDate.WeekDay - 1], currentDate.Date, currentDate.Month, currentDate.Year,
//      currentTime.Hours, currentTime.Minutes, currentTime.Seconds);
  sprintf(strbuf1, "%02d-%02d-%02d %02dh:%02dm:%02ds\r\n", currentDate.Date, currentDate.Month, currentDate.Year,
 80069b2:	002a      	movs	r2, r5
 80069b4:	18bb      	adds	r3, r7, r2
 80069b6:	789b      	ldrb	r3, [r3, #2]
 80069b8:	001e      	movs	r6, r3
 80069ba:	18bb      	adds	r3, r7, r2
 80069bc:	785b      	ldrb	r3, [r3, #1]
 80069be:	469c      	mov	ip, r3
 80069c0:	18bb      	adds	r3, r7, r2
 80069c2:	78db      	ldrb	r3, [r3, #3]
 80069c4:	001a      	movs	r2, r3
      currentTime.Hours, currentTime.Minutes, currentTime.Seconds);
 80069c6:	0021      	movs	r1, r4
 80069c8:	187b      	adds	r3, r7, r1
 80069ca:	781b      	ldrb	r3, [r3, #0]
  sprintf(strbuf1, "%02d-%02d-%02d %02dh:%02dm:%02ds\r\n", currentDate.Date, currentDate.Month, currentDate.Year,
 80069cc:	001c      	movs	r4, r3
      currentTime.Hours, currentTime.Minutes, currentTime.Seconds);
 80069ce:	187b      	adds	r3, r7, r1
 80069d0:	785b      	ldrb	r3, [r3, #1]
  sprintf(strbuf1, "%02d-%02d-%02d %02dh:%02dm:%02ds\r\n", currentDate.Date, currentDate.Month, currentDate.Year,
 80069d2:	001d      	movs	r5, r3
      currentTime.Hours, currentTime.Minutes, currentTime.Seconds);
 80069d4:	187b      	adds	r3, r7, r1
 80069d6:	789b      	ldrb	r3, [r3, #2]
  sprintf(strbuf1, "%02d-%02d-%02d %02dh:%02dm:%02ds\r\n", currentDate.Date, currentDate.Month, currentDate.Year,
 80069d8:	4906      	ldr	r1, [pc, #24]	@ (80069f4 <getUTCfromPosixTime+0x5c>)
 80069da:	6838      	ldr	r0, [r7, #0]
 80069dc:	9303      	str	r3, [sp, #12]
 80069de:	9502      	str	r5, [sp, #8]
 80069e0:	9401      	str	r4, [sp, #4]
 80069e2:	9200      	str	r2, [sp, #0]
 80069e4:	4663      	mov	r3, ip
 80069e6:	0032      	movs	r2, r6
 80069e8:	f018 fe3c 	bl	801f664 <siprintf>
}
 80069ec:	46c0      	nop			@ (mov r8, r8)
 80069ee:	46bd      	mov	sp, r7
 80069f0:	b009      	add	sp, #36	@ 0x24
 80069f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80069f4:	080234c4 	.word	0x080234c4

080069f8 <RTC_SetWakeUpTimer>:
//     // Doe iets wanneer het alarm afgaat
//     HAL_GPIO_TogglePin(LED_C_Red_GPIO_Port, LED_C_Red_Pin);
// }

void RTC_SetWakeUpTimer(uint32_t secondsOfSleep)
{
 80069f8:	b580      	push	{r7, lr}
 80069fa:	b082      	sub	sp, #8
 80069fc:	af00      	add	r7, sp, #0
 80069fe:	6078      	str	r0, [r7, #4]
//    HAL_NVIC_SetPriority(RTC_IRQn, 0, 0);
//    HAL_NVIC_EnableIRQ(RTC_IRQn);

    // ==== sleep insert
//    HAL_RTCEx_DeactivateWakeUpTimer(&hrtc);
    HAL_RTCEx_DeactivateWakeUpTimer(RealTime_Handle);
 8006a00:	4b10      	ldr	r3, [pc, #64]	@ (8006a44 <RTC_SetWakeUpTimer+0x4c>)
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	0018      	movs	r0, r3
 8006a06:	f00f f9d3 	bl	8015db0 <HAL_RTCEx_DeactivateWakeUpTimer>
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(RealTime_Handle, RTC_FLAG_WUTF);
 8006a0a:	4b0e      	ldr	r3, [pc, #56]	@ (8006a44 <RTC_SetWakeUpTimer+0x4c>)
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	68db      	ldr	r3, [r3, #12]
 8006a12:	22ff      	movs	r2, #255	@ 0xff
 8006a14:	401a      	ands	r2, r3
 8006a16:	4b0b      	ldr	r3, [pc, #44]	@ (8006a44 <RTC_SetWakeUpTimer+0x4c>)
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	490a      	ldr	r1, [pc, #40]	@ (8006a48 <RTC_SetWakeUpTimer+0x50>)
 8006a1e:	430a      	orrs	r2, r1
 8006a20:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG();
 8006a22:	4b0a      	ldr	r3, [pc, #40]	@ (8006a4c <RTC_SetWakeUpTimer+0x54>)
 8006a24:	2280      	movs	r2, #128	@ 0x80
 8006a26:	0352      	lsls	r2, r2, #13
 8006a28:	615a      	str	r2, [r3, #20]
// for testing 60 seconds => 60 - 1 = 59
//    HAL_RTCEx_SetWakeUpTimer_IT(RealTime_Handle, 0x003D, RTC_WAKEUPCLOCK_CK_SPRE_16BITS); //ck_spre ~1 Hz (40 kHz div127 div 315) used as clock for the RTC wake-up timer
    HAL_RTCEx_SetWakeUpTimer_IT(RealTime_Handle, secondsOfSleep-1, RTC_WAKEUPCLOCK_CK_SPRE_16BITS); //ck_spre ~1 Hz (40 kHz div127 div 315) used as clock for the RTC wake-up timer
 8006a2a:	4b06      	ldr	r3, [pc, #24]	@ (8006a44 <RTC_SetWakeUpTimer+0x4c>)
 8006a2c:	6818      	ldr	r0, [r3, #0]
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	3b01      	subs	r3, #1
 8006a32:	2204      	movs	r2, #4
 8006a34:	0019      	movs	r1, r3
 8006a36:	f00f f8e3 	bl	8015c00 <HAL_RTCEx_SetWakeUpTimer_IT>
     // ==== end sleep insert
}
 8006a3a:	46c0      	nop			@ (mov r8, r8)
 8006a3c:	46bd      	mov	sp, r7
 8006a3e:	b002      	add	sp, #8
 8006a40:	bd80      	pop	{r7, pc}
 8006a42:	46c0      	nop			@ (mov r8, r8)
 8006a44:	20000d70 	.word	0x20000d70
 8006a48:	fffffb7f 	.word	0xfffffb7f
 8006a4c:	40010400 	.word	0x40010400

08006a50 <Enter_Stop_Mode>:
    SystemClock_Config();
    HAL_ResumeTick(); // Enable SysTick after wake-up
}

void Enter_Stop_Mode(uint16_t sleepTime)
{
 8006a50:	b580      	push	{r7, lr}
 8006a52:	b084      	sub	sp, #16
 8006a54:	af02      	add	r7, sp, #8
 8006a56:	0002      	movs	r2, r0
 8006a58:	1dbb      	adds	r3, r7, #6
 8006a5a:	801a      	strh	r2, [r3, #0]
  if (sen5x_On) {
 8006a5c:	4b42      	ldr	r3, [pc, #264]	@ (8006b68 <Enter_Stop_Mode+0x118>)
 8006a5e:	781b      	ldrb	r3, [r3, #0]
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d001      	beq.n	8006a68 <Enter_Stop_Mode+0x18>
    sen5x_Power_Off();
 8006a64:	f002 f9b2 	bl	8008dcc <sen5x_Power_Off>
  }
  Info("Battery voltage %.02fV", ReadBatteryVoltage());
 8006a68:	f7ff fbd0 	bl	800620c <ReadBatteryVoltage>
 8006a6c:	1c03      	adds	r3, r0, #0
 8006a6e:	1c18      	adds	r0, r3, #0
 8006a70:	f7fc fcf8 	bl	8003464 <__aeabi_f2d>
 8006a74:	0002      	movs	r2, r0
 8006a76:	000b      	movs	r3, r1
 8006a78:	483c      	ldr	r0, [pc, #240]	@ (8006b6c <Enter_Stop_Mode+0x11c>)
 8006a7a:	493d      	ldr	r1, [pc, #244]	@ (8006b70 <Enter_Stop_Mode+0x120>)
 8006a7c:	9200      	str	r2, [sp, #0]
 8006a7e:	9301      	str	r3, [sp, #4]
 8006a80:	0002      	movs	r2, r0
 8006a82:	2002      	movs	r0, #2
 8006a84:	f007 f89a 	bl	800dbbc <CreateLine>
  Debug("Entering STOP mode for %d seconds", sleepTime);
 8006a88:	1dbb      	adds	r3, r7, #6
 8006a8a:	881b      	ldrh	r3, [r3, #0]
 8006a8c:	4a39      	ldr	r2, [pc, #228]	@ (8006b74 <Enter_Stop_Mode+0x124>)
 8006a8e:	493a      	ldr	r1, [pc, #232]	@ (8006b78 <Enter_Stop_Mode+0x128>)
 8006a90:	2003      	movs	r0, #3
 8006a92:	f007 f893 	bl	800dbbc <CreateLine>
  getUTCfromPosixTime(getPosixTime() + sleepTime, strbuf);
 8006a96:	f7ff ff6a 	bl	800696e <getPosixTime>
 8006a9a:	0002      	movs	r2, r0
 8006a9c:	1dbb      	adds	r3, r7, #6
 8006a9e:	881b      	ldrh	r3, [r3, #0]
 8006aa0:	18d3      	adds	r3, r2, r3
 8006aa2:	4a36      	ldr	r2, [pc, #216]	@ (8006b7c <Enter_Stop_Mode+0x12c>)
 8006aa4:	0011      	movs	r1, r2
 8006aa6:	0018      	movs	r0, r3
 8006aa8:	f7ff ff76 	bl	8006998 <getUTCfromPosixTime>
  Info("The system will wake up at %s.", strbuf);
 8006aac:	4b33      	ldr	r3, [pc, #204]	@ (8006b7c <Enter_Stop_Mode+0x12c>)
 8006aae:	4a34      	ldr	r2, [pc, #208]	@ (8006b80 <Enter_Stop_Mode+0x130>)
 8006ab0:	492f      	ldr	r1, [pc, #188]	@ (8006b70 <Enter_Stop_Mode+0x120>)
 8006ab2:	2002      	movs	r0, #2
 8006ab4:	f007 f882 	bl	800dbbc <CreateLine>
  HAL_Delay(100);
 8006ab8:	2064      	movs	r0, #100	@ 0x64
 8006aba:	f007 fcdf 	bl	800e47c <HAL_Delay>
  HAL_SuspendTick();
 8006abe:	f007 fd01 	bl	800e4c4 <HAL_SuspendTick>
  RTC_SetWakeUpTimer(sleepTime);
 8006ac2:	1dbb      	adds	r3, r7, #6
 8006ac4:	881b      	ldrh	r3, [r3, #0]
 8006ac6:	0018      	movs	r0, r3
 8006ac8:	f7ff ff96 	bl	80069f8 <RTC_SetWakeUpTimer>
//  HAL_PWREx_EnableFlashPowerDown();  // is default stopped in l0xx cpu's
//  SET_BIT(PWR->CR, PWR_CR_ULP); seems of no influence
  HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
 8006acc:	2101      	movs	r1, #1
 8006ace:	2001      	movs	r0, #1
 8006ad0:	f00d fd88 	bl	80145e4 <HAL_PWR_EnterSTOPMode>
  SystemClock_Config();
 8006ad4:	f001 f972 	bl	8007dbc <SystemClock_Config>
  if (sen5x_enable((uint32_t)sleepTime)) {
 8006ad8:	1dbb      	adds	r3, r7, #6
 8006ada:	881b      	ldrh	r3, [r3, #0]
 8006adc:	0018      	movs	r0, r3
 8006ade:	f002 f901 	bl	8008ce4 <sen5x_enable>
 8006ae2:	1e03      	subs	r3, r0, #0
 8006ae4:	d01c      	beq.n	8006b20 <Enter_Stop_Mode+0xd0>
    showTime();
 8006ae6:	f7ff fc87 	bl	80063f8 <showTime>
    set_light_on_state();
 8006aea:	f002 fd45 	bl	8009578 <set_light_on_state>
    if (!userToggle) {
 8006aee:	4b25      	ldr	r3, [pc, #148]	@ (8006b84 <Enter_Stop_Mode+0x134>)
 8006af0:	781b      	ldrb	r3, [r3, #0]
 8006af2:	2201      	movs	r2, #1
 8006af4:	4053      	eors	r3, r2
 8006af6:	b2db      	uxtb	r3, r3
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d011      	beq.n	8006b20 <Enter_Stop_Mode+0xd0>
      RTC_SetWakeUpTimer(SEN5X_START_UP_TIME); // go sleep for 27 + 3s measurement time is approx 30 seconds
 8006afc:	201c      	movs	r0, #28
 8006afe:	f7ff ff7b 	bl	80069f8 <RTC_SetWakeUpTimer>
      Debug("Entering STOP mode for %d seconds", SEN5X_START_UP_TIME);
 8006b02:	4a1c      	ldr	r2, [pc, #112]	@ (8006b74 <Enter_Stop_Mode+0x124>)
 8006b04:	491c      	ldr	r1, [pc, #112]	@ (8006b78 <Enter_Stop_Mode+0x128>)
 8006b06:	231c      	movs	r3, #28
 8006b08:	2003      	movs	r0, #3
 8006b0a:	f007 f857 	bl	800dbbc <CreateLine>
      HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
 8006b0e:	2101      	movs	r1, #1
 8006b10:	2001      	movs	r0, #1
 8006b12:	f00d fd67 	bl	80145e4 <HAL_PWR_EnterSTOPMode>
      SystemClock_Config();
 8006b16:	f001 f951 	bl	8007dbc <SystemClock_Config>
//      setsen5xReadTimer(2000);
      setsen5xReadTimer(0);
 8006b1a:	2000      	movs	r0, #0
 8006b1c:	f002 f8d0 	bl	8008cc0 <setsen5xReadTimer>
    }
  }
  HAL_ResumeTick(); // Enable SysTick after wake-up
 8006b20:	f007 fcde 	bl	800e4e0 <HAL_ResumeTick>
  showTime();
 8006b24:	f7ff fc68 	bl	80063f8 <showTime>
  ResetDBACalculator();  // reset the DBA average calculation
 8006b28:	f001 fd60 	bl	80085ec <ResetDBACalculator>
  ResetSGP40samplecounter();
 8006b2c:	f004 fb12 	bl	800b154 <ResetSGP40samplecounter>
//  setESPTimeStamp(3000);
  setESPTimeStamp(2500);
 8006b30:	4b15      	ldr	r3, [pc, #84]	@ (8006b88 <Enter_Stop_Mode+0x138>)
 8006b32:	0018      	movs	r0, r3
 8006b34:	f7fc fe3c 	bl	80037b0 <setESPTimeStamp>
  setSGP40TimeStamp(0);
 8006b38:	2000      	movs	r0, #0
 8006b3a:	f004 faf9 	bl	800b130 <setSGP40TimeStamp>
  setHIDSTimeStamp(0);
 8006b3e:	2000      	movs	r0, #0
 8006b40:	f007 fa00 	bl	800df44 <setHIDSTimeStamp>
  setMICTimeStamp(0);
 8006b44:	2000      	movs	r0, #0
 8006b46:	f001 fd3f 	bl	80085c8 <setMICTimeStamp>
  ESPTransmitDone = false;
 8006b4a:	4b10      	ldr	r3, [pc, #64]	@ (8006b8c <Enter_Stop_Mode+0x13c>)
 8006b4c:	2200      	movs	r2, #0
 8006b4e:	701a      	strb	r2, [r3, #0]
  deviceTimeOut = HAL_GetTick() + 2300;
 8006b50:	f007 fc8a 	bl	800e468 <HAL_GetTick>
 8006b54:	0003      	movs	r3, r0
 8006b56:	4a0e      	ldr	r2, [pc, #56]	@ (8006b90 <Enter_Stop_Mode+0x140>)
 8006b58:	189a      	adds	r2, r3, r2
 8006b5a:	4b0e      	ldr	r3, [pc, #56]	@ (8006b94 <Enter_Stop_Mode+0x144>)
 8006b5c:	601a      	str	r2, [r3, #0]
}
 8006b5e:	46c0      	nop			@ (mov r8, r8)
 8006b60:	46bd      	mov	sp, r7
 8006b62:	b002      	add	sp, #8
 8006b64:	bd80      	pop	{r7, pc}
 8006b66:	46c0      	nop			@ (mov r8, r8)
 8006b68:	2000125d 	.word	0x2000125d
 8006b6c:	0802353c 	.word	0x0802353c
 8006b70:	08023554 	.word	0x08023554
 8006b74:	08023558 	.word	0x08023558
 8006b78:	08023400 	.word	0x08023400
 8006b7c:	20000d78 	.word	0x20000d78
 8006b80:	0802357c 	.word	0x0802357c
 8006b84:	200021e6 	.word	0x200021e6
 8006b88:	000009c4 	.word	0x000009c4
 8006b8c:	20000553 	.word	0x20000553
 8006b90:	000008fc 	.word	0x000008fc
 8006b94:	20000fc0 	.word	0x20000fc0

08006b98 <InitClock>:

void InitClock(RTC_HandleTypeDef* h_hrtc){
 8006b98:	b580      	push	{r7, lr}
 8006b9a:	b082      	sub	sp, #8
 8006b9c:	af00      	add	r7, sp, #0
 8006b9e:	6078      	str	r0, [r7, #4]
  RealTime_Handle = h_hrtc;
 8006ba0:	4b03      	ldr	r3, [pc, #12]	@ (8006bb0 <InitClock+0x18>)
 8006ba2:	687a      	ldr	r2, [r7, #4]
 8006ba4:	601a      	str	r2, [r3, #0]
}
 8006ba6:	46c0      	nop			@ (mov r8, r8)
 8006ba8:	46bd      	mov	sp, r7
 8006baa:	b002      	add	sp, #8
 8006bac:	bd80      	pop	{r7, pc}
 8006bae:	46c0      	nop			@ (mov r8, r8)
 8006bb0:	20000d70 	.word	0x20000d70

08006bb4 <makeTime>:
// leap year calculator expects year argument as years offset from 1970
#define LEAP_YEAR(Y)     ( ((1970+(Y))>0) && !((1970+(Y))%4) && ( ((1970+(Y))%100) || !((1970+(Y))%400) ) )

static  const uint8_t monthDays[]={31,28,31,30,31,30,31,31,30,31,30,31}; // API starts months from 1, this array starts from 0

uint32_t makeTime(RTC_DateTypeDef* currentDate, RTC_TimeTypeDef* currentTime){
 8006bb4:	b580      	push	{r7, lr}
 8006bb6:	b084      	sub	sp, #16
 8006bb8:	af00      	add	r7, sp, #0
 8006bba:	6078      	str	r0, [r7, #4]
 8006bbc:	6039      	str	r1, [r7, #0]

  int i;
  uint32_t seconds;

  // seconds from 1970 till 1 jan 00:00:00 of the given year
  seconds= currentDate->Year*(SECS_PER_DAY * 365);
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	78db      	ldrb	r3, [r3, #3]
 8006bc2:	001a      	movs	r2, r3
 8006bc4:	0013      	movs	r3, r2
 8006bc6:	025b      	lsls	r3, r3, #9
 8006bc8:	189b      	adds	r3, r3, r2
 8006bca:	009b      	lsls	r3, r3, #2
 8006bcc:	189b      	adds	r3, r3, r2
 8006bce:	00db      	lsls	r3, r3, #3
 8006bd0:	189b      	adds	r3, r3, r2
 8006bd2:	011a      	lsls	r2, r3, #4
 8006bd4:	1ad2      	subs	r2, r2, r3
 8006bd6:	01d3      	lsls	r3, r2, #7
 8006bd8:	001a      	movs	r2, r3
 8006bda:	60ba      	str	r2, [r7, #8]
  for (i = 0; i < currentDate->Year; i++) {
 8006bdc:	2300      	movs	r3, #0
 8006bde:	60fb      	str	r3, [r7, #12]
 8006be0:	e028      	b.n	8006c34 <makeTime+0x80>
    if (LEAP_YEAR(i)) {
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	4a53      	ldr	r2, [pc, #332]	@ (8006d34 <makeTime+0x180>)
 8006be6:	4293      	cmp	r3, r2
 8006be8:	db21      	blt.n	8006c2e <makeTime+0x7a>
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	4a52      	ldr	r2, [pc, #328]	@ (8006d38 <makeTime+0x184>)
 8006bee:	4694      	mov	ip, r2
 8006bf0:	4463      	add	r3, ip
 8006bf2:	001a      	movs	r2, r3
 8006bf4:	2303      	movs	r3, #3
 8006bf6:	4013      	ands	r3, r2
 8006bf8:	d119      	bne.n	8006c2e <makeTime+0x7a>
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	4a4e      	ldr	r2, [pc, #312]	@ (8006d38 <makeTime+0x184>)
 8006bfe:	4694      	mov	ip, r2
 8006c00:	4463      	add	r3, ip
 8006c02:	2164      	movs	r1, #100	@ 0x64
 8006c04:	0018      	movs	r0, r3
 8006c06:	f7f9 fc3d 	bl	8000484 <__aeabi_idivmod>
 8006c0a:	1e0b      	subs	r3, r1, #0
 8006c0c:	d10a      	bne.n	8006c24 <makeTime+0x70>
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	4a49      	ldr	r2, [pc, #292]	@ (8006d38 <makeTime+0x184>)
 8006c12:	4694      	mov	ip, r2
 8006c14:	4463      	add	r3, ip
 8006c16:	22c8      	movs	r2, #200	@ 0xc8
 8006c18:	0051      	lsls	r1, r2, #1
 8006c1a:	0018      	movs	r0, r3
 8006c1c:	f7f9 fc32 	bl	8000484 <__aeabi_idivmod>
 8006c20:	1e0b      	subs	r3, r1, #0
 8006c22:	d104      	bne.n	8006c2e <makeTime+0x7a>
      seconds += SECS_PER_DAY;   // add extra days for leap years
 8006c24:	68bb      	ldr	r3, [r7, #8]
 8006c26:	4a45      	ldr	r2, [pc, #276]	@ (8006d3c <makeTime+0x188>)
 8006c28:	4694      	mov	ip, r2
 8006c2a:	4463      	add	r3, ip
 8006c2c:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < currentDate->Year; i++) {
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	3301      	adds	r3, #1
 8006c32:	60fb      	str	r3, [r7, #12]
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	78db      	ldrb	r3, [r3, #3]
 8006c38:	001a      	movs	r2, r3
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	4293      	cmp	r3, r2
 8006c3e:	dbd0      	blt.n	8006be2 <makeTime+0x2e>
    }
  }

  // add days for this year, months start from 1
  for (i = 1; i < currentDate->Month; i++) {
 8006c40:	2301      	movs	r3, #1
 8006c42:	60fb      	str	r3, [r7, #12]
 8006c44:	e03c      	b.n	8006cc0 <makeTime+0x10c>
    if ( (i == 2) && LEAP_YEAR(currentDate->Year)) {
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	2b02      	cmp	r3, #2
 8006c4a:	d125      	bne.n	8006c98 <makeTime+0xe4>
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	78db      	ldrb	r3, [r3, #3]
 8006c50:	4a39      	ldr	r2, [pc, #228]	@ (8006d38 <makeTime+0x184>)
 8006c52:	4694      	mov	ip, r2
 8006c54:	4463      	add	r3, ip
 8006c56:	001a      	movs	r2, r3
 8006c58:	2303      	movs	r3, #3
 8006c5a:	4013      	ands	r3, r2
 8006c5c:	d11c      	bne.n	8006c98 <makeTime+0xe4>
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	78db      	ldrb	r3, [r3, #3]
 8006c62:	4a35      	ldr	r2, [pc, #212]	@ (8006d38 <makeTime+0x184>)
 8006c64:	4694      	mov	ip, r2
 8006c66:	4463      	add	r3, ip
 8006c68:	2164      	movs	r1, #100	@ 0x64
 8006c6a:	0018      	movs	r0, r3
 8006c6c:	f7f9 fc0a 	bl	8000484 <__aeabi_idivmod>
 8006c70:	1e0b      	subs	r3, r1, #0
 8006c72:	d10b      	bne.n	8006c8c <makeTime+0xd8>
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	78db      	ldrb	r3, [r3, #3]
 8006c78:	4a2f      	ldr	r2, [pc, #188]	@ (8006d38 <makeTime+0x184>)
 8006c7a:	4694      	mov	ip, r2
 8006c7c:	4463      	add	r3, ip
 8006c7e:	22c8      	movs	r2, #200	@ 0xc8
 8006c80:	0051      	lsls	r1, r2, #1
 8006c82:	0018      	movs	r0, r3
 8006c84:	f7f9 fbfe 	bl	8000484 <__aeabi_idivmod>
 8006c88:	1e0b      	subs	r3, r1, #0
 8006c8a:	d105      	bne.n	8006c98 <makeTime+0xe4>
      seconds += SECS_PER_DAY * 29;
 8006c8c:	68bb      	ldr	r3, [r7, #8]
 8006c8e:	4a2c      	ldr	r2, [pc, #176]	@ (8006d40 <makeTime+0x18c>)
 8006c90:	4694      	mov	ip, r2
 8006c92:	4463      	add	r3, ip
 8006c94:	60bb      	str	r3, [r7, #8]
 8006c96:	e010      	b.n	8006cba <makeTime+0x106>
    } else {
      seconds += SECS_PER_DAY * monthDays[i-1];  //monthDay array starts from 0
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	3b01      	subs	r3, #1
 8006c9c:	4a29      	ldr	r2, [pc, #164]	@ (8006d44 <makeTime+0x190>)
 8006c9e:	5cd3      	ldrb	r3, [r2, r3]
 8006ca0:	001a      	movs	r2, r3
 8006ca2:	0013      	movs	r3, r2
 8006ca4:	005b      	lsls	r3, r3, #1
 8006ca6:	189b      	adds	r3, r3, r2
 8006ca8:	011a      	lsls	r2, r3, #4
 8006caa:	1ad2      	subs	r2, r2, r3
 8006cac:	0113      	lsls	r3, r2, #4
 8006cae:	1a9b      	subs	r3, r3, r2
 8006cb0:	01db      	lsls	r3, r3, #7
 8006cb2:	001a      	movs	r2, r3
 8006cb4:	68bb      	ldr	r3, [r7, #8]
 8006cb6:	189b      	adds	r3, r3, r2
 8006cb8:	60bb      	str	r3, [r7, #8]
  for (i = 1; i < currentDate->Month; i++) {
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	3301      	adds	r3, #1
 8006cbe:	60fb      	str	r3, [r7, #12]
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	785b      	ldrb	r3, [r3, #1]
 8006cc4:	001a      	movs	r2, r3
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	4293      	cmp	r3, r2
 8006cca:	dbbc      	blt.n	8006c46 <makeTime+0x92>
    }
  }
  seconds+= (currentDate->Date-1) * SECS_PER_DAY;
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	789b      	ldrb	r3, [r3, #2]
 8006cd0:	3b01      	subs	r3, #1
 8006cd2:	001a      	movs	r2, r3
 8006cd4:	0013      	movs	r3, r2
 8006cd6:	005b      	lsls	r3, r3, #1
 8006cd8:	189b      	adds	r3, r3, r2
 8006cda:	011a      	lsls	r2, r3, #4
 8006cdc:	1ad2      	subs	r2, r2, r3
 8006cde:	0113      	lsls	r3, r2, #4
 8006ce0:	1a9b      	subs	r3, r3, r2
 8006ce2:	01db      	lsls	r3, r3, #7
 8006ce4:	001a      	movs	r2, r3
 8006ce6:	68bb      	ldr	r3, [r7, #8]
 8006ce8:	189b      	adds	r3, r3, r2
 8006cea:	60bb      	str	r3, [r7, #8]
  seconds+= currentTime->Hours * SECS_PER_HOUR;
 8006cec:	683b      	ldr	r3, [r7, #0]
 8006cee:	781b      	ldrb	r3, [r3, #0]
 8006cf0:	001a      	movs	r2, r3
 8006cf2:	0013      	movs	r3, r2
 8006cf4:	011b      	lsls	r3, r3, #4
 8006cf6:	1a9b      	subs	r3, r3, r2
 8006cf8:	011a      	lsls	r2, r3, #4
 8006cfa:	1ad2      	subs	r2, r2, r3
 8006cfc:	0113      	lsls	r3, r2, #4
 8006cfe:	001a      	movs	r2, r3
 8006d00:	68bb      	ldr	r3, [r7, #8]
 8006d02:	189b      	adds	r3, r3, r2
 8006d04:	60bb      	str	r3, [r7, #8]
  seconds+= currentTime->Minutes * SECS_PER_MIN;
 8006d06:	683b      	ldr	r3, [r7, #0]
 8006d08:	785b      	ldrb	r3, [r3, #1]
 8006d0a:	001a      	movs	r2, r3
 8006d0c:	0013      	movs	r3, r2
 8006d0e:	011b      	lsls	r3, r3, #4
 8006d10:	1a9b      	subs	r3, r3, r2
 8006d12:	009b      	lsls	r3, r3, #2
 8006d14:	001a      	movs	r2, r3
 8006d16:	68bb      	ldr	r3, [r7, #8]
 8006d18:	189b      	adds	r3, r3, r2
 8006d1a:	60bb      	str	r3, [r7, #8]
  seconds+= currentTime->Seconds;
 8006d1c:	683b      	ldr	r3, [r7, #0]
 8006d1e:	789b      	ldrb	r3, [r3, #2]
 8006d20:	001a      	movs	r2, r3
 8006d22:	68bb      	ldr	r3, [r7, #8]
 8006d24:	189b      	adds	r3, r3, r2
 8006d26:	60bb      	str	r3, [r7, #8]
  return seconds;
 8006d28:	68bb      	ldr	r3, [r7, #8]
}
 8006d2a:	0018      	movs	r0, r3
 8006d2c:	46bd      	mov	sp, r7
 8006d2e:	b004      	add	sp, #16
 8006d30:	bd80      	pop	{r7, pc}
 8006d32:	46c0      	nop			@ (mov r8, r8)
 8006d34:	fffff84f 	.word	0xfffff84f
 8006d38:	000007b2 	.word	0x000007b2
 8006d3c:	00015180 	.word	0x00015180
 8006d40:	00263b80 	.word	0x00263b80
 8006d44:	08024834 	.word	0x08024834

08006d48 <breakPosixTime>:

void breakPosixTime(uint32_t timeInput, RTC_DateTypeDef* currentDate, RTC_TimeTypeDef* currentTime){
 8006d48:	b590      	push	{r4, r7, lr}
 8006d4a:	b089      	sub	sp, #36	@ 0x24
 8006d4c:	af00      	add	r7, sp, #0
 8006d4e:	60f8      	str	r0, [r7, #12]
 8006d50:	60b9      	str	r1, [r7, #8]
 8006d52:	607a      	str	r2, [r7, #4]
  uint8_t year;
  uint8_t month, monthLength;
  uint32_t time;
  uint32_t days;

  time = timeInput;
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	61bb      	str	r3, [r7, #24]
  currentTime->Seconds = time % 60;
 8006d58:	69bb      	ldr	r3, [r7, #24]
 8006d5a:	213c      	movs	r1, #60	@ 0x3c
 8006d5c:	0018      	movs	r0, r3
 8006d5e:	f7f9 faa7 	bl	80002b0 <__aeabi_uidivmod>
 8006d62:	000b      	movs	r3, r1
 8006d64:	b2da      	uxtb	r2, r3
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	709a      	strb	r2, [r3, #2]
  time /= 60; // now it is minutes
 8006d6a:	69bb      	ldr	r3, [r7, #24]
 8006d6c:	213c      	movs	r1, #60	@ 0x3c
 8006d6e:	0018      	movs	r0, r3
 8006d70:	f7f9 fa18 	bl	80001a4 <__udivsi3>
 8006d74:	0003      	movs	r3, r0
 8006d76:	61bb      	str	r3, [r7, #24]
  currentTime->Minutes = time % 60;
 8006d78:	69bb      	ldr	r3, [r7, #24]
 8006d7a:	213c      	movs	r1, #60	@ 0x3c
 8006d7c:	0018      	movs	r0, r3
 8006d7e:	f7f9 fa97 	bl	80002b0 <__aeabi_uidivmod>
 8006d82:	000b      	movs	r3, r1
 8006d84:	b2da      	uxtb	r2, r3
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	705a      	strb	r2, [r3, #1]
  time /= 60; // now it is hours
 8006d8a:	69bb      	ldr	r3, [r7, #24]
 8006d8c:	213c      	movs	r1, #60	@ 0x3c
 8006d8e:	0018      	movs	r0, r3
 8006d90:	f7f9 fa08 	bl	80001a4 <__udivsi3>
 8006d94:	0003      	movs	r3, r0
 8006d96:	61bb      	str	r3, [r7, #24]
  currentTime->Hours = time % 24;
 8006d98:	69bb      	ldr	r3, [r7, #24]
 8006d9a:	2118      	movs	r1, #24
 8006d9c:	0018      	movs	r0, r3
 8006d9e:	f7f9 fa87 	bl	80002b0 <__aeabi_uidivmod>
 8006da2:	000b      	movs	r3, r1
 8006da4:	b2da      	uxtb	r2, r3
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	701a      	strb	r2, [r3, #0]
  time /= 24; // now it is days
 8006daa:	69bb      	ldr	r3, [r7, #24]
 8006dac:	2118      	movs	r1, #24
 8006dae:	0018      	movs	r0, r3
 8006db0:	f7f9 f9f8 	bl	80001a4 <__udivsi3>
 8006db4:	0003      	movs	r3, r0
 8006db6:	61bb      	str	r3, [r7, #24]
  currentDate->WeekDay = ((time - 1) % 7) + 1;  // Monday is day 1, since sat 1-1-2000
 8006db8:	69bb      	ldr	r3, [r7, #24]
 8006dba:	3b01      	subs	r3, #1
 8006dbc:	2107      	movs	r1, #7
 8006dbe:	0018      	movs	r0, r3
 8006dc0:	f7f9 fa76 	bl	80002b0 <__aeabi_uidivmod>
 8006dc4:	000b      	movs	r3, r1
 8006dc6:	b2db      	uxtb	r3, r3
 8006dc8:	3301      	adds	r3, #1
 8006dca:	b2da      	uxtb	r2, r3
 8006dcc:	68bb      	ldr	r3, [r7, #8]
 8006dce:	701a      	strb	r2, [r3, #0]
  year = 0;
 8006dd0:	231f      	movs	r3, #31
 8006dd2:	18fb      	adds	r3, r7, r3
 8006dd4:	2200      	movs	r2, #0
 8006dd6:	701a      	strb	r2, [r3, #0]
  days = 0;
 8006dd8:	2300      	movs	r3, #0
 8006dda:	617b      	str	r3, [r7, #20]
  while((days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
 8006ddc:	e005      	b.n	8006dea <breakPosixTime+0xa2>
    year++;
 8006dde:	211f      	movs	r1, #31
 8006de0:	187b      	adds	r3, r7, r1
 8006de2:	781a      	ldrb	r2, [r3, #0]
 8006de4:	187b      	adds	r3, r7, r1
 8006de6:	3201      	adds	r2, #1
 8006de8:	701a      	strb	r2, [r3, #0]
  while((days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
 8006dea:	241f      	movs	r4, #31
 8006dec:	193b      	adds	r3, r7, r4
 8006dee:	781b      	ldrb	r3, [r3, #0]
 8006df0:	4a64      	ldr	r2, [pc, #400]	@ (8006f84 <breakPosixTime+0x23c>)
 8006df2:	4694      	mov	ip, r2
 8006df4:	4463      	add	r3, ip
 8006df6:	001a      	movs	r2, r3
 8006df8:	2303      	movs	r3, #3
 8006dfa:	4013      	ands	r3, r2
 8006dfc:	d119      	bne.n	8006e32 <breakPosixTime+0xea>
 8006dfe:	193b      	adds	r3, r7, r4
 8006e00:	781b      	ldrb	r3, [r3, #0]
 8006e02:	4a60      	ldr	r2, [pc, #384]	@ (8006f84 <breakPosixTime+0x23c>)
 8006e04:	4694      	mov	ip, r2
 8006e06:	4463      	add	r3, ip
 8006e08:	2164      	movs	r1, #100	@ 0x64
 8006e0a:	0018      	movs	r0, r3
 8006e0c:	f7f9 fb3a 	bl	8000484 <__aeabi_idivmod>
 8006e10:	1e0b      	subs	r3, r1, #0
 8006e12:	d10b      	bne.n	8006e2c <breakPosixTime+0xe4>
 8006e14:	193b      	adds	r3, r7, r4
 8006e16:	781b      	ldrb	r3, [r3, #0]
 8006e18:	4a5a      	ldr	r2, [pc, #360]	@ (8006f84 <breakPosixTime+0x23c>)
 8006e1a:	4694      	mov	ip, r2
 8006e1c:	4463      	add	r3, ip
 8006e1e:	22c8      	movs	r2, #200	@ 0xc8
 8006e20:	0051      	lsls	r1, r2, #1
 8006e22:	0018      	movs	r0, r3
 8006e24:	f7f9 fb2e 	bl	8000484 <__aeabi_idivmod>
 8006e28:	1e0b      	subs	r3, r1, #0
 8006e2a:	d102      	bne.n	8006e32 <breakPosixTime+0xea>
 8006e2c:	23b7      	movs	r3, #183	@ 0xb7
 8006e2e:	005b      	lsls	r3, r3, #1
 8006e30:	e001      	b.n	8006e36 <breakPosixTime+0xee>
 8006e32:	236e      	movs	r3, #110	@ 0x6e
 8006e34:	33ff      	adds	r3, #255	@ 0xff
 8006e36:	697a      	ldr	r2, [r7, #20]
 8006e38:	18d3      	adds	r3, r2, r3
 8006e3a:	617b      	str	r3, [r7, #20]
 8006e3c:	697a      	ldr	r2, [r7, #20]
 8006e3e:	69bb      	ldr	r3, [r7, #24]
 8006e40:	429a      	cmp	r2, r3
 8006e42:	d9cc      	bls.n	8006dde <breakPosixTime+0x96>
  }
  currentDate->Year = year; // year is offset from 1970
 8006e44:	68bb      	ldr	r3, [r7, #8]
 8006e46:	241f      	movs	r4, #31
 8006e48:	193a      	adds	r2, r7, r4
 8006e4a:	7812      	ldrb	r2, [r2, #0]
 8006e4c:	70da      	strb	r2, [r3, #3]

  days -= LEAP_YEAR(year) ? 366 : 365;
 8006e4e:	193b      	adds	r3, r7, r4
 8006e50:	781b      	ldrb	r3, [r3, #0]
 8006e52:	4a4c      	ldr	r2, [pc, #304]	@ (8006f84 <breakPosixTime+0x23c>)
 8006e54:	4694      	mov	ip, r2
 8006e56:	4463      	add	r3, ip
 8006e58:	001a      	movs	r2, r3
 8006e5a:	2303      	movs	r3, #3
 8006e5c:	4013      	ands	r3, r2
 8006e5e:	d119      	bne.n	8006e94 <breakPosixTime+0x14c>
 8006e60:	193b      	adds	r3, r7, r4
 8006e62:	781b      	ldrb	r3, [r3, #0]
 8006e64:	4a47      	ldr	r2, [pc, #284]	@ (8006f84 <breakPosixTime+0x23c>)
 8006e66:	4694      	mov	ip, r2
 8006e68:	4463      	add	r3, ip
 8006e6a:	2164      	movs	r1, #100	@ 0x64
 8006e6c:	0018      	movs	r0, r3
 8006e6e:	f7f9 fb09 	bl	8000484 <__aeabi_idivmod>
 8006e72:	1e0b      	subs	r3, r1, #0
 8006e74:	d10b      	bne.n	8006e8e <breakPosixTime+0x146>
 8006e76:	193b      	adds	r3, r7, r4
 8006e78:	781b      	ldrb	r3, [r3, #0]
 8006e7a:	4a42      	ldr	r2, [pc, #264]	@ (8006f84 <breakPosixTime+0x23c>)
 8006e7c:	4694      	mov	ip, r2
 8006e7e:	4463      	add	r3, ip
 8006e80:	22c8      	movs	r2, #200	@ 0xc8
 8006e82:	0051      	lsls	r1, r2, #1
 8006e84:	0018      	movs	r0, r3
 8006e86:	f7f9 fafd 	bl	8000484 <__aeabi_idivmod>
 8006e8a:	1e0b      	subs	r3, r1, #0
 8006e8c:	d102      	bne.n	8006e94 <breakPosixTime+0x14c>
 8006e8e:	23b7      	movs	r3, #183	@ 0xb7
 8006e90:	005b      	lsls	r3, r3, #1
 8006e92:	e001      	b.n	8006e98 <breakPosixTime+0x150>
 8006e94:	236e      	movs	r3, #110	@ 0x6e
 8006e96:	33ff      	adds	r3, #255	@ 0xff
 8006e98:	697a      	ldr	r2, [r7, #20]
 8006e9a:	1ad3      	subs	r3, r2, r3
 8006e9c:	617b      	str	r3, [r7, #20]
  time  -= days; // now it is days in this year, starting at 0
 8006e9e:	69ba      	ldr	r2, [r7, #24]
 8006ea0:	697b      	ldr	r3, [r7, #20]
 8006ea2:	1ad3      	subs	r3, r2, r3
 8006ea4:	61bb      	str	r3, [r7, #24]

  days=0;
 8006ea6:	2300      	movs	r3, #0
 8006ea8:	617b      	str	r3, [r7, #20]
  month=0;
 8006eaa:	211e      	movs	r1, #30
 8006eac:	187b      	adds	r3, r7, r1
 8006eae:	2200      	movs	r2, #0
 8006eb0:	701a      	strb	r2, [r3, #0]
  monthLength=0;
 8006eb2:	231d      	movs	r3, #29
 8006eb4:	18fb      	adds	r3, r7, r3
 8006eb6:	2200      	movs	r2, #0
 8006eb8:	701a      	strb	r2, [r3, #0]
  for (month=0; month<12; month++) {
 8006eba:	187b      	adds	r3, r7, r1
 8006ebc:	2200      	movs	r2, #0
 8006ebe:	701a      	strb	r2, [r3, #0]
 8006ec0:	e048      	b.n	8006f54 <breakPosixTime+0x20c>
    if (month==1) { // february
 8006ec2:	231e      	movs	r3, #30
 8006ec4:	18fb      	adds	r3, r7, r3
 8006ec6:	781b      	ldrb	r3, [r3, #0]
 8006ec8:	2b01      	cmp	r3, #1
 8006eca:	d12a      	bne.n	8006f22 <breakPosixTime+0x1da>
      if (LEAP_YEAR(year)) {
 8006ecc:	241f      	movs	r4, #31
 8006ece:	193b      	adds	r3, r7, r4
 8006ed0:	781b      	ldrb	r3, [r3, #0]
 8006ed2:	4a2c      	ldr	r2, [pc, #176]	@ (8006f84 <breakPosixTime+0x23c>)
 8006ed4:	4694      	mov	ip, r2
 8006ed6:	4463      	add	r3, ip
 8006ed8:	001a      	movs	r2, r3
 8006eda:	2303      	movs	r3, #3
 8006edc:	4013      	ands	r3, r2
 8006ede:	d11b      	bne.n	8006f18 <breakPosixTime+0x1d0>
 8006ee0:	193b      	adds	r3, r7, r4
 8006ee2:	781b      	ldrb	r3, [r3, #0]
 8006ee4:	4a27      	ldr	r2, [pc, #156]	@ (8006f84 <breakPosixTime+0x23c>)
 8006ee6:	4694      	mov	ip, r2
 8006ee8:	4463      	add	r3, ip
 8006eea:	2164      	movs	r1, #100	@ 0x64
 8006eec:	0018      	movs	r0, r3
 8006eee:	f7f9 fac9 	bl	8000484 <__aeabi_idivmod>
 8006ef2:	1e0b      	subs	r3, r1, #0
 8006ef4:	d10b      	bne.n	8006f0e <breakPosixTime+0x1c6>
 8006ef6:	193b      	adds	r3, r7, r4
 8006ef8:	781b      	ldrb	r3, [r3, #0]
 8006efa:	4a22      	ldr	r2, [pc, #136]	@ (8006f84 <breakPosixTime+0x23c>)
 8006efc:	4694      	mov	ip, r2
 8006efe:	4463      	add	r3, ip
 8006f00:	22c8      	movs	r2, #200	@ 0xc8
 8006f02:	0051      	lsls	r1, r2, #1
 8006f04:	0018      	movs	r0, r3
 8006f06:	f7f9 fabd 	bl	8000484 <__aeabi_idivmod>
 8006f0a:	1e0b      	subs	r3, r1, #0
 8006f0c:	d104      	bne.n	8006f18 <breakPosixTime+0x1d0>
        monthLength=29;
 8006f0e:	231d      	movs	r3, #29
 8006f10:	18fb      	adds	r3, r7, r3
 8006f12:	221d      	movs	r2, #29
 8006f14:	701a      	strb	r2, [r3, #0]
 8006f16:	e00c      	b.n	8006f32 <breakPosixTime+0x1ea>
      } else {
        monthLength=28;
 8006f18:	231d      	movs	r3, #29
 8006f1a:	18fb      	adds	r3, r7, r3
 8006f1c:	221c      	movs	r2, #28
 8006f1e:	701a      	strb	r2, [r3, #0]
 8006f20:	e007      	b.n	8006f32 <breakPosixTime+0x1ea>
      }
    } else {
      monthLength = monthDays[month];
 8006f22:	231e      	movs	r3, #30
 8006f24:	18fb      	adds	r3, r7, r3
 8006f26:	781a      	ldrb	r2, [r3, #0]
 8006f28:	231d      	movs	r3, #29
 8006f2a:	18fb      	adds	r3, r7, r3
 8006f2c:	4916      	ldr	r1, [pc, #88]	@ (8006f88 <breakPosixTime+0x240>)
 8006f2e:	5c8a      	ldrb	r2, [r1, r2]
 8006f30:	701a      	strb	r2, [r3, #0]
    }

    if (time >= monthLength) {
 8006f32:	211d      	movs	r1, #29
 8006f34:	187b      	adds	r3, r7, r1
 8006f36:	781b      	ldrb	r3, [r3, #0]
 8006f38:	69ba      	ldr	r2, [r7, #24]
 8006f3a:	429a      	cmp	r2, r3
 8006f3c:	d310      	bcc.n	8006f60 <breakPosixTime+0x218>
      time -= monthLength;
 8006f3e:	187b      	adds	r3, r7, r1
 8006f40:	781b      	ldrb	r3, [r3, #0]
 8006f42:	69ba      	ldr	r2, [r7, #24]
 8006f44:	1ad3      	subs	r3, r2, r3
 8006f46:	61bb      	str	r3, [r7, #24]
  for (month=0; month<12; month++) {
 8006f48:	211e      	movs	r1, #30
 8006f4a:	187b      	adds	r3, r7, r1
 8006f4c:	781a      	ldrb	r2, [r3, #0]
 8006f4e:	187b      	adds	r3, r7, r1
 8006f50:	3201      	adds	r2, #1
 8006f52:	701a      	strb	r2, [r3, #0]
 8006f54:	231e      	movs	r3, #30
 8006f56:	18fb      	adds	r3, r7, r3
 8006f58:	781b      	ldrb	r3, [r3, #0]
 8006f5a:	2b0b      	cmp	r3, #11
 8006f5c:	d9b1      	bls.n	8006ec2 <breakPosixTime+0x17a>
 8006f5e:	e000      	b.n	8006f62 <breakPosixTime+0x21a>
    } else {
        break;
 8006f60:	46c0      	nop			@ (mov r8, r8)
    }
  }
  currentDate->Month = month + 1;  // jan is month 1
 8006f62:	231e      	movs	r3, #30
 8006f64:	18fb      	adds	r3, r7, r3
 8006f66:	781b      	ldrb	r3, [r3, #0]
 8006f68:	3301      	adds	r3, #1
 8006f6a:	b2da      	uxtb	r2, r3
 8006f6c:	68bb      	ldr	r3, [r7, #8]
 8006f6e:	705a      	strb	r2, [r3, #1]
  currentDate->Date = time + 1;     // day of month
 8006f70:	69bb      	ldr	r3, [r7, #24]
 8006f72:	b2db      	uxtb	r3, r3
 8006f74:	3301      	adds	r3, #1
 8006f76:	b2da      	uxtb	r2, r3
 8006f78:	68bb      	ldr	r3, [r7, #8]
 8006f7a:	709a      	strb	r2, [r3, #2]
//  printf("breakPosixTime: daynr: %d, %s %02d-%02d-%d %02d:%02d:%02d\r\n", currentDate->WeekDay, dayNames[currentDate->WeekDay - 1],
//      currentDate->Date, currentDate->Month, currentDate->Year, currentTime->Hours, currentTime->Minutes, currentTime->Seconds);
}
 8006f7c:	46c0      	nop			@ (mov r8, r8)
 8006f7e:	46bd      	mov	sp, r7
 8006f80:	b009      	add	sp, #36	@ 0x24
 8006f82:	bd90      	pop	{r4, r7, pc}
 8006f84:	000007b2 	.word	0x000007b2
 8006f88:	08024834 	.word	0x08024834

08006f8c <MX_ADC_Init>:

ADC_HandleTypeDef hadc;

/* ADC init function */
void MX_ADC_Init(void)
{
 8006f8c:	b580      	push	{r7, lr}
 8006f8e:	b082      	sub	sp, #8
 8006f90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8006f92:	003b      	movs	r3, r7
 8006f94:	0018      	movs	r0, r3
 8006f96:	2308      	movs	r3, #8
 8006f98:	001a      	movs	r2, r3
 8006f9a:	2100      	movs	r1, #0
 8006f9c:	f018 fca6 	bl	801f8ec <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8006fa0:	4b30      	ldr	r3, [pc, #192]	@ (8007064 <MX_ADC_Init+0xd8>)
 8006fa2:	4a31      	ldr	r2, [pc, #196]	@ (8007068 <MX_ADC_Init+0xdc>)
 8006fa4:	601a      	str	r2, [r3, #0]
  hadc.Init.OversamplingMode = DISABLE;
 8006fa6:	4b2f      	ldr	r3, [pc, #188]	@ (8007064 <MX_ADC_Init+0xd8>)
 8006fa8:	2200      	movs	r2, #0
 8006faa:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 8006fac:	4b2d      	ldr	r3, [pc, #180]	@ (8007064 <MX_ADC_Init+0xd8>)
 8006fae:	22c0      	movs	r2, #192	@ 0xc0
 8006fb0:	0612      	lsls	r2, r2, #24
 8006fb2:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8006fb4:	4b2b      	ldr	r3, [pc, #172]	@ (8007064 <MX_ADC_Init+0xd8>)
 8006fb6:	2200      	movs	r2, #0
 8006fb8:	609a      	str	r2, [r3, #8]
  hadc.Init.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8006fba:	4b2a      	ldr	r3, [pc, #168]	@ (8007064 <MX_ADC_Init+0xd8>)
 8006fbc:	2200      	movs	r2, #0
 8006fbe:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8006fc0:	4b28      	ldr	r3, [pc, #160]	@ (8007064 <MX_ADC_Init+0xd8>)
 8006fc2:	2201      	movs	r2, #1
 8006fc4:	611a      	str	r2, [r3, #16]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8006fc6:	4b27      	ldr	r3, [pc, #156]	@ (8007064 <MX_ADC_Init+0xd8>)
 8006fc8:	2200      	movs	r2, #0
 8006fca:	60da      	str	r2, [r3, #12]
  hadc.Init.ContinuousConvMode = DISABLE;
 8006fcc:	4b25      	ldr	r3, [pc, #148]	@ (8007064 <MX_ADC_Init+0xd8>)
 8006fce:	2220      	movs	r2, #32
 8006fd0:	2100      	movs	r1, #0
 8006fd2:	5499      	strb	r1, [r3, r2]
  hadc.Init.DiscontinuousConvMode = ENABLE;
 8006fd4:	4b23      	ldr	r3, [pc, #140]	@ (8007064 <MX_ADC_Init+0xd8>)
 8006fd6:	2221      	movs	r2, #33	@ 0x21
 8006fd8:	2101      	movs	r1, #1
 8006fda:	5499      	strb	r1, [r3, r2]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8006fdc:	4b21      	ldr	r3, [pc, #132]	@ (8007064 <MX_ADC_Init+0xd8>)
 8006fde:	2200      	movs	r2, #0
 8006fe0:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8006fe2:	4b20      	ldr	r3, [pc, #128]	@ (8007064 <MX_ADC_Init+0xd8>)
 8006fe4:	22c2      	movs	r2, #194	@ 0xc2
 8006fe6:	32ff      	adds	r2, #255	@ 0xff
 8006fe8:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc.Init.DMAContinuousRequests = DISABLE;
 8006fea:	4b1e      	ldr	r3, [pc, #120]	@ (8007064 <MX_ADC_Init+0xd8>)
 8006fec:	222c      	movs	r2, #44	@ 0x2c
 8006fee:	2100      	movs	r1, #0
 8006ff0:	5499      	strb	r1, [r3, r2]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8006ff2:	4b1c      	ldr	r3, [pc, #112]	@ (8007064 <MX_ADC_Init+0xd8>)
 8006ff4:	2204      	movs	r2, #4
 8006ff6:	615a      	str	r2, [r3, #20]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8006ff8:	4b1a      	ldr	r3, [pc, #104]	@ (8007064 <MX_ADC_Init+0xd8>)
 8006ffa:	2200      	movs	r2, #0
 8006ffc:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc.Init.LowPowerAutoWait = DISABLE;
 8006ffe:	4b19      	ldr	r3, [pc, #100]	@ (8007064 <MX_ADC_Init+0xd8>)
 8007000:	2200      	movs	r2, #0
 8007002:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerFrequencyMode = DISABLE;
 8007004:	4b17      	ldr	r3, [pc, #92]	@ (8007064 <MX_ADC_Init+0xd8>)
 8007006:	2200      	movs	r2, #0
 8007008:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 800700a:	4b16      	ldr	r3, [pc, #88]	@ (8007064 <MX_ADC_Init+0xd8>)
 800700c:	2200      	movs	r2, #0
 800700e:	61da      	str	r2, [r3, #28]
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8007010:	4b14      	ldr	r3, [pc, #80]	@ (8007064 <MX_ADC_Init+0xd8>)
 8007012:	0018      	movs	r0, r3
 8007014:	f007 fa90 	bl	800e538 <HAL_ADC_Init>
 8007018:	1e03      	subs	r3, r0, #0
 800701a:	d001      	beq.n	8007020 <MX_ADC_Init+0x94>
  {
    Error_Handler();
 800701c:	f001 f824 	bl	8008068 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8007020:	003b      	movs	r3, r7
 8007022:	4a12      	ldr	r2, [pc, #72]	@ (800706c <MX_ADC_Init+0xe0>)
 8007024:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8007026:	003b      	movs	r3, r7
 8007028:	2280      	movs	r2, #128	@ 0x80
 800702a:	0152      	lsls	r2, r2, #5
 800702c:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800702e:	003a      	movs	r2, r7
 8007030:	4b0c      	ldr	r3, [pc, #48]	@ (8007064 <MX_ADC_Init+0xd8>)
 8007032:	0011      	movs	r1, r2
 8007034:	0018      	movs	r0, r3
 8007036:	f007 fcef 	bl	800ea18 <HAL_ADC_ConfigChannel>
 800703a:	1e03      	subs	r3, r0, #0
 800703c:	d001      	beq.n	8007042 <MX_ADC_Init+0xb6>
  {
    Error_Handler();
 800703e:	f001 f813 	bl	8008068 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8007042:	003b      	movs	r3, r7
 8007044:	4a0a      	ldr	r2, [pc, #40]	@ (8007070 <MX_ADC_Init+0xe4>)
 8007046:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8007048:	003a      	movs	r2, r7
 800704a:	4b06      	ldr	r3, [pc, #24]	@ (8007064 <MX_ADC_Init+0xd8>)
 800704c:	0011      	movs	r1, r2
 800704e:	0018      	movs	r0, r3
 8007050:	f007 fce2 	bl	800ea18 <HAL_ADC_ConfigChannel>
 8007054:	1e03      	subs	r3, r0, #0
 8007056:	d001      	beq.n	800705c <MX_ADC_Init+0xd0>
  {
    Error_Handler();
 8007058:	f001 f806 	bl	8008068 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 800705c:	46c0      	nop			@ (mov r8, r8)
 800705e:	46bd      	mov	sp, r7
 8007060:	b002      	add	sp, #8
 8007062:	bd80      	pop	{r7, pc}
 8007064:	20000d90 	.word	0x20000d90
 8007068:	40012400 	.word	0x40012400
 800706c:	38004000 	.word	0x38004000
 8007070:	3c008000 	.word	0x3c008000

08007074 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8007074:	b590      	push	{r4, r7, lr}
 8007076:	b089      	sub	sp, #36	@ 0x24
 8007078:	af00      	add	r7, sp, #0
 800707a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800707c:	240c      	movs	r4, #12
 800707e:	193b      	adds	r3, r7, r4
 8007080:	0018      	movs	r0, r3
 8007082:	2314      	movs	r3, #20
 8007084:	001a      	movs	r2, r3
 8007086:	2100      	movs	r1, #0
 8007088:	f018 fc30 	bl	801f8ec <memset>
  if(adcHandle->Instance==ADC1)
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	4a14      	ldr	r2, [pc, #80]	@ (80070e4 <HAL_ADC_MspInit+0x70>)
 8007092:	4293      	cmp	r3, r2
 8007094:	d121      	bne.n	80070da <HAL_ADC_MspInit+0x66>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8007096:	4b14      	ldr	r3, [pc, #80]	@ (80070e8 <HAL_ADC_MspInit+0x74>)
 8007098:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800709a:	4b13      	ldr	r3, [pc, #76]	@ (80070e8 <HAL_ADC_MspInit+0x74>)
 800709c:	2180      	movs	r1, #128	@ 0x80
 800709e:	0089      	lsls	r1, r1, #2
 80070a0:	430a      	orrs	r2, r1
 80070a2:	635a      	str	r2, [r3, #52]	@ 0x34

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80070a4:	4b10      	ldr	r3, [pc, #64]	@ (80070e8 <HAL_ADC_MspInit+0x74>)
 80070a6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80070a8:	4b0f      	ldr	r3, [pc, #60]	@ (80070e8 <HAL_ADC_MspInit+0x74>)
 80070aa:	2104      	movs	r1, #4
 80070ac:	430a      	orrs	r2, r1
 80070ae:	62da      	str	r2, [r3, #44]	@ 0x2c
 80070b0:	4b0d      	ldr	r3, [pc, #52]	@ (80070e8 <HAL_ADC_MspInit+0x74>)
 80070b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80070b4:	2204      	movs	r2, #4
 80070b6:	4013      	ands	r3, r2
 80070b8:	60bb      	str	r3, [r7, #8]
 80070ba:	68bb      	ldr	r3, [r7, #8]
    /**ADC GPIO Configuration
    PC4     ------> ADC_IN14
    PC5     ------> ADC_IN15
    */
    GPIO_InitStruct.Pin = BatMeasure_Pin|SolarMeasure_Pin;
 80070bc:	193b      	adds	r3, r7, r4
 80070be:	2230      	movs	r2, #48	@ 0x30
 80070c0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80070c2:	193b      	adds	r3, r7, r4
 80070c4:	2203      	movs	r2, #3
 80070c6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80070c8:	193b      	adds	r3, r7, r4
 80070ca:	2200      	movs	r2, #0
 80070cc:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80070ce:	193b      	adds	r3, r7, r4
 80070d0:	4a06      	ldr	r2, [pc, #24]	@ (80070ec <HAL_ADC_MspInit+0x78>)
 80070d2:	0019      	movs	r1, r3
 80070d4:	0010      	movs	r0, r2
 80070d6:	f008 fabd 	bl	800f654 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80070da:	46c0      	nop			@ (mov r8, r8)
 80070dc:	46bd      	mov	sp, r7
 80070de:	b009      	add	sp, #36	@ 0x24
 80070e0:	bd90      	pop	{r4, r7, pc}
 80070e2:	46c0      	nop			@ (mov r8, r8)
 80070e4:	40012400 	.word	0x40012400
 80070e8:	40021000 	.word	0x40021000
 80070ec:	50000800 	.word	0x50000800

080070f0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80070f0:	b580      	push	{r7, lr}
 80070f2:	b082      	sub	sp, #8
 80070f4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80070f6:	4b10      	ldr	r3, [pc, #64]	@ (8007138 <MX_DMA_Init+0x48>)
 80070f8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80070fa:	4b0f      	ldr	r3, [pc, #60]	@ (8007138 <MX_DMA_Init+0x48>)
 80070fc:	2101      	movs	r1, #1
 80070fe:	430a      	orrs	r2, r1
 8007100:	631a      	str	r2, [r3, #48]	@ 0x30
 8007102:	4b0d      	ldr	r3, [pc, #52]	@ (8007138 <MX_DMA_Init+0x48>)
 8007104:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007106:	2201      	movs	r2, #1
 8007108:	4013      	ands	r3, r2
 800710a:	607b      	str	r3, [r7, #4]
 800710c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 800710e:	2200      	movs	r2, #0
 8007110:	2100      	movs	r1, #0
 8007112:	200a      	movs	r0, #10
 8007114:	f007 fe4c 	bl	800edb0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 8007118:	200a      	movs	r0, #10
 800711a:	f007 fe5e 	bl	800edda <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_5_6_7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_5_6_7_IRQn, 3, 0);
 800711e:	2200      	movs	r2, #0
 8007120:	2103      	movs	r1, #3
 8007122:	200b      	movs	r0, #11
 8007124:	f007 fe44 	bl	800edb0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_5_6_7_IRQn);
 8007128:	200b      	movs	r0, #11
 800712a:	f007 fe56 	bl	800edda <HAL_NVIC_EnableIRQ>

}
 800712e:	46c0      	nop			@ (mov r8, r8)
 8007130:	46bd      	mov	sp, r7
 8007132:	b002      	add	sp, #8
 8007134:	bd80      	pop	{r7, pc}
 8007136:	46c0      	nop			@ (mov r8, r8)
 8007138:	40021000 	.word	0x40021000

0800713c <accessLUT10log10>:


// Obtain the value from the lookup table (LUT) and convert it to
// integer and fractional parts:
static void accessLUT10log10(uint32_t index, uint32_t * intPart, uint32_t * fracPart)
{
 800713c:	b580      	push	{r7, lr}
 800713e:	b086      	sub	sp, #24
 8007140:	af00      	add	r7, sp, #0
 8007142:	60f8      	str	r0, [r7, #12]
 8007144:	60b9      	str	r1, [r7, #8]
 8007146:	607a      	str	r2, [r7, #4]
    if (index >= LUT_10LOG10_LENGTH)
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	2b7f      	cmp	r3, #127	@ 0x7f
 800714c:	d901      	bls.n	8007152 <accessLUT10log10+0x16>
    {
        index = LUT_10LOG10_LENGTH - 1;
 800714e:	237f      	movs	r3, #127	@ 0x7f
 8007150:	60fb      	str	r3, [r7, #12]
    }
    uint8_t x = LUT10log10[index];
 8007152:	2017      	movs	r0, #23
 8007154:	183b      	adds	r3, r7, r0
 8007156:	490d      	ldr	r1, [pc, #52]	@ (800718c <accessLUT10log10+0x50>)
 8007158:	68fa      	ldr	r2, [r7, #12]
 800715a:	188a      	adds	r2, r1, r2
 800715c:	7812      	ldrb	r2, [r2, #0]
 800715e:	701a      	strb	r2, [r3, #0]
    intPart[0] = (uint32_t) (x >> fracPartLSBs);
 8007160:	0001      	movs	r1, r0
 8007162:	187b      	adds	r3, r7, r1
 8007164:	781b      	ldrb	r3, [r3, #0]
 8007166:	2206      	movs	r2, #6
 8007168:	4113      	asrs	r3, r2
 800716a:	001a      	movs	r2, r3
 800716c:	68bb      	ldr	r3, [r7, #8]
 800716e:	601a      	str	r2, [r3, #0]
    fracPart[0] = ((uint32_t) x) - (intPart[0] << fracPartLSBs);
 8007170:	187b      	adds	r3, r7, r1
 8007172:	781a      	ldrb	r2, [r3, #0]
 8007174:	68bb      	ldr	r3, [r7, #8]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	2106      	movs	r1, #6
 800717a:	408b      	lsls	r3, r1
 800717c:	1ad2      	subs	r2, r2, r3
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	601a      	str	r2, [r3, #0]
}
 8007182:	46c0      	nop			@ (mov r8, r8)
 8007184:	46bd      	mov	sp, r7
 8007186:	b006      	add	sp, #24
 8007188:	bd80      	pop	{r7, pc}
 800718a:	46c0      	nop			@ (mov r8, r8)
 800718c:	08024840 	.word	0x08024840

08007190 <efficient10log10>:

// Calculate 10*log10(P), returning the result as an integer part
// and a 1-decimal-place fractional part.
// i.e. result = integerPart + (fractionalPart/10);
void efficient10log10(uint64_t P, int32_t * integerPart, int32_t * fractionalPart)
{
 8007190:	b5b0      	push	{r4, r5, r7, lr}
 8007192:	b090      	sub	sp, #64	@ 0x40
 8007194:	af00      	add	r7, sp, #0
 8007196:	6138      	str	r0, [r7, #16]
 8007198:	6179      	str	r1, [r7, #20]
 800719a:	60fa      	str	r2, [r7, #12]
 800719c:	60bb      	str	r3, [r7, #8]
    // NOTE: the CLZ (count leading zeros) instruction is not available on M0/M0+
    // so use a simple shifting algorithm:
    uint64_t limit = (((uint64_t) 1) << mantissa_kBits) - 1; // limit = ((2^kBits)-1)
 800719e:	2308      	movs	r3, #8
 80071a0:	001a      	movs	r2, r3
 80071a2:	3a20      	subs	r2, #32
 80071a4:	2a00      	cmp	r2, #0
 80071a6:	db03      	blt.n	80071b0 <efficient10log10+0x20>
 80071a8:	2101      	movs	r1, #1
 80071aa:	4091      	lsls	r1, r2
 80071ac:	000d      	movs	r5, r1
 80071ae:	e008      	b.n	80071c2 <efficient10log10+0x32>
 80071b0:	2220      	movs	r2, #32
 80071b2:	1ad2      	subs	r2, r2, r3
 80071b4:	2101      	movs	r1, #1
 80071b6:	40d1      	lsrs	r1, r2
 80071b8:	000a      	movs	r2, r1
 80071ba:	2100      	movs	r1, #0
 80071bc:	4099      	lsls	r1, r3
 80071be:	000d      	movs	r5, r1
 80071c0:	4315      	orrs	r5, r2
 80071c2:	2201      	movs	r2, #1
 80071c4:	409a      	lsls	r2, r3
 80071c6:	0014      	movs	r4, r2
 80071c8:	2201      	movs	r2, #1
 80071ca:	4252      	negs	r2, r2
 80071cc:	17d3      	asrs	r3, r2, #31
 80071ce:	1912      	adds	r2, r2, r4
 80071d0:	416b      	adcs	r3, r5
 80071d2:	633a      	str	r2, [r7, #48]	@ 0x30
 80071d4:	637b      	str	r3, [r7, #52]	@ 0x34
    // Bit-shift P downwards until the remaining mantissa is a
    // "mantissa_kBits" length value
    uint16_t bShift = 0;
 80071d6:	2336      	movs	r3, #54	@ 0x36
 80071d8:	2208      	movs	r2, #8
 80071da:	189b      	adds	r3, r3, r2
 80071dc:	19db      	adds	r3, r3, r7
 80071de:	2200      	movs	r2, #0
 80071e0:	801a      	strh	r2, [r3, #0]
    while (P > limit)
 80071e2:	e017      	b.n	8007214 <efficient10log10+0x84>
    {
        P = P >> 1;
 80071e4:	697b      	ldr	r3, [r7, #20]
 80071e6:	07db      	lsls	r3, r3, #31
 80071e8:	693a      	ldr	r2, [r7, #16]
 80071ea:	0852      	lsrs	r2, r2, #1
 80071ec:	603a      	str	r2, [r7, #0]
 80071ee:	683a      	ldr	r2, [r7, #0]
 80071f0:	431a      	orrs	r2, r3
 80071f2:	603a      	str	r2, [r7, #0]
 80071f4:	697b      	ldr	r3, [r7, #20]
 80071f6:	085b      	lsrs	r3, r3, #1
 80071f8:	607b      	str	r3, [r7, #4]
 80071fa:	683b      	ldr	r3, [r7, #0]
 80071fc:	687c      	ldr	r4, [r7, #4]
 80071fe:	613b      	str	r3, [r7, #16]
 8007200:	617c      	str	r4, [r7, #20]
        bShift++;
 8007202:	2136      	movs	r1, #54	@ 0x36
 8007204:	2008      	movs	r0, #8
 8007206:	180b      	adds	r3, r1, r0
 8007208:	19db      	adds	r3, r3, r7
 800720a:	881a      	ldrh	r2, [r3, #0]
 800720c:	180b      	adds	r3, r1, r0
 800720e:	19db      	adds	r3, r3, r7
 8007210:	3201      	adds	r2, #1
 8007212:	801a      	strh	r2, [r3, #0]
    while (P > limit)
 8007214:	697a      	ldr	r2, [r7, #20]
 8007216:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007218:	429a      	cmp	r2, r3
 800721a:	d8e3      	bhi.n	80071e4 <efficient10log10+0x54>
 800721c:	697a      	ldr	r2, [r7, #20]
 800721e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007220:	429a      	cmp	r2, r3
 8007222:	d103      	bne.n	800722c <efficient10log10+0x9c>
 8007224:	693a      	ldr	r2, [r7, #16]
 8007226:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007228:	429a      	cmp	r2, r3
 800722a:	d8db      	bhi.n	80071e4 <efficient10log10+0x54>
    }
    // Calculate the index to the LUT:
    uint32_t ind = ((uint32_t) P) - (((uint32_t) 1) << (mantissa_kBits-1));
 800722c:	693a      	ldr	r2, [r7, #16]
 800722e:	2308      	movs	r3, #8
 8007230:	3b01      	subs	r3, #1
 8007232:	2101      	movs	r1, #1
 8007234:	4099      	lsls	r1, r3
 8007236:	000b      	movs	r3, r1
 8007238:	1ad3      	subs	r3, r2, r3
 800723a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    // Do the lookup:
    uint32_t lutIntPart = 0;
 800723c:	2300      	movs	r3, #0
 800723e:	62bb      	str	r3, [r7, #40]	@ 0x28
    uint32_t lutFracPart = 0;
 8007240:	2300      	movs	r3, #0
 8007242:	627b      	str	r3, [r7, #36]	@ 0x24
    accessLUT10log10(ind, &lutIntPart, &lutFracPart);
 8007244:	231c      	movs	r3, #28
 8007246:	2408      	movs	r4, #8
 8007248:	191b      	adds	r3, r3, r4
 800724a:	19da      	adds	r2, r3, r7
 800724c:	2320      	movs	r3, #32
 800724e:	191b      	adds	r3, r3, r4
 8007250:	19d9      	adds	r1, r3, r7
 8007252:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007254:	0018      	movs	r0, r3
 8007256:	f7ff ff71 	bl	800713c <accessLUT10log10>
    // Provide the result as an integer and fractional part
    // (with the fractional part x10)
    int32_t intPart = (int32_t) (intOffset10log10 + lutIntPart
 800725a:	2215      	movs	r2, #21
 800725c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800725e:	18d3      	adds	r3, r2, r3
                        + (bShift * TLT2_intPart));
 8007260:	2036      	movs	r0, #54	@ 0x36
 8007262:	1902      	adds	r2, r0, r4
 8007264:	19d2      	adds	r2, r2, r7
 8007266:	8812      	ldrh	r2, [r2, #0]
 8007268:	2103      	movs	r1, #3
 800726a:	434a      	muls	r2, r1
 800726c:	189b      	adds	r3, r3, r2
    int32_t intPart = (int32_t) (intOffset10log10 + lutIntPart
 800726e:	623b      	str	r3, [r7, #32]
    int32_t fracPart = (int32_t) (lutFracPart
                        + ((bShift * TLT2_shiftedFracPart) >> TLT2_bitshift));
 8007270:	0021      	movs	r1, r4
 8007272:	1843      	adds	r3, r0, r1
 8007274:	19db      	adds	r3, r3, r7
 8007276:	881b      	ldrh	r3, [r3, #0]
 8007278:	2201      	movs	r2, #1
 800727a:	4353      	muls	r3, r2
 800727c:	2203      	movs	r2, #3
 800727e:	4113      	asrs	r3, r2
 8007280:	001a      	movs	r2, r3
 8007282:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007284:	18d3      	adds	r3, r2, r3
    int32_t fracPart = (int32_t) (lutFracPart
 8007286:	61fb      	str	r3, [r7, #28]
    // Make a correction if fractional part is not in range 0->9:
    correctIntFracNumber(&intPart, &fracPart);
 8007288:	2314      	movs	r3, #20
 800728a:	185b      	adds	r3, r3, r1
 800728c:	19da      	adds	r2, r3, r7
 800728e:	2318      	movs	r3, #24
 8007290:	185b      	adds	r3, r3, r1
 8007292:	19db      	adds	r3, r3, r7
 8007294:	0011      	movs	r1, r2
 8007296:	0018      	movs	r0, r3
 8007298:	f000 f80a 	bl	80072b0 <correctIntFracNumber>
    integerPart[0] = intPart;
 800729c:	6a3a      	ldr	r2, [r7, #32]
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	601a      	str	r2, [r3, #0]
    fractionalPart[0] = fracPart;
 80072a2:	69fa      	ldr	r2, [r7, #28]
 80072a4:	68bb      	ldr	r3, [r7, #8]
 80072a6:	601a      	str	r2, [r3, #0]
}
 80072a8:	46c0      	nop			@ (mov r8, r8)
 80072aa:	46bd      	mov	sp, r7
 80072ac:	b010      	add	sp, #64	@ 0x40
 80072ae:	bdb0      	pop	{r4, r5, r7, pc}

080072b0 <correctIntFracNumber>:
// 1-decimal-place fractional parts, correct the result if the fractional
// part has grown to be larger than 9.
// Valid numbers have same sign of both int and frac parts
// (or one/both parts zero) AND |fracPart| < 10
void correctIntFracNumber(int32_t * intPart, int32_t * fracPart)
{
 80072b0:	b580      	push	{r7, lr}
 80072b2:	b082      	sub	sp, #8
 80072b4:	af00      	add	r7, sp, #0
 80072b6:	6078      	str	r0, [r7, #4]
 80072b8:	6039      	str	r1, [r7, #0]
    while (fracPart[0] >= 10)
 80072ba:	e00a      	b.n	80072d2 <correctIntFracNumber+0x22>
    {
        intPart[0] = intPart[0] + 1;
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	1c5a      	adds	r2, r3, #1
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	601a      	str	r2, [r3, #0]
        fracPart[0] = fracPart[0] - 10;
 80072c6:	683b      	ldr	r3, [r7, #0]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	3b0a      	subs	r3, #10
 80072cc:	001a      	movs	r2, r3
 80072ce:	683b      	ldr	r3, [r7, #0]
 80072d0:	601a      	str	r2, [r3, #0]
    while (fracPart[0] >= 10)
 80072d2:	683b      	ldr	r3, [r7, #0]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	2b09      	cmp	r3, #9
 80072d8:	dcf0      	bgt.n	80072bc <correctIntFracNumber+0xc>
    }
    while (fracPart[0] <= -10)
 80072da:	e00a      	b.n	80072f2 <correctIntFracNumber+0x42>
    {
        intPart[0] = intPart[0] - 1;
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	1e5a      	subs	r2, r3, #1
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	601a      	str	r2, [r3, #0]
        fracPart[0] = fracPart[0] + 10;
 80072e6:	683b      	ldr	r3, [r7, #0]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	330a      	adds	r3, #10
 80072ec:	001a      	movs	r2, r3
 80072ee:	683b      	ldr	r3, [r7, #0]
 80072f0:	601a      	str	r2, [r3, #0]
    while (fracPart[0] <= -10)
 80072f2:	683b      	ldr	r3, [r7, #0]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	3309      	adds	r3, #9
 80072f8:	dbf0      	blt.n	80072dc <correctIntFracNumber+0x2c>
    }
    // now correct cases where signs are not consistent:
    if ((intPart[0] < 0) && (fracPart[0] > 0))
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	2b00      	cmp	r3, #0
 8007300:	da0f      	bge.n	8007322 <correctIntFracNumber+0x72>
 8007302:	683b      	ldr	r3, [r7, #0]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	2b00      	cmp	r3, #0
 8007308:	dd0b      	ble.n	8007322 <correctIntFracNumber+0x72>
    {
        intPart[0] = intPart[0] + 1;
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	1c5a      	adds	r2, r3, #1
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	601a      	str	r2, [r3, #0]
        fracPart[0] = fracPart[0] - 10;
 8007314:	683b      	ldr	r3, [r7, #0]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	3b0a      	subs	r3, #10
 800731a:	001a      	movs	r2, r3
 800731c:	683b      	ldr	r3, [r7, #0]
 800731e:	601a      	str	r2, [r3, #0]
    else if ((intPart[0] > 0) && (fracPart[0] < 0))
    {
        intPart[0] = intPart[0] - 1;
        fracPart[0] = fracPart[0] + 10;
    }
}
 8007320:	e012      	b.n	8007348 <correctIntFracNumber+0x98>
    else if ((intPart[0] > 0) && (fracPart[0] < 0))
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	2b00      	cmp	r3, #0
 8007328:	dd0e      	ble.n	8007348 <correctIntFracNumber+0x98>
 800732a:	683b      	ldr	r3, [r7, #0]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	2b00      	cmp	r3, #0
 8007330:	da0a      	bge.n	8007348 <correctIntFracNumber+0x98>
        intPart[0] = intPart[0] - 1;
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	1e5a      	subs	r2, r3, #1
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	601a      	str	r2, [r3, #0]
        fracPart[0] = fracPart[0] + 10;
 800733c:	683b      	ldr	r3, [r7, #0]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	330a      	adds	r3, #10
 8007342:	001a      	movs	r2, r3
 8007344:	683b      	ldr	r3, [r7, #0]
 8007346:	601a      	str	r2, [r3, #0]
}
 8007348:	46c0      	nop			@ (mov r8, r8)
 800734a:	46bd      	mov	sp, r7
 800734c:	b002      	add	sp, #8
 800734e:	bd80      	pop	{r7, pc}

08007350 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 8007350:	b590      	push	{r4, r7, lr}
 8007352:	b08b      	sub	sp, #44	@ 0x2c
 8007354:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007356:	2414      	movs	r4, #20
 8007358:	193b      	adds	r3, r7, r4
 800735a:	0018      	movs	r0, r3
 800735c:	2314      	movs	r3, #20
 800735e:	001a      	movs	r2, r3
 8007360:	2100      	movs	r1, #0
 8007362:	f018 fac3 	bl	801f8ec <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8007366:	4b8a      	ldr	r3, [pc, #552]	@ (8007590 <MX_GPIO_Init+0x240>)
 8007368:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800736a:	4b89      	ldr	r3, [pc, #548]	@ (8007590 <MX_GPIO_Init+0x240>)
 800736c:	2104      	movs	r1, #4
 800736e:	430a      	orrs	r2, r1
 8007370:	62da      	str	r2, [r3, #44]	@ 0x2c
 8007372:	4b87      	ldr	r3, [pc, #540]	@ (8007590 <MX_GPIO_Init+0x240>)
 8007374:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007376:	2204      	movs	r2, #4
 8007378:	4013      	ands	r3, r2
 800737a:	613b      	str	r3, [r7, #16]
 800737c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800737e:	4b84      	ldr	r3, [pc, #528]	@ (8007590 <MX_GPIO_Init+0x240>)
 8007380:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007382:	4b83      	ldr	r3, [pc, #524]	@ (8007590 <MX_GPIO_Init+0x240>)
 8007384:	2180      	movs	r1, #128	@ 0x80
 8007386:	430a      	orrs	r2, r1
 8007388:	62da      	str	r2, [r3, #44]	@ 0x2c
 800738a:	4b81      	ldr	r3, [pc, #516]	@ (8007590 <MX_GPIO_Init+0x240>)
 800738c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800738e:	2280      	movs	r2, #128	@ 0x80
 8007390:	4013      	ands	r3, r2
 8007392:	60fb      	str	r3, [r7, #12]
 8007394:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8007396:	4b7e      	ldr	r3, [pc, #504]	@ (8007590 <MX_GPIO_Init+0x240>)
 8007398:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800739a:	4b7d      	ldr	r3, [pc, #500]	@ (8007590 <MX_GPIO_Init+0x240>)
 800739c:	2101      	movs	r1, #1
 800739e:	430a      	orrs	r2, r1
 80073a0:	62da      	str	r2, [r3, #44]	@ 0x2c
 80073a2:	4b7b      	ldr	r3, [pc, #492]	@ (8007590 <MX_GPIO_Init+0x240>)
 80073a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80073a6:	2201      	movs	r2, #1
 80073a8:	4013      	ands	r3, r2
 80073aa:	60bb      	str	r3, [r7, #8]
 80073ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80073ae:	4b78      	ldr	r3, [pc, #480]	@ (8007590 <MX_GPIO_Init+0x240>)
 80073b0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80073b2:	4b77      	ldr	r3, [pc, #476]	@ (8007590 <MX_GPIO_Init+0x240>)
 80073b4:	2102      	movs	r1, #2
 80073b6:	430a      	orrs	r2, r1
 80073b8:	62da      	str	r2, [r3, #44]	@ 0x2c
 80073ba:	4b75      	ldr	r3, [pc, #468]	@ (8007590 <MX_GPIO_Init+0x240>)
 80073bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80073be:	2202      	movs	r2, #2
 80073c0:	4013      	ands	r3, r2
 80073c2:	607b      	str	r3, [r7, #4]
 80073c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80073c6:	4b72      	ldr	r3, [pc, #456]	@ (8007590 <MX_GPIO_Init+0x240>)
 80073c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80073ca:	4b71      	ldr	r3, [pc, #452]	@ (8007590 <MX_GPIO_Init+0x240>)
 80073cc:	2108      	movs	r1, #8
 80073ce:	430a      	orrs	r2, r1
 80073d0:	62da      	str	r2, [r3, #44]	@ 0x2c
 80073d2:	4b6f      	ldr	r3, [pc, #444]	@ (8007590 <MX_GPIO_Init+0x240>)
 80073d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80073d6:	2208      	movs	r2, #8
 80073d8:	4013      	ands	r3, r2
 80073da:	603b      	str	r3, [r7, #0]
 80073dc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_SET);
 80073de:	4b6d      	ldr	r3, [pc, #436]	@ (8007594 <MX_GPIO_Init+0x244>)
 80073e0:	2201      	movs	r2, #1
 80073e2:	2101      	movs	r1, #1
 80073e4:	0018      	movs	r0, r3
 80073e6:	f008 fad0 	bl	800f98a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, GPIO_PIN_RESET);
 80073ea:	4b6a      	ldr	r3, [pc, #424]	@ (8007594 <MX_GPIO_Init+0x244>)
 80073ec:	2200      	movs	r2, #0
 80073ee:	2102      	movs	r1, #2
 80073f0:	0018      	movs	r0, r3
 80073f2:	f008 faca 	bl	800f98a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MCU_LED_C_R_Pin|MCU_LED_C_G_Pin|MCU_LED_C_B_Pin, GPIO_PIN_SET);
 80073f6:	4968      	ldr	r1, [pc, #416]	@ (8007598 <MX_GPIO_Init+0x248>)
 80073f8:	4b68      	ldr	r3, [pc, #416]	@ (800759c <MX_GPIO_Init+0x24c>)
 80073fa:	2201      	movs	r2, #1
 80073fc:	0018      	movs	r0, r3
 80073fe:	f008 fac4 	bl	800f98a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_SET);
 8007402:	2380      	movs	r3, #128	@ 0x80
 8007404:	011b      	lsls	r3, r3, #4
 8007406:	4866      	ldr	r0, [pc, #408]	@ (80075a0 <MX_GPIO_Init+0x250>)
 8007408:	2201      	movs	r2, #1
 800740a:	0019      	movs	r1, r3
 800740c:	f008 fabd 	bl	800f98a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Boost_Enable_GPIO_Port, Boost_Enable_Pin, GPIO_PIN_RESET);
 8007410:	2380      	movs	r3, #128	@ 0x80
 8007412:	015b      	lsls	r3, r3, #5
 8007414:	4862      	ldr	r0, [pc, #392]	@ (80075a0 <MX_GPIO_Init+0x250>)
 8007416:	2200      	movs	r2, #0
 8007418:	0019      	movs	r1, r3
 800741a:	f008 fab6 	bl	800f98a <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC2 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_2|GPIO_PIN_3;
 800741e:	193b      	adds	r3, r7, r4
 8007420:	4a60      	ldr	r2, [pc, #384]	@ (80075a4 <MX_GPIO_Init+0x254>)
 8007422:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8007424:	193b      	adds	r3, r7, r4
 8007426:	2203      	movs	r2, #3
 8007428:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800742a:	193b      	adds	r3, r7, r4
 800742c:	2200      	movs	r2, #0
 800742e:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007430:	193b      	adds	r3, r7, r4
 8007432:	4a5b      	ldr	r2, [pc, #364]	@ (80075a0 <MX_GPIO_Init+0x250>)
 8007434:	0019      	movs	r1, r3
 8007436:	0010      	movs	r0, r2
 8007438:	f008 f90c 	bl	800f654 <HAL_GPIO_Init>

  /*Configure GPIO pins : PHPin PHPin */
  GPIO_InitStruct.Pin = ESP32_EN_Pin|ESP32_BOOT_Pin;
 800743c:	193b      	adds	r3, r7, r4
 800743e:	2203      	movs	r2, #3
 8007440:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007442:	193b      	adds	r3, r7, r4
 8007444:	2201      	movs	r2, #1
 8007446:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007448:	193b      	adds	r3, r7, r4
 800744a:	2200      	movs	r2, #0
 800744c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800744e:	193b      	adds	r3, r7, r4
 8007450:	2200      	movs	r2, #0
 8007452:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8007454:	193b      	adds	r3, r7, r4
 8007456:	4a4f      	ldr	r2, [pc, #316]	@ (8007594 <MX_GPIO_Init+0x244>)
 8007458:	0019      	movs	r1, r3
 800745a:	0010      	movs	r0, r2
 800745c:	f008 f8fa 	bl	800f654 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA5 PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8007460:	193b      	adds	r3, r7, r4
 8007462:	2270      	movs	r2, #112	@ 0x70
 8007464:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8007466:	193b      	adds	r3, r7, r4
 8007468:	2203      	movs	r2, #3
 800746a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800746c:	193b      	adds	r3, r7, r4
 800746e:	2200      	movs	r2, #0
 8007470:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007472:	193a      	adds	r2, r7, r4
 8007474:	23a0      	movs	r3, #160	@ 0xa0
 8007476:	05db      	lsls	r3, r3, #23
 8007478:	0011      	movs	r1, r2
 800747a:	0018      	movs	r0, r3
 800747c:	f008 f8ea 	bl	800f654 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = VusbDetect_Pin|Wireless_PSU_PG_Pin;
 8007480:	193b      	adds	r3, r7, r4
 8007482:	22c0      	movs	r2, #192	@ 0xc0
 8007484:	0052      	lsls	r2, r2, #1
 8007486:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007488:	193b      	adds	r3, r7, r4
 800748a:	2200      	movs	r2, #0
 800748c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800748e:	193b      	adds	r3, r7, r4
 8007490:	2200      	movs	r2, #0
 8007492:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007494:	193a      	adds	r2, r7, r4
 8007496:	23a0      	movs	r3, #160	@ 0xa0
 8007498:	05db      	lsls	r3, r3, #23
 800749a:	0011      	movs	r1, r2
 800749c:	0018      	movs	r0, r3
 800749e:	f008 f8d9 	bl	800f654 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = MCU_LED_C_R_Pin|MCU_LED_C_G_Pin|MCU_LED_C_B_Pin;
 80074a2:	193b      	adds	r3, r7, r4
 80074a4:	4a3c      	ldr	r2, [pc, #240]	@ (8007598 <MX_GPIO_Init+0x248>)
 80074a6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80074a8:	193b      	adds	r3, r7, r4
 80074aa:	2201      	movs	r2, #1
 80074ac:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80074ae:	193b      	adds	r3, r7, r4
 80074b0:	2200      	movs	r2, #0
 80074b2:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80074b4:	193b      	adds	r3, r7, r4
 80074b6:	2200      	movs	r2, #0
 80074b8:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80074ba:	193b      	adds	r3, r7, r4
 80074bc:	4a37      	ldr	r2, [pc, #220]	@ (800759c <MX_GPIO_Init+0x24c>)
 80074be:	0019      	movs	r1, r3
 80074c0:	0010      	movs	r0, r2
 80074c2:	f008 f8c7 	bl	800f654 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB2 PB14 PB3
                           PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_14|GPIO_PIN_3
 80074c6:	193b      	adds	r3, r7, r4
 80074c8:	4a37      	ldr	r2, [pc, #220]	@ (80075a8 <MX_GPIO_Init+0x258>)
 80074ca:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_4|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80074cc:	193b      	adds	r3, r7, r4
 80074ce:	2203      	movs	r2, #3
 80074d0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80074d2:	193b      	adds	r3, r7, r4
 80074d4:	2200      	movs	r2, #0
 80074d6:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80074d8:	193b      	adds	r3, r7, r4
 80074da:	4a30      	ldr	r2, [pc, #192]	@ (800759c <MX_GPIO_Init+0x24c>)
 80074dc:	0019      	movs	r1, r3
 80074de:	0010      	movs	r0, r2
 80074e0:	f008 f8b8 	bl	800f654 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Charger_status_Pin;
 80074e4:	0021      	movs	r1, r4
 80074e6:	187b      	adds	r3, r7, r1
 80074e8:	2280      	movs	r2, #128	@ 0x80
 80074ea:	0092      	lsls	r2, r2, #2
 80074ec:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80074ee:	000c      	movs	r4, r1
 80074f0:	193b      	adds	r3, r7, r4
 80074f2:	2200      	movs	r2, #0
 80074f4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80074f6:	193b      	adds	r3, r7, r4
 80074f8:	2200      	movs	r2, #0
 80074fa:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(Charger_status_GPIO_Port, &GPIO_InitStruct);
 80074fc:	193b      	adds	r3, r7, r4
 80074fe:	4a28      	ldr	r2, [pc, #160]	@ (80075a0 <MX_GPIO_Init+0x250>)
 8007500:	0019      	movs	r1, r3
 8007502:	0010      	movs	r0, r2
 8007504:	f008 f8a6 	bl	800f654 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BOOT0_Pin;
 8007508:	193b      	adds	r3, r7, r4
 800750a:	2280      	movs	r2, #128	@ 0x80
 800750c:	0212      	lsls	r2, r2, #8
 800750e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8007510:	193b      	adds	r3, r7, r4
 8007512:	2288      	movs	r2, #136	@ 0x88
 8007514:	0352      	lsls	r2, r2, #13
 8007516:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007518:	193b      	adds	r3, r7, r4
 800751a:	2200      	movs	r2, #0
 800751c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(BOOT0_GPIO_Port, &GPIO_InitStruct);
 800751e:	193a      	adds	r2, r7, r4
 8007520:	23a0      	movs	r3, #160	@ 0xa0
 8007522:	05db      	lsls	r3, r3, #23
 8007524:	0011      	movs	r1, r2
 8007526:	0018      	movs	r0, r3
 8007528:	f008 f894 	bl	800f654 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = Wireless_PSU_EN_Pin|Boost_Enable_Pin;
 800752c:	0021      	movs	r1, r4
 800752e:	187b      	adds	r3, r7, r1
 8007530:	22c0      	movs	r2, #192	@ 0xc0
 8007532:	0152      	lsls	r2, r2, #5
 8007534:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007536:	000c      	movs	r4, r1
 8007538:	193b      	adds	r3, r7, r4
 800753a:	2201      	movs	r2, #1
 800753c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800753e:	193b      	adds	r3, r7, r4
 8007540:	2200      	movs	r2, #0
 8007542:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007544:	193b      	adds	r3, r7, r4
 8007546:	2200      	movs	r2, #0
 8007548:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800754a:	193b      	adds	r3, r7, r4
 800754c:	4a14      	ldr	r2, [pc, #80]	@ (80075a0 <MX_GPIO_Init+0x250>)
 800754e:	0019      	movs	r1, r3
 8007550:	0010      	movs	r0, r2
 8007552:	f008 f87f 	bl	800f654 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = User_Button_Pin;
 8007556:	0021      	movs	r1, r4
 8007558:	187b      	adds	r3, r7, r1
 800755a:	2204      	movs	r2, #4
 800755c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800755e:	187b      	adds	r3, r7, r1
 8007560:	2200      	movs	r2, #0
 8007562:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8007564:	187b      	adds	r3, r7, r1
 8007566:	2201      	movs	r2, #1
 8007568:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(User_Button_GPIO_Port, &GPIO_InitStruct);
 800756a:	187b      	adds	r3, r7, r1
 800756c:	4a0f      	ldr	r2, [pc, #60]	@ (80075ac <MX_GPIO_Init+0x25c>)
 800756e:	0019      	movs	r1, r3
 8007570:	0010      	movs	r0, r2
 8007572:	f008 f86f 	bl	800f654 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 8007576:	2200      	movs	r2, #0
 8007578:	2100      	movs	r1, #0
 800757a:	2007      	movs	r0, #7
 800757c:	f007 fc18 	bl	800edb0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8007580:	2007      	movs	r0, #7
 8007582:	f007 fc2a 	bl	800edda <HAL_NVIC_EnableIRQ>

}
 8007586:	46c0      	nop			@ (mov r8, r8)
 8007588:	46bd      	mov	sp, r7
 800758a:	b00b      	add	sp, #44	@ 0x2c
 800758c:	bd90      	pop	{r4, r7, pc}
 800758e:	46c0      	nop			@ (mov r8, r8)
 8007590:	40021000 	.word	0x40021000
 8007594:	50001c00 	.word	0x50001c00
 8007598:	00000301 	.word	0x00000301
 800759c:	50000400 	.word	0x50000400
 80075a0:	50000800 	.word	0x50000800
 80075a4:	0000200c 	.word	0x0000200c
 80075a8:	0000403e 	.word	0x0000403e
 80075ac:	50000c00 	.word	0x50000c00

080075b0 <GPIO_InitPWMLEDs>:

/* USER CODE BEGIN 2 */
void GPIO_InitPWMLEDs(TIM_HandleTypeDef* timer2, TIM_HandleTypeDef* timer3) {
 80075b0:	b580      	push	{r7, lr}
 80075b2:	b082      	sub	sp, #8
 80075b4:	af00      	add	r7, sp, #0
 80075b6:	6078      	str	r0, [r7, #4]
 80075b8:	6039      	str	r1, [r7, #0]
  // Timer 2 PWM init
  HAL_TIM_PWM_Start(timer2, TIM_CHANNEL_1);
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	2100      	movs	r1, #0
 80075be:	0018      	movs	r0, r3
 80075c0:	f00e fda8 	bl	8016114 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(timer2, TIM_CHANNEL_3);
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	2108      	movs	r1, #8
 80075c8:	0018      	movs	r0, r3
 80075ca:	f00e fda3 	bl	8016114 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(timer2, TIM_CHANNEL_4);
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	210c      	movs	r1, #12
 80075d2:	0018      	movs	r0, r3
 80075d4:	f00e fd9e 	bl	8016114 <HAL_TIM_PWM_Start>
  TIM2 -> ARR = 4000;
 80075d8:	2380      	movs	r3, #128	@ 0x80
 80075da:	05db      	lsls	r3, r3, #23
 80075dc:	22fa      	movs	r2, #250	@ 0xfa
 80075de:	0112      	lsls	r2, r2, #4
 80075e0:	62da      	str	r2, [r3, #44]	@ 0x2c

  // Resetting the LEDs.
  // CCR1 = Red, CCR3 = Green, CCR4 = Blue.
  TIM2 -> CCR1 = 4000;
 80075e2:	2380      	movs	r3, #128	@ 0x80
 80075e4:	05db      	lsls	r3, r3, #23
 80075e6:	22fa      	movs	r2, #250	@ 0xfa
 80075e8:	0112      	lsls	r2, r2, #4
 80075ea:	635a      	str	r2, [r3, #52]	@ 0x34
  TIM2 -> CCR3 = 4000;
 80075ec:	2380      	movs	r3, #128	@ 0x80
 80075ee:	05db      	lsls	r3, r3, #23
 80075f0:	22fa      	movs	r2, #250	@ 0xfa
 80075f2:	0112      	lsls	r2, r2, #4
 80075f4:	63da      	str	r2, [r3, #60]	@ 0x3c
  TIM2 -> CCR4 = 4000;
 80075f6:	2380      	movs	r3, #128	@ 0x80
 80075f8:	05db      	lsls	r3, r3, #23
 80075fa:	22fa      	movs	r2, #250	@ 0xfa
 80075fc:	0112      	lsls	r2, r2, #4
 80075fe:	641a      	str	r2, [r3, #64]	@ 0x40

  // Timer 3 PWM init
  HAL_TIM_PWM_Start(timer3, TIM_CHANNEL_1);
 8007600:	683b      	ldr	r3, [r7, #0]
 8007602:	2100      	movs	r1, #0
 8007604:	0018      	movs	r0, r3
 8007606:	f00e fd85 	bl	8016114 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(timer3, TIM_CHANNEL_2);
 800760a:	683b      	ldr	r3, [r7, #0]
 800760c:	2104      	movs	r1, #4
 800760e:	0018      	movs	r0, r3
 8007610:	f00e fd80 	bl	8016114 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(timer3, TIM_CHANNEL_3);
 8007614:	683b      	ldr	r3, [r7, #0]
 8007616:	2108      	movs	r1, #8
 8007618:	0018      	movs	r0, r3
 800761a:	f00e fd7b 	bl	8016114 <HAL_TIM_PWM_Start>
  TIM3 -> ARR = 4000;
 800761e:	4b0a      	ldr	r3, [pc, #40]	@ (8007648 <GPIO_InitPWMLEDs+0x98>)
 8007620:	22fa      	movs	r2, #250	@ 0xfa
 8007622:	0112      	lsls	r2, r2, #4
 8007624:	62da      	str	r2, [r3, #44]	@ 0x2c

  // CCR1 = Red, CCR2 = Green, CCR3 = Blue.
  TIM3 -> CCR1 = 4000;
 8007626:	4b08      	ldr	r3, [pc, #32]	@ (8007648 <GPIO_InitPWMLEDs+0x98>)
 8007628:	22fa      	movs	r2, #250	@ 0xfa
 800762a:	0112      	lsls	r2, r2, #4
 800762c:	635a      	str	r2, [r3, #52]	@ 0x34
  TIM3 -> CCR2 = 4000;
 800762e:	4b06      	ldr	r3, [pc, #24]	@ (8007648 <GPIO_InitPWMLEDs+0x98>)
 8007630:	22fa      	movs	r2, #250	@ 0xfa
 8007632:	0112      	lsls	r2, r2, #4
 8007634:	639a      	str	r2, [r3, #56]	@ 0x38
  TIM3 -> CCR3 = 4000;
 8007636:	4b04      	ldr	r3, [pc, #16]	@ (8007648 <GPIO_InitPWMLEDs+0x98>)
 8007638:	22fa      	movs	r2, #250	@ 0xfa
 800763a:	0112      	lsls	r2, r2, #4
 800763c:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 800763e:	46c0      	nop			@ (mov r8, r8)
 8007640:	46bd      	mov	sp, r7
 8007642:	b002      	add	sp, #8
 8007644:	bd80      	pop	{r7, pc}
 8007646:	46c0      	nop			@ (mov r8, r8)
 8007648:	40000400 	.word	0x40000400

0800764c <MX_I2C1_Init>:
DMA_HandleTypeDef hdma_i2c1_rx;
DMA_HandleTypeDef hdma_i2c1_tx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800764c:	b580      	push	{r7, lr}
 800764e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8007650:	4b1b      	ldr	r3, [pc, #108]	@ (80076c0 <MX_I2C1_Init+0x74>)
 8007652:	4a1c      	ldr	r2, [pc, #112]	@ (80076c4 <MX_I2C1_Init+0x78>)
 8007654:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00503D58;
 8007656:	4b1a      	ldr	r3, [pc, #104]	@ (80076c0 <MX_I2C1_Init+0x74>)
 8007658:	4a1b      	ldr	r2, [pc, #108]	@ (80076c8 <MX_I2C1_Init+0x7c>)
 800765a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800765c:	4b18      	ldr	r3, [pc, #96]	@ (80076c0 <MX_I2C1_Init+0x74>)
 800765e:	2200      	movs	r2, #0
 8007660:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8007662:	4b17      	ldr	r3, [pc, #92]	@ (80076c0 <MX_I2C1_Init+0x74>)
 8007664:	2201      	movs	r2, #1
 8007666:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8007668:	4b15      	ldr	r3, [pc, #84]	@ (80076c0 <MX_I2C1_Init+0x74>)
 800766a:	2200      	movs	r2, #0
 800766c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800766e:	4b14      	ldr	r3, [pc, #80]	@ (80076c0 <MX_I2C1_Init+0x74>)
 8007670:	2200      	movs	r2, #0
 8007672:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8007674:	4b12      	ldr	r3, [pc, #72]	@ (80076c0 <MX_I2C1_Init+0x74>)
 8007676:	2200      	movs	r2, #0
 8007678:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800767a:	4b11      	ldr	r3, [pc, #68]	@ (80076c0 <MX_I2C1_Init+0x74>)
 800767c:	2200      	movs	r2, #0
 800767e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8007680:	4b0f      	ldr	r3, [pc, #60]	@ (80076c0 <MX_I2C1_Init+0x74>)
 8007682:	2200      	movs	r2, #0
 8007684:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8007686:	4b0e      	ldr	r3, [pc, #56]	@ (80076c0 <MX_I2C1_Init+0x74>)
 8007688:	0018      	movs	r0, r3
 800768a:	f008 f9b7 	bl	800f9fc <HAL_I2C_Init>
 800768e:	1e03      	subs	r3, r0, #0
 8007690:	d001      	beq.n	8007696 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8007692:	f000 fce9 	bl	8008068 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8007696:	4b0a      	ldr	r3, [pc, #40]	@ (80076c0 <MX_I2C1_Init+0x74>)
 8007698:	2100      	movs	r1, #0
 800769a:	0018      	movs	r0, r3
 800769c:	f00a fd88 	bl	80121b0 <HAL_I2CEx_ConfigAnalogFilter>
 80076a0:	1e03      	subs	r3, r0, #0
 80076a2:	d001      	beq.n	80076a8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80076a4:	f000 fce0 	bl	8008068 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80076a8:	4b05      	ldr	r3, [pc, #20]	@ (80076c0 <MX_I2C1_Init+0x74>)
 80076aa:	2100      	movs	r1, #0
 80076ac:	0018      	movs	r0, r3
 80076ae:	f00a fdcb 	bl	8012248 <HAL_I2CEx_ConfigDigitalFilter>
 80076b2:	1e03      	subs	r3, r0, #0
 80076b4:	d001      	beq.n	80076ba <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80076b6:	f000 fcd7 	bl	8008068 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80076ba:	46c0      	nop			@ (mov r8, r8)
 80076bc:	46bd      	mov	sp, r7
 80076be:	bd80      	pop	{r7, pc}
 80076c0:	20000dec 	.word	0x20000dec
 80076c4:	40005400 	.word	0x40005400
 80076c8:	00503d58 	.word	0x00503d58

080076cc <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 80076cc:	b580      	push	{r7, lr}
 80076ce:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80076d0:	4b1b      	ldr	r3, [pc, #108]	@ (8007740 <MX_I2C2_Init+0x74>)
 80076d2:	4a1c      	ldr	r2, [pc, #112]	@ (8007744 <MX_I2C2_Init+0x78>)
 80076d4:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00503D58;
 80076d6:	4b1a      	ldr	r3, [pc, #104]	@ (8007740 <MX_I2C2_Init+0x74>)
 80076d8:	4a1b      	ldr	r2, [pc, #108]	@ (8007748 <MX_I2C2_Init+0x7c>)
 80076da:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80076dc:	4b18      	ldr	r3, [pc, #96]	@ (8007740 <MX_I2C2_Init+0x74>)
 80076de:	2200      	movs	r2, #0
 80076e0:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80076e2:	4b17      	ldr	r3, [pc, #92]	@ (8007740 <MX_I2C2_Init+0x74>)
 80076e4:	2201      	movs	r2, #1
 80076e6:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80076e8:	4b15      	ldr	r3, [pc, #84]	@ (8007740 <MX_I2C2_Init+0x74>)
 80076ea:	2200      	movs	r2, #0
 80076ec:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80076ee:	4b14      	ldr	r3, [pc, #80]	@ (8007740 <MX_I2C2_Init+0x74>)
 80076f0:	2200      	movs	r2, #0
 80076f2:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80076f4:	4b12      	ldr	r3, [pc, #72]	@ (8007740 <MX_I2C2_Init+0x74>)
 80076f6:	2200      	movs	r2, #0
 80076f8:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80076fa:	4b11      	ldr	r3, [pc, #68]	@ (8007740 <MX_I2C2_Init+0x74>)
 80076fc:	2200      	movs	r2, #0
 80076fe:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8007700:	4b0f      	ldr	r3, [pc, #60]	@ (8007740 <MX_I2C2_Init+0x74>)
 8007702:	2200      	movs	r2, #0
 8007704:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8007706:	4b0e      	ldr	r3, [pc, #56]	@ (8007740 <MX_I2C2_Init+0x74>)
 8007708:	0018      	movs	r0, r3
 800770a:	f008 f977 	bl	800f9fc <HAL_I2C_Init>
 800770e:	1e03      	subs	r3, r0, #0
 8007710:	d001      	beq.n	8007716 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8007712:	f000 fca9 	bl	8008068 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8007716:	4b0a      	ldr	r3, [pc, #40]	@ (8007740 <MX_I2C2_Init+0x74>)
 8007718:	2100      	movs	r1, #0
 800771a:	0018      	movs	r0, r3
 800771c:	f00a fd48 	bl	80121b0 <HAL_I2CEx_ConfigAnalogFilter>
 8007720:	1e03      	subs	r3, r0, #0
 8007722:	d001      	beq.n	8007728 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8007724:	f000 fca0 	bl	8008068 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8007728:	4b05      	ldr	r3, [pc, #20]	@ (8007740 <MX_I2C2_Init+0x74>)
 800772a:	2100      	movs	r1, #0
 800772c:	0018      	movs	r0, r3
 800772e:	f00a fd8b 	bl	8012248 <HAL_I2CEx_ConfigDigitalFilter>
 8007732:	1e03      	subs	r3, r0, #0
 8007734:	d001      	beq.n	800773a <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8007736:	f000 fc97 	bl	8008068 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800773a:	46c0      	nop			@ (mov r8, r8)
 800773c:	46bd      	mov	sp, r7
 800773e:	bd80      	pop	{r7, pc}
 8007740:	20000e40 	.word	0x20000e40
 8007744:	40005800 	.word	0x40005800
 8007748:	00503d58 	.word	0x00503d58

0800774c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800774c:	b590      	push	{r4, r7, lr}
 800774e:	b08b      	sub	sp, #44	@ 0x2c
 8007750:	af00      	add	r7, sp, #0
 8007752:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007754:	2414      	movs	r4, #20
 8007756:	193b      	adds	r3, r7, r4
 8007758:	0018      	movs	r0, r3
 800775a:	2314      	movs	r3, #20
 800775c:	001a      	movs	r2, r3
 800775e:	2100      	movs	r1, #0
 8007760:	f018 f8c4 	bl	801f8ec <memset>
  if(i2cHandle->Instance==I2C1)
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	4a5d      	ldr	r2, [pc, #372]	@ (80078e0 <HAL_I2C_MspInit+0x194>)
 800776a:	4293      	cmp	r3, r2
 800776c:	d000      	beq.n	8007770 <HAL_I2C_MspInit+0x24>
 800776e:	e083      	b.n	8007878 <HAL_I2C_MspInit+0x12c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007770:	4b5c      	ldr	r3, [pc, #368]	@ (80078e4 <HAL_I2C_MspInit+0x198>)
 8007772:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007774:	4b5b      	ldr	r3, [pc, #364]	@ (80078e4 <HAL_I2C_MspInit+0x198>)
 8007776:	2102      	movs	r1, #2
 8007778:	430a      	orrs	r2, r1
 800777a:	62da      	str	r2, [r3, #44]	@ 0x2c
 800777c:	4b59      	ldr	r3, [pc, #356]	@ (80078e4 <HAL_I2C_MspInit+0x198>)
 800777e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007780:	2202      	movs	r2, #2
 8007782:	4013      	ands	r3, r2
 8007784:	613b      	str	r3, [r7, #16]
 8007786:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8007788:	0021      	movs	r1, r4
 800778a:	187b      	adds	r3, r7, r1
 800778c:	22c0      	movs	r2, #192	@ 0xc0
 800778e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8007790:	187b      	adds	r3, r7, r1
 8007792:	2212      	movs	r2, #18
 8007794:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007796:	187b      	adds	r3, r7, r1
 8007798:	2200      	movs	r2, #0
 800779a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800779c:	187b      	adds	r3, r7, r1
 800779e:	2203      	movs	r2, #3
 80077a0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 80077a2:	187b      	adds	r3, r7, r1
 80077a4:	2201      	movs	r2, #1
 80077a6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80077a8:	187b      	adds	r3, r7, r1
 80077aa:	4a4f      	ldr	r2, [pc, #316]	@ (80078e8 <HAL_I2C_MspInit+0x19c>)
 80077ac:	0019      	movs	r1, r3
 80077ae:	0010      	movs	r0, r2
 80077b0:	f007 ff50 	bl	800f654 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80077b4:	4b4b      	ldr	r3, [pc, #300]	@ (80078e4 <HAL_I2C_MspInit+0x198>)
 80077b6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80077b8:	4b4a      	ldr	r3, [pc, #296]	@ (80078e4 <HAL_I2C_MspInit+0x198>)
 80077ba:	2180      	movs	r1, #128	@ 0x80
 80077bc:	0389      	lsls	r1, r1, #14
 80077be:	430a      	orrs	r2, r1
 80077c0:	639a      	str	r2, [r3, #56]	@ 0x38

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Channel3;
 80077c2:	4b4a      	ldr	r3, [pc, #296]	@ (80078ec <HAL_I2C_MspInit+0x1a0>)
 80077c4:	4a4a      	ldr	r2, [pc, #296]	@ (80078f0 <HAL_I2C_MspInit+0x1a4>)
 80077c6:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Request = DMA_REQUEST_6;
 80077c8:	4b48      	ldr	r3, [pc, #288]	@ (80078ec <HAL_I2C_MspInit+0x1a0>)
 80077ca:	2206      	movs	r2, #6
 80077cc:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80077ce:	4b47      	ldr	r3, [pc, #284]	@ (80078ec <HAL_I2C_MspInit+0x1a0>)
 80077d0:	2200      	movs	r2, #0
 80077d2:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80077d4:	4b45      	ldr	r3, [pc, #276]	@ (80078ec <HAL_I2C_MspInit+0x1a0>)
 80077d6:	2200      	movs	r2, #0
 80077d8:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80077da:	4b44      	ldr	r3, [pc, #272]	@ (80078ec <HAL_I2C_MspInit+0x1a0>)
 80077dc:	2280      	movs	r2, #128	@ 0x80
 80077de:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80077e0:	4b42      	ldr	r3, [pc, #264]	@ (80078ec <HAL_I2C_MspInit+0x1a0>)
 80077e2:	2200      	movs	r2, #0
 80077e4:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80077e6:	4b41      	ldr	r3, [pc, #260]	@ (80078ec <HAL_I2C_MspInit+0x1a0>)
 80077e8:	2200      	movs	r2, #0
 80077ea:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 80077ec:	4b3f      	ldr	r3, [pc, #252]	@ (80078ec <HAL_I2C_MspInit+0x1a0>)
 80077ee:	2200      	movs	r2, #0
 80077f0:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80077f2:	4b3e      	ldr	r3, [pc, #248]	@ (80078ec <HAL_I2C_MspInit+0x1a0>)
 80077f4:	2200      	movs	r2, #0
 80077f6:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 80077f8:	4b3c      	ldr	r3, [pc, #240]	@ (80078ec <HAL_I2C_MspInit+0x1a0>)
 80077fa:	0018      	movs	r0, r3
 80077fc:	f007 fb0e 	bl	800ee1c <HAL_DMA_Init>
 8007800:	1e03      	subs	r3, r0, #0
 8007802:	d001      	beq.n	8007808 <HAL_I2C_MspInit+0xbc>
    {
      Error_Handler();
 8007804:	f000 fc30 	bl	8008068 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	4a38      	ldr	r2, [pc, #224]	@ (80078ec <HAL_I2C_MspInit+0x1a0>)
 800780c:	63da      	str	r2, [r3, #60]	@ 0x3c
 800780e:	4b37      	ldr	r3, [pc, #220]	@ (80078ec <HAL_I2C_MspInit+0x1a0>)
 8007810:	687a      	ldr	r2, [r7, #4]
 8007812:	629a      	str	r2, [r3, #40]	@ 0x28

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Channel2;
 8007814:	4b37      	ldr	r3, [pc, #220]	@ (80078f4 <HAL_I2C_MspInit+0x1a8>)
 8007816:	4a38      	ldr	r2, [pc, #224]	@ (80078f8 <HAL_I2C_MspInit+0x1ac>)
 8007818:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Request = DMA_REQUEST_6;
 800781a:	4b36      	ldr	r3, [pc, #216]	@ (80078f4 <HAL_I2C_MspInit+0x1a8>)
 800781c:	2206      	movs	r2, #6
 800781e:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8007820:	4b34      	ldr	r3, [pc, #208]	@ (80078f4 <HAL_I2C_MspInit+0x1a8>)
 8007822:	2210      	movs	r2, #16
 8007824:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8007826:	4b33      	ldr	r3, [pc, #204]	@ (80078f4 <HAL_I2C_MspInit+0x1a8>)
 8007828:	2200      	movs	r2, #0
 800782a:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800782c:	4b31      	ldr	r3, [pc, #196]	@ (80078f4 <HAL_I2C_MspInit+0x1a8>)
 800782e:	2280      	movs	r2, #128	@ 0x80
 8007830:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8007832:	4b30      	ldr	r3, [pc, #192]	@ (80078f4 <HAL_I2C_MspInit+0x1a8>)
 8007834:	2200      	movs	r2, #0
 8007836:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8007838:	4b2e      	ldr	r3, [pc, #184]	@ (80078f4 <HAL_I2C_MspInit+0x1a8>)
 800783a:	2200      	movs	r2, #0
 800783c:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 800783e:	4b2d      	ldr	r3, [pc, #180]	@ (80078f4 <HAL_I2C_MspInit+0x1a8>)
 8007840:	2200      	movs	r2, #0
 8007842:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8007844:	4b2b      	ldr	r3, [pc, #172]	@ (80078f4 <HAL_I2C_MspInit+0x1a8>)
 8007846:	2200      	movs	r2, #0
 8007848:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 800784a:	4b2a      	ldr	r3, [pc, #168]	@ (80078f4 <HAL_I2C_MspInit+0x1a8>)
 800784c:	0018      	movs	r0, r3
 800784e:	f007 fae5 	bl	800ee1c <HAL_DMA_Init>
 8007852:	1e03      	subs	r3, r0, #0
 8007854:	d001      	beq.n	800785a <HAL_I2C_MspInit+0x10e>
    {
      Error_Handler();
 8007856:	f000 fc07 	bl	8008068 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	4a25      	ldr	r2, [pc, #148]	@ (80078f4 <HAL_I2C_MspInit+0x1a8>)
 800785e:	639a      	str	r2, [r3, #56]	@ 0x38
 8007860:	4b24      	ldr	r3, [pc, #144]	@ (80078f4 <HAL_I2C_MspInit+0x1a8>)
 8007862:	687a      	ldr	r2, [r7, #4]
 8007864:	629a      	str	r2, [r3, #40]	@ 0x28

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_IRQn, 0, 0);
 8007866:	2200      	movs	r2, #0
 8007868:	2100      	movs	r1, #0
 800786a:	2017      	movs	r0, #23
 800786c:	f007 faa0 	bl	800edb0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_IRQn);
 8007870:	2017      	movs	r0, #23
 8007872:	f007 fab2 	bl	800edda <HAL_NVIC_EnableIRQ>
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8007876:	e02e      	b.n	80078d6 <HAL_I2C_MspInit+0x18a>
  else if(i2cHandle->Instance==I2C2)
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	4a1f      	ldr	r2, [pc, #124]	@ (80078fc <HAL_I2C_MspInit+0x1b0>)
 800787e:	4293      	cmp	r3, r2
 8007880:	d129      	bne.n	80078d6 <HAL_I2C_MspInit+0x18a>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007882:	4b18      	ldr	r3, [pc, #96]	@ (80078e4 <HAL_I2C_MspInit+0x198>)
 8007884:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007886:	4b17      	ldr	r3, [pc, #92]	@ (80078e4 <HAL_I2C_MspInit+0x198>)
 8007888:	2102      	movs	r1, #2
 800788a:	430a      	orrs	r2, r1
 800788c:	62da      	str	r2, [r3, #44]	@ 0x2c
 800788e:	4b15      	ldr	r3, [pc, #84]	@ (80078e4 <HAL_I2C_MspInit+0x198>)
 8007890:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007892:	2202      	movs	r2, #2
 8007894:	4013      	ands	r3, r2
 8007896:	60fb      	str	r3, [r7, #12]
 8007898:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800789a:	2114      	movs	r1, #20
 800789c:	187b      	adds	r3, r7, r1
 800789e:	22c0      	movs	r2, #192	@ 0xc0
 80078a0:	0112      	lsls	r2, r2, #4
 80078a2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80078a4:	187b      	adds	r3, r7, r1
 80078a6:	2212      	movs	r2, #18
 80078a8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80078aa:	187b      	adds	r3, r7, r1
 80078ac:	2200      	movs	r2, #0
 80078ae:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80078b0:	187b      	adds	r3, r7, r1
 80078b2:	2203      	movs	r2, #3
 80078b4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C2;
 80078b6:	187b      	adds	r3, r7, r1
 80078b8:	2206      	movs	r2, #6
 80078ba:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80078bc:	187b      	adds	r3, r7, r1
 80078be:	4a0a      	ldr	r2, [pc, #40]	@ (80078e8 <HAL_I2C_MspInit+0x19c>)
 80078c0:	0019      	movs	r1, r3
 80078c2:	0010      	movs	r0, r2
 80078c4:	f007 fec6 	bl	800f654 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80078c8:	4b06      	ldr	r3, [pc, #24]	@ (80078e4 <HAL_I2C_MspInit+0x198>)
 80078ca:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80078cc:	4b05      	ldr	r3, [pc, #20]	@ (80078e4 <HAL_I2C_MspInit+0x198>)
 80078ce:	2180      	movs	r1, #128	@ 0x80
 80078d0:	03c9      	lsls	r1, r1, #15
 80078d2:	430a      	orrs	r2, r1
 80078d4:	639a      	str	r2, [r3, #56]	@ 0x38
}
 80078d6:	46c0      	nop			@ (mov r8, r8)
 80078d8:	46bd      	mov	sp, r7
 80078da:	b00b      	add	sp, #44	@ 0x2c
 80078dc:	bd90      	pop	{r4, r7, pc}
 80078de:	46c0      	nop			@ (mov r8, r8)
 80078e0:	40005400 	.word	0x40005400
 80078e4:	40021000 	.word	0x40021000
 80078e8:	50000400 	.word	0x50000400
 80078ec:	20000e94 	.word	0x20000e94
 80078f0:	40020030 	.word	0x40020030
 80078f4:	20000edc 	.word	0x20000edc
 80078f8:	4002001c 	.word	0x4002001c
 80078fc:	40005800 	.word	0x40005800

08007900 <MX_I2S2_Init>:
I2S_HandleTypeDef hi2s2;
DMA_HandleTypeDef hdma_spi2_rx;

/* I2S2 init function */
void MX_I2S2_Init(void)
{
 8007900:	b580      	push	{r7, lr}
 8007902:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 8007904:	4b10      	ldr	r3, [pc, #64]	@ (8007948 <MX_I2S2_Init+0x48>)
 8007906:	4a11      	ldr	r2, [pc, #68]	@ (800794c <MX_I2S2_Init+0x4c>)
 8007908:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_RX;
 800790a:	4b0f      	ldr	r3, [pc, #60]	@ (8007948 <MX_I2S2_Init+0x48>)
 800790c:	22c0      	movs	r2, #192	@ 0xc0
 800790e:	0092      	lsls	r2, r2, #2
 8007910:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 8007912:	4b0d      	ldr	r3, [pc, #52]	@ (8007948 <MX_I2S2_Init+0x48>)
 8007914:	2200      	movs	r2, #0
 8007916:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_24B;
 8007918:	4b0b      	ldr	r3, [pc, #44]	@ (8007948 <MX_I2S2_Init+0x48>)
 800791a:	2203      	movs	r2, #3
 800791c:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 800791e:	4b0a      	ldr	r3, [pc, #40]	@ (8007948 <MX_I2S2_Init+0x48>)
 8007920:	2200      	movs	r2, #0
 8007922:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_16K;
 8007924:	4b08      	ldr	r3, [pc, #32]	@ (8007948 <MX_I2S2_Init+0x48>)
 8007926:	22fa      	movs	r2, #250	@ 0xfa
 8007928:	0192      	lsls	r2, r2, #6
 800792a:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 800792c:	4b06      	ldr	r3, [pc, #24]	@ (8007948 <MX_I2S2_Init+0x48>)
 800792e:	2200      	movs	r2, #0
 8007930:	619a      	str	r2, [r3, #24]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 8007932:	4b05      	ldr	r3, [pc, #20]	@ (8007948 <MX_I2S2_Init+0x48>)
 8007934:	0018      	movs	r0, r3
 8007936:	f00a fcd3 	bl	80122e0 <HAL_I2S_Init>
 800793a:	1e03      	subs	r3, r0, #0
 800793c:	d001      	beq.n	8007942 <MX_I2S2_Init+0x42>
  {
    Error_Handler();
 800793e:	f000 fb93 	bl	8008068 <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 8007942:	46c0      	nop			@ (mov r8, r8)
 8007944:	46bd      	mov	sp, r7
 8007946:	bd80      	pop	{r7, pc}
 8007948:	20000f24 	.word	0x20000f24
 800794c:	40003800 	.word	0x40003800

08007950 <HAL_I2S_MspInit>:

void HAL_I2S_MspInit(I2S_HandleTypeDef* i2sHandle)
{
 8007950:	b590      	push	{r4, r7, lr}
 8007952:	b089      	sub	sp, #36	@ 0x24
 8007954:	af00      	add	r7, sp, #0
 8007956:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007958:	240c      	movs	r4, #12
 800795a:	193b      	adds	r3, r7, r4
 800795c:	0018      	movs	r0, r3
 800795e:	2314      	movs	r3, #20
 8007960:	001a      	movs	r2, r3
 8007962:	2100      	movs	r1, #0
 8007964:	f017 ffc2 	bl	801f8ec <memset>
  if(i2sHandle->Instance==SPI2)
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	4a2d      	ldr	r2, [pc, #180]	@ (8007a24 <HAL_I2S_MspInit+0xd4>)
 800796e:	4293      	cmp	r3, r2
 8007970:	d154      	bne.n	8007a1c <HAL_I2S_MspInit+0xcc>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* I2S2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8007972:	4b2d      	ldr	r3, [pc, #180]	@ (8007a28 <HAL_I2S_MspInit+0xd8>)
 8007974:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007976:	4b2c      	ldr	r3, [pc, #176]	@ (8007a28 <HAL_I2S_MspInit+0xd8>)
 8007978:	2180      	movs	r1, #128	@ 0x80
 800797a:	01c9      	lsls	r1, r1, #7
 800797c:	430a      	orrs	r2, r1
 800797e:	639a      	str	r2, [r3, #56]	@ 0x38

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007980:	4b29      	ldr	r3, [pc, #164]	@ (8007a28 <HAL_I2S_MspInit+0xd8>)
 8007982:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007984:	4b28      	ldr	r3, [pc, #160]	@ (8007a28 <HAL_I2S_MspInit+0xd8>)
 8007986:	2102      	movs	r1, #2
 8007988:	430a      	orrs	r2, r1
 800798a:	62da      	str	r2, [r3, #44]	@ 0x2c
 800798c:	4b26      	ldr	r3, [pc, #152]	@ (8007a28 <HAL_I2S_MspInit+0xd8>)
 800798e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007990:	2202      	movs	r2, #2
 8007992:	4013      	ands	r3, r2
 8007994:	60bb      	str	r3, [r7, #8]
 8007996:	68bb      	ldr	r3, [r7, #8]
    /**I2S2 GPIO Configuration
    PB12     ------> I2S2_WS
    PB13     ------> I2S2_CK
    PB15     ------> I2S2_SD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 8007998:	193b      	adds	r3, r7, r4
 800799a:	22b0      	movs	r2, #176	@ 0xb0
 800799c:	0212      	lsls	r2, r2, #8
 800799e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80079a0:	0021      	movs	r1, r4
 80079a2:	187b      	adds	r3, r7, r1
 80079a4:	2202      	movs	r2, #2
 80079a6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80079a8:	187b      	adds	r3, r7, r1
 80079aa:	2200      	movs	r2, #0
 80079ac:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80079ae:	187b      	adds	r3, r7, r1
 80079b0:	2200      	movs	r2, #0
 80079b2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI2;
 80079b4:	187b      	adds	r3, r7, r1
 80079b6:	2200      	movs	r2, #0
 80079b8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80079ba:	187b      	adds	r3, r7, r1
 80079bc:	4a1b      	ldr	r2, [pc, #108]	@ (8007a2c <HAL_I2S_MspInit+0xdc>)
 80079be:	0019      	movs	r1, r3
 80079c0:	0010      	movs	r0, r2
 80079c2:	f007 fe47 	bl	800f654 <HAL_GPIO_Init>

    /* I2S2 DMA Init */
    /* SPI2_RX Init */
    hdma_spi2_rx.Instance = DMA1_Channel4;
 80079c6:	4b1a      	ldr	r3, [pc, #104]	@ (8007a30 <HAL_I2S_MspInit+0xe0>)
 80079c8:	4a1a      	ldr	r2, [pc, #104]	@ (8007a34 <HAL_I2S_MspInit+0xe4>)
 80079ca:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Request = DMA_REQUEST_2;
 80079cc:	4b18      	ldr	r3, [pc, #96]	@ (8007a30 <HAL_I2S_MspInit+0xe0>)
 80079ce:	2202      	movs	r2, #2
 80079d0:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80079d2:	4b17      	ldr	r3, [pc, #92]	@ (8007a30 <HAL_I2S_MspInit+0xe0>)
 80079d4:	2200      	movs	r2, #0
 80079d6:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80079d8:	4b15      	ldr	r3, [pc, #84]	@ (8007a30 <HAL_I2S_MspInit+0xe0>)
 80079da:	2200      	movs	r2, #0
 80079dc:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80079de:	4b14      	ldr	r3, [pc, #80]	@ (8007a30 <HAL_I2S_MspInit+0xe0>)
 80079e0:	2280      	movs	r2, #128	@ 0x80
 80079e2:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80079e4:	4b12      	ldr	r3, [pc, #72]	@ (8007a30 <HAL_I2S_MspInit+0xe0>)
 80079e6:	2280      	movs	r2, #128	@ 0x80
 80079e8:	0052      	lsls	r2, r2, #1
 80079ea:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80079ec:	4b10      	ldr	r3, [pc, #64]	@ (8007a30 <HAL_I2S_MspInit+0xe0>)
 80079ee:	2280      	movs	r2, #128	@ 0x80
 80079f0:	00d2      	lsls	r2, r2, #3
 80079f2:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_CIRCULAR;
 80079f4:	4b0e      	ldr	r3, [pc, #56]	@ (8007a30 <HAL_I2S_MspInit+0xe0>)
 80079f6:	2220      	movs	r2, #32
 80079f8:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80079fa:	4b0d      	ldr	r3, [pc, #52]	@ (8007a30 <HAL_I2S_MspInit+0xe0>)
 80079fc:	2200      	movs	r2, #0
 80079fe:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 8007a00:	4b0b      	ldr	r3, [pc, #44]	@ (8007a30 <HAL_I2S_MspInit+0xe0>)
 8007a02:	0018      	movs	r0, r3
 8007a04:	f007 fa0a 	bl	800ee1c <HAL_DMA_Init>
 8007a08:	1e03      	subs	r3, r0, #0
 8007a0a:	d001      	beq.n	8007a10 <HAL_I2S_MspInit+0xc0>
    {
      Error_Handler();
 8007a0c:	f000 fb2c 	bl	8008068 <Error_Handler>
    }

    __HAL_LINKDMA(i2sHandle,hdmarx,hdma_spi2_rx);
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	4a07      	ldr	r2, [pc, #28]	@ (8007a30 <HAL_I2S_MspInit+0xe0>)
 8007a14:	631a      	str	r2, [r3, #48]	@ 0x30
 8007a16:	4b06      	ldr	r3, [pc, #24]	@ (8007a30 <HAL_I2S_MspInit+0xe0>)
 8007a18:	687a      	ldr	r2, [r7, #4]
 8007a1a:	629a      	str	r2, [r3, #40]	@ 0x28

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8007a1c:	46c0      	nop			@ (mov r8, r8)
 8007a1e:	46bd      	mov	sp, r7
 8007a20:	b009      	add	sp, #36	@ 0x24
 8007a22:	bd90      	pop	{r4, r7, pc}
 8007a24:	40003800 	.word	0x40003800
 8007a28:	40021000 	.word	0x40021000
 8007a2c:	50000400 	.word	0x50000400
 8007a30:	20000f60 	.word	0x20000f60
 8007a34:	40020044 	.word	0x40020044

08007a38 <SetTestDone>:

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */

void SetTestDone(){
 8007a38:	b580      	push	{r7, lr}
 8007a3a:	af00      	add	r7, sp, #0
  testDone = true;
 8007a3c:	4b1e      	ldr	r3, [pc, #120]	@ (8007ab8 <SetTestDone+0x80>)
 8007a3e:	2201      	movs	r2, #1
 8007a40:	701a      	strb	r2, [r3, #0]
//  Info("testDone true in SetTestDone\r\n");
  HAL_Delay(1000);
 8007a42:	23fa      	movs	r3, #250	@ 0xfa
 8007a44:	009b      	lsls	r3, r3, #2
 8007a46:	0018      	movs	r0, r3
 8007a48:	f006 fd18 	bl	800e47c <HAL_Delay>
  SetDBLED(false, false, true);
 8007a4c:	2201      	movs	r2, #1
 8007a4e:	2100      	movs	r1, #0
 8007a50:	2000      	movs	r0, #0
 8007a52:	f005 f8df 	bl	800cc14 <SetDBLED>
  SetStatusLED(4000, 4000, 3000);
 8007a56:	4a19      	ldr	r2, [pc, #100]	@ (8007abc <SetTestDone+0x84>)
 8007a58:	23fa      	movs	r3, #250	@ 0xfa
 8007a5a:	0119      	lsls	r1, r3, #4
 8007a5c:	23fa      	movs	r3, #250	@ 0xfa
 8007a5e:	011b      	lsls	r3, r3, #4
 8007a60:	0018      	movs	r0, r3
 8007a62:	f005 f8a3 	bl	800cbac <SetStatusLED>
  SetVocLED(4000, 4000, 3000);
 8007a66:	4a15      	ldr	r2, [pc, #84]	@ (8007abc <SetTestDone+0x84>)
 8007a68:	23fa      	movs	r3, #250	@ 0xfa
 8007a6a:	0119      	lsls	r1, r3, #4
 8007a6c:	23fa      	movs	r3, #250	@ 0xfa
 8007a6e:	011b      	lsls	r3, r3, #4
 8007a70:	0018      	movs	r0, r3
 8007a72:	f005 f919 	bl	800cca8 <SetVocLED>
  HAL_Delay(1000);
 8007a76:	23fa      	movs	r3, #250	@ 0xfa
 8007a78:	009b      	lsls	r3, r3, #2
 8007a7a:	0018      	movs	r0, r3
 8007a7c:	f006 fcfe 	bl	800e47c <HAL_Delay>
  SetDBLED(false, false, false);
 8007a80:	2200      	movs	r2, #0
 8007a82:	2100      	movs	r1, #0
 8007a84:	2000      	movs	r0, #0
 8007a86:	f005 f8c5 	bl	800cc14 <SetDBLED>
  SetStatusLED(4000, 4000, 4000);
 8007a8a:	23fa      	movs	r3, #250	@ 0xfa
 8007a8c:	011a      	lsls	r2, r3, #4
 8007a8e:	23fa      	movs	r3, #250	@ 0xfa
 8007a90:	0119      	lsls	r1, r3, #4
 8007a92:	23fa      	movs	r3, #250	@ 0xfa
 8007a94:	011b      	lsls	r3, r3, #4
 8007a96:	0018      	movs	r0, r3
 8007a98:	f005 f888 	bl	800cbac <SetStatusLED>
  SetVocLED(4000, 4000, 4000);
 8007a9c:	23fa      	movs	r3, #250	@ 0xfa
 8007a9e:	011a      	lsls	r2, r3, #4
 8007aa0:	23fa      	movs	r3, #250	@ 0xfa
 8007aa2:	0119      	lsls	r1, r3, #4
 8007aa4:	23fa      	movs	r3, #250	@ 0xfa
 8007aa6:	011b      	lsls	r3, r3, #4
 8007aa8:	0018      	movs	r0, r3
 8007aaa:	f005 f8fd 	bl	800cca8 <SetVocLED>
  InitDone();
 8007aae:	f005 f819 	bl	800cae4 <InitDone>
}
 8007ab2:	46c0      	nop			@ (mov r8, r8)
 8007ab4:	46bd      	mov	sp, r7
 8007ab6:	bd80      	pop	{r7, pc}
 8007ab8:	20000fa8 	.word	0x20000fa8
 8007abc:	00000bb8 	.word	0x00000bb8

08007ac0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8007ac0:	b580      	push	{r7, lr}
 8007ac2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8007ac4:	f006 fc6a 	bl	800e39c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8007ac8:	f000 f978 	bl	8007dbc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8007acc:	f7ff fc40 	bl	8007350 <MX_GPIO_Init>
  MX_DMA_Init();
 8007ad0:	f7ff fb0e 	bl	80070f0 <MX_DMA_Init>
  MX_I2C1_Init();
 8007ad4:	f7ff fdba 	bl	800764c <MX_I2C1_Init>
  MX_I2S2_Init();
 8007ad8:	f7ff ff12 	bl	8007900 <MX_I2S2_Init>
  MX_USART1_UART_Init();
 8007adc:	f005 fe7c 	bl	800d7d8 <MX_USART1_UART_Init>
  MX_I2C2_Init();
 8007ae0:	f7ff fdf4 	bl	80076cc <MX_I2C2_Init>
  MX_TIM2_Init();
 8007ae4:	f005 fc70 	bl	800d3c8 <MX_TIM2_Init>
  MX_TIM3_Init();
 8007ae8:	f005 fce2 	bl	800d4b0 <MX_TIM3_Init>
  MX_USART4_UART_Init();
 8007aec:	f005 fea8 	bl	800d840 <MX_USART4_UART_Init>
  MX_ADC_Init();
 8007af0:	f7ff fa4c 	bl	8006f8c <MX_ADC_Init>
  MX_USB_DEVICE_Init();
 8007af4:	f014 fc08 	bl	801c308 <MX_USB_DEVICE_Init>
  MX_RTC_Init();
 8007af8:	f001 f854 	bl	8008ba4 <MX_RTC_Init>
  MX_LPUART1_UART_Init();
 8007afc:	f005 fe36 	bl	800d76c <MX_LPUART1_UART_Init>
  MX_TIM6_Init();
 8007b00:	f005 fd54 	bl	800d5ac <MX_TIM6_Init>
	 * : Default network: Sensor community
	 * : Different modes for outside and inside (check solar or check LED on/off mode?)
	 * : Add CLI via usb-c
	 * : Network not found? Sleep
	 */
  GPIO_InitPWMLEDs(&htim2, &htim3);
 8007b04:	4a8a      	ldr	r2, [pc, #552]	@ (8007d30 <main+0x270>)
 8007b06:	4b8b      	ldr	r3, [pc, #556]	@ (8007d34 <main+0x274>)
 8007b08:	0011      	movs	r1, r2
 8007b0a:	0018      	movs	r0, r3
 8007b0c:	f7ff fd50 	bl	80075b0 <GPIO_InitPWMLEDs>
  if(UserButton_Pressed()){
 8007b10:	f7fe fc62 	bl	80063d8 <UserButton_Pressed>
 8007b14:	1e03      	subs	r3, r0, #0
 8007b16:	d004      	beq.n	8007b22 <main+0x62>
    EnableESPProg();
 8007b18:	f014 fcc6 	bl	801c4a8 <EnableESPProg>
    ESP_Programming = true;
 8007b1c:	4b86      	ldr	r3, [pc, #536]	@ (8007d38 <main+0x278>)
 8007b1e:	2201      	movs	r2, #1
 8007b20:	701a      	strb	r2, [r3, #0]
  }
  SetVerboseLevel(VERBOSE_ALL);
 8007b22:	2003      	movs	r0, #3
 8007b24:	f006 f8b4 	bl	800dc90 <SetVerboseLevel>
  BinaryReleaseInfo();
 8007b28:	f006 f8cc 	bl	800dcc4 <BinaryReleaseInfo>
  HAL_UART_Receive_IT(&huart1, u1_rx_buff, 1);
 8007b2c:	4983      	ldr	r1, [pc, #524]	@ (8007d3c <main+0x27c>)
 8007b2e:	4b84      	ldr	r3, [pc, #528]	@ (8007d40 <main+0x280>)
 8007b30:	2201      	movs	r2, #1
 8007b32:	0018      	movs	r0, r3
 8007b34:	f00e ff4e 	bl	80169d4 <HAL_UART_Receive_IT>
  InitClock(&hrtc);
 8007b38:	4b82      	ldr	r3, [pc, #520]	@ (8007d44 <main+0x284>)
 8007b3a:	0018      	movs	r0, r3
 8007b3c:	f7ff f82c 	bl	8006b98 <InitClock>
  Debug("Clock init done");
 8007b40:	4a81      	ldr	r2, [pc, #516]	@ (8007d48 <main+0x288>)
 8007b42:	4b82      	ldr	r3, [pc, #520]	@ (8007d4c <main+0x28c>)
 8007b44:	0019      	movs	r1, r3
 8007b46:	2003      	movs	r0, #3
 8007b48:	f006 f838 	bl	800dbbc <CreateLine>

  if (!soundInit(&hdma_spi2_rx, &hi2s2, &htim6, DMA1_Channel4_5_6_7_IRQn)) {
 8007b4c:	4a80      	ldr	r2, [pc, #512]	@ (8007d50 <main+0x290>)
 8007b4e:	4981      	ldr	r1, [pc, #516]	@ (8007d54 <main+0x294>)
 8007b50:	4881      	ldr	r0, [pc, #516]	@ (8007d58 <main+0x298>)
 8007b52:	230b      	movs	r3, #11
 8007b54:	f004 f93c 	bl	800bdd0 <soundInit>
 8007b58:	0003      	movs	r3, r0
 8007b5a:	001a      	movs	r2, r3
 8007b5c:	2301      	movs	r3, #1
 8007b5e:	4053      	eors	r3, r2
 8007b60:	b2db      	uxtb	r3, r3
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	d005      	beq.n	8007b72 <main+0xb2>
    errorHandler(__func__, __LINE__, __FILE__);
 8007b66:	4a7d      	ldr	r2, [pc, #500]	@ (8007d5c <main+0x29c>)
 8007b68:	4b7d      	ldr	r3, [pc, #500]	@ (8007d60 <main+0x2a0>)
 8007b6a:	21ef      	movs	r1, #239	@ 0xef
 8007b6c:	0018      	movs	r0, r3
 8007b6e:	f006 f8dd 	bl	800dd2c <errorHandler>
  }
  Device_Init(&hi2c1, &hi2s2, &hadc, &huart4);
 8007b72:	4b7c      	ldr	r3, [pc, #496]	@ (8007d64 <main+0x2a4>)
 8007b74:	4a7c      	ldr	r2, [pc, #496]	@ (8007d68 <main+0x2a8>)
 8007b76:	4977      	ldr	r1, [pc, #476]	@ (8007d54 <main+0x294>)
 8007b78:	487c      	ldr	r0, [pc, #496]	@ (8007d6c <main+0x2ac>)
 8007b7a:	f000 fadf 	bl	800813c <Device_Init>
  deviceTimeOut = HAL_GetTick() + 5000;
 8007b7e:	f006 fc73 	bl	800e468 <HAL_GetTick>
 8007b82:	0003      	movs	r3, r0
 8007b84:	4a7a      	ldr	r2, [pc, #488]	@ (8007d70 <main+0x2b0>)
 8007b86:	189a      	adds	r2, r3, r2
 8007b88:	4b7a      	ldr	r3, [pc, #488]	@ (8007d74 <main+0x2b4>)
 8007b8a:	601a      	str	r2, [r3, #0]
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1) {
    if(TimestampIsReached(batteryReadTimer)){
 8007b8c:	4b7a      	ldr	r3, [pc, #488]	@ (8007d78 <main+0x2b8>)
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	0018      	movs	r0, r3
 8007b92:	f005 ffbd 	bl	800db10 <TimestampIsReached>
 8007b96:	1e03      	subs	r3, r0, #0
 8007b98:	d00e      	beq.n	8007bb8 <main+0xf8>
      charge = Battery_Upkeep();
 8007b9a:	f005 fa9f 	bl	800d0dc <Battery_Upkeep>
 8007b9e:	0003      	movs	r3, r0
 8007ba0:	001a      	movs	r2, r3
 8007ba2:	4b76      	ldr	r3, [pc, #472]	@ (8007d7c <main+0x2bc>)
 8007ba4:	701a      	strb	r2, [r3, #0]
      batteryReadTimer  = HAL_GetTick() + 50000;
 8007ba6:	f006 fc5f 	bl	800e468 <HAL_GetTick>
 8007baa:	0003      	movs	r3, r0
 8007bac:	4a74      	ldr	r2, [pc, #464]	@ (8007d80 <main+0x2c0>)
 8007bae:	189a      	adds	r2, r3, r2
 8007bb0:	4b71      	ldr	r3, [pc, #452]	@ (8007d78 <main+0x2b8>)
 8007bb2:	601a      	str	r2, [r3, #0]
        showTime();
 8007bb4:	f7fe fc20 	bl	80063f8 <showTime>
        else{
          batteryEmpty = false;
        }
    //====
*/
    if (testDone && !ESP_Programming && !batteryEmpty) {
 8007bb8:	4b72      	ldr	r3, [pc, #456]	@ (8007d84 <main+0x2c4>)
 8007bba:	781b      	ldrb	r3, [r3, #0]
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d100      	bne.n	8007bc2 <main+0x102>
 8007bc0:	e073      	b.n	8007caa <main+0x1ea>
 8007bc2:	4b5d      	ldr	r3, [pc, #372]	@ (8007d38 <main+0x278>)
 8007bc4:	781b      	ldrb	r3, [r3, #0]
 8007bc6:	2201      	movs	r2, #1
 8007bc8:	4053      	eors	r3, r2
 8007bca:	b2db      	uxtb	r3, r3
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	d100      	bne.n	8007bd2 <main+0x112>
 8007bd0:	e06b      	b.n	8007caa <main+0x1ea>
 8007bd2:	4b6d      	ldr	r3, [pc, #436]	@ (8007d88 <main+0x2c8>)
 8007bd4:	781b      	ldrb	r3, [r3, #0]
 8007bd6:	2201      	movs	r2, #1
 8007bd8:	4053      	eors	r3, r2
 8007bda:	b2db      	uxtb	r3, r3
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	d100      	bne.n	8007be2 <main+0x122>
 8007be0:	e063      	b.n	8007caa <main+0x1ea>
      if (SGPstate != SGP_STATE_START_MEASUREMENTS && SGPstate != SGP_STATE_WAIT_FOR_COMPLETION && Sensor.HT_measurementEnabled) {
 8007be2:	4b6a      	ldr	r3, [pc, #424]	@ (8007d8c <main+0x2cc>)
 8007be4:	781b      	ldrb	r3, [r3, #0]
 8007be6:	2b01      	cmp	r3, #1
 8007be8:	d00d      	beq.n	8007c06 <main+0x146>
 8007bea:	4b68      	ldr	r3, [pc, #416]	@ (8007d8c <main+0x2cc>)
 8007bec:	781b      	ldrb	r3, [r3, #0]
 8007bee:	2b02      	cmp	r3, #2
 8007bf0:	d009      	beq.n	8007c06 <main+0x146>
 8007bf2:	4b67      	ldr	r3, [pc, #412]	@ (8007d90 <main+0x2d0>)
 8007bf4:	781b      	ldrb	r3, [r3, #0]
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d005      	beq.n	8007c06 <main+0x146>
        HIDSstate = HIDS_Upkeep();
 8007bfa:	f006 fb19 	bl	800e230 <HIDS_Upkeep>
 8007bfe:	0003      	movs	r3, r0
 8007c00:	001a      	movs	r2, r3
 8007c02:	4b64      	ldr	r3, [pc, #400]	@ (8007d94 <main+0x2d4>)
 8007c04:	701a      	strb	r2, [r3, #0]
      }
      if (HIDSstate != HIDS_STATE_START_MEASUREMENTS && HIDSstate != HIDS_STATE_WAIT_FOR_COMPLETION && Sensor.VOC_measurementEnabled) {
 8007c06:	4b63      	ldr	r3, [pc, #396]	@ (8007d94 <main+0x2d4>)
 8007c08:	781b      	ldrb	r3, [r3, #0]
 8007c0a:	2b01      	cmp	r3, #1
 8007c0c:	d00d      	beq.n	8007c2a <main+0x16a>
 8007c0e:	4b61      	ldr	r3, [pc, #388]	@ (8007d94 <main+0x2d4>)
 8007c10:	781b      	ldrb	r3, [r3, #0]
 8007c12:	2b02      	cmp	r3, #2
 8007c14:	d009      	beq.n	8007c2a <main+0x16a>
 8007c16:	4b5e      	ldr	r3, [pc, #376]	@ (8007d90 <main+0x2d0>)
 8007c18:	785b      	ldrb	r3, [r3, #1]
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d005      	beq.n	8007c2a <main+0x16a>
        SGPstate = SGP_Upkeep();
 8007c1e:	f003 ff47 	bl	800bab0 <SGP_Upkeep>
 8007c22:	0003      	movs	r3, r0
 8007c24:	001a      	movs	r2, r3
 8007c26:	4b59      	ldr	r3, [pc, #356]	@ (8007d8c <main+0x2cc>)
 8007c28:	701a      	strb	r2, [r3, #0]
      }
      if (Sensor.MIC_measurementEnabled) {
 8007c2a:	4b59      	ldr	r3, [pc, #356]	@ (8007d90 <main+0x2d0>)
 8007c2c:	78db      	ldrb	r3, [r3, #3]
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d005      	beq.n	8007c3e <main+0x17e>
        MICstate = Mic_Upkeep();
 8007c32:	f000 fe81 	bl	8008938 <Mic_Upkeep>
 8007c36:	0003      	movs	r3, r0
 8007c38:	001a      	movs	r2, r3
 8007c3a:	4b57      	ldr	r3, [pc, #348]	@ (8007d98 <main+0x2d8>)
 8007c3c:	701a      	strb	r2, [r3, #0]
      }
      if ( (usbPluggedIn || (charge == BATTERY_FULL) || (charge == BATTERY_GOOD) || stlinkpwr) && Sensor.PM_measurementEnabled) {
 8007c3e:	4b57      	ldr	r3, [pc, #348]	@ (8007d9c <main+0x2dc>)
 8007c40:	781b      	ldrb	r3, [r3, #0]
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d10b      	bne.n	8007c5e <main+0x19e>
 8007c46:	4b4d      	ldr	r3, [pc, #308]	@ (8007d7c <main+0x2bc>)
 8007c48:	781b      	ldrb	r3, [r3, #0]
 8007c4a:	2b04      	cmp	r3, #4
 8007c4c:	d007      	beq.n	8007c5e <main+0x19e>
 8007c4e:	4b4b      	ldr	r3, [pc, #300]	@ (8007d7c <main+0x2bc>)
 8007c50:	781b      	ldrb	r3, [r3, #0]
 8007c52:	2b03      	cmp	r3, #3
 8007c54:	d003      	beq.n	8007c5e <main+0x19e>
 8007c56:	4b52      	ldr	r3, [pc, #328]	@ (8007da0 <main+0x2e0>)
 8007c58:	781b      	ldrb	r3, [r3, #0]
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	d006      	beq.n	8007c6c <main+0x1ac>
 8007c5e:	4b4c      	ldr	r3, [pc, #304]	@ (8007d90 <main+0x2d0>)
 8007c60:	789b      	ldrb	r3, [r3, #2]
 8007c62:	2b00      	cmp	r3, #0
 8007c64:	d002      	beq.n	8007c6c <main+0x1ac>
        sen5x_statemachine();
 8007c66:	f001 fcc5 	bl	80095f4 <sen5x_statemachine>
 8007c6a:	e018      	b.n	8007c9e <main+0x1de>
      }
      else if (((charge == BATTERY_LOW) || (charge == BATTERY_CRITICAL)) && !stlinkpwr && Sensor.PM_measurementEnabled) {
 8007c6c:	4b43      	ldr	r3, [pc, #268]	@ (8007d7c <main+0x2bc>)
 8007c6e:	781b      	ldrb	r3, [r3, #0]
 8007c70:	2b02      	cmp	r3, #2
 8007c72:	d003      	beq.n	8007c7c <main+0x1bc>
 8007c74:	4b41      	ldr	r3, [pc, #260]	@ (8007d7c <main+0x2bc>)
 8007c76:	781b      	ldrb	r3, [r3, #0]
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	d110      	bne.n	8007c9e <main+0x1de>
 8007c7c:	4b48      	ldr	r3, [pc, #288]	@ (8007da0 <main+0x2e0>)
 8007c7e:	781b      	ldrb	r3, [r3, #0]
 8007c80:	2201      	movs	r2, #1
 8007c82:	4053      	eors	r3, r2
 8007c84:	b2db      	uxtb	r3, r3
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d009      	beq.n	8007c9e <main+0x1de>
 8007c8a:	4b41      	ldr	r3, [pc, #260]	@ (8007d90 <main+0x2d0>)
 8007c8c:	789b      	ldrb	r3, [r3, #2]
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	d005      	beq.n	8007c9e <main+0x1de>
        Info("Battery level insufficient for sen5x operation");
 8007c92:	4a44      	ldr	r2, [pc, #272]	@ (8007da4 <main+0x2e4>)
 8007c94:	4b44      	ldr	r3, [pc, #272]	@ (8007da8 <main+0x2e8>)
 8007c96:	0019      	movs	r1, r3
 8007c98:	2002      	movs	r0, #2
 8007c9a:	f005 ff8f 	bl	800dbbc <CreateLine>
      }
      ESPstate = ESP_Upkeep();
 8007c9e:	f7fd fbb7 	bl	8005410 <ESP_Upkeep>
 8007ca2:	0003      	movs	r3, r0
 8007ca4:	001a      	movs	r2, r3
 8007ca6:	4b41      	ldr	r3, [pc, #260]	@ (8007dac <main+0x2ec>)
 8007ca8:	701a      	strb	r2, [r3, #0]
    }
    if(!testDone && !ESP_Programming && !batteryEmpty){
 8007caa:	4b36      	ldr	r3, [pc, #216]	@ (8007d84 <main+0x2c4>)
 8007cac:	781b      	ldrb	r3, [r3, #0]
 8007cae:	2201      	movs	r2, #1
 8007cb0:	4053      	eors	r3, r2
 8007cb2:	b2db      	uxtb	r3, r3
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	d00f      	beq.n	8007cd8 <main+0x218>
 8007cb8:	4b1f      	ldr	r3, [pc, #124]	@ (8007d38 <main+0x278>)
 8007cba:	781b      	ldrb	r3, [r3, #0]
 8007cbc:	2201      	movs	r2, #1
 8007cbe:	4053      	eors	r3, r2
 8007cc0:	b2db      	uxtb	r3, r3
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d008      	beq.n	8007cd8 <main+0x218>
 8007cc6:	4b30      	ldr	r3, [pc, #192]	@ (8007d88 <main+0x2c8>)
 8007cc8:	781b      	ldrb	r3, [r3, #0]
 8007cca:	2201      	movs	r2, #1
 8007ccc:	4053      	eors	r3, r2
 8007cce:	b2db      	uxtb	r3, r3
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	d001      	beq.n	8007cd8 <main+0x218>
      Device_Test();  // for device with startup time
 8007cd4:	f000 fb5a 	bl	800838c <Device_Test>
    }
    configCheck();
 8007cd8:	f005 f95c 	bl	800cf94 <configCheck>
    if (!usbPluggedIn) {
 8007cdc:	4b2f      	ldr	r3, [pc, #188]	@ (8007d9c <main+0x2dc>)
 8007cde:	781b      	ldrb	r3, [r3, #0]
 8007ce0:	2201      	movs	r2, #1
 8007ce2:	4053      	eors	r3, r2
 8007ce4:	b2db      	uxtb	r3, r3
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d100      	bne.n	8007cec <main+0x22c>
 8007cea:	e74f      	b.n	8007b8c <main+0xcc>
      if (!userToggle && AllDevicesReady() && ESPTransmitDone) {     // check if all sensors are ready
 8007cec:	4b30      	ldr	r3, [pc, #192]	@ (8007db0 <main+0x2f0>)
 8007cee:	781b      	ldrb	r3, [r3, #0]
 8007cf0:	2201      	movs	r2, #1
 8007cf2:	4053      	eors	r3, r2
 8007cf4:	b2db      	uxtb	r3, r3
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	d100      	bne.n	8007cfc <main+0x23c>
 8007cfa:	e747      	b.n	8007b8c <main+0xcc>
 8007cfc:	f000 fbc0 	bl	8008480 <AllDevicesReady>
 8007d00:	1e03      	subs	r3, r0, #0
 8007d02:	d100      	bne.n	8007d06 <main+0x246>
 8007d04:	e742      	b.n	8007b8c <main+0xcc>
 8007d06:	4b2b      	ldr	r3, [pc, #172]	@ (8007db4 <main+0x2f4>)
 8007d08:	781b      	ldrb	r3, [r3, #0]
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d100      	bne.n	8007d10 <main+0x250>
 8007d0e:	e73d      	b.n	8007b8c <main+0xcc>
        EnabledConnectedDevices();
 8007d10:	f000 fc16 	bl	8008540 <EnabledConnectedDevices>
        Enter_Stop_Mode(SensorProbe.PM_Present?WAIT_WITH_PM:WAIT_WITHOUT_PM);
 8007d14:	4b28      	ldr	r3, [pc, #160]	@ (8007db8 <main+0x2f8>)
 8007d16:	789b      	ldrb	r3, [r3, #2]
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	d002      	beq.n	8007d22 <main+0x262>
 8007d1c:	23d7      	movs	r3, #215	@ 0xd7
 8007d1e:	009b      	lsls	r3, r3, #2
 8007d20:	e001      	b.n	8007d26 <main+0x266>
 8007d22:	23dc      	movs	r3, #220	@ 0xdc
 8007d24:	009b      	lsls	r3, r3, #2
 8007d26:	0018      	movs	r0, r3
 8007d28:	f7fe fe92 	bl	8006a50 <Enter_Stop_Mode>
    if(TimestampIsReached(batteryReadTimer)){
 8007d2c:	e72e      	b.n	8007b8c <main+0xcc>
 8007d2e:	46c0      	nop			@ (mov r8, r8)
 8007d30:	20002234 	.word	0x20002234
 8007d34:	200021f4 	.word	0x200021f4
 8007d38:	20000fa9 	.word	0x20000fa9
 8007d3c:	20000fb0 	.word	0x20000fb0
 8007d40:	2000236c 	.word	0x2000236c
 8007d44:	20001238 	.word	0x20001238
 8007d48:	0802359c 	.word	0x0802359c
 8007d4c:	080235ac 	.word	0x080235ac
 8007d50:	20002274 	.word	0x20002274
 8007d54:	20000f24 	.word	0x20000f24
 8007d58:	20000f60 	.word	0x20000f60
 8007d5c:	080235b0 	.word	0x080235b0
 8007d60:	08024910 	.word	0x08024910
 8007d64:	20002424 	.word	0x20002424
 8007d68:	20000d90 	.word	0x20000d90
 8007d6c:	20000dec 	.word	0x20000dec
 8007d70:	00001388 	.word	0x00001388
 8007d74:	20000fc0 	.word	0x20000fc0
 8007d78:	20000fc4 	.word	0x20000fc4
 8007d7c:	20000fc8 	.word	0x20000fc8
 8007d80:	0000c350 	.word	0x0000c350
 8007d84:	20000fa8 	.word	0x20000fa8
 8007d88:	20000faa 	.word	0x20000faa
 8007d8c:	20000fab 	.word	0x20000fab
 8007d90:	20000080 	.word	0x20000080
 8007d94:	20000fac 	.word	0x20000fac
 8007d98:	20000fad 	.word	0x20000fad
 8007d9c:	200021e5 	.word	0x200021e5
 8007da0:	2000007c 	.word	0x2000007c
 8007da4:	080235c4 	.word	0x080235c4
 8007da8:	080235f4 	.word	0x080235f4
 8007dac:	20000fae 	.word	0x20000fae
 8007db0:	200021e6 	.word	0x200021e6
 8007db4:	20000553 	.word	0x20000553
 8007db8:	20000fcc 	.word	0x20000fcc

08007dbc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8007dbc:	b590      	push	{r4, r7, lr}
 8007dbe:	b09d      	sub	sp, #116	@ 0x74
 8007dc0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8007dc2:	2438      	movs	r4, #56	@ 0x38
 8007dc4:	193b      	adds	r3, r7, r4
 8007dc6:	0018      	movs	r0, r3
 8007dc8:	2338      	movs	r3, #56	@ 0x38
 8007dca:	001a      	movs	r2, r3
 8007dcc:	2100      	movs	r1, #0
 8007dce:	f017 fd8d 	bl	801f8ec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8007dd2:	2324      	movs	r3, #36	@ 0x24
 8007dd4:	18fb      	adds	r3, r7, r3
 8007dd6:	0018      	movs	r0, r3
 8007dd8:	2314      	movs	r3, #20
 8007dda:	001a      	movs	r2, r3
 8007ddc:	2100      	movs	r1, #0
 8007dde:	f017 fd85 	bl	801f8ec <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8007de2:	003b      	movs	r3, r7
 8007de4:	0018      	movs	r0, r3
 8007de6:	2324      	movs	r3, #36	@ 0x24
 8007de8:	001a      	movs	r2, r3
 8007dea:	2100      	movs	r1, #0
 8007dec:	f017 fd7e 	bl	801f8ec <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8007df0:	4b34      	ldr	r3, [pc, #208]	@ (8007ec4 <SystemClock_Config+0x108>)
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	4a34      	ldr	r2, [pc, #208]	@ (8007ec8 <SystemClock_Config+0x10c>)
 8007df6:	401a      	ands	r2, r3
 8007df8:	4b32      	ldr	r3, [pc, #200]	@ (8007ec4 <SystemClock_Config+0x108>)
 8007dfa:	2180      	movs	r1, #128	@ 0x80
 8007dfc:	0109      	lsls	r1, r1, #4
 8007dfe:	430a      	orrs	r2, r1
 8007e00:	601a      	str	r2, [r3, #0]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8007e02:	f00c fbd1 	bl	80145a8 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_MEDIUMHIGH);
 8007e06:	4b31      	ldr	r3, [pc, #196]	@ (8007ecc <SystemClock_Config+0x110>)
 8007e08:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007e0a:	4a2f      	ldr	r2, [pc, #188]	@ (8007ec8 <SystemClock_Config+0x10c>)
 8007e0c:	401a      	ands	r2, r3
 8007e0e:	4b2f      	ldr	r3, [pc, #188]	@ (8007ecc <SystemClock_Config+0x110>)
 8007e10:	2180      	movs	r1, #128	@ 0x80
 8007e12:	0149      	lsls	r1, r1, #5
 8007e14:	430a      	orrs	r2, r1
 8007e16:	651a      	str	r2, [r3, #80]	@ 0x50

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE
 8007e18:	193b      	adds	r3, r7, r4
 8007e1a:	2226      	movs	r2, #38	@ 0x26
 8007e1c:	601a      	str	r2, [r3, #0]
                              |RCC_OSCILLATORTYPE_HSI48;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8007e1e:	193b      	adds	r3, r7, r4
 8007e20:	2280      	movs	r2, #128	@ 0x80
 8007e22:	0052      	lsls	r2, r2, #1
 8007e24:	609a      	str	r2, [r3, #8]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8007e26:	0021      	movs	r1, r4
 8007e28:	187b      	adds	r3, r7, r1
 8007e2a:	2201      	movs	r2, #1
 8007e2c:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8007e2e:	187b      	adds	r3, r7, r1
 8007e30:	2210      	movs	r2, #16
 8007e32:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8007e34:	187b      	adds	r3, r7, r1
 8007e36:	2201      	movs	r2, #1
 8007e38:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8007e3a:	187b      	adds	r3, r7, r1
 8007e3c:	2200      	movs	r2, #0
 8007e3e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8007e40:	187b      	adds	r3, r7, r1
 8007e42:	0018      	movs	r0, r3
 8007e44:	f00c fc2a 	bl	801469c <HAL_RCC_OscConfig>
 8007e48:	1e03      	subs	r3, r0, #0
 8007e4a:	d001      	beq.n	8007e50 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8007e4c:	f000 f90c 	bl	8008068 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8007e50:	2124      	movs	r1, #36	@ 0x24
 8007e52:	187b      	adds	r3, r7, r1
 8007e54:	220f      	movs	r2, #15
 8007e56:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8007e58:	187b      	adds	r3, r7, r1
 8007e5a:	2201      	movs	r2, #1
 8007e5c:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8007e5e:	187b      	adds	r3, r7, r1
 8007e60:	2200      	movs	r2, #0
 8007e62:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8007e64:	187b      	adds	r3, r7, r1
 8007e66:	2200      	movs	r2, #0
 8007e68:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8007e6a:	187b      	adds	r3, r7, r1
 8007e6c:	2200      	movs	r2, #0
 8007e6e:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8007e70:	187b      	adds	r3, r7, r1
 8007e72:	2100      	movs	r1, #0
 8007e74:	0018      	movs	r0, r3
 8007e76:	f00c ffe5 	bl	8014e44 <HAL_RCC_ClockConfig>
 8007e7a:	1e03      	subs	r3, r0, #0
 8007e7c:	d001      	beq.n	8007e82 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8007e7e:	f000 f8f3 	bl	8008068 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_LPUART1
 8007e82:	003b      	movs	r3, r7
 8007e84:	226d      	movs	r2, #109	@ 0x6d
 8007e86:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_RTC
                              |RCC_PERIPHCLK_USB;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8007e88:	003b      	movs	r3, r7
 8007e8a:	2200      	movs	r2, #0
 8007e8c:	609a      	str	r2, [r3, #8]
  PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8007e8e:	003b      	movs	r3, r7
 8007e90:	2200      	movs	r2, #0
 8007e92:	611a      	str	r2, [r3, #16]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8007e94:	003b      	movs	r3, r7
 8007e96:	2200      	movs	r2, #0
 8007e98:	615a      	str	r2, [r3, #20]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8007e9a:	003b      	movs	r3, r7
 8007e9c:	2280      	movs	r2, #128	@ 0x80
 8007e9e:	0252      	lsls	r2, r2, #9
 8007ea0:	605a      	str	r2, [r3, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8007ea2:	003b      	movs	r3, r7
 8007ea4:	2280      	movs	r2, #128	@ 0x80
 8007ea6:	04d2      	lsls	r2, r2, #19
 8007ea8:	621a      	str	r2, [r3, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8007eaa:	003b      	movs	r3, r7
 8007eac:	0018      	movs	r0, r3
 8007eae:	f00d f9ed 	bl	801528c <HAL_RCCEx_PeriphCLKConfig>
 8007eb2:	1e03      	subs	r3, r0, #0
 8007eb4:	d001      	beq.n	8007eba <SystemClock_Config+0xfe>
  {
    Error_Handler();
 8007eb6:	f000 f8d7 	bl	8008068 <Error_Handler>
  }
}
 8007eba:	46c0      	nop			@ (mov r8, r8)
 8007ebc:	46bd      	mov	sp, r7
 8007ebe:	b01d      	add	sp, #116	@ 0x74
 8007ec0:	bd90      	pop	{r4, r7, pc}
 8007ec2:	46c0      	nop			@ (mov r8, r8)
 8007ec4:	40007000 	.word	0x40007000
 8007ec8:	ffffe7ff 	.word	0xffffe7ff
 8007ecc:	40021000 	.word	0x40021000

08007ed0 <printString>:

/* USER CODE BEGIN 4 */
// Provide a print interface for print_functions.
void printString(const char * str, uint16_t length)
{
 8007ed0:	b590      	push	{r4, r7, lr}
 8007ed2:	b083      	sub	sp, #12
 8007ed4:	af00      	add	r7, sp, #0
 8007ed6:	6078      	str	r0, [r7, #4]
 8007ed8:	000a      	movs	r2, r1
 8007eda:	1cbb      	adds	r3, r7, #2
 8007edc:	801a      	strh	r2, [r3, #0]
    HAL_UART_Transmit(&huart1, (uint8_t*) str, length, 0xFFFF);
 8007ede:	4c06      	ldr	r4, [pc, #24]	@ (8007ef8 <printString+0x28>)
 8007ee0:	1cbb      	adds	r3, r7, #2
 8007ee2:	881a      	ldrh	r2, [r3, #0]
 8007ee4:	6879      	ldr	r1, [r7, #4]
 8007ee6:	4805      	ldr	r0, [pc, #20]	@ (8007efc <printString+0x2c>)
 8007ee8:	0023      	movs	r3, r4
 8007eea:	f00e fcd3 	bl	8016894 <HAL_UART_Transmit>
}
 8007eee:	46c0      	nop			@ (mov r8, r8)
 8007ef0:	46bd      	mov	sp, r7
 8007ef2:	b003      	add	sp, #12
 8007ef4:	bd90      	pop	{r4, r7, pc}
 8007ef6:	46c0      	nop			@ (mov r8, r8)
 8007ef8:	0000ffff 	.word	0x0000ffff
 8007efc:	2000236c 	.word	0x2000236c

08007f00 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8007f00:	b580      	push	{r7, lr}
 8007f02:	b082      	sub	sp, #8
 8007f04:	af00      	add	r7, sp, #0
 8007f06:	6078      	str	r0, [r7, #4]
  HAL_UART_Receive_IT(&huart1, u1_rx_buff, 1);
 8007f08:	4936      	ldr	r1, [pc, #216]	@ (8007fe4 <HAL_UART_RxCpltCallback+0xe4>)
 8007f0a:	4b37      	ldr	r3, [pc, #220]	@ (8007fe8 <HAL_UART_RxCpltCallback+0xe8>)
 8007f0c:	2201      	movs	r2, #1
 8007f0e:	0018      	movs	r0, r3
 8007f10:	f00e fd60 	bl	80169d4 <HAL_UART_Receive_IT>
  switch (u1_rx_buff[0]){
 8007f14:	4b33      	ldr	r3, [pc, #204]	@ (8007fe4 <HAL_UART_RxCpltCallback+0xe4>)
 8007f16:	781b      	ldrb	r3, [r3, #0]
 8007f18:	3b61      	subs	r3, #97	@ 0x61
 8007f1a:	2b13      	cmp	r3, #19
 8007f1c:	d830      	bhi.n	8007f80 <HAL_UART_RxCpltCallback+0x80>
 8007f1e:	009a      	lsls	r2, r3, #2
 8007f20:	4b32      	ldr	r3, [pc, #200]	@ (8007fec <HAL_UART_RxCpltCallback+0xec>)
 8007f22:	18d3      	adds	r3, r2, r3
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	469f      	mov	pc, r3
    case (uint8_t)'a':
      printf("VerboseLevel set to all\r\n");
 8007f28:	4b31      	ldr	r3, [pc, #196]	@ (8007ff0 <HAL_UART_RxCpltCallback+0xf0>)
 8007f2a:	0018      	movs	r0, r3
 8007f2c:	f017 fb90 	bl	801f650 <puts>
      SetVerboseLevel(VERBOSE_ALL);
 8007f30:	2003      	movs	r0, #3
 8007f32:	f005 fead 	bl	800dc90 <SetVerboseLevel>
      break;
 8007f36:	e04a      	b.n	8007fce <HAL_UART_RxCpltCallback+0xce>
    case (uint8_t)'f':
      forceNTPupdate();  // sync the time now
 8007f38:	f7fb fc30 	bl	800379c <forceNTPupdate>
    break;
 8007f3c:	e047      	b.n	8007fce <HAL_UART_RxCpltCallback+0xce>
    case (uint8_t)'i':
      printf("VerboseLevel set to info\r\n");
 8007f3e:	4b2d      	ldr	r3, [pc, #180]	@ (8007ff4 <HAL_UART_RxCpltCallback+0xf4>)
 8007f40:	0018      	movs	r0, r3
 8007f42:	f017 fb85 	bl	801f650 <puts>
      SetVerboseLevel(VERBOSE_INFO);
 8007f46:	2002      	movs	r0, #2
 8007f48:	f005 fea2 	bl	800dc90 <SetVerboseLevel>
      break;
 8007f4c:	e03f      	b.n	8007fce <HAL_UART_RxCpltCallback+0xce>
    case (uint8_t)'m':
      printf("VerboseLevel set to minimal\r\n");
 8007f4e:	4b2a      	ldr	r3, [pc, #168]	@ (8007ff8 <HAL_UART_RxCpltCallback+0xf8>)
 8007f50:	0018      	movs	r0, r3
 8007f52:	f017 fb7d 	bl	801f650 <puts>
      SetVerboseLevel(VERBOSE_MINIMAL);
 8007f56:	2001      	movs	r0, #1
 8007f58:	f005 fe9a 	bl	800dc90 <SetVerboseLevel>
      break;
 8007f5c:	e037      	b.n	8007fce <HAL_UART_RxCpltCallback+0xce>
    case (uint8_t)'n':
      printf("VerboseLevel set to none\r\n");
 8007f5e:	4b27      	ldr	r3, [pc, #156]	@ (8007ffc <HAL_UART_RxCpltCallback+0xfc>)
 8007f60:	0018      	movs	r0, r3
 8007f62:	f017 fb75 	bl	801f650 <puts>
      SetVerboseLevel(VERBOSE_NONE);
 8007f66:	2000      	movs	r0, #0
 8007f68:	f005 fe92 	bl	800dc90 <SetVerboseLevel>
      break;
 8007f6c:	e02f      	b.n	8007fce <HAL_UART_RxCpltCallback+0xce>
    case (uint8_t)'s':
      sen5xReadTimer = HAL_GetTick();  // on request fire up the sen5x
 8007f6e:	f006 fa7b 	bl	800e468 <HAL_GetTick>
 8007f72:	0002      	movs	r2, r0
 8007f74:	4b22      	ldr	r3, [pc, #136]	@ (8008000 <HAL_UART_RxCpltCallback+0x100>)
 8007f76:	601a      	str	r2, [r3, #0]
      break;
 8007f78:	e029      	b.n	8007fce <HAL_UART_RxCpltCallback+0xce>
    case (uint8_t)'t':
      showTime(); // show me the current time
 8007f7a:	f7fe fa3d 	bl	80063f8 <showTime>
      break;
 8007f7e:	e026      	b.n	8007fce <HAL_UART_RxCpltCallback+0xce>
    default:
      Error("Error unknown request from Serial UART1 (TTY)\r\n");
 8007f80:	4a20      	ldr	r2, [pc, #128]	@ (8008004 <HAL_UART_RxCpltCallback+0x104>)
 8007f82:	4b21      	ldr	r3, [pc, #132]	@ (8008008 <HAL_UART_RxCpltCallback+0x108>)
 8007f84:	0019      	movs	r1, r3
 8007f86:	2001      	movs	r0, #1
 8007f88:	f005 fe18 	bl	800dbbc <CreateLine>
      printf("Possible commands:\r\n\r\n");
 8007f8c:	4b1f      	ldr	r3, [pc, #124]	@ (800800c <HAL_UART_RxCpltCallback+0x10c>)
 8007f8e:	0018      	movs	r0, r3
 8007f90:	f017 fb5e 	bl	801f650 <puts>
      printf("a - VerboseLevel set to all\r\n");
 8007f94:	4b1e      	ldr	r3, [pc, #120]	@ (8008010 <HAL_UART_RxCpltCallback+0x110>)
 8007f96:	0018      	movs	r0, r3
 8007f98:	f017 fb5a 	bl	801f650 <puts>
      printf("f - Force NTP time synchronization\r\n");
 8007f9c:	4b1d      	ldr	r3, [pc, #116]	@ (8008014 <HAL_UART_RxCpltCallback+0x114>)
 8007f9e:	0018      	movs	r0, r3
 8007fa0:	f017 fb56 	bl	801f650 <puts>
      printf("i - VerboseLevel set to info\r\n");
 8007fa4:	4b1c      	ldr	r3, [pc, #112]	@ (8008018 <HAL_UART_RxCpltCallback+0x118>)
 8007fa6:	0018      	movs	r0, r3
 8007fa8:	f017 fb52 	bl	801f650 <puts>
      printf("m - VerboseLevel set to minimal\r\n");
 8007fac:	4b1b      	ldr	r3, [pc, #108]	@ (800801c <HAL_UART_RxCpltCallback+0x11c>)
 8007fae:	0018      	movs	r0, r3
 8007fb0:	f017 fb4e 	bl	801f650 <puts>
      printf("n - VerboseLevel set to none\r\n");
 8007fb4:	4b1a      	ldr	r3, [pc, #104]	@ (8008020 <HAL_UART_RxCpltCallback+0x120>)
 8007fb6:	0018      	movs	r0, r3
 8007fb8:	f017 fb4a 	bl	801f650 <puts>
      printf("s - Start particle measurement\r\n");
 8007fbc:	4b19      	ldr	r3, [pc, #100]	@ (8008024 <HAL_UART_RxCpltCallback+0x124>)
 8007fbe:	0018      	movs	r0, r3
 8007fc0:	f017 fb46 	bl	801f650 <puts>
      printf("t - Show actual systemtime\r\n");
 8007fc4:	4b18      	ldr	r3, [pc, #96]	@ (8008028 <HAL_UART_RxCpltCallback+0x128>)
 8007fc6:	0018      	movs	r0, r3
 8007fc8:	f017 fb42 	bl	801f650 <puts>
  break;
 8007fcc:	46c0      	nop			@ (mov r8, r8)
  }
  HAL_UART_Receive_IT(&huart1, u1_rx_buff, 1); //Re-arm the interrupt
 8007fce:	4905      	ldr	r1, [pc, #20]	@ (8007fe4 <HAL_UART_RxCpltCallback+0xe4>)
 8007fd0:	4b05      	ldr	r3, [pc, #20]	@ (8007fe8 <HAL_UART_RxCpltCallback+0xe8>)
 8007fd2:	2201      	movs	r2, #1
 8007fd4:	0018      	movs	r0, r3
 8007fd6:	f00e fcfd 	bl	80169d4 <HAL_UART_Receive_IT>
}
 8007fda:	46c0      	nop			@ (mov r8, r8)
 8007fdc:	46bd      	mov	sp, r7
 8007fde:	b002      	add	sp, #8
 8007fe0:	bd80      	pop	{r7, pc}
 8007fe2:	46c0      	nop			@ (mov r8, r8)
 8007fe4:	20000fb0 	.word	0x20000fb0
 8007fe8:	2000236c 	.word	0x2000236c
 8007fec:	080248c0 	.word	0x080248c0
 8007ff0:	080235f8 	.word	0x080235f8
 8007ff4:	08023614 	.word	0x08023614
 8007ff8:	08023630 	.word	0x08023630
 8007ffc:	08023650 	.word	0x08023650
 8008000:	20001260 	.word	0x20001260
 8008004:	0802366c 	.word	0x0802366c
 8008008:	0802369c 	.word	0x0802369c
 800800c:	080236a0 	.word	0x080236a0
 8008010:	080236b8 	.word	0x080236b8
 8008014:	080236d8 	.word	0x080236d8
 8008018:	080236fc 	.word	0x080236fc
 800801c:	0802371c 	.word	0x0802371c
 8008020:	08023740 	.word	0x08023740
 8008024:	08023760 	.word	0x08023760
 8008028:	08023780 	.word	0x08023780

0800802c <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800802c:	b580      	push	{r7, lr}
 800802e:	b082      	sub	sp, #8
 8008030:	af00      	add	r7, sp, #0
 8008032:	0002      	movs	r2, r0
 8008034:	1dbb      	adds	r3, r7, #6
 8008036:	801a      	strh	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  if (GPIO_Pin == BOOT0_Pin) {
 8008038:	1dbb      	adds	r3, r7, #6
 800803a:	881a      	ldrh	r2, [r3, #0]
 800803c:	2380      	movs	r3, #128	@ 0x80
 800803e:	021b      	lsls	r3, r3, #8
 8008040:	429a      	cmp	r2, r3
 8008042:	d10b      	bne.n	800805c <HAL_GPIO_EXTI_Callback+0x30>
    setuserToggle();
 8008044:	f005 f85e 	bl	800d104 <setuserToggle>
    if (GetPMSensorPresence()) {
 8008048:	f000 f83a 	bl	80080c0 <GetPMSensorPresence>
 800804c:	1e03      	subs	r3, r0, #0
 800804e:	d005      	beq.n	800805c <HAL_GPIO_EXTI_Callback+0x30>
      Sensor.PM_measurementEnabled = true;
 8008050:	4b04      	ldr	r3, [pc, #16]	@ (8008064 <HAL_GPIO_EXTI_Callback+0x38>)
 8008052:	2201      	movs	r2, #1
 8008054:	709a      	strb	r2, [r3, #2]
      setsen5xReadTimer(100);
 8008056:	2064      	movs	r0, #100	@ 0x64
 8008058:	f000 fe32 	bl	8008cc0 <setsen5xReadTimer>
    }

  }
}
 800805c:	46c0      	nop			@ (mov r8, r8)
 800805e:	46bd      	mov	sp, r7
 8008060:	b002      	add	sp, #8
 8008062:	bd80      	pop	{r7, pc}
 8008064:	20000080 	.word	0x20000080

08008068 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8008068:	b580      	push	{r7, lr}
 800806a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800806c:	b672      	cpsid	i
}
 800806e:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
    Error("Trapped in Error_Handler, wait for reset");
 8008070:	4a05      	ldr	r2, [pc, #20]	@ (8008088 <Error_Handler+0x20>)
 8008072:	4b06      	ldr	r3, [pc, #24]	@ (800808c <Error_Handler+0x24>)
 8008074:	0019      	movs	r1, r3
 8008076:	2001      	movs	r0, #1
 8008078:	f005 fda0 	bl	800dbbc <CreateLine>
    HAL_Delay(2500);
 800807c:	4b04      	ldr	r3, [pc, #16]	@ (8008090 <Error_Handler+0x28>)
 800807e:	0018      	movs	r0, r3
 8008080:	f006 f9fc 	bl	800e47c <HAL_Delay>
    Error("Trapped in Error_Handler, wait for reset");
 8008084:	46c0      	nop			@ (mov r8, r8)
 8008086:	e7f3      	b.n	8008070 <Error_Handler+0x8>
 8008088:	0802379c 	.word	0x0802379c
 800808c:	0802369c 	.word	0x0802369c
 8008090:	000009c4 	.word	0x000009c4

08008094 <testInit>:
};

EnabledMeasurements Sensor;
DevicePresent SensorProbe;

void testInit(){
 8008094:	b580      	push	{r7, lr}
 8008096:	af00      	add	r7, sp, #0
  SensorProbe.HT_Present = false;
 8008098:	4b08      	ldr	r3, [pc, #32]	@ (80080bc <testInit+0x28>)
 800809a:	2200      	movs	r2, #0
 800809c:	701a      	strb	r2, [r3, #0]
  SensorProbe.VOC_Present = false;
 800809e:	4b07      	ldr	r3, [pc, #28]	@ (80080bc <testInit+0x28>)
 80080a0:	2200      	movs	r2, #0
 80080a2:	705a      	strb	r2, [r3, #1]
  SensorProbe.PM_Present = false;
 80080a4:	4b05      	ldr	r3, [pc, #20]	@ (80080bc <testInit+0x28>)
 80080a6:	2200      	movs	r2, #0
 80080a8:	709a      	strb	r2, [r3, #2]
  SensorProbe.MIC_Present = false;
 80080aa:	4b04      	ldr	r3, [pc, #16]	@ (80080bc <testInit+0x28>)
 80080ac:	2200      	movs	r2, #0
 80080ae:	70da      	strb	r2, [r3, #3]
  SensorProbe.ESP_Present = false;
 80080b0:	4b02      	ldr	r3, [pc, #8]	@ (80080bc <testInit+0x28>)
 80080b2:	2200      	movs	r2, #0
 80080b4:	711a      	strb	r2, [r3, #4]
}
 80080b6:	46c0      	nop			@ (mov r8, r8)
 80080b8:	46bd      	mov	sp, r7
 80080ba:	bd80      	pop	{r7, pc}
 80080bc:	20000fcc 	.word	0x20000fcc

080080c0 <GetPMSensorPresence>:

bool GetPMSensorPresence(){
 80080c0:	b580      	push	{r7, lr}
 80080c2:	af00      	add	r7, sp, #0
  return SensorProbe.PM_Present;
 80080c4:	4b02      	ldr	r3, [pc, #8]	@ (80080d0 <GetPMSensorPresence+0x10>)
 80080c6:	789b      	ldrb	r3, [r3, #2]
}
 80080c8:	0018      	movs	r0, r3
 80080ca:	46bd      	mov	sp, r7
 80080cc:	bd80      	pop	{r7, pc}
 80080ce:	46c0      	nop			@ (mov r8, r8)
 80080d0:	20000fcc 	.word	0x20000fcc

080080d4 <IsPMSensorEnabled>:

bool IsVOCSensorEnabled() {
  return Sensor.VOC_measurementEnabled;
}

bool IsPMSensorEnabled() {
 80080d4:	b580      	push	{r7, lr}
 80080d6:	af00      	add	r7, sp, #0
  return Sensor.PM_measurementEnabled;
 80080d8:	4b02      	ldr	r3, [pc, #8]	@ (80080e4 <IsPMSensorEnabled+0x10>)
 80080da:	789b      	ldrb	r3, [r3, #2]
}
 80080dc:	0018      	movs	r0, r3
 80080de:	46bd      	mov	sp, r7
 80080e0:	bd80      	pop	{r7, pc}
 80080e2:	46c0      	nop			@ (mov r8, r8)
 80080e4:	20000080 	.word	0x20000080

080080e8 <SetVOCSensorStatus>:

void SetHTSensorStatus(bool setting) {
  Sensor.HT_measurementEnabled =  setting;
}

void SetVOCSensorStatus(bool setting) {
 80080e8:	b580      	push	{r7, lr}
 80080ea:	b082      	sub	sp, #8
 80080ec:	af00      	add	r7, sp, #0
 80080ee:	0002      	movs	r2, r0
 80080f0:	1dfb      	adds	r3, r7, #7
 80080f2:	701a      	strb	r2, [r3, #0]
  Sensor.VOC_measurementEnabled = setting;
 80080f4:	4b03      	ldr	r3, [pc, #12]	@ (8008104 <SetVOCSensorStatus+0x1c>)
 80080f6:	1dfa      	adds	r2, r7, #7
 80080f8:	7812      	ldrb	r2, [r2, #0]
 80080fa:	705a      	strb	r2, [r3, #1]
}
 80080fc:	46c0      	nop			@ (mov r8, r8)
 80080fe:	46bd      	mov	sp, r7
 8008100:	b002      	add	sp, #8
 8008102:	bd80      	pop	{r7, pc}
 8008104:	20000080 	.word	0x20000080

08008108 <SetPMSensorStatus>:

void SetPMSensorStatus(bool setting) {
 8008108:	b580      	push	{r7, lr}
 800810a:	b082      	sub	sp, #8
 800810c:	af00      	add	r7, sp, #0
 800810e:	0002      	movs	r2, r0
 8008110:	1dfb      	adds	r3, r7, #7
 8008112:	701a      	strb	r2, [r3, #0]
  Sensor.PM_measurementEnabled = setting;
 8008114:	4b03      	ldr	r3, [pc, #12]	@ (8008124 <SetPMSensorStatus+0x1c>)
 8008116:	1dfa      	adds	r2, r7, #7
 8008118:	7812      	ldrb	r2, [r2, #0]
 800811a:	709a      	strb	r2, [r3, #2]
}
 800811c:	46c0      	nop			@ (mov r8, r8)
 800811e:	46bd      	mov	sp, r7
 8008120:	b002      	add	sp, #8
 8008122:	bd80      	pop	{r7, pc}
 8008124:	20000080 	.word	0x20000080

08008128 <SetESPMeasurementDone>:

void SetMICSensorStatus(bool setting) {
  Sensor.MIC_measurementEnabled = setting;
}

void SetESPMeasurementDone(){
 8008128:	b580      	push	{r7, lr}
 800812a:	af00      	add	r7, sp, #0
  SensorProbe.ESP_Present = true;
 800812c:	4b02      	ldr	r3, [pc, #8]	@ (8008138 <SetESPMeasurementDone+0x10>)
 800812e:	2201      	movs	r2, #1
 8008130:	711a      	strb	r2, [r3, #4]
}
 8008132:	46c0      	nop			@ (mov r8, r8)
 8008134:	46bd      	mov	sp, r7
 8008136:	bd80      	pop	{r7, pc}
 8008138:	20000fcc 	.word	0x20000fcc

0800813c <Device_Init>:

void Device_Init(I2C_HandleTypeDef* sensorI2C, I2S_HandleTypeDef* micI2s, ADC_HandleTypeDef* ADC_HANDLER, UART_HandleTypeDef* espUart) {
 800813c:	b580      	push	{r7, lr}
 800813e:	b084      	sub	sp, #16
 8008140:	af00      	add	r7, sp, #0
 8008142:	60f8      	str	r0, [r7, #12]
 8008144:	60b9      	str	r1, [r7, #8]
 8008146:	607a      	str	r2, [r7, #4]
 8008148:	603b      	str	r3, [r7, #0]
  testInit();
 800814a:	f7ff ffa3 	bl	8008094 <testInit>
  I2CSensors_Init(sensorI2C);
 800814e:	68fb      	ldr	r3, [r7, #12]
 8008150:	0018      	movs	r0, r3
 8008152:	f7fd fdd7 	bl	8005d04 <I2CSensors_Init>
  if(!HIDS_DeviceConnected()) {
 8008156:	f005 ff63 	bl	800e020 <HIDS_DeviceConnected>
 800815a:	0003      	movs	r3, r0
 800815c:	001a      	movs	r2, r3
 800815e:	2301      	movs	r3, #1
 8008160:	4053      	eors	r3, r2
 8008162:	b2db      	uxtb	r3, r3
 8008164:	2b00      	cmp	r3, #0
 8008166:	d00c      	beq.n	8008182 <Device_Init+0x46>
     Error("Humidity / Temperature sensor NOT connected!");
 8008168:	4a72      	ldr	r2, [pc, #456]	@ (8008334 <Device_Init+0x1f8>)
 800816a:	4b73      	ldr	r3, [pc, #460]	@ (8008338 <Device_Init+0x1fc>)
 800816c:	0019      	movs	r1, r3
 800816e:	2001      	movs	r0, #1
 8008170:	f005 fd24 	bl	800dbbc <CreateLine>
     SensorProbe.HT_Present = false;
 8008174:	4b71      	ldr	r3, [pc, #452]	@ (800833c <Device_Init+0x200>)
 8008176:	2200      	movs	r2, #0
 8008178:	701a      	strb	r2, [r3, #0]
     Sensor.HT_measurementEnabled = false;
 800817a:	4b71      	ldr	r3, [pc, #452]	@ (8008340 <Device_Init+0x204>)
 800817c:	2200      	movs	r2, #0
 800817e:	701a      	strb	r2, [r3, #0]
 8008180:	e008      	b.n	8008194 <Device_Init+0x58>
     // HT Device NOT connected, turning LED on RED.
  }else {
    // HT Device is connected, turning led on GREEN.
    SensorProbe.HT_Present = true;
 8008182:	4b6e      	ldr	r3, [pc, #440]	@ (800833c <Device_Init+0x200>)
 8008184:	2201      	movs	r2, #1
 8008186:	701a      	strb	r2, [r3, #0]
    Debug("Humidity / Temperature sensor initialised.");
 8008188:	4a6e      	ldr	r2, [pc, #440]	@ (8008344 <Device_Init+0x208>)
 800818a:	4b6f      	ldr	r3, [pc, #444]	@ (8008348 <Device_Init+0x20c>)
 800818c:	0019      	movs	r1, r3
 800818e:	2003      	movs	r0, #3
 8008190:	f005 fd14 	bl	800dbbc <CreateLine>
  }
  if(!SGP_DeviceConnected()) {
 8008194:	f003 fa82 	bl	800b69c <SGP_DeviceConnected>
 8008198:	0003      	movs	r3, r0
 800819a:	001a      	movs	r2, r3
 800819c:	2301      	movs	r3, #1
 800819e:	4053      	eors	r3, r2
 80081a0:	b2db      	uxtb	r3, r3
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d00c      	beq.n	80081c0 <Device_Init+0x84>
    SensorProbe.VOC_Present = false;
 80081a6:	4b65      	ldr	r3, [pc, #404]	@ (800833c <Device_Init+0x200>)
 80081a8:	2200      	movs	r2, #0
 80081aa:	705a      	strb	r2, [r3, #1]
     Error("SGP device not connected!");
 80081ac:	4a67      	ldr	r2, [pc, #412]	@ (800834c <Device_Init+0x210>)
 80081ae:	4b62      	ldr	r3, [pc, #392]	@ (8008338 <Device_Init+0x1fc>)
 80081b0:	0019      	movs	r1, r3
 80081b2:	2001      	movs	r0, #1
 80081b4:	f005 fd02 	bl	800dbbc <CreateLine>
     Sensor.VOC_measurementEnabled = false;
 80081b8:	4b61      	ldr	r3, [pc, #388]	@ (8008340 <Device_Init+0x204>)
 80081ba:	2200      	movs	r2, #0
 80081bc:	705a      	strb	r2, [r3, #1]
 80081be:	e008      	b.n	80081d2 <Device_Init+0x96>
  }
  else{
    SensorProbe.VOC_Present = true;
 80081c0:	4b5e      	ldr	r3, [pc, #376]	@ (800833c <Device_Init+0x200>)
 80081c2:	2201      	movs	r2, #1
 80081c4:	705a      	strb	r2, [r3, #1]
    Debug("SGP sensor initialised.");
 80081c6:	4a62      	ldr	r2, [pc, #392]	@ (8008350 <Device_Init+0x214>)
 80081c8:	4b5f      	ldr	r3, [pc, #380]	@ (8008348 <Device_Init+0x20c>)
 80081ca:	0019      	movs	r1, r3
 80081cc:	2003      	movs	r0, #3
 80081ce:	f005 fcf5 	bl	800dbbc <CreateLine>
  }
  if(SensorProbe.VOC_Present && SensorProbe.HT_Present){
 80081d2:	4b5a      	ldr	r3, [pc, #360]	@ (800833c <Device_Init+0x200>)
 80081d4:	785b      	ldrb	r3, [r3, #1]
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	d009      	beq.n	80081ee <Device_Init+0xb2>
 80081da:	4b58      	ldr	r3, [pc, #352]	@ (800833c <Device_Init+0x200>)
 80081dc:	781b      	ldrb	r3, [r3, #0]
 80081de:	2b00      	cmp	r3, #0
 80081e0:	d005      	beq.n	80081ee <Device_Init+0xb2>
    SetDBLED(false, true, false);
 80081e2:	2200      	movs	r2, #0
 80081e4:	2101      	movs	r1, #1
 80081e6:	2000      	movs	r0, #0
 80081e8:	f004 fd14 	bl	800cc14 <SetDBLED>
 80081ec:	e018      	b.n	8008220 <Device_Init+0xe4>
  }
  else{
    SetDBLED(true, false, false);
 80081ee:	2200      	movs	r2, #0
 80081f0:	2100      	movs	r1, #0
 80081f2:	2001      	movs	r0, #1
 80081f4:	f004 fd0e 	bl	800cc14 <SetDBLED>
    HAL_GPIO_WritePin(MCU_LED_C_R_GPIO_Port, MCU_LED_C_R_Pin, 0);
 80081f8:	4b56      	ldr	r3, [pc, #344]	@ (8008354 <Device_Init+0x218>)
 80081fa:	2200      	movs	r2, #0
 80081fc:	2101      	movs	r1, #1
 80081fe:	0018      	movs	r0, r3
 8008200:	f007 fbc3 	bl	800f98a <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MCU_LED_C_G_GPIO_Port, MCU_LED_C_G_Pin, 1);
 8008204:	2380      	movs	r3, #128	@ 0x80
 8008206:	005b      	lsls	r3, r3, #1
 8008208:	4852      	ldr	r0, [pc, #328]	@ (8008354 <Device_Init+0x218>)
 800820a:	2201      	movs	r2, #1
 800820c:	0019      	movs	r1, r3
 800820e:	f007 fbbc 	bl	800f98a <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MCU_LED_C_B_GPIO_Port, MCU_LED_C_B_Pin, 1);
 8008212:	2380      	movs	r3, #128	@ 0x80
 8008214:	009b      	lsls	r3, r3, #2
 8008216:	484f      	ldr	r0, [pc, #316]	@ (8008354 <Device_Init+0x218>)
 8008218:	2201      	movs	r2, #1
 800821a:	0019      	movs	r1, r3
 800821c:	f007 fbb5 	bl	800f98a <HAL_GPIO_WritePin>
  }
  if(Sensor.MIC_measurementEnabled) {
 8008220:	4b47      	ldr	r3, [pc, #284]	@ (8008340 <Device_Init+0x204>)
 8008222:	78db      	ldrb	r3, [r3, #3]
 8008224:	2b00      	cmp	r3, #0
 8008226:	d028      	beq.n	800827a <Device_Init+0x13e>
    Info("Device_Init calls enableMicrophone");
 8008228:	4a4b      	ldr	r2, [pc, #300]	@ (8008358 <Device_Init+0x21c>)
 800822a:	4b4c      	ldr	r3, [pc, #304]	@ (800835c <Device_Init+0x220>)
 800822c:	0019      	movs	r1, r3
 800822e:	2002      	movs	r0, #2
 8008230:	f005 fcc4 	bl	800dbbc <CreateLine>
    if (!enableMicrophone(true)) {
 8008234:	2001      	movs	r0, #1
 8008236:	f003 fe33 	bl	800bea0 <enableMicrophone>
 800823a:	0003      	movs	r3, r0
 800823c:	001a      	movs	r2, r3
 800823e:	2301      	movs	r3, #1
 8008240:	4053      	eors	r3, r2
 8008242:	b2db      	uxtb	r3, r3
 8008244:	2b00      	cmp	r3, #0
 8008246:	d00c      	beq.n	8008262 <Device_Init+0x126>
      Error("Microphone device not connected! DMA Error.");
 8008248:	4a45      	ldr	r2, [pc, #276]	@ (8008360 <Device_Init+0x224>)
 800824a:	4b3b      	ldr	r3, [pc, #236]	@ (8008338 <Device_Init+0x1fc>)
 800824c:	0019      	movs	r1, r3
 800824e:	2001      	movs	r0, #1
 8008250:	f005 fcb4 	bl	800dbbc <CreateLine>
      SensorProbe.MIC_Present = false;
 8008254:	4b39      	ldr	r3, [pc, #228]	@ (800833c <Device_Init+0x200>)
 8008256:	2200      	movs	r2, #0
 8008258:	70da      	strb	r2, [r3, #3]
      Sensor.MIC_measurementEnabled = false;
 800825a:	4b39      	ldr	r3, [pc, #228]	@ (8008340 <Device_Init+0x204>)
 800825c:	2200      	movs	r2, #0
 800825e:	70da      	strb	r2, [r3, #3]
 8008260:	e00b      	b.n	800827a <Device_Init+0x13e>
    }
    else{
      SensorProbe.MIC_Present = true;
 8008262:	4b36      	ldr	r3, [pc, #216]	@ (800833c <Device_Init+0x200>)
 8008264:	2201      	movs	r2, #1
 8008266:	70da      	strb	r2, [r3, #3]
      Sensor.MIC_measurementEnabled = true;
 8008268:	4b35      	ldr	r3, [pc, #212]	@ (8008340 <Device_Init+0x204>)
 800826a:	2201      	movs	r2, #1
 800826c:	70da      	strb	r2, [r3, #3]
      Debug("DMA and IRQ armed for Microphone sensor.");
 800826e:	4a3d      	ldr	r2, [pc, #244]	@ (8008364 <Device_Init+0x228>)
 8008270:	4b35      	ldr	r3, [pc, #212]	@ (8008348 <Device_Init+0x20c>)
 8008272:	0019      	movs	r1, r3
 8008274:	2003      	movs	r0, #3
 8008276:	f005 fca1 	bl	800dbbc <CreateLine>
    }
  }
  if (!probe_sen5x()) {
 800827a:	f000 fdcf 	bl	8008e1c <probe_sen5x>
 800827e:	1e03      	subs	r3, r0, #0
 8008280:	d10c      	bne.n	800829c <Device_Init+0x160>
    Debug("PM sensor initialised.");
 8008282:	4a39      	ldr	r2, [pc, #228]	@ (8008368 <Device_Init+0x22c>)
 8008284:	4b30      	ldr	r3, [pc, #192]	@ (8008348 <Device_Init+0x20c>)
 8008286:	0019      	movs	r1, r3
 8008288:	2003      	movs	r0, #3
 800828a:	f005 fc97 	bl	800dbbc <CreateLine>
    SensorProbe.PM_Present = true; // not present
 800828e:	4b2b      	ldr	r3, [pc, #172]	@ (800833c <Device_Init+0x200>)
 8008290:	2201      	movs	r2, #1
 8008292:	709a      	strb	r2, [r3, #2]
    Sensor.PM_measurementEnabled = true;
 8008294:	4b2a      	ldr	r3, [pc, #168]	@ (8008340 <Device_Init+0x204>)
 8008296:	2201      	movs	r2, #1
 8008298:	709a      	strb	r2, [r3, #2]
 800829a:	e00d      	b.n	80082b8 <Device_Init+0x17c>
  }
  else {
    sen5x_Power_Off();      // switch off buck converter
 800829c:	f000 fd96 	bl	8008dcc <sen5x_Power_Off>
    Debug("PM sensor not detected/connected.");
 80082a0:	4a32      	ldr	r2, [pc, #200]	@ (800836c <Device_Init+0x230>)
 80082a2:	4b29      	ldr	r3, [pc, #164]	@ (8008348 <Device_Init+0x20c>)
 80082a4:	0019      	movs	r1, r3
 80082a6:	2003      	movs	r0, #3
 80082a8:	f005 fc88 	bl	800dbbc <CreateLine>
    SensorProbe.MIC_Present = false;
 80082ac:	4b23      	ldr	r3, [pc, #140]	@ (800833c <Device_Init+0x200>)
 80082ae:	2200      	movs	r2, #0
 80082b0:	70da      	strb	r2, [r3, #3]
    Sensor.PM_measurementEnabled = false;
 80082b2:	4b23      	ldr	r3, [pc, #140]	@ (8008340 <Device_Init+0x204>)
 80082b4:	2200      	movs	r2, #0
 80082b6:	709a      	strb	r2, [r3, #2]
  }
  Info("SensorProbe.HT_Present: %s", SensorProbe.HT_Present?"yes":"no");
 80082b8:	4b20      	ldr	r3, [pc, #128]	@ (800833c <Device_Init+0x200>)
 80082ba:	781b      	ldrb	r3, [r3, #0]
 80082bc:	2b00      	cmp	r3, #0
 80082be:	d001      	beq.n	80082c4 <Device_Init+0x188>
 80082c0:	4b2b      	ldr	r3, [pc, #172]	@ (8008370 <Device_Init+0x234>)
 80082c2:	e000      	b.n	80082c6 <Device_Init+0x18a>
 80082c4:	4b2b      	ldr	r3, [pc, #172]	@ (8008374 <Device_Init+0x238>)
 80082c6:	4a2c      	ldr	r2, [pc, #176]	@ (8008378 <Device_Init+0x23c>)
 80082c8:	4924      	ldr	r1, [pc, #144]	@ (800835c <Device_Init+0x220>)
 80082ca:	2002      	movs	r0, #2
 80082cc:	f005 fc76 	bl	800dbbc <CreateLine>
  Info("SensorProbe.VOC_Present: %s", SensorProbe.VOC_Present?"yes":"no");
 80082d0:	4b1a      	ldr	r3, [pc, #104]	@ (800833c <Device_Init+0x200>)
 80082d2:	785b      	ldrb	r3, [r3, #1]
 80082d4:	2b00      	cmp	r3, #0
 80082d6:	d001      	beq.n	80082dc <Device_Init+0x1a0>
 80082d8:	4b25      	ldr	r3, [pc, #148]	@ (8008370 <Device_Init+0x234>)
 80082da:	e000      	b.n	80082de <Device_Init+0x1a2>
 80082dc:	4b25      	ldr	r3, [pc, #148]	@ (8008374 <Device_Init+0x238>)
 80082de:	4a27      	ldr	r2, [pc, #156]	@ (800837c <Device_Init+0x240>)
 80082e0:	491e      	ldr	r1, [pc, #120]	@ (800835c <Device_Init+0x220>)
 80082e2:	2002      	movs	r0, #2
 80082e4:	f005 fc6a 	bl	800dbbc <CreateLine>
  Info("SensorProbe.PM_Present: %s", SensorProbe.PM_Present?"yes":"no");
 80082e8:	4b14      	ldr	r3, [pc, #80]	@ (800833c <Device_Init+0x200>)
 80082ea:	789b      	ldrb	r3, [r3, #2]
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	d001      	beq.n	80082f4 <Device_Init+0x1b8>
 80082f0:	4b1f      	ldr	r3, [pc, #124]	@ (8008370 <Device_Init+0x234>)
 80082f2:	e000      	b.n	80082f6 <Device_Init+0x1ba>
 80082f4:	4b1f      	ldr	r3, [pc, #124]	@ (8008374 <Device_Init+0x238>)
 80082f6:	4a22      	ldr	r2, [pc, #136]	@ (8008380 <Device_Init+0x244>)
 80082f8:	4918      	ldr	r1, [pc, #96]	@ (800835c <Device_Init+0x220>)
 80082fa:	2002      	movs	r0, #2
 80082fc:	f005 fc5e 	bl	800dbbc <CreateLine>
  Info("SensorProbe.MIC_Present: %s", SensorProbe.MIC_Present?"yes":"no");
 8008300:	4b0e      	ldr	r3, [pc, #56]	@ (800833c <Device_Init+0x200>)
 8008302:	78db      	ldrb	r3, [r3, #3]
 8008304:	2b00      	cmp	r3, #0
 8008306:	d001      	beq.n	800830c <Device_Init+0x1d0>
 8008308:	4b19      	ldr	r3, [pc, #100]	@ (8008370 <Device_Init+0x234>)
 800830a:	e000      	b.n	800830e <Device_Init+0x1d2>
 800830c:	4b19      	ldr	r3, [pc, #100]	@ (8008374 <Device_Init+0x238>)
 800830e:	4a1d      	ldr	r2, [pc, #116]	@ (8008384 <Device_Init+0x248>)
 8008310:	4912      	ldr	r1, [pc, #72]	@ (800835c <Device_Init+0x220>)
 8008312:	2002      	movs	r0, #2
 8008314:	f005 fc52 	bl	800dbbc <CreateLine>
  ESP_Init(espUart);
 8008318:	683b      	ldr	r3, [r7, #0]
 800831a:	0018      	movs	r0, r3
 800831c:	f7fb fb86 	bl	8003a2c <ESP_Init>
  Debug("Sensors initialized, probing ESP.");
 8008320:	4a19      	ldr	r2, [pc, #100]	@ (8008388 <Device_Init+0x24c>)
 8008322:	4b09      	ldr	r3, [pc, #36]	@ (8008348 <Device_Init+0x20c>)
 8008324:	0019      	movs	r1, r3
 8008326:	2003      	movs	r0, #3
 8008328:	f005 fc48 	bl	800dbbc <CreateLine>
}
 800832c:	46c0      	nop			@ (mov r8, r8)
 800832e:	46bd      	mov	sp, r7
 8008330:	b004      	add	sp, #16
 8008332:	bd80      	pop	{r7, pc}
 8008334:	080237c8 	.word	0x080237c8
 8008338:	080237f8 	.word	0x080237f8
 800833c:	20000fcc 	.word	0x20000fcc
 8008340:	20000080 	.word	0x20000080
 8008344:	080237fc 	.word	0x080237fc
 8008348:	08023828 	.word	0x08023828
 800834c:	0802382c 	.word	0x0802382c
 8008350:	08023848 	.word	0x08023848
 8008354:	50000400 	.word	0x50000400
 8008358:	08023860 	.word	0x08023860
 800835c:	08023884 	.word	0x08023884
 8008360:	08023888 	.word	0x08023888
 8008364:	080238b4 	.word	0x080238b4
 8008368:	080238e0 	.word	0x080238e0
 800836c:	080238f8 	.word	0x080238f8
 8008370:	0802391c 	.word	0x0802391c
 8008374:	08023920 	.word	0x08023920
 8008378:	08023924 	.word	0x08023924
 800837c:	08023940 	.word	0x08023940
 8008380:	0802395c 	.word	0x0802395c
 8008384:	08023978 	.word	0x08023978
 8008388:	08023994 	.word	0x08023994

0800838c <Device_Test>:

void Device_Test(){
 800838c:	b580      	push	{r7, lr}
 800838e:	af00      	add	r7, sp, #0
  if(!SensorProbe.MIC_Present){
 8008390:	4b31      	ldr	r3, [pc, #196]	@ (8008458 <Device_Test+0xcc>)
 8008392:	78db      	ldrb	r3, [r3, #3]
 8008394:	2201      	movs	r2, #1
 8008396:	4053      	eors	r3, r2
 8008398:	b2db      	uxtb	r3, r3
 800839a:	2b00      	cmp	r3, #0
 800839c:	d021      	beq.n	80083e2 <Device_Test+0x56>
    if(MIC_TestMeasurementDone()){
 800839e:	f000 fa9b 	bl	80088d8 <MIC_TestMeasurementDone>
 80083a2:	1e03      	subs	r3, r0, #0
 80083a4:	d00e      	beq.n	80083c4 <Device_Test+0x38>
      //when this condition is met, the device is definite operational
//      Debug("MIC_TestMeasurementDone() is true");
      SensorProbe.MIC_Present = true;
 80083a6:	4b2c      	ldr	r3, [pc, #176]	@ (8008458 <Device_Test+0xcc>)
 80083a8:	2201      	movs	r2, #1
 80083aa:	70da      	strb	r2, [r3, #3]
      Sensor.MIC_measurementEnabled = true;
 80083ac:	4b2b      	ldr	r3, [pc, #172]	@ (800845c <Device_Test+0xd0>)
 80083ae:	2201      	movs	r2, #1
 80083b0:	70da      	strb	r2, [r3, #3]
      SetStatusLED(LED_OFF, LED_ON, LED_OFF);
 80083b2:	23fa      	movs	r3, #250	@ 0xfa
 80083b4:	011a      	lsls	r2, r3, #4
 80083b6:	492a      	ldr	r1, [pc, #168]	@ (8008460 <Device_Test+0xd4>)
 80083b8:	23fa      	movs	r3, #250	@ 0xfa
 80083ba:	011b      	lsls	r3, r3, #4
 80083bc:	0018      	movs	r0, r3
 80083be:	f004 fbf5 	bl	800cbac <SetStatusLED>
 80083c2:	e00e      	b.n	80083e2 <Device_Test+0x56>
    }
    else{
      if (micSettlingComplete()) {
 80083c4:	f003 fd48 	bl	800be58 <micSettlingComplete>
 80083c8:	1e03      	subs	r3, r0, #0
 80083ca:	d00a      	beq.n	80083e2 <Device_Test+0x56>
        // his has to be met first
//        Debug("micSettlingComplete() is true");
        Sensor.MIC_measurementEnabled = true;
 80083cc:	4b23      	ldr	r3, [pc, #140]	@ (800845c <Device_Test+0xd0>)
 80083ce:	2201      	movs	r2, #1
 80083d0:	70da      	strb	r2, [r3, #3]
        SetStatusLED(LED_ON, LED_OFF, LED_OFF);
 80083d2:	23fa      	movs	r3, #250	@ 0xfa
 80083d4:	011a      	lsls	r2, r3, #4
 80083d6:	23fa      	movs	r3, #250	@ 0xfa
 80083d8:	011b      	lsls	r3, r3, #4
 80083da:	4821      	ldr	r0, [pc, #132]	@ (8008460 <Device_Test+0xd4>)
 80083dc:	0019      	movs	r1, r3
 80083de:	f004 fbe5 	bl	800cbac <SetStatusLED>
      }
    }
  }
  if(!SensorProbe.ESP_Present){
 80083e2:	4b1d      	ldr	r3, [pc, #116]	@ (8008458 <Device_Test+0xcc>)
 80083e4:	791b      	ldrb	r3, [r3, #4]
 80083e6:	2201      	movs	r2, #1
 80083e8:	4053      	eors	r3, r2
 80083ea:	b2db      	uxtb	r3, r3
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	d001      	beq.n	80083f4 <Device_Test+0x68>
    ESP_WakeTest();  // calls in ESP.c  back to SetESPMeasurementDone()
 80083f0:	f7fc fef8 	bl	80051e4 <ESP_WakeTest>
  }
  if((SensorProbe.ESP_Present && SensorProbe.MIC_Present) || TimestampIsReached(deviceTimeOut)){
 80083f4:	4b18      	ldr	r3, [pc, #96]	@ (8008458 <Device_Test+0xcc>)
 80083f6:	791b      	ldrb	r3, [r3, #4]
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	d003      	beq.n	8008404 <Device_Test+0x78>
 80083fc:	4b16      	ldr	r3, [pc, #88]	@ (8008458 <Device_Test+0xcc>)
 80083fe:	78db      	ldrb	r3, [r3, #3]
 8008400:	2b00      	cmp	r3, #0
 8008402:	d106      	bne.n	8008412 <Device_Test+0x86>
 8008404:	4b17      	ldr	r3, [pc, #92]	@ (8008464 <Device_Test+0xd8>)
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	0018      	movs	r0, r3
 800840a:	f005 fb81 	bl	800db10 <TimestampIsReached>
 800840e:	1e03      	subs	r3, r0, #0
 8008410:	d01f      	beq.n	8008452 <Device_Test+0xc6>
    Info("Test completed");
 8008412:	4a15      	ldr	r2, [pc, #84]	@ (8008468 <Device_Test+0xdc>)
 8008414:	4b15      	ldr	r3, [pc, #84]	@ (800846c <Device_Test+0xe0>)
 8008416:	0019      	movs	r1, r3
 8008418:	2002      	movs	r0, #2
 800841a:	f005 fbcf 	bl	800dbbc <CreateLine>
    Info("ESP function: %s", SensorProbe.ESP_Present?"passed": "failed");
 800841e:	4b0e      	ldr	r3, [pc, #56]	@ (8008458 <Device_Test+0xcc>)
 8008420:	791b      	ldrb	r3, [r3, #4]
 8008422:	2b00      	cmp	r3, #0
 8008424:	d001      	beq.n	800842a <Device_Test+0x9e>
 8008426:	4b12      	ldr	r3, [pc, #72]	@ (8008470 <Device_Test+0xe4>)
 8008428:	e000      	b.n	800842c <Device_Test+0xa0>
 800842a:	4b12      	ldr	r3, [pc, #72]	@ (8008474 <Device_Test+0xe8>)
 800842c:	4a12      	ldr	r2, [pc, #72]	@ (8008478 <Device_Test+0xec>)
 800842e:	490f      	ldr	r1, [pc, #60]	@ (800846c <Device_Test+0xe0>)
 8008430:	2002      	movs	r0, #2
 8008432:	f005 fbc3 	bl	800dbbc <CreateLine>
    Info("MIC function:%s", SensorProbe.MIC_Present?"passed": "failed");
 8008436:	4b08      	ldr	r3, [pc, #32]	@ (8008458 <Device_Test+0xcc>)
 8008438:	78db      	ldrb	r3, [r3, #3]
 800843a:	2b00      	cmp	r3, #0
 800843c:	d001      	beq.n	8008442 <Device_Test+0xb6>
 800843e:	4b0c      	ldr	r3, [pc, #48]	@ (8008470 <Device_Test+0xe4>)
 8008440:	e000      	b.n	8008444 <Device_Test+0xb8>
 8008442:	4b0c      	ldr	r3, [pc, #48]	@ (8008474 <Device_Test+0xe8>)
 8008444:	4a0d      	ldr	r2, [pc, #52]	@ (800847c <Device_Test+0xf0>)
 8008446:	4909      	ldr	r1, [pc, #36]	@ (800846c <Device_Test+0xe0>)
 8008448:	2002      	movs	r0, #2
 800844a:	f005 fbb7 	bl	800dbbc <CreateLine>
    SetTestDone();
 800844e:	f7ff faf3 	bl	8007a38 <SetTestDone>
  }
}
 8008452:	46c0      	nop			@ (mov r8, r8)
 8008454:	46bd      	mov	sp, r7
 8008456:	bd80      	pop	{r7, pc}
 8008458:	20000fcc 	.word	0x20000fcc
 800845c:	20000080 	.word	0x20000080
 8008460:	00000bb8 	.word	0x00000bb8
 8008464:	20000fc0 	.word	0x20000fc0
 8008468:	080239b8 	.word	0x080239b8
 800846c:	08023884 	.word	0x08023884
 8008470:	080239c8 	.word	0x080239c8
 8008474:	080239d0 	.word	0x080239d0
 8008478:	080239d8 	.word	0x080239d8
 800847c:	080239ec 	.word	0x080239ec

08008480 <AllDevicesReady>:

bool AllDevicesReady() {
 8008480:	b580      	push	{r7, lr}
 8008482:	af00      	add	r7, sp, #0
  if (TimestampIsReached(deviceTimeOut)) {
 8008484:	4b27      	ldr	r3, [pc, #156]	@ (8008524 <AllDevicesReady+0xa4>)
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	0018      	movs	r0, r3
 800848a:	f005 fb41 	bl	800db10 <TimestampIsReached>
 800848e:	1e03      	subs	r3, r0, #0
 8008490:	d043      	beq.n	800851a <AllDevicesReady+0x9a>
    if (HIDSstate == HIDS_STATE_WAIT) {
 8008492:	4b25      	ldr	r3, [pc, #148]	@ (8008528 <AllDevicesReady+0xa8>)
 8008494:	781b      	ldrb	r3, [r3, #0]
 8008496:	2b06      	cmp	r3, #6
 8008498:	d102      	bne.n	80084a0 <AllDevicesReady+0x20>
      Sensor.HT_measurementEnabled = false;
 800849a:	4b24      	ldr	r3, [pc, #144]	@ (800852c <AllDevicesReady+0xac>)
 800849c:	2200      	movs	r2, #0
 800849e:	701a      	strb	r2, [r3, #0]
    }
    if (SGPstate == SGP_STATE_WAIT) {
 80084a0:	4b23      	ldr	r3, [pc, #140]	@ (8008530 <AllDevicesReady+0xb0>)
 80084a2:	781b      	ldrb	r3, [r3, #0]
 80084a4:	2b07      	cmp	r3, #7
 80084a6:	d102      	bne.n	80084ae <AllDevicesReady+0x2e>
      Sensor.VOC_measurementEnabled = false;
 80084a8:	4b20      	ldr	r3, [pc, #128]	@ (800852c <AllDevicesReady+0xac>)
 80084aa:	2200      	movs	r2, #0
 80084ac:	705a      	strb	r2, [r3, #1]
    }
    if (PMsamplesState == LIGHT_OUT) {
 80084ae:	4b21      	ldr	r3, [pc, #132]	@ (8008534 <AllDevicesReady+0xb4>)
 80084b0:	781b      	ldrb	r3, [r3, #0]
 80084b2:	2b01      	cmp	r3, #1
 80084b4:	d102      	bne.n	80084bc <AllDevicesReady+0x3c>
      Sensor.PM_measurementEnabled = false;
 80084b6:	4b1d      	ldr	r3, [pc, #116]	@ (800852c <AllDevicesReady+0xac>)
 80084b8:	2200      	movs	r2, #0
 80084ba:	709a      	strb	r2, [r3, #2]
    }
    if (MICstate == MIC_STATE_WAIT){
 80084bc:	4b1e      	ldr	r3, [pc, #120]	@ (8008538 <AllDevicesReady+0xb8>)
 80084be:	781b      	ldrb	r3, [r3, #0]
 80084c0:	2b03      	cmp	r3, #3
 80084c2:	d102      	bne.n	80084ca <AllDevicesReady+0x4a>
      Sensor.MIC_measurementEnabled = false;
 80084c4:	4b19      	ldr	r3, [pc, #100]	@ (800852c <AllDevicesReady+0xac>)
 80084c6:	2200      	movs	r2, #0
 80084c8:	70da      	strb	r2, [r3, #3]
    }
    if (ESPstate == ESP_STATE_RESET) {
 80084ca:	4b1c      	ldr	r3, [pc, #112]	@ (800853c <AllDevicesReady+0xbc>)
 80084cc:	781b      	ldrb	r3, [r3, #0]
 80084ce:	2b09      	cmp	r3, #9
 80084d0:	d123      	bne.n	800851a <AllDevicesReady+0x9a>
      return !(Sensor.HT_measurementEnabled || Sensor.VOC_measurementEnabled ||
 80084d2:	4b16      	ldr	r3, [pc, #88]	@ (800852c <AllDevicesReady+0xac>)
 80084d4:	781b      	ldrb	r3, [r3, #0]
 80084d6:	2201      	movs	r2, #1
 80084d8:	4053      	eors	r3, r2
 80084da:	b2db      	uxtb	r3, r3
 80084dc:	2b00      	cmp	r3, #0
 80084de:	d016      	beq.n	800850e <AllDevicesReady+0x8e>
 80084e0:	4b12      	ldr	r3, [pc, #72]	@ (800852c <AllDevicesReady+0xac>)
 80084e2:	785b      	ldrb	r3, [r3, #1]
 80084e4:	2201      	movs	r2, #1
 80084e6:	4053      	eors	r3, r2
 80084e8:	b2db      	uxtb	r3, r3
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	d00f      	beq.n	800850e <AllDevicesReady+0x8e>
          Sensor.PM_measurementEnabled || Sensor.MIC_measurementEnabled);
 80084ee:	4b0f      	ldr	r3, [pc, #60]	@ (800852c <AllDevicesReady+0xac>)
 80084f0:	789b      	ldrb	r3, [r3, #2]
      return !(Sensor.HT_measurementEnabled || Sensor.VOC_measurementEnabled ||
 80084f2:	2201      	movs	r2, #1
 80084f4:	4053      	eors	r3, r2
 80084f6:	b2db      	uxtb	r3, r3
 80084f8:	2b00      	cmp	r3, #0
 80084fa:	d008      	beq.n	800850e <AllDevicesReady+0x8e>
          Sensor.PM_measurementEnabled || Sensor.MIC_measurementEnabled);
 80084fc:	4b0b      	ldr	r3, [pc, #44]	@ (800852c <AllDevicesReady+0xac>)
 80084fe:	78db      	ldrb	r3, [r3, #3]
 8008500:	2201      	movs	r2, #1
 8008502:	4053      	eors	r3, r2
 8008504:	b2db      	uxtb	r3, r3
      return !(Sensor.HT_measurementEnabled || Sensor.VOC_measurementEnabled ||
 8008506:	2b00      	cmp	r3, #0
 8008508:	d001      	beq.n	800850e <AllDevicesReady+0x8e>
 800850a:	2301      	movs	r3, #1
 800850c:	e000      	b.n	8008510 <AllDevicesReady+0x90>
 800850e:	2300      	movs	r3, #0
 8008510:	1c1a      	adds	r2, r3, #0
 8008512:	2301      	movs	r3, #1
 8008514:	4013      	ands	r3, r2
 8008516:	b2db      	uxtb	r3, r3
 8008518:	e000      	b.n	800851c <AllDevicesReady+0x9c>
    }
  }
  return false;
 800851a:	2300      	movs	r3, #0
}
 800851c:	0018      	movs	r0, r3
 800851e:	46bd      	mov	sp, r7
 8008520:	bd80      	pop	{r7, pc}
 8008522:	46c0      	nop			@ (mov r8, r8)
 8008524:	20000fc0 	.word	0x20000fc0
 8008528:	20000fac 	.word	0x20000fac
 800852c:	20000080 	.word	0x20000080
 8008530:	20000fab 	.word	0x20000fab
 8008534:	20000085 	.word	0x20000085
 8008538:	20000fad 	.word	0x20000fad
 800853c:	20000fae 	.word	0x20000fae

08008540 <EnabledConnectedDevices>:

void EnabledConnectedDevices() {
 8008540:	b580      	push	{r7, lr}
 8008542:	af00      	add	r7, sp, #0
  if (SensorProbe.HT_Present) {
 8008544:	4b0f      	ldr	r3, [pc, #60]	@ (8008584 <EnabledConnectedDevices+0x44>)
 8008546:	781b      	ldrb	r3, [r3, #0]
 8008548:	2b00      	cmp	r3, #0
 800854a:	d002      	beq.n	8008552 <EnabledConnectedDevices+0x12>
    Sensor.HT_measurementEnabled = true;
 800854c:	4b0e      	ldr	r3, [pc, #56]	@ (8008588 <EnabledConnectedDevices+0x48>)
 800854e:	2201      	movs	r2, #1
 8008550:	701a      	strb	r2, [r3, #0]
  }
  if (SensorProbe.VOC_Present) {
 8008552:	4b0c      	ldr	r3, [pc, #48]	@ (8008584 <EnabledConnectedDevices+0x44>)
 8008554:	785b      	ldrb	r3, [r3, #1]
 8008556:	2b00      	cmp	r3, #0
 8008558:	d002      	beq.n	8008560 <EnabledConnectedDevices+0x20>
    Sensor.VOC_measurementEnabled = true;
 800855a:	4b0b      	ldr	r3, [pc, #44]	@ (8008588 <EnabledConnectedDevices+0x48>)
 800855c:	2201      	movs	r2, #1
 800855e:	705a      	strb	r2, [r3, #1]
  }
  if (SensorProbe.PM_Present) {
 8008560:	4b08      	ldr	r3, [pc, #32]	@ (8008584 <EnabledConnectedDevices+0x44>)
 8008562:	789b      	ldrb	r3, [r3, #2]
 8008564:	2b00      	cmp	r3, #0
 8008566:	d002      	beq.n	800856e <EnabledConnectedDevices+0x2e>
    Sensor.PM_measurementEnabled = true;
 8008568:	4b07      	ldr	r3, [pc, #28]	@ (8008588 <EnabledConnectedDevices+0x48>)
 800856a:	2201      	movs	r2, #1
 800856c:	709a      	strb	r2, [r3, #2]
  }
  if (SensorProbe.MIC_Present) {
 800856e:	4b05      	ldr	r3, [pc, #20]	@ (8008584 <EnabledConnectedDevices+0x44>)
 8008570:	78db      	ldrb	r3, [r3, #3]
 8008572:	2b00      	cmp	r3, #0
 8008574:	d002      	beq.n	800857c <EnabledConnectedDevices+0x3c>
    Sensor.MIC_measurementEnabled = true;
 8008576:	4b04      	ldr	r3, [pc, #16]	@ (8008588 <EnabledConnectedDevices+0x48>)
 8008578:	2201      	movs	r2, #1
 800857a:	70da      	strb	r2, [r3, #3]
  }
}
 800857c:	46c0      	nop			@ (mov r8, r8)
 800857e:	46bd      	mov	sp, r7
 8008580:	bd80      	pop	{r7, pc}
 8008582:	46c0      	nop			@ (mov r8, r8)
 8008584:	20000fcc 	.word	0x20000fcc
 8008588:	20000080 	.word	0x20000080

0800858c <DisableConnectedDevices>:

void DisableConnectedDevices() {
 800858c:	b580      	push	{r7, lr}
 800858e:	af00      	add	r7, sp, #0
    Sensor.HT_measurementEnabled = false;
 8008590:	4b07      	ldr	r3, [pc, #28]	@ (80085b0 <DisableConnectedDevices+0x24>)
 8008592:	2200      	movs	r2, #0
 8008594:	701a      	strb	r2, [r3, #0]
    Sensor.VOC_measurementEnabled = false;
 8008596:	4b06      	ldr	r3, [pc, #24]	@ (80085b0 <DisableConnectedDevices+0x24>)
 8008598:	2200      	movs	r2, #0
 800859a:	705a      	strb	r2, [r3, #1]
    Sensor.PM_measurementEnabled = false;
 800859c:	4b04      	ldr	r3, [pc, #16]	@ (80085b0 <DisableConnectedDevices+0x24>)
 800859e:	2200      	movs	r2, #0
 80085a0:	709a      	strb	r2, [r3, #2]
    Sensor.MIC_measurementEnabled = false;
 80085a2:	4b03      	ldr	r3, [pc, #12]	@ (80085b0 <DisableConnectedDevices+0x24>)
 80085a4:	2200      	movs	r2, #0
 80085a6:	70da      	strb	r2, [r3, #3]
}
 80085a8:	46c0      	nop			@ (mov r8, r8)
 80085aa:	46bd      	mov	sp, r7
 80085ac:	bd80      	pop	{r7, pc}
 80085ae:	46c0      	nop			@ (mov r8, r8)
 80085b0:	20000080 	.word	0x20000080

080085b4 <ResetdBAmax>:
bool samplebufferfilled = false;
static uint32_t MICTimeStamp;

SoundData_t soundData = {0};

void ResetdBAmax() {
 80085b4:	b580      	push	{r7, lr}
 80085b6:	af00      	add	r7, sp, #0
  dBAmax = 0.0;
 80085b8:	4b02      	ldr	r3, [pc, #8]	@ (80085c4 <ResetdBAmax+0x10>)
 80085ba:	2200      	movs	r2, #0
 80085bc:	601a      	str	r2, [r3, #0]
}
 80085be:	46c0      	nop			@ (mov r8, r8)
 80085c0:	46bd      	mov	sp, r7
 80085c2:	bd80      	pop	{r7, pc}
 80085c4:	20001018 	.word	0x20001018

080085c8 <setMICTimeStamp>:
void setMICTimeStamp(uint32_t ticks) {
 80085c8:	b580      	push	{r7, lr}
 80085ca:	b082      	sub	sp, #8
 80085cc:	af00      	add	r7, sp, #0
 80085ce:	6078      	str	r0, [r7, #4]
  MICTimeStamp = HAL_GetTick() + ticks;
 80085d0:	f005 ff4a 	bl	800e468 <HAL_GetTick>
 80085d4:	0002      	movs	r2, r0
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	18d2      	adds	r2, r2, r3
 80085da:	4b03      	ldr	r3, [pc, #12]	@ (80085e8 <setMICTimeStamp+0x20>)
 80085dc:	601a      	str	r2, [r3, #0]
}
 80085de:	46c0      	nop			@ (mov r8, r8)
 80085e0:	46bd      	mov	sp, r7
 80085e2:	b002      	add	sp, #8
 80085e4:	bd80      	pop	{r7, pc}
 80085e6:	46c0      	nop			@ (mov r8, r8)
 80085e8:	20001020 	.word	0x20001020

080085ec <ResetDBACalculator>:

void ResetDBACalculator(void) {
 80085ec:	b580      	push	{r7, lr}
 80085ee:	af00      	add	r7, sp, #0
  counter = 0;
 80085f0:	4b05      	ldr	r3, [pc, #20]	@ (8008608 <ResetDBACalculator+0x1c>)
 80085f2:	2200      	movs	r2, #0
 80085f4:	701a      	strb	r2, [r3, #0]
  denominator = 1;
 80085f6:	4b05      	ldr	r3, [pc, #20]	@ (800860c <ResetDBACalculator+0x20>)
 80085f8:	2201      	movs	r2, #1
 80085fa:	701a      	strb	r2, [r3, #0]
  samplebufferfilled = false;
 80085fc:	4b04      	ldr	r3, [pc, #16]	@ (8008610 <ResetDBACalculator+0x24>)
 80085fe:	2200      	movs	r2, #0
 8008600:	701a      	strb	r2, [r3, #0]
}
 8008602:	46c0      	nop			@ (mov r8, r8)
 8008604:	46bd      	mov	sp, r7
 8008606:	bd80      	pop	{r7, pc}
 8008608:	2000101c 	.word	0x2000101c
 800860c:	20000084 	.word	0x20000084
 8008610:	2000101d 	.word	0x2000101d

08008614 <MIC_Print>:

void MIC_Print(void) {
 8008614:	b5b0      	push	{r4, r5, r7, lr}
 8008616:	b08a      	sub	sp, #40	@ 0x28
 8008618:	af06      	add	r7, sp, #24
  dBA = dBValue; // dBValue is the actual sample
 800861a:	4b9d      	ldr	r3, [pc, #628]	@ (8008890 <MIC_Print+0x27c>)
 800861c:	681a      	ldr	r2, [r3, #0]
 800861e:	4b9d      	ldr	r3, [pc, #628]	@ (8008894 <MIC_Print+0x280>)
 8008620:	601a      	str	r2, [r3, #0]
  dBASamples[counter] = dBA;
 8008622:	4b9d      	ldr	r3, [pc, #628]	@ (8008898 <MIC_Print+0x284>)
 8008624:	781b      	ldrb	r3, [r3, #0]
 8008626:	001a      	movs	r2, r3
 8008628:	4b9a      	ldr	r3, [pc, #616]	@ (8008894 <MIC_Print+0x280>)
 800862a:	6819      	ldr	r1, [r3, #0]
 800862c:	4b9b      	ldr	r3, [pc, #620]	@ (800889c <MIC_Print+0x288>)
 800862e:	0092      	lsls	r2, r2, #2
 8008630:	50d1      	str	r1, [r2, r3]
  counter++;
 8008632:	4b99      	ldr	r3, [pc, #612]	@ (8008898 <MIC_Print+0x284>)
 8008634:	781b      	ldrb	r3, [r3, #0]
 8008636:	3301      	adds	r3, #1
 8008638:	b2da      	uxtb	r2, r3
 800863a:	4b97      	ldr	r3, [pc, #604]	@ (8008898 <MIC_Print+0x284>)
 800863c:	701a      	strb	r2, [r3, #0]
  if (counter < NUMBER_OF_SAMPLES && !samplebufferfilled) {
 800863e:	4b96      	ldr	r3, [pc, #600]	@ (8008898 <MIC_Print+0x284>)
 8008640:	781b      	ldrb	r3, [r3, #0]
 8008642:	2b09      	cmp	r3, #9
 8008644:	d80b      	bhi.n	800865e <MIC_Print+0x4a>
 8008646:	4b96      	ldr	r3, [pc, #600]	@ (80088a0 <MIC_Print+0x28c>)
 8008648:	781b      	ldrb	r3, [r3, #0]
 800864a:	2201      	movs	r2, #1
 800864c:	4053      	eors	r3, r2
 800864e:	b2db      	uxtb	r3, r3
 8008650:	2b00      	cmp	r3, #0
 8008652:	d004      	beq.n	800865e <MIC_Print+0x4a>
    denominator = counter;
 8008654:	4b90      	ldr	r3, [pc, #576]	@ (8008898 <MIC_Print+0x284>)
 8008656:	781a      	ldrb	r2, [r3, #0]
 8008658:	4b92      	ldr	r3, [pc, #584]	@ (80088a4 <MIC_Print+0x290>)
 800865a:	701a      	strb	r2, [r3, #0]
 800865c:	e005      	b.n	800866a <MIC_Print+0x56>
  }
  else {
    denominator = NUMBER_OF_SAMPLES;
 800865e:	4b91      	ldr	r3, [pc, #580]	@ (80088a4 <MIC_Print+0x290>)
 8008660:	220a      	movs	r2, #10
 8008662:	701a      	strb	r2, [r3, #0]
    samplebufferfilled = true;
 8008664:	4b8e      	ldr	r3, [pc, #568]	@ (80088a0 <MIC_Print+0x28c>)
 8008666:	2201      	movs	r2, #1
 8008668:	701a      	strb	r2, [r3, #0]
  }
//  dBAmax = 0.0;
  dBAsum = 0.0;
 800866a:	4b8f      	ldr	r3, [pc, #572]	@ (80088a8 <MIC_Print+0x294>)
 800866c:	2200      	movs	r2, #0
 800866e:	601a      	str	r2, [r3, #0]
  for(uint8_t i=0; i < denominator; i++){
 8008670:	230f      	movs	r3, #15
 8008672:	18fb      	adds	r3, r7, r3
 8008674:	2200      	movs	r2, #0
 8008676:	701a      	strb	r2, [r3, #0]
 8008678:	e03e      	b.n	80086f8 <MIC_Print+0xe4>
    dBAsum += dBASamples[i];
 800867a:	240f      	movs	r4, #15
 800867c:	193b      	adds	r3, r7, r4
 800867e:	781a      	ldrb	r2, [r3, #0]
 8008680:	4b86      	ldr	r3, [pc, #536]	@ (800889c <MIC_Print+0x288>)
 8008682:	0092      	lsls	r2, r2, #2
 8008684:	58d2      	ldr	r2, [r2, r3]
 8008686:	4b88      	ldr	r3, [pc, #544]	@ (80088a8 <MIC_Print+0x294>)
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	1c19      	adds	r1, r3, #0
 800868c:	1c10      	adds	r0, r2, #0
 800868e:	f7f8 f917 	bl	80008c0 <__aeabi_fadd>
 8008692:	1c03      	adds	r3, r0, #0
 8008694:	1c1a      	adds	r2, r3, #0
 8008696:	4b84      	ldr	r3, [pc, #528]	@ (80088a8 <MIC_Print+0x294>)
 8008698:	601a      	str	r2, [r3, #0]
    if (dBASamples[i] > dBAmax) {
 800869a:	193b      	adds	r3, r7, r4
 800869c:	781a      	ldrb	r2, [r3, #0]
 800869e:	4b7f      	ldr	r3, [pc, #508]	@ (800889c <MIC_Print+0x288>)
 80086a0:	0092      	lsls	r2, r2, #2
 80086a2:	58d2      	ldr	r2, [r2, r3]
 80086a4:	4b81      	ldr	r3, [pc, #516]	@ (80088ac <MIC_Print+0x298>)
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	1c19      	adds	r1, r3, #0
 80086aa:	1c10      	adds	r0, r2, #0
 80086ac:	f7f7 ff54 	bl	8000558 <__aeabi_fcmpgt>
 80086b0:	1e03      	subs	r3, r0, #0
 80086b2:	d006      	beq.n	80086c2 <MIC_Print+0xae>
      dBAmax = dBASamples[i];
 80086b4:	193b      	adds	r3, r7, r4
 80086b6:	781a      	ldrb	r2, [r3, #0]
 80086b8:	4b78      	ldr	r3, [pc, #480]	@ (800889c <MIC_Print+0x288>)
 80086ba:	0092      	lsls	r2, r2, #2
 80086bc:	58d2      	ldr	r2, [r2, r3]
 80086be:	4b7b      	ldr	r3, [pc, #492]	@ (80088ac <MIC_Print+0x298>)
 80086c0:	601a      	str	r2, [r3, #0]
  }
  dBAAverage = dBAsum/(float)denominator;
 80086c2:	4b79      	ldr	r3, [pc, #484]	@ (80088a8 <MIC_Print+0x294>)
 80086c4:	681c      	ldr	r4, [r3, #0]
 80086c6:	4b77      	ldr	r3, [pc, #476]	@ (80088a4 <MIC_Print+0x290>)
 80086c8:	781b      	ldrb	r3, [r3, #0]
 80086ca:	0018      	movs	r0, r3
 80086cc:	f7f8 ffcc 	bl	8001668 <__aeabi_ui2f>
 80086d0:	1c03      	adds	r3, r0, #0
 80086d2:	1c19      	adds	r1, r3, #0
 80086d4:	1c20      	adds	r0, r4, #0
 80086d6:	f7f8 fa7d 	bl	8000bd4 <__aeabi_fdiv>
 80086da:	1c03      	adds	r3, r0, #0
 80086dc:	1c1a      	adds	r2, r3, #0
 80086de:	4b74      	ldr	r3, [pc, #464]	@ (80088b0 <MIC_Print+0x29c>)
 80086e0:	601a      	str	r2, [r3, #0]
//  setMic(dBAAverage);
  setMic(dBAmax);
 80086e2:	4b72      	ldr	r3, [pc, #456]	@ (80088ac <MIC_Print+0x298>)
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	1c18      	adds	r0, r3, #0
 80086e8:	f7fb f92c 	bl	8003944 <setMic>
  for(uint8_t i=0; i < denominator; i++){
 80086ec:	210f      	movs	r1, #15
 80086ee:	187b      	adds	r3, r7, r1
 80086f0:	781a      	ldrb	r2, [r3, #0]
 80086f2:	187b      	adds	r3, r7, r1
 80086f4:	3201      	adds	r2, #1
 80086f6:	701a      	strb	r2, [r3, #0]
 80086f8:	4b6a      	ldr	r3, [pc, #424]	@ (80088a4 <MIC_Print+0x290>)
 80086fa:	781b      	ldrb	r3, [r3, #0]
 80086fc:	220f      	movs	r2, #15
 80086fe:	18ba      	adds	r2, r7, r2
 8008700:	7812      	ldrb	r2, [r2, #0]
 8008702:	429a      	cmp	r2, r3
 8008704:	d3b9      	bcc.n	800867a <MIC_Print+0x66>
  }
  print("SPL_dBA: %.1f, SPL_peak_mPa: %s, dBA peak: %.1f, dBA average: %.1f\r\n", dBA,mPabuffer, dBAmax, dBAAverage);
 8008706:	4b63      	ldr	r3, [pc, #396]	@ (8008894 <MIC_Print+0x280>)
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	1c18      	adds	r0, r3, #0
 800870c:	f7fa feaa 	bl	8003464 <__aeabi_f2d>
 8008710:	6038      	str	r0, [r7, #0]
 8008712:	6079      	str	r1, [r7, #4]
 8008714:	4b65      	ldr	r3, [pc, #404]	@ (80088ac <MIC_Print+0x298>)
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	1c18      	adds	r0, r3, #0
 800871a:	f7fa fea3 	bl	8003464 <__aeabi_f2d>
 800871e:	0004      	movs	r4, r0
 8008720:	000d      	movs	r5, r1
 8008722:	4b63      	ldr	r3, [pc, #396]	@ (80088b0 <MIC_Print+0x29c>)
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	1c18      	adds	r0, r3, #0
 8008728:	f7fa fe9c 	bl	8003464 <__aeabi_f2d>
 800872c:	0002      	movs	r2, r0
 800872e:	000b      	movs	r3, r1
 8008730:	4960      	ldr	r1, [pc, #384]	@ (80088b4 <MIC_Print+0x2a0>)
 8008732:	9204      	str	r2, [sp, #16]
 8008734:	9305      	str	r3, [sp, #20]
 8008736:	9402      	str	r4, [sp, #8]
 8008738:	9503      	str	r5, [sp, #12]
 800873a:	4b5f      	ldr	r3, [pc, #380]	@ (80088b8 <MIC_Print+0x2a4>)
 800873c:	9300      	str	r3, [sp, #0]
 800873e:	683a      	ldr	r2, [r7, #0]
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	0008      	movs	r0, r1
 8008744:	f000 fa0c 	bl	8008b60 <print>

  if(counter > NUMBER_OF_SAMPLES){
 8008748:	4b53      	ldr	r3, [pc, #332]	@ (8008898 <MIC_Print+0x284>)
 800874a:	781b      	ldrb	r3, [r3, #0]
 800874c:	2b0a      	cmp	r3, #10
 800874e:	d902      	bls.n	8008756 <MIC_Print+0x142>
    counter = 0;
 8008750:	4b51      	ldr	r3, [pc, #324]	@ (8008898 <MIC_Print+0x284>)
 8008752:	2200      	movs	r2, #0
 8008754:	701a      	strb	r2, [r3, #0]
  }
  if(dBA >= 90){//white
 8008756:	4b4f      	ldr	r3, [pc, #316]	@ (8008894 <MIC_Print+0x280>)
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	4958      	ldr	r1, [pc, #352]	@ (80088bc <MIC_Print+0x2a8>)
 800875c:	1c18      	adds	r0, r3, #0
 800875e:	f7f7 ff05 	bl	800056c <__aeabi_fcmpge>
 8008762:	1e03      	subs	r3, r0, #0
 8008764:	d004      	beq.n	8008770 <MIC_Print+0x15c>
    SetDBLED(true, true, true);
 8008766:	2201      	movs	r2, #1
 8008768:	2101      	movs	r1, #1
 800876a:	2001      	movs	r0, #1
 800876c:	f004 fa52 	bl	800cc14 <SetDBLED>
  }
  if(dBA >= 80 && dBA < 90){ //red
 8008770:	4b48      	ldr	r3, [pc, #288]	@ (8008894 <MIC_Print+0x280>)
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	4952      	ldr	r1, [pc, #328]	@ (80088c0 <MIC_Print+0x2ac>)
 8008776:	1c18      	adds	r0, r3, #0
 8008778:	f7f7 fef8 	bl	800056c <__aeabi_fcmpge>
 800877c:	1e03      	subs	r3, r0, #0
 800877e:	d00c      	beq.n	800879a <MIC_Print+0x186>
 8008780:	4b44      	ldr	r3, [pc, #272]	@ (8008894 <MIC_Print+0x280>)
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	494d      	ldr	r1, [pc, #308]	@ (80088bc <MIC_Print+0x2a8>)
 8008786:	1c18      	adds	r0, r3, #0
 8008788:	f7f7 fed2 	bl	8000530 <__aeabi_fcmplt>
 800878c:	1e03      	subs	r3, r0, #0
 800878e:	d004      	beq.n	800879a <MIC_Print+0x186>
    SetDBLED(true, false, false);
 8008790:	2200      	movs	r2, #0
 8008792:	2100      	movs	r1, #0
 8008794:	2001      	movs	r0, #1
 8008796:	f004 fa3d 	bl	800cc14 <SetDBLED>
  }
  if(dBA >= 70 && dBA < 80){//yellow
 800879a:	4b3e      	ldr	r3, [pc, #248]	@ (8008894 <MIC_Print+0x280>)
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	4949      	ldr	r1, [pc, #292]	@ (80088c4 <MIC_Print+0x2b0>)
 80087a0:	1c18      	adds	r0, r3, #0
 80087a2:	f7f7 fee3 	bl	800056c <__aeabi_fcmpge>
 80087a6:	1e03      	subs	r3, r0, #0
 80087a8:	d00c      	beq.n	80087c4 <MIC_Print+0x1b0>
 80087aa:	4b3a      	ldr	r3, [pc, #232]	@ (8008894 <MIC_Print+0x280>)
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	4944      	ldr	r1, [pc, #272]	@ (80088c0 <MIC_Print+0x2ac>)
 80087b0:	1c18      	adds	r0, r3, #0
 80087b2:	f7f7 febd 	bl	8000530 <__aeabi_fcmplt>
 80087b6:	1e03      	subs	r3, r0, #0
 80087b8:	d004      	beq.n	80087c4 <MIC_Print+0x1b0>
    SetDBLED(true, true, false);
 80087ba:	2200      	movs	r2, #0
 80087bc:	2101      	movs	r1, #1
 80087be:	2001      	movs	r0, #1
 80087c0:	f004 fa28 	bl	800cc14 <SetDBLED>
  }
  if(dBA >= 60 && dBA < 70){//Green
 80087c4:	4b33      	ldr	r3, [pc, #204]	@ (8008894 <MIC_Print+0x280>)
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	493f      	ldr	r1, [pc, #252]	@ (80088c8 <MIC_Print+0x2b4>)
 80087ca:	1c18      	adds	r0, r3, #0
 80087cc:	f7f7 fece 	bl	800056c <__aeabi_fcmpge>
 80087d0:	1e03      	subs	r3, r0, #0
 80087d2:	d00c      	beq.n	80087ee <MIC_Print+0x1da>
 80087d4:	4b2f      	ldr	r3, [pc, #188]	@ (8008894 <MIC_Print+0x280>)
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	493a      	ldr	r1, [pc, #232]	@ (80088c4 <MIC_Print+0x2b0>)
 80087da:	1c18      	adds	r0, r3, #0
 80087dc:	f7f7 fea8 	bl	8000530 <__aeabi_fcmplt>
 80087e0:	1e03      	subs	r3, r0, #0
 80087e2:	d004      	beq.n	80087ee <MIC_Print+0x1da>
    SetDBLED(false, true, false);
 80087e4:	2200      	movs	r2, #0
 80087e6:	2101      	movs	r1, #1
 80087e8:	2000      	movs	r0, #0
 80087ea:	f004 fa13 	bl	800cc14 <SetDBLED>
  }
  if(dBA >= 50 && dBA < 60){//light blue
 80087ee:	4b29      	ldr	r3, [pc, #164]	@ (8008894 <MIC_Print+0x280>)
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	4936      	ldr	r1, [pc, #216]	@ (80088cc <MIC_Print+0x2b8>)
 80087f4:	1c18      	adds	r0, r3, #0
 80087f6:	f7f7 feb9 	bl	800056c <__aeabi_fcmpge>
 80087fa:	1e03      	subs	r3, r0, #0
 80087fc:	d00c      	beq.n	8008818 <MIC_Print+0x204>
 80087fe:	4b25      	ldr	r3, [pc, #148]	@ (8008894 <MIC_Print+0x280>)
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	4931      	ldr	r1, [pc, #196]	@ (80088c8 <MIC_Print+0x2b4>)
 8008804:	1c18      	adds	r0, r3, #0
 8008806:	f7f7 fe93 	bl	8000530 <__aeabi_fcmplt>
 800880a:	1e03      	subs	r3, r0, #0
 800880c:	d004      	beq.n	8008818 <MIC_Print+0x204>
    SetDBLED(false, true, true);
 800880e:	2201      	movs	r2, #1
 8008810:	2101      	movs	r1, #1
 8008812:	2000      	movs	r0, #0
 8008814:	f004 f9fe 	bl	800cc14 <SetDBLED>
  }
  if(dBA >= 40 && dBA < 50){//blue
 8008818:	4b1e      	ldr	r3, [pc, #120]	@ (8008894 <MIC_Print+0x280>)
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	492c      	ldr	r1, [pc, #176]	@ (80088d0 <MIC_Print+0x2bc>)
 800881e:	1c18      	adds	r0, r3, #0
 8008820:	f7f7 fea4 	bl	800056c <__aeabi_fcmpge>
 8008824:	1e03      	subs	r3, r0, #0
 8008826:	d00c      	beq.n	8008842 <MIC_Print+0x22e>
 8008828:	4b1a      	ldr	r3, [pc, #104]	@ (8008894 <MIC_Print+0x280>)
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	4927      	ldr	r1, [pc, #156]	@ (80088cc <MIC_Print+0x2b8>)
 800882e:	1c18      	adds	r0, r3, #0
 8008830:	f7f7 fe7e 	bl	8000530 <__aeabi_fcmplt>
 8008834:	1e03      	subs	r3, r0, #0
 8008836:	d004      	beq.n	8008842 <MIC_Print+0x22e>
    SetDBLED(false, false, true);
 8008838:	2201      	movs	r2, #1
 800883a:	2100      	movs	r1, #0
 800883c:	2000      	movs	r0, #0
 800883e:	f004 f9e9 	bl	800cc14 <SetDBLED>
  }
  if(dBA >= 35 && dBA < 40){//purple
 8008842:	4b14      	ldr	r3, [pc, #80]	@ (8008894 <MIC_Print+0x280>)
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	4923      	ldr	r1, [pc, #140]	@ (80088d4 <MIC_Print+0x2c0>)
 8008848:	1c18      	adds	r0, r3, #0
 800884a:	f7f7 fe8f 	bl	800056c <__aeabi_fcmpge>
 800884e:	1e03      	subs	r3, r0, #0
 8008850:	d00c      	beq.n	800886c <MIC_Print+0x258>
 8008852:	4b10      	ldr	r3, [pc, #64]	@ (8008894 <MIC_Print+0x280>)
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	491e      	ldr	r1, [pc, #120]	@ (80088d0 <MIC_Print+0x2bc>)
 8008858:	1c18      	adds	r0, r3, #0
 800885a:	f7f7 fe69 	bl	8000530 <__aeabi_fcmplt>
 800885e:	1e03      	subs	r3, r0, #0
 8008860:	d004      	beq.n	800886c <MIC_Print+0x258>
    SetDBLED(true, false, true);
 8008862:	2201      	movs	r2, #1
 8008864:	2100      	movs	r1, #0
 8008866:	2001      	movs	r0, #1
 8008868:	f004 f9d4 	bl	800cc14 <SetDBLED>
  }
  if(dBA < 35){//off
 800886c:	4b09      	ldr	r3, [pc, #36]	@ (8008894 <MIC_Print+0x280>)
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	4918      	ldr	r1, [pc, #96]	@ (80088d4 <MIC_Print+0x2c0>)
 8008872:	1c18      	adds	r0, r3, #0
 8008874:	f7f7 fe5c 	bl	8000530 <__aeabi_fcmplt>
 8008878:	1e03      	subs	r3, r0, #0
 800887a:	d100      	bne.n	800887e <MIC_Print+0x26a>
    SetDBLED(false, false, false);
  }
}
 800887c:	e004      	b.n	8008888 <MIC_Print+0x274>
    SetDBLED(false, false, false);
 800887e:	2200      	movs	r2, #0
 8008880:	2100      	movs	r1, #0
 8008882:	2000      	movs	r0, #0
 8008884:	f004 f9c6 	bl	800cc14 <SetDBLED>
}
 8008888:	46c0      	nop			@ (mov r8, r8)
 800888a:	46bd      	mov	sp, r7
 800888c:	b004      	add	sp, #16
 800888e:	bdb0      	pop	{r4, r5, r7, pc}
 8008890:	20001014 	.word	0x20001014
 8008894:	20000fe0 	.word	0x20000fe0
 8008898:	2000101c 	.word	0x2000101c
 800889c:	20000fe4 	.word	0x20000fe4
 80088a0:	2000101d 	.word	0x2000101d
 80088a4:	20000084 	.word	0x20000084
 80088a8:	20001010 	.word	0x20001010
 80088ac:	20001018 	.word	0x20001018
 80088b0:	2000100c 	.word	0x2000100c
 80088b4:	080239fc 	.word	0x080239fc
 80088b8:	20000fd4 	.word	0x20000fd4
 80088bc:	42b40000 	.word	0x42b40000
 80088c0:	42a00000 	.word	0x42a00000
 80088c4:	428c0000 	.word	0x428c0000
 80088c8:	42700000 	.word	0x42700000
 80088cc:	42480000 	.word	0x42480000
 80088d0:	42200000 	.word	0x42200000
 80088d4:	420c0000 	.word	0x420c0000

080088d8 <MIC_TestMeasurementDone>:
    return true;
  }
  return false;
}

bool MIC_TestMeasurementDone(void) {
 80088d8:	b580      	push	{r7, lr}
 80088da:	b082      	sub	sp, #8
 80088dc:	af00      	add	r7, sp, #0
  bool Check;
  Info("DataReady in MIC_TestMeasurementDone: %d", DataReady);
 80088de:	4b11      	ldr	r3, [pc, #68]	@ (8008924 <MIC_TestMeasurementDone+0x4c>)
 80088e0:	781b      	ldrb	r3, [r3, #0]
 80088e2:	b2db      	uxtb	r3, r3
 80088e4:	4a10      	ldr	r2, [pc, #64]	@ (8008928 <MIC_TestMeasurementDone+0x50>)
 80088e6:	4911      	ldr	r1, [pc, #68]	@ (800892c <MIC_TestMeasurementDone+0x54>)
 80088e8:	2002      	movs	r0, #2
 80088ea:	f005 f967 	bl	800dbbc <CreateLine>
  if(DataReady) {
 80088ee:	4b0d      	ldr	r3, [pc, #52]	@ (8008924 <MIC_TestMeasurementDone+0x4c>)
 80088f0:	781b      	ldrb	r3, [r3, #0]
 80088f2:	b2db      	uxtb	r3, r3
 80088f4:	2b00      	cmp	r3, #0
 80088f6:	d010      	beq.n	800891a <MIC_TestMeasurementDone+0x42>
    Check = micEnabled;
 80088f8:	1dfb      	adds	r3, r7, #7
 80088fa:	4a0d      	ldr	r2, [pc, #52]	@ (8008930 <MIC_TestMeasurementDone+0x58>)
 80088fc:	7812      	ldrb	r2, [r2, #0]
 80088fe:	701a      	strb	r2, [r3, #0]
    Info("status micEnabled: %d",micEnabled );
 8008900:	4b0b      	ldr	r3, [pc, #44]	@ (8008930 <MIC_TestMeasurementDone+0x58>)
 8008902:	781b      	ldrb	r3, [r3, #0]
 8008904:	b2db      	uxtb	r3, r3
 8008906:	4a0b      	ldr	r2, [pc, #44]	@ (8008934 <MIC_TestMeasurementDone+0x5c>)
 8008908:	4908      	ldr	r1, [pc, #32]	@ (800892c <MIC_TestMeasurementDone+0x54>)
 800890a:	2002      	movs	r0, #2
 800890c:	f005 f956 	bl	800dbbc <CreateLine>
    ResetMICIndicator();
 8008910:	f004 fa5e 	bl	800cdd0 <ResetMICIndicator>
    return Check;
 8008914:	1dfb      	adds	r3, r7, #7
 8008916:	781b      	ldrb	r3, [r3, #0]
 8008918:	e000      	b.n	800891c <MIC_TestMeasurementDone+0x44>
  }
  return false;
 800891a:	2300      	movs	r3, #0
}
 800891c:	0018      	movs	r0, r3
 800891e:	46bd      	mov	sp, r7
 8008920:	b002      	add	sp, #8
 8008922:	bd80      	pop	{r7, pc}
 8008924:	2000134b 	.word	0x2000134b
 8008928:	08023a44 	.word	0x08023a44
 800892c:	08023a70 	.word	0x08023a70
 8008930:	2000134c 	.word	0x2000134c
 8008934:	08023a74 	.word	0x08023a74

08008938 <Mic_Upkeep>:

MicrophoneState Mic_Upkeep(){
 8008938:	b580      	push	{r7, lr}
 800893a:	b082      	sub	sp, #8
 800893c:	af00      	add	r7, sp, #0
  static MicrophoneState MicState = MIC_STATE_INIT;
  switch(MicState){
 800893e:	4b78      	ldr	r3, [pc, #480]	@ (8008b20 <Mic_Upkeep+0x1e8>)
 8008940:	781b      	ldrb	r3, [r3, #0]
 8008942:	2b03      	cmp	r3, #3
 8008944:	d100      	bne.n	8008948 <Mic_Upkeep+0x10>
 8008946:	e0b8      	b.n	8008aba <Mic_Upkeep+0x182>
 8008948:	dd00      	ble.n	800894c <Mic_Upkeep+0x14>
 800894a:	e0d3      	b.n	8008af4 <Mic_Upkeep+0x1bc>
 800894c:	2b02      	cmp	r3, #2
 800894e:	d037      	beq.n	80089c0 <Mic_Upkeep+0x88>
 8008950:	dd00      	ble.n	8008954 <Mic_Upkeep+0x1c>
 8008952:	e0cf      	b.n	8008af4 <Mic_Upkeep+0x1bc>
 8008954:	2b00      	cmp	r3, #0
 8008956:	d002      	beq.n	800895e <Mic_Upkeep+0x26>
 8008958:	2b01      	cmp	r3, #1
 800895a:	d014      	beq.n	8008986 <Mic_Upkeep+0x4e>
 800895c:	e0ca      	b.n	8008af4 <Mic_Upkeep+0x1bc>

  case MIC_STATE_INIT:
    //reset if necesarry
    if (!enableMicrophone(true)) {
 800895e:	2001      	movs	r0, #1
 8008960:	f003 fa9e 	bl	800bea0 <enableMicrophone>
 8008964:	0003      	movs	r3, r0
 8008966:	001a      	movs	r2, r3
 8008968:	2301      	movs	r3, #1
 800896a:	4053      	eors	r3, r2
 800896c:	b2db      	uxtb	r3, r3
 800896e:	2b00      	cmp	r3, #0
 8008970:	d005      	beq.n	800897e <Mic_Upkeep+0x46>
      errorHandler(__func__, __LINE__, __FILE__);
 8008972:	4a6c      	ldr	r2, [pc, #432]	@ (8008b24 <Mic_Upkeep+0x1ec>)
 8008974:	4b6c      	ldr	r3, [pc, #432]	@ (8008b28 <Mic_Upkeep+0x1f0>)
 8008976:	2180      	movs	r1, #128	@ 0x80
 8008978:	0018      	movs	r0, r3
 800897a:	f005 f9d7 	bl	800dd2c <errorHandler>
    }
    MicState = MIC_STATE_START_MEASUREMENT;
 800897e:	4b68      	ldr	r3, [pc, #416]	@ (8008b20 <Mic_Upkeep+0x1e8>)
 8008980:	2201      	movs	r2, #1
 8008982:	701a      	strb	r2, [r3, #0]
    break;
 8008984:	e0c5      	b.n	8008b12 <Mic_Upkeep+0x1da>

  case MIC_STATE_START_MEASUREMENT:
    if (micSettlingComplete() || DataReady) {
 8008986:	f003 fa67 	bl	800be58 <micSettlingComplete>
 800898a:	1e03      	subs	r3, r0, #0
 800898c:	d105      	bne.n	800899a <Mic_Upkeep+0x62>
 800898e:	4b67      	ldr	r3, [pc, #412]	@ (8008b2c <Mic_Upkeep+0x1f4>)
 8008990:	781b      	ldrb	r3, [r3, #0]
 8008992:	b2db      	uxtb	r3, r3
 8008994:	2b00      	cmp	r3, #0
 8008996:	d100      	bne.n	800899a <Mic_Upkeep+0x62>
 8008998:	e0b6      	b.n	8008b08 <Mic_Upkeep+0x1d0>
      if (!startSPLcalculation())
 800899a:	f003 faeb 	bl	800bf74 <startSPLcalculation>
 800899e:	0003      	movs	r3, r0
 80089a0:	001a      	movs	r2, r3
 80089a2:	2301      	movs	r3, #1
 80089a4:	4053      	eors	r3, r2
 80089a6:	b2db      	uxtb	r3, r3
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	d005      	beq.n	80089b8 <Mic_Upkeep+0x80>
      {
        errorHandler(__func__, __LINE__, __FILE__);
 80089ac:	4a5d      	ldr	r2, [pc, #372]	@ (8008b24 <Mic_Upkeep+0x1ec>)
 80089ae:	4b5e      	ldr	r3, [pc, #376]	@ (8008b28 <Mic_Upkeep+0x1f0>)
 80089b0:	2189      	movs	r1, #137	@ 0x89
 80089b2:	0018      	movs	r0, r3
 80089b4:	f005 f9ba 	bl	800dd2c <errorHandler>
      }
      MicState = MIC_STATE_WAIT_FOR_COMPLETION;
 80089b8:	4b59      	ldr	r3, [pc, #356]	@ (8008b20 <Mic_Upkeep+0x1e8>)
 80089ba:	2202      	movs	r2, #2
 80089bc:	701a      	strb	r2, [r3, #0]
    }
    break;
 80089be:	e0a3      	b.n	8008b08 <Mic_Upkeep+0x1d0>

  case MIC_STATE_WAIT_FOR_COMPLETION:
    if (getSoundData(&soundData, true, true)) {
 80089c0:	4b5b      	ldr	r3, [pc, #364]	@ (8008b30 <Mic_Upkeep+0x1f8>)
 80089c2:	2201      	movs	r2, #1
 80089c4:	2101      	movs	r1, #1
 80089c6:	0018      	movs	r0, r3
 80089c8:	f003 f928 	bl	800bc1c <getSoundData>
 80089cc:	1e03      	subs	r3, r0, #0
 80089ce:	d100      	bne.n	80089d2 <Mic_Upkeep+0x9a>
 80089d0:	e09c      	b.n	8008b0c <Mic_Upkeep+0x1d4>
      clearMaximumAmplitude();
 80089d2:	f003 fa21 	bl	800be18 <clearMaximumAmplitude>
      char dBbuffer[8];
      sprintf(dBbuffer, "%u.%1u", soundData.SPL_dBA_int, soundData.SPL_dBA_fr_1dp);
 80089d6:	4b56      	ldr	r3, [pc, #344]	@ (8008b30 <Mic_Upkeep+0x1f8>)
 80089d8:	781b      	ldrb	r3, [r3, #0]
 80089da:	001a      	movs	r2, r3
 80089dc:	4b54      	ldr	r3, [pc, #336]	@ (8008b30 <Mic_Upkeep+0x1f8>)
 80089de:	785b      	ldrb	r3, [r3, #1]
 80089e0:	4954      	ldr	r1, [pc, #336]	@ (8008b34 <Mic_Upkeep+0x1fc>)
 80089e2:	0038      	movs	r0, r7
 80089e4:	f016 fe3e 	bl	801f664 <siprintf>
      sprintf(mPabuffer, "%u.%02u", soundData.peak_amp_mPa_int, soundData.peak_amp_mPa_fr_2dp);
 80089e8:	4b51      	ldr	r3, [pc, #324]	@ (8008b30 <Mic_Upkeep+0x1f8>)
 80089ea:	89db      	ldrh	r3, [r3, #14]
 80089ec:	001a      	movs	r2, r3
 80089ee:	4b50      	ldr	r3, [pc, #320]	@ (8008b30 <Mic_Upkeep+0x1f8>)
 80089f0:	7c1b      	ldrb	r3, [r3, #16]
 80089f2:	4951      	ldr	r1, [pc, #324]	@ (8008b38 <Mic_Upkeep+0x200>)
 80089f4:	4851      	ldr	r0, [pc, #324]	@ (8008b3c <Mic_Upkeep+0x204>)
 80089f6:	f016 fe35 	bl	801f664 <siprintf>
      dBValue = atof(dBbuffer);
 80089fa:	003b      	movs	r3, r7
 80089fc:	0018      	movs	r0, r3
 80089fe:	f015 f9e1 	bl	801ddc4 <atof>
 8008a02:	0002      	movs	r2, r0
 8008a04:	000b      	movs	r3, r1
 8008a06:	0010      	movs	r0, r2
 8008a08:	0019      	movs	r1, r3
 8008a0a:	f7fa fd73 	bl	80034f4 <__aeabi_d2f>
 8008a0e:	1c02      	adds	r2, r0, #0
 8008a10:	4b4b      	ldr	r3, [pc, #300]	@ (8008b40 <Mic_Upkeep+0x208>)
 8008a12:	601a      	str	r2, [r3, #0]
      dBValue = ((int)(dBValue * 100 + .5) / 100.0);
 8008a14:	4b4a      	ldr	r3, [pc, #296]	@ (8008b40 <Mic_Upkeep+0x208>)
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	494a      	ldr	r1, [pc, #296]	@ (8008b44 <Mic_Upkeep+0x20c>)
 8008a1a:	1c18      	adds	r0, r3, #0
 8008a1c:	f7f8 fac0 	bl	8000fa0 <__aeabi_fmul>
 8008a20:	1c03      	adds	r3, r0, #0
 8008a22:	1c18      	adds	r0, r3, #0
 8008a24:	f7fa fd1e 	bl	8003464 <__aeabi_f2d>
 8008a28:	2200      	movs	r2, #0
 8008a2a:	4b47      	ldr	r3, [pc, #284]	@ (8008b48 <Mic_Upkeep+0x210>)
 8008a2c:	f7f8 fe5e 	bl	80016ec <__aeabi_dadd>
 8008a30:	0002      	movs	r2, r0
 8008a32:	000b      	movs	r3, r1
 8008a34:	0010      	movs	r0, r2
 8008a36:	0019      	movs	r1, r3
 8008a38:	f7fa fc86 	bl	8003348 <__aeabi_d2iz>
 8008a3c:	0003      	movs	r3, r0
 8008a3e:	0018      	movs	r0, r3
 8008a40:	f7fa fcbe 	bl	80033c0 <__aeabi_i2d>
 8008a44:	2200      	movs	r2, #0
 8008a46:	4b41      	ldr	r3, [pc, #260]	@ (8008b4c <Mic_Upkeep+0x214>)
 8008a48:	f7f9 f9b4 	bl	8001db4 <__aeabi_ddiv>
 8008a4c:	0002      	movs	r2, r0
 8008a4e:	000b      	movs	r3, r1
 8008a50:	0010      	movs	r0, r2
 8008a52:	0019      	movs	r1, r3
 8008a54:	f7fa fd4e 	bl	80034f4 <__aeabi_d2f>
 8008a58:	1c02      	adds	r2, r0, #0
 8008a5a:	4b39      	ldr	r3, [pc, #228]	@ (8008b40 <Mic_Upkeep+0x208>)
 8008a5c:	601a      	str	r2, [r3, #0]
      MIC_Print();
 8008a5e:	f7ff fdd9 	bl	8008614 <MIC_Print>
      if (!startSPLcalculation()) {
 8008a62:	f003 fa87 	bl	800bf74 <startSPLcalculation>
 8008a66:	0003      	movs	r3, r0
 8008a68:	001a      	movs	r2, r3
 8008a6a:	2301      	movs	r3, #1
 8008a6c:	4053      	eors	r3, r2
 8008a6e:	b2db      	uxtb	r3, r3
 8008a70:	2b00      	cmp	r3, #0
 8008a72:	d005      	beq.n	8008a80 <Mic_Upkeep+0x148>
        errorHandler(__func__, __LINE__, __FILE__);
 8008a74:	4a2b      	ldr	r2, [pc, #172]	@ (8008b24 <Mic_Upkeep+0x1ec>)
 8008a76:	4b2c      	ldr	r3, [pc, #176]	@ (8008b28 <Mic_Upkeep+0x1f0>)
 8008a78:	2199      	movs	r1, #153	@ 0x99
 8008a7a:	0018      	movs	r0, r3
 8008a7c:	f005 f956 	bl	800dd2c <errorHandler>
      }
      if (!enableMicrophone(false)) {
 8008a80:	2000      	movs	r0, #0
 8008a82:	f003 fa0d 	bl	800bea0 <enableMicrophone>
 8008a86:	0003      	movs	r3, r0
 8008a88:	001a      	movs	r2, r3
 8008a8a:	2301      	movs	r3, #1
 8008a8c:	4053      	eors	r3, r2
 8008a8e:	b2db      	uxtb	r3, r3
 8008a90:	2b00      	cmp	r3, #0
 8008a92:	d005      	beq.n	8008aa0 <Mic_Upkeep+0x168>
        errorHandler(__func__, __LINE__, __FILE__);
 8008a94:	4a23      	ldr	r2, [pc, #140]	@ (8008b24 <Mic_Upkeep+0x1ec>)
 8008a96:	4b24      	ldr	r3, [pc, #144]	@ (8008b28 <Mic_Upkeep+0x1f0>)
 8008a98:	219c      	movs	r1, #156	@ 0x9c
 8008a9a:	0018      	movs	r0, r3
 8008a9c:	f005 f946 	bl	800dd2c <errorHandler>
      }
      MICTimeStamp = HAL_GetTick() + 755;  // about every second
 8008aa0:	f005 fce2 	bl	800e468 <HAL_GetTick>
 8008aa4:	0003      	movs	r3, r0
 8008aa6:	4a2a      	ldr	r2, [pc, #168]	@ (8008b50 <Mic_Upkeep+0x218>)
 8008aa8:	189a      	adds	r2, r3, r2
 8008aaa:	4b2a      	ldr	r3, [pc, #168]	@ (8008b54 <Mic_Upkeep+0x21c>)
 8008aac:	601a      	str	r2, [r3, #0]
      MicState = MIC_STATE_WAIT;
 8008aae:	4b1c      	ldr	r3, [pc, #112]	@ (8008b20 <Mic_Upkeep+0x1e8>)
 8008ab0:	2203      	movs	r2, #3
 8008ab2:	701a      	strb	r2, [r3, #0]
      ResetMICIndicator();
 8008ab4:	f004 f98c 	bl	800cdd0 <ResetMICIndicator>
    }
    break;
 8008ab8:	e028      	b.n	8008b0c <Mic_Upkeep+0x1d4>

  case MIC_STATE_WAIT:
    if(TimestampIsReached(MICTimeStamp)){
 8008aba:	4b26      	ldr	r3, [pc, #152]	@ (8008b54 <Mic_Upkeep+0x21c>)
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	0018      	movs	r0, r3
 8008ac0:	f005 f826 	bl	800db10 <TimestampIsReached>
 8008ac4:	1e03      	subs	r3, r0, #0
 8008ac6:	d023      	beq.n	8008b10 <Mic_Upkeep+0x1d8>
      if (!enableMicrophone(true)) {
 8008ac8:	2001      	movs	r0, #1
 8008aca:	f003 f9e9 	bl	800bea0 <enableMicrophone>
 8008ace:	0003      	movs	r3, r0
 8008ad0:	001a      	movs	r2, r3
 8008ad2:	2301      	movs	r3, #1
 8008ad4:	4053      	eors	r3, r2
 8008ad6:	b2db      	uxtb	r3, r3
 8008ad8:	2b00      	cmp	r3, #0
 8008ada:	d005      	beq.n	8008ae8 <Mic_Upkeep+0x1b0>
        errorHandler(__func__, __LINE__, __FILE__);
 8008adc:	4a11      	ldr	r2, [pc, #68]	@ (8008b24 <Mic_Upkeep+0x1ec>)
 8008ade:	4b12      	ldr	r3, [pc, #72]	@ (8008b28 <Mic_Upkeep+0x1f0>)
 8008ae0:	21a7      	movs	r1, #167	@ 0xa7
 8008ae2:	0018      	movs	r0, r3
 8008ae4:	f005 f922 	bl	800dd2c <errorHandler>
      }
      MicState = MIC_STATE_START_MEASUREMENT;
 8008ae8:	4b0d      	ldr	r3, [pc, #52]	@ (8008b20 <Mic_Upkeep+0x1e8>)
 8008aea:	2201      	movs	r2, #1
 8008aec:	701a      	strb	r2, [r3, #0]
      SetMICIndicator();
 8008aee:	f004 f93d 	bl	800cd6c <SetMICIndicator>
    }
    break;
 8008af2:	e00d      	b.n	8008b10 <Mic_Upkeep+0x1d8>

  default:
    Debug("Unexpected occurrence happened");
 8008af4:	4a18      	ldr	r2, [pc, #96]	@ (8008b58 <Mic_Upkeep+0x220>)
 8008af6:	4b19      	ldr	r3, [pc, #100]	@ (8008b5c <Mic_Upkeep+0x224>)
 8008af8:	0019      	movs	r1, r3
 8008afa:	2003      	movs	r0, #3
 8008afc:	f005 f85e 	bl	800dbbc <CreateLine>
    MicState = MIC_STATE_INIT;
 8008b00:	4b07      	ldr	r3, [pc, #28]	@ (8008b20 <Mic_Upkeep+0x1e8>)
 8008b02:	2200      	movs	r2, #0
 8008b04:	701a      	strb	r2, [r3, #0]
    break;
 8008b06:	e004      	b.n	8008b12 <Mic_Upkeep+0x1da>
    break;
 8008b08:	46c0      	nop			@ (mov r8, r8)
 8008b0a:	e002      	b.n	8008b12 <Mic_Upkeep+0x1da>
    break;
 8008b0c:	46c0      	nop			@ (mov r8, r8)
 8008b0e:	e000      	b.n	8008b12 <Mic_Upkeep+0x1da>
    break;
 8008b10:	46c0      	nop			@ (mov r8, r8)
  }

  return MicState;
 8008b12:	4b03      	ldr	r3, [pc, #12]	@ (8008b20 <Mic_Upkeep+0x1e8>)
 8008b14:	781b      	ldrb	r3, [r3, #0]
}
 8008b16:	0018      	movs	r0, r3
 8008b18:	46bd      	mov	sp, r7
 8008b1a:	b002      	add	sp, #8
 8008b1c:	bd80      	pop	{r7, pc}
 8008b1e:	46c0      	nop			@ (mov r8, r8)
 8008b20:	20001036 	.word	0x20001036
 8008b24:	08023a8c 	.word	0x08023a8c
 8008b28:	08024918 	.word	0x08024918
 8008b2c:	2000134b 	.word	0x2000134b
 8008b30:	20001024 	.word	0x20001024
 8008b34:	08023aa8 	.word	0x08023aa8
 8008b38:	08023ab0 	.word	0x08023ab0
 8008b3c:	20000fd4 	.word	0x20000fd4
 8008b40:	20001014 	.word	0x20001014
 8008b44:	42c80000 	.word	0x42c80000
 8008b48:	3fe00000 	.word	0x3fe00000
 8008b4c:	40590000 	.word	0x40590000
 8008b50:	000002f3 	.word	0x000002f3
 8008b54:	20001020 	.word	0x20001020
 8008b58:	08023ab8 	.word	0x08023ab8
 8008b5c:	08023ad8 	.word	0x08023ad8

08008b60 <print>:

static char strbuf[512] = {0};

// Format a string for printing. Call this just like printf().
void print(const char* format, ...)
{
 8008b60:	b40f      	push	{r0, r1, r2, r3}
 8008b62:	b580      	push	{r7, lr}
 8008b64:	b082      	sub	sp, #8
 8008b66:	af00      	add	r7, sp, #0
    va_list argptr;
    va_start(argptr, format);
 8008b68:	2314      	movs	r3, #20
 8008b6a:	18fb      	adds	r3, r7, r3
 8008b6c:	607b      	str	r3, [r7, #4]
    vsnprintf(strbuf, sizeof strbuf, format, argptr);
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	693a      	ldr	r2, [r7, #16]
 8008b72:	2180      	movs	r1, #128	@ 0x80
 8008b74:	0089      	lsls	r1, r1, #2
 8008b76:	480a      	ldr	r0, [pc, #40]	@ (8008ba0 <print+0x40>)
 8008b78:	f016 fe0c 	bl	801f794 <vsniprintf>
    va_end(argptr);
    printString(strbuf, strlen(strbuf));
 8008b7c:	4b08      	ldr	r3, [pc, #32]	@ (8008ba0 <print+0x40>)
 8008b7e:	0018      	movs	r0, r3
 8008b80:	f7f7 faf4 	bl	800016c <strlen>
 8008b84:	0003      	movs	r3, r0
 8008b86:	b29a      	uxth	r2, r3
 8008b88:	4b05      	ldr	r3, [pc, #20]	@ (8008ba0 <print+0x40>)
 8008b8a:	0011      	movs	r1, r2
 8008b8c:	0018      	movs	r0, r3
 8008b8e:	f7ff f99f 	bl	8007ed0 <printString>
}
 8008b92:	46c0      	nop			@ (mov r8, r8)
 8008b94:	46bd      	mov	sp, r7
 8008b96:	b002      	add	sp, #8
 8008b98:	bc80      	pop	{r7}
 8008b9a:	bc08      	pop	{r3}
 8008b9c:	b004      	add	sp, #16
 8008b9e:	4718      	bx	r3
 8008ba0:	20001038 	.word	0x20001038

08008ba4 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8008ba4:	b580      	push	{r7, lr}
 8008ba6:	b086      	sub	sp, #24
 8008ba8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8008baa:	1d3b      	adds	r3, r7, #4
 8008bac:	0018      	movs	r0, r3
 8008bae:	2314      	movs	r3, #20
 8008bb0:	001a      	movs	r2, r3
 8008bb2:	2100      	movs	r1, #0
 8008bb4:	f016 fe9a 	bl	801f8ec <memset>
  RTC_DateTypeDef sDate = {0};
 8008bb8:	003b      	movs	r3, r7
 8008bba:	2200      	movs	r2, #0
 8008bbc:	601a      	str	r2, [r3, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8008bbe:	4b2e      	ldr	r3, [pc, #184]	@ (8008c78 <MX_RTC_Init+0xd4>)
 8008bc0:	4a2e      	ldr	r2, [pc, #184]	@ (8008c7c <MX_RTC_Init+0xd8>)
 8008bc2:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8008bc4:	4b2c      	ldr	r3, [pc, #176]	@ (8008c78 <MX_RTC_Init+0xd4>)
 8008bc6:	2200      	movs	r2, #0
 8008bc8:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8008bca:	4b2b      	ldr	r3, [pc, #172]	@ (8008c78 <MX_RTC_Init+0xd4>)
 8008bcc:	227f      	movs	r2, #127	@ 0x7f
 8008bce:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8008bd0:	4b29      	ldr	r3, [pc, #164]	@ (8008c78 <MX_RTC_Init+0xd4>)
 8008bd2:	22ff      	movs	r2, #255	@ 0xff
 8008bd4:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8008bd6:	4b28      	ldr	r3, [pc, #160]	@ (8008c78 <MX_RTC_Init+0xd4>)
 8008bd8:	2200      	movs	r2, #0
 8008bda:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8008bdc:	4b26      	ldr	r3, [pc, #152]	@ (8008c78 <MX_RTC_Init+0xd4>)
 8008bde:	2200      	movs	r2, #0
 8008be0:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8008be2:	4b25      	ldr	r3, [pc, #148]	@ (8008c78 <MX_RTC_Init+0xd4>)
 8008be4:	2200      	movs	r2, #0
 8008be6:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8008be8:	4b23      	ldr	r3, [pc, #140]	@ (8008c78 <MX_RTC_Init+0xd4>)
 8008bea:	2200      	movs	r2, #0
 8008bec:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8008bee:	4b22      	ldr	r3, [pc, #136]	@ (8008c78 <MX_RTC_Init+0xd4>)
 8008bf0:	0018      	movs	r0, r3
 8008bf2:	f00c fca7 	bl	8015544 <HAL_RTC_Init>
 8008bf6:	1e03      	subs	r3, r0, #0
 8008bf8:	d001      	beq.n	8008bfe <MX_RTC_Init+0x5a>
  {
    Error_Handler();
 8008bfa:	f7ff fa35 	bl	8008068 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 13;
 8008bfe:	1d3b      	adds	r3, r7, #4
 8008c00:	220d      	movs	r2, #13
 8008c02:	701a      	strb	r2, [r3, #0]
  sTime.Minutes = 0;
 8008c04:	1d3b      	adds	r3, r7, #4
 8008c06:	2200      	movs	r2, #0
 8008c08:	705a      	strb	r2, [r3, #1]
  sTime.Seconds = 0;
 8008c0a:	1d3b      	adds	r3, r7, #4
 8008c0c:	2200      	movs	r2, #0
 8008c0e:	709a      	strb	r2, [r3, #2]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8008c10:	1d3b      	adds	r3, r7, #4
 8008c12:	2200      	movs	r2, #0
 8008c14:	60da      	str	r2, [r3, #12]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8008c16:	1d3b      	adds	r3, r7, #4
 8008c18:	2200      	movs	r2, #0
 8008c1a:	611a      	str	r2, [r3, #16]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8008c1c:	1d39      	adds	r1, r7, #4
 8008c1e:	4b16      	ldr	r3, [pc, #88]	@ (8008c78 <MX_RTC_Init+0xd4>)
 8008c20:	2200      	movs	r2, #0
 8008c22:	0018      	movs	r0, r3
 8008c24:	f00c fd2a 	bl	801567c <HAL_RTC_SetTime>
 8008c28:	1e03      	subs	r3, r0, #0
 8008c2a:	d001      	beq.n	8008c30 <MX_RTC_Init+0x8c>
  {
    Error_Handler();
 8008c2c:	f7ff fa1c 	bl	8008068 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_SATURDAY;
 8008c30:	003b      	movs	r3, r7
 8008c32:	2206      	movs	r2, #6
 8008c34:	701a      	strb	r2, [r3, #0]
  sDate.Month = RTC_MONTH_NOVEMBER;
 8008c36:	003b      	movs	r3, r7
 8008c38:	2211      	movs	r2, #17
 8008c3a:	705a      	strb	r2, [r3, #1]
  sDate.Date = 23;
 8008c3c:	003b      	movs	r3, r7
 8008c3e:	2217      	movs	r2, #23
 8008c40:	709a      	strb	r2, [r3, #2]
  sDate.Year = 24;
 8008c42:	003b      	movs	r3, r7
 8008c44:	2218      	movs	r2, #24
 8008c46:	70da      	strb	r2, [r3, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8008c48:	0039      	movs	r1, r7
 8008c4a:	4b0b      	ldr	r3, [pc, #44]	@ (8008c78 <MX_RTC_Init+0xd4>)
 8008c4c:	2200      	movs	r2, #0
 8008c4e:	0018      	movs	r0, r3
 8008c50:	f00c fe1c 	bl	801588c <HAL_RTC_SetDate>
 8008c54:	1e03      	subs	r3, r0, #0
 8008c56:	d001      	beq.n	8008c5c <MX_RTC_Init+0xb8>
  {
    Error_Handler();
 8008c58:	f7ff fa06 	bl	8008068 <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 8008c5c:	4b06      	ldr	r3, [pc, #24]	@ (8008c78 <MX_RTC_Init+0xd4>)
 8008c5e:	2200      	movs	r2, #0
 8008c60:	2100      	movs	r1, #0
 8008c62:	0018      	movs	r0, r3
 8008c64:	f00c ffcc 	bl	8015c00 <HAL_RTCEx_SetWakeUpTimer_IT>
 8008c68:	1e03      	subs	r3, r0, #0
 8008c6a:	d001      	beq.n	8008c70 <MX_RTC_Init+0xcc>
  {
    Error_Handler();
 8008c6c:	f7ff f9fc 	bl	8008068 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8008c70:	46c0      	nop			@ (mov r8, r8)
 8008c72:	46bd      	mov	sp, r7
 8008c74:	b006      	add	sp, #24
 8008c76:	bd80      	pop	{r7, pc}
 8008c78:	20001238 	.word	0x20001238
 8008c7c:	40002800 	.word	0x40002800

08008c80 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8008c80:	b580      	push	{r7, lr}
 8008c82:	b082      	sub	sp, #8
 8008c84:	af00      	add	r7, sp, #0
 8008c86:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	4a0a      	ldr	r2, [pc, #40]	@ (8008cb8 <HAL_RTC_MspInit+0x38>)
 8008c8e:	4293      	cmp	r3, r2
 8008c90:	d10e      	bne.n	8008cb0 <HAL_RTC_MspInit+0x30>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8008c92:	4b0a      	ldr	r3, [pc, #40]	@ (8008cbc <HAL_RTC_MspInit+0x3c>)
 8008c94:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8008c96:	4b09      	ldr	r3, [pc, #36]	@ (8008cbc <HAL_RTC_MspInit+0x3c>)
 8008c98:	2180      	movs	r1, #128	@ 0x80
 8008c9a:	02c9      	lsls	r1, r1, #11
 8008c9c:	430a      	orrs	r2, r1
 8008c9e:	651a      	str	r2, [r3, #80]	@ 0x50

    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_IRQn, 0, 0);
 8008ca0:	2200      	movs	r2, #0
 8008ca2:	2100      	movs	r1, #0
 8008ca4:	2002      	movs	r0, #2
 8008ca6:	f006 f883 	bl	800edb0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_IRQn);
 8008caa:	2002      	movs	r0, #2
 8008cac:	f006 f895 	bl	800edda <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8008cb0:	46c0      	nop			@ (mov r8, r8)
 8008cb2:	46bd      	mov	sp, r7
 8008cb4:	b002      	add	sp, #8
 8008cb6:	bd80      	pop	{r7, pc}
 8008cb8:	40002800 	.word	0x40002800
 8008cbc:	40021000 	.word	0x40021000

08008cc0 <setsen5xReadTimer>:
uint8_t sen5xSamples = 0;
uint8_t sen5xErrors = 0;
sen5x_states PMsamplesState = LIGHT_OUT;
SEN5X_DateTypeDef sen5x_data;

void setsen5xReadTimer(uint32_t delayms) {
 8008cc0:	b580      	push	{r7, lr}
 8008cc2:	b082      	sub	sp, #8
 8008cc4:	af00      	add	r7, sp, #0
 8008cc6:	6078      	str	r0, [r7, #4]
  sen5xReadTimer = HAL_GetTick() + delayms;
 8008cc8:	f005 fbce 	bl	800e468 <HAL_GetTick>
 8008ccc:	0002      	movs	r2, r0
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	18d2      	adds	r2, r2, r3
 8008cd2:	4b03      	ldr	r3, [pc, #12]	@ (8008ce0 <setsen5xReadTimer+0x20>)
 8008cd4:	601a      	str	r2, [r3, #0]
}
 8008cd6:	46c0      	nop			@ (mov r8, r8)
 8008cd8:	46bd      	mov	sp, r7
 8008cda:	b002      	add	sp, #8
 8008cdc:	bd80      	pop	{r7, pc}
 8008cde:	46c0      	nop			@ (mov r8, r8)
 8008ce0:	20001260 	.word	0x20001260

08008ce4 <sen5x_enable>:

bool sen5x_enable(uint32_t sleepTime) {
 8008ce4:	b580      	push	{r7, lr}
 8008ce6:	b082      	sub	sp, #8
 8008ce8:	af00      	add	r7, sp, #0
 8008cea:	6078      	str	r0, [r7, #4]
  if (IsPMSensorEnabled()) {
 8008cec:	f7ff f9f2 	bl	80080d4 <IsPMSensorEnabled>
 8008cf0:	1e03      	subs	r3, r0, #0
 8008cf2:	d02c      	beq.n	8008d4e <sen5x_enable+0x6a>
    Debug("sen5x measurement is enabled");
 8008cf4:	4a1d      	ldr	r2, [pc, #116]	@ (8008d6c <sen5x_enable+0x88>)
 8008cf6:	4b1e      	ldr	r3, [pc, #120]	@ (8008d70 <sen5x_enable+0x8c>)
 8008cf8:	0019      	movs	r1, r3
 8008cfa:	2003      	movs	r0, #3
 8008cfc:	f004 ff5e 	bl	800dbbc <CreateLine>
    sen5x_Enable = !sen5x_Enable;
 8008d00:	4b1c      	ldr	r3, [pc, #112]	@ (8008d74 <sen5x_enable+0x90>)
 8008d02:	781b      	ldrb	r3, [r3, #0]
 8008d04:	1e5a      	subs	r2, r3, #1
 8008d06:	4193      	sbcs	r3, r2
 8008d08:	b2db      	uxtb	r3, r3
 8008d0a:	2201      	movs	r2, #1
 8008d0c:	4053      	eors	r3, r2
 8008d0e:	b2db      	uxtb	r3, r3
 8008d10:	1c1a      	adds	r2, r3, #0
 8008d12:	2301      	movs	r3, #1
 8008d14:	4013      	ands	r3, r2
 8008d16:	b2da      	uxtb	r2, r3
 8008d18:	4b16      	ldr	r3, [pc, #88]	@ (8008d74 <sen5x_enable+0x90>)
 8008d1a:	701a      	strb	r2, [r3, #0]
    if (sen5x_Enable) {
 8008d1c:	4b15      	ldr	r3, [pc, #84]	@ (8008d74 <sen5x_enable+0x90>)
 8008d1e:	781b      	ldrb	r3, [r3, #0]
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	d003      	beq.n	8008d2c <sen5x_enable+0x48>
      setsen5xReadTimer(0);
 8008d24:	2000      	movs	r0, #0
 8008d26:	f7ff ffcb 	bl	8008cc0 <setsen5xReadTimer>
 8008d2a:	e016      	b.n	8008d5a <sen5x_enable+0x76>
    }
    else {
      Info("This cycle the sen5x is disabled");
 8008d2c:	4a12      	ldr	r2, [pc, #72]	@ (8008d78 <sen5x_enable+0x94>)
 8008d2e:	4b13      	ldr	r3, [pc, #76]	@ (8008d7c <sen5x_enable+0x98>)
 8008d30:	0019      	movs	r1, r3
 8008d32:	2002      	movs	r0, #2
 8008d34:	f004 ff42 	bl	800dbbc <CreateLine>
      setsen5xReadTimer(HAL_GetTick() +( 3 * (sleepTime*1000))); //The ticker starts after 3*880, effective this turn the sen5x device will not start
 8008d38:	f005 fb96 	bl	800e468 <HAL_GetTick>
 8008d3c:	0002      	movs	r2, r0
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	490f      	ldr	r1, [pc, #60]	@ (8008d80 <sen5x_enable+0x9c>)
 8008d42:	434b      	muls	r3, r1
 8008d44:	18d3      	adds	r3, r2, r3
 8008d46:	0018      	movs	r0, r3
 8008d48:	f7ff ffba 	bl	8008cc0 <setsen5xReadTimer>
 8008d4c:	e005      	b.n	8008d5a <sen5x_enable+0x76>
    }
  }
  else {
    Info("sen5x measurement is disabled");
 8008d4e:	4a0d      	ldr	r2, [pc, #52]	@ (8008d84 <sen5x_enable+0xa0>)
 8008d50:	4b0a      	ldr	r3, [pc, #40]	@ (8008d7c <sen5x_enable+0x98>)
 8008d52:	0019      	movs	r1, r3
 8008d54:	2002      	movs	r0, #2
 8008d56:	f004 ff31 	bl	800dbbc <CreateLine>
  }
  PMsamplesState = LIGHT_OUT; // just to be sure if USB_power is disconnected during measurement cycle
 8008d5a:	4b0b      	ldr	r3, [pc, #44]	@ (8008d88 <sen5x_enable+0xa4>)
 8008d5c:	2201      	movs	r2, #1
 8008d5e:	701a      	strb	r2, [r3, #0]
  return sen5x_Enable;
 8008d60:	4b04      	ldr	r3, [pc, #16]	@ (8008d74 <sen5x_enable+0x90>)
 8008d62:	781b      	ldrb	r3, [r3, #0]
}
 8008d64:	0018      	movs	r0, r3
 8008d66:	46bd      	mov	sp, r7
 8008d68:	b002      	add	sp, #8
 8008d6a:	bd80      	pop	{r7, pc}
 8008d6c:	08023adc 	.word	0x08023adc
 8008d70:	08023afc 	.word	0x08023afc
 8008d74:	2000125e 	.word	0x2000125e
 8008d78:	08023b00 	.word	0x08023b00
 8008d7c:	08023b24 	.word	0x08023b24
 8008d80:	00000bb8 	.word	0x00000bb8
 8008d84:	08023b28 	.word	0x08023b28
 8008d88:	20000085 	.word	0x20000085

08008d8c <sen5x_Power_On>:

void sen5x_Power_On(void) {
 8008d8c:	b580      	push	{r7, lr}
 8008d8e:	af00      	add	r7, sp, #0
  Debug("executing sen5x_Power_On");
 8008d90:	4a0a      	ldr	r2, [pc, #40]	@ (8008dbc <sen5x_Power_On+0x30>)
 8008d92:	4b0b      	ldr	r3, [pc, #44]	@ (8008dc0 <sen5x_Power_On+0x34>)
 8008d94:	0019      	movs	r1, r3
 8008d96:	2003      	movs	r0, #3
 8008d98:	f004 ff10 	bl	800dbbc <CreateLine>
  HAL_GPIO_WritePin(Boost_Enable_GPIO_Port, Boost_Enable_Pin, GPIO_PIN_SET);
 8008d9c:	2380      	movs	r3, #128	@ 0x80
 8008d9e:	015b      	lsls	r3, r3, #5
 8008da0:	4808      	ldr	r0, [pc, #32]	@ (8008dc4 <sen5x_Power_On+0x38>)
 8008da2:	2201      	movs	r2, #1
 8008da4:	0019      	movs	r1, r3
 8008da6:	f006 fdf0 	bl	800f98a <HAL_GPIO_WritePin>
  sen5x_On = true;
 8008daa:	4b07      	ldr	r3, [pc, #28]	@ (8008dc8 <sen5x_Power_On+0x3c>)
 8008dac:	2201      	movs	r2, #1
 8008dae:	701a      	strb	r2, [r3, #0]
  HAL_Delay(55);
 8008db0:	2037      	movs	r0, #55	@ 0x37
 8008db2:	f005 fb63 	bl	800e47c <HAL_Delay>
  return;
 8008db6:	46c0      	nop			@ (mov r8, r8)
}
 8008db8:	46bd      	mov	sp, r7
 8008dba:	bd80      	pop	{r7, pc}
 8008dbc:	08023b48 	.word	0x08023b48
 8008dc0:	08023afc 	.word	0x08023afc
 8008dc4:	50000800 	.word	0x50000800
 8008dc8:	2000125d 	.word	0x2000125d

08008dcc <sen5x_Power_Off>:

void sen5x_Power_Off(void) {
 8008dcc:	b580      	push	{r7, lr}
 8008dce:	af00      	add	r7, sp, #0
  Debug("executing sen5x_Power_Off");
 8008dd0:	4a09      	ldr	r2, [pc, #36]	@ (8008df8 <sen5x_Power_Off+0x2c>)
 8008dd2:	4b0a      	ldr	r3, [pc, #40]	@ (8008dfc <sen5x_Power_Off+0x30>)
 8008dd4:	0019      	movs	r1, r3
 8008dd6:	2003      	movs	r0, #3
 8008dd8:	f004 fef0 	bl	800dbbc <CreateLine>
  HAL_GPIO_WritePin(Boost_Enable_GPIO_Port, Boost_Enable_Pin, GPIO_PIN_RESET);
 8008ddc:	2380      	movs	r3, #128	@ 0x80
 8008dde:	015b      	lsls	r3, r3, #5
 8008de0:	4807      	ldr	r0, [pc, #28]	@ (8008e00 <sen5x_Power_Off+0x34>)
 8008de2:	2200      	movs	r2, #0
 8008de4:	0019      	movs	r1, r3
 8008de6:	f006 fdd0 	bl	800f98a <HAL_GPIO_WritePin>
  sen5x_On = false;
 8008dea:	4b06      	ldr	r3, [pc, #24]	@ (8008e04 <sen5x_Power_Off+0x38>)
 8008dec:	2200      	movs	r2, #0
 8008dee:	701a      	strb	r2, [r3, #0]
  return;
 8008df0:	46c0      	nop			@ (mov r8, r8)
}
 8008df2:	46bd      	mov	sp, r7
 8008df4:	bd80      	pop	{r7, pc}
 8008df6:	46c0      	nop			@ (mov r8, r8)
 8008df8:	08023b64 	.word	0x08023b64
 8008dfc:	08023afc 	.word	0x08023afc
 8008e00:	50000800 	.word	0x50000800
 8008e04:	2000125d 	.word	0x2000125d

08008e08 <reset_fanCleaningDone>:

void reset_fanCleaningDone(void) {
 8008e08:	b580      	push	{r7, lr}
 8008e0a:	af00      	add	r7, sp, #0
  fanCleaningDone = false;
 8008e0c:	4b02      	ldr	r3, [pc, #8]	@ (8008e18 <reset_fanCleaningDone+0x10>)
 8008e0e:	2200      	movs	r2, #0
 8008e10:	701a      	strb	r2, [r3, #0]
}
 8008e12:	46c0      	nop			@ (mov r8, r8)
 8008e14:	46bd      	mov	sp, r7
 8008e16:	bd80      	pop	{r7, pc}
 8008e18:	2000125c 	.word	0x2000125c

08008e1c <probe_sen5x>:

int16_t probe_sen5x(void) {
 8008e1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008e1e:	b09b      	sub	sp, #108	@ 0x6c
 8008e20:	af04      	add	r7, sp, #16
//  Debug("test for sen5x_device");
  int16_t error = 0;
 8008e22:	2456      	movs	r4, #86	@ 0x56
 8008e24:	193b      	adds	r3, r7, r4
 8008e26:	2200      	movs	r2, #0
 8008e28:	801a      	strh	r2, [r3, #0]
  unsigned char serial_number[32];
  uint8_t serial_number_size = 32;
 8008e2a:	2355      	movs	r3, #85	@ 0x55
 8008e2c:	18fb      	adds	r3, r7, r3
 8008e2e:	2220      	movs	r2, #32
 8008e30:	701a      	strb	r2, [r3, #0]
  unsigned char product_name[32];
  uint8_t product_name_size = 32;
 8008e32:	2354      	movs	r3, #84	@ 0x54
 8008e34:	18fb      	adds	r3, r7, r3
 8008e36:	2220      	movs	r2, #32
 8008e38:	701a      	strb	r2, [r3, #0]
  sen5x_Power_On();  // switch buck converter
 8008e3a:	f7ff ffa7 	bl	8008d8c <sen5x_Power_On>
  error = sen5x_device_reset();
 8008e3e:	0025      	movs	r5, r4
 8008e40:	193c      	adds	r4, r7, r4
 8008e42:	f001 f819 	bl	8009e78 <sen5x_device_reset>
 8008e46:	0003      	movs	r3, r0
 8008e48:	8023      	strh	r3, [r4, #0]
  if (error) {
 8008e4a:	002c      	movs	r4, r5
 8008e4c:	193b      	adds	r3, r7, r4
 8008e4e:	2200      	movs	r2, #0
 8008e50:	5e9b      	ldrsh	r3, [r3, r2]
 8008e52:	2b00      	cmp	r3, #0
 8008e54:	d00b      	beq.n	8008e6e <probe_sen5x+0x52>
      Error("Error executing sen5x_device_reset(): %i", error);
 8008e56:	193b      	adds	r3, r7, r4
 8008e58:	2200      	movs	r2, #0
 8008e5a:	5e9b      	ldrsh	r3, [r3, r2]
 8008e5c:	4a6d      	ldr	r2, [pc, #436]	@ (8009014 <probe_sen5x+0x1f8>)
 8008e5e:	496e      	ldr	r1, [pc, #440]	@ (8009018 <probe_sen5x+0x1fc>)
 8008e60:	2001      	movs	r0, #1
 8008e62:	f004 feab 	bl	800dbbc <CreateLine>
      return error;
 8008e66:	193b      	adds	r3, r7, r4
 8008e68:	2200      	movs	r2, #0
 8008e6a:	5e9b      	ldrsh	r3, [r3, r2]
 8008e6c:	e0ce      	b.n	800900c <probe_sen5x+0x1f0>
  }
  error = sen5x_get_serial_number(serial_number, serial_number_size);
 8008e6e:	2556      	movs	r5, #86	@ 0x56
 8008e70:	197c      	adds	r4, r7, r5
 8008e72:	2355      	movs	r3, #85	@ 0x55
 8008e74:	18fb      	adds	r3, r7, r3
 8008e76:	781a      	ldrb	r2, [r3, #0]
 8008e78:	232c      	movs	r3, #44	@ 0x2c
 8008e7a:	18fb      	adds	r3, r7, r3
 8008e7c:	0011      	movs	r1, r2
 8008e7e:	0018      	movs	r0, r3
 8008e80:	f000 fee6 	bl	8009c50 <sen5x_get_serial_number>
 8008e84:	0003      	movs	r3, r0
 8008e86:	8023      	strh	r3, [r4, #0]
  if (error) {
 8008e88:	197b      	adds	r3, r7, r5
 8008e8a:	2200      	movs	r2, #0
 8008e8c:	5e9b      	ldrsh	r3, [r3, r2]
 8008e8e:	2b00      	cmp	r3, #0
 8008e90:	d00b      	beq.n	8008eaa <probe_sen5x+0x8e>
      printf("Error executing sen5x_get_serial_number(): %i\r\n", error);
 8008e92:	197b      	adds	r3, r7, r5
 8008e94:	2200      	movs	r2, #0
 8008e96:	5e9a      	ldrsh	r2, [r3, r2]
 8008e98:	4b60      	ldr	r3, [pc, #384]	@ (800901c <probe_sen5x+0x200>)
 8008e9a:	0011      	movs	r1, r2
 8008e9c:	0018      	movs	r0, r3
 8008e9e:	f016 fb71 	bl	801f584 <iprintf>
      return error;
 8008ea2:	197b      	adds	r3, r7, r5
 8008ea4:	2200      	movs	r2, #0
 8008ea6:	5e9b      	ldrsh	r3, [r3, r2]
 8008ea8:	e0b0      	b.n	800900c <probe_sen5x+0x1f0>
  } else {
      printf("Serial number: %s\r\n", serial_number);
 8008eaa:	232c      	movs	r3, #44	@ 0x2c
 8008eac:	18fa      	adds	r2, r7, r3
 8008eae:	4b5c      	ldr	r3, [pc, #368]	@ (8009020 <probe_sen5x+0x204>)
 8008eb0:	0011      	movs	r1, r2
 8008eb2:	0018      	movs	r0, r3
 8008eb4:	f016 fb66 	bl	801f584 <iprintf>
  }
  error = sen5x_get_product_name(product_name, product_name_size);
 8008eb8:	2556      	movs	r5, #86	@ 0x56
 8008eba:	197c      	adds	r4, r7, r5
 8008ebc:	2354      	movs	r3, #84	@ 0x54
 8008ebe:	18fb      	adds	r3, r7, r3
 8008ec0:	781a      	ldrb	r2, [r3, #0]
 8008ec2:	230c      	movs	r3, #12
 8008ec4:	18fb      	adds	r3, r7, r3
 8008ec6:	0011      	movs	r1, r2
 8008ec8:	0018      	movs	r0, r3
 8008eca:	f000 fe6b 	bl	8009ba4 <sen5x_get_product_name>
 8008ece:	0003      	movs	r3, r0
 8008ed0:	8023      	strh	r3, [r4, #0]
  if (error) {
 8008ed2:	197b      	adds	r3, r7, r5
 8008ed4:	2200      	movs	r2, #0
 8008ed6:	5e9b      	ldrsh	r3, [r3, r2]
 8008ed8:	2b00      	cmp	r3, #0
 8008eda:	d00b      	beq.n	8008ef4 <probe_sen5x+0xd8>
      printf("Error executing sen5x_get_product_name(): %i\r\n", error);
 8008edc:	197b      	adds	r3, r7, r5
 8008ede:	2200      	movs	r2, #0
 8008ee0:	5e9a      	ldrsh	r2, [r3, r2]
 8008ee2:	4b50      	ldr	r3, [pc, #320]	@ (8009024 <probe_sen5x+0x208>)
 8008ee4:	0011      	movs	r1, r2
 8008ee6:	0018      	movs	r0, r3
 8008ee8:	f016 fb4c 	bl	801f584 <iprintf>
      return error;
 8008eec:	197b      	adds	r3, r7, r5
 8008eee:	2200      	movs	r2, #0
 8008ef0:	5e9b      	ldrsh	r3, [r3, r2]
 8008ef2:	e08b      	b.n	800900c <probe_sen5x+0x1f0>
  } else {
      printf("Product name: %s\r\n", product_name);
 8008ef4:	230c      	movs	r3, #12
 8008ef6:	18fa      	adds	r2, r7, r3
 8008ef8:	4b4b      	ldr	r3, [pc, #300]	@ (8009028 <probe_sen5x+0x20c>)
 8008efa:	0011      	movs	r1, r2
 8008efc:	0018      	movs	r0, r3
 8008efe:	f016 fb41 	bl	801f584 <iprintf>
  bool firmware_debug;
  uint8_t hardware_major;
  uint8_t hardware_minor;
  uint8_t protocol_major;
  uint8_t protocol_minor;
  error = sen5x_get_version(&firmware_major, &firmware_minor, &firmware_debug,
 8008f02:	2656      	movs	r6, #86	@ 0x56
 8008f04:	19bc      	adds	r4, r7, r6
 8008f06:	2308      	movs	r3, #8
 8008f08:	18fd      	adds	r5, r7, r3
 8008f0a:	2309      	movs	r3, #9
 8008f0c:	18fa      	adds	r2, r7, r3
 8008f0e:	230a      	movs	r3, #10
 8008f10:	18f9      	adds	r1, r7, r3
 8008f12:	230b      	movs	r3, #11
 8008f14:	18f8      	adds	r0, r7, r3
 8008f16:	1d7b      	adds	r3, r7, #5
 8008f18:	9302      	str	r3, [sp, #8]
 8008f1a:	1dbb      	adds	r3, r7, #6
 8008f1c:	9301      	str	r3, [sp, #4]
 8008f1e:	1dfb      	adds	r3, r7, #7
 8008f20:	9300      	str	r3, [sp, #0]
 8008f22:	002b      	movs	r3, r5
 8008f24:	f000 feea 	bl	8009cfc <sen5x_get_version>
 8008f28:	0003      	movs	r3, r0
 8008f2a:	8023      	strh	r3, [r4, #0]
                            &hardware_major, &hardware_minor, &protocol_major,
                            &protocol_minor);

  if (error) {
 8008f2c:	19bb      	adds	r3, r7, r6
 8008f2e:	2200      	movs	r2, #0
 8008f30:	5e9b      	ldrsh	r3, [r3, r2]
 8008f32:	2b00      	cmp	r3, #0
 8008f34:	d00b      	beq.n	8008f4e <probe_sen5x+0x132>
      printf("Error executing sen5x_get_version(): %i\r\n", error);
 8008f36:	19bb      	adds	r3, r7, r6
 8008f38:	2200      	movs	r2, #0
 8008f3a:	5e9a      	ldrsh	r2, [r3, r2]
 8008f3c:	4b3b      	ldr	r3, [pc, #236]	@ (800902c <probe_sen5x+0x210>)
 8008f3e:	0011      	movs	r1, r2
 8008f40:	0018      	movs	r0, r3
 8008f42:	f016 fb1f 	bl	801f584 <iprintf>
      return error;
 8008f46:	19bb      	adds	r3, r7, r6
 8008f48:	2200      	movs	r2, #0
 8008f4a:	5e9b      	ldrsh	r3, [r3, r2]
 8008f4c:	e05e      	b.n	800900c <probe_sen5x+0x1f0>
  } else {
      printf("Firmware: %u.%u, Hardware: %u.%u\r\n", firmware_major,
 8008f4e:	230b      	movs	r3, #11
 8008f50:	18fb      	adds	r3, r7, r3
 8008f52:	781b      	ldrb	r3, [r3, #0]
 8008f54:	0019      	movs	r1, r3
 8008f56:	230a      	movs	r3, #10
 8008f58:	18fb      	adds	r3, r7, r3
 8008f5a:	781b      	ldrb	r3, [r3, #0]
 8008f5c:	001a      	movs	r2, r3
 8008f5e:	2308      	movs	r3, #8
 8008f60:	18fb      	adds	r3, r7, r3
 8008f62:	781b      	ldrb	r3, [r3, #0]
 8008f64:	001c      	movs	r4, r3
 8008f66:	1dfb      	adds	r3, r7, #7
 8008f68:	781b      	ldrb	r3, [r3, #0]
 8008f6a:	4831      	ldr	r0, [pc, #196]	@ (8009030 <probe_sen5x+0x214>)
 8008f6c:	9300      	str	r3, [sp, #0]
 8008f6e:	0023      	movs	r3, r4
 8008f70:	f016 fb08 	bl	801f584 <iprintf>
// `sen5x_set_warm_start_parameter` and
// `sen5x_set_rht_acceleration_mode`.
//
// Adjust temp_offset in degrees celsius to account for additional
// temperature offsets exceeding the SEN module's self heating.
  float temp_offset = 0.0f;
 8008f74:	2300      	movs	r3, #0
 8008f76:	653b      	str	r3, [r7, #80]	@ 0x50
  int16_t default_slope = 0;
 8008f78:	264e      	movs	r6, #78	@ 0x4e
 8008f7a:	19bb      	adds	r3, r7, r6
 8008f7c:	2200      	movs	r2, #0
 8008f7e:	801a      	strh	r2, [r3, #0]
  uint16_t default_time_constant = 0;
 8008f80:	234c      	movs	r3, #76	@ 0x4c
 8008f82:	18fb      	adds	r3, r7, r3
 8008f84:	2200      	movs	r2, #0
 8008f86:	801a      	strh	r2, [r3, #0]
  error = sen5x_set_temperature_offset_parameters(
      (int16_t)(200 * temp_offset), default_slope, default_time_constant);
 8008f88:	492a      	ldr	r1, [pc, #168]	@ (8009034 <probe_sen5x+0x218>)
 8008f8a:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 8008f8c:	f7f8 f808 	bl	8000fa0 <__aeabi_fmul>
 8008f90:	1c03      	adds	r3, r0, #0
  error = sen5x_set_temperature_offset_parameters(
 8008f92:	1c18      	adds	r0, r3, #0
 8008f94:	f7f8 fafc 	bl	8001590 <__aeabi_f2iz>
 8008f98:	0003      	movs	r3, r0
 8008f9a:	b218      	sxth	r0, r3
 8008f9c:	2556      	movs	r5, #86	@ 0x56
 8008f9e:	197c      	adds	r4, r7, r5
 8008fa0:	234c      	movs	r3, #76	@ 0x4c
 8008fa2:	18fb      	adds	r3, r7, r3
 8008fa4:	881a      	ldrh	r2, [r3, #0]
 8008fa6:	19bb      	adds	r3, r7, r6
 8008fa8:	2100      	movs	r1, #0
 8008faa:	5e5b      	ldrsh	r3, [r3, r1]
 8008fac:	0019      	movs	r1, r3
 8008fae:	f000 fd95 	bl	8009adc <sen5x_set_temperature_offset_parameters>
 8008fb2:	0003      	movs	r3, r0
 8008fb4:	8023      	strh	r3, [r4, #0]
  if (error) {
 8008fb6:	197b      	adds	r3, r7, r5
 8008fb8:	2200      	movs	r2, #0
 8008fba:	5e9b      	ldrsh	r3, [r3, r2]
 8008fbc:	2b00      	cmp	r3, #0
 8008fbe:	d00b      	beq.n	8008fd8 <probe_sen5x+0x1bc>
      Error("Error executing sen5x_set_temperature_offset_parameters(): %i", error);
 8008fc0:	197b      	adds	r3, r7, r5
 8008fc2:	2200      	movs	r2, #0
 8008fc4:	5e9b      	ldrsh	r3, [r3, r2]
 8008fc6:	4a1c      	ldr	r2, [pc, #112]	@ (8009038 <probe_sen5x+0x21c>)
 8008fc8:	4913      	ldr	r1, [pc, #76]	@ (8009018 <probe_sen5x+0x1fc>)
 8008fca:	2001      	movs	r0, #1
 8008fcc:	f004 fdf6 	bl	800dbbc <CreateLine>
      return error;
 8008fd0:	197b      	adds	r3, r7, r5
 8008fd2:	2200      	movs	r2, #0
 8008fd4:	5e9b      	ldrsh	r3, [r3, r2]
 8008fd6:	e019      	b.n	800900c <probe_sen5x+0x1f0>
  } else {
      Info("Temperature Offset set to %.2f °C (SEN54/SEN55 only)", temp_offset);
 8008fd8:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 8008fda:	f7fa fa43 	bl	8003464 <__aeabi_f2d>
 8008fde:	0002      	movs	r2, r0
 8008fe0:	000b      	movs	r3, r1
 8008fe2:	4816      	ldr	r0, [pc, #88]	@ (800903c <probe_sen5x+0x220>)
 8008fe4:	4916      	ldr	r1, [pc, #88]	@ (8009040 <probe_sen5x+0x224>)
 8008fe6:	9200      	str	r2, [sp, #0]
 8008fe8:	9301      	str	r3, [sp, #4]
 8008fea:	0002      	movs	r2, r0
 8008fec:	2002      	movs	r0, #2
 8008fee:	f004 fde5 	bl	800dbbc <CreateLine>
  }
  sen5x_Power_Off();
 8008ff2:	f7ff feeb 	bl	8008dcc <sen5x_Power_Off>
  sen5xReadTimer  = HAL_GetTick() + 25000; // after 25 second first measurement
 8008ff6:	f005 fa37 	bl	800e468 <HAL_GetTick>
 8008ffa:	0003      	movs	r3, r0
 8008ffc:	4a11      	ldr	r2, [pc, #68]	@ (8009044 <probe_sen5x+0x228>)
 8008ffe:	189a      	adds	r2, r3, r2
 8009000:	4b11      	ldr	r3, [pc, #68]	@ (8009048 <probe_sen5x+0x22c>)
 8009002:	601a      	str	r2, [r3, #0]
  return error;
 8009004:	2356      	movs	r3, #86	@ 0x56
 8009006:	18fb      	adds	r3, r7, r3
 8009008:	2200      	movs	r2, #0
 800900a:	5e9b      	ldrsh	r3, [r3, r2]
}
 800900c:	0018      	movs	r0, r3
 800900e:	46bd      	mov	sp, r7
 8009010:	b017      	add	sp, #92	@ 0x5c
 8009012:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009014:	08023b80 	.word	0x08023b80
 8009018:	08023bac 	.word	0x08023bac
 800901c:	08023bb0 	.word	0x08023bb0
 8009020:	08023be0 	.word	0x08023be0
 8009024:	08023bf4 	.word	0x08023bf4
 8009028:	08023c24 	.word	0x08023c24
 800902c:	08023c38 	.word	0x08023c38
 8009030:	08023c64 	.word	0x08023c64
 8009034:	43480000 	.word	0x43480000
 8009038:	08023c88 	.word	0x08023c88
 800903c:	08023cc8 	.word	0x08023cc8
 8009040:	08023b24 	.word	0x08023b24
 8009044:	000061a8 	.word	0x000061a8
 8009048:	20001260 	.word	0x20001260

0800904c <sen5x_lightup_measurement>:

int16_t sen5x_lightup_measurement(void) {
 800904c:	b590      	push	{r4, r7, lr}
 800904e:	b083      	sub	sp, #12
 8009050:	af00      	add	r7, sp, #0
// Start Measurement
  int16_t error = 0;
 8009052:	1dbb      	adds	r3, r7, #6
 8009054:	2200      	movs	r2, #0
 8009056:	801a      	strh	r2, [r3, #0]
//  Debug("entering sen5x_lightup_measurement");
  error = sen5x_start_measurement(); // start full measurement mode
 8009058:	1dbc      	adds	r4, r7, #6
 800905a:	f000 fbcb 	bl	80097f4 <sen5x_start_measurement>
 800905e:	0003      	movs	r3, r0
 8009060:	8023      	strh	r3, [r4, #0]
  if (error) {
 8009062:	1dbb      	adds	r3, r7, #6
 8009064:	2200      	movs	r2, #0
 8009066:	5e9b      	ldrsh	r3, [r3, r2]
 8009068:	2b00      	cmp	r3, #0
 800906a:	d007      	beq.n	800907c <sen5x_lightup_measurement+0x30>
      Error("Error executing sen5x_lightup_measurement(): %i", error);
 800906c:	1dbb      	adds	r3, r7, #6
 800906e:	2200      	movs	r2, #0
 8009070:	5e9b      	ldrsh	r3, [r3, r2]
 8009072:	4a06      	ldr	r2, [pc, #24]	@ (800908c <sen5x_lightup_measurement+0x40>)
 8009074:	4906      	ldr	r1, [pc, #24]	@ (8009090 <sen5x_lightup_measurement+0x44>)
 8009076:	2001      	movs	r0, #1
 8009078:	f004 fda0 	bl	800dbbc <CreateLine>
  }
  return error;
 800907c:	1dbb      	adds	r3, r7, #6
 800907e:	2200      	movs	r2, #0
 8009080:	5e9b      	ldrsh	r3, [r3, r2]
}
 8009082:	0018      	movs	r0, r3
 8009084:	46bd      	mov	sp, r7
 8009086:	b003      	add	sp, #12
 8009088:	bd90      	pop	{r4, r7, pc}
 800908a:	46c0      	nop			@ (mov r8, r8)
 800908c:	08023d00 	.word	0x08023d00
 8009090:	08023bac 	.word	0x08023bac

08009094 <sen5x_extinguish_measurement>:

int16_t sen5x_extinguish_measurement(void) {
 8009094:	b590      	push	{r4, r7, lr}
 8009096:	b083      	sub	sp, #12
 8009098:	af00      	add	r7, sp, #0
// Stop Measurement
//  Debug("entering sen5x_extinguish_measurement");
  int16_t error = 0;
 800909a:	1dbb      	adds	r3, r7, #6
 800909c:	2200      	movs	r2, #0
 800909e:	801a      	strh	r2, [r3, #0]
  error = sen5x_stop_measurement();
 80090a0:	1dbc      	adds	r4, r7, #6
 80090a2:	f000 fbd5 	bl	8009850 <sen5x_stop_measurement>
 80090a6:	0003      	movs	r3, r0
 80090a8:	8023      	strh	r3, [r4, #0]
  if (error) {
 80090aa:	1dbb      	adds	r3, r7, #6
 80090ac:	2200      	movs	r2, #0
 80090ae:	5e9b      	ldrsh	r3, [r3, r2]
 80090b0:	2b00      	cmp	r3, #0
 80090b2:	d007      	beq.n	80090c4 <sen5x_extinguish_measurement+0x30>
    Error("Error executing sen5x_stop_measurement(): %i", error);
 80090b4:	1dbb      	adds	r3, r7, #6
 80090b6:	2200      	movs	r2, #0
 80090b8:	5e9b      	ldrsh	r3, [r3, r2]
 80090ba:	4a06      	ldr	r2, [pc, #24]	@ (80090d4 <sen5x_extinguish_measurement+0x40>)
 80090bc:	4906      	ldr	r1, [pc, #24]	@ (80090d8 <sen5x_extinguish_measurement+0x44>)
 80090be:	2001      	movs	r0, #1
 80090c0:	f004 fd7c 	bl	800dbbc <CreateLine>
  }
  return error;
 80090c4:	1dbb      	adds	r3, r7, #6
 80090c6:	2200      	movs	r2, #0
 80090c8:	5e9b      	ldrsh	r3, [r3, r2]
}
 80090ca:	0018      	movs	r0, r3
 80090cc:	46bd      	mov	sp, r7
 80090ce:	b003      	add	sp, #12
 80090d0:	bd90      	pop	{r4, r7, pc}
 80090d2:	46c0      	nop			@ (mov r8, r8)
 80090d4:	08023d30 	.word	0x08023d30
 80090d8:	08023bac 	.word	0x08023bac

080090dc <sen5x_read_measurement>:

int16_t sen5x_read_measurement(SEN5X_DateTypeDef* sen5x_data) {
 80090dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80090de:	b08d      	sub	sp, #52	@ 0x34
 80090e0:	af04      	add	r7, sp, #16
 80090e2:	6078      	str	r0, [r7, #4]
  int16_t error = 0;
 80090e4:	261e      	movs	r6, #30
 80090e6:	19bb      	adds	r3, r7, r6
 80090e8:	2200      	movs	r2, #0
 80090ea:	801a      	strh	r2, [r3, #0]
  int16_t ambient_humidity;
  int16_t ambient_temperature;
  int16_t voc_index;
  int16_t nox_index;

  error = sen5x_read_measured_values(
 80090ec:	19bc      	adds	r4, r7, r6
 80090ee:	2316      	movs	r3, #22
 80090f0:	18fd      	adds	r5, r7, r3
 80090f2:	2318      	movs	r3, #24
 80090f4:	18fa      	adds	r2, r7, r3
 80090f6:	231a      	movs	r3, #26
 80090f8:	18f9      	adds	r1, r7, r3
 80090fa:	231c      	movs	r3, #28
 80090fc:	18f8      	adds	r0, r7, r3
 80090fe:	230e      	movs	r3, #14
 8009100:	18fb      	adds	r3, r7, r3
 8009102:	9303      	str	r3, [sp, #12]
 8009104:	2310      	movs	r3, #16
 8009106:	18fb      	adds	r3, r7, r3
 8009108:	9302      	str	r3, [sp, #8]
 800910a:	2312      	movs	r3, #18
 800910c:	18fb      	adds	r3, r7, r3
 800910e:	9301      	str	r3, [sp, #4]
 8009110:	2314      	movs	r3, #20
 8009112:	18fb      	adds	r3, r7, r3
 8009114:	9300      	str	r3, [sp, #0]
 8009116:	002b      	movs	r3, r5
 8009118:	f000 fc1c 	bl	8009954 <sen5x_read_measured_values>
 800911c:	0003      	movs	r3, r0
 800911e:	8023      	strh	r3, [r4, #0]
          &mass_concentration_pm1p0, &mass_concentration_pm2p5,
          &mass_concentration_pm4p0, &mass_concentration_pm10p0,
          &ambient_humidity, &ambient_temperature, &voc_index, &nox_index);
  if (error) {
 8009120:	19bb      	adds	r3, r7, r6
 8009122:	2200      	movs	r2, #0
 8009124:	5e9b      	ldrsh	r3, [r3, r2]
 8009126:	2b00      	cmp	r3, #0
 8009128:	d003      	beq.n	8009132 <sen5x_read_measurement+0x56>
    return error;
 800912a:	19bb      	adds	r3, r7, r6
 800912c:	2200      	movs	r2, #0
 800912e:	5e9b      	ldrsh	r3, [r3, r2]
 8009130:	e037      	b.n	80091a2 <sen5x_read_measurement+0xc6>
  }
  // it is a pitty that sensirion does not structures in there API
  sen5x_data->mass_concentration_pm1p0 = mass_concentration_pm1p0;
 8009132:	231c      	movs	r3, #28
 8009134:	18fb      	adds	r3, r7, r3
 8009136:	881a      	ldrh	r2, [r3, #0]
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	801a      	strh	r2, [r3, #0]
  sen5x_data->mass_concentration_pm2p5 = mass_concentration_pm2p5;
 800913c:	211a      	movs	r1, #26
 800913e:	187b      	adds	r3, r7, r1
 8009140:	881a      	ldrh	r2, [r3, #0]
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	805a      	strh	r2, [r3, #2]
  sen5x_data->mass_concentration_pm4p0 = mass_concentration_pm4p0;
 8009146:	2318      	movs	r3, #24
 8009148:	18fb      	adds	r3, r7, r3
 800914a:	881a      	ldrh	r2, [r3, #0]
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	809a      	strh	r2, [r3, #4]
  sen5x_data->mass_concentration_pm10p0 = mass_concentration_pm10p0;
 8009150:	2416      	movs	r4, #22
 8009152:	193b      	adds	r3, r7, r4
 8009154:	881a      	ldrh	r2, [r3, #0]
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	80da      	strh	r2, [r3, #6]
  sen5x_data->ambient_humidity = ambient_humidity;
 800915a:	2314      	movs	r3, #20
 800915c:	18fb      	adds	r3, r7, r3
 800915e:	2200      	movs	r2, #0
 8009160:	5e9a      	ldrsh	r2, [r3, r2]
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	811a      	strh	r2, [r3, #8]
  sen5x_data->ambient_temperature = ambient_temperature;
 8009166:	2312      	movs	r3, #18
 8009168:	18fb      	adds	r3, r7, r3
 800916a:	2200      	movs	r2, #0
 800916c:	5e9a      	ldrsh	r2, [r3, r2]
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	815a      	strh	r2, [r3, #10]
  sen5x_data->voc_index = voc_index;
 8009172:	2310      	movs	r3, #16
 8009174:	18fb      	adds	r3, r7, r3
 8009176:	2200      	movs	r2, #0
 8009178:	5e9a      	ldrsh	r2, [r3, r2]
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	819a      	strh	r2, [r3, #12]
  sen5x_data->nox_index = nox_index;
 800917e:	250e      	movs	r5, #14
 8009180:	197b      	adds	r3, r7, r5
 8009182:	2200      	movs	r2, #0
 8009184:	5e9a      	ldrsh	r2, [r3, r2]
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	81da      	strh	r2, [r3, #14]
  setPMs(mass_concentration_pm2p5, mass_concentration_pm10p0, nox_index);
 800918a:	187b      	adds	r3, r7, r1
 800918c:	8818      	ldrh	r0, [r3, #0]
 800918e:	193b      	adds	r3, r7, r4
 8009190:	8819      	ldrh	r1, [r3, #0]
 8009192:	197b      	adds	r3, r7, r5
 8009194:	2200      	movs	r2, #0
 8009196:	5e9b      	ldrsh	r3, [r3, r2]
 8009198:	b29b      	uxth	r3, r3
 800919a:	001a      	movs	r2, r3
 800919c:	f7fa fbe0 	bl	8003960 <setPMs>
  return 0;
 80091a0:	2300      	movs	r3, #0
}
 80091a2:	0018      	movs	r0, r3
 80091a4:	46bd      	mov	sp, r7
 80091a6:	b009      	add	sp, #36	@ 0x24
 80091a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080091ac <sen5x_measurement>:

int16_t sen5x_measurement(void) {
 80091ac:	b580      	push	{r7, lr}
 80091ae:	b082      	sub	sp, #8
 80091b0:	af00      	add	r7, sp, #0
  // Read Measurement
  int16_t error = 0;
 80091b2:	1dbb      	adds	r3, r7, #6
 80091b4:	2200      	movs	r2, #0
 80091b6:	801a      	strh	r2, [r3, #0]
//  Debug("entering sen5x_measurement");
  if (sen5x_read_measurement(&sen5x_data)) {
 80091b8:	4b77      	ldr	r3, [pc, #476]	@ (8009398 <sen5x_measurement+0x1ec>)
 80091ba:	0018      	movs	r0, r3
 80091bc:	f7ff ff8e 	bl	80090dc <sen5x_read_measurement>
 80091c0:	1e03      	subs	r3, r0, #0
 80091c2:	d00b      	beq.n	80091dc <sen5x_measurement+0x30>
    Error("Error executing sen5x_read_measured_values(): %i", error);
 80091c4:	1dbb      	adds	r3, r7, #6
 80091c6:	2200      	movs	r2, #0
 80091c8:	5e9b      	ldrsh	r3, [r3, r2]
 80091ca:	4a74      	ldr	r2, [pc, #464]	@ (800939c <sen5x_measurement+0x1f0>)
 80091cc:	4974      	ldr	r1, [pc, #464]	@ (80093a0 <sen5x_measurement+0x1f4>)
 80091ce:	2001      	movs	r0, #1
 80091d0:	f004 fcf4 	bl	800dbbc <CreateLine>
    return error;
 80091d4:	1dbb      	adds	r3, r7, #6
 80091d6:	2200      	movs	r2, #0
 80091d8:	5e9b      	ldrsh	r3, [r3, r2]
 80091da:	e0d8      	b.n	800938e <sen5x_measurement+0x1e2>
  }
  if (sen5xSamples != 2) {
 80091dc:	4b71      	ldr	r3, [pc, #452]	@ (80093a4 <sen5x_measurement+0x1f8>)
 80091de:	781b      	ldrb	r3, [r3, #0]
 80091e0:	2b02      	cmp	r3, #2
 80091e2:	d001      	beq.n	80091e8 <sen5x_measurement+0x3c>
    return 0; // first two sample reads are not reliable
 80091e4:	2300      	movs	r3, #0
 80091e6:	e0d2      	b.n	800938e <sen5x_measurement+0x1e2>
  }
  if (sen5x_data.mass_concentration_pm1p0 != 0xFFFF) {
 80091e8:	4b6b      	ldr	r3, [pc, #428]	@ (8009398 <sen5x_measurement+0x1ec>)
 80091ea:	881b      	ldrh	r3, [r3, #0]
 80091ec:	4a6e      	ldr	r2, [pc, #440]	@ (80093a8 <sen5x_measurement+0x1fc>)
 80091ee:	4293      	cmp	r3, r2
 80091f0:	d013      	beq.n	800921a <sen5x_measurement+0x6e>
      printf("Mass concentration pm1p0: %.1f µg/m³\r\n", sen5x_data.mass_concentration_pm1p0 / 10.0f);
 80091f2:	4b69      	ldr	r3, [pc, #420]	@ (8009398 <sen5x_measurement+0x1ec>)
 80091f4:	881b      	ldrh	r3, [r3, #0]
 80091f6:	0018      	movs	r0, r3
 80091f8:	f7f8 f9ea 	bl	80015d0 <__aeabi_i2f>
 80091fc:	1c03      	adds	r3, r0, #0
 80091fe:	496b      	ldr	r1, [pc, #428]	@ (80093ac <sen5x_measurement+0x200>)
 8009200:	1c18      	adds	r0, r3, #0
 8009202:	f7f7 fce7 	bl	8000bd4 <__aeabi_fdiv>
 8009206:	1c03      	adds	r3, r0, #0
 8009208:	1c18      	adds	r0, r3, #0
 800920a:	f7fa f92b 	bl	8003464 <__aeabi_f2d>
 800920e:	0002      	movs	r2, r0
 8009210:	000b      	movs	r3, r1
 8009212:	4967      	ldr	r1, [pc, #412]	@ (80093b0 <sen5x_measurement+0x204>)
 8009214:	0008      	movs	r0, r1
 8009216:	f016 f9b5 	bl	801f584 <iprintf>
  }
  if (sen5x_data.mass_concentration_pm2p5 != 0xFFFF) {
 800921a:	4b5f      	ldr	r3, [pc, #380]	@ (8009398 <sen5x_measurement+0x1ec>)
 800921c:	885b      	ldrh	r3, [r3, #2]
 800921e:	4a62      	ldr	r2, [pc, #392]	@ (80093a8 <sen5x_measurement+0x1fc>)
 8009220:	4293      	cmp	r3, r2
 8009222:	d013      	beq.n	800924c <sen5x_measurement+0xa0>
        printf("Mass concentration pm2p5: %.1f µg/m³\r\n", sen5x_data.mass_concentration_pm2p5 / 10.0f);
 8009224:	4b5c      	ldr	r3, [pc, #368]	@ (8009398 <sen5x_measurement+0x1ec>)
 8009226:	885b      	ldrh	r3, [r3, #2]
 8009228:	0018      	movs	r0, r3
 800922a:	f7f8 f9d1 	bl	80015d0 <__aeabi_i2f>
 800922e:	1c03      	adds	r3, r0, #0
 8009230:	495e      	ldr	r1, [pc, #376]	@ (80093ac <sen5x_measurement+0x200>)
 8009232:	1c18      	adds	r0, r3, #0
 8009234:	f7f7 fcce 	bl	8000bd4 <__aeabi_fdiv>
 8009238:	1c03      	adds	r3, r0, #0
 800923a:	1c18      	adds	r0, r3, #0
 800923c:	f7fa f912 	bl	8003464 <__aeabi_f2d>
 8009240:	0002      	movs	r2, r0
 8009242:	000b      	movs	r3, r1
 8009244:	495b      	ldr	r1, [pc, #364]	@ (80093b4 <sen5x_measurement+0x208>)
 8009246:	0008      	movs	r0, r1
 8009248:	f016 f99c 	bl	801f584 <iprintf>
  }
  if (sen5x_data.mass_concentration_pm4p0 != 0xFFFF) {
 800924c:	4b52      	ldr	r3, [pc, #328]	@ (8009398 <sen5x_measurement+0x1ec>)
 800924e:	889b      	ldrh	r3, [r3, #4]
 8009250:	4a55      	ldr	r2, [pc, #340]	@ (80093a8 <sen5x_measurement+0x1fc>)
 8009252:	4293      	cmp	r3, r2
 8009254:	d013      	beq.n	800927e <sen5x_measurement+0xd2>
        printf("Mass concentration pm4p0: %.1f µg/m³\r\n", sen5x_data.mass_concentration_pm4p0 / 10.0f);
 8009256:	4b50      	ldr	r3, [pc, #320]	@ (8009398 <sen5x_measurement+0x1ec>)
 8009258:	889b      	ldrh	r3, [r3, #4]
 800925a:	0018      	movs	r0, r3
 800925c:	f7f8 f9b8 	bl	80015d0 <__aeabi_i2f>
 8009260:	1c03      	adds	r3, r0, #0
 8009262:	4952      	ldr	r1, [pc, #328]	@ (80093ac <sen5x_measurement+0x200>)
 8009264:	1c18      	adds	r0, r3, #0
 8009266:	f7f7 fcb5 	bl	8000bd4 <__aeabi_fdiv>
 800926a:	1c03      	adds	r3, r0, #0
 800926c:	1c18      	adds	r0, r3, #0
 800926e:	f7fa f8f9 	bl	8003464 <__aeabi_f2d>
 8009272:	0002      	movs	r2, r0
 8009274:	000b      	movs	r3, r1
 8009276:	4950      	ldr	r1, [pc, #320]	@ (80093b8 <sen5x_measurement+0x20c>)
 8009278:	0008      	movs	r0, r1
 800927a:	f016 f983 	bl	801f584 <iprintf>
  }
  if (sen5x_data.mass_concentration_pm10p0 != 0xFFFF) {
 800927e:	4b46      	ldr	r3, [pc, #280]	@ (8009398 <sen5x_measurement+0x1ec>)
 8009280:	88db      	ldrh	r3, [r3, #6]
 8009282:	4a49      	ldr	r2, [pc, #292]	@ (80093a8 <sen5x_measurement+0x1fc>)
 8009284:	4293      	cmp	r3, r2
 8009286:	d013      	beq.n	80092b0 <sen5x_measurement+0x104>
        printf("Mass concentration pm10p0: %.1f µg/m³\r\n", sen5x_data.mass_concentration_pm10p0 / 10.0f);
 8009288:	4b43      	ldr	r3, [pc, #268]	@ (8009398 <sen5x_measurement+0x1ec>)
 800928a:	88db      	ldrh	r3, [r3, #6]
 800928c:	0018      	movs	r0, r3
 800928e:	f7f8 f99f 	bl	80015d0 <__aeabi_i2f>
 8009292:	1c03      	adds	r3, r0, #0
 8009294:	4945      	ldr	r1, [pc, #276]	@ (80093ac <sen5x_measurement+0x200>)
 8009296:	1c18      	adds	r0, r3, #0
 8009298:	f7f7 fc9c 	bl	8000bd4 <__aeabi_fdiv>
 800929c:	1c03      	adds	r3, r0, #0
 800929e:	1c18      	adds	r0, r3, #0
 80092a0:	f7fa f8e0 	bl	8003464 <__aeabi_f2d>
 80092a4:	0002      	movs	r2, r0
 80092a6:	000b      	movs	r3, r1
 80092a8:	4944      	ldr	r1, [pc, #272]	@ (80093bc <sen5x_measurement+0x210>)
 80092aa:	0008      	movs	r0, r1
 80092ac:	f016 f96a 	bl	801f584 <iprintf>
  }
  if (sen5x_data.ambient_humidity != 0x7fff) {
 80092b0:	4b39      	ldr	r3, [pc, #228]	@ (8009398 <sen5x_measurement+0x1ec>)
 80092b2:	2208      	movs	r2, #8
 80092b4:	5e9b      	ldrsh	r3, [r3, r2]
 80092b6:	4a42      	ldr	r2, [pc, #264]	@ (80093c0 <sen5x_measurement+0x214>)
 80092b8:	4293      	cmp	r3, r2
 80092ba:	d014      	beq.n	80092e6 <sen5x_measurement+0x13a>
        printf("Ambient humidity: %.1f %%RH\r\n", sen5x_data.ambient_humidity / 100.0f);
 80092bc:	4b36      	ldr	r3, [pc, #216]	@ (8009398 <sen5x_measurement+0x1ec>)
 80092be:	2208      	movs	r2, #8
 80092c0:	5e9b      	ldrsh	r3, [r3, r2]
 80092c2:	0018      	movs	r0, r3
 80092c4:	f7f8 f984 	bl	80015d0 <__aeabi_i2f>
 80092c8:	1c03      	adds	r3, r0, #0
 80092ca:	493e      	ldr	r1, [pc, #248]	@ (80093c4 <sen5x_measurement+0x218>)
 80092cc:	1c18      	adds	r0, r3, #0
 80092ce:	f7f7 fc81 	bl	8000bd4 <__aeabi_fdiv>
 80092d2:	1c03      	adds	r3, r0, #0
 80092d4:	1c18      	adds	r0, r3, #0
 80092d6:	f7fa f8c5 	bl	8003464 <__aeabi_f2d>
 80092da:	0002      	movs	r2, r0
 80092dc:	000b      	movs	r3, r1
 80092de:	493a      	ldr	r1, [pc, #232]	@ (80093c8 <sen5x_measurement+0x21c>)
 80092e0:	0008      	movs	r0, r1
 80092e2:	f016 f94f 	bl	801f584 <iprintf>
  }
  if (sen5x_data.ambient_temperature != 0x7fff) {
 80092e6:	4b2c      	ldr	r3, [pc, #176]	@ (8009398 <sen5x_measurement+0x1ec>)
 80092e8:	220a      	movs	r2, #10
 80092ea:	5e9b      	ldrsh	r3, [r3, r2]
 80092ec:	4a34      	ldr	r2, [pc, #208]	@ (80093c0 <sen5x_measurement+0x214>)
 80092ee:	4293      	cmp	r3, r2
 80092f0:	d014      	beq.n	800931c <sen5x_measurement+0x170>
        printf("Ambient temperature: %.1f °C\r\n", sen5x_data.ambient_temperature / 200.0f);
 80092f2:	4b29      	ldr	r3, [pc, #164]	@ (8009398 <sen5x_measurement+0x1ec>)
 80092f4:	220a      	movs	r2, #10
 80092f6:	5e9b      	ldrsh	r3, [r3, r2]
 80092f8:	0018      	movs	r0, r3
 80092fa:	f7f8 f969 	bl	80015d0 <__aeabi_i2f>
 80092fe:	1c03      	adds	r3, r0, #0
 8009300:	4932      	ldr	r1, [pc, #200]	@ (80093cc <sen5x_measurement+0x220>)
 8009302:	1c18      	adds	r0, r3, #0
 8009304:	f7f7 fc66 	bl	8000bd4 <__aeabi_fdiv>
 8009308:	1c03      	adds	r3, r0, #0
 800930a:	1c18      	adds	r0, r3, #0
 800930c:	f7fa f8aa 	bl	8003464 <__aeabi_f2d>
 8009310:	0002      	movs	r2, r0
 8009312:	000b      	movs	r3, r1
 8009314:	492e      	ldr	r1, [pc, #184]	@ (80093d0 <sen5x_measurement+0x224>)
 8009316:	0008      	movs	r0, r1
 8009318:	f016 f934 	bl	801f584 <iprintf>
  }
  if (sen5x_data.voc_index != 0x7fff) {
 800931c:	4b1e      	ldr	r3, [pc, #120]	@ (8009398 <sen5x_measurement+0x1ec>)
 800931e:	220c      	movs	r2, #12
 8009320:	5e9b      	ldrsh	r3, [r3, r2]
 8009322:	4a27      	ldr	r2, [pc, #156]	@ (80093c0 <sen5x_measurement+0x214>)
 8009324:	4293      	cmp	r3, r2
 8009326:	d014      	beq.n	8009352 <sen5x_measurement+0x1a6>
        printf("sen55 VOC index: %.1f\r\n", sen5x_data.voc_index / 10.0f);
 8009328:	4b1b      	ldr	r3, [pc, #108]	@ (8009398 <sen5x_measurement+0x1ec>)
 800932a:	220c      	movs	r2, #12
 800932c:	5e9b      	ldrsh	r3, [r3, r2]
 800932e:	0018      	movs	r0, r3
 8009330:	f7f8 f94e 	bl	80015d0 <__aeabi_i2f>
 8009334:	1c03      	adds	r3, r0, #0
 8009336:	491d      	ldr	r1, [pc, #116]	@ (80093ac <sen5x_measurement+0x200>)
 8009338:	1c18      	adds	r0, r3, #0
 800933a:	f7f7 fc4b 	bl	8000bd4 <__aeabi_fdiv>
 800933e:	1c03      	adds	r3, r0, #0
 8009340:	1c18      	adds	r0, r3, #0
 8009342:	f7fa f88f 	bl	8003464 <__aeabi_f2d>
 8009346:	0002      	movs	r2, r0
 8009348:	000b      	movs	r3, r1
 800934a:	4922      	ldr	r1, [pc, #136]	@ (80093d4 <sen5x_measurement+0x228>)
 800934c:	0008      	movs	r0, r1
 800934e:	f016 f919 	bl	801f584 <iprintf>
  }
  if (sen5x_data.nox_index != 0x7fff) {
 8009352:	4b11      	ldr	r3, [pc, #68]	@ (8009398 <sen5x_measurement+0x1ec>)
 8009354:	220e      	movs	r2, #14
 8009356:	5e9b      	ldrsh	r3, [r3, r2]
 8009358:	4a19      	ldr	r2, [pc, #100]	@ (80093c0 <sen5x_measurement+0x214>)
 800935a:	4293      	cmp	r3, r2
 800935c:	d014      	beq.n	8009388 <sen5x_measurement+0x1dc>
        printf("sen55 NOx index: %.1f\r\n", sen5x_data.nox_index / 10.0f);
 800935e:	4b0e      	ldr	r3, [pc, #56]	@ (8009398 <sen5x_measurement+0x1ec>)
 8009360:	220e      	movs	r2, #14
 8009362:	5e9b      	ldrsh	r3, [r3, r2]
 8009364:	0018      	movs	r0, r3
 8009366:	f7f8 f933 	bl	80015d0 <__aeabi_i2f>
 800936a:	1c03      	adds	r3, r0, #0
 800936c:	490f      	ldr	r1, [pc, #60]	@ (80093ac <sen5x_measurement+0x200>)
 800936e:	1c18      	adds	r0, r3, #0
 8009370:	f7f7 fc30 	bl	8000bd4 <__aeabi_fdiv>
 8009374:	1c03      	adds	r3, r0, #0
 8009376:	1c18      	adds	r0, r3, #0
 8009378:	f7fa f874 	bl	8003464 <__aeabi_f2d>
 800937c:	0002      	movs	r2, r0
 800937e:	000b      	movs	r3, r1
 8009380:	4915      	ldr	r1, [pc, #84]	@ (80093d8 <sen5x_measurement+0x22c>)
 8009382:	0008      	movs	r0, r1
 8009384:	f016 f8fe 	bl	801f584 <iprintf>
  }
  return error;
 8009388:	1dbb      	adds	r3, r7, #6
 800938a:	2200      	movs	r2, #0
 800938c:	5e9b      	ldrsh	r3, [r3, r2]
}
 800938e:	0018      	movs	r0, r3
 8009390:	46bd      	mov	sp, r7
 8009392:	b002      	add	sp, #8
 8009394:	bd80      	pop	{r7, pc}
 8009396:	46c0      	nop			@ (mov r8, r8)
 8009398:	20001268 	.word	0x20001268
 800939c:	08023d60 	.word	0x08023d60
 80093a0:	08023bac 	.word	0x08023bac
 80093a4:	20001264 	.word	0x20001264
 80093a8:	0000ffff 	.word	0x0000ffff
 80093ac:	41200000 	.word	0x41200000
 80093b0:	08023d94 	.word	0x08023d94
 80093b4:	08023dc0 	.word	0x08023dc0
 80093b8:	08023dec 	.word	0x08023dec
 80093bc:	08023e18 	.word	0x08023e18
 80093c0:	00007fff 	.word	0x00007fff
 80093c4:	42c80000 	.word	0x42c80000
 80093c8:	08023e44 	.word	0x08023e44
 80093cc:	43480000 	.word	0x43480000
 80093d0:	08023e64 	.word	0x08023e64
 80093d4:	08023e84 	.word	0x08023e84
 80093d8:	08023e9c 	.word	0x08023e9c

080093dc <sensirion_i2c_hal_read>:
 * @param data    pointer to the buffer where the data is to be stored
 * @param count   number of bytes to read from I2C and store in the buffer
 * @returns 0 on success, error code otherwise
 */

int8_t sensirion_i2c_hal_read(uint8_t address, uint8_t* data, uint16_t count) {
 80093dc:	b590      	push	{r4, r7, lr}
 80093de:	b085      	sub	sp, #20
 80093e0:	af02      	add	r7, sp, #8
 80093e2:	6039      	str	r1, [r7, #0]
 80093e4:	0011      	movs	r1, r2
 80093e6:	1dfb      	adds	r3, r7, #7
 80093e8:	1c02      	adds	r2, r0, #0
 80093ea:	701a      	strb	r2, [r3, #0]
 80093ec:	1d3b      	adds	r3, r7, #4
 80093ee:	1c0a      	adds	r2, r1, #0
 80093f0:	801a      	strh	r2, [r3, #0]
  return (int8_t)HAL_I2C_Master_Receive(&hi2c2, (uint16_t)(address << 1), data, count, 100);
 80093f2:	1dfb      	adds	r3, r7, #7
 80093f4:	781b      	ldrb	r3, [r3, #0]
 80093f6:	b29b      	uxth	r3, r3
 80093f8:	18db      	adds	r3, r3, r3
 80093fa:	b299      	uxth	r1, r3
 80093fc:	1d3b      	adds	r3, r7, #4
 80093fe:	881b      	ldrh	r3, [r3, #0]
 8009400:	683a      	ldr	r2, [r7, #0]
 8009402:	4805      	ldr	r0, [pc, #20]	@ (8009418 <sensirion_i2c_hal_read+0x3c>)
 8009404:	2464      	movs	r4, #100	@ 0x64
 8009406:	9400      	str	r4, [sp, #0]
 8009408:	f006 fc96 	bl	800fd38 <HAL_I2C_Master_Receive>
 800940c:	0003      	movs	r3, r0
 800940e:	b25b      	sxtb	r3, r3
}
 8009410:	0018      	movs	r0, r3
 8009412:	46bd      	mov	sp, r7
 8009414:	b003      	add	sp, #12
 8009416:	bd90      	pop	{r4, r7, pc}
 8009418:	20000e40 	.word	0x20000e40

0800941c <sensirion_i2c_hal_write>:
 * @param data    pointer to the buffer containing the data to write
 * @param count   number of bytes to read from the buffer and send over I2C
 * @returns 0 on success, error code otherwise
 */

int8_t sensirion_i2c_hal_write(uint8_t address, const uint8_t* data, uint16_t count) {
 800941c:	b590      	push	{r4, r7, lr}
 800941e:	b085      	sub	sp, #20
 8009420:	af02      	add	r7, sp, #8
 8009422:	6039      	str	r1, [r7, #0]
 8009424:	0011      	movs	r1, r2
 8009426:	1dfb      	adds	r3, r7, #7
 8009428:	1c02      	adds	r2, r0, #0
 800942a:	701a      	strb	r2, [r3, #0]
 800942c:	1d3b      	adds	r3, r7, #4
 800942e:	1c0a      	adds	r2, r1, #0
 8009430:	801a      	strh	r2, [r3, #0]
  return (int8_t)HAL_I2C_Master_Transmit(&hi2c2, (uint16_t)(address << 1), (uint8_t*)data, count, 100);
 8009432:	1dfb      	adds	r3, r7, #7
 8009434:	781b      	ldrb	r3, [r3, #0]
 8009436:	b29b      	uxth	r3, r3
 8009438:	18db      	adds	r3, r3, r3
 800943a:	b299      	uxth	r1, r3
 800943c:	1d3b      	adds	r3, r7, #4
 800943e:	881b      	ldrh	r3, [r3, #0]
 8009440:	683a      	ldr	r2, [r7, #0]
 8009442:	4805      	ldr	r0, [pc, #20]	@ (8009458 <sensirion_i2c_hal_write+0x3c>)
 8009444:	2464      	movs	r4, #100	@ 0x64
 8009446:	9400      	str	r4, [sp, #0]
 8009448:	f006 fb6e 	bl	800fb28 <HAL_I2C_Master_Transmit>
 800944c:	0003      	movs	r3, r0
 800944e:	b25b      	sxtb	r3, r3
}
 8009450:	0018      	movs	r0, r3
 8009452:	46bd      	mov	sp, r7
 8009454:	b003      	add	sp, #12
 8009456:	bd90      	pop	{r4, r7, pc}
 8009458:	20000e40 	.word	0x20000e40

0800945c <sensirion_i2c_hal_sleep_usec>:
 * execution for at least the given time, but may also sleep longer.
 *
 * @param useconds the sleep time in microseconds
 */

void sensirion_i2c_hal_sleep_usec(uint32_t useconds) {
 800945c:	b580      	push	{r7, lr}
 800945e:	b084      	sub	sp, #16
 8009460:	af00      	add	r7, sp, #0
 8009462:	6078      	str	r0, [r7, #4]
  uint32_t msec = useconds / 1000;
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	22fa      	movs	r2, #250	@ 0xfa
 8009468:	0091      	lsls	r1, r2, #2
 800946a:	0018      	movs	r0, r3
 800946c:	f7f6 fe9a 	bl	80001a4 <__udivsi3>
 8009470:	0003      	movs	r3, r0
 8009472:	60fb      	str	r3, [r7, #12]
  if (useconds % 1000 > 0) {
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	22fa      	movs	r2, #250	@ 0xfa
 8009478:	0091      	lsls	r1, r2, #2
 800947a:	0018      	movs	r0, r3
 800947c:	f7f6 ff18 	bl	80002b0 <__aeabi_uidivmod>
 8009480:	1e0b      	subs	r3, r1, #0
 8009482:	d002      	beq.n	800948a <sensirion_i2c_hal_sleep_usec+0x2e>
    msec++;
 8009484:	68fb      	ldr	r3, [r7, #12]
 8009486:	3301      	adds	r3, #1
 8009488:	60fb      	str	r3, [r7, #12]
  }
  HAL_Delay(msec);
 800948a:	68fb      	ldr	r3, [r7, #12]
 800948c:	0018      	movs	r0, r3
 800948e:	f004 fff5 	bl	800e47c <HAL_Delay>
}
 8009492:	46c0      	nop			@ (mov r8, r8)
 8009494:	46bd      	mov	sp, r7
 8009496:	b004      	add	sp, #16
 8009498:	bd80      	pop	{r7, pc}
	...

0800949c <sen5x_check_for_errors>:

bool sen5x_check_for_errors(void){
 800949c:	b580      	push	{r7, lr}
 800949e:	b082      	sub	sp, #8
 80094a0:	af00      	add	r7, sp, #0
  uint32_t device_status = 0;
 80094a2:	2300      	movs	r3, #0
 80094a4:	607b      	str	r3, [r7, #4]
  if (sen5x_read_device_status(&device_status)) {
 80094a6:	1d3b      	adds	r3, r7, #4
 80094a8:	0018      	movs	r0, r3
 80094aa:	f000 fc93 	bl	8009dd4 <sen5x_read_device_status>
 80094ae:	1e03      	subs	r3, r0, #0
 80094b0:	d007      	beq.n	80094c2 <sen5x_check_for_errors+0x26>
    Error("Error reading sen5x device status register");
 80094b2:	4a28      	ldr	r2, [pc, #160]	@ (8009554 <sen5x_check_for_errors+0xb8>)
 80094b4:	4b28      	ldr	r3, [pc, #160]	@ (8009558 <sen5x_check_for_errors+0xbc>)
 80094b6:	0019      	movs	r1, r3
 80094b8:	2001      	movs	r0, #1
 80094ba:	f004 fb7f 	bl	800dbbc <CreateLine>
//    device_status = SEN5X_NO_RESPONSE;
    return 0;
 80094be:	2300      	movs	r3, #0
 80094c0:	e043      	b.n	800954a <sen5x_check_for_errors+0xae>
  }
  if (device_status == 0) {
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	2b00      	cmp	r3, #0
 80094c6:	d101      	bne.n	80094cc <sen5x_check_for_errors+0x30>
//    Debug("sen5x operates normal");
    return 0;
 80094c8:	2300      	movs	r3, #0
 80094ca:	e03e      	b.n	800954a <sen5x_check_for_errors+0xae>
  }
  if (device_status & SEN5X_FAN_SPEED_ERROR) {
 80094cc:	687a      	ldr	r2, [r7, #4]
 80094ce:	2380      	movs	r3, #128	@ 0x80
 80094d0:	039b      	lsls	r3, r3, #14
 80094d2:	4013      	ands	r3, r2
 80094d4:	d005      	beq.n	80094e2 <sen5x_check_for_errors+0x46>
    Debug("sen5x Fan speed out of range");
 80094d6:	4a21      	ldr	r2, [pc, #132]	@ (800955c <sen5x_check_for_errors+0xc0>)
 80094d8:	4b21      	ldr	r3, [pc, #132]	@ (8009560 <sen5x_check_for_errors+0xc4>)
 80094da:	0019      	movs	r1, r3
 80094dc:	2003      	movs	r0, #3
 80094de:	f004 fb6d 	bl	800dbbc <CreateLine>
  }
  if (device_status & SEN5X_FAN_CLEANING) {
 80094e2:	687a      	ldr	r2, [r7, #4]
 80094e4:	2380      	movs	r3, #128	@ 0x80
 80094e6:	031b      	lsls	r3, r3, #12
 80094e8:	4013      	ands	r3, r2
 80094ea:	d005      	beq.n	80094f8 <sen5x_check_for_errors+0x5c>
    Debug("sen5x Fan cleaning active");
 80094ec:	4a1d      	ldr	r2, [pc, #116]	@ (8009564 <sen5x_check_for_errors+0xc8>)
 80094ee:	4b1c      	ldr	r3, [pc, #112]	@ (8009560 <sen5x_check_for_errors+0xc4>)
 80094f0:	0019      	movs	r1, r3
 80094f2:	2003      	movs	r0, #3
 80094f4:	f004 fb62 	bl	800dbbc <CreateLine>
  }
  if (device_status & SEN5X_GAS_SENSOR_ERROR) {
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	2280      	movs	r2, #128	@ 0x80
 80094fc:	4013      	ands	r3, r2
 80094fe:	d005      	beq.n	800950c <sen5x_check_for_errors+0x70>
    Debug("sen5x Gas sensor error (VOC & NOx)");
 8009500:	4a19      	ldr	r2, [pc, #100]	@ (8009568 <sen5x_check_for_errors+0xcc>)
 8009502:	4b17      	ldr	r3, [pc, #92]	@ (8009560 <sen5x_check_for_errors+0xc4>)
 8009504:	0019      	movs	r1, r3
 8009506:	2003      	movs	r0, #3
 8009508:	f004 fb58 	bl	800dbbc <CreateLine>
  }
  if (device_status & SEN5X_RHT_ERROR) {
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	2240      	movs	r2, #64	@ 0x40
 8009510:	4013      	ands	r3, r2
 8009512:	d005      	beq.n	8009520 <sen5x_check_for_errors+0x84>
    Debug("sen5x RHT communication error");
 8009514:	4a15      	ldr	r2, [pc, #84]	@ (800956c <sen5x_check_for_errors+0xd0>)
 8009516:	4b12      	ldr	r3, [pc, #72]	@ (8009560 <sen5x_check_for_errors+0xc4>)
 8009518:	0019      	movs	r1, r3
 800951a:	2003      	movs	r0, #3
 800951c:	f004 fb4e 	bl	800dbbc <CreateLine>
  }
  if (device_status & SEN5X_LASER_ERROR) {
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	2220      	movs	r2, #32
 8009524:	4013      	ands	r3, r2
 8009526:	d005      	beq.n	8009534 <sen5x_check_for_errors+0x98>
    Debug("sen5x Laser failure");
 8009528:	4a11      	ldr	r2, [pc, #68]	@ (8009570 <sen5x_check_for_errors+0xd4>)
 800952a:	4b0d      	ldr	r3, [pc, #52]	@ (8009560 <sen5x_check_for_errors+0xc4>)
 800952c:	0019      	movs	r1, r3
 800952e:	2003      	movs	r0, #3
 8009530:	f004 fb44 	bl	800dbbc <CreateLine>
  }
  if (device_status & SEN5X_FAN_BLOCKED_ERROR) {
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	2210      	movs	r2, #16
 8009538:	4013      	ands	r3, r2
 800953a:	d005      	beq.n	8009548 <sen5x_check_for_errors+0xac>
    Debug("sen5x Fan failure, fan is mechanically blocked or broken.");
 800953c:	4a0d      	ldr	r2, [pc, #52]	@ (8009574 <sen5x_check_for_errors+0xd8>)
 800953e:	4b08      	ldr	r3, [pc, #32]	@ (8009560 <sen5x_check_for_errors+0xc4>)
 8009540:	0019      	movs	r1, r3
 8009542:	2003      	movs	r0, #3
 8009544:	f004 fb3a 	bl	800dbbc <CreateLine>
  }
  return 1;
 8009548:	2301      	movs	r3, #1
}
 800954a:	0018      	movs	r0, r3
 800954c:	46bd      	mov	sp, r7
 800954e:	b002      	add	sp, #8
 8009550:	bd80      	pop	{r7, pc}
 8009552:	46c0      	nop			@ (mov r8, r8)
 8009554:	08023eb4 	.word	0x08023eb4
 8009558:	08023bac 	.word	0x08023bac
 800955c:	08023ee0 	.word	0x08023ee0
 8009560:	08023afc 	.word	0x08023afc
 8009564:	08023f00 	.word	0x08023f00
 8009568:	08023f1c 	.word	0x08023f1c
 800956c:	08023f40 	.word	0x08023f40
 8009570:	08023f60 	.word	0x08023f60
 8009574:	08023f74 	.word	0x08023f74

08009578 <set_light_on_state>:

void set_light_on_state(void) {
 8009578:	b580      	push	{r7, lr}
 800957a:	af00      	add	r7, sp, #0
  if (!sen5x_On) {
 800957c:	4b15      	ldr	r3, [pc, #84]	@ (80095d4 <set_light_on_state+0x5c>)
 800957e:	781b      	ldrb	r3, [r3, #0]
 8009580:	2201      	movs	r2, #1
 8009582:	4053      	eors	r3, r2
 8009584:	b2db      	uxtb	r3, r3
 8009586:	2b00      	cmp	r3, #0
 8009588:	d008      	beq.n	800959c <set_light_on_state+0x24>
    sen5x_Power_On();
 800958a:	f7ff fbff 	bl	8008d8c <sen5x_Power_On>
    Debug("sen5x powered on, warming up for 30 sec.");
 800958e:	4a12      	ldr	r2, [pc, #72]	@ (80095d8 <set_light_on_state+0x60>)
 8009590:	4b12      	ldr	r3, [pc, #72]	@ (80095dc <set_light_on_state+0x64>)
 8009592:	0019      	movs	r1, r3
 8009594:	2003      	movs	r0, #3
 8009596:	f004 fb11 	bl	800dbbc <CreateLine>
 800959a:	e00a      	b.n	80095b2 <set_light_on_state+0x3a>
  }
  else {
    sen5xReadTimer = HAL_GetTick();
 800959c:	f004 ff64 	bl	800e468 <HAL_GetTick>
 80095a0:	0002      	movs	r2, r0
 80095a2:	4b0f      	ldr	r3, [pc, #60]	@ (80095e0 <set_light_on_state+0x68>)
 80095a4:	601a      	str	r2, [r3, #0]
    Debug("sen5x already powered");
 80095a6:	4a0f      	ldr	r2, [pc, #60]	@ (80095e4 <set_light_on_state+0x6c>)
 80095a8:	4b0c      	ldr	r3, [pc, #48]	@ (80095dc <set_light_on_state+0x64>)
 80095aa:	0019      	movs	r1, r3
 80095ac:	2003      	movs	r0, #3
 80095ae:	f004 fb05 	bl	800dbbc <CreateLine>
  }
  if (sen5x_lightup_measurement()) {  // start full measurement mode
 80095b2:	f7ff fd4b 	bl	800904c <sen5x_lightup_measurement>
 80095b6:	1e03      	subs	r3, r0, #0
 80095b8:	d005      	beq.n	80095c6 <set_light_on_state+0x4e>
    Error("Error executing sen5x_lightup_measurement()");
 80095ba:	4a0b      	ldr	r2, [pc, #44]	@ (80095e8 <set_light_on_state+0x70>)
 80095bc:	4b0b      	ldr	r3, [pc, #44]	@ (80095ec <set_light_on_state+0x74>)
 80095be:	0019      	movs	r1, r3
 80095c0:	2001      	movs	r0, #1
 80095c2:	f004 fafb 	bl	800dbbc <CreateLine>
  }
  PMsamplesState = CHECK_SEN5X;
 80095c6:	4b0a      	ldr	r3, [pc, #40]	@ (80095f0 <set_light_on_state+0x78>)
 80095c8:	2203      	movs	r2, #3
 80095ca:	701a      	strb	r2, [r3, #0]
}
 80095cc:	46c0      	nop			@ (mov r8, r8)
 80095ce:	46bd      	mov	sp, r7
 80095d0:	bd80      	pop	{r7, pc}
 80095d2:	46c0      	nop			@ (mov r8, r8)
 80095d4:	2000125d 	.word	0x2000125d
 80095d8:	08023fb0 	.word	0x08023fb0
 80095dc:	08023afc 	.word	0x08023afc
 80095e0:	20001260 	.word	0x20001260
 80095e4:	08023fdc 	.word	0x08023fdc
 80095e8:	08023ff4 	.word	0x08023ff4
 80095ec:	08023bac 	.word	0x08023bac
 80095f0:	20000085 	.word	0x20000085

080095f4 <sen5x_statemachine>:

void sen5x_statemachine() {
 80095f4:	b580      	push	{r7, lr}
 80095f6:	b082      	sub	sp, #8
 80095f8:	af00      	add	r7, sp, #0
  bool data_ready = false;
 80095fa:	1dfb      	adds	r3, r7, #7
 80095fc:	2200      	movs	r2, #0
 80095fe:	701a      	strb	r2, [r3, #0]
  if (TimestampIsReached(sen5xReadTimer)) {
 8009600:	4b6a      	ldr	r3, [pc, #424]	@ (80097ac <sen5x_statemachine+0x1b8>)
 8009602:	681b      	ldr	r3, [r3, #0]
 8009604:	0018      	movs	r0, r3
 8009606:	f004 fa83 	bl	800db10 <TimestampIsReached>
 800960a:	1e03      	subs	r3, r0, #0
 800960c:	d100      	bne.n	8009610 <sen5x_statemachine+0x1c>
 800960e:	e0c8      	b.n	80097a2 <sen5x_statemachine+0x1ae>
    switch (PMsamplesState) {
 8009610:	4b67      	ldr	r3, [pc, #412]	@ (80097b0 <sen5x_statemachine+0x1bc>)
 8009612:	781b      	ldrb	r3, [r3, #0]
 8009614:	2b05      	cmp	r3, #5
 8009616:	d900      	bls.n	800961a <sen5x_statemachine+0x26>
 8009618:	e0c3      	b.n	80097a2 <sen5x_statemachine+0x1ae>
 800961a:	009a      	lsls	r2, r3, #2
 800961c:	4b65      	ldr	r3, [pc, #404]	@ (80097b4 <sen5x_statemachine+0x1c0>)
 800961e:	18d3      	adds	r3, r2, r3
 8009620:	681b      	ldr	r3, [r3, #0]
 8009622:	469f      	mov	pc, r3
    case S5X_DISABLED:
      Error("sen5x device is disabled due to too many errors");
 8009624:	4a64      	ldr	r2, [pc, #400]	@ (80097b8 <sen5x_statemachine+0x1c4>)
 8009626:	4b65      	ldr	r3, [pc, #404]	@ (80097bc <sen5x_statemachine+0x1c8>)
 8009628:	0019      	movs	r1, r3
 800962a:	2001      	movs	r0, #1
 800962c:	f004 fac6 	bl	800dbbc <CreateLine>
      sen5xReadTimer = HAL_GetTick() + 3141592; //some more less then an hour a message when continue operated.
 8009630:	f004 ff1a 	bl	800e468 <HAL_GetTick>
 8009634:	0003      	movs	r3, r0
 8009636:	4a62      	ldr	r2, [pc, #392]	@ (80097c0 <sen5x_statemachine+0x1cc>)
 8009638:	189a      	adds	r2, r3, r2
 800963a:	4b5c      	ldr	r3, [pc, #368]	@ (80097ac <sen5x_statemachine+0x1b8>)
 800963c:	601a      	str	r2, [r3, #0]
      break;
 800963e:	e0b0      	b.n	80097a2 <sen5x_statemachine+0x1ae>
    case LIGHT_OUT:
//      Debug("state is LIGHT_OUT");
      sen5xReadTimer = HAL_GetTick() + 22800; // about every 30s when started up
 8009640:	f004 ff12 	bl	800e468 <HAL_GetTick>
 8009644:	0003      	movs	r3, r0
 8009646:	4a5f      	ldr	r2, [pc, #380]	@ (80097c4 <sen5x_statemachine+0x1d0>)
 8009648:	189a      	adds	r2, r3, r2
 800964a:	4b58      	ldr	r3, [pc, #352]	@ (80097ac <sen5x_statemachine+0x1b8>)
 800964c:	601a      	str	r2, [r3, #0]
      set_light_on_state();
 800964e:	f7ff ff93 	bl	8009578 <set_light_on_state>
      break;
 8009652:	e0a6      	b.n	80097a2 <sen5x_statemachine+0x1ae>
    case CHECK_SEN5X:
//      Debug("state is CHECK_SEN5X");
      PMsamplesState = LIGHT_ON;
 8009654:	4b56      	ldr	r3, [pc, #344]	@ (80097b0 <sen5x_statemachine+0x1bc>)
 8009656:	2202      	movs	r2, #2
 8009658:	701a      	strb	r2, [r3, #0]
      if (sen5xErrors > 5) {
 800965a:	4b5b      	ldr	r3, [pc, #364]	@ (80097c8 <sen5x_statemachine+0x1d4>)
 800965c:	781b      	ldrb	r3, [r3, #0]
 800965e:	2b05      	cmp	r3, #5
 8009660:	d905      	bls.n	800966e <sen5x_statemachine+0x7a>
        PMsamplesState = S5X_DISABLED;
 8009662:	4b53      	ldr	r3, [pc, #332]	@ (80097b0 <sen5x_statemachine+0x1bc>)
 8009664:	2200      	movs	r2, #0
 8009666:	701a      	strb	r2, [r3, #0]
        sen5x_Power_Off();
 8009668:	f7ff fbb0 	bl	8008dcc <sen5x_Power_Off>
          }
          sen5xErrors++;
          sen5xReadTimer = HAL_GetTick() + 150;
        }
      }
      break;
 800966c:	e096      	b.n	800979c <sen5x_statemachine+0x1a8>
        if (sen5x_check_for_errors()) {
 800966e:	f7ff ff15 	bl	800949c <sen5x_check_for_errors>
 8009672:	1e03      	subs	r3, r0, #0
 8009674:	d100      	bne.n	8009678 <sen5x_statemachine+0x84>
 8009676:	e091      	b.n	800979c <sen5x_statemachine+0x1a8>
          if (sen5x_device_reset()) {
 8009678:	f000 fbfe 	bl	8009e78 <sen5x_device_reset>
 800967c:	1e03      	subs	r3, r0, #0
 800967e:	d006      	beq.n	800968e <sen5x_statemachine+0x9a>
            Error("Error resetting sen5x");
 8009680:	4a52      	ldr	r2, [pc, #328]	@ (80097cc <sen5x_statemachine+0x1d8>)
 8009682:	4b4e      	ldr	r3, [pc, #312]	@ (80097bc <sen5x_statemachine+0x1c8>)
 8009684:	0019      	movs	r1, r3
 8009686:	2001      	movs	r0, #1
 8009688:	f004 fa98 	bl	800dbbc <CreateLine>
 800968c:	e005      	b.n	800969a <sen5x_statemachine+0xa6>
            Info("sen5x reset executed");
 800968e:	4a50      	ldr	r2, [pc, #320]	@ (80097d0 <sen5x_statemachine+0x1dc>)
 8009690:	4b50      	ldr	r3, [pc, #320]	@ (80097d4 <sen5x_statemachine+0x1e0>)
 8009692:	0019      	movs	r1, r3
 8009694:	2002      	movs	r0, #2
 8009696:	f004 fa91 	bl	800dbbc <CreateLine>
          sen5xErrors++;
 800969a:	4b4b      	ldr	r3, [pc, #300]	@ (80097c8 <sen5x_statemachine+0x1d4>)
 800969c:	781b      	ldrb	r3, [r3, #0]
 800969e:	3301      	adds	r3, #1
 80096a0:	b2da      	uxtb	r2, r3
 80096a2:	4b49      	ldr	r3, [pc, #292]	@ (80097c8 <sen5x_statemachine+0x1d4>)
 80096a4:	701a      	strb	r2, [r3, #0]
          sen5xReadTimer = HAL_GetTick() + 150;
 80096a6:	f004 fedf 	bl	800e468 <HAL_GetTick>
 80096aa:	0003      	movs	r3, r0
 80096ac:	3396      	adds	r3, #150	@ 0x96
 80096ae:	001a      	movs	r2, r3
 80096b0:	4b3e      	ldr	r3, [pc, #248]	@ (80097ac <sen5x_statemachine+0x1b8>)
 80096b2:	601a      	str	r2, [r3, #0]
      break;
 80096b4:	e072      	b.n	800979c <sen5x_statemachine+0x1a8>
    case LIGHT_ON:
//      Debug("state is LIGHT_ON");
      sen5x_read_data_ready(&data_ready);  // is new data ready?
 80096b6:	1dfb      	adds	r3, r7, #7
 80096b8:	0018      	movs	r0, r3
 80096ba:	f000 f8f9 	bl	80098b0 <sen5x_read_data_ready>
      if (data_ready) {
 80096be:	1dfb      	adds	r3, r7, #7
 80096c0:	781b      	ldrb	r3, [r3, #0]
 80096c2:	2b00      	cmp	r3, #0
 80096c4:	d100      	bne.n	80096c8 <sen5x_statemachine+0xd4>
 80096c6:	e06b      	b.n	80097a0 <sen5x_statemachine+0x1ac>
//        Debug("SEN5x dataready at tick %d", HAL_GetTick());
//        showTime();
        if (sen5x_measurement()) { // print the values
 80096c8:	f7ff fd70 	bl	80091ac <sen5x_measurement>
 80096cc:	1e03      	subs	r3, r0, #0
 80096ce:	d005      	beq.n	80096dc <sen5x_statemachine+0xe8>
          Error("Error executing sen5x_measurement()");
 80096d0:	4a41      	ldr	r2, [pc, #260]	@ (80097d8 <sen5x_statemachine+0x1e4>)
 80096d2:	4b3a      	ldr	r3, [pc, #232]	@ (80097bc <sen5x_statemachine+0x1c8>)
 80096d4:	0019      	movs	r1, r3
 80096d6:	2001      	movs	r0, #1
 80096d8:	f004 fa70 	bl	800dbbc <CreateLine>
        }
        if (sen5xSamples > 1) { // take 3 samples, show 1 sample before we continue in the state machine
 80096dc:	4b3f      	ldr	r3, [pc, #252]	@ (80097dc <sen5x_statemachine+0x1e8>)
 80096de:	781b      	ldrb	r3, [r3, #0]
 80096e0:	2b01      	cmp	r3, #1
 80096e2:	d902      	bls.n	80096ea <sen5x_statemachine+0xf6>
            PMsamplesState = CLEAN_FAN;
 80096e4:	4b32      	ldr	r3, [pc, #200]	@ (80097b0 <sen5x_statemachine+0x1bc>)
 80096e6:	2204      	movs	r2, #4
 80096e8:	701a      	strb	r2, [r3, #0]
        }
        sen5xSamples++;
 80096ea:	4b3c      	ldr	r3, [pc, #240]	@ (80097dc <sen5x_statemachine+0x1e8>)
 80096ec:	781b      	ldrb	r3, [r3, #0]
 80096ee:	3301      	adds	r3, #1
 80096f0:	b2da      	uxtb	r2, r3
 80096f2:	4b3a      	ldr	r3, [pc, #232]	@ (80097dc <sen5x_statemachine+0x1e8>)
 80096f4:	701a      	strb	r2, [r3, #0]
        if (sen5xSamples == 32) { // about two times a minute
 80096f6:	4b39      	ldr	r3, [pc, #228]	@ (80097dc <sen5x_statemachine+0x1e8>)
 80096f8:	781b      	ldrb	r3, [r3, #0]
 80096fa:	2b20      	cmp	r3, #32
 80096fc:	d150      	bne.n	80097a0 <sen5x_statemachine+0x1ac>
          sen5xSamples = 0;  // enable display on serial
 80096fe:	4b37      	ldr	r3, [pc, #220]	@ (80097dc <sen5x_statemachine+0x1e8>)
 8009700:	2200      	movs	r2, #0
 8009702:	701a      	strb	r2, [r3, #0]
        }
      }
      break;
 8009704:	e04c      	b.n	80097a0 <sen5x_statemachine+0x1ac>
    case CLEAN_FAN:
      // start the cleaning procedure once a week
//      Debug(" state is CLEAN_FAN");
      if ((RTC_GetWeekday() == 1) && !fanCleaningDone) {
 8009706:	f7fd f923 	bl	8006950 <RTC_GetWeekday>
 800970a:	0003      	movs	r3, r0
 800970c:	2b01      	cmp	r3, #1
 800970e:	d118      	bne.n	8009742 <sen5x_statemachine+0x14e>
 8009710:	4b33      	ldr	r3, [pc, #204]	@ (80097e0 <sen5x_statemachine+0x1ec>)
 8009712:	781b      	ldrb	r3, [r3, #0]
 8009714:	2201      	movs	r2, #1
 8009716:	4053      	eors	r3, r2
 8009718:	b2db      	uxtb	r3, r3
 800971a:	2b00      	cmp	r3, #0
 800971c:	d011      	beq.n	8009742 <sen5x_statemachine+0x14e>
        sen5x_start_fan_cleaning();
 800971e:	f000 f9ad 	bl	8009a7c <sen5x_start_fan_cleaning>
        Info("executing fan cleaning");
 8009722:	4a30      	ldr	r2, [pc, #192]	@ (80097e4 <sen5x_statemachine+0x1f0>)
 8009724:	4b2b      	ldr	r3, [pc, #172]	@ (80097d4 <sen5x_statemachine+0x1e0>)
 8009726:	0019      	movs	r1, r3
 8009728:	2002      	movs	r0, #2
 800972a:	f004 fa47 	bl	800dbbc <CreateLine>
        sen5xReadTimer = HAL_GetTick() + 10000;
 800972e:	f004 fe9b 	bl	800e468 <HAL_GetTick>
 8009732:	0003      	movs	r3, r0
 8009734:	4a2c      	ldr	r2, [pc, #176]	@ (80097e8 <sen5x_statemachine+0x1f4>)
 8009736:	189a      	adds	r2, r3, r2
 8009738:	4b1c      	ldr	r3, [pc, #112]	@ (80097ac <sen5x_statemachine+0x1b8>)
 800973a:	601a      	str	r2, [r3, #0]
        fanCleaningDone = true;
 800973c:	4b28      	ldr	r3, [pc, #160]	@ (80097e0 <sen5x_statemachine+0x1ec>)
 800973e:	2201      	movs	r2, #1
 8009740:	701a      	strb	r2, [r3, #0]
      }
      PMsamplesState = SAMPLES_TAKEN;
 8009742:	4b1b      	ldr	r3, [pc, #108]	@ (80097b0 <sen5x_statemachine+0x1bc>)
 8009744:	2205      	movs	r2, #5
 8009746:	701a      	strb	r2, [r3, #0]
      break;
 8009748:	e02b      	b.n	80097a2 <sen5x_statemachine+0x1ae>
    case SAMPLES_TAKEN:
//      Debug(" state is SAMPLES_TAKEN");
      if (!usbPluggedIn) {
 800974a:	4b28      	ldr	r3, [pc, #160]	@ (80097ec <sen5x_statemachine+0x1f8>)
 800974c:	781b      	ldrb	r3, [r3, #0]
 800974e:	2201      	movs	r2, #1
 8009750:	4053      	eors	r3, r2
 8009752:	b2db      	uxtb	r3, r3
 8009754:	2b00      	cmp	r3, #0
 8009756:	d015      	beq.n	8009784 <sen5x_statemachine+0x190>
        if (sen5x_extinguish_measurement()) {
 8009758:	f7ff fc9c 	bl	8009094 <sen5x_extinguish_measurement>
 800975c:	1e03      	subs	r3, r0, #0
 800975e:	d005      	beq.n	800976c <sen5x_statemachine+0x178>
          Error("Error executing sen5x_extinguish_measurement()");
 8009760:	4a23      	ldr	r2, [pc, #140]	@ (80097f0 <sen5x_statemachine+0x1fc>)
 8009762:	4b16      	ldr	r3, [pc, #88]	@ (80097bc <sen5x_statemachine+0x1c8>)
 8009764:	0019      	movs	r1, r3
 8009766:	2001      	movs	r0, #1
 8009768:	f004 fa28 	bl	800dbbc <CreateLine>
        }
        sen5xSamples = 0;
 800976c:	4b1b      	ldr	r3, [pc, #108]	@ (80097dc <sen5x_statemachine+0x1e8>)
 800976e:	2200      	movs	r2, #0
 8009770:	701a      	strb	r2, [r3, #0]
        sen5x_Power_Off();
 8009772:	f7ff fb2b 	bl	8008dcc <sen5x_Power_Off>
        SetPMSensorStatus(false);
 8009776:	2000      	movs	r0, #0
 8009778:	f7fe fcc6 	bl	8008108 <SetPMSensorStatus>
        PMsamplesState = LIGHT_OUT;
 800977c:	4b0c      	ldr	r3, [pc, #48]	@ (80097b0 <sen5x_statemachine+0x1bc>)
 800977e:	2201      	movs	r2, #1
 8009780:	701a      	strb	r2, [r3, #0]
 8009782:	e002      	b.n	800978a <sen5x_statemachine+0x196>
      }
      else {
        PMsamplesState = CHECK_SEN5X;
 8009784:	4b0a      	ldr	r3, [pc, #40]	@ (80097b0 <sen5x_statemachine+0x1bc>)
 8009786:	2203      	movs	r2, #3
 8009788:	701a      	strb	r2, [r3, #0]
      }
      sen5xReadTimer = HAL_GetTick() + 1000;
 800978a:	f004 fe6d 	bl	800e468 <HAL_GetTick>
 800978e:	0003      	movs	r3, r0
 8009790:	22fa      	movs	r2, #250	@ 0xfa
 8009792:	0092      	lsls	r2, r2, #2
 8009794:	189a      	adds	r2, r3, r2
 8009796:	4b05      	ldr	r3, [pc, #20]	@ (80097ac <sen5x_statemachine+0x1b8>)
 8009798:	601a      	str	r2, [r3, #0]
    }
  }
}
 800979a:	e002      	b.n	80097a2 <sen5x_statemachine+0x1ae>
      break;
 800979c:	46c0      	nop			@ (mov r8, r8)
 800979e:	e000      	b.n	80097a2 <sen5x_statemachine+0x1ae>
      break;
 80097a0:	46c0      	nop			@ (mov r8, r8)
}
 80097a2:	46c0      	nop			@ (mov r8, r8)
 80097a4:	46bd      	mov	sp, r7
 80097a6:	b002      	add	sp, #8
 80097a8:	bd80      	pop	{r7, pc}
 80097aa:	46c0      	nop			@ (mov r8, r8)
 80097ac:	20001260 	.word	0x20001260
 80097b0:	20000085 	.word	0x20000085
 80097b4:	08024924 	.word	0x08024924
 80097b8:	08024020 	.word	0x08024020
 80097bc:	08023bac 	.word	0x08023bac
 80097c0:	002fefd8 	.word	0x002fefd8
 80097c4:	00005910 	.word	0x00005910
 80097c8:	20001265 	.word	0x20001265
 80097cc:	08024050 	.word	0x08024050
 80097d0:	08024068 	.word	0x08024068
 80097d4:	08023b24 	.word	0x08023b24
 80097d8:	08024080 	.word	0x08024080
 80097dc:	20001264 	.word	0x20001264
 80097e0:	2000125c 	.word	0x2000125c
 80097e4:	080240a4 	.word	0x080240a4
 80097e8:	00002710 	.word	0x00002710
 80097ec:	200021e5 	.word	0x200021e5
 80097f0:	080240bc 	.word	0x080240bc

080097f4 <sen5x_start_measurement>:
#include "sensirion_i2c.h"
#include "main.h"

#define SEN5X_I2C_ADDRESS 0x69

int16_t sen5x_start_measurement(void) {
 80097f4:	b590      	push	{r4, r7, lr}
 80097f6:	b083      	sub	sp, #12
 80097f8:	af00      	add	r7, sp, #0
    int16_t error;
    uint8_t buffer[2];
    uint16_t offset = 0;
 80097fa:	1dbb      	adds	r3, r7, #6
 80097fc:	2200      	movs	r2, #0
 80097fe:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0x21);
 8009800:	1dbc      	adds	r4, r7, #6
 8009802:	1dbb      	adds	r3, r7, #6
 8009804:	8819      	ldrh	r1, [r3, #0]
 8009806:	003b      	movs	r3, r7
 8009808:	2221      	movs	r2, #33	@ 0x21
 800980a:	0018      	movs	r0, r3
 800980c:	f001 fb28 	bl	800ae60 <sensirion_i2c_add_command_to_buffer>
 8009810:	0003      	movs	r3, r0
 8009812:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 8009814:	1d3c      	adds	r4, r7, #4
 8009816:	1dbb      	adds	r3, r7, #6
 8009818:	881a      	ldrh	r2, [r3, #0]
 800981a:	003b      	movs	r3, r7
 800981c:	0019      	movs	r1, r3
 800981e:	2069      	movs	r0, #105	@ 0x69
 8009820:	f001 fba2 	bl	800af68 <sensirion_i2c_write_data>
 8009824:	0003      	movs	r3, r0
 8009826:	8023      	strh	r3, [r4, #0]
    if (error) {
 8009828:	1d3b      	adds	r3, r7, #4
 800982a:	2200      	movs	r2, #0
 800982c:	5e9b      	ldrsh	r3, [r3, r2]
 800982e:	2b00      	cmp	r3, #0
 8009830:	d003      	beq.n	800983a <sen5x_start_measurement+0x46>
        return error;
 8009832:	1d3b      	adds	r3, r7, #4
 8009834:	2200      	movs	r2, #0
 8009836:	5e9b      	ldrsh	r3, [r3, r2]
 8009838:	e004      	b.n	8009844 <sen5x_start_measurement+0x50>
    }
    sensirion_i2c_hal_sleep_usec(50000);
 800983a:	4b04      	ldr	r3, [pc, #16]	@ (800984c <sen5x_start_measurement+0x58>)
 800983c:	0018      	movs	r0, r3
 800983e:	f7ff fe0d 	bl	800945c <sensirion_i2c_hal_sleep_usec>
    return NO_ERROR;
 8009842:	2300      	movs	r3, #0
}
 8009844:	0018      	movs	r0, r3
 8009846:	46bd      	mov	sp, r7
 8009848:	b003      	add	sp, #12
 800984a:	bd90      	pop	{r4, r7, pc}
 800984c:	0000c350 	.word	0x0000c350

08009850 <sen5x_stop_measurement>:
    }
    sensirion_i2c_hal_sleep_usec(50000);
    return NO_ERROR;
}

int16_t sen5x_stop_measurement(void) {
 8009850:	b590      	push	{r4, r7, lr}
 8009852:	b083      	sub	sp, #12
 8009854:	af00      	add	r7, sp, #0
    int16_t error;
    uint8_t buffer[2];
    uint16_t offset = 0;
 8009856:	1dbb      	adds	r3, r7, #6
 8009858:	2200      	movs	r2, #0
 800985a:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0x104);
 800985c:	1dbc      	adds	r4, r7, #6
 800985e:	2382      	movs	r3, #130	@ 0x82
 8009860:	005a      	lsls	r2, r3, #1
 8009862:	1dbb      	adds	r3, r7, #6
 8009864:	8819      	ldrh	r1, [r3, #0]
 8009866:	003b      	movs	r3, r7
 8009868:	0018      	movs	r0, r3
 800986a:	f001 faf9 	bl	800ae60 <sensirion_i2c_add_command_to_buffer>
 800986e:	0003      	movs	r3, r0
 8009870:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 8009872:	1d3c      	adds	r4, r7, #4
 8009874:	1dbb      	adds	r3, r7, #6
 8009876:	881a      	ldrh	r2, [r3, #0]
 8009878:	003b      	movs	r3, r7
 800987a:	0019      	movs	r1, r3
 800987c:	2069      	movs	r0, #105	@ 0x69
 800987e:	f001 fb73 	bl	800af68 <sensirion_i2c_write_data>
 8009882:	0003      	movs	r3, r0
 8009884:	8023      	strh	r3, [r4, #0]
    if (error) {
 8009886:	1d3b      	adds	r3, r7, #4
 8009888:	2200      	movs	r2, #0
 800988a:	5e9b      	ldrsh	r3, [r3, r2]
 800988c:	2b00      	cmp	r3, #0
 800988e:	d003      	beq.n	8009898 <sen5x_stop_measurement+0x48>
        return error;
 8009890:	1d3b      	adds	r3, r7, #4
 8009892:	2200      	movs	r2, #0
 8009894:	5e9b      	ldrsh	r3, [r3, r2]
 8009896:	e004      	b.n	80098a2 <sen5x_stop_measurement+0x52>
    }
    sensirion_i2c_hal_sleep_usec(200000);
 8009898:	4b04      	ldr	r3, [pc, #16]	@ (80098ac <sen5x_stop_measurement+0x5c>)
 800989a:	0018      	movs	r0, r3
 800989c:	f7ff fdde 	bl	800945c <sensirion_i2c_hal_sleep_usec>
    return NO_ERROR;
 80098a0:	2300      	movs	r3, #0
}
 80098a2:	0018      	movs	r0, r3
 80098a4:	46bd      	mov	sp, r7
 80098a6:	b003      	add	sp, #12
 80098a8:	bd90      	pop	{r4, r7, pc}
 80098aa:	46c0      	nop			@ (mov r8, r8)
 80098ac:	00030d40 	.word	0x00030d40

080098b0 <sen5x_read_data_ready>:

int16_t sen5x_read_data_ready(bool* data_ready) {
 80098b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80098b2:	b085      	sub	sp, #20
 80098b4:	af00      	add	r7, sp, #0
 80098b6:	6078      	str	r0, [r7, #4]
    int16_t error;
    uint8_t buffer[3];
    uint16_t offset = 0;
 80098b8:	250e      	movs	r5, #14
 80098ba:	197b      	adds	r3, r7, r5
 80098bc:	2200      	movs	r2, #0
 80098be:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0x202);
 80098c0:	197c      	adds	r4, r7, r5
 80098c2:	4a22      	ldr	r2, [pc, #136]	@ (800994c <sen5x_read_data_ready+0x9c>)
 80098c4:	197b      	adds	r3, r7, r5
 80098c6:	8819      	ldrh	r1, [r3, #0]
 80098c8:	2308      	movs	r3, #8
 80098ca:	18fb      	adds	r3, r7, r3
 80098cc:	0018      	movs	r0, r3
 80098ce:	f001 fac7 	bl	800ae60 <sensirion_i2c_add_command_to_buffer>
 80098d2:	0003      	movs	r3, r0
 80098d4:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 80098d6:	260c      	movs	r6, #12
 80098d8:	19bc      	adds	r4, r7, r6
 80098da:	197b      	adds	r3, r7, r5
 80098dc:	881a      	ldrh	r2, [r3, #0]
 80098de:	2308      	movs	r3, #8
 80098e0:	18fb      	adds	r3, r7, r3
 80098e2:	0019      	movs	r1, r3
 80098e4:	2069      	movs	r0, #105	@ 0x69
 80098e6:	f001 fb3f 	bl	800af68 <sensirion_i2c_write_data>
 80098ea:	0003      	movs	r3, r0
 80098ec:	8023      	strh	r3, [r4, #0]
    if (error) {
 80098ee:	19bb      	adds	r3, r7, r6
 80098f0:	2200      	movs	r2, #0
 80098f2:	5e9b      	ldrsh	r3, [r3, r2]
 80098f4:	2b00      	cmp	r3, #0
 80098f6:	d003      	beq.n	8009900 <sen5x_read_data_ready+0x50>
        return error;
 80098f8:	19bb      	adds	r3, r7, r6
 80098fa:	2200      	movs	r2, #0
 80098fc:	5e9b      	ldrsh	r3, [r3, r2]
 80098fe:	e020      	b.n	8009942 <sen5x_read_data_ready+0x92>
    }

    sensirion_i2c_hal_sleep_usec(20000);
 8009900:	4b13      	ldr	r3, [pc, #76]	@ (8009950 <sen5x_read_data_ready+0xa0>)
 8009902:	0018      	movs	r0, r3
 8009904:	f7ff fdaa 	bl	800945c <sensirion_i2c_hal_sleep_usec>

    error = sensirion_i2c_read_data_inplace(SEN5X_I2C_ADDRESS, &buffer[0], 2);
 8009908:	250c      	movs	r5, #12
 800990a:	197c      	adds	r4, r7, r5
 800990c:	2308      	movs	r3, #8
 800990e:	18fb      	adds	r3, r7, r3
 8009910:	2202      	movs	r2, #2
 8009912:	0019      	movs	r1, r3
 8009914:	2069      	movs	r0, #105	@ 0x69
 8009916:	f001 fb3f 	bl	800af98 <sensirion_i2c_read_data_inplace>
 800991a:	0003      	movs	r3, r0
 800991c:	8023      	strh	r3, [r4, #0]
    if (error) {
 800991e:	197b      	adds	r3, r7, r5
 8009920:	2200      	movs	r2, #0
 8009922:	5e9b      	ldrsh	r3, [r3, r2]
 8009924:	2b00      	cmp	r3, #0
 8009926:	d003      	beq.n	8009930 <sen5x_read_data_ready+0x80>
        return error;
 8009928:	197b      	adds	r3, r7, r5
 800992a:	2200      	movs	r2, #0
 800992c:	5e9b      	ldrsh	r3, [r3, r2]
 800992e:	e008      	b.n	8009942 <sen5x_read_data_ready+0x92>
    }
    *data_ready = buffer[1];
 8009930:	2308      	movs	r3, #8
 8009932:	18fb      	adds	r3, r7, r3
 8009934:	785b      	ldrb	r3, [r3, #1]
 8009936:	1e5a      	subs	r2, r3, #1
 8009938:	4193      	sbcs	r3, r2
 800993a:	b2da      	uxtb	r2, r3
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	701a      	strb	r2, [r3, #0]
    return NO_ERROR;
 8009940:	2300      	movs	r3, #0
}
 8009942:	0018      	movs	r0, r3
 8009944:	46bd      	mov	sp, r7
 8009946:	b005      	add	sp, #20
 8009948:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800994a:	46c0      	nop			@ (mov r8, r8)
 800994c:	00000202 	.word	0x00000202
 8009950:	00004e20 	.word	0x00004e20

08009954 <sen5x_read_measured_values>:
                                   uint16_t* mass_concentration_pm2p5,
                                   uint16_t* mass_concentration_pm4p0,
                                   uint16_t* mass_concentration_pm10p0,
                                   int16_t* ambient_humidity,
                                   int16_t* ambient_temperature,
                                   int16_t* voc_index, int16_t* nox_index) {
 8009954:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009956:	b08d      	sub	sp, #52	@ 0x34
 8009958:	af00      	add	r7, sp, #0
 800995a:	60f8      	str	r0, [r7, #12]
 800995c:	60b9      	str	r1, [r7, #8]
 800995e:	607a      	str	r2, [r7, #4]
 8009960:	603b      	str	r3, [r7, #0]
    int16_t error;
    uint8_t buffer[24];
    uint16_t offset = 0;
 8009962:	252e      	movs	r5, #46	@ 0x2e
 8009964:	197b      	adds	r3, r7, r5
 8009966:	2200      	movs	r2, #0
 8009968:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0x3C4);
 800996a:	197c      	adds	r4, r7, r5
 800996c:	23f1      	movs	r3, #241	@ 0xf1
 800996e:	009a      	lsls	r2, r3, #2
 8009970:	197b      	adds	r3, r7, r5
 8009972:	8819      	ldrh	r1, [r3, #0]
 8009974:	2314      	movs	r3, #20
 8009976:	18fb      	adds	r3, r7, r3
 8009978:	0018      	movs	r0, r3
 800997a:	f001 fa71 	bl	800ae60 <sensirion_i2c_add_command_to_buffer>
 800997e:	0003      	movs	r3, r0
 8009980:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 8009982:	262c      	movs	r6, #44	@ 0x2c
 8009984:	19bc      	adds	r4, r7, r6
 8009986:	197b      	adds	r3, r7, r5
 8009988:	881a      	ldrh	r2, [r3, #0]
 800998a:	2314      	movs	r3, #20
 800998c:	18fb      	adds	r3, r7, r3
 800998e:	0019      	movs	r1, r3
 8009990:	2069      	movs	r0, #105	@ 0x69
 8009992:	f001 fae9 	bl	800af68 <sensirion_i2c_write_data>
 8009996:	0003      	movs	r3, r0
 8009998:	8023      	strh	r3, [r4, #0]
    if (error) {
 800999a:	19bb      	adds	r3, r7, r6
 800999c:	2200      	movs	r2, #0
 800999e:	5e9b      	ldrsh	r3, [r3, r2]
 80099a0:	2b00      	cmp	r3, #0
 80099a2:	d003      	beq.n	80099ac <sen5x_read_measured_values+0x58>
        return error;
 80099a4:	19bb      	adds	r3, r7, r6
 80099a6:	2200      	movs	r2, #0
 80099a8:	5e9b      	ldrsh	r3, [r3, r2]
 80099aa:	e060      	b.n	8009a6e <sen5x_read_measured_values+0x11a>
    }

    sensirion_i2c_hal_sleep_usec(20000);
 80099ac:	4b32      	ldr	r3, [pc, #200]	@ (8009a78 <sen5x_read_measured_values+0x124>)
 80099ae:	0018      	movs	r0, r3
 80099b0:	f7ff fd54 	bl	800945c <sensirion_i2c_hal_sleep_usec>

    error = sensirion_i2c_read_data_inplace(SEN5X_I2C_ADDRESS, &buffer[0], 16);
 80099b4:	252c      	movs	r5, #44	@ 0x2c
 80099b6:	197c      	adds	r4, r7, r5
 80099b8:	2314      	movs	r3, #20
 80099ba:	18fb      	adds	r3, r7, r3
 80099bc:	2210      	movs	r2, #16
 80099be:	0019      	movs	r1, r3
 80099c0:	2069      	movs	r0, #105	@ 0x69
 80099c2:	f001 fae9 	bl	800af98 <sensirion_i2c_read_data_inplace>
 80099c6:	0003      	movs	r3, r0
 80099c8:	8023      	strh	r3, [r4, #0]
    if (error) {
 80099ca:	197b      	adds	r3, r7, r5
 80099cc:	2200      	movs	r2, #0
 80099ce:	5e9b      	ldrsh	r3, [r3, r2]
 80099d0:	2b00      	cmp	r3, #0
 80099d2:	d003      	beq.n	80099dc <sen5x_read_measured_values+0x88>
        return error;
 80099d4:	197b      	adds	r3, r7, r5
 80099d6:	2200      	movs	r2, #0
 80099d8:	5e9b      	ldrsh	r3, [r3, r2]
 80099da:	e048      	b.n	8009a6e <sen5x_read_measured_values+0x11a>
    }
    *mass_concentration_pm1p0 = sensirion_common_bytes_to_uint16_t(&buffer[0]);
 80099dc:	2414      	movs	r4, #20
 80099de:	193b      	adds	r3, r7, r4
 80099e0:	0018      	movs	r0, r3
 80099e2:	f000 fa79 	bl	8009ed8 <sensirion_common_bytes_to_uint16_t>
 80099e6:	0003      	movs	r3, r0
 80099e8:	001a      	movs	r2, r3
 80099ea:	68fb      	ldr	r3, [r7, #12]
 80099ec:	801a      	strh	r2, [r3, #0]
    *mass_concentration_pm2p5 = sensirion_common_bytes_to_uint16_t(&buffer[2]);
 80099ee:	193b      	adds	r3, r7, r4
 80099f0:	3302      	adds	r3, #2
 80099f2:	0018      	movs	r0, r3
 80099f4:	f000 fa70 	bl	8009ed8 <sensirion_common_bytes_to_uint16_t>
 80099f8:	0003      	movs	r3, r0
 80099fa:	001a      	movs	r2, r3
 80099fc:	68bb      	ldr	r3, [r7, #8]
 80099fe:	801a      	strh	r2, [r3, #0]
    *mass_concentration_pm4p0 = sensirion_common_bytes_to_uint16_t(&buffer[4]);
 8009a00:	193b      	adds	r3, r7, r4
 8009a02:	3304      	adds	r3, #4
 8009a04:	0018      	movs	r0, r3
 8009a06:	f000 fa67 	bl	8009ed8 <sensirion_common_bytes_to_uint16_t>
 8009a0a:	0003      	movs	r3, r0
 8009a0c:	001a      	movs	r2, r3
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	801a      	strh	r2, [r3, #0]
    *mass_concentration_pm10p0 = sensirion_common_bytes_to_uint16_t(&buffer[6]);
 8009a12:	193b      	adds	r3, r7, r4
 8009a14:	3306      	adds	r3, #6
 8009a16:	0018      	movs	r0, r3
 8009a18:	f000 fa5e 	bl	8009ed8 <sensirion_common_bytes_to_uint16_t>
 8009a1c:	0003      	movs	r3, r0
 8009a1e:	001a      	movs	r2, r3
 8009a20:	683b      	ldr	r3, [r7, #0]
 8009a22:	801a      	strh	r2, [r3, #0]
    *ambient_humidity = sensirion_common_bytes_to_int16_t(&buffer[8]);
 8009a24:	193b      	adds	r3, r7, r4
 8009a26:	3308      	adds	r3, #8
 8009a28:	0018      	movs	r0, r3
 8009a2a:	f000 fa81 	bl	8009f30 <sensirion_common_bytes_to_int16_t>
 8009a2e:	0003      	movs	r3, r0
 8009a30:	001a      	movs	r2, r3
 8009a32:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009a34:	801a      	strh	r2, [r3, #0]
    *ambient_temperature = sensirion_common_bytes_to_int16_t(&buffer[10]);
 8009a36:	193b      	adds	r3, r7, r4
 8009a38:	330a      	adds	r3, #10
 8009a3a:	0018      	movs	r0, r3
 8009a3c:	f000 fa78 	bl	8009f30 <sensirion_common_bytes_to_int16_t>
 8009a40:	0003      	movs	r3, r0
 8009a42:	001a      	movs	r2, r3
 8009a44:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009a46:	801a      	strh	r2, [r3, #0]
    *voc_index = sensirion_common_bytes_to_int16_t(&buffer[12]);
 8009a48:	193b      	adds	r3, r7, r4
 8009a4a:	330c      	adds	r3, #12
 8009a4c:	0018      	movs	r0, r3
 8009a4e:	f000 fa6f 	bl	8009f30 <sensirion_common_bytes_to_int16_t>
 8009a52:	0003      	movs	r3, r0
 8009a54:	001a      	movs	r2, r3
 8009a56:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009a58:	801a      	strh	r2, [r3, #0]
    *nox_index = sensirion_common_bytes_to_int16_t(&buffer[14]);
 8009a5a:	193b      	adds	r3, r7, r4
 8009a5c:	330e      	adds	r3, #14
 8009a5e:	0018      	movs	r0, r3
 8009a60:	f000 fa66 	bl	8009f30 <sensirion_common_bytes_to_int16_t>
 8009a64:	0003      	movs	r3, r0
 8009a66:	001a      	movs	r2, r3
 8009a68:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009a6a:	801a      	strh	r2, [r3, #0]
    return NO_ERROR;
 8009a6c:	2300      	movs	r3, #0
}
 8009a6e:	0018      	movs	r0, r3
 8009a70:	46bd      	mov	sp, r7
 8009a72:	b00d      	add	sp, #52	@ 0x34
 8009a74:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009a76:	46c0      	nop			@ (mov r8, r8)
 8009a78:	00004e20 	.word	0x00004e20

08009a7c <sen5x_start_fan_cleaning>:
        sensirion_common_bytes_to_uint16_t(&buffer[16]);
    *typical_particle_size = sensirion_common_bytes_to_uint16_t(&buffer[18]);
    return NO_ERROR;
}

int16_t sen5x_start_fan_cleaning(void) {
 8009a7c:	b590      	push	{r4, r7, lr}
 8009a7e:	b083      	sub	sp, #12
 8009a80:	af00      	add	r7, sp, #0
    int16_t error;
    uint8_t buffer[2];
    uint16_t offset = 0;
 8009a82:	1dbb      	adds	r3, r7, #6
 8009a84:	2200      	movs	r2, #0
 8009a86:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0x5607);
 8009a88:	1dbc      	adds	r4, r7, #6
 8009a8a:	4a12      	ldr	r2, [pc, #72]	@ (8009ad4 <sen5x_start_fan_cleaning+0x58>)
 8009a8c:	1dbb      	adds	r3, r7, #6
 8009a8e:	8819      	ldrh	r1, [r3, #0]
 8009a90:	003b      	movs	r3, r7
 8009a92:	0018      	movs	r0, r3
 8009a94:	f001 f9e4 	bl	800ae60 <sensirion_i2c_add_command_to_buffer>
 8009a98:	0003      	movs	r3, r0
 8009a9a:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 8009a9c:	1d3c      	adds	r4, r7, #4
 8009a9e:	1dbb      	adds	r3, r7, #6
 8009aa0:	881a      	ldrh	r2, [r3, #0]
 8009aa2:	003b      	movs	r3, r7
 8009aa4:	0019      	movs	r1, r3
 8009aa6:	2069      	movs	r0, #105	@ 0x69
 8009aa8:	f001 fa5e 	bl	800af68 <sensirion_i2c_write_data>
 8009aac:	0003      	movs	r3, r0
 8009aae:	8023      	strh	r3, [r4, #0]
    if (error) {
 8009ab0:	1d3b      	adds	r3, r7, #4
 8009ab2:	2200      	movs	r2, #0
 8009ab4:	5e9b      	ldrsh	r3, [r3, r2]
 8009ab6:	2b00      	cmp	r3, #0
 8009ab8:	d003      	beq.n	8009ac2 <sen5x_start_fan_cleaning+0x46>
        return error;
 8009aba:	1d3b      	adds	r3, r7, #4
 8009abc:	2200      	movs	r2, #0
 8009abe:	5e9b      	ldrsh	r3, [r3, r2]
 8009ac0:	e004      	b.n	8009acc <sen5x_start_fan_cleaning+0x50>
    }
    sensirion_i2c_hal_sleep_usec(20000);
 8009ac2:	4b05      	ldr	r3, [pc, #20]	@ (8009ad8 <sen5x_start_fan_cleaning+0x5c>)
 8009ac4:	0018      	movs	r0, r3
 8009ac6:	f7ff fcc9 	bl	800945c <sensirion_i2c_hal_sleep_usec>
    return NO_ERROR;
 8009aca:	2300      	movs	r3, #0
}
 8009acc:	0018      	movs	r0, r3
 8009ace:	46bd      	mov	sp, r7
 8009ad0:	b003      	add	sp, #12
 8009ad2:	bd90      	pop	{r4, r7, pc}
 8009ad4:	00005607 	.word	0x00005607
 8009ad8:	00004e20 	.word	0x00004e20

08009adc <sen5x_set_temperature_offset_parameters>:

int16_t sen5x_set_temperature_offset_parameters(int16_t temp_offset,
                                                int16_t slope,
                                                uint16_t time_constant) {
 8009adc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009ade:	b087      	sub	sp, #28
 8009ae0:	af00      	add	r7, sp, #0
 8009ae2:	0004      	movs	r4, r0
 8009ae4:	0008      	movs	r0, r1
 8009ae6:	0011      	movs	r1, r2
 8009ae8:	1dbb      	adds	r3, r7, #6
 8009aea:	1c22      	adds	r2, r4, #0
 8009aec:	801a      	strh	r2, [r3, #0]
 8009aee:	1d3b      	adds	r3, r7, #4
 8009af0:	1c02      	adds	r2, r0, #0
 8009af2:	801a      	strh	r2, [r3, #0]
 8009af4:	1cbb      	adds	r3, r7, #2
 8009af6:	1c0a      	adds	r2, r1, #0
 8009af8:	801a      	strh	r2, [r3, #0]
    int16_t error;
    uint8_t buffer[11];
    uint16_t offset = 0;
 8009afa:	2516      	movs	r5, #22
 8009afc:	197b      	adds	r3, r7, r5
 8009afe:	2200      	movs	r2, #0
 8009b00:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0x60B2);
 8009b02:	197c      	adds	r4, r7, r5
 8009b04:	4a25      	ldr	r2, [pc, #148]	@ (8009b9c <sen5x_set_temperature_offset_parameters+0xc0>)
 8009b06:	197b      	adds	r3, r7, r5
 8009b08:	8819      	ldrh	r1, [r3, #0]
 8009b0a:	2608      	movs	r6, #8
 8009b0c:	19bb      	adds	r3, r7, r6
 8009b0e:	0018      	movs	r0, r3
 8009b10:	f001 f9a6 	bl	800ae60 <sensirion_i2c_add_command_to_buffer>
 8009b14:	0003      	movs	r3, r0
 8009b16:	8023      	strh	r3, [r4, #0]

    offset =
        sensirion_i2c_add_int16_t_to_buffer(&buffer[0], offset, temp_offset);
 8009b18:	197c      	adds	r4, r7, r5
 8009b1a:	1dbb      	adds	r3, r7, #6
 8009b1c:	2200      	movs	r2, #0
 8009b1e:	5e9a      	ldrsh	r2, [r3, r2]
 8009b20:	197b      	adds	r3, r7, r5
 8009b22:	8819      	ldrh	r1, [r3, #0]
 8009b24:	19bb      	adds	r3, r7, r6
 8009b26:	0018      	movs	r0, r3
 8009b28:	f001 fa05 	bl	800af36 <sensirion_i2c_add_int16_t_to_buffer>
 8009b2c:	0003      	movs	r3, r0
 8009b2e:	8023      	strh	r3, [r4, #0]
    offset = sensirion_i2c_add_int16_t_to_buffer(&buffer[0], offset, slope);
 8009b30:	197c      	adds	r4, r7, r5
 8009b32:	1d3b      	adds	r3, r7, #4
 8009b34:	2200      	movs	r2, #0
 8009b36:	5e9a      	ldrsh	r2, [r3, r2]
 8009b38:	197b      	adds	r3, r7, r5
 8009b3a:	8819      	ldrh	r1, [r3, #0]
 8009b3c:	19bb      	adds	r3, r7, r6
 8009b3e:	0018      	movs	r0, r3
 8009b40:	f001 f9f9 	bl	800af36 <sensirion_i2c_add_int16_t_to_buffer>
 8009b44:	0003      	movs	r3, r0
 8009b46:	8023      	strh	r3, [r4, #0]
    offset =
        sensirion_i2c_add_uint16_t_to_buffer(&buffer[0], offset, time_constant);
 8009b48:	197c      	adds	r4, r7, r5
 8009b4a:	1cbb      	adds	r3, r7, #2
 8009b4c:	881a      	ldrh	r2, [r3, #0]
 8009b4e:	197b      	adds	r3, r7, r5
 8009b50:	8819      	ldrh	r1, [r3, #0]
 8009b52:	19bb      	adds	r3, r7, r6
 8009b54:	0018      	movs	r0, r3
 8009b56:	f001 f9af 	bl	800aeb8 <sensirion_i2c_add_uint16_t_to_buffer>
 8009b5a:	0003      	movs	r3, r0
 8009b5c:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 8009b5e:	2214      	movs	r2, #20
 8009b60:	18bc      	adds	r4, r7, r2
 8009b62:	197b      	adds	r3, r7, r5
 8009b64:	881a      	ldrh	r2, [r3, #0]
 8009b66:	19bb      	adds	r3, r7, r6
 8009b68:	0019      	movs	r1, r3
 8009b6a:	2069      	movs	r0, #105	@ 0x69
 8009b6c:	f001 f9fc 	bl	800af68 <sensirion_i2c_write_data>
 8009b70:	0003      	movs	r3, r0
 8009b72:	8023      	strh	r3, [r4, #0]
    if (error) {
 8009b74:	2214      	movs	r2, #20
 8009b76:	18bb      	adds	r3, r7, r2
 8009b78:	2100      	movs	r1, #0
 8009b7a:	5e5b      	ldrsh	r3, [r3, r1]
 8009b7c:	2b00      	cmp	r3, #0
 8009b7e:	d003      	beq.n	8009b88 <sen5x_set_temperature_offset_parameters+0xac>
        return error;
 8009b80:	18bb      	adds	r3, r7, r2
 8009b82:	2200      	movs	r2, #0
 8009b84:	5e9b      	ldrsh	r3, [r3, r2]
 8009b86:	e004      	b.n	8009b92 <sen5x_set_temperature_offset_parameters+0xb6>
    }
    sensirion_i2c_hal_sleep_usec(20000);
 8009b88:	4b05      	ldr	r3, [pc, #20]	@ (8009ba0 <sen5x_set_temperature_offset_parameters+0xc4>)
 8009b8a:	0018      	movs	r0, r3
 8009b8c:	f7ff fc66 	bl	800945c <sensirion_i2c_hal_sleep_usec>
    return NO_ERROR;
 8009b90:	2300      	movs	r3, #0
}
 8009b92:	0018      	movs	r0, r3
 8009b94:	46bd      	mov	sp, r7
 8009b96:	b007      	add	sp, #28
 8009b98:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009b9a:	46c0      	nop			@ (mov r8, r8)
 8009b9c:	000060b2 	.word	0x000060b2
 8009ba0:	00004e20 	.word	0x00004e20

08009ba4 <sen5x_get_product_name>:
    *interval = sensirion_common_bytes_to_uint32_t(&buffer[0]);
    return NO_ERROR;
}

int16_t sen5x_get_product_name(unsigned char* product_name,
                               uint8_t product_name_size) {
 8009ba4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009ba6:	b091      	sub	sp, #68	@ 0x44
 8009ba8:	af00      	add	r7, sp, #0
 8009baa:	6078      	str	r0, [r7, #4]
 8009bac:	000a      	movs	r2, r1
 8009bae:	1cfb      	adds	r3, r7, #3
 8009bb0:	701a      	strb	r2, [r3, #0]
    int16_t error;
    uint8_t buffer[48];
    uint16_t offset = 0;
 8009bb2:	253e      	movs	r5, #62	@ 0x3e
 8009bb4:	197b      	adds	r3, r7, r5
 8009bb6:	2200      	movs	r2, #0
 8009bb8:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0xD014);
 8009bba:	197c      	adds	r4, r7, r5
 8009bbc:	4a22      	ldr	r2, [pc, #136]	@ (8009c48 <sen5x_get_product_name+0xa4>)
 8009bbe:	197b      	adds	r3, r7, r5
 8009bc0:	8819      	ldrh	r1, [r3, #0]
 8009bc2:	230c      	movs	r3, #12
 8009bc4:	18fb      	adds	r3, r7, r3
 8009bc6:	0018      	movs	r0, r3
 8009bc8:	f001 f94a 	bl	800ae60 <sensirion_i2c_add_command_to_buffer>
 8009bcc:	0003      	movs	r3, r0
 8009bce:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 8009bd0:	263c      	movs	r6, #60	@ 0x3c
 8009bd2:	19bc      	adds	r4, r7, r6
 8009bd4:	197b      	adds	r3, r7, r5
 8009bd6:	881a      	ldrh	r2, [r3, #0]
 8009bd8:	230c      	movs	r3, #12
 8009bda:	18fb      	adds	r3, r7, r3
 8009bdc:	0019      	movs	r1, r3
 8009bde:	2069      	movs	r0, #105	@ 0x69
 8009be0:	f001 f9c2 	bl	800af68 <sensirion_i2c_write_data>
 8009be4:	0003      	movs	r3, r0
 8009be6:	8023      	strh	r3, [r4, #0]
    if (error) {
 8009be8:	19bb      	adds	r3, r7, r6
 8009bea:	2200      	movs	r2, #0
 8009bec:	5e9b      	ldrsh	r3, [r3, r2]
 8009bee:	2b00      	cmp	r3, #0
 8009bf0:	d003      	beq.n	8009bfa <sen5x_get_product_name+0x56>
        return error;
 8009bf2:	19bb      	adds	r3, r7, r6
 8009bf4:	2200      	movs	r2, #0
 8009bf6:	5e9b      	ldrsh	r3, [r3, r2]
 8009bf8:	e021      	b.n	8009c3e <sen5x_get_product_name+0x9a>
    }

    sensirion_i2c_hal_sleep_usec(50000);
 8009bfa:	4b14      	ldr	r3, [pc, #80]	@ (8009c4c <sen5x_get_product_name+0xa8>)
 8009bfc:	0018      	movs	r0, r3
 8009bfe:	f7ff fc2d 	bl	800945c <sensirion_i2c_hal_sleep_usec>

    error = sensirion_i2c_read_data_inplace(SEN5X_I2C_ADDRESS, &buffer[0], 32);
 8009c02:	253c      	movs	r5, #60	@ 0x3c
 8009c04:	197c      	adds	r4, r7, r5
 8009c06:	230c      	movs	r3, #12
 8009c08:	18fb      	adds	r3, r7, r3
 8009c0a:	2220      	movs	r2, #32
 8009c0c:	0019      	movs	r1, r3
 8009c0e:	2069      	movs	r0, #105	@ 0x69
 8009c10:	f001 f9c2 	bl	800af98 <sensirion_i2c_read_data_inplace>
 8009c14:	0003      	movs	r3, r0
 8009c16:	8023      	strh	r3, [r4, #0]
    if (error) {
 8009c18:	197b      	adds	r3, r7, r5
 8009c1a:	2200      	movs	r2, #0
 8009c1c:	5e9b      	ldrsh	r3, [r3, r2]
 8009c1e:	2b00      	cmp	r3, #0
 8009c20:	d003      	beq.n	8009c2a <sen5x_get_product_name+0x86>
        return error;
 8009c22:	197b      	adds	r3, r7, r5
 8009c24:	2200      	movs	r2, #0
 8009c26:	5e9b      	ldrsh	r3, [r3, r2]
 8009c28:	e009      	b.n	8009c3e <sen5x_get_product_name+0x9a>
    }
    sensirion_common_copy_bytes(&buffer[0], product_name, product_name_size);
 8009c2a:	1cfb      	adds	r3, r7, #3
 8009c2c:	781b      	ldrb	r3, [r3, #0]
 8009c2e:	b29a      	uxth	r2, r3
 8009c30:	6879      	ldr	r1, [r7, #4]
 8009c32:	230c      	movs	r3, #12
 8009c34:	18fb      	adds	r3, r7, r3
 8009c36:	0018      	movs	r0, r3
 8009c38:	f000 f988 	bl	8009f4c <sensirion_common_copy_bytes>
    return NO_ERROR;
 8009c3c:	2300      	movs	r3, #0
}
 8009c3e:	0018      	movs	r0, r3
 8009c40:	46bd      	mov	sp, r7
 8009c42:	b011      	add	sp, #68	@ 0x44
 8009c44:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009c46:	46c0      	nop			@ (mov r8, r8)
 8009c48:	0000d014 	.word	0x0000d014
 8009c4c:	0000c350 	.word	0x0000c350

08009c50 <sen5x_get_serial_number>:

int16_t sen5x_get_serial_number(unsigned char* serial_number,
                                uint8_t serial_number_size) {
 8009c50:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009c52:	b091      	sub	sp, #68	@ 0x44
 8009c54:	af00      	add	r7, sp, #0
 8009c56:	6078      	str	r0, [r7, #4]
 8009c58:	000a      	movs	r2, r1
 8009c5a:	1cfb      	adds	r3, r7, #3
 8009c5c:	701a      	strb	r2, [r3, #0]
    int16_t error;
    uint8_t buffer[48];
    uint16_t offset = 0;
 8009c5e:	253e      	movs	r5, #62	@ 0x3e
 8009c60:	197b      	adds	r3, r7, r5
 8009c62:	2200      	movs	r2, #0
 8009c64:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0xD033);
 8009c66:	197c      	adds	r4, r7, r5
 8009c68:	4a22      	ldr	r2, [pc, #136]	@ (8009cf4 <sen5x_get_serial_number+0xa4>)
 8009c6a:	197b      	adds	r3, r7, r5
 8009c6c:	8819      	ldrh	r1, [r3, #0]
 8009c6e:	230c      	movs	r3, #12
 8009c70:	18fb      	adds	r3, r7, r3
 8009c72:	0018      	movs	r0, r3
 8009c74:	f001 f8f4 	bl	800ae60 <sensirion_i2c_add_command_to_buffer>
 8009c78:	0003      	movs	r3, r0
 8009c7a:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 8009c7c:	263c      	movs	r6, #60	@ 0x3c
 8009c7e:	19bc      	adds	r4, r7, r6
 8009c80:	197b      	adds	r3, r7, r5
 8009c82:	881a      	ldrh	r2, [r3, #0]
 8009c84:	230c      	movs	r3, #12
 8009c86:	18fb      	adds	r3, r7, r3
 8009c88:	0019      	movs	r1, r3
 8009c8a:	2069      	movs	r0, #105	@ 0x69
 8009c8c:	f001 f96c 	bl	800af68 <sensirion_i2c_write_data>
 8009c90:	0003      	movs	r3, r0
 8009c92:	8023      	strh	r3, [r4, #0]
    if (error) {
 8009c94:	19bb      	adds	r3, r7, r6
 8009c96:	2200      	movs	r2, #0
 8009c98:	5e9b      	ldrsh	r3, [r3, r2]
 8009c9a:	2b00      	cmp	r3, #0
 8009c9c:	d003      	beq.n	8009ca6 <sen5x_get_serial_number+0x56>
        return error;
 8009c9e:	19bb      	adds	r3, r7, r6
 8009ca0:	2200      	movs	r2, #0
 8009ca2:	5e9b      	ldrsh	r3, [r3, r2]
 8009ca4:	e021      	b.n	8009cea <sen5x_get_serial_number+0x9a>
    }

    sensirion_i2c_hal_sleep_usec(50000);
 8009ca6:	4b14      	ldr	r3, [pc, #80]	@ (8009cf8 <sen5x_get_serial_number+0xa8>)
 8009ca8:	0018      	movs	r0, r3
 8009caa:	f7ff fbd7 	bl	800945c <sensirion_i2c_hal_sleep_usec>

    error = sensirion_i2c_read_data_inplace(SEN5X_I2C_ADDRESS, &buffer[0], 32);
 8009cae:	253c      	movs	r5, #60	@ 0x3c
 8009cb0:	197c      	adds	r4, r7, r5
 8009cb2:	230c      	movs	r3, #12
 8009cb4:	18fb      	adds	r3, r7, r3
 8009cb6:	2220      	movs	r2, #32
 8009cb8:	0019      	movs	r1, r3
 8009cba:	2069      	movs	r0, #105	@ 0x69
 8009cbc:	f001 f96c 	bl	800af98 <sensirion_i2c_read_data_inplace>
 8009cc0:	0003      	movs	r3, r0
 8009cc2:	8023      	strh	r3, [r4, #0]
    if (error) {
 8009cc4:	197b      	adds	r3, r7, r5
 8009cc6:	2200      	movs	r2, #0
 8009cc8:	5e9b      	ldrsh	r3, [r3, r2]
 8009cca:	2b00      	cmp	r3, #0
 8009ccc:	d003      	beq.n	8009cd6 <sen5x_get_serial_number+0x86>
        return error;
 8009cce:	197b      	adds	r3, r7, r5
 8009cd0:	2200      	movs	r2, #0
 8009cd2:	5e9b      	ldrsh	r3, [r3, r2]
 8009cd4:	e009      	b.n	8009cea <sen5x_get_serial_number+0x9a>
    }
    sensirion_common_copy_bytes(&buffer[0], serial_number, serial_number_size);
 8009cd6:	1cfb      	adds	r3, r7, #3
 8009cd8:	781b      	ldrb	r3, [r3, #0]
 8009cda:	b29a      	uxth	r2, r3
 8009cdc:	6879      	ldr	r1, [r7, #4]
 8009cde:	230c      	movs	r3, #12
 8009ce0:	18fb      	adds	r3, r7, r3
 8009ce2:	0018      	movs	r0, r3
 8009ce4:	f000 f932 	bl	8009f4c <sensirion_common_copy_bytes>
    return NO_ERROR;
 8009ce8:	2300      	movs	r3, #0
}
 8009cea:	0018      	movs	r0, r3
 8009cec:	46bd      	mov	sp, r7
 8009cee:	b011      	add	sp, #68	@ 0x44
 8009cf0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009cf2:	46c0      	nop			@ (mov r8, r8)
 8009cf4:	0000d033 	.word	0x0000d033
 8009cf8:	0000c350 	.word	0x0000c350

08009cfc <sen5x_get_version>:

int16_t sen5x_get_version(uint8_t* firmware_major, uint8_t* firmware_minor,
                          bool* firmware_debug, uint8_t* hardware_major,
                          uint8_t* hardware_minor, uint8_t* protocol_major,
                          uint8_t* protocol_minor) {
 8009cfc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009cfe:	b089      	sub	sp, #36	@ 0x24
 8009d00:	af00      	add	r7, sp, #0
 8009d02:	60f8      	str	r0, [r7, #12]
 8009d04:	60b9      	str	r1, [r7, #8]
 8009d06:	607a      	str	r2, [r7, #4]
 8009d08:	603b      	str	r3, [r7, #0]
    int16_t error;
    uint8_t buffer[12];
    uint16_t offset = 0;
 8009d0a:	251e      	movs	r5, #30
 8009d0c:	197b      	adds	r3, r7, r5
 8009d0e:	2200      	movs	r2, #0
 8009d10:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0xD100);
 8009d12:	197c      	adds	r4, r7, r5
 8009d14:	23d1      	movs	r3, #209	@ 0xd1
 8009d16:	021a      	lsls	r2, r3, #8
 8009d18:	197b      	adds	r3, r7, r5
 8009d1a:	8819      	ldrh	r1, [r3, #0]
 8009d1c:	2310      	movs	r3, #16
 8009d1e:	18fb      	adds	r3, r7, r3
 8009d20:	0018      	movs	r0, r3
 8009d22:	f001 f89d 	bl	800ae60 <sensirion_i2c_add_command_to_buffer>
 8009d26:	0003      	movs	r3, r0
 8009d28:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 8009d2a:	261c      	movs	r6, #28
 8009d2c:	19bc      	adds	r4, r7, r6
 8009d2e:	197b      	adds	r3, r7, r5
 8009d30:	881a      	ldrh	r2, [r3, #0]
 8009d32:	2310      	movs	r3, #16
 8009d34:	18fb      	adds	r3, r7, r3
 8009d36:	0019      	movs	r1, r3
 8009d38:	2069      	movs	r0, #105	@ 0x69
 8009d3a:	f001 f915 	bl	800af68 <sensirion_i2c_write_data>
 8009d3e:	0003      	movs	r3, r0
 8009d40:	8023      	strh	r3, [r4, #0]
    if (error) {
 8009d42:	19bb      	adds	r3, r7, r6
 8009d44:	2200      	movs	r2, #0
 8009d46:	5e9b      	ldrsh	r3, [r3, r2]
 8009d48:	2b00      	cmp	r3, #0
 8009d4a:	d003      	beq.n	8009d54 <sen5x_get_version+0x58>
        return error;
 8009d4c:	19bb      	adds	r3, r7, r6
 8009d4e:	2200      	movs	r2, #0
 8009d50:	5e9b      	ldrsh	r3, [r3, r2]
 8009d52:	e038      	b.n	8009dc6 <sen5x_get_version+0xca>
    }

    sensirion_i2c_hal_sleep_usec(20000);
 8009d54:	4b1e      	ldr	r3, [pc, #120]	@ (8009dd0 <sen5x_get_version+0xd4>)
 8009d56:	0018      	movs	r0, r3
 8009d58:	f7ff fb80 	bl	800945c <sensirion_i2c_hal_sleep_usec>

    error = sensirion_i2c_read_data_inplace(SEN5X_I2C_ADDRESS, &buffer[0], 8);
 8009d5c:	251c      	movs	r5, #28
 8009d5e:	197c      	adds	r4, r7, r5
 8009d60:	2310      	movs	r3, #16
 8009d62:	18fb      	adds	r3, r7, r3
 8009d64:	2208      	movs	r2, #8
 8009d66:	0019      	movs	r1, r3
 8009d68:	2069      	movs	r0, #105	@ 0x69
 8009d6a:	f001 f915 	bl	800af98 <sensirion_i2c_read_data_inplace>
 8009d6e:	0003      	movs	r3, r0
 8009d70:	8023      	strh	r3, [r4, #0]
    if (error) {
 8009d72:	197b      	adds	r3, r7, r5
 8009d74:	2200      	movs	r2, #0
 8009d76:	5e9b      	ldrsh	r3, [r3, r2]
 8009d78:	2b00      	cmp	r3, #0
 8009d7a:	d003      	beq.n	8009d84 <sen5x_get_version+0x88>
        return error;
 8009d7c:	197b      	adds	r3, r7, r5
 8009d7e:	2200      	movs	r2, #0
 8009d80:	5e9b      	ldrsh	r3, [r3, r2]
 8009d82:	e020      	b.n	8009dc6 <sen5x_get_version+0xca>
    }
    *firmware_major = buffer[0];
 8009d84:	2110      	movs	r1, #16
 8009d86:	187b      	adds	r3, r7, r1
 8009d88:	781a      	ldrb	r2, [r3, #0]
 8009d8a:	68fb      	ldr	r3, [r7, #12]
 8009d8c:	701a      	strb	r2, [r3, #0]
    *firmware_minor = buffer[1];
 8009d8e:	187b      	adds	r3, r7, r1
 8009d90:	785a      	ldrb	r2, [r3, #1]
 8009d92:	68bb      	ldr	r3, [r7, #8]
 8009d94:	701a      	strb	r2, [r3, #0]
    *firmware_debug = buffer[2];
 8009d96:	187b      	adds	r3, r7, r1
 8009d98:	789b      	ldrb	r3, [r3, #2]
 8009d9a:	1e5a      	subs	r2, r3, #1
 8009d9c:	4193      	sbcs	r3, r2
 8009d9e:	b2da      	uxtb	r2, r3
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	701a      	strb	r2, [r3, #0]
    *hardware_major = buffer[3];
 8009da4:	187b      	adds	r3, r7, r1
 8009da6:	78da      	ldrb	r2, [r3, #3]
 8009da8:	683b      	ldr	r3, [r7, #0]
 8009daa:	701a      	strb	r2, [r3, #0]
    *hardware_minor = buffer[4];
 8009dac:	187b      	adds	r3, r7, r1
 8009dae:	791a      	ldrb	r2, [r3, #4]
 8009db0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009db2:	701a      	strb	r2, [r3, #0]
    *protocol_major = buffer[5];
 8009db4:	187b      	adds	r3, r7, r1
 8009db6:	795a      	ldrb	r2, [r3, #5]
 8009db8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009dba:	701a      	strb	r2, [r3, #0]
    *protocol_minor = buffer[6];
 8009dbc:	187b      	adds	r3, r7, r1
 8009dbe:	799a      	ldrb	r2, [r3, #6]
 8009dc0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009dc2:	701a      	strb	r2, [r3, #0]
    return NO_ERROR;
 8009dc4:	2300      	movs	r3, #0
}
 8009dc6:	0018      	movs	r0, r3
 8009dc8:	46bd      	mov	sp, r7
 8009dca:	b009      	add	sp, #36	@ 0x24
 8009dcc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009dce:	46c0      	nop			@ (mov r8, r8)
 8009dd0:	00004e20 	.word	0x00004e20

08009dd4 <sen5x_read_device_status>:

int16_t sen5x_read_device_status(uint32_t* device_status) {
 8009dd4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009dd6:	b087      	sub	sp, #28
 8009dd8:	af00      	add	r7, sp, #0
 8009dda:	6078      	str	r0, [r7, #4]
    int16_t error;
    uint8_t buffer[6];
    uint16_t offset = 0;
 8009ddc:	2516      	movs	r5, #22
 8009dde:	197b      	adds	r3, r7, r5
 8009de0:	2200      	movs	r2, #0
 8009de2:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0xD206);
 8009de4:	197c      	adds	r4, r7, r5
 8009de6:	4a22      	ldr	r2, [pc, #136]	@ (8009e70 <sen5x_read_device_status+0x9c>)
 8009de8:	197b      	adds	r3, r7, r5
 8009dea:	8819      	ldrh	r1, [r3, #0]
 8009dec:	230c      	movs	r3, #12
 8009dee:	18fb      	adds	r3, r7, r3
 8009df0:	0018      	movs	r0, r3
 8009df2:	f001 f835 	bl	800ae60 <sensirion_i2c_add_command_to_buffer>
 8009df6:	0003      	movs	r3, r0
 8009df8:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 8009dfa:	2614      	movs	r6, #20
 8009dfc:	19bc      	adds	r4, r7, r6
 8009dfe:	197b      	adds	r3, r7, r5
 8009e00:	881a      	ldrh	r2, [r3, #0]
 8009e02:	230c      	movs	r3, #12
 8009e04:	18fb      	adds	r3, r7, r3
 8009e06:	0019      	movs	r1, r3
 8009e08:	2069      	movs	r0, #105	@ 0x69
 8009e0a:	f001 f8ad 	bl	800af68 <sensirion_i2c_write_data>
 8009e0e:	0003      	movs	r3, r0
 8009e10:	8023      	strh	r3, [r4, #0]
    if (error) {
 8009e12:	19bb      	adds	r3, r7, r6
 8009e14:	2200      	movs	r2, #0
 8009e16:	5e9b      	ldrsh	r3, [r3, r2]
 8009e18:	2b00      	cmp	r3, #0
 8009e1a:	d003      	beq.n	8009e24 <sen5x_read_device_status+0x50>
        return error;
 8009e1c:	19bb      	adds	r3, r7, r6
 8009e1e:	2200      	movs	r2, #0
 8009e20:	5e9b      	ldrsh	r3, [r3, r2]
 8009e22:	e020      	b.n	8009e66 <sen5x_read_device_status+0x92>
    }

    sensirion_i2c_hal_sleep_usec(20000);
 8009e24:	4b13      	ldr	r3, [pc, #76]	@ (8009e74 <sen5x_read_device_status+0xa0>)
 8009e26:	0018      	movs	r0, r3
 8009e28:	f7ff fb18 	bl	800945c <sensirion_i2c_hal_sleep_usec>

    error = sensirion_i2c_read_data_inplace(SEN5X_I2C_ADDRESS, &buffer[0], 4);
 8009e2c:	2514      	movs	r5, #20
 8009e2e:	197c      	adds	r4, r7, r5
 8009e30:	230c      	movs	r3, #12
 8009e32:	18fb      	adds	r3, r7, r3
 8009e34:	2204      	movs	r2, #4
 8009e36:	0019      	movs	r1, r3
 8009e38:	2069      	movs	r0, #105	@ 0x69
 8009e3a:	f001 f8ad 	bl	800af98 <sensirion_i2c_read_data_inplace>
 8009e3e:	0003      	movs	r3, r0
 8009e40:	8023      	strh	r3, [r4, #0]
    if (error) {
 8009e42:	197b      	adds	r3, r7, r5
 8009e44:	2200      	movs	r2, #0
 8009e46:	5e9b      	ldrsh	r3, [r3, r2]
 8009e48:	2b00      	cmp	r3, #0
 8009e4a:	d003      	beq.n	8009e54 <sen5x_read_device_status+0x80>
        return error;
 8009e4c:	197b      	adds	r3, r7, r5
 8009e4e:	2200      	movs	r2, #0
 8009e50:	5e9b      	ldrsh	r3, [r3, r2]
 8009e52:	e008      	b.n	8009e66 <sen5x_read_device_status+0x92>
    }
    *device_status = sensirion_common_bytes_to_uint32_t(&buffer[0]);
 8009e54:	230c      	movs	r3, #12
 8009e56:	18fb      	adds	r3, r7, r3
 8009e58:	0018      	movs	r0, r3
 8009e5a:	f000 f850 	bl	8009efe <sensirion_common_bytes_to_uint32_t>
 8009e5e:	0002      	movs	r2, r0
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	601a      	str	r2, [r3, #0]
    return NO_ERROR;
 8009e64:	2300      	movs	r3, #0
}
 8009e66:	0018      	movs	r0, r3
 8009e68:	46bd      	mov	sp, r7
 8009e6a:	b007      	add	sp, #28
 8009e6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009e6e:	46c0      	nop			@ (mov r8, r8)
 8009e70:	0000d206 	.word	0x0000d206
 8009e74:	00004e20 	.word	0x00004e20

08009e78 <sen5x_device_reset>:
    }
    *device_status = sensirion_common_bytes_to_uint32_t(&buffer[0]);
    return NO_ERROR;
}

int16_t sen5x_device_reset(void) {
 8009e78:	b590      	push	{r4, r7, lr}
 8009e7a:	b083      	sub	sp, #12
 8009e7c:	af00      	add	r7, sp, #0
    int16_t error;
    uint8_t buffer[2];
    uint16_t offset = 0;
 8009e7e:	1dbb      	adds	r3, r7, #6
 8009e80:	2200      	movs	r2, #0
 8009e82:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0xD304);
 8009e84:	1dbc      	adds	r4, r7, #6
 8009e86:	4a12      	ldr	r2, [pc, #72]	@ (8009ed0 <sen5x_device_reset+0x58>)
 8009e88:	1dbb      	adds	r3, r7, #6
 8009e8a:	8819      	ldrh	r1, [r3, #0]
 8009e8c:	003b      	movs	r3, r7
 8009e8e:	0018      	movs	r0, r3
 8009e90:	f000 ffe6 	bl	800ae60 <sensirion_i2c_add_command_to_buffer>
 8009e94:	0003      	movs	r3, r0
 8009e96:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 8009e98:	1d3c      	adds	r4, r7, #4
 8009e9a:	1dbb      	adds	r3, r7, #6
 8009e9c:	881a      	ldrh	r2, [r3, #0]
 8009e9e:	003b      	movs	r3, r7
 8009ea0:	0019      	movs	r1, r3
 8009ea2:	2069      	movs	r0, #105	@ 0x69
 8009ea4:	f001 f860 	bl	800af68 <sensirion_i2c_write_data>
 8009ea8:	0003      	movs	r3, r0
 8009eaa:	8023      	strh	r3, [r4, #0]
    if (error) {
 8009eac:	1d3b      	adds	r3, r7, #4
 8009eae:	2200      	movs	r2, #0
 8009eb0:	5e9b      	ldrsh	r3, [r3, r2]
 8009eb2:	2b00      	cmp	r3, #0
 8009eb4:	d003      	beq.n	8009ebe <sen5x_device_reset+0x46>
        return error;
 8009eb6:	1d3b      	adds	r3, r7, #4
 8009eb8:	2200      	movs	r2, #0
 8009eba:	5e9b      	ldrsh	r3, [r3, r2]
 8009ebc:	e004      	b.n	8009ec8 <sen5x_device_reset+0x50>
    }
    sensirion_i2c_hal_sleep_usec(200000);
 8009ebe:	4b05      	ldr	r3, [pc, #20]	@ (8009ed4 <sen5x_device_reset+0x5c>)
 8009ec0:	0018      	movs	r0, r3
 8009ec2:	f7ff facb 	bl	800945c <sensirion_i2c_hal_sleep_usec>
    return NO_ERROR;
 8009ec6:	2300      	movs	r3, #0
}
 8009ec8:	0018      	movs	r0, r3
 8009eca:	46bd      	mov	sp, r7
 8009ecc:	b003      	add	sp, #12
 8009ece:	bd90      	pop	{r4, r7, pc}
 8009ed0:	0000d304 	.word	0x0000d304
 8009ed4:	00030d40 	.word	0x00030d40

08009ed8 <sensirion_common_bytes_to_uint16_t>:
 */

#include "sensirion_common.h"
#include "sensirion_config.h"

uint16_t sensirion_common_bytes_to_uint16_t(const uint8_t* bytes) {
 8009ed8:	b580      	push	{r7, lr}
 8009eda:	b082      	sub	sp, #8
 8009edc:	af00      	add	r7, sp, #0
 8009ede:	6078      	str	r0, [r7, #4]
    return (uint16_t)bytes[0] << 8 | (uint16_t)bytes[1];
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	781b      	ldrb	r3, [r3, #0]
 8009ee4:	021b      	lsls	r3, r3, #8
 8009ee6:	b21a      	sxth	r2, r3
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	3301      	adds	r3, #1
 8009eec:	781b      	ldrb	r3, [r3, #0]
 8009eee:	b21b      	sxth	r3, r3
 8009ef0:	4313      	orrs	r3, r2
 8009ef2:	b21b      	sxth	r3, r3
 8009ef4:	b29b      	uxth	r3, r3
}
 8009ef6:	0018      	movs	r0, r3
 8009ef8:	46bd      	mov	sp, r7
 8009efa:	b002      	add	sp, #8
 8009efc:	bd80      	pop	{r7, pc}

08009efe <sensirion_common_bytes_to_uint32_t>:

uint32_t sensirion_common_bytes_to_uint32_t(const uint8_t* bytes) {
 8009efe:	b580      	push	{r7, lr}
 8009f00:	b082      	sub	sp, #8
 8009f02:	af00      	add	r7, sp, #0
 8009f04:	6078      	str	r0, [r7, #4]
    return (uint32_t)bytes[0] << 24 | (uint32_t)bytes[1] << 16 |
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	781b      	ldrb	r3, [r3, #0]
 8009f0a:	061a      	lsls	r2, r3, #24
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	3301      	adds	r3, #1
 8009f10:	781b      	ldrb	r3, [r3, #0]
 8009f12:	041b      	lsls	r3, r3, #16
 8009f14:	431a      	orrs	r2, r3
           (uint32_t)bytes[2] << 8 | (uint32_t)bytes[3];
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	3302      	adds	r3, #2
 8009f1a:	781b      	ldrb	r3, [r3, #0]
 8009f1c:	021b      	lsls	r3, r3, #8
    return (uint32_t)bytes[0] << 24 | (uint32_t)bytes[1] << 16 |
 8009f1e:	4313      	orrs	r3, r2
           (uint32_t)bytes[2] << 8 | (uint32_t)bytes[3];
 8009f20:	687a      	ldr	r2, [r7, #4]
 8009f22:	3203      	adds	r2, #3
 8009f24:	7812      	ldrb	r2, [r2, #0]
 8009f26:	4313      	orrs	r3, r2
}
 8009f28:	0018      	movs	r0, r3
 8009f2a:	46bd      	mov	sp, r7
 8009f2c:	b002      	add	sp, #8
 8009f2e:	bd80      	pop	{r7, pc}

08009f30 <sensirion_common_bytes_to_int16_t>:

int16_t sensirion_common_bytes_to_int16_t(const uint8_t* bytes) {
 8009f30:	b580      	push	{r7, lr}
 8009f32:	b082      	sub	sp, #8
 8009f34:	af00      	add	r7, sp, #0
 8009f36:	6078      	str	r0, [r7, #4]
    return (int16_t)sensirion_common_bytes_to_uint16_t(bytes);
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	0018      	movs	r0, r3
 8009f3c:	f7ff ffcc 	bl	8009ed8 <sensirion_common_bytes_to_uint16_t>
 8009f40:	0003      	movs	r3, r0
 8009f42:	b21b      	sxth	r3, r3
}
 8009f44:	0018      	movs	r0, r3
 8009f46:	46bd      	mov	sp, r7
 8009f48:	b002      	add	sp, #8
 8009f4a:	bd80      	pop	{r7, pc}

08009f4c <sensirion_common_copy_bytes>:
    tmp.float32 = value;
    sensirion_common_uint32_t_to_bytes(tmp.u32_value, bytes);
}

void sensirion_common_copy_bytes(const uint8_t* source, uint8_t* destination,
                                 uint16_t data_length) {
 8009f4c:	b580      	push	{r7, lr}
 8009f4e:	b086      	sub	sp, #24
 8009f50:	af00      	add	r7, sp, #0
 8009f52:	60f8      	str	r0, [r7, #12]
 8009f54:	60b9      	str	r1, [r7, #8]
 8009f56:	1dbb      	adds	r3, r7, #6
 8009f58:	801a      	strh	r2, [r3, #0]
    uint16_t i;
    for (i = 0; i < data_length; i++) {
 8009f5a:	2316      	movs	r3, #22
 8009f5c:	18fb      	adds	r3, r7, r3
 8009f5e:	2200      	movs	r2, #0
 8009f60:	801a      	strh	r2, [r3, #0]
 8009f62:	e00f      	b.n	8009f84 <sensirion_common_copy_bytes+0x38>
        destination[i] = source[i];
 8009f64:	2016      	movs	r0, #22
 8009f66:	183b      	adds	r3, r7, r0
 8009f68:	881b      	ldrh	r3, [r3, #0]
 8009f6a:	68fa      	ldr	r2, [r7, #12]
 8009f6c:	18d2      	adds	r2, r2, r3
 8009f6e:	183b      	adds	r3, r7, r0
 8009f70:	881b      	ldrh	r3, [r3, #0]
 8009f72:	68b9      	ldr	r1, [r7, #8]
 8009f74:	18cb      	adds	r3, r1, r3
 8009f76:	7812      	ldrb	r2, [r2, #0]
 8009f78:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < data_length; i++) {
 8009f7a:	183b      	adds	r3, r7, r0
 8009f7c:	881a      	ldrh	r2, [r3, #0]
 8009f7e:	183b      	adds	r3, r7, r0
 8009f80:	3201      	adds	r2, #1
 8009f82:	801a      	strh	r2, [r3, #0]
 8009f84:	2316      	movs	r3, #22
 8009f86:	18fa      	adds	r2, r7, r3
 8009f88:	1dbb      	adds	r3, r7, #6
 8009f8a:	8812      	ldrh	r2, [r2, #0]
 8009f8c:	881b      	ldrh	r3, [r3, #0]
 8009f8e:	429a      	cmp	r2, r3
 8009f90:	d3e8      	bcc.n	8009f64 <sensirion_common_copy_bytes+0x18>
    }
}
 8009f92:	46c0      	nop			@ (mov r8, r8)
 8009f94:	46c0      	nop			@ (mov r8, r8)
 8009f96:	46bd      	mov	sp, r7
 8009f98:	b006      	add	sp, #24
 8009f9a:	bd80      	pop	{r7, pc}

08009f9c <GasIndexAlgorithm_init_with_sampling_interval>:
GasIndexAlgorithm__adaptive_lowpass__process(GasIndexAlgorithmParams* params,
                                             float sample);

void GasIndexAlgorithm_init_with_sampling_interval(
    GasIndexAlgorithmParams* params, int32_t algorithm_type,
    float sampling_interval) {
 8009f9c:	b580      	push	{r7, lr}
 8009f9e:	b084      	sub	sp, #16
 8009fa0:	af00      	add	r7, sp, #0
 8009fa2:	60f8      	str	r0, [r7, #12]
 8009fa4:	60b9      	str	r1, [r7, #8]
 8009fa6:	607a      	str	r2, [r7, #4]
    params->mAlgorithm_Type = algorithm_type;
 8009fa8:	68fb      	ldr	r3, [r7, #12]
 8009faa:	68ba      	ldr	r2, [r7, #8]
 8009fac:	601a      	str	r2, [r3, #0]
    params->mSamplingInterval = sampling_interval;
 8009fae:	68fb      	ldr	r3, [r7, #12]
 8009fb0:	687a      	ldr	r2, [r7, #4]
 8009fb2:	605a      	str	r2, [r3, #4]
    if ((algorithm_type == GasIndexAlgorithm_ALGORITHM_TYPE_NOX)) {
 8009fb4:	68bb      	ldr	r3, [r7, #8]
 8009fb6:	2b01      	cmp	r3, #1
 8009fb8:	d113      	bne.n	8009fe2 <GasIndexAlgorithm_init_with_sampling_interval+0x46>
        params->mIndex_Offset = GasIndexAlgorithm_NOX_INDEX_OFFSET_DEFAULT;
 8009fba:	68fb      	ldr	r3, [r7, #12]
 8009fbc:	22fe      	movs	r2, #254	@ 0xfe
 8009fbe:	0592      	lsls	r2, r2, #22
 8009fc0:	609a      	str	r2, [r3, #8]
        params->mSraw_Minimum = GasIndexAlgorithm_NOX_SRAW_MINIMUM;
 8009fc2:	68fb      	ldr	r3, [r7, #12]
 8009fc4:	4a1a      	ldr	r2, [pc, #104]	@ (800a030 <GasIndexAlgorithm_init_with_sampling_interval+0x94>)
 8009fc6:	60da      	str	r2, [r3, #12]
        params->mGating_Max_Duration_Minutes =
 8009fc8:	68fb      	ldr	r3, [r7, #12]
 8009fca:	4a1a      	ldr	r2, [pc, #104]	@ (800a034 <GasIndexAlgorithm_init_with_sampling_interval+0x98>)
 8009fcc:	611a      	str	r2, [r3, #16]
            GasIndexAlgorithm_GATING_NOX_MAX_DURATION_MINUTES;
        params->mInit_Duration_Mean = GasIndexAlgorithm_INIT_DURATION_MEAN_NOX;
 8009fce:	68fb      	ldr	r3, [r7, #12]
 8009fd0:	4a19      	ldr	r2, [pc, #100]	@ (800a038 <GasIndexAlgorithm_init_with_sampling_interval+0x9c>)
 8009fd2:	615a      	str	r2, [r3, #20]
        params->mInit_Duration_Variance =
 8009fd4:	68fb      	ldr	r3, [r7, #12]
 8009fd6:	4a19      	ldr	r2, [pc, #100]	@ (800a03c <GasIndexAlgorithm_init_with_sampling_interval+0xa0>)
 8009fd8:	619a      	str	r2, [r3, #24]
            GasIndexAlgorithm_INIT_DURATION_VARIANCE_NOX;
        params->mGating_Threshold = GasIndexAlgorithm_GATING_THRESHOLD_NOX;
 8009fda:	68fb      	ldr	r3, [r7, #12]
 8009fdc:	4a18      	ldr	r2, [pc, #96]	@ (800a040 <GasIndexAlgorithm_init_with_sampling_interval+0xa4>)
 8009fde:	61da      	str	r2, [r3, #28]
 8009fe0:	e011      	b.n	800a006 <GasIndexAlgorithm_init_with_sampling_interval+0x6a>
    } else {
        params->mIndex_Offset = GasIndexAlgorithm_VOC_INDEX_OFFSET_DEFAULT;
 8009fe2:	68fb      	ldr	r3, [r7, #12]
 8009fe4:	4a17      	ldr	r2, [pc, #92]	@ (800a044 <GasIndexAlgorithm_init_with_sampling_interval+0xa8>)
 8009fe6:	609a      	str	r2, [r3, #8]
        params->mSraw_Minimum = GasIndexAlgorithm_VOC_SRAW_MINIMUM;
 8009fe8:	68fb      	ldr	r3, [r7, #12]
 8009fea:	4a17      	ldr	r2, [pc, #92]	@ (800a048 <GasIndexAlgorithm_init_with_sampling_interval+0xac>)
 8009fec:	60da      	str	r2, [r3, #12]
        params->mGating_Max_Duration_Minutes =
 8009fee:	68fb      	ldr	r3, [r7, #12]
 8009ff0:	4a16      	ldr	r2, [pc, #88]	@ (800a04c <GasIndexAlgorithm_init_with_sampling_interval+0xb0>)
 8009ff2:	611a      	str	r2, [r3, #16]
            GasIndexAlgorithm_GATING_VOC_MAX_DURATION_MINUTES;
        params->mInit_Duration_Mean = GasIndexAlgorithm_INIT_DURATION_MEAN_VOC;
 8009ff4:	68fb      	ldr	r3, [r7, #12]
 8009ff6:	4a16      	ldr	r2, [pc, #88]	@ (800a050 <GasIndexAlgorithm_init_with_sampling_interval+0xb4>)
 8009ff8:	615a      	str	r2, [r3, #20]
        params->mInit_Duration_Variance =
 8009ffa:	68fb      	ldr	r3, [r7, #12]
 8009ffc:	4a15      	ldr	r2, [pc, #84]	@ (800a054 <GasIndexAlgorithm_init_with_sampling_interval+0xb8>)
 8009ffe:	619a      	str	r2, [r3, #24]
            GasIndexAlgorithm_INIT_DURATION_VARIANCE_VOC;
        params->mGating_Threshold = GasIndexAlgorithm_GATING_THRESHOLD_VOC;
 800a000:	68fb      	ldr	r3, [r7, #12]
 800a002:	4a15      	ldr	r2, [pc, #84]	@ (800a058 <GasIndexAlgorithm_init_with_sampling_interval+0xbc>)
 800a004:	61da      	str	r2, [r3, #28]
    }
    params->mIndex_Gain = GasIndexAlgorithm_INDEX_GAIN;
 800a006:	68fb      	ldr	r3, [r7, #12]
 800a008:	4a14      	ldr	r2, [pc, #80]	@ (800a05c <GasIndexAlgorithm_init_with_sampling_interval+0xc0>)
 800a00a:	621a      	str	r2, [r3, #32]
    params->mTau_Mean_Hours = GasIndexAlgorithm_TAU_MEAN_HOURS;
 800a00c:	68fb      	ldr	r3, [r7, #12]
 800a00e:	4a14      	ldr	r2, [pc, #80]	@ (800a060 <GasIndexAlgorithm_init_with_sampling_interval+0xc4>)
 800a010:	625a      	str	r2, [r3, #36]	@ 0x24
    params->mTau_Variance_Hours = GasIndexAlgorithm_TAU_VARIANCE_HOURS;
 800a012:	68fb      	ldr	r3, [r7, #12]
 800a014:	4a12      	ldr	r2, [pc, #72]	@ (800a060 <GasIndexAlgorithm_init_with_sampling_interval+0xc4>)
 800a016:	629a      	str	r2, [r3, #40]	@ 0x28
    params->mSraw_Std_Initial = GasIndexAlgorithm_SRAW_STD_INITIAL;
 800a018:	68fb      	ldr	r3, [r7, #12]
 800a01a:	4a12      	ldr	r2, [pc, #72]	@ (800a064 <GasIndexAlgorithm_init_with_sampling_interval+0xc8>)
 800a01c:	62da      	str	r2, [r3, #44]	@ 0x2c
    GasIndexAlgorithm_reset(params);
 800a01e:	68fb      	ldr	r3, [r7, #12]
 800a020:	0018      	movs	r0, r3
 800a022:	f000 f833 	bl	800a08c <GasIndexAlgorithm_reset>
}
 800a026:	46c0      	nop			@ (mov r8, r8)
 800a028:	46bd      	mov	sp, r7
 800a02a:	b004      	add	sp, #16
 800a02c:	bd80      	pop	{r7, pc}
 800a02e:	46c0      	nop			@ (mov r8, r8)
 800a030:	00002710 	.word	0x00002710
 800a034:	44340000 	.word	0x44340000
 800a038:	46859800 	.word	0x46859800
 800a03c:	46a05000 	.word	0x46a05000
 800a040:	41f00000 	.word	0x41f00000
 800a044:	42c80000 	.word	0x42c80000
 800a048:	00004e20 	.word	0x00004e20
 800a04c:	43340000 	.word	0x43340000
 800a050:	4528c000 	.word	0x4528c000
 800a054:	45a32000 	.word	0x45a32000
 800a058:	43aa0000 	.word	0x43aa0000
 800a05c:	43660000 	.word	0x43660000
 800a060:	41400000 	.word	0x41400000
 800a064:	42480000 	.word	0x42480000

0800a068 <GasIndexAlgorithm_init>:

void GasIndexAlgorithm_init(GasIndexAlgorithmParams* params,
                            int32_t algorithm_type) {
 800a068:	b580      	push	{r7, lr}
 800a06a:	b082      	sub	sp, #8
 800a06c:	af00      	add	r7, sp, #0
 800a06e:	6078      	str	r0, [r7, #4]
 800a070:	6039      	str	r1, [r7, #0]
    GasIndexAlgorithm_init_with_sampling_interval(
 800a072:	4a05      	ldr	r2, [pc, #20]	@ (800a088 <GasIndexAlgorithm_init+0x20>)
 800a074:	6839      	ldr	r1, [r7, #0]
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	0018      	movs	r0, r3
 800a07a:	f7ff ff8f 	bl	8009f9c <GasIndexAlgorithm_init_with_sampling_interval>
        params, algorithm_type, GasIndexAlgorithm_DEFAULT_SAMPLING_INTERVAL);
}
 800a07e:	46c0      	nop			@ (mov r8, r8)
 800a080:	46bd      	mov	sp, r7
 800a082:	b002      	add	sp, #8
 800a084:	bd80      	pop	{r7, pc}
 800a086:	46c0      	nop			@ (mov r8, r8)
 800a088:	44610000 	.word	0x44610000

0800a08c <GasIndexAlgorithm_reset>:

void GasIndexAlgorithm_reset(GasIndexAlgorithmParams* params) {
 800a08c:	b580      	push	{r7, lr}
 800a08e:	b082      	sub	sp, #8
 800a090:	af00      	add	r7, sp, #0
 800a092:	6078      	str	r0, [r7, #4]
    params->mUptime = 0.f;
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	2200      	movs	r2, #0
 800a098:	631a      	str	r2, [r3, #48]	@ 0x30
    params->mSraw = 0.f;
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	2200      	movs	r2, #0
 800a09e:	635a      	str	r2, [r3, #52]	@ 0x34
    params->mGas_Index = 0;
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	2200      	movs	r2, #0
 800a0a4:	639a      	str	r2, [r3, #56]	@ 0x38
    GasIndexAlgorithm__init_instances(params);
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	0018      	movs	r0, r3
 800a0aa:	f000 f805 	bl	800a0b8 <GasIndexAlgorithm__init_instances>
}
 800a0ae:	46c0      	nop			@ (mov r8, r8)
 800a0b0:	46bd      	mov	sp, r7
 800a0b2:	b002      	add	sp, #8
 800a0b4:	bd80      	pop	{r7, pc}
	...

0800a0b8 <GasIndexAlgorithm__init_instances>:

static void GasIndexAlgorithm__init_instances(GasIndexAlgorithmParams* params) {
 800a0b8:	b590      	push	{r4, r7, lr}
 800a0ba:	b083      	sub	sp, #12
 800a0bc:	af00      	add	r7, sp, #0
 800a0be:	6078      	str	r0, [r7, #4]

    GasIndexAlgorithm__mean_variance_estimator__set_parameters(params);
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	0018      	movs	r0, r3
 800a0c4:	f000 f8e8 	bl	800a298 <GasIndexAlgorithm__mean_variance_estimator__set_parameters>
    GasIndexAlgorithm__mox_model__set_parameters(
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	0018      	movs	r0, r3
 800a0cc:	f000 f9a6 	bl	800a41c <GasIndexAlgorithm__mean_variance_estimator__get_std>
 800a0d0:	1c04      	adds	r4, r0, #0
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	0018      	movs	r0, r3
 800a0d6:	f000 f9ab 	bl	800a430 <GasIndexAlgorithm__mean_variance_estimator__get_mean>
 800a0da:	1c02      	adds	r2, r0, #0
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	1c21      	adds	r1, r4, #0
 800a0e0:	0018      	movs	r0, r3
 800a0e2:	f000 fc3b 	bl	800a95c <GasIndexAlgorithm__mox_model__set_parameters>
        params, GasIndexAlgorithm__mean_variance_estimator__get_std(params),
        GasIndexAlgorithm__mean_variance_estimator__get_mean(params));
    if ((params->mAlgorithm_Type == GasIndexAlgorithm_ALGORITHM_TYPE_NOX)) {
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	681b      	ldr	r3, [r3, #0]
 800a0ea:	2b01      	cmp	r3, #1
 800a0ec:	d107      	bne.n	800a0fe <GasIndexAlgorithm__init_instances+0x46>
        GasIndexAlgorithm__sigmoid_scaled__set_parameters(
 800a0ee:	23fe      	movs	r3, #254	@ 0xfe
 800a0f0:	059b      	lsls	r3, r3, #22
 800a0f2:	4a0a      	ldr	r2, [pc, #40]	@ (800a11c <GasIndexAlgorithm__init_instances+0x64>)
 800a0f4:	490a      	ldr	r1, [pc, #40]	@ (800a120 <GasIndexAlgorithm__init_instances+0x68>)
 800a0f6:	6878      	ldr	r0, [r7, #4]
 800a0f8:	f000 fc86 	bl	800aa08 <GasIndexAlgorithm__sigmoid_scaled__set_parameters>
 800a0fc:	e005      	b.n	800a10a <GasIndexAlgorithm__init_instances+0x52>
            params, GasIndexAlgorithm_SIGMOID_X0_NOX,
            GasIndexAlgorithm_SIGMOID_K_NOX,
            GasIndexAlgorithm_NOX_INDEX_OFFSET_DEFAULT);
    } else {
        GasIndexAlgorithm__sigmoid_scaled__set_parameters(
 800a0fe:	4b09      	ldr	r3, [pc, #36]	@ (800a124 <GasIndexAlgorithm__init_instances+0x6c>)
 800a100:	4a09      	ldr	r2, [pc, #36]	@ (800a128 <GasIndexAlgorithm__init_instances+0x70>)
 800a102:	490a      	ldr	r1, [pc, #40]	@ (800a12c <GasIndexAlgorithm__init_instances+0x74>)
 800a104:	6878      	ldr	r0, [r7, #4]
 800a106:	f000 fc7f 	bl	800aa08 <GasIndexAlgorithm__sigmoid_scaled__set_parameters>
            params, GasIndexAlgorithm_SIGMOID_X0_VOC,
            GasIndexAlgorithm_SIGMOID_K_VOC,
            GasIndexAlgorithm_VOC_INDEX_OFFSET_DEFAULT);
    }
    GasIndexAlgorithm__adaptive_lowpass__set_parameters(params);
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	0018      	movs	r0, r3
 800a10e:	f000 fd35 	bl	800ab7c <GasIndexAlgorithm__adaptive_lowpass__set_parameters>
}
 800a112:	46c0      	nop			@ (mov r8, r8)
 800a114:	46bd      	mov	sp, r7
 800a116:	b003      	add	sp, #12
 800a118:	bd90      	pop	{r4, r7, pc}
 800a11a:	46c0      	nop			@ (mov r8, r8)
 800a11c:	bc257a78 	.word	0xbc257a78
 800a120:	44198000 	.word	0x44198000
 800a124:	42c80000 	.word	0x42c80000
 800a128:	bbd4fdf4 	.word	0xbbd4fdf4
 800a12c:	43550000 	.word	0x43550000

0800a130 <GasIndexAlgorithm_process>:
    *gain_factor = ((int32_t)(params->mIndex_Gain));
    return;
}

void GasIndexAlgorithm_process(GasIndexAlgorithmParams* params, int32_t sraw,
                               int32_t* gas_index) {
 800a130:	b590      	push	{r4, r7, lr}
 800a132:	b085      	sub	sp, #20
 800a134:	af00      	add	r7, sp, #0
 800a136:	60f8      	str	r0, [r7, #12]
 800a138:	60b9      	str	r1, [r7, #8]
 800a13a:	607a      	str	r2, [r7, #4]

    if ((params->mUptime <= GasIndexAlgorithm_INITIAL_BLACKOUT)) {
 800a13c:	68fb      	ldr	r3, [r7, #12]
 800a13e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a140:	4952      	ldr	r1, [pc, #328]	@ (800a28c <GasIndexAlgorithm_process+0x15c>)
 800a142:	1c18      	adds	r0, r3, #0
 800a144:	f7f6 f9fe 	bl	8000544 <__aeabi_fcmple>
 800a148:	1e03      	subs	r3, r0, #0
 800a14a:	d00c      	beq.n	800a166 <GasIndexAlgorithm_process+0x36>
        params->mUptime = (params->mUptime + params->mSamplingInterval);
 800a14c:	68fb      	ldr	r3, [r7, #12]
 800a14e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a150:	68fb      	ldr	r3, [r7, #12]
 800a152:	685b      	ldr	r3, [r3, #4]
 800a154:	1c19      	adds	r1, r3, #0
 800a156:	1c10      	adds	r0, r2, #0
 800a158:	f7f6 fbb2 	bl	80008c0 <__aeabi_fadd>
 800a15c:	1c03      	adds	r3, r0, #0
 800a15e:	1c1a      	adds	r2, r3, #0
 800a160:	68fb      	ldr	r3, [r7, #12]
 800a162:	631a      	str	r2, [r3, #48]	@ 0x30
 800a164:	e080      	b.n	800a268 <GasIndexAlgorithm_process+0x138>
    } else {
        if (((sraw > 0) && (sraw < 65000))) {
 800a166:	68bb      	ldr	r3, [r7, #8]
 800a168:	2b00      	cmp	r3, #0
 800a16a:	dd25      	ble.n	800a1b8 <GasIndexAlgorithm_process+0x88>
 800a16c:	68bb      	ldr	r3, [r7, #8]
 800a16e:	4a48      	ldr	r2, [pc, #288]	@ (800a290 <GasIndexAlgorithm_process+0x160>)
 800a170:	4293      	cmp	r3, r2
 800a172:	dc21      	bgt.n	800a1b8 <GasIndexAlgorithm_process+0x88>
            if ((sraw < (params->mSraw_Minimum + 1))) {
 800a174:	68fb      	ldr	r3, [r7, #12]
 800a176:	68db      	ldr	r3, [r3, #12]
 800a178:	68ba      	ldr	r2, [r7, #8]
 800a17a:	429a      	cmp	r2, r3
 800a17c:	dc04      	bgt.n	800a188 <GasIndexAlgorithm_process+0x58>
                sraw = (params->mSraw_Minimum + 1);
 800a17e:	68fb      	ldr	r3, [r7, #12]
 800a180:	68db      	ldr	r3, [r3, #12]
 800a182:	3301      	adds	r3, #1
 800a184:	60bb      	str	r3, [r7, #8]
 800a186:	e00d      	b.n	800a1a4 <GasIndexAlgorithm_process+0x74>
            } else if ((sraw > (params->mSraw_Minimum + 32767))) {
 800a188:	68fb      	ldr	r3, [r7, #12]
 800a18a:	68db      	ldr	r3, [r3, #12]
 800a18c:	4a41      	ldr	r2, [pc, #260]	@ (800a294 <GasIndexAlgorithm_process+0x164>)
 800a18e:	4694      	mov	ip, r2
 800a190:	4463      	add	r3, ip
 800a192:	68ba      	ldr	r2, [r7, #8]
 800a194:	429a      	cmp	r2, r3
 800a196:	dd05      	ble.n	800a1a4 <GasIndexAlgorithm_process+0x74>
                sraw = (params->mSraw_Minimum + 32767);
 800a198:	68fb      	ldr	r3, [r7, #12]
 800a19a:	68db      	ldr	r3, [r3, #12]
 800a19c:	4a3d      	ldr	r2, [pc, #244]	@ (800a294 <GasIndexAlgorithm_process+0x164>)
 800a19e:	4694      	mov	ip, r2
 800a1a0:	4463      	add	r3, ip
 800a1a2:	60bb      	str	r3, [r7, #8]
            }
            params->mSraw = ((float)((sraw - params->mSraw_Minimum)));
 800a1a4:	68fb      	ldr	r3, [r7, #12]
 800a1a6:	68db      	ldr	r3, [r3, #12]
 800a1a8:	68ba      	ldr	r2, [r7, #8]
 800a1aa:	1ad3      	subs	r3, r2, r3
 800a1ac:	0018      	movs	r0, r3
 800a1ae:	f7f7 fa0f 	bl	80015d0 <__aeabi_i2f>
 800a1b2:	1c02      	adds	r2, r0, #0
 800a1b4:	68fb      	ldr	r3, [r7, #12]
 800a1b6:	635a      	str	r2, [r3, #52]	@ 0x34
        }
        if (((params->mAlgorithm_Type ==
 800a1b8:	68fb      	ldr	r3, [r7, #12]
 800a1ba:	681b      	ldr	r3, [r3, #0]
 800a1bc:	2b00      	cmp	r3, #0
 800a1be:	d005      	beq.n	800a1cc <GasIndexAlgorithm_process+0x9c>
              GasIndexAlgorithm_ALGORITHM_TYPE_VOC) ||
             GasIndexAlgorithm__mean_variance_estimator__is_initialized(
 800a1c0:	68fb      	ldr	r3, [r7, #12]
 800a1c2:	0018      	movs	r0, r3
 800a1c4:	f000 f945 	bl	800a452 <GasIndexAlgorithm__mean_variance_estimator__is_initialized>
 800a1c8:	1e03      	subs	r3, r0, #0
              GasIndexAlgorithm_ALGORITHM_TYPE_VOC) ||
 800a1ca:	d014      	beq.n	800a1f6 <GasIndexAlgorithm_process+0xc6>
                 params))) {
            params->mGas_Index =
                GasIndexAlgorithm__mox_model__process(params, params->mSraw);
 800a1cc:	68fb      	ldr	r3, [r7, #12]
 800a1ce:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a1d0:	68fb      	ldr	r3, [r7, #12]
 800a1d2:	1c11      	adds	r1, r2, #0
 800a1d4:	0018      	movs	r0, r3
 800a1d6:	f000 fbd1 	bl	800a97c <GasIndexAlgorithm__mox_model__process>
 800a1da:	1c02      	adds	r2, r0, #0
            params->mGas_Index =
 800a1dc:	68fb      	ldr	r3, [r7, #12]
 800a1de:	639a      	str	r2, [r3, #56]	@ 0x38
            params->mGas_Index = GasIndexAlgorithm__sigmoid_scaled__process(
 800a1e0:	68fb      	ldr	r3, [r7, #12]
 800a1e2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a1e4:	68fb      	ldr	r3, [r7, #12]
 800a1e6:	1c11      	adds	r1, r2, #0
 800a1e8:	0018      	movs	r0, r3
 800a1ea:	f000 fc25 	bl	800aa38 <GasIndexAlgorithm__sigmoid_scaled__process>
 800a1ee:	1c02      	adds	r2, r0, #0
 800a1f0:	68fb      	ldr	r3, [r7, #12]
 800a1f2:	639a      	str	r2, [r3, #56]	@ 0x38
 800a1f4:	e003      	b.n	800a1fe <GasIndexAlgorithm_process+0xce>
                params, params->mGas_Index);
        } else {
            params->mGas_Index = params->mIndex_Offset;
 800a1f6:	68fb      	ldr	r3, [r7, #12]
 800a1f8:	689a      	ldr	r2, [r3, #8]
 800a1fa:	68fb      	ldr	r3, [r7, #12]
 800a1fc:	639a      	str	r2, [r3, #56]	@ 0x38
        }
        params->mGas_Index = GasIndexAlgorithm__adaptive_lowpass__process(
 800a1fe:	68fb      	ldr	r3, [r7, #12]
 800a200:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a202:	68fb      	ldr	r3, [r7, #12]
 800a204:	1c11      	adds	r1, r2, #0
 800a206:	0018      	movs	r0, r3
 800a208:	f000 fcec 	bl	800abe4 <GasIndexAlgorithm__adaptive_lowpass__process>
 800a20c:	1c02      	adds	r2, r0, #0
 800a20e:	68fb      	ldr	r3, [r7, #12]
 800a210:	639a      	str	r2, [r3, #56]	@ 0x38
            params, params->mGas_Index);
        if ((params->mGas_Index < 0.5f)) {
 800a212:	68fb      	ldr	r3, [r7, #12]
 800a214:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a216:	21fc      	movs	r1, #252	@ 0xfc
 800a218:	0589      	lsls	r1, r1, #22
 800a21a:	1c18      	adds	r0, r3, #0
 800a21c:	f7f6 f988 	bl	8000530 <__aeabi_fcmplt>
 800a220:	1e03      	subs	r3, r0, #0
 800a222:	d003      	beq.n	800a22c <GasIndexAlgorithm_process+0xfc>
            params->mGas_Index = 0.5f;
 800a224:	68fb      	ldr	r3, [r7, #12]
 800a226:	22fc      	movs	r2, #252	@ 0xfc
 800a228:	0592      	lsls	r2, r2, #22
 800a22a:	639a      	str	r2, [r3, #56]	@ 0x38
        }
        if ((params->mSraw > 0.f)) {
 800a22c:	68fb      	ldr	r3, [r7, #12]
 800a22e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a230:	2100      	movs	r1, #0
 800a232:	1c18      	adds	r0, r3, #0
 800a234:	f7f6 f990 	bl	8000558 <__aeabi_fcmpgt>
 800a238:	1e03      	subs	r3, r0, #0
 800a23a:	d015      	beq.n	800a268 <GasIndexAlgorithm_process+0x138>
            GasIndexAlgorithm__mean_variance_estimator__process(params,
 800a23c:	68fb      	ldr	r3, [r7, #12]
 800a23e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a240:	68fb      	ldr	r3, [r7, #12]
 800a242:	1c11      	adds	r1, r2, #0
 800a244:	0018      	movs	r0, r3
 800a246:	f000 fa4f 	bl	800a6e8 <GasIndexAlgorithm__mean_variance_estimator__process>
                                                                params->mSraw);
            GasIndexAlgorithm__mox_model__set_parameters(
 800a24a:	68fb      	ldr	r3, [r7, #12]
 800a24c:	0018      	movs	r0, r3
 800a24e:	f000 f8e5 	bl	800a41c <GasIndexAlgorithm__mean_variance_estimator__get_std>
 800a252:	1c04      	adds	r4, r0, #0
 800a254:	68fb      	ldr	r3, [r7, #12]
 800a256:	0018      	movs	r0, r3
 800a258:	f000 f8ea 	bl	800a430 <GasIndexAlgorithm__mean_variance_estimator__get_mean>
 800a25c:	1c02      	adds	r2, r0, #0
 800a25e:	68fb      	ldr	r3, [r7, #12]
 800a260:	1c21      	adds	r1, r4, #0
 800a262:	0018      	movs	r0, r3
 800a264:	f000 fb7a 	bl	800a95c <GasIndexAlgorithm__mox_model__set_parameters>
                params,
                GasIndexAlgorithm__mean_variance_estimator__get_std(params),
                GasIndexAlgorithm__mean_variance_estimator__get_mean(params));
        }
    }
    *gas_index = ((int32_t)((params->mGas_Index + 0.5f)));
 800a268:	68fb      	ldr	r3, [r7, #12]
 800a26a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a26c:	21fc      	movs	r1, #252	@ 0xfc
 800a26e:	0589      	lsls	r1, r1, #22
 800a270:	1c18      	adds	r0, r3, #0
 800a272:	f7f6 fb25 	bl	80008c0 <__aeabi_fadd>
 800a276:	1c03      	adds	r3, r0, #0
 800a278:	1c18      	adds	r0, r3, #0
 800a27a:	f7f7 f989 	bl	8001590 <__aeabi_f2iz>
 800a27e:	0002      	movs	r2, r0
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	601a      	str	r2, [r3, #0]
    return;
 800a284:	46c0      	nop			@ (mov r8, r8)
}
 800a286:	46bd      	mov	sp, r7
 800a288:	b005      	add	sp, #20
 800a28a:	bd90      	pop	{r4, r7, pc}
 800a28c:	42340000 	.word	0x42340000
 800a290:	0000fde7 	.word	0x0000fde7
 800a294:	00007fff 	.word	0x00007fff

0800a298 <GasIndexAlgorithm__mean_variance_estimator__set_parameters>:

static void GasIndexAlgorithm__mean_variance_estimator__set_parameters(
    GasIndexAlgorithmParams* params) {
 800a298:	b5b0      	push	{r4, r5, r7, lr}
 800a29a:	b082      	sub	sp, #8
 800a29c:	af00      	add	r7, sp, #0
 800a29e:	6078      	str	r0, [r7, #4]

    params->m_Mean_Variance_Estimator___Initialized = false;
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	223c      	movs	r2, #60	@ 0x3c
 800a2a4:	2100      	movs	r1, #0
 800a2a6:	5499      	strb	r1, [r3, r2]
    params->m_Mean_Variance_Estimator___Mean = 0.f;
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	2200      	movs	r2, #0
 800a2ac:	641a      	str	r2, [r3, #64]	@ 0x40
    params->m_Mean_Variance_Estimator___Sraw_Offset = 0.f;
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	2200      	movs	r2, #0
 800a2b2:	645a      	str	r2, [r3, #68]	@ 0x44
    params->m_Mean_Variance_Estimator___Std = params->mSraw_Std_Initial;
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	649a      	str	r2, [r3, #72]	@ 0x48
    params->m_Mean_Variance_Estimator___Gamma_Mean =
        (((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__ADDITIONAL_GAMMA_MEAN_SCALING *
           GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
          (params->mSamplingInterval / 3600.f)) /
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	685b      	ldr	r3, [r3, #4]
 800a2c0:	4952      	ldr	r1, [pc, #328]	@ (800a40c <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x174>)
 800a2c2:	1c18      	adds	r0, r3, #0
 800a2c4:	f7f6 fc86 	bl	8000bd4 <__aeabi_fdiv>
 800a2c8:	1c03      	adds	r3, r0, #0
           GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
 800a2ca:	2188      	movs	r1, #136	@ 0x88
 800a2cc:	05c9      	lsls	r1, r1, #23
 800a2ce:	1c18      	adds	r0, r3, #0
 800a2d0:	f7f6 fe66 	bl	8000fa0 <__aeabi_fmul>
 800a2d4:	1c03      	adds	r3, r0, #0
 800a2d6:	1c1d      	adds	r5, r3, #0
         (params->mTau_Mean_Hours + (params->mSamplingInterval / 3600.f)));
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	685b      	ldr	r3, [r3, #4]
 800a2e0:	494a      	ldr	r1, [pc, #296]	@ (800a40c <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x174>)
 800a2e2:	1c18      	adds	r0, r3, #0
 800a2e4:	f7f6 fc76 	bl	8000bd4 <__aeabi_fdiv>
 800a2e8:	1c03      	adds	r3, r0, #0
 800a2ea:	1c19      	adds	r1, r3, #0
 800a2ec:	1c20      	adds	r0, r4, #0
 800a2ee:	f7f6 fae7 	bl	80008c0 <__aeabi_fadd>
 800a2f2:	1c03      	adds	r3, r0, #0
          (params->mSamplingInterval / 3600.f)) /
 800a2f4:	1c19      	adds	r1, r3, #0
 800a2f6:	1c28      	adds	r0, r5, #0
 800a2f8:	f7f6 fc6c 	bl	8000bd4 <__aeabi_fdiv>
 800a2fc:	1c03      	adds	r3, r0, #0
 800a2fe:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator___Gamma_Mean =
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	64da      	str	r2, [r3, #76]	@ 0x4c
    params->m_Mean_Variance_Estimator___Gamma_Variance =
        ((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING *
          (params->mSamplingInterval / 3600.f)) /
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	685b      	ldr	r3, [r3, #4]
 800a308:	4940      	ldr	r1, [pc, #256]	@ (800a40c <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x174>)
 800a30a:	1c18      	adds	r0, r3, #0
 800a30c:	f7f6 fc62 	bl	8000bd4 <__aeabi_fdiv>
 800a310:	1c03      	adds	r3, r0, #0
        ((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING *
 800a312:	2185      	movs	r1, #133	@ 0x85
 800a314:	05c9      	lsls	r1, r1, #23
 800a316:	1c18      	adds	r0, r3, #0
 800a318:	f7f6 fe42 	bl	8000fa0 <__aeabi_fmul>
 800a31c:	1c03      	adds	r3, r0, #0
 800a31e:	1c1d      	adds	r5, r3, #0
         (params->mTau_Variance_Hours + (params->mSamplingInterval / 3600.f)));
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	6a9c      	ldr	r4, [r3, #40]	@ 0x28
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	685b      	ldr	r3, [r3, #4]
 800a328:	4938      	ldr	r1, [pc, #224]	@ (800a40c <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x174>)
 800a32a:	1c18      	adds	r0, r3, #0
 800a32c:	f7f6 fc52 	bl	8000bd4 <__aeabi_fdiv>
 800a330:	1c03      	adds	r3, r0, #0
 800a332:	1c19      	adds	r1, r3, #0
 800a334:	1c20      	adds	r0, r4, #0
 800a336:	f7f6 fac3 	bl	80008c0 <__aeabi_fadd>
 800a33a:	1c03      	adds	r3, r0, #0
          (params->mSamplingInterval / 3600.f)) /
 800a33c:	1c19      	adds	r1, r3, #0
 800a33e:	1c28      	adds	r0, r5, #0
 800a340:	f7f6 fc48 	bl	8000bd4 <__aeabi_fdiv>
 800a344:	1c03      	adds	r3, r0, #0
 800a346:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator___Gamma_Variance =
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	651a      	str	r2, [r3, #80]	@ 0x50
    if ((params->mAlgorithm_Type == GasIndexAlgorithm_ALGORITHM_TYPE_NOX)) {
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	681b      	ldr	r3, [r3, #0]
 800a350:	2b01      	cmp	r3, #1
 800a352:	d118      	bne.n	800a386 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0xee>
        params->m_Mean_Variance_Estimator___Gamma_Initial_Mean =
            (((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__ADDITIONAL_GAMMA_MEAN_SCALING *
               GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
              params->mSamplingInterval) /
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	685b      	ldr	r3, [r3, #4]
               GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
 800a358:	2188      	movs	r1, #136	@ 0x88
 800a35a:	05c9      	lsls	r1, r1, #23
 800a35c:	1c18      	adds	r0, r3, #0
 800a35e:	f7f6 fe1f 	bl	8000fa0 <__aeabi_fmul>
 800a362:	1c03      	adds	r3, r0, #0
 800a364:	1c1c      	adds	r4, r3, #0
             (GasIndexAlgorithm_TAU_INITIAL_MEAN_NOX +
              params->mSamplingInterval));
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	685b      	ldr	r3, [r3, #4]
             (GasIndexAlgorithm_TAU_INITIAL_MEAN_NOX +
 800a36a:	4929      	ldr	r1, [pc, #164]	@ (800a410 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x178>)
 800a36c:	1c18      	adds	r0, r3, #0
 800a36e:	f7f6 faa7 	bl	80008c0 <__aeabi_fadd>
 800a372:	1c03      	adds	r3, r0, #0
              params->mSamplingInterval) /
 800a374:	1c19      	adds	r1, r3, #0
 800a376:	1c20      	adds	r0, r4, #0
 800a378:	f7f6 fc2c 	bl	8000bd4 <__aeabi_fdiv>
 800a37c:	1c03      	adds	r3, r0, #0
 800a37e:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Gamma_Initial_Mean =
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	655a      	str	r2, [r3, #84]	@ 0x54
 800a384:	e017      	b.n	800a3b6 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x11e>
    } else {
        params->m_Mean_Variance_Estimator___Gamma_Initial_Mean =
            (((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__ADDITIONAL_GAMMA_MEAN_SCALING *
               GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
              params->mSamplingInterval) /
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	685b      	ldr	r3, [r3, #4]
               GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
 800a38a:	2188      	movs	r1, #136	@ 0x88
 800a38c:	05c9      	lsls	r1, r1, #23
 800a38e:	1c18      	adds	r0, r3, #0
 800a390:	f7f6 fe06 	bl	8000fa0 <__aeabi_fmul>
 800a394:	1c03      	adds	r3, r0, #0
 800a396:	1c1c      	adds	r4, r3, #0
             (GasIndexAlgorithm_TAU_INITIAL_MEAN_VOC +
              params->mSamplingInterval));
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	685b      	ldr	r3, [r3, #4]
             (GasIndexAlgorithm_TAU_INITIAL_MEAN_VOC +
 800a39c:	491d      	ldr	r1, [pc, #116]	@ (800a414 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x17c>)
 800a39e:	1c18      	adds	r0, r3, #0
 800a3a0:	f7f6 fa8e 	bl	80008c0 <__aeabi_fadd>
 800a3a4:	1c03      	adds	r3, r0, #0
              params->mSamplingInterval) /
 800a3a6:	1c19      	adds	r1, r3, #0
 800a3a8:	1c20      	adds	r0, r4, #0
 800a3aa:	f7f6 fc13 	bl	8000bd4 <__aeabi_fdiv>
 800a3ae:	1c03      	adds	r3, r0, #0
 800a3b0:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Gamma_Initial_Mean =
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	655a      	str	r2, [r3, #84]	@ 0x54
    }
    params->m_Mean_Variance_Estimator___Gamma_Initial_Variance =
        ((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING *
          params->mSamplingInterval) /
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	685b      	ldr	r3, [r3, #4]
        ((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING *
 800a3ba:	2185      	movs	r1, #133	@ 0x85
 800a3bc:	05c9      	lsls	r1, r1, #23
 800a3be:	1c18      	adds	r0, r3, #0
 800a3c0:	f7f6 fdee 	bl	8000fa0 <__aeabi_fmul>
 800a3c4:	1c03      	adds	r3, r0, #0
 800a3c6:	1c1c      	adds	r4, r3, #0
         (GasIndexAlgorithm_TAU_INITIAL_VARIANCE + params->mSamplingInterval));
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	685b      	ldr	r3, [r3, #4]
 800a3cc:	4912      	ldr	r1, [pc, #72]	@ (800a418 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x180>)
 800a3ce:	1c18      	adds	r0, r3, #0
 800a3d0:	f7f6 fa76 	bl	80008c0 <__aeabi_fadd>
 800a3d4:	1c03      	adds	r3, r0, #0
          params->mSamplingInterval) /
 800a3d6:	1c19      	adds	r1, r3, #0
 800a3d8:	1c20      	adds	r0, r4, #0
 800a3da:	f7f6 fbfb 	bl	8000bd4 <__aeabi_fdiv>
 800a3de:	1c03      	adds	r3, r0, #0
 800a3e0:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator___Gamma_Initial_Variance =
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	659a      	str	r2, [r3, #88]	@ 0x58
    params->m_Mean_Variance_Estimator__Gamma_Mean = 0.f;
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	2200      	movs	r2, #0
 800a3ea:	65da      	str	r2, [r3, #92]	@ 0x5c
    params->m_Mean_Variance_Estimator__Gamma_Variance = 0.f;
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	2200      	movs	r2, #0
 800a3f0:	661a      	str	r2, [r3, #96]	@ 0x60
    params->m_Mean_Variance_Estimator___Uptime_Gamma = 0.f;
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	2200      	movs	r2, #0
 800a3f6:	665a      	str	r2, [r3, #100]	@ 0x64
    params->m_Mean_Variance_Estimator___Uptime_Gating = 0.f;
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	2200      	movs	r2, #0
 800a3fc:	669a      	str	r2, [r3, #104]	@ 0x68
    params->m_Mean_Variance_Estimator___Gating_Duration_Minutes = 0.f;
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	2200      	movs	r2, #0
 800a402:	66da      	str	r2, [r3, #108]	@ 0x6c
}
 800a404:	46c0      	nop			@ (mov r8, r8)
 800a406:	46bd      	mov	sp, r7
 800a408:	b002      	add	sp, #8
 800a40a:	bdb0      	pop	{r4, r5, r7, pc}
 800a40c:	45610000 	.word	0x45610000
 800a410:	44960000 	.word	0x44960000
 800a414:	41a00000 	.word	0x41a00000
 800a418:	451c4000 	.word	0x451c4000

0800a41c <GasIndexAlgorithm__mean_variance_estimator__get_std>:
    params->m_Mean_Variance_Estimator___Uptime_Gamma = uptime_gamma;
    params->m_Mean_Variance_Estimator___Initialized = true;
}

static float GasIndexAlgorithm__mean_variance_estimator__get_std(
    const GasIndexAlgorithmParams* params) {
 800a41c:	b580      	push	{r7, lr}
 800a41e:	b082      	sub	sp, #8
 800a420:	af00      	add	r7, sp, #0
 800a422:	6078      	str	r0, [r7, #4]

    return params->m_Mean_Variance_Estimator___Std;
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
}
 800a428:	1c18      	adds	r0, r3, #0
 800a42a:	46bd      	mov	sp, r7
 800a42c:	b002      	add	sp, #8
 800a42e:	bd80      	pop	{r7, pc}

0800a430 <GasIndexAlgorithm__mean_variance_estimator__get_mean>:

static float GasIndexAlgorithm__mean_variance_estimator__get_mean(
    const GasIndexAlgorithmParams* params) {
 800a430:	b580      	push	{r7, lr}
 800a432:	b082      	sub	sp, #8
 800a434:	af00      	add	r7, sp, #0
 800a436:	6078      	str	r0, [r7, #4]

    return (params->m_Mean_Variance_Estimator___Mean +
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
            params->m_Mean_Variance_Estimator___Sraw_Offset);
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
    return (params->m_Mean_Variance_Estimator___Mean +
 800a440:	1c19      	adds	r1, r3, #0
 800a442:	1c10      	adds	r0, r2, #0
 800a444:	f7f6 fa3c 	bl	80008c0 <__aeabi_fadd>
 800a448:	1c03      	adds	r3, r0, #0
}
 800a44a:	1c18      	adds	r0, r3, #0
 800a44c:	46bd      	mov	sp, r7
 800a44e:	b002      	add	sp, #8
 800a450:	bd80      	pop	{r7, pc}

0800a452 <GasIndexAlgorithm__mean_variance_estimator__is_initialized>:

static bool GasIndexAlgorithm__mean_variance_estimator__is_initialized(
    GasIndexAlgorithmParams* params) {
 800a452:	b580      	push	{r7, lr}
 800a454:	b082      	sub	sp, #8
 800a456:	af00      	add	r7, sp, #0
 800a458:	6078      	str	r0, [r7, #4]

    return params->m_Mean_Variance_Estimator___Initialized;
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	223c      	movs	r2, #60	@ 0x3c
 800a45e:	5c9b      	ldrb	r3, [r3, r2]
}
 800a460:	0018      	movs	r0, r3
 800a462:	46bd      	mov	sp, r7
 800a464:	b002      	add	sp, #8
 800a466:	bd80      	pop	{r7, pc}

0800a468 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma>:

static void GasIndexAlgorithm__mean_variance_estimator___calculate_gamma(
    GasIndexAlgorithmParams* params) {
 800a468:	b5b0      	push	{r4, r5, r7, lr}
 800a46a:	b08c      	sub	sp, #48	@ 0x30
 800a46c:	af00      	add	r7, sp, #0
 800a46e:	6078      	str	r0, [r7, #4]
    float gamma_variance;
    float gating_threshold_variance;
    float sigmoid_gating_variance;

    uptime_limit = (GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__FIX16_MAX -
                    params->mSamplingInterval);
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	685b      	ldr	r3, [r3, #4]
    uptime_limit = (GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__FIX16_MAX -
 800a474:	1c19      	adds	r1, r3, #0
 800a476:	4895      	ldr	r0, [pc, #596]	@ (800a6cc <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x264>)
 800a478:	f7f6 fed0 	bl	800121c <__aeabi_fsub>
 800a47c:	1c03      	adds	r3, r0, #0
 800a47e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if ((params->m_Mean_Variance_Estimator___Uptime_Gamma < uptime_limit)) {
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a484:	1c19      	adds	r1, r3, #0
 800a486:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800a488:	f7f6 f866 	bl	8000558 <__aeabi_fcmpgt>
 800a48c:	1e03      	subs	r3, r0, #0
 800a48e:	d00b      	beq.n	800a4a8 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x40>
        params->m_Mean_Variance_Estimator___Uptime_Gamma =
            (params->m_Mean_Variance_Estimator___Uptime_Gamma +
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
             params->mSamplingInterval);
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	685b      	ldr	r3, [r3, #4]
            (params->m_Mean_Variance_Estimator___Uptime_Gamma +
 800a498:	1c19      	adds	r1, r3, #0
 800a49a:	1c10      	adds	r0, r2, #0
 800a49c:	f7f6 fa10 	bl	80008c0 <__aeabi_fadd>
 800a4a0:	1c03      	adds	r3, r0, #0
 800a4a2:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Uptime_Gamma =
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	665a      	str	r2, [r3, #100]	@ 0x64
    }
    if ((params->m_Mean_Variance_Estimator___Uptime_Gating < uptime_limit)) {
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a4ac:	1c19      	adds	r1, r3, #0
 800a4ae:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800a4b0:	f7f6 f852 	bl	8000558 <__aeabi_fcmpgt>
 800a4b4:	1e03      	subs	r3, r0, #0
 800a4b6:	d00b      	beq.n	800a4d0 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x68>
        params->m_Mean_Variance_Estimator___Uptime_Gating =
            (params->m_Mean_Variance_Estimator___Uptime_Gating +
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
             params->mSamplingInterval);
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	685b      	ldr	r3, [r3, #4]
            (params->m_Mean_Variance_Estimator___Uptime_Gating +
 800a4c0:	1c19      	adds	r1, r3, #0
 800a4c2:	1c10      	adds	r0, r2, #0
 800a4c4:	f7f6 f9fc 	bl	80008c0 <__aeabi_fadd>
 800a4c8:	1c03      	adds	r3, r0, #0
 800a4ca:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Uptime_Gating =
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters(
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	6959      	ldr	r1, [r3, #20]
 800a4d4:	4a7e      	ldr	r2, [pc, #504]	@ (800a6d0 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x268>)
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	0018      	movs	r0, r3
 800a4da:	f000 f9f1 	bl	800a8c0 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters>
        params, params->mInit_Duration_Mean,
        GasIndexAlgorithm_INIT_TRANSITION_MEAN);
    sigmoid_gamma_mean =
        GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	1c11      	adds	r1, r2, #0
 800a4e6:	0018      	movs	r0, r3
 800a4e8:	f000 f9fa 	bl	800a8e0 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 800a4ec:	1c03      	adds	r3, r0, #0
 800a4ee:	62bb      	str	r3, [r7, #40]	@ 0x28
            params, params->m_Mean_Variance_Estimator___Uptime_Gamma);
    gamma_mean = (params->m_Mean_Variance_Estimator___Gamma_Mean +
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
                  ((params->m_Mean_Variance_Estimator___Gamma_Initial_Mean -
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
                    params->m_Mean_Variance_Estimator___Gamma_Mean) *
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
                  ((params->m_Mean_Variance_Estimator___Gamma_Initial_Mean -
 800a4fc:	1c19      	adds	r1, r3, #0
 800a4fe:	1c10      	adds	r0, r2, #0
 800a500:	f7f6 fe8c 	bl	800121c <__aeabi_fsub>
 800a504:	1c03      	adds	r3, r0, #0
                    params->m_Mean_Variance_Estimator___Gamma_Mean) *
 800a506:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a508:	1c18      	adds	r0, r3, #0
 800a50a:	f7f6 fd49 	bl	8000fa0 <__aeabi_fmul>
 800a50e:	1c03      	adds	r3, r0, #0
    gamma_mean = (params->m_Mean_Variance_Estimator___Gamma_Mean +
 800a510:	1c19      	adds	r1, r3, #0
 800a512:	1c20      	adds	r0, r4, #0
 800a514:	f7f6 f9d4 	bl	80008c0 <__aeabi_fadd>
 800a518:	1c03      	adds	r3, r0, #0
 800a51a:	627b      	str	r3, [r7, #36]	@ 0x24
                   sigmoid_gamma_mean));
    gating_threshold_mean =
        (params->mGating_Threshold +
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	69dc      	ldr	r4, [r3, #28]
         ((GasIndexAlgorithm_GATING_THRESHOLD_INITIAL -
           params->mGating_Threshold) *
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	69db      	ldr	r3, [r3, #28]
         ((GasIndexAlgorithm_GATING_THRESHOLD_INITIAL -
 800a524:	1c19      	adds	r1, r3, #0
 800a526:	486b      	ldr	r0, [pc, #428]	@ (800a6d4 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x26c>)
 800a528:	f7f6 fe78 	bl	800121c <__aeabi_fsub>
 800a52c:	1c03      	adds	r3, r0, #0
 800a52e:	1c1d      	adds	r5, r3, #0
          GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	1c11      	adds	r1, r2, #0
 800a538:	0018      	movs	r0, r3
 800a53a:	f000 f9d1 	bl	800a8e0 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 800a53e:	1c03      	adds	r3, r0, #0
           params->mGating_Threshold) *
 800a540:	1c19      	adds	r1, r3, #0
 800a542:	1c28      	adds	r0, r5, #0
 800a544:	f7f6 fd2c 	bl	8000fa0 <__aeabi_fmul>
 800a548:	1c03      	adds	r3, r0, #0
    gating_threshold_mean =
 800a54a:	1c19      	adds	r1, r3, #0
 800a54c:	1c20      	adds	r0, r4, #0
 800a54e:	f7f6 f9b7 	bl	80008c0 <__aeabi_fadd>
 800a552:	1c03      	adds	r3, r0, #0
 800a554:	623b      	str	r3, [r7, #32]
              params, params->m_Mean_Variance_Estimator___Uptime_Gating)));
    GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters(
 800a556:	4a60      	ldr	r2, [pc, #384]	@ (800a6d8 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x270>)
 800a558:	6a39      	ldr	r1, [r7, #32]
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	0018      	movs	r0, r3
 800a55e:	f000 f9af 	bl	800a8c0 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters>
        params, gating_threshold_mean,
        GasIndexAlgorithm_GATING_THRESHOLD_TRANSITION);
    sigmoid_gating_mean =
        GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	1c11      	adds	r1, r2, #0
 800a56a:	0018      	movs	r0, r3
 800a56c:	f000 f9b8 	bl	800a8e0 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 800a570:	1c03      	adds	r3, r0, #0
 800a572:	61fb      	str	r3, [r7, #28]
            params, params->mGas_Index);
    params->m_Mean_Variance_Estimator__Gamma_Mean =
        (sigmoid_gating_mean * gamma_mean);
 800a574:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800a576:	69f8      	ldr	r0, [r7, #28]
 800a578:	f7f6 fd12 	bl	8000fa0 <__aeabi_fmul>
 800a57c:	1c03      	adds	r3, r0, #0
 800a57e:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator__Gamma_Mean =
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	65da      	str	r2, [r3, #92]	@ 0x5c
    GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters(
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	6999      	ldr	r1, [r3, #24]
 800a588:	4a51      	ldr	r2, [pc, #324]	@ (800a6d0 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x268>)
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	0018      	movs	r0, r3
 800a58e:	f000 f997 	bl	800a8c0 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters>
        params, params->mInit_Duration_Variance,
        GasIndexAlgorithm_INIT_TRANSITION_VARIANCE);
    sigmoid_gamma_variance =
        GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	1c11      	adds	r1, r2, #0
 800a59a:	0018      	movs	r0, r3
 800a59c:	f000 f9a0 	bl	800a8e0 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 800a5a0:	1c03      	adds	r3, r0, #0
 800a5a2:	61bb      	str	r3, [r7, #24]
            params, params->m_Mean_Variance_Estimator___Uptime_Gamma);
    gamma_variance =
        (params->m_Mean_Variance_Estimator___Gamma_Variance +
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	6d1c      	ldr	r4, [r3, #80]	@ 0x50
         ((params->m_Mean_Variance_Estimator___Gamma_Initial_Variance -
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
           params->m_Mean_Variance_Estimator___Gamma_Variance) *
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
         ((params->m_Mean_Variance_Estimator___Gamma_Initial_Variance -
 800a5b0:	1c19      	adds	r1, r3, #0
 800a5b2:	1c10      	adds	r0, r2, #0
 800a5b4:	f7f6 fe32 	bl	800121c <__aeabi_fsub>
 800a5b8:	1c03      	adds	r3, r0, #0
 800a5ba:	1c1d      	adds	r5, r3, #0
          (sigmoid_gamma_variance - sigmoid_gamma_mean)));
 800a5bc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a5be:	69b8      	ldr	r0, [r7, #24]
 800a5c0:	f7f6 fe2c 	bl	800121c <__aeabi_fsub>
 800a5c4:	1c03      	adds	r3, r0, #0
           params->m_Mean_Variance_Estimator___Gamma_Variance) *
 800a5c6:	1c19      	adds	r1, r3, #0
 800a5c8:	1c28      	adds	r0, r5, #0
 800a5ca:	f7f6 fce9 	bl	8000fa0 <__aeabi_fmul>
 800a5ce:	1c03      	adds	r3, r0, #0
    gamma_variance =
 800a5d0:	1c19      	adds	r1, r3, #0
 800a5d2:	1c20      	adds	r0, r4, #0
 800a5d4:	f7f6 f974 	bl	80008c0 <__aeabi_fadd>
 800a5d8:	1c03      	adds	r3, r0, #0
 800a5da:	617b      	str	r3, [r7, #20]
    gating_threshold_variance =
        (params->mGating_Threshold +
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	69dc      	ldr	r4, [r3, #28]
         ((GasIndexAlgorithm_GATING_THRESHOLD_INITIAL -
           params->mGating_Threshold) *
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	69db      	ldr	r3, [r3, #28]
         ((GasIndexAlgorithm_GATING_THRESHOLD_INITIAL -
 800a5e4:	1c19      	adds	r1, r3, #0
 800a5e6:	483b      	ldr	r0, [pc, #236]	@ (800a6d4 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x26c>)
 800a5e8:	f7f6 fe18 	bl	800121c <__aeabi_fsub>
 800a5ec:	1c03      	adds	r3, r0, #0
 800a5ee:	1c1d      	adds	r5, r3, #0
          GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	1c11      	adds	r1, r2, #0
 800a5f8:	0018      	movs	r0, r3
 800a5fa:	f000 f971 	bl	800a8e0 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 800a5fe:	1c03      	adds	r3, r0, #0
           params->mGating_Threshold) *
 800a600:	1c19      	adds	r1, r3, #0
 800a602:	1c28      	adds	r0, r5, #0
 800a604:	f7f6 fccc 	bl	8000fa0 <__aeabi_fmul>
 800a608:	1c03      	adds	r3, r0, #0
    gating_threshold_variance =
 800a60a:	1c19      	adds	r1, r3, #0
 800a60c:	1c20      	adds	r0, r4, #0
 800a60e:	f7f6 f957 	bl	80008c0 <__aeabi_fadd>
 800a612:	1c03      	adds	r3, r0, #0
 800a614:	613b      	str	r3, [r7, #16]
              params, params->m_Mean_Variance_Estimator___Uptime_Gating)));
    GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters(
 800a616:	4a30      	ldr	r2, [pc, #192]	@ (800a6d8 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x270>)
 800a618:	6939      	ldr	r1, [r7, #16]
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	0018      	movs	r0, r3
 800a61e:	f000 f94f 	bl	800a8c0 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters>
        params, gating_threshold_variance,
        GasIndexAlgorithm_GATING_THRESHOLD_TRANSITION);
    sigmoid_gating_variance =
        GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	1c11      	adds	r1, r2, #0
 800a62a:	0018      	movs	r0, r3
 800a62c:	f000 f958 	bl	800a8e0 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 800a630:	1c03      	adds	r3, r0, #0
 800a632:	60fb      	str	r3, [r7, #12]
            params, params->mGas_Index);
    params->m_Mean_Variance_Estimator__Gamma_Variance =
        (sigmoid_gating_variance * gamma_variance);
 800a634:	6979      	ldr	r1, [r7, #20]
 800a636:	68f8      	ldr	r0, [r7, #12]
 800a638:	f7f6 fcb2 	bl	8000fa0 <__aeabi_fmul>
 800a63c:	1c03      	adds	r3, r0, #0
 800a63e:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator__Gamma_Variance =
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	661a      	str	r2, [r3, #96]	@ 0x60
    params->m_Mean_Variance_Estimator___Gating_Duration_Minutes =
        (params->m_Mean_Variance_Estimator___Gating_Duration_Minutes +
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	6edc      	ldr	r4, [r3, #108]	@ 0x6c
         ((params->mSamplingInterval / 60.f) *
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	685b      	ldr	r3, [r3, #4]
 800a64c:	4923      	ldr	r1, [pc, #140]	@ (800a6dc <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x274>)
 800a64e:	1c18      	adds	r0, r3, #0
 800a650:	f7f6 fac0 	bl	8000bd4 <__aeabi_fdiv>
 800a654:	1c03      	adds	r3, r0, #0
 800a656:	1c1d      	adds	r5, r3, #0
          (((1.f - sigmoid_gating_mean) *
 800a658:	69f9      	ldr	r1, [r7, #28]
 800a65a:	20fe      	movs	r0, #254	@ 0xfe
 800a65c:	0580      	lsls	r0, r0, #22
 800a65e:	f7f6 fddd 	bl	800121c <__aeabi_fsub>
 800a662:	1c03      	adds	r3, r0, #0
 800a664:	491e      	ldr	r1, [pc, #120]	@ (800a6e0 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x278>)
 800a666:	1c18      	adds	r0, r3, #0
 800a668:	f7f6 fc9a 	bl	8000fa0 <__aeabi_fmul>
 800a66c:	1c03      	adds	r3, r0, #0
            (1.f + GasIndexAlgorithm_GATING_MAX_RATIO)) -
 800a66e:	491d      	ldr	r1, [pc, #116]	@ (800a6e4 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x27c>)
 800a670:	1c18      	adds	r0, r3, #0
 800a672:	f7f6 fdd3 	bl	800121c <__aeabi_fsub>
 800a676:	1c03      	adds	r3, r0, #0
         ((params->mSamplingInterval / 60.f) *
 800a678:	1c19      	adds	r1, r3, #0
 800a67a:	1c28      	adds	r0, r5, #0
 800a67c:	f7f6 fc90 	bl	8000fa0 <__aeabi_fmul>
 800a680:	1c03      	adds	r3, r0, #0
        (params->m_Mean_Variance_Estimator___Gating_Duration_Minutes +
 800a682:	1c19      	adds	r1, r3, #0
 800a684:	1c20      	adds	r0, r4, #0
 800a686:	f7f6 f91b 	bl	80008c0 <__aeabi_fadd>
 800a68a:	1c03      	adds	r3, r0, #0
 800a68c:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator___Gating_Duration_Minutes =
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	66da      	str	r2, [r3, #108]	@ 0x6c
           GasIndexAlgorithm_GATING_MAX_RATIO)));
    if ((params->m_Mean_Variance_Estimator___Gating_Duration_Minutes < 0.f)) {
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a696:	2100      	movs	r1, #0
 800a698:	1c18      	adds	r0, r3, #0
 800a69a:	f7f5 ff49 	bl	8000530 <__aeabi_fcmplt>
 800a69e:	1e03      	subs	r3, r0, #0
 800a6a0:	d002      	beq.n	800a6a8 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x240>
        params->m_Mean_Variance_Estimator___Gating_Duration_Minutes = 0.f;
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	2200      	movs	r2, #0
 800a6a6:	66da      	str	r2, [r3, #108]	@ 0x6c
    }
    if ((params->m_Mean_Variance_Estimator___Gating_Duration_Minutes >
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
         params->mGating_Max_Duration_Minutes)) {
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	691b      	ldr	r3, [r3, #16]
    if ((params->m_Mean_Variance_Estimator___Gating_Duration_Minutes >
 800a6b0:	1c19      	adds	r1, r3, #0
 800a6b2:	1c10      	adds	r0, r2, #0
 800a6b4:	f7f5 ff50 	bl	8000558 <__aeabi_fcmpgt>
 800a6b8:	1e03      	subs	r3, r0, #0
 800a6ba:	d100      	bne.n	800a6be <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x256>
        params->m_Mean_Variance_Estimator___Uptime_Gating = 0.f;
    }
}
 800a6bc:	e002      	b.n	800a6c4 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x25c>
        params->m_Mean_Variance_Estimator___Uptime_Gating = 0.f;
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	2200      	movs	r2, #0
 800a6c2:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800a6c4:	46c0      	nop			@ (mov r8, r8)
 800a6c6:	46bd      	mov	sp, r7
 800a6c8:	b00c      	add	sp, #48	@ 0x30
 800a6ca:	bdb0      	pop	{r4, r5, r7, pc}
 800a6cc:	46fffe00 	.word	0x46fffe00
 800a6d0:	3c23d70a 	.word	0x3c23d70a
 800a6d4:	43ff0000 	.word	0x43ff0000
 800a6d8:	3db851ec 	.word	0x3db851ec
 800a6dc:	42700000 	.word	0x42700000
 800a6e0:	3fa66666 	.word	0x3fa66666
 800a6e4:	3e99999a 	.word	0x3e99999a

0800a6e8 <GasIndexAlgorithm__mean_variance_estimator__process>:

static void GasIndexAlgorithm__mean_variance_estimator__process(
    GasIndexAlgorithmParams* params, float sraw) {
 800a6e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a6ea:	b087      	sub	sp, #28
 800a6ec:	af00      	add	r7, sp, #0
 800a6ee:	6078      	str	r0, [r7, #4]
 800a6f0:	6039      	str	r1, [r7, #0]

    float delta_sgp;
    float c;
    float additional_scaling;

    if ((params->m_Mean_Variance_Estimator___Initialized == false)) {
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	223c      	movs	r2, #60	@ 0x3c
 800a6f6:	5c9b      	ldrb	r3, [r3, r2]
 800a6f8:	2201      	movs	r2, #1
 800a6fa:	4053      	eors	r3, r2
 800a6fc:	b2db      	uxtb	r3, r3
 800a6fe:	2b00      	cmp	r3, #0
 800a700:	d00a      	beq.n	800a718 <GasIndexAlgorithm__mean_variance_estimator__process+0x30>
        params->m_Mean_Variance_Estimator___Initialized = true;
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	223c      	movs	r2, #60	@ 0x3c
 800a706:	2101      	movs	r1, #1
 800a708:	5499      	strb	r1, [r3, r2]
        params->m_Mean_Variance_Estimator___Sraw_Offset = sraw;
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	683a      	ldr	r2, [r7, #0]
 800a70e:	645a      	str	r2, [r3, #68]	@ 0x44
        params->m_Mean_Variance_Estimator___Mean = 0.f;
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	2200      	movs	r2, #0
 800a714:	641a      	str	r2, [r3, #64]	@ 0x40
        params->m_Mean_Variance_Estimator___Mean =
            (params->m_Mean_Variance_Estimator___Mean +
             ((params->m_Mean_Variance_Estimator__Gamma_Mean * delta_sgp) /
              GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__ADDITIONAL_GAMMA_MEAN_SCALING));
    }
}
 800a716:	e0c8      	b.n	800a8aa <GasIndexAlgorithm__mean_variance_estimator__process+0x1c2>
        if (((params->m_Mean_Variance_Estimator___Mean >= 100.f) ||
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a71c:	4965      	ldr	r1, [pc, #404]	@ (800a8b4 <GasIndexAlgorithm__mean_variance_estimator__process+0x1cc>)
 800a71e:	1c18      	adds	r0, r3, #0
 800a720:	f7f5 ff24 	bl	800056c <__aeabi_fcmpge>
 800a724:	1e03      	subs	r3, r0, #0
 800a726:	d107      	bne.n	800a738 <GasIndexAlgorithm__mean_variance_estimator__process+0x50>
             (params->m_Mean_Variance_Estimator___Mean <= -100.f))) {
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
        if (((params->m_Mean_Variance_Estimator___Mean >= 100.f) ||
 800a72c:	4962      	ldr	r1, [pc, #392]	@ (800a8b8 <GasIndexAlgorithm__mean_variance_estimator__process+0x1d0>)
 800a72e:	1c18      	adds	r0, r3, #0
 800a730:	f7f5 ff08 	bl	8000544 <__aeabi_fcmple>
 800a734:	1e03      	subs	r3, r0, #0
 800a736:	d00e      	beq.n	800a756 <GasIndexAlgorithm__mean_variance_estimator__process+0x6e>
                (params->m_Mean_Variance_Estimator___Sraw_Offset +
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
                 params->m_Mean_Variance_Estimator___Mean);
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
                (params->m_Mean_Variance_Estimator___Sraw_Offset +
 800a740:	1c19      	adds	r1, r3, #0
 800a742:	1c10      	adds	r0, r2, #0
 800a744:	f7f6 f8bc 	bl	80008c0 <__aeabi_fadd>
 800a748:	1c03      	adds	r3, r0, #0
 800a74a:	1c1a      	adds	r2, r3, #0
            params->m_Mean_Variance_Estimator___Sraw_Offset =
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	645a      	str	r2, [r3, #68]	@ 0x44
            params->m_Mean_Variance_Estimator___Mean = 0.f;
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	2200      	movs	r2, #0
 800a754:	641a      	str	r2, [r3, #64]	@ 0x40
        sraw = (sraw - params->m_Mean_Variance_Estimator___Sraw_Offset);
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a75a:	1c19      	adds	r1, r3, #0
 800a75c:	6838      	ldr	r0, [r7, #0]
 800a75e:	f7f6 fd5d 	bl	800121c <__aeabi_fsub>
 800a762:	1c03      	adds	r3, r0, #0
 800a764:	603b      	str	r3, [r7, #0]
        GasIndexAlgorithm__mean_variance_estimator___calculate_gamma(params);
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	0018      	movs	r0, r3
 800a76a:	f7ff fe7d 	bl	800a468 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma>
        delta_sgp = ((sraw - params->m_Mean_Variance_Estimator___Mean) /
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a772:	1c19      	adds	r1, r3, #0
 800a774:	6838      	ldr	r0, [r7, #0]
 800a776:	f7f6 fd51 	bl	800121c <__aeabi_fsub>
 800a77a:	1c03      	adds	r3, r0, #0
 800a77c:	2185      	movs	r1, #133	@ 0x85
 800a77e:	05c9      	lsls	r1, r1, #23
 800a780:	1c18      	adds	r0, r3, #0
 800a782:	f7f6 fa27 	bl	8000bd4 <__aeabi_fdiv>
 800a786:	1c03      	adds	r3, r0, #0
 800a788:	60fb      	str	r3, [r7, #12]
        if ((delta_sgp < 0.f)) {
 800a78a:	2100      	movs	r1, #0
 800a78c:	68f8      	ldr	r0, [r7, #12]
 800a78e:	f7f5 fecf 	bl	8000530 <__aeabi_fcmplt>
 800a792:	1e03      	subs	r3, r0, #0
 800a794:	d008      	beq.n	800a7a8 <GasIndexAlgorithm__mean_variance_estimator__process+0xc0>
            c = (params->m_Mean_Variance_Estimator___Std - delta_sgp);
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a79a:	68f9      	ldr	r1, [r7, #12]
 800a79c:	1c18      	adds	r0, r3, #0
 800a79e:	f7f6 fd3d 	bl	800121c <__aeabi_fsub>
 800a7a2:	1c03      	adds	r3, r0, #0
 800a7a4:	617b      	str	r3, [r7, #20]
 800a7a6:	e007      	b.n	800a7b8 <GasIndexAlgorithm__mean_variance_estimator__process+0xd0>
            c = (params->m_Mean_Variance_Estimator___Std + delta_sgp);
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a7ac:	1c19      	adds	r1, r3, #0
 800a7ae:	68f8      	ldr	r0, [r7, #12]
 800a7b0:	f7f6 f886 	bl	80008c0 <__aeabi_fadd>
 800a7b4:	1c03      	adds	r3, r0, #0
 800a7b6:	617b      	str	r3, [r7, #20]
        additional_scaling = 1.f;
 800a7b8:	23fe      	movs	r3, #254	@ 0xfe
 800a7ba:	059b      	lsls	r3, r3, #22
 800a7bc:	613b      	str	r3, [r7, #16]
        if ((c > 1440.f)) {
 800a7be:	493f      	ldr	r1, [pc, #252]	@ (800a8bc <GasIndexAlgorithm__mean_variance_estimator__process+0x1d4>)
 800a7c0:	6978      	ldr	r0, [r7, #20]
 800a7c2:	f7f5 fec9 	bl	8000558 <__aeabi_fcmpgt>
 800a7c6:	1e03      	subs	r3, r0, #0
 800a7c8:	d010      	beq.n	800a7ec <GasIndexAlgorithm__mean_variance_estimator__process+0x104>
            additional_scaling = ((c / 1440.f) * (c / 1440.f));
 800a7ca:	493c      	ldr	r1, [pc, #240]	@ (800a8bc <GasIndexAlgorithm__mean_variance_estimator__process+0x1d4>)
 800a7cc:	6978      	ldr	r0, [r7, #20]
 800a7ce:	f7f6 fa01 	bl	8000bd4 <__aeabi_fdiv>
 800a7d2:	1c03      	adds	r3, r0, #0
 800a7d4:	1c1c      	adds	r4, r3, #0
 800a7d6:	4939      	ldr	r1, [pc, #228]	@ (800a8bc <GasIndexAlgorithm__mean_variance_estimator__process+0x1d4>)
 800a7d8:	6978      	ldr	r0, [r7, #20]
 800a7da:	f7f6 f9fb 	bl	8000bd4 <__aeabi_fdiv>
 800a7de:	1c03      	adds	r3, r0, #0
 800a7e0:	1c19      	adds	r1, r3, #0
 800a7e2:	1c20      	adds	r0, r4, #0
 800a7e4:	f7f6 fbdc 	bl	8000fa0 <__aeabi_fmul>
 800a7e8:	1c03      	adds	r3, r0, #0
 800a7ea:	613b      	str	r3, [r7, #16]
                     params->m_Mean_Variance_Estimator__Gamma_Variance))) *
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
                    (GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING -
 800a7f0:	1c19      	adds	r1, r3, #0
 800a7f2:	2085      	movs	r0, #133	@ 0x85
 800a7f4:	05c0      	lsls	r0, r0, #23
 800a7f6:	f7f6 fd11 	bl	800121c <__aeabi_fsub>
 800a7fa:	1c03      	adds	r3, r0, #0
            (sqrtf((additional_scaling *
 800a7fc:	6939      	ldr	r1, [r7, #16]
 800a7fe:	1c18      	adds	r0, r3, #0
 800a800:	f7f6 fbce 	bl	8000fa0 <__aeabi_fmul>
 800a804:	1c03      	adds	r3, r0, #0
 800a806:	1c18      	adds	r0, r3, #0
 800a808:	f017 fe3a 	bl	8022480 <sqrtf>
 800a80c:	1c06      	adds	r6, r0, #0
                 ((params->m_Mean_Variance_Estimator___Std *
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	6c9c      	ldr	r4, [r3, #72]	@ 0x48
                   (params->m_Mean_Variance_Estimator___Std /
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	6c9d      	ldr	r5, [r3, #72]	@ 0x48
                    (GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING *
 800a816:	2185      	movs	r1, #133	@ 0x85
 800a818:	05c9      	lsls	r1, r1, #23
 800a81a:	6938      	ldr	r0, [r7, #16]
 800a81c:	f7f6 fbc0 	bl	8000fa0 <__aeabi_fmul>
 800a820:	1c03      	adds	r3, r0, #0
                   (params->m_Mean_Variance_Estimator___Std /
 800a822:	1c19      	adds	r1, r3, #0
 800a824:	1c28      	adds	r0, r5, #0
 800a826:	f7f6 f9d5 	bl	8000bd4 <__aeabi_fdiv>
 800a82a:	1c03      	adds	r3, r0, #0
                 ((params->m_Mean_Variance_Estimator___Std *
 800a82c:	1c19      	adds	r1, r3, #0
 800a82e:	1c20      	adds	r0, r4, #0
 800a830:	f7f6 fbb6 	bl	8000fa0 <__aeabi_fmul>
 800a834:	1c03      	adds	r3, r0, #0
 800a836:	1c1c      	adds	r4, r3, #0
                  (((params->m_Mean_Variance_Estimator__Gamma_Variance *
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a83c:	68f9      	ldr	r1, [r7, #12]
 800a83e:	1c18      	adds	r0, r3, #0
 800a840:	f7f6 fbae 	bl	8000fa0 <__aeabi_fmul>
 800a844:	1c03      	adds	r3, r0, #0
                     delta_sgp) /
 800a846:	6939      	ldr	r1, [r7, #16]
 800a848:	1c18      	adds	r0, r3, #0
 800a84a:	f7f6 f9c3 	bl	8000bd4 <__aeabi_fdiv>
 800a84e:	1c03      	adds	r3, r0, #0
                    additional_scaling) *
 800a850:	68f9      	ldr	r1, [r7, #12]
 800a852:	1c18      	adds	r0, r3, #0
 800a854:	f7f6 fba4 	bl	8000fa0 <__aeabi_fmul>
 800a858:	1c03      	adds	r3, r0, #0
             sqrtf(
 800a85a:	1c19      	adds	r1, r3, #0
 800a85c:	1c20      	adds	r0, r4, #0
 800a85e:	f7f6 f82f 	bl	80008c0 <__aeabi_fadd>
 800a862:	1c03      	adds	r3, r0, #0
 800a864:	1c18      	adds	r0, r3, #0
 800a866:	f017 fe0b 	bl	8022480 <sqrtf>
 800a86a:	1c03      	adds	r3, r0, #0
                     params->m_Mean_Variance_Estimator__Gamma_Variance))) *
 800a86c:	1c19      	adds	r1, r3, #0
 800a86e:	1c30      	adds	r0, r6, #0
 800a870:	f7f6 fb96 	bl	8000fa0 <__aeabi_fmul>
 800a874:	1c03      	adds	r3, r0, #0
 800a876:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Std =
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	649a      	str	r2, [r3, #72]	@ 0x48
            (params->m_Mean_Variance_Estimator___Mean +
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	6c1c      	ldr	r4, [r3, #64]	@ 0x40
             ((params->m_Mean_Variance_Estimator__Gamma_Mean * delta_sgp) /
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a884:	68f9      	ldr	r1, [r7, #12]
 800a886:	1c18      	adds	r0, r3, #0
 800a888:	f7f6 fb8a 	bl	8000fa0 <__aeabi_fmul>
 800a88c:	1c03      	adds	r3, r0, #0
 800a88e:	2182      	movs	r1, #130	@ 0x82
 800a890:	05c9      	lsls	r1, r1, #23
 800a892:	1c18      	adds	r0, r3, #0
 800a894:	f7f6 f99e 	bl	8000bd4 <__aeabi_fdiv>
 800a898:	1c03      	adds	r3, r0, #0
            (params->m_Mean_Variance_Estimator___Mean +
 800a89a:	1c19      	adds	r1, r3, #0
 800a89c:	1c20      	adds	r0, r4, #0
 800a89e:	f7f6 f80f 	bl	80008c0 <__aeabi_fadd>
 800a8a2:	1c03      	adds	r3, r0, #0
 800a8a4:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Mean =
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	641a      	str	r2, [r3, #64]	@ 0x40
}
 800a8aa:	46c0      	nop			@ (mov r8, r8)
 800a8ac:	46bd      	mov	sp, r7
 800a8ae:	b007      	add	sp, #28
 800a8b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a8b2:	46c0      	nop			@ (mov r8, r8)
 800a8b4:	42c80000 	.word	0x42c80000
 800a8b8:	c2c80000 	.word	0xc2c80000
 800a8bc:	44b40000 	.word	0x44b40000

0800a8c0 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters>:

static void
GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters(
    GasIndexAlgorithmParams* params, float X0, float K) {
 800a8c0:	b580      	push	{r7, lr}
 800a8c2:	b084      	sub	sp, #16
 800a8c4:	af00      	add	r7, sp, #0
 800a8c6:	60f8      	str	r0, [r7, #12]
 800a8c8:	60b9      	str	r1, [r7, #8]
 800a8ca:	607a      	str	r2, [r7, #4]

    params->m_Mean_Variance_Estimator___Sigmoid__K = K;
 800a8cc:	68fb      	ldr	r3, [r7, #12]
 800a8ce:	687a      	ldr	r2, [r7, #4]
 800a8d0:	671a      	str	r2, [r3, #112]	@ 0x70
    params->m_Mean_Variance_Estimator___Sigmoid__X0 = X0;
 800a8d2:	68fb      	ldr	r3, [r7, #12]
 800a8d4:	68ba      	ldr	r2, [r7, #8]
 800a8d6:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800a8d8:	46c0      	nop			@ (mov r8, r8)
 800a8da:	46bd      	mov	sp, r7
 800a8dc:	b004      	add	sp, #16
 800a8de:	bd80      	pop	{r7, pc}

0800a8e0 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>:

static float GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
    GasIndexAlgorithmParams* params, float sample) {
 800a8e0:	b590      	push	{r4, r7, lr}
 800a8e2:	b085      	sub	sp, #20
 800a8e4:	af00      	add	r7, sp, #0
 800a8e6:	6078      	str	r0, [r7, #4]
 800a8e8:	6039      	str	r1, [r7, #0]

    float x;

    x = (params->m_Mean_Variance_Estimator___Sigmoid__K *
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	6f1c      	ldr	r4, [r3, #112]	@ 0x70
         (sample - params->m_Mean_Variance_Estimator___Sigmoid__X0));
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a8f2:	1c19      	adds	r1, r3, #0
 800a8f4:	6838      	ldr	r0, [r7, #0]
 800a8f6:	f7f6 fc91 	bl	800121c <__aeabi_fsub>
 800a8fa:	1c03      	adds	r3, r0, #0
    x = (params->m_Mean_Variance_Estimator___Sigmoid__K *
 800a8fc:	1c19      	adds	r1, r3, #0
 800a8fe:	1c20      	adds	r0, r4, #0
 800a900:	f7f6 fb4e 	bl	8000fa0 <__aeabi_fmul>
 800a904:	1c03      	adds	r3, r0, #0
 800a906:	60fb      	str	r3, [r7, #12]
    if ((x < -50.f)) {
 800a908:	4912      	ldr	r1, [pc, #72]	@ (800a954 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x74>)
 800a90a:	68f8      	ldr	r0, [r7, #12]
 800a90c:	f7f5 fe10 	bl	8000530 <__aeabi_fcmplt>
 800a910:	1e03      	subs	r3, r0, #0
 800a912:	d002      	beq.n	800a91a <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x3a>
        return 1.f;
 800a914:	23fe      	movs	r3, #254	@ 0xfe
 800a916:	059b      	lsls	r3, r3, #22
 800a918:	e018      	b.n	800a94c <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x6c>
    } else if ((x > 50.f)) {
 800a91a:	490f      	ldr	r1, [pc, #60]	@ (800a958 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x78>)
 800a91c:	68f8      	ldr	r0, [r7, #12]
 800a91e:	f7f5 fe1b 	bl	8000558 <__aeabi_fcmpgt>
 800a922:	1e03      	subs	r3, r0, #0
 800a924:	d001      	beq.n	800a92a <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x4a>
        return 0.f;
 800a926:	2300      	movs	r3, #0
 800a928:	e010      	b.n	800a94c <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x6c>
    } else {
        return (1.f / (1.f + expf(x)));
 800a92a:	68fb      	ldr	r3, [r7, #12]
 800a92c:	1c18      	adds	r0, r3, #0
 800a92e:	f017 fd7f 	bl	8022430 <expf>
 800a932:	1c03      	adds	r3, r0, #0
 800a934:	21fe      	movs	r1, #254	@ 0xfe
 800a936:	0589      	lsls	r1, r1, #22
 800a938:	1c18      	adds	r0, r3, #0
 800a93a:	f7f5 ffc1 	bl	80008c0 <__aeabi_fadd>
 800a93e:	1c03      	adds	r3, r0, #0
 800a940:	1c19      	adds	r1, r3, #0
 800a942:	20fe      	movs	r0, #254	@ 0xfe
 800a944:	0580      	lsls	r0, r0, #22
 800a946:	f7f6 f945 	bl	8000bd4 <__aeabi_fdiv>
 800a94a:	1c03      	adds	r3, r0, #0
    }
}
 800a94c:	1c18      	adds	r0, r3, #0
 800a94e:	46bd      	mov	sp, r7
 800a950:	b005      	add	sp, #20
 800a952:	bd90      	pop	{r4, r7, pc}
 800a954:	c2480000 	.word	0xc2480000
 800a958:	42480000 	.word	0x42480000

0800a95c <GasIndexAlgorithm__mox_model__set_parameters>:

static void
GasIndexAlgorithm__mox_model__set_parameters(GasIndexAlgorithmParams* params,
                                             float SRAW_STD, float SRAW_MEAN) {
 800a95c:	b580      	push	{r7, lr}
 800a95e:	b084      	sub	sp, #16
 800a960:	af00      	add	r7, sp, #0
 800a962:	60f8      	str	r0, [r7, #12]
 800a964:	60b9      	str	r1, [r7, #8]
 800a966:	607a      	str	r2, [r7, #4]

    params->m_Mox_Model__Sraw_Std = SRAW_STD;
 800a968:	68fb      	ldr	r3, [r7, #12]
 800a96a:	68ba      	ldr	r2, [r7, #8]
 800a96c:	679a      	str	r2, [r3, #120]	@ 0x78
    params->m_Mox_Model__Sraw_Mean = SRAW_MEAN;
 800a96e:	68fb      	ldr	r3, [r7, #12]
 800a970:	687a      	ldr	r2, [r7, #4]
 800a972:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 800a974:	46c0      	nop			@ (mov r8, r8)
 800a976:	46bd      	mov	sp, r7
 800a978:	b004      	add	sp, #16
 800a97a:	bd80      	pop	{r7, pc}

0800a97c <GasIndexAlgorithm__mox_model__process>:

static float
GasIndexAlgorithm__mox_model__process(GasIndexAlgorithmParams* params,
                                      float sraw) {
 800a97c:	b590      	push	{r4, r7, lr}
 800a97e:	b083      	sub	sp, #12
 800a980:	af00      	add	r7, sp, #0
 800a982:	6078      	str	r0, [r7, #4]
 800a984:	6039      	str	r1, [r7, #0]

    if ((params->mAlgorithm_Type == GasIndexAlgorithm_ALGORITHM_TYPE_NOX)) {
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	681b      	ldr	r3, [r3, #0]
 800a98a:	2b01      	cmp	r3, #1
 800a98c:	d114      	bne.n	800a9b8 <GasIndexAlgorithm__mox_model__process+0x3c>
        return (((sraw - params->m_Mox_Model__Sraw_Mean) /
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a992:	1c19      	adds	r1, r3, #0
 800a994:	6838      	ldr	r0, [r7, #0]
 800a996:	f7f6 fc41 	bl	800121c <__aeabi_fsub>
 800a99a:	1c03      	adds	r3, r0, #0
 800a99c:	4918      	ldr	r1, [pc, #96]	@ (800aa00 <GasIndexAlgorithm__mox_model__process+0x84>)
 800a99e:	1c18      	adds	r0, r3, #0
 800a9a0:	f7f6 f918 	bl	8000bd4 <__aeabi_fdiv>
 800a9a4:	1c03      	adds	r3, r0, #0
 800a9a6:	1c1a      	adds	r2, r3, #0
                 GasIndexAlgorithm_SRAW_STD_NOX) *
                params->mIndex_Gain);
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	6a1b      	ldr	r3, [r3, #32]
                 GasIndexAlgorithm_SRAW_STD_NOX) *
 800a9ac:	1c19      	adds	r1, r3, #0
 800a9ae:	1c10      	adds	r0, r2, #0
 800a9b0:	f7f6 faf6 	bl	8000fa0 <__aeabi_fmul>
 800a9b4:	1c03      	adds	r3, r0, #0
 800a9b6:	e01f      	b.n	800a9f8 <GasIndexAlgorithm__mox_model__process+0x7c>
    } else {
        return (((sraw - params->m_Mox_Model__Sraw_Mean) /
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a9bc:	1c19      	adds	r1, r3, #0
 800a9be:	6838      	ldr	r0, [r7, #0]
 800a9c0:	f7f6 fc2c 	bl	800121c <__aeabi_fsub>
 800a9c4:	1c03      	adds	r3, r0, #0
 800a9c6:	1c1a      	adds	r2, r3, #0
 800a9c8:	2380      	movs	r3, #128	@ 0x80
 800a9ca:	061b      	lsls	r3, r3, #24
 800a9cc:	4053      	eors	r3, r2
 800a9ce:	001c      	movs	r4, r3
                 (-1.f * (params->m_Mox_Model__Sraw_Std +
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a9d4:	490b      	ldr	r1, [pc, #44]	@ (800aa04 <GasIndexAlgorithm__mox_model__process+0x88>)
 800a9d6:	1c18      	adds	r0, r3, #0
 800a9d8:	f7f5 ff72 	bl	80008c0 <__aeabi_fadd>
 800a9dc:	1c03      	adds	r3, r0, #0
        return (((sraw - params->m_Mox_Model__Sraw_Mean) /
 800a9de:	1c19      	adds	r1, r3, #0
 800a9e0:	1c20      	adds	r0, r4, #0
 800a9e2:	f7f6 f8f7 	bl	8000bd4 <__aeabi_fdiv>
 800a9e6:	1c03      	adds	r3, r0, #0
 800a9e8:	1c1a      	adds	r2, r3, #0
                          GasIndexAlgorithm_SRAW_STD_BONUS_VOC))) *
                params->mIndex_Gain);
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	6a1b      	ldr	r3, [r3, #32]
                          GasIndexAlgorithm_SRAW_STD_BONUS_VOC))) *
 800a9ee:	1c19      	adds	r1, r3, #0
 800a9f0:	1c10      	adds	r0, r2, #0
 800a9f2:	f7f6 fad5 	bl	8000fa0 <__aeabi_fmul>
 800a9f6:	1c03      	adds	r3, r0, #0
    }
}
 800a9f8:	1c18      	adds	r0, r3, #0
 800a9fa:	46bd      	mov	sp, r7
 800a9fc:	b003      	add	sp, #12
 800a9fe:	bd90      	pop	{r4, r7, pc}
 800aa00:	44fa0000 	.word	0x44fa0000
 800aa04:	435c0000 	.word	0x435c0000

0800aa08 <GasIndexAlgorithm__sigmoid_scaled__set_parameters>:

static void GasIndexAlgorithm__sigmoid_scaled__set_parameters(
    GasIndexAlgorithmParams* params, float X0, float K, float offset_default) {
 800aa08:	b580      	push	{r7, lr}
 800aa0a:	b084      	sub	sp, #16
 800aa0c:	af00      	add	r7, sp, #0
 800aa0e:	60f8      	str	r0, [r7, #12]
 800aa10:	60b9      	str	r1, [r7, #8]
 800aa12:	607a      	str	r2, [r7, #4]
 800aa14:	603b      	str	r3, [r7, #0]

    params->m_Sigmoid_Scaled__K = K;
 800aa16:	68fb      	ldr	r3, [r7, #12]
 800aa18:	2180      	movs	r1, #128	@ 0x80
 800aa1a:	687a      	ldr	r2, [r7, #4]
 800aa1c:	505a      	str	r2, [r3, r1]
    params->m_Sigmoid_Scaled__X0 = X0;
 800aa1e:	68fb      	ldr	r3, [r7, #12]
 800aa20:	2184      	movs	r1, #132	@ 0x84
 800aa22:	68ba      	ldr	r2, [r7, #8]
 800aa24:	505a      	str	r2, [r3, r1]
    params->m_Sigmoid_Scaled__Offset_Default = offset_default;
 800aa26:	68fb      	ldr	r3, [r7, #12]
 800aa28:	2188      	movs	r1, #136	@ 0x88
 800aa2a:	683a      	ldr	r2, [r7, #0]
 800aa2c:	505a      	str	r2, [r3, r1]
}
 800aa2e:	46c0      	nop			@ (mov r8, r8)
 800aa30:	46bd      	mov	sp, r7
 800aa32:	b004      	add	sp, #16
 800aa34:	bd80      	pop	{r7, pc}
	...

0800aa38 <GasIndexAlgorithm__sigmoid_scaled__process>:

static float
GasIndexAlgorithm__sigmoid_scaled__process(GasIndexAlgorithmParams* params,
                                           float sample) {
 800aa38:	b590      	push	{r4, r7, lr}
 800aa3a:	b085      	sub	sp, #20
 800aa3c:	af00      	add	r7, sp, #0
 800aa3e:	6078      	str	r0, [r7, #4]
 800aa40:	6039      	str	r1, [r7, #0]

    float x;
    float shift;

    x = (params->m_Sigmoid_Scaled__K * (sample - params->m_Sigmoid_Scaled__X0));
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	2280      	movs	r2, #128	@ 0x80
 800aa46:	589c      	ldr	r4, [r3, r2]
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	2284      	movs	r2, #132	@ 0x84
 800aa4c:	589b      	ldr	r3, [r3, r2]
 800aa4e:	1c19      	adds	r1, r3, #0
 800aa50:	6838      	ldr	r0, [r7, #0]
 800aa52:	f7f6 fbe3 	bl	800121c <__aeabi_fsub>
 800aa56:	1c03      	adds	r3, r0, #0
 800aa58:	1c19      	adds	r1, r3, #0
 800aa5a:	1c20      	adds	r0, r4, #0
 800aa5c:	f7f6 faa0 	bl	8000fa0 <__aeabi_fmul>
 800aa60:	1c03      	adds	r3, r0, #0
 800aa62:	60bb      	str	r3, [r7, #8]
    if ((x < -50.f)) {
 800aa64:	4940      	ldr	r1, [pc, #256]	@ (800ab68 <GasIndexAlgorithm__sigmoid_scaled__process+0x130>)
 800aa66:	68b8      	ldr	r0, [r7, #8]
 800aa68:	f7f5 fd62 	bl	8000530 <__aeabi_fcmplt>
 800aa6c:	1e03      	subs	r3, r0, #0
 800aa6e:	d001      	beq.n	800aa74 <GasIndexAlgorithm__sigmoid_scaled__process+0x3c>
        return GasIndexAlgorithm_SIGMOID_L;
 800aa70:	4b3e      	ldr	r3, [pc, #248]	@ (800ab6c <GasIndexAlgorithm__sigmoid_scaled__process+0x134>)
 800aa72:	e075      	b.n	800ab60 <GasIndexAlgorithm__sigmoid_scaled__process+0x128>
    } else if ((x > 50.f)) {
 800aa74:	493e      	ldr	r1, [pc, #248]	@ (800ab70 <GasIndexAlgorithm__sigmoid_scaled__process+0x138>)
 800aa76:	68b8      	ldr	r0, [r7, #8]
 800aa78:	f7f5 fd6e 	bl	8000558 <__aeabi_fcmpgt>
 800aa7c:	1e03      	subs	r3, r0, #0
 800aa7e:	d001      	beq.n	800aa84 <GasIndexAlgorithm__sigmoid_scaled__process+0x4c>
        return 0.f;
 800aa80:	2300      	movs	r3, #0
 800aa82:	e06d      	b.n	800ab60 <GasIndexAlgorithm__sigmoid_scaled__process+0x128>
    } else {
        if ((sample >= 0.f)) {
 800aa84:	2100      	movs	r1, #0
 800aa86:	6838      	ldr	r0, [r7, #0]
 800aa88:	f7f5 fd70 	bl	800056c <__aeabi_fcmpge>
 800aa8c:	1e03      	subs	r3, r0, #0
 800aa8e:	d047      	beq.n	800ab20 <GasIndexAlgorithm__sigmoid_scaled__process+0xe8>
            if ((params->m_Sigmoid_Scaled__Offset_Default == 1.f)) {
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	2288      	movs	r2, #136	@ 0x88
 800aa94:	589b      	ldr	r3, [r3, r2]
 800aa96:	21fe      	movs	r1, #254	@ 0xfe
 800aa98:	0589      	lsls	r1, r1, #22
 800aa9a:	1c18      	adds	r0, r3, #0
 800aa9c:	f7f5 fd42 	bl	8000524 <__aeabi_fcmpeq>
 800aaa0:	1e03      	subs	r3, r0, #0
 800aaa2:	d00e      	beq.n	800aac2 <GasIndexAlgorithm__sigmoid_scaled__process+0x8a>
                shift = ((500.f / 499.f) * (1.f - params->mIndex_Offset));
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	689b      	ldr	r3, [r3, #8]
 800aaa8:	1c19      	adds	r1, r3, #0
 800aaaa:	20fe      	movs	r0, #254	@ 0xfe
 800aaac:	0580      	lsls	r0, r0, #22
 800aaae:	f7f6 fbb5 	bl	800121c <__aeabi_fsub>
 800aab2:	1c03      	adds	r3, r0, #0
 800aab4:	492f      	ldr	r1, [pc, #188]	@ (800ab74 <GasIndexAlgorithm__sigmoid_scaled__process+0x13c>)
 800aab6:	1c18      	adds	r0, r3, #0
 800aab8:	f7f6 fa72 	bl	8000fa0 <__aeabi_fmul>
 800aabc:	1c03      	adds	r3, r0, #0
 800aabe:	60fb      	str	r3, [r7, #12]
 800aac0:	e012      	b.n	800aae8 <GasIndexAlgorithm__sigmoid_scaled__process+0xb0>
            } else {
                shift = ((GasIndexAlgorithm_SIGMOID_L -
                          (5.f * params->mIndex_Offset)) /
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	689b      	ldr	r3, [r3, #8]
 800aac6:	492c      	ldr	r1, [pc, #176]	@ (800ab78 <GasIndexAlgorithm__sigmoid_scaled__process+0x140>)
 800aac8:	1c18      	adds	r0, r3, #0
 800aaca:	f7f6 fa69 	bl	8000fa0 <__aeabi_fmul>
 800aace:	1c03      	adds	r3, r0, #0
                shift = ((GasIndexAlgorithm_SIGMOID_L -
 800aad0:	1c19      	adds	r1, r3, #0
 800aad2:	4826      	ldr	r0, [pc, #152]	@ (800ab6c <GasIndexAlgorithm__sigmoid_scaled__process+0x134>)
 800aad4:	f7f6 fba2 	bl	800121c <__aeabi_fsub>
 800aad8:	1c03      	adds	r3, r0, #0
 800aada:	2181      	movs	r1, #129	@ 0x81
 800aadc:	05c9      	lsls	r1, r1, #23
 800aade:	1c18      	adds	r0, r3, #0
 800aae0:	f7f6 f878 	bl	8000bd4 <__aeabi_fdiv>
 800aae4:	1c03      	adds	r3, r0, #0
 800aae6:	60fb      	str	r3, [r7, #12]
                         4.f);
            }
            return (((GasIndexAlgorithm_SIGMOID_L + shift) / (1.f + expf(x))) -
 800aae8:	4920      	ldr	r1, [pc, #128]	@ (800ab6c <GasIndexAlgorithm__sigmoid_scaled__process+0x134>)
 800aaea:	68f8      	ldr	r0, [r7, #12]
 800aaec:	f7f5 fee8 	bl	80008c0 <__aeabi_fadd>
 800aaf0:	1c03      	adds	r3, r0, #0
 800aaf2:	1c1c      	adds	r4, r3, #0
 800aaf4:	68bb      	ldr	r3, [r7, #8]
 800aaf6:	1c18      	adds	r0, r3, #0
 800aaf8:	f017 fc9a 	bl	8022430 <expf>
 800aafc:	1c03      	adds	r3, r0, #0
 800aafe:	21fe      	movs	r1, #254	@ 0xfe
 800ab00:	0589      	lsls	r1, r1, #22
 800ab02:	1c18      	adds	r0, r3, #0
 800ab04:	f7f5 fedc 	bl	80008c0 <__aeabi_fadd>
 800ab08:	1c03      	adds	r3, r0, #0
 800ab0a:	1c19      	adds	r1, r3, #0
 800ab0c:	1c20      	adds	r0, r4, #0
 800ab0e:	f7f6 f861 	bl	8000bd4 <__aeabi_fdiv>
 800ab12:	1c03      	adds	r3, r0, #0
 800ab14:	68f9      	ldr	r1, [r7, #12]
 800ab16:	1c18      	adds	r0, r3, #0
 800ab18:	f7f6 fb80 	bl	800121c <__aeabi_fsub>
 800ab1c:	1c03      	adds	r3, r0, #0
 800ab1e:	e01f      	b.n	800ab60 <GasIndexAlgorithm__sigmoid_scaled__process+0x128>
                    shift);
        } else {
            return ((params->mIndex_Offset /
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	689a      	ldr	r2, [r3, #8]
                     params->m_Sigmoid_Scaled__Offset_Default) *
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	2188      	movs	r1, #136	@ 0x88
 800ab28:	585b      	ldr	r3, [r3, r1]
            return ((params->mIndex_Offset /
 800ab2a:	1c19      	adds	r1, r3, #0
 800ab2c:	1c10      	adds	r0, r2, #0
 800ab2e:	f7f6 f851 	bl	8000bd4 <__aeabi_fdiv>
 800ab32:	1c03      	adds	r3, r0, #0
 800ab34:	1c1c      	adds	r4, r3, #0
                    (GasIndexAlgorithm_SIGMOID_L / (1.f + expf(x))));
 800ab36:	68bb      	ldr	r3, [r7, #8]
 800ab38:	1c18      	adds	r0, r3, #0
 800ab3a:	f017 fc79 	bl	8022430 <expf>
 800ab3e:	1c03      	adds	r3, r0, #0
 800ab40:	21fe      	movs	r1, #254	@ 0xfe
 800ab42:	0589      	lsls	r1, r1, #22
 800ab44:	1c18      	adds	r0, r3, #0
 800ab46:	f7f5 febb 	bl	80008c0 <__aeabi_fadd>
 800ab4a:	1c03      	adds	r3, r0, #0
 800ab4c:	1c19      	adds	r1, r3, #0
 800ab4e:	4807      	ldr	r0, [pc, #28]	@ (800ab6c <GasIndexAlgorithm__sigmoid_scaled__process+0x134>)
 800ab50:	f7f6 f840 	bl	8000bd4 <__aeabi_fdiv>
 800ab54:	1c03      	adds	r3, r0, #0
                     params->m_Sigmoid_Scaled__Offset_Default) *
 800ab56:	1c19      	adds	r1, r3, #0
 800ab58:	1c20      	adds	r0, r4, #0
 800ab5a:	f7f6 fa21 	bl	8000fa0 <__aeabi_fmul>
 800ab5e:	1c03      	adds	r3, r0, #0
        }
    }
}
 800ab60:	1c18      	adds	r0, r3, #0
 800ab62:	46bd      	mov	sp, r7
 800ab64:	b005      	add	sp, #20
 800ab66:	bd90      	pop	{r4, r7, pc}
 800ab68:	c2480000 	.word	0xc2480000
 800ab6c:	43fa0000 	.word	0x43fa0000
 800ab70:	42480000 	.word	0x42480000
 800ab74:	3f8041ab 	.word	0x3f8041ab
 800ab78:	40a00000 	.word	0x40a00000

0800ab7c <GasIndexAlgorithm__adaptive_lowpass__set_parameters>:

static void GasIndexAlgorithm__adaptive_lowpass__set_parameters(
    GasIndexAlgorithmParams* params) {
 800ab7c:	b590      	push	{r4, r7, lr}
 800ab7e:	b083      	sub	sp, #12
 800ab80:	af00      	add	r7, sp, #0
 800ab82:	6078      	str	r0, [r7, #4]

    params->m_Adaptive_Lowpass__A1 =
        (params->mSamplingInterval /
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	685c      	ldr	r4, [r3, #4]
         (GasIndexAlgorithm_LP_TAU_FAST + params->mSamplingInterval));
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	685b      	ldr	r3, [r3, #4]
 800ab8c:	4913      	ldr	r1, [pc, #76]	@ (800abdc <GasIndexAlgorithm__adaptive_lowpass__set_parameters+0x60>)
 800ab8e:	1c18      	adds	r0, r3, #0
 800ab90:	f7f5 fe96 	bl	80008c0 <__aeabi_fadd>
 800ab94:	1c03      	adds	r3, r0, #0
        (params->mSamplingInterval /
 800ab96:	1c19      	adds	r1, r3, #0
 800ab98:	1c20      	adds	r0, r4, #0
 800ab9a:	f7f6 f81b 	bl	8000bd4 <__aeabi_fdiv>
 800ab9e:	1c03      	adds	r3, r0, #0
 800aba0:	1c19      	adds	r1, r3, #0
    params->m_Adaptive_Lowpass__A1 =
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	228c      	movs	r2, #140	@ 0x8c
 800aba6:	5099      	str	r1, [r3, r2]
    params->m_Adaptive_Lowpass__A2 =
        (params->mSamplingInterval /
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	685c      	ldr	r4, [r3, #4]
         (GasIndexAlgorithm_LP_TAU_SLOW + params->mSamplingInterval));
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	685b      	ldr	r3, [r3, #4]
 800abb0:	490b      	ldr	r1, [pc, #44]	@ (800abe0 <GasIndexAlgorithm__adaptive_lowpass__set_parameters+0x64>)
 800abb2:	1c18      	adds	r0, r3, #0
 800abb4:	f7f5 fe84 	bl	80008c0 <__aeabi_fadd>
 800abb8:	1c03      	adds	r3, r0, #0
        (params->mSamplingInterval /
 800abba:	1c19      	adds	r1, r3, #0
 800abbc:	1c20      	adds	r0, r4, #0
 800abbe:	f7f6 f809 	bl	8000bd4 <__aeabi_fdiv>
 800abc2:	1c03      	adds	r3, r0, #0
 800abc4:	1c19      	adds	r1, r3, #0
    params->m_Adaptive_Lowpass__A2 =
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	2290      	movs	r2, #144	@ 0x90
 800abca:	5099      	str	r1, [r3, r2]
    params->m_Adaptive_Lowpass___Initialized = false;
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	2294      	movs	r2, #148	@ 0x94
 800abd0:	2100      	movs	r1, #0
 800abd2:	5499      	strb	r1, [r3, r2]
}
 800abd4:	46c0      	nop			@ (mov r8, r8)
 800abd6:	46bd      	mov	sp, r7
 800abd8:	b003      	add	sp, #12
 800abda:	bd90      	pop	{r4, r7, pc}
 800abdc:	41a00000 	.word	0x41a00000
 800abe0:	43fa0000 	.word	0x43fa0000

0800abe4 <GasIndexAlgorithm__adaptive_lowpass__process>:

static float
GasIndexAlgorithm__adaptive_lowpass__process(GasIndexAlgorithmParams* params,
                                             float sample) {
 800abe4:	b590      	push	{r4, r7, lr}
 800abe6:	b087      	sub	sp, #28
 800abe8:	af00      	add	r7, sp, #0
 800abea:	6078      	str	r0, [r7, #4]
 800abec:	6039      	str	r1, [r7, #0]
    float abs_delta;
    float F1;
    float tau_a;
    float a3;

    if ((params->m_Adaptive_Lowpass___Initialized == false)) {
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	2294      	movs	r2, #148	@ 0x94
 800abf2:	5c9b      	ldrb	r3, [r3, r2]
 800abf4:	2201      	movs	r2, #1
 800abf6:	4053      	eors	r3, r2
 800abf8:	b2db      	uxtb	r3, r3
 800abfa:	2b00      	cmp	r3, #0
 800abfc:	d00f      	beq.n	800ac1e <GasIndexAlgorithm__adaptive_lowpass__process+0x3a>
        params->m_Adaptive_Lowpass___X1 = sample;
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	2198      	movs	r1, #152	@ 0x98
 800ac02:	683a      	ldr	r2, [r7, #0]
 800ac04:	505a      	str	r2, [r3, r1]
        params->m_Adaptive_Lowpass___X2 = sample;
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	219c      	movs	r1, #156	@ 0x9c
 800ac0a:	683a      	ldr	r2, [r7, #0]
 800ac0c:	505a      	str	r2, [r3, r1]
        params->m_Adaptive_Lowpass___X3 = sample;
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	21a0      	movs	r1, #160	@ 0xa0
 800ac12:	683a      	ldr	r2, [r7, #0]
 800ac14:	505a      	str	r2, [r3, r1]
        params->m_Adaptive_Lowpass___Initialized = true;
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	2294      	movs	r2, #148	@ 0x94
 800ac1a:	2101      	movs	r1, #1
 800ac1c:	5499      	strb	r1, [r3, r2]
    }
    params->m_Adaptive_Lowpass___X1 =
        (((1.f - params->m_Adaptive_Lowpass__A1) *
 800ac1e:	687b      	ldr	r3, [r7, #4]
 800ac20:	228c      	movs	r2, #140	@ 0x8c
 800ac22:	589b      	ldr	r3, [r3, r2]
 800ac24:	1c19      	adds	r1, r3, #0
 800ac26:	20fe      	movs	r0, #254	@ 0xfe
 800ac28:	0580      	lsls	r0, r0, #22
 800ac2a:	f7f6 faf7 	bl	800121c <__aeabi_fsub>
 800ac2e:	1c03      	adds	r3, r0, #0
 800ac30:	1c18      	adds	r0, r3, #0
          params->m_Adaptive_Lowpass___X1) +
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	2298      	movs	r2, #152	@ 0x98
 800ac36:	589b      	ldr	r3, [r3, r2]
        (((1.f - params->m_Adaptive_Lowpass__A1) *
 800ac38:	1c19      	adds	r1, r3, #0
 800ac3a:	f7f6 f9b1 	bl	8000fa0 <__aeabi_fmul>
 800ac3e:	1c03      	adds	r3, r0, #0
 800ac40:	1c1c      	adds	r4, r3, #0
         (params->m_Adaptive_Lowpass__A1 * sample));
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	228c      	movs	r2, #140	@ 0x8c
 800ac46:	589b      	ldr	r3, [r3, r2]
 800ac48:	6839      	ldr	r1, [r7, #0]
 800ac4a:	1c18      	adds	r0, r3, #0
 800ac4c:	f7f6 f9a8 	bl	8000fa0 <__aeabi_fmul>
 800ac50:	1c03      	adds	r3, r0, #0
          params->m_Adaptive_Lowpass___X1) +
 800ac52:	1c19      	adds	r1, r3, #0
 800ac54:	1c20      	adds	r0, r4, #0
 800ac56:	f7f5 fe33 	bl	80008c0 <__aeabi_fadd>
 800ac5a:	1c03      	adds	r3, r0, #0
 800ac5c:	1c19      	adds	r1, r3, #0
    params->m_Adaptive_Lowpass___X1 =
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	2298      	movs	r2, #152	@ 0x98
 800ac62:	5099      	str	r1, [r3, r2]
    params->m_Adaptive_Lowpass___X2 =
        (((1.f - params->m_Adaptive_Lowpass__A2) *
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	2290      	movs	r2, #144	@ 0x90
 800ac68:	589b      	ldr	r3, [r3, r2]
 800ac6a:	1c19      	adds	r1, r3, #0
 800ac6c:	20fe      	movs	r0, #254	@ 0xfe
 800ac6e:	0580      	lsls	r0, r0, #22
 800ac70:	f7f6 fad4 	bl	800121c <__aeabi_fsub>
 800ac74:	1c03      	adds	r3, r0, #0
 800ac76:	1c18      	adds	r0, r3, #0
          params->m_Adaptive_Lowpass___X2) +
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	229c      	movs	r2, #156	@ 0x9c
 800ac7c:	589b      	ldr	r3, [r3, r2]
        (((1.f - params->m_Adaptive_Lowpass__A2) *
 800ac7e:	1c19      	adds	r1, r3, #0
 800ac80:	f7f6 f98e 	bl	8000fa0 <__aeabi_fmul>
 800ac84:	1c03      	adds	r3, r0, #0
 800ac86:	1c1c      	adds	r4, r3, #0
         (params->m_Adaptive_Lowpass__A2 * sample));
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	2290      	movs	r2, #144	@ 0x90
 800ac8c:	589b      	ldr	r3, [r3, r2]
 800ac8e:	6839      	ldr	r1, [r7, #0]
 800ac90:	1c18      	adds	r0, r3, #0
 800ac92:	f7f6 f985 	bl	8000fa0 <__aeabi_fmul>
 800ac96:	1c03      	adds	r3, r0, #0
          params->m_Adaptive_Lowpass___X2) +
 800ac98:	1c19      	adds	r1, r3, #0
 800ac9a:	1c20      	adds	r0, r4, #0
 800ac9c:	f7f5 fe10 	bl	80008c0 <__aeabi_fadd>
 800aca0:	1c03      	adds	r3, r0, #0
 800aca2:	1c19      	adds	r1, r3, #0
    params->m_Adaptive_Lowpass___X2 =
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	229c      	movs	r2, #156	@ 0x9c
 800aca8:	5099      	str	r1, [r3, r2]
    abs_delta =
        (params->m_Adaptive_Lowpass___X1 - params->m_Adaptive_Lowpass___X2);
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	2298      	movs	r2, #152	@ 0x98
 800acae:	589a      	ldr	r2, [r3, r2]
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	219c      	movs	r1, #156	@ 0x9c
 800acb4:	585b      	ldr	r3, [r3, r1]
    abs_delta =
 800acb6:	1c19      	adds	r1, r3, #0
 800acb8:	1c10      	adds	r0, r2, #0
 800acba:	f7f6 faaf 	bl	800121c <__aeabi_fsub>
 800acbe:	1c03      	adds	r3, r0, #0
 800acc0:	617b      	str	r3, [r7, #20]
    if ((abs_delta < 0.f)) {
 800acc2:	2100      	movs	r1, #0
 800acc4:	6978      	ldr	r0, [r7, #20]
 800acc6:	f7f5 fc33 	bl	8000530 <__aeabi_fcmplt>
 800acca:	1e03      	subs	r3, r0, #0
 800accc:	d004      	beq.n	800acd8 <GasIndexAlgorithm__adaptive_lowpass__process+0xf4>
        abs_delta = (-1.f * abs_delta);
 800acce:	697b      	ldr	r3, [r7, #20]
 800acd0:	2280      	movs	r2, #128	@ 0x80
 800acd2:	0612      	lsls	r2, r2, #24
 800acd4:	4053      	eors	r3, r2
 800acd6:	617b      	str	r3, [r7, #20]
    }
    F1 = expf((GasIndexAlgorithm_LP_ALPHA * abs_delta));
 800acd8:	4923      	ldr	r1, [pc, #140]	@ (800ad68 <GasIndexAlgorithm__adaptive_lowpass__process+0x184>)
 800acda:	6978      	ldr	r0, [r7, #20]
 800acdc:	f7f6 f960 	bl	8000fa0 <__aeabi_fmul>
 800ace0:	1c03      	adds	r3, r0, #0
 800ace2:	1c18      	adds	r0, r3, #0
 800ace4:	f017 fba4 	bl	8022430 <expf>
 800ace8:	1c03      	adds	r3, r0, #0
 800acea:	613b      	str	r3, [r7, #16]
    tau_a = (((GasIndexAlgorithm_LP_TAU_SLOW - GasIndexAlgorithm_LP_TAU_FAST) *
 800acec:	491f      	ldr	r1, [pc, #124]	@ (800ad6c <GasIndexAlgorithm__adaptive_lowpass__process+0x188>)
 800acee:	6938      	ldr	r0, [r7, #16]
 800acf0:	f7f6 f956 	bl	8000fa0 <__aeabi_fmul>
 800acf4:	1c03      	adds	r3, r0, #0
 800acf6:	491e      	ldr	r1, [pc, #120]	@ (800ad70 <GasIndexAlgorithm__adaptive_lowpass__process+0x18c>)
 800acf8:	1c18      	adds	r0, r3, #0
 800acfa:	f7f5 fde1 	bl	80008c0 <__aeabi_fadd>
 800acfe:	1c03      	adds	r3, r0, #0
 800ad00:	60fb      	str	r3, [r7, #12]
              F1) +
             GasIndexAlgorithm_LP_TAU_FAST);
    a3 = (params->mSamplingInterval / (params->mSamplingInterval + tau_a));
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	685c      	ldr	r4, [r3, #4]
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	685b      	ldr	r3, [r3, #4]
 800ad0a:	68f9      	ldr	r1, [r7, #12]
 800ad0c:	1c18      	adds	r0, r3, #0
 800ad0e:	f7f5 fdd7 	bl	80008c0 <__aeabi_fadd>
 800ad12:	1c03      	adds	r3, r0, #0
 800ad14:	1c19      	adds	r1, r3, #0
 800ad16:	1c20      	adds	r0, r4, #0
 800ad18:	f7f5 ff5c 	bl	8000bd4 <__aeabi_fdiv>
 800ad1c:	1c03      	adds	r3, r0, #0
 800ad1e:	60bb      	str	r3, [r7, #8]
    params->m_Adaptive_Lowpass___X3 =
        (((1.f - a3) * params->m_Adaptive_Lowpass___X3) + (a3 * sample));
 800ad20:	68b9      	ldr	r1, [r7, #8]
 800ad22:	20fe      	movs	r0, #254	@ 0xfe
 800ad24:	0580      	lsls	r0, r0, #22
 800ad26:	f7f6 fa79 	bl	800121c <__aeabi_fsub>
 800ad2a:	1c03      	adds	r3, r0, #0
 800ad2c:	1c18      	adds	r0, r3, #0
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	22a0      	movs	r2, #160	@ 0xa0
 800ad32:	589b      	ldr	r3, [r3, r2]
 800ad34:	1c19      	adds	r1, r3, #0
 800ad36:	f7f6 f933 	bl	8000fa0 <__aeabi_fmul>
 800ad3a:	1c03      	adds	r3, r0, #0
 800ad3c:	1c1c      	adds	r4, r3, #0
 800ad3e:	6839      	ldr	r1, [r7, #0]
 800ad40:	68b8      	ldr	r0, [r7, #8]
 800ad42:	f7f6 f92d 	bl	8000fa0 <__aeabi_fmul>
 800ad46:	1c03      	adds	r3, r0, #0
 800ad48:	1c19      	adds	r1, r3, #0
 800ad4a:	1c20      	adds	r0, r4, #0
 800ad4c:	f7f5 fdb8 	bl	80008c0 <__aeabi_fadd>
 800ad50:	1c03      	adds	r3, r0, #0
 800ad52:	1c19      	adds	r1, r3, #0
    params->m_Adaptive_Lowpass___X3 =
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	22a0      	movs	r2, #160	@ 0xa0
 800ad58:	5099      	str	r1, [r3, r2]
    return params->m_Adaptive_Lowpass___X3;
 800ad5a:	687b      	ldr	r3, [r7, #4]
 800ad5c:	22a0      	movs	r2, #160	@ 0xa0
 800ad5e:	589b      	ldr	r3, [r3, r2]
}
 800ad60:	1c18      	adds	r0, r3, #0
 800ad62:	46bd      	mov	sp, r7
 800ad64:	b007      	add	sp, #28
 800ad66:	bd90      	pop	{r4, r7, pc}
 800ad68:	be4ccccd 	.word	0xbe4ccccd
 800ad6c:	43f00000 	.word	0x43f00000
 800ad70:	41a00000 	.word	0x41a00000

0800ad74 <sensirion_i2c_generate_crc>:
#include "sensirion_i2c.h"
#include "sensirion_common.h"
#include "sensirion_config.h"
#include "sen5x.h"

uint8_t sensirion_i2c_generate_crc(const uint8_t* data, uint16_t count) {
 800ad74:	b580      	push	{r7, lr}
 800ad76:	b084      	sub	sp, #16
 800ad78:	af00      	add	r7, sp, #0
 800ad7a:	6078      	str	r0, [r7, #4]
 800ad7c:	000a      	movs	r2, r1
 800ad7e:	1cbb      	adds	r3, r7, #2
 800ad80:	801a      	strh	r2, [r3, #0]
    uint16_t current_byte;
    uint8_t crc = CRC8_INIT;
 800ad82:	230d      	movs	r3, #13
 800ad84:	18fb      	adds	r3, r7, r3
 800ad86:	22ff      	movs	r2, #255	@ 0xff
 800ad88:	701a      	strb	r2, [r3, #0]
    uint8_t crc_bit;

    /* calculates 8-Bit checksum with given polynomial */
    for (current_byte = 0; current_byte < count; ++current_byte) {
 800ad8a:	230e      	movs	r3, #14
 800ad8c:	18fb      	adds	r3, r7, r3
 800ad8e:	2200      	movs	r2, #0
 800ad90:	801a      	strh	r2, [r3, #0]
 800ad92:	e037      	b.n	800ae04 <sensirion_i2c_generate_crc+0x90>
        crc ^= (data[current_byte]);
 800ad94:	230e      	movs	r3, #14
 800ad96:	18fb      	adds	r3, r7, r3
 800ad98:	881b      	ldrh	r3, [r3, #0]
 800ad9a:	687a      	ldr	r2, [r7, #4]
 800ad9c:	18d3      	adds	r3, r2, r3
 800ad9e:	7819      	ldrb	r1, [r3, #0]
 800ada0:	220d      	movs	r2, #13
 800ada2:	18bb      	adds	r3, r7, r2
 800ada4:	18ba      	adds	r2, r7, r2
 800ada6:	7812      	ldrb	r2, [r2, #0]
 800ada8:	404a      	eors	r2, r1
 800adaa:	701a      	strb	r2, [r3, #0]
        for (crc_bit = 8; crc_bit > 0; --crc_bit) {
 800adac:	230c      	movs	r3, #12
 800adae:	18fb      	adds	r3, r7, r3
 800adb0:	2208      	movs	r2, #8
 800adb2:	701a      	strb	r2, [r3, #0]
 800adb4:	e01b      	b.n	800adee <sensirion_i2c_generate_crc+0x7a>
            if (crc & 0x80)
 800adb6:	210d      	movs	r1, #13
 800adb8:	187b      	adds	r3, r7, r1
 800adba:	781b      	ldrb	r3, [r3, #0]
 800adbc:	b25b      	sxtb	r3, r3
 800adbe:	2b00      	cmp	r3, #0
 800adc0:	da09      	bge.n	800add6 <sensirion_i2c_generate_crc+0x62>
                crc = (crc << 1) ^ CRC8_POLYNOMIAL;
 800adc2:	187b      	adds	r3, r7, r1
 800adc4:	781b      	ldrb	r3, [r3, #0]
 800adc6:	005b      	lsls	r3, r3, #1
 800adc8:	b25b      	sxtb	r3, r3
 800adca:	2231      	movs	r2, #49	@ 0x31
 800adcc:	4053      	eors	r3, r2
 800adce:	b25a      	sxtb	r2, r3
 800add0:	187b      	adds	r3, r7, r1
 800add2:	701a      	strb	r2, [r3, #0]
 800add4:	e005      	b.n	800ade2 <sensirion_i2c_generate_crc+0x6e>
            else
                crc = (crc << 1);
 800add6:	230d      	movs	r3, #13
 800add8:	18fa      	adds	r2, r7, r3
 800adda:	18fb      	adds	r3, r7, r3
 800addc:	781b      	ldrb	r3, [r3, #0]
 800adde:	18db      	adds	r3, r3, r3
 800ade0:	7013      	strb	r3, [r2, #0]
        for (crc_bit = 8; crc_bit > 0; --crc_bit) {
 800ade2:	220c      	movs	r2, #12
 800ade4:	18bb      	adds	r3, r7, r2
 800ade6:	18ba      	adds	r2, r7, r2
 800ade8:	7812      	ldrb	r2, [r2, #0]
 800adea:	3a01      	subs	r2, #1
 800adec:	701a      	strb	r2, [r3, #0]
 800adee:	230c      	movs	r3, #12
 800adf0:	18fb      	adds	r3, r7, r3
 800adf2:	781b      	ldrb	r3, [r3, #0]
 800adf4:	2b00      	cmp	r3, #0
 800adf6:	d1de      	bne.n	800adb6 <sensirion_i2c_generate_crc+0x42>
    for (current_byte = 0; current_byte < count; ++current_byte) {
 800adf8:	220e      	movs	r2, #14
 800adfa:	18bb      	adds	r3, r7, r2
 800adfc:	18ba      	adds	r2, r7, r2
 800adfe:	8812      	ldrh	r2, [r2, #0]
 800ae00:	3201      	adds	r2, #1
 800ae02:	801a      	strh	r2, [r3, #0]
 800ae04:	230e      	movs	r3, #14
 800ae06:	18fa      	adds	r2, r7, r3
 800ae08:	1cbb      	adds	r3, r7, #2
 800ae0a:	8812      	ldrh	r2, [r2, #0]
 800ae0c:	881b      	ldrh	r3, [r3, #0]
 800ae0e:	429a      	cmp	r2, r3
 800ae10:	d3c0      	bcc.n	800ad94 <sensirion_i2c_generate_crc+0x20>
        }
    }
    return crc;
 800ae12:	230d      	movs	r3, #13
 800ae14:	18fb      	adds	r3, r7, r3
 800ae16:	781b      	ldrb	r3, [r3, #0]
}
 800ae18:	0018      	movs	r0, r3
 800ae1a:	46bd      	mov	sp, r7
 800ae1c:	b004      	add	sp, #16
 800ae1e:	bd80      	pop	{r7, pc}

0800ae20 <sensirion_i2c_check_crc>:

int8_t sensirion_i2c_check_crc(const uint8_t* data, uint16_t count,
                               uint8_t checksum) {
 800ae20:	b580      	push	{r7, lr}
 800ae22:	b082      	sub	sp, #8
 800ae24:	af00      	add	r7, sp, #0
 800ae26:	6078      	str	r0, [r7, #4]
 800ae28:	0008      	movs	r0, r1
 800ae2a:	0011      	movs	r1, r2
 800ae2c:	1cbb      	adds	r3, r7, #2
 800ae2e:	1c02      	adds	r2, r0, #0
 800ae30:	801a      	strh	r2, [r3, #0]
 800ae32:	1c7b      	adds	r3, r7, #1
 800ae34:	1c0a      	adds	r2, r1, #0
 800ae36:	701a      	strb	r2, [r3, #0]
    if (sensirion_i2c_generate_crc(data, count) != checksum)
 800ae38:	1cbb      	adds	r3, r7, #2
 800ae3a:	881a      	ldrh	r2, [r3, #0]
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	0011      	movs	r1, r2
 800ae40:	0018      	movs	r0, r3
 800ae42:	f7ff ff97 	bl	800ad74 <sensirion_i2c_generate_crc>
 800ae46:	0003      	movs	r3, r0
 800ae48:	001a      	movs	r2, r3
 800ae4a:	1c7b      	adds	r3, r7, #1
 800ae4c:	781b      	ldrb	r3, [r3, #0]
 800ae4e:	4293      	cmp	r3, r2
 800ae50:	d001      	beq.n	800ae56 <sensirion_i2c_check_crc+0x36>
        return CRC_ERROR;
 800ae52:	2301      	movs	r3, #1
 800ae54:	e000      	b.n	800ae58 <sensirion_i2c_check_crc+0x38>
    return NO_ERROR;
 800ae56:	2300      	movs	r3, #0
}
 800ae58:	0018      	movs	r0, r3
 800ae5a:	46bd      	mov	sp, r7
 800ae5c:	b002      	add	sp, #8
 800ae5e:	bd80      	pop	{r7, pc}

0800ae60 <sensirion_i2c_add_command_to_buffer>:
    return sensirion_i2c_delayed_read_cmd(address, cmd, 0, data_words,
                                          num_words);
}

uint16_t sensirion_i2c_add_command_to_buffer(uint8_t* buffer, uint16_t offset,
                                             uint16_t command) {
 800ae60:	b580      	push	{r7, lr}
 800ae62:	b082      	sub	sp, #8
 800ae64:	af00      	add	r7, sp, #0
 800ae66:	6078      	str	r0, [r7, #4]
 800ae68:	0008      	movs	r0, r1
 800ae6a:	0011      	movs	r1, r2
 800ae6c:	1cbb      	adds	r3, r7, #2
 800ae6e:	1c02      	adds	r2, r0, #0
 800ae70:	801a      	strh	r2, [r3, #0]
 800ae72:	003b      	movs	r3, r7
 800ae74:	1c0a      	adds	r2, r1, #0
 800ae76:	801a      	strh	r2, [r3, #0]
    buffer[offset++] = (uint8_t)((command & 0xFF00) >> 8);
 800ae78:	003b      	movs	r3, r7
 800ae7a:	881b      	ldrh	r3, [r3, #0]
 800ae7c:	0a1b      	lsrs	r3, r3, #8
 800ae7e:	b299      	uxth	r1, r3
 800ae80:	1cbb      	adds	r3, r7, #2
 800ae82:	881b      	ldrh	r3, [r3, #0]
 800ae84:	1cba      	adds	r2, r7, #2
 800ae86:	1c58      	adds	r0, r3, #1
 800ae88:	8010      	strh	r0, [r2, #0]
 800ae8a:	001a      	movs	r2, r3
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	189b      	adds	r3, r3, r2
 800ae90:	b2ca      	uxtb	r2, r1
 800ae92:	701a      	strb	r2, [r3, #0]
    buffer[offset++] = (uint8_t)((command & 0x00FF) >> 0);
 800ae94:	1cbb      	adds	r3, r7, #2
 800ae96:	881b      	ldrh	r3, [r3, #0]
 800ae98:	1cba      	adds	r2, r7, #2
 800ae9a:	1c59      	adds	r1, r3, #1
 800ae9c:	8011      	strh	r1, [r2, #0]
 800ae9e:	001a      	movs	r2, r3
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	189b      	adds	r3, r3, r2
 800aea4:	003a      	movs	r2, r7
 800aea6:	8812      	ldrh	r2, [r2, #0]
 800aea8:	b2d2      	uxtb	r2, r2
 800aeaa:	701a      	strb	r2, [r3, #0]
    return offset;
 800aeac:	1cbb      	adds	r3, r7, #2
 800aeae:	881b      	ldrh	r3, [r3, #0]
}
 800aeb0:	0018      	movs	r0, r3
 800aeb2:	46bd      	mov	sp, r7
 800aeb4:	b002      	add	sp, #8
 800aeb6:	bd80      	pop	{r7, pc}

0800aeb8 <sensirion_i2c_add_uint16_t_to_buffer>:
                                             int32_t data) {
    return sensirion_i2c_add_uint32_t_to_buffer(buffer, offset, (uint32_t)data);
}

uint16_t sensirion_i2c_add_uint16_t_to_buffer(uint8_t* buffer, uint16_t offset,
                                              uint16_t data) {
 800aeb8:	b590      	push	{r4, r7, lr}
 800aeba:	b083      	sub	sp, #12
 800aebc:	af00      	add	r7, sp, #0
 800aebe:	6078      	str	r0, [r7, #4]
 800aec0:	0008      	movs	r0, r1
 800aec2:	0011      	movs	r1, r2
 800aec4:	1cbb      	adds	r3, r7, #2
 800aec6:	1c02      	adds	r2, r0, #0
 800aec8:	801a      	strh	r2, [r3, #0]
 800aeca:	003b      	movs	r3, r7
 800aecc:	1c0a      	adds	r2, r1, #0
 800aece:	801a      	strh	r2, [r3, #0]
    buffer[offset++] = (uint8_t)((data & 0xFF00) >> 8);
 800aed0:	003b      	movs	r3, r7
 800aed2:	881b      	ldrh	r3, [r3, #0]
 800aed4:	0a1b      	lsrs	r3, r3, #8
 800aed6:	b299      	uxth	r1, r3
 800aed8:	1cbb      	adds	r3, r7, #2
 800aeda:	881b      	ldrh	r3, [r3, #0]
 800aedc:	1cba      	adds	r2, r7, #2
 800aede:	1c58      	adds	r0, r3, #1
 800aee0:	8010      	strh	r0, [r2, #0]
 800aee2:	001a      	movs	r2, r3
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	189b      	adds	r3, r3, r2
 800aee8:	b2ca      	uxtb	r2, r1
 800aeea:	701a      	strb	r2, [r3, #0]
    buffer[offset++] = (uint8_t)((data & 0x00FF) >> 0);
 800aeec:	1cbb      	adds	r3, r7, #2
 800aeee:	881b      	ldrh	r3, [r3, #0]
 800aef0:	1cba      	adds	r2, r7, #2
 800aef2:	1c59      	adds	r1, r3, #1
 800aef4:	8011      	strh	r1, [r2, #0]
 800aef6:	001a      	movs	r2, r3
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	189b      	adds	r3, r3, r2
 800aefc:	003a      	movs	r2, r7
 800aefe:	8812      	ldrh	r2, [r2, #0]
 800af00:	b2d2      	uxtb	r2, r2
 800af02:	701a      	strb	r2, [r3, #0]
    buffer[offset] = sensirion_i2c_generate_crc(
        &buffer[offset - SENSIRION_WORD_SIZE], SENSIRION_WORD_SIZE);
 800af04:	1cbb      	adds	r3, r7, #2
 800af06:	881b      	ldrh	r3, [r3, #0]
 800af08:	3b02      	subs	r3, #2
 800af0a:	687a      	ldr	r2, [r7, #4]
 800af0c:	18d0      	adds	r0, r2, r3
    buffer[offset] = sensirion_i2c_generate_crc(
 800af0e:	1cbb      	adds	r3, r7, #2
 800af10:	881b      	ldrh	r3, [r3, #0]
 800af12:	687a      	ldr	r2, [r7, #4]
 800af14:	18d4      	adds	r4, r2, r3
 800af16:	2102      	movs	r1, #2
 800af18:	f7ff ff2c 	bl	800ad74 <sensirion_i2c_generate_crc>
 800af1c:	0003      	movs	r3, r0
 800af1e:	7023      	strb	r3, [r4, #0]
    offset++;
 800af20:	1cbb      	adds	r3, r7, #2
 800af22:	881a      	ldrh	r2, [r3, #0]
 800af24:	1cbb      	adds	r3, r7, #2
 800af26:	3201      	adds	r2, #1
 800af28:	801a      	strh	r2, [r3, #0]

    return offset;
 800af2a:	1cbb      	adds	r3, r7, #2
 800af2c:	881b      	ldrh	r3, [r3, #0]
}
 800af2e:	0018      	movs	r0, r3
 800af30:	46bd      	mov	sp, r7
 800af32:	b003      	add	sp, #12
 800af34:	bd90      	pop	{r4, r7, pc}

0800af36 <sensirion_i2c_add_int16_t_to_buffer>:

uint16_t sensirion_i2c_add_int16_t_to_buffer(uint8_t* buffer, uint16_t offset,
                                             int16_t data) {
 800af36:	b580      	push	{r7, lr}
 800af38:	b082      	sub	sp, #8
 800af3a:	af00      	add	r7, sp, #0
 800af3c:	6078      	str	r0, [r7, #4]
 800af3e:	0008      	movs	r0, r1
 800af40:	0011      	movs	r1, r2
 800af42:	1cbb      	adds	r3, r7, #2
 800af44:	1c02      	adds	r2, r0, #0
 800af46:	801a      	strh	r2, [r3, #0]
 800af48:	003b      	movs	r3, r7
 800af4a:	1c0a      	adds	r2, r1, #0
 800af4c:	801a      	strh	r2, [r3, #0]
    return sensirion_i2c_add_uint16_t_to_buffer(buffer, offset, (uint16_t)data);
 800af4e:	003b      	movs	r3, r7
 800af50:	881a      	ldrh	r2, [r3, #0]
 800af52:	1cbb      	adds	r3, r7, #2
 800af54:	8819      	ldrh	r1, [r3, #0]
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	0018      	movs	r0, r3
 800af5a:	f7ff ffad 	bl	800aeb8 <sensirion_i2c_add_uint16_t_to_buffer>
 800af5e:	0003      	movs	r3, r0
}
 800af60:	0018      	movs	r0, r3
 800af62:	46bd      	mov	sp, r7
 800af64:	b002      	add	sp, #8
 800af66:	bd80      	pop	{r7, pc}

0800af68 <sensirion_i2c_write_data>:

    return offset;
}

int16_t sensirion_i2c_write_data(uint8_t address, const uint8_t* data,
                                 uint16_t data_length) {
 800af68:	b580      	push	{r7, lr}
 800af6a:	b082      	sub	sp, #8
 800af6c:	af00      	add	r7, sp, #0
 800af6e:	6039      	str	r1, [r7, #0]
 800af70:	0011      	movs	r1, r2
 800af72:	1dfb      	adds	r3, r7, #7
 800af74:	1c02      	adds	r2, r0, #0
 800af76:	701a      	strb	r2, [r3, #0]
 800af78:	1d3b      	adds	r3, r7, #4
 800af7a:	1c0a      	adds	r2, r1, #0
 800af7c:	801a      	strh	r2, [r3, #0]
    return sensirion_i2c_hal_write(address, data, data_length);
 800af7e:	1d3b      	adds	r3, r7, #4
 800af80:	881a      	ldrh	r2, [r3, #0]
 800af82:	6839      	ldr	r1, [r7, #0]
 800af84:	1dfb      	adds	r3, r7, #7
 800af86:	781b      	ldrb	r3, [r3, #0]
 800af88:	0018      	movs	r0, r3
 800af8a:	f7fe fa47 	bl	800941c <sensirion_i2c_hal_write>
 800af8e:	0003      	movs	r3, r0
}
 800af90:	0018      	movs	r0, r3
 800af92:	46bd      	mov	sp, r7
 800af94:	b002      	add	sp, #8
 800af96:	bd80      	pop	{r7, pc}

0800af98 <sensirion_i2c_read_data_inplace>:

int16_t sensirion_i2c_read_data_inplace(uint8_t address, uint8_t* buffer,
                                        uint16_t expected_data_length) {
 800af98:	b5b0      	push	{r4, r5, r7, lr}
 800af9a:	b084      	sub	sp, #16
 800af9c:	af00      	add	r7, sp, #0
 800af9e:	6039      	str	r1, [r7, #0]
 800afa0:	0011      	movs	r1, r2
 800afa2:	1dfb      	adds	r3, r7, #7
 800afa4:	1c02      	adds	r2, r0, #0
 800afa6:	701a      	strb	r2, [r3, #0]
 800afa8:	1d3b      	adds	r3, r7, #4
 800afaa:	1c0a      	adds	r2, r1, #0
 800afac:	801a      	strh	r2, [r3, #0]
    int16_t error;
    uint16_t i, j;
    uint16_t size = (expected_data_length / SENSIRION_WORD_SIZE) *
 800afae:	1d3b      	adds	r3, r7, #4
 800afb0:	881b      	ldrh	r3, [r3, #0]
 800afb2:	085b      	lsrs	r3, r3, #1
 800afb4:	b29b      	uxth	r3, r3
 800afb6:	220a      	movs	r2, #10
 800afb8:	18ba      	adds	r2, r7, r2
 800afba:	1c19      	adds	r1, r3, #0
 800afbc:	1c0b      	adds	r3, r1, #0
 800afbe:	18db      	adds	r3, r3, r3
 800afc0:	185b      	adds	r3, r3, r1
 800afc2:	8013      	strh	r3, [r2, #0]
                    (SENSIRION_WORD_SIZE + CRC8_LEN);

    if (expected_data_length % SENSIRION_WORD_SIZE != 0) {
 800afc4:	1d3b      	adds	r3, r7, #4
 800afc6:	881b      	ldrh	r3, [r3, #0]
 800afc8:	2201      	movs	r2, #1
 800afca:	4013      	ands	r3, r2
 800afcc:	b29b      	uxth	r3, r3
 800afce:	2b00      	cmp	r3, #0
 800afd0:	d001      	beq.n	800afd6 <sensirion_i2c_read_data_inplace+0x3e>
        return BYTE_NUM_ERROR;
 800afd2:	2304      	movs	r3, #4
 800afd4:	e06b      	b.n	800b0ae <sensirion_i2c_read_data_inplace+0x116>
    }

    error = sensirion_i2c_hal_read(address, buffer, size);
 800afd6:	230a      	movs	r3, #10
 800afd8:	18fb      	adds	r3, r7, r3
 800afda:	881a      	ldrh	r2, [r3, #0]
 800afdc:	6839      	ldr	r1, [r7, #0]
 800afde:	1dfb      	adds	r3, r7, #7
 800afe0:	781b      	ldrb	r3, [r3, #0]
 800afe2:	0018      	movs	r0, r3
 800afe4:	f7fe f9fa 	bl	80093dc <sensirion_i2c_hal_read>
 800afe8:	0003      	movs	r3, r0
 800afea:	001a      	movs	r2, r3
 800afec:	2108      	movs	r1, #8
 800afee:	187b      	adds	r3, r7, r1
 800aff0:	801a      	strh	r2, [r3, #0]
    if (error) {
 800aff2:	000a      	movs	r2, r1
 800aff4:	18bb      	adds	r3, r7, r2
 800aff6:	2100      	movs	r1, #0
 800aff8:	5e5b      	ldrsh	r3, [r3, r1]
 800affa:	2b00      	cmp	r3, #0
 800affc:	d003      	beq.n	800b006 <sensirion_i2c_read_data_inplace+0x6e>
        return error;
 800affe:	18bb      	adds	r3, r7, r2
 800b000:	2200      	movs	r2, #0
 800b002:	5e9b      	ldrsh	r3, [r3, r2]
 800b004:	e053      	b.n	800b0ae <sensirion_i2c_read_data_inplace+0x116>
    }

    for (i = 0, j = 0; i < size; i += SENSIRION_WORD_SIZE + CRC8_LEN) {
 800b006:	230e      	movs	r3, #14
 800b008:	18fb      	adds	r3, r7, r3
 800b00a:	2200      	movs	r2, #0
 800b00c:	801a      	strh	r2, [r3, #0]
 800b00e:	230c      	movs	r3, #12
 800b010:	18fb      	adds	r3, r7, r3
 800b012:	2200      	movs	r2, #0
 800b014:	801a      	strh	r2, [r3, #0]
 800b016:	e041      	b.n	800b09c <sensirion_i2c_read_data_inplace+0x104>

        error = sensirion_i2c_check_crc(&buffer[i], SENSIRION_WORD_SIZE,
 800b018:	210e      	movs	r1, #14
 800b01a:	187b      	adds	r3, r7, r1
 800b01c:	881b      	ldrh	r3, [r3, #0]
 800b01e:	683a      	ldr	r2, [r7, #0]
 800b020:	18d0      	adds	r0, r2, r3
                                        buffer[i + SENSIRION_WORD_SIZE]);
 800b022:	187b      	adds	r3, r7, r1
 800b024:	881b      	ldrh	r3, [r3, #0]
 800b026:	3302      	adds	r3, #2
 800b028:	683a      	ldr	r2, [r7, #0]
 800b02a:	18d3      	adds	r3, r2, r3
        error = sensirion_i2c_check_crc(&buffer[i], SENSIRION_WORD_SIZE,
 800b02c:	781b      	ldrb	r3, [r3, #0]
 800b02e:	001a      	movs	r2, r3
 800b030:	2102      	movs	r1, #2
 800b032:	f7ff fef5 	bl	800ae20 <sensirion_i2c_check_crc>
 800b036:	0003      	movs	r3, r0
 800b038:	001a      	movs	r2, r3
 800b03a:	2108      	movs	r1, #8
 800b03c:	187b      	adds	r3, r7, r1
 800b03e:	801a      	strh	r2, [r3, #0]
        if (error) {
 800b040:	000a      	movs	r2, r1
 800b042:	18bb      	adds	r3, r7, r2
 800b044:	2100      	movs	r1, #0
 800b046:	5e5b      	ldrsh	r3, [r3, r1]
 800b048:	2b00      	cmp	r3, #0
 800b04a:	d003      	beq.n	800b054 <sensirion_i2c_read_data_inplace+0xbc>
            return error;
 800b04c:	18bb      	adds	r3, r7, r2
 800b04e:	2200      	movs	r2, #0
 800b050:	5e9b      	ldrsh	r3, [r3, r2]
 800b052:	e02c      	b.n	800b0ae <sensirion_i2c_read_data_inplace+0x116>
        }
        buffer[j++] = buffer[i];
 800b054:	240e      	movs	r4, #14
 800b056:	193b      	adds	r3, r7, r4
 800b058:	881b      	ldrh	r3, [r3, #0]
 800b05a:	683a      	ldr	r2, [r7, #0]
 800b05c:	18d2      	adds	r2, r2, r3
 800b05e:	250c      	movs	r5, #12
 800b060:	197b      	adds	r3, r7, r5
 800b062:	881b      	ldrh	r3, [r3, #0]
 800b064:	1979      	adds	r1, r7, r5
 800b066:	1c58      	adds	r0, r3, #1
 800b068:	8008      	strh	r0, [r1, #0]
 800b06a:	0019      	movs	r1, r3
 800b06c:	683b      	ldr	r3, [r7, #0]
 800b06e:	185b      	adds	r3, r3, r1
 800b070:	7812      	ldrb	r2, [r2, #0]
 800b072:	701a      	strb	r2, [r3, #0]
        buffer[j++] = buffer[i + 1];
 800b074:	193b      	adds	r3, r7, r4
 800b076:	881b      	ldrh	r3, [r3, #0]
 800b078:	3301      	adds	r3, #1
 800b07a:	683a      	ldr	r2, [r7, #0]
 800b07c:	18d2      	adds	r2, r2, r3
 800b07e:	197b      	adds	r3, r7, r5
 800b080:	881b      	ldrh	r3, [r3, #0]
 800b082:	1979      	adds	r1, r7, r5
 800b084:	1c58      	adds	r0, r3, #1
 800b086:	8008      	strh	r0, [r1, #0]
 800b088:	0019      	movs	r1, r3
 800b08a:	683b      	ldr	r3, [r7, #0]
 800b08c:	185b      	adds	r3, r3, r1
 800b08e:	7812      	ldrb	r2, [r2, #0]
 800b090:	701a      	strb	r2, [r3, #0]
    for (i = 0, j = 0; i < size; i += SENSIRION_WORD_SIZE + CRC8_LEN) {
 800b092:	193b      	adds	r3, r7, r4
 800b094:	193a      	adds	r2, r7, r4
 800b096:	8812      	ldrh	r2, [r2, #0]
 800b098:	3203      	adds	r2, #3
 800b09a:	801a      	strh	r2, [r3, #0]
 800b09c:	230e      	movs	r3, #14
 800b09e:	18fa      	adds	r2, r7, r3
 800b0a0:	230a      	movs	r3, #10
 800b0a2:	18fb      	adds	r3, r7, r3
 800b0a4:	8812      	ldrh	r2, [r2, #0]
 800b0a6:	881b      	ldrh	r3, [r3, #0]
 800b0a8:	429a      	cmp	r2, r3
 800b0aa:	d3b5      	bcc.n	800b018 <sensirion_i2c_read_data_inplace+0x80>
    }

    return NO_ERROR;
 800b0ac:	2300      	movs	r3, #0
}
 800b0ae:	0018      	movs	r0, r3
 800b0b0:	46bd      	mov	sp, r7
 800b0b2:	b004      	add	sp, #16
 800b0b4:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800b0b8 <ReadRegister>:
static uint16_t Blue;
static uint16_t Green;
static uint16_t TimeValue = 4000;


static void ReadRegister(uint8_t address, uint8_t *buffer, uint8_t nrBytes) {
 800b0b8:	b590      	push	{r4, r7, lr}
 800b0ba:	b083      	sub	sp, #12
 800b0bc:	af00      	add	r7, sp, #0
 800b0be:	6039      	str	r1, [r7, #0]
 800b0c0:	0011      	movs	r1, r2
 800b0c2:	1dfb      	adds	r3, r7, #7
 800b0c4:	1c02      	adds	r2, r0, #0
 800b0c6:	701a      	strb	r2, [r3, #0]
 800b0c8:	1dbb      	adds	r3, r7, #6
 800b0ca:	1c0a      	adds	r2, r1, #0
 800b0cc:	701a      	strb	r2, [r3, #0]
  if (ReadFunction != NULL) {
 800b0ce:	4b08      	ldr	r3, [pc, #32]	@ (800b0f0 <ReadRegister+0x38>)
 800b0d0:	681b      	ldr	r3, [r3, #0]
 800b0d2:	2b00      	cmp	r3, #0
 800b0d4:	d008      	beq.n	800b0e8 <ReadRegister+0x30>
    ReadFunction(address, buffer, nrBytes);
 800b0d6:	4b06      	ldr	r3, [pc, #24]	@ (800b0f0 <ReadRegister+0x38>)
 800b0d8:	681b      	ldr	r3, [r3, #0]
 800b0da:	1dba      	adds	r2, r7, #6
 800b0dc:	7814      	ldrb	r4, [r2, #0]
 800b0de:	6839      	ldr	r1, [r7, #0]
 800b0e0:	1dfa      	adds	r2, r7, #7
 800b0e2:	7810      	ldrb	r0, [r2, #0]
 800b0e4:	0022      	movs	r2, r4
 800b0e6:	4798      	blx	r3
  }
}
 800b0e8:	46c0      	nop			@ (mov r8, r8)
 800b0ea:	46bd      	mov	sp, r7
 800b0ec:	b003      	add	sp, #12
 800b0ee:	bd90      	pop	{r4, r7, pc}
 800b0f0:	20001278 	.word	0x20001278

0800b0f4 <WriteRegister>:

static void WriteRegister(uint8_t address, uint8_t *buffer, uint8_t nrBytes) {
 800b0f4:	b590      	push	{r4, r7, lr}
 800b0f6:	b083      	sub	sp, #12
 800b0f8:	af00      	add	r7, sp, #0
 800b0fa:	6039      	str	r1, [r7, #0]
 800b0fc:	0011      	movs	r1, r2
 800b0fe:	1dfb      	adds	r3, r7, #7
 800b100:	1c02      	adds	r2, r0, #0
 800b102:	701a      	strb	r2, [r3, #0]
 800b104:	1dbb      	adds	r3, r7, #6
 800b106:	1c0a      	adds	r2, r1, #0
 800b108:	701a      	strb	r2, [r3, #0]
  if (WriteFunction != NULL) {
 800b10a:	4b08      	ldr	r3, [pc, #32]	@ (800b12c <WriteRegister+0x38>)
 800b10c:	681b      	ldr	r3, [r3, #0]
 800b10e:	2b00      	cmp	r3, #0
 800b110:	d008      	beq.n	800b124 <WriteRegister+0x30>
    WriteFunction(address, buffer, nrBytes);
 800b112:	4b06      	ldr	r3, [pc, #24]	@ (800b12c <WriteRegister+0x38>)
 800b114:	681b      	ldr	r3, [r3, #0]
 800b116:	1dba      	adds	r2, r7, #6
 800b118:	7814      	ldrb	r4, [r2, #0]
 800b11a:	6839      	ldr	r1, [r7, #0]
 800b11c:	1dfa      	adds	r2, r7, #7
 800b11e:	7810      	ldrb	r0, [r2, #0]
 800b120:	0022      	movs	r2, r4
 800b122:	4798      	blx	r3
  }
}
 800b124:	46c0      	nop			@ (mov r8, r8)
 800b126:	46bd      	mov	sp, r7
 800b128:	b003      	add	sp, #12
 800b12a:	bd90      	pop	{r4, r7, pc}
 800b12c:	2000127c 	.word	0x2000127c

0800b130 <setSGP40TimeStamp>:

void setSGP40TimeStamp(uint32_t ticks) {
 800b130:	b580      	push	{r7, lr}
 800b132:	b082      	sub	sp, #8
 800b134:	af00      	add	r7, sp, #0
 800b136:	6078      	str	r0, [r7, #4]
  SGP40TimeStamp = HAL_GetTick() + ticks;
 800b138:	f003 f996 	bl	800e468 <HAL_GetTick>
 800b13c:	0002      	movs	r2, r0
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	18d2      	adds	r2, r2, r3
 800b142:	4b03      	ldr	r3, [pc, #12]	@ (800b150 <setSGP40TimeStamp+0x20>)
 800b144:	601a      	str	r2, [r3, #0]
}
 800b146:	46c0      	nop			@ (mov r8, r8)
 800b148:	46bd      	mov	sp, r7
 800b14a:	b002      	add	sp, #8
 800b14c:	bd80      	pop	{r7, pc}
 800b14e:	46c0      	nop			@ (mov r8, r8)
 800b150:	2000128c 	.word	0x2000128c

0800b154 <ResetSGP40samplecounter>:

void ResetSGP40samplecounter() {
 800b154:	b580      	push	{r7, lr}
 800b156:	af00      	add	r7, sp, #0
  sgp40samplecounter = 0;
 800b158:	4b02      	ldr	r3, [pc, #8]	@ (800b164 <ResetSGP40samplecounter+0x10>)
 800b15a:	2200      	movs	r2, #0
 800b15c:	701a      	strb	r2, [r3, #0]
}
 800b15e:	46c0      	nop			@ (mov r8, r8)
 800b160:	46bd      	mov	sp, r7
 800b162:	bd80      	pop	{r7, pc}
 800b164:	2000128a 	.word	0x2000128a

0800b168 <SGP_Init>:

void SGP_Init(I2CReadCb readFunction, I2CWriteCB writeFunction) {
 800b168:	b580      	push	{r7, lr}
 800b16a:	b082      	sub	sp, #8
 800b16c:	af00      	add	r7, sp, #0
 800b16e:	6078      	str	r0, [r7, #4]
 800b170:	6039      	str	r1, [r7, #0]
  ReadFunction = readFunction;
 800b172:	4b07      	ldr	r3, [pc, #28]	@ (800b190 <SGP_Init+0x28>)
 800b174:	687a      	ldr	r2, [r7, #4]
 800b176:	601a      	str	r2, [r3, #0]
  WriteFunction = writeFunction;
 800b178:	4b06      	ldr	r3, [pc, #24]	@ (800b194 <SGP_Init+0x2c>)
 800b17a:	683a      	ldr	r2, [r7, #0]
 800b17c:	601a      	str	r2, [r3, #0]
  GasIndexAlgorithm_init(&params, GasIndexAlgorithm_ALGORITHM_TYPE_VOC);
 800b17e:	4b06      	ldr	r3, [pc, #24]	@ (800b198 <SGP_Init+0x30>)
 800b180:	2100      	movs	r1, #0
 800b182:	0018      	movs	r0, r3
 800b184:	f7fe ff70 	bl	800a068 <GasIndexAlgorithm_init>
}
 800b188:	46c0      	nop			@ (mov r8, r8)
 800b18a:	46bd      	mov	sp, r7
 800b18c:	b002      	add	sp, #8
 800b18e:	bd80      	pop	{r7, pc}
 800b190:	20001278 	.word	0x20001278
 800b194:	2000127c 	.word	0x2000127c
 800b198:	20001294 	.word	0x20001294

0800b19c <SGP_StartMeasurement>:

void SGP_StartMeasurement(void) {
 800b19c:	b580      	push	{r7, lr}
 800b19e:	af00      	add	r7, sp, #0
  if(HT_MeasurementReceived){
 800b1a0:	4b13      	ldr	r3, [pc, #76]	@ (800b1f0 <SGP_StartMeasurement+0x54>)
 800b1a2:	781b      	ldrb	r3, [r3, #0]
 800b1a4:	2b00      	cmp	r3, #0
 800b1a6:	d00d      	beq.n	800b1c4 <SGP_StartMeasurement+0x28>
    WriteRegister(SGP_I2C_ADDRESS, MeasureRawWithCompBuffer, SGP_LONG_COMMAND_BUFFER_LENGTH);
 800b1a8:	4b12      	ldr	r3, [pc, #72]	@ (800b1f4 <SGP_StartMeasurement+0x58>)
 800b1aa:	2208      	movs	r2, #8
 800b1ac:	0019      	movs	r1, r3
 800b1ae:	2059      	movs	r0, #89	@ 0x59
 800b1b0:	f7ff ffa0 	bl	800b0f4 <WriteRegister>
    SGP_IdleTime = HAL_GetTick() + SGP_SENSOR_IDLE_TIME;
 800b1b4:	f003 f958 	bl	800e468 <HAL_GetTick>
 800b1b8:	0003      	movs	r3, r0
 800b1ba:	331e      	adds	r3, #30
 800b1bc:	001a      	movs	r2, r3
 800b1be:	4b0e      	ldr	r3, [pc, #56]	@ (800b1f8 <SGP_StartMeasurement+0x5c>)
 800b1c0:	601a      	str	r2, [r3, #0]
 800b1c2:	e00c      	b.n	800b1de <SGP_StartMeasurement+0x42>
  }
  else{
    WriteRegister(SGP_I2C_ADDRESS, MeasureRawSignalBuffer, SGP_LONG_COMMAND_BUFFER_LENGTH);
 800b1c4:	4b0d      	ldr	r3, [pc, #52]	@ (800b1fc <SGP_StartMeasurement+0x60>)
 800b1c6:	2208      	movs	r2, #8
 800b1c8:	0019      	movs	r1, r3
 800b1ca:	2059      	movs	r0, #89	@ 0x59
 800b1cc:	f7ff ff92 	bl	800b0f4 <WriteRegister>
    SGP_HeatUpTime = HAL_GetTick() + SGP_SENSOR_HEATUP_TIME;
 800b1d0:	f003 f94a 	bl	800e468 <HAL_GetTick>
 800b1d4:	0003      	movs	r3, r0
 800b1d6:	33aa      	adds	r3, #170	@ 0xaa
 800b1d8:	001a      	movs	r2, r3
 800b1da:	4b09      	ldr	r3, [pc, #36]	@ (800b200 <SGP_StartMeasurement+0x64>)
 800b1dc:	601a      	str	r2, [r3, #0]
  }
  HeatUpIsDone = false;
 800b1de:	4b09      	ldr	r3, [pc, #36]	@ (800b204 <SGP_StartMeasurement+0x68>)
 800b1e0:	2200      	movs	r2, #0
 800b1e2:	701a      	strb	r2, [r3, #0]
  MeasurementIsReady = false;
 800b1e4:	4b08      	ldr	r3, [pc, #32]	@ (800b208 <SGP_StartMeasurement+0x6c>)
 800b1e6:	2200      	movs	r2, #0
 800b1e8:	701a      	strb	r2, [r3, #0]
}
 800b1ea:	46c0      	nop			@ (mov r8, r8)
 800b1ec:	46bd      	mov	sp, r7
 800b1ee:	bd80      	pop	{r7, pc}
 800b1f0:	2000133c 	.word	0x2000133c
 800b1f4:	20000098 	.word	0x20000098
 800b1f8:	200000ac 	.word	0x200000ac
 800b1fc:	20000090 	.word	0x20000090
 800b200:	200000a4 	.word	0x200000a4
 800b204:	20001290 	.word	0x20001290
 800b208:	20001291 	.word	0x20001291

0800b20c <SGP_HeatedUp>:

static bool SGP_HeatedUp(void) {
 800b20c:	b580      	push	{r7, lr}
 800b20e:	af00      	add	r7, sp, #0
  return TimestampIsReached(SGP_HeatUpTime);
 800b210:	4b04      	ldr	r3, [pc, #16]	@ (800b224 <SGP_HeatedUp+0x18>)
 800b212:	681b      	ldr	r3, [r3, #0]
 800b214:	0018      	movs	r0, r3
 800b216:	f002 fc7b 	bl	800db10 <TimestampIsReached>
 800b21a:	0003      	movs	r3, r0
}
 800b21c:	0018      	movs	r0, r3
 800b21e:	46bd      	mov	sp, r7
 800b220:	bd80      	pop	{r7, pc}
 800b222:	46c0      	nop			@ (mov r8, r8)
 800b224:	200000a4 	.word	0x200000a4

0800b228 <SGP_MeasurementReady>:

static bool SGP_MeasurementReady(void) {
 800b228:	b580      	push	{r7, lr}
 800b22a:	af00      	add	r7, sp, #0
  return TimestampIsReached(SGP_IdleTime);
 800b22c:	4b04      	ldr	r3, [pc, #16]	@ (800b240 <SGP_MeasurementReady+0x18>)
 800b22e:	681b      	ldr	r3, [r3, #0]
 800b230:	0018      	movs	r0, r3
 800b232:	f002 fc6d 	bl	800db10 <TimestampIsReached>
 800b236:	0003      	movs	r3, r0
}
 800b238:	0018      	movs	r0, r3
 800b23a:	46bd      	mov	sp, r7
 800b23c:	bd80      	pop	{r7, pc}
 800b23e:	46c0      	nop			@ (mov r8, r8)
 800b240:	200000ac 	.word	0x200000ac

0800b244 <SGP_MeasurementDone>:

static bool SGP_MeasurementDone(void) {
 800b244:	b580      	push	{r7, lr}
 800b246:	af00      	add	r7, sp, #0
  return TimestampIsReached(SGP_MeasurementDutyCycle);
 800b248:	4b04      	ldr	r3, [pc, #16]	@ (800b25c <SGP_MeasurementDone+0x18>)
 800b24a:	681b      	ldr	r3, [r3, #0]
 800b24c:	0018      	movs	r0, r3
 800b24e:	f002 fc5f 	bl	800db10 <TimestampIsReached>
 800b252:	0003      	movs	r3, r0
}
 800b254:	0018      	movs	r0, r3
 800b256:	46bd      	mov	sp, r7
 800b258:	bd80      	pop	{r7, pc}
 800b25a:	46c0      	nop			@ (mov r8, r8)
 800b25c:	200000a8 	.word	0x200000a8

0800b260 <SGP_TurnHeaterOff>:

void SGP_TurnHeaterOff(void) {
 800b260:	b580      	push	{r7, lr}
 800b262:	af00      	add	r7, sp, #0
  // This command could take from 0.1 to 1ms.
  WriteRegister(SGP_I2C_ADDRESS, TurnHeaterOffBuffer, SGP_SHORT_COMMAND_BUFFER_LENGTH);
 800b264:	4b04      	ldr	r3, [pc, #16]	@ (800b278 <SGP_TurnHeaterOff+0x18>)
 800b266:	2202      	movs	r2, #2
 800b268:	0019      	movs	r1, r3
 800b26a:	2059      	movs	r0, #89	@ 0x59
 800b26c:	f7ff ff42 	bl	800b0f4 <WriteRegister>
}
 800b270:	46c0      	nop			@ (mov r8, r8)
 800b272:	46bd      	mov	sp, r7
 800b274:	bd80      	pop	{r7, pc}
 800b276:	46c0      	nop			@ (mov r8, r8)
 800b278:	20000088 	.word	0x20000088

0800b27c <SGP_GetMeasurementValues>:

bool SGP_GetMeasurementValues(int32_t *vocIndex) {
 800b27c:	b5b0      	push	{r4, r5, r7, lr}
 800b27e:	b086      	sub	sp, #24
 800b280:	af02      	add	r7, sp, #8
 800b282:	6078      	str	r0, [r7, #4]
  if (SGP_HeatedUp() && !HeatUpIsDone && !SGP_MsgSent) {
 800b284:	f7ff ffc2 	bl	800b20c <SGP_HeatedUp>
 800b288:	1e03      	subs	r3, r0, #0
 800b28a:	d032      	beq.n	800b2f2 <SGP_GetMeasurementValues+0x76>
 800b28c:	4bd4      	ldr	r3, [pc, #848]	@ (800b5e0 <SGP_GetMeasurementValues+0x364>)
 800b28e:	781b      	ldrb	r3, [r3, #0]
 800b290:	2201      	movs	r2, #1
 800b292:	4053      	eors	r3, r2
 800b294:	b2db      	uxtb	r3, r3
 800b296:	2b00      	cmp	r3, #0
 800b298:	d02b      	beq.n	800b2f2 <SGP_GetMeasurementValues+0x76>
 800b29a:	4bd2      	ldr	r3, [pc, #840]	@ (800b5e4 <SGP_GetMeasurementValues+0x368>)
 800b29c:	781b      	ldrb	r3, [r3, #0]
 800b29e:	2201      	movs	r2, #1
 800b2a0:	4053      	eors	r3, r2
 800b2a2:	b2db      	uxtb	r3, r3
 800b2a4:	2b00      	cmp	r3, #0
 800b2a6:	d024      	beq.n	800b2f2 <SGP_GetMeasurementValues+0x76>
//    Debug("SGP is heated up");
    HeatUpIsDone = true;
 800b2a8:	4bcd      	ldr	r3, [pc, #820]	@ (800b5e0 <SGP_GetMeasurementValues+0x364>)
 800b2aa:	2201      	movs	r2, #1
 800b2ac:	701a      	strb	r2, [r3, #0]
    // SGP is heated up, we ignore the output and start another measurement.
    if(HT_MeasurementReceived){
 800b2ae:	4bce      	ldr	r3, [pc, #824]	@ (800b5e8 <SGP_GetMeasurementValues+0x36c>)
 800b2b0:	781b      	ldrb	r3, [r3, #0]
 800b2b2:	2b00      	cmp	r3, #0
 800b2b4:	d00d      	beq.n	800b2d2 <SGP_GetMeasurementValues+0x56>
      WriteRegister(SGP_I2C_ADDRESS, MeasureRawWithCompBuffer, SGP_LONG_COMMAND_BUFFER_LENGTH);
 800b2b6:	4bcd      	ldr	r3, [pc, #820]	@ (800b5ec <SGP_GetMeasurementValues+0x370>)
 800b2b8:	2208      	movs	r2, #8
 800b2ba:	0019      	movs	r1, r3
 800b2bc:	2059      	movs	r0, #89	@ 0x59
 800b2be:	f7ff ff19 	bl	800b0f4 <WriteRegister>
      SGP_IdleTime = HAL_GetTick() + SGP_SENSOR_IDLE_TIME;
 800b2c2:	f003 f8d1 	bl	800e468 <HAL_GetTick>
 800b2c6:	0003      	movs	r3, r0
 800b2c8:	331e      	adds	r3, #30
 800b2ca:	001a      	movs	r2, r3
 800b2cc:	4bc8      	ldr	r3, [pc, #800]	@ (800b5f0 <SGP_GetMeasurementValues+0x374>)
 800b2ce:	601a      	str	r2, [r3, #0]
 800b2d0:	e00c      	b.n	800b2ec <SGP_GetMeasurementValues+0x70>
    }
    else{
      WriteRegister(SGP_I2C_ADDRESS, MeasureRawSignalBuffer, SGP_LONG_COMMAND_BUFFER_LENGTH);
 800b2d2:	4bc8      	ldr	r3, [pc, #800]	@ (800b5f4 <SGP_GetMeasurementValues+0x378>)
 800b2d4:	2208      	movs	r2, #8
 800b2d6:	0019      	movs	r1, r3
 800b2d8:	2059      	movs	r0, #89	@ 0x59
 800b2da:	f7ff ff0b 	bl	800b0f4 <WriteRegister>
      SGP_IdleTime = HAL_GetTick() + SGP_SENSOR_IDLE_TIME;
 800b2de:	f003 f8c3 	bl	800e468 <HAL_GetTick>
 800b2e2:	0003      	movs	r3, r0
 800b2e4:	331e      	adds	r3, #30
 800b2e6:	001a      	movs	r2, r3
 800b2e8:	4bc1      	ldr	r3, [pc, #772]	@ (800b5f0 <SGP_GetMeasurementValues+0x374>)
 800b2ea:	601a      	str	r2, [r3, #0]
    }
    SGP_MsgSent = true;
 800b2ec:	4bbd      	ldr	r3, [pc, #756]	@ (800b5e4 <SGP_GetMeasurementValues+0x368>)
 800b2ee:	2201      	movs	r2, #1
 800b2f0:	701a      	strb	r2, [r3, #0]
  }
  if (HeatUpIsDone && SGP_MeasurementReady() && !MeasurementIsReady) {
 800b2f2:	4bbb      	ldr	r3, [pc, #748]	@ (800b5e0 <SGP_GetMeasurementValues+0x364>)
 800b2f4:	781b      	ldrb	r3, [r3, #0]
 800b2f6:	2b00      	cmp	r3, #0
 800b2f8:	d100      	bne.n	800b2fc <SGP_GetMeasurementValues+0x80>
 800b2fa:	e1a9      	b.n	800b650 <SGP_GetMeasurementValues+0x3d4>
 800b2fc:	f7ff ff94 	bl	800b228 <SGP_MeasurementReady>
 800b300:	1e03      	subs	r3, r0, #0
 800b302:	d100      	bne.n	800b306 <SGP_GetMeasurementValues+0x8a>
 800b304:	e1a4      	b.n	800b650 <SGP_GetMeasurementValues+0x3d4>
 800b306:	4bbc      	ldr	r3, [pc, #752]	@ (800b5f8 <SGP_GetMeasurementValues+0x37c>)
 800b308:	781b      	ldrb	r3, [r3, #0]
 800b30a:	2201      	movs	r2, #1
 800b30c:	4053      	eors	r3, r2
 800b30e:	b2db      	uxtb	r3, r3
 800b310:	2b00      	cmp	r3, #0
 800b312:	d100      	bne.n	800b316 <SGP_GetMeasurementValues+0x9a>
 800b314:	e19c      	b.n	800b650 <SGP_GetMeasurementValues+0x3d4>
//    Debug("SGP40 sample[%i] is ready", SGP_AmountOfSamplesDone + 1);
    MeasurementIsReady = true;
 800b316:	4bb8      	ldr	r3, [pc, #736]	@ (800b5f8 <SGP_GetMeasurementValues+0x37c>)
 800b318:	2201      	movs	r2, #1
 800b31a:	701a      	strb	r2, [r3, #0]
    // Measurement is ready to be read, also turning the heater off.
    ReadRegister(SGP_I2C_ADDRESS, SGP_ReadBuffer, SGP_MEASURE_BUFFER_RESPONSE_LENGTH);
 800b31c:	4bb7      	ldr	r3, [pc, #732]	@ (800b5fc <SGP_GetMeasurementValues+0x380>)
 800b31e:	2203      	movs	r2, #3
 800b320:	0019      	movs	r1, r3
 800b322:	2059      	movs	r0, #89	@ 0x59
 800b324:	f7ff fec8 	bl	800b0b8 <ReadRegister>
    if (!CheckCRC(SGP_ReadBuffer, SGP_MEASURE_BUFFER_RESPONSE_LENGTH, SGP_MEASURE_BUFFER_RESPONSE_LENGTH)) {
 800b328:	4bb4      	ldr	r3, [pc, #720]	@ (800b5fc <SGP_GetMeasurementValues+0x380>)
 800b32a:	2203      	movs	r2, #3
 800b32c:	2103      	movs	r1, #3
 800b32e:	0018      	movs	r0, r3
 800b330:	f000 f9f4 	bl	800b71c <CheckCRC>
 800b334:	0003      	movs	r3, r0
 800b336:	001a      	movs	r2, r3
 800b338:	2301      	movs	r3, #1
 800b33a:	4053      	eors	r3, r2
 800b33c:	b2db      	uxtb	r3, r3
 800b33e:	2b00      	cmp	r3, #0
 800b340:	d02a      	beq.n	800b398 <SGP_GetMeasurementValues+0x11c>
      Error("SGP40 measurements CRC check failed.");
 800b342:	4aaf      	ldr	r2, [pc, #700]	@ (800b600 <SGP_GetMeasurementValues+0x384>)
 800b344:	4baf      	ldr	r3, [pc, #700]	@ (800b604 <SGP_GetMeasurementValues+0x388>)
 800b346:	0019      	movs	r1, r3
 800b348:	2001      	movs	r0, #1
 800b34a:	f002 fc37 	bl	800dbbc <CreateLine>
      Info("SGP_Measure buffer structure:");
 800b34e:	4aae      	ldr	r2, [pc, #696]	@ (800b608 <SGP_GetMeasurementValues+0x38c>)
 800b350:	4bae      	ldr	r3, [pc, #696]	@ (800b60c <SGP_GetMeasurementValues+0x390>)
 800b352:	0019      	movs	r1, r3
 800b354:	2002      	movs	r0, #2
 800b356:	f002 fc31 	bl	800dbbc <CreateLine>
      for (uint8_t i = 0; i < SGP_MEASURE_BUFFER_RESPONSE_LENGTH; i++) {
 800b35a:	230f      	movs	r3, #15
 800b35c:	18fb      	adds	r3, r7, r3
 800b35e:	2200      	movs	r2, #0
 800b360:	701a      	strb	r2, [r3, #0]
 800b362:	e012      	b.n	800b38a <SGP_GetMeasurementValues+0x10e>
        Debug("SGP_Measurement buffer[%d]: %d", i, SGP_ReadBuffer[i]);
 800b364:	240f      	movs	r4, #15
 800b366:	193b      	adds	r3, r7, r4
 800b368:	7818      	ldrb	r0, [r3, #0]
 800b36a:	193b      	adds	r3, r7, r4
 800b36c:	781b      	ldrb	r3, [r3, #0]
 800b36e:	4aa3      	ldr	r2, [pc, #652]	@ (800b5fc <SGP_GetMeasurementValues+0x380>)
 800b370:	5cd3      	ldrb	r3, [r2, r3]
 800b372:	4aa7      	ldr	r2, [pc, #668]	@ (800b610 <SGP_GetMeasurementValues+0x394>)
 800b374:	49a7      	ldr	r1, [pc, #668]	@ (800b614 <SGP_GetMeasurementValues+0x398>)
 800b376:	9300      	str	r3, [sp, #0]
 800b378:	0003      	movs	r3, r0
 800b37a:	2003      	movs	r0, #3
 800b37c:	f002 fc1e 	bl	800dbbc <CreateLine>
      for (uint8_t i = 0; i < SGP_MEASURE_BUFFER_RESPONSE_LENGTH; i++) {
 800b380:	193b      	adds	r3, r7, r4
 800b382:	781a      	ldrb	r2, [r3, #0]
 800b384:	193b      	adds	r3, r7, r4
 800b386:	3201      	adds	r2, #1
 800b388:	701a      	strb	r2, [r3, #0]
 800b38a:	230f      	movs	r3, #15
 800b38c:	18fb      	adds	r3, r7, r3
 800b38e:	781b      	ldrb	r3, [r3, #0]
 800b390:	2b02      	cmp	r3, #2
 800b392:	d9e7      	bls.n	800b364 <SGP_GetMeasurementValues+0xe8>
      }
      return false;
 800b394:	2300      	movs	r3, #0
 800b396:	e173      	b.n	800b680 <SGP_GetMeasurementValues+0x404>
    }
    SGP_MeasurementDutyCycle = HAL_GetTick() + SGP_SENSOR_DUTYCYCLE;
 800b398:	f003 f866 	bl	800e468 <HAL_GetTick>
 800b39c:	0003      	movs	r3, r0
 800b39e:	22fa      	movs	r2, #250	@ 0xfa
 800b3a0:	0092      	lsls	r2, r2, #2
 800b3a2:	189a      	adds	r2, r3, r2
 800b3a4:	4b9c      	ldr	r3, [pc, #624]	@ (800b618 <SGP_GetMeasurementValues+0x39c>)
 800b3a6:	601a      	str	r2, [r3, #0]
    SGP_TurnHeaterOff();
 800b3a8:	f7ff ff5a 	bl	800b260 <SGP_TurnHeaterOff>
    SGP_AmountOfSamplesDone++;
 800b3ac:	4b9b      	ldr	r3, [pc, #620]	@ (800b61c <SGP_GetMeasurementValues+0x3a0>)
 800b3ae:	781b      	ldrb	r3, [r3, #0]
 800b3b0:	3301      	adds	r3, #1
 800b3b2:	b2da      	uxtb	r2, r3
 800b3b4:	4b99      	ldr	r3, [pc, #612]	@ (800b61c <SGP_GetMeasurementValues+0x3a0>)
 800b3b6:	701a      	strb	r2, [r3, #0]
    if (SGP_AmountOfSamplesDone >= SGP_TotalSamples) {
 800b3b8:	4b98      	ldr	r3, [pc, #608]	@ (800b61c <SGP_GetMeasurementValues+0x3a0>)
 800b3ba:	781a      	ldrb	r2, [r3, #0]
 800b3bc:	4b98      	ldr	r3, [pc, #608]	@ (800b620 <SGP_GetMeasurementValues+0x3a4>)
 800b3be:	781b      	ldrb	r3, [r3, #0]
 800b3c0:	429a      	cmp	r2, r3
 800b3c2:	d200      	bcs.n	800b3c6 <SGP_GetMeasurementValues+0x14a>
 800b3c4:	e144      	b.n	800b650 <SGP_GetMeasurementValues+0x3d4>
      uint16_t rawSignal = ((SGP_ReadBuffer[1] << 8) | (SGP_ReadBuffer[0]));
 800b3c6:	4b8d      	ldr	r3, [pc, #564]	@ (800b5fc <SGP_GetMeasurementValues+0x380>)
 800b3c8:	785b      	ldrb	r3, [r3, #1]
 800b3ca:	021b      	lsls	r3, r3, #8
 800b3cc:	b21a      	sxth	r2, r3
 800b3ce:	4b8b      	ldr	r3, [pc, #556]	@ (800b5fc <SGP_GetMeasurementValues+0x380>)
 800b3d0:	781b      	ldrb	r3, [r3, #0]
 800b3d2:	b21b      	sxth	r3, r3
 800b3d4:	4313      	orrs	r3, r2
 800b3d6:	b21a      	sxth	r2, r3
 800b3d8:	240c      	movs	r4, #12
 800b3da:	193b      	adds	r3, r7, r4
 800b3dc:	801a      	strh	r2, [r3, #0]
      int32_t tempVocIndex = 0;
 800b3de:	2300      	movs	r3, #0
 800b3e0:	60bb      	str	r3, [r7, #8]
      GasIndexAlgorithm_process(&params, rawSignal, &tempVocIndex);
 800b3e2:	193b      	adds	r3, r7, r4
 800b3e4:	8819      	ldrh	r1, [r3, #0]
 800b3e6:	2308      	movs	r3, #8
 800b3e8:	18fa      	adds	r2, r7, r3
 800b3ea:	4b8e      	ldr	r3, [pc, #568]	@ (800b624 <SGP_GetMeasurementValues+0x3a8>)
 800b3ec:	0018      	movs	r0, r3
 800b3ee:	f7fe fe9f 	bl	800a130 <GasIndexAlgorithm_process>
      sgp40samplecounter++;
 800b3f2:	4b8d      	ldr	r3, [pc, #564]	@ (800b628 <SGP_GetMeasurementValues+0x3ac>)
 800b3f4:	781b      	ldrb	r3, [r3, #0]
 800b3f6:	3301      	adds	r3, #1
 800b3f8:	b2da      	uxtb	r2, r3
 800b3fa:	4b8b      	ldr	r3, [pc, #556]	@ (800b628 <SGP_GetMeasurementValues+0x3ac>)
 800b3fc:	701a      	strb	r2, [r3, #0]
      if (sgp40samplecounter == 1) {
 800b3fe:	4b8a      	ldr	r3, [pc, #552]	@ (800b628 <SGP_GetMeasurementValues+0x3ac>)
 800b400:	781b      	ldrb	r3, [r3, #0]
 800b402:	2b01      	cmp	r3, #1
 800b404:	d10d      	bne.n	800b422 <SGP_GetMeasurementValues+0x1a6>
        Debug("SGP40 rawSignal value: %d", rawSignal);
 800b406:	193b      	adds	r3, r7, r4
 800b408:	881b      	ldrh	r3, [r3, #0]
 800b40a:	4a88      	ldr	r2, [pc, #544]	@ (800b62c <SGP_GetMeasurementValues+0x3b0>)
 800b40c:	4981      	ldr	r1, [pc, #516]	@ (800b614 <SGP_GetMeasurementValues+0x398>)
 800b40e:	2003      	movs	r0, #3
 800b410:	f002 fbd4 	bl	800dbbc <CreateLine>
        Debug("SGP40 vocIndex value: %d", tempVocIndex);
 800b414:	68bb      	ldr	r3, [r7, #8]
 800b416:	4a86      	ldr	r2, [pc, #536]	@ (800b630 <SGP_GetMeasurementValues+0x3b4>)
 800b418:	497e      	ldr	r1, [pc, #504]	@ (800b614 <SGP_GetMeasurementValues+0x398>)
 800b41a:	2003      	movs	r0, #3
 800b41c:	f002 fbce 	bl	800dbbc <CreateLine>
 800b420:	e006      	b.n	800b430 <SGP_GetMeasurementValues+0x1b4>
      }
      else {
        if (sgp40samplecounter == 11) {
 800b422:	4b81      	ldr	r3, [pc, #516]	@ (800b628 <SGP_GetMeasurementValues+0x3ac>)
 800b424:	781b      	ldrb	r3, [r3, #0]
 800b426:	2b0b      	cmp	r3, #11
 800b428:	d102      	bne.n	800b430 <SGP_GetMeasurementValues+0x1b4>
          sgp40samplecounter = 0;
 800b42a:	4b7f      	ldr	r3, [pc, #508]	@ (800b628 <SGP_GetMeasurementValues+0x3ac>)
 800b42c:	2200      	movs	r2, #0
 800b42e:	701a      	strb	r2, [r3, #0]
        }
      }
      *vocIndex = tempVocIndex;
 800b430:	68ba      	ldr	r2, [r7, #8]
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	601a      	str	r2, [r3, #0]
      if(*vocIndex > 0 && *vocIndex <= 100){
 800b436:	687b      	ldr	r3, [r7, #4]
 800b438:	681b      	ldr	r3, [r3, #0]
 800b43a:	2b00      	cmp	r3, #0
 800b43c:	dd5a      	ble.n	800b4f4 <SGP_GetMeasurementValues+0x278>
 800b43e:	687b      	ldr	r3, [r7, #4]
 800b440:	681b      	ldr	r3, [r3, #0]
 800b442:	2b64      	cmp	r3, #100	@ 0x64
 800b444:	dc56      	bgt.n	800b4f4 <SGP_GetMeasurementValues+0x278>
        Green = (1.0-(*vocIndex/100.0))*TimeValue;
 800b446:	687b      	ldr	r3, [r7, #4]
 800b448:	681b      	ldr	r3, [r3, #0]
 800b44a:	0018      	movs	r0, r3
 800b44c:	f7f7 ffb8 	bl	80033c0 <__aeabi_i2d>
 800b450:	2200      	movs	r2, #0
 800b452:	4b78      	ldr	r3, [pc, #480]	@ (800b634 <SGP_GetMeasurementValues+0x3b8>)
 800b454:	f7f6 fcae 	bl	8001db4 <__aeabi_ddiv>
 800b458:	0002      	movs	r2, r0
 800b45a:	000b      	movs	r3, r1
 800b45c:	2000      	movs	r0, #0
 800b45e:	4976      	ldr	r1, [pc, #472]	@ (800b638 <SGP_GetMeasurementValues+0x3bc>)
 800b460:	f7f7 fbb4 	bl	8002bcc <__aeabi_dsub>
 800b464:	0002      	movs	r2, r0
 800b466:	000b      	movs	r3, r1
 800b468:	0014      	movs	r4, r2
 800b46a:	001d      	movs	r5, r3
 800b46c:	4b73      	ldr	r3, [pc, #460]	@ (800b63c <SGP_GetMeasurementValues+0x3c0>)
 800b46e:	881b      	ldrh	r3, [r3, #0]
 800b470:	0018      	movs	r0, r3
 800b472:	f7f7 ffa5 	bl	80033c0 <__aeabi_i2d>
 800b476:	0002      	movs	r2, r0
 800b478:	000b      	movs	r3, r1
 800b47a:	0020      	movs	r0, r4
 800b47c:	0029      	movs	r1, r5
 800b47e:	f7f7 f8dd 	bl	800263c <__aeabi_dmul>
 800b482:	0002      	movs	r2, r0
 800b484:	000b      	movs	r3, r1
 800b486:	0010      	movs	r0, r2
 800b488:	0019      	movs	r1, r3
 800b48a:	f7f5 f8df 	bl	800064c <__aeabi_d2uiz>
 800b48e:	0003      	movs	r3, r0
 800b490:	b29a      	uxth	r2, r3
 800b492:	4b6b      	ldr	r3, [pc, #428]	@ (800b640 <SGP_GetMeasurementValues+0x3c4>)
 800b494:	801a      	strh	r2, [r3, #0]
        Blue = (*vocIndex/100.0)*TimeValue;
 800b496:	687b      	ldr	r3, [r7, #4]
 800b498:	681b      	ldr	r3, [r3, #0]
 800b49a:	0018      	movs	r0, r3
 800b49c:	f7f7 ff90 	bl	80033c0 <__aeabi_i2d>
 800b4a0:	2200      	movs	r2, #0
 800b4a2:	4b64      	ldr	r3, [pc, #400]	@ (800b634 <SGP_GetMeasurementValues+0x3b8>)
 800b4a4:	f7f6 fc86 	bl	8001db4 <__aeabi_ddiv>
 800b4a8:	0002      	movs	r2, r0
 800b4aa:	000b      	movs	r3, r1
 800b4ac:	0014      	movs	r4, r2
 800b4ae:	001d      	movs	r5, r3
 800b4b0:	4b62      	ldr	r3, [pc, #392]	@ (800b63c <SGP_GetMeasurementValues+0x3c0>)
 800b4b2:	881b      	ldrh	r3, [r3, #0]
 800b4b4:	0018      	movs	r0, r3
 800b4b6:	f7f7 ff83 	bl	80033c0 <__aeabi_i2d>
 800b4ba:	0002      	movs	r2, r0
 800b4bc:	000b      	movs	r3, r1
 800b4be:	0020      	movs	r0, r4
 800b4c0:	0029      	movs	r1, r5
 800b4c2:	f7f7 f8bb 	bl	800263c <__aeabi_dmul>
 800b4c6:	0002      	movs	r2, r0
 800b4c8:	000b      	movs	r3, r1
 800b4ca:	0010      	movs	r0, r2
 800b4cc:	0019      	movs	r1, r3
 800b4ce:	f7f5 f8bd 	bl	800064c <__aeabi_d2uiz>
 800b4d2:	0003      	movs	r3, r0
 800b4d4:	b29a      	uxth	r2, r3
 800b4d6:	4b5b      	ldr	r3, [pc, #364]	@ (800b644 <SGP_GetMeasurementValues+0x3c8>)
 800b4d8:	801a      	strh	r2, [r3, #0]
        Red = TimeValue;
 800b4da:	4b58      	ldr	r3, [pc, #352]	@ (800b63c <SGP_GetMeasurementValues+0x3c0>)
 800b4dc:	881a      	ldrh	r2, [r3, #0]
 800b4de:	4b5a      	ldr	r3, [pc, #360]	@ (800b648 <SGP_GetMeasurementValues+0x3cc>)
 800b4e0:	801a      	strh	r2, [r3, #0]
        SetVocLED(Red, Green, Blue);
 800b4e2:	4b59      	ldr	r3, [pc, #356]	@ (800b648 <SGP_GetMeasurementValues+0x3cc>)
 800b4e4:	8818      	ldrh	r0, [r3, #0]
 800b4e6:	4b56      	ldr	r3, [pc, #344]	@ (800b640 <SGP_GetMeasurementValues+0x3c4>)
 800b4e8:	8819      	ldrh	r1, [r3, #0]
 800b4ea:	4b56      	ldr	r3, [pc, #344]	@ (800b644 <SGP_GetMeasurementValues+0x3c8>)
 800b4ec:	881b      	ldrh	r3, [r3, #0]
 800b4ee:	001a      	movs	r2, r3
 800b4f0:	f001 fbda 	bl	800cca8 <SetVocLED>
      }
      if(*vocIndex > 100){
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	681b      	ldr	r3, [r3, #0]
 800b4f8:	2b64      	cmp	r3, #100	@ 0x64
 800b4fa:	dd66      	ble.n	800b5ca <SGP_GetMeasurementValues+0x34e>
        Green = (((*vocIndex-100.0)/400.0))*TimeValue;
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	681b      	ldr	r3, [r3, #0]
 800b500:	0018      	movs	r0, r3
 800b502:	f7f7 ff5d 	bl	80033c0 <__aeabi_i2d>
 800b506:	2200      	movs	r2, #0
 800b508:	4b4a      	ldr	r3, [pc, #296]	@ (800b634 <SGP_GetMeasurementValues+0x3b8>)
 800b50a:	f7f7 fb5f 	bl	8002bcc <__aeabi_dsub>
 800b50e:	0002      	movs	r2, r0
 800b510:	000b      	movs	r3, r1
 800b512:	0010      	movs	r0, r2
 800b514:	0019      	movs	r1, r3
 800b516:	2200      	movs	r2, #0
 800b518:	4b4c      	ldr	r3, [pc, #304]	@ (800b64c <SGP_GetMeasurementValues+0x3d0>)
 800b51a:	f7f6 fc4b 	bl	8001db4 <__aeabi_ddiv>
 800b51e:	0002      	movs	r2, r0
 800b520:	000b      	movs	r3, r1
 800b522:	0014      	movs	r4, r2
 800b524:	001d      	movs	r5, r3
 800b526:	4b45      	ldr	r3, [pc, #276]	@ (800b63c <SGP_GetMeasurementValues+0x3c0>)
 800b528:	881b      	ldrh	r3, [r3, #0]
 800b52a:	0018      	movs	r0, r3
 800b52c:	f7f7 ff48 	bl	80033c0 <__aeabi_i2d>
 800b530:	0002      	movs	r2, r0
 800b532:	000b      	movs	r3, r1
 800b534:	0020      	movs	r0, r4
 800b536:	0029      	movs	r1, r5
 800b538:	f7f7 f880 	bl	800263c <__aeabi_dmul>
 800b53c:	0002      	movs	r2, r0
 800b53e:	000b      	movs	r3, r1
 800b540:	0010      	movs	r0, r2
 800b542:	0019      	movs	r1, r3
 800b544:	f7f5 f882 	bl	800064c <__aeabi_d2uiz>
 800b548:	0003      	movs	r3, r0
 800b54a:	b29a      	uxth	r2, r3
 800b54c:	4b3c      	ldr	r3, [pc, #240]	@ (800b640 <SGP_GetMeasurementValues+0x3c4>)
 800b54e:	801a      	strh	r2, [r3, #0]
        Red = (1.0-((*vocIndex-100.0)/400.0))*TimeValue;
 800b550:	687b      	ldr	r3, [r7, #4]
 800b552:	681b      	ldr	r3, [r3, #0]
 800b554:	0018      	movs	r0, r3
 800b556:	f7f7 ff33 	bl	80033c0 <__aeabi_i2d>
 800b55a:	2200      	movs	r2, #0
 800b55c:	4b35      	ldr	r3, [pc, #212]	@ (800b634 <SGP_GetMeasurementValues+0x3b8>)
 800b55e:	f7f7 fb35 	bl	8002bcc <__aeabi_dsub>
 800b562:	0002      	movs	r2, r0
 800b564:	000b      	movs	r3, r1
 800b566:	0010      	movs	r0, r2
 800b568:	0019      	movs	r1, r3
 800b56a:	2200      	movs	r2, #0
 800b56c:	4b37      	ldr	r3, [pc, #220]	@ (800b64c <SGP_GetMeasurementValues+0x3d0>)
 800b56e:	f7f6 fc21 	bl	8001db4 <__aeabi_ddiv>
 800b572:	0002      	movs	r2, r0
 800b574:	000b      	movs	r3, r1
 800b576:	2000      	movs	r0, #0
 800b578:	492f      	ldr	r1, [pc, #188]	@ (800b638 <SGP_GetMeasurementValues+0x3bc>)
 800b57a:	f7f7 fb27 	bl	8002bcc <__aeabi_dsub>
 800b57e:	0002      	movs	r2, r0
 800b580:	000b      	movs	r3, r1
 800b582:	0014      	movs	r4, r2
 800b584:	001d      	movs	r5, r3
 800b586:	4b2d      	ldr	r3, [pc, #180]	@ (800b63c <SGP_GetMeasurementValues+0x3c0>)
 800b588:	881b      	ldrh	r3, [r3, #0]
 800b58a:	0018      	movs	r0, r3
 800b58c:	f7f7 ff18 	bl	80033c0 <__aeabi_i2d>
 800b590:	0002      	movs	r2, r0
 800b592:	000b      	movs	r3, r1
 800b594:	0020      	movs	r0, r4
 800b596:	0029      	movs	r1, r5
 800b598:	f7f7 f850 	bl	800263c <__aeabi_dmul>
 800b59c:	0002      	movs	r2, r0
 800b59e:	000b      	movs	r3, r1
 800b5a0:	0010      	movs	r0, r2
 800b5a2:	0019      	movs	r1, r3
 800b5a4:	f7f5 f852 	bl	800064c <__aeabi_d2uiz>
 800b5a8:	0003      	movs	r3, r0
 800b5aa:	b29a      	uxth	r2, r3
 800b5ac:	4b26      	ldr	r3, [pc, #152]	@ (800b648 <SGP_GetMeasurementValues+0x3cc>)
 800b5ae:	801a      	strh	r2, [r3, #0]
        Blue = TimeValue;
 800b5b0:	4b22      	ldr	r3, [pc, #136]	@ (800b63c <SGP_GetMeasurementValues+0x3c0>)
 800b5b2:	881a      	ldrh	r2, [r3, #0]
 800b5b4:	4b23      	ldr	r3, [pc, #140]	@ (800b644 <SGP_GetMeasurementValues+0x3c8>)
 800b5b6:	801a      	strh	r2, [r3, #0]
        SetVocLED(Red, Green, Blue);
 800b5b8:	4b23      	ldr	r3, [pc, #140]	@ (800b648 <SGP_GetMeasurementValues+0x3cc>)
 800b5ba:	8818      	ldrh	r0, [r3, #0]
 800b5bc:	4b20      	ldr	r3, [pc, #128]	@ (800b640 <SGP_GetMeasurementValues+0x3c4>)
 800b5be:	8819      	ldrh	r1, [r3, #0]
 800b5c0:	4b20      	ldr	r3, [pc, #128]	@ (800b644 <SGP_GetMeasurementValues+0x3c8>)
 800b5c2:	881b      	ldrh	r3, [r3, #0]
 800b5c4:	001a      	movs	r2, r3
 800b5c6:	f001 fb6f 	bl	800cca8 <SetVocLED>
      }
      SGP_AmountOfSamplesDone = 0;
 800b5ca:	4b14      	ldr	r3, [pc, #80]	@ (800b61c <SGP_GetMeasurementValues+0x3a0>)
 800b5cc:	2200      	movs	r2, #0
 800b5ce:	701a      	strb	r2, [r3, #0]
//      Debug("SGP_Measurement completely done.");
      HT_MeasurementReceived = false;
 800b5d0:	4b05      	ldr	r3, [pc, #20]	@ (800b5e8 <SGP_GetMeasurementValues+0x36c>)
 800b5d2:	2200      	movs	r2, #0
 800b5d4:	701a      	strb	r2, [r3, #0]
      SGP_MsgSent = false;
 800b5d6:	4b03      	ldr	r3, [pc, #12]	@ (800b5e4 <SGP_GetMeasurementValues+0x368>)
 800b5d8:	2200      	movs	r2, #0
 800b5da:	701a      	strb	r2, [r3, #0]
//      for (uint8_t i = 0; i < SGP_MEASURE_BUFFER_RESPONSE_LENGTH; i++) {
//        Debug("SGP_Measurement buffer[%d]: %d", i, SGP_ReadBuffer[i]);
//      }
      return true;
 800b5dc:	2301      	movs	r3, #1
 800b5de:	e04f      	b.n	800b680 <SGP_GetMeasurementValues+0x404>
 800b5e0:	20001290 	.word	0x20001290
 800b5e4:	2000133d 	.word	0x2000133d
 800b5e8:	2000133c 	.word	0x2000133c
 800b5ec:	20000098 	.word	0x20000098
 800b5f0:	200000ac 	.word	0x200000ac
 800b5f4:	20000090 	.word	0x20000090
 800b5f8:	20001291 	.word	0x20001291
 800b5fc:	20001280 	.word	0x20001280
 800b600:	080240ec 	.word	0x080240ec
 800b604:	08024114 	.word	0x08024114
 800b608:	08024118 	.word	0x08024118
 800b60c:	08024138 	.word	0x08024138
 800b610:	0802413c 	.word	0x0802413c
 800b614:	0802415c 	.word	0x0802415c
 800b618:	200000a8 	.word	0x200000a8
 800b61c:	20001289 	.word	0x20001289
 800b620:	200000a2 	.word	0x200000a2
 800b624:	20001294 	.word	0x20001294
 800b628:	2000128a 	.word	0x2000128a
 800b62c:	08024160 	.word	0x08024160
 800b630:	0802417c 	.word	0x0802417c
 800b634:	40590000 	.word	0x40590000
 800b638:	3ff00000 	.word	0x3ff00000
 800b63c:	200000b0 	.word	0x200000b0
 800b640:	20001348 	.word	0x20001348
 800b644:	20001346 	.word	0x20001346
 800b648:	20001344 	.word	0x20001344
 800b64c:	40790000 	.word	0x40790000
    }
  }
  if (SGP_MeasurementDone() && HeatUpIsDone && MeasurementIsReady) {
 800b650:	f7ff fdf8 	bl	800b244 <SGP_MeasurementDone>
 800b654:	1e03      	subs	r3, r0, #0
 800b656:	d012      	beq.n	800b67e <SGP_GetMeasurementValues+0x402>
 800b658:	4b0b      	ldr	r3, [pc, #44]	@ (800b688 <SGP_GetMeasurementValues+0x40c>)
 800b65a:	781b      	ldrb	r3, [r3, #0]
 800b65c:	2b00      	cmp	r3, #0
 800b65e:	d00e      	beq.n	800b67e <SGP_GetMeasurementValues+0x402>
 800b660:	4b0a      	ldr	r3, [pc, #40]	@ (800b68c <SGP_GetMeasurementValues+0x410>)
 800b662:	781b      	ldrb	r3, [r3, #0]
 800b664:	2b00      	cmp	r3, #0
 800b666:	d00a      	beq.n	800b67e <SGP_GetMeasurementValues+0x402>
    // Starting next measurement
    Debug("Starting next SGP_measurement.");
 800b668:	4a09      	ldr	r2, [pc, #36]	@ (800b690 <SGP_GetMeasurementValues+0x414>)
 800b66a:	4b0a      	ldr	r3, [pc, #40]	@ (800b694 <SGP_GetMeasurementValues+0x418>)
 800b66c:	0019      	movs	r1, r3
 800b66e:	2003      	movs	r0, #3
 800b670:	f002 faa4 	bl	800dbbc <CreateLine>
    SGP_StartMeasurement();
 800b674:	f7ff fd92 	bl	800b19c <SGP_StartMeasurement>
    SGP_MsgSent = false;
 800b678:	4b07      	ldr	r3, [pc, #28]	@ (800b698 <SGP_GetMeasurementValues+0x41c>)
 800b67a:	2200      	movs	r2, #0
 800b67c:	701a      	strb	r2, [r3, #0]
  }
  return false;
 800b67e:	2300      	movs	r3, #0
}
 800b680:	0018      	movs	r0, r3
 800b682:	46bd      	mov	sp, r7
 800b684:	b004      	add	sp, #16
 800b686:	bdb0      	pop	{r4, r5, r7, pc}
 800b688:	20001290 	.word	0x20001290
 800b68c:	20001291 	.word	0x20001291
 800b690:	08024198 	.word	0x08024198
 800b694:	0802415c 	.word	0x0802415c
 800b698:	2000133d 	.word	0x2000133d

0800b69c <SGP_DeviceConnected>:

bool SGP_DeviceConnected(void) {
 800b69c:	b580      	push	{r7, lr}
 800b69e:	b084      	sub	sp, #16
 800b6a0:	af02      	add	r7, sp, #8
  WriteRegister(SGP_I2C_ADDRESS, GetSerialNumberBuffer, SGP_SHORT_COMMAND_BUFFER_LENGTH);
 800b6a2:	4b1a      	ldr	r3, [pc, #104]	@ (800b70c <SGP_DeviceConnected+0x70>)
 800b6a4:	2202      	movs	r2, #2
 800b6a6:	0019      	movs	r1, r3
 800b6a8:	2059      	movs	r0, #89	@ 0x59
 800b6aa:	f7ff fd23 	bl	800b0f4 <WriteRegister>
  HAL_Delay(1); // 1ms delay for the sensor to respond (according to datasheet)
 800b6ae:	2001      	movs	r0, #1
 800b6b0:	f002 fee4 	bl	800e47c <HAL_Delay>
  ReadRegister(SGP_I2C_ADDRESS, SGP_ReadBuffer, SGP_SERIAL_NUMBER_RESPONSE_LENGTH);
 800b6b4:	4b16      	ldr	r3, [pc, #88]	@ (800b710 <SGP_DeviceConnected+0x74>)
 800b6b6:	2209      	movs	r2, #9
 800b6b8:	0019      	movs	r1, r3
 800b6ba:	2059      	movs	r0, #89	@ 0x59
 800b6bc:	f7ff fcfc 	bl	800b0b8 <ReadRegister>
  for (uint8_t i = 0; i < SGP_SERIAL_NUMBER_RESPONSE_LENGTH; i++) {
 800b6c0:	1dfb      	adds	r3, r7, #7
 800b6c2:	2200      	movs	r2, #0
 800b6c4:	701a      	strb	r2, [r3, #0]
 800b6c6:	e011      	b.n	800b6ec <SGP_DeviceConnected+0x50>
    Info("SGP_Device serial ID[%d]: 0x%X", i, SGP_ReadBuffer[i]);
 800b6c8:	1dfb      	adds	r3, r7, #7
 800b6ca:	7818      	ldrb	r0, [r3, #0]
 800b6cc:	1dfb      	adds	r3, r7, #7
 800b6ce:	781b      	ldrb	r3, [r3, #0]
 800b6d0:	4a0f      	ldr	r2, [pc, #60]	@ (800b710 <SGP_DeviceConnected+0x74>)
 800b6d2:	5cd3      	ldrb	r3, [r2, r3]
 800b6d4:	4a0f      	ldr	r2, [pc, #60]	@ (800b714 <SGP_DeviceConnected+0x78>)
 800b6d6:	4910      	ldr	r1, [pc, #64]	@ (800b718 <SGP_DeviceConnected+0x7c>)
 800b6d8:	9300      	str	r3, [sp, #0]
 800b6da:	0003      	movs	r3, r0
 800b6dc:	2002      	movs	r0, #2
 800b6de:	f002 fa6d 	bl	800dbbc <CreateLine>
  for (uint8_t i = 0; i < SGP_SERIAL_NUMBER_RESPONSE_LENGTH; i++) {
 800b6e2:	1dfb      	adds	r3, r7, #7
 800b6e4:	781a      	ldrb	r2, [r3, #0]
 800b6e6:	1dfb      	adds	r3, r7, #7
 800b6e8:	3201      	adds	r2, #1
 800b6ea:	701a      	strb	r2, [r3, #0]
 800b6ec:	1dfb      	adds	r3, r7, #7
 800b6ee:	781b      	ldrb	r3, [r3, #0]
 800b6f0:	2b08      	cmp	r3, #8
 800b6f2:	d9e9      	bls.n	800b6c8 <SGP_DeviceConnected+0x2c>
  }
  return CheckCRC(SGP_ReadBuffer, SGP_SERIAL_NUMBER_RESPONSE_LENGTH, SGP_SERIAL_NUMBER_SEGMENT_SIZE);
 800b6f4:	4b06      	ldr	r3, [pc, #24]	@ (800b710 <SGP_DeviceConnected+0x74>)
 800b6f6:	2203      	movs	r2, #3
 800b6f8:	2109      	movs	r1, #9
 800b6fa:	0018      	movs	r0, r3
 800b6fc:	f000 f80e 	bl	800b71c <CheckCRC>
 800b700:	0003      	movs	r3, r0
}
 800b702:	0018      	movs	r0, r3
 800b704:	46bd      	mov	sp, r7
 800b706:	b002      	add	sp, #8
 800b708:	bd80      	pop	{r7, pc}
 800b70a:	46c0      	nop			@ (mov r8, r8)
 800b70c:	2000008c 	.word	0x2000008c
 800b710:	20001280 	.word	0x20001280
 800b714:	080241b8 	.word	0x080241b8
 800b718:	08024138 	.word	0x08024138

0800b71c <CheckCRC>:

static bool CheckCRC(uint8_t *data, uint8_t dataLength, uint8_t segmentSize) {
 800b71c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b71e:	b08f      	sub	sp, #60	@ 0x3c
 800b720:	af00      	add	r7, sp, #0
 800b722:	6278      	str	r0, [r7, #36]	@ 0x24
 800b724:	0008      	movs	r0, r1
 800b726:	0011      	movs	r1, r2
 800b728:	2323      	movs	r3, #35	@ 0x23
 800b72a:	18fb      	adds	r3, r7, r3
 800b72c:	1c02      	adds	r2, r0, #0
 800b72e:	701a      	strb	r2, [r3, #0]
 800b730:	2322      	movs	r3, #34	@ 0x22
 800b732:	18fb      	adds	r3, r7, r3
 800b734:	1c0a      	adds	r2, r1, #0
 800b736:	701a      	strb	r2, [r3, #0]
  for (uint8_t i = 0; i < dataLength; i += segmentSize) {
 800b738:	2317      	movs	r3, #23
 800b73a:	2220      	movs	r2, #32
 800b73c:	189b      	adds	r3, r3, r2
 800b73e:	19db      	adds	r3, r3, r7
 800b740:	2200      	movs	r2, #0
 800b742:	701a      	strb	r2, [r3, #0]
 800b744:	e09f      	b.n	800b886 <CheckCRC+0x16a>
 800b746:	466b      	mov	r3, sp
 800b748:	001e      	movs	r6, r3
    uint8_t crcData[segmentSize];
 800b74a:	2322      	movs	r3, #34	@ 0x22
 800b74c:	18fb      	adds	r3, r7, r3
 800b74e:	781b      	ldrb	r3, [r3, #0]
 800b750:	001a      	movs	r2, r3
 800b752:	3a01      	subs	r2, #1
 800b754:	633a      	str	r2, [r7, #48]	@ 0x30
 800b756:	60bb      	str	r3, [r7, #8]
 800b758:	2200      	movs	r2, #0
 800b75a:	60fa      	str	r2, [r7, #12]
 800b75c:	68b8      	ldr	r0, [r7, #8]
 800b75e:	68f9      	ldr	r1, [r7, #12]
 800b760:	0002      	movs	r2, r0
 800b762:	0f52      	lsrs	r2, r2, #29
 800b764:	000c      	movs	r4, r1
 800b766:	00e4      	lsls	r4, r4, #3
 800b768:	61fc      	str	r4, [r7, #28]
 800b76a:	69fc      	ldr	r4, [r7, #28]
 800b76c:	4314      	orrs	r4, r2
 800b76e:	61fc      	str	r4, [r7, #28]
 800b770:	0002      	movs	r2, r0
 800b772:	00d2      	lsls	r2, r2, #3
 800b774:	61ba      	str	r2, [r7, #24]
 800b776:	603b      	str	r3, [r7, #0]
 800b778:	2200      	movs	r2, #0
 800b77a:	607a      	str	r2, [r7, #4]
 800b77c:	6838      	ldr	r0, [r7, #0]
 800b77e:	6879      	ldr	r1, [r7, #4]
 800b780:	0002      	movs	r2, r0
 800b782:	0f52      	lsrs	r2, r2, #29
 800b784:	000c      	movs	r4, r1
 800b786:	00e4      	lsls	r4, r4, #3
 800b788:	617c      	str	r4, [r7, #20]
 800b78a:	697c      	ldr	r4, [r7, #20]
 800b78c:	4314      	orrs	r4, r2
 800b78e:	617c      	str	r4, [r7, #20]
 800b790:	0002      	movs	r2, r0
 800b792:	00d2      	lsls	r2, r2, #3
 800b794:	613a      	str	r2, [r7, #16]
 800b796:	3307      	adds	r3, #7
 800b798:	08db      	lsrs	r3, r3, #3
 800b79a:	00db      	lsls	r3, r3, #3
 800b79c:	466a      	mov	r2, sp
 800b79e:	1ad3      	subs	r3, r2, r3
 800b7a0:	469d      	mov	sp, r3
 800b7a2:	466b      	mov	r3, sp
 800b7a4:	3300      	adds	r3, #0
 800b7a6:	62fb      	str	r3, [r7, #44]	@ 0x2c

    for (uint8_t j = 0; j < segmentSize; j++) {
 800b7a8:	2316      	movs	r3, #22
 800b7aa:	2220      	movs	r2, #32
 800b7ac:	189b      	adds	r3, r3, r2
 800b7ae:	19db      	adds	r3, r3, r7
 800b7b0:	2200      	movs	r2, #0
 800b7b2:	701a      	strb	r2, [r3, #0]
 800b7b4:	e01e      	b.n	800b7f4 <CheckCRC+0xd8>
      crcData[j] = data[i + j];
 800b7b6:	2317      	movs	r3, #23
 800b7b8:	2220      	movs	r2, #32
 800b7ba:	189b      	adds	r3, r3, r2
 800b7bc:	19db      	adds	r3, r3, r7
 800b7be:	781a      	ldrb	r2, [r3, #0]
 800b7c0:	2116      	movs	r1, #22
 800b7c2:	2320      	movs	r3, #32
 800b7c4:	18cb      	adds	r3, r1, r3
 800b7c6:	19db      	adds	r3, r3, r7
 800b7c8:	781b      	ldrb	r3, [r3, #0]
 800b7ca:	18d3      	adds	r3, r2, r3
 800b7cc:	001a      	movs	r2, r3
 800b7ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b7d0:	189a      	adds	r2, r3, r2
 800b7d2:	0008      	movs	r0, r1
 800b7d4:	2320      	movs	r3, #32
 800b7d6:	18cb      	adds	r3, r1, r3
 800b7d8:	19db      	adds	r3, r3, r7
 800b7da:	781b      	ldrb	r3, [r3, #0]
 800b7dc:	7811      	ldrb	r1, [r2, #0]
 800b7de:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b7e0:	54d1      	strb	r1, [r2, r3]
    for (uint8_t j = 0; j < segmentSize; j++) {
 800b7e2:	2320      	movs	r3, #32
 800b7e4:	18c3      	adds	r3, r0, r3
 800b7e6:	19db      	adds	r3, r3, r7
 800b7e8:	781a      	ldrb	r2, [r3, #0]
 800b7ea:	2320      	movs	r3, #32
 800b7ec:	18c3      	adds	r3, r0, r3
 800b7ee:	19db      	adds	r3, r3, r7
 800b7f0:	3201      	adds	r2, #1
 800b7f2:	701a      	strb	r2, [r3, #0]
 800b7f4:	2316      	movs	r3, #22
 800b7f6:	2220      	movs	r2, #32
 800b7f8:	189b      	adds	r3, r3, r2
 800b7fa:	19da      	adds	r2, r3, r7
 800b7fc:	2322      	movs	r3, #34	@ 0x22
 800b7fe:	18fb      	adds	r3, r7, r3
 800b800:	7812      	ldrb	r2, [r2, #0]
 800b802:	781b      	ldrb	r3, [r3, #0]
 800b804:	429a      	cmp	r2, r3
 800b806:	d3d6      	bcc.n	800b7b6 <CheckCRC+0x9a>
    }
    uint8_t crc = data[i + segmentSize - 1];
 800b808:	2417      	movs	r4, #23
 800b80a:	2320      	movs	r3, #32
 800b80c:	18e3      	adds	r3, r4, r3
 800b80e:	19db      	adds	r3, r3, r7
 800b810:	781a      	ldrb	r2, [r3, #0]
 800b812:	2322      	movs	r3, #34	@ 0x22
 800b814:	18fb      	adds	r3, r7, r3
 800b816:	781b      	ldrb	r3, [r3, #0]
 800b818:	18d3      	adds	r3, r2, r3
 800b81a:	3b01      	subs	r3, #1
 800b81c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b81e:	18d2      	adds	r2, r2, r3
 800b820:	250b      	movs	r5, #11
 800b822:	2320      	movs	r3, #32
 800b824:	18eb      	adds	r3, r5, r3
 800b826:	19db      	adds	r3, r3, r7
 800b828:	7812      	ldrb	r2, [r2, #0]
 800b82a:	701a      	strb	r2, [r3, #0]

    if (CalculateCRC(crcData, segmentSize - 1) != crc) {
 800b82c:	2322      	movs	r3, #34	@ 0x22
 800b82e:	18fb      	adds	r3, r7, r3
 800b830:	781b      	ldrb	r3, [r3, #0]
 800b832:	3b01      	subs	r3, #1
 800b834:	b2da      	uxtb	r2, r3
 800b836:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b838:	0011      	movs	r1, r2
 800b83a:	0018      	movs	r0, r3
 800b83c:	f000 f838 	bl	800b8b0 <CalculateCRC>
 800b840:	0003      	movs	r3, r0
 800b842:	001a      	movs	r2, r3
 800b844:	2320      	movs	r3, #32
 800b846:	18eb      	adds	r3, r5, r3
 800b848:	19db      	adds	r3, r3, r7
 800b84a:	781b      	ldrb	r3, [r3, #0]
 800b84c:	4293      	cmp	r3, r2
 800b84e:	d00c      	beq.n	800b86a <CheckCRC+0x14e>
      Error("CRC check failed for segment: %d.", i + 1);
 800b850:	2320      	movs	r3, #32
 800b852:	18e3      	adds	r3, r4, r3
 800b854:	19db      	adds	r3, r3, r7
 800b856:	781b      	ldrb	r3, [r3, #0]
 800b858:	3301      	adds	r3, #1
 800b85a:	4a13      	ldr	r2, [pc, #76]	@ (800b8a8 <CheckCRC+0x18c>)
 800b85c:	4913      	ldr	r1, [pc, #76]	@ (800b8ac <CheckCRC+0x190>)
 800b85e:	2001      	movs	r0, #1
 800b860:	f002 f9ac 	bl	800dbbc <CreateLine>
      return false;
 800b864:	2300      	movs	r3, #0
 800b866:	46b5      	mov	sp, r6
 800b868:	e019      	b.n	800b89e <CheckCRC+0x182>
 800b86a:	46b5      	mov	sp, r6
  for (uint8_t i = 0; i < dataLength; i += segmentSize) {
 800b86c:	2217      	movs	r2, #23
 800b86e:	2320      	movs	r3, #32
 800b870:	18d3      	adds	r3, r2, r3
 800b872:	19db      	adds	r3, r3, r7
 800b874:	2120      	movs	r1, #32
 800b876:	1852      	adds	r2, r2, r1
 800b878:	19d1      	adds	r1, r2, r7
 800b87a:	2222      	movs	r2, #34	@ 0x22
 800b87c:	18ba      	adds	r2, r7, r2
 800b87e:	7809      	ldrb	r1, [r1, #0]
 800b880:	7812      	ldrb	r2, [r2, #0]
 800b882:	188a      	adds	r2, r1, r2
 800b884:	701a      	strb	r2, [r3, #0]
 800b886:	2317      	movs	r3, #23
 800b888:	2220      	movs	r2, #32
 800b88a:	189b      	adds	r3, r3, r2
 800b88c:	19da      	adds	r2, r3, r7
 800b88e:	2323      	movs	r3, #35	@ 0x23
 800b890:	18fb      	adds	r3, r7, r3
 800b892:	7812      	ldrb	r2, [r2, #0]
 800b894:	781b      	ldrb	r3, [r3, #0]
 800b896:	429a      	cmp	r2, r3
 800b898:	d200      	bcs.n	800b89c <CheckCRC+0x180>
 800b89a:	e754      	b.n	800b746 <CheckCRC+0x2a>
    }
  }
  return true;
 800b89c:	2301      	movs	r3, #1
}
 800b89e:	0018      	movs	r0, r3
 800b8a0:	46bd      	mov	sp, r7
 800b8a2:	b00f      	add	sp, #60	@ 0x3c
 800b8a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b8a6:	46c0      	nop			@ (mov r8, r8)
 800b8a8:	080241d8 	.word	0x080241d8
 800b8ac:	08024114 	.word	0x08024114

0800b8b0 <CalculateCRC>:

static uint8_t CalculateCRC(uint8_t *data, uint8_t length) {
 800b8b0:	b580      	push	{r7, lr}
 800b8b2:	b084      	sub	sp, #16
 800b8b4:	af00      	add	r7, sp, #0
 800b8b6:	6078      	str	r0, [r7, #4]
 800b8b8:	000a      	movs	r2, r1
 800b8ba:	1cfb      	adds	r3, r7, #3
 800b8bc:	701a      	strb	r2, [r3, #0]
  uint8_t crc = SGP_CRC_INIT_VALUE;
 800b8be:	230f      	movs	r3, #15
 800b8c0:	18fb      	adds	r3, r7, r3
 800b8c2:	22ff      	movs	r2, #255	@ 0xff
 800b8c4:	701a      	strb	r2, [r3, #0]

  for (uint8_t i = 0; i < length; i++) {
 800b8c6:	230e      	movs	r3, #14
 800b8c8:	18fb      	adds	r3, r7, r3
 800b8ca:	2200      	movs	r2, #0
 800b8cc:	701a      	strb	r2, [r3, #0]
 800b8ce:	e037      	b.n	800b940 <CalculateCRC+0x90>
    // XOR byte into least significant byte of crc
    crc ^= data[i];
 800b8d0:	230e      	movs	r3, #14
 800b8d2:	18fb      	adds	r3, r7, r3
 800b8d4:	781b      	ldrb	r3, [r3, #0]
 800b8d6:	687a      	ldr	r2, [r7, #4]
 800b8d8:	18d3      	adds	r3, r2, r3
 800b8da:	7819      	ldrb	r1, [r3, #0]
 800b8dc:	220f      	movs	r2, #15
 800b8de:	18bb      	adds	r3, r7, r2
 800b8e0:	18ba      	adds	r2, r7, r2
 800b8e2:	7812      	ldrb	r2, [r2, #0]
 800b8e4:	404a      	eors	r2, r1
 800b8e6:	701a      	strb	r2, [r3, #0]

    for (uint8_t j = 0; j < 8; j++) {
 800b8e8:	230d      	movs	r3, #13
 800b8ea:	18fb      	adds	r3, r7, r3
 800b8ec:	2200      	movs	r2, #0
 800b8ee:	701a      	strb	r2, [r3, #0]
 800b8f0:	e01b      	b.n	800b92a <CalculateCRC+0x7a>
      // If the leftmost (most significant) bit is set
      if (crc & SGP_CRC_MSB_MASK) {
 800b8f2:	210f      	movs	r1, #15
 800b8f4:	187b      	adds	r3, r7, r1
 800b8f6:	781b      	ldrb	r3, [r3, #0]
 800b8f8:	b25b      	sxtb	r3, r3
 800b8fa:	2b00      	cmp	r3, #0
 800b8fc:	da09      	bge.n	800b912 <CalculateCRC+0x62>
        // Shift left and XOR with polynomial
        crc = (crc << 1) ^ SGP_CRC_POLYNOMIAL;
 800b8fe:	187b      	adds	r3, r7, r1
 800b900:	781b      	ldrb	r3, [r3, #0]
 800b902:	005b      	lsls	r3, r3, #1
 800b904:	b25b      	sxtb	r3, r3
 800b906:	2231      	movs	r2, #49	@ 0x31
 800b908:	4053      	eors	r3, r2
 800b90a:	b25a      	sxtb	r2, r3
 800b90c:	187b      	adds	r3, r7, r1
 800b90e:	701a      	strb	r2, [r3, #0]
 800b910:	e005      	b.n	800b91e <CalculateCRC+0x6e>
      } else {
        crc <<= 1;
 800b912:	230f      	movs	r3, #15
 800b914:	18fa      	adds	r2, r7, r3
 800b916:	18fb      	adds	r3, r7, r3
 800b918:	781b      	ldrb	r3, [r3, #0]
 800b91a:	18db      	adds	r3, r3, r3
 800b91c:	7013      	strb	r3, [r2, #0]
    for (uint8_t j = 0; j < 8; j++) {
 800b91e:	210d      	movs	r1, #13
 800b920:	187b      	adds	r3, r7, r1
 800b922:	781a      	ldrb	r2, [r3, #0]
 800b924:	187b      	adds	r3, r7, r1
 800b926:	3201      	adds	r2, #1
 800b928:	701a      	strb	r2, [r3, #0]
 800b92a:	230d      	movs	r3, #13
 800b92c:	18fb      	adds	r3, r7, r3
 800b92e:	781b      	ldrb	r3, [r3, #0]
 800b930:	2b07      	cmp	r3, #7
 800b932:	d9de      	bls.n	800b8f2 <CalculateCRC+0x42>
  for (uint8_t i = 0; i < length; i++) {
 800b934:	210e      	movs	r1, #14
 800b936:	187b      	adds	r3, r7, r1
 800b938:	781a      	ldrb	r2, [r3, #0]
 800b93a:	187b      	adds	r3, r7, r1
 800b93c:	3201      	adds	r2, #1
 800b93e:	701a      	strb	r2, [r3, #0]
 800b940:	230e      	movs	r3, #14
 800b942:	18fa      	adds	r2, r7, r3
 800b944:	1cfb      	adds	r3, r7, #3
 800b946:	7812      	ldrb	r2, [r2, #0]
 800b948:	781b      	ldrb	r3, [r3, #0]
 800b94a:	429a      	cmp	r2, r3
 800b94c:	d3c0      	bcc.n	800b8d0 <CalculateCRC+0x20>
      }
    }
  }
  //  Info("SGP_CRC calculated value: 0x%X", crc);
  return crc;
 800b94e:	230f      	movs	r3, #15
 800b950:	18fb      	adds	r3, r7, r3
 800b952:	781b      	ldrb	r3, [r3, #0]
}
 800b954:	0018      	movs	r0, r3
 800b956:	46bd      	mov	sp, r7
 800b958:	b004      	add	sp, #16
 800b95a:	bd80      	pop	{r7, pc}

0800b95c <SGP_GetHT>:

void SGP_GetHT(float* temperature, float* humidity){
 800b95c:	b580      	push	{r7, lr}
 800b95e:	b084      	sub	sp, #16
 800b960:	af00      	add	r7, sp, #0
 800b962:	6078      	str	r0, [r7, #4]
 800b964:	6039      	str	r1, [r7, #0]
  uint8_t humBuf[2];
  uint8_t tempBuf[2];
  SGP_Temp = (uint16_t)(((*temperature+45.0f)/175.0f)*(float)0xFFFF);
 800b966:	687b      	ldr	r3, [r7, #4]
 800b968:	681b      	ldr	r3, [r3, #0]
 800b96a:	4936      	ldr	r1, [pc, #216]	@ (800ba44 <SGP_GetHT+0xe8>)
 800b96c:	1c18      	adds	r0, r3, #0
 800b96e:	f7f4 ffa7 	bl	80008c0 <__aeabi_fadd>
 800b972:	1c03      	adds	r3, r0, #0
 800b974:	4934      	ldr	r1, [pc, #208]	@ (800ba48 <SGP_GetHT+0xec>)
 800b976:	1c18      	adds	r0, r3, #0
 800b978:	f7f5 f92c 	bl	8000bd4 <__aeabi_fdiv>
 800b97c:	1c03      	adds	r3, r0, #0
 800b97e:	4933      	ldr	r1, [pc, #204]	@ (800ba4c <SGP_GetHT+0xf0>)
 800b980:	1c18      	adds	r0, r3, #0
 800b982:	f7f5 fb0d 	bl	8000fa0 <__aeabi_fmul>
 800b986:	1c03      	adds	r3, r0, #0
 800b988:	1c18      	adds	r0, r3, #0
 800b98a:	f7f4 fe47 	bl	800061c <__aeabi_f2uiz>
 800b98e:	0003      	movs	r3, r0
 800b990:	b29a      	uxth	r2, r3
 800b992:	4b2f      	ldr	r3, [pc, #188]	@ (800ba50 <SGP_GetHT+0xf4>)
 800b994:	801a      	strh	r2, [r3, #0]
  SGP_Hum = ((*humidity/100.0f)*(float)0xFFFF);
 800b996:	683b      	ldr	r3, [r7, #0]
 800b998:	681b      	ldr	r3, [r3, #0]
 800b99a:	492e      	ldr	r1, [pc, #184]	@ (800ba54 <SGP_GetHT+0xf8>)
 800b99c:	1c18      	adds	r0, r3, #0
 800b99e:	f7f5 f919 	bl	8000bd4 <__aeabi_fdiv>
 800b9a2:	1c03      	adds	r3, r0, #0
 800b9a4:	4929      	ldr	r1, [pc, #164]	@ (800ba4c <SGP_GetHT+0xf0>)
 800b9a6:	1c18      	adds	r0, r3, #0
 800b9a8:	f7f5 fafa 	bl	8000fa0 <__aeabi_fmul>
 800b9ac:	1c03      	adds	r3, r0, #0
 800b9ae:	1c18      	adds	r0, r3, #0
 800b9b0:	f7f4 fe34 	bl	800061c <__aeabi_f2uiz>
 800b9b4:	0003      	movs	r3, r0
 800b9b6:	b29a      	uxth	r2, r3
 800b9b8:	4b27      	ldr	r3, [pc, #156]	@ (800ba58 <SGP_GetHT+0xfc>)
 800b9ba:	801a      	strh	r2, [r3, #0]
  humBuf[0] = MeasureRawWithCompBuffer[2] = SGP_Hum >> 8;
 800b9bc:	4b26      	ldr	r3, [pc, #152]	@ (800ba58 <SGP_GetHT+0xfc>)
 800b9be:	881b      	ldrh	r3, [r3, #0]
 800b9c0:	0a1b      	lsrs	r3, r3, #8
 800b9c2:	b29b      	uxth	r3, r3
 800b9c4:	b2da      	uxtb	r2, r3
 800b9c6:	4b25      	ldr	r3, [pc, #148]	@ (800ba5c <SGP_GetHT+0x100>)
 800b9c8:	709a      	strb	r2, [r3, #2]
 800b9ca:	4b24      	ldr	r3, [pc, #144]	@ (800ba5c <SGP_GetHT+0x100>)
 800b9cc:	789a      	ldrb	r2, [r3, #2]
 800b9ce:	210c      	movs	r1, #12
 800b9d0:	187b      	adds	r3, r7, r1
 800b9d2:	701a      	strb	r2, [r3, #0]
  humBuf[1] = MeasureRawWithCompBuffer[3] = SGP_Hum;
 800b9d4:	4b20      	ldr	r3, [pc, #128]	@ (800ba58 <SGP_GetHT+0xfc>)
 800b9d6:	881b      	ldrh	r3, [r3, #0]
 800b9d8:	b2da      	uxtb	r2, r3
 800b9da:	4b20      	ldr	r3, [pc, #128]	@ (800ba5c <SGP_GetHT+0x100>)
 800b9dc:	70da      	strb	r2, [r3, #3]
 800b9de:	4b1f      	ldr	r3, [pc, #124]	@ (800ba5c <SGP_GetHT+0x100>)
 800b9e0:	78da      	ldrb	r2, [r3, #3]
 800b9e2:	187b      	adds	r3, r7, r1
 800b9e4:	705a      	strb	r2, [r3, #1]
  MeasureRawWithCompBuffer[4] = CalculateCRC(humBuf, 2);
 800b9e6:	187b      	adds	r3, r7, r1
 800b9e8:	2102      	movs	r1, #2
 800b9ea:	0018      	movs	r0, r3
 800b9ec:	f7ff ff60 	bl	800b8b0 <CalculateCRC>
 800b9f0:	0003      	movs	r3, r0
 800b9f2:	001a      	movs	r2, r3
 800b9f4:	4b19      	ldr	r3, [pc, #100]	@ (800ba5c <SGP_GetHT+0x100>)
 800b9f6:	711a      	strb	r2, [r3, #4]
  tempBuf[0] = MeasureRawWithCompBuffer[5] = SGP_Temp >> 8;
 800b9f8:	4b15      	ldr	r3, [pc, #84]	@ (800ba50 <SGP_GetHT+0xf4>)
 800b9fa:	881b      	ldrh	r3, [r3, #0]
 800b9fc:	0a1b      	lsrs	r3, r3, #8
 800b9fe:	b29b      	uxth	r3, r3
 800ba00:	b2da      	uxtb	r2, r3
 800ba02:	4b16      	ldr	r3, [pc, #88]	@ (800ba5c <SGP_GetHT+0x100>)
 800ba04:	715a      	strb	r2, [r3, #5]
 800ba06:	4b15      	ldr	r3, [pc, #84]	@ (800ba5c <SGP_GetHT+0x100>)
 800ba08:	795a      	ldrb	r2, [r3, #5]
 800ba0a:	2108      	movs	r1, #8
 800ba0c:	187b      	adds	r3, r7, r1
 800ba0e:	701a      	strb	r2, [r3, #0]
  tempBuf[1] = MeasureRawWithCompBuffer[6] = SGP_Temp;
 800ba10:	4b0f      	ldr	r3, [pc, #60]	@ (800ba50 <SGP_GetHT+0xf4>)
 800ba12:	881b      	ldrh	r3, [r3, #0]
 800ba14:	b2da      	uxtb	r2, r3
 800ba16:	4b11      	ldr	r3, [pc, #68]	@ (800ba5c <SGP_GetHT+0x100>)
 800ba18:	719a      	strb	r2, [r3, #6]
 800ba1a:	4b10      	ldr	r3, [pc, #64]	@ (800ba5c <SGP_GetHT+0x100>)
 800ba1c:	799a      	ldrb	r2, [r3, #6]
 800ba1e:	187b      	adds	r3, r7, r1
 800ba20:	705a      	strb	r2, [r3, #1]
  MeasureRawWithCompBuffer[7] = CalculateCRC(tempBuf, 2);
 800ba22:	187b      	adds	r3, r7, r1
 800ba24:	2102      	movs	r1, #2
 800ba26:	0018      	movs	r0, r3
 800ba28:	f7ff ff42 	bl	800b8b0 <CalculateCRC>
 800ba2c:	0003      	movs	r3, r0
 800ba2e:	001a      	movs	r2, r3
 800ba30:	4b0a      	ldr	r3, [pc, #40]	@ (800ba5c <SGP_GetHT+0x100>)
 800ba32:	71da      	strb	r2, [r3, #7]
  HT_MeasurementReceived = true;
 800ba34:	4b0a      	ldr	r3, [pc, #40]	@ (800ba60 <SGP_GetHT+0x104>)
 800ba36:	2201      	movs	r2, #1
 800ba38:	701a      	strb	r2, [r3, #0]
}
 800ba3a:	46c0      	nop			@ (mov r8, r8)
 800ba3c:	46bd      	mov	sp, r7
 800ba3e:	b004      	add	sp, #16
 800ba40:	bd80      	pop	{r7, pc}
 800ba42:	46c0      	nop			@ (mov r8, r8)
 800ba44:	42340000 	.word	0x42340000
 800ba48:	432f0000 	.word	0x432f0000
 800ba4c:	477fff00 	.word	0x477fff00
 800ba50:	2000133a 	.word	0x2000133a
 800ba54:	42c80000 	.word	0x42c80000
 800ba58:	20001338 	.word	0x20001338
 800ba5c:	20000098 	.word	0x20000098
 800ba60:	2000133c 	.word	0x2000133c

0800ba64 <SGP_SoftReset>:
    }
  }
  return false;
}

void SGP_SoftReset(void) {
 800ba64:	b580      	push	{r7, lr}
 800ba66:	af00      	add	r7, sp, #0
  /* Joris: Datasheet mentioned this was a general reset command, which is odd.
  // But if something happens to the i2c bus, this might be the issue.
  Worth mentioning. */
  // Danny: Its not odd, its a general reset command which is a standard syntaxis. So do not use blind.
  // This command could take from 0.1 to 1ms.
  Debug("SGP40 brought to idle");
 800ba68:	4a09      	ldr	r2, [pc, #36]	@ (800ba90 <SGP_SoftReset+0x2c>)
 800ba6a:	4b0a      	ldr	r3, [pc, #40]	@ (800ba94 <SGP_SoftReset+0x30>)
 800ba6c:	0019      	movs	r1, r3
 800ba6e:	2003      	movs	r0, #3
 800ba70:	f002 f8a4 	bl	800dbbc <CreateLine>
  SGP_TurnHeaterOff();
 800ba74:	f7ff fbf4 	bl	800b260 <SGP_TurnHeaterOff>
  HAL_Delay(10);
 800ba78:	200a      	movs	r0, #10
 800ba7a:	f002 fcff 	bl	800e47c <HAL_Delay>
  WriteRegister(SGP_I2C_ADDRESS, SoftResetBuffer, SGP_SHORT_COMMAND_BUFFER_LENGTH);
 800ba7e:	4b06      	ldr	r3, [pc, #24]	@ (800ba98 <SGP_SoftReset+0x34>)
 800ba80:	2202      	movs	r2, #2
 800ba82:	0019      	movs	r1, r3
 800ba84:	2059      	movs	r0, #89	@ 0x59
 800ba86:	f7ff fb35 	bl	800b0f4 <WriteRegister>
}
 800ba8a:	46c0      	nop			@ (mov r8, r8)
 800ba8c:	46bd      	mov	sp, r7
 800ba8e:	bd80      	pop	{r7, pc}
 800ba90:	08024280 	.word	0x08024280
 800ba94:	0802415c 	.word	0x0802415c
 800ba98:	200000a0 	.word	0x200000a0

0800ba9c <ResetVOCresult>:

void ResetVOCresult(void) {
 800ba9c:	b580      	push	{r7, lr}
 800ba9e:	af00      	add	r7, sp, #0
  vocIndex = 0;
 800baa0:	4b02      	ldr	r3, [pc, #8]	@ (800baac <ResetVOCresult+0x10>)
 800baa2:	2200      	movs	r2, #0
 800baa4:	601a      	str	r2, [r3, #0]
}
 800baa6:	46c0      	nop			@ (mov r8, r8)
 800baa8:	46bd      	mov	sp, r7
 800baaa:	bd80      	pop	{r7, pc}
 800baac:	20001340 	.word	0x20001340

0800bab0 <SGP_Upkeep>:
SGP40State SGP_Upkeep(void) {
 800bab0:	b580      	push	{r7, lr}
 800bab2:	af00      	add	r7, sp, #0
  static SGP40State SGPState = SGP_STATE_INIT;
  switch(SGPState) {
 800bab4:	4b33      	ldr	r3, [pc, #204]	@ (800bb84 <SGP_Upkeep+0xd4>)
 800bab6:	781b      	ldrb	r3, [r3, #0]
 800bab8:	2b07      	cmp	r3, #7
 800baba:	d856      	bhi.n	800bb6a <SGP_Upkeep+0xba>
 800babc:	009a      	lsls	r2, r3, #2
 800babe:	4b32      	ldr	r3, [pc, #200]	@ (800bb88 <SGP_Upkeep+0xd8>)
 800bac0:	18d3      	adds	r3, r2, r3
 800bac2:	681b      	ldr	r3, [r3, #0]
 800bac4:	469f      	mov	pc, r3
  case SGP_STATE_OFF:
    Debug("Measurements are turned off for SGP40.");
 800bac6:	4a31      	ldr	r2, [pc, #196]	@ (800bb8c <SGP_Upkeep+0xdc>)
 800bac8:	4b31      	ldr	r3, [pc, #196]	@ (800bb90 <SGP_Upkeep+0xe0>)
 800baca:	0019      	movs	r1, r3
 800bacc:	2003      	movs	r0, #3
 800bace:	f002 f875 	bl	800dbbc <CreateLine>
    break;
 800bad2:	e051      	b.n	800bb78 <SGP_Upkeep+0xc8>

  case SGP_STATE_INIT:
    ResetVOCresult();
 800bad4:	f7ff ffe2 	bl	800ba9c <ResetVOCresult>
    SGPState = SGP_STATE_START_MEASUREMENTS;
 800bad8:	4b2a      	ldr	r3, [pc, #168]	@ (800bb84 <SGP_Upkeep+0xd4>)
 800bada:	2201      	movs	r2, #1
 800badc:	701a      	strb	r2, [r3, #0]
    break;
 800bade:	e04b      	b.n	800bb78 <SGP_Upkeep+0xc8>

  case SGP_STATE_START_MEASUREMENTS:
    SGP_StartMeasurement();
 800bae0:	f7ff fb5c 	bl	800b19c <SGP_StartMeasurement>
    SetMeasurementIndicator();
 800bae4:	f001 f914 	bl	800cd10 <SetMeasurementIndicator>
    SGPState = SGP_STATE_WAIT_FOR_COMPLETION;
 800bae8:	4b26      	ldr	r3, [pc, #152]	@ (800bb84 <SGP_Upkeep+0xd4>)
 800baea:	2202      	movs	r2, #2
 800baec:	701a      	strb	r2, [r3, #0]
    break;
 800baee:	e043      	b.n	800bb78 <SGP_Upkeep+0xc8>

  case SGP_STATE_WAIT_FOR_COMPLETION:
    if(SGP_GetMeasurementValues(&vocIndex)) {
 800baf0:	4b28      	ldr	r3, [pc, #160]	@ (800bb94 <SGP_Upkeep+0xe4>)
 800baf2:	0018      	movs	r0, r3
 800baf4:	f7ff fbc2 	bl	800b27c <SGP_GetMeasurementValues>
 800baf8:	1e03      	subs	r3, r0, #0
 800bafa:	d03a      	beq.n	800bb72 <SGP_Upkeep+0xc2>
      SGPState = SGP_STATE_PROCESS_RESULTS;
 800bafc:	4b21      	ldr	r3, [pc, #132]	@ (800bb84 <SGP_Upkeep+0xd4>)
 800bafe:	2203      	movs	r2, #3
 800bb00:	701a      	strb	r2, [r3, #0]
    }
    break;
 800bb02:	e036      	b.n	800bb72 <SGP_Upkeep+0xc2>

  case SGP_STATE_PROCESS_RESULTS:
//    Debug("Processing results in SGP_STATE_PROCESS_RESULTS.");
    setVOC(vocIndex);
 800bb04:	4b23      	ldr	r3, [pc, #140]	@ (800bb94 <SGP_Upkeep+0xe4>)
 800bb06:	681b      	ldr	r3, [r3, #0]
 800bb08:	b29b      	uxth	r3, r3
 800bb0a:	0018      	movs	r0, r3
 800bb0c:	f7f7 ff0a 	bl	8003924 <setVOC>
    SGPState = SGP_WAIT_STATE_MODE;
 800bb10:	4b1c      	ldr	r3, [pc, #112]	@ (800bb84 <SGP_Upkeep+0xd4>)
 800bb12:	2206      	movs	r2, #6
 800bb14:	701a      	strb	r2, [r3, #0]
    break;
 800bb16:	e02f      	b.n	800bb78 <SGP_Upkeep+0xc8>
  case SGP_WAIT_STATE_MODE:
    SGPState = SGP_STATE_WAIT;
 800bb18:	4b1a      	ldr	r3, [pc, #104]	@ (800bb84 <SGP_Upkeep+0xd4>)
 800bb1a:	2207      	movs	r2, #7
 800bb1c:	701a      	strb	r2, [r3, #0]
    if ((sgp40samplecounter == 1) && (!usbPluggedIn)) {
 800bb1e:	4b1e      	ldr	r3, [pc, #120]	@ (800bb98 <SGP_Upkeep+0xe8>)
 800bb20:	781b      	ldrb	r3, [r3, #0]
 800bb22:	2b01      	cmp	r3, #1
 800bb24:	d10b      	bne.n	800bb3e <SGP_Upkeep+0x8e>
 800bb26:	4b1d      	ldr	r3, [pc, #116]	@ (800bb9c <SGP_Upkeep+0xec>)
 800bb28:	781b      	ldrb	r3, [r3, #0]
 800bb2a:	2201      	movs	r2, #1
 800bb2c:	4053      	eors	r3, r2
 800bb2e:	b2db      	uxtb	r3, r3
 800bb30:	2b00      	cmp	r3, #0
 800bb32:	d004      	beq.n	800bb3e <SGP_Upkeep+0x8e>
      // restart the SGP40 with a soft reset to enter idle mode
      SGP_SoftReset();
 800bb34:	f7ff ff96 	bl	800ba64 <SGP_SoftReset>
      SetVOCSensorStatus(false);
 800bb38:	2000      	movs	r0, #0
 800bb3a:	f7fc fad5 	bl	80080e8 <SetVOCSensorStatus>
    }
    SGP40TimeStamp = HAL_GetTick() + 800;  // about every 1 seconds
 800bb3e:	f002 fc93 	bl	800e468 <HAL_GetTick>
 800bb42:	0003      	movs	r3, r0
 800bb44:	22c8      	movs	r2, #200	@ 0xc8
 800bb46:	0092      	lsls	r2, r2, #2
 800bb48:	189a      	adds	r2, r3, r2
 800bb4a:	4b15      	ldr	r3, [pc, #84]	@ (800bba0 <SGP_Upkeep+0xf0>)
 800bb4c:	601a      	str	r2, [r3, #0]
    ResetMeasurementIndicator();
 800bb4e:	f001 f8f7 	bl	800cd40 <ResetMeasurementIndicator>
  break;
 800bb52:	e011      	b.n	800bb78 <SGP_Upkeep+0xc8>
  case SGP_STATE_WAIT:
    if(TimestampIsReached(SGP40TimeStamp)){
 800bb54:	4b12      	ldr	r3, [pc, #72]	@ (800bba0 <SGP_Upkeep+0xf0>)
 800bb56:	681b      	ldr	r3, [r3, #0]
 800bb58:	0018      	movs	r0, r3
 800bb5a:	f001 ffd9 	bl	800db10 <TimestampIsReached>
 800bb5e:	1e03      	subs	r3, r0, #0
 800bb60:	d009      	beq.n	800bb76 <SGP_Upkeep+0xc6>
//      Debug("in SGP_STATE_WAIT");
      SGPState = SGP_STATE_INIT;
 800bb62:	4b08      	ldr	r3, [pc, #32]	@ (800bb84 <SGP_Upkeep+0xd4>)
 800bb64:	2200      	movs	r2, #0
 800bb66:	701a      	strb	r2, [r3, #0]
    }
    break;
 800bb68:	e005      	b.n	800bb76 <SGP_Upkeep+0xc6>

  default:
    // Handle unexpected state
    SGPState = SGP_STATE_INIT;
 800bb6a:	4b06      	ldr	r3, [pc, #24]	@ (800bb84 <SGP_Upkeep+0xd4>)
 800bb6c:	2200      	movs	r2, #0
 800bb6e:	701a      	strb	r2, [r3, #0]
    break;
 800bb70:	e002      	b.n	800bb78 <SGP_Upkeep+0xc8>
    break;
 800bb72:	46c0      	nop			@ (mov r8, r8)
 800bb74:	e000      	b.n	800bb78 <SGP_Upkeep+0xc8>
    break;
 800bb76:	46c0      	nop			@ (mov r8, r8)
  }
  return SGPState;
 800bb78:	4b02      	ldr	r3, [pc, #8]	@ (800bb84 <SGP_Upkeep+0xd4>)
 800bb7a:	781b      	ldrb	r3, [r3, #0]
}
 800bb7c:	0018      	movs	r0, r3
 800bb7e:	46bd      	mov	sp, r7
 800bb80:	bd80      	pop	{r7, pc}
 800bb82:	46c0      	nop			@ (mov r8, r8)
 800bb84:	2000134a 	.word	0x2000134a
 800bb88:	0802493c 	.word	0x0802493c
 800bb8c:	08024298 	.word	0x08024298
 800bb90:	0802415c 	.word	0x0802415c
 800bb94:	20001340 	.word	0x20001340
 800bb98:	2000128a 	.word	0x2000128a
 800bb9c:	200021e5 	.word	0x200021e5
 800bba0:	2000128c 	.word	0x2000128c

0800bba4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800bba4:	b580      	push	{r7, lr}
 800bba6:	b082      	sub	sp, #8
 800bba8:	af00      	add	r7, sp, #0
 800bbaa:	0002      	movs	r2, r0
 800bbac:	1dfb      	adds	r3, r7, #7
 800bbae:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800bbb0:	1dfb      	adds	r3, r7, #7
 800bbb2:	781b      	ldrb	r3, [r3, #0]
 800bbb4:	2b7f      	cmp	r3, #127	@ 0x7f
 800bbb6:	d809      	bhi.n	800bbcc <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800bbb8:	1dfb      	adds	r3, r7, #7
 800bbba:	781b      	ldrb	r3, [r3, #0]
 800bbbc:	001a      	movs	r2, r3
 800bbbe:	231f      	movs	r3, #31
 800bbc0:	401a      	ands	r2, r3
 800bbc2:	4b04      	ldr	r3, [pc, #16]	@ (800bbd4 <__NVIC_EnableIRQ+0x30>)
 800bbc4:	2101      	movs	r1, #1
 800bbc6:	4091      	lsls	r1, r2
 800bbc8:	000a      	movs	r2, r1
 800bbca:	601a      	str	r2, [r3, #0]
  }
}
 800bbcc:	46c0      	nop			@ (mov r8, r8)
 800bbce:	46bd      	mov	sp, r7
 800bbd0:	b002      	add	sp, #8
 800bbd2:	bd80      	pop	{r7, pc}
 800bbd4:	e000e100 	.word	0xe000e100

0800bbd8 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800bbd8:	b580      	push	{r7, lr}
 800bbda:	b082      	sub	sp, #8
 800bbdc:	af00      	add	r7, sp, #0
 800bbde:	0002      	movs	r2, r0
 800bbe0:	1dfb      	adds	r3, r7, #7
 800bbe2:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800bbe4:	1dfb      	adds	r3, r7, #7
 800bbe6:	781b      	ldrb	r3, [r3, #0]
 800bbe8:	2b7f      	cmp	r3, #127	@ 0x7f
 800bbea:	d810      	bhi.n	800bc0e <__NVIC_DisableIRQ+0x36>
  {
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800bbec:	1dfb      	adds	r3, r7, #7
 800bbee:	781b      	ldrb	r3, [r3, #0]
 800bbf0:	001a      	movs	r2, r3
 800bbf2:	231f      	movs	r3, #31
 800bbf4:	4013      	ands	r3, r2
 800bbf6:	4908      	ldr	r1, [pc, #32]	@ (800bc18 <__NVIC_DisableIRQ+0x40>)
 800bbf8:	2201      	movs	r2, #1
 800bbfa:	409a      	lsls	r2, r3
 800bbfc:	0013      	movs	r3, r2
 800bbfe:	2280      	movs	r2, #128	@ 0x80
 800bc00:	508b      	str	r3, [r1, r2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800bc02:	f3bf 8f4f 	dsb	sy
}
 800bc06:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("isb 0xF":::"memory");
 800bc08:	f3bf 8f6f 	isb	sy
}
 800bc0c:	46c0      	nop			@ (mov r8, r8)
    __DSB();
    __ISB();
  }
}
 800bc0e:	46c0      	nop			@ (mov r8, r8)
 800bc10:	46bd      	mov	sp, r7
 800bc12:	b002      	add	sp, #8
 800bc14:	bd80      	pop	{r7, pc}
 800bc16:	46c0      	nop			@ (mov r8, r8)
 800bc18:	e000e100 	.word	0xe000e100

0800bc1c <getSoundData>:
// Note that disabling the interrupt prevents the possibility of corrupted data
// but does not (under non-error conditions) cause loss of sound data because the
// DMA buffer is still being filled with I2S data.
// Return false if no data available.
bool getSoundData(SoundData_t * data, bool getSPLdata, bool getMaxAmpData)
{
 800bc1c:	b5b0      	push	{r4, r5, r7, lr}
 800bc1e:	b088      	sub	sp, #32
 800bc20:	af02      	add	r7, sp, #8
 800bc22:	6078      	str	r0, [r7, #4]
 800bc24:	0008      	movs	r0, r1
 800bc26:	0011      	movs	r1, r2
 800bc28:	1cfb      	adds	r3, r7, #3
 800bc2a:	1c02      	adds	r2, r0, #0
 800bc2c:	701a      	strb	r2, [r3, #0]
 800bc2e:	1cbb      	adds	r3, r7, #2
 800bc30:	1c0a      	adds	r2, r1, #0
 800bc32:	701a      	strb	r2, [r3, #0]
//	print("micEnabled:  %d, SPLcalcComplete: %d\r\n", micEnabled, SPLcalcComplete);
  if ((!micEnabled) || (!SPLcalcComplete))
 800bc34:	4b5b      	ldr	r3, [pc, #364]	@ (800bda4 <getSoundData+0x188>)
 800bc36:	781b      	ldrb	r3, [r3, #0]
 800bc38:	b2db      	uxtb	r3, r3
 800bc3a:	2201      	movs	r2, #1
 800bc3c:	4053      	eors	r3, r2
 800bc3e:	b2db      	uxtb	r3, r3
 800bc40:	2b00      	cmp	r3, #0
 800bc42:	d107      	bne.n	800bc54 <getSoundData+0x38>
 800bc44:	4b58      	ldr	r3, [pc, #352]	@ (800bda8 <getSoundData+0x18c>)
 800bc46:	781b      	ldrb	r3, [r3, #0]
 800bc48:	b2db      	uxtb	r3, r3
 800bc4a:	2201      	movs	r2, #1
 800bc4c:	4053      	eors	r3, r2
 800bc4e:	b2db      	uxtb	r3, r3
 800bc50:	2b00      	cmp	r3, #0
 800bc52:	d001      	beq.n	800bc58 <getSoundData+0x3c>
    {
        return false;
 800bc54:	2300      	movs	r3, #0
 800bc56:	e0a0      	b.n	800bd9a <getSoundData+0x17e>
    }
//	Info("getSoundData: DMAinterruptEnabled: %d\r\n", DMAinterruptEnabled);
    if (DMAinterruptEnabled)
 800bc58:	4b54      	ldr	r3, [pc, #336]	@ (800bdac <getSoundData+0x190>)
 800bc5a:	781b      	ldrb	r3, [r3, #0]
 800bc5c:	b2db      	uxtb	r3, r3
 800bc5e:	2b00      	cmp	r3, #0
 800bc60:	d005      	beq.n	800bc6e <getSoundData+0x52>
    {
        NVIC_DisableIRQ(DMA_Channel_IRQn);
 800bc62:	4b53      	ldr	r3, [pc, #332]	@ (800bdb0 <getSoundData+0x194>)
 800bc64:	781b      	ldrb	r3, [r3, #0]
 800bc66:	b25b      	sxtb	r3, r3
 800bc68:	0018      	movs	r0, r3
 800bc6a:	f7ff ffb5 	bl	800bbd8 <__NVIC_DisableIRQ>
  __ASM volatile ("dsb 0xF":::"memory");
 800bc6e:	f3bf 8f4f 	dsb	sy
}
 800bc72:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("isb 0xF":::"memory");
 800bc74:	f3bf 8f6f 	isb	sy
}
 800bc78:	46c0      	nop			@ (mov r8, r8)
    __DSB();
    __ISB();
    // At this point, we know that no DMA ISR is in progress and that it will
    // not trigger until re-enabled.

    if (getSPLdata)
 800bc7a:	1cfb      	adds	r3, r7, #3
 800bc7c:	781b      	ldrb	r3, [r3, #0]
 800bc7e:	2b00      	cmp	r3, #0
 800bc80:	d04c      	beq.n	800bd1c <getSoundData+0x100>
    {
        if (spl_sum_count == 0)
 800bc82:	4b4c      	ldr	r3, [pc, #304]	@ (800bdb4 <getSoundData+0x198>)
 800bc84:	681b      	ldr	r3, [r3, #0]
 800bc86:	2b00      	cmp	r3, #0
 800bc88:	d11b      	bne.n	800bcc2 <getSoundData+0xa6>
        {
            // No data: prevent divide by zero
            data->SPL_dBA_int = 0;
 800bc8a:	687b      	ldr	r3, [r7, #4]
 800bc8c:	2200      	movs	r2, #0
 800bc8e:	701a      	strb	r2, [r3, #0]
            data->SPL_dBA_fr_1dp = 0;
 800bc90:	687b      	ldr	r3, [r7, #4]
 800bc92:	2200      	movs	r2, #0
 800bc94:	705a      	strb	r2, [r3, #1]
            for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 800bc96:	2300      	movs	r3, #0
 800bc98:	617b      	str	r3, [r7, #20]
 800bc9a:	e00e      	b.n	800bcba <getSoundData+0x9e>
            {
                data->SPL_bands_dB_int[i] = 0;
 800bc9c:	687a      	ldr	r2, [r7, #4]
 800bc9e:	697b      	ldr	r3, [r7, #20]
 800bca0:	18d3      	adds	r3, r2, r3
 800bca2:	3302      	adds	r3, #2
 800bca4:	2200      	movs	r2, #0
 800bca6:	701a      	strb	r2, [r3, #0]
                data->SPL_bands_dB_fr_1dp[i] = 0;
 800bca8:	687a      	ldr	r2, [r7, #4]
 800bcaa:	697b      	ldr	r3, [r7, #20]
 800bcac:	18d3      	adds	r3, r2, r3
 800bcae:	3308      	adds	r3, #8
 800bcb0:	2200      	movs	r2, #0
 800bcb2:	701a      	strb	r2, [r3, #0]
            for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 800bcb4:	697b      	ldr	r3, [r7, #20]
 800bcb6:	3301      	adds	r3, #1
 800bcb8:	617b      	str	r3, [r7, #20]
 800bcba:	697b      	ldr	r3, [r7, #20]
 800bcbc:	2b05      	cmp	r3, #5
 800bcbe:	d9ed      	bls.n	800bc9c <getSoundData+0x80>
 800bcc0:	e02c      	b.n	800bd1c <getSoundData+0x100>
            }
        }
        else
        {
            sumToIntAverage(&(data->SPL_dBA_int), &(data->SPL_dBA_fr_1dp),
 800bcc2:	6878      	ldr	r0, [r7, #4]
 800bcc4:	687b      	ldr	r3, [r7, #4]
 800bcc6:	1c59      	adds	r1, r3, #1
 800bcc8:	4b3b      	ldr	r3, [pc, #236]	@ (800bdb8 <getSoundData+0x19c>)
 800bcca:	681a      	ldr	r2, [r3, #0]
 800bccc:	4b3b      	ldr	r3, [pc, #236]	@ (800bdbc <getSoundData+0x1a0>)
 800bcce:	681c      	ldr	r4, [r3, #0]
 800bcd0:	4b38      	ldr	r3, [pc, #224]	@ (800bdb4 <getSoundData+0x198>)
 800bcd2:	681b      	ldr	r3, [r3, #0]
 800bcd4:	9300      	str	r3, [sp, #0]
 800bcd6:	0023      	movs	r3, r4
 800bcd8:	f000 fde8 	bl	800c8ac <sumToIntAverage>
                            spl_int_sum, spl_frac1dp_sum, spl_sum_count);

            for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 800bcdc:	2300      	movs	r3, #0
 800bcde:	613b      	str	r3, [r7, #16]
 800bce0:	e019      	b.n	800bd16 <getSoundData+0xfa>
            {
                sumToIntAverage(&(data->SPL_bands_dB_int[i]),
 800bce2:	687a      	ldr	r2, [r7, #4]
 800bce4:	693b      	ldr	r3, [r7, #16]
 800bce6:	18d3      	adds	r3, r2, r3
 800bce8:	1c98      	adds	r0, r3, #2
 800bcea:	693b      	ldr	r3, [r7, #16]
 800bcec:	3308      	adds	r3, #8
 800bcee:	687a      	ldr	r2, [r7, #4]
 800bcf0:	18d1      	adds	r1, r2, r3
                                &(data->SPL_bands_dB_fr_1dp[i]), band_spl_int_sum[i],
 800bcf2:	4b33      	ldr	r3, [pc, #204]	@ (800bdc0 <getSoundData+0x1a4>)
 800bcf4:	693a      	ldr	r2, [r7, #16]
 800bcf6:	0092      	lsls	r2, r2, #2
 800bcf8:	58d4      	ldr	r4, [r2, r3]
                                band_spl_frac1dp_sum[i], spl_sum_count);
 800bcfa:	4b32      	ldr	r3, [pc, #200]	@ (800bdc4 <getSoundData+0x1a8>)
 800bcfc:	693a      	ldr	r2, [r7, #16]
 800bcfe:	0092      	lsls	r2, r2, #2
 800bd00:	58d2      	ldr	r2, [r2, r3]
                sumToIntAverage(&(data->SPL_bands_dB_int[i]),
 800bd02:	4b2c      	ldr	r3, [pc, #176]	@ (800bdb4 <getSoundData+0x198>)
 800bd04:	681b      	ldr	r3, [r3, #0]
 800bd06:	9300      	str	r3, [sp, #0]
 800bd08:	0013      	movs	r3, r2
 800bd0a:	0022      	movs	r2, r4
 800bd0c:	f000 fdce 	bl	800c8ac <sumToIntAverage>
            for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 800bd10:	693b      	ldr	r3, [r7, #16]
 800bd12:	3301      	adds	r3, #1
 800bd14:	613b      	str	r3, [r7, #16]
 800bd16:	693b      	ldr	r3, [r7, #16]
 800bd18:	2b05      	cmp	r3, #5
 800bd1a:	d9e2      	bls.n	800bce2 <getSoundData+0xc6>
            }
        }
    }

    if (getMaxAmpData)
 800bd1c:	1cbb      	adds	r3, r7, #2
 800bd1e:	781b      	ldrb	r3, [r3, #0]
 800bd20:	2b00      	cmp	r3, #0
 800bd22:	d028      	beq.n	800bd76 <getSoundData+0x15a>
    {
        uint16_t intPart = 0;
 800bd24:	240e      	movs	r4, #14
 800bd26:	193b      	adds	r3, r7, r4
 800bd28:	2200      	movs	r2, #0
 800bd2a:	801a      	strh	r2, [r3, #0]
        uint8_t fracPart = 0;
 800bd2c:	250d      	movs	r5, #13
 800bd2e:	197b      	adds	r3, r7, r5
 800bd30:	2200      	movs	r2, #0
 800bd32:	701a      	strb	r2, [r3, #0]
        amplitudeDN_to_mPa(maximumAmplitude, ik_mPa, &intPart, &fracPart);
 800bd34:	4b24      	ldr	r3, [pc, #144]	@ (800bdc8 <getSoundData+0x1ac>)
 800bd36:	6818      	ldr	r0, [r3, #0]
 800bd38:	4924      	ldr	r1, [pc, #144]	@ (800bdcc <getSoundData+0x1b0>)
 800bd3a:	197b      	adds	r3, r7, r5
 800bd3c:	193a      	adds	r2, r7, r4
 800bd3e:	f000 fe59 	bl	800c9f4 <amplitudeDN_to_mPa>
        data->peak_amp_mPa_int = intPart;
 800bd42:	193b      	adds	r3, r7, r4
 800bd44:	881a      	ldrh	r2, [r3, #0]
 800bd46:	687b      	ldr	r3, [r7, #4]
 800bd48:	21ff      	movs	r1, #255	@ 0xff
 800bd4a:	4011      	ands	r1, r2
 800bd4c:	000c      	movs	r4, r1
 800bd4e:	7b99      	ldrb	r1, [r3, #14]
 800bd50:	2000      	movs	r0, #0
 800bd52:	4001      	ands	r1, r0
 800bd54:	1c08      	adds	r0, r1, #0
 800bd56:	1c21      	adds	r1, r4, #0
 800bd58:	4301      	orrs	r1, r0
 800bd5a:	7399      	strb	r1, [r3, #14]
 800bd5c:	0a12      	lsrs	r2, r2, #8
 800bd5e:	b290      	uxth	r0, r2
 800bd60:	7bda      	ldrb	r2, [r3, #15]
 800bd62:	2100      	movs	r1, #0
 800bd64:	400a      	ands	r2, r1
 800bd66:	1c11      	adds	r1, r2, #0
 800bd68:	1c02      	adds	r2, r0, #0
 800bd6a:	430a      	orrs	r2, r1
 800bd6c:	73da      	strb	r2, [r3, #15]
        data->peak_amp_mPa_fr_2dp = fracPart;
 800bd6e:	197b      	adds	r3, r7, r5
 800bd70:	781a      	ldrb	r2, [r3, #0]
 800bd72:	687b      	ldr	r3, [r7, #4]
 800bd74:	741a      	strb	r2, [r3, #16]
    }

    data->stable = micSettlingComplete();
 800bd76:	f000 f86f 	bl	800be58 <micSettlingComplete>
 800bd7a:	0003      	movs	r3, r0
 800bd7c:	001a      	movs	r2, r3
 800bd7e:	687b      	ldr	r3, [r7, #4]
 800bd80:	745a      	strb	r2, [r3, #17]

    if (DMAinterruptEnabled)
 800bd82:	4b0a      	ldr	r3, [pc, #40]	@ (800bdac <getSoundData+0x190>)
 800bd84:	781b      	ldrb	r3, [r3, #0]
 800bd86:	b2db      	uxtb	r3, r3
 800bd88:	2b00      	cmp	r3, #0
 800bd8a:	d005      	beq.n	800bd98 <getSoundData+0x17c>
    {
        NVIC_EnableIRQ(DMA_Channel_IRQn);
 800bd8c:	4b08      	ldr	r3, [pc, #32]	@ (800bdb0 <getSoundData+0x194>)
 800bd8e:	781b      	ldrb	r3, [r3, #0]
 800bd90:	b25b      	sxtb	r3, r3
 800bd92:	0018      	movs	r0, r3
 800bd94:	f7ff ff06 	bl	800bba4 <__NVIC_EnableIRQ>
    }
    // NOTE that any pending DMA interrupt will now fire, but will
    // take ~2 cycles to start
    return true;
 800bd98:	2301      	movs	r3, #1
}
 800bd9a:	0018      	movs	r0, r3
 800bd9c:	46bd      	mov	sp, r7
 800bd9e:	b006      	add	sp, #24
 800bda0:	bdb0      	pop	{r4, r5, r7, pc}
 800bda2:	46c0      	nop			@ (mov r8, r8)
 800bda4:	2000134c 	.word	0x2000134c
 800bda8:	2000134f 	.word	0x2000134f
 800bdac:	2000134e 	.word	0x2000134e
 800bdb0:	20001d9c 	.word	0x20001d9c
 800bdb4:	20001dd8 	.word	0x20001dd8
 800bdb8:	20001da0 	.word	0x20001da0
 800bdbc:	20001da4 	.word	0x20001da4
 800bdc0:	20001da8 	.word	0x20001da8
 800bdc4:	20001dc0 	.word	0x20001dc0
 800bdc8:	20001354 	.word	0x20001354
 800bdcc:	3b5c7333 	.word	0x3b5c7333

0800bdd0 <soundInit>:
//               bool (*tmrInit)(TIM_HandleTypeDef **), IRQn_Type DMAChIRQn)
bool soundInit(DMA_HandleTypeDef* h_hdma_spi2_rx,
               I2S_HandleTypeDef* h_hi2s2,
               TIM_HandleTypeDef* h_htim6,
               IRQn_Type DMAChIRQn)
{
 800bdd0:	b580      	push	{r7, lr}
 800bdd2:	b084      	sub	sp, #16
 800bdd4:	af00      	add	r7, sp, #0
 800bdd6:	60f8      	str	r0, [r7, #12]
 800bdd8:	60b9      	str	r1, [r7, #8]
 800bdda:	607a      	str	r2, [r7, #4]
 800bddc:	001a      	movs	r2, r3
 800bdde:	1cfb      	adds	r3, r7, #3
 800bde0:	701a      	strb	r2, [r3, #0]
    hi2s2 = h_hi2s2;
 800bde2:	4b09      	ldr	r3, [pc, #36]	@ (800be08 <soundInit+0x38>)
 800bde4:	68ba      	ldr	r2, [r7, #8]
 800bde6:	601a      	str	r2, [r3, #0]
    htim6 = h_htim6;
 800bde8:	4b08      	ldr	r3, [pc, #32]	@ (800be0c <soundInit+0x3c>)
 800bdea:	687a      	ldr	r2, [r7, #4]
 800bdec:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx = h_hdma_spi2_rx;
 800bdee:	4b08      	ldr	r3, [pc, #32]	@ (800be10 <soundInit+0x40>)
 800bdf0:	68fa      	ldr	r2, [r7, #12]
 800bdf2:	601a      	str	r2, [r3, #0]
    DMA_Channel_IRQn = DMA_Channel_IRQn;
 800bdf4:	4b07      	ldr	r3, [pc, #28]	@ (800be14 <soundInit+0x44>)
 800bdf6:	2200      	movs	r2, #0
 800bdf8:	569a      	ldrsb	r2, [r3, r2]
 800bdfa:	4b06      	ldr	r3, [pc, #24]	@ (800be14 <soundInit+0x44>)
 800bdfc:	701a      	strb	r2, [r3, #0]

    return true;
 800bdfe:	2301      	movs	r3, #1
}
 800be00:	0018      	movs	r0, r3
 800be02:	46bd      	mov	sp, r7
 800be04:	b004      	add	sp, #16
 800be06:	bd80      	pop	{r7, pc}
 800be08:	20001d94 	.word	0x20001d94
 800be0c:	20001d90 	.word	0x20001d90
 800be10:	20001d98 	.word	0x20001d98
 800be14:	20001d9c 	.word	0x20001d9c

0800be18 <clearMaximumAmplitude>:

// Call this from external code to clear the maximum amplitude value.
void clearMaximumAmplitude(void)
{
 800be18:	b580      	push	{r7, lr}
 800be1a:	af00      	add	r7, sp, #0
    maximumAmplitude = 0;
 800be1c:	4b02      	ldr	r3, [pc, #8]	@ (800be28 <clearMaximumAmplitude+0x10>)
 800be1e:	2200      	movs	r2, #0
 800be20:	601a      	str	r2, [r3, #0]
}
 800be22:	46c0      	nop			@ (mov r8, r8)
 800be24:	46bd      	mov	sp, r7
 800be26:	bd80      	pop	{r7, pc}
 800be28:	20001354 	.word	0x20001354

0800be2c <startMicSettlingPeriod>:
// Prepare a one-shot timer to indicate the short time period during which the
// microphone output is inaccurate after power-on (warmup/settling time).
// This is output with the data for advice only: all functions still operate as
// normal during this period.
static bool startMicSettlingPeriod(void)
{
 800be2c:	b580      	push	{r7, lr}
 800be2e:	af00      	add	r7, sp, #0
//  Debug("TMR6 started\r\n");
//  if (htim6 == NULL) {
//    print("htim6 == NULL");
//  }
  __HAL_TIM_SetCounter(htim6, 0);
 800be30:	4b08      	ldr	r3, [pc, #32]	@ (800be54 <startMicSettlingPeriod+0x28>)
 800be32:	681b      	ldr	r3, [r3, #0]
 800be34:	681b      	ldr	r3, [r3, #0]
 800be36:	2200      	movs	r2, #0
 800be38:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_TIM_Base_Start(htim6) != HAL_OK)
 800be3a:	4b06      	ldr	r3, [pc, #24]	@ (800be54 <startMicSettlingPeriod+0x28>)
 800be3c:	681b      	ldr	r3, [r3, #0]
 800be3e:	0018      	movs	r0, r3
 800be40:	f00a f8c0 	bl	8015fc4 <HAL_TIM_Base_Start>
 800be44:	1e03      	subs	r3, r0, #0
 800be46:	d001      	beq.n	800be4c <startMicSettlingPeriod+0x20>
    {
        return false;
 800be48:	2300      	movs	r3, #0
 800be4a:	e000      	b.n	800be4e <startMicSettlingPeriod+0x22>
    }
    return true;
 800be4c:	2301      	movs	r3, #1
}
 800be4e:	0018      	movs	r0, r3
 800be50:	46bd      	mov	sp, r7
 800be52:	bd80      	pop	{r7, pc}
 800be54:	20001d90 	.word	0x20001d90

0800be58 <micSettlingComplete>:

// See whether the warmup/settling time has finished
bool micSettlingComplete(void)
{
 800be58:	b580      	push	{r7, lr}
 800be5a:	b082      	sub	sp, #8
 800be5c:	af00      	add	r7, sp, #0
//   print("Checking micSettlingComplete\r\n");
    bool complete = __HAL_TIM_GET_FLAG(htim6, TIM_SR_UIF);
 800be5e:	4b0e      	ldr	r3, [pc, #56]	@ (800be98 <micSettlingComplete+0x40>)
 800be60:	681b      	ldr	r3, [r3, #0]
 800be62:	681b      	ldr	r3, [r3, #0]
 800be64:	691b      	ldr	r3, [r3, #16]
 800be66:	2201      	movs	r2, #1
 800be68:	401a      	ands	r2, r3
 800be6a:	1dfb      	adds	r3, r7, #7
 800be6c:	3a01      	subs	r2, #1
 800be6e:	4251      	negs	r1, r2
 800be70:	414a      	adcs	r2, r1
 800be72:	701a      	strb	r2, [r3, #0]
    if (complete)
 800be74:	1dfb      	adds	r3, r7, #7
 800be76:	781b      	ldrb	r3, [r3, #0]
 800be78:	2b00      	cmp	r3, #0
 800be7a:	d007      	beq.n	800be8c <micSettlingComplete+0x34>
    {
//      Debug("TMR6 expired\r\n");
      HAL_TIM_Base_Stop(htim6);
 800be7c:	4b06      	ldr	r3, [pc, #24]	@ (800be98 <micSettlingComplete+0x40>)
 800be7e:	681b      	ldr	r3, [r3, #0]
 800be80:	0018      	movs	r0, r3
 800be82:	f00a f8e9 	bl	8016058 <HAL_TIM_Base_Stop>
      DataReady = true;
 800be86:	4b05      	ldr	r3, [pc, #20]	@ (800be9c <micSettlingComplete+0x44>)
 800be88:	2201      	movs	r2, #1
 800be8a:	701a      	strb	r2, [r3, #0]
//      Info("micSettlingComplete set DataReady to true");
    }
    return complete;
 800be8c:	1dfb      	adds	r3, r7, #7
 800be8e:	781b      	ldrb	r3, [r3, #0]
}
 800be90:	0018      	movs	r0, r3
 800be92:	46bd      	mov	sp, r7
 800be94:	b002      	add	sp, #8
 800be96:	bd80      	pop	{r7, pc}
 800be98:	20001d90 	.word	0x20001d90
 800be9c:	2000134b 	.word	0x2000134b

0800bea0 <enableMicrophone>:

// Enable: starts the I2S clock, warmup timer, and DMA interrupts
// Disable: stops the DMA interrupts and stops I2S clock.
// Return false on failure.
bool enableMicrophone(bool bEnable)
{
 800bea0:	b580      	push	{r7, lr}
 800bea2:	b082      	sub	sp, #8
 800bea4:	af00      	add	r7, sp, #0
 800bea6:	0002      	movs	r2, r0
 800bea8:	1dfb      	adds	r3, r7, #7
 800beaa:	701a      	strb	r2, [r3, #0]
    if (bEnable == micEnabled)
 800beac:	4b29      	ldr	r3, [pc, #164]	@ (800bf54 <enableMicrophone+0xb4>)
 800beae:	781b      	ldrb	r3, [r3, #0]
 800beb0:	b2db      	uxtb	r3, r3
 800beb2:	1dfa      	adds	r2, r7, #7
 800beb4:	7812      	ldrb	r2, [r2, #0]
 800beb6:	429a      	cmp	r2, r3
 800beb8:	d101      	bne.n	800bebe <enableMicrophone+0x1e>
    {
        return true;
 800beba:	2301      	movs	r3, #1
 800bebc:	e045      	b.n	800bf4a <enableMicrophone+0xaa>
    }
    if (bEnable)
 800bebe:	1dfb      	adds	r3, r7, #7
 800bec0:	781b      	ldrb	r3, [r3, #0]
 800bec2:	2b00      	cmp	r3, #0
 800bec4:	d025      	beq.n	800bf12 <enableMicrophone+0x72>
    {
        startMicSettlingPeriod();
 800bec6:	f7ff ffb1 	bl	800be2c <startMicSettlingPeriod>
        if (HAL_I2S_Receive_DMA(hi2s2, (uint16_t *) dmaBuffer, HALF_BUFLEN) != HAL_OK)
 800beca:	4b23      	ldr	r3, [pc, #140]	@ (800bf58 <enableMicrophone+0xb8>)
 800becc:	681b      	ldr	r3, [r3, #0]
 800bece:	2280      	movs	r2, #128	@ 0x80
 800bed0:	0092      	lsls	r2, r2, #2
 800bed2:	4922      	ldr	r1, [pc, #136]	@ (800bf5c <enableMicrophone+0xbc>)
 800bed4:	0018      	movs	r0, r3
 800bed6:	f006 faf5 	bl	80124c4 <HAL_I2S_Receive_DMA>
 800beda:	1e03      	subs	r3, r0, #0
 800bedc:	d001      	beq.n	800bee2 <enableMicrophone+0x42>
        {
            return false;
 800bede:	2300      	movs	r3, #0
 800bee0:	e033      	b.n	800bf4a <enableMicrophone+0xaa>
        }
        clearMaximumAmplitude();
 800bee2:	f7ff ff99 	bl	800be18 <clearMaximumAmplitude>
        amplitudeSettlingPeriods = 0;
 800bee6:	4b1e      	ldr	r3, [pc, #120]	@ (800bf60 <enableMicrophone+0xc0>)
 800bee8:	2200      	movs	r2, #0
 800beea:	601a      	str	r2, [r3, #0]
        NVIC_EnableIRQ(DMA_Channel_IRQn);
 800beec:	4b1d      	ldr	r3, [pc, #116]	@ (800bf64 <enableMicrophone+0xc4>)
 800beee:	781b      	ldrb	r3, [r3, #0]
 800bef0:	b25b      	sxtb	r3, r3
 800bef2:	0018      	movs	r0, r3
 800bef4:	f7ff fe56 	bl	800bba4 <__NVIC_EnableIRQ>
        DMAinterruptEnabled = true;
 800bef8:	4b1b      	ldr	r3, [pc, #108]	@ (800bf68 <enableMicrophone+0xc8>)
 800befa:	2201      	movs	r2, #1
 800befc:	701a      	strb	r2, [r3, #0]
        micEnabled = true;
 800befe:	4b15      	ldr	r3, [pc, #84]	@ (800bf54 <enableMicrophone+0xb4>)
 800bf00:	2201      	movs	r2, #1
 800bf02:	701a      	strb	r2, [r3, #0]
        SPLcalcEnabled = false;
 800bf04:	4b19      	ldr	r3, [pc, #100]	@ (800bf6c <enableMicrophone+0xcc>)
 800bf06:	2200      	movs	r2, #0
 800bf08:	701a      	strb	r2, [r3, #0]
        SPLcalcComplete = false;
 800bf0a:	4b19      	ldr	r3, [pc, #100]	@ (800bf70 <enableMicrophone+0xd0>)
 800bf0c:	2200      	movs	r2, #0
 800bf0e:	701a      	strb	r2, [r3, #0]
 800bf10:	e01a      	b.n	800bf48 <enableMicrophone+0xa8>
    }
    else
    {
        NVIC_DisableIRQ(DMA_Channel_IRQn);
 800bf12:	4b14      	ldr	r3, [pc, #80]	@ (800bf64 <enableMicrophone+0xc4>)
 800bf14:	781b      	ldrb	r3, [r3, #0]
 800bf16:	b25b      	sxtb	r3, r3
 800bf18:	0018      	movs	r0, r3
 800bf1a:	f7ff fe5d 	bl	800bbd8 <__NVIC_DisableIRQ>
        DMAinterruptEnabled = false;
 800bf1e:	4b12      	ldr	r3, [pc, #72]	@ (800bf68 <enableMicrophone+0xc8>)
 800bf20:	2200      	movs	r2, #0
 800bf22:	701a      	strb	r2, [r3, #0]
        SPLcalcEnabled = false;
 800bf24:	4b11      	ldr	r3, [pc, #68]	@ (800bf6c <enableMicrophone+0xcc>)
 800bf26:	2200      	movs	r2, #0
 800bf28:	701a      	strb	r2, [r3, #0]
        SPLcalcComplete = false;
 800bf2a:	4b11      	ldr	r3, [pc, #68]	@ (800bf70 <enableMicrophone+0xd0>)
 800bf2c:	2200      	movs	r2, #0
 800bf2e:	701a      	strb	r2, [r3, #0]
        if (HAL_I2S_DMAStop(hi2s2) != HAL_OK)
 800bf30:	4b09      	ldr	r3, [pc, #36]	@ (800bf58 <enableMicrophone+0xb8>)
 800bf32:	681b      	ldr	r3, [r3, #0]
 800bf34:	0018      	movs	r0, r3
 800bf36:	f006 fb87 	bl	8012648 <HAL_I2S_DMAStop>
 800bf3a:	1e03      	subs	r3, r0, #0
 800bf3c:	d001      	beq.n	800bf42 <enableMicrophone+0xa2>
        {
            return false;
 800bf3e:	2300      	movs	r3, #0
 800bf40:	e003      	b.n	800bf4a <enableMicrophone+0xaa>
        }
        micEnabled = false;
 800bf42:	4b04      	ldr	r3, [pc, #16]	@ (800bf54 <enableMicrophone+0xb4>)
 800bf44:	2200      	movs	r2, #0
 800bf46:	701a      	strb	r2, [r3, #0]
    }
    return true;
 800bf48:	2301      	movs	r3, #1
}
 800bf4a:	0018      	movs	r0, r3
 800bf4c:	46bd      	mov	sp, r7
 800bf4e:	b002      	add	sp, #8
 800bf50:	bd80      	pop	{r7, pc}
 800bf52:	46c0      	nop			@ (mov r8, r8)
 800bf54:	2000134c 	.word	0x2000134c
 800bf58:	20001d94 	.word	0x20001d94
 800bf5c:	20001390 	.word	0x20001390
 800bf60:	20001350 	.word	0x20001350
 800bf64:	20001d9c 	.word	0x20001d9c
 800bf68:	2000134e 	.word	0x2000134e
 800bf6c:	2000134d 	.word	0x2000134d
 800bf70:	2000134f 	.word	0x2000134f

0800bf74 <startSPLcalculation>:

// The microphone/I2S/DMA is already running: start the
// conversion of I2S data to SPL.
// Return false if microphone is not enabled (fail).
bool startSPLcalculation(void)
{
 800bf74:	b580      	push	{r7, lr}
 800bf76:	af00      	add	r7, sp, #0
    if (!micEnabled)
 800bf78:	4b0c      	ldr	r3, [pc, #48]	@ (800bfac <startSPLcalculation+0x38>)
 800bf7a:	781b      	ldrb	r3, [r3, #0]
 800bf7c:	b2db      	uxtb	r3, r3
 800bf7e:	2201      	movs	r2, #1
 800bf80:	4053      	eors	r3, r2
 800bf82:	b2db      	uxtb	r3, r3
 800bf84:	2b00      	cmp	r3, #0
 800bf86:	d001      	beq.n	800bf8c <startSPLcalculation+0x18>
    {
        return false;
 800bf88:	2300      	movs	r3, #0
 800bf8a:	e00c      	b.n	800bfa6 <startSPLcalculation+0x32>
    }
    if (SPLcalcEnabled)
 800bf8c:	4b08      	ldr	r3, [pc, #32]	@ (800bfb0 <startSPLcalculation+0x3c>)
 800bf8e:	781b      	ldrb	r3, [r3, #0]
 800bf90:	b2db      	uxtb	r3, r3
 800bf92:	2b00      	cmp	r3, #0
 800bf94:	d001      	beq.n	800bf9a <startSPLcalculation+0x26>
    {
        return true;
 800bf96:	2301      	movs	r3, #1
 800bf98:	e005      	b.n	800bfa6 <startSPLcalculation+0x32>
    }
    resetSPLstate();
 800bf9a:	f000 fb63 	bl	800c664 <resetSPLstate>
    SPLcalcEnabled = true;
 800bf9e:	4b04      	ldr	r3, [pc, #16]	@ (800bfb0 <startSPLcalculation+0x3c>)
 800bfa0:	2201      	movs	r2, #1
 800bfa2:	701a      	strb	r2, [r3, #0]
    return true;
 800bfa4:	2301      	movs	r3, #1
}
 800bfa6:	0018      	movs	r0, r3
 800bfa8:	46bd      	mov	sp, r7
 800bfaa:	bd80      	pop	{r7, pc}
 800bfac:	2000134c 	.word	0x2000134c
 800bfb0:	2000134d 	.word	0x2000134d

0800bfb4 <HAL_I2S_RxHalfCpltCallback>:

// Called from the DMA ISR when the first half of the DMA buffer is full,
// i.e. "HALF_BUFLEN" uint16s are in the first half of dmaBuffer
void HAL_I2S_RxHalfCpltCallback(I2S_HandleTypeDef *hi2s2loc)
{
 800bfb4:	b580      	push	{r7, lr}
 800bfb6:	b082      	sub	sp, #8
 800bfb8:	af00      	add	r7, sp, #0
 800bfba:	6078      	str	r0, [r7, #4]
  if (hi2s2loc == hi2s2) {
 800bfbc:	4b05      	ldr	r3, [pc, #20]	@ (800bfd4 <HAL_I2S_RxHalfCpltCallback+0x20>)
 800bfbe:	681b      	ldr	r3, [r3, #0]
 800bfc0:	687a      	ldr	r2, [r7, #4]
 800bfc2:	429a      	cmp	r2, r3
 800bfc4:	d102      	bne.n	800bfcc <HAL_I2S_RxHalfCpltCallback+0x18>
    UNUSED(hi2s2);
    processHalfDMAbuffer(0);
 800bfc6:	2000      	movs	r0, #0
 800bfc8:	f000 f81a 	bl	800c000 <processHalfDMAbuffer>
  }
}
 800bfcc:	46c0      	nop			@ (mov r8, r8)
 800bfce:	46bd      	mov	sp, r7
 800bfd0:	b002      	add	sp, #8
 800bfd2:	bd80      	pop	{r7, pc}
 800bfd4:	20001d94 	.word	0x20001d94

0800bfd8 <HAL_I2S_RxCpltCallback>:

// Called from the DMA ISR when the second half of the DMA buffer is full,
// i.e. "HALF_BUFLEN" uint16s are in the second half of dmaBuffer
void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s2loc)
{
 800bfd8:	b580      	push	{r7, lr}
 800bfda:	b082      	sub	sp, #8
 800bfdc:	af00      	add	r7, sp, #0
 800bfde:	6078      	str	r0, [r7, #4]
  if (hi2s2loc == hi2s2) {
 800bfe0:	4b06      	ldr	r3, [pc, #24]	@ (800bffc <HAL_I2S_RxCpltCallback+0x24>)
 800bfe2:	681b      	ldr	r3, [r3, #0]
 800bfe4:	687a      	ldr	r2, [r7, #4]
 800bfe6:	429a      	cmp	r2, r3
 800bfe8:	d104      	bne.n	800bff4 <HAL_I2S_RxCpltCallback+0x1c>
    UNUSED(hi2s2);
    processHalfDMAbuffer(HALF_BUFLEN);
 800bfea:	2380      	movs	r3, #128	@ 0x80
 800bfec:	009b      	lsls	r3, r3, #2
 800bfee:	0018      	movs	r0, r3
 800bff0:	f000 f806 	bl	800c000 <processHalfDMAbuffer>
  }
}
 800bff4:	46c0      	nop			@ (mov r8, r8)
 800bff6:	46bd      	mov	sp, r7
 800bff8:	b002      	add	sp, #8
 800bffa:	bd80      	pop	{r7, pc}
 800bffc:	20001d94 	.word	0x20001d94

0800c000 <processHalfDMAbuffer>:

static void processHalfDMAbuffer(uint32_t halfBufferStart)
{
 800c000:	b580      	push	{r7, lr}
 800c002:	b082      	sub	sp, #8
 800c004:	af00      	add	r7, sp, #0
 800c006:	6078      	str	r0, [r7, #4]
    // Decode the raw I2S data and copy it out of the DMA buffer and into dataBuffer
    decodeI2SdataLch((uint16_t *) &(dmaBuffer[halfBufferStart]), HALF_BUFLEN,
 800c008:	687b      	ldr	r3, [r7, #4]
 800c00a:	005a      	lsls	r2, r3, #1
 800c00c:	4b15      	ldr	r3, [pc, #84]	@ (800c064 <processHalfDMAbuffer+0x64>)
 800c00e:	18d3      	adds	r3, r2, r3
 800c010:	4a15      	ldr	r2, [pc, #84]	@ (800c068 <processHalfDMAbuffer+0x68>)
 800c012:	2180      	movs	r1, #128	@ 0x80
 800c014:	0089      	lsls	r1, r1, #2
 800c016:	0018      	movs	r0, r3
 800c018:	f000 fd35 	bl	800ca86 <decodeI2SdataLch>
                     (int32_t *) dataBuffer);
    // Filter the amplitude, find the maximum, and update maximumAmplitude:
    getFilteredMaxAmplitudeQ31((int32_t *) dataBuffer, (uint32_t) EIGHTH_BUFLEN,
 800c01c:	4b13      	ldr	r3, [pc, #76]	@ (800c06c <processHalfDMAbuffer+0x6c>)
 800c01e:	681b      	ldr	r3, [r3, #0]
 800c020:	425a      	negs	r2, r3
 800c022:	4153      	adcs	r3, r2
 800c024:	b2da      	uxtb	r2, r3
 800c026:	4b11      	ldr	r3, [pc, #68]	@ (800c06c <processHalfDMAbuffer+0x6c>)
 800c028:	681b      	ldr	r3, [r3, #0]
 800c02a:	2109      	movs	r1, #9
 800c02c:	4299      	cmp	r1, r3
 800c02e:	419b      	sbcs	r3, r3
 800c030:	425b      	negs	r3, r3
 800c032:	b2db      	uxtb	r3, r3
 800c034:	480c      	ldr	r0, [pc, #48]	@ (800c068 <processHalfDMAbuffer+0x68>)
 800c036:	2180      	movs	r1, #128	@ 0x80
 800c038:	f000 fb46 	bl	800c6c8 <getFilteredMaxAmplitudeQ31>
                               amplitudeSettlingPeriods == 0,
                               amplitudeSettlingPeriods >= N_AMP_SETTLE_HALF_PERIODS);
    if (amplitudeSettlingPeriods < N_AMP_SETTLE_HALF_PERIODS)
 800c03c:	4b0b      	ldr	r3, [pc, #44]	@ (800c06c <processHalfDMAbuffer+0x6c>)
 800c03e:	681b      	ldr	r3, [r3, #0]
 800c040:	2b09      	cmp	r3, #9
 800c042:	d804      	bhi.n	800c04e <processHalfDMAbuffer+0x4e>
    {
        // Need to allow the IIR filter to settle
        amplitudeSettlingPeriods++;
 800c044:	4b09      	ldr	r3, [pc, #36]	@ (800c06c <processHalfDMAbuffer+0x6c>)
 800c046:	681b      	ldr	r3, [r3, #0]
 800c048:	1c5a      	adds	r2, r3, #1
 800c04a:	4b08      	ldr	r3, [pc, #32]	@ (800c06c <processHalfDMAbuffer+0x6c>)
 800c04c:	601a      	str	r2, [r3, #0]
    }
    if (SPLcalcEnabled)
 800c04e:	4b08      	ldr	r3, [pc, #32]	@ (800c070 <processHalfDMAbuffer+0x70>)
 800c050:	781b      	ldrb	r3, [r3, #0]
 800c052:	b2db      	uxtb	r3, r3
 800c054:	2b00      	cmp	r3, #0
 800c056:	d001      	beq.n	800c05c <processHalfDMAbuffer+0x5c>
    {
        // Calculate the A-weighted SPL and octave bands SPL
        calculateSPLQ31();
 800c058:	f000 f826 	bl	800c0a8 <calculateSPLQ31>
    }
}
 800c05c:	46c0      	nop			@ (mov r8, r8)
 800c05e:	46bd      	mov	sp, r7
 800c060:	b002      	add	sp, #8
 800c062:	bd80      	pop	{r7, pc}
 800c064:	20001390 	.word	0x20001390
 800c068:	20001b90 	.word	0x20001b90
 800c06c:	20001350 	.word	0x20001350
 800c070:	2000134d 	.word	0x2000134d

0800c074 <HAL_I2S_ErrorCallback>:

void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s2loc)
{
 800c074:	b580      	push	{r7, lr}
 800c076:	b082      	sub	sp, #8
 800c078:	af00      	add	r7, sp, #0
 800c07a:	6078      	str	r0, [r7, #4]
  if (hi2s2loc == hi2s2) {
 800c07c:	4b07      	ldr	r3, [pc, #28]	@ (800c09c <HAL_I2S_ErrorCallback+0x28>)
 800c07e:	681b      	ldr	r3, [r3, #0]
 800c080:	687a      	ldr	r2, [r7, #4]
 800c082:	429a      	cmp	r2, r3
 800c084:	d106      	bne.n	800c094 <HAL_I2S_ErrorCallback+0x20>
    UNUSED(hi2s2);
    errorHandler(__func__, __LINE__, __FILE__);
 800c086:	4a06      	ldr	r2, [pc, #24]	@ (800c0a0 <HAL_I2S_ErrorCallback+0x2c>)
 800c088:	239f      	movs	r3, #159	@ 0x9f
 800c08a:	0059      	lsls	r1, r3, #1
 800c08c:	4b05      	ldr	r3, [pc, #20]	@ (800c0a4 <HAL_I2S_ErrorCallback+0x30>)
 800c08e:	0018      	movs	r0, r3
 800c090:	f001 fe4c 	bl	800dd2c <errorHandler>
  }
}
 800c094:	46c0      	nop			@ (mov r8, r8)
 800c096:	46bd      	mov	sp, r7
 800c098:	b002      	add	sp, #8
 800c09a:	bd80      	pop	{r7, pc}
 800c09c:	20001d94 	.word	0x20001d94
 800c0a0:	080242c0 	.word	0x080242c0
 800c0a4:	08024a2c 	.word	0x08024a2c

0800c0a8 <calculateSPLQ31>:
// dataBuffer must contain (at least) FFT_N values and is reused for
// storage throughout this function. Since dataBuffer is shared by
// both halves of the DMA buffer, this function must complete before
// the next DMA interrupt.
static void calculateSPLQ31(void)
{
 800c0a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c0aa:	b0b3      	sub	sp, #204	@ 0xcc
 800c0ac:	af04      	add	r7, sp, #16
    // Interleaved complex, so need 2x number of elements:
    static q31_t FFTdata[2*FFT_N] = {0};

    // Find max, min values of the input data
    int32_t max, min;
    findMinMax(&min, &max, (int32_t *) dataBuffer, FFT_N);
 800c0ae:	4ae2      	ldr	r2, [pc, #904]	@ (800c438 <calculateSPLQ31+0x390>)
 800c0b0:	2338      	movs	r3, #56	@ 0x38
 800c0b2:	2030      	movs	r0, #48	@ 0x30
 800c0b4:	181b      	adds	r3, r3, r0
 800c0b6:	19d9      	adds	r1, r3, r7
 800c0b8:	2334      	movs	r3, #52	@ 0x34
 800c0ba:	181b      	adds	r3, r3, r0
 800c0bc:	19d8      	adds	r0, r3, r7
 800c0be:	2380      	movs	r3, #128	@ 0x80
 800c0c0:	f000 fc36 	bl	800c930 <findMinMax>

    // Calculate the centre of the signal range, and the largest bitshift needed
    // to fill the available range without saturating
    int32_t centre = (min/2) + (max/2);
 800c0c4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c0c6:	2b00      	cmp	r3, #0
 800c0c8:	da00      	bge.n	800c0cc <calculateSPLQ31+0x24>
 800c0ca:	3301      	adds	r3, #1
 800c0cc:	105b      	asrs	r3, r3, #1
 800c0ce:	001a      	movs	r2, r3
 800c0d0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800c0d2:	2b00      	cmp	r3, #0
 800c0d4:	da00      	bge.n	800c0d8 <calculateSPLQ31+0x30>
 800c0d6:	3301      	adds	r3, #1
 800c0d8:	105b      	asrs	r3, r3, #1
 800c0da:	18d3      	adds	r3, r2, r3
 800c0dc:	2188      	movs	r1, #136	@ 0x88
 800c0de:	187a      	adds	r2, r7, r1
 800c0e0:	6013      	str	r3, [r2, #0]
    uint32_t amplitude = (uint32_t) (max - centre + BIT_ROUNDING_MARGIN);
 800c0e2:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800c0e4:	187b      	adds	r3, r7, r1
 800c0e6:	681b      	ldr	r3, [r3, #0]
 800c0e8:	1ad3      	subs	r3, r2, r3
 800c0ea:	3304      	adds	r3, #4
 800c0ec:	2284      	movs	r2, #132	@ 0x84
 800c0ee:	18b9      	adds	r1, r7, r2
 800c0f0:	600b      	str	r3, [r1, #0]
    uint32_t bitShift = getPo2factor(INT32_MAX, amplitude);
 800c0f2:	18bb      	adds	r3, r7, r2
 800c0f4:	681b      	ldr	r3, [r3, #0]
 800c0f6:	4ad1      	ldr	r2, [pc, #836]	@ (800c43c <calculateSPLQ31+0x394>)
 800c0f8:	0019      	movs	r1, r3
 800c0fa:	0010      	movs	r0, r2
 800c0fc:	f000 fc58 	bl	800c9b0 <getPo2factor>
 800c100:	0003      	movs	r3, r0
 800c102:	2280      	movs	r2, #128	@ 0x80
 800c104:	18ba      	adds	r2, r7, r2
 800c106:	6013      	str	r3, [r2, #0]

    // Apply offset and bitshift and put data into FFT input array
    uint32_t count = 0;
 800c108:	2300      	movs	r3, #0
 800c10a:	2284      	movs	r2, #132	@ 0x84
 800c10c:	2130      	movs	r1, #48	@ 0x30
 800c10e:	1852      	adds	r2, r2, r1
 800c110:	19d2      	adds	r2, r2, r7
 800c112:	6013      	str	r3, [r2, #0]
    for (uint32_t i = 0; i < FFT_N; i++)
 800c114:	2300      	movs	r3, #0
 800c116:	2280      	movs	r2, #128	@ 0x80
 800c118:	1852      	adds	r2, r2, r1
 800c11a:	19d2      	adds	r2, r2, r7
 800c11c:	6013      	str	r3, [r2, #0]
 800c11e:	e032      	b.n	800c186 <calculateSPLQ31+0xde>
    {
        FFTdata[count] = (q31_t) ((dataBuffer[i] - centre) << bitShift);
 800c120:	4ac5      	ldr	r2, [pc, #788]	@ (800c438 <calculateSPLQ31+0x390>)
 800c122:	2680      	movs	r6, #128	@ 0x80
 800c124:	2330      	movs	r3, #48	@ 0x30
 800c126:	18f1      	adds	r1, r6, r3
 800c128:	19cb      	adds	r3, r1, r7
 800c12a:	681b      	ldr	r3, [r3, #0]
 800c12c:	009b      	lsls	r3, r3, #2
 800c12e:	589a      	ldr	r2, [r3, r2]
 800c130:	2188      	movs	r1, #136	@ 0x88
 800c132:	1879      	adds	r1, r7, r1
 800c134:	680b      	ldr	r3, [r1, #0]
 800c136:	1ad2      	subs	r2, r2, r3
 800c138:	2180      	movs	r1, #128	@ 0x80
 800c13a:	1879      	adds	r1, r7, r1
 800c13c:	680b      	ldr	r3, [r1, #0]
 800c13e:	409a      	lsls	r2, r3
 800c140:	0011      	movs	r1, r2
 800c142:	4abf      	ldr	r2, [pc, #764]	@ (800c440 <calculateSPLQ31+0x398>)
 800c144:	2084      	movs	r0, #132	@ 0x84
 800c146:	2330      	movs	r3, #48	@ 0x30
 800c148:	18c3      	adds	r3, r0, r3
 800c14a:	19db      	adds	r3, r3, r7
 800c14c:	681b      	ldr	r3, [r3, #0]
 800c14e:	009b      	lsls	r3, r3, #2
 800c150:	5099      	str	r1, [r3, r2]
        FFTdata[count + 1] = 0;
 800c152:	2230      	movs	r2, #48	@ 0x30
 800c154:	1883      	adds	r3, r0, r2
 800c156:	19db      	adds	r3, r3, r7
 800c158:	681b      	ldr	r3, [r3, #0]
 800c15a:	3301      	adds	r3, #1
 800c15c:	49b8      	ldr	r1, [pc, #736]	@ (800c440 <calculateSPLQ31+0x398>)
 800c15e:	009a      	lsls	r2, r3, #2
 800c160:	2300      	movs	r3, #0
 800c162:	5053      	str	r3, [r2, r1]
        count += 2;
 800c164:	2230      	movs	r2, #48	@ 0x30
 800c166:	1883      	adds	r3, r0, r2
 800c168:	19db      	adds	r3, r3, r7
 800c16a:	681b      	ldr	r3, [r3, #0]
 800c16c:	3302      	adds	r3, #2
 800c16e:	0011      	movs	r1, r2
 800c170:	1882      	adds	r2, r0, r2
 800c172:	19d2      	adds	r2, r2, r7
 800c174:	6013      	str	r3, [r2, #0]
    for (uint32_t i = 0; i < FFT_N; i++)
 800c176:	000a      	movs	r2, r1
 800c178:	18b3      	adds	r3, r6, r2
 800c17a:	19db      	adds	r3, r3, r7
 800c17c:	681b      	ldr	r3, [r3, #0]
 800c17e:	3301      	adds	r3, #1
 800c180:	18b2      	adds	r2, r6, r2
 800c182:	19d2      	adds	r2, r2, r7
 800c184:	6013      	str	r3, [r2, #0]
 800c186:	2380      	movs	r3, #128	@ 0x80
 800c188:	2630      	movs	r6, #48	@ 0x30
 800c18a:	199b      	adds	r3, r3, r6
 800c18c:	19db      	adds	r3, r3, r7
 800c18e:	681b      	ldr	r3, [r3, #0]
 800c190:	2b7f      	cmp	r3, #127	@ 0x7f
 800c192:	d9c5      	bls.n	800c120 <calculateSPLQ31+0x78>
    }

    // Do the FFT; the output is internally divided by FFT_N (number of points)
    arm_cfft_q31(fftInstance, FFTdata, 0, 1);
 800c194:	4bab      	ldr	r3, [pc, #684]	@ (800c444 <calculateSPLQ31+0x39c>)
 800c196:	6818      	ldr	r0, [r3, #0]
 800c198:	49a9      	ldr	r1, [pc, #676]	@ (800c440 <calculateSPLQ31+0x398>)
 800c19a:	2301      	movs	r3, #1
 800c19c:	2200      	movs	r2, #0
 800c19e:	f010 ffd7 	bl	801d150 <arm_cfft_q31>

    // Find FFT output max, min values (in 1st half of output),
    // ignoring the two dc bin values:
    findMinMax(&min, &max, &(FFTdata[2]), ((uint32_t) FFT_N) - 2);
 800c1a2:	4aa9      	ldr	r2, [pc, #676]	@ (800c448 <calculateSPLQ31+0x3a0>)
 800c1a4:	2338      	movs	r3, #56	@ 0x38
 800c1a6:	199b      	adds	r3, r3, r6
 800c1a8:	19d9      	adds	r1, r3, r7
 800c1aa:	2334      	movs	r3, #52	@ 0x34
 800c1ac:	199b      	adds	r3, r3, r6
 800c1ae:	19d8      	adds	r0, r3, r7
 800c1b0:	237e      	movs	r3, #126	@ 0x7e
 800c1b2:	f000 fbbd 	bl	800c930 <findMinMax>

    // find the largest absolute real/imag component (store in "max")
    if (min == INT32_MIN)
 800c1b6:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800c1b8:	2380      	movs	r3, #128	@ 0x80
 800c1ba:	061b      	lsls	r3, r3, #24
 800c1bc:	429a      	cmp	r2, r3
 800c1be:	d101      	bne.n	800c1c4 <calculateSPLQ31+0x11c>
    {
        min = INT32_MAX;
 800c1c0:	4b9e      	ldr	r3, [pc, #632]	@ (800c43c <calculateSPLQ31+0x394>)
 800c1c2:	667b      	str	r3, [r7, #100]	@ 0x64
    }
    if (max == INT32_MIN)
 800c1c4:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800c1c6:	2380      	movs	r3, #128	@ 0x80
 800c1c8:	061b      	lsls	r3, r3, #24
 800c1ca:	429a      	cmp	r2, r3
 800c1cc:	d101      	bne.n	800c1d2 <calculateSPLQ31+0x12a>
    {
        max = INT32_MAX;
 800c1ce:	4b9b      	ldr	r3, [pc, #620]	@ (800c43c <calculateSPLQ31+0x394>)
 800c1d0:	66bb      	str	r3, [r7, #104]	@ 0x68
    }
    min = abs(min);
 800c1d2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c1d4:	17da      	asrs	r2, r3, #31
 800c1d6:	189b      	adds	r3, r3, r2
 800c1d8:	4053      	eors	r3, r2
 800c1da:	667b      	str	r3, [r7, #100]	@ 0x64
    max = abs(max);
 800c1dc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800c1de:	17da      	asrs	r2, r3, #31
 800c1e0:	189b      	adds	r3, r3, r2
 800c1e2:	4053      	eors	r3, r2
 800c1e4:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (min > max)
 800c1e6:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800c1e8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800c1ea:	429a      	cmp	r2, r3
 800c1ec:	dd01      	ble.n	800c1f2 <calculateSPLQ31+0x14a>
    {
        max = min;
 800c1ee:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c1f0:	66bb      	str	r3, [r7, #104]	@ 0x68
    }
    // Calculate the largest bitshift needed to fill the available range
    // without saturating
    uint32_t amplitude2 = ((uint32_t) max) + BIT_ROUNDING_MARGIN;
 800c1f2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800c1f4:	3304      	adds	r3, #4
 800c1f6:	67fb      	str	r3, [r7, #124]	@ 0x7c
    uint32_t bitShift2 = getPo2factor((uint32_t) INT32_MAX, amplitude2);
 800c1f8:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800c1fa:	4a90      	ldr	r2, [pc, #576]	@ (800c43c <calculateSPLQ31+0x394>)
 800c1fc:	0019      	movs	r1, r3
 800c1fe:	0010      	movs	r0, r2
 800c200:	f000 fbd6 	bl	800c9b0 <getPo2factor>
 800c204:	0003      	movs	r3, r0
 800c206:	67bb      	str	r3, [r7, #120]	@ 0x78

    // Apply the bitshift (not to the dc bins, and to 1st half of data only),
    // then get the absolute square magnitude of each bin
    for (uint32_t i = 2; i<FFT_N; i++)
 800c208:	2302      	movs	r3, #2
 800c20a:	22ac      	movs	r2, #172	@ 0xac
 800c20c:	18ba      	adds	r2, r7, r2
 800c20e:	6013      	str	r3, [r2, #0]
 800c210:	e012      	b.n	800c238 <calculateSPLQ31+0x190>
    {
        FFTdata[i] = (q31_t) (FFTdata[i] << bitShift2);
 800c212:	4a8b      	ldr	r2, [pc, #556]	@ (800c440 <calculateSPLQ31+0x398>)
 800c214:	20ac      	movs	r0, #172	@ 0xac
 800c216:	183b      	adds	r3, r7, r0
 800c218:	681b      	ldr	r3, [r3, #0]
 800c21a:	009b      	lsls	r3, r3, #2
 800c21c:	589a      	ldr	r2, [r3, r2]
 800c21e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800c220:	409a      	lsls	r2, r3
 800c222:	0011      	movs	r1, r2
 800c224:	4a86      	ldr	r2, [pc, #536]	@ (800c440 <calculateSPLQ31+0x398>)
 800c226:	183b      	adds	r3, r7, r0
 800c228:	681b      	ldr	r3, [r3, #0]
 800c22a:	009b      	lsls	r3, r3, #2
 800c22c:	5099      	str	r1, [r3, r2]
    for (uint32_t i = 2; i<FFT_N; i++)
 800c22e:	183b      	adds	r3, r7, r0
 800c230:	681b      	ldr	r3, [r3, #0]
 800c232:	3301      	adds	r3, #1
 800c234:	183a      	adds	r2, r7, r0
 800c236:	6013      	str	r3, [r2, #0]
 800c238:	23ac      	movs	r3, #172	@ 0xac
 800c23a:	18fb      	adds	r3, r7, r3
 800c23c:	681b      	ldr	r3, [r3, #0]
 800c23e:	2b7f      	cmp	r3, #127	@ 0x7f
 800c240:	d9e7      	bls.n	800c212 <calculateSPLQ31+0x16a>
    }
    // Re-use dataBuffer as working memory:
    q31_t * sqmag = (q31_t *) dataBuffer;
 800c242:	4b7d      	ldr	r3, [pc, #500]	@ (800c438 <calculateSPLQ31+0x390>)
 800c244:	677b      	str	r3, [r7, #116]	@ 0x74
    arm_cmplx_mag_squared_q31(FFTdata, sqmag, FFT_N/2);
 800c246:	6f79      	ldr	r1, [r7, #116]	@ 0x74
 800c248:	4b7d      	ldr	r3, [pc, #500]	@ (800c440 <calculateSPLQ31+0x398>)
 800c24a:	2240      	movs	r2, #64	@ 0x40
 800c24c:	0018      	movs	r0, r3
 800c24e:	f011 fd29 	bl	801dca4 <arm_cmplx_mag_squared_q31>

    // Apply the A-weighting and sum, excluding the dc bin.
    // Also sum for the unweighted frequency-band SPL:
    uint64_t bandSum[SOUND_FREQ_BANDS] = {0};
 800c252:	2330      	movs	r3, #48	@ 0x30
 800c254:	18fb      	adds	r3, r7, r3
 800c256:	0018      	movs	r0, r3
 800c258:	2330      	movs	r3, #48	@ 0x30
 800c25a:	001a      	movs	r2, r3
 800c25c:	2100      	movs	r1, #0
 800c25e:	f013 fb45 	bl	801f8ec <memset>
    uint64_t sumSq = 0; // sum of squared weighted magnitudes (scaled)
 800c262:	2200      	movs	r2, #0
 800c264:	2300      	movs	r3, #0
 800c266:	21a0      	movs	r1, #160	@ 0xa0
 800c268:	1879      	adds	r1, r7, r1
 800c26a:	600a      	str	r2, [r1, #0]
 800c26c:	604b      	str	r3, [r1, #4]
    for (uint32_t i = 1; i < (FFT_N/2); i++)
 800c26e:	2301      	movs	r3, #1
 800c270:	229c      	movs	r2, #156	@ 0x9c
 800c272:	18ba      	adds	r2, r7, r2
 800c274:	6013      	str	r3, [r2, #0]
 800c276:	e05b      	b.n	800c330 <calculateSPLQ31+0x288>
    {
        sumSq += ((uint64_t) sqmag[i])*((uint64_t) sqWsc[i]);
 800c278:	269c      	movs	r6, #156	@ 0x9c
 800c27a:	19bb      	adds	r3, r7, r6
 800c27c:	681b      	ldr	r3, [r3, #0]
 800c27e:	009a      	lsls	r2, r3, #2
 800c280:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800c282:	189b      	adds	r3, r3, r2
 800c284:	681b      	ldr	r3, [r3, #0]
 800c286:	613b      	str	r3, [r7, #16]
 800c288:	17db      	asrs	r3, r3, #31
 800c28a:	617b      	str	r3, [r7, #20]
 800c28c:	4b6f      	ldr	r3, [pc, #444]	@ (800c44c <calculateSPLQ31+0x3a4>)
 800c28e:	681a      	ldr	r2, [r3, #0]
 800c290:	19bb      	adds	r3, r7, r6
 800c292:	681b      	ldr	r3, [r3, #0]
 800c294:	005b      	lsls	r3, r3, #1
 800c296:	18d3      	adds	r3, r2, r3
 800c298:	881b      	ldrh	r3, [r3, #0]
 800c29a:	60bb      	str	r3, [r7, #8]
 800c29c:	2300      	movs	r3, #0
 800c29e:	60fb      	str	r3, [r7, #12]
 800c2a0:	68ba      	ldr	r2, [r7, #8]
 800c2a2:	68fb      	ldr	r3, [r7, #12]
 800c2a4:	6938      	ldr	r0, [r7, #16]
 800c2a6:	6979      	ldr	r1, [r7, #20]
 800c2a8:	f7f4 f98a 	bl	80005c0 <__aeabi_lmul>
 800c2ac:	0002      	movs	r2, r0
 800c2ae:	000b      	movs	r3, r1
 800c2b0:	0010      	movs	r0, r2
 800c2b2:	0019      	movs	r1, r3
 800c2b4:	23a0      	movs	r3, #160	@ 0xa0
 800c2b6:	18fa      	adds	r2, r7, r3
 800c2b8:	6853      	ldr	r3, [r2, #4]
 800c2ba:	6812      	ldr	r2, [r2, #0]
 800c2bc:	1812      	adds	r2, r2, r0
 800c2be:	414b      	adcs	r3, r1
 800c2c0:	21a0      	movs	r1, #160	@ 0xa0
 800c2c2:	1879      	adds	r1, r7, r1
 800c2c4:	600a      	str	r2, [r1, #0]
 800c2c6:	604b      	str	r3, [r1, #4]
        if (bandIDs[i] != SOUND_FREQ_BANDS)
 800c2c8:	4b61      	ldr	r3, [pc, #388]	@ (800c450 <calculateSPLQ31+0x3a8>)
 800c2ca:	681a      	ldr	r2, [r3, #0]
 800c2cc:	19bb      	adds	r3, r7, r6
 800c2ce:	681b      	ldr	r3, [r3, #0]
 800c2d0:	18d3      	adds	r3, r2, r3
 800c2d2:	781b      	ldrb	r3, [r3, #0]
 800c2d4:	2b06      	cmp	r3, #6
 800c2d6:	d025      	beq.n	800c324 <calculateSPLQ31+0x27c>
        {
            // This bin belongs in one of the frequency-bands:
            bandSum[bandIDs[i]] += (uint64_t) sqmag[i];
 800c2d8:	4b5d      	ldr	r3, [pc, #372]	@ (800c450 <calculateSPLQ31+0x3a8>)
 800c2da:	681a      	ldr	r2, [r3, #0]
 800c2dc:	19bb      	adds	r3, r7, r6
 800c2de:	681b      	ldr	r3, [r3, #0]
 800c2e0:	18d3      	adds	r3, r2, r3
 800c2e2:	781b      	ldrb	r3, [r3, #0]
 800c2e4:	2230      	movs	r2, #48	@ 0x30
 800c2e6:	18ba      	adds	r2, r7, r2
 800c2e8:	00db      	lsls	r3, r3, #3
 800c2ea:	18d3      	adds	r3, r2, r3
 800c2ec:	6818      	ldr	r0, [r3, #0]
 800c2ee:	6859      	ldr	r1, [r3, #4]
 800c2f0:	19bb      	adds	r3, r7, r6
 800c2f2:	681b      	ldr	r3, [r3, #0]
 800c2f4:	009a      	lsls	r2, r3, #2
 800c2f6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800c2f8:	189b      	adds	r3, r3, r2
 800c2fa:	681b      	ldr	r3, [r3, #0]
 800c2fc:	603b      	str	r3, [r7, #0]
 800c2fe:	17db      	asrs	r3, r3, #31
 800c300:	607b      	str	r3, [r7, #4]
 800c302:	4b53      	ldr	r3, [pc, #332]	@ (800c450 <calculateSPLQ31+0x3a8>)
 800c304:	681a      	ldr	r2, [r3, #0]
 800c306:	19be      	adds	r6, r7, r6
 800c308:	6833      	ldr	r3, [r6, #0]
 800c30a:	18d3      	adds	r3, r2, r3
 800c30c:	781b      	ldrb	r3, [r3, #0]
 800c30e:	001e      	movs	r6, r3
 800c310:	683a      	ldr	r2, [r7, #0]
 800c312:	687b      	ldr	r3, [r7, #4]
 800c314:	1880      	adds	r0, r0, r2
 800c316:	4159      	adcs	r1, r3
 800c318:	2330      	movs	r3, #48	@ 0x30
 800c31a:	18fa      	adds	r2, r7, r3
 800c31c:	00f3      	lsls	r3, r6, #3
 800c31e:	18d3      	adds	r3, r2, r3
 800c320:	6018      	str	r0, [r3, #0]
 800c322:	6059      	str	r1, [r3, #4]
    for (uint32_t i = 1; i < (FFT_N/2); i++)
 800c324:	229c      	movs	r2, #156	@ 0x9c
 800c326:	18bb      	adds	r3, r7, r2
 800c328:	681b      	ldr	r3, [r3, #0]
 800c32a:	3301      	adds	r3, #1
 800c32c:	18ba      	adds	r2, r7, r2
 800c32e:	6013      	str	r3, [r2, #0]
 800c330:	239c      	movs	r3, #156	@ 0x9c
 800c332:	18fb      	adds	r3, r7, r3
 800c334:	681b      	ldr	r3, [r3, #0]
 800c336:	2b3f      	cmp	r3, #63	@ 0x3f
 800c338:	d99e      	bls.n	800c278 <calculateSPLQ31+0x1d0>
        }
    }

    // Reverse the (explicit and implicit) scalings using a bitshift.
    // Shifts applied before squaring are doubled when reversed.
    int32_t bs_right = ((int32_t) (2*bitShift)) + ((int32_t) (2*bitShift2))
 800c33a:	2380      	movs	r3, #128	@ 0x80
 800c33c:	18fb      	adds	r3, r7, r3
 800c33e:	681b      	ldr	r3, [r3, #0]
 800c340:	005b      	lsls	r3, r3, #1
 800c342:	001a      	movs	r2, r3
 800c344:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800c346:	005b      	lsls	r3, r3, #1
 800c348:	18d3      	adds	r3, r2, r3
 800c34a:	3b22      	subs	r3, #34	@ 0x22
 800c34c:	673b      	str	r3, [r7, #112]	@ 0x70
                       - FFT_SCALE_BITSHIFT - Q31_BITSHIFT;
    uint32_t absShift = (uint32_t) abs(bs_right);
 800c34e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800c350:	17da      	asrs	r2, r3, #31
 800c352:	189b      	adds	r3, r3, r2
 800c354:	4053      	eors	r3, r2
 800c356:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (bs_right < 0)
 800c358:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800c35a:	2b00      	cmp	r3, #0
 800c35c:	da62      	bge.n	800c424 <calculateSPLQ31+0x37c>
    {
        // Left shift
        sumSq = sumSq << absShift;
 800c35e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c360:	3b20      	subs	r3, #32
 800c362:	2b00      	cmp	r3, #0
 800c364:	db05      	blt.n	800c372 <calculateSPLQ31+0x2ca>
 800c366:	22a0      	movs	r2, #160	@ 0xa0
 800c368:	18ba      	adds	r2, r7, r2
 800c36a:	6812      	ldr	r2, [r2, #0]
 800c36c:	409a      	lsls	r2, r3
 800c36e:	627a      	str	r2, [r7, #36]	@ 0x24
 800c370:	e010      	b.n	800c394 <calculateSPLQ31+0x2ec>
 800c372:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c374:	2220      	movs	r2, #32
 800c376:	1ad3      	subs	r3, r2, r3
 800c378:	22a0      	movs	r2, #160	@ 0xa0
 800c37a:	18ba      	adds	r2, r7, r2
 800c37c:	6812      	ldr	r2, [r2, #0]
 800c37e:	40da      	lsrs	r2, r3
 800c380:	0013      	movs	r3, r2
 800c382:	22a4      	movs	r2, #164	@ 0xa4
 800c384:	18ba      	adds	r2, r7, r2
 800c386:	6811      	ldr	r1, [r2, #0]
 800c388:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800c38a:	4091      	lsls	r1, r2
 800c38c:	6279      	str	r1, [r7, #36]	@ 0x24
 800c38e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c390:	431a      	orrs	r2, r3
 800c392:	627a      	str	r2, [r7, #36]	@ 0x24
 800c394:	21a0      	movs	r1, #160	@ 0xa0
 800c396:	187b      	adds	r3, r7, r1
 800c398:	681a      	ldr	r2, [r3, #0]
 800c39a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c39c:	409a      	lsls	r2, r3
 800c39e:	623a      	str	r2, [r7, #32]
 800c3a0:	6a3b      	ldr	r3, [r7, #32]
 800c3a2:	6a7c      	ldr	r4, [r7, #36]	@ 0x24
 800c3a4:	187a      	adds	r2, r7, r1
 800c3a6:	6013      	str	r3, [r2, #0]
 800c3a8:	6054      	str	r4, [r2, #4]
        for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 800c3aa:	2300      	movs	r3, #0
 800c3ac:	2298      	movs	r2, #152	@ 0x98
 800c3ae:	18ba      	adds	r2, r7, r2
 800c3b0:	6013      	str	r3, [r2, #0]
 800c3b2:	e031      	b.n	800c418 <calculateSPLQ31+0x370>
        {
            bandSum[i] = bandSum[i] << absShift;
 800c3b4:	2330      	movs	r3, #48	@ 0x30
 800c3b6:	18fa      	adds	r2, r7, r3
 800c3b8:	2398      	movs	r3, #152	@ 0x98
 800c3ba:	18fb      	adds	r3, r7, r3
 800c3bc:	681b      	ldr	r3, [r3, #0]
 800c3be:	00db      	lsls	r3, r3, #3
 800c3c0:	18d3      	adds	r3, r2, r3
 800c3c2:	681a      	ldr	r2, [r3, #0]
 800c3c4:	685b      	ldr	r3, [r3, #4]
 800c3c6:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800c3c8:	3920      	subs	r1, #32
 800c3ca:	2900      	cmp	r1, #0
 800c3cc:	db03      	blt.n	800c3d6 <calculateSPLQ31+0x32e>
 800c3ce:	0010      	movs	r0, r2
 800c3d0:	4088      	lsls	r0, r1
 800c3d2:	62f8      	str	r0, [r7, #44]	@ 0x2c
 800c3d4:	e00c      	b.n	800c3f0 <calculateSPLQ31+0x348>
 800c3d6:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800c3d8:	2020      	movs	r0, #32
 800c3da:	1a41      	subs	r1, r0, r1
 800c3dc:	0010      	movs	r0, r2
 800c3de:	40c8      	lsrs	r0, r1
 800c3e0:	0001      	movs	r1, r0
 800c3e2:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800c3e4:	001c      	movs	r4, r3
 800c3e6:	4084      	lsls	r4, r0
 800c3e8:	62fc      	str	r4, [r7, #44]	@ 0x2c
 800c3ea:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800c3ec:	4308      	orrs	r0, r1
 800c3ee:	62f8      	str	r0, [r7, #44]	@ 0x2c
 800c3f0:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800c3f2:	0013      	movs	r3, r2
 800c3f4:	408b      	lsls	r3, r1
 800c3f6:	62bb      	str	r3, [r7, #40]	@ 0x28
 800c3f8:	2330      	movs	r3, #48	@ 0x30
 800c3fa:	18fa      	adds	r2, r7, r3
 800c3fc:	2098      	movs	r0, #152	@ 0x98
 800c3fe:	183b      	adds	r3, r7, r0
 800c400:	681b      	ldr	r3, [r3, #0]
 800c402:	00db      	lsls	r3, r3, #3
 800c404:	18d3      	adds	r3, r2, r3
 800c406:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800c408:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c40a:	6019      	str	r1, [r3, #0]
 800c40c:	605a      	str	r2, [r3, #4]
        for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 800c40e:	183b      	adds	r3, r7, r0
 800c410:	681b      	ldr	r3, [r3, #0]
 800c412:	3301      	adds	r3, #1
 800c414:	183a      	adds	r2, r7, r0
 800c416:	6013      	str	r3, [r2, #0]
 800c418:	2398      	movs	r3, #152	@ 0x98
 800c41a:	18fb      	adds	r3, r7, r3
 800c41c:	681b      	ldr	r3, [r3, #0]
 800c41e:	2b05      	cmp	r3, #5
 800c420:	d9c8      	bls.n	800c3b4 <calculateSPLQ31+0x30c>
 800c422:	e06b      	b.n	800c4fc <calculateSPLQ31+0x454>
        }
    }
    else
    {
        // Right shift
        sumSq = sumSq >> absShift;
 800c424:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c426:	3b20      	subs	r3, #32
 800c428:	2b00      	cmp	r3, #0
 800c42a:	db13      	blt.n	800c454 <calculateSPLQ31+0x3ac>
 800c42c:	22a4      	movs	r2, #164	@ 0xa4
 800c42e:	18ba      	adds	r2, r7, r2
 800c430:	6812      	ldr	r2, [r2, #0]
 800c432:	40da      	lsrs	r2, r3
 800c434:	61ba      	str	r2, [r7, #24]
 800c436:	e01e      	b.n	800c476 <calculateSPLQ31+0x3ce>
 800c438:	20001b90 	.word	0x20001b90
 800c43c:	7fffffff 	.word	0x7fffffff
 800c440:	20001ddc 	.word	0x20001ddc
 800c444:	200000b4 	.word	0x200000b4
 800c448:	20001de4 	.word	0x20001de4
 800c44c:	200000b8 	.word	0x200000b8
 800c450:	200000c4 	.word	0x200000c4
 800c454:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c456:	2220      	movs	r2, #32
 800c458:	1ad3      	subs	r3, r2, r3
 800c45a:	22a4      	movs	r2, #164	@ 0xa4
 800c45c:	18ba      	adds	r2, r7, r2
 800c45e:	6812      	ldr	r2, [r2, #0]
 800c460:	409a      	lsls	r2, r3
 800c462:	0013      	movs	r3, r2
 800c464:	22a0      	movs	r2, #160	@ 0xa0
 800c466:	18ba      	adds	r2, r7, r2
 800c468:	6811      	ldr	r1, [r2, #0]
 800c46a:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800c46c:	40d1      	lsrs	r1, r2
 800c46e:	61b9      	str	r1, [r7, #24]
 800c470:	69ba      	ldr	r2, [r7, #24]
 800c472:	431a      	orrs	r2, r3
 800c474:	61ba      	str	r2, [r7, #24]
 800c476:	23a4      	movs	r3, #164	@ 0xa4
 800c478:	18fb      	adds	r3, r7, r3
 800c47a:	681a      	ldr	r2, [r3, #0]
 800c47c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c47e:	40da      	lsrs	r2, r3
 800c480:	61fa      	str	r2, [r7, #28]
 800c482:	69ba      	ldr	r2, [r7, #24]
 800c484:	69fb      	ldr	r3, [r7, #28]
 800c486:	21a0      	movs	r1, #160	@ 0xa0
 800c488:	1879      	adds	r1, r7, r1
 800c48a:	600a      	str	r2, [r1, #0]
 800c48c:	604b      	str	r3, [r1, #4]
        for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 800c48e:	2300      	movs	r3, #0
 800c490:	2294      	movs	r2, #148	@ 0x94
 800c492:	18ba      	adds	r2, r7, r2
 800c494:	6013      	str	r3, [r2, #0]
 800c496:	e02c      	b.n	800c4f2 <calculateSPLQ31+0x44a>
        {
            bandSum[i] = bandSum[i] >> absShift;
 800c498:	2330      	movs	r3, #48	@ 0x30
 800c49a:	18fa      	adds	r2, r7, r3
 800c49c:	2394      	movs	r3, #148	@ 0x94
 800c49e:	18fb      	adds	r3, r7, r3
 800c4a0:	681b      	ldr	r3, [r3, #0]
 800c4a2:	00db      	lsls	r3, r3, #3
 800c4a4:	18d3      	adds	r3, r2, r3
 800c4a6:	681a      	ldr	r2, [r3, #0]
 800c4a8:	685b      	ldr	r3, [r3, #4]
 800c4aa:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800c4ac:	3920      	subs	r1, #32
 800c4ae:	2900      	cmp	r1, #0
 800c4b0:	db03      	blt.n	800c4ba <calculateSPLQ31+0x412>
 800c4b2:	0018      	movs	r0, r3
 800c4b4:	40c8      	lsrs	r0, r1
 800c4b6:	0004      	movs	r4, r0
 800c4b8:	e00a      	b.n	800c4d0 <calculateSPLQ31+0x428>
 800c4ba:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800c4bc:	2020      	movs	r0, #32
 800c4be:	1a41      	subs	r1, r0, r1
 800c4c0:	0018      	movs	r0, r3
 800c4c2:	4088      	lsls	r0, r1
 800c4c4:	0001      	movs	r1, r0
 800c4c6:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800c4c8:	0016      	movs	r6, r2
 800c4ca:	40c6      	lsrs	r6, r0
 800c4cc:	0034      	movs	r4, r6
 800c4ce:	430c      	orrs	r4, r1
 800c4d0:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800c4d2:	40cb      	lsrs	r3, r1
 800c4d4:	001d      	movs	r5, r3
 800c4d6:	2330      	movs	r3, #48	@ 0x30
 800c4d8:	18fa      	adds	r2, r7, r3
 800c4da:	2194      	movs	r1, #148	@ 0x94
 800c4dc:	187b      	adds	r3, r7, r1
 800c4de:	681b      	ldr	r3, [r3, #0]
 800c4e0:	00db      	lsls	r3, r3, #3
 800c4e2:	18d3      	adds	r3, r2, r3
 800c4e4:	601c      	str	r4, [r3, #0]
 800c4e6:	605d      	str	r5, [r3, #4]
        for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 800c4e8:	187b      	adds	r3, r7, r1
 800c4ea:	681b      	ldr	r3, [r3, #0]
 800c4ec:	3301      	adds	r3, #1
 800c4ee:	187a      	adds	r2, r7, r1
 800c4f0:	6013      	str	r3, [r2, #0]
 800c4f2:	2394      	movs	r3, #148	@ 0x94
 800c4f4:	18fb      	adds	r3, r7, r3
 800c4f6:	681b      	ldr	r3, [r3, #0]
 800c4f8:	2b05      	cmp	r3, #5
 800c4fa:	d9cd      	bls.n	800c498 <calculateSPLQ31+0x3f0>
        }
    }

    // Add on the dB terms accounting for the microphone parameters
    // and (only for the A-weighted SPL) the weighting scale factor
    scaleSPL(sumSq, dBscale_int, dBscale_frac, *tenlog10SF_int, *tenlog10SF_frac,
 800c4fc:	230f      	movs	r3, #15
 800c4fe:	425d      	negs	r5, r3
 800c500:	2305      	movs	r3, #5
 800c502:	425e      	negs	r6, r3
 800c504:	4b4a      	ldr	r3, [pc, #296]	@ (800c630 <calculateSPLQ31+0x588>)
 800c506:	681b      	ldr	r3, [r3, #0]
 800c508:	681a      	ldr	r2, [r3, #0]
 800c50a:	4b4a      	ldr	r3, [pc, #296]	@ (800c634 <calculateSPLQ31+0x58c>)
 800c50c:	681b      	ldr	r3, [r3, #0]
 800c50e:	681b      	ldr	r3, [r3, #0]
 800c510:	21a0      	movs	r1, #160	@ 0xa0
 800c512:	1879      	adds	r1, r7, r1
 800c514:	6808      	ldr	r0, [r1, #0]
 800c516:	6849      	ldr	r1, [r1, #4]
 800c518:	4c47      	ldr	r4, [pc, #284]	@ (800c638 <calculateSPLQ31+0x590>)
 800c51a:	9403      	str	r4, [sp, #12]
 800c51c:	4c47      	ldr	r4, [pc, #284]	@ (800c63c <calculateSPLQ31+0x594>)
 800c51e:	9402      	str	r4, [sp, #8]
 800c520:	9301      	str	r3, [sp, #4]
 800c522:	9200      	str	r2, [sp, #0]
 800c524:	0033      	movs	r3, r6
 800c526:	002a      	movs	r2, r5
 800c528:	f000 fa86 	bl	800ca38 <scaleSPL>
             (int32_t *) &SPL_int, (int32_t *) &SPL_frac_1dp);
    for (uint32_t i=0; i<SOUND_FREQ_BANDS; i++)
 800c52c:	2300      	movs	r3, #0
 800c52e:	2290      	movs	r2, #144	@ 0x90
 800c530:	18ba      	adds	r2, r7, r2
 800c532:	6013      	str	r3, [r2, #0]
 800c534:	e026      	b.n	800c584 <calculateSPLQ31+0x4dc>
    {
        scaleSPL(bandSum[i], dBscale_int, dBscale_frac, 0, 0,
 800c536:	2330      	movs	r3, #48	@ 0x30
 800c538:	18fa      	adds	r2, r7, r3
 800c53a:	2490      	movs	r4, #144	@ 0x90
 800c53c:	193b      	adds	r3, r7, r4
 800c53e:	681b      	ldr	r3, [r3, #0]
 800c540:	00db      	lsls	r3, r3, #3
 800c542:	18d3      	adds	r3, r2, r3
 800c544:	6818      	ldr	r0, [r3, #0]
 800c546:	6859      	ldr	r1, [r3, #4]
 800c548:	230f      	movs	r3, #15
 800c54a:	425d      	negs	r5, r3
 800c54c:	2305      	movs	r3, #5
 800c54e:	425e      	negs	r6, r3
                 (int32_t *) &(bandSPL_int[i]), (int32_t *) &(bandSPL_frac_1dp[i]));
 800c550:	193b      	adds	r3, r7, r4
 800c552:	681b      	ldr	r3, [r3, #0]
 800c554:	009a      	lsls	r2, r3, #2
 800c556:	4b3a      	ldr	r3, [pc, #232]	@ (800c640 <calculateSPLQ31+0x598>)
 800c558:	18d3      	adds	r3, r2, r3
 800c55a:	193a      	adds	r2, r7, r4
 800c55c:	6812      	ldr	r2, [r2, #0]
 800c55e:	0094      	lsls	r4, r2, #2
 800c560:	4a38      	ldr	r2, [pc, #224]	@ (800c644 <calculateSPLQ31+0x59c>)
 800c562:	18a2      	adds	r2, r4, r2
        scaleSPL(bandSum[i], dBscale_int, dBscale_frac, 0, 0,
 800c564:	9203      	str	r2, [sp, #12]
 800c566:	9302      	str	r3, [sp, #8]
 800c568:	2300      	movs	r3, #0
 800c56a:	9301      	str	r3, [sp, #4]
 800c56c:	2300      	movs	r3, #0
 800c56e:	9300      	str	r3, [sp, #0]
 800c570:	0033      	movs	r3, r6
 800c572:	002a      	movs	r2, r5
 800c574:	f000 fa60 	bl	800ca38 <scaleSPL>
    for (uint32_t i=0; i<SOUND_FREQ_BANDS; i++)
 800c578:	2490      	movs	r4, #144	@ 0x90
 800c57a:	193b      	adds	r3, r7, r4
 800c57c:	681b      	ldr	r3, [r3, #0]
 800c57e:	3301      	adds	r3, #1
 800c580:	193a      	adds	r2, r7, r4
 800c582:	6013      	str	r3, [r2, #0]
 800c584:	2390      	movs	r3, #144	@ 0x90
 800c586:	18fb      	adds	r3, r7, r3
 800c588:	681b      	ldr	r3, [r3, #0]
 800c58a:	2b05      	cmp	r3, #5
 800c58c:	d9d3      	bls.n	800c536 <calculateSPLQ31+0x48e>
    }

    spl_int_sum += SPL_int;
 800c58e:	4b2b      	ldr	r3, [pc, #172]	@ (800c63c <calculateSPLQ31+0x594>)
 800c590:	681a      	ldr	r2, [r3, #0]
 800c592:	4b2d      	ldr	r3, [pc, #180]	@ (800c648 <calculateSPLQ31+0x5a0>)
 800c594:	681b      	ldr	r3, [r3, #0]
 800c596:	18d2      	adds	r2, r2, r3
 800c598:	4b2b      	ldr	r3, [pc, #172]	@ (800c648 <calculateSPLQ31+0x5a0>)
 800c59a:	601a      	str	r2, [r3, #0]
    spl_frac1dp_sum += SPL_frac_1dp;
 800c59c:	4b26      	ldr	r3, [pc, #152]	@ (800c638 <calculateSPLQ31+0x590>)
 800c59e:	681a      	ldr	r2, [r3, #0]
 800c5a0:	4b2a      	ldr	r3, [pc, #168]	@ (800c64c <calculateSPLQ31+0x5a4>)
 800c5a2:	681b      	ldr	r3, [r3, #0]
 800c5a4:	18d2      	adds	r2, r2, r3
 800c5a6:	4b29      	ldr	r3, [pc, #164]	@ (800c64c <calculateSPLQ31+0x5a4>)
 800c5a8:	601a      	str	r2, [r3, #0]

    for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 800c5aa:	2300      	movs	r3, #0
 800c5ac:	228c      	movs	r2, #140	@ 0x8c
 800c5ae:	18ba      	adds	r2, r7, r2
 800c5b0:	6013      	str	r3, [r2, #0]
 800c5b2:	e025      	b.n	800c600 <calculateSPLQ31+0x558>
    {
        band_spl_int_sum[i] += bandSPL_int[i];
 800c5b4:	4b22      	ldr	r3, [pc, #136]	@ (800c640 <calculateSPLQ31+0x598>)
 800c5b6:	208c      	movs	r0, #140	@ 0x8c
 800c5b8:	183a      	adds	r2, r7, r0
 800c5ba:	6812      	ldr	r2, [r2, #0]
 800c5bc:	0092      	lsls	r2, r2, #2
 800c5be:	58d2      	ldr	r2, [r2, r3]
 800c5c0:	4b23      	ldr	r3, [pc, #140]	@ (800c650 <calculateSPLQ31+0x5a8>)
 800c5c2:	1839      	adds	r1, r7, r0
 800c5c4:	6809      	ldr	r1, [r1, #0]
 800c5c6:	0089      	lsls	r1, r1, #2
 800c5c8:	58cb      	ldr	r3, [r1, r3]
 800c5ca:	18d1      	adds	r1, r2, r3
 800c5cc:	4b20      	ldr	r3, [pc, #128]	@ (800c650 <calculateSPLQ31+0x5a8>)
 800c5ce:	183a      	adds	r2, r7, r0
 800c5d0:	6812      	ldr	r2, [r2, #0]
 800c5d2:	0092      	lsls	r2, r2, #2
 800c5d4:	50d1      	str	r1, [r2, r3]
        band_spl_frac1dp_sum[i] += bandSPL_frac_1dp[i];
 800c5d6:	4b1b      	ldr	r3, [pc, #108]	@ (800c644 <calculateSPLQ31+0x59c>)
 800c5d8:	183a      	adds	r2, r7, r0
 800c5da:	6812      	ldr	r2, [r2, #0]
 800c5dc:	0092      	lsls	r2, r2, #2
 800c5de:	58d2      	ldr	r2, [r2, r3]
 800c5e0:	4b1c      	ldr	r3, [pc, #112]	@ (800c654 <calculateSPLQ31+0x5ac>)
 800c5e2:	1839      	adds	r1, r7, r0
 800c5e4:	6809      	ldr	r1, [r1, #0]
 800c5e6:	0089      	lsls	r1, r1, #2
 800c5e8:	58cb      	ldr	r3, [r1, r3]
 800c5ea:	18d1      	adds	r1, r2, r3
 800c5ec:	4b19      	ldr	r3, [pc, #100]	@ (800c654 <calculateSPLQ31+0x5ac>)
 800c5ee:	183a      	adds	r2, r7, r0
 800c5f0:	6812      	ldr	r2, [r2, #0]
 800c5f2:	0092      	lsls	r2, r2, #2
 800c5f4:	50d1      	str	r1, [r2, r3]
    for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 800c5f6:	183b      	adds	r3, r7, r0
 800c5f8:	681b      	ldr	r3, [r3, #0]
 800c5fa:	3301      	adds	r3, #1
 800c5fc:	183a      	adds	r2, r7, r0
 800c5fe:	6013      	str	r3, [r2, #0]
 800c600:	238c      	movs	r3, #140	@ 0x8c
 800c602:	18fb      	adds	r3, r7, r3
 800c604:	681b      	ldr	r3, [r3, #0]
 800c606:	2b05      	cmp	r3, #5
 800c608:	d9d4      	bls.n	800c5b4 <calculateSPLQ31+0x50c>
    }

    spl_sum_count++;
 800c60a:	4b13      	ldr	r3, [pc, #76]	@ (800c658 <calculateSPLQ31+0x5b0>)
 800c60c:	681b      	ldr	r3, [r3, #0]
 800c60e:	1c5a      	adds	r2, r3, #1
 800c610:	4b11      	ldr	r3, [pc, #68]	@ (800c658 <calculateSPLQ31+0x5b0>)
 800c612:	601a      	str	r2, [r3, #0]
    if (spl_sum_count >= FILTER_SPL_N)
 800c614:	4b10      	ldr	r3, [pc, #64]	@ (800c658 <calculateSPLQ31+0x5b0>)
 800c616:	681b      	ldr	r3, [r3, #0]
 800c618:	2b0f      	cmp	r3, #15
 800c61a:	d905      	bls.n	800c628 <calculateSPLQ31+0x580>
    {
        SPLcalcComplete = true;
 800c61c:	4b0f      	ldr	r3, [pc, #60]	@ (800c65c <calculateSPLQ31+0x5b4>)
 800c61e:	2201      	movs	r2, #1
 800c620:	701a      	strb	r2, [r3, #0]
        SPLcalcEnabled = false;
 800c622:	4b0f      	ldr	r3, [pc, #60]	@ (800c660 <calculateSPLQ31+0x5b8>)
 800c624:	2200      	movs	r2, #0
 800c626:	701a      	strb	r2, [r3, #0]
    }
}
 800c628:	46c0      	nop			@ (mov r8, r8)
 800c62a:	46bd      	mov	sp, r7
 800c62c:	b02f      	add	sp, #188	@ 0xbc
 800c62e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c630:	200000bc 	.word	0x200000bc
 800c634:	200000c0 	.word	0x200000c0
 800c638:	2000135c 	.word	0x2000135c
 800c63c:	20001358 	.word	0x20001358
 800c640:	20001360 	.word	0x20001360
 800c644:	20001378 	.word	0x20001378
 800c648:	20001da0 	.word	0x20001da0
 800c64c:	20001da4 	.word	0x20001da4
 800c650:	20001da8 	.word	0x20001da8
 800c654:	20001dc0 	.word	0x20001dc0
 800c658:	20001dd8 	.word	0x20001dd8
 800c65c:	2000134f 	.word	0x2000134f
 800c660:	2000134d 	.word	0x2000134d

0800c664 <resetSPLstate>:

static void resetSPLstate(void)
{
 800c664:	b580      	push	{r7, lr}
 800c666:	b082      	sub	sp, #8
 800c668:	af00      	add	r7, sp, #0
    spl_int_sum = 0;
 800c66a:	4b11      	ldr	r3, [pc, #68]	@ (800c6b0 <resetSPLstate+0x4c>)
 800c66c:	2200      	movs	r2, #0
 800c66e:	601a      	str	r2, [r3, #0]
    spl_frac1dp_sum = 0;
 800c670:	4b10      	ldr	r3, [pc, #64]	@ (800c6b4 <resetSPLstate+0x50>)
 800c672:	2200      	movs	r2, #0
 800c674:	601a      	str	r2, [r3, #0]
    spl_sum_count = 0;
 800c676:	4b10      	ldr	r3, [pc, #64]	@ (800c6b8 <resetSPLstate+0x54>)
 800c678:	2200      	movs	r2, #0
 800c67a:	601a      	str	r2, [r3, #0]
    for (uint32_t i=0; i<SOUND_FREQ_BANDS; i++)
 800c67c:	2300      	movs	r3, #0
 800c67e:	607b      	str	r3, [r7, #4]
 800c680:	e00c      	b.n	800c69c <resetSPLstate+0x38>
    {
        band_spl_int_sum[i] = 0;
 800c682:	4b0e      	ldr	r3, [pc, #56]	@ (800c6bc <resetSPLstate+0x58>)
 800c684:	687a      	ldr	r2, [r7, #4]
 800c686:	0092      	lsls	r2, r2, #2
 800c688:	2100      	movs	r1, #0
 800c68a:	50d1      	str	r1, [r2, r3]
        band_spl_frac1dp_sum[i] = 0;
 800c68c:	4b0c      	ldr	r3, [pc, #48]	@ (800c6c0 <resetSPLstate+0x5c>)
 800c68e:	687a      	ldr	r2, [r7, #4]
 800c690:	0092      	lsls	r2, r2, #2
 800c692:	2100      	movs	r1, #0
 800c694:	50d1      	str	r1, [r2, r3]
    for (uint32_t i=0; i<SOUND_FREQ_BANDS; i++)
 800c696:	687b      	ldr	r3, [r7, #4]
 800c698:	3301      	adds	r3, #1
 800c69a:	607b      	str	r3, [r7, #4]
 800c69c:	687b      	ldr	r3, [r7, #4]
 800c69e:	2b05      	cmp	r3, #5
 800c6a0:	d9ef      	bls.n	800c682 <resetSPLstate+0x1e>
    }
    SPLcalcComplete = false;
 800c6a2:	4b08      	ldr	r3, [pc, #32]	@ (800c6c4 <resetSPLstate+0x60>)
 800c6a4:	2200      	movs	r2, #0
 800c6a6:	701a      	strb	r2, [r3, #0]
}
 800c6a8:	46c0      	nop			@ (mov r8, r8)
 800c6aa:	46bd      	mov	sp, r7
 800c6ac:	b002      	add	sp, #8
 800c6ae:	bd80      	pop	{r7, pc}
 800c6b0:	20001da0 	.word	0x20001da0
 800c6b4:	20001da4 	.word	0x20001da4
 800c6b8:	20001dd8 	.word	0x20001dd8
 800c6bc:	20001da8 	.word	0x20001da8
 800c6c0:	20001dc0 	.word	0x20001dc0
 800c6c4:	2000134f 	.word	0x2000134f

0800c6c8 <getFilteredMaxAmplitudeQ31>:
// Uses a simple single-pole hi-pass IIR filter to remove the input dc offset.
// Uses Q31 operations.
static uint32_t getFilteredMaxAmplitudeQ31(const int32_t * data,
                                           const uint32_t length, bool reset,
                                           bool updateMaxAmpFollower)
{
 800c6c8:	b5b0      	push	{r4, r5, r7, lr}
 800c6ca:	b090      	sub	sp, #64	@ 0x40
 800c6cc:	af00      	add	r7, sp, #0
 800c6ce:	60f8      	str	r0, [r7, #12]
 800c6d0:	60b9      	str	r1, [r7, #8]
 800c6d2:	0019      	movs	r1, r3
 800c6d4:	1dfb      	adds	r3, r7, #7
 800c6d6:	701a      	strb	r2, [r3, #0]
 800c6d8:	1dbb      	adds	r3, r7, #6
 800c6da:	1c0a      	adds	r2, r1, #0
 800c6dc:	701a      	strb	r2, [r3, #0]
    static q31_t filtered = 0;
    static q31_t lastData = 0;

    if (reset)
 800c6de:	1dfb      	adds	r3, r7, #7
 800c6e0:	781b      	ldrb	r3, [r3, #0]
 800c6e2:	2b00      	cmp	r3, #0
 800c6e4:	d005      	beq.n	800c6f2 <getFilteredMaxAmplitudeQ31+0x2a>
    {
        // Reset the state of the digital filter,
        // e.g. if the mic has been disabled then re-enabled.
        filtered = 0;
 800c6e6:	4b3b      	ldr	r3, [pc, #236]	@ (800c7d4 <getFilteredMaxAmplitudeQ31+0x10c>)
 800c6e8:	2200      	movs	r2, #0
 800c6ea:	601a      	str	r2, [r3, #0]
        lastData = 0;
 800c6ec:	4b3a      	ldr	r3, [pc, #232]	@ (800c7d8 <getFilteredMaxAmplitudeQ31+0x110>)
 800c6ee:	2200      	movs	r2, #0
 800c6f0:	601a      	str	r2, [r3, #0]
    }
    q31_t maxAmp = 0;
 800c6f2:	2300      	movs	r3, #0
 800c6f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
    q31_t minAmp = 0;
 800c6f6:	2300      	movs	r3, #0
 800c6f8:	63bb      	str	r3, [r7, #56]	@ 0x38

    // Apply a bitshift to the incoming data, before filtering, to maximise the
    // dynamic range but while also ensuring the intermediate value cannot
    // overflow (three Q31 values are added together).
    const uint32_t scalingBitShift = 5;
 800c6fa:	2305      	movs	r3, #5
 800c6fc:	633b      	str	r3, [r7, #48]	@ 0x30
    for (uint32_t i = 0; i < length; i++)
 800c6fe:	2300      	movs	r3, #0
 800c700:	637b      	str	r3, [r7, #52]	@ 0x34
 800c702:	e040      	b.n	800c786 <getFilteredMaxAmplitudeQ31+0xbe>
    {
        q31_t fx = (q31_t) (data[i] << scalingBitShift);
 800c704:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c706:	009b      	lsls	r3, r3, #2
 800c708:	68fa      	ldr	r2, [r7, #12]
 800c70a:	18d3      	adds	r3, r2, r3
 800c70c:	681a      	ldr	r2, [r3, #0]
 800c70e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c710:	409a      	lsls	r2, r3
 800c712:	0013      	movs	r3, r2
 800c714:	61fb      	str	r3, [r7, #28]
        // D = A*B is: arm_mult_q31(&A, &B, &D, 1);
        // D = A+B is: arm_add_q31(&A, &B, &D, 1);

        // Now do the filter calculation:
        q31_t r1, r2, r3;
        lastData = -lastData;
 800c716:	4b30      	ldr	r3, [pc, #192]	@ (800c7d8 <getFilteredMaxAmplitudeQ31+0x110>)
 800c718:	681b      	ldr	r3, [r3, #0]
 800c71a:	425a      	negs	r2, r3
 800c71c:	4b2e      	ldr	r3, [pc, #184]	@ (800c7d8 <getFilteredMaxAmplitudeQ31+0x110>)
 800c71e:	601a      	str	r2, [r3, #0]
        arm_add_q31(&fx, &lastData, &r1, 1); // r1 = fx - lastData
 800c720:	2418      	movs	r4, #24
 800c722:	193a      	adds	r2, r7, r4
 800c724:	492c      	ldr	r1, [pc, #176]	@ (800c7d8 <getFilteredMaxAmplitudeQ31+0x110>)
 800c726:	231c      	movs	r3, #28
 800c728:	18f8      	adds	r0, r7, r3
 800c72a:	2301      	movs	r3, #1
 800c72c:	f011 fb12 	bl	801dd54 <arm_add_q31>
        arm_mult_q31((q31_t *) &a0, &r1, &r2, 1);      // r2 = a0*r1
 800c730:	2514      	movs	r5, #20
 800c732:	197a      	adds	r2, r7, r5
 800c734:	1939      	adds	r1, r7, r4
 800c736:	4829      	ldr	r0, [pc, #164]	@ (800c7dc <getFilteredMaxAmplitudeQ31+0x114>)
 800c738:	2301      	movs	r3, #1
 800c73a:	f011 fad9 	bl	801dcf0 <arm_mult_q31>
        arm_mult_q31((q31_t *) &b, &filtered, &r3, 1); // r3 = b*filtered
 800c73e:	2410      	movs	r4, #16
 800c740:	193a      	adds	r2, r7, r4
 800c742:	4924      	ldr	r1, [pc, #144]	@ (800c7d4 <getFilteredMaxAmplitudeQ31+0x10c>)
 800c744:	4826      	ldr	r0, [pc, #152]	@ (800c7e0 <getFilteredMaxAmplitudeQ31+0x118>)
 800c746:	2301      	movs	r3, #1
 800c748:	f011 fad2 	bl	801dcf0 <arm_mult_q31>
        arm_add_q31(&r2, &r3, &filtered, 1); // filtered = r2 + r3
 800c74c:	4a21      	ldr	r2, [pc, #132]	@ (800c7d4 <getFilteredMaxAmplitudeQ31+0x10c>)
 800c74e:	1939      	adds	r1, r7, r4
 800c750:	1978      	adds	r0, r7, r5
 800c752:	2301      	movs	r3, #1
 800c754:	f011 fafe 	bl	801dd54 <arm_add_q31>

        lastData = fx;
 800c758:	69fa      	ldr	r2, [r7, #28]
 800c75a:	4b1f      	ldr	r3, [pc, #124]	@ (800c7d8 <getFilteredMaxAmplitudeQ31+0x110>)
 800c75c:	601a      	str	r2, [r3, #0]
        if (filtered > maxAmp)
 800c75e:	4b1d      	ldr	r3, [pc, #116]	@ (800c7d4 <getFilteredMaxAmplitudeQ31+0x10c>)
 800c760:	681b      	ldr	r3, [r3, #0]
 800c762:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800c764:	429a      	cmp	r2, r3
 800c766:	da03      	bge.n	800c770 <getFilteredMaxAmplitudeQ31+0xa8>
        {
            maxAmp = filtered;
 800c768:	4b1a      	ldr	r3, [pc, #104]	@ (800c7d4 <getFilteredMaxAmplitudeQ31+0x10c>)
 800c76a:	681b      	ldr	r3, [r3, #0]
 800c76c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c76e:	e007      	b.n	800c780 <getFilteredMaxAmplitudeQ31+0xb8>
        }
        else if (filtered < minAmp)
 800c770:	4b18      	ldr	r3, [pc, #96]	@ (800c7d4 <getFilteredMaxAmplitudeQ31+0x10c>)
 800c772:	681b      	ldr	r3, [r3, #0]
 800c774:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c776:	429a      	cmp	r2, r3
 800c778:	dd02      	ble.n	800c780 <getFilteredMaxAmplitudeQ31+0xb8>
        {
            minAmp = filtered;
 800c77a:	4b16      	ldr	r3, [pc, #88]	@ (800c7d4 <getFilteredMaxAmplitudeQ31+0x10c>)
 800c77c:	681b      	ldr	r3, [r3, #0]
 800c77e:	63bb      	str	r3, [r7, #56]	@ 0x38
    for (uint32_t i = 0; i < length; i++)
 800c780:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c782:	3301      	adds	r3, #1
 800c784:	637b      	str	r3, [r7, #52]	@ 0x34
 800c786:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800c788:	68bb      	ldr	r3, [r7, #8]
 800c78a:	429a      	cmp	r2, r3
 800c78c:	d3ba      	bcc.n	800c704 <getFilteredMaxAmplitudeQ31+0x3c>
        }
    }
    // Find the maximum absolute amplitude from the signed values:
    uint32_t absMin = abs(minAmp);
 800c78e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c790:	17da      	asrs	r2, r3, #31
 800c792:	189b      	adds	r3, r3, r2
 800c794:	4053      	eors	r3, r2
 800c796:	62fb      	str	r3, [r7, #44]	@ 0x2c
    uint32_t absMax = (uint32_t) maxAmp;
 800c798:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c79a:	62bb      	str	r3, [r7, #40]	@ 0x28
    uint32_t absMaxAmp = (absMin > absMax) ? absMin : absMax;
 800c79c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c79e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c7a0:	4293      	cmp	r3, r2
 800c7a2:	d200      	bcs.n	800c7a6 <getFilteredMaxAmplitudeQ31+0xde>
 800c7a4:	0013      	movs	r3, r2
 800c7a6:	627b      	str	r3, [r7, #36]	@ 0x24

    // Reverse the scaling bitshift
    uint32_t absMaxAmp32 = (uint32_t) (absMaxAmp >> scalingBitShift);
 800c7a8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c7aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c7ac:	40da      	lsrs	r2, r3
 800c7ae:	0013      	movs	r3, r2
 800c7b0:	623b      	str	r3, [r7, #32]

    if (updateMaxAmpFollower && (absMaxAmp32 > maximumAmplitude))
 800c7b2:	1dbb      	adds	r3, r7, #6
 800c7b4:	781b      	ldrb	r3, [r3, #0]
 800c7b6:	2b00      	cmp	r3, #0
 800c7b8:	d007      	beq.n	800c7ca <getFilteredMaxAmplitudeQ31+0x102>
 800c7ba:	4b0a      	ldr	r3, [pc, #40]	@ (800c7e4 <getFilteredMaxAmplitudeQ31+0x11c>)
 800c7bc:	681b      	ldr	r3, [r3, #0]
 800c7be:	6a3a      	ldr	r2, [r7, #32]
 800c7c0:	429a      	cmp	r2, r3
 800c7c2:	d902      	bls.n	800c7ca <getFilteredMaxAmplitudeQ31+0x102>
    {
        maximumAmplitude = absMaxAmp32;
 800c7c4:	4b07      	ldr	r3, [pc, #28]	@ (800c7e4 <getFilteredMaxAmplitudeQ31+0x11c>)
 800c7c6:	6a3a      	ldr	r2, [r7, #32]
 800c7c8:	601a      	str	r2, [r3, #0]
    }
    return absMaxAmp32;
 800c7ca:	6a3b      	ldr	r3, [r7, #32]
}
 800c7cc:	0018      	movs	r0, r3
 800c7ce:	46bd      	mov	sp, r7
 800c7d0:	b010      	add	sp, #64	@ 0x40
 800c7d2:	bdb0      	pop	{r4, r5, r7, pc}
 800c7d4:	200021dc 	.word	0x200021dc
 800c7d8:	200021e0 	.word	0x200021e0
 800c7dc:	08024a24 	.word	0x08024a24
 800c7e0:	08024a28 	.word	0x08024a28
 800c7e4:	20001354 	.word	0x20001354

0800c7e8 <floatToIntAndFrac2dp>:
// The float input must be positive and fit in a uint32.
// e.g. to print the result: printf("%i.%02i\n", intpart, fracpart2dp);
// To convert to float: intpart + (fracpart2dp/100.0)
void floatToIntAndFrac2dp(float positiveValue, uint32_t *intpart,
                          uint8_t *fracpart2dp)
{
 800c7e8:	b580      	push	{r7, lr}
 800c7ea:	b086      	sub	sp, #24
 800c7ec:	af00      	add	r7, sp, #0
 800c7ee:	60f8      	str	r0, [r7, #12]
 800c7f0:	60b9      	str	r1, [r7, #8]
 800c7f2:	607a      	str	r2, [r7, #4]
    uint32_t rounded = (uint32_t) roundf(positiveValue*100.0f);
 800c7f4:	4913      	ldr	r1, [pc, #76]	@ (800c844 <floatToIntAndFrac2dp+0x5c>)
 800c7f6:	68f8      	ldr	r0, [r7, #12]
 800c7f8:	f7f4 fbd2 	bl	8000fa0 <__aeabi_fmul>
 800c7fc:	1c03      	adds	r3, r0, #0
 800c7fe:	1c18      	adds	r0, r3, #0
 800c800:	f015 fedc 	bl	80225bc <roundf>
 800c804:	1c03      	adds	r3, r0, #0
 800c806:	1c18      	adds	r0, r3, #0
 800c808:	f7f3 ff08 	bl	800061c <__aeabi_f2uiz>
 800c80c:	0003      	movs	r3, r0
 800c80e:	617b      	str	r3, [r7, #20]
    intpart[0] = rounded/100;
 800c810:	697b      	ldr	r3, [r7, #20]
 800c812:	2164      	movs	r1, #100	@ 0x64
 800c814:	0018      	movs	r0, r3
 800c816:	f7f3 fcc5 	bl	80001a4 <__udivsi3>
 800c81a:	0003      	movs	r3, r0
 800c81c:	001a      	movs	r2, r3
 800c81e:	68bb      	ldr	r3, [r7, #8]
 800c820:	601a      	str	r2, [r3, #0]
    fracpart2dp[0] = (uint8_t) (rounded - (intpart[0]*100));
 800c822:	697b      	ldr	r3, [r7, #20]
 800c824:	b2da      	uxtb	r2, r3
 800c826:	68bb      	ldr	r3, [r7, #8]
 800c828:	681b      	ldr	r3, [r3, #0]
 800c82a:	b2db      	uxtb	r3, r3
 800c82c:	2164      	movs	r1, #100	@ 0x64
 800c82e:	434b      	muls	r3, r1
 800c830:	b2db      	uxtb	r3, r3
 800c832:	1ad3      	subs	r3, r2, r3
 800c834:	b2da      	uxtb	r2, r3
 800c836:	687b      	ldr	r3, [r7, #4]
 800c838:	701a      	strb	r2, [r3, #0]
}
 800c83a:	46c0      	nop			@ (mov r8, r8)
 800c83c:	46bd      	mov	sp, r7
 800c83e:	b006      	add	sp, #24
 800c840:	bd80      	pop	{r7, pc}
 800c842:	46c0      	nop			@ (mov r8, r8)
 800c844:	42c80000 	.word	0x42c80000

0800c848 <floatToIntAndFrac1dp>:
// The float input must be positive and fit in a uint32.
// e.g. to print the result: printf("%i.%i\n", intpart, fracpart1dp);
// To convert to float: intpart + (fracpart1dp/10.0)
void floatToIntAndFrac1dp(float positiveValue, uint32_t *intpart,
                          uint8_t *fracpart1dp)
{
 800c848:	b580      	push	{r7, lr}
 800c84a:	b086      	sub	sp, #24
 800c84c:	af00      	add	r7, sp, #0
 800c84e:	60f8      	str	r0, [r7, #12]
 800c850:	60b9      	str	r1, [r7, #8]
 800c852:	607a      	str	r2, [r7, #4]
    uint32_t rounded = (uint32_t) roundf(positiveValue*10.0f);
 800c854:	4914      	ldr	r1, [pc, #80]	@ (800c8a8 <floatToIntAndFrac1dp+0x60>)
 800c856:	68f8      	ldr	r0, [r7, #12]
 800c858:	f7f4 fba2 	bl	8000fa0 <__aeabi_fmul>
 800c85c:	1c03      	adds	r3, r0, #0
 800c85e:	1c18      	adds	r0, r3, #0
 800c860:	f015 feac 	bl	80225bc <roundf>
 800c864:	1c03      	adds	r3, r0, #0
 800c866:	1c18      	adds	r0, r3, #0
 800c868:	f7f3 fed8 	bl	800061c <__aeabi_f2uiz>
 800c86c:	0003      	movs	r3, r0
 800c86e:	617b      	str	r3, [r7, #20]
    intpart[0] = rounded/10;
 800c870:	697b      	ldr	r3, [r7, #20]
 800c872:	210a      	movs	r1, #10
 800c874:	0018      	movs	r0, r3
 800c876:	f7f3 fc95 	bl	80001a4 <__udivsi3>
 800c87a:	0003      	movs	r3, r0
 800c87c:	001a      	movs	r2, r3
 800c87e:	68bb      	ldr	r3, [r7, #8]
 800c880:	601a      	str	r2, [r3, #0]
    fracpart1dp[0] = (uint8_t) (rounded - (intpart[0]*10));
 800c882:	697b      	ldr	r3, [r7, #20]
 800c884:	b2da      	uxtb	r2, r3
 800c886:	68bb      	ldr	r3, [r7, #8]
 800c888:	681b      	ldr	r3, [r3, #0]
 800c88a:	b2db      	uxtb	r3, r3
 800c88c:	1c19      	adds	r1, r3, #0
 800c88e:	0089      	lsls	r1, r1, #2
 800c890:	18cb      	adds	r3, r1, r3
 800c892:	18db      	adds	r3, r3, r3
 800c894:	b2db      	uxtb	r3, r3
 800c896:	1ad3      	subs	r3, r2, r3
 800c898:	b2da      	uxtb	r2, r3
 800c89a:	687b      	ldr	r3, [r7, #4]
 800c89c:	701a      	strb	r2, [r3, #0]
}
 800c89e:	46c0      	nop			@ (mov r8, r8)
 800c8a0:	46bd      	mov	sp, r7
 800c8a2:	b006      	add	sp, #24
 800c8a4:	bd80      	pop	{r7, pc}
 800c8a6:	46c0      	nop			@ (mov r8, r8)
 800c8a8:	41200000 	.word	0x41200000

0800c8ac <sumToIntAverage>:

// Convert an accumulated sum into an average value, in (integer, fractional) format.
void sumToIntAverage(uint8_t * intpart, uint8_t * fracpart1dp, const int32_t intSum,
                     const int32_t frac1dpSum, const uint32_t sumCount)
{
 800c8ac:	b590      	push	{r4, r7, lr}
 800c8ae:	b087      	sub	sp, #28
 800c8b0:	af00      	add	r7, sp, #0
 800c8b2:	60f8      	str	r0, [r7, #12]
 800c8b4:	60b9      	str	r1, [r7, #8]
 800c8b6:	607a      	str	r2, [r7, #4]
 800c8b8:	603b      	str	r3, [r7, #0]
    float splAverage = (((float) intSum) +
 800c8ba:	6878      	ldr	r0, [r7, #4]
 800c8bc:	f7f4 fe88 	bl	80015d0 <__aeabi_i2f>
 800c8c0:	1c04      	adds	r4, r0, #0
                       (((float) frac1dpSum)/10.0f))/((float) sumCount);
 800c8c2:	6838      	ldr	r0, [r7, #0]
 800c8c4:	f7f4 fe84 	bl	80015d0 <__aeabi_i2f>
 800c8c8:	1c03      	adds	r3, r0, #0
 800c8ca:	4918      	ldr	r1, [pc, #96]	@ (800c92c <sumToIntAverage+0x80>)
 800c8cc:	1c18      	adds	r0, r3, #0
 800c8ce:	f7f4 f981 	bl	8000bd4 <__aeabi_fdiv>
 800c8d2:	1c03      	adds	r3, r0, #0
    float splAverage = (((float) intSum) +
 800c8d4:	1c19      	adds	r1, r3, #0
 800c8d6:	1c20      	adds	r0, r4, #0
 800c8d8:	f7f3 fff2 	bl	80008c0 <__aeabi_fadd>
 800c8dc:	1c03      	adds	r3, r0, #0
 800c8de:	1c1c      	adds	r4, r3, #0
                       (((float) frac1dpSum)/10.0f))/((float) sumCount);
 800c8e0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c8e2:	f7f4 fec1 	bl	8001668 <__aeabi_ui2f>
 800c8e6:	1c03      	adds	r3, r0, #0
    float splAverage = (((float) intSum) +
 800c8e8:	1c19      	adds	r1, r3, #0
 800c8ea:	1c20      	adds	r0, r4, #0
 800c8ec:	f7f4 f972 	bl	8000bd4 <__aeabi_fdiv>
 800c8f0:	1c03      	adds	r3, r0, #0
 800c8f2:	617b      	str	r3, [r7, #20]
    uint32_t intpart32 = 0;
 800c8f4:	2300      	movs	r3, #0
 800c8f6:	613b      	str	r3, [r7, #16]
    floatToIntAndFrac1dp(splAverage, &intpart32, fracpart1dp);
 800c8f8:	68ba      	ldr	r2, [r7, #8]
 800c8fa:	2310      	movs	r3, #16
 800c8fc:	18f9      	adds	r1, r7, r3
 800c8fe:	697b      	ldr	r3, [r7, #20]
 800c900:	1c18      	adds	r0, r3, #0
 800c902:	f7ff ffa1 	bl	800c848 <floatToIntAndFrac1dp>

    if (intpart32 > UINT8_MAX)
 800c906:	693b      	ldr	r3, [r7, #16]
 800c908:	2bff      	cmp	r3, #255	@ 0xff
 800c90a:	d906      	bls.n	800c91a <sumToIntAverage+0x6e>
    {
        intpart[0] = UINT8_MAX;
 800c90c:	68fb      	ldr	r3, [r7, #12]
 800c90e:	22ff      	movs	r2, #255	@ 0xff
 800c910:	701a      	strb	r2, [r3, #0]
        fracpart1dp[0] = 9;
 800c912:	68bb      	ldr	r3, [r7, #8]
 800c914:	2209      	movs	r2, #9
 800c916:	701a      	strb	r2, [r3, #0]
    }
    else
    {
        intpart[0] = (uint8_t) intpart32;
    }
}
 800c918:	e003      	b.n	800c922 <sumToIntAverage+0x76>
        intpart[0] = (uint8_t) intpart32;
 800c91a:	693b      	ldr	r3, [r7, #16]
 800c91c:	b2da      	uxtb	r2, r3
 800c91e:	68fb      	ldr	r3, [r7, #12]
 800c920:	701a      	strb	r2, [r3, #0]
}
 800c922:	46c0      	nop			@ (mov r8, r8)
 800c924:	46bd      	mov	sp, r7
 800c926:	b007      	add	sp, #28
 800c928:	bd90      	pop	{r4, r7, pc}
 800c92a:	46c0      	nop			@ (mov r8, r8)
 800c92c:	41200000 	.word	0x41200000

0800c930 <findMinMax>:


// Find the smallest and largest integers in an array.
void findMinMax(int32_t * min, int32_t * max, const int32_t * array,
                const uint32_t length)
{
 800c930:	b580      	push	{r7, lr}
 800c932:	b086      	sub	sp, #24
 800c934:	af00      	add	r7, sp, #0
 800c936:	60f8      	str	r0, [r7, #12]
 800c938:	60b9      	str	r1, [r7, #8]
 800c93a:	607a      	str	r2, [r7, #4]
 800c93c:	603b      	str	r3, [r7, #0]
    max[0] = INT32_MIN;
 800c93e:	68bb      	ldr	r3, [r7, #8]
 800c940:	2280      	movs	r2, #128	@ 0x80
 800c942:	0612      	lsls	r2, r2, #24
 800c944:	601a      	str	r2, [r3, #0]
    min[0] = INT32_MAX;
 800c946:	68fb      	ldr	r3, [r7, #12]
 800c948:	4a18      	ldr	r2, [pc, #96]	@ (800c9ac <findMinMax+0x7c>)
 800c94a:	601a      	str	r2, [r3, #0]
    for (uint32_t i = 0; i < length; i++)
 800c94c:	2300      	movs	r3, #0
 800c94e:	617b      	str	r3, [r7, #20]
 800c950:	e022      	b.n	800c998 <findMinMax+0x68>
    {
        if (array[i] < min[0])
 800c952:	697b      	ldr	r3, [r7, #20]
 800c954:	009b      	lsls	r3, r3, #2
 800c956:	687a      	ldr	r2, [r7, #4]
 800c958:	18d3      	adds	r3, r2, r3
 800c95a:	681a      	ldr	r2, [r3, #0]
 800c95c:	68fb      	ldr	r3, [r7, #12]
 800c95e:	681b      	ldr	r3, [r3, #0]
 800c960:	429a      	cmp	r2, r3
 800c962:	da06      	bge.n	800c972 <findMinMax+0x42>
        {
            min[0] = array[i];
 800c964:	697b      	ldr	r3, [r7, #20]
 800c966:	009b      	lsls	r3, r3, #2
 800c968:	687a      	ldr	r2, [r7, #4]
 800c96a:	18d3      	adds	r3, r2, r3
 800c96c:	681a      	ldr	r2, [r3, #0]
 800c96e:	68fb      	ldr	r3, [r7, #12]
 800c970:	601a      	str	r2, [r3, #0]
        }
        if (array[i] > max[0])
 800c972:	697b      	ldr	r3, [r7, #20]
 800c974:	009b      	lsls	r3, r3, #2
 800c976:	687a      	ldr	r2, [r7, #4]
 800c978:	18d3      	adds	r3, r2, r3
 800c97a:	681a      	ldr	r2, [r3, #0]
 800c97c:	68bb      	ldr	r3, [r7, #8]
 800c97e:	681b      	ldr	r3, [r3, #0]
 800c980:	429a      	cmp	r2, r3
 800c982:	dd06      	ble.n	800c992 <findMinMax+0x62>
        {
            max[0] = array[i];
 800c984:	697b      	ldr	r3, [r7, #20]
 800c986:	009b      	lsls	r3, r3, #2
 800c988:	687a      	ldr	r2, [r7, #4]
 800c98a:	18d3      	adds	r3, r2, r3
 800c98c:	681a      	ldr	r2, [r3, #0]
 800c98e:	68bb      	ldr	r3, [r7, #8]
 800c990:	601a      	str	r2, [r3, #0]
    for (uint32_t i = 0; i < length; i++)
 800c992:	697b      	ldr	r3, [r7, #20]
 800c994:	3301      	adds	r3, #1
 800c996:	617b      	str	r3, [r7, #20]
 800c998:	697a      	ldr	r2, [r7, #20]
 800c99a:	683b      	ldr	r3, [r7, #0]
 800c99c:	429a      	cmp	r2, r3
 800c99e:	d3d8      	bcc.n	800c952 <findMinMax+0x22>
        }
    }
}
 800c9a0:	46c0      	nop			@ (mov r8, r8)
 800c9a2:	46c0      	nop			@ (mov r8, r8)
 800c9a4:	46bd      	mov	sp, r7
 800c9a6:	b006      	add	sp, #24
 800c9a8:	bd80      	pop	{r7, pc}
 800c9aa:	46c0      	nop			@ (mov r8, r8)
 800c9ac:	7fffffff 	.word	0x7fffffff

0800c9b0 <getPo2factor>:

// Find the largest positive integer bitshift m, such that: smallVal*(2^m) <= bigVal.
// This is the largest upward bitshift that can be applied to smallVal such
// that it does not exceed bigVal.
uint32_t getPo2factor(uint32_t bigVal, uint32_t smallVal)
{
 800c9b0:	b580      	push	{r7, lr}
 800c9b2:	b084      	sub	sp, #16
 800c9b4:	af00      	add	r7, sp, #0
 800c9b6:	6078      	str	r0, [r7, #4]
 800c9b8:	6039      	str	r1, [r7, #0]
    uint32_t bitShift = 0;
 800c9ba:	2300      	movs	r3, #0
 800c9bc:	60fb      	str	r3, [r7, #12]
    if ((bigVal < smallVal) || (smallVal == 0))
 800c9be:	687a      	ldr	r2, [r7, #4]
 800c9c0:	683b      	ldr	r3, [r7, #0]
 800c9c2:	429a      	cmp	r2, r3
 800c9c4:	d302      	bcc.n	800c9cc <getPo2factor+0x1c>
 800c9c6:	683b      	ldr	r3, [r7, #0]
 800c9c8:	2b00      	cmp	r3, #0
 800c9ca:	d107      	bne.n	800c9dc <getPo2factor+0x2c>
    {
        return 0;
 800c9cc:	2300      	movs	r3, #0
 800c9ce:	e00d      	b.n	800c9ec <getPo2factor+0x3c>
    }
    while (bigVal >= smallVal)
    {
        bigVal = bigVal >> 1;
 800c9d0:	687b      	ldr	r3, [r7, #4]
 800c9d2:	085b      	lsrs	r3, r3, #1
 800c9d4:	607b      	str	r3, [r7, #4]
        bitShift++;
 800c9d6:	68fb      	ldr	r3, [r7, #12]
 800c9d8:	3301      	adds	r3, #1
 800c9da:	60fb      	str	r3, [r7, #12]
    while (bigVal >= smallVal)
 800c9dc:	687a      	ldr	r2, [r7, #4]
 800c9de:	683b      	ldr	r3, [r7, #0]
 800c9e0:	429a      	cmp	r2, r3
 800c9e2:	d2f5      	bcs.n	800c9d0 <getPo2factor+0x20>
    }
    bitShift -= 1; // do not count the final shift
 800c9e4:	68fb      	ldr	r3, [r7, #12]
 800c9e6:	3b01      	subs	r3, #1
 800c9e8:	60fb      	str	r3, [r7, #12]
    return bitShift;
 800c9ea:	68fb      	ldr	r3, [r7, #12]
}
 800c9ec:	0018      	movs	r0, r3
 800c9ee:	46bd      	mov	sp, r7
 800c9f0:	b004      	add	sp, #16
 800c9f2:	bd80      	pop	{r7, pc}

0800c9f4 <amplitudeDN_to_mPa>:
// The microphone scale factor is ik_mPa.
// Returns integer part and fractional part to 2 d.p.
// Given that ampDN is at most 2^24, the output will always fit in a uint16.
void amplitudeDN_to_mPa(const uint32_t ampDN, const float ik_mPa,
                        uint16_t * intAmp_mPa, uint8_t * frac2dpAmp_mPa)
{
 800c9f4:	b580      	push	{r7, lr}
 800c9f6:	b086      	sub	sp, #24
 800c9f8:	af00      	add	r7, sp, #0
 800c9fa:	60f8      	str	r0, [r7, #12]
 800c9fc:	60b9      	str	r1, [r7, #8]
 800c9fe:	607a      	str	r2, [r7, #4]
 800ca00:	603b      	str	r3, [r7, #0]
    float amp = ((float) ampDN)*ik_mPa;
 800ca02:	68f8      	ldr	r0, [r7, #12]
 800ca04:	f7f4 fe30 	bl	8001668 <__aeabi_ui2f>
 800ca08:	1c03      	adds	r3, r0, #0
 800ca0a:	1c19      	adds	r1, r3, #0
 800ca0c:	68b8      	ldr	r0, [r7, #8]
 800ca0e:	f7f4 fac7 	bl	8000fa0 <__aeabi_fmul>
 800ca12:	1c03      	adds	r3, r0, #0
 800ca14:	617b      	str	r3, [r7, #20]
    uint32_t intpart = 0;
 800ca16:	2300      	movs	r3, #0
 800ca18:	613b      	str	r3, [r7, #16]
    floatToIntAndFrac2dp(amp, &intpart, frac2dpAmp_mPa);
 800ca1a:	683a      	ldr	r2, [r7, #0]
 800ca1c:	2310      	movs	r3, #16
 800ca1e:	18f9      	adds	r1, r7, r3
 800ca20:	697b      	ldr	r3, [r7, #20]
 800ca22:	1c18      	adds	r0, r3, #0
 800ca24:	f7ff fee0 	bl	800c7e8 <floatToIntAndFrac2dp>
    intAmp_mPa[0] = (uint16_t) intpart;
 800ca28:	693b      	ldr	r3, [r7, #16]
 800ca2a:	b29a      	uxth	r2, r3
 800ca2c:	687b      	ldr	r3, [r7, #4]
 800ca2e:	801a      	strh	r2, [r3, #0]
}
 800ca30:	46c0      	nop			@ (mov r8, r8)
 800ca32:	46bd      	mov	sp, r7
 800ca34:	b006      	add	sp, #24
 800ca36:	bd80      	pop	{r7, pc}

0800ca38 <scaleSPL>:
// Find the final SPL value in decibels by taking log, adding the terms accounting
// for the microphone parameters and (for weighted SPL) the weighting scale factor.
void scaleSPL(uint64_t sumSq, const int32_t dBscale_int, const int32_t dBscale_frac,
              const int32_t weightingInt, const int32_t weightingFrac,
              int32_t * SPLintegerPart, int32_t * SPLfractionalPart)
{
 800ca38:	b580      	push	{r7, lr}
 800ca3a:	b084      	sub	sp, #16
 800ca3c:	af00      	add	r7, sp, #0
 800ca3e:	60b8      	str	r0, [r7, #8]
 800ca40:	60f9      	str	r1, [r7, #12]
 800ca42:	607a      	str	r2, [r7, #4]
 800ca44:	603b      	str	r3, [r7, #0]
    // Calculate: SPLvalue = (10.0*log10(sumSq)) + dBscale + weightTerm;
    efficient10log10(sumSq, SPLintegerPart, SPLfractionalPart);
 800ca46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ca48:	6a3a      	ldr	r2, [r7, #32]
 800ca4a:	68b8      	ldr	r0, [r7, #8]
 800ca4c:	68f9      	ldr	r1, [r7, #12]
 800ca4e:	f7fa fb9f 	bl	8007190 <efficient10log10>
    SPLintegerPart[0] = SPLintegerPart[0] + dBscale_int + weightingInt;
 800ca52:	6a3b      	ldr	r3, [r7, #32]
 800ca54:	681a      	ldr	r2, [r3, #0]
 800ca56:	687b      	ldr	r3, [r7, #4]
 800ca58:	18d2      	adds	r2, r2, r3
 800ca5a:	69bb      	ldr	r3, [r7, #24]
 800ca5c:	18d2      	adds	r2, r2, r3
 800ca5e:	6a3b      	ldr	r3, [r7, #32]
 800ca60:	601a      	str	r2, [r3, #0]
    SPLfractionalPart[0] = SPLfractionalPart[0] + dBscale_frac + weightingFrac;
 800ca62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ca64:	681a      	ldr	r2, [r3, #0]
 800ca66:	683b      	ldr	r3, [r7, #0]
 800ca68:	18d2      	adds	r2, r2, r3
 800ca6a:	69fb      	ldr	r3, [r7, #28]
 800ca6c:	18d2      	adds	r2, r2, r3
 800ca6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ca70:	601a      	str	r2, [r3, #0]
    // Apply correction if fractional part is not in range 0->9:
    correctIntFracNumber(SPLintegerPart, SPLfractionalPart);
 800ca72:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ca74:	6a3b      	ldr	r3, [r7, #32]
 800ca76:	0011      	movs	r1, r2
 800ca78:	0018      	movs	r0, r3
 800ca7a:	f7fa fc19 	bl	80072b0 <correctIntFracNumber>
}
 800ca7e:	46c0      	nop			@ (mov r8, r8)
 800ca80:	46bd      	mov	sp, r7
 800ca82:	b004      	add	sp, #16
 800ca84:	bd80      	pop	{r7, pc}

0800ca86 <decodeI2SdataLch>:
// Convert 24-bit I2S sound data into signed 32 bit numbers.
// The input I2S data are split across a uint16 array, and are left-channel only.
// inBuflen is simply the number of elements in inBuf
void decodeI2SdataLch(const uint16_t * inBuf, const uint32_t inBufLength,
                      int32_t * outBuf)
{
 800ca86:	b580      	push	{r7, lr}
 800ca88:	b086      	sub	sp, #24
 800ca8a:	af00      	add	r7, sp, #0
 800ca8c:	60f8      	str	r0, [r7, #12]
 800ca8e:	60b9      	str	r1, [r7, #8]
 800ca90:	607a      	str	r2, [r7, #4]
    uint32_t outCount = 0;
 800ca92:	2300      	movs	r3, #0
 800ca94:	617b      	str	r3, [r7, #20]
    for (uint32_t i = 0; i < inBufLength; i += 4)
 800ca96:	2300      	movs	r3, #0
 800ca98:	613b      	str	r3, [r7, #16]
 800ca9a:	e019      	b.n	800cad0 <decodeI2SdataLch+0x4a>
    {
        // join MS16bits and LS16bits, then shift the result down 8 bits because
        // it is a 24-bit value, rather than a 32-bit one.
        outBuf[outCount] = ((int32_t) ((((uint32_t) inBuf[i]) << 16)
 800ca9c:	693b      	ldr	r3, [r7, #16]
 800ca9e:	005b      	lsls	r3, r3, #1
 800caa0:	68fa      	ldr	r2, [r7, #12]
 800caa2:	18d3      	adds	r3, r2, r3
 800caa4:	881b      	ldrh	r3, [r3, #0]
 800caa6:	041b      	lsls	r3, r3, #16
                                      | ((uint32_t) inBuf[i+1]))) >> 8;
 800caa8:	693a      	ldr	r2, [r7, #16]
 800caaa:	3201      	adds	r2, #1
 800caac:	0052      	lsls	r2, r2, #1
 800caae:	68f9      	ldr	r1, [r7, #12]
 800cab0:	188a      	adds	r2, r1, r2
 800cab2:	8812      	ldrh	r2, [r2, #0]
 800cab4:	4313      	orrs	r3, r2
        outBuf[outCount] = ((int32_t) ((((uint32_t) inBuf[i]) << 16)
 800cab6:	0019      	movs	r1, r3
 800cab8:	697b      	ldr	r3, [r7, #20]
 800caba:	009b      	lsls	r3, r3, #2
 800cabc:	687a      	ldr	r2, [r7, #4]
 800cabe:	18d3      	adds	r3, r2, r3
                                      | ((uint32_t) inBuf[i+1]))) >> 8;
 800cac0:	120a      	asrs	r2, r1, #8
        outBuf[outCount] = ((int32_t) ((((uint32_t) inBuf[i]) << 16)
 800cac2:	601a      	str	r2, [r3, #0]
//          Info("input msw 0x%04X ", inBuf[i]);
//          Info("input lsw 0x%04X ", inBuf[i+1]);
//          Info("converted 0x%08X ", outBuf[outCount]);
//          Info("converted %d ", outBuf[outCount]);
//        }
        outCount++;
 800cac4:	697b      	ldr	r3, [r7, #20]
 800cac6:	3301      	adds	r3, #1
 800cac8:	617b      	str	r3, [r7, #20]
    for (uint32_t i = 0; i < inBufLength; i += 4)
 800caca:	693b      	ldr	r3, [r7, #16]
 800cacc:	3304      	adds	r3, #4
 800cace:	613b      	str	r3, [r7, #16]
 800cad0:	693a      	ldr	r2, [r7, #16]
 800cad2:	68bb      	ldr	r3, [r7, #8]
 800cad4:	429a      	cmp	r2, r3
 800cad6:	d3e1      	bcc.n	800ca9c <decodeI2SdataLch+0x16>
    }
//    Info("decodeI2SdataLch converted %d buffer elements", outCount);
}
 800cad8:	46c0      	nop			@ (mov r8, r8)
 800cada:	46c0      	nop			@ (mov r8, r8)
 800cadc:	46bd      	mov	sp, r7
 800cade:	b006      	add	sp, #24
 800cae0:	bd80      	pop	{r7, pc}
	...

0800cae4 <InitDone>:
static bool buttonHeld = false;
uint32_t ConfigStamp;
uint32_t PowerStamp = 0;
static float batteryCharge = 0.0;

void InitDone(){
 800cae4:	b580      	push	{r7, lr}
 800cae6:	af00      	add	r7, sp, #0
  init = false;
 800cae8:	4b02      	ldr	r3, [pc, #8]	@ (800caf4 <InitDone+0x10>)
 800caea:	2200      	movs	r2, #0
 800caec:	701a      	strb	r2, [r3, #0]
}
 800caee:	46c0      	nop			@ (mov r8, r8)
 800caf0:	46bd      	mov	sp, r7
 800caf2:	bd80      	pop	{r7, pc}
 800caf4:	200000c8 	.word	0x200000c8

0800caf8 <batteryChargeCheck>:
  10%-----3.68V
  5%------3.45V
  0%------3.00V
 */

Battery_Status batteryChargeCheck(){
 800caf8:	b580      	push	{r7, lr}
 800cafa:	b082      	sub	sp, #8
 800cafc:	af00      	add	r7, sp, #0
  Battery_Status status;
  batteryCharge = ReadBatteryVoltage();
 800cafe:	f7f9 fb85 	bl	800620c <ReadBatteryVoltage>
 800cb02:	1c02      	adds	r2, r0, #0
 800cb04:	4b25      	ldr	r3, [pc, #148]	@ (800cb9c <batteryChargeCheck+0xa4>)
 800cb06:	601a      	str	r2, [r3, #0]
  if(batteryCharge < 3.5){
 800cb08:	4b24      	ldr	r3, [pc, #144]	@ (800cb9c <batteryChargeCheck+0xa4>)
 800cb0a:	681b      	ldr	r3, [r3, #0]
 800cb0c:	4924      	ldr	r1, [pc, #144]	@ (800cba0 <batteryChargeCheck+0xa8>)
 800cb0e:	1c18      	adds	r0, r3, #0
 800cb10:	f7f3 fd0e 	bl	8000530 <__aeabi_fcmplt>
 800cb14:	1e03      	subs	r3, r0, #0
 800cb16:	d002      	beq.n	800cb1e <batteryChargeCheck+0x26>
    status = BATTERY_CRITICAL;
 800cb18:	1dfb      	adds	r3, r7, #7
 800cb1a:	2200      	movs	r2, #0
 800cb1c:	701a      	strb	r2, [r3, #0]
  }
  if(batteryCharge < 3.7 && batteryCharge >= 3.5){
 800cb1e:	4b1f      	ldr	r3, [pc, #124]	@ (800cb9c <batteryChargeCheck+0xa4>)
 800cb20:	681b      	ldr	r3, [r3, #0]
 800cb22:	1c18      	adds	r0, r3, #0
 800cb24:	f7f6 fc9e 	bl	8003464 <__aeabi_f2d>
 800cb28:	4a1e      	ldr	r2, [pc, #120]	@ (800cba4 <batteryChargeCheck+0xac>)
 800cb2a:	4b1f      	ldr	r3, [pc, #124]	@ (800cba8 <batteryChargeCheck+0xb0>)
 800cb2c:	f7f3 fcc6 	bl	80004bc <__aeabi_dcmplt>
 800cb30:	1e03      	subs	r3, r0, #0
 800cb32:	d00a      	beq.n	800cb4a <batteryChargeCheck+0x52>
 800cb34:	4b19      	ldr	r3, [pc, #100]	@ (800cb9c <batteryChargeCheck+0xa4>)
 800cb36:	681b      	ldr	r3, [r3, #0]
 800cb38:	4919      	ldr	r1, [pc, #100]	@ (800cba0 <batteryChargeCheck+0xa8>)
 800cb3a:	1c18      	adds	r0, r3, #0
 800cb3c:	f7f3 fd16 	bl	800056c <__aeabi_fcmpge>
 800cb40:	1e03      	subs	r3, r0, #0
 800cb42:	d002      	beq.n	800cb4a <batteryChargeCheck+0x52>
    status = BATTERY_LOW;
 800cb44:	1dfb      	adds	r3, r7, #7
 800cb46:	2202      	movs	r2, #2
 800cb48:	701a      	strb	r2, [r3, #0]
  }
  if(batteryCharge < 4.0 && batteryCharge >= 3.7){
 800cb4a:	4b14      	ldr	r3, [pc, #80]	@ (800cb9c <batteryChargeCheck+0xa4>)
 800cb4c:	681b      	ldr	r3, [r3, #0]
 800cb4e:	2181      	movs	r1, #129	@ 0x81
 800cb50:	05c9      	lsls	r1, r1, #23
 800cb52:	1c18      	adds	r0, r3, #0
 800cb54:	f7f3 fcec 	bl	8000530 <__aeabi_fcmplt>
 800cb58:	1e03      	subs	r3, r0, #0
 800cb5a:	d00d      	beq.n	800cb78 <batteryChargeCheck+0x80>
 800cb5c:	4b0f      	ldr	r3, [pc, #60]	@ (800cb9c <batteryChargeCheck+0xa4>)
 800cb5e:	681b      	ldr	r3, [r3, #0]
 800cb60:	1c18      	adds	r0, r3, #0
 800cb62:	f7f6 fc7f 	bl	8003464 <__aeabi_f2d>
 800cb66:	4a0f      	ldr	r2, [pc, #60]	@ (800cba4 <batteryChargeCheck+0xac>)
 800cb68:	4b0f      	ldr	r3, [pc, #60]	@ (800cba8 <batteryChargeCheck+0xb0>)
 800cb6a:	f7f3 fcc5 	bl	80004f8 <__aeabi_dcmpge>
 800cb6e:	1e03      	subs	r3, r0, #0
 800cb70:	d002      	beq.n	800cb78 <batteryChargeCheck+0x80>
    status = BATTERY_GOOD;
 800cb72:	1dfb      	adds	r3, r7, #7
 800cb74:	2203      	movs	r2, #3
 800cb76:	701a      	strb	r2, [r3, #0]
  }
  if(batteryCharge >= 4.0){
 800cb78:	4b08      	ldr	r3, [pc, #32]	@ (800cb9c <batteryChargeCheck+0xa4>)
 800cb7a:	681b      	ldr	r3, [r3, #0]
 800cb7c:	2181      	movs	r1, #129	@ 0x81
 800cb7e:	05c9      	lsls	r1, r1, #23
 800cb80:	1c18      	adds	r0, r3, #0
 800cb82:	f7f3 fcf3 	bl	800056c <__aeabi_fcmpge>
 800cb86:	1e03      	subs	r3, r0, #0
 800cb88:	d002      	beq.n	800cb90 <batteryChargeCheck+0x98>
    status = BATTERY_FULL;
 800cb8a:	1dfb      	adds	r3, r7, #7
 800cb8c:	2204      	movs	r2, #4
 800cb8e:	701a      	strb	r2, [r3, #0]
  }
  return(status);
 800cb90:	1dfb      	adds	r3, r7, #7
 800cb92:	781b      	ldrb	r3, [r3, #0]
}
 800cb94:	0018      	movs	r0, r3
 800cb96:	46bd      	mov	sp, r7
 800cb98:	b002      	add	sp, #8
 800cb9a:	bd80      	pop	{r7, pc}
 800cb9c:	200021ec 	.word	0x200021ec
 800cba0:	40600000 	.word	0x40600000
 800cba4:	9999999a 	.word	0x9999999a
 800cba8:	400d9999 	.word	0x400d9999

0800cbac <SetStatusLED>:

void SetStatusLED(uint16_t red, uint16_t green, uint16_t blue){
 800cbac:	b590      	push	{r4, r7, lr}
 800cbae:	b083      	sub	sp, #12
 800cbb0:	af00      	add	r7, sp, #0
 800cbb2:	0004      	movs	r4, r0
 800cbb4:	0008      	movs	r0, r1
 800cbb6:	0011      	movs	r1, r2
 800cbb8:	1dbb      	adds	r3, r7, #6
 800cbba:	1c22      	adds	r2, r4, #0
 800cbbc:	801a      	strh	r2, [r3, #0]
 800cbbe:	1d3b      	adds	r3, r7, #4
 800cbc0:	1c02      	adds	r2, r0, #0
 800cbc2:	801a      	strh	r2, [r3, #0]
 800cbc4:	1cbb      	adds	r3, r7, #2
 800cbc6:	1c0a      	adds	r2, r1, #0
 800cbc8:	801a      	strh	r2, [r3, #0]
  if(usbPluggedIn || init || userToggle){
 800cbca:	4b0f      	ldr	r3, [pc, #60]	@ (800cc08 <SetStatusLED+0x5c>)
 800cbcc:	781b      	ldrb	r3, [r3, #0]
 800cbce:	2b00      	cmp	r3, #0
 800cbd0:	d107      	bne.n	800cbe2 <SetStatusLED+0x36>
 800cbd2:	4b0e      	ldr	r3, [pc, #56]	@ (800cc0c <SetStatusLED+0x60>)
 800cbd4:	781b      	ldrb	r3, [r3, #0]
 800cbd6:	2b00      	cmp	r3, #0
 800cbd8:	d103      	bne.n	800cbe2 <SetStatusLED+0x36>
 800cbda:	4b0d      	ldr	r3, [pc, #52]	@ (800cc10 <SetStatusLED+0x64>)
 800cbdc:	781b      	ldrb	r3, [r3, #0]
 800cbde:	2b00      	cmp	r3, #0
 800cbe0:	d00e      	beq.n	800cc00 <SetStatusLED+0x54>
    TIM2 -> CCR1 = red;
 800cbe2:	2380      	movs	r3, #128	@ 0x80
 800cbe4:	05db      	lsls	r3, r3, #23
 800cbe6:	1dba      	adds	r2, r7, #6
 800cbe8:	8812      	ldrh	r2, [r2, #0]
 800cbea:	635a      	str	r2, [r3, #52]	@ 0x34
    TIM2 -> CCR3 = green;
 800cbec:	2380      	movs	r3, #128	@ 0x80
 800cbee:	05db      	lsls	r3, r3, #23
 800cbf0:	1d3a      	adds	r2, r7, #4
 800cbf2:	8812      	ldrh	r2, [r2, #0]
 800cbf4:	63da      	str	r2, [r3, #60]	@ 0x3c
    TIM2 -> CCR4 = blue;
 800cbf6:	2380      	movs	r3, #128	@ 0x80
 800cbf8:	05db      	lsls	r3, r3, #23
 800cbfa:	1cba      	adds	r2, r7, #2
 800cbfc:	8812      	ldrh	r2, [r2, #0]
 800cbfe:	641a      	str	r2, [r3, #64]	@ 0x40
  }
}
 800cc00:	46c0      	nop			@ (mov r8, r8)
 800cc02:	46bd      	mov	sp, r7
 800cc04:	b003      	add	sp, #12
 800cc06:	bd90      	pop	{r4, r7, pc}
 800cc08:	200021e5 	.word	0x200021e5
 800cc0c:	200000c8 	.word	0x200000c8
 800cc10:	200021e6 	.word	0x200021e6

0800cc14 <SetDBLED>:
// Sets dB LED to (RGB) color
void SetDBLED(bool red, bool green, bool blue){
 800cc14:	b590      	push	{r4, r7, lr}
 800cc16:	b083      	sub	sp, #12
 800cc18:	af00      	add	r7, sp, #0
 800cc1a:	0004      	movs	r4, r0
 800cc1c:	0008      	movs	r0, r1
 800cc1e:	0011      	movs	r1, r2
 800cc20:	1dfb      	adds	r3, r7, #7
 800cc22:	1c22      	adds	r2, r4, #0
 800cc24:	701a      	strb	r2, [r3, #0]
 800cc26:	1dbb      	adds	r3, r7, #6
 800cc28:	1c02      	adds	r2, r0, #0
 800cc2a:	701a      	strb	r2, [r3, #0]
 800cc2c:	1d7b      	adds	r3, r7, #5
 800cc2e:	1c0a      	adds	r2, r1, #0
 800cc30:	701a      	strb	r2, [r3, #0]
  // RED LED
  if(usbPluggedIn || init || userToggle){
 800cc32:	4b19      	ldr	r3, [pc, #100]	@ (800cc98 <SetDBLED+0x84>)
 800cc34:	781b      	ldrb	r3, [r3, #0]
 800cc36:	2b00      	cmp	r3, #0
 800cc38:	d107      	bne.n	800cc4a <SetDBLED+0x36>
 800cc3a:	4b18      	ldr	r3, [pc, #96]	@ (800cc9c <SetDBLED+0x88>)
 800cc3c:	781b      	ldrb	r3, [r3, #0]
 800cc3e:	2b00      	cmp	r3, #0
 800cc40:	d103      	bne.n	800cc4a <SetDBLED+0x36>
 800cc42:	4b17      	ldr	r3, [pc, #92]	@ (800cca0 <SetDBLED+0x8c>)
 800cc44:	781b      	ldrb	r3, [r3, #0]
 800cc46:	2b00      	cmp	r3, #0
 800cc48:	d022      	beq.n	800cc90 <SetDBLED+0x7c>
    HAL_GPIO_WritePin(MCU_LED_C_R_GPIO_Port, MCU_LED_C_R_Pin, !red);
 800cc4a:	1dfb      	adds	r3, r7, #7
 800cc4c:	781b      	ldrb	r3, [r3, #0]
 800cc4e:	2201      	movs	r2, #1
 800cc50:	4053      	eors	r3, r2
 800cc52:	b2db      	uxtb	r3, r3
 800cc54:	001a      	movs	r2, r3
 800cc56:	4b13      	ldr	r3, [pc, #76]	@ (800cca4 <SetDBLED+0x90>)
 800cc58:	2101      	movs	r1, #1
 800cc5a:	0018      	movs	r0, r3
 800cc5c:	f002 fe95 	bl	800f98a <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MCU_LED_C_G_GPIO_Port, MCU_LED_C_G_Pin, !green);
 800cc60:	1dbb      	adds	r3, r7, #6
 800cc62:	781b      	ldrb	r3, [r3, #0]
 800cc64:	2201      	movs	r2, #1
 800cc66:	4053      	eors	r3, r2
 800cc68:	b2db      	uxtb	r3, r3
 800cc6a:	001a      	movs	r2, r3
 800cc6c:	2380      	movs	r3, #128	@ 0x80
 800cc6e:	005b      	lsls	r3, r3, #1
 800cc70:	480c      	ldr	r0, [pc, #48]	@ (800cca4 <SetDBLED+0x90>)
 800cc72:	0019      	movs	r1, r3
 800cc74:	f002 fe89 	bl	800f98a <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MCU_LED_C_B_GPIO_Port, MCU_LED_C_B_Pin, !blue);
 800cc78:	1d7b      	adds	r3, r7, #5
 800cc7a:	781b      	ldrb	r3, [r3, #0]
 800cc7c:	2201      	movs	r2, #1
 800cc7e:	4053      	eors	r3, r2
 800cc80:	b2db      	uxtb	r3, r3
 800cc82:	001a      	movs	r2, r3
 800cc84:	2380      	movs	r3, #128	@ 0x80
 800cc86:	009b      	lsls	r3, r3, #2
 800cc88:	4806      	ldr	r0, [pc, #24]	@ (800cca4 <SetDBLED+0x90>)
 800cc8a:	0019      	movs	r1, r3
 800cc8c:	f002 fe7d 	bl	800f98a <HAL_GPIO_WritePin>
  }
}
 800cc90:	46c0      	nop			@ (mov r8, r8)
 800cc92:	46bd      	mov	sp, r7
 800cc94:	b003      	add	sp, #12
 800cc96:	bd90      	pop	{r4, r7, pc}
 800cc98:	200021e5 	.word	0x200021e5
 800cc9c:	200000c8 	.word	0x200000c8
 800cca0:	200021e6 	.word	0x200021e6
 800cca4:	50000400 	.word	0x50000400

0800cca8 <SetVocLED>:
// Sets VOC LED to (RGB) color
void SetVocLED(uint16_t red, uint16_t green, uint16_t blue){
 800cca8:	b590      	push	{r4, r7, lr}
 800ccaa:	b083      	sub	sp, #12
 800ccac:	af00      	add	r7, sp, #0
 800ccae:	0004      	movs	r4, r0
 800ccb0:	0008      	movs	r0, r1
 800ccb2:	0011      	movs	r1, r2
 800ccb4:	1dbb      	adds	r3, r7, #6
 800ccb6:	1c22      	adds	r2, r4, #0
 800ccb8:	801a      	strh	r2, [r3, #0]
 800ccba:	1d3b      	adds	r3, r7, #4
 800ccbc:	1c02      	adds	r2, r0, #0
 800ccbe:	801a      	strh	r2, [r3, #0]
 800ccc0:	1cbb      	adds	r3, r7, #2
 800ccc2:	1c0a      	adds	r2, r1, #0
 800ccc4:	801a      	strh	r2, [r3, #0]
  if(usbPluggedIn || init || userToggle){
 800ccc6:	4b0e      	ldr	r3, [pc, #56]	@ (800cd00 <SetVocLED+0x58>)
 800ccc8:	781b      	ldrb	r3, [r3, #0]
 800ccca:	2b00      	cmp	r3, #0
 800cccc:	d107      	bne.n	800ccde <SetVocLED+0x36>
 800ccce:	4b0d      	ldr	r3, [pc, #52]	@ (800cd04 <SetVocLED+0x5c>)
 800ccd0:	781b      	ldrb	r3, [r3, #0]
 800ccd2:	2b00      	cmp	r3, #0
 800ccd4:	d103      	bne.n	800ccde <SetVocLED+0x36>
 800ccd6:	4b0c      	ldr	r3, [pc, #48]	@ (800cd08 <SetVocLED+0x60>)
 800ccd8:	781b      	ldrb	r3, [r3, #0]
 800ccda:	2b00      	cmp	r3, #0
 800ccdc:	d00b      	beq.n	800ccf6 <SetVocLED+0x4e>
    TIM3 -> CCR1 = red;
 800ccde:	4b0b      	ldr	r3, [pc, #44]	@ (800cd0c <SetVocLED+0x64>)
 800cce0:	1dba      	adds	r2, r7, #6
 800cce2:	8812      	ldrh	r2, [r2, #0]
 800cce4:	635a      	str	r2, [r3, #52]	@ 0x34
    TIM3 -> CCR2 = green;
 800cce6:	4b09      	ldr	r3, [pc, #36]	@ (800cd0c <SetVocLED+0x64>)
 800cce8:	1d3a      	adds	r2, r7, #4
 800ccea:	8812      	ldrh	r2, [r2, #0]
 800ccec:	639a      	str	r2, [r3, #56]	@ 0x38
    TIM3 -> CCR3 = blue;
 800ccee:	4b07      	ldr	r3, [pc, #28]	@ (800cd0c <SetVocLED+0x64>)
 800ccf0:	1cba      	adds	r2, r7, #2
 800ccf2:	8812      	ldrh	r2, [r2, #0]
 800ccf4:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
}
 800ccf6:	46c0      	nop			@ (mov r8, r8)
 800ccf8:	46bd      	mov	sp, r7
 800ccfa:	b003      	add	sp, #12
 800ccfc:	bd90      	pop	{r4, r7, pc}
 800ccfe:	46c0      	nop			@ (mov r8, r8)
 800cd00:	200021e5 	.word	0x200021e5
 800cd04:	200000c8 	.word	0x200000c8
 800cd08:	200021e6 	.word	0x200021e6
 800cd0c:	40000400 	.word	0x40000400

0800cd10 <SetMeasurementIndicator>:
void SetMeasurementIndicator(){
 800cd10:	b580      	push	{r7, lr}
 800cd12:	af00      	add	r7, sp, #0
  if(usbPluggedIn||userToggle){
 800cd14:	4b07      	ldr	r3, [pc, #28]	@ (800cd34 <SetMeasurementIndicator+0x24>)
 800cd16:	781b      	ldrb	r3, [r3, #0]
 800cd18:	2b00      	cmp	r3, #0
 800cd1a:	d103      	bne.n	800cd24 <SetMeasurementIndicator+0x14>
 800cd1c:	4b06      	ldr	r3, [pc, #24]	@ (800cd38 <SetMeasurementIndicator+0x28>)
 800cd1e:	781b      	ldrb	r3, [r3, #0]
 800cd20:	2b00      	cmp	r3, #0
 800cd22:	d003      	beq.n	800cd2c <SetMeasurementIndicator+0x1c>
    TIM2 -> CCR3 = LED_ON;
 800cd24:	2380      	movs	r3, #128	@ 0x80
 800cd26:	05db      	lsls	r3, r3, #23
 800cd28:	4a04      	ldr	r2, [pc, #16]	@ (800cd3c <SetMeasurementIndicator+0x2c>)
 800cd2a:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
}
 800cd2c:	46c0      	nop			@ (mov r8, r8)
 800cd2e:	46bd      	mov	sp, r7
 800cd30:	bd80      	pop	{r7, pc}
 800cd32:	46c0      	nop			@ (mov r8, r8)
 800cd34:	200021e5 	.word	0x200021e5
 800cd38:	200021e6 	.word	0x200021e6
 800cd3c:	00000bb8 	.word	0x00000bb8

0800cd40 <ResetMeasurementIndicator>:
void ResetMeasurementIndicator(){
 800cd40:	b580      	push	{r7, lr}
 800cd42:	af00      	add	r7, sp, #0
  if(usbPluggedIn||userToggle){
 800cd44:	4b07      	ldr	r3, [pc, #28]	@ (800cd64 <ResetMeasurementIndicator+0x24>)
 800cd46:	781b      	ldrb	r3, [r3, #0]
 800cd48:	2b00      	cmp	r3, #0
 800cd4a:	d103      	bne.n	800cd54 <ResetMeasurementIndicator+0x14>
 800cd4c:	4b06      	ldr	r3, [pc, #24]	@ (800cd68 <ResetMeasurementIndicator+0x28>)
 800cd4e:	781b      	ldrb	r3, [r3, #0]
 800cd50:	2b00      	cmp	r3, #0
 800cd52:	d004      	beq.n	800cd5e <ResetMeasurementIndicator+0x1e>
    TIM2 -> CCR3 = LED_OFF;
 800cd54:	2380      	movs	r3, #128	@ 0x80
 800cd56:	05db      	lsls	r3, r3, #23
 800cd58:	22fa      	movs	r2, #250	@ 0xfa
 800cd5a:	0112      	lsls	r2, r2, #4
 800cd5c:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
}
 800cd5e:	46c0      	nop			@ (mov r8, r8)
 800cd60:	46bd      	mov	sp, r7
 800cd62:	bd80      	pop	{r7, pc}
 800cd64:	200021e5 	.word	0x200021e5
 800cd68:	200021e6 	.word	0x200021e6

0800cd6c <SetMICIndicator>:
void SetMICIndicator(){
 800cd6c:	b580      	push	{r7, lr}
 800cd6e:	af00      	add	r7, sp, #0
  if(usbPluggedIn||userToggle){
 800cd70:	4b11      	ldr	r3, [pc, #68]	@ (800cdb8 <SetMICIndicator+0x4c>)
 800cd72:	781b      	ldrb	r3, [r3, #0]
 800cd74:	2b00      	cmp	r3, #0
 800cd76:	d103      	bne.n	800cd80 <SetMICIndicator+0x14>
 800cd78:	4b10      	ldr	r3, [pc, #64]	@ (800cdbc <SetMICIndicator+0x50>)
 800cd7a:	781b      	ldrb	r3, [r3, #0]
 800cd7c:	2b00      	cmp	r3, #0
 800cd7e:	d004      	beq.n	800cd8a <SetMICIndicator+0x1e>
    TIM2 -> CCR1 = LED_ON;
 800cd80:	2380      	movs	r3, #128	@ 0x80
 800cd82:	05db      	lsls	r3, r3, #23
 800cd84:	4a0e      	ldr	r2, [pc, #56]	@ (800cdc0 <SetMICIndicator+0x54>)
 800cd86:	635a      	str	r2, [r3, #52]	@ 0x34
    }
    else {
      TIM2 -> CCR1 = LED_ON;
    }
  }
}
 800cd88:	e013      	b.n	800cdb2 <SetMICIndicator+0x46>
    if (batteryCharge > 3.7) {
 800cd8a:	4b0e      	ldr	r3, [pc, #56]	@ (800cdc4 <SetMICIndicator+0x58>)
 800cd8c:	681b      	ldr	r3, [r3, #0]
 800cd8e:	1c18      	adds	r0, r3, #0
 800cd90:	f7f6 fb68 	bl	8003464 <__aeabi_f2d>
 800cd94:	4a0c      	ldr	r2, [pc, #48]	@ (800cdc8 <SetMICIndicator+0x5c>)
 800cd96:	4b0d      	ldr	r3, [pc, #52]	@ (800cdcc <SetMICIndicator+0x60>)
 800cd98:	f7f3 fba4 	bl	80004e4 <__aeabi_dcmpgt>
 800cd9c:	1e03      	subs	r3, r0, #0
 800cd9e:	d004      	beq.n	800cdaa <SetMICIndicator+0x3e>
      TIM2 -> CCR3 = LED_ON;
 800cda0:	2380      	movs	r3, #128	@ 0x80
 800cda2:	05db      	lsls	r3, r3, #23
 800cda4:	4a06      	ldr	r2, [pc, #24]	@ (800cdc0 <SetMICIndicator+0x54>)
 800cda6:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 800cda8:	e003      	b.n	800cdb2 <SetMICIndicator+0x46>
      TIM2 -> CCR1 = LED_ON;
 800cdaa:	2380      	movs	r3, #128	@ 0x80
 800cdac:	05db      	lsls	r3, r3, #23
 800cdae:	4a04      	ldr	r2, [pc, #16]	@ (800cdc0 <SetMICIndicator+0x54>)
 800cdb0:	635a      	str	r2, [r3, #52]	@ 0x34
}
 800cdb2:	46c0      	nop			@ (mov r8, r8)
 800cdb4:	46bd      	mov	sp, r7
 800cdb6:	bd80      	pop	{r7, pc}
 800cdb8:	200021e5 	.word	0x200021e5
 800cdbc:	200021e6 	.word	0x200021e6
 800cdc0:	00000bb8 	.word	0x00000bb8
 800cdc4:	200021ec 	.word	0x200021ec
 800cdc8:	9999999a 	.word	0x9999999a
 800cdcc:	400d9999 	.word	0x400d9999

0800cdd0 <ResetMICIndicator>:
void ResetMICIndicator(){
 800cdd0:	b580      	push	{r7, lr}
 800cdd2:	af00      	add	r7, sp, #0
  if(usbPluggedIn||userToggle){
 800cdd4:	4b13      	ldr	r3, [pc, #76]	@ (800ce24 <ResetMICIndicator+0x54>)
 800cdd6:	781b      	ldrb	r3, [r3, #0]
 800cdd8:	2b00      	cmp	r3, #0
 800cdda:	d103      	bne.n	800cde4 <ResetMICIndicator+0x14>
 800cddc:	4b12      	ldr	r3, [pc, #72]	@ (800ce28 <ResetMICIndicator+0x58>)
 800cdde:	781b      	ldrb	r3, [r3, #0]
 800cde0:	2b00      	cmp	r3, #0
 800cde2:	d005      	beq.n	800cdf0 <ResetMICIndicator+0x20>
    TIM2 -> CCR1 = LED_OFF;
 800cde4:	2380      	movs	r3, #128	@ 0x80
 800cde6:	05db      	lsls	r3, r3, #23
 800cde8:	22fa      	movs	r2, #250	@ 0xfa
 800cdea:	0112      	lsls	r2, r2, #4
 800cdec:	635a      	str	r2, [r3, #52]	@ 0x34
    }
    else {
      TIM2 -> CCR1 = LED_OFF;
    }
  }
}
 800cdee:	e015      	b.n	800ce1c <ResetMICIndicator+0x4c>
    if (batteryCharge > 3.74) {
 800cdf0:	4b0e      	ldr	r3, [pc, #56]	@ (800ce2c <ResetMICIndicator+0x5c>)
 800cdf2:	681b      	ldr	r3, [r3, #0]
 800cdf4:	1c18      	adds	r0, r3, #0
 800cdf6:	f7f6 fb35 	bl	8003464 <__aeabi_f2d>
 800cdfa:	4a0d      	ldr	r2, [pc, #52]	@ (800ce30 <ResetMICIndicator+0x60>)
 800cdfc:	4b0d      	ldr	r3, [pc, #52]	@ (800ce34 <ResetMICIndicator+0x64>)
 800cdfe:	f7f3 fb71 	bl	80004e4 <__aeabi_dcmpgt>
 800ce02:	1e03      	subs	r3, r0, #0
 800ce04:	d005      	beq.n	800ce12 <ResetMICIndicator+0x42>
      TIM2 -> CCR3 = LED_OFF;
 800ce06:	2380      	movs	r3, #128	@ 0x80
 800ce08:	05db      	lsls	r3, r3, #23
 800ce0a:	22fa      	movs	r2, #250	@ 0xfa
 800ce0c:	0112      	lsls	r2, r2, #4
 800ce0e:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 800ce10:	e004      	b.n	800ce1c <ResetMICIndicator+0x4c>
      TIM2 -> CCR1 = LED_OFF;
 800ce12:	2380      	movs	r3, #128	@ 0x80
 800ce14:	05db      	lsls	r3, r3, #23
 800ce16:	22fa      	movs	r2, #250	@ 0xfa
 800ce18:	0112      	lsls	r2, r2, #4
 800ce1a:	635a      	str	r2, [r3, #52]	@ 0x34
}
 800ce1c:	46c0      	nop			@ (mov r8, r8)
 800ce1e:	46bd      	mov	sp, r7
 800ce20:	bd80      	pop	{r7, pc}
 800ce22:	46c0      	nop			@ (mov r8, r8)
 800ce24:	200021e5 	.word	0x200021e5
 800ce28:	200021e6 	.word	0x200021e6
 800ce2c:	200021ec 	.word	0x200021ec
 800ce30:	1eb851ec 	.word	0x1eb851ec
 800ce34:	400deb85 	.word	0x400deb85

0800ce38 <SetESPIndicator>:
void SetESPIndicator(){
 800ce38:	b580      	push	{r7, lr}
 800ce3a:	af00      	add	r7, sp, #0
  if(usbPluggedIn||userToggle){
 800ce3c:	4b07      	ldr	r3, [pc, #28]	@ (800ce5c <SetESPIndicator+0x24>)
 800ce3e:	781b      	ldrb	r3, [r3, #0]
 800ce40:	2b00      	cmp	r3, #0
 800ce42:	d103      	bne.n	800ce4c <SetESPIndicator+0x14>
 800ce44:	4b06      	ldr	r3, [pc, #24]	@ (800ce60 <SetESPIndicator+0x28>)
 800ce46:	781b      	ldrb	r3, [r3, #0]
 800ce48:	2b00      	cmp	r3, #0
 800ce4a:	d003      	beq.n	800ce54 <SetESPIndicator+0x1c>
    TIM2 -> CCR4 = LED_ON;
 800ce4c:	2380      	movs	r3, #128	@ 0x80
 800ce4e:	05db      	lsls	r3, r3, #23
 800ce50:	4a04      	ldr	r2, [pc, #16]	@ (800ce64 <SetESPIndicator+0x2c>)
 800ce52:	641a      	str	r2, [r3, #64]	@ 0x40
  }
}
 800ce54:	46c0      	nop			@ (mov r8, r8)
 800ce56:	46bd      	mov	sp, r7
 800ce58:	bd80      	pop	{r7, pc}
 800ce5a:	46c0      	nop			@ (mov r8, r8)
 800ce5c:	200021e5 	.word	0x200021e5
 800ce60:	200021e6 	.word	0x200021e6
 800ce64:	00000bb8 	.word	0x00000bb8

0800ce68 <ResetESPIndicator>:
void ResetESPIndicator(){
 800ce68:	b580      	push	{r7, lr}
 800ce6a:	af00      	add	r7, sp, #0
  if(usbPluggedIn||userToggle){
 800ce6c:	4b07      	ldr	r3, [pc, #28]	@ (800ce8c <ResetESPIndicator+0x24>)
 800ce6e:	781b      	ldrb	r3, [r3, #0]
 800ce70:	2b00      	cmp	r3, #0
 800ce72:	d103      	bne.n	800ce7c <ResetESPIndicator+0x14>
 800ce74:	4b06      	ldr	r3, [pc, #24]	@ (800ce90 <ResetESPIndicator+0x28>)
 800ce76:	781b      	ldrb	r3, [r3, #0]
 800ce78:	2b00      	cmp	r3, #0
 800ce7a:	d004      	beq.n	800ce86 <ResetESPIndicator+0x1e>
    TIM2 -> CCR4 = LED_OFF;
 800ce7c:	2380      	movs	r3, #128	@ 0x80
 800ce7e:	05db      	lsls	r3, r3, #23
 800ce80:	22fa      	movs	r2, #250	@ 0xfa
 800ce82:	0112      	lsls	r2, r2, #4
 800ce84:	641a      	str	r2, [r3, #64]	@ 0x40
  }
}
 800ce86:	46c0      	nop			@ (mov r8, r8)
 800ce88:	46bd      	mov	sp, r7
 800ce8a:	bd80      	pop	{r7, pc}
 800ce8c:	200021e5 	.word	0x200021e5
 800ce90:	200021e6 	.word	0x200021e6

0800ce94 <SetLEDsOff>:

// Sets all LEDs Off
void SetLEDsOff(void){
 800ce94:	b580      	push	{r7, lr}
 800ce96:	af00      	add	r7, sp, #0
  SetStatusLED(LED_OFF,LED_OFF,LED_OFF);
 800ce98:	23fa      	movs	r3, #250	@ 0xfa
 800ce9a:	011a      	lsls	r2, r3, #4
 800ce9c:	23fa      	movs	r3, #250	@ 0xfa
 800ce9e:	0119      	lsls	r1, r3, #4
 800cea0:	23fa      	movs	r3, #250	@ 0xfa
 800cea2:	011b      	lsls	r3, r3, #4
 800cea4:	0018      	movs	r0, r3
 800cea6:	f7ff fe81 	bl	800cbac <SetStatusLED>
  SetDBLED(false,false,false);
 800ceaa:	2200      	movs	r2, #0
 800ceac:	2100      	movs	r1, #0
 800ceae:	2000      	movs	r0, #0
 800ceb0:	f7ff feb0 	bl	800cc14 <SetDBLED>
  SetVocLED(LED_OFF,LED_OFF,LED_OFF);
 800ceb4:	23fa      	movs	r3, #250	@ 0xfa
 800ceb6:	011a      	lsls	r2, r3, #4
 800ceb8:	23fa      	movs	r3, #250	@ 0xfa
 800ceba:	0119      	lsls	r1, r3, #4
 800cebc:	23fa      	movs	r3, #250	@ 0xfa
 800cebe:	011b      	lsls	r3, r3, #4
 800cec0:	0018      	movs	r0, r3
 800cec2:	f7ff fef1 	bl	800cca8 <SetVocLED>
return;
 800cec6:	46c0      	nop			@ (mov r8, r8)
}
 800cec8:	46bd      	mov	sp, r7
 800ceca:	bd80      	pop	{r7, pc}

0800cecc <powerCheck>:

Battery_Status powerCheck(){
 800cecc:	b590      	push	{r4, r7, lr}
 800cece:	b083      	sub	sp, #12
 800ced0:	af00      	add	r7, sp, #0
  Battery_Status status;
  if(!Check_USB_PowerOn()){
 800ced2:	f7f9 fa61 	bl	8006398 <Check_USB_PowerOn>
 800ced6:	0003      	movs	r3, r0
 800ced8:	001a      	movs	r2, r3
 800ceda:	2301      	movs	r3, #1
 800cedc:	4053      	eors	r3, r2
 800cede:	b2db      	uxtb	r3, r3
 800cee0:	2b00      	cmp	r3, #0
 800cee2:	d005      	beq.n	800cef0 <powerCheck+0x24>
    status = batteryChargeCheck();
 800cee4:	1dfc      	adds	r4, r7, #7
 800cee6:	f7ff fe07 	bl	800caf8 <batteryChargeCheck>
 800ceea:	0003      	movs	r3, r0
 800ceec:	7023      	strb	r3, [r4, #0]
 800ceee:	e002      	b.n	800cef6 <powerCheck+0x2a>
  }
  else{
    status = USB_PLUGGED_IN;
 800cef0:	1dfb      	adds	r3, r7, #7
 800cef2:	2201      	movs	r2, #1
 800cef4:	701a      	strb	r2, [r3, #0]
  }
  return status;
 800cef6:	1dfb      	adds	r3, r7, #7
 800cef8:	781b      	ldrb	r3, [r3, #0]
}
 800cefa:	0018      	movs	r0, r3
 800cefc:	46bd      	mov	sp, r7
 800cefe:	b003      	add	sp, #12
 800cf00:	bd90      	pop	{r4, r7, pc}
	...

0800cf04 <powerDisplay>:

void powerDisplay(Battery_Status status){
 800cf04:	b580      	push	{r7, lr}
 800cf06:	b082      	sub	sp, #8
 800cf08:	af00      	add	r7, sp, #0
 800cf0a:	0002      	movs	r2, r0
 800cf0c:	1dfb      	adds	r3, r7, #7
 800cf0e:	701a      	strb	r2, [r3, #0]
  if(status == USB_PLUGGED_IN){
 800cf10:	1dfb      	adds	r3, r7, #7
 800cf12:	781b      	ldrb	r3, [r3, #0]
 800cf14:	2b01      	cmp	r3, #1
 800cf16:	d105      	bne.n	800cf24 <powerDisplay+0x20>
    Debug("LEDS are okay");
 800cf18:	4a18      	ldr	r2, [pc, #96]	@ (800cf7c <powerDisplay+0x78>)
 800cf1a:	4b19      	ldr	r3, [pc, #100]	@ (800cf80 <powerDisplay+0x7c>)
 800cf1c:	0019      	movs	r1, r3
 800cf1e:	2003      	movs	r0, #3
 800cf20:	f000 fe4c 	bl	800dbbc <CreateLine>

  }
  if(status == BATTERY_FULL){
 800cf24:	1dfb      	adds	r3, r7, #7
 800cf26:	781b      	ldrb	r3, [r3, #0]
 800cf28:	2b04      	cmp	r3, #4
 800cf2a:	d105      	bne.n	800cf38 <powerDisplay+0x34>
    Debug("Battery fully charged");
 800cf2c:	4a15      	ldr	r2, [pc, #84]	@ (800cf84 <powerDisplay+0x80>)
 800cf2e:	4b14      	ldr	r3, [pc, #80]	@ (800cf80 <powerDisplay+0x7c>)
 800cf30:	0019      	movs	r1, r3
 800cf32:	2003      	movs	r0, #3
 800cf34:	f000 fe42 	bl	800dbbc <CreateLine>
  }
  if(status == BATTERY_GOOD){
 800cf38:	1dfb      	adds	r3, r7, #7
 800cf3a:	781b      	ldrb	r3, [r3, #0]
 800cf3c:	2b03      	cmp	r3, #3
 800cf3e:	d105      	bne.n	800cf4c <powerDisplay+0x48>
    Debug("Battery charge is doing well");
 800cf40:	4a11      	ldr	r2, [pc, #68]	@ (800cf88 <powerDisplay+0x84>)
 800cf42:	4b0f      	ldr	r3, [pc, #60]	@ (800cf80 <powerDisplay+0x7c>)
 800cf44:	0019      	movs	r1, r3
 800cf46:	2003      	movs	r0, #3
 800cf48:	f000 fe38 	bl	800dbbc <CreateLine>
  }
  if(status == BATTERY_LOW){
 800cf4c:	1dfb      	adds	r3, r7, #7
 800cf4e:	781b      	ldrb	r3, [r3, #0]
 800cf50:	2b02      	cmp	r3, #2
 800cf52:	d105      	bne.n	800cf60 <powerDisplay+0x5c>
    Debug("Battery is getting low");
 800cf54:	4a0d      	ldr	r2, [pc, #52]	@ (800cf8c <powerDisplay+0x88>)
 800cf56:	4b0a      	ldr	r3, [pc, #40]	@ (800cf80 <powerDisplay+0x7c>)
 800cf58:	0019      	movs	r1, r3
 800cf5a:	2003      	movs	r0, #3
 800cf5c:	f000 fe2e 	bl	800dbbc <CreateLine>
  }
  if(status == BATTERY_CRITICAL){
 800cf60:	1dfb      	adds	r3, r7, #7
 800cf62:	781b      	ldrb	r3, [r3, #0]
 800cf64:	2b00      	cmp	r3, #0
 800cf66:	d105      	bne.n	800cf74 <powerDisplay+0x70>
    Debug("Battery is critical, stop processes");
 800cf68:	4a09      	ldr	r2, [pc, #36]	@ (800cf90 <powerDisplay+0x8c>)
 800cf6a:	4b05      	ldr	r3, [pc, #20]	@ (800cf80 <powerDisplay+0x7c>)
 800cf6c:	0019      	movs	r1, r3
 800cf6e:	2003      	movs	r0, #3
 800cf70:	f000 fe24 	bl	800dbbc <CreateLine>
  }
}
 800cf74:	46c0      	nop			@ (mov r8, r8)
 800cf76:	46bd      	mov	sp, r7
 800cf78:	b002      	add	sp, #8
 800cf7a:	bd80      	pop	{r7, pc}
 800cf7c:	080242e0 	.word	0x080242e0
 800cf80:	080242f0 	.word	0x080242f0
 800cf84:	080242f4 	.word	0x080242f4
 800cf88:	0802430c 	.word	0x0802430c
 800cf8c:	0802432c 	.word	0x0802432c
 800cf90:	08024344 	.word	0x08024344

0800cf94 <configCheck>:

void configCheck(){
 800cf94:	b580      	push	{r7, lr}
 800cf96:	af00      	add	r7, sp, #0
  if(BootButton_Pressed() && UserButton_Pressed()){
 800cf98:	f7f9 fa0d 	bl	80063b6 <BootButton_Pressed>
 800cf9c:	1e03      	subs	r3, r0, #0
 800cf9e:	d007      	beq.n	800cfb0 <configCheck+0x1c>
 800cfa0:	f7f9 fa1a 	bl	80063d8 <UserButton_Pressed>
 800cfa4:	1e03      	subs	r3, r0, #0
 800cfa6:	d003      	beq.n	800cfb0 <configCheck+0x1c>
    configSet = true;
 800cfa8:	4b44      	ldr	r3, [pc, #272]	@ (800d0bc <configCheck+0x128>)
 800cfaa:	2201      	movs	r2, #1
 800cfac:	701a      	strb	r2, [r3, #0]
 800cfae:	e00a      	b.n	800cfc6 <configCheck+0x32>
  }
  else{
    configSet = false;
 800cfb0:	4b42      	ldr	r3, [pc, #264]	@ (800d0bc <configCheck+0x128>)
 800cfb2:	2200      	movs	r2, #0
 800cfb4:	701a      	strb	r2, [r3, #0]
    ConfigStamp = HAL_GetTick() + 2000;
 800cfb6:	f001 fa57 	bl	800e468 <HAL_GetTick>
 800cfba:	0003      	movs	r3, r0
 800cfbc:	22fa      	movs	r2, #250	@ 0xfa
 800cfbe:	00d2      	lsls	r2, r2, #3
 800cfc0:	189a      	adds	r2, r3, r2
 800cfc2:	4b3f      	ldr	r3, [pc, #252]	@ (800d0c0 <configCheck+0x12c>)
 800cfc4:	601a      	str	r2, [r3, #0]
  }
  if(configSet && TimestampIsReached(ConfigStamp)){
 800cfc6:	4b3d      	ldr	r3, [pc, #244]	@ (800d0bc <configCheck+0x128>)
 800cfc8:	781b      	ldrb	r3, [r3, #0]
 800cfca:	2b00      	cmp	r3, #0
 800cfcc:	d00d      	beq.n	800cfea <configCheck+0x56>
 800cfce:	4b3c      	ldr	r3, [pc, #240]	@ (800d0c0 <configCheck+0x12c>)
 800cfd0:	681b      	ldr	r3, [r3, #0]
 800cfd2:	0018      	movs	r0, r3
 800cfd4:	f000 fd9c 	bl	800db10 <TimestampIsReached>
 800cfd8:	1e03      	subs	r3, r0, #0
 800cfda:	d006      	beq.n	800cfea <configCheck+0x56>
    SetConfigMode(); //Make config mode wifi
 800cfdc:	f7f6 fd06 	bl	80039ec <SetConfigMode>
    SetDBLED(true, true, true);
 800cfe0:	2201      	movs	r2, #1
 800cfe2:	2101      	movs	r1, #1
 800cfe4:	2001      	movs	r0, #1
 800cfe6:	f7ff fe15 	bl	800cc14 <SetDBLED>
  }
  if(!BootButton_Pressed() && UserButton_Pressed() && !buttonHeld){
 800cfea:	f7f9 f9e4 	bl	80063b6 <BootButton_Pressed>
 800cfee:	0003      	movs	r3, r0
 800cff0:	001a      	movs	r2, r3
 800cff2:	2301      	movs	r3, #1
 800cff4:	4053      	eors	r3, r2
 800cff6:	b2db      	uxtb	r3, r3
 800cff8:	2b00      	cmp	r3, #0
 800cffa:	d029      	beq.n	800d050 <configCheck+0xbc>
 800cffc:	f7f9 f9ec 	bl	80063d8 <UserButton_Pressed>
 800d000:	1e03      	subs	r3, r0, #0
 800d002:	d025      	beq.n	800d050 <configCheck+0xbc>
 800d004:	4b2f      	ldr	r3, [pc, #188]	@ (800d0c4 <configCheck+0x130>)
 800d006:	781b      	ldrb	r3, [r3, #0]
 800d008:	2201      	movs	r2, #1
 800d00a:	4053      	eors	r3, r2
 800d00c:	b2db      	uxtb	r3, r3
 800d00e:	2b00      	cmp	r3, #0
 800d010:	d01e      	beq.n	800d050 <configCheck+0xbc>
    SetLEDsOff();
 800d012:	f7ff ff3f 	bl	800ce94 <SetLEDsOff>
    Debug("userToggle flipped");
 800d016:	4a2c      	ldr	r2, [pc, #176]	@ (800d0c8 <configCheck+0x134>)
 800d018:	4b2c      	ldr	r3, [pc, #176]	@ (800d0cc <configCheck+0x138>)
 800d01a:	0019      	movs	r1, r3
 800d01c:	2003      	movs	r0, #3
 800d01e:	f000 fdcd 	bl	800dbbc <CreateLine>
    userToggle = !userToggle;
 800d022:	4b2b      	ldr	r3, [pc, #172]	@ (800d0d0 <configCheck+0x13c>)
 800d024:	781b      	ldrb	r3, [r3, #0]
 800d026:	1e5a      	subs	r2, r3, #1
 800d028:	4193      	sbcs	r3, r2
 800d02a:	b2db      	uxtb	r3, r3
 800d02c:	2201      	movs	r2, #1
 800d02e:	4053      	eors	r3, r2
 800d030:	b2db      	uxtb	r3, r3
 800d032:	1c1a      	adds	r2, r3, #0
 800d034:	2301      	movs	r3, #1
 800d036:	4013      	ands	r3, r2
 800d038:	b2da      	uxtb	r2, r3
 800d03a:	4b25      	ldr	r3, [pc, #148]	@ (800d0d0 <configCheck+0x13c>)
 800d03c:	701a      	strb	r2, [r3, #0]
    if (userToggle) {
 800d03e:	4b24      	ldr	r3, [pc, #144]	@ (800d0d0 <configCheck+0x13c>)
 800d040:	781b      	ldrb	r3, [r3, #0]
 800d042:	2b00      	cmp	r3, #0
 800d044:	d001      	beq.n	800d04a <configCheck+0xb6>
      EnabledConnectedDevices();
 800d046:	f7fb fa7b 	bl	8008540 <EnabledConnectedDevices>
    }
    buttonHeld = true;
 800d04a:	4b1e      	ldr	r3, [pc, #120]	@ (800d0c4 <configCheck+0x130>)
 800d04c:	2201      	movs	r2, #1
 800d04e:	701a      	strb	r2, [r3, #0]
  }
  if(!BootButton_Pressed() && !UserButton_Pressed()){
 800d050:	f7f9 f9b1 	bl	80063b6 <BootButton_Pressed>
 800d054:	0003      	movs	r3, r0
 800d056:	001a      	movs	r2, r3
 800d058:	2301      	movs	r3, #1
 800d05a:	4053      	eors	r3, r2
 800d05c:	b2db      	uxtb	r3, r3
 800d05e:	2b00      	cmp	r3, #0
 800d060:	d00b      	beq.n	800d07a <configCheck+0xe6>
 800d062:	f7f9 f9b9 	bl	80063d8 <UserButton_Pressed>
 800d066:	0003      	movs	r3, r0
 800d068:	001a      	movs	r2, r3
 800d06a:	2301      	movs	r3, #1
 800d06c:	4053      	eors	r3, r2
 800d06e:	b2db      	uxtb	r3, r3
 800d070:	2b00      	cmp	r3, #0
 800d072:	d002      	beq.n	800d07a <configCheck+0xe6>
    buttonHeld = false;
 800d074:	4b13      	ldr	r3, [pc, #76]	@ (800d0c4 <configCheck+0x130>)
 800d076:	2200      	movs	r2, #0
 800d078:	701a      	strb	r2, [r3, #0]
  }
  if(Check_USB_PowerOn()){
 800d07a:	f7f9 f98d 	bl	8006398 <Check_USB_PowerOn>
 800d07e:	1e03      	subs	r3, r0, #0
 800d080:	d005      	beq.n	800d08e <configCheck+0xfa>
    usbPluggedIn = true;
 800d082:	4b14      	ldr	r3, [pc, #80]	@ (800d0d4 <configCheck+0x140>)
 800d084:	2201      	movs	r2, #1
 800d086:	701a      	strb	r2, [r3, #0]
    EnabledConnectedDevices();
 800d088:	f7fb fa5a 	bl	8008540 <EnabledConnectedDevices>
    if(!userToggle && !init){
      SetLEDsOff();
    }
    usbPluggedIn = false;
  }
}
 800d08c:	e012      	b.n	800d0b4 <configCheck+0x120>
    if(!userToggle && !init){
 800d08e:	4b10      	ldr	r3, [pc, #64]	@ (800d0d0 <configCheck+0x13c>)
 800d090:	781b      	ldrb	r3, [r3, #0]
 800d092:	2201      	movs	r2, #1
 800d094:	4053      	eors	r3, r2
 800d096:	b2db      	uxtb	r3, r3
 800d098:	2b00      	cmp	r3, #0
 800d09a:	d008      	beq.n	800d0ae <configCheck+0x11a>
 800d09c:	4b0e      	ldr	r3, [pc, #56]	@ (800d0d8 <configCheck+0x144>)
 800d09e:	781b      	ldrb	r3, [r3, #0]
 800d0a0:	2201      	movs	r2, #1
 800d0a2:	4053      	eors	r3, r2
 800d0a4:	b2db      	uxtb	r3, r3
 800d0a6:	2b00      	cmp	r3, #0
 800d0a8:	d001      	beq.n	800d0ae <configCheck+0x11a>
      SetLEDsOff();
 800d0aa:	f7ff fef3 	bl	800ce94 <SetLEDsOff>
    usbPluggedIn = false;
 800d0ae:	4b09      	ldr	r3, [pc, #36]	@ (800d0d4 <configCheck+0x140>)
 800d0b0:	2200      	movs	r2, #0
 800d0b2:	701a      	strb	r2, [r3, #0]
}
 800d0b4:	46c0      	nop			@ (mov r8, r8)
 800d0b6:	46bd      	mov	sp, r7
 800d0b8:	bd80      	pop	{r7, pc}
 800d0ba:	46c0      	nop			@ (mov r8, r8)
 800d0bc:	200021e4 	.word	0x200021e4
 800d0c0:	200021e8 	.word	0x200021e8
 800d0c4:	200021e7 	.word	0x200021e7
 800d0c8:	08024368 	.word	0x08024368
 800d0cc:	080242f0 	.word	0x080242f0
 800d0d0:	200021e6 	.word	0x200021e6
 800d0d4:	200021e5 	.word	0x200021e5
 800d0d8:	200000c8 	.word	0x200000c8

0800d0dc <Battery_Upkeep>:
/*
void Status_Upkeep(){
  configCheck();
}
*/
Battery_Status Battery_Upkeep(){
 800d0dc:	b590      	push	{r4, r7, lr}
 800d0de:	b083      	sub	sp, #12
 800d0e0:	af00      	add	r7, sp, #0
  Battery_Status status;
  status = powerCheck();
 800d0e2:	1dfc      	adds	r4, r7, #7
 800d0e4:	f7ff fef2 	bl	800cecc <powerCheck>
 800d0e8:	0003      	movs	r3, r0
 800d0ea:	7023      	strb	r3, [r4, #0]
  powerDisplay(status);  // output LEDs are okay
 800d0ec:	1dfb      	adds	r3, r7, #7
 800d0ee:	781b      	ldrb	r3, [r3, #0]
 800d0f0:	0018      	movs	r0, r3
 800d0f2:	f7ff ff07 	bl	800cf04 <powerDisplay>
  return status;
 800d0f6:	1dfb      	adds	r3, r7, #7
 800d0f8:	781b      	ldrb	r3, [r3, #0]

}
 800d0fa:	0018      	movs	r0, r3
 800d0fc:	46bd      	mov	sp, r7
 800d0fe:	b003      	add	sp, #12
 800d100:	bd90      	pop	{r4, r7, pc}
	...

0800d104 <setuserToggle>:

void setuserToggle(void) {
 800d104:	b580      	push	{r7, lr}
 800d106:	af00      	add	r7, sp, #0
  if (powerCheck() != USB_PLUGGED_IN) { //operate only in battery operation mode
 800d108:	f7ff fee0 	bl	800cecc <powerCheck>
 800d10c:	0003      	movs	r3, r0
 800d10e:	2b01      	cmp	r3, #1
 800d110:	d002      	beq.n	800d118 <setuserToggle+0x14>
    userToggle = true;
 800d112:	4b03      	ldr	r3, [pc, #12]	@ (800d120 <setuserToggle+0x1c>)
 800d114:	2201      	movs	r2, #1
 800d116:	701a      	strb	r2, [r3, #0]
  }
}
 800d118:	46c0      	nop			@ (mov r8, r8)
 800d11a:	46bd      	mov	sp, r7
 800d11c:	bd80      	pop	{r7, pc}
 800d11e:	46c0      	nop			@ (mov r8, r8)
 800d120:	200021e6 	.word	0x200021e6

0800d124 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800d124:	b580      	push	{r7, lr}
 800d126:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800d128:	4b07      	ldr	r3, [pc, #28]	@ (800d148 <HAL_MspInit+0x24>)
 800d12a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800d12c:	4b06      	ldr	r3, [pc, #24]	@ (800d148 <HAL_MspInit+0x24>)
 800d12e:	2101      	movs	r1, #1
 800d130:	430a      	orrs	r2, r1
 800d132:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 800d134:	4b04      	ldr	r3, [pc, #16]	@ (800d148 <HAL_MspInit+0x24>)
 800d136:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d138:	4b03      	ldr	r3, [pc, #12]	@ (800d148 <HAL_MspInit+0x24>)
 800d13a:	2180      	movs	r1, #128	@ 0x80
 800d13c:	0549      	lsls	r1, r1, #21
 800d13e:	430a      	orrs	r2, r1
 800d140:	639a      	str	r2, [r3, #56]	@ 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800d142:	46c0      	nop			@ (mov r8, r8)
 800d144:	46bd      	mov	sp, r7
 800d146:	bd80      	pop	{r7, pc}
 800d148:	40021000 	.word	0x40021000

0800d14c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 800d14c:	b580      	push	{r7, lr}
 800d14e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800d150:	46c0      	nop			@ (mov r8, r8)
 800d152:	e7fd      	b.n	800d150 <NMI_Handler+0x4>

0800d154 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800d154:	b580      	push	{r7, lr}
 800d156:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800d158:	46c0      	nop			@ (mov r8, r8)
 800d15a:	e7fd      	b.n	800d158 <HardFault_Handler+0x4>

0800d15c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800d15c:	b580      	push	{r7, lr}
 800d15e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800d160:	46c0      	nop			@ (mov r8, r8)
 800d162:	46bd      	mov	sp, r7
 800d164:	bd80      	pop	{r7, pc}

0800d166 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800d166:	b580      	push	{r7, lr}
 800d168:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800d16a:	46c0      	nop			@ (mov r8, r8)
 800d16c:	46bd      	mov	sp, r7
 800d16e:	bd80      	pop	{r7, pc}

0800d170 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800d170:	b580      	push	{r7, lr}
 800d172:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800d174:	f001 f966 	bl	800e444 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800d178:	46c0      	nop			@ (mov r8, r8)
 800d17a:	46bd      	mov	sp, r7
 800d17c:	bd80      	pop	{r7, pc}
	...

0800d180 <RTC_IRQHandler>:

/**
  * @brief This function handles RTC global interrupt through EXTI lines 17, 19 and 20 and LSE CSS interrupt through EXTI line 19.
  */
void RTC_IRQHandler(void)
{
 800d180:	b580      	push	{r7, lr}
 800d182:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_IRQn 0 */

  /* USER CODE END RTC_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 800d184:	4b03      	ldr	r3, [pc, #12]	@ (800d194 <RTC_IRQHandler+0x14>)
 800d186:	0018      	movs	r0, r3
 800d188:	f008 fe76 	bl	8015e78 <HAL_RTCEx_WakeUpTimerIRQHandler>
  /* USER CODE BEGIN RTC_IRQn 1 */

  /* USER CODE END RTC_IRQn 1 */
}
 800d18c:	46c0      	nop			@ (mov r8, r8)
 800d18e:	46bd      	mov	sp, r7
 800d190:	bd80      	pop	{r7, pc}
 800d192:	46c0      	nop			@ (mov r8, r8)
 800d194:	20001238 	.word	0x20001238

0800d198 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 800d198:	b580      	push	{r7, lr}
 800d19a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BOOT0_Pin);
 800d19c:	2380      	movs	r3, #128	@ 0x80
 800d19e:	021b      	lsls	r3, r3, #8
 800d1a0:	0018      	movs	r0, r3
 800d1a2:	f002 fc0f 	bl	800f9c4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 800d1a6:	46c0      	nop			@ (mov r8, r8)
 800d1a8:	46bd      	mov	sp, r7
 800d1aa:	bd80      	pop	{r7, pc}

0800d1ac <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 800d1ac:	b580      	push	{r7, lr}
 800d1ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 800d1b0:	4b05      	ldr	r3, [pc, #20]	@ (800d1c8 <DMA1_Channel2_3_IRQHandler+0x1c>)
 800d1b2:	0018      	movs	r0, r3
 800d1b4:	f001 ff97 	bl	800f0e6 <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 800d1b8:	4b04      	ldr	r3, [pc, #16]	@ (800d1cc <DMA1_Channel2_3_IRQHandler+0x20>)
 800d1ba:	0018      	movs	r0, r3
 800d1bc:	f001 ff93 	bl	800f0e6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 800d1c0:	46c0      	nop			@ (mov r8, r8)
 800d1c2:	46bd      	mov	sp, r7
 800d1c4:	bd80      	pop	{r7, pc}
 800d1c6:	46c0      	nop			@ (mov r8, r8)
 800d1c8:	20000edc 	.word	0x20000edc
 800d1cc:	20000e94 	.word	0x20000e94

0800d1d0 <DMA1_Channel4_5_6_7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 4, channel 5, channel 6 and channel 7 interrupts.
  */
void DMA1_Channel4_5_6_7_IRQHandler(void)
{
 800d1d0:	b580      	push	{r7, lr}
 800d1d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_5_6_7_IRQn 0 */

  /* USER CODE END DMA1_Channel4_5_6_7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 800d1d4:	4b07      	ldr	r3, [pc, #28]	@ (800d1f4 <DMA1_Channel4_5_6_7_IRQHandler+0x24>)
 800d1d6:	0018      	movs	r0, r3
 800d1d8:	f001 ff85 	bl	800f0e6 <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_usart4_rx);
 800d1dc:	4b06      	ldr	r3, [pc, #24]	@ (800d1f8 <DMA1_Channel4_5_6_7_IRQHandler+0x28>)
 800d1de:	0018      	movs	r0, r3
 800d1e0:	f001 ff81 	bl	800f0e6 <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_usart4_tx);
 800d1e4:	4b05      	ldr	r3, [pc, #20]	@ (800d1fc <DMA1_Channel4_5_6_7_IRQHandler+0x2c>)
 800d1e6:	0018      	movs	r0, r3
 800d1e8:	f001 ff7d 	bl	800f0e6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_5_6_7_IRQn 1 */

  /* USER CODE END DMA1_Channel4_5_6_7_IRQn 1 */
}
 800d1ec:	46c0      	nop			@ (mov r8, r8)
 800d1ee:	46bd      	mov	sp, r7
 800d1f0:	bd80      	pop	{r7, pc}
 800d1f2:	46c0      	nop			@ (mov r8, r8)
 800d1f4:	20000f60 	.word	0x20000f60
 800d1f8:	200024dc 	.word	0x200024dc
 800d1fc:	20002524 	.word	0x20002524

0800d200 <USART4_5_IRQHandler>:

/**
  * @brief This function handles USART4 and USART5 interrupt.
  */
void USART4_5_IRQHandler(void)
{
 800d200:	b580      	push	{r7, lr}
 800d202:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART4_5_IRQn 0 */

  /* USER CODE END USART4_5_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 800d204:	4b03      	ldr	r3, [pc, #12]	@ (800d214 <USART4_5_IRQHandler+0x14>)
 800d206:	0018      	movs	r0, r3
 800d208:	f009 fd30 	bl	8016c6c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART4_5_IRQn 1 */

  /* USER CODE END USART4_5_IRQn 1 */
}
 800d20c:	46c0      	nop			@ (mov r8, r8)
 800d20e:	46bd      	mov	sp, r7
 800d210:	bd80      	pop	{r7, pc}
 800d212:	46c0      	nop			@ (mov r8, r8)
 800d214:	20002424 	.word	0x20002424

0800d218 <I2C1_IRQHandler>:

/**
  * @brief This function handles I2C1 event global interrupt / I2C1 wake-up interrupt through EXTI line 23.
  */
void I2C1_IRQHandler(void)
{
 800d218:	b580      	push	{r7, lr}
 800d21a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_IRQn 0 */

  /* USER CODE END I2C1_IRQn 0 */
  if (hi2c1.Instance->ISR & (I2C_FLAG_BERR | I2C_FLAG_ARLO | I2C_FLAG_OVR))
 800d21c:	4b09      	ldr	r3, [pc, #36]	@ (800d244 <I2C1_IRQHandler+0x2c>)
 800d21e:	681b      	ldr	r3, [r3, #0]
 800d220:	699a      	ldr	r2, [r3, #24]
 800d222:	23e0      	movs	r3, #224	@ 0xe0
 800d224:	00db      	lsls	r3, r3, #3
 800d226:	4013      	ands	r3, r2
 800d228:	d004      	beq.n	800d234 <I2C1_IRQHandler+0x1c>
  {
    HAL_I2C_ER_IRQHandler(&hi2c1);
 800d22a:	4b06      	ldr	r3, [pc, #24]	@ (800d244 <I2C1_IRQHandler+0x2c>)
 800d22c:	0018      	movs	r0, r3
 800d22e:	f003 f8b1 	bl	8010394 <HAL_I2C_ER_IRQHandler>
    HAL_I2C_EV_IRQHandler(&hi2c1);
  }
  /* USER CODE BEGIN I2C1_IRQn 1 */

  /* USER CODE END I2C1_IRQn 1 */
}
 800d232:	e003      	b.n	800d23c <I2C1_IRQHandler+0x24>
    HAL_I2C_EV_IRQHandler(&hi2c1);
 800d234:	4b03      	ldr	r3, [pc, #12]	@ (800d244 <I2C1_IRQHandler+0x2c>)
 800d236:	0018      	movs	r0, r3
 800d238:	f003 f892 	bl	8010360 <HAL_I2C_EV_IRQHandler>
}
 800d23c:	46c0      	nop			@ (mov r8, r8)
 800d23e:	46bd      	mov	sp, r7
 800d240:	bd80      	pop	{r7, pc}
 800d242:	46c0      	nop			@ (mov r8, r8)
 800d244:	20000dec 	.word	0x20000dec

0800d248 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 800d248:	b580      	push	{r7, lr}
 800d24a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800d24c:	4b03      	ldr	r3, [pc, #12]	@ (800d25c <USART1_IRQHandler+0x14>)
 800d24e:	0018      	movs	r0, r3
 800d250:	f009 fd0c 	bl	8016c6c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800d254:	46c0      	nop			@ (mov r8, r8)
 800d256:	46bd      	mov	sp, r7
 800d258:	bd80      	pop	{r7, pc}
 800d25a:	46c0      	nop			@ (mov r8, r8)
 800d25c:	2000236c 	.word	0x2000236c

0800d260 <USB_IRQHandler>:

/**
  * @brief This function handles USB event interrupt / USB wake-up interrupt through EXTI line 18.
  */
void USB_IRQHandler(void)
{
 800d260:	b580      	push	{r7, lr}
 800d262:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_IRQn 0 */

  /* USER CODE END USB_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 800d264:	4b03      	ldr	r3, [pc, #12]	@ (800d274 <USB_IRQHandler+0x14>)
 800d266:	0018      	movs	r0, r3
 800d268:	f005 fc72 	bl	8012b50 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_IRQn 1 */

  /* USER CODE END USB_IRQn 1 */
}
 800d26c:	46c0      	nop			@ (mov r8, r8)
 800d26e:	46bd      	mov	sp, r7
 800d270:	bd80      	pop	{r7, pc}
 800d272:	46c0      	nop			@ (mov r8, r8)
 800d274:	20003338 	.word	0x20003338

0800d278 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800d278:	b580      	push	{r7, lr}
 800d27a:	af00      	add	r7, sp, #0
  return 1;
 800d27c:	2301      	movs	r3, #1
}
 800d27e:	0018      	movs	r0, r3
 800d280:	46bd      	mov	sp, r7
 800d282:	bd80      	pop	{r7, pc}

0800d284 <_kill>:

int _kill(int pid, int sig)
{
 800d284:	b580      	push	{r7, lr}
 800d286:	b082      	sub	sp, #8
 800d288:	af00      	add	r7, sp, #0
 800d28a:	6078      	str	r0, [r7, #4]
 800d28c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800d28e:	f012 fbd1 	bl	801fa34 <__errno>
 800d292:	0003      	movs	r3, r0
 800d294:	2216      	movs	r2, #22
 800d296:	601a      	str	r2, [r3, #0]
  return -1;
 800d298:	2301      	movs	r3, #1
 800d29a:	425b      	negs	r3, r3
}
 800d29c:	0018      	movs	r0, r3
 800d29e:	46bd      	mov	sp, r7
 800d2a0:	b002      	add	sp, #8
 800d2a2:	bd80      	pop	{r7, pc}

0800d2a4 <_exit>:

void _exit (int status)
{
 800d2a4:	b580      	push	{r7, lr}
 800d2a6:	b082      	sub	sp, #8
 800d2a8:	af00      	add	r7, sp, #0
 800d2aa:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800d2ac:	2301      	movs	r3, #1
 800d2ae:	425a      	negs	r2, r3
 800d2b0:	687b      	ldr	r3, [r7, #4]
 800d2b2:	0011      	movs	r1, r2
 800d2b4:	0018      	movs	r0, r3
 800d2b6:	f7ff ffe5 	bl	800d284 <_kill>
  while (1) {}    /* Make sure we hang here */
 800d2ba:	46c0      	nop			@ (mov r8, r8)
 800d2bc:	e7fd      	b.n	800d2ba <_exit+0x16>

0800d2be <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800d2be:	b580      	push	{r7, lr}
 800d2c0:	b086      	sub	sp, #24
 800d2c2:	af00      	add	r7, sp, #0
 800d2c4:	60f8      	str	r0, [r7, #12]
 800d2c6:	60b9      	str	r1, [r7, #8]
 800d2c8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800d2ca:	2300      	movs	r3, #0
 800d2cc:	617b      	str	r3, [r7, #20]
 800d2ce:	e00a      	b.n	800d2e6 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800d2d0:	e000      	b.n	800d2d4 <_read+0x16>
 800d2d2:	bf00      	nop
 800d2d4:	0001      	movs	r1, r0
 800d2d6:	68bb      	ldr	r3, [r7, #8]
 800d2d8:	1c5a      	adds	r2, r3, #1
 800d2da:	60ba      	str	r2, [r7, #8]
 800d2dc:	b2ca      	uxtb	r2, r1
 800d2de:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800d2e0:	697b      	ldr	r3, [r7, #20]
 800d2e2:	3301      	adds	r3, #1
 800d2e4:	617b      	str	r3, [r7, #20]
 800d2e6:	697a      	ldr	r2, [r7, #20]
 800d2e8:	687b      	ldr	r3, [r7, #4]
 800d2ea:	429a      	cmp	r2, r3
 800d2ec:	dbf0      	blt.n	800d2d0 <_read+0x12>
  }

  return len;
 800d2ee:	687b      	ldr	r3, [r7, #4]
}
 800d2f0:	0018      	movs	r0, r3
 800d2f2:	46bd      	mov	sp, r7
 800d2f4:	b006      	add	sp, #24
 800d2f6:	bd80      	pop	{r7, pc}

0800d2f8 <_close>:
  }
  return len;
}

int _close(int file)
{
 800d2f8:	b580      	push	{r7, lr}
 800d2fa:	b082      	sub	sp, #8
 800d2fc:	af00      	add	r7, sp, #0
 800d2fe:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800d300:	2301      	movs	r3, #1
 800d302:	425b      	negs	r3, r3
}
 800d304:	0018      	movs	r0, r3
 800d306:	46bd      	mov	sp, r7
 800d308:	b002      	add	sp, #8
 800d30a:	bd80      	pop	{r7, pc}

0800d30c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800d30c:	b580      	push	{r7, lr}
 800d30e:	b082      	sub	sp, #8
 800d310:	af00      	add	r7, sp, #0
 800d312:	6078      	str	r0, [r7, #4]
 800d314:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800d316:	683b      	ldr	r3, [r7, #0]
 800d318:	2280      	movs	r2, #128	@ 0x80
 800d31a:	0192      	lsls	r2, r2, #6
 800d31c:	605a      	str	r2, [r3, #4]
  return 0;
 800d31e:	2300      	movs	r3, #0
}
 800d320:	0018      	movs	r0, r3
 800d322:	46bd      	mov	sp, r7
 800d324:	b002      	add	sp, #8
 800d326:	bd80      	pop	{r7, pc}

0800d328 <_isatty>:

int _isatty(int file)
{
 800d328:	b580      	push	{r7, lr}
 800d32a:	b082      	sub	sp, #8
 800d32c:	af00      	add	r7, sp, #0
 800d32e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800d330:	2301      	movs	r3, #1
}
 800d332:	0018      	movs	r0, r3
 800d334:	46bd      	mov	sp, r7
 800d336:	b002      	add	sp, #8
 800d338:	bd80      	pop	{r7, pc}

0800d33a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800d33a:	b580      	push	{r7, lr}
 800d33c:	b084      	sub	sp, #16
 800d33e:	af00      	add	r7, sp, #0
 800d340:	60f8      	str	r0, [r7, #12]
 800d342:	60b9      	str	r1, [r7, #8]
 800d344:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800d346:	2300      	movs	r3, #0
}
 800d348:	0018      	movs	r0, r3
 800d34a:	46bd      	mov	sp, r7
 800d34c:	b004      	add	sp, #16
 800d34e:	bd80      	pop	{r7, pc}

0800d350 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800d350:	b580      	push	{r7, lr}
 800d352:	b086      	sub	sp, #24
 800d354:	af00      	add	r7, sp, #0
 800d356:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800d358:	4a14      	ldr	r2, [pc, #80]	@ (800d3ac <_sbrk+0x5c>)
 800d35a:	4b15      	ldr	r3, [pc, #84]	@ (800d3b0 <_sbrk+0x60>)
 800d35c:	1ad3      	subs	r3, r2, r3
 800d35e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800d360:	697b      	ldr	r3, [r7, #20]
 800d362:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800d364:	4b13      	ldr	r3, [pc, #76]	@ (800d3b4 <_sbrk+0x64>)
 800d366:	681b      	ldr	r3, [r3, #0]
 800d368:	2b00      	cmp	r3, #0
 800d36a:	d102      	bne.n	800d372 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800d36c:	4b11      	ldr	r3, [pc, #68]	@ (800d3b4 <_sbrk+0x64>)
 800d36e:	4a12      	ldr	r2, [pc, #72]	@ (800d3b8 <_sbrk+0x68>)
 800d370:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800d372:	4b10      	ldr	r3, [pc, #64]	@ (800d3b4 <_sbrk+0x64>)
 800d374:	681a      	ldr	r2, [r3, #0]
 800d376:	687b      	ldr	r3, [r7, #4]
 800d378:	18d3      	adds	r3, r2, r3
 800d37a:	693a      	ldr	r2, [r7, #16]
 800d37c:	429a      	cmp	r2, r3
 800d37e:	d207      	bcs.n	800d390 <_sbrk+0x40>
  {
    errno = ENOMEM;
 800d380:	f012 fb58 	bl	801fa34 <__errno>
 800d384:	0003      	movs	r3, r0
 800d386:	220c      	movs	r2, #12
 800d388:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800d38a:	2301      	movs	r3, #1
 800d38c:	425b      	negs	r3, r3
 800d38e:	e009      	b.n	800d3a4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800d390:	4b08      	ldr	r3, [pc, #32]	@ (800d3b4 <_sbrk+0x64>)
 800d392:	681b      	ldr	r3, [r3, #0]
 800d394:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800d396:	4b07      	ldr	r3, [pc, #28]	@ (800d3b4 <_sbrk+0x64>)
 800d398:	681a      	ldr	r2, [r3, #0]
 800d39a:	687b      	ldr	r3, [r7, #4]
 800d39c:	18d2      	adds	r2, r2, r3
 800d39e:	4b05      	ldr	r3, [pc, #20]	@ (800d3b4 <_sbrk+0x64>)
 800d3a0:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 800d3a2:	68fb      	ldr	r3, [r7, #12]
}
 800d3a4:	0018      	movs	r0, r3
 800d3a6:	46bd      	mov	sp, r7
 800d3a8:	b006      	add	sp, #24
 800d3aa:	bd80      	pop	{r7, pc}
 800d3ac:	20005000 	.word	0x20005000
 800d3b0:	00000400 	.word	0x00000400
 800d3b4:	200021f0 	.word	0x200021f0
 800d3b8:	20003998 	.word	0x20003998

0800d3bc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800d3bc:	b580      	push	{r7, lr}
 800d3be:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800d3c0:	46c0      	nop			@ (mov r8, r8)
 800d3c2:	46bd      	mov	sp, r7
 800d3c4:	bd80      	pop	{r7, pc}
	...

0800d3c8 <MX_TIM2_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim6;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800d3c8:	b580      	push	{r7, lr}
 800d3ca:	b086      	sub	sp, #24
 800d3cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800d3ce:	2310      	movs	r3, #16
 800d3d0:	18fb      	adds	r3, r7, r3
 800d3d2:	0018      	movs	r0, r3
 800d3d4:	2308      	movs	r3, #8
 800d3d6:	001a      	movs	r2, r3
 800d3d8:	2100      	movs	r1, #0
 800d3da:	f012 fa87 	bl	801f8ec <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 800d3de:	003b      	movs	r3, r7
 800d3e0:	0018      	movs	r0, r3
 800d3e2:	2310      	movs	r3, #16
 800d3e4:	001a      	movs	r2, r3
 800d3e6:	2100      	movs	r1, #0
 800d3e8:	f012 fa80 	bl	801f8ec <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800d3ec:	4b2e      	ldr	r3, [pc, #184]	@ (800d4a8 <MX_TIM2_Init+0xe0>)
 800d3ee:	2280      	movs	r2, #128	@ 0x80
 800d3f0:	05d2      	lsls	r2, r2, #23
 800d3f2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800d3f4:	4b2c      	ldr	r3, [pc, #176]	@ (800d4a8 <MX_TIM2_Init+0xe0>)
 800d3f6:	2200      	movs	r2, #0
 800d3f8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800d3fa:	4b2b      	ldr	r3, [pc, #172]	@ (800d4a8 <MX_TIM2_Init+0xe0>)
 800d3fc:	2200      	movs	r2, #0
 800d3fe:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 800d400:	4b29      	ldr	r3, [pc, #164]	@ (800d4a8 <MX_TIM2_Init+0xe0>)
 800d402:	4a2a      	ldr	r2, [pc, #168]	@ (800d4ac <MX_TIM2_Init+0xe4>)
 800d404:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800d406:	4b28      	ldr	r3, [pc, #160]	@ (800d4a8 <MX_TIM2_Init+0xe0>)
 800d408:	2200      	movs	r2, #0
 800d40a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800d40c:	4b26      	ldr	r3, [pc, #152]	@ (800d4a8 <MX_TIM2_Init+0xe0>)
 800d40e:	2200      	movs	r2, #0
 800d410:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800d412:	4b25      	ldr	r3, [pc, #148]	@ (800d4a8 <MX_TIM2_Init+0xe0>)
 800d414:	0018      	movs	r0, r3
 800d416:	f008 fe3d 	bl	8016094 <HAL_TIM_PWM_Init>
 800d41a:	1e03      	subs	r3, r0, #0
 800d41c:	d001      	beq.n	800d422 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 800d41e:	f7fa fe23 	bl	8008068 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800d422:	2110      	movs	r1, #16
 800d424:	187b      	adds	r3, r7, r1
 800d426:	2200      	movs	r2, #0
 800d428:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800d42a:	187b      	adds	r3, r7, r1
 800d42c:	2200      	movs	r2, #0
 800d42e:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800d430:	187a      	adds	r2, r7, r1
 800d432:	4b1d      	ldr	r3, [pc, #116]	@ (800d4a8 <MX_TIM2_Init+0xe0>)
 800d434:	0011      	movs	r1, r2
 800d436:	0018      	movs	r0, r3
 800d438:	f009 f94a 	bl	80166d0 <HAL_TIMEx_MasterConfigSynchronization>
 800d43c:	1e03      	subs	r3, r0, #0
 800d43e:	d001      	beq.n	800d444 <MX_TIM2_Init+0x7c>
  {
    Error_Handler();
 800d440:	f7fa fe12 	bl	8008068 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800d444:	003b      	movs	r3, r7
 800d446:	2260      	movs	r2, #96	@ 0x60
 800d448:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 800d44a:	003b      	movs	r3, r7
 800d44c:	2200      	movs	r2, #0
 800d44e:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800d450:	003b      	movs	r3, r7
 800d452:	2200      	movs	r2, #0
 800d454:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800d456:	003b      	movs	r3, r7
 800d458:	2200      	movs	r2, #0
 800d45a:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800d45c:	0039      	movs	r1, r7
 800d45e:	4b12      	ldr	r3, [pc, #72]	@ (800d4a8 <MX_TIM2_Init+0xe0>)
 800d460:	2200      	movs	r2, #0
 800d462:	0018      	movs	r0, r3
 800d464:	f008 fee8 	bl	8016238 <HAL_TIM_PWM_ConfigChannel>
 800d468:	1e03      	subs	r3, r0, #0
 800d46a:	d001      	beq.n	800d470 <MX_TIM2_Init+0xa8>
  {
    Error_Handler();
 800d46c:	f7fa fdfc 	bl	8008068 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800d470:	0039      	movs	r1, r7
 800d472:	4b0d      	ldr	r3, [pc, #52]	@ (800d4a8 <MX_TIM2_Init+0xe0>)
 800d474:	2208      	movs	r2, #8
 800d476:	0018      	movs	r0, r3
 800d478:	f008 fede 	bl	8016238 <HAL_TIM_PWM_ConfigChannel>
 800d47c:	1e03      	subs	r3, r0, #0
 800d47e:	d001      	beq.n	800d484 <MX_TIM2_Init+0xbc>
  {
    Error_Handler();
 800d480:	f7fa fdf2 	bl	8008068 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800d484:	0039      	movs	r1, r7
 800d486:	4b08      	ldr	r3, [pc, #32]	@ (800d4a8 <MX_TIM2_Init+0xe0>)
 800d488:	220c      	movs	r2, #12
 800d48a:	0018      	movs	r0, r3
 800d48c:	f008 fed4 	bl	8016238 <HAL_TIM_PWM_ConfigChannel>
 800d490:	1e03      	subs	r3, r0, #0
 800d492:	d001      	beq.n	800d498 <MX_TIM2_Init+0xd0>
  {
    Error_Handler();
 800d494:	f7fa fde8 	bl	8008068 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800d498:	4b03      	ldr	r3, [pc, #12]	@ (800d4a8 <MX_TIM2_Init+0xe0>)
 800d49a:	0018      	movs	r0, r3
 800d49c:	f000 f8fe 	bl	800d69c <HAL_TIM_MspPostInit>

}
 800d4a0:	46c0      	nop			@ (mov r8, r8)
 800d4a2:	46bd      	mov	sp, r7
 800d4a4:	b006      	add	sp, #24
 800d4a6:	bd80      	pop	{r7, pc}
 800d4a8:	200021f4 	.word	0x200021f4
 800d4ac:	0000ffff 	.word	0x0000ffff

0800d4b0 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 800d4b0:	b580      	push	{r7, lr}
 800d4b2:	b086      	sub	sp, #24
 800d4b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800d4b6:	2310      	movs	r3, #16
 800d4b8:	18fb      	adds	r3, r7, r3
 800d4ba:	0018      	movs	r0, r3
 800d4bc:	2308      	movs	r3, #8
 800d4be:	001a      	movs	r2, r3
 800d4c0:	2100      	movs	r1, #0
 800d4c2:	f012 fa13 	bl	801f8ec <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 800d4c6:	003b      	movs	r3, r7
 800d4c8:	0018      	movs	r0, r3
 800d4ca:	2310      	movs	r3, #16
 800d4cc:	001a      	movs	r2, r3
 800d4ce:	2100      	movs	r1, #0
 800d4d0:	f012 fa0c 	bl	801f8ec <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800d4d4:	4b32      	ldr	r3, [pc, #200]	@ (800d5a0 <MX_TIM3_Init+0xf0>)
 800d4d6:	4a33      	ldr	r2, [pc, #204]	@ (800d5a4 <MX_TIM3_Init+0xf4>)
 800d4d8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800d4da:	4b31      	ldr	r3, [pc, #196]	@ (800d5a0 <MX_TIM3_Init+0xf0>)
 800d4dc:	2200      	movs	r2, #0
 800d4de:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800d4e0:	4b2f      	ldr	r3, [pc, #188]	@ (800d5a0 <MX_TIM3_Init+0xf0>)
 800d4e2:	2200      	movs	r2, #0
 800d4e4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800d4e6:	4b2e      	ldr	r3, [pc, #184]	@ (800d5a0 <MX_TIM3_Init+0xf0>)
 800d4e8:	4a2f      	ldr	r2, [pc, #188]	@ (800d5a8 <MX_TIM3_Init+0xf8>)
 800d4ea:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800d4ec:	4b2c      	ldr	r3, [pc, #176]	@ (800d5a0 <MX_TIM3_Init+0xf0>)
 800d4ee:	2200      	movs	r2, #0
 800d4f0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800d4f2:	4b2b      	ldr	r3, [pc, #172]	@ (800d5a0 <MX_TIM3_Init+0xf0>)
 800d4f4:	2200      	movs	r2, #0
 800d4f6:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800d4f8:	4b29      	ldr	r3, [pc, #164]	@ (800d5a0 <MX_TIM3_Init+0xf0>)
 800d4fa:	0018      	movs	r0, r3
 800d4fc:	f008 fdca 	bl	8016094 <HAL_TIM_PWM_Init>
 800d500:	1e03      	subs	r3, r0, #0
 800d502:	d001      	beq.n	800d508 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 800d504:	f7fa fdb0 	bl	8008068 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800d508:	2110      	movs	r1, #16
 800d50a:	187b      	adds	r3, r7, r1
 800d50c:	2200      	movs	r2, #0
 800d50e:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800d510:	187b      	adds	r3, r7, r1
 800d512:	2200      	movs	r2, #0
 800d514:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800d516:	187a      	adds	r2, r7, r1
 800d518:	4b21      	ldr	r3, [pc, #132]	@ (800d5a0 <MX_TIM3_Init+0xf0>)
 800d51a:	0011      	movs	r1, r2
 800d51c:	0018      	movs	r0, r3
 800d51e:	f009 f8d7 	bl	80166d0 <HAL_TIMEx_MasterConfigSynchronization>
 800d522:	1e03      	subs	r3, r0, #0
 800d524:	d001      	beq.n	800d52a <MX_TIM3_Init+0x7a>
  {
    Error_Handler();
 800d526:	f7fa fd9f 	bl	8008068 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800d52a:	003b      	movs	r3, r7
 800d52c:	2260      	movs	r2, #96	@ 0x60
 800d52e:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 800d530:	003b      	movs	r3, r7
 800d532:	2200      	movs	r2, #0
 800d534:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800d536:	003b      	movs	r3, r7
 800d538:	2200      	movs	r2, #0
 800d53a:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800d53c:	003b      	movs	r3, r7
 800d53e:	2200      	movs	r2, #0
 800d540:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800d542:	0039      	movs	r1, r7
 800d544:	4b16      	ldr	r3, [pc, #88]	@ (800d5a0 <MX_TIM3_Init+0xf0>)
 800d546:	2200      	movs	r2, #0
 800d548:	0018      	movs	r0, r3
 800d54a:	f008 fe75 	bl	8016238 <HAL_TIM_PWM_ConfigChannel>
 800d54e:	1e03      	subs	r3, r0, #0
 800d550:	d001      	beq.n	800d556 <MX_TIM3_Init+0xa6>
  {
    Error_Handler();
 800d552:	f7fa fd89 	bl	8008068 <Error_Handler>
  }
  if (HAL_TIMEx_RemapConfig(&htim3, TIM3_TI1_GPIO) != HAL_OK)
 800d556:	4b12      	ldr	r3, [pc, #72]	@ (800d5a0 <MX_TIM3_Init+0xf0>)
 800d558:	2104      	movs	r1, #4
 800d55a:	0018      	movs	r0, r3
 800d55c:	f009 f916 	bl	801678c <HAL_TIMEx_RemapConfig>
 800d560:	1e03      	subs	r3, r0, #0
 800d562:	d001      	beq.n	800d568 <MX_TIM3_Init+0xb8>
  {
    Error_Handler();
 800d564:	f7fa fd80 	bl	8008068 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800d568:	0039      	movs	r1, r7
 800d56a:	4b0d      	ldr	r3, [pc, #52]	@ (800d5a0 <MX_TIM3_Init+0xf0>)
 800d56c:	2204      	movs	r2, #4
 800d56e:	0018      	movs	r0, r3
 800d570:	f008 fe62 	bl	8016238 <HAL_TIM_PWM_ConfigChannel>
 800d574:	1e03      	subs	r3, r0, #0
 800d576:	d001      	beq.n	800d57c <MX_TIM3_Init+0xcc>
  {
    Error_Handler();
 800d578:	f7fa fd76 	bl	8008068 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800d57c:	0039      	movs	r1, r7
 800d57e:	4b08      	ldr	r3, [pc, #32]	@ (800d5a0 <MX_TIM3_Init+0xf0>)
 800d580:	2208      	movs	r2, #8
 800d582:	0018      	movs	r0, r3
 800d584:	f008 fe58 	bl	8016238 <HAL_TIM_PWM_ConfigChannel>
 800d588:	1e03      	subs	r3, r0, #0
 800d58a:	d001      	beq.n	800d590 <MX_TIM3_Init+0xe0>
  {
    Error_Handler();
 800d58c:	f7fa fd6c 	bl	8008068 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800d590:	4b03      	ldr	r3, [pc, #12]	@ (800d5a0 <MX_TIM3_Init+0xf0>)
 800d592:	0018      	movs	r0, r3
 800d594:	f000 f882 	bl	800d69c <HAL_TIM_MspPostInit>

}
 800d598:	46c0      	nop			@ (mov r8, r8)
 800d59a:	46bd      	mov	sp, r7
 800d59c:	b006      	add	sp, #24
 800d59e:	bd80      	pop	{r7, pc}
 800d5a0:	20002234 	.word	0x20002234
 800d5a4:	40000400 	.word	0x40000400
 800d5a8:	0000ffff 	.word	0x0000ffff

0800d5ac <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 800d5ac:	b580      	push	{r7, lr}
 800d5ae:	b082      	sub	sp, #8
 800d5b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800d5b2:	003b      	movs	r3, r7
 800d5b4:	0018      	movs	r0, r3
 800d5b6:	2308      	movs	r3, #8
 800d5b8:	001a      	movs	r2, r3
 800d5ba:	2100      	movs	r1, #0
 800d5bc:	f012 f996 	bl	801f8ec <memset>

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800d5c0:	4b15      	ldr	r3, [pc, #84]	@ (800d618 <MX_TIM6_Init+0x6c>)
 800d5c2:	4a16      	ldr	r2, [pc, #88]	@ (800d61c <MX_TIM6_Init+0x70>)
 800d5c4:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 10;
 800d5c6:	4b14      	ldr	r3, [pc, #80]	@ (800d618 <MX_TIM6_Init+0x6c>)
 800d5c8:	220a      	movs	r2, #10
 800d5ca:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800d5cc:	4b12      	ldr	r3, [pc, #72]	@ (800d618 <MX_TIM6_Init+0x6c>)
 800d5ce:	2200      	movs	r2, #0
 800d5d0:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 800d5d2:	4b11      	ldr	r3, [pc, #68]	@ (800d618 <MX_TIM6_Init+0x6c>)
 800d5d4:	4a12      	ldr	r2, [pc, #72]	@ (800d620 <MX_TIM6_Init+0x74>)
 800d5d6:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800d5d8:	4b0f      	ldr	r3, [pc, #60]	@ (800d618 <MX_TIM6_Init+0x6c>)
 800d5da:	2200      	movs	r2, #0
 800d5dc:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800d5de:	4b0e      	ldr	r3, [pc, #56]	@ (800d618 <MX_TIM6_Init+0x6c>)
 800d5e0:	0018      	movs	r0, r3
 800d5e2:	f008 fcaf 	bl	8015f44 <HAL_TIM_Base_Init>
 800d5e6:	1e03      	subs	r3, r0, #0
 800d5e8:	d001      	beq.n	800d5ee <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 800d5ea:	f7fa fd3d 	bl	8008068 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800d5ee:	003b      	movs	r3, r7
 800d5f0:	2200      	movs	r2, #0
 800d5f2:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800d5f4:	003b      	movs	r3, r7
 800d5f6:	2200      	movs	r2, #0
 800d5f8:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800d5fa:	003a      	movs	r2, r7
 800d5fc:	4b06      	ldr	r3, [pc, #24]	@ (800d618 <MX_TIM6_Init+0x6c>)
 800d5fe:	0011      	movs	r1, r2
 800d600:	0018      	movs	r0, r3
 800d602:	f009 f865 	bl	80166d0 <HAL_TIMEx_MasterConfigSynchronization>
 800d606:	1e03      	subs	r3, r0, #0
 800d608:	d001      	beq.n	800d60e <MX_TIM6_Init+0x62>
  {
    Error_Handler();
 800d60a:	f7fa fd2d 	bl	8008068 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800d60e:	46c0      	nop			@ (mov r8, r8)
 800d610:	46bd      	mov	sp, r7
 800d612:	b002      	add	sp, #8
 800d614:	bd80      	pop	{r7, pc}
 800d616:	46c0      	nop			@ (mov r8, r8)
 800d618:	20002274 	.word	0x20002274
 800d61c:	40001000 	.word	0x40001000
 800d620:	0000ffff 	.word	0x0000ffff

0800d624 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 800d624:	b580      	push	{r7, lr}
 800d626:	b082      	sub	sp, #8
 800d628:	af00      	add	r7, sp, #0
 800d62a:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 800d62c:	687b      	ldr	r3, [r7, #4]
 800d62e:	681a      	ldr	r2, [r3, #0]
 800d630:	2380      	movs	r3, #128	@ 0x80
 800d632:	05db      	lsls	r3, r3, #23
 800d634:	429a      	cmp	r2, r3
 800d636:	d106      	bne.n	800d646 <HAL_TIM_PWM_MspInit+0x22>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800d638:	4b0a      	ldr	r3, [pc, #40]	@ (800d664 <HAL_TIM_PWM_MspInit+0x40>)
 800d63a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d63c:	4b09      	ldr	r3, [pc, #36]	@ (800d664 <HAL_TIM_PWM_MspInit+0x40>)
 800d63e:	2101      	movs	r1, #1
 800d640:	430a      	orrs	r2, r1
 800d642:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_RCC_TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 800d644:	e00a      	b.n	800d65c <HAL_TIM_PWM_MspInit+0x38>
  else if(tim_pwmHandle->Instance==TIM3)
 800d646:	687b      	ldr	r3, [r7, #4]
 800d648:	681b      	ldr	r3, [r3, #0]
 800d64a:	4a07      	ldr	r2, [pc, #28]	@ (800d668 <HAL_TIM_PWM_MspInit+0x44>)
 800d64c:	4293      	cmp	r3, r2
 800d64e:	d105      	bne.n	800d65c <HAL_TIM_PWM_MspInit+0x38>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800d650:	4b04      	ldr	r3, [pc, #16]	@ (800d664 <HAL_TIM_PWM_MspInit+0x40>)
 800d652:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d654:	4b03      	ldr	r3, [pc, #12]	@ (800d664 <HAL_TIM_PWM_MspInit+0x40>)
 800d656:	2102      	movs	r1, #2
 800d658:	430a      	orrs	r2, r1
 800d65a:	639a      	str	r2, [r3, #56]	@ 0x38
}
 800d65c:	46c0      	nop			@ (mov r8, r8)
 800d65e:	46bd      	mov	sp, r7
 800d660:	b002      	add	sp, #8
 800d662:	bd80      	pop	{r7, pc}
 800d664:	40021000 	.word	0x40021000
 800d668:	40000400 	.word	0x40000400

0800d66c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800d66c:	b580      	push	{r7, lr}
 800d66e:	b082      	sub	sp, #8
 800d670:	af00      	add	r7, sp, #0
 800d672:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 800d674:	687b      	ldr	r3, [r7, #4]
 800d676:	681b      	ldr	r3, [r3, #0]
 800d678:	4a06      	ldr	r2, [pc, #24]	@ (800d694 <HAL_TIM_Base_MspInit+0x28>)
 800d67a:	4293      	cmp	r3, r2
 800d67c:	d105      	bne.n	800d68a <HAL_TIM_Base_MspInit+0x1e>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 800d67e:	4b06      	ldr	r3, [pc, #24]	@ (800d698 <HAL_TIM_Base_MspInit+0x2c>)
 800d680:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d682:	4b05      	ldr	r3, [pc, #20]	@ (800d698 <HAL_TIM_Base_MspInit+0x2c>)
 800d684:	2110      	movs	r1, #16
 800d686:	430a      	orrs	r2, r1
 800d688:	639a      	str	r2, [r3, #56]	@ 0x38
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 800d68a:	46c0      	nop			@ (mov r8, r8)
 800d68c:	46bd      	mov	sp, r7
 800d68e:	b002      	add	sp, #8
 800d690:	bd80      	pop	{r7, pc}
 800d692:	46c0      	nop			@ (mov r8, r8)
 800d694:	40001000 	.word	0x40001000
 800d698:	40021000 	.word	0x40021000

0800d69c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800d69c:	b590      	push	{r4, r7, lr}
 800d69e:	b08b      	sub	sp, #44	@ 0x2c
 800d6a0:	af00      	add	r7, sp, #0
 800d6a2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800d6a4:	2414      	movs	r4, #20
 800d6a6:	193b      	adds	r3, r7, r4
 800d6a8:	0018      	movs	r0, r3
 800d6aa:	2314      	movs	r3, #20
 800d6ac:	001a      	movs	r2, r3
 800d6ae:	2100      	movs	r1, #0
 800d6b0:	f012 f91c 	bl	801f8ec <memset>
  if(timHandle->Instance==TIM2)
 800d6b4:	687b      	ldr	r3, [r7, #4]
 800d6b6:	681a      	ldr	r2, [r3, #0]
 800d6b8:	2380      	movs	r3, #128	@ 0x80
 800d6ba:	05db      	lsls	r3, r3, #23
 800d6bc:	429a      	cmp	r2, r3
 800d6be:	d123      	bne.n	800d708 <HAL_TIM_MspPostInit+0x6c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800d6c0:	4b27      	ldr	r3, [pc, #156]	@ (800d760 <HAL_TIM_MspPostInit+0xc4>)
 800d6c2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d6c4:	4b26      	ldr	r3, [pc, #152]	@ (800d760 <HAL_TIM_MspPostInit+0xc4>)
 800d6c6:	2101      	movs	r1, #1
 800d6c8:	430a      	orrs	r2, r1
 800d6ca:	62da      	str	r2, [r3, #44]	@ 0x2c
 800d6cc:	4b24      	ldr	r3, [pc, #144]	@ (800d760 <HAL_TIM_MspPostInit+0xc4>)
 800d6ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d6d0:	2201      	movs	r2, #1
 800d6d2:	4013      	ands	r3, r2
 800d6d4:	613b      	str	r3, [r7, #16]
 800d6d6:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PA2     ------> TIM2_CH3
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = MCU_LED_B_R_Pin|MCU_LED_B_G_Pin|MCU_LED_B_B_Pin;
 800d6d8:	0021      	movs	r1, r4
 800d6da:	187b      	adds	r3, r7, r1
 800d6dc:	220d      	movs	r2, #13
 800d6de:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d6e0:	187b      	adds	r3, r7, r1
 800d6e2:	2202      	movs	r2, #2
 800d6e4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d6e6:	187b      	adds	r3, r7, r1
 800d6e8:	2200      	movs	r2, #0
 800d6ea:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800d6ec:	187b      	adds	r3, r7, r1
 800d6ee:	2200      	movs	r2, #0
 800d6f0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 800d6f2:	187b      	adds	r3, r7, r1
 800d6f4:	2202      	movs	r2, #2
 800d6f6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800d6f8:	187a      	adds	r2, r7, r1
 800d6fa:	23a0      	movs	r3, #160	@ 0xa0
 800d6fc:	05db      	lsls	r3, r3, #23
 800d6fe:	0011      	movs	r1, r2
 800d700:	0018      	movs	r0, r3
 800d702:	f001 ffa7 	bl	800f654 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800d706:	e027      	b.n	800d758 <HAL_TIM_MspPostInit+0xbc>
  else if(timHandle->Instance==TIM3)
 800d708:	687b      	ldr	r3, [r7, #4]
 800d70a:	681b      	ldr	r3, [r3, #0]
 800d70c:	4a15      	ldr	r2, [pc, #84]	@ (800d764 <HAL_TIM_MspPostInit+0xc8>)
 800d70e:	4293      	cmp	r3, r2
 800d710:	d122      	bne.n	800d758 <HAL_TIM_MspPostInit+0xbc>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800d712:	4b13      	ldr	r3, [pc, #76]	@ (800d760 <HAL_TIM_MspPostInit+0xc4>)
 800d714:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d716:	4b12      	ldr	r3, [pc, #72]	@ (800d760 <HAL_TIM_MspPostInit+0xc4>)
 800d718:	2104      	movs	r1, #4
 800d71a:	430a      	orrs	r2, r1
 800d71c:	62da      	str	r2, [r3, #44]	@ 0x2c
 800d71e:	4b10      	ldr	r3, [pc, #64]	@ (800d760 <HAL_TIM_MspPostInit+0xc4>)
 800d720:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d722:	2204      	movs	r2, #4
 800d724:	4013      	ands	r3, r2
 800d726:	60fb      	str	r3, [r7, #12]
 800d728:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = MCU_LED_A_R_Pin|MCU_LED_A_G_Pin|MCU_LED_A_B_Pin;
 800d72a:	2114      	movs	r1, #20
 800d72c:	187b      	adds	r3, r7, r1
 800d72e:	22e0      	movs	r2, #224	@ 0xe0
 800d730:	0052      	lsls	r2, r2, #1
 800d732:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d734:	187b      	adds	r3, r7, r1
 800d736:	2202      	movs	r2, #2
 800d738:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d73a:	187b      	adds	r3, r7, r1
 800d73c:	2200      	movs	r2, #0
 800d73e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800d740:	187b      	adds	r3, r7, r1
 800d742:	2200      	movs	r2, #0
 800d744:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800d746:	187b      	adds	r3, r7, r1
 800d748:	2202      	movs	r2, #2
 800d74a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800d74c:	187b      	adds	r3, r7, r1
 800d74e:	4a06      	ldr	r2, [pc, #24]	@ (800d768 <HAL_TIM_MspPostInit+0xcc>)
 800d750:	0019      	movs	r1, r3
 800d752:	0010      	movs	r0, r2
 800d754:	f001 ff7e 	bl	800f654 <HAL_GPIO_Init>
}
 800d758:	46c0      	nop			@ (mov r8, r8)
 800d75a:	46bd      	mov	sp, r7
 800d75c:	b00b      	add	sp, #44	@ 0x2c
 800d75e:	bd90      	pop	{r4, r7, pc}
 800d760:	40021000 	.word	0x40021000
 800d764:	40000400 	.word	0x40000400
 800d768:	50000800 	.word	0x50000800

0800d76c <MX_LPUART1_UART_Init>:
DMA_HandleTypeDef hdma_usart4_tx;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 800d76c:	b580      	push	{r7, lr}
 800d76e:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 800d770:	4b17      	ldr	r3, [pc, #92]	@ (800d7d0 <MX_LPUART1_UART_Init+0x64>)
 800d772:	4a18      	ldr	r2, [pc, #96]	@ (800d7d4 <MX_LPUART1_UART_Init+0x68>)
 800d774:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 800d776:	4b16      	ldr	r3, [pc, #88]	@ (800d7d0 <MX_LPUART1_UART_Init+0x64>)
 800d778:	22e1      	movs	r2, #225	@ 0xe1
 800d77a:	0252      	lsls	r2, r2, #9
 800d77c:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 800d77e:	4b14      	ldr	r3, [pc, #80]	@ (800d7d0 <MX_LPUART1_UART_Init+0x64>)
 800d780:	2200      	movs	r2, #0
 800d782:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 800d784:	4b12      	ldr	r3, [pc, #72]	@ (800d7d0 <MX_LPUART1_UART_Init+0x64>)
 800d786:	2200      	movs	r2, #0
 800d788:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 800d78a:	4b11      	ldr	r3, [pc, #68]	@ (800d7d0 <MX_LPUART1_UART_Init+0x64>)
 800d78c:	2200      	movs	r2, #0
 800d78e:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 800d790:	4b0f      	ldr	r3, [pc, #60]	@ (800d7d0 <MX_LPUART1_UART_Init+0x64>)
 800d792:	220c      	movs	r2, #12
 800d794:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800d796:	4b0e      	ldr	r3, [pc, #56]	@ (800d7d0 <MX_LPUART1_UART_Init+0x64>)
 800d798:	2200      	movs	r2, #0
 800d79a:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800d79c:	4b0c      	ldr	r3, [pc, #48]	@ (800d7d0 <MX_LPUART1_UART_Init+0x64>)
 800d79e:	2200      	movs	r2, #0
 800d7a0:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT|UART_ADVFEATURE_RXOVERRUNDISABLE_INIT;
 800d7a2:	4b0b      	ldr	r3, [pc, #44]	@ (800d7d0 <MX_LPUART1_UART_Init+0x64>)
 800d7a4:	2218      	movs	r2, #24
 800d7a6:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
 800d7a8:	4b09      	ldr	r3, [pc, #36]	@ (800d7d0 <MX_LPUART1_UART_Init+0x64>)
 800d7aa:	2280      	movs	r2, #128	@ 0x80
 800d7ac:	0212      	lsls	r2, r2, #8
 800d7ae:	635a      	str	r2, [r3, #52]	@ 0x34
  hlpuart1.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 800d7b0:	4b07      	ldr	r3, [pc, #28]	@ (800d7d0 <MX_LPUART1_UART_Init+0x64>)
 800d7b2:	2280      	movs	r2, #128	@ 0x80
 800d7b4:	0152      	lsls	r2, r2, #5
 800d7b6:	639a      	str	r2, [r3, #56]	@ 0x38
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 800d7b8:	4b05      	ldr	r3, [pc, #20]	@ (800d7d0 <MX_LPUART1_UART_Init+0x64>)
 800d7ba:	0018      	movs	r0, r3
 800d7bc:	f009 f804 	bl	80167c8 <HAL_UART_Init>
 800d7c0:	1e03      	subs	r3, r0, #0
 800d7c2:	d001      	beq.n	800d7c8 <MX_LPUART1_UART_Init+0x5c>
  {
    Error_Handler();
 800d7c4:	f7fa fc50 	bl	8008068 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 800d7c8:	46c0      	nop			@ (mov r8, r8)
 800d7ca:	46bd      	mov	sp, r7
 800d7cc:	bd80      	pop	{r7, pc}
 800d7ce:	46c0      	nop			@ (mov r8, r8)
 800d7d0:	200022b4 	.word	0x200022b4
 800d7d4:	40004800 	.word	0x40004800

0800d7d8 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800d7d8:	b580      	push	{r7, lr}
 800d7da:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800d7dc:	4b16      	ldr	r3, [pc, #88]	@ (800d838 <MX_USART1_UART_Init+0x60>)
 800d7de:	4a17      	ldr	r2, [pc, #92]	@ (800d83c <MX_USART1_UART_Init+0x64>)
 800d7e0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800d7e2:	4b15      	ldr	r3, [pc, #84]	@ (800d838 <MX_USART1_UART_Init+0x60>)
 800d7e4:	22e1      	movs	r2, #225	@ 0xe1
 800d7e6:	0252      	lsls	r2, r2, #9
 800d7e8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800d7ea:	4b13      	ldr	r3, [pc, #76]	@ (800d838 <MX_USART1_UART_Init+0x60>)
 800d7ec:	2200      	movs	r2, #0
 800d7ee:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800d7f0:	4b11      	ldr	r3, [pc, #68]	@ (800d838 <MX_USART1_UART_Init+0x60>)
 800d7f2:	2200      	movs	r2, #0
 800d7f4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800d7f6:	4b10      	ldr	r3, [pc, #64]	@ (800d838 <MX_USART1_UART_Init+0x60>)
 800d7f8:	2200      	movs	r2, #0
 800d7fa:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800d7fc:	4b0e      	ldr	r3, [pc, #56]	@ (800d838 <MX_USART1_UART_Init+0x60>)
 800d7fe:	220c      	movs	r2, #12
 800d800:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800d802:	4b0d      	ldr	r3, [pc, #52]	@ (800d838 <MX_USART1_UART_Init+0x60>)
 800d804:	2200      	movs	r2, #0
 800d806:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800d808:	4b0b      	ldr	r3, [pc, #44]	@ (800d838 <MX_USART1_UART_Init+0x60>)
 800d80a:	2200      	movs	r2, #0
 800d80c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800d80e:	4b0a      	ldr	r3, [pc, #40]	@ (800d838 <MX_USART1_UART_Init+0x60>)
 800d810:	2200      	movs	r2, #0
 800d812:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
 800d814:	4b08      	ldr	r3, [pc, #32]	@ (800d838 <MX_USART1_UART_Init+0x60>)
 800d816:	2208      	movs	r2, #8
 800d818:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
 800d81a:	4b07      	ldr	r3, [pc, #28]	@ (800d838 <MX_USART1_UART_Init+0x60>)
 800d81c:	2280      	movs	r2, #128	@ 0x80
 800d81e:	0212      	lsls	r2, r2, #8
 800d820:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800d822:	4b05      	ldr	r3, [pc, #20]	@ (800d838 <MX_USART1_UART_Init+0x60>)
 800d824:	0018      	movs	r0, r3
 800d826:	f008 ffcf 	bl	80167c8 <HAL_UART_Init>
 800d82a:	1e03      	subs	r3, r0, #0
 800d82c:	d001      	beq.n	800d832 <MX_USART1_UART_Init+0x5a>
  {
    Error_Handler();
 800d82e:	f7fa fc1b 	bl	8008068 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800d832:	46c0      	nop			@ (mov r8, r8)
 800d834:	46bd      	mov	sp, r7
 800d836:	bd80      	pop	{r7, pc}
 800d838:	2000236c 	.word	0x2000236c
 800d83c:	40013800 	.word	0x40013800

0800d840 <MX_USART4_UART_Init>:
/* USART4 init function */

void MX_USART4_UART_Init(void)
{
 800d840:	b580      	push	{r7, lr}
 800d842:	af00      	add	r7, sp, #0
  /* USER CODE END USART4_Init 0 */

  /* USER CODE BEGIN USART4_Init 1 */

  /* USER CODE END USART4_Init 1 */
  huart4.Instance = USART4;
 800d844:	4b14      	ldr	r3, [pc, #80]	@ (800d898 <MX_USART4_UART_Init+0x58>)
 800d846:	4a15      	ldr	r2, [pc, #84]	@ (800d89c <MX_USART4_UART_Init+0x5c>)
 800d848:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 800d84a:	4b13      	ldr	r3, [pc, #76]	@ (800d898 <MX_USART4_UART_Init+0x58>)
 800d84c:	22e1      	movs	r2, #225	@ 0xe1
 800d84e:	0252      	lsls	r2, r2, #9
 800d850:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800d852:	4b11      	ldr	r3, [pc, #68]	@ (800d898 <MX_USART4_UART_Init+0x58>)
 800d854:	2200      	movs	r2, #0
 800d856:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 800d858:	4b0f      	ldr	r3, [pc, #60]	@ (800d898 <MX_USART4_UART_Init+0x58>)
 800d85a:	2200      	movs	r2, #0
 800d85c:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800d85e:	4b0e      	ldr	r3, [pc, #56]	@ (800d898 <MX_USART4_UART_Init+0x58>)
 800d860:	2200      	movs	r2, #0
 800d862:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 800d864:	4b0c      	ldr	r3, [pc, #48]	@ (800d898 <MX_USART4_UART_Init+0x58>)
 800d866:	220c      	movs	r2, #12
 800d868:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800d86a:	4b0b      	ldr	r3, [pc, #44]	@ (800d898 <MX_USART4_UART_Init+0x58>)
 800d86c:	2200      	movs	r2, #0
 800d86e:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 800d870:	4b09      	ldr	r3, [pc, #36]	@ (800d898 <MX_USART4_UART_Init+0x58>)
 800d872:	2200      	movs	r2, #0
 800d874:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800d876:	4b08      	ldr	r3, [pc, #32]	@ (800d898 <MX_USART4_UART_Init+0x58>)
 800d878:	2200      	movs	r2, #0
 800d87a:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800d87c:	4b06      	ldr	r3, [pc, #24]	@ (800d898 <MX_USART4_UART_Init+0x58>)
 800d87e:	2200      	movs	r2, #0
 800d880:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 800d882:	4b05      	ldr	r3, [pc, #20]	@ (800d898 <MX_USART4_UART_Init+0x58>)
 800d884:	0018      	movs	r0, r3
 800d886:	f008 ff9f 	bl	80167c8 <HAL_UART_Init>
 800d88a:	1e03      	subs	r3, r0, #0
 800d88c:	d001      	beq.n	800d892 <MX_USART4_UART_Init+0x52>
  {
    Error_Handler();
 800d88e:	f7fa fbeb 	bl	8008068 <Error_Handler>
  }
  /* USER CODE BEGIN USART4_Init 2 */

  /* USER CODE END USART4_Init 2 */

}
 800d892:	46c0      	nop			@ (mov r8, r8)
 800d894:	46bd      	mov	sp, r7
 800d896:	bd80      	pop	{r7, pc}
 800d898:	20002424 	.word	0x20002424
 800d89c:	40004c00 	.word	0x40004c00

0800d8a0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800d8a0:	b590      	push	{r4, r7, lr}
 800d8a2:	b08d      	sub	sp, #52	@ 0x34
 800d8a4:	af00      	add	r7, sp, #0
 800d8a6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800d8a8:	241c      	movs	r4, #28
 800d8aa:	193b      	adds	r3, r7, r4
 800d8ac:	0018      	movs	r0, r3
 800d8ae:	2314      	movs	r3, #20
 800d8b0:	001a      	movs	r2, r3
 800d8b2:	2100      	movs	r1, #0
 800d8b4:	f012 f81a 	bl	801f8ec <memset>
  if(uartHandle->Instance==LPUART1)
 800d8b8:	687b      	ldr	r3, [r7, #4]
 800d8ba:	681b      	ldr	r3, [r3, #0]
 800d8bc:	4a8b      	ldr	r2, [pc, #556]	@ (800daec <HAL_UART_MspInit+0x24c>)
 800d8be:	4293      	cmp	r3, r2
 800d8c0:	d129      	bne.n	800d916 <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 800d8c2:	4b8b      	ldr	r3, [pc, #556]	@ (800daf0 <HAL_UART_MspInit+0x250>)
 800d8c4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d8c6:	4b8a      	ldr	r3, [pc, #552]	@ (800daf0 <HAL_UART_MspInit+0x250>)
 800d8c8:	2180      	movs	r1, #128	@ 0x80
 800d8ca:	02c9      	lsls	r1, r1, #11
 800d8cc:	430a      	orrs	r2, r1
 800d8ce:	639a      	str	r2, [r3, #56]	@ 0x38

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800d8d0:	4b87      	ldr	r3, [pc, #540]	@ (800daf0 <HAL_UART_MspInit+0x250>)
 800d8d2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d8d4:	4b86      	ldr	r3, [pc, #536]	@ (800daf0 <HAL_UART_MspInit+0x250>)
 800d8d6:	2104      	movs	r1, #4
 800d8d8:	430a      	orrs	r2, r1
 800d8da:	62da      	str	r2, [r3, #44]	@ 0x2c
 800d8dc:	4b84      	ldr	r3, [pc, #528]	@ (800daf0 <HAL_UART_MspInit+0x250>)
 800d8de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d8e0:	2204      	movs	r2, #4
 800d8e2:	4013      	ands	r3, r2
 800d8e4:	61bb      	str	r3, [r7, #24]
 800d8e6:	69bb      	ldr	r3, [r7, #24]
    /**LPUART1 GPIO Configuration
    PC0     ------> LPUART1_RX
    PC1     ------> LPUART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800d8e8:	0021      	movs	r1, r4
 800d8ea:	187b      	adds	r3, r7, r1
 800d8ec:	2203      	movs	r2, #3
 800d8ee:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d8f0:	187b      	adds	r3, r7, r1
 800d8f2:	2202      	movs	r2, #2
 800d8f4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d8f6:	187b      	adds	r3, r7, r1
 800d8f8:	2200      	movs	r2, #0
 800d8fa:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800d8fc:	187b      	adds	r3, r7, r1
 800d8fe:	2203      	movs	r2, #3
 800d900:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_LPUART1;
 800d902:	187b      	adds	r3, r7, r1
 800d904:	2206      	movs	r2, #6
 800d906:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800d908:	187b      	adds	r3, r7, r1
 800d90a:	4a7a      	ldr	r2, [pc, #488]	@ (800daf4 <HAL_UART_MspInit+0x254>)
 800d90c:	0019      	movs	r1, r3
 800d90e:	0010      	movs	r0, r2
 800d910:	f001 fea0 	bl	800f654 <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(USART4_5_IRQn);
  /* USER CODE BEGIN USART4_MspInit 1 */

  /* USER CODE END USART4_MspInit 1 */
  }
}
 800d914:	e0e5      	b.n	800dae2 <HAL_UART_MspInit+0x242>
  else if(uartHandle->Instance==USART1)
 800d916:	687b      	ldr	r3, [r7, #4]
 800d918:	681b      	ldr	r3, [r3, #0]
 800d91a:	4a77      	ldr	r2, [pc, #476]	@ (800daf8 <HAL_UART_MspInit+0x258>)
 800d91c:	4293      	cmp	r3, r2
 800d91e:	d133      	bne.n	800d988 <HAL_UART_MspInit+0xe8>
    __HAL_RCC_USART1_CLK_ENABLE();
 800d920:	4b73      	ldr	r3, [pc, #460]	@ (800daf0 <HAL_UART_MspInit+0x250>)
 800d922:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800d924:	4b72      	ldr	r3, [pc, #456]	@ (800daf0 <HAL_UART_MspInit+0x250>)
 800d926:	2180      	movs	r1, #128	@ 0x80
 800d928:	01c9      	lsls	r1, r1, #7
 800d92a:	430a      	orrs	r2, r1
 800d92c:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800d92e:	4b70      	ldr	r3, [pc, #448]	@ (800daf0 <HAL_UART_MspInit+0x250>)
 800d930:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d932:	4b6f      	ldr	r3, [pc, #444]	@ (800daf0 <HAL_UART_MspInit+0x250>)
 800d934:	2101      	movs	r1, #1
 800d936:	430a      	orrs	r2, r1
 800d938:	62da      	str	r2, [r3, #44]	@ 0x2c
 800d93a:	4b6d      	ldr	r3, [pc, #436]	@ (800daf0 <HAL_UART_MspInit+0x250>)
 800d93c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d93e:	2201      	movs	r2, #1
 800d940:	4013      	ands	r3, r2
 800d942:	617b      	str	r3, [r7, #20]
 800d944:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800d946:	211c      	movs	r1, #28
 800d948:	187b      	adds	r3, r7, r1
 800d94a:	22c0      	movs	r2, #192	@ 0xc0
 800d94c:	00d2      	lsls	r2, r2, #3
 800d94e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d950:	187b      	adds	r3, r7, r1
 800d952:	2202      	movs	r2, #2
 800d954:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d956:	187b      	adds	r3, r7, r1
 800d958:	2200      	movs	r2, #0
 800d95a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800d95c:	187b      	adds	r3, r7, r1
 800d95e:	2203      	movs	r2, #3
 800d960:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 800d962:	187b      	adds	r3, r7, r1
 800d964:	2204      	movs	r2, #4
 800d966:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800d968:	187a      	adds	r2, r7, r1
 800d96a:	23a0      	movs	r3, #160	@ 0xa0
 800d96c:	05db      	lsls	r3, r3, #23
 800d96e:	0011      	movs	r1, r2
 800d970:	0018      	movs	r0, r3
 800d972:	f001 fe6f 	bl	800f654 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800d976:	2200      	movs	r2, #0
 800d978:	2100      	movs	r1, #0
 800d97a:	201b      	movs	r0, #27
 800d97c:	f001 fa18 	bl	800edb0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800d980:	201b      	movs	r0, #27
 800d982:	f001 fa2a 	bl	800edda <HAL_NVIC_EnableIRQ>
}
 800d986:	e0ac      	b.n	800dae2 <HAL_UART_MspInit+0x242>
  else if(uartHandle->Instance==USART4)
 800d988:	687b      	ldr	r3, [r7, #4]
 800d98a:	681b      	ldr	r3, [r3, #0]
 800d98c:	4a5b      	ldr	r2, [pc, #364]	@ (800dafc <HAL_UART_MspInit+0x25c>)
 800d98e:	4293      	cmp	r3, r2
 800d990:	d000      	beq.n	800d994 <HAL_UART_MspInit+0xf4>
 800d992:	e0a6      	b.n	800dae2 <HAL_UART_MspInit+0x242>
    __HAL_RCC_USART4_CLK_ENABLE();
 800d994:	4b56      	ldr	r3, [pc, #344]	@ (800daf0 <HAL_UART_MspInit+0x250>)
 800d996:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d998:	4b55      	ldr	r3, [pc, #340]	@ (800daf0 <HAL_UART_MspInit+0x250>)
 800d99a:	2180      	movs	r1, #128	@ 0x80
 800d99c:	0309      	lsls	r1, r1, #12
 800d99e:	430a      	orrs	r2, r1
 800d9a0:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800d9a2:	4b53      	ldr	r3, [pc, #332]	@ (800daf0 <HAL_UART_MspInit+0x250>)
 800d9a4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d9a6:	4b52      	ldr	r3, [pc, #328]	@ (800daf0 <HAL_UART_MspInit+0x250>)
 800d9a8:	2101      	movs	r1, #1
 800d9aa:	430a      	orrs	r2, r1
 800d9ac:	62da      	str	r2, [r3, #44]	@ 0x2c
 800d9ae:	4b50      	ldr	r3, [pc, #320]	@ (800daf0 <HAL_UART_MspInit+0x250>)
 800d9b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d9b2:	2201      	movs	r2, #1
 800d9b4:	4013      	ands	r3, r2
 800d9b6:	613b      	str	r3, [r7, #16]
 800d9b8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800d9ba:	4b4d      	ldr	r3, [pc, #308]	@ (800daf0 <HAL_UART_MspInit+0x250>)
 800d9bc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d9be:	4b4c      	ldr	r3, [pc, #304]	@ (800daf0 <HAL_UART_MspInit+0x250>)
 800d9c0:	2104      	movs	r1, #4
 800d9c2:	430a      	orrs	r2, r1
 800d9c4:	62da      	str	r2, [r3, #44]	@ 0x2c
 800d9c6:	4b4a      	ldr	r3, [pc, #296]	@ (800daf0 <HAL_UART_MspInit+0x250>)
 800d9c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d9ca:	2204      	movs	r2, #4
 800d9cc:	4013      	ands	r3, r2
 800d9ce:	60fb      	str	r3, [r7, #12]
 800d9d0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800d9d2:	241c      	movs	r4, #28
 800d9d4:	193b      	adds	r3, r7, r4
 800d9d6:	2202      	movs	r2, #2
 800d9d8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d9da:	193b      	adds	r3, r7, r4
 800d9dc:	2202      	movs	r2, #2
 800d9de:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d9e0:	193b      	adds	r3, r7, r4
 800d9e2:	2200      	movs	r2, #0
 800d9e4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800d9e6:	193b      	adds	r3, r7, r4
 800d9e8:	2203      	movs	r2, #3
 800d9ea:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_USART4;
 800d9ec:	193b      	adds	r3, r7, r4
 800d9ee:	2206      	movs	r2, #6
 800d9f0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800d9f2:	193a      	adds	r2, r7, r4
 800d9f4:	23a0      	movs	r3, #160	@ 0xa0
 800d9f6:	05db      	lsls	r3, r3, #23
 800d9f8:	0011      	movs	r1, r2
 800d9fa:	0018      	movs	r0, r3
 800d9fc:	f001 fe2a 	bl	800f654 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800da00:	0021      	movs	r1, r4
 800da02:	187b      	adds	r3, r7, r1
 800da04:	2280      	movs	r2, #128	@ 0x80
 800da06:	00d2      	lsls	r2, r2, #3
 800da08:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800da0a:	187b      	adds	r3, r7, r1
 800da0c:	2202      	movs	r2, #2
 800da0e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800da10:	187b      	adds	r3, r7, r1
 800da12:	2200      	movs	r2, #0
 800da14:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800da16:	187b      	adds	r3, r7, r1
 800da18:	2203      	movs	r2, #3
 800da1a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_USART4;
 800da1c:	187b      	adds	r3, r7, r1
 800da1e:	2206      	movs	r2, #6
 800da20:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800da22:	187b      	adds	r3, r7, r1
 800da24:	4a33      	ldr	r2, [pc, #204]	@ (800daf4 <HAL_UART_MspInit+0x254>)
 800da26:	0019      	movs	r1, r3
 800da28:	0010      	movs	r0, r2
 800da2a:	f001 fe13 	bl	800f654 <HAL_GPIO_Init>
    hdma_usart4_rx.Instance = DMA1_Channel6;
 800da2e:	4b34      	ldr	r3, [pc, #208]	@ (800db00 <HAL_UART_MspInit+0x260>)
 800da30:	4a34      	ldr	r2, [pc, #208]	@ (800db04 <HAL_UART_MspInit+0x264>)
 800da32:	601a      	str	r2, [r3, #0]
    hdma_usart4_rx.Init.Request = DMA_REQUEST_12;
 800da34:	4b32      	ldr	r3, [pc, #200]	@ (800db00 <HAL_UART_MspInit+0x260>)
 800da36:	220c      	movs	r2, #12
 800da38:	605a      	str	r2, [r3, #4]
    hdma_usart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800da3a:	4b31      	ldr	r3, [pc, #196]	@ (800db00 <HAL_UART_MspInit+0x260>)
 800da3c:	2200      	movs	r2, #0
 800da3e:	609a      	str	r2, [r3, #8]
    hdma_usart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800da40:	4b2f      	ldr	r3, [pc, #188]	@ (800db00 <HAL_UART_MspInit+0x260>)
 800da42:	2200      	movs	r2, #0
 800da44:	60da      	str	r2, [r3, #12]
    hdma_usart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 800da46:	4b2e      	ldr	r3, [pc, #184]	@ (800db00 <HAL_UART_MspInit+0x260>)
 800da48:	2280      	movs	r2, #128	@ 0x80
 800da4a:	611a      	str	r2, [r3, #16]
    hdma_usart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800da4c:	4b2c      	ldr	r3, [pc, #176]	@ (800db00 <HAL_UART_MspInit+0x260>)
 800da4e:	2200      	movs	r2, #0
 800da50:	615a      	str	r2, [r3, #20]
    hdma_usart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800da52:	4b2b      	ldr	r3, [pc, #172]	@ (800db00 <HAL_UART_MspInit+0x260>)
 800da54:	2200      	movs	r2, #0
 800da56:	619a      	str	r2, [r3, #24]
    hdma_usart4_rx.Init.Mode = DMA_CIRCULAR;
 800da58:	4b29      	ldr	r3, [pc, #164]	@ (800db00 <HAL_UART_MspInit+0x260>)
 800da5a:	2220      	movs	r2, #32
 800da5c:	61da      	str	r2, [r3, #28]
    hdma_usart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 800da5e:	4b28      	ldr	r3, [pc, #160]	@ (800db00 <HAL_UART_MspInit+0x260>)
 800da60:	2200      	movs	r2, #0
 800da62:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart4_rx) != HAL_OK)
 800da64:	4b26      	ldr	r3, [pc, #152]	@ (800db00 <HAL_UART_MspInit+0x260>)
 800da66:	0018      	movs	r0, r3
 800da68:	f001 f9d8 	bl	800ee1c <HAL_DMA_Init>
 800da6c:	1e03      	subs	r3, r0, #0
 800da6e:	d001      	beq.n	800da74 <HAL_UART_MspInit+0x1d4>
      Error_Handler();
 800da70:	f7fa fafa 	bl	8008068 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart4_rx);
 800da74:	687b      	ldr	r3, [r7, #4]
 800da76:	4a22      	ldr	r2, [pc, #136]	@ (800db00 <HAL_UART_MspInit+0x260>)
 800da78:	675a      	str	r2, [r3, #116]	@ 0x74
 800da7a:	4b21      	ldr	r3, [pc, #132]	@ (800db00 <HAL_UART_MspInit+0x260>)
 800da7c:	687a      	ldr	r2, [r7, #4]
 800da7e:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_usart4_tx.Instance = DMA1_Channel7;
 800da80:	4b21      	ldr	r3, [pc, #132]	@ (800db08 <HAL_UART_MspInit+0x268>)
 800da82:	4a22      	ldr	r2, [pc, #136]	@ (800db0c <HAL_UART_MspInit+0x26c>)
 800da84:	601a      	str	r2, [r3, #0]
    hdma_usart4_tx.Init.Request = DMA_REQUEST_12;
 800da86:	4b20      	ldr	r3, [pc, #128]	@ (800db08 <HAL_UART_MspInit+0x268>)
 800da88:	220c      	movs	r2, #12
 800da8a:	605a      	str	r2, [r3, #4]
    hdma_usart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800da8c:	4b1e      	ldr	r3, [pc, #120]	@ (800db08 <HAL_UART_MspInit+0x268>)
 800da8e:	2210      	movs	r2, #16
 800da90:	609a      	str	r2, [r3, #8]
    hdma_usart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800da92:	4b1d      	ldr	r3, [pc, #116]	@ (800db08 <HAL_UART_MspInit+0x268>)
 800da94:	2200      	movs	r2, #0
 800da96:	60da      	str	r2, [r3, #12]
    hdma_usart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 800da98:	4b1b      	ldr	r3, [pc, #108]	@ (800db08 <HAL_UART_MspInit+0x268>)
 800da9a:	2280      	movs	r2, #128	@ 0x80
 800da9c:	611a      	str	r2, [r3, #16]
    hdma_usart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800da9e:	4b1a      	ldr	r3, [pc, #104]	@ (800db08 <HAL_UART_MspInit+0x268>)
 800daa0:	2200      	movs	r2, #0
 800daa2:	615a      	str	r2, [r3, #20]
    hdma_usart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800daa4:	4b18      	ldr	r3, [pc, #96]	@ (800db08 <HAL_UART_MspInit+0x268>)
 800daa6:	2200      	movs	r2, #0
 800daa8:	619a      	str	r2, [r3, #24]
    hdma_usart4_tx.Init.Mode = DMA_NORMAL;
 800daaa:	4b17      	ldr	r3, [pc, #92]	@ (800db08 <HAL_UART_MspInit+0x268>)
 800daac:	2200      	movs	r2, #0
 800daae:	61da      	str	r2, [r3, #28]
    hdma_usart4_tx.Init.Priority = DMA_PRIORITY_LOW;
 800dab0:	4b15      	ldr	r3, [pc, #84]	@ (800db08 <HAL_UART_MspInit+0x268>)
 800dab2:	2200      	movs	r2, #0
 800dab4:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart4_tx) != HAL_OK)
 800dab6:	4b14      	ldr	r3, [pc, #80]	@ (800db08 <HAL_UART_MspInit+0x268>)
 800dab8:	0018      	movs	r0, r3
 800daba:	f001 f9af 	bl	800ee1c <HAL_DMA_Init>
 800dabe:	1e03      	subs	r3, r0, #0
 800dac0:	d001      	beq.n	800dac6 <HAL_UART_MspInit+0x226>
      Error_Handler();
 800dac2:	f7fa fad1 	bl	8008068 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart4_tx);
 800dac6:	687b      	ldr	r3, [r7, #4]
 800dac8:	4a0f      	ldr	r2, [pc, #60]	@ (800db08 <HAL_UART_MspInit+0x268>)
 800daca:	671a      	str	r2, [r3, #112]	@ 0x70
 800dacc:	4b0e      	ldr	r3, [pc, #56]	@ (800db08 <HAL_UART_MspInit+0x268>)
 800dace:	687a      	ldr	r2, [r7, #4]
 800dad0:	629a      	str	r2, [r3, #40]	@ 0x28
    HAL_NVIC_SetPriority(USART4_5_IRQn, 0, 0);
 800dad2:	2200      	movs	r2, #0
 800dad4:	2100      	movs	r1, #0
 800dad6:	200e      	movs	r0, #14
 800dad8:	f001 f96a 	bl	800edb0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART4_5_IRQn);
 800dadc:	200e      	movs	r0, #14
 800dade:	f001 f97c 	bl	800edda <HAL_NVIC_EnableIRQ>
}
 800dae2:	46c0      	nop			@ (mov r8, r8)
 800dae4:	46bd      	mov	sp, r7
 800dae6:	b00d      	add	sp, #52	@ 0x34
 800dae8:	bd90      	pop	{r4, r7, pc}
 800daea:	46c0      	nop			@ (mov r8, r8)
 800daec:	40004800 	.word	0x40004800
 800daf0:	40021000 	.word	0x40021000
 800daf4:	50000800 	.word	0x50000800
 800daf8:	40013800 	.word	0x40013800
 800dafc:	40004c00 	.word	0x40004c00
 800db00:	200024dc 	.word	0x200024dc
 800db04:	4002006c 	.word	0x4002006c
 800db08:	20002524 	.word	0x20002524
 800db0c:	40020080 	.word	0x40020080

0800db10 <TimestampIsReached>:
VerboseLevel CurrentVerboseLevel = VERBOSE_ALL;
#define TEXTBUFFER_LEN 128

extern UART_HandleTypeDef huart1;

bool TimestampIsReached(uint32_t timestamp) {
 800db10:	b580      	push	{r7, lr}
 800db12:	b086      	sub	sp, #24
 800db14:	af00      	add	r7, sp, #0
 800db16:	6078      	str	r0, [r7, #4]
  uint32_t now = HAL_GetTick();
 800db18:	f000 fca6 	bl	800e468 <HAL_GetTick>
 800db1c:	0003      	movs	r3, r0
 800db1e:	617b      	str	r3, [r7, #20]
  const uint32_t HALF_TIME = 0x7FFFFFFF; // ~25 days max timestamp delay
 800db20:	4b1c      	ldr	r3, [pc, #112]	@ (800db94 <TimestampIsReached+0x84>)
 800db22:	613b      	str	r3, [r7, #16]

  // Ensures that the difference between now and timestamp is less than half of
  // the maximum value of the counter. This confirms that the timestamp is not
  // too far in the past.
  bool noOverflow = (now >= timestamp && now - timestamp < HALF_TIME);
 800db24:	697a      	ldr	r2, [r7, #20]
 800db26:	687b      	ldr	r3, [r7, #4]
 800db28:	429a      	cmp	r2, r3
 800db2a:	d307      	bcc.n	800db3c <TimestampIsReached+0x2c>
 800db2c:	697a      	ldr	r2, [r7, #20]
 800db2e:	687b      	ldr	r3, [r7, #4]
 800db30:	1ad3      	subs	r3, r2, r3
 800db32:	693a      	ldr	r2, [r7, #16]
 800db34:	429a      	cmp	r2, r3
 800db36:	d901      	bls.n	800db3c <TimestampIsReached+0x2c>
 800db38:	2201      	movs	r2, #1
 800db3a:	e000      	b.n	800db3e <TimestampIsReached+0x2e>
 800db3c:	2200      	movs	r2, #0
 800db3e:	230f      	movs	r3, #15
 800db40:	18fb      	adds	r3, r7, r3
 800db42:	701a      	strb	r2, [r3, #0]
 800db44:	781a      	ldrb	r2, [r3, #0]
 800db46:	2101      	movs	r1, #1
 800db48:	400a      	ands	r2, r1
 800db4a:	701a      	strb	r2, [r3, #0]
  // Ensures that the timestamp is so far ahead that it would have wrapped
  // around past the maximum value of the counter indicating an overflow
  // scenario.
  bool overflowWithTimestampAhead =
      (now < timestamp && timestamp - now > HALF_TIME);
 800db4c:	697a      	ldr	r2, [r7, #20]
 800db4e:	687b      	ldr	r3, [r7, #4]
 800db50:	429a      	cmp	r2, r3
 800db52:	d207      	bcs.n	800db64 <TimestampIsReached+0x54>
 800db54:	687a      	ldr	r2, [r7, #4]
 800db56:	697b      	ldr	r3, [r7, #20]
 800db58:	1ad3      	subs	r3, r2, r3
 800db5a:	693a      	ldr	r2, [r7, #16]
 800db5c:	429a      	cmp	r2, r3
 800db5e:	d201      	bcs.n	800db64 <TimestampIsReached+0x54>
 800db60:	2201      	movs	r2, #1
 800db62:	e000      	b.n	800db66 <TimestampIsReached+0x56>
 800db64:	2200      	movs	r2, #0
  bool overflowWithTimestampAhead =
 800db66:	200e      	movs	r0, #14
 800db68:	183b      	adds	r3, r7, r0
 800db6a:	701a      	strb	r2, [r3, #0]
 800db6c:	781a      	ldrb	r2, [r3, #0]
 800db6e:	2101      	movs	r1, #1
 800db70:	400a      	ands	r2, r1
 800db72:	701a      	strb	r2, [r3, #0]

  if (noOverflow || overflowWithTimestampAhead) {
 800db74:	230f      	movs	r3, #15
 800db76:	18fb      	adds	r3, r7, r3
 800db78:	781b      	ldrb	r3, [r3, #0]
 800db7a:	2b00      	cmp	r3, #0
 800db7c:	d103      	bne.n	800db86 <TimestampIsReached+0x76>
 800db7e:	183b      	adds	r3, r7, r0
 800db80:	781b      	ldrb	r3, [r3, #0]
 800db82:	2b00      	cmp	r3, #0
 800db84:	d001      	beq.n	800db8a <TimestampIsReached+0x7a>
    // Timestamp has been reached
    return true;
 800db86:	2301      	movs	r3, #1
 800db88:	e000      	b.n	800db8c <TimestampIsReached+0x7c>
  }

  // Timestamp not yet reached
  return false;
 800db8a:	2300      	movs	r3, #0
}
 800db8c:	0018      	movs	r0, r3
 800db8e:	46bd      	mov	sp, r7
 800db90:	b006      	add	sp, #24
 800db92:	bd80      	pop	{r7, pc}
 800db94:	7fffffff 	.word	0x7fffffff

0800db98 <AddTimestamp>:

static void AddTimestamp(char *stamp) {
 800db98:	b580      	push	{r7, lr}
 800db9a:	b082      	sub	sp, #8
 800db9c:	af00      	add	r7, sp, #0
 800db9e:	6078      	str	r0, [r7, #4]
  sprintf(stamp, "[%08lu] ", (uint32_t)HAL_GetTick());
 800dba0:	f000 fc62 	bl	800e468 <HAL_GetTick>
 800dba4:	0002      	movs	r2, r0
 800dba6:	4904      	ldr	r1, [pc, #16]	@ (800dbb8 <AddTimestamp+0x20>)
 800dba8:	687b      	ldr	r3, [r7, #4]
 800dbaa:	0018      	movs	r0, r3
 800dbac:	f011 fd5a 	bl	801f664 <siprintf>
}
 800dbb0:	46c0      	nop			@ (mov r8, r8)
 800dbb2:	46bd      	mov	sp, r7
 800dbb4:	b002      	add	sp, #8
 800dbb6:	bd80      	pop	{r7, pc}
 800dbb8:	080243a0 	.word	0x080243a0

0800dbbc <CreateLine>:

void CreateLine(VerboseLevel verboseLevel, char *tag, char *format, ...) {
 800dbbc:	b40c      	push	{r2, r3}
 800dbbe:	b5b0      	push	{r4, r5, r7, lr}
 800dbc0:	b0a4      	sub	sp, #144	@ 0x90
 800dbc2:	af00      	add	r7, sp, #0
 800dbc4:	0002      	movs	r2, r0
 800dbc6:	6039      	str	r1, [r7, #0]
 800dbc8:	1dfb      	adds	r3, r7, #7
 800dbca:	701a      	strb	r2, [r3, #0]

  if (verboseLevel > CurrentVerboseLevel) {
 800dbcc:	4b23      	ldr	r3, [pc, #140]	@ (800dc5c <CreateLine+0xa0>)
 800dbce:	781b      	ldrb	r3, [r3, #0]
 800dbd0:	1dfa      	adds	r2, r7, #7
 800dbd2:	7812      	ldrb	r2, [r2, #0]
 800dbd4:	429a      	cmp	r2, r3
 800dbd6:	d839      	bhi.n	800dc4c <CreateLine+0x90>
    return;
  }
  char textBuffer[TEXTBUFFER_LEN];

  // Format the initial part of the message with the tag and timestamp
  sprintf(textBuffer, "%s ", tag);
 800dbd8:	683a      	ldr	r2, [r7, #0]
 800dbda:	4921      	ldr	r1, [pc, #132]	@ (800dc60 <CreateLine+0xa4>)
 800dbdc:	240c      	movs	r4, #12
 800dbde:	193b      	adds	r3, r7, r4
 800dbe0:	0018      	movs	r0, r3
 800dbe2:	f011 fd3f 	bl	801f664 <siprintf>

  if (CurrentVerboseLevel > VERBOSE_MINIMAL) {
 800dbe6:	4b1d      	ldr	r3, [pc, #116]	@ (800dc5c <CreateLine+0xa0>)
 800dbe8:	781b      	ldrb	r3, [r3, #0]
 800dbea:	2b01      	cmp	r3, #1
 800dbec:	d909      	bls.n	800dc02 <CreateLine+0x46>
    AddTimestamp(&textBuffer[strlen(textBuffer)]);
 800dbee:	193b      	adds	r3, r7, r4
 800dbf0:	0018      	movs	r0, r3
 800dbf2:	f7f2 fabb 	bl	800016c <strlen>
 800dbf6:	0002      	movs	r2, r0
 800dbf8:	193b      	adds	r3, r7, r4
 800dbfa:	189b      	adds	r3, r3, r2
 800dbfc:	0018      	movs	r0, r3
 800dbfe:	f7ff ffcb 	bl	800db98 <AddTimestamp>
  }
  int lineOffset = strlen(textBuffer);
 800dc02:	240c      	movs	r4, #12
 800dc04:	193b      	adds	r3, r7, r4
 800dc06:	0018      	movs	r0, r3
 800dc08:	f7f2 fab0 	bl	800016c <strlen>
 800dc0c:	0003      	movs	r3, r0
 800dc0e:	218c      	movs	r1, #140	@ 0x8c
 800dc10:	187a      	adds	r2, r7, r1
 800dc12:	6013      	str	r3, [r2, #0]

  // Format the rest of the message with the variable arguments
  va_list args;
  va_start(args, format);
 800dc14:	239c      	movs	r3, #156	@ 0x9c
 800dc16:	2508      	movs	r5, #8
 800dc18:	195b      	adds	r3, r3, r5
 800dc1a:	19db      	adds	r3, r3, r7
 800dc1c:	60bb      	str	r3, [r7, #8]
  vsnprintf(&textBuffer[lineOffset], TEXTBUFFER_LEN - lineOffset, format, args);
 800dc1e:	193a      	adds	r2, r7, r4
 800dc20:	187b      	adds	r3, r7, r1
 800dc22:	681b      	ldr	r3, [r3, #0]
 800dc24:	18d0      	adds	r0, r2, r3
 800dc26:	187b      	adds	r3, r7, r1
 800dc28:	681b      	ldr	r3, [r3, #0]
 800dc2a:	2280      	movs	r2, #128	@ 0x80
 800dc2c:	1ad3      	subs	r3, r2, r3
 800dc2e:	0019      	movs	r1, r3
 800dc30:	68bb      	ldr	r3, [r7, #8]
 800dc32:	2298      	movs	r2, #152	@ 0x98
 800dc34:	1952      	adds	r2, r2, r5
 800dc36:	19d2      	adds	r2, r2, r7
 800dc38:	6812      	ldr	r2, [r2, #0]
 800dc3a:	f011 fdab 	bl	801f794 <vsniprintf>
  va_end(args);

  // Print the final formatted message
  printf("%s\r\n", textBuffer);
 800dc3e:	193a      	adds	r2, r7, r4
 800dc40:	4b08      	ldr	r3, [pc, #32]	@ (800dc64 <CreateLine+0xa8>)
 800dc42:	0011      	movs	r1, r2
 800dc44:	0018      	movs	r0, r3
 800dc46:	f011 fc9d 	bl	801f584 <iprintf>
 800dc4a:	e000      	b.n	800dc4e <CreateLine+0x92>
    return;
 800dc4c:	46c0      	nop			@ (mov r8, r8)
}
 800dc4e:	46bd      	mov	sp, r7
 800dc50:	b024      	add	sp, #144	@ 0x90
 800dc52:	bcb0      	pop	{r4, r5, r7}
 800dc54:	bc08      	pop	{r3}
 800dc56:	b002      	add	sp, #8
 800dc58:	4718      	bx	r3
 800dc5a:	46c0      	nop			@ (mov r8, r8)
 800dc5c:	200000d0 	.word	0x200000d0
 800dc60:	080243ac 	.word	0x080243ac
 800dc64:	080243b0 	.word	0x080243b0

0800dc68 <_write>:

int _write(int fd, const void *buf, size_t count) {
 800dc68:	b580      	push	{r7, lr}
 800dc6a:	b084      	sub	sp, #16
 800dc6c:	af00      	add	r7, sp, #0
 800dc6e:	60f8      	str	r0, [r7, #12]
 800dc70:	60b9      	str	r1, [r7, #8]
 800dc72:	607a      	str	r2, [r7, #4]
  HAL_UART_Transmit(&huart1, buf, count, 100);
 800dc74:	687b      	ldr	r3, [r7, #4]
 800dc76:	b29a      	uxth	r2, r3
 800dc78:	68b9      	ldr	r1, [r7, #8]
 800dc7a:	4804      	ldr	r0, [pc, #16]	@ (800dc8c <_write+0x24>)
 800dc7c:	2364      	movs	r3, #100	@ 0x64
 800dc7e:	f008 fe09 	bl	8016894 <HAL_UART_Transmit>
  return count;
 800dc82:	687b      	ldr	r3, [r7, #4]
}
 800dc84:	0018      	movs	r0, r3
 800dc86:	46bd      	mov	sp, r7
 800dc88:	b004      	add	sp, #16
 800dc8a:	bd80      	pop	{r7, pc}
 800dc8c:	2000236c 	.word	0x2000236c

0800dc90 <SetVerboseLevel>:

void SetVerboseLevel(VerboseLevel level) {
 800dc90:	b580      	push	{r7, lr}
 800dc92:	b082      	sub	sp, #8
 800dc94:	af00      	add	r7, sp, #0
 800dc96:	0002      	movs	r2, r0
 800dc98:	1dfb      	adds	r3, r7, #7
 800dc9a:	701a      	strb	r2, [r3, #0]
  CurrentVerboseLevel = level;
 800dc9c:	4b03      	ldr	r3, [pc, #12]	@ (800dcac <SetVerboseLevel+0x1c>)
 800dc9e:	1dfa      	adds	r2, r7, #7
 800dca0:	7812      	ldrb	r2, [r2, #0]
 800dca2:	701a      	strb	r2, [r3, #0]
}
 800dca4:	46c0      	nop			@ (mov r8, r8)
 800dca6:	46bd      	mov	sp, r7
 800dca8:	b002      	add	sp, #8
 800dcaa:	bd80      	pop	{r7, pc}
 800dcac:	200000d0 	.word	0x200000d0

0800dcb0 <GetVerboseLevel>:

uint8_t GetVerboseLevel() {
 800dcb0:	b580      	push	{r7, lr}
 800dcb2:	af00      	add	r7, sp, #0
  return CurrentVerboseLevel; }
 800dcb4:	4b02      	ldr	r3, [pc, #8]	@ (800dcc0 <GetVerboseLevel+0x10>)
 800dcb6:	781b      	ldrb	r3, [r3, #0]
 800dcb8:	0018      	movs	r0, r3
 800dcba:	46bd      	mov	sp, r7
 800dcbc:	bd80      	pop	{r7, pc}
 800dcbe:	46c0      	nop			@ (mov r8, r8)
 800dcc0:	200000d0 	.word	0x200000d0

0800dcc4 <BinaryReleaseInfo>:


void BinaryReleaseInfo() {
 800dcc4:	b580      	push	{r7, lr}
 800dcc6:	b082      	sub	sp, #8
 800dcc8:	af02      	add	r7, sp, #8
  Info("=-=-=-=-=-=WOTS Gadget started.=-=-=-=-=-=");
 800dcca:	4a0f      	ldr	r2, [pc, #60]	@ (800dd08 <BinaryReleaseInfo+0x44>)
 800dccc:	4b0f      	ldr	r3, [pc, #60]	@ (800dd0c <BinaryReleaseInfo+0x48>)
 800dcce:	0019      	movs	r1, r3
 800dcd0:	2002      	movs	r0, #2
 800dcd2:	f7ff ff73 	bl	800dbbc <CreateLine>
  Info("Build on: %s at %s", __DATE__, __TIME__);
 800dcd6:	480e      	ldr	r0, [pc, #56]	@ (800dd10 <BinaryReleaseInfo+0x4c>)
 800dcd8:	4a0e      	ldr	r2, [pc, #56]	@ (800dd14 <BinaryReleaseInfo+0x50>)
 800dcda:	490c      	ldr	r1, [pc, #48]	@ (800dd0c <BinaryReleaseInfo+0x48>)
 800dcdc:	4b0e      	ldr	r3, [pc, #56]	@ (800dd18 <BinaryReleaseInfo+0x54>)
 800dcde:	9300      	str	r3, [sp, #0]
 800dce0:	0003      	movs	r3, r0
 800dce2:	2002      	movs	r0, #2
 800dce4:	f7ff ff6a 	bl	800dbbc <CreateLine>
  // Format: YY'w'WWv
  Info("Git: %s", CURRENT_WEEK);
 800dce8:	4b0c      	ldr	r3, [pc, #48]	@ (800dd1c <BinaryReleaseInfo+0x58>)
 800dcea:	4a0d      	ldr	r2, [pc, #52]	@ (800dd20 <BinaryReleaseInfo+0x5c>)
 800dcec:	4907      	ldr	r1, [pc, #28]	@ (800dd0c <BinaryReleaseInfo+0x48>)
 800dcee:	2002      	movs	r0, #2
 800dcf0:	f7ff ff64 	bl	800dbbc <CreateLine>
  Info("Software version: %s", SRC_VERSION);
 800dcf4:	4b0b      	ldr	r3, [pc, #44]	@ (800dd24 <BinaryReleaseInfo+0x60>)
 800dcf6:	4a0c      	ldr	r2, [pc, #48]	@ (800dd28 <BinaryReleaseInfo+0x64>)
 800dcf8:	4904      	ldr	r1, [pc, #16]	@ (800dd0c <BinaryReleaseInfo+0x48>)
 800dcfa:	2002      	movs	r0, #2
 800dcfc:	f7ff ff5e 	bl	800dbbc <CreateLine>
}
 800dd00:	46c0      	nop			@ (mov r8, r8)
 800dd02:	46bd      	mov	sp, r7
 800dd04:	bd80      	pop	{r7, pc}
 800dd06:	46c0      	nop			@ (mov r8, r8)
 800dd08:	080243b8 	.word	0x080243b8
 800dd0c:	080243e4 	.word	0x080243e4
 800dd10:	080243e8 	.word	0x080243e8
 800dd14:	080243f4 	.word	0x080243f4
 800dd18:	08024408 	.word	0x08024408
 800dd1c:	08024414 	.word	0x08024414
 800dd20:	08024420 	.word	0x08024420
 800dd24:	08024428 	.word	0x08024428
 800dd28:	08024430 	.word	0x08024430

0800dd2c <errorHandler>:

// Call this as: errorHandler(__func__, __LINE__, __FILE__);
void errorHandler(const char * func, const uint32_t line, const char * file)
{
 800dd2c:	b580      	push	{r7, lr}
 800dd2e:	b084      	sub	sp, #16
 800dd30:	af00      	add	r7, sp, #0
 800dd32:	60f8      	str	r0, [r7, #12]
 800dd34:	60b9      	str	r1, [r7, #8]
 800dd36:	607a      	str	r2, [r7, #4]
    printf("Error in %s at line %lu in file: %s\r\n", func, line, file);
 800dd38:	687b      	ldr	r3, [r7, #4]
 800dd3a:	68ba      	ldr	r2, [r7, #8]
 800dd3c:	68f9      	ldr	r1, [r7, #12]
 800dd3e:	4803      	ldr	r0, [pc, #12]	@ (800dd4c <errorHandler+0x20>)
 800dd40:	f011 fc20 	bl	801f584 <iprintf>
//    while (true)
//    {
//    }
}
 800dd44:	46c0      	nop			@ (mov r8, r8)
 800dd46:	46bd      	mov	sp, r7
 800dd48:	b004      	add	sp, #16
 800dd4a:	bd80      	pop	{r7, pc}
 800dd4c:	08024448 	.word	0x08024448

0800dd50 <ReadRegister>:

static uint32_t HIDSTimeStamp;
//static uint32_t SensorNextRunTime = HIDS_SENSOR_WAIT_TIME_HIGH;
//static uint32_t SensorWaitTime_ms = HIDS_SENSOR_WAIT_TIME_HIGH;

static bool ReadRegister(uint8_t address, uint8_t* buffer, uint8_t nrBytes) {
 800dd50:	b590      	push	{r4, r7, lr}
 800dd52:	b083      	sub	sp, #12
 800dd54:	af00      	add	r7, sp, #0
 800dd56:	6039      	str	r1, [r7, #0]
 800dd58:	0011      	movs	r1, r2
 800dd5a:	1dfb      	adds	r3, r7, #7
 800dd5c:	1c02      	adds	r2, r0, #0
 800dd5e:	701a      	strb	r2, [r3, #0]
 800dd60:	1dbb      	adds	r3, r7, #6
 800dd62:	1c0a      	adds	r2, r1, #0
 800dd64:	701a      	strb	r2, [r3, #0]
	if (ReadFunction != NULL) {
 800dd66:	4b0a      	ldr	r3, [pc, #40]	@ (800dd90 <ReadRegister+0x40>)
 800dd68:	681b      	ldr	r3, [r3, #0]
 800dd6a:	2b00      	cmp	r3, #0
 800dd6c:	d00a      	beq.n	800dd84 <ReadRegister+0x34>
		return ReadFunction(address, buffer, nrBytes);
 800dd6e:	4b08      	ldr	r3, [pc, #32]	@ (800dd90 <ReadRegister+0x40>)
 800dd70:	681b      	ldr	r3, [r3, #0]
 800dd72:	1dba      	adds	r2, r7, #6
 800dd74:	7814      	ldrb	r4, [r2, #0]
 800dd76:	6839      	ldr	r1, [r7, #0]
 800dd78:	1dfa      	adds	r2, r7, #7
 800dd7a:	7810      	ldrb	r0, [r2, #0]
 800dd7c:	0022      	movs	r2, r4
 800dd7e:	4798      	blx	r3
 800dd80:	0003      	movs	r3, r0
 800dd82:	e000      	b.n	800dd86 <ReadRegister+0x36>
	}
	return false;
 800dd84:	2300      	movs	r3, #0
}
 800dd86:	0018      	movs	r0, r3
 800dd88:	46bd      	mov	sp, r7
 800dd8a:	b003      	add	sp, #12
 800dd8c:	bd90      	pop	{r4, r7, pc}
 800dd8e:	46c0      	nop			@ (mov r8, r8)
 800dd90:	20002574 	.word	0x20002574

0800dd94 <WriteRegister>:

static bool WriteRegister(uint8_t address, uint8_t* buffer, uint8_t nrBytes) {
 800dd94:	b590      	push	{r4, r7, lr}
 800dd96:	b083      	sub	sp, #12
 800dd98:	af00      	add	r7, sp, #0
 800dd9a:	6039      	str	r1, [r7, #0]
 800dd9c:	0011      	movs	r1, r2
 800dd9e:	1dfb      	adds	r3, r7, #7
 800dda0:	1c02      	adds	r2, r0, #0
 800dda2:	701a      	strb	r2, [r3, #0]
 800dda4:	1dbb      	adds	r3, r7, #6
 800dda6:	1c0a      	adds	r2, r1, #0
 800dda8:	701a      	strb	r2, [r3, #0]
  if (WriteFunction != NULL) {
 800ddaa:	4b0a      	ldr	r3, [pc, #40]	@ (800ddd4 <WriteRegister+0x40>)
 800ddac:	681b      	ldr	r3, [r3, #0]
 800ddae:	2b00      	cmp	r3, #0
 800ddb0:	d00a      	beq.n	800ddc8 <WriteRegister+0x34>
    return WriteFunction(address, buffer, nrBytes);
 800ddb2:	4b08      	ldr	r3, [pc, #32]	@ (800ddd4 <WriteRegister+0x40>)
 800ddb4:	681b      	ldr	r3, [r3, #0]
 800ddb6:	1dba      	adds	r2, r7, #6
 800ddb8:	7814      	ldrb	r4, [r2, #0]
 800ddba:	6839      	ldr	r1, [r7, #0]
 800ddbc:	1dfa      	adds	r2, r7, #7
 800ddbe:	7810      	ldrb	r0, [r2, #0]
 800ddc0:	0022      	movs	r2, r4
 800ddc2:	4798      	blx	r3
 800ddc4:	0003      	movs	r3, r0
 800ddc6:	e000      	b.n	800ddca <WriteRegister+0x36>
  }
  return false;
 800ddc8:	2300      	movs	r3, #0
}
 800ddca:	0018      	movs	r0, r3
 800ddcc:	46bd      	mov	sp, r7
 800ddce:	b003      	add	sp, #12
 800ddd0:	bd90      	pop	{r4, r7, pc}
 800ddd2:	46c0      	nop			@ (mov r8, r8)
 800ddd4:	20002578 	.word	0x20002578

0800ddd8 <CalculateCRC>:

static uint8_t CalculateCRC(uint8_t* data, uint8_t length) {
 800ddd8:	b580      	push	{r7, lr}
 800ddda:	b084      	sub	sp, #16
 800dddc:	af00      	add	r7, sp, #0
 800ddde:	6078      	str	r0, [r7, #4]
 800dde0:	000a      	movs	r2, r1
 800dde2:	1cfb      	adds	r3, r7, #3
 800dde4:	701a      	strb	r2, [r3, #0]
  uint8_t crc = HIDS_CRC_INIT_VALUE;
 800dde6:	230f      	movs	r3, #15
 800dde8:	18fb      	adds	r3, r7, r3
 800ddea:	22ff      	movs	r2, #255	@ 0xff
 800ddec:	701a      	strb	r2, [r3, #0]

  for (uint8_t i = 0; i < length; i++) {
 800ddee:	230e      	movs	r3, #14
 800ddf0:	18fb      	adds	r3, r7, r3
 800ddf2:	2200      	movs	r2, #0
 800ddf4:	701a      	strb	r2, [r3, #0]
 800ddf6:	e037      	b.n	800de68 <CalculateCRC+0x90>
    // XOR byte into least significant byte of crc
    crc ^= data[i];
 800ddf8:	230e      	movs	r3, #14
 800ddfa:	18fb      	adds	r3, r7, r3
 800ddfc:	781b      	ldrb	r3, [r3, #0]
 800ddfe:	687a      	ldr	r2, [r7, #4]
 800de00:	18d3      	adds	r3, r2, r3
 800de02:	7819      	ldrb	r1, [r3, #0]
 800de04:	220f      	movs	r2, #15
 800de06:	18bb      	adds	r3, r7, r2
 800de08:	18ba      	adds	r2, r7, r2
 800de0a:	7812      	ldrb	r2, [r2, #0]
 800de0c:	404a      	eors	r2, r1
 800de0e:	701a      	strb	r2, [r3, #0]

    for (uint8_t j = 0; j < 8; j++) {
 800de10:	230d      	movs	r3, #13
 800de12:	18fb      	adds	r3, r7, r3
 800de14:	2200      	movs	r2, #0
 800de16:	701a      	strb	r2, [r3, #0]
 800de18:	e01b      	b.n	800de52 <CalculateCRC+0x7a>
      // If the leftmost (most significant) bit is set
      if (crc & HIDS_CRC_MSB_MASK) {
 800de1a:	210f      	movs	r1, #15
 800de1c:	187b      	adds	r3, r7, r1
 800de1e:	781b      	ldrb	r3, [r3, #0]
 800de20:	b25b      	sxtb	r3, r3
 800de22:	2b00      	cmp	r3, #0
 800de24:	da09      	bge.n	800de3a <CalculateCRC+0x62>
        // Shift left and XOR with polynomial
        crc = (crc << 1) ^ HIDS_CRC_POLYNOMIAL;
 800de26:	187b      	adds	r3, r7, r1
 800de28:	781b      	ldrb	r3, [r3, #0]
 800de2a:	005b      	lsls	r3, r3, #1
 800de2c:	b25b      	sxtb	r3, r3
 800de2e:	2231      	movs	r2, #49	@ 0x31
 800de30:	4053      	eors	r3, r2
 800de32:	b25a      	sxtb	r2, r3
 800de34:	187b      	adds	r3, r7, r1
 800de36:	701a      	strb	r2, [r3, #0]
 800de38:	e005      	b.n	800de46 <CalculateCRC+0x6e>
      } else {
          crc <<= 1;
 800de3a:	230f      	movs	r3, #15
 800de3c:	18fa      	adds	r2, r7, r3
 800de3e:	18fb      	adds	r3, r7, r3
 800de40:	781b      	ldrb	r3, [r3, #0]
 800de42:	18db      	adds	r3, r3, r3
 800de44:	7013      	strb	r3, [r2, #0]
    for (uint8_t j = 0; j < 8; j++) {
 800de46:	210d      	movs	r1, #13
 800de48:	187b      	adds	r3, r7, r1
 800de4a:	781a      	ldrb	r2, [r3, #0]
 800de4c:	187b      	adds	r3, r7, r1
 800de4e:	3201      	adds	r2, #1
 800de50:	701a      	strb	r2, [r3, #0]
 800de52:	230d      	movs	r3, #13
 800de54:	18fb      	adds	r3, r7, r3
 800de56:	781b      	ldrb	r3, [r3, #0]
 800de58:	2b07      	cmp	r3, #7
 800de5a:	d9de      	bls.n	800de1a <CalculateCRC+0x42>
  for (uint8_t i = 0; i < length; i++) {
 800de5c:	210e      	movs	r1, #14
 800de5e:	187b      	adds	r3, r7, r1
 800de60:	781a      	ldrb	r2, [r3, #0]
 800de62:	187b      	adds	r3, r7, r1
 800de64:	3201      	adds	r2, #1
 800de66:	701a      	strb	r2, [r3, #0]
 800de68:	230e      	movs	r3, #14
 800de6a:	18fa      	adds	r2, r7, r3
 800de6c:	1cfb      	adds	r3, r7, #3
 800de6e:	7812      	ldrb	r2, [r2, #0]
 800de70:	781b      	ldrb	r3, [r3, #0]
 800de72:	429a      	cmp	r2, r3
 800de74:	d3c0      	bcc.n	800ddf8 <CalculateCRC+0x20>
      }
    }
  }

//  Debug("CRC calculated value: 0x%X", crc);
  return crc;
 800de76:	230f      	movs	r3, #15
 800de78:	18fb      	adds	r3, r7, r3
 800de7a:	781b      	ldrb	r3, [r3, #0]
}
 800de7c:	0018      	movs	r0, r3
 800de7e:	46bd      	mov	sp, r7
 800de80:	b004      	add	sp, #16
 800de82:	bd80      	pop	{r7, pc}

0800de84 <HIDS_Init>:
  uint8_t heaterReg = HeaterMode;
  WriteRegister(HIDS_I2C_ADDRESS, &heaterReg, 1);
  Info("Started the heater in mode: %d", heaterReg);
}

void HIDS_Init(I2CReadCb readFunction, I2CWriteCB writeFunction) {
 800de84:	b580      	push	{r7, lr}
 800de86:	b082      	sub	sp, #8
 800de88:	af00      	add	r7, sp, #0
 800de8a:	6078      	str	r0, [r7, #4]
 800de8c:	6039      	str	r1, [r7, #0]
	ReadFunction = readFunction;
 800de8e:	4b0a      	ldr	r3, [pc, #40]	@ (800deb8 <HIDS_Init+0x34>)
 800de90:	687a      	ldr	r2, [r7, #4]
 800de92:	601a      	str	r2, [r3, #0]
	WriteFunction = writeFunction;
 800de94:	4b09      	ldr	r3, [pc, #36]	@ (800debc <HIDS_Init+0x38>)
 800de96:	683a      	ldr	r2, [r7, #0]
 800de98:	601a      	str	r2, [r3, #0]
	HIDS_SetMeasurementMode(MeasureMode);
 800de9a:	4b09      	ldr	r3, [pc, #36]	@ (800dec0 <HIDS_Init+0x3c>)
 800de9c:	781b      	ldrb	r3, [r3, #0]
 800de9e:	0018      	movs	r0, r3
 800dea0:	f000 f840 	bl	800df24 <HIDS_SetMeasurementMode>
	HIDS_SetHeaterMode(HeaterMode);
 800dea4:	4b07      	ldr	r3, [pc, #28]	@ (800dec4 <HIDS_Init+0x40>)
 800dea6:	781b      	ldrb	r3, [r3, #0]
 800dea8:	0018      	movs	r0, r3
 800deaa:	f000 f82b 	bl	800df04 <HIDS_SetHeaterMode>
//	HIDS_EnableHeater();
	// TODO: Enable heater after measurement is done and humidity is above a certain percentage, use formula.
}
 800deae:	46c0      	nop			@ (mov r8, r8)
 800deb0:	46bd      	mov	sp, r7
 800deb2:	b002      	add	sp, #8
 800deb4:	bd80      	pop	{r7, pc}
 800deb6:	46c0      	nop			@ (mov r8, r8)
 800deb8:	20002574 	.word	0x20002574
 800debc:	20002578 	.word	0x20002578
 800dec0:	200000d2 	.word	0x200000d2
 800dec4:	200000d1 	.word	0x200000d1

0800dec8 <HIDS_StartMeasurement>:

void HIDS_StartMeasurement(void) {
 800dec8:	b580      	push	{r7, lr}
 800deca:	af00      	add	r7, sp, #0
  HIDS_NextRunTime = HAL_GetTick() + HIDS_Interval_ms;
 800decc:	f000 facc 	bl	800e468 <HAL_GetTick>
 800ded0:	0002      	movs	r2, r0
 800ded2:	4b08      	ldr	r3, [pc, #32]	@ (800def4 <HIDS_StartMeasurement+0x2c>)
 800ded4:	681b      	ldr	r3, [r3, #0]
 800ded6:	18d2      	adds	r2, r2, r3
 800ded8:	4b07      	ldr	r3, [pc, #28]	@ (800def8 <HIDS_StartMeasurement+0x30>)
 800deda:	601a      	str	r2, [r3, #0]
  WriteRegister(HIDS_I2C_ADDRESS, &MeasureMode, 1);
 800dedc:	4b07      	ldr	r3, [pc, #28]	@ (800defc <HIDS_StartMeasurement+0x34>)
 800dede:	2201      	movs	r2, #1
 800dee0:	0019      	movs	r1, r3
 800dee2:	2044      	movs	r0, #68	@ 0x44
 800dee4:	f7ff ff56 	bl	800dd94 <WriteRegister>
  MeasurementDone = false;
 800dee8:	4b05      	ldr	r3, [pc, #20]	@ (800df00 <HIDS_StartMeasurement+0x38>)
 800deea:	2200      	movs	r2, #0
 800deec:	701a      	strb	r2, [r3, #0]
}
 800deee:	46c0      	nop			@ (mov r8, r8)
 800def0:	46bd      	mov	sp, r7
 800def2:	bd80      	pop	{r7, pc}
 800def4:	200000d8 	.word	0x200000d8
 800def8:	200000d4 	.word	0x200000d4
 800defc:	200000d2 	.word	0x200000d2
 800df00:	2000258a 	.word	0x2000258a

0800df04 <HIDS_SetHeaterMode>:

void HIDS_SetMeasurementDuration(uint32_t duration) {
  HIDS_MeasurementDuration = duration;
}

void HIDS_SetHeaterMode(HIDSHeaterModes modeHeater) {
 800df04:	b580      	push	{r7, lr}
 800df06:	b082      	sub	sp, #8
 800df08:	af00      	add	r7, sp, #0
 800df0a:	0002      	movs	r2, r0
 800df0c:	1dfb      	adds	r3, r7, #7
 800df0e:	701a      	strb	r2, [r3, #0]
  HeaterMode = modeHeater;
 800df10:	4b03      	ldr	r3, [pc, #12]	@ (800df20 <HIDS_SetHeaterMode+0x1c>)
 800df12:	1dfa      	adds	r2, r7, #7
 800df14:	7812      	ldrb	r2, [r2, #0]
 800df16:	701a      	strb	r2, [r3, #0]
}
 800df18:	46c0      	nop			@ (mov r8, r8)
 800df1a:	46bd      	mov	sp, r7
 800df1c:	b002      	add	sp, #8
 800df1e:	bd80      	pop	{r7, pc}
 800df20:	200000d1 	.word	0x200000d1

0800df24 <HIDS_SetMeasurementMode>:

void HIDS_SetMeasurementMode(HIDSMeasureModes modeMeasure) {
 800df24:	b580      	push	{r7, lr}
 800df26:	b082      	sub	sp, #8
 800df28:	af00      	add	r7, sp, #0
 800df2a:	0002      	movs	r2, r0
 800df2c:	1dfb      	adds	r3, r7, #7
 800df2e:	701a      	strb	r2, [r3, #0]
  MeasureMode = modeMeasure;
 800df30:	4b03      	ldr	r3, [pc, #12]	@ (800df40 <HIDS_SetMeasurementMode+0x1c>)
 800df32:	1dfa      	adds	r2, r7, #7
 800df34:	7812      	ldrb	r2, [r2, #0]
 800df36:	701a      	strb	r2, [r3, #0]
}
 800df38:	46c0      	nop			@ (mov r8, r8)
 800df3a:	46bd      	mov	sp, r7
 800df3c:	b002      	add	sp, #8
 800df3e:	bd80      	pop	{r7, pc}
 800df40:	200000d2 	.word	0x200000d2

0800df44 <setHIDSTimeStamp>:

void setHIDSTimeStamp(uint32_t ticks) {
 800df44:	b580      	push	{r7, lr}
 800df46:	b082      	sub	sp, #8
 800df48:	af00      	add	r7, sp, #0
 800df4a:	6078      	str	r0, [r7, #4]
  HIDSTimeStamp = HAL_GetTick() + ticks;
 800df4c:	f000 fa8c 	bl	800e468 <HAL_GetTick>
 800df50:	0002      	movs	r2, r0
 800df52:	687b      	ldr	r3, [r7, #4]
 800df54:	18d2      	adds	r2, r2, r3
 800df56:	4b03      	ldr	r3, [pc, #12]	@ (800df64 <setHIDSTimeStamp+0x20>)
 800df58:	601a      	str	r2, [r3, #0]
}
 800df5a:	46c0      	nop			@ (mov r8, r8)
 800df5c:	46bd      	mov	sp, r7
 800df5e:	b002      	add	sp, #8
 800df60:	bd80      	pop	{r7, pc}
 800df62:	46c0      	nop			@ (mov r8, r8)
 800df64:	2000258c 	.word	0x2000258c

0800df68 <CheckCRC>:

static bool CheckCRC(uint8_t* data) {
 800df68:	b590      	push	{r4, r7, lr}
 800df6a:	b085      	sub	sp, #20
 800df6c:	af00      	add	r7, sp, #0
 800df6e:	6078      	str	r0, [r7, #4]
  // Data format: 2 bytes for data, followed by an 8-bit CRC

	// Check CRC for the first segment
	uint8_t crcData1[2] = {data[0], data[1]};
 800df70:	687b      	ldr	r3, [r7, #4]
 800df72:	781a      	ldrb	r2, [r3, #0]
 800df74:	210c      	movs	r1, #12
 800df76:	187b      	adds	r3, r7, r1
 800df78:	701a      	strb	r2, [r3, #0]
 800df7a:	687b      	ldr	r3, [r7, #4]
 800df7c:	785a      	ldrb	r2, [r3, #1]
 800df7e:	187b      	adds	r3, r7, r1
 800df80:	705a      	strb	r2, [r3, #1]
	uint8_t crc1 = data[2];
 800df82:	240f      	movs	r4, #15
 800df84:	193b      	adds	r3, r7, r4
 800df86:	687a      	ldr	r2, [r7, #4]
 800df88:	7892      	ldrb	r2, [r2, #2]
 800df8a:	701a      	strb	r2, [r3, #0]
	if (CalculateCRC(crcData1, 2) != crc1) {
 800df8c:	187b      	adds	r3, r7, r1
 800df8e:	2102      	movs	r1, #2
 800df90:	0018      	movs	r0, r3
 800df92:	f7ff ff21 	bl	800ddd8 <CalculateCRC>
 800df96:	0003      	movs	r3, r0
 800df98:	001a      	movs	r2, r3
 800df9a:	193b      	adds	r3, r7, r4
 800df9c:	781b      	ldrb	r3, [r3, #0]
 800df9e:	4293      	cmp	r3, r2
 800dfa0:	d007      	beq.n	800dfb2 <CheckCRC+0x4a>
		Error("CRC check failed for the first segment.");
 800dfa2:	4a1a      	ldr	r2, [pc, #104]	@ (800e00c <CheckCRC+0xa4>)
 800dfa4:	4b1a      	ldr	r3, [pc, #104]	@ (800e010 <CheckCRC+0xa8>)
 800dfa6:	0019      	movs	r1, r3
 800dfa8:	2001      	movs	r0, #1
 800dfaa:	f7ff fe07 	bl	800dbbc <CreateLine>
//		errorHandler(__func__, __LINE__, __FILE__);
		return false;
 800dfae:	2300      	movs	r3, #0
 800dfb0:	e027      	b.n	800e002 <CheckCRC+0x9a>
	}

	// Check CRC for the second segment
	uint8_t crcData2[2] = {data[3], data[4]};
 800dfb2:	687b      	ldr	r3, [r7, #4]
 800dfb4:	78da      	ldrb	r2, [r3, #3]
 800dfb6:	2108      	movs	r1, #8
 800dfb8:	187b      	adds	r3, r7, r1
 800dfba:	701a      	strb	r2, [r3, #0]
 800dfbc:	687b      	ldr	r3, [r7, #4]
 800dfbe:	791a      	ldrb	r2, [r3, #4]
 800dfc0:	187b      	adds	r3, r7, r1
 800dfc2:	705a      	strb	r2, [r3, #1]
	uint8_t crc2 = data[5];
 800dfc4:	240e      	movs	r4, #14
 800dfc6:	193b      	adds	r3, r7, r4
 800dfc8:	687a      	ldr	r2, [r7, #4]
 800dfca:	7952      	ldrb	r2, [r2, #5]
 800dfcc:	701a      	strb	r2, [r3, #0]
	if (CalculateCRC(crcData2, 2) != crc2) {
 800dfce:	187b      	adds	r3, r7, r1
 800dfd0:	2102      	movs	r1, #2
 800dfd2:	0018      	movs	r0, r3
 800dfd4:	f7ff ff00 	bl	800ddd8 <CalculateCRC>
 800dfd8:	0003      	movs	r3, r0
 800dfda:	001a      	movs	r2, r3
 800dfdc:	193b      	adds	r3, r7, r4
 800dfde:	781b      	ldrb	r3, [r3, #0]
 800dfe0:	4293      	cmp	r3, r2
 800dfe2:	d00d      	beq.n	800e000 <CheckCRC+0x98>
		Error("CRC check failed for the second segment.");
 800dfe4:	4a0b      	ldr	r2, [pc, #44]	@ (800e014 <CheckCRC+0xac>)
 800dfe6:	4b0a      	ldr	r3, [pc, #40]	@ (800e010 <CheckCRC+0xa8>)
 800dfe8:	0019      	movs	r1, r3
 800dfea:	2001      	movs	r0, #1
 800dfec:	f7ff fde6 	bl	800dbbc <CreateLine>
		errorHandler(__func__, __LINE__, __FILE__);
 800dff0:	4a09      	ldr	r2, [pc, #36]	@ (800e018 <CheckCRC+0xb0>)
 800dff2:	4b0a      	ldr	r3, [pc, #40]	@ (800e01c <CheckCRC+0xb4>)
 800dff4:	217c      	movs	r1, #124	@ 0x7c
 800dff6:	0018      	movs	r0, r3
 800dff8:	f7ff fe98 	bl	800dd2c <errorHandler>
		return false;
 800dffc:	2300      	movs	r3, #0
 800dffe:	e000      	b.n	800e002 <CheckCRC+0x9a>
	}
	return true;
 800e000:	2301      	movs	r3, #1
}
 800e002:	0018      	movs	r0, r3
 800e004:	46bd      	mov	sp, r7
 800e006:	b005      	add	sp, #20
 800e008:	bd90      	pop	{r4, r7, pc}
 800e00a:	46c0      	nop			@ (mov r8, r8)
 800e00c:	08024494 	.word	0x08024494
 800e010:	080244bc 	.word	0x080244bc
 800e014:	080244c0 	.word	0x080244c0
 800e018:	080244ec 	.word	0x080244ec
 800e01c:	08024a84 	.word	0x08024a84

0800e020 <HIDS_DeviceConnected>:

bool HIDS_DeviceConnected(void) {
 800e020:	b580      	push	{r7, lr}
 800e022:	b084      	sub	sp, #16
 800e024:	af02      	add	r7, sp, #8
	uint8_t serialReg = HIDS_SERIAL_NUMBER_REG;
 800e026:	1dbb      	adds	r3, r7, #6
 800e028:	2289      	movs	r2, #137	@ 0x89
 800e02a:	701a      	strb	r2, [r3, #0]
	WriteRegister(HIDS_I2C_ADDRESS, &serialReg, 1);
 800e02c:	1dbb      	adds	r3, r7, #6
 800e02e:	2201      	movs	r2, #1
 800e030:	0019      	movs	r1, r3
 800e032:	2044      	movs	r0, #68	@ 0x44
 800e034:	f7ff feae 	bl	800dd94 <WriteRegister>
	HAL_Delay(30);
 800e038:	201e      	movs	r0, #30
 800e03a:	f000 fa1f 	bl	800e47c <HAL_Delay>
	ReadRegister(HIDS_I2C_ADDRESS, SerialBuffer, HIDS_SERIAL_BUFFER_LENGTH);
 800e03e:	4b14      	ldr	r3, [pc, #80]	@ (800e090 <HIDS_DeviceConnected+0x70>)
 800e040:	2206      	movs	r2, #6
 800e042:	0019      	movs	r1, r3
 800e044:	2044      	movs	r0, #68	@ 0x44
 800e046:	f7ff fe83 	bl	800dd50 <ReadRegister>

	for (uint8_t i = 0; i < HIDS_SERIAL_BUFFER_LENGTH; i++) {
 800e04a:	1dfb      	adds	r3, r7, #7
 800e04c:	2200      	movs	r2, #0
 800e04e:	701a      	strb	r2, [r3, #0]
 800e050:	e011      	b.n	800e076 <HIDS_DeviceConnected+0x56>
		Info("HIDS_Device serial ID[%d]: 0x%X", i, SerialBuffer[i]);
 800e052:	1dfb      	adds	r3, r7, #7
 800e054:	7818      	ldrb	r0, [r3, #0]
 800e056:	1dfb      	adds	r3, r7, #7
 800e058:	781b      	ldrb	r3, [r3, #0]
 800e05a:	4a0d      	ldr	r2, [pc, #52]	@ (800e090 <HIDS_DeviceConnected+0x70>)
 800e05c:	5cd3      	ldrb	r3, [r2, r3]
 800e05e:	4a0d      	ldr	r2, [pc, #52]	@ (800e094 <HIDS_DeviceConnected+0x74>)
 800e060:	490d      	ldr	r1, [pc, #52]	@ (800e098 <HIDS_DeviceConnected+0x78>)
 800e062:	9300      	str	r3, [sp, #0]
 800e064:	0003      	movs	r3, r0
 800e066:	2002      	movs	r0, #2
 800e068:	f7ff fda8 	bl	800dbbc <CreateLine>
	for (uint8_t i = 0; i < HIDS_SERIAL_BUFFER_LENGTH; i++) {
 800e06c:	1dfb      	adds	r3, r7, #7
 800e06e:	781a      	ldrb	r2, [r3, #0]
 800e070:	1dfb      	adds	r3, r7, #7
 800e072:	3201      	adds	r2, #1
 800e074:	701a      	strb	r2, [r3, #0]
 800e076:	1dfb      	adds	r3, r7, #7
 800e078:	781b      	ldrb	r3, [r3, #0]
 800e07a:	2b05      	cmp	r3, #5
 800e07c:	d9e9      	bls.n	800e052 <HIDS_DeviceConnected+0x32>
	}
	return CheckCRC(SerialBuffer);
 800e07e:	4b04      	ldr	r3, [pc, #16]	@ (800e090 <HIDS_DeviceConnected+0x70>)
 800e080:	0018      	movs	r0, r3
 800e082:	f7ff ff71 	bl	800df68 <CheckCRC>
 800e086:	0003      	movs	r3, r0
}
 800e088:	0018      	movs	r0, r3
 800e08a:	46bd      	mov	sp, r7
 800e08c:	b002      	add	sp, #8
 800e08e:	bd80      	pop	{r7, pc}
 800e090:	2000257c 	.word	0x2000257c
 800e094:	08024504 	.word	0x08024504
 800e098:	08024490 	.word	0x08024490

0800e09c <HIDS_MeasurementReady>:

bool HIDS_MeasurementReady(void) {
 800e09c:	b580      	push	{r7, lr}
 800e09e:	af00      	add	r7, sp, #0
  return TimestampIsReached(HIDS_NextRunTime);
 800e0a0:	4b04      	ldr	r3, [pc, #16]	@ (800e0b4 <HIDS_MeasurementReady+0x18>)
 800e0a2:	681b      	ldr	r3, [r3, #0]
 800e0a4:	0018      	movs	r0, r3
 800e0a6:	f7ff fd33 	bl	800db10 <TimestampIsReached>
 800e0aa:	0003      	movs	r3, r0
}
 800e0ac:	0018      	movs	r0, r3
 800e0ae:	46bd      	mov	sp, r7
 800e0b0:	bd80      	pop	{r7, pc}
 800e0b2:	46c0      	nop			@ (mov r8, r8)
 800e0b4:	200000d4 	.word	0x200000d4

0800e0b8 <HIDS_GetMeasurementValues>:
//    green = (1- ((humidity - 80)/20))*Full;
//    blue = Full;
//  }
}

bool HIDS_GetMeasurementValues(float* humidity, float* temperature) {
 800e0b8:	b580      	push	{r7, lr}
 800e0ba:	b086      	sub	sp, #24
 800e0bc:	af00      	add	r7, sp, #0
 800e0be:	6078      	str	r0, [r7, #4]
 800e0c0:	6039      	str	r1, [r7, #0]
  // TODO: Store last measurement humidity for sgp40 measurement.
  if(MeasurementDone) return true;
 800e0c2:	4b4c      	ldr	r3, [pc, #304]	@ (800e1f4 <HIDS_GetMeasurementValues+0x13c>)
 800e0c4:	781b      	ldrb	r3, [r3, #0]
 800e0c6:	2b00      	cmp	r3, #0
 800e0c8:	d001      	beq.n	800e0ce <HIDS_GetMeasurementValues+0x16>
 800e0ca:	2301      	movs	r3, #1
 800e0cc:	e08d      	b.n	800e1ea <HIDS_GetMeasurementValues+0x132>
  if(!HIDS_MeasurementReady()) return false;
 800e0ce:	f7ff ffe5 	bl	800e09c <HIDS_MeasurementReady>
 800e0d2:	0003      	movs	r3, r0
 800e0d4:	001a      	movs	r2, r3
 800e0d6:	2301      	movs	r3, #1
 800e0d8:	4053      	eors	r3, r2
 800e0da:	b2db      	uxtb	r3, r3
 800e0dc:	2b00      	cmp	r3, #0
 800e0de:	d001      	beq.n	800e0e4 <HIDS_GetMeasurementValues+0x2c>
 800e0e0:	2300      	movs	r3, #0
 800e0e2:	e082      	b.n	800e1ea <HIDS_GetMeasurementValues+0x132>
  float currentHumidity;
//  static float temperatures[HIDS_MAX_MEASUREMENTS];
//  static float humidities[HIDS_MAX_MEASUREMENTS];

  //Debug("HT measurements: %d out of %d completed.", measurements + 1, amountOfMeasurements);
  if (!ReadRegister(HIDS_I2C_ADDRESS, MeasureBuffer, HIDS_MEASURE_BUFFER_LENGTH)) {
 800e0e4:	4b44      	ldr	r3, [pc, #272]	@ (800e1f8 <HIDS_GetMeasurementValues+0x140>)
 800e0e6:	2206      	movs	r2, #6
 800e0e8:	0019      	movs	r1, r3
 800e0ea:	2044      	movs	r0, #68	@ 0x44
 800e0ec:	f7ff fe30 	bl	800dd50 <ReadRegister>
 800e0f0:	0003      	movs	r3, r0
 800e0f2:	001a      	movs	r2, r3
 800e0f4:	2301      	movs	r3, #1
 800e0f6:	4053      	eors	r3, r2
 800e0f8:	b2db      	uxtb	r3, r3
 800e0fa:	2b00      	cmp	r3, #0
 800e0fc:	d005      	beq.n	800e10a <HIDS_GetMeasurementValues+0x52>
    Error("Error during reading the wsenHIDS result register");
 800e0fe:	4a3f      	ldr	r2, [pc, #252]	@ (800e1fc <HIDS_GetMeasurementValues+0x144>)
 800e100:	4b3f      	ldr	r3, [pc, #252]	@ (800e200 <HIDS_GetMeasurementValues+0x148>)
 800e102:	0019      	movs	r1, r3
 800e104:	2001      	movs	r0, #1
 800e106:	f7ff fd59 	bl	800dbbc <CreateLine>
  }
	if(!CheckCRC(MeasureBuffer)) {
 800e10a:	4b3b      	ldr	r3, [pc, #236]	@ (800e1f8 <HIDS_GetMeasurementValues+0x140>)
 800e10c:	0018      	movs	r0, r3
 800e10e:	f7ff ff2b 	bl	800df68 <CheckCRC>
 800e112:	0003      	movs	r3, r0
 800e114:	001a      	movs	r2, r3
 800e116:	2301      	movs	r3, #1
 800e118:	4053      	eors	r3, r2
 800e11a:	b2db      	uxtb	r3, r3
 800e11c:	2b00      	cmp	r3, #0
 800e11e:	d011      	beq.n	800e144 <HIDS_GetMeasurementValues+0x8c>
		//Error("HIDS measurements CRC check failed.");
		//Info("Measure buffer structure:");
		for(uint8_t i = 0; i < HIDS_MEASURE_BUFFER_LENGTH; i++) {
 800e120:	2317      	movs	r3, #23
 800e122:	18fb      	adds	r3, r7, r3
 800e124:	2200      	movs	r2, #0
 800e126:	701a      	strb	r2, [r3, #0]
 800e128:	e005      	b.n	800e136 <HIDS_GetMeasurementValues+0x7e>
 800e12a:	2117      	movs	r1, #23
 800e12c:	187b      	adds	r3, r7, r1
 800e12e:	781a      	ldrb	r2, [r3, #0]
 800e130:	187b      	adds	r3, r7, r1
 800e132:	3201      	adds	r2, #1
 800e134:	701a      	strb	r2, [r3, #0]
 800e136:	2317      	movs	r3, #23
 800e138:	18fb      	adds	r3, r7, r3
 800e13a:	781b      	ldrb	r3, [r3, #0]
 800e13c:	2b05      	cmp	r3, #5
 800e13e:	d9f4      	bls.n	800e12a <HIDS_GetMeasurementValues+0x72>
			//Debug("HIDS_Measurement buffer[%d]: %d", i, MeasureBuffer[i]);
		}
		return false;
 800e140:	2300      	movs	r3, #0
 800e142:	e052      	b.n	800e1ea <HIDS_GetMeasurementValues+0x132>

  // Humidity formula in percentage:
  //  RH = ((-6 + 125 * SRH) / (2^16 - 1))
  // Temperature formula in degrees Celsius:
  //  T = ((-45 + (175 * ST) / (2^16 - 1)))
	currentTemperature = (((175 * ((MeasureBuffer[0] << 8) | MeasureBuffer[1]))) / HIDS_POW_2_16_MINUS_1);
 800e144:	4b2c      	ldr	r3, [pc, #176]	@ (800e1f8 <HIDS_GetMeasurementValues+0x140>)
 800e146:	781b      	ldrb	r3, [r3, #0]
 800e148:	021b      	lsls	r3, r3, #8
 800e14a:	4a2b      	ldr	r2, [pc, #172]	@ (800e1f8 <HIDS_GetMeasurementValues+0x140>)
 800e14c:	7852      	ldrb	r2, [r2, #1]
 800e14e:	4313      	orrs	r3, r2
 800e150:	22af      	movs	r2, #175	@ 0xaf
 800e152:	4353      	muls	r3, r2
 800e154:	0018      	movs	r0, r3
 800e156:	f7f5 f933 	bl	80033c0 <__aeabi_i2d>
 800e15a:	2200      	movs	r2, #0
 800e15c:	4b29      	ldr	r3, [pc, #164]	@ (800e204 <HIDS_GetMeasurementValues+0x14c>)
 800e15e:	f7f3 fe29 	bl	8001db4 <__aeabi_ddiv>
 800e162:	0002      	movs	r2, r0
 800e164:	000b      	movs	r3, r1
 800e166:	0010      	movs	r0, r2
 800e168:	0019      	movs	r1, r3
 800e16a:	f7f5 f9c3 	bl	80034f4 <__aeabi_d2f>
 800e16e:	1c03      	adds	r3, r0, #0
 800e170:	613b      	str	r3, [r7, #16]
	currentTemperature -= 45;
 800e172:	4925      	ldr	r1, [pc, #148]	@ (800e208 <HIDS_GetMeasurementValues+0x150>)
 800e174:	6938      	ldr	r0, [r7, #16]
 800e176:	f7f3 f851 	bl	800121c <__aeabi_fsub>
 800e17a:	1c03      	adds	r3, r0, #0
 800e17c:	613b      	str	r3, [r7, #16]
	currentHumidity = ((125 * ((MeasureBuffer[3] << 8) | MeasureBuffer[4]) / HIDS_POW_2_16_MINUS_1));
 800e17e:	4b1e      	ldr	r3, [pc, #120]	@ (800e1f8 <HIDS_GetMeasurementValues+0x140>)
 800e180:	78db      	ldrb	r3, [r3, #3]
 800e182:	021b      	lsls	r3, r3, #8
 800e184:	4a1c      	ldr	r2, [pc, #112]	@ (800e1f8 <HIDS_GetMeasurementValues+0x140>)
 800e186:	7912      	ldrb	r2, [r2, #4]
 800e188:	431a      	orrs	r2, r3
 800e18a:	0013      	movs	r3, r2
 800e18c:	015b      	lsls	r3, r3, #5
 800e18e:	1a9b      	subs	r3, r3, r2
 800e190:	009b      	lsls	r3, r3, #2
 800e192:	189b      	adds	r3, r3, r2
 800e194:	0018      	movs	r0, r3
 800e196:	f7f5 f913 	bl	80033c0 <__aeabi_i2d>
 800e19a:	2200      	movs	r2, #0
 800e19c:	4b19      	ldr	r3, [pc, #100]	@ (800e204 <HIDS_GetMeasurementValues+0x14c>)
 800e19e:	f7f3 fe09 	bl	8001db4 <__aeabi_ddiv>
 800e1a2:	0002      	movs	r2, r0
 800e1a4:	000b      	movs	r3, r1
 800e1a6:	0010      	movs	r0, r2
 800e1a8:	0019      	movs	r1, r3
 800e1aa:	f7f5 f9a3 	bl	80034f4 <__aeabi_d2f>
 800e1ae:	1c03      	adds	r3, r0, #0
 800e1b0:	60fb      	str	r3, [r7, #12]
	currentHumidity -= 6;
 800e1b2:	4916      	ldr	r1, [pc, #88]	@ (800e20c <HIDS_GetMeasurementValues+0x154>)
 800e1b4:	68f8      	ldr	r0, [r7, #12]
 800e1b6:	f7f3 f831 	bl	800121c <__aeabi_fsub>
 800e1ba:	1c03      	adds	r3, r0, #0
 800e1bc:	60fb      	str	r3, [r7, #12]
//    for (uint8_t i = 0; i < measurements; i++) {
//        sumTemperature += temperatures[i];
//        sumHumidity += humidities[i];
//    }

   *temperature = currentTemperature;
 800e1be:	683b      	ldr	r3, [r7, #0]
 800e1c0:	693a      	ldr	r2, [r7, #16]
 800e1c2:	601a      	str	r2, [r3, #0]
   *humidity = currentHumidity;
 800e1c4:	687b      	ldr	r3, [r7, #4]
 800e1c6:	68fa      	ldr	r2, [r7, #12]
 800e1c8:	601a      	str	r2, [r3, #0]

   SGP_GetHT(temperature, humidity);
 800e1ca:	687a      	ldr	r2, [r7, #4]
 800e1cc:	683b      	ldr	r3, [r7, #0]
 800e1ce:	0011      	movs	r1, r2
 800e1d0:	0018      	movs	r0, r3
 800e1d2:	f7fd fbc3 	bl	800b95c <SGP_GetHT>
   ESP_GetHT(currentTemperature, currentHumidity);
 800e1d6:	68fa      	ldr	r2, [r7, #12]
 800e1d8:	693b      	ldr	r3, [r7, #16]
 800e1da:	1c11      	adds	r1, r2, #0
 800e1dc:	1c18      	adds	r0, r3, #0
 800e1de:	f7f5 fb79 	bl	80038d4 <ESP_GetHT>

//   measurements = 0;
   MeasurementDone = true;
 800e1e2:	4b04      	ldr	r3, [pc, #16]	@ (800e1f4 <HIDS_GetMeasurementValues+0x13c>)
 800e1e4:	2201      	movs	r2, #1
 800e1e6:	701a      	strb	r2, [r3, #0]
   //HIDS_StartMeasurement();
    //Debug("HIDS measurement is done.");
   return true;
 800e1e8:	2301      	movs	r3, #1
	// Starting another measurement, still not done with all measurements.

	//return false;
}
 800e1ea:	0018      	movs	r0, r3
 800e1ec:	46bd      	mov	sp, r7
 800e1ee:	b006      	add	sp, #24
 800e1f0:	bd80      	pop	{r7, pc}
 800e1f2:	46c0      	nop			@ (mov r8, r8)
 800e1f4:	2000258a 	.word	0x2000258a
 800e1f8:	20002584 	.word	0x20002584
 800e1fc:	08024524 	.word	0x08024524
 800e200:	080244bc 	.word	0x080244bc
 800e204:	40efffe0 	.word	0x40efffe0
 800e208:	42340000 	.word	0x42340000
 800e20c:	40c00000 	.word	0x40c00000

0800e210 <ResetHIDSresults>:
void ResetHIDSresults() {
 800e210:	b580      	push	{r7, lr}
 800e212:	af00      	add	r7, sp, #0
  humid = 0.0;
 800e214:	4b04      	ldr	r3, [pc, #16]	@ (800e228 <ResetHIDSresults+0x18>)
 800e216:	2200      	movs	r2, #0
 800e218:	601a      	str	r2, [r3, #0]
  temp = 0.0;
 800e21a:	4b04      	ldr	r3, [pc, #16]	@ (800e22c <ResetHIDSresults+0x1c>)
 800e21c:	2200      	movs	r2, #0
 800e21e:	601a      	str	r2, [r3, #0]
}
 800e220:	46c0      	nop			@ (mov r8, r8)
 800e222:	46bd      	mov	sp, r7
 800e224:	bd80      	pop	{r7, pc}
 800e226:	46c0      	nop			@ (mov r8, r8)
 800e228:	2000256c 	.word	0x2000256c
 800e22c:	20002570 	.word	0x20002570

0800e230 <HIDS_Upkeep>:

wsenHIDSState HIDS_Upkeep(void) {
 800e230:	b5b0      	push	{r4, r5, r7, lr}
 800e232:	b084      	sub	sp, #16
 800e234:	af04      	add	r7, sp, #16
  static wsenHIDSState HIDSState = HIDS_STATE_INIT;
  switch(HIDSState) {
 800e236:	4b3b      	ldr	r3, [pc, #236]	@ (800e324 <HIDS_Upkeep+0xf4>)
 800e238:	781b      	ldrb	r3, [r3, #0]
 800e23a:	2b06      	cmp	r3, #6
 800e23c:	d865      	bhi.n	800e30a <HIDS_Upkeep+0xda>
 800e23e:	009a      	lsls	r2, r3, #2
 800e240:	4b39      	ldr	r3, [pc, #228]	@ (800e328 <HIDS_Upkeep+0xf8>)
 800e242:	18d3      	adds	r3, r2, r3
 800e244:	681b      	ldr	r3, [r3, #0]
 800e246:	469f      	mov	pc, r3
    case HIDS_STATE_OFF:
      Debug("Measurements are turned off for wsenHIDS sensor.");
 800e248:	4a38      	ldr	r2, [pc, #224]	@ (800e32c <HIDS_Upkeep+0xfc>)
 800e24a:	4b39      	ldr	r3, [pc, #228]	@ (800e330 <HIDS_Upkeep+0x100>)
 800e24c:	0019      	movs	r1, r3
 800e24e:	2003      	movs	r0, #3
 800e250:	f7ff fcb4 	bl	800dbbc <CreateLine>
      break;
 800e254:	e060      	b.n	800e318 <HIDS_Upkeep+0xe8>

    case HIDS_STATE_INIT:
//      Debug("entered HIDS_STATE_INIT");
      ResetHIDSresults();
 800e256:	f7ff ffdb 	bl	800e210 <ResetHIDSresults>
      HIDSState = HIDS_STATE_START_MEASUREMENTS;
 800e25a:	4b32      	ldr	r3, [pc, #200]	@ (800e324 <HIDS_Upkeep+0xf4>)
 800e25c:	2201      	movs	r2, #1
 800e25e:	701a      	strb	r2, [r3, #0]
      break;
 800e260:	e05a      	b.n	800e318 <HIDS_Upkeep+0xe8>

    case HIDS_STATE_START_MEASUREMENTS:
//      Debug("entered HIDS_STATE_START_MEASUREMENTS");
      SetMeasurementIndicator();
 800e262:	f7fe fd55 	bl	800cd10 <SetMeasurementIndicator>
      HIDS_StartMeasurement();
 800e266:	f7ff fe2f 	bl	800dec8 <HIDS_StartMeasurement>
      HIDSState = HIDS_STATE_WAIT_FOR_COMPLETION;
 800e26a:	4b2e      	ldr	r3, [pc, #184]	@ (800e324 <HIDS_Upkeep+0xf4>)
 800e26c:	2202      	movs	r2, #2
 800e26e:	701a      	strb	r2, [r3, #0]
      break;
 800e270:	e052      	b.n	800e318 <HIDS_Upkeep+0xe8>

    case HIDS_STATE_WAIT_FOR_COMPLETION:
//      Debug("entered HIDS_STATE_WAIT_FOR_COMPLETION");
      if(HIDS_GetMeasurementValues(&humid, &temp)) {
 800e272:	4a30      	ldr	r2, [pc, #192]	@ (800e334 <HIDS_Upkeep+0x104>)
 800e274:	4b30      	ldr	r3, [pc, #192]	@ (800e338 <HIDS_Upkeep+0x108>)
 800e276:	0011      	movs	r1, r2
 800e278:	0018      	movs	r0, r3
 800e27a:	f7ff ff1d 	bl	800e0b8 <HIDS_GetMeasurementValues>
 800e27e:	1e03      	subs	r3, r0, #0
 800e280:	d047      	beq.n	800e312 <HIDS_Upkeep+0xe2>
        HIDSState = HIDS_STATE_PROCESS_RESULTS;
 800e282:	4b28      	ldr	r3, [pc, #160]	@ (800e324 <HIDS_Upkeep+0xf4>)
 800e284:	2203      	movs	r2, #3
 800e286:	701a      	strb	r2, [r3, #0]
      }
      break;
 800e288:	e043      	b.n	800e312 <HIDS_Upkeep+0xe2>

    case HIDS_STATE_PROCESS_RESULTS:
//      Debug("entered HIDS_STATE_PROCESS_RESULTS");
//      Debug("Processing results.");
      Debug("Humidity value: %3.2f%%, Temperature value: %3.2fC", humid, temp);
 800e28a:	4b2b      	ldr	r3, [pc, #172]	@ (800e338 <HIDS_Upkeep+0x108>)
 800e28c:	681b      	ldr	r3, [r3, #0]
 800e28e:	1c18      	adds	r0, r3, #0
 800e290:	f7f5 f8e8 	bl	8003464 <__aeabi_f2d>
 800e294:	0004      	movs	r4, r0
 800e296:	000d      	movs	r5, r1
 800e298:	4b26      	ldr	r3, [pc, #152]	@ (800e334 <HIDS_Upkeep+0x104>)
 800e29a:	681b      	ldr	r3, [r3, #0]
 800e29c:	1c18      	adds	r0, r3, #0
 800e29e:	f7f5 f8e1 	bl	8003464 <__aeabi_f2d>
 800e2a2:	0002      	movs	r2, r0
 800e2a4:	000b      	movs	r3, r1
 800e2a6:	4825      	ldr	r0, [pc, #148]	@ (800e33c <HIDS_Upkeep+0x10c>)
 800e2a8:	4921      	ldr	r1, [pc, #132]	@ (800e330 <HIDS_Upkeep+0x100>)
 800e2aa:	9202      	str	r2, [sp, #8]
 800e2ac:	9303      	str	r3, [sp, #12]
 800e2ae:	9400      	str	r4, [sp, #0]
 800e2b0:	9501      	str	r5, [sp, #4]
 800e2b2:	0002      	movs	r2, r0
 800e2b4:	2003      	movs	r0, #3
 800e2b6:	f7ff fc81 	bl	800dbbc <CreateLine>
      setHIDS(temp, humid);
 800e2ba:	4b1e      	ldr	r3, [pc, #120]	@ (800e334 <HIDS_Upkeep+0x104>)
 800e2bc:	681a      	ldr	r2, [r3, #0]
 800e2be:	4b1e      	ldr	r3, [pc, #120]	@ (800e338 <HIDS_Upkeep+0x108>)
 800e2c0:	681b      	ldr	r3, [r3, #0]
 800e2c2:	1c19      	adds	r1, r3, #0
 800e2c4:	1c10      	adds	r0, r2, #0
 800e2c6:	f7f5 fb19 	bl	80038fc <setHIDS>
      ResetMeasurementIndicator();
 800e2ca:	f7fe fd39 	bl	800cd40 <ResetMeasurementIndicator>
      HIDSTimeStamp = HAL_GetTick() + (powerCheck() == USB_PLUGGED_IN?10000:1000);  // about every ten seconds when power is plugged
 800e2ce:	f000 f8cb 	bl	800e468 <HAL_GetTick>
 800e2d2:	0004      	movs	r4, r0
 800e2d4:	f7fe fdfa 	bl	800cecc <powerCheck>
 800e2d8:	0003      	movs	r3, r0
 800e2da:	2b01      	cmp	r3, #1
 800e2dc:	d101      	bne.n	800e2e2 <HIDS_Upkeep+0xb2>
 800e2de:	4b18      	ldr	r3, [pc, #96]	@ (800e340 <HIDS_Upkeep+0x110>)
 800e2e0:	e001      	b.n	800e2e6 <HIDS_Upkeep+0xb6>
 800e2e2:	23fa      	movs	r3, #250	@ 0xfa
 800e2e4:	009b      	lsls	r3, r3, #2
 800e2e6:	191a      	adds	r2, r3, r4
 800e2e8:	4b16      	ldr	r3, [pc, #88]	@ (800e344 <HIDS_Upkeep+0x114>)
 800e2ea:	601a      	str	r2, [r3, #0]
      HIDSState = HIDS_STATE_WAIT;
 800e2ec:	4b0d      	ldr	r3, [pc, #52]	@ (800e324 <HIDS_Upkeep+0xf4>)
 800e2ee:	2206      	movs	r2, #6
 800e2f0:	701a      	strb	r2, [r3, #0]
      break;
 800e2f2:	e011      	b.n	800e318 <HIDS_Upkeep+0xe8>

    case HIDS_STATE_WAIT:
//      Debug("entered HIDS_STATE_WAIT");
      if(TimestampIsReached(HIDSTimeStamp)) {
 800e2f4:	4b13      	ldr	r3, [pc, #76]	@ (800e344 <HIDS_Upkeep+0x114>)
 800e2f6:	681b      	ldr	r3, [r3, #0]
 800e2f8:	0018      	movs	r0, r3
 800e2fa:	f7ff fc09 	bl	800db10 <TimestampIsReached>
 800e2fe:	1e03      	subs	r3, r0, #0
 800e300:	d009      	beq.n	800e316 <HIDS_Upkeep+0xe6>
        HIDSState = HIDS_STATE_INIT;
 800e302:	4b08      	ldr	r3, [pc, #32]	@ (800e324 <HIDS_Upkeep+0xf4>)
 800e304:	2200      	movs	r2, #0
 800e306:	701a      	strb	r2, [r3, #0]
      }
      break;
 800e308:	e005      	b.n	800e316 <HIDS_Upkeep+0xe6>

    default:
    // Handle unexpected state
      HIDSState = HIDS_STATE_INIT;
 800e30a:	4b06      	ldr	r3, [pc, #24]	@ (800e324 <HIDS_Upkeep+0xf4>)
 800e30c:	2200      	movs	r2, #0
 800e30e:	701a      	strb	r2, [r3, #0]
      break;
 800e310:	e002      	b.n	800e318 <HIDS_Upkeep+0xe8>
      break;
 800e312:	46c0      	nop			@ (mov r8, r8)
 800e314:	e000      	b.n	800e318 <HIDS_Upkeep+0xe8>
      break;
 800e316:	46c0      	nop			@ (mov r8, r8)
  }

  return HIDSState;
 800e318:	4b02      	ldr	r3, [pc, #8]	@ (800e324 <HIDS_Upkeep+0xf4>)
 800e31a:	781b      	ldrb	r3, [r3, #0]
}
 800e31c:	0018      	movs	r0, r3
 800e31e:	46bd      	mov	sp, r7
 800e320:	bdb0      	pop	{r4, r5, r7, pc}
 800e322:	46c0      	nop			@ (mov r8, r8)
 800e324:	20002590 	.word	0x20002590
 800e328:	08024a68 	.word	0x08024a68
 800e32c:	08024558 	.word	0x08024558
 800e330:	0802458c 	.word	0x0802458c
 800e334:	20002570 	.word	0x20002570
 800e338:	2000256c 	.word	0x2000256c
 800e33c:	08024590 	.word	0x08024590
 800e340:	00002710 	.word	0x00002710
 800e344:	2000258c 	.word	0x2000258c

0800e348 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 800e348:	480d      	ldr	r0, [pc, #52]	@ (800e380 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 800e34a:	4685      	mov	sp, r0
   
/* Call the clock system initialization function.*/
  bl  SystemInit
 800e34c:	f7ff f836 	bl	800d3bc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800e350:	480c      	ldr	r0, [pc, #48]	@ (800e384 <LoopForever+0x6>)
  ldr r1, =_edata
 800e352:	490d      	ldr	r1, [pc, #52]	@ (800e388 <LoopForever+0xa>)
  ldr r2, =_sidata
 800e354:	4a0d      	ldr	r2, [pc, #52]	@ (800e38c <LoopForever+0xe>)
  movs r3, #0
 800e356:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800e358:	e002      	b.n	800e360 <LoopCopyDataInit>

0800e35a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800e35a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800e35c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800e35e:	3304      	adds	r3, #4

0800e360 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800e360:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800e362:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800e364:	d3f9      	bcc.n	800e35a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800e366:	4a0a      	ldr	r2, [pc, #40]	@ (800e390 <LoopForever+0x12>)
  ldr r4, =_ebss
 800e368:	4c0a      	ldr	r4, [pc, #40]	@ (800e394 <LoopForever+0x16>)
  movs r3, #0
 800e36a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800e36c:	e001      	b.n	800e372 <LoopFillZerobss>

0800e36e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800e36e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800e370:	3204      	adds	r2, #4

0800e372 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800e372:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800e374:	d3fb      	bcc.n	800e36e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800e376:	f011 fb63 	bl	801fa40 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800e37a:	f7f9 fba1 	bl	8007ac0 <main>

0800e37e <LoopForever>:

LoopForever:
    b LoopForever
 800e37e:	e7fe      	b.n	800e37e <LoopForever>
   ldr   r0, =_estack
 800e380:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 800e384:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800e388:	20000424 	.word	0x20000424
  ldr r2, =_sidata
 800e38c:	08025408 	.word	0x08025408
  ldr r2, =_sbss
 800e390:	20000424 	.word	0x20000424
  ldr r4, =_ebss
 800e394:	20003998 	.word	0x20003998

0800e398 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800e398:	e7fe      	b.n	800e398 <ADC1_COMP_IRQHandler>
	...

0800e39c <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800e39c:	b580      	push	{r7, lr}
 800e39e:	b082      	sub	sp, #8
 800e3a0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800e3a2:	1dfb      	adds	r3, r7, #7
 800e3a4:	2200      	movs	r2, #0
 800e3a6:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 800e3a8:	4b0b      	ldr	r3, [pc, #44]	@ (800e3d8 <HAL_Init+0x3c>)
 800e3aa:	681a      	ldr	r2, [r3, #0]
 800e3ac:	4b0a      	ldr	r3, [pc, #40]	@ (800e3d8 <HAL_Init+0x3c>)
 800e3ae:	2140      	movs	r1, #64	@ 0x40
 800e3b0:	430a      	orrs	r2, r1
 800e3b2:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800e3b4:	2003      	movs	r0, #3
 800e3b6:	f000 f811 	bl	800e3dc <HAL_InitTick>
 800e3ba:	1e03      	subs	r3, r0, #0
 800e3bc:	d003      	beq.n	800e3c6 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 800e3be:	1dfb      	adds	r3, r7, #7
 800e3c0:	2201      	movs	r2, #1
 800e3c2:	701a      	strb	r2, [r3, #0]
 800e3c4:	e001      	b.n	800e3ca <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800e3c6:	f7fe fead 	bl	800d124 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800e3ca:	1dfb      	adds	r3, r7, #7
 800e3cc:	781b      	ldrb	r3, [r3, #0]
}
 800e3ce:	0018      	movs	r0, r3
 800e3d0:	46bd      	mov	sp, r7
 800e3d2:	b002      	add	sp, #8
 800e3d4:	bd80      	pop	{r7, pc}
 800e3d6:	46c0      	nop			@ (mov r8, r8)
 800e3d8:	40022000 	.word	0x40022000

0800e3dc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800e3dc:	b590      	push	{r4, r7, lr}
 800e3de:	b083      	sub	sp, #12
 800e3e0:	af00      	add	r7, sp, #0
 800e3e2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800e3e4:	4b14      	ldr	r3, [pc, #80]	@ (800e438 <HAL_InitTick+0x5c>)
 800e3e6:	681c      	ldr	r4, [r3, #0]
 800e3e8:	4b14      	ldr	r3, [pc, #80]	@ (800e43c <HAL_InitTick+0x60>)
 800e3ea:	781b      	ldrb	r3, [r3, #0]
 800e3ec:	0019      	movs	r1, r3
 800e3ee:	23fa      	movs	r3, #250	@ 0xfa
 800e3f0:	0098      	lsls	r0, r3, #2
 800e3f2:	f7f1 fed7 	bl	80001a4 <__udivsi3>
 800e3f6:	0003      	movs	r3, r0
 800e3f8:	0019      	movs	r1, r3
 800e3fa:	0020      	movs	r0, r4
 800e3fc:	f7f1 fed2 	bl	80001a4 <__udivsi3>
 800e400:	0003      	movs	r3, r0
 800e402:	0018      	movs	r0, r3
 800e404:	f000 fcfd 	bl	800ee02 <HAL_SYSTICK_Config>
 800e408:	1e03      	subs	r3, r0, #0
 800e40a:	d001      	beq.n	800e410 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 800e40c:	2301      	movs	r3, #1
 800e40e:	e00f      	b.n	800e430 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800e410:	687b      	ldr	r3, [r7, #4]
 800e412:	2b03      	cmp	r3, #3
 800e414:	d80b      	bhi.n	800e42e <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800e416:	6879      	ldr	r1, [r7, #4]
 800e418:	2301      	movs	r3, #1
 800e41a:	425b      	negs	r3, r3
 800e41c:	2200      	movs	r2, #0
 800e41e:	0018      	movs	r0, r3
 800e420:	f000 fcc6 	bl	800edb0 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800e424:	4b06      	ldr	r3, [pc, #24]	@ (800e440 <HAL_InitTick+0x64>)
 800e426:	687a      	ldr	r2, [r7, #4]
 800e428:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800e42a:	2300      	movs	r3, #0
 800e42c:	e000      	b.n	800e430 <HAL_InitTick+0x54>
    return HAL_ERROR;
 800e42e:	2301      	movs	r3, #1
}
 800e430:	0018      	movs	r0, r3
 800e432:	46bd      	mov	sp, r7
 800e434:	b003      	add	sp, #12
 800e436:	bd90      	pop	{r4, r7, pc}
 800e438:	200000cc 	.word	0x200000cc
 800e43c:	200000e0 	.word	0x200000e0
 800e440:	200000dc 	.word	0x200000dc

0800e444 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800e444:	b580      	push	{r7, lr}
 800e446:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800e448:	4b05      	ldr	r3, [pc, #20]	@ (800e460 <HAL_IncTick+0x1c>)
 800e44a:	781b      	ldrb	r3, [r3, #0]
 800e44c:	001a      	movs	r2, r3
 800e44e:	4b05      	ldr	r3, [pc, #20]	@ (800e464 <HAL_IncTick+0x20>)
 800e450:	681b      	ldr	r3, [r3, #0]
 800e452:	18d2      	adds	r2, r2, r3
 800e454:	4b03      	ldr	r3, [pc, #12]	@ (800e464 <HAL_IncTick+0x20>)
 800e456:	601a      	str	r2, [r3, #0]
}
 800e458:	46c0      	nop			@ (mov r8, r8)
 800e45a:	46bd      	mov	sp, r7
 800e45c:	bd80      	pop	{r7, pc}
 800e45e:	46c0      	nop			@ (mov r8, r8)
 800e460:	200000e0 	.word	0x200000e0
 800e464:	20002594 	.word	0x20002594

0800e468 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800e468:	b580      	push	{r7, lr}
 800e46a:	af00      	add	r7, sp, #0
  return uwTick;
 800e46c:	4b02      	ldr	r3, [pc, #8]	@ (800e478 <HAL_GetTick+0x10>)
 800e46e:	681b      	ldr	r3, [r3, #0]
}
 800e470:	0018      	movs	r0, r3
 800e472:	46bd      	mov	sp, r7
 800e474:	bd80      	pop	{r7, pc}
 800e476:	46c0      	nop			@ (mov r8, r8)
 800e478:	20002594 	.word	0x20002594

0800e47c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800e47c:	b580      	push	{r7, lr}
 800e47e:	b084      	sub	sp, #16
 800e480:	af00      	add	r7, sp, #0
 800e482:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800e484:	f7ff fff0 	bl	800e468 <HAL_GetTick>
 800e488:	0003      	movs	r3, r0
 800e48a:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 800e48c:	687b      	ldr	r3, [r7, #4]
 800e48e:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800e490:	68fb      	ldr	r3, [r7, #12]
 800e492:	3301      	adds	r3, #1
 800e494:	d005      	beq.n	800e4a2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800e496:	4b0a      	ldr	r3, [pc, #40]	@ (800e4c0 <HAL_Delay+0x44>)
 800e498:	781b      	ldrb	r3, [r3, #0]
 800e49a:	001a      	movs	r2, r3
 800e49c:	68fb      	ldr	r3, [r7, #12]
 800e49e:	189b      	adds	r3, r3, r2
 800e4a0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800e4a2:	46c0      	nop			@ (mov r8, r8)
 800e4a4:	f7ff ffe0 	bl	800e468 <HAL_GetTick>
 800e4a8:	0002      	movs	r2, r0
 800e4aa:	68bb      	ldr	r3, [r7, #8]
 800e4ac:	1ad3      	subs	r3, r2, r3
 800e4ae:	68fa      	ldr	r2, [r7, #12]
 800e4b0:	429a      	cmp	r2, r3
 800e4b2:	d8f7      	bhi.n	800e4a4 <HAL_Delay+0x28>
  {
  }
}
 800e4b4:	46c0      	nop			@ (mov r8, r8)
 800e4b6:	46c0      	nop			@ (mov r8, r8)
 800e4b8:	46bd      	mov	sp, r7
 800e4ba:	b004      	add	sp, #16
 800e4bc:	bd80      	pop	{r7, pc}
 800e4be:	46c0      	nop			@ (mov r8, r8)
 800e4c0:	200000e0 	.word	0x200000e0

0800e4c4 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 800e4c4:	b580      	push	{r7, lr}
 800e4c6:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 800e4c8:	4b04      	ldr	r3, [pc, #16]	@ (800e4dc <HAL_SuspendTick+0x18>)
 800e4ca:	681a      	ldr	r2, [r3, #0]
 800e4cc:	4b03      	ldr	r3, [pc, #12]	@ (800e4dc <HAL_SuspendTick+0x18>)
 800e4ce:	2102      	movs	r1, #2
 800e4d0:	438a      	bics	r2, r1
 800e4d2:	601a      	str	r2, [r3, #0]
}
 800e4d4:	46c0      	nop			@ (mov r8, r8)
 800e4d6:	46bd      	mov	sp, r7
 800e4d8:	bd80      	pop	{r7, pc}
 800e4da:	46c0      	nop			@ (mov r8, r8)
 800e4dc:	e000e010 	.word	0xe000e010

0800e4e0 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 800e4e0:	b580      	push	{r7, lr}
 800e4e2:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SysTick->CTRL  |= SysTick_CTRL_TICKINT_Msk;
 800e4e4:	4b04      	ldr	r3, [pc, #16]	@ (800e4f8 <HAL_ResumeTick+0x18>)
 800e4e6:	681a      	ldr	r2, [r3, #0]
 800e4e8:	4b03      	ldr	r3, [pc, #12]	@ (800e4f8 <HAL_ResumeTick+0x18>)
 800e4ea:	2102      	movs	r1, #2
 800e4ec:	430a      	orrs	r2, r1
 800e4ee:	601a      	str	r2, [r3, #0]
}
 800e4f0:	46c0      	nop			@ (mov r8, r8)
 800e4f2:	46bd      	mov	sp, r7
 800e4f4:	bd80      	pop	{r7, pc}
 800e4f6:	46c0      	nop			@ (mov r8, r8)
 800e4f8:	e000e010 	.word	0xe000e010

0800e4fc <HAL_GetUIDw0>:
/**
  * @brief  Returns the first word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw0(void)
{
 800e4fc:	b580      	push	{r7, lr}
 800e4fe:	af00      	add	r7, sp, #0
  return(READ_REG(*((uint32_t *)UID_BASE)));
 800e500:	4b02      	ldr	r3, [pc, #8]	@ (800e50c <HAL_GetUIDw0+0x10>)
 800e502:	681b      	ldr	r3, [r3, #0]
}
 800e504:	0018      	movs	r0, r3
 800e506:	46bd      	mov	sp, r7
 800e508:	bd80      	pop	{r7, pc}
 800e50a:	46c0      	nop			@ (mov r8, r8)
 800e50c:	1ff80050 	.word	0x1ff80050

0800e510 <HAL_GetUIDw1>:
/**
  * @brief  Returns the second word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw1(void)
{
 800e510:	b580      	push	{r7, lr}
 800e512:	af00      	add	r7, sp, #0
  return(READ_REG(*((uint32_t *)(UID_BASE + 0x04U))));
 800e514:	4b02      	ldr	r3, [pc, #8]	@ (800e520 <HAL_GetUIDw1+0x10>)
 800e516:	681b      	ldr	r3, [r3, #0]
}
 800e518:	0018      	movs	r0, r3
 800e51a:	46bd      	mov	sp, r7
 800e51c:	bd80      	pop	{r7, pc}
 800e51e:	46c0      	nop			@ (mov r8, r8)
 800e520:	1ff80054 	.word	0x1ff80054

0800e524 <HAL_GetUIDw2>:
/**
  * @brief  Returns the third word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw2(void)
{
 800e524:	b580      	push	{r7, lr}
 800e526:	af00      	add	r7, sp, #0
  return(READ_REG(*((uint32_t *)(UID_BASE + 0x14U))));
 800e528:	4b02      	ldr	r3, [pc, #8]	@ (800e534 <HAL_GetUIDw2+0x10>)
 800e52a:	681b      	ldr	r3, [r3, #0]
}
 800e52c:	0018      	movs	r0, r3
 800e52e:	46bd      	mov	sp, r7
 800e530:	bd80      	pop	{r7, pc}
 800e532:	46c0      	nop			@ (mov r8, r8)
 800e534:	1ff80064 	.word	0x1ff80064

0800e538 <HAL_ADC_Init>:
  *         function "HAL_ADCEx_EnableVREFINTTempSensor()" must be called similarilly.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800e538:	b580      	push	{r7, lr}
 800e53a:	b082      	sub	sp, #8
 800e53c:	af00      	add	r7, sp, #0
 800e53e:	6078      	str	r0, [r7, #4]

  /* Check ADC handle */
  if (hadc == NULL)
 800e540:	687b      	ldr	r3, [r7, #4]
 800e542:	2b00      	cmp	r3, #0
 800e544:	d101      	bne.n	800e54a <HAL_ADC_Init+0x12>
  {
    return HAL_ERROR;
 800e546:	2301      	movs	r3, #1
 800e548:	e159      	b.n	800e7fe <HAL_ADC_Init+0x2c6>
  /* Refer to header of this file for more details on clock enabling procedure*/

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800e54a:	687b      	ldr	r3, [r7, #4]
 800e54c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e54e:	2b00      	cmp	r3, #0
 800e550:	d10a      	bne.n	800e568 <HAL_ADC_Init+0x30>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800e552:	687b      	ldr	r3, [r7, #4]
 800e554:	2200      	movs	r2, #0
 800e556:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800e558:	687b      	ldr	r3, [r7, #4]
 800e55a:	2250      	movs	r2, #80	@ 0x50
 800e55c:	2100      	movs	r1, #0
 800e55e:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800e560:	687b      	ldr	r3, [r7, #4]
 800e562:	0018      	movs	r0, r3
 800e564:	f7f8 fd86 	bl	8007074 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 800e568:	687b      	ldr	r3, [r7, #4]
 800e56a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e56c:	2210      	movs	r2, #16
 800e56e:	4013      	ands	r3, r2
 800e570:	2b10      	cmp	r3, #16
 800e572:	d005      	beq.n	800e580 <HAL_ADC_Init+0x48>
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET))
 800e574:	687b      	ldr	r3, [r7, #4]
 800e576:	681b      	ldr	r3, [r3, #0]
 800e578:	689b      	ldr	r3, [r3, #8]
 800e57a:	2204      	movs	r2, #4
 800e57c:	4013      	ands	r3, r2
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 800e57e:	d00b      	beq.n	800e598 <HAL_ADC_Init+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800e580:	687b      	ldr	r3, [r7, #4]
 800e582:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e584:	2210      	movs	r2, #16
 800e586:	431a      	orrs	r2, r3
 800e588:	687b      	ldr	r3, [r7, #4]
 800e58a:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800e58c:	687b      	ldr	r3, [r7, #4]
 800e58e:	2250      	movs	r2, #80	@ 0x50
 800e590:	2100      	movs	r1, #0
 800e592:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 800e594:	2301      	movs	r3, #1
 800e596:	e132      	b.n	800e7fe <HAL_ADC_Init+0x2c6>
  }

  /* Set ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 800e598:	687b      	ldr	r3, [r7, #4]
 800e59a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e59c:	4a9a      	ldr	r2, [pc, #616]	@ (800e808 <HAL_ADC_Init+0x2d0>)
 800e59e:	4013      	ands	r3, r2
 800e5a0:	2202      	movs	r2, #2
 800e5a2:	431a      	orrs	r2, r3
 800e5a4:	687b      	ldr	r3, [r7, #4]
 800e5a6:	655a      	str	r2, [r3, #84]	@ 0x54
  /* Parameters update conditioned to ADC state:                            */
  /* Parameters that can be updated only when ADC is disabled:              */
  /*  - ADC clock mode                                                      */
  /*  - ADC clock prescaler                                                 */
  /*  - ADC Resolution                                                      */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800e5a8:	687b      	ldr	r3, [r7, #4]
 800e5aa:	681b      	ldr	r3, [r3, #0]
 800e5ac:	689b      	ldr	r3, [r3, #8]
 800e5ae:	2203      	movs	r2, #3
 800e5b0:	4013      	ands	r3, r2
 800e5b2:	2b01      	cmp	r3, #1
 800e5b4:	d108      	bne.n	800e5c8 <HAL_ADC_Init+0x90>
 800e5b6:	687b      	ldr	r3, [r7, #4]
 800e5b8:	681b      	ldr	r3, [r3, #0]
 800e5ba:	681b      	ldr	r3, [r3, #0]
 800e5bc:	2201      	movs	r2, #1
 800e5be:	4013      	ands	r3, r2
 800e5c0:	2b01      	cmp	r3, #1
 800e5c2:	d101      	bne.n	800e5c8 <HAL_ADC_Init+0x90>
 800e5c4:	2301      	movs	r3, #1
 800e5c6:	e000      	b.n	800e5ca <HAL_ADC_Init+0x92>
 800e5c8:	2300      	movs	r3, #0
 800e5ca:	2b00      	cmp	r3, #0
 800e5cc:	d149      	bne.n	800e662 <HAL_ADC_Init+0x12a>
    /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
    /*     (set into HAL_ADC_ConfigChannel() )                              */

    /* Configuration of ADC clock: clock source PCLK or asynchronous with
    selectable prescaler */
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 800e5ce:	687b      	ldr	r3, [r7, #4]
 800e5d0:	685a      	ldr	r2, [r3, #4]
 800e5d2:	23c0      	movs	r3, #192	@ 0xc0
 800e5d4:	061b      	lsls	r3, r3, #24
 800e5d6:	429a      	cmp	r2, r3
 800e5d8:	d00b      	beq.n	800e5f2 <HAL_ADC_Init+0xba>
 800e5da:	687b      	ldr	r3, [r7, #4]
 800e5dc:	685a      	ldr	r2, [r3, #4]
 800e5de:	2380      	movs	r3, #128	@ 0x80
 800e5e0:	05db      	lsls	r3, r3, #23
 800e5e2:	429a      	cmp	r2, r3
 800e5e4:	d005      	beq.n	800e5f2 <HAL_ADC_Init+0xba>
 800e5e6:	687b      	ldr	r3, [r7, #4]
 800e5e8:	685a      	ldr	r2, [r3, #4]
 800e5ea:	2380      	movs	r3, #128	@ 0x80
 800e5ec:	061b      	lsls	r3, r3, #24
 800e5ee:	429a      	cmp	r2, r3
 800e5f0:	d111      	bne.n	800e616 <HAL_ADC_Init+0xde>
 800e5f2:	687b      	ldr	r3, [r7, #4]
 800e5f4:	681b      	ldr	r3, [r3, #0]
 800e5f6:	691a      	ldr	r2, [r3, #16]
 800e5f8:	687b      	ldr	r3, [r7, #4]
 800e5fa:	681b      	ldr	r3, [r3, #0]
 800e5fc:	0092      	lsls	r2, r2, #2
 800e5fe:	0892      	lsrs	r2, r2, #2
 800e600:	611a      	str	r2, [r3, #16]
 800e602:	687b      	ldr	r3, [r7, #4]
 800e604:	681b      	ldr	r3, [r3, #0]
 800e606:	6919      	ldr	r1, [r3, #16]
 800e608:	687b      	ldr	r3, [r7, #4]
 800e60a:	685a      	ldr	r2, [r3, #4]
 800e60c:	687b      	ldr	r3, [r7, #4]
 800e60e:	681b      	ldr	r3, [r3, #0]
 800e610:	430a      	orrs	r2, r1
 800e612:	611a      	str	r2, [r3, #16]
 800e614:	e014      	b.n	800e640 <HAL_ADC_Init+0x108>
 800e616:	687b      	ldr	r3, [r7, #4]
 800e618:	681b      	ldr	r3, [r3, #0]
 800e61a:	691a      	ldr	r2, [r3, #16]
 800e61c:	687b      	ldr	r3, [r7, #4]
 800e61e:	681b      	ldr	r3, [r3, #0]
 800e620:	0092      	lsls	r2, r2, #2
 800e622:	0892      	lsrs	r2, r2, #2
 800e624:	611a      	str	r2, [r3, #16]
 800e626:	4b79      	ldr	r3, [pc, #484]	@ (800e80c <HAL_ADC_Init+0x2d4>)
 800e628:	681a      	ldr	r2, [r3, #0]
 800e62a:	4b78      	ldr	r3, [pc, #480]	@ (800e80c <HAL_ADC_Init+0x2d4>)
 800e62c:	4978      	ldr	r1, [pc, #480]	@ (800e810 <HAL_ADC_Init+0x2d8>)
 800e62e:	400a      	ands	r2, r1
 800e630:	601a      	str	r2, [r3, #0]
 800e632:	4b76      	ldr	r3, [pc, #472]	@ (800e80c <HAL_ADC_Init+0x2d4>)
 800e634:	6819      	ldr	r1, [r3, #0]
 800e636:	687b      	ldr	r3, [r7, #4]
 800e638:	685a      	ldr	r2, [r3, #4]
 800e63a:	4b74      	ldr	r3, [pc, #464]	@ (800e80c <HAL_ADC_Init+0x2d4>)
 800e63c:	430a      	orrs	r2, r1
 800e63e:	601a      	str	r2, [r3, #0]

    /* Configuration of ADC:                                                */
    /*  - Resolution                                                        */
    hadc->Instance->CFGR1 &= ~(ADC_CFGR1_RES);
 800e640:	687b      	ldr	r3, [r7, #4]
 800e642:	681b      	ldr	r3, [r3, #0]
 800e644:	68da      	ldr	r2, [r3, #12]
 800e646:	687b      	ldr	r3, [r7, #4]
 800e648:	681b      	ldr	r3, [r3, #0]
 800e64a:	2118      	movs	r1, #24
 800e64c:	438a      	bics	r2, r1
 800e64e:	60da      	str	r2, [r3, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;
 800e650:	687b      	ldr	r3, [r7, #4]
 800e652:	681b      	ldr	r3, [r3, #0]
 800e654:	68d9      	ldr	r1, [r3, #12]
 800e656:	687b      	ldr	r3, [r7, #4]
 800e658:	689a      	ldr	r2, [r3, #8]
 800e65a:	687b      	ldr	r3, [r7, #4]
 800e65c:	681b      	ldr	r3, [r3, #0]
 800e65e:	430a      	orrs	r2, r1
 800e660:	60da      	str	r2, [r3, #12]
  }

  /* Set the Low Frequency mode */
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 800e662:	4b6a      	ldr	r3, [pc, #424]	@ (800e80c <HAL_ADC_Init+0x2d4>)
 800e664:	681a      	ldr	r2, [r3, #0]
 800e666:	4b69      	ldr	r3, [pc, #420]	@ (800e80c <HAL_ADC_Init+0x2d4>)
 800e668:	496a      	ldr	r1, [pc, #424]	@ (800e814 <HAL_ADC_Init+0x2dc>)
 800e66a:	400a      	ands	r2, r1
 800e66c:	601a      	str	r2, [r3, #0]
  ADC->CCR |= __HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);
 800e66e:	4b67      	ldr	r3, [pc, #412]	@ (800e80c <HAL_ADC_Init+0x2d4>)
 800e670:	6819      	ldr	r1, [r3, #0]
 800e672:	687b      	ldr	r3, [r7, #4]
 800e674:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e676:	065a      	lsls	r2, r3, #25
 800e678:	4b64      	ldr	r3, [pc, #400]	@ (800e80c <HAL_ADC_Init+0x2d4>)
 800e67a:	430a      	orrs	r2, r1
 800e67c:	601a      	str	r2, [r3, #0]

  /* Enable voltage regulator (if disabled at this step) */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 800e67e:	687b      	ldr	r3, [r7, #4]
 800e680:	681b      	ldr	r3, [r3, #0]
 800e682:	689a      	ldr	r2, [r3, #8]
 800e684:	2380      	movs	r3, #128	@ 0x80
 800e686:	055b      	lsls	r3, r3, #21
 800e688:	4013      	ands	r3, r2
 800e68a:	d108      	bne.n	800e69e <HAL_ADC_Init+0x166>
  {
    /* Set ADVREGEN bit */
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 800e68c:	687b      	ldr	r3, [r7, #4]
 800e68e:	681b      	ldr	r3, [r3, #0]
 800e690:	689a      	ldr	r2, [r3, #8]
 800e692:	687b      	ldr	r3, [r7, #4]
 800e694:	681b      	ldr	r3, [r3, #0]
 800e696:	2180      	movs	r1, #128	@ 0x80
 800e698:	0549      	lsls	r1, r1, #21
 800e69a:	430a      	orrs	r2, r1
 800e69c:	609a      	str	r2, [r3, #8]
  /*  - Continuous conversion mode                                            */
  /*  - DMA continuous request                                                */
  /*  - Overrun                                                               */
  /*  - AutoDelay feature                                                     */
  /*  - Discontinuous mode                                                    */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 800e69e:	687b      	ldr	r3, [r7, #4]
 800e6a0:	681b      	ldr	r3, [r3, #0]
 800e6a2:	68da      	ldr	r2, [r3, #12]
 800e6a4:	687b      	ldr	r3, [r7, #4]
 800e6a6:	681b      	ldr	r3, [r3, #0]
 800e6a8:	495b      	ldr	r1, [pc, #364]	@ (800e818 <HAL_ADC_Init+0x2e0>)
 800e6aa:	400a      	ands	r2, r1
 800e6ac:	60da      	str	r2, [r3, #12]
                             ADC_CFGR1_OVRMOD  |
                             ADC_CFGR1_AUTDLY  |
                             ADC_CFGR1_AUTOFF  |
                             ADC_CFGR1_DISCEN);

  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 800e6ae:	687b      	ldr	r3, [r7, #4]
 800e6b0:	681b      	ldr	r3, [r3, #0]
 800e6b2:	68d9      	ldr	r1, [r3, #12]
 800e6b4:	687b      	ldr	r3, [r7, #4]
 800e6b6:	68da      	ldr	r2, [r3, #12]
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 800e6b8:	687b      	ldr	r3, [r7, #4]
 800e6ba:	691b      	ldr	r3, [r3, #16]
 800e6bc:	2b02      	cmp	r3, #2
 800e6be:	d101      	bne.n	800e6c4 <HAL_ADC_Init+0x18c>
 800e6c0:	2304      	movs	r3, #4
 800e6c2:	e000      	b.n	800e6c6 <HAL_ADC_Init+0x18e>
 800e6c4:	2300      	movs	r3, #0
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 800e6c6:	431a      	orrs	r2, r3
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 800e6c8:	687b      	ldr	r3, [r7, #4]
 800e6ca:	2020      	movs	r0, #32
 800e6cc:	5c1b      	ldrb	r3, [r3, r0]
 800e6ce:	035b      	lsls	r3, r3, #13
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 800e6d0:	431a      	orrs	r2, r3
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 800e6d2:	687b      	ldr	r3, [r7, #4]
 800e6d4:	202c      	movs	r0, #44	@ 0x2c
 800e6d6:	5c1b      	ldrb	r3, [r3, r0]
 800e6d8:	005b      	lsls	r3, r3, #1
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 800e6da:	431a      	orrs	r2, r3
                            hadc->Init.Overrun                               |
 800e6dc:	687b      	ldr	r3, [r7, #4]
 800e6de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 800e6e0:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 800e6e2:	687b      	ldr	r3, [r7, #4]
 800e6e4:	699b      	ldr	r3, [r3, #24]
 800e6e6:	039b      	lsls	r3, r3, #14
                            hadc->Init.Overrun                               |
 800e6e8:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 800e6ea:	687b      	ldr	r3, [r7, #4]
 800e6ec:	69db      	ldr	r3, [r3, #28]
 800e6ee:	03db      	lsls	r3, r3, #15
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 800e6f0:	431a      	orrs	r2, r3
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 800e6f2:	687b      	ldr	r3, [r7, #4]
 800e6f4:	681b      	ldr	r3, [r3, #0]
 800e6f6:	430a      	orrs	r2, r1
 800e6f8:	60da      	str	r2, [r3, #12]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800e6fa:	687b      	ldr	r3, [r7, #4]
 800e6fc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800e6fe:	23c2      	movs	r3, #194	@ 0xc2
 800e700:	33ff      	adds	r3, #255	@ 0xff
 800e702:	429a      	cmp	r2, r3
 800e704:	d00b      	beq.n	800e71e <HAL_ADC_Init+0x1e6>
  {
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 800e706:	687b      	ldr	r3, [r7, #4]
 800e708:	681b      	ldr	r3, [r3, #0]
 800e70a:	68d9      	ldr	r1, [r3, #12]
 800e70c:	687b      	ldr	r3, [r7, #4]
 800e70e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
                             hadc->Init.ExternalTrigConvEdge;
 800e710:	687b      	ldr	r3, [r7, #4]
 800e712:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 800e714:	431a      	orrs	r2, r3
 800e716:	687b      	ldr	r3, [r7, #4]
 800e718:	681b      	ldr	r3, [r3, #0]
 800e71a:	430a      	orrs	r2, r1
 800e71c:	60da      	str	r2, [r3, #12]
  }

  /* Enable discontinuous mode only if continuous mode is disabled */
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800e71e:	687b      	ldr	r3, [r7, #4]
 800e720:	2221      	movs	r2, #33	@ 0x21
 800e722:	5c9b      	ldrb	r3, [r3, r2]
 800e724:	2b01      	cmp	r3, #1
 800e726:	d11a      	bne.n	800e75e <HAL_ADC_Init+0x226>
  {
    if (hadc->Init.ContinuousConvMode == DISABLE)
 800e728:	687b      	ldr	r3, [r7, #4]
 800e72a:	2220      	movs	r2, #32
 800e72c:	5c9b      	ldrb	r3, [r3, r2]
 800e72e:	2b00      	cmp	r3, #0
 800e730:	d109      	bne.n	800e746 <HAL_ADC_Init+0x20e>
    {
      /* Enable the selected ADC group regular discontinuous mode */
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 800e732:	687b      	ldr	r3, [r7, #4]
 800e734:	681b      	ldr	r3, [r3, #0]
 800e736:	68da      	ldr	r2, [r3, #12]
 800e738:	687b      	ldr	r3, [r7, #4]
 800e73a:	681b      	ldr	r3, [r3, #0]
 800e73c:	2180      	movs	r1, #128	@ 0x80
 800e73e:	0249      	lsls	r1, r1, #9
 800e740:	430a      	orrs	r2, r1
 800e742:	60da      	str	r2, [r3, #12]
 800e744:	e00b      	b.n	800e75e <HAL_ADC_Init+0x226>
      /* ADC regular group discontinuous was intended to be enabled,        */
      /* but ADC regular group modes continuous and sequencer discontinuous */
      /* cannot be enabled simultaneously.                                  */

      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800e746:	687b      	ldr	r3, [r7, #4]
 800e748:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e74a:	2220      	movs	r2, #32
 800e74c:	431a      	orrs	r2, r3
 800e74e:	687b      	ldr	r3, [r7, #4]
 800e750:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800e752:	687b      	ldr	r3, [r7, #4]
 800e754:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e756:	2201      	movs	r2, #1
 800e758:	431a      	orrs	r2, r3
 800e75a:	687b      	ldr	r3, [r7, #4]
 800e75c:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  if (hadc->Init.OversamplingMode == ENABLE)
 800e75e:	687b      	ldr	r3, [r7, #4]
 800e760:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e762:	2b01      	cmp	r3, #1
 800e764:	d11f      	bne.n	800e7a6 <HAL_ADC_Init+0x26e>
    /* Configuration of Oversampler:                                          */
    /*  - Oversampling Ratio                                                  */
    /*  - Right bit shift                                                     */
    /*  - Triggered mode                                                      */

    hadc->Instance->CFGR2 &= ~(ADC_CFGR2_OVSR |
 800e766:	687b      	ldr	r3, [r7, #4]
 800e768:	681b      	ldr	r3, [r3, #0]
 800e76a:	691a      	ldr	r2, [r3, #16]
 800e76c:	687b      	ldr	r3, [r7, #4]
 800e76e:	681b      	ldr	r3, [r3, #0]
 800e770:	492a      	ldr	r1, [pc, #168]	@ (800e81c <HAL_ADC_Init+0x2e4>)
 800e772:	400a      	ands	r2, r1
 800e774:	611a      	str	r2, [r3, #16]
                               ADC_CFGR2_OVSS |
                               ADC_CFGR2_TOVS);

    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 800e776:	687b      	ldr	r3, [r7, #4]
 800e778:	681b      	ldr	r3, [r3, #0]
 800e77a:	6919      	ldr	r1, [r3, #16]
 800e77c:	687b      	ldr	r3, [r7, #4]
 800e77e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
                              hadc->Init.Oversample.RightBitShift             |
 800e780:	687b      	ldr	r3, [r7, #4]
 800e782:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 800e784:	431a      	orrs	r2, r3
                              hadc->Init.Oversample.TriggeredMode);
 800e786:	687b      	ldr	r3, [r7, #4]
 800e788:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                              hadc->Init.Oversample.RightBitShift             |
 800e78a:	431a      	orrs	r2, r3
    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 800e78c:	687b      	ldr	r3, [r7, #4]
 800e78e:	681b      	ldr	r3, [r3, #0]
 800e790:	430a      	orrs	r2, r1
 800e792:	611a      	str	r2, [r3, #16]

    /* Enable OverSampling mode */
    hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 800e794:	687b      	ldr	r3, [r7, #4]
 800e796:	681b      	ldr	r3, [r3, #0]
 800e798:	691a      	ldr	r2, [r3, #16]
 800e79a:	687b      	ldr	r3, [r7, #4]
 800e79c:	681b      	ldr	r3, [r3, #0]
 800e79e:	2101      	movs	r1, #1
 800e7a0:	430a      	orrs	r2, r1
 800e7a2:	611a      	str	r2, [r3, #16]
 800e7a4:	e00e      	b.n	800e7c4 <HAL_ADC_Init+0x28c>
  }
  else
  {
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 800e7a6:	687b      	ldr	r3, [r7, #4]
 800e7a8:	681b      	ldr	r3, [r3, #0]
 800e7aa:	691b      	ldr	r3, [r3, #16]
 800e7ac:	2201      	movs	r2, #1
 800e7ae:	4013      	ands	r3, r2
 800e7b0:	2b01      	cmp	r3, #1
 800e7b2:	d107      	bne.n	800e7c4 <HAL_ADC_Init+0x28c>
    {
      /* Disable OverSampling mode if needed */
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 800e7b4:	687b      	ldr	r3, [r7, #4]
 800e7b6:	681b      	ldr	r3, [r3, #0]
 800e7b8:	691a      	ldr	r2, [r3, #16]
 800e7ba:	687b      	ldr	r3, [r7, #4]
 800e7bc:	681b      	ldr	r3, [r3, #0]
 800e7be:	2101      	movs	r1, #1
 800e7c0:	438a      	bics	r2, r1
 800e7c2:	611a      	str	r2, [r3, #16]
    }
  }

  /* Clear the old sampling time */
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 800e7c4:	687b      	ldr	r3, [r7, #4]
 800e7c6:	681b      	ldr	r3, [r3, #0]
 800e7c8:	695a      	ldr	r2, [r3, #20]
 800e7ca:	687b      	ldr	r3, [r7, #4]
 800e7cc:	681b      	ldr	r3, [r3, #0]
 800e7ce:	2107      	movs	r1, #7
 800e7d0:	438a      	bics	r2, r1
 800e7d2:	615a      	str	r2, [r3, #20]

  /* Set the new sample time */
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 800e7d4:	687b      	ldr	r3, [r7, #4]
 800e7d6:	681b      	ldr	r3, [r3, #0]
 800e7d8:	6959      	ldr	r1, [r3, #20]
 800e7da:	687b      	ldr	r3, [r7, #4]
 800e7dc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800e7de:	687b      	ldr	r3, [r7, #4]
 800e7e0:	681b      	ldr	r3, [r3, #0]
 800e7e2:	430a      	orrs	r2, r1
 800e7e4:	615a      	str	r2, [r3, #20]

  /* Clear ADC error code */
  ADC_CLEAR_ERRORCODE(hadc);
 800e7e6:	687b      	ldr	r3, [r7, #4]
 800e7e8:	2200      	movs	r2, #0
 800e7ea:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set the ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 800e7ec:	687b      	ldr	r3, [r7, #4]
 800e7ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e7f0:	2203      	movs	r2, #3
 800e7f2:	4393      	bics	r3, r2
 800e7f4:	2201      	movs	r2, #1
 800e7f6:	431a      	orrs	r2, r3
 800e7f8:	687b      	ldr	r3, [r7, #4]
 800e7fa:	655a      	str	r2, [r3, #84]	@ 0x54
                    HAL_ADC_STATE_BUSY_INTERNAL,
                    HAL_ADC_STATE_READY);


  /* Return function status */
  return HAL_OK;
 800e7fc:	2300      	movs	r3, #0
}
 800e7fe:	0018      	movs	r0, r3
 800e800:	46bd      	mov	sp, r7
 800e802:	b002      	add	sp, #8
 800e804:	bd80      	pop	{r7, pc}
 800e806:	46c0      	nop			@ (mov r8, r8)
 800e808:	fffffefd 	.word	0xfffffefd
 800e80c:	40012708 	.word	0x40012708
 800e810:	ffc3ffff 	.word	0xffc3ffff
 800e814:	fdffffff 	.word	0xfdffffff
 800e818:	fffe0219 	.word	0xfffe0219
 800e81c:	fffffc03 	.word	0xfffffc03

0800e820 <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 800e820:	b590      	push	{r4, r7, lr}
 800e822:	b085      	sub	sp, #20
 800e824:	af00      	add	r7, sp, #0
 800e826:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800e828:	230f      	movs	r3, #15
 800e82a:	18fb      	adds	r3, r7, r3
 800e82c:	2200      	movs	r2, #0
 800e82e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800e830:	687b      	ldr	r3, [r7, #4]
 800e832:	681b      	ldr	r3, [r3, #0]
 800e834:	689b      	ldr	r3, [r3, #8]
 800e836:	2204      	movs	r2, #4
 800e838:	4013      	ands	r3, r2
 800e83a:	d138      	bne.n	800e8ae <HAL_ADC_Start+0x8e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800e83c:	687b      	ldr	r3, [r7, #4]
 800e83e:	2250      	movs	r2, #80	@ 0x50
 800e840:	5c9b      	ldrb	r3, [r3, r2]
 800e842:	2b01      	cmp	r3, #1
 800e844:	d101      	bne.n	800e84a <HAL_ADC_Start+0x2a>
 800e846:	2302      	movs	r3, #2
 800e848:	e038      	b.n	800e8bc <HAL_ADC_Start+0x9c>
 800e84a:	687b      	ldr	r3, [r7, #4]
 800e84c:	2250      	movs	r2, #80	@ 0x50
 800e84e:	2101      	movs	r1, #1
 800e850:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware.                                   */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 800e852:	687b      	ldr	r3, [r7, #4]
 800e854:	69db      	ldr	r3, [r3, #28]
 800e856:	2b01      	cmp	r3, #1
 800e858:	d007      	beq.n	800e86a <HAL_ADC_Start+0x4a>
    {
      tmp_hal_status = ADC_Enable(hadc);
 800e85a:	230f      	movs	r3, #15
 800e85c:	18fc      	adds	r4, r7, r3
 800e85e:	687b      	ldr	r3, [r7, #4]
 800e860:	0018      	movs	r0, r3
 800e862:	f000 f95f 	bl	800eb24 <ADC_Enable>
 800e866:	0003      	movs	r3, r0
 800e868:	7023      	strb	r3, [r4, #0]
    }

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800e86a:	230f      	movs	r3, #15
 800e86c:	18fb      	adds	r3, r7, r3
 800e86e:	781b      	ldrb	r3, [r3, #0]
 800e870:	2b00      	cmp	r3, #0
 800e872:	d120      	bne.n	800e8b6 <HAL_ADC_Start+0x96>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800e874:	687b      	ldr	r3, [r7, #4]
 800e876:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e878:	4a12      	ldr	r2, [pc, #72]	@ (800e8c4 <HAL_ADC_Start+0xa4>)
 800e87a:	4013      	ands	r3, r2
 800e87c:	2280      	movs	r2, #128	@ 0x80
 800e87e:	0052      	lsls	r2, r2, #1
 800e880:	431a      	orrs	r2, r3
 800e882:	687b      	ldr	r3, [r7, #4]
 800e884:	655a      	str	r2, [r3, #84]	@ 0x54
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800e886:	687b      	ldr	r3, [r7, #4]
 800e888:	2200      	movs	r2, #0
 800e88a:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800e88c:	687b      	ldr	r3, [r7, #4]
 800e88e:	2250      	movs	r2, #80	@ 0x50
 800e890:	2100      	movs	r1, #0
 800e892:	5499      	strb	r1, [r3, r2]

      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800e894:	687b      	ldr	r3, [r7, #4]
 800e896:	681b      	ldr	r3, [r3, #0]
 800e898:	221c      	movs	r2, #28
 800e89a:	601a      	str	r2, [r3, #0]

      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 800e89c:	687b      	ldr	r3, [r7, #4]
 800e89e:	681b      	ldr	r3, [r3, #0]
 800e8a0:	689a      	ldr	r2, [r3, #8]
 800e8a2:	687b      	ldr	r3, [r7, #4]
 800e8a4:	681b      	ldr	r3, [r3, #0]
 800e8a6:	2104      	movs	r1, #4
 800e8a8:	430a      	orrs	r2, r1
 800e8aa:	609a      	str	r2, [r3, #8]
 800e8ac:	e003      	b.n	800e8b6 <HAL_ADC_Start+0x96>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800e8ae:	230f      	movs	r3, #15
 800e8b0:	18fb      	adds	r3, r7, r3
 800e8b2:	2202      	movs	r2, #2
 800e8b4:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return tmp_hal_status;
 800e8b6:	230f      	movs	r3, #15
 800e8b8:	18fb      	adds	r3, r7, r3
 800e8ba:	781b      	ldrb	r3, [r3, #0]
}
 800e8bc:	0018      	movs	r0, r3
 800e8be:	46bd      	mov	sp, r7
 800e8c0:	b005      	add	sp, #20
 800e8c2:	bd90      	pop	{r4, r7, pc}
 800e8c4:	fffff0fe 	.word	0xfffff0fe

0800e8c8 <HAL_ADC_PollForConversion>:
  * @param  hadc ADC handle
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 800e8c8:	b580      	push	{r7, lr}
 800e8ca:	b084      	sub	sp, #16
 800e8cc:	af00      	add	r7, sp, #0
 800e8ce:	6078      	str	r0, [r7, #4]
 800e8d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800e8d2:	2300      	movs	r3, #0
 800e8d4:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_Flag_EOC   = 0x00;
 800e8d6:	2300      	movs	r3, #0
 800e8d8:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800e8da:	687b      	ldr	r3, [r7, #4]
 800e8dc:	695b      	ldr	r3, [r3, #20]
 800e8de:	2b08      	cmp	r3, #8
 800e8e0:	d102      	bne.n	800e8e8 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 800e8e2:	2308      	movs	r3, #8
 800e8e4:	60fb      	str	r3, [r7, #12]
 800e8e6:	e014      	b.n	800e912 <HAL_ADC_PollForConversion+0x4a>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 800e8e8:	687b      	ldr	r3, [r7, #4]
 800e8ea:	681b      	ldr	r3, [r3, #0]
 800e8ec:	68db      	ldr	r3, [r3, #12]
 800e8ee:	2201      	movs	r2, #1
 800e8f0:	4013      	ands	r3, r2
 800e8f2:	2b01      	cmp	r3, #1
 800e8f4:	d10b      	bne.n	800e90e <HAL_ADC_PollForConversion+0x46>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800e8f6:	687b      	ldr	r3, [r7, #4]
 800e8f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e8fa:	2220      	movs	r2, #32
 800e8fc:	431a      	orrs	r2, r3
 800e8fe:	687b      	ldr	r3, [r7, #4]
 800e900:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800e902:	687b      	ldr	r3, [r7, #4]
 800e904:	2250      	movs	r2, #80	@ 0x50
 800e906:	2100      	movs	r1, #0
 800e908:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 800e90a:	2301      	movs	r3, #1
 800e90c:	e072      	b.n	800e9f4 <HAL_ADC_PollForConversion+0x12c>
    }
    else
    {
      tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 800e90e:	230c      	movs	r3, #12
 800e910:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 800e912:	f7ff fda9 	bl	800e468 <HAL_GetTick>
 800e916:	0003      	movs	r3, r0
 800e918:	60bb      	str	r3, [r7, #8]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while (HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 800e91a:	e01f      	b.n	800e95c <HAL_ADC_PollForConversion+0x94>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 800e91c:	683b      	ldr	r3, [r7, #0]
 800e91e:	3301      	adds	r3, #1
 800e920:	d01c      	beq.n	800e95c <HAL_ADC_PollForConversion+0x94>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 800e922:	683b      	ldr	r3, [r7, #0]
 800e924:	2b00      	cmp	r3, #0
 800e926:	d007      	beq.n	800e938 <HAL_ADC_PollForConversion+0x70>
 800e928:	f7ff fd9e 	bl	800e468 <HAL_GetTick>
 800e92c:	0002      	movs	r2, r0
 800e92e:	68bb      	ldr	r3, [r7, #8]
 800e930:	1ad3      	subs	r3, r2, r3
 800e932:	683a      	ldr	r2, [r7, #0]
 800e934:	429a      	cmp	r2, r3
 800e936:	d211      	bcs.n	800e95c <HAL_ADC_PollForConversion+0x94>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 800e938:	687b      	ldr	r3, [r7, #4]
 800e93a:	681b      	ldr	r3, [r3, #0]
 800e93c:	681b      	ldr	r3, [r3, #0]
 800e93e:	68fa      	ldr	r2, [r7, #12]
 800e940:	4013      	ands	r3, r2
 800e942:	d10b      	bne.n	800e95c <HAL_ADC_PollForConversion+0x94>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800e944:	687b      	ldr	r3, [r7, #4]
 800e946:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e948:	2204      	movs	r2, #4
 800e94a:	431a      	orrs	r2, r3
 800e94c:	687b      	ldr	r3, [r7, #4]
 800e94e:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800e950:	687b      	ldr	r3, [r7, #4]
 800e952:	2250      	movs	r2, #80	@ 0x50
 800e954:	2100      	movs	r1, #0
 800e956:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800e958:	2303      	movs	r3, #3
 800e95a:	e04b      	b.n	800e9f4 <HAL_ADC_PollForConversion+0x12c>
  while (HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 800e95c:	687b      	ldr	r3, [r7, #4]
 800e95e:	681b      	ldr	r3, [r3, #0]
 800e960:	681b      	ldr	r3, [r3, #0]
 800e962:	68fa      	ldr	r2, [r7, #12]
 800e964:	4013      	ands	r3, r2
 800e966:	d0d9      	beq.n	800e91c <HAL_ADC_PollForConversion+0x54>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800e968:	687b      	ldr	r3, [r7, #4]
 800e96a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e96c:	2280      	movs	r2, #128	@ 0x80
 800e96e:	0092      	lsls	r2, r2, #2
 800e970:	431a      	orrs	r2, r3
 800e972:	687b      	ldr	r3, [r7, #4]
 800e974:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 800e976:	687b      	ldr	r3, [r7, #4]
 800e978:	681b      	ldr	r3, [r3, #0]
 800e97a:	68da      	ldr	r2, [r3, #12]
 800e97c:	23c0      	movs	r3, #192	@ 0xc0
 800e97e:	011b      	lsls	r3, r3, #4
 800e980:	4013      	ands	r3, r2
 800e982:	d12e      	bne.n	800e9e2 <HAL_ADC_PollForConversion+0x11a>
      (hadc->Init.ContinuousConvMode == DISABLE))
 800e984:	687b      	ldr	r3, [r7, #4]
 800e986:	2220      	movs	r2, #32
 800e988:	5c9b      	ldrb	r3, [r3, r2]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 800e98a:	2b00      	cmp	r3, #0
 800e98c:	d129      	bne.n	800e9e2 <HAL_ADC_PollForConversion+0x11a>
  {
    /* If End of Sequence is reached, disable interrupts */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800e98e:	687b      	ldr	r3, [r7, #4]
 800e990:	681b      	ldr	r3, [r3, #0]
 800e992:	681b      	ldr	r3, [r3, #0]
 800e994:	2208      	movs	r2, #8
 800e996:	4013      	ands	r3, r2
 800e998:	2b08      	cmp	r3, #8
 800e99a:	d122      	bne.n	800e9e2 <HAL_ADC_PollForConversion+0x11a>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800e99c:	687b      	ldr	r3, [r7, #4]
 800e99e:	681b      	ldr	r3, [r3, #0]
 800e9a0:	689b      	ldr	r3, [r3, #8]
 800e9a2:	2204      	movs	r2, #4
 800e9a4:	4013      	ands	r3, r2
 800e9a6:	d110      	bne.n	800e9ca <HAL_ADC_PollForConversion+0x102>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800e9a8:	687b      	ldr	r3, [r7, #4]
 800e9aa:	681b      	ldr	r3, [r3, #0]
 800e9ac:	685a      	ldr	r2, [r3, #4]
 800e9ae:	687b      	ldr	r3, [r7, #4]
 800e9b0:	681b      	ldr	r3, [r3, #0]
 800e9b2:	210c      	movs	r1, #12
 800e9b4:	438a      	bics	r2, r1
 800e9b6:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 800e9b8:	687b      	ldr	r3, [r7, #4]
 800e9ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e9bc:	4a0f      	ldr	r2, [pc, #60]	@ (800e9fc <HAL_ADC_PollForConversion+0x134>)
 800e9be:	4013      	ands	r3, r2
 800e9c0:	2201      	movs	r2, #1
 800e9c2:	431a      	orrs	r2, r3
 800e9c4:	687b      	ldr	r3, [r7, #4]
 800e9c6:	655a      	str	r2, [r3, #84]	@ 0x54
 800e9c8:	e00b      	b.n	800e9e2 <HAL_ADC_PollForConversion+0x11a>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800e9ca:	687b      	ldr	r3, [r7, #4]
 800e9cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e9ce:	2220      	movs	r2, #32
 800e9d0:	431a      	orrs	r2, r3
 800e9d2:	687b      	ldr	r3, [r7, #4]
 800e9d4:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800e9d6:	687b      	ldr	r3, [r7, #4]
 800e9d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e9da:	2201      	movs	r2, #1
 800e9dc:	431a      	orrs	r2, r3
 800e9de:	687b      	ldr	r3, [r7, #4]
 800e9e0:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 800e9e2:	687b      	ldr	r3, [r7, #4]
 800e9e4:	699b      	ldr	r3, [r3, #24]
 800e9e6:	2b00      	cmp	r3, #0
 800e9e8:	d103      	bne.n	800e9f2 <HAL_ADC_PollForConversion+0x12a>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800e9ea:	687b      	ldr	r3, [r7, #4]
 800e9ec:	681b      	ldr	r3, [r3, #0]
 800e9ee:	220c      	movs	r2, #12
 800e9f0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800e9f2:	2300      	movs	r3, #0
}
 800e9f4:	0018      	movs	r0, r3
 800e9f6:	46bd      	mov	sp, r7
 800e9f8:	b004      	add	sp, #16
 800e9fa:	bd80      	pop	{r7, pc}
 800e9fc:	fffffefe 	.word	0xfffffefe

0800ea00 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 800ea00:	b580      	push	{r7, lr}
 800ea02:	b082      	sub	sp, #8
 800ea04:	af00      	add	r7, sp, #0
 800ea06:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 800ea08:	687b      	ldr	r3, [r7, #4]
 800ea0a:	681b      	ldr	r3, [r3, #0]
 800ea0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 800ea0e:	0018      	movs	r0, r3
 800ea10:	46bd      	mov	sp, r7
 800ea12:	b002      	add	sp, #8
 800ea14:	bd80      	pop	{r7, pc}
	...

0800ea18 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800ea18:	b580      	push	{r7, lr}
 800ea1a:	b082      	sub	sp, #8
 800ea1c:	af00      	add	r7, sp, #0
 800ea1e:	6078      	str	r0, [r7, #4]
 800ea20:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));

  /* Process locked */
  __HAL_LOCK(hadc);
 800ea22:	687b      	ldr	r3, [r7, #4]
 800ea24:	2250      	movs	r2, #80	@ 0x50
 800ea26:	5c9b      	ldrb	r3, [r3, r2]
 800ea28:	2b01      	cmp	r3, #1
 800ea2a:	d101      	bne.n	800ea30 <HAL_ADC_ConfigChannel+0x18>
 800ea2c:	2302      	movs	r3, #2
 800ea2e:	e06c      	b.n	800eb0a <HAL_ADC_ConfigChannel+0xf2>
 800ea30:	687b      	ldr	r3, [r7, #4]
 800ea32:	2250      	movs	r2, #80	@ 0x50
 800ea34:	2101      	movs	r1, #1
 800ea36:	5499      	strb	r1, [r3, r2]
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Management of internal measurement channels: Vbat/VrefInt/TempSensor  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 800ea38:	687b      	ldr	r3, [r7, #4]
 800ea3a:	681b      	ldr	r3, [r3, #0]
 800ea3c:	689b      	ldr	r3, [r3, #8]
 800ea3e:	2204      	movs	r2, #4
 800ea40:	4013      	ands	r3, r2
 800ea42:	d00b      	beq.n	800ea5c <HAL_ADC_ConfigChannel+0x44>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800ea44:	687b      	ldr	r3, [r7, #4]
 800ea46:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ea48:	2220      	movs	r2, #32
 800ea4a:	431a      	orrs	r2, r3
 800ea4c:	687b      	ldr	r3, [r7, #4]
 800ea4e:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800ea50:	687b      	ldr	r3, [r7, #4]
 800ea52:	2250      	movs	r2, #80	@ 0x50
 800ea54:	2100      	movs	r1, #0
 800ea56:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 800ea58:	2301      	movs	r3, #1
 800ea5a:	e056      	b.n	800eb0a <HAL_ADC_ConfigChannel+0xf2>
  }

  if (sConfig->Rank != ADC_RANK_NONE)
 800ea5c:	683b      	ldr	r3, [r7, #0]
 800ea5e:	685b      	ldr	r3, [r3, #4]
 800ea60:	4a2c      	ldr	r2, [pc, #176]	@ (800eb14 <HAL_ADC_ConfigChannel+0xfc>)
 800ea62:	4293      	cmp	r3, r2
 800ea64:	d028      	beq.n	800eab8 <HAL_ADC_ConfigChannel+0xa0>
  {
    /* Enable selected channels */
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 800ea66:	687b      	ldr	r3, [r7, #4]
 800ea68:	681b      	ldr	r3, [r3, #0]
 800ea6a:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 800ea6c:	683b      	ldr	r3, [r7, #0]
 800ea6e:	681b      	ldr	r3, [r3, #0]
 800ea70:	035b      	lsls	r3, r3, #13
 800ea72:	0b5a      	lsrs	r2, r3, #13
 800ea74:	687b      	ldr	r3, [r7, #4]
 800ea76:	681b      	ldr	r3, [r3, #0]
 800ea78:	430a      	orrs	r2, r1
 800ea7a:	629a      	str	r2, [r3, #40]	@ 0x28
    /* dedicated internal buffers and path.                                     */

#if defined(ADC_CCR_TSEN)
    /* If Temperature sensor channel is selected, then enable the internal      */
    /* buffers and path  */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 800ea7c:	683b      	ldr	r3, [r7, #0]
 800ea7e:	681a      	ldr	r2, [r3, #0]
 800ea80:	2380      	movs	r3, #128	@ 0x80
 800ea82:	02db      	lsls	r3, r3, #11
 800ea84:	4013      	ands	r3, r2
 800ea86:	d009      	beq.n	800ea9c <HAL_ADC_ConfigChannel+0x84>
    {
      ADC->CCR |= ADC_CCR_TSEN;
 800ea88:	4b23      	ldr	r3, [pc, #140]	@ (800eb18 <HAL_ADC_ConfigChannel+0x100>)
 800ea8a:	681a      	ldr	r2, [r3, #0]
 800ea8c:	4b22      	ldr	r3, [pc, #136]	@ (800eb18 <HAL_ADC_ConfigChannel+0x100>)
 800ea8e:	2180      	movs	r1, #128	@ 0x80
 800ea90:	0409      	lsls	r1, r1, #16
 800ea92:	430a      	orrs	r2, r1
 800ea94:	601a      	str	r2, [r3, #0]

      /* Delay for temperature sensor stabilization time */
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 800ea96:	200a      	movs	r0, #10
 800ea98:	f000 f8ac 	bl	800ebf4 <ADC_DelayMicroSecond>
    }
#endif

    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 800ea9c:	683b      	ldr	r3, [r7, #0]
 800ea9e:	681a      	ldr	r2, [r3, #0]
 800eaa0:	2380      	movs	r3, #128	@ 0x80
 800eaa2:	029b      	lsls	r3, r3, #10
 800eaa4:	4013      	ands	r3, r2
 800eaa6:	d02b      	beq.n	800eb00 <HAL_ADC_ConfigChannel+0xe8>
    {
      ADC->CCR |= ADC_CCR_VREFEN;
 800eaa8:	4b1b      	ldr	r3, [pc, #108]	@ (800eb18 <HAL_ADC_ConfigChannel+0x100>)
 800eaaa:	681a      	ldr	r2, [r3, #0]
 800eaac:	4b1a      	ldr	r3, [pc, #104]	@ (800eb18 <HAL_ADC_ConfigChannel+0x100>)
 800eaae:	2180      	movs	r1, #128	@ 0x80
 800eab0:	03c9      	lsls	r1, r1, #15
 800eab2:	430a      	orrs	r2, r1
 800eab4:	601a      	str	r2, [r3, #0]
 800eab6:	e023      	b.n	800eb00 <HAL_ADC_ConfigChannel+0xe8>
  }
  else
  {
    /* Regular sequence configuration */
    /* Reset the channel selection register from the selected channel */
    hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
 800eab8:	687b      	ldr	r3, [r7, #4]
 800eaba:	681b      	ldr	r3, [r3, #0]
 800eabc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800eabe:	683b      	ldr	r3, [r7, #0]
 800eac0:	681b      	ldr	r3, [r3, #0]
 800eac2:	035b      	lsls	r3, r3, #13
 800eac4:	0b5b      	lsrs	r3, r3, #13
 800eac6:	43d9      	mvns	r1, r3
 800eac8:	687b      	ldr	r3, [r7, #4]
 800eaca:	681b      	ldr	r3, [r3, #0]
 800eacc:	400a      	ands	r2, r1
 800eace:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
    /* internal measurement paths disable: If internal channel selected,    */
    /* disable dedicated internal buffers and path.                         */
#if defined(ADC_CCR_TSEN)
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 800ead0:	683b      	ldr	r3, [r7, #0]
 800ead2:	681a      	ldr	r2, [r3, #0]
 800ead4:	2380      	movs	r3, #128	@ 0x80
 800ead6:	02db      	lsls	r3, r3, #11
 800ead8:	4013      	ands	r3, r2
 800eada:	d005      	beq.n	800eae8 <HAL_ADC_ConfigChannel+0xd0>
    {
      ADC->CCR &= ~ADC_CCR_TSEN;
 800eadc:	4b0e      	ldr	r3, [pc, #56]	@ (800eb18 <HAL_ADC_ConfigChannel+0x100>)
 800eade:	681a      	ldr	r2, [r3, #0]
 800eae0:	4b0d      	ldr	r3, [pc, #52]	@ (800eb18 <HAL_ADC_ConfigChannel+0x100>)
 800eae2:	490e      	ldr	r1, [pc, #56]	@ (800eb1c <HAL_ADC_ConfigChannel+0x104>)
 800eae4:	400a      	ands	r2, r1
 800eae6:	601a      	str	r2, [r3, #0]
    }
#endif

    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 800eae8:	683b      	ldr	r3, [r7, #0]
 800eaea:	681a      	ldr	r2, [r3, #0]
 800eaec:	2380      	movs	r3, #128	@ 0x80
 800eaee:	029b      	lsls	r3, r3, #10
 800eaf0:	4013      	ands	r3, r2
 800eaf2:	d005      	beq.n	800eb00 <HAL_ADC_ConfigChannel+0xe8>
    {
      ADC->CCR &= ~ADC_CCR_VREFEN;
 800eaf4:	4b08      	ldr	r3, [pc, #32]	@ (800eb18 <HAL_ADC_ConfigChannel+0x100>)
 800eaf6:	681a      	ldr	r2, [r3, #0]
 800eaf8:	4b07      	ldr	r3, [pc, #28]	@ (800eb18 <HAL_ADC_ConfigChannel+0x100>)
 800eafa:	4909      	ldr	r1, [pc, #36]	@ (800eb20 <HAL_ADC_ConfigChannel+0x108>)
 800eafc:	400a      	ands	r2, r1
 800eafe:	601a      	str	r2, [r3, #0]
    }
#endif
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800eb00:	687b      	ldr	r3, [r7, #4]
 800eb02:	2250      	movs	r2, #80	@ 0x50
 800eb04:	2100      	movs	r1, #0
 800eb06:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 800eb08:	2300      	movs	r3, #0
}
 800eb0a:	0018      	movs	r0, r3
 800eb0c:	46bd      	mov	sp, r7
 800eb0e:	b002      	add	sp, #8
 800eb10:	bd80      	pop	{r7, pc}
 800eb12:	46c0      	nop			@ (mov r8, r8)
 800eb14:	00001001 	.word	0x00001001
 800eb18:	40012708 	.word	0x40012708
 800eb1c:	ff7fffff 	.word	0xff7fffff
 800eb20:	ffbfffff 	.word	0xffbfffff

0800eb24 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800eb24:	b580      	push	{r7, lr}
 800eb26:	b084      	sub	sp, #16
 800eb28:	af00      	add	r7, sp, #0
 800eb2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800eb2c:	2300      	movs	r3, #0
 800eb2e:	60fb      	str	r3, [r7, #12]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800eb30:	687b      	ldr	r3, [r7, #4]
 800eb32:	681b      	ldr	r3, [r3, #0]
 800eb34:	689b      	ldr	r3, [r3, #8]
 800eb36:	2203      	movs	r2, #3
 800eb38:	4013      	ands	r3, r2
 800eb3a:	2b01      	cmp	r3, #1
 800eb3c:	d108      	bne.n	800eb50 <ADC_Enable+0x2c>
 800eb3e:	687b      	ldr	r3, [r7, #4]
 800eb40:	681b      	ldr	r3, [r3, #0]
 800eb42:	681b      	ldr	r3, [r3, #0]
 800eb44:	2201      	movs	r2, #1
 800eb46:	4013      	ands	r3, r2
 800eb48:	2b01      	cmp	r3, #1
 800eb4a:	d101      	bne.n	800eb50 <ADC_Enable+0x2c>
 800eb4c:	2301      	movs	r3, #1
 800eb4e:	e000      	b.n	800eb52 <ADC_Enable+0x2e>
 800eb50:	2300      	movs	r3, #0
 800eb52:	2b00      	cmp	r3, #0
 800eb54:	d146      	bne.n	800ebe4 <ADC_Enable+0xc0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 800eb56:	687b      	ldr	r3, [r7, #4]
 800eb58:	681b      	ldr	r3, [r3, #0]
 800eb5a:	689b      	ldr	r3, [r3, #8]
 800eb5c:	4a24      	ldr	r2, [pc, #144]	@ (800ebf0 <ADC_Enable+0xcc>)
 800eb5e:	4013      	ands	r3, r2
 800eb60:	d00d      	beq.n	800eb7e <ADC_Enable+0x5a>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800eb62:	687b      	ldr	r3, [r7, #4]
 800eb64:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800eb66:	2210      	movs	r2, #16
 800eb68:	431a      	orrs	r2, r3
 800eb6a:	687b      	ldr	r3, [r7, #4]
 800eb6c:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800eb6e:	687b      	ldr	r3, [r7, #4]
 800eb70:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800eb72:	2201      	movs	r2, #1
 800eb74:	431a      	orrs	r2, r3
 800eb76:	687b      	ldr	r3, [r7, #4]
 800eb78:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 800eb7a:	2301      	movs	r3, #1
 800eb7c:	e033      	b.n	800ebe6 <ADC_Enable+0xc2>
    }

    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 800eb7e:	687b      	ldr	r3, [r7, #4]
 800eb80:	681b      	ldr	r3, [r3, #0]
 800eb82:	689a      	ldr	r2, [r3, #8]
 800eb84:	687b      	ldr	r3, [r7, #4]
 800eb86:	681b      	ldr	r3, [r3, #0]
 800eb88:	2101      	movs	r1, #1
 800eb8a:	430a      	orrs	r2, r1
 800eb8c:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time. */
    ADC_DelayMicroSecond(ADC_STAB_DELAY_US);
 800eb8e:	2001      	movs	r0, #1
 800eb90:	f000 f830 	bl	800ebf4 <ADC_DelayMicroSecond>

    /* Get tick count */
    tickstart = HAL_GetTick();
 800eb94:	f7ff fc68 	bl	800e468 <HAL_GetTick>
 800eb98:	0003      	movs	r3, r0
 800eb9a:	60fb      	str	r3, [r7, #12]

    /* Wait for ADC effectively enabled */
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800eb9c:	e01b      	b.n	800ebd6 <ADC_Enable+0xb2>
    {
      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800eb9e:	f7ff fc63 	bl	800e468 <HAL_GetTick>
 800eba2:	0002      	movs	r2, r0
 800eba4:	68fb      	ldr	r3, [r7, #12]
 800eba6:	1ad3      	subs	r3, r2, r3
 800eba8:	2b0a      	cmp	r3, #10
 800ebaa:	d914      	bls.n	800ebd6 <ADC_Enable+0xb2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800ebac:	687b      	ldr	r3, [r7, #4]
 800ebae:	681b      	ldr	r3, [r3, #0]
 800ebb0:	681b      	ldr	r3, [r3, #0]
 800ebb2:	2201      	movs	r2, #1
 800ebb4:	4013      	ands	r3, r2
 800ebb6:	2b01      	cmp	r3, #1
 800ebb8:	d00d      	beq.n	800ebd6 <ADC_Enable+0xb2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800ebba:	687b      	ldr	r3, [r7, #4]
 800ebbc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ebbe:	2210      	movs	r2, #16
 800ebc0:	431a      	orrs	r2, r3
 800ebc2:	687b      	ldr	r3, [r7, #4]
 800ebc4:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800ebc6:	687b      	ldr	r3, [r7, #4]
 800ebc8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ebca:	2201      	movs	r2, #1
 800ebcc:	431a      	orrs	r2, r3
 800ebce:	687b      	ldr	r3, [r7, #4]
 800ebd0:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 800ebd2:	2301      	movs	r3, #1
 800ebd4:	e007      	b.n	800ebe6 <ADC_Enable+0xc2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800ebd6:	687b      	ldr	r3, [r7, #4]
 800ebd8:	681b      	ldr	r3, [r3, #0]
 800ebda:	681b      	ldr	r3, [r3, #0]
 800ebdc:	2201      	movs	r2, #1
 800ebde:	4013      	ands	r3, r2
 800ebe0:	2b01      	cmp	r3, #1
 800ebe2:	d1dc      	bne.n	800eb9e <ADC_Enable+0x7a>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800ebe4:	2300      	movs	r3, #0
}
 800ebe6:	0018      	movs	r0, r3
 800ebe8:	46bd      	mov	sp, r7
 800ebea:	b004      	add	sp, #16
 800ebec:	bd80      	pop	{r7, pc}
 800ebee:	46c0      	nop			@ (mov r8, r8)
 800ebf0:	80000017 	.word	0x80000017

0800ebf4 <ADC_DelayMicroSecond>:
  * @brief  Delay micro seconds
  * @param  microSecond  delay
  * @retval None
  */
static void ADC_DelayMicroSecond(uint32_t microSecond)
{
 800ebf4:	b580      	push	{r7, lr}
 800ebf6:	b084      	sub	sp, #16
 800ebf8:	af00      	add	r7, sp, #0
 800ebfa:	6078      	str	r0, [r7, #4]
  /* Compute number of CPU cycles to wait for */
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 800ebfc:	4b0b      	ldr	r3, [pc, #44]	@ (800ec2c <ADC_DelayMicroSecond+0x38>)
 800ebfe:	681b      	ldr	r3, [r3, #0]
 800ec00:	490b      	ldr	r1, [pc, #44]	@ (800ec30 <ADC_DelayMicroSecond+0x3c>)
 800ec02:	0018      	movs	r0, r3
 800ec04:	f7f1 face 	bl	80001a4 <__udivsi3>
 800ec08:	0003      	movs	r3, r0
 800ec0a:	001a      	movs	r2, r3
 800ec0c:	687b      	ldr	r3, [r7, #4]
 800ec0e:	4353      	muls	r3, r2
 800ec10:	60fb      	str	r3, [r7, #12]

  while (waitLoopIndex != 0U)
 800ec12:	e002      	b.n	800ec1a <ADC_DelayMicroSecond+0x26>
  {
    waitLoopIndex--;
 800ec14:	68fb      	ldr	r3, [r7, #12]
 800ec16:	3b01      	subs	r3, #1
 800ec18:	60fb      	str	r3, [r7, #12]
  while (waitLoopIndex != 0U)
 800ec1a:	68fb      	ldr	r3, [r7, #12]
 800ec1c:	2b00      	cmp	r3, #0
 800ec1e:	d1f9      	bne.n	800ec14 <ADC_DelayMicroSecond+0x20>
  }
}
 800ec20:	46c0      	nop			@ (mov r8, r8)
 800ec22:	46c0      	nop			@ (mov r8, r8)
 800ec24:	46bd      	mov	sp, r7
 800ec26:	b004      	add	sp, #16
 800ec28:	bd80      	pop	{r7, pc}
 800ec2a:	46c0      	nop			@ (mov r8, r8)
 800ec2c:	200000cc 	.word	0x200000cc
 800ec30:	000f4240 	.word	0x000f4240

0800ec34 <__NVIC_EnableIRQ>:
{
 800ec34:	b580      	push	{r7, lr}
 800ec36:	b082      	sub	sp, #8
 800ec38:	af00      	add	r7, sp, #0
 800ec3a:	0002      	movs	r2, r0
 800ec3c:	1dfb      	adds	r3, r7, #7
 800ec3e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800ec40:	1dfb      	adds	r3, r7, #7
 800ec42:	781b      	ldrb	r3, [r3, #0]
 800ec44:	2b7f      	cmp	r3, #127	@ 0x7f
 800ec46:	d809      	bhi.n	800ec5c <__NVIC_EnableIRQ+0x28>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800ec48:	1dfb      	adds	r3, r7, #7
 800ec4a:	781b      	ldrb	r3, [r3, #0]
 800ec4c:	001a      	movs	r2, r3
 800ec4e:	231f      	movs	r3, #31
 800ec50:	401a      	ands	r2, r3
 800ec52:	4b04      	ldr	r3, [pc, #16]	@ (800ec64 <__NVIC_EnableIRQ+0x30>)
 800ec54:	2101      	movs	r1, #1
 800ec56:	4091      	lsls	r1, r2
 800ec58:	000a      	movs	r2, r1
 800ec5a:	601a      	str	r2, [r3, #0]
}
 800ec5c:	46c0      	nop			@ (mov r8, r8)
 800ec5e:	46bd      	mov	sp, r7
 800ec60:	b002      	add	sp, #8
 800ec62:	bd80      	pop	{r7, pc}
 800ec64:	e000e100 	.word	0xe000e100

0800ec68 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800ec68:	b590      	push	{r4, r7, lr}
 800ec6a:	b083      	sub	sp, #12
 800ec6c:	af00      	add	r7, sp, #0
 800ec6e:	0002      	movs	r2, r0
 800ec70:	6039      	str	r1, [r7, #0]
 800ec72:	1dfb      	adds	r3, r7, #7
 800ec74:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800ec76:	1dfb      	adds	r3, r7, #7
 800ec78:	781b      	ldrb	r3, [r3, #0]
 800ec7a:	2b7f      	cmp	r3, #127	@ 0x7f
 800ec7c:	d828      	bhi.n	800ecd0 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800ec7e:	4a2f      	ldr	r2, [pc, #188]	@ (800ed3c <__NVIC_SetPriority+0xd4>)
 800ec80:	1dfb      	adds	r3, r7, #7
 800ec82:	781b      	ldrb	r3, [r3, #0]
 800ec84:	b25b      	sxtb	r3, r3
 800ec86:	089b      	lsrs	r3, r3, #2
 800ec88:	33c0      	adds	r3, #192	@ 0xc0
 800ec8a:	009b      	lsls	r3, r3, #2
 800ec8c:	589b      	ldr	r3, [r3, r2]
 800ec8e:	1dfa      	adds	r2, r7, #7
 800ec90:	7812      	ldrb	r2, [r2, #0]
 800ec92:	0011      	movs	r1, r2
 800ec94:	2203      	movs	r2, #3
 800ec96:	400a      	ands	r2, r1
 800ec98:	00d2      	lsls	r2, r2, #3
 800ec9a:	21ff      	movs	r1, #255	@ 0xff
 800ec9c:	4091      	lsls	r1, r2
 800ec9e:	000a      	movs	r2, r1
 800eca0:	43d2      	mvns	r2, r2
 800eca2:	401a      	ands	r2, r3
 800eca4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800eca6:	683b      	ldr	r3, [r7, #0]
 800eca8:	019b      	lsls	r3, r3, #6
 800ecaa:	22ff      	movs	r2, #255	@ 0xff
 800ecac:	401a      	ands	r2, r3
 800ecae:	1dfb      	adds	r3, r7, #7
 800ecb0:	781b      	ldrb	r3, [r3, #0]
 800ecb2:	0018      	movs	r0, r3
 800ecb4:	2303      	movs	r3, #3
 800ecb6:	4003      	ands	r3, r0
 800ecb8:	00db      	lsls	r3, r3, #3
 800ecba:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800ecbc:	481f      	ldr	r0, [pc, #124]	@ (800ed3c <__NVIC_SetPriority+0xd4>)
 800ecbe:	1dfb      	adds	r3, r7, #7
 800ecc0:	781b      	ldrb	r3, [r3, #0]
 800ecc2:	b25b      	sxtb	r3, r3
 800ecc4:	089b      	lsrs	r3, r3, #2
 800ecc6:	430a      	orrs	r2, r1
 800ecc8:	33c0      	adds	r3, #192	@ 0xc0
 800ecca:	009b      	lsls	r3, r3, #2
 800eccc:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800ecce:	e031      	b.n	800ed34 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800ecd0:	4a1b      	ldr	r2, [pc, #108]	@ (800ed40 <__NVIC_SetPriority+0xd8>)
 800ecd2:	1dfb      	adds	r3, r7, #7
 800ecd4:	781b      	ldrb	r3, [r3, #0]
 800ecd6:	0019      	movs	r1, r3
 800ecd8:	230f      	movs	r3, #15
 800ecda:	400b      	ands	r3, r1
 800ecdc:	3b08      	subs	r3, #8
 800ecde:	089b      	lsrs	r3, r3, #2
 800ece0:	3306      	adds	r3, #6
 800ece2:	009b      	lsls	r3, r3, #2
 800ece4:	18d3      	adds	r3, r2, r3
 800ece6:	3304      	adds	r3, #4
 800ece8:	681b      	ldr	r3, [r3, #0]
 800ecea:	1dfa      	adds	r2, r7, #7
 800ecec:	7812      	ldrb	r2, [r2, #0]
 800ecee:	0011      	movs	r1, r2
 800ecf0:	2203      	movs	r2, #3
 800ecf2:	400a      	ands	r2, r1
 800ecf4:	00d2      	lsls	r2, r2, #3
 800ecf6:	21ff      	movs	r1, #255	@ 0xff
 800ecf8:	4091      	lsls	r1, r2
 800ecfa:	000a      	movs	r2, r1
 800ecfc:	43d2      	mvns	r2, r2
 800ecfe:	401a      	ands	r2, r3
 800ed00:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800ed02:	683b      	ldr	r3, [r7, #0]
 800ed04:	019b      	lsls	r3, r3, #6
 800ed06:	22ff      	movs	r2, #255	@ 0xff
 800ed08:	401a      	ands	r2, r3
 800ed0a:	1dfb      	adds	r3, r7, #7
 800ed0c:	781b      	ldrb	r3, [r3, #0]
 800ed0e:	0018      	movs	r0, r3
 800ed10:	2303      	movs	r3, #3
 800ed12:	4003      	ands	r3, r0
 800ed14:	00db      	lsls	r3, r3, #3
 800ed16:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800ed18:	4809      	ldr	r0, [pc, #36]	@ (800ed40 <__NVIC_SetPriority+0xd8>)
 800ed1a:	1dfb      	adds	r3, r7, #7
 800ed1c:	781b      	ldrb	r3, [r3, #0]
 800ed1e:	001c      	movs	r4, r3
 800ed20:	230f      	movs	r3, #15
 800ed22:	4023      	ands	r3, r4
 800ed24:	3b08      	subs	r3, #8
 800ed26:	089b      	lsrs	r3, r3, #2
 800ed28:	430a      	orrs	r2, r1
 800ed2a:	3306      	adds	r3, #6
 800ed2c:	009b      	lsls	r3, r3, #2
 800ed2e:	18c3      	adds	r3, r0, r3
 800ed30:	3304      	adds	r3, #4
 800ed32:	601a      	str	r2, [r3, #0]
}
 800ed34:	46c0      	nop			@ (mov r8, r8)
 800ed36:	46bd      	mov	sp, r7
 800ed38:	b003      	add	sp, #12
 800ed3a:	bd90      	pop	{r4, r7, pc}
 800ed3c:	e000e100 	.word	0xe000e100
 800ed40:	e000ed00 	.word	0xe000ed00

0800ed44 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 800ed44:	b580      	push	{r7, lr}
 800ed46:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 800ed48:	f3bf 8f4f 	dsb	sy
}
 800ed4c:	46c0      	nop			@ (mov r8, r8)
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800ed4e:	4b04      	ldr	r3, [pc, #16]	@ (800ed60 <__NVIC_SystemReset+0x1c>)
 800ed50:	4a04      	ldr	r2, [pc, #16]	@ (800ed64 <__NVIC_SystemReset+0x20>)
 800ed52:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800ed54:	f3bf 8f4f 	dsb	sy
}
 800ed58:	46c0      	nop			@ (mov r8, r8)
                 SCB_AIRCR_SYSRESETREQ_Msk);
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 800ed5a:	46c0      	nop			@ (mov r8, r8)
 800ed5c:	e7fd      	b.n	800ed5a <__NVIC_SystemReset+0x16>
 800ed5e:	46c0      	nop			@ (mov r8, r8)
 800ed60:	e000ed00 	.word	0xe000ed00
 800ed64:	05fa0004 	.word	0x05fa0004

0800ed68 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800ed68:	b580      	push	{r7, lr}
 800ed6a:	b082      	sub	sp, #8
 800ed6c:	af00      	add	r7, sp, #0
 800ed6e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800ed70:	687b      	ldr	r3, [r7, #4]
 800ed72:	1e5a      	subs	r2, r3, #1
 800ed74:	2380      	movs	r3, #128	@ 0x80
 800ed76:	045b      	lsls	r3, r3, #17
 800ed78:	429a      	cmp	r2, r3
 800ed7a:	d301      	bcc.n	800ed80 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 800ed7c:	2301      	movs	r3, #1
 800ed7e:	e010      	b.n	800eda2 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800ed80:	4b0a      	ldr	r3, [pc, #40]	@ (800edac <SysTick_Config+0x44>)
 800ed82:	687a      	ldr	r2, [r7, #4]
 800ed84:	3a01      	subs	r2, #1
 800ed86:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800ed88:	2301      	movs	r3, #1
 800ed8a:	425b      	negs	r3, r3
 800ed8c:	2103      	movs	r1, #3
 800ed8e:	0018      	movs	r0, r3
 800ed90:	f7ff ff6a 	bl	800ec68 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800ed94:	4b05      	ldr	r3, [pc, #20]	@ (800edac <SysTick_Config+0x44>)
 800ed96:	2200      	movs	r2, #0
 800ed98:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800ed9a:	4b04      	ldr	r3, [pc, #16]	@ (800edac <SysTick_Config+0x44>)
 800ed9c:	2207      	movs	r2, #7
 800ed9e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800eda0:	2300      	movs	r3, #0
}
 800eda2:	0018      	movs	r0, r3
 800eda4:	46bd      	mov	sp, r7
 800eda6:	b002      	add	sp, #8
 800eda8:	bd80      	pop	{r7, pc}
 800edaa:	46c0      	nop			@ (mov r8, r8)
 800edac:	e000e010 	.word	0xe000e010

0800edb0 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800edb0:	b580      	push	{r7, lr}
 800edb2:	b084      	sub	sp, #16
 800edb4:	af00      	add	r7, sp, #0
 800edb6:	60b9      	str	r1, [r7, #8]
 800edb8:	607a      	str	r2, [r7, #4]
 800edba:	210f      	movs	r1, #15
 800edbc:	187b      	adds	r3, r7, r1
 800edbe:	1c02      	adds	r2, r0, #0
 800edc0:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800edc2:	68ba      	ldr	r2, [r7, #8]
 800edc4:	187b      	adds	r3, r7, r1
 800edc6:	781b      	ldrb	r3, [r3, #0]
 800edc8:	b25b      	sxtb	r3, r3
 800edca:	0011      	movs	r1, r2
 800edcc:	0018      	movs	r0, r3
 800edce:	f7ff ff4b 	bl	800ec68 <__NVIC_SetPriority>
}
 800edd2:	46c0      	nop			@ (mov r8, r8)
 800edd4:	46bd      	mov	sp, r7
 800edd6:	b004      	add	sp, #16
 800edd8:	bd80      	pop	{r7, pc}

0800edda <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800edda:	b580      	push	{r7, lr}
 800eddc:	b082      	sub	sp, #8
 800edde:	af00      	add	r7, sp, #0
 800ede0:	0002      	movs	r2, r0
 800ede2:	1dfb      	adds	r3, r7, #7
 800ede4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800ede6:	1dfb      	adds	r3, r7, #7
 800ede8:	781b      	ldrb	r3, [r3, #0]
 800edea:	b25b      	sxtb	r3, r3
 800edec:	0018      	movs	r0, r3
 800edee:	f7ff ff21 	bl	800ec34 <__NVIC_EnableIRQ>
}
 800edf2:	46c0      	nop			@ (mov r8, r8)
 800edf4:	46bd      	mov	sp, r7
 800edf6:	b002      	add	sp, #8
 800edf8:	bd80      	pop	{r7, pc}

0800edfa <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiate a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 800edfa:	b580      	push	{r7, lr}
 800edfc:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 800edfe:	f7ff ffa1 	bl	800ed44 <__NVIC_SystemReset>

0800ee02 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800ee02:	b580      	push	{r7, lr}
 800ee04:	b082      	sub	sp, #8
 800ee06:	af00      	add	r7, sp, #0
 800ee08:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800ee0a:	687b      	ldr	r3, [r7, #4]
 800ee0c:	0018      	movs	r0, r3
 800ee0e:	f7ff ffab 	bl	800ed68 <SysTick_Config>
 800ee12:	0003      	movs	r3, r0
}
 800ee14:	0018      	movs	r0, r3
 800ee16:	46bd      	mov	sp, r7
 800ee18:	b002      	add	sp, #8
 800ee1a:	bd80      	pop	{r7, pc}

0800ee1c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800ee1c:	b580      	push	{r7, lr}
 800ee1e:	b084      	sub	sp, #16
 800ee20:	af00      	add	r7, sp, #0
 800ee22:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800ee24:	687b      	ldr	r3, [r7, #4]
 800ee26:	2b00      	cmp	r3, #0
 800ee28:	d101      	bne.n	800ee2e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800ee2a:	2301      	movs	r3, #1
 800ee2c:	e061      	b.n	800eef2 <HAL_DMA_Init+0xd6>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Compute the channel index */
  /* Only one DMA: DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800ee2e:	687b      	ldr	r3, [r7, #4]
 800ee30:	681b      	ldr	r3, [r3, #0]
 800ee32:	4a32      	ldr	r2, [pc, #200]	@ (800eefc <HAL_DMA_Init+0xe0>)
 800ee34:	4694      	mov	ip, r2
 800ee36:	4463      	add	r3, ip
 800ee38:	2114      	movs	r1, #20
 800ee3a:	0018      	movs	r0, r3
 800ee3c:	f7f1 f9b2 	bl	80001a4 <__udivsi3>
 800ee40:	0003      	movs	r3, r0
 800ee42:	009a      	lsls	r2, r3, #2
 800ee44:	687b      	ldr	r3, [r7, #4]
 800ee46:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma->DmaBaseAddress = DMA1;
 800ee48:	687b      	ldr	r3, [r7, #4]
 800ee4a:	4a2d      	ldr	r2, [pc, #180]	@ (800ef00 <HAL_DMA_Init+0xe4>)
 800ee4c:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800ee4e:	687b      	ldr	r3, [r7, #4]
 800ee50:	2225      	movs	r2, #37	@ 0x25
 800ee52:	2102      	movs	r1, #2
 800ee54:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800ee56:	687b      	ldr	r3, [r7, #4]
 800ee58:	681b      	ldr	r3, [r3, #0]
 800ee5a:	681b      	ldr	r3, [r3, #0]
 800ee5c:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800ee5e:	68fb      	ldr	r3, [r7, #12]
 800ee60:	4a28      	ldr	r2, [pc, #160]	@ (800ef04 <HAL_DMA_Init+0xe8>)
 800ee62:	4013      	ands	r3, r2
 800ee64:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800ee66:	687b      	ldr	r3, [r7, #4]
 800ee68:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800ee6a:	687b      	ldr	r3, [r7, #4]
 800ee6c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800ee6e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800ee70:	687b      	ldr	r3, [r7, #4]
 800ee72:	691b      	ldr	r3, [r3, #16]
 800ee74:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800ee76:	687b      	ldr	r3, [r7, #4]
 800ee78:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800ee7a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800ee7c:	687b      	ldr	r3, [r7, #4]
 800ee7e:	699b      	ldr	r3, [r3, #24]
 800ee80:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800ee82:	687b      	ldr	r3, [r7, #4]
 800ee84:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800ee86:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800ee88:	687b      	ldr	r3, [r7, #4]
 800ee8a:	6a1b      	ldr	r3, [r3, #32]
 800ee8c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800ee8e:	68fa      	ldr	r2, [r7, #12]
 800ee90:	4313      	orrs	r3, r2
 800ee92:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800ee94:	687b      	ldr	r3, [r7, #4]
 800ee96:	681b      	ldr	r3, [r3, #0]
 800ee98:	68fa      	ldr	r2, [r7, #12]
 800ee9a:	601a      	str	r2, [r3, #0]

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 800ee9c:	687b      	ldr	r3, [r7, #4]
 800ee9e:	689a      	ldr	r2, [r3, #8]
 800eea0:	2380      	movs	r3, #128	@ 0x80
 800eea2:	01db      	lsls	r3, r3, #7
 800eea4:	429a      	cmp	r2, r3
 800eea6:	d018      	beq.n	800eeda <HAL_DMA_Init+0xbe>
  {
    /* Write to DMA channel selection register */
    /* Reset request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800eea8:	4b17      	ldr	r3, [pc, #92]	@ (800ef08 <HAL_DMA_Init+0xec>)
 800eeaa:	681a      	ldr	r2, [r3, #0]
 800eeac:	687b      	ldr	r3, [r7, #4]
 800eeae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800eeb0:	211c      	movs	r1, #28
 800eeb2:	400b      	ands	r3, r1
 800eeb4:	210f      	movs	r1, #15
 800eeb6:	4099      	lsls	r1, r3
 800eeb8:	000b      	movs	r3, r1
 800eeba:	43d9      	mvns	r1, r3
 800eebc:	4b12      	ldr	r3, [pc, #72]	@ (800ef08 <HAL_DMA_Init+0xec>)
 800eebe:	400a      	ands	r2, r1
 800eec0:	601a      	str	r2, [r3, #0]

    /* Configure request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800eec2:	4b11      	ldr	r3, [pc, #68]	@ (800ef08 <HAL_DMA_Init+0xec>)
 800eec4:	6819      	ldr	r1, [r3, #0]
 800eec6:	687b      	ldr	r3, [r7, #4]
 800eec8:	685a      	ldr	r2, [r3, #4]
 800eeca:	687b      	ldr	r3, [r7, #4]
 800eecc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800eece:	201c      	movs	r0, #28
 800eed0:	4003      	ands	r3, r0
 800eed2:	409a      	lsls	r2, r3
 800eed4:	4b0c      	ldr	r3, [pc, #48]	@ (800ef08 <HAL_DMA_Init+0xec>)
 800eed6:	430a      	orrs	r2, r1
 800eed8:	601a      	str	r2, [r3, #0]
  }

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800eeda:	687b      	ldr	r3, [r7, #4]
 800eedc:	2200      	movs	r2, #0
 800eede:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 800eee0:	687b      	ldr	r3, [r7, #4]
 800eee2:	2225      	movs	r2, #37	@ 0x25
 800eee4:	2101      	movs	r1, #1
 800eee6:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800eee8:	687b      	ldr	r3, [r7, #4]
 800eeea:	2224      	movs	r2, #36	@ 0x24
 800eeec:	2100      	movs	r1, #0
 800eeee:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800eef0:	2300      	movs	r3, #0
}
 800eef2:	0018      	movs	r0, r3
 800eef4:	46bd      	mov	sp, r7
 800eef6:	b004      	add	sp, #16
 800eef8:	bd80      	pop	{r7, pc}
 800eefa:	46c0      	nop			@ (mov r8, r8)
 800eefc:	bffdfff8 	.word	0xbffdfff8
 800ef00:	40020000 	.word	0x40020000
 800ef04:	ffff800f 	.word	0xffff800f
 800ef08:	400200a8 	.word	0x400200a8

0800ef0c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The amount of data items to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800ef0c:	b580      	push	{r7, lr}
 800ef0e:	b086      	sub	sp, #24
 800ef10:	af00      	add	r7, sp, #0
 800ef12:	60f8      	str	r0, [r7, #12]
 800ef14:	60b9      	str	r1, [r7, #8]
 800ef16:	607a      	str	r2, [r7, #4]
 800ef18:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800ef1a:	2317      	movs	r3, #23
 800ef1c:	18fb      	adds	r3, r7, r3
 800ef1e:	2200      	movs	r2, #0
 800ef20:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800ef22:	68fb      	ldr	r3, [r7, #12]
 800ef24:	2224      	movs	r2, #36	@ 0x24
 800ef26:	5c9b      	ldrb	r3, [r3, r2]
 800ef28:	2b01      	cmp	r3, #1
 800ef2a:	d101      	bne.n	800ef30 <HAL_DMA_Start_IT+0x24>
 800ef2c:	2302      	movs	r3, #2
 800ef2e:	e04f      	b.n	800efd0 <HAL_DMA_Start_IT+0xc4>
 800ef30:	68fb      	ldr	r3, [r7, #12]
 800ef32:	2224      	movs	r2, #36	@ 0x24
 800ef34:	2101      	movs	r1, #1
 800ef36:	5499      	strb	r1, [r3, r2]

  if(HAL_DMA_STATE_READY == hdma->State)
 800ef38:	68fb      	ldr	r3, [r7, #12]
 800ef3a:	2225      	movs	r2, #37	@ 0x25
 800ef3c:	5c9b      	ldrb	r3, [r3, r2]
 800ef3e:	b2db      	uxtb	r3, r3
 800ef40:	2b01      	cmp	r3, #1
 800ef42:	d13a      	bne.n	800efba <HAL_DMA_Start_IT+0xae>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800ef44:	68fb      	ldr	r3, [r7, #12]
 800ef46:	2225      	movs	r2, #37	@ 0x25
 800ef48:	2102      	movs	r1, #2
 800ef4a:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800ef4c:	68fb      	ldr	r3, [r7, #12]
 800ef4e:	2200      	movs	r2, #0
 800ef50:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800ef52:	68fb      	ldr	r3, [r7, #12]
 800ef54:	681b      	ldr	r3, [r3, #0]
 800ef56:	681a      	ldr	r2, [r3, #0]
 800ef58:	68fb      	ldr	r3, [r7, #12]
 800ef5a:	681b      	ldr	r3, [r3, #0]
 800ef5c:	2101      	movs	r1, #1
 800ef5e:	438a      	bics	r2, r1
 800ef60:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800ef62:	683b      	ldr	r3, [r7, #0]
 800ef64:	687a      	ldr	r2, [r7, #4]
 800ef66:	68b9      	ldr	r1, [r7, #8]
 800ef68:	68f8      	ldr	r0, [r7, #12]
 800ef6a:	f000 f976 	bl	800f25a <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 800ef6e:	68fb      	ldr	r3, [r7, #12]
 800ef70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ef72:	2b00      	cmp	r3, #0
 800ef74:	d008      	beq.n	800ef88 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800ef76:	68fb      	ldr	r3, [r7, #12]
 800ef78:	681b      	ldr	r3, [r3, #0]
 800ef7a:	681a      	ldr	r2, [r3, #0]
 800ef7c:	68fb      	ldr	r3, [r7, #12]
 800ef7e:	681b      	ldr	r3, [r3, #0]
 800ef80:	210e      	movs	r1, #14
 800ef82:	430a      	orrs	r2, r1
 800ef84:	601a      	str	r2, [r3, #0]
 800ef86:	e00f      	b.n	800efa8 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800ef88:	68fb      	ldr	r3, [r7, #12]
 800ef8a:	681b      	ldr	r3, [r3, #0]
 800ef8c:	681a      	ldr	r2, [r3, #0]
 800ef8e:	68fb      	ldr	r3, [r7, #12]
 800ef90:	681b      	ldr	r3, [r3, #0]
 800ef92:	2104      	movs	r1, #4
 800ef94:	438a      	bics	r2, r1
 800ef96:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800ef98:	68fb      	ldr	r3, [r7, #12]
 800ef9a:	681b      	ldr	r3, [r3, #0]
 800ef9c:	681a      	ldr	r2, [r3, #0]
 800ef9e:	68fb      	ldr	r3, [r7, #12]
 800efa0:	681b      	ldr	r3, [r3, #0]
 800efa2:	210a      	movs	r1, #10
 800efa4:	430a      	orrs	r2, r1
 800efa6:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800efa8:	68fb      	ldr	r3, [r7, #12]
 800efaa:	681b      	ldr	r3, [r3, #0]
 800efac:	681a      	ldr	r2, [r3, #0]
 800efae:	68fb      	ldr	r3, [r7, #12]
 800efb0:	681b      	ldr	r3, [r3, #0]
 800efb2:	2101      	movs	r1, #1
 800efb4:	430a      	orrs	r2, r1
 800efb6:	601a      	str	r2, [r3, #0]
 800efb8:	e007      	b.n	800efca <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800efba:	68fb      	ldr	r3, [r7, #12]
 800efbc:	2224      	movs	r2, #36	@ 0x24
 800efbe:	2100      	movs	r1, #0
 800efc0:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 800efc2:	2317      	movs	r3, #23
 800efc4:	18fb      	adds	r3, r7, r3
 800efc6:	2202      	movs	r2, #2
 800efc8:	701a      	strb	r2, [r3, #0]
  }
  return status;
 800efca:	2317      	movs	r3, #23
 800efcc:	18fb      	adds	r3, r7, r3
 800efce:	781b      	ldrb	r3, [r3, #0]
}
 800efd0:	0018      	movs	r0, r3
 800efd2:	46bd      	mov	sp, r7
 800efd4:	b006      	add	sp, #24
 800efd6:	bd80      	pop	{r7, pc}

0800efd8 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800efd8:	b580      	push	{r7, lr}
 800efda:	b084      	sub	sp, #16
 800efdc:	af00      	add	r7, sp, #0
 800efde:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800efe0:	230f      	movs	r3, #15
 800efe2:	18fb      	adds	r3, r7, r3
 800efe4:	2200      	movs	r2, #0
 800efe6:	701a      	strb	r2, [r3, #0]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800efe8:	687b      	ldr	r3, [r7, #4]
 800efea:	2225      	movs	r2, #37	@ 0x25
 800efec:	5c9b      	ldrb	r3, [r3, r2]
 800efee:	b2db      	uxtb	r3, r3
 800eff0:	2b02      	cmp	r3, #2
 800eff2:	d008      	beq.n	800f006 <HAL_DMA_Abort+0x2e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800eff4:	687b      	ldr	r3, [r7, #4]
 800eff6:	2204      	movs	r2, #4
 800eff8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800effa:	687b      	ldr	r3, [r7, #4]
 800effc:	2224      	movs	r2, #36	@ 0x24
 800effe:	2100      	movs	r1, #0
 800f000:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 800f002:	2301      	movs	r3, #1
 800f004:	e024      	b.n	800f050 <HAL_DMA_Abort+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800f006:	687b      	ldr	r3, [r7, #4]
 800f008:	681b      	ldr	r3, [r3, #0]
 800f00a:	681a      	ldr	r2, [r3, #0]
 800f00c:	687b      	ldr	r3, [r7, #4]
 800f00e:	681b      	ldr	r3, [r3, #0]
 800f010:	210e      	movs	r1, #14
 800f012:	438a      	bics	r2, r1
 800f014:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800f016:	687b      	ldr	r3, [r7, #4]
 800f018:	681b      	ldr	r3, [r3, #0]
 800f01a:	681a      	ldr	r2, [r3, #0]
 800f01c:	687b      	ldr	r3, [r7, #4]
 800f01e:	681b      	ldr	r3, [r3, #0]
 800f020:	2101      	movs	r1, #1
 800f022:	438a      	bics	r2, r1
 800f024:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800f026:	687b      	ldr	r3, [r7, #4]
 800f028:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f02a:	221c      	movs	r2, #28
 800f02c:	401a      	ands	r2, r3
 800f02e:	687b      	ldr	r3, [r7, #4]
 800f030:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f032:	2101      	movs	r1, #1
 800f034:	4091      	lsls	r1, r2
 800f036:	000a      	movs	r2, r1
 800f038:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800f03a:	687b      	ldr	r3, [r7, #4]
 800f03c:	2225      	movs	r2, #37	@ 0x25
 800f03e:	2101      	movs	r1, #1
 800f040:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800f042:	687b      	ldr	r3, [r7, #4]
 800f044:	2224      	movs	r2, #36	@ 0x24
 800f046:	2100      	movs	r1, #0
 800f048:	5499      	strb	r1, [r3, r2]

    return status;
 800f04a:	230f      	movs	r3, #15
 800f04c:	18fb      	adds	r3, r7, r3
 800f04e:	781b      	ldrb	r3, [r3, #0]
  }
}
 800f050:	0018      	movs	r0, r3
 800f052:	46bd      	mov	sp, r7
 800f054:	b004      	add	sp, #16
 800f056:	bd80      	pop	{r7, pc}

0800f058 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800f058:	b580      	push	{r7, lr}
 800f05a:	b084      	sub	sp, #16
 800f05c:	af00      	add	r7, sp, #0
 800f05e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800f060:	210f      	movs	r1, #15
 800f062:	187b      	adds	r3, r7, r1
 800f064:	2200      	movs	r2, #0
 800f066:	701a      	strb	r2, [r3, #0]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 800f068:	687b      	ldr	r3, [r7, #4]
 800f06a:	2225      	movs	r2, #37	@ 0x25
 800f06c:	5c9b      	ldrb	r3, [r3, r2]
 800f06e:	b2db      	uxtb	r3, r3
 800f070:	2b02      	cmp	r3, #2
 800f072:	d006      	beq.n	800f082 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800f074:	687b      	ldr	r3, [r7, #4]
 800f076:	2204      	movs	r2, #4
 800f078:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 800f07a:	187b      	adds	r3, r7, r1
 800f07c:	2201      	movs	r2, #1
 800f07e:	701a      	strb	r2, [r3, #0]
 800f080:	e02a      	b.n	800f0d8 <HAL_DMA_Abort_IT+0x80>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800f082:	687b      	ldr	r3, [r7, #4]
 800f084:	681b      	ldr	r3, [r3, #0]
 800f086:	681a      	ldr	r2, [r3, #0]
 800f088:	687b      	ldr	r3, [r7, #4]
 800f08a:	681b      	ldr	r3, [r3, #0]
 800f08c:	210e      	movs	r1, #14
 800f08e:	438a      	bics	r2, r1
 800f090:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800f092:	687b      	ldr	r3, [r7, #4]
 800f094:	681b      	ldr	r3, [r3, #0]
 800f096:	681a      	ldr	r2, [r3, #0]
 800f098:	687b      	ldr	r3, [r7, #4]
 800f09a:	681b      	ldr	r3, [r3, #0]
 800f09c:	2101      	movs	r1, #1
 800f09e:	438a      	bics	r2, r1
 800f0a0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800f0a2:	687b      	ldr	r3, [r7, #4]
 800f0a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f0a6:	221c      	movs	r2, #28
 800f0a8:	401a      	ands	r2, r3
 800f0aa:	687b      	ldr	r3, [r7, #4]
 800f0ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f0ae:	2101      	movs	r1, #1
 800f0b0:	4091      	lsls	r1, r2
 800f0b2:	000a      	movs	r2, r1
 800f0b4:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800f0b6:	687b      	ldr	r3, [r7, #4]
 800f0b8:	2225      	movs	r2, #37	@ 0x25
 800f0ba:	2101      	movs	r1, #1
 800f0bc:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800f0be:	687b      	ldr	r3, [r7, #4]
 800f0c0:	2224      	movs	r2, #36	@ 0x24
 800f0c2:	2100      	movs	r1, #0
 800f0c4:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800f0c6:	687b      	ldr	r3, [r7, #4]
 800f0c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f0ca:	2b00      	cmp	r3, #0
 800f0cc:	d004      	beq.n	800f0d8 <HAL_DMA_Abort_IT+0x80>
    {
      hdma->XferAbortCallback(hdma);
 800f0ce:	687b      	ldr	r3, [r7, #4]
 800f0d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f0d2:	687a      	ldr	r2, [r7, #4]
 800f0d4:	0010      	movs	r0, r2
 800f0d6:	4798      	blx	r3
    }
  }
  return status;
 800f0d8:	230f      	movs	r3, #15
 800f0da:	18fb      	adds	r3, r7, r3
 800f0dc:	781b      	ldrb	r3, [r3, #0]
}
 800f0de:	0018      	movs	r0, r3
 800f0e0:	46bd      	mov	sp, r7
 800f0e2:	b004      	add	sp, #16
 800f0e4:	bd80      	pop	{r7, pc}

0800f0e6 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800f0e6:	b580      	push	{r7, lr}
 800f0e8:	b084      	sub	sp, #16
 800f0ea:	af00      	add	r7, sp, #0
 800f0ec:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800f0ee:	687b      	ldr	r3, [r7, #4]
 800f0f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f0f2:	681b      	ldr	r3, [r3, #0]
 800f0f4:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800f0f6:	687b      	ldr	r3, [r7, #4]
 800f0f8:	681b      	ldr	r3, [r3, #0]
 800f0fa:	681b      	ldr	r3, [r3, #0]
 800f0fc:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 800f0fe:	687b      	ldr	r3, [r7, #4]
 800f100:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f102:	221c      	movs	r2, #28
 800f104:	4013      	ands	r3, r2
 800f106:	2204      	movs	r2, #4
 800f108:	409a      	lsls	r2, r3
 800f10a:	0013      	movs	r3, r2
 800f10c:	68fa      	ldr	r2, [r7, #12]
 800f10e:	4013      	ands	r3, r2
 800f110:	d026      	beq.n	800f160 <HAL_DMA_IRQHandler+0x7a>
 800f112:	68bb      	ldr	r3, [r7, #8]
 800f114:	2204      	movs	r2, #4
 800f116:	4013      	ands	r3, r2
 800f118:	d022      	beq.n	800f160 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800f11a:	687b      	ldr	r3, [r7, #4]
 800f11c:	681b      	ldr	r3, [r3, #0]
 800f11e:	681b      	ldr	r3, [r3, #0]
 800f120:	2220      	movs	r2, #32
 800f122:	4013      	ands	r3, r2
 800f124:	d107      	bne.n	800f136 <HAL_DMA_IRQHandler+0x50>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800f126:	687b      	ldr	r3, [r7, #4]
 800f128:	681b      	ldr	r3, [r3, #0]
 800f12a:	681a      	ldr	r2, [r3, #0]
 800f12c:	687b      	ldr	r3, [r7, #4]
 800f12e:	681b      	ldr	r3, [r3, #0]
 800f130:	2104      	movs	r1, #4
 800f132:	438a      	bics	r2, r1
 800f134:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1cU);
 800f136:	687b      	ldr	r3, [r7, #4]
 800f138:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f13a:	221c      	movs	r2, #28
 800f13c:	401a      	ands	r2, r3
 800f13e:	687b      	ldr	r3, [r7, #4]
 800f140:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f142:	2104      	movs	r1, #4
 800f144:	4091      	lsls	r1, r2
 800f146:	000a      	movs	r2, r1
 800f148:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

     if(hdma->XferHalfCpltCallback != NULL)
 800f14a:	687b      	ldr	r3, [r7, #4]
 800f14c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f14e:	2b00      	cmp	r3, #0
 800f150:	d100      	bne.n	800f154 <HAL_DMA_IRQHandler+0x6e>
 800f152:	e071      	b.n	800f238 <HAL_DMA_IRQHandler+0x152>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 800f154:	687b      	ldr	r3, [r7, #4]
 800f156:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f158:	687a      	ldr	r2, [r7, #4]
 800f15a:	0010      	movs	r0, r2
 800f15c:	4798      	blx	r3
     if(hdma->XferHalfCpltCallback != NULL)
 800f15e:	e06b      	b.n	800f238 <HAL_DMA_IRQHandler+0x152>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 800f160:	687b      	ldr	r3, [r7, #4]
 800f162:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f164:	221c      	movs	r2, #28
 800f166:	4013      	ands	r3, r2
 800f168:	2202      	movs	r2, #2
 800f16a:	409a      	lsls	r2, r3
 800f16c:	0013      	movs	r3, r2
 800f16e:	68fa      	ldr	r2, [r7, #12]
 800f170:	4013      	ands	r3, r2
 800f172:	d02d      	beq.n	800f1d0 <HAL_DMA_IRQHandler+0xea>
 800f174:	68bb      	ldr	r3, [r7, #8]
 800f176:	2202      	movs	r2, #2
 800f178:	4013      	ands	r3, r2
 800f17a:	d029      	beq.n	800f1d0 <HAL_DMA_IRQHandler+0xea>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800f17c:	687b      	ldr	r3, [r7, #4]
 800f17e:	681b      	ldr	r3, [r3, #0]
 800f180:	681b      	ldr	r3, [r3, #0]
 800f182:	2220      	movs	r2, #32
 800f184:	4013      	ands	r3, r2
 800f186:	d10b      	bne.n	800f1a0 <HAL_DMA_IRQHandler+0xba>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800f188:	687b      	ldr	r3, [r7, #4]
 800f18a:	681b      	ldr	r3, [r3, #0]
 800f18c:	681a      	ldr	r2, [r3, #0]
 800f18e:	687b      	ldr	r3, [r7, #4]
 800f190:	681b      	ldr	r3, [r3, #0]
 800f192:	210a      	movs	r1, #10
 800f194:	438a      	bics	r2, r1
 800f196:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800f198:	687b      	ldr	r3, [r7, #4]
 800f19a:	2225      	movs	r2, #37	@ 0x25
 800f19c:	2101      	movs	r1, #1
 800f19e:	5499      	strb	r1, [r3, r2]
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 800f1a0:	687b      	ldr	r3, [r7, #4]
 800f1a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f1a4:	221c      	movs	r2, #28
 800f1a6:	401a      	ands	r2, r3
 800f1a8:	687b      	ldr	r3, [r7, #4]
 800f1aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f1ac:	2102      	movs	r1, #2
 800f1ae:	4091      	lsls	r1, r2
 800f1b0:	000a      	movs	r2, r1
 800f1b2:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800f1b4:	687b      	ldr	r3, [r7, #4]
 800f1b6:	2224      	movs	r2, #36	@ 0x24
 800f1b8:	2100      	movs	r1, #0
 800f1ba:	5499      	strb	r1, [r3, r2]

    if(hdma->XferCpltCallback != NULL)
 800f1bc:	687b      	ldr	r3, [r7, #4]
 800f1be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f1c0:	2b00      	cmp	r3, #0
 800f1c2:	d039      	beq.n	800f238 <HAL_DMA_IRQHandler+0x152>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800f1c4:	687b      	ldr	r3, [r7, #4]
 800f1c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f1c8:	687a      	ldr	r2, [r7, #4]
 800f1ca:	0010      	movs	r0, r2
 800f1cc:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800f1ce:	e033      	b.n	800f238 <HAL_DMA_IRQHandler+0x152>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TE)))
 800f1d0:	687b      	ldr	r3, [r7, #4]
 800f1d2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f1d4:	221c      	movs	r2, #28
 800f1d6:	4013      	ands	r3, r2
 800f1d8:	2208      	movs	r2, #8
 800f1da:	409a      	lsls	r2, r3
 800f1dc:	0013      	movs	r3, r2
 800f1de:	68fa      	ldr	r2, [r7, #12]
 800f1e0:	4013      	ands	r3, r2
 800f1e2:	d02a      	beq.n	800f23a <HAL_DMA_IRQHandler+0x154>
 800f1e4:	68bb      	ldr	r3, [r7, #8]
 800f1e6:	2208      	movs	r2, #8
 800f1e8:	4013      	ands	r3, r2
 800f1ea:	d026      	beq.n	800f23a <HAL_DMA_IRQHandler+0x154>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800f1ec:	687b      	ldr	r3, [r7, #4]
 800f1ee:	681b      	ldr	r3, [r3, #0]
 800f1f0:	681a      	ldr	r2, [r3, #0]
 800f1f2:	687b      	ldr	r3, [r7, #4]
 800f1f4:	681b      	ldr	r3, [r3, #0]
 800f1f6:	210e      	movs	r1, #14
 800f1f8:	438a      	bics	r2, r1
 800f1fa:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800f1fc:	687b      	ldr	r3, [r7, #4]
 800f1fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f200:	221c      	movs	r2, #28
 800f202:	401a      	ands	r2, r3
 800f204:	687b      	ldr	r3, [r7, #4]
 800f206:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f208:	2101      	movs	r1, #1
 800f20a:	4091      	lsls	r1, r2
 800f20c:	000a      	movs	r2, r1
 800f20e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800f210:	687b      	ldr	r3, [r7, #4]
 800f212:	2201      	movs	r2, #1
 800f214:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800f216:	687b      	ldr	r3, [r7, #4]
 800f218:	2225      	movs	r2, #37	@ 0x25
 800f21a:	2101      	movs	r1, #1
 800f21c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800f21e:	687b      	ldr	r3, [r7, #4]
 800f220:	2224      	movs	r2, #36	@ 0x24
 800f222:	2100      	movs	r1, #0
 800f224:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 800f226:	687b      	ldr	r3, [r7, #4]
 800f228:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f22a:	2b00      	cmp	r3, #0
 800f22c:	d005      	beq.n	800f23a <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800f22e:	687b      	ldr	r3, [r7, #4]
 800f230:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f232:	687a      	ldr	r2, [r7, #4]
 800f234:	0010      	movs	r0, r2
 800f236:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800f238:	46c0      	nop			@ (mov r8, r8)
 800f23a:	46c0      	nop			@ (mov r8, r8)
}
 800f23c:	46bd      	mov	sp, r7
 800f23e:	b004      	add	sp, #16
 800f240:	bd80      	pop	{r7, pc}

0800f242 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800f242:	b580      	push	{r7, lr}
 800f244:	b082      	sub	sp, #8
 800f246:	af00      	add	r7, sp, #0
 800f248:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 800f24a:	687b      	ldr	r3, [r7, #4]
 800f24c:	2225      	movs	r2, #37	@ 0x25
 800f24e:	5c9b      	ldrb	r3, [r3, r2]
 800f250:	b2db      	uxtb	r3, r3
}
 800f252:	0018      	movs	r0, r3
 800f254:	46bd      	mov	sp, r7
 800f256:	b002      	add	sp, #8
 800f258:	bd80      	pop	{r7, pc}

0800f25a <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The amount of data items to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800f25a:	b580      	push	{r7, lr}
 800f25c:	b084      	sub	sp, #16
 800f25e:	af00      	add	r7, sp, #0
 800f260:	60f8      	str	r0, [r7, #12]
 800f262:	60b9      	str	r1, [r7, #8]
 800f264:	607a      	str	r2, [r7, #4]
 800f266:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800f268:	68fb      	ldr	r3, [r7, #12]
 800f26a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f26c:	221c      	movs	r2, #28
 800f26e:	401a      	ands	r2, r3
 800f270:	68fb      	ldr	r3, [r7, #12]
 800f272:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f274:	2101      	movs	r1, #1
 800f276:	4091      	lsls	r1, r2
 800f278:	000a      	movs	r2, r1
 800f27a:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800f27c:	68fb      	ldr	r3, [r7, #12]
 800f27e:	681b      	ldr	r3, [r3, #0]
 800f280:	683a      	ldr	r2, [r7, #0]
 800f282:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800f284:	68fb      	ldr	r3, [r7, #12]
 800f286:	689b      	ldr	r3, [r3, #8]
 800f288:	2b10      	cmp	r3, #16
 800f28a:	d108      	bne.n	800f29e <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800f28c:	68fb      	ldr	r3, [r7, #12]
 800f28e:	681b      	ldr	r3, [r3, #0]
 800f290:	687a      	ldr	r2, [r7, #4]
 800f292:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800f294:	68fb      	ldr	r3, [r7, #12]
 800f296:	681b      	ldr	r3, [r3, #0]
 800f298:	68ba      	ldr	r2, [r7, #8]
 800f29a:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800f29c:	e007      	b.n	800f2ae <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 800f29e:	68fb      	ldr	r3, [r7, #12]
 800f2a0:	681b      	ldr	r3, [r3, #0]
 800f2a2:	68ba      	ldr	r2, [r7, #8]
 800f2a4:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800f2a6:	68fb      	ldr	r3, [r7, #12]
 800f2a8:	681b      	ldr	r3, [r3, #0]
 800f2aa:	687a      	ldr	r2, [r7, #4]
 800f2ac:	60da      	str	r2, [r3, #12]
}
 800f2ae:	46c0      	nop			@ (mov r8, r8)
 800f2b0:	46bd      	mov	sp, r7
 800f2b2:	b004      	add	sp, #16
 800f2b4:	bd80      	pop	{r7, pc}
	...

0800f2b8 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 800f2b8:	b580      	push	{r7, lr}
 800f2ba:	b084      	sub	sp, #16
 800f2bc:	af00      	add	r7, sp, #0
 800f2be:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 800f2c0:	f7ff f8d2 	bl	800e468 <HAL_GetTick>
 800f2c4:	0003      	movs	r3, r0
 800f2c6:	60fb      	str	r3, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 800f2c8:	e00f      	b.n	800f2ea <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 800f2ca:	687b      	ldr	r3, [r7, #4]
 800f2cc:	3301      	adds	r3, #1
 800f2ce:	d00c      	beq.n	800f2ea <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 800f2d0:	687b      	ldr	r3, [r7, #4]
 800f2d2:	2b00      	cmp	r3, #0
 800f2d4:	d007      	beq.n	800f2e6 <FLASH_WaitForLastOperation+0x2e>
 800f2d6:	f7ff f8c7 	bl	800e468 <HAL_GetTick>
 800f2da:	0002      	movs	r2, r0
 800f2dc:	68fb      	ldr	r3, [r7, #12]
 800f2de:	1ad3      	subs	r3, r2, r3
 800f2e0:	687a      	ldr	r2, [r7, #4]
 800f2e2:	429a      	cmp	r2, r3
 800f2e4:	d201      	bcs.n	800f2ea <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 800f2e6:	2303      	movs	r3, #3
 800f2e8:	e052      	b.n	800f390 <FLASH_WaitForLastOperation+0xd8>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 800f2ea:	4b2b      	ldr	r3, [pc, #172]	@ (800f398 <FLASH_WaitForLastOperation+0xe0>)
 800f2ec:	699b      	ldr	r3, [r3, #24]
 800f2ee:	2201      	movs	r2, #1
 800f2f0:	4013      	ands	r3, r2
 800f2f2:	2b01      	cmp	r3, #1
 800f2f4:	d0e9      	beq.n	800f2ca <FLASH_WaitForLastOperation+0x12>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 800f2f6:	4b28      	ldr	r3, [pc, #160]	@ (800f398 <FLASH_WaitForLastOperation+0xe0>)
 800f2f8:	699b      	ldr	r3, [r3, #24]
 800f2fa:	2202      	movs	r2, #2
 800f2fc:	4013      	ands	r3, r2
 800f2fe:	2b02      	cmp	r3, #2
 800f300:	d102      	bne.n	800f308 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800f302:	4b25      	ldr	r3, [pc, #148]	@ (800f398 <FLASH_WaitForLastOperation+0xe0>)
 800f304:	2202      	movs	r2, #2
 800f306:	619a      	str	r2, [r3, #24]
  }
  
  if( __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)     || 
 800f308:	4b23      	ldr	r3, [pc, #140]	@ (800f398 <FLASH_WaitForLastOperation+0xe0>)
 800f30a:	699a      	ldr	r2, [r3, #24]
 800f30c:	2380      	movs	r3, #128	@ 0x80
 800f30e:	005b      	lsls	r3, r3, #1
 800f310:	401a      	ands	r2, r3
 800f312:	2380      	movs	r3, #128	@ 0x80
 800f314:	005b      	lsls	r3, r3, #1
 800f316:	429a      	cmp	r2, r3
 800f318:	d035      	beq.n	800f386 <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR)     || 
 800f31a:	4b1f      	ldr	r3, [pc, #124]	@ (800f398 <FLASH_WaitForLastOperation+0xe0>)
 800f31c:	699a      	ldr	r2, [r3, #24]
 800f31e:	2380      	movs	r3, #128	@ 0x80
 800f320:	009b      	lsls	r3, r3, #2
 800f322:	401a      	ands	r2, r3
  if( __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)     || 
 800f324:	2380      	movs	r3, #128	@ 0x80
 800f326:	009b      	lsls	r3, r3, #2
 800f328:	429a      	cmp	r2, r3
 800f32a:	d02c      	beq.n	800f386 <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR)     || 
 800f32c:	4b1a      	ldr	r3, [pc, #104]	@ (800f398 <FLASH_WaitForLastOperation+0xe0>)
 800f32e:	699a      	ldr	r2, [r3, #24]
 800f330:	2380      	movs	r3, #128	@ 0x80
 800f332:	00db      	lsls	r3, r3, #3
 800f334:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR)     || 
 800f336:	2380      	movs	r3, #128	@ 0x80
 800f338:	00db      	lsls	r3, r3, #3
 800f33a:	429a      	cmp	r2, r3
 800f33c:	d023      	beq.n	800f386 <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR)    || 
 800f33e:	4b16      	ldr	r3, [pc, #88]	@ (800f398 <FLASH_WaitForLastOperation+0xe0>)
 800f340:	699a      	ldr	r2, [r3, #24]
 800f342:	2380      	movs	r3, #128	@ 0x80
 800f344:	011b      	lsls	r3, r3, #4
 800f346:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR)     || 
 800f348:	2380      	movs	r3, #128	@ 0x80
 800f34a:	011b      	lsls	r3, r3, #4
 800f34c:	429a      	cmp	r2, r3
 800f34e:	d01a      	beq.n	800f386 <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR)      || 
 800f350:	4b11      	ldr	r3, [pc, #68]	@ (800f398 <FLASH_WaitForLastOperation+0xe0>)
 800f352:	699a      	ldr	r2, [r3, #24]
 800f354:	2380      	movs	r3, #128	@ 0x80
 800f356:	019b      	lsls	r3, r3, #6
 800f358:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR)    || 
 800f35a:	2380      	movs	r3, #128	@ 0x80
 800f35c:	019b      	lsls	r3, r3, #6
 800f35e:	429a      	cmp	r2, r3
 800f360:	d011      	beq.n	800f386 <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_FWWERR)     || 
 800f362:	4b0d      	ldr	r3, [pc, #52]	@ (800f398 <FLASH_WaitForLastOperation+0xe0>)
 800f364:	699a      	ldr	r2, [r3, #24]
 800f366:	2380      	movs	r3, #128	@ 0x80
 800f368:	029b      	lsls	r3, r3, #10
 800f36a:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR)      || 
 800f36c:	2380      	movs	r3, #128	@ 0x80
 800f36e:	029b      	lsls	r3, r3, #10
 800f370:	429a      	cmp	r2, r3
 800f372:	d008      	beq.n	800f386 <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_NOTZEROERR) )
 800f374:	4b08      	ldr	r3, [pc, #32]	@ (800f398 <FLASH_WaitForLastOperation+0xe0>)
 800f376:	699a      	ldr	r2, [r3, #24]
 800f378:	2380      	movs	r3, #128	@ 0x80
 800f37a:	025b      	lsls	r3, r3, #9
 800f37c:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_FWWERR)     || 
 800f37e:	2380      	movs	r3, #128	@ 0x80
 800f380:	025b      	lsls	r3, r3, #9
 800f382:	429a      	cmp	r2, r3
 800f384:	d103      	bne.n	800f38e <FLASH_WaitForLastOperation+0xd6>
     *           cut of the STM32L031xx device or the first cut of the STM32L041xx
     *           device, this error should be ignored. The revId of the device
     *           can be retrieved via the HAL_GetREVID() function.
     *
     */
    FLASH_SetErrorCode();
 800f386:	f000 f809 	bl	800f39c <FLASH_SetErrorCode>
    return HAL_ERROR;
 800f38a:	2301      	movs	r3, #1
 800f38c:	e000      	b.n	800f390 <FLASH_WaitForLastOperation+0xd8>
  }

  /* There is no error flag set */
  return HAL_OK;
 800f38e:	2300      	movs	r3, #0
}
 800f390:	0018      	movs	r0, r3
 800f392:	46bd      	mov	sp, r7
 800f394:	b004      	add	sp, #16
 800f396:	bd80      	pop	{r7, pc}
 800f398:	40022000 	.word	0x40022000

0800f39c <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 800f39c:	b580      	push	{r7, lr}
 800f39e:	b082      	sub	sp, #8
 800f3a0:	af00      	add	r7, sp, #0
  uint32_t flags = 0;
 800f3a2:	2300      	movs	r3, #0
 800f3a4:	607b      	str	r3, [r7, #4]
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 800f3a6:	4b49      	ldr	r3, [pc, #292]	@ (800f4cc <FLASH_SetErrorCode+0x130>)
 800f3a8:	699a      	ldr	r2, [r3, #24]
 800f3aa:	2380      	movs	r3, #128	@ 0x80
 800f3ac:	005b      	lsls	r3, r3, #1
 800f3ae:	401a      	ands	r2, r3
 800f3b0:	2380      	movs	r3, #128	@ 0x80
 800f3b2:	005b      	lsls	r3, r3, #1
 800f3b4:	429a      	cmp	r2, r3
 800f3b6:	d10a      	bne.n	800f3ce <FLASH_SetErrorCode+0x32>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 800f3b8:	4b45      	ldr	r3, [pc, #276]	@ (800f4d0 <FLASH_SetErrorCode+0x134>)
 800f3ba:	695b      	ldr	r3, [r3, #20]
 800f3bc:	2202      	movs	r2, #2
 800f3be:	431a      	orrs	r2, r3
 800f3c0:	4b43      	ldr	r3, [pc, #268]	@ (800f4d0 <FLASH_SetErrorCode+0x134>)
 800f3c2:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_WRPERR;
 800f3c4:	687b      	ldr	r3, [r7, #4]
 800f3c6:	2280      	movs	r2, #128	@ 0x80
 800f3c8:	0052      	lsls	r2, r2, #1
 800f3ca:	4313      	orrs	r3, r2
 800f3cc:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR))
 800f3ce:	4b3f      	ldr	r3, [pc, #252]	@ (800f4cc <FLASH_SetErrorCode+0x130>)
 800f3d0:	699a      	ldr	r2, [r3, #24]
 800f3d2:	2380      	movs	r3, #128	@ 0x80
 800f3d4:	009b      	lsls	r3, r3, #2
 800f3d6:	401a      	ands	r2, r3
 800f3d8:	2380      	movs	r3, #128	@ 0x80
 800f3da:	009b      	lsls	r3, r3, #2
 800f3dc:	429a      	cmp	r2, r3
 800f3de:	d10a      	bne.n	800f3f6 <FLASH_SetErrorCode+0x5a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 800f3e0:	4b3b      	ldr	r3, [pc, #236]	@ (800f4d0 <FLASH_SetErrorCode+0x134>)
 800f3e2:	695b      	ldr	r3, [r3, #20]
 800f3e4:	2201      	movs	r2, #1
 800f3e6:	431a      	orrs	r2, r3
 800f3e8:	4b39      	ldr	r3, [pc, #228]	@ (800f4d0 <FLASH_SetErrorCode+0x134>)
 800f3ea:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_PGAERR;
 800f3ec:	687b      	ldr	r3, [r7, #4]
 800f3ee:	2280      	movs	r2, #128	@ 0x80
 800f3f0:	0092      	lsls	r2, r2, #2
 800f3f2:	4313      	orrs	r3, r2
 800f3f4:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR))
 800f3f6:	4b35      	ldr	r3, [pc, #212]	@ (800f4cc <FLASH_SetErrorCode+0x130>)
 800f3f8:	699a      	ldr	r2, [r3, #24]
 800f3fa:	2380      	movs	r3, #128	@ 0x80
 800f3fc:	00db      	lsls	r3, r3, #3
 800f3fe:	401a      	ands	r2, r3
 800f400:	2380      	movs	r3, #128	@ 0x80
 800f402:	00db      	lsls	r3, r3, #3
 800f404:	429a      	cmp	r2, r3
 800f406:	d10a      	bne.n	800f41e <FLASH_SetErrorCode+0x82>
  { 
    pFlash.ErrorCode |= HAL_FLASH_ERROR_SIZE;
 800f408:	4b31      	ldr	r3, [pc, #196]	@ (800f4d0 <FLASH_SetErrorCode+0x134>)
 800f40a:	695b      	ldr	r3, [r3, #20]
 800f40c:	2208      	movs	r2, #8
 800f40e:	431a      	orrs	r2, r3
 800f410:	4b2f      	ldr	r3, [pc, #188]	@ (800f4d0 <FLASH_SetErrorCode+0x134>)
 800f412:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_SIZERR;
 800f414:	687b      	ldr	r3, [r7, #4]
 800f416:	2280      	movs	r2, #128	@ 0x80
 800f418:	00d2      	lsls	r2, r2, #3
 800f41a:	4313      	orrs	r3, r2
 800f41c:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 800f41e:	4b2b      	ldr	r3, [pc, #172]	@ (800f4cc <FLASH_SetErrorCode+0x130>)
 800f420:	699a      	ldr	r2, [r3, #24]
 800f422:	2380      	movs	r3, #128	@ 0x80
 800f424:	011b      	lsls	r3, r3, #4
 800f426:	401a      	ands	r2, r3
 800f428:	2380      	movs	r3, #128	@ 0x80
 800f42a:	011b      	lsls	r3, r3, #4
 800f42c:	429a      	cmp	r2, r3
 800f42e:	d10a      	bne.n	800f446 <FLASH_SetErrorCode+0xaa>
     *           cut of the STM32L031xx device or the first cut of the STM32L041xx
     *           device, this error should be ignored. The revId of the device
     *           can be retrieved via the HAL_GetREVID() function.
     *
     */
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 800f430:	4b27      	ldr	r3, [pc, #156]	@ (800f4d0 <FLASH_SetErrorCode+0x134>)
 800f432:	695b      	ldr	r3, [r3, #20]
 800f434:	2204      	movs	r2, #4
 800f436:	431a      	orrs	r2, r3
 800f438:	4b25      	ldr	r3, [pc, #148]	@ (800f4d0 <FLASH_SetErrorCode+0x134>)
 800f43a:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_OPTVERR;
 800f43c:	687b      	ldr	r3, [r7, #4]
 800f43e:	2280      	movs	r2, #128	@ 0x80
 800f440:	0112      	lsls	r2, r2, #4
 800f442:	4313      	orrs	r3, r2
 800f444:	607b      	str	r3, [r7, #4]
  }

  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR))
 800f446:	4b21      	ldr	r3, [pc, #132]	@ (800f4cc <FLASH_SetErrorCode+0x130>)
 800f448:	699a      	ldr	r2, [r3, #24]
 800f44a:	2380      	movs	r3, #128	@ 0x80
 800f44c:	019b      	lsls	r3, r3, #6
 800f44e:	401a      	ands	r2, r3
 800f450:	2380      	movs	r3, #128	@ 0x80
 800f452:	019b      	lsls	r3, r3, #6
 800f454:	429a      	cmp	r2, r3
 800f456:	d10a      	bne.n	800f46e <FLASH_SetErrorCode+0xd2>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 800f458:	4b1d      	ldr	r3, [pc, #116]	@ (800f4d0 <FLASH_SetErrorCode+0x134>)
 800f45a:	695b      	ldr	r3, [r3, #20]
 800f45c:	2210      	movs	r2, #16
 800f45e:	431a      	orrs	r2, r3
 800f460:	4b1b      	ldr	r3, [pc, #108]	@ (800f4d0 <FLASH_SetErrorCode+0x134>)
 800f462:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_RDERR;
 800f464:	687b      	ldr	r3, [r7, #4]
 800f466:	2280      	movs	r2, #128	@ 0x80
 800f468:	0192      	lsls	r2, r2, #6
 800f46a:	4313      	orrs	r3, r2
 800f46c:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_FWWERR))
 800f46e:	4b17      	ldr	r3, [pc, #92]	@ (800f4cc <FLASH_SetErrorCode+0x130>)
 800f470:	699a      	ldr	r2, [r3, #24]
 800f472:	2380      	movs	r3, #128	@ 0x80
 800f474:	029b      	lsls	r3, r3, #10
 800f476:	401a      	ands	r2, r3
 800f478:	2380      	movs	r3, #128	@ 0x80
 800f47a:	029b      	lsls	r3, r3, #10
 800f47c:	429a      	cmp	r2, r3
 800f47e:	d109      	bne.n	800f494 <FLASH_SetErrorCode+0xf8>
  { 
    pFlash.ErrorCode |= HAL_FLASH_ERROR_FWWERR;
 800f480:	4b13      	ldr	r3, [pc, #76]	@ (800f4d0 <FLASH_SetErrorCode+0x134>)
 800f482:	695b      	ldr	r3, [r3, #20]
 800f484:	2220      	movs	r2, #32
 800f486:	431a      	orrs	r2, r3
 800f488:	4b11      	ldr	r3, [pc, #68]	@ (800f4d0 <FLASH_SetErrorCode+0x134>)
 800f48a:	615a      	str	r2, [r3, #20]
    flags |= HAL_FLASH_ERROR_FWWERR;
 800f48c:	687b      	ldr	r3, [r7, #4]
 800f48e:	2220      	movs	r2, #32
 800f490:	4313      	orrs	r3, r2
 800f492:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_NOTZEROERR))
 800f494:	4b0d      	ldr	r3, [pc, #52]	@ (800f4cc <FLASH_SetErrorCode+0x130>)
 800f496:	699a      	ldr	r2, [r3, #24]
 800f498:	2380      	movs	r3, #128	@ 0x80
 800f49a:	025b      	lsls	r3, r3, #9
 800f49c:	401a      	ands	r2, r3
 800f49e:	2380      	movs	r3, #128	@ 0x80
 800f4a0:	025b      	lsls	r3, r3, #9
 800f4a2:	429a      	cmp	r2, r3
 800f4a4:	d10a      	bne.n	800f4bc <FLASH_SetErrorCode+0x120>
  { 
    pFlash.ErrorCode |= HAL_FLASH_ERROR_NOTZERO;
 800f4a6:	4b0a      	ldr	r3, [pc, #40]	@ (800f4d0 <FLASH_SetErrorCode+0x134>)
 800f4a8:	695b      	ldr	r3, [r3, #20]
 800f4aa:	2240      	movs	r2, #64	@ 0x40
 800f4ac:	431a      	orrs	r2, r3
 800f4ae:	4b08      	ldr	r3, [pc, #32]	@ (800f4d0 <FLASH_SetErrorCode+0x134>)
 800f4b0:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_NOTZEROERR;
 800f4b2:	687b      	ldr	r3, [r7, #4]
 800f4b4:	2280      	movs	r2, #128	@ 0x80
 800f4b6:	0252      	lsls	r2, r2, #9
 800f4b8:	4313      	orrs	r3, r2
 800f4ba:	607b      	str	r3, [r7, #4]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 800f4bc:	4b03      	ldr	r3, [pc, #12]	@ (800f4cc <FLASH_SetErrorCode+0x130>)
 800f4be:	687a      	ldr	r2, [r7, #4]
 800f4c0:	619a      	str	r2, [r3, #24]
}  
 800f4c2:	46c0      	nop			@ (mov r8, r8)
 800f4c4:	46bd      	mov	sp, r7
 800f4c6:	b002      	add	sp, #8
 800f4c8:	bd80      	pop	{r7, pc}
 800f4ca:	46c0      	nop			@ (mov r8, r8)
 800f4cc:	40022000 	.word	0x40022000
 800f4d0:	20002598 	.word	0x20002598

0800f4d4 <HAL_FLASHEx_DATAEEPROM_Unlock>:
/**
  * @brief  Unlocks the data memory and FLASH_PECR register access.
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_DATAEEPROM_Unlock(void)
{
 800f4d4:	b580      	push	{r7, lr}
 800f4d6:	b084      	sub	sp, #16
 800f4d8:	af00      	add	r7, sp, #0
  uint32_t primask_bit;

  if((FLASH->PECR & FLASH_PECR_PELOCK) != RESET)
 800f4da:	4b12      	ldr	r3, [pc, #72]	@ (800f524 <HAL_FLASHEx_DATAEEPROM_Unlock+0x50>)
 800f4dc:	685b      	ldr	r3, [r3, #4]
 800f4de:	2201      	movs	r2, #1
 800f4e0:	4013      	ands	r3, r2
 800f4e2:	d019      	beq.n	800f518 <HAL_FLASHEx_DATAEEPROM_Unlock+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f4e4:	f3ef 8310 	mrs	r3, PRIMASK
 800f4e8:	607b      	str	r3, [r7, #4]
  return(result);
 800f4ea:	687b      	ldr	r3, [r7, #4]
  {  
    /* Disable interrupts to avoid any interruption during unlock sequence */
    primask_bit = __get_PRIMASK();
 800f4ec:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 800f4ee:	b672      	cpsid	i
}
 800f4f0:	46c0      	nop			@ (mov r8, r8)
    __disable_irq();

    /* Unlocking the Data memory and FLASH_PECR register access*/
    FLASH->PEKEYR = FLASH_PEKEY1;
 800f4f2:	4b0c      	ldr	r3, [pc, #48]	@ (800f524 <HAL_FLASHEx_DATAEEPROM_Unlock+0x50>)
 800f4f4:	4a0c      	ldr	r2, [pc, #48]	@ (800f528 <HAL_FLASHEx_DATAEEPROM_Unlock+0x54>)
 800f4f6:	60da      	str	r2, [r3, #12]
    FLASH->PEKEYR = FLASH_PEKEY2;
 800f4f8:	4b0a      	ldr	r3, [pc, #40]	@ (800f524 <HAL_FLASHEx_DATAEEPROM_Unlock+0x50>)
 800f4fa:	4a0c      	ldr	r2, [pc, #48]	@ (800f52c <HAL_FLASHEx_DATAEEPROM_Unlock+0x58>)
 800f4fc:	60da      	str	r2, [r3, #12]
 800f4fe:	68fb      	ldr	r3, [r7, #12]
 800f500:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800f502:	68bb      	ldr	r3, [r7, #8]
 800f504:	f383 8810 	msr	PRIMASK, r3
}
 800f508:	46c0      	nop			@ (mov r8, r8)

    /* Re-enable the interrupts: restore previous priority mask */
    __set_PRIMASK(primask_bit);

    if((FLASH->PECR & FLASH_PECR_PELOCK) != RESET)
 800f50a:	4b06      	ldr	r3, [pc, #24]	@ (800f524 <HAL_FLASHEx_DATAEEPROM_Unlock+0x50>)
 800f50c:	685b      	ldr	r3, [r3, #4]
 800f50e:	2201      	movs	r2, #1
 800f510:	4013      	ands	r3, r2
 800f512:	d001      	beq.n	800f518 <HAL_FLASHEx_DATAEEPROM_Unlock+0x44>
    {
      return HAL_ERROR;
 800f514:	2301      	movs	r3, #1
 800f516:	e000      	b.n	800f51a <HAL_FLASHEx_DATAEEPROM_Unlock+0x46>
    }
  }

  return HAL_OK;  
 800f518:	2300      	movs	r3, #0
}
 800f51a:	0018      	movs	r0, r3
 800f51c:	46bd      	mov	sp, r7
 800f51e:	b004      	add	sp, #16
 800f520:	bd80      	pop	{r7, pc}
 800f522:	46c0      	nop			@ (mov r8, r8)
 800f524:	40022000 	.word	0x40022000
 800f528:	89abcdef 	.word	0x89abcdef
 800f52c:	02030405 	.word	0x02030405

0800f530 <HAL_FLASHEx_DATAEEPROM_Lock>:
/**
  * @brief  Locks the Data memory and FLASH_PECR register access.
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_DATAEEPROM_Lock(void)
{
 800f530:	b580      	push	{r7, lr}
 800f532:	af00      	add	r7, sp, #0
  /* Set the PELOCK Bit to lock the data memory and FLASH_PECR register access */
  SET_BIT(FLASH->PECR, FLASH_PECR_PELOCK);
 800f534:	4b04      	ldr	r3, [pc, #16]	@ (800f548 <HAL_FLASHEx_DATAEEPROM_Lock+0x18>)
 800f536:	685a      	ldr	r2, [r3, #4]
 800f538:	4b03      	ldr	r3, [pc, #12]	@ (800f548 <HAL_FLASHEx_DATAEEPROM_Lock+0x18>)
 800f53a:	2101      	movs	r1, #1
 800f53c:	430a      	orrs	r2, r1
 800f53e:	605a      	str	r2, [r3, #4]
  
  return HAL_OK;
 800f540:	2300      	movs	r3, #0
}
 800f542:	0018      	movs	r0, r3
 800f544:	46bd      	mov	sp, r7
 800f546:	bd80      	pop	{r7, pc}
 800f548:	40022000 	.word	0x40022000

0800f54c <HAL_FLASHEx_DATAEEPROM_Erase>:
  *         and Flash program erase control register access(recommended to protect 
  *         the DATA_EEPROM against possible unwanted operation).
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_DATAEEPROM_Erase(uint32_t Address)
{
 800f54c:	b5b0      	push	{r4, r5, r7, lr}
 800f54e:	b084      	sub	sp, #16
 800f550:	af00      	add	r7, sp, #0
 800f552:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800f554:	250f      	movs	r5, #15
 800f556:	197b      	adds	r3, r7, r5
 800f558:	2200      	movs	r2, #0
 800f55a:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_FLASH_DATA_ADDRESS(Address));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800f55c:	197c      	adds	r4, r7, r5
 800f55e:	4b0f      	ldr	r3, [pc, #60]	@ (800f59c <HAL_FLASHEx_DATAEEPROM_Erase+0x50>)
 800f560:	0018      	movs	r0, r3
 800f562:	f7ff fea9 	bl	800f2b8 <FLASH_WaitForLastOperation>
 800f566:	0003      	movs	r3, r0
 800f568:	7023      	strb	r3, [r4, #0]
  
  if(status == HAL_OK)
 800f56a:	0029      	movs	r1, r5
 800f56c:	187b      	adds	r3, r7, r1
 800f56e:	781b      	ldrb	r3, [r3, #0]
 800f570:	2b00      	cmp	r3, #0
 800f572:	d10c      	bne.n	800f58e <HAL_FLASHEx_DATAEEPROM_Erase+0x42>
  {
    /* Clean the error context */
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800f574:	4b0a      	ldr	r3, [pc, #40]	@ (800f5a0 <HAL_FLASHEx_DATAEEPROM_Erase+0x54>)
 800f576:	2200      	movs	r2, #0
 800f578:	615a      	str	r2, [r3, #20]

      /* Write 00000000h to valid address in the data memory */
      *(__IO uint32_t *) Address = 0x00000000U;
 800f57a:	687b      	ldr	r3, [r7, #4]
 800f57c:	2200      	movs	r2, #0
 800f57e:	601a      	str	r2, [r3, #0]

    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800f580:	187c      	adds	r4, r7, r1
 800f582:	4b06      	ldr	r3, [pc, #24]	@ (800f59c <HAL_FLASHEx_DATAEEPROM_Erase+0x50>)
 800f584:	0018      	movs	r0, r3
 800f586:	f7ff fe97 	bl	800f2b8 <FLASH_WaitForLastOperation>
 800f58a:	0003      	movs	r3, r0
 800f58c:	7023      	strb	r3, [r4, #0]
  }
   
  /* Return the erase status */
  return status;
 800f58e:	230f      	movs	r3, #15
 800f590:	18fb      	adds	r3, r7, r3
 800f592:	781b      	ldrb	r3, [r3, #0]
}  
 800f594:	0018      	movs	r0, r3
 800f596:	46bd      	mov	sp, r7
 800f598:	b004      	add	sp, #16
 800f59a:	bdb0      	pop	{r4, r5, r7, pc}
 800f59c:	0000c350 	.word	0x0000c350
 800f5a0:	20002598 	.word	0x20002598

0800f5a4 <HAL_FLASHEx_DATAEEPROM_Program>:
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */

HAL_StatusTypeDef   HAL_FLASHEx_DATAEEPROM_Program(uint32_t TypeProgram, uint32_t Address, uint32_t Data)
{
 800f5a4:	b5b0      	push	{r4, r5, r7, lr}
 800f5a6:	b086      	sub	sp, #24
 800f5a8:	af00      	add	r7, sp, #0
 800f5aa:	60f8      	str	r0, [r7, #12]
 800f5ac:	60b9      	str	r1, [r7, #8]
 800f5ae:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800f5b0:	2317      	movs	r3, #23
 800f5b2:	18fb      	adds	r3, r7, r3
 800f5b4:	2201      	movs	r2, #1
 800f5b6:	701a      	strb	r2, [r3, #0]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800f5b8:	4b24      	ldr	r3, [pc, #144]	@ (800f64c <HAL_FLASHEx_DATAEEPROM_Program+0xa8>)
 800f5ba:	7c1b      	ldrb	r3, [r3, #16]
 800f5bc:	2b01      	cmp	r3, #1
 800f5be:	d101      	bne.n	800f5c4 <HAL_FLASHEx_DATAEEPROM_Program+0x20>
 800f5c0:	2302      	movs	r3, #2
 800f5c2:	e03e      	b.n	800f642 <HAL_FLASHEx_DATAEEPROM_Program+0x9e>
 800f5c4:	4b21      	ldr	r3, [pc, #132]	@ (800f64c <HAL_FLASHEx_DATAEEPROM_Program+0xa8>)
 800f5c6:	2201      	movs	r2, #1
 800f5c8:	741a      	strb	r2, [r3, #16]
  /* Check the parameters */
  assert_param(IS_TYPEPROGRAMDATA(TypeProgram));
  assert_param(IS_FLASH_DATA_ADDRESS(Address));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800f5ca:	2517      	movs	r5, #23
 800f5cc:	197c      	adds	r4, r7, r5
 800f5ce:	4b20      	ldr	r3, [pc, #128]	@ (800f650 <HAL_FLASHEx_DATAEEPROM_Program+0xac>)
 800f5d0:	0018      	movs	r0, r3
 800f5d2:	f7ff fe71 	bl	800f2b8 <FLASH_WaitForLastOperation>
 800f5d6:	0003      	movs	r3, r0
 800f5d8:	7023      	strb	r3, [r4, #0]
  
  if(status == HAL_OK)
 800f5da:	197b      	adds	r3, r7, r5
 800f5dc:	781b      	ldrb	r3, [r3, #0]
 800f5de:	2b00      	cmp	r3, #0
 800f5e0:	d129      	bne.n	800f636 <HAL_FLASHEx_DATAEEPROM_Program+0x92>
  {
    /* Clean the error context */
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800f5e2:	4b1a      	ldr	r3, [pc, #104]	@ (800f64c <HAL_FLASHEx_DATAEEPROM_Program+0xa8>)
 800f5e4:	2200      	movs	r2, #0
 800f5e6:	615a      	str	r2, [r3, #20]

    if(TypeProgram == FLASH_TYPEPROGRAMDATA_WORD)
 800f5e8:	68fb      	ldr	r3, [r7, #12]
 800f5ea:	2b02      	cmp	r3, #2
 800f5ec:	d103      	bne.n	800f5f6 <HAL_FLASHEx_DATAEEPROM_Program+0x52>
    {
      /* Program word (32-bit) at a specified address.*/
      *(__IO uint32_t *)Address = Data;
 800f5ee:	68bb      	ldr	r3, [r7, #8]
 800f5f0:	687a      	ldr	r2, [r7, #4]
 800f5f2:	601a      	str	r2, [r3, #0]
 800f5f4:	e013      	b.n	800f61e <HAL_FLASHEx_DATAEEPROM_Program+0x7a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAMDATA_HALFWORD)
 800f5f6:	68fb      	ldr	r3, [r7, #12]
 800f5f8:	2b01      	cmp	r3, #1
 800f5fa:	d104      	bne.n	800f606 <HAL_FLASHEx_DATAEEPROM_Program+0x62>
    {
      /* Program halfword (16-bit) at a specified address.*/
      *(__IO uint16_t *)Address = (uint16_t) Data;
 800f5fc:	68bb      	ldr	r3, [r7, #8]
 800f5fe:	687a      	ldr	r2, [r7, #4]
 800f600:	b292      	uxth	r2, r2
 800f602:	801a      	strh	r2, [r3, #0]
 800f604:	e00b      	b.n	800f61e <HAL_FLASHEx_DATAEEPROM_Program+0x7a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAMDATA_BYTE)
 800f606:	68fb      	ldr	r3, [r7, #12]
 800f608:	2b00      	cmp	r3, #0
 800f60a:	d104      	bne.n	800f616 <HAL_FLASHEx_DATAEEPROM_Program+0x72>
    {
      /* Program byte (8-bit) at a specified address.*/
      *(__IO uint8_t *)Address = (uint8_t) Data;
 800f60c:	68bb      	ldr	r3, [r7, #8]
 800f60e:	687a      	ldr	r2, [r7, #4]
 800f610:	b2d2      	uxtb	r2, r2
 800f612:	701a      	strb	r2, [r3, #0]
 800f614:	e003      	b.n	800f61e <HAL_FLASHEx_DATAEEPROM_Program+0x7a>
    }
    else
    {
      status = HAL_ERROR;
 800f616:	2317      	movs	r3, #23
 800f618:	18fb      	adds	r3, r7, r3
 800f61a:	2201      	movs	r2, #1
 800f61c:	701a      	strb	r2, [r3, #0]
    }

    if (status == HAL_OK)
 800f61e:	2217      	movs	r2, #23
 800f620:	18bb      	adds	r3, r7, r2
 800f622:	781b      	ldrb	r3, [r3, #0]
 800f624:	2b00      	cmp	r3, #0
 800f626:	d106      	bne.n	800f636 <HAL_FLASHEx_DATAEEPROM_Program+0x92>
    {
      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800f628:	18bc      	adds	r4, r7, r2
 800f62a:	4b09      	ldr	r3, [pc, #36]	@ (800f650 <HAL_FLASHEx_DATAEEPROM_Program+0xac>)
 800f62c:	0018      	movs	r0, r3
 800f62e:	f7ff fe43 	bl	800f2b8 <FLASH_WaitForLastOperation>
 800f632:	0003      	movs	r3, r0
 800f634:	7023      	strb	r3, [r4, #0]
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800f636:	4b05      	ldr	r3, [pc, #20]	@ (800f64c <HAL_FLASHEx_DATAEEPROM_Program+0xa8>)
 800f638:	2200      	movs	r2, #0
 800f63a:	741a      	strb	r2, [r3, #16]

  return status;
 800f63c:	2317      	movs	r3, #23
 800f63e:	18fb      	adds	r3, r7, r3
 800f640:	781b      	ldrb	r3, [r3, #0]
}
 800f642:	0018      	movs	r0, r3
 800f644:	46bd      	mov	sp, r7
 800f646:	b006      	add	sp, #24
 800f648:	bdb0      	pop	{r4, r5, r7, pc}
 800f64a:	46c0      	nop			@ (mov r8, r8)
 800f64c:	20002598 	.word	0x20002598
 800f650:	0000c350 	.word	0x0000c350

0800f654 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800f654:	b580      	push	{r7, lr}
 800f656:	b086      	sub	sp, #24
 800f658:	af00      	add	r7, sp, #0
 800f65a:	6078      	str	r0, [r7, #4]
 800f65c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800f65e:	2300      	movs	r3, #0
 800f660:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800f662:	2300      	movs	r3, #0
 800f664:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 800f666:	2300      	movs	r3, #0
 800f668:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 800f66a:	e155      	b.n	800f918 <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 800f66c:	683b      	ldr	r3, [r7, #0]
 800f66e:	681b      	ldr	r3, [r3, #0]
 800f670:	2101      	movs	r1, #1
 800f672:	697a      	ldr	r2, [r7, #20]
 800f674:	4091      	lsls	r1, r2
 800f676:	000a      	movs	r2, r1
 800f678:	4013      	ands	r3, r2
 800f67a:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 800f67c:	68fb      	ldr	r3, [r7, #12]
 800f67e:	2b00      	cmp	r3, #0
 800f680:	d100      	bne.n	800f684 <HAL_GPIO_Init+0x30>
 800f682:	e146      	b.n	800f912 <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800f684:	683b      	ldr	r3, [r7, #0]
 800f686:	685b      	ldr	r3, [r3, #4]
 800f688:	2203      	movs	r2, #3
 800f68a:	4013      	ands	r3, r2
 800f68c:	2b01      	cmp	r3, #1
 800f68e:	d005      	beq.n	800f69c <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800f690:	683b      	ldr	r3, [r7, #0]
 800f692:	685b      	ldr	r3, [r3, #4]
 800f694:	2203      	movs	r2, #3
 800f696:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800f698:	2b02      	cmp	r3, #2
 800f69a:	d130      	bne.n	800f6fe <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800f69c:	687b      	ldr	r3, [r7, #4]
 800f69e:	689b      	ldr	r3, [r3, #8]
 800f6a0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 800f6a2:	697b      	ldr	r3, [r7, #20]
 800f6a4:	005b      	lsls	r3, r3, #1
 800f6a6:	2203      	movs	r2, #3
 800f6a8:	409a      	lsls	r2, r3
 800f6aa:	0013      	movs	r3, r2
 800f6ac:	43da      	mvns	r2, r3
 800f6ae:	693b      	ldr	r3, [r7, #16]
 800f6b0:	4013      	ands	r3, r2
 800f6b2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800f6b4:	683b      	ldr	r3, [r7, #0]
 800f6b6:	68da      	ldr	r2, [r3, #12]
 800f6b8:	697b      	ldr	r3, [r7, #20]
 800f6ba:	005b      	lsls	r3, r3, #1
 800f6bc:	409a      	lsls	r2, r3
 800f6be:	0013      	movs	r3, r2
 800f6c0:	693a      	ldr	r2, [r7, #16]
 800f6c2:	4313      	orrs	r3, r2
 800f6c4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800f6c6:	687b      	ldr	r3, [r7, #4]
 800f6c8:	693a      	ldr	r2, [r7, #16]
 800f6ca:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800f6cc:	687b      	ldr	r3, [r7, #4]
 800f6ce:	685b      	ldr	r3, [r3, #4]
 800f6d0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800f6d2:	2201      	movs	r2, #1
 800f6d4:	697b      	ldr	r3, [r7, #20]
 800f6d6:	409a      	lsls	r2, r3
 800f6d8:	0013      	movs	r3, r2
 800f6da:	43da      	mvns	r2, r3
 800f6dc:	693b      	ldr	r3, [r7, #16]
 800f6de:	4013      	ands	r3, r2
 800f6e0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800f6e2:	683b      	ldr	r3, [r7, #0]
 800f6e4:	685b      	ldr	r3, [r3, #4]
 800f6e6:	091b      	lsrs	r3, r3, #4
 800f6e8:	2201      	movs	r2, #1
 800f6ea:	401a      	ands	r2, r3
 800f6ec:	697b      	ldr	r3, [r7, #20]
 800f6ee:	409a      	lsls	r2, r3
 800f6f0:	0013      	movs	r3, r2
 800f6f2:	693a      	ldr	r2, [r7, #16]
 800f6f4:	4313      	orrs	r3, r2
 800f6f6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800f6f8:	687b      	ldr	r3, [r7, #4]
 800f6fa:	693a      	ldr	r2, [r7, #16]
 800f6fc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800f6fe:	683b      	ldr	r3, [r7, #0]
 800f700:	685b      	ldr	r3, [r3, #4]
 800f702:	2203      	movs	r2, #3
 800f704:	4013      	ands	r3, r2
 800f706:	2b03      	cmp	r3, #3
 800f708:	d017      	beq.n	800f73a <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800f70a:	687b      	ldr	r3, [r7, #4]
 800f70c:	68db      	ldr	r3, [r3, #12]
 800f70e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800f710:	697b      	ldr	r3, [r7, #20]
 800f712:	005b      	lsls	r3, r3, #1
 800f714:	2203      	movs	r2, #3
 800f716:	409a      	lsls	r2, r3
 800f718:	0013      	movs	r3, r2
 800f71a:	43da      	mvns	r2, r3
 800f71c:	693b      	ldr	r3, [r7, #16]
 800f71e:	4013      	ands	r3, r2
 800f720:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800f722:	683b      	ldr	r3, [r7, #0]
 800f724:	689a      	ldr	r2, [r3, #8]
 800f726:	697b      	ldr	r3, [r7, #20]
 800f728:	005b      	lsls	r3, r3, #1
 800f72a:	409a      	lsls	r2, r3
 800f72c:	0013      	movs	r3, r2
 800f72e:	693a      	ldr	r2, [r7, #16]
 800f730:	4313      	orrs	r3, r2
 800f732:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800f734:	687b      	ldr	r3, [r7, #4]
 800f736:	693a      	ldr	r2, [r7, #16]
 800f738:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800f73a:	683b      	ldr	r3, [r7, #0]
 800f73c:	685b      	ldr	r3, [r3, #4]
 800f73e:	2203      	movs	r2, #3
 800f740:	4013      	ands	r3, r2
 800f742:	2b02      	cmp	r3, #2
 800f744:	d123      	bne.n	800f78e <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800f746:	697b      	ldr	r3, [r7, #20]
 800f748:	08da      	lsrs	r2, r3, #3
 800f74a:	687b      	ldr	r3, [r7, #4]
 800f74c:	3208      	adds	r2, #8
 800f74e:	0092      	lsls	r2, r2, #2
 800f750:	58d3      	ldr	r3, [r2, r3]
 800f752:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 800f754:	697b      	ldr	r3, [r7, #20]
 800f756:	2207      	movs	r2, #7
 800f758:	4013      	ands	r3, r2
 800f75a:	009b      	lsls	r3, r3, #2
 800f75c:	220f      	movs	r2, #15
 800f75e:	409a      	lsls	r2, r3
 800f760:	0013      	movs	r3, r2
 800f762:	43da      	mvns	r2, r3
 800f764:	693b      	ldr	r3, [r7, #16]
 800f766:	4013      	ands	r3, r2
 800f768:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 800f76a:	683b      	ldr	r3, [r7, #0]
 800f76c:	691a      	ldr	r2, [r3, #16]
 800f76e:	697b      	ldr	r3, [r7, #20]
 800f770:	2107      	movs	r1, #7
 800f772:	400b      	ands	r3, r1
 800f774:	009b      	lsls	r3, r3, #2
 800f776:	409a      	lsls	r2, r3
 800f778:	0013      	movs	r3, r2
 800f77a:	693a      	ldr	r2, [r7, #16]
 800f77c:	4313      	orrs	r3, r2
 800f77e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800f780:	697b      	ldr	r3, [r7, #20]
 800f782:	08da      	lsrs	r2, r3, #3
 800f784:	687b      	ldr	r3, [r7, #4]
 800f786:	3208      	adds	r2, #8
 800f788:	0092      	lsls	r2, r2, #2
 800f78a:	6939      	ldr	r1, [r7, #16]
 800f78c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800f78e:	687b      	ldr	r3, [r7, #4]
 800f790:	681b      	ldr	r3, [r3, #0]
 800f792:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800f794:	697b      	ldr	r3, [r7, #20]
 800f796:	005b      	lsls	r3, r3, #1
 800f798:	2203      	movs	r2, #3
 800f79a:	409a      	lsls	r2, r3
 800f79c:	0013      	movs	r3, r2
 800f79e:	43da      	mvns	r2, r3
 800f7a0:	693b      	ldr	r3, [r7, #16]
 800f7a2:	4013      	ands	r3, r2
 800f7a4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800f7a6:	683b      	ldr	r3, [r7, #0]
 800f7a8:	685b      	ldr	r3, [r3, #4]
 800f7aa:	2203      	movs	r2, #3
 800f7ac:	401a      	ands	r2, r3
 800f7ae:	697b      	ldr	r3, [r7, #20]
 800f7b0:	005b      	lsls	r3, r3, #1
 800f7b2:	409a      	lsls	r2, r3
 800f7b4:	0013      	movs	r3, r2
 800f7b6:	693a      	ldr	r2, [r7, #16]
 800f7b8:	4313      	orrs	r3, r2
 800f7ba:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800f7bc:	687b      	ldr	r3, [r7, #4]
 800f7be:	693a      	ldr	r2, [r7, #16]
 800f7c0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800f7c2:	683b      	ldr	r3, [r7, #0]
 800f7c4:	685a      	ldr	r2, [r3, #4]
 800f7c6:	23c0      	movs	r3, #192	@ 0xc0
 800f7c8:	029b      	lsls	r3, r3, #10
 800f7ca:	4013      	ands	r3, r2
 800f7cc:	d100      	bne.n	800f7d0 <HAL_GPIO_Init+0x17c>
 800f7ce:	e0a0      	b.n	800f912 <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800f7d0:	4b57      	ldr	r3, [pc, #348]	@ (800f930 <HAL_GPIO_Init+0x2dc>)
 800f7d2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800f7d4:	4b56      	ldr	r3, [pc, #344]	@ (800f930 <HAL_GPIO_Init+0x2dc>)
 800f7d6:	2101      	movs	r1, #1
 800f7d8:	430a      	orrs	r2, r1
 800f7da:	635a      	str	r2, [r3, #52]	@ 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 800f7dc:	4a55      	ldr	r2, [pc, #340]	@ (800f934 <HAL_GPIO_Init+0x2e0>)
 800f7de:	697b      	ldr	r3, [r7, #20]
 800f7e0:	089b      	lsrs	r3, r3, #2
 800f7e2:	3302      	adds	r3, #2
 800f7e4:	009b      	lsls	r3, r3, #2
 800f7e6:	589b      	ldr	r3, [r3, r2]
 800f7e8:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 800f7ea:	697b      	ldr	r3, [r7, #20]
 800f7ec:	2203      	movs	r2, #3
 800f7ee:	4013      	ands	r3, r2
 800f7f0:	009b      	lsls	r3, r3, #2
 800f7f2:	220f      	movs	r2, #15
 800f7f4:	409a      	lsls	r2, r3
 800f7f6:	0013      	movs	r3, r2
 800f7f8:	43da      	mvns	r2, r3
 800f7fa:	693b      	ldr	r3, [r7, #16]
 800f7fc:	4013      	ands	r3, r2
 800f7fe:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 800f800:	687a      	ldr	r2, [r7, #4]
 800f802:	23a0      	movs	r3, #160	@ 0xa0
 800f804:	05db      	lsls	r3, r3, #23
 800f806:	429a      	cmp	r2, r3
 800f808:	d01f      	beq.n	800f84a <HAL_GPIO_Init+0x1f6>
 800f80a:	687b      	ldr	r3, [r7, #4]
 800f80c:	4a4a      	ldr	r2, [pc, #296]	@ (800f938 <HAL_GPIO_Init+0x2e4>)
 800f80e:	4293      	cmp	r3, r2
 800f810:	d019      	beq.n	800f846 <HAL_GPIO_Init+0x1f2>
 800f812:	687b      	ldr	r3, [r7, #4]
 800f814:	4a49      	ldr	r2, [pc, #292]	@ (800f93c <HAL_GPIO_Init+0x2e8>)
 800f816:	4293      	cmp	r3, r2
 800f818:	d013      	beq.n	800f842 <HAL_GPIO_Init+0x1ee>
 800f81a:	687b      	ldr	r3, [r7, #4]
 800f81c:	4a48      	ldr	r2, [pc, #288]	@ (800f940 <HAL_GPIO_Init+0x2ec>)
 800f81e:	4293      	cmp	r3, r2
 800f820:	d00d      	beq.n	800f83e <HAL_GPIO_Init+0x1ea>
 800f822:	687b      	ldr	r3, [r7, #4]
 800f824:	4a47      	ldr	r2, [pc, #284]	@ (800f944 <HAL_GPIO_Init+0x2f0>)
 800f826:	4293      	cmp	r3, r2
 800f828:	d007      	beq.n	800f83a <HAL_GPIO_Init+0x1e6>
 800f82a:	687b      	ldr	r3, [r7, #4]
 800f82c:	4a46      	ldr	r2, [pc, #280]	@ (800f948 <HAL_GPIO_Init+0x2f4>)
 800f82e:	4293      	cmp	r3, r2
 800f830:	d101      	bne.n	800f836 <HAL_GPIO_Init+0x1e2>
 800f832:	2305      	movs	r3, #5
 800f834:	e00a      	b.n	800f84c <HAL_GPIO_Init+0x1f8>
 800f836:	2306      	movs	r3, #6
 800f838:	e008      	b.n	800f84c <HAL_GPIO_Init+0x1f8>
 800f83a:	2304      	movs	r3, #4
 800f83c:	e006      	b.n	800f84c <HAL_GPIO_Init+0x1f8>
 800f83e:	2303      	movs	r3, #3
 800f840:	e004      	b.n	800f84c <HAL_GPIO_Init+0x1f8>
 800f842:	2302      	movs	r3, #2
 800f844:	e002      	b.n	800f84c <HAL_GPIO_Init+0x1f8>
 800f846:	2301      	movs	r3, #1
 800f848:	e000      	b.n	800f84c <HAL_GPIO_Init+0x1f8>
 800f84a:	2300      	movs	r3, #0
 800f84c:	697a      	ldr	r2, [r7, #20]
 800f84e:	2103      	movs	r1, #3
 800f850:	400a      	ands	r2, r1
 800f852:	0092      	lsls	r2, r2, #2
 800f854:	4093      	lsls	r3, r2
 800f856:	693a      	ldr	r2, [r7, #16]
 800f858:	4313      	orrs	r3, r2
 800f85a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800f85c:	4935      	ldr	r1, [pc, #212]	@ (800f934 <HAL_GPIO_Init+0x2e0>)
 800f85e:	697b      	ldr	r3, [r7, #20]
 800f860:	089b      	lsrs	r3, r3, #2
 800f862:	3302      	adds	r3, #2
 800f864:	009b      	lsls	r3, r3, #2
 800f866:	693a      	ldr	r2, [r7, #16]
 800f868:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800f86a:	4b38      	ldr	r3, [pc, #224]	@ (800f94c <HAL_GPIO_Init+0x2f8>)
 800f86c:	689b      	ldr	r3, [r3, #8]
 800f86e:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800f870:	68fb      	ldr	r3, [r7, #12]
 800f872:	43da      	mvns	r2, r3
 800f874:	693b      	ldr	r3, [r7, #16]
 800f876:	4013      	ands	r3, r2
 800f878:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800f87a:	683b      	ldr	r3, [r7, #0]
 800f87c:	685a      	ldr	r2, [r3, #4]
 800f87e:	2380      	movs	r3, #128	@ 0x80
 800f880:	035b      	lsls	r3, r3, #13
 800f882:	4013      	ands	r3, r2
 800f884:	d003      	beq.n	800f88e <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 800f886:	693a      	ldr	r2, [r7, #16]
 800f888:	68fb      	ldr	r3, [r7, #12]
 800f88a:	4313      	orrs	r3, r2
 800f88c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800f88e:	4b2f      	ldr	r3, [pc, #188]	@ (800f94c <HAL_GPIO_Init+0x2f8>)
 800f890:	693a      	ldr	r2, [r7, #16]
 800f892:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 800f894:	4b2d      	ldr	r3, [pc, #180]	@ (800f94c <HAL_GPIO_Init+0x2f8>)
 800f896:	68db      	ldr	r3, [r3, #12]
 800f898:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800f89a:	68fb      	ldr	r3, [r7, #12]
 800f89c:	43da      	mvns	r2, r3
 800f89e:	693b      	ldr	r3, [r7, #16]
 800f8a0:	4013      	ands	r3, r2
 800f8a2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800f8a4:	683b      	ldr	r3, [r7, #0]
 800f8a6:	685a      	ldr	r2, [r3, #4]
 800f8a8:	2380      	movs	r3, #128	@ 0x80
 800f8aa:	039b      	lsls	r3, r3, #14
 800f8ac:	4013      	ands	r3, r2
 800f8ae:	d003      	beq.n	800f8b8 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 800f8b0:	693a      	ldr	r2, [r7, #16]
 800f8b2:	68fb      	ldr	r3, [r7, #12]
 800f8b4:	4313      	orrs	r3, r2
 800f8b6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800f8b8:	4b24      	ldr	r3, [pc, #144]	@ (800f94c <HAL_GPIO_Init+0x2f8>)
 800f8ba:	693a      	ldr	r2, [r7, #16]
 800f8bc:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 800f8be:	4b23      	ldr	r3, [pc, #140]	@ (800f94c <HAL_GPIO_Init+0x2f8>)
 800f8c0:	685b      	ldr	r3, [r3, #4]
 800f8c2:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800f8c4:	68fb      	ldr	r3, [r7, #12]
 800f8c6:	43da      	mvns	r2, r3
 800f8c8:	693b      	ldr	r3, [r7, #16]
 800f8ca:	4013      	ands	r3, r2
 800f8cc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800f8ce:	683b      	ldr	r3, [r7, #0]
 800f8d0:	685a      	ldr	r2, [r3, #4]
 800f8d2:	2380      	movs	r3, #128	@ 0x80
 800f8d4:	029b      	lsls	r3, r3, #10
 800f8d6:	4013      	ands	r3, r2
 800f8d8:	d003      	beq.n	800f8e2 <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 800f8da:	693a      	ldr	r2, [r7, #16]
 800f8dc:	68fb      	ldr	r3, [r7, #12]
 800f8de:	4313      	orrs	r3, r2
 800f8e0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800f8e2:	4b1a      	ldr	r3, [pc, #104]	@ (800f94c <HAL_GPIO_Init+0x2f8>)
 800f8e4:	693a      	ldr	r2, [r7, #16]
 800f8e6:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800f8e8:	4b18      	ldr	r3, [pc, #96]	@ (800f94c <HAL_GPIO_Init+0x2f8>)
 800f8ea:	681b      	ldr	r3, [r3, #0]
 800f8ec:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800f8ee:	68fb      	ldr	r3, [r7, #12]
 800f8f0:	43da      	mvns	r2, r3
 800f8f2:	693b      	ldr	r3, [r7, #16]
 800f8f4:	4013      	ands	r3, r2
 800f8f6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800f8f8:	683b      	ldr	r3, [r7, #0]
 800f8fa:	685a      	ldr	r2, [r3, #4]
 800f8fc:	2380      	movs	r3, #128	@ 0x80
 800f8fe:	025b      	lsls	r3, r3, #9
 800f900:	4013      	ands	r3, r2
 800f902:	d003      	beq.n	800f90c <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 800f904:	693a      	ldr	r2, [r7, #16]
 800f906:	68fb      	ldr	r3, [r7, #12]
 800f908:	4313      	orrs	r3, r2
 800f90a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800f90c:	4b0f      	ldr	r3, [pc, #60]	@ (800f94c <HAL_GPIO_Init+0x2f8>)
 800f90e:	693a      	ldr	r2, [r7, #16]
 800f910:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 800f912:	697b      	ldr	r3, [r7, #20]
 800f914:	3301      	adds	r3, #1
 800f916:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 800f918:	683b      	ldr	r3, [r7, #0]
 800f91a:	681a      	ldr	r2, [r3, #0]
 800f91c:	697b      	ldr	r3, [r7, #20]
 800f91e:	40da      	lsrs	r2, r3
 800f920:	1e13      	subs	r3, r2, #0
 800f922:	d000      	beq.n	800f926 <HAL_GPIO_Init+0x2d2>
 800f924:	e6a2      	b.n	800f66c <HAL_GPIO_Init+0x18>
  }
}
 800f926:	46c0      	nop			@ (mov r8, r8)
 800f928:	46c0      	nop			@ (mov r8, r8)
 800f92a:	46bd      	mov	sp, r7
 800f92c:	b006      	add	sp, #24
 800f92e:	bd80      	pop	{r7, pc}
 800f930:	40021000 	.word	0x40021000
 800f934:	40010000 	.word	0x40010000
 800f938:	50000400 	.word	0x50000400
 800f93c:	50000800 	.word	0x50000800
 800f940:	50000c00 	.word	0x50000c00
 800f944:	50001000 	.word	0x50001000
 800f948:	50001c00 	.word	0x50001c00
 800f94c:	40010400 	.word	0x40010400

0800f950 <HAL_GPIO_ReadPin>:
  *                   This parameter can be GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800f950:	b580      	push	{r7, lr}
 800f952:	b084      	sub	sp, #16
 800f954:	af00      	add	r7, sp, #0
 800f956:	6078      	str	r0, [r7, #4]
 800f958:	000a      	movs	r2, r1
 800f95a:	1cbb      	adds	r3, r7, #2
 800f95c:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800f95e:	687b      	ldr	r3, [r7, #4]
 800f960:	691b      	ldr	r3, [r3, #16]
 800f962:	1cba      	adds	r2, r7, #2
 800f964:	8812      	ldrh	r2, [r2, #0]
 800f966:	4013      	ands	r3, r2
 800f968:	d004      	beq.n	800f974 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 800f96a:	230f      	movs	r3, #15
 800f96c:	18fb      	adds	r3, r7, r3
 800f96e:	2201      	movs	r2, #1
 800f970:	701a      	strb	r2, [r3, #0]
 800f972:	e003      	b.n	800f97c <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800f974:	230f      	movs	r3, #15
 800f976:	18fb      	adds	r3, r7, r3
 800f978:	2200      	movs	r2, #0
 800f97a:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 800f97c:	230f      	movs	r3, #15
 800f97e:	18fb      	adds	r3, r7, r3
 800f980:	781b      	ldrb	r3, [r3, #0]
}
 800f982:	0018      	movs	r0, r3
 800f984:	46bd      	mov	sp, r7
 800f986:	b004      	add	sp, #16
 800f988:	bd80      	pop	{r7, pc}

0800f98a <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800f98a:	b580      	push	{r7, lr}
 800f98c:	b082      	sub	sp, #8
 800f98e:	af00      	add	r7, sp, #0
 800f990:	6078      	str	r0, [r7, #4]
 800f992:	0008      	movs	r0, r1
 800f994:	0011      	movs	r1, r2
 800f996:	1cbb      	adds	r3, r7, #2
 800f998:	1c02      	adds	r2, r0, #0
 800f99a:	801a      	strh	r2, [r3, #0]
 800f99c:	1c7b      	adds	r3, r7, #1
 800f99e:	1c0a      	adds	r2, r1, #0
 800f9a0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800f9a2:	1c7b      	adds	r3, r7, #1
 800f9a4:	781b      	ldrb	r3, [r3, #0]
 800f9a6:	2b00      	cmp	r3, #0
 800f9a8:	d004      	beq.n	800f9b4 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 800f9aa:	1cbb      	adds	r3, r7, #2
 800f9ac:	881a      	ldrh	r2, [r3, #0]
 800f9ae:	687b      	ldr	r3, [r7, #4]
 800f9b0:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 800f9b2:	e003      	b.n	800f9bc <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 800f9b4:	1cbb      	adds	r3, r7, #2
 800f9b6:	881a      	ldrh	r2, [r3, #0]
 800f9b8:	687b      	ldr	r3, [r7, #4]
 800f9ba:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800f9bc:	46c0      	nop			@ (mov r8, r8)
 800f9be:	46bd      	mov	sp, r7
 800f9c0:	b002      	add	sp, #8
 800f9c2:	bd80      	pop	{r7, pc}

0800f9c4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected to the EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800f9c4:	b580      	push	{r7, lr}
 800f9c6:	b082      	sub	sp, #8
 800f9c8:	af00      	add	r7, sp, #0
 800f9ca:	0002      	movs	r2, r0
 800f9cc:	1dbb      	adds	r3, r7, #6
 800f9ce:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800f9d0:	4b09      	ldr	r3, [pc, #36]	@ (800f9f8 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 800f9d2:	695b      	ldr	r3, [r3, #20]
 800f9d4:	1dba      	adds	r2, r7, #6
 800f9d6:	8812      	ldrh	r2, [r2, #0]
 800f9d8:	4013      	ands	r3, r2
 800f9da:	d008      	beq.n	800f9ee <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800f9dc:	4b06      	ldr	r3, [pc, #24]	@ (800f9f8 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 800f9de:	1dba      	adds	r2, r7, #6
 800f9e0:	8812      	ldrh	r2, [r2, #0]
 800f9e2:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800f9e4:	1dbb      	adds	r3, r7, #6
 800f9e6:	881b      	ldrh	r3, [r3, #0]
 800f9e8:	0018      	movs	r0, r3
 800f9ea:	f7f8 fb1f 	bl	800802c <HAL_GPIO_EXTI_Callback>
  }
}
 800f9ee:	46c0      	nop			@ (mov r8, r8)
 800f9f0:	46bd      	mov	sp, r7
 800f9f2:	b002      	add	sp, #8
 800f9f4:	bd80      	pop	{r7, pc}
 800f9f6:	46c0      	nop			@ (mov r8, r8)
 800f9f8:	40010400 	.word	0x40010400

0800f9fc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800f9fc:	b580      	push	{r7, lr}
 800f9fe:	b082      	sub	sp, #8
 800fa00:	af00      	add	r7, sp, #0
 800fa02:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800fa04:	687b      	ldr	r3, [r7, #4]
 800fa06:	2b00      	cmp	r3, #0
 800fa08:	d101      	bne.n	800fa0e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800fa0a:	2301      	movs	r3, #1
 800fa0c:	e082      	b.n	800fb14 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800fa0e:	687b      	ldr	r3, [r7, #4]
 800fa10:	2241      	movs	r2, #65	@ 0x41
 800fa12:	5c9b      	ldrb	r3, [r3, r2]
 800fa14:	b2db      	uxtb	r3, r3
 800fa16:	2b00      	cmp	r3, #0
 800fa18:	d107      	bne.n	800fa2a <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800fa1a:	687b      	ldr	r3, [r7, #4]
 800fa1c:	2240      	movs	r2, #64	@ 0x40
 800fa1e:	2100      	movs	r1, #0
 800fa20:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800fa22:	687b      	ldr	r3, [r7, #4]
 800fa24:	0018      	movs	r0, r3
 800fa26:	f7f7 fe91 	bl	800774c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800fa2a:	687b      	ldr	r3, [r7, #4]
 800fa2c:	2241      	movs	r2, #65	@ 0x41
 800fa2e:	2124      	movs	r1, #36	@ 0x24
 800fa30:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800fa32:	687b      	ldr	r3, [r7, #4]
 800fa34:	681b      	ldr	r3, [r3, #0]
 800fa36:	681a      	ldr	r2, [r3, #0]
 800fa38:	687b      	ldr	r3, [r7, #4]
 800fa3a:	681b      	ldr	r3, [r3, #0]
 800fa3c:	2101      	movs	r1, #1
 800fa3e:	438a      	bics	r2, r1
 800fa40:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800fa42:	687b      	ldr	r3, [r7, #4]
 800fa44:	685a      	ldr	r2, [r3, #4]
 800fa46:	687b      	ldr	r3, [r7, #4]
 800fa48:	681b      	ldr	r3, [r3, #0]
 800fa4a:	4934      	ldr	r1, [pc, #208]	@ (800fb1c <HAL_I2C_Init+0x120>)
 800fa4c:	400a      	ands	r2, r1
 800fa4e:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800fa50:	687b      	ldr	r3, [r7, #4]
 800fa52:	681b      	ldr	r3, [r3, #0]
 800fa54:	689a      	ldr	r2, [r3, #8]
 800fa56:	687b      	ldr	r3, [r7, #4]
 800fa58:	681b      	ldr	r3, [r3, #0]
 800fa5a:	4931      	ldr	r1, [pc, #196]	@ (800fb20 <HAL_I2C_Init+0x124>)
 800fa5c:	400a      	ands	r2, r1
 800fa5e:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800fa60:	687b      	ldr	r3, [r7, #4]
 800fa62:	68db      	ldr	r3, [r3, #12]
 800fa64:	2b01      	cmp	r3, #1
 800fa66:	d108      	bne.n	800fa7a <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800fa68:	687b      	ldr	r3, [r7, #4]
 800fa6a:	689a      	ldr	r2, [r3, #8]
 800fa6c:	687b      	ldr	r3, [r7, #4]
 800fa6e:	681b      	ldr	r3, [r3, #0]
 800fa70:	2180      	movs	r1, #128	@ 0x80
 800fa72:	0209      	lsls	r1, r1, #8
 800fa74:	430a      	orrs	r2, r1
 800fa76:	609a      	str	r2, [r3, #8]
 800fa78:	e007      	b.n	800fa8a <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800fa7a:	687b      	ldr	r3, [r7, #4]
 800fa7c:	689a      	ldr	r2, [r3, #8]
 800fa7e:	687b      	ldr	r3, [r7, #4]
 800fa80:	681b      	ldr	r3, [r3, #0]
 800fa82:	2184      	movs	r1, #132	@ 0x84
 800fa84:	0209      	lsls	r1, r1, #8
 800fa86:	430a      	orrs	r2, r1
 800fa88:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800fa8a:	687b      	ldr	r3, [r7, #4]
 800fa8c:	68db      	ldr	r3, [r3, #12]
 800fa8e:	2b02      	cmp	r3, #2
 800fa90:	d104      	bne.n	800fa9c <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800fa92:	687b      	ldr	r3, [r7, #4]
 800fa94:	681b      	ldr	r3, [r3, #0]
 800fa96:	2280      	movs	r2, #128	@ 0x80
 800fa98:	0112      	lsls	r2, r2, #4
 800fa9a:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800fa9c:	687b      	ldr	r3, [r7, #4]
 800fa9e:	681b      	ldr	r3, [r3, #0]
 800faa0:	685a      	ldr	r2, [r3, #4]
 800faa2:	687b      	ldr	r3, [r7, #4]
 800faa4:	681b      	ldr	r3, [r3, #0]
 800faa6:	491f      	ldr	r1, [pc, #124]	@ (800fb24 <HAL_I2C_Init+0x128>)
 800faa8:	430a      	orrs	r2, r1
 800faaa:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800faac:	687b      	ldr	r3, [r7, #4]
 800faae:	681b      	ldr	r3, [r3, #0]
 800fab0:	68da      	ldr	r2, [r3, #12]
 800fab2:	687b      	ldr	r3, [r7, #4]
 800fab4:	681b      	ldr	r3, [r3, #0]
 800fab6:	491a      	ldr	r1, [pc, #104]	@ (800fb20 <HAL_I2C_Init+0x124>)
 800fab8:	400a      	ands	r2, r1
 800faba:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800fabc:	687b      	ldr	r3, [r7, #4]
 800fabe:	691a      	ldr	r2, [r3, #16]
 800fac0:	687b      	ldr	r3, [r7, #4]
 800fac2:	695b      	ldr	r3, [r3, #20]
 800fac4:	431a      	orrs	r2, r3
 800fac6:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 800fac8:	687b      	ldr	r3, [r7, #4]
 800faca:	699b      	ldr	r3, [r3, #24]
 800facc:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800face:	687b      	ldr	r3, [r7, #4]
 800fad0:	681b      	ldr	r3, [r3, #0]
 800fad2:	430a      	orrs	r2, r1
 800fad4:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800fad6:	687b      	ldr	r3, [r7, #4]
 800fad8:	69d9      	ldr	r1, [r3, #28]
 800fada:	687b      	ldr	r3, [r7, #4]
 800fadc:	6a1a      	ldr	r2, [r3, #32]
 800fade:	687b      	ldr	r3, [r7, #4]
 800fae0:	681b      	ldr	r3, [r3, #0]
 800fae2:	430a      	orrs	r2, r1
 800fae4:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800fae6:	687b      	ldr	r3, [r7, #4]
 800fae8:	681b      	ldr	r3, [r3, #0]
 800faea:	681a      	ldr	r2, [r3, #0]
 800faec:	687b      	ldr	r3, [r7, #4]
 800faee:	681b      	ldr	r3, [r3, #0]
 800faf0:	2101      	movs	r1, #1
 800faf2:	430a      	orrs	r2, r1
 800faf4:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800faf6:	687b      	ldr	r3, [r7, #4]
 800faf8:	2200      	movs	r2, #0
 800fafa:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800fafc:	687b      	ldr	r3, [r7, #4]
 800fafe:	2241      	movs	r2, #65	@ 0x41
 800fb00:	2120      	movs	r1, #32
 800fb02:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 800fb04:	687b      	ldr	r3, [r7, #4]
 800fb06:	2200      	movs	r2, #0
 800fb08:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800fb0a:	687b      	ldr	r3, [r7, #4]
 800fb0c:	2242      	movs	r2, #66	@ 0x42
 800fb0e:	2100      	movs	r1, #0
 800fb10:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800fb12:	2300      	movs	r3, #0
}
 800fb14:	0018      	movs	r0, r3
 800fb16:	46bd      	mov	sp, r7
 800fb18:	b002      	add	sp, #8
 800fb1a:	bd80      	pop	{r7, pc}
 800fb1c:	f0ffffff 	.word	0xf0ffffff
 800fb20:	ffff7fff 	.word	0xffff7fff
 800fb24:	02008000 	.word	0x02008000

0800fb28 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 800fb28:	b590      	push	{r4, r7, lr}
 800fb2a:	b089      	sub	sp, #36	@ 0x24
 800fb2c:	af02      	add	r7, sp, #8
 800fb2e:	60f8      	str	r0, [r7, #12]
 800fb30:	0008      	movs	r0, r1
 800fb32:	607a      	str	r2, [r7, #4]
 800fb34:	0019      	movs	r1, r3
 800fb36:	230a      	movs	r3, #10
 800fb38:	18fb      	adds	r3, r7, r3
 800fb3a:	1c02      	adds	r2, r0, #0
 800fb3c:	801a      	strh	r2, [r3, #0]
 800fb3e:	2308      	movs	r3, #8
 800fb40:	18fb      	adds	r3, r7, r3
 800fb42:	1c0a      	adds	r2, r1, #0
 800fb44:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800fb46:	68fb      	ldr	r3, [r7, #12]
 800fb48:	2241      	movs	r2, #65	@ 0x41
 800fb4a:	5c9b      	ldrb	r3, [r3, r2]
 800fb4c:	b2db      	uxtb	r3, r3
 800fb4e:	2b20      	cmp	r3, #32
 800fb50:	d000      	beq.n	800fb54 <HAL_I2C_Master_Transmit+0x2c>
 800fb52:	e0e7      	b.n	800fd24 <HAL_I2C_Master_Transmit+0x1fc>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800fb54:	68fb      	ldr	r3, [r7, #12]
 800fb56:	2240      	movs	r2, #64	@ 0x40
 800fb58:	5c9b      	ldrb	r3, [r3, r2]
 800fb5a:	2b01      	cmp	r3, #1
 800fb5c:	d101      	bne.n	800fb62 <HAL_I2C_Master_Transmit+0x3a>
 800fb5e:	2302      	movs	r3, #2
 800fb60:	e0e1      	b.n	800fd26 <HAL_I2C_Master_Transmit+0x1fe>
 800fb62:	68fb      	ldr	r3, [r7, #12]
 800fb64:	2240      	movs	r2, #64	@ 0x40
 800fb66:	2101      	movs	r1, #1
 800fb68:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800fb6a:	f7fe fc7d 	bl	800e468 <HAL_GetTick>
 800fb6e:	0003      	movs	r3, r0
 800fb70:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800fb72:	2380      	movs	r3, #128	@ 0x80
 800fb74:	0219      	lsls	r1, r3, #8
 800fb76:	68f8      	ldr	r0, [r7, #12]
 800fb78:	697b      	ldr	r3, [r7, #20]
 800fb7a:	9300      	str	r3, [sp, #0]
 800fb7c:	2319      	movs	r3, #25
 800fb7e:	2201      	movs	r2, #1
 800fb80:	f001 ff98 	bl	8011ab4 <I2C_WaitOnFlagUntilTimeout>
 800fb84:	1e03      	subs	r3, r0, #0
 800fb86:	d001      	beq.n	800fb8c <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 800fb88:	2301      	movs	r3, #1
 800fb8a:	e0cc      	b.n	800fd26 <HAL_I2C_Master_Transmit+0x1fe>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800fb8c:	68fb      	ldr	r3, [r7, #12]
 800fb8e:	2241      	movs	r2, #65	@ 0x41
 800fb90:	2121      	movs	r1, #33	@ 0x21
 800fb92:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800fb94:	68fb      	ldr	r3, [r7, #12]
 800fb96:	2242      	movs	r2, #66	@ 0x42
 800fb98:	2110      	movs	r1, #16
 800fb9a:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800fb9c:	68fb      	ldr	r3, [r7, #12]
 800fb9e:	2200      	movs	r2, #0
 800fba0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800fba2:	68fb      	ldr	r3, [r7, #12]
 800fba4:	687a      	ldr	r2, [r7, #4]
 800fba6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800fba8:	68fb      	ldr	r3, [r7, #12]
 800fbaa:	2208      	movs	r2, #8
 800fbac:	18ba      	adds	r2, r7, r2
 800fbae:	8812      	ldrh	r2, [r2, #0]
 800fbb0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800fbb2:	68fb      	ldr	r3, [r7, #12]
 800fbb4:	2200      	movs	r2, #0
 800fbb6:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800fbb8:	68fb      	ldr	r3, [r7, #12]
 800fbba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800fbbc:	b29b      	uxth	r3, r3
 800fbbe:	2bff      	cmp	r3, #255	@ 0xff
 800fbc0:	d911      	bls.n	800fbe6 <HAL_I2C_Master_Transmit+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800fbc2:	68fb      	ldr	r3, [r7, #12]
 800fbc4:	22ff      	movs	r2, #255	@ 0xff
 800fbc6:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800fbc8:	68fb      	ldr	r3, [r7, #12]
 800fbca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800fbcc:	b2da      	uxtb	r2, r3
 800fbce:	2380      	movs	r3, #128	@ 0x80
 800fbd0:	045c      	lsls	r4, r3, #17
 800fbd2:	230a      	movs	r3, #10
 800fbd4:	18fb      	adds	r3, r7, r3
 800fbd6:	8819      	ldrh	r1, [r3, #0]
 800fbd8:	68f8      	ldr	r0, [r7, #12]
 800fbda:	4b55      	ldr	r3, [pc, #340]	@ (800fd30 <HAL_I2C_Master_Transmit+0x208>)
 800fbdc:	9300      	str	r3, [sp, #0]
 800fbde:	0023      	movs	r3, r4
 800fbe0:	f002 f9ba 	bl	8011f58 <I2C_TransferConfig>
 800fbe4:	e075      	b.n	800fcd2 <HAL_I2C_Master_Transmit+0x1aa>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800fbe6:	68fb      	ldr	r3, [r7, #12]
 800fbe8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800fbea:	b29a      	uxth	r2, r3
 800fbec:	68fb      	ldr	r3, [r7, #12]
 800fbee:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800fbf0:	68fb      	ldr	r3, [r7, #12]
 800fbf2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800fbf4:	b2da      	uxtb	r2, r3
 800fbf6:	2380      	movs	r3, #128	@ 0x80
 800fbf8:	049c      	lsls	r4, r3, #18
 800fbfa:	230a      	movs	r3, #10
 800fbfc:	18fb      	adds	r3, r7, r3
 800fbfe:	8819      	ldrh	r1, [r3, #0]
 800fc00:	68f8      	ldr	r0, [r7, #12]
 800fc02:	4b4b      	ldr	r3, [pc, #300]	@ (800fd30 <HAL_I2C_Master_Transmit+0x208>)
 800fc04:	9300      	str	r3, [sp, #0]
 800fc06:	0023      	movs	r3, r4
 800fc08:	f002 f9a6 	bl	8011f58 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 800fc0c:	e061      	b.n	800fcd2 <HAL_I2C_Master_Transmit+0x1aa>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800fc0e:	697a      	ldr	r2, [r7, #20]
 800fc10:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800fc12:	68fb      	ldr	r3, [r7, #12]
 800fc14:	0018      	movs	r0, r3
 800fc16:	f001 ff9b 	bl	8011b50 <I2C_WaitOnTXISFlagUntilTimeout>
 800fc1a:	1e03      	subs	r3, r0, #0
 800fc1c:	d001      	beq.n	800fc22 <HAL_I2C_Master_Transmit+0xfa>
      {
        return HAL_ERROR;
 800fc1e:	2301      	movs	r3, #1
 800fc20:	e081      	b.n	800fd26 <HAL_I2C_Master_Transmit+0x1fe>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800fc22:	68fb      	ldr	r3, [r7, #12]
 800fc24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fc26:	781a      	ldrb	r2, [r3, #0]
 800fc28:	68fb      	ldr	r3, [r7, #12]
 800fc2a:	681b      	ldr	r3, [r3, #0]
 800fc2c:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800fc2e:	68fb      	ldr	r3, [r7, #12]
 800fc30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fc32:	1c5a      	adds	r2, r3, #1
 800fc34:	68fb      	ldr	r3, [r7, #12]
 800fc36:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800fc38:	68fb      	ldr	r3, [r7, #12]
 800fc3a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800fc3c:	b29b      	uxth	r3, r3
 800fc3e:	3b01      	subs	r3, #1
 800fc40:	b29a      	uxth	r2, r3
 800fc42:	68fb      	ldr	r3, [r7, #12]
 800fc44:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800fc46:	68fb      	ldr	r3, [r7, #12]
 800fc48:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800fc4a:	3b01      	subs	r3, #1
 800fc4c:	b29a      	uxth	r2, r3
 800fc4e:	68fb      	ldr	r3, [r7, #12]
 800fc50:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800fc52:	68fb      	ldr	r3, [r7, #12]
 800fc54:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800fc56:	b29b      	uxth	r3, r3
 800fc58:	2b00      	cmp	r3, #0
 800fc5a:	d03a      	beq.n	800fcd2 <HAL_I2C_Master_Transmit+0x1aa>
 800fc5c:	68fb      	ldr	r3, [r7, #12]
 800fc5e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800fc60:	2b00      	cmp	r3, #0
 800fc62:	d136      	bne.n	800fcd2 <HAL_I2C_Master_Transmit+0x1aa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800fc64:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800fc66:	68f8      	ldr	r0, [r7, #12]
 800fc68:	697b      	ldr	r3, [r7, #20]
 800fc6a:	9300      	str	r3, [sp, #0]
 800fc6c:	0013      	movs	r3, r2
 800fc6e:	2200      	movs	r2, #0
 800fc70:	2180      	movs	r1, #128	@ 0x80
 800fc72:	f001 ff1f 	bl	8011ab4 <I2C_WaitOnFlagUntilTimeout>
 800fc76:	1e03      	subs	r3, r0, #0
 800fc78:	d001      	beq.n	800fc7e <HAL_I2C_Master_Transmit+0x156>
        {
          return HAL_ERROR;
 800fc7a:	2301      	movs	r3, #1
 800fc7c:	e053      	b.n	800fd26 <HAL_I2C_Master_Transmit+0x1fe>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800fc7e:	68fb      	ldr	r3, [r7, #12]
 800fc80:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800fc82:	b29b      	uxth	r3, r3
 800fc84:	2bff      	cmp	r3, #255	@ 0xff
 800fc86:	d911      	bls.n	800fcac <HAL_I2C_Master_Transmit+0x184>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800fc88:	68fb      	ldr	r3, [r7, #12]
 800fc8a:	22ff      	movs	r2, #255	@ 0xff
 800fc8c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800fc8e:	68fb      	ldr	r3, [r7, #12]
 800fc90:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800fc92:	b2da      	uxtb	r2, r3
 800fc94:	2380      	movs	r3, #128	@ 0x80
 800fc96:	045c      	lsls	r4, r3, #17
 800fc98:	230a      	movs	r3, #10
 800fc9a:	18fb      	adds	r3, r7, r3
 800fc9c:	8819      	ldrh	r1, [r3, #0]
 800fc9e:	68f8      	ldr	r0, [r7, #12]
 800fca0:	2300      	movs	r3, #0
 800fca2:	9300      	str	r3, [sp, #0]
 800fca4:	0023      	movs	r3, r4
 800fca6:	f002 f957 	bl	8011f58 <I2C_TransferConfig>
 800fcaa:	e012      	b.n	800fcd2 <HAL_I2C_Master_Transmit+0x1aa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800fcac:	68fb      	ldr	r3, [r7, #12]
 800fcae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800fcb0:	b29a      	uxth	r2, r3
 800fcb2:	68fb      	ldr	r3, [r7, #12]
 800fcb4:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800fcb6:	68fb      	ldr	r3, [r7, #12]
 800fcb8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800fcba:	b2da      	uxtb	r2, r3
 800fcbc:	2380      	movs	r3, #128	@ 0x80
 800fcbe:	049c      	lsls	r4, r3, #18
 800fcc0:	230a      	movs	r3, #10
 800fcc2:	18fb      	adds	r3, r7, r3
 800fcc4:	8819      	ldrh	r1, [r3, #0]
 800fcc6:	68f8      	ldr	r0, [r7, #12]
 800fcc8:	2300      	movs	r3, #0
 800fcca:	9300      	str	r3, [sp, #0]
 800fccc:	0023      	movs	r3, r4
 800fcce:	f002 f943 	bl	8011f58 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800fcd2:	68fb      	ldr	r3, [r7, #12]
 800fcd4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800fcd6:	b29b      	uxth	r3, r3
 800fcd8:	2b00      	cmp	r3, #0
 800fcda:	d198      	bne.n	800fc0e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800fcdc:	697a      	ldr	r2, [r7, #20]
 800fcde:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800fce0:	68fb      	ldr	r3, [r7, #12]
 800fce2:	0018      	movs	r0, r3
 800fce4:	f001 ff7a 	bl	8011bdc <I2C_WaitOnSTOPFlagUntilTimeout>
 800fce8:	1e03      	subs	r3, r0, #0
 800fcea:	d001      	beq.n	800fcf0 <HAL_I2C_Master_Transmit+0x1c8>
    {
      return HAL_ERROR;
 800fcec:	2301      	movs	r3, #1
 800fcee:	e01a      	b.n	800fd26 <HAL_I2C_Master_Transmit+0x1fe>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800fcf0:	68fb      	ldr	r3, [r7, #12]
 800fcf2:	681b      	ldr	r3, [r3, #0]
 800fcf4:	2220      	movs	r2, #32
 800fcf6:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800fcf8:	68fb      	ldr	r3, [r7, #12]
 800fcfa:	681b      	ldr	r3, [r3, #0]
 800fcfc:	685a      	ldr	r2, [r3, #4]
 800fcfe:	68fb      	ldr	r3, [r7, #12]
 800fd00:	681b      	ldr	r3, [r3, #0]
 800fd02:	490c      	ldr	r1, [pc, #48]	@ (800fd34 <HAL_I2C_Master_Transmit+0x20c>)
 800fd04:	400a      	ands	r2, r1
 800fd06:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800fd08:	68fb      	ldr	r3, [r7, #12]
 800fd0a:	2241      	movs	r2, #65	@ 0x41
 800fd0c:	2120      	movs	r1, #32
 800fd0e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800fd10:	68fb      	ldr	r3, [r7, #12]
 800fd12:	2242      	movs	r2, #66	@ 0x42
 800fd14:	2100      	movs	r1, #0
 800fd16:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800fd18:	68fb      	ldr	r3, [r7, #12]
 800fd1a:	2240      	movs	r2, #64	@ 0x40
 800fd1c:	2100      	movs	r1, #0
 800fd1e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800fd20:	2300      	movs	r3, #0
 800fd22:	e000      	b.n	800fd26 <HAL_I2C_Master_Transmit+0x1fe>
  }
  else
  {
    return HAL_BUSY;
 800fd24:	2302      	movs	r3, #2
  }
}
 800fd26:	0018      	movs	r0, r3
 800fd28:	46bd      	mov	sp, r7
 800fd2a:	b007      	add	sp, #28
 800fd2c:	bd90      	pop	{r4, r7, pc}
 800fd2e:	46c0      	nop			@ (mov r8, r8)
 800fd30:	80002000 	.word	0x80002000
 800fd34:	fe00e800 	.word	0xfe00e800

0800fd38 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 800fd38:	b590      	push	{r4, r7, lr}
 800fd3a:	b089      	sub	sp, #36	@ 0x24
 800fd3c:	af02      	add	r7, sp, #8
 800fd3e:	60f8      	str	r0, [r7, #12]
 800fd40:	0008      	movs	r0, r1
 800fd42:	607a      	str	r2, [r7, #4]
 800fd44:	0019      	movs	r1, r3
 800fd46:	230a      	movs	r3, #10
 800fd48:	18fb      	adds	r3, r7, r3
 800fd4a:	1c02      	adds	r2, r0, #0
 800fd4c:	801a      	strh	r2, [r3, #0]
 800fd4e:	2308      	movs	r3, #8
 800fd50:	18fb      	adds	r3, r7, r3
 800fd52:	1c0a      	adds	r2, r1, #0
 800fd54:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800fd56:	68fb      	ldr	r3, [r7, #12]
 800fd58:	2241      	movs	r2, #65	@ 0x41
 800fd5a:	5c9b      	ldrb	r3, [r3, r2]
 800fd5c:	b2db      	uxtb	r3, r3
 800fd5e:	2b20      	cmp	r3, #32
 800fd60:	d000      	beq.n	800fd64 <HAL_I2C_Master_Receive+0x2c>
 800fd62:	e0e8      	b.n	800ff36 <HAL_I2C_Master_Receive+0x1fe>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800fd64:	68fb      	ldr	r3, [r7, #12]
 800fd66:	2240      	movs	r2, #64	@ 0x40
 800fd68:	5c9b      	ldrb	r3, [r3, r2]
 800fd6a:	2b01      	cmp	r3, #1
 800fd6c:	d101      	bne.n	800fd72 <HAL_I2C_Master_Receive+0x3a>
 800fd6e:	2302      	movs	r3, #2
 800fd70:	e0e2      	b.n	800ff38 <HAL_I2C_Master_Receive+0x200>
 800fd72:	68fb      	ldr	r3, [r7, #12]
 800fd74:	2240      	movs	r2, #64	@ 0x40
 800fd76:	2101      	movs	r1, #1
 800fd78:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800fd7a:	f7fe fb75 	bl	800e468 <HAL_GetTick>
 800fd7e:	0003      	movs	r3, r0
 800fd80:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800fd82:	2380      	movs	r3, #128	@ 0x80
 800fd84:	0219      	lsls	r1, r3, #8
 800fd86:	68f8      	ldr	r0, [r7, #12]
 800fd88:	697b      	ldr	r3, [r7, #20]
 800fd8a:	9300      	str	r3, [sp, #0]
 800fd8c:	2319      	movs	r3, #25
 800fd8e:	2201      	movs	r2, #1
 800fd90:	f001 fe90 	bl	8011ab4 <I2C_WaitOnFlagUntilTimeout>
 800fd94:	1e03      	subs	r3, r0, #0
 800fd96:	d001      	beq.n	800fd9c <HAL_I2C_Master_Receive+0x64>
    {
      return HAL_ERROR;
 800fd98:	2301      	movs	r3, #1
 800fd9a:	e0cd      	b.n	800ff38 <HAL_I2C_Master_Receive+0x200>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800fd9c:	68fb      	ldr	r3, [r7, #12]
 800fd9e:	2241      	movs	r2, #65	@ 0x41
 800fda0:	2122      	movs	r1, #34	@ 0x22
 800fda2:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800fda4:	68fb      	ldr	r3, [r7, #12]
 800fda6:	2242      	movs	r2, #66	@ 0x42
 800fda8:	2110      	movs	r1, #16
 800fdaa:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800fdac:	68fb      	ldr	r3, [r7, #12]
 800fdae:	2200      	movs	r2, #0
 800fdb0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800fdb2:	68fb      	ldr	r3, [r7, #12]
 800fdb4:	687a      	ldr	r2, [r7, #4]
 800fdb6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800fdb8:	68fb      	ldr	r3, [r7, #12]
 800fdba:	2208      	movs	r2, #8
 800fdbc:	18ba      	adds	r2, r7, r2
 800fdbe:	8812      	ldrh	r2, [r2, #0]
 800fdc0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800fdc2:	68fb      	ldr	r3, [r7, #12]
 800fdc4:	2200      	movs	r2, #0
 800fdc6:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800fdc8:	68fb      	ldr	r3, [r7, #12]
 800fdca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800fdcc:	b29b      	uxth	r3, r3
 800fdce:	2bff      	cmp	r3, #255	@ 0xff
 800fdd0:	d911      	bls.n	800fdf6 <HAL_I2C_Master_Receive+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800fdd2:	68fb      	ldr	r3, [r7, #12]
 800fdd4:	22ff      	movs	r2, #255	@ 0xff
 800fdd6:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800fdd8:	68fb      	ldr	r3, [r7, #12]
 800fdda:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800fddc:	b2da      	uxtb	r2, r3
 800fdde:	2380      	movs	r3, #128	@ 0x80
 800fde0:	045c      	lsls	r4, r3, #17
 800fde2:	230a      	movs	r3, #10
 800fde4:	18fb      	adds	r3, r7, r3
 800fde6:	8819      	ldrh	r1, [r3, #0]
 800fde8:	68f8      	ldr	r0, [r7, #12]
 800fdea:	4b55      	ldr	r3, [pc, #340]	@ (800ff40 <HAL_I2C_Master_Receive+0x208>)
 800fdec:	9300      	str	r3, [sp, #0]
 800fdee:	0023      	movs	r3, r4
 800fdf0:	f002 f8b2 	bl	8011f58 <I2C_TransferConfig>
 800fdf4:	e076      	b.n	800fee4 <HAL_I2C_Master_Receive+0x1ac>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800fdf6:	68fb      	ldr	r3, [r7, #12]
 800fdf8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800fdfa:	b29a      	uxth	r2, r3
 800fdfc:	68fb      	ldr	r3, [r7, #12]
 800fdfe:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800fe00:	68fb      	ldr	r3, [r7, #12]
 800fe02:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800fe04:	b2da      	uxtb	r2, r3
 800fe06:	2380      	movs	r3, #128	@ 0x80
 800fe08:	049c      	lsls	r4, r3, #18
 800fe0a:	230a      	movs	r3, #10
 800fe0c:	18fb      	adds	r3, r7, r3
 800fe0e:	8819      	ldrh	r1, [r3, #0]
 800fe10:	68f8      	ldr	r0, [r7, #12]
 800fe12:	4b4b      	ldr	r3, [pc, #300]	@ (800ff40 <HAL_I2C_Master_Receive+0x208>)
 800fe14:	9300      	str	r3, [sp, #0]
 800fe16:	0023      	movs	r3, r4
 800fe18:	f002 f89e 	bl	8011f58 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 800fe1c:	e062      	b.n	800fee4 <HAL_I2C_Master_Receive+0x1ac>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800fe1e:	697a      	ldr	r2, [r7, #20]
 800fe20:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800fe22:	68fb      	ldr	r3, [r7, #12]
 800fe24:	0018      	movs	r0, r3
 800fe26:	f001 ff1d 	bl	8011c64 <I2C_WaitOnRXNEFlagUntilTimeout>
 800fe2a:	1e03      	subs	r3, r0, #0
 800fe2c:	d001      	beq.n	800fe32 <HAL_I2C_Master_Receive+0xfa>
      {
        return HAL_ERROR;
 800fe2e:	2301      	movs	r3, #1
 800fe30:	e082      	b.n	800ff38 <HAL_I2C_Master_Receive+0x200>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800fe32:	68fb      	ldr	r3, [r7, #12]
 800fe34:	681b      	ldr	r3, [r3, #0]
 800fe36:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800fe38:	68fb      	ldr	r3, [r7, #12]
 800fe3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fe3c:	b2d2      	uxtb	r2, r2
 800fe3e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800fe40:	68fb      	ldr	r3, [r7, #12]
 800fe42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fe44:	1c5a      	adds	r2, r3, #1
 800fe46:	68fb      	ldr	r3, [r7, #12]
 800fe48:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800fe4a:	68fb      	ldr	r3, [r7, #12]
 800fe4c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800fe4e:	3b01      	subs	r3, #1
 800fe50:	b29a      	uxth	r2, r3
 800fe52:	68fb      	ldr	r3, [r7, #12]
 800fe54:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800fe56:	68fb      	ldr	r3, [r7, #12]
 800fe58:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800fe5a:	b29b      	uxth	r3, r3
 800fe5c:	3b01      	subs	r3, #1
 800fe5e:	b29a      	uxth	r2, r3
 800fe60:	68fb      	ldr	r3, [r7, #12]
 800fe62:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800fe64:	68fb      	ldr	r3, [r7, #12]
 800fe66:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800fe68:	b29b      	uxth	r3, r3
 800fe6a:	2b00      	cmp	r3, #0
 800fe6c:	d03a      	beq.n	800fee4 <HAL_I2C_Master_Receive+0x1ac>
 800fe6e:	68fb      	ldr	r3, [r7, #12]
 800fe70:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800fe72:	2b00      	cmp	r3, #0
 800fe74:	d136      	bne.n	800fee4 <HAL_I2C_Master_Receive+0x1ac>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800fe76:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800fe78:	68f8      	ldr	r0, [r7, #12]
 800fe7a:	697b      	ldr	r3, [r7, #20]
 800fe7c:	9300      	str	r3, [sp, #0]
 800fe7e:	0013      	movs	r3, r2
 800fe80:	2200      	movs	r2, #0
 800fe82:	2180      	movs	r1, #128	@ 0x80
 800fe84:	f001 fe16 	bl	8011ab4 <I2C_WaitOnFlagUntilTimeout>
 800fe88:	1e03      	subs	r3, r0, #0
 800fe8a:	d001      	beq.n	800fe90 <HAL_I2C_Master_Receive+0x158>
        {
          return HAL_ERROR;
 800fe8c:	2301      	movs	r3, #1
 800fe8e:	e053      	b.n	800ff38 <HAL_I2C_Master_Receive+0x200>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800fe90:	68fb      	ldr	r3, [r7, #12]
 800fe92:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800fe94:	b29b      	uxth	r3, r3
 800fe96:	2bff      	cmp	r3, #255	@ 0xff
 800fe98:	d911      	bls.n	800febe <HAL_I2C_Master_Receive+0x186>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800fe9a:	68fb      	ldr	r3, [r7, #12]
 800fe9c:	22ff      	movs	r2, #255	@ 0xff
 800fe9e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800fea0:	68fb      	ldr	r3, [r7, #12]
 800fea2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800fea4:	b2da      	uxtb	r2, r3
 800fea6:	2380      	movs	r3, #128	@ 0x80
 800fea8:	045c      	lsls	r4, r3, #17
 800feaa:	230a      	movs	r3, #10
 800feac:	18fb      	adds	r3, r7, r3
 800feae:	8819      	ldrh	r1, [r3, #0]
 800feb0:	68f8      	ldr	r0, [r7, #12]
 800feb2:	2300      	movs	r3, #0
 800feb4:	9300      	str	r3, [sp, #0]
 800feb6:	0023      	movs	r3, r4
 800feb8:	f002 f84e 	bl	8011f58 <I2C_TransferConfig>
 800febc:	e012      	b.n	800fee4 <HAL_I2C_Master_Receive+0x1ac>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800febe:	68fb      	ldr	r3, [r7, #12]
 800fec0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800fec2:	b29a      	uxth	r2, r3
 800fec4:	68fb      	ldr	r3, [r7, #12]
 800fec6:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800fec8:	68fb      	ldr	r3, [r7, #12]
 800feca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800fecc:	b2da      	uxtb	r2, r3
 800fece:	2380      	movs	r3, #128	@ 0x80
 800fed0:	049c      	lsls	r4, r3, #18
 800fed2:	230a      	movs	r3, #10
 800fed4:	18fb      	adds	r3, r7, r3
 800fed6:	8819      	ldrh	r1, [r3, #0]
 800fed8:	68f8      	ldr	r0, [r7, #12]
 800feda:	2300      	movs	r3, #0
 800fedc:	9300      	str	r3, [sp, #0]
 800fede:	0023      	movs	r3, r4
 800fee0:	f002 f83a 	bl	8011f58 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800fee4:	68fb      	ldr	r3, [r7, #12]
 800fee6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800fee8:	b29b      	uxth	r3, r3
 800feea:	2b00      	cmp	r3, #0
 800feec:	d197      	bne.n	800fe1e <HAL_I2C_Master_Receive+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800feee:	697a      	ldr	r2, [r7, #20]
 800fef0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800fef2:	68fb      	ldr	r3, [r7, #12]
 800fef4:	0018      	movs	r0, r3
 800fef6:	f001 fe71 	bl	8011bdc <I2C_WaitOnSTOPFlagUntilTimeout>
 800fefa:	1e03      	subs	r3, r0, #0
 800fefc:	d001      	beq.n	800ff02 <HAL_I2C_Master_Receive+0x1ca>
    {
      return HAL_ERROR;
 800fefe:	2301      	movs	r3, #1
 800ff00:	e01a      	b.n	800ff38 <HAL_I2C_Master_Receive+0x200>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800ff02:	68fb      	ldr	r3, [r7, #12]
 800ff04:	681b      	ldr	r3, [r3, #0]
 800ff06:	2220      	movs	r2, #32
 800ff08:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800ff0a:	68fb      	ldr	r3, [r7, #12]
 800ff0c:	681b      	ldr	r3, [r3, #0]
 800ff0e:	685a      	ldr	r2, [r3, #4]
 800ff10:	68fb      	ldr	r3, [r7, #12]
 800ff12:	681b      	ldr	r3, [r3, #0]
 800ff14:	490b      	ldr	r1, [pc, #44]	@ (800ff44 <HAL_I2C_Master_Receive+0x20c>)
 800ff16:	400a      	ands	r2, r1
 800ff18:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800ff1a:	68fb      	ldr	r3, [r7, #12]
 800ff1c:	2241      	movs	r2, #65	@ 0x41
 800ff1e:	2120      	movs	r1, #32
 800ff20:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800ff22:	68fb      	ldr	r3, [r7, #12]
 800ff24:	2242      	movs	r2, #66	@ 0x42
 800ff26:	2100      	movs	r1, #0
 800ff28:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800ff2a:	68fb      	ldr	r3, [r7, #12]
 800ff2c:	2240      	movs	r2, #64	@ 0x40
 800ff2e:	2100      	movs	r1, #0
 800ff30:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800ff32:	2300      	movs	r3, #0
 800ff34:	e000      	b.n	800ff38 <HAL_I2C_Master_Receive+0x200>
  }
  else
  {
    return HAL_BUSY;
 800ff36:	2302      	movs	r3, #2
  }
}
 800ff38:	0018      	movs	r0, r3
 800ff3a:	46bd      	mov	sp, r7
 800ff3c:	b007      	add	sp, #28
 800ff3e:	bd90      	pop	{r4, r7, pc}
 800ff40:	80002400 	.word	0x80002400
 800ff44:	fe00e800 	.word	0xfe00e800

0800ff48 <HAL_I2C_Master_Transmit_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                              uint16_t Size)
{
 800ff48:	b5b0      	push	{r4, r5, r7, lr}
 800ff4a:	b088      	sub	sp, #32
 800ff4c:	af02      	add	r7, sp, #8
 800ff4e:	60f8      	str	r0, [r7, #12]
 800ff50:	0008      	movs	r0, r1
 800ff52:	607a      	str	r2, [r7, #4]
 800ff54:	0019      	movs	r1, r3
 800ff56:	230a      	movs	r3, #10
 800ff58:	18fb      	adds	r3, r7, r3
 800ff5a:	1c02      	adds	r2, r0, #0
 800ff5c:	801a      	strh	r2, [r3, #0]
 800ff5e:	2308      	movs	r3, #8
 800ff60:	18fb      	adds	r3, r7, r3
 800ff62:	1c0a      	adds	r2, r1, #0
 800ff64:	801a      	strh	r2, [r3, #0]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800ff66:	68fb      	ldr	r3, [r7, #12]
 800ff68:	2241      	movs	r2, #65	@ 0x41
 800ff6a:	5c9b      	ldrb	r3, [r3, r2]
 800ff6c:	b2db      	uxtb	r3, r3
 800ff6e:	2b20      	cmp	r3, #32
 800ff70:	d000      	beq.n	800ff74 <HAL_I2C_Master_Transmit_DMA+0x2c>
 800ff72:	e0dd      	b.n	8010130 <HAL_I2C_Master_Transmit_DMA+0x1e8>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800ff74:	68fb      	ldr	r3, [r7, #12]
 800ff76:	681b      	ldr	r3, [r3, #0]
 800ff78:	699a      	ldr	r2, [r3, #24]
 800ff7a:	2380      	movs	r3, #128	@ 0x80
 800ff7c:	021b      	lsls	r3, r3, #8
 800ff7e:	401a      	ands	r2, r3
 800ff80:	2380      	movs	r3, #128	@ 0x80
 800ff82:	021b      	lsls	r3, r3, #8
 800ff84:	429a      	cmp	r2, r3
 800ff86:	d101      	bne.n	800ff8c <HAL_I2C_Master_Transmit_DMA+0x44>
    {
      return HAL_BUSY;
 800ff88:	2302      	movs	r3, #2
 800ff8a:	e0d2      	b.n	8010132 <HAL_I2C_Master_Transmit_DMA+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800ff8c:	68fb      	ldr	r3, [r7, #12]
 800ff8e:	2240      	movs	r2, #64	@ 0x40
 800ff90:	5c9b      	ldrb	r3, [r3, r2]
 800ff92:	2b01      	cmp	r3, #1
 800ff94:	d101      	bne.n	800ff9a <HAL_I2C_Master_Transmit_DMA+0x52>
 800ff96:	2302      	movs	r3, #2
 800ff98:	e0cb      	b.n	8010132 <HAL_I2C_Master_Transmit_DMA+0x1ea>
 800ff9a:	68fb      	ldr	r3, [r7, #12]
 800ff9c:	2240      	movs	r2, #64	@ 0x40
 800ff9e:	2101      	movs	r1, #1
 800ffa0:	5499      	strb	r1, [r3, r2]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800ffa2:	68fb      	ldr	r3, [r7, #12]
 800ffa4:	2241      	movs	r2, #65	@ 0x41
 800ffa6:	2121      	movs	r1, #33	@ 0x21
 800ffa8:	5499      	strb	r1, [r3, r2]
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800ffaa:	68fb      	ldr	r3, [r7, #12]
 800ffac:	2242      	movs	r2, #66	@ 0x42
 800ffae:	2110      	movs	r1, #16
 800ffb0:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800ffb2:	68fb      	ldr	r3, [r7, #12]
 800ffb4:	2200      	movs	r2, #0
 800ffb6:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800ffb8:	68fb      	ldr	r3, [r7, #12]
 800ffba:	687a      	ldr	r2, [r7, #4]
 800ffbc:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800ffbe:	68fb      	ldr	r3, [r7, #12]
 800ffc0:	2208      	movs	r2, #8
 800ffc2:	18ba      	adds	r2, r7, r2
 800ffc4:	8812      	ldrh	r2, [r2, #0]
 800ffc6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800ffc8:	68fb      	ldr	r3, [r7, #12]
 800ffca:	4a5c      	ldr	r2, [pc, #368]	@ (801013c <HAL_I2C_Master_Transmit_DMA+0x1f4>)
 800ffcc:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 800ffce:	68fb      	ldr	r3, [r7, #12]
 800ffd0:	4a5b      	ldr	r2, [pc, #364]	@ (8010140 <HAL_I2C_Master_Transmit_DMA+0x1f8>)
 800ffd2:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800ffd4:	68fb      	ldr	r3, [r7, #12]
 800ffd6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ffd8:	b29b      	uxth	r3, r3
 800ffda:	2bff      	cmp	r3, #255	@ 0xff
 800ffdc:	d906      	bls.n	800ffec <HAL_I2C_Master_Transmit_DMA+0xa4>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800ffde:	68fb      	ldr	r3, [r7, #12]
 800ffe0:	22ff      	movs	r2, #255	@ 0xff
 800ffe2:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 800ffe4:	2380      	movs	r3, #128	@ 0x80
 800ffe6:	045b      	lsls	r3, r3, #17
 800ffe8:	617b      	str	r3, [r7, #20]
 800ffea:	e007      	b.n	800fffc <HAL_I2C_Master_Transmit_DMA+0xb4>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800ffec:	68fb      	ldr	r3, [r7, #12]
 800ffee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800fff0:	b29a      	uxth	r2, r3
 800fff2:	68fb      	ldr	r3, [r7, #12]
 800fff4:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 800fff6:	2380      	movs	r3, #128	@ 0x80
 800fff8:	049b      	lsls	r3, r3, #18
 800fffa:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 800fffc:	68fb      	ldr	r3, [r7, #12]
 800fffe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8010000:	2b00      	cmp	r3, #0
 8010002:	d100      	bne.n	8010006 <HAL_I2C_Master_Transmit_DMA+0xbe>
 8010004:	e078      	b.n	80100f8 <HAL_I2C_Master_Transmit_DMA+0x1b0>
    {
      if (hi2c->hdmatx != NULL)
 8010006:	68fb      	ldr	r3, [r7, #12]
 8010008:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801000a:	2b00      	cmp	r3, #0
 801000c:	d023      	beq.n	8010056 <HAL_I2C_Master_Transmit_DMA+0x10e>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAMasterTransmitCplt;
 801000e:	68fb      	ldr	r3, [r7, #12]
 8010010:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010012:	4a4c      	ldr	r2, [pc, #304]	@ (8010144 <HAL_I2C_Master_Transmit_DMA+0x1fc>)
 8010014:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 8010016:	68fb      	ldr	r3, [r7, #12]
 8010018:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801001a:	4a4b      	ldr	r2, [pc, #300]	@ (8010148 <HAL_I2C_Master_Transmit_DMA+0x200>)
 801001c:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 801001e:	68fb      	ldr	r3, [r7, #12]
 8010020:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010022:	2200      	movs	r2, #0
 8010024:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->hdmatx->XferAbortCallback = NULL;
 8010026:	68fb      	ldr	r3, [r7, #12]
 8010028:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801002a:	2200      	movs	r2, #0
 801002c:	639a      	str	r2, [r3, #56]	@ 0x38

        /* Enable the DMA channel */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR,
 801002e:	68fb      	ldr	r3, [r7, #12]
 8010030:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8010032:	6879      	ldr	r1, [r7, #4]
 8010034:	68fb      	ldr	r3, [r7, #12]
 8010036:	681b      	ldr	r3, [r3, #0]
 8010038:	3328      	adds	r3, #40	@ 0x28
 801003a:	001a      	movs	r2, r3
                                         hi2c->XferSize);
 801003c:	68fb      	ldr	r3, [r7, #12]
 801003e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR,
 8010040:	2513      	movs	r5, #19
 8010042:	197c      	adds	r4, r7, r5
 8010044:	f7fe ff62 	bl	800ef0c <HAL_DMA_Start_IT>
 8010048:	0003      	movs	r3, r0
 801004a:	7023      	strb	r3, [r4, #0]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 801004c:	197b      	adds	r3, r7, r5
 801004e:	781b      	ldrb	r3, [r3, #0]
 8010050:	2b00      	cmp	r3, #0
 8010052:	d13d      	bne.n	80100d0 <HAL_I2C_Master_Transmit_DMA+0x188>
 8010054:	e013      	b.n	801007e <HAL_I2C_Master_Transmit_DMA+0x136>
        hi2c->State     = HAL_I2C_STATE_READY;
 8010056:	68fb      	ldr	r3, [r7, #12]
 8010058:	2241      	movs	r2, #65	@ 0x41
 801005a:	2120      	movs	r1, #32
 801005c:	5499      	strb	r1, [r3, r2]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 801005e:	68fb      	ldr	r3, [r7, #12]
 8010060:	2242      	movs	r2, #66	@ 0x42
 8010062:	2100      	movs	r1, #0
 8010064:	5499      	strb	r1, [r3, r2]
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8010066:	68fb      	ldr	r3, [r7, #12]
 8010068:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801006a:	2280      	movs	r2, #128	@ 0x80
 801006c:	431a      	orrs	r2, r3
 801006e:	68fb      	ldr	r3, [r7, #12]
 8010070:	645a      	str	r2, [r3, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 8010072:	68fb      	ldr	r3, [r7, #12]
 8010074:	2240      	movs	r2, #64	@ 0x40
 8010076:	2100      	movs	r1, #0
 8010078:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 801007a:	2301      	movs	r3, #1
 801007c:	e059      	b.n	8010132 <HAL_I2C_Master_Transmit_DMA+0x1ea>
      {
        /* Send Slave Address */
        /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_WRITE);
 801007e:	68fb      	ldr	r3, [r7, #12]
 8010080:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8010082:	b2da      	uxtb	r2, r3
 8010084:	697c      	ldr	r4, [r7, #20]
 8010086:	230a      	movs	r3, #10
 8010088:	18fb      	adds	r3, r7, r3
 801008a:	8819      	ldrh	r1, [r3, #0]
 801008c:	68f8      	ldr	r0, [r7, #12]
 801008e:	4b2f      	ldr	r3, [pc, #188]	@ (801014c <HAL_I2C_Master_Transmit_DMA+0x204>)
 8010090:	9300      	str	r3, [sp, #0]
 8010092:	0023      	movs	r3, r4
 8010094:	f001 ff60 	bl	8011f58 <I2C_TransferConfig>

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 8010098:	68fb      	ldr	r3, [r7, #12]
 801009a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801009c:	b29a      	uxth	r2, r3
 801009e:	68fb      	ldr	r3, [r7, #12]
 80100a0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80100a2:	1ad3      	subs	r3, r2, r3
 80100a4:	b29a      	uxth	r2, r3
 80100a6:	68fb      	ldr	r3, [r7, #12]
 80100a8:	855a      	strh	r2, [r3, #42]	@ 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80100aa:	68fb      	ldr	r3, [r7, #12]
 80100ac:	2240      	movs	r2, #64	@ 0x40
 80100ae:	2100      	movs	r1, #0
 80100b0:	5499      	strb	r1, [r3, r2]

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 80100b2:	68fb      	ldr	r3, [r7, #12]
 80100b4:	2110      	movs	r1, #16
 80100b6:	0018      	movs	r0, r3
 80100b8:	f001 ff88 	bl	8011fcc <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 80100bc:	68fb      	ldr	r3, [r7, #12]
 80100be:	681b      	ldr	r3, [r3, #0]
 80100c0:	681a      	ldr	r2, [r3, #0]
 80100c2:	68fb      	ldr	r3, [r7, #12]
 80100c4:	681b      	ldr	r3, [r3, #0]
 80100c6:	2180      	movs	r1, #128	@ 0x80
 80100c8:	01c9      	lsls	r1, r1, #7
 80100ca:	430a      	orrs	r2, r1
 80100cc:	601a      	str	r2, [r3, #0]
 80100ce:	e02d      	b.n	801012c <HAL_I2C_Master_Transmit_DMA+0x1e4>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 80100d0:	68fb      	ldr	r3, [r7, #12]
 80100d2:	2241      	movs	r2, #65	@ 0x41
 80100d4:	2120      	movs	r1, #32
 80100d6:	5499      	strb	r1, [r3, r2]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 80100d8:	68fb      	ldr	r3, [r7, #12]
 80100da:	2242      	movs	r2, #66	@ 0x42
 80100dc:	2100      	movs	r1, #0
 80100de:	5499      	strb	r1, [r3, r2]

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 80100e0:	68fb      	ldr	r3, [r7, #12]
 80100e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80100e4:	2210      	movs	r2, #16
 80100e6:	431a      	orrs	r2, r3
 80100e8:	68fb      	ldr	r3, [r7, #12]
 80100ea:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80100ec:	68fb      	ldr	r3, [r7, #12]
 80100ee:	2240      	movs	r2, #64	@ 0x40
 80100f0:	2100      	movs	r1, #0
 80100f2:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80100f4:	2301      	movs	r3, #1
 80100f6:	e01c      	b.n	8010132 <HAL_I2C_Master_Transmit_DMA+0x1ea>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 80100f8:	68fb      	ldr	r3, [r7, #12]
 80100fa:	4a15      	ldr	r2, [pc, #84]	@ (8010150 <HAL_I2C_Master_Transmit_DMA+0x208>)
 80100fc:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Send Slave Address */
      /* Set NBYTES to write and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80100fe:	68fb      	ldr	r3, [r7, #12]
 8010100:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8010102:	b2da      	uxtb	r2, r3
 8010104:	2380      	movs	r3, #128	@ 0x80
 8010106:	049c      	lsls	r4, r3, #18
 8010108:	230a      	movs	r3, #10
 801010a:	18fb      	adds	r3, r7, r3
 801010c:	8819      	ldrh	r1, [r3, #0]
 801010e:	68f8      	ldr	r0, [r7, #12]
 8010110:	4b0e      	ldr	r3, [pc, #56]	@ (801014c <HAL_I2C_Master_Transmit_DMA+0x204>)
 8010112:	9300      	str	r3, [sp, #0]
 8010114:	0023      	movs	r3, r4
 8010116:	f001 ff1f 	bl	8011f58 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 801011a:	68fb      	ldr	r3, [r7, #12]
 801011c:	2240      	movs	r2, #64	@ 0x40
 801011e:	2100      	movs	r1, #0
 8010120:	5499      	strb	r1, [r3, r2]
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 8010122:	68fb      	ldr	r3, [r7, #12]
 8010124:	2101      	movs	r1, #1
 8010126:	0018      	movs	r0, r3
 8010128:	f001 ff50 	bl	8011fcc <I2C_Enable_IRQ>
    }

    return HAL_OK;
 801012c:	2300      	movs	r3, #0
 801012e:	e000      	b.n	8010132 <HAL_I2C_Master_Transmit_DMA+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8010130:	2302      	movs	r3, #2
  }
}
 8010132:	0018      	movs	r0, r3
 8010134:	46bd      	mov	sp, r7
 8010136:	b006      	add	sp, #24
 8010138:	bdb0      	pop	{r4, r5, r7, pc}
 801013a:	46c0      	nop			@ (mov r8, r8)
 801013c:	ffff0000 	.word	0xffff0000
 8010140:	0801094d 	.word	0x0801094d
 8010144:	08011905 	.word	0x08011905
 8010148:	08011a45 	.word	0x08011a45
 801014c:	80002000 	.word	0x80002000
 8010150:	080104f9 	.word	0x080104f9

08010154 <HAL_I2C_Master_Receive_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                             uint16_t Size)
{
 8010154:	b5b0      	push	{r4, r5, r7, lr}
 8010156:	b088      	sub	sp, #32
 8010158:	af02      	add	r7, sp, #8
 801015a:	60f8      	str	r0, [r7, #12]
 801015c:	0008      	movs	r0, r1
 801015e:	607a      	str	r2, [r7, #4]
 8010160:	0019      	movs	r1, r3
 8010162:	230a      	movs	r3, #10
 8010164:	18fb      	adds	r3, r7, r3
 8010166:	1c02      	adds	r2, r0, #0
 8010168:	801a      	strh	r2, [r3, #0]
 801016a:	2308      	movs	r3, #8
 801016c:	18fb      	adds	r3, r7, r3
 801016e:	1c0a      	adds	r2, r1, #0
 8010170:	801a      	strh	r2, [r3, #0]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8010172:	68fb      	ldr	r3, [r7, #12]
 8010174:	2241      	movs	r2, #65	@ 0x41
 8010176:	5c9b      	ldrb	r3, [r3, r2]
 8010178:	b2db      	uxtb	r3, r3
 801017a:	2b20      	cmp	r3, #32
 801017c:	d000      	beq.n	8010180 <HAL_I2C_Master_Receive_DMA+0x2c>
 801017e:	e0dd      	b.n	801033c <HAL_I2C_Master_Receive_DMA+0x1e8>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8010180:	68fb      	ldr	r3, [r7, #12]
 8010182:	681b      	ldr	r3, [r3, #0]
 8010184:	699a      	ldr	r2, [r3, #24]
 8010186:	2380      	movs	r3, #128	@ 0x80
 8010188:	021b      	lsls	r3, r3, #8
 801018a:	401a      	ands	r2, r3
 801018c:	2380      	movs	r3, #128	@ 0x80
 801018e:	021b      	lsls	r3, r3, #8
 8010190:	429a      	cmp	r2, r3
 8010192:	d101      	bne.n	8010198 <HAL_I2C_Master_Receive_DMA+0x44>
    {
      return HAL_BUSY;
 8010194:	2302      	movs	r3, #2
 8010196:	e0d2      	b.n	801033e <HAL_I2C_Master_Receive_DMA+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8010198:	68fb      	ldr	r3, [r7, #12]
 801019a:	2240      	movs	r2, #64	@ 0x40
 801019c:	5c9b      	ldrb	r3, [r3, r2]
 801019e:	2b01      	cmp	r3, #1
 80101a0:	d101      	bne.n	80101a6 <HAL_I2C_Master_Receive_DMA+0x52>
 80101a2:	2302      	movs	r3, #2
 80101a4:	e0cb      	b.n	801033e <HAL_I2C_Master_Receive_DMA+0x1ea>
 80101a6:	68fb      	ldr	r3, [r7, #12]
 80101a8:	2240      	movs	r2, #64	@ 0x40
 80101aa:	2101      	movs	r1, #1
 80101ac:	5499      	strb	r1, [r3, r2]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80101ae:	68fb      	ldr	r3, [r7, #12]
 80101b0:	2241      	movs	r2, #65	@ 0x41
 80101b2:	2122      	movs	r1, #34	@ 0x22
 80101b4:	5499      	strb	r1, [r3, r2]
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80101b6:	68fb      	ldr	r3, [r7, #12]
 80101b8:	2242      	movs	r2, #66	@ 0x42
 80101ba:	2110      	movs	r1, #16
 80101bc:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80101be:	68fb      	ldr	r3, [r7, #12]
 80101c0:	2200      	movs	r2, #0
 80101c2:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80101c4:	68fb      	ldr	r3, [r7, #12]
 80101c6:	687a      	ldr	r2, [r7, #4]
 80101c8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80101ca:	68fb      	ldr	r3, [r7, #12]
 80101cc:	2208      	movs	r2, #8
 80101ce:	18ba      	adds	r2, r7, r2
 80101d0:	8812      	ldrh	r2, [r2, #0]
 80101d2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80101d4:	68fb      	ldr	r3, [r7, #12]
 80101d6:	4a5c      	ldr	r2, [pc, #368]	@ (8010348 <HAL_I2C_Master_Receive_DMA+0x1f4>)
 80101d8:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 80101da:	68fb      	ldr	r3, [r7, #12]
 80101dc:	4a5b      	ldr	r2, [pc, #364]	@ (801034c <HAL_I2C_Master_Receive_DMA+0x1f8>)
 80101de:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80101e0:	68fb      	ldr	r3, [r7, #12]
 80101e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80101e4:	b29b      	uxth	r3, r3
 80101e6:	2bff      	cmp	r3, #255	@ 0xff
 80101e8:	d906      	bls.n	80101f8 <HAL_I2C_Master_Receive_DMA+0xa4>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80101ea:	68fb      	ldr	r3, [r7, #12]
 80101ec:	22ff      	movs	r2, #255	@ 0xff
 80101ee:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 80101f0:	2380      	movs	r3, #128	@ 0x80
 80101f2:	045b      	lsls	r3, r3, #17
 80101f4:	617b      	str	r3, [r7, #20]
 80101f6:	e007      	b.n	8010208 <HAL_I2C_Master_Receive_DMA+0xb4>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80101f8:	68fb      	ldr	r3, [r7, #12]
 80101fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80101fc:	b29a      	uxth	r2, r3
 80101fe:	68fb      	ldr	r3, [r7, #12]
 8010200:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8010202:	2380      	movs	r3, #128	@ 0x80
 8010204:	049b      	lsls	r3, r3, #18
 8010206:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8010208:	68fb      	ldr	r3, [r7, #12]
 801020a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801020c:	2b00      	cmp	r3, #0
 801020e:	d100      	bne.n	8010212 <HAL_I2C_Master_Receive_DMA+0xbe>
 8010210:	e078      	b.n	8010304 <HAL_I2C_Master_Receive_DMA+0x1b0>
    {
      if (hi2c->hdmarx != NULL)
 8010212:	68fb      	ldr	r3, [r7, #12]
 8010214:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010216:	2b00      	cmp	r3, #0
 8010218:	d023      	beq.n	8010262 <HAL_I2C_Master_Receive_DMA+0x10e>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAMasterReceiveCplt;
 801021a:	68fb      	ldr	r3, [r7, #12]
 801021c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801021e:	4a4c      	ldr	r2, [pc, #304]	@ (8010350 <HAL_I2C_Master_Receive_DMA+0x1fc>)
 8010220:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 8010222:	68fb      	ldr	r3, [r7, #12]
 8010224:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010226:	4a4b      	ldr	r2, [pc, #300]	@ (8010354 <HAL_I2C_Master_Receive_DMA+0x200>)
 8010228:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 801022a:	68fb      	ldr	r3, [r7, #12]
 801022c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801022e:	2200      	movs	r2, #0
 8010230:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->hdmarx->XferAbortCallback = NULL;
 8010232:	68fb      	ldr	r3, [r7, #12]
 8010234:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010236:	2200      	movs	r2, #0
 8010238:	639a      	str	r2, [r3, #56]	@ 0x38

        /* Enable the DMA channel */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 801023a:	68fb      	ldr	r3, [r7, #12]
 801023c:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 801023e:	68fb      	ldr	r3, [r7, #12]
 8010240:	681b      	ldr	r3, [r3, #0]
 8010242:	3324      	adds	r3, #36	@ 0x24
 8010244:	0019      	movs	r1, r3
 8010246:	687a      	ldr	r2, [r7, #4]
                                         hi2c->XferSize);
 8010248:	68fb      	ldr	r3, [r7, #12]
 801024a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 801024c:	2513      	movs	r5, #19
 801024e:	197c      	adds	r4, r7, r5
 8010250:	f7fe fe5c 	bl	800ef0c <HAL_DMA_Start_IT>
 8010254:	0003      	movs	r3, r0
 8010256:	7023      	strb	r3, [r4, #0]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8010258:	197b      	adds	r3, r7, r5
 801025a:	781b      	ldrb	r3, [r3, #0]
 801025c:	2b00      	cmp	r3, #0
 801025e:	d13d      	bne.n	80102dc <HAL_I2C_Master_Receive_DMA+0x188>
 8010260:	e013      	b.n	801028a <HAL_I2C_Master_Receive_DMA+0x136>
        hi2c->State     = HAL_I2C_STATE_READY;
 8010262:	68fb      	ldr	r3, [r7, #12]
 8010264:	2241      	movs	r2, #65	@ 0x41
 8010266:	2120      	movs	r1, #32
 8010268:	5499      	strb	r1, [r3, r2]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 801026a:	68fb      	ldr	r3, [r7, #12]
 801026c:	2242      	movs	r2, #66	@ 0x42
 801026e:	2100      	movs	r1, #0
 8010270:	5499      	strb	r1, [r3, r2]
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8010272:	68fb      	ldr	r3, [r7, #12]
 8010274:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010276:	2280      	movs	r2, #128	@ 0x80
 8010278:	431a      	orrs	r2, r3
 801027a:	68fb      	ldr	r3, [r7, #12]
 801027c:	645a      	str	r2, [r3, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 801027e:	68fb      	ldr	r3, [r7, #12]
 8010280:	2240      	movs	r2, #64	@ 0x40
 8010282:	2100      	movs	r1, #0
 8010284:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 8010286:	2301      	movs	r3, #1
 8010288:	e059      	b.n	801033e <HAL_I2C_Master_Receive_DMA+0x1ea>
      {
        /* Send Slave Address */
        /* Set NBYTES to read and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_READ);
 801028a:	68fb      	ldr	r3, [r7, #12]
 801028c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801028e:	b2da      	uxtb	r2, r3
 8010290:	697c      	ldr	r4, [r7, #20]
 8010292:	230a      	movs	r3, #10
 8010294:	18fb      	adds	r3, r7, r3
 8010296:	8819      	ldrh	r1, [r3, #0]
 8010298:	68f8      	ldr	r0, [r7, #12]
 801029a:	4b2f      	ldr	r3, [pc, #188]	@ (8010358 <HAL_I2C_Master_Receive_DMA+0x204>)
 801029c:	9300      	str	r3, [sp, #0]
 801029e:	0023      	movs	r3, r4
 80102a0:	f001 fe5a 	bl	8011f58 <I2C_TransferConfig>

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 80102a4:	68fb      	ldr	r3, [r7, #12]
 80102a6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80102a8:	b29a      	uxth	r2, r3
 80102aa:	68fb      	ldr	r3, [r7, #12]
 80102ac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80102ae:	1ad3      	subs	r3, r2, r3
 80102b0:	b29a      	uxth	r2, r3
 80102b2:	68fb      	ldr	r3, [r7, #12]
 80102b4:	855a      	strh	r2, [r3, #42]	@ 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80102b6:	68fb      	ldr	r3, [r7, #12]
 80102b8:	2240      	movs	r2, #64	@ 0x40
 80102ba:	2100      	movs	r1, #0
 80102bc:	5499      	strb	r1, [r3, r2]

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 80102be:	68fb      	ldr	r3, [r7, #12]
 80102c0:	2110      	movs	r1, #16
 80102c2:	0018      	movs	r0, r3
 80102c4:	f001 fe82 	bl	8011fcc <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 80102c8:	68fb      	ldr	r3, [r7, #12]
 80102ca:	681b      	ldr	r3, [r3, #0]
 80102cc:	681a      	ldr	r2, [r3, #0]
 80102ce:	68fb      	ldr	r3, [r7, #12]
 80102d0:	681b      	ldr	r3, [r3, #0]
 80102d2:	2180      	movs	r1, #128	@ 0x80
 80102d4:	0209      	lsls	r1, r1, #8
 80102d6:	430a      	orrs	r2, r1
 80102d8:	601a      	str	r2, [r3, #0]
 80102da:	e02d      	b.n	8010338 <HAL_I2C_Master_Receive_DMA+0x1e4>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 80102dc:	68fb      	ldr	r3, [r7, #12]
 80102de:	2241      	movs	r2, #65	@ 0x41
 80102e0:	2120      	movs	r1, #32
 80102e2:	5499      	strb	r1, [r3, r2]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 80102e4:	68fb      	ldr	r3, [r7, #12]
 80102e6:	2242      	movs	r2, #66	@ 0x42
 80102e8:	2100      	movs	r1, #0
 80102ea:	5499      	strb	r1, [r3, r2]

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 80102ec:	68fb      	ldr	r3, [r7, #12]
 80102ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80102f0:	2210      	movs	r2, #16
 80102f2:	431a      	orrs	r2, r3
 80102f4:	68fb      	ldr	r3, [r7, #12]
 80102f6:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80102f8:	68fb      	ldr	r3, [r7, #12]
 80102fa:	2240      	movs	r2, #64	@ 0x40
 80102fc:	2100      	movs	r1, #0
 80102fe:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8010300:	2301      	movs	r3, #1
 8010302:	e01c      	b.n	801033e <HAL_I2C_Master_Receive_DMA+0x1ea>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 8010304:	68fb      	ldr	r3, [r7, #12]
 8010306:	4a15      	ldr	r2, [pc, #84]	@ (801035c <HAL_I2C_Master_Receive_DMA+0x208>)
 8010308:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Send Slave Address */
      /* Set NBYTES to read and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 801030a:	68fb      	ldr	r3, [r7, #12]
 801030c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801030e:	b2da      	uxtb	r2, r3
 8010310:	2380      	movs	r3, #128	@ 0x80
 8010312:	049c      	lsls	r4, r3, #18
 8010314:	230a      	movs	r3, #10
 8010316:	18fb      	adds	r3, r7, r3
 8010318:	8819      	ldrh	r1, [r3, #0]
 801031a:	68f8      	ldr	r0, [r7, #12]
 801031c:	4b0e      	ldr	r3, [pc, #56]	@ (8010358 <HAL_I2C_Master_Receive_DMA+0x204>)
 801031e:	9300      	str	r3, [sp, #0]
 8010320:	0023      	movs	r3, r4
 8010322:	f001 fe19 	bl	8011f58 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8010326:	68fb      	ldr	r3, [r7, #12]
 8010328:	2240      	movs	r2, #64	@ 0x40
 801032a:	2100      	movs	r1, #0
 801032c:	5499      	strb	r1, [r3, r2]
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 801032e:	68fb      	ldr	r3, [r7, #12]
 8010330:	2101      	movs	r1, #1
 8010332:	0018      	movs	r0, r3
 8010334:	f001 fe4a 	bl	8011fcc <I2C_Enable_IRQ>
    }

    return HAL_OK;
 8010338:	2300      	movs	r3, #0
 801033a:	e000      	b.n	801033e <HAL_I2C_Master_Receive_DMA+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 801033c:	2302      	movs	r3, #2
  }
}
 801033e:	0018      	movs	r0, r3
 8010340:	46bd      	mov	sp, r7
 8010342:	b006      	add	sp, #24
 8010344:	bdb0      	pop	{r4, r5, r7, pc}
 8010346:	46c0      	nop			@ (mov r8, r8)
 8010348:	ffff0000 	.word	0xffff0000
 801034c:	0801094d 	.word	0x0801094d
 8010350:	080119a5 	.word	0x080119a5
 8010354:	08011a45 	.word	0x08011a45
 8010358:	80002400 	.word	0x80002400
 801035c:	080104f9 	.word	0x080104f9

08010360 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8010360:	b580      	push	{r7, lr}
 8010362:	b084      	sub	sp, #16
 8010364:	af00      	add	r7, sp, #0
 8010366:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8010368:	687b      	ldr	r3, [r7, #4]
 801036a:	681b      	ldr	r3, [r3, #0]
 801036c:	699b      	ldr	r3, [r3, #24]
 801036e:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8010370:	687b      	ldr	r3, [r7, #4]
 8010372:	681b      	ldr	r3, [r3, #0]
 8010374:	681b      	ldr	r3, [r3, #0]
 8010376:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8010378:	687b      	ldr	r3, [r7, #4]
 801037a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801037c:	2b00      	cmp	r3, #0
 801037e:	d005      	beq.n	801038c <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8010380:	687b      	ldr	r3, [r7, #4]
 8010382:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010384:	68ba      	ldr	r2, [r7, #8]
 8010386:	68f9      	ldr	r1, [r7, #12]
 8010388:	6878      	ldr	r0, [r7, #4]
 801038a:	4798      	blx	r3
  }
}
 801038c:	46c0      	nop			@ (mov r8, r8)
 801038e:	46bd      	mov	sp, r7
 8010390:	b004      	add	sp, #16
 8010392:	bd80      	pop	{r7, pc}

08010394 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8010394:	b580      	push	{r7, lr}
 8010396:	b086      	sub	sp, #24
 8010398:	af00      	add	r7, sp, #0
 801039a:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 801039c:	687b      	ldr	r3, [r7, #4]
 801039e:	681b      	ldr	r3, [r3, #0]
 80103a0:	699b      	ldr	r3, [r3, #24]
 80103a2:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80103a4:	687b      	ldr	r3, [r7, #4]
 80103a6:	681b      	ldr	r3, [r3, #0]
 80103a8:	681b      	ldr	r3, [r3, #0]
 80103aa:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80103ac:	697a      	ldr	r2, [r7, #20]
 80103ae:	2380      	movs	r3, #128	@ 0x80
 80103b0:	005b      	lsls	r3, r3, #1
 80103b2:	4013      	ands	r3, r2
 80103b4:	d00e      	beq.n	80103d4 <HAL_I2C_ER_IRQHandler+0x40>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80103b6:	693b      	ldr	r3, [r7, #16]
 80103b8:	2280      	movs	r2, #128	@ 0x80
 80103ba:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80103bc:	d00a      	beq.n	80103d4 <HAL_I2C_ER_IRQHandler+0x40>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 80103be:	687b      	ldr	r3, [r7, #4]
 80103c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80103c2:	2201      	movs	r2, #1
 80103c4:	431a      	orrs	r2, r3
 80103c6:	687b      	ldr	r3, [r7, #4]
 80103c8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80103ca:	687b      	ldr	r3, [r7, #4]
 80103cc:	681b      	ldr	r3, [r3, #0]
 80103ce:	2280      	movs	r2, #128	@ 0x80
 80103d0:	0052      	lsls	r2, r2, #1
 80103d2:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 80103d4:	697a      	ldr	r2, [r7, #20]
 80103d6:	2380      	movs	r3, #128	@ 0x80
 80103d8:	00db      	lsls	r3, r3, #3
 80103da:	4013      	ands	r3, r2
 80103dc:	d00e      	beq.n	80103fc <HAL_I2C_ER_IRQHandler+0x68>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80103de:	693b      	ldr	r3, [r7, #16]
 80103e0:	2280      	movs	r2, #128	@ 0x80
 80103e2:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 80103e4:	d00a      	beq.n	80103fc <HAL_I2C_ER_IRQHandler+0x68>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 80103e6:	687b      	ldr	r3, [r7, #4]
 80103e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80103ea:	2208      	movs	r2, #8
 80103ec:	431a      	orrs	r2, r3
 80103ee:	687b      	ldr	r3, [r7, #4]
 80103f0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80103f2:	687b      	ldr	r3, [r7, #4]
 80103f4:	681b      	ldr	r3, [r3, #0]
 80103f6:	2280      	movs	r2, #128	@ 0x80
 80103f8:	00d2      	lsls	r2, r2, #3
 80103fa:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 80103fc:	697a      	ldr	r2, [r7, #20]
 80103fe:	2380      	movs	r3, #128	@ 0x80
 8010400:	009b      	lsls	r3, r3, #2
 8010402:	4013      	ands	r3, r2
 8010404:	d00e      	beq.n	8010424 <HAL_I2C_ER_IRQHandler+0x90>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8010406:	693b      	ldr	r3, [r7, #16]
 8010408:	2280      	movs	r2, #128	@ 0x80
 801040a:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 801040c:	d00a      	beq.n	8010424 <HAL_I2C_ER_IRQHandler+0x90>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 801040e:	687b      	ldr	r3, [r7, #4]
 8010410:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010412:	2202      	movs	r2, #2
 8010414:	431a      	orrs	r2, r3
 8010416:	687b      	ldr	r3, [r7, #4]
 8010418:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 801041a:	687b      	ldr	r3, [r7, #4]
 801041c:	681b      	ldr	r3, [r3, #0]
 801041e:	2280      	movs	r2, #128	@ 0x80
 8010420:	0092      	lsls	r2, r2, #2
 8010422:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8010424:	687b      	ldr	r3, [r7, #4]
 8010426:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010428:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 801042a:	68fb      	ldr	r3, [r7, #12]
 801042c:	220b      	movs	r2, #11
 801042e:	4013      	ands	r3, r2
 8010430:	d005      	beq.n	801043e <HAL_I2C_ER_IRQHandler+0xaa>
  {
    I2C_ITError(hi2c, tmperror);
 8010432:	68fa      	ldr	r2, [r7, #12]
 8010434:	687b      	ldr	r3, [r7, #4]
 8010436:	0011      	movs	r1, r2
 8010438:	0018      	movs	r0, r3
 801043a:	f001 f915 	bl	8011668 <I2C_ITError>
  }
}
 801043e:	46c0      	nop			@ (mov r8, r8)
 8010440:	46bd      	mov	sp, r7
 8010442:	b006      	add	sp, #24
 8010444:	bd80      	pop	{r7, pc}

08010446 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8010446:	b580      	push	{r7, lr}
 8010448:	b082      	sub	sp, #8
 801044a:	af00      	add	r7, sp, #0
 801044c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 801044e:	46c0      	nop			@ (mov r8, r8)
 8010450:	46bd      	mov	sp, r7
 8010452:	b002      	add	sp, #8
 8010454:	bd80      	pop	{r7, pc}

08010456 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8010456:	b580      	push	{r7, lr}
 8010458:	b082      	sub	sp, #8
 801045a:	af00      	add	r7, sp, #0
 801045c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 801045e:	46c0      	nop			@ (mov r8, r8)
 8010460:	46bd      	mov	sp, r7
 8010462:	b002      	add	sp, #8
 8010464:	bd80      	pop	{r7, pc}

08010466 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8010466:	b580      	push	{r7, lr}
 8010468:	b082      	sub	sp, #8
 801046a:	af00      	add	r7, sp, #0
 801046c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 801046e:	46c0      	nop			@ (mov r8, r8)
 8010470:	46bd      	mov	sp, r7
 8010472:	b002      	add	sp, #8
 8010474:	bd80      	pop	{r7, pc}

08010476 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8010476:	b580      	push	{r7, lr}
 8010478:	b082      	sub	sp, #8
 801047a:	af00      	add	r7, sp, #0
 801047c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 801047e:	46c0      	nop			@ (mov r8, r8)
 8010480:	46bd      	mov	sp, r7
 8010482:	b002      	add	sp, #8
 8010484:	bd80      	pop	{r7, pc}

08010486 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8010486:	b580      	push	{r7, lr}
 8010488:	b082      	sub	sp, #8
 801048a:	af00      	add	r7, sp, #0
 801048c:	6078      	str	r0, [r7, #4]
 801048e:	0008      	movs	r0, r1
 8010490:	0011      	movs	r1, r2
 8010492:	1cfb      	adds	r3, r7, #3
 8010494:	1c02      	adds	r2, r0, #0
 8010496:	701a      	strb	r2, [r3, #0]
 8010498:	003b      	movs	r3, r7
 801049a:	1c0a      	adds	r2, r1, #0
 801049c:	801a      	strh	r2, [r3, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 801049e:	46c0      	nop			@ (mov r8, r8)
 80104a0:	46bd      	mov	sp, r7
 80104a2:	b002      	add	sp, #8
 80104a4:	bd80      	pop	{r7, pc}

080104a6 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80104a6:	b580      	push	{r7, lr}
 80104a8:	b082      	sub	sp, #8
 80104aa:	af00      	add	r7, sp, #0
 80104ac:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 80104ae:	46c0      	nop			@ (mov r8, r8)
 80104b0:	46bd      	mov	sp, r7
 80104b2:	b002      	add	sp, #8
 80104b4:	bd80      	pop	{r7, pc}

080104b6 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80104b6:	b580      	push	{r7, lr}
 80104b8:	b082      	sub	sp, #8
 80104ba:	af00      	add	r7, sp, #0
 80104bc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 80104be:	46c0      	nop			@ (mov r8, r8)
 80104c0:	46bd      	mov	sp, r7
 80104c2:	b002      	add	sp, #8
 80104c4:	bd80      	pop	{r7, pc}

080104c6 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80104c6:	b580      	push	{r7, lr}
 80104c8:	b082      	sub	sp, #8
 80104ca:	af00      	add	r7, sp, #0
 80104cc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 80104ce:	46c0      	nop			@ (mov r8, r8)
 80104d0:	46bd      	mov	sp, r7
 80104d2:	b002      	add	sp, #8
 80104d4:	bd80      	pop	{r7, pc}

080104d6 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80104d6:	b580      	push	{r7, lr}
 80104d8:	b082      	sub	sp, #8
 80104da:	af00      	add	r7, sp, #0
 80104dc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80104de:	46c0      	nop			@ (mov r8, r8)
 80104e0:	46bd      	mov	sp, r7
 80104e2:	b002      	add	sp, #8
 80104e4:	bd80      	pop	{r7, pc}

080104e6 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80104e6:	b580      	push	{r7, lr}
 80104e8:	b082      	sub	sp, #8
 80104ea:	af00      	add	r7, sp, #0
 80104ec:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80104ee:	46c0      	nop			@ (mov r8, r8)
 80104f0:	46bd      	mov	sp, r7
 80104f2:	b002      	add	sp, #8
 80104f4:	bd80      	pop	{r7, pc}
	...

080104f8 <I2C_Master_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 80104f8:	b590      	push	{r4, r7, lr}
 80104fa:	b089      	sub	sp, #36	@ 0x24
 80104fc:	af02      	add	r7, sp, #8
 80104fe:	60f8      	str	r0, [r7, #12]
 8010500:	60b9      	str	r1, [r7, #8]
 8010502:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t tmpITFlags = ITFlags;
 8010504:	68bb      	ldr	r3, [r7, #8]
 8010506:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8010508:	68fb      	ldr	r3, [r7, #12]
 801050a:	2240      	movs	r2, #64	@ 0x40
 801050c:	5c9b      	ldrb	r3, [r3, r2]
 801050e:	2b01      	cmp	r3, #1
 8010510:	d101      	bne.n	8010516 <I2C_Master_ISR_IT+0x1e>
 8010512:	2302      	movs	r3, #2
 8010514:	e113      	b.n	801073e <I2C_Master_ISR_IT+0x246>
 8010516:	68fb      	ldr	r3, [r7, #12]
 8010518:	2240      	movs	r2, #64	@ 0x40
 801051a:	2101      	movs	r1, #1
 801051c:	5499      	strb	r1, [r3, r2]

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 801051e:	697b      	ldr	r3, [r7, #20]
 8010520:	2210      	movs	r2, #16
 8010522:	4013      	ands	r3, r2
 8010524:	d012      	beq.n	801054c <I2C_Master_ISR_IT+0x54>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8010526:	687b      	ldr	r3, [r7, #4]
 8010528:	2210      	movs	r2, #16
 801052a:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 801052c:	d00e      	beq.n	801054c <I2C_Master_ISR_IT+0x54>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 801052e:	68fb      	ldr	r3, [r7, #12]
 8010530:	681b      	ldr	r3, [r3, #0]
 8010532:	2210      	movs	r2, #16
 8010534:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8010536:	68fb      	ldr	r3, [r7, #12]
 8010538:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801053a:	2204      	movs	r2, #4
 801053c:	431a      	orrs	r2, r3
 801053e:	68fb      	ldr	r3, [r7, #12]
 8010540:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8010542:	68fb      	ldr	r3, [r7, #12]
 8010544:	0018      	movs	r0, r3
 8010546:	f001 f9ba 	bl	80118be <I2C_Flush_TXDR>
 801054a:	e0e5      	b.n	8010718 <I2C_Master_ISR_IT+0x220>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 801054c:	697b      	ldr	r3, [r7, #20]
 801054e:	2204      	movs	r2, #4
 8010550:	4013      	ands	r3, r2
 8010552:	d021      	beq.n	8010598 <I2C_Master_ISR_IT+0xa0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8010554:	687b      	ldr	r3, [r7, #4]
 8010556:	2204      	movs	r2, #4
 8010558:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 801055a:	d01d      	beq.n	8010598 <I2C_Master_ISR_IT+0xa0>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 801055c:	697b      	ldr	r3, [r7, #20]
 801055e:	2204      	movs	r2, #4
 8010560:	4393      	bics	r3, r2
 8010562:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8010564:	68fb      	ldr	r3, [r7, #12]
 8010566:	681b      	ldr	r3, [r3, #0]
 8010568:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801056a:	68fb      	ldr	r3, [r7, #12]
 801056c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801056e:	b2d2      	uxtb	r2, r2
 8010570:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8010572:	68fb      	ldr	r3, [r7, #12]
 8010574:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010576:	1c5a      	adds	r2, r3, #1
 8010578:	68fb      	ldr	r3, [r7, #12]
 801057a:	625a      	str	r2, [r3, #36]	@ 0x24

    hi2c->XferSize--;
 801057c:	68fb      	ldr	r3, [r7, #12]
 801057e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8010580:	3b01      	subs	r3, #1
 8010582:	b29a      	uxth	r2, r3
 8010584:	68fb      	ldr	r3, [r7, #12]
 8010586:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferCount--;
 8010588:	68fb      	ldr	r3, [r7, #12]
 801058a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801058c:	b29b      	uxth	r3, r3
 801058e:	3b01      	subs	r3, #1
 8010590:	b29a      	uxth	r2, r3
 8010592:	68fb      	ldr	r3, [r7, #12]
 8010594:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8010596:	e0bf      	b.n	8010718 <I2C_Master_ISR_IT+0x220>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8010598:	697b      	ldr	r3, [r7, #20]
 801059a:	2202      	movs	r2, #2
 801059c:	4013      	ands	r3, r2
 801059e:	d01c      	beq.n	80105da <I2C_Master_ISR_IT+0xe2>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 80105a0:	687b      	ldr	r3, [r7, #4]
 80105a2:	2202      	movs	r2, #2
 80105a4:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80105a6:	d018      	beq.n	80105da <I2C_Master_ISR_IT+0xe2>
  {
    /* Write data to TXDR */
    hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80105a8:	68fb      	ldr	r3, [r7, #12]
 80105aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80105ac:	781a      	ldrb	r2, [r3, #0]
 80105ae:	68fb      	ldr	r3, [r7, #12]
 80105b0:	681b      	ldr	r3, [r3, #0]
 80105b2:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80105b4:	68fb      	ldr	r3, [r7, #12]
 80105b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80105b8:	1c5a      	adds	r2, r3, #1
 80105ba:	68fb      	ldr	r3, [r7, #12]
 80105bc:	625a      	str	r2, [r3, #36]	@ 0x24

    hi2c->XferSize--;
 80105be:	68fb      	ldr	r3, [r7, #12]
 80105c0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80105c2:	3b01      	subs	r3, #1
 80105c4:	b29a      	uxth	r2, r3
 80105c6:	68fb      	ldr	r3, [r7, #12]
 80105c8:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferCount--;
 80105ca:	68fb      	ldr	r3, [r7, #12]
 80105cc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80105ce:	b29b      	uxth	r3, r3
 80105d0:	3b01      	subs	r3, #1
 80105d2:	b29a      	uxth	r2, r3
 80105d4:	68fb      	ldr	r3, [r7, #12]
 80105d6:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80105d8:	e09e      	b.n	8010718 <I2C_Master_ISR_IT+0x220>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 80105da:	697b      	ldr	r3, [r7, #20]
 80105dc:	2280      	movs	r2, #128	@ 0x80
 80105de:	4013      	ands	r3, r2
 80105e0:	d100      	bne.n	80105e4 <I2C_Master_ISR_IT+0xec>
 80105e2:	e069      	b.n	80106b8 <I2C_Master_ISR_IT+0x1c0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80105e4:	687b      	ldr	r3, [r7, #4]
 80105e6:	2240      	movs	r2, #64	@ 0x40
 80105e8:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 80105ea:	d065      	beq.n	80106b8 <I2C_Master_ISR_IT+0x1c0>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80105ec:	68fb      	ldr	r3, [r7, #12]
 80105ee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80105f0:	b29b      	uxth	r3, r3
 80105f2:	2b00      	cmp	r3, #0
 80105f4:	d04a      	beq.n	801068c <I2C_Master_ISR_IT+0x194>
 80105f6:	68fb      	ldr	r3, [r7, #12]
 80105f8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80105fa:	2b00      	cmp	r3, #0
 80105fc:	d146      	bne.n	801068c <I2C_Master_ISR_IT+0x194>
    {
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 80105fe:	68fb      	ldr	r3, [r7, #12]
 8010600:	681b      	ldr	r3, [r3, #0]
 8010602:	685b      	ldr	r3, [r3, #4]
 8010604:	b29a      	uxth	r2, r3
 8010606:	2112      	movs	r1, #18
 8010608:	187b      	adds	r3, r7, r1
 801060a:	0592      	lsls	r2, r2, #22
 801060c:	0d92      	lsrs	r2, r2, #22
 801060e:	801a      	strh	r2, [r3, #0]

      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8010610:	68fb      	ldr	r3, [r7, #12]
 8010612:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8010614:	b29b      	uxth	r3, r3
 8010616:	2bff      	cmp	r3, #255	@ 0xff
 8010618:	d910      	bls.n	801063c <I2C_Master_ISR_IT+0x144>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 801061a:	68fb      	ldr	r3, [r7, #12]
 801061c:	22ff      	movs	r2, #255	@ 0xff
 801061e:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8010620:	68fb      	ldr	r3, [r7, #12]
 8010622:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8010624:	b2da      	uxtb	r2, r3
 8010626:	2380      	movs	r3, #128	@ 0x80
 8010628:	045c      	lsls	r4, r3, #17
 801062a:	187b      	adds	r3, r7, r1
 801062c:	8819      	ldrh	r1, [r3, #0]
 801062e:	68f8      	ldr	r0, [r7, #12]
 8010630:	2300      	movs	r3, #0
 8010632:	9300      	str	r3, [sp, #0]
 8010634:	0023      	movs	r3, r4
 8010636:	f001 fc8f 	bl	8011f58 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 801063a:	e03c      	b.n	80106b6 <I2C_Master_ISR_IT+0x1be>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 801063c:	68fb      	ldr	r3, [r7, #12]
 801063e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8010640:	b29a      	uxth	r2, r3
 8010642:	68fb      	ldr	r3, [r7, #12]
 8010644:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8010646:	68fb      	ldr	r3, [r7, #12]
 8010648:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801064a:	4a3f      	ldr	r2, [pc, #252]	@ (8010748 <I2C_Master_ISR_IT+0x250>)
 801064c:	4293      	cmp	r3, r2
 801064e:	d00e      	beq.n	801066e <I2C_Master_ISR_IT+0x176>
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8010650:	68fb      	ldr	r3, [r7, #12]
 8010652:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8010654:	b2da      	uxtb	r2, r3
                             hi2c->XferOptions, I2C_NO_STARTSTOP);
 8010656:	68fb      	ldr	r3, [r7, #12]
 8010658:	6adc      	ldr	r4, [r3, #44]	@ 0x2c
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 801065a:	2312      	movs	r3, #18
 801065c:	18fb      	adds	r3, r7, r3
 801065e:	8819      	ldrh	r1, [r3, #0]
 8010660:	68f8      	ldr	r0, [r7, #12]
 8010662:	2300      	movs	r3, #0
 8010664:	9300      	str	r3, [sp, #0]
 8010666:	0023      	movs	r3, r4
 8010668:	f001 fc76 	bl	8011f58 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 801066c:	e023      	b.n	80106b6 <I2C_Master_ISR_IT+0x1be>
        }
        else
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 801066e:	68fb      	ldr	r3, [r7, #12]
 8010670:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8010672:	b2da      	uxtb	r2, r3
 8010674:	2380      	movs	r3, #128	@ 0x80
 8010676:	049c      	lsls	r4, r3, #18
 8010678:	2312      	movs	r3, #18
 801067a:	18fb      	adds	r3, r7, r3
 801067c:	8819      	ldrh	r1, [r3, #0]
 801067e:	68f8      	ldr	r0, [r7, #12]
 8010680:	2300      	movs	r3, #0
 8010682:	9300      	str	r3, [sp, #0]
 8010684:	0023      	movs	r3, r4
 8010686:	f001 fc67 	bl	8011f58 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 801068a:	e014      	b.n	80106b6 <I2C_Master_ISR_IT+0x1be>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 801068c:	68fb      	ldr	r3, [r7, #12]
 801068e:	681b      	ldr	r3, [r3, #0]
 8010690:	685a      	ldr	r2, [r3, #4]
 8010692:	2380      	movs	r3, #128	@ 0x80
 8010694:	049b      	lsls	r3, r3, #18
 8010696:	401a      	ands	r2, r3
 8010698:	2380      	movs	r3, #128	@ 0x80
 801069a:	049b      	lsls	r3, r3, #18
 801069c:	429a      	cmp	r2, r3
 801069e:	d004      	beq.n	80106aa <I2C_Master_ISR_IT+0x1b2>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 80106a0:	68fb      	ldr	r3, [r7, #12]
 80106a2:	0018      	movs	r0, r3
 80106a4:	f000 fcf4 	bl	8011090 <I2C_ITMasterSeqCplt>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80106a8:	e036      	b.n	8010718 <I2C_Master_ISR_IT+0x220>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80106aa:	68fb      	ldr	r3, [r7, #12]
 80106ac:	2140      	movs	r1, #64	@ 0x40
 80106ae:	0018      	movs	r0, r3
 80106b0:	f000 ffda 	bl	8011668 <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80106b4:	e030      	b.n	8010718 <I2C_Master_ISR_IT+0x220>
 80106b6:	e02f      	b.n	8010718 <I2C_Master_ISR_IT+0x220>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 80106b8:	697b      	ldr	r3, [r7, #20]
 80106ba:	2240      	movs	r2, #64	@ 0x40
 80106bc:	4013      	ands	r3, r2
 80106be:	d02b      	beq.n	8010718 <I2C_Master_ISR_IT+0x220>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80106c0:	687b      	ldr	r3, [r7, #4]
 80106c2:	2240      	movs	r2, #64	@ 0x40
 80106c4:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 80106c6:	d027      	beq.n	8010718 <I2C_Master_ISR_IT+0x220>
  {
    if (hi2c->XferCount == 0U)
 80106c8:	68fb      	ldr	r3, [r7, #12]
 80106ca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80106cc:	b29b      	uxth	r3, r3
 80106ce:	2b00      	cmp	r3, #0
 80106d0:	d11d      	bne.n	801070e <I2C_Master_ISR_IT+0x216>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80106d2:	68fb      	ldr	r3, [r7, #12]
 80106d4:	681b      	ldr	r3, [r3, #0]
 80106d6:	685a      	ldr	r2, [r3, #4]
 80106d8:	2380      	movs	r3, #128	@ 0x80
 80106da:	049b      	lsls	r3, r3, #18
 80106dc:	401a      	ands	r2, r3
 80106de:	2380      	movs	r3, #128	@ 0x80
 80106e0:	049b      	lsls	r3, r3, #18
 80106e2:	429a      	cmp	r2, r3
 80106e4:	d018      	beq.n	8010718 <I2C_Master_ISR_IT+0x220>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 80106e6:	68fb      	ldr	r3, [r7, #12]
 80106e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80106ea:	4a17      	ldr	r2, [pc, #92]	@ (8010748 <I2C_Master_ISR_IT+0x250>)
 80106ec:	4293      	cmp	r3, r2
 80106ee:	d109      	bne.n	8010704 <I2C_Master_ISR_IT+0x20c>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80106f0:	68fb      	ldr	r3, [r7, #12]
 80106f2:	681b      	ldr	r3, [r3, #0]
 80106f4:	685a      	ldr	r2, [r3, #4]
 80106f6:	68fb      	ldr	r3, [r7, #12]
 80106f8:	681b      	ldr	r3, [r3, #0]
 80106fa:	2180      	movs	r1, #128	@ 0x80
 80106fc:	01c9      	lsls	r1, r1, #7
 80106fe:	430a      	orrs	r2, r1
 8010700:	605a      	str	r2, [r3, #4]
 8010702:	e009      	b.n	8010718 <I2C_Master_ISR_IT+0x220>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8010704:	68fb      	ldr	r3, [r7, #12]
 8010706:	0018      	movs	r0, r3
 8010708:	f000 fcc2 	bl	8011090 <I2C_ITMasterSeqCplt>
 801070c:	e004      	b.n	8010718 <I2C_Master_ISR_IT+0x220>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 801070e:	68fb      	ldr	r3, [r7, #12]
 8010710:	2140      	movs	r1, #64	@ 0x40
 8010712:	0018      	movs	r0, r3
 8010714:	f000 ffa8 	bl	8011668 <I2C_ITError>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8010718:	697b      	ldr	r3, [r7, #20]
 801071a:	2220      	movs	r2, #32
 801071c:	4013      	ands	r3, r2
 801071e:	d009      	beq.n	8010734 <I2C_Master_ISR_IT+0x23c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8010720:	687b      	ldr	r3, [r7, #4]
 8010722:	2220      	movs	r2, #32
 8010724:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8010726:	d005      	beq.n	8010734 <I2C_Master_ISR_IT+0x23c>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 8010728:	697a      	ldr	r2, [r7, #20]
 801072a:	68fb      	ldr	r3, [r7, #12]
 801072c:	0011      	movs	r1, r2
 801072e:	0018      	movs	r0, r3
 8010730:	f000 fd54 	bl	80111dc <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8010734:	68fb      	ldr	r3, [r7, #12]
 8010736:	2240      	movs	r2, #64	@ 0x40
 8010738:	2100      	movs	r1, #0
 801073a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 801073c:	2300      	movs	r3, #0
}
 801073e:	0018      	movs	r0, r3
 8010740:	46bd      	mov	sp, r7
 8010742:	b007      	add	sp, #28
 8010744:	bd90      	pop	{r4, r7, pc}
 8010746:	46c0      	nop			@ (mov r8, r8)
 8010748:	ffff0000 	.word	0xffff0000

0801074c <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 801074c:	b580      	push	{r7, lr}
 801074e:	b086      	sub	sp, #24
 8010750:	af00      	add	r7, sp, #0
 8010752:	60f8      	str	r0, [r7, #12]
 8010754:	60b9      	str	r1, [r7, #8]
 8010756:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8010758:	68fb      	ldr	r3, [r7, #12]
 801075a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801075c:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 801075e:	68bb      	ldr	r3, [r7, #8]
 8010760:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8010762:	68fb      	ldr	r3, [r7, #12]
 8010764:	2240      	movs	r2, #64	@ 0x40
 8010766:	5c9b      	ldrb	r3, [r3, r2]
 8010768:	2b01      	cmp	r3, #1
 801076a:	d101      	bne.n	8010770 <I2C_Slave_ISR_IT+0x24>
 801076c:	2302      	movs	r3, #2
 801076e:	e0e6      	b.n	801093e <I2C_Slave_ISR_IT+0x1f2>
 8010770:	68fb      	ldr	r3, [r7, #12]
 8010772:	2240      	movs	r2, #64	@ 0x40
 8010774:	2101      	movs	r1, #1
 8010776:	5499      	strb	r1, [r3, r2]

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8010778:	693b      	ldr	r3, [r7, #16]
 801077a:	2220      	movs	r2, #32
 801077c:	4013      	ands	r3, r2
 801077e:	d009      	beq.n	8010794 <I2C_Slave_ISR_IT+0x48>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8010780:	687b      	ldr	r3, [r7, #4]
 8010782:	2220      	movs	r2, #32
 8010784:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8010786:	d005      	beq.n	8010794 <I2C_Slave_ISR_IT+0x48>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8010788:	693a      	ldr	r2, [r7, #16]
 801078a:	68fb      	ldr	r3, [r7, #12]
 801078c:	0011      	movs	r1, r2
 801078e:	0018      	movs	r0, r3
 8010790:	f000 fdf2 	bl	8011378 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8010794:	693b      	ldr	r3, [r7, #16]
 8010796:	2210      	movs	r2, #16
 8010798:	4013      	ands	r3, r2
 801079a:	d052      	beq.n	8010842 <I2C_Slave_ISR_IT+0xf6>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 801079c:	687b      	ldr	r3, [r7, #4]
 801079e:	2210      	movs	r2, #16
 80107a0:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80107a2:	d04e      	beq.n	8010842 <I2C_Slave_ISR_IT+0xf6>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 80107a4:	68fb      	ldr	r3, [r7, #12]
 80107a6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80107a8:	b29b      	uxth	r3, r3
 80107aa:	2b00      	cmp	r3, #0
 80107ac:	d12d      	bne.n	801080a <I2C_Slave_ISR_IT+0xbe>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80107ae:	68fb      	ldr	r3, [r7, #12]
 80107b0:	2241      	movs	r2, #65	@ 0x41
 80107b2:	5c9b      	ldrb	r3, [r3, r2]
 80107b4:	b2db      	uxtb	r3, r3
 80107b6:	2b28      	cmp	r3, #40	@ 0x28
 80107b8:	d10b      	bne.n	80107d2 <I2C_Slave_ISR_IT+0x86>
 80107ba:	697a      	ldr	r2, [r7, #20]
 80107bc:	2380      	movs	r3, #128	@ 0x80
 80107be:	049b      	lsls	r3, r3, #18
 80107c0:	429a      	cmp	r2, r3
 80107c2:	d106      	bne.n	80107d2 <I2C_Slave_ISR_IT+0x86>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 80107c4:	693a      	ldr	r2, [r7, #16]
 80107c6:	68fb      	ldr	r3, [r7, #12]
 80107c8:	0011      	movs	r1, r2
 80107ca:	0018      	movs	r0, r3
 80107cc:	f000 fef4 	bl	80115b8 <I2C_ITListenCplt>
 80107d0:	e036      	b.n	8010840 <I2C_Slave_ISR_IT+0xf4>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80107d2:	68fb      	ldr	r3, [r7, #12]
 80107d4:	2241      	movs	r2, #65	@ 0x41
 80107d6:	5c9b      	ldrb	r3, [r3, r2]
 80107d8:	b2db      	uxtb	r3, r3
 80107da:	2b29      	cmp	r3, #41	@ 0x29
 80107dc:	d110      	bne.n	8010800 <I2C_Slave_ISR_IT+0xb4>
 80107de:	697b      	ldr	r3, [r7, #20]
 80107e0:	4a59      	ldr	r2, [pc, #356]	@ (8010948 <I2C_Slave_ISR_IT+0x1fc>)
 80107e2:	4293      	cmp	r3, r2
 80107e4:	d00c      	beq.n	8010800 <I2C_Slave_ISR_IT+0xb4>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80107e6:	68fb      	ldr	r3, [r7, #12]
 80107e8:	681b      	ldr	r3, [r3, #0]
 80107ea:	2210      	movs	r2, #16
 80107ec:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 80107ee:	68fb      	ldr	r3, [r7, #12]
 80107f0:	0018      	movs	r0, r3
 80107f2:	f001 f864 	bl	80118be <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80107f6:	68fb      	ldr	r3, [r7, #12]
 80107f8:	0018      	movs	r0, r3
 80107fa:	f000 fc8b 	bl	8011114 <I2C_ITSlaveSeqCplt>
 80107fe:	e01f      	b.n	8010840 <I2C_Slave_ISR_IT+0xf4>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8010800:	68fb      	ldr	r3, [r7, #12]
 8010802:	681b      	ldr	r3, [r3, #0]
 8010804:	2210      	movs	r2, #16
 8010806:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8010808:	e091      	b.n	801092e <I2C_Slave_ISR_IT+0x1e2>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 801080a:	68fb      	ldr	r3, [r7, #12]
 801080c:	681b      	ldr	r3, [r3, #0]
 801080e:	2210      	movs	r2, #16
 8010810:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8010812:	68fb      	ldr	r3, [r7, #12]
 8010814:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010816:	2204      	movs	r2, #4
 8010818:	431a      	orrs	r2, r3
 801081a:	68fb      	ldr	r3, [r7, #12]
 801081c:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 801081e:	697b      	ldr	r3, [r7, #20]
 8010820:	2b00      	cmp	r3, #0
 8010822:	d005      	beq.n	8010830 <I2C_Slave_ISR_IT+0xe4>
 8010824:	697a      	ldr	r2, [r7, #20]
 8010826:	2380      	movs	r3, #128	@ 0x80
 8010828:	045b      	lsls	r3, r3, #17
 801082a:	429a      	cmp	r2, r3
 801082c:	d000      	beq.n	8010830 <I2C_Slave_ISR_IT+0xe4>
 801082e:	e07e      	b.n	801092e <I2C_Slave_ISR_IT+0x1e2>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8010830:	68fb      	ldr	r3, [r7, #12]
 8010832:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8010834:	68fb      	ldr	r3, [r7, #12]
 8010836:	0011      	movs	r1, r2
 8010838:	0018      	movs	r0, r3
 801083a:	f000 ff15 	bl	8011668 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 801083e:	e076      	b.n	801092e <I2C_Slave_ISR_IT+0x1e2>
 8010840:	e075      	b.n	801092e <I2C_Slave_ISR_IT+0x1e2>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8010842:	693b      	ldr	r3, [r7, #16]
 8010844:	2204      	movs	r2, #4
 8010846:	4013      	ands	r3, r2
 8010848:	d02f      	beq.n	80108aa <I2C_Slave_ISR_IT+0x15e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 801084a:	687b      	ldr	r3, [r7, #4]
 801084c:	2204      	movs	r2, #4
 801084e:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8010850:	d02b      	beq.n	80108aa <I2C_Slave_ISR_IT+0x15e>
  {
    if (hi2c->XferCount > 0U)
 8010852:	68fb      	ldr	r3, [r7, #12]
 8010854:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8010856:	b29b      	uxth	r3, r3
 8010858:	2b00      	cmp	r3, #0
 801085a:	d018      	beq.n	801088e <I2C_Slave_ISR_IT+0x142>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 801085c:	68fb      	ldr	r3, [r7, #12]
 801085e:	681b      	ldr	r3, [r3, #0]
 8010860:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8010862:	68fb      	ldr	r3, [r7, #12]
 8010864:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010866:	b2d2      	uxtb	r2, r2
 8010868:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 801086a:	68fb      	ldr	r3, [r7, #12]
 801086c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801086e:	1c5a      	adds	r2, r3, #1
 8010870:	68fb      	ldr	r3, [r7, #12]
 8010872:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8010874:	68fb      	ldr	r3, [r7, #12]
 8010876:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8010878:	3b01      	subs	r3, #1
 801087a:	b29a      	uxth	r2, r3
 801087c:	68fb      	ldr	r3, [r7, #12]
 801087e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8010880:	68fb      	ldr	r3, [r7, #12]
 8010882:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8010884:	b29b      	uxth	r3, r3
 8010886:	3b01      	subs	r3, #1
 8010888:	b29a      	uxth	r2, r3
 801088a:	68fb      	ldr	r3, [r7, #12]
 801088c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 801088e:	68fb      	ldr	r3, [r7, #12]
 8010890:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8010892:	b29b      	uxth	r3, r3
 8010894:	2b00      	cmp	r3, #0
 8010896:	d14c      	bne.n	8010932 <I2C_Slave_ISR_IT+0x1e6>
 8010898:	697b      	ldr	r3, [r7, #20]
 801089a:	4a2b      	ldr	r2, [pc, #172]	@ (8010948 <I2C_Slave_ISR_IT+0x1fc>)
 801089c:	4293      	cmp	r3, r2
 801089e:	d048      	beq.n	8010932 <I2C_Slave_ISR_IT+0x1e6>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 80108a0:	68fb      	ldr	r3, [r7, #12]
 80108a2:	0018      	movs	r0, r3
 80108a4:	f000 fc36 	bl	8011114 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 80108a8:	e043      	b.n	8010932 <I2C_Slave_ISR_IT+0x1e6>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80108aa:	693b      	ldr	r3, [r7, #16]
 80108ac:	2208      	movs	r2, #8
 80108ae:	4013      	ands	r3, r2
 80108b0:	d00a      	beq.n	80108c8 <I2C_Slave_ISR_IT+0x17c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 80108b2:	687b      	ldr	r3, [r7, #4]
 80108b4:	2208      	movs	r2, #8
 80108b6:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80108b8:	d006      	beq.n	80108c8 <I2C_Slave_ISR_IT+0x17c>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 80108ba:	693a      	ldr	r2, [r7, #16]
 80108bc:	68fb      	ldr	r3, [r7, #12]
 80108be:	0011      	movs	r1, r2
 80108c0:	0018      	movs	r0, r3
 80108c2:	f000 fb41 	bl	8010f48 <I2C_ITAddrCplt>
 80108c6:	e035      	b.n	8010934 <I2C_Slave_ISR_IT+0x1e8>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80108c8:	693b      	ldr	r3, [r7, #16]
 80108ca:	2202      	movs	r2, #2
 80108cc:	4013      	ands	r3, r2
 80108ce:	d031      	beq.n	8010934 <I2C_Slave_ISR_IT+0x1e8>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 80108d0:	687b      	ldr	r3, [r7, #4]
 80108d2:	2202      	movs	r2, #2
 80108d4:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80108d6:	d02d      	beq.n	8010934 <I2C_Slave_ISR_IT+0x1e8>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 80108d8:	68fb      	ldr	r3, [r7, #12]
 80108da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80108dc:	b29b      	uxth	r3, r3
 80108de:	2b00      	cmp	r3, #0
 80108e0:	d018      	beq.n	8010914 <I2C_Slave_ISR_IT+0x1c8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80108e2:	68fb      	ldr	r3, [r7, #12]
 80108e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80108e6:	781a      	ldrb	r2, [r3, #0]
 80108e8:	68fb      	ldr	r3, [r7, #12]
 80108ea:	681b      	ldr	r3, [r3, #0]
 80108ec:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80108ee:	68fb      	ldr	r3, [r7, #12]
 80108f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80108f2:	1c5a      	adds	r2, r3, #1
 80108f4:	68fb      	ldr	r3, [r7, #12]
 80108f6:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80108f8:	68fb      	ldr	r3, [r7, #12]
 80108fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80108fc:	b29b      	uxth	r3, r3
 80108fe:	3b01      	subs	r3, #1
 8010900:	b29a      	uxth	r2, r3
 8010902:	68fb      	ldr	r3, [r7, #12]
 8010904:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8010906:	68fb      	ldr	r3, [r7, #12]
 8010908:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801090a:	3b01      	subs	r3, #1
 801090c:	b29a      	uxth	r2, r3
 801090e:	68fb      	ldr	r3, [r7, #12]
 8010910:	851a      	strh	r2, [r3, #40]	@ 0x28
 8010912:	e00f      	b.n	8010934 <I2C_Slave_ISR_IT+0x1e8>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8010914:	697a      	ldr	r2, [r7, #20]
 8010916:	2380      	movs	r3, #128	@ 0x80
 8010918:	045b      	lsls	r3, r3, #17
 801091a:	429a      	cmp	r2, r3
 801091c:	d002      	beq.n	8010924 <I2C_Slave_ISR_IT+0x1d8>
 801091e:	697b      	ldr	r3, [r7, #20]
 8010920:	2b00      	cmp	r3, #0
 8010922:	d107      	bne.n	8010934 <I2C_Slave_ISR_IT+0x1e8>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8010924:	68fb      	ldr	r3, [r7, #12]
 8010926:	0018      	movs	r0, r3
 8010928:	f000 fbf4 	bl	8011114 <I2C_ITSlaveSeqCplt>
 801092c:	e002      	b.n	8010934 <I2C_Slave_ISR_IT+0x1e8>
    if (hi2c->XferCount == 0U)
 801092e:	46c0      	nop			@ (mov r8, r8)
 8010930:	e000      	b.n	8010934 <I2C_Slave_ISR_IT+0x1e8>
    if ((hi2c->XferCount == 0U) && \
 8010932:	46c0      	nop			@ (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8010934:	68fb      	ldr	r3, [r7, #12]
 8010936:	2240      	movs	r2, #64	@ 0x40
 8010938:	2100      	movs	r1, #0
 801093a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 801093c:	2300      	movs	r3, #0
}
 801093e:	0018      	movs	r0, r3
 8010940:	46bd      	mov	sp, r7
 8010942:	b006      	add	sp, #24
 8010944:	bd80      	pop	{r7, pc}
 8010946:	46c0      	nop			@ (mov r8, r8)
 8010948:	ffff0000 	.word	0xffff0000

0801094c <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 801094c:	b590      	push	{r4, r7, lr}
 801094e:	b089      	sub	sp, #36	@ 0x24
 8010950:	af02      	add	r7, sp, #8
 8010952:	60f8      	str	r0, [r7, #12]
 8010954:	60b9      	str	r1, [r7, #8]
 8010956:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8010958:	68fb      	ldr	r3, [r7, #12]
 801095a:	2240      	movs	r2, #64	@ 0x40
 801095c:	5c9b      	ldrb	r3, [r3, r2]
 801095e:	2b01      	cmp	r3, #1
 8010960:	d101      	bne.n	8010966 <I2C_Master_ISR_DMA+0x1a>
 8010962:	2302      	movs	r3, #2
 8010964:	e0e7      	b.n	8010b36 <I2C_Master_ISR_DMA+0x1ea>
 8010966:	68fb      	ldr	r3, [r7, #12]
 8010968:	2240      	movs	r2, #64	@ 0x40
 801096a:	2101      	movs	r1, #1
 801096c:	5499      	strb	r1, [r3, r2]

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 801096e:	68bb      	ldr	r3, [r7, #8]
 8010970:	2210      	movs	r2, #16
 8010972:	4013      	ands	r3, r2
 8010974:	d017      	beq.n	80109a6 <I2C_Master_ISR_DMA+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8010976:	687b      	ldr	r3, [r7, #4]
 8010978:	2210      	movs	r2, #16
 801097a:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 801097c:	d013      	beq.n	80109a6 <I2C_Master_ISR_DMA+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 801097e:	68fb      	ldr	r3, [r7, #12]
 8010980:	681b      	ldr	r3, [r3, #0]
 8010982:	2210      	movs	r2, #16
 8010984:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8010986:	68fb      	ldr	r3, [r7, #12]
 8010988:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801098a:	2204      	movs	r2, #4
 801098c:	431a      	orrs	r2, r3
 801098e:	68fb      	ldr	r3, [r7, #12]
 8010990:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8010992:	68fb      	ldr	r3, [r7, #12]
 8010994:	2120      	movs	r1, #32
 8010996:	0018      	movs	r0, r3
 8010998:	f001 fb18 	bl	8011fcc <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 801099c:	68fb      	ldr	r3, [r7, #12]
 801099e:	0018      	movs	r0, r3
 80109a0:	f000 ff8d 	bl	80118be <I2C_Flush_TXDR>
 80109a4:	e0c2      	b.n	8010b2c <I2C_Master_ISR_DMA+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 80109a6:	68bb      	ldr	r3, [r7, #8]
 80109a8:	2280      	movs	r2, #128	@ 0x80
 80109aa:	4013      	ands	r3, r2
 80109ac:	d100      	bne.n	80109b0 <I2C_Master_ISR_DMA+0x64>
 80109ae:	e07c      	b.n	8010aaa <I2C_Master_ISR_DMA+0x15e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80109b0:	687b      	ldr	r3, [r7, #4]
 80109b2:	2240      	movs	r2, #64	@ 0x40
 80109b4:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 80109b6:	d100      	bne.n	80109ba <I2C_Master_ISR_DMA+0x6e>
 80109b8:	e077      	b.n	8010aaa <I2C_Master_ISR_DMA+0x15e>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 80109ba:	68fb      	ldr	r3, [r7, #12]
 80109bc:	681b      	ldr	r3, [r3, #0]
 80109be:	681a      	ldr	r2, [r3, #0]
 80109c0:	68fb      	ldr	r3, [r7, #12]
 80109c2:	681b      	ldr	r3, [r3, #0]
 80109c4:	2140      	movs	r1, #64	@ 0x40
 80109c6:	438a      	bics	r2, r1
 80109c8:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 80109ca:	68fb      	ldr	r3, [r7, #12]
 80109cc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80109ce:	b29b      	uxth	r3, r3
 80109d0:	2b00      	cmp	r3, #0
 80109d2:	d055      	beq.n	8010a80 <I2C_Master_ISR_DMA+0x134>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 80109d4:	68fb      	ldr	r3, [r7, #12]
 80109d6:	681b      	ldr	r3, [r3, #0]
 80109d8:	685b      	ldr	r3, [r3, #4]
 80109da:	b29a      	uxth	r2, r3
 80109dc:	2312      	movs	r3, #18
 80109de:	18fb      	adds	r3, r7, r3
 80109e0:	0592      	lsls	r2, r2, #22
 80109e2:	0d92      	lsrs	r2, r2, #22
 80109e4:	801a      	strh	r2, [r3, #0]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80109e6:	68fb      	ldr	r3, [r7, #12]
 80109e8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80109ea:	b29b      	uxth	r3, r3
 80109ec:	2bff      	cmp	r3, #255	@ 0xff
 80109ee:	d906      	bls.n	80109fe <I2C_Master_ISR_DMA+0xb2>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 80109f0:	68fb      	ldr	r3, [r7, #12]
 80109f2:	22ff      	movs	r2, #255	@ 0xff
 80109f4:	851a      	strh	r2, [r3, #40]	@ 0x28
        xfermode = I2C_RELOAD_MODE;
 80109f6:	2380      	movs	r3, #128	@ 0x80
 80109f8:	045b      	lsls	r3, r3, #17
 80109fa:	617b      	str	r3, [r7, #20]
 80109fc:	e010      	b.n	8010a20 <I2C_Master_ISR_DMA+0xd4>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 80109fe:	68fb      	ldr	r3, [r7, #12]
 8010a00:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8010a02:	b29a      	uxth	r2, r3
 8010a04:	68fb      	ldr	r3, [r7, #12]
 8010a06:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8010a08:	68fb      	ldr	r3, [r7, #12]
 8010a0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010a0c:	4a4c      	ldr	r2, [pc, #304]	@ (8010b40 <I2C_Master_ISR_DMA+0x1f4>)
 8010a0e:	4293      	cmp	r3, r2
 8010a10:	d003      	beq.n	8010a1a <I2C_Master_ISR_DMA+0xce>
        {
          xfermode = hi2c->XferOptions;
 8010a12:	68fb      	ldr	r3, [r7, #12]
 8010a14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010a16:	617b      	str	r3, [r7, #20]
 8010a18:	e002      	b.n	8010a20 <I2C_Master_ISR_DMA+0xd4>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 8010a1a:	2380      	movs	r3, #128	@ 0x80
 8010a1c:	049b      	lsls	r3, r3, #18
 8010a1e:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 8010a20:	68fb      	ldr	r3, [r7, #12]
 8010a22:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8010a24:	b2da      	uxtb	r2, r3
 8010a26:	697c      	ldr	r4, [r7, #20]
 8010a28:	2312      	movs	r3, #18
 8010a2a:	18fb      	adds	r3, r7, r3
 8010a2c:	8819      	ldrh	r1, [r3, #0]
 8010a2e:	68f8      	ldr	r0, [r7, #12]
 8010a30:	2300      	movs	r3, #0
 8010a32:	9300      	str	r3, [sp, #0]
 8010a34:	0023      	movs	r3, r4
 8010a36:	f001 fa8f 	bl	8011f58 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8010a3a:	68fb      	ldr	r3, [r7, #12]
 8010a3c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8010a3e:	b29a      	uxth	r2, r3
 8010a40:	68fb      	ldr	r3, [r7, #12]
 8010a42:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8010a44:	1ad3      	subs	r3, r2, r3
 8010a46:	b29a      	uxth	r2, r3
 8010a48:	68fb      	ldr	r3, [r7, #12]
 8010a4a:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8010a4c:	68fb      	ldr	r3, [r7, #12]
 8010a4e:	2241      	movs	r2, #65	@ 0x41
 8010a50:	5c9b      	ldrb	r3, [r3, r2]
 8010a52:	b2db      	uxtb	r3, r3
 8010a54:	2b22      	cmp	r3, #34	@ 0x22
 8010a56:	d109      	bne.n	8010a6c <I2C_Master_ISR_DMA+0x120>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8010a58:	68fb      	ldr	r3, [r7, #12]
 8010a5a:	681b      	ldr	r3, [r3, #0]
 8010a5c:	681a      	ldr	r2, [r3, #0]
 8010a5e:	68fb      	ldr	r3, [r7, #12]
 8010a60:	681b      	ldr	r3, [r3, #0]
 8010a62:	2180      	movs	r1, #128	@ 0x80
 8010a64:	0209      	lsls	r1, r1, #8
 8010a66:	430a      	orrs	r2, r1
 8010a68:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8010a6a:	e05f      	b.n	8010b2c <I2C_Master_ISR_DMA+0x1e0>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8010a6c:	68fb      	ldr	r3, [r7, #12]
 8010a6e:	681b      	ldr	r3, [r3, #0]
 8010a70:	681a      	ldr	r2, [r3, #0]
 8010a72:	68fb      	ldr	r3, [r7, #12]
 8010a74:	681b      	ldr	r3, [r3, #0]
 8010a76:	2180      	movs	r1, #128	@ 0x80
 8010a78:	01c9      	lsls	r1, r1, #7
 8010a7a:	430a      	orrs	r2, r1
 8010a7c:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8010a7e:	e055      	b.n	8010b2c <I2C_Master_ISR_DMA+0x1e0>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8010a80:	68fb      	ldr	r3, [r7, #12]
 8010a82:	681b      	ldr	r3, [r3, #0]
 8010a84:	685a      	ldr	r2, [r3, #4]
 8010a86:	2380      	movs	r3, #128	@ 0x80
 8010a88:	049b      	lsls	r3, r3, #18
 8010a8a:	401a      	ands	r2, r3
 8010a8c:	2380      	movs	r3, #128	@ 0x80
 8010a8e:	049b      	lsls	r3, r3, #18
 8010a90:	429a      	cmp	r2, r3
 8010a92:	d004      	beq.n	8010a9e <I2C_Master_ISR_DMA+0x152>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8010a94:	68fb      	ldr	r3, [r7, #12]
 8010a96:	0018      	movs	r0, r3
 8010a98:	f000 fafa 	bl	8011090 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 8010a9c:	e046      	b.n	8010b2c <I2C_Master_ISR_DMA+0x1e0>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8010a9e:	68fb      	ldr	r3, [r7, #12]
 8010aa0:	2140      	movs	r1, #64	@ 0x40
 8010aa2:	0018      	movs	r0, r3
 8010aa4:	f000 fde0 	bl	8011668 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8010aa8:	e040      	b.n	8010b2c <I2C_Master_ISR_DMA+0x1e0>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8010aaa:	68bb      	ldr	r3, [r7, #8]
 8010aac:	2240      	movs	r2, #64	@ 0x40
 8010aae:	4013      	ands	r3, r2
 8010ab0:	d02c      	beq.n	8010b0c <I2C_Master_ISR_DMA+0x1c0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8010ab2:	687b      	ldr	r3, [r7, #4]
 8010ab4:	2240      	movs	r2, #64	@ 0x40
 8010ab6:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8010ab8:	d028      	beq.n	8010b0c <I2C_Master_ISR_DMA+0x1c0>
  {
    if (hi2c->XferCount == 0U)
 8010aba:	68fb      	ldr	r3, [r7, #12]
 8010abc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8010abe:	b29b      	uxth	r3, r3
 8010ac0:	2b00      	cmp	r3, #0
 8010ac2:	d11d      	bne.n	8010b00 <I2C_Master_ISR_DMA+0x1b4>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8010ac4:	68fb      	ldr	r3, [r7, #12]
 8010ac6:	681b      	ldr	r3, [r3, #0]
 8010ac8:	685a      	ldr	r2, [r3, #4]
 8010aca:	2380      	movs	r3, #128	@ 0x80
 8010acc:	049b      	lsls	r3, r3, #18
 8010ace:	401a      	ands	r2, r3
 8010ad0:	2380      	movs	r3, #128	@ 0x80
 8010ad2:	049b      	lsls	r3, r3, #18
 8010ad4:	429a      	cmp	r2, r3
 8010ad6:	d028      	beq.n	8010b2a <I2C_Master_ISR_DMA+0x1de>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8010ad8:	68fb      	ldr	r3, [r7, #12]
 8010ada:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010adc:	4a18      	ldr	r2, [pc, #96]	@ (8010b40 <I2C_Master_ISR_DMA+0x1f4>)
 8010ade:	4293      	cmp	r3, r2
 8010ae0:	d109      	bne.n	8010af6 <I2C_Master_ISR_DMA+0x1aa>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8010ae2:	68fb      	ldr	r3, [r7, #12]
 8010ae4:	681b      	ldr	r3, [r3, #0]
 8010ae6:	685a      	ldr	r2, [r3, #4]
 8010ae8:	68fb      	ldr	r3, [r7, #12]
 8010aea:	681b      	ldr	r3, [r3, #0]
 8010aec:	2180      	movs	r1, #128	@ 0x80
 8010aee:	01c9      	lsls	r1, r1, #7
 8010af0:	430a      	orrs	r2, r1
 8010af2:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 8010af4:	e019      	b.n	8010b2a <I2C_Master_ISR_DMA+0x1de>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8010af6:	68fb      	ldr	r3, [r7, #12]
 8010af8:	0018      	movs	r0, r3
 8010afa:	f000 fac9 	bl	8011090 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 8010afe:	e014      	b.n	8010b2a <I2C_Master_ISR_DMA+0x1de>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8010b00:	68fb      	ldr	r3, [r7, #12]
 8010b02:	2140      	movs	r1, #64	@ 0x40
 8010b04:	0018      	movs	r0, r3
 8010b06:	f000 fdaf 	bl	8011668 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8010b0a:	e00e      	b.n	8010b2a <I2C_Master_ISR_DMA+0x1de>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8010b0c:	68bb      	ldr	r3, [r7, #8]
 8010b0e:	2220      	movs	r2, #32
 8010b10:	4013      	ands	r3, r2
 8010b12:	d00b      	beq.n	8010b2c <I2C_Master_ISR_DMA+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8010b14:	687b      	ldr	r3, [r7, #4]
 8010b16:	2220      	movs	r2, #32
 8010b18:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8010b1a:	d007      	beq.n	8010b2c <I2C_Master_ISR_DMA+0x1e0>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8010b1c:	68ba      	ldr	r2, [r7, #8]
 8010b1e:	68fb      	ldr	r3, [r7, #12]
 8010b20:	0011      	movs	r1, r2
 8010b22:	0018      	movs	r0, r3
 8010b24:	f000 fb5a 	bl	80111dc <I2C_ITMasterCplt>
 8010b28:	e000      	b.n	8010b2c <I2C_Master_ISR_DMA+0x1e0>
    if (hi2c->XferCount == 0U)
 8010b2a:	46c0      	nop			@ (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8010b2c:	68fb      	ldr	r3, [r7, #12]
 8010b2e:	2240      	movs	r2, #64	@ 0x40
 8010b30:	2100      	movs	r1, #0
 8010b32:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8010b34:	2300      	movs	r3, #0
}
 8010b36:	0018      	movs	r0, r3
 8010b38:	46bd      	mov	sp, r7
 8010b3a:	b007      	add	sp, #28
 8010b3c:	bd90      	pop	{r4, r7, pc}
 8010b3e:	46c0      	nop			@ (mov r8, r8)
 8010b40:	ffff0000 	.word	0xffff0000

08010b44 <I2C_Mem_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                         uint32_t ITSources)
{
 8010b44:	b590      	push	{r4, r7, lr}
 8010b46:	b089      	sub	sp, #36	@ 0x24
 8010b48:	af02      	add	r7, sp, #8
 8010b4a:	60f8      	str	r0, [r7, #12]
 8010b4c:	60b9      	str	r1, [r7, #8]
 8010b4e:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 8010b50:	4b88      	ldr	r3, [pc, #544]	@ (8010d74 <I2C_Mem_ISR_DMA+0x230>)
 8010b52:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8010b54:	68fb      	ldr	r3, [r7, #12]
 8010b56:	2240      	movs	r2, #64	@ 0x40
 8010b58:	5c9b      	ldrb	r3, [r3, r2]
 8010b5a:	2b01      	cmp	r3, #1
 8010b5c:	d101      	bne.n	8010b62 <I2C_Mem_ISR_DMA+0x1e>
 8010b5e:	2302      	movs	r3, #2
 8010b60:	e104      	b.n	8010d6c <I2C_Mem_ISR_DMA+0x228>
 8010b62:	68fb      	ldr	r3, [r7, #12]
 8010b64:	2240      	movs	r2, #64	@ 0x40
 8010b66:	2101      	movs	r1, #1
 8010b68:	5499      	strb	r1, [r3, r2]

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8010b6a:	68bb      	ldr	r3, [r7, #8]
 8010b6c:	2210      	movs	r2, #16
 8010b6e:	4013      	ands	r3, r2
 8010b70:	d017      	beq.n	8010ba2 <I2C_Mem_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8010b72:	687b      	ldr	r3, [r7, #4]
 8010b74:	2210      	movs	r2, #16
 8010b76:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8010b78:	d013      	beq.n	8010ba2 <I2C_Mem_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8010b7a:	68fb      	ldr	r3, [r7, #12]
 8010b7c:	681b      	ldr	r3, [r3, #0]
 8010b7e:	2210      	movs	r2, #16
 8010b80:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8010b82:	68fb      	ldr	r3, [r7, #12]
 8010b84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010b86:	2204      	movs	r2, #4
 8010b88:	431a      	orrs	r2, r3
 8010b8a:	68fb      	ldr	r3, [r7, #12]
 8010b8c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8010b8e:	68fb      	ldr	r3, [r7, #12]
 8010b90:	2120      	movs	r1, #32
 8010b92:	0018      	movs	r0, r3
 8010b94:	f001 fa1a 	bl	8011fcc <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8010b98:	68fb      	ldr	r3, [r7, #12]
 8010b9a:	0018      	movs	r0, r3
 8010b9c:	f000 fe8f 	bl	80118be <I2C_Flush_TXDR>
 8010ba0:	e0df      	b.n	8010d62 <I2C_Mem_ISR_DMA+0x21e>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 8010ba2:	68bb      	ldr	r3, [r7, #8]
 8010ba4:	2202      	movs	r2, #2
 8010ba6:	4013      	ands	r3, r2
 8010ba8:	d00d      	beq.n	8010bc6 <I2C_Mem_ISR_DMA+0x82>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8010baa:	687b      	ldr	r3, [r7, #4]
 8010bac:	2202      	movs	r2, #2
 8010bae:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 8010bb0:	d009      	beq.n	8010bc6 <I2C_Mem_ISR_DMA+0x82>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
 8010bb2:	68fb      	ldr	r3, [r7, #12]
 8010bb4:	681b      	ldr	r3, [r3, #0]
 8010bb6:	68fa      	ldr	r2, [r7, #12]
 8010bb8:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8010bba:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
 8010bbc:	68fb      	ldr	r3, [r7, #12]
 8010bbe:	2201      	movs	r2, #1
 8010bc0:	4252      	negs	r2, r2
 8010bc2:	651a      	str	r2, [r3, #80]	@ 0x50
 8010bc4:	e0cd      	b.n	8010d62 <I2C_Mem_ISR_DMA+0x21e>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8010bc6:	68bb      	ldr	r3, [r7, #8]
 8010bc8:	2280      	movs	r2, #128	@ 0x80
 8010bca:	4013      	ands	r3, r2
 8010bcc:	d05e      	beq.n	8010c8c <I2C_Mem_ISR_DMA+0x148>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8010bce:	687b      	ldr	r3, [r7, #4]
 8010bd0:	2240      	movs	r2, #64	@ 0x40
 8010bd2:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8010bd4:	d05a      	beq.n	8010c8c <I2C_Mem_ISR_DMA+0x148>
  {
    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8010bd6:	68fb      	ldr	r3, [r7, #12]
 8010bd8:	2110      	movs	r1, #16
 8010bda:	0018      	movs	r0, r3
 8010bdc:	f001 f9f6 	bl	8011fcc <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
 8010be0:	68fb      	ldr	r3, [r7, #12]
 8010be2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8010be4:	b29b      	uxth	r3, r3
 8010be6:	2b00      	cmp	r3, #0
 8010be8:	d04a      	beq.n	8010c80 <I2C_Mem_ISR_DMA+0x13c>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8010bea:	68fb      	ldr	r3, [r7, #12]
 8010bec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8010bee:	b29b      	uxth	r3, r3
 8010bf0:	2bff      	cmp	r3, #255	@ 0xff
 8010bf2:	d910      	bls.n	8010c16 <I2C_Mem_ISR_DMA+0xd2>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8010bf4:	68fb      	ldr	r3, [r7, #12]
 8010bf6:	22ff      	movs	r2, #255	@ 0xff
 8010bf8:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8010bfa:	68fb      	ldr	r3, [r7, #12]
 8010bfc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8010bfe:	b299      	uxth	r1, r3
 8010c00:	68fb      	ldr	r3, [r7, #12]
 8010c02:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8010c04:	b2da      	uxtb	r2, r3
 8010c06:	2380      	movs	r3, #128	@ 0x80
 8010c08:	045b      	lsls	r3, r3, #17
 8010c0a:	68f8      	ldr	r0, [r7, #12]
 8010c0c:	2400      	movs	r4, #0
 8010c0e:	9400      	str	r4, [sp, #0]
 8010c10:	f001 f9a2 	bl	8011f58 <I2C_TransferConfig>
 8010c14:	e011      	b.n	8010c3a <I2C_Mem_ISR_DMA+0xf6>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8010c16:	68fb      	ldr	r3, [r7, #12]
 8010c18:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8010c1a:	b29a      	uxth	r2, r3
 8010c1c:	68fb      	ldr	r3, [r7, #12]
 8010c1e:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8010c20:	68fb      	ldr	r3, [r7, #12]
 8010c22:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8010c24:	b299      	uxth	r1, r3
 8010c26:	68fb      	ldr	r3, [r7, #12]
 8010c28:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8010c2a:	b2da      	uxtb	r2, r3
 8010c2c:	2380      	movs	r3, #128	@ 0x80
 8010c2e:	049b      	lsls	r3, r3, #18
 8010c30:	68f8      	ldr	r0, [r7, #12]
 8010c32:	2400      	movs	r4, #0
 8010c34:	9400      	str	r4, [sp, #0]
 8010c36:	f001 f98f 	bl	8011f58 <I2C_TransferConfig>
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8010c3a:	68fb      	ldr	r3, [r7, #12]
 8010c3c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8010c3e:	b29a      	uxth	r2, r3
 8010c40:	68fb      	ldr	r3, [r7, #12]
 8010c42:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8010c44:	1ad3      	subs	r3, r2, r3
 8010c46:	b29a      	uxth	r2, r3
 8010c48:	68fb      	ldr	r3, [r7, #12]
 8010c4a:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8010c4c:	68fb      	ldr	r3, [r7, #12]
 8010c4e:	2241      	movs	r2, #65	@ 0x41
 8010c50:	5c9b      	ldrb	r3, [r3, r2]
 8010c52:	b2db      	uxtb	r3, r3
 8010c54:	2b22      	cmp	r3, #34	@ 0x22
 8010c56:	d109      	bne.n	8010c6c <I2C_Mem_ISR_DMA+0x128>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8010c58:	68fb      	ldr	r3, [r7, #12]
 8010c5a:	681b      	ldr	r3, [r3, #0]
 8010c5c:	681a      	ldr	r2, [r3, #0]
 8010c5e:	68fb      	ldr	r3, [r7, #12]
 8010c60:	681b      	ldr	r3, [r3, #0]
 8010c62:	2180      	movs	r1, #128	@ 0x80
 8010c64:	0209      	lsls	r1, r1, #8
 8010c66:	430a      	orrs	r2, r1
 8010c68:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8010c6a:	e07a      	b.n	8010d62 <I2C_Mem_ISR_DMA+0x21e>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8010c6c:	68fb      	ldr	r3, [r7, #12]
 8010c6e:	681b      	ldr	r3, [r3, #0]
 8010c70:	681a      	ldr	r2, [r3, #0]
 8010c72:	68fb      	ldr	r3, [r7, #12]
 8010c74:	681b      	ldr	r3, [r3, #0]
 8010c76:	2180      	movs	r1, #128	@ 0x80
 8010c78:	01c9      	lsls	r1, r1, #7
 8010c7a:	430a      	orrs	r2, r1
 8010c7c:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8010c7e:	e070      	b.n	8010d62 <I2C_Mem_ISR_DMA+0x21e>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8010c80:	68fb      	ldr	r3, [r7, #12]
 8010c82:	2140      	movs	r1, #64	@ 0x40
 8010c84:	0018      	movs	r0, r3
 8010c86:	f000 fcef 	bl	8011668 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8010c8a:	e06a      	b.n	8010d62 <I2C_Mem_ISR_DMA+0x21e>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8010c8c:	68bb      	ldr	r3, [r7, #8]
 8010c8e:	2240      	movs	r2, #64	@ 0x40
 8010c90:	4013      	ands	r3, r2
 8010c92:	d058      	beq.n	8010d46 <I2C_Mem_ISR_DMA+0x202>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8010c94:	687b      	ldr	r3, [r7, #4]
 8010c96:	2240      	movs	r2, #64	@ 0x40
 8010c98:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8010c9a:	d054      	beq.n	8010d46 <I2C_Mem_ISR_DMA+0x202>
  {
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8010c9c:	68fb      	ldr	r3, [r7, #12]
 8010c9e:	2241      	movs	r2, #65	@ 0x41
 8010ca0:	5c9b      	ldrb	r3, [r3, r2]
 8010ca2:	b2db      	uxtb	r3, r3
 8010ca4:	2b22      	cmp	r3, #34	@ 0x22
 8010ca6:	d101      	bne.n	8010cac <I2C_Mem_ISR_DMA+0x168>
    {
      direction = I2C_GENERATE_START_READ;
 8010ca8:	4b33      	ldr	r3, [pc, #204]	@ (8010d78 <I2C_Mem_ISR_DMA+0x234>)
 8010caa:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8010cac:	68fb      	ldr	r3, [r7, #12]
 8010cae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8010cb0:	b29b      	uxth	r3, r3
 8010cb2:	2bff      	cmp	r3, #255	@ 0xff
 8010cb4:	d911      	bls.n	8010cda <I2C_Mem_ISR_DMA+0x196>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8010cb6:	68fb      	ldr	r3, [r7, #12]
 8010cb8:	22ff      	movs	r2, #255	@ 0xff
 8010cba:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8010cbc:	68fb      	ldr	r3, [r7, #12]
 8010cbe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8010cc0:	b299      	uxth	r1, r3
 8010cc2:	68fb      	ldr	r3, [r7, #12]
 8010cc4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8010cc6:	b2da      	uxtb	r2, r3
 8010cc8:	2380      	movs	r3, #128	@ 0x80
 8010cca:	045c      	lsls	r4, r3, #17
 8010ccc:	68f8      	ldr	r0, [r7, #12]
 8010cce:	697b      	ldr	r3, [r7, #20]
 8010cd0:	9300      	str	r3, [sp, #0]
 8010cd2:	0023      	movs	r3, r4
 8010cd4:	f001 f940 	bl	8011f58 <I2C_TransferConfig>
 8010cd8:	e012      	b.n	8010d00 <I2C_Mem_ISR_DMA+0x1bc>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8010cda:	68fb      	ldr	r3, [r7, #12]
 8010cdc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8010cde:	b29a      	uxth	r2, r3
 8010ce0:	68fb      	ldr	r3, [r7, #12]
 8010ce2:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8010ce4:	68fb      	ldr	r3, [r7, #12]
 8010ce6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8010ce8:	b299      	uxth	r1, r3
 8010cea:	68fb      	ldr	r3, [r7, #12]
 8010cec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8010cee:	b2da      	uxtb	r2, r3
 8010cf0:	2380      	movs	r3, #128	@ 0x80
 8010cf2:	049c      	lsls	r4, r3, #18
 8010cf4:	68f8      	ldr	r0, [r7, #12]
 8010cf6:	697b      	ldr	r3, [r7, #20]
 8010cf8:	9300      	str	r3, [sp, #0]
 8010cfa:	0023      	movs	r3, r4
 8010cfc:	f001 f92c 	bl	8011f58 <I2C_TransferConfig>
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
 8010d00:	68fb      	ldr	r3, [r7, #12]
 8010d02:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8010d04:	b29a      	uxth	r2, r3
 8010d06:	68fb      	ldr	r3, [r7, #12]
 8010d08:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8010d0a:	1ad3      	subs	r3, r2, r3
 8010d0c:	b29a      	uxth	r2, r3
 8010d0e:	68fb      	ldr	r3, [r7, #12]
 8010d10:	855a      	strh	r2, [r3, #42]	@ 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8010d12:	68fb      	ldr	r3, [r7, #12]
 8010d14:	2241      	movs	r2, #65	@ 0x41
 8010d16:	5c9b      	ldrb	r3, [r3, r2]
 8010d18:	b2db      	uxtb	r3, r3
 8010d1a:	2b22      	cmp	r3, #34	@ 0x22
 8010d1c:	d109      	bne.n	8010d32 <I2C_Mem_ISR_DMA+0x1ee>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8010d1e:	68fb      	ldr	r3, [r7, #12]
 8010d20:	681b      	ldr	r3, [r3, #0]
 8010d22:	681a      	ldr	r2, [r3, #0]
 8010d24:	68fb      	ldr	r3, [r7, #12]
 8010d26:	681b      	ldr	r3, [r3, #0]
 8010d28:	2180      	movs	r1, #128	@ 0x80
 8010d2a:	0209      	lsls	r1, r1, #8
 8010d2c:	430a      	orrs	r2, r1
 8010d2e:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8010d30:	e017      	b.n	8010d62 <I2C_Mem_ISR_DMA+0x21e>
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8010d32:	68fb      	ldr	r3, [r7, #12]
 8010d34:	681b      	ldr	r3, [r3, #0]
 8010d36:	681a      	ldr	r2, [r3, #0]
 8010d38:	68fb      	ldr	r3, [r7, #12]
 8010d3a:	681b      	ldr	r3, [r3, #0]
 8010d3c:	2180      	movs	r1, #128	@ 0x80
 8010d3e:	01c9      	lsls	r1, r1, #7
 8010d40:	430a      	orrs	r2, r1
 8010d42:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8010d44:	e00d      	b.n	8010d62 <I2C_Mem_ISR_DMA+0x21e>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8010d46:	68bb      	ldr	r3, [r7, #8]
 8010d48:	2220      	movs	r2, #32
 8010d4a:	4013      	ands	r3, r2
 8010d4c:	d009      	beq.n	8010d62 <I2C_Mem_ISR_DMA+0x21e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8010d4e:	687b      	ldr	r3, [r7, #4]
 8010d50:	2220      	movs	r2, #32
 8010d52:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8010d54:	d005      	beq.n	8010d62 <I2C_Mem_ISR_DMA+0x21e>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8010d56:	68ba      	ldr	r2, [r7, #8]
 8010d58:	68fb      	ldr	r3, [r7, #12]
 8010d5a:	0011      	movs	r1, r2
 8010d5c:	0018      	movs	r0, r3
 8010d5e:	f000 fa3d 	bl	80111dc <I2C_ITMasterCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8010d62:	68fb      	ldr	r3, [r7, #12]
 8010d64:	2240      	movs	r2, #64	@ 0x40
 8010d66:	2100      	movs	r1, #0
 8010d68:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8010d6a:	2300      	movs	r3, #0
}
 8010d6c:	0018      	movs	r0, r3
 8010d6e:	46bd      	mov	sp, r7
 8010d70:	b007      	add	sp, #28
 8010d72:	bd90      	pop	{r4, r7, pc}
 8010d74:	80002000 	.word	0x80002000
 8010d78:	80002400 	.word	0x80002400

08010d7c <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8010d7c:	b580      	push	{r7, lr}
 8010d7e:	b088      	sub	sp, #32
 8010d80:	af00      	add	r7, sp, #0
 8010d82:	60f8      	str	r0, [r7, #12]
 8010d84:	60b9      	str	r1, [r7, #8]
 8010d86:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8010d88:	68fb      	ldr	r3, [r7, #12]
 8010d8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010d8c:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 8010d8e:	2300      	movs	r3, #0
 8010d90:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 8010d92:	68fb      	ldr	r3, [r7, #12]
 8010d94:	2240      	movs	r2, #64	@ 0x40
 8010d96:	5c9b      	ldrb	r3, [r3, r2]
 8010d98:	2b01      	cmp	r3, #1
 8010d9a:	d101      	bne.n	8010da0 <I2C_Slave_ISR_DMA+0x24>
 8010d9c:	2302      	movs	r3, #2
 8010d9e:	e0cd      	b.n	8010f3c <I2C_Slave_ISR_DMA+0x1c0>
 8010da0:	68fb      	ldr	r3, [r7, #12]
 8010da2:	2240      	movs	r2, #64	@ 0x40
 8010da4:	2101      	movs	r1, #1
 8010da6:	5499      	strb	r1, [r3, r2]

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8010da8:	68bb      	ldr	r3, [r7, #8]
 8010daa:	2220      	movs	r2, #32
 8010dac:	4013      	ands	r3, r2
 8010dae:	d009      	beq.n	8010dc4 <I2C_Slave_ISR_DMA+0x48>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8010db0:	687b      	ldr	r3, [r7, #4]
 8010db2:	2220      	movs	r2, #32
 8010db4:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8010db6:	d005      	beq.n	8010dc4 <I2C_Slave_ISR_DMA+0x48>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 8010db8:	68ba      	ldr	r2, [r7, #8]
 8010dba:	68fb      	ldr	r3, [r7, #12]
 8010dbc:	0011      	movs	r1, r2
 8010dbe:	0018      	movs	r0, r3
 8010dc0:	f000 fada 	bl	8011378 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8010dc4:	68bb      	ldr	r3, [r7, #8]
 8010dc6:	2210      	movs	r2, #16
 8010dc8:	4013      	ands	r3, r2
 8010dca:	d100      	bne.n	8010dce <I2C_Slave_ISR_DMA+0x52>
 8010dcc:	e0a3      	b.n	8010f16 <I2C_Slave_ISR_DMA+0x19a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8010dce:	687b      	ldr	r3, [r7, #4]
 8010dd0:	2210      	movs	r2, #16
 8010dd2:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8010dd4:	d100      	bne.n	8010dd8 <I2C_Slave_ISR_DMA+0x5c>
 8010dd6:	e09e      	b.n	8010f16 <I2C_Slave_ISR_DMA+0x19a>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8010dd8:	687a      	ldr	r2, [r7, #4]
 8010dda:	2380      	movs	r3, #128	@ 0x80
 8010ddc:	01db      	lsls	r3, r3, #7
 8010dde:	4013      	ands	r3, r2
 8010de0:	d105      	bne.n	8010dee <I2C_Slave_ISR_DMA+0x72>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 8010de2:	687a      	ldr	r2, [r7, #4]
 8010de4:	2380      	movs	r3, #128	@ 0x80
 8010de6:	021b      	lsls	r3, r3, #8
 8010de8:	4013      	ands	r3, r2
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8010dea:	d100      	bne.n	8010dee <I2C_Slave_ISR_DMA+0x72>
 8010dec:	e08c      	b.n	8010f08 <I2C_Slave_ISR_DMA+0x18c>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 8010dee:	68fb      	ldr	r3, [r7, #12]
 8010df0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010df2:	2b00      	cmp	r3, #0
 8010df4:	d00c      	beq.n	8010e10 <I2C_Slave_ISR_DMA+0x94>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 8010df6:	687a      	ldr	r2, [r7, #4]
 8010df8:	2380      	movs	r3, #128	@ 0x80
 8010dfa:	021b      	lsls	r3, r3, #8
 8010dfc:	4013      	ands	r3, r2
 8010dfe:	d007      	beq.n	8010e10 <I2C_Slave_ISR_DMA+0x94>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 8010e00:	68fb      	ldr	r3, [r7, #12]
 8010e02:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010e04:	681b      	ldr	r3, [r3, #0]
 8010e06:	685b      	ldr	r3, [r3, #4]
 8010e08:	2b00      	cmp	r3, #0
 8010e0a:	d101      	bne.n	8010e10 <I2C_Slave_ISR_DMA+0x94>
          {
            treatdmanack = 1U;
 8010e0c:	2301      	movs	r3, #1
 8010e0e:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 8010e10:	68fb      	ldr	r3, [r7, #12]
 8010e12:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010e14:	2b00      	cmp	r3, #0
 8010e16:	d00c      	beq.n	8010e32 <I2C_Slave_ISR_DMA+0xb6>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 8010e18:	687a      	ldr	r2, [r7, #4]
 8010e1a:	2380      	movs	r3, #128	@ 0x80
 8010e1c:	01db      	lsls	r3, r3, #7
 8010e1e:	4013      	ands	r3, r2
 8010e20:	d007      	beq.n	8010e32 <I2C_Slave_ISR_DMA+0xb6>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 8010e22:	68fb      	ldr	r3, [r7, #12]
 8010e24:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010e26:	681b      	ldr	r3, [r3, #0]
 8010e28:	685b      	ldr	r3, [r3, #4]
 8010e2a:	2b00      	cmp	r3, #0
 8010e2c:	d101      	bne.n	8010e32 <I2C_Slave_ISR_DMA+0xb6>
          {
            treatdmanack = 1U;
 8010e2e:	2301      	movs	r3, #1
 8010e30:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 8010e32:	69fb      	ldr	r3, [r7, #28]
 8010e34:	2b01      	cmp	r3, #1
 8010e36:	d12d      	bne.n	8010e94 <I2C_Slave_ISR_DMA+0x118>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8010e38:	68fb      	ldr	r3, [r7, #12]
 8010e3a:	2241      	movs	r2, #65	@ 0x41
 8010e3c:	5c9b      	ldrb	r3, [r3, r2]
 8010e3e:	b2db      	uxtb	r3, r3
 8010e40:	2b28      	cmp	r3, #40	@ 0x28
 8010e42:	d10b      	bne.n	8010e5c <I2C_Slave_ISR_DMA+0xe0>
 8010e44:	69ba      	ldr	r2, [r7, #24]
 8010e46:	2380      	movs	r3, #128	@ 0x80
 8010e48:	049b      	lsls	r3, r3, #18
 8010e4a:	429a      	cmp	r2, r3
 8010e4c:	d106      	bne.n	8010e5c <I2C_Slave_ISR_DMA+0xe0>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 8010e4e:	68ba      	ldr	r2, [r7, #8]
 8010e50:	68fb      	ldr	r3, [r7, #12]
 8010e52:	0011      	movs	r1, r2
 8010e54:	0018      	movs	r0, r3
 8010e56:	f000 fbaf 	bl	80115b8 <I2C_ITListenCplt>
 8010e5a:	e054      	b.n	8010f06 <I2C_Slave_ISR_DMA+0x18a>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8010e5c:	68fb      	ldr	r3, [r7, #12]
 8010e5e:	2241      	movs	r2, #65	@ 0x41
 8010e60:	5c9b      	ldrb	r3, [r3, r2]
 8010e62:	b2db      	uxtb	r3, r3
 8010e64:	2b29      	cmp	r3, #41	@ 0x29
 8010e66:	d110      	bne.n	8010e8a <I2C_Slave_ISR_DMA+0x10e>
 8010e68:	69bb      	ldr	r3, [r7, #24]
 8010e6a:	4a36      	ldr	r2, [pc, #216]	@ (8010f44 <I2C_Slave_ISR_DMA+0x1c8>)
 8010e6c:	4293      	cmp	r3, r2
 8010e6e:	d00c      	beq.n	8010e8a <I2C_Slave_ISR_DMA+0x10e>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8010e70:	68fb      	ldr	r3, [r7, #12]
 8010e72:	681b      	ldr	r3, [r3, #0]
 8010e74:	2210      	movs	r2, #16
 8010e76:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 8010e78:	68fb      	ldr	r3, [r7, #12]
 8010e7a:	0018      	movs	r0, r3
 8010e7c:	f000 fd1f 	bl	80118be <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 8010e80:	68fb      	ldr	r3, [r7, #12]
 8010e82:	0018      	movs	r0, r3
 8010e84:	f000 f946 	bl	8011114 <I2C_ITSlaveSeqCplt>
 8010e88:	e03d      	b.n	8010f06 <I2C_Slave_ISR_DMA+0x18a>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8010e8a:	68fb      	ldr	r3, [r7, #12]
 8010e8c:	681b      	ldr	r3, [r3, #0]
 8010e8e:	2210      	movs	r2, #16
 8010e90:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 8010e92:	e03e      	b.n	8010f12 <I2C_Slave_ISR_DMA+0x196>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8010e94:	68fb      	ldr	r3, [r7, #12]
 8010e96:	681b      	ldr	r3, [r3, #0]
 8010e98:	2210      	movs	r2, #16
 8010e9a:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8010e9c:	68fb      	ldr	r3, [r7, #12]
 8010e9e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010ea0:	2204      	movs	r2, #4
 8010ea2:	431a      	orrs	r2, r3
 8010ea4:	68fb      	ldr	r3, [r7, #12]
 8010ea6:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 8010ea8:	2317      	movs	r3, #23
 8010eaa:	18fb      	adds	r3, r7, r3
 8010eac:	68fa      	ldr	r2, [r7, #12]
 8010eae:	2141      	movs	r1, #65	@ 0x41
 8010eb0:	5c52      	ldrb	r2, [r2, r1]
 8010eb2:	701a      	strb	r2, [r3, #0]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8010eb4:	69bb      	ldr	r3, [r7, #24]
 8010eb6:	2b00      	cmp	r3, #0
 8010eb8:	d004      	beq.n	8010ec4 <I2C_Slave_ISR_DMA+0x148>
 8010eba:	69ba      	ldr	r2, [r7, #24]
 8010ebc:	2380      	movs	r3, #128	@ 0x80
 8010ebe:	045b      	lsls	r3, r3, #17
 8010ec0:	429a      	cmp	r2, r3
 8010ec2:	d126      	bne.n	8010f12 <I2C_Slave_ISR_DMA+0x196>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8010ec4:	2217      	movs	r2, #23
 8010ec6:	18bb      	adds	r3, r7, r2
 8010ec8:	781b      	ldrb	r3, [r3, #0]
 8010eca:	2b21      	cmp	r3, #33	@ 0x21
 8010ecc:	d003      	beq.n	8010ed6 <I2C_Slave_ISR_DMA+0x15a>
 8010ece:	18bb      	adds	r3, r7, r2
 8010ed0:	781b      	ldrb	r3, [r3, #0]
 8010ed2:	2b29      	cmp	r3, #41	@ 0x29
 8010ed4:	d103      	bne.n	8010ede <I2C_Slave_ISR_DMA+0x162>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8010ed6:	68fb      	ldr	r3, [r7, #12]
 8010ed8:	2221      	movs	r2, #33	@ 0x21
 8010eda:	631a      	str	r2, [r3, #48]	@ 0x30
 8010edc:	e00b      	b.n	8010ef6 <I2C_Slave_ISR_DMA+0x17a>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8010ede:	2217      	movs	r2, #23
 8010ee0:	18bb      	adds	r3, r7, r2
 8010ee2:	781b      	ldrb	r3, [r3, #0]
 8010ee4:	2b22      	cmp	r3, #34	@ 0x22
 8010ee6:	d003      	beq.n	8010ef0 <I2C_Slave_ISR_DMA+0x174>
 8010ee8:	18bb      	adds	r3, r7, r2
 8010eea:	781b      	ldrb	r3, [r3, #0]
 8010eec:	2b2a      	cmp	r3, #42	@ 0x2a
 8010eee:	d102      	bne.n	8010ef6 <I2C_Slave_ISR_DMA+0x17a>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8010ef0:	68fb      	ldr	r3, [r7, #12]
 8010ef2:	2222      	movs	r2, #34	@ 0x22
 8010ef4:	631a      	str	r2, [r3, #48]	@ 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 8010ef6:	68fb      	ldr	r3, [r7, #12]
 8010ef8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8010efa:	68fb      	ldr	r3, [r7, #12]
 8010efc:	0011      	movs	r1, r2
 8010efe:	0018      	movs	r0, r3
 8010f00:	f000 fbb2 	bl	8011668 <I2C_ITError>
      if (treatdmanack == 1U)
 8010f04:	e005      	b.n	8010f12 <I2C_Slave_ISR_DMA+0x196>
 8010f06:	e004      	b.n	8010f12 <I2C_Slave_ISR_DMA+0x196>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8010f08:	68fb      	ldr	r3, [r7, #12]
 8010f0a:	681b      	ldr	r3, [r3, #0]
 8010f0c:	2210      	movs	r2, #16
 8010f0e:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8010f10:	e00f      	b.n	8010f32 <I2C_Slave_ISR_DMA+0x1b6>
      if (treatdmanack == 1U)
 8010f12:	46c0      	nop			@ (mov r8, r8)
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8010f14:	e00d      	b.n	8010f32 <I2C_Slave_ISR_DMA+0x1b6>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8010f16:	68bb      	ldr	r3, [r7, #8]
 8010f18:	2208      	movs	r2, #8
 8010f1a:	4013      	ands	r3, r2
 8010f1c:	d009      	beq.n	8010f32 <I2C_Slave_ISR_DMA+0x1b6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8010f1e:	687b      	ldr	r3, [r7, #4]
 8010f20:	2208      	movs	r2, #8
 8010f22:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8010f24:	d005      	beq.n	8010f32 <I2C_Slave_ISR_DMA+0x1b6>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 8010f26:	68ba      	ldr	r2, [r7, #8]
 8010f28:	68fb      	ldr	r3, [r7, #12]
 8010f2a:	0011      	movs	r1, r2
 8010f2c:	0018      	movs	r0, r3
 8010f2e:	f000 f80b 	bl	8010f48 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8010f32:	68fb      	ldr	r3, [r7, #12]
 8010f34:	2240      	movs	r2, #64	@ 0x40
 8010f36:	2100      	movs	r1, #0
 8010f38:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8010f3a:	2300      	movs	r3, #0
}
 8010f3c:	0018      	movs	r0, r3
 8010f3e:	46bd      	mov	sp, r7
 8010f40:	b008      	add	sp, #32
 8010f42:	bd80      	pop	{r7, pc}
 8010f44:	ffff0000 	.word	0xffff0000

08010f48 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8010f48:	b5b0      	push	{r4, r5, r7, lr}
 8010f4a:	b084      	sub	sp, #16
 8010f4c:	af00      	add	r7, sp, #0
 8010f4e:	6078      	str	r0, [r7, #4]
 8010f50:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8010f52:	687b      	ldr	r3, [r7, #4]
 8010f54:	2241      	movs	r2, #65	@ 0x41
 8010f56:	5c9b      	ldrb	r3, [r3, r2]
 8010f58:	b2db      	uxtb	r3, r3
 8010f5a:	001a      	movs	r2, r3
 8010f5c:	2328      	movs	r3, #40	@ 0x28
 8010f5e:	4013      	ands	r3, r2
 8010f60:	2b28      	cmp	r3, #40	@ 0x28
 8010f62:	d000      	beq.n	8010f66 <I2C_ITAddrCplt+0x1e>
 8010f64:	e088      	b.n	8011078 <I2C_ITAddrCplt+0x130>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8010f66:	687b      	ldr	r3, [r7, #4]
 8010f68:	681b      	ldr	r3, [r3, #0]
 8010f6a:	699b      	ldr	r3, [r3, #24]
 8010f6c:	0c1b      	lsrs	r3, r3, #16
 8010f6e:	b2da      	uxtb	r2, r3
 8010f70:	250f      	movs	r5, #15
 8010f72:	197b      	adds	r3, r7, r5
 8010f74:	2101      	movs	r1, #1
 8010f76:	400a      	ands	r2, r1
 8010f78:	701a      	strb	r2, [r3, #0]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8010f7a:	687b      	ldr	r3, [r7, #4]
 8010f7c:	681b      	ldr	r3, [r3, #0]
 8010f7e:	699b      	ldr	r3, [r3, #24]
 8010f80:	0c1b      	lsrs	r3, r3, #16
 8010f82:	b29a      	uxth	r2, r3
 8010f84:	200c      	movs	r0, #12
 8010f86:	183b      	adds	r3, r7, r0
 8010f88:	21fe      	movs	r1, #254	@ 0xfe
 8010f8a:	400a      	ands	r2, r1
 8010f8c:	801a      	strh	r2, [r3, #0]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8010f8e:	687b      	ldr	r3, [r7, #4]
 8010f90:	681b      	ldr	r3, [r3, #0]
 8010f92:	689b      	ldr	r3, [r3, #8]
 8010f94:	b29a      	uxth	r2, r3
 8010f96:	240a      	movs	r4, #10
 8010f98:	193b      	adds	r3, r7, r4
 8010f9a:	0592      	lsls	r2, r2, #22
 8010f9c:	0d92      	lsrs	r2, r2, #22
 8010f9e:	801a      	strh	r2, [r3, #0]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8010fa0:	687b      	ldr	r3, [r7, #4]
 8010fa2:	681b      	ldr	r3, [r3, #0]
 8010fa4:	68db      	ldr	r3, [r3, #12]
 8010fa6:	b29a      	uxth	r2, r3
 8010fa8:	2308      	movs	r3, #8
 8010faa:	18fb      	adds	r3, r7, r3
 8010fac:	21fe      	movs	r1, #254	@ 0xfe
 8010fae:	400a      	ands	r2, r1
 8010fb0:	801a      	strh	r2, [r3, #0]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8010fb2:	687b      	ldr	r3, [r7, #4]
 8010fb4:	68db      	ldr	r3, [r3, #12]
 8010fb6:	2b02      	cmp	r3, #2
 8010fb8:	d148      	bne.n	801104c <I2C_ITAddrCplt+0x104>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8010fba:	0021      	movs	r1, r4
 8010fbc:	187b      	adds	r3, r7, r1
 8010fbe:	881b      	ldrh	r3, [r3, #0]
 8010fc0:	09db      	lsrs	r3, r3, #7
 8010fc2:	b29a      	uxth	r2, r3
 8010fc4:	183b      	adds	r3, r7, r0
 8010fc6:	881b      	ldrh	r3, [r3, #0]
 8010fc8:	4053      	eors	r3, r2
 8010fca:	b29b      	uxth	r3, r3
 8010fcc:	001a      	movs	r2, r3
 8010fce:	2306      	movs	r3, #6
 8010fd0:	4013      	ands	r3, r2
 8010fd2:	d120      	bne.n	8011016 <I2C_ITAddrCplt+0xce>
      {
        slaveaddrcode = ownadd1code;
 8010fd4:	183b      	adds	r3, r7, r0
 8010fd6:	187a      	adds	r2, r7, r1
 8010fd8:	8812      	ldrh	r2, [r2, #0]
 8010fda:	801a      	strh	r2, [r3, #0]
        hi2c->AddrEventCount++;
 8010fdc:	687b      	ldr	r3, [r7, #4]
 8010fde:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8010fe0:	1c5a      	adds	r2, r3, #1
 8010fe2:	687b      	ldr	r3, [r7, #4]
 8010fe4:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 8010fe6:	687b      	ldr	r3, [r7, #4]
 8010fe8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8010fea:	2b02      	cmp	r3, #2
 8010fec:	d14c      	bne.n	8011088 <I2C_ITAddrCplt+0x140>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8010fee:	687b      	ldr	r3, [r7, #4]
 8010ff0:	2200      	movs	r2, #0
 8010ff2:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8010ff4:	687b      	ldr	r3, [r7, #4]
 8010ff6:	681b      	ldr	r3, [r3, #0]
 8010ff8:	2208      	movs	r2, #8
 8010ffa:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8010ffc:	687b      	ldr	r3, [r7, #4]
 8010ffe:	2240      	movs	r2, #64	@ 0x40
 8011000:	2100      	movs	r1, #0
 8011002:	5499      	strb	r1, [r3, r2]

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8011004:	183b      	adds	r3, r7, r0
 8011006:	881a      	ldrh	r2, [r3, #0]
 8011008:	197b      	adds	r3, r7, r5
 801100a:	7819      	ldrb	r1, [r3, #0]
 801100c:	687b      	ldr	r3, [r7, #4]
 801100e:	0018      	movs	r0, r3
 8011010:	f7ff fa39 	bl	8010486 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8011014:	e038      	b.n	8011088 <I2C_ITAddrCplt+0x140>
        slaveaddrcode = ownadd2code;
 8011016:	240c      	movs	r4, #12
 8011018:	193b      	adds	r3, r7, r4
 801101a:	2208      	movs	r2, #8
 801101c:	18ba      	adds	r2, r7, r2
 801101e:	8812      	ldrh	r2, [r2, #0]
 8011020:	801a      	strh	r2, [r3, #0]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8011022:	2380      	movs	r3, #128	@ 0x80
 8011024:	021a      	lsls	r2, r3, #8
 8011026:	687b      	ldr	r3, [r7, #4]
 8011028:	0011      	movs	r1, r2
 801102a:	0018      	movs	r0, r3
 801102c:	f001 f85c 	bl	80120e8 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8011030:	687b      	ldr	r3, [r7, #4]
 8011032:	2240      	movs	r2, #64	@ 0x40
 8011034:	2100      	movs	r1, #0
 8011036:	5499      	strb	r1, [r3, r2]
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8011038:	193b      	adds	r3, r7, r4
 801103a:	881a      	ldrh	r2, [r3, #0]
 801103c:	230f      	movs	r3, #15
 801103e:	18fb      	adds	r3, r7, r3
 8011040:	7819      	ldrb	r1, [r3, #0]
 8011042:	687b      	ldr	r3, [r7, #4]
 8011044:	0018      	movs	r0, r3
 8011046:	f7ff fa1e 	bl	8010486 <HAL_I2C_AddrCallback>
}
 801104a:	e01d      	b.n	8011088 <I2C_ITAddrCplt+0x140>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 801104c:	2380      	movs	r3, #128	@ 0x80
 801104e:	021a      	lsls	r2, r3, #8
 8011050:	687b      	ldr	r3, [r7, #4]
 8011052:	0011      	movs	r1, r2
 8011054:	0018      	movs	r0, r3
 8011056:	f001 f847 	bl	80120e8 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 801105a:	687b      	ldr	r3, [r7, #4]
 801105c:	2240      	movs	r2, #64	@ 0x40
 801105e:	2100      	movs	r1, #0
 8011060:	5499      	strb	r1, [r3, r2]
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8011062:	230c      	movs	r3, #12
 8011064:	18fb      	adds	r3, r7, r3
 8011066:	881a      	ldrh	r2, [r3, #0]
 8011068:	230f      	movs	r3, #15
 801106a:	18fb      	adds	r3, r7, r3
 801106c:	7819      	ldrb	r1, [r3, #0]
 801106e:	687b      	ldr	r3, [r7, #4]
 8011070:	0018      	movs	r0, r3
 8011072:	f7ff fa08 	bl	8010486 <HAL_I2C_AddrCallback>
}
 8011076:	e007      	b.n	8011088 <I2C_ITAddrCplt+0x140>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8011078:	687b      	ldr	r3, [r7, #4]
 801107a:	681b      	ldr	r3, [r3, #0]
 801107c:	2208      	movs	r2, #8
 801107e:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8011080:	687b      	ldr	r3, [r7, #4]
 8011082:	2240      	movs	r2, #64	@ 0x40
 8011084:	2100      	movs	r1, #0
 8011086:	5499      	strb	r1, [r3, r2]
}
 8011088:	46c0      	nop			@ (mov r8, r8)
 801108a:	46bd      	mov	sp, r7
 801108c:	b004      	add	sp, #16
 801108e:	bdb0      	pop	{r4, r5, r7, pc}

08011090 <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8011090:	b580      	push	{r7, lr}
 8011092:	b082      	sub	sp, #8
 8011094:	af00      	add	r7, sp, #0
 8011096:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8011098:	687b      	ldr	r3, [r7, #4]
 801109a:	2242      	movs	r2, #66	@ 0x42
 801109c:	2100      	movs	r1, #0
 801109e:	5499      	strb	r1, [r3, r2]

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80110a0:	687b      	ldr	r3, [r7, #4]
 80110a2:	2241      	movs	r2, #65	@ 0x41
 80110a4:	5c9b      	ldrb	r3, [r3, r2]
 80110a6:	b2db      	uxtb	r3, r3
 80110a8:	2b21      	cmp	r3, #33	@ 0x21
 80110aa:	d117      	bne.n	80110dc <I2C_ITMasterSeqCplt+0x4c>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 80110ac:	687b      	ldr	r3, [r7, #4]
 80110ae:	2241      	movs	r2, #65	@ 0x41
 80110b0:	2120      	movs	r1, #32
 80110b2:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80110b4:	687b      	ldr	r3, [r7, #4]
 80110b6:	2211      	movs	r2, #17
 80110b8:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 80110ba:	687b      	ldr	r3, [r7, #4]
 80110bc:	2200      	movs	r2, #0
 80110be:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80110c0:	687b      	ldr	r3, [r7, #4]
 80110c2:	2101      	movs	r1, #1
 80110c4:	0018      	movs	r0, r3
 80110c6:	f001 f80f 	bl	80120e8 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80110ca:	687b      	ldr	r3, [r7, #4]
 80110cc:	2240      	movs	r2, #64	@ 0x40
 80110ce:	2100      	movs	r1, #0
 80110d0:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 80110d2:	687b      	ldr	r3, [r7, #4]
 80110d4:	0018      	movs	r0, r3
 80110d6:	f7ff f9b6 	bl	8010446 <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80110da:	e016      	b.n	801110a <I2C_ITMasterSeqCplt+0x7a>
    hi2c->State         = HAL_I2C_STATE_READY;
 80110dc:	687b      	ldr	r3, [r7, #4]
 80110de:	2241      	movs	r2, #65	@ 0x41
 80110e0:	2120      	movs	r1, #32
 80110e2:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80110e4:	687b      	ldr	r3, [r7, #4]
 80110e6:	2212      	movs	r2, #18
 80110e8:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 80110ea:	687b      	ldr	r3, [r7, #4]
 80110ec:	2200      	movs	r2, #0
 80110ee:	635a      	str	r2, [r3, #52]	@ 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80110f0:	687b      	ldr	r3, [r7, #4]
 80110f2:	2102      	movs	r1, #2
 80110f4:	0018      	movs	r0, r3
 80110f6:	f000 fff7 	bl	80120e8 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 80110fa:	687b      	ldr	r3, [r7, #4]
 80110fc:	2240      	movs	r2, #64	@ 0x40
 80110fe:	2100      	movs	r1, #0
 8011100:	5499      	strb	r1, [r3, r2]
    HAL_I2C_MasterRxCpltCallback(hi2c);
 8011102:	687b      	ldr	r3, [r7, #4]
 8011104:	0018      	movs	r0, r3
 8011106:	f7ff f9a6 	bl	8010456 <HAL_I2C_MasterRxCpltCallback>
}
 801110a:	46c0      	nop			@ (mov r8, r8)
 801110c:	46bd      	mov	sp, r7
 801110e:	b002      	add	sp, #8
 8011110:	bd80      	pop	{r7, pc}
	...

08011114 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8011114:	b580      	push	{r7, lr}
 8011116:	b084      	sub	sp, #16
 8011118:	af00      	add	r7, sp, #0
 801111a:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 801111c:	687b      	ldr	r3, [r7, #4]
 801111e:	681b      	ldr	r3, [r3, #0]
 8011120:	681b      	ldr	r3, [r3, #0]
 8011122:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8011124:	687b      	ldr	r3, [r7, #4]
 8011126:	2242      	movs	r2, #66	@ 0x42
 8011128:	2100      	movs	r1, #0
 801112a:	5499      	strb	r1, [r3, r2]

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 801112c:	68fa      	ldr	r2, [r7, #12]
 801112e:	2380      	movs	r3, #128	@ 0x80
 8011130:	01db      	lsls	r3, r3, #7
 8011132:	4013      	ands	r3, r2
 8011134:	d008      	beq.n	8011148 <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8011136:	687b      	ldr	r3, [r7, #4]
 8011138:	681b      	ldr	r3, [r3, #0]
 801113a:	681a      	ldr	r2, [r3, #0]
 801113c:	687b      	ldr	r3, [r7, #4]
 801113e:	681b      	ldr	r3, [r3, #0]
 8011140:	4924      	ldr	r1, [pc, #144]	@ (80111d4 <I2C_ITSlaveSeqCplt+0xc0>)
 8011142:	400a      	ands	r2, r1
 8011144:	601a      	str	r2, [r3, #0]
 8011146:	e00c      	b.n	8011162 <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8011148:	68fa      	ldr	r2, [r7, #12]
 801114a:	2380      	movs	r3, #128	@ 0x80
 801114c:	021b      	lsls	r3, r3, #8
 801114e:	4013      	ands	r3, r2
 8011150:	d007      	beq.n	8011162 <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8011152:	687b      	ldr	r3, [r7, #4]
 8011154:	681b      	ldr	r3, [r3, #0]
 8011156:	681a      	ldr	r2, [r3, #0]
 8011158:	687b      	ldr	r3, [r7, #4]
 801115a:	681b      	ldr	r3, [r3, #0]
 801115c:	491e      	ldr	r1, [pc, #120]	@ (80111d8 <I2C_ITSlaveSeqCplt+0xc4>)
 801115e:	400a      	ands	r2, r1
 8011160:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8011162:	687b      	ldr	r3, [r7, #4]
 8011164:	2241      	movs	r2, #65	@ 0x41
 8011166:	5c9b      	ldrb	r3, [r3, r2]
 8011168:	b2db      	uxtb	r3, r3
 801116a:	2b29      	cmp	r3, #41	@ 0x29
 801116c:	d114      	bne.n	8011198 <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 801116e:	687b      	ldr	r3, [r7, #4]
 8011170:	2241      	movs	r2, #65	@ 0x41
 8011172:	2128      	movs	r1, #40	@ 0x28
 8011174:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8011176:	687b      	ldr	r3, [r7, #4]
 8011178:	2221      	movs	r2, #33	@ 0x21
 801117a:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 801117c:	687b      	ldr	r3, [r7, #4]
 801117e:	2101      	movs	r1, #1
 8011180:	0018      	movs	r0, r3
 8011182:	f000 ffb1 	bl	80120e8 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8011186:	687b      	ldr	r3, [r7, #4]
 8011188:	2240      	movs	r2, #64	@ 0x40
 801118a:	2100      	movs	r1, #0
 801118c:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 801118e:	687b      	ldr	r3, [r7, #4]
 8011190:	0018      	movs	r0, r3
 8011192:	f7ff f968 	bl	8010466 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8011196:	e019      	b.n	80111cc <I2C_ITSlaveSeqCplt+0xb8>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8011198:	687b      	ldr	r3, [r7, #4]
 801119a:	2241      	movs	r2, #65	@ 0x41
 801119c:	5c9b      	ldrb	r3, [r3, r2]
 801119e:	b2db      	uxtb	r3, r3
 80111a0:	2b2a      	cmp	r3, #42	@ 0x2a
 80111a2:	d113      	bne.n	80111cc <I2C_ITSlaveSeqCplt+0xb8>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80111a4:	687b      	ldr	r3, [r7, #4]
 80111a6:	2241      	movs	r2, #65	@ 0x41
 80111a8:	2128      	movs	r1, #40	@ 0x28
 80111aa:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80111ac:	687b      	ldr	r3, [r7, #4]
 80111ae:	2222      	movs	r2, #34	@ 0x22
 80111b0:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80111b2:	687b      	ldr	r3, [r7, #4]
 80111b4:	2102      	movs	r1, #2
 80111b6:	0018      	movs	r0, r3
 80111b8:	f000 ff96 	bl	80120e8 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 80111bc:	687b      	ldr	r3, [r7, #4]
 80111be:	2240      	movs	r2, #64	@ 0x40
 80111c0:	2100      	movs	r1, #0
 80111c2:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80111c4:	687b      	ldr	r3, [r7, #4]
 80111c6:	0018      	movs	r0, r3
 80111c8:	f7ff f955 	bl	8010476 <HAL_I2C_SlaveRxCpltCallback>
}
 80111cc:	46c0      	nop			@ (mov r8, r8)
 80111ce:	46bd      	mov	sp, r7
 80111d0:	b004      	add	sp, #16
 80111d2:	bd80      	pop	{r7, pc}
 80111d4:	ffffbfff 	.word	0xffffbfff
 80111d8:	ffff7fff 	.word	0xffff7fff

080111dc <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80111dc:	b580      	push	{r7, lr}
 80111de:	b086      	sub	sp, #24
 80111e0:	af00      	add	r7, sp, #0
 80111e2:	6078      	str	r0, [r7, #4]
 80111e4:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 80111e6:	683b      	ldr	r3, [r7, #0]
 80111e8:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80111ea:	687b      	ldr	r3, [r7, #4]
 80111ec:	681b      	ldr	r3, [r3, #0]
 80111ee:	2220      	movs	r2, #32
 80111f0:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80111f2:	687b      	ldr	r3, [r7, #4]
 80111f4:	2241      	movs	r2, #65	@ 0x41
 80111f6:	5c9b      	ldrb	r3, [r3, r2]
 80111f8:	b2db      	uxtb	r3, r3
 80111fa:	2b21      	cmp	r3, #33	@ 0x21
 80111fc:	d108      	bne.n	8011210 <I2C_ITMasterCplt+0x34>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80111fe:	687b      	ldr	r3, [r7, #4]
 8011200:	2101      	movs	r1, #1
 8011202:	0018      	movs	r0, r3
 8011204:	f000 ff70 	bl	80120e8 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8011208:	687b      	ldr	r3, [r7, #4]
 801120a:	2211      	movs	r2, #17
 801120c:	631a      	str	r2, [r3, #48]	@ 0x30
 801120e:	e00d      	b.n	801122c <I2C_ITMasterCplt+0x50>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8011210:	687b      	ldr	r3, [r7, #4]
 8011212:	2241      	movs	r2, #65	@ 0x41
 8011214:	5c9b      	ldrb	r3, [r3, r2]
 8011216:	b2db      	uxtb	r3, r3
 8011218:	2b22      	cmp	r3, #34	@ 0x22
 801121a:	d107      	bne.n	801122c <I2C_ITMasterCplt+0x50>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 801121c:	687b      	ldr	r3, [r7, #4]
 801121e:	2102      	movs	r1, #2
 8011220:	0018      	movs	r0, r3
 8011222:	f000 ff61 	bl	80120e8 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8011226:	687b      	ldr	r3, [r7, #4]
 8011228:	2212      	movs	r2, #18
 801122a:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 801122c:	687b      	ldr	r3, [r7, #4]
 801122e:	681b      	ldr	r3, [r3, #0]
 8011230:	685a      	ldr	r2, [r3, #4]
 8011232:	687b      	ldr	r3, [r7, #4]
 8011234:	681b      	ldr	r3, [r3, #0]
 8011236:	494e      	ldr	r1, [pc, #312]	@ (8011370 <I2C_ITMasterCplt+0x194>)
 8011238:	400a      	ands	r2, r1
 801123a:	605a      	str	r2, [r3, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 801123c:	687b      	ldr	r3, [r7, #4]
 801123e:	2200      	movs	r2, #0
 8011240:	635a      	str	r2, [r3, #52]	@ 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8011242:	687b      	ldr	r3, [r7, #4]
 8011244:	4a4b      	ldr	r2, [pc, #300]	@ (8011374 <I2C_ITMasterCplt+0x198>)
 8011246:	62da      	str	r2, [r3, #44]	@ 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 8011248:	697b      	ldr	r3, [r7, #20]
 801124a:	2210      	movs	r2, #16
 801124c:	4013      	ands	r3, r2
 801124e:	d009      	beq.n	8011264 <I2C_ITMasterCplt+0x88>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8011250:	687b      	ldr	r3, [r7, #4]
 8011252:	681b      	ldr	r3, [r3, #0]
 8011254:	2210      	movs	r2, #16
 8011256:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8011258:	687b      	ldr	r3, [r7, #4]
 801125a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801125c:	2204      	movs	r2, #4
 801125e:	431a      	orrs	r2, r3
 8011260:	687b      	ldr	r3, [r7, #4]
 8011262:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 8011264:	687b      	ldr	r3, [r7, #4]
 8011266:	2241      	movs	r2, #65	@ 0x41
 8011268:	5c9b      	ldrb	r3, [r3, r2]
 801126a:	b2db      	uxtb	r3, r3
 801126c:	2b60      	cmp	r3, #96	@ 0x60
 801126e:	d109      	bne.n	8011284 <I2C_ITMasterCplt+0xa8>
 8011270:	697b      	ldr	r3, [r7, #20]
 8011272:	2204      	movs	r2, #4
 8011274:	4013      	ands	r3, r2
 8011276:	d005      	beq.n	8011284 <I2C_ITMasterCplt+0xa8>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 8011278:	687b      	ldr	r3, [r7, #4]
 801127a:	681b      	ldr	r3, [r3, #0]
 801127c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801127e:	b2db      	uxtb	r3, r3
 8011280:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 8011282:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8011284:	687b      	ldr	r3, [r7, #4]
 8011286:	0018      	movs	r0, r3
 8011288:	f000 fb19 	bl	80118be <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 801128c:	687b      	ldr	r3, [r7, #4]
 801128e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8011290:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 8011292:	687b      	ldr	r3, [r7, #4]
 8011294:	2241      	movs	r2, #65	@ 0x41
 8011296:	5c9b      	ldrb	r3, [r3, r2]
 8011298:	b2db      	uxtb	r3, r3
 801129a:	2b60      	cmp	r3, #96	@ 0x60
 801129c:	d002      	beq.n	80112a4 <I2C_ITMasterCplt+0xc8>
 801129e:	693b      	ldr	r3, [r7, #16]
 80112a0:	2b00      	cmp	r3, #0
 80112a2:	d007      	beq.n	80112b4 <I2C_ITMasterCplt+0xd8>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 80112a4:	687b      	ldr	r3, [r7, #4]
 80112a6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80112a8:	687b      	ldr	r3, [r7, #4]
 80112aa:	0011      	movs	r1, r2
 80112ac:	0018      	movs	r0, r3
 80112ae:	f000 f9db 	bl	8011668 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 80112b2:	e058      	b.n	8011366 <I2C_ITMasterCplt+0x18a>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80112b4:	687b      	ldr	r3, [r7, #4]
 80112b6:	2241      	movs	r2, #65	@ 0x41
 80112b8:	5c9b      	ldrb	r3, [r3, r2]
 80112ba:	b2db      	uxtb	r3, r3
 80112bc:	2b21      	cmp	r3, #33	@ 0x21
 80112be:	d126      	bne.n	801130e <I2C_ITMasterCplt+0x132>
    hi2c->State = HAL_I2C_STATE_READY;
 80112c0:	687b      	ldr	r3, [r7, #4]
 80112c2:	2241      	movs	r2, #65	@ 0x41
 80112c4:	2120      	movs	r1, #32
 80112c6:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 80112c8:	687b      	ldr	r3, [r7, #4]
 80112ca:	2200      	movs	r2, #0
 80112cc:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80112ce:	687b      	ldr	r3, [r7, #4]
 80112d0:	2242      	movs	r2, #66	@ 0x42
 80112d2:	5c9b      	ldrb	r3, [r3, r2]
 80112d4:	b2db      	uxtb	r3, r3
 80112d6:	2b40      	cmp	r3, #64	@ 0x40
 80112d8:	d10c      	bne.n	80112f4 <I2C_ITMasterCplt+0x118>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80112da:	687b      	ldr	r3, [r7, #4]
 80112dc:	2242      	movs	r2, #66	@ 0x42
 80112de:	2100      	movs	r1, #0
 80112e0:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 80112e2:	687b      	ldr	r3, [r7, #4]
 80112e4:	2240      	movs	r2, #64	@ 0x40
 80112e6:	2100      	movs	r1, #0
 80112e8:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MemTxCpltCallback(hi2c);
 80112ea:	687b      	ldr	r3, [r7, #4]
 80112ec:	0018      	movs	r0, r3
 80112ee:	f7ff f8e2 	bl	80104b6 <HAL_I2C_MemTxCpltCallback>
}
 80112f2:	e038      	b.n	8011366 <I2C_ITMasterCplt+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80112f4:	687b      	ldr	r3, [r7, #4]
 80112f6:	2242      	movs	r2, #66	@ 0x42
 80112f8:	2100      	movs	r1, #0
 80112fa:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 80112fc:	687b      	ldr	r3, [r7, #4]
 80112fe:	2240      	movs	r2, #64	@ 0x40
 8011300:	2100      	movs	r1, #0
 8011302:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8011304:	687b      	ldr	r3, [r7, #4]
 8011306:	0018      	movs	r0, r3
 8011308:	f7ff f89d 	bl	8010446 <HAL_I2C_MasterTxCpltCallback>
}
 801130c:	e02b      	b.n	8011366 <I2C_ITMasterCplt+0x18a>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 801130e:	687b      	ldr	r3, [r7, #4]
 8011310:	2241      	movs	r2, #65	@ 0x41
 8011312:	5c9b      	ldrb	r3, [r3, r2]
 8011314:	b2db      	uxtb	r3, r3
 8011316:	2b22      	cmp	r3, #34	@ 0x22
 8011318:	d125      	bne.n	8011366 <I2C_ITMasterCplt+0x18a>
    hi2c->State = HAL_I2C_STATE_READY;
 801131a:	687b      	ldr	r3, [r7, #4]
 801131c:	2241      	movs	r2, #65	@ 0x41
 801131e:	2120      	movs	r1, #32
 8011320:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8011322:	687b      	ldr	r3, [r7, #4]
 8011324:	2200      	movs	r2, #0
 8011326:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8011328:	687b      	ldr	r3, [r7, #4]
 801132a:	2242      	movs	r2, #66	@ 0x42
 801132c:	5c9b      	ldrb	r3, [r3, r2]
 801132e:	b2db      	uxtb	r3, r3
 8011330:	2b40      	cmp	r3, #64	@ 0x40
 8011332:	d10c      	bne.n	801134e <I2C_ITMasterCplt+0x172>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8011334:	687b      	ldr	r3, [r7, #4]
 8011336:	2242      	movs	r2, #66	@ 0x42
 8011338:	2100      	movs	r1, #0
 801133a:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 801133c:	687b      	ldr	r3, [r7, #4]
 801133e:	2240      	movs	r2, #64	@ 0x40
 8011340:	2100      	movs	r1, #0
 8011342:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MemRxCpltCallback(hi2c);
 8011344:	687b      	ldr	r3, [r7, #4]
 8011346:	0018      	movs	r0, r3
 8011348:	f7ff f8bd 	bl	80104c6 <HAL_I2C_MemRxCpltCallback>
}
 801134c:	e00b      	b.n	8011366 <I2C_ITMasterCplt+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 801134e:	687b      	ldr	r3, [r7, #4]
 8011350:	2242      	movs	r2, #66	@ 0x42
 8011352:	2100      	movs	r1, #0
 8011354:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 8011356:	687b      	ldr	r3, [r7, #4]
 8011358:	2240      	movs	r2, #64	@ 0x40
 801135a:	2100      	movs	r1, #0
 801135c:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MasterRxCpltCallback(hi2c);
 801135e:	687b      	ldr	r3, [r7, #4]
 8011360:	0018      	movs	r0, r3
 8011362:	f7ff f878 	bl	8010456 <HAL_I2C_MasterRxCpltCallback>
}
 8011366:	46c0      	nop			@ (mov r8, r8)
 8011368:	46bd      	mov	sp, r7
 801136a:	b006      	add	sp, #24
 801136c:	bd80      	pop	{r7, pc}
 801136e:	46c0      	nop			@ (mov r8, r8)
 8011370:	fe00e800 	.word	0xfe00e800
 8011374:	ffff0000 	.word	0xffff0000

08011378 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8011378:	b580      	push	{r7, lr}
 801137a:	b086      	sub	sp, #24
 801137c:	af00      	add	r7, sp, #0
 801137e:	6078      	str	r0, [r7, #4]
 8011380:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8011382:	687b      	ldr	r3, [r7, #4]
 8011384:	681b      	ldr	r3, [r3, #0]
 8011386:	681b      	ldr	r3, [r3, #0]
 8011388:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 801138a:	683b      	ldr	r3, [r7, #0]
 801138c:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 801138e:	200f      	movs	r0, #15
 8011390:	183b      	adds	r3, r7, r0
 8011392:	687a      	ldr	r2, [r7, #4]
 8011394:	2141      	movs	r1, #65	@ 0x41
 8011396:	5c52      	ldrb	r2, [r2, r1]
 8011398:	701a      	strb	r2, [r3, #0]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 801139a:	687b      	ldr	r3, [r7, #4]
 801139c:	681b      	ldr	r3, [r3, #0]
 801139e:	2220      	movs	r2, #32
 80113a0:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80113a2:	183b      	adds	r3, r7, r0
 80113a4:	781b      	ldrb	r3, [r3, #0]
 80113a6:	2b21      	cmp	r3, #33	@ 0x21
 80113a8:	d003      	beq.n	80113b2 <I2C_ITSlaveCplt+0x3a>
 80113aa:	183b      	adds	r3, r7, r0
 80113ac:	781b      	ldrb	r3, [r3, #0]
 80113ae:	2b29      	cmp	r3, #41	@ 0x29
 80113b0:	d109      	bne.n	80113c6 <I2C_ITSlaveCplt+0x4e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 80113b2:	4a7b      	ldr	r2, [pc, #492]	@ (80115a0 <I2C_ITSlaveCplt+0x228>)
 80113b4:	687b      	ldr	r3, [r7, #4]
 80113b6:	0011      	movs	r1, r2
 80113b8:	0018      	movs	r0, r3
 80113ba:	f000 fe95 	bl	80120e8 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80113be:	687b      	ldr	r3, [r7, #4]
 80113c0:	2221      	movs	r2, #33	@ 0x21
 80113c2:	631a      	str	r2, [r3, #48]	@ 0x30
 80113c4:	e011      	b.n	80113ea <I2C_ITSlaveCplt+0x72>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80113c6:	220f      	movs	r2, #15
 80113c8:	18bb      	adds	r3, r7, r2
 80113ca:	781b      	ldrb	r3, [r3, #0]
 80113cc:	2b22      	cmp	r3, #34	@ 0x22
 80113ce:	d003      	beq.n	80113d8 <I2C_ITSlaveCplt+0x60>
 80113d0:	18bb      	adds	r3, r7, r2
 80113d2:	781b      	ldrb	r3, [r3, #0]
 80113d4:	2b2a      	cmp	r3, #42	@ 0x2a
 80113d6:	d108      	bne.n	80113ea <I2C_ITSlaveCplt+0x72>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 80113d8:	4a72      	ldr	r2, [pc, #456]	@ (80115a4 <I2C_ITSlaveCplt+0x22c>)
 80113da:	687b      	ldr	r3, [r7, #4]
 80113dc:	0011      	movs	r1, r2
 80113de:	0018      	movs	r0, r3
 80113e0:	f000 fe82 	bl	80120e8 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80113e4:	687b      	ldr	r3, [r7, #4]
 80113e6:	2222      	movs	r2, #34	@ 0x22
 80113e8:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80113ea:	687b      	ldr	r3, [r7, #4]
 80113ec:	681b      	ldr	r3, [r3, #0]
 80113ee:	685a      	ldr	r2, [r3, #4]
 80113f0:	687b      	ldr	r3, [r7, #4]
 80113f2:	681b      	ldr	r3, [r3, #0]
 80113f4:	2180      	movs	r1, #128	@ 0x80
 80113f6:	0209      	lsls	r1, r1, #8
 80113f8:	430a      	orrs	r2, r1
 80113fa:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 80113fc:	687b      	ldr	r3, [r7, #4]
 80113fe:	681b      	ldr	r3, [r3, #0]
 8011400:	685a      	ldr	r2, [r3, #4]
 8011402:	687b      	ldr	r3, [r7, #4]
 8011404:	681b      	ldr	r3, [r3, #0]
 8011406:	4968      	ldr	r1, [pc, #416]	@ (80115a8 <I2C_ITSlaveCplt+0x230>)
 8011408:	400a      	ands	r2, r1
 801140a:	605a      	str	r2, [r3, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 801140c:	687b      	ldr	r3, [r7, #4]
 801140e:	0018      	movs	r0, r3
 8011410:	f000 fa55 	bl	80118be <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8011414:	693a      	ldr	r2, [r7, #16]
 8011416:	2380      	movs	r3, #128	@ 0x80
 8011418:	01db      	lsls	r3, r3, #7
 801141a:	4013      	ands	r3, r2
 801141c:	d013      	beq.n	8011446 <I2C_ITSlaveCplt+0xce>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 801141e:	687b      	ldr	r3, [r7, #4]
 8011420:	681b      	ldr	r3, [r3, #0]
 8011422:	681a      	ldr	r2, [r3, #0]
 8011424:	687b      	ldr	r3, [r7, #4]
 8011426:	681b      	ldr	r3, [r3, #0]
 8011428:	4960      	ldr	r1, [pc, #384]	@ (80115ac <I2C_ITSlaveCplt+0x234>)
 801142a:	400a      	ands	r2, r1
 801142c:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 801142e:	687b      	ldr	r3, [r7, #4]
 8011430:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011432:	2b00      	cmp	r3, #0
 8011434:	d01f      	beq.n	8011476 <I2C_ITSlaveCplt+0xfe>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8011436:	687b      	ldr	r3, [r7, #4]
 8011438:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801143a:	681b      	ldr	r3, [r3, #0]
 801143c:	685b      	ldr	r3, [r3, #4]
 801143e:	b29a      	uxth	r2, r3
 8011440:	687b      	ldr	r3, [r7, #4]
 8011442:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8011444:	e017      	b.n	8011476 <I2C_ITSlaveCplt+0xfe>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8011446:	693a      	ldr	r2, [r7, #16]
 8011448:	2380      	movs	r3, #128	@ 0x80
 801144a:	021b      	lsls	r3, r3, #8
 801144c:	4013      	ands	r3, r2
 801144e:	d012      	beq.n	8011476 <I2C_ITSlaveCplt+0xfe>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8011450:	687b      	ldr	r3, [r7, #4]
 8011452:	681b      	ldr	r3, [r3, #0]
 8011454:	681a      	ldr	r2, [r3, #0]
 8011456:	687b      	ldr	r3, [r7, #4]
 8011458:	681b      	ldr	r3, [r3, #0]
 801145a:	4955      	ldr	r1, [pc, #340]	@ (80115b0 <I2C_ITSlaveCplt+0x238>)
 801145c:	400a      	ands	r2, r1
 801145e:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8011460:	687b      	ldr	r3, [r7, #4]
 8011462:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8011464:	2b00      	cmp	r3, #0
 8011466:	d006      	beq.n	8011476 <I2C_ITSlaveCplt+0xfe>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8011468:	687b      	ldr	r3, [r7, #4]
 801146a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801146c:	681b      	ldr	r3, [r3, #0]
 801146e:	685b      	ldr	r3, [r3, #4]
 8011470:	b29a      	uxth	r2, r3
 8011472:	687b      	ldr	r3, [r7, #4]
 8011474:	855a      	strh	r2, [r3, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8011476:	697b      	ldr	r3, [r7, #20]
 8011478:	2204      	movs	r2, #4
 801147a:	4013      	ands	r3, r2
 801147c:	d020      	beq.n	80114c0 <I2C_ITSlaveCplt+0x148>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 801147e:	697b      	ldr	r3, [r7, #20]
 8011480:	2204      	movs	r2, #4
 8011482:	4393      	bics	r3, r2
 8011484:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8011486:	687b      	ldr	r3, [r7, #4]
 8011488:	681b      	ldr	r3, [r3, #0]
 801148a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801148c:	687b      	ldr	r3, [r7, #4]
 801148e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011490:	b2d2      	uxtb	r2, r2
 8011492:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8011494:	687b      	ldr	r3, [r7, #4]
 8011496:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011498:	1c5a      	adds	r2, r3, #1
 801149a:	687b      	ldr	r3, [r7, #4]
 801149c:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 801149e:	687b      	ldr	r3, [r7, #4]
 80114a0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80114a2:	2b00      	cmp	r3, #0
 80114a4:	d00c      	beq.n	80114c0 <I2C_ITSlaveCplt+0x148>
    {
      hi2c->XferSize--;
 80114a6:	687b      	ldr	r3, [r7, #4]
 80114a8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80114aa:	3b01      	subs	r3, #1
 80114ac:	b29a      	uxth	r2, r3
 80114ae:	687b      	ldr	r3, [r7, #4]
 80114b0:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80114b2:	687b      	ldr	r3, [r7, #4]
 80114b4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80114b6:	b29b      	uxth	r3, r3
 80114b8:	3b01      	subs	r3, #1
 80114ba:	b29a      	uxth	r2, r3
 80114bc:	687b      	ldr	r3, [r7, #4]
 80114be:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80114c0:	687b      	ldr	r3, [r7, #4]
 80114c2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80114c4:	b29b      	uxth	r3, r3
 80114c6:	2b00      	cmp	r3, #0
 80114c8:	d005      	beq.n	80114d6 <I2C_ITSlaveCplt+0x15e>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80114ca:	687b      	ldr	r3, [r7, #4]
 80114cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80114ce:	2204      	movs	r2, #4
 80114d0:	431a      	orrs	r2, r3
 80114d2:	687b      	ldr	r3, [r7, #4]
 80114d4:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 80114d6:	687b      	ldr	r3, [r7, #4]
 80114d8:	2242      	movs	r2, #66	@ 0x42
 80114da:	2100      	movs	r1, #0
 80114dc:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 80114de:	687b      	ldr	r3, [r7, #4]
 80114e0:	2200      	movs	r2, #0
 80114e2:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80114e4:	687b      	ldr	r3, [r7, #4]
 80114e6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80114e8:	2b00      	cmp	r3, #0
 80114ea:	d013      	beq.n	8011514 <I2C_ITSlaveCplt+0x19c>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 80114ec:	687b      	ldr	r3, [r7, #4]
 80114ee:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80114f0:	687b      	ldr	r3, [r7, #4]
 80114f2:	0011      	movs	r1, r2
 80114f4:	0018      	movs	r0, r3
 80114f6:	f000 f8b7 	bl	8011668 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80114fa:	687b      	ldr	r3, [r7, #4]
 80114fc:	2241      	movs	r2, #65	@ 0x41
 80114fe:	5c9b      	ldrb	r3, [r3, r2]
 8011500:	b2db      	uxtb	r3, r3
 8011502:	2b28      	cmp	r3, #40	@ 0x28
 8011504:	d147      	bne.n	8011596 <I2C_ITSlaveCplt+0x21e>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8011506:	697a      	ldr	r2, [r7, #20]
 8011508:	687b      	ldr	r3, [r7, #4]
 801150a:	0011      	movs	r1, r2
 801150c:	0018      	movs	r0, r3
 801150e:	f000 f853 	bl	80115b8 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8011512:	e040      	b.n	8011596 <I2C_ITSlaveCplt+0x21e>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8011514:	687b      	ldr	r3, [r7, #4]
 8011516:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011518:	4a26      	ldr	r2, [pc, #152]	@ (80115b4 <I2C_ITSlaveCplt+0x23c>)
 801151a:	4293      	cmp	r3, r2
 801151c:	d016      	beq.n	801154c <I2C_ITSlaveCplt+0x1d4>
    I2C_ITSlaveSeqCplt(hi2c);
 801151e:	687b      	ldr	r3, [r7, #4]
 8011520:	0018      	movs	r0, r3
 8011522:	f7ff fdf7 	bl	8011114 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8011526:	687b      	ldr	r3, [r7, #4]
 8011528:	4a22      	ldr	r2, [pc, #136]	@ (80115b4 <I2C_ITSlaveCplt+0x23c>)
 801152a:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 801152c:	687b      	ldr	r3, [r7, #4]
 801152e:	2241      	movs	r2, #65	@ 0x41
 8011530:	2120      	movs	r1, #32
 8011532:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8011534:	687b      	ldr	r3, [r7, #4]
 8011536:	2200      	movs	r2, #0
 8011538:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 801153a:	687b      	ldr	r3, [r7, #4]
 801153c:	2240      	movs	r2, #64	@ 0x40
 801153e:	2100      	movs	r1, #0
 8011540:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ListenCpltCallback(hi2c);
 8011542:	687b      	ldr	r3, [r7, #4]
 8011544:	0018      	movs	r0, r3
 8011546:	f7fe ffae 	bl	80104a6 <HAL_I2C_ListenCpltCallback>
}
 801154a:	e024      	b.n	8011596 <I2C_ITSlaveCplt+0x21e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 801154c:	687b      	ldr	r3, [r7, #4]
 801154e:	2241      	movs	r2, #65	@ 0x41
 8011550:	5c9b      	ldrb	r3, [r3, r2]
 8011552:	b2db      	uxtb	r3, r3
 8011554:	2b22      	cmp	r3, #34	@ 0x22
 8011556:	d10f      	bne.n	8011578 <I2C_ITSlaveCplt+0x200>
    hi2c->State = HAL_I2C_STATE_READY;
 8011558:	687b      	ldr	r3, [r7, #4]
 801155a:	2241      	movs	r2, #65	@ 0x41
 801155c:	2120      	movs	r1, #32
 801155e:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8011560:	687b      	ldr	r3, [r7, #4]
 8011562:	2200      	movs	r2, #0
 8011564:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8011566:	687b      	ldr	r3, [r7, #4]
 8011568:	2240      	movs	r2, #64	@ 0x40
 801156a:	2100      	movs	r1, #0
 801156c:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 801156e:	687b      	ldr	r3, [r7, #4]
 8011570:	0018      	movs	r0, r3
 8011572:	f7fe ff80 	bl	8010476 <HAL_I2C_SlaveRxCpltCallback>
}
 8011576:	e00e      	b.n	8011596 <I2C_ITSlaveCplt+0x21e>
    hi2c->State = HAL_I2C_STATE_READY;
 8011578:	687b      	ldr	r3, [r7, #4]
 801157a:	2241      	movs	r2, #65	@ 0x41
 801157c:	2120      	movs	r1, #32
 801157e:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8011580:	687b      	ldr	r3, [r7, #4]
 8011582:	2200      	movs	r2, #0
 8011584:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8011586:	687b      	ldr	r3, [r7, #4]
 8011588:	2240      	movs	r2, #64	@ 0x40
 801158a:	2100      	movs	r1, #0
 801158c:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 801158e:	687b      	ldr	r3, [r7, #4]
 8011590:	0018      	movs	r0, r3
 8011592:	f7fe ff68 	bl	8010466 <HAL_I2C_SlaveTxCpltCallback>
}
 8011596:	46c0      	nop			@ (mov r8, r8)
 8011598:	46bd      	mov	sp, r7
 801159a:	b006      	add	sp, #24
 801159c:	bd80      	pop	{r7, pc}
 801159e:	46c0      	nop			@ (mov r8, r8)
 80115a0:	00008001 	.word	0x00008001
 80115a4:	00008002 	.word	0x00008002
 80115a8:	fe00e800 	.word	0xfe00e800
 80115ac:	ffffbfff 	.word	0xffffbfff
 80115b0:	ffff7fff 	.word	0xffff7fff
 80115b4:	ffff0000 	.word	0xffff0000

080115b8 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80115b8:	b580      	push	{r7, lr}
 80115ba:	b082      	sub	sp, #8
 80115bc:	af00      	add	r7, sp, #0
 80115be:	6078      	str	r0, [r7, #4]
 80115c0:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80115c2:	687b      	ldr	r3, [r7, #4]
 80115c4:	4a26      	ldr	r2, [pc, #152]	@ (8011660 <I2C_ITListenCplt+0xa8>)
 80115c6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 80115c8:	687b      	ldr	r3, [r7, #4]
 80115ca:	2200      	movs	r2, #0
 80115cc:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 80115ce:	687b      	ldr	r3, [r7, #4]
 80115d0:	2241      	movs	r2, #65	@ 0x41
 80115d2:	2120      	movs	r1, #32
 80115d4:	5499      	strb	r1, [r3, r2]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80115d6:	687b      	ldr	r3, [r7, #4]
 80115d8:	2242      	movs	r2, #66	@ 0x42
 80115da:	2100      	movs	r1, #0
 80115dc:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 80115de:	687b      	ldr	r3, [r7, #4]
 80115e0:	2200      	movs	r2, #0
 80115e2:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 80115e4:	683b      	ldr	r3, [r7, #0]
 80115e6:	2204      	movs	r2, #4
 80115e8:	4013      	ands	r3, r2
 80115ea:	d022      	beq.n	8011632 <I2C_ITListenCplt+0x7a>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80115ec:	687b      	ldr	r3, [r7, #4]
 80115ee:	681b      	ldr	r3, [r3, #0]
 80115f0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80115f2:	687b      	ldr	r3, [r7, #4]
 80115f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80115f6:	b2d2      	uxtb	r2, r2
 80115f8:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80115fa:	687b      	ldr	r3, [r7, #4]
 80115fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80115fe:	1c5a      	adds	r2, r3, #1
 8011600:	687b      	ldr	r3, [r7, #4]
 8011602:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8011604:	687b      	ldr	r3, [r7, #4]
 8011606:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8011608:	2b00      	cmp	r3, #0
 801160a:	d012      	beq.n	8011632 <I2C_ITListenCplt+0x7a>
    {
      hi2c->XferSize--;
 801160c:	687b      	ldr	r3, [r7, #4]
 801160e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8011610:	3b01      	subs	r3, #1
 8011612:	b29a      	uxth	r2, r3
 8011614:	687b      	ldr	r3, [r7, #4]
 8011616:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8011618:	687b      	ldr	r3, [r7, #4]
 801161a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801161c:	b29b      	uxth	r3, r3
 801161e:	3b01      	subs	r3, #1
 8011620:	b29a      	uxth	r2, r3
 8011622:	687b      	ldr	r3, [r7, #4]
 8011624:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8011626:	687b      	ldr	r3, [r7, #4]
 8011628:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801162a:	2204      	movs	r2, #4
 801162c:	431a      	orrs	r2, r3
 801162e:	687b      	ldr	r3, [r7, #4]
 8011630:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8011632:	4a0c      	ldr	r2, [pc, #48]	@ (8011664 <I2C_ITListenCplt+0xac>)
 8011634:	687b      	ldr	r3, [r7, #4]
 8011636:	0011      	movs	r1, r2
 8011638:	0018      	movs	r0, r3
 801163a:	f000 fd55 	bl	80120e8 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 801163e:	687b      	ldr	r3, [r7, #4]
 8011640:	681b      	ldr	r3, [r3, #0]
 8011642:	2210      	movs	r2, #16
 8011644:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8011646:	687b      	ldr	r3, [r7, #4]
 8011648:	2240      	movs	r2, #64	@ 0x40
 801164a:	2100      	movs	r1, #0
 801164c:	5499      	strb	r1, [r3, r2]

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 801164e:	687b      	ldr	r3, [r7, #4]
 8011650:	0018      	movs	r0, r3
 8011652:	f7fe ff28 	bl	80104a6 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8011656:	46c0      	nop			@ (mov r8, r8)
 8011658:	46bd      	mov	sp, r7
 801165a:	b002      	add	sp, #8
 801165c:	bd80      	pop	{r7, pc}
 801165e:	46c0      	nop			@ (mov r8, r8)
 8011660:	ffff0000 	.word	0xffff0000
 8011664:	00008003 	.word	0x00008003

08011668 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8011668:	b580      	push	{r7, lr}
 801166a:	b084      	sub	sp, #16
 801166c:	af00      	add	r7, sp, #0
 801166e:	6078      	str	r0, [r7, #4]
 8011670:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8011672:	200f      	movs	r0, #15
 8011674:	183b      	adds	r3, r7, r0
 8011676:	687a      	ldr	r2, [r7, #4]
 8011678:	2141      	movs	r1, #65	@ 0x41
 801167a:	5c52      	ldrb	r2, [r2, r1]
 801167c:	701a      	strb	r2, [r3, #0]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 801167e:	687b      	ldr	r3, [r7, #4]
 8011680:	2242      	movs	r2, #66	@ 0x42
 8011682:	2100      	movs	r1, #0
 8011684:	5499      	strb	r1, [r3, r2]
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8011686:	687b      	ldr	r3, [r7, #4]
 8011688:	4a72      	ldr	r2, [pc, #456]	@ (8011854 <I2C_ITError+0x1ec>)
 801168a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 801168c:	687b      	ldr	r3, [r7, #4]
 801168e:	2200      	movs	r2, #0
 8011690:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8011692:	687b      	ldr	r3, [r7, #4]
 8011694:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8011696:	683b      	ldr	r3, [r7, #0]
 8011698:	431a      	orrs	r2, r3
 801169a:	687b      	ldr	r3, [r7, #4]
 801169c:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 801169e:	183b      	adds	r3, r7, r0
 80116a0:	781b      	ldrb	r3, [r3, #0]
 80116a2:	2b28      	cmp	r3, #40	@ 0x28
 80116a4:	d007      	beq.n	80116b6 <I2C_ITError+0x4e>
 80116a6:	183b      	adds	r3, r7, r0
 80116a8:	781b      	ldrb	r3, [r3, #0]
 80116aa:	2b29      	cmp	r3, #41	@ 0x29
 80116ac:	d003      	beq.n	80116b6 <I2C_ITError+0x4e>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 80116ae:	183b      	adds	r3, r7, r0
 80116b0:	781b      	ldrb	r3, [r3, #0]
 80116b2:	2b2a      	cmp	r3, #42	@ 0x2a
 80116b4:	d10c      	bne.n	80116d0 <I2C_ITError+0x68>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80116b6:	687b      	ldr	r3, [r7, #4]
 80116b8:	2103      	movs	r1, #3
 80116ba:	0018      	movs	r0, r3
 80116bc:	f000 fd14 	bl	80120e8 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80116c0:	687b      	ldr	r3, [r7, #4]
 80116c2:	2241      	movs	r2, #65	@ 0x41
 80116c4:	2128      	movs	r1, #40	@ 0x28
 80116c6:	5499      	strb	r1, [r3, r2]
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 80116c8:	687b      	ldr	r3, [r7, #4]
 80116ca:	4a63      	ldr	r2, [pc, #396]	@ (8011858 <I2C_ITError+0x1f0>)
 80116cc:	635a      	str	r2, [r3, #52]	@ 0x34
 80116ce:	e032      	b.n	8011736 <I2C_ITError+0xce>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80116d0:	4a62      	ldr	r2, [pc, #392]	@ (801185c <I2C_ITError+0x1f4>)
 80116d2:	687b      	ldr	r3, [r7, #4]
 80116d4:	0011      	movs	r1, r2
 80116d6:	0018      	movs	r0, r3
 80116d8:	f000 fd06 	bl	80120e8 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80116dc:	687b      	ldr	r3, [r7, #4]
 80116de:	0018      	movs	r0, r3
 80116e0:	f000 f8ed 	bl	80118be <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 80116e4:	687b      	ldr	r3, [r7, #4]
 80116e6:	2241      	movs	r2, #65	@ 0x41
 80116e8:	5c9b      	ldrb	r3, [r3, r2]
 80116ea:	b2db      	uxtb	r3, r3
 80116ec:	2b60      	cmp	r3, #96	@ 0x60
 80116ee:	d01f      	beq.n	8011730 <I2C_ITError+0xc8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 80116f0:	687b      	ldr	r3, [r7, #4]
 80116f2:	2241      	movs	r2, #65	@ 0x41
 80116f4:	2120      	movs	r1, #32
 80116f6:	5499      	strb	r1, [r3, r2]

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80116f8:	687b      	ldr	r3, [r7, #4]
 80116fa:	681b      	ldr	r3, [r3, #0]
 80116fc:	699b      	ldr	r3, [r3, #24]
 80116fe:	2220      	movs	r2, #32
 8011700:	4013      	ands	r3, r2
 8011702:	2b20      	cmp	r3, #32
 8011704:	d114      	bne.n	8011730 <I2C_ITError+0xc8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8011706:	687b      	ldr	r3, [r7, #4]
 8011708:	681b      	ldr	r3, [r3, #0]
 801170a:	699b      	ldr	r3, [r3, #24]
 801170c:	2210      	movs	r2, #16
 801170e:	4013      	ands	r3, r2
 8011710:	2b10      	cmp	r3, #16
 8011712:	d109      	bne.n	8011728 <I2C_ITError+0xc0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8011714:	687b      	ldr	r3, [r7, #4]
 8011716:	681b      	ldr	r3, [r3, #0]
 8011718:	2210      	movs	r2, #16
 801171a:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 801171c:	687b      	ldr	r3, [r7, #4]
 801171e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8011720:	2204      	movs	r2, #4
 8011722:	431a      	orrs	r2, r3
 8011724:	687b      	ldr	r3, [r7, #4]
 8011726:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8011728:	687b      	ldr	r3, [r7, #4]
 801172a:	681b      	ldr	r3, [r3, #0]
 801172c:	2220      	movs	r2, #32
 801172e:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 8011730:	687b      	ldr	r3, [r7, #4]
 8011732:	2200      	movs	r2, #0
 8011734:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8011736:	687b      	ldr	r3, [r7, #4]
 8011738:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801173a:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 801173c:	687b      	ldr	r3, [r7, #4]
 801173e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011740:	2b00      	cmp	r3, #0
 8011742:	d03b      	beq.n	80117bc <I2C_ITError+0x154>
 8011744:	68bb      	ldr	r3, [r7, #8]
 8011746:	2b11      	cmp	r3, #17
 8011748:	d002      	beq.n	8011750 <I2C_ITError+0xe8>
 801174a:	68bb      	ldr	r3, [r7, #8]
 801174c:	2b21      	cmp	r3, #33	@ 0x21
 801174e:	d135      	bne.n	80117bc <I2C_ITError+0x154>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8011750:	687b      	ldr	r3, [r7, #4]
 8011752:	681b      	ldr	r3, [r3, #0]
 8011754:	681a      	ldr	r2, [r3, #0]
 8011756:	2380      	movs	r3, #128	@ 0x80
 8011758:	01db      	lsls	r3, r3, #7
 801175a:	401a      	ands	r2, r3
 801175c:	2380      	movs	r3, #128	@ 0x80
 801175e:	01db      	lsls	r3, r3, #7
 8011760:	429a      	cmp	r2, r3
 8011762:	d107      	bne.n	8011774 <I2C_ITError+0x10c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8011764:	687b      	ldr	r3, [r7, #4]
 8011766:	681b      	ldr	r3, [r3, #0]
 8011768:	681a      	ldr	r2, [r3, #0]
 801176a:	687b      	ldr	r3, [r7, #4]
 801176c:	681b      	ldr	r3, [r3, #0]
 801176e:	493c      	ldr	r1, [pc, #240]	@ (8011860 <I2C_ITError+0x1f8>)
 8011770:	400a      	ands	r2, r1
 8011772:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8011774:	687b      	ldr	r3, [r7, #4]
 8011776:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011778:	0018      	movs	r0, r3
 801177a:	f7fd fd62 	bl	800f242 <HAL_DMA_GetState>
 801177e:	0003      	movs	r3, r0
 8011780:	2b01      	cmp	r3, #1
 8011782:	d016      	beq.n	80117b2 <I2C_ITError+0x14a>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8011784:	687b      	ldr	r3, [r7, #4]
 8011786:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011788:	4a36      	ldr	r2, [pc, #216]	@ (8011864 <I2C_ITError+0x1fc>)
 801178a:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 801178c:	687b      	ldr	r3, [r7, #4]
 801178e:	2240      	movs	r2, #64	@ 0x40
 8011790:	2100      	movs	r1, #0
 8011792:	5499      	strb	r1, [r3, r2]

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8011794:	687b      	ldr	r3, [r7, #4]
 8011796:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011798:	0018      	movs	r0, r3
 801179a:	f7fd fc5d 	bl	800f058 <HAL_DMA_Abort_IT>
 801179e:	1e03      	subs	r3, r0, #0
 80117a0:	d051      	beq.n	8011846 <I2C_ITError+0x1de>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80117a2:	687b      	ldr	r3, [r7, #4]
 80117a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80117a6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80117a8:	687b      	ldr	r3, [r7, #4]
 80117aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80117ac:	0018      	movs	r0, r3
 80117ae:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80117b0:	e049      	b.n	8011846 <I2C_ITError+0x1de>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80117b2:	687b      	ldr	r3, [r7, #4]
 80117b4:	0018      	movs	r0, r3
 80117b6:	f000 f859 	bl	801186c <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80117ba:	e044      	b.n	8011846 <I2C_ITError+0x1de>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 80117bc:	687b      	ldr	r3, [r7, #4]
 80117be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80117c0:	2b00      	cmp	r3, #0
 80117c2:	d03b      	beq.n	801183c <I2C_ITError+0x1d4>
 80117c4:	68bb      	ldr	r3, [r7, #8]
 80117c6:	2b12      	cmp	r3, #18
 80117c8:	d002      	beq.n	80117d0 <I2C_ITError+0x168>
 80117ca:	68bb      	ldr	r3, [r7, #8]
 80117cc:	2b22      	cmp	r3, #34	@ 0x22
 80117ce:	d135      	bne.n	801183c <I2C_ITError+0x1d4>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 80117d0:	687b      	ldr	r3, [r7, #4]
 80117d2:	681b      	ldr	r3, [r3, #0]
 80117d4:	681a      	ldr	r2, [r3, #0]
 80117d6:	2380      	movs	r3, #128	@ 0x80
 80117d8:	021b      	lsls	r3, r3, #8
 80117da:	401a      	ands	r2, r3
 80117dc:	2380      	movs	r3, #128	@ 0x80
 80117de:	021b      	lsls	r3, r3, #8
 80117e0:	429a      	cmp	r2, r3
 80117e2:	d107      	bne.n	80117f4 <I2C_ITError+0x18c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80117e4:	687b      	ldr	r3, [r7, #4]
 80117e6:	681b      	ldr	r3, [r3, #0]
 80117e8:	681a      	ldr	r2, [r3, #0]
 80117ea:	687b      	ldr	r3, [r7, #4]
 80117ec:	681b      	ldr	r3, [r3, #0]
 80117ee:	491e      	ldr	r1, [pc, #120]	@ (8011868 <I2C_ITError+0x200>)
 80117f0:	400a      	ands	r2, r1
 80117f2:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80117f4:	687b      	ldr	r3, [r7, #4]
 80117f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80117f8:	0018      	movs	r0, r3
 80117fa:	f7fd fd22 	bl	800f242 <HAL_DMA_GetState>
 80117fe:	0003      	movs	r3, r0
 8011800:	2b01      	cmp	r3, #1
 8011802:	d016      	beq.n	8011832 <I2C_ITError+0x1ca>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8011804:	687b      	ldr	r3, [r7, #4]
 8011806:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8011808:	4a16      	ldr	r2, [pc, #88]	@ (8011864 <I2C_ITError+0x1fc>)
 801180a:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 801180c:	687b      	ldr	r3, [r7, #4]
 801180e:	2240      	movs	r2, #64	@ 0x40
 8011810:	2100      	movs	r1, #0
 8011812:	5499      	strb	r1, [r3, r2]

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8011814:	687b      	ldr	r3, [r7, #4]
 8011816:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8011818:	0018      	movs	r0, r3
 801181a:	f7fd fc1d 	bl	800f058 <HAL_DMA_Abort_IT>
 801181e:	1e03      	subs	r3, r0, #0
 8011820:	d013      	beq.n	801184a <I2C_ITError+0x1e2>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8011822:	687b      	ldr	r3, [r7, #4]
 8011824:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8011826:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8011828:	687b      	ldr	r3, [r7, #4]
 801182a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801182c:	0018      	movs	r0, r3
 801182e:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8011830:	e00b      	b.n	801184a <I2C_ITError+0x1e2>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8011832:	687b      	ldr	r3, [r7, #4]
 8011834:	0018      	movs	r0, r3
 8011836:	f000 f819 	bl	801186c <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 801183a:	e006      	b.n	801184a <I2C_ITError+0x1e2>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 801183c:	687b      	ldr	r3, [r7, #4]
 801183e:	0018      	movs	r0, r3
 8011840:	f000 f814 	bl	801186c <I2C_TreatErrorCallback>
  }
}
 8011844:	e002      	b.n	801184c <I2C_ITError+0x1e4>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8011846:	46c0      	nop			@ (mov r8, r8)
 8011848:	e000      	b.n	801184c <I2C_ITError+0x1e4>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 801184a:	46c0      	nop			@ (mov r8, r8)
}
 801184c:	46c0      	nop			@ (mov r8, r8)
 801184e:	46bd      	mov	sp, r7
 8011850:	b004      	add	sp, #16
 8011852:	bd80      	pop	{r7, pc}
 8011854:	ffff0000 	.word	0xffff0000
 8011858:	0801074d 	.word	0x0801074d
 801185c:	00008003 	.word	0x00008003
 8011860:	ffffbfff 	.word	0xffffbfff
 8011864:	08011a77 	.word	0x08011a77
 8011868:	ffff7fff 	.word	0xffff7fff

0801186c <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 801186c:	b580      	push	{r7, lr}
 801186e:	b082      	sub	sp, #8
 8011870:	af00      	add	r7, sp, #0
 8011872:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8011874:	687b      	ldr	r3, [r7, #4]
 8011876:	2241      	movs	r2, #65	@ 0x41
 8011878:	5c9b      	ldrb	r3, [r3, r2]
 801187a:	b2db      	uxtb	r3, r3
 801187c:	2b60      	cmp	r3, #96	@ 0x60
 801187e:	d10f      	bne.n	80118a0 <I2C_TreatErrorCallback+0x34>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8011880:	687b      	ldr	r3, [r7, #4]
 8011882:	2241      	movs	r2, #65	@ 0x41
 8011884:	2120      	movs	r1, #32
 8011886:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8011888:	687b      	ldr	r3, [r7, #4]
 801188a:	2200      	movs	r2, #0
 801188c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 801188e:	687b      	ldr	r3, [r7, #4]
 8011890:	2240      	movs	r2, #64	@ 0x40
 8011892:	2100      	movs	r1, #0
 8011894:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8011896:	687b      	ldr	r3, [r7, #4]
 8011898:	0018      	movs	r0, r3
 801189a:	f7fe fe24 	bl	80104e6 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 801189e:	e00a      	b.n	80118b6 <I2C_TreatErrorCallback+0x4a>
    hi2c->PreviousState = I2C_STATE_NONE;
 80118a0:	687b      	ldr	r3, [r7, #4]
 80118a2:	2200      	movs	r2, #0
 80118a4:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80118a6:	687b      	ldr	r3, [r7, #4]
 80118a8:	2240      	movs	r2, #64	@ 0x40
 80118aa:	2100      	movs	r1, #0
 80118ac:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ErrorCallback(hi2c);
 80118ae:	687b      	ldr	r3, [r7, #4]
 80118b0:	0018      	movs	r0, r3
 80118b2:	f7fe fe10 	bl	80104d6 <HAL_I2C_ErrorCallback>
}
 80118b6:	46c0      	nop			@ (mov r8, r8)
 80118b8:	46bd      	mov	sp, r7
 80118ba:	b002      	add	sp, #8
 80118bc:	bd80      	pop	{r7, pc}

080118be <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80118be:	b580      	push	{r7, lr}
 80118c0:	b082      	sub	sp, #8
 80118c2:	af00      	add	r7, sp, #0
 80118c4:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80118c6:	687b      	ldr	r3, [r7, #4]
 80118c8:	681b      	ldr	r3, [r3, #0]
 80118ca:	699b      	ldr	r3, [r3, #24]
 80118cc:	2202      	movs	r2, #2
 80118ce:	4013      	ands	r3, r2
 80118d0:	2b02      	cmp	r3, #2
 80118d2:	d103      	bne.n	80118dc <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80118d4:	687b      	ldr	r3, [r7, #4]
 80118d6:	681b      	ldr	r3, [r3, #0]
 80118d8:	2200      	movs	r2, #0
 80118da:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80118dc:	687b      	ldr	r3, [r7, #4]
 80118de:	681b      	ldr	r3, [r3, #0]
 80118e0:	699b      	ldr	r3, [r3, #24]
 80118e2:	2201      	movs	r2, #1
 80118e4:	4013      	ands	r3, r2
 80118e6:	2b01      	cmp	r3, #1
 80118e8:	d007      	beq.n	80118fa <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80118ea:	687b      	ldr	r3, [r7, #4]
 80118ec:	681b      	ldr	r3, [r3, #0]
 80118ee:	699a      	ldr	r2, [r3, #24]
 80118f0:	687b      	ldr	r3, [r7, #4]
 80118f2:	681b      	ldr	r3, [r3, #0]
 80118f4:	2101      	movs	r1, #1
 80118f6:	430a      	orrs	r2, r1
 80118f8:	619a      	str	r2, [r3, #24]
  }
}
 80118fa:	46c0      	nop			@ (mov r8, r8)
 80118fc:	46bd      	mov	sp, r7
 80118fe:	b002      	add	sp, #8
 8011900:	bd80      	pop	{r7, pc}
	...

08011904 <I2C_DMAMasterTransmitCplt>:
  * @brief  DMA I2C master transmit process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8011904:	b580      	push	{r7, lr}
 8011906:	b084      	sub	sp, #16
 8011908:	af00      	add	r7, sp, #0
 801190a:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 801190c:	687b      	ldr	r3, [r7, #4]
 801190e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011910:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8011912:	68fb      	ldr	r3, [r7, #12]
 8011914:	681b      	ldr	r3, [r3, #0]
 8011916:	681a      	ldr	r2, [r3, #0]
 8011918:	68fb      	ldr	r3, [r7, #12]
 801191a:	681b      	ldr	r3, [r3, #0]
 801191c:	4920      	ldr	r1, [pc, #128]	@ (80119a0 <I2C_DMAMasterTransmitCplt+0x9c>)
 801191e:	400a      	ands	r2, r1
 8011920:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 8011922:	68fb      	ldr	r3, [r7, #12]
 8011924:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8011926:	b29b      	uxth	r3, r3
 8011928:	2b00      	cmp	r3, #0
 801192a:	d105      	bne.n	8011938 <I2C_DMAMasterTransmitCplt+0x34>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 801192c:	68fb      	ldr	r3, [r7, #12]
 801192e:	2120      	movs	r1, #32
 8011930:	0018      	movs	r0, r3
 8011932:	f000 fb4b 	bl	8011fcc <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 8011936:	e02e      	b.n	8011996 <I2C_DMAMasterTransmitCplt+0x92>
    hi2c->pBuffPtr += hi2c->XferSize;
 8011938:	68fb      	ldr	r3, [r7, #12]
 801193a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801193c:	68fa      	ldr	r2, [r7, #12]
 801193e:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 8011940:	189a      	adds	r2, r3, r2
 8011942:	68fb      	ldr	r3, [r7, #12]
 8011944:	625a      	str	r2, [r3, #36]	@ 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8011946:	68fb      	ldr	r3, [r7, #12]
 8011948:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801194a:	b29b      	uxth	r3, r3
 801194c:	2bff      	cmp	r3, #255	@ 0xff
 801194e:	d903      	bls.n	8011958 <I2C_DMAMasterTransmitCplt+0x54>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8011950:	68fb      	ldr	r3, [r7, #12]
 8011952:	22ff      	movs	r2, #255	@ 0xff
 8011954:	851a      	strh	r2, [r3, #40]	@ 0x28
 8011956:	e004      	b.n	8011962 <I2C_DMAMasterTransmitCplt+0x5e>
      hi2c->XferSize = hi2c->XferCount;
 8011958:	68fb      	ldr	r3, [r7, #12]
 801195a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801195c:	b29a      	uxth	r2, r3
 801195e:	68fb      	ldr	r3, [r7, #12]
 8011960:	851a      	strh	r2, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 8011962:	68fb      	ldr	r3, [r7, #12]
 8011964:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8011966:	68fb      	ldr	r3, [r7, #12]
 8011968:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801196a:	0019      	movs	r1, r3
 801196c:	68fb      	ldr	r3, [r7, #12]
 801196e:	681b      	ldr	r3, [r3, #0]
 8011970:	3328      	adds	r3, #40	@ 0x28
 8011972:	001a      	movs	r2, r3
                         hi2c->XferSize) != HAL_OK)
 8011974:	68fb      	ldr	r3, [r7, #12]
 8011976:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 8011978:	f7fd fac8 	bl	800ef0c <HAL_DMA_Start_IT>
 801197c:	1e03      	subs	r3, r0, #0
 801197e:	d005      	beq.n	801198c <I2C_DMAMasterTransmitCplt+0x88>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8011980:	68fb      	ldr	r3, [r7, #12]
 8011982:	2110      	movs	r1, #16
 8011984:	0018      	movs	r0, r3
 8011986:	f7ff fe6f 	bl	8011668 <I2C_ITError>
}
 801198a:	e004      	b.n	8011996 <I2C_DMAMasterTransmitCplt+0x92>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 801198c:	68fb      	ldr	r3, [r7, #12]
 801198e:	2140      	movs	r1, #64	@ 0x40
 8011990:	0018      	movs	r0, r3
 8011992:	f000 fb1b 	bl	8011fcc <I2C_Enable_IRQ>
}
 8011996:	46c0      	nop			@ (mov r8, r8)
 8011998:	46bd      	mov	sp, r7
 801199a:	b004      	add	sp, #16
 801199c:	bd80      	pop	{r7, pc}
 801199e:	46c0      	nop			@ (mov r8, r8)
 80119a0:	ffffbfff 	.word	0xffffbfff

080119a4 <I2C_DMAMasterReceiveCplt>:
  * @brief DMA I2C master receive process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80119a4:	b580      	push	{r7, lr}
 80119a6:	b084      	sub	sp, #16
 80119a8:	af00      	add	r7, sp, #0
 80119aa:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80119ac:	687b      	ldr	r3, [r7, #4]
 80119ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80119b0:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80119b2:	68fb      	ldr	r3, [r7, #12]
 80119b4:	681b      	ldr	r3, [r3, #0]
 80119b6:	681a      	ldr	r2, [r3, #0]
 80119b8:	68fb      	ldr	r3, [r7, #12]
 80119ba:	681b      	ldr	r3, [r3, #0]
 80119bc:	4920      	ldr	r1, [pc, #128]	@ (8011a40 <I2C_DMAMasterReceiveCplt+0x9c>)
 80119be:	400a      	ands	r2, r1
 80119c0:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 80119c2:	68fb      	ldr	r3, [r7, #12]
 80119c4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80119c6:	b29b      	uxth	r3, r3
 80119c8:	2b00      	cmp	r3, #0
 80119ca:	d105      	bne.n	80119d8 <I2C_DMAMasterReceiveCplt+0x34>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 80119cc:	68fb      	ldr	r3, [r7, #12]
 80119ce:	2120      	movs	r1, #32
 80119d0:	0018      	movs	r0, r3
 80119d2:	f000 fafb 	bl	8011fcc <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 80119d6:	e02e      	b.n	8011a36 <I2C_DMAMasterReceiveCplt+0x92>
    hi2c->pBuffPtr += hi2c->XferSize;
 80119d8:	68fb      	ldr	r3, [r7, #12]
 80119da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80119dc:	68fa      	ldr	r2, [r7, #12]
 80119de:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 80119e0:	189a      	adds	r2, r3, r2
 80119e2:	68fb      	ldr	r3, [r7, #12]
 80119e4:	625a      	str	r2, [r3, #36]	@ 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80119e6:	68fb      	ldr	r3, [r7, #12]
 80119e8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80119ea:	b29b      	uxth	r3, r3
 80119ec:	2bff      	cmp	r3, #255	@ 0xff
 80119ee:	d903      	bls.n	80119f8 <I2C_DMAMasterReceiveCplt+0x54>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80119f0:	68fb      	ldr	r3, [r7, #12]
 80119f2:	22ff      	movs	r2, #255	@ 0xff
 80119f4:	851a      	strh	r2, [r3, #40]	@ 0x28
 80119f6:	e004      	b.n	8011a02 <I2C_DMAMasterReceiveCplt+0x5e>
      hi2c->XferSize = hi2c->XferCount;
 80119f8:	68fb      	ldr	r3, [r7, #12]
 80119fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80119fc:	b29a      	uxth	r2, r3
 80119fe:	68fb      	ldr	r3, [r7, #12]
 8011a00:	851a      	strh	r2, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 8011a02:	68fb      	ldr	r3, [r7, #12]
 8011a04:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8011a06:	68fb      	ldr	r3, [r7, #12]
 8011a08:	681b      	ldr	r3, [r3, #0]
 8011a0a:	3324      	adds	r3, #36	@ 0x24
 8011a0c:	0019      	movs	r1, r3
 8011a0e:	68fb      	ldr	r3, [r7, #12]
 8011a10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011a12:	001a      	movs	r2, r3
                         hi2c->XferSize) != HAL_OK)
 8011a14:	68fb      	ldr	r3, [r7, #12]
 8011a16:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 8011a18:	f7fd fa78 	bl	800ef0c <HAL_DMA_Start_IT>
 8011a1c:	1e03      	subs	r3, r0, #0
 8011a1e:	d005      	beq.n	8011a2c <I2C_DMAMasterReceiveCplt+0x88>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8011a20:	68fb      	ldr	r3, [r7, #12]
 8011a22:	2110      	movs	r1, #16
 8011a24:	0018      	movs	r0, r3
 8011a26:	f7ff fe1f 	bl	8011668 <I2C_ITError>
}
 8011a2a:	e004      	b.n	8011a36 <I2C_DMAMasterReceiveCplt+0x92>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 8011a2c:	68fb      	ldr	r3, [r7, #12]
 8011a2e:	2140      	movs	r1, #64	@ 0x40
 8011a30:	0018      	movs	r0, r3
 8011a32:	f000 facb 	bl	8011fcc <I2C_Enable_IRQ>
}
 8011a36:	46c0      	nop			@ (mov r8, r8)
 8011a38:	46bd      	mov	sp, r7
 8011a3a:	b004      	add	sp, #16
 8011a3c:	bd80      	pop	{r7, pc}
 8011a3e:	46c0      	nop			@ (mov r8, r8)
 8011a40:	ffff7fff 	.word	0xffff7fff

08011a44 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 8011a44:	b580      	push	{r7, lr}
 8011a46:	b084      	sub	sp, #16
 8011a48:	af00      	add	r7, sp, #0
 8011a4a:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8011a4c:	687b      	ldr	r3, [r7, #4]
 8011a4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011a50:	60fb      	str	r3, [r7, #12]

  /* Disable Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8011a52:	68fb      	ldr	r3, [r7, #12]
 8011a54:	681b      	ldr	r3, [r3, #0]
 8011a56:	685a      	ldr	r2, [r3, #4]
 8011a58:	68fb      	ldr	r3, [r7, #12]
 8011a5a:	681b      	ldr	r3, [r3, #0]
 8011a5c:	2180      	movs	r1, #128	@ 0x80
 8011a5e:	0209      	lsls	r1, r1, #8
 8011a60:	430a      	orrs	r2, r1
 8011a62:	605a      	str	r2, [r3, #4]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8011a64:	68fb      	ldr	r3, [r7, #12]
 8011a66:	2110      	movs	r1, #16
 8011a68:	0018      	movs	r0, r3
 8011a6a:	f7ff fdfd 	bl	8011668 <I2C_ITError>
}
 8011a6e:	46c0      	nop			@ (mov r8, r8)
 8011a70:	46bd      	mov	sp, r7
 8011a72:	b004      	add	sp, #16
 8011a74:	bd80      	pop	{r7, pc}

08011a76 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8011a76:	b580      	push	{r7, lr}
 8011a78:	b084      	sub	sp, #16
 8011a7a:	af00      	add	r7, sp, #0
 8011a7c:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8011a7e:	687b      	ldr	r3, [r7, #4]
 8011a80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011a82:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8011a84:	68fb      	ldr	r3, [r7, #12]
 8011a86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011a88:	2b00      	cmp	r3, #0
 8011a8a:	d003      	beq.n	8011a94 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8011a8c:	68fb      	ldr	r3, [r7, #12]
 8011a8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011a90:	2200      	movs	r2, #0
 8011a92:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  if (hi2c->hdmarx != NULL)
 8011a94:	68fb      	ldr	r3, [r7, #12]
 8011a96:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8011a98:	2b00      	cmp	r3, #0
 8011a9a:	d003      	beq.n	8011aa4 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8011a9c:	68fb      	ldr	r3, [r7, #12]
 8011a9e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8011aa0:	2200      	movs	r2, #0
 8011aa2:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 8011aa4:	68fb      	ldr	r3, [r7, #12]
 8011aa6:	0018      	movs	r0, r3
 8011aa8:	f7ff fee0 	bl	801186c <I2C_TreatErrorCallback>
}
 8011aac:	46c0      	nop			@ (mov r8, r8)
 8011aae:	46bd      	mov	sp, r7
 8011ab0:	b004      	add	sp, #16
 8011ab2:	bd80      	pop	{r7, pc}

08011ab4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8011ab4:	b580      	push	{r7, lr}
 8011ab6:	b084      	sub	sp, #16
 8011ab8:	af00      	add	r7, sp, #0
 8011aba:	60f8      	str	r0, [r7, #12]
 8011abc:	60b9      	str	r1, [r7, #8]
 8011abe:	603b      	str	r3, [r7, #0]
 8011ac0:	1dfb      	adds	r3, r7, #7
 8011ac2:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8011ac4:	e030      	b.n	8011b28 <I2C_WaitOnFlagUntilTimeout+0x74>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8011ac6:	683b      	ldr	r3, [r7, #0]
 8011ac8:	3301      	adds	r3, #1
 8011aca:	d02d      	beq.n	8011b28 <I2C_WaitOnFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8011acc:	f7fc fccc 	bl	800e468 <HAL_GetTick>
 8011ad0:	0002      	movs	r2, r0
 8011ad2:	69bb      	ldr	r3, [r7, #24]
 8011ad4:	1ad3      	subs	r3, r2, r3
 8011ad6:	683a      	ldr	r2, [r7, #0]
 8011ad8:	429a      	cmp	r2, r3
 8011ada:	d302      	bcc.n	8011ae2 <I2C_WaitOnFlagUntilTimeout+0x2e>
 8011adc:	683b      	ldr	r3, [r7, #0]
 8011ade:	2b00      	cmp	r3, #0
 8011ae0:	d122      	bne.n	8011b28 <I2C_WaitOnFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8011ae2:	68fb      	ldr	r3, [r7, #12]
 8011ae4:	681b      	ldr	r3, [r3, #0]
 8011ae6:	699b      	ldr	r3, [r3, #24]
 8011ae8:	68ba      	ldr	r2, [r7, #8]
 8011aea:	4013      	ands	r3, r2
 8011aec:	68ba      	ldr	r2, [r7, #8]
 8011aee:	1ad3      	subs	r3, r2, r3
 8011af0:	425a      	negs	r2, r3
 8011af2:	4153      	adcs	r3, r2
 8011af4:	b2db      	uxtb	r3, r3
 8011af6:	001a      	movs	r2, r3
 8011af8:	1dfb      	adds	r3, r7, #7
 8011afa:	781b      	ldrb	r3, [r3, #0]
 8011afc:	429a      	cmp	r2, r3
 8011afe:	d113      	bne.n	8011b28 <I2C_WaitOnFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8011b00:	68fb      	ldr	r3, [r7, #12]
 8011b02:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8011b04:	2220      	movs	r2, #32
 8011b06:	431a      	orrs	r2, r3
 8011b08:	68fb      	ldr	r3, [r7, #12]
 8011b0a:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8011b0c:	68fb      	ldr	r3, [r7, #12]
 8011b0e:	2241      	movs	r2, #65	@ 0x41
 8011b10:	2120      	movs	r1, #32
 8011b12:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8011b14:	68fb      	ldr	r3, [r7, #12]
 8011b16:	2242      	movs	r2, #66	@ 0x42
 8011b18:	2100      	movs	r1, #0
 8011b1a:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8011b1c:	68fb      	ldr	r3, [r7, #12]
 8011b1e:	2240      	movs	r2, #64	@ 0x40
 8011b20:	2100      	movs	r1, #0
 8011b22:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 8011b24:	2301      	movs	r3, #1
 8011b26:	e00f      	b.n	8011b48 <I2C_WaitOnFlagUntilTimeout+0x94>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8011b28:	68fb      	ldr	r3, [r7, #12]
 8011b2a:	681b      	ldr	r3, [r3, #0]
 8011b2c:	699b      	ldr	r3, [r3, #24]
 8011b2e:	68ba      	ldr	r2, [r7, #8]
 8011b30:	4013      	ands	r3, r2
 8011b32:	68ba      	ldr	r2, [r7, #8]
 8011b34:	1ad3      	subs	r3, r2, r3
 8011b36:	425a      	negs	r2, r3
 8011b38:	4153      	adcs	r3, r2
 8011b3a:	b2db      	uxtb	r3, r3
 8011b3c:	001a      	movs	r2, r3
 8011b3e:	1dfb      	adds	r3, r7, #7
 8011b40:	781b      	ldrb	r3, [r3, #0]
 8011b42:	429a      	cmp	r2, r3
 8011b44:	d0bf      	beq.n	8011ac6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8011b46:	2300      	movs	r3, #0
}
 8011b48:	0018      	movs	r0, r3
 8011b4a:	46bd      	mov	sp, r7
 8011b4c:	b004      	add	sp, #16
 8011b4e:	bd80      	pop	{r7, pc}

08011b50 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8011b50:	b580      	push	{r7, lr}
 8011b52:	b084      	sub	sp, #16
 8011b54:	af00      	add	r7, sp, #0
 8011b56:	60f8      	str	r0, [r7, #12]
 8011b58:	60b9      	str	r1, [r7, #8]
 8011b5a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8011b5c:	e032      	b.n	8011bc4 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8011b5e:	687a      	ldr	r2, [r7, #4]
 8011b60:	68b9      	ldr	r1, [r7, #8]
 8011b62:	68fb      	ldr	r3, [r7, #12]
 8011b64:	0018      	movs	r0, r3
 8011b66:	f000 f8ff 	bl	8011d68 <I2C_IsErrorOccurred>
 8011b6a:	1e03      	subs	r3, r0, #0
 8011b6c:	d001      	beq.n	8011b72 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8011b6e:	2301      	movs	r3, #1
 8011b70:	e030      	b.n	8011bd4 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8011b72:	68bb      	ldr	r3, [r7, #8]
 8011b74:	3301      	adds	r3, #1
 8011b76:	d025      	beq.n	8011bc4 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8011b78:	f7fc fc76 	bl	800e468 <HAL_GetTick>
 8011b7c:	0002      	movs	r2, r0
 8011b7e:	687b      	ldr	r3, [r7, #4]
 8011b80:	1ad3      	subs	r3, r2, r3
 8011b82:	68ba      	ldr	r2, [r7, #8]
 8011b84:	429a      	cmp	r2, r3
 8011b86:	d302      	bcc.n	8011b8e <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8011b88:	68bb      	ldr	r3, [r7, #8]
 8011b8a:	2b00      	cmp	r3, #0
 8011b8c:	d11a      	bne.n	8011bc4 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8011b8e:	68fb      	ldr	r3, [r7, #12]
 8011b90:	681b      	ldr	r3, [r3, #0]
 8011b92:	699b      	ldr	r3, [r3, #24]
 8011b94:	2202      	movs	r2, #2
 8011b96:	4013      	ands	r3, r2
 8011b98:	2b02      	cmp	r3, #2
 8011b9a:	d013      	beq.n	8011bc4 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8011b9c:	68fb      	ldr	r3, [r7, #12]
 8011b9e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8011ba0:	2220      	movs	r2, #32
 8011ba2:	431a      	orrs	r2, r3
 8011ba4:	68fb      	ldr	r3, [r7, #12]
 8011ba6:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8011ba8:	68fb      	ldr	r3, [r7, #12]
 8011baa:	2241      	movs	r2, #65	@ 0x41
 8011bac:	2120      	movs	r1, #32
 8011bae:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8011bb0:	68fb      	ldr	r3, [r7, #12]
 8011bb2:	2242      	movs	r2, #66	@ 0x42
 8011bb4:	2100      	movs	r1, #0
 8011bb6:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8011bb8:	68fb      	ldr	r3, [r7, #12]
 8011bba:	2240      	movs	r2, #64	@ 0x40
 8011bbc:	2100      	movs	r1, #0
 8011bbe:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8011bc0:	2301      	movs	r3, #1
 8011bc2:	e007      	b.n	8011bd4 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8011bc4:	68fb      	ldr	r3, [r7, #12]
 8011bc6:	681b      	ldr	r3, [r3, #0]
 8011bc8:	699b      	ldr	r3, [r3, #24]
 8011bca:	2202      	movs	r2, #2
 8011bcc:	4013      	ands	r3, r2
 8011bce:	2b02      	cmp	r3, #2
 8011bd0:	d1c5      	bne.n	8011b5e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8011bd2:	2300      	movs	r3, #0
}
 8011bd4:	0018      	movs	r0, r3
 8011bd6:	46bd      	mov	sp, r7
 8011bd8:	b004      	add	sp, #16
 8011bda:	bd80      	pop	{r7, pc}

08011bdc <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8011bdc:	b580      	push	{r7, lr}
 8011bde:	b084      	sub	sp, #16
 8011be0:	af00      	add	r7, sp, #0
 8011be2:	60f8      	str	r0, [r7, #12]
 8011be4:	60b9      	str	r1, [r7, #8]
 8011be6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8011be8:	e02f      	b.n	8011c4a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8011bea:	687a      	ldr	r2, [r7, #4]
 8011bec:	68b9      	ldr	r1, [r7, #8]
 8011bee:	68fb      	ldr	r3, [r7, #12]
 8011bf0:	0018      	movs	r0, r3
 8011bf2:	f000 f8b9 	bl	8011d68 <I2C_IsErrorOccurred>
 8011bf6:	1e03      	subs	r3, r0, #0
 8011bf8:	d001      	beq.n	8011bfe <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8011bfa:	2301      	movs	r3, #1
 8011bfc:	e02d      	b.n	8011c5a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8011bfe:	f7fc fc33 	bl	800e468 <HAL_GetTick>
 8011c02:	0002      	movs	r2, r0
 8011c04:	687b      	ldr	r3, [r7, #4]
 8011c06:	1ad3      	subs	r3, r2, r3
 8011c08:	68ba      	ldr	r2, [r7, #8]
 8011c0a:	429a      	cmp	r2, r3
 8011c0c:	d302      	bcc.n	8011c14 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8011c0e:	68bb      	ldr	r3, [r7, #8]
 8011c10:	2b00      	cmp	r3, #0
 8011c12:	d11a      	bne.n	8011c4a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8011c14:	68fb      	ldr	r3, [r7, #12]
 8011c16:	681b      	ldr	r3, [r3, #0]
 8011c18:	699b      	ldr	r3, [r3, #24]
 8011c1a:	2220      	movs	r2, #32
 8011c1c:	4013      	ands	r3, r2
 8011c1e:	2b20      	cmp	r3, #32
 8011c20:	d013      	beq.n	8011c4a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8011c22:	68fb      	ldr	r3, [r7, #12]
 8011c24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8011c26:	2220      	movs	r2, #32
 8011c28:	431a      	orrs	r2, r3
 8011c2a:	68fb      	ldr	r3, [r7, #12]
 8011c2c:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8011c2e:	68fb      	ldr	r3, [r7, #12]
 8011c30:	2241      	movs	r2, #65	@ 0x41
 8011c32:	2120      	movs	r1, #32
 8011c34:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8011c36:	68fb      	ldr	r3, [r7, #12]
 8011c38:	2242      	movs	r2, #66	@ 0x42
 8011c3a:	2100      	movs	r1, #0
 8011c3c:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8011c3e:	68fb      	ldr	r3, [r7, #12]
 8011c40:	2240      	movs	r2, #64	@ 0x40
 8011c42:	2100      	movs	r1, #0
 8011c44:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8011c46:	2301      	movs	r3, #1
 8011c48:	e007      	b.n	8011c5a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8011c4a:	68fb      	ldr	r3, [r7, #12]
 8011c4c:	681b      	ldr	r3, [r3, #0]
 8011c4e:	699b      	ldr	r3, [r3, #24]
 8011c50:	2220      	movs	r2, #32
 8011c52:	4013      	ands	r3, r2
 8011c54:	2b20      	cmp	r3, #32
 8011c56:	d1c8      	bne.n	8011bea <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8011c58:	2300      	movs	r3, #0
}
 8011c5a:	0018      	movs	r0, r3
 8011c5c:	46bd      	mov	sp, r7
 8011c5e:	b004      	add	sp, #16
 8011c60:	bd80      	pop	{r7, pc}
	...

08011c64 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8011c64:	b580      	push	{r7, lr}
 8011c66:	b084      	sub	sp, #16
 8011c68:	af00      	add	r7, sp, #0
 8011c6a:	60f8      	str	r0, [r7, #12]
 8011c6c:	60b9      	str	r1, [r7, #8]
 8011c6e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8011c70:	e06b      	b.n	8011d4a <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8011c72:	687a      	ldr	r2, [r7, #4]
 8011c74:	68b9      	ldr	r1, [r7, #8]
 8011c76:	68fb      	ldr	r3, [r7, #12]
 8011c78:	0018      	movs	r0, r3
 8011c7a:	f000 f875 	bl	8011d68 <I2C_IsErrorOccurred>
 8011c7e:	1e03      	subs	r3, r0, #0
 8011c80:	d001      	beq.n	8011c86 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8011c82:	2301      	movs	r3, #1
 8011c84:	e069      	b.n	8011d5a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8011c86:	68fb      	ldr	r3, [r7, #12]
 8011c88:	681b      	ldr	r3, [r3, #0]
 8011c8a:	699b      	ldr	r3, [r3, #24]
 8011c8c:	2220      	movs	r2, #32
 8011c8e:	4013      	ands	r3, r2
 8011c90:	2b20      	cmp	r3, #32
 8011c92:	d138      	bne.n	8011d06 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8011c94:	68fb      	ldr	r3, [r7, #12]
 8011c96:	681b      	ldr	r3, [r3, #0]
 8011c98:	699b      	ldr	r3, [r3, #24]
 8011c9a:	2204      	movs	r2, #4
 8011c9c:	4013      	ands	r3, r2
 8011c9e:	2b04      	cmp	r3, #4
 8011ca0:	d105      	bne.n	8011cae <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8011ca2:	68fb      	ldr	r3, [r7, #12]
 8011ca4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8011ca6:	2b00      	cmp	r3, #0
 8011ca8:	d001      	beq.n	8011cae <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8011caa:	2300      	movs	r3, #0
 8011cac:	e055      	b.n	8011d5a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8011cae:	68fb      	ldr	r3, [r7, #12]
 8011cb0:	681b      	ldr	r3, [r3, #0]
 8011cb2:	699b      	ldr	r3, [r3, #24]
 8011cb4:	2210      	movs	r2, #16
 8011cb6:	4013      	ands	r3, r2
 8011cb8:	2b10      	cmp	r3, #16
 8011cba:	d107      	bne.n	8011ccc <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8011cbc:	68fb      	ldr	r3, [r7, #12]
 8011cbe:	681b      	ldr	r3, [r3, #0]
 8011cc0:	2210      	movs	r2, #16
 8011cc2:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8011cc4:	68fb      	ldr	r3, [r7, #12]
 8011cc6:	2204      	movs	r2, #4
 8011cc8:	645a      	str	r2, [r3, #68]	@ 0x44
 8011cca:	e002      	b.n	8011cd2 <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8011ccc:	68fb      	ldr	r3, [r7, #12]
 8011cce:	2200      	movs	r2, #0
 8011cd0:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8011cd2:	68fb      	ldr	r3, [r7, #12]
 8011cd4:	681b      	ldr	r3, [r3, #0]
 8011cd6:	2220      	movs	r2, #32
 8011cd8:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8011cda:	68fb      	ldr	r3, [r7, #12]
 8011cdc:	681b      	ldr	r3, [r3, #0]
 8011cde:	685a      	ldr	r2, [r3, #4]
 8011ce0:	68fb      	ldr	r3, [r7, #12]
 8011ce2:	681b      	ldr	r3, [r3, #0]
 8011ce4:	491f      	ldr	r1, [pc, #124]	@ (8011d64 <I2C_WaitOnRXNEFlagUntilTimeout+0x100>)
 8011ce6:	400a      	ands	r2, r1
 8011ce8:	605a      	str	r2, [r3, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8011cea:	68fb      	ldr	r3, [r7, #12]
 8011cec:	2241      	movs	r2, #65	@ 0x41
 8011cee:	2120      	movs	r1, #32
 8011cf0:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8011cf2:	68fb      	ldr	r3, [r7, #12]
 8011cf4:	2242      	movs	r2, #66	@ 0x42
 8011cf6:	2100      	movs	r1, #0
 8011cf8:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8011cfa:	68fb      	ldr	r3, [r7, #12]
 8011cfc:	2240      	movs	r2, #64	@ 0x40
 8011cfe:	2100      	movs	r1, #0
 8011d00:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8011d02:	2301      	movs	r3, #1
 8011d04:	e029      	b.n	8011d5a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8011d06:	f7fc fbaf 	bl	800e468 <HAL_GetTick>
 8011d0a:	0002      	movs	r2, r0
 8011d0c:	687b      	ldr	r3, [r7, #4]
 8011d0e:	1ad3      	subs	r3, r2, r3
 8011d10:	68ba      	ldr	r2, [r7, #8]
 8011d12:	429a      	cmp	r2, r3
 8011d14:	d302      	bcc.n	8011d1c <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 8011d16:	68bb      	ldr	r3, [r7, #8]
 8011d18:	2b00      	cmp	r3, #0
 8011d1a:	d116      	bne.n	8011d4a <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8011d1c:	68fb      	ldr	r3, [r7, #12]
 8011d1e:	681b      	ldr	r3, [r3, #0]
 8011d20:	699b      	ldr	r3, [r3, #24]
 8011d22:	2204      	movs	r2, #4
 8011d24:	4013      	ands	r3, r2
 8011d26:	2b04      	cmp	r3, #4
 8011d28:	d00f      	beq.n	8011d4a <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8011d2a:	68fb      	ldr	r3, [r7, #12]
 8011d2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8011d2e:	2220      	movs	r2, #32
 8011d30:	431a      	orrs	r2, r3
 8011d32:	68fb      	ldr	r3, [r7, #12]
 8011d34:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8011d36:	68fb      	ldr	r3, [r7, #12]
 8011d38:	2241      	movs	r2, #65	@ 0x41
 8011d3a:	2120      	movs	r1, #32
 8011d3c:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8011d3e:	68fb      	ldr	r3, [r7, #12]
 8011d40:	2240      	movs	r2, #64	@ 0x40
 8011d42:	2100      	movs	r1, #0
 8011d44:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8011d46:	2301      	movs	r3, #1
 8011d48:	e007      	b.n	8011d5a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8011d4a:	68fb      	ldr	r3, [r7, #12]
 8011d4c:	681b      	ldr	r3, [r3, #0]
 8011d4e:	699b      	ldr	r3, [r3, #24]
 8011d50:	2204      	movs	r2, #4
 8011d52:	4013      	ands	r3, r2
 8011d54:	2b04      	cmp	r3, #4
 8011d56:	d18c      	bne.n	8011c72 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8011d58:	2300      	movs	r3, #0
}
 8011d5a:	0018      	movs	r0, r3
 8011d5c:	46bd      	mov	sp, r7
 8011d5e:	b004      	add	sp, #16
 8011d60:	bd80      	pop	{r7, pc}
 8011d62:	46c0      	nop			@ (mov r8, r8)
 8011d64:	fe00e800 	.word	0xfe00e800

08011d68 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8011d68:	b580      	push	{r7, lr}
 8011d6a:	b08a      	sub	sp, #40	@ 0x28
 8011d6c:	af00      	add	r7, sp, #0
 8011d6e:	60f8      	str	r0, [r7, #12]
 8011d70:	60b9      	str	r1, [r7, #8]
 8011d72:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8011d74:	2327      	movs	r3, #39	@ 0x27
 8011d76:	18fb      	adds	r3, r7, r3
 8011d78:	2200      	movs	r2, #0
 8011d7a:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 8011d7c:	68fb      	ldr	r3, [r7, #12]
 8011d7e:	681b      	ldr	r3, [r3, #0]
 8011d80:	699b      	ldr	r3, [r3, #24]
 8011d82:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8011d84:	2300      	movs	r3, #0
 8011d86:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8011d88:	687b      	ldr	r3, [r7, #4]
 8011d8a:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8011d8c:	69bb      	ldr	r3, [r7, #24]
 8011d8e:	2210      	movs	r2, #16
 8011d90:	4013      	ands	r3, r2
 8011d92:	d100      	bne.n	8011d96 <I2C_IsErrorOccurred+0x2e>
 8011d94:	e079      	b.n	8011e8a <I2C_IsErrorOccurred+0x122>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8011d96:	68fb      	ldr	r3, [r7, #12]
 8011d98:	681b      	ldr	r3, [r3, #0]
 8011d9a:	2210      	movs	r2, #16
 8011d9c:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8011d9e:	e057      	b.n	8011e50 <I2C_IsErrorOccurred+0xe8>
 8011da0:	2227      	movs	r2, #39	@ 0x27
 8011da2:	18bb      	adds	r3, r7, r2
 8011da4:	18ba      	adds	r2, r7, r2
 8011da6:	7812      	ldrb	r2, [r2, #0]
 8011da8:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8011daa:	68bb      	ldr	r3, [r7, #8]
 8011dac:	3301      	adds	r3, #1
 8011dae:	d04f      	beq.n	8011e50 <I2C_IsErrorOccurred+0xe8>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8011db0:	f7fc fb5a 	bl	800e468 <HAL_GetTick>
 8011db4:	0002      	movs	r2, r0
 8011db6:	69fb      	ldr	r3, [r7, #28]
 8011db8:	1ad3      	subs	r3, r2, r3
 8011dba:	68ba      	ldr	r2, [r7, #8]
 8011dbc:	429a      	cmp	r2, r3
 8011dbe:	d302      	bcc.n	8011dc6 <I2C_IsErrorOccurred+0x5e>
 8011dc0:	68bb      	ldr	r3, [r7, #8]
 8011dc2:	2b00      	cmp	r3, #0
 8011dc4:	d144      	bne.n	8011e50 <I2C_IsErrorOccurred+0xe8>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8011dc6:	68fb      	ldr	r3, [r7, #12]
 8011dc8:	681b      	ldr	r3, [r3, #0]
 8011dca:	685a      	ldr	r2, [r3, #4]
 8011dcc:	2380      	movs	r3, #128	@ 0x80
 8011dce:	01db      	lsls	r3, r3, #7
 8011dd0:	4013      	ands	r3, r2
 8011dd2:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8011dd4:	2013      	movs	r0, #19
 8011dd6:	183b      	adds	r3, r7, r0
 8011dd8:	68fa      	ldr	r2, [r7, #12]
 8011dda:	2142      	movs	r1, #66	@ 0x42
 8011ddc:	5c52      	ldrb	r2, [r2, r1]
 8011dde:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8011de0:	68fb      	ldr	r3, [r7, #12]
 8011de2:	681b      	ldr	r3, [r3, #0]
 8011de4:	699a      	ldr	r2, [r3, #24]
 8011de6:	2380      	movs	r3, #128	@ 0x80
 8011de8:	021b      	lsls	r3, r3, #8
 8011dea:	401a      	ands	r2, r3
 8011dec:	2380      	movs	r3, #128	@ 0x80
 8011dee:	021b      	lsls	r3, r3, #8
 8011df0:	429a      	cmp	r2, r3
 8011df2:	d126      	bne.n	8011e42 <I2C_IsErrorOccurred+0xda>
 8011df4:	697a      	ldr	r2, [r7, #20]
 8011df6:	2380      	movs	r3, #128	@ 0x80
 8011df8:	01db      	lsls	r3, r3, #7
 8011dfa:	429a      	cmp	r2, r3
 8011dfc:	d021      	beq.n	8011e42 <I2C_IsErrorOccurred+0xda>
              (tmp1 != I2C_CR2_STOP) && \
 8011dfe:	183b      	adds	r3, r7, r0
 8011e00:	781b      	ldrb	r3, [r3, #0]
 8011e02:	2b20      	cmp	r3, #32
 8011e04:	d01d      	beq.n	8011e42 <I2C_IsErrorOccurred+0xda>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8011e06:	68fb      	ldr	r3, [r7, #12]
 8011e08:	681b      	ldr	r3, [r3, #0]
 8011e0a:	685a      	ldr	r2, [r3, #4]
 8011e0c:	68fb      	ldr	r3, [r7, #12]
 8011e0e:	681b      	ldr	r3, [r3, #0]
 8011e10:	2180      	movs	r1, #128	@ 0x80
 8011e12:	01c9      	lsls	r1, r1, #7
 8011e14:	430a      	orrs	r2, r1
 8011e16:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8011e18:	f7fc fb26 	bl	800e468 <HAL_GetTick>
 8011e1c:	0003      	movs	r3, r0
 8011e1e:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8011e20:	e00f      	b.n	8011e42 <I2C_IsErrorOccurred+0xda>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8011e22:	f7fc fb21 	bl	800e468 <HAL_GetTick>
 8011e26:	0002      	movs	r2, r0
 8011e28:	69fb      	ldr	r3, [r7, #28]
 8011e2a:	1ad3      	subs	r3, r2, r3
 8011e2c:	2b19      	cmp	r3, #25
 8011e2e:	d908      	bls.n	8011e42 <I2C_IsErrorOccurred+0xda>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8011e30:	6a3b      	ldr	r3, [r7, #32]
 8011e32:	2220      	movs	r2, #32
 8011e34:	4313      	orrs	r3, r2
 8011e36:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8011e38:	2327      	movs	r3, #39	@ 0x27
 8011e3a:	18fb      	adds	r3, r7, r3
 8011e3c:	2201      	movs	r2, #1
 8011e3e:	701a      	strb	r2, [r3, #0]

              break;
 8011e40:	e006      	b.n	8011e50 <I2C_IsErrorOccurred+0xe8>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8011e42:	68fb      	ldr	r3, [r7, #12]
 8011e44:	681b      	ldr	r3, [r3, #0]
 8011e46:	699b      	ldr	r3, [r3, #24]
 8011e48:	2220      	movs	r2, #32
 8011e4a:	4013      	ands	r3, r2
 8011e4c:	2b20      	cmp	r3, #32
 8011e4e:	d1e8      	bne.n	8011e22 <I2C_IsErrorOccurred+0xba>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8011e50:	68fb      	ldr	r3, [r7, #12]
 8011e52:	681b      	ldr	r3, [r3, #0]
 8011e54:	699b      	ldr	r3, [r3, #24]
 8011e56:	2220      	movs	r2, #32
 8011e58:	4013      	ands	r3, r2
 8011e5a:	2b20      	cmp	r3, #32
 8011e5c:	d004      	beq.n	8011e68 <I2C_IsErrorOccurred+0x100>
 8011e5e:	2327      	movs	r3, #39	@ 0x27
 8011e60:	18fb      	adds	r3, r7, r3
 8011e62:	781b      	ldrb	r3, [r3, #0]
 8011e64:	2b00      	cmp	r3, #0
 8011e66:	d09b      	beq.n	8011da0 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8011e68:	2327      	movs	r3, #39	@ 0x27
 8011e6a:	18fb      	adds	r3, r7, r3
 8011e6c:	781b      	ldrb	r3, [r3, #0]
 8011e6e:	2b00      	cmp	r3, #0
 8011e70:	d103      	bne.n	8011e7a <I2C_IsErrorOccurred+0x112>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8011e72:	68fb      	ldr	r3, [r7, #12]
 8011e74:	681b      	ldr	r3, [r3, #0]
 8011e76:	2220      	movs	r2, #32
 8011e78:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8011e7a:	6a3b      	ldr	r3, [r7, #32]
 8011e7c:	2204      	movs	r2, #4
 8011e7e:	4313      	orrs	r3, r2
 8011e80:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8011e82:	2327      	movs	r3, #39	@ 0x27
 8011e84:	18fb      	adds	r3, r7, r3
 8011e86:	2201      	movs	r2, #1
 8011e88:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8011e8a:	68fb      	ldr	r3, [r7, #12]
 8011e8c:	681b      	ldr	r3, [r3, #0]
 8011e8e:	699b      	ldr	r3, [r3, #24]
 8011e90:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8011e92:	69ba      	ldr	r2, [r7, #24]
 8011e94:	2380      	movs	r3, #128	@ 0x80
 8011e96:	005b      	lsls	r3, r3, #1
 8011e98:	4013      	ands	r3, r2
 8011e9a:	d00c      	beq.n	8011eb6 <I2C_IsErrorOccurred+0x14e>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8011e9c:	6a3b      	ldr	r3, [r7, #32]
 8011e9e:	2201      	movs	r2, #1
 8011ea0:	4313      	orrs	r3, r2
 8011ea2:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8011ea4:	68fb      	ldr	r3, [r7, #12]
 8011ea6:	681b      	ldr	r3, [r3, #0]
 8011ea8:	2280      	movs	r2, #128	@ 0x80
 8011eaa:	0052      	lsls	r2, r2, #1
 8011eac:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8011eae:	2327      	movs	r3, #39	@ 0x27
 8011eb0:	18fb      	adds	r3, r7, r3
 8011eb2:	2201      	movs	r2, #1
 8011eb4:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8011eb6:	69ba      	ldr	r2, [r7, #24]
 8011eb8:	2380      	movs	r3, #128	@ 0x80
 8011eba:	00db      	lsls	r3, r3, #3
 8011ebc:	4013      	ands	r3, r2
 8011ebe:	d00c      	beq.n	8011eda <I2C_IsErrorOccurred+0x172>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8011ec0:	6a3b      	ldr	r3, [r7, #32]
 8011ec2:	2208      	movs	r2, #8
 8011ec4:	4313      	orrs	r3, r2
 8011ec6:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8011ec8:	68fb      	ldr	r3, [r7, #12]
 8011eca:	681b      	ldr	r3, [r3, #0]
 8011ecc:	2280      	movs	r2, #128	@ 0x80
 8011ece:	00d2      	lsls	r2, r2, #3
 8011ed0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8011ed2:	2327      	movs	r3, #39	@ 0x27
 8011ed4:	18fb      	adds	r3, r7, r3
 8011ed6:	2201      	movs	r2, #1
 8011ed8:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8011eda:	69ba      	ldr	r2, [r7, #24]
 8011edc:	2380      	movs	r3, #128	@ 0x80
 8011ede:	009b      	lsls	r3, r3, #2
 8011ee0:	4013      	ands	r3, r2
 8011ee2:	d00c      	beq.n	8011efe <I2C_IsErrorOccurred+0x196>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8011ee4:	6a3b      	ldr	r3, [r7, #32]
 8011ee6:	2202      	movs	r2, #2
 8011ee8:	4313      	orrs	r3, r2
 8011eea:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8011eec:	68fb      	ldr	r3, [r7, #12]
 8011eee:	681b      	ldr	r3, [r3, #0]
 8011ef0:	2280      	movs	r2, #128	@ 0x80
 8011ef2:	0092      	lsls	r2, r2, #2
 8011ef4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8011ef6:	2327      	movs	r3, #39	@ 0x27
 8011ef8:	18fb      	adds	r3, r7, r3
 8011efa:	2201      	movs	r2, #1
 8011efc:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 8011efe:	2327      	movs	r3, #39	@ 0x27
 8011f00:	18fb      	adds	r3, r7, r3
 8011f02:	781b      	ldrb	r3, [r3, #0]
 8011f04:	2b00      	cmp	r3, #0
 8011f06:	d01d      	beq.n	8011f44 <I2C_IsErrorOccurred+0x1dc>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8011f08:	68fb      	ldr	r3, [r7, #12]
 8011f0a:	0018      	movs	r0, r3
 8011f0c:	f7ff fcd7 	bl	80118be <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8011f10:	68fb      	ldr	r3, [r7, #12]
 8011f12:	681b      	ldr	r3, [r3, #0]
 8011f14:	685a      	ldr	r2, [r3, #4]
 8011f16:	68fb      	ldr	r3, [r7, #12]
 8011f18:	681b      	ldr	r3, [r3, #0]
 8011f1a:	490e      	ldr	r1, [pc, #56]	@ (8011f54 <I2C_IsErrorOccurred+0x1ec>)
 8011f1c:	400a      	ands	r2, r1
 8011f1e:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 8011f20:	68fb      	ldr	r3, [r7, #12]
 8011f22:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8011f24:	6a3b      	ldr	r3, [r7, #32]
 8011f26:	431a      	orrs	r2, r3
 8011f28:	68fb      	ldr	r3, [r7, #12]
 8011f2a:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8011f2c:	68fb      	ldr	r3, [r7, #12]
 8011f2e:	2241      	movs	r2, #65	@ 0x41
 8011f30:	2120      	movs	r1, #32
 8011f32:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8011f34:	68fb      	ldr	r3, [r7, #12]
 8011f36:	2242      	movs	r2, #66	@ 0x42
 8011f38:	2100      	movs	r1, #0
 8011f3a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8011f3c:	68fb      	ldr	r3, [r7, #12]
 8011f3e:	2240      	movs	r2, #64	@ 0x40
 8011f40:	2100      	movs	r1, #0
 8011f42:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8011f44:	2327      	movs	r3, #39	@ 0x27
 8011f46:	18fb      	adds	r3, r7, r3
 8011f48:	781b      	ldrb	r3, [r3, #0]
}
 8011f4a:	0018      	movs	r0, r3
 8011f4c:	46bd      	mov	sp, r7
 8011f4e:	b00a      	add	sp, #40	@ 0x28
 8011f50:	bd80      	pop	{r7, pc}
 8011f52:	46c0      	nop			@ (mov r8, r8)
 8011f54:	fe00e800 	.word	0xfe00e800

08011f58 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8011f58:	b590      	push	{r4, r7, lr}
 8011f5a:	b087      	sub	sp, #28
 8011f5c:	af00      	add	r7, sp, #0
 8011f5e:	60f8      	str	r0, [r7, #12]
 8011f60:	0008      	movs	r0, r1
 8011f62:	0011      	movs	r1, r2
 8011f64:	607b      	str	r3, [r7, #4]
 8011f66:	240a      	movs	r4, #10
 8011f68:	193b      	adds	r3, r7, r4
 8011f6a:	1c02      	adds	r2, r0, #0
 8011f6c:	801a      	strh	r2, [r3, #0]
 8011f6e:	2009      	movs	r0, #9
 8011f70:	183b      	adds	r3, r7, r0
 8011f72:	1c0a      	adds	r2, r1, #0
 8011f74:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8011f76:	193b      	adds	r3, r7, r4
 8011f78:	881b      	ldrh	r3, [r3, #0]
 8011f7a:	059b      	lsls	r3, r3, #22
 8011f7c:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8011f7e:	183b      	adds	r3, r7, r0
 8011f80:	781b      	ldrb	r3, [r3, #0]
 8011f82:	0419      	lsls	r1, r3, #16
 8011f84:	23ff      	movs	r3, #255	@ 0xff
 8011f86:	041b      	lsls	r3, r3, #16
 8011f88:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8011f8a:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8011f8c:	687b      	ldr	r3, [r7, #4]
 8011f8e:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8011f90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011f92:	4313      	orrs	r3, r2
 8011f94:	005b      	lsls	r3, r3, #1
 8011f96:	085b      	lsrs	r3, r3, #1
 8011f98:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8011f9a:	68fb      	ldr	r3, [r7, #12]
 8011f9c:	681b      	ldr	r3, [r3, #0]
 8011f9e:	685b      	ldr	r3, [r3, #4]
 8011fa0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8011fa2:	0d51      	lsrs	r1, r2, #21
 8011fa4:	2280      	movs	r2, #128	@ 0x80
 8011fa6:	00d2      	lsls	r2, r2, #3
 8011fa8:	400a      	ands	r2, r1
 8011faa:	4907      	ldr	r1, [pc, #28]	@ (8011fc8 <I2C_TransferConfig+0x70>)
 8011fac:	430a      	orrs	r2, r1
 8011fae:	43d2      	mvns	r2, r2
 8011fb0:	401a      	ands	r2, r3
 8011fb2:	0011      	movs	r1, r2
 8011fb4:	68fb      	ldr	r3, [r7, #12]
 8011fb6:	681b      	ldr	r3, [r3, #0]
 8011fb8:	697a      	ldr	r2, [r7, #20]
 8011fba:	430a      	orrs	r2, r1
 8011fbc:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8011fbe:	46c0      	nop			@ (mov r8, r8)
 8011fc0:	46bd      	mov	sp, r7
 8011fc2:	b007      	add	sp, #28
 8011fc4:	bd90      	pop	{r4, r7, pc}
 8011fc6:	46c0      	nop			@ (mov r8, r8)
 8011fc8:	03ff63ff 	.word	0x03ff63ff

08011fcc <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8011fcc:	b580      	push	{r7, lr}
 8011fce:	b084      	sub	sp, #16
 8011fd0:	af00      	add	r7, sp, #0
 8011fd2:	6078      	str	r0, [r7, #4]
 8011fd4:	000a      	movs	r2, r1
 8011fd6:	1cbb      	adds	r3, r7, #2
 8011fd8:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
 8011fda:	2300      	movs	r3, #0
 8011fdc:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8011fde:	687b      	ldr	r3, [r7, #4]
 8011fe0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8011fe2:	4b3e      	ldr	r3, [pc, #248]	@ (80120dc <I2C_Enable_IRQ+0x110>)
 8011fe4:	429a      	cmp	r2, r3
 8011fe6:	d035      	beq.n	8012054 <I2C_Enable_IRQ+0x88>
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8011fe8:	687b      	ldr	r3, [r7, #4]
 8011fea:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8011fec:	4b3c      	ldr	r3, [pc, #240]	@ (80120e0 <I2C_Enable_IRQ+0x114>)
 8011fee:	429a      	cmp	r2, r3
 8011ff0:	d030      	beq.n	8012054 <I2C_Enable_IRQ+0x88>
      (hi2c->XferISR != I2C_Mem_ISR_DMA))
 8011ff2:	687b      	ldr	r3, [r7, #4]
 8011ff4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8011ff6:	4b3b      	ldr	r3, [pc, #236]	@ (80120e4 <I2C_Enable_IRQ+0x118>)
 8011ff8:	429a      	cmp	r2, r3
 8011ffa:	d02b      	beq.n	8012054 <I2C_Enable_IRQ+0x88>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8011ffc:	1cbb      	adds	r3, r7, #2
 8011ffe:	2200      	movs	r2, #0
 8012000:	5e9b      	ldrsh	r3, [r3, r2]
 8012002:	2b00      	cmp	r3, #0
 8012004:	da03      	bge.n	801200e <I2C_Enable_IRQ+0x42>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8012006:	68fb      	ldr	r3, [r7, #12]
 8012008:	22b8      	movs	r2, #184	@ 0xb8
 801200a:	4313      	orrs	r3, r2
 801200c:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 801200e:	1cbb      	adds	r3, r7, #2
 8012010:	881b      	ldrh	r3, [r3, #0]
 8012012:	2201      	movs	r2, #1
 8012014:	4013      	ands	r3, r2
 8012016:	d003      	beq.n	8012020 <I2C_Enable_IRQ+0x54>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8012018:	68fb      	ldr	r3, [r7, #12]
 801201a:	22f2      	movs	r2, #242	@ 0xf2
 801201c:	4313      	orrs	r3, r2
 801201e:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8012020:	1cbb      	adds	r3, r7, #2
 8012022:	881b      	ldrh	r3, [r3, #0]
 8012024:	2202      	movs	r2, #2
 8012026:	4013      	ands	r3, r2
 8012028:	d003      	beq.n	8012032 <I2C_Enable_IRQ+0x66>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 801202a:	68fb      	ldr	r3, [r7, #12]
 801202c:	22f4      	movs	r2, #244	@ 0xf4
 801202e:	4313      	orrs	r3, r2
 8012030:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8012032:	1cbb      	adds	r3, r7, #2
 8012034:	881b      	ldrh	r3, [r3, #0]
 8012036:	2b10      	cmp	r3, #16
 8012038:	d103      	bne.n	8012042 <I2C_Enable_IRQ+0x76>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 801203a:	68fb      	ldr	r3, [r7, #12]
 801203c:	2290      	movs	r2, #144	@ 0x90
 801203e:	4313      	orrs	r3, r2
 8012040:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8012042:	1cbb      	adds	r3, r7, #2
 8012044:	881b      	ldrh	r3, [r3, #0]
 8012046:	2b20      	cmp	r3, #32
 8012048:	d13c      	bne.n	80120c4 <I2C_Enable_IRQ+0xf8>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 801204a:	68fb      	ldr	r3, [r7, #12]
 801204c:	2220      	movs	r2, #32
 801204e:	4313      	orrs	r3, r2
 8012050:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8012052:	e037      	b.n	80120c4 <I2C_Enable_IRQ+0xf8>
    }
  }

  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8012054:	1cbb      	adds	r3, r7, #2
 8012056:	2200      	movs	r2, #0
 8012058:	5e9b      	ldrsh	r3, [r3, r2]
 801205a:	2b00      	cmp	r3, #0
 801205c:	da03      	bge.n	8012066 <I2C_Enable_IRQ+0x9a>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 801205e:	68fb      	ldr	r3, [r7, #12]
 8012060:	22b8      	movs	r2, #184	@ 0xb8
 8012062:	4313      	orrs	r3, r2
 8012064:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8012066:	1cbb      	adds	r3, r7, #2
 8012068:	881b      	ldrh	r3, [r3, #0]
 801206a:	2201      	movs	r2, #1
 801206c:	4013      	ands	r3, r2
 801206e:	d003      	beq.n	8012078 <I2C_Enable_IRQ+0xac>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8012070:	68fb      	ldr	r3, [r7, #12]
 8012072:	22f2      	movs	r2, #242	@ 0xf2
 8012074:	4313      	orrs	r3, r2
 8012076:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8012078:	1cbb      	adds	r3, r7, #2
 801207a:	881b      	ldrh	r3, [r3, #0]
 801207c:	2202      	movs	r2, #2
 801207e:	4013      	ands	r3, r2
 8012080:	d003      	beq.n	801208a <I2C_Enable_IRQ+0xbe>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8012082:	68fb      	ldr	r3, [r7, #12]
 8012084:	22f4      	movs	r2, #244	@ 0xf4
 8012086:	4313      	orrs	r3, r2
 8012088:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 801208a:	1cbb      	adds	r3, r7, #2
 801208c:	881b      	ldrh	r3, [r3, #0]
 801208e:	2b10      	cmp	r3, #16
 8012090:	d103      	bne.n	801209a <I2C_Enable_IRQ+0xce>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8012092:	68fb      	ldr	r3, [r7, #12]
 8012094:	2290      	movs	r2, #144	@ 0x90
 8012096:	4313      	orrs	r3, r2
 8012098:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 801209a:	1cbb      	adds	r3, r7, #2
 801209c:	881b      	ldrh	r3, [r3, #0]
 801209e:	2b20      	cmp	r3, #32
 80120a0:	d103      	bne.n	80120aa <I2C_Enable_IRQ+0xde>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 80120a2:	68fb      	ldr	r3, [r7, #12]
 80120a4:	2260      	movs	r2, #96	@ 0x60
 80120a6:	4313      	orrs	r3, r2
 80120a8:	60fb      	str	r3, [r7, #12]
    }

    if ((hi2c->XferISR != I2C_Mem_ISR_DMA) && (InterruptRequest == I2C_XFER_RELOAD_IT))
 80120aa:	687b      	ldr	r3, [r7, #4]
 80120ac:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80120ae:	4b0d      	ldr	r3, [pc, #52]	@ (80120e4 <I2C_Enable_IRQ+0x118>)
 80120b0:	429a      	cmp	r2, r3
 80120b2:	d007      	beq.n	80120c4 <I2C_Enable_IRQ+0xf8>
 80120b4:	1cbb      	adds	r3, r7, #2
 80120b6:	881b      	ldrh	r3, [r3, #0]
 80120b8:	2b40      	cmp	r3, #64	@ 0x40
 80120ba:	d103      	bne.n	80120c4 <I2C_Enable_IRQ+0xf8>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 80120bc:	68fb      	ldr	r3, [r7, #12]
 80120be:	2240      	movs	r2, #64	@ 0x40
 80120c0:	4313      	orrs	r3, r2
 80120c2:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 80120c4:	687b      	ldr	r3, [r7, #4]
 80120c6:	681b      	ldr	r3, [r3, #0]
 80120c8:	6819      	ldr	r1, [r3, #0]
 80120ca:	687b      	ldr	r3, [r7, #4]
 80120cc:	681b      	ldr	r3, [r3, #0]
 80120ce:	68fa      	ldr	r2, [r7, #12]
 80120d0:	430a      	orrs	r2, r1
 80120d2:	601a      	str	r2, [r3, #0]
}
 80120d4:	46c0      	nop			@ (mov r8, r8)
 80120d6:	46bd      	mov	sp, r7
 80120d8:	b004      	add	sp, #16
 80120da:	bd80      	pop	{r7, pc}
 80120dc:	0801094d 	.word	0x0801094d
 80120e0:	08010d7d 	.word	0x08010d7d
 80120e4:	08010b45 	.word	0x08010b45

080120e8 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 80120e8:	b580      	push	{r7, lr}
 80120ea:	b084      	sub	sp, #16
 80120ec:	af00      	add	r7, sp, #0
 80120ee:	6078      	str	r0, [r7, #4]
 80120f0:	000a      	movs	r2, r1
 80120f2:	1cbb      	adds	r3, r7, #2
 80120f4:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
 80120f6:	2300      	movs	r3, #0
 80120f8:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80120fa:	1cbb      	adds	r3, r7, #2
 80120fc:	881b      	ldrh	r3, [r3, #0]
 80120fe:	2201      	movs	r2, #1
 8012100:	4013      	ands	r3, r2
 8012102:	d010      	beq.n	8012126 <I2C_Disable_IRQ+0x3e>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8012104:	68fb      	ldr	r3, [r7, #12]
 8012106:	2242      	movs	r2, #66	@ 0x42
 8012108:	4313      	orrs	r3, r2
 801210a:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 801210c:	687b      	ldr	r3, [r7, #4]
 801210e:	2241      	movs	r2, #65	@ 0x41
 8012110:	5c9b      	ldrb	r3, [r3, r2]
 8012112:	b2db      	uxtb	r3, r3
 8012114:	001a      	movs	r2, r3
 8012116:	2328      	movs	r3, #40	@ 0x28
 8012118:	4013      	ands	r3, r2
 801211a:	2b28      	cmp	r3, #40	@ 0x28
 801211c:	d003      	beq.n	8012126 <I2C_Disable_IRQ+0x3e>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 801211e:	68fb      	ldr	r3, [r7, #12]
 8012120:	22b0      	movs	r2, #176	@ 0xb0
 8012122:	4313      	orrs	r3, r2
 8012124:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8012126:	1cbb      	adds	r3, r7, #2
 8012128:	881b      	ldrh	r3, [r3, #0]
 801212a:	2202      	movs	r2, #2
 801212c:	4013      	ands	r3, r2
 801212e:	d010      	beq.n	8012152 <I2C_Disable_IRQ+0x6a>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8012130:	68fb      	ldr	r3, [r7, #12]
 8012132:	2244      	movs	r2, #68	@ 0x44
 8012134:	4313      	orrs	r3, r2
 8012136:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8012138:	687b      	ldr	r3, [r7, #4]
 801213a:	2241      	movs	r2, #65	@ 0x41
 801213c:	5c9b      	ldrb	r3, [r3, r2]
 801213e:	b2db      	uxtb	r3, r3
 8012140:	001a      	movs	r2, r3
 8012142:	2328      	movs	r3, #40	@ 0x28
 8012144:	4013      	ands	r3, r2
 8012146:	2b28      	cmp	r3, #40	@ 0x28
 8012148:	d003      	beq.n	8012152 <I2C_Disable_IRQ+0x6a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 801214a:	68fb      	ldr	r3, [r7, #12]
 801214c:	22b0      	movs	r2, #176	@ 0xb0
 801214e:	4313      	orrs	r3, r2
 8012150:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8012152:	1cbb      	adds	r3, r7, #2
 8012154:	2200      	movs	r2, #0
 8012156:	5e9b      	ldrsh	r3, [r3, r2]
 8012158:	2b00      	cmp	r3, #0
 801215a:	da03      	bge.n	8012164 <I2C_Disable_IRQ+0x7c>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 801215c:	68fb      	ldr	r3, [r7, #12]
 801215e:	22b8      	movs	r2, #184	@ 0xb8
 8012160:	4313      	orrs	r3, r2
 8012162:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8012164:	1cbb      	adds	r3, r7, #2
 8012166:	881b      	ldrh	r3, [r3, #0]
 8012168:	2b10      	cmp	r3, #16
 801216a:	d103      	bne.n	8012174 <I2C_Disable_IRQ+0x8c>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 801216c:	68fb      	ldr	r3, [r7, #12]
 801216e:	2290      	movs	r2, #144	@ 0x90
 8012170:	4313      	orrs	r3, r2
 8012172:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8012174:	1cbb      	adds	r3, r7, #2
 8012176:	881b      	ldrh	r3, [r3, #0]
 8012178:	2b20      	cmp	r3, #32
 801217a:	d103      	bne.n	8012184 <I2C_Disable_IRQ+0x9c>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 801217c:	68fb      	ldr	r3, [r7, #12]
 801217e:	2220      	movs	r2, #32
 8012180:	4313      	orrs	r3, r2
 8012182:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8012184:	1cbb      	adds	r3, r7, #2
 8012186:	881b      	ldrh	r3, [r3, #0]
 8012188:	2b40      	cmp	r3, #64	@ 0x40
 801218a:	d103      	bne.n	8012194 <I2C_Disable_IRQ+0xac>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 801218c:	68fb      	ldr	r3, [r7, #12]
 801218e:	2240      	movs	r2, #64	@ 0x40
 8012190:	4313      	orrs	r3, r2
 8012192:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8012194:	687b      	ldr	r3, [r7, #4]
 8012196:	681b      	ldr	r3, [r3, #0]
 8012198:	681a      	ldr	r2, [r3, #0]
 801219a:	68fb      	ldr	r3, [r7, #12]
 801219c:	43d9      	mvns	r1, r3
 801219e:	687b      	ldr	r3, [r7, #4]
 80121a0:	681b      	ldr	r3, [r3, #0]
 80121a2:	400a      	ands	r2, r1
 80121a4:	601a      	str	r2, [r3, #0]
}
 80121a6:	46c0      	nop			@ (mov r8, r8)
 80121a8:	46bd      	mov	sp, r7
 80121aa:	b004      	add	sp, #16
 80121ac:	bd80      	pop	{r7, pc}
	...

080121b0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80121b0:	b580      	push	{r7, lr}
 80121b2:	b082      	sub	sp, #8
 80121b4:	af00      	add	r7, sp, #0
 80121b6:	6078      	str	r0, [r7, #4]
 80121b8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80121ba:	687b      	ldr	r3, [r7, #4]
 80121bc:	2241      	movs	r2, #65	@ 0x41
 80121be:	5c9b      	ldrb	r3, [r3, r2]
 80121c0:	b2db      	uxtb	r3, r3
 80121c2:	2b20      	cmp	r3, #32
 80121c4:	d138      	bne.n	8012238 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80121c6:	687b      	ldr	r3, [r7, #4]
 80121c8:	2240      	movs	r2, #64	@ 0x40
 80121ca:	5c9b      	ldrb	r3, [r3, r2]
 80121cc:	2b01      	cmp	r3, #1
 80121ce:	d101      	bne.n	80121d4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80121d0:	2302      	movs	r3, #2
 80121d2:	e032      	b.n	801223a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80121d4:	687b      	ldr	r3, [r7, #4]
 80121d6:	2240      	movs	r2, #64	@ 0x40
 80121d8:	2101      	movs	r1, #1
 80121da:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80121dc:	687b      	ldr	r3, [r7, #4]
 80121de:	2241      	movs	r2, #65	@ 0x41
 80121e0:	2124      	movs	r1, #36	@ 0x24
 80121e2:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80121e4:	687b      	ldr	r3, [r7, #4]
 80121e6:	681b      	ldr	r3, [r3, #0]
 80121e8:	681a      	ldr	r2, [r3, #0]
 80121ea:	687b      	ldr	r3, [r7, #4]
 80121ec:	681b      	ldr	r3, [r3, #0]
 80121ee:	2101      	movs	r1, #1
 80121f0:	438a      	bics	r2, r1
 80121f2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80121f4:	687b      	ldr	r3, [r7, #4]
 80121f6:	681b      	ldr	r3, [r3, #0]
 80121f8:	681a      	ldr	r2, [r3, #0]
 80121fa:	687b      	ldr	r3, [r7, #4]
 80121fc:	681b      	ldr	r3, [r3, #0]
 80121fe:	4911      	ldr	r1, [pc, #68]	@ (8012244 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8012200:	400a      	ands	r2, r1
 8012202:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8012204:	687b      	ldr	r3, [r7, #4]
 8012206:	681b      	ldr	r3, [r3, #0]
 8012208:	6819      	ldr	r1, [r3, #0]
 801220a:	687b      	ldr	r3, [r7, #4]
 801220c:	681b      	ldr	r3, [r3, #0]
 801220e:	683a      	ldr	r2, [r7, #0]
 8012210:	430a      	orrs	r2, r1
 8012212:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8012214:	687b      	ldr	r3, [r7, #4]
 8012216:	681b      	ldr	r3, [r3, #0]
 8012218:	681a      	ldr	r2, [r3, #0]
 801221a:	687b      	ldr	r3, [r7, #4]
 801221c:	681b      	ldr	r3, [r3, #0]
 801221e:	2101      	movs	r1, #1
 8012220:	430a      	orrs	r2, r1
 8012222:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8012224:	687b      	ldr	r3, [r7, #4]
 8012226:	2241      	movs	r2, #65	@ 0x41
 8012228:	2120      	movs	r1, #32
 801222a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 801222c:	687b      	ldr	r3, [r7, #4]
 801222e:	2240      	movs	r2, #64	@ 0x40
 8012230:	2100      	movs	r1, #0
 8012232:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8012234:	2300      	movs	r3, #0
 8012236:	e000      	b.n	801223a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8012238:	2302      	movs	r3, #2
  }
}
 801223a:	0018      	movs	r0, r3
 801223c:	46bd      	mov	sp, r7
 801223e:	b002      	add	sp, #8
 8012240:	bd80      	pop	{r7, pc}
 8012242:	46c0      	nop			@ (mov r8, r8)
 8012244:	ffffefff 	.word	0xffffefff

08012248 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8012248:	b580      	push	{r7, lr}
 801224a:	b084      	sub	sp, #16
 801224c:	af00      	add	r7, sp, #0
 801224e:	6078      	str	r0, [r7, #4]
 8012250:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8012252:	687b      	ldr	r3, [r7, #4]
 8012254:	2241      	movs	r2, #65	@ 0x41
 8012256:	5c9b      	ldrb	r3, [r3, r2]
 8012258:	b2db      	uxtb	r3, r3
 801225a:	2b20      	cmp	r3, #32
 801225c:	d139      	bne.n	80122d2 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 801225e:	687b      	ldr	r3, [r7, #4]
 8012260:	2240      	movs	r2, #64	@ 0x40
 8012262:	5c9b      	ldrb	r3, [r3, r2]
 8012264:	2b01      	cmp	r3, #1
 8012266:	d101      	bne.n	801226c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8012268:	2302      	movs	r3, #2
 801226a:	e033      	b.n	80122d4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 801226c:	687b      	ldr	r3, [r7, #4]
 801226e:	2240      	movs	r2, #64	@ 0x40
 8012270:	2101      	movs	r1, #1
 8012272:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8012274:	687b      	ldr	r3, [r7, #4]
 8012276:	2241      	movs	r2, #65	@ 0x41
 8012278:	2124      	movs	r1, #36	@ 0x24
 801227a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 801227c:	687b      	ldr	r3, [r7, #4]
 801227e:	681b      	ldr	r3, [r3, #0]
 8012280:	681a      	ldr	r2, [r3, #0]
 8012282:	687b      	ldr	r3, [r7, #4]
 8012284:	681b      	ldr	r3, [r3, #0]
 8012286:	2101      	movs	r1, #1
 8012288:	438a      	bics	r2, r1
 801228a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 801228c:	687b      	ldr	r3, [r7, #4]
 801228e:	681b      	ldr	r3, [r3, #0]
 8012290:	681b      	ldr	r3, [r3, #0]
 8012292:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8012294:	68fb      	ldr	r3, [r7, #12]
 8012296:	4a11      	ldr	r2, [pc, #68]	@ (80122dc <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8012298:	4013      	ands	r3, r2
 801229a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 801229c:	683b      	ldr	r3, [r7, #0]
 801229e:	021b      	lsls	r3, r3, #8
 80122a0:	68fa      	ldr	r2, [r7, #12]
 80122a2:	4313      	orrs	r3, r2
 80122a4:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80122a6:	687b      	ldr	r3, [r7, #4]
 80122a8:	681b      	ldr	r3, [r3, #0]
 80122aa:	68fa      	ldr	r2, [r7, #12]
 80122ac:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80122ae:	687b      	ldr	r3, [r7, #4]
 80122b0:	681b      	ldr	r3, [r3, #0]
 80122b2:	681a      	ldr	r2, [r3, #0]
 80122b4:	687b      	ldr	r3, [r7, #4]
 80122b6:	681b      	ldr	r3, [r3, #0]
 80122b8:	2101      	movs	r1, #1
 80122ba:	430a      	orrs	r2, r1
 80122bc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80122be:	687b      	ldr	r3, [r7, #4]
 80122c0:	2241      	movs	r2, #65	@ 0x41
 80122c2:	2120      	movs	r1, #32
 80122c4:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80122c6:	687b      	ldr	r3, [r7, #4]
 80122c8:	2240      	movs	r2, #64	@ 0x40
 80122ca:	2100      	movs	r1, #0
 80122cc:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80122ce:	2300      	movs	r3, #0
 80122d0:	e000      	b.n	80122d4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80122d2:	2302      	movs	r3, #2
  }
}
 80122d4:	0018      	movs	r0, r3
 80122d6:	46bd      	mov	sp, r7
 80122d8:	b004      	add	sp, #16
 80122da:	bd80      	pop	{r7, pc}
 80122dc:	fffff0ff 	.word	0xfffff0ff

080122e0 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 80122e0:	b580      	push	{r7, lr}
 80122e2:	b088      	sub	sp, #32
 80122e4:	af00      	add	r7, sp, #0
 80122e6:	6078      	str	r0, [r7, #4]
  uint32_t packetlength;
  uint32_t tmp;
  uint32_t i2sclk;

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 80122e8:	687b      	ldr	r3, [r7, #4]
 80122ea:	2b00      	cmp	r3, #0
 80122ec:	d101      	bne.n	80122f2 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 80122ee:	2301      	movs	r3, #1
 80122f0:	e0e1      	b.n	80124b6 <HAL_I2S_Init+0x1d6>
  assert_param(IS_I2S_DATA_FORMAT(hi2s->Init.DataFormat));
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 80122f2:	687b      	ldr	r3, [r7, #4]
 80122f4:	2235      	movs	r2, #53	@ 0x35
 80122f6:	5c9b      	ldrb	r3, [r3, r2]
 80122f8:	b2db      	uxtb	r3, r3
 80122fa:	2b00      	cmp	r3, #0
 80122fc:	d107      	bne.n	801230e <HAL_I2S_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 80122fe:	687b      	ldr	r3, [r7, #4]
 8012300:	2234      	movs	r2, #52	@ 0x34
 8012302:	2100      	movs	r1, #0
 8012304:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8012306:	687b      	ldr	r3, [r7, #4]
 8012308:	0018      	movs	r0, r3
 801230a:	f7f5 fb21 	bl	8007950 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 801230e:	687b      	ldr	r3, [r7, #4]
 8012310:	2235      	movs	r2, #53	@ 0x35
 8012312:	2102      	movs	r1, #2
 8012314:	5499      	strb	r1, [r3, r2]

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8012316:	687b      	ldr	r3, [r7, #4]
 8012318:	681b      	ldr	r3, [r3, #0]
 801231a:	69da      	ldr	r2, [r3, #28]
 801231c:	687b      	ldr	r3, [r7, #4]
 801231e:	681b      	ldr	r3, [r3, #0]
 8012320:	4967      	ldr	r1, [pc, #412]	@ (80124c0 <HAL_I2S_Init+0x1e0>)
 8012322:	400a      	ands	r2, r1
 8012324:	61da      	str	r2, [r3, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8012326:	687b      	ldr	r3, [r7, #4]
 8012328:	681b      	ldr	r3, [r3, #0]
 801232a:	2202      	movs	r2, #2
 801232c:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 801232e:	687b      	ldr	r3, [r7, #4]
 8012330:	695b      	ldr	r3, [r3, #20]
 8012332:	2b02      	cmp	r3, #2
 8012334:	d073      	beq.n	801241e <HAL_I2S_Init+0x13e>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8012336:	687b      	ldr	r3, [r7, #4]
 8012338:	68db      	ldr	r3, [r3, #12]
 801233a:	2b00      	cmp	r3, #0
 801233c:	d102      	bne.n	8012344 <HAL_I2S_Init+0x64>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 801233e:	2310      	movs	r3, #16
 8012340:	617b      	str	r3, [r7, #20]
 8012342:	e001      	b.n	8012348 <HAL_I2S_Init+0x68>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8012344:	2320      	movs	r3, #32
 8012346:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8012348:	687b      	ldr	r3, [r7, #4]
 801234a:	689b      	ldr	r3, [r3, #8]
 801234c:	2b20      	cmp	r3, #32
 801234e:	d802      	bhi.n	8012356 <HAL_I2S_Init+0x76>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8012350:	697b      	ldr	r3, [r7, #20]
 8012352:	005b      	lsls	r3, r3, #1
 8012354:	617b      	str	r3, [r7, #20]
    }

    /* Get the source clock value: based on System Clock value */
    i2sclk = HAL_RCC_GetSysClockFreq();
 8012356:	f002 febd 	bl	80150d4 <HAL_RCC_GetSysClockFreq>
 801235a:	0003      	movs	r3, r0
 801235c:	60fb      	str	r3, [r7, #12]

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 801235e:	687b      	ldr	r3, [r7, #4]
 8012360:	691a      	ldr	r2, [r3, #16]
 8012362:	2380      	movs	r3, #128	@ 0x80
 8012364:	009b      	lsls	r3, r3, #2
 8012366:	429a      	cmp	r2, r3
 8012368:	d131      	bne.n	80123ce <HAL_I2S_Init+0xee>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 801236a:	687b      	ldr	r3, [r7, #4]
 801236c:	68db      	ldr	r3, [r3, #12]
 801236e:	2b00      	cmp	r3, #0
 8012370:	d016      	beq.n	80123a0 <HAL_I2S_Init+0xc0>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8012372:	697b      	ldr	r3, [r7, #20]
 8012374:	009b      	lsls	r3, r3, #2
 8012376:	0019      	movs	r1, r3
 8012378:	68f8      	ldr	r0, [r7, #12]
 801237a:	f7ed ff13 	bl	80001a4 <__udivsi3>
 801237e:	0003      	movs	r3, r0
 8012380:	001a      	movs	r2, r3
 8012382:	0013      	movs	r3, r2
 8012384:	009b      	lsls	r3, r3, #2
 8012386:	189b      	adds	r3, r3, r2
 8012388:	005b      	lsls	r3, r3, #1
 801238a:	001a      	movs	r2, r3
 801238c:	687b      	ldr	r3, [r7, #4]
 801238e:	695b      	ldr	r3, [r3, #20]
 8012390:	0019      	movs	r1, r3
 8012392:	0010      	movs	r0, r2
 8012394:	f7ed ff06 	bl	80001a4 <__udivsi3>
 8012398:	0003      	movs	r3, r0
 801239a:	3305      	adds	r3, #5
 801239c:	613b      	str	r3, [r7, #16]
 801239e:	e02a      	b.n	80123f6 <HAL_I2S_Init+0x116>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80123a0:	697b      	ldr	r3, [r7, #20]
 80123a2:	00db      	lsls	r3, r3, #3
 80123a4:	0019      	movs	r1, r3
 80123a6:	68f8      	ldr	r0, [r7, #12]
 80123a8:	f7ed fefc 	bl	80001a4 <__udivsi3>
 80123ac:	0003      	movs	r3, r0
 80123ae:	001a      	movs	r2, r3
 80123b0:	0013      	movs	r3, r2
 80123b2:	009b      	lsls	r3, r3, #2
 80123b4:	189b      	adds	r3, r3, r2
 80123b6:	005b      	lsls	r3, r3, #1
 80123b8:	001a      	movs	r2, r3
 80123ba:	687b      	ldr	r3, [r7, #4]
 80123bc:	695b      	ldr	r3, [r3, #20]
 80123be:	0019      	movs	r1, r3
 80123c0:	0010      	movs	r0, r2
 80123c2:	f7ed feef 	bl	80001a4 <__udivsi3>
 80123c6:	0003      	movs	r3, r0
 80123c8:	3305      	adds	r3, #5
 80123ca:	613b      	str	r3, [r7, #16]
 80123cc:	e013      	b.n	80123f6 <HAL_I2S_Init+0x116>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80123ce:	6979      	ldr	r1, [r7, #20]
 80123d0:	68f8      	ldr	r0, [r7, #12]
 80123d2:	f7ed fee7 	bl	80001a4 <__udivsi3>
 80123d6:	0003      	movs	r3, r0
 80123d8:	001a      	movs	r2, r3
 80123da:	0013      	movs	r3, r2
 80123dc:	009b      	lsls	r3, r3, #2
 80123de:	189b      	adds	r3, r3, r2
 80123e0:	005b      	lsls	r3, r3, #1
 80123e2:	001a      	movs	r2, r3
 80123e4:	687b      	ldr	r3, [r7, #4]
 80123e6:	695b      	ldr	r3, [r3, #20]
 80123e8:	0019      	movs	r1, r3
 80123ea:	0010      	movs	r0, r2
 80123ec:	f7ed feda 	bl	80001a4 <__udivsi3>
 80123f0:	0003      	movs	r3, r0
 80123f2:	3305      	adds	r3, #5
 80123f4:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 80123f6:	693b      	ldr	r3, [r7, #16]
 80123f8:	210a      	movs	r1, #10
 80123fa:	0018      	movs	r0, r3
 80123fc:	f7ed fed2 	bl	80001a4 <__udivsi3>
 8012400:	0003      	movs	r3, r0
 8012402:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8012404:	693b      	ldr	r3, [r7, #16]
 8012406:	2201      	movs	r2, #1
 8012408:	4013      	ands	r3, r2
 801240a:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 801240c:	693a      	ldr	r2, [r7, #16]
 801240e:	69bb      	ldr	r3, [r7, #24]
 8012410:	1ad3      	subs	r3, r2, r3
 8012412:	085b      	lsrs	r3, r3, #1
 8012414:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8012416:	69bb      	ldr	r3, [r7, #24]
 8012418:	021b      	lsls	r3, r3, #8
 801241a:	61bb      	str	r3, [r7, #24]
 801241c:	e003      	b.n	8012426 <HAL_I2S_Init+0x146>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 801241e:	2302      	movs	r3, #2
 8012420:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8012422:	2300      	movs	r3, #0
 8012424:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8012426:	69fb      	ldr	r3, [r7, #28]
 8012428:	2b01      	cmp	r3, #1
 801242a:	d902      	bls.n	8012432 <HAL_I2S_Init+0x152>
 801242c:	69fb      	ldr	r3, [r7, #28]
 801242e:	2bff      	cmp	r3, #255	@ 0xff
 8012430:	d907      	bls.n	8012442 <HAL_I2S_Init+0x162>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8012432:	687b      	ldr	r3, [r7, #4]
 8012434:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012436:	2210      	movs	r2, #16
 8012438:	431a      	orrs	r2, r3
 801243a:	687b      	ldr	r3, [r7, #4]
 801243c:	639a      	str	r2, [r3, #56]	@ 0x38
    return  HAL_ERROR;
 801243e:	2301      	movs	r3, #1
 8012440:	e039      	b.n	80124b6 <HAL_I2S_Init+0x1d6>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8012442:	687b      	ldr	r3, [r7, #4]
 8012444:	691a      	ldr	r2, [r3, #16]
 8012446:	69bb      	ldr	r3, [r7, #24]
 8012448:	431a      	orrs	r2, r3
 801244a:	0011      	movs	r1, r2
 801244c:	687b      	ldr	r3, [r7, #4]
 801244e:	681b      	ldr	r3, [r3, #0]
 8012450:	69fa      	ldr	r2, [r7, #28]
 8012452:	430a      	orrs	r2, r1
 8012454:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8012456:	687b      	ldr	r3, [r7, #4]
 8012458:	681b      	ldr	r3, [r3, #0]
 801245a:	69db      	ldr	r3, [r3, #28]
 801245c:	4a18      	ldr	r2, [pc, #96]	@ (80124c0 <HAL_I2S_Init+0x1e0>)
 801245e:	401a      	ands	r2, r3
 8012460:	687b      	ldr	r3, [r7, #4]
 8012462:	6859      	ldr	r1, [r3, #4]
 8012464:	687b      	ldr	r3, [r7, #4]
 8012466:	689b      	ldr	r3, [r3, #8]
 8012468:	4319      	orrs	r1, r3
 801246a:	687b      	ldr	r3, [r7, #4]
 801246c:	68db      	ldr	r3, [r3, #12]
 801246e:	4319      	orrs	r1, r3
 8012470:	687b      	ldr	r3, [r7, #4]
 8012472:	699b      	ldr	r3, [r3, #24]
 8012474:	430b      	orrs	r3, r1
 8012476:	431a      	orrs	r2, r3
 8012478:	687b      	ldr	r3, [r7, #4]
 801247a:	681b      	ldr	r3, [r3, #0]
 801247c:	2180      	movs	r1, #128	@ 0x80
 801247e:	0109      	lsls	r1, r1, #4
 8012480:	430a      	orrs	r2, r1
 8012482:	61da      	str	r2, [r3, #28]
             (SPI_I2SCFGR_I2SMOD | hi2s->Init.Mode | \
              hi2s->Init.Standard | hi2s->Init.DataFormat | \
              hi2s->Init.CPOL));

#if defined(SPI_I2SCFGR_ASTRTEN)
  if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) || ((hi2s->Init.Standard == I2S_STANDARD_PCM_LONG)))
 8012484:	687b      	ldr	r3, [r7, #4]
 8012486:	689b      	ldr	r3, [r3, #8]
 8012488:	2b30      	cmp	r3, #48	@ 0x30
 801248a:	d003      	beq.n	8012494 <HAL_I2S_Init+0x1b4>
 801248c:	687b      	ldr	r3, [r7, #4]
 801248e:	689b      	ldr	r3, [r3, #8]
 8012490:	2bb0      	cmp	r3, #176	@ 0xb0
 8012492:	d108      	bne.n	80124a6 <HAL_I2S_Init+0x1c6>
  {
    /* Write to SPIx I2SCFGR */
    SET_BIT(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_ASTRTEN);
 8012494:	687b      	ldr	r3, [r7, #4]
 8012496:	681b      	ldr	r3, [r3, #0]
 8012498:	69da      	ldr	r2, [r3, #28]
 801249a:	687b      	ldr	r3, [r7, #4]
 801249c:	681b      	ldr	r3, [r3, #0]
 801249e:	2180      	movs	r1, #128	@ 0x80
 80124a0:	0149      	lsls	r1, r1, #5
 80124a2:	430a      	orrs	r2, r1
 80124a4:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2SCFGR_ASTRTEN */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80124a6:	687b      	ldr	r3, [r7, #4]
 80124a8:	2200      	movs	r2, #0
 80124aa:	639a      	str	r2, [r3, #56]	@ 0x38
  hi2s->State     = HAL_I2S_STATE_READY;
 80124ac:	687b      	ldr	r3, [r7, #4]
 80124ae:	2235      	movs	r2, #53	@ 0x35
 80124b0:	2101      	movs	r1, #1
 80124b2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80124b4:	2300      	movs	r3, #0
}
 80124b6:	0018      	movs	r0, r3
 80124b8:	46bd      	mov	sp, r7
 80124ba:	b008      	add	sp, #32
 80124bc:	bd80      	pop	{r7, pc}
 80124be:	46c0      	nop			@ (mov r8, r8)
 80124c0:	fffff040 	.word	0xfffff040

080124c4 <HAL_I2S_Receive_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Receive_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 80124c4:	b580      	push	{r7, lr}
 80124c6:	b086      	sub	sp, #24
 80124c8:	af00      	add	r7, sp, #0
 80124ca:	60f8      	str	r0, [r7, #12]
 80124cc:	60b9      	str	r1, [r7, #8]
 80124ce:	1dbb      	adds	r3, r7, #6
 80124d0:	801a      	strh	r2, [r3, #0]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 80124d2:	68bb      	ldr	r3, [r7, #8]
 80124d4:	2b00      	cmp	r3, #0
 80124d6:	d003      	beq.n	80124e0 <HAL_I2S_Receive_DMA+0x1c>
 80124d8:	1dbb      	adds	r3, r7, #6
 80124da:	881b      	ldrh	r3, [r3, #0]
 80124dc:	2b00      	cmp	r3, #0
 80124de:	d101      	bne.n	80124e4 <HAL_I2S_Receive_DMA+0x20>
  {
    return  HAL_ERROR;
 80124e0:	2301      	movs	r3, #1
 80124e2:	e0a6      	b.n	8012632 <HAL_I2S_Receive_DMA+0x16e>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 80124e4:	68fb      	ldr	r3, [r7, #12]
 80124e6:	2234      	movs	r2, #52	@ 0x34
 80124e8:	5c9b      	ldrb	r3, [r3, r2]
 80124ea:	b2db      	uxtb	r3, r3
 80124ec:	2b01      	cmp	r3, #1
 80124ee:	d101      	bne.n	80124f4 <HAL_I2S_Receive_DMA+0x30>
 80124f0:	2302      	movs	r3, #2
 80124f2:	e09e      	b.n	8012632 <HAL_I2S_Receive_DMA+0x16e>
 80124f4:	68fb      	ldr	r3, [r7, #12]
 80124f6:	2234      	movs	r2, #52	@ 0x34
 80124f8:	2101      	movs	r1, #1
 80124fa:	5499      	strb	r1, [r3, r2]

  if (hi2s->State != HAL_I2S_STATE_READY)
 80124fc:	68fb      	ldr	r3, [r7, #12]
 80124fe:	2235      	movs	r2, #53	@ 0x35
 8012500:	5c9b      	ldrb	r3, [r3, r2]
 8012502:	b2db      	uxtb	r3, r3
 8012504:	2b01      	cmp	r3, #1
 8012506:	d005      	beq.n	8012514 <HAL_I2S_Receive_DMA+0x50>
  {
    __HAL_UNLOCK(hi2s);
 8012508:	68fb      	ldr	r3, [r7, #12]
 801250a:	2234      	movs	r2, #52	@ 0x34
 801250c:	2100      	movs	r1, #0
 801250e:	5499      	strb	r1, [r3, r2]
    return HAL_BUSY;
 8012510:	2302      	movs	r3, #2
 8012512:	e08e      	b.n	8012632 <HAL_I2S_Receive_DMA+0x16e>
  }

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_RX;
 8012514:	68fb      	ldr	r3, [r7, #12]
 8012516:	2235      	movs	r2, #53	@ 0x35
 8012518:	2104      	movs	r1, #4
 801251a:	5499      	strb	r1, [r3, r2]
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 801251c:	68fb      	ldr	r3, [r7, #12]
 801251e:	2200      	movs	r2, #0
 8012520:	639a      	str	r2, [r3, #56]	@ 0x38
  hi2s->pRxBuffPtr = pData;
 8012522:	68fb      	ldr	r3, [r7, #12]
 8012524:	68ba      	ldr	r2, [r7, #8]
 8012526:	625a      	str	r2, [r3, #36]	@ 0x24

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 8012528:	68fb      	ldr	r3, [r7, #12]
 801252a:	681b      	ldr	r3, [r3, #0]
 801252c:	69db      	ldr	r3, [r3, #28]
 801252e:	2207      	movs	r2, #7
 8012530:	4013      	ands	r3, r2
 8012532:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 8012534:	697b      	ldr	r3, [r7, #20]
 8012536:	2b03      	cmp	r3, #3
 8012538:	d002      	beq.n	8012540 <HAL_I2S_Receive_DMA+0x7c>
 801253a:	697b      	ldr	r3, [r7, #20]
 801253c:	2b05      	cmp	r3, #5
 801253e:	d10c      	bne.n	801255a <HAL_I2S_Receive_DMA+0x96>
  {
    hi2s->RxXferSize = (Size << 1U);
 8012540:	1dbb      	adds	r3, r7, #6
 8012542:	881b      	ldrh	r3, [r3, #0]
 8012544:	18db      	adds	r3, r3, r3
 8012546:	b29a      	uxth	r2, r3
 8012548:	68fb      	ldr	r3, [r7, #12]
 801254a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2s->RxXferCount = (Size << 1U);
 801254c:	1dbb      	adds	r3, r7, #6
 801254e:	881b      	ldrh	r3, [r3, #0]
 8012550:	18db      	adds	r3, r3, r3
 8012552:	b29a      	uxth	r2, r3
 8012554:	68fb      	ldr	r3, [r7, #12]
 8012556:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8012558:	e007      	b.n	801256a <HAL_I2S_Receive_DMA+0xa6>
  }
  else
  {
    hi2s->RxXferSize = Size;
 801255a:	68fb      	ldr	r3, [r7, #12]
 801255c:	1dba      	adds	r2, r7, #6
 801255e:	8812      	ldrh	r2, [r2, #0]
 8012560:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2s->RxXferCount = Size;
 8012562:	68fb      	ldr	r3, [r7, #12]
 8012564:	1dba      	adds	r2, r7, #6
 8012566:	8812      	ldrh	r2, [r2, #0]
 8012568:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }

  /* Set the I2S Rx DMA Half transfer complete callback */
  hi2s->hdmarx->XferHalfCpltCallback = I2S_DMARxHalfCplt;
 801256a:	68fb      	ldr	r3, [r7, #12]
 801256c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801256e:	4a33      	ldr	r2, [pc, #204]	@ (801263c <HAL_I2S_Receive_DMA+0x178>)
 8012570:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Set the I2S Rx DMA transfer complete callback */
  hi2s->hdmarx->XferCpltCallback = I2S_DMARxCplt;
 8012572:	68fb      	ldr	r3, [r7, #12]
 8012574:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8012576:	4a32      	ldr	r2, [pc, #200]	@ (8012640 <HAL_I2S_Receive_DMA+0x17c>)
 8012578:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the DMA error callback */
  hi2s->hdmarx->XferErrorCallback = I2S_DMAError;
 801257a:	68fb      	ldr	r3, [r7, #12]
 801257c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801257e:	4a31      	ldr	r2, [pc, #196]	@ (8012644 <HAL_I2S_Receive_DMA+0x180>)
 8012580:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check if Master Receiver mode is selected */
  if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_RX)
 8012582:	68fb      	ldr	r3, [r7, #12]
 8012584:	681b      	ldr	r3, [r3, #0]
 8012586:	69da      	ldr	r2, [r3, #28]
 8012588:	23c0      	movs	r3, #192	@ 0xc0
 801258a:	009b      	lsls	r3, r3, #2
 801258c:	401a      	ands	r2, r3
 801258e:	23c0      	movs	r3, #192	@ 0xc0
 8012590:	009b      	lsls	r3, r3, #2
 8012592:	429a      	cmp	r2, r3
 8012594:	d10a      	bne.n	80125ac <HAL_I2S_Receive_DMA+0xe8>
  {
    /* Clear the Overrun Flag by a read operation to the SPI_DR register followed by a read
    access to the SPI_SR register. */
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8012596:	2300      	movs	r3, #0
 8012598:	613b      	str	r3, [r7, #16]
 801259a:	68fb      	ldr	r3, [r7, #12]
 801259c:	681b      	ldr	r3, [r3, #0]
 801259e:	68db      	ldr	r3, [r3, #12]
 80125a0:	613b      	str	r3, [r7, #16]
 80125a2:	68fb      	ldr	r3, [r7, #12]
 80125a4:	681b      	ldr	r3, [r3, #0]
 80125a6:	689b      	ldr	r3, [r3, #8]
 80125a8:	613b      	str	r3, [r7, #16]
 80125aa:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the Rx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, (uint32_t)hi2s->pRxBuffPtr,
 80125ac:	68fb      	ldr	r3, [r7, #12]
 80125ae:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80125b0:	68fb      	ldr	r3, [r7, #12]
 80125b2:	681b      	ldr	r3, [r3, #0]
 80125b4:	330c      	adds	r3, #12
 80125b6:	0019      	movs	r1, r3
 80125b8:	68fb      	ldr	r3, [r7, #12]
 80125ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80125bc:	001a      	movs	r2, r3
                                 hi2s->RxXferSize))
 80125be:	68fb      	ldr	r3, [r7, #12]
 80125c0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80125c2:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, (uint32_t)hi2s->pRxBuffPtr,
 80125c4:	f7fc fca2 	bl	800ef0c <HAL_DMA_Start_IT>
 80125c8:	1e03      	subs	r3, r0, #0
 80125ca:	d00f      	beq.n	80125ec <HAL_I2S_Receive_DMA+0x128>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 80125cc:	68fb      	ldr	r3, [r7, #12]
 80125ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80125d0:	2208      	movs	r2, #8
 80125d2:	431a      	orrs	r2, r3
 80125d4:	68fb      	ldr	r3, [r7, #12]
 80125d6:	639a      	str	r2, [r3, #56]	@ 0x38
    hi2s->State = HAL_I2S_STATE_READY;
 80125d8:	68fb      	ldr	r3, [r7, #12]
 80125da:	2235      	movs	r2, #53	@ 0x35
 80125dc:	2101      	movs	r1, #1
 80125de:	5499      	strb	r1, [r3, r2]

    __HAL_UNLOCK(hi2s);
 80125e0:	68fb      	ldr	r3, [r7, #12]
 80125e2:	2234      	movs	r2, #52	@ 0x34
 80125e4:	2100      	movs	r1, #0
 80125e6:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 80125e8:	2301      	movs	r3, #1
 80125ea:	e022      	b.n	8012632 <HAL_I2S_Receive_DMA+0x16e>
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 80125ec:	68fb      	ldr	r3, [r7, #12]
 80125ee:	681b      	ldr	r3, [r3, #0]
 80125f0:	69da      	ldr	r2, [r3, #28]
 80125f2:	2380      	movs	r3, #128	@ 0x80
 80125f4:	00db      	lsls	r3, r3, #3
 80125f6:	4013      	ands	r3, r2
 80125f8:	d108      	bne.n	801260c <HAL_I2S_Receive_DMA+0x148>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 80125fa:	68fb      	ldr	r3, [r7, #12]
 80125fc:	681b      	ldr	r3, [r3, #0]
 80125fe:	69da      	ldr	r2, [r3, #28]
 8012600:	68fb      	ldr	r3, [r7, #12]
 8012602:	681b      	ldr	r3, [r3, #0]
 8012604:	2180      	movs	r1, #128	@ 0x80
 8012606:	00c9      	lsls	r1, r1, #3
 8012608:	430a      	orrs	r2, r1
 801260a:	61da      	str	r2, [r3, #28]
  }

  /* Check if the I2S Rx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_RXDMAEN))
 801260c:	68fb      	ldr	r3, [r7, #12]
 801260e:	681b      	ldr	r3, [r3, #0]
 8012610:	685b      	ldr	r3, [r3, #4]
 8012612:	2201      	movs	r2, #1
 8012614:	4013      	ands	r3, r2
 8012616:	d107      	bne.n	8012628 <HAL_I2S_Receive_DMA+0x164>
  {
    /* Enable Rx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8012618:	68fb      	ldr	r3, [r7, #12]
 801261a:	681b      	ldr	r3, [r3, #0]
 801261c:	685a      	ldr	r2, [r3, #4]
 801261e:	68fb      	ldr	r3, [r7, #12]
 8012620:	681b      	ldr	r3, [r3, #0]
 8012622:	2101      	movs	r1, #1
 8012624:	430a      	orrs	r2, r1
 8012626:	605a      	str	r2, [r3, #4]
  }

  __HAL_UNLOCK(hi2s);
 8012628:	68fb      	ldr	r3, [r7, #12]
 801262a:	2234      	movs	r2, #52	@ 0x34
 801262c:	2100      	movs	r1, #0
 801262e:	5499      	strb	r1, [r3, r2]
  return HAL_OK;
 8012630:	2300      	movs	r3, #0
}
 8012632:	0018      	movs	r0, r3
 8012634:	46bd      	mov	sp, r7
 8012636:	b006      	add	sp, #24
 8012638:	bd80      	pop	{r7, pc}
 801263a:	46c0      	nop			@ (mov r8, r8)
 801263c:	08012825 	.word	0x08012825
 8012640:	080127e1 	.word	0x080127e1
 8012644:	08012843 	.word	0x08012843

08012648 <HAL_I2S_DMAStop>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_DMAStop(I2S_HandleTypeDef *hi2s)
{
 8012648:	b580      	push	{r7, lr}
 801264a:	b086      	sub	sp, #24
 801264c:	af00      	add	r7, sp, #0
 801264e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8012650:	2317      	movs	r3, #23
 8012652:	18fb      	adds	r3, r7, r3
 8012654:	2200      	movs	r2, #0
 8012656:	701a      	strb	r2, [r3, #0]
     to call the HAL SPI API under callbacks HAL_I2S_TxCpltCallback() or HAL_I2S_RxCpltCallback()
     when calling HAL_DMA_Abort() API the DMA TX or RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_I2S_TxCpltCallback() or HAL_I2S_RxCpltCallback()
     */

  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8012658:	687b      	ldr	r3, [r7, #4]
 801265a:	685a      	ldr	r2, [r3, #4]
 801265c:	2380      	movs	r3, #128	@ 0x80
 801265e:	009b      	lsls	r3, r3, #2
 8012660:	429a      	cmp	r2, r3
 8012662:	d003      	beq.n	801266c <HAL_I2S_DMAStop+0x24>
 8012664:	687b      	ldr	r3, [r7, #4]
 8012666:	685b      	ldr	r3, [r3, #4]
 8012668:	2b00      	cmp	r3, #0
 801266a:	d158      	bne.n	801271e <HAL_I2S_DMAStop+0xd6>
  {
    /* Abort the I2S DMA tx Stream/Channel */
    if (hi2s->hdmatx != NULL)
 801266c:	687b      	ldr	r3, [r7, #4]
 801266e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012670:	2b00      	cmp	r3, #0
 8012672:	d010      	beq.n	8012696 <HAL_I2S_DMAStop+0x4e>
    {
      /* Disable the I2S DMA tx Stream/Channel */
      if (HAL_OK != HAL_DMA_Abort(hi2s->hdmatx))
 8012674:	687b      	ldr	r3, [r7, #4]
 8012676:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012678:	0018      	movs	r0, r3
 801267a:	f7fc fcad 	bl	800efd8 <HAL_DMA_Abort>
 801267e:	1e03      	subs	r3, r0, #0
 8012680:	d009      	beq.n	8012696 <HAL_I2S_DMAStop+0x4e>
      {
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8012682:	687b      	ldr	r3, [r7, #4]
 8012684:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012686:	2208      	movs	r2, #8
 8012688:	431a      	orrs	r2, r3
 801268a:	687b      	ldr	r3, [r7, #4]
 801268c:	639a      	str	r2, [r3, #56]	@ 0x38
        errorcode = HAL_ERROR;
 801268e:	2317      	movs	r3, #23
 8012690:	18fb      	adds	r3, r7, r3
 8012692:	2201      	movs	r2, #1
 8012694:	701a      	strb	r2, [r3, #0]
      }
    }

    /* Wait until TXE flag is set */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_TXE, SET, I2S_TIMEOUT_FLAG) != HAL_OK)
 8012696:	6878      	ldr	r0, [r7, #4]
 8012698:	2364      	movs	r3, #100	@ 0x64
 801269a:	2201      	movs	r2, #1
 801269c:	2102      	movs	r1, #2
 801269e:	f000 f8f7 	bl	8012890 <I2S_WaitFlagStateUntilTimeout>
 80126a2:	1e03      	subs	r3, r0, #0
 80126a4:	d00d      	beq.n	80126c2 <HAL_I2S_DMAStop+0x7a>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 80126a6:	687b      	ldr	r3, [r7, #4]
 80126a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80126aa:	2201      	movs	r2, #1
 80126ac:	431a      	orrs	r2, r3
 80126ae:	687b      	ldr	r3, [r7, #4]
 80126b0:	639a      	str	r2, [r3, #56]	@ 0x38
      hi2s->State = HAL_I2S_STATE_READY;
 80126b2:	687b      	ldr	r3, [r7, #4]
 80126b4:	2235      	movs	r2, #53	@ 0x35
 80126b6:	2101      	movs	r1, #1
 80126b8:	5499      	strb	r1, [r3, r2]
      errorcode   = HAL_ERROR;
 80126ba:	2317      	movs	r3, #23
 80126bc:	18fb      	adds	r3, r7, r3
 80126be:	2201      	movs	r2, #1
 80126c0:	701a      	strb	r2, [r3, #0]
    }

    /* Wait until BSY flag is Reset */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_BSY, RESET, I2S_TIMEOUT_FLAG) != HAL_OK)
 80126c2:	6878      	ldr	r0, [r7, #4]
 80126c4:	2364      	movs	r3, #100	@ 0x64
 80126c6:	2200      	movs	r2, #0
 80126c8:	2180      	movs	r1, #128	@ 0x80
 80126ca:	f000 f8e1 	bl	8012890 <I2S_WaitFlagStateUntilTimeout>
 80126ce:	1e03      	subs	r3, r0, #0
 80126d0:	d00d      	beq.n	80126ee <HAL_I2S_DMAStop+0xa6>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 80126d2:	687b      	ldr	r3, [r7, #4]
 80126d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80126d6:	2201      	movs	r2, #1
 80126d8:	431a      	orrs	r2, r3
 80126da:	687b      	ldr	r3, [r7, #4]
 80126dc:	639a      	str	r2, [r3, #56]	@ 0x38
      hi2s->State = HAL_I2S_STATE_READY;
 80126de:	687b      	ldr	r3, [r7, #4]
 80126e0:	2235      	movs	r2, #53	@ 0x35
 80126e2:	2101      	movs	r1, #1
 80126e4:	5499      	strb	r1, [r3, r2]
      errorcode   = HAL_ERROR;
 80126e6:	2317      	movs	r3, #23
 80126e8:	18fb      	adds	r3, r7, r3
 80126ea:	2201      	movs	r2, #1
 80126ec:	701a      	strb	r2, [r3, #0]
    }

    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 80126ee:	687b      	ldr	r3, [r7, #4]
 80126f0:	681b      	ldr	r3, [r3, #0]
 80126f2:	69da      	ldr	r2, [r3, #28]
 80126f4:	687b      	ldr	r3, [r7, #4]
 80126f6:	681b      	ldr	r3, [r3, #0]
 80126f8:	4938      	ldr	r1, [pc, #224]	@ (80127dc <HAL_I2S_DMAStop+0x194>)
 80126fa:	400a      	ands	r2, r1
 80126fc:	61da      	str	r2, [r3, #28]

    /* Clear UDR flag */
    __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80126fe:	2300      	movs	r3, #0
 8012700:	613b      	str	r3, [r7, #16]
 8012702:	687b      	ldr	r3, [r7, #4]
 8012704:	681b      	ldr	r3, [r3, #0]
 8012706:	689b      	ldr	r3, [r3, #8]
 8012708:	613b      	str	r3, [r7, #16]
 801270a:	693b      	ldr	r3, [r7, #16]

    /* Disable the I2S Tx DMA requests */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 801270c:	687b      	ldr	r3, [r7, #4]
 801270e:	681b      	ldr	r3, [r3, #0]
 8012710:	685a      	ldr	r2, [r3, #4]
 8012712:	687b      	ldr	r3, [r7, #4]
 8012714:	681b      	ldr	r3, [r3, #0]
 8012716:	2102      	movs	r1, #2
 8012718:	438a      	bics	r2, r1
 801271a:	605a      	str	r2, [r3, #4]
 801271c:	e053      	b.n	80127c6 <HAL_I2S_DMAStop+0x17e>

  }

  else if ((hi2s->Init.Mode == I2S_MODE_MASTER_RX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_RX))
 801271e:	687b      	ldr	r3, [r7, #4]
 8012720:	685a      	ldr	r2, [r3, #4]
 8012722:	23c0      	movs	r3, #192	@ 0xc0
 8012724:	009b      	lsls	r3, r3, #2
 8012726:	429a      	cmp	r2, r3
 8012728:	d005      	beq.n	8012736 <HAL_I2S_DMAStop+0xee>
 801272a:	687b      	ldr	r3, [r7, #4]
 801272c:	685a      	ldr	r2, [r3, #4]
 801272e:	2380      	movs	r3, #128	@ 0x80
 8012730:	005b      	lsls	r3, r3, #1
 8012732:	429a      	cmp	r2, r3
 8012734:	d147      	bne.n	80127c6 <HAL_I2S_DMAStop+0x17e>
  {
    /* Abort the I2S DMA rx Stream/Channel */
    if (hi2s->hdmarx != NULL)
 8012736:	687b      	ldr	r3, [r7, #4]
 8012738:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801273a:	2b00      	cmp	r3, #0
 801273c:	d010      	beq.n	8012760 <HAL_I2S_DMAStop+0x118>
    {
      /* Disable the I2S DMA rx Stream/Channel */
      if (HAL_OK != HAL_DMA_Abort(hi2s->hdmarx))
 801273e:	687b      	ldr	r3, [r7, #4]
 8012740:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8012742:	0018      	movs	r0, r3
 8012744:	f7fc fc48 	bl	800efd8 <HAL_DMA_Abort>
 8012748:	1e03      	subs	r3, r0, #0
 801274a:	d009      	beq.n	8012760 <HAL_I2S_DMAStop+0x118>
      {
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 801274c:	687b      	ldr	r3, [r7, #4]
 801274e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012750:	2208      	movs	r2, #8
 8012752:	431a      	orrs	r2, r3
 8012754:	687b      	ldr	r3, [r7, #4]
 8012756:	639a      	str	r2, [r3, #56]	@ 0x38
        errorcode = HAL_ERROR;
 8012758:	2317      	movs	r3, #23
 801275a:	18fb      	adds	r3, r7, r3
 801275c:	2201      	movs	r2, #1
 801275e:	701a      	strb	r2, [r3, #0]
      }
    }

    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 8012760:	687b      	ldr	r3, [r7, #4]
 8012762:	681b      	ldr	r3, [r3, #0]
 8012764:	69da      	ldr	r2, [r3, #28]
 8012766:	687b      	ldr	r3, [r7, #4]
 8012768:	681b      	ldr	r3, [r3, #0]
 801276a:	491c      	ldr	r1, [pc, #112]	@ (80127dc <HAL_I2S_DMAStop+0x194>)
 801276c:	400a      	ands	r2, r1
 801276e:	61da      	str	r2, [r3, #28]

    /* Clear OVR flag */
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8012770:	2300      	movs	r3, #0
 8012772:	60fb      	str	r3, [r7, #12]
 8012774:	687b      	ldr	r3, [r7, #4]
 8012776:	681b      	ldr	r3, [r3, #0]
 8012778:	68db      	ldr	r3, [r3, #12]
 801277a:	60fb      	str	r3, [r7, #12]
 801277c:	687b      	ldr	r3, [r7, #4]
 801277e:	681b      	ldr	r3, [r3, #0]
 8012780:	689b      	ldr	r3, [r3, #8]
 8012782:	60fb      	str	r3, [r7, #12]
 8012784:	68fb      	ldr	r3, [r7, #12]

    /* Disable the I2S Rx DMA request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8012786:	687b      	ldr	r3, [r7, #4]
 8012788:	681b      	ldr	r3, [r3, #0]
 801278a:	685a      	ldr	r2, [r3, #4]
 801278c:	687b      	ldr	r3, [r7, #4]
 801278e:	681b      	ldr	r3, [r3, #0]
 8012790:	2101      	movs	r1, #1
 8012792:	438a      	bics	r2, r1
 8012794:	605a      	str	r2, [r3, #4]

    if (hi2s->Init.Mode == I2S_MODE_SLAVE_RX)
 8012796:	687b      	ldr	r3, [r7, #4]
 8012798:	685a      	ldr	r2, [r3, #4]
 801279a:	2380      	movs	r3, #128	@ 0x80
 801279c:	005b      	lsls	r3, r3, #1
 801279e:	429a      	cmp	r2, r3
 80127a0:	d10e      	bne.n	80127c0 <HAL_I2S_DMAStop+0x178>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_BUSY_LINE_RX);
 80127a2:	687b      	ldr	r3, [r7, #4]
 80127a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80127a6:	2240      	movs	r2, #64	@ 0x40
 80127a8:	431a      	orrs	r2, r3
 80127aa:	687b      	ldr	r3, [r7, #4]
 80127ac:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80127ae:	687b      	ldr	r3, [r7, #4]
 80127b0:	2235      	movs	r2, #53	@ 0x35
 80127b2:	2101      	movs	r1, #1
 80127b4:	5499      	strb	r1, [r3, r2]
      errorcode = HAL_ERROR;
 80127b6:	2317      	movs	r3, #23
 80127b8:	18fb      	adds	r3, r7, r3
 80127ba:	2201      	movs	r2, #1
 80127bc:	701a      	strb	r2, [r3, #0]
 80127be:	e002      	b.n	80127c6 <HAL_I2S_DMAStop+0x17e>
    }
    else
    {
      /* Read DR to Flush RX Data */
      READ_REG((hi2s->Instance)->DR);
 80127c0:	687b      	ldr	r3, [r7, #4]
 80127c2:	681b      	ldr	r3, [r3, #0]
 80127c4:	68db      	ldr	r3, [r3, #12]
    }
  }

  hi2s->State = HAL_I2S_STATE_READY;
 80127c6:	687b      	ldr	r3, [r7, #4]
 80127c8:	2235      	movs	r2, #53	@ 0x35
 80127ca:	2101      	movs	r1, #1
 80127cc:	5499      	strb	r1, [r3, r2]

  return errorcode;
 80127ce:	2317      	movs	r3, #23
 80127d0:	18fb      	adds	r3, r7, r3
 80127d2:	781b      	ldrb	r3, [r3, #0]
}
 80127d4:	0018      	movs	r0, r3
 80127d6:	46bd      	mov	sp, r7
 80127d8:	b006      	add	sp, #24
 80127da:	bd80      	pop	{r7, pc}
 80127dc:	fffffbff 	.word	0xfffffbff

080127e0 <I2S_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 80127e0:	b580      	push	{r7, lr}
 80127e2:	b084      	sub	sp, #16
 80127e4:	af00      	add	r7, sp, #0
 80127e6:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80127e8:	687b      	ldr	r3, [r7, #4]
 80127ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80127ec:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 80127ee:	687b      	ldr	r3, [r7, #4]
 80127f0:	69db      	ldr	r3, [r3, #28]
 80127f2:	2b00      	cmp	r3, #0
 80127f4:	d10e      	bne.n	8012814 <I2S_DMARxCplt+0x34>
  {
    /* Disable Rx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 80127f6:	68fb      	ldr	r3, [r7, #12]
 80127f8:	681b      	ldr	r3, [r3, #0]
 80127fa:	685a      	ldr	r2, [r3, #4]
 80127fc:	68fb      	ldr	r3, [r7, #12]
 80127fe:	681b      	ldr	r3, [r3, #0]
 8012800:	2101      	movs	r1, #1
 8012802:	438a      	bics	r2, r1
 8012804:	605a      	str	r2, [r3, #4]
    hi2s->RxXferCount = 0U;
 8012806:	68fb      	ldr	r3, [r7, #12]
 8012808:	2200      	movs	r2, #0
 801280a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2s->State = HAL_I2S_STATE_READY;
 801280c:	68fb      	ldr	r3, [r7, #12]
 801280e:	2235      	movs	r2, #53	@ 0x35
 8012810:	2101      	movs	r1, #1
 8012812:	5499      	strb	r1, [r3, r2]
  }
  /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->RxCpltCallback(hi2s);
#else
  HAL_I2S_RxCpltCallback(hi2s);
 8012814:	68fb      	ldr	r3, [r7, #12]
 8012816:	0018      	movs	r0, r3
 8012818:	f7f9 fbde 	bl	800bfd8 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 801281c:	46c0      	nop			@ (mov r8, r8)
 801281e:	46bd      	mov	sp, r7
 8012820:	b004      	add	sp, #16
 8012822:	bd80      	pop	{r7, pc}

08012824 <I2S_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8012824:	b580      	push	{r7, lr}
 8012826:	b084      	sub	sp, #16
 8012828:	af00      	add	r7, sp, #0
 801282a:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 801282c:	687b      	ldr	r3, [r7, #4]
 801282e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012830:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->RxHalfCpltCallback(hi2s);
#else
  HAL_I2S_RxHalfCpltCallback(hi2s);
 8012832:	68fb      	ldr	r3, [r7, #12]
 8012834:	0018      	movs	r0, r3
 8012836:	f7f9 fbbd 	bl	800bfb4 <HAL_I2S_RxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 801283a:	46c0      	nop			@ (mov r8, r8)
 801283c:	46bd      	mov	sp, r7
 801283e:	b004      	add	sp, #16
 8012840:	bd80      	pop	{r7, pc}

08012842 <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 8012842:	b580      	push	{r7, lr}
 8012844:	b084      	sub	sp, #16
 8012846:	af00      	add	r7, sp, #0
 8012848:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 801284a:	687b      	ldr	r3, [r7, #4]
 801284c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801284e:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8012850:	68fb      	ldr	r3, [r7, #12]
 8012852:	681b      	ldr	r3, [r3, #0]
 8012854:	685a      	ldr	r2, [r3, #4]
 8012856:	68fb      	ldr	r3, [r7, #12]
 8012858:	681b      	ldr	r3, [r3, #0]
 801285a:	2103      	movs	r1, #3
 801285c:	438a      	bics	r2, r1
 801285e:	605a      	str	r2, [r3, #4]
  hi2s->TxXferCount = 0U;
 8012860:	68fb      	ldr	r3, [r7, #12]
 8012862:	2200      	movs	r2, #0
 8012864:	845a      	strh	r2, [r3, #34]	@ 0x22
  hi2s->RxXferCount = 0U;
 8012866:	68fb      	ldr	r3, [r7, #12]
 8012868:	2200      	movs	r2, #0
 801286a:	855a      	strh	r2, [r3, #42]	@ 0x2a

  hi2s->State = HAL_I2S_STATE_READY;
 801286c:	68fb      	ldr	r3, [r7, #12]
 801286e:	2235      	movs	r2, #53	@ 0x35
 8012870:	2101      	movs	r1, #1
 8012872:	5499      	strb	r1, [r3, r2]

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8012874:	68fb      	ldr	r3, [r7, #12]
 8012876:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012878:	2208      	movs	r2, #8
 801287a:	431a      	orrs	r2, r3
 801287c:	68fb      	ldr	r3, [r7, #12]
 801287e:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 8012880:	68fb      	ldr	r3, [r7, #12]
 8012882:	0018      	movs	r0, r3
 8012884:	f7f9 fbf6 	bl	800c074 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8012888:	46c0      	nop			@ (mov r8, r8)
 801288a:	46bd      	mov	sp, r7
 801288c:	b004      	add	sp, #16
 801288e:	bd80      	pop	{r7, pc}

08012890 <I2S_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef I2S_WaitFlagStateUntilTimeout(I2S_HandleTypeDef *hi2s, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout)
{
 8012890:	b580      	push	{r7, lr}
 8012892:	b086      	sub	sp, #24
 8012894:	af00      	add	r7, sp, #0
 8012896:	60f8      	str	r0, [r7, #12]
 8012898:	60b9      	str	r1, [r7, #8]
 801289a:	603b      	str	r3, [r7, #0]
 801289c:	1dfb      	adds	r3, r7, #7
 801289e:	701a      	strb	r2, [r3, #0]
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 80128a0:	f7fb fde2 	bl	800e468 <HAL_GetTick>
 80128a4:	0003      	movs	r3, r0
 80128a6:	617b      	str	r3, [r7, #20]

  /* Wait until flag is set to status*/
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 80128a8:	e017      	b.n	80128da <I2S_WaitFlagStateUntilTimeout+0x4a>
  {
    if (Timeout != HAL_MAX_DELAY)
 80128aa:	683b      	ldr	r3, [r7, #0]
 80128ac:	3301      	adds	r3, #1
 80128ae:	d014      	beq.n	80128da <I2S_WaitFlagStateUntilTimeout+0x4a>
    {
      if (((HAL_GetTick() - tickstart) >= Timeout) || (Timeout == 0U))
 80128b0:	f7fb fdda 	bl	800e468 <HAL_GetTick>
 80128b4:	0002      	movs	r2, r0
 80128b6:	697b      	ldr	r3, [r7, #20]
 80128b8:	1ad3      	subs	r3, r2, r3
 80128ba:	683a      	ldr	r2, [r7, #0]
 80128bc:	429a      	cmp	r2, r3
 80128be:	d902      	bls.n	80128c6 <I2S_WaitFlagStateUntilTimeout+0x36>
 80128c0:	683b      	ldr	r3, [r7, #0]
 80128c2:	2b00      	cmp	r3, #0
 80128c4:	d109      	bne.n	80128da <I2S_WaitFlagStateUntilTimeout+0x4a>
      {
        /* Set the I2S State ready */
        hi2s->State = HAL_I2S_STATE_READY;
 80128c6:	68fb      	ldr	r3, [r7, #12]
 80128c8:	2235      	movs	r2, #53	@ 0x35
 80128ca:	2101      	movs	r1, #1
 80128cc:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2s);
 80128ce:	68fb      	ldr	r3, [r7, #12]
 80128d0:	2234      	movs	r2, #52	@ 0x34
 80128d2:	2100      	movs	r1, #0
 80128d4:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80128d6:	2303      	movs	r3, #3
 80128d8:	e00f      	b.n	80128fa <I2S_WaitFlagStateUntilTimeout+0x6a>
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 80128da:	68fb      	ldr	r3, [r7, #12]
 80128dc:	681b      	ldr	r3, [r3, #0]
 80128de:	689b      	ldr	r3, [r3, #8]
 80128e0:	68ba      	ldr	r2, [r7, #8]
 80128e2:	4013      	ands	r3, r2
 80128e4:	68ba      	ldr	r2, [r7, #8]
 80128e6:	1ad3      	subs	r3, r2, r3
 80128e8:	425a      	negs	r2, r3
 80128ea:	4153      	adcs	r3, r2
 80128ec:	b2db      	uxtb	r3, r3
 80128ee:	001a      	movs	r2, r3
 80128f0:	1dfb      	adds	r3, r7, #7
 80128f2:	781b      	ldrb	r3, [r3, #0]
 80128f4:	429a      	cmp	r2, r3
 80128f6:	d1d8      	bne.n	80128aa <I2S_WaitFlagStateUntilTimeout+0x1a>
      }
    }
  }
  return HAL_OK;
 80128f8:	2300      	movs	r3, #0
}
 80128fa:	0018      	movs	r0, r3
 80128fc:	46bd      	mov	sp, r7
 80128fe:	b006      	add	sp, #24
 8012900:	bd80      	pop	{r7, pc}
	...

08012904 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8012904:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012906:	b08b      	sub	sp, #44	@ 0x2c
 8012908:	af06      	add	r7, sp, #24
 801290a:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 801290c:	687b      	ldr	r3, [r7, #4]
 801290e:	2b00      	cmp	r3, #0
 8012910:	d101      	bne.n	8012916 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8012912:	2301      	movs	r3, #1
 8012914:	e0f0      	b.n	8012af8 <HAL_PCD_Init+0x1f4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8012916:	687b      	ldr	r3, [r7, #4]
 8012918:	4a79      	ldr	r2, [pc, #484]	@ (8012b00 <HAL_PCD_Init+0x1fc>)
 801291a:	5c9b      	ldrb	r3, [r3, r2]
 801291c:	b2db      	uxtb	r3, r3
 801291e:	2b00      	cmp	r3, #0
 8012920:	d108      	bne.n	8012934 <HAL_PCD_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8012922:	687a      	ldr	r2, [r7, #4]
 8012924:	23aa      	movs	r3, #170	@ 0xaa
 8012926:	009b      	lsls	r3, r3, #2
 8012928:	2100      	movs	r1, #0
 801292a:	54d1      	strb	r1, [r2, r3]

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 801292c:	687b      	ldr	r3, [r7, #4]
 801292e:	0018      	movs	r0, r3
 8012930:	f009 ff34 	bl	801c79c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8012934:	687b      	ldr	r3, [r7, #4]
 8012936:	4a72      	ldr	r2, [pc, #456]	@ (8012b00 <HAL_PCD_Init+0x1fc>)
 8012938:	2103      	movs	r1, #3
 801293a:	5499      	strb	r1, [r3, r2]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 801293c:	687b      	ldr	r3, [r7, #4]
 801293e:	681b      	ldr	r3, [r3, #0]
 8012940:	0018      	movs	r0, r3
 8012942:	f005 fee7 	bl	8018714 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8012946:	230f      	movs	r3, #15
 8012948:	18fb      	adds	r3, r7, r3
 801294a:	2200      	movs	r2, #0
 801294c:	701a      	strb	r2, [r3, #0]
 801294e:	e049      	b.n	80129e4 <HAL_PCD_Init+0xe0>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8012950:	200f      	movs	r0, #15
 8012952:	183b      	adds	r3, r7, r0
 8012954:	781b      	ldrb	r3, [r3, #0]
 8012956:	6879      	ldr	r1, [r7, #4]
 8012958:	1c5a      	adds	r2, r3, #1
 801295a:	0013      	movs	r3, r2
 801295c:	009b      	lsls	r3, r3, #2
 801295e:	189b      	adds	r3, r3, r2
 8012960:	00db      	lsls	r3, r3, #3
 8012962:	18cb      	adds	r3, r1, r3
 8012964:	3301      	adds	r3, #1
 8012966:	2201      	movs	r2, #1
 8012968:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 801296a:	183b      	adds	r3, r7, r0
 801296c:	781b      	ldrb	r3, [r3, #0]
 801296e:	6879      	ldr	r1, [r7, #4]
 8012970:	1c5a      	adds	r2, r3, #1
 8012972:	0013      	movs	r3, r2
 8012974:	009b      	lsls	r3, r3, #2
 8012976:	189b      	adds	r3, r3, r2
 8012978:	00db      	lsls	r3, r3, #3
 801297a:	183a      	adds	r2, r7, r0
 801297c:	7812      	ldrb	r2, [r2, #0]
 801297e:	545a      	strb	r2, [r3, r1]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8012980:	183b      	adds	r3, r7, r0
 8012982:	781b      	ldrb	r3, [r3, #0]
 8012984:	6879      	ldr	r1, [r7, #4]
 8012986:	1c5a      	adds	r2, r3, #1
 8012988:	0013      	movs	r3, r2
 801298a:	009b      	lsls	r3, r3, #2
 801298c:	189b      	adds	r3, r3, r2
 801298e:	00db      	lsls	r3, r3, #3
 8012990:	18cb      	adds	r3, r1, r3
 8012992:	3303      	adds	r3, #3
 8012994:	2200      	movs	r2, #0
 8012996:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8012998:	183b      	adds	r3, r7, r0
 801299a:	781a      	ldrb	r2, [r3, #0]
 801299c:	6879      	ldr	r1, [r7, #4]
 801299e:	0013      	movs	r3, r2
 80129a0:	009b      	lsls	r3, r3, #2
 80129a2:	189b      	adds	r3, r3, r2
 80129a4:	00db      	lsls	r3, r3, #3
 80129a6:	18cb      	adds	r3, r1, r3
 80129a8:	3338      	adds	r3, #56	@ 0x38
 80129aa:	2200      	movs	r2, #0
 80129ac:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80129ae:	183b      	adds	r3, r7, r0
 80129b0:	781a      	ldrb	r2, [r3, #0]
 80129b2:	6879      	ldr	r1, [r7, #4]
 80129b4:	0013      	movs	r3, r2
 80129b6:	009b      	lsls	r3, r3, #2
 80129b8:	189b      	adds	r3, r3, r2
 80129ba:	00db      	lsls	r3, r3, #3
 80129bc:	18cb      	adds	r3, r1, r3
 80129be:	333c      	adds	r3, #60	@ 0x3c
 80129c0:	2200      	movs	r2, #0
 80129c2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80129c4:	183b      	adds	r3, r7, r0
 80129c6:	781a      	ldrb	r2, [r3, #0]
 80129c8:	6879      	ldr	r1, [r7, #4]
 80129ca:	0013      	movs	r3, r2
 80129cc:	009b      	lsls	r3, r3, #2
 80129ce:	189b      	adds	r3, r3, r2
 80129d0:	00db      	lsls	r3, r3, #3
 80129d2:	18cb      	adds	r3, r1, r3
 80129d4:	3340      	adds	r3, #64	@ 0x40
 80129d6:	2200      	movs	r2, #0
 80129d8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80129da:	183b      	adds	r3, r7, r0
 80129dc:	781a      	ldrb	r2, [r3, #0]
 80129de:	183b      	adds	r3, r7, r0
 80129e0:	3201      	adds	r2, #1
 80129e2:	701a      	strb	r2, [r3, #0]
 80129e4:	210f      	movs	r1, #15
 80129e6:	187b      	adds	r3, r7, r1
 80129e8:	781a      	ldrb	r2, [r3, #0]
 80129ea:	687b      	ldr	r3, [r7, #4]
 80129ec:	685b      	ldr	r3, [r3, #4]
 80129ee:	429a      	cmp	r2, r3
 80129f0:	d3ae      	bcc.n	8012950 <HAL_PCD_Init+0x4c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80129f2:	187b      	adds	r3, r7, r1
 80129f4:	2200      	movs	r2, #0
 80129f6:	701a      	strb	r2, [r3, #0]
 80129f8:	e056      	b.n	8012aa8 <HAL_PCD_Init+0x1a4>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80129fa:	240f      	movs	r4, #15
 80129fc:	193b      	adds	r3, r7, r4
 80129fe:	781a      	ldrb	r2, [r3, #0]
 8012a00:	6878      	ldr	r0, [r7, #4]
 8012a02:	236a      	movs	r3, #106	@ 0x6a
 8012a04:	33ff      	adds	r3, #255	@ 0xff
 8012a06:	0019      	movs	r1, r3
 8012a08:	0013      	movs	r3, r2
 8012a0a:	009b      	lsls	r3, r3, #2
 8012a0c:	189b      	adds	r3, r3, r2
 8012a0e:	00db      	lsls	r3, r3, #3
 8012a10:	18c3      	adds	r3, r0, r3
 8012a12:	185b      	adds	r3, r3, r1
 8012a14:	2200      	movs	r2, #0
 8012a16:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8012a18:	193b      	adds	r3, r7, r4
 8012a1a:	781a      	ldrb	r2, [r3, #0]
 8012a1c:	6878      	ldr	r0, [r7, #4]
 8012a1e:	23b4      	movs	r3, #180	@ 0xb4
 8012a20:	0059      	lsls	r1, r3, #1
 8012a22:	0013      	movs	r3, r2
 8012a24:	009b      	lsls	r3, r3, #2
 8012a26:	189b      	adds	r3, r3, r2
 8012a28:	00db      	lsls	r3, r3, #3
 8012a2a:	18c3      	adds	r3, r0, r3
 8012a2c:	185b      	adds	r3, r3, r1
 8012a2e:	193a      	adds	r2, r7, r4
 8012a30:	7812      	ldrb	r2, [r2, #0]
 8012a32:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8012a34:	193b      	adds	r3, r7, r4
 8012a36:	781a      	ldrb	r2, [r3, #0]
 8012a38:	6878      	ldr	r0, [r7, #4]
 8012a3a:	236c      	movs	r3, #108	@ 0x6c
 8012a3c:	33ff      	adds	r3, #255	@ 0xff
 8012a3e:	0019      	movs	r1, r3
 8012a40:	0013      	movs	r3, r2
 8012a42:	009b      	lsls	r3, r3, #2
 8012a44:	189b      	adds	r3, r3, r2
 8012a46:	00db      	lsls	r3, r3, #3
 8012a48:	18c3      	adds	r3, r0, r3
 8012a4a:	185b      	adds	r3, r3, r1
 8012a4c:	2200      	movs	r2, #0
 8012a4e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8012a50:	193b      	adds	r3, r7, r4
 8012a52:	781a      	ldrb	r2, [r3, #0]
 8012a54:	6878      	ldr	r0, [r7, #4]
 8012a56:	23bc      	movs	r3, #188	@ 0xbc
 8012a58:	0059      	lsls	r1, r3, #1
 8012a5a:	0013      	movs	r3, r2
 8012a5c:	009b      	lsls	r3, r3, #2
 8012a5e:	189b      	adds	r3, r3, r2
 8012a60:	00db      	lsls	r3, r3, #3
 8012a62:	18c3      	adds	r3, r0, r3
 8012a64:	185b      	adds	r3, r3, r1
 8012a66:	2200      	movs	r2, #0
 8012a68:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8012a6a:	193b      	adds	r3, r7, r4
 8012a6c:	781a      	ldrb	r2, [r3, #0]
 8012a6e:	6878      	ldr	r0, [r7, #4]
 8012a70:	23be      	movs	r3, #190	@ 0xbe
 8012a72:	0059      	lsls	r1, r3, #1
 8012a74:	0013      	movs	r3, r2
 8012a76:	009b      	lsls	r3, r3, #2
 8012a78:	189b      	adds	r3, r3, r2
 8012a7a:	00db      	lsls	r3, r3, #3
 8012a7c:	18c3      	adds	r3, r0, r3
 8012a7e:	185b      	adds	r3, r3, r1
 8012a80:	2200      	movs	r2, #0
 8012a82:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8012a84:	193b      	adds	r3, r7, r4
 8012a86:	781a      	ldrb	r2, [r3, #0]
 8012a88:	6878      	ldr	r0, [r7, #4]
 8012a8a:	23c0      	movs	r3, #192	@ 0xc0
 8012a8c:	0059      	lsls	r1, r3, #1
 8012a8e:	0013      	movs	r3, r2
 8012a90:	009b      	lsls	r3, r3, #2
 8012a92:	189b      	adds	r3, r3, r2
 8012a94:	00db      	lsls	r3, r3, #3
 8012a96:	18c3      	adds	r3, r0, r3
 8012a98:	185b      	adds	r3, r3, r1
 8012a9a:	2200      	movs	r2, #0
 8012a9c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8012a9e:	193b      	adds	r3, r7, r4
 8012aa0:	781a      	ldrb	r2, [r3, #0]
 8012aa2:	193b      	adds	r3, r7, r4
 8012aa4:	3201      	adds	r2, #1
 8012aa6:	701a      	strb	r2, [r3, #0]
 8012aa8:	230f      	movs	r3, #15
 8012aaa:	18fb      	adds	r3, r7, r3
 8012aac:	781a      	ldrb	r2, [r3, #0]
 8012aae:	687b      	ldr	r3, [r7, #4]
 8012ab0:	685b      	ldr	r3, [r3, #4]
 8012ab2:	429a      	cmp	r2, r3
 8012ab4:	d3a1      	bcc.n	80129fa <HAL_PCD_Init+0xf6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8012ab6:	687b      	ldr	r3, [r7, #4]
 8012ab8:	6818      	ldr	r0, [r3, #0]
 8012aba:	687b      	ldr	r3, [r7, #4]
 8012abc:	466a      	mov	r2, sp
 8012abe:	0011      	movs	r1, r2
 8012ac0:	001a      	movs	r2, r3
 8012ac2:	3210      	adds	r2, #16
 8012ac4:	ca70      	ldmia	r2!, {r4, r5, r6}
 8012ac6:	c170      	stmia	r1!, {r4, r5, r6}
 8012ac8:	ca30      	ldmia	r2!, {r4, r5}
 8012aca:	c130      	stmia	r1!, {r4, r5}
 8012acc:	6859      	ldr	r1, [r3, #4]
 8012ace:	689a      	ldr	r2, [r3, #8]
 8012ad0:	68db      	ldr	r3, [r3, #12]
 8012ad2:	f005 fe39 	bl	8018748 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8012ad6:	687b      	ldr	r3, [r7, #4]
 8012ad8:	2224      	movs	r2, #36	@ 0x24
 8012ada:	2100      	movs	r1, #0
 8012adc:	5499      	strb	r1, [r3, r2]
  hpcd->State = HAL_PCD_STATE_READY;
 8012ade:	687b      	ldr	r3, [r7, #4]
 8012ae0:	4a07      	ldr	r2, [pc, #28]	@ (8012b00 <HAL_PCD_Init+0x1fc>)
 8012ae2:	2101      	movs	r1, #1
 8012ae4:	5499      	strb	r1, [r3, r2]

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8012ae6:	687b      	ldr	r3, [r7, #4]
 8012ae8:	69db      	ldr	r3, [r3, #28]
 8012aea:	2b01      	cmp	r3, #1
 8012aec:	d103      	bne.n	8012af6 <HAL_PCD_Init+0x1f2>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8012aee:	687b      	ldr	r3, [r7, #4]
 8012af0:	0018      	movs	r0, r3
 8012af2:	f001 fd23 	bl	801453c <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8012af6:	2300      	movs	r3, #0
}
 8012af8:	0018      	movs	r0, r3
 8012afa:	46bd      	mov	sp, r7
 8012afc:	b005      	add	sp, #20
 8012afe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012b00:	000002a9 	.word	0x000002a9

08012b04 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8012b04:	b580      	push	{r7, lr}
 8012b06:	b082      	sub	sp, #8
 8012b08:	af00      	add	r7, sp, #0
 8012b0a:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8012b0c:	687a      	ldr	r2, [r7, #4]
 8012b0e:	23aa      	movs	r3, #170	@ 0xaa
 8012b10:	009b      	lsls	r3, r3, #2
 8012b12:	5cd3      	ldrb	r3, [r2, r3]
 8012b14:	2b01      	cmp	r3, #1
 8012b16:	d101      	bne.n	8012b1c <HAL_PCD_Start+0x18>
 8012b18:	2302      	movs	r3, #2
 8012b1a:	e014      	b.n	8012b46 <HAL_PCD_Start+0x42>
 8012b1c:	687a      	ldr	r2, [r7, #4]
 8012b1e:	23aa      	movs	r3, #170	@ 0xaa
 8012b20:	009b      	lsls	r3, r3, #2
 8012b22:	2101      	movs	r1, #1
 8012b24:	54d1      	strb	r1, [r2, r3]
  __HAL_PCD_ENABLE(hpcd);
 8012b26:	687b      	ldr	r3, [r7, #4]
 8012b28:	681b      	ldr	r3, [r3, #0]
 8012b2a:	0018      	movs	r0, r3
 8012b2c:	f005 fddc 	bl	80186e8 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8012b30:	687b      	ldr	r3, [r7, #4]
 8012b32:	681b      	ldr	r3, [r3, #0]
 8012b34:	0018      	movs	r0, r3
 8012b36:	f007 fddf 	bl	801a6f8 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8012b3a:	687a      	ldr	r2, [r7, #4]
 8012b3c:	23aa      	movs	r3, #170	@ 0xaa
 8012b3e:	009b      	lsls	r3, r3, #2
 8012b40:	2100      	movs	r1, #0
 8012b42:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8012b44:	2300      	movs	r3, #0
}
 8012b46:	0018      	movs	r0, r3
 8012b48:	46bd      	mov	sp, r7
 8012b4a:	b002      	add	sp, #8
 8012b4c:	bd80      	pop	{r7, pc}
	...

08012b50 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8012b50:	b580      	push	{r7, lr}
 8012b52:	b084      	sub	sp, #16
 8012b54:	af00      	add	r7, sp, #0
 8012b56:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8012b58:	687b      	ldr	r3, [r7, #4]
 8012b5a:	681b      	ldr	r3, [r3, #0]
 8012b5c:	0018      	movs	r0, r3
 8012b5e:	f007 fde1 	bl	801a724 <USB_ReadInterrupts>
 8012b62:	0003      	movs	r3, r0
 8012b64:	60fb      	str	r3, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8012b66:	68fa      	ldr	r2, [r7, #12]
 8012b68:	2380      	movs	r3, #128	@ 0x80
 8012b6a:	021b      	lsls	r3, r3, #8
 8012b6c:	4013      	ands	r3, r2
 8012b6e:	d004      	beq.n	8012b7a <HAL_PCD_IRQHandler+0x2a>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8012b70:	687b      	ldr	r3, [r7, #4]
 8012b72:	0018      	movs	r0, r3
 8012b74:	f000 fb62 	bl	801323c <PCD_EP_ISR_Handler>

    return;
 8012b78:	e11d      	b.n	8012db6 <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8012b7a:	68fa      	ldr	r2, [r7, #12]
 8012b7c:	2380      	movs	r3, #128	@ 0x80
 8012b7e:	00db      	lsls	r3, r3, #3
 8012b80:	4013      	ands	r3, r2
 8012b82:	d015      	beq.n	8012bb0 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8012b84:	687b      	ldr	r3, [r7, #4]
 8012b86:	681b      	ldr	r3, [r3, #0]
 8012b88:	2244      	movs	r2, #68	@ 0x44
 8012b8a:	5a9b      	ldrh	r3, [r3, r2]
 8012b8c:	b29a      	uxth	r2, r3
 8012b8e:	687b      	ldr	r3, [r7, #4]
 8012b90:	681b      	ldr	r3, [r3, #0]
 8012b92:	498a      	ldr	r1, [pc, #552]	@ (8012dbc <HAL_PCD_IRQHandler+0x26c>)
 8012b94:	400a      	ands	r2, r1
 8012b96:	b291      	uxth	r1, r2
 8012b98:	2244      	movs	r2, #68	@ 0x44
 8012b9a:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8012b9c:	687b      	ldr	r3, [r7, #4]
 8012b9e:	0018      	movs	r0, r3
 8012ba0:	f009 fe7f 	bl	801c8a2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8012ba4:	687b      	ldr	r3, [r7, #4]
 8012ba6:	2100      	movs	r1, #0
 8012ba8:	0018      	movs	r0, r3
 8012baa:	f000 f915 	bl	8012dd8 <HAL_PCD_SetAddress>

    return;
 8012bae:	e102      	b.n	8012db6 <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8012bb0:	68fa      	ldr	r2, [r7, #12]
 8012bb2:	2380      	movs	r3, #128	@ 0x80
 8012bb4:	01db      	lsls	r3, r3, #7
 8012bb6:	4013      	ands	r3, r2
 8012bb8:	d00c      	beq.n	8012bd4 <HAL_PCD_IRQHandler+0x84>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8012bba:	687b      	ldr	r3, [r7, #4]
 8012bbc:	681b      	ldr	r3, [r3, #0]
 8012bbe:	2244      	movs	r2, #68	@ 0x44
 8012bc0:	5a9b      	ldrh	r3, [r3, r2]
 8012bc2:	b29a      	uxth	r2, r3
 8012bc4:	687b      	ldr	r3, [r7, #4]
 8012bc6:	681b      	ldr	r3, [r3, #0]
 8012bc8:	497d      	ldr	r1, [pc, #500]	@ (8012dc0 <HAL_PCD_IRQHandler+0x270>)
 8012bca:	400a      	ands	r2, r1
 8012bcc:	b291      	uxth	r1, r2
 8012bce:	2244      	movs	r2, #68	@ 0x44
 8012bd0:	5299      	strh	r1, [r3, r2]

    return;
 8012bd2:	e0f0      	b.n	8012db6 <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8012bd4:	68fa      	ldr	r2, [r7, #12]
 8012bd6:	2380      	movs	r3, #128	@ 0x80
 8012bd8:	019b      	lsls	r3, r3, #6
 8012bda:	4013      	ands	r3, r2
 8012bdc:	d00c      	beq.n	8012bf8 <HAL_PCD_IRQHandler+0xa8>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8012bde:	687b      	ldr	r3, [r7, #4]
 8012be0:	681b      	ldr	r3, [r3, #0]
 8012be2:	2244      	movs	r2, #68	@ 0x44
 8012be4:	5a9b      	ldrh	r3, [r3, r2]
 8012be6:	b29a      	uxth	r2, r3
 8012be8:	687b      	ldr	r3, [r7, #4]
 8012bea:	681b      	ldr	r3, [r3, #0]
 8012bec:	4975      	ldr	r1, [pc, #468]	@ (8012dc4 <HAL_PCD_IRQHandler+0x274>)
 8012bee:	400a      	ands	r2, r1
 8012bf0:	b291      	uxth	r1, r2
 8012bf2:	2244      	movs	r2, #68	@ 0x44
 8012bf4:	5299      	strh	r1, [r3, r2]

    return;
 8012bf6:	e0de      	b.n	8012db6 <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8012bf8:	68fa      	ldr	r2, [r7, #12]
 8012bfa:	2380      	movs	r3, #128	@ 0x80
 8012bfc:	015b      	lsls	r3, r3, #5
 8012bfe:	4013      	ands	r3, r2
 8012c00:	d038      	beq.n	8012c74 <HAL_PCD_IRQHandler+0x124>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8012c02:	687b      	ldr	r3, [r7, #4]
 8012c04:	681b      	ldr	r3, [r3, #0]
 8012c06:	2240      	movs	r2, #64	@ 0x40
 8012c08:	5a9b      	ldrh	r3, [r3, r2]
 8012c0a:	b29a      	uxth	r2, r3
 8012c0c:	687b      	ldr	r3, [r7, #4]
 8012c0e:	681b      	ldr	r3, [r3, #0]
 8012c10:	2104      	movs	r1, #4
 8012c12:	438a      	bics	r2, r1
 8012c14:	b291      	uxth	r1, r2
 8012c16:	2240      	movs	r2, #64	@ 0x40
 8012c18:	5299      	strh	r1, [r3, r2]
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8012c1a:	687b      	ldr	r3, [r7, #4]
 8012c1c:	681b      	ldr	r3, [r3, #0]
 8012c1e:	2240      	movs	r2, #64	@ 0x40
 8012c20:	5a9b      	ldrh	r3, [r3, r2]
 8012c22:	b29a      	uxth	r2, r3
 8012c24:	687b      	ldr	r3, [r7, #4]
 8012c26:	681b      	ldr	r3, [r3, #0]
 8012c28:	2108      	movs	r1, #8
 8012c2a:	438a      	bics	r2, r1
 8012c2c:	b291      	uxth	r1, r2
 8012c2e:	2240      	movs	r2, #64	@ 0x40
 8012c30:	5299      	strh	r1, [r3, r2]

    if (hpcd->LPM_State == LPM_L1)
 8012c32:	687a      	ldr	r2, [r7, #4]
 8012c34:	23b8      	movs	r3, #184	@ 0xb8
 8012c36:	009b      	lsls	r3, r3, #2
 8012c38:	5cd3      	ldrb	r3, [r2, r3]
 8012c3a:	2b01      	cmp	r3, #1
 8012c3c:	d109      	bne.n	8012c52 <HAL_PCD_IRQHandler+0x102>
    {
      hpcd->LPM_State = LPM_L0;
 8012c3e:	687a      	ldr	r2, [r7, #4]
 8012c40:	23b8      	movs	r3, #184	@ 0xb8
 8012c42:	009b      	lsls	r3, r3, #2
 8012c44:	2100      	movs	r1, #0
 8012c46:	54d1      	strb	r1, [r2, r3]
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8012c48:	687b      	ldr	r3, [r7, #4]
 8012c4a:	2100      	movs	r1, #0
 8012c4c:	0018      	movs	r0, r3
 8012c4e:	f001 fc9f 	bl	8014590 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8012c52:	687b      	ldr	r3, [r7, #4]
 8012c54:	0018      	movs	r0, r3
 8012c56:	f009 fe65 	bl	801c924 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8012c5a:	687b      	ldr	r3, [r7, #4]
 8012c5c:	681b      	ldr	r3, [r3, #0]
 8012c5e:	2244      	movs	r2, #68	@ 0x44
 8012c60:	5a9b      	ldrh	r3, [r3, r2]
 8012c62:	b29a      	uxth	r2, r3
 8012c64:	687b      	ldr	r3, [r7, #4]
 8012c66:	681b      	ldr	r3, [r3, #0]
 8012c68:	4957      	ldr	r1, [pc, #348]	@ (8012dc8 <HAL_PCD_IRQHandler+0x278>)
 8012c6a:	400a      	ands	r2, r1
 8012c6c:	b291      	uxth	r1, r2
 8012c6e:	2244      	movs	r2, #68	@ 0x44
 8012c70:	5299      	strh	r1, [r3, r2]

    return;
 8012c72:	e0a0      	b.n	8012db6 <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8012c74:	68fa      	ldr	r2, [r7, #12]
 8012c76:	2380      	movs	r3, #128	@ 0x80
 8012c78:	011b      	lsls	r3, r3, #4
 8012c7a:	4013      	ands	r3, r2
 8012c7c:	d028      	beq.n	8012cd0 <HAL_PCD_IRQHandler+0x180>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8012c7e:	687b      	ldr	r3, [r7, #4]
 8012c80:	681b      	ldr	r3, [r3, #0]
 8012c82:	2240      	movs	r2, #64	@ 0x40
 8012c84:	5a9b      	ldrh	r3, [r3, r2]
 8012c86:	b29a      	uxth	r2, r3
 8012c88:	687b      	ldr	r3, [r7, #4]
 8012c8a:	681b      	ldr	r3, [r3, #0]
 8012c8c:	2108      	movs	r1, #8
 8012c8e:	430a      	orrs	r2, r1
 8012c90:	b291      	uxth	r1, r2
 8012c92:	2240      	movs	r2, #64	@ 0x40
 8012c94:	5299      	strh	r1, [r3, r2]

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8012c96:	687b      	ldr	r3, [r7, #4]
 8012c98:	681b      	ldr	r3, [r3, #0]
 8012c9a:	2244      	movs	r2, #68	@ 0x44
 8012c9c:	5a9b      	ldrh	r3, [r3, r2]
 8012c9e:	b29a      	uxth	r2, r3
 8012ca0:	687b      	ldr	r3, [r7, #4]
 8012ca2:	681b      	ldr	r3, [r3, #0]
 8012ca4:	4949      	ldr	r1, [pc, #292]	@ (8012dcc <HAL_PCD_IRQHandler+0x27c>)
 8012ca6:	400a      	ands	r2, r1
 8012ca8:	b291      	uxth	r1, r2
 8012caa:	2244      	movs	r2, #68	@ 0x44
 8012cac:	5299      	strh	r1, [r3, r2]

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8012cae:	687b      	ldr	r3, [r7, #4]
 8012cb0:	681b      	ldr	r3, [r3, #0]
 8012cb2:	2240      	movs	r2, #64	@ 0x40
 8012cb4:	5a9b      	ldrh	r3, [r3, r2]
 8012cb6:	b29a      	uxth	r2, r3
 8012cb8:	687b      	ldr	r3, [r7, #4]
 8012cba:	681b      	ldr	r3, [r3, #0]
 8012cbc:	2104      	movs	r1, #4
 8012cbe:	430a      	orrs	r2, r1
 8012cc0:	b291      	uxth	r1, r2
 8012cc2:	2240      	movs	r2, #64	@ 0x40
 8012cc4:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8012cc6:	687b      	ldr	r3, [r7, #4]
 8012cc8:	0018      	movs	r0, r3
 8012cca:	f009 fe0f 	bl	801c8ec <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8012cce:	e072      	b.n	8012db6 <HAL_PCD_IRQHandler+0x266>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8012cd0:	68fb      	ldr	r3, [r7, #12]
 8012cd2:	2280      	movs	r2, #128	@ 0x80
 8012cd4:	4013      	ands	r3, r2
 8012cd6:	d046      	beq.n	8012d66 <HAL_PCD_IRQHandler+0x216>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8012cd8:	687b      	ldr	r3, [r7, #4]
 8012cda:	681b      	ldr	r3, [r3, #0]
 8012cdc:	2244      	movs	r2, #68	@ 0x44
 8012cde:	5a9b      	ldrh	r3, [r3, r2]
 8012ce0:	b29a      	uxth	r2, r3
 8012ce2:	687b      	ldr	r3, [r7, #4]
 8012ce4:	681b      	ldr	r3, [r3, #0]
 8012ce6:	2180      	movs	r1, #128	@ 0x80
 8012ce8:	438a      	bics	r2, r1
 8012cea:	b291      	uxth	r1, r2
 8012cec:	2244      	movs	r2, #68	@ 0x44
 8012cee:	5299      	strh	r1, [r3, r2]
    if (hpcd->LPM_State == LPM_L0)
 8012cf0:	687a      	ldr	r2, [r7, #4]
 8012cf2:	23b8      	movs	r3, #184	@ 0xb8
 8012cf4:	009b      	lsls	r3, r3, #2
 8012cf6:	5cd3      	ldrb	r3, [r2, r3]
 8012cf8:	2b00      	cmp	r3, #0
 8012cfa:	d12f      	bne.n	8012d5c <HAL_PCD_IRQHandler+0x20c>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8012cfc:	687b      	ldr	r3, [r7, #4]
 8012cfe:	681b      	ldr	r3, [r3, #0]
 8012d00:	2240      	movs	r2, #64	@ 0x40
 8012d02:	5a9b      	ldrh	r3, [r3, r2]
 8012d04:	b29a      	uxth	r2, r3
 8012d06:	687b      	ldr	r3, [r7, #4]
 8012d08:	681b      	ldr	r3, [r3, #0]
 8012d0a:	2104      	movs	r1, #4
 8012d0c:	430a      	orrs	r2, r1
 8012d0e:	b291      	uxth	r1, r2
 8012d10:	2240      	movs	r2, #64	@ 0x40
 8012d12:	5299      	strh	r1, [r3, r2]
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8012d14:	687b      	ldr	r3, [r7, #4]
 8012d16:	681b      	ldr	r3, [r3, #0]
 8012d18:	2240      	movs	r2, #64	@ 0x40
 8012d1a:	5a9b      	ldrh	r3, [r3, r2]
 8012d1c:	b29a      	uxth	r2, r3
 8012d1e:	687b      	ldr	r3, [r7, #4]
 8012d20:	681b      	ldr	r3, [r3, #0]
 8012d22:	2108      	movs	r1, #8
 8012d24:	430a      	orrs	r2, r1
 8012d26:	b291      	uxth	r1, r2
 8012d28:	2240      	movs	r2, #64	@ 0x40
 8012d2a:	5299      	strh	r1, [r3, r2]

      hpcd->LPM_State = LPM_L1;
 8012d2c:	687a      	ldr	r2, [r7, #4]
 8012d2e:	23b8      	movs	r3, #184	@ 0xb8
 8012d30:	009b      	lsls	r3, r3, #2
 8012d32:	2101      	movs	r1, #1
 8012d34:	54d1      	strb	r1, [r2, r3]
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8012d36:	687b      	ldr	r3, [r7, #4]
 8012d38:	681b      	ldr	r3, [r3, #0]
 8012d3a:	2254      	movs	r2, #84	@ 0x54
 8012d3c:	5a9b      	ldrh	r3, [r3, r2]
 8012d3e:	b29b      	uxth	r3, r3
 8012d40:	089b      	lsrs	r3, r3, #2
 8012d42:	223c      	movs	r2, #60	@ 0x3c
 8012d44:	4013      	ands	r3, r2
 8012d46:	0019      	movs	r1, r3
 8012d48:	687a      	ldr	r2, [r7, #4]
 8012d4a:	23b9      	movs	r3, #185	@ 0xb9
 8012d4c:	009b      	lsls	r3, r3, #2
 8012d4e:	50d1      	str	r1, [r2, r3]
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8012d50:	687b      	ldr	r3, [r7, #4]
 8012d52:	2101      	movs	r1, #1
 8012d54:	0018      	movs	r0, r3
 8012d56:	f001 fc1b 	bl	8014590 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 8012d5a:	e02c      	b.n	8012db6 <HAL_PCD_IRQHandler+0x266>
      HAL_PCD_SuspendCallback(hpcd);
 8012d5c:	687b      	ldr	r3, [r7, #4]
 8012d5e:	0018      	movs	r0, r3
 8012d60:	f009 fdc4 	bl	801c8ec <HAL_PCD_SuspendCallback>
    return;
 8012d64:	e027      	b.n	8012db6 <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8012d66:	68fa      	ldr	r2, [r7, #12]
 8012d68:	2380      	movs	r3, #128	@ 0x80
 8012d6a:	009b      	lsls	r3, r3, #2
 8012d6c:	4013      	ands	r3, r2
 8012d6e:	d010      	beq.n	8012d92 <HAL_PCD_IRQHandler+0x242>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8012d70:	687b      	ldr	r3, [r7, #4]
 8012d72:	681b      	ldr	r3, [r3, #0]
 8012d74:	2244      	movs	r2, #68	@ 0x44
 8012d76:	5a9b      	ldrh	r3, [r3, r2]
 8012d78:	b29a      	uxth	r2, r3
 8012d7a:	687b      	ldr	r3, [r7, #4]
 8012d7c:	681b      	ldr	r3, [r3, #0]
 8012d7e:	4914      	ldr	r1, [pc, #80]	@ (8012dd0 <HAL_PCD_IRQHandler+0x280>)
 8012d80:	400a      	ands	r2, r1
 8012d82:	b291      	uxth	r1, r2
 8012d84:	2244      	movs	r2, #68	@ 0x44
 8012d86:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8012d88:	687b      	ldr	r3, [r7, #4]
 8012d8a:	0018      	movs	r0, r3
 8012d8c:	f009 fd7a 	bl	801c884 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8012d90:	e011      	b.n	8012db6 <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8012d92:	68fa      	ldr	r2, [r7, #12]
 8012d94:	2380      	movs	r3, #128	@ 0x80
 8012d96:	005b      	lsls	r3, r3, #1
 8012d98:	4013      	ands	r3, r2
 8012d9a:	d00c      	beq.n	8012db6 <HAL_PCD_IRQHandler+0x266>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8012d9c:	687b      	ldr	r3, [r7, #4]
 8012d9e:	681b      	ldr	r3, [r3, #0]
 8012da0:	2244      	movs	r2, #68	@ 0x44
 8012da2:	5a9b      	ldrh	r3, [r3, r2]
 8012da4:	b29a      	uxth	r2, r3
 8012da6:	687b      	ldr	r3, [r7, #4]
 8012da8:	681b      	ldr	r3, [r3, #0]
 8012daa:	490a      	ldr	r1, [pc, #40]	@ (8012dd4 <HAL_PCD_IRQHandler+0x284>)
 8012dac:	400a      	ands	r2, r1
 8012dae:	b291      	uxth	r1, r2
 8012db0:	2244      	movs	r2, #68	@ 0x44
 8012db2:	5299      	strh	r1, [r3, r2]

    return;
 8012db4:	46c0      	nop			@ (mov r8, r8)
  }
}
 8012db6:	46bd      	mov	sp, r7
 8012db8:	b004      	add	sp, #16
 8012dba:	bd80      	pop	{r7, pc}
 8012dbc:	fffffbff 	.word	0xfffffbff
 8012dc0:	ffffbfff 	.word	0xffffbfff
 8012dc4:	ffffdfff 	.word	0xffffdfff
 8012dc8:	ffffefff 	.word	0xffffefff
 8012dcc:	fffff7ff 	.word	0xfffff7ff
 8012dd0:	fffffdff 	.word	0xfffffdff
 8012dd4:	fffffeff 	.word	0xfffffeff

08012dd8 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8012dd8:	b580      	push	{r7, lr}
 8012dda:	b082      	sub	sp, #8
 8012ddc:	af00      	add	r7, sp, #0
 8012dde:	6078      	str	r0, [r7, #4]
 8012de0:	000a      	movs	r2, r1
 8012de2:	1cfb      	adds	r3, r7, #3
 8012de4:	701a      	strb	r2, [r3, #0]
  __HAL_LOCK(hpcd);
 8012de6:	687a      	ldr	r2, [r7, #4]
 8012de8:	23aa      	movs	r3, #170	@ 0xaa
 8012dea:	009b      	lsls	r3, r3, #2
 8012dec:	5cd3      	ldrb	r3, [r2, r3]
 8012dee:	2b01      	cmp	r3, #1
 8012df0:	d101      	bne.n	8012df6 <HAL_PCD_SetAddress+0x1e>
 8012df2:	2302      	movs	r3, #2
 8012df4:	e017      	b.n	8012e26 <HAL_PCD_SetAddress+0x4e>
 8012df6:	687a      	ldr	r2, [r7, #4]
 8012df8:	23aa      	movs	r3, #170	@ 0xaa
 8012dfa:	009b      	lsls	r3, r3, #2
 8012dfc:	2101      	movs	r1, #1
 8012dfe:	54d1      	strb	r1, [r2, r3]
  hpcd->USB_Address = address;
 8012e00:	687b      	ldr	r3, [r7, #4]
 8012e02:	1cfa      	adds	r2, r7, #3
 8012e04:	2124      	movs	r1, #36	@ 0x24
 8012e06:	7812      	ldrb	r2, [r2, #0]
 8012e08:	545a      	strb	r2, [r3, r1]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8012e0a:	687b      	ldr	r3, [r7, #4]
 8012e0c:	681a      	ldr	r2, [r3, #0]
 8012e0e:	1cfb      	adds	r3, r7, #3
 8012e10:	781b      	ldrb	r3, [r3, #0]
 8012e12:	0019      	movs	r1, r3
 8012e14:	0010      	movs	r0, r2
 8012e16:	f007 fc5b 	bl	801a6d0 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8012e1a:	687a      	ldr	r2, [r7, #4]
 8012e1c:	23aa      	movs	r3, #170	@ 0xaa
 8012e1e:	009b      	lsls	r3, r3, #2
 8012e20:	2100      	movs	r1, #0
 8012e22:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8012e24:	2300      	movs	r3, #0
}
 8012e26:	0018      	movs	r0, r3
 8012e28:	46bd      	mov	sp, r7
 8012e2a:	b002      	add	sp, #8
 8012e2c:	bd80      	pop	{r7, pc}

08012e2e <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8012e2e:	b590      	push	{r4, r7, lr}
 8012e30:	b085      	sub	sp, #20
 8012e32:	af00      	add	r7, sp, #0
 8012e34:	6078      	str	r0, [r7, #4]
 8012e36:	000c      	movs	r4, r1
 8012e38:	0010      	movs	r0, r2
 8012e3a:	0019      	movs	r1, r3
 8012e3c:	1cfb      	adds	r3, r7, #3
 8012e3e:	1c22      	adds	r2, r4, #0
 8012e40:	701a      	strb	r2, [r3, #0]
 8012e42:	003b      	movs	r3, r7
 8012e44:	1c02      	adds	r2, r0, #0
 8012e46:	801a      	strh	r2, [r3, #0]
 8012e48:	1cbb      	adds	r3, r7, #2
 8012e4a:	1c0a      	adds	r2, r1, #0
 8012e4c:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef  ret = HAL_OK;
 8012e4e:	230b      	movs	r3, #11
 8012e50:	18fb      	adds	r3, r7, r3
 8012e52:	2200      	movs	r2, #0
 8012e54:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8012e56:	1cfb      	adds	r3, r7, #3
 8012e58:	781b      	ldrb	r3, [r3, #0]
 8012e5a:	b25b      	sxtb	r3, r3
 8012e5c:	2b00      	cmp	r3, #0
 8012e5e:	da0f      	bge.n	8012e80 <HAL_PCD_EP_Open+0x52>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8012e60:	1cfb      	adds	r3, r7, #3
 8012e62:	781b      	ldrb	r3, [r3, #0]
 8012e64:	2207      	movs	r2, #7
 8012e66:	4013      	ands	r3, r2
 8012e68:	1c5a      	adds	r2, r3, #1
 8012e6a:	0013      	movs	r3, r2
 8012e6c:	009b      	lsls	r3, r3, #2
 8012e6e:	189b      	adds	r3, r3, r2
 8012e70:	00db      	lsls	r3, r3, #3
 8012e72:	687a      	ldr	r2, [r7, #4]
 8012e74:	18d3      	adds	r3, r2, r3
 8012e76:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8012e78:	68fb      	ldr	r3, [r7, #12]
 8012e7a:	2201      	movs	r2, #1
 8012e7c:	705a      	strb	r2, [r3, #1]
 8012e7e:	e00f      	b.n	8012ea0 <HAL_PCD_EP_Open+0x72>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8012e80:	1cfb      	adds	r3, r7, #3
 8012e82:	781b      	ldrb	r3, [r3, #0]
 8012e84:	2207      	movs	r2, #7
 8012e86:	401a      	ands	r2, r3
 8012e88:	0013      	movs	r3, r2
 8012e8a:	009b      	lsls	r3, r3, #2
 8012e8c:	189b      	adds	r3, r3, r2
 8012e8e:	00db      	lsls	r3, r3, #3
 8012e90:	3369      	adds	r3, #105	@ 0x69
 8012e92:	33ff      	adds	r3, #255	@ 0xff
 8012e94:	687a      	ldr	r2, [r7, #4]
 8012e96:	18d3      	adds	r3, r2, r3
 8012e98:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8012e9a:	68fb      	ldr	r3, [r7, #12]
 8012e9c:	2200      	movs	r2, #0
 8012e9e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8012ea0:	1cfb      	adds	r3, r7, #3
 8012ea2:	781b      	ldrb	r3, [r3, #0]
 8012ea4:	2207      	movs	r2, #7
 8012ea6:	4013      	ands	r3, r2
 8012ea8:	b2da      	uxtb	r2, r3
 8012eaa:	68fb      	ldr	r3, [r7, #12]
 8012eac:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8012eae:	003b      	movs	r3, r7
 8012eb0:	881a      	ldrh	r2, [r3, #0]
 8012eb2:	68fb      	ldr	r3, [r7, #12]
 8012eb4:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8012eb6:	68fb      	ldr	r3, [r7, #12]
 8012eb8:	1cba      	adds	r2, r7, #2
 8012eba:	7812      	ldrb	r2, [r2, #0]
 8012ebc:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8012ebe:	1cbb      	adds	r3, r7, #2
 8012ec0:	781b      	ldrb	r3, [r3, #0]
 8012ec2:	2b02      	cmp	r3, #2
 8012ec4:	d102      	bne.n	8012ecc <HAL_PCD_EP_Open+0x9e>
  {
    ep->data_pid_start = 0U;
 8012ec6:	68fb      	ldr	r3, [r7, #12]
 8012ec8:	2200      	movs	r2, #0
 8012eca:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8012ecc:	687a      	ldr	r2, [r7, #4]
 8012ece:	23aa      	movs	r3, #170	@ 0xaa
 8012ed0:	009b      	lsls	r3, r3, #2
 8012ed2:	5cd3      	ldrb	r3, [r2, r3]
 8012ed4:	2b01      	cmp	r3, #1
 8012ed6:	d101      	bne.n	8012edc <HAL_PCD_EP_Open+0xae>
 8012ed8:	2302      	movs	r3, #2
 8012eda:	e013      	b.n	8012f04 <HAL_PCD_EP_Open+0xd6>
 8012edc:	687a      	ldr	r2, [r7, #4]
 8012ede:	23aa      	movs	r3, #170	@ 0xaa
 8012ee0:	009b      	lsls	r3, r3, #2
 8012ee2:	2101      	movs	r1, #1
 8012ee4:	54d1      	strb	r1, [r2, r3]
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8012ee6:	687b      	ldr	r3, [r7, #4]
 8012ee8:	681b      	ldr	r3, [r3, #0]
 8012eea:	68fa      	ldr	r2, [r7, #12]
 8012eec:	0011      	movs	r1, r2
 8012eee:	0018      	movs	r0, r3
 8012ef0:	f005 fc52 	bl	8018798 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8012ef4:	687a      	ldr	r2, [r7, #4]
 8012ef6:	23aa      	movs	r3, #170	@ 0xaa
 8012ef8:	009b      	lsls	r3, r3, #2
 8012efa:	2100      	movs	r1, #0
 8012efc:	54d1      	strb	r1, [r2, r3]

  return ret;
 8012efe:	230b      	movs	r3, #11
 8012f00:	18fb      	adds	r3, r7, r3
 8012f02:	781b      	ldrb	r3, [r3, #0]
}
 8012f04:	0018      	movs	r0, r3
 8012f06:	46bd      	mov	sp, r7
 8012f08:	b005      	add	sp, #20
 8012f0a:	bd90      	pop	{r4, r7, pc}

08012f0c <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8012f0c:	b580      	push	{r7, lr}
 8012f0e:	b084      	sub	sp, #16
 8012f10:	af00      	add	r7, sp, #0
 8012f12:	6078      	str	r0, [r7, #4]
 8012f14:	000a      	movs	r2, r1
 8012f16:	1cfb      	adds	r3, r7, #3
 8012f18:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8012f1a:	1cfb      	adds	r3, r7, #3
 8012f1c:	781b      	ldrb	r3, [r3, #0]
 8012f1e:	b25b      	sxtb	r3, r3
 8012f20:	2b00      	cmp	r3, #0
 8012f22:	da0f      	bge.n	8012f44 <HAL_PCD_EP_Close+0x38>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8012f24:	1cfb      	adds	r3, r7, #3
 8012f26:	781b      	ldrb	r3, [r3, #0]
 8012f28:	2207      	movs	r2, #7
 8012f2a:	4013      	ands	r3, r2
 8012f2c:	1c5a      	adds	r2, r3, #1
 8012f2e:	0013      	movs	r3, r2
 8012f30:	009b      	lsls	r3, r3, #2
 8012f32:	189b      	adds	r3, r3, r2
 8012f34:	00db      	lsls	r3, r3, #3
 8012f36:	687a      	ldr	r2, [r7, #4]
 8012f38:	18d3      	adds	r3, r2, r3
 8012f3a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8012f3c:	68fb      	ldr	r3, [r7, #12]
 8012f3e:	2201      	movs	r2, #1
 8012f40:	705a      	strb	r2, [r3, #1]
 8012f42:	e00f      	b.n	8012f64 <HAL_PCD_EP_Close+0x58>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8012f44:	1cfb      	adds	r3, r7, #3
 8012f46:	781b      	ldrb	r3, [r3, #0]
 8012f48:	2207      	movs	r2, #7
 8012f4a:	401a      	ands	r2, r3
 8012f4c:	0013      	movs	r3, r2
 8012f4e:	009b      	lsls	r3, r3, #2
 8012f50:	189b      	adds	r3, r3, r2
 8012f52:	00db      	lsls	r3, r3, #3
 8012f54:	3369      	adds	r3, #105	@ 0x69
 8012f56:	33ff      	adds	r3, #255	@ 0xff
 8012f58:	687a      	ldr	r2, [r7, #4]
 8012f5a:	18d3      	adds	r3, r2, r3
 8012f5c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8012f5e:	68fb      	ldr	r3, [r7, #12]
 8012f60:	2200      	movs	r2, #0
 8012f62:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8012f64:	1cfb      	adds	r3, r7, #3
 8012f66:	781b      	ldrb	r3, [r3, #0]
 8012f68:	2207      	movs	r2, #7
 8012f6a:	4013      	ands	r3, r2
 8012f6c:	b2da      	uxtb	r2, r3
 8012f6e:	68fb      	ldr	r3, [r7, #12]
 8012f70:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8012f72:	687a      	ldr	r2, [r7, #4]
 8012f74:	23aa      	movs	r3, #170	@ 0xaa
 8012f76:	009b      	lsls	r3, r3, #2
 8012f78:	5cd3      	ldrb	r3, [r2, r3]
 8012f7a:	2b01      	cmp	r3, #1
 8012f7c:	d101      	bne.n	8012f82 <HAL_PCD_EP_Close+0x76>
 8012f7e:	2302      	movs	r3, #2
 8012f80:	e011      	b.n	8012fa6 <HAL_PCD_EP_Close+0x9a>
 8012f82:	687a      	ldr	r2, [r7, #4]
 8012f84:	23aa      	movs	r3, #170	@ 0xaa
 8012f86:	009b      	lsls	r3, r3, #2
 8012f88:	2101      	movs	r1, #1
 8012f8a:	54d1      	strb	r1, [r2, r3]
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8012f8c:	687b      	ldr	r3, [r7, #4]
 8012f8e:	681b      	ldr	r3, [r3, #0]
 8012f90:	68fa      	ldr	r2, [r7, #12]
 8012f92:	0011      	movs	r1, r2
 8012f94:	0018      	movs	r0, r3
 8012f96:	f005 ffa1 	bl	8018edc <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8012f9a:	687a      	ldr	r2, [r7, #4]
 8012f9c:	23aa      	movs	r3, #170	@ 0xaa
 8012f9e:	009b      	lsls	r3, r3, #2
 8012fa0:	2100      	movs	r1, #0
 8012fa2:	54d1      	strb	r1, [r2, r3]
  return HAL_OK;
 8012fa4:	2300      	movs	r3, #0
}
 8012fa6:	0018      	movs	r0, r3
 8012fa8:	46bd      	mov	sp, r7
 8012faa:	b004      	add	sp, #16
 8012fac:	bd80      	pop	{r7, pc}

08012fae <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8012fae:	b580      	push	{r7, lr}
 8012fb0:	b086      	sub	sp, #24
 8012fb2:	af00      	add	r7, sp, #0
 8012fb4:	60f8      	str	r0, [r7, #12]
 8012fb6:	607a      	str	r2, [r7, #4]
 8012fb8:	603b      	str	r3, [r7, #0]
 8012fba:	200b      	movs	r0, #11
 8012fbc:	183b      	adds	r3, r7, r0
 8012fbe:	1c0a      	adds	r2, r1, #0
 8012fc0:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8012fc2:	0001      	movs	r1, r0
 8012fc4:	187b      	adds	r3, r7, r1
 8012fc6:	781b      	ldrb	r3, [r3, #0]
 8012fc8:	2207      	movs	r2, #7
 8012fca:	401a      	ands	r2, r3
 8012fcc:	0013      	movs	r3, r2
 8012fce:	009b      	lsls	r3, r3, #2
 8012fd0:	189b      	adds	r3, r3, r2
 8012fd2:	00db      	lsls	r3, r3, #3
 8012fd4:	3369      	adds	r3, #105	@ 0x69
 8012fd6:	33ff      	adds	r3, #255	@ 0xff
 8012fd8:	68fa      	ldr	r2, [r7, #12]
 8012fda:	18d3      	adds	r3, r2, r3
 8012fdc:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8012fde:	697b      	ldr	r3, [r7, #20]
 8012fe0:	687a      	ldr	r2, [r7, #4]
 8012fe2:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8012fe4:	697b      	ldr	r3, [r7, #20]
 8012fe6:	683a      	ldr	r2, [r7, #0]
 8012fe8:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8012fea:	697b      	ldr	r3, [r7, #20]
 8012fec:	2200      	movs	r2, #0
 8012fee:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8012ff0:	697b      	ldr	r3, [r7, #20]
 8012ff2:	2200      	movs	r2, #0
 8012ff4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8012ff6:	187b      	adds	r3, r7, r1
 8012ff8:	781b      	ldrb	r3, [r3, #0]
 8012ffa:	2207      	movs	r2, #7
 8012ffc:	4013      	ands	r3, r2
 8012ffe:	b2da      	uxtb	r2, r3
 8013000:	697b      	ldr	r3, [r7, #20]
 8013002:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8013004:	68fb      	ldr	r3, [r7, #12]
 8013006:	681b      	ldr	r3, [r3, #0]
 8013008:	697a      	ldr	r2, [r7, #20]
 801300a:	0011      	movs	r1, r2
 801300c:	0018      	movs	r0, r3
 801300e:	f006 f925 	bl	801925c <USB_EPStartXfer>

  return HAL_OK;
 8013012:	2300      	movs	r3, #0
}
 8013014:	0018      	movs	r0, r3
 8013016:	46bd      	mov	sp, r7
 8013018:	b006      	add	sp, #24
 801301a:	bd80      	pop	{r7, pc}

0801301c <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 801301c:	b580      	push	{r7, lr}
 801301e:	b082      	sub	sp, #8
 8013020:	af00      	add	r7, sp, #0
 8013022:	6078      	str	r0, [r7, #4]
 8013024:	000a      	movs	r2, r1
 8013026:	1cfb      	adds	r3, r7, #3
 8013028:	701a      	strb	r2, [r3, #0]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 801302a:	1cfb      	adds	r3, r7, #3
 801302c:	781b      	ldrb	r3, [r3, #0]
 801302e:	2207      	movs	r2, #7
 8013030:	401a      	ands	r2, r3
 8013032:	6878      	ldr	r0, [r7, #4]
 8013034:	23c2      	movs	r3, #194	@ 0xc2
 8013036:	0059      	lsls	r1, r3, #1
 8013038:	0013      	movs	r3, r2
 801303a:	009b      	lsls	r3, r3, #2
 801303c:	189b      	adds	r3, r3, r2
 801303e:	00db      	lsls	r3, r3, #3
 8013040:	18c3      	adds	r3, r0, r3
 8013042:	185b      	adds	r3, r3, r1
 8013044:	681b      	ldr	r3, [r3, #0]
}
 8013046:	0018      	movs	r0, r3
 8013048:	46bd      	mov	sp, r7
 801304a:	b002      	add	sp, #8
 801304c:	bd80      	pop	{r7, pc}

0801304e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 801304e:	b580      	push	{r7, lr}
 8013050:	b086      	sub	sp, #24
 8013052:	af00      	add	r7, sp, #0
 8013054:	60f8      	str	r0, [r7, #12]
 8013056:	607a      	str	r2, [r7, #4]
 8013058:	603b      	str	r3, [r7, #0]
 801305a:	200b      	movs	r0, #11
 801305c:	183b      	adds	r3, r7, r0
 801305e:	1c0a      	adds	r2, r1, #0
 8013060:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8013062:	183b      	adds	r3, r7, r0
 8013064:	781b      	ldrb	r3, [r3, #0]
 8013066:	2207      	movs	r2, #7
 8013068:	4013      	ands	r3, r2
 801306a:	1c5a      	adds	r2, r3, #1
 801306c:	0013      	movs	r3, r2
 801306e:	009b      	lsls	r3, r3, #2
 8013070:	189b      	adds	r3, r3, r2
 8013072:	00db      	lsls	r3, r3, #3
 8013074:	68fa      	ldr	r2, [r7, #12]
 8013076:	18d3      	adds	r3, r2, r3
 8013078:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 801307a:	697b      	ldr	r3, [r7, #20]
 801307c:	687a      	ldr	r2, [r7, #4]
 801307e:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8013080:	697b      	ldr	r3, [r7, #20]
 8013082:	683a      	ldr	r2, [r7, #0]
 8013084:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8013086:	697b      	ldr	r3, [r7, #20]
 8013088:	2224      	movs	r2, #36	@ 0x24
 801308a:	2101      	movs	r1, #1
 801308c:	5499      	strb	r1, [r3, r2]
  ep->xfer_len_db = len;
 801308e:	697b      	ldr	r3, [r7, #20]
 8013090:	683a      	ldr	r2, [r7, #0]
 8013092:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8013094:	697b      	ldr	r3, [r7, #20]
 8013096:	2200      	movs	r2, #0
 8013098:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 801309a:	697b      	ldr	r3, [r7, #20]
 801309c:	2201      	movs	r2, #1
 801309e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80130a0:	183b      	adds	r3, r7, r0
 80130a2:	781b      	ldrb	r3, [r3, #0]
 80130a4:	2207      	movs	r2, #7
 80130a6:	4013      	ands	r3, r2
 80130a8:	b2da      	uxtb	r2, r3
 80130aa:	697b      	ldr	r3, [r7, #20]
 80130ac:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80130ae:	68fb      	ldr	r3, [r7, #12]
 80130b0:	681b      	ldr	r3, [r3, #0]
 80130b2:	697a      	ldr	r2, [r7, #20]
 80130b4:	0011      	movs	r1, r2
 80130b6:	0018      	movs	r0, r3
 80130b8:	f006 f8d0 	bl	801925c <USB_EPStartXfer>

  return HAL_OK;
 80130bc:	2300      	movs	r3, #0
}
 80130be:	0018      	movs	r0, r3
 80130c0:	46bd      	mov	sp, r7
 80130c2:	b006      	add	sp, #24
 80130c4:	bd80      	pop	{r7, pc}

080130c6 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80130c6:	b580      	push	{r7, lr}
 80130c8:	b084      	sub	sp, #16
 80130ca:	af00      	add	r7, sp, #0
 80130cc:	6078      	str	r0, [r7, #4]
 80130ce:	000a      	movs	r2, r1
 80130d0:	1cfb      	adds	r3, r7, #3
 80130d2:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80130d4:	1cfb      	adds	r3, r7, #3
 80130d6:	781b      	ldrb	r3, [r3, #0]
 80130d8:	2207      	movs	r2, #7
 80130da:	401a      	ands	r2, r3
 80130dc:	687b      	ldr	r3, [r7, #4]
 80130de:	685b      	ldr	r3, [r3, #4]
 80130e0:	429a      	cmp	r2, r3
 80130e2:	d901      	bls.n	80130e8 <HAL_PCD_EP_SetStall+0x22>
  {
    return HAL_ERROR;
 80130e4:	2301      	movs	r3, #1
 80130e6:	e046      	b.n	8013176 <HAL_PCD_EP_SetStall+0xb0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80130e8:	1cfb      	adds	r3, r7, #3
 80130ea:	781b      	ldrb	r3, [r3, #0]
 80130ec:	b25b      	sxtb	r3, r3
 80130ee:	2b00      	cmp	r3, #0
 80130f0:	da0f      	bge.n	8013112 <HAL_PCD_EP_SetStall+0x4c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80130f2:	1cfb      	adds	r3, r7, #3
 80130f4:	781b      	ldrb	r3, [r3, #0]
 80130f6:	2207      	movs	r2, #7
 80130f8:	4013      	ands	r3, r2
 80130fa:	1c5a      	adds	r2, r3, #1
 80130fc:	0013      	movs	r3, r2
 80130fe:	009b      	lsls	r3, r3, #2
 8013100:	189b      	adds	r3, r3, r2
 8013102:	00db      	lsls	r3, r3, #3
 8013104:	687a      	ldr	r2, [r7, #4]
 8013106:	18d3      	adds	r3, r2, r3
 8013108:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 801310a:	68fb      	ldr	r3, [r7, #12]
 801310c:	2201      	movs	r2, #1
 801310e:	705a      	strb	r2, [r3, #1]
 8013110:	e00d      	b.n	801312e <HAL_PCD_EP_SetStall+0x68>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8013112:	1cfb      	adds	r3, r7, #3
 8013114:	781a      	ldrb	r2, [r3, #0]
 8013116:	0013      	movs	r3, r2
 8013118:	009b      	lsls	r3, r3, #2
 801311a:	189b      	adds	r3, r3, r2
 801311c:	00db      	lsls	r3, r3, #3
 801311e:	3369      	adds	r3, #105	@ 0x69
 8013120:	33ff      	adds	r3, #255	@ 0xff
 8013122:	687a      	ldr	r2, [r7, #4]
 8013124:	18d3      	adds	r3, r2, r3
 8013126:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8013128:	68fb      	ldr	r3, [r7, #12]
 801312a:	2200      	movs	r2, #0
 801312c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 801312e:	68fb      	ldr	r3, [r7, #12]
 8013130:	2201      	movs	r2, #1
 8013132:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8013134:	1cfb      	adds	r3, r7, #3
 8013136:	781b      	ldrb	r3, [r3, #0]
 8013138:	2207      	movs	r2, #7
 801313a:	4013      	ands	r3, r2
 801313c:	b2da      	uxtb	r2, r3
 801313e:	68fb      	ldr	r3, [r7, #12]
 8013140:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8013142:	687a      	ldr	r2, [r7, #4]
 8013144:	23aa      	movs	r3, #170	@ 0xaa
 8013146:	009b      	lsls	r3, r3, #2
 8013148:	5cd3      	ldrb	r3, [r2, r3]
 801314a:	2b01      	cmp	r3, #1
 801314c:	d101      	bne.n	8013152 <HAL_PCD_EP_SetStall+0x8c>
 801314e:	2302      	movs	r3, #2
 8013150:	e011      	b.n	8013176 <HAL_PCD_EP_SetStall+0xb0>
 8013152:	687a      	ldr	r2, [r7, #4]
 8013154:	23aa      	movs	r3, #170	@ 0xaa
 8013156:	009b      	lsls	r3, r3, #2
 8013158:	2101      	movs	r1, #1
 801315a:	54d1      	strb	r1, [r2, r3]

  (void)USB_EPSetStall(hpcd->Instance, ep);
 801315c:	687b      	ldr	r3, [r7, #4]
 801315e:	681b      	ldr	r3, [r3, #0]
 8013160:	68fa      	ldr	r2, [r7, #12]
 8013162:	0011      	movs	r1, r2
 8013164:	0018      	movs	r0, r3
 8013166:	f007 f9b1 	bl	801a4cc <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 801316a:	687a      	ldr	r2, [r7, #4]
 801316c:	23aa      	movs	r3, #170	@ 0xaa
 801316e:	009b      	lsls	r3, r3, #2
 8013170:	2100      	movs	r1, #0
 8013172:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8013174:	2300      	movs	r3, #0
}
 8013176:	0018      	movs	r0, r3
 8013178:	46bd      	mov	sp, r7
 801317a:	b004      	add	sp, #16
 801317c:	bd80      	pop	{r7, pc}

0801317e <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 801317e:	b580      	push	{r7, lr}
 8013180:	b084      	sub	sp, #16
 8013182:	af00      	add	r7, sp, #0
 8013184:	6078      	str	r0, [r7, #4]
 8013186:	000a      	movs	r2, r1
 8013188:	1cfb      	adds	r3, r7, #3
 801318a:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 801318c:	1cfb      	adds	r3, r7, #3
 801318e:	781b      	ldrb	r3, [r3, #0]
 8013190:	220f      	movs	r2, #15
 8013192:	401a      	ands	r2, r3
 8013194:	687b      	ldr	r3, [r7, #4]
 8013196:	685b      	ldr	r3, [r3, #4]
 8013198:	429a      	cmp	r2, r3
 801319a:	d901      	bls.n	80131a0 <HAL_PCD_EP_ClrStall+0x22>
  {
    return HAL_ERROR;
 801319c:	2301      	movs	r3, #1
 801319e:	e048      	b.n	8013232 <HAL_PCD_EP_ClrStall+0xb4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80131a0:	1cfb      	adds	r3, r7, #3
 80131a2:	781b      	ldrb	r3, [r3, #0]
 80131a4:	b25b      	sxtb	r3, r3
 80131a6:	2b00      	cmp	r3, #0
 80131a8:	da0f      	bge.n	80131ca <HAL_PCD_EP_ClrStall+0x4c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80131aa:	1cfb      	adds	r3, r7, #3
 80131ac:	781b      	ldrb	r3, [r3, #0]
 80131ae:	2207      	movs	r2, #7
 80131b0:	4013      	ands	r3, r2
 80131b2:	1c5a      	adds	r2, r3, #1
 80131b4:	0013      	movs	r3, r2
 80131b6:	009b      	lsls	r3, r3, #2
 80131b8:	189b      	adds	r3, r3, r2
 80131ba:	00db      	lsls	r3, r3, #3
 80131bc:	687a      	ldr	r2, [r7, #4]
 80131be:	18d3      	adds	r3, r2, r3
 80131c0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80131c2:	68fb      	ldr	r3, [r7, #12]
 80131c4:	2201      	movs	r2, #1
 80131c6:	705a      	strb	r2, [r3, #1]
 80131c8:	e00f      	b.n	80131ea <HAL_PCD_EP_ClrStall+0x6c>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80131ca:	1cfb      	adds	r3, r7, #3
 80131cc:	781b      	ldrb	r3, [r3, #0]
 80131ce:	2207      	movs	r2, #7
 80131d0:	401a      	ands	r2, r3
 80131d2:	0013      	movs	r3, r2
 80131d4:	009b      	lsls	r3, r3, #2
 80131d6:	189b      	adds	r3, r3, r2
 80131d8:	00db      	lsls	r3, r3, #3
 80131da:	3369      	adds	r3, #105	@ 0x69
 80131dc:	33ff      	adds	r3, #255	@ 0xff
 80131de:	687a      	ldr	r2, [r7, #4]
 80131e0:	18d3      	adds	r3, r2, r3
 80131e2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80131e4:	68fb      	ldr	r3, [r7, #12]
 80131e6:	2200      	movs	r2, #0
 80131e8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80131ea:	68fb      	ldr	r3, [r7, #12]
 80131ec:	2200      	movs	r2, #0
 80131ee:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80131f0:	1cfb      	adds	r3, r7, #3
 80131f2:	781b      	ldrb	r3, [r3, #0]
 80131f4:	2207      	movs	r2, #7
 80131f6:	4013      	ands	r3, r2
 80131f8:	b2da      	uxtb	r2, r3
 80131fa:	68fb      	ldr	r3, [r7, #12]
 80131fc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80131fe:	687a      	ldr	r2, [r7, #4]
 8013200:	23aa      	movs	r3, #170	@ 0xaa
 8013202:	009b      	lsls	r3, r3, #2
 8013204:	5cd3      	ldrb	r3, [r2, r3]
 8013206:	2b01      	cmp	r3, #1
 8013208:	d101      	bne.n	801320e <HAL_PCD_EP_ClrStall+0x90>
 801320a:	2302      	movs	r3, #2
 801320c:	e011      	b.n	8013232 <HAL_PCD_EP_ClrStall+0xb4>
 801320e:	687a      	ldr	r2, [r7, #4]
 8013210:	23aa      	movs	r3, #170	@ 0xaa
 8013212:	009b      	lsls	r3, r3, #2
 8013214:	2101      	movs	r1, #1
 8013216:	54d1      	strb	r1, [r2, r3]
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8013218:	687b      	ldr	r3, [r7, #4]
 801321a:	681b      	ldr	r3, [r3, #0]
 801321c:	68fa      	ldr	r2, [r7, #12]
 801321e:	0011      	movs	r1, r2
 8013220:	0018      	movs	r0, r3
 8013222:	f007 f9a3 	bl	801a56c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8013226:	687a      	ldr	r2, [r7, #4]
 8013228:	23aa      	movs	r3, #170	@ 0xaa
 801322a:	009b      	lsls	r3, r3, #2
 801322c:	2100      	movs	r1, #0
 801322e:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8013230:	2300      	movs	r3, #0
}
 8013232:	0018      	movs	r0, r3
 8013234:	46bd      	mov	sp, r7
 8013236:	b004      	add	sp, #16
 8013238:	bd80      	pop	{r7, pc}
	...

0801323c <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 801323c:	b5b0      	push	{r4, r5, r7, lr}
 801323e:	b096      	sub	sp, #88	@ 0x58
 8013240:	af00      	add	r7, sp, #0
 8013242:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8013244:	f000 fbec 	bl	8013a20 <PCD_EP_ISR_Handler+0x7e4>
  {
    wIstr = hpcd->Instance->ISTR;
 8013248:	687b      	ldr	r3, [r7, #4]
 801324a:	681a      	ldr	r2, [r3, #0]
 801324c:	204e      	movs	r0, #78	@ 0x4e
 801324e:	183b      	adds	r3, r7, r0
 8013250:	2144      	movs	r1, #68	@ 0x44
 8013252:	5a52      	ldrh	r2, [r2, r1]
 8013254:	801a      	strh	r2, [r3, #0]

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8013256:	183b      	adds	r3, r7, r0
 8013258:	881b      	ldrh	r3, [r3, #0]
 801325a:	b2da      	uxtb	r2, r3
 801325c:	244d      	movs	r4, #77	@ 0x4d
 801325e:	193b      	adds	r3, r7, r4
 8013260:	210f      	movs	r1, #15
 8013262:	400a      	ands	r2, r1
 8013264:	701a      	strb	r2, [r3, #0]

    if (epindex == 0U)
 8013266:	193b      	adds	r3, r7, r4
 8013268:	781b      	ldrb	r3, [r3, #0]
 801326a:	2b00      	cmp	r3, #0
 801326c:	d000      	beq.n	8013270 <PCD_EP_ISR_Handler+0x34>
 801326e:	e18f      	b.n	8013590 <PCD_EP_ISR_Handler+0x354>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8013270:	183b      	adds	r3, r7, r0
 8013272:	881b      	ldrh	r3, [r3, #0]
 8013274:	2210      	movs	r2, #16
 8013276:	4013      	ands	r3, r2
 8013278:	d155      	bne.n	8013326 <PCD_EP_ISR_Handler+0xea>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 801327a:	687b      	ldr	r3, [r7, #4]
 801327c:	681b      	ldr	r3, [r3, #0]
 801327e:	881b      	ldrh	r3, [r3, #0]
 8013280:	b29a      	uxth	r2, r3
 8013282:	200e      	movs	r0, #14
 8013284:	183b      	adds	r3, r7, r0
 8013286:	49bb      	ldr	r1, [pc, #748]	@ (8013574 <PCD_EP_ISR_Handler+0x338>)
 8013288:	400a      	ands	r2, r1
 801328a:	801a      	strh	r2, [r3, #0]
 801328c:	687b      	ldr	r3, [r7, #4]
 801328e:	681b      	ldr	r3, [r3, #0]
 8013290:	183a      	adds	r2, r7, r0
 8013292:	8812      	ldrh	r2, [r2, #0]
 8013294:	49b8      	ldr	r1, [pc, #736]	@ (8013578 <PCD_EP_ISR_Handler+0x33c>)
 8013296:	430a      	orrs	r2, r1
 8013298:	b292      	uxth	r2, r2
 801329a:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->IN_ep[0];
 801329c:	687b      	ldr	r3, [r7, #4]
 801329e:	3328      	adds	r3, #40	@ 0x28
 80132a0:	657b      	str	r3, [r7, #84]	@ 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80132a2:	687b      	ldr	r3, [r7, #4]
 80132a4:	681b      	ldr	r3, [r3, #0]
 80132a6:	2250      	movs	r2, #80	@ 0x50
 80132a8:	5a9b      	ldrh	r3, [r3, r2]
 80132aa:	b29b      	uxth	r3, r3
 80132ac:	001a      	movs	r2, r3
 80132ae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80132b0:	781b      	ldrb	r3, [r3, #0]
 80132b2:	00db      	lsls	r3, r3, #3
 80132b4:	18d2      	adds	r2, r2, r3
 80132b6:	687b      	ldr	r3, [r7, #4]
 80132b8:	681b      	ldr	r3, [r3, #0]
 80132ba:	18d3      	adds	r3, r2, r3
 80132bc:	4aaf      	ldr	r2, [pc, #700]	@ (801357c <PCD_EP_ISR_Handler+0x340>)
 80132be:	4694      	mov	ip, r2
 80132c0:	4463      	add	r3, ip
 80132c2:	881b      	ldrh	r3, [r3, #0]
 80132c4:	059b      	lsls	r3, r3, #22
 80132c6:	0d9a      	lsrs	r2, r3, #22
 80132c8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80132ca:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80132cc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80132ce:	695a      	ldr	r2, [r3, #20]
 80132d0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80132d2:	69db      	ldr	r3, [r3, #28]
 80132d4:	18d2      	adds	r2, r2, r3
 80132d6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80132d8:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80132da:	687b      	ldr	r3, [r7, #4]
 80132dc:	2100      	movs	r1, #0
 80132de:	0018      	movs	r0, r3
 80132e0:	f009 fab2 	bl	801c848 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80132e4:	687b      	ldr	r3, [r7, #4]
 80132e6:	2224      	movs	r2, #36	@ 0x24
 80132e8:	5c9b      	ldrb	r3, [r3, r2]
 80132ea:	b2db      	uxtb	r3, r3
 80132ec:	2b00      	cmp	r3, #0
 80132ee:	d101      	bne.n	80132f4 <PCD_EP_ISR_Handler+0xb8>
 80132f0:	f000 fb96 	bl	8013a20 <PCD_EP_ISR_Handler+0x7e4>
 80132f4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80132f6:	699b      	ldr	r3, [r3, #24]
 80132f8:	2b00      	cmp	r3, #0
 80132fa:	d001      	beq.n	8013300 <PCD_EP_ISR_Handler+0xc4>
 80132fc:	f000 fb90 	bl	8013a20 <PCD_EP_ISR_Handler+0x7e4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8013300:	687b      	ldr	r3, [r7, #4]
 8013302:	2224      	movs	r2, #36	@ 0x24
 8013304:	5c9b      	ldrb	r3, [r3, r2]
 8013306:	b2db      	uxtb	r3, r3
 8013308:	2280      	movs	r2, #128	@ 0x80
 801330a:	4252      	negs	r2, r2
 801330c:	4313      	orrs	r3, r2
 801330e:	b2da      	uxtb	r2, r3
 8013310:	687b      	ldr	r3, [r7, #4]
 8013312:	681b      	ldr	r3, [r3, #0]
 8013314:	0011      	movs	r1, r2
 8013316:	224c      	movs	r2, #76	@ 0x4c
 8013318:	5299      	strh	r1, [r3, r2]
          hpcd->USB_Address = 0U;
 801331a:	687b      	ldr	r3, [r7, #4]
 801331c:	2224      	movs	r2, #36	@ 0x24
 801331e:	2100      	movs	r1, #0
 8013320:	5499      	strb	r1, [r3, r2]
 8013322:	f000 fb7d 	bl	8013a20 <PCD_EP_ISR_Handler+0x7e4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8013326:	687b      	ldr	r3, [r7, #4]
 8013328:	3369      	adds	r3, #105	@ 0x69
 801332a:	33ff      	adds	r3, #255	@ 0xff
 801332c:	657b      	str	r3, [r7, #84]	@ 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 801332e:	687b      	ldr	r3, [r7, #4]
 8013330:	681a      	ldr	r2, [r3, #0]
 8013332:	214a      	movs	r1, #74	@ 0x4a
 8013334:	187b      	adds	r3, r7, r1
 8013336:	8812      	ldrh	r2, [r2, #0]
 8013338:	801a      	strh	r2, [r3, #0]

        if ((wEPVal & USB_EP_SETUP) != 0U)
 801333a:	187b      	adds	r3, r7, r1
 801333c:	881a      	ldrh	r2, [r3, #0]
 801333e:	2380      	movs	r3, #128	@ 0x80
 8013340:	011b      	lsls	r3, r3, #4
 8013342:	4013      	ands	r3, r2
 8013344:	d037      	beq.n	80133b6 <PCD_EP_ISR_Handler+0x17a>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8013346:	687b      	ldr	r3, [r7, #4]
 8013348:	681b      	ldr	r3, [r3, #0]
 801334a:	2250      	movs	r2, #80	@ 0x50
 801334c:	5a9b      	ldrh	r3, [r3, r2]
 801334e:	b29b      	uxth	r3, r3
 8013350:	001a      	movs	r2, r3
 8013352:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013354:	781b      	ldrb	r3, [r3, #0]
 8013356:	00db      	lsls	r3, r3, #3
 8013358:	18d2      	adds	r2, r2, r3
 801335a:	687b      	ldr	r3, [r7, #4]
 801335c:	681b      	ldr	r3, [r3, #0]
 801335e:	18d3      	adds	r3, r2, r3
 8013360:	4a87      	ldr	r2, [pc, #540]	@ (8013580 <PCD_EP_ISR_Handler+0x344>)
 8013362:	4694      	mov	ip, r2
 8013364:	4463      	add	r3, ip
 8013366:	881b      	ldrh	r3, [r3, #0]
 8013368:	059b      	lsls	r3, r3, #22
 801336a:	0d9a      	lsrs	r2, r3, #22
 801336c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801336e:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8013370:	687b      	ldr	r3, [r7, #4]
 8013372:	6818      	ldr	r0, [r3, #0]
 8013374:	687b      	ldr	r3, [r7, #4]
 8013376:	22ac      	movs	r2, #172	@ 0xac
 8013378:	0092      	lsls	r2, r2, #2
 801337a:	1899      	adds	r1, r3, r2
 801337c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801337e:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8013380:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013382:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8013384:	b29b      	uxth	r3, r3
 8013386:	f007 fa24 	bl	801a7d2 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 801338a:	687b      	ldr	r3, [r7, #4]
 801338c:	681b      	ldr	r3, [r3, #0]
 801338e:	881b      	ldrh	r3, [r3, #0]
 8013390:	b29a      	uxth	r2, r3
 8013392:	2010      	movs	r0, #16
 8013394:	183b      	adds	r3, r7, r0
 8013396:	497b      	ldr	r1, [pc, #492]	@ (8013584 <PCD_EP_ISR_Handler+0x348>)
 8013398:	400a      	ands	r2, r1
 801339a:	801a      	strh	r2, [r3, #0]
 801339c:	687b      	ldr	r3, [r7, #4]
 801339e:	681b      	ldr	r3, [r3, #0]
 80133a0:	183a      	adds	r2, r7, r0
 80133a2:	8812      	ldrh	r2, [r2, #0]
 80133a4:	2180      	movs	r1, #128	@ 0x80
 80133a6:	430a      	orrs	r2, r1
 80133a8:	b292      	uxth	r2, r2
 80133aa:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 80133ac:	687b      	ldr	r3, [r7, #4]
 80133ae:	0018      	movs	r0, r3
 80133b0:	f009 fa14 	bl	801c7dc <HAL_PCD_SetupStageCallback>
 80133b4:	e334      	b.n	8013a20 <PCD_EP_ISR_Handler+0x7e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80133b6:	234a      	movs	r3, #74	@ 0x4a
 80133b8:	18fb      	adds	r3, r7, r3
 80133ba:	2200      	movs	r2, #0
 80133bc:	5e9b      	ldrsh	r3, [r3, r2]
 80133be:	2b00      	cmp	r3, #0
 80133c0:	db00      	blt.n	80133c4 <PCD_EP_ISR_Handler+0x188>
 80133c2:	e32d      	b.n	8013a20 <PCD_EP_ISR_Handler+0x7e4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80133c4:	687b      	ldr	r3, [r7, #4]
 80133c6:	681b      	ldr	r3, [r3, #0]
 80133c8:	881b      	ldrh	r3, [r3, #0]
 80133ca:	b29a      	uxth	r2, r3
 80133cc:	201e      	movs	r0, #30
 80133ce:	183b      	adds	r3, r7, r0
 80133d0:	496c      	ldr	r1, [pc, #432]	@ (8013584 <PCD_EP_ISR_Handler+0x348>)
 80133d2:	400a      	ands	r2, r1
 80133d4:	801a      	strh	r2, [r3, #0]
 80133d6:	687b      	ldr	r3, [r7, #4]
 80133d8:	681b      	ldr	r3, [r3, #0]
 80133da:	183a      	adds	r2, r7, r0
 80133dc:	8812      	ldrh	r2, [r2, #0]
 80133de:	2180      	movs	r1, #128	@ 0x80
 80133e0:	430a      	orrs	r2, r1
 80133e2:	b292      	uxth	r2, r2
 80133e4:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80133e6:	687b      	ldr	r3, [r7, #4]
 80133e8:	681b      	ldr	r3, [r3, #0]
 80133ea:	2250      	movs	r2, #80	@ 0x50
 80133ec:	5a9b      	ldrh	r3, [r3, r2]
 80133ee:	b29b      	uxth	r3, r3
 80133f0:	001a      	movs	r2, r3
 80133f2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80133f4:	781b      	ldrb	r3, [r3, #0]
 80133f6:	00db      	lsls	r3, r3, #3
 80133f8:	18d2      	adds	r2, r2, r3
 80133fa:	687b      	ldr	r3, [r7, #4]
 80133fc:	681b      	ldr	r3, [r3, #0]
 80133fe:	18d3      	adds	r3, r2, r3
 8013400:	4a5f      	ldr	r2, [pc, #380]	@ (8013580 <PCD_EP_ISR_Handler+0x344>)
 8013402:	4694      	mov	ip, r2
 8013404:	4463      	add	r3, ip
 8013406:	881b      	ldrh	r3, [r3, #0]
 8013408:	059b      	lsls	r3, r3, #22
 801340a:	0d9a      	lsrs	r2, r3, #22
 801340c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801340e:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8013410:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013412:	69db      	ldr	r3, [r3, #28]
 8013414:	2b00      	cmp	r3, #0
 8013416:	d01a      	beq.n	801344e <PCD_EP_ISR_Handler+0x212>
 8013418:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801341a:	695b      	ldr	r3, [r3, #20]
 801341c:	2b00      	cmp	r3, #0
 801341e:	d016      	beq.n	801344e <PCD_EP_ISR_Handler+0x212>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8013420:	687b      	ldr	r3, [r7, #4]
 8013422:	6818      	ldr	r0, [r3, #0]
 8013424:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013426:	6959      	ldr	r1, [r3, #20]
 8013428:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801342a:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 801342c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801342e:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8013430:	b29b      	uxth	r3, r3
 8013432:	f007 f9ce 	bl	801a7d2 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8013436:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013438:	695a      	ldr	r2, [r3, #20]
 801343a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801343c:	69db      	ldr	r3, [r3, #28]
 801343e:	18d2      	adds	r2, r2, r3
 8013440:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013442:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8013444:	687b      	ldr	r3, [r7, #4]
 8013446:	2100      	movs	r1, #0
 8013448:	0018      	movs	r0, r3
 801344a:	f009 f9dc 	bl	801c806 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 801344e:	687b      	ldr	r3, [r7, #4]
 8013450:	681a      	ldr	r2, [r3, #0]
 8013452:	214a      	movs	r1, #74	@ 0x4a
 8013454:	187b      	adds	r3, r7, r1
 8013456:	8812      	ldrh	r2, [r2, #0]
 8013458:	801a      	strh	r2, [r3, #0]

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 801345a:	187b      	adds	r3, r7, r1
 801345c:	881a      	ldrh	r2, [r3, #0]
 801345e:	2380      	movs	r3, #128	@ 0x80
 8013460:	011b      	lsls	r3, r3, #4
 8013462:	4013      	ands	r3, r2
 8013464:	d000      	beq.n	8013468 <PCD_EP_ISR_Handler+0x22c>
 8013466:	e2db      	b.n	8013a20 <PCD_EP_ISR_Handler+0x7e4>
 8013468:	187b      	adds	r3, r7, r1
 801346a:	881a      	ldrh	r2, [r3, #0]
 801346c:	23c0      	movs	r3, #192	@ 0xc0
 801346e:	019b      	lsls	r3, r3, #6
 8013470:	401a      	ands	r2, r3
 8013472:	23c0      	movs	r3, #192	@ 0xc0
 8013474:	019b      	lsls	r3, r3, #6
 8013476:	429a      	cmp	r2, r3
 8013478:	d100      	bne.n	801347c <PCD_EP_ISR_Handler+0x240>
 801347a:	e2d1      	b.n	8013a20 <PCD_EP_ISR_Handler+0x7e4>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 801347c:	687b      	ldr	r3, [r7, #4]
 801347e:	681b      	ldr	r3, [r3, #0]
 8013480:	61bb      	str	r3, [r7, #24]
 8013482:	687b      	ldr	r3, [r7, #4]
 8013484:	681b      	ldr	r3, [r3, #0]
 8013486:	2250      	movs	r2, #80	@ 0x50
 8013488:	5a9b      	ldrh	r3, [r3, r2]
 801348a:	b29b      	uxth	r3, r3
 801348c:	001a      	movs	r2, r3
 801348e:	69bb      	ldr	r3, [r7, #24]
 8013490:	189b      	adds	r3, r3, r2
 8013492:	61bb      	str	r3, [r7, #24]
 8013494:	69bb      	ldr	r3, [r7, #24]
 8013496:	4a3a      	ldr	r2, [pc, #232]	@ (8013580 <PCD_EP_ISR_Handler+0x344>)
 8013498:	4694      	mov	ip, r2
 801349a:	4463      	add	r3, ip
 801349c:	617b      	str	r3, [r7, #20]
 801349e:	697b      	ldr	r3, [r7, #20]
 80134a0:	881b      	ldrh	r3, [r3, #0]
 80134a2:	b29b      	uxth	r3, r3
 80134a4:	059b      	lsls	r3, r3, #22
 80134a6:	0d9b      	lsrs	r3, r3, #22
 80134a8:	b29a      	uxth	r2, r3
 80134aa:	697b      	ldr	r3, [r7, #20]
 80134ac:	801a      	strh	r2, [r3, #0]
 80134ae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80134b0:	691b      	ldr	r3, [r3, #16]
 80134b2:	2b3e      	cmp	r3, #62	@ 0x3e
 80134b4:	d91a      	bls.n	80134ec <PCD_EP_ISR_Handler+0x2b0>
 80134b6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80134b8:	691b      	ldr	r3, [r3, #16]
 80134ba:	095b      	lsrs	r3, r3, #5
 80134bc:	647b      	str	r3, [r7, #68]	@ 0x44
 80134be:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80134c0:	691b      	ldr	r3, [r3, #16]
 80134c2:	221f      	movs	r2, #31
 80134c4:	4013      	ands	r3, r2
 80134c6:	d102      	bne.n	80134ce <PCD_EP_ISR_Handler+0x292>
 80134c8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80134ca:	3b01      	subs	r3, #1
 80134cc:	647b      	str	r3, [r7, #68]	@ 0x44
 80134ce:	697b      	ldr	r3, [r7, #20]
 80134d0:	881b      	ldrh	r3, [r3, #0]
 80134d2:	b29a      	uxth	r2, r3
 80134d4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80134d6:	b29b      	uxth	r3, r3
 80134d8:	029b      	lsls	r3, r3, #10
 80134da:	b29b      	uxth	r3, r3
 80134dc:	4313      	orrs	r3, r2
 80134de:	b29b      	uxth	r3, r3
 80134e0:	4a25      	ldr	r2, [pc, #148]	@ (8013578 <PCD_EP_ISR_Handler+0x33c>)
 80134e2:	4313      	orrs	r3, r2
 80134e4:	b29a      	uxth	r2, r3
 80134e6:	697b      	ldr	r3, [r7, #20]
 80134e8:	801a      	strh	r2, [r3, #0]
 80134ea:	e023      	b.n	8013534 <PCD_EP_ISR_Handler+0x2f8>
 80134ec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80134ee:	691b      	ldr	r3, [r3, #16]
 80134f0:	2b00      	cmp	r3, #0
 80134f2:	d108      	bne.n	8013506 <PCD_EP_ISR_Handler+0x2ca>
 80134f4:	697b      	ldr	r3, [r7, #20]
 80134f6:	881b      	ldrh	r3, [r3, #0]
 80134f8:	b29b      	uxth	r3, r3
 80134fa:	4a1f      	ldr	r2, [pc, #124]	@ (8013578 <PCD_EP_ISR_Handler+0x33c>)
 80134fc:	4313      	orrs	r3, r2
 80134fe:	b29a      	uxth	r2, r3
 8013500:	697b      	ldr	r3, [r7, #20]
 8013502:	801a      	strh	r2, [r3, #0]
 8013504:	e016      	b.n	8013534 <PCD_EP_ISR_Handler+0x2f8>
 8013506:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013508:	691b      	ldr	r3, [r3, #16]
 801350a:	085b      	lsrs	r3, r3, #1
 801350c:	647b      	str	r3, [r7, #68]	@ 0x44
 801350e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013510:	691b      	ldr	r3, [r3, #16]
 8013512:	2201      	movs	r2, #1
 8013514:	4013      	ands	r3, r2
 8013516:	d002      	beq.n	801351e <PCD_EP_ISR_Handler+0x2e2>
 8013518:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801351a:	3301      	adds	r3, #1
 801351c:	647b      	str	r3, [r7, #68]	@ 0x44
 801351e:	697b      	ldr	r3, [r7, #20]
 8013520:	881b      	ldrh	r3, [r3, #0]
 8013522:	b29a      	uxth	r2, r3
 8013524:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013526:	b29b      	uxth	r3, r3
 8013528:	029b      	lsls	r3, r3, #10
 801352a:	b29b      	uxth	r3, r3
 801352c:	4313      	orrs	r3, r2
 801352e:	b29a      	uxth	r2, r3
 8013530:	697b      	ldr	r3, [r7, #20]
 8013532:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8013534:	687b      	ldr	r3, [r7, #4]
 8013536:	681b      	ldr	r3, [r3, #0]
 8013538:	881b      	ldrh	r3, [r3, #0]
 801353a:	b29a      	uxth	r2, r3
 801353c:	2012      	movs	r0, #18
 801353e:	183b      	adds	r3, r7, r0
 8013540:	4911      	ldr	r1, [pc, #68]	@ (8013588 <PCD_EP_ISR_Handler+0x34c>)
 8013542:	400a      	ands	r2, r1
 8013544:	801a      	strh	r2, [r3, #0]
 8013546:	183b      	adds	r3, r7, r0
 8013548:	183a      	adds	r2, r7, r0
 801354a:	8812      	ldrh	r2, [r2, #0]
 801354c:	2180      	movs	r1, #128	@ 0x80
 801354e:	0149      	lsls	r1, r1, #5
 8013550:	404a      	eors	r2, r1
 8013552:	801a      	strh	r2, [r3, #0]
 8013554:	183b      	adds	r3, r7, r0
 8013556:	183a      	adds	r2, r7, r0
 8013558:	8812      	ldrh	r2, [r2, #0]
 801355a:	2180      	movs	r1, #128	@ 0x80
 801355c:	0189      	lsls	r1, r1, #6
 801355e:	404a      	eors	r2, r1
 8013560:	801a      	strh	r2, [r3, #0]
 8013562:	687b      	ldr	r3, [r7, #4]
 8013564:	681b      	ldr	r3, [r3, #0]
 8013566:	183a      	adds	r2, r7, r0
 8013568:	8812      	ldrh	r2, [r2, #0]
 801356a:	4908      	ldr	r1, [pc, #32]	@ (801358c <PCD_EP_ISR_Handler+0x350>)
 801356c:	430a      	orrs	r2, r1
 801356e:	b292      	uxth	r2, r2
 8013570:	801a      	strh	r2, [r3, #0]
 8013572:	e255      	b.n	8013a20 <PCD_EP_ISR_Handler+0x7e4>
 8013574:	ffff8f0f 	.word	0xffff8f0f
 8013578:	ffff8000 	.word	0xffff8000
 801357c:	00000402 	.word	0x00000402
 8013580:	00000406 	.word	0x00000406
 8013584:	00000f8f 	.word	0x00000f8f
 8013588:	ffffbf8f 	.word	0xffffbf8f
 801358c:	ffff8080 	.word	0xffff8080
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8013590:	687b      	ldr	r3, [r7, #4]
 8013592:	681b      	ldr	r3, [r3, #0]
 8013594:	001a      	movs	r2, r3
 8013596:	204d      	movs	r0, #77	@ 0x4d
 8013598:	183b      	adds	r3, r7, r0
 801359a:	781b      	ldrb	r3, [r3, #0]
 801359c:	009b      	lsls	r3, r3, #2
 801359e:	18d2      	adds	r2, r2, r3
 80135a0:	214a      	movs	r1, #74	@ 0x4a
 80135a2:	187b      	adds	r3, r7, r1
 80135a4:	8812      	ldrh	r2, [r2, #0]
 80135a6:	801a      	strh	r2, [r3, #0]

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80135a8:	187b      	adds	r3, r7, r1
 80135aa:	2200      	movs	r2, #0
 80135ac:	5e9b      	ldrsh	r3, [r3, r2]
 80135ae:	2b00      	cmp	r3, #0
 80135b0:	db00      	blt.n	80135b4 <PCD_EP_ISR_Handler+0x378>
 80135b2:	e0fa      	b.n	80137aa <PCD_EP_ISR_Handler+0x56e>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80135b4:	687b      	ldr	r3, [r7, #4]
 80135b6:	681b      	ldr	r3, [r3, #0]
 80135b8:	001a      	movs	r2, r3
 80135ba:	183b      	adds	r3, r7, r0
 80135bc:	781b      	ldrb	r3, [r3, #0]
 80135be:	009b      	lsls	r3, r3, #2
 80135c0:	18d3      	adds	r3, r2, r3
 80135c2:	881b      	ldrh	r3, [r3, #0]
 80135c4:	b29a      	uxth	r2, r3
 80135c6:	2448      	movs	r4, #72	@ 0x48
 80135c8:	193b      	adds	r3, r7, r4
 80135ca:	49d1      	ldr	r1, [pc, #836]	@ (8013910 <PCD_EP_ISR_Handler+0x6d4>)
 80135cc:	400a      	ands	r2, r1
 80135ce:	801a      	strh	r2, [r3, #0]
 80135d0:	687b      	ldr	r3, [r7, #4]
 80135d2:	681b      	ldr	r3, [r3, #0]
 80135d4:	001a      	movs	r2, r3
 80135d6:	183b      	adds	r3, r7, r0
 80135d8:	781b      	ldrb	r3, [r3, #0]
 80135da:	009b      	lsls	r3, r3, #2
 80135dc:	18d3      	adds	r3, r2, r3
 80135de:	193a      	adds	r2, r7, r4
 80135e0:	8812      	ldrh	r2, [r2, #0]
 80135e2:	2180      	movs	r1, #128	@ 0x80
 80135e4:	430a      	orrs	r2, r1
 80135e6:	b292      	uxth	r2, r2
 80135e8:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80135ea:	183b      	adds	r3, r7, r0
 80135ec:	781a      	ldrb	r2, [r3, #0]
 80135ee:	0013      	movs	r3, r2
 80135f0:	009b      	lsls	r3, r3, #2
 80135f2:	189b      	adds	r3, r3, r2
 80135f4:	00db      	lsls	r3, r3, #3
 80135f6:	3369      	adds	r3, #105	@ 0x69
 80135f8:	33ff      	adds	r3, #255	@ 0xff
 80135fa:	687a      	ldr	r2, [r7, #4]
 80135fc:	18d3      	adds	r3, r2, r3
 80135fe:	657b      	str	r3, [r7, #84]	@ 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8013600:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013602:	7b1b      	ldrb	r3, [r3, #12]
 8013604:	2b00      	cmp	r3, #0
 8013606:	d125      	bne.n	8013654 <PCD_EP_ISR_Handler+0x418>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8013608:	687b      	ldr	r3, [r7, #4]
 801360a:	681b      	ldr	r3, [r3, #0]
 801360c:	2250      	movs	r2, #80	@ 0x50
 801360e:	5a9b      	ldrh	r3, [r3, r2]
 8013610:	b29b      	uxth	r3, r3
 8013612:	001a      	movs	r2, r3
 8013614:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013616:	781b      	ldrb	r3, [r3, #0]
 8013618:	00db      	lsls	r3, r3, #3
 801361a:	18d2      	adds	r2, r2, r3
 801361c:	687b      	ldr	r3, [r7, #4]
 801361e:	681b      	ldr	r3, [r3, #0]
 8013620:	18d3      	adds	r3, r2, r3
 8013622:	4abc      	ldr	r2, [pc, #752]	@ (8013914 <PCD_EP_ISR_Handler+0x6d8>)
 8013624:	4694      	mov	ip, r2
 8013626:	4463      	add	r3, ip
 8013628:	881a      	ldrh	r2, [r3, #0]
 801362a:	2450      	movs	r4, #80	@ 0x50
 801362c:	193b      	adds	r3, r7, r4
 801362e:	0592      	lsls	r2, r2, #22
 8013630:	0d92      	lsrs	r2, r2, #22
 8013632:	801a      	strh	r2, [r3, #0]

          if (count != 0U)
 8013634:	193b      	adds	r3, r7, r4
 8013636:	881b      	ldrh	r3, [r3, #0]
 8013638:	2b00      	cmp	r3, #0
 801363a:	d100      	bne.n	801363e <PCD_EP_ISR_Handler+0x402>
 801363c:	e08d      	b.n	801375a <PCD_EP_ISR_Handler+0x51e>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 801363e:	687b      	ldr	r3, [r7, #4]
 8013640:	6818      	ldr	r0, [r3, #0]
 8013642:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013644:	6959      	ldr	r1, [r3, #20]
 8013646:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013648:	88da      	ldrh	r2, [r3, #6]
 801364a:	193b      	adds	r3, r7, r4
 801364c:	881b      	ldrh	r3, [r3, #0]
 801364e:	f007 f8c0 	bl	801a7d2 <USB_ReadPMA>
 8013652:	e082      	b.n	801375a <PCD_EP_ISR_Handler+0x51e>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8013654:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013656:	78db      	ldrb	r3, [r3, #3]
 8013658:	2b02      	cmp	r3, #2
 801365a:	d10c      	bne.n	8013676 <PCD_EP_ISR_Handler+0x43a>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 801365c:	2350      	movs	r3, #80	@ 0x50
 801365e:	18fc      	adds	r4, r7, r3
 8013660:	234a      	movs	r3, #74	@ 0x4a
 8013662:	18fb      	adds	r3, r7, r3
 8013664:	881a      	ldrh	r2, [r3, #0]
 8013666:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8013668:	687b      	ldr	r3, [r7, #4]
 801366a:	0018      	movs	r0, r3
 801366c:	f000 f9ec 	bl	8013a48 <HAL_PCD_EP_DB_Receive>
 8013670:	0003      	movs	r3, r0
 8013672:	8023      	strh	r3, [r4, #0]
 8013674:	e071      	b.n	801375a <PCD_EP_ISR_Handler+0x51e>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8013676:	687b      	ldr	r3, [r7, #4]
 8013678:	681b      	ldr	r3, [r3, #0]
 801367a:	001a      	movs	r2, r3
 801367c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801367e:	781b      	ldrb	r3, [r3, #0]
 8013680:	009b      	lsls	r3, r3, #2
 8013682:	18d3      	adds	r3, r2, r3
 8013684:	881b      	ldrh	r3, [r3, #0]
 8013686:	b29a      	uxth	r2, r3
 8013688:	2052      	movs	r0, #82	@ 0x52
 801368a:	183b      	adds	r3, r7, r0
 801368c:	49a2      	ldr	r1, [pc, #648]	@ (8013918 <PCD_EP_ISR_Handler+0x6dc>)
 801368e:	400a      	ands	r2, r1
 8013690:	801a      	strh	r2, [r3, #0]
 8013692:	687b      	ldr	r3, [r7, #4]
 8013694:	681b      	ldr	r3, [r3, #0]
 8013696:	001a      	movs	r2, r3
 8013698:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801369a:	781b      	ldrb	r3, [r3, #0]
 801369c:	009b      	lsls	r3, r3, #2
 801369e:	18d3      	adds	r3, r2, r3
 80136a0:	183a      	adds	r2, r7, r0
 80136a2:	8812      	ldrh	r2, [r2, #0]
 80136a4:	499d      	ldr	r1, [pc, #628]	@ (801391c <PCD_EP_ISR_Handler+0x6e0>)
 80136a6:	430a      	orrs	r2, r1
 80136a8:	b292      	uxth	r2, r2
 80136aa:	801a      	strh	r2, [r3, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80136ac:	687b      	ldr	r3, [r7, #4]
 80136ae:	681b      	ldr	r3, [r3, #0]
 80136b0:	001a      	movs	r2, r3
 80136b2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80136b4:	781b      	ldrb	r3, [r3, #0]
 80136b6:	009b      	lsls	r3, r3, #2
 80136b8:	18d3      	adds	r3, r2, r3
 80136ba:	881b      	ldrh	r3, [r3, #0]
 80136bc:	b29b      	uxth	r3, r3
 80136be:	001a      	movs	r2, r3
 80136c0:	2380      	movs	r3, #128	@ 0x80
 80136c2:	01db      	lsls	r3, r3, #7
 80136c4:	4013      	ands	r3, r2
 80136c6:	d024      	beq.n	8013712 <PCD_EP_ISR_Handler+0x4d6>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80136c8:	687b      	ldr	r3, [r7, #4]
 80136ca:	681b      	ldr	r3, [r3, #0]
 80136cc:	2250      	movs	r2, #80	@ 0x50
 80136ce:	5a9b      	ldrh	r3, [r3, r2]
 80136d0:	b29b      	uxth	r3, r3
 80136d2:	001a      	movs	r2, r3
 80136d4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80136d6:	781b      	ldrb	r3, [r3, #0]
 80136d8:	00db      	lsls	r3, r3, #3
 80136da:	18d2      	adds	r2, r2, r3
 80136dc:	687b      	ldr	r3, [r7, #4]
 80136de:	681b      	ldr	r3, [r3, #0]
 80136e0:	18d3      	adds	r3, r2, r3
 80136e2:	4a8f      	ldr	r2, [pc, #572]	@ (8013920 <PCD_EP_ISR_Handler+0x6e4>)
 80136e4:	4694      	mov	ip, r2
 80136e6:	4463      	add	r3, ip
 80136e8:	881a      	ldrh	r2, [r3, #0]
 80136ea:	2450      	movs	r4, #80	@ 0x50
 80136ec:	193b      	adds	r3, r7, r4
 80136ee:	0592      	lsls	r2, r2, #22
 80136f0:	0d92      	lsrs	r2, r2, #22
 80136f2:	801a      	strh	r2, [r3, #0]

              if (count != 0U)
 80136f4:	193b      	adds	r3, r7, r4
 80136f6:	881b      	ldrh	r3, [r3, #0]
 80136f8:	2b00      	cmp	r3, #0
 80136fa:	d02e      	beq.n	801375a <PCD_EP_ISR_Handler+0x51e>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80136fc:	687b      	ldr	r3, [r7, #4]
 80136fe:	6818      	ldr	r0, [r3, #0]
 8013700:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013702:	6959      	ldr	r1, [r3, #20]
 8013704:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013706:	891a      	ldrh	r2, [r3, #8]
 8013708:	193b      	adds	r3, r7, r4
 801370a:	881b      	ldrh	r3, [r3, #0]
 801370c:	f007 f861 	bl	801a7d2 <USB_ReadPMA>
 8013710:	e023      	b.n	801375a <PCD_EP_ISR_Handler+0x51e>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8013712:	687b      	ldr	r3, [r7, #4]
 8013714:	681b      	ldr	r3, [r3, #0]
 8013716:	2250      	movs	r2, #80	@ 0x50
 8013718:	5a9b      	ldrh	r3, [r3, r2]
 801371a:	b29b      	uxth	r3, r3
 801371c:	001a      	movs	r2, r3
 801371e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013720:	781b      	ldrb	r3, [r3, #0]
 8013722:	00db      	lsls	r3, r3, #3
 8013724:	18d2      	adds	r2, r2, r3
 8013726:	687b      	ldr	r3, [r7, #4]
 8013728:	681b      	ldr	r3, [r3, #0]
 801372a:	18d3      	adds	r3, r2, r3
 801372c:	4a79      	ldr	r2, [pc, #484]	@ (8013914 <PCD_EP_ISR_Handler+0x6d8>)
 801372e:	4694      	mov	ip, r2
 8013730:	4463      	add	r3, ip
 8013732:	881a      	ldrh	r2, [r3, #0]
 8013734:	2450      	movs	r4, #80	@ 0x50
 8013736:	193b      	adds	r3, r7, r4
 8013738:	0592      	lsls	r2, r2, #22
 801373a:	0d92      	lsrs	r2, r2, #22
 801373c:	801a      	strh	r2, [r3, #0]

              if (count != 0U)
 801373e:	193b      	adds	r3, r7, r4
 8013740:	881b      	ldrh	r3, [r3, #0]
 8013742:	2b00      	cmp	r3, #0
 8013744:	d009      	beq.n	801375a <PCD_EP_ISR_Handler+0x51e>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8013746:	687b      	ldr	r3, [r7, #4]
 8013748:	6818      	ldr	r0, [r3, #0]
 801374a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801374c:	6959      	ldr	r1, [r3, #20]
 801374e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013750:	895a      	ldrh	r2, [r3, #10]
 8013752:	193b      	adds	r3, r7, r4
 8013754:	881b      	ldrh	r3, [r3, #0]
 8013756:	f007 f83c 	bl	801a7d2 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 801375a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801375c:	69da      	ldr	r2, [r3, #28]
 801375e:	2150      	movs	r1, #80	@ 0x50
 8013760:	187b      	adds	r3, r7, r1
 8013762:	881b      	ldrh	r3, [r3, #0]
 8013764:	18d2      	adds	r2, r2, r3
 8013766:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013768:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 801376a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801376c:	695a      	ldr	r2, [r3, #20]
 801376e:	187b      	adds	r3, r7, r1
 8013770:	881b      	ldrh	r3, [r3, #0]
 8013772:	18d2      	adds	r2, r2, r3
 8013774:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013776:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8013778:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801377a:	699b      	ldr	r3, [r3, #24]
 801377c:	2b00      	cmp	r3, #0
 801377e:	d005      	beq.n	801378c <PCD_EP_ISR_Handler+0x550>
 8013780:	187b      	adds	r3, r7, r1
 8013782:	881a      	ldrh	r2, [r3, #0]
 8013784:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013786:	691b      	ldr	r3, [r3, #16]
 8013788:	429a      	cmp	r2, r3
 801378a:	d207      	bcs.n	801379c <PCD_EP_ISR_Handler+0x560>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 801378c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801378e:	781a      	ldrb	r2, [r3, #0]
 8013790:	687b      	ldr	r3, [r7, #4]
 8013792:	0011      	movs	r1, r2
 8013794:	0018      	movs	r0, r3
 8013796:	f009 f836 	bl	801c806 <HAL_PCD_DataOutStageCallback>
 801379a:	e006      	b.n	80137aa <PCD_EP_ISR_Handler+0x56e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 801379c:	687b      	ldr	r3, [r7, #4]
 801379e:	681b      	ldr	r3, [r3, #0]
 80137a0:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80137a2:	0011      	movs	r1, r2
 80137a4:	0018      	movs	r0, r3
 80137a6:	f005 fd59 	bl	801925c <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80137aa:	244a      	movs	r4, #74	@ 0x4a
 80137ac:	193b      	adds	r3, r7, r4
 80137ae:	881b      	ldrh	r3, [r3, #0]
 80137b0:	2280      	movs	r2, #128	@ 0x80
 80137b2:	4013      	ands	r3, r2
 80137b4:	d100      	bne.n	80137b8 <PCD_EP_ISR_Handler+0x57c>
 80137b6:	e133      	b.n	8013a20 <PCD_EP_ISR_Handler+0x7e4>
      {
        ep = &hpcd->IN_ep[epindex];
 80137b8:	204d      	movs	r0, #77	@ 0x4d
 80137ba:	183b      	adds	r3, r7, r0
 80137bc:	781b      	ldrb	r3, [r3, #0]
 80137be:	1c5a      	adds	r2, r3, #1
 80137c0:	0013      	movs	r3, r2
 80137c2:	009b      	lsls	r3, r3, #2
 80137c4:	189b      	adds	r3, r3, r2
 80137c6:	00db      	lsls	r3, r3, #3
 80137c8:	687a      	ldr	r2, [r7, #4]
 80137ca:	18d3      	adds	r3, r2, r3
 80137cc:	657b      	str	r3, [r7, #84]	@ 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80137ce:	687b      	ldr	r3, [r7, #4]
 80137d0:	681b      	ldr	r3, [r3, #0]
 80137d2:	001a      	movs	r2, r3
 80137d4:	183b      	adds	r3, r7, r0
 80137d6:	781b      	ldrb	r3, [r3, #0]
 80137d8:	009b      	lsls	r3, r3, #2
 80137da:	18d3      	adds	r3, r2, r3
 80137dc:	881b      	ldrh	r3, [r3, #0]
 80137de:	b29a      	uxth	r2, r3
 80137e0:	2542      	movs	r5, #66	@ 0x42
 80137e2:	197b      	adds	r3, r7, r5
 80137e4:	494f      	ldr	r1, [pc, #316]	@ (8013924 <PCD_EP_ISR_Handler+0x6e8>)
 80137e6:	400a      	ands	r2, r1
 80137e8:	801a      	strh	r2, [r3, #0]
 80137ea:	687b      	ldr	r3, [r7, #4]
 80137ec:	681b      	ldr	r3, [r3, #0]
 80137ee:	001a      	movs	r2, r3
 80137f0:	183b      	adds	r3, r7, r0
 80137f2:	781b      	ldrb	r3, [r3, #0]
 80137f4:	009b      	lsls	r3, r3, #2
 80137f6:	18d3      	adds	r3, r2, r3
 80137f8:	197a      	adds	r2, r7, r5
 80137fa:	8812      	ldrh	r2, [r2, #0]
 80137fc:	494a      	ldr	r1, [pc, #296]	@ (8013928 <PCD_EP_ISR_Handler+0x6ec>)
 80137fe:	430a      	orrs	r2, r1
 8013800:	b292      	uxth	r2, r2
 8013802:	801a      	strh	r2, [r3, #0]

        if (ep->type == EP_TYPE_ISOC)
 8013804:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013806:	78db      	ldrb	r3, [r3, #3]
 8013808:	2b01      	cmp	r3, #1
 801380a:	d000      	beq.n	801380e <PCD_EP_ISR_Handler+0x5d2>
 801380c:	e0af      	b.n	801396e <PCD_EP_ISR_Handler+0x732>
        {
          ep->xfer_len = 0U;
 801380e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013810:	2200      	movs	r2, #0
 8013812:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8013814:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013816:	7b1b      	ldrb	r3, [r3, #12]
 8013818:	2b00      	cmp	r3, #0
 801381a:	d100      	bne.n	801381e <PCD_EP_ISR_Handler+0x5e2>
 801381c:	e09f      	b.n	801395e <PCD_EP_ISR_Handler+0x722>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 801381e:	193b      	adds	r3, r7, r4
 8013820:	881b      	ldrh	r3, [r3, #0]
 8013822:	2240      	movs	r2, #64	@ 0x40
 8013824:	4013      	ands	r3, r2
 8013826:	d046      	beq.n	80138b6 <PCD_EP_ISR_Handler+0x67a>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8013828:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801382a:	785b      	ldrb	r3, [r3, #1]
 801382c:	2b00      	cmp	r3, #0
 801382e:	d125      	bne.n	801387c <PCD_EP_ISR_Handler+0x640>
 8013830:	687b      	ldr	r3, [r7, #4]
 8013832:	681b      	ldr	r3, [r3, #0]
 8013834:	627b      	str	r3, [r7, #36]	@ 0x24
 8013836:	687b      	ldr	r3, [r7, #4]
 8013838:	681b      	ldr	r3, [r3, #0]
 801383a:	2250      	movs	r2, #80	@ 0x50
 801383c:	5a9b      	ldrh	r3, [r3, r2]
 801383e:	b29b      	uxth	r3, r3
 8013840:	001a      	movs	r2, r3
 8013842:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013844:	189b      	adds	r3, r3, r2
 8013846:	627b      	str	r3, [r7, #36]	@ 0x24
 8013848:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801384a:	781b      	ldrb	r3, [r3, #0]
 801384c:	00da      	lsls	r2, r3, #3
 801384e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013850:	18d3      	adds	r3, r2, r3
 8013852:	4a33      	ldr	r2, [pc, #204]	@ (8013920 <PCD_EP_ISR_Handler+0x6e4>)
 8013854:	4694      	mov	ip, r2
 8013856:	4463      	add	r3, ip
 8013858:	623b      	str	r3, [r7, #32]
 801385a:	6a3b      	ldr	r3, [r7, #32]
 801385c:	881b      	ldrh	r3, [r3, #0]
 801385e:	b29b      	uxth	r3, r3
 8013860:	059b      	lsls	r3, r3, #22
 8013862:	0d9b      	lsrs	r3, r3, #22
 8013864:	b29a      	uxth	r2, r3
 8013866:	6a3b      	ldr	r3, [r7, #32]
 8013868:	801a      	strh	r2, [r3, #0]
 801386a:	6a3b      	ldr	r3, [r7, #32]
 801386c:	881b      	ldrh	r3, [r3, #0]
 801386e:	b29b      	uxth	r3, r3
 8013870:	4a2d      	ldr	r2, [pc, #180]	@ (8013928 <PCD_EP_ISR_Handler+0x6ec>)
 8013872:	4313      	orrs	r3, r2
 8013874:	b29a      	uxth	r2, r3
 8013876:	6a3b      	ldr	r3, [r7, #32]
 8013878:	801a      	strh	r2, [r3, #0]
 801387a:	e070      	b.n	801395e <PCD_EP_ISR_Handler+0x722>
 801387c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801387e:	785b      	ldrb	r3, [r3, #1]
 8013880:	2b01      	cmp	r3, #1
 8013882:	d16c      	bne.n	801395e <PCD_EP_ISR_Handler+0x722>
 8013884:	687b      	ldr	r3, [r7, #4]
 8013886:	681b      	ldr	r3, [r3, #0]
 8013888:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801388a:	687b      	ldr	r3, [r7, #4]
 801388c:	681b      	ldr	r3, [r3, #0]
 801388e:	2250      	movs	r2, #80	@ 0x50
 8013890:	5a9b      	ldrh	r3, [r3, r2]
 8013892:	b29b      	uxth	r3, r3
 8013894:	001a      	movs	r2, r3
 8013896:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013898:	189b      	adds	r3, r3, r2
 801389a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801389c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801389e:	781b      	ldrb	r3, [r3, #0]
 80138a0:	00da      	lsls	r2, r3, #3
 80138a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80138a4:	18d3      	adds	r3, r2, r3
 80138a6:	4a1e      	ldr	r2, [pc, #120]	@ (8013920 <PCD_EP_ISR_Handler+0x6e4>)
 80138a8:	4694      	mov	ip, r2
 80138aa:	4463      	add	r3, ip
 80138ac:	62bb      	str	r3, [r7, #40]	@ 0x28
 80138ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80138b0:	2200      	movs	r2, #0
 80138b2:	801a      	strh	r2, [r3, #0]
 80138b4:	e053      	b.n	801395e <PCD_EP_ISR_Handler+0x722>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80138b6:	687b      	ldr	r3, [r7, #4]
 80138b8:	681b      	ldr	r3, [r3, #0]
 80138ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80138bc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80138be:	785b      	ldrb	r3, [r3, #1]
 80138c0:	2b00      	cmp	r3, #0
 80138c2:	d133      	bne.n	801392c <PCD_EP_ISR_Handler+0x6f0>
 80138c4:	687b      	ldr	r3, [r7, #4]
 80138c6:	681b      	ldr	r3, [r3, #0]
 80138c8:	637b      	str	r3, [r7, #52]	@ 0x34
 80138ca:	687b      	ldr	r3, [r7, #4]
 80138cc:	681b      	ldr	r3, [r3, #0]
 80138ce:	2250      	movs	r2, #80	@ 0x50
 80138d0:	5a9b      	ldrh	r3, [r3, r2]
 80138d2:	b29b      	uxth	r3, r3
 80138d4:	001a      	movs	r2, r3
 80138d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80138d8:	189b      	adds	r3, r3, r2
 80138da:	637b      	str	r3, [r7, #52]	@ 0x34
 80138dc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80138de:	781b      	ldrb	r3, [r3, #0]
 80138e0:	00da      	lsls	r2, r3, #3
 80138e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80138e4:	18d3      	adds	r3, r2, r3
 80138e6:	4a0b      	ldr	r2, [pc, #44]	@ (8013914 <PCD_EP_ISR_Handler+0x6d8>)
 80138e8:	4694      	mov	ip, r2
 80138ea:	4463      	add	r3, ip
 80138ec:	633b      	str	r3, [r7, #48]	@ 0x30
 80138ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80138f0:	881b      	ldrh	r3, [r3, #0]
 80138f2:	b29b      	uxth	r3, r3
 80138f4:	059b      	lsls	r3, r3, #22
 80138f6:	0d9b      	lsrs	r3, r3, #22
 80138f8:	b29a      	uxth	r2, r3
 80138fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80138fc:	801a      	strh	r2, [r3, #0]
 80138fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013900:	881b      	ldrh	r3, [r3, #0]
 8013902:	b29b      	uxth	r3, r3
 8013904:	4a08      	ldr	r2, [pc, #32]	@ (8013928 <PCD_EP_ISR_Handler+0x6ec>)
 8013906:	4313      	orrs	r3, r2
 8013908:	b29a      	uxth	r2, r3
 801390a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801390c:	801a      	strh	r2, [r3, #0]
 801390e:	e026      	b.n	801395e <PCD_EP_ISR_Handler+0x722>
 8013910:	00000f8f 	.word	0x00000f8f
 8013914:	00000406 	.word	0x00000406
 8013918:	ffff8f8f 	.word	0xffff8f8f
 801391c:	ffff80c0 	.word	0xffff80c0
 8013920:	00000402 	.word	0x00000402
 8013924:	ffff8f0f 	.word	0xffff8f0f
 8013928:	ffff8000 	.word	0xffff8000
 801392c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801392e:	785b      	ldrb	r3, [r3, #1]
 8013930:	2b01      	cmp	r3, #1
 8013932:	d114      	bne.n	801395e <PCD_EP_ISR_Handler+0x722>
 8013934:	687b      	ldr	r3, [r7, #4]
 8013936:	681b      	ldr	r3, [r3, #0]
 8013938:	2250      	movs	r2, #80	@ 0x50
 801393a:	5a9b      	ldrh	r3, [r3, r2]
 801393c:	b29b      	uxth	r3, r3
 801393e:	001a      	movs	r2, r3
 8013940:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013942:	189b      	adds	r3, r3, r2
 8013944:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8013946:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013948:	781b      	ldrb	r3, [r3, #0]
 801394a:	00da      	lsls	r2, r3, #3
 801394c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801394e:	18d3      	adds	r3, r2, r3
 8013950:	4a3b      	ldr	r2, [pc, #236]	@ (8013a40 <PCD_EP_ISR_Handler+0x804>)
 8013952:	4694      	mov	ip, r2
 8013954:	4463      	add	r3, ip
 8013956:	63bb      	str	r3, [r7, #56]	@ 0x38
 8013958:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801395a:	2200      	movs	r2, #0
 801395c:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 801395e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013960:	781a      	ldrb	r2, [r3, #0]
 8013962:	687b      	ldr	r3, [r7, #4]
 8013964:	0011      	movs	r1, r2
 8013966:	0018      	movs	r0, r3
 8013968:	f008 ff6e 	bl	801c848 <HAL_PCD_DataInStageCallback>
 801396c:	e058      	b.n	8013a20 <PCD_EP_ISR_Handler+0x7e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 801396e:	234a      	movs	r3, #74	@ 0x4a
 8013970:	18fb      	adds	r3, r7, r3
 8013972:	881a      	ldrh	r2, [r3, #0]
 8013974:	2380      	movs	r3, #128	@ 0x80
 8013976:	005b      	lsls	r3, r3, #1
 8013978:	4013      	ands	r3, r2
 801397a:	d149      	bne.n	8013a10 <PCD_EP_ISR_Handler+0x7d4>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 801397c:	687b      	ldr	r3, [r7, #4]
 801397e:	681b      	ldr	r3, [r3, #0]
 8013980:	2250      	movs	r2, #80	@ 0x50
 8013982:	5a9b      	ldrh	r3, [r3, r2]
 8013984:	b29b      	uxth	r3, r3
 8013986:	001a      	movs	r2, r3
 8013988:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801398a:	781b      	ldrb	r3, [r3, #0]
 801398c:	00db      	lsls	r3, r3, #3
 801398e:	18d2      	adds	r2, r2, r3
 8013990:	687b      	ldr	r3, [r7, #4]
 8013992:	681b      	ldr	r3, [r3, #0]
 8013994:	18d3      	adds	r3, r2, r3
 8013996:	4a2b      	ldr	r2, [pc, #172]	@ (8013a44 <PCD_EP_ISR_Handler+0x808>)
 8013998:	4694      	mov	ip, r2
 801399a:	4463      	add	r3, ip
 801399c:	881a      	ldrh	r2, [r3, #0]
 801399e:	2140      	movs	r1, #64	@ 0x40
 80139a0:	187b      	adds	r3, r7, r1
 80139a2:	0592      	lsls	r2, r2, #22
 80139a4:	0d92      	lsrs	r2, r2, #22
 80139a6:	801a      	strh	r2, [r3, #0]

            if (ep->xfer_len > TxPctSize)
 80139a8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80139aa:	699a      	ldr	r2, [r3, #24]
 80139ac:	187b      	adds	r3, r7, r1
 80139ae:	881b      	ldrh	r3, [r3, #0]
 80139b0:	429a      	cmp	r2, r3
 80139b2:	d907      	bls.n	80139c4 <PCD_EP_ISR_Handler+0x788>
            {
              ep->xfer_len -= TxPctSize;
 80139b4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80139b6:	699a      	ldr	r2, [r3, #24]
 80139b8:	187b      	adds	r3, r7, r1
 80139ba:	881b      	ldrh	r3, [r3, #0]
 80139bc:	1ad2      	subs	r2, r2, r3
 80139be:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80139c0:	619a      	str	r2, [r3, #24]
 80139c2:	e002      	b.n	80139ca <PCD_EP_ISR_Handler+0x78e>
            }
            else
            {
              ep->xfer_len = 0U;
 80139c4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80139c6:	2200      	movs	r2, #0
 80139c8:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 80139ca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80139cc:	699b      	ldr	r3, [r3, #24]
 80139ce:	2b00      	cmp	r3, #0
 80139d0:	d107      	bne.n	80139e2 <PCD_EP_ISR_Handler+0x7a6>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80139d2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80139d4:	781a      	ldrb	r2, [r3, #0]
 80139d6:	687b      	ldr	r3, [r7, #4]
 80139d8:	0011      	movs	r1, r2
 80139da:	0018      	movs	r0, r3
 80139dc:	f008 ff34 	bl	801c848 <HAL_PCD_DataInStageCallback>
 80139e0:	e01e      	b.n	8013a20 <PCD_EP_ISR_Handler+0x7e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 80139e2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80139e4:	695a      	ldr	r2, [r3, #20]
 80139e6:	2140      	movs	r1, #64	@ 0x40
 80139e8:	187b      	adds	r3, r7, r1
 80139ea:	881b      	ldrh	r3, [r3, #0]
 80139ec:	18d2      	adds	r2, r2, r3
 80139ee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80139f0:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 80139f2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80139f4:	69da      	ldr	r2, [r3, #28]
 80139f6:	187b      	adds	r3, r7, r1
 80139f8:	881b      	ldrh	r3, [r3, #0]
 80139fa:	18d2      	adds	r2, r2, r3
 80139fc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80139fe:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8013a00:	687b      	ldr	r3, [r7, #4]
 8013a02:	681b      	ldr	r3, [r3, #0]
 8013a04:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8013a06:	0011      	movs	r1, r2
 8013a08:	0018      	movs	r0, r3
 8013a0a:	f005 fc27 	bl	801925c <USB_EPStartXfer>
 8013a0e:	e007      	b.n	8013a20 <PCD_EP_ISR_Handler+0x7e4>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8013a10:	234a      	movs	r3, #74	@ 0x4a
 8013a12:	18fb      	adds	r3, r7, r3
 8013a14:	881a      	ldrh	r2, [r3, #0]
 8013a16:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8013a18:	687b      	ldr	r3, [r7, #4]
 8013a1a:	0018      	movs	r0, r3
 8013a1c:	f000 f930 	bl	8013c80 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8013a20:	687b      	ldr	r3, [r7, #4]
 8013a22:	681b      	ldr	r3, [r3, #0]
 8013a24:	2244      	movs	r2, #68	@ 0x44
 8013a26:	5a9b      	ldrh	r3, [r3, r2]
 8013a28:	b29b      	uxth	r3, r3
 8013a2a:	b21b      	sxth	r3, r3
 8013a2c:	2b00      	cmp	r3, #0
 8013a2e:	da01      	bge.n	8013a34 <PCD_EP_ISR_Handler+0x7f8>
 8013a30:	f7ff fc0a 	bl	8013248 <PCD_EP_ISR_Handler+0xc>
        }
      }
    }
  }

  return HAL_OK;
 8013a34:	2300      	movs	r3, #0
}
 8013a36:	0018      	movs	r0, r3
 8013a38:	46bd      	mov	sp, r7
 8013a3a:	b016      	add	sp, #88	@ 0x58
 8013a3c:	bdb0      	pop	{r4, r5, r7, pc}
 8013a3e:	46c0      	nop			@ (mov r8, r8)
 8013a40:	00000406 	.word	0x00000406
 8013a44:	00000402 	.word	0x00000402

08013a48 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8013a48:	b590      	push	{r4, r7, lr}
 8013a4a:	b089      	sub	sp, #36	@ 0x24
 8013a4c:	af00      	add	r7, sp, #0
 8013a4e:	60f8      	str	r0, [r7, #12]
 8013a50:	60b9      	str	r1, [r7, #8]
 8013a52:	1dbb      	adds	r3, r7, #6
 8013a54:	801a      	strh	r2, [r3, #0]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8013a56:	1dbb      	adds	r3, r7, #6
 8013a58:	881a      	ldrh	r2, [r3, #0]
 8013a5a:	2380      	movs	r3, #128	@ 0x80
 8013a5c:	01db      	lsls	r3, r3, #7
 8013a5e:	4013      	ands	r3, r2
 8013a60:	d100      	bne.n	8013a64 <HAL_PCD_EP_DB_Receive+0x1c>
 8013a62:	e07d      	b.n	8013b60 <HAL_PCD_EP_DB_Receive+0x118>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8013a64:	68fb      	ldr	r3, [r7, #12]
 8013a66:	681b      	ldr	r3, [r3, #0]
 8013a68:	2250      	movs	r2, #80	@ 0x50
 8013a6a:	5a9b      	ldrh	r3, [r3, r2]
 8013a6c:	b29b      	uxth	r3, r3
 8013a6e:	001a      	movs	r2, r3
 8013a70:	68bb      	ldr	r3, [r7, #8]
 8013a72:	781b      	ldrb	r3, [r3, #0]
 8013a74:	00db      	lsls	r3, r3, #3
 8013a76:	18d2      	adds	r2, r2, r3
 8013a78:	68fb      	ldr	r3, [r7, #12]
 8013a7a:	681b      	ldr	r3, [r3, #0]
 8013a7c:	18d3      	adds	r3, r2, r3
 8013a7e:	4a7a      	ldr	r2, [pc, #488]	@ (8013c68 <HAL_PCD_EP_DB_Receive+0x220>)
 8013a80:	4694      	mov	ip, r2
 8013a82:	4463      	add	r3, ip
 8013a84:	881a      	ldrh	r2, [r3, #0]
 8013a86:	211a      	movs	r1, #26
 8013a88:	187b      	adds	r3, r7, r1
 8013a8a:	0592      	lsls	r2, r2, #22
 8013a8c:	0d92      	lsrs	r2, r2, #22
 8013a8e:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= count)
 8013a90:	68bb      	ldr	r3, [r7, #8]
 8013a92:	699a      	ldr	r2, [r3, #24]
 8013a94:	187b      	adds	r3, r7, r1
 8013a96:	881b      	ldrh	r3, [r3, #0]
 8013a98:	429a      	cmp	r2, r3
 8013a9a:	d307      	bcc.n	8013aac <HAL_PCD_EP_DB_Receive+0x64>
    {
      ep->xfer_len -= count;
 8013a9c:	68bb      	ldr	r3, [r7, #8]
 8013a9e:	699a      	ldr	r2, [r3, #24]
 8013aa0:	187b      	adds	r3, r7, r1
 8013aa2:	881b      	ldrh	r3, [r3, #0]
 8013aa4:	1ad2      	subs	r2, r2, r3
 8013aa6:	68bb      	ldr	r3, [r7, #8]
 8013aa8:	619a      	str	r2, [r3, #24]
 8013aaa:	e002      	b.n	8013ab2 <HAL_PCD_EP_DB_Receive+0x6a>
    }
    else
    {
      ep->xfer_len = 0U;
 8013aac:	68bb      	ldr	r3, [r7, #8]
 8013aae:	2200      	movs	r2, #0
 8013ab0:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8013ab2:	68bb      	ldr	r3, [r7, #8]
 8013ab4:	699b      	ldr	r3, [r3, #24]
 8013ab6:	2b00      	cmp	r3, #0
 8013ab8:	d121      	bne.n	8013afe <HAL_PCD_EP_DB_Receive+0xb6>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8013aba:	68fb      	ldr	r3, [r7, #12]
 8013abc:	681b      	ldr	r3, [r3, #0]
 8013abe:	001a      	movs	r2, r3
 8013ac0:	68bb      	ldr	r3, [r7, #8]
 8013ac2:	781b      	ldrb	r3, [r3, #0]
 8013ac4:	009b      	lsls	r3, r3, #2
 8013ac6:	18d3      	adds	r3, r2, r3
 8013ac8:	881b      	ldrh	r3, [r3, #0]
 8013aca:	b29a      	uxth	r2, r3
 8013acc:	2018      	movs	r0, #24
 8013ace:	183b      	adds	r3, r7, r0
 8013ad0:	4966      	ldr	r1, [pc, #408]	@ (8013c6c <HAL_PCD_EP_DB_Receive+0x224>)
 8013ad2:	400a      	ands	r2, r1
 8013ad4:	801a      	strh	r2, [r3, #0]
 8013ad6:	183b      	adds	r3, r7, r0
 8013ad8:	183a      	adds	r2, r7, r0
 8013ada:	8812      	ldrh	r2, [r2, #0]
 8013adc:	2180      	movs	r1, #128	@ 0x80
 8013ade:	0189      	lsls	r1, r1, #6
 8013ae0:	404a      	eors	r2, r1
 8013ae2:	801a      	strh	r2, [r3, #0]
 8013ae4:	68fb      	ldr	r3, [r7, #12]
 8013ae6:	681b      	ldr	r3, [r3, #0]
 8013ae8:	001a      	movs	r2, r3
 8013aea:	68bb      	ldr	r3, [r7, #8]
 8013aec:	781b      	ldrb	r3, [r3, #0]
 8013aee:	009b      	lsls	r3, r3, #2
 8013af0:	18d3      	adds	r3, r2, r3
 8013af2:	183a      	adds	r2, r7, r0
 8013af4:	8812      	ldrh	r2, [r2, #0]
 8013af6:	495e      	ldr	r1, [pc, #376]	@ (8013c70 <HAL_PCD_EP_DB_Receive+0x228>)
 8013af8:	430a      	orrs	r2, r1
 8013afa:	b292      	uxth	r2, r2
 8013afc:	801a      	strh	r2, [r3, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8013afe:	1dbb      	adds	r3, r7, #6
 8013b00:	881b      	ldrh	r3, [r3, #0]
 8013b02:	2240      	movs	r2, #64	@ 0x40
 8013b04:	4013      	ands	r3, r2
 8013b06:	d01a      	beq.n	8013b3e <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8013b08:	68fb      	ldr	r3, [r7, #12]
 8013b0a:	681b      	ldr	r3, [r3, #0]
 8013b0c:	001a      	movs	r2, r3
 8013b0e:	68bb      	ldr	r3, [r7, #8]
 8013b10:	781b      	ldrb	r3, [r3, #0]
 8013b12:	009b      	lsls	r3, r3, #2
 8013b14:	18d3      	adds	r3, r2, r3
 8013b16:	881b      	ldrh	r3, [r3, #0]
 8013b18:	b29a      	uxth	r2, r3
 8013b1a:	2016      	movs	r0, #22
 8013b1c:	183b      	adds	r3, r7, r0
 8013b1e:	4955      	ldr	r1, [pc, #340]	@ (8013c74 <HAL_PCD_EP_DB_Receive+0x22c>)
 8013b20:	400a      	ands	r2, r1
 8013b22:	801a      	strh	r2, [r3, #0]
 8013b24:	68fb      	ldr	r3, [r7, #12]
 8013b26:	681b      	ldr	r3, [r3, #0]
 8013b28:	001a      	movs	r2, r3
 8013b2a:	68bb      	ldr	r3, [r7, #8]
 8013b2c:	781b      	ldrb	r3, [r3, #0]
 8013b2e:	009b      	lsls	r3, r3, #2
 8013b30:	18d3      	adds	r3, r2, r3
 8013b32:	183a      	adds	r2, r7, r0
 8013b34:	8812      	ldrh	r2, [r2, #0]
 8013b36:	4950      	ldr	r1, [pc, #320]	@ (8013c78 <HAL_PCD_EP_DB_Receive+0x230>)
 8013b38:	430a      	orrs	r2, r1
 8013b3a:	b292      	uxth	r2, r2
 8013b3c:	801a      	strh	r2, [r3, #0]
    }

    if (count != 0U)
 8013b3e:	241a      	movs	r4, #26
 8013b40:	193b      	adds	r3, r7, r4
 8013b42:	881b      	ldrh	r3, [r3, #0]
 8013b44:	2b00      	cmp	r3, #0
 8013b46:	d100      	bne.n	8013b4a <HAL_PCD_EP_DB_Receive+0x102>
 8013b48:	e086      	b.n	8013c58 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8013b4a:	68fb      	ldr	r3, [r7, #12]
 8013b4c:	6818      	ldr	r0, [r3, #0]
 8013b4e:	68bb      	ldr	r3, [r7, #8]
 8013b50:	6959      	ldr	r1, [r3, #20]
 8013b52:	68bb      	ldr	r3, [r7, #8]
 8013b54:	891a      	ldrh	r2, [r3, #8]
 8013b56:	193b      	adds	r3, r7, r4
 8013b58:	881b      	ldrh	r3, [r3, #0]
 8013b5a:	f006 fe3a 	bl	801a7d2 <USB_ReadPMA>
 8013b5e:	e07b      	b.n	8013c58 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8013b60:	68fb      	ldr	r3, [r7, #12]
 8013b62:	681b      	ldr	r3, [r3, #0]
 8013b64:	2250      	movs	r2, #80	@ 0x50
 8013b66:	5a9b      	ldrh	r3, [r3, r2]
 8013b68:	b29b      	uxth	r3, r3
 8013b6a:	001a      	movs	r2, r3
 8013b6c:	68bb      	ldr	r3, [r7, #8]
 8013b6e:	781b      	ldrb	r3, [r3, #0]
 8013b70:	00db      	lsls	r3, r3, #3
 8013b72:	18d2      	adds	r2, r2, r3
 8013b74:	68fb      	ldr	r3, [r7, #12]
 8013b76:	681b      	ldr	r3, [r3, #0]
 8013b78:	18d3      	adds	r3, r2, r3
 8013b7a:	4a40      	ldr	r2, [pc, #256]	@ (8013c7c <HAL_PCD_EP_DB_Receive+0x234>)
 8013b7c:	4694      	mov	ip, r2
 8013b7e:	4463      	add	r3, ip
 8013b80:	881a      	ldrh	r2, [r3, #0]
 8013b82:	211a      	movs	r1, #26
 8013b84:	187b      	adds	r3, r7, r1
 8013b86:	0592      	lsls	r2, r2, #22
 8013b88:	0d92      	lsrs	r2, r2, #22
 8013b8a:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= count)
 8013b8c:	68bb      	ldr	r3, [r7, #8]
 8013b8e:	699a      	ldr	r2, [r3, #24]
 8013b90:	187b      	adds	r3, r7, r1
 8013b92:	881b      	ldrh	r3, [r3, #0]
 8013b94:	429a      	cmp	r2, r3
 8013b96:	d307      	bcc.n	8013ba8 <HAL_PCD_EP_DB_Receive+0x160>
    {
      ep->xfer_len -= count;
 8013b98:	68bb      	ldr	r3, [r7, #8]
 8013b9a:	699a      	ldr	r2, [r3, #24]
 8013b9c:	187b      	adds	r3, r7, r1
 8013b9e:	881b      	ldrh	r3, [r3, #0]
 8013ba0:	1ad2      	subs	r2, r2, r3
 8013ba2:	68bb      	ldr	r3, [r7, #8]
 8013ba4:	619a      	str	r2, [r3, #24]
 8013ba6:	e002      	b.n	8013bae <HAL_PCD_EP_DB_Receive+0x166>
    }
    else
    {
      ep->xfer_len = 0U;
 8013ba8:	68bb      	ldr	r3, [r7, #8]
 8013baa:	2200      	movs	r2, #0
 8013bac:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8013bae:	68bb      	ldr	r3, [r7, #8]
 8013bb0:	699b      	ldr	r3, [r3, #24]
 8013bb2:	2b00      	cmp	r3, #0
 8013bb4:	d121      	bne.n	8013bfa <HAL_PCD_EP_DB_Receive+0x1b2>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8013bb6:	68fb      	ldr	r3, [r7, #12]
 8013bb8:	681b      	ldr	r3, [r3, #0]
 8013bba:	001a      	movs	r2, r3
 8013bbc:	68bb      	ldr	r3, [r7, #8]
 8013bbe:	781b      	ldrb	r3, [r3, #0]
 8013bc0:	009b      	lsls	r3, r3, #2
 8013bc2:	18d3      	adds	r3, r2, r3
 8013bc4:	881b      	ldrh	r3, [r3, #0]
 8013bc6:	b29a      	uxth	r2, r3
 8013bc8:	201e      	movs	r0, #30
 8013bca:	183b      	adds	r3, r7, r0
 8013bcc:	4927      	ldr	r1, [pc, #156]	@ (8013c6c <HAL_PCD_EP_DB_Receive+0x224>)
 8013bce:	400a      	ands	r2, r1
 8013bd0:	801a      	strh	r2, [r3, #0]
 8013bd2:	183b      	adds	r3, r7, r0
 8013bd4:	183a      	adds	r2, r7, r0
 8013bd6:	8812      	ldrh	r2, [r2, #0]
 8013bd8:	2180      	movs	r1, #128	@ 0x80
 8013bda:	0189      	lsls	r1, r1, #6
 8013bdc:	404a      	eors	r2, r1
 8013bde:	801a      	strh	r2, [r3, #0]
 8013be0:	68fb      	ldr	r3, [r7, #12]
 8013be2:	681b      	ldr	r3, [r3, #0]
 8013be4:	001a      	movs	r2, r3
 8013be6:	68bb      	ldr	r3, [r7, #8]
 8013be8:	781b      	ldrb	r3, [r3, #0]
 8013bea:	009b      	lsls	r3, r3, #2
 8013bec:	18d3      	adds	r3, r2, r3
 8013bee:	183a      	adds	r2, r7, r0
 8013bf0:	8812      	ldrh	r2, [r2, #0]
 8013bf2:	491f      	ldr	r1, [pc, #124]	@ (8013c70 <HAL_PCD_EP_DB_Receive+0x228>)
 8013bf4:	430a      	orrs	r2, r1
 8013bf6:	b292      	uxth	r2, r2
 8013bf8:	801a      	strh	r2, [r3, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8013bfa:	1dbb      	adds	r3, r7, #6
 8013bfc:	881b      	ldrh	r3, [r3, #0]
 8013bfe:	2240      	movs	r2, #64	@ 0x40
 8013c00:	4013      	ands	r3, r2
 8013c02:	d11a      	bne.n	8013c3a <HAL_PCD_EP_DB_Receive+0x1f2>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8013c04:	68fb      	ldr	r3, [r7, #12]
 8013c06:	681b      	ldr	r3, [r3, #0]
 8013c08:	001a      	movs	r2, r3
 8013c0a:	68bb      	ldr	r3, [r7, #8]
 8013c0c:	781b      	ldrb	r3, [r3, #0]
 8013c0e:	009b      	lsls	r3, r3, #2
 8013c10:	18d3      	adds	r3, r2, r3
 8013c12:	881b      	ldrh	r3, [r3, #0]
 8013c14:	b29a      	uxth	r2, r3
 8013c16:	201c      	movs	r0, #28
 8013c18:	183b      	adds	r3, r7, r0
 8013c1a:	4916      	ldr	r1, [pc, #88]	@ (8013c74 <HAL_PCD_EP_DB_Receive+0x22c>)
 8013c1c:	400a      	ands	r2, r1
 8013c1e:	801a      	strh	r2, [r3, #0]
 8013c20:	68fb      	ldr	r3, [r7, #12]
 8013c22:	681b      	ldr	r3, [r3, #0]
 8013c24:	001a      	movs	r2, r3
 8013c26:	68bb      	ldr	r3, [r7, #8]
 8013c28:	781b      	ldrb	r3, [r3, #0]
 8013c2a:	009b      	lsls	r3, r3, #2
 8013c2c:	18d3      	adds	r3, r2, r3
 8013c2e:	183a      	adds	r2, r7, r0
 8013c30:	8812      	ldrh	r2, [r2, #0]
 8013c32:	4911      	ldr	r1, [pc, #68]	@ (8013c78 <HAL_PCD_EP_DB_Receive+0x230>)
 8013c34:	430a      	orrs	r2, r1
 8013c36:	b292      	uxth	r2, r2
 8013c38:	801a      	strh	r2, [r3, #0]
    }

    if (count != 0U)
 8013c3a:	241a      	movs	r4, #26
 8013c3c:	193b      	adds	r3, r7, r4
 8013c3e:	881b      	ldrh	r3, [r3, #0]
 8013c40:	2b00      	cmp	r3, #0
 8013c42:	d009      	beq.n	8013c58 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8013c44:	68fb      	ldr	r3, [r7, #12]
 8013c46:	6818      	ldr	r0, [r3, #0]
 8013c48:	68bb      	ldr	r3, [r7, #8]
 8013c4a:	6959      	ldr	r1, [r3, #20]
 8013c4c:	68bb      	ldr	r3, [r7, #8]
 8013c4e:	895a      	ldrh	r2, [r3, #10]
 8013c50:	193b      	adds	r3, r7, r4
 8013c52:	881b      	ldrh	r3, [r3, #0]
 8013c54:	f006 fdbd 	bl	801a7d2 <USB_ReadPMA>
    }
  }

  return count;
 8013c58:	231a      	movs	r3, #26
 8013c5a:	18fb      	adds	r3, r7, r3
 8013c5c:	881b      	ldrh	r3, [r3, #0]
}
 8013c5e:	0018      	movs	r0, r3
 8013c60:	46bd      	mov	sp, r7
 8013c62:	b009      	add	sp, #36	@ 0x24
 8013c64:	bd90      	pop	{r4, r7, pc}
 8013c66:	46c0      	nop			@ (mov r8, r8)
 8013c68:	00000402 	.word	0x00000402
 8013c6c:	ffffbf8f 	.word	0xffffbf8f
 8013c70:	ffff8080 	.word	0xffff8080
 8013c74:	ffff8f8f 	.word	0xffff8f8f
 8013c78:	ffff80c0 	.word	0xffff80c0
 8013c7c:	00000406 	.word	0x00000406

08013c80 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8013c80:	b580      	push	{r7, lr}
 8013c82:	b0a4      	sub	sp, #144	@ 0x90
 8013c84:	af00      	add	r7, sp, #0
 8013c86:	60f8      	str	r0, [r7, #12]
 8013c88:	60b9      	str	r1, [r7, #8]
 8013c8a:	1dbb      	adds	r3, r7, #6
 8013c8c:	801a      	strh	r2, [r3, #0]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8013c8e:	1dbb      	adds	r3, r7, #6
 8013c90:	881b      	ldrh	r3, [r3, #0]
 8013c92:	2240      	movs	r2, #64	@ 0x40
 8013c94:	4013      	ands	r3, r2
 8013c96:	d100      	bne.n	8013c9a <HAL_PCD_EP_DB_Transmit+0x1a>
 8013c98:	e1e4      	b.n	8014064 <HAL_PCD_EP_DB_Transmit+0x3e4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8013c9a:	68fb      	ldr	r3, [r7, #12]
 8013c9c:	681b      	ldr	r3, [r3, #0]
 8013c9e:	2250      	movs	r2, #80	@ 0x50
 8013ca0:	5a9b      	ldrh	r3, [r3, r2]
 8013ca2:	b29b      	uxth	r3, r3
 8013ca4:	001a      	movs	r2, r3
 8013ca6:	68bb      	ldr	r3, [r7, #8]
 8013ca8:	781b      	ldrb	r3, [r3, #0]
 8013caa:	00db      	lsls	r3, r3, #3
 8013cac:	18d2      	adds	r2, r2, r3
 8013cae:	68fb      	ldr	r3, [r7, #12]
 8013cb0:	681b      	ldr	r3, [r3, #0]
 8013cb2:	18d3      	adds	r3, r2, r3
 8013cb4:	4ad0      	ldr	r2, [pc, #832]	@ (8013ff8 <HAL_PCD_EP_DB_Transmit+0x378>)
 8013cb6:	4694      	mov	ip, r2
 8013cb8:	4463      	add	r3, ip
 8013cba:	881a      	ldrh	r2, [r3, #0]
 8013cbc:	2186      	movs	r1, #134	@ 0x86
 8013cbe:	187b      	adds	r3, r7, r1
 8013cc0:	0592      	lsls	r2, r2, #22
 8013cc2:	0d92      	lsrs	r2, r2, #22
 8013cc4:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len > TxPctSize)
 8013cc6:	68bb      	ldr	r3, [r7, #8]
 8013cc8:	699a      	ldr	r2, [r3, #24]
 8013cca:	187b      	adds	r3, r7, r1
 8013ccc:	881b      	ldrh	r3, [r3, #0]
 8013cce:	429a      	cmp	r2, r3
 8013cd0:	d907      	bls.n	8013ce2 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 8013cd2:	68bb      	ldr	r3, [r7, #8]
 8013cd4:	699a      	ldr	r2, [r3, #24]
 8013cd6:	187b      	adds	r3, r7, r1
 8013cd8:	881b      	ldrh	r3, [r3, #0]
 8013cda:	1ad2      	subs	r2, r2, r3
 8013cdc:	68bb      	ldr	r3, [r7, #8]
 8013cde:	619a      	str	r2, [r3, #24]
 8013ce0:	e002      	b.n	8013ce8 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8013ce2:	68bb      	ldr	r3, [r7, #8]
 8013ce4:	2200      	movs	r2, #0
 8013ce6:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8013ce8:	68bb      	ldr	r3, [r7, #8]
 8013cea:	699b      	ldr	r3, [r3, #24]
 8013cec:	2b00      	cmp	r3, #0
 8013cee:	d000      	beq.n	8013cf2 <HAL_PCD_EP_DB_Transmit+0x72>
 8013cf0:	e0b5      	b.n	8013e5e <HAL_PCD_EP_DB_Transmit+0x1de>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8013cf2:	68bb      	ldr	r3, [r7, #8]
 8013cf4:	785b      	ldrb	r3, [r3, #1]
 8013cf6:	2b00      	cmp	r3, #0
 8013cf8:	d125      	bne.n	8013d46 <HAL_PCD_EP_DB_Transmit+0xc6>
 8013cfa:	68fb      	ldr	r3, [r7, #12]
 8013cfc:	681b      	ldr	r3, [r3, #0]
 8013cfe:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8013d00:	68fb      	ldr	r3, [r7, #12]
 8013d02:	681b      	ldr	r3, [r3, #0]
 8013d04:	2250      	movs	r2, #80	@ 0x50
 8013d06:	5a9b      	ldrh	r3, [r3, r2]
 8013d08:	b29b      	uxth	r3, r3
 8013d0a:	001a      	movs	r2, r3
 8013d0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013d0e:	189b      	adds	r3, r3, r2
 8013d10:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8013d12:	68bb      	ldr	r3, [r7, #8]
 8013d14:	781b      	ldrb	r3, [r3, #0]
 8013d16:	00da      	lsls	r2, r3, #3
 8013d18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013d1a:	18d3      	adds	r3, r2, r3
 8013d1c:	4ab6      	ldr	r2, [pc, #728]	@ (8013ff8 <HAL_PCD_EP_DB_Transmit+0x378>)
 8013d1e:	4694      	mov	ip, r2
 8013d20:	4463      	add	r3, ip
 8013d22:	62bb      	str	r3, [r7, #40]	@ 0x28
 8013d24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013d26:	881b      	ldrh	r3, [r3, #0]
 8013d28:	b29b      	uxth	r3, r3
 8013d2a:	059b      	lsls	r3, r3, #22
 8013d2c:	0d9b      	lsrs	r3, r3, #22
 8013d2e:	b29a      	uxth	r2, r3
 8013d30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013d32:	801a      	strh	r2, [r3, #0]
 8013d34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013d36:	881b      	ldrh	r3, [r3, #0]
 8013d38:	b29b      	uxth	r3, r3
 8013d3a:	4ab0      	ldr	r2, [pc, #704]	@ (8013ffc <HAL_PCD_EP_DB_Transmit+0x37c>)
 8013d3c:	4313      	orrs	r3, r2
 8013d3e:	b29a      	uxth	r2, r3
 8013d40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013d42:	801a      	strh	r2, [r3, #0]
 8013d44:	e01b      	b.n	8013d7e <HAL_PCD_EP_DB_Transmit+0xfe>
 8013d46:	68bb      	ldr	r3, [r7, #8]
 8013d48:	785b      	ldrb	r3, [r3, #1]
 8013d4a:	2b01      	cmp	r3, #1
 8013d4c:	d117      	bne.n	8013d7e <HAL_PCD_EP_DB_Transmit+0xfe>
 8013d4e:	68fb      	ldr	r3, [r7, #12]
 8013d50:	681b      	ldr	r3, [r3, #0]
 8013d52:	637b      	str	r3, [r7, #52]	@ 0x34
 8013d54:	68fb      	ldr	r3, [r7, #12]
 8013d56:	681b      	ldr	r3, [r3, #0]
 8013d58:	2250      	movs	r2, #80	@ 0x50
 8013d5a:	5a9b      	ldrh	r3, [r3, r2]
 8013d5c:	b29b      	uxth	r3, r3
 8013d5e:	001a      	movs	r2, r3
 8013d60:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013d62:	189b      	adds	r3, r3, r2
 8013d64:	637b      	str	r3, [r7, #52]	@ 0x34
 8013d66:	68bb      	ldr	r3, [r7, #8]
 8013d68:	781b      	ldrb	r3, [r3, #0]
 8013d6a:	00da      	lsls	r2, r3, #3
 8013d6c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013d6e:	18d3      	adds	r3, r2, r3
 8013d70:	4aa1      	ldr	r2, [pc, #644]	@ (8013ff8 <HAL_PCD_EP_DB_Transmit+0x378>)
 8013d72:	4694      	mov	ip, r2
 8013d74:	4463      	add	r3, ip
 8013d76:	633b      	str	r3, [r7, #48]	@ 0x30
 8013d78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013d7a:	2200      	movs	r2, #0
 8013d7c:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8013d7e:	68fb      	ldr	r3, [r7, #12]
 8013d80:	681b      	ldr	r3, [r3, #0]
 8013d82:	627b      	str	r3, [r7, #36]	@ 0x24
 8013d84:	68bb      	ldr	r3, [r7, #8]
 8013d86:	785b      	ldrb	r3, [r3, #1]
 8013d88:	2b00      	cmp	r3, #0
 8013d8a:	d125      	bne.n	8013dd8 <HAL_PCD_EP_DB_Transmit+0x158>
 8013d8c:	68fb      	ldr	r3, [r7, #12]
 8013d8e:	681b      	ldr	r3, [r3, #0]
 8013d90:	61fb      	str	r3, [r7, #28]
 8013d92:	68fb      	ldr	r3, [r7, #12]
 8013d94:	681b      	ldr	r3, [r3, #0]
 8013d96:	2250      	movs	r2, #80	@ 0x50
 8013d98:	5a9b      	ldrh	r3, [r3, r2]
 8013d9a:	b29b      	uxth	r3, r3
 8013d9c:	001a      	movs	r2, r3
 8013d9e:	69fb      	ldr	r3, [r7, #28]
 8013da0:	189b      	adds	r3, r3, r2
 8013da2:	61fb      	str	r3, [r7, #28]
 8013da4:	68bb      	ldr	r3, [r7, #8]
 8013da6:	781b      	ldrb	r3, [r3, #0]
 8013da8:	00da      	lsls	r2, r3, #3
 8013daa:	69fb      	ldr	r3, [r7, #28]
 8013dac:	18d3      	adds	r3, r2, r3
 8013dae:	4a94      	ldr	r2, [pc, #592]	@ (8014000 <HAL_PCD_EP_DB_Transmit+0x380>)
 8013db0:	4694      	mov	ip, r2
 8013db2:	4463      	add	r3, ip
 8013db4:	61bb      	str	r3, [r7, #24]
 8013db6:	69bb      	ldr	r3, [r7, #24]
 8013db8:	881b      	ldrh	r3, [r3, #0]
 8013dba:	b29b      	uxth	r3, r3
 8013dbc:	059b      	lsls	r3, r3, #22
 8013dbe:	0d9b      	lsrs	r3, r3, #22
 8013dc0:	b29a      	uxth	r2, r3
 8013dc2:	69bb      	ldr	r3, [r7, #24]
 8013dc4:	801a      	strh	r2, [r3, #0]
 8013dc6:	69bb      	ldr	r3, [r7, #24]
 8013dc8:	881b      	ldrh	r3, [r3, #0]
 8013dca:	b29b      	uxth	r3, r3
 8013dcc:	4a8b      	ldr	r2, [pc, #556]	@ (8013ffc <HAL_PCD_EP_DB_Transmit+0x37c>)
 8013dce:	4313      	orrs	r3, r2
 8013dd0:	b29a      	uxth	r2, r3
 8013dd2:	69bb      	ldr	r3, [r7, #24]
 8013dd4:	801a      	strh	r2, [r3, #0]
 8013dd6:	e018      	b.n	8013e0a <HAL_PCD_EP_DB_Transmit+0x18a>
 8013dd8:	68bb      	ldr	r3, [r7, #8]
 8013dda:	785b      	ldrb	r3, [r3, #1]
 8013ddc:	2b01      	cmp	r3, #1
 8013dde:	d114      	bne.n	8013e0a <HAL_PCD_EP_DB_Transmit+0x18a>
 8013de0:	68fb      	ldr	r3, [r7, #12]
 8013de2:	681b      	ldr	r3, [r3, #0]
 8013de4:	2250      	movs	r2, #80	@ 0x50
 8013de6:	5a9b      	ldrh	r3, [r3, r2]
 8013de8:	b29b      	uxth	r3, r3
 8013dea:	001a      	movs	r2, r3
 8013dec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013dee:	189b      	adds	r3, r3, r2
 8013df0:	627b      	str	r3, [r7, #36]	@ 0x24
 8013df2:	68bb      	ldr	r3, [r7, #8]
 8013df4:	781b      	ldrb	r3, [r3, #0]
 8013df6:	00da      	lsls	r2, r3, #3
 8013df8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013dfa:	18d3      	adds	r3, r2, r3
 8013dfc:	4a80      	ldr	r2, [pc, #512]	@ (8014000 <HAL_PCD_EP_DB_Transmit+0x380>)
 8013dfe:	4694      	mov	ip, r2
 8013e00:	4463      	add	r3, ip
 8013e02:	623b      	str	r3, [r7, #32]
 8013e04:	6a3b      	ldr	r3, [r7, #32]
 8013e06:	2200      	movs	r2, #0
 8013e08:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8013e0a:	68bb      	ldr	r3, [r7, #8]
 8013e0c:	781a      	ldrb	r2, [r3, #0]
 8013e0e:	68fb      	ldr	r3, [r7, #12]
 8013e10:	0011      	movs	r1, r2
 8013e12:	0018      	movs	r0, r3
 8013e14:	f008 fd18 	bl	801c848 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8013e18:	1dbb      	adds	r3, r7, #6
 8013e1a:	881a      	ldrh	r2, [r3, #0]
 8013e1c:	2380      	movs	r3, #128	@ 0x80
 8013e1e:	01db      	lsls	r3, r3, #7
 8013e20:	4013      	ands	r3, r2
 8013e22:	d100      	bne.n	8013e26 <HAL_PCD_EP_DB_Transmit+0x1a6>
 8013e24:	e309      	b.n	801443a <HAL_PCD_EP_DB_Transmit+0x7ba>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8013e26:	68fb      	ldr	r3, [r7, #12]
 8013e28:	681b      	ldr	r3, [r3, #0]
 8013e2a:	001a      	movs	r2, r3
 8013e2c:	68bb      	ldr	r3, [r7, #8]
 8013e2e:	781b      	ldrb	r3, [r3, #0]
 8013e30:	009b      	lsls	r3, r3, #2
 8013e32:	18d3      	adds	r3, r2, r3
 8013e34:	881b      	ldrh	r3, [r3, #0]
 8013e36:	b29a      	uxth	r2, r3
 8013e38:	2016      	movs	r0, #22
 8013e3a:	183b      	adds	r3, r7, r0
 8013e3c:	4971      	ldr	r1, [pc, #452]	@ (8014004 <HAL_PCD_EP_DB_Transmit+0x384>)
 8013e3e:	400a      	ands	r2, r1
 8013e40:	801a      	strh	r2, [r3, #0]
 8013e42:	68fb      	ldr	r3, [r7, #12]
 8013e44:	681b      	ldr	r3, [r3, #0]
 8013e46:	001a      	movs	r2, r3
 8013e48:	68bb      	ldr	r3, [r7, #8]
 8013e4a:	781b      	ldrb	r3, [r3, #0]
 8013e4c:	009b      	lsls	r3, r3, #2
 8013e4e:	18d3      	adds	r3, r2, r3
 8013e50:	183a      	adds	r2, r7, r0
 8013e52:	8812      	ldrh	r2, [r2, #0]
 8013e54:	496c      	ldr	r1, [pc, #432]	@ (8014008 <HAL_PCD_EP_DB_Transmit+0x388>)
 8013e56:	430a      	orrs	r2, r1
 8013e58:	b292      	uxth	r2, r2
 8013e5a:	801a      	strh	r2, [r3, #0]
 8013e5c:	e2ed      	b.n	801443a <HAL_PCD_EP_DB_Transmit+0x7ba>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8013e5e:	1dbb      	adds	r3, r7, #6
 8013e60:	881a      	ldrh	r2, [r3, #0]
 8013e62:	2380      	movs	r3, #128	@ 0x80
 8013e64:	01db      	lsls	r3, r3, #7
 8013e66:	4013      	ands	r3, r2
 8013e68:	d01a      	beq.n	8013ea0 <HAL_PCD_EP_DB_Transmit+0x220>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8013e6a:	68fb      	ldr	r3, [r7, #12]
 8013e6c:	681b      	ldr	r3, [r3, #0]
 8013e6e:	001a      	movs	r2, r3
 8013e70:	68bb      	ldr	r3, [r7, #8]
 8013e72:	781b      	ldrb	r3, [r3, #0]
 8013e74:	009b      	lsls	r3, r3, #2
 8013e76:	18d3      	adds	r3, r2, r3
 8013e78:	881b      	ldrh	r3, [r3, #0]
 8013e7a:	b29a      	uxth	r2, r3
 8013e7c:	208a      	movs	r0, #138	@ 0x8a
 8013e7e:	183b      	adds	r3, r7, r0
 8013e80:	4960      	ldr	r1, [pc, #384]	@ (8014004 <HAL_PCD_EP_DB_Transmit+0x384>)
 8013e82:	400a      	ands	r2, r1
 8013e84:	801a      	strh	r2, [r3, #0]
 8013e86:	68fb      	ldr	r3, [r7, #12]
 8013e88:	681b      	ldr	r3, [r3, #0]
 8013e8a:	001a      	movs	r2, r3
 8013e8c:	68bb      	ldr	r3, [r7, #8]
 8013e8e:	781b      	ldrb	r3, [r3, #0]
 8013e90:	009b      	lsls	r3, r3, #2
 8013e92:	18d3      	adds	r3, r2, r3
 8013e94:	183a      	adds	r2, r7, r0
 8013e96:	8812      	ldrh	r2, [r2, #0]
 8013e98:	495b      	ldr	r1, [pc, #364]	@ (8014008 <HAL_PCD_EP_DB_Transmit+0x388>)
 8013e9a:	430a      	orrs	r2, r1
 8013e9c:	b292      	uxth	r2, r2
 8013e9e:	801a      	strh	r2, [r3, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8013ea0:	68bb      	ldr	r3, [r7, #8]
 8013ea2:	2224      	movs	r2, #36	@ 0x24
 8013ea4:	5c9b      	ldrb	r3, [r3, r2]
 8013ea6:	2b01      	cmp	r3, #1
 8013ea8:	d000      	beq.n	8013eac <HAL_PCD_EP_DB_Transmit+0x22c>
 8013eaa:	e2c6      	b.n	801443a <HAL_PCD_EP_DB_Transmit+0x7ba>
      {
        ep->xfer_buff += TxPctSize;
 8013eac:	68bb      	ldr	r3, [r7, #8]
 8013eae:	695a      	ldr	r2, [r3, #20]
 8013eb0:	2186      	movs	r1, #134	@ 0x86
 8013eb2:	187b      	adds	r3, r7, r1
 8013eb4:	881b      	ldrh	r3, [r3, #0]
 8013eb6:	18d2      	adds	r2, r2, r3
 8013eb8:	68bb      	ldr	r3, [r7, #8]
 8013eba:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8013ebc:	68bb      	ldr	r3, [r7, #8]
 8013ebe:	69da      	ldr	r2, [r3, #28]
 8013ec0:	187b      	adds	r3, r7, r1
 8013ec2:	881b      	ldrh	r3, [r3, #0]
 8013ec4:	18d2      	adds	r2, r2, r3
 8013ec6:	68bb      	ldr	r3, [r7, #8]
 8013ec8:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8013eca:	68bb      	ldr	r3, [r7, #8]
 8013ecc:	6a1a      	ldr	r2, [r3, #32]
 8013ece:	68bb      	ldr	r3, [r7, #8]
 8013ed0:	691b      	ldr	r3, [r3, #16]
 8013ed2:	429a      	cmp	r2, r3
 8013ed4:	d30c      	bcc.n	8013ef0 <HAL_PCD_EP_DB_Transmit+0x270>
        {
          len = ep->maxpacket;
 8013ed6:	68bb      	ldr	r3, [r7, #8]
 8013ed8:	691b      	ldr	r3, [r3, #16]
 8013eda:	218c      	movs	r1, #140	@ 0x8c
 8013edc:	187a      	adds	r2, r7, r1
 8013ede:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db -= len;
 8013ee0:	68bb      	ldr	r3, [r7, #8]
 8013ee2:	6a1a      	ldr	r2, [r3, #32]
 8013ee4:	187b      	adds	r3, r7, r1
 8013ee6:	681b      	ldr	r3, [r3, #0]
 8013ee8:	1ad2      	subs	r2, r2, r3
 8013eea:	68bb      	ldr	r3, [r7, #8]
 8013eec:	621a      	str	r2, [r3, #32]
 8013eee:	e01a      	b.n	8013f26 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 8013ef0:	68bb      	ldr	r3, [r7, #8]
 8013ef2:	6a1b      	ldr	r3, [r3, #32]
 8013ef4:	2b00      	cmp	r3, #0
 8013ef6:	d10a      	bne.n	8013f0e <HAL_PCD_EP_DB_Transmit+0x28e>
        {
          len = TxPctSize;
 8013ef8:	2386      	movs	r3, #134	@ 0x86
 8013efa:	18fb      	adds	r3, r7, r3
 8013efc:	881b      	ldrh	r3, [r3, #0]
 8013efe:	228c      	movs	r2, #140	@ 0x8c
 8013f00:	18ba      	adds	r2, r7, r2
 8013f02:	6013      	str	r3, [r2, #0]
          ep->xfer_fill_db = 0U;
 8013f04:	68bb      	ldr	r3, [r7, #8]
 8013f06:	2224      	movs	r2, #36	@ 0x24
 8013f08:	2100      	movs	r1, #0
 8013f0a:	5499      	strb	r1, [r3, r2]
 8013f0c:	e00b      	b.n	8013f26 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8013f0e:	68bb      	ldr	r3, [r7, #8]
 8013f10:	2224      	movs	r2, #36	@ 0x24
 8013f12:	2100      	movs	r1, #0
 8013f14:	5499      	strb	r1, [r3, r2]
          len = ep->xfer_len_db;
 8013f16:	68bb      	ldr	r3, [r7, #8]
 8013f18:	6a1b      	ldr	r3, [r3, #32]
 8013f1a:	228c      	movs	r2, #140	@ 0x8c
 8013f1c:	18ba      	adds	r2, r7, r2
 8013f1e:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db = 0U;
 8013f20:	68bb      	ldr	r3, [r7, #8]
 8013f22:	2200      	movs	r2, #0
 8013f24:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8013f26:	68bb      	ldr	r3, [r7, #8]
 8013f28:	785b      	ldrb	r3, [r3, #1]
 8013f2a:	2b00      	cmp	r3, #0
 8013f2c:	d000      	beq.n	8013f30 <HAL_PCD_EP_DB_Transmit+0x2b0>
 8013f2e:	e06d      	b.n	801400c <HAL_PCD_EP_DB_Transmit+0x38c>
 8013f30:	68fb      	ldr	r3, [r7, #12]
 8013f32:	681b      	ldr	r3, [r3, #0]
 8013f34:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8013f36:	68fb      	ldr	r3, [r7, #12]
 8013f38:	681b      	ldr	r3, [r3, #0]
 8013f3a:	2250      	movs	r2, #80	@ 0x50
 8013f3c:	5a9b      	ldrh	r3, [r3, r2]
 8013f3e:	b29b      	uxth	r3, r3
 8013f40:	001a      	movs	r2, r3
 8013f42:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013f44:	189b      	adds	r3, r3, r2
 8013f46:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8013f48:	68bb      	ldr	r3, [r7, #8]
 8013f4a:	781b      	ldrb	r3, [r3, #0]
 8013f4c:	00da      	lsls	r2, r3, #3
 8013f4e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013f50:	18d3      	adds	r3, r2, r3
 8013f52:	4a29      	ldr	r2, [pc, #164]	@ (8013ff8 <HAL_PCD_EP_DB_Transmit+0x378>)
 8013f54:	4694      	mov	ip, r2
 8013f56:	4463      	add	r3, ip
 8013f58:	63bb      	str	r3, [r7, #56]	@ 0x38
 8013f5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013f5c:	881b      	ldrh	r3, [r3, #0]
 8013f5e:	b29b      	uxth	r3, r3
 8013f60:	059b      	lsls	r3, r3, #22
 8013f62:	0d9b      	lsrs	r3, r3, #22
 8013f64:	b29a      	uxth	r2, r3
 8013f66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013f68:	801a      	strh	r2, [r3, #0]
 8013f6a:	228c      	movs	r2, #140	@ 0x8c
 8013f6c:	18bb      	adds	r3, r7, r2
 8013f6e:	681b      	ldr	r3, [r3, #0]
 8013f70:	2b3e      	cmp	r3, #62	@ 0x3e
 8013f72:	d91a      	bls.n	8013faa <HAL_PCD_EP_DB_Transmit+0x32a>
 8013f74:	18bb      	adds	r3, r7, r2
 8013f76:	681b      	ldr	r3, [r3, #0]
 8013f78:	095b      	lsrs	r3, r3, #5
 8013f7a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8013f7c:	18bb      	adds	r3, r7, r2
 8013f7e:	681b      	ldr	r3, [r3, #0]
 8013f80:	221f      	movs	r2, #31
 8013f82:	4013      	ands	r3, r2
 8013f84:	d102      	bne.n	8013f8c <HAL_PCD_EP_DB_Transmit+0x30c>
 8013f86:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8013f88:	3b01      	subs	r3, #1
 8013f8a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8013f8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013f8e:	881b      	ldrh	r3, [r3, #0]
 8013f90:	b29a      	uxth	r2, r3
 8013f92:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8013f94:	b29b      	uxth	r3, r3
 8013f96:	029b      	lsls	r3, r3, #10
 8013f98:	b29b      	uxth	r3, r3
 8013f9a:	4313      	orrs	r3, r2
 8013f9c:	b29b      	uxth	r3, r3
 8013f9e:	4a17      	ldr	r2, [pc, #92]	@ (8013ffc <HAL_PCD_EP_DB_Transmit+0x37c>)
 8013fa0:	4313      	orrs	r3, r2
 8013fa2:	b29a      	uxth	r2, r3
 8013fa4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013fa6:	801a      	strh	r2, [r3, #0]
 8013fa8:	e04f      	b.n	801404a <HAL_PCD_EP_DB_Transmit+0x3ca>
 8013faa:	238c      	movs	r3, #140	@ 0x8c
 8013fac:	18fb      	adds	r3, r7, r3
 8013fae:	681b      	ldr	r3, [r3, #0]
 8013fb0:	2b00      	cmp	r3, #0
 8013fb2:	d108      	bne.n	8013fc6 <HAL_PCD_EP_DB_Transmit+0x346>
 8013fb4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013fb6:	881b      	ldrh	r3, [r3, #0]
 8013fb8:	b29b      	uxth	r3, r3
 8013fba:	4a10      	ldr	r2, [pc, #64]	@ (8013ffc <HAL_PCD_EP_DB_Transmit+0x37c>)
 8013fbc:	4313      	orrs	r3, r2
 8013fbe:	b29a      	uxth	r2, r3
 8013fc0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013fc2:	801a      	strh	r2, [r3, #0]
 8013fc4:	e041      	b.n	801404a <HAL_PCD_EP_DB_Transmit+0x3ca>
 8013fc6:	228c      	movs	r2, #140	@ 0x8c
 8013fc8:	18bb      	adds	r3, r7, r2
 8013fca:	681b      	ldr	r3, [r3, #0]
 8013fcc:	085b      	lsrs	r3, r3, #1
 8013fce:	64bb      	str	r3, [r7, #72]	@ 0x48
 8013fd0:	18bb      	adds	r3, r7, r2
 8013fd2:	681b      	ldr	r3, [r3, #0]
 8013fd4:	2201      	movs	r2, #1
 8013fd6:	4013      	ands	r3, r2
 8013fd8:	d002      	beq.n	8013fe0 <HAL_PCD_EP_DB_Transmit+0x360>
 8013fda:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8013fdc:	3301      	adds	r3, #1
 8013fde:	64bb      	str	r3, [r7, #72]	@ 0x48
 8013fe0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013fe2:	881b      	ldrh	r3, [r3, #0]
 8013fe4:	b29a      	uxth	r2, r3
 8013fe6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8013fe8:	b29b      	uxth	r3, r3
 8013fea:	029b      	lsls	r3, r3, #10
 8013fec:	b29b      	uxth	r3, r3
 8013fee:	4313      	orrs	r3, r2
 8013ff0:	b29a      	uxth	r2, r3
 8013ff2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013ff4:	801a      	strh	r2, [r3, #0]
 8013ff6:	e028      	b.n	801404a <HAL_PCD_EP_DB_Transmit+0x3ca>
 8013ff8:	00000402 	.word	0x00000402
 8013ffc:	ffff8000 	.word	0xffff8000
 8014000:	00000406 	.word	0x00000406
 8014004:	ffff8f8f 	.word	0xffff8f8f
 8014008:	ffffc080 	.word	0xffffc080
 801400c:	68bb      	ldr	r3, [r7, #8]
 801400e:	785b      	ldrb	r3, [r3, #1]
 8014010:	2b01      	cmp	r3, #1
 8014012:	d11a      	bne.n	801404a <HAL_PCD_EP_DB_Transmit+0x3ca>
 8014014:	68fb      	ldr	r3, [r7, #12]
 8014016:	681b      	ldr	r3, [r3, #0]
 8014018:	647b      	str	r3, [r7, #68]	@ 0x44
 801401a:	68fb      	ldr	r3, [r7, #12]
 801401c:	681b      	ldr	r3, [r3, #0]
 801401e:	2250      	movs	r2, #80	@ 0x50
 8014020:	5a9b      	ldrh	r3, [r3, r2]
 8014022:	b29b      	uxth	r3, r3
 8014024:	001a      	movs	r2, r3
 8014026:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8014028:	189b      	adds	r3, r3, r2
 801402a:	647b      	str	r3, [r7, #68]	@ 0x44
 801402c:	68bb      	ldr	r3, [r7, #8]
 801402e:	781b      	ldrb	r3, [r3, #0]
 8014030:	00da      	lsls	r2, r3, #3
 8014032:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8014034:	18d3      	adds	r3, r2, r3
 8014036:	4adb      	ldr	r2, [pc, #876]	@ (80143a4 <HAL_PCD_EP_DB_Transmit+0x724>)
 8014038:	4694      	mov	ip, r2
 801403a:	4463      	add	r3, ip
 801403c:	643b      	str	r3, [r7, #64]	@ 0x40
 801403e:	238c      	movs	r3, #140	@ 0x8c
 8014040:	18fb      	adds	r3, r7, r3
 8014042:	681b      	ldr	r3, [r3, #0]
 8014044:	b29a      	uxth	r2, r3
 8014046:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8014048:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 801404a:	68fb      	ldr	r3, [r7, #12]
 801404c:	6818      	ldr	r0, [r3, #0]
 801404e:	68bb      	ldr	r3, [r7, #8]
 8014050:	6959      	ldr	r1, [r3, #20]
 8014052:	68bb      	ldr	r3, [r7, #8]
 8014054:	891a      	ldrh	r2, [r3, #8]
 8014056:	238c      	movs	r3, #140	@ 0x8c
 8014058:	18fb      	adds	r3, r7, r3
 801405a:	681b      	ldr	r3, [r3, #0]
 801405c:	b29b      	uxth	r3, r3
 801405e:	f006 fb6f 	bl	801a740 <USB_WritePMA>
 8014062:	e1ea      	b.n	801443a <HAL_PCD_EP_DB_Transmit+0x7ba>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8014064:	68fb      	ldr	r3, [r7, #12]
 8014066:	681b      	ldr	r3, [r3, #0]
 8014068:	2250      	movs	r2, #80	@ 0x50
 801406a:	5a9b      	ldrh	r3, [r3, r2]
 801406c:	b29b      	uxth	r3, r3
 801406e:	001a      	movs	r2, r3
 8014070:	68bb      	ldr	r3, [r7, #8]
 8014072:	781b      	ldrb	r3, [r3, #0]
 8014074:	00db      	lsls	r3, r3, #3
 8014076:	18d2      	adds	r2, r2, r3
 8014078:	68fb      	ldr	r3, [r7, #12]
 801407a:	681b      	ldr	r3, [r3, #0]
 801407c:	18d3      	adds	r3, r2, r3
 801407e:	4aca      	ldr	r2, [pc, #808]	@ (80143a8 <HAL_PCD_EP_DB_Transmit+0x728>)
 8014080:	4694      	mov	ip, r2
 8014082:	4463      	add	r3, ip
 8014084:	881a      	ldrh	r2, [r3, #0]
 8014086:	2186      	movs	r1, #134	@ 0x86
 8014088:	187b      	adds	r3, r7, r1
 801408a:	0592      	lsls	r2, r2, #22
 801408c:	0d92      	lsrs	r2, r2, #22
 801408e:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= TxPctSize)
 8014090:	68bb      	ldr	r3, [r7, #8]
 8014092:	699a      	ldr	r2, [r3, #24]
 8014094:	187b      	adds	r3, r7, r1
 8014096:	881b      	ldrh	r3, [r3, #0]
 8014098:	429a      	cmp	r2, r3
 801409a:	d307      	bcc.n	80140ac <HAL_PCD_EP_DB_Transmit+0x42c>
    {
      ep->xfer_len -= TxPctSize;
 801409c:	68bb      	ldr	r3, [r7, #8]
 801409e:	699a      	ldr	r2, [r3, #24]
 80140a0:	187b      	adds	r3, r7, r1
 80140a2:	881b      	ldrh	r3, [r3, #0]
 80140a4:	1ad2      	subs	r2, r2, r3
 80140a6:	68bb      	ldr	r3, [r7, #8]
 80140a8:	619a      	str	r2, [r3, #24]
 80140aa:	e002      	b.n	80140b2 <HAL_PCD_EP_DB_Transmit+0x432>
    }
    else
    {
      ep->xfer_len = 0U;
 80140ac:	68bb      	ldr	r3, [r7, #8]
 80140ae:	2200      	movs	r2, #0
 80140b0:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80140b2:	68bb      	ldr	r3, [r7, #8]
 80140b4:	699b      	ldr	r3, [r3, #24]
 80140b6:	2b00      	cmp	r3, #0
 80140b8:	d000      	beq.n	80140bc <HAL_PCD_EP_DB_Transmit+0x43c>
 80140ba:	e0bb      	b.n	8014234 <HAL_PCD_EP_DB_Transmit+0x5b4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80140bc:	68bb      	ldr	r3, [r7, #8]
 80140be:	785b      	ldrb	r3, [r3, #1]
 80140c0:	2b00      	cmp	r3, #0
 80140c2:	d125      	bne.n	8014110 <HAL_PCD_EP_DB_Transmit+0x490>
 80140c4:	68fb      	ldr	r3, [r7, #12]
 80140c6:	681b      	ldr	r3, [r3, #0]
 80140c8:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80140ca:	68fb      	ldr	r3, [r7, #12]
 80140cc:	681b      	ldr	r3, [r3, #0]
 80140ce:	2250      	movs	r2, #80	@ 0x50
 80140d0:	5a9b      	ldrh	r3, [r3, r2]
 80140d2:	b29b      	uxth	r3, r3
 80140d4:	001a      	movs	r2, r3
 80140d6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80140d8:	189b      	adds	r3, r3, r2
 80140da:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80140dc:	68bb      	ldr	r3, [r7, #8]
 80140de:	781b      	ldrb	r3, [r3, #0]
 80140e0:	00da      	lsls	r2, r3, #3
 80140e2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80140e4:	18d3      	adds	r3, r2, r3
 80140e6:	4aaf      	ldr	r2, [pc, #700]	@ (80143a4 <HAL_PCD_EP_DB_Transmit+0x724>)
 80140e8:	4694      	mov	ip, r2
 80140ea:	4463      	add	r3, ip
 80140ec:	67bb      	str	r3, [r7, #120]	@ 0x78
 80140ee:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80140f0:	881b      	ldrh	r3, [r3, #0]
 80140f2:	b29b      	uxth	r3, r3
 80140f4:	059b      	lsls	r3, r3, #22
 80140f6:	0d9b      	lsrs	r3, r3, #22
 80140f8:	b29a      	uxth	r2, r3
 80140fa:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80140fc:	801a      	strh	r2, [r3, #0]
 80140fe:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8014100:	881b      	ldrh	r3, [r3, #0]
 8014102:	b29b      	uxth	r3, r3
 8014104:	4aa9      	ldr	r2, [pc, #676]	@ (80143ac <HAL_PCD_EP_DB_Transmit+0x72c>)
 8014106:	4313      	orrs	r3, r2
 8014108:	b29a      	uxth	r2, r3
 801410a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801410c:	801a      	strh	r2, [r3, #0]
 801410e:	e01b      	b.n	8014148 <HAL_PCD_EP_DB_Transmit+0x4c8>
 8014110:	68bb      	ldr	r3, [r7, #8]
 8014112:	785b      	ldrb	r3, [r3, #1]
 8014114:	2b01      	cmp	r3, #1
 8014116:	d117      	bne.n	8014148 <HAL_PCD_EP_DB_Transmit+0x4c8>
 8014118:	68fb      	ldr	r3, [r7, #12]
 801411a:	681b      	ldr	r3, [r3, #0]
 801411c:	667b      	str	r3, [r7, #100]	@ 0x64
 801411e:	68fb      	ldr	r3, [r7, #12]
 8014120:	681b      	ldr	r3, [r3, #0]
 8014122:	2250      	movs	r2, #80	@ 0x50
 8014124:	5a9b      	ldrh	r3, [r3, r2]
 8014126:	b29b      	uxth	r3, r3
 8014128:	001a      	movs	r2, r3
 801412a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801412c:	189b      	adds	r3, r3, r2
 801412e:	667b      	str	r3, [r7, #100]	@ 0x64
 8014130:	68bb      	ldr	r3, [r7, #8]
 8014132:	781b      	ldrb	r3, [r3, #0]
 8014134:	00da      	lsls	r2, r3, #3
 8014136:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8014138:	18d3      	adds	r3, r2, r3
 801413a:	4a9a      	ldr	r2, [pc, #616]	@ (80143a4 <HAL_PCD_EP_DB_Transmit+0x724>)
 801413c:	4694      	mov	ip, r2
 801413e:	4463      	add	r3, ip
 8014140:	663b      	str	r3, [r7, #96]	@ 0x60
 8014142:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8014144:	2200      	movs	r2, #0
 8014146:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8014148:	68fb      	ldr	r3, [r7, #12]
 801414a:	681b      	ldr	r3, [r3, #0]
 801414c:	677b      	str	r3, [r7, #116]	@ 0x74
 801414e:	68bb      	ldr	r3, [r7, #8]
 8014150:	785b      	ldrb	r3, [r3, #1]
 8014152:	2b00      	cmp	r3, #0
 8014154:	d12b      	bne.n	80141ae <HAL_PCD_EP_DB_Transmit+0x52e>
 8014156:	68fb      	ldr	r3, [r7, #12]
 8014158:	681b      	ldr	r3, [r3, #0]
 801415a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 801415c:	68fb      	ldr	r3, [r7, #12]
 801415e:	681b      	ldr	r3, [r3, #0]
 8014160:	2250      	movs	r2, #80	@ 0x50
 8014162:	5a9b      	ldrh	r3, [r3, r2]
 8014164:	b29b      	uxth	r3, r3
 8014166:	001a      	movs	r2, r3
 8014168:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801416a:	189b      	adds	r3, r3, r2
 801416c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 801416e:	68bb      	ldr	r3, [r7, #8]
 8014170:	781b      	ldrb	r3, [r3, #0]
 8014172:	00da      	lsls	r2, r3, #3
 8014174:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8014176:	18d3      	adds	r3, r2, r3
 8014178:	4a8b      	ldr	r2, [pc, #556]	@ (80143a8 <HAL_PCD_EP_DB_Transmit+0x728>)
 801417a:	4694      	mov	ip, r2
 801417c:	4463      	add	r3, ip
 801417e:	2180      	movs	r1, #128	@ 0x80
 8014180:	187a      	adds	r2, r7, r1
 8014182:	6013      	str	r3, [r2, #0]
 8014184:	187b      	adds	r3, r7, r1
 8014186:	681b      	ldr	r3, [r3, #0]
 8014188:	881b      	ldrh	r3, [r3, #0]
 801418a:	b29b      	uxth	r3, r3
 801418c:	059b      	lsls	r3, r3, #22
 801418e:	0d9b      	lsrs	r3, r3, #22
 8014190:	b29a      	uxth	r2, r3
 8014192:	187b      	adds	r3, r7, r1
 8014194:	681b      	ldr	r3, [r3, #0]
 8014196:	801a      	strh	r2, [r3, #0]
 8014198:	187b      	adds	r3, r7, r1
 801419a:	681b      	ldr	r3, [r3, #0]
 801419c:	881b      	ldrh	r3, [r3, #0]
 801419e:	b29b      	uxth	r3, r3
 80141a0:	4a82      	ldr	r2, [pc, #520]	@ (80143ac <HAL_PCD_EP_DB_Transmit+0x72c>)
 80141a2:	4313      	orrs	r3, r2
 80141a4:	b29a      	uxth	r2, r3
 80141a6:	187b      	adds	r3, r7, r1
 80141a8:	681b      	ldr	r3, [r3, #0]
 80141aa:	801a      	strh	r2, [r3, #0]
 80141ac:	e018      	b.n	80141e0 <HAL_PCD_EP_DB_Transmit+0x560>
 80141ae:	68bb      	ldr	r3, [r7, #8]
 80141b0:	785b      	ldrb	r3, [r3, #1]
 80141b2:	2b01      	cmp	r3, #1
 80141b4:	d114      	bne.n	80141e0 <HAL_PCD_EP_DB_Transmit+0x560>
 80141b6:	68fb      	ldr	r3, [r7, #12]
 80141b8:	681b      	ldr	r3, [r3, #0]
 80141ba:	2250      	movs	r2, #80	@ 0x50
 80141bc:	5a9b      	ldrh	r3, [r3, r2]
 80141be:	b29b      	uxth	r3, r3
 80141c0:	001a      	movs	r2, r3
 80141c2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80141c4:	189b      	adds	r3, r3, r2
 80141c6:	677b      	str	r3, [r7, #116]	@ 0x74
 80141c8:	68bb      	ldr	r3, [r7, #8]
 80141ca:	781b      	ldrb	r3, [r3, #0]
 80141cc:	00da      	lsls	r2, r3, #3
 80141ce:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80141d0:	18d3      	adds	r3, r2, r3
 80141d2:	4a75      	ldr	r2, [pc, #468]	@ (80143a8 <HAL_PCD_EP_DB_Transmit+0x728>)
 80141d4:	4694      	mov	ip, r2
 80141d6:	4463      	add	r3, ip
 80141d8:	673b      	str	r3, [r7, #112]	@ 0x70
 80141da:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80141dc:	2200      	movs	r2, #0
 80141de:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80141e0:	68bb      	ldr	r3, [r7, #8]
 80141e2:	781a      	ldrb	r2, [r3, #0]
 80141e4:	68fb      	ldr	r3, [r7, #12]
 80141e6:	0011      	movs	r1, r2
 80141e8:	0018      	movs	r0, r3
 80141ea:	f008 fb2d 	bl	801c848 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80141ee:	1dbb      	adds	r3, r7, #6
 80141f0:	881a      	ldrh	r2, [r3, #0]
 80141f2:	2380      	movs	r3, #128	@ 0x80
 80141f4:	01db      	lsls	r3, r3, #7
 80141f6:	4013      	ands	r3, r2
 80141f8:	d000      	beq.n	80141fc <HAL_PCD_EP_DB_Transmit+0x57c>
 80141fa:	e11e      	b.n	801443a <HAL_PCD_EP_DB_Transmit+0x7ba>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80141fc:	68fb      	ldr	r3, [r7, #12]
 80141fe:	681b      	ldr	r3, [r3, #0]
 8014200:	001a      	movs	r2, r3
 8014202:	68bb      	ldr	r3, [r7, #8]
 8014204:	781b      	ldrb	r3, [r3, #0]
 8014206:	009b      	lsls	r3, r3, #2
 8014208:	18d3      	adds	r3, r2, r3
 801420a:	881b      	ldrh	r3, [r3, #0]
 801420c:	b29a      	uxth	r2, r3
 801420e:	2088      	movs	r0, #136	@ 0x88
 8014210:	183b      	adds	r3, r7, r0
 8014212:	4967      	ldr	r1, [pc, #412]	@ (80143b0 <HAL_PCD_EP_DB_Transmit+0x730>)
 8014214:	400a      	ands	r2, r1
 8014216:	801a      	strh	r2, [r3, #0]
 8014218:	68fb      	ldr	r3, [r7, #12]
 801421a:	681b      	ldr	r3, [r3, #0]
 801421c:	001a      	movs	r2, r3
 801421e:	68bb      	ldr	r3, [r7, #8]
 8014220:	781b      	ldrb	r3, [r3, #0]
 8014222:	009b      	lsls	r3, r3, #2
 8014224:	18d3      	adds	r3, r2, r3
 8014226:	183a      	adds	r2, r7, r0
 8014228:	8812      	ldrh	r2, [r2, #0]
 801422a:	4962      	ldr	r1, [pc, #392]	@ (80143b4 <HAL_PCD_EP_DB_Transmit+0x734>)
 801422c:	430a      	orrs	r2, r1
 801422e:	b292      	uxth	r2, r2
 8014230:	801a      	strh	r2, [r3, #0]
 8014232:	e102      	b.n	801443a <HAL_PCD_EP_DB_Transmit+0x7ba>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8014234:	1dbb      	adds	r3, r7, #6
 8014236:	881a      	ldrh	r2, [r3, #0]
 8014238:	2380      	movs	r3, #128	@ 0x80
 801423a:	01db      	lsls	r3, r3, #7
 801423c:	4013      	ands	r3, r2
 801423e:	d11a      	bne.n	8014276 <HAL_PCD_EP_DB_Transmit+0x5f6>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8014240:	68fb      	ldr	r3, [r7, #12]
 8014242:	681b      	ldr	r3, [r3, #0]
 8014244:	001a      	movs	r2, r3
 8014246:	68bb      	ldr	r3, [r7, #8]
 8014248:	781b      	ldrb	r3, [r3, #0]
 801424a:	009b      	lsls	r3, r3, #2
 801424c:	18d3      	adds	r3, r2, r3
 801424e:	881b      	ldrh	r3, [r3, #0]
 8014250:	b29a      	uxth	r2, r3
 8014252:	204e      	movs	r0, #78	@ 0x4e
 8014254:	183b      	adds	r3, r7, r0
 8014256:	4956      	ldr	r1, [pc, #344]	@ (80143b0 <HAL_PCD_EP_DB_Transmit+0x730>)
 8014258:	400a      	ands	r2, r1
 801425a:	801a      	strh	r2, [r3, #0]
 801425c:	68fb      	ldr	r3, [r7, #12]
 801425e:	681b      	ldr	r3, [r3, #0]
 8014260:	001a      	movs	r2, r3
 8014262:	68bb      	ldr	r3, [r7, #8]
 8014264:	781b      	ldrb	r3, [r3, #0]
 8014266:	009b      	lsls	r3, r3, #2
 8014268:	18d3      	adds	r3, r2, r3
 801426a:	183a      	adds	r2, r7, r0
 801426c:	8812      	ldrh	r2, [r2, #0]
 801426e:	4951      	ldr	r1, [pc, #324]	@ (80143b4 <HAL_PCD_EP_DB_Transmit+0x734>)
 8014270:	430a      	orrs	r2, r1
 8014272:	b292      	uxth	r2, r2
 8014274:	801a      	strh	r2, [r3, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8014276:	68bb      	ldr	r3, [r7, #8]
 8014278:	2224      	movs	r2, #36	@ 0x24
 801427a:	5c9b      	ldrb	r3, [r3, r2]
 801427c:	2b01      	cmp	r3, #1
 801427e:	d000      	beq.n	8014282 <HAL_PCD_EP_DB_Transmit+0x602>
 8014280:	e0db      	b.n	801443a <HAL_PCD_EP_DB_Transmit+0x7ba>
      {
        ep->xfer_buff += TxPctSize;
 8014282:	68bb      	ldr	r3, [r7, #8]
 8014284:	695a      	ldr	r2, [r3, #20]
 8014286:	2186      	movs	r1, #134	@ 0x86
 8014288:	187b      	adds	r3, r7, r1
 801428a:	881b      	ldrh	r3, [r3, #0]
 801428c:	18d2      	adds	r2, r2, r3
 801428e:	68bb      	ldr	r3, [r7, #8]
 8014290:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8014292:	68bb      	ldr	r3, [r7, #8]
 8014294:	69da      	ldr	r2, [r3, #28]
 8014296:	187b      	adds	r3, r7, r1
 8014298:	881b      	ldrh	r3, [r3, #0]
 801429a:	18d2      	adds	r2, r2, r3
 801429c:	68bb      	ldr	r3, [r7, #8]
 801429e:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80142a0:	68bb      	ldr	r3, [r7, #8]
 80142a2:	6a1a      	ldr	r2, [r3, #32]
 80142a4:	68bb      	ldr	r3, [r7, #8]
 80142a6:	691b      	ldr	r3, [r3, #16]
 80142a8:	429a      	cmp	r2, r3
 80142aa:	d30c      	bcc.n	80142c6 <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 80142ac:	68bb      	ldr	r3, [r7, #8]
 80142ae:	691b      	ldr	r3, [r3, #16]
 80142b0:	218c      	movs	r1, #140	@ 0x8c
 80142b2:	187a      	adds	r2, r7, r1
 80142b4:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db -= len;
 80142b6:	68bb      	ldr	r3, [r7, #8]
 80142b8:	6a1a      	ldr	r2, [r3, #32]
 80142ba:	187b      	adds	r3, r7, r1
 80142bc:	681b      	ldr	r3, [r3, #0]
 80142be:	1ad2      	subs	r2, r2, r3
 80142c0:	68bb      	ldr	r3, [r7, #8]
 80142c2:	621a      	str	r2, [r3, #32]
 80142c4:	e01a      	b.n	80142fc <HAL_PCD_EP_DB_Transmit+0x67c>
        }
        else if (ep->xfer_len_db == 0U)
 80142c6:	68bb      	ldr	r3, [r7, #8]
 80142c8:	6a1b      	ldr	r3, [r3, #32]
 80142ca:	2b00      	cmp	r3, #0
 80142cc:	d10a      	bne.n	80142e4 <HAL_PCD_EP_DB_Transmit+0x664>
        {
          len = TxPctSize;
 80142ce:	2386      	movs	r3, #134	@ 0x86
 80142d0:	18fb      	adds	r3, r7, r3
 80142d2:	881b      	ldrh	r3, [r3, #0]
 80142d4:	228c      	movs	r2, #140	@ 0x8c
 80142d6:	18ba      	adds	r2, r7, r2
 80142d8:	6013      	str	r3, [r2, #0]
          ep->xfer_fill_db = 0U;
 80142da:	68bb      	ldr	r3, [r7, #8]
 80142dc:	2224      	movs	r2, #36	@ 0x24
 80142de:	2100      	movs	r1, #0
 80142e0:	5499      	strb	r1, [r3, r2]
 80142e2:	e00b      	b.n	80142fc <HAL_PCD_EP_DB_Transmit+0x67c>
        }
        else
        {
          len = ep->xfer_len_db;
 80142e4:	68bb      	ldr	r3, [r7, #8]
 80142e6:	6a1b      	ldr	r3, [r3, #32]
 80142e8:	228c      	movs	r2, #140	@ 0x8c
 80142ea:	18ba      	adds	r2, r7, r2
 80142ec:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db = 0U;
 80142ee:	68bb      	ldr	r3, [r7, #8]
 80142f0:	2200      	movs	r2, #0
 80142f2:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 80142f4:	68bb      	ldr	r3, [r7, #8]
 80142f6:	2224      	movs	r2, #36	@ 0x24
 80142f8:	2100      	movs	r1, #0
 80142fa:	5499      	strb	r1, [r3, r2]
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80142fc:	68fb      	ldr	r3, [r7, #12]
 80142fe:	681b      	ldr	r3, [r3, #0]
 8014300:	657b      	str	r3, [r7, #84]	@ 0x54
 8014302:	68bb      	ldr	r3, [r7, #8]
 8014304:	785b      	ldrb	r3, [r3, #1]
 8014306:	2b00      	cmp	r3, #0
 8014308:	d000      	beq.n	801430c <HAL_PCD_EP_DB_Transmit+0x68c>
 801430a:	e06e      	b.n	80143ea <HAL_PCD_EP_DB_Transmit+0x76a>
 801430c:	68fb      	ldr	r3, [r7, #12]
 801430e:	681b      	ldr	r3, [r3, #0]
 8014310:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8014312:	68fb      	ldr	r3, [r7, #12]
 8014314:	681b      	ldr	r3, [r3, #0]
 8014316:	2250      	movs	r2, #80	@ 0x50
 8014318:	5a9b      	ldrh	r3, [r3, r2]
 801431a:	b29b      	uxth	r3, r3
 801431c:	001a      	movs	r2, r3
 801431e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8014320:	189b      	adds	r3, r3, r2
 8014322:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8014324:	68bb      	ldr	r3, [r7, #8]
 8014326:	781b      	ldrb	r3, [r3, #0]
 8014328:	00da      	lsls	r2, r3, #3
 801432a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801432c:	18d3      	adds	r3, r2, r3
 801432e:	4a1e      	ldr	r2, [pc, #120]	@ (80143a8 <HAL_PCD_EP_DB_Transmit+0x728>)
 8014330:	4694      	mov	ip, r2
 8014332:	4463      	add	r3, ip
 8014334:	65bb      	str	r3, [r7, #88]	@ 0x58
 8014336:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8014338:	881b      	ldrh	r3, [r3, #0]
 801433a:	b29b      	uxth	r3, r3
 801433c:	059b      	lsls	r3, r3, #22
 801433e:	0d9b      	lsrs	r3, r3, #22
 8014340:	b29a      	uxth	r2, r3
 8014342:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8014344:	801a      	strh	r2, [r3, #0]
 8014346:	228c      	movs	r2, #140	@ 0x8c
 8014348:	18bb      	adds	r3, r7, r2
 801434a:	681b      	ldr	r3, [r3, #0]
 801434c:	2b3e      	cmp	r3, #62	@ 0x3e
 801434e:	d91a      	bls.n	8014386 <HAL_PCD_EP_DB_Transmit+0x706>
 8014350:	18bb      	adds	r3, r7, r2
 8014352:	681b      	ldr	r3, [r3, #0]
 8014354:	095b      	lsrs	r3, r3, #5
 8014356:	66bb      	str	r3, [r7, #104]	@ 0x68
 8014358:	18bb      	adds	r3, r7, r2
 801435a:	681b      	ldr	r3, [r3, #0]
 801435c:	221f      	movs	r2, #31
 801435e:	4013      	ands	r3, r2
 8014360:	d102      	bne.n	8014368 <HAL_PCD_EP_DB_Transmit+0x6e8>
 8014362:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8014364:	3b01      	subs	r3, #1
 8014366:	66bb      	str	r3, [r7, #104]	@ 0x68
 8014368:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801436a:	881b      	ldrh	r3, [r3, #0]
 801436c:	b29a      	uxth	r2, r3
 801436e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8014370:	b29b      	uxth	r3, r3
 8014372:	029b      	lsls	r3, r3, #10
 8014374:	b29b      	uxth	r3, r3
 8014376:	4313      	orrs	r3, r2
 8014378:	b29b      	uxth	r3, r3
 801437a:	4a0c      	ldr	r2, [pc, #48]	@ (80143ac <HAL_PCD_EP_DB_Transmit+0x72c>)
 801437c:	4313      	orrs	r3, r2
 801437e:	b29a      	uxth	r2, r3
 8014380:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8014382:	801a      	strh	r2, [r3, #0]
 8014384:	e04d      	b.n	8014422 <HAL_PCD_EP_DB_Transmit+0x7a2>
 8014386:	238c      	movs	r3, #140	@ 0x8c
 8014388:	18fb      	adds	r3, r7, r3
 801438a:	681b      	ldr	r3, [r3, #0]
 801438c:	2b00      	cmp	r3, #0
 801438e:	d113      	bne.n	80143b8 <HAL_PCD_EP_DB_Transmit+0x738>
 8014390:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8014392:	881b      	ldrh	r3, [r3, #0]
 8014394:	b29b      	uxth	r3, r3
 8014396:	4a05      	ldr	r2, [pc, #20]	@ (80143ac <HAL_PCD_EP_DB_Transmit+0x72c>)
 8014398:	4313      	orrs	r3, r2
 801439a:	b29a      	uxth	r2, r3
 801439c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801439e:	801a      	strh	r2, [r3, #0]
 80143a0:	e03f      	b.n	8014422 <HAL_PCD_EP_DB_Transmit+0x7a2>
 80143a2:	46c0      	nop			@ (mov r8, r8)
 80143a4:	00000402 	.word	0x00000402
 80143a8:	00000406 	.word	0x00000406
 80143ac:	ffff8000 	.word	0xffff8000
 80143b0:	ffff8f8f 	.word	0xffff8f8f
 80143b4:	ffffc080 	.word	0xffffc080
 80143b8:	228c      	movs	r2, #140	@ 0x8c
 80143ba:	18bb      	adds	r3, r7, r2
 80143bc:	681b      	ldr	r3, [r3, #0]
 80143be:	085b      	lsrs	r3, r3, #1
 80143c0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80143c2:	18bb      	adds	r3, r7, r2
 80143c4:	681b      	ldr	r3, [r3, #0]
 80143c6:	2201      	movs	r2, #1
 80143c8:	4013      	ands	r3, r2
 80143ca:	d002      	beq.n	80143d2 <HAL_PCD_EP_DB_Transmit+0x752>
 80143cc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80143ce:	3301      	adds	r3, #1
 80143d0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80143d2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80143d4:	881b      	ldrh	r3, [r3, #0]
 80143d6:	b29a      	uxth	r2, r3
 80143d8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80143da:	b29b      	uxth	r3, r3
 80143dc:	029b      	lsls	r3, r3, #10
 80143de:	b29b      	uxth	r3, r3
 80143e0:	4313      	orrs	r3, r2
 80143e2:	b29a      	uxth	r2, r3
 80143e4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80143e6:	801a      	strh	r2, [r3, #0]
 80143e8:	e01b      	b.n	8014422 <HAL_PCD_EP_DB_Transmit+0x7a2>
 80143ea:	68bb      	ldr	r3, [r7, #8]
 80143ec:	785b      	ldrb	r3, [r3, #1]
 80143ee:	2b01      	cmp	r3, #1
 80143f0:	d117      	bne.n	8014422 <HAL_PCD_EP_DB_Transmit+0x7a2>
 80143f2:	68fb      	ldr	r3, [r7, #12]
 80143f4:	681b      	ldr	r3, [r3, #0]
 80143f6:	2250      	movs	r2, #80	@ 0x50
 80143f8:	5a9b      	ldrh	r3, [r3, r2]
 80143fa:	b29b      	uxth	r3, r3
 80143fc:	001a      	movs	r2, r3
 80143fe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014400:	189b      	adds	r3, r3, r2
 8014402:	657b      	str	r3, [r7, #84]	@ 0x54
 8014404:	68bb      	ldr	r3, [r7, #8]
 8014406:	781b      	ldrb	r3, [r3, #0]
 8014408:	00da      	lsls	r2, r3, #3
 801440a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801440c:	18d3      	adds	r3, r2, r3
 801440e:	4a21      	ldr	r2, [pc, #132]	@ (8014494 <HAL_PCD_EP_DB_Transmit+0x814>)
 8014410:	4694      	mov	ip, r2
 8014412:	4463      	add	r3, ip
 8014414:	653b      	str	r3, [r7, #80]	@ 0x50
 8014416:	238c      	movs	r3, #140	@ 0x8c
 8014418:	18fb      	adds	r3, r7, r3
 801441a:	681b      	ldr	r3, [r3, #0]
 801441c:	b29a      	uxth	r2, r3
 801441e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8014420:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8014422:	68fb      	ldr	r3, [r7, #12]
 8014424:	6818      	ldr	r0, [r3, #0]
 8014426:	68bb      	ldr	r3, [r7, #8]
 8014428:	6959      	ldr	r1, [r3, #20]
 801442a:	68bb      	ldr	r3, [r7, #8]
 801442c:	895a      	ldrh	r2, [r3, #10]
 801442e:	238c      	movs	r3, #140	@ 0x8c
 8014430:	18fb      	adds	r3, r7, r3
 8014432:	681b      	ldr	r3, [r3, #0]
 8014434:	b29b      	uxth	r3, r3
 8014436:	f006 f983 	bl	801a740 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 801443a:	68fb      	ldr	r3, [r7, #12]
 801443c:	681b      	ldr	r3, [r3, #0]
 801443e:	001a      	movs	r2, r3
 8014440:	68bb      	ldr	r3, [r7, #8]
 8014442:	781b      	ldrb	r3, [r3, #0]
 8014444:	009b      	lsls	r3, r3, #2
 8014446:	18d3      	adds	r3, r2, r3
 8014448:	881b      	ldrh	r3, [r3, #0]
 801444a:	b29a      	uxth	r2, r3
 801444c:	2014      	movs	r0, #20
 801444e:	183b      	adds	r3, r7, r0
 8014450:	4911      	ldr	r1, [pc, #68]	@ (8014498 <HAL_PCD_EP_DB_Transmit+0x818>)
 8014452:	400a      	ands	r2, r1
 8014454:	801a      	strh	r2, [r3, #0]
 8014456:	183b      	adds	r3, r7, r0
 8014458:	183a      	adds	r2, r7, r0
 801445a:	8812      	ldrh	r2, [r2, #0]
 801445c:	2110      	movs	r1, #16
 801445e:	404a      	eors	r2, r1
 8014460:	801a      	strh	r2, [r3, #0]
 8014462:	183b      	adds	r3, r7, r0
 8014464:	183a      	adds	r2, r7, r0
 8014466:	8812      	ldrh	r2, [r2, #0]
 8014468:	2120      	movs	r1, #32
 801446a:	404a      	eors	r2, r1
 801446c:	801a      	strh	r2, [r3, #0]
 801446e:	68fb      	ldr	r3, [r7, #12]
 8014470:	681b      	ldr	r3, [r3, #0]
 8014472:	001a      	movs	r2, r3
 8014474:	68bb      	ldr	r3, [r7, #8]
 8014476:	781b      	ldrb	r3, [r3, #0]
 8014478:	009b      	lsls	r3, r3, #2
 801447a:	18d3      	adds	r3, r2, r3
 801447c:	183a      	adds	r2, r7, r0
 801447e:	8812      	ldrh	r2, [r2, #0]
 8014480:	4906      	ldr	r1, [pc, #24]	@ (801449c <HAL_PCD_EP_DB_Transmit+0x81c>)
 8014482:	430a      	orrs	r2, r1
 8014484:	b292      	uxth	r2, r2
 8014486:	801a      	strh	r2, [r3, #0]

  return HAL_OK;
 8014488:	2300      	movs	r3, #0
}
 801448a:	0018      	movs	r0, r3
 801448c:	46bd      	mov	sp, r7
 801448e:	b024      	add	sp, #144	@ 0x90
 8014490:	bd80      	pop	{r7, pc}
 8014492:	46c0      	nop			@ (mov r8, r8)
 8014494:	00000406 	.word	0x00000406
 8014498:	ffff8fbf 	.word	0xffff8fbf
 801449c:	ffff8080 	.word	0xffff8080

080144a0 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 80144a0:	b590      	push	{r4, r7, lr}
 80144a2:	b087      	sub	sp, #28
 80144a4:	af00      	add	r7, sp, #0
 80144a6:	60f8      	str	r0, [r7, #12]
 80144a8:	0008      	movs	r0, r1
 80144aa:	0011      	movs	r1, r2
 80144ac:	607b      	str	r3, [r7, #4]
 80144ae:	240a      	movs	r4, #10
 80144b0:	193b      	adds	r3, r7, r4
 80144b2:	1c02      	adds	r2, r0, #0
 80144b4:	801a      	strh	r2, [r3, #0]
 80144b6:	2308      	movs	r3, #8
 80144b8:	18fb      	adds	r3, r7, r3
 80144ba:	1c0a      	adds	r2, r1, #0
 80144bc:	801a      	strh	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80144be:	0021      	movs	r1, r4
 80144c0:	187b      	adds	r3, r7, r1
 80144c2:	881b      	ldrh	r3, [r3, #0]
 80144c4:	2280      	movs	r2, #128	@ 0x80
 80144c6:	4013      	ands	r3, r2
 80144c8:	b29b      	uxth	r3, r3
 80144ca:	2b00      	cmp	r3, #0
 80144cc:	d00c      	beq.n	80144e8 <HAL_PCDEx_PMAConfig+0x48>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80144ce:	187b      	adds	r3, r7, r1
 80144d0:	881b      	ldrh	r3, [r3, #0]
 80144d2:	2207      	movs	r2, #7
 80144d4:	4013      	ands	r3, r2
 80144d6:	1c5a      	adds	r2, r3, #1
 80144d8:	0013      	movs	r3, r2
 80144da:	009b      	lsls	r3, r3, #2
 80144dc:	189b      	adds	r3, r3, r2
 80144de:	00db      	lsls	r3, r3, #3
 80144e0:	68fa      	ldr	r2, [r7, #12]
 80144e2:	18d3      	adds	r3, r2, r3
 80144e4:	617b      	str	r3, [r7, #20]
 80144e6:	e00b      	b.n	8014500 <HAL_PCDEx_PMAConfig+0x60>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80144e8:	230a      	movs	r3, #10
 80144ea:	18fb      	adds	r3, r7, r3
 80144ec:	881a      	ldrh	r2, [r3, #0]
 80144ee:	0013      	movs	r3, r2
 80144f0:	009b      	lsls	r3, r3, #2
 80144f2:	189b      	adds	r3, r3, r2
 80144f4:	00db      	lsls	r3, r3, #3
 80144f6:	3369      	adds	r3, #105	@ 0x69
 80144f8:	33ff      	adds	r3, #255	@ 0xff
 80144fa:	68fa      	ldr	r2, [r7, #12]
 80144fc:	18d3      	adds	r3, r2, r3
 80144fe:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8014500:	2308      	movs	r3, #8
 8014502:	18fb      	adds	r3, r7, r3
 8014504:	881b      	ldrh	r3, [r3, #0]
 8014506:	2b00      	cmp	r3, #0
 8014508:	d107      	bne.n	801451a <HAL_PCDEx_PMAConfig+0x7a>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 801450a:	697b      	ldr	r3, [r7, #20]
 801450c:	2200      	movs	r2, #0
 801450e:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8014510:	687b      	ldr	r3, [r7, #4]
 8014512:	b29a      	uxth	r2, r3
 8014514:	697b      	ldr	r3, [r7, #20]
 8014516:	80da      	strh	r2, [r3, #6]
 8014518:	e00b      	b.n	8014532 <HAL_PCDEx_PMAConfig+0x92>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 801451a:	697b      	ldr	r3, [r7, #20]
 801451c:	2201      	movs	r2, #1
 801451e:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8014520:	687b      	ldr	r3, [r7, #4]
 8014522:	b29a      	uxth	r2, r3
 8014524:	697b      	ldr	r3, [r7, #20]
 8014526:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8014528:	687b      	ldr	r3, [r7, #4]
 801452a:	0c1b      	lsrs	r3, r3, #16
 801452c:	b29a      	uxth	r2, r3
 801452e:	697b      	ldr	r3, [r7, #20]
 8014530:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8014532:	2300      	movs	r3, #0
}
 8014534:	0018      	movs	r0, r3
 8014536:	46bd      	mov	sp, r7
 8014538:	b007      	add	sp, #28
 801453a:	bd90      	pop	{r4, r7, pc}

0801453c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 801453c:	b580      	push	{r7, lr}
 801453e:	b084      	sub	sp, #16
 8014540:	af00      	add	r7, sp, #0
 8014542:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8014544:	687b      	ldr	r3, [r7, #4]
 8014546:	681b      	ldr	r3, [r3, #0]
 8014548:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 801454a:	687a      	ldr	r2, [r7, #4]
 801454c:	23ba      	movs	r3, #186	@ 0xba
 801454e:	009b      	lsls	r3, r3, #2
 8014550:	2101      	movs	r1, #1
 8014552:	50d1      	str	r1, [r2, r3]
  hpcd->LPM_State = LPM_L0;
 8014554:	687a      	ldr	r2, [r7, #4]
 8014556:	23b8      	movs	r3, #184	@ 0xb8
 8014558:	009b      	lsls	r3, r3, #2
 801455a:	2100      	movs	r1, #0
 801455c:	54d1      	strb	r1, [r2, r3]

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 801455e:	68fb      	ldr	r3, [r7, #12]
 8014560:	2254      	movs	r2, #84	@ 0x54
 8014562:	5a9b      	ldrh	r3, [r3, r2]
 8014564:	b29b      	uxth	r3, r3
 8014566:	2201      	movs	r2, #1
 8014568:	4313      	orrs	r3, r2
 801456a:	b299      	uxth	r1, r3
 801456c:	68fb      	ldr	r3, [r7, #12]
 801456e:	2254      	movs	r2, #84	@ 0x54
 8014570:	5299      	strh	r1, [r3, r2]
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8014572:	68fb      	ldr	r3, [r7, #12]
 8014574:	2254      	movs	r2, #84	@ 0x54
 8014576:	5a9b      	ldrh	r3, [r3, r2]
 8014578:	b29b      	uxth	r3, r3
 801457a:	2202      	movs	r2, #2
 801457c:	4313      	orrs	r3, r2
 801457e:	b299      	uxth	r1, r3
 8014580:	68fb      	ldr	r3, [r7, #12]
 8014582:	2254      	movs	r2, #84	@ 0x54
 8014584:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8014586:	2300      	movs	r3, #0
}
 8014588:	0018      	movs	r0, r3
 801458a:	46bd      	mov	sp, r7
 801458c:	b004      	add	sp, #16
 801458e:	bd80      	pop	{r7, pc}

08014590 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8014590:	b580      	push	{r7, lr}
 8014592:	b082      	sub	sp, #8
 8014594:	af00      	add	r7, sp, #0
 8014596:	6078      	str	r0, [r7, #4]
 8014598:	000a      	movs	r2, r1
 801459a:	1cfb      	adds	r3, r7, #3
 801459c:	701a      	strb	r2, [r3, #0]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 801459e:	46c0      	nop			@ (mov r8, r8)
 80145a0:	46bd      	mov	sp, r7
 80145a2:	b002      	add	sp, #8
 80145a4:	bd80      	pop	{r7, pc}
	...

080145a8 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 2, 4, 8 or 16 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80145a8:	b580      	push	{r7, lr}
 80145aa:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR, PWR_CR_DBP);
 80145ac:	4b04      	ldr	r3, [pc, #16]	@ (80145c0 <HAL_PWR_EnableBkUpAccess+0x18>)
 80145ae:	681a      	ldr	r2, [r3, #0]
 80145b0:	4b03      	ldr	r3, [pc, #12]	@ (80145c0 <HAL_PWR_EnableBkUpAccess+0x18>)
 80145b2:	2180      	movs	r1, #128	@ 0x80
 80145b4:	0049      	lsls	r1, r1, #1
 80145b6:	430a      	orrs	r2, r1
 80145b8:	601a      	str	r2, [r3, #0]
}
 80145ba:	46c0      	nop			@ (mov r8, r8)
 80145bc:	46bd      	mov	sp, r7
 80145be:	bd80      	pop	{r7, pc}
 80145c0:	40007000 	.word	0x40007000

080145c4 <HAL_PWR_DisableBkUpAccess>:
  * @note   If the HSE divided by 2, 4, 8 or 16 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_DisableBkUpAccess(void)
{
 80145c4:	b580      	push	{r7, lr}
 80145c6:	af00      	add	r7, sp, #0
  /* Disable access to RTC and backup registers */
  CLEAR_BIT(PWR->CR, PWR_CR_DBP);
 80145c8:	4b04      	ldr	r3, [pc, #16]	@ (80145dc <HAL_PWR_DisableBkUpAccess+0x18>)
 80145ca:	681a      	ldr	r2, [r3, #0]
 80145cc:	4b03      	ldr	r3, [pc, #12]	@ (80145dc <HAL_PWR_DisableBkUpAccess+0x18>)
 80145ce:	4904      	ldr	r1, [pc, #16]	@ (80145e0 <HAL_PWR_DisableBkUpAccess+0x1c>)
 80145d0:	400a      	ands	r2, r1
 80145d2:	601a      	str	r2, [r3, #0]
}
 80145d4:	46c0      	nop			@ (mov r8, r8)
 80145d6:	46bd      	mov	sp, r7
 80145d8:	bd80      	pop	{r7, pc}
 80145da:	46c0      	nop			@ (mov r8, r8)
 80145dc:	40007000 	.word	0x40007000
 80145e0:	fffffeff 	.word	0xfffffeff

080145e4 <HAL_PWR_EnterSTOPMode>:
  *            @arg PWR_STOPENTRY_WFI: Enter Stop mode with WFI instruction
  *            @arg PWR_STOPENTRY_WFE: Enter Stop mode with WFE instruction   
  * @retval None
  */
void HAL_PWR_EnterSTOPMode(uint32_t Regulator, uint8_t STOPEntry)
{
 80145e4:	b580      	push	{r7, lr}
 80145e6:	b086      	sub	sp, #24
 80145e8:	af00      	add	r7, sp, #0
 80145ea:	6078      	str	r0, [r7, #4]
 80145ec:	000a      	movs	r2, r1
 80145ee:	1cfb      	adds	r3, r7, #3
 80145f0:	701a      	strb	r2, [r3, #0]
  uint32_t tmpreg = 0U;
 80145f2:	2300      	movs	r3, #0
 80145f4:	617b      	str	r3, [r7, #20]
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  /* It is forbidden to configure both EN_VREFINT=1 and ULP=1 if the device is
     in Stop mode or in Sleep/Low-power sleep mode */
  ulpbit = READ_BIT(PWR->CR, PWR_CR_ULP);
 80145f6:	4b25      	ldr	r3, [pc, #148]	@ (801468c <HAL_PWR_EnterSTOPMode+0xa8>)
 80145f8:	681a      	ldr	r2, [r3, #0]
 80145fa:	2380      	movs	r3, #128	@ 0x80
 80145fc:	009b      	lsls	r3, r3, #2
 80145fe:	4013      	ands	r3, r2
 8014600:	613b      	str	r3, [r7, #16]
  vrefinbit = READ_BIT(SYSCFG->CFGR3, SYSCFG_CFGR3_EN_VREFINT);
 8014602:	4b23      	ldr	r3, [pc, #140]	@ (8014690 <HAL_PWR_EnterSTOPMode+0xac>)
 8014604:	6a1b      	ldr	r3, [r3, #32]
 8014606:	2201      	movs	r2, #1
 8014608:	4013      	ands	r3, r2
 801460a:	60fb      	str	r3, [r7, #12]
  if((ulpbit != 0) && (vrefinbit != 0))
 801460c:	693b      	ldr	r3, [r7, #16]
 801460e:	2b00      	cmp	r3, #0
 8014610:	d008      	beq.n	8014624 <HAL_PWR_EnterSTOPMode+0x40>
 8014612:	68fb      	ldr	r3, [r7, #12]
 8014614:	2b00      	cmp	r3, #0
 8014616:	d005      	beq.n	8014624 <HAL_PWR_EnterSTOPMode+0x40>
  {
    CLEAR_BIT(PWR->CR, PWR_CR_ULP);
 8014618:	4b1c      	ldr	r3, [pc, #112]	@ (801468c <HAL_PWR_EnterSTOPMode+0xa8>)
 801461a:	681a      	ldr	r2, [r3, #0]
 801461c:	4b1b      	ldr	r3, [pc, #108]	@ (801468c <HAL_PWR_EnterSTOPMode+0xa8>)
 801461e:	491d      	ldr	r1, [pc, #116]	@ (8014694 <HAL_PWR_EnterSTOPMode+0xb0>)
 8014620:	400a      	ands	r2, r1
 8014622:	601a      	str	r2, [r3, #0]
  }

  /* Select the regulator state in Stop mode ---------------------------------*/
  tmpreg = PWR->CR;
 8014624:	4b19      	ldr	r3, [pc, #100]	@ (801468c <HAL_PWR_EnterSTOPMode+0xa8>)
 8014626:	681b      	ldr	r3, [r3, #0]
 8014628:	617b      	str	r3, [r7, #20]
  
  /* Clear PDDS and LPDS bits */
  CLEAR_BIT(tmpreg, (PWR_CR_PDDS | PWR_CR_LPSDSR));
 801462a:	697b      	ldr	r3, [r7, #20]
 801462c:	2203      	movs	r2, #3
 801462e:	4393      	bics	r3, r2
 8014630:	617b      	str	r3, [r7, #20]

 /* Set LPSDSR bit according to PWR_Regulator value */
  SET_BIT(tmpreg, Regulator);
 8014632:	697a      	ldr	r2, [r7, #20]
 8014634:	687b      	ldr	r3, [r7, #4]
 8014636:	4313      	orrs	r3, r2
 8014638:	617b      	str	r3, [r7, #20]

  /* Store the new value */
  PWR->CR = tmpreg;
 801463a:	4b14      	ldr	r3, [pc, #80]	@ (801468c <HAL_PWR_EnterSTOPMode+0xa8>)
 801463c:	697a      	ldr	r2, [r7, #20]
 801463e:	601a      	str	r2, [r3, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8014640:	4b15      	ldr	r3, [pc, #84]	@ (8014698 <HAL_PWR_EnterSTOPMode+0xb4>)
 8014642:	691a      	ldr	r2, [r3, #16]
 8014644:	4b14      	ldr	r3, [pc, #80]	@ (8014698 <HAL_PWR_EnterSTOPMode+0xb4>)
 8014646:	2104      	movs	r1, #4
 8014648:	430a      	orrs	r2, r1
 801464a:	611a      	str	r2, [r3, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 801464c:	1cfb      	adds	r3, r7, #3
 801464e:	781b      	ldrb	r3, [r3, #0]
 8014650:	2b01      	cmp	r3, #1
 8014652:	d101      	bne.n	8014658 <HAL_PWR_EnterSTOPMode+0x74>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8014654:	bf30      	wfi
 8014656:	e002      	b.n	801465e <HAL_PWR_EnterSTOPMode+0x7a>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8014658:	bf40      	sev
    __WFE();
 801465a:	bf20      	wfe
    __WFE();
 801465c:	bf20      	wfe
  }
 
  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 801465e:	4b0e      	ldr	r3, [pc, #56]	@ (8014698 <HAL_PWR_EnterSTOPMode+0xb4>)
 8014660:	691a      	ldr	r2, [r3, #16]
 8014662:	4b0d      	ldr	r3, [pc, #52]	@ (8014698 <HAL_PWR_EnterSTOPMode+0xb4>)
 8014664:	2104      	movs	r1, #4
 8014666:	438a      	bics	r2, r1
 8014668:	611a      	str	r2, [r3, #16]

  if((ulpbit != 0) && (vrefinbit != 0))
 801466a:	693b      	ldr	r3, [r7, #16]
 801466c:	2b00      	cmp	r3, #0
 801466e:	d009      	beq.n	8014684 <HAL_PWR_EnterSTOPMode+0xa0>
 8014670:	68fb      	ldr	r3, [r7, #12]
 8014672:	2b00      	cmp	r3, #0
 8014674:	d006      	beq.n	8014684 <HAL_PWR_EnterSTOPMode+0xa0>
  {
    SET_BIT(PWR->CR, PWR_CR_ULP);
 8014676:	4b05      	ldr	r3, [pc, #20]	@ (801468c <HAL_PWR_EnterSTOPMode+0xa8>)
 8014678:	681a      	ldr	r2, [r3, #0]
 801467a:	4b04      	ldr	r3, [pc, #16]	@ (801468c <HAL_PWR_EnterSTOPMode+0xa8>)
 801467c:	2180      	movs	r1, #128	@ 0x80
 801467e:	0089      	lsls	r1, r1, #2
 8014680:	430a      	orrs	r2, r1
 8014682:	601a      	str	r2, [r3, #0]
  }
}
 8014684:	46c0      	nop			@ (mov r8, r8)
 8014686:	46bd      	mov	sp, r7
 8014688:	b006      	add	sp, #24
 801468a:	bd80      	pop	{r7, pc}
 801468c:	40007000 	.word	0x40007000
 8014690:	40010000 	.word	0x40010000
 8014694:	fffffdff 	.word	0xfffffdff
 8014698:	e000ed00 	.word	0xe000ed00

0801469c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 801469c:	b5b0      	push	{r4, r5, r7, lr}
 801469e:	b08a      	sub	sp, #40	@ 0x28
 80146a0:	af00      	add	r7, sp, #0
 80146a2:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80146a4:	687b      	ldr	r3, [r7, #4]
 80146a6:	2b00      	cmp	r3, #0
 80146a8:	d102      	bne.n	80146b0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80146aa:	2301      	movs	r3, #1
 80146ac:	f000 fbbf 	bl	8014e2e <HAL_RCC_OscConfig+0x792>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80146b0:	4bc9      	ldr	r3, [pc, #804]	@ (80149d8 <HAL_RCC_OscConfig+0x33c>)
 80146b2:	68db      	ldr	r3, [r3, #12]
 80146b4:	220c      	movs	r2, #12
 80146b6:	4013      	ands	r3, r2
 80146b8:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80146ba:	4bc7      	ldr	r3, [pc, #796]	@ (80149d8 <HAL_RCC_OscConfig+0x33c>)
 80146bc:	68da      	ldr	r2, [r3, #12]
 80146be:	2380      	movs	r3, #128	@ 0x80
 80146c0:	025b      	lsls	r3, r3, #9
 80146c2:	4013      	ands	r3, r2
 80146c4:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80146c6:	687b      	ldr	r3, [r7, #4]
 80146c8:	681b      	ldr	r3, [r3, #0]
 80146ca:	2201      	movs	r2, #1
 80146cc:	4013      	ands	r3, r2
 80146ce:	d100      	bne.n	80146d2 <HAL_RCC_OscConfig+0x36>
 80146d0:	e07e      	b.n	80147d0 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80146d2:	69fb      	ldr	r3, [r7, #28]
 80146d4:	2b08      	cmp	r3, #8
 80146d6:	d007      	beq.n	80146e8 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80146d8:	69fb      	ldr	r3, [r7, #28]
 80146da:	2b0c      	cmp	r3, #12
 80146dc:	d112      	bne.n	8014704 <HAL_RCC_OscConfig+0x68>
 80146de:	69ba      	ldr	r2, [r7, #24]
 80146e0:	2380      	movs	r3, #128	@ 0x80
 80146e2:	025b      	lsls	r3, r3, #9
 80146e4:	429a      	cmp	r2, r3
 80146e6:	d10d      	bne.n	8014704 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80146e8:	4bbb      	ldr	r3, [pc, #748]	@ (80149d8 <HAL_RCC_OscConfig+0x33c>)
 80146ea:	681a      	ldr	r2, [r3, #0]
 80146ec:	2380      	movs	r3, #128	@ 0x80
 80146ee:	029b      	lsls	r3, r3, #10
 80146f0:	4013      	ands	r3, r2
 80146f2:	d100      	bne.n	80146f6 <HAL_RCC_OscConfig+0x5a>
 80146f4:	e06b      	b.n	80147ce <HAL_RCC_OscConfig+0x132>
 80146f6:	687b      	ldr	r3, [r7, #4]
 80146f8:	685b      	ldr	r3, [r3, #4]
 80146fa:	2b00      	cmp	r3, #0
 80146fc:	d167      	bne.n	80147ce <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 80146fe:	2301      	movs	r3, #1
 8014700:	f000 fb95 	bl	8014e2e <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8014704:	687b      	ldr	r3, [r7, #4]
 8014706:	685a      	ldr	r2, [r3, #4]
 8014708:	2380      	movs	r3, #128	@ 0x80
 801470a:	025b      	lsls	r3, r3, #9
 801470c:	429a      	cmp	r2, r3
 801470e:	d107      	bne.n	8014720 <HAL_RCC_OscConfig+0x84>
 8014710:	4bb1      	ldr	r3, [pc, #708]	@ (80149d8 <HAL_RCC_OscConfig+0x33c>)
 8014712:	681a      	ldr	r2, [r3, #0]
 8014714:	4bb0      	ldr	r3, [pc, #704]	@ (80149d8 <HAL_RCC_OscConfig+0x33c>)
 8014716:	2180      	movs	r1, #128	@ 0x80
 8014718:	0249      	lsls	r1, r1, #9
 801471a:	430a      	orrs	r2, r1
 801471c:	601a      	str	r2, [r3, #0]
 801471e:	e027      	b.n	8014770 <HAL_RCC_OscConfig+0xd4>
 8014720:	687b      	ldr	r3, [r7, #4]
 8014722:	685a      	ldr	r2, [r3, #4]
 8014724:	23a0      	movs	r3, #160	@ 0xa0
 8014726:	02db      	lsls	r3, r3, #11
 8014728:	429a      	cmp	r2, r3
 801472a:	d10e      	bne.n	801474a <HAL_RCC_OscConfig+0xae>
 801472c:	4baa      	ldr	r3, [pc, #680]	@ (80149d8 <HAL_RCC_OscConfig+0x33c>)
 801472e:	681a      	ldr	r2, [r3, #0]
 8014730:	4ba9      	ldr	r3, [pc, #676]	@ (80149d8 <HAL_RCC_OscConfig+0x33c>)
 8014732:	2180      	movs	r1, #128	@ 0x80
 8014734:	02c9      	lsls	r1, r1, #11
 8014736:	430a      	orrs	r2, r1
 8014738:	601a      	str	r2, [r3, #0]
 801473a:	4ba7      	ldr	r3, [pc, #668]	@ (80149d8 <HAL_RCC_OscConfig+0x33c>)
 801473c:	681a      	ldr	r2, [r3, #0]
 801473e:	4ba6      	ldr	r3, [pc, #664]	@ (80149d8 <HAL_RCC_OscConfig+0x33c>)
 8014740:	2180      	movs	r1, #128	@ 0x80
 8014742:	0249      	lsls	r1, r1, #9
 8014744:	430a      	orrs	r2, r1
 8014746:	601a      	str	r2, [r3, #0]
 8014748:	e012      	b.n	8014770 <HAL_RCC_OscConfig+0xd4>
 801474a:	4ba3      	ldr	r3, [pc, #652]	@ (80149d8 <HAL_RCC_OscConfig+0x33c>)
 801474c:	681a      	ldr	r2, [r3, #0]
 801474e:	4ba2      	ldr	r3, [pc, #648]	@ (80149d8 <HAL_RCC_OscConfig+0x33c>)
 8014750:	49a2      	ldr	r1, [pc, #648]	@ (80149dc <HAL_RCC_OscConfig+0x340>)
 8014752:	400a      	ands	r2, r1
 8014754:	601a      	str	r2, [r3, #0]
 8014756:	4ba0      	ldr	r3, [pc, #640]	@ (80149d8 <HAL_RCC_OscConfig+0x33c>)
 8014758:	681a      	ldr	r2, [r3, #0]
 801475a:	2380      	movs	r3, #128	@ 0x80
 801475c:	025b      	lsls	r3, r3, #9
 801475e:	4013      	ands	r3, r2
 8014760:	60fb      	str	r3, [r7, #12]
 8014762:	68fb      	ldr	r3, [r7, #12]
 8014764:	4b9c      	ldr	r3, [pc, #624]	@ (80149d8 <HAL_RCC_OscConfig+0x33c>)
 8014766:	681a      	ldr	r2, [r3, #0]
 8014768:	4b9b      	ldr	r3, [pc, #620]	@ (80149d8 <HAL_RCC_OscConfig+0x33c>)
 801476a:	499d      	ldr	r1, [pc, #628]	@ (80149e0 <HAL_RCC_OscConfig+0x344>)
 801476c:	400a      	ands	r2, r1
 801476e:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8014770:	687b      	ldr	r3, [r7, #4]
 8014772:	685b      	ldr	r3, [r3, #4]
 8014774:	2b00      	cmp	r3, #0
 8014776:	d015      	beq.n	80147a4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8014778:	f7f9 fe76 	bl	800e468 <HAL_GetTick>
 801477c:	0003      	movs	r3, r0
 801477e:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8014780:	e009      	b.n	8014796 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8014782:	f7f9 fe71 	bl	800e468 <HAL_GetTick>
 8014786:	0002      	movs	r2, r0
 8014788:	697b      	ldr	r3, [r7, #20]
 801478a:	1ad3      	subs	r3, r2, r3
 801478c:	2b64      	cmp	r3, #100	@ 0x64
 801478e:	d902      	bls.n	8014796 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8014790:	2303      	movs	r3, #3
 8014792:	f000 fb4c 	bl	8014e2e <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8014796:	4b90      	ldr	r3, [pc, #576]	@ (80149d8 <HAL_RCC_OscConfig+0x33c>)
 8014798:	681a      	ldr	r2, [r3, #0]
 801479a:	2380      	movs	r3, #128	@ 0x80
 801479c:	029b      	lsls	r3, r3, #10
 801479e:	4013      	ands	r3, r2
 80147a0:	d0ef      	beq.n	8014782 <HAL_RCC_OscConfig+0xe6>
 80147a2:	e015      	b.n	80147d0 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80147a4:	f7f9 fe60 	bl	800e468 <HAL_GetTick>
 80147a8:	0003      	movs	r3, r0
 80147aa:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80147ac:	e008      	b.n	80147c0 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80147ae:	f7f9 fe5b 	bl	800e468 <HAL_GetTick>
 80147b2:	0002      	movs	r2, r0
 80147b4:	697b      	ldr	r3, [r7, #20]
 80147b6:	1ad3      	subs	r3, r2, r3
 80147b8:	2b64      	cmp	r3, #100	@ 0x64
 80147ba:	d901      	bls.n	80147c0 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 80147bc:	2303      	movs	r3, #3
 80147be:	e336      	b.n	8014e2e <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80147c0:	4b85      	ldr	r3, [pc, #532]	@ (80149d8 <HAL_RCC_OscConfig+0x33c>)
 80147c2:	681a      	ldr	r2, [r3, #0]
 80147c4:	2380      	movs	r3, #128	@ 0x80
 80147c6:	029b      	lsls	r3, r3, #10
 80147c8:	4013      	ands	r3, r2
 80147ca:	d1f0      	bne.n	80147ae <HAL_RCC_OscConfig+0x112>
 80147cc:	e000      	b.n	80147d0 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80147ce:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80147d0:	687b      	ldr	r3, [r7, #4]
 80147d2:	681b      	ldr	r3, [r3, #0]
 80147d4:	2202      	movs	r2, #2
 80147d6:	4013      	ands	r3, r2
 80147d8:	d100      	bne.n	80147dc <HAL_RCC_OscConfig+0x140>
 80147da:	e099      	b.n	8014910 <HAL_RCC_OscConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 80147dc:	687b      	ldr	r3, [r7, #4]
 80147de:	68db      	ldr	r3, [r3, #12]
 80147e0:	627b      	str	r3, [r7, #36]	@ 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 80147e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80147e4:	2220      	movs	r2, #32
 80147e6:	4013      	ands	r3, r2
 80147e8:	d009      	beq.n	80147fe <HAL_RCC_OscConfig+0x162>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 80147ea:	4b7b      	ldr	r3, [pc, #492]	@ (80149d8 <HAL_RCC_OscConfig+0x33c>)
 80147ec:	681a      	ldr	r2, [r3, #0]
 80147ee:	4b7a      	ldr	r3, [pc, #488]	@ (80149d8 <HAL_RCC_OscConfig+0x33c>)
 80147f0:	2120      	movs	r1, #32
 80147f2:	430a      	orrs	r2, r1
 80147f4:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 80147f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80147f8:	2220      	movs	r2, #32
 80147fa:	4393      	bics	r3, r2
 80147fc:	627b      	str	r3, [r7, #36]	@ 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80147fe:	69fb      	ldr	r3, [r7, #28]
 8014800:	2b04      	cmp	r3, #4
 8014802:	d005      	beq.n	8014810 <HAL_RCC_OscConfig+0x174>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8014804:	69fb      	ldr	r3, [r7, #28]
 8014806:	2b0c      	cmp	r3, #12
 8014808:	d13e      	bne.n	8014888 <HAL_RCC_OscConfig+0x1ec>
 801480a:	69bb      	ldr	r3, [r7, #24]
 801480c:	2b00      	cmp	r3, #0
 801480e:	d13b      	bne.n	8014888 <HAL_RCC_OscConfig+0x1ec>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8014810:	4b71      	ldr	r3, [pc, #452]	@ (80149d8 <HAL_RCC_OscConfig+0x33c>)
 8014812:	681b      	ldr	r3, [r3, #0]
 8014814:	2204      	movs	r2, #4
 8014816:	4013      	ands	r3, r2
 8014818:	d004      	beq.n	8014824 <HAL_RCC_OscConfig+0x188>
 801481a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801481c:	2b00      	cmp	r3, #0
 801481e:	d101      	bne.n	8014824 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8014820:	2301      	movs	r3, #1
 8014822:	e304      	b.n	8014e2e <HAL_RCC_OscConfig+0x792>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8014824:	4b6c      	ldr	r3, [pc, #432]	@ (80149d8 <HAL_RCC_OscConfig+0x33c>)
 8014826:	685b      	ldr	r3, [r3, #4]
 8014828:	4a6e      	ldr	r2, [pc, #440]	@ (80149e4 <HAL_RCC_OscConfig+0x348>)
 801482a:	4013      	ands	r3, r2
 801482c:	0019      	movs	r1, r3
 801482e:	687b      	ldr	r3, [r7, #4]
 8014830:	691b      	ldr	r3, [r3, #16]
 8014832:	021a      	lsls	r2, r3, #8
 8014834:	4b68      	ldr	r3, [pc, #416]	@ (80149d8 <HAL_RCC_OscConfig+0x33c>)
 8014836:	430a      	orrs	r2, r1
 8014838:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 801483a:	4b67      	ldr	r3, [pc, #412]	@ (80149d8 <HAL_RCC_OscConfig+0x33c>)
 801483c:	681b      	ldr	r3, [r3, #0]
 801483e:	2209      	movs	r2, #9
 8014840:	4393      	bics	r3, r2
 8014842:	0019      	movs	r1, r3
 8014844:	4b64      	ldr	r3, [pc, #400]	@ (80149d8 <HAL_RCC_OscConfig+0x33c>)
 8014846:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8014848:	430a      	orrs	r2, r1
 801484a:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 801484c:	f000 fc42 	bl	80150d4 <HAL_RCC_GetSysClockFreq>
 8014850:	0001      	movs	r1, r0
 8014852:	4b61      	ldr	r3, [pc, #388]	@ (80149d8 <HAL_RCC_OscConfig+0x33c>)
 8014854:	68db      	ldr	r3, [r3, #12]
 8014856:	091b      	lsrs	r3, r3, #4
 8014858:	220f      	movs	r2, #15
 801485a:	4013      	ands	r3, r2
 801485c:	4a62      	ldr	r2, [pc, #392]	@ (80149e8 <HAL_RCC_OscConfig+0x34c>)
 801485e:	5cd3      	ldrb	r3, [r2, r3]
 8014860:	000a      	movs	r2, r1
 8014862:	40da      	lsrs	r2, r3
 8014864:	4b61      	ldr	r3, [pc, #388]	@ (80149ec <HAL_RCC_OscConfig+0x350>)
 8014866:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8014868:	4b61      	ldr	r3, [pc, #388]	@ (80149f0 <HAL_RCC_OscConfig+0x354>)
 801486a:	681b      	ldr	r3, [r3, #0]
 801486c:	2513      	movs	r5, #19
 801486e:	197c      	adds	r4, r7, r5
 8014870:	0018      	movs	r0, r3
 8014872:	f7f9 fdb3 	bl	800e3dc <HAL_InitTick>
 8014876:	0003      	movs	r3, r0
 8014878:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 801487a:	197b      	adds	r3, r7, r5
 801487c:	781b      	ldrb	r3, [r3, #0]
 801487e:	2b00      	cmp	r3, #0
 8014880:	d046      	beq.n	8014910 <HAL_RCC_OscConfig+0x274>
      {
        return status;
 8014882:	197b      	adds	r3, r7, r5
 8014884:	781b      	ldrb	r3, [r3, #0]
 8014886:	e2d2      	b.n	8014e2e <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8014888:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801488a:	2b00      	cmp	r3, #0
 801488c:	d027      	beq.n	80148de <HAL_RCC_OscConfig+0x242>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 801488e:	4b52      	ldr	r3, [pc, #328]	@ (80149d8 <HAL_RCC_OscConfig+0x33c>)
 8014890:	681b      	ldr	r3, [r3, #0]
 8014892:	2209      	movs	r2, #9
 8014894:	4393      	bics	r3, r2
 8014896:	0019      	movs	r1, r3
 8014898:	4b4f      	ldr	r3, [pc, #316]	@ (80149d8 <HAL_RCC_OscConfig+0x33c>)
 801489a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801489c:	430a      	orrs	r2, r1
 801489e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80148a0:	f7f9 fde2 	bl	800e468 <HAL_GetTick>
 80148a4:	0003      	movs	r3, r0
 80148a6:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80148a8:	e008      	b.n	80148bc <HAL_RCC_OscConfig+0x220>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80148aa:	f7f9 fddd 	bl	800e468 <HAL_GetTick>
 80148ae:	0002      	movs	r2, r0
 80148b0:	697b      	ldr	r3, [r7, #20]
 80148b2:	1ad3      	subs	r3, r2, r3
 80148b4:	2b02      	cmp	r3, #2
 80148b6:	d901      	bls.n	80148bc <HAL_RCC_OscConfig+0x220>
          {
            return HAL_TIMEOUT;
 80148b8:	2303      	movs	r3, #3
 80148ba:	e2b8      	b.n	8014e2e <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80148bc:	4b46      	ldr	r3, [pc, #280]	@ (80149d8 <HAL_RCC_OscConfig+0x33c>)
 80148be:	681b      	ldr	r3, [r3, #0]
 80148c0:	2204      	movs	r2, #4
 80148c2:	4013      	ands	r3, r2
 80148c4:	d0f1      	beq.n	80148aa <HAL_RCC_OscConfig+0x20e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80148c6:	4b44      	ldr	r3, [pc, #272]	@ (80149d8 <HAL_RCC_OscConfig+0x33c>)
 80148c8:	685b      	ldr	r3, [r3, #4]
 80148ca:	4a46      	ldr	r2, [pc, #280]	@ (80149e4 <HAL_RCC_OscConfig+0x348>)
 80148cc:	4013      	ands	r3, r2
 80148ce:	0019      	movs	r1, r3
 80148d0:	687b      	ldr	r3, [r7, #4]
 80148d2:	691b      	ldr	r3, [r3, #16]
 80148d4:	021a      	lsls	r2, r3, #8
 80148d6:	4b40      	ldr	r3, [pc, #256]	@ (80149d8 <HAL_RCC_OscConfig+0x33c>)
 80148d8:	430a      	orrs	r2, r1
 80148da:	605a      	str	r2, [r3, #4]
 80148dc:	e018      	b.n	8014910 <HAL_RCC_OscConfig+0x274>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80148de:	4b3e      	ldr	r3, [pc, #248]	@ (80149d8 <HAL_RCC_OscConfig+0x33c>)
 80148e0:	681a      	ldr	r2, [r3, #0]
 80148e2:	4b3d      	ldr	r3, [pc, #244]	@ (80149d8 <HAL_RCC_OscConfig+0x33c>)
 80148e4:	2101      	movs	r1, #1
 80148e6:	438a      	bics	r2, r1
 80148e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80148ea:	f7f9 fdbd 	bl	800e468 <HAL_GetTick>
 80148ee:	0003      	movs	r3, r0
 80148f0:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80148f2:	e008      	b.n	8014906 <HAL_RCC_OscConfig+0x26a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80148f4:	f7f9 fdb8 	bl	800e468 <HAL_GetTick>
 80148f8:	0002      	movs	r2, r0
 80148fa:	697b      	ldr	r3, [r7, #20]
 80148fc:	1ad3      	subs	r3, r2, r3
 80148fe:	2b02      	cmp	r3, #2
 8014900:	d901      	bls.n	8014906 <HAL_RCC_OscConfig+0x26a>
          {
            return HAL_TIMEOUT;
 8014902:	2303      	movs	r3, #3
 8014904:	e293      	b.n	8014e2e <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8014906:	4b34      	ldr	r3, [pc, #208]	@ (80149d8 <HAL_RCC_OscConfig+0x33c>)
 8014908:	681b      	ldr	r3, [r3, #0]
 801490a:	2204      	movs	r2, #4
 801490c:	4013      	ands	r3, r2
 801490e:	d1f1      	bne.n	80148f4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8014910:	687b      	ldr	r3, [r7, #4]
 8014912:	681b      	ldr	r3, [r3, #0]
 8014914:	2210      	movs	r2, #16
 8014916:	4013      	ands	r3, r2
 8014918:	d100      	bne.n	801491c <HAL_RCC_OscConfig+0x280>
 801491a:	e0a2      	b.n	8014a62 <HAL_RCC_OscConfig+0x3c6>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 801491c:	69fb      	ldr	r3, [r7, #28]
 801491e:	2b00      	cmp	r3, #0
 8014920:	d140      	bne.n	80149a4 <HAL_RCC_OscConfig+0x308>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8014922:	4b2d      	ldr	r3, [pc, #180]	@ (80149d8 <HAL_RCC_OscConfig+0x33c>)
 8014924:	681a      	ldr	r2, [r3, #0]
 8014926:	2380      	movs	r3, #128	@ 0x80
 8014928:	009b      	lsls	r3, r3, #2
 801492a:	4013      	ands	r3, r2
 801492c:	d005      	beq.n	801493a <HAL_RCC_OscConfig+0x29e>
 801492e:	687b      	ldr	r3, [r7, #4]
 8014930:	69db      	ldr	r3, [r3, #28]
 8014932:	2b00      	cmp	r3, #0
 8014934:	d101      	bne.n	801493a <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8014936:	2301      	movs	r3, #1
 8014938:	e279      	b.n	8014e2e <HAL_RCC_OscConfig+0x792>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 801493a:	4b27      	ldr	r3, [pc, #156]	@ (80149d8 <HAL_RCC_OscConfig+0x33c>)
 801493c:	685b      	ldr	r3, [r3, #4]
 801493e:	4a2d      	ldr	r2, [pc, #180]	@ (80149f4 <HAL_RCC_OscConfig+0x358>)
 8014940:	4013      	ands	r3, r2
 8014942:	0019      	movs	r1, r3
 8014944:	687b      	ldr	r3, [r7, #4]
 8014946:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8014948:	4b23      	ldr	r3, [pc, #140]	@ (80149d8 <HAL_RCC_OscConfig+0x33c>)
 801494a:	430a      	orrs	r2, r1
 801494c:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 801494e:	4b22      	ldr	r3, [pc, #136]	@ (80149d8 <HAL_RCC_OscConfig+0x33c>)
 8014950:	685b      	ldr	r3, [r3, #4]
 8014952:	021b      	lsls	r3, r3, #8
 8014954:	0a19      	lsrs	r1, r3, #8
 8014956:	687b      	ldr	r3, [r7, #4]
 8014958:	6a1b      	ldr	r3, [r3, #32]
 801495a:	061a      	lsls	r2, r3, #24
 801495c:	4b1e      	ldr	r3, [pc, #120]	@ (80149d8 <HAL_RCC_OscConfig+0x33c>)
 801495e:	430a      	orrs	r2, r1
 8014960:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8014962:	687b      	ldr	r3, [r7, #4]
 8014964:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014966:	0b5b      	lsrs	r3, r3, #13
 8014968:	3301      	adds	r3, #1
 801496a:	2280      	movs	r2, #128	@ 0x80
 801496c:	0212      	lsls	r2, r2, #8
 801496e:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8014970:	4b19      	ldr	r3, [pc, #100]	@ (80149d8 <HAL_RCC_OscConfig+0x33c>)
 8014972:	68db      	ldr	r3, [r3, #12]
 8014974:	091b      	lsrs	r3, r3, #4
 8014976:	210f      	movs	r1, #15
 8014978:	400b      	ands	r3, r1
 801497a:	491b      	ldr	r1, [pc, #108]	@ (80149e8 <HAL_RCC_OscConfig+0x34c>)
 801497c:	5ccb      	ldrb	r3, [r1, r3]
 801497e:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8014980:	4b1a      	ldr	r3, [pc, #104]	@ (80149ec <HAL_RCC_OscConfig+0x350>)
 8014982:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8014984:	4b1a      	ldr	r3, [pc, #104]	@ (80149f0 <HAL_RCC_OscConfig+0x354>)
 8014986:	681b      	ldr	r3, [r3, #0]
 8014988:	2513      	movs	r5, #19
 801498a:	197c      	adds	r4, r7, r5
 801498c:	0018      	movs	r0, r3
 801498e:	f7f9 fd25 	bl	800e3dc <HAL_InitTick>
 8014992:	0003      	movs	r3, r0
 8014994:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8014996:	197b      	adds	r3, r7, r5
 8014998:	781b      	ldrb	r3, [r3, #0]
 801499a:	2b00      	cmp	r3, #0
 801499c:	d061      	beq.n	8014a62 <HAL_RCC_OscConfig+0x3c6>
        {
          return status;
 801499e:	197b      	adds	r3, r7, r5
 80149a0:	781b      	ldrb	r3, [r3, #0]
 80149a2:	e244      	b.n	8014e2e <HAL_RCC_OscConfig+0x792>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80149a4:	687b      	ldr	r3, [r7, #4]
 80149a6:	69db      	ldr	r3, [r3, #28]
 80149a8:	2b00      	cmp	r3, #0
 80149aa:	d040      	beq.n	8014a2e <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80149ac:	4b0a      	ldr	r3, [pc, #40]	@ (80149d8 <HAL_RCC_OscConfig+0x33c>)
 80149ae:	681a      	ldr	r2, [r3, #0]
 80149b0:	4b09      	ldr	r3, [pc, #36]	@ (80149d8 <HAL_RCC_OscConfig+0x33c>)
 80149b2:	2180      	movs	r1, #128	@ 0x80
 80149b4:	0049      	lsls	r1, r1, #1
 80149b6:	430a      	orrs	r2, r1
 80149b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80149ba:	f7f9 fd55 	bl	800e468 <HAL_GetTick>
 80149be:	0003      	movs	r3, r0
 80149c0:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80149c2:	e019      	b.n	80149f8 <HAL_RCC_OscConfig+0x35c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80149c4:	f7f9 fd50 	bl	800e468 <HAL_GetTick>
 80149c8:	0002      	movs	r2, r0
 80149ca:	697b      	ldr	r3, [r7, #20]
 80149cc:	1ad3      	subs	r3, r2, r3
 80149ce:	2b02      	cmp	r3, #2
 80149d0:	d912      	bls.n	80149f8 <HAL_RCC_OscConfig+0x35c>
          {
            return HAL_TIMEOUT;
 80149d2:	2303      	movs	r3, #3
 80149d4:	e22b      	b.n	8014e2e <HAL_RCC_OscConfig+0x792>
 80149d6:	46c0      	nop			@ (mov r8, r8)
 80149d8:	40021000 	.word	0x40021000
 80149dc:	fffeffff 	.word	0xfffeffff
 80149e0:	fffbffff 	.word	0xfffbffff
 80149e4:	ffffe0ff 	.word	0xffffe0ff
 80149e8:	08024a44 	.word	0x08024a44
 80149ec:	200000cc 	.word	0x200000cc
 80149f0:	200000dc 	.word	0x200000dc
 80149f4:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80149f8:	4bca      	ldr	r3, [pc, #808]	@ (8014d24 <HAL_RCC_OscConfig+0x688>)
 80149fa:	681a      	ldr	r2, [r3, #0]
 80149fc:	2380      	movs	r3, #128	@ 0x80
 80149fe:	009b      	lsls	r3, r3, #2
 8014a00:	4013      	ands	r3, r2
 8014a02:	d0df      	beq.n	80149c4 <HAL_RCC_OscConfig+0x328>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8014a04:	4bc7      	ldr	r3, [pc, #796]	@ (8014d24 <HAL_RCC_OscConfig+0x688>)
 8014a06:	685b      	ldr	r3, [r3, #4]
 8014a08:	4ac7      	ldr	r2, [pc, #796]	@ (8014d28 <HAL_RCC_OscConfig+0x68c>)
 8014a0a:	4013      	ands	r3, r2
 8014a0c:	0019      	movs	r1, r3
 8014a0e:	687b      	ldr	r3, [r7, #4]
 8014a10:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8014a12:	4bc4      	ldr	r3, [pc, #784]	@ (8014d24 <HAL_RCC_OscConfig+0x688>)
 8014a14:	430a      	orrs	r2, r1
 8014a16:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8014a18:	4bc2      	ldr	r3, [pc, #776]	@ (8014d24 <HAL_RCC_OscConfig+0x688>)
 8014a1a:	685b      	ldr	r3, [r3, #4]
 8014a1c:	021b      	lsls	r3, r3, #8
 8014a1e:	0a19      	lsrs	r1, r3, #8
 8014a20:	687b      	ldr	r3, [r7, #4]
 8014a22:	6a1b      	ldr	r3, [r3, #32]
 8014a24:	061a      	lsls	r2, r3, #24
 8014a26:	4bbf      	ldr	r3, [pc, #764]	@ (8014d24 <HAL_RCC_OscConfig+0x688>)
 8014a28:	430a      	orrs	r2, r1
 8014a2a:	605a      	str	r2, [r3, #4]
 8014a2c:	e019      	b.n	8014a62 <HAL_RCC_OscConfig+0x3c6>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8014a2e:	4bbd      	ldr	r3, [pc, #756]	@ (8014d24 <HAL_RCC_OscConfig+0x688>)
 8014a30:	681a      	ldr	r2, [r3, #0]
 8014a32:	4bbc      	ldr	r3, [pc, #752]	@ (8014d24 <HAL_RCC_OscConfig+0x688>)
 8014a34:	49bd      	ldr	r1, [pc, #756]	@ (8014d2c <HAL_RCC_OscConfig+0x690>)
 8014a36:	400a      	ands	r2, r1
 8014a38:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8014a3a:	f7f9 fd15 	bl	800e468 <HAL_GetTick>
 8014a3e:	0003      	movs	r3, r0
 8014a40:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8014a42:	e008      	b.n	8014a56 <HAL_RCC_OscConfig+0x3ba>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8014a44:	f7f9 fd10 	bl	800e468 <HAL_GetTick>
 8014a48:	0002      	movs	r2, r0
 8014a4a:	697b      	ldr	r3, [r7, #20]
 8014a4c:	1ad3      	subs	r3, r2, r3
 8014a4e:	2b02      	cmp	r3, #2
 8014a50:	d901      	bls.n	8014a56 <HAL_RCC_OscConfig+0x3ba>
          {
            return HAL_TIMEOUT;
 8014a52:	2303      	movs	r3, #3
 8014a54:	e1eb      	b.n	8014e2e <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8014a56:	4bb3      	ldr	r3, [pc, #716]	@ (8014d24 <HAL_RCC_OscConfig+0x688>)
 8014a58:	681a      	ldr	r2, [r3, #0]
 8014a5a:	2380      	movs	r3, #128	@ 0x80
 8014a5c:	009b      	lsls	r3, r3, #2
 8014a5e:	4013      	ands	r3, r2
 8014a60:	d1f0      	bne.n	8014a44 <HAL_RCC_OscConfig+0x3a8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8014a62:	687b      	ldr	r3, [r7, #4]
 8014a64:	681b      	ldr	r3, [r3, #0]
 8014a66:	2208      	movs	r2, #8
 8014a68:	4013      	ands	r3, r2
 8014a6a:	d036      	beq.n	8014ada <HAL_RCC_OscConfig+0x43e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8014a6c:	687b      	ldr	r3, [r7, #4]
 8014a6e:	695b      	ldr	r3, [r3, #20]
 8014a70:	2b00      	cmp	r3, #0
 8014a72:	d019      	beq.n	8014aa8 <HAL_RCC_OscConfig+0x40c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8014a74:	4bab      	ldr	r3, [pc, #684]	@ (8014d24 <HAL_RCC_OscConfig+0x688>)
 8014a76:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8014a78:	4baa      	ldr	r3, [pc, #680]	@ (8014d24 <HAL_RCC_OscConfig+0x688>)
 8014a7a:	2101      	movs	r1, #1
 8014a7c:	430a      	orrs	r2, r1
 8014a7e:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8014a80:	f7f9 fcf2 	bl	800e468 <HAL_GetTick>
 8014a84:	0003      	movs	r3, r0
 8014a86:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8014a88:	e008      	b.n	8014a9c <HAL_RCC_OscConfig+0x400>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8014a8a:	f7f9 fced 	bl	800e468 <HAL_GetTick>
 8014a8e:	0002      	movs	r2, r0
 8014a90:	697b      	ldr	r3, [r7, #20]
 8014a92:	1ad3      	subs	r3, r2, r3
 8014a94:	2b02      	cmp	r3, #2
 8014a96:	d901      	bls.n	8014a9c <HAL_RCC_OscConfig+0x400>
        {
          return HAL_TIMEOUT;
 8014a98:	2303      	movs	r3, #3
 8014a9a:	e1c8      	b.n	8014e2e <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8014a9c:	4ba1      	ldr	r3, [pc, #644]	@ (8014d24 <HAL_RCC_OscConfig+0x688>)
 8014a9e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8014aa0:	2202      	movs	r2, #2
 8014aa2:	4013      	ands	r3, r2
 8014aa4:	d0f1      	beq.n	8014a8a <HAL_RCC_OscConfig+0x3ee>
 8014aa6:	e018      	b.n	8014ada <HAL_RCC_OscConfig+0x43e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8014aa8:	4b9e      	ldr	r3, [pc, #632]	@ (8014d24 <HAL_RCC_OscConfig+0x688>)
 8014aaa:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8014aac:	4b9d      	ldr	r3, [pc, #628]	@ (8014d24 <HAL_RCC_OscConfig+0x688>)
 8014aae:	2101      	movs	r1, #1
 8014ab0:	438a      	bics	r2, r1
 8014ab2:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8014ab4:	f7f9 fcd8 	bl	800e468 <HAL_GetTick>
 8014ab8:	0003      	movs	r3, r0
 8014aba:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8014abc:	e008      	b.n	8014ad0 <HAL_RCC_OscConfig+0x434>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8014abe:	f7f9 fcd3 	bl	800e468 <HAL_GetTick>
 8014ac2:	0002      	movs	r2, r0
 8014ac4:	697b      	ldr	r3, [r7, #20]
 8014ac6:	1ad3      	subs	r3, r2, r3
 8014ac8:	2b02      	cmp	r3, #2
 8014aca:	d901      	bls.n	8014ad0 <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 8014acc:	2303      	movs	r3, #3
 8014ace:	e1ae      	b.n	8014e2e <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8014ad0:	4b94      	ldr	r3, [pc, #592]	@ (8014d24 <HAL_RCC_OscConfig+0x688>)
 8014ad2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8014ad4:	2202      	movs	r2, #2
 8014ad6:	4013      	ands	r3, r2
 8014ad8:	d1f1      	bne.n	8014abe <HAL_RCC_OscConfig+0x422>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8014ada:	687b      	ldr	r3, [r7, #4]
 8014adc:	681b      	ldr	r3, [r3, #0]
 8014ade:	2204      	movs	r2, #4
 8014ae0:	4013      	ands	r3, r2
 8014ae2:	d100      	bne.n	8014ae6 <HAL_RCC_OscConfig+0x44a>
 8014ae4:	e0ae      	b.n	8014c44 <HAL_RCC_OscConfig+0x5a8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8014ae6:	2023      	movs	r0, #35	@ 0x23
 8014ae8:	183b      	adds	r3, r7, r0
 8014aea:	2200      	movs	r2, #0
 8014aec:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8014aee:	4b8d      	ldr	r3, [pc, #564]	@ (8014d24 <HAL_RCC_OscConfig+0x688>)
 8014af0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8014af2:	2380      	movs	r3, #128	@ 0x80
 8014af4:	055b      	lsls	r3, r3, #21
 8014af6:	4013      	ands	r3, r2
 8014af8:	d109      	bne.n	8014b0e <HAL_RCC_OscConfig+0x472>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8014afa:	4b8a      	ldr	r3, [pc, #552]	@ (8014d24 <HAL_RCC_OscConfig+0x688>)
 8014afc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8014afe:	4b89      	ldr	r3, [pc, #548]	@ (8014d24 <HAL_RCC_OscConfig+0x688>)
 8014b00:	2180      	movs	r1, #128	@ 0x80
 8014b02:	0549      	lsls	r1, r1, #21
 8014b04:	430a      	orrs	r2, r1
 8014b06:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 8014b08:	183b      	adds	r3, r7, r0
 8014b0a:	2201      	movs	r2, #1
 8014b0c:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8014b0e:	4b88      	ldr	r3, [pc, #544]	@ (8014d30 <HAL_RCC_OscConfig+0x694>)
 8014b10:	681a      	ldr	r2, [r3, #0]
 8014b12:	2380      	movs	r3, #128	@ 0x80
 8014b14:	005b      	lsls	r3, r3, #1
 8014b16:	4013      	ands	r3, r2
 8014b18:	d11a      	bne.n	8014b50 <HAL_RCC_OscConfig+0x4b4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8014b1a:	4b85      	ldr	r3, [pc, #532]	@ (8014d30 <HAL_RCC_OscConfig+0x694>)
 8014b1c:	681a      	ldr	r2, [r3, #0]
 8014b1e:	4b84      	ldr	r3, [pc, #528]	@ (8014d30 <HAL_RCC_OscConfig+0x694>)
 8014b20:	2180      	movs	r1, #128	@ 0x80
 8014b22:	0049      	lsls	r1, r1, #1
 8014b24:	430a      	orrs	r2, r1
 8014b26:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8014b28:	f7f9 fc9e 	bl	800e468 <HAL_GetTick>
 8014b2c:	0003      	movs	r3, r0
 8014b2e:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8014b30:	e008      	b.n	8014b44 <HAL_RCC_OscConfig+0x4a8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8014b32:	f7f9 fc99 	bl	800e468 <HAL_GetTick>
 8014b36:	0002      	movs	r2, r0
 8014b38:	697b      	ldr	r3, [r7, #20]
 8014b3a:	1ad3      	subs	r3, r2, r3
 8014b3c:	2b64      	cmp	r3, #100	@ 0x64
 8014b3e:	d901      	bls.n	8014b44 <HAL_RCC_OscConfig+0x4a8>
        {
          return HAL_TIMEOUT;
 8014b40:	2303      	movs	r3, #3
 8014b42:	e174      	b.n	8014e2e <HAL_RCC_OscConfig+0x792>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8014b44:	4b7a      	ldr	r3, [pc, #488]	@ (8014d30 <HAL_RCC_OscConfig+0x694>)
 8014b46:	681a      	ldr	r2, [r3, #0]
 8014b48:	2380      	movs	r3, #128	@ 0x80
 8014b4a:	005b      	lsls	r3, r3, #1
 8014b4c:	4013      	ands	r3, r2
 8014b4e:	d0f0      	beq.n	8014b32 <HAL_RCC_OscConfig+0x496>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8014b50:	687b      	ldr	r3, [r7, #4]
 8014b52:	689a      	ldr	r2, [r3, #8]
 8014b54:	2380      	movs	r3, #128	@ 0x80
 8014b56:	005b      	lsls	r3, r3, #1
 8014b58:	429a      	cmp	r2, r3
 8014b5a:	d107      	bne.n	8014b6c <HAL_RCC_OscConfig+0x4d0>
 8014b5c:	4b71      	ldr	r3, [pc, #452]	@ (8014d24 <HAL_RCC_OscConfig+0x688>)
 8014b5e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8014b60:	4b70      	ldr	r3, [pc, #448]	@ (8014d24 <HAL_RCC_OscConfig+0x688>)
 8014b62:	2180      	movs	r1, #128	@ 0x80
 8014b64:	0049      	lsls	r1, r1, #1
 8014b66:	430a      	orrs	r2, r1
 8014b68:	651a      	str	r2, [r3, #80]	@ 0x50
 8014b6a:	e031      	b.n	8014bd0 <HAL_RCC_OscConfig+0x534>
 8014b6c:	687b      	ldr	r3, [r7, #4]
 8014b6e:	689b      	ldr	r3, [r3, #8]
 8014b70:	2b00      	cmp	r3, #0
 8014b72:	d10c      	bne.n	8014b8e <HAL_RCC_OscConfig+0x4f2>
 8014b74:	4b6b      	ldr	r3, [pc, #428]	@ (8014d24 <HAL_RCC_OscConfig+0x688>)
 8014b76:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8014b78:	4b6a      	ldr	r3, [pc, #424]	@ (8014d24 <HAL_RCC_OscConfig+0x688>)
 8014b7a:	496c      	ldr	r1, [pc, #432]	@ (8014d2c <HAL_RCC_OscConfig+0x690>)
 8014b7c:	400a      	ands	r2, r1
 8014b7e:	651a      	str	r2, [r3, #80]	@ 0x50
 8014b80:	4b68      	ldr	r3, [pc, #416]	@ (8014d24 <HAL_RCC_OscConfig+0x688>)
 8014b82:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8014b84:	4b67      	ldr	r3, [pc, #412]	@ (8014d24 <HAL_RCC_OscConfig+0x688>)
 8014b86:	496b      	ldr	r1, [pc, #428]	@ (8014d34 <HAL_RCC_OscConfig+0x698>)
 8014b88:	400a      	ands	r2, r1
 8014b8a:	651a      	str	r2, [r3, #80]	@ 0x50
 8014b8c:	e020      	b.n	8014bd0 <HAL_RCC_OscConfig+0x534>
 8014b8e:	687b      	ldr	r3, [r7, #4]
 8014b90:	689a      	ldr	r2, [r3, #8]
 8014b92:	23a0      	movs	r3, #160	@ 0xa0
 8014b94:	00db      	lsls	r3, r3, #3
 8014b96:	429a      	cmp	r2, r3
 8014b98:	d10e      	bne.n	8014bb8 <HAL_RCC_OscConfig+0x51c>
 8014b9a:	4b62      	ldr	r3, [pc, #392]	@ (8014d24 <HAL_RCC_OscConfig+0x688>)
 8014b9c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8014b9e:	4b61      	ldr	r3, [pc, #388]	@ (8014d24 <HAL_RCC_OscConfig+0x688>)
 8014ba0:	2180      	movs	r1, #128	@ 0x80
 8014ba2:	00c9      	lsls	r1, r1, #3
 8014ba4:	430a      	orrs	r2, r1
 8014ba6:	651a      	str	r2, [r3, #80]	@ 0x50
 8014ba8:	4b5e      	ldr	r3, [pc, #376]	@ (8014d24 <HAL_RCC_OscConfig+0x688>)
 8014baa:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8014bac:	4b5d      	ldr	r3, [pc, #372]	@ (8014d24 <HAL_RCC_OscConfig+0x688>)
 8014bae:	2180      	movs	r1, #128	@ 0x80
 8014bb0:	0049      	lsls	r1, r1, #1
 8014bb2:	430a      	orrs	r2, r1
 8014bb4:	651a      	str	r2, [r3, #80]	@ 0x50
 8014bb6:	e00b      	b.n	8014bd0 <HAL_RCC_OscConfig+0x534>
 8014bb8:	4b5a      	ldr	r3, [pc, #360]	@ (8014d24 <HAL_RCC_OscConfig+0x688>)
 8014bba:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8014bbc:	4b59      	ldr	r3, [pc, #356]	@ (8014d24 <HAL_RCC_OscConfig+0x688>)
 8014bbe:	495b      	ldr	r1, [pc, #364]	@ (8014d2c <HAL_RCC_OscConfig+0x690>)
 8014bc0:	400a      	ands	r2, r1
 8014bc2:	651a      	str	r2, [r3, #80]	@ 0x50
 8014bc4:	4b57      	ldr	r3, [pc, #348]	@ (8014d24 <HAL_RCC_OscConfig+0x688>)
 8014bc6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8014bc8:	4b56      	ldr	r3, [pc, #344]	@ (8014d24 <HAL_RCC_OscConfig+0x688>)
 8014bca:	495a      	ldr	r1, [pc, #360]	@ (8014d34 <HAL_RCC_OscConfig+0x698>)
 8014bcc:	400a      	ands	r2, r1
 8014bce:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8014bd0:	687b      	ldr	r3, [r7, #4]
 8014bd2:	689b      	ldr	r3, [r3, #8]
 8014bd4:	2b00      	cmp	r3, #0
 8014bd6:	d015      	beq.n	8014c04 <HAL_RCC_OscConfig+0x568>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8014bd8:	f7f9 fc46 	bl	800e468 <HAL_GetTick>
 8014bdc:	0003      	movs	r3, r0
 8014bde:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8014be0:	e009      	b.n	8014bf6 <HAL_RCC_OscConfig+0x55a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8014be2:	f7f9 fc41 	bl	800e468 <HAL_GetTick>
 8014be6:	0002      	movs	r2, r0
 8014be8:	697b      	ldr	r3, [r7, #20]
 8014bea:	1ad3      	subs	r3, r2, r3
 8014bec:	4a52      	ldr	r2, [pc, #328]	@ (8014d38 <HAL_RCC_OscConfig+0x69c>)
 8014bee:	4293      	cmp	r3, r2
 8014bf0:	d901      	bls.n	8014bf6 <HAL_RCC_OscConfig+0x55a>
        {
          return HAL_TIMEOUT;
 8014bf2:	2303      	movs	r3, #3
 8014bf4:	e11b      	b.n	8014e2e <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8014bf6:	4b4b      	ldr	r3, [pc, #300]	@ (8014d24 <HAL_RCC_OscConfig+0x688>)
 8014bf8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8014bfa:	2380      	movs	r3, #128	@ 0x80
 8014bfc:	009b      	lsls	r3, r3, #2
 8014bfe:	4013      	ands	r3, r2
 8014c00:	d0ef      	beq.n	8014be2 <HAL_RCC_OscConfig+0x546>
 8014c02:	e014      	b.n	8014c2e <HAL_RCC_OscConfig+0x592>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8014c04:	f7f9 fc30 	bl	800e468 <HAL_GetTick>
 8014c08:	0003      	movs	r3, r0
 8014c0a:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8014c0c:	e009      	b.n	8014c22 <HAL_RCC_OscConfig+0x586>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8014c0e:	f7f9 fc2b 	bl	800e468 <HAL_GetTick>
 8014c12:	0002      	movs	r2, r0
 8014c14:	697b      	ldr	r3, [r7, #20]
 8014c16:	1ad3      	subs	r3, r2, r3
 8014c18:	4a47      	ldr	r2, [pc, #284]	@ (8014d38 <HAL_RCC_OscConfig+0x69c>)
 8014c1a:	4293      	cmp	r3, r2
 8014c1c:	d901      	bls.n	8014c22 <HAL_RCC_OscConfig+0x586>
        {
          return HAL_TIMEOUT;
 8014c1e:	2303      	movs	r3, #3
 8014c20:	e105      	b.n	8014e2e <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8014c22:	4b40      	ldr	r3, [pc, #256]	@ (8014d24 <HAL_RCC_OscConfig+0x688>)
 8014c24:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8014c26:	2380      	movs	r3, #128	@ 0x80
 8014c28:	009b      	lsls	r3, r3, #2
 8014c2a:	4013      	ands	r3, r2
 8014c2c:	d1ef      	bne.n	8014c0e <HAL_RCC_OscConfig+0x572>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8014c2e:	2323      	movs	r3, #35	@ 0x23
 8014c30:	18fb      	adds	r3, r7, r3
 8014c32:	781b      	ldrb	r3, [r3, #0]
 8014c34:	2b01      	cmp	r3, #1
 8014c36:	d105      	bne.n	8014c44 <HAL_RCC_OscConfig+0x5a8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8014c38:	4b3a      	ldr	r3, [pc, #232]	@ (8014d24 <HAL_RCC_OscConfig+0x688>)
 8014c3a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8014c3c:	4b39      	ldr	r3, [pc, #228]	@ (8014d24 <HAL_RCC_OscConfig+0x688>)
 8014c3e:	493f      	ldr	r1, [pc, #252]	@ (8014d3c <HAL_RCC_OscConfig+0x6a0>)
 8014c40:	400a      	ands	r2, r1
 8014c42:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8014c44:	687b      	ldr	r3, [r7, #4]
 8014c46:	681b      	ldr	r3, [r3, #0]
 8014c48:	2220      	movs	r2, #32
 8014c4a:	4013      	ands	r3, r2
 8014c4c:	d049      	beq.n	8014ce2 <HAL_RCC_OscConfig+0x646>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8014c4e:	687b      	ldr	r3, [r7, #4]
 8014c50:	699b      	ldr	r3, [r3, #24]
 8014c52:	2b00      	cmp	r3, #0
 8014c54:	d026      	beq.n	8014ca4 <HAL_RCC_OscConfig+0x608>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8014c56:	4b33      	ldr	r3, [pc, #204]	@ (8014d24 <HAL_RCC_OscConfig+0x688>)
 8014c58:	689a      	ldr	r2, [r3, #8]
 8014c5a:	4b32      	ldr	r3, [pc, #200]	@ (8014d24 <HAL_RCC_OscConfig+0x688>)
 8014c5c:	2101      	movs	r1, #1
 8014c5e:	430a      	orrs	r2, r1
 8014c60:	609a      	str	r2, [r3, #8]
 8014c62:	4b30      	ldr	r3, [pc, #192]	@ (8014d24 <HAL_RCC_OscConfig+0x688>)
 8014c64:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8014c66:	4b2f      	ldr	r3, [pc, #188]	@ (8014d24 <HAL_RCC_OscConfig+0x688>)
 8014c68:	2101      	movs	r1, #1
 8014c6a:	430a      	orrs	r2, r1
 8014c6c:	635a      	str	r2, [r3, #52]	@ 0x34
 8014c6e:	4b34      	ldr	r3, [pc, #208]	@ (8014d40 <HAL_RCC_OscConfig+0x6a4>)
 8014c70:	6a1a      	ldr	r2, [r3, #32]
 8014c72:	4b33      	ldr	r3, [pc, #204]	@ (8014d40 <HAL_RCC_OscConfig+0x6a4>)
 8014c74:	2180      	movs	r1, #128	@ 0x80
 8014c76:	0189      	lsls	r1, r1, #6
 8014c78:	430a      	orrs	r2, r1
 8014c7a:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8014c7c:	f7f9 fbf4 	bl	800e468 <HAL_GetTick>
 8014c80:	0003      	movs	r3, r0
 8014c82:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8014c84:	e008      	b.n	8014c98 <HAL_RCC_OscConfig+0x5fc>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8014c86:	f7f9 fbef 	bl	800e468 <HAL_GetTick>
 8014c8a:	0002      	movs	r2, r0
 8014c8c:	697b      	ldr	r3, [r7, #20]
 8014c8e:	1ad3      	subs	r3, r2, r3
 8014c90:	2b02      	cmp	r3, #2
 8014c92:	d901      	bls.n	8014c98 <HAL_RCC_OscConfig+0x5fc>
          {
            return HAL_TIMEOUT;
 8014c94:	2303      	movs	r3, #3
 8014c96:	e0ca      	b.n	8014e2e <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8014c98:	4b22      	ldr	r3, [pc, #136]	@ (8014d24 <HAL_RCC_OscConfig+0x688>)
 8014c9a:	689b      	ldr	r3, [r3, #8]
 8014c9c:	2202      	movs	r2, #2
 8014c9e:	4013      	ands	r3, r2
 8014ca0:	d0f1      	beq.n	8014c86 <HAL_RCC_OscConfig+0x5ea>
 8014ca2:	e01e      	b.n	8014ce2 <HAL_RCC_OscConfig+0x646>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8014ca4:	4b1f      	ldr	r3, [pc, #124]	@ (8014d24 <HAL_RCC_OscConfig+0x688>)
 8014ca6:	689a      	ldr	r2, [r3, #8]
 8014ca8:	4b1e      	ldr	r3, [pc, #120]	@ (8014d24 <HAL_RCC_OscConfig+0x688>)
 8014caa:	2101      	movs	r1, #1
 8014cac:	438a      	bics	r2, r1
 8014cae:	609a      	str	r2, [r3, #8]
 8014cb0:	4b23      	ldr	r3, [pc, #140]	@ (8014d40 <HAL_RCC_OscConfig+0x6a4>)
 8014cb2:	6a1a      	ldr	r2, [r3, #32]
 8014cb4:	4b22      	ldr	r3, [pc, #136]	@ (8014d40 <HAL_RCC_OscConfig+0x6a4>)
 8014cb6:	4923      	ldr	r1, [pc, #140]	@ (8014d44 <HAL_RCC_OscConfig+0x6a8>)
 8014cb8:	400a      	ands	r2, r1
 8014cba:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8014cbc:	f7f9 fbd4 	bl	800e468 <HAL_GetTick>
 8014cc0:	0003      	movs	r3, r0
 8014cc2:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8014cc4:	e008      	b.n	8014cd8 <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8014cc6:	f7f9 fbcf 	bl	800e468 <HAL_GetTick>
 8014cca:	0002      	movs	r2, r0
 8014ccc:	697b      	ldr	r3, [r7, #20]
 8014cce:	1ad3      	subs	r3, r2, r3
 8014cd0:	2b02      	cmp	r3, #2
 8014cd2:	d901      	bls.n	8014cd8 <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 8014cd4:	2303      	movs	r3, #3
 8014cd6:	e0aa      	b.n	8014e2e <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8014cd8:	4b12      	ldr	r3, [pc, #72]	@ (8014d24 <HAL_RCC_OscConfig+0x688>)
 8014cda:	689b      	ldr	r3, [r3, #8]
 8014cdc:	2202      	movs	r2, #2
 8014cde:	4013      	ands	r3, r2
 8014ce0:	d1f1      	bne.n	8014cc6 <HAL_RCC_OscConfig+0x62a>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8014ce2:	687b      	ldr	r3, [r7, #4]
 8014ce4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014ce6:	2b00      	cmp	r3, #0
 8014ce8:	d100      	bne.n	8014cec <HAL_RCC_OscConfig+0x650>
 8014cea:	e09f      	b.n	8014e2c <HAL_RCC_OscConfig+0x790>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8014cec:	69fb      	ldr	r3, [r7, #28]
 8014cee:	2b0c      	cmp	r3, #12
 8014cf0:	d100      	bne.n	8014cf4 <HAL_RCC_OscConfig+0x658>
 8014cf2:	e078      	b.n	8014de6 <HAL_RCC_OscConfig+0x74a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8014cf4:	687b      	ldr	r3, [r7, #4]
 8014cf6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014cf8:	2b02      	cmp	r3, #2
 8014cfa:	d159      	bne.n	8014db0 <HAL_RCC_OscConfig+0x714>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8014cfc:	4b09      	ldr	r3, [pc, #36]	@ (8014d24 <HAL_RCC_OscConfig+0x688>)
 8014cfe:	681a      	ldr	r2, [r3, #0]
 8014d00:	4b08      	ldr	r3, [pc, #32]	@ (8014d24 <HAL_RCC_OscConfig+0x688>)
 8014d02:	4911      	ldr	r1, [pc, #68]	@ (8014d48 <HAL_RCC_OscConfig+0x6ac>)
 8014d04:	400a      	ands	r2, r1
 8014d06:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8014d08:	f7f9 fbae 	bl	800e468 <HAL_GetTick>
 8014d0c:	0003      	movs	r3, r0
 8014d0e:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8014d10:	e01c      	b.n	8014d4c <HAL_RCC_OscConfig+0x6b0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8014d12:	f7f9 fba9 	bl	800e468 <HAL_GetTick>
 8014d16:	0002      	movs	r2, r0
 8014d18:	697b      	ldr	r3, [r7, #20]
 8014d1a:	1ad3      	subs	r3, r2, r3
 8014d1c:	2b02      	cmp	r3, #2
 8014d1e:	d915      	bls.n	8014d4c <HAL_RCC_OscConfig+0x6b0>
          {
            return HAL_TIMEOUT;
 8014d20:	2303      	movs	r3, #3
 8014d22:	e084      	b.n	8014e2e <HAL_RCC_OscConfig+0x792>
 8014d24:	40021000 	.word	0x40021000
 8014d28:	ffff1fff 	.word	0xffff1fff
 8014d2c:	fffffeff 	.word	0xfffffeff
 8014d30:	40007000 	.word	0x40007000
 8014d34:	fffffbff 	.word	0xfffffbff
 8014d38:	00001388 	.word	0x00001388
 8014d3c:	efffffff 	.word	0xefffffff
 8014d40:	40010000 	.word	0x40010000
 8014d44:	ffffdfff 	.word	0xffffdfff
 8014d48:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8014d4c:	4b3a      	ldr	r3, [pc, #232]	@ (8014e38 <HAL_RCC_OscConfig+0x79c>)
 8014d4e:	681a      	ldr	r2, [r3, #0]
 8014d50:	2380      	movs	r3, #128	@ 0x80
 8014d52:	049b      	lsls	r3, r3, #18
 8014d54:	4013      	ands	r3, r2
 8014d56:	d1dc      	bne.n	8014d12 <HAL_RCC_OscConfig+0x676>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8014d58:	4b37      	ldr	r3, [pc, #220]	@ (8014e38 <HAL_RCC_OscConfig+0x79c>)
 8014d5a:	68db      	ldr	r3, [r3, #12]
 8014d5c:	4a37      	ldr	r2, [pc, #220]	@ (8014e3c <HAL_RCC_OscConfig+0x7a0>)
 8014d5e:	4013      	ands	r3, r2
 8014d60:	0019      	movs	r1, r3
 8014d62:	687b      	ldr	r3, [r7, #4]
 8014d64:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014d66:	687b      	ldr	r3, [r7, #4]
 8014d68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8014d6a:	431a      	orrs	r2, r3
 8014d6c:	687b      	ldr	r3, [r7, #4]
 8014d6e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8014d70:	431a      	orrs	r2, r3
 8014d72:	4b31      	ldr	r3, [pc, #196]	@ (8014e38 <HAL_RCC_OscConfig+0x79c>)
 8014d74:	430a      	orrs	r2, r1
 8014d76:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8014d78:	4b2f      	ldr	r3, [pc, #188]	@ (8014e38 <HAL_RCC_OscConfig+0x79c>)
 8014d7a:	681a      	ldr	r2, [r3, #0]
 8014d7c:	4b2e      	ldr	r3, [pc, #184]	@ (8014e38 <HAL_RCC_OscConfig+0x79c>)
 8014d7e:	2180      	movs	r1, #128	@ 0x80
 8014d80:	0449      	lsls	r1, r1, #17
 8014d82:	430a      	orrs	r2, r1
 8014d84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8014d86:	f7f9 fb6f 	bl	800e468 <HAL_GetTick>
 8014d8a:	0003      	movs	r3, r0
 8014d8c:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8014d8e:	e008      	b.n	8014da2 <HAL_RCC_OscConfig+0x706>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8014d90:	f7f9 fb6a 	bl	800e468 <HAL_GetTick>
 8014d94:	0002      	movs	r2, r0
 8014d96:	697b      	ldr	r3, [r7, #20]
 8014d98:	1ad3      	subs	r3, r2, r3
 8014d9a:	2b02      	cmp	r3, #2
 8014d9c:	d901      	bls.n	8014da2 <HAL_RCC_OscConfig+0x706>
          {
            return HAL_TIMEOUT;
 8014d9e:	2303      	movs	r3, #3
 8014da0:	e045      	b.n	8014e2e <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8014da2:	4b25      	ldr	r3, [pc, #148]	@ (8014e38 <HAL_RCC_OscConfig+0x79c>)
 8014da4:	681a      	ldr	r2, [r3, #0]
 8014da6:	2380      	movs	r3, #128	@ 0x80
 8014da8:	049b      	lsls	r3, r3, #18
 8014daa:	4013      	ands	r3, r2
 8014dac:	d0f0      	beq.n	8014d90 <HAL_RCC_OscConfig+0x6f4>
 8014dae:	e03d      	b.n	8014e2c <HAL_RCC_OscConfig+0x790>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8014db0:	4b21      	ldr	r3, [pc, #132]	@ (8014e38 <HAL_RCC_OscConfig+0x79c>)
 8014db2:	681a      	ldr	r2, [r3, #0]
 8014db4:	4b20      	ldr	r3, [pc, #128]	@ (8014e38 <HAL_RCC_OscConfig+0x79c>)
 8014db6:	4922      	ldr	r1, [pc, #136]	@ (8014e40 <HAL_RCC_OscConfig+0x7a4>)
 8014db8:	400a      	ands	r2, r1
 8014dba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8014dbc:	f7f9 fb54 	bl	800e468 <HAL_GetTick>
 8014dc0:	0003      	movs	r3, r0
 8014dc2:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8014dc4:	e008      	b.n	8014dd8 <HAL_RCC_OscConfig+0x73c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8014dc6:	f7f9 fb4f 	bl	800e468 <HAL_GetTick>
 8014dca:	0002      	movs	r2, r0
 8014dcc:	697b      	ldr	r3, [r7, #20]
 8014dce:	1ad3      	subs	r3, r2, r3
 8014dd0:	2b02      	cmp	r3, #2
 8014dd2:	d901      	bls.n	8014dd8 <HAL_RCC_OscConfig+0x73c>
          {
            return HAL_TIMEOUT;
 8014dd4:	2303      	movs	r3, #3
 8014dd6:	e02a      	b.n	8014e2e <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8014dd8:	4b17      	ldr	r3, [pc, #92]	@ (8014e38 <HAL_RCC_OscConfig+0x79c>)
 8014dda:	681a      	ldr	r2, [r3, #0]
 8014ddc:	2380      	movs	r3, #128	@ 0x80
 8014dde:	049b      	lsls	r3, r3, #18
 8014de0:	4013      	ands	r3, r2
 8014de2:	d1f0      	bne.n	8014dc6 <HAL_RCC_OscConfig+0x72a>
 8014de4:	e022      	b.n	8014e2c <HAL_RCC_OscConfig+0x790>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8014de6:	687b      	ldr	r3, [r7, #4]
 8014de8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014dea:	2b01      	cmp	r3, #1
 8014dec:	d101      	bne.n	8014df2 <HAL_RCC_OscConfig+0x756>
      {
        return HAL_ERROR;
 8014dee:	2301      	movs	r3, #1
 8014df0:	e01d      	b.n	8014e2e <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8014df2:	4b11      	ldr	r3, [pc, #68]	@ (8014e38 <HAL_RCC_OscConfig+0x79c>)
 8014df4:	68db      	ldr	r3, [r3, #12]
 8014df6:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8014df8:	69ba      	ldr	r2, [r7, #24]
 8014dfa:	2380      	movs	r3, #128	@ 0x80
 8014dfc:	025b      	lsls	r3, r3, #9
 8014dfe:	401a      	ands	r2, r3
 8014e00:	687b      	ldr	r3, [r7, #4]
 8014e02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014e04:	429a      	cmp	r2, r3
 8014e06:	d10f      	bne.n	8014e28 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8014e08:	69ba      	ldr	r2, [r7, #24]
 8014e0a:	23f0      	movs	r3, #240	@ 0xf0
 8014e0c:	039b      	lsls	r3, r3, #14
 8014e0e:	401a      	ands	r2, r3
 8014e10:	687b      	ldr	r3, [r7, #4]
 8014e12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8014e14:	429a      	cmp	r2, r3
 8014e16:	d107      	bne.n	8014e28 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8014e18:	69ba      	ldr	r2, [r7, #24]
 8014e1a:	23c0      	movs	r3, #192	@ 0xc0
 8014e1c:	041b      	lsls	r3, r3, #16
 8014e1e:	401a      	ands	r2, r3
 8014e20:	687b      	ldr	r3, [r7, #4]
 8014e22:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8014e24:	429a      	cmp	r2, r3
 8014e26:	d001      	beq.n	8014e2c <HAL_RCC_OscConfig+0x790>
        {
          return HAL_ERROR;
 8014e28:	2301      	movs	r3, #1
 8014e2a:	e000      	b.n	8014e2e <HAL_RCC_OscConfig+0x792>
        }
      }
    }
  }
  return HAL_OK;
 8014e2c:	2300      	movs	r3, #0
}
 8014e2e:	0018      	movs	r0, r3
 8014e30:	46bd      	mov	sp, r7
 8014e32:	b00a      	add	sp, #40	@ 0x28
 8014e34:	bdb0      	pop	{r4, r5, r7, pc}
 8014e36:	46c0      	nop			@ (mov r8, r8)
 8014e38:	40021000 	.word	0x40021000
 8014e3c:	ff02ffff 	.word	0xff02ffff
 8014e40:	feffffff 	.word	0xfeffffff

08014e44 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8014e44:	b5b0      	push	{r4, r5, r7, lr}
 8014e46:	b084      	sub	sp, #16
 8014e48:	af00      	add	r7, sp, #0
 8014e4a:	6078      	str	r0, [r7, #4]
 8014e4c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8014e4e:	687b      	ldr	r3, [r7, #4]
 8014e50:	2b00      	cmp	r3, #0
 8014e52:	d101      	bne.n	8014e58 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8014e54:	2301      	movs	r3, #1
 8014e56:	e128      	b.n	80150aa <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8014e58:	4b96      	ldr	r3, [pc, #600]	@ (80150b4 <HAL_RCC_ClockConfig+0x270>)
 8014e5a:	681b      	ldr	r3, [r3, #0]
 8014e5c:	2201      	movs	r2, #1
 8014e5e:	4013      	ands	r3, r2
 8014e60:	683a      	ldr	r2, [r7, #0]
 8014e62:	429a      	cmp	r2, r3
 8014e64:	d91e      	bls.n	8014ea4 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8014e66:	4b93      	ldr	r3, [pc, #588]	@ (80150b4 <HAL_RCC_ClockConfig+0x270>)
 8014e68:	681b      	ldr	r3, [r3, #0]
 8014e6a:	2201      	movs	r2, #1
 8014e6c:	4393      	bics	r3, r2
 8014e6e:	0019      	movs	r1, r3
 8014e70:	4b90      	ldr	r3, [pc, #576]	@ (80150b4 <HAL_RCC_ClockConfig+0x270>)
 8014e72:	683a      	ldr	r2, [r7, #0]
 8014e74:	430a      	orrs	r2, r1
 8014e76:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8014e78:	f7f9 faf6 	bl	800e468 <HAL_GetTick>
 8014e7c:	0003      	movs	r3, r0
 8014e7e:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8014e80:	e009      	b.n	8014e96 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8014e82:	f7f9 faf1 	bl	800e468 <HAL_GetTick>
 8014e86:	0002      	movs	r2, r0
 8014e88:	68fb      	ldr	r3, [r7, #12]
 8014e8a:	1ad3      	subs	r3, r2, r3
 8014e8c:	4a8a      	ldr	r2, [pc, #552]	@ (80150b8 <HAL_RCC_ClockConfig+0x274>)
 8014e8e:	4293      	cmp	r3, r2
 8014e90:	d901      	bls.n	8014e96 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8014e92:	2303      	movs	r3, #3
 8014e94:	e109      	b.n	80150aa <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8014e96:	4b87      	ldr	r3, [pc, #540]	@ (80150b4 <HAL_RCC_ClockConfig+0x270>)
 8014e98:	681b      	ldr	r3, [r3, #0]
 8014e9a:	2201      	movs	r2, #1
 8014e9c:	4013      	ands	r3, r2
 8014e9e:	683a      	ldr	r2, [r7, #0]
 8014ea0:	429a      	cmp	r2, r3
 8014ea2:	d1ee      	bne.n	8014e82 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8014ea4:	687b      	ldr	r3, [r7, #4]
 8014ea6:	681b      	ldr	r3, [r3, #0]
 8014ea8:	2202      	movs	r2, #2
 8014eaa:	4013      	ands	r3, r2
 8014eac:	d009      	beq.n	8014ec2 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8014eae:	4b83      	ldr	r3, [pc, #524]	@ (80150bc <HAL_RCC_ClockConfig+0x278>)
 8014eb0:	68db      	ldr	r3, [r3, #12]
 8014eb2:	22f0      	movs	r2, #240	@ 0xf0
 8014eb4:	4393      	bics	r3, r2
 8014eb6:	0019      	movs	r1, r3
 8014eb8:	687b      	ldr	r3, [r7, #4]
 8014eba:	689a      	ldr	r2, [r3, #8]
 8014ebc:	4b7f      	ldr	r3, [pc, #508]	@ (80150bc <HAL_RCC_ClockConfig+0x278>)
 8014ebe:	430a      	orrs	r2, r1
 8014ec0:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8014ec2:	687b      	ldr	r3, [r7, #4]
 8014ec4:	681b      	ldr	r3, [r3, #0]
 8014ec6:	2201      	movs	r2, #1
 8014ec8:	4013      	ands	r3, r2
 8014eca:	d100      	bne.n	8014ece <HAL_RCC_ClockConfig+0x8a>
 8014ecc:	e089      	b.n	8014fe2 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8014ece:	687b      	ldr	r3, [r7, #4]
 8014ed0:	685b      	ldr	r3, [r3, #4]
 8014ed2:	2b02      	cmp	r3, #2
 8014ed4:	d107      	bne.n	8014ee6 <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8014ed6:	4b79      	ldr	r3, [pc, #484]	@ (80150bc <HAL_RCC_ClockConfig+0x278>)
 8014ed8:	681a      	ldr	r2, [r3, #0]
 8014eda:	2380      	movs	r3, #128	@ 0x80
 8014edc:	029b      	lsls	r3, r3, #10
 8014ede:	4013      	ands	r3, r2
 8014ee0:	d120      	bne.n	8014f24 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8014ee2:	2301      	movs	r3, #1
 8014ee4:	e0e1      	b.n	80150aa <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8014ee6:	687b      	ldr	r3, [r7, #4]
 8014ee8:	685b      	ldr	r3, [r3, #4]
 8014eea:	2b03      	cmp	r3, #3
 8014eec:	d107      	bne.n	8014efe <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8014eee:	4b73      	ldr	r3, [pc, #460]	@ (80150bc <HAL_RCC_ClockConfig+0x278>)
 8014ef0:	681a      	ldr	r2, [r3, #0]
 8014ef2:	2380      	movs	r3, #128	@ 0x80
 8014ef4:	049b      	lsls	r3, r3, #18
 8014ef6:	4013      	ands	r3, r2
 8014ef8:	d114      	bne.n	8014f24 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8014efa:	2301      	movs	r3, #1
 8014efc:	e0d5      	b.n	80150aa <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8014efe:	687b      	ldr	r3, [r7, #4]
 8014f00:	685b      	ldr	r3, [r3, #4]
 8014f02:	2b01      	cmp	r3, #1
 8014f04:	d106      	bne.n	8014f14 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8014f06:	4b6d      	ldr	r3, [pc, #436]	@ (80150bc <HAL_RCC_ClockConfig+0x278>)
 8014f08:	681b      	ldr	r3, [r3, #0]
 8014f0a:	2204      	movs	r2, #4
 8014f0c:	4013      	ands	r3, r2
 8014f0e:	d109      	bne.n	8014f24 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8014f10:	2301      	movs	r3, #1
 8014f12:	e0ca      	b.n	80150aa <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8014f14:	4b69      	ldr	r3, [pc, #420]	@ (80150bc <HAL_RCC_ClockConfig+0x278>)
 8014f16:	681a      	ldr	r2, [r3, #0]
 8014f18:	2380      	movs	r3, #128	@ 0x80
 8014f1a:	009b      	lsls	r3, r3, #2
 8014f1c:	4013      	ands	r3, r2
 8014f1e:	d101      	bne.n	8014f24 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8014f20:	2301      	movs	r3, #1
 8014f22:	e0c2      	b.n	80150aa <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8014f24:	4b65      	ldr	r3, [pc, #404]	@ (80150bc <HAL_RCC_ClockConfig+0x278>)
 8014f26:	68db      	ldr	r3, [r3, #12]
 8014f28:	2203      	movs	r2, #3
 8014f2a:	4393      	bics	r3, r2
 8014f2c:	0019      	movs	r1, r3
 8014f2e:	687b      	ldr	r3, [r7, #4]
 8014f30:	685a      	ldr	r2, [r3, #4]
 8014f32:	4b62      	ldr	r3, [pc, #392]	@ (80150bc <HAL_RCC_ClockConfig+0x278>)
 8014f34:	430a      	orrs	r2, r1
 8014f36:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8014f38:	f7f9 fa96 	bl	800e468 <HAL_GetTick>
 8014f3c:	0003      	movs	r3, r0
 8014f3e:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8014f40:	687b      	ldr	r3, [r7, #4]
 8014f42:	685b      	ldr	r3, [r3, #4]
 8014f44:	2b02      	cmp	r3, #2
 8014f46:	d111      	bne.n	8014f6c <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8014f48:	e009      	b.n	8014f5e <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8014f4a:	f7f9 fa8d 	bl	800e468 <HAL_GetTick>
 8014f4e:	0002      	movs	r2, r0
 8014f50:	68fb      	ldr	r3, [r7, #12]
 8014f52:	1ad3      	subs	r3, r2, r3
 8014f54:	4a58      	ldr	r2, [pc, #352]	@ (80150b8 <HAL_RCC_ClockConfig+0x274>)
 8014f56:	4293      	cmp	r3, r2
 8014f58:	d901      	bls.n	8014f5e <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 8014f5a:	2303      	movs	r3, #3
 8014f5c:	e0a5      	b.n	80150aa <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8014f5e:	4b57      	ldr	r3, [pc, #348]	@ (80150bc <HAL_RCC_ClockConfig+0x278>)
 8014f60:	68db      	ldr	r3, [r3, #12]
 8014f62:	220c      	movs	r2, #12
 8014f64:	4013      	ands	r3, r2
 8014f66:	2b08      	cmp	r3, #8
 8014f68:	d1ef      	bne.n	8014f4a <HAL_RCC_ClockConfig+0x106>
 8014f6a:	e03a      	b.n	8014fe2 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8014f6c:	687b      	ldr	r3, [r7, #4]
 8014f6e:	685b      	ldr	r3, [r3, #4]
 8014f70:	2b03      	cmp	r3, #3
 8014f72:	d111      	bne.n	8014f98 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8014f74:	e009      	b.n	8014f8a <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8014f76:	f7f9 fa77 	bl	800e468 <HAL_GetTick>
 8014f7a:	0002      	movs	r2, r0
 8014f7c:	68fb      	ldr	r3, [r7, #12]
 8014f7e:	1ad3      	subs	r3, r2, r3
 8014f80:	4a4d      	ldr	r2, [pc, #308]	@ (80150b8 <HAL_RCC_ClockConfig+0x274>)
 8014f82:	4293      	cmp	r3, r2
 8014f84:	d901      	bls.n	8014f8a <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8014f86:	2303      	movs	r3, #3
 8014f88:	e08f      	b.n	80150aa <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8014f8a:	4b4c      	ldr	r3, [pc, #304]	@ (80150bc <HAL_RCC_ClockConfig+0x278>)
 8014f8c:	68db      	ldr	r3, [r3, #12]
 8014f8e:	220c      	movs	r2, #12
 8014f90:	4013      	ands	r3, r2
 8014f92:	2b0c      	cmp	r3, #12
 8014f94:	d1ef      	bne.n	8014f76 <HAL_RCC_ClockConfig+0x132>
 8014f96:	e024      	b.n	8014fe2 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8014f98:	687b      	ldr	r3, [r7, #4]
 8014f9a:	685b      	ldr	r3, [r3, #4]
 8014f9c:	2b01      	cmp	r3, #1
 8014f9e:	d11b      	bne.n	8014fd8 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8014fa0:	e009      	b.n	8014fb6 <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8014fa2:	f7f9 fa61 	bl	800e468 <HAL_GetTick>
 8014fa6:	0002      	movs	r2, r0
 8014fa8:	68fb      	ldr	r3, [r7, #12]
 8014faa:	1ad3      	subs	r3, r2, r3
 8014fac:	4a42      	ldr	r2, [pc, #264]	@ (80150b8 <HAL_RCC_ClockConfig+0x274>)
 8014fae:	4293      	cmp	r3, r2
 8014fb0:	d901      	bls.n	8014fb6 <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8014fb2:	2303      	movs	r3, #3
 8014fb4:	e079      	b.n	80150aa <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8014fb6:	4b41      	ldr	r3, [pc, #260]	@ (80150bc <HAL_RCC_ClockConfig+0x278>)
 8014fb8:	68db      	ldr	r3, [r3, #12]
 8014fba:	220c      	movs	r2, #12
 8014fbc:	4013      	ands	r3, r2
 8014fbe:	2b04      	cmp	r3, #4
 8014fc0:	d1ef      	bne.n	8014fa2 <HAL_RCC_ClockConfig+0x15e>
 8014fc2:	e00e      	b.n	8014fe2 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8014fc4:	f7f9 fa50 	bl	800e468 <HAL_GetTick>
 8014fc8:	0002      	movs	r2, r0
 8014fca:	68fb      	ldr	r3, [r7, #12]
 8014fcc:	1ad3      	subs	r3, r2, r3
 8014fce:	4a3a      	ldr	r2, [pc, #232]	@ (80150b8 <HAL_RCC_ClockConfig+0x274>)
 8014fd0:	4293      	cmp	r3, r2
 8014fd2:	d901      	bls.n	8014fd8 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8014fd4:	2303      	movs	r3, #3
 8014fd6:	e068      	b.n	80150aa <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8014fd8:	4b38      	ldr	r3, [pc, #224]	@ (80150bc <HAL_RCC_ClockConfig+0x278>)
 8014fda:	68db      	ldr	r3, [r3, #12]
 8014fdc:	220c      	movs	r2, #12
 8014fde:	4013      	ands	r3, r2
 8014fe0:	d1f0      	bne.n	8014fc4 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8014fe2:	4b34      	ldr	r3, [pc, #208]	@ (80150b4 <HAL_RCC_ClockConfig+0x270>)
 8014fe4:	681b      	ldr	r3, [r3, #0]
 8014fe6:	2201      	movs	r2, #1
 8014fe8:	4013      	ands	r3, r2
 8014fea:	683a      	ldr	r2, [r7, #0]
 8014fec:	429a      	cmp	r2, r3
 8014fee:	d21e      	bcs.n	801502e <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8014ff0:	4b30      	ldr	r3, [pc, #192]	@ (80150b4 <HAL_RCC_ClockConfig+0x270>)
 8014ff2:	681b      	ldr	r3, [r3, #0]
 8014ff4:	2201      	movs	r2, #1
 8014ff6:	4393      	bics	r3, r2
 8014ff8:	0019      	movs	r1, r3
 8014ffa:	4b2e      	ldr	r3, [pc, #184]	@ (80150b4 <HAL_RCC_ClockConfig+0x270>)
 8014ffc:	683a      	ldr	r2, [r7, #0]
 8014ffe:	430a      	orrs	r2, r1
 8015000:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8015002:	f7f9 fa31 	bl	800e468 <HAL_GetTick>
 8015006:	0003      	movs	r3, r0
 8015008:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 801500a:	e009      	b.n	8015020 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 801500c:	f7f9 fa2c 	bl	800e468 <HAL_GetTick>
 8015010:	0002      	movs	r2, r0
 8015012:	68fb      	ldr	r3, [r7, #12]
 8015014:	1ad3      	subs	r3, r2, r3
 8015016:	4a28      	ldr	r2, [pc, #160]	@ (80150b8 <HAL_RCC_ClockConfig+0x274>)
 8015018:	4293      	cmp	r3, r2
 801501a:	d901      	bls.n	8015020 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 801501c:	2303      	movs	r3, #3
 801501e:	e044      	b.n	80150aa <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8015020:	4b24      	ldr	r3, [pc, #144]	@ (80150b4 <HAL_RCC_ClockConfig+0x270>)
 8015022:	681b      	ldr	r3, [r3, #0]
 8015024:	2201      	movs	r2, #1
 8015026:	4013      	ands	r3, r2
 8015028:	683a      	ldr	r2, [r7, #0]
 801502a:	429a      	cmp	r2, r3
 801502c:	d1ee      	bne.n	801500c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 801502e:	687b      	ldr	r3, [r7, #4]
 8015030:	681b      	ldr	r3, [r3, #0]
 8015032:	2204      	movs	r2, #4
 8015034:	4013      	ands	r3, r2
 8015036:	d009      	beq.n	801504c <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8015038:	4b20      	ldr	r3, [pc, #128]	@ (80150bc <HAL_RCC_ClockConfig+0x278>)
 801503a:	68db      	ldr	r3, [r3, #12]
 801503c:	4a20      	ldr	r2, [pc, #128]	@ (80150c0 <HAL_RCC_ClockConfig+0x27c>)
 801503e:	4013      	ands	r3, r2
 8015040:	0019      	movs	r1, r3
 8015042:	687b      	ldr	r3, [r7, #4]
 8015044:	68da      	ldr	r2, [r3, #12]
 8015046:	4b1d      	ldr	r3, [pc, #116]	@ (80150bc <HAL_RCC_ClockConfig+0x278>)
 8015048:	430a      	orrs	r2, r1
 801504a:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 801504c:	687b      	ldr	r3, [r7, #4]
 801504e:	681b      	ldr	r3, [r3, #0]
 8015050:	2208      	movs	r2, #8
 8015052:	4013      	ands	r3, r2
 8015054:	d00a      	beq.n	801506c <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8015056:	4b19      	ldr	r3, [pc, #100]	@ (80150bc <HAL_RCC_ClockConfig+0x278>)
 8015058:	68db      	ldr	r3, [r3, #12]
 801505a:	4a1a      	ldr	r2, [pc, #104]	@ (80150c4 <HAL_RCC_ClockConfig+0x280>)
 801505c:	4013      	ands	r3, r2
 801505e:	0019      	movs	r1, r3
 8015060:	687b      	ldr	r3, [r7, #4]
 8015062:	691b      	ldr	r3, [r3, #16]
 8015064:	00da      	lsls	r2, r3, #3
 8015066:	4b15      	ldr	r3, [pc, #84]	@ (80150bc <HAL_RCC_ClockConfig+0x278>)
 8015068:	430a      	orrs	r2, r1
 801506a:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 801506c:	f000 f832 	bl	80150d4 <HAL_RCC_GetSysClockFreq>
 8015070:	0001      	movs	r1, r0
 8015072:	4b12      	ldr	r3, [pc, #72]	@ (80150bc <HAL_RCC_ClockConfig+0x278>)
 8015074:	68db      	ldr	r3, [r3, #12]
 8015076:	091b      	lsrs	r3, r3, #4
 8015078:	220f      	movs	r2, #15
 801507a:	4013      	ands	r3, r2
 801507c:	4a12      	ldr	r2, [pc, #72]	@ (80150c8 <HAL_RCC_ClockConfig+0x284>)
 801507e:	5cd3      	ldrb	r3, [r2, r3]
 8015080:	000a      	movs	r2, r1
 8015082:	40da      	lsrs	r2, r3
 8015084:	4b11      	ldr	r3, [pc, #68]	@ (80150cc <HAL_RCC_ClockConfig+0x288>)
 8015086:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8015088:	4b11      	ldr	r3, [pc, #68]	@ (80150d0 <HAL_RCC_ClockConfig+0x28c>)
 801508a:	681b      	ldr	r3, [r3, #0]
 801508c:	250b      	movs	r5, #11
 801508e:	197c      	adds	r4, r7, r5
 8015090:	0018      	movs	r0, r3
 8015092:	f7f9 f9a3 	bl	800e3dc <HAL_InitTick>
 8015096:	0003      	movs	r3, r0
 8015098:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 801509a:	197b      	adds	r3, r7, r5
 801509c:	781b      	ldrb	r3, [r3, #0]
 801509e:	2b00      	cmp	r3, #0
 80150a0:	d002      	beq.n	80150a8 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 80150a2:	197b      	adds	r3, r7, r5
 80150a4:	781b      	ldrb	r3, [r3, #0]
 80150a6:	e000      	b.n	80150aa <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 80150a8:	2300      	movs	r3, #0
}
 80150aa:	0018      	movs	r0, r3
 80150ac:	46bd      	mov	sp, r7
 80150ae:	b004      	add	sp, #16
 80150b0:	bdb0      	pop	{r4, r5, r7, pc}
 80150b2:	46c0      	nop			@ (mov r8, r8)
 80150b4:	40022000 	.word	0x40022000
 80150b8:	00001388 	.word	0x00001388
 80150bc:	40021000 	.word	0x40021000
 80150c0:	fffff8ff 	.word	0xfffff8ff
 80150c4:	ffffc7ff 	.word	0xffffc7ff
 80150c8:	08024a44 	.word	0x08024a44
 80150cc:	200000cc 	.word	0x200000cc
 80150d0:	200000dc 	.word	0x200000dc

080150d4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80150d4:	b5b0      	push	{r4, r5, r7, lr}
 80150d6:	b08e      	sub	sp, #56	@ 0x38
 80150d8:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 80150da:	4b4c      	ldr	r3, [pc, #304]	@ (801520c <HAL_RCC_GetSysClockFreq+0x138>)
 80150dc:	68db      	ldr	r3, [r3, #12]
 80150de:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80150e0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80150e2:	230c      	movs	r3, #12
 80150e4:	4013      	ands	r3, r2
 80150e6:	2b0c      	cmp	r3, #12
 80150e8:	d014      	beq.n	8015114 <HAL_RCC_GetSysClockFreq+0x40>
 80150ea:	d900      	bls.n	80150ee <HAL_RCC_GetSysClockFreq+0x1a>
 80150ec:	e07b      	b.n	80151e6 <HAL_RCC_GetSysClockFreq+0x112>
 80150ee:	2b04      	cmp	r3, #4
 80150f0:	d002      	beq.n	80150f8 <HAL_RCC_GetSysClockFreq+0x24>
 80150f2:	2b08      	cmp	r3, #8
 80150f4:	d00b      	beq.n	801510e <HAL_RCC_GetSysClockFreq+0x3a>
 80150f6:	e076      	b.n	80151e6 <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80150f8:	4b44      	ldr	r3, [pc, #272]	@ (801520c <HAL_RCC_GetSysClockFreq+0x138>)
 80150fa:	681b      	ldr	r3, [r3, #0]
 80150fc:	2210      	movs	r2, #16
 80150fe:	4013      	ands	r3, r2
 8015100:	d002      	beq.n	8015108 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8015102:	4b43      	ldr	r3, [pc, #268]	@ (8015210 <HAL_RCC_GetSysClockFreq+0x13c>)
 8015104:	633b      	str	r3, [r7, #48]	@ 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8015106:	e07c      	b.n	8015202 <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8015108:	4b42      	ldr	r3, [pc, #264]	@ (8015214 <HAL_RCC_GetSysClockFreq+0x140>)
 801510a:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 801510c:	e079      	b.n	8015202 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 801510e:	4b42      	ldr	r3, [pc, #264]	@ (8015218 <HAL_RCC_GetSysClockFreq+0x144>)
 8015110:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8015112:	e076      	b.n	8015202 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8015114:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015116:	0c9a      	lsrs	r2, r3, #18
 8015118:	230f      	movs	r3, #15
 801511a:	401a      	ands	r2, r3
 801511c:	4b3f      	ldr	r3, [pc, #252]	@ (801521c <HAL_RCC_GetSysClockFreq+0x148>)
 801511e:	5c9b      	ldrb	r3, [r3, r2]
 8015120:	62bb      	str	r3, [r7, #40]	@ 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8015122:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015124:	0d9a      	lsrs	r2, r3, #22
 8015126:	2303      	movs	r3, #3
 8015128:	4013      	ands	r3, r2
 801512a:	3301      	adds	r3, #1
 801512c:	627b      	str	r3, [r7, #36]	@ 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 801512e:	4b37      	ldr	r3, [pc, #220]	@ (801520c <HAL_RCC_GetSysClockFreq+0x138>)
 8015130:	68da      	ldr	r2, [r3, #12]
 8015132:	2380      	movs	r3, #128	@ 0x80
 8015134:	025b      	lsls	r3, r3, #9
 8015136:	4013      	ands	r3, r2
 8015138:	d01a      	beq.n	8015170 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 801513a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801513c:	61bb      	str	r3, [r7, #24]
 801513e:	2300      	movs	r3, #0
 8015140:	61fb      	str	r3, [r7, #28]
 8015142:	4a35      	ldr	r2, [pc, #212]	@ (8015218 <HAL_RCC_GetSysClockFreq+0x144>)
 8015144:	2300      	movs	r3, #0
 8015146:	69b8      	ldr	r0, [r7, #24]
 8015148:	69f9      	ldr	r1, [r7, #28]
 801514a:	f7eb fa39 	bl	80005c0 <__aeabi_lmul>
 801514e:	0002      	movs	r2, r0
 8015150:	000b      	movs	r3, r1
 8015152:	0010      	movs	r0, r2
 8015154:	0019      	movs	r1, r3
 8015156:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015158:	613b      	str	r3, [r7, #16]
 801515a:	2300      	movs	r3, #0
 801515c:	617b      	str	r3, [r7, #20]
 801515e:	693a      	ldr	r2, [r7, #16]
 8015160:	697b      	ldr	r3, [r7, #20]
 8015162:	f7eb fa0d 	bl	8000580 <__aeabi_uldivmod>
 8015166:	0002      	movs	r2, r0
 8015168:	000b      	movs	r3, r1
 801516a:	0013      	movs	r3, r2
 801516c:	637b      	str	r3, [r7, #52]	@ 0x34
 801516e:	e037      	b.n	80151e0 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8015170:	4b26      	ldr	r3, [pc, #152]	@ (801520c <HAL_RCC_GetSysClockFreq+0x138>)
 8015172:	681b      	ldr	r3, [r3, #0]
 8015174:	2210      	movs	r2, #16
 8015176:	4013      	ands	r3, r2
 8015178:	d01a      	beq.n	80151b0 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 801517a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801517c:	60bb      	str	r3, [r7, #8]
 801517e:	2300      	movs	r3, #0
 8015180:	60fb      	str	r3, [r7, #12]
 8015182:	4a23      	ldr	r2, [pc, #140]	@ (8015210 <HAL_RCC_GetSysClockFreq+0x13c>)
 8015184:	2300      	movs	r3, #0
 8015186:	68b8      	ldr	r0, [r7, #8]
 8015188:	68f9      	ldr	r1, [r7, #12]
 801518a:	f7eb fa19 	bl	80005c0 <__aeabi_lmul>
 801518e:	0002      	movs	r2, r0
 8015190:	000b      	movs	r3, r1
 8015192:	0010      	movs	r0, r2
 8015194:	0019      	movs	r1, r3
 8015196:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015198:	603b      	str	r3, [r7, #0]
 801519a:	2300      	movs	r3, #0
 801519c:	607b      	str	r3, [r7, #4]
 801519e:	683a      	ldr	r2, [r7, #0]
 80151a0:	687b      	ldr	r3, [r7, #4]
 80151a2:	f7eb f9ed 	bl	8000580 <__aeabi_uldivmod>
 80151a6:	0002      	movs	r2, r0
 80151a8:	000b      	movs	r3, r1
 80151aa:	0013      	movs	r3, r2
 80151ac:	637b      	str	r3, [r7, #52]	@ 0x34
 80151ae:	e017      	b.n	80151e0 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80151b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80151b2:	0018      	movs	r0, r3
 80151b4:	2300      	movs	r3, #0
 80151b6:	0019      	movs	r1, r3
 80151b8:	4a16      	ldr	r2, [pc, #88]	@ (8015214 <HAL_RCC_GetSysClockFreq+0x140>)
 80151ba:	2300      	movs	r3, #0
 80151bc:	f7eb fa00 	bl	80005c0 <__aeabi_lmul>
 80151c0:	0002      	movs	r2, r0
 80151c2:	000b      	movs	r3, r1
 80151c4:	0010      	movs	r0, r2
 80151c6:	0019      	movs	r1, r3
 80151c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80151ca:	001c      	movs	r4, r3
 80151cc:	2300      	movs	r3, #0
 80151ce:	001d      	movs	r5, r3
 80151d0:	0022      	movs	r2, r4
 80151d2:	002b      	movs	r3, r5
 80151d4:	f7eb f9d4 	bl	8000580 <__aeabi_uldivmod>
 80151d8:	0002      	movs	r2, r0
 80151da:	000b      	movs	r3, r1
 80151dc:	0013      	movs	r3, r2
 80151de:	637b      	str	r3, [r7, #52]	@ 0x34
        }
      }
      sysclockfreq = pllvco;
 80151e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80151e2:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 80151e4:	e00d      	b.n	8015202 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 80151e6:	4b09      	ldr	r3, [pc, #36]	@ (801520c <HAL_RCC_GetSysClockFreq+0x138>)
 80151e8:	685b      	ldr	r3, [r3, #4]
 80151ea:	0b5b      	lsrs	r3, r3, #13
 80151ec:	2207      	movs	r2, #7
 80151ee:	4013      	ands	r3, r2
 80151f0:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 80151f2:	6a3b      	ldr	r3, [r7, #32]
 80151f4:	3301      	adds	r3, #1
 80151f6:	2280      	movs	r2, #128	@ 0x80
 80151f8:	0212      	lsls	r2, r2, #8
 80151fa:	409a      	lsls	r2, r3
 80151fc:	0013      	movs	r3, r2
 80151fe:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8015200:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 8015202:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
}
 8015204:	0018      	movs	r0, r3
 8015206:	46bd      	mov	sp, r7
 8015208:	b00e      	add	sp, #56	@ 0x38
 801520a:	bdb0      	pop	{r4, r5, r7, pc}
 801520c:	40021000 	.word	0x40021000
 8015210:	003d0900 	.word	0x003d0900
 8015214:	00f42400 	.word	0x00f42400
 8015218:	007a1200 	.word	0x007a1200
 801521c:	08024a5c 	.word	0x08024a5c

08015220 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8015220:	b580      	push	{r7, lr}
 8015222:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8015224:	4b02      	ldr	r3, [pc, #8]	@ (8015230 <HAL_RCC_GetHCLKFreq+0x10>)
 8015226:	681b      	ldr	r3, [r3, #0]
}
 8015228:	0018      	movs	r0, r3
 801522a:	46bd      	mov	sp, r7
 801522c:	bd80      	pop	{r7, pc}
 801522e:	46c0      	nop			@ (mov r8, r8)
 8015230:	200000cc 	.word	0x200000cc

08015234 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8015234:	b580      	push	{r7, lr}
 8015236:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8015238:	f7ff fff2 	bl	8015220 <HAL_RCC_GetHCLKFreq>
 801523c:	0001      	movs	r1, r0
 801523e:	4b06      	ldr	r3, [pc, #24]	@ (8015258 <HAL_RCC_GetPCLK1Freq+0x24>)
 8015240:	68db      	ldr	r3, [r3, #12]
 8015242:	0a1b      	lsrs	r3, r3, #8
 8015244:	2207      	movs	r2, #7
 8015246:	4013      	ands	r3, r2
 8015248:	4a04      	ldr	r2, [pc, #16]	@ (801525c <HAL_RCC_GetPCLK1Freq+0x28>)
 801524a:	5cd3      	ldrb	r3, [r2, r3]
 801524c:	40d9      	lsrs	r1, r3
 801524e:	000b      	movs	r3, r1
}
 8015250:	0018      	movs	r0, r3
 8015252:	46bd      	mov	sp, r7
 8015254:	bd80      	pop	{r7, pc}
 8015256:	46c0      	nop			@ (mov r8, r8)
 8015258:	40021000 	.word	0x40021000
 801525c:	08024a54 	.word	0x08024a54

08015260 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8015260:	b580      	push	{r7, lr}
 8015262:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8015264:	f7ff ffdc 	bl	8015220 <HAL_RCC_GetHCLKFreq>
 8015268:	0001      	movs	r1, r0
 801526a:	4b06      	ldr	r3, [pc, #24]	@ (8015284 <HAL_RCC_GetPCLK2Freq+0x24>)
 801526c:	68db      	ldr	r3, [r3, #12]
 801526e:	0adb      	lsrs	r3, r3, #11
 8015270:	2207      	movs	r2, #7
 8015272:	4013      	ands	r3, r2
 8015274:	4a04      	ldr	r2, [pc, #16]	@ (8015288 <HAL_RCC_GetPCLK2Freq+0x28>)
 8015276:	5cd3      	ldrb	r3, [r2, r3]
 8015278:	40d9      	lsrs	r1, r3
 801527a:	000b      	movs	r3, r1
}
 801527c:	0018      	movs	r0, r3
 801527e:	46bd      	mov	sp, r7
 8015280:	bd80      	pop	{r7, pc}
 8015282:	46c0      	nop			@ (mov r8, r8)
 8015284:	40021000 	.word	0x40021000
 8015288:	08024a54 	.word	0x08024a54

0801528c <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 801528c:	b580      	push	{r7, lr}
 801528e:	b086      	sub	sp, #24
 8015290:	af00      	add	r7, sp, #0
 8015292:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8015294:	2017      	movs	r0, #23
 8015296:	183b      	adds	r3, r7, r0
 8015298:	2200      	movs	r2, #0
 801529a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 801529c:	687b      	ldr	r3, [r7, #4]
 801529e:	681b      	ldr	r3, [r3, #0]
 80152a0:	2220      	movs	r2, #32
 80152a2:	4013      	ands	r3, r2
 80152a4:	d100      	bne.n	80152a8 <HAL_RCCEx_PeriphCLKConfig+0x1c>
 80152a6:	e0c7      	b.n	8015438 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80152a8:	4b9b      	ldr	r3, [pc, #620]	@ (8015518 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80152aa:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80152ac:	2380      	movs	r3, #128	@ 0x80
 80152ae:	055b      	lsls	r3, r3, #21
 80152b0:	4013      	ands	r3, r2
 80152b2:	d109      	bne.n	80152c8 <HAL_RCCEx_PeriphCLKConfig+0x3c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80152b4:	4b98      	ldr	r3, [pc, #608]	@ (8015518 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80152b6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80152b8:	4b97      	ldr	r3, [pc, #604]	@ (8015518 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80152ba:	2180      	movs	r1, #128	@ 0x80
 80152bc:	0549      	lsls	r1, r1, #21
 80152be:	430a      	orrs	r2, r1
 80152c0:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 80152c2:	183b      	adds	r3, r7, r0
 80152c4:	2201      	movs	r2, #1
 80152c6:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80152c8:	4b94      	ldr	r3, [pc, #592]	@ (801551c <HAL_RCCEx_PeriphCLKConfig+0x290>)
 80152ca:	681a      	ldr	r2, [r3, #0]
 80152cc:	2380      	movs	r3, #128	@ 0x80
 80152ce:	005b      	lsls	r3, r3, #1
 80152d0:	4013      	ands	r3, r2
 80152d2:	d11a      	bne.n	801530a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80152d4:	4b91      	ldr	r3, [pc, #580]	@ (801551c <HAL_RCCEx_PeriphCLKConfig+0x290>)
 80152d6:	681a      	ldr	r2, [r3, #0]
 80152d8:	4b90      	ldr	r3, [pc, #576]	@ (801551c <HAL_RCCEx_PeriphCLKConfig+0x290>)
 80152da:	2180      	movs	r1, #128	@ 0x80
 80152dc:	0049      	lsls	r1, r1, #1
 80152de:	430a      	orrs	r2, r1
 80152e0:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80152e2:	f7f9 f8c1 	bl	800e468 <HAL_GetTick>
 80152e6:	0003      	movs	r3, r0
 80152e8:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80152ea:	e008      	b.n	80152fe <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80152ec:	f7f9 f8bc 	bl	800e468 <HAL_GetTick>
 80152f0:	0002      	movs	r2, r0
 80152f2:	693b      	ldr	r3, [r7, #16]
 80152f4:	1ad3      	subs	r3, r2, r3
 80152f6:	2b64      	cmp	r3, #100	@ 0x64
 80152f8:	d901      	bls.n	80152fe <HAL_RCCEx_PeriphCLKConfig+0x72>
        {
          return HAL_TIMEOUT;
 80152fa:	2303      	movs	r3, #3
 80152fc:	e107      	b.n	801550e <HAL_RCCEx_PeriphCLKConfig+0x282>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80152fe:	4b87      	ldr	r3, [pc, #540]	@ (801551c <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8015300:	681a      	ldr	r2, [r3, #0]
 8015302:	2380      	movs	r3, #128	@ 0x80
 8015304:	005b      	lsls	r3, r3, #1
 8015306:	4013      	ands	r3, r2
 8015308:	d0f0      	beq.n	80152ec <HAL_RCCEx_PeriphCLKConfig+0x60>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 801530a:	4b83      	ldr	r3, [pc, #524]	@ (8015518 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801530c:	681a      	ldr	r2, [r3, #0]
 801530e:	23c0      	movs	r3, #192	@ 0xc0
 8015310:	039b      	lsls	r3, r3, #14
 8015312:	4013      	ands	r3, r2
 8015314:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8015316:	687b      	ldr	r3, [r7, #4]
 8015318:	685a      	ldr	r2, [r3, #4]
 801531a:	23c0      	movs	r3, #192	@ 0xc0
 801531c:	039b      	lsls	r3, r3, #14
 801531e:	4013      	ands	r3, r2
 8015320:	68fa      	ldr	r2, [r7, #12]
 8015322:	429a      	cmp	r2, r3
 8015324:	d013      	beq.n	801534e <HAL_RCCEx_PeriphCLKConfig+0xc2>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8015326:	687b      	ldr	r3, [r7, #4]
 8015328:	685a      	ldr	r2, [r3, #4]
 801532a:	23c0      	movs	r3, #192	@ 0xc0
 801532c:	029b      	lsls	r3, r3, #10
 801532e:	401a      	ands	r2, r3
 8015330:	23c0      	movs	r3, #192	@ 0xc0
 8015332:	029b      	lsls	r3, r3, #10
 8015334:	429a      	cmp	r2, r3
 8015336:	d10a      	bne.n	801534e <HAL_RCCEx_PeriphCLKConfig+0xc2>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8015338:	4b77      	ldr	r3, [pc, #476]	@ (8015518 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801533a:	681a      	ldr	r2, [r3, #0]
 801533c:	2380      	movs	r3, #128	@ 0x80
 801533e:	029b      	lsls	r3, r3, #10
 8015340:	401a      	ands	r2, r3
 8015342:	2380      	movs	r3, #128	@ 0x80
 8015344:	029b      	lsls	r3, r3, #10
 8015346:	429a      	cmp	r2, r3
 8015348:	d101      	bne.n	801534e <HAL_RCCEx_PeriphCLKConfig+0xc2>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 801534a:	2301      	movs	r3, #1
 801534c:	e0df      	b.n	801550e <HAL_RCCEx_PeriphCLKConfig+0x282>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 801534e:	4b72      	ldr	r3, [pc, #456]	@ (8015518 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8015350:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8015352:	23c0      	movs	r3, #192	@ 0xc0
 8015354:	029b      	lsls	r3, r3, #10
 8015356:	4013      	ands	r3, r2
 8015358:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 801535a:	68fb      	ldr	r3, [r7, #12]
 801535c:	2b00      	cmp	r3, #0
 801535e:	d03b      	beq.n	80153d8 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8015360:	687b      	ldr	r3, [r7, #4]
 8015362:	685a      	ldr	r2, [r3, #4]
 8015364:	23c0      	movs	r3, #192	@ 0xc0
 8015366:	029b      	lsls	r3, r3, #10
 8015368:	4013      	ands	r3, r2
 801536a:	68fa      	ldr	r2, [r7, #12]
 801536c:	429a      	cmp	r2, r3
 801536e:	d033      	beq.n	80153d8 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8015370:	687b      	ldr	r3, [r7, #4]
 8015372:	681b      	ldr	r3, [r3, #0]
 8015374:	2220      	movs	r2, #32
 8015376:	4013      	ands	r3, r2
 8015378:	d02e      	beq.n	80153d8 <HAL_RCCEx_PeriphCLKConfig+0x14c>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 801537a:	4b67      	ldr	r3, [pc, #412]	@ (8015518 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801537c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801537e:	4a68      	ldr	r2, [pc, #416]	@ (8015520 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8015380:	4013      	ands	r3, r2
 8015382:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8015384:	4b64      	ldr	r3, [pc, #400]	@ (8015518 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8015386:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8015388:	4b63      	ldr	r3, [pc, #396]	@ (8015518 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801538a:	2180      	movs	r1, #128	@ 0x80
 801538c:	0309      	lsls	r1, r1, #12
 801538e:	430a      	orrs	r2, r1
 8015390:	651a      	str	r2, [r3, #80]	@ 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8015392:	4b61      	ldr	r3, [pc, #388]	@ (8015518 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8015394:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8015396:	4b60      	ldr	r3, [pc, #384]	@ (8015518 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8015398:	4962      	ldr	r1, [pc, #392]	@ (8015524 <HAL_RCCEx_PeriphCLKConfig+0x298>)
 801539a:	400a      	ands	r2, r1
 801539c:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 801539e:	4b5e      	ldr	r3, [pc, #376]	@ (8015518 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80153a0:	68fa      	ldr	r2, [r7, #12]
 80153a2:	651a      	str	r2, [r3, #80]	@ 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 80153a4:	68fa      	ldr	r2, [r7, #12]
 80153a6:	2380      	movs	r3, #128	@ 0x80
 80153a8:	005b      	lsls	r3, r3, #1
 80153aa:	4013      	ands	r3, r2
 80153ac:	d014      	beq.n	80153d8 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80153ae:	f7f9 f85b 	bl	800e468 <HAL_GetTick>
 80153b2:	0003      	movs	r3, r0
 80153b4:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80153b6:	e009      	b.n	80153cc <HAL_RCCEx_PeriphCLKConfig+0x140>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80153b8:	f7f9 f856 	bl	800e468 <HAL_GetTick>
 80153bc:	0002      	movs	r2, r0
 80153be:	693b      	ldr	r3, [r7, #16]
 80153c0:	1ad3      	subs	r3, r2, r3
 80153c2:	4a59      	ldr	r2, [pc, #356]	@ (8015528 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80153c4:	4293      	cmp	r3, r2
 80153c6:	d901      	bls.n	80153cc <HAL_RCCEx_PeriphCLKConfig+0x140>
          {
            return HAL_TIMEOUT;
 80153c8:	2303      	movs	r3, #3
 80153ca:	e0a0      	b.n	801550e <HAL_RCCEx_PeriphCLKConfig+0x282>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80153cc:	4b52      	ldr	r3, [pc, #328]	@ (8015518 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80153ce:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80153d0:	2380      	movs	r3, #128	@ 0x80
 80153d2:	009b      	lsls	r3, r3, #2
 80153d4:	4013      	ands	r3, r2
 80153d6:	d0ef      	beq.n	80153b8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80153d8:	687b      	ldr	r3, [r7, #4]
 80153da:	681b      	ldr	r3, [r3, #0]
 80153dc:	2220      	movs	r2, #32
 80153de:	4013      	ands	r3, r2
 80153e0:	d01f      	beq.n	8015422 <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80153e2:	687b      	ldr	r3, [r7, #4]
 80153e4:	685a      	ldr	r2, [r3, #4]
 80153e6:	23c0      	movs	r3, #192	@ 0xc0
 80153e8:	029b      	lsls	r3, r3, #10
 80153ea:	401a      	ands	r2, r3
 80153ec:	23c0      	movs	r3, #192	@ 0xc0
 80153ee:	029b      	lsls	r3, r3, #10
 80153f0:	429a      	cmp	r2, r3
 80153f2:	d10c      	bne.n	801540e <HAL_RCCEx_PeriphCLKConfig+0x182>
 80153f4:	4b48      	ldr	r3, [pc, #288]	@ (8015518 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80153f6:	681b      	ldr	r3, [r3, #0]
 80153f8:	4a4c      	ldr	r2, [pc, #304]	@ (801552c <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 80153fa:	4013      	ands	r3, r2
 80153fc:	0019      	movs	r1, r3
 80153fe:	687b      	ldr	r3, [r7, #4]
 8015400:	685a      	ldr	r2, [r3, #4]
 8015402:	23c0      	movs	r3, #192	@ 0xc0
 8015404:	039b      	lsls	r3, r3, #14
 8015406:	401a      	ands	r2, r3
 8015408:	4b43      	ldr	r3, [pc, #268]	@ (8015518 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801540a:	430a      	orrs	r2, r1
 801540c:	601a      	str	r2, [r3, #0]
 801540e:	4b42      	ldr	r3, [pc, #264]	@ (8015518 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8015410:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8015412:	687b      	ldr	r3, [r7, #4]
 8015414:	685a      	ldr	r2, [r3, #4]
 8015416:	23c0      	movs	r3, #192	@ 0xc0
 8015418:	029b      	lsls	r3, r3, #10
 801541a:	401a      	ands	r2, r3
 801541c:	4b3e      	ldr	r3, [pc, #248]	@ (8015518 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801541e:	430a      	orrs	r2, r1
 8015420:	651a      	str	r2, [r3, #80]	@ 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8015422:	2317      	movs	r3, #23
 8015424:	18fb      	adds	r3, r7, r3
 8015426:	781b      	ldrb	r3, [r3, #0]
 8015428:	2b01      	cmp	r3, #1
 801542a:	d105      	bne.n	8015438 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 801542c:	4b3a      	ldr	r3, [pc, #232]	@ (8015518 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801542e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8015430:	4b39      	ldr	r3, [pc, #228]	@ (8015518 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8015432:	493f      	ldr	r1, [pc, #252]	@ (8015530 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 8015434:	400a      	ands	r2, r1
 8015436:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8015438:	687b      	ldr	r3, [r7, #4]
 801543a:	681b      	ldr	r3, [r3, #0]
 801543c:	2201      	movs	r2, #1
 801543e:	4013      	ands	r3, r2
 8015440:	d009      	beq.n	8015456 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8015442:	4b35      	ldr	r3, [pc, #212]	@ (8015518 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8015444:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8015446:	2203      	movs	r2, #3
 8015448:	4393      	bics	r3, r2
 801544a:	0019      	movs	r1, r3
 801544c:	687b      	ldr	r3, [r7, #4]
 801544e:	689a      	ldr	r2, [r3, #8]
 8015450:	4b31      	ldr	r3, [pc, #196]	@ (8015518 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8015452:	430a      	orrs	r2, r1
 8015454:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8015456:	687b      	ldr	r3, [r7, #4]
 8015458:	681b      	ldr	r3, [r3, #0]
 801545a:	2202      	movs	r2, #2
 801545c:	4013      	ands	r3, r2
 801545e:	d009      	beq.n	8015474 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8015460:	4b2d      	ldr	r3, [pc, #180]	@ (8015518 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8015462:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8015464:	220c      	movs	r2, #12
 8015466:	4393      	bics	r3, r2
 8015468:	0019      	movs	r1, r3
 801546a:	687b      	ldr	r3, [r7, #4]
 801546c:	68da      	ldr	r2, [r3, #12]
 801546e:	4b2a      	ldr	r3, [pc, #168]	@ (8015518 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8015470:	430a      	orrs	r2, r1
 8015472:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8015474:	687b      	ldr	r3, [r7, #4]
 8015476:	681b      	ldr	r3, [r3, #0]
 8015478:	2204      	movs	r2, #4
 801547a:	4013      	ands	r3, r2
 801547c:	d009      	beq.n	8015492 <HAL_RCCEx_PeriphCLKConfig+0x206>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 801547e:	4b26      	ldr	r3, [pc, #152]	@ (8015518 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8015480:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8015482:	4a2c      	ldr	r2, [pc, #176]	@ (8015534 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 8015484:	4013      	ands	r3, r2
 8015486:	0019      	movs	r1, r3
 8015488:	687b      	ldr	r3, [r7, #4]
 801548a:	691a      	ldr	r2, [r3, #16]
 801548c:	4b22      	ldr	r3, [pc, #136]	@ (8015518 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801548e:	430a      	orrs	r2, r1
 8015490:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8015492:	687b      	ldr	r3, [r7, #4]
 8015494:	681b      	ldr	r3, [r3, #0]
 8015496:	2208      	movs	r2, #8
 8015498:	4013      	ands	r3, r2
 801549a:	d009      	beq.n	80154b0 <HAL_RCCEx_PeriphCLKConfig+0x224>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 801549c:	4b1e      	ldr	r3, [pc, #120]	@ (8015518 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801549e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80154a0:	4a25      	ldr	r2, [pc, #148]	@ (8015538 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 80154a2:	4013      	ands	r3, r2
 80154a4:	0019      	movs	r1, r3
 80154a6:	687b      	ldr	r3, [r7, #4]
 80154a8:	695a      	ldr	r2, [r3, #20]
 80154aa:	4b1b      	ldr	r3, [pc, #108]	@ (8015518 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80154ac:	430a      	orrs	r2, r1
 80154ae:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80154b0:	687b      	ldr	r3, [r7, #4]
 80154b2:	681a      	ldr	r2, [r3, #0]
 80154b4:	2380      	movs	r3, #128	@ 0x80
 80154b6:	005b      	lsls	r3, r3, #1
 80154b8:	4013      	ands	r3, r2
 80154ba:	d009      	beq.n	80154d0 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80154bc:	4b16      	ldr	r3, [pc, #88]	@ (8015518 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80154be:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80154c0:	4a17      	ldr	r2, [pc, #92]	@ (8015520 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 80154c2:	4013      	ands	r3, r2
 80154c4:	0019      	movs	r1, r3
 80154c6:	687b      	ldr	r3, [r7, #4]
 80154c8:	699a      	ldr	r2, [r3, #24]
 80154ca:	4b13      	ldr	r3, [pc, #76]	@ (8015518 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80154cc:	430a      	orrs	r2, r1
 80154ce:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80154d0:	687b      	ldr	r3, [r7, #4]
 80154d2:	681b      	ldr	r3, [r3, #0]
 80154d4:	2240      	movs	r2, #64	@ 0x40
 80154d6:	4013      	ands	r3, r2
 80154d8:	d009      	beq.n	80154ee <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80154da:	4b0f      	ldr	r3, [pc, #60]	@ (8015518 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80154dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80154de:	4a17      	ldr	r2, [pc, #92]	@ (801553c <HAL_RCCEx_PeriphCLKConfig+0x2b0>)
 80154e0:	4013      	ands	r3, r2
 80154e2:	0019      	movs	r1, r3
 80154e4:	687b      	ldr	r3, [r7, #4]
 80154e6:	6a1a      	ldr	r2, [r3, #32]
 80154e8:	4b0b      	ldr	r3, [pc, #44]	@ (8015518 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80154ea:	430a      	orrs	r2, r1
 80154ec:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80154ee:	687b      	ldr	r3, [r7, #4]
 80154f0:	681b      	ldr	r3, [r3, #0]
 80154f2:	2280      	movs	r2, #128	@ 0x80
 80154f4:	4013      	ands	r3, r2
 80154f6:	d009      	beq.n	801550c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 80154f8:	4b07      	ldr	r3, [pc, #28]	@ (8015518 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80154fa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80154fc:	4a10      	ldr	r2, [pc, #64]	@ (8015540 <HAL_RCCEx_PeriphCLKConfig+0x2b4>)
 80154fe:	4013      	ands	r3, r2
 8015500:	0019      	movs	r1, r3
 8015502:	687b      	ldr	r3, [r7, #4]
 8015504:	69da      	ldr	r2, [r3, #28]
 8015506:	4b04      	ldr	r3, [pc, #16]	@ (8015518 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8015508:	430a      	orrs	r2, r1
 801550a:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 801550c:	2300      	movs	r3, #0
}
 801550e:	0018      	movs	r0, r3
 8015510:	46bd      	mov	sp, r7
 8015512:	b006      	add	sp, #24
 8015514:	bd80      	pop	{r7, pc}
 8015516:	46c0      	nop			@ (mov r8, r8)
 8015518:	40021000 	.word	0x40021000
 801551c:	40007000 	.word	0x40007000
 8015520:	fffcffff 	.word	0xfffcffff
 8015524:	fff7ffff 	.word	0xfff7ffff
 8015528:	00001388 	.word	0x00001388
 801552c:	ffcfffff 	.word	0xffcfffff
 8015530:	efffffff 	.word	0xefffffff
 8015534:	fffff3ff 	.word	0xfffff3ff
 8015538:	ffffcfff 	.word	0xffffcfff
 801553c:	fbffffff 	.word	0xfbffffff
 8015540:	fff3ffff 	.word	0xfff3ffff

08015544 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8015544:	b5b0      	push	{r4, r5, r7, lr}
 8015546:	b084      	sub	sp, #16
 8015548:	af00      	add	r7, sp, #0
 801554a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 801554c:	230f      	movs	r3, #15
 801554e:	18fb      	adds	r3, r7, r3
 8015550:	2201      	movs	r2, #1
 8015552:	701a      	strb	r2, [r3, #0]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8015554:	687b      	ldr	r3, [r7, #4]
 8015556:	2b00      	cmp	r3, #0
 8015558:	d101      	bne.n	801555e <HAL_RTC_Init+0x1a>
  {
    return HAL_ERROR;
 801555a:	2301      	movs	r3, #1
 801555c:	e088      	b.n	8015670 <HAL_RTC_Init+0x12c>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 801555e:	687b      	ldr	r3, [r7, #4]
 8015560:	2221      	movs	r2, #33	@ 0x21
 8015562:	5c9b      	ldrb	r3, [r3, r2]
 8015564:	b2db      	uxtb	r3, r3
 8015566:	2b00      	cmp	r3, #0
 8015568:	d107      	bne.n	801557a <HAL_RTC_Init+0x36>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 801556a:	687b      	ldr	r3, [r7, #4]
 801556c:	2220      	movs	r2, #32
 801556e:	2100      	movs	r1, #0
 8015570:	5499      	strb	r1, [r3, r2]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8015572:	687b      	ldr	r3, [r7, #4]
 8015574:	0018      	movs	r0, r3
 8015576:	f7f3 fb83 	bl	8008c80 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 801557a:	687b      	ldr	r3, [r7, #4]
 801557c:	2221      	movs	r2, #33	@ 0x21
 801557e:	2102      	movs	r1, #2
 8015580:	5499      	strb	r1, [r3, r2]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8015582:	687b      	ldr	r3, [r7, #4]
 8015584:	681b      	ldr	r3, [r3, #0]
 8015586:	68db      	ldr	r3, [r3, #12]
 8015588:	2210      	movs	r2, #16
 801558a:	4013      	ands	r3, r2
 801558c:	2b10      	cmp	r3, #16
 801558e:	d05f      	beq.n	8015650 <HAL_RTC_Init+0x10c>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8015590:	687b      	ldr	r3, [r7, #4]
 8015592:	681b      	ldr	r3, [r3, #0]
 8015594:	22ca      	movs	r2, #202	@ 0xca
 8015596:	625a      	str	r2, [r3, #36]	@ 0x24
 8015598:	687b      	ldr	r3, [r7, #4]
 801559a:	681b      	ldr	r3, [r3, #0]
 801559c:	2253      	movs	r2, #83	@ 0x53
 801559e:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 80155a0:	250f      	movs	r5, #15
 80155a2:	197c      	adds	r4, r7, r5
 80155a4:	687b      	ldr	r3, [r7, #4]
 80155a6:	0018      	movs	r0, r3
 80155a8:	f000 fa7c 	bl	8015aa4 <RTC_EnterInitMode>
 80155ac:	0003      	movs	r3, r0
 80155ae:	7023      	strb	r3, [r4, #0]

    if (status == HAL_OK)
 80155b0:	0028      	movs	r0, r5
 80155b2:	183b      	adds	r3, r7, r0
 80155b4:	781b      	ldrb	r3, [r3, #0]
 80155b6:	2b00      	cmp	r3, #0
 80155b8:	d12c      	bne.n	8015614 <HAL_RTC_Init+0xd0>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80155ba:	687b      	ldr	r3, [r7, #4]
 80155bc:	681b      	ldr	r3, [r3, #0]
 80155be:	689a      	ldr	r2, [r3, #8]
 80155c0:	687b      	ldr	r3, [r7, #4]
 80155c2:	681b      	ldr	r3, [r3, #0]
 80155c4:	492c      	ldr	r1, [pc, #176]	@ (8015678 <HAL_RTC_Init+0x134>)
 80155c6:	400a      	ands	r2, r1
 80155c8:	609a      	str	r2, [r3, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80155ca:	687b      	ldr	r3, [r7, #4]
 80155cc:	681b      	ldr	r3, [r3, #0]
 80155ce:	6899      	ldr	r1, [r3, #8]
 80155d0:	687b      	ldr	r3, [r7, #4]
 80155d2:	685a      	ldr	r2, [r3, #4]
 80155d4:	687b      	ldr	r3, [r7, #4]
 80155d6:	691b      	ldr	r3, [r3, #16]
 80155d8:	431a      	orrs	r2, r3
 80155da:	687b      	ldr	r3, [r7, #4]
 80155dc:	699b      	ldr	r3, [r3, #24]
 80155de:	431a      	orrs	r2, r3
 80155e0:	687b      	ldr	r3, [r7, #4]
 80155e2:	681b      	ldr	r3, [r3, #0]
 80155e4:	430a      	orrs	r2, r1
 80155e6:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80155e8:	687b      	ldr	r3, [r7, #4]
 80155ea:	681b      	ldr	r3, [r3, #0]
 80155ec:	687a      	ldr	r2, [r7, #4]
 80155ee:	68d2      	ldr	r2, [r2, #12]
 80155f0:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 80155f2:	687b      	ldr	r3, [r7, #4]
 80155f4:	681b      	ldr	r3, [r3, #0]
 80155f6:	6919      	ldr	r1, [r3, #16]
 80155f8:	687b      	ldr	r3, [r7, #4]
 80155fa:	689b      	ldr	r3, [r3, #8]
 80155fc:	041a      	lsls	r2, r3, #16
 80155fe:	687b      	ldr	r3, [r7, #4]
 8015600:	681b      	ldr	r3, [r3, #0]
 8015602:	430a      	orrs	r2, r1
 8015604:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8015606:	183c      	adds	r4, r7, r0
 8015608:	687b      	ldr	r3, [r7, #4]
 801560a:	0018      	movs	r0, r3
 801560c:	f000 fa8e 	bl	8015b2c <RTC_ExitInitMode>
 8015610:	0003      	movs	r3, r0
 8015612:	7023      	strb	r3, [r4, #0]
    }

    if (status == HAL_OK)
 8015614:	230f      	movs	r3, #15
 8015616:	18fb      	adds	r3, r7, r3
 8015618:	781b      	ldrb	r3, [r3, #0]
 801561a:	2b00      	cmp	r3, #0
 801561c:	d113      	bne.n	8015646 <HAL_RTC_Init+0x102>
    {
      hrtc->Instance->OR &= (uint32_t)~(RTC_OUTPUT_TYPE_PUSHPULL | RTC_OUTPUT_REMAP_POS1);
 801561e:	687b      	ldr	r3, [r7, #4]
 8015620:	681b      	ldr	r3, [r3, #0]
 8015622:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8015624:	687b      	ldr	r3, [r7, #4]
 8015626:	681b      	ldr	r3, [r3, #0]
 8015628:	2103      	movs	r1, #3
 801562a:	438a      	bics	r2, r1
 801562c:	64da      	str	r2, [r3, #76]	@ 0x4c
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 801562e:	687b      	ldr	r3, [r7, #4]
 8015630:	681b      	ldr	r3, [r3, #0]
 8015632:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 8015634:	687b      	ldr	r3, [r7, #4]
 8015636:	69da      	ldr	r2, [r3, #28]
 8015638:	687b      	ldr	r3, [r7, #4]
 801563a:	695b      	ldr	r3, [r3, #20]
 801563c:	431a      	orrs	r2, r3
 801563e:	687b      	ldr	r3, [r7, #4]
 8015640:	681b      	ldr	r3, [r3, #0]
 8015642:	430a      	orrs	r2, r1
 8015644:	64da      	str	r2, [r3, #76]	@ 0x4c
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8015646:	687b      	ldr	r3, [r7, #4]
 8015648:	681b      	ldr	r3, [r3, #0]
 801564a:	22ff      	movs	r2, #255	@ 0xff
 801564c:	625a      	str	r2, [r3, #36]	@ 0x24
 801564e:	e003      	b.n	8015658 <HAL_RTC_Init+0x114>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 8015650:	230f      	movs	r3, #15
 8015652:	18fb      	adds	r3, r7, r3
 8015654:	2200      	movs	r2, #0
 8015656:	701a      	strb	r2, [r3, #0]
  }

  if (status == HAL_OK)
 8015658:	230f      	movs	r3, #15
 801565a:	18fb      	adds	r3, r7, r3
 801565c:	781b      	ldrb	r3, [r3, #0]
 801565e:	2b00      	cmp	r3, #0
 8015660:	d103      	bne.n	801566a <HAL_RTC_Init+0x126>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8015662:	687b      	ldr	r3, [r7, #4]
 8015664:	2221      	movs	r2, #33	@ 0x21
 8015666:	2101      	movs	r1, #1
 8015668:	5499      	strb	r1, [r3, r2]
  }

  return status;
 801566a:	230f      	movs	r3, #15
 801566c:	18fb      	adds	r3, r7, r3
 801566e:	781b      	ldrb	r3, [r3, #0]
}
 8015670:	0018      	movs	r0, r3
 8015672:	46bd      	mov	sp, r7
 8015674:	b004      	add	sp, #16
 8015676:	bdb0      	pop	{r4, r5, r7, pc}
 8015678:	ff8fffbf 	.word	0xff8fffbf

0801567c <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 801567c:	b5b0      	push	{r4, r5, r7, lr}
 801567e:	b086      	sub	sp, #24
 8015680:	af00      	add	r7, sp, #0
 8015682:	60f8      	str	r0, [r7, #12]
 8015684:	60b9      	str	r1, [r7, #8]
 8015686:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8015688:	2300      	movs	r3, #0
 801568a:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 801568c:	68fb      	ldr	r3, [r7, #12]
 801568e:	2220      	movs	r2, #32
 8015690:	5c9b      	ldrb	r3, [r3, r2]
 8015692:	2b01      	cmp	r3, #1
 8015694:	d101      	bne.n	801569a <HAL_RTC_SetTime+0x1e>
 8015696:	2302      	movs	r3, #2
 8015698:	e092      	b.n	80157c0 <HAL_RTC_SetTime+0x144>
 801569a:	68fb      	ldr	r3, [r7, #12]
 801569c:	2220      	movs	r2, #32
 801569e:	2101      	movs	r1, #1
 80156a0:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80156a2:	68fb      	ldr	r3, [r7, #12]
 80156a4:	2221      	movs	r2, #33	@ 0x21
 80156a6:	2102      	movs	r1, #2
 80156a8:	5499      	strb	r1, [r3, r2]

  if (Format == RTC_FORMAT_BIN)
 80156aa:	687b      	ldr	r3, [r7, #4]
 80156ac:	2b00      	cmp	r3, #0
 80156ae:	d125      	bne.n	80156fc <HAL_RTC_SetTime+0x80>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80156b0:	68fb      	ldr	r3, [r7, #12]
 80156b2:	681b      	ldr	r3, [r3, #0]
 80156b4:	689b      	ldr	r3, [r3, #8]
 80156b6:	2240      	movs	r2, #64	@ 0x40
 80156b8:	4013      	ands	r3, r2
 80156ba:	d102      	bne.n	80156c2 <HAL_RTC_SetTime+0x46>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80156bc:	68bb      	ldr	r3, [r7, #8]
 80156be:	2200      	movs	r2, #0
 80156c0:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80156c2:	68bb      	ldr	r3, [r7, #8]
 80156c4:	781b      	ldrb	r3, [r3, #0]
 80156c6:	0018      	movs	r0, r3
 80156c8:	f000 fa5a 	bl	8015b80 <RTC_ByteToBcd2>
 80156cc:	0003      	movs	r3, r0
 80156ce:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80156d0:	68bb      	ldr	r3, [r7, #8]
 80156d2:	785b      	ldrb	r3, [r3, #1]
 80156d4:	0018      	movs	r0, r3
 80156d6:	f000 fa53 	bl	8015b80 <RTC_ByteToBcd2>
 80156da:	0003      	movs	r3, r0
 80156dc:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80156de:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 80156e0:	68bb      	ldr	r3, [r7, #8]
 80156e2:	789b      	ldrb	r3, [r3, #2]
 80156e4:	0018      	movs	r0, r3
 80156e6:	f000 fa4b 	bl	8015b80 <RTC_ByteToBcd2>
 80156ea:	0003      	movs	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80156ec:	0022      	movs	r2, r4
 80156ee:	431a      	orrs	r2, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 80156f0:	68bb      	ldr	r3, [r7, #8]
 80156f2:	78db      	ldrb	r3, [r3, #3]
 80156f4:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80156f6:	4313      	orrs	r3, r2
 80156f8:	617b      	str	r3, [r7, #20]
 80156fa:	e017      	b.n	801572c <HAL_RTC_SetTime+0xb0>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80156fc:	68fb      	ldr	r3, [r7, #12]
 80156fe:	681b      	ldr	r3, [r3, #0]
 8015700:	689b      	ldr	r3, [r3, #8]
 8015702:	2240      	movs	r2, #64	@ 0x40
 8015704:	4013      	ands	r3, r2
 8015706:	d102      	bne.n	801570e <HAL_RTC_SetTime+0x92>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8015708:	68bb      	ldr	r3, [r7, #8]
 801570a:	2200      	movs	r2, #0
 801570c:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 801570e:	68bb      	ldr	r3, [r7, #8]
 8015710:	781b      	ldrb	r3, [r3, #0]
 8015712:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8015714:	68bb      	ldr	r3, [r7, #8]
 8015716:	785b      	ldrb	r3, [r3, #1]
 8015718:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 801571a:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 801571c:	68ba      	ldr	r2, [r7, #8]
 801571e:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8015720:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8015722:	68bb      	ldr	r3, [r7, #8]
 8015724:	78db      	ldrb	r3, [r3, #3]
 8015726:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8015728:	4313      	orrs	r3, r2
 801572a:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 801572c:	68fb      	ldr	r3, [r7, #12]
 801572e:	681b      	ldr	r3, [r3, #0]
 8015730:	22ca      	movs	r2, #202	@ 0xca
 8015732:	625a      	str	r2, [r3, #36]	@ 0x24
 8015734:	68fb      	ldr	r3, [r7, #12]
 8015736:	681b      	ldr	r3, [r3, #0]
 8015738:	2253      	movs	r2, #83	@ 0x53
 801573a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 801573c:	2513      	movs	r5, #19
 801573e:	197c      	adds	r4, r7, r5
 8015740:	68fb      	ldr	r3, [r7, #12]
 8015742:	0018      	movs	r0, r3
 8015744:	f000 f9ae 	bl	8015aa4 <RTC_EnterInitMode>
 8015748:	0003      	movs	r3, r0
 801574a:	7023      	strb	r3, [r4, #0]

  if (status == HAL_OK)
 801574c:	0028      	movs	r0, r5
 801574e:	183b      	adds	r3, r7, r0
 8015750:	781b      	ldrb	r3, [r3, #0]
 8015752:	2b00      	cmp	r3, #0
 8015754:	d120      	bne.n	8015798 <HAL_RTC_SetTime+0x11c>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8015756:	68fb      	ldr	r3, [r7, #12]
 8015758:	681b      	ldr	r3, [r3, #0]
 801575a:	697a      	ldr	r2, [r7, #20]
 801575c:	491a      	ldr	r1, [pc, #104]	@ (80157c8 <HAL_RTC_SetTime+0x14c>)
 801575e:	400a      	ands	r2, r1
 8015760:	601a      	str	r2, [r3, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8015762:	68fb      	ldr	r3, [r7, #12]
 8015764:	681b      	ldr	r3, [r3, #0]
 8015766:	689a      	ldr	r2, [r3, #8]
 8015768:	68fb      	ldr	r3, [r7, #12]
 801576a:	681b      	ldr	r3, [r3, #0]
 801576c:	4917      	ldr	r1, [pc, #92]	@ (80157cc <HAL_RTC_SetTime+0x150>)
 801576e:	400a      	ands	r2, r1
 8015770:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8015772:	68fb      	ldr	r3, [r7, #12]
 8015774:	681b      	ldr	r3, [r3, #0]
 8015776:	6899      	ldr	r1, [r3, #8]
 8015778:	68bb      	ldr	r3, [r7, #8]
 801577a:	68da      	ldr	r2, [r3, #12]
 801577c:	68bb      	ldr	r3, [r7, #8]
 801577e:	691b      	ldr	r3, [r3, #16]
 8015780:	431a      	orrs	r2, r3
 8015782:	68fb      	ldr	r3, [r7, #12]
 8015784:	681b      	ldr	r3, [r3, #0]
 8015786:	430a      	orrs	r2, r1
 8015788:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 801578a:	183c      	adds	r4, r7, r0
 801578c:	68fb      	ldr	r3, [r7, #12]
 801578e:	0018      	movs	r0, r3
 8015790:	f000 f9cc 	bl	8015b2c <RTC_ExitInitMode>
 8015794:	0003      	movs	r3, r0
 8015796:	7023      	strb	r3, [r4, #0]
  }

  if (status == HAL_OK)
 8015798:	2313      	movs	r3, #19
 801579a:	18fb      	adds	r3, r7, r3
 801579c:	781b      	ldrb	r3, [r3, #0]
 801579e:	2b00      	cmp	r3, #0
 80157a0:	d103      	bne.n	80157aa <HAL_RTC_SetTime+0x12e>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80157a2:	68fb      	ldr	r3, [r7, #12]
 80157a4:	2221      	movs	r2, #33	@ 0x21
 80157a6:	2101      	movs	r1, #1
 80157a8:	5499      	strb	r1, [r3, r2]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80157aa:	68fb      	ldr	r3, [r7, #12]
 80157ac:	681b      	ldr	r3, [r3, #0]
 80157ae:	22ff      	movs	r2, #255	@ 0xff
 80157b0:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80157b2:	68fb      	ldr	r3, [r7, #12]
 80157b4:	2220      	movs	r2, #32
 80157b6:	2100      	movs	r1, #0
 80157b8:	5499      	strb	r1, [r3, r2]

  return status;
 80157ba:	2313      	movs	r3, #19
 80157bc:	18fb      	adds	r3, r7, r3
 80157be:	781b      	ldrb	r3, [r3, #0]
}
 80157c0:	0018      	movs	r0, r3
 80157c2:	46bd      	mov	sp, r7
 80157c4:	b006      	add	sp, #24
 80157c6:	bdb0      	pop	{r4, r5, r7, pc}
 80157c8:	007f7f7f 	.word	0x007f7f7f
 80157cc:	fffbffff 	.word	0xfffbffff

080157d0 <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80157d0:	b580      	push	{r7, lr}
 80157d2:	b086      	sub	sp, #24
 80157d4:	af00      	add	r7, sp, #0
 80157d6:	60f8      	str	r0, [r7, #12]
 80157d8:	60b9      	str	r1, [r7, #8]
 80157da:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80157dc:	2300      	movs	r3, #0
 80157de:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 80157e0:	68fb      	ldr	r3, [r7, #12]
 80157e2:	681b      	ldr	r3, [r3, #0]
 80157e4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80157e6:	68bb      	ldr	r3, [r7, #8]
 80157e8:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 80157ea:	68fb      	ldr	r3, [r7, #12]
 80157ec:	681b      	ldr	r3, [r3, #0]
 80157ee:	691b      	ldr	r3, [r3, #16]
 80157f0:	045b      	lsls	r3, r3, #17
 80157f2:	0c5a      	lsrs	r2, r3, #17
 80157f4:	68bb      	ldr	r3, [r7, #8]
 80157f6:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 80157f8:	68fb      	ldr	r3, [r7, #12]
 80157fa:	681b      	ldr	r3, [r3, #0]
 80157fc:	681b      	ldr	r3, [r3, #0]
 80157fe:	4a22      	ldr	r2, [pc, #136]	@ (8015888 <HAL_RTC_GetTime+0xb8>)
 8015800:	4013      	ands	r3, r2
 8015802:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8015804:	697b      	ldr	r3, [r7, #20]
 8015806:	0c1b      	lsrs	r3, r3, #16
 8015808:	b2db      	uxtb	r3, r3
 801580a:	223f      	movs	r2, #63	@ 0x3f
 801580c:	4013      	ands	r3, r2
 801580e:	b2da      	uxtb	r2, r3
 8015810:	68bb      	ldr	r3, [r7, #8]
 8015812:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8015814:	697b      	ldr	r3, [r7, #20]
 8015816:	0a1b      	lsrs	r3, r3, #8
 8015818:	b2db      	uxtb	r3, r3
 801581a:	227f      	movs	r2, #127	@ 0x7f
 801581c:	4013      	ands	r3, r2
 801581e:	b2da      	uxtb	r2, r3
 8015820:	68bb      	ldr	r3, [r7, #8]
 8015822:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 8015824:	697b      	ldr	r3, [r7, #20]
 8015826:	b2db      	uxtb	r3, r3
 8015828:	227f      	movs	r2, #127	@ 0x7f
 801582a:	4013      	ands	r3, r2
 801582c:	b2da      	uxtb	r2, r3
 801582e:	68bb      	ldr	r3, [r7, #8]
 8015830:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8015832:	697b      	ldr	r3, [r7, #20]
 8015834:	0d9b      	lsrs	r3, r3, #22
 8015836:	b2db      	uxtb	r3, r3
 8015838:	2201      	movs	r2, #1
 801583a:	4013      	ands	r3, r2
 801583c:	b2da      	uxtb	r2, r3
 801583e:	68bb      	ldr	r3, [r7, #8]
 8015840:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8015842:	687b      	ldr	r3, [r7, #4]
 8015844:	2b00      	cmp	r3, #0
 8015846:	d11a      	bne.n	801587e <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8015848:	68bb      	ldr	r3, [r7, #8]
 801584a:	781b      	ldrb	r3, [r3, #0]
 801584c:	0018      	movs	r0, r3
 801584e:	f000 f9b8 	bl	8015bc2 <RTC_Bcd2ToByte>
 8015852:	0003      	movs	r3, r0
 8015854:	001a      	movs	r2, r3
 8015856:	68bb      	ldr	r3, [r7, #8]
 8015858:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 801585a:	68bb      	ldr	r3, [r7, #8]
 801585c:	785b      	ldrb	r3, [r3, #1]
 801585e:	0018      	movs	r0, r3
 8015860:	f000 f9af 	bl	8015bc2 <RTC_Bcd2ToByte>
 8015864:	0003      	movs	r3, r0
 8015866:	001a      	movs	r2, r3
 8015868:	68bb      	ldr	r3, [r7, #8]
 801586a:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 801586c:	68bb      	ldr	r3, [r7, #8]
 801586e:	789b      	ldrb	r3, [r3, #2]
 8015870:	0018      	movs	r0, r3
 8015872:	f000 f9a6 	bl	8015bc2 <RTC_Bcd2ToByte>
 8015876:	0003      	movs	r3, r0
 8015878:	001a      	movs	r2, r3
 801587a:	68bb      	ldr	r3, [r7, #8]
 801587c:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 801587e:	2300      	movs	r3, #0
}
 8015880:	0018      	movs	r0, r3
 8015882:	46bd      	mov	sp, r7
 8015884:	b006      	add	sp, #24
 8015886:	bd80      	pop	{r7, pc}
 8015888:	007f7f7f 	.word	0x007f7f7f

0801588c <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 801588c:	b5b0      	push	{r4, r5, r7, lr}
 801588e:	b086      	sub	sp, #24
 8015890:	af00      	add	r7, sp, #0
 8015892:	60f8      	str	r0, [r7, #12]
 8015894:	60b9      	str	r1, [r7, #8]
 8015896:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8015898:	2300      	movs	r3, #0
 801589a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 801589c:	68fb      	ldr	r3, [r7, #12]
 801589e:	2220      	movs	r2, #32
 80158a0:	5c9b      	ldrb	r3, [r3, r2]
 80158a2:	2b01      	cmp	r3, #1
 80158a4:	d101      	bne.n	80158aa <HAL_RTC_SetDate+0x1e>
 80158a6:	2302      	movs	r3, #2
 80158a8:	e07e      	b.n	80159a8 <HAL_RTC_SetDate+0x11c>
 80158aa:	68fb      	ldr	r3, [r7, #12]
 80158ac:	2220      	movs	r2, #32
 80158ae:	2101      	movs	r1, #1
 80158b0:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80158b2:	68fb      	ldr	r3, [r7, #12]
 80158b4:	2221      	movs	r2, #33	@ 0x21
 80158b6:	2102      	movs	r1, #2
 80158b8:	5499      	strb	r1, [r3, r2]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80158ba:	687b      	ldr	r3, [r7, #4]
 80158bc:	2b00      	cmp	r3, #0
 80158be:	d10e      	bne.n	80158de <HAL_RTC_SetDate+0x52>
 80158c0:	68bb      	ldr	r3, [r7, #8]
 80158c2:	785b      	ldrb	r3, [r3, #1]
 80158c4:	001a      	movs	r2, r3
 80158c6:	2310      	movs	r3, #16
 80158c8:	4013      	ands	r3, r2
 80158ca:	d008      	beq.n	80158de <HAL_RTC_SetDate+0x52>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80158cc:	68bb      	ldr	r3, [r7, #8]
 80158ce:	785b      	ldrb	r3, [r3, #1]
 80158d0:	2210      	movs	r2, #16
 80158d2:	4393      	bics	r3, r2
 80158d4:	b2db      	uxtb	r3, r3
 80158d6:	330a      	adds	r3, #10
 80158d8:	b2da      	uxtb	r2, r3
 80158da:	68bb      	ldr	r3, [r7, #8]
 80158dc:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 80158de:	687b      	ldr	r3, [r7, #4]
 80158e0:	2b00      	cmp	r3, #0
 80158e2:	d11c      	bne.n	801591e <HAL_RTC_SetDate+0x92>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80158e4:	68bb      	ldr	r3, [r7, #8]
 80158e6:	78db      	ldrb	r3, [r3, #3]
 80158e8:	0018      	movs	r0, r3
 80158ea:	f000 f949 	bl	8015b80 <RTC_ByteToBcd2>
 80158ee:	0003      	movs	r3, r0
 80158f0:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80158f2:	68bb      	ldr	r3, [r7, #8]
 80158f4:	785b      	ldrb	r3, [r3, #1]
 80158f6:	0018      	movs	r0, r3
 80158f8:	f000 f942 	bl	8015b80 <RTC_ByteToBcd2>
 80158fc:	0003      	movs	r3, r0
 80158fe:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8015900:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8015902:	68bb      	ldr	r3, [r7, #8]
 8015904:	789b      	ldrb	r3, [r3, #2]
 8015906:	0018      	movs	r0, r3
 8015908:	f000 f93a 	bl	8015b80 <RTC_ByteToBcd2>
 801590c:	0003      	movs	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 801590e:	0022      	movs	r2, r4
 8015910:	431a      	orrs	r2, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8015912:	68bb      	ldr	r3, [r7, #8]
 8015914:	781b      	ldrb	r3, [r3, #0]
 8015916:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8015918:	4313      	orrs	r3, r2
 801591a:	617b      	str	r3, [r7, #20]
 801591c:	e00e      	b.n	801593c <HAL_RTC_SetDate+0xb0>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 801591e:	68bb      	ldr	r3, [r7, #8]
 8015920:	78db      	ldrb	r3, [r3, #3]
 8015922:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8015924:	68bb      	ldr	r3, [r7, #8]
 8015926:	785b      	ldrb	r3, [r3, #1]
 8015928:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 801592a:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 801592c:	68ba      	ldr	r2, [r7, #8]
 801592e:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8015930:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8015932:	68bb      	ldr	r3, [r7, #8]
 8015934:	781b      	ldrb	r3, [r3, #0]
 8015936:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8015938:	4313      	orrs	r3, r2
 801593a:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 801593c:	68fb      	ldr	r3, [r7, #12]
 801593e:	681b      	ldr	r3, [r3, #0]
 8015940:	22ca      	movs	r2, #202	@ 0xca
 8015942:	625a      	str	r2, [r3, #36]	@ 0x24
 8015944:	68fb      	ldr	r3, [r7, #12]
 8015946:	681b      	ldr	r3, [r3, #0]
 8015948:	2253      	movs	r2, #83	@ 0x53
 801594a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 801594c:	2513      	movs	r5, #19
 801594e:	197c      	adds	r4, r7, r5
 8015950:	68fb      	ldr	r3, [r7, #12]
 8015952:	0018      	movs	r0, r3
 8015954:	f000 f8a6 	bl	8015aa4 <RTC_EnterInitMode>
 8015958:	0003      	movs	r3, r0
 801595a:	7023      	strb	r3, [r4, #0]

  if (status == HAL_OK)
 801595c:	0028      	movs	r0, r5
 801595e:	183b      	adds	r3, r7, r0
 8015960:	781b      	ldrb	r3, [r3, #0]
 8015962:	2b00      	cmp	r3, #0
 8015964:	d10c      	bne.n	8015980 <HAL_RTC_SetDate+0xf4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8015966:	68fb      	ldr	r3, [r7, #12]
 8015968:	681b      	ldr	r3, [r3, #0]
 801596a:	697a      	ldr	r2, [r7, #20]
 801596c:	4910      	ldr	r1, [pc, #64]	@ (80159b0 <HAL_RTC_SetDate+0x124>)
 801596e:	400a      	ands	r2, r1
 8015970:	605a      	str	r2, [r3, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8015972:	183c      	adds	r4, r7, r0
 8015974:	68fb      	ldr	r3, [r7, #12]
 8015976:	0018      	movs	r0, r3
 8015978:	f000 f8d8 	bl	8015b2c <RTC_ExitInitMode>
 801597c:	0003      	movs	r3, r0
 801597e:	7023      	strb	r3, [r4, #0]
  }

  if (status == HAL_OK)
 8015980:	2313      	movs	r3, #19
 8015982:	18fb      	adds	r3, r7, r3
 8015984:	781b      	ldrb	r3, [r3, #0]
 8015986:	2b00      	cmp	r3, #0
 8015988:	d103      	bne.n	8015992 <HAL_RTC_SetDate+0x106>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 801598a:	68fb      	ldr	r3, [r7, #12]
 801598c:	2221      	movs	r2, #33	@ 0x21
 801598e:	2101      	movs	r1, #1
 8015990:	5499      	strb	r1, [r3, r2]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8015992:	68fb      	ldr	r3, [r7, #12]
 8015994:	681b      	ldr	r3, [r3, #0]
 8015996:	22ff      	movs	r2, #255	@ 0xff
 8015998:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 801599a:	68fb      	ldr	r3, [r7, #12]
 801599c:	2220      	movs	r2, #32
 801599e:	2100      	movs	r1, #0
 80159a0:	5499      	strb	r1, [r3, r2]

  return status;
 80159a2:	2313      	movs	r3, #19
 80159a4:	18fb      	adds	r3, r7, r3
 80159a6:	781b      	ldrb	r3, [r3, #0]
}
 80159a8:	0018      	movs	r0, r3
 80159aa:	46bd      	mov	sp, r7
 80159ac:	b006      	add	sp, #24
 80159ae:	bdb0      	pop	{r4, r5, r7, pc}
 80159b0:	00ffff3f 	.word	0x00ffff3f

080159b4 <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80159b4:	b580      	push	{r7, lr}
 80159b6:	b086      	sub	sp, #24
 80159b8:	af00      	add	r7, sp, #0
 80159ba:	60f8      	str	r0, [r7, #12]
 80159bc:	60b9      	str	r1, [r7, #8]
 80159be:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80159c0:	2300      	movs	r3, #0
 80159c2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 80159c4:	68fb      	ldr	r3, [r7, #12]
 80159c6:	681b      	ldr	r3, [r3, #0]
 80159c8:	685b      	ldr	r3, [r3, #4]
 80159ca:	4a21      	ldr	r2, [pc, #132]	@ (8015a50 <HAL_RTC_GetDate+0x9c>)
 80159cc:	4013      	ands	r3, r2
 80159ce:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 80159d0:	697b      	ldr	r3, [r7, #20]
 80159d2:	0c1b      	lsrs	r3, r3, #16
 80159d4:	b2da      	uxtb	r2, r3
 80159d6:	68bb      	ldr	r3, [r7, #8]
 80159d8:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 80159da:	697b      	ldr	r3, [r7, #20]
 80159dc:	0a1b      	lsrs	r3, r3, #8
 80159de:	b2db      	uxtb	r3, r3
 80159e0:	221f      	movs	r2, #31
 80159e2:	4013      	ands	r3, r2
 80159e4:	b2da      	uxtb	r2, r3
 80159e6:	68bb      	ldr	r3, [r7, #8]
 80159e8:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 80159ea:	697b      	ldr	r3, [r7, #20]
 80159ec:	b2db      	uxtb	r3, r3
 80159ee:	223f      	movs	r2, #63	@ 0x3f
 80159f0:	4013      	ands	r3, r2
 80159f2:	b2da      	uxtb	r2, r3
 80159f4:	68bb      	ldr	r3, [r7, #8]
 80159f6:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 80159f8:	697b      	ldr	r3, [r7, #20]
 80159fa:	0b5b      	lsrs	r3, r3, #13
 80159fc:	b2db      	uxtb	r3, r3
 80159fe:	2207      	movs	r2, #7
 8015a00:	4013      	ands	r3, r2
 8015a02:	b2da      	uxtb	r2, r3
 8015a04:	68bb      	ldr	r3, [r7, #8]
 8015a06:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8015a08:	687b      	ldr	r3, [r7, #4]
 8015a0a:	2b00      	cmp	r3, #0
 8015a0c:	d11a      	bne.n	8015a44 <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8015a0e:	68bb      	ldr	r3, [r7, #8]
 8015a10:	78db      	ldrb	r3, [r3, #3]
 8015a12:	0018      	movs	r0, r3
 8015a14:	f000 f8d5 	bl	8015bc2 <RTC_Bcd2ToByte>
 8015a18:	0003      	movs	r3, r0
 8015a1a:	001a      	movs	r2, r3
 8015a1c:	68bb      	ldr	r3, [r7, #8]
 8015a1e:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8015a20:	68bb      	ldr	r3, [r7, #8]
 8015a22:	785b      	ldrb	r3, [r3, #1]
 8015a24:	0018      	movs	r0, r3
 8015a26:	f000 f8cc 	bl	8015bc2 <RTC_Bcd2ToByte>
 8015a2a:	0003      	movs	r3, r0
 8015a2c:	001a      	movs	r2, r3
 8015a2e:	68bb      	ldr	r3, [r7, #8]
 8015a30:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8015a32:	68bb      	ldr	r3, [r7, #8]
 8015a34:	789b      	ldrb	r3, [r3, #2]
 8015a36:	0018      	movs	r0, r3
 8015a38:	f000 f8c3 	bl	8015bc2 <RTC_Bcd2ToByte>
 8015a3c:	0003      	movs	r3, r0
 8015a3e:	001a      	movs	r2, r3
 8015a40:	68bb      	ldr	r3, [r7, #8]
 8015a42:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8015a44:	2300      	movs	r3, #0
}
 8015a46:	0018      	movs	r0, r3
 8015a48:	46bd      	mov	sp, r7
 8015a4a:	b006      	add	sp, #24
 8015a4c:	bd80      	pop	{r7, pc}
 8015a4e:	46c0      	nop			@ (mov r8, r8)
 8015a50:	00ffff3f 	.word	0x00ffff3f

08015a54 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8015a54:	b580      	push	{r7, lr}
 8015a56:	b084      	sub	sp, #16
 8015a58:	af00      	add	r7, sp, #0
 8015a5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8015a5c:	2300      	movs	r3, #0
 8015a5e:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8015a60:	687b      	ldr	r3, [r7, #4]
 8015a62:	681b      	ldr	r3, [r3, #0]
 8015a64:	4a0e      	ldr	r2, [pc, #56]	@ (8015aa0 <HAL_RTC_WaitForSynchro+0x4c>)
 8015a66:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8015a68:	f7f8 fcfe 	bl	800e468 <HAL_GetTick>
 8015a6c:	0003      	movs	r3, r0
 8015a6e:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8015a70:	e00a      	b.n	8015a88 <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8015a72:	f7f8 fcf9 	bl	800e468 <HAL_GetTick>
 8015a76:	0002      	movs	r2, r0
 8015a78:	68fb      	ldr	r3, [r7, #12]
 8015a7a:	1ad2      	subs	r2, r2, r3
 8015a7c:	23fa      	movs	r3, #250	@ 0xfa
 8015a7e:	009b      	lsls	r3, r3, #2
 8015a80:	429a      	cmp	r2, r3
 8015a82:	d901      	bls.n	8015a88 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8015a84:	2303      	movs	r3, #3
 8015a86:	e006      	b.n	8015a96 <HAL_RTC_WaitForSynchro+0x42>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8015a88:	687b      	ldr	r3, [r7, #4]
 8015a8a:	681b      	ldr	r3, [r3, #0]
 8015a8c:	68db      	ldr	r3, [r3, #12]
 8015a8e:	2220      	movs	r2, #32
 8015a90:	4013      	ands	r3, r2
 8015a92:	d0ee      	beq.n	8015a72 <HAL_RTC_WaitForSynchro+0x1e>
    }
  }

  return HAL_OK;
 8015a94:	2300      	movs	r3, #0
}
 8015a96:	0018      	movs	r0, r3
 8015a98:	46bd      	mov	sp, r7
 8015a9a:	b004      	add	sp, #16
 8015a9c:	bd80      	pop	{r7, pc}
 8015a9e:	46c0      	nop			@ (mov r8, r8)
 8015aa0:	0001ff5f 	.word	0x0001ff5f

08015aa4 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8015aa4:	b580      	push	{r7, lr}
 8015aa6:	b084      	sub	sp, #16
 8015aa8:	af00      	add	r7, sp, #0
 8015aaa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8015aac:	2300      	movs	r3, #0
 8015aae:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8015ab0:	230f      	movs	r3, #15
 8015ab2:	18fb      	adds	r3, r7, r3
 8015ab4:	2200      	movs	r2, #0
 8015ab6:	701a      	strb	r2, [r3, #0]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8015ab8:	687b      	ldr	r3, [r7, #4]
 8015aba:	681b      	ldr	r3, [r3, #0]
 8015abc:	68db      	ldr	r3, [r3, #12]
 8015abe:	2240      	movs	r2, #64	@ 0x40
 8015ac0:	4013      	ands	r3, r2
 8015ac2:	d12c      	bne.n	8015b1e <RTC_EnterInitMode+0x7a>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8015ac4:	687b      	ldr	r3, [r7, #4]
 8015ac6:	681b      	ldr	r3, [r3, #0]
 8015ac8:	68da      	ldr	r2, [r3, #12]
 8015aca:	687b      	ldr	r3, [r7, #4]
 8015acc:	681b      	ldr	r3, [r3, #0]
 8015ace:	2180      	movs	r1, #128	@ 0x80
 8015ad0:	430a      	orrs	r2, r1
 8015ad2:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8015ad4:	f7f8 fcc8 	bl	800e468 <HAL_GetTick>
 8015ad8:	0003      	movs	r3, r0
 8015ada:	60bb      	str	r3, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8015adc:	e014      	b.n	8015b08 <RTC_EnterInitMode+0x64>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8015ade:	f7f8 fcc3 	bl	800e468 <HAL_GetTick>
 8015ae2:	0002      	movs	r2, r0
 8015ae4:	68bb      	ldr	r3, [r7, #8]
 8015ae6:	1ad2      	subs	r2, r2, r3
 8015ae8:	200f      	movs	r0, #15
 8015aea:	183b      	adds	r3, r7, r0
 8015aec:	1839      	adds	r1, r7, r0
 8015aee:	7809      	ldrb	r1, [r1, #0]
 8015af0:	7019      	strb	r1, [r3, #0]
 8015af2:	23fa      	movs	r3, #250	@ 0xfa
 8015af4:	009b      	lsls	r3, r3, #2
 8015af6:	429a      	cmp	r2, r3
 8015af8:	d906      	bls.n	8015b08 <RTC_EnterInitMode+0x64>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8015afa:	687b      	ldr	r3, [r7, #4]
 8015afc:	2221      	movs	r2, #33	@ 0x21
 8015afe:	2104      	movs	r1, #4
 8015b00:	5499      	strb	r1, [r3, r2]
        status = HAL_ERROR;
 8015b02:	183b      	adds	r3, r7, r0
 8015b04:	2201      	movs	r2, #1
 8015b06:	701a      	strb	r2, [r3, #0]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8015b08:	687b      	ldr	r3, [r7, #4]
 8015b0a:	681b      	ldr	r3, [r3, #0]
 8015b0c:	68db      	ldr	r3, [r3, #12]
 8015b0e:	2240      	movs	r2, #64	@ 0x40
 8015b10:	4013      	ands	r3, r2
 8015b12:	d104      	bne.n	8015b1e <RTC_EnterInitMode+0x7a>
 8015b14:	230f      	movs	r3, #15
 8015b16:	18fb      	adds	r3, r7, r3
 8015b18:	781b      	ldrb	r3, [r3, #0]
 8015b1a:	2b01      	cmp	r3, #1
 8015b1c:	d1df      	bne.n	8015ade <RTC_EnterInitMode+0x3a>
      }
    }
  }

  return status;
 8015b1e:	230f      	movs	r3, #15
 8015b20:	18fb      	adds	r3, r7, r3
 8015b22:	781b      	ldrb	r3, [r3, #0]
}
 8015b24:	0018      	movs	r0, r3
 8015b26:	46bd      	mov	sp, r7
 8015b28:	b004      	add	sp, #16
 8015b2a:	bd80      	pop	{r7, pc}

08015b2c <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8015b2c:	b590      	push	{r4, r7, lr}
 8015b2e:	b085      	sub	sp, #20
 8015b30:	af00      	add	r7, sp, #0
 8015b32:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8015b34:	240f      	movs	r4, #15
 8015b36:	193b      	adds	r3, r7, r4
 8015b38:	2200      	movs	r2, #0
 8015b3a:	701a      	strb	r2, [r3, #0]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8015b3c:	687b      	ldr	r3, [r7, #4]
 8015b3e:	681b      	ldr	r3, [r3, #0]
 8015b40:	68da      	ldr	r2, [r3, #12]
 8015b42:	687b      	ldr	r3, [r7, #4]
 8015b44:	681b      	ldr	r3, [r3, #0]
 8015b46:	2180      	movs	r1, #128	@ 0x80
 8015b48:	438a      	bics	r2, r1
 8015b4a:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8015b4c:	687b      	ldr	r3, [r7, #4]
 8015b4e:	681b      	ldr	r3, [r3, #0]
 8015b50:	689b      	ldr	r3, [r3, #8]
 8015b52:	2220      	movs	r2, #32
 8015b54:	4013      	ands	r3, r2
 8015b56:	d10c      	bne.n	8015b72 <RTC_ExitInitMode+0x46>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8015b58:	687b      	ldr	r3, [r7, #4]
 8015b5a:	0018      	movs	r0, r3
 8015b5c:	f7ff ff7a 	bl	8015a54 <HAL_RTC_WaitForSynchro>
 8015b60:	1e03      	subs	r3, r0, #0
 8015b62:	d006      	beq.n	8015b72 <RTC_ExitInitMode+0x46>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8015b64:	687b      	ldr	r3, [r7, #4]
 8015b66:	2221      	movs	r2, #33	@ 0x21
 8015b68:	2104      	movs	r1, #4
 8015b6a:	5499      	strb	r1, [r3, r2]
      status = HAL_ERROR;
 8015b6c:	193b      	adds	r3, r7, r4
 8015b6e:	2201      	movs	r2, #1
 8015b70:	701a      	strb	r2, [r3, #0]
    }
  }

  return status;
 8015b72:	230f      	movs	r3, #15
 8015b74:	18fb      	adds	r3, r7, r3
 8015b76:	781b      	ldrb	r3, [r3, #0]
}
 8015b78:	0018      	movs	r0, r3
 8015b7a:	46bd      	mov	sp, r7
 8015b7c:	b005      	add	sp, #20
 8015b7e:	bd90      	pop	{r4, r7, pc}

08015b80 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8015b80:	b580      	push	{r7, lr}
 8015b82:	b084      	sub	sp, #16
 8015b84:	af00      	add	r7, sp, #0
 8015b86:	0002      	movs	r2, r0
 8015b88:	1dfb      	adds	r3, r7, #7
 8015b8a:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 8015b8c:	2300      	movs	r3, #0
 8015b8e:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 8015b90:	e007      	b.n	8015ba2 <RTC_ByteToBcd2+0x22>
  {
    bcdhigh++;
 8015b92:	68fb      	ldr	r3, [r7, #12]
 8015b94:	3301      	adds	r3, #1
 8015b96:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 8015b98:	1dfb      	adds	r3, r7, #7
 8015b9a:	1dfa      	adds	r2, r7, #7
 8015b9c:	7812      	ldrb	r2, [r2, #0]
 8015b9e:	3a0a      	subs	r2, #10
 8015ba0:	701a      	strb	r2, [r3, #0]
  while (number >= 10U)
 8015ba2:	1dfb      	adds	r3, r7, #7
 8015ba4:	781b      	ldrb	r3, [r3, #0]
 8015ba6:	2b09      	cmp	r3, #9
 8015ba8:	d8f3      	bhi.n	8015b92 <RTC_ByteToBcd2+0x12>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8015baa:	68fb      	ldr	r3, [r7, #12]
 8015bac:	b2db      	uxtb	r3, r3
 8015bae:	011b      	lsls	r3, r3, #4
 8015bb0:	b2da      	uxtb	r2, r3
 8015bb2:	1dfb      	adds	r3, r7, #7
 8015bb4:	781b      	ldrb	r3, [r3, #0]
 8015bb6:	4313      	orrs	r3, r2
 8015bb8:	b2db      	uxtb	r3, r3
}
 8015bba:	0018      	movs	r0, r3
 8015bbc:	46bd      	mov	sp, r7
 8015bbe:	b004      	add	sp, #16
 8015bc0:	bd80      	pop	{r7, pc}

08015bc2 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 8015bc2:	b580      	push	{r7, lr}
 8015bc4:	b084      	sub	sp, #16
 8015bc6:	af00      	add	r7, sp, #0
 8015bc8:	0002      	movs	r2, r0
 8015bca:	1dfb      	adds	r3, r7, #7
 8015bcc:	701a      	strb	r2, [r3, #0]
  uint32_t tens = 0U;
 8015bce:	2300      	movs	r3, #0
 8015bd0:	60fb      	str	r3, [r7, #12]
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 8015bd2:	1dfb      	adds	r3, r7, #7
 8015bd4:	781b      	ldrb	r3, [r3, #0]
 8015bd6:	091b      	lsrs	r3, r3, #4
 8015bd8:	b2db      	uxtb	r3, r3
 8015bda:	001a      	movs	r2, r3
 8015bdc:	0013      	movs	r3, r2
 8015bde:	009b      	lsls	r3, r3, #2
 8015be0:	189b      	adds	r3, r3, r2
 8015be2:	005b      	lsls	r3, r3, #1
 8015be4:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 8015be6:	68fb      	ldr	r3, [r7, #12]
 8015be8:	b2da      	uxtb	r2, r3
 8015bea:	1dfb      	adds	r3, r7, #7
 8015bec:	781b      	ldrb	r3, [r3, #0]
 8015bee:	210f      	movs	r1, #15
 8015bf0:	400b      	ands	r3, r1
 8015bf2:	b2db      	uxtb	r3, r3
 8015bf4:	18d3      	adds	r3, r2, r3
 8015bf6:	b2db      	uxtb	r3, r3
}
 8015bf8:	0018      	movs	r0, r3
 8015bfa:	46bd      	mov	sp, r7
 8015bfc:	b004      	add	sp, #16
 8015bfe:	bd80      	pop	{r7, pc}

08015c00 <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param  WakeUpCounter Wakeup counter
  * @param  WakeUpClock Wakeup clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 8015c00:	b580      	push	{r7, lr}
 8015c02:	b086      	sub	sp, #24
 8015c04:	af00      	add	r7, sp, #0
 8015c06:	60f8      	str	r0, [r7, #12]
 8015c08:	60b9      	str	r1, [r7, #8]
 8015c0a:	607a      	str	r2, [r7, #4]
  __IO uint32_t count  = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 8015c0c:	4b64      	ldr	r3, [pc, #400]	@ (8015da0 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a0>)
 8015c0e:	681b      	ldr	r3, [r3, #0]
 8015c10:	22fa      	movs	r2, #250	@ 0xfa
 8015c12:	01d1      	lsls	r1, r2, #7
 8015c14:	0018      	movs	r0, r3
 8015c16:	f7ea fac5 	bl	80001a4 <__udivsi3>
 8015c1a:	0003      	movs	r3, r0
 8015c1c:	001a      	movs	r2, r3
 8015c1e:	0013      	movs	r3, r2
 8015c20:	015b      	lsls	r3, r3, #5
 8015c22:	1a9b      	subs	r3, r3, r2
 8015c24:	009b      	lsls	r3, r3, #2
 8015c26:	189b      	adds	r3, r3, r2
 8015c28:	00db      	lsls	r3, r3, #3
 8015c2a:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8015c2c:	68fb      	ldr	r3, [r7, #12]
 8015c2e:	2220      	movs	r2, #32
 8015c30:	5c9b      	ldrb	r3, [r3, r2]
 8015c32:	2b01      	cmp	r3, #1
 8015c34:	d101      	bne.n	8015c3a <HAL_RTCEx_SetWakeUpTimer_IT+0x3a>
 8015c36:	2302      	movs	r3, #2
 8015c38:	e0ad      	b.n	8015d96 <HAL_RTCEx_SetWakeUpTimer_IT+0x196>
 8015c3a:	68fb      	ldr	r3, [r7, #12]
 8015c3c:	2220      	movs	r2, #32
 8015c3e:	2101      	movs	r1, #1
 8015c40:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8015c42:	68fb      	ldr	r3, [r7, #12]
 8015c44:	2221      	movs	r2, #33	@ 0x21
 8015c46:	2102      	movs	r1, #2
 8015c48:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8015c4a:	68fb      	ldr	r3, [r7, #12]
 8015c4c:	681b      	ldr	r3, [r3, #0]
 8015c4e:	22ca      	movs	r2, #202	@ 0xca
 8015c50:	625a      	str	r2, [r3, #36]	@ 0x24
 8015c52:	68fb      	ldr	r3, [r7, #12]
 8015c54:	681b      	ldr	r3, [r3, #0]
 8015c56:	2253      	movs	r2, #83	@ 0x53
 8015c58:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Check RTC WUTWF flag is reset only when wakeup timer enabled */
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 8015c5a:	68fb      	ldr	r3, [r7, #12]
 8015c5c:	681b      	ldr	r3, [r3, #0]
 8015c5e:	689a      	ldr	r2, [r3, #8]
 8015c60:	2380      	movs	r3, #128	@ 0x80
 8015c62:	00db      	lsls	r3, r3, #3
 8015c64:	4013      	ands	r3, r2
 8015c66:	d019      	beq.n	8015c9c <HAL_RTCEx_SetWakeUpTimer_IT+0x9c>
  {
    /* Wait till RTC WUTWF flag is reset and if timeout is reached exit */
    do
    {
      count = count - 1U;
 8015c68:	697b      	ldr	r3, [r7, #20]
 8015c6a:	3b01      	subs	r3, #1
 8015c6c:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 8015c6e:	697b      	ldr	r3, [r7, #20]
 8015c70:	2b00      	cmp	r3, #0
 8015c72:	d10d      	bne.n	8015c90 <HAL_RTCEx_SetWakeUpTimer_IT+0x90>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8015c74:	68fb      	ldr	r3, [r7, #12]
 8015c76:	681b      	ldr	r3, [r3, #0]
 8015c78:	22ff      	movs	r2, #255	@ 0xff
 8015c7a:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8015c7c:	68fb      	ldr	r3, [r7, #12]
 8015c7e:	2221      	movs	r2, #33	@ 0x21
 8015c80:	2103      	movs	r1, #3
 8015c82:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8015c84:	68fb      	ldr	r3, [r7, #12]
 8015c86:	2220      	movs	r2, #32
 8015c88:	2100      	movs	r1, #0
 8015c8a:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8015c8c:	2303      	movs	r3, #3
 8015c8e:	e082      	b.n	8015d96 <HAL_RTCEx_SetWakeUpTimer_IT+0x196>
      }
    } while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) != 0U);
 8015c90:	68fb      	ldr	r3, [r7, #12]
 8015c92:	681b      	ldr	r3, [r3, #0]
 8015c94:	68db      	ldr	r3, [r3, #12]
 8015c96:	2204      	movs	r2, #4
 8015c98:	4013      	ands	r3, r2
 8015c9a:	d1e5      	bne.n	8015c68 <HAL_RTCEx_SetWakeUpTimer_IT+0x68>
  }

  /* Disable the Wakeup timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8015c9c:	68fb      	ldr	r3, [r7, #12]
 8015c9e:	681b      	ldr	r3, [r3, #0]
 8015ca0:	689a      	ldr	r2, [r3, #8]
 8015ca2:	68fb      	ldr	r3, [r7, #12]
 8015ca4:	681b      	ldr	r3, [r3, #0]
 8015ca6:	493f      	ldr	r1, [pc, #252]	@ (8015da4 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a4>)
 8015ca8:	400a      	ands	r2, r1
 8015caa:	609a      	str	r2, [r3, #8]

  /* Clear the Wakeup flag */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8015cac:	68fb      	ldr	r3, [r7, #12]
 8015cae:	681b      	ldr	r3, [r3, #0]
 8015cb0:	68db      	ldr	r3, [r3, #12]
 8015cb2:	22ff      	movs	r2, #255	@ 0xff
 8015cb4:	401a      	ands	r2, r3
 8015cb6:	68fb      	ldr	r3, [r7, #12]
 8015cb8:	681b      	ldr	r3, [r3, #0]
 8015cba:	493b      	ldr	r1, [pc, #236]	@ (8015da8 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a8>)
 8015cbc:	430a      	orrs	r2, r1
 8015cbe:	60da      	str	r2, [r3, #12]

  /* Reload the counter */
  count = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 8015cc0:	4b37      	ldr	r3, [pc, #220]	@ (8015da0 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a0>)
 8015cc2:	681b      	ldr	r3, [r3, #0]
 8015cc4:	22fa      	movs	r2, #250	@ 0xfa
 8015cc6:	01d1      	lsls	r1, r2, #7
 8015cc8:	0018      	movs	r0, r3
 8015cca:	f7ea fa6b 	bl	80001a4 <__udivsi3>
 8015cce:	0003      	movs	r3, r0
 8015cd0:	001a      	movs	r2, r3
 8015cd2:	0013      	movs	r3, r2
 8015cd4:	015b      	lsls	r3, r3, #5
 8015cd6:	1a9b      	subs	r3, r3, r2
 8015cd8:	009b      	lsls	r3, r3, #2
 8015cda:	189b      	adds	r3, r3, r2
 8015cdc:	00db      	lsls	r3, r3, #3
 8015cde:	617b      	str	r3, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if timeout is reached exit */
  do
  {
    count = count - 1U;
 8015ce0:	697b      	ldr	r3, [r7, #20]
 8015ce2:	3b01      	subs	r3, #1
 8015ce4:	617b      	str	r3, [r7, #20]
    if (count == 0U)
 8015ce6:	697b      	ldr	r3, [r7, #20]
 8015ce8:	2b00      	cmp	r3, #0
 8015cea:	d10d      	bne.n	8015d08 <HAL_RTCEx_SetWakeUpTimer_IT+0x108>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8015cec:	68fb      	ldr	r3, [r7, #12]
 8015cee:	681b      	ldr	r3, [r3, #0]
 8015cf0:	22ff      	movs	r2, #255	@ 0xff
 8015cf2:	625a      	str	r2, [r3, #36]	@ 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8015cf4:	68fb      	ldr	r3, [r7, #12]
 8015cf6:	2221      	movs	r2, #33	@ 0x21
 8015cf8:	2103      	movs	r1, #3
 8015cfa:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8015cfc:	68fb      	ldr	r3, [r7, #12]
 8015cfe:	2220      	movs	r2, #32
 8015d00:	2100      	movs	r1, #0
 8015d02:	5499      	strb	r1, [r3, r2]

      return HAL_TIMEOUT;
 8015d04:	2303      	movs	r3, #3
 8015d06:	e046      	b.n	8015d96 <HAL_RTCEx_SetWakeUpTimer_IT+0x196>
    }
  } while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U);
 8015d08:	68fb      	ldr	r3, [r7, #12]
 8015d0a:	681b      	ldr	r3, [r3, #0]
 8015d0c:	68db      	ldr	r3, [r3, #12]
 8015d0e:	2204      	movs	r2, #4
 8015d10:	4013      	ands	r3, r2
 8015d12:	d0e5      	beq.n	8015ce0 <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 8015d14:	68fb      	ldr	r3, [r7, #12]
 8015d16:	681b      	ldr	r3, [r3, #0]
 8015d18:	689a      	ldr	r2, [r3, #8]
 8015d1a:	68fb      	ldr	r3, [r7, #12]
 8015d1c:	681b      	ldr	r3, [r3, #0]
 8015d1e:	2107      	movs	r1, #7
 8015d20:	438a      	bics	r2, r1
 8015d22:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 8015d24:	68fb      	ldr	r3, [r7, #12]
 8015d26:	681b      	ldr	r3, [r3, #0]
 8015d28:	6899      	ldr	r1, [r3, #8]
 8015d2a:	68fb      	ldr	r3, [r7, #12]
 8015d2c:	681b      	ldr	r3, [r3, #0]
 8015d2e:	687a      	ldr	r2, [r7, #4]
 8015d30:	430a      	orrs	r2, r1
 8015d32:	609a      	str	r2, [r3, #8]

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 8015d34:	68fb      	ldr	r3, [r7, #12]
 8015d36:	681b      	ldr	r3, [r3, #0]
 8015d38:	68ba      	ldr	r2, [r7, #8]
 8015d3a:	615a      	str	r2, [r3, #20]

  /* RTC wakeup timer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 8015d3c:	4b1b      	ldr	r3, [pc, #108]	@ (8015dac <HAL_RTCEx_SetWakeUpTimer_IT+0x1ac>)
 8015d3e:	681a      	ldr	r2, [r3, #0]
 8015d40:	4b1a      	ldr	r3, [pc, #104]	@ (8015dac <HAL_RTCEx_SetWakeUpTimer_IT+0x1ac>)
 8015d42:	2180      	movs	r1, #128	@ 0x80
 8015d44:	0349      	lsls	r1, r1, #13
 8015d46:	430a      	orrs	r2, r1
 8015d48:	601a      	str	r2, [r3, #0]
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 8015d4a:	4b18      	ldr	r3, [pc, #96]	@ (8015dac <HAL_RTCEx_SetWakeUpTimer_IT+0x1ac>)
 8015d4c:	689a      	ldr	r2, [r3, #8]
 8015d4e:	4b17      	ldr	r3, [pc, #92]	@ (8015dac <HAL_RTCEx_SetWakeUpTimer_IT+0x1ac>)
 8015d50:	2180      	movs	r1, #128	@ 0x80
 8015d52:	0349      	lsls	r1, r1, #13
 8015d54:	430a      	orrs	r2, r1
 8015d56:	609a      	str	r2, [r3, #8]

  /* Configure the interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 8015d58:	68fb      	ldr	r3, [r7, #12]
 8015d5a:	681b      	ldr	r3, [r3, #0]
 8015d5c:	689a      	ldr	r2, [r3, #8]
 8015d5e:	68fb      	ldr	r3, [r7, #12]
 8015d60:	681b      	ldr	r3, [r3, #0]
 8015d62:	2180      	movs	r1, #128	@ 0x80
 8015d64:	01c9      	lsls	r1, r1, #7
 8015d66:	430a      	orrs	r2, r1
 8015d68:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 8015d6a:	68fb      	ldr	r3, [r7, #12]
 8015d6c:	681b      	ldr	r3, [r3, #0]
 8015d6e:	689a      	ldr	r2, [r3, #8]
 8015d70:	68fb      	ldr	r3, [r7, #12]
 8015d72:	681b      	ldr	r3, [r3, #0]
 8015d74:	2180      	movs	r1, #128	@ 0x80
 8015d76:	00c9      	lsls	r1, r1, #3
 8015d78:	430a      	orrs	r2, r1
 8015d7a:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8015d7c:	68fb      	ldr	r3, [r7, #12]
 8015d7e:	681b      	ldr	r3, [r3, #0]
 8015d80:	22ff      	movs	r2, #255	@ 0xff
 8015d82:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8015d84:	68fb      	ldr	r3, [r7, #12]
 8015d86:	2221      	movs	r2, #33	@ 0x21
 8015d88:	2101      	movs	r1, #1
 8015d8a:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8015d8c:	68fb      	ldr	r3, [r7, #12]
 8015d8e:	2220      	movs	r2, #32
 8015d90:	2100      	movs	r1, #0
 8015d92:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8015d94:	2300      	movs	r3, #0
}
 8015d96:	0018      	movs	r0, r3
 8015d98:	46bd      	mov	sp, r7
 8015d9a:	b006      	add	sp, #24
 8015d9c:	bd80      	pop	{r7, pc}
 8015d9e:	46c0      	nop			@ (mov r8, r8)
 8015da0:	200000cc 	.word	0x200000cc
 8015da4:	fffffbff 	.word	0xfffffbff
 8015da8:	fffffb7f 	.word	0xfffffb7f
 8015dac:	40010400 	.word	0x40010400

08015db0 <HAL_RTCEx_DeactivateWakeUpTimer>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_DeactivateWakeUpTimer(RTC_HandleTypeDef *hrtc)
{
 8015db0:	b580      	push	{r7, lr}
 8015db2:	b084      	sub	sp, #16
 8015db4:	af00      	add	r7, sp, #0
 8015db6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8015db8:	2300      	movs	r3, #0
 8015dba:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8015dbc:	687b      	ldr	r3, [r7, #4]
 8015dbe:	2220      	movs	r2, #32
 8015dc0:	5c9b      	ldrb	r3, [r3, r2]
 8015dc2:	2b01      	cmp	r3, #1
 8015dc4:	d101      	bne.n	8015dca <HAL_RTCEx_DeactivateWakeUpTimer+0x1a>
 8015dc6:	2302      	movs	r3, #2
 8015dc8:	e04e      	b.n	8015e68 <HAL_RTCEx_DeactivateWakeUpTimer+0xb8>
 8015dca:	687b      	ldr	r3, [r7, #4]
 8015dcc:	2220      	movs	r2, #32
 8015dce:	2101      	movs	r1, #1
 8015dd0:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8015dd2:	687b      	ldr	r3, [r7, #4]
 8015dd4:	2221      	movs	r2, #33	@ 0x21
 8015dd6:	2102      	movs	r1, #2
 8015dd8:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8015dda:	687b      	ldr	r3, [r7, #4]
 8015ddc:	681b      	ldr	r3, [r3, #0]
 8015dde:	22ca      	movs	r2, #202	@ 0xca
 8015de0:	625a      	str	r2, [r3, #36]	@ 0x24
 8015de2:	687b      	ldr	r3, [r7, #4]
 8015de4:	681b      	ldr	r3, [r3, #0]
 8015de6:	2253      	movs	r2, #83	@ 0x53
 8015de8:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Disable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8015dea:	687b      	ldr	r3, [r7, #4]
 8015dec:	681b      	ldr	r3, [r3, #0]
 8015dee:	689a      	ldr	r2, [r3, #8]
 8015df0:	687b      	ldr	r3, [r7, #4]
 8015df2:	681b      	ldr	r3, [r3, #0]
 8015df4:	491e      	ldr	r1, [pc, #120]	@ (8015e70 <HAL_RTCEx_DeactivateWakeUpTimer+0xc0>)
 8015df6:	400a      	ands	r2, r1
 8015df8:	609a      	str	r2, [r3, #8]

  /* In case of interrupt mode is used, the interrupt source must disabled */
  __HAL_RTC_WAKEUPTIMER_DISABLE_IT(hrtc, RTC_IT_WUT);
 8015dfa:	687b      	ldr	r3, [r7, #4]
 8015dfc:	681b      	ldr	r3, [r3, #0]
 8015dfe:	689a      	ldr	r2, [r3, #8]
 8015e00:	687b      	ldr	r3, [r7, #4]
 8015e02:	681b      	ldr	r3, [r3, #0]
 8015e04:	491b      	ldr	r1, [pc, #108]	@ (8015e74 <HAL_RTCEx_DeactivateWakeUpTimer+0xc4>)
 8015e06:	400a      	ands	r2, r1
 8015e08:	609a      	str	r2, [r3, #8]

  /* Get tick */
  tickstart = HAL_GetTick();
 8015e0a:	f7f8 fb2d 	bl	800e468 <HAL_GetTick>
 8015e0e:	0003      	movs	r3, r0
 8015e10:	60fb      	str	r3, [r7, #12]

  /* Wait till RTC WUTWF flag is set and if timeout is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8015e12:	e016      	b.n	8015e42 <HAL_RTCEx_DeactivateWakeUpTimer+0x92>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8015e14:	f7f8 fb28 	bl	800e468 <HAL_GetTick>
 8015e18:	0002      	movs	r2, r0
 8015e1a:	68fb      	ldr	r3, [r7, #12]
 8015e1c:	1ad2      	subs	r2, r2, r3
 8015e1e:	23fa      	movs	r3, #250	@ 0xfa
 8015e20:	009b      	lsls	r3, r3, #2
 8015e22:	429a      	cmp	r2, r3
 8015e24:	d90d      	bls.n	8015e42 <HAL_RTCEx_DeactivateWakeUpTimer+0x92>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8015e26:	687b      	ldr	r3, [r7, #4]
 8015e28:	681b      	ldr	r3, [r3, #0]
 8015e2a:	22ff      	movs	r2, #255	@ 0xff
 8015e2c:	625a      	str	r2, [r3, #36]	@ 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8015e2e:	687b      	ldr	r3, [r7, #4]
 8015e30:	2221      	movs	r2, #33	@ 0x21
 8015e32:	2103      	movs	r1, #3
 8015e34:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8015e36:	687b      	ldr	r3, [r7, #4]
 8015e38:	2220      	movs	r2, #32
 8015e3a:	2100      	movs	r1, #0
 8015e3c:	5499      	strb	r1, [r3, r2]

      return HAL_TIMEOUT;
 8015e3e:	2303      	movs	r3, #3
 8015e40:	e012      	b.n	8015e68 <HAL_RTCEx_DeactivateWakeUpTimer+0xb8>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8015e42:	687b      	ldr	r3, [r7, #4]
 8015e44:	681b      	ldr	r3, [r3, #0]
 8015e46:	68db      	ldr	r3, [r3, #12]
 8015e48:	2204      	movs	r2, #4
 8015e4a:	4013      	ands	r3, r2
 8015e4c:	d0e2      	beq.n	8015e14 <HAL_RTCEx_DeactivateWakeUpTimer+0x64>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8015e4e:	687b      	ldr	r3, [r7, #4]
 8015e50:	681b      	ldr	r3, [r3, #0]
 8015e52:	22ff      	movs	r2, #255	@ 0xff
 8015e54:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8015e56:	687b      	ldr	r3, [r7, #4]
 8015e58:	2221      	movs	r2, #33	@ 0x21
 8015e5a:	2101      	movs	r1, #1
 8015e5c:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8015e5e:	687b      	ldr	r3, [r7, #4]
 8015e60:	2220      	movs	r2, #32
 8015e62:	2100      	movs	r1, #0
 8015e64:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8015e66:	2300      	movs	r3, #0
}
 8015e68:	0018      	movs	r0, r3
 8015e6a:	46bd      	mov	sp, r7
 8015e6c:	b004      	add	sp, #16
 8015e6e:	bd80      	pop	{r7, pc}
 8015e70:	fffffbff 	.word	0xfffffbff
 8015e74:	ffffbfff 	.word	0xffffbfff

08015e78 <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8015e78:	b580      	push	{r7, lr}
 8015e7a:	b082      	sub	sp, #8
 8015e7c:	af00      	add	r7, sp, #0
 8015e7e:	6078      	str	r0, [r7, #4]
  /* Clear the EXTI's line Flag for RTC WakeUpTimer */
  __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG();
 8015e80:	4b13      	ldr	r3, [pc, #76]	@ (8015ed0 <HAL_RTCEx_WakeUpTimerIRQHandler+0x58>)
 8015e82:	2280      	movs	r2, #128	@ 0x80
 8015e84:	0352      	lsls	r2, r2, #13
 8015e86:	615a      	str	r2, [r3, #20]

  /* Get the Wakeup timer interrupt source enable status */
  if (__HAL_RTC_WAKEUPTIMER_GET_IT_SOURCE(hrtc, RTC_IT_WUT) != RESET)
 8015e88:	687b      	ldr	r3, [r7, #4]
 8015e8a:	681b      	ldr	r3, [r3, #0]
 8015e8c:	689a      	ldr	r2, [r3, #8]
 8015e8e:	2380      	movs	r3, #128	@ 0x80
 8015e90:	01db      	lsls	r3, r3, #7
 8015e92:	4013      	ands	r3, r2
 8015e94:	d014      	beq.n	8015ec0 <HAL_RTCEx_WakeUpTimerIRQHandler+0x48>
  {
    /* Get the pending status of the Wakeup timer Interrupt */
    if (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTF) != 0U)
 8015e96:	687b      	ldr	r3, [r7, #4]
 8015e98:	681b      	ldr	r3, [r3, #0]
 8015e9a:	68da      	ldr	r2, [r3, #12]
 8015e9c:	2380      	movs	r3, #128	@ 0x80
 8015e9e:	00db      	lsls	r3, r3, #3
 8015ea0:	4013      	ands	r3, r2
 8015ea2:	d00d      	beq.n	8015ec0 <HAL_RTCEx_WakeUpTimerIRQHandler+0x48>
    {
      /* Clear the Wakeup timer interrupt pending bit */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8015ea4:	687b      	ldr	r3, [r7, #4]
 8015ea6:	681b      	ldr	r3, [r3, #0]
 8015ea8:	68db      	ldr	r3, [r3, #12]
 8015eaa:	22ff      	movs	r2, #255	@ 0xff
 8015eac:	401a      	ands	r2, r3
 8015eae:	687b      	ldr	r3, [r7, #4]
 8015eb0:	681b      	ldr	r3, [r3, #0]
 8015eb2:	4908      	ldr	r1, [pc, #32]	@ (8015ed4 <HAL_RTCEx_WakeUpTimerIRQHandler+0x5c>)
 8015eb4:	430a      	orrs	r2, r1
 8015eb6:	60da      	str	r2, [r3, #12]

      /* Wakeup timer callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->WakeUpTimerEventCallback(hrtc);
#else
      HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 8015eb8:	687b      	ldr	r3, [r7, #4]
 8015eba:	0018      	movs	r0, r3
 8015ebc:	f000 f80c 	bl	8015ed8 <HAL_RTCEx_WakeUpTimerEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8015ec0:	687b      	ldr	r3, [r7, #4]
 8015ec2:	2221      	movs	r2, #33	@ 0x21
 8015ec4:	2101      	movs	r1, #1
 8015ec6:	5499      	strb	r1, [r3, r2]
}
 8015ec8:	46c0      	nop			@ (mov r8, r8)
 8015eca:	46bd      	mov	sp, r7
 8015ecc:	b002      	add	sp, #8
 8015ece:	bd80      	pop	{r7, pc}
 8015ed0:	40010400 	.word	0x40010400
 8015ed4:	fffffb7f 	.word	0xfffffb7f

08015ed8 <HAL_RTCEx_WakeUpTimerEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc)
{
 8015ed8:	b580      	push	{r7, lr}
 8015eda:	b082      	sub	sp, #8
 8015edc:	af00      	add	r7, sp, #0
 8015ede:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_RTCEx_WakeUpTimerEventCallback could be implemented in the user file
   */
}
 8015ee0:	46c0      	nop			@ (mov r8, r8)
 8015ee2:	46bd      	mov	sp, r7
 8015ee4:	b002      	add	sp, #8
 8015ee6:	bd80      	pop	{r7, pc}

08015ee8 <HAL_RTCEx_BKUPWrite>:
  *                                 to specify the register.
  * @param  Data Data to be written in the specified RTC Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 8015ee8:	b580      	push	{r7, lr}
 8015eea:	b086      	sub	sp, #24
 8015eec:	af00      	add	r7, sp, #0
 8015eee:	60f8      	str	r0, [r7, #12]
 8015ef0:	60b9      	str	r1, [r7, #8]
 8015ef2:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0U;
 8015ef4:	2300      	movs	r3, #0
 8015ef6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 8015ef8:	68fb      	ldr	r3, [r7, #12]
 8015efa:	681b      	ldr	r3, [r3, #0]
 8015efc:	3350      	adds	r3, #80	@ 0x50
 8015efe:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 8015f00:	68bb      	ldr	r3, [r7, #8]
 8015f02:	009b      	lsls	r3, r3, #2
 8015f04:	697a      	ldr	r2, [r7, #20]
 8015f06:	18d3      	adds	r3, r2, r3
 8015f08:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 8015f0a:	697b      	ldr	r3, [r7, #20]
 8015f0c:	687a      	ldr	r2, [r7, #4]
 8015f0e:	601a      	str	r2, [r3, #0]
}
 8015f10:	46c0      	nop			@ (mov r8, r8)
 8015f12:	46bd      	mov	sp, r7
 8015f14:	b006      	add	sp, #24
 8015f16:	bd80      	pop	{r7, pc}

08015f18 <HAL_RTCEx_BKUPRead>:
  *          This parameter can be: RTC_BKP_DRx (where x can be from 0 to 4)
  *                                 to specify the register.
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 8015f18:	b580      	push	{r7, lr}
 8015f1a:	b084      	sub	sp, #16
 8015f1c:	af00      	add	r7, sp, #0
 8015f1e:	6078      	str	r0, [r7, #4]
 8015f20:	6039      	str	r1, [r7, #0]
  uint32_t tmp = 0U;
 8015f22:	2300      	movs	r3, #0
 8015f24:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 8015f26:	687b      	ldr	r3, [r7, #4]
 8015f28:	681b      	ldr	r3, [r3, #0]
 8015f2a:	3350      	adds	r3, #80	@ 0x50
 8015f2c:	60fb      	str	r3, [r7, #12]
  tmp += (BackupRegister * 4U);
 8015f2e:	683b      	ldr	r3, [r7, #0]
 8015f30:	009b      	lsls	r3, r3, #2
 8015f32:	68fa      	ldr	r2, [r7, #12]
 8015f34:	18d3      	adds	r3, r2, r3
 8015f36:	60fb      	str	r3, [r7, #12]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 8015f38:	68fb      	ldr	r3, [r7, #12]
 8015f3a:	681b      	ldr	r3, [r3, #0]
}
 8015f3c:	0018      	movs	r0, r3
 8015f3e:	46bd      	mov	sp, r7
 8015f40:	b004      	add	sp, #16
 8015f42:	bd80      	pop	{r7, pc}

08015f44 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8015f44:	b580      	push	{r7, lr}
 8015f46:	b082      	sub	sp, #8
 8015f48:	af00      	add	r7, sp, #0
 8015f4a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8015f4c:	687b      	ldr	r3, [r7, #4]
 8015f4e:	2b00      	cmp	r3, #0
 8015f50:	d101      	bne.n	8015f56 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8015f52:	2301      	movs	r3, #1
 8015f54:	e032      	b.n	8015fbc <HAL_TIM_Base_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8015f56:	687b      	ldr	r3, [r7, #4]
 8015f58:	2239      	movs	r2, #57	@ 0x39
 8015f5a:	5c9b      	ldrb	r3, [r3, r2]
 8015f5c:	b2db      	uxtb	r3, r3
 8015f5e:	2b00      	cmp	r3, #0
 8015f60:	d107      	bne.n	8015f72 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8015f62:	687b      	ldr	r3, [r7, #4]
 8015f64:	2238      	movs	r2, #56	@ 0x38
 8015f66:	2100      	movs	r1, #0
 8015f68:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8015f6a:	687b      	ldr	r3, [r7, #4]
 8015f6c:	0018      	movs	r0, r3
 8015f6e:	f7f7 fb7d 	bl	800d66c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8015f72:	687b      	ldr	r3, [r7, #4]
 8015f74:	2239      	movs	r2, #57	@ 0x39
 8015f76:	2102      	movs	r1, #2
 8015f78:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8015f7a:	687b      	ldr	r3, [r7, #4]
 8015f7c:	681a      	ldr	r2, [r3, #0]
 8015f7e:	687b      	ldr	r3, [r7, #4]
 8015f80:	3304      	adds	r3, #4
 8015f82:	0019      	movs	r1, r3
 8015f84:	0010      	movs	r0, r2
 8015f86:	f000 fa1d 	bl	80163c4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8015f8a:	687b      	ldr	r3, [r7, #4]
 8015f8c:	223e      	movs	r2, #62	@ 0x3e
 8015f8e:	2101      	movs	r1, #1
 8015f90:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8015f92:	687b      	ldr	r3, [r7, #4]
 8015f94:	223a      	movs	r2, #58	@ 0x3a
 8015f96:	2101      	movs	r1, #1
 8015f98:	5499      	strb	r1, [r3, r2]
 8015f9a:	687b      	ldr	r3, [r7, #4]
 8015f9c:	223b      	movs	r2, #59	@ 0x3b
 8015f9e:	2101      	movs	r1, #1
 8015fa0:	5499      	strb	r1, [r3, r2]
 8015fa2:	687b      	ldr	r3, [r7, #4]
 8015fa4:	223c      	movs	r2, #60	@ 0x3c
 8015fa6:	2101      	movs	r1, #1
 8015fa8:	5499      	strb	r1, [r3, r2]
 8015faa:	687b      	ldr	r3, [r7, #4]
 8015fac:	223d      	movs	r2, #61	@ 0x3d
 8015fae:	2101      	movs	r1, #1
 8015fb0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8015fb2:	687b      	ldr	r3, [r7, #4]
 8015fb4:	2239      	movs	r2, #57	@ 0x39
 8015fb6:	2101      	movs	r1, #1
 8015fb8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8015fba:	2300      	movs	r3, #0
}
 8015fbc:	0018      	movs	r0, r3
 8015fbe:	46bd      	mov	sp, r7
 8015fc0:	b002      	add	sp, #8
 8015fc2:	bd80      	pop	{r7, pc}

08015fc4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8015fc4:	b580      	push	{r7, lr}
 8015fc6:	b084      	sub	sp, #16
 8015fc8:	af00      	add	r7, sp, #0
 8015fca:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8015fcc:	687b      	ldr	r3, [r7, #4]
 8015fce:	2239      	movs	r2, #57	@ 0x39
 8015fd0:	5c9b      	ldrb	r3, [r3, r2]
 8015fd2:	b2db      	uxtb	r3, r3
 8015fd4:	2b01      	cmp	r3, #1
 8015fd6:	d001      	beq.n	8015fdc <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8015fd8:	2301      	movs	r3, #1
 8015fda:	e033      	b.n	8016044 <HAL_TIM_Base_Start+0x80>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8015fdc:	687b      	ldr	r3, [r7, #4]
 8015fde:	2239      	movs	r2, #57	@ 0x39
 8015fe0:	2102      	movs	r1, #2
 8015fe2:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8015fe4:	687b      	ldr	r3, [r7, #4]
 8015fe6:	681a      	ldr	r2, [r3, #0]
 8015fe8:	2380      	movs	r3, #128	@ 0x80
 8015fea:	05db      	lsls	r3, r3, #23
 8015fec:	429a      	cmp	r2, r3
 8015fee:	d00e      	beq.n	801600e <HAL_TIM_Base_Start+0x4a>
 8015ff0:	687b      	ldr	r3, [r7, #4]
 8015ff2:	681b      	ldr	r3, [r3, #0]
 8015ff4:	4a15      	ldr	r2, [pc, #84]	@ (801604c <HAL_TIM_Base_Start+0x88>)
 8015ff6:	4293      	cmp	r3, r2
 8015ff8:	d009      	beq.n	801600e <HAL_TIM_Base_Start+0x4a>
 8015ffa:	687b      	ldr	r3, [r7, #4]
 8015ffc:	681b      	ldr	r3, [r3, #0]
 8015ffe:	4a14      	ldr	r2, [pc, #80]	@ (8016050 <HAL_TIM_Base_Start+0x8c>)
 8016000:	4293      	cmp	r3, r2
 8016002:	d004      	beq.n	801600e <HAL_TIM_Base_Start+0x4a>
 8016004:	687b      	ldr	r3, [r7, #4]
 8016006:	681b      	ldr	r3, [r3, #0]
 8016008:	4a12      	ldr	r2, [pc, #72]	@ (8016054 <HAL_TIM_Base_Start+0x90>)
 801600a:	4293      	cmp	r3, r2
 801600c:	d111      	bne.n	8016032 <HAL_TIM_Base_Start+0x6e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 801600e:	687b      	ldr	r3, [r7, #4]
 8016010:	681b      	ldr	r3, [r3, #0]
 8016012:	689b      	ldr	r3, [r3, #8]
 8016014:	2207      	movs	r2, #7
 8016016:	4013      	ands	r3, r2
 8016018:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801601a:	68fb      	ldr	r3, [r7, #12]
 801601c:	2b06      	cmp	r3, #6
 801601e:	d010      	beq.n	8016042 <HAL_TIM_Base_Start+0x7e>
    {
      __HAL_TIM_ENABLE(htim);
 8016020:	687b      	ldr	r3, [r7, #4]
 8016022:	681b      	ldr	r3, [r3, #0]
 8016024:	681a      	ldr	r2, [r3, #0]
 8016026:	687b      	ldr	r3, [r7, #4]
 8016028:	681b      	ldr	r3, [r3, #0]
 801602a:	2101      	movs	r1, #1
 801602c:	430a      	orrs	r2, r1
 801602e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8016030:	e007      	b.n	8016042 <HAL_TIM_Base_Start+0x7e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8016032:	687b      	ldr	r3, [r7, #4]
 8016034:	681b      	ldr	r3, [r3, #0]
 8016036:	681a      	ldr	r2, [r3, #0]
 8016038:	687b      	ldr	r3, [r7, #4]
 801603a:	681b      	ldr	r3, [r3, #0]
 801603c:	2101      	movs	r1, #1
 801603e:	430a      	orrs	r2, r1
 8016040:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8016042:	2300      	movs	r3, #0
}
 8016044:	0018      	movs	r0, r3
 8016046:	46bd      	mov	sp, r7
 8016048:	b004      	add	sp, #16
 801604a:	bd80      	pop	{r7, pc}
 801604c:	40000400 	.word	0x40000400
 8016050:	40010800 	.word	0x40010800
 8016054:	40011400 	.word	0x40011400

08016058 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8016058:	b580      	push	{r7, lr}
 801605a:	b082      	sub	sp, #8
 801605c:	af00      	add	r7, sp, #0
 801605e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8016060:	687b      	ldr	r3, [r7, #4]
 8016062:	681b      	ldr	r3, [r3, #0]
 8016064:	6a1b      	ldr	r3, [r3, #32]
 8016066:	4a0a      	ldr	r2, [pc, #40]	@ (8016090 <HAL_TIM_Base_Stop+0x38>)
 8016068:	4013      	ands	r3, r2
 801606a:	d107      	bne.n	801607c <HAL_TIM_Base_Stop+0x24>
 801606c:	687b      	ldr	r3, [r7, #4]
 801606e:	681b      	ldr	r3, [r3, #0]
 8016070:	681a      	ldr	r2, [r3, #0]
 8016072:	687b      	ldr	r3, [r7, #4]
 8016074:	681b      	ldr	r3, [r3, #0]
 8016076:	2101      	movs	r1, #1
 8016078:	438a      	bics	r2, r1
 801607a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 801607c:	687b      	ldr	r3, [r7, #4]
 801607e:	2239      	movs	r2, #57	@ 0x39
 8016080:	2101      	movs	r1, #1
 8016082:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8016084:	2300      	movs	r3, #0
}
 8016086:	0018      	movs	r0, r3
 8016088:	46bd      	mov	sp, r7
 801608a:	b002      	add	sp, #8
 801608c:	bd80      	pop	{r7, pc}
 801608e:	46c0      	nop			@ (mov r8, r8)
 8016090:	00001111 	.word	0x00001111

08016094 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8016094:	b580      	push	{r7, lr}
 8016096:	b082      	sub	sp, #8
 8016098:	af00      	add	r7, sp, #0
 801609a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 801609c:	687b      	ldr	r3, [r7, #4]
 801609e:	2b00      	cmp	r3, #0
 80160a0:	d101      	bne.n	80160a6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80160a2:	2301      	movs	r3, #1
 80160a4:	e032      	b.n	801610c <HAL_TIM_PWM_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80160a6:	687b      	ldr	r3, [r7, #4]
 80160a8:	2239      	movs	r2, #57	@ 0x39
 80160aa:	5c9b      	ldrb	r3, [r3, r2]
 80160ac:	b2db      	uxtb	r3, r3
 80160ae:	2b00      	cmp	r3, #0
 80160b0:	d107      	bne.n	80160c2 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80160b2:	687b      	ldr	r3, [r7, #4]
 80160b4:	2238      	movs	r2, #56	@ 0x38
 80160b6:	2100      	movs	r1, #0
 80160b8:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80160ba:	687b      	ldr	r3, [r7, #4]
 80160bc:	0018      	movs	r0, r3
 80160be:	f7f7 fab1 	bl	800d624 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80160c2:	687b      	ldr	r3, [r7, #4]
 80160c4:	2239      	movs	r2, #57	@ 0x39
 80160c6:	2102      	movs	r1, #2
 80160c8:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80160ca:	687b      	ldr	r3, [r7, #4]
 80160cc:	681a      	ldr	r2, [r3, #0]
 80160ce:	687b      	ldr	r3, [r7, #4]
 80160d0:	3304      	adds	r3, #4
 80160d2:	0019      	movs	r1, r3
 80160d4:	0010      	movs	r0, r2
 80160d6:	f000 f975 	bl	80163c4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80160da:	687b      	ldr	r3, [r7, #4]
 80160dc:	223e      	movs	r2, #62	@ 0x3e
 80160de:	2101      	movs	r1, #1
 80160e0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80160e2:	687b      	ldr	r3, [r7, #4]
 80160e4:	223a      	movs	r2, #58	@ 0x3a
 80160e6:	2101      	movs	r1, #1
 80160e8:	5499      	strb	r1, [r3, r2]
 80160ea:	687b      	ldr	r3, [r7, #4]
 80160ec:	223b      	movs	r2, #59	@ 0x3b
 80160ee:	2101      	movs	r1, #1
 80160f0:	5499      	strb	r1, [r3, r2]
 80160f2:	687b      	ldr	r3, [r7, #4]
 80160f4:	223c      	movs	r2, #60	@ 0x3c
 80160f6:	2101      	movs	r1, #1
 80160f8:	5499      	strb	r1, [r3, r2]
 80160fa:	687b      	ldr	r3, [r7, #4]
 80160fc:	223d      	movs	r2, #61	@ 0x3d
 80160fe:	2101      	movs	r1, #1
 8016100:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8016102:	687b      	ldr	r3, [r7, #4]
 8016104:	2239      	movs	r2, #57	@ 0x39
 8016106:	2101      	movs	r1, #1
 8016108:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 801610a:	2300      	movs	r3, #0
}
 801610c:	0018      	movs	r0, r3
 801610e:	46bd      	mov	sp, r7
 8016110:	b002      	add	sp, #8
 8016112:	bd80      	pop	{r7, pc}

08016114 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8016114:	b580      	push	{r7, lr}
 8016116:	b084      	sub	sp, #16
 8016118:	af00      	add	r7, sp, #0
 801611a:	6078      	str	r0, [r7, #4]
 801611c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 801611e:	683b      	ldr	r3, [r7, #0]
 8016120:	2b00      	cmp	r3, #0
 8016122:	d108      	bne.n	8016136 <HAL_TIM_PWM_Start+0x22>
 8016124:	687b      	ldr	r3, [r7, #4]
 8016126:	223a      	movs	r2, #58	@ 0x3a
 8016128:	5c9b      	ldrb	r3, [r3, r2]
 801612a:	b2db      	uxtb	r3, r3
 801612c:	3b01      	subs	r3, #1
 801612e:	1e5a      	subs	r2, r3, #1
 8016130:	4193      	sbcs	r3, r2
 8016132:	b2db      	uxtb	r3, r3
 8016134:	e01f      	b.n	8016176 <HAL_TIM_PWM_Start+0x62>
 8016136:	683b      	ldr	r3, [r7, #0]
 8016138:	2b04      	cmp	r3, #4
 801613a:	d108      	bne.n	801614e <HAL_TIM_PWM_Start+0x3a>
 801613c:	687b      	ldr	r3, [r7, #4]
 801613e:	223b      	movs	r2, #59	@ 0x3b
 8016140:	5c9b      	ldrb	r3, [r3, r2]
 8016142:	b2db      	uxtb	r3, r3
 8016144:	3b01      	subs	r3, #1
 8016146:	1e5a      	subs	r2, r3, #1
 8016148:	4193      	sbcs	r3, r2
 801614a:	b2db      	uxtb	r3, r3
 801614c:	e013      	b.n	8016176 <HAL_TIM_PWM_Start+0x62>
 801614e:	683b      	ldr	r3, [r7, #0]
 8016150:	2b08      	cmp	r3, #8
 8016152:	d108      	bne.n	8016166 <HAL_TIM_PWM_Start+0x52>
 8016154:	687b      	ldr	r3, [r7, #4]
 8016156:	223c      	movs	r2, #60	@ 0x3c
 8016158:	5c9b      	ldrb	r3, [r3, r2]
 801615a:	b2db      	uxtb	r3, r3
 801615c:	3b01      	subs	r3, #1
 801615e:	1e5a      	subs	r2, r3, #1
 8016160:	4193      	sbcs	r3, r2
 8016162:	b2db      	uxtb	r3, r3
 8016164:	e007      	b.n	8016176 <HAL_TIM_PWM_Start+0x62>
 8016166:	687b      	ldr	r3, [r7, #4]
 8016168:	223d      	movs	r2, #61	@ 0x3d
 801616a:	5c9b      	ldrb	r3, [r3, r2]
 801616c:	b2db      	uxtb	r3, r3
 801616e:	3b01      	subs	r3, #1
 8016170:	1e5a      	subs	r2, r3, #1
 8016172:	4193      	sbcs	r3, r2
 8016174:	b2db      	uxtb	r3, r3
 8016176:	2b00      	cmp	r3, #0
 8016178:	d001      	beq.n	801617e <HAL_TIM_PWM_Start+0x6a>
  {
    return HAL_ERROR;
 801617a:	2301      	movs	r3, #1
 801617c:	e052      	b.n	8016224 <HAL_TIM_PWM_Start+0x110>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 801617e:	683b      	ldr	r3, [r7, #0]
 8016180:	2b00      	cmp	r3, #0
 8016182:	d104      	bne.n	801618e <HAL_TIM_PWM_Start+0x7a>
 8016184:	687b      	ldr	r3, [r7, #4]
 8016186:	223a      	movs	r2, #58	@ 0x3a
 8016188:	2102      	movs	r1, #2
 801618a:	5499      	strb	r1, [r3, r2]
 801618c:	e013      	b.n	80161b6 <HAL_TIM_PWM_Start+0xa2>
 801618e:	683b      	ldr	r3, [r7, #0]
 8016190:	2b04      	cmp	r3, #4
 8016192:	d104      	bne.n	801619e <HAL_TIM_PWM_Start+0x8a>
 8016194:	687b      	ldr	r3, [r7, #4]
 8016196:	223b      	movs	r2, #59	@ 0x3b
 8016198:	2102      	movs	r1, #2
 801619a:	5499      	strb	r1, [r3, r2]
 801619c:	e00b      	b.n	80161b6 <HAL_TIM_PWM_Start+0xa2>
 801619e:	683b      	ldr	r3, [r7, #0]
 80161a0:	2b08      	cmp	r3, #8
 80161a2:	d104      	bne.n	80161ae <HAL_TIM_PWM_Start+0x9a>
 80161a4:	687b      	ldr	r3, [r7, #4]
 80161a6:	223c      	movs	r2, #60	@ 0x3c
 80161a8:	2102      	movs	r1, #2
 80161aa:	5499      	strb	r1, [r3, r2]
 80161ac:	e003      	b.n	80161b6 <HAL_TIM_PWM_Start+0xa2>
 80161ae:	687b      	ldr	r3, [r7, #4]
 80161b0:	223d      	movs	r2, #61	@ 0x3d
 80161b2:	2102      	movs	r1, #2
 80161b4:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80161b6:	687b      	ldr	r3, [r7, #4]
 80161b8:	681b      	ldr	r3, [r3, #0]
 80161ba:	6839      	ldr	r1, [r7, #0]
 80161bc:	2201      	movs	r2, #1
 80161be:	0018      	movs	r0, r3
 80161c0:	f000 fa62 	bl	8016688 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80161c4:	687b      	ldr	r3, [r7, #4]
 80161c6:	681a      	ldr	r2, [r3, #0]
 80161c8:	2380      	movs	r3, #128	@ 0x80
 80161ca:	05db      	lsls	r3, r3, #23
 80161cc:	429a      	cmp	r2, r3
 80161ce:	d00e      	beq.n	80161ee <HAL_TIM_PWM_Start+0xda>
 80161d0:	687b      	ldr	r3, [r7, #4]
 80161d2:	681b      	ldr	r3, [r3, #0]
 80161d4:	4a15      	ldr	r2, [pc, #84]	@ (801622c <HAL_TIM_PWM_Start+0x118>)
 80161d6:	4293      	cmp	r3, r2
 80161d8:	d009      	beq.n	80161ee <HAL_TIM_PWM_Start+0xda>
 80161da:	687b      	ldr	r3, [r7, #4]
 80161dc:	681b      	ldr	r3, [r3, #0]
 80161de:	4a14      	ldr	r2, [pc, #80]	@ (8016230 <HAL_TIM_PWM_Start+0x11c>)
 80161e0:	4293      	cmp	r3, r2
 80161e2:	d004      	beq.n	80161ee <HAL_TIM_PWM_Start+0xda>
 80161e4:	687b      	ldr	r3, [r7, #4]
 80161e6:	681b      	ldr	r3, [r3, #0]
 80161e8:	4a12      	ldr	r2, [pc, #72]	@ (8016234 <HAL_TIM_PWM_Start+0x120>)
 80161ea:	4293      	cmp	r3, r2
 80161ec:	d111      	bne.n	8016212 <HAL_TIM_PWM_Start+0xfe>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80161ee:	687b      	ldr	r3, [r7, #4]
 80161f0:	681b      	ldr	r3, [r3, #0]
 80161f2:	689b      	ldr	r3, [r3, #8]
 80161f4:	2207      	movs	r2, #7
 80161f6:	4013      	ands	r3, r2
 80161f8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80161fa:	68fb      	ldr	r3, [r7, #12]
 80161fc:	2b06      	cmp	r3, #6
 80161fe:	d010      	beq.n	8016222 <HAL_TIM_PWM_Start+0x10e>
    {
      __HAL_TIM_ENABLE(htim);
 8016200:	687b      	ldr	r3, [r7, #4]
 8016202:	681b      	ldr	r3, [r3, #0]
 8016204:	681a      	ldr	r2, [r3, #0]
 8016206:	687b      	ldr	r3, [r7, #4]
 8016208:	681b      	ldr	r3, [r3, #0]
 801620a:	2101      	movs	r1, #1
 801620c:	430a      	orrs	r2, r1
 801620e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8016210:	e007      	b.n	8016222 <HAL_TIM_PWM_Start+0x10e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8016212:	687b      	ldr	r3, [r7, #4]
 8016214:	681b      	ldr	r3, [r3, #0]
 8016216:	681a      	ldr	r2, [r3, #0]
 8016218:	687b      	ldr	r3, [r7, #4]
 801621a:	681b      	ldr	r3, [r3, #0]
 801621c:	2101      	movs	r1, #1
 801621e:	430a      	orrs	r2, r1
 8016220:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8016222:	2300      	movs	r3, #0
}
 8016224:	0018      	movs	r0, r3
 8016226:	46bd      	mov	sp, r7
 8016228:	b004      	add	sp, #16
 801622a:	bd80      	pop	{r7, pc}
 801622c:	40000400 	.word	0x40000400
 8016230:	40010800 	.word	0x40010800
 8016234:	40011400 	.word	0x40011400

08016238 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8016238:	b580      	push	{r7, lr}
 801623a:	b086      	sub	sp, #24
 801623c:	af00      	add	r7, sp, #0
 801623e:	60f8      	str	r0, [r7, #12]
 8016240:	60b9      	str	r1, [r7, #8]
 8016242:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8016244:	2317      	movs	r3, #23
 8016246:	18fb      	adds	r3, r7, r3
 8016248:	2200      	movs	r2, #0
 801624a:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 801624c:	68fb      	ldr	r3, [r7, #12]
 801624e:	2238      	movs	r2, #56	@ 0x38
 8016250:	5c9b      	ldrb	r3, [r3, r2]
 8016252:	2b01      	cmp	r3, #1
 8016254:	d101      	bne.n	801625a <HAL_TIM_PWM_ConfigChannel+0x22>
 8016256:	2302      	movs	r3, #2
 8016258:	e0ad      	b.n	80163b6 <HAL_TIM_PWM_ConfigChannel+0x17e>
 801625a:	68fb      	ldr	r3, [r7, #12]
 801625c:	2238      	movs	r2, #56	@ 0x38
 801625e:	2101      	movs	r1, #1
 8016260:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8016262:	687b      	ldr	r3, [r7, #4]
 8016264:	2b0c      	cmp	r3, #12
 8016266:	d100      	bne.n	801626a <HAL_TIM_PWM_ConfigChannel+0x32>
 8016268:	e076      	b.n	8016358 <HAL_TIM_PWM_ConfigChannel+0x120>
 801626a:	687b      	ldr	r3, [r7, #4]
 801626c:	2b0c      	cmp	r3, #12
 801626e:	d900      	bls.n	8016272 <HAL_TIM_PWM_ConfigChannel+0x3a>
 8016270:	e095      	b.n	801639e <HAL_TIM_PWM_ConfigChannel+0x166>
 8016272:	687b      	ldr	r3, [r7, #4]
 8016274:	2b08      	cmp	r3, #8
 8016276:	d04e      	beq.n	8016316 <HAL_TIM_PWM_ConfigChannel+0xde>
 8016278:	687b      	ldr	r3, [r7, #4]
 801627a:	2b08      	cmp	r3, #8
 801627c:	d900      	bls.n	8016280 <HAL_TIM_PWM_ConfigChannel+0x48>
 801627e:	e08e      	b.n	801639e <HAL_TIM_PWM_ConfigChannel+0x166>
 8016280:	687b      	ldr	r3, [r7, #4]
 8016282:	2b00      	cmp	r3, #0
 8016284:	d003      	beq.n	801628e <HAL_TIM_PWM_ConfigChannel+0x56>
 8016286:	687b      	ldr	r3, [r7, #4]
 8016288:	2b04      	cmp	r3, #4
 801628a:	d021      	beq.n	80162d0 <HAL_TIM_PWM_ConfigChannel+0x98>
 801628c:	e087      	b.n	801639e <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 801628e:	68fb      	ldr	r3, [r7, #12]
 8016290:	681b      	ldr	r3, [r3, #0]
 8016292:	68ba      	ldr	r2, [r7, #8]
 8016294:	0011      	movs	r1, r2
 8016296:	0018      	movs	r0, r3
 8016298:	f000 f8f2 	bl	8016480 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 801629c:	68fb      	ldr	r3, [r7, #12]
 801629e:	681b      	ldr	r3, [r3, #0]
 80162a0:	699a      	ldr	r2, [r3, #24]
 80162a2:	68fb      	ldr	r3, [r7, #12]
 80162a4:	681b      	ldr	r3, [r3, #0]
 80162a6:	2108      	movs	r1, #8
 80162a8:	430a      	orrs	r2, r1
 80162aa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80162ac:	68fb      	ldr	r3, [r7, #12]
 80162ae:	681b      	ldr	r3, [r3, #0]
 80162b0:	699a      	ldr	r2, [r3, #24]
 80162b2:	68fb      	ldr	r3, [r7, #12]
 80162b4:	681b      	ldr	r3, [r3, #0]
 80162b6:	2104      	movs	r1, #4
 80162b8:	438a      	bics	r2, r1
 80162ba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80162bc:	68fb      	ldr	r3, [r7, #12]
 80162be:	681b      	ldr	r3, [r3, #0]
 80162c0:	6999      	ldr	r1, [r3, #24]
 80162c2:	68bb      	ldr	r3, [r7, #8]
 80162c4:	68da      	ldr	r2, [r3, #12]
 80162c6:	68fb      	ldr	r3, [r7, #12]
 80162c8:	681b      	ldr	r3, [r3, #0]
 80162ca:	430a      	orrs	r2, r1
 80162cc:	619a      	str	r2, [r3, #24]
      break;
 80162ce:	e06b      	b.n	80163a8 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80162d0:	68fb      	ldr	r3, [r7, #12]
 80162d2:	681b      	ldr	r3, [r3, #0]
 80162d4:	68ba      	ldr	r2, [r7, #8]
 80162d6:	0011      	movs	r1, r2
 80162d8:	0018      	movs	r0, r3
 80162da:	f000 f90d 	bl	80164f8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80162de:	68fb      	ldr	r3, [r7, #12]
 80162e0:	681b      	ldr	r3, [r3, #0]
 80162e2:	699a      	ldr	r2, [r3, #24]
 80162e4:	68fb      	ldr	r3, [r7, #12]
 80162e6:	681b      	ldr	r3, [r3, #0]
 80162e8:	2180      	movs	r1, #128	@ 0x80
 80162ea:	0109      	lsls	r1, r1, #4
 80162ec:	430a      	orrs	r2, r1
 80162ee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80162f0:	68fb      	ldr	r3, [r7, #12]
 80162f2:	681b      	ldr	r3, [r3, #0]
 80162f4:	699a      	ldr	r2, [r3, #24]
 80162f6:	68fb      	ldr	r3, [r7, #12]
 80162f8:	681b      	ldr	r3, [r3, #0]
 80162fa:	4931      	ldr	r1, [pc, #196]	@ (80163c0 <HAL_TIM_PWM_ConfigChannel+0x188>)
 80162fc:	400a      	ands	r2, r1
 80162fe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8016300:	68fb      	ldr	r3, [r7, #12]
 8016302:	681b      	ldr	r3, [r3, #0]
 8016304:	6999      	ldr	r1, [r3, #24]
 8016306:	68bb      	ldr	r3, [r7, #8]
 8016308:	68db      	ldr	r3, [r3, #12]
 801630a:	021a      	lsls	r2, r3, #8
 801630c:	68fb      	ldr	r3, [r7, #12]
 801630e:	681b      	ldr	r3, [r3, #0]
 8016310:	430a      	orrs	r2, r1
 8016312:	619a      	str	r2, [r3, #24]
      break;
 8016314:	e048      	b.n	80163a8 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8016316:	68fb      	ldr	r3, [r7, #12]
 8016318:	681b      	ldr	r3, [r3, #0]
 801631a:	68ba      	ldr	r2, [r7, #8]
 801631c:	0011      	movs	r1, r2
 801631e:	0018      	movs	r0, r3
 8016320:	f000 f92c 	bl	801657c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8016324:	68fb      	ldr	r3, [r7, #12]
 8016326:	681b      	ldr	r3, [r3, #0]
 8016328:	69da      	ldr	r2, [r3, #28]
 801632a:	68fb      	ldr	r3, [r7, #12]
 801632c:	681b      	ldr	r3, [r3, #0]
 801632e:	2108      	movs	r1, #8
 8016330:	430a      	orrs	r2, r1
 8016332:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8016334:	68fb      	ldr	r3, [r7, #12]
 8016336:	681b      	ldr	r3, [r3, #0]
 8016338:	69da      	ldr	r2, [r3, #28]
 801633a:	68fb      	ldr	r3, [r7, #12]
 801633c:	681b      	ldr	r3, [r3, #0]
 801633e:	2104      	movs	r1, #4
 8016340:	438a      	bics	r2, r1
 8016342:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8016344:	68fb      	ldr	r3, [r7, #12]
 8016346:	681b      	ldr	r3, [r3, #0]
 8016348:	69d9      	ldr	r1, [r3, #28]
 801634a:	68bb      	ldr	r3, [r7, #8]
 801634c:	68da      	ldr	r2, [r3, #12]
 801634e:	68fb      	ldr	r3, [r7, #12]
 8016350:	681b      	ldr	r3, [r3, #0]
 8016352:	430a      	orrs	r2, r1
 8016354:	61da      	str	r2, [r3, #28]
      break;
 8016356:	e027      	b.n	80163a8 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8016358:	68fb      	ldr	r3, [r7, #12]
 801635a:	681b      	ldr	r3, [r3, #0]
 801635c:	68ba      	ldr	r2, [r7, #8]
 801635e:	0011      	movs	r1, r2
 8016360:	0018      	movs	r0, r3
 8016362:	f000 f94b 	bl	80165fc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8016366:	68fb      	ldr	r3, [r7, #12]
 8016368:	681b      	ldr	r3, [r3, #0]
 801636a:	69da      	ldr	r2, [r3, #28]
 801636c:	68fb      	ldr	r3, [r7, #12]
 801636e:	681b      	ldr	r3, [r3, #0]
 8016370:	2180      	movs	r1, #128	@ 0x80
 8016372:	0109      	lsls	r1, r1, #4
 8016374:	430a      	orrs	r2, r1
 8016376:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8016378:	68fb      	ldr	r3, [r7, #12]
 801637a:	681b      	ldr	r3, [r3, #0]
 801637c:	69da      	ldr	r2, [r3, #28]
 801637e:	68fb      	ldr	r3, [r7, #12]
 8016380:	681b      	ldr	r3, [r3, #0]
 8016382:	490f      	ldr	r1, [pc, #60]	@ (80163c0 <HAL_TIM_PWM_ConfigChannel+0x188>)
 8016384:	400a      	ands	r2, r1
 8016386:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8016388:	68fb      	ldr	r3, [r7, #12]
 801638a:	681b      	ldr	r3, [r3, #0]
 801638c:	69d9      	ldr	r1, [r3, #28]
 801638e:	68bb      	ldr	r3, [r7, #8]
 8016390:	68db      	ldr	r3, [r3, #12]
 8016392:	021a      	lsls	r2, r3, #8
 8016394:	68fb      	ldr	r3, [r7, #12]
 8016396:	681b      	ldr	r3, [r3, #0]
 8016398:	430a      	orrs	r2, r1
 801639a:	61da      	str	r2, [r3, #28]
      break;
 801639c:	e004      	b.n	80163a8 <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 801639e:	2317      	movs	r3, #23
 80163a0:	18fb      	adds	r3, r7, r3
 80163a2:	2201      	movs	r2, #1
 80163a4:	701a      	strb	r2, [r3, #0]
      break;
 80163a6:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 80163a8:	68fb      	ldr	r3, [r7, #12]
 80163aa:	2238      	movs	r2, #56	@ 0x38
 80163ac:	2100      	movs	r1, #0
 80163ae:	5499      	strb	r1, [r3, r2]

  return status;
 80163b0:	2317      	movs	r3, #23
 80163b2:	18fb      	adds	r3, r7, r3
 80163b4:	781b      	ldrb	r3, [r3, #0]
}
 80163b6:	0018      	movs	r0, r3
 80163b8:	46bd      	mov	sp, r7
 80163ba:	b006      	add	sp, #24
 80163bc:	bd80      	pop	{r7, pc}
 80163be:	46c0      	nop			@ (mov r8, r8)
 80163c0:	fffffbff 	.word	0xfffffbff

080163c4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80163c4:	b580      	push	{r7, lr}
 80163c6:	b084      	sub	sp, #16
 80163c8:	af00      	add	r7, sp, #0
 80163ca:	6078      	str	r0, [r7, #4]
 80163cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80163ce:	687b      	ldr	r3, [r7, #4]
 80163d0:	681b      	ldr	r3, [r3, #0]
 80163d2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80163d4:	687a      	ldr	r2, [r7, #4]
 80163d6:	2380      	movs	r3, #128	@ 0x80
 80163d8:	05db      	lsls	r3, r3, #23
 80163da:	429a      	cmp	r2, r3
 80163dc:	d00b      	beq.n	80163f6 <TIM_Base_SetConfig+0x32>
 80163de:	687b      	ldr	r3, [r7, #4]
 80163e0:	4a23      	ldr	r2, [pc, #140]	@ (8016470 <TIM_Base_SetConfig+0xac>)
 80163e2:	4293      	cmp	r3, r2
 80163e4:	d007      	beq.n	80163f6 <TIM_Base_SetConfig+0x32>
 80163e6:	687b      	ldr	r3, [r7, #4]
 80163e8:	4a22      	ldr	r2, [pc, #136]	@ (8016474 <TIM_Base_SetConfig+0xb0>)
 80163ea:	4293      	cmp	r3, r2
 80163ec:	d003      	beq.n	80163f6 <TIM_Base_SetConfig+0x32>
 80163ee:	687b      	ldr	r3, [r7, #4]
 80163f0:	4a21      	ldr	r2, [pc, #132]	@ (8016478 <TIM_Base_SetConfig+0xb4>)
 80163f2:	4293      	cmp	r3, r2
 80163f4:	d108      	bne.n	8016408 <TIM_Base_SetConfig+0x44>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80163f6:	68fb      	ldr	r3, [r7, #12]
 80163f8:	2270      	movs	r2, #112	@ 0x70
 80163fa:	4393      	bics	r3, r2
 80163fc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80163fe:	683b      	ldr	r3, [r7, #0]
 8016400:	685b      	ldr	r3, [r3, #4]
 8016402:	68fa      	ldr	r2, [r7, #12]
 8016404:	4313      	orrs	r3, r2
 8016406:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8016408:	687a      	ldr	r2, [r7, #4]
 801640a:	2380      	movs	r3, #128	@ 0x80
 801640c:	05db      	lsls	r3, r3, #23
 801640e:	429a      	cmp	r2, r3
 8016410:	d00b      	beq.n	801642a <TIM_Base_SetConfig+0x66>
 8016412:	687b      	ldr	r3, [r7, #4]
 8016414:	4a16      	ldr	r2, [pc, #88]	@ (8016470 <TIM_Base_SetConfig+0xac>)
 8016416:	4293      	cmp	r3, r2
 8016418:	d007      	beq.n	801642a <TIM_Base_SetConfig+0x66>
 801641a:	687b      	ldr	r3, [r7, #4]
 801641c:	4a15      	ldr	r2, [pc, #84]	@ (8016474 <TIM_Base_SetConfig+0xb0>)
 801641e:	4293      	cmp	r3, r2
 8016420:	d003      	beq.n	801642a <TIM_Base_SetConfig+0x66>
 8016422:	687b      	ldr	r3, [r7, #4]
 8016424:	4a14      	ldr	r2, [pc, #80]	@ (8016478 <TIM_Base_SetConfig+0xb4>)
 8016426:	4293      	cmp	r3, r2
 8016428:	d108      	bne.n	801643c <TIM_Base_SetConfig+0x78>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 801642a:	68fb      	ldr	r3, [r7, #12]
 801642c:	4a13      	ldr	r2, [pc, #76]	@ (801647c <TIM_Base_SetConfig+0xb8>)
 801642e:	4013      	ands	r3, r2
 8016430:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8016432:	683b      	ldr	r3, [r7, #0]
 8016434:	68db      	ldr	r3, [r3, #12]
 8016436:	68fa      	ldr	r2, [r7, #12]
 8016438:	4313      	orrs	r3, r2
 801643a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 801643c:	68fb      	ldr	r3, [r7, #12]
 801643e:	2280      	movs	r2, #128	@ 0x80
 8016440:	4393      	bics	r3, r2
 8016442:	001a      	movs	r2, r3
 8016444:	683b      	ldr	r3, [r7, #0]
 8016446:	691b      	ldr	r3, [r3, #16]
 8016448:	4313      	orrs	r3, r2
 801644a:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 801644c:	687b      	ldr	r3, [r7, #4]
 801644e:	68fa      	ldr	r2, [r7, #12]
 8016450:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8016452:	683b      	ldr	r3, [r7, #0]
 8016454:	689a      	ldr	r2, [r3, #8]
 8016456:	687b      	ldr	r3, [r7, #4]
 8016458:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 801645a:	683b      	ldr	r3, [r7, #0]
 801645c:	681a      	ldr	r2, [r3, #0]
 801645e:	687b      	ldr	r3, [r7, #4]
 8016460:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8016462:	687b      	ldr	r3, [r7, #4]
 8016464:	2201      	movs	r2, #1
 8016466:	615a      	str	r2, [r3, #20]
}
 8016468:	46c0      	nop			@ (mov r8, r8)
 801646a:	46bd      	mov	sp, r7
 801646c:	b004      	add	sp, #16
 801646e:	bd80      	pop	{r7, pc}
 8016470:	40000400 	.word	0x40000400
 8016474:	40010800 	.word	0x40010800
 8016478:	40011400 	.word	0x40011400
 801647c:	fffffcff 	.word	0xfffffcff

08016480 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8016480:	b580      	push	{r7, lr}
 8016482:	b086      	sub	sp, #24
 8016484:	af00      	add	r7, sp, #0
 8016486:	6078      	str	r0, [r7, #4]
 8016488:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 801648a:	687b      	ldr	r3, [r7, #4]
 801648c:	6a1b      	ldr	r3, [r3, #32]
 801648e:	2201      	movs	r2, #1
 8016490:	4393      	bics	r3, r2
 8016492:	001a      	movs	r2, r3
 8016494:	687b      	ldr	r3, [r7, #4]
 8016496:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8016498:	687b      	ldr	r3, [r7, #4]
 801649a:	6a1b      	ldr	r3, [r3, #32]
 801649c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801649e:	687b      	ldr	r3, [r7, #4]
 80164a0:	685b      	ldr	r3, [r3, #4]
 80164a2:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80164a4:	687b      	ldr	r3, [r7, #4]
 80164a6:	699b      	ldr	r3, [r3, #24]
 80164a8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80164aa:	68fb      	ldr	r3, [r7, #12]
 80164ac:	2270      	movs	r2, #112	@ 0x70
 80164ae:	4393      	bics	r3, r2
 80164b0:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80164b2:	68fb      	ldr	r3, [r7, #12]
 80164b4:	2203      	movs	r2, #3
 80164b6:	4393      	bics	r3, r2
 80164b8:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80164ba:	683b      	ldr	r3, [r7, #0]
 80164bc:	681b      	ldr	r3, [r3, #0]
 80164be:	68fa      	ldr	r2, [r7, #12]
 80164c0:	4313      	orrs	r3, r2
 80164c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80164c4:	697b      	ldr	r3, [r7, #20]
 80164c6:	2202      	movs	r2, #2
 80164c8:	4393      	bics	r3, r2
 80164ca:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80164cc:	683b      	ldr	r3, [r7, #0]
 80164ce:	689b      	ldr	r3, [r3, #8]
 80164d0:	697a      	ldr	r2, [r7, #20]
 80164d2:	4313      	orrs	r3, r2
 80164d4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80164d6:	687b      	ldr	r3, [r7, #4]
 80164d8:	693a      	ldr	r2, [r7, #16]
 80164da:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80164dc:	687b      	ldr	r3, [r7, #4]
 80164de:	68fa      	ldr	r2, [r7, #12]
 80164e0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80164e2:	683b      	ldr	r3, [r7, #0]
 80164e4:	685a      	ldr	r2, [r3, #4]
 80164e6:	687b      	ldr	r3, [r7, #4]
 80164e8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80164ea:	687b      	ldr	r3, [r7, #4]
 80164ec:	697a      	ldr	r2, [r7, #20]
 80164ee:	621a      	str	r2, [r3, #32]
}
 80164f0:	46c0      	nop			@ (mov r8, r8)
 80164f2:	46bd      	mov	sp, r7
 80164f4:	b006      	add	sp, #24
 80164f6:	bd80      	pop	{r7, pc}

080164f8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80164f8:	b580      	push	{r7, lr}
 80164fa:	b086      	sub	sp, #24
 80164fc:	af00      	add	r7, sp, #0
 80164fe:	6078      	str	r0, [r7, #4]
 8016500:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8016502:	687b      	ldr	r3, [r7, #4]
 8016504:	6a1b      	ldr	r3, [r3, #32]
 8016506:	2210      	movs	r2, #16
 8016508:	4393      	bics	r3, r2
 801650a:	001a      	movs	r2, r3
 801650c:	687b      	ldr	r3, [r7, #4]
 801650e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8016510:	687b      	ldr	r3, [r7, #4]
 8016512:	6a1b      	ldr	r3, [r3, #32]
 8016514:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8016516:	687b      	ldr	r3, [r7, #4]
 8016518:	685b      	ldr	r3, [r3, #4]
 801651a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 801651c:	687b      	ldr	r3, [r7, #4]
 801651e:	699b      	ldr	r3, [r3, #24]
 8016520:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8016522:	68fb      	ldr	r3, [r7, #12]
 8016524:	4a13      	ldr	r2, [pc, #76]	@ (8016574 <TIM_OC2_SetConfig+0x7c>)
 8016526:	4013      	ands	r3, r2
 8016528:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 801652a:	68fb      	ldr	r3, [r7, #12]
 801652c:	4a12      	ldr	r2, [pc, #72]	@ (8016578 <TIM_OC2_SetConfig+0x80>)
 801652e:	4013      	ands	r3, r2
 8016530:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8016532:	683b      	ldr	r3, [r7, #0]
 8016534:	681b      	ldr	r3, [r3, #0]
 8016536:	021b      	lsls	r3, r3, #8
 8016538:	68fa      	ldr	r2, [r7, #12]
 801653a:	4313      	orrs	r3, r2
 801653c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 801653e:	697b      	ldr	r3, [r7, #20]
 8016540:	2220      	movs	r2, #32
 8016542:	4393      	bics	r3, r2
 8016544:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8016546:	683b      	ldr	r3, [r7, #0]
 8016548:	689b      	ldr	r3, [r3, #8]
 801654a:	011b      	lsls	r3, r3, #4
 801654c:	697a      	ldr	r2, [r7, #20]
 801654e:	4313      	orrs	r3, r2
 8016550:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8016552:	687b      	ldr	r3, [r7, #4]
 8016554:	693a      	ldr	r2, [r7, #16]
 8016556:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8016558:	687b      	ldr	r3, [r7, #4]
 801655a:	68fa      	ldr	r2, [r7, #12]
 801655c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 801655e:	683b      	ldr	r3, [r7, #0]
 8016560:	685a      	ldr	r2, [r3, #4]
 8016562:	687b      	ldr	r3, [r7, #4]
 8016564:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8016566:	687b      	ldr	r3, [r7, #4]
 8016568:	697a      	ldr	r2, [r7, #20]
 801656a:	621a      	str	r2, [r3, #32]
}
 801656c:	46c0      	nop			@ (mov r8, r8)
 801656e:	46bd      	mov	sp, r7
 8016570:	b006      	add	sp, #24
 8016572:	bd80      	pop	{r7, pc}
 8016574:	ffff8fff 	.word	0xffff8fff
 8016578:	fffffcff 	.word	0xfffffcff

0801657c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 801657c:	b580      	push	{r7, lr}
 801657e:	b086      	sub	sp, #24
 8016580:	af00      	add	r7, sp, #0
 8016582:	6078      	str	r0, [r7, #4]
 8016584:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8016586:	687b      	ldr	r3, [r7, #4]
 8016588:	6a1b      	ldr	r3, [r3, #32]
 801658a:	4a1a      	ldr	r2, [pc, #104]	@ (80165f4 <TIM_OC3_SetConfig+0x78>)
 801658c:	401a      	ands	r2, r3
 801658e:	687b      	ldr	r3, [r7, #4]
 8016590:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8016592:	687b      	ldr	r3, [r7, #4]
 8016594:	6a1b      	ldr	r3, [r3, #32]
 8016596:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8016598:	687b      	ldr	r3, [r7, #4]
 801659a:	685b      	ldr	r3, [r3, #4]
 801659c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 801659e:	687b      	ldr	r3, [r7, #4]
 80165a0:	69db      	ldr	r3, [r3, #28]
 80165a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80165a4:	68fb      	ldr	r3, [r7, #12]
 80165a6:	2270      	movs	r2, #112	@ 0x70
 80165a8:	4393      	bics	r3, r2
 80165aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80165ac:	68fb      	ldr	r3, [r7, #12]
 80165ae:	2203      	movs	r2, #3
 80165b0:	4393      	bics	r3, r2
 80165b2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80165b4:	683b      	ldr	r3, [r7, #0]
 80165b6:	681b      	ldr	r3, [r3, #0]
 80165b8:	68fa      	ldr	r2, [r7, #12]
 80165ba:	4313      	orrs	r3, r2
 80165bc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80165be:	697b      	ldr	r3, [r7, #20]
 80165c0:	4a0d      	ldr	r2, [pc, #52]	@ (80165f8 <TIM_OC3_SetConfig+0x7c>)
 80165c2:	4013      	ands	r3, r2
 80165c4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80165c6:	683b      	ldr	r3, [r7, #0]
 80165c8:	689b      	ldr	r3, [r3, #8]
 80165ca:	021b      	lsls	r3, r3, #8
 80165cc:	697a      	ldr	r2, [r7, #20]
 80165ce:	4313      	orrs	r3, r2
 80165d0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80165d2:	687b      	ldr	r3, [r7, #4]
 80165d4:	693a      	ldr	r2, [r7, #16]
 80165d6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80165d8:	687b      	ldr	r3, [r7, #4]
 80165da:	68fa      	ldr	r2, [r7, #12]
 80165dc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80165de:	683b      	ldr	r3, [r7, #0]
 80165e0:	685a      	ldr	r2, [r3, #4]
 80165e2:	687b      	ldr	r3, [r7, #4]
 80165e4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80165e6:	687b      	ldr	r3, [r7, #4]
 80165e8:	697a      	ldr	r2, [r7, #20]
 80165ea:	621a      	str	r2, [r3, #32]
}
 80165ec:	46c0      	nop			@ (mov r8, r8)
 80165ee:	46bd      	mov	sp, r7
 80165f0:	b006      	add	sp, #24
 80165f2:	bd80      	pop	{r7, pc}
 80165f4:	fffffeff 	.word	0xfffffeff
 80165f8:	fffffdff 	.word	0xfffffdff

080165fc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80165fc:	b580      	push	{r7, lr}
 80165fe:	b086      	sub	sp, #24
 8016600:	af00      	add	r7, sp, #0
 8016602:	6078      	str	r0, [r7, #4]
 8016604:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8016606:	687b      	ldr	r3, [r7, #4]
 8016608:	6a1b      	ldr	r3, [r3, #32]
 801660a:	4a1b      	ldr	r2, [pc, #108]	@ (8016678 <TIM_OC4_SetConfig+0x7c>)
 801660c:	401a      	ands	r2, r3
 801660e:	687b      	ldr	r3, [r7, #4]
 8016610:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8016612:	687b      	ldr	r3, [r7, #4]
 8016614:	6a1b      	ldr	r3, [r3, #32]
 8016616:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8016618:	687b      	ldr	r3, [r7, #4]
 801661a:	685b      	ldr	r3, [r3, #4]
 801661c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 801661e:	687b      	ldr	r3, [r7, #4]
 8016620:	69db      	ldr	r3, [r3, #28]
 8016622:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8016624:	68fb      	ldr	r3, [r7, #12]
 8016626:	4a15      	ldr	r2, [pc, #84]	@ (801667c <TIM_OC4_SetConfig+0x80>)
 8016628:	4013      	ands	r3, r2
 801662a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 801662c:	68fb      	ldr	r3, [r7, #12]
 801662e:	4a14      	ldr	r2, [pc, #80]	@ (8016680 <TIM_OC4_SetConfig+0x84>)
 8016630:	4013      	ands	r3, r2
 8016632:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8016634:	683b      	ldr	r3, [r7, #0]
 8016636:	681b      	ldr	r3, [r3, #0]
 8016638:	021b      	lsls	r3, r3, #8
 801663a:	68fa      	ldr	r2, [r7, #12]
 801663c:	4313      	orrs	r3, r2
 801663e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8016640:	697b      	ldr	r3, [r7, #20]
 8016642:	4a10      	ldr	r2, [pc, #64]	@ (8016684 <TIM_OC4_SetConfig+0x88>)
 8016644:	4013      	ands	r3, r2
 8016646:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8016648:	683b      	ldr	r3, [r7, #0]
 801664a:	689b      	ldr	r3, [r3, #8]
 801664c:	031b      	lsls	r3, r3, #12
 801664e:	697a      	ldr	r2, [r7, #20]
 8016650:	4313      	orrs	r3, r2
 8016652:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8016654:	687b      	ldr	r3, [r7, #4]
 8016656:	693a      	ldr	r2, [r7, #16]
 8016658:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 801665a:	687b      	ldr	r3, [r7, #4]
 801665c:	68fa      	ldr	r2, [r7, #12]
 801665e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8016660:	683b      	ldr	r3, [r7, #0]
 8016662:	685a      	ldr	r2, [r3, #4]
 8016664:	687b      	ldr	r3, [r7, #4]
 8016666:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8016668:	687b      	ldr	r3, [r7, #4]
 801666a:	697a      	ldr	r2, [r7, #20]
 801666c:	621a      	str	r2, [r3, #32]
}
 801666e:	46c0      	nop			@ (mov r8, r8)
 8016670:	46bd      	mov	sp, r7
 8016672:	b006      	add	sp, #24
 8016674:	bd80      	pop	{r7, pc}
 8016676:	46c0      	nop			@ (mov r8, r8)
 8016678:	ffffefff 	.word	0xffffefff
 801667c:	ffff8fff 	.word	0xffff8fff
 8016680:	fffffcff 	.word	0xfffffcff
 8016684:	ffffdfff 	.word	0xffffdfff

08016688 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
static void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8016688:	b580      	push	{r7, lr}
 801668a:	b086      	sub	sp, #24
 801668c:	af00      	add	r7, sp, #0
 801668e:	60f8      	str	r0, [r7, #12]
 8016690:	60b9      	str	r1, [r7, #8]
 8016692:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8016694:	68bb      	ldr	r3, [r7, #8]
 8016696:	221f      	movs	r2, #31
 8016698:	4013      	ands	r3, r2
 801669a:	2201      	movs	r2, #1
 801669c:	409a      	lsls	r2, r3
 801669e:	0013      	movs	r3, r2
 80166a0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80166a2:	68fb      	ldr	r3, [r7, #12]
 80166a4:	6a1b      	ldr	r3, [r3, #32]
 80166a6:	697a      	ldr	r2, [r7, #20]
 80166a8:	43d2      	mvns	r2, r2
 80166aa:	401a      	ands	r2, r3
 80166ac:	68fb      	ldr	r3, [r7, #12]
 80166ae:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80166b0:	68fb      	ldr	r3, [r7, #12]
 80166b2:	6a1a      	ldr	r2, [r3, #32]
 80166b4:	68bb      	ldr	r3, [r7, #8]
 80166b6:	211f      	movs	r1, #31
 80166b8:	400b      	ands	r3, r1
 80166ba:	6879      	ldr	r1, [r7, #4]
 80166bc:	4099      	lsls	r1, r3
 80166be:	000b      	movs	r3, r1
 80166c0:	431a      	orrs	r2, r3
 80166c2:	68fb      	ldr	r3, [r7, #12]
 80166c4:	621a      	str	r2, [r3, #32]
}
 80166c6:	46c0      	nop			@ (mov r8, r8)
 80166c8:	46bd      	mov	sp, r7
 80166ca:	b006      	add	sp, #24
 80166cc:	bd80      	pop	{r7, pc}
	...

080166d0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80166d0:	b580      	push	{r7, lr}
 80166d2:	b084      	sub	sp, #16
 80166d4:	af00      	add	r7, sp, #0
 80166d6:	6078      	str	r0, [r7, #4]
 80166d8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80166da:	687b      	ldr	r3, [r7, #4]
 80166dc:	2238      	movs	r2, #56	@ 0x38
 80166de:	5c9b      	ldrb	r3, [r3, r2]
 80166e0:	2b01      	cmp	r3, #1
 80166e2:	d101      	bne.n	80166e8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80166e4:	2302      	movs	r3, #2
 80166e6:	e047      	b.n	8016778 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 80166e8:	687b      	ldr	r3, [r7, #4]
 80166ea:	2238      	movs	r2, #56	@ 0x38
 80166ec:	2101      	movs	r1, #1
 80166ee:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80166f0:	687b      	ldr	r3, [r7, #4]
 80166f2:	2239      	movs	r2, #57	@ 0x39
 80166f4:	2102      	movs	r1, #2
 80166f6:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80166f8:	687b      	ldr	r3, [r7, #4]
 80166fa:	681b      	ldr	r3, [r3, #0]
 80166fc:	685b      	ldr	r3, [r3, #4]
 80166fe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8016700:	687b      	ldr	r3, [r7, #4]
 8016702:	681b      	ldr	r3, [r3, #0]
 8016704:	689b      	ldr	r3, [r3, #8]
 8016706:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8016708:	68fb      	ldr	r3, [r7, #12]
 801670a:	2270      	movs	r2, #112	@ 0x70
 801670c:	4393      	bics	r3, r2
 801670e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8016710:	683b      	ldr	r3, [r7, #0]
 8016712:	681b      	ldr	r3, [r3, #0]
 8016714:	68fa      	ldr	r2, [r7, #12]
 8016716:	4313      	orrs	r3, r2
 8016718:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 801671a:	687b      	ldr	r3, [r7, #4]
 801671c:	681b      	ldr	r3, [r3, #0]
 801671e:	68fa      	ldr	r2, [r7, #12]
 8016720:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8016722:	687b      	ldr	r3, [r7, #4]
 8016724:	681a      	ldr	r2, [r3, #0]
 8016726:	2380      	movs	r3, #128	@ 0x80
 8016728:	05db      	lsls	r3, r3, #23
 801672a:	429a      	cmp	r2, r3
 801672c:	d00e      	beq.n	801674c <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 801672e:	687b      	ldr	r3, [r7, #4]
 8016730:	681b      	ldr	r3, [r3, #0]
 8016732:	4a13      	ldr	r2, [pc, #76]	@ (8016780 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8016734:	4293      	cmp	r3, r2
 8016736:	d009      	beq.n	801674c <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8016738:	687b      	ldr	r3, [r7, #4]
 801673a:	681b      	ldr	r3, [r3, #0]
 801673c:	4a11      	ldr	r2, [pc, #68]	@ (8016784 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 801673e:	4293      	cmp	r3, r2
 8016740:	d004      	beq.n	801674c <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8016742:	687b      	ldr	r3, [r7, #4]
 8016744:	681b      	ldr	r3, [r3, #0]
 8016746:	4a10      	ldr	r2, [pc, #64]	@ (8016788 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8016748:	4293      	cmp	r3, r2
 801674a:	d10c      	bne.n	8016766 <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 801674c:	68bb      	ldr	r3, [r7, #8]
 801674e:	2280      	movs	r2, #128	@ 0x80
 8016750:	4393      	bics	r3, r2
 8016752:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8016754:	683b      	ldr	r3, [r7, #0]
 8016756:	685b      	ldr	r3, [r3, #4]
 8016758:	68ba      	ldr	r2, [r7, #8]
 801675a:	4313      	orrs	r3, r2
 801675c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 801675e:	687b      	ldr	r3, [r7, #4]
 8016760:	681b      	ldr	r3, [r3, #0]
 8016762:	68ba      	ldr	r2, [r7, #8]
 8016764:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8016766:	687b      	ldr	r3, [r7, #4]
 8016768:	2239      	movs	r2, #57	@ 0x39
 801676a:	2101      	movs	r1, #1
 801676c:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 801676e:	687b      	ldr	r3, [r7, #4]
 8016770:	2238      	movs	r2, #56	@ 0x38
 8016772:	2100      	movs	r1, #0
 8016774:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8016776:	2300      	movs	r3, #0
}
 8016778:	0018      	movs	r0, r3
 801677a:	46bd      	mov	sp, r7
 801677c:	b004      	add	sp, #16
 801677e:	bd80      	pop	{r7, pc}
 8016780:	40000400 	.word	0x40000400
 8016784:	40010800 	.word	0x40010800
 8016788:	40011400 	.word	0x40011400

0801678c <HAL_TIMEx_RemapConfig>:
  @endif
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_RemapConfig(TIM_HandleTypeDef *htim, uint32_t Remap)
{
 801678c:	b580      	push	{r7, lr}
 801678e:	b082      	sub	sp, #8
 8016790:	af00      	add	r7, sp, #0
 8016792:	6078      	str	r0, [r7, #4]
 8016794:	6039      	str	r1, [r7, #0]

  /* Check parameters */
  assert_param(IS_TIM_REMAP(htim->Instance, Remap));

  __HAL_LOCK(htim);
 8016796:	687b      	ldr	r3, [r7, #4]
 8016798:	2238      	movs	r2, #56	@ 0x38
 801679a:	5c9b      	ldrb	r3, [r3, r2]
 801679c:	2b01      	cmp	r3, #1
 801679e:	d101      	bne.n	80167a4 <HAL_TIMEx_RemapConfig+0x18>
 80167a0:	2302      	movs	r3, #2
 80167a2:	e00c      	b.n	80167be <HAL_TIMEx_RemapConfig+0x32>
 80167a4:	687b      	ldr	r3, [r7, #4]
 80167a6:	2238      	movs	r2, #56	@ 0x38
 80167a8:	2101      	movs	r1, #1
 80167aa:	5499      	strb	r1, [r3, r2]

  /* Set the Timer remapping configuration */
  WRITE_REG(htim->Instance->OR, Remap);
 80167ac:	687b      	ldr	r3, [r7, #4]
 80167ae:	681b      	ldr	r3, [r3, #0]
 80167b0:	683a      	ldr	r2, [r7, #0]
 80167b2:	651a      	str	r2, [r3, #80]	@ 0x50

  __HAL_UNLOCK(htim);
 80167b4:	687b      	ldr	r3, [r7, #4]
 80167b6:	2238      	movs	r2, #56	@ 0x38
 80167b8:	2100      	movs	r1, #0
 80167ba:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80167bc:	2300      	movs	r3, #0
}
 80167be:	0018      	movs	r0, r3
 80167c0:	46bd      	mov	sp, r7
 80167c2:	b002      	add	sp, #8
 80167c4:	bd80      	pop	{r7, pc}
	...

080167c8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80167c8:	b580      	push	{r7, lr}
 80167ca:	b082      	sub	sp, #8
 80167cc:	af00      	add	r7, sp, #0
 80167ce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80167d0:	687b      	ldr	r3, [r7, #4]
 80167d2:	2b00      	cmp	r3, #0
 80167d4:	d101      	bne.n	80167da <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80167d6:	2301      	movs	r3, #1
 80167d8:	e053      	b.n	8016882 <HAL_UART_Init+0xba>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80167da:	687b      	ldr	r3, [r7, #4]
 80167dc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80167de:	2b00      	cmp	r3, #0
 80167e0:	d116      	bne.n	8016810 <HAL_UART_Init+0x48>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80167e2:	687b      	ldr	r3, [r7, #4]
 80167e4:	2278      	movs	r2, #120	@ 0x78
 80167e6:	2100      	movs	r1, #0
 80167e8:	5499      	strb	r1, [r3, r2]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 80167ea:	687b      	ldr	r3, [r7, #4]
 80167ec:	0018      	movs	r0, r3
 80167ee:	f000 fd65 	bl	80172bc <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 80167f2:	687b      	ldr	r3, [r7, #4]
 80167f4:	22b0      	movs	r2, #176	@ 0xb0
 80167f6:	589b      	ldr	r3, [r3, r2]
 80167f8:	2b00      	cmp	r3, #0
 80167fa:	d103      	bne.n	8016804 <HAL_UART_Init+0x3c>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 80167fc:	687b      	ldr	r3, [r7, #4]
 80167fe:	21b0      	movs	r1, #176	@ 0xb0
 8016800:	4a22      	ldr	r2, [pc, #136]	@ (801688c <HAL_UART_Init+0xc4>)
 8016802:	505a      	str	r2, [r3, r1]
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 8016804:	687b      	ldr	r3, [r7, #4]
 8016806:	22b0      	movs	r2, #176	@ 0xb0
 8016808:	589b      	ldr	r3, [r3, r2]
 801680a:	687a      	ldr	r2, [r7, #4]
 801680c:	0010      	movs	r0, r2
 801680e:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8016810:	687b      	ldr	r3, [r7, #4]
 8016812:	2224      	movs	r2, #36	@ 0x24
 8016814:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8016816:	687b      	ldr	r3, [r7, #4]
 8016818:	681b      	ldr	r3, [r3, #0]
 801681a:	681a      	ldr	r2, [r3, #0]
 801681c:	687b      	ldr	r3, [r7, #4]
 801681e:	681b      	ldr	r3, [r3, #0]
 8016820:	2101      	movs	r1, #1
 8016822:	438a      	bics	r2, r1
 8016824:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8016826:	687b      	ldr	r3, [r7, #4]
 8016828:	0018      	movs	r0, r3
 801682a:	f000 fd8b 	bl	8017344 <UART_SetConfig>
 801682e:	0003      	movs	r3, r0
 8016830:	2b01      	cmp	r3, #1
 8016832:	d101      	bne.n	8016838 <HAL_UART_Init+0x70>
  {
    return HAL_ERROR;
 8016834:	2301      	movs	r3, #1
 8016836:	e024      	b.n	8016882 <HAL_UART_Init+0xba>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8016838:	687b      	ldr	r3, [r7, #4]
 801683a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801683c:	2b00      	cmp	r3, #0
 801683e:	d003      	beq.n	8016848 <HAL_UART_Init+0x80>
  {
    UART_AdvFeatureConfig(huart);
 8016840:	687b      	ldr	r3, [r7, #4]
 8016842:	0018      	movs	r0, r3
 8016844:	f001 f81c 	bl	8017880 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8016848:	687b      	ldr	r3, [r7, #4]
 801684a:	681b      	ldr	r3, [r3, #0]
 801684c:	685a      	ldr	r2, [r3, #4]
 801684e:	687b      	ldr	r3, [r7, #4]
 8016850:	681b      	ldr	r3, [r3, #0]
 8016852:	490f      	ldr	r1, [pc, #60]	@ (8016890 <HAL_UART_Init+0xc8>)
 8016854:	400a      	ands	r2, r1
 8016856:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8016858:	687b      	ldr	r3, [r7, #4]
 801685a:	681b      	ldr	r3, [r3, #0]
 801685c:	689a      	ldr	r2, [r3, #8]
 801685e:	687b      	ldr	r3, [r7, #4]
 8016860:	681b      	ldr	r3, [r3, #0]
 8016862:	212a      	movs	r1, #42	@ 0x2a
 8016864:	438a      	bics	r2, r1
 8016866:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8016868:	687b      	ldr	r3, [r7, #4]
 801686a:	681b      	ldr	r3, [r3, #0]
 801686c:	681a      	ldr	r2, [r3, #0]
 801686e:	687b      	ldr	r3, [r7, #4]
 8016870:	681b      	ldr	r3, [r3, #0]
 8016872:	2101      	movs	r1, #1
 8016874:	430a      	orrs	r2, r1
 8016876:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8016878:	687b      	ldr	r3, [r7, #4]
 801687a:	0018      	movs	r0, r3
 801687c:	f001 f8b4 	bl	80179e8 <UART_CheckIdleState>
 8016880:	0003      	movs	r3, r0
}
 8016882:	0018      	movs	r0, r3
 8016884:	46bd      	mov	sp, r7
 8016886:	b002      	add	sp, #8
 8016888:	bd80      	pop	{r7, pc}
 801688a:	46c0      	nop			@ (mov r8, r8)
 801688c:	0800d8a1 	.word	0x0800d8a1
 8016890:	ffffb7ff 	.word	0xffffb7ff

08016894 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8016894:	b580      	push	{r7, lr}
 8016896:	b08a      	sub	sp, #40	@ 0x28
 8016898:	af02      	add	r7, sp, #8
 801689a:	60f8      	str	r0, [r7, #12]
 801689c:	60b9      	str	r1, [r7, #8]
 801689e:	603b      	str	r3, [r7, #0]
 80168a0:	1dbb      	adds	r3, r7, #6
 80168a2:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80168a4:	68fb      	ldr	r3, [r7, #12]
 80168a6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80168a8:	2b20      	cmp	r3, #32
 80168aa:	d000      	beq.n	80168ae <HAL_UART_Transmit+0x1a>
 80168ac:	e08c      	b.n	80169c8 <HAL_UART_Transmit+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 80168ae:	68bb      	ldr	r3, [r7, #8]
 80168b0:	2b00      	cmp	r3, #0
 80168b2:	d003      	beq.n	80168bc <HAL_UART_Transmit+0x28>
 80168b4:	1dbb      	adds	r3, r7, #6
 80168b6:	881b      	ldrh	r3, [r3, #0]
 80168b8:	2b00      	cmp	r3, #0
 80168ba:	d101      	bne.n	80168c0 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80168bc:	2301      	movs	r3, #1
 80168be:	e084      	b.n	80169ca <HAL_UART_Transmit+0x136>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80168c0:	68fb      	ldr	r3, [r7, #12]
 80168c2:	689a      	ldr	r2, [r3, #8]
 80168c4:	2380      	movs	r3, #128	@ 0x80
 80168c6:	015b      	lsls	r3, r3, #5
 80168c8:	429a      	cmp	r2, r3
 80168ca:	d109      	bne.n	80168e0 <HAL_UART_Transmit+0x4c>
 80168cc:	68fb      	ldr	r3, [r7, #12]
 80168ce:	691b      	ldr	r3, [r3, #16]
 80168d0:	2b00      	cmp	r3, #0
 80168d2:	d105      	bne.n	80168e0 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80168d4:	68bb      	ldr	r3, [r7, #8]
 80168d6:	2201      	movs	r2, #1
 80168d8:	4013      	ands	r3, r2
 80168da:	d001      	beq.n	80168e0 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 80168dc:	2301      	movs	r3, #1
 80168de:	e074      	b.n	80169ca <HAL_UART_Transmit+0x136>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80168e0:	68fb      	ldr	r3, [r7, #12]
 80168e2:	2284      	movs	r2, #132	@ 0x84
 80168e4:	2100      	movs	r1, #0
 80168e6:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80168e8:	68fb      	ldr	r3, [r7, #12]
 80168ea:	2221      	movs	r2, #33	@ 0x21
 80168ec:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80168ee:	f7f7 fdbb 	bl	800e468 <HAL_GetTick>
 80168f2:	0003      	movs	r3, r0
 80168f4:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 80168f6:	68fb      	ldr	r3, [r7, #12]
 80168f8:	1dba      	adds	r2, r7, #6
 80168fa:	2150      	movs	r1, #80	@ 0x50
 80168fc:	8812      	ldrh	r2, [r2, #0]
 80168fe:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8016900:	68fb      	ldr	r3, [r7, #12]
 8016902:	1dba      	adds	r2, r7, #6
 8016904:	2152      	movs	r1, #82	@ 0x52
 8016906:	8812      	ldrh	r2, [r2, #0]
 8016908:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801690a:	68fb      	ldr	r3, [r7, #12]
 801690c:	689a      	ldr	r2, [r3, #8]
 801690e:	2380      	movs	r3, #128	@ 0x80
 8016910:	015b      	lsls	r3, r3, #5
 8016912:	429a      	cmp	r2, r3
 8016914:	d108      	bne.n	8016928 <HAL_UART_Transmit+0x94>
 8016916:	68fb      	ldr	r3, [r7, #12]
 8016918:	691b      	ldr	r3, [r3, #16]
 801691a:	2b00      	cmp	r3, #0
 801691c:	d104      	bne.n	8016928 <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 801691e:	2300      	movs	r3, #0
 8016920:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8016922:	68bb      	ldr	r3, [r7, #8]
 8016924:	61bb      	str	r3, [r7, #24]
 8016926:	e003      	b.n	8016930 <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 8016928:	68bb      	ldr	r3, [r7, #8]
 801692a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 801692c:	2300      	movs	r3, #0
 801692e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8016930:	e02f      	b.n	8016992 <HAL_UART_Transmit+0xfe>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8016932:	697a      	ldr	r2, [r7, #20]
 8016934:	68f8      	ldr	r0, [r7, #12]
 8016936:	683b      	ldr	r3, [r7, #0]
 8016938:	9300      	str	r3, [sp, #0]
 801693a:	0013      	movs	r3, r2
 801693c:	2200      	movs	r2, #0
 801693e:	2180      	movs	r1, #128	@ 0x80
 8016940:	f001 f8fa 	bl	8017b38 <UART_WaitOnFlagUntilTimeout>
 8016944:	1e03      	subs	r3, r0, #0
 8016946:	d004      	beq.n	8016952 <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 8016948:	68fb      	ldr	r3, [r7, #12]
 801694a:	2220      	movs	r2, #32
 801694c:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 801694e:	2303      	movs	r3, #3
 8016950:	e03b      	b.n	80169ca <HAL_UART_Transmit+0x136>
      }
      if (pdata8bits == NULL)
 8016952:	69fb      	ldr	r3, [r7, #28]
 8016954:	2b00      	cmp	r3, #0
 8016956:	d10b      	bne.n	8016970 <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8016958:	69bb      	ldr	r3, [r7, #24]
 801695a:	881b      	ldrh	r3, [r3, #0]
 801695c:	001a      	movs	r2, r3
 801695e:	68fb      	ldr	r3, [r7, #12]
 8016960:	681b      	ldr	r3, [r3, #0]
 8016962:	05d2      	lsls	r2, r2, #23
 8016964:	0dd2      	lsrs	r2, r2, #23
 8016966:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8016968:	69bb      	ldr	r3, [r7, #24]
 801696a:	3302      	adds	r3, #2
 801696c:	61bb      	str	r3, [r7, #24]
 801696e:	e007      	b.n	8016980 <HAL_UART_Transmit+0xec>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8016970:	69fb      	ldr	r3, [r7, #28]
 8016972:	781a      	ldrb	r2, [r3, #0]
 8016974:	68fb      	ldr	r3, [r7, #12]
 8016976:	681b      	ldr	r3, [r3, #0]
 8016978:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 801697a:	69fb      	ldr	r3, [r7, #28]
 801697c:	3301      	adds	r3, #1
 801697e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8016980:	68fb      	ldr	r3, [r7, #12]
 8016982:	2252      	movs	r2, #82	@ 0x52
 8016984:	5a9b      	ldrh	r3, [r3, r2]
 8016986:	b29b      	uxth	r3, r3
 8016988:	3b01      	subs	r3, #1
 801698a:	b299      	uxth	r1, r3
 801698c:	68fb      	ldr	r3, [r7, #12]
 801698e:	2252      	movs	r2, #82	@ 0x52
 8016990:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8016992:	68fb      	ldr	r3, [r7, #12]
 8016994:	2252      	movs	r2, #82	@ 0x52
 8016996:	5a9b      	ldrh	r3, [r3, r2]
 8016998:	b29b      	uxth	r3, r3
 801699a:	2b00      	cmp	r3, #0
 801699c:	d1c9      	bne.n	8016932 <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 801699e:	697a      	ldr	r2, [r7, #20]
 80169a0:	68f8      	ldr	r0, [r7, #12]
 80169a2:	683b      	ldr	r3, [r7, #0]
 80169a4:	9300      	str	r3, [sp, #0]
 80169a6:	0013      	movs	r3, r2
 80169a8:	2200      	movs	r2, #0
 80169aa:	2140      	movs	r1, #64	@ 0x40
 80169ac:	f001 f8c4 	bl	8017b38 <UART_WaitOnFlagUntilTimeout>
 80169b0:	1e03      	subs	r3, r0, #0
 80169b2:	d004      	beq.n	80169be <HAL_UART_Transmit+0x12a>
    {
      huart->gState = HAL_UART_STATE_READY;
 80169b4:	68fb      	ldr	r3, [r7, #12]
 80169b6:	2220      	movs	r2, #32
 80169b8:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 80169ba:	2303      	movs	r3, #3
 80169bc:	e005      	b.n	80169ca <HAL_UART_Transmit+0x136>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80169be:	68fb      	ldr	r3, [r7, #12]
 80169c0:	2220      	movs	r2, #32
 80169c2:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 80169c4:	2300      	movs	r3, #0
 80169c6:	e000      	b.n	80169ca <HAL_UART_Transmit+0x136>
  }
  else
  {
    return HAL_BUSY;
 80169c8:	2302      	movs	r3, #2
  }
}
 80169ca:	0018      	movs	r0, r3
 80169cc:	46bd      	mov	sp, r7
 80169ce:	b008      	add	sp, #32
 80169d0:	bd80      	pop	{r7, pc}
	...

080169d4 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80169d4:	b580      	push	{r7, lr}
 80169d6:	b088      	sub	sp, #32
 80169d8:	af00      	add	r7, sp, #0
 80169da:	60f8      	str	r0, [r7, #12]
 80169dc:	60b9      	str	r1, [r7, #8]
 80169de:	1dbb      	adds	r3, r7, #6
 80169e0:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80169e2:	68fb      	ldr	r3, [r7, #12]
 80169e4:	2280      	movs	r2, #128	@ 0x80
 80169e6:	589b      	ldr	r3, [r3, r2]
 80169e8:	2b20      	cmp	r3, #32
 80169ea:	d14a      	bne.n	8016a82 <HAL_UART_Receive_IT+0xae>
  {
    if ((pData == NULL) || (Size == 0U))
 80169ec:	68bb      	ldr	r3, [r7, #8]
 80169ee:	2b00      	cmp	r3, #0
 80169f0:	d003      	beq.n	80169fa <HAL_UART_Receive_IT+0x26>
 80169f2:	1dbb      	adds	r3, r7, #6
 80169f4:	881b      	ldrh	r3, [r3, #0]
 80169f6:	2b00      	cmp	r3, #0
 80169f8:	d101      	bne.n	80169fe <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80169fa:	2301      	movs	r3, #1
 80169fc:	e042      	b.n	8016a84 <HAL_UART_Receive_IT+0xb0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80169fe:	68fb      	ldr	r3, [r7, #12]
 8016a00:	689a      	ldr	r2, [r3, #8]
 8016a02:	2380      	movs	r3, #128	@ 0x80
 8016a04:	015b      	lsls	r3, r3, #5
 8016a06:	429a      	cmp	r2, r3
 8016a08:	d109      	bne.n	8016a1e <HAL_UART_Receive_IT+0x4a>
 8016a0a:	68fb      	ldr	r3, [r7, #12]
 8016a0c:	691b      	ldr	r3, [r3, #16]
 8016a0e:	2b00      	cmp	r3, #0
 8016a10:	d105      	bne.n	8016a1e <HAL_UART_Receive_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8016a12:	68bb      	ldr	r3, [r7, #8]
 8016a14:	2201      	movs	r2, #1
 8016a16:	4013      	ands	r3, r2
 8016a18:	d001      	beq.n	8016a1e <HAL_UART_Receive_IT+0x4a>
      {
        return  HAL_ERROR;
 8016a1a:	2301      	movs	r3, #1
 8016a1c:	e032      	b.n	8016a84 <HAL_UART_Receive_IT+0xb0>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8016a1e:	68fb      	ldr	r3, [r7, #12]
 8016a20:	2200      	movs	r2, #0
 8016a22:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8016a24:	68fb      	ldr	r3, [r7, #12]
 8016a26:	681b      	ldr	r3, [r3, #0]
 8016a28:	4a18      	ldr	r2, [pc, #96]	@ (8016a8c <HAL_UART_Receive_IT+0xb8>)
 8016a2a:	4293      	cmp	r3, r2
 8016a2c:	d020      	beq.n	8016a70 <HAL_UART_Receive_IT+0x9c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8016a2e:	68fb      	ldr	r3, [r7, #12]
 8016a30:	681b      	ldr	r3, [r3, #0]
 8016a32:	685a      	ldr	r2, [r3, #4]
 8016a34:	2380      	movs	r3, #128	@ 0x80
 8016a36:	041b      	lsls	r3, r3, #16
 8016a38:	4013      	ands	r3, r2
 8016a3a:	d019      	beq.n	8016a70 <HAL_UART_Receive_IT+0x9c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8016a3c:	f3ef 8310 	mrs	r3, PRIMASK
 8016a40:	613b      	str	r3, [r7, #16]
  return(result);
 8016a42:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8016a44:	61fb      	str	r3, [r7, #28]
 8016a46:	2301      	movs	r3, #1
 8016a48:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8016a4a:	697b      	ldr	r3, [r7, #20]
 8016a4c:	f383 8810 	msr	PRIMASK, r3
}
 8016a50:	46c0      	nop			@ (mov r8, r8)
 8016a52:	68fb      	ldr	r3, [r7, #12]
 8016a54:	681b      	ldr	r3, [r3, #0]
 8016a56:	681a      	ldr	r2, [r3, #0]
 8016a58:	68fb      	ldr	r3, [r7, #12]
 8016a5a:	681b      	ldr	r3, [r3, #0]
 8016a5c:	2180      	movs	r1, #128	@ 0x80
 8016a5e:	04c9      	lsls	r1, r1, #19
 8016a60:	430a      	orrs	r2, r1
 8016a62:	601a      	str	r2, [r3, #0]
 8016a64:	69fb      	ldr	r3, [r7, #28]
 8016a66:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8016a68:	69bb      	ldr	r3, [r7, #24]
 8016a6a:	f383 8810 	msr	PRIMASK, r3
}
 8016a6e:	46c0      	nop			@ (mov r8, r8)
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8016a70:	1dbb      	adds	r3, r7, #6
 8016a72:	881a      	ldrh	r2, [r3, #0]
 8016a74:	68b9      	ldr	r1, [r7, #8]
 8016a76:	68fb      	ldr	r3, [r7, #12]
 8016a78:	0018      	movs	r0, r3
 8016a7a:	f001 f8c7 	bl	8017c0c <UART_Start_Receive_IT>
 8016a7e:	0003      	movs	r3, r0
 8016a80:	e000      	b.n	8016a84 <HAL_UART_Receive_IT+0xb0>
  }
  else
  {
    return HAL_BUSY;
 8016a82:	2302      	movs	r3, #2
  }
}
 8016a84:	0018      	movs	r0, r3
 8016a86:	46bd      	mov	sp, r7
 8016a88:	b008      	add	sp, #32
 8016a8a:	bd80      	pop	{r7, pc}
 8016a8c:	40004800 	.word	0x40004800

08016a90 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8016a90:	b580      	push	{r7, lr}
 8016a92:	b088      	sub	sp, #32
 8016a94:	af00      	add	r7, sp, #0
 8016a96:	60f8      	str	r0, [r7, #12]
 8016a98:	60b9      	str	r1, [r7, #8]
 8016a9a:	1dbb      	adds	r3, r7, #6
 8016a9c:	801a      	strh	r2, [r3, #0]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8016a9e:	68fb      	ldr	r3, [r7, #12]
 8016aa0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8016aa2:	2b20      	cmp	r3, #32
 8016aa4:	d000      	beq.n	8016aa8 <HAL_UART_Transmit_DMA+0x18>
 8016aa6:	e077      	b.n	8016b98 <HAL_UART_Transmit_DMA+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8016aa8:	68bb      	ldr	r3, [r7, #8]
 8016aaa:	2b00      	cmp	r3, #0
 8016aac:	d003      	beq.n	8016ab6 <HAL_UART_Transmit_DMA+0x26>
 8016aae:	1dbb      	adds	r3, r7, #6
 8016ab0:	881b      	ldrh	r3, [r3, #0]
 8016ab2:	2b00      	cmp	r3, #0
 8016ab4:	d101      	bne.n	8016aba <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8016ab6:	2301      	movs	r3, #1
 8016ab8:	e06f      	b.n	8016b9a <HAL_UART_Transmit_DMA+0x10a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy into TDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8016aba:	68fb      	ldr	r3, [r7, #12]
 8016abc:	689a      	ldr	r2, [r3, #8]
 8016abe:	2380      	movs	r3, #128	@ 0x80
 8016ac0:	015b      	lsls	r3, r3, #5
 8016ac2:	429a      	cmp	r2, r3
 8016ac4:	d109      	bne.n	8016ada <HAL_UART_Transmit_DMA+0x4a>
 8016ac6:	68fb      	ldr	r3, [r7, #12]
 8016ac8:	691b      	ldr	r3, [r3, #16]
 8016aca:	2b00      	cmp	r3, #0
 8016acc:	d105      	bne.n	8016ada <HAL_UART_Transmit_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8016ace:	68bb      	ldr	r3, [r7, #8]
 8016ad0:	2201      	movs	r2, #1
 8016ad2:	4013      	ands	r3, r2
 8016ad4:	d001      	beq.n	8016ada <HAL_UART_Transmit_DMA+0x4a>
      {
        return  HAL_ERROR;
 8016ad6:	2301      	movs	r3, #1
 8016ad8:	e05f      	b.n	8016b9a <HAL_UART_Transmit_DMA+0x10a>
      }
    }

    huart->pTxBuffPtr  = pData;
 8016ada:	68fb      	ldr	r3, [r7, #12]
 8016adc:	68ba      	ldr	r2, [r7, #8]
 8016ade:	64da      	str	r2, [r3, #76]	@ 0x4c
    huart->TxXferSize  = Size;
 8016ae0:	68fb      	ldr	r3, [r7, #12]
 8016ae2:	1dba      	adds	r2, r7, #6
 8016ae4:	2150      	movs	r1, #80	@ 0x50
 8016ae6:	8812      	ldrh	r2, [r2, #0]
 8016ae8:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8016aea:	68fb      	ldr	r3, [r7, #12]
 8016aec:	1dba      	adds	r2, r7, #6
 8016aee:	2152      	movs	r1, #82	@ 0x52
 8016af0:	8812      	ldrh	r2, [r2, #0]
 8016af2:	525a      	strh	r2, [r3, r1]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8016af4:	68fb      	ldr	r3, [r7, #12]
 8016af6:	2284      	movs	r2, #132	@ 0x84
 8016af8:	2100      	movs	r1, #0
 8016afa:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8016afc:	68fb      	ldr	r3, [r7, #12]
 8016afe:	2221      	movs	r2, #33	@ 0x21
 8016b00:	67da      	str	r2, [r3, #124]	@ 0x7c

    if (huart->hdmatx != NULL)
 8016b02:	68fb      	ldr	r3, [r7, #12]
 8016b04:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8016b06:	2b00      	cmp	r3, #0
 8016b08:	d027      	beq.n	8016b5a <HAL_UART_Transmit_DMA+0xca>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8016b0a:	68fb      	ldr	r3, [r7, #12]
 8016b0c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8016b0e:	4a25      	ldr	r2, [pc, #148]	@ (8016ba4 <HAL_UART_Transmit_DMA+0x114>)
 8016b10:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8016b12:	68fb      	ldr	r3, [r7, #12]
 8016b14:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8016b16:	4a24      	ldr	r2, [pc, #144]	@ (8016ba8 <HAL_UART_Transmit_DMA+0x118>)
 8016b18:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8016b1a:	68fb      	ldr	r3, [r7, #12]
 8016b1c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8016b1e:	4a23      	ldr	r2, [pc, #140]	@ (8016bac <HAL_UART_Transmit_DMA+0x11c>)
 8016b20:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8016b22:	68fb      	ldr	r3, [r7, #12]
 8016b24:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8016b26:	2200      	movs	r2, #0
 8016b28:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8016b2a:	68fb      	ldr	r3, [r7, #12]
 8016b2c:	6f18      	ldr	r0, [r3, #112]	@ 0x70
 8016b2e:	68fb      	ldr	r3, [r7, #12]
 8016b30:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8016b32:	0019      	movs	r1, r3
 8016b34:	68fb      	ldr	r3, [r7, #12]
 8016b36:	681b      	ldr	r3, [r3, #0]
 8016b38:	3328      	adds	r3, #40	@ 0x28
 8016b3a:	001a      	movs	r2, r3
 8016b3c:	1dbb      	adds	r3, r7, #6
 8016b3e:	881b      	ldrh	r3, [r3, #0]
 8016b40:	f7f8 f9e4 	bl	800ef0c <HAL_DMA_Start_IT>
 8016b44:	1e03      	subs	r3, r0, #0
 8016b46:	d008      	beq.n	8016b5a <HAL_UART_Transmit_DMA+0xca>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8016b48:	68fb      	ldr	r3, [r7, #12]
 8016b4a:	2284      	movs	r2, #132	@ 0x84
 8016b4c:	2110      	movs	r1, #16
 8016b4e:	5099      	str	r1, [r3, r2]

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8016b50:	68fb      	ldr	r3, [r7, #12]
 8016b52:	2220      	movs	r2, #32
 8016b54:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_ERROR;
 8016b56:	2301      	movs	r3, #1
 8016b58:	e01f      	b.n	8016b9a <HAL_UART_Transmit_DMA+0x10a>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8016b5a:	68fb      	ldr	r3, [r7, #12]
 8016b5c:	681b      	ldr	r3, [r3, #0]
 8016b5e:	2240      	movs	r2, #64	@ 0x40
 8016b60:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8016b62:	f3ef 8310 	mrs	r3, PRIMASK
 8016b66:	613b      	str	r3, [r7, #16]
  return(result);
 8016b68:	693b      	ldr	r3, [r7, #16]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8016b6a:	61fb      	str	r3, [r7, #28]
 8016b6c:	2301      	movs	r3, #1
 8016b6e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8016b70:	697b      	ldr	r3, [r7, #20]
 8016b72:	f383 8810 	msr	PRIMASK, r3
}
 8016b76:	46c0      	nop			@ (mov r8, r8)
 8016b78:	68fb      	ldr	r3, [r7, #12]
 8016b7a:	681b      	ldr	r3, [r3, #0]
 8016b7c:	689a      	ldr	r2, [r3, #8]
 8016b7e:	68fb      	ldr	r3, [r7, #12]
 8016b80:	681b      	ldr	r3, [r3, #0]
 8016b82:	2180      	movs	r1, #128	@ 0x80
 8016b84:	430a      	orrs	r2, r1
 8016b86:	609a      	str	r2, [r3, #8]
 8016b88:	69fb      	ldr	r3, [r7, #28]
 8016b8a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8016b8c:	69bb      	ldr	r3, [r7, #24]
 8016b8e:	f383 8810 	msr	PRIMASK, r3
}
 8016b92:	46c0      	nop			@ (mov r8, r8)

    return HAL_OK;
 8016b94:	2300      	movs	r3, #0
 8016b96:	e000      	b.n	8016b9a <HAL_UART_Transmit_DMA+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8016b98:	2302      	movs	r3, #2
  }
}
 8016b9a:	0018      	movs	r0, r3
 8016b9c:	46bd      	mov	sp, r7
 8016b9e:	b008      	add	sp, #32
 8016ba0:	bd80      	pop	{r7, pc}
 8016ba2:	46c0      	nop			@ (mov r8, r8)
 8016ba4:	08017ff1 	.word	0x08017ff1
 8016ba8:	0801808d 	.word	0x0801808d
 8016bac:	0801822d 	.word	0x0801822d

08016bb0 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8016bb0:	b580      	push	{r7, lr}
 8016bb2:	b088      	sub	sp, #32
 8016bb4:	af00      	add	r7, sp, #0
 8016bb6:	60f8      	str	r0, [r7, #12]
 8016bb8:	60b9      	str	r1, [r7, #8]
 8016bba:	1dbb      	adds	r3, r7, #6
 8016bbc:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8016bbe:	68fb      	ldr	r3, [r7, #12]
 8016bc0:	2280      	movs	r2, #128	@ 0x80
 8016bc2:	589b      	ldr	r3, [r3, r2]
 8016bc4:	2b20      	cmp	r3, #32
 8016bc6:	d14a      	bne.n	8016c5e <HAL_UART_Receive_DMA+0xae>
  {
    if ((pData == NULL) || (Size == 0U))
 8016bc8:	68bb      	ldr	r3, [r7, #8]
 8016bca:	2b00      	cmp	r3, #0
 8016bcc:	d003      	beq.n	8016bd6 <HAL_UART_Receive_DMA+0x26>
 8016bce:	1dbb      	adds	r3, r7, #6
 8016bd0:	881b      	ldrh	r3, [r3, #0]
 8016bd2:	2b00      	cmp	r3, #0
 8016bd4:	d101      	bne.n	8016bda <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8016bd6:	2301      	movs	r3, #1
 8016bd8:	e042      	b.n	8016c60 <HAL_UART_Receive_DMA+0xb0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy from RDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8016bda:	68fb      	ldr	r3, [r7, #12]
 8016bdc:	689a      	ldr	r2, [r3, #8]
 8016bde:	2380      	movs	r3, #128	@ 0x80
 8016be0:	015b      	lsls	r3, r3, #5
 8016be2:	429a      	cmp	r2, r3
 8016be4:	d109      	bne.n	8016bfa <HAL_UART_Receive_DMA+0x4a>
 8016be6:	68fb      	ldr	r3, [r7, #12]
 8016be8:	691b      	ldr	r3, [r3, #16]
 8016bea:	2b00      	cmp	r3, #0
 8016bec:	d105      	bne.n	8016bfa <HAL_UART_Receive_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8016bee:	68bb      	ldr	r3, [r7, #8]
 8016bf0:	2201      	movs	r2, #1
 8016bf2:	4013      	ands	r3, r2
 8016bf4:	d001      	beq.n	8016bfa <HAL_UART_Receive_DMA+0x4a>
      {
        return  HAL_ERROR;
 8016bf6:	2301      	movs	r3, #1
 8016bf8:	e032      	b.n	8016c60 <HAL_UART_Receive_DMA+0xb0>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8016bfa:	68fb      	ldr	r3, [r7, #12]
 8016bfc:	2200      	movs	r2, #0
 8016bfe:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8016c00:	68fb      	ldr	r3, [r7, #12]
 8016c02:	681b      	ldr	r3, [r3, #0]
 8016c04:	4a18      	ldr	r2, [pc, #96]	@ (8016c68 <HAL_UART_Receive_DMA+0xb8>)
 8016c06:	4293      	cmp	r3, r2
 8016c08:	d020      	beq.n	8016c4c <HAL_UART_Receive_DMA+0x9c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8016c0a:	68fb      	ldr	r3, [r7, #12]
 8016c0c:	681b      	ldr	r3, [r3, #0]
 8016c0e:	685a      	ldr	r2, [r3, #4]
 8016c10:	2380      	movs	r3, #128	@ 0x80
 8016c12:	041b      	lsls	r3, r3, #16
 8016c14:	4013      	ands	r3, r2
 8016c16:	d019      	beq.n	8016c4c <HAL_UART_Receive_DMA+0x9c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8016c18:	f3ef 8310 	mrs	r3, PRIMASK
 8016c1c:	613b      	str	r3, [r7, #16]
  return(result);
 8016c1e:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8016c20:	61fb      	str	r3, [r7, #28]
 8016c22:	2301      	movs	r3, #1
 8016c24:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8016c26:	697b      	ldr	r3, [r7, #20]
 8016c28:	f383 8810 	msr	PRIMASK, r3
}
 8016c2c:	46c0      	nop			@ (mov r8, r8)
 8016c2e:	68fb      	ldr	r3, [r7, #12]
 8016c30:	681b      	ldr	r3, [r3, #0]
 8016c32:	681a      	ldr	r2, [r3, #0]
 8016c34:	68fb      	ldr	r3, [r7, #12]
 8016c36:	681b      	ldr	r3, [r3, #0]
 8016c38:	2180      	movs	r1, #128	@ 0x80
 8016c3a:	04c9      	lsls	r1, r1, #19
 8016c3c:	430a      	orrs	r2, r1
 8016c3e:	601a      	str	r2, [r3, #0]
 8016c40:	69fb      	ldr	r3, [r7, #28]
 8016c42:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8016c44:	69bb      	ldr	r3, [r7, #24]
 8016c46:	f383 8810 	msr	PRIMASK, r3
}
 8016c4a:	46c0      	nop			@ (mov r8, r8)
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8016c4c:	1dbb      	adds	r3, r7, #6
 8016c4e:	881a      	ldrh	r2, [r3, #0]
 8016c50:	68b9      	ldr	r1, [r7, #8]
 8016c52:	68fb      	ldr	r3, [r7, #12]
 8016c54:	0018      	movs	r0, r3
 8016c56:	f001 f8a3 	bl	8017da0 <UART_Start_Receive_DMA>
 8016c5a:	0003      	movs	r3, r0
 8016c5c:	e000      	b.n	8016c60 <HAL_UART_Receive_DMA+0xb0>
  }
  else
  {
    return HAL_BUSY;
 8016c5e:	2302      	movs	r3, #2
  }
}
 8016c60:	0018      	movs	r0, r3
 8016c62:	46bd      	mov	sp, r7
 8016c64:	b008      	add	sp, #32
 8016c66:	bd80      	pop	{r7, pc}
 8016c68:	40004800 	.word	0x40004800

08016c6c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8016c6c:	b590      	push	{r4, r7, lr}
 8016c6e:	b0ab      	sub	sp, #172	@ 0xac
 8016c70:	af00      	add	r7, sp, #0
 8016c72:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8016c74:	687b      	ldr	r3, [r7, #4]
 8016c76:	681b      	ldr	r3, [r3, #0]
 8016c78:	69db      	ldr	r3, [r3, #28]
 8016c7a:	22a4      	movs	r2, #164	@ 0xa4
 8016c7c:	18b9      	adds	r1, r7, r2
 8016c7e:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8016c80:	687b      	ldr	r3, [r7, #4]
 8016c82:	681b      	ldr	r3, [r3, #0]
 8016c84:	681b      	ldr	r3, [r3, #0]
 8016c86:	20a0      	movs	r0, #160	@ 0xa0
 8016c88:	1839      	adds	r1, r7, r0
 8016c8a:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8016c8c:	687b      	ldr	r3, [r7, #4]
 8016c8e:	681b      	ldr	r3, [r3, #0]
 8016c90:	689b      	ldr	r3, [r3, #8]
 8016c92:	219c      	movs	r1, #156	@ 0x9c
 8016c94:	1879      	adds	r1, r7, r1
 8016c96:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8016c98:	0011      	movs	r1, r2
 8016c9a:	18bb      	adds	r3, r7, r2
 8016c9c:	681b      	ldr	r3, [r3, #0]
 8016c9e:	4a9c      	ldr	r2, [pc, #624]	@ (8016f10 <HAL_UART_IRQHandler+0x2a4>)
 8016ca0:	4013      	ands	r3, r2
 8016ca2:	2298      	movs	r2, #152	@ 0x98
 8016ca4:	18bc      	adds	r4, r7, r2
 8016ca6:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 8016ca8:	18bb      	adds	r3, r7, r2
 8016caa:	681b      	ldr	r3, [r3, #0]
 8016cac:	2b00      	cmp	r3, #0
 8016cae:	d114      	bne.n	8016cda <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8016cb0:	187b      	adds	r3, r7, r1
 8016cb2:	681b      	ldr	r3, [r3, #0]
 8016cb4:	2220      	movs	r2, #32
 8016cb6:	4013      	ands	r3, r2
 8016cb8:	d00f      	beq.n	8016cda <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8016cba:	183b      	adds	r3, r7, r0
 8016cbc:	681b      	ldr	r3, [r3, #0]
 8016cbe:	2220      	movs	r2, #32
 8016cc0:	4013      	ands	r3, r2
 8016cc2:	d00a      	beq.n	8016cda <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 8016cc4:	687b      	ldr	r3, [r7, #4]
 8016cc6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8016cc8:	2b00      	cmp	r3, #0
 8016cca:	d100      	bne.n	8016cce <HAL_UART_IRQHandler+0x62>
 8016ccc:	e2aa      	b.n	8017224 <HAL_UART_IRQHandler+0x5b8>
      {
        huart->RxISR(huart);
 8016cce:	687b      	ldr	r3, [r7, #4]
 8016cd0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8016cd2:	687a      	ldr	r2, [r7, #4]
 8016cd4:	0010      	movs	r0, r2
 8016cd6:	4798      	blx	r3
      }
      return;
 8016cd8:	e2a4      	b.n	8017224 <HAL_UART_IRQHandler+0x5b8>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8016cda:	2398      	movs	r3, #152	@ 0x98
 8016cdc:	18fb      	adds	r3, r7, r3
 8016cde:	681b      	ldr	r3, [r3, #0]
 8016ce0:	2b00      	cmp	r3, #0
 8016ce2:	d100      	bne.n	8016ce6 <HAL_UART_IRQHandler+0x7a>
 8016ce4:	e11a      	b.n	8016f1c <HAL_UART_IRQHandler+0x2b0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8016ce6:	239c      	movs	r3, #156	@ 0x9c
 8016ce8:	18fb      	adds	r3, r7, r3
 8016cea:	681b      	ldr	r3, [r3, #0]
 8016cec:	2201      	movs	r2, #1
 8016cee:	4013      	ands	r3, r2
 8016cf0:	d106      	bne.n	8016d00 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8016cf2:	23a0      	movs	r3, #160	@ 0xa0
 8016cf4:	18fb      	adds	r3, r7, r3
 8016cf6:	681b      	ldr	r3, [r3, #0]
 8016cf8:	4a86      	ldr	r2, [pc, #536]	@ (8016f14 <HAL_UART_IRQHandler+0x2a8>)
 8016cfa:	4013      	ands	r3, r2
 8016cfc:	d100      	bne.n	8016d00 <HAL_UART_IRQHandler+0x94>
 8016cfe:	e10d      	b.n	8016f1c <HAL_UART_IRQHandler+0x2b0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8016d00:	23a4      	movs	r3, #164	@ 0xa4
 8016d02:	18fb      	adds	r3, r7, r3
 8016d04:	681b      	ldr	r3, [r3, #0]
 8016d06:	2201      	movs	r2, #1
 8016d08:	4013      	ands	r3, r2
 8016d0a:	d012      	beq.n	8016d32 <HAL_UART_IRQHandler+0xc6>
 8016d0c:	23a0      	movs	r3, #160	@ 0xa0
 8016d0e:	18fb      	adds	r3, r7, r3
 8016d10:	681a      	ldr	r2, [r3, #0]
 8016d12:	2380      	movs	r3, #128	@ 0x80
 8016d14:	005b      	lsls	r3, r3, #1
 8016d16:	4013      	ands	r3, r2
 8016d18:	d00b      	beq.n	8016d32 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8016d1a:	687b      	ldr	r3, [r7, #4]
 8016d1c:	681b      	ldr	r3, [r3, #0]
 8016d1e:	2201      	movs	r2, #1
 8016d20:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8016d22:	687b      	ldr	r3, [r7, #4]
 8016d24:	2284      	movs	r2, #132	@ 0x84
 8016d26:	589b      	ldr	r3, [r3, r2]
 8016d28:	2201      	movs	r2, #1
 8016d2a:	431a      	orrs	r2, r3
 8016d2c:	687b      	ldr	r3, [r7, #4]
 8016d2e:	2184      	movs	r1, #132	@ 0x84
 8016d30:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8016d32:	23a4      	movs	r3, #164	@ 0xa4
 8016d34:	18fb      	adds	r3, r7, r3
 8016d36:	681b      	ldr	r3, [r3, #0]
 8016d38:	2202      	movs	r2, #2
 8016d3a:	4013      	ands	r3, r2
 8016d3c:	d011      	beq.n	8016d62 <HAL_UART_IRQHandler+0xf6>
 8016d3e:	239c      	movs	r3, #156	@ 0x9c
 8016d40:	18fb      	adds	r3, r7, r3
 8016d42:	681b      	ldr	r3, [r3, #0]
 8016d44:	2201      	movs	r2, #1
 8016d46:	4013      	ands	r3, r2
 8016d48:	d00b      	beq.n	8016d62 <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8016d4a:	687b      	ldr	r3, [r7, #4]
 8016d4c:	681b      	ldr	r3, [r3, #0]
 8016d4e:	2202      	movs	r2, #2
 8016d50:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8016d52:	687b      	ldr	r3, [r7, #4]
 8016d54:	2284      	movs	r2, #132	@ 0x84
 8016d56:	589b      	ldr	r3, [r3, r2]
 8016d58:	2204      	movs	r2, #4
 8016d5a:	431a      	orrs	r2, r3
 8016d5c:	687b      	ldr	r3, [r7, #4]
 8016d5e:	2184      	movs	r1, #132	@ 0x84
 8016d60:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8016d62:	23a4      	movs	r3, #164	@ 0xa4
 8016d64:	18fb      	adds	r3, r7, r3
 8016d66:	681b      	ldr	r3, [r3, #0]
 8016d68:	2204      	movs	r2, #4
 8016d6a:	4013      	ands	r3, r2
 8016d6c:	d011      	beq.n	8016d92 <HAL_UART_IRQHandler+0x126>
 8016d6e:	239c      	movs	r3, #156	@ 0x9c
 8016d70:	18fb      	adds	r3, r7, r3
 8016d72:	681b      	ldr	r3, [r3, #0]
 8016d74:	2201      	movs	r2, #1
 8016d76:	4013      	ands	r3, r2
 8016d78:	d00b      	beq.n	8016d92 <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8016d7a:	687b      	ldr	r3, [r7, #4]
 8016d7c:	681b      	ldr	r3, [r3, #0]
 8016d7e:	2204      	movs	r2, #4
 8016d80:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8016d82:	687b      	ldr	r3, [r7, #4]
 8016d84:	2284      	movs	r2, #132	@ 0x84
 8016d86:	589b      	ldr	r3, [r3, r2]
 8016d88:	2202      	movs	r2, #2
 8016d8a:	431a      	orrs	r2, r3
 8016d8c:	687b      	ldr	r3, [r7, #4]
 8016d8e:	2184      	movs	r1, #132	@ 0x84
 8016d90:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8016d92:	23a4      	movs	r3, #164	@ 0xa4
 8016d94:	18fb      	adds	r3, r7, r3
 8016d96:	681b      	ldr	r3, [r3, #0]
 8016d98:	2208      	movs	r2, #8
 8016d9a:	4013      	ands	r3, r2
 8016d9c:	d017      	beq.n	8016dce <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8016d9e:	23a0      	movs	r3, #160	@ 0xa0
 8016da0:	18fb      	adds	r3, r7, r3
 8016da2:	681b      	ldr	r3, [r3, #0]
 8016da4:	2220      	movs	r2, #32
 8016da6:	4013      	ands	r3, r2
 8016da8:	d105      	bne.n	8016db6 <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8016daa:	239c      	movs	r3, #156	@ 0x9c
 8016dac:	18fb      	adds	r3, r7, r3
 8016dae:	681b      	ldr	r3, [r3, #0]
 8016db0:	2201      	movs	r2, #1
 8016db2:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8016db4:	d00b      	beq.n	8016dce <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8016db6:	687b      	ldr	r3, [r7, #4]
 8016db8:	681b      	ldr	r3, [r3, #0]
 8016dba:	2208      	movs	r2, #8
 8016dbc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8016dbe:	687b      	ldr	r3, [r7, #4]
 8016dc0:	2284      	movs	r2, #132	@ 0x84
 8016dc2:	589b      	ldr	r3, [r3, r2]
 8016dc4:	2208      	movs	r2, #8
 8016dc6:	431a      	orrs	r2, r3
 8016dc8:	687b      	ldr	r3, [r7, #4]
 8016dca:	2184      	movs	r1, #132	@ 0x84
 8016dcc:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8016dce:	23a4      	movs	r3, #164	@ 0xa4
 8016dd0:	18fb      	adds	r3, r7, r3
 8016dd2:	681a      	ldr	r2, [r3, #0]
 8016dd4:	2380      	movs	r3, #128	@ 0x80
 8016dd6:	011b      	lsls	r3, r3, #4
 8016dd8:	4013      	ands	r3, r2
 8016dda:	d013      	beq.n	8016e04 <HAL_UART_IRQHandler+0x198>
 8016ddc:	23a0      	movs	r3, #160	@ 0xa0
 8016dde:	18fb      	adds	r3, r7, r3
 8016de0:	681a      	ldr	r2, [r3, #0]
 8016de2:	2380      	movs	r3, #128	@ 0x80
 8016de4:	04db      	lsls	r3, r3, #19
 8016de6:	4013      	ands	r3, r2
 8016de8:	d00c      	beq.n	8016e04 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8016dea:	687b      	ldr	r3, [r7, #4]
 8016dec:	681b      	ldr	r3, [r3, #0]
 8016dee:	2280      	movs	r2, #128	@ 0x80
 8016df0:	0112      	lsls	r2, r2, #4
 8016df2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8016df4:	687b      	ldr	r3, [r7, #4]
 8016df6:	2284      	movs	r2, #132	@ 0x84
 8016df8:	589b      	ldr	r3, [r3, r2]
 8016dfa:	2220      	movs	r2, #32
 8016dfc:	431a      	orrs	r2, r3
 8016dfe:	687b      	ldr	r3, [r7, #4]
 8016e00:	2184      	movs	r1, #132	@ 0x84
 8016e02:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8016e04:	687b      	ldr	r3, [r7, #4]
 8016e06:	2284      	movs	r2, #132	@ 0x84
 8016e08:	589b      	ldr	r3, [r3, r2]
 8016e0a:	2b00      	cmp	r3, #0
 8016e0c:	d100      	bne.n	8016e10 <HAL_UART_IRQHandler+0x1a4>
 8016e0e:	e20b      	b.n	8017228 <HAL_UART_IRQHandler+0x5bc>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8016e10:	23a4      	movs	r3, #164	@ 0xa4
 8016e12:	18fb      	adds	r3, r7, r3
 8016e14:	681b      	ldr	r3, [r3, #0]
 8016e16:	2220      	movs	r2, #32
 8016e18:	4013      	ands	r3, r2
 8016e1a:	d00e      	beq.n	8016e3a <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8016e1c:	23a0      	movs	r3, #160	@ 0xa0
 8016e1e:	18fb      	adds	r3, r7, r3
 8016e20:	681b      	ldr	r3, [r3, #0]
 8016e22:	2220      	movs	r2, #32
 8016e24:	4013      	ands	r3, r2
 8016e26:	d008      	beq.n	8016e3a <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 8016e28:	687b      	ldr	r3, [r7, #4]
 8016e2a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8016e2c:	2b00      	cmp	r3, #0
 8016e2e:	d004      	beq.n	8016e3a <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 8016e30:	687b      	ldr	r3, [r7, #4]
 8016e32:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8016e34:	687a      	ldr	r2, [r7, #4]
 8016e36:	0010      	movs	r0, r2
 8016e38:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8016e3a:	687b      	ldr	r3, [r7, #4]
 8016e3c:	2284      	movs	r2, #132	@ 0x84
 8016e3e:	589b      	ldr	r3, [r3, r2]
 8016e40:	2194      	movs	r1, #148	@ 0x94
 8016e42:	187a      	adds	r2, r7, r1
 8016e44:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8016e46:	687b      	ldr	r3, [r7, #4]
 8016e48:	681b      	ldr	r3, [r3, #0]
 8016e4a:	689b      	ldr	r3, [r3, #8]
 8016e4c:	2240      	movs	r2, #64	@ 0x40
 8016e4e:	4013      	ands	r3, r2
 8016e50:	2b40      	cmp	r3, #64	@ 0x40
 8016e52:	d004      	beq.n	8016e5e <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8016e54:	187b      	adds	r3, r7, r1
 8016e56:	681b      	ldr	r3, [r3, #0]
 8016e58:	2228      	movs	r2, #40	@ 0x28
 8016e5a:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8016e5c:	d04b      	beq.n	8016ef6 <HAL_UART_IRQHandler+0x28a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8016e5e:	687b      	ldr	r3, [r7, #4]
 8016e60:	0018      	movs	r0, r3
 8016e62:	f001 f861 	bl	8017f28 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8016e66:	687b      	ldr	r3, [r7, #4]
 8016e68:	681b      	ldr	r3, [r3, #0]
 8016e6a:	689b      	ldr	r3, [r3, #8]
 8016e6c:	2240      	movs	r2, #64	@ 0x40
 8016e6e:	4013      	ands	r3, r2
 8016e70:	2b40      	cmp	r3, #64	@ 0x40
 8016e72:	d139      	bne.n	8016ee8 <HAL_UART_IRQHandler+0x27c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8016e74:	f3ef 8310 	mrs	r3, PRIMASK
 8016e78:	663b      	str	r3, [r7, #96]	@ 0x60
  return(result);
 8016e7a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8016e7c:	2090      	movs	r0, #144	@ 0x90
 8016e7e:	183a      	adds	r2, r7, r0
 8016e80:	6013      	str	r3, [r2, #0]
 8016e82:	2301      	movs	r3, #1
 8016e84:	667b      	str	r3, [r7, #100]	@ 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8016e86:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8016e88:	f383 8810 	msr	PRIMASK, r3
}
 8016e8c:	46c0      	nop			@ (mov r8, r8)
 8016e8e:	687b      	ldr	r3, [r7, #4]
 8016e90:	681b      	ldr	r3, [r3, #0]
 8016e92:	689a      	ldr	r2, [r3, #8]
 8016e94:	687b      	ldr	r3, [r7, #4]
 8016e96:	681b      	ldr	r3, [r3, #0]
 8016e98:	2140      	movs	r1, #64	@ 0x40
 8016e9a:	438a      	bics	r2, r1
 8016e9c:	609a      	str	r2, [r3, #8]
 8016e9e:	183b      	adds	r3, r7, r0
 8016ea0:	681b      	ldr	r3, [r3, #0]
 8016ea2:	66bb      	str	r3, [r7, #104]	@ 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8016ea4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8016ea6:	f383 8810 	msr	PRIMASK, r3
}
 8016eaa:	46c0      	nop			@ (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8016eac:	687b      	ldr	r3, [r7, #4]
 8016eae:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8016eb0:	2b00      	cmp	r3, #0
 8016eb2:	d012      	beq.n	8016eda <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8016eb4:	687b      	ldr	r3, [r7, #4]
 8016eb6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8016eb8:	4a17      	ldr	r2, [pc, #92]	@ (8016f18 <HAL_UART_IRQHandler+0x2ac>)
 8016eba:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8016ebc:	687b      	ldr	r3, [r7, #4]
 8016ebe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8016ec0:	0018      	movs	r0, r3
 8016ec2:	f7f8 f8c9 	bl	800f058 <HAL_DMA_Abort_IT>
 8016ec6:	1e03      	subs	r3, r0, #0
 8016ec8:	d020      	beq.n	8016f0c <HAL_UART_IRQHandler+0x2a0>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8016eca:	687b      	ldr	r3, [r7, #4]
 8016ecc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8016ece:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8016ed0:	687b      	ldr	r3, [r7, #4]
 8016ed2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8016ed4:	0018      	movs	r0, r3
 8016ed6:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8016ed8:	e018      	b.n	8016f0c <HAL_UART_IRQHandler+0x2a0>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 8016eda:	687b      	ldr	r3, [r7, #4]
 8016edc:	2298      	movs	r2, #152	@ 0x98
 8016ede:	589b      	ldr	r3, [r3, r2]
 8016ee0:	687a      	ldr	r2, [r7, #4]
 8016ee2:	0010      	movs	r0, r2
 8016ee4:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8016ee6:	e011      	b.n	8016f0c <HAL_UART_IRQHandler+0x2a0>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 8016ee8:	687b      	ldr	r3, [r7, #4]
 8016eea:	2298      	movs	r2, #152	@ 0x98
 8016eec:	589b      	ldr	r3, [r3, r2]
 8016eee:	687a      	ldr	r2, [r7, #4]
 8016ef0:	0010      	movs	r0, r2
 8016ef2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8016ef4:	e00a      	b.n	8016f0c <HAL_UART_IRQHandler+0x2a0>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 8016ef6:	687b      	ldr	r3, [r7, #4]
 8016ef8:	2298      	movs	r2, #152	@ 0x98
 8016efa:	589b      	ldr	r3, [r3, r2]
 8016efc:	687a      	ldr	r2, [r7, #4]
 8016efe:	0010      	movs	r0, r2
 8016f00:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8016f02:	687b      	ldr	r3, [r7, #4]
 8016f04:	2284      	movs	r2, #132	@ 0x84
 8016f06:	2100      	movs	r1, #0
 8016f08:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8016f0a:	e18d      	b.n	8017228 <HAL_UART_IRQHandler+0x5bc>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8016f0c:	46c0      	nop			@ (mov r8, r8)
    return;
 8016f0e:	e18b      	b.n	8017228 <HAL_UART_IRQHandler+0x5bc>
 8016f10:	0000080f 	.word	0x0000080f
 8016f14:	04000120 	.word	0x04000120
 8016f18:	080182b5 	.word	0x080182b5

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8016f1c:	687b      	ldr	r3, [r7, #4]
 8016f1e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8016f20:	2b01      	cmp	r3, #1
 8016f22:	d000      	beq.n	8016f26 <HAL_UART_IRQHandler+0x2ba>
 8016f24:	e13d      	b.n	80171a2 <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8016f26:	23a4      	movs	r3, #164	@ 0xa4
 8016f28:	18fb      	adds	r3, r7, r3
 8016f2a:	681b      	ldr	r3, [r3, #0]
 8016f2c:	2210      	movs	r2, #16
 8016f2e:	4013      	ands	r3, r2
 8016f30:	d100      	bne.n	8016f34 <HAL_UART_IRQHandler+0x2c8>
 8016f32:	e136      	b.n	80171a2 <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8016f34:	23a0      	movs	r3, #160	@ 0xa0
 8016f36:	18fb      	adds	r3, r7, r3
 8016f38:	681b      	ldr	r3, [r3, #0]
 8016f3a:	2210      	movs	r2, #16
 8016f3c:	4013      	ands	r3, r2
 8016f3e:	d100      	bne.n	8016f42 <HAL_UART_IRQHandler+0x2d6>
 8016f40:	e12f      	b.n	80171a2 <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8016f42:	687b      	ldr	r3, [r7, #4]
 8016f44:	681b      	ldr	r3, [r3, #0]
 8016f46:	2210      	movs	r2, #16
 8016f48:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8016f4a:	687b      	ldr	r3, [r7, #4]
 8016f4c:	681b      	ldr	r3, [r3, #0]
 8016f4e:	689b      	ldr	r3, [r3, #8]
 8016f50:	2240      	movs	r2, #64	@ 0x40
 8016f52:	4013      	ands	r3, r2
 8016f54:	2b40      	cmp	r3, #64	@ 0x40
 8016f56:	d000      	beq.n	8016f5a <HAL_UART_IRQHandler+0x2ee>
 8016f58:	e0a2      	b.n	80170a0 <HAL_UART_IRQHandler+0x434>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8016f5a:	687b      	ldr	r3, [r7, #4]
 8016f5c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8016f5e:	681b      	ldr	r3, [r3, #0]
 8016f60:	685a      	ldr	r2, [r3, #4]
 8016f62:	217e      	movs	r1, #126	@ 0x7e
 8016f64:	187b      	adds	r3, r7, r1
 8016f66:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8016f68:	187b      	adds	r3, r7, r1
 8016f6a:	881b      	ldrh	r3, [r3, #0]
 8016f6c:	2b00      	cmp	r3, #0
 8016f6e:	d100      	bne.n	8016f72 <HAL_UART_IRQHandler+0x306>
 8016f70:	e15c      	b.n	801722c <HAL_UART_IRQHandler+0x5c0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8016f72:	687b      	ldr	r3, [r7, #4]
 8016f74:	2258      	movs	r2, #88	@ 0x58
 8016f76:	5a9b      	ldrh	r3, [r3, r2]
 8016f78:	187a      	adds	r2, r7, r1
 8016f7a:	8812      	ldrh	r2, [r2, #0]
 8016f7c:	429a      	cmp	r2, r3
 8016f7e:	d300      	bcc.n	8016f82 <HAL_UART_IRQHandler+0x316>
 8016f80:	e154      	b.n	801722c <HAL_UART_IRQHandler+0x5c0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8016f82:	687b      	ldr	r3, [r7, #4]
 8016f84:	187a      	adds	r2, r7, r1
 8016f86:	215a      	movs	r1, #90	@ 0x5a
 8016f88:	8812      	ldrh	r2, [r2, #0]
 8016f8a:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8016f8c:	687b      	ldr	r3, [r7, #4]
 8016f8e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8016f90:	681b      	ldr	r3, [r3, #0]
 8016f92:	681b      	ldr	r3, [r3, #0]
 8016f94:	2220      	movs	r2, #32
 8016f96:	4013      	ands	r3, r2
 8016f98:	d16f      	bne.n	801707a <HAL_UART_IRQHandler+0x40e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8016f9a:	f3ef 8310 	mrs	r3, PRIMASK
 8016f9e:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8016fa0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8016fa2:	67bb      	str	r3, [r7, #120]	@ 0x78
 8016fa4:	2301      	movs	r3, #1
 8016fa6:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8016fa8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8016faa:	f383 8810 	msr	PRIMASK, r3
}
 8016fae:	46c0      	nop			@ (mov r8, r8)
 8016fb0:	687b      	ldr	r3, [r7, #4]
 8016fb2:	681b      	ldr	r3, [r3, #0]
 8016fb4:	681a      	ldr	r2, [r3, #0]
 8016fb6:	687b      	ldr	r3, [r7, #4]
 8016fb8:	681b      	ldr	r3, [r3, #0]
 8016fba:	49a0      	ldr	r1, [pc, #640]	@ (801723c <HAL_UART_IRQHandler+0x5d0>)
 8016fbc:	400a      	ands	r2, r1
 8016fbe:	601a      	str	r2, [r3, #0]
 8016fc0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8016fc2:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8016fc4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8016fc6:	f383 8810 	msr	PRIMASK, r3
}
 8016fca:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8016fcc:	f3ef 8310 	mrs	r3, PRIMASK
 8016fd0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 8016fd2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8016fd4:	677b      	str	r3, [r7, #116]	@ 0x74
 8016fd6:	2301      	movs	r3, #1
 8016fd8:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8016fda:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8016fdc:	f383 8810 	msr	PRIMASK, r3
}
 8016fe0:	46c0      	nop			@ (mov r8, r8)
 8016fe2:	687b      	ldr	r3, [r7, #4]
 8016fe4:	681b      	ldr	r3, [r3, #0]
 8016fe6:	689a      	ldr	r2, [r3, #8]
 8016fe8:	687b      	ldr	r3, [r7, #4]
 8016fea:	681b      	ldr	r3, [r3, #0]
 8016fec:	2101      	movs	r1, #1
 8016fee:	438a      	bics	r2, r1
 8016ff0:	609a      	str	r2, [r3, #8]
 8016ff2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8016ff4:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8016ff6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8016ff8:	f383 8810 	msr	PRIMASK, r3
}
 8016ffc:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8016ffe:	f3ef 8310 	mrs	r3, PRIMASK
 8017002:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 8017004:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8017006:	673b      	str	r3, [r7, #112]	@ 0x70
 8017008:	2301      	movs	r3, #1
 801700a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801700c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801700e:	f383 8810 	msr	PRIMASK, r3
}
 8017012:	46c0      	nop			@ (mov r8, r8)
 8017014:	687b      	ldr	r3, [r7, #4]
 8017016:	681b      	ldr	r3, [r3, #0]
 8017018:	689a      	ldr	r2, [r3, #8]
 801701a:	687b      	ldr	r3, [r7, #4]
 801701c:	681b      	ldr	r3, [r3, #0]
 801701e:	2140      	movs	r1, #64	@ 0x40
 8017020:	438a      	bics	r2, r1
 8017022:	609a      	str	r2, [r3, #8]
 8017024:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8017026:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017028:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801702a:	f383 8810 	msr	PRIMASK, r3
}
 801702e:	46c0      	nop			@ (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8017030:	687b      	ldr	r3, [r7, #4]
 8017032:	2280      	movs	r2, #128	@ 0x80
 8017034:	2120      	movs	r1, #32
 8017036:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8017038:	687b      	ldr	r3, [r7, #4]
 801703a:	2200      	movs	r2, #0
 801703c:	661a      	str	r2, [r3, #96]	@ 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801703e:	f3ef 8310 	mrs	r3, PRIMASK
 8017042:	657b      	str	r3, [r7, #84]	@ 0x54
  return(result);
 8017044:	6d7b      	ldr	r3, [r7, #84]	@ 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8017046:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8017048:	2301      	movs	r3, #1
 801704a:	65bb      	str	r3, [r7, #88]	@ 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801704c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801704e:	f383 8810 	msr	PRIMASK, r3
}
 8017052:	46c0      	nop			@ (mov r8, r8)
 8017054:	687b      	ldr	r3, [r7, #4]
 8017056:	681b      	ldr	r3, [r3, #0]
 8017058:	681a      	ldr	r2, [r3, #0]
 801705a:	687b      	ldr	r3, [r7, #4]
 801705c:	681b      	ldr	r3, [r3, #0]
 801705e:	2110      	movs	r1, #16
 8017060:	438a      	bics	r2, r1
 8017062:	601a      	str	r2, [r3, #0]
 8017064:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8017066:	65fb      	str	r3, [r7, #92]	@ 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017068:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801706a:	f383 8810 	msr	PRIMASK, r3
}
 801706e:	46c0      	nop			@ (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8017070:	687b      	ldr	r3, [r7, #4]
 8017072:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8017074:	0018      	movs	r0, r3
 8017076:	f7f7 ffaf 	bl	800efd8 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 801707a:	687b      	ldr	r3, [r7, #4]
 801707c:	2202      	movs	r2, #2
 801707e:	665a      	str	r2, [r3, #100]	@ 0x64

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8017080:	687b      	ldr	r3, [r7, #4]
 8017082:	22ac      	movs	r2, #172	@ 0xac
 8017084:	589b      	ldr	r3, [r3, r2]
 8017086:	687a      	ldr	r2, [r7, #4]
 8017088:	2158      	movs	r1, #88	@ 0x58
 801708a:	5a51      	ldrh	r1, [r2, r1]
 801708c:	687a      	ldr	r2, [r7, #4]
 801708e:	205a      	movs	r0, #90	@ 0x5a
 8017090:	5a12      	ldrh	r2, [r2, r0]
 8017092:	b292      	uxth	r2, r2
 8017094:	1a8a      	subs	r2, r1, r2
 8017096:	b291      	uxth	r1, r2
 8017098:	687a      	ldr	r2, [r7, #4]
 801709a:	0010      	movs	r0, r2
 801709c:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 801709e:	e0c5      	b.n	801722c <HAL_UART_IRQHandler+0x5c0>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80170a0:	687b      	ldr	r3, [r7, #4]
 80170a2:	2258      	movs	r2, #88	@ 0x58
 80170a4:	5a99      	ldrh	r1, [r3, r2]
 80170a6:	687b      	ldr	r3, [r7, #4]
 80170a8:	225a      	movs	r2, #90	@ 0x5a
 80170aa:	5a9b      	ldrh	r3, [r3, r2]
 80170ac:	b29a      	uxth	r2, r3
 80170ae:	208e      	movs	r0, #142	@ 0x8e
 80170b0:	183b      	adds	r3, r7, r0
 80170b2:	1a8a      	subs	r2, r1, r2
 80170b4:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 80170b6:	687b      	ldr	r3, [r7, #4]
 80170b8:	225a      	movs	r2, #90	@ 0x5a
 80170ba:	5a9b      	ldrh	r3, [r3, r2]
 80170bc:	b29b      	uxth	r3, r3
 80170be:	2b00      	cmp	r3, #0
 80170c0:	d100      	bne.n	80170c4 <HAL_UART_IRQHandler+0x458>
 80170c2:	e0b5      	b.n	8017230 <HAL_UART_IRQHandler+0x5c4>
          && (nb_rx_data > 0U))
 80170c4:	183b      	adds	r3, r7, r0
 80170c6:	881b      	ldrh	r3, [r3, #0]
 80170c8:	2b00      	cmp	r3, #0
 80170ca:	d100      	bne.n	80170ce <HAL_UART_IRQHandler+0x462>
 80170cc:	e0b0      	b.n	8017230 <HAL_UART_IRQHandler+0x5c4>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80170ce:	f3ef 8310 	mrs	r3, PRIMASK
 80170d2:	60fb      	str	r3, [r7, #12]
  return(result);
 80170d4:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80170d6:	2488      	movs	r4, #136	@ 0x88
 80170d8:	193a      	adds	r2, r7, r4
 80170da:	6013      	str	r3, [r2, #0]
 80170dc:	2301      	movs	r3, #1
 80170de:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80170e0:	693b      	ldr	r3, [r7, #16]
 80170e2:	f383 8810 	msr	PRIMASK, r3
}
 80170e6:	46c0      	nop			@ (mov r8, r8)
 80170e8:	687b      	ldr	r3, [r7, #4]
 80170ea:	681b      	ldr	r3, [r3, #0]
 80170ec:	681a      	ldr	r2, [r3, #0]
 80170ee:	687b      	ldr	r3, [r7, #4]
 80170f0:	681b      	ldr	r3, [r3, #0]
 80170f2:	4953      	ldr	r1, [pc, #332]	@ (8017240 <HAL_UART_IRQHandler+0x5d4>)
 80170f4:	400a      	ands	r2, r1
 80170f6:	601a      	str	r2, [r3, #0]
 80170f8:	193b      	adds	r3, r7, r4
 80170fa:	681b      	ldr	r3, [r3, #0]
 80170fc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80170fe:	697b      	ldr	r3, [r7, #20]
 8017100:	f383 8810 	msr	PRIMASK, r3
}
 8017104:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8017106:	f3ef 8310 	mrs	r3, PRIMASK
 801710a:	61bb      	str	r3, [r7, #24]
  return(result);
 801710c:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801710e:	2484      	movs	r4, #132	@ 0x84
 8017110:	193a      	adds	r2, r7, r4
 8017112:	6013      	str	r3, [r2, #0]
 8017114:	2301      	movs	r3, #1
 8017116:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017118:	69fb      	ldr	r3, [r7, #28]
 801711a:	f383 8810 	msr	PRIMASK, r3
}
 801711e:	46c0      	nop			@ (mov r8, r8)
 8017120:	687b      	ldr	r3, [r7, #4]
 8017122:	681b      	ldr	r3, [r3, #0]
 8017124:	689a      	ldr	r2, [r3, #8]
 8017126:	687b      	ldr	r3, [r7, #4]
 8017128:	681b      	ldr	r3, [r3, #0]
 801712a:	2101      	movs	r1, #1
 801712c:	438a      	bics	r2, r1
 801712e:	609a      	str	r2, [r3, #8]
 8017130:	193b      	adds	r3, r7, r4
 8017132:	681b      	ldr	r3, [r3, #0]
 8017134:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017136:	6a3b      	ldr	r3, [r7, #32]
 8017138:	f383 8810 	msr	PRIMASK, r3
}
 801713c:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 801713e:	687b      	ldr	r3, [r7, #4]
 8017140:	2280      	movs	r2, #128	@ 0x80
 8017142:	2120      	movs	r1, #32
 8017144:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8017146:	687b      	ldr	r3, [r7, #4]
 8017148:	2200      	movs	r2, #0
 801714a:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 801714c:	687b      	ldr	r3, [r7, #4]
 801714e:	2200      	movs	r2, #0
 8017150:	669a      	str	r2, [r3, #104]	@ 0x68
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8017152:	f3ef 8310 	mrs	r3, PRIMASK
 8017156:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8017158:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801715a:	2480      	movs	r4, #128	@ 0x80
 801715c:	193a      	adds	r2, r7, r4
 801715e:	6013      	str	r3, [r2, #0]
 8017160:	2301      	movs	r3, #1
 8017162:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017164:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017166:	f383 8810 	msr	PRIMASK, r3
}
 801716a:	46c0      	nop			@ (mov r8, r8)
 801716c:	687b      	ldr	r3, [r7, #4]
 801716e:	681b      	ldr	r3, [r3, #0]
 8017170:	681a      	ldr	r2, [r3, #0]
 8017172:	687b      	ldr	r3, [r7, #4]
 8017174:	681b      	ldr	r3, [r3, #0]
 8017176:	2110      	movs	r1, #16
 8017178:	438a      	bics	r2, r1
 801717a:	601a      	str	r2, [r3, #0]
 801717c:	193b      	adds	r3, r7, r4
 801717e:	681b      	ldr	r3, [r3, #0]
 8017180:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017182:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017184:	f383 8810 	msr	PRIMASK, r3
}
 8017188:	46c0      	nop			@ (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 801718a:	687b      	ldr	r3, [r7, #4]
 801718c:	2202      	movs	r2, #2
 801718e:	665a      	str	r2, [r3, #100]	@ 0x64

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 8017190:	687b      	ldr	r3, [r7, #4]
 8017192:	22ac      	movs	r2, #172	@ 0xac
 8017194:	589b      	ldr	r3, [r3, r2]
 8017196:	183a      	adds	r2, r7, r0
 8017198:	8811      	ldrh	r1, [r2, #0]
 801719a:	687a      	ldr	r2, [r7, #4]
 801719c:	0010      	movs	r0, r2
 801719e:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80171a0:	e046      	b.n	8017230 <HAL_UART_IRQHandler+0x5c4>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80171a2:	23a4      	movs	r3, #164	@ 0xa4
 80171a4:	18fb      	adds	r3, r7, r3
 80171a6:	681a      	ldr	r2, [r3, #0]
 80171a8:	2380      	movs	r3, #128	@ 0x80
 80171aa:	035b      	lsls	r3, r3, #13
 80171ac:	4013      	ands	r3, r2
 80171ae:	d012      	beq.n	80171d6 <HAL_UART_IRQHandler+0x56a>
 80171b0:	239c      	movs	r3, #156	@ 0x9c
 80171b2:	18fb      	adds	r3, r7, r3
 80171b4:	681a      	ldr	r2, [r3, #0]
 80171b6:	2380      	movs	r3, #128	@ 0x80
 80171b8:	03db      	lsls	r3, r3, #15
 80171ba:	4013      	ands	r3, r2
 80171bc:	d00b      	beq.n	80171d6 <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80171be:	687b      	ldr	r3, [r7, #4]
 80171c0:	681b      	ldr	r3, [r3, #0]
 80171c2:	2280      	movs	r2, #128	@ 0x80
 80171c4:	0352      	lsls	r2, r2, #13
 80171c6:	621a      	str	r2, [r3, #32]
    /* UART Rx state is not reset as a reception process might be ongoing.
       If UART handle state fields need to be reset to READY, this could be done in Wakeup callback */

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
 80171c8:	687b      	ldr	r3, [r7, #4]
 80171ca:	22a8      	movs	r2, #168	@ 0xa8
 80171cc:	589b      	ldr	r3, [r3, r2]
 80171ce:	687a      	ldr	r2, [r7, #4]
 80171d0:	0010      	movs	r0, r2
 80171d2:	4798      	blx	r3
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80171d4:	e02f      	b.n	8017236 <HAL_UART_IRQHandler+0x5ca>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80171d6:	23a4      	movs	r3, #164	@ 0xa4
 80171d8:	18fb      	adds	r3, r7, r3
 80171da:	681b      	ldr	r3, [r3, #0]
 80171dc:	2280      	movs	r2, #128	@ 0x80
 80171de:	4013      	ands	r3, r2
 80171e0:	d00f      	beq.n	8017202 <HAL_UART_IRQHandler+0x596>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80171e2:	23a0      	movs	r3, #160	@ 0xa0
 80171e4:	18fb      	adds	r3, r7, r3
 80171e6:	681b      	ldr	r3, [r3, #0]
 80171e8:	2280      	movs	r2, #128	@ 0x80
 80171ea:	4013      	ands	r3, r2
 80171ec:	d009      	beq.n	8017202 <HAL_UART_IRQHandler+0x596>
  {
    if (huart->TxISR != NULL)
 80171ee:	687b      	ldr	r3, [r7, #4]
 80171f0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80171f2:	2b00      	cmp	r3, #0
 80171f4:	d01e      	beq.n	8017234 <HAL_UART_IRQHandler+0x5c8>
    {
      huart->TxISR(huart);
 80171f6:	687b      	ldr	r3, [r7, #4]
 80171f8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80171fa:	687a      	ldr	r2, [r7, #4]
 80171fc:	0010      	movs	r0, r2
 80171fe:	4798      	blx	r3
    }
    return;
 8017200:	e018      	b.n	8017234 <HAL_UART_IRQHandler+0x5c8>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8017202:	23a4      	movs	r3, #164	@ 0xa4
 8017204:	18fb      	adds	r3, r7, r3
 8017206:	681b      	ldr	r3, [r3, #0]
 8017208:	2240      	movs	r2, #64	@ 0x40
 801720a:	4013      	ands	r3, r2
 801720c:	d013      	beq.n	8017236 <HAL_UART_IRQHandler+0x5ca>
 801720e:	23a0      	movs	r3, #160	@ 0xa0
 8017210:	18fb      	adds	r3, r7, r3
 8017212:	681b      	ldr	r3, [r3, #0]
 8017214:	2240      	movs	r2, #64	@ 0x40
 8017216:	4013      	ands	r3, r2
 8017218:	d00d      	beq.n	8017236 <HAL_UART_IRQHandler+0x5ca>
  {
    UART_EndTransmit_IT(huart);
 801721a:	687b      	ldr	r3, [r7, #4]
 801721c:	0018      	movs	r0, r3
 801721e:	f001 f862 	bl	80182e6 <UART_EndTransmit_IT>
    return;
 8017222:	e008      	b.n	8017236 <HAL_UART_IRQHandler+0x5ca>
      return;
 8017224:	46c0      	nop			@ (mov r8, r8)
 8017226:	e006      	b.n	8017236 <HAL_UART_IRQHandler+0x5ca>
    return;
 8017228:	46c0      	nop			@ (mov r8, r8)
 801722a:	e004      	b.n	8017236 <HAL_UART_IRQHandler+0x5ca>
      return;
 801722c:	46c0      	nop			@ (mov r8, r8)
 801722e:	e002      	b.n	8017236 <HAL_UART_IRQHandler+0x5ca>
      return;
 8017230:	46c0      	nop			@ (mov r8, r8)
 8017232:	e000      	b.n	8017236 <HAL_UART_IRQHandler+0x5ca>
    return;
 8017234:	46c0      	nop			@ (mov r8, r8)
  }

}
 8017236:	46bd      	mov	sp, r7
 8017238:	b02b      	add	sp, #172	@ 0xac
 801723a:	bd90      	pop	{r4, r7, pc}
 801723c:	fffffeff 	.word	0xfffffeff
 8017240:	fffffedf 	.word	0xfffffedf

08017244 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8017244:	b580      	push	{r7, lr}
 8017246:	b082      	sub	sp, #8
 8017248:	af00      	add	r7, sp, #0
 801724a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 801724c:	46c0      	nop			@ (mov r8, r8)
 801724e:	46bd      	mov	sp, r7
 8017250:	b002      	add	sp, #8
 8017252:	bd80      	pop	{r7, pc}

08017254 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8017254:	b580      	push	{r7, lr}
 8017256:	b082      	sub	sp, #8
 8017258:	af00      	add	r7, sp, #0
 801725a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 801725c:	46c0      	nop			@ (mov r8, r8)
 801725e:	46bd      	mov	sp, r7
 8017260:	b002      	add	sp, #8
 8017262:	bd80      	pop	{r7, pc}

08017264 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8017264:	b580      	push	{r7, lr}
 8017266:	b082      	sub	sp, #8
 8017268:	af00      	add	r7, sp, #0
 801726a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 801726c:	46c0      	nop			@ (mov r8, r8)
 801726e:	46bd      	mov	sp, r7
 8017270:	b002      	add	sp, #8
 8017272:	bd80      	pop	{r7, pc}

08017274 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 8017274:	b580      	push	{r7, lr}
 8017276:	b082      	sub	sp, #8
 8017278:	af00      	add	r7, sp, #0
 801727a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 801727c:	46c0      	nop			@ (mov r8, r8)
 801727e:	46bd      	mov	sp, r7
 8017280:	b002      	add	sp, #8
 8017282:	bd80      	pop	{r7, pc}

08017284 <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 8017284:	b580      	push	{r7, lr}
 8017286:	b082      	sub	sp, #8
 8017288:	af00      	add	r7, sp, #0
 801728a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 801728c:	46c0      	nop			@ (mov r8, r8)
 801728e:	46bd      	mov	sp, r7
 8017290:	b002      	add	sp, #8
 8017292:	bd80      	pop	{r7, pc}

08017294 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 8017294:	b580      	push	{r7, lr}
 8017296:	b082      	sub	sp, #8
 8017298:	af00      	add	r7, sp, #0
 801729a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 801729c:	46c0      	nop			@ (mov r8, r8)
 801729e:	46bd      	mov	sp, r7
 80172a0:	b002      	add	sp, #8
 80172a2:	bd80      	pop	{r7, pc}

080172a4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80172a4:	b580      	push	{r7, lr}
 80172a6:	b082      	sub	sp, #8
 80172a8:	af00      	add	r7, sp, #0
 80172aa:	6078      	str	r0, [r7, #4]
 80172ac:	000a      	movs	r2, r1
 80172ae:	1cbb      	adds	r3, r7, #2
 80172b0:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80172b2:	46c0      	nop			@ (mov r8, r8)
 80172b4:	46bd      	mov	sp, r7
 80172b6:	b002      	add	sp, #8
 80172b8:	bd80      	pop	{r7, pc}
	...

080172bc <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 80172bc:	b580      	push	{r7, lr}
 80172be:	b082      	sub	sp, #8
 80172c0:	af00      	add	r7, sp, #0
 80172c2:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 80172c4:	687b      	ldr	r3, [r7, #4]
 80172c6:	2188      	movs	r1, #136	@ 0x88
 80172c8:	4a14      	ldr	r2, [pc, #80]	@ (801731c <UART_InitCallbacksToDefault+0x60>)
 80172ca:	505a      	str	r2, [r3, r1]
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 80172cc:	687b      	ldr	r3, [r7, #4]
 80172ce:	218c      	movs	r1, #140	@ 0x8c
 80172d0:	4a13      	ldr	r2, [pc, #76]	@ (8017320 <UART_InitCallbacksToDefault+0x64>)
 80172d2:	505a      	str	r2, [r3, r1]
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 80172d4:	687b      	ldr	r3, [r7, #4]
 80172d6:	2190      	movs	r1, #144	@ 0x90
 80172d8:	4a12      	ldr	r2, [pc, #72]	@ (8017324 <UART_InitCallbacksToDefault+0x68>)
 80172da:	505a      	str	r2, [r3, r1]
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 80172dc:	687b      	ldr	r3, [r7, #4]
 80172de:	2194      	movs	r1, #148	@ 0x94
 80172e0:	4a11      	ldr	r2, [pc, #68]	@ (8017328 <UART_InitCallbacksToDefault+0x6c>)
 80172e2:	505a      	str	r2, [r3, r1]
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 80172e4:	687b      	ldr	r3, [r7, #4]
 80172e6:	2198      	movs	r1, #152	@ 0x98
 80172e8:	4a10      	ldr	r2, [pc, #64]	@ (801732c <UART_InitCallbacksToDefault+0x70>)
 80172ea:	505a      	str	r2, [r3, r1]
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 80172ec:	687b      	ldr	r3, [r7, #4]
 80172ee:	219c      	movs	r1, #156	@ 0x9c
 80172f0:	4a0f      	ldr	r2, [pc, #60]	@ (8017330 <UART_InitCallbacksToDefault+0x74>)
 80172f2:	505a      	str	r2, [r3, r1]
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 80172f4:	687b      	ldr	r3, [r7, #4]
 80172f6:	21a0      	movs	r1, #160	@ 0xa0
 80172f8:	4a0e      	ldr	r2, [pc, #56]	@ (8017334 <UART_InitCallbacksToDefault+0x78>)
 80172fa:	505a      	str	r2, [r3, r1]
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 80172fc:	687b      	ldr	r3, [r7, #4]
 80172fe:	21a4      	movs	r1, #164	@ 0xa4
 8017300:	4a0d      	ldr	r2, [pc, #52]	@ (8017338 <UART_InitCallbacksToDefault+0x7c>)
 8017302:	505a      	str	r2, [r3, r1]
  huart->WakeupCallback            = HAL_UARTEx_WakeupCallback;          /* Legacy weak WakeupCallback            */
 8017304:	687b      	ldr	r3, [r7, #4]
 8017306:	21a8      	movs	r1, #168	@ 0xa8
 8017308:	4a0c      	ldr	r2, [pc, #48]	@ (801733c <UART_InitCallbacksToDefault+0x80>)
 801730a:	505a      	str	r2, [r3, r1]
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 801730c:	687b      	ldr	r3, [r7, #4]
 801730e:	21ac      	movs	r1, #172	@ 0xac
 8017310:	4a0b      	ldr	r2, [pc, #44]	@ (8017340 <UART_InitCallbacksToDefault+0x84>)
 8017312:	505a      	str	r2, [r3, r1]

}
 8017314:	46c0      	nop			@ (mov r8, r8)
 8017316:	46bd      	mov	sp, r7
 8017318:	b002      	add	sp, #8
 801731a:	bd80      	pop	{r7, pc}
 801731c:	08017255 	.word	0x08017255
 8017320:	08017245 	.word	0x08017245
 8017324:	08017265 	.word	0x08017265
 8017328:	08007f01 	.word	0x08007f01
 801732c:	08003c69 	.word	0x08003c69
 8017330:	08017275 	.word	0x08017275
 8017334:	08017285 	.word	0x08017285
 8017338:	08017295 	.word	0x08017295
 801733c:	080186d9 	.word	0x080186d9
 8017340:	080172a5 	.word	0x080172a5

08017344 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8017344:	b5b0      	push	{r4, r5, r7, lr}
 8017346:	b08e      	sub	sp, #56	@ 0x38
 8017348:	af00      	add	r7, sp, #0
 801734a:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 801734c:	231a      	movs	r3, #26
 801734e:	2218      	movs	r2, #24
 8017350:	189b      	adds	r3, r3, r2
 8017352:	19db      	adds	r3, r3, r7
 8017354:	2200      	movs	r2, #0
 8017356:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8017358:	69fb      	ldr	r3, [r7, #28]
 801735a:	689a      	ldr	r2, [r3, #8]
 801735c:	69fb      	ldr	r3, [r7, #28]
 801735e:	691b      	ldr	r3, [r3, #16]
 8017360:	431a      	orrs	r2, r3
 8017362:	69fb      	ldr	r3, [r7, #28]
 8017364:	695b      	ldr	r3, [r3, #20]
 8017366:	431a      	orrs	r2, r3
 8017368:	69fb      	ldr	r3, [r7, #28]
 801736a:	69db      	ldr	r3, [r3, #28]
 801736c:	4313      	orrs	r3, r2
 801736e:	637b      	str	r3, [r7, #52]	@ 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8017370:	69fb      	ldr	r3, [r7, #28]
 8017372:	681b      	ldr	r3, [r3, #0]
 8017374:	681b      	ldr	r3, [r3, #0]
 8017376:	4ac3      	ldr	r2, [pc, #780]	@ (8017684 <UART_SetConfig+0x340>)
 8017378:	4013      	ands	r3, r2
 801737a:	0019      	movs	r1, r3
 801737c:	69fb      	ldr	r3, [r7, #28]
 801737e:	681b      	ldr	r3, [r3, #0]
 8017380:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8017382:	430a      	orrs	r2, r1
 8017384:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8017386:	69fb      	ldr	r3, [r7, #28]
 8017388:	681b      	ldr	r3, [r3, #0]
 801738a:	685b      	ldr	r3, [r3, #4]
 801738c:	4abe      	ldr	r2, [pc, #760]	@ (8017688 <UART_SetConfig+0x344>)
 801738e:	4013      	ands	r3, r2
 8017390:	0019      	movs	r1, r3
 8017392:	69fb      	ldr	r3, [r7, #28]
 8017394:	68da      	ldr	r2, [r3, #12]
 8017396:	69fb      	ldr	r3, [r7, #28]
 8017398:	681b      	ldr	r3, [r3, #0]
 801739a:	430a      	orrs	r2, r1
 801739c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 801739e:	69fb      	ldr	r3, [r7, #28]
 80173a0:	699b      	ldr	r3, [r3, #24]
 80173a2:	637b      	str	r3, [r7, #52]	@ 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80173a4:	69fb      	ldr	r3, [r7, #28]
 80173a6:	681b      	ldr	r3, [r3, #0]
 80173a8:	4ab8      	ldr	r2, [pc, #736]	@ (801768c <UART_SetConfig+0x348>)
 80173aa:	4293      	cmp	r3, r2
 80173ac:	d004      	beq.n	80173b8 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80173ae:	69fb      	ldr	r3, [r7, #28]
 80173b0:	6a1b      	ldr	r3, [r3, #32]
 80173b2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80173b4:	4313      	orrs	r3, r2
 80173b6:	637b      	str	r3, [r7, #52]	@ 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80173b8:	69fb      	ldr	r3, [r7, #28]
 80173ba:	681b      	ldr	r3, [r3, #0]
 80173bc:	689b      	ldr	r3, [r3, #8]
 80173be:	4ab4      	ldr	r2, [pc, #720]	@ (8017690 <UART_SetConfig+0x34c>)
 80173c0:	4013      	ands	r3, r2
 80173c2:	0019      	movs	r1, r3
 80173c4:	69fb      	ldr	r3, [r7, #28]
 80173c6:	681b      	ldr	r3, [r3, #0]
 80173c8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80173ca:	430a      	orrs	r2, r1
 80173cc:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80173ce:	69fb      	ldr	r3, [r7, #28]
 80173d0:	681b      	ldr	r3, [r3, #0]
 80173d2:	4ab0      	ldr	r2, [pc, #704]	@ (8017694 <UART_SetConfig+0x350>)
 80173d4:	4293      	cmp	r3, r2
 80173d6:	d131      	bne.n	801743c <UART_SetConfig+0xf8>
 80173d8:	4baf      	ldr	r3, [pc, #700]	@ (8017698 <UART_SetConfig+0x354>)
 80173da:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80173dc:	2203      	movs	r2, #3
 80173de:	4013      	ands	r3, r2
 80173e0:	2b03      	cmp	r3, #3
 80173e2:	d01d      	beq.n	8017420 <UART_SetConfig+0xdc>
 80173e4:	d823      	bhi.n	801742e <UART_SetConfig+0xea>
 80173e6:	2b02      	cmp	r3, #2
 80173e8:	d00c      	beq.n	8017404 <UART_SetConfig+0xc0>
 80173ea:	d820      	bhi.n	801742e <UART_SetConfig+0xea>
 80173ec:	2b00      	cmp	r3, #0
 80173ee:	d002      	beq.n	80173f6 <UART_SetConfig+0xb2>
 80173f0:	2b01      	cmp	r3, #1
 80173f2:	d00e      	beq.n	8017412 <UART_SetConfig+0xce>
 80173f4:	e01b      	b.n	801742e <UART_SetConfig+0xea>
 80173f6:	231b      	movs	r3, #27
 80173f8:	2218      	movs	r2, #24
 80173fa:	189b      	adds	r3, r3, r2
 80173fc:	19db      	adds	r3, r3, r7
 80173fe:	2201      	movs	r2, #1
 8017400:	701a      	strb	r2, [r3, #0]
 8017402:	e0b4      	b.n	801756e <UART_SetConfig+0x22a>
 8017404:	231b      	movs	r3, #27
 8017406:	2218      	movs	r2, #24
 8017408:	189b      	adds	r3, r3, r2
 801740a:	19db      	adds	r3, r3, r7
 801740c:	2202      	movs	r2, #2
 801740e:	701a      	strb	r2, [r3, #0]
 8017410:	e0ad      	b.n	801756e <UART_SetConfig+0x22a>
 8017412:	231b      	movs	r3, #27
 8017414:	2218      	movs	r2, #24
 8017416:	189b      	adds	r3, r3, r2
 8017418:	19db      	adds	r3, r3, r7
 801741a:	2204      	movs	r2, #4
 801741c:	701a      	strb	r2, [r3, #0]
 801741e:	e0a6      	b.n	801756e <UART_SetConfig+0x22a>
 8017420:	231b      	movs	r3, #27
 8017422:	2218      	movs	r2, #24
 8017424:	189b      	adds	r3, r3, r2
 8017426:	19db      	adds	r3, r3, r7
 8017428:	2208      	movs	r2, #8
 801742a:	701a      	strb	r2, [r3, #0]
 801742c:	e09f      	b.n	801756e <UART_SetConfig+0x22a>
 801742e:	231b      	movs	r3, #27
 8017430:	2218      	movs	r2, #24
 8017432:	189b      	adds	r3, r3, r2
 8017434:	19db      	adds	r3, r3, r7
 8017436:	2210      	movs	r2, #16
 8017438:	701a      	strb	r2, [r3, #0]
 801743a:	e098      	b.n	801756e <UART_SetConfig+0x22a>
 801743c:	69fb      	ldr	r3, [r7, #28]
 801743e:	681b      	ldr	r3, [r3, #0]
 8017440:	4a96      	ldr	r2, [pc, #600]	@ (801769c <UART_SetConfig+0x358>)
 8017442:	4293      	cmp	r3, r2
 8017444:	d131      	bne.n	80174aa <UART_SetConfig+0x166>
 8017446:	4b94      	ldr	r3, [pc, #592]	@ (8017698 <UART_SetConfig+0x354>)
 8017448:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801744a:	220c      	movs	r2, #12
 801744c:	4013      	ands	r3, r2
 801744e:	2b0c      	cmp	r3, #12
 8017450:	d01d      	beq.n	801748e <UART_SetConfig+0x14a>
 8017452:	d823      	bhi.n	801749c <UART_SetConfig+0x158>
 8017454:	2b08      	cmp	r3, #8
 8017456:	d00c      	beq.n	8017472 <UART_SetConfig+0x12e>
 8017458:	d820      	bhi.n	801749c <UART_SetConfig+0x158>
 801745a:	2b00      	cmp	r3, #0
 801745c:	d002      	beq.n	8017464 <UART_SetConfig+0x120>
 801745e:	2b04      	cmp	r3, #4
 8017460:	d00e      	beq.n	8017480 <UART_SetConfig+0x13c>
 8017462:	e01b      	b.n	801749c <UART_SetConfig+0x158>
 8017464:	231b      	movs	r3, #27
 8017466:	2218      	movs	r2, #24
 8017468:	189b      	adds	r3, r3, r2
 801746a:	19db      	adds	r3, r3, r7
 801746c:	2200      	movs	r2, #0
 801746e:	701a      	strb	r2, [r3, #0]
 8017470:	e07d      	b.n	801756e <UART_SetConfig+0x22a>
 8017472:	231b      	movs	r3, #27
 8017474:	2218      	movs	r2, #24
 8017476:	189b      	adds	r3, r3, r2
 8017478:	19db      	adds	r3, r3, r7
 801747a:	2202      	movs	r2, #2
 801747c:	701a      	strb	r2, [r3, #0]
 801747e:	e076      	b.n	801756e <UART_SetConfig+0x22a>
 8017480:	231b      	movs	r3, #27
 8017482:	2218      	movs	r2, #24
 8017484:	189b      	adds	r3, r3, r2
 8017486:	19db      	adds	r3, r3, r7
 8017488:	2204      	movs	r2, #4
 801748a:	701a      	strb	r2, [r3, #0]
 801748c:	e06f      	b.n	801756e <UART_SetConfig+0x22a>
 801748e:	231b      	movs	r3, #27
 8017490:	2218      	movs	r2, #24
 8017492:	189b      	adds	r3, r3, r2
 8017494:	19db      	adds	r3, r3, r7
 8017496:	2208      	movs	r2, #8
 8017498:	701a      	strb	r2, [r3, #0]
 801749a:	e068      	b.n	801756e <UART_SetConfig+0x22a>
 801749c:	231b      	movs	r3, #27
 801749e:	2218      	movs	r2, #24
 80174a0:	189b      	adds	r3, r3, r2
 80174a2:	19db      	adds	r3, r3, r7
 80174a4:	2210      	movs	r2, #16
 80174a6:	701a      	strb	r2, [r3, #0]
 80174a8:	e061      	b.n	801756e <UART_SetConfig+0x22a>
 80174aa:	69fb      	ldr	r3, [r7, #28]
 80174ac:	681b      	ldr	r3, [r3, #0]
 80174ae:	4a7c      	ldr	r2, [pc, #496]	@ (80176a0 <UART_SetConfig+0x35c>)
 80174b0:	4293      	cmp	r3, r2
 80174b2:	d106      	bne.n	80174c2 <UART_SetConfig+0x17e>
 80174b4:	231b      	movs	r3, #27
 80174b6:	2218      	movs	r2, #24
 80174b8:	189b      	adds	r3, r3, r2
 80174ba:	19db      	adds	r3, r3, r7
 80174bc:	2200      	movs	r2, #0
 80174be:	701a      	strb	r2, [r3, #0]
 80174c0:	e055      	b.n	801756e <UART_SetConfig+0x22a>
 80174c2:	69fb      	ldr	r3, [r7, #28]
 80174c4:	681b      	ldr	r3, [r3, #0]
 80174c6:	4a77      	ldr	r2, [pc, #476]	@ (80176a4 <UART_SetConfig+0x360>)
 80174c8:	4293      	cmp	r3, r2
 80174ca:	d106      	bne.n	80174da <UART_SetConfig+0x196>
 80174cc:	231b      	movs	r3, #27
 80174ce:	2218      	movs	r2, #24
 80174d0:	189b      	adds	r3, r3, r2
 80174d2:	19db      	adds	r3, r3, r7
 80174d4:	2200      	movs	r2, #0
 80174d6:	701a      	strb	r2, [r3, #0]
 80174d8:	e049      	b.n	801756e <UART_SetConfig+0x22a>
 80174da:	69fb      	ldr	r3, [r7, #28]
 80174dc:	681b      	ldr	r3, [r3, #0]
 80174de:	4a6b      	ldr	r2, [pc, #428]	@ (801768c <UART_SetConfig+0x348>)
 80174e0:	4293      	cmp	r3, r2
 80174e2:	d13e      	bne.n	8017562 <UART_SetConfig+0x21e>
 80174e4:	4b6c      	ldr	r3, [pc, #432]	@ (8017698 <UART_SetConfig+0x354>)
 80174e6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80174e8:	23c0      	movs	r3, #192	@ 0xc0
 80174ea:	011b      	lsls	r3, r3, #4
 80174ec:	4013      	ands	r3, r2
 80174ee:	22c0      	movs	r2, #192	@ 0xc0
 80174f0:	0112      	lsls	r2, r2, #4
 80174f2:	4293      	cmp	r3, r2
 80174f4:	d027      	beq.n	8017546 <UART_SetConfig+0x202>
 80174f6:	22c0      	movs	r2, #192	@ 0xc0
 80174f8:	0112      	lsls	r2, r2, #4
 80174fa:	4293      	cmp	r3, r2
 80174fc:	d82a      	bhi.n	8017554 <UART_SetConfig+0x210>
 80174fe:	2280      	movs	r2, #128	@ 0x80
 8017500:	0112      	lsls	r2, r2, #4
 8017502:	4293      	cmp	r3, r2
 8017504:	d011      	beq.n	801752a <UART_SetConfig+0x1e6>
 8017506:	2280      	movs	r2, #128	@ 0x80
 8017508:	0112      	lsls	r2, r2, #4
 801750a:	4293      	cmp	r3, r2
 801750c:	d822      	bhi.n	8017554 <UART_SetConfig+0x210>
 801750e:	2b00      	cmp	r3, #0
 8017510:	d004      	beq.n	801751c <UART_SetConfig+0x1d8>
 8017512:	2280      	movs	r2, #128	@ 0x80
 8017514:	00d2      	lsls	r2, r2, #3
 8017516:	4293      	cmp	r3, r2
 8017518:	d00e      	beq.n	8017538 <UART_SetConfig+0x1f4>
 801751a:	e01b      	b.n	8017554 <UART_SetConfig+0x210>
 801751c:	231b      	movs	r3, #27
 801751e:	2218      	movs	r2, #24
 8017520:	189b      	adds	r3, r3, r2
 8017522:	19db      	adds	r3, r3, r7
 8017524:	2200      	movs	r2, #0
 8017526:	701a      	strb	r2, [r3, #0]
 8017528:	e021      	b.n	801756e <UART_SetConfig+0x22a>
 801752a:	231b      	movs	r3, #27
 801752c:	2218      	movs	r2, #24
 801752e:	189b      	adds	r3, r3, r2
 8017530:	19db      	adds	r3, r3, r7
 8017532:	2202      	movs	r2, #2
 8017534:	701a      	strb	r2, [r3, #0]
 8017536:	e01a      	b.n	801756e <UART_SetConfig+0x22a>
 8017538:	231b      	movs	r3, #27
 801753a:	2218      	movs	r2, #24
 801753c:	189b      	adds	r3, r3, r2
 801753e:	19db      	adds	r3, r3, r7
 8017540:	2204      	movs	r2, #4
 8017542:	701a      	strb	r2, [r3, #0]
 8017544:	e013      	b.n	801756e <UART_SetConfig+0x22a>
 8017546:	231b      	movs	r3, #27
 8017548:	2218      	movs	r2, #24
 801754a:	189b      	adds	r3, r3, r2
 801754c:	19db      	adds	r3, r3, r7
 801754e:	2208      	movs	r2, #8
 8017550:	701a      	strb	r2, [r3, #0]
 8017552:	e00c      	b.n	801756e <UART_SetConfig+0x22a>
 8017554:	231b      	movs	r3, #27
 8017556:	2218      	movs	r2, #24
 8017558:	189b      	adds	r3, r3, r2
 801755a:	19db      	adds	r3, r3, r7
 801755c:	2210      	movs	r2, #16
 801755e:	701a      	strb	r2, [r3, #0]
 8017560:	e005      	b.n	801756e <UART_SetConfig+0x22a>
 8017562:	231b      	movs	r3, #27
 8017564:	2218      	movs	r2, #24
 8017566:	189b      	adds	r3, r3, r2
 8017568:	19db      	adds	r3, r3, r7
 801756a:	2210      	movs	r2, #16
 801756c:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 801756e:	69fb      	ldr	r3, [r7, #28]
 8017570:	681b      	ldr	r3, [r3, #0]
 8017572:	4a46      	ldr	r2, [pc, #280]	@ (801768c <UART_SetConfig+0x348>)
 8017574:	4293      	cmp	r3, r2
 8017576:	d000      	beq.n	801757a <UART_SetConfig+0x236>
 8017578:	e09a      	b.n	80176b0 <UART_SetConfig+0x36c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 801757a:	231b      	movs	r3, #27
 801757c:	2218      	movs	r2, #24
 801757e:	189b      	adds	r3, r3, r2
 8017580:	19db      	adds	r3, r3, r7
 8017582:	781b      	ldrb	r3, [r3, #0]
 8017584:	2b08      	cmp	r3, #8
 8017586:	d01d      	beq.n	80175c4 <UART_SetConfig+0x280>
 8017588:	dc20      	bgt.n	80175cc <UART_SetConfig+0x288>
 801758a:	2b04      	cmp	r3, #4
 801758c:	d015      	beq.n	80175ba <UART_SetConfig+0x276>
 801758e:	dc1d      	bgt.n	80175cc <UART_SetConfig+0x288>
 8017590:	2b00      	cmp	r3, #0
 8017592:	d002      	beq.n	801759a <UART_SetConfig+0x256>
 8017594:	2b02      	cmp	r3, #2
 8017596:	d005      	beq.n	80175a4 <UART_SetConfig+0x260>
 8017598:	e018      	b.n	80175cc <UART_SetConfig+0x288>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 801759a:	f7fd fe4b 	bl	8015234 <HAL_RCC_GetPCLK1Freq>
 801759e:	0003      	movs	r3, r0
 80175a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80175a2:	e01c      	b.n	80175de <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80175a4:	4b3c      	ldr	r3, [pc, #240]	@ (8017698 <UART_SetConfig+0x354>)
 80175a6:	681b      	ldr	r3, [r3, #0]
 80175a8:	2210      	movs	r2, #16
 80175aa:	4013      	ands	r3, r2
 80175ac:	d002      	beq.n	80175b4 <UART_SetConfig+0x270>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80175ae:	4b3e      	ldr	r3, [pc, #248]	@ (80176a8 <UART_SetConfig+0x364>)
 80175b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80175b2:	e014      	b.n	80175de <UART_SetConfig+0x29a>
          pclk = (uint32_t) HSI_VALUE;
 80175b4:	4b3d      	ldr	r3, [pc, #244]	@ (80176ac <UART_SetConfig+0x368>)
 80175b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80175b8:	e011      	b.n	80175de <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80175ba:	f7fd fd8b 	bl	80150d4 <HAL_RCC_GetSysClockFreq>
 80175be:	0003      	movs	r3, r0
 80175c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80175c2:	e00c      	b.n	80175de <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80175c4:	2380      	movs	r3, #128	@ 0x80
 80175c6:	021b      	lsls	r3, r3, #8
 80175c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80175ca:	e008      	b.n	80175de <UART_SetConfig+0x29a>
      default:
        pclk = 0U;
 80175cc:	2300      	movs	r3, #0
 80175ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 80175d0:	231a      	movs	r3, #26
 80175d2:	2218      	movs	r2, #24
 80175d4:	189b      	adds	r3, r3, r2
 80175d6:	19db      	adds	r3, r3, r7
 80175d8:	2201      	movs	r2, #1
 80175da:	701a      	strb	r2, [r3, #0]
        break;
 80175dc:	46c0      	nop			@ (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80175de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80175e0:	2b00      	cmp	r3, #0
 80175e2:	d100      	bne.n	80175e6 <UART_SetConfig+0x2a2>
 80175e4:	e133      	b.n	801784e <UART_SetConfig+0x50a>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80175e6:	69fb      	ldr	r3, [r7, #28]
 80175e8:	685a      	ldr	r2, [r3, #4]
 80175ea:	0013      	movs	r3, r2
 80175ec:	005b      	lsls	r3, r3, #1
 80175ee:	189b      	adds	r3, r3, r2
 80175f0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80175f2:	429a      	cmp	r2, r3
 80175f4:	d305      	bcc.n	8017602 <UART_SetConfig+0x2be>
          (pclk > (4096U * huart->Init.BaudRate)))
 80175f6:	69fb      	ldr	r3, [r7, #28]
 80175f8:	685b      	ldr	r3, [r3, #4]
 80175fa:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80175fc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80175fe:	429a      	cmp	r2, r3
 8017600:	d906      	bls.n	8017610 <UART_SetConfig+0x2cc>
      {
        ret = HAL_ERROR;
 8017602:	231a      	movs	r3, #26
 8017604:	2218      	movs	r2, #24
 8017606:	189b      	adds	r3, r3, r2
 8017608:	19db      	adds	r3, r3, r7
 801760a:	2201      	movs	r2, #1
 801760c:	701a      	strb	r2, [r3, #0]
 801760e:	e11e      	b.n	801784e <UART_SetConfig+0x50a>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8017610:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017612:	613b      	str	r3, [r7, #16]
 8017614:	2300      	movs	r3, #0
 8017616:	617b      	str	r3, [r7, #20]
 8017618:	6939      	ldr	r1, [r7, #16]
 801761a:	697a      	ldr	r2, [r7, #20]
 801761c:	000b      	movs	r3, r1
 801761e:	0e1b      	lsrs	r3, r3, #24
 8017620:	0010      	movs	r0, r2
 8017622:	0205      	lsls	r5, r0, #8
 8017624:	431d      	orrs	r5, r3
 8017626:	000b      	movs	r3, r1
 8017628:	021c      	lsls	r4, r3, #8
 801762a:	69fb      	ldr	r3, [r7, #28]
 801762c:	685b      	ldr	r3, [r3, #4]
 801762e:	085b      	lsrs	r3, r3, #1
 8017630:	60bb      	str	r3, [r7, #8]
 8017632:	2300      	movs	r3, #0
 8017634:	60fb      	str	r3, [r7, #12]
 8017636:	68b8      	ldr	r0, [r7, #8]
 8017638:	68f9      	ldr	r1, [r7, #12]
 801763a:	1900      	adds	r0, r0, r4
 801763c:	4169      	adcs	r1, r5
 801763e:	69fb      	ldr	r3, [r7, #28]
 8017640:	685b      	ldr	r3, [r3, #4]
 8017642:	603b      	str	r3, [r7, #0]
 8017644:	2300      	movs	r3, #0
 8017646:	607b      	str	r3, [r7, #4]
 8017648:	683a      	ldr	r2, [r7, #0]
 801764a:	687b      	ldr	r3, [r7, #4]
 801764c:	f7e8 ff98 	bl	8000580 <__aeabi_uldivmod>
 8017650:	0002      	movs	r2, r0
 8017652:	000b      	movs	r3, r1
 8017654:	0013      	movs	r3, r2
 8017656:	62bb      	str	r3, [r7, #40]	@ 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8017658:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801765a:	23c0      	movs	r3, #192	@ 0xc0
 801765c:	009b      	lsls	r3, r3, #2
 801765e:	429a      	cmp	r2, r3
 8017660:	d309      	bcc.n	8017676 <UART_SetConfig+0x332>
 8017662:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8017664:	2380      	movs	r3, #128	@ 0x80
 8017666:	035b      	lsls	r3, r3, #13
 8017668:	429a      	cmp	r2, r3
 801766a:	d204      	bcs.n	8017676 <UART_SetConfig+0x332>
        {
          huart->Instance->BRR = usartdiv;
 801766c:	69fb      	ldr	r3, [r7, #28]
 801766e:	681b      	ldr	r3, [r3, #0]
 8017670:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8017672:	60da      	str	r2, [r3, #12]
 8017674:	e0eb      	b.n	801784e <UART_SetConfig+0x50a>
        }
        else
        {
          ret = HAL_ERROR;
 8017676:	231a      	movs	r3, #26
 8017678:	2218      	movs	r2, #24
 801767a:	189b      	adds	r3, r3, r2
 801767c:	19db      	adds	r3, r3, r7
 801767e:	2201      	movs	r2, #1
 8017680:	701a      	strb	r2, [r3, #0]
 8017682:	e0e4      	b.n	801784e <UART_SetConfig+0x50a>
 8017684:	efff69f3 	.word	0xefff69f3
 8017688:	ffffcfff 	.word	0xffffcfff
 801768c:	40004800 	.word	0x40004800
 8017690:	fffff4ff 	.word	0xfffff4ff
 8017694:	40013800 	.word	0x40013800
 8017698:	40021000 	.word	0x40021000
 801769c:	40004400 	.word	0x40004400
 80176a0:	40004c00 	.word	0x40004c00
 80176a4:	40005000 	.word	0x40005000
 80176a8:	003d0900 	.word	0x003d0900
 80176ac:	00f42400 	.word	0x00f42400
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80176b0:	69fb      	ldr	r3, [r7, #28]
 80176b2:	69da      	ldr	r2, [r3, #28]
 80176b4:	2380      	movs	r3, #128	@ 0x80
 80176b6:	021b      	lsls	r3, r3, #8
 80176b8:	429a      	cmp	r2, r3
 80176ba:	d000      	beq.n	80176be <UART_SetConfig+0x37a>
 80176bc:	e070      	b.n	80177a0 <UART_SetConfig+0x45c>
  {
    switch (clocksource)
 80176be:	231b      	movs	r3, #27
 80176c0:	2218      	movs	r2, #24
 80176c2:	189b      	adds	r3, r3, r2
 80176c4:	19db      	adds	r3, r3, r7
 80176c6:	781b      	ldrb	r3, [r3, #0]
 80176c8:	2b08      	cmp	r3, #8
 80176ca:	d822      	bhi.n	8017712 <UART_SetConfig+0x3ce>
 80176cc:	009a      	lsls	r2, r3, #2
 80176ce:	4b67      	ldr	r3, [pc, #412]	@ (801786c <UART_SetConfig+0x528>)
 80176d0:	18d3      	adds	r3, r2, r3
 80176d2:	681b      	ldr	r3, [r3, #0]
 80176d4:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80176d6:	f7fd fdad 	bl	8015234 <HAL_RCC_GetPCLK1Freq>
 80176da:	0003      	movs	r3, r0
 80176dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80176de:	e021      	b.n	8017724 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80176e0:	f7fd fdbe 	bl	8015260 <HAL_RCC_GetPCLK2Freq>
 80176e4:	0003      	movs	r3, r0
 80176e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80176e8:	e01c      	b.n	8017724 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80176ea:	4b61      	ldr	r3, [pc, #388]	@ (8017870 <UART_SetConfig+0x52c>)
 80176ec:	681b      	ldr	r3, [r3, #0]
 80176ee:	2210      	movs	r2, #16
 80176f0:	4013      	ands	r3, r2
 80176f2:	d002      	beq.n	80176fa <UART_SetConfig+0x3b6>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80176f4:	4b5f      	ldr	r3, [pc, #380]	@ (8017874 <UART_SetConfig+0x530>)
 80176f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80176f8:	e014      	b.n	8017724 <UART_SetConfig+0x3e0>
          pclk = (uint32_t) HSI_VALUE;
 80176fa:	4b5f      	ldr	r3, [pc, #380]	@ (8017878 <UART_SetConfig+0x534>)
 80176fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80176fe:	e011      	b.n	8017724 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8017700:	f7fd fce8 	bl	80150d4 <HAL_RCC_GetSysClockFreq>
 8017704:	0003      	movs	r3, r0
 8017706:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8017708:	e00c      	b.n	8017724 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801770a:	2380      	movs	r3, #128	@ 0x80
 801770c:	021b      	lsls	r3, r3, #8
 801770e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8017710:	e008      	b.n	8017724 <UART_SetConfig+0x3e0>
      default:
        pclk = 0U;
 8017712:	2300      	movs	r3, #0
 8017714:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 8017716:	231a      	movs	r3, #26
 8017718:	2218      	movs	r2, #24
 801771a:	189b      	adds	r3, r3, r2
 801771c:	19db      	adds	r3, r3, r7
 801771e:	2201      	movs	r2, #1
 8017720:	701a      	strb	r2, [r3, #0]
        break;
 8017722:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8017724:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017726:	2b00      	cmp	r3, #0
 8017728:	d100      	bne.n	801772c <UART_SetConfig+0x3e8>
 801772a:	e090      	b.n	801784e <UART_SetConfig+0x50a>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 801772c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801772e:	005a      	lsls	r2, r3, #1
 8017730:	69fb      	ldr	r3, [r7, #28]
 8017732:	685b      	ldr	r3, [r3, #4]
 8017734:	085b      	lsrs	r3, r3, #1
 8017736:	18d2      	adds	r2, r2, r3
 8017738:	69fb      	ldr	r3, [r7, #28]
 801773a:	685b      	ldr	r3, [r3, #4]
 801773c:	0019      	movs	r1, r3
 801773e:	0010      	movs	r0, r2
 8017740:	f7e8 fd30 	bl	80001a4 <__udivsi3>
 8017744:	0003      	movs	r3, r0
 8017746:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8017748:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801774a:	2b0f      	cmp	r3, #15
 801774c:	d921      	bls.n	8017792 <UART_SetConfig+0x44e>
 801774e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8017750:	2380      	movs	r3, #128	@ 0x80
 8017752:	025b      	lsls	r3, r3, #9
 8017754:	429a      	cmp	r2, r3
 8017756:	d21c      	bcs.n	8017792 <UART_SetConfig+0x44e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8017758:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801775a:	b29a      	uxth	r2, r3
 801775c:	200e      	movs	r0, #14
 801775e:	2418      	movs	r4, #24
 8017760:	1903      	adds	r3, r0, r4
 8017762:	19db      	adds	r3, r3, r7
 8017764:	210f      	movs	r1, #15
 8017766:	438a      	bics	r2, r1
 8017768:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 801776a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801776c:	085b      	lsrs	r3, r3, #1
 801776e:	b29b      	uxth	r3, r3
 8017770:	2207      	movs	r2, #7
 8017772:	4013      	ands	r3, r2
 8017774:	b299      	uxth	r1, r3
 8017776:	1903      	adds	r3, r0, r4
 8017778:	19db      	adds	r3, r3, r7
 801777a:	1902      	adds	r2, r0, r4
 801777c:	19d2      	adds	r2, r2, r7
 801777e:	8812      	ldrh	r2, [r2, #0]
 8017780:	430a      	orrs	r2, r1
 8017782:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8017784:	69fb      	ldr	r3, [r7, #28]
 8017786:	681b      	ldr	r3, [r3, #0]
 8017788:	1902      	adds	r2, r0, r4
 801778a:	19d2      	adds	r2, r2, r7
 801778c:	8812      	ldrh	r2, [r2, #0]
 801778e:	60da      	str	r2, [r3, #12]
 8017790:	e05d      	b.n	801784e <UART_SetConfig+0x50a>
      }
      else
      {
        ret = HAL_ERROR;
 8017792:	231a      	movs	r3, #26
 8017794:	2218      	movs	r2, #24
 8017796:	189b      	adds	r3, r3, r2
 8017798:	19db      	adds	r3, r3, r7
 801779a:	2201      	movs	r2, #1
 801779c:	701a      	strb	r2, [r3, #0]
 801779e:	e056      	b.n	801784e <UART_SetConfig+0x50a>
      }
    }
  }
  else
  {
    switch (clocksource)
 80177a0:	231b      	movs	r3, #27
 80177a2:	2218      	movs	r2, #24
 80177a4:	189b      	adds	r3, r3, r2
 80177a6:	19db      	adds	r3, r3, r7
 80177a8:	781b      	ldrb	r3, [r3, #0]
 80177aa:	2b08      	cmp	r3, #8
 80177ac:	d822      	bhi.n	80177f4 <UART_SetConfig+0x4b0>
 80177ae:	009a      	lsls	r2, r3, #2
 80177b0:	4b32      	ldr	r3, [pc, #200]	@ (801787c <UART_SetConfig+0x538>)
 80177b2:	18d3      	adds	r3, r2, r3
 80177b4:	681b      	ldr	r3, [r3, #0]
 80177b6:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80177b8:	f7fd fd3c 	bl	8015234 <HAL_RCC_GetPCLK1Freq>
 80177bc:	0003      	movs	r3, r0
 80177be:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80177c0:	e021      	b.n	8017806 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80177c2:	f7fd fd4d 	bl	8015260 <HAL_RCC_GetPCLK2Freq>
 80177c6:	0003      	movs	r3, r0
 80177c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80177ca:	e01c      	b.n	8017806 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80177cc:	4b28      	ldr	r3, [pc, #160]	@ (8017870 <UART_SetConfig+0x52c>)
 80177ce:	681b      	ldr	r3, [r3, #0]
 80177d0:	2210      	movs	r2, #16
 80177d2:	4013      	ands	r3, r2
 80177d4:	d002      	beq.n	80177dc <UART_SetConfig+0x498>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80177d6:	4b27      	ldr	r3, [pc, #156]	@ (8017874 <UART_SetConfig+0x530>)
 80177d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80177da:	e014      	b.n	8017806 <UART_SetConfig+0x4c2>
          pclk = (uint32_t) HSI_VALUE;
 80177dc:	4b26      	ldr	r3, [pc, #152]	@ (8017878 <UART_SetConfig+0x534>)
 80177de:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80177e0:	e011      	b.n	8017806 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80177e2:	f7fd fc77 	bl	80150d4 <HAL_RCC_GetSysClockFreq>
 80177e6:	0003      	movs	r3, r0
 80177e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80177ea:	e00c      	b.n	8017806 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80177ec:	2380      	movs	r3, #128	@ 0x80
 80177ee:	021b      	lsls	r3, r3, #8
 80177f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80177f2:	e008      	b.n	8017806 <UART_SetConfig+0x4c2>
      default:
        pclk = 0U;
 80177f4:	2300      	movs	r3, #0
 80177f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 80177f8:	231a      	movs	r3, #26
 80177fa:	2218      	movs	r2, #24
 80177fc:	189b      	adds	r3, r3, r2
 80177fe:	19db      	adds	r3, r3, r7
 8017800:	2201      	movs	r2, #1
 8017802:	701a      	strb	r2, [r3, #0]
        break;
 8017804:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8017806:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017808:	2b00      	cmp	r3, #0
 801780a:	d020      	beq.n	801784e <UART_SetConfig+0x50a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 801780c:	69fb      	ldr	r3, [r7, #28]
 801780e:	685b      	ldr	r3, [r3, #4]
 8017810:	085a      	lsrs	r2, r3, #1
 8017812:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017814:	18d2      	adds	r2, r2, r3
 8017816:	69fb      	ldr	r3, [r7, #28]
 8017818:	685b      	ldr	r3, [r3, #4]
 801781a:	0019      	movs	r1, r3
 801781c:	0010      	movs	r0, r2
 801781e:	f7e8 fcc1 	bl	80001a4 <__udivsi3>
 8017822:	0003      	movs	r3, r0
 8017824:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8017826:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017828:	2b0f      	cmp	r3, #15
 801782a:	d90a      	bls.n	8017842 <UART_SetConfig+0x4fe>
 801782c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801782e:	2380      	movs	r3, #128	@ 0x80
 8017830:	025b      	lsls	r3, r3, #9
 8017832:	429a      	cmp	r2, r3
 8017834:	d205      	bcs.n	8017842 <UART_SetConfig+0x4fe>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8017836:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017838:	b29a      	uxth	r2, r3
 801783a:	69fb      	ldr	r3, [r7, #28]
 801783c:	681b      	ldr	r3, [r3, #0]
 801783e:	60da      	str	r2, [r3, #12]
 8017840:	e005      	b.n	801784e <UART_SetConfig+0x50a>
      }
      else
      {
        ret = HAL_ERROR;
 8017842:	231a      	movs	r3, #26
 8017844:	2218      	movs	r2, #24
 8017846:	189b      	adds	r3, r3, r2
 8017848:	19db      	adds	r3, r3, r7
 801784a:	2201      	movs	r2, #1
 801784c:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 801784e:	69fb      	ldr	r3, [r7, #28]
 8017850:	2200      	movs	r2, #0
 8017852:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8017854:	69fb      	ldr	r3, [r7, #28]
 8017856:	2200      	movs	r2, #0
 8017858:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 801785a:	231a      	movs	r3, #26
 801785c:	2218      	movs	r2, #24
 801785e:	189b      	adds	r3, r3, r2
 8017860:	19db      	adds	r3, r3, r7
 8017862:	781b      	ldrb	r3, [r3, #0]
}
 8017864:	0018      	movs	r0, r3
 8017866:	46bd      	mov	sp, r7
 8017868:	b00e      	add	sp, #56	@ 0x38
 801786a:	bdb0      	pop	{r4, r5, r7, pc}
 801786c:	08024a90 	.word	0x08024a90
 8017870:	40021000 	.word	0x40021000
 8017874:	003d0900 	.word	0x003d0900
 8017878:	00f42400 	.word	0x00f42400
 801787c:	08024ab4 	.word	0x08024ab4

08017880 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8017880:	b580      	push	{r7, lr}
 8017882:	b082      	sub	sp, #8
 8017884:	af00      	add	r7, sp, #0
 8017886:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8017888:	687b      	ldr	r3, [r7, #4]
 801788a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801788c:	2201      	movs	r2, #1
 801788e:	4013      	ands	r3, r2
 8017890:	d00b      	beq.n	80178aa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8017892:	687b      	ldr	r3, [r7, #4]
 8017894:	681b      	ldr	r3, [r3, #0]
 8017896:	685b      	ldr	r3, [r3, #4]
 8017898:	4a4a      	ldr	r2, [pc, #296]	@ (80179c4 <UART_AdvFeatureConfig+0x144>)
 801789a:	4013      	ands	r3, r2
 801789c:	0019      	movs	r1, r3
 801789e:	687b      	ldr	r3, [r7, #4]
 80178a0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80178a2:	687b      	ldr	r3, [r7, #4]
 80178a4:	681b      	ldr	r3, [r3, #0]
 80178a6:	430a      	orrs	r2, r1
 80178a8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80178aa:	687b      	ldr	r3, [r7, #4]
 80178ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80178ae:	2202      	movs	r2, #2
 80178b0:	4013      	ands	r3, r2
 80178b2:	d00b      	beq.n	80178cc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80178b4:	687b      	ldr	r3, [r7, #4]
 80178b6:	681b      	ldr	r3, [r3, #0]
 80178b8:	685b      	ldr	r3, [r3, #4]
 80178ba:	4a43      	ldr	r2, [pc, #268]	@ (80179c8 <UART_AdvFeatureConfig+0x148>)
 80178bc:	4013      	ands	r3, r2
 80178be:	0019      	movs	r1, r3
 80178c0:	687b      	ldr	r3, [r7, #4]
 80178c2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80178c4:	687b      	ldr	r3, [r7, #4]
 80178c6:	681b      	ldr	r3, [r3, #0]
 80178c8:	430a      	orrs	r2, r1
 80178ca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80178cc:	687b      	ldr	r3, [r7, #4]
 80178ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80178d0:	2204      	movs	r2, #4
 80178d2:	4013      	ands	r3, r2
 80178d4:	d00b      	beq.n	80178ee <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80178d6:	687b      	ldr	r3, [r7, #4]
 80178d8:	681b      	ldr	r3, [r3, #0]
 80178da:	685b      	ldr	r3, [r3, #4]
 80178dc:	4a3b      	ldr	r2, [pc, #236]	@ (80179cc <UART_AdvFeatureConfig+0x14c>)
 80178de:	4013      	ands	r3, r2
 80178e0:	0019      	movs	r1, r3
 80178e2:	687b      	ldr	r3, [r7, #4]
 80178e4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80178e6:	687b      	ldr	r3, [r7, #4]
 80178e8:	681b      	ldr	r3, [r3, #0]
 80178ea:	430a      	orrs	r2, r1
 80178ec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80178ee:	687b      	ldr	r3, [r7, #4]
 80178f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80178f2:	2208      	movs	r2, #8
 80178f4:	4013      	ands	r3, r2
 80178f6:	d00b      	beq.n	8017910 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80178f8:	687b      	ldr	r3, [r7, #4]
 80178fa:	681b      	ldr	r3, [r3, #0]
 80178fc:	685b      	ldr	r3, [r3, #4]
 80178fe:	4a34      	ldr	r2, [pc, #208]	@ (80179d0 <UART_AdvFeatureConfig+0x150>)
 8017900:	4013      	ands	r3, r2
 8017902:	0019      	movs	r1, r3
 8017904:	687b      	ldr	r3, [r7, #4]
 8017906:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8017908:	687b      	ldr	r3, [r7, #4]
 801790a:	681b      	ldr	r3, [r3, #0]
 801790c:	430a      	orrs	r2, r1
 801790e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8017910:	687b      	ldr	r3, [r7, #4]
 8017912:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8017914:	2210      	movs	r2, #16
 8017916:	4013      	ands	r3, r2
 8017918:	d00b      	beq.n	8017932 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 801791a:	687b      	ldr	r3, [r7, #4]
 801791c:	681b      	ldr	r3, [r3, #0]
 801791e:	689b      	ldr	r3, [r3, #8]
 8017920:	4a2c      	ldr	r2, [pc, #176]	@ (80179d4 <UART_AdvFeatureConfig+0x154>)
 8017922:	4013      	ands	r3, r2
 8017924:	0019      	movs	r1, r3
 8017926:	687b      	ldr	r3, [r7, #4]
 8017928:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801792a:	687b      	ldr	r3, [r7, #4]
 801792c:	681b      	ldr	r3, [r3, #0]
 801792e:	430a      	orrs	r2, r1
 8017930:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8017932:	687b      	ldr	r3, [r7, #4]
 8017934:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8017936:	2220      	movs	r2, #32
 8017938:	4013      	ands	r3, r2
 801793a:	d00b      	beq.n	8017954 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 801793c:	687b      	ldr	r3, [r7, #4]
 801793e:	681b      	ldr	r3, [r3, #0]
 8017940:	689b      	ldr	r3, [r3, #8]
 8017942:	4a25      	ldr	r2, [pc, #148]	@ (80179d8 <UART_AdvFeatureConfig+0x158>)
 8017944:	4013      	ands	r3, r2
 8017946:	0019      	movs	r1, r3
 8017948:	687b      	ldr	r3, [r7, #4]
 801794a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 801794c:	687b      	ldr	r3, [r7, #4]
 801794e:	681b      	ldr	r3, [r3, #0]
 8017950:	430a      	orrs	r2, r1
 8017952:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8017954:	687b      	ldr	r3, [r7, #4]
 8017956:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8017958:	2240      	movs	r2, #64	@ 0x40
 801795a:	4013      	ands	r3, r2
 801795c:	d01d      	beq.n	801799a <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 801795e:	687b      	ldr	r3, [r7, #4]
 8017960:	681b      	ldr	r3, [r3, #0]
 8017962:	685b      	ldr	r3, [r3, #4]
 8017964:	4a1d      	ldr	r2, [pc, #116]	@ (80179dc <UART_AdvFeatureConfig+0x15c>)
 8017966:	4013      	ands	r3, r2
 8017968:	0019      	movs	r1, r3
 801796a:	687b      	ldr	r3, [r7, #4]
 801796c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 801796e:	687b      	ldr	r3, [r7, #4]
 8017970:	681b      	ldr	r3, [r3, #0]
 8017972:	430a      	orrs	r2, r1
 8017974:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8017976:	687b      	ldr	r3, [r7, #4]
 8017978:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 801797a:	2380      	movs	r3, #128	@ 0x80
 801797c:	035b      	lsls	r3, r3, #13
 801797e:	429a      	cmp	r2, r3
 8017980:	d10b      	bne.n	801799a <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8017982:	687b      	ldr	r3, [r7, #4]
 8017984:	681b      	ldr	r3, [r3, #0]
 8017986:	685b      	ldr	r3, [r3, #4]
 8017988:	4a15      	ldr	r2, [pc, #84]	@ (80179e0 <UART_AdvFeatureConfig+0x160>)
 801798a:	4013      	ands	r3, r2
 801798c:	0019      	movs	r1, r3
 801798e:	687b      	ldr	r3, [r7, #4]
 8017990:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8017992:	687b      	ldr	r3, [r7, #4]
 8017994:	681b      	ldr	r3, [r3, #0]
 8017996:	430a      	orrs	r2, r1
 8017998:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 801799a:	687b      	ldr	r3, [r7, #4]
 801799c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801799e:	2280      	movs	r2, #128	@ 0x80
 80179a0:	4013      	ands	r3, r2
 80179a2:	d00b      	beq.n	80179bc <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80179a4:	687b      	ldr	r3, [r7, #4]
 80179a6:	681b      	ldr	r3, [r3, #0]
 80179a8:	685b      	ldr	r3, [r3, #4]
 80179aa:	4a0e      	ldr	r2, [pc, #56]	@ (80179e4 <UART_AdvFeatureConfig+0x164>)
 80179ac:	4013      	ands	r3, r2
 80179ae:	0019      	movs	r1, r3
 80179b0:	687b      	ldr	r3, [r7, #4]
 80179b2:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80179b4:	687b      	ldr	r3, [r7, #4]
 80179b6:	681b      	ldr	r3, [r3, #0]
 80179b8:	430a      	orrs	r2, r1
 80179ba:	605a      	str	r2, [r3, #4]
  }
}
 80179bc:	46c0      	nop			@ (mov r8, r8)
 80179be:	46bd      	mov	sp, r7
 80179c0:	b002      	add	sp, #8
 80179c2:	bd80      	pop	{r7, pc}
 80179c4:	fffdffff 	.word	0xfffdffff
 80179c8:	fffeffff 	.word	0xfffeffff
 80179cc:	fffbffff 	.word	0xfffbffff
 80179d0:	ffff7fff 	.word	0xffff7fff
 80179d4:	ffffefff 	.word	0xffffefff
 80179d8:	ffffdfff 	.word	0xffffdfff
 80179dc:	ffefffff 	.word	0xffefffff
 80179e0:	ff9fffff 	.word	0xff9fffff
 80179e4:	fff7ffff 	.word	0xfff7ffff

080179e8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80179e8:	b580      	push	{r7, lr}
 80179ea:	b092      	sub	sp, #72	@ 0x48
 80179ec:	af02      	add	r7, sp, #8
 80179ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80179f0:	687b      	ldr	r3, [r7, #4]
 80179f2:	2284      	movs	r2, #132	@ 0x84
 80179f4:	2100      	movs	r1, #0
 80179f6:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80179f8:	f7f6 fd36 	bl	800e468 <HAL_GetTick>
 80179fc:	0003      	movs	r3, r0
 80179fe:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8017a00:	687b      	ldr	r3, [r7, #4]
 8017a02:	681b      	ldr	r3, [r3, #0]
 8017a04:	681b      	ldr	r3, [r3, #0]
 8017a06:	2208      	movs	r2, #8
 8017a08:	4013      	ands	r3, r2
 8017a0a:	2b08      	cmp	r3, #8
 8017a0c:	d12c      	bne.n	8017a68 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8017a0e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8017a10:	2280      	movs	r2, #128	@ 0x80
 8017a12:	0391      	lsls	r1, r2, #14
 8017a14:	6878      	ldr	r0, [r7, #4]
 8017a16:	4a46      	ldr	r2, [pc, #280]	@ (8017b30 <UART_CheckIdleState+0x148>)
 8017a18:	9200      	str	r2, [sp, #0]
 8017a1a:	2200      	movs	r2, #0
 8017a1c:	f000 f88c 	bl	8017b38 <UART_WaitOnFlagUntilTimeout>
 8017a20:	1e03      	subs	r3, r0, #0
 8017a22:	d021      	beq.n	8017a68 <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8017a24:	f3ef 8310 	mrs	r3, PRIMASK
 8017a28:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8017a2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8017a2c:	63bb      	str	r3, [r7, #56]	@ 0x38
 8017a2e:	2301      	movs	r3, #1
 8017a30:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017a32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017a34:	f383 8810 	msr	PRIMASK, r3
}
 8017a38:	46c0      	nop			@ (mov r8, r8)
 8017a3a:	687b      	ldr	r3, [r7, #4]
 8017a3c:	681b      	ldr	r3, [r3, #0]
 8017a3e:	681a      	ldr	r2, [r3, #0]
 8017a40:	687b      	ldr	r3, [r7, #4]
 8017a42:	681b      	ldr	r3, [r3, #0]
 8017a44:	2180      	movs	r1, #128	@ 0x80
 8017a46:	438a      	bics	r2, r1
 8017a48:	601a      	str	r2, [r3, #0]
 8017a4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017a4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017a4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017a50:	f383 8810 	msr	PRIMASK, r3
}
 8017a54:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8017a56:	687b      	ldr	r3, [r7, #4]
 8017a58:	2220      	movs	r2, #32
 8017a5a:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8017a5c:	687b      	ldr	r3, [r7, #4]
 8017a5e:	2278      	movs	r2, #120	@ 0x78
 8017a60:	2100      	movs	r1, #0
 8017a62:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8017a64:	2303      	movs	r3, #3
 8017a66:	e05f      	b.n	8017b28 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8017a68:	687b      	ldr	r3, [r7, #4]
 8017a6a:	681b      	ldr	r3, [r3, #0]
 8017a6c:	681b      	ldr	r3, [r3, #0]
 8017a6e:	2204      	movs	r2, #4
 8017a70:	4013      	ands	r3, r2
 8017a72:	2b04      	cmp	r3, #4
 8017a74:	d146      	bne.n	8017b04 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8017a76:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8017a78:	2280      	movs	r2, #128	@ 0x80
 8017a7a:	03d1      	lsls	r1, r2, #15
 8017a7c:	6878      	ldr	r0, [r7, #4]
 8017a7e:	4a2c      	ldr	r2, [pc, #176]	@ (8017b30 <UART_CheckIdleState+0x148>)
 8017a80:	9200      	str	r2, [sp, #0]
 8017a82:	2200      	movs	r2, #0
 8017a84:	f000 f858 	bl	8017b38 <UART_WaitOnFlagUntilTimeout>
 8017a88:	1e03      	subs	r3, r0, #0
 8017a8a:	d03b      	beq.n	8017b04 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8017a8c:	f3ef 8310 	mrs	r3, PRIMASK
 8017a90:	60fb      	str	r3, [r7, #12]
  return(result);
 8017a92:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8017a94:	637b      	str	r3, [r7, #52]	@ 0x34
 8017a96:	2301      	movs	r3, #1
 8017a98:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017a9a:	693b      	ldr	r3, [r7, #16]
 8017a9c:	f383 8810 	msr	PRIMASK, r3
}
 8017aa0:	46c0      	nop			@ (mov r8, r8)
 8017aa2:	687b      	ldr	r3, [r7, #4]
 8017aa4:	681b      	ldr	r3, [r3, #0]
 8017aa6:	681a      	ldr	r2, [r3, #0]
 8017aa8:	687b      	ldr	r3, [r7, #4]
 8017aaa:	681b      	ldr	r3, [r3, #0]
 8017aac:	4921      	ldr	r1, [pc, #132]	@ (8017b34 <UART_CheckIdleState+0x14c>)
 8017aae:	400a      	ands	r2, r1
 8017ab0:	601a      	str	r2, [r3, #0]
 8017ab2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8017ab4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017ab6:	697b      	ldr	r3, [r7, #20]
 8017ab8:	f383 8810 	msr	PRIMASK, r3
}
 8017abc:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8017abe:	f3ef 8310 	mrs	r3, PRIMASK
 8017ac2:	61bb      	str	r3, [r7, #24]
  return(result);
 8017ac4:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8017ac6:	633b      	str	r3, [r7, #48]	@ 0x30
 8017ac8:	2301      	movs	r3, #1
 8017aca:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017acc:	69fb      	ldr	r3, [r7, #28]
 8017ace:	f383 8810 	msr	PRIMASK, r3
}
 8017ad2:	46c0      	nop			@ (mov r8, r8)
 8017ad4:	687b      	ldr	r3, [r7, #4]
 8017ad6:	681b      	ldr	r3, [r3, #0]
 8017ad8:	689a      	ldr	r2, [r3, #8]
 8017ada:	687b      	ldr	r3, [r7, #4]
 8017adc:	681b      	ldr	r3, [r3, #0]
 8017ade:	2101      	movs	r1, #1
 8017ae0:	438a      	bics	r2, r1
 8017ae2:	609a      	str	r2, [r3, #8]
 8017ae4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017ae6:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017ae8:	6a3b      	ldr	r3, [r7, #32]
 8017aea:	f383 8810 	msr	PRIMASK, r3
}
 8017aee:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8017af0:	687b      	ldr	r3, [r7, #4]
 8017af2:	2280      	movs	r2, #128	@ 0x80
 8017af4:	2120      	movs	r1, #32
 8017af6:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8017af8:	687b      	ldr	r3, [r7, #4]
 8017afa:	2278      	movs	r2, #120	@ 0x78
 8017afc:	2100      	movs	r1, #0
 8017afe:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8017b00:	2303      	movs	r3, #3
 8017b02:	e011      	b.n	8017b28 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8017b04:	687b      	ldr	r3, [r7, #4]
 8017b06:	2220      	movs	r2, #32
 8017b08:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8017b0a:	687b      	ldr	r3, [r7, #4]
 8017b0c:	2280      	movs	r2, #128	@ 0x80
 8017b0e:	2120      	movs	r1, #32
 8017b10:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8017b12:	687b      	ldr	r3, [r7, #4]
 8017b14:	2200      	movs	r2, #0
 8017b16:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8017b18:	687b      	ldr	r3, [r7, #4]
 8017b1a:	2200      	movs	r2, #0
 8017b1c:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8017b1e:	687b      	ldr	r3, [r7, #4]
 8017b20:	2278      	movs	r2, #120	@ 0x78
 8017b22:	2100      	movs	r1, #0
 8017b24:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8017b26:	2300      	movs	r3, #0
}
 8017b28:	0018      	movs	r0, r3
 8017b2a:	46bd      	mov	sp, r7
 8017b2c:	b010      	add	sp, #64	@ 0x40
 8017b2e:	bd80      	pop	{r7, pc}
 8017b30:	01ffffff 	.word	0x01ffffff
 8017b34:	fffffedf 	.word	0xfffffedf

08017b38 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8017b38:	b580      	push	{r7, lr}
 8017b3a:	b084      	sub	sp, #16
 8017b3c:	af00      	add	r7, sp, #0
 8017b3e:	60f8      	str	r0, [r7, #12]
 8017b40:	60b9      	str	r1, [r7, #8]
 8017b42:	603b      	str	r3, [r7, #0]
 8017b44:	1dfb      	adds	r3, r7, #7
 8017b46:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8017b48:	e04b      	b.n	8017be2 <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8017b4a:	69bb      	ldr	r3, [r7, #24]
 8017b4c:	3301      	adds	r3, #1
 8017b4e:	d048      	beq.n	8017be2 <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8017b50:	f7f6 fc8a 	bl	800e468 <HAL_GetTick>
 8017b54:	0002      	movs	r2, r0
 8017b56:	683b      	ldr	r3, [r7, #0]
 8017b58:	1ad3      	subs	r3, r2, r3
 8017b5a:	69ba      	ldr	r2, [r7, #24]
 8017b5c:	429a      	cmp	r2, r3
 8017b5e:	d302      	bcc.n	8017b66 <UART_WaitOnFlagUntilTimeout+0x2e>
 8017b60:	69bb      	ldr	r3, [r7, #24]
 8017b62:	2b00      	cmp	r3, #0
 8017b64:	d101      	bne.n	8017b6a <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8017b66:	2303      	movs	r3, #3
 8017b68:	e04b      	b.n	8017c02 <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8017b6a:	68fb      	ldr	r3, [r7, #12]
 8017b6c:	681b      	ldr	r3, [r3, #0]
 8017b6e:	681b      	ldr	r3, [r3, #0]
 8017b70:	2204      	movs	r2, #4
 8017b72:	4013      	ands	r3, r2
 8017b74:	d035      	beq.n	8017be2 <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8017b76:	68fb      	ldr	r3, [r7, #12]
 8017b78:	681b      	ldr	r3, [r3, #0]
 8017b7a:	69db      	ldr	r3, [r3, #28]
 8017b7c:	2208      	movs	r2, #8
 8017b7e:	4013      	ands	r3, r2
 8017b80:	2b08      	cmp	r3, #8
 8017b82:	d111      	bne.n	8017ba8 <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8017b84:	68fb      	ldr	r3, [r7, #12]
 8017b86:	681b      	ldr	r3, [r3, #0]
 8017b88:	2208      	movs	r2, #8
 8017b8a:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8017b8c:	68fb      	ldr	r3, [r7, #12]
 8017b8e:	0018      	movs	r0, r3
 8017b90:	f000 f9ca 	bl	8017f28 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8017b94:	68fb      	ldr	r3, [r7, #12]
 8017b96:	2284      	movs	r2, #132	@ 0x84
 8017b98:	2108      	movs	r1, #8
 8017b9a:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8017b9c:	68fb      	ldr	r3, [r7, #12]
 8017b9e:	2278      	movs	r2, #120	@ 0x78
 8017ba0:	2100      	movs	r1, #0
 8017ba2:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 8017ba4:	2301      	movs	r3, #1
 8017ba6:	e02c      	b.n	8017c02 <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8017ba8:	68fb      	ldr	r3, [r7, #12]
 8017baa:	681b      	ldr	r3, [r3, #0]
 8017bac:	69da      	ldr	r2, [r3, #28]
 8017bae:	2380      	movs	r3, #128	@ 0x80
 8017bb0:	011b      	lsls	r3, r3, #4
 8017bb2:	401a      	ands	r2, r3
 8017bb4:	2380      	movs	r3, #128	@ 0x80
 8017bb6:	011b      	lsls	r3, r3, #4
 8017bb8:	429a      	cmp	r2, r3
 8017bba:	d112      	bne.n	8017be2 <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8017bbc:	68fb      	ldr	r3, [r7, #12]
 8017bbe:	681b      	ldr	r3, [r3, #0]
 8017bc0:	2280      	movs	r2, #128	@ 0x80
 8017bc2:	0112      	lsls	r2, r2, #4
 8017bc4:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8017bc6:	68fb      	ldr	r3, [r7, #12]
 8017bc8:	0018      	movs	r0, r3
 8017bca:	f000 f9ad 	bl	8017f28 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8017bce:	68fb      	ldr	r3, [r7, #12]
 8017bd0:	2284      	movs	r2, #132	@ 0x84
 8017bd2:	2120      	movs	r1, #32
 8017bd4:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8017bd6:	68fb      	ldr	r3, [r7, #12]
 8017bd8:	2278      	movs	r2, #120	@ 0x78
 8017bda:	2100      	movs	r1, #0
 8017bdc:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8017bde:	2303      	movs	r3, #3
 8017be0:	e00f      	b.n	8017c02 <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8017be2:	68fb      	ldr	r3, [r7, #12]
 8017be4:	681b      	ldr	r3, [r3, #0]
 8017be6:	69db      	ldr	r3, [r3, #28]
 8017be8:	68ba      	ldr	r2, [r7, #8]
 8017bea:	4013      	ands	r3, r2
 8017bec:	68ba      	ldr	r2, [r7, #8]
 8017bee:	1ad3      	subs	r3, r2, r3
 8017bf0:	425a      	negs	r2, r3
 8017bf2:	4153      	adcs	r3, r2
 8017bf4:	b2db      	uxtb	r3, r3
 8017bf6:	001a      	movs	r2, r3
 8017bf8:	1dfb      	adds	r3, r7, #7
 8017bfa:	781b      	ldrb	r3, [r3, #0]
 8017bfc:	429a      	cmp	r2, r3
 8017bfe:	d0a4      	beq.n	8017b4a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8017c00:	2300      	movs	r3, #0
}
 8017c02:	0018      	movs	r0, r3
 8017c04:	46bd      	mov	sp, r7
 8017c06:	b004      	add	sp, #16
 8017c08:	bd80      	pop	{r7, pc}
	...

08017c0c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8017c0c:	b580      	push	{r7, lr}
 8017c0e:	b090      	sub	sp, #64	@ 0x40
 8017c10:	af00      	add	r7, sp, #0
 8017c12:	60f8      	str	r0, [r7, #12]
 8017c14:	60b9      	str	r1, [r7, #8]
 8017c16:	1dbb      	adds	r3, r7, #6
 8017c18:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 8017c1a:	68fb      	ldr	r3, [r7, #12]
 8017c1c:	68ba      	ldr	r2, [r7, #8]
 8017c1e:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 8017c20:	68fb      	ldr	r3, [r7, #12]
 8017c22:	1dba      	adds	r2, r7, #6
 8017c24:	2158      	movs	r1, #88	@ 0x58
 8017c26:	8812      	ldrh	r2, [r2, #0]
 8017c28:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 8017c2a:	68fb      	ldr	r3, [r7, #12]
 8017c2c:	1dba      	adds	r2, r7, #6
 8017c2e:	215a      	movs	r1, #90	@ 0x5a
 8017c30:	8812      	ldrh	r2, [r2, #0]
 8017c32:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 8017c34:	68fb      	ldr	r3, [r7, #12]
 8017c36:	2200      	movs	r2, #0
 8017c38:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8017c3a:	68fb      	ldr	r3, [r7, #12]
 8017c3c:	689a      	ldr	r2, [r3, #8]
 8017c3e:	2380      	movs	r3, #128	@ 0x80
 8017c40:	015b      	lsls	r3, r3, #5
 8017c42:	429a      	cmp	r2, r3
 8017c44:	d10d      	bne.n	8017c62 <UART_Start_Receive_IT+0x56>
 8017c46:	68fb      	ldr	r3, [r7, #12]
 8017c48:	691b      	ldr	r3, [r3, #16]
 8017c4a:	2b00      	cmp	r3, #0
 8017c4c:	d104      	bne.n	8017c58 <UART_Start_Receive_IT+0x4c>
 8017c4e:	68fb      	ldr	r3, [r7, #12]
 8017c50:	225c      	movs	r2, #92	@ 0x5c
 8017c52:	4950      	ldr	r1, [pc, #320]	@ (8017d94 <UART_Start_Receive_IT+0x188>)
 8017c54:	5299      	strh	r1, [r3, r2]
 8017c56:	e02e      	b.n	8017cb6 <UART_Start_Receive_IT+0xaa>
 8017c58:	68fb      	ldr	r3, [r7, #12]
 8017c5a:	225c      	movs	r2, #92	@ 0x5c
 8017c5c:	21ff      	movs	r1, #255	@ 0xff
 8017c5e:	5299      	strh	r1, [r3, r2]
 8017c60:	e029      	b.n	8017cb6 <UART_Start_Receive_IT+0xaa>
 8017c62:	68fb      	ldr	r3, [r7, #12]
 8017c64:	689b      	ldr	r3, [r3, #8]
 8017c66:	2b00      	cmp	r3, #0
 8017c68:	d10d      	bne.n	8017c86 <UART_Start_Receive_IT+0x7a>
 8017c6a:	68fb      	ldr	r3, [r7, #12]
 8017c6c:	691b      	ldr	r3, [r3, #16]
 8017c6e:	2b00      	cmp	r3, #0
 8017c70:	d104      	bne.n	8017c7c <UART_Start_Receive_IT+0x70>
 8017c72:	68fb      	ldr	r3, [r7, #12]
 8017c74:	225c      	movs	r2, #92	@ 0x5c
 8017c76:	21ff      	movs	r1, #255	@ 0xff
 8017c78:	5299      	strh	r1, [r3, r2]
 8017c7a:	e01c      	b.n	8017cb6 <UART_Start_Receive_IT+0xaa>
 8017c7c:	68fb      	ldr	r3, [r7, #12]
 8017c7e:	225c      	movs	r2, #92	@ 0x5c
 8017c80:	217f      	movs	r1, #127	@ 0x7f
 8017c82:	5299      	strh	r1, [r3, r2]
 8017c84:	e017      	b.n	8017cb6 <UART_Start_Receive_IT+0xaa>
 8017c86:	68fb      	ldr	r3, [r7, #12]
 8017c88:	689a      	ldr	r2, [r3, #8]
 8017c8a:	2380      	movs	r3, #128	@ 0x80
 8017c8c:	055b      	lsls	r3, r3, #21
 8017c8e:	429a      	cmp	r2, r3
 8017c90:	d10d      	bne.n	8017cae <UART_Start_Receive_IT+0xa2>
 8017c92:	68fb      	ldr	r3, [r7, #12]
 8017c94:	691b      	ldr	r3, [r3, #16]
 8017c96:	2b00      	cmp	r3, #0
 8017c98:	d104      	bne.n	8017ca4 <UART_Start_Receive_IT+0x98>
 8017c9a:	68fb      	ldr	r3, [r7, #12]
 8017c9c:	225c      	movs	r2, #92	@ 0x5c
 8017c9e:	217f      	movs	r1, #127	@ 0x7f
 8017ca0:	5299      	strh	r1, [r3, r2]
 8017ca2:	e008      	b.n	8017cb6 <UART_Start_Receive_IT+0xaa>
 8017ca4:	68fb      	ldr	r3, [r7, #12]
 8017ca6:	225c      	movs	r2, #92	@ 0x5c
 8017ca8:	213f      	movs	r1, #63	@ 0x3f
 8017caa:	5299      	strh	r1, [r3, r2]
 8017cac:	e003      	b.n	8017cb6 <UART_Start_Receive_IT+0xaa>
 8017cae:	68fb      	ldr	r3, [r7, #12]
 8017cb0:	225c      	movs	r2, #92	@ 0x5c
 8017cb2:	2100      	movs	r1, #0
 8017cb4:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8017cb6:	68fb      	ldr	r3, [r7, #12]
 8017cb8:	2284      	movs	r2, #132	@ 0x84
 8017cba:	2100      	movs	r1, #0
 8017cbc:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8017cbe:	68fb      	ldr	r3, [r7, #12]
 8017cc0:	2280      	movs	r2, #128	@ 0x80
 8017cc2:	2122      	movs	r1, #34	@ 0x22
 8017cc4:	5099      	str	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8017cc6:	f3ef 8310 	mrs	r3, PRIMASK
 8017cca:	62bb      	str	r3, [r7, #40]	@ 0x28
  return(result);
 8017ccc:	6abb      	ldr	r3, [r7, #40]	@ 0x28

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8017cce:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8017cd0:	2301      	movs	r3, #1
 8017cd2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017cd4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017cd6:	f383 8810 	msr	PRIMASK, r3
}
 8017cda:	46c0      	nop			@ (mov r8, r8)
 8017cdc:	68fb      	ldr	r3, [r7, #12]
 8017cde:	681b      	ldr	r3, [r3, #0]
 8017ce0:	689a      	ldr	r2, [r3, #8]
 8017ce2:	68fb      	ldr	r3, [r7, #12]
 8017ce4:	681b      	ldr	r3, [r3, #0]
 8017ce6:	2101      	movs	r1, #1
 8017ce8:	430a      	orrs	r2, r1
 8017cea:	609a      	str	r2, [r3, #8]
 8017cec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8017cee:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017cf0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017cf2:	f383 8810 	msr	PRIMASK, r3
}
 8017cf6:	46c0      	nop			@ (mov r8, r8)

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8017cf8:	68fb      	ldr	r3, [r7, #12]
 8017cfa:	689a      	ldr	r2, [r3, #8]
 8017cfc:	2380      	movs	r3, #128	@ 0x80
 8017cfe:	015b      	lsls	r3, r3, #5
 8017d00:	429a      	cmp	r2, r3
 8017d02:	d107      	bne.n	8017d14 <UART_Start_Receive_IT+0x108>
 8017d04:	68fb      	ldr	r3, [r7, #12]
 8017d06:	691b      	ldr	r3, [r3, #16]
 8017d08:	2b00      	cmp	r3, #0
 8017d0a:	d103      	bne.n	8017d14 <UART_Start_Receive_IT+0x108>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8017d0c:	68fb      	ldr	r3, [r7, #12]
 8017d0e:	4a22      	ldr	r2, [pc, #136]	@ (8017d98 <UART_Start_Receive_IT+0x18c>)
 8017d10:	669a      	str	r2, [r3, #104]	@ 0x68
 8017d12:	e002      	b.n	8017d1a <UART_Start_Receive_IT+0x10e>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8017d14:	68fb      	ldr	r3, [r7, #12]
 8017d16:	4a21      	ldr	r2, [pc, #132]	@ (8017d9c <UART_Start_Receive_IT+0x190>)
 8017d18:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8017d1a:	68fb      	ldr	r3, [r7, #12]
 8017d1c:	691b      	ldr	r3, [r3, #16]
 8017d1e:	2b00      	cmp	r3, #0
 8017d20:	d019      	beq.n	8017d56 <UART_Start_Receive_IT+0x14a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8017d22:	f3ef 8310 	mrs	r3, PRIMASK
 8017d26:	61fb      	str	r3, [r7, #28]
  return(result);
 8017d28:	69fb      	ldr	r3, [r7, #28]
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8017d2a:	637b      	str	r3, [r7, #52]	@ 0x34
 8017d2c:	2301      	movs	r3, #1
 8017d2e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017d30:	6a3b      	ldr	r3, [r7, #32]
 8017d32:	f383 8810 	msr	PRIMASK, r3
}
 8017d36:	46c0      	nop			@ (mov r8, r8)
 8017d38:	68fb      	ldr	r3, [r7, #12]
 8017d3a:	681b      	ldr	r3, [r3, #0]
 8017d3c:	681a      	ldr	r2, [r3, #0]
 8017d3e:	68fb      	ldr	r3, [r7, #12]
 8017d40:	681b      	ldr	r3, [r3, #0]
 8017d42:	2190      	movs	r1, #144	@ 0x90
 8017d44:	0049      	lsls	r1, r1, #1
 8017d46:	430a      	orrs	r2, r1
 8017d48:	601a      	str	r2, [r3, #0]
 8017d4a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8017d4c:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017d4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017d50:	f383 8810 	msr	PRIMASK, r3
}
 8017d54:	e018      	b.n	8017d88 <UART_Start_Receive_IT+0x17c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8017d56:	f3ef 8310 	mrs	r3, PRIMASK
 8017d5a:	613b      	str	r3, [r7, #16]
  return(result);
 8017d5c:	693b      	ldr	r3, [r7, #16]
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8017d5e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8017d60:	2301      	movs	r3, #1
 8017d62:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017d64:	697b      	ldr	r3, [r7, #20]
 8017d66:	f383 8810 	msr	PRIMASK, r3
}
 8017d6a:	46c0      	nop			@ (mov r8, r8)
 8017d6c:	68fb      	ldr	r3, [r7, #12]
 8017d6e:	681b      	ldr	r3, [r3, #0]
 8017d70:	681a      	ldr	r2, [r3, #0]
 8017d72:	68fb      	ldr	r3, [r7, #12]
 8017d74:	681b      	ldr	r3, [r3, #0]
 8017d76:	2120      	movs	r1, #32
 8017d78:	430a      	orrs	r2, r1
 8017d7a:	601a      	str	r2, [r3, #0]
 8017d7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017d7e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017d80:	69bb      	ldr	r3, [r7, #24]
 8017d82:	f383 8810 	msr	PRIMASK, r3
}
 8017d86:	46c0      	nop			@ (mov r8, r8)
  }
  return HAL_OK;
 8017d88:	2300      	movs	r3, #0
}
 8017d8a:	0018      	movs	r0, r3
 8017d8c:	46bd      	mov	sp, r7
 8017d8e:	b010      	add	sp, #64	@ 0x40
 8017d90:	bd80      	pop	{r7, pc}
 8017d92:	46c0      	nop			@ (mov r8, r8)
 8017d94:	000001ff 	.word	0x000001ff
 8017d98:	0801850d 	.word	0x0801850d
 8017d9c:	08018341 	.word	0x08018341

08017da0 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8017da0:	b580      	push	{r7, lr}
 8017da2:	b090      	sub	sp, #64	@ 0x40
 8017da4:	af00      	add	r7, sp, #0
 8017da6:	60f8      	str	r0, [r7, #12]
 8017da8:	60b9      	str	r1, [r7, #8]
 8017daa:	1dbb      	adds	r3, r7, #6
 8017dac:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr = pData;
 8017dae:	68fb      	ldr	r3, [r7, #12]
 8017db0:	68ba      	ldr	r2, [r7, #8]
 8017db2:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize = Size;
 8017db4:	68fb      	ldr	r3, [r7, #12]
 8017db6:	1dba      	adds	r2, r7, #6
 8017db8:	2158      	movs	r1, #88	@ 0x58
 8017dba:	8812      	ldrh	r2, [r2, #0]
 8017dbc:	525a      	strh	r2, [r3, r1]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8017dbe:	68fb      	ldr	r3, [r7, #12]
 8017dc0:	2284      	movs	r2, #132	@ 0x84
 8017dc2:	2100      	movs	r1, #0
 8017dc4:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8017dc6:	68fb      	ldr	r3, [r7, #12]
 8017dc8:	2280      	movs	r2, #128	@ 0x80
 8017dca:	2122      	movs	r1, #34	@ 0x22
 8017dcc:	5099      	str	r1, [r3, r2]

  if (huart->hdmarx != NULL)
 8017dce:	68fb      	ldr	r3, [r7, #12]
 8017dd0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8017dd2:	2b00      	cmp	r3, #0
 8017dd4:	d028      	beq.n	8017e28 <UART_Start_Receive_DMA+0x88>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8017dd6:	68fb      	ldr	r3, [r7, #12]
 8017dd8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8017dda:	4a3e      	ldr	r2, [pc, #248]	@ (8017ed4 <UART_Start_Receive_DMA+0x134>)
 8017ddc:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8017dde:	68fb      	ldr	r3, [r7, #12]
 8017de0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8017de2:	4a3d      	ldr	r2, [pc, #244]	@ (8017ed8 <UART_Start_Receive_DMA+0x138>)
 8017de4:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8017de6:	68fb      	ldr	r3, [r7, #12]
 8017de8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8017dea:	4a3c      	ldr	r2, [pc, #240]	@ (8017edc <UART_Start_Receive_DMA+0x13c>)
 8017dec:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8017dee:	68fb      	ldr	r3, [r7, #12]
 8017df0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8017df2:	2200      	movs	r2, #0
 8017df4:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8017df6:	68fb      	ldr	r3, [r7, #12]
 8017df8:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 8017dfa:	68fb      	ldr	r3, [r7, #12]
 8017dfc:	681b      	ldr	r3, [r3, #0]
 8017dfe:	3324      	adds	r3, #36	@ 0x24
 8017e00:	0019      	movs	r1, r3
 8017e02:	68fb      	ldr	r3, [r7, #12]
 8017e04:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8017e06:	001a      	movs	r2, r3
 8017e08:	1dbb      	adds	r3, r7, #6
 8017e0a:	881b      	ldrh	r3, [r3, #0]
 8017e0c:	f7f7 f87e 	bl	800ef0c <HAL_DMA_Start_IT>
 8017e10:	1e03      	subs	r3, r0, #0
 8017e12:	d009      	beq.n	8017e28 <UART_Start_Receive_DMA+0x88>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8017e14:	68fb      	ldr	r3, [r7, #12]
 8017e16:	2284      	movs	r2, #132	@ 0x84
 8017e18:	2110      	movs	r1, #16
 8017e1a:	5099      	str	r1, [r3, r2]

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8017e1c:	68fb      	ldr	r3, [r7, #12]
 8017e1e:	2280      	movs	r2, #128	@ 0x80
 8017e20:	2120      	movs	r1, #32
 8017e22:	5099      	str	r1, [r3, r2]

      return HAL_ERROR;
 8017e24:	2301      	movs	r3, #1
 8017e26:	e050      	b.n	8017eca <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8017e28:	68fb      	ldr	r3, [r7, #12]
 8017e2a:	691b      	ldr	r3, [r3, #16]
 8017e2c:	2b00      	cmp	r3, #0
 8017e2e:	d019      	beq.n	8017e64 <UART_Start_Receive_DMA+0xc4>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8017e30:	f3ef 8310 	mrs	r3, PRIMASK
 8017e34:	62bb      	str	r3, [r7, #40]	@ 0x28
  return(result);
 8017e36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8017e38:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8017e3a:	2301      	movs	r3, #1
 8017e3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017e3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017e40:	f383 8810 	msr	PRIMASK, r3
}
 8017e44:	46c0      	nop			@ (mov r8, r8)
 8017e46:	68fb      	ldr	r3, [r7, #12]
 8017e48:	681b      	ldr	r3, [r3, #0]
 8017e4a:	681a      	ldr	r2, [r3, #0]
 8017e4c:	68fb      	ldr	r3, [r7, #12]
 8017e4e:	681b      	ldr	r3, [r3, #0]
 8017e50:	2180      	movs	r1, #128	@ 0x80
 8017e52:	0049      	lsls	r1, r1, #1
 8017e54:	430a      	orrs	r2, r1
 8017e56:	601a      	str	r2, [r3, #0]
 8017e58:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8017e5a:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017e5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017e5e:	f383 8810 	msr	PRIMASK, r3
}
 8017e62:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8017e64:	f3ef 8310 	mrs	r3, PRIMASK
 8017e68:	613b      	str	r3, [r7, #16]
  return(result);
 8017e6a:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8017e6c:	63bb      	str	r3, [r7, #56]	@ 0x38
 8017e6e:	2301      	movs	r3, #1
 8017e70:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017e72:	697b      	ldr	r3, [r7, #20]
 8017e74:	f383 8810 	msr	PRIMASK, r3
}
 8017e78:	46c0      	nop			@ (mov r8, r8)
 8017e7a:	68fb      	ldr	r3, [r7, #12]
 8017e7c:	681b      	ldr	r3, [r3, #0]
 8017e7e:	689a      	ldr	r2, [r3, #8]
 8017e80:	68fb      	ldr	r3, [r7, #12]
 8017e82:	681b      	ldr	r3, [r3, #0]
 8017e84:	2101      	movs	r1, #1
 8017e86:	430a      	orrs	r2, r1
 8017e88:	609a      	str	r2, [r3, #8]
 8017e8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017e8c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017e8e:	69bb      	ldr	r3, [r7, #24]
 8017e90:	f383 8810 	msr	PRIMASK, r3
}
 8017e94:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8017e96:	f3ef 8310 	mrs	r3, PRIMASK
 8017e9a:	61fb      	str	r3, [r7, #28]
  return(result);
 8017e9c:	69fb      	ldr	r3, [r7, #28]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8017e9e:	637b      	str	r3, [r7, #52]	@ 0x34
 8017ea0:	2301      	movs	r3, #1
 8017ea2:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017ea4:	6a3b      	ldr	r3, [r7, #32]
 8017ea6:	f383 8810 	msr	PRIMASK, r3
}
 8017eaa:	46c0      	nop			@ (mov r8, r8)
 8017eac:	68fb      	ldr	r3, [r7, #12]
 8017eae:	681b      	ldr	r3, [r3, #0]
 8017eb0:	689a      	ldr	r2, [r3, #8]
 8017eb2:	68fb      	ldr	r3, [r7, #12]
 8017eb4:	681b      	ldr	r3, [r3, #0]
 8017eb6:	2140      	movs	r1, #64	@ 0x40
 8017eb8:	430a      	orrs	r2, r1
 8017eba:	609a      	str	r2, [r3, #8]
 8017ebc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8017ebe:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017ec0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017ec2:	f383 8810 	msr	PRIMASK, r3
}
 8017ec6:	46c0      	nop			@ (mov r8, r8)

  return HAL_OK;
 8017ec8:	2300      	movs	r3, #0
}
 8017eca:	0018      	movs	r0, r3
 8017ecc:	46bd      	mov	sp, r7
 8017ece:	b010      	add	sp, #64	@ 0x40
 8017ed0:	bd80      	pop	{r7, pc}
 8017ed2:	46c0      	nop			@ (mov r8, r8)
 8017ed4:	080180b1 	.word	0x080180b1
 8017ed8:	080181e5 	.word	0x080181e5
 8017edc:	0801822d 	.word	0x0801822d

08017ee0 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8017ee0:	b580      	push	{r7, lr}
 8017ee2:	b086      	sub	sp, #24
 8017ee4:	af00      	add	r7, sp, #0
 8017ee6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8017ee8:	f3ef 8310 	mrs	r3, PRIMASK
 8017eec:	60bb      	str	r3, [r7, #8]
  return(result);
 8017eee:	68bb      	ldr	r3, [r7, #8]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8017ef0:	617b      	str	r3, [r7, #20]
 8017ef2:	2301      	movs	r3, #1
 8017ef4:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017ef6:	68fb      	ldr	r3, [r7, #12]
 8017ef8:	f383 8810 	msr	PRIMASK, r3
}
 8017efc:	46c0      	nop			@ (mov r8, r8)
 8017efe:	687b      	ldr	r3, [r7, #4]
 8017f00:	681b      	ldr	r3, [r3, #0]
 8017f02:	681a      	ldr	r2, [r3, #0]
 8017f04:	687b      	ldr	r3, [r7, #4]
 8017f06:	681b      	ldr	r3, [r3, #0]
 8017f08:	21c0      	movs	r1, #192	@ 0xc0
 8017f0a:	438a      	bics	r2, r1
 8017f0c:	601a      	str	r2, [r3, #0]
 8017f0e:	697b      	ldr	r3, [r7, #20]
 8017f10:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017f12:	693b      	ldr	r3, [r7, #16]
 8017f14:	f383 8810 	msr	PRIMASK, r3
}
 8017f18:	46c0      	nop			@ (mov r8, r8)

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8017f1a:	687b      	ldr	r3, [r7, #4]
 8017f1c:	2220      	movs	r2, #32
 8017f1e:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 8017f20:	46c0      	nop			@ (mov r8, r8)
 8017f22:	46bd      	mov	sp, r7
 8017f24:	b006      	add	sp, #24
 8017f26:	bd80      	pop	{r7, pc}

08017f28 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8017f28:	b580      	push	{r7, lr}
 8017f2a:	b08e      	sub	sp, #56	@ 0x38
 8017f2c:	af00      	add	r7, sp, #0
 8017f2e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8017f30:	f3ef 8310 	mrs	r3, PRIMASK
 8017f34:	617b      	str	r3, [r7, #20]
  return(result);
 8017f36:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8017f38:	637b      	str	r3, [r7, #52]	@ 0x34
 8017f3a:	2301      	movs	r3, #1
 8017f3c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017f3e:	69bb      	ldr	r3, [r7, #24]
 8017f40:	f383 8810 	msr	PRIMASK, r3
}
 8017f44:	46c0      	nop			@ (mov r8, r8)
 8017f46:	687b      	ldr	r3, [r7, #4]
 8017f48:	681b      	ldr	r3, [r3, #0]
 8017f4a:	681a      	ldr	r2, [r3, #0]
 8017f4c:	687b      	ldr	r3, [r7, #4]
 8017f4e:	681b      	ldr	r3, [r3, #0]
 8017f50:	4926      	ldr	r1, [pc, #152]	@ (8017fec <UART_EndRxTransfer+0xc4>)
 8017f52:	400a      	ands	r2, r1
 8017f54:	601a      	str	r2, [r3, #0]
 8017f56:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8017f58:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017f5a:	69fb      	ldr	r3, [r7, #28]
 8017f5c:	f383 8810 	msr	PRIMASK, r3
}
 8017f60:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8017f62:	f3ef 8310 	mrs	r3, PRIMASK
 8017f66:	623b      	str	r3, [r7, #32]
  return(result);
 8017f68:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8017f6a:	633b      	str	r3, [r7, #48]	@ 0x30
 8017f6c:	2301      	movs	r3, #1
 8017f6e:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017f70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017f72:	f383 8810 	msr	PRIMASK, r3
}
 8017f76:	46c0      	nop			@ (mov r8, r8)
 8017f78:	687b      	ldr	r3, [r7, #4]
 8017f7a:	681b      	ldr	r3, [r3, #0]
 8017f7c:	689a      	ldr	r2, [r3, #8]
 8017f7e:	687b      	ldr	r3, [r7, #4]
 8017f80:	681b      	ldr	r3, [r3, #0]
 8017f82:	2101      	movs	r1, #1
 8017f84:	438a      	bics	r2, r1
 8017f86:	609a      	str	r2, [r3, #8]
 8017f88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017f8a:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017f8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017f8e:	f383 8810 	msr	PRIMASK, r3
}
 8017f92:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8017f94:	687b      	ldr	r3, [r7, #4]
 8017f96:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8017f98:	2b01      	cmp	r3, #1
 8017f9a:	d118      	bne.n	8017fce <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8017f9c:	f3ef 8310 	mrs	r3, PRIMASK
 8017fa0:	60bb      	str	r3, [r7, #8]
  return(result);
 8017fa2:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8017fa4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8017fa6:	2301      	movs	r3, #1
 8017fa8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017faa:	68fb      	ldr	r3, [r7, #12]
 8017fac:	f383 8810 	msr	PRIMASK, r3
}
 8017fb0:	46c0      	nop			@ (mov r8, r8)
 8017fb2:	687b      	ldr	r3, [r7, #4]
 8017fb4:	681b      	ldr	r3, [r3, #0]
 8017fb6:	681a      	ldr	r2, [r3, #0]
 8017fb8:	687b      	ldr	r3, [r7, #4]
 8017fba:	681b      	ldr	r3, [r3, #0]
 8017fbc:	2110      	movs	r1, #16
 8017fbe:	438a      	bics	r2, r1
 8017fc0:	601a      	str	r2, [r3, #0]
 8017fc2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017fc4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017fc6:	693b      	ldr	r3, [r7, #16]
 8017fc8:	f383 8810 	msr	PRIMASK, r3
}
 8017fcc:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8017fce:	687b      	ldr	r3, [r7, #4]
 8017fd0:	2280      	movs	r2, #128	@ 0x80
 8017fd2:	2120      	movs	r1, #32
 8017fd4:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8017fd6:	687b      	ldr	r3, [r7, #4]
 8017fd8:	2200      	movs	r2, #0
 8017fda:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8017fdc:	687b      	ldr	r3, [r7, #4]
 8017fde:	2200      	movs	r2, #0
 8017fe0:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8017fe2:	46c0      	nop			@ (mov r8, r8)
 8017fe4:	46bd      	mov	sp, r7
 8017fe6:	b00e      	add	sp, #56	@ 0x38
 8017fe8:	bd80      	pop	{r7, pc}
 8017fea:	46c0      	nop			@ (mov r8, r8)
 8017fec:	fffffedf 	.word	0xfffffedf

08017ff0 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8017ff0:	b580      	push	{r7, lr}
 8017ff2:	b08c      	sub	sp, #48	@ 0x30
 8017ff4:	af00      	add	r7, sp, #0
 8017ff6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8017ff8:	687b      	ldr	r3, [r7, #4]
 8017ffa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8017ffc:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8017ffe:	687b      	ldr	r3, [r7, #4]
 8018000:	681b      	ldr	r3, [r3, #0]
 8018002:	681b      	ldr	r3, [r3, #0]
 8018004:	2220      	movs	r2, #32
 8018006:	4013      	ands	r3, r2
 8018008:	d135      	bne.n	8018076 <UART_DMATransmitCplt+0x86>
  {
    huart->TxXferCount = 0U;
 801800a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801800c:	2252      	movs	r2, #82	@ 0x52
 801800e:	2100      	movs	r1, #0
 8018010:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8018012:	f3ef 8310 	mrs	r3, PRIMASK
 8018016:	60fb      	str	r3, [r7, #12]
  return(result);
 8018018:	68fb      	ldr	r3, [r7, #12]

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 801801a:	62bb      	str	r3, [r7, #40]	@ 0x28
 801801c:	2301      	movs	r3, #1
 801801e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018020:	693b      	ldr	r3, [r7, #16]
 8018022:	f383 8810 	msr	PRIMASK, r3
}
 8018026:	46c0      	nop			@ (mov r8, r8)
 8018028:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801802a:	681b      	ldr	r3, [r3, #0]
 801802c:	689a      	ldr	r2, [r3, #8]
 801802e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018030:	681b      	ldr	r3, [r3, #0]
 8018032:	2180      	movs	r1, #128	@ 0x80
 8018034:	438a      	bics	r2, r1
 8018036:	609a      	str	r2, [r3, #8]
 8018038:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801803a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801803c:	697b      	ldr	r3, [r7, #20]
 801803e:	f383 8810 	msr	PRIMASK, r3
}
 8018042:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8018044:	f3ef 8310 	mrs	r3, PRIMASK
 8018048:	61bb      	str	r3, [r7, #24]
  return(result);
 801804a:	69bb      	ldr	r3, [r7, #24]

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 801804c:	627b      	str	r3, [r7, #36]	@ 0x24
 801804e:	2301      	movs	r3, #1
 8018050:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018052:	69fb      	ldr	r3, [r7, #28]
 8018054:	f383 8810 	msr	PRIMASK, r3
}
 8018058:	46c0      	nop			@ (mov r8, r8)
 801805a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801805c:	681b      	ldr	r3, [r3, #0]
 801805e:	681a      	ldr	r2, [r3, #0]
 8018060:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018062:	681b      	ldr	r3, [r3, #0]
 8018064:	2140      	movs	r1, #64	@ 0x40
 8018066:	430a      	orrs	r2, r1
 8018068:	601a      	str	r2, [r3, #0]
 801806a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801806c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801806e:	6a3b      	ldr	r3, [r7, #32]
 8018070:	f383 8810 	msr	PRIMASK, r3
}
 8018074:	e006      	b.n	8018084 <UART_DMATransmitCplt+0x94>
  /* DMA Circular mode */
  else
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Tx complete callback*/
    huart->TxCpltCallback(huart);
 8018076:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018078:	228c      	movs	r2, #140	@ 0x8c
 801807a:	589b      	ldr	r3, [r3, r2]
 801807c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801807e:	0010      	movs	r0, r2
 8018080:	4798      	blx	r3
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8018082:	46c0      	nop			@ (mov r8, r8)
 8018084:	46c0      	nop			@ (mov r8, r8)
 8018086:	46bd      	mov	sp, r7
 8018088:	b00c      	add	sp, #48	@ 0x30
 801808a:	bd80      	pop	{r7, pc}

0801808c <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 801808c:	b580      	push	{r7, lr}
 801808e:	b084      	sub	sp, #16
 8018090:	af00      	add	r7, sp, #0
 8018092:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8018094:	687b      	ldr	r3, [r7, #4]
 8018096:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8018098:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
 801809a:	68fb      	ldr	r3, [r7, #12]
 801809c:	2288      	movs	r2, #136	@ 0x88
 801809e:	589b      	ldr	r3, [r3, r2]
 80180a0:	68fa      	ldr	r2, [r7, #12]
 80180a2:	0010      	movs	r0, r2
 80180a4:	4798      	blx	r3
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80180a6:	46c0      	nop			@ (mov r8, r8)
 80180a8:	46bd      	mov	sp, r7
 80180aa:	b004      	add	sp, #16
 80180ac:	bd80      	pop	{r7, pc}
	...

080180b0 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80180b0:	b580      	push	{r7, lr}
 80180b2:	b094      	sub	sp, #80	@ 0x50
 80180b4:	af00      	add	r7, sp, #0
 80180b6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80180b8:	687b      	ldr	r3, [r7, #4]
 80180ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80180bc:	64fb      	str	r3, [r7, #76]	@ 0x4c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 80180be:	687b      	ldr	r3, [r7, #4]
 80180c0:	681b      	ldr	r3, [r3, #0]
 80180c2:	681b      	ldr	r3, [r3, #0]
 80180c4:	2220      	movs	r2, #32
 80180c6:	4013      	ands	r3, r2
 80180c8:	d16f      	bne.n	80181aa <UART_DMAReceiveCplt+0xfa>
  {
    huart->RxXferCount = 0U;
 80180ca:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80180cc:	225a      	movs	r2, #90	@ 0x5a
 80180ce:	2100      	movs	r1, #0
 80180d0:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80180d2:	f3ef 8310 	mrs	r3, PRIMASK
 80180d6:	61bb      	str	r3, [r7, #24]
  return(result);
 80180d8:	69bb      	ldr	r3, [r7, #24]

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80180da:	64bb      	str	r3, [r7, #72]	@ 0x48
 80180dc:	2301      	movs	r3, #1
 80180de:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80180e0:	69fb      	ldr	r3, [r7, #28]
 80180e2:	f383 8810 	msr	PRIMASK, r3
}
 80180e6:	46c0      	nop			@ (mov r8, r8)
 80180e8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80180ea:	681b      	ldr	r3, [r3, #0]
 80180ec:	681a      	ldr	r2, [r3, #0]
 80180ee:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80180f0:	681b      	ldr	r3, [r3, #0]
 80180f2:	493b      	ldr	r1, [pc, #236]	@ (80181e0 <UART_DMAReceiveCplt+0x130>)
 80180f4:	400a      	ands	r2, r1
 80180f6:	601a      	str	r2, [r3, #0]
 80180f8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80180fa:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80180fc:	6a3b      	ldr	r3, [r7, #32]
 80180fe:	f383 8810 	msr	PRIMASK, r3
}
 8018102:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8018104:	f3ef 8310 	mrs	r3, PRIMASK
 8018108:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 801810a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801810c:	647b      	str	r3, [r7, #68]	@ 0x44
 801810e:	2301      	movs	r3, #1
 8018110:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018112:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018114:	f383 8810 	msr	PRIMASK, r3
}
 8018118:	46c0      	nop			@ (mov r8, r8)
 801811a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801811c:	681b      	ldr	r3, [r3, #0]
 801811e:	689a      	ldr	r2, [r3, #8]
 8018120:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8018122:	681b      	ldr	r3, [r3, #0]
 8018124:	2101      	movs	r1, #1
 8018126:	438a      	bics	r2, r1
 8018128:	609a      	str	r2, [r3, #8]
 801812a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801812c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801812e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018130:	f383 8810 	msr	PRIMASK, r3
}
 8018134:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8018136:	f3ef 8310 	mrs	r3, PRIMASK
 801813a:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 801813c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801813e:	643b      	str	r3, [r7, #64]	@ 0x40
 8018140:	2301      	movs	r3, #1
 8018142:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018144:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8018146:	f383 8810 	msr	PRIMASK, r3
}
 801814a:	46c0      	nop			@ (mov r8, r8)
 801814c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801814e:	681b      	ldr	r3, [r3, #0]
 8018150:	689a      	ldr	r2, [r3, #8]
 8018152:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8018154:	681b      	ldr	r3, [r3, #0]
 8018156:	2140      	movs	r1, #64	@ 0x40
 8018158:	438a      	bics	r2, r1
 801815a:	609a      	str	r2, [r3, #8]
 801815c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801815e:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018160:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018162:	f383 8810 	msr	PRIMASK, r3
}
 8018166:	46c0      	nop			@ (mov r8, r8)

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8018168:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801816a:	2280      	movs	r2, #128	@ 0x80
 801816c:	2120      	movs	r1, #32
 801816e:	5099      	str	r1, [r3, r2]

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8018170:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8018172:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8018174:	2b01      	cmp	r3, #1
 8018176:	d118      	bne.n	80181aa <UART_DMAReceiveCplt+0xfa>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8018178:	f3ef 8310 	mrs	r3, PRIMASK
 801817c:	60fb      	str	r3, [r7, #12]
  return(result);
 801817e:	68fb      	ldr	r3, [r7, #12]
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8018180:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8018182:	2301      	movs	r3, #1
 8018184:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018186:	693b      	ldr	r3, [r7, #16]
 8018188:	f383 8810 	msr	PRIMASK, r3
}
 801818c:	46c0      	nop			@ (mov r8, r8)
 801818e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8018190:	681b      	ldr	r3, [r3, #0]
 8018192:	681a      	ldr	r2, [r3, #0]
 8018194:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8018196:	681b      	ldr	r3, [r3, #0]
 8018198:	2110      	movs	r1, #16
 801819a:	438a      	bics	r2, r1
 801819c:	601a      	str	r2, [r3, #0]
 801819e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80181a0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80181a2:	697b      	ldr	r3, [r7, #20]
 80181a4:	f383 8810 	msr	PRIMASK, r3
}
 80181a8:	46c0      	nop			@ (mov r8, r8)
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80181aa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80181ac:	2200      	movs	r2, #0
 80181ae:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80181b0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80181b2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80181b4:	2b01      	cmp	r3, #1
 80181b6:	d109      	bne.n	80181cc <UART_DMAReceiveCplt+0x11c>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
 80181b8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80181ba:	22ac      	movs	r2, #172	@ 0xac
 80181bc:	589b      	ldr	r3, [r3, r2]
 80181be:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80181c0:	2158      	movs	r1, #88	@ 0x58
 80181c2:	5a51      	ldrh	r1, [r2, r1]
 80181c4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80181c6:	0010      	movs	r0, r2
 80181c8:	4798      	blx	r3
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80181ca:	e005      	b.n	80181d8 <UART_DMAReceiveCplt+0x128>
    huart->RxCpltCallback(huart);
 80181cc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80181ce:	2294      	movs	r2, #148	@ 0x94
 80181d0:	589b      	ldr	r3, [r3, r2]
 80181d2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80181d4:	0010      	movs	r0, r2
 80181d6:	4798      	blx	r3
}
 80181d8:	46c0      	nop			@ (mov r8, r8)
 80181da:	46bd      	mov	sp, r7
 80181dc:	b014      	add	sp, #80	@ 0x50
 80181de:	bd80      	pop	{r7, pc}
 80181e0:	fffffeff 	.word	0xfffffeff

080181e4 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80181e4:	b580      	push	{r7, lr}
 80181e6:	b084      	sub	sp, #16
 80181e8:	af00      	add	r7, sp, #0
 80181ea:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80181ec:	687b      	ldr	r3, [r7, #4]
 80181ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80181f0:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 80181f2:	68fb      	ldr	r3, [r7, #12]
 80181f4:	2201      	movs	r2, #1
 80181f6:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80181f8:	68fb      	ldr	r3, [r7, #12]
 80181fa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80181fc:	2b01      	cmp	r3, #1
 80181fe:	d10b      	bne.n	8018218 <UART_DMARxHalfCplt+0x34>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
 8018200:	68fb      	ldr	r3, [r7, #12]
 8018202:	22ac      	movs	r2, #172	@ 0xac
 8018204:	589b      	ldr	r3, [r3, r2]
 8018206:	68fa      	ldr	r2, [r7, #12]
 8018208:	2158      	movs	r1, #88	@ 0x58
 801820a:	5a52      	ldrh	r2, [r2, r1]
 801820c:	0852      	lsrs	r2, r2, #1
 801820e:	b291      	uxth	r1, r2
 8018210:	68fa      	ldr	r2, [r7, #12]
 8018212:	0010      	movs	r0, r2
 8018214:	4798      	blx	r3
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8018216:	e005      	b.n	8018224 <UART_DMARxHalfCplt+0x40>
    huart->RxHalfCpltCallback(huart);
 8018218:	68fb      	ldr	r3, [r7, #12]
 801821a:	2290      	movs	r2, #144	@ 0x90
 801821c:	589b      	ldr	r3, [r3, r2]
 801821e:	68fa      	ldr	r2, [r7, #12]
 8018220:	0010      	movs	r0, r2
 8018222:	4798      	blx	r3
}
 8018224:	46c0      	nop			@ (mov r8, r8)
 8018226:	46bd      	mov	sp, r7
 8018228:	b004      	add	sp, #16
 801822a:	bd80      	pop	{r7, pc}

0801822c <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 801822c:	b580      	push	{r7, lr}
 801822e:	b086      	sub	sp, #24
 8018230:	af00      	add	r7, sp, #0
 8018232:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8018234:	687b      	ldr	r3, [r7, #4]
 8018236:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8018238:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 801823a:	697b      	ldr	r3, [r7, #20]
 801823c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801823e:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8018240:	697b      	ldr	r3, [r7, #20]
 8018242:	2280      	movs	r2, #128	@ 0x80
 8018244:	589b      	ldr	r3, [r3, r2]
 8018246:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8018248:	697b      	ldr	r3, [r7, #20]
 801824a:	681b      	ldr	r3, [r3, #0]
 801824c:	689b      	ldr	r3, [r3, #8]
 801824e:	2280      	movs	r2, #128	@ 0x80
 8018250:	4013      	ands	r3, r2
 8018252:	2b80      	cmp	r3, #128	@ 0x80
 8018254:	d10a      	bne.n	801826c <UART_DMAError+0x40>
 8018256:	693b      	ldr	r3, [r7, #16]
 8018258:	2b21      	cmp	r3, #33	@ 0x21
 801825a:	d107      	bne.n	801826c <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 801825c:	697b      	ldr	r3, [r7, #20]
 801825e:	2252      	movs	r2, #82	@ 0x52
 8018260:	2100      	movs	r1, #0
 8018262:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 8018264:	697b      	ldr	r3, [r7, #20]
 8018266:	0018      	movs	r0, r3
 8018268:	f7ff fe3a 	bl	8017ee0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 801826c:	697b      	ldr	r3, [r7, #20]
 801826e:	681b      	ldr	r3, [r3, #0]
 8018270:	689b      	ldr	r3, [r3, #8]
 8018272:	2240      	movs	r2, #64	@ 0x40
 8018274:	4013      	ands	r3, r2
 8018276:	2b40      	cmp	r3, #64	@ 0x40
 8018278:	d10a      	bne.n	8018290 <UART_DMAError+0x64>
 801827a:	68fb      	ldr	r3, [r7, #12]
 801827c:	2b22      	cmp	r3, #34	@ 0x22
 801827e:	d107      	bne.n	8018290 <UART_DMAError+0x64>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8018280:	697b      	ldr	r3, [r7, #20]
 8018282:	225a      	movs	r2, #90	@ 0x5a
 8018284:	2100      	movs	r1, #0
 8018286:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 8018288:	697b      	ldr	r3, [r7, #20]
 801828a:	0018      	movs	r0, r3
 801828c:	f7ff fe4c 	bl	8017f28 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8018290:	697b      	ldr	r3, [r7, #20]
 8018292:	2284      	movs	r2, #132	@ 0x84
 8018294:	589b      	ldr	r3, [r3, r2]
 8018296:	2210      	movs	r2, #16
 8018298:	431a      	orrs	r2, r3
 801829a:	697b      	ldr	r3, [r7, #20]
 801829c:	2184      	movs	r1, #132	@ 0x84
 801829e:	505a      	str	r2, [r3, r1]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 80182a0:	697b      	ldr	r3, [r7, #20]
 80182a2:	2298      	movs	r2, #152	@ 0x98
 80182a4:	589b      	ldr	r3, [r3, r2]
 80182a6:	697a      	ldr	r2, [r7, #20]
 80182a8:	0010      	movs	r0, r2
 80182aa:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80182ac:	46c0      	nop			@ (mov r8, r8)
 80182ae:	46bd      	mov	sp, r7
 80182b0:	b006      	add	sp, #24
 80182b2:	bd80      	pop	{r7, pc}

080182b4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80182b4:	b580      	push	{r7, lr}
 80182b6:	b084      	sub	sp, #16
 80182b8:	af00      	add	r7, sp, #0
 80182ba:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80182bc:	687b      	ldr	r3, [r7, #4]
 80182be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80182c0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80182c2:	68fb      	ldr	r3, [r7, #12]
 80182c4:	225a      	movs	r2, #90	@ 0x5a
 80182c6:	2100      	movs	r1, #0
 80182c8:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 80182ca:	68fb      	ldr	r3, [r7, #12]
 80182cc:	2252      	movs	r2, #82	@ 0x52
 80182ce:	2100      	movs	r1, #0
 80182d0:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 80182d2:	68fb      	ldr	r3, [r7, #12]
 80182d4:	2298      	movs	r2, #152	@ 0x98
 80182d6:	589b      	ldr	r3, [r3, r2]
 80182d8:	68fa      	ldr	r2, [r7, #12]
 80182da:	0010      	movs	r0, r2
 80182dc:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80182de:	46c0      	nop			@ (mov r8, r8)
 80182e0:	46bd      	mov	sp, r7
 80182e2:	b004      	add	sp, #16
 80182e4:	bd80      	pop	{r7, pc}

080182e6 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80182e6:	b580      	push	{r7, lr}
 80182e8:	b086      	sub	sp, #24
 80182ea:	af00      	add	r7, sp, #0
 80182ec:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80182ee:	f3ef 8310 	mrs	r3, PRIMASK
 80182f2:	60bb      	str	r3, [r7, #8]
  return(result);
 80182f4:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80182f6:	617b      	str	r3, [r7, #20]
 80182f8:	2301      	movs	r3, #1
 80182fa:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80182fc:	68fb      	ldr	r3, [r7, #12]
 80182fe:	f383 8810 	msr	PRIMASK, r3
}
 8018302:	46c0      	nop			@ (mov r8, r8)
 8018304:	687b      	ldr	r3, [r7, #4]
 8018306:	681b      	ldr	r3, [r3, #0]
 8018308:	681a      	ldr	r2, [r3, #0]
 801830a:	687b      	ldr	r3, [r7, #4]
 801830c:	681b      	ldr	r3, [r3, #0]
 801830e:	2140      	movs	r1, #64	@ 0x40
 8018310:	438a      	bics	r2, r1
 8018312:	601a      	str	r2, [r3, #0]
 8018314:	697b      	ldr	r3, [r7, #20]
 8018316:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018318:	693b      	ldr	r3, [r7, #16]
 801831a:	f383 8810 	msr	PRIMASK, r3
}
 801831e:	46c0      	nop			@ (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8018320:	687b      	ldr	r3, [r7, #4]
 8018322:	2220      	movs	r2, #32
 8018324:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8018326:	687b      	ldr	r3, [r7, #4]
 8018328:	2200      	movs	r2, #0
 801832a:	66da      	str	r2, [r3, #108]	@ 0x6c

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 801832c:	687b      	ldr	r3, [r7, #4]
 801832e:	228c      	movs	r2, #140	@ 0x8c
 8018330:	589b      	ldr	r3, [r3, r2]
 8018332:	687a      	ldr	r2, [r7, #4]
 8018334:	0010      	movs	r0, r2
 8018336:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8018338:	46c0      	nop			@ (mov r8, r8)
 801833a:	46bd      	mov	sp, r7
 801833c:	b006      	add	sp, #24
 801833e:	bd80      	pop	{r7, pc}

08018340 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8018340:	b580      	push	{r7, lr}
 8018342:	b094      	sub	sp, #80	@ 0x50
 8018344:	af00      	add	r7, sp, #0
 8018346:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8018348:	204e      	movs	r0, #78	@ 0x4e
 801834a:	183b      	adds	r3, r7, r0
 801834c:	687a      	ldr	r2, [r7, #4]
 801834e:	215c      	movs	r1, #92	@ 0x5c
 8018350:	5a52      	ldrh	r2, [r2, r1]
 8018352:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8018354:	687b      	ldr	r3, [r7, #4]
 8018356:	2280      	movs	r2, #128	@ 0x80
 8018358:	589b      	ldr	r3, [r3, r2]
 801835a:	2b22      	cmp	r3, #34	@ 0x22
 801835c:	d000      	beq.n	8018360 <UART_RxISR_8BIT+0x20>
 801835e:	e0c2      	b.n	80184e6 <UART_RxISR_8BIT+0x1a6>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8018360:	687b      	ldr	r3, [r7, #4]
 8018362:	681b      	ldr	r3, [r3, #0]
 8018364:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8018366:	214c      	movs	r1, #76	@ 0x4c
 8018368:	187b      	adds	r3, r7, r1
 801836a:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 801836c:	187b      	adds	r3, r7, r1
 801836e:	881b      	ldrh	r3, [r3, #0]
 8018370:	b2da      	uxtb	r2, r3
 8018372:	183b      	adds	r3, r7, r0
 8018374:	881b      	ldrh	r3, [r3, #0]
 8018376:	b2d9      	uxtb	r1, r3
 8018378:	687b      	ldr	r3, [r7, #4]
 801837a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801837c:	400a      	ands	r2, r1
 801837e:	b2d2      	uxtb	r2, r2
 8018380:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8018382:	687b      	ldr	r3, [r7, #4]
 8018384:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8018386:	1c5a      	adds	r2, r3, #1
 8018388:	687b      	ldr	r3, [r7, #4]
 801838a:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 801838c:	687b      	ldr	r3, [r7, #4]
 801838e:	225a      	movs	r2, #90	@ 0x5a
 8018390:	5a9b      	ldrh	r3, [r3, r2]
 8018392:	b29b      	uxth	r3, r3
 8018394:	3b01      	subs	r3, #1
 8018396:	b299      	uxth	r1, r3
 8018398:	687b      	ldr	r3, [r7, #4]
 801839a:	225a      	movs	r2, #90	@ 0x5a
 801839c:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 801839e:	687b      	ldr	r3, [r7, #4]
 80183a0:	225a      	movs	r2, #90	@ 0x5a
 80183a2:	5a9b      	ldrh	r3, [r3, r2]
 80183a4:	b29b      	uxth	r3, r3
 80183a6:	2b00      	cmp	r3, #0
 80183a8:	d000      	beq.n	80183ac <UART_RxISR_8BIT+0x6c>
 80183aa:	e0a4      	b.n	80184f6 <UART_RxISR_8BIT+0x1b6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80183ac:	f3ef 8310 	mrs	r3, PRIMASK
 80183b0:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 80183b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80183b4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80183b6:	2301      	movs	r3, #1
 80183b8:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80183ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80183bc:	f383 8810 	msr	PRIMASK, r3
}
 80183c0:	46c0      	nop			@ (mov r8, r8)
 80183c2:	687b      	ldr	r3, [r7, #4]
 80183c4:	681b      	ldr	r3, [r3, #0]
 80183c6:	681a      	ldr	r2, [r3, #0]
 80183c8:	687b      	ldr	r3, [r7, #4]
 80183ca:	681b      	ldr	r3, [r3, #0]
 80183cc:	494c      	ldr	r1, [pc, #304]	@ (8018500 <UART_RxISR_8BIT+0x1c0>)
 80183ce:	400a      	ands	r2, r1
 80183d0:	601a      	str	r2, [r3, #0]
 80183d2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80183d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80183d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80183d8:	f383 8810 	msr	PRIMASK, r3
}
 80183dc:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80183de:	f3ef 8310 	mrs	r3, PRIMASK
 80183e2:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 80183e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80183e6:	647b      	str	r3, [r7, #68]	@ 0x44
 80183e8:	2301      	movs	r3, #1
 80183ea:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80183ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80183ee:	f383 8810 	msr	PRIMASK, r3
}
 80183f2:	46c0      	nop			@ (mov r8, r8)
 80183f4:	687b      	ldr	r3, [r7, #4]
 80183f6:	681b      	ldr	r3, [r3, #0]
 80183f8:	689a      	ldr	r2, [r3, #8]
 80183fa:	687b      	ldr	r3, [r7, #4]
 80183fc:	681b      	ldr	r3, [r3, #0]
 80183fe:	2101      	movs	r1, #1
 8018400:	438a      	bics	r2, r1
 8018402:	609a      	str	r2, [r3, #8]
 8018404:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8018406:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018408:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801840a:	f383 8810 	msr	PRIMASK, r3
}
 801840e:	46c0      	nop			@ (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8018410:	687b      	ldr	r3, [r7, #4]
 8018412:	2280      	movs	r2, #128	@ 0x80
 8018414:	2120      	movs	r1, #32
 8018416:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8018418:	687b      	ldr	r3, [r7, #4]
 801841a:	2200      	movs	r2, #0
 801841c:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 801841e:	687b      	ldr	r3, [r7, #4]
 8018420:	2200      	movs	r2, #0
 8018422:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8018424:	687b      	ldr	r3, [r7, #4]
 8018426:	681b      	ldr	r3, [r3, #0]
 8018428:	4a36      	ldr	r2, [pc, #216]	@ (8018504 <UART_RxISR_8BIT+0x1c4>)
 801842a:	4293      	cmp	r3, r2
 801842c:	d01f      	beq.n	801846e <UART_RxISR_8BIT+0x12e>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 801842e:	687b      	ldr	r3, [r7, #4]
 8018430:	681b      	ldr	r3, [r3, #0]
 8018432:	685a      	ldr	r2, [r3, #4]
 8018434:	2380      	movs	r3, #128	@ 0x80
 8018436:	041b      	lsls	r3, r3, #16
 8018438:	4013      	ands	r3, r2
 801843a:	d018      	beq.n	801846e <UART_RxISR_8BIT+0x12e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801843c:	f3ef 8310 	mrs	r3, PRIMASK
 8018440:	61bb      	str	r3, [r7, #24]
  return(result);
 8018442:	69bb      	ldr	r3, [r7, #24]
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8018444:	643b      	str	r3, [r7, #64]	@ 0x40
 8018446:	2301      	movs	r3, #1
 8018448:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801844a:	69fb      	ldr	r3, [r7, #28]
 801844c:	f383 8810 	msr	PRIMASK, r3
}
 8018450:	46c0      	nop			@ (mov r8, r8)
 8018452:	687b      	ldr	r3, [r7, #4]
 8018454:	681b      	ldr	r3, [r3, #0]
 8018456:	681a      	ldr	r2, [r3, #0]
 8018458:	687b      	ldr	r3, [r7, #4]
 801845a:	681b      	ldr	r3, [r3, #0]
 801845c:	492a      	ldr	r1, [pc, #168]	@ (8018508 <UART_RxISR_8BIT+0x1c8>)
 801845e:	400a      	ands	r2, r1
 8018460:	601a      	str	r2, [r3, #0]
 8018462:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8018464:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018466:	6a3b      	ldr	r3, [r7, #32]
 8018468:	f383 8810 	msr	PRIMASK, r3
}
 801846c:	46c0      	nop			@ (mov r8, r8)
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801846e:	687b      	ldr	r3, [r7, #4]
 8018470:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8018472:	2b01      	cmp	r3, #1
 8018474:	d130      	bne.n	80184d8 <UART_RxISR_8BIT+0x198>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8018476:	687b      	ldr	r3, [r7, #4]
 8018478:	2200      	movs	r2, #0
 801847a:	661a      	str	r2, [r3, #96]	@ 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801847c:	f3ef 8310 	mrs	r3, PRIMASK
 8018480:	60fb      	str	r3, [r7, #12]
  return(result);
 8018482:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8018484:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8018486:	2301      	movs	r3, #1
 8018488:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801848a:	693b      	ldr	r3, [r7, #16]
 801848c:	f383 8810 	msr	PRIMASK, r3
}
 8018490:	46c0      	nop			@ (mov r8, r8)
 8018492:	687b      	ldr	r3, [r7, #4]
 8018494:	681b      	ldr	r3, [r3, #0]
 8018496:	681a      	ldr	r2, [r3, #0]
 8018498:	687b      	ldr	r3, [r7, #4]
 801849a:	681b      	ldr	r3, [r3, #0]
 801849c:	2110      	movs	r1, #16
 801849e:	438a      	bics	r2, r1
 80184a0:	601a      	str	r2, [r3, #0]
 80184a2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80184a4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80184a6:	697b      	ldr	r3, [r7, #20]
 80184a8:	f383 8810 	msr	PRIMASK, r3
}
 80184ac:	46c0      	nop			@ (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80184ae:	687b      	ldr	r3, [r7, #4]
 80184b0:	681b      	ldr	r3, [r3, #0]
 80184b2:	69db      	ldr	r3, [r3, #28]
 80184b4:	2210      	movs	r2, #16
 80184b6:	4013      	ands	r3, r2
 80184b8:	2b10      	cmp	r3, #16
 80184ba:	d103      	bne.n	80184c4 <UART_RxISR_8BIT+0x184>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80184bc:	687b      	ldr	r3, [r7, #4]
 80184be:	681b      	ldr	r3, [r3, #0]
 80184c0:	2210      	movs	r2, #16
 80184c2:	621a      	str	r2, [r3, #32]
        }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
 80184c4:	687b      	ldr	r3, [r7, #4]
 80184c6:	22ac      	movs	r2, #172	@ 0xac
 80184c8:	589b      	ldr	r3, [r3, r2]
 80184ca:	687a      	ldr	r2, [r7, #4]
 80184cc:	2158      	movs	r1, #88	@ 0x58
 80184ce:	5a51      	ldrh	r1, [r2, r1]
 80184d0:	687a      	ldr	r2, [r7, #4]
 80184d2:	0010      	movs	r0, r2
 80184d4:	4798      	blx	r3
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80184d6:	e00e      	b.n	80184f6 <UART_RxISR_8BIT+0x1b6>
        huart->RxCpltCallback(huart);
 80184d8:	687b      	ldr	r3, [r7, #4]
 80184da:	2294      	movs	r2, #148	@ 0x94
 80184dc:	589b      	ldr	r3, [r3, r2]
 80184de:	687a      	ldr	r2, [r7, #4]
 80184e0:	0010      	movs	r0, r2
 80184e2:	4798      	blx	r3
}
 80184e4:	e007      	b.n	80184f6 <UART_RxISR_8BIT+0x1b6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80184e6:	687b      	ldr	r3, [r7, #4]
 80184e8:	681b      	ldr	r3, [r3, #0]
 80184ea:	699a      	ldr	r2, [r3, #24]
 80184ec:	687b      	ldr	r3, [r7, #4]
 80184ee:	681b      	ldr	r3, [r3, #0]
 80184f0:	2108      	movs	r1, #8
 80184f2:	430a      	orrs	r2, r1
 80184f4:	619a      	str	r2, [r3, #24]
}
 80184f6:	46c0      	nop			@ (mov r8, r8)
 80184f8:	46bd      	mov	sp, r7
 80184fa:	b014      	add	sp, #80	@ 0x50
 80184fc:	bd80      	pop	{r7, pc}
 80184fe:	46c0      	nop			@ (mov r8, r8)
 8018500:	fffffedf 	.word	0xfffffedf
 8018504:	40004800 	.word	0x40004800
 8018508:	fbffffff 	.word	0xfbffffff

0801850c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 801850c:	b580      	push	{r7, lr}
 801850e:	b094      	sub	sp, #80	@ 0x50
 8018510:	af00      	add	r7, sp, #0
 8018512:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8018514:	204e      	movs	r0, #78	@ 0x4e
 8018516:	183b      	adds	r3, r7, r0
 8018518:	687a      	ldr	r2, [r7, #4]
 801851a:	215c      	movs	r1, #92	@ 0x5c
 801851c:	5a52      	ldrh	r2, [r2, r1]
 801851e:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8018520:	687b      	ldr	r3, [r7, #4]
 8018522:	2280      	movs	r2, #128	@ 0x80
 8018524:	589b      	ldr	r3, [r3, r2]
 8018526:	2b22      	cmp	r3, #34	@ 0x22
 8018528:	d000      	beq.n	801852c <UART_RxISR_16BIT+0x20>
 801852a:	e0c2      	b.n	80186b2 <UART_RxISR_16BIT+0x1a6>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 801852c:	687b      	ldr	r3, [r7, #4]
 801852e:	681b      	ldr	r3, [r3, #0]
 8018530:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8018532:	214c      	movs	r1, #76	@ 0x4c
 8018534:	187b      	adds	r3, r7, r1
 8018536:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8018538:	687b      	ldr	r3, [r7, #4]
 801853a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801853c:	64bb      	str	r3, [r7, #72]	@ 0x48
    *tmp = (uint16_t)(uhdata & uhMask);
 801853e:	187b      	adds	r3, r7, r1
 8018540:	183a      	adds	r2, r7, r0
 8018542:	881b      	ldrh	r3, [r3, #0]
 8018544:	8812      	ldrh	r2, [r2, #0]
 8018546:	4013      	ands	r3, r2
 8018548:	b29a      	uxth	r2, r3
 801854a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801854c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 801854e:	687b      	ldr	r3, [r7, #4]
 8018550:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8018552:	1c9a      	adds	r2, r3, #2
 8018554:	687b      	ldr	r3, [r7, #4]
 8018556:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8018558:	687b      	ldr	r3, [r7, #4]
 801855a:	225a      	movs	r2, #90	@ 0x5a
 801855c:	5a9b      	ldrh	r3, [r3, r2]
 801855e:	b29b      	uxth	r3, r3
 8018560:	3b01      	subs	r3, #1
 8018562:	b299      	uxth	r1, r3
 8018564:	687b      	ldr	r3, [r7, #4]
 8018566:	225a      	movs	r2, #90	@ 0x5a
 8018568:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 801856a:	687b      	ldr	r3, [r7, #4]
 801856c:	225a      	movs	r2, #90	@ 0x5a
 801856e:	5a9b      	ldrh	r3, [r3, r2]
 8018570:	b29b      	uxth	r3, r3
 8018572:	2b00      	cmp	r3, #0
 8018574:	d000      	beq.n	8018578 <UART_RxISR_16BIT+0x6c>
 8018576:	e0a4      	b.n	80186c2 <UART_RxISR_16BIT+0x1b6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8018578:	f3ef 8310 	mrs	r3, PRIMASK
 801857c:	623b      	str	r3, [r7, #32]
  return(result);
 801857e:	6a3b      	ldr	r3, [r7, #32]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8018580:	647b      	str	r3, [r7, #68]	@ 0x44
 8018582:	2301      	movs	r3, #1
 8018584:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018586:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018588:	f383 8810 	msr	PRIMASK, r3
}
 801858c:	46c0      	nop			@ (mov r8, r8)
 801858e:	687b      	ldr	r3, [r7, #4]
 8018590:	681b      	ldr	r3, [r3, #0]
 8018592:	681a      	ldr	r2, [r3, #0]
 8018594:	687b      	ldr	r3, [r7, #4]
 8018596:	681b      	ldr	r3, [r3, #0]
 8018598:	494c      	ldr	r1, [pc, #304]	@ (80186cc <UART_RxISR_16BIT+0x1c0>)
 801859a:	400a      	ands	r2, r1
 801859c:	601a      	str	r2, [r3, #0]
 801859e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80185a0:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80185a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80185a4:	f383 8810 	msr	PRIMASK, r3
}
 80185a8:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80185aa:	f3ef 8310 	mrs	r3, PRIMASK
 80185ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return(result);
 80185b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80185b2:	643b      	str	r3, [r7, #64]	@ 0x40
 80185b4:	2301      	movs	r3, #1
 80185b6:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80185b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80185ba:	f383 8810 	msr	PRIMASK, r3
}
 80185be:	46c0      	nop			@ (mov r8, r8)
 80185c0:	687b      	ldr	r3, [r7, #4]
 80185c2:	681b      	ldr	r3, [r3, #0]
 80185c4:	689a      	ldr	r2, [r3, #8]
 80185c6:	687b      	ldr	r3, [r7, #4]
 80185c8:	681b      	ldr	r3, [r3, #0]
 80185ca:	2101      	movs	r1, #1
 80185cc:	438a      	bics	r2, r1
 80185ce:	609a      	str	r2, [r3, #8]
 80185d0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80185d2:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80185d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80185d6:	f383 8810 	msr	PRIMASK, r3
}
 80185da:	46c0      	nop			@ (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80185dc:	687b      	ldr	r3, [r7, #4]
 80185de:	2280      	movs	r2, #128	@ 0x80
 80185e0:	2120      	movs	r1, #32
 80185e2:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80185e4:	687b      	ldr	r3, [r7, #4]
 80185e6:	2200      	movs	r2, #0
 80185e8:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80185ea:	687b      	ldr	r3, [r7, #4]
 80185ec:	2200      	movs	r2, #0
 80185ee:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80185f0:	687b      	ldr	r3, [r7, #4]
 80185f2:	681b      	ldr	r3, [r3, #0]
 80185f4:	4a36      	ldr	r2, [pc, #216]	@ (80186d0 <UART_RxISR_16BIT+0x1c4>)
 80185f6:	4293      	cmp	r3, r2
 80185f8:	d01f      	beq.n	801863a <UART_RxISR_16BIT+0x12e>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80185fa:	687b      	ldr	r3, [r7, #4]
 80185fc:	681b      	ldr	r3, [r3, #0]
 80185fe:	685a      	ldr	r2, [r3, #4]
 8018600:	2380      	movs	r3, #128	@ 0x80
 8018602:	041b      	lsls	r3, r3, #16
 8018604:	4013      	ands	r3, r2
 8018606:	d018      	beq.n	801863a <UART_RxISR_16BIT+0x12e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8018608:	f3ef 8310 	mrs	r3, PRIMASK
 801860c:	617b      	str	r3, [r7, #20]
  return(result);
 801860e:	697b      	ldr	r3, [r7, #20]
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8018610:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8018612:	2301      	movs	r3, #1
 8018614:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018616:	69bb      	ldr	r3, [r7, #24]
 8018618:	f383 8810 	msr	PRIMASK, r3
}
 801861c:	46c0      	nop			@ (mov r8, r8)
 801861e:	687b      	ldr	r3, [r7, #4]
 8018620:	681b      	ldr	r3, [r3, #0]
 8018622:	681a      	ldr	r2, [r3, #0]
 8018624:	687b      	ldr	r3, [r7, #4]
 8018626:	681b      	ldr	r3, [r3, #0]
 8018628:	492a      	ldr	r1, [pc, #168]	@ (80186d4 <UART_RxISR_16BIT+0x1c8>)
 801862a:	400a      	ands	r2, r1
 801862c:	601a      	str	r2, [r3, #0]
 801862e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8018630:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018632:	69fb      	ldr	r3, [r7, #28]
 8018634:	f383 8810 	msr	PRIMASK, r3
}
 8018638:	46c0      	nop			@ (mov r8, r8)
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801863a:	687b      	ldr	r3, [r7, #4]
 801863c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801863e:	2b01      	cmp	r3, #1
 8018640:	d130      	bne.n	80186a4 <UART_RxISR_16BIT+0x198>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8018642:	687b      	ldr	r3, [r7, #4]
 8018644:	2200      	movs	r2, #0
 8018646:	661a      	str	r2, [r3, #96]	@ 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8018648:	f3ef 8310 	mrs	r3, PRIMASK
 801864c:	60bb      	str	r3, [r7, #8]
  return(result);
 801864e:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8018650:	63bb      	str	r3, [r7, #56]	@ 0x38
 8018652:	2301      	movs	r3, #1
 8018654:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018656:	68fb      	ldr	r3, [r7, #12]
 8018658:	f383 8810 	msr	PRIMASK, r3
}
 801865c:	46c0      	nop			@ (mov r8, r8)
 801865e:	687b      	ldr	r3, [r7, #4]
 8018660:	681b      	ldr	r3, [r3, #0]
 8018662:	681a      	ldr	r2, [r3, #0]
 8018664:	687b      	ldr	r3, [r7, #4]
 8018666:	681b      	ldr	r3, [r3, #0]
 8018668:	2110      	movs	r1, #16
 801866a:	438a      	bics	r2, r1
 801866c:	601a      	str	r2, [r3, #0]
 801866e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018670:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018672:	693b      	ldr	r3, [r7, #16]
 8018674:	f383 8810 	msr	PRIMASK, r3
}
 8018678:	46c0      	nop			@ (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 801867a:	687b      	ldr	r3, [r7, #4]
 801867c:	681b      	ldr	r3, [r3, #0]
 801867e:	69db      	ldr	r3, [r3, #28]
 8018680:	2210      	movs	r2, #16
 8018682:	4013      	ands	r3, r2
 8018684:	2b10      	cmp	r3, #16
 8018686:	d103      	bne.n	8018690 <UART_RxISR_16BIT+0x184>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8018688:	687b      	ldr	r3, [r7, #4]
 801868a:	681b      	ldr	r3, [r3, #0]
 801868c:	2210      	movs	r2, #16
 801868e:	621a      	str	r2, [r3, #32]
        }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
 8018690:	687b      	ldr	r3, [r7, #4]
 8018692:	22ac      	movs	r2, #172	@ 0xac
 8018694:	589b      	ldr	r3, [r3, r2]
 8018696:	687a      	ldr	r2, [r7, #4]
 8018698:	2158      	movs	r1, #88	@ 0x58
 801869a:	5a51      	ldrh	r1, [r2, r1]
 801869c:	687a      	ldr	r2, [r7, #4]
 801869e:	0010      	movs	r0, r2
 80186a0:	4798      	blx	r3
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80186a2:	e00e      	b.n	80186c2 <UART_RxISR_16BIT+0x1b6>
        huart->RxCpltCallback(huart);
 80186a4:	687b      	ldr	r3, [r7, #4]
 80186a6:	2294      	movs	r2, #148	@ 0x94
 80186a8:	589b      	ldr	r3, [r3, r2]
 80186aa:	687a      	ldr	r2, [r7, #4]
 80186ac:	0010      	movs	r0, r2
 80186ae:	4798      	blx	r3
}
 80186b0:	e007      	b.n	80186c2 <UART_RxISR_16BIT+0x1b6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80186b2:	687b      	ldr	r3, [r7, #4]
 80186b4:	681b      	ldr	r3, [r3, #0]
 80186b6:	699a      	ldr	r2, [r3, #24]
 80186b8:	687b      	ldr	r3, [r7, #4]
 80186ba:	681b      	ldr	r3, [r3, #0]
 80186bc:	2108      	movs	r1, #8
 80186be:	430a      	orrs	r2, r1
 80186c0:	619a      	str	r2, [r3, #24]
}
 80186c2:	46c0      	nop			@ (mov r8, r8)
 80186c4:	46bd      	mov	sp, r7
 80186c6:	b014      	add	sp, #80	@ 0x50
 80186c8:	bd80      	pop	{r7, pc}
 80186ca:	46c0      	nop			@ (mov r8, r8)
 80186cc:	fffffedf 	.word	0xfffffedf
 80186d0:	40004800 	.word	0x40004800
 80186d4:	fbffffff 	.word	0xfbffffff

080186d8 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80186d8:	b580      	push	{r7, lr}
 80186da:	b082      	sub	sp, #8
 80186dc:	af00      	add	r7, sp, #0
 80186de:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80186e0:	46c0      	nop			@ (mov r8, r8)
 80186e2:	46bd      	mov	sp, r7
 80186e4:	b002      	add	sp, #8
 80186e6:	bd80      	pop	{r7, pc}

080186e8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 80186e8:	b580      	push	{r7, lr}
 80186ea:	b084      	sub	sp, #16
 80186ec:	af00      	add	r7, sp, #0
 80186ee:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80186f0:	687b      	ldr	r3, [r7, #4]
 80186f2:	2244      	movs	r2, #68	@ 0x44
 80186f4:	2100      	movs	r1, #0
 80186f6:	5299      	strh	r1, [r3, r2]

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80186f8:	4b05      	ldr	r3, [pc, #20]	@ (8018710 <USB_EnableGlobalInt+0x28>)
 80186fa:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 80186fc:	68fb      	ldr	r3, [r7, #12]
 80186fe:	b299      	uxth	r1, r3
 8018700:	687b      	ldr	r3, [r7, #4]
 8018702:	2240      	movs	r2, #64	@ 0x40
 8018704:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8018706:	2300      	movs	r3, #0
}
 8018708:	0018      	movs	r0, r3
 801870a:	46bd      	mov	sp, r7
 801870c:	b004      	add	sp, #16
 801870e:	bd80      	pop	{r7, pc}
 8018710:	0000bf80 	.word	0x0000bf80

08018714 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8018714:	b580      	push	{r7, lr}
 8018716:	b084      	sub	sp, #16
 8018718:	af00      	add	r7, sp, #0
 801871a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 801871c:	4b09      	ldr	r3, [pc, #36]	@ (8018744 <USB_DisableGlobalInt+0x30>)
 801871e:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8018720:	687b      	ldr	r3, [r7, #4]
 8018722:	2240      	movs	r2, #64	@ 0x40
 8018724:	5a9b      	ldrh	r3, [r3, r2]
 8018726:	b29b      	uxth	r3, r3
 8018728:	68fa      	ldr	r2, [r7, #12]
 801872a:	b292      	uxth	r2, r2
 801872c:	43d2      	mvns	r2, r2
 801872e:	b292      	uxth	r2, r2
 8018730:	4013      	ands	r3, r2
 8018732:	b299      	uxth	r1, r3
 8018734:	687b      	ldr	r3, [r7, #4]
 8018736:	2240      	movs	r2, #64	@ 0x40
 8018738:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 801873a:	2300      	movs	r3, #0
}
 801873c:	0018      	movs	r0, r3
 801873e:	46bd      	mov	sp, r7
 8018740:	b004      	add	sp, #16
 8018742:	bd80      	pop	{r7, pc}
 8018744:	0000bf80 	.word	0x0000bf80

08018748 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8018748:	b084      	sub	sp, #16
 801874a:	b590      	push	{r4, r7, lr}
 801874c:	b083      	sub	sp, #12
 801874e:	af00      	add	r7, sp, #0
 8018750:	6078      	str	r0, [r7, #4]
 8018752:	2004      	movs	r0, #4
 8018754:	2410      	movs	r4, #16
 8018756:	1900      	adds	r0, r0, r4
 8018758:	2408      	movs	r4, #8
 801875a:	46a4      	mov	ip, r4
 801875c:	44bc      	add	ip, r7
 801875e:	4460      	add	r0, ip
 8018760:	6001      	str	r1, [r0, #0]
 8018762:	6042      	str	r2, [r0, #4]
 8018764:	6083      	str	r3, [r0, #8]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8018766:	687b      	ldr	r3, [r7, #4]
 8018768:	2240      	movs	r2, #64	@ 0x40
 801876a:	2101      	movs	r1, #1
 801876c:	5299      	strh	r1, [r3, r2]

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 801876e:	687b      	ldr	r3, [r7, #4]
 8018770:	2240      	movs	r2, #64	@ 0x40
 8018772:	2100      	movs	r1, #0
 8018774:	5299      	strh	r1, [r3, r2]

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8018776:	687b      	ldr	r3, [r7, #4]
 8018778:	2244      	movs	r2, #68	@ 0x44
 801877a:	2100      	movs	r1, #0
 801877c:	5299      	strh	r1, [r3, r2]

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 801877e:	687b      	ldr	r3, [r7, #4]
 8018780:	2250      	movs	r2, #80	@ 0x50
 8018782:	2100      	movs	r1, #0
 8018784:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8018786:	2300      	movs	r3, #0
}
 8018788:	0018      	movs	r0, r3
 801878a:	46bd      	mov	sp, r7
 801878c:	b003      	add	sp, #12
 801878e:	bc90      	pop	{r4, r7}
 8018790:	bc08      	pop	{r3}
 8018792:	b004      	add	sp, #16
 8018794:	4718      	bx	r3
	...

08018798 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8018798:	b580      	push	{r7, lr}
 801879a:	b09c      	sub	sp, #112	@ 0x70
 801879c:	af00      	add	r7, sp, #0
 801879e:	6078      	str	r0, [r7, #4]
 80187a0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 80187a2:	236f      	movs	r3, #111	@ 0x6f
 80187a4:	18fb      	adds	r3, r7, r3
 80187a6:	2200      	movs	r2, #0
 80187a8:	701a      	strb	r2, [r3, #0]
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80187aa:	687a      	ldr	r2, [r7, #4]
 80187ac:	683b      	ldr	r3, [r7, #0]
 80187ae:	781b      	ldrb	r3, [r3, #0]
 80187b0:	009b      	lsls	r3, r3, #2
 80187b2:	18d3      	adds	r3, r2, r3
 80187b4:	881b      	ldrh	r3, [r3, #0]
 80187b6:	b29a      	uxth	r2, r3
 80187b8:	236c      	movs	r3, #108	@ 0x6c
 80187ba:	18fb      	adds	r3, r7, r3
 80187bc:	49a3      	ldr	r1, [pc, #652]	@ (8018a4c <USB_ActivateEndpoint+0x2b4>)
 80187be:	400a      	ands	r2, r1
 80187c0:	801a      	strh	r2, [r3, #0]

  /* initialize Endpoint */
  switch (ep->type)
 80187c2:	683b      	ldr	r3, [r7, #0]
 80187c4:	78db      	ldrb	r3, [r3, #3]
 80187c6:	2b03      	cmp	r3, #3
 80187c8:	d017      	beq.n	80187fa <USB_ActivateEndpoint+0x62>
 80187ca:	dc28      	bgt.n	801881e <USB_ActivateEndpoint+0x86>
 80187cc:	2b02      	cmp	r3, #2
 80187ce:	d00e      	beq.n	80187ee <USB_ActivateEndpoint+0x56>
 80187d0:	dc25      	bgt.n	801881e <USB_ActivateEndpoint+0x86>
 80187d2:	2b00      	cmp	r3, #0
 80187d4:	d002      	beq.n	80187dc <USB_ActivateEndpoint+0x44>
 80187d6:	2b01      	cmp	r3, #1
 80187d8:	d018      	beq.n	801880c <USB_ActivateEndpoint+0x74>
 80187da:	e020      	b.n	801881e <USB_ActivateEndpoint+0x86>
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 80187dc:	226c      	movs	r2, #108	@ 0x6c
 80187de:	18bb      	adds	r3, r7, r2
 80187e0:	18ba      	adds	r2, r7, r2
 80187e2:	8812      	ldrh	r2, [r2, #0]
 80187e4:	2180      	movs	r1, #128	@ 0x80
 80187e6:	0089      	lsls	r1, r1, #2
 80187e8:	430a      	orrs	r2, r1
 80187ea:	801a      	strh	r2, [r3, #0]
      break;
 80187ec:	e01c      	b.n	8018828 <USB_ActivateEndpoint+0x90>

    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
 80187ee:	226c      	movs	r2, #108	@ 0x6c
 80187f0:	18bb      	adds	r3, r7, r2
 80187f2:	18ba      	adds	r2, r7, r2
 80187f4:	8812      	ldrh	r2, [r2, #0]
 80187f6:	801a      	strh	r2, [r3, #0]
      break;
 80187f8:	e016      	b.n	8018828 <USB_ActivateEndpoint+0x90>

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 80187fa:	226c      	movs	r2, #108	@ 0x6c
 80187fc:	18bb      	adds	r3, r7, r2
 80187fe:	18ba      	adds	r2, r7, r2
 8018800:	8812      	ldrh	r2, [r2, #0]
 8018802:	21c0      	movs	r1, #192	@ 0xc0
 8018804:	00c9      	lsls	r1, r1, #3
 8018806:	430a      	orrs	r2, r1
 8018808:	801a      	strh	r2, [r3, #0]
      break;
 801880a:	e00d      	b.n	8018828 <USB_ActivateEndpoint+0x90>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 801880c:	226c      	movs	r2, #108	@ 0x6c
 801880e:	18bb      	adds	r3, r7, r2
 8018810:	18ba      	adds	r2, r7, r2
 8018812:	8812      	ldrh	r2, [r2, #0]
 8018814:	2180      	movs	r1, #128	@ 0x80
 8018816:	00c9      	lsls	r1, r1, #3
 8018818:	430a      	orrs	r2, r1
 801881a:	801a      	strh	r2, [r3, #0]
      break;
 801881c:	e004      	b.n	8018828 <USB_ActivateEndpoint+0x90>

    default:
      ret = HAL_ERROR;
 801881e:	236f      	movs	r3, #111	@ 0x6f
 8018820:	18fb      	adds	r3, r7, r3
 8018822:	2201      	movs	r2, #1
 8018824:	701a      	strb	r2, [r3, #0]
      break;
 8018826:	46c0      	nop			@ (mov r8, r8)
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8018828:	687a      	ldr	r2, [r7, #4]
 801882a:	683b      	ldr	r3, [r7, #0]
 801882c:	781b      	ldrb	r3, [r3, #0]
 801882e:	009b      	lsls	r3, r3, #2
 8018830:	18d3      	adds	r3, r2, r3
 8018832:	226c      	movs	r2, #108	@ 0x6c
 8018834:	18ba      	adds	r2, r7, r2
 8018836:	8812      	ldrh	r2, [r2, #0]
 8018838:	4985      	ldr	r1, [pc, #532]	@ (8018a50 <USB_ActivateEndpoint+0x2b8>)
 801883a:	430a      	orrs	r2, r1
 801883c:	b292      	uxth	r2, r2
 801883e:	801a      	strh	r2, [r3, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8018840:	687a      	ldr	r2, [r7, #4]
 8018842:	683b      	ldr	r3, [r7, #0]
 8018844:	781b      	ldrb	r3, [r3, #0]
 8018846:	009b      	lsls	r3, r3, #2
 8018848:	18d3      	adds	r3, r2, r3
 801884a:	881b      	ldrh	r3, [r3, #0]
 801884c:	b29b      	uxth	r3, r3
 801884e:	b21b      	sxth	r3, r3
 8018850:	4a80      	ldr	r2, [pc, #512]	@ (8018a54 <USB_ActivateEndpoint+0x2bc>)
 8018852:	4013      	ands	r3, r2
 8018854:	b21a      	sxth	r2, r3
 8018856:	683b      	ldr	r3, [r7, #0]
 8018858:	781b      	ldrb	r3, [r3, #0]
 801885a:	b21b      	sxth	r3, r3
 801885c:	4313      	orrs	r3, r2
 801885e:	b21a      	sxth	r2, r3
 8018860:	2166      	movs	r1, #102	@ 0x66
 8018862:	187b      	adds	r3, r7, r1
 8018864:	801a      	strh	r2, [r3, #0]
 8018866:	687a      	ldr	r2, [r7, #4]
 8018868:	683b      	ldr	r3, [r7, #0]
 801886a:	781b      	ldrb	r3, [r3, #0]
 801886c:	009b      	lsls	r3, r3, #2
 801886e:	18d3      	adds	r3, r2, r3
 8018870:	187a      	adds	r2, r7, r1
 8018872:	8812      	ldrh	r2, [r2, #0]
 8018874:	4976      	ldr	r1, [pc, #472]	@ (8018a50 <USB_ActivateEndpoint+0x2b8>)
 8018876:	430a      	orrs	r2, r1
 8018878:	b292      	uxth	r2, r2
 801887a:	801a      	strh	r2, [r3, #0]

  if (ep->doublebuffer == 0U)
 801887c:	683b      	ldr	r3, [r7, #0]
 801887e:	7b1b      	ldrb	r3, [r3, #12]
 8018880:	2b00      	cmp	r3, #0
 8018882:	d000      	beq.n	8018886 <USB_ActivateEndpoint+0xee>
 8018884:	e178      	b.n	8018b78 <USB_ActivateEndpoint+0x3e0>
  {
    if (ep->is_in != 0U)
 8018886:	683b      	ldr	r3, [r7, #0]
 8018888:	785b      	ldrb	r3, [r3, #1]
 801888a:	2b00      	cmp	r3, #0
 801888c:	d100      	bne.n	8018890 <USB_ActivateEndpoint+0xf8>
 801888e:	e07a      	b.n	8018986 <USB_ActivateEndpoint+0x1ee>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8018890:	687b      	ldr	r3, [r7, #4]
 8018892:	61bb      	str	r3, [r7, #24]
 8018894:	687b      	ldr	r3, [r7, #4]
 8018896:	2250      	movs	r2, #80	@ 0x50
 8018898:	5a9b      	ldrh	r3, [r3, r2]
 801889a:	b29b      	uxth	r3, r3
 801889c:	001a      	movs	r2, r3
 801889e:	69bb      	ldr	r3, [r7, #24]
 80188a0:	189b      	adds	r3, r3, r2
 80188a2:	61bb      	str	r3, [r7, #24]
 80188a4:	683b      	ldr	r3, [r7, #0]
 80188a6:	781b      	ldrb	r3, [r3, #0]
 80188a8:	00da      	lsls	r2, r3, #3
 80188aa:	69bb      	ldr	r3, [r7, #24]
 80188ac:	18d3      	adds	r3, r2, r3
 80188ae:	2280      	movs	r2, #128	@ 0x80
 80188b0:	00d2      	lsls	r2, r2, #3
 80188b2:	4694      	mov	ip, r2
 80188b4:	4463      	add	r3, ip
 80188b6:	617b      	str	r3, [r7, #20]
 80188b8:	683b      	ldr	r3, [r7, #0]
 80188ba:	88db      	ldrh	r3, [r3, #6]
 80188bc:	085b      	lsrs	r3, r3, #1
 80188be:	b29b      	uxth	r3, r3
 80188c0:	18db      	adds	r3, r3, r3
 80188c2:	b29a      	uxth	r2, r3
 80188c4:	697b      	ldr	r3, [r7, #20]
 80188c6:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80188c8:	687a      	ldr	r2, [r7, #4]
 80188ca:	683b      	ldr	r3, [r7, #0]
 80188cc:	781b      	ldrb	r3, [r3, #0]
 80188ce:	009b      	lsls	r3, r3, #2
 80188d0:	18d2      	adds	r2, r2, r3
 80188d2:	2112      	movs	r1, #18
 80188d4:	187b      	adds	r3, r7, r1
 80188d6:	8812      	ldrh	r2, [r2, #0]
 80188d8:	801a      	strh	r2, [r3, #0]
 80188da:	187b      	adds	r3, r7, r1
 80188dc:	881b      	ldrh	r3, [r3, #0]
 80188de:	2240      	movs	r2, #64	@ 0x40
 80188e0:	4013      	ands	r3, r2
 80188e2:	d016      	beq.n	8018912 <USB_ActivateEndpoint+0x17a>
 80188e4:	687a      	ldr	r2, [r7, #4]
 80188e6:	683b      	ldr	r3, [r7, #0]
 80188e8:	781b      	ldrb	r3, [r3, #0]
 80188ea:	009b      	lsls	r3, r3, #2
 80188ec:	18d3      	adds	r3, r2, r3
 80188ee:	881b      	ldrh	r3, [r3, #0]
 80188f0:	b29a      	uxth	r2, r3
 80188f2:	2010      	movs	r0, #16
 80188f4:	183b      	adds	r3, r7, r0
 80188f6:	4957      	ldr	r1, [pc, #348]	@ (8018a54 <USB_ActivateEndpoint+0x2bc>)
 80188f8:	400a      	ands	r2, r1
 80188fa:	801a      	strh	r2, [r3, #0]
 80188fc:	687a      	ldr	r2, [r7, #4]
 80188fe:	683b      	ldr	r3, [r7, #0]
 8018900:	781b      	ldrb	r3, [r3, #0]
 8018902:	009b      	lsls	r3, r3, #2
 8018904:	18d3      	adds	r3, r2, r3
 8018906:	183a      	adds	r2, r7, r0
 8018908:	8812      	ldrh	r2, [r2, #0]
 801890a:	4953      	ldr	r1, [pc, #332]	@ (8018a58 <USB_ActivateEndpoint+0x2c0>)
 801890c:	430a      	orrs	r2, r1
 801890e:	b292      	uxth	r2, r2
 8018910:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 8018912:	683b      	ldr	r3, [r7, #0]
 8018914:	78db      	ldrb	r3, [r3, #3]
 8018916:	2b01      	cmp	r3, #1
 8018918:	d01d      	beq.n	8018956 <USB_ActivateEndpoint+0x1be>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 801891a:	687a      	ldr	r2, [r7, #4]
 801891c:	683b      	ldr	r3, [r7, #0]
 801891e:	781b      	ldrb	r3, [r3, #0]
 8018920:	009b      	lsls	r3, r3, #2
 8018922:	18d3      	adds	r3, r2, r3
 8018924:	881b      	ldrh	r3, [r3, #0]
 8018926:	b29a      	uxth	r2, r3
 8018928:	200c      	movs	r0, #12
 801892a:	183b      	adds	r3, r7, r0
 801892c:	494b      	ldr	r1, [pc, #300]	@ (8018a5c <USB_ActivateEndpoint+0x2c4>)
 801892e:	400a      	ands	r2, r1
 8018930:	801a      	strh	r2, [r3, #0]
 8018932:	183b      	adds	r3, r7, r0
 8018934:	183a      	adds	r2, r7, r0
 8018936:	8812      	ldrh	r2, [r2, #0]
 8018938:	2120      	movs	r1, #32
 801893a:	404a      	eors	r2, r1
 801893c:	801a      	strh	r2, [r3, #0]
 801893e:	687a      	ldr	r2, [r7, #4]
 8018940:	683b      	ldr	r3, [r7, #0]
 8018942:	781b      	ldrb	r3, [r3, #0]
 8018944:	009b      	lsls	r3, r3, #2
 8018946:	18d3      	adds	r3, r2, r3
 8018948:	183a      	adds	r2, r7, r0
 801894a:	8812      	ldrh	r2, [r2, #0]
 801894c:	4940      	ldr	r1, [pc, #256]	@ (8018a50 <USB_ActivateEndpoint+0x2b8>)
 801894e:	430a      	orrs	r2, r1
 8018950:	b292      	uxth	r2, r2
 8018952:	801a      	strh	r2, [r3, #0]
 8018954:	e2b4      	b.n	8018ec0 <USB_ActivateEndpoint+0x728>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8018956:	687a      	ldr	r2, [r7, #4]
 8018958:	683b      	ldr	r3, [r7, #0]
 801895a:	781b      	ldrb	r3, [r3, #0]
 801895c:	009b      	lsls	r3, r3, #2
 801895e:	18d3      	adds	r3, r2, r3
 8018960:	881b      	ldrh	r3, [r3, #0]
 8018962:	b29a      	uxth	r2, r3
 8018964:	200e      	movs	r0, #14
 8018966:	183b      	adds	r3, r7, r0
 8018968:	493c      	ldr	r1, [pc, #240]	@ (8018a5c <USB_ActivateEndpoint+0x2c4>)
 801896a:	400a      	ands	r2, r1
 801896c:	801a      	strh	r2, [r3, #0]
 801896e:	687a      	ldr	r2, [r7, #4]
 8018970:	683b      	ldr	r3, [r7, #0]
 8018972:	781b      	ldrb	r3, [r3, #0]
 8018974:	009b      	lsls	r3, r3, #2
 8018976:	18d3      	adds	r3, r2, r3
 8018978:	183a      	adds	r2, r7, r0
 801897a:	8812      	ldrh	r2, [r2, #0]
 801897c:	4934      	ldr	r1, [pc, #208]	@ (8018a50 <USB_ActivateEndpoint+0x2b8>)
 801897e:	430a      	orrs	r2, r1
 8018980:	b292      	uxth	r2, r2
 8018982:	801a      	strh	r2, [r3, #0]
 8018984:	e29c      	b.n	8018ec0 <USB_ActivateEndpoint+0x728>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8018986:	687b      	ldr	r3, [r7, #4]
 8018988:	633b      	str	r3, [r7, #48]	@ 0x30
 801898a:	687b      	ldr	r3, [r7, #4]
 801898c:	2250      	movs	r2, #80	@ 0x50
 801898e:	5a9b      	ldrh	r3, [r3, r2]
 8018990:	b29b      	uxth	r3, r3
 8018992:	001a      	movs	r2, r3
 8018994:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018996:	189b      	adds	r3, r3, r2
 8018998:	633b      	str	r3, [r7, #48]	@ 0x30
 801899a:	683b      	ldr	r3, [r7, #0]
 801899c:	781b      	ldrb	r3, [r3, #0]
 801899e:	00da      	lsls	r2, r3, #3
 80189a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80189a2:	18d3      	adds	r3, r2, r3
 80189a4:	4a2e      	ldr	r2, [pc, #184]	@ (8018a60 <USB_ActivateEndpoint+0x2c8>)
 80189a6:	4694      	mov	ip, r2
 80189a8:	4463      	add	r3, ip
 80189aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80189ac:	683b      	ldr	r3, [r7, #0]
 80189ae:	88db      	ldrh	r3, [r3, #6]
 80189b0:	085b      	lsrs	r3, r3, #1
 80189b2:	b29b      	uxth	r3, r3
 80189b4:	18db      	adds	r3, r3, r3
 80189b6:	b29a      	uxth	r2, r3
 80189b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80189ba:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80189bc:	687b      	ldr	r3, [r7, #4]
 80189be:	62bb      	str	r3, [r7, #40]	@ 0x28
 80189c0:	687b      	ldr	r3, [r7, #4]
 80189c2:	2250      	movs	r2, #80	@ 0x50
 80189c4:	5a9b      	ldrh	r3, [r3, r2]
 80189c6:	b29b      	uxth	r3, r3
 80189c8:	001a      	movs	r2, r3
 80189ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80189cc:	189b      	adds	r3, r3, r2
 80189ce:	62bb      	str	r3, [r7, #40]	@ 0x28
 80189d0:	683b      	ldr	r3, [r7, #0]
 80189d2:	781b      	ldrb	r3, [r3, #0]
 80189d4:	00da      	lsls	r2, r3, #3
 80189d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80189d8:	18d3      	adds	r3, r2, r3
 80189da:	4a22      	ldr	r2, [pc, #136]	@ (8018a64 <USB_ActivateEndpoint+0x2cc>)
 80189dc:	4694      	mov	ip, r2
 80189de:	4463      	add	r3, ip
 80189e0:	627b      	str	r3, [r7, #36]	@ 0x24
 80189e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80189e4:	881b      	ldrh	r3, [r3, #0]
 80189e6:	b29b      	uxth	r3, r3
 80189e8:	059b      	lsls	r3, r3, #22
 80189ea:	0d9b      	lsrs	r3, r3, #22
 80189ec:	b29a      	uxth	r2, r3
 80189ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80189f0:	801a      	strh	r2, [r3, #0]
 80189f2:	683b      	ldr	r3, [r7, #0]
 80189f4:	691b      	ldr	r3, [r3, #16]
 80189f6:	2b3e      	cmp	r3, #62	@ 0x3e
 80189f8:	d91a      	bls.n	8018a30 <USB_ActivateEndpoint+0x298>
 80189fa:	683b      	ldr	r3, [r7, #0]
 80189fc:	691b      	ldr	r3, [r3, #16]
 80189fe:	095b      	lsrs	r3, r3, #5
 8018a00:	66bb      	str	r3, [r7, #104]	@ 0x68
 8018a02:	683b      	ldr	r3, [r7, #0]
 8018a04:	691b      	ldr	r3, [r3, #16]
 8018a06:	221f      	movs	r2, #31
 8018a08:	4013      	ands	r3, r2
 8018a0a:	d102      	bne.n	8018a12 <USB_ActivateEndpoint+0x27a>
 8018a0c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8018a0e:	3b01      	subs	r3, #1
 8018a10:	66bb      	str	r3, [r7, #104]	@ 0x68
 8018a12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018a14:	881b      	ldrh	r3, [r3, #0]
 8018a16:	b29a      	uxth	r2, r3
 8018a18:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8018a1a:	b29b      	uxth	r3, r3
 8018a1c:	029b      	lsls	r3, r3, #10
 8018a1e:	b29b      	uxth	r3, r3
 8018a20:	4313      	orrs	r3, r2
 8018a22:	b29b      	uxth	r3, r3
 8018a24:	4a10      	ldr	r2, [pc, #64]	@ (8018a68 <USB_ActivateEndpoint+0x2d0>)
 8018a26:	4313      	orrs	r3, r2
 8018a28:	b29a      	uxth	r2, r3
 8018a2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018a2c:	801a      	strh	r2, [r3, #0]
 8018a2e:	e034      	b.n	8018a9a <USB_ActivateEndpoint+0x302>
 8018a30:	683b      	ldr	r3, [r7, #0]
 8018a32:	691b      	ldr	r3, [r3, #16]
 8018a34:	2b00      	cmp	r3, #0
 8018a36:	d119      	bne.n	8018a6c <USB_ActivateEndpoint+0x2d4>
 8018a38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018a3a:	881b      	ldrh	r3, [r3, #0]
 8018a3c:	b29b      	uxth	r3, r3
 8018a3e:	4a0a      	ldr	r2, [pc, #40]	@ (8018a68 <USB_ActivateEndpoint+0x2d0>)
 8018a40:	4313      	orrs	r3, r2
 8018a42:	b29a      	uxth	r2, r3
 8018a44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018a46:	801a      	strh	r2, [r3, #0]
 8018a48:	e027      	b.n	8018a9a <USB_ActivateEndpoint+0x302>
 8018a4a:	46c0      	nop			@ (mov r8, r8)
 8018a4c:	ffff898f 	.word	0xffff898f
 8018a50:	ffff8080 	.word	0xffff8080
 8018a54:	ffff8f8f 	.word	0xffff8f8f
 8018a58:	ffff80c0 	.word	0xffff80c0
 8018a5c:	ffff8fbf 	.word	0xffff8fbf
 8018a60:	00000404 	.word	0x00000404
 8018a64:	00000406 	.word	0x00000406
 8018a68:	ffff8000 	.word	0xffff8000
 8018a6c:	683b      	ldr	r3, [r7, #0]
 8018a6e:	691b      	ldr	r3, [r3, #16]
 8018a70:	085b      	lsrs	r3, r3, #1
 8018a72:	66bb      	str	r3, [r7, #104]	@ 0x68
 8018a74:	683b      	ldr	r3, [r7, #0]
 8018a76:	691b      	ldr	r3, [r3, #16]
 8018a78:	2201      	movs	r2, #1
 8018a7a:	4013      	ands	r3, r2
 8018a7c:	d002      	beq.n	8018a84 <USB_ActivateEndpoint+0x2ec>
 8018a7e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8018a80:	3301      	adds	r3, #1
 8018a82:	66bb      	str	r3, [r7, #104]	@ 0x68
 8018a84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018a86:	881b      	ldrh	r3, [r3, #0]
 8018a88:	b29a      	uxth	r2, r3
 8018a8a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8018a8c:	b29b      	uxth	r3, r3
 8018a8e:	029b      	lsls	r3, r3, #10
 8018a90:	b29b      	uxth	r3, r3
 8018a92:	4313      	orrs	r3, r2
 8018a94:	b29a      	uxth	r2, r3
 8018a96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018a98:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8018a9a:	687a      	ldr	r2, [r7, #4]
 8018a9c:	683b      	ldr	r3, [r7, #0]
 8018a9e:	781b      	ldrb	r3, [r3, #0]
 8018aa0:	009b      	lsls	r3, r3, #2
 8018aa2:	18d2      	adds	r2, r2, r3
 8018aa4:	2122      	movs	r1, #34	@ 0x22
 8018aa6:	187b      	adds	r3, r7, r1
 8018aa8:	8812      	ldrh	r2, [r2, #0]
 8018aaa:	801a      	strh	r2, [r3, #0]
 8018aac:	187b      	adds	r3, r7, r1
 8018aae:	881a      	ldrh	r2, [r3, #0]
 8018ab0:	2380      	movs	r3, #128	@ 0x80
 8018ab2:	01db      	lsls	r3, r3, #7
 8018ab4:	4013      	ands	r3, r2
 8018ab6:	d016      	beq.n	8018ae6 <USB_ActivateEndpoint+0x34e>
 8018ab8:	687a      	ldr	r2, [r7, #4]
 8018aba:	683b      	ldr	r3, [r7, #0]
 8018abc:	781b      	ldrb	r3, [r3, #0]
 8018abe:	009b      	lsls	r3, r3, #2
 8018ac0:	18d3      	adds	r3, r2, r3
 8018ac2:	881b      	ldrh	r3, [r3, #0]
 8018ac4:	b29a      	uxth	r2, r3
 8018ac6:	2020      	movs	r0, #32
 8018ac8:	183b      	adds	r3, r7, r0
 8018aca:	49dd      	ldr	r1, [pc, #884]	@ (8018e40 <USB_ActivateEndpoint+0x6a8>)
 8018acc:	400a      	ands	r2, r1
 8018ace:	801a      	strh	r2, [r3, #0]
 8018ad0:	687a      	ldr	r2, [r7, #4]
 8018ad2:	683b      	ldr	r3, [r7, #0]
 8018ad4:	781b      	ldrb	r3, [r3, #0]
 8018ad6:	009b      	lsls	r3, r3, #2
 8018ad8:	18d3      	adds	r3, r2, r3
 8018ada:	183a      	adds	r2, r7, r0
 8018adc:	8812      	ldrh	r2, [r2, #0]
 8018ade:	49d9      	ldr	r1, [pc, #868]	@ (8018e44 <USB_ActivateEndpoint+0x6ac>)
 8018ae0:	430a      	orrs	r2, r1
 8018ae2:	b292      	uxth	r2, r2
 8018ae4:	801a      	strh	r2, [r3, #0]

      if (ep->num == 0U)
 8018ae6:	683b      	ldr	r3, [r7, #0]
 8018ae8:	781b      	ldrb	r3, [r3, #0]
 8018aea:	2b00      	cmp	r3, #0
 8018aec:	d125      	bne.n	8018b3a <USB_ActivateEndpoint+0x3a2>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8018aee:	687a      	ldr	r2, [r7, #4]
 8018af0:	683b      	ldr	r3, [r7, #0]
 8018af2:	781b      	ldrb	r3, [r3, #0]
 8018af4:	009b      	lsls	r3, r3, #2
 8018af6:	18d3      	adds	r3, r2, r3
 8018af8:	881b      	ldrh	r3, [r3, #0]
 8018afa:	b29a      	uxth	r2, r3
 8018afc:	201c      	movs	r0, #28
 8018afe:	183b      	adds	r3, r7, r0
 8018b00:	49d1      	ldr	r1, [pc, #836]	@ (8018e48 <USB_ActivateEndpoint+0x6b0>)
 8018b02:	400a      	ands	r2, r1
 8018b04:	801a      	strh	r2, [r3, #0]
 8018b06:	183b      	adds	r3, r7, r0
 8018b08:	183a      	adds	r2, r7, r0
 8018b0a:	8812      	ldrh	r2, [r2, #0]
 8018b0c:	2180      	movs	r1, #128	@ 0x80
 8018b0e:	0149      	lsls	r1, r1, #5
 8018b10:	404a      	eors	r2, r1
 8018b12:	801a      	strh	r2, [r3, #0]
 8018b14:	183b      	adds	r3, r7, r0
 8018b16:	183a      	adds	r2, r7, r0
 8018b18:	8812      	ldrh	r2, [r2, #0]
 8018b1a:	2180      	movs	r1, #128	@ 0x80
 8018b1c:	0189      	lsls	r1, r1, #6
 8018b1e:	404a      	eors	r2, r1
 8018b20:	801a      	strh	r2, [r3, #0]
 8018b22:	687a      	ldr	r2, [r7, #4]
 8018b24:	683b      	ldr	r3, [r7, #0]
 8018b26:	781b      	ldrb	r3, [r3, #0]
 8018b28:	009b      	lsls	r3, r3, #2
 8018b2a:	18d3      	adds	r3, r2, r3
 8018b2c:	183a      	adds	r2, r7, r0
 8018b2e:	8812      	ldrh	r2, [r2, #0]
 8018b30:	49c6      	ldr	r1, [pc, #792]	@ (8018e4c <USB_ActivateEndpoint+0x6b4>)
 8018b32:	430a      	orrs	r2, r1
 8018b34:	b292      	uxth	r2, r2
 8018b36:	801a      	strh	r2, [r3, #0]
 8018b38:	e1c2      	b.n	8018ec0 <USB_ActivateEndpoint+0x728>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8018b3a:	687a      	ldr	r2, [r7, #4]
 8018b3c:	683b      	ldr	r3, [r7, #0]
 8018b3e:	781b      	ldrb	r3, [r3, #0]
 8018b40:	009b      	lsls	r3, r3, #2
 8018b42:	18d3      	adds	r3, r2, r3
 8018b44:	881b      	ldrh	r3, [r3, #0]
 8018b46:	b29a      	uxth	r2, r3
 8018b48:	201e      	movs	r0, #30
 8018b4a:	183b      	adds	r3, r7, r0
 8018b4c:	49be      	ldr	r1, [pc, #760]	@ (8018e48 <USB_ActivateEndpoint+0x6b0>)
 8018b4e:	400a      	ands	r2, r1
 8018b50:	801a      	strh	r2, [r3, #0]
 8018b52:	183b      	adds	r3, r7, r0
 8018b54:	183a      	adds	r2, r7, r0
 8018b56:	8812      	ldrh	r2, [r2, #0]
 8018b58:	2180      	movs	r1, #128	@ 0x80
 8018b5a:	0189      	lsls	r1, r1, #6
 8018b5c:	404a      	eors	r2, r1
 8018b5e:	801a      	strh	r2, [r3, #0]
 8018b60:	687a      	ldr	r2, [r7, #4]
 8018b62:	683b      	ldr	r3, [r7, #0]
 8018b64:	781b      	ldrb	r3, [r3, #0]
 8018b66:	009b      	lsls	r3, r3, #2
 8018b68:	18d3      	adds	r3, r2, r3
 8018b6a:	183a      	adds	r2, r7, r0
 8018b6c:	8812      	ldrh	r2, [r2, #0]
 8018b6e:	49b7      	ldr	r1, [pc, #732]	@ (8018e4c <USB_ActivateEndpoint+0x6b4>)
 8018b70:	430a      	orrs	r2, r1
 8018b72:	b292      	uxth	r2, r2
 8018b74:	801a      	strh	r2, [r3, #0]
 8018b76:	e1a3      	b.n	8018ec0 <USB_ActivateEndpoint+0x728>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8018b78:	683b      	ldr	r3, [r7, #0]
 8018b7a:	78db      	ldrb	r3, [r3, #3]
 8018b7c:	2b02      	cmp	r3, #2
 8018b7e:	d117      	bne.n	8018bb0 <USB_ActivateEndpoint+0x418>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8018b80:	687a      	ldr	r2, [r7, #4]
 8018b82:	683b      	ldr	r3, [r7, #0]
 8018b84:	781b      	ldrb	r3, [r3, #0]
 8018b86:	009b      	lsls	r3, r3, #2
 8018b88:	18d3      	adds	r3, r2, r3
 8018b8a:	881b      	ldrh	r3, [r3, #0]
 8018b8c:	b29a      	uxth	r2, r3
 8018b8e:	2062      	movs	r0, #98	@ 0x62
 8018b90:	183b      	adds	r3, r7, r0
 8018b92:	49ab      	ldr	r1, [pc, #684]	@ (8018e40 <USB_ActivateEndpoint+0x6a8>)
 8018b94:	400a      	ands	r2, r1
 8018b96:	801a      	strh	r2, [r3, #0]
 8018b98:	687a      	ldr	r2, [r7, #4]
 8018b9a:	683b      	ldr	r3, [r7, #0]
 8018b9c:	781b      	ldrb	r3, [r3, #0]
 8018b9e:	009b      	lsls	r3, r3, #2
 8018ba0:	18d3      	adds	r3, r2, r3
 8018ba2:	183a      	adds	r2, r7, r0
 8018ba4:	8812      	ldrh	r2, [r2, #0]
 8018ba6:	49aa      	ldr	r1, [pc, #680]	@ (8018e50 <USB_ActivateEndpoint+0x6b8>)
 8018ba8:	430a      	orrs	r2, r1
 8018baa:	b292      	uxth	r2, r2
 8018bac:	801a      	strh	r2, [r3, #0]
 8018bae:	e016      	b.n	8018bde <USB_ActivateEndpoint+0x446>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8018bb0:	687a      	ldr	r2, [r7, #4]
 8018bb2:	683b      	ldr	r3, [r7, #0]
 8018bb4:	781b      	ldrb	r3, [r3, #0]
 8018bb6:	009b      	lsls	r3, r3, #2
 8018bb8:	18d3      	adds	r3, r2, r3
 8018bba:	881b      	ldrh	r3, [r3, #0]
 8018bbc:	b29a      	uxth	r2, r3
 8018bbe:	2064      	movs	r0, #100	@ 0x64
 8018bc0:	183b      	adds	r3, r7, r0
 8018bc2:	49a4      	ldr	r1, [pc, #656]	@ (8018e54 <USB_ActivateEndpoint+0x6bc>)
 8018bc4:	400a      	ands	r2, r1
 8018bc6:	801a      	strh	r2, [r3, #0]
 8018bc8:	687a      	ldr	r2, [r7, #4]
 8018bca:	683b      	ldr	r3, [r7, #0]
 8018bcc:	781b      	ldrb	r3, [r3, #0]
 8018bce:	009b      	lsls	r3, r3, #2
 8018bd0:	18d3      	adds	r3, r2, r3
 8018bd2:	183a      	adds	r2, r7, r0
 8018bd4:	8812      	ldrh	r2, [r2, #0]
 8018bd6:	499d      	ldr	r1, [pc, #628]	@ (8018e4c <USB_ActivateEndpoint+0x6b4>)
 8018bd8:	430a      	orrs	r2, r1
 8018bda:	b292      	uxth	r2, r2
 8018bdc:	801a      	strh	r2, [r3, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8018bde:	687b      	ldr	r3, [r7, #4]
 8018be0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8018be2:	687b      	ldr	r3, [r7, #4]
 8018be4:	2250      	movs	r2, #80	@ 0x50
 8018be6:	5a9b      	ldrh	r3, [r3, r2]
 8018be8:	b29b      	uxth	r3, r3
 8018bea:	001a      	movs	r2, r3
 8018bec:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8018bee:	189b      	adds	r3, r3, r2
 8018bf0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8018bf2:	683b      	ldr	r3, [r7, #0]
 8018bf4:	781b      	ldrb	r3, [r3, #0]
 8018bf6:	00da      	lsls	r2, r3, #3
 8018bf8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8018bfa:	18d3      	adds	r3, r2, r3
 8018bfc:	2280      	movs	r2, #128	@ 0x80
 8018bfe:	00d2      	lsls	r2, r2, #3
 8018c00:	4694      	mov	ip, r2
 8018c02:	4463      	add	r3, ip
 8018c04:	65bb      	str	r3, [r7, #88]	@ 0x58
 8018c06:	683b      	ldr	r3, [r7, #0]
 8018c08:	891b      	ldrh	r3, [r3, #8]
 8018c0a:	085b      	lsrs	r3, r3, #1
 8018c0c:	b29b      	uxth	r3, r3
 8018c0e:	18db      	adds	r3, r3, r3
 8018c10:	b29a      	uxth	r2, r3
 8018c12:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8018c14:	801a      	strh	r2, [r3, #0]
 8018c16:	687b      	ldr	r3, [r7, #4]
 8018c18:	657b      	str	r3, [r7, #84]	@ 0x54
 8018c1a:	687b      	ldr	r3, [r7, #4]
 8018c1c:	2250      	movs	r2, #80	@ 0x50
 8018c1e:	5a9b      	ldrh	r3, [r3, r2]
 8018c20:	b29b      	uxth	r3, r3
 8018c22:	001a      	movs	r2, r3
 8018c24:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8018c26:	189b      	adds	r3, r3, r2
 8018c28:	657b      	str	r3, [r7, #84]	@ 0x54
 8018c2a:	683b      	ldr	r3, [r7, #0]
 8018c2c:	781b      	ldrb	r3, [r3, #0]
 8018c2e:	00da      	lsls	r2, r3, #3
 8018c30:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8018c32:	18d3      	adds	r3, r2, r3
 8018c34:	4a88      	ldr	r2, [pc, #544]	@ (8018e58 <USB_ActivateEndpoint+0x6c0>)
 8018c36:	4694      	mov	ip, r2
 8018c38:	4463      	add	r3, ip
 8018c3a:	653b      	str	r3, [r7, #80]	@ 0x50
 8018c3c:	683b      	ldr	r3, [r7, #0]
 8018c3e:	895b      	ldrh	r3, [r3, #10]
 8018c40:	085b      	lsrs	r3, r3, #1
 8018c42:	b29b      	uxth	r3, r3
 8018c44:	18db      	adds	r3, r3, r3
 8018c46:	b29a      	uxth	r2, r3
 8018c48:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8018c4a:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8018c4c:	683b      	ldr	r3, [r7, #0]
 8018c4e:	785b      	ldrb	r3, [r3, #1]
 8018c50:	2b00      	cmp	r3, #0
 8018c52:	d000      	beq.n	8018c56 <USB_ActivateEndpoint+0x4be>
 8018c54:	e087      	b.n	8018d66 <USB_ActivateEndpoint+0x5ce>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8018c56:	687a      	ldr	r2, [r7, #4]
 8018c58:	683b      	ldr	r3, [r7, #0]
 8018c5a:	781b      	ldrb	r3, [r3, #0]
 8018c5c:	009b      	lsls	r3, r3, #2
 8018c5e:	18d2      	adds	r2, r2, r3
 8018c60:	2140      	movs	r1, #64	@ 0x40
 8018c62:	187b      	adds	r3, r7, r1
 8018c64:	8812      	ldrh	r2, [r2, #0]
 8018c66:	801a      	strh	r2, [r3, #0]
 8018c68:	187b      	adds	r3, r7, r1
 8018c6a:	881a      	ldrh	r2, [r3, #0]
 8018c6c:	2380      	movs	r3, #128	@ 0x80
 8018c6e:	01db      	lsls	r3, r3, #7
 8018c70:	4013      	ands	r3, r2
 8018c72:	d016      	beq.n	8018ca2 <USB_ActivateEndpoint+0x50a>
 8018c74:	687a      	ldr	r2, [r7, #4]
 8018c76:	683b      	ldr	r3, [r7, #0]
 8018c78:	781b      	ldrb	r3, [r3, #0]
 8018c7a:	009b      	lsls	r3, r3, #2
 8018c7c:	18d3      	adds	r3, r2, r3
 8018c7e:	881b      	ldrh	r3, [r3, #0]
 8018c80:	b29a      	uxth	r2, r3
 8018c82:	203e      	movs	r0, #62	@ 0x3e
 8018c84:	183b      	adds	r3, r7, r0
 8018c86:	496e      	ldr	r1, [pc, #440]	@ (8018e40 <USB_ActivateEndpoint+0x6a8>)
 8018c88:	400a      	ands	r2, r1
 8018c8a:	801a      	strh	r2, [r3, #0]
 8018c8c:	687a      	ldr	r2, [r7, #4]
 8018c8e:	683b      	ldr	r3, [r7, #0]
 8018c90:	781b      	ldrb	r3, [r3, #0]
 8018c92:	009b      	lsls	r3, r3, #2
 8018c94:	18d3      	adds	r3, r2, r3
 8018c96:	183a      	adds	r2, r7, r0
 8018c98:	8812      	ldrh	r2, [r2, #0]
 8018c9a:	496a      	ldr	r1, [pc, #424]	@ (8018e44 <USB_ActivateEndpoint+0x6ac>)
 8018c9c:	430a      	orrs	r2, r1
 8018c9e:	b292      	uxth	r2, r2
 8018ca0:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8018ca2:	687a      	ldr	r2, [r7, #4]
 8018ca4:	683b      	ldr	r3, [r7, #0]
 8018ca6:	781b      	ldrb	r3, [r3, #0]
 8018ca8:	009b      	lsls	r3, r3, #2
 8018caa:	18d2      	adds	r2, r2, r3
 8018cac:	213c      	movs	r1, #60	@ 0x3c
 8018cae:	187b      	adds	r3, r7, r1
 8018cb0:	8812      	ldrh	r2, [r2, #0]
 8018cb2:	801a      	strh	r2, [r3, #0]
 8018cb4:	187b      	adds	r3, r7, r1
 8018cb6:	881b      	ldrh	r3, [r3, #0]
 8018cb8:	2240      	movs	r2, #64	@ 0x40
 8018cba:	4013      	ands	r3, r2
 8018cbc:	d016      	beq.n	8018cec <USB_ActivateEndpoint+0x554>
 8018cbe:	687a      	ldr	r2, [r7, #4]
 8018cc0:	683b      	ldr	r3, [r7, #0]
 8018cc2:	781b      	ldrb	r3, [r3, #0]
 8018cc4:	009b      	lsls	r3, r3, #2
 8018cc6:	18d3      	adds	r3, r2, r3
 8018cc8:	881b      	ldrh	r3, [r3, #0]
 8018cca:	b29a      	uxth	r2, r3
 8018ccc:	203a      	movs	r0, #58	@ 0x3a
 8018cce:	183b      	adds	r3, r7, r0
 8018cd0:	495b      	ldr	r1, [pc, #364]	@ (8018e40 <USB_ActivateEndpoint+0x6a8>)
 8018cd2:	400a      	ands	r2, r1
 8018cd4:	801a      	strh	r2, [r3, #0]
 8018cd6:	687a      	ldr	r2, [r7, #4]
 8018cd8:	683b      	ldr	r3, [r7, #0]
 8018cda:	781b      	ldrb	r3, [r3, #0]
 8018cdc:	009b      	lsls	r3, r3, #2
 8018cde:	18d3      	adds	r3, r2, r3
 8018ce0:	183a      	adds	r2, r7, r0
 8018ce2:	8812      	ldrh	r2, [r2, #0]
 8018ce4:	495d      	ldr	r1, [pc, #372]	@ (8018e5c <USB_ActivateEndpoint+0x6c4>)
 8018ce6:	430a      	orrs	r2, r1
 8018ce8:	b292      	uxth	r2, r2
 8018cea:	801a      	strh	r2, [r3, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8018cec:	687a      	ldr	r2, [r7, #4]
 8018cee:	683b      	ldr	r3, [r7, #0]
 8018cf0:	781b      	ldrb	r3, [r3, #0]
 8018cf2:	009b      	lsls	r3, r3, #2
 8018cf4:	18d3      	adds	r3, r2, r3
 8018cf6:	881b      	ldrh	r3, [r3, #0]
 8018cf8:	b29a      	uxth	r2, r3
 8018cfa:	2038      	movs	r0, #56	@ 0x38
 8018cfc:	183b      	adds	r3, r7, r0
 8018cfe:	4952      	ldr	r1, [pc, #328]	@ (8018e48 <USB_ActivateEndpoint+0x6b0>)
 8018d00:	400a      	ands	r2, r1
 8018d02:	801a      	strh	r2, [r3, #0]
 8018d04:	183b      	adds	r3, r7, r0
 8018d06:	183a      	adds	r2, r7, r0
 8018d08:	8812      	ldrh	r2, [r2, #0]
 8018d0a:	2180      	movs	r1, #128	@ 0x80
 8018d0c:	0149      	lsls	r1, r1, #5
 8018d0e:	404a      	eors	r2, r1
 8018d10:	801a      	strh	r2, [r3, #0]
 8018d12:	183b      	adds	r3, r7, r0
 8018d14:	183a      	adds	r2, r7, r0
 8018d16:	8812      	ldrh	r2, [r2, #0]
 8018d18:	2180      	movs	r1, #128	@ 0x80
 8018d1a:	0189      	lsls	r1, r1, #6
 8018d1c:	404a      	eors	r2, r1
 8018d1e:	801a      	strh	r2, [r3, #0]
 8018d20:	687a      	ldr	r2, [r7, #4]
 8018d22:	683b      	ldr	r3, [r7, #0]
 8018d24:	781b      	ldrb	r3, [r3, #0]
 8018d26:	009b      	lsls	r3, r3, #2
 8018d28:	18d3      	adds	r3, r2, r3
 8018d2a:	183a      	adds	r2, r7, r0
 8018d2c:	8812      	ldrh	r2, [r2, #0]
 8018d2e:	4947      	ldr	r1, [pc, #284]	@ (8018e4c <USB_ActivateEndpoint+0x6b4>)
 8018d30:	430a      	orrs	r2, r1
 8018d32:	b292      	uxth	r2, r2
 8018d34:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8018d36:	687a      	ldr	r2, [r7, #4]
 8018d38:	683b      	ldr	r3, [r7, #0]
 8018d3a:	781b      	ldrb	r3, [r3, #0]
 8018d3c:	009b      	lsls	r3, r3, #2
 8018d3e:	18d3      	adds	r3, r2, r3
 8018d40:	881b      	ldrh	r3, [r3, #0]
 8018d42:	b29a      	uxth	r2, r3
 8018d44:	2036      	movs	r0, #54	@ 0x36
 8018d46:	183b      	adds	r3, r7, r0
 8018d48:	4945      	ldr	r1, [pc, #276]	@ (8018e60 <USB_ActivateEndpoint+0x6c8>)
 8018d4a:	400a      	ands	r2, r1
 8018d4c:	801a      	strh	r2, [r3, #0]
 8018d4e:	687a      	ldr	r2, [r7, #4]
 8018d50:	683b      	ldr	r3, [r7, #0]
 8018d52:	781b      	ldrb	r3, [r3, #0]
 8018d54:	009b      	lsls	r3, r3, #2
 8018d56:	18d3      	adds	r3, r2, r3
 8018d58:	183a      	adds	r2, r7, r0
 8018d5a:	8812      	ldrh	r2, [r2, #0]
 8018d5c:	493b      	ldr	r1, [pc, #236]	@ (8018e4c <USB_ActivateEndpoint+0x6b4>)
 8018d5e:	430a      	orrs	r2, r1
 8018d60:	b292      	uxth	r2, r2
 8018d62:	801a      	strh	r2, [r3, #0]
 8018d64:	e0ac      	b.n	8018ec0 <USB_ActivateEndpoint+0x728>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8018d66:	687a      	ldr	r2, [r7, #4]
 8018d68:	683b      	ldr	r3, [r7, #0]
 8018d6a:	781b      	ldrb	r3, [r3, #0]
 8018d6c:	009b      	lsls	r3, r3, #2
 8018d6e:	18d2      	adds	r2, r2, r3
 8018d70:	214e      	movs	r1, #78	@ 0x4e
 8018d72:	187b      	adds	r3, r7, r1
 8018d74:	8812      	ldrh	r2, [r2, #0]
 8018d76:	801a      	strh	r2, [r3, #0]
 8018d78:	187b      	adds	r3, r7, r1
 8018d7a:	881a      	ldrh	r2, [r3, #0]
 8018d7c:	2380      	movs	r3, #128	@ 0x80
 8018d7e:	01db      	lsls	r3, r3, #7
 8018d80:	4013      	ands	r3, r2
 8018d82:	d016      	beq.n	8018db2 <USB_ActivateEndpoint+0x61a>
 8018d84:	687a      	ldr	r2, [r7, #4]
 8018d86:	683b      	ldr	r3, [r7, #0]
 8018d88:	781b      	ldrb	r3, [r3, #0]
 8018d8a:	009b      	lsls	r3, r3, #2
 8018d8c:	18d3      	adds	r3, r2, r3
 8018d8e:	881b      	ldrh	r3, [r3, #0]
 8018d90:	b29a      	uxth	r2, r3
 8018d92:	204c      	movs	r0, #76	@ 0x4c
 8018d94:	183b      	adds	r3, r7, r0
 8018d96:	492a      	ldr	r1, [pc, #168]	@ (8018e40 <USB_ActivateEndpoint+0x6a8>)
 8018d98:	400a      	ands	r2, r1
 8018d9a:	801a      	strh	r2, [r3, #0]
 8018d9c:	687a      	ldr	r2, [r7, #4]
 8018d9e:	683b      	ldr	r3, [r7, #0]
 8018da0:	781b      	ldrb	r3, [r3, #0]
 8018da2:	009b      	lsls	r3, r3, #2
 8018da4:	18d3      	adds	r3, r2, r3
 8018da6:	183a      	adds	r2, r7, r0
 8018da8:	8812      	ldrh	r2, [r2, #0]
 8018daa:	4926      	ldr	r1, [pc, #152]	@ (8018e44 <USB_ActivateEndpoint+0x6ac>)
 8018dac:	430a      	orrs	r2, r1
 8018dae:	b292      	uxth	r2, r2
 8018db0:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8018db2:	687a      	ldr	r2, [r7, #4]
 8018db4:	683b      	ldr	r3, [r7, #0]
 8018db6:	781b      	ldrb	r3, [r3, #0]
 8018db8:	009b      	lsls	r3, r3, #2
 8018dba:	18d2      	adds	r2, r2, r3
 8018dbc:	214a      	movs	r1, #74	@ 0x4a
 8018dbe:	187b      	adds	r3, r7, r1
 8018dc0:	8812      	ldrh	r2, [r2, #0]
 8018dc2:	801a      	strh	r2, [r3, #0]
 8018dc4:	187b      	adds	r3, r7, r1
 8018dc6:	881b      	ldrh	r3, [r3, #0]
 8018dc8:	2240      	movs	r2, #64	@ 0x40
 8018dca:	4013      	ands	r3, r2
 8018dcc:	d016      	beq.n	8018dfc <USB_ActivateEndpoint+0x664>
 8018dce:	687a      	ldr	r2, [r7, #4]
 8018dd0:	683b      	ldr	r3, [r7, #0]
 8018dd2:	781b      	ldrb	r3, [r3, #0]
 8018dd4:	009b      	lsls	r3, r3, #2
 8018dd6:	18d3      	adds	r3, r2, r3
 8018dd8:	881b      	ldrh	r3, [r3, #0]
 8018dda:	b29a      	uxth	r2, r3
 8018ddc:	2048      	movs	r0, #72	@ 0x48
 8018dde:	183b      	adds	r3, r7, r0
 8018de0:	4917      	ldr	r1, [pc, #92]	@ (8018e40 <USB_ActivateEndpoint+0x6a8>)
 8018de2:	400a      	ands	r2, r1
 8018de4:	801a      	strh	r2, [r3, #0]
 8018de6:	687a      	ldr	r2, [r7, #4]
 8018de8:	683b      	ldr	r3, [r7, #0]
 8018dea:	781b      	ldrb	r3, [r3, #0]
 8018dec:	009b      	lsls	r3, r3, #2
 8018dee:	18d3      	adds	r3, r2, r3
 8018df0:	183a      	adds	r2, r7, r0
 8018df2:	8812      	ldrh	r2, [r2, #0]
 8018df4:	4919      	ldr	r1, [pc, #100]	@ (8018e5c <USB_ActivateEndpoint+0x6c4>)
 8018df6:	430a      	orrs	r2, r1
 8018df8:	b292      	uxth	r2, r2
 8018dfa:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 8018dfc:	683b      	ldr	r3, [r7, #0]
 8018dfe:	78db      	ldrb	r3, [r3, #3]
 8018e00:	2b01      	cmp	r3, #1
 8018e02:	d02f      	beq.n	8018e64 <USB_ActivateEndpoint+0x6cc>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8018e04:	687a      	ldr	r2, [r7, #4]
 8018e06:	683b      	ldr	r3, [r7, #0]
 8018e08:	781b      	ldrb	r3, [r3, #0]
 8018e0a:	009b      	lsls	r3, r3, #2
 8018e0c:	18d3      	adds	r3, r2, r3
 8018e0e:	881b      	ldrh	r3, [r3, #0]
 8018e10:	b29a      	uxth	r2, r3
 8018e12:	2044      	movs	r0, #68	@ 0x44
 8018e14:	183b      	adds	r3, r7, r0
 8018e16:	4912      	ldr	r1, [pc, #72]	@ (8018e60 <USB_ActivateEndpoint+0x6c8>)
 8018e18:	400a      	ands	r2, r1
 8018e1a:	801a      	strh	r2, [r3, #0]
 8018e1c:	183b      	adds	r3, r7, r0
 8018e1e:	183a      	adds	r2, r7, r0
 8018e20:	8812      	ldrh	r2, [r2, #0]
 8018e22:	2120      	movs	r1, #32
 8018e24:	404a      	eors	r2, r1
 8018e26:	801a      	strh	r2, [r3, #0]
 8018e28:	687a      	ldr	r2, [r7, #4]
 8018e2a:	683b      	ldr	r3, [r7, #0]
 8018e2c:	781b      	ldrb	r3, [r3, #0]
 8018e2e:	009b      	lsls	r3, r3, #2
 8018e30:	18d3      	adds	r3, r2, r3
 8018e32:	183a      	adds	r2, r7, r0
 8018e34:	8812      	ldrh	r2, [r2, #0]
 8018e36:	4905      	ldr	r1, [pc, #20]	@ (8018e4c <USB_ActivateEndpoint+0x6b4>)
 8018e38:	430a      	orrs	r2, r1
 8018e3a:	b292      	uxth	r2, r2
 8018e3c:	801a      	strh	r2, [r3, #0]
 8018e3e:	e028      	b.n	8018e92 <USB_ActivateEndpoint+0x6fa>
 8018e40:	ffff8f8f 	.word	0xffff8f8f
 8018e44:	ffffc080 	.word	0xffffc080
 8018e48:	ffffbf8f 	.word	0xffffbf8f
 8018e4c:	ffff8080 	.word	0xffff8080
 8018e50:	ffff8180 	.word	0xffff8180
 8018e54:	ffff8e8f 	.word	0xffff8e8f
 8018e58:	00000404 	.word	0x00000404
 8018e5c:	ffff80c0 	.word	0xffff80c0
 8018e60:	ffff8fbf 	.word	0xffff8fbf
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8018e64:	687a      	ldr	r2, [r7, #4]
 8018e66:	683b      	ldr	r3, [r7, #0]
 8018e68:	781b      	ldrb	r3, [r3, #0]
 8018e6a:	009b      	lsls	r3, r3, #2
 8018e6c:	18d3      	adds	r3, r2, r3
 8018e6e:	881b      	ldrh	r3, [r3, #0]
 8018e70:	b29a      	uxth	r2, r3
 8018e72:	2046      	movs	r0, #70	@ 0x46
 8018e74:	183b      	adds	r3, r7, r0
 8018e76:	4916      	ldr	r1, [pc, #88]	@ (8018ed0 <USB_ActivateEndpoint+0x738>)
 8018e78:	400a      	ands	r2, r1
 8018e7a:	801a      	strh	r2, [r3, #0]
 8018e7c:	687a      	ldr	r2, [r7, #4]
 8018e7e:	683b      	ldr	r3, [r7, #0]
 8018e80:	781b      	ldrb	r3, [r3, #0]
 8018e82:	009b      	lsls	r3, r3, #2
 8018e84:	18d3      	adds	r3, r2, r3
 8018e86:	183a      	adds	r2, r7, r0
 8018e88:	8812      	ldrh	r2, [r2, #0]
 8018e8a:	4912      	ldr	r1, [pc, #72]	@ (8018ed4 <USB_ActivateEndpoint+0x73c>)
 8018e8c:	430a      	orrs	r2, r1
 8018e8e:	b292      	uxth	r2, r2
 8018e90:	801a      	strh	r2, [r3, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8018e92:	687a      	ldr	r2, [r7, #4]
 8018e94:	683b      	ldr	r3, [r7, #0]
 8018e96:	781b      	ldrb	r3, [r3, #0]
 8018e98:	009b      	lsls	r3, r3, #2
 8018e9a:	18d3      	adds	r3, r2, r3
 8018e9c:	881b      	ldrh	r3, [r3, #0]
 8018e9e:	b29a      	uxth	r2, r3
 8018ea0:	2042      	movs	r0, #66	@ 0x42
 8018ea2:	183b      	adds	r3, r7, r0
 8018ea4:	490c      	ldr	r1, [pc, #48]	@ (8018ed8 <USB_ActivateEndpoint+0x740>)
 8018ea6:	400a      	ands	r2, r1
 8018ea8:	801a      	strh	r2, [r3, #0]
 8018eaa:	687a      	ldr	r2, [r7, #4]
 8018eac:	683b      	ldr	r3, [r7, #0]
 8018eae:	781b      	ldrb	r3, [r3, #0]
 8018eb0:	009b      	lsls	r3, r3, #2
 8018eb2:	18d3      	adds	r3, r2, r3
 8018eb4:	183a      	adds	r2, r7, r0
 8018eb6:	8812      	ldrh	r2, [r2, #0]
 8018eb8:	4906      	ldr	r1, [pc, #24]	@ (8018ed4 <USB_ActivateEndpoint+0x73c>)
 8018eba:	430a      	orrs	r2, r1
 8018ebc:	b292      	uxth	r2, r2
 8018ebe:	801a      	strh	r2, [r3, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8018ec0:	236f      	movs	r3, #111	@ 0x6f
 8018ec2:	18fb      	adds	r3, r7, r3
 8018ec4:	781b      	ldrb	r3, [r3, #0]
}
 8018ec6:	0018      	movs	r0, r3
 8018ec8:	46bd      	mov	sp, r7
 8018eca:	b01c      	add	sp, #112	@ 0x70
 8018ecc:	bd80      	pop	{r7, pc}
 8018ece:	46c0      	nop			@ (mov r8, r8)
 8018ed0:	ffff8fbf 	.word	0xffff8fbf
 8018ed4:	ffff8080 	.word	0xffff8080
 8018ed8:	ffffbf8f 	.word	0xffffbf8f

08018edc <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8018edc:	b580      	push	{r7, lr}
 8018ede:	b08c      	sub	sp, #48	@ 0x30
 8018ee0:	af00      	add	r7, sp, #0
 8018ee2:	6078      	str	r0, [r7, #4]
 8018ee4:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8018ee6:	683b      	ldr	r3, [r7, #0]
 8018ee8:	7b1b      	ldrb	r3, [r3, #12]
 8018eea:	2b00      	cmp	r3, #0
 8018eec:	d000      	beq.n	8018ef0 <USB_DeactivateEndpoint+0x14>
 8018eee:	e07e      	b.n	8018fee <USB_DeactivateEndpoint+0x112>
  {
    if (ep->is_in != 0U)
 8018ef0:	683b      	ldr	r3, [r7, #0]
 8018ef2:	785b      	ldrb	r3, [r3, #1]
 8018ef4:	2b00      	cmp	r3, #0
 8018ef6:	d03c      	beq.n	8018f72 <USB_DeactivateEndpoint+0x96>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8018ef8:	687a      	ldr	r2, [r7, #4]
 8018efa:	683b      	ldr	r3, [r7, #0]
 8018efc:	781b      	ldrb	r3, [r3, #0]
 8018efe:	009b      	lsls	r3, r3, #2
 8018f00:	18d2      	adds	r2, r2, r3
 8018f02:	210c      	movs	r1, #12
 8018f04:	187b      	adds	r3, r7, r1
 8018f06:	8812      	ldrh	r2, [r2, #0]
 8018f08:	801a      	strh	r2, [r3, #0]
 8018f0a:	187b      	adds	r3, r7, r1
 8018f0c:	881b      	ldrh	r3, [r3, #0]
 8018f0e:	2240      	movs	r2, #64	@ 0x40
 8018f10:	4013      	ands	r3, r2
 8018f12:	d016      	beq.n	8018f42 <USB_DeactivateEndpoint+0x66>
 8018f14:	687a      	ldr	r2, [r7, #4]
 8018f16:	683b      	ldr	r3, [r7, #0]
 8018f18:	781b      	ldrb	r3, [r3, #0]
 8018f1a:	009b      	lsls	r3, r3, #2
 8018f1c:	18d3      	adds	r3, r2, r3
 8018f1e:	881b      	ldrh	r3, [r3, #0]
 8018f20:	b29a      	uxth	r2, r3
 8018f22:	200a      	movs	r0, #10
 8018f24:	183b      	adds	r3, r7, r0
 8018f26:	49c7      	ldr	r1, [pc, #796]	@ (8019244 <USB_DeactivateEndpoint+0x368>)
 8018f28:	400a      	ands	r2, r1
 8018f2a:	801a      	strh	r2, [r3, #0]
 8018f2c:	687a      	ldr	r2, [r7, #4]
 8018f2e:	683b      	ldr	r3, [r7, #0]
 8018f30:	781b      	ldrb	r3, [r3, #0]
 8018f32:	009b      	lsls	r3, r3, #2
 8018f34:	18d3      	adds	r3, r2, r3
 8018f36:	183a      	adds	r2, r7, r0
 8018f38:	8812      	ldrh	r2, [r2, #0]
 8018f3a:	49c3      	ldr	r1, [pc, #780]	@ (8019248 <USB_DeactivateEndpoint+0x36c>)
 8018f3c:	430a      	orrs	r2, r1
 8018f3e:	b292      	uxth	r2, r2
 8018f40:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8018f42:	687a      	ldr	r2, [r7, #4]
 8018f44:	683b      	ldr	r3, [r7, #0]
 8018f46:	781b      	ldrb	r3, [r3, #0]
 8018f48:	009b      	lsls	r3, r3, #2
 8018f4a:	18d3      	adds	r3, r2, r3
 8018f4c:	881b      	ldrh	r3, [r3, #0]
 8018f4e:	b29a      	uxth	r2, r3
 8018f50:	2008      	movs	r0, #8
 8018f52:	183b      	adds	r3, r7, r0
 8018f54:	49bd      	ldr	r1, [pc, #756]	@ (801924c <USB_DeactivateEndpoint+0x370>)
 8018f56:	400a      	ands	r2, r1
 8018f58:	801a      	strh	r2, [r3, #0]
 8018f5a:	687a      	ldr	r2, [r7, #4]
 8018f5c:	683b      	ldr	r3, [r7, #0]
 8018f5e:	781b      	ldrb	r3, [r3, #0]
 8018f60:	009b      	lsls	r3, r3, #2
 8018f62:	18d3      	adds	r3, r2, r3
 8018f64:	183a      	adds	r2, r7, r0
 8018f66:	8812      	ldrh	r2, [r2, #0]
 8018f68:	49b9      	ldr	r1, [pc, #740]	@ (8019250 <USB_DeactivateEndpoint+0x374>)
 8018f6a:	430a      	orrs	r2, r1
 8018f6c:	b292      	uxth	r2, r2
 8018f6e:	801a      	strh	r2, [r3, #0]
 8018f70:	e163      	b.n	801923a <USB_DeactivateEndpoint+0x35e>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8018f72:	687a      	ldr	r2, [r7, #4]
 8018f74:	683b      	ldr	r3, [r7, #0]
 8018f76:	781b      	ldrb	r3, [r3, #0]
 8018f78:	009b      	lsls	r3, r3, #2
 8018f7a:	18d2      	adds	r2, r2, r3
 8018f7c:	2112      	movs	r1, #18
 8018f7e:	187b      	adds	r3, r7, r1
 8018f80:	8812      	ldrh	r2, [r2, #0]
 8018f82:	801a      	strh	r2, [r3, #0]
 8018f84:	187b      	adds	r3, r7, r1
 8018f86:	881a      	ldrh	r2, [r3, #0]
 8018f88:	2380      	movs	r3, #128	@ 0x80
 8018f8a:	01db      	lsls	r3, r3, #7
 8018f8c:	4013      	ands	r3, r2
 8018f8e:	d016      	beq.n	8018fbe <USB_DeactivateEndpoint+0xe2>
 8018f90:	687a      	ldr	r2, [r7, #4]
 8018f92:	683b      	ldr	r3, [r7, #0]
 8018f94:	781b      	ldrb	r3, [r3, #0]
 8018f96:	009b      	lsls	r3, r3, #2
 8018f98:	18d3      	adds	r3, r2, r3
 8018f9a:	881b      	ldrh	r3, [r3, #0]
 8018f9c:	b29a      	uxth	r2, r3
 8018f9e:	2010      	movs	r0, #16
 8018fa0:	183b      	adds	r3, r7, r0
 8018fa2:	49a8      	ldr	r1, [pc, #672]	@ (8019244 <USB_DeactivateEndpoint+0x368>)
 8018fa4:	400a      	ands	r2, r1
 8018fa6:	801a      	strh	r2, [r3, #0]
 8018fa8:	687a      	ldr	r2, [r7, #4]
 8018faa:	683b      	ldr	r3, [r7, #0]
 8018fac:	781b      	ldrb	r3, [r3, #0]
 8018fae:	009b      	lsls	r3, r3, #2
 8018fb0:	18d3      	adds	r3, r2, r3
 8018fb2:	183a      	adds	r2, r7, r0
 8018fb4:	8812      	ldrh	r2, [r2, #0]
 8018fb6:	49a7      	ldr	r1, [pc, #668]	@ (8019254 <USB_DeactivateEndpoint+0x378>)
 8018fb8:	430a      	orrs	r2, r1
 8018fba:	b292      	uxth	r2, r2
 8018fbc:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8018fbe:	687a      	ldr	r2, [r7, #4]
 8018fc0:	683b      	ldr	r3, [r7, #0]
 8018fc2:	781b      	ldrb	r3, [r3, #0]
 8018fc4:	009b      	lsls	r3, r3, #2
 8018fc6:	18d3      	adds	r3, r2, r3
 8018fc8:	881b      	ldrh	r3, [r3, #0]
 8018fca:	b29a      	uxth	r2, r3
 8018fcc:	200e      	movs	r0, #14
 8018fce:	183b      	adds	r3, r7, r0
 8018fd0:	49a1      	ldr	r1, [pc, #644]	@ (8019258 <USB_DeactivateEndpoint+0x37c>)
 8018fd2:	400a      	ands	r2, r1
 8018fd4:	801a      	strh	r2, [r3, #0]
 8018fd6:	687a      	ldr	r2, [r7, #4]
 8018fd8:	683b      	ldr	r3, [r7, #0]
 8018fda:	781b      	ldrb	r3, [r3, #0]
 8018fdc:	009b      	lsls	r3, r3, #2
 8018fde:	18d3      	adds	r3, r2, r3
 8018fe0:	183a      	adds	r2, r7, r0
 8018fe2:	8812      	ldrh	r2, [r2, #0]
 8018fe4:	499a      	ldr	r1, [pc, #616]	@ (8019250 <USB_DeactivateEndpoint+0x374>)
 8018fe6:	430a      	orrs	r2, r1
 8018fe8:	b292      	uxth	r2, r2
 8018fea:	801a      	strh	r2, [r3, #0]
 8018fec:	e125      	b.n	801923a <USB_DeactivateEndpoint+0x35e>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8018fee:	683b      	ldr	r3, [r7, #0]
 8018ff0:	785b      	ldrb	r3, [r3, #1]
 8018ff2:	2b00      	cmp	r3, #0
 8018ff4:	d000      	beq.n	8018ff8 <USB_DeactivateEndpoint+0x11c>
 8018ff6:	e090      	b.n	801911a <USB_DeactivateEndpoint+0x23e>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8018ff8:	687a      	ldr	r2, [r7, #4]
 8018ffa:	683b      	ldr	r3, [r7, #0]
 8018ffc:	781b      	ldrb	r3, [r3, #0]
 8018ffe:	009b      	lsls	r3, r3, #2
 8019000:	18d2      	adds	r2, r2, r3
 8019002:	2120      	movs	r1, #32
 8019004:	187b      	adds	r3, r7, r1
 8019006:	8812      	ldrh	r2, [r2, #0]
 8019008:	801a      	strh	r2, [r3, #0]
 801900a:	187b      	adds	r3, r7, r1
 801900c:	881a      	ldrh	r2, [r3, #0]
 801900e:	2380      	movs	r3, #128	@ 0x80
 8019010:	01db      	lsls	r3, r3, #7
 8019012:	4013      	ands	r3, r2
 8019014:	d016      	beq.n	8019044 <USB_DeactivateEndpoint+0x168>
 8019016:	687a      	ldr	r2, [r7, #4]
 8019018:	683b      	ldr	r3, [r7, #0]
 801901a:	781b      	ldrb	r3, [r3, #0]
 801901c:	009b      	lsls	r3, r3, #2
 801901e:	18d3      	adds	r3, r2, r3
 8019020:	881b      	ldrh	r3, [r3, #0]
 8019022:	b29a      	uxth	r2, r3
 8019024:	201e      	movs	r0, #30
 8019026:	183b      	adds	r3, r7, r0
 8019028:	4986      	ldr	r1, [pc, #536]	@ (8019244 <USB_DeactivateEndpoint+0x368>)
 801902a:	400a      	ands	r2, r1
 801902c:	801a      	strh	r2, [r3, #0]
 801902e:	687a      	ldr	r2, [r7, #4]
 8019030:	683b      	ldr	r3, [r7, #0]
 8019032:	781b      	ldrb	r3, [r3, #0]
 8019034:	009b      	lsls	r3, r3, #2
 8019036:	18d3      	adds	r3, r2, r3
 8019038:	183a      	adds	r2, r7, r0
 801903a:	8812      	ldrh	r2, [r2, #0]
 801903c:	4985      	ldr	r1, [pc, #532]	@ (8019254 <USB_DeactivateEndpoint+0x378>)
 801903e:	430a      	orrs	r2, r1
 8019040:	b292      	uxth	r2, r2
 8019042:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8019044:	687a      	ldr	r2, [r7, #4]
 8019046:	683b      	ldr	r3, [r7, #0]
 8019048:	781b      	ldrb	r3, [r3, #0]
 801904a:	009b      	lsls	r3, r3, #2
 801904c:	18d2      	adds	r2, r2, r3
 801904e:	211c      	movs	r1, #28
 8019050:	187b      	adds	r3, r7, r1
 8019052:	8812      	ldrh	r2, [r2, #0]
 8019054:	801a      	strh	r2, [r3, #0]
 8019056:	187b      	adds	r3, r7, r1
 8019058:	881b      	ldrh	r3, [r3, #0]
 801905a:	2240      	movs	r2, #64	@ 0x40
 801905c:	4013      	ands	r3, r2
 801905e:	d016      	beq.n	801908e <USB_DeactivateEndpoint+0x1b2>
 8019060:	687a      	ldr	r2, [r7, #4]
 8019062:	683b      	ldr	r3, [r7, #0]
 8019064:	781b      	ldrb	r3, [r3, #0]
 8019066:	009b      	lsls	r3, r3, #2
 8019068:	18d3      	adds	r3, r2, r3
 801906a:	881b      	ldrh	r3, [r3, #0]
 801906c:	b29a      	uxth	r2, r3
 801906e:	201a      	movs	r0, #26
 8019070:	183b      	adds	r3, r7, r0
 8019072:	4974      	ldr	r1, [pc, #464]	@ (8019244 <USB_DeactivateEndpoint+0x368>)
 8019074:	400a      	ands	r2, r1
 8019076:	801a      	strh	r2, [r3, #0]
 8019078:	687a      	ldr	r2, [r7, #4]
 801907a:	683b      	ldr	r3, [r7, #0]
 801907c:	781b      	ldrb	r3, [r3, #0]
 801907e:	009b      	lsls	r3, r3, #2
 8019080:	18d3      	adds	r3, r2, r3
 8019082:	183a      	adds	r2, r7, r0
 8019084:	8812      	ldrh	r2, [r2, #0]
 8019086:	4970      	ldr	r1, [pc, #448]	@ (8019248 <USB_DeactivateEndpoint+0x36c>)
 8019088:	430a      	orrs	r2, r1
 801908a:	b292      	uxth	r2, r2
 801908c:	801a      	strh	r2, [r3, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 801908e:	687a      	ldr	r2, [r7, #4]
 8019090:	683b      	ldr	r3, [r7, #0]
 8019092:	781b      	ldrb	r3, [r3, #0]
 8019094:	009b      	lsls	r3, r3, #2
 8019096:	18d3      	adds	r3, r2, r3
 8019098:	881b      	ldrh	r3, [r3, #0]
 801909a:	b29a      	uxth	r2, r3
 801909c:	2018      	movs	r0, #24
 801909e:	183b      	adds	r3, r7, r0
 80190a0:	4968      	ldr	r1, [pc, #416]	@ (8019244 <USB_DeactivateEndpoint+0x368>)
 80190a2:	400a      	ands	r2, r1
 80190a4:	801a      	strh	r2, [r3, #0]
 80190a6:	687a      	ldr	r2, [r7, #4]
 80190a8:	683b      	ldr	r3, [r7, #0]
 80190aa:	781b      	ldrb	r3, [r3, #0]
 80190ac:	009b      	lsls	r3, r3, #2
 80190ae:	18d3      	adds	r3, r2, r3
 80190b0:	183a      	adds	r2, r7, r0
 80190b2:	8812      	ldrh	r2, [r2, #0]
 80190b4:	4964      	ldr	r1, [pc, #400]	@ (8019248 <USB_DeactivateEndpoint+0x36c>)
 80190b6:	430a      	orrs	r2, r1
 80190b8:	b292      	uxth	r2, r2
 80190ba:	801a      	strh	r2, [r3, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80190bc:	687a      	ldr	r2, [r7, #4]
 80190be:	683b      	ldr	r3, [r7, #0]
 80190c0:	781b      	ldrb	r3, [r3, #0]
 80190c2:	009b      	lsls	r3, r3, #2
 80190c4:	18d3      	adds	r3, r2, r3
 80190c6:	881b      	ldrh	r3, [r3, #0]
 80190c8:	b29a      	uxth	r2, r3
 80190ca:	2016      	movs	r0, #22
 80190cc:	183b      	adds	r3, r7, r0
 80190ce:	4962      	ldr	r1, [pc, #392]	@ (8019258 <USB_DeactivateEndpoint+0x37c>)
 80190d0:	400a      	ands	r2, r1
 80190d2:	801a      	strh	r2, [r3, #0]
 80190d4:	687a      	ldr	r2, [r7, #4]
 80190d6:	683b      	ldr	r3, [r7, #0]
 80190d8:	781b      	ldrb	r3, [r3, #0]
 80190da:	009b      	lsls	r3, r3, #2
 80190dc:	18d3      	adds	r3, r2, r3
 80190de:	183a      	adds	r2, r7, r0
 80190e0:	8812      	ldrh	r2, [r2, #0]
 80190e2:	495b      	ldr	r1, [pc, #364]	@ (8019250 <USB_DeactivateEndpoint+0x374>)
 80190e4:	430a      	orrs	r2, r1
 80190e6:	b292      	uxth	r2, r2
 80190e8:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80190ea:	687a      	ldr	r2, [r7, #4]
 80190ec:	683b      	ldr	r3, [r7, #0]
 80190ee:	781b      	ldrb	r3, [r3, #0]
 80190f0:	009b      	lsls	r3, r3, #2
 80190f2:	18d3      	adds	r3, r2, r3
 80190f4:	881b      	ldrh	r3, [r3, #0]
 80190f6:	b29a      	uxth	r2, r3
 80190f8:	2014      	movs	r0, #20
 80190fa:	183b      	adds	r3, r7, r0
 80190fc:	4953      	ldr	r1, [pc, #332]	@ (801924c <USB_DeactivateEndpoint+0x370>)
 80190fe:	400a      	ands	r2, r1
 8019100:	801a      	strh	r2, [r3, #0]
 8019102:	687a      	ldr	r2, [r7, #4]
 8019104:	683b      	ldr	r3, [r7, #0]
 8019106:	781b      	ldrb	r3, [r3, #0]
 8019108:	009b      	lsls	r3, r3, #2
 801910a:	18d3      	adds	r3, r2, r3
 801910c:	183a      	adds	r2, r7, r0
 801910e:	8812      	ldrh	r2, [r2, #0]
 8019110:	494f      	ldr	r1, [pc, #316]	@ (8019250 <USB_DeactivateEndpoint+0x374>)
 8019112:	430a      	orrs	r2, r1
 8019114:	b292      	uxth	r2, r2
 8019116:	801a      	strh	r2, [r3, #0]
 8019118:	e08f      	b.n	801923a <USB_DeactivateEndpoint+0x35e>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 801911a:	687a      	ldr	r2, [r7, #4]
 801911c:	683b      	ldr	r3, [r7, #0]
 801911e:	781b      	ldrb	r3, [r3, #0]
 8019120:	009b      	lsls	r3, r3, #2
 8019122:	18d2      	adds	r2, r2, r3
 8019124:	212e      	movs	r1, #46	@ 0x2e
 8019126:	187b      	adds	r3, r7, r1
 8019128:	8812      	ldrh	r2, [r2, #0]
 801912a:	801a      	strh	r2, [r3, #0]
 801912c:	187b      	adds	r3, r7, r1
 801912e:	881a      	ldrh	r2, [r3, #0]
 8019130:	2380      	movs	r3, #128	@ 0x80
 8019132:	01db      	lsls	r3, r3, #7
 8019134:	4013      	ands	r3, r2
 8019136:	d016      	beq.n	8019166 <USB_DeactivateEndpoint+0x28a>
 8019138:	687a      	ldr	r2, [r7, #4]
 801913a:	683b      	ldr	r3, [r7, #0]
 801913c:	781b      	ldrb	r3, [r3, #0]
 801913e:	009b      	lsls	r3, r3, #2
 8019140:	18d3      	adds	r3, r2, r3
 8019142:	881b      	ldrh	r3, [r3, #0]
 8019144:	b29a      	uxth	r2, r3
 8019146:	202c      	movs	r0, #44	@ 0x2c
 8019148:	183b      	adds	r3, r7, r0
 801914a:	493e      	ldr	r1, [pc, #248]	@ (8019244 <USB_DeactivateEndpoint+0x368>)
 801914c:	400a      	ands	r2, r1
 801914e:	801a      	strh	r2, [r3, #0]
 8019150:	687a      	ldr	r2, [r7, #4]
 8019152:	683b      	ldr	r3, [r7, #0]
 8019154:	781b      	ldrb	r3, [r3, #0]
 8019156:	009b      	lsls	r3, r3, #2
 8019158:	18d3      	adds	r3, r2, r3
 801915a:	183a      	adds	r2, r7, r0
 801915c:	8812      	ldrh	r2, [r2, #0]
 801915e:	493d      	ldr	r1, [pc, #244]	@ (8019254 <USB_DeactivateEndpoint+0x378>)
 8019160:	430a      	orrs	r2, r1
 8019162:	b292      	uxth	r2, r2
 8019164:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8019166:	687a      	ldr	r2, [r7, #4]
 8019168:	683b      	ldr	r3, [r7, #0]
 801916a:	781b      	ldrb	r3, [r3, #0]
 801916c:	009b      	lsls	r3, r3, #2
 801916e:	18d2      	adds	r2, r2, r3
 8019170:	212a      	movs	r1, #42	@ 0x2a
 8019172:	187b      	adds	r3, r7, r1
 8019174:	8812      	ldrh	r2, [r2, #0]
 8019176:	801a      	strh	r2, [r3, #0]
 8019178:	187b      	adds	r3, r7, r1
 801917a:	881b      	ldrh	r3, [r3, #0]
 801917c:	2240      	movs	r2, #64	@ 0x40
 801917e:	4013      	ands	r3, r2
 8019180:	d016      	beq.n	80191b0 <USB_DeactivateEndpoint+0x2d4>
 8019182:	687a      	ldr	r2, [r7, #4]
 8019184:	683b      	ldr	r3, [r7, #0]
 8019186:	781b      	ldrb	r3, [r3, #0]
 8019188:	009b      	lsls	r3, r3, #2
 801918a:	18d3      	adds	r3, r2, r3
 801918c:	881b      	ldrh	r3, [r3, #0]
 801918e:	b29a      	uxth	r2, r3
 8019190:	2028      	movs	r0, #40	@ 0x28
 8019192:	183b      	adds	r3, r7, r0
 8019194:	492b      	ldr	r1, [pc, #172]	@ (8019244 <USB_DeactivateEndpoint+0x368>)
 8019196:	400a      	ands	r2, r1
 8019198:	801a      	strh	r2, [r3, #0]
 801919a:	687a      	ldr	r2, [r7, #4]
 801919c:	683b      	ldr	r3, [r7, #0]
 801919e:	781b      	ldrb	r3, [r3, #0]
 80191a0:	009b      	lsls	r3, r3, #2
 80191a2:	18d3      	adds	r3, r2, r3
 80191a4:	183a      	adds	r2, r7, r0
 80191a6:	8812      	ldrh	r2, [r2, #0]
 80191a8:	4927      	ldr	r1, [pc, #156]	@ (8019248 <USB_DeactivateEndpoint+0x36c>)
 80191aa:	430a      	orrs	r2, r1
 80191ac:	b292      	uxth	r2, r2
 80191ae:	801a      	strh	r2, [r3, #0]
      PCD_RX_DTOG(USBx, ep->num);
 80191b0:	687a      	ldr	r2, [r7, #4]
 80191b2:	683b      	ldr	r3, [r7, #0]
 80191b4:	781b      	ldrb	r3, [r3, #0]
 80191b6:	009b      	lsls	r3, r3, #2
 80191b8:	18d3      	adds	r3, r2, r3
 80191ba:	881b      	ldrh	r3, [r3, #0]
 80191bc:	b29a      	uxth	r2, r3
 80191be:	2026      	movs	r0, #38	@ 0x26
 80191c0:	183b      	adds	r3, r7, r0
 80191c2:	4920      	ldr	r1, [pc, #128]	@ (8019244 <USB_DeactivateEndpoint+0x368>)
 80191c4:	400a      	ands	r2, r1
 80191c6:	801a      	strh	r2, [r3, #0]
 80191c8:	687a      	ldr	r2, [r7, #4]
 80191ca:	683b      	ldr	r3, [r7, #0]
 80191cc:	781b      	ldrb	r3, [r3, #0]
 80191ce:	009b      	lsls	r3, r3, #2
 80191d0:	18d3      	adds	r3, r2, r3
 80191d2:	183a      	adds	r2, r7, r0
 80191d4:	8812      	ldrh	r2, [r2, #0]
 80191d6:	491f      	ldr	r1, [pc, #124]	@ (8019254 <USB_DeactivateEndpoint+0x378>)
 80191d8:	430a      	orrs	r2, r1
 80191da:	b292      	uxth	r2, r2
 80191dc:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80191de:	687a      	ldr	r2, [r7, #4]
 80191e0:	683b      	ldr	r3, [r7, #0]
 80191e2:	781b      	ldrb	r3, [r3, #0]
 80191e4:	009b      	lsls	r3, r3, #2
 80191e6:	18d3      	adds	r3, r2, r3
 80191e8:	881b      	ldrh	r3, [r3, #0]
 80191ea:	b29a      	uxth	r2, r3
 80191ec:	2024      	movs	r0, #36	@ 0x24
 80191ee:	183b      	adds	r3, r7, r0
 80191f0:	4916      	ldr	r1, [pc, #88]	@ (801924c <USB_DeactivateEndpoint+0x370>)
 80191f2:	400a      	ands	r2, r1
 80191f4:	801a      	strh	r2, [r3, #0]
 80191f6:	687a      	ldr	r2, [r7, #4]
 80191f8:	683b      	ldr	r3, [r7, #0]
 80191fa:	781b      	ldrb	r3, [r3, #0]
 80191fc:	009b      	lsls	r3, r3, #2
 80191fe:	18d3      	adds	r3, r2, r3
 8019200:	183a      	adds	r2, r7, r0
 8019202:	8812      	ldrh	r2, [r2, #0]
 8019204:	4912      	ldr	r1, [pc, #72]	@ (8019250 <USB_DeactivateEndpoint+0x374>)
 8019206:	430a      	orrs	r2, r1
 8019208:	b292      	uxth	r2, r2
 801920a:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 801920c:	687a      	ldr	r2, [r7, #4]
 801920e:	683b      	ldr	r3, [r7, #0]
 8019210:	781b      	ldrb	r3, [r3, #0]
 8019212:	009b      	lsls	r3, r3, #2
 8019214:	18d3      	adds	r3, r2, r3
 8019216:	881b      	ldrh	r3, [r3, #0]
 8019218:	b29a      	uxth	r2, r3
 801921a:	2022      	movs	r0, #34	@ 0x22
 801921c:	183b      	adds	r3, r7, r0
 801921e:	490e      	ldr	r1, [pc, #56]	@ (8019258 <USB_DeactivateEndpoint+0x37c>)
 8019220:	400a      	ands	r2, r1
 8019222:	801a      	strh	r2, [r3, #0]
 8019224:	687a      	ldr	r2, [r7, #4]
 8019226:	683b      	ldr	r3, [r7, #0]
 8019228:	781b      	ldrb	r3, [r3, #0]
 801922a:	009b      	lsls	r3, r3, #2
 801922c:	18d3      	adds	r3, r2, r3
 801922e:	183a      	adds	r2, r7, r0
 8019230:	8812      	ldrh	r2, [r2, #0]
 8019232:	4907      	ldr	r1, [pc, #28]	@ (8019250 <USB_DeactivateEndpoint+0x374>)
 8019234:	430a      	orrs	r2, r1
 8019236:	b292      	uxth	r2, r2
 8019238:	801a      	strh	r2, [r3, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 801923a:	2300      	movs	r3, #0
}
 801923c:	0018      	movs	r0, r3
 801923e:	46bd      	mov	sp, r7
 8019240:	b00c      	add	sp, #48	@ 0x30
 8019242:	bd80      	pop	{r7, pc}
 8019244:	ffff8f8f 	.word	0xffff8f8f
 8019248:	ffff80c0 	.word	0xffff80c0
 801924c:	ffff8fbf 	.word	0xffff8fbf
 8019250:	ffff8080 	.word	0xffff8080
 8019254:	ffffc080 	.word	0xffffc080
 8019258:	ffffbf8f 	.word	0xffffbf8f

0801925c <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 801925c:	b590      	push	{r4, r7, lr}
 801925e:	b0c3      	sub	sp, #268	@ 0x10c
 8019260:	af00      	add	r7, sp, #0
 8019262:	6078      	str	r0, [r7, #4]
 8019264:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8019266:	683b      	ldr	r3, [r7, #0]
 8019268:	785b      	ldrb	r3, [r3, #1]
 801926a:	2b01      	cmp	r3, #1
 801926c:	d001      	beq.n	8019272 <USB_EPStartXfer+0x16>
 801926e:	f000 fd2d 	bl	8019ccc <USB_EPStartXfer+0xa70>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8019272:	683b      	ldr	r3, [r7, #0]
 8019274:	699a      	ldr	r2, [r3, #24]
 8019276:	683b      	ldr	r3, [r7, #0]
 8019278:	691b      	ldr	r3, [r3, #16]
 801927a:	429a      	cmp	r2, r3
 801927c:	d905      	bls.n	801928a <USB_EPStartXfer+0x2e>
    {
      len = ep->maxpacket;
 801927e:	683b      	ldr	r3, [r7, #0]
 8019280:	691b      	ldr	r3, [r3, #16]
 8019282:	1d7a      	adds	r2, r7, #5
 8019284:	32ff      	adds	r2, #255	@ 0xff
 8019286:	6013      	str	r3, [r2, #0]
 8019288:	e004      	b.n	8019294 <USB_EPStartXfer+0x38>
    }
    else
    {
      len = ep->xfer_len;
 801928a:	683b      	ldr	r3, [r7, #0]
 801928c:	699b      	ldr	r3, [r3, #24]
 801928e:	1d7a      	adds	r2, r7, #5
 8019290:	32ff      	adds	r2, #255	@ 0xff
 8019292:	6013      	str	r3, [r2, #0]
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8019294:	683b      	ldr	r3, [r7, #0]
 8019296:	7b1b      	ldrb	r3, [r3, #12]
 8019298:	2b00      	cmp	r3, #0
 801929a:	d125      	bne.n	80192e8 <USB_EPStartXfer+0x8c>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 801929c:	683b      	ldr	r3, [r7, #0]
 801929e:	6959      	ldr	r1, [r3, #20]
 80192a0:	683b      	ldr	r3, [r7, #0]
 80192a2:	88da      	ldrh	r2, [r3, #6]
 80192a4:	1d7b      	adds	r3, r7, #5
 80192a6:	33ff      	adds	r3, #255	@ 0xff
 80192a8:	681b      	ldr	r3, [r3, #0]
 80192aa:	b29b      	uxth	r3, r3
 80192ac:	6878      	ldr	r0, [r7, #4]
 80192ae:	f001 fa47 	bl	801a740 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80192b2:	687b      	ldr	r3, [r7, #4]
 80192b4:	613b      	str	r3, [r7, #16]
 80192b6:	687b      	ldr	r3, [r7, #4]
 80192b8:	2250      	movs	r2, #80	@ 0x50
 80192ba:	5a9b      	ldrh	r3, [r3, r2]
 80192bc:	b29b      	uxth	r3, r3
 80192be:	001a      	movs	r2, r3
 80192c0:	693b      	ldr	r3, [r7, #16]
 80192c2:	189b      	adds	r3, r3, r2
 80192c4:	613b      	str	r3, [r7, #16]
 80192c6:	683b      	ldr	r3, [r7, #0]
 80192c8:	781b      	ldrb	r3, [r3, #0]
 80192ca:	00da      	lsls	r2, r3, #3
 80192cc:	693b      	ldr	r3, [r7, #16]
 80192ce:	18d3      	adds	r3, r2, r3
 80192d0:	4ad7      	ldr	r2, [pc, #860]	@ (8019630 <USB_EPStartXfer+0x3d4>)
 80192d2:	4694      	mov	ip, r2
 80192d4:	4463      	add	r3, ip
 80192d6:	60fb      	str	r3, [r7, #12]
 80192d8:	1d7b      	adds	r3, r7, #5
 80192da:	33ff      	adds	r3, #255	@ 0xff
 80192dc:	681b      	ldr	r3, [r3, #0]
 80192de:	b29a      	uxth	r2, r3
 80192e0:	68fb      	ldr	r3, [r7, #12]
 80192e2:	801a      	strh	r2, [r3, #0]
 80192e4:	f000 fccd 	bl	8019c82 <USB_EPStartXfer+0xa26>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 80192e8:	683b      	ldr	r3, [r7, #0]
 80192ea:	78db      	ldrb	r3, [r3, #3]
 80192ec:	2b02      	cmp	r3, #2
 80192ee:	d000      	beq.n	80192f2 <USB_EPStartXfer+0x96>
 80192f0:	e362      	b.n	80199b8 <USB_EPStartXfer+0x75c>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 80192f2:	683b      	ldr	r3, [r7, #0]
 80192f4:	6a1a      	ldr	r2, [r3, #32]
 80192f6:	683b      	ldr	r3, [r7, #0]
 80192f8:	691b      	ldr	r3, [r3, #16]
 80192fa:	429a      	cmp	r2, r3
 80192fc:	d800      	bhi.n	8019300 <USB_EPStartXfer+0xa4>
 80192fe:	e309      	b.n	8019914 <USB_EPStartXfer+0x6b8>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8019300:	687a      	ldr	r2, [r7, #4]
 8019302:	683b      	ldr	r3, [r7, #0]
 8019304:	781b      	ldrb	r3, [r3, #0]
 8019306:	009b      	lsls	r3, r3, #2
 8019308:	18d3      	adds	r3, r2, r3
 801930a:	881b      	ldrh	r3, [r3, #0]
 801930c:	b29a      	uxth	r2, r3
 801930e:	2056      	movs	r0, #86	@ 0x56
 8019310:	183b      	adds	r3, r7, r0
 8019312:	49c8      	ldr	r1, [pc, #800]	@ (8019634 <USB_EPStartXfer+0x3d8>)
 8019314:	400a      	ands	r2, r1
 8019316:	801a      	strh	r2, [r3, #0]
 8019318:	687a      	ldr	r2, [r7, #4]
 801931a:	683b      	ldr	r3, [r7, #0]
 801931c:	781b      	ldrb	r3, [r3, #0]
 801931e:	009b      	lsls	r3, r3, #2
 8019320:	18d3      	adds	r3, r2, r3
 8019322:	183a      	adds	r2, r7, r0
 8019324:	8812      	ldrh	r2, [r2, #0]
 8019326:	49c4      	ldr	r1, [pc, #784]	@ (8019638 <USB_EPStartXfer+0x3dc>)
 8019328:	430a      	orrs	r2, r1
 801932a:	b292      	uxth	r2, r2
 801932c:	801a      	strh	r2, [r3, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 801932e:	683b      	ldr	r3, [r7, #0]
 8019330:	6a1a      	ldr	r2, [r3, #32]
 8019332:	1d7b      	adds	r3, r7, #5
 8019334:	33ff      	adds	r3, #255	@ 0xff
 8019336:	681b      	ldr	r3, [r3, #0]
 8019338:	1ad2      	subs	r2, r2, r3
 801933a:	683b      	ldr	r3, [r7, #0]
 801933c:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 801933e:	687a      	ldr	r2, [r7, #4]
 8019340:	683b      	ldr	r3, [r7, #0]
 8019342:	781b      	ldrb	r3, [r3, #0]
 8019344:	009b      	lsls	r3, r3, #2
 8019346:	18d3      	adds	r3, r2, r3
 8019348:	881b      	ldrh	r3, [r3, #0]
 801934a:	b29b      	uxth	r3, r3
 801934c:	001a      	movs	r2, r3
 801934e:	2340      	movs	r3, #64	@ 0x40
 8019350:	4013      	ands	r3, r2
 8019352:	d100      	bne.n	8019356 <USB_EPStartXfer+0xfa>
 8019354:	e176      	b.n	8019644 <USB_EPStartXfer+0x3e8>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8019356:	687b      	ldr	r3, [r7, #4]
 8019358:	633b      	str	r3, [r7, #48]	@ 0x30
 801935a:	683b      	ldr	r3, [r7, #0]
 801935c:	785b      	ldrb	r3, [r3, #1]
 801935e:	2b00      	cmp	r3, #0
 8019360:	d000      	beq.n	8019364 <USB_EPStartXfer+0x108>
 8019362:	e074      	b.n	801944e <USB_EPStartXfer+0x1f2>
 8019364:	687b      	ldr	r3, [r7, #4]
 8019366:	62bb      	str	r3, [r7, #40]	@ 0x28
 8019368:	687b      	ldr	r3, [r7, #4]
 801936a:	2250      	movs	r2, #80	@ 0x50
 801936c:	5a9b      	ldrh	r3, [r3, r2]
 801936e:	b29b      	uxth	r3, r3
 8019370:	001a      	movs	r2, r3
 8019372:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019374:	189b      	adds	r3, r3, r2
 8019376:	62bb      	str	r3, [r7, #40]	@ 0x28
 8019378:	683b      	ldr	r3, [r7, #0]
 801937a:	781b      	ldrb	r3, [r3, #0]
 801937c:	00da      	lsls	r2, r3, #3
 801937e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019380:	18d3      	adds	r3, r2, r3
 8019382:	4aae      	ldr	r2, [pc, #696]	@ (801963c <USB_EPStartXfer+0x3e0>)
 8019384:	4694      	mov	ip, r2
 8019386:	4463      	add	r3, ip
 8019388:	627b      	str	r3, [r7, #36]	@ 0x24
 801938a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801938c:	881b      	ldrh	r3, [r3, #0]
 801938e:	b29b      	uxth	r3, r3
 8019390:	059b      	lsls	r3, r3, #22
 8019392:	0d9b      	lsrs	r3, r3, #22
 8019394:	b29a      	uxth	r2, r3
 8019396:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019398:	801a      	strh	r2, [r3, #0]
 801939a:	1d7b      	adds	r3, r7, #5
 801939c:	33ff      	adds	r3, #255	@ 0xff
 801939e:	681b      	ldr	r3, [r3, #0]
 80193a0:	2b3e      	cmp	r3, #62	@ 0x3e
 80193a2:	d924      	bls.n	80193ee <USB_EPStartXfer+0x192>
 80193a4:	1d7b      	adds	r3, r7, #5
 80193a6:	33ff      	adds	r3, #255	@ 0xff
 80193a8:	681b      	ldr	r3, [r3, #0]
 80193aa:	095b      	lsrs	r3, r3, #5
 80193ac:	1c7a      	adds	r2, r7, #1
 80193ae:	32ff      	adds	r2, #255	@ 0xff
 80193b0:	6013      	str	r3, [r2, #0]
 80193b2:	1d7b      	adds	r3, r7, #5
 80193b4:	33ff      	adds	r3, #255	@ 0xff
 80193b6:	681b      	ldr	r3, [r3, #0]
 80193b8:	221f      	movs	r2, #31
 80193ba:	4013      	ands	r3, r2
 80193bc:	d106      	bne.n	80193cc <USB_EPStartXfer+0x170>
 80193be:	1c7b      	adds	r3, r7, #1
 80193c0:	33ff      	adds	r3, #255	@ 0xff
 80193c2:	681b      	ldr	r3, [r3, #0]
 80193c4:	3b01      	subs	r3, #1
 80193c6:	1c7a      	adds	r2, r7, #1
 80193c8:	32ff      	adds	r2, #255	@ 0xff
 80193ca:	6013      	str	r3, [r2, #0]
 80193cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80193ce:	881b      	ldrh	r3, [r3, #0]
 80193d0:	b29a      	uxth	r2, r3
 80193d2:	1c7b      	adds	r3, r7, #1
 80193d4:	33ff      	adds	r3, #255	@ 0xff
 80193d6:	681b      	ldr	r3, [r3, #0]
 80193d8:	b29b      	uxth	r3, r3
 80193da:	029b      	lsls	r3, r3, #10
 80193dc:	b29b      	uxth	r3, r3
 80193de:	4313      	orrs	r3, r2
 80193e0:	b29b      	uxth	r3, r3
 80193e2:	4a97      	ldr	r2, [pc, #604]	@ (8019640 <USB_EPStartXfer+0x3e4>)
 80193e4:	4313      	orrs	r3, r2
 80193e6:	b29a      	uxth	r2, r3
 80193e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80193ea:	801a      	strh	r2, [r3, #0]
 80193ec:	e04a      	b.n	8019484 <USB_EPStartXfer+0x228>
 80193ee:	1d7b      	adds	r3, r7, #5
 80193f0:	33ff      	adds	r3, #255	@ 0xff
 80193f2:	681b      	ldr	r3, [r3, #0]
 80193f4:	2b00      	cmp	r3, #0
 80193f6:	d108      	bne.n	801940a <USB_EPStartXfer+0x1ae>
 80193f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80193fa:	881b      	ldrh	r3, [r3, #0]
 80193fc:	b29b      	uxth	r3, r3
 80193fe:	4a90      	ldr	r2, [pc, #576]	@ (8019640 <USB_EPStartXfer+0x3e4>)
 8019400:	4313      	orrs	r3, r2
 8019402:	b29a      	uxth	r2, r3
 8019404:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019406:	801a      	strh	r2, [r3, #0]
 8019408:	e03c      	b.n	8019484 <USB_EPStartXfer+0x228>
 801940a:	1d7b      	adds	r3, r7, #5
 801940c:	33ff      	adds	r3, #255	@ 0xff
 801940e:	681b      	ldr	r3, [r3, #0]
 8019410:	085b      	lsrs	r3, r3, #1
 8019412:	1c7a      	adds	r2, r7, #1
 8019414:	32ff      	adds	r2, #255	@ 0xff
 8019416:	6013      	str	r3, [r2, #0]
 8019418:	1d7b      	adds	r3, r7, #5
 801941a:	33ff      	adds	r3, #255	@ 0xff
 801941c:	681b      	ldr	r3, [r3, #0]
 801941e:	2201      	movs	r2, #1
 8019420:	4013      	ands	r3, r2
 8019422:	d006      	beq.n	8019432 <USB_EPStartXfer+0x1d6>
 8019424:	1c7b      	adds	r3, r7, #1
 8019426:	33ff      	adds	r3, #255	@ 0xff
 8019428:	681b      	ldr	r3, [r3, #0]
 801942a:	3301      	adds	r3, #1
 801942c:	1c7a      	adds	r2, r7, #1
 801942e:	32ff      	adds	r2, #255	@ 0xff
 8019430:	6013      	str	r3, [r2, #0]
 8019432:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019434:	881b      	ldrh	r3, [r3, #0]
 8019436:	b29a      	uxth	r2, r3
 8019438:	1c7b      	adds	r3, r7, #1
 801943a:	33ff      	adds	r3, #255	@ 0xff
 801943c:	681b      	ldr	r3, [r3, #0]
 801943e:	b29b      	uxth	r3, r3
 8019440:	029b      	lsls	r3, r3, #10
 8019442:	b29b      	uxth	r3, r3
 8019444:	4313      	orrs	r3, r2
 8019446:	b29a      	uxth	r2, r3
 8019448:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801944a:	801a      	strh	r2, [r3, #0]
 801944c:	e01a      	b.n	8019484 <USB_EPStartXfer+0x228>
 801944e:	683b      	ldr	r3, [r7, #0]
 8019450:	785b      	ldrb	r3, [r3, #1]
 8019452:	2b01      	cmp	r3, #1
 8019454:	d116      	bne.n	8019484 <USB_EPStartXfer+0x228>
 8019456:	687b      	ldr	r3, [r7, #4]
 8019458:	2250      	movs	r2, #80	@ 0x50
 801945a:	5a9b      	ldrh	r3, [r3, r2]
 801945c:	b29b      	uxth	r3, r3
 801945e:	001a      	movs	r2, r3
 8019460:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019462:	189b      	adds	r3, r3, r2
 8019464:	633b      	str	r3, [r7, #48]	@ 0x30
 8019466:	683b      	ldr	r3, [r7, #0]
 8019468:	781b      	ldrb	r3, [r3, #0]
 801946a:	00da      	lsls	r2, r3, #3
 801946c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801946e:	18d3      	adds	r3, r2, r3
 8019470:	4a72      	ldr	r2, [pc, #456]	@ (801963c <USB_EPStartXfer+0x3e0>)
 8019472:	4694      	mov	ip, r2
 8019474:	4463      	add	r3, ip
 8019476:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8019478:	1d7b      	adds	r3, r7, #5
 801947a:	33ff      	adds	r3, #255	@ 0xff
 801947c:	681b      	ldr	r3, [r3, #0]
 801947e:	b29a      	uxth	r2, r3
 8019480:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019482:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8019484:	2076      	movs	r0, #118	@ 0x76
 8019486:	183b      	adds	r3, r7, r0
 8019488:	683a      	ldr	r2, [r7, #0]
 801948a:	8952      	ldrh	r2, [r2, #10]
 801948c:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 801948e:	683b      	ldr	r3, [r7, #0]
 8019490:	6959      	ldr	r1, [r3, #20]
 8019492:	1d7b      	adds	r3, r7, #5
 8019494:	33ff      	adds	r3, #255	@ 0xff
 8019496:	681b      	ldr	r3, [r3, #0]
 8019498:	b29c      	uxth	r4, r3
 801949a:	183b      	adds	r3, r7, r0
 801949c:	881a      	ldrh	r2, [r3, #0]
 801949e:	6878      	ldr	r0, [r7, #4]
 80194a0:	0023      	movs	r3, r4
 80194a2:	f001 f94d 	bl	801a740 <USB_WritePMA>
            ep->xfer_buff += len;
 80194a6:	683b      	ldr	r3, [r7, #0]
 80194a8:	695a      	ldr	r2, [r3, #20]
 80194aa:	1d7b      	adds	r3, r7, #5
 80194ac:	33ff      	adds	r3, #255	@ 0xff
 80194ae:	681b      	ldr	r3, [r3, #0]
 80194b0:	18d2      	adds	r2, r2, r3
 80194b2:	683b      	ldr	r3, [r7, #0]
 80194b4:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80194b6:	683b      	ldr	r3, [r7, #0]
 80194b8:	6a1a      	ldr	r2, [r3, #32]
 80194ba:	683b      	ldr	r3, [r7, #0]
 80194bc:	691b      	ldr	r3, [r3, #16]
 80194be:	429a      	cmp	r2, r3
 80194c0:	d908      	bls.n	80194d4 <USB_EPStartXfer+0x278>
            {
              ep->xfer_len_db -= len;
 80194c2:	683b      	ldr	r3, [r7, #0]
 80194c4:	6a1a      	ldr	r2, [r3, #32]
 80194c6:	1d7b      	adds	r3, r7, #5
 80194c8:	33ff      	adds	r3, #255	@ 0xff
 80194ca:	681b      	ldr	r3, [r3, #0]
 80194cc:	1ad2      	subs	r2, r2, r3
 80194ce:	683b      	ldr	r3, [r7, #0]
 80194d0:	621a      	str	r2, [r3, #32]
 80194d2:	e007      	b.n	80194e4 <USB_EPStartXfer+0x288>
            }
            else
            {
              len = ep->xfer_len_db;
 80194d4:	683b      	ldr	r3, [r7, #0]
 80194d6:	6a1b      	ldr	r3, [r3, #32]
 80194d8:	1d7a      	adds	r2, r7, #5
 80194da:	32ff      	adds	r2, #255	@ 0xff
 80194dc:	6013      	str	r3, [r2, #0]
              ep->xfer_len_db = 0U;
 80194de:	683b      	ldr	r3, [r7, #0]
 80194e0:	2200      	movs	r2, #0
 80194e2:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80194e4:	683b      	ldr	r3, [r7, #0]
 80194e6:	785b      	ldrb	r3, [r3, #1]
 80194e8:	2b00      	cmp	r3, #0
 80194ea:	d000      	beq.n	80194ee <USB_EPStartXfer+0x292>
 80194ec:	e070      	b.n	80195d0 <USB_EPStartXfer+0x374>
 80194ee:	687b      	ldr	r3, [r7, #4]
 80194f0:	61bb      	str	r3, [r7, #24]
 80194f2:	687b      	ldr	r3, [r7, #4]
 80194f4:	2250      	movs	r2, #80	@ 0x50
 80194f6:	5a9b      	ldrh	r3, [r3, r2]
 80194f8:	b29b      	uxth	r3, r3
 80194fa:	001a      	movs	r2, r3
 80194fc:	69bb      	ldr	r3, [r7, #24]
 80194fe:	189b      	adds	r3, r3, r2
 8019500:	61bb      	str	r3, [r7, #24]
 8019502:	683b      	ldr	r3, [r7, #0]
 8019504:	781b      	ldrb	r3, [r3, #0]
 8019506:	00da      	lsls	r2, r3, #3
 8019508:	69bb      	ldr	r3, [r7, #24]
 801950a:	18d3      	adds	r3, r2, r3
 801950c:	4a48      	ldr	r2, [pc, #288]	@ (8019630 <USB_EPStartXfer+0x3d4>)
 801950e:	4694      	mov	ip, r2
 8019510:	4463      	add	r3, ip
 8019512:	617b      	str	r3, [r7, #20]
 8019514:	697b      	ldr	r3, [r7, #20]
 8019516:	881b      	ldrh	r3, [r3, #0]
 8019518:	b29b      	uxth	r3, r3
 801951a:	059b      	lsls	r3, r3, #22
 801951c:	0d9b      	lsrs	r3, r3, #22
 801951e:	b29a      	uxth	r2, r3
 8019520:	697b      	ldr	r3, [r7, #20]
 8019522:	801a      	strh	r2, [r3, #0]
 8019524:	1d7b      	adds	r3, r7, #5
 8019526:	33ff      	adds	r3, #255	@ 0xff
 8019528:	681b      	ldr	r3, [r3, #0]
 801952a:	2b3e      	cmp	r3, #62	@ 0x3e
 801952c:	d922      	bls.n	8019574 <USB_EPStartXfer+0x318>
 801952e:	1d7b      	adds	r3, r7, #5
 8019530:	33ff      	adds	r3, #255	@ 0xff
 8019532:	681b      	ldr	r3, [r3, #0]
 8019534:	095b      	lsrs	r3, r3, #5
 8019536:	21fc      	movs	r1, #252	@ 0xfc
 8019538:	187a      	adds	r2, r7, r1
 801953a:	6013      	str	r3, [r2, #0]
 801953c:	1d7b      	adds	r3, r7, #5
 801953e:	33ff      	adds	r3, #255	@ 0xff
 8019540:	681b      	ldr	r3, [r3, #0]
 8019542:	221f      	movs	r2, #31
 8019544:	4013      	ands	r3, r2
 8019546:	d104      	bne.n	8019552 <USB_EPStartXfer+0x2f6>
 8019548:	187b      	adds	r3, r7, r1
 801954a:	681b      	ldr	r3, [r3, #0]
 801954c:	3b01      	subs	r3, #1
 801954e:	187a      	adds	r2, r7, r1
 8019550:	6013      	str	r3, [r2, #0]
 8019552:	697b      	ldr	r3, [r7, #20]
 8019554:	881b      	ldrh	r3, [r3, #0]
 8019556:	b29a      	uxth	r2, r3
 8019558:	23fc      	movs	r3, #252	@ 0xfc
 801955a:	18fb      	adds	r3, r7, r3
 801955c:	681b      	ldr	r3, [r3, #0]
 801955e:	b29b      	uxth	r3, r3
 8019560:	029b      	lsls	r3, r3, #10
 8019562:	b29b      	uxth	r3, r3
 8019564:	4313      	orrs	r3, r2
 8019566:	b29b      	uxth	r3, r3
 8019568:	4a35      	ldr	r2, [pc, #212]	@ (8019640 <USB_EPStartXfer+0x3e4>)
 801956a:	4313      	orrs	r3, r2
 801956c:	b29a      	uxth	r2, r3
 801956e:	697b      	ldr	r3, [r7, #20]
 8019570:	801a      	strh	r2, [r3, #0]
 8019572:	e04a      	b.n	801960a <USB_EPStartXfer+0x3ae>
 8019574:	1d7b      	adds	r3, r7, #5
 8019576:	33ff      	adds	r3, #255	@ 0xff
 8019578:	681b      	ldr	r3, [r3, #0]
 801957a:	2b00      	cmp	r3, #0
 801957c:	d108      	bne.n	8019590 <USB_EPStartXfer+0x334>
 801957e:	697b      	ldr	r3, [r7, #20]
 8019580:	881b      	ldrh	r3, [r3, #0]
 8019582:	b29b      	uxth	r3, r3
 8019584:	4a2e      	ldr	r2, [pc, #184]	@ (8019640 <USB_EPStartXfer+0x3e4>)
 8019586:	4313      	orrs	r3, r2
 8019588:	b29a      	uxth	r2, r3
 801958a:	697b      	ldr	r3, [r7, #20]
 801958c:	801a      	strh	r2, [r3, #0]
 801958e:	e03c      	b.n	801960a <USB_EPStartXfer+0x3ae>
 8019590:	1d7b      	adds	r3, r7, #5
 8019592:	33ff      	adds	r3, #255	@ 0xff
 8019594:	681b      	ldr	r3, [r3, #0]
 8019596:	085b      	lsrs	r3, r3, #1
 8019598:	21fc      	movs	r1, #252	@ 0xfc
 801959a:	187a      	adds	r2, r7, r1
 801959c:	6013      	str	r3, [r2, #0]
 801959e:	1d7b      	adds	r3, r7, #5
 80195a0:	33ff      	adds	r3, #255	@ 0xff
 80195a2:	681b      	ldr	r3, [r3, #0]
 80195a4:	2201      	movs	r2, #1
 80195a6:	4013      	ands	r3, r2
 80195a8:	d004      	beq.n	80195b4 <USB_EPStartXfer+0x358>
 80195aa:	187b      	adds	r3, r7, r1
 80195ac:	681b      	ldr	r3, [r3, #0]
 80195ae:	3301      	adds	r3, #1
 80195b0:	187a      	adds	r2, r7, r1
 80195b2:	6013      	str	r3, [r2, #0]
 80195b4:	697b      	ldr	r3, [r7, #20]
 80195b6:	881b      	ldrh	r3, [r3, #0]
 80195b8:	b29a      	uxth	r2, r3
 80195ba:	23fc      	movs	r3, #252	@ 0xfc
 80195bc:	18fb      	adds	r3, r7, r3
 80195be:	681b      	ldr	r3, [r3, #0]
 80195c0:	b29b      	uxth	r3, r3
 80195c2:	029b      	lsls	r3, r3, #10
 80195c4:	b29b      	uxth	r3, r3
 80195c6:	4313      	orrs	r3, r2
 80195c8:	b29a      	uxth	r2, r3
 80195ca:	697b      	ldr	r3, [r7, #20]
 80195cc:	801a      	strh	r2, [r3, #0]
 80195ce:	e01c      	b.n	801960a <USB_EPStartXfer+0x3ae>
 80195d0:	683b      	ldr	r3, [r7, #0]
 80195d2:	785b      	ldrb	r3, [r3, #1]
 80195d4:	2b01      	cmp	r3, #1
 80195d6:	d118      	bne.n	801960a <USB_EPStartXfer+0x3ae>
 80195d8:	687b      	ldr	r3, [r7, #4]
 80195da:	623b      	str	r3, [r7, #32]
 80195dc:	687b      	ldr	r3, [r7, #4]
 80195de:	2250      	movs	r2, #80	@ 0x50
 80195e0:	5a9b      	ldrh	r3, [r3, r2]
 80195e2:	b29b      	uxth	r3, r3
 80195e4:	001a      	movs	r2, r3
 80195e6:	6a3b      	ldr	r3, [r7, #32]
 80195e8:	189b      	adds	r3, r3, r2
 80195ea:	623b      	str	r3, [r7, #32]
 80195ec:	683b      	ldr	r3, [r7, #0]
 80195ee:	781b      	ldrb	r3, [r3, #0]
 80195f0:	00da      	lsls	r2, r3, #3
 80195f2:	6a3b      	ldr	r3, [r7, #32]
 80195f4:	18d3      	adds	r3, r2, r3
 80195f6:	4a0e      	ldr	r2, [pc, #56]	@ (8019630 <USB_EPStartXfer+0x3d4>)
 80195f8:	4694      	mov	ip, r2
 80195fa:	4463      	add	r3, ip
 80195fc:	61fb      	str	r3, [r7, #28]
 80195fe:	1d7b      	adds	r3, r7, #5
 8019600:	33ff      	adds	r3, #255	@ 0xff
 8019602:	681b      	ldr	r3, [r3, #0]
 8019604:	b29a      	uxth	r2, r3
 8019606:	69fb      	ldr	r3, [r7, #28]
 8019608:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 801960a:	2076      	movs	r0, #118	@ 0x76
 801960c:	183b      	adds	r3, r7, r0
 801960e:	683a      	ldr	r2, [r7, #0]
 8019610:	8912      	ldrh	r2, [r2, #8]
 8019612:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8019614:	683b      	ldr	r3, [r7, #0]
 8019616:	6959      	ldr	r1, [r3, #20]
 8019618:	1d7b      	adds	r3, r7, #5
 801961a:	33ff      	adds	r3, #255	@ 0xff
 801961c:	681b      	ldr	r3, [r3, #0]
 801961e:	b29c      	uxth	r4, r3
 8019620:	183b      	adds	r3, r7, r0
 8019622:	881a      	ldrh	r2, [r3, #0]
 8019624:	6878      	ldr	r0, [r7, #4]
 8019626:	0023      	movs	r3, r4
 8019628:	f001 f88a 	bl	801a740 <USB_WritePMA>
 801962c:	e329      	b.n	8019c82 <USB_EPStartXfer+0xa26>
 801962e:	46c0      	nop			@ (mov r8, r8)
 8019630:	00000402 	.word	0x00000402
 8019634:	ffff8f8f 	.word	0xffff8f8f
 8019638:	ffff8180 	.word	0xffff8180
 801963c:	00000406 	.word	0x00000406
 8019640:	ffff8000 	.word	0xffff8000
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8019644:	683b      	ldr	r3, [r7, #0]
 8019646:	785b      	ldrb	r3, [r3, #1]
 8019648:	2b00      	cmp	r3, #0
 801964a:	d000      	beq.n	801964e <USB_EPStartXfer+0x3f2>
 801964c:	e070      	b.n	8019730 <USB_EPStartXfer+0x4d4>
 801964e:	687b      	ldr	r3, [r7, #4]
 8019650:	64bb      	str	r3, [r7, #72]	@ 0x48
 8019652:	687b      	ldr	r3, [r7, #4]
 8019654:	2250      	movs	r2, #80	@ 0x50
 8019656:	5a9b      	ldrh	r3, [r3, r2]
 8019658:	b29b      	uxth	r3, r3
 801965a:	001a      	movs	r2, r3
 801965c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801965e:	189b      	adds	r3, r3, r2
 8019660:	64bb      	str	r3, [r7, #72]	@ 0x48
 8019662:	683b      	ldr	r3, [r7, #0]
 8019664:	781b      	ldrb	r3, [r3, #0]
 8019666:	00da      	lsls	r2, r3, #3
 8019668:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801966a:	18d3      	adds	r3, r2, r3
 801966c:	4acd      	ldr	r2, [pc, #820]	@ (80199a4 <USB_EPStartXfer+0x748>)
 801966e:	4694      	mov	ip, r2
 8019670:	4463      	add	r3, ip
 8019672:	647b      	str	r3, [r7, #68]	@ 0x44
 8019674:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8019676:	881b      	ldrh	r3, [r3, #0]
 8019678:	b29b      	uxth	r3, r3
 801967a:	059b      	lsls	r3, r3, #22
 801967c:	0d9b      	lsrs	r3, r3, #22
 801967e:	b29a      	uxth	r2, r3
 8019680:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8019682:	801a      	strh	r2, [r3, #0]
 8019684:	1d7b      	adds	r3, r7, #5
 8019686:	33ff      	adds	r3, #255	@ 0xff
 8019688:	681b      	ldr	r3, [r3, #0]
 801968a:	2b3e      	cmp	r3, #62	@ 0x3e
 801968c:	d922      	bls.n	80196d4 <USB_EPStartXfer+0x478>
 801968e:	1d7b      	adds	r3, r7, #5
 8019690:	33ff      	adds	r3, #255	@ 0xff
 8019692:	681b      	ldr	r3, [r3, #0]
 8019694:	095b      	lsrs	r3, r3, #5
 8019696:	21f8      	movs	r1, #248	@ 0xf8
 8019698:	187a      	adds	r2, r7, r1
 801969a:	6013      	str	r3, [r2, #0]
 801969c:	1d7b      	adds	r3, r7, #5
 801969e:	33ff      	adds	r3, #255	@ 0xff
 80196a0:	681b      	ldr	r3, [r3, #0]
 80196a2:	221f      	movs	r2, #31
 80196a4:	4013      	ands	r3, r2
 80196a6:	d104      	bne.n	80196b2 <USB_EPStartXfer+0x456>
 80196a8:	187b      	adds	r3, r7, r1
 80196aa:	681b      	ldr	r3, [r3, #0]
 80196ac:	3b01      	subs	r3, #1
 80196ae:	187a      	adds	r2, r7, r1
 80196b0:	6013      	str	r3, [r2, #0]
 80196b2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80196b4:	881b      	ldrh	r3, [r3, #0]
 80196b6:	b29a      	uxth	r2, r3
 80196b8:	23f8      	movs	r3, #248	@ 0xf8
 80196ba:	18fb      	adds	r3, r7, r3
 80196bc:	681b      	ldr	r3, [r3, #0]
 80196be:	b29b      	uxth	r3, r3
 80196c0:	029b      	lsls	r3, r3, #10
 80196c2:	b29b      	uxth	r3, r3
 80196c4:	4313      	orrs	r3, r2
 80196c6:	b29b      	uxth	r3, r3
 80196c8:	4ab7      	ldr	r2, [pc, #732]	@ (80199a8 <USB_EPStartXfer+0x74c>)
 80196ca:	4313      	orrs	r3, r2
 80196cc:	b29a      	uxth	r2, r3
 80196ce:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80196d0:	801a      	strh	r2, [r3, #0]
 80196d2:	e04a      	b.n	801976a <USB_EPStartXfer+0x50e>
 80196d4:	1d7b      	adds	r3, r7, #5
 80196d6:	33ff      	adds	r3, #255	@ 0xff
 80196d8:	681b      	ldr	r3, [r3, #0]
 80196da:	2b00      	cmp	r3, #0
 80196dc:	d108      	bne.n	80196f0 <USB_EPStartXfer+0x494>
 80196de:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80196e0:	881b      	ldrh	r3, [r3, #0]
 80196e2:	b29b      	uxth	r3, r3
 80196e4:	4ab0      	ldr	r2, [pc, #704]	@ (80199a8 <USB_EPStartXfer+0x74c>)
 80196e6:	4313      	orrs	r3, r2
 80196e8:	b29a      	uxth	r2, r3
 80196ea:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80196ec:	801a      	strh	r2, [r3, #0]
 80196ee:	e03c      	b.n	801976a <USB_EPStartXfer+0x50e>
 80196f0:	1d7b      	adds	r3, r7, #5
 80196f2:	33ff      	adds	r3, #255	@ 0xff
 80196f4:	681b      	ldr	r3, [r3, #0]
 80196f6:	085b      	lsrs	r3, r3, #1
 80196f8:	21f8      	movs	r1, #248	@ 0xf8
 80196fa:	187a      	adds	r2, r7, r1
 80196fc:	6013      	str	r3, [r2, #0]
 80196fe:	1d7b      	adds	r3, r7, #5
 8019700:	33ff      	adds	r3, #255	@ 0xff
 8019702:	681b      	ldr	r3, [r3, #0]
 8019704:	2201      	movs	r2, #1
 8019706:	4013      	ands	r3, r2
 8019708:	d004      	beq.n	8019714 <USB_EPStartXfer+0x4b8>
 801970a:	187b      	adds	r3, r7, r1
 801970c:	681b      	ldr	r3, [r3, #0]
 801970e:	3301      	adds	r3, #1
 8019710:	187a      	adds	r2, r7, r1
 8019712:	6013      	str	r3, [r2, #0]
 8019714:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8019716:	881b      	ldrh	r3, [r3, #0]
 8019718:	b29a      	uxth	r2, r3
 801971a:	23f8      	movs	r3, #248	@ 0xf8
 801971c:	18fb      	adds	r3, r7, r3
 801971e:	681b      	ldr	r3, [r3, #0]
 8019720:	b29b      	uxth	r3, r3
 8019722:	029b      	lsls	r3, r3, #10
 8019724:	b29b      	uxth	r3, r3
 8019726:	4313      	orrs	r3, r2
 8019728:	b29a      	uxth	r2, r3
 801972a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801972c:	801a      	strh	r2, [r3, #0]
 801972e:	e01c      	b.n	801976a <USB_EPStartXfer+0x50e>
 8019730:	683b      	ldr	r3, [r7, #0]
 8019732:	785b      	ldrb	r3, [r3, #1]
 8019734:	2b01      	cmp	r3, #1
 8019736:	d118      	bne.n	801976a <USB_EPStartXfer+0x50e>
 8019738:	687b      	ldr	r3, [r7, #4]
 801973a:	653b      	str	r3, [r7, #80]	@ 0x50
 801973c:	687b      	ldr	r3, [r7, #4]
 801973e:	2250      	movs	r2, #80	@ 0x50
 8019740:	5a9b      	ldrh	r3, [r3, r2]
 8019742:	b29b      	uxth	r3, r3
 8019744:	001a      	movs	r2, r3
 8019746:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8019748:	189b      	adds	r3, r3, r2
 801974a:	653b      	str	r3, [r7, #80]	@ 0x50
 801974c:	683b      	ldr	r3, [r7, #0]
 801974e:	781b      	ldrb	r3, [r3, #0]
 8019750:	00da      	lsls	r2, r3, #3
 8019752:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8019754:	18d3      	adds	r3, r2, r3
 8019756:	4a93      	ldr	r2, [pc, #588]	@ (80199a4 <USB_EPStartXfer+0x748>)
 8019758:	4694      	mov	ip, r2
 801975a:	4463      	add	r3, ip
 801975c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801975e:	1d7b      	adds	r3, r7, #5
 8019760:	33ff      	adds	r3, #255	@ 0xff
 8019762:	681b      	ldr	r3, [r3, #0]
 8019764:	b29a      	uxth	r2, r3
 8019766:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8019768:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 801976a:	2076      	movs	r0, #118	@ 0x76
 801976c:	183b      	adds	r3, r7, r0
 801976e:	683a      	ldr	r2, [r7, #0]
 8019770:	8912      	ldrh	r2, [r2, #8]
 8019772:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8019774:	683b      	ldr	r3, [r7, #0]
 8019776:	6959      	ldr	r1, [r3, #20]
 8019778:	1d7b      	adds	r3, r7, #5
 801977a:	33ff      	adds	r3, #255	@ 0xff
 801977c:	681b      	ldr	r3, [r3, #0]
 801977e:	b29c      	uxth	r4, r3
 8019780:	183b      	adds	r3, r7, r0
 8019782:	881a      	ldrh	r2, [r3, #0]
 8019784:	6878      	ldr	r0, [r7, #4]
 8019786:	0023      	movs	r3, r4
 8019788:	f000 ffda 	bl	801a740 <USB_WritePMA>
            ep->xfer_buff += len;
 801978c:	683b      	ldr	r3, [r7, #0]
 801978e:	695a      	ldr	r2, [r3, #20]
 8019790:	1d7b      	adds	r3, r7, #5
 8019792:	33ff      	adds	r3, #255	@ 0xff
 8019794:	681b      	ldr	r3, [r3, #0]
 8019796:	18d2      	adds	r2, r2, r3
 8019798:	683b      	ldr	r3, [r7, #0]
 801979a:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 801979c:	683b      	ldr	r3, [r7, #0]
 801979e:	6a1a      	ldr	r2, [r3, #32]
 80197a0:	683b      	ldr	r3, [r7, #0]
 80197a2:	691b      	ldr	r3, [r3, #16]
 80197a4:	429a      	cmp	r2, r3
 80197a6:	d908      	bls.n	80197ba <USB_EPStartXfer+0x55e>
            {
              ep->xfer_len_db -= len;
 80197a8:	683b      	ldr	r3, [r7, #0]
 80197aa:	6a1a      	ldr	r2, [r3, #32]
 80197ac:	1d7b      	adds	r3, r7, #5
 80197ae:	33ff      	adds	r3, #255	@ 0xff
 80197b0:	681b      	ldr	r3, [r3, #0]
 80197b2:	1ad2      	subs	r2, r2, r3
 80197b4:	683b      	ldr	r3, [r7, #0]
 80197b6:	621a      	str	r2, [r3, #32]
 80197b8:	e007      	b.n	80197ca <USB_EPStartXfer+0x56e>
            }
            else
            {
              len = ep->xfer_len_db;
 80197ba:	683b      	ldr	r3, [r7, #0]
 80197bc:	6a1b      	ldr	r3, [r3, #32]
 80197be:	1d7a      	adds	r2, r7, #5
 80197c0:	32ff      	adds	r2, #255	@ 0xff
 80197c2:	6013      	str	r3, [r2, #0]
              ep->xfer_len_db = 0U;
 80197c4:	683b      	ldr	r3, [r7, #0]
 80197c6:	2200      	movs	r2, #0
 80197c8:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80197ca:	687b      	ldr	r3, [r7, #4]
 80197cc:	643b      	str	r3, [r7, #64]	@ 0x40
 80197ce:	683b      	ldr	r3, [r7, #0]
 80197d0:	785b      	ldrb	r3, [r3, #1]
 80197d2:	2b00      	cmp	r3, #0
 80197d4:	d000      	beq.n	80197d8 <USB_EPStartXfer+0x57c>
 80197d6:	e070      	b.n	80198ba <USB_EPStartXfer+0x65e>
 80197d8:	687b      	ldr	r3, [r7, #4]
 80197da:	63bb      	str	r3, [r7, #56]	@ 0x38
 80197dc:	687b      	ldr	r3, [r7, #4]
 80197de:	2250      	movs	r2, #80	@ 0x50
 80197e0:	5a9b      	ldrh	r3, [r3, r2]
 80197e2:	b29b      	uxth	r3, r3
 80197e4:	001a      	movs	r2, r3
 80197e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80197e8:	189b      	adds	r3, r3, r2
 80197ea:	63bb      	str	r3, [r7, #56]	@ 0x38
 80197ec:	683b      	ldr	r3, [r7, #0]
 80197ee:	781b      	ldrb	r3, [r3, #0]
 80197f0:	00da      	lsls	r2, r3, #3
 80197f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80197f4:	18d3      	adds	r3, r2, r3
 80197f6:	4a6d      	ldr	r2, [pc, #436]	@ (80199ac <USB_EPStartXfer+0x750>)
 80197f8:	4694      	mov	ip, r2
 80197fa:	4463      	add	r3, ip
 80197fc:	637b      	str	r3, [r7, #52]	@ 0x34
 80197fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8019800:	881b      	ldrh	r3, [r3, #0]
 8019802:	b29b      	uxth	r3, r3
 8019804:	059b      	lsls	r3, r3, #22
 8019806:	0d9b      	lsrs	r3, r3, #22
 8019808:	b29a      	uxth	r2, r3
 801980a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801980c:	801a      	strh	r2, [r3, #0]
 801980e:	1d7b      	adds	r3, r7, #5
 8019810:	33ff      	adds	r3, #255	@ 0xff
 8019812:	681b      	ldr	r3, [r3, #0]
 8019814:	2b3e      	cmp	r3, #62	@ 0x3e
 8019816:	d922      	bls.n	801985e <USB_EPStartXfer+0x602>
 8019818:	1d7b      	adds	r3, r7, #5
 801981a:	33ff      	adds	r3, #255	@ 0xff
 801981c:	681b      	ldr	r3, [r3, #0]
 801981e:	095b      	lsrs	r3, r3, #5
 8019820:	21f4      	movs	r1, #244	@ 0xf4
 8019822:	187a      	adds	r2, r7, r1
 8019824:	6013      	str	r3, [r2, #0]
 8019826:	1d7b      	adds	r3, r7, #5
 8019828:	33ff      	adds	r3, #255	@ 0xff
 801982a:	681b      	ldr	r3, [r3, #0]
 801982c:	221f      	movs	r2, #31
 801982e:	4013      	ands	r3, r2
 8019830:	d104      	bne.n	801983c <USB_EPStartXfer+0x5e0>
 8019832:	187b      	adds	r3, r7, r1
 8019834:	681b      	ldr	r3, [r3, #0]
 8019836:	3b01      	subs	r3, #1
 8019838:	187a      	adds	r2, r7, r1
 801983a:	6013      	str	r3, [r2, #0]
 801983c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801983e:	881b      	ldrh	r3, [r3, #0]
 8019840:	b29a      	uxth	r2, r3
 8019842:	23f4      	movs	r3, #244	@ 0xf4
 8019844:	18fb      	adds	r3, r7, r3
 8019846:	681b      	ldr	r3, [r3, #0]
 8019848:	b29b      	uxth	r3, r3
 801984a:	029b      	lsls	r3, r3, #10
 801984c:	b29b      	uxth	r3, r3
 801984e:	4313      	orrs	r3, r2
 8019850:	b29b      	uxth	r3, r3
 8019852:	4a55      	ldr	r2, [pc, #340]	@ (80199a8 <USB_EPStartXfer+0x74c>)
 8019854:	4313      	orrs	r3, r2
 8019856:	b29a      	uxth	r2, r3
 8019858:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801985a:	801a      	strh	r2, [r3, #0]
 801985c:	e048      	b.n	80198f0 <USB_EPStartXfer+0x694>
 801985e:	1d7b      	adds	r3, r7, #5
 8019860:	33ff      	adds	r3, #255	@ 0xff
 8019862:	681b      	ldr	r3, [r3, #0]
 8019864:	2b00      	cmp	r3, #0
 8019866:	d108      	bne.n	801987a <USB_EPStartXfer+0x61e>
 8019868:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801986a:	881b      	ldrh	r3, [r3, #0]
 801986c:	b29b      	uxth	r3, r3
 801986e:	4a4e      	ldr	r2, [pc, #312]	@ (80199a8 <USB_EPStartXfer+0x74c>)
 8019870:	4313      	orrs	r3, r2
 8019872:	b29a      	uxth	r2, r3
 8019874:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8019876:	801a      	strh	r2, [r3, #0]
 8019878:	e03a      	b.n	80198f0 <USB_EPStartXfer+0x694>
 801987a:	1d7b      	adds	r3, r7, #5
 801987c:	33ff      	adds	r3, #255	@ 0xff
 801987e:	681b      	ldr	r3, [r3, #0]
 8019880:	085b      	lsrs	r3, r3, #1
 8019882:	21f4      	movs	r1, #244	@ 0xf4
 8019884:	187a      	adds	r2, r7, r1
 8019886:	6013      	str	r3, [r2, #0]
 8019888:	1d7b      	adds	r3, r7, #5
 801988a:	33ff      	adds	r3, #255	@ 0xff
 801988c:	681b      	ldr	r3, [r3, #0]
 801988e:	2201      	movs	r2, #1
 8019890:	4013      	ands	r3, r2
 8019892:	d004      	beq.n	801989e <USB_EPStartXfer+0x642>
 8019894:	187b      	adds	r3, r7, r1
 8019896:	681b      	ldr	r3, [r3, #0]
 8019898:	3301      	adds	r3, #1
 801989a:	187a      	adds	r2, r7, r1
 801989c:	6013      	str	r3, [r2, #0]
 801989e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80198a0:	881b      	ldrh	r3, [r3, #0]
 80198a2:	b29a      	uxth	r2, r3
 80198a4:	23f4      	movs	r3, #244	@ 0xf4
 80198a6:	18fb      	adds	r3, r7, r3
 80198a8:	681b      	ldr	r3, [r3, #0]
 80198aa:	b29b      	uxth	r3, r3
 80198ac:	029b      	lsls	r3, r3, #10
 80198ae:	b29b      	uxth	r3, r3
 80198b0:	4313      	orrs	r3, r2
 80198b2:	b29a      	uxth	r2, r3
 80198b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80198b6:	801a      	strh	r2, [r3, #0]
 80198b8:	e01a      	b.n	80198f0 <USB_EPStartXfer+0x694>
 80198ba:	683b      	ldr	r3, [r7, #0]
 80198bc:	785b      	ldrb	r3, [r3, #1]
 80198be:	2b01      	cmp	r3, #1
 80198c0:	d116      	bne.n	80198f0 <USB_EPStartXfer+0x694>
 80198c2:	687b      	ldr	r3, [r7, #4]
 80198c4:	2250      	movs	r2, #80	@ 0x50
 80198c6:	5a9b      	ldrh	r3, [r3, r2]
 80198c8:	b29b      	uxth	r3, r3
 80198ca:	001a      	movs	r2, r3
 80198cc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80198ce:	189b      	adds	r3, r3, r2
 80198d0:	643b      	str	r3, [r7, #64]	@ 0x40
 80198d2:	683b      	ldr	r3, [r7, #0]
 80198d4:	781b      	ldrb	r3, [r3, #0]
 80198d6:	00da      	lsls	r2, r3, #3
 80198d8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80198da:	18d3      	adds	r3, r2, r3
 80198dc:	4a33      	ldr	r2, [pc, #204]	@ (80199ac <USB_EPStartXfer+0x750>)
 80198de:	4694      	mov	ip, r2
 80198e0:	4463      	add	r3, ip
 80198e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80198e4:	1d7b      	adds	r3, r7, #5
 80198e6:	33ff      	adds	r3, #255	@ 0xff
 80198e8:	681b      	ldr	r3, [r3, #0]
 80198ea:	b29a      	uxth	r2, r3
 80198ec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80198ee:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80198f0:	2076      	movs	r0, #118	@ 0x76
 80198f2:	183b      	adds	r3, r7, r0
 80198f4:	683a      	ldr	r2, [r7, #0]
 80198f6:	8952      	ldrh	r2, [r2, #10]
 80198f8:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80198fa:	683b      	ldr	r3, [r7, #0]
 80198fc:	6959      	ldr	r1, [r3, #20]
 80198fe:	1d7b      	adds	r3, r7, #5
 8019900:	33ff      	adds	r3, #255	@ 0xff
 8019902:	681b      	ldr	r3, [r3, #0]
 8019904:	b29c      	uxth	r4, r3
 8019906:	183b      	adds	r3, r7, r0
 8019908:	881a      	ldrh	r2, [r3, #0]
 801990a:	6878      	ldr	r0, [r7, #4]
 801990c:	0023      	movs	r3, r4
 801990e:	f000 ff17 	bl	801a740 <USB_WritePMA>
 8019912:	e1b6      	b.n	8019c82 <USB_EPStartXfer+0xa26>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8019914:	683b      	ldr	r3, [r7, #0]
 8019916:	6a1b      	ldr	r3, [r3, #32]
 8019918:	1d7a      	adds	r2, r7, #5
 801991a:	32ff      	adds	r2, #255	@ 0xff
 801991c:	6013      	str	r3, [r2, #0]

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 801991e:	687a      	ldr	r2, [r7, #4]
 8019920:	683b      	ldr	r3, [r7, #0]
 8019922:	781b      	ldrb	r3, [r3, #0]
 8019924:	009b      	lsls	r3, r3, #2
 8019926:	18d3      	adds	r3, r2, r3
 8019928:	881b      	ldrh	r3, [r3, #0]
 801992a:	b29a      	uxth	r2, r3
 801992c:	2062      	movs	r0, #98	@ 0x62
 801992e:	183b      	adds	r3, r7, r0
 8019930:	491f      	ldr	r1, [pc, #124]	@ (80199b0 <USB_EPStartXfer+0x754>)
 8019932:	400a      	ands	r2, r1
 8019934:	801a      	strh	r2, [r3, #0]
 8019936:	687a      	ldr	r2, [r7, #4]
 8019938:	683b      	ldr	r3, [r7, #0]
 801993a:	781b      	ldrb	r3, [r3, #0]
 801993c:	009b      	lsls	r3, r3, #2
 801993e:	18d3      	adds	r3, r2, r3
 8019940:	183a      	adds	r2, r7, r0
 8019942:	8812      	ldrh	r2, [r2, #0]
 8019944:	491b      	ldr	r1, [pc, #108]	@ (80199b4 <USB_EPStartXfer+0x758>)
 8019946:	430a      	orrs	r2, r1
 8019948:	b292      	uxth	r2, r2
 801994a:	801a      	strh	r2, [r3, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 801994c:	687b      	ldr	r3, [r7, #4]
 801994e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8019950:	687b      	ldr	r3, [r7, #4]
 8019952:	2250      	movs	r2, #80	@ 0x50
 8019954:	5a9b      	ldrh	r3, [r3, r2]
 8019956:	b29b      	uxth	r3, r3
 8019958:	001a      	movs	r2, r3
 801995a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801995c:	189b      	adds	r3, r3, r2
 801995e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8019960:	683b      	ldr	r3, [r7, #0]
 8019962:	781b      	ldrb	r3, [r3, #0]
 8019964:	00da      	lsls	r2, r3, #3
 8019966:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8019968:	18d3      	adds	r3, r2, r3
 801996a:	4a0e      	ldr	r2, [pc, #56]	@ (80199a4 <USB_EPStartXfer+0x748>)
 801996c:	4694      	mov	ip, r2
 801996e:	4463      	add	r3, ip
 8019970:	65bb      	str	r3, [r7, #88]	@ 0x58
 8019972:	1d7b      	adds	r3, r7, #5
 8019974:	33ff      	adds	r3, #255	@ 0xff
 8019976:	681b      	ldr	r3, [r3, #0]
 8019978:	b29a      	uxth	r2, r3
 801997a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801997c:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 801997e:	2076      	movs	r0, #118	@ 0x76
 8019980:	183b      	adds	r3, r7, r0
 8019982:	683a      	ldr	r2, [r7, #0]
 8019984:	8912      	ldrh	r2, [r2, #8]
 8019986:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8019988:	683b      	ldr	r3, [r7, #0]
 801998a:	6959      	ldr	r1, [r3, #20]
 801998c:	1d7b      	adds	r3, r7, #5
 801998e:	33ff      	adds	r3, #255	@ 0xff
 8019990:	681b      	ldr	r3, [r3, #0]
 8019992:	b29c      	uxth	r4, r3
 8019994:	183b      	adds	r3, r7, r0
 8019996:	881a      	ldrh	r2, [r3, #0]
 8019998:	6878      	ldr	r0, [r7, #4]
 801999a:	0023      	movs	r3, r4
 801999c:	f000 fed0 	bl	801a740 <USB_WritePMA>
 80199a0:	e16f      	b.n	8019c82 <USB_EPStartXfer+0xa26>
 80199a2:	46c0      	nop			@ (mov r8, r8)
 80199a4:	00000402 	.word	0x00000402
 80199a8:	ffff8000 	.word	0xffff8000
 80199ac:	00000406 	.word	0x00000406
 80199b0:	ffff8e8f 	.word	0xffff8e8f
 80199b4:	ffff8080 	.word	0xffff8080
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 80199b8:	683b      	ldr	r3, [r7, #0]
 80199ba:	6a1a      	ldr	r2, [r3, #32]
 80199bc:	1d7b      	adds	r3, r7, #5
 80199be:	33ff      	adds	r3, #255	@ 0xff
 80199c0:	681b      	ldr	r3, [r3, #0]
 80199c2:	1ad2      	subs	r2, r2, r3
 80199c4:	683b      	ldr	r3, [r7, #0]
 80199c6:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80199c8:	687a      	ldr	r2, [r7, #4]
 80199ca:	683b      	ldr	r3, [r7, #0]
 80199cc:	781b      	ldrb	r3, [r3, #0]
 80199ce:	009b      	lsls	r3, r3, #2
 80199d0:	18d3      	adds	r3, r2, r3
 80199d2:	881b      	ldrh	r3, [r3, #0]
 80199d4:	b29b      	uxth	r3, r3
 80199d6:	001a      	movs	r2, r3
 80199d8:	2340      	movs	r3, #64	@ 0x40
 80199da:	4013      	ands	r3, r2
 80199dc:	d100      	bne.n	80199e0 <USB_EPStartXfer+0x784>
 80199de:	e0a4      	b.n	8019b2a <USB_EPStartXfer+0x8ce>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80199e0:	687b      	ldr	r3, [r7, #4]
 80199e2:	673b      	str	r3, [r7, #112]	@ 0x70
 80199e4:	683b      	ldr	r3, [r7, #0]
 80199e6:	785b      	ldrb	r3, [r3, #1]
 80199e8:	2b00      	cmp	r3, #0
 80199ea:	d000      	beq.n	80199ee <USB_EPStartXfer+0x792>
 80199ec:	e070      	b.n	8019ad0 <USB_EPStartXfer+0x874>
 80199ee:	687b      	ldr	r3, [r7, #4]
 80199f0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80199f2:	687b      	ldr	r3, [r7, #4]
 80199f4:	2250      	movs	r2, #80	@ 0x50
 80199f6:	5a9b      	ldrh	r3, [r3, r2]
 80199f8:	b29b      	uxth	r3, r3
 80199fa:	001a      	movs	r2, r3
 80199fc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80199fe:	189b      	adds	r3, r3, r2
 8019a00:	66bb      	str	r3, [r7, #104]	@ 0x68
 8019a02:	683b      	ldr	r3, [r7, #0]
 8019a04:	781b      	ldrb	r3, [r3, #0]
 8019a06:	00da      	lsls	r2, r3, #3
 8019a08:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8019a0a:	18d3      	adds	r3, r2, r3
 8019a0c:	4abc      	ldr	r2, [pc, #752]	@ (8019d00 <USB_EPStartXfer+0xaa4>)
 8019a0e:	4694      	mov	ip, r2
 8019a10:	4463      	add	r3, ip
 8019a12:	667b      	str	r3, [r7, #100]	@ 0x64
 8019a14:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8019a16:	881b      	ldrh	r3, [r3, #0]
 8019a18:	b29b      	uxth	r3, r3
 8019a1a:	059b      	lsls	r3, r3, #22
 8019a1c:	0d9b      	lsrs	r3, r3, #22
 8019a1e:	b29a      	uxth	r2, r3
 8019a20:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8019a22:	801a      	strh	r2, [r3, #0]
 8019a24:	1d7b      	adds	r3, r7, #5
 8019a26:	33ff      	adds	r3, #255	@ 0xff
 8019a28:	681b      	ldr	r3, [r3, #0]
 8019a2a:	2b3e      	cmp	r3, #62	@ 0x3e
 8019a2c:	d922      	bls.n	8019a74 <USB_EPStartXfer+0x818>
 8019a2e:	1d7b      	adds	r3, r7, #5
 8019a30:	33ff      	adds	r3, #255	@ 0xff
 8019a32:	681b      	ldr	r3, [r3, #0]
 8019a34:	095b      	lsrs	r3, r3, #5
 8019a36:	21f0      	movs	r1, #240	@ 0xf0
 8019a38:	187a      	adds	r2, r7, r1
 8019a3a:	6013      	str	r3, [r2, #0]
 8019a3c:	1d7b      	adds	r3, r7, #5
 8019a3e:	33ff      	adds	r3, #255	@ 0xff
 8019a40:	681b      	ldr	r3, [r3, #0]
 8019a42:	221f      	movs	r2, #31
 8019a44:	4013      	ands	r3, r2
 8019a46:	d104      	bne.n	8019a52 <USB_EPStartXfer+0x7f6>
 8019a48:	187b      	adds	r3, r7, r1
 8019a4a:	681b      	ldr	r3, [r3, #0]
 8019a4c:	3b01      	subs	r3, #1
 8019a4e:	187a      	adds	r2, r7, r1
 8019a50:	6013      	str	r3, [r2, #0]
 8019a52:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8019a54:	881b      	ldrh	r3, [r3, #0]
 8019a56:	b29a      	uxth	r2, r3
 8019a58:	23f0      	movs	r3, #240	@ 0xf0
 8019a5a:	18fb      	adds	r3, r7, r3
 8019a5c:	681b      	ldr	r3, [r3, #0]
 8019a5e:	b29b      	uxth	r3, r3
 8019a60:	029b      	lsls	r3, r3, #10
 8019a62:	b29b      	uxth	r3, r3
 8019a64:	4313      	orrs	r3, r2
 8019a66:	b29b      	uxth	r3, r3
 8019a68:	4aa6      	ldr	r2, [pc, #664]	@ (8019d04 <USB_EPStartXfer+0xaa8>)
 8019a6a:	4313      	orrs	r3, r2
 8019a6c:	b29a      	uxth	r2, r3
 8019a6e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8019a70:	801a      	strh	r2, [r3, #0]
 8019a72:	e048      	b.n	8019b06 <USB_EPStartXfer+0x8aa>
 8019a74:	1d7b      	adds	r3, r7, #5
 8019a76:	33ff      	adds	r3, #255	@ 0xff
 8019a78:	681b      	ldr	r3, [r3, #0]
 8019a7a:	2b00      	cmp	r3, #0
 8019a7c:	d108      	bne.n	8019a90 <USB_EPStartXfer+0x834>
 8019a7e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8019a80:	881b      	ldrh	r3, [r3, #0]
 8019a82:	b29b      	uxth	r3, r3
 8019a84:	4a9f      	ldr	r2, [pc, #636]	@ (8019d04 <USB_EPStartXfer+0xaa8>)
 8019a86:	4313      	orrs	r3, r2
 8019a88:	b29a      	uxth	r2, r3
 8019a8a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8019a8c:	801a      	strh	r2, [r3, #0]
 8019a8e:	e03a      	b.n	8019b06 <USB_EPStartXfer+0x8aa>
 8019a90:	1d7b      	adds	r3, r7, #5
 8019a92:	33ff      	adds	r3, #255	@ 0xff
 8019a94:	681b      	ldr	r3, [r3, #0]
 8019a96:	085b      	lsrs	r3, r3, #1
 8019a98:	21f0      	movs	r1, #240	@ 0xf0
 8019a9a:	187a      	adds	r2, r7, r1
 8019a9c:	6013      	str	r3, [r2, #0]
 8019a9e:	1d7b      	adds	r3, r7, #5
 8019aa0:	33ff      	adds	r3, #255	@ 0xff
 8019aa2:	681b      	ldr	r3, [r3, #0]
 8019aa4:	2201      	movs	r2, #1
 8019aa6:	4013      	ands	r3, r2
 8019aa8:	d004      	beq.n	8019ab4 <USB_EPStartXfer+0x858>
 8019aaa:	187b      	adds	r3, r7, r1
 8019aac:	681b      	ldr	r3, [r3, #0]
 8019aae:	3301      	adds	r3, #1
 8019ab0:	187a      	adds	r2, r7, r1
 8019ab2:	6013      	str	r3, [r2, #0]
 8019ab4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8019ab6:	881b      	ldrh	r3, [r3, #0]
 8019ab8:	b29a      	uxth	r2, r3
 8019aba:	23f0      	movs	r3, #240	@ 0xf0
 8019abc:	18fb      	adds	r3, r7, r3
 8019abe:	681b      	ldr	r3, [r3, #0]
 8019ac0:	b29b      	uxth	r3, r3
 8019ac2:	029b      	lsls	r3, r3, #10
 8019ac4:	b29b      	uxth	r3, r3
 8019ac6:	4313      	orrs	r3, r2
 8019ac8:	b29a      	uxth	r2, r3
 8019aca:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8019acc:	801a      	strh	r2, [r3, #0]
 8019ace:	e01a      	b.n	8019b06 <USB_EPStartXfer+0x8aa>
 8019ad0:	683b      	ldr	r3, [r7, #0]
 8019ad2:	785b      	ldrb	r3, [r3, #1]
 8019ad4:	2b01      	cmp	r3, #1
 8019ad6:	d116      	bne.n	8019b06 <USB_EPStartXfer+0x8aa>
 8019ad8:	687b      	ldr	r3, [r7, #4]
 8019ada:	2250      	movs	r2, #80	@ 0x50
 8019adc:	5a9b      	ldrh	r3, [r3, r2]
 8019ade:	b29b      	uxth	r3, r3
 8019ae0:	001a      	movs	r2, r3
 8019ae2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8019ae4:	189b      	adds	r3, r3, r2
 8019ae6:	673b      	str	r3, [r7, #112]	@ 0x70
 8019ae8:	683b      	ldr	r3, [r7, #0]
 8019aea:	781b      	ldrb	r3, [r3, #0]
 8019aec:	00da      	lsls	r2, r3, #3
 8019aee:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8019af0:	18d3      	adds	r3, r2, r3
 8019af2:	4a83      	ldr	r2, [pc, #524]	@ (8019d00 <USB_EPStartXfer+0xaa4>)
 8019af4:	4694      	mov	ip, r2
 8019af6:	4463      	add	r3, ip
 8019af8:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8019afa:	1d7b      	adds	r3, r7, #5
 8019afc:	33ff      	adds	r3, #255	@ 0xff
 8019afe:	681b      	ldr	r3, [r3, #0]
 8019b00:	b29a      	uxth	r2, r3
 8019b02:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8019b04:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8019b06:	2076      	movs	r0, #118	@ 0x76
 8019b08:	183b      	adds	r3, r7, r0
 8019b0a:	683a      	ldr	r2, [r7, #0]
 8019b0c:	8952      	ldrh	r2, [r2, #10]
 8019b0e:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8019b10:	683b      	ldr	r3, [r7, #0]
 8019b12:	6959      	ldr	r1, [r3, #20]
 8019b14:	1d7b      	adds	r3, r7, #5
 8019b16:	33ff      	adds	r3, #255	@ 0xff
 8019b18:	681b      	ldr	r3, [r3, #0]
 8019b1a:	b29c      	uxth	r4, r3
 8019b1c:	183b      	adds	r3, r7, r0
 8019b1e:	881a      	ldrh	r2, [r3, #0]
 8019b20:	6878      	ldr	r0, [r7, #4]
 8019b22:	0023      	movs	r3, r4
 8019b24:	f000 fe0c 	bl	801a740 <USB_WritePMA>
 8019b28:	e0ab      	b.n	8019c82 <USB_EPStartXfer+0xa26>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8019b2a:	683b      	ldr	r3, [r7, #0]
 8019b2c:	785b      	ldrb	r3, [r3, #1]
 8019b2e:	2b00      	cmp	r3, #0
 8019b30:	d000      	beq.n	8019b34 <USB_EPStartXfer+0x8d8>
 8019b32:	e070      	b.n	8019c16 <USB_EPStartXfer+0x9ba>
 8019b34:	687b      	ldr	r3, [r7, #4]
 8019b36:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8019b38:	687b      	ldr	r3, [r7, #4]
 8019b3a:	2250      	movs	r2, #80	@ 0x50
 8019b3c:	5a9b      	ldrh	r3, [r3, r2]
 8019b3e:	b29b      	uxth	r3, r3
 8019b40:	001a      	movs	r2, r3
 8019b42:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8019b44:	189b      	adds	r3, r3, r2
 8019b46:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8019b48:	683b      	ldr	r3, [r7, #0]
 8019b4a:	781b      	ldrb	r3, [r3, #0]
 8019b4c:	00da      	lsls	r2, r3, #3
 8019b4e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8019b50:	18d3      	adds	r3, r2, r3
 8019b52:	4a6d      	ldr	r2, [pc, #436]	@ (8019d08 <USB_EPStartXfer+0xaac>)
 8019b54:	4694      	mov	ip, r2
 8019b56:	4463      	add	r3, ip
 8019b58:	67bb      	str	r3, [r7, #120]	@ 0x78
 8019b5a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8019b5c:	881b      	ldrh	r3, [r3, #0]
 8019b5e:	b29b      	uxth	r3, r3
 8019b60:	059b      	lsls	r3, r3, #22
 8019b62:	0d9b      	lsrs	r3, r3, #22
 8019b64:	b29a      	uxth	r2, r3
 8019b66:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8019b68:	801a      	strh	r2, [r3, #0]
 8019b6a:	1d7b      	adds	r3, r7, #5
 8019b6c:	33ff      	adds	r3, #255	@ 0xff
 8019b6e:	681b      	ldr	r3, [r3, #0]
 8019b70:	2b3e      	cmp	r3, #62	@ 0x3e
 8019b72:	d922      	bls.n	8019bba <USB_EPStartXfer+0x95e>
 8019b74:	1d7b      	adds	r3, r7, #5
 8019b76:	33ff      	adds	r3, #255	@ 0xff
 8019b78:	681b      	ldr	r3, [r3, #0]
 8019b7a:	095b      	lsrs	r3, r3, #5
 8019b7c:	21ec      	movs	r1, #236	@ 0xec
 8019b7e:	187a      	adds	r2, r7, r1
 8019b80:	6013      	str	r3, [r2, #0]
 8019b82:	1d7b      	adds	r3, r7, #5
 8019b84:	33ff      	adds	r3, #255	@ 0xff
 8019b86:	681b      	ldr	r3, [r3, #0]
 8019b88:	221f      	movs	r2, #31
 8019b8a:	4013      	ands	r3, r2
 8019b8c:	d104      	bne.n	8019b98 <USB_EPStartXfer+0x93c>
 8019b8e:	187b      	adds	r3, r7, r1
 8019b90:	681b      	ldr	r3, [r3, #0]
 8019b92:	3b01      	subs	r3, #1
 8019b94:	187a      	adds	r2, r7, r1
 8019b96:	6013      	str	r3, [r2, #0]
 8019b98:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8019b9a:	881b      	ldrh	r3, [r3, #0]
 8019b9c:	b29a      	uxth	r2, r3
 8019b9e:	23ec      	movs	r3, #236	@ 0xec
 8019ba0:	18fb      	adds	r3, r7, r3
 8019ba2:	681b      	ldr	r3, [r3, #0]
 8019ba4:	b29b      	uxth	r3, r3
 8019ba6:	029b      	lsls	r3, r3, #10
 8019ba8:	b29b      	uxth	r3, r3
 8019baa:	4313      	orrs	r3, r2
 8019bac:	b29b      	uxth	r3, r3
 8019bae:	4a55      	ldr	r2, [pc, #340]	@ (8019d04 <USB_EPStartXfer+0xaa8>)
 8019bb0:	4313      	orrs	r3, r2
 8019bb2:	b29a      	uxth	r2, r3
 8019bb4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8019bb6:	801a      	strh	r2, [r3, #0]
 8019bb8:	e052      	b.n	8019c60 <USB_EPStartXfer+0xa04>
 8019bba:	1d7b      	adds	r3, r7, #5
 8019bbc:	33ff      	adds	r3, #255	@ 0xff
 8019bbe:	681b      	ldr	r3, [r3, #0]
 8019bc0:	2b00      	cmp	r3, #0
 8019bc2:	d108      	bne.n	8019bd6 <USB_EPStartXfer+0x97a>
 8019bc4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8019bc6:	881b      	ldrh	r3, [r3, #0]
 8019bc8:	b29b      	uxth	r3, r3
 8019bca:	4a4e      	ldr	r2, [pc, #312]	@ (8019d04 <USB_EPStartXfer+0xaa8>)
 8019bcc:	4313      	orrs	r3, r2
 8019bce:	b29a      	uxth	r2, r3
 8019bd0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8019bd2:	801a      	strh	r2, [r3, #0]
 8019bd4:	e044      	b.n	8019c60 <USB_EPStartXfer+0xa04>
 8019bd6:	1d7b      	adds	r3, r7, #5
 8019bd8:	33ff      	adds	r3, #255	@ 0xff
 8019bda:	681b      	ldr	r3, [r3, #0]
 8019bdc:	085b      	lsrs	r3, r3, #1
 8019bde:	21ec      	movs	r1, #236	@ 0xec
 8019be0:	187a      	adds	r2, r7, r1
 8019be2:	6013      	str	r3, [r2, #0]
 8019be4:	1d7b      	adds	r3, r7, #5
 8019be6:	33ff      	adds	r3, #255	@ 0xff
 8019be8:	681b      	ldr	r3, [r3, #0]
 8019bea:	2201      	movs	r2, #1
 8019bec:	4013      	ands	r3, r2
 8019bee:	d004      	beq.n	8019bfa <USB_EPStartXfer+0x99e>
 8019bf0:	187b      	adds	r3, r7, r1
 8019bf2:	681b      	ldr	r3, [r3, #0]
 8019bf4:	3301      	adds	r3, #1
 8019bf6:	187a      	adds	r2, r7, r1
 8019bf8:	6013      	str	r3, [r2, #0]
 8019bfa:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8019bfc:	881b      	ldrh	r3, [r3, #0]
 8019bfe:	b29a      	uxth	r2, r3
 8019c00:	23ec      	movs	r3, #236	@ 0xec
 8019c02:	18fb      	adds	r3, r7, r3
 8019c04:	681b      	ldr	r3, [r3, #0]
 8019c06:	b29b      	uxth	r3, r3
 8019c08:	029b      	lsls	r3, r3, #10
 8019c0a:	b29b      	uxth	r3, r3
 8019c0c:	4313      	orrs	r3, r2
 8019c0e:	b29a      	uxth	r2, r3
 8019c10:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8019c12:	801a      	strh	r2, [r3, #0]
 8019c14:	e024      	b.n	8019c60 <USB_EPStartXfer+0xa04>
 8019c16:	683b      	ldr	r3, [r7, #0]
 8019c18:	785b      	ldrb	r3, [r3, #1]
 8019c1a:	2b01      	cmp	r3, #1
 8019c1c:	d120      	bne.n	8019c60 <USB_EPStartXfer+0xa04>
 8019c1e:	687b      	ldr	r3, [r7, #4]
 8019c20:	2184      	movs	r1, #132	@ 0x84
 8019c22:	187a      	adds	r2, r7, r1
 8019c24:	6013      	str	r3, [r2, #0]
 8019c26:	687b      	ldr	r3, [r7, #4]
 8019c28:	2250      	movs	r2, #80	@ 0x50
 8019c2a:	5a9b      	ldrh	r3, [r3, r2]
 8019c2c:	b29b      	uxth	r3, r3
 8019c2e:	001a      	movs	r2, r3
 8019c30:	187b      	adds	r3, r7, r1
 8019c32:	681b      	ldr	r3, [r3, #0]
 8019c34:	189b      	adds	r3, r3, r2
 8019c36:	187a      	adds	r2, r7, r1
 8019c38:	6013      	str	r3, [r2, #0]
 8019c3a:	683b      	ldr	r3, [r7, #0]
 8019c3c:	781b      	ldrb	r3, [r3, #0]
 8019c3e:	00da      	lsls	r2, r3, #3
 8019c40:	187b      	adds	r3, r7, r1
 8019c42:	681b      	ldr	r3, [r3, #0]
 8019c44:	18d3      	adds	r3, r2, r3
 8019c46:	4a30      	ldr	r2, [pc, #192]	@ (8019d08 <USB_EPStartXfer+0xaac>)
 8019c48:	4694      	mov	ip, r2
 8019c4a:	4463      	add	r3, ip
 8019c4c:	2180      	movs	r1, #128	@ 0x80
 8019c4e:	187a      	adds	r2, r7, r1
 8019c50:	6013      	str	r3, [r2, #0]
 8019c52:	1d7b      	adds	r3, r7, #5
 8019c54:	33ff      	adds	r3, #255	@ 0xff
 8019c56:	681b      	ldr	r3, [r3, #0]
 8019c58:	b29a      	uxth	r2, r3
 8019c5a:	187b      	adds	r3, r7, r1
 8019c5c:	681b      	ldr	r3, [r3, #0]
 8019c5e:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8019c60:	2076      	movs	r0, #118	@ 0x76
 8019c62:	183b      	adds	r3, r7, r0
 8019c64:	683a      	ldr	r2, [r7, #0]
 8019c66:	8912      	ldrh	r2, [r2, #8]
 8019c68:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8019c6a:	683b      	ldr	r3, [r7, #0]
 8019c6c:	6959      	ldr	r1, [r3, #20]
 8019c6e:	1d7b      	adds	r3, r7, #5
 8019c70:	33ff      	adds	r3, #255	@ 0xff
 8019c72:	681b      	ldr	r3, [r3, #0]
 8019c74:	b29c      	uxth	r4, r3
 8019c76:	183b      	adds	r3, r7, r0
 8019c78:	881a      	ldrh	r2, [r3, #0]
 8019c7a:	6878      	ldr	r0, [r7, #4]
 8019c7c:	0023      	movs	r3, r4
 8019c7e:	f000 fd5f 	bl	801a740 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8019c82:	687a      	ldr	r2, [r7, #4]
 8019c84:	683b      	ldr	r3, [r7, #0]
 8019c86:	781b      	ldrb	r3, [r3, #0]
 8019c88:	009b      	lsls	r3, r3, #2
 8019c8a:	18d3      	adds	r3, r2, r3
 8019c8c:	881b      	ldrh	r3, [r3, #0]
 8019c8e:	b29a      	uxth	r2, r3
 8019c90:	200a      	movs	r0, #10
 8019c92:	183b      	adds	r3, r7, r0
 8019c94:	491d      	ldr	r1, [pc, #116]	@ (8019d0c <USB_EPStartXfer+0xab0>)
 8019c96:	400a      	ands	r2, r1
 8019c98:	801a      	strh	r2, [r3, #0]
 8019c9a:	183b      	adds	r3, r7, r0
 8019c9c:	183a      	adds	r2, r7, r0
 8019c9e:	8812      	ldrh	r2, [r2, #0]
 8019ca0:	2110      	movs	r1, #16
 8019ca2:	404a      	eors	r2, r1
 8019ca4:	801a      	strh	r2, [r3, #0]
 8019ca6:	183b      	adds	r3, r7, r0
 8019ca8:	183a      	adds	r2, r7, r0
 8019caa:	8812      	ldrh	r2, [r2, #0]
 8019cac:	2120      	movs	r1, #32
 8019cae:	404a      	eors	r2, r1
 8019cb0:	801a      	strh	r2, [r3, #0]
 8019cb2:	687a      	ldr	r2, [r7, #4]
 8019cb4:	683b      	ldr	r3, [r7, #0]
 8019cb6:	781b      	ldrb	r3, [r3, #0]
 8019cb8:	009b      	lsls	r3, r3, #2
 8019cba:	18d3      	adds	r3, r2, r3
 8019cbc:	183a      	adds	r2, r7, r0
 8019cbe:	8812      	ldrh	r2, [r2, #0]
 8019cc0:	4913      	ldr	r1, [pc, #76]	@ (8019d10 <USB_EPStartXfer+0xab4>)
 8019cc2:	430a      	orrs	r2, r1
 8019cc4:	b292      	uxth	r2, r2
 8019cc6:	801a      	strh	r2, [r3, #0]
 8019cc8:	f000 fbf4 	bl	801a4b4 <USB_EPStartXfer+0x1258>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8019ccc:	683b      	ldr	r3, [r7, #0]
 8019cce:	7b1b      	ldrb	r3, [r3, #12]
 8019cd0:	2b00      	cmp	r3, #0
 8019cd2:	d000      	beq.n	8019cd6 <USB_EPStartXfer+0xa7a>
 8019cd4:	e0a9      	b.n	8019e2a <USB_EPStartXfer+0xbce>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8019cd6:	683b      	ldr	r3, [r7, #0]
 8019cd8:	699a      	ldr	r2, [r3, #24]
 8019cda:	683b      	ldr	r3, [r7, #0]
 8019cdc:	691b      	ldr	r3, [r3, #16]
 8019cde:	429a      	cmp	r2, r3
 8019ce0:	d918      	bls.n	8019d14 <USB_EPStartXfer+0xab8>
      {
        len = ep->maxpacket;
 8019ce2:	683b      	ldr	r3, [r7, #0]
 8019ce4:	691b      	ldr	r3, [r3, #16]
 8019ce6:	1d7a      	adds	r2, r7, #5
 8019ce8:	32ff      	adds	r2, #255	@ 0xff
 8019cea:	6013      	str	r3, [r2, #0]
        ep->xfer_len -= len;
 8019cec:	683b      	ldr	r3, [r7, #0]
 8019cee:	699a      	ldr	r2, [r3, #24]
 8019cf0:	1d7b      	adds	r3, r7, #5
 8019cf2:	33ff      	adds	r3, #255	@ 0xff
 8019cf4:	681b      	ldr	r3, [r3, #0]
 8019cf6:	1ad2      	subs	r2, r2, r3
 8019cf8:	683b      	ldr	r3, [r7, #0]
 8019cfa:	619a      	str	r2, [r3, #24]
 8019cfc:	e012      	b.n	8019d24 <USB_EPStartXfer+0xac8>
 8019cfe:	46c0      	nop			@ (mov r8, r8)
 8019d00:	00000406 	.word	0x00000406
 8019d04:	ffff8000 	.word	0xffff8000
 8019d08:	00000402 	.word	0x00000402
 8019d0c:	ffff8fbf 	.word	0xffff8fbf
 8019d10:	ffff8080 	.word	0xffff8080
      }
      else
      {
        len = ep->xfer_len;
 8019d14:	683b      	ldr	r3, [r7, #0]
 8019d16:	699b      	ldr	r3, [r3, #24]
 8019d18:	1d7a      	adds	r2, r7, #5
 8019d1a:	32ff      	adds	r2, #255	@ 0xff
 8019d1c:	6013      	str	r3, [r2, #0]
        ep->xfer_len = 0U;
 8019d1e:	683b      	ldr	r3, [r7, #0]
 8019d20:	2200      	movs	r2, #0
 8019d22:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8019d24:	687b      	ldr	r3, [r7, #4]
 8019d26:	2190      	movs	r1, #144	@ 0x90
 8019d28:	187a      	adds	r2, r7, r1
 8019d2a:	6013      	str	r3, [r2, #0]
 8019d2c:	687b      	ldr	r3, [r7, #4]
 8019d2e:	2250      	movs	r2, #80	@ 0x50
 8019d30:	5a9b      	ldrh	r3, [r3, r2]
 8019d32:	b29b      	uxth	r3, r3
 8019d34:	001a      	movs	r2, r3
 8019d36:	187b      	adds	r3, r7, r1
 8019d38:	681b      	ldr	r3, [r3, #0]
 8019d3a:	189b      	adds	r3, r3, r2
 8019d3c:	187a      	adds	r2, r7, r1
 8019d3e:	6013      	str	r3, [r2, #0]
 8019d40:	683b      	ldr	r3, [r7, #0]
 8019d42:	781b      	ldrb	r3, [r3, #0]
 8019d44:	00da      	lsls	r2, r3, #3
 8019d46:	187b      	adds	r3, r7, r1
 8019d48:	681b      	ldr	r3, [r3, #0]
 8019d4a:	18d3      	adds	r3, r2, r3
 8019d4c:	4acf      	ldr	r2, [pc, #828]	@ (801a08c <USB_EPStartXfer+0xe30>)
 8019d4e:	4694      	mov	ip, r2
 8019d50:	4463      	add	r3, ip
 8019d52:	218c      	movs	r1, #140	@ 0x8c
 8019d54:	187a      	adds	r2, r7, r1
 8019d56:	6013      	str	r3, [r2, #0]
 8019d58:	187b      	adds	r3, r7, r1
 8019d5a:	681b      	ldr	r3, [r3, #0]
 8019d5c:	881b      	ldrh	r3, [r3, #0]
 8019d5e:	b29b      	uxth	r3, r3
 8019d60:	059b      	lsls	r3, r3, #22
 8019d62:	0d9b      	lsrs	r3, r3, #22
 8019d64:	b29a      	uxth	r2, r3
 8019d66:	187b      	adds	r3, r7, r1
 8019d68:	681b      	ldr	r3, [r3, #0]
 8019d6a:	801a      	strh	r2, [r3, #0]
 8019d6c:	1d7b      	adds	r3, r7, #5
 8019d6e:	33ff      	adds	r3, #255	@ 0xff
 8019d70:	681b      	ldr	r3, [r3, #0]
 8019d72:	2b3e      	cmp	r3, #62	@ 0x3e
 8019d74:	d925      	bls.n	8019dc2 <USB_EPStartXfer+0xb66>
 8019d76:	1d7b      	adds	r3, r7, #5
 8019d78:	33ff      	adds	r3, #255	@ 0xff
 8019d7a:	681b      	ldr	r3, [r3, #0]
 8019d7c:	095b      	lsrs	r3, r3, #5
 8019d7e:	21e8      	movs	r1, #232	@ 0xe8
 8019d80:	187a      	adds	r2, r7, r1
 8019d82:	6013      	str	r3, [r2, #0]
 8019d84:	1d7b      	adds	r3, r7, #5
 8019d86:	33ff      	adds	r3, #255	@ 0xff
 8019d88:	681b      	ldr	r3, [r3, #0]
 8019d8a:	221f      	movs	r2, #31
 8019d8c:	4013      	ands	r3, r2
 8019d8e:	d104      	bne.n	8019d9a <USB_EPStartXfer+0xb3e>
 8019d90:	187b      	adds	r3, r7, r1
 8019d92:	681b      	ldr	r3, [r3, #0]
 8019d94:	3b01      	subs	r3, #1
 8019d96:	187a      	adds	r2, r7, r1
 8019d98:	6013      	str	r3, [r2, #0]
 8019d9a:	218c      	movs	r1, #140	@ 0x8c
 8019d9c:	187b      	adds	r3, r7, r1
 8019d9e:	681b      	ldr	r3, [r3, #0]
 8019da0:	881b      	ldrh	r3, [r3, #0]
 8019da2:	b29a      	uxth	r2, r3
 8019da4:	23e8      	movs	r3, #232	@ 0xe8
 8019da6:	18fb      	adds	r3, r7, r3
 8019da8:	681b      	ldr	r3, [r3, #0]
 8019daa:	b29b      	uxth	r3, r3
 8019dac:	029b      	lsls	r3, r3, #10
 8019dae:	b29b      	uxth	r3, r3
 8019db0:	4313      	orrs	r3, r2
 8019db2:	b29b      	uxth	r3, r3
 8019db4:	4ab6      	ldr	r2, [pc, #728]	@ (801a090 <USB_EPStartXfer+0xe34>)
 8019db6:	4313      	orrs	r3, r2
 8019db8:	b29a      	uxth	r2, r3
 8019dba:	187b      	adds	r3, r7, r1
 8019dbc:	681b      	ldr	r3, [r3, #0]
 8019dbe:	801a      	strh	r2, [r3, #0]
 8019dc0:	e353      	b.n	801a46a <USB_EPStartXfer+0x120e>
 8019dc2:	1d7b      	adds	r3, r7, #5
 8019dc4:	33ff      	adds	r3, #255	@ 0xff
 8019dc6:	681b      	ldr	r3, [r3, #0]
 8019dc8:	2b00      	cmp	r3, #0
 8019dca:	d10b      	bne.n	8019de4 <USB_EPStartXfer+0xb88>
 8019dcc:	218c      	movs	r1, #140	@ 0x8c
 8019dce:	187b      	adds	r3, r7, r1
 8019dd0:	681b      	ldr	r3, [r3, #0]
 8019dd2:	881b      	ldrh	r3, [r3, #0]
 8019dd4:	b29b      	uxth	r3, r3
 8019dd6:	4aae      	ldr	r2, [pc, #696]	@ (801a090 <USB_EPStartXfer+0xe34>)
 8019dd8:	4313      	orrs	r3, r2
 8019dda:	b29a      	uxth	r2, r3
 8019ddc:	187b      	adds	r3, r7, r1
 8019dde:	681b      	ldr	r3, [r3, #0]
 8019de0:	801a      	strh	r2, [r3, #0]
 8019de2:	e342      	b.n	801a46a <USB_EPStartXfer+0x120e>
 8019de4:	1d7b      	adds	r3, r7, #5
 8019de6:	33ff      	adds	r3, #255	@ 0xff
 8019de8:	681b      	ldr	r3, [r3, #0]
 8019dea:	085b      	lsrs	r3, r3, #1
 8019dec:	21e8      	movs	r1, #232	@ 0xe8
 8019dee:	187a      	adds	r2, r7, r1
 8019df0:	6013      	str	r3, [r2, #0]
 8019df2:	1d7b      	adds	r3, r7, #5
 8019df4:	33ff      	adds	r3, #255	@ 0xff
 8019df6:	681b      	ldr	r3, [r3, #0]
 8019df8:	2201      	movs	r2, #1
 8019dfa:	4013      	ands	r3, r2
 8019dfc:	d004      	beq.n	8019e08 <USB_EPStartXfer+0xbac>
 8019dfe:	187b      	adds	r3, r7, r1
 8019e00:	681b      	ldr	r3, [r3, #0]
 8019e02:	3301      	adds	r3, #1
 8019e04:	187a      	adds	r2, r7, r1
 8019e06:	6013      	str	r3, [r2, #0]
 8019e08:	218c      	movs	r1, #140	@ 0x8c
 8019e0a:	187b      	adds	r3, r7, r1
 8019e0c:	681b      	ldr	r3, [r3, #0]
 8019e0e:	881b      	ldrh	r3, [r3, #0]
 8019e10:	b29a      	uxth	r2, r3
 8019e12:	23e8      	movs	r3, #232	@ 0xe8
 8019e14:	18fb      	adds	r3, r7, r3
 8019e16:	681b      	ldr	r3, [r3, #0]
 8019e18:	b29b      	uxth	r3, r3
 8019e1a:	029b      	lsls	r3, r3, #10
 8019e1c:	b29b      	uxth	r3, r3
 8019e1e:	4313      	orrs	r3, r2
 8019e20:	b29a      	uxth	r2, r3
 8019e22:	187b      	adds	r3, r7, r1
 8019e24:	681b      	ldr	r3, [r3, #0]
 8019e26:	801a      	strh	r2, [r3, #0]
 8019e28:	e31f      	b.n	801a46a <USB_EPStartXfer+0x120e>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8019e2a:	683b      	ldr	r3, [r7, #0]
 8019e2c:	78db      	ldrb	r3, [r3, #3]
 8019e2e:	2b02      	cmp	r3, #2
 8019e30:	d000      	beq.n	8019e34 <USB_EPStartXfer+0xbd8>
 8019e32:	e191      	b.n	801a158 <USB_EPStartXfer+0xefc>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8019e34:	683b      	ldr	r3, [r7, #0]
 8019e36:	785b      	ldrb	r3, [r3, #1]
 8019e38:	2b00      	cmp	r3, #0
 8019e3a:	d000      	beq.n	8019e3e <USB_EPStartXfer+0xbe2>
 8019e3c:	e07c      	b.n	8019f38 <USB_EPStartXfer+0xcdc>
 8019e3e:	687b      	ldr	r3, [r7, #4]
 8019e40:	21ac      	movs	r1, #172	@ 0xac
 8019e42:	187a      	adds	r2, r7, r1
 8019e44:	6013      	str	r3, [r2, #0]
 8019e46:	687b      	ldr	r3, [r7, #4]
 8019e48:	2250      	movs	r2, #80	@ 0x50
 8019e4a:	5a9b      	ldrh	r3, [r3, r2]
 8019e4c:	b29b      	uxth	r3, r3
 8019e4e:	001a      	movs	r2, r3
 8019e50:	187b      	adds	r3, r7, r1
 8019e52:	681b      	ldr	r3, [r3, #0]
 8019e54:	189b      	adds	r3, r3, r2
 8019e56:	187a      	adds	r2, r7, r1
 8019e58:	6013      	str	r3, [r2, #0]
 8019e5a:	683b      	ldr	r3, [r7, #0]
 8019e5c:	781b      	ldrb	r3, [r3, #0]
 8019e5e:	00da      	lsls	r2, r3, #3
 8019e60:	187b      	adds	r3, r7, r1
 8019e62:	681b      	ldr	r3, [r3, #0]
 8019e64:	18d3      	adds	r3, r2, r3
 8019e66:	4a8b      	ldr	r2, [pc, #556]	@ (801a094 <USB_EPStartXfer+0xe38>)
 8019e68:	4694      	mov	ip, r2
 8019e6a:	4463      	add	r3, ip
 8019e6c:	21a8      	movs	r1, #168	@ 0xa8
 8019e6e:	187a      	adds	r2, r7, r1
 8019e70:	6013      	str	r3, [r2, #0]
 8019e72:	187b      	adds	r3, r7, r1
 8019e74:	681b      	ldr	r3, [r3, #0]
 8019e76:	881b      	ldrh	r3, [r3, #0]
 8019e78:	b29b      	uxth	r3, r3
 8019e7a:	059b      	lsls	r3, r3, #22
 8019e7c:	0d9b      	lsrs	r3, r3, #22
 8019e7e:	b29a      	uxth	r2, r3
 8019e80:	187b      	adds	r3, r7, r1
 8019e82:	681b      	ldr	r3, [r3, #0]
 8019e84:	801a      	strh	r2, [r3, #0]
 8019e86:	683b      	ldr	r3, [r7, #0]
 8019e88:	691b      	ldr	r3, [r3, #16]
 8019e8a:	2b3e      	cmp	r3, #62	@ 0x3e
 8019e8c:	d923      	bls.n	8019ed6 <USB_EPStartXfer+0xc7a>
 8019e8e:	683b      	ldr	r3, [r7, #0]
 8019e90:	691b      	ldr	r3, [r3, #16]
 8019e92:	095b      	lsrs	r3, r3, #5
 8019e94:	21e4      	movs	r1, #228	@ 0xe4
 8019e96:	187a      	adds	r2, r7, r1
 8019e98:	6013      	str	r3, [r2, #0]
 8019e9a:	683b      	ldr	r3, [r7, #0]
 8019e9c:	691b      	ldr	r3, [r3, #16]
 8019e9e:	221f      	movs	r2, #31
 8019ea0:	4013      	ands	r3, r2
 8019ea2:	d104      	bne.n	8019eae <USB_EPStartXfer+0xc52>
 8019ea4:	187b      	adds	r3, r7, r1
 8019ea6:	681b      	ldr	r3, [r3, #0]
 8019ea8:	3b01      	subs	r3, #1
 8019eaa:	187a      	adds	r2, r7, r1
 8019eac:	6013      	str	r3, [r2, #0]
 8019eae:	21a8      	movs	r1, #168	@ 0xa8
 8019eb0:	187b      	adds	r3, r7, r1
 8019eb2:	681b      	ldr	r3, [r3, #0]
 8019eb4:	881b      	ldrh	r3, [r3, #0]
 8019eb6:	b29a      	uxth	r2, r3
 8019eb8:	23e4      	movs	r3, #228	@ 0xe4
 8019eba:	18fb      	adds	r3, r7, r3
 8019ebc:	681b      	ldr	r3, [r3, #0]
 8019ebe:	b29b      	uxth	r3, r3
 8019ec0:	029b      	lsls	r3, r3, #10
 8019ec2:	b29b      	uxth	r3, r3
 8019ec4:	4313      	orrs	r3, r2
 8019ec6:	b29b      	uxth	r3, r3
 8019ec8:	4a71      	ldr	r2, [pc, #452]	@ (801a090 <USB_EPStartXfer+0xe34>)
 8019eca:	4313      	orrs	r3, r2
 8019ecc:	b29a      	uxth	r2, r3
 8019ece:	187b      	adds	r3, r7, r1
 8019ed0:	681b      	ldr	r3, [r3, #0]
 8019ed2:	801a      	strh	r2, [r3, #0]
 8019ed4:	e054      	b.n	8019f80 <USB_EPStartXfer+0xd24>
 8019ed6:	683b      	ldr	r3, [r7, #0]
 8019ed8:	691b      	ldr	r3, [r3, #16]
 8019eda:	2b00      	cmp	r3, #0
 8019edc:	d10b      	bne.n	8019ef6 <USB_EPStartXfer+0xc9a>
 8019ede:	21a8      	movs	r1, #168	@ 0xa8
 8019ee0:	187b      	adds	r3, r7, r1
 8019ee2:	681b      	ldr	r3, [r3, #0]
 8019ee4:	881b      	ldrh	r3, [r3, #0]
 8019ee6:	b29b      	uxth	r3, r3
 8019ee8:	4a69      	ldr	r2, [pc, #420]	@ (801a090 <USB_EPStartXfer+0xe34>)
 8019eea:	4313      	orrs	r3, r2
 8019eec:	b29a      	uxth	r2, r3
 8019eee:	187b      	adds	r3, r7, r1
 8019ef0:	681b      	ldr	r3, [r3, #0]
 8019ef2:	801a      	strh	r2, [r3, #0]
 8019ef4:	e044      	b.n	8019f80 <USB_EPStartXfer+0xd24>
 8019ef6:	683b      	ldr	r3, [r7, #0]
 8019ef8:	691b      	ldr	r3, [r3, #16]
 8019efa:	085b      	lsrs	r3, r3, #1
 8019efc:	21e4      	movs	r1, #228	@ 0xe4
 8019efe:	187a      	adds	r2, r7, r1
 8019f00:	6013      	str	r3, [r2, #0]
 8019f02:	683b      	ldr	r3, [r7, #0]
 8019f04:	691b      	ldr	r3, [r3, #16]
 8019f06:	2201      	movs	r2, #1
 8019f08:	4013      	ands	r3, r2
 8019f0a:	d004      	beq.n	8019f16 <USB_EPStartXfer+0xcba>
 8019f0c:	187b      	adds	r3, r7, r1
 8019f0e:	681b      	ldr	r3, [r3, #0]
 8019f10:	3301      	adds	r3, #1
 8019f12:	187a      	adds	r2, r7, r1
 8019f14:	6013      	str	r3, [r2, #0]
 8019f16:	21a8      	movs	r1, #168	@ 0xa8
 8019f18:	187b      	adds	r3, r7, r1
 8019f1a:	681b      	ldr	r3, [r3, #0]
 8019f1c:	881b      	ldrh	r3, [r3, #0]
 8019f1e:	b29a      	uxth	r2, r3
 8019f20:	23e4      	movs	r3, #228	@ 0xe4
 8019f22:	18fb      	adds	r3, r7, r3
 8019f24:	681b      	ldr	r3, [r3, #0]
 8019f26:	b29b      	uxth	r3, r3
 8019f28:	029b      	lsls	r3, r3, #10
 8019f2a:	b29b      	uxth	r3, r3
 8019f2c:	4313      	orrs	r3, r2
 8019f2e:	b29a      	uxth	r2, r3
 8019f30:	187b      	adds	r3, r7, r1
 8019f32:	681b      	ldr	r3, [r3, #0]
 8019f34:	801a      	strh	r2, [r3, #0]
 8019f36:	e023      	b.n	8019f80 <USB_EPStartXfer+0xd24>
 8019f38:	683b      	ldr	r3, [r7, #0]
 8019f3a:	785b      	ldrb	r3, [r3, #1]
 8019f3c:	2b01      	cmp	r3, #1
 8019f3e:	d11f      	bne.n	8019f80 <USB_EPStartXfer+0xd24>
 8019f40:	687b      	ldr	r3, [r7, #4]
 8019f42:	21b4      	movs	r1, #180	@ 0xb4
 8019f44:	187a      	adds	r2, r7, r1
 8019f46:	6013      	str	r3, [r2, #0]
 8019f48:	687b      	ldr	r3, [r7, #4]
 8019f4a:	2250      	movs	r2, #80	@ 0x50
 8019f4c:	5a9b      	ldrh	r3, [r3, r2]
 8019f4e:	b29b      	uxth	r3, r3
 8019f50:	001a      	movs	r2, r3
 8019f52:	187b      	adds	r3, r7, r1
 8019f54:	681b      	ldr	r3, [r3, #0]
 8019f56:	189b      	adds	r3, r3, r2
 8019f58:	187a      	adds	r2, r7, r1
 8019f5a:	6013      	str	r3, [r2, #0]
 8019f5c:	683b      	ldr	r3, [r7, #0]
 8019f5e:	781b      	ldrb	r3, [r3, #0]
 8019f60:	00da      	lsls	r2, r3, #3
 8019f62:	187b      	adds	r3, r7, r1
 8019f64:	681b      	ldr	r3, [r3, #0]
 8019f66:	18d3      	adds	r3, r2, r3
 8019f68:	4a4a      	ldr	r2, [pc, #296]	@ (801a094 <USB_EPStartXfer+0xe38>)
 8019f6a:	4694      	mov	ip, r2
 8019f6c:	4463      	add	r3, ip
 8019f6e:	21b0      	movs	r1, #176	@ 0xb0
 8019f70:	187a      	adds	r2, r7, r1
 8019f72:	6013      	str	r3, [r2, #0]
 8019f74:	683b      	ldr	r3, [r7, #0]
 8019f76:	691b      	ldr	r3, [r3, #16]
 8019f78:	b29a      	uxth	r2, r3
 8019f7a:	187b      	adds	r3, r7, r1
 8019f7c:	681b      	ldr	r3, [r3, #0]
 8019f7e:	801a      	strh	r2, [r3, #0]
 8019f80:	687b      	ldr	r3, [r7, #4]
 8019f82:	22a4      	movs	r2, #164	@ 0xa4
 8019f84:	18ba      	adds	r2, r7, r2
 8019f86:	6013      	str	r3, [r2, #0]
 8019f88:	683b      	ldr	r3, [r7, #0]
 8019f8a:	785b      	ldrb	r3, [r3, #1]
 8019f8c:	2b00      	cmp	r3, #0
 8019f8e:	d000      	beq.n	8019f92 <USB_EPStartXfer+0xd36>
 8019f90:	e082      	b.n	801a098 <USB_EPStartXfer+0xe3c>
 8019f92:	687b      	ldr	r3, [r7, #4]
 8019f94:	219c      	movs	r1, #156	@ 0x9c
 8019f96:	187a      	adds	r2, r7, r1
 8019f98:	6013      	str	r3, [r2, #0]
 8019f9a:	687b      	ldr	r3, [r7, #4]
 8019f9c:	2250      	movs	r2, #80	@ 0x50
 8019f9e:	5a9b      	ldrh	r3, [r3, r2]
 8019fa0:	b29b      	uxth	r3, r3
 8019fa2:	001a      	movs	r2, r3
 8019fa4:	187b      	adds	r3, r7, r1
 8019fa6:	681b      	ldr	r3, [r3, #0]
 8019fa8:	189b      	adds	r3, r3, r2
 8019faa:	187a      	adds	r2, r7, r1
 8019fac:	6013      	str	r3, [r2, #0]
 8019fae:	683b      	ldr	r3, [r7, #0]
 8019fb0:	781b      	ldrb	r3, [r3, #0]
 8019fb2:	00da      	lsls	r2, r3, #3
 8019fb4:	187b      	adds	r3, r7, r1
 8019fb6:	681b      	ldr	r3, [r3, #0]
 8019fb8:	18d3      	adds	r3, r2, r3
 8019fba:	4a34      	ldr	r2, [pc, #208]	@ (801a08c <USB_EPStartXfer+0xe30>)
 8019fbc:	4694      	mov	ip, r2
 8019fbe:	4463      	add	r3, ip
 8019fc0:	2198      	movs	r1, #152	@ 0x98
 8019fc2:	187a      	adds	r2, r7, r1
 8019fc4:	6013      	str	r3, [r2, #0]
 8019fc6:	187b      	adds	r3, r7, r1
 8019fc8:	681b      	ldr	r3, [r3, #0]
 8019fca:	881b      	ldrh	r3, [r3, #0]
 8019fcc:	b29b      	uxth	r3, r3
 8019fce:	059b      	lsls	r3, r3, #22
 8019fd0:	0d9b      	lsrs	r3, r3, #22
 8019fd2:	b29a      	uxth	r2, r3
 8019fd4:	187b      	adds	r3, r7, r1
 8019fd6:	681b      	ldr	r3, [r3, #0]
 8019fd8:	801a      	strh	r2, [r3, #0]
 8019fda:	683b      	ldr	r3, [r7, #0]
 8019fdc:	691b      	ldr	r3, [r3, #16]
 8019fde:	2b3e      	cmp	r3, #62	@ 0x3e
 8019fe0:	d923      	bls.n	801a02a <USB_EPStartXfer+0xdce>
 8019fe2:	683b      	ldr	r3, [r7, #0]
 8019fe4:	691b      	ldr	r3, [r3, #16]
 8019fe6:	095b      	lsrs	r3, r3, #5
 8019fe8:	21e0      	movs	r1, #224	@ 0xe0
 8019fea:	187a      	adds	r2, r7, r1
 8019fec:	6013      	str	r3, [r2, #0]
 8019fee:	683b      	ldr	r3, [r7, #0]
 8019ff0:	691b      	ldr	r3, [r3, #16]
 8019ff2:	221f      	movs	r2, #31
 8019ff4:	4013      	ands	r3, r2
 8019ff6:	d104      	bne.n	801a002 <USB_EPStartXfer+0xda6>
 8019ff8:	187b      	adds	r3, r7, r1
 8019ffa:	681b      	ldr	r3, [r3, #0]
 8019ffc:	3b01      	subs	r3, #1
 8019ffe:	187a      	adds	r2, r7, r1
 801a000:	6013      	str	r3, [r2, #0]
 801a002:	2198      	movs	r1, #152	@ 0x98
 801a004:	187b      	adds	r3, r7, r1
 801a006:	681b      	ldr	r3, [r3, #0]
 801a008:	881b      	ldrh	r3, [r3, #0]
 801a00a:	b29a      	uxth	r2, r3
 801a00c:	23e0      	movs	r3, #224	@ 0xe0
 801a00e:	18fb      	adds	r3, r7, r3
 801a010:	681b      	ldr	r3, [r3, #0]
 801a012:	b29b      	uxth	r3, r3
 801a014:	029b      	lsls	r3, r3, #10
 801a016:	b29b      	uxth	r3, r3
 801a018:	4313      	orrs	r3, r2
 801a01a:	b29b      	uxth	r3, r3
 801a01c:	4a1c      	ldr	r2, [pc, #112]	@ (801a090 <USB_EPStartXfer+0xe34>)
 801a01e:	4313      	orrs	r3, r2
 801a020:	b29a      	uxth	r2, r3
 801a022:	187b      	adds	r3, r7, r1
 801a024:	681b      	ldr	r3, [r3, #0]
 801a026:	801a      	strh	r2, [r3, #0]
 801a028:	e057      	b.n	801a0da <USB_EPStartXfer+0xe7e>
 801a02a:	683b      	ldr	r3, [r7, #0]
 801a02c:	691b      	ldr	r3, [r3, #16]
 801a02e:	2b00      	cmp	r3, #0
 801a030:	d10b      	bne.n	801a04a <USB_EPStartXfer+0xdee>
 801a032:	2198      	movs	r1, #152	@ 0x98
 801a034:	187b      	adds	r3, r7, r1
 801a036:	681b      	ldr	r3, [r3, #0]
 801a038:	881b      	ldrh	r3, [r3, #0]
 801a03a:	b29b      	uxth	r3, r3
 801a03c:	4a14      	ldr	r2, [pc, #80]	@ (801a090 <USB_EPStartXfer+0xe34>)
 801a03e:	4313      	orrs	r3, r2
 801a040:	b29a      	uxth	r2, r3
 801a042:	187b      	adds	r3, r7, r1
 801a044:	681b      	ldr	r3, [r3, #0]
 801a046:	801a      	strh	r2, [r3, #0]
 801a048:	e047      	b.n	801a0da <USB_EPStartXfer+0xe7e>
 801a04a:	683b      	ldr	r3, [r7, #0]
 801a04c:	691b      	ldr	r3, [r3, #16]
 801a04e:	085b      	lsrs	r3, r3, #1
 801a050:	21e0      	movs	r1, #224	@ 0xe0
 801a052:	187a      	adds	r2, r7, r1
 801a054:	6013      	str	r3, [r2, #0]
 801a056:	683b      	ldr	r3, [r7, #0]
 801a058:	691b      	ldr	r3, [r3, #16]
 801a05a:	2201      	movs	r2, #1
 801a05c:	4013      	ands	r3, r2
 801a05e:	d004      	beq.n	801a06a <USB_EPStartXfer+0xe0e>
 801a060:	187b      	adds	r3, r7, r1
 801a062:	681b      	ldr	r3, [r3, #0]
 801a064:	3301      	adds	r3, #1
 801a066:	187a      	adds	r2, r7, r1
 801a068:	6013      	str	r3, [r2, #0]
 801a06a:	2198      	movs	r1, #152	@ 0x98
 801a06c:	187b      	adds	r3, r7, r1
 801a06e:	681b      	ldr	r3, [r3, #0]
 801a070:	881b      	ldrh	r3, [r3, #0]
 801a072:	b29a      	uxth	r2, r3
 801a074:	23e0      	movs	r3, #224	@ 0xe0
 801a076:	18fb      	adds	r3, r7, r3
 801a078:	681b      	ldr	r3, [r3, #0]
 801a07a:	b29b      	uxth	r3, r3
 801a07c:	029b      	lsls	r3, r3, #10
 801a07e:	b29b      	uxth	r3, r3
 801a080:	4313      	orrs	r3, r2
 801a082:	b29a      	uxth	r2, r3
 801a084:	187b      	adds	r3, r7, r1
 801a086:	681b      	ldr	r3, [r3, #0]
 801a088:	801a      	strh	r2, [r3, #0]
 801a08a:	e026      	b.n	801a0da <USB_EPStartXfer+0xe7e>
 801a08c:	00000406 	.word	0x00000406
 801a090:	ffff8000 	.word	0xffff8000
 801a094:	00000402 	.word	0x00000402
 801a098:	683b      	ldr	r3, [r7, #0]
 801a09a:	785b      	ldrb	r3, [r3, #1]
 801a09c:	2b01      	cmp	r3, #1
 801a09e:	d11c      	bne.n	801a0da <USB_EPStartXfer+0xe7e>
 801a0a0:	687b      	ldr	r3, [r7, #4]
 801a0a2:	2250      	movs	r2, #80	@ 0x50
 801a0a4:	5a9b      	ldrh	r3, [r3, r2]
 801a0a6:	b29b      	uxth	r3, r3
 801a0a8:	001a      	movs	r2, r3
 801a0aa:	21a4      	movs	r1, #164	@ 0xa4
 801a0ac:	187b      	adds	r3, r7, r1
 801a0ae:	681b      	ldr	r3, [r3, #0]
 801a0b0:	189b      	adds	r3, r3, r2
 801a0b2:	187a      	adds	r2, r7, r1
 801a0b4:	6013      	str	r3, [r2, #0]
 801a0b6:	683b      	ldr	r3, [r7, #0]
 801a0b8:	781b      	ldrb	r3, [r3, #0]
 801a0ba:	00da      	lsls	r2, r3, #3
 801a0bc:	187b      	adds	r3, r7, r1
 801a0be:	681b      	ldr	r3, [r3, #0]
 801a0c0:	18d3      	adds	r3, r2, r3
 801a0c2:	4ad2      	ldr	r2, [pc, #840]	@ (801a40c <USB_EPStartXfer+0x11b0>)
 801a0c4:	4694      	mov	ip, r2
 801a0c6:	4463      	add	r3, ip
 801a0c8:	21a0      	movs	r1, #160	@ 0xa0
 801a0ca:	187a      	adds	r2, r7, r1
 801a0cc:	6013      	str	r3, [r2, #0]
 801a0ce:	683b      	ldr	r3, [r7, #0]
 801a0d0:	691b      	ldr	r3, [r3, #16]
 801a0d2:	b29a      	uxth	r2, r3
 801a0d4:	187b      	adds	r3, r7, r1
 801a0d6:	681b      	ldr	r3, [r3, #0]
 801a0d8:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 801a0da:	683b      	ldr	r3, [r7, #0]
 801a0dc:	69db      	ldr	r3, [r3, #28]
 801a0de:	2b00      	cmp	r3, #0
 801a0e0:	d100      	bne.n	801a0e4 <USB_EPStartXfer+0xe88>
 801a0e2:	e1c2      	b.n	801a46a <USB_EPStartXfer+0x120e>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 801a0e4:	687a      	ldr	r2, [r7, #4]
 801a0e6:	683b      	ldr	r3, [r7, #0]
 801a0e8:	781b      	ldrb	r3, [r3, #0]
 801a0ea:	009b      	lsls	r3, r3, #2
 801a0ec:	18d2      	adds	r2, r2, r3
 801a0ee:	2196      	movs	r1, #150	@ 0x96
 801a0f0:	187b      	adds	r3, r7, r1
 801a0f2:	8812      	ldrh	r2, [r2, #0]
 801a0f4:	801a      	strh	r2, [r3, #0]

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 801a0f6:	187b      	adds	r3, r7, r1
 801a0f8:	881a      	ldrh	r2, [r3, #0]
 801a0fa:	2380      	movs	r3, #128	@ 0x80
 801a0fc:	01db      	lsls	r3, r3, #7
 801a0fe:	4013      	ands	r3, r2
 801a100:	d004      	beq.n	801a10c <USB_EPStartXfer+0xeb0>
 801a102:	187b      	adds	r3, r7, r1
 801a104:	881b      	ldrh	r3, [r3, #0]
 801a106:	2240      	movs	r2, #64	@ 0x40
 801a108:	4013      	ands	r3, r2
 801a10a:	d10d      	bne.n	801a128 <USB_EPStartXfer+0xecc>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 801a10c:	2196      	movs	r1, #150	@ 0x96
 801a10e:	187b      	adds	r3, r7, r1
 801a110:	881a      	ldrh	r2, [r3, #0]
 801a112:	2380      	movs	r3, #128	@ 0x80
 801a114:	01db      	lsls	r3, r3, #7
 801a116:	4013      	ands	r3, r2
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 801a118:	d000      	beq.n	801a11c <USB_EPStartXfer+0xec0>
 801a11a:	e1a6      	b.n	801a46a <USB_EPStartXfer+0x120e>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 801a11c:	187b      	adds	r3, r7, r1
 801a11e:	881b      	ldrh	r3, [r3, #0]
 801a120:	2240      	movs	r2, #64	@ 0x40
 801a122:	4013      	ands	r3, r2
 801a124:	d000      	beq.n	801a128 <USB_EPStartXfer+0xecc>
 801a126:	e1a0      	b.n	801a46a <USB_EPStartXfer+0x120e>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 801a128:	687a      	ldr	r2, [r7, #4]
 801a12a:	683b      	ldr	r3, [r7, #0]
 801a12c:	781b      	ldrb	r3, [r3, #0]
 801a12e:	009b      	lsls	r3, r3, #2
 801a130:	18d3      	adds	r3, r2, r3
 801a132:	881b      	ldrh	r3, [r3, #0]
 801a134:	b29a      	uxth	r2, r3
 801a136:	2094      	movs	r0, #148	@ 0x94
 801a138:	183b      	adds	r3, r7, r0
 801a13a:	49b5      	ldr	r1, [pc, #724]	@ (801a410 <USB_EPStartXfer+0x11b4>)
 801a13c:	400a      	ands	r2, r1
 801a13e:	801a      	strh	r2, [r3, #0]
 801a140:	687a      	ldr	r2, [r7, #4]
 801a142:	683b      	ldr	r3, [r7, #0]
 801a144:	781b      	ldrb	r3, [r3, #0]
 801a146:	009b      	lsls	r3, r3, #2
 801a148:	18d3      	adds	r3, r2, r3
 801a14a:	183a      	adds	r2, r7, r0
 801a14c:	8812      	ldrh	r2, [r2, #0]
 801a14e:	49b1      	ldr	r1, [pc, #708]	@ (801a414 <USB_EPStartXfer+0x11b8>)
 801a150:	430a      	orrs	r2, r1
 801a152:	b292      	uxth	r2, r2
 801a154:	801a      	strh	r2, [r3, #0]
 801a156:	e188      	b.n	801a46a <USB_EPStartXfer+0x120e>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 801a158:	683b      	ldr	r3, [r7, #0]
 801a15a:	78db      	ldrb	r3, [r3, #3]
 801a15c:	2b01      	cmp	r3, #1
 801a15e:	d000      	beq.n	801a162 <USB_EPStartXfer+0xf06>
 801a160:	e181      	b.n	801a466 <USB_EPStartXfer+0x120a>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 801a162:	683b      	ldr	r3, [r7, #0]
 801a164:	699a      	ldr	r2, [r3, #24]
 801a166:	683b      	ldr	r3, [r7, #0]
 801a168:	691b      	ldr	r3, [r3, #16]
 801a16a:	429a      	cmp	r2, r3
 801a16c:	d90d      	bls.n	801a18a <USB_EPStartXfer+0xf2e>
        {
          len = ep->maxpacket;
 801a16e:	683b      	ldr	r3, [r7, #0]
 801a170:	691b      	ldr	r3, [r3, #16]
 801a172:	1d7a      	adds	r2, r7, #5
 801a174:	32ff      	adds	r2, #255	@ 0xff
 801a176:	6013      	str	r3, [r2, #0]
          ep->xfer_len -= len;
 801a178:	683b      	ldr	r3, [r7, #0]
 801a17a:	699a      	ldr	r2, [r3, #24]
 801a17c:	1d7b      	adds	r3, r7, #5
 801a17e:	33ff      	adds	r3, #255	@ 0xff
 801a180:	681b      	ldr	r3, [r3, #0]
 801a182:	1ad2      	subs	r2, r2, r3
 801a184:	683b      	ldr	r3, [r7, #0]
 801a186:	619a      	str	r2, [r3, #24]
 801a188:	e007      	b.n	801a19a <USB_EPStartXfer+0xf3e>
        }
        else
        {
          len = ep->xfer_len;
 801a18a:	683b      	ldr	r3, [r7, #0]
 801a18c:	699b      	ldr	r3, [r3, #24]
 801a18e:	1d7a      	adds	r2, r7, #5
 801a190:	32ff      	adds	r2, #255	@ 0xff
 801a192:	6013      	str	r3, [r2, #0]
          ep->xfer_len = 0U;
 801a194:	683b      	ldr	r3, [r7, #0]
 801a196:	2200      	movs	r2, #0
 801a198:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 801a19a:	683b      	ldr	r3, [r7, #0]
 801a19c:	785b      	ldrb	r3, [r3, #1]
 801a19e:	2b00      	cmp	r3, #0
 801a1a0:	d000      	beq.n	801a1a4 <USB_EPStartXfer+0xf48>
 801a1a2:	e082      	b.n	801a2aa <USB_EPStartXfer+0x104e>
 801a1a4:	687b      	ldr	r3, [r7, #4]
 801a1a6:	21cc      	movs	r1, #204	@ 0xcc
 801a1a8:	187a      	adds	r2, r7, r1
 801a1aa:	6013      	str	r3, [r2, #0]
 801a1ac:	687b      	ldr	r3, [r7, #4]
 801a1ae:	2250      	movs	r2, #80	@ 0x50
 801a1b0:	5a9b      	ldrh	r3, [r3, r2]
 801a1b2:	b29b      	uxth	r3, r3
 801a1b4:	001a      	movs	r2, r3
 801a1b6:	187b      	adds	r3, r7, r1
 801a1b8:	681b      	ldr	r3, [r3, #0]
 801a1ba:	189b      	adds	r3, r3, r2
 801a1bc:	187a      	adds	r2, r7, r1
 801a1be:	6013      	str	r3, [r2, #0]
 801a1c0:	683b      	ldr	r3, [r7, #0]
 801a1c2:	781b      	ldrb	r3, [r3, #0]
 801a1c4:	00da      	lsls	r2, r3, #3
 801a1c6:	187b      	adds	r3, r7, r1
 801a1c8:	681b      	ldr	r3, [r3, #0]
 801a1ca:	18d3      	adds	r3, r2, r3
 801a1cc:	4a92      	ldr	r2, [pc, #584]	@ (801a418 <USB_EPStartXfer+0x11bc>)
 801a1ce:	4694      	mov	ip, r2
 801a1d0:	4463      	add	r3, ip
 801a1d2:	21c8      	movs	r1, #200	@ 0xc8
 801a1d4:	187a      	adds	r2, r7, r1
 801a1d6:	6013      	str	r3, [r2, #0]
 801a1d8:	187b      	adds	r3, r7, r1
 801a1da:	681b      	ldr	r3, [r3, #0]
 801a1dc:	881b      	ldrh	r3, [r3, #0]
 801a1de:	b29b      	uxth	r3, r3
 801a1e0:	059b      	lsls	r3, r3, #22
 801a1e2:	0d9b      	lsrs	r3, r3, #22
 801a1e4:	b29a      	uxth	r2, r3
 801a1e6:	187b      	adds	r3, r7, r1
 801a1e8:	681b      	ldr	r3, [r3, #0]
 801a1ea:	801a      	strh	r2, [r3, #0]
 801a1ec:	1d7b      	adds	r3, r7, #5
 801a1ee:	33ff      	adds	r3, #255	@ 0xff
 801a1f0:	681b      	ldr	r3, [r3, #0]
 801a1f2:	2b3e      	cmp	r3, #62	@ 0x3e
 801a1f4:	d925      	bls.n	801a242 <USB_EPStartXfer+0xfe6>
 801a1f6:	1d7b      	adds	r3, r7, #5
 801a1f8:	33ff      	adds	r3, #255	@ 0xff
 801a1fa:	681b      	ldr	r3, [r3, #0]
 801a1fc:	095b      	lsrs	r3, r3, #5
 801a1fe:	21dc      	movs	r1, #220	@ 0xdc
 801a200:	187a      	adds	r2, r7, r1
 801a202:	6013      	str	r3, [r2, #0]
 801a204:	1d7b      	adds	r3, r7, #5
 801a206:	33ff      	adds	r3, #255	@ 0xff
 801a208:	681b      	ldr	r3, [r3, #0]
 801a20a:	221f      	movs	r2, #31
 801a20c:	4013      	ands	r3, r2
 801a20e:	d104      	bne.n	801a21a <USB_EPStartXfer+0xfbe>
 801a210:	187b      	adds	r3, r7, r1
 801a212:	681b      	ldr	r3, [r3, #0]
 801a214:	3b01      	subs	r3, #1
 801a216:	187a      	adds	r2, r7, r1
 801a218:	6013      	str	r3, [r2, #0]
 801a21a:	21c8      	movs	r1, #200	@ 0xc8
 801a21c:	187b      	adds	r3, r7, r1
 801a21e:	681b      	ldr	r3, [r3, #0]
 801a220:	881b      	ldrh	r3, [r3, #0]
 801a222:	b29a      	uxth	r2, r3
 801a224:	23dc      	movs	r3, #220	@ 0xdc
 801a226:	18fb      	adds	r3, r7, r3
 801a228:	681b      	ldr	r3, [r3, #0]
 801a22a:	b29b      	uxth	r3, r3
 801a22c:	029b      	lsls	r3, r3, #10
 801a22e:	b29b      	uxth	r3, r3
 801a230:	4313      	orrs	r3, r2
 801a232:	b29b      	uxth	r3, r3
 801a234:	4a79      	ldr	r2, [pc, #484]	@ (801a41c <USB_EPStartXfer+0x11c0>)
 801a236:	4313      	orrs	r3, r2
 801a238:	b29a      	uxth	r2, r3
 801a23a:	187b      	adds	r3, r7, r1
 801a23c:	681b      	ldr	r3, [r3, #0]
 801a23e:	801a      	strh	r2, [r3, #0]
 801a240:	e058      	b.n	801a2f4 <USB_EPStartXfer+0x1098>
 801a242:	1d7b      	adds	r3, r7, #5
 801a244:	33ff      	adds	r3, #255	@ 0xff
 801a246:	681b      	ldr	r3, [r3, #0]
 801a248:	2b00      	cmp	r3, #0
 801a24a:	d10b      	bne.n	801a264 <USB_EPStartXfer+0x1008>
 801a24c:	21c8      	movs	r1, #200	@ 0xc8
 801a24e:	187b      	adds	r3, r7, r1
 801a250:	681b      	ldr	r3, [r3, #0]
 801a252:	881b      	ldrh	r3, [r3, #0]
 801a254:	b29b      	uxth	r3, r3
 801a256:	4a71      	ldr	r2, [pc, #452]	@ (801a41c <USB_EPStartXfer+0x11c0>)
 801a258:	4313      	orrs	r3, r2
 801a25a:	b29a      	uxth	r2, r3
 801a25c:	187b      	adds	r3, r7, r1
 801a25e:	681b      	ldr	r3, [r3, #0]
 801a260:	801a      	strh	r2, [r3, #0]
 801a262:	e047      	b.n	801a2f4 <USB_EPStartXfer+0x1098>
 801a264:	1d7b      	adds	r3, r7, #5
 801a266:	33ff      	adds	r3, #255	@ 0xff
 801a268:	681b      	ldr	r3, [r3, #0]
 801a26a:	085b      	lsrs	r3, r3, #1
 801a26c:	21dc      	movs	r1, #220	@ 0xdc
 801a26e:	187a      	adds	r2, r7, r1
 801a270:	6013      	str	r3, [r2, #0]
 801a272:	1d7b      	adds	r3, r7, #5
 801a274:	33ff      	adds	r3, #255	@ 0xff
 801a276:	681b      	ldr	r3, [r3, #0]
 801a278:	2201      	movs	r2, #1
 801a27a:	4013      	ands	r3, r2
 801a27c:	d004      	beq.n	801a288 <USB_EPStartXfer+0x102c>
 801a27e:	187b      	adds	r3, r7, r1
 801a280:	681b      	ldr	r3, [r3, #0]
 801a282:	3301      	adds	r3, #1
 801a284:	187a      	adds	r2, r7, r1
 801a286:	6013      	str	r3, [r2, #0]
 801a288:	21c8      	movs	r1, #200	@ 0xc8
 801a28a:	187b      	adds	r3, r7, r1
 801a28c:	681b      	ldr	r3, [r3, #0]
 801a28e:	881b      	ldrh	r3, [r3, #0]
 801a290:	b29a      	uxth	r2, r3
 801a292:	23dc      	movs	r3, #220	@ 0xdc
 801a294:	18fb      	adds	r3, r7, r3
 801a296:	681b      	ldr	r3, [r3, #0]
 801a298:	b29b      	uxth	r3, r3
 801a29a:	029b      	lsls	r3, r3, #10
 801a29c:	b29b      	uxth	r3, r3
 801a29e:	4313      	orrs	r3, r2
 801a2a0:	b29a      	uxth	r2, r3
 801a2a2:	187b      	adds	r3, r7, r1
 801a2a4:	681b      	ldr	r3, [r3, #0]
 801a2a6:	801a      	strh	r2, [r3, #0]
 801a2a8:	e024      	b.n	801a2f4 <USB_EPStartXfer+0x1098>
 801a2aa:	683b      	ldr	r3, [r7, #0]
 801a2ac:	785b      	ldrb	r3, [r3, #1]
 801a2ae:	2b01      	cmp	r3, #1
 801a2b0:	d120      	bne.n	801a2f4 <USB_EPStartXfer+0x1098>
 801a2b2:	687b      	ldr	r3, [r7, #4]
 801a2b4:	21d4      	movs	r1, #212	@ 0xd4
 801a2b6:	187a      	adds	r2, r7, r1
 801a2b8:	6013      	str	r3, [r2, #0]
 801a2ba:	687b      	ldr	r3, [r7, #4]
 801a2bc:	2250      	movs	r2, #80	@ 0x50
 801a2be:	5a9b      	ldrh	r3, [r3, r2]
 801a2c0:	b29b      	uxth	r3, r3
 801a2c2:	001a      	movs	r2, r3
 801a2c4:	187b      	adds	r3, r7, r1
 801a2c6:	681b      	ldr	r3, [r3, #0]
 801a2c8:	189b      	adds	r3, r3, r2
 801a2ca:	187a      	adds	r2, r7, r1
 801a2cc:	6013      	str	r3, [r2, #0]
 801a2ce:	683b      	ldr	r3, [r7, #0]
 801a2d0:	781b      	ldrb	r3, [r3, #0]
 801a2d2:	00da      	lsls	r2, r3, #3
 801a2d4:	187b      	adds	r3, r7, r1
 801a2d6:	681b      	ldr	r3, [r3, #0]
 801a2d8:	18d3      	adds	r3, r2, r3
 801a2da:	4a4f      	ldr	r2, [pc, #316]	@ (801a418 <USB_EPStartXfer+0x11bc>)
 801a2dc:	4694      	mov	ip, r2
 801a2de:	4463      	add	r3, ip
 801a2e0:	21d0      	movs	r1, #208	@ 0xd0
 801a2e2:	187a      	adds	r2, r7, r1
 801a2e4:	6013      	str	r3, [r2, #0]
 801a2e6:	1d7b      	adds	r3, r7, #5
 801a2e8:	33ff      	adds	r3, #255	@ 0xff
 801a2ea:	681b      	ldr	r3, [r3, #0]
 801a2ec:	b29a      	uxth	r2, r3
 801a2ee:	187b      	adds	r3, r7, r1
 801a2f0:	681b      	ldr	r3, [r3, #0]
 801a2f2:	801a      	strh	r2, [r3, #0]
 801a2f4:	687b      	ldr	r3, [r7, #4]
 801a2f6:	22c4      	movs	r2, #196	@ 0xc4
 801a2f8:	18ba      	adds	r2, r7, r2
 801a2fa:	6013      	str	r3, [r2, #0]
 801a2fc:	683b      	ldr	r3, [r7, #0]
 801a2fe:	785b      	ldrb	r3, [r3, #1]
 801a300:	2b00      	cmp	r3, #0
 801a302:	d000      	beq.n	801a306 <USB_EPStartXfer+0x10aa>
 801a304:	e08c      	b.n	801a420 <USB_EPStartXfer+0x11c4>
 801a306:	687b      	ldr	r3, [r7, #4]
 801a308:	21bc      	movs	r1, #188	@ 0xbc
 801a30a:	187a      	adds	r2, r7, r1
 801a30c:	6013      	str	r3, [r2, #0]
 801a30e:	687b      	ldr	r3, [r7, #4]
 801a310:	2250      	movs	r2, #80	@ 0x50
 801a312:	5a9b      	ldrh	r3, [r3, r2]
 801a314:	b29b      	uxth	r3, r3
 801a316:	001a      	movs	r2, r3
 801a318:	187b      	adds	r3, r7, r1
 801a31a:	681b      	ldr	r3, [r3, #0]
 801a31c:	189b      	adds	r3, r3, r2
 801a31e:	187a      	adds	r2, r7, r1
 801a320:	6013      	str	r3, [r2, #0]
 801a322:	683b      	ldr	r3, [r7, #0]
 801a324:	781b      	ldrb	r3, [r3, #0]
 801a326:	00da      	lsls	r2, r3, #3
 801a328:	187b      	adds	r3, r7, r1
 801a32a:	681b      	ldr	r3, [r3, #0]
 801a32c:	18d3      	adds	r3, r2, r3
 801a32e:	4a37      	ldr	r2, [pc, #220]	@ (801a40c <USB_EPStartXfer+0x11b0>)
 801a330:	4694      	mov	ip, r2
 801a332:	4463      	add	r3, ip
 801a334:	21b8      	movs	r1, #184	@ 0xb8
 801a336:	187a      	adds	r2, r7, r1
 801a338:	6013      	str	r3, [r2, #0]
 801a33a:	187b      	adds	r3, r7, r1
 801a33c:	681b      	ldr	r3, [r3, #0]
 801a33e:	881b      	ldrh	r3, [r3, #0]
 801a340:	b29b      	uxth	r3, r3
 801a342:	059b      	lsls	r3, r3, #22
 801a344:	0d9b      	lsrs	r3, r3, #22
 801a346:	b29a      	uxth	r2, r3
 801a348:	187b      	adds	r3, r7, r1
 801a34a:	681b      	ldr	r3, [r3, #0]
 801a34c:	801a      	strh	r2, [r3, #0]
 801a34e:	1d7b      	adds	r3, r7, #5
 801a350:	33ff      	adds	r3, #255	@ 0xff
 801a352:	681b      	ldr	r3, [r3, #0]
 801a354:	2b3e      	cmp	r3, #62	@ 0x3e
 801a356:	d925      	bls.n	801a3a4 <USB_EPStartXfer+0x1148>
 801a358:	1d7b      	adds	r3, r7, #5
 801a35a:	33ff      	adds	r3, #255	@ 0xff
 801a35c:	681b      	ldr	r3, [r3, #0]
 801a35e:	095b      	lsrs	r3, r3, #5
 801a360:	21d8      	movs	r1, #216	@ 0xd8
 801a362:	187a      	adds	r2, r7, r1
 801a364:	6013      	str	r3, [r2, #0]
 801a366:	1d7b      	adds	r3, r7, #5
 801a368:	33ff      	adds	r3, #255	@ 0xff
 801a36a:	681b      	ldr	r3, [r3, #0]
 801a36c:	221f      	movs	r2, #31
 801a36e:	4013      	ands	r3, r2
 801a370:	d104      	bne.n	801a37c <USB_EPStartXfer+0x1120>
 801a372:	187b      	adds	r3, r7, r1
 801a374:	681b      	ldr	r3, [r3, #0]
 801a376:	3b01      	subs	r3, #1
 801a378:	187a      	adds	r2, r7, r1
 801a37a:	6013      	str	r3, [r2, #0]
 801a37c:	21b8      	movs	r1, #184	@ 0xb8
 801a37e:	187b      	adds	r3, r7, r1
 801a380:	681b      	ldr	r3, [r3, #0]
 801a382:	881b      	ldrh	r3, [r3, #0]
 801a384:	b29a      	uxth	r2, r3
 801a386:	23d8      	movs	r3, #216	@ 0xd8
 801a388:	18fb      	adds	r3, r7, r3
 801a38a:	681b      	ldr	r3, [r3, #0]
 801a38c:	b29b      	uxth	r3, r3
 801a38e:	029b      	lsls	r3, r3, #10
 801a390:	b29b      	uxth	r3, r3
 801a392:	4313      	orrs	r3, r2
 801a394:	b29b      	uxth	r3, r3
 801a396:	4a21      	ldr	r2, [pc, #132]	@ (801a41c <USB_EPStartXfer+0x11c0>)
 801a398:	4313      	orrs	r3, r2
 801a39a:	b29a      	uxth	r2, r3
 801a39c:	187b      	adds	r3, r7, r1
 801a39e:	681b      	ldr	r3, [r3, #0]
 801a3a0:	801a      	strh	r2, [r3, #0]
 801a3a2:	e062      	b.n	801a46a <USB_EPStartXfer+0x120e>
 801a3a4:	1d7b      	adds	r3, r7, #5
 801a3a6:	33ff      	adds	r3, #255	@ 0xff
 801a3a8:	681b      	ldr	r3, [r3, #0]
 801a3aa:	2b00      	cmp	r3, #0
 801a3ac:	d10b      	bne.n	801a3c6 <USB_EPStartXfer+0x116a>
 801a3ae:	21b8      	movs	r1, #184	@ 0xb8
 801a3b0:	187b      	adds	r3, r7, r1
 801a3b2:	681b      	ldr	r3, [r3, #0]
 801a3b4:	881b      	ldrh	r3, [r3, #0]
 801a3b6:	b29b      	uxth	r3, r3
 801a3b8:	4a18      	ldr	r2, [pc, #96]	@ (801a41c <USB_EPStartXfer+0x11c0>)
 801a3ba:	4313      	orrs	r3, r2
 801a3bc:	b29a      	uxth	r2, r3
 801a3be:	187b      	adds	r3, r7, r1
 801a3c0:	681b      	ldr	r3, [r3, #0]
 801a3c2:	801a      	strh	r2, [r3, #0]
 801a3c4:	e051      	b.n	801a46a <USB_EPStartXfer+0x120e>
 801a3c6:	1d7b      	adds	r3, r7, #5
 801a3c8:	33ff      	adds	r3, #255	@ 0xff
 801a3ca:	681b      	ldr	r3, [r3, #0]
 801a3cc:	085b      	lsrs	r3, r3, #1
 801a3ce:	21d8      	movs	r1, #216	@ 0xd8
 801a3d0:	187a      	adds	r2, r7, r1
 801a3d2:	6013      	str	r3, [r2, #0]
 801a3d4:	1d7b      	adds	r3, r7, #5
 801a3d6:	33ff      	adds	r3, #255	@ 0xff
 801a3d8:	681b      	ldr	r3, [r3, #0]
 801a3da:	2201      	movs	r2, #1
 801a3dc:	4013      	ands	r3, r2
 801a3de:	d004      	beq.n	801a3ea <USB_EPStartXfer+0x118e>
 801a3e0:	187b      	adds	r3, r7, r1
 801a3e2:	681b      	ldr	r3, [r3, #0]
 801a3e4:	3301      	adds	r3, #1
 801a3e6:	187a      	adds	r2, r7, r1
 801a3e8:	6013      	str	r3, [r2, #0]
 801a3ea:	21b8      	movs	r1, #184	@ 0xb8
 801a3ec:	187b      	adds	r3, r7, r1
 801a3ee:	681b      	ldr	r3, [r3, #0]
 801a3f0:	881b      	ldrh	r3, [r3, #0]
 801a3f2:	b29a      	uxth	r2, r3
 801a3f4:	23d8      	movs	r3, #216	@ 0xd8
 801a3f6:	18fb      	adds	r3, r7, r3
 801a3f8:	681b      	ldr	r3, [r3, #0]
 801a3fa:	b29b      	uxth	r3, r3
 801a3fc:	029b      	lsls	r3, r3, #10
 801a3fe:	b29b      	uxth	r3, r3
 801a400:	4313      	orrs	r3, r2
 801a402:	b29a      	uxth	r2, r3
 801a404:	187b      	adds	r3, r7, r1
 801a406:	681b      	ldr	r3, [r3, #0]
 801a408:	801a      	strh	r2, [r3, #0]
 801a40a:	e02e      	b.n	801a46a <USB_EPStartXfer+0x120e>
 801a40c:	00000406 	.word	0x00000406
 801a410:	ffff8f8f 	.word	0xffff8f8f
 801a414:	ffff80c0 	.word	0xffff80c0
 801a418:	00000402 	.word	0x00000402
 801a41c:	ffff8000 	.word	0xffff8000
 801a420:	683b      	ldr	r3, [r7, #0]
 801a422:	785b      	ldrb	r3, [r3, #1]
 801a424:	2b01      	cmp	r3, #1
 801a426:	d120      	bne.n	801a46a <USB_EPStartXfer+0x120e>
 801a428:	687b      	ldr	r3, [r7, #4]
 801a42a:	2250      	movs	r2, #80	@ 0x50
 801a42c:	5a9b      	ldrh	r3, [r3, r2]
 801a42e:	b29b      	uxth	r3, r3
 801a430:	001a      	movs	r2, r3
 801a432:	21c4      	movs	r1, #196	@ 0xc4
 801a434:	187b      	adds	r3, r7, r1
 801a436:	681b      	ldr	r3, [r3, #0]
 801a438:	189b      	adds	r3, r3, r2
 801a43a:	187a      	adds	r2, r7, r1
 801a43c:	6013      	str	r3, [r2, #0]
 801a43e:	683b      	ldr	r3, [r7, #0]
 801a440:	781b      	ldrb	r3, [r3, #0]
 801a442:	00da      	lsls	r2, r3, #3
 801a444:	187b      	adds	r3, r7, r1
 801a446:	681b      	ldr	r3, [r3, #0]
 801a448:	18d3      	adds	r3, r2, r3
 801a44a:	4a1d      	ldr	r2, [pc, #116]	@ (801a4c0 <USB_EPStartXfer+0x1264>)
 801a44c:	4694      	mov	ip, r2
 801a44e:	4463      	add	r3, ip
 801a450:	21c0      	movs	r1, #192	@ 0xc0
 801a452:	187a      	adds	r2, r7, r1
 801a454:	6013      	str	r3, [r2, #0]
 801a456:	1d7b      	adds	r3, r7, #5
 801a458:	33ff      	adds	r3, #255	@ 0xff
 801a45a:	681b      	ldr	r3, [r3, #0]
 801a45c:	b29a      	uxth	r2, r3
 801a45e:	187b      	adds	r3, r7, r1
 801a460:	681b      	ldr	r3, [r3, #0]
 801a462:	801a      	strh	r2, [r3, #0]
 801a464:	e001      	b.n	801a46a <USB_EPStartXfer+0x120e>
      }
      else
      {
        return HAL_ERROR;
 801a466:	2301      	movs	r3, #1
 801a468:	e025      	b.n	801a4b6 <USB_EPStartXfer+0x125a>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 801a46a:	687a      	ldr	r2, [r7, #4]
 801a46c:	683b      	ldr	r3, [r7, #0]
 801a46e:	781b      	ldrb	r3, [r3, #0]
 801a470:	009b      	lsls	r3, r3, #2
 801a472:	18d3      	adds	r3, r2, r3
 801a474:	881b      	ldrh	r3, [r3, #0]
 801a476:	b29a      	uxth	r2, r3
 801a478:	208a      	movs	r0, #138	@ 0x8a
 801a47a:	183b      	adds	r3, r7, r0
 801a47c:	4911      	ldr	r1, [pc, #68]	@ (801a4c4 <USB_EPStartXfer+0x1268>)
 801a47e:	400a      	ands	r2, r1
 801a480:	801a      	strh	r2, [r3, #0]
 801a482:	183b      	adds	r3, r7, r0
 801a484:	183a      	adds	r2, r7, r0
 801a486:	8812      	ldrh	r2, [r2, #0]
 801a488:	2180      	movs	r1, #128	@ 0x80
 801a48a:	0149      	lsls	r1, r1, #5
 801a48c:	404a      	eors	r2, r1
 801a48e:	801a      	strh	r2, [r3, #0]
 801a490:	183b      	adds	r3, r7, r0
 801a492:	183a      	adds	r2, r7, r0
 801a494:	8812      	ldrh	r2, [r2, #0]
 801a496:	2180      	movs	r1, #128	@ 0x80
 801a498:	0189      	lsls	r1, r1, #6
 801a49a:	404a      	eors	r2, r1
 801a49c:	801a      	strh	r2, [r3, #0]
 801a49e:	687a      	ldr	r2, [r7, #4]
 801a4a0:	683b      	ldr	r3, [r7, #0]
 801a4a2:	781b      	ldrb	r3, [r3, #0]
 801a4a4:	009b      	lsls	r3, r3, #2
 801a4a6:	18d3      	adds	r3, r2, r3
 801a4a8:	183a      	adds	r2, r7, r0
 801a4aa:	8812      	ldrh	r2, [r2, #0]
 801a4ac:	4906      	ldr	r1, [pc, #24]	@ (801a4c8 <USB_EPStartXfer+0x126c>)
 801a4ae:	430a      	orrs	r2, r1
 801a4b0:	b292      	uxth	r2, r2
 801a4b2:	801a      	strh	r2, [r3, #0]
  }

  return HAL_OK;
 801a4b4:	2300      	movs	r3, #0
}
 801a4b6:	0018      	movs	r0, r3
 801a4b8:	46bd      	mov	sp, r7
 801a4ba:	b043      	add	sp, #268	@ 0x10c
 801a4bc:	bd90      	pop	{r4, r7, pc}
 801a4be:	46c0      	nop			@ (mov r8, r8)
 801a4c0:	00000406 	.word	0x00000406
 801a4c4:	ffffbf8f 	.word	0xffffbf8f
 801a4c8:	ffff8080 	.word	0xffff8080

0801a4cc <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 801a4cc:	b580      	push	{r7, lr}
 801a4ce:	b084      	sub	sp, #16
 801a4d0:	af00      	add	r7, sp, #0
 801a4d2:	6078      	str	r0, [r7, #4]
 801a4d4:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 801a4d6:	683b      	ldr	r3, [r7, #0]
 801a4d8:	785b      	ldrb	r3, [r3, #1]
 801a4da:	2b00      	cmp	r3, #0
 801a4dc:	d01d      	beq.n	801a51a <USB_EPSetStall+0x4e>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 801a4de:	687a      	ldr	r2, [r7, #4]
 801a4e0:	683b      	ldr	r3, [r7, #0]
 801a4e2:	781b      	ldrb	r3, [r3, #0]
 801a4e4:	009b      	lsls	r3, r3, #2
 801a4e6:	18d3      	adds	r3, r2, r3
 801a4e8:	881b      	ldrh	r3, [r3, #0]
 801a4ea:	b29a      	uxth	r2, r3
 801a4ec:	200c      	movs	r0, #12
 801a4ee:	183b      	adds	r3, r7, r0
 801a4f0:	491b      	ldr	r1, [pc, #108]	@ (801a560 <USB_EPSetStall+0x94>)
 801a4f2:	400a      	ands	r2, r1
 801a4f4:	801a      	strh	r2, [r3, #0]
 801a4f6:	183b      	adds	r3, r7, r0
 801a4f8:	183a      	adds	r2, r7, r0
 801a4fa:	8812      	ldrh	r2, [r2, #0]
 801a4fc:	2110      	movs	r1, #16
 801a4fe:	404a      	eors	r2, r1
 801a500:	801a      	strh	r2, [r3, #0]
 801a502:	687a      	ldr	r2, [r7, #4]
 801a504:	683b      	ldr	r3, [r7, #0]
 801a506:	781b      	ldrb	r3, [r3, #0]
 801a508:	009b      	lsls	r3, r3, #2
 801a50a:	18d3      	adds	r3, r2, r3
 801a50c:	183a      	adds	r2, r7, r0
 801a50e:	8812      	ldrh	r2, [r2, #0]
 801a510:	4914      	ldr	r1, [pc, #80]	@ (801a564 <USB_EPSetStall+0x98>)
 801a512:	430a      	orrs	r2, r1
 801a514:	b292      	uxth	r2, r2
 801a516:	801a      	strh	r2, [r3, #0]
 801a518:	e01d      	b.n	801a556 <USB_EPSetStall+0x8a>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 801a51a:	687a      	ldr	r2, [r7, #4]
 801a51c:	683b      	ldr	r3, [r7, #0]
 801a51e:	781b      	ldrb	r3, [r3, #0]
 801a520:	009b      	lsls	r3, r3, #2
 801a522:	18d3      	adds	r3, r2, r3
 801a524:	881b      	ldrh	r3, [r3, #0]
 801a526:	b29a      	uxth	r2, r3
 801a528:	200e      	movs	r0, #14
 801a52a:	183b      	adds	r3, r7, r0
 801a52c:	490e      	ldr	r1, [pc, #56]	@ (801a568 <USB_EPSetStall+0x9c>)
 801a52e:	400a      	ands	r2, r1
 801a530:	801a      	strh	r2, [r3, #0]
 801a532:	183b      	adds	r3, r7, r0
 801a534:	183a      	adds	r2, r7, r0
 801a536:	8812      	ldrh	r2, [r2, #0]
 801a538:	2180      	movs	r1, #128	@ 0x80
 801a53a:	0149      	lsls	r1, r1, #5
 801a53c:	404a      	eors	r2, r1
 801a53e:	801a      	strh	r2, [r3, #0]
 801a540:	687a      	ldr	r2, [r7, #4]
 801a542:	683b      	ldr	r3, [r7, #0]
 801a544:	781b      	ldrb	r3, [r3, #0]
 801a546:	009b      	lsls	r3, r3, #2
 801a548:	18d3      	adds	r3, r2, r3
 801a54a:	183a      	adds	r2, r7, r0
 801a54c:	8812      	ldrh	r2, [r2, #0]
 801a54e:	4905      	ldr	r1, [pc, #20]	@ (801a564 <USB_EPSetStall+0x98>)
 801a550:	430a      	orrs	r2, r1
 801a552:	b292      	uxth	r2, r2
 801a554:	801a      	strh	r2, [r3, #0]
  }

  return HAL_OK;
 801a556:	2300      	movs	r3, #0
}
 801a558:	0018      	movs	r0, r3
 801a55a:	46bd      	mov	sp, r7
 801a55c:	b004      	add	sp, #16
 801a55e:	bd80      	pop	{r7, pc}
 801a560:	ffff8fbf 	.word	0xffff8fbf
 801a564:	ffff8080 	.word	0xffff8080
 801a568:	ffffbf8f 	.word	0xffffbf8f

0801a56c <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 801a56c:	b580      	push	{r7, lr}
 801a56e:	b086      	sub	sp, #24
 801a570:	af00      	add	r7, sp, #0
 801a572:	6078      	str	r0, [r7, #4]
 801a574:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 801a576:	683b      	ldr	r3, [r7, #0]
 801a578:	7b1b      	ldrb	r3, [r3, #12]
 801a57a:	2b00      	cmp	r3, #0
 801a57c:	d000      	beq.n	801a580 <USB_EPClearStall+0x14>
 801a57e:	e095      	b.n	801a6ac <USB_EPClearStall+0x140>
  {
    if (ep->is_in != 0U)
 801a580:	683b      	ldr	r3, [r7, #0]
 801a582:	785b      	ldrb	r3, [r3, #1]
 801a584:	2b00      	cmp	r3, #0
 801a586:	d046      	beq.n	801a616 <USB_EPClearStall+0xaa>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 801a588:	687a      	ldr	r2, [r7, #4]
 801a58a:	683b      	ldr	r3, [r7, #0]
 801a58c:	781b      	ldrb	r3, [r3, #0]
 801a58e:	009b      	lsls	r3, r3, #2
 801a590:	18d2      	adds	r2, r2, r3
 801a592:	2110      	movs	r1, #16
 801a594:	187b      	adds	r3, r7, r1
 801a596:	8812      	ldrh	r2, [r2, #0]
 801a598:	801a      	strh	r2, [r3, #0]
 801a59a:	187b      	adds	r3, r7, r1
 801a59c:	881b      	ldrh	r3, [r3, #0]
 801a59e:	2240      	movs	r2, #64	@ 0x40
 801a5a0:	4013      	ands	r3, r2
 801a5a2:	d016      	beq.n	801a5d2 <USB_EPClearStall+0x66>
 801a5a4:	687a      	ldr	r2, [r7, #4]
 801a5a6:	683b      	ldr	r3, [r7, #0]
 801a5a8:	781b      	ldrb	r3, [r3, #0]
 801a5aa:	009b      	lsls	r3, r3, #2
 801a5ac:	18d3      	adds	r3, r2, r3
 801a5ae:	881b      	ldrh	r3, [r3, #0]
 801a5b0:	b29a      	uxth	r2, r3
 801a5b2:	200e      	movs	r0, #14
 801a5b4:	183b      	adds	r3, r7, r0
 801a5b6:	4940      	ldr	r1, [pc, #256]	@ (801a6b8 <USB_EPClearStall+0x14c>)
 801a5b8:	400a      	ands	r2, r1
 801a5ba:	801a      	strh	r2, [r3, #0]
 801a5bc:	687a      	ldr	r2, [r7, #4]
 801a5be:	683b      	ldr	r3, [r7, #0]
 801a5c0:	781b      	ldrb	r3, [r3, #0]
 801a5c2:	009b      	lsls	r3, r3, #2
 801a5c4:	18d3      	adds	r3, r2, r3
 801a5c6:	183a      	adds	r2, r7, r0
 801a5c8:	8812      	ldrh	r2, [r2, #0]
 801a5ca:	493c      	ldr	r1, [pc, #240]	@ (801a6bc <USB_EPClearStall+0x150>)
 801a5cc:	430a      	orrs	r2, r1
 801a5ce:	b292      	uxth	r2, r2
 801a5d0:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 801a5d2:	683b      	ldr	r3, [r7, #0]
 801a5d4:	78db      	ldrb	r3, [r3, #3]
 801a5d6:	2b01      	cmp	r3, #1
 801a5d8:	d068      	beq.n	801a6ac <USB_EPClearStall+0x140>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 801a5da:	687a      	ldr	r2, [r7, #4]
 801a5dc:	683b      	ldr	r3, [r7, #0]
 801a5de:	781b      	ldrb	r3, [r3, #0]
 801a5e0:	009b      	lsls	r3, r3, #2
 801a5e2:	18d3      	adds	r3, r2, r3
 801a5e4:	881b      	ldrh	r3, [r3, #0]
 801a5e6:	b29a      	uxth	r2, r3
 801a5e8:	200c      	movs	r0, #12
 801a5ea:	183b      	adds	r3, r7, r0
 801a5ec:	4934      	ldr	r1, [pc, #208]	@ (801a6c0 <USB_EPClearStall+0x154>)
 801a5ee:	400a      	ands	r2, r1
 801a5f0:	801a      	strh	r2, [r3, #0]
 801a5f2:	183b      	adds	r3, r7, r0
 801a5f4:	183a      	adds	r2, r7, r0
 801a5f6:	8812      	ldrh	r2, [r2, #0]
 801a5f8:	2120      	movs	r1, #32
 801a5fa:	404a      	eors	r2, r1
 801a5fc:	801a      	strh	r2, [r3, #0]
 801a5fe:	687a      	ldr	r2, [r7, #4]
 801a600:	683b      	ldr	r3, [r7, #0]
 801a602:	781b      	ldrb	r3, [r3, #0]
 801a604:	009b      	lsls	r3, r3, #2
 801a606:	18d3      	adds	r3, r2, r3
 801a608:	183a      	adds	r2, r7, r0
 801a60a:	8812      	ldrh	r2, [r2, #0]
 801a60c:	492d      	ldr	r1, [pc, #180]	@ (801a6c4 <USB_EPClearStall+0x158>)
 801a60e:	430a      	orrs	r2, r1
 801a610:	b292      	uxth	r2, r2
 801a612:	801a      	strh	r2, [r3, #0]
 801a614:	e04a      	b.n	801a6ac <USB_EPClearStall+0x140>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 801a616:	687a      	ldr	r2, [r7, #4]
 801a618:	683b      	ldr	r3, [r7, #0]
 801a61a:	781b      	ldrb	r3, [r3, #0]
 801a61c:	009b      	lsls	r3, r3, #2
 801a61e:	18d2      	adds	r2, r2, r3
 801a620:	2116      	movs	r1, #22
 801a622:	187b      	adds	r3, r7, r1
 801a624:	8812      	ldrh	r2, [r2, #0]
 801a626:	801a      	strh	r2, [r3, #0]
 801a628:	187b      	adds	r3, r7, r1
 801a62a:	881a      	ldrh	r2, [r3, #0]
 801a62c:	2380      	movs	r3, #128	@ 0x80
 801a62e:	01db      	lsls	r3, r3, #7
 801a630:	4013      	ands	r3, r2
 801a632:	d016      	beq.n	801a662 <USB_EPClearStall+0xf6>
 801a634:	687a      	ldr	r2, [r7, #4]
 801a636:	683b      	ldr	r3, [r7, #0]
 801a638:	781b      	ldrb	r3, [r3, #0]
 801a63a:	009b      	lsls	r3, r3, #2
 801a63c:	18d3      	adds	r3, r2, r3
 801a63e:	881b      	ldrh	r3, [r3, #0]
 801a640:	b29a      	uxth	r2, r3
 801a642:	2014      	movs	r0, #20
 801a644:	183b      	adds	r3, r7, r0
 801a646:	491c      	ldr	r1, [pc, #112]	@ (801a6b8 <USB_EPClearStall+0x14c>)
 801a648:	400a      	ands	r2, r1
 801a64a:	801a      	strh	r2, [r3, #0]
 801a64c:	687a      	ldr	r2, [r7, #4]
 801a64e:	683b      	ldr	r3, [r7, #0]
 801a650:	781b      	ldrb	r3, [r3, #0]
 801a652:	009b      	lsls	r3, r3, #2
 801a654:	18d3      	adds	r3, r2, r3
 801a656:	183a      	adds	r2, r7, r0
 801a658:	8812      	ldrh	r2, [r2, #0]
 801a65a:	491b      	ldr	r1, [pc, #108]	@ (801a6c8 <USB_EPClearStall+0x15c>)
 801a65c:	430a      	orrs	r2, r1
 801a65e:	b292      	uxth	r2, r2
 801a660:	801a      	strh	r2, [r3, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 801a662:	687a      	ldr	r2, [r7, #4]
 801a664:	683b      	ldr	r3, [r7, #0]
 801a666:	781b      	ldrb	r3, [r3, #0]
 801a668:	009b      	lsls	r3, r3, #2
 801a66a:	18d3      	adds	r3, r2, r3
 801a66c:	881b      	ldrh	r3, [r3, #0]
 801a66e:	b29a      	uxth	r2, r3
 801a670:	2012      	movs	r0, #18
 801a672:	183b      	adds	r3, r7, r0
 801a674:	4915      	ldr	r1, [pc, #84]	@ (801a6cc <USB_EPClearStall+0x160>)
 801a676:	400a      	ands	r2, r1
 801a678:	801a      	strh	r2, [r3, #0]
 801a67a:	183b      	adds	r3, r7, r0
 801a67c:	183a      	adds	r2, r7, r0
 801a67e:	8812      	ldrh	r2, [r2, #0]
 801a680:	2180      	movs	r1, #128	@ 0x80
 801a682:	0149      	lsls	r1, r1, #5
 801a684:	404a      	eors	r2, r1
 801a686:	801a      	strh	r2, [r3, #0]
 801a688:	183b      	adds	r3, r7, r0
 801a68a:	183a      	adds	r2, r7, r0
 801a68c:	8812      	ldrh	r2, [r2, #0]
 801a68e:	2180      	movs	r1, #128	@ 0x80
 801a690:	0189      	lsls	r1, r1, #6
 801a692:	404a      	eors	r2, r1
 801a694:	801a      	strh	r2, [r3, #0]
 801a696:	687a      	ldr	r2, [r7, #4]
 801a698:	683b      	ldr	r3, [r7, #0]
 801a69a:	781b      	ldrb	r3, [r3, #0]
 801a69c:	009b      	lsls	r3, r3, #2
 801a69e:	18d3      	adds	r3, r2, r3
 801a6a0:	183a      	adds	r2, r7, r0
 801a6a2:	8812      	ldrh	r2, [r2, #0]
 801a6a4:	4907      	ldr	r1, [pc, #28]	@ (801a6c4 <USB_EPClearStall+0x158>)
 801a6a6:	430a      	orrs	r2, r1
 801a6a8:	b292      	uxth	r2, r2
 801a6aa:	801a      	strh	r2, [r3, #0]
    }
  }

  return HAL_OK;
 801a6ac:	2300      	movs	r3, #0
}
 801a6ae:	0018      	movs	r0, r3
 801a6b0:	46bd      	mov	sp, r7
 801a6b2:	b006      	add	sp, #24
 801a6b4:	bd80      	pop	{r7, pc}
 801a6b6:	46c0      	nop			@ (mov r8, r8)
 801a6b8:	ffff8f8f 	.word	0xffff8f8f
 801a6bc:	ffff80c0 	.word	0xffff80c0
 801a6c0:	ffff8fbf 	.word	0xffff8fbf
 801a6c4:	ffff8080 	.word	0xffff8080
 801a6c8:	ffffc080 	.word	0xffffc080
 801a6cc:	ffffbf8f 	.word	0xffffbf8f

0801a6d0 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 801a6d0:	b580      	push	{r7, lr}
 801a6d2:	b082      	sub	sp, #8
 801a6d4:	af00      	add	r7, sp, #0
 801a6d6:	6078      	str	r0, [r7, #4]
 801a6d8:	000a      	movs	r2, r1
 801a6da:	1cfb      	adds	r3, r7, #3
 801a6dc:	701a      	strb	r2, [r3, #0]
  if (address == 0U)
 801a6de:	1cfb      	adds	r3, r7, #3
 801a6e0:	781b      	ldrb	r3, [r3, #0]
 801a6e2:	2b00      	cmp	r3, #0
 801a6e4:	d103      	bne.n	801a6ee <USB_SetDevAddress+0x1e>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 801a6e6:	687b      	ldr	r3, [r7, #4]
 801a6e8:	224c      	movs	r2, #76	@ 0x4c
 801a6ea:	2180      	movs	r1, #128	@ 0x80
 801a6ec:	5299      	strh	r1, [r3, r2]
  }

  return HAL_OK;
 801a6ee:	2300      	movs	r3, #0
}
 801a6f0:	0018      	movs	r0, r3
 801a6f2:	46bd      	mov	sp, r7
 801a6f4:	b002      	add	sp, #8
 801a6f6:	bd80      	pop	{r7, pc}

0801a6f8 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 801a6f8:	b580      	push	{r7, lr}
 801a6fa:	b082      	sub	sp, #8
 801a6fc:	af00      	add	r7, sp, #0
 801a6fe:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 801a700:	687b      	ldr	r3, [r7, #4]
 801a702:	2258      	movs	r2, #88	@ 0x58
 801a704:	5a9b      	ldrh	r3, [r3, r2]
 801a706:	b29b      	uxth	r3, r3
 801a708:	4a05      	ldr	r2, [pc, #20]	@ (801a720 <USB_DevConnect+0x28>)
 801a70a:	4313      	orrs	r3, r2
 801a70c:	b299      	uxth	r1, r3
 801a70e:	687b      	ldr	r3, [r7, #4]
 801a710:	2258      	movs	r2, #88	@ 0x58
 801a712:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 801a714:	2300      	movs	r3, #0
}
 801a716:	0018      	movs	r0, r3
 801a718:	46bd      	mov	sp, r7
 801a71a:	b002      	add	sp, #8
 801a71c:	bd80      	pop	{r7, pc}
 801a71e:	46c0      	nop			@ (mov r8, r8)
 801a720:	ffff8000 	.word	0xffff8000

0801a724 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef *USBx)
{
 801a724:	b580      	push	{r7, lr}
 801a726:	b084      	sub	sp, #16
 801a728:	af00      	add	r7, sp, #0
 801a72a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 801a72c:	687b      	ldr	r3, [r7, #4]
 801a72e:	2244      	movs	r2, #68	@ 0x44
 801a730:	5a9b      	ldrh	r3, [r3, r2]
 801a732:	b29b      	uxth	r3, r3
 801a734:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 801a736:	68fb      	ldr	r3, [r7, #12]
}
 801a738:	0018      	movs	r0, r3
 801a73a:	46bd      	mov	sp, r7
 801a73c:	b004      	add	sp, #16
 801a73e:	bd80      	pop	{r7, pc}

0801a740 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 801a740:	b580      	push	{r7, lr}
 801a742:	b08a      	sub	sp, #40	@ 0x28
 801a744:	af00      	add	r7, sp, #0
 801a746:	60f8      	str	r0, [r7, #12]
 801a748:	60b9      	str	r1, [r7, #8]
 801a74a:	0019      	movs	r1, r3
 801a74c:	1dbb      	adds	r3, r7, #6
 801a74e:	801a      	strh	r2, [r3, #0]
 801a750:	1d3b      	adds	r3, r7, #4
 801a752:	1c0a      	adds	r2, r1, #0
 801a754:	801a      	strh	r2, [r3, #0]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 801a756:	1d3b      	adds	r3, r7, #4
 801a758:	881b      	ldrh	r3, [r3, #0]
 801a75a:	3301      	adds	r3, #1
 801a75c:	085b      	lsrs	r3, r3, #1
 801a75e:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 801a760:	68fb      	ldr	r3, [r7, #12]
 801a762:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 801a764:	68bb      	ldr	r3, [r7, #8]
 801a766:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 801a768:	1dbb      	adds	r3, r7, #6
 801a76a:	881a      	ldrh	r2, [r3, #0]
 801a76c:	697b      	ldr	r3, [r7, #20]
 801a76e:	18d3      	adds	r3, r2, r3
 801a770:	2280      	movs	r2, #128	@ 0x80
 801a772:	00d2      	lsls	r2, r2, #3
 801a774:	4694      	mov	ip, r2
 801a776:	4463      	add	r3, ip
 801a778:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 801a77a:	69bb      	ldr	r3, [r7, #24]
 801a77c:	627b      	str	r3, [r7, #36]	@ 0x24
 801a77e:	e020      	b.n	801a7c2 <USB_WritePMA+0x82>
  {
    WrVal = pBuf[0];
 801a780:	69fb      	ldr	r3, [r7, #28]
 801a782:	781a      	ldrb	r2, [r3, #0]
 801a784:	2112      	movs	r1, #18
 801a786:	187b      	adds	r3, r7, r1
 801a788:	801a      	strh	r2, [r3, #0]
    WrVal |= (uint16_t)pBuf[1] << 8;
 801a78a:	69fb      	ldr	r3, [r7, #28]
 801a78c:	3301      	adds	r3, #1
 801a78e:	781b      	ldrb	r3, [r3, #0]
 801a790:	021b      	lsls	r3, r3, #8
 801a792:	b21a      	sxth	r2, r3
 801a794:	187b      	adds	r3, r7, r1
 801a796:	2000      	movs	r0, #0
 801a798:	5e1b      	ldrsh	r3, [r3, r0]
 801a79a:	4313      	orrs	r3, r2
 801a79c:	b21a      	sxth	r2, r3
 801a79e:	187b      	adds	r3, r7, r1
 801a7a0:	801a      	strh	r2, [r3, #0]
    *pdwVal = (WrVal & 0xFFFFU);
 801a7a2:	6a3b      	ldr	r3, [r7, #32]
 801a7a4:	187a      	adds	r2, r7, r1
 801a7a6:	8812      	ldrh	r2, [r2, #0]
 801a7a8:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 801a7aa:	6a3b      	ldr	r3, [r7, #32]
 801a7ac:	3302      	adds	r3, #2
 801a7ae:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 801a7b0:	69fb      	ldr	r3, [r7, #28]
 801a7b2:	3301      	adds	r3, #1
 801a7b4:	61fb      	str	r3, [r7, #28]
    pBuf++;
 801a7b6:	69fb      	ldr	r3, [r7, #28]
 801a7b8:	3301      	adds	r3, #1
 801a7ba:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 801a7bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a7be:	3b01      	subs	r3, #1
 801a7c0:	627b      	str	r3, [r7, #36]	@ 0x24
 801a7c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a7c4:	2b00      	cmp	r3, #0
 801a7c6:	d1db      	bne.n	801a780 <USB_WritePMA+0x40>
  }
}
 801a7c8:	46c0      	nop			@ (mov r8, r8)
 801a7ca:	46c0      	nop			@ (mov r8, r8)
 801a7cc:	46bd      	mov	sp, r7
 801a7ce:	b00a      	add	sp, #40	@ 0x28
 801a7d0:	bd80      	pop	{r7, pc}

0801a7d2 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 801a7d2:	b580      	push	{r7, lr}
 801a7d4:	b08a      	sub	sp, #40	@ 0x28
 801a7d6:	af00      	add	r7, sp, #0
 801a7d8:	60f8      	str	r0, [r7, #12]
 801a7da:	60b9      	str	r1, [r7, #8]
 801a7dc:	0019      	movs	r1, r3
 801a7de:	1dbb      	adds	r3, r7, #6
 801a7e0:	801a      	strh	r2, [r3, #0]
 801a7e2:	1d3b      	adds	r3, r7, #4
 801a7e4:	1c0a      	adds	r2, r1, #0
 801a7e6:	801a      	strh	r2, [r3, #0]
  uint32_t n = (uint32_t)wNBytes >> 1;
 801a7e8:	1d3b      	adds	r3, r7, #4
 801a7ea:	881b      	ldrh	r3, [r3, #0]
 801a7ec:	085b      	lsrs	r3, r3, #1
 801a7ee:	b29b      	uxth	r3, r3
 801a7f0:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 801a7f2:	68fb      	ldr	r3, [r7, #12]
 801a7f4:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 801a7f6:	68bb      	ldr	r3, [r7, #8]
 801a7f8:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 801a7fa:	1dbb      	adds	r3, r7, #6
 801a7fc:	881a      	ldrh	r2, [r3, #0]
 801a7fe:	697b      	ldr	r3, [r7, #20]
 801a800:	18d3      	adds	r3, r2, r3
 801a802:	2280      	movs	r2, #128	@ 0x80
 801a804:	00d2      	lsls	r2, r2, #3
 801a806:	4694      	mov	ip, r2
 801a808:	4463      	add	r3, ip
 801a80a:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 801a80c:	69bb      	ldr	r3, [r7, #24]
 801a80e:	627b      	str	r3, [r7, #36]	@ 0x24
 801a810:	e018      	b.n	801a844 <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 801a812:	6a3b      	ldr	r3, [r7, #32]
 801a814:	881b      	ldrh	r3, [r3, #0]
 801a816:	b29b      	uxth	r3, r3
 801a818:	613b      	str	r3, [r7, #16]
    pdwVal++;
 801a81a:	6a3b      	ldr	r3, [r7, #32]
 801a81c:	3302      	adds	r3, #2
 801a81e:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 801a820:	693b      	ldr	r3, [r7, #16]
 801a822:	b2da      	uxtb	r2, r3
 801a824:	69fb      	ldr	r3, [r7, #28]
 801a826:	701a      	strb	r2, [r3, #0]
    pBuf++;
 801a828:	69fb      	ldr	r3, [r7, #28]
 801a82a:	3301      	adds	r3, #1
 801a82c:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 801a82e:	693b      	ldr	r3, [r7, #16]
 801a830:	0a1b      	lsrs	r3, r3, #8
 801a832:	b2da      	uxtb	r2, r3
 801a834:	69fb      	ldr	r3, [r7, #28]
 801a836:	701a      	strb	r2, [r3, #0]
    pBuf++;
 801a838:	69fb      	ldr	r3, [r7, #28]
 801a83a:	3301      	adds	r3, #1
 801a83c:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 801a83e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a840:	3b01      	subs	r3, #1
 801a842:	627b      	str	r3, [r7, #36]	@ 0x24
 801a844:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a846:	2b00      	cmp	r3, #0
 801a848:	d1e3      	bne.n	801a812 <USB_ReadPMA+0x40>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 801a84a:	1d3b      	adds	r3, r7, #4
 801a84c:	881b      	ldrh	r3, [r3, #0]
 801a84e:	2201      	movs	r2, #1
 801a850:	4013      	ands	r3, r2
 801a852:	b29b      	uxth	r3, r3
 801a854:	2b00      	cmp	r3, #0
 801a856:	d007      	beq.n	801a868 <USB_ReadPMA+0x96>
  {
    RdVal = *pdwVal;
 801a858:	6a3b      	ldr	r3, [r7, #32]
 801a85a:	881b      	ldrh	r3, [r3, #0]
 801a85c:	b29b      	uxth	r3, r3
 801a85e:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 801a860:	693b      	ldr	r3, [r7, #16]
 801a862:	b2da      	uxtb	r2, r3
 801a864:	69fb      	ldr	r3, [r7, #28]
 801a866:	701a      	strb	r2, [r3, #0]
  }
}
 801a868:	46c0      	nop			@ (mov r8, r8)
 801a86a:	46bd      	mov	sp, r7
 801a86c:	b00a      	add	sp, #40	@ 0x28
 801a86e:	bd80      	pop	{r7, pc}

0801a870 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 801a870:	b580      	push	{r7, lr}
 801a872:	b084      	sub	sp, #16
 801a874:	af00      	add	r7, sp, #0
 801a876:	6078      	str	r0, [r7, #4]
 801a878:	000a      	movs	r2, r1
 801a87a:	1cfb      	adds	r3, r7, #3
 801a87c:	701a      	strb	r2, [r3, #0]
  uint8_t ret = 0U;
 801a87e:	230f      	movs	r3, #15
 801a880:	18fb      	adds	r3, r7, r3
 801a882:	2200      	movs	r2, #0
 801a884:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 801a886:	687b      	ldr	r3, [r7, #4]
 801a888:	7c1b      	ldrb	r3, [r3, #16]
 801a88a:	2b00      	cmp	r3, #0
 801a88c:	d116      	bne.n	801a8bc <USBD_CDC_Init+0x4c>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 801a88e:	2380      	movs	r3, #128	@ 0x80
 801a890:	009b      	lsls	r3, r3, #2
 801a892:	6878      	ldr	r0, [r7, #4]
 801a894:	2202      	movs	r2, #2
 801a896:	2181      	movs	r1, #129	@ 0x81
 801a898:	f002 f8eb 	bl	801ca72 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 801a89c:	687b      	ldr	r3, [r7, #4]
 801a89e:	2201      	movs	r2, #1
 801a8a0:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 801a8a2:	2380      	movs	r3, #128	@ 0x80
 801a8a4:	009b      	lsls	r3, r3, #2
 801a8a6:	6878      	ldr	r0, [r7, #4]
 801a8a8:	2202      	movs	r2, #2
 801a8aa:	2101      	movs	r1, #1
 801a8ac:	f002 f8e1 	bl	801ca72 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 801a8b0:	687a      	ldr	r2, [r7, #4]
 801a8b2:	23b6      	movs	r3, #182	@ 0xb6
 801a8b4:	005b      	lsls	r3, r3, #1
 801a8b6:	2101      	movs	r1, #1
 801a8b8:	50d1      	str	r1, [r2, r3]
 801a8ba:	e013      	b.n	801a8e4 <USBD_CDC_Init+0x74>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 801a8bc:	6878      	ldr	r0, [r7, #4]
 801a8be:	2340      	movs	r3, #64	@ 0x40
 801a8c0:	2202      	movs	r2, #2
 801a8c2:	2181      	movs	r1, #129	@ 0x81
 801a8c4:	f002 f8d5 	bl	801ca72 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 801a8c8:	687b      	ldr	r3, [r7, #4]
 801a8ca:	2201      	movs	r2, #1
 801a8cc:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 801a8ce:	6878      	ldr	r0, [r7, #4]
 801a8d0:	2340      	movs	r3, #64	@ 0x40
 801a8d2:	2202      	movs	r2, #2
 801a8d4:	2101      	movs	r1, #1
 801a8d6:	f002 f8cc 	bl	801ca72 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 801a8da:	687a      	ldr	r2, [r7, #4]
 801a8dc:	23b6      	movs	r3, #182	@ 0xb6
 801a8de:	005b      	lsls	r3, r3, #1
 801a8e0:	2101      	movs	r1, #1
 801a8e2:	50d1      	str	r1, [r2, r3]
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 801a8e4:	6878      	ldr	r0, [r7, #4]
 801a8e6:	2308      	movs	r3, #8
 801a8e8:	2203      	movs	r2, #3
 801a8ea:	2182      	movs	r1, #130	@ 0x82
 801a8ec:	f002 f8c1 	bl	801ca72 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 801a8f0:	687b      	ldr	r3, [r7, #4]
 801a8f2:	2201      	movs	r2, #1
 801a8f4:	641a      	str	r2, [r3, #64]	@ 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 801a8f6:	2387      	movs	r3, #135	@ 0x87
 801a8f8:	009b      	lsls	r3, r3, #2
 801a8fa:	0018      	movs	r0, r3
 801a8fc:	f002 fa52 	bl	801cda4 <USBD_static_malloc>
 801a900:	0001      	movs	r1, r0
 801a902:	687a      	ldr	r2, [r7, #4]
 801a904:	23ae      	movs	r3, #174	@ 0xae
 801a906:	009b      	lsls	r3, r3, #2
 801a908:	50d1      	str	r1, [r2, r3]

  if (pdev->pClassData == NULL)
 801a90a:	687a      	ldr	r2, [r7, #4]
 801a90c:	23ae      	movs	r3, #174	@ 0xae
 801a90e:	009b      	lsls	r3, r3, #2
 801a910:	58d3      	ldr	r3, [r2, r3]
 801a912:	2b00      	cmp	r3, #0
 801a914:	d104      	bne.n	801a920 <USBD_CDC_Init+0xb0>
  {
    ret = 1U;
 801a916:	230f      	movs	r3, #15
 801a918:	18fb      	adds	r3, r7, r3
 801a91a:	2201      	movs	r2, #1
 801a91c:	701a      	strb	r2, [r3, #0]
 801a91e:	e02c      	b.n	801a97a <USBD_CDC_Init+0x10a>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 801a920:	687a      	ldr	r2, [r7, #4]
 801a922:	23ae      	movs	r3, #174	@ 0xae
 801a924:	009b      	lsls	r3, r3, #2
 801a926:	58d3      	ldr	r3, [r2, r3]
 801a928:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 801a92a:	687a      	ldr	r2, [r7, #4]
 801a92c:	23af      	movs	r3, #175	@ 0xaf
 801a92e:	009b      	lsls	r3, r3, #2
 801a930:	58d3      	ldr	r3, [r2, r3]
 801a932:	681b      	ldr	r3, [r3, #0]
 801a934:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 801a936:	68ba      	ldr	r2, [r7, #8]
 801a938:	2385      	movs	r3, #133	@ 0x85
 801a93a:	009b      	lsls	r3, r3, #2
 801a93c:	2100      	movs	r1, #0
 801a93e:	50d1      	str	r1, [r2, r3]
    hcdc->RxState = 0U;
 801a940:	68ba      	ldr	r2, [r7, #8]
 801a942:	2386      	movs	r3, #134	@ 0x86
 801a944:	009b      	lsls	r3, r3, #2
 801a946:	2100      	movs	r1, #0
 801a948:	50d1      	str	r1, [r2, r3]

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 801a94a:	687b      	ldr	r3, [r7, #4]
 801a94c:	7c1b      	ldrb	r3, [r3, #16]
 801a94e:	2b00      	cmp	r3, #0
 801a950:	d10a      	bne.n	801a968 <USBD_CDC_Init+0xf8>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 801a952:	68ba      	ldr	r2, [r7, #8]
 801a954:	2381      	movs	r3, #129	@ 0x81
 801a956:	009b      	lsls	r3, r3, #2
 801a958:	58d2      	ldr	r2, [r2, r3]
 801a95a:	2380      	movs	r3, #128	@ 0x80
 801a95c:	009b      	lsls	r3, r3, #2
 801a95e:	6878      	ldr	r0, [r7, #4]
 801a960:	2101      	movs	r1, #1
 801a962:	f002 f9d1 	bl	801cd08 <USBD_LL_PrepareReceive>
 801a966:	e008      	b.n	801a97a <USBD_CDC_Init+0x10a>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 801a968:	68ba      	ldr	r2, [r7, #8]
 801a96a:	2381      	movs	r3, #129	@ 0x81
 801a96c:	009b      	lsls	r3, r3, #2
 801a96e:	58d2      	ldr	r2, [r2, r3]
 801a970:	6878      	ldr	r0, [r7, #4]
 801a972:	2340      	movs	r3, #64	@ 0x40
 801a974:	2101      	movs	r1, #1
 801a976:	f002 f9c7 	bl	801cd08 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 801a97a:	230f      	movs	r3, #15
 801a97c:	18fb      	adds	r3, r7, r3
 801a97e:	781b      	ldrb	r3, [r3, #0]
}
 801a980:	0018      	movs	r0, r3
 801a982:	46bd      	mov	sp, r7
 801a984:	b004      	add	sp, #16
 801a986:	bd80      	pop	{r7, pc}

0801a988 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 801a988:	b580      	push	{r7, lr}
 801a98a:	b084      	sub	sp, #16
 801a98c:	af00      	add	r7, sp, #0
 801a98e:	6078      	str	r0, [r7, #4]
 801a990:	000a      	movs	r2, r1
 801a992:	1cfb      	adds	r3, r7, #3
 801a994:	701a      	strb	r2, [r3, #0]
  uint8_t ret = 0U;
 801a996:	230f      	movs	r3, #15
 801a998:	18fb      	adds	r3, r7, r3
 801a99a:	2200      	movs	r2, #0
 801a99c:	701a      	strb	r2, [r3, #0]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 801a99e:	687b      	ldr	r3, [r7, #4]
 801a9a0:	2181      	movs	r1, #129	@ 0x81
 801a9a2:	0018      	movs	r0, r3
 801a9a4:	f002 f89c 	bl	801cae0 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 801a9a8:	687b      	ldr	r3, [r7, #4]
 801a9aa:	2200      	movs	r2, #0
 801a9ac:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 801a9ae:	687b      	ldr	r3, [r7, #4]
 801a9b0:	2101      	movs	r1, #1
 801a9b2:	0018      	movs	r0, r3
 801a9b4:	f002 f894 	bl	801cae0 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 801a9b8:	687a      	ldr	r2, [r7, #4]
 801a9ba:	23b6      	movs	r3, #182	@ 0xb6
 801a9bc:	005b      	lsls	r3, r3, #1
 801a9be:	2100      	movs	r1, #0
 801a9c0:	50d1      	str	r1, [r2, r3]

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 801a9c2:	687b      	ldr	r3, [r7, #4]
 801a9c4:	2182      	movs	r1, #130	@ 0x82
 801a9c6:	0018      	movs	r0, r3
 801a9c8:	f002 f88a 	bl	801cae0 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 801a9cc:	687b      	ldr	r3, [r7, #4]
 801a9ce:	2200      	movs	r2, #0
 801a9d0:	641a      	str	r2, [r3, #64]	@ 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 801a9d2:	687a      	ldr	r2, [r7, #4]
 801a9d4:	23ae      	movs	r3, #174	@ 0xae
 801a9d6:	009b      	lsls	r3, r3, #2
 801a9d8:	58d3      	ldr	r3, [r2, r3]
 801a9da:	2b00      	cmp	r3, #0
 801a9dc:	d011      	beq.n	801aa02 <USBD_CDC_DeInit+0x7a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 801a9de:	687a      	ldr	r2, [r7, #4]
 801a9e0:	23af      	movs	r3, #175	@ 0xaf
 801a9e2:	009b      	lsls	r3, r3, #2
 801a9e4:	58d3      	ldr	r3, [r2, r3]
 801a9e6:	685b      	ldr	r3, [r3, #4]
 801a9e8:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 801a9ea:	687a      	ldr	r2, [r7, #4]
 801a9ec:	23ae      	movs	r3, #174	@ 0xae
 801a9ee:	009b      	lsls	r3, r3, #2
 801a9f0:	58d3      	ldr	r3, [r2, r3]
 801a9f2:	0018      	movs	r0, r3
 801a9f4:	f002 f9e2 	bl	801cdbc <USBD_static_free>
    pdev->pClassData = NULL;
 801a9f8:	687a      	ldr	r2, [r7, #4]
 801a9fa:	23ae      	movs	r3, #174	@ 0xae
 801a9fc:	009b      	lsls	r3, r3, #2
 801a9fe:	2100      	movs	r1, #0
 801aa00:	50d1      	str	r1, [r2, r3]
  }

  return ret;
 801aa02:	230f      	movs	r3, #15
 801aa04:	18fb      	adds	r3, r7, r3
 801aa06:	781b      	ldrb	r3, [r3, #0]
}
 801aa08:	0018      	movs	r0, r3
 801aa0a:	46bd      	mov	sp, r7
 801aa0c:	b004      	add	sp, #16
 801aa0e:	bd80      	pop	{r7, pc}

0801aa10 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 801aa10:	b580      	push	{r7, lr}
 801aa12:	b086      	sub	sp, #24
 801aa14:	af00      	add	r7, sp, #0
 801aa16:	6078      	str	r0, [r7, #4]
 801aa18:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 801aa1a:	687a      	ldr	r2, [r7, #4]
 801aa1c:	23ae      	movs	r3, #174	@ 0xae
 801aa1e:	009b      	lsls	r3, r3, #2
 801aa20:	58d3      	ldr	r3, [r2, r3]
 801aa22:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 801aa24:	230f      	movs	r3, #15
 801aa26:	18fb      	adds	r3, r7, r3
 801aa28:	2200      	movs	r2, #0
 801aa2a:	701a      	strb	r2, [r3, #0]
  uint16_t status_info = 0U;
 801aa2c:	230c      	movs	r3, #12
 801aa2e:	18fb      	adds	r3, r7, r3
 801aa30:	2200      	movs	r2, #0
 801aa32:	801a      	strh	r2, [r3, #0]
  uint8_t ret = USBD_OK;
 801aa34:	2317      	movs	r3, #23
 801aa36:	18fb      	adds	r3, r7, r3
 801aa38:	2200      	movs	r2, #0
 801aa3a:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801aa3c:	683b      	ldr	r3, [r7, #0]
 801aa3e:	781b      	ldrb	r3, [r3, #0]
 801aa40:	001a      	movs	r2, r3
 801aa42:	2360      	movs	r3, #96	@ 0x60
 801aa44:	4013      	ands	r3, r2
 801aa46:	d03d      	beq.n	801aac4 <USBD_CDC_Setup+0xb4>
 801aa48:	2b20      	cmp	r3, #32
 801aa4a:	d000      	beq.n	801aa4e <USBD_CDC_Setup+0x3e>
 801aa4c:	e094      	b.n	801ab78 <USBD_CDC_Setup+0x168>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 801aa4e:	683b      	ldr	r3, [r7, #0]
 801aa50:	88db      	ldrh	r3, [r3, #6]
 801aa52:	2b00      	cmp	r3, #0
 801aa54:	d02b      	beq.n	801aaae <USBD_CDC_Setup+0x9e>
      {
        if (req->bmRequest & 0x80U)
 801aa56:	683b      	ldr	r3, [r7, #0]
 801aa58:	781b      	ldrb	r3, [r3, #0]
 801aa5a:	b25b      	sxtb	r3, r3
 801aa5c:	2b00      	cmp	r3, #0
 801aa5e:	da12      	bge.n	801aa86 <USBD_CDC_Setup+0x76>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 801aa60:	687a      	ldr	r2, [r7, #4]
 801aa62:	23af      	movs	r3, #175	@ 0xaf
 801aa64:	009b      	lsls	r3, r3, #2
 801aa66:	58d3      	ldr	r3, [r2, r3]
 801aa68:	689b      	ldr	r3, [r3, #8]
 801aa6a:	683a      	ldr	r2, [r7, #0]
 801aa6c:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 801aa6e:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 801aa70:	683a      	ldr	r2, [r7, #0]
 801aa72:	88d2      	ldrh	r2, [r2, #6]
 801aa74:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 801aa76:	6939      	ldr	r1, [r7, #16]
 801aa78:	683b      	ldr	r3, [r7, #0]
 801aa7a:	88da      	ldrh	r2, [r3, #6]
 801aa7c:	687b      	ldr	r3, [r7, #4]
 801aa7e:	0018      	movs	r0, r3
 801aa80:	f001 fbaf 	bl	801c1e2 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 801aa84:	e083      	b.n	801ab8e <USBD_CDC_Setup+0x17e>
          hcdc->CmdOpCode = req->bRequest;
 801aa86:	683b      	ldr	r3, [r7, #0]
 801aa88:	7859      	ldrb	r1, [r3, #1]
 801aa8a:	693a      	ldr	r2, [r7, #16]
 801aa8c:	2380      	movs	r3, #128	@ 0x80
 801aa8e:	009b      	lsls	r3, r3, #2
 801aa90:	54d1      	strb	r1, [r2, r3]
          hcdc->CmdLength = (uint8_t)req->wLength;
 801aa92:	683b      	ldr	r3, [r7, #0]
 801aa94:	88db      	ldrh	r3, [r3, #6]
 801aa96:	b2d9      	uxtb	r1, r3
 801aa98:	693b      	ldr	r3, [r7, #16]
 801aa9a:	4a40      	ldr	r2, [pc, #256]	@ (801ab9c <USBD_CDC_Setup+0x18c>)
 801aa9c:	5499      	strb	r1, [r3, r2]
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 801aa9e:	6939      	ldr	r1, [r7, #16]
 801aaa0:	683b      	ldr	r3, [r7, #0]
 801aaa2:	88da      	ldrh	r2, [r3, #6]
 801aaa4:	687b      	ldr	r3, [r7, #4]
 801aaa6:	0018      	movs	r0, r3
 801aaa8:	f001 fbce 	bl	801c248 <USBD_CtlPrepareRx>
      break;
 801aaac:	e06f      	b.n	801ab8e <USBD_CDC_Setup+0x17e>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 801aaae:	687a      	ldr	r2, [r7, #4]
 801aab0:	23af      	movs	r3, #175	@ 0xaf
 801aab2:	009b      	lsls	r3, r3, #2
 801aab4:	58d3      	ldr	r3, [r2, r3]
 801aab6:	689b      	ldr	r3, [r3, #8]
 801aab8:	683a      	ldr	r2, [r7, #0]
 801aaba:	7850      	ldrb	r0, [r2, #1]
 801aabc:	6839      	ldr	r1, [r7, #0]
 801aabe:	2200      	movs	r2, #0
 801aac0:	4798      	blx	r3
      break;
 801aac2:	e064      	b.n	801ab8e <USBD_CDC_Setup+0x17e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 801aac4:	683b      	ldr	r3, [r7, #0]
 801aac6:	785b      	ldrb	r3, [r3, #1]
 801aac8:	2b0b      	cmp	r3, #11
 801aaca:	d037      	beq.n	801ab3c <USBD_CDC_Setup+0x12c>
 801aacc:	dc47      	bgt.n	801ab5e <USBD_CDC_Setup+0x14e>
 801aace:	2b00      	cmp	r3, #0
 801aad0:	d002      	beq.n	801aad8 <USBD_CDC_Setup+0xc8>
 801aad2:	2b0a      	cmp	r3, #10
 801aad4:	d019      	beq.n	801ab0a <USBD_CDC_Setup+0xfa>
 801aad6:	e042      	b.n	801ab5e <USBD_CDC_Setup+0x14e>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801aad8:	687a      	ldr	r2, [r7, #4]
 801aada:	23a7      	movs	r3, #167	@ 0xa7
 801aadc:	009b      	lsls	r3, r3, #2
 801aade:	5cd3      	ldrb	r3, [r2, r3]
 801aae0:	2b03      	cmp	r3, #3
 801aae2:	d107      	bne.n	801aaf4 <USBD_CDC_Setup+0xe4>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 801aae4:	230c      	movs	r3, #12
 801aae6:	18f9      	adds	r1, r7, r3
 801aae8:	687b      	ldr	r3, [r7, #4]
 801aaea:	2202      	movs	r2, #2
 801aaec:	0018      	movs	r0, r3
 801aaee:	f001 fb78 	bl	801c1e2 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 801aaf2:	e040      	b.n	801ab76 <USBD_CDC_Setup+0x166>
            USBD_CtlError(pdev, req);
 801aaf4:	683a      	ldr	r2, [r7, #0]
 801aaf6:	687b      	ldr	r3, [r7, #4]
 801aaf8:	0011      	movs	r1, r2
 801aafa:	0018      	movs	r0, r3
 801aafc:	f001 faf3 	bl	801c0e6 <USBD_CtlError>
            ret = USBD_FAIL;
 801ab00:	2317      	movs	r3, #23
 801ab02:	18fb      	adds	r3, r7, r3
 801ab04:	2202      	movs	r2, #2
 801ab06:	701a      	strb	r2, [r3, #0]
          break;
 801ab08:	e035      	b.n	801ab76 <USBD_CDC_Setup+0x166>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801ab0a:	687a      	ldr	r2, [r7, #4]
 801ab0c:	23a7      	movs	r3, #167	@ 0xa7
 801ab0e:	009b      	lsls	r3, r3, #2
 801ab10:	5cd3      	ldrb	r3, [r2, r3]
 801ab12:	2b03      	cmp	r3, #3
 801ab14:	d107      	bne.n	801ab26 <USBD_CDC_Setup+0x116>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 801ab16:	230f      	movs	r3, #15
 801ab18:	18f9      	adds	r1, r7, r3
 801ab1a:	687b      	ldr	r3, [r7, #4]
 801ab1c:	2201      	movs	r2, #1
 801ab1e:	0018      	movs	r0, r3
 801ab20:	f001 fb5f 	bl	801c1e2 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 801ab24:	e027      	b.n	801ab76 <USBD_CDC_Setup+0x166>
            USBD_CtlError(pdev, req);
 801ab26:	683a      	ldr	r2, [r7, #0]
 801ab28:	687b      	ldr	r3, [r7, #4]
 801ab2a:	0011      	movs	r1, r2
 801ab2c:	0018      	movs	r0, r3
 801ab2e:	f001 fada 	bl	801c0e6 <USBD_CtlError>
            ret = USBD_FAIL;
 801ab32:	2317      	movs	r3, #23
 801ab34:	18fb      	adds	r3, r7, r3
 801ab36:	2202      	movs	r2, #2
 801ab38:	701a      	strb	r2, [r3, #0]
          break;
 801ab3a:	e01c      	b.n	801ab76 <USBD_CDC_Setup+0x166>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 801ab3c:	687a      	ldr	r2, [r7, #4]
 801ab3e:	23a7      	movs	r3, #167	@ 0xa7
 801ab40:	009b      	lsls	r3, r3, #2
 801ab42:	5cd3      	ldrb	r3, [r2, r3]
 801ab44:	2b03      	cmp	r3, #3
 801ab46:	d015      	beq.n	801ab74 <USBD_CDC_Setup+0x164>
          {
            USBD_CtlError(pdev, req);
 801ab48:	683a      	ldr	r2, [r7, #0]
 801ab4a:	687b      	ldr	r3, [r7, #4]
 801ab4c:	0011      	movs	r1, r2
 801ab4e:	0018      	movs	r0, r3
 801ab50:	f001 fac9 	bl	801c0e6 <USBD_CtlError>
            ret = USBD_FAIL;
 801ab54:	2317      	movs	r3, #23
 801ab56:	18fb      	adds	r3, r7, r3
 801ab58:	2202      	movs	r2, #2
 801ab5a:	701a      	strb	r2, [r3, #0]
          }
          break;
 801ab5c:	e00a      	b.n	801ab74 <USBD_CDC_Setup+0x164>

        default:
          USBD_CtlError(pdev, req);
 801ab5e:	683a      	ldr	r2, [r7, #0]
 801ab60:	687b      	ldr	r3, [r7, #4]
 801ab62:	0011      	movs	r1, r2
 801ab64:	0018      	movs	r0, r3
 801ab66:	f001 fabe 	bl	801c0e6 <USBD_CtlError>
          ret = USBD_FAIL;
 801ab6a:	2317      	movs	r3, #23
 801ab6c:	18fb      	adds	r3, r7, r3
 801ab6e:	2202      	movs	r2, #2
 801ab70:	701a      	strb	r2, [r3, #0]
          break;
 801ab72:	e000      	b.n	801ab76 <USBD_CDC_Setup+0x166>
          break;
 801ab74:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 801ab76:	e00a      	b.n	801ab8e <USBD_CDC_Setup+0x17e>

    default:
      USBD_CtlError(pdev, req);
 801ab78:	683a      	ldr	r2, [r7, #0]
 801ab7a:	687b      	ldr	r3, [r7, #4]
 801ab7c:	0011      	movs	r1, r2
 801ab7e:	0018      	movs	r0, r3
 801ab80:	f001 fab1 	bl	801c0e6 <USBD_CtlError>
      ret = USBD_FAIL;
 801ab84:	2317      	movs	r3, #23
 801ab86:	18fb      	adds	r3, r7, r3
 801ab88:	2202      	movs	r2, #2
 801ab8a:	701a      	strb	r2, [r3, #0]
      break;
 801ab8c:	46c0      	nop			@ (mov r8, r8)
  }

  return ret;
 801ab8e:	2317      	movs	r3, #23
 801ab90:	18fb      	adds	r3, r7, r3
 801ab92:	781b      	ldrb	r3, [r3, #0]
}
 801ab94:	0018      	movs	r0, r3
 801ab96:	46bd      	mov	sp, r7
 801ab98:	b006      	add	sp, #24
 801ab9a:	bd80      	pop	{r7, pc}
 801ab9c:	00000201 	.word	0x00000201

0801aba0 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 801aba0:	b580      	push	{r7, lr}
 801aba2:	b084      	sub	sp, #16
 801aba4:	af00      	add	r7, sp, #0
 801aba6:	6078      	str	r0, [r7, #4]
 801aba8:	000a      	movs	r2, r1
 801abaa:	1cfb      	adds	r3, r7, #3
 801abac:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 801abae:	687a      	ldr	r2, [r7, #4]
 801abb0:	23ae      	movs	r3, #174	@ 0xae
 801abb2:	009b      	lsls	r3, r3, #2
 801abb4:	58d3      	ldr	r3, [r2, r3]
 801abb6:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 801abb8:	687a      	ldr	r2, [r7, #4]
 801abba:	23b0      	movs	r3, #176	@ 0xb0
 801abbc:	009b      	lsls	r3, r3, #2
 801abbe:	58d3      	ldr	r3, [r2, r3]
 801abc0:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 801abc2:	687a      	ldr	r2, [r7, #4]
 801abc4:	23ae      	movs	r3, #174	@ 0xae
 801abc6:	009b      	lsls	r3, r3, #2
 801abc8:	58d3      	ldr	r3, [r2, r3]
 801abca:	2b00      	cmp	r3, #0
 801abcc:	d03e      	beq.n	801ac4c <USBD_CDC_DataIn+0xac>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 801abce:	1cfb      	adds	r3, r7, #3
 801abd0:	781a      	ldrb	r2, [r3, #0]
 801abd2:	6879      	ldr	r1, [r7, #4]
 801abd4:	0013      	movs	r3, r2
 801abd6:	009b      	lsls	r3, r3, #2
 801abd8:	189b      	adds	r3, r3, r2
 801abda:	009b      	lsls	r3, r3, #2
 801abdc:	18cb      	adds	r3, r1, r3
 801abde:	331c      	adds	r3, #28
 801abe0:	681b      	ldr	r3, [r3, #0]
 801abe2:	2b00      	cmp	r3, #0
 801abe4:	d02b      	beq.n	801ac3e <USBD_CDC_DataIn+0x9e>
 801abe6:	1cfb      	adds	r3, r7, #3
 801abe8:	781a      	ldrb	r2, [r3, #0]
 801abea:	6879      	ldr	r1, [r7, #4]
 801abec:	0013      	movs	r3, r2
 801abee:	009b      	lsls	r3, r3, #2
 801abf0:	189b      	adds	r3, r3, r2
 801abf2:	009b      	lsls	r3, r3, #2
 801abf4:	18cb      	adds	r3, r1, r3
 801abf6:	331c      	adds	r3, #28
 801abf8:	6818      	ldr	r0, [r3, #0]
 801abfa:	1cfb      	adds	r3, r7, #3
 801abfc:	781a      	ldrb	r2, [r3, #0]
 801abfe:	68b9      	ldr	r1, [r7, #8]
 801ac00:	0013      	movs	r3, r2
 801ac02:	009b      	lsls	r3, r3, #2
 801ac04:	189b      	adds	r3, r3, r2
 801ac06:	00db      	lsls	r3, r3, #3
 801ac08:	18cb      	adds	r3, r1, r3
 801ac0a:	3338      	adds	r3, #56	@ 0x38
 801ac0c:	681b      	ldr	r3, [r3, #0]
 801ac0e:	0019      	movs	r1, r3
 801ac10:	f7e5 fb4e 	bl	80002b0 <__aeabi_uidivmod>
 801ac14:	1e0b      	subs	r3, r1, #0
 801ac16:	d112      	bne.n	801ac3e <USBD_CDC_DataIn+0x9e>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 801ac18:	1cfb      	adds	r3, r7, #3
 801ac1a:	781a      	ldrb	r2, [r3, #0]
 801ac1c:	6879      	ldr	r1, [r7, #4]
 801ac1e:	0013      	movs	r3, r2
 801ac20:	009b      	lsls	r3, r3, #2
 801ac22:	189b      	adds	r3, r3, r2
 801ac24:	009b      	lsls	r3, r3, #2
 801ac26:	18cb      	adds	r3, r1, r3
 801ac28:	331c      	adds	r3, #28
 801ac2a:	2200      	movs	r2, #0
 801ac2c:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 801ac2e:	1cfb      	adds	r3, r7, #3
 801ac30:	7819      	ldrb	r1, [r3, #0]
 801ac32:	6878      	ldr	r0, [r7, #4]
 801ac34:	2300      	movs	r3, #0
 801ac36:	2200      	movs	r2, #0
 801ac38:	f002 f82f 	bl	801cc9a <USBD_LL_Transmit>
 801ac3c:	e004      	b.n	801ac48 <USBD_CDC_DataIn+0xa8>
    }
    else
    {
      hcdc->TxState = 0U;
 801ac3e:	68fa      	ldr	r2, [r7, #12]
 801ac40:	2385      	movs	r3, #133	@ 0x85
 801ac42:	009b      	lsls	r3, r3, #2
 801ac44:	2100      	movs	r1, #0
 801ac46:	50d1      	str	r1, [r2, r3]
    }
    return USBD_OK;
 801ac48:	2300      	movs	r3, #0
 801ac4a:	e000      	b.n	801ac4e <USBD_CDC_DataIn+0xae>
  }
  else
  {
    return USBD_FAIL;
 801ac4c:	2302      	movs	r3, #2
  }
}
 801ac4e:	0018      	movs	r0, r3
 801ac50:	46bd      	mov	sp, r7
 801ac52:	b004      	add	sp, #16
 801ac54:	bd80      	pop	{r7, pc}

0801ac56 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 801ac56:	b580      	push	{r7, lr}
 801ac58:	b084      	sub	sp, #16
 801ac5a:	af00      	add	r7, sp, #0
 801ac5c:	6078      	str	r0, [r7, #4]
 801ac5e:	000a      	movs	r2, r1
 801ac60:	1cfb      	adds	r3, r7, #3
 801ac62:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 801ac64:	687a      	ldr	r2, [r7, #4]
 801ac66:	23ae      	movs	r3, #174	@ 0xae
 801ac68:	009b      	lsls	r3, r3, #2
 801ac6a:	58d3      	ldr	r3, [r2, r3]
 801ac6c:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 801ac6e:	1cfb      	adds	r3, r7, #3
 801ac70:	781a      	ldrb	r2, [r3, #0]
 801ac72:	687b      	ldr	r3, [r7, #4]
 801ac74:	0011      	movs	r1, r2
 801ac76:	0018      	movs	r0, r3
 801ac78:	f002 f87d 	bl	801cd76 <USBD_LL_GetRxDataSize>
 801ac7c:	0001      	movs	r1, r0
 801ac7e:	68fa      	ldr	r2, [r7, #12]
 801ac80:	2383      	movs	r3, #131	@ 0x83
 801ac82:	009b      	lsls	r3, r3, #2
 801ac84:	50d1      	str	r1, [r2, r3]

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 801ac86:	687a      	ldr	r2, [r7, #4]
 801ac88:	23ae      	movs	r3, #174	@ 0xae
 801ac8a:	009b      	lsls	r3, r3, #2
 801ac8c:	58d3      	ldr	r3, [r2, r3]
 801ac8e:	2b00      	cmp	r3, #0
 801ac90:	d011      	beq.n	801acb6 <USBD_CDC_DataOut+0x60>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 801ac92:	687a      	ldr	r2, [r7, #4]
 801ac94:	23af      	movs	r3, #175	@ 0xaf
 801ac96:	009b      	lsls	r3, r3, #2
 801ac98:	58d3      	ldr	r3, [r2, r3]
 801ac9a:	68da      	ldr	r2, [r3, #12]
 801ac9c:	68f9      	ldr	r1, [r7, #12]
 801ac9e:	2381      	movs	r3, #129	@ 0x81
 801aca0:	009b      	lsls	r3, r3, #2
 801aca2:	58c8      	ldr	r0, [r1, r3]
 801aca4:	68fb      	ldr	r3, [r7, #12]
 801aca6:	2183      	movs	r1, #131	@ 0x83
 801aca8:	0089      	lsls	r1, r1, #2
 801acaa:	468c      	mov	ip, r1
 801acac:	4463      	add	r3, ip
 801acae:	0019      	movs	r1, r3
 801acb0:	4790      	blx	r2

    return USBD_OK;
 801acb2:	2300      	movs	r3, #0
 801acb4:	e000      	b.n	801acb8 <USBD_CDC_DataOut+0x62>
  }
  else
  {
    return USBD_FAIL;
 801acb6:	2302      	movs	r3, #2
  }
}
 801acb8:	0018      	movs	r0, r3
 801acba:	46bd      	mov	sp, r7
 801acbc:	b004      	add	sp, #16
 801acbe:	bd80      	pop	{r7, pc}

0801acc0 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 801acc0:	b590      	push	{r4, r7, lr}
 801acc2:	b085      	sub	sp, #20
 801acc4:	af00      	add	r7, sp, #0
 801acc6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 801acc8:	687a      	ldr	r2, [r7, #4]
 801acca:	23ae      	movs	r3, #174	@ 0xae
 801accc:	009b      	lsls	r3, r3, #2
 801acce:	58d3      	ldr	r3, [r2, r3]
 801acd0:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 801acd2:	687a      	ldr	r2, [r7, #4]
 801acd4:	23af      	movs	r3, #175	@ 0xaf
 801acd6:	009b      	lsls	r3, r3, #2
 801acd8:	58d3      	ldr	r3, [r2, r3]
 801acda:	2b00      	cmp	r3, #0
 801acdc:	d018      	beq.n	801ad10 <USBD_CDC_EP0_RxReady+0x50>
 801acde:	68fa      	ldr	r2, [r7, #12]
 801ace0:	2380      	movs	r3, #128	@ 0x80
 801ace2:	009b      	lsls	r3, r3, #2
 801ace4:	5cd3      	ldrb	r3, [r2, r3]
 801ace6:	2bff      	cmp	r3, #255	@ 0xff
 801ace8:	d012      	beq.n	801ad10 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 801acea:	687a      	ldr	r2, [r7, #4]
 801acec:	23af      	movs	r3, #175	@ 0xaf
 801acee:	009b      	lsls	r3, r3, #2
 801acf0:	58d3      	ldr	r3, [r2, r3]
 801acf2:	689b      	ldr	r3, [r3, #8]
 801acf4:	68f9      	ldr	r1, [r7, #12]
 801acf6:	2280      	movs	r2, #128	@ 0x80
 801acf8:	0092      	lsls	r2, r2, #2
 801acfa:	5c88      	ldrb	r0, [r1, r2]
                                                      (uint8_t *)(void *)hcdc->data,
 801acfc:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 801acfe:	68fa      	ldr	r2, [r7, #12]
 801ad00:	4c06      	ldr	r4, [pc, #24]	@ (801ad1c <USBD_CDC_EP0_RxReady+0x5c>)
 801ad02:	5d12      	ldrb	r2, [r2, r4]
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 801ad04:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 801ad06:	68fa      	ldr	r2, [r7, #12]
 801ad08:	2380      	movs	r3, #128	@ 0x80
 801ad0a:	009b      	lsls	r3, r3, #2
 801ad0c:	21ff      	movs	r1, #255	@ 0xff
 801ad0e:	54d1      	strb	r1, [r2, r3]

  }
  return USBD_OK;
 801ad10:	2300      	movs	r3, #0
}
 801ad12:	0018      	movs	r0, r3
 801ad14:	46bd      	mov	sp, r7
 801ad16:	b005      	add	sp, #20
 801ad18:	bd90      	pop	{r4, r7, pc}
 801ad1a:	46c0      	nop			@ (mov r8, r8)
 801ad1c:	00000201 	.word	0x00000201

0801ad20 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 801ad20:	b580      	push	{r7, lr}
 801ad22:	b082      	sub	sp, #8
 801ad24:	af00      	add	r7, sp, #0
 801ad26:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 801ad28:	687b      	ldr	r3, [r7, #4]
 801ad2a:	2243      	movs	r2, #67	@ 0x43
 801ad2c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 801ad2e:	4b02      	ldr	r3, [pc, #8]	@ (801ad38 <USBD_CDC_GetFSCfgDesc+0x18>)
}
 801ad30:	0018      	movs	r0, r3
 801ad32:	46bd      	mov	sp, r7
 801ad34:	b002      	add	sp, #8
 801ad36:	bd80      	pop	{r7, pc}
 801ad38:	2000016c 	.word	0x2000016c

0801ad3c <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 801ad3c:	b580      	push	{r7, lr}
 801ad3e:	b082      	sub	sp, #8
 801ad40:	af00      	add	r7, sp, #0
 801ad42:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 801ad44:	687b      	ldr	r3, [r7, #4]
 801ad46:	2243      	movs	r2, #67	@ 0x43
 801ad48:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 801ad4a:	4b02      	ldr	r3, [pc, #8]	@ (801ad54 <USBD_CDC_GetHSCfgDesc+0x18>)
}
 801ad4c:	0018      	movs	r0, r3
 801ad4e:	46bd      	mov	sp, r7
 801ad50:	b002      	add	sp, #8
 801ad52:	bd80      	pop	{r7, pc}
 801ad54:	20000128 	.word	0x20000128

0801ad58 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 801ad58:	b580      	push	{r7, lr}
 801ad5a:	b082      	sub	sp, #8
 801ad5c:	af00      	add	r7, sp, #0
 801ad5e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 801ad60:	687b      	ldr	r3, [r7, #4]
 801ad62:	2243      	movs	r2, #67	@ 0x43
 801ad64:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 801ad66:	4b02      	ldr	r3, [pc, #8]	@ (801ad70 <USBD_CDC_GetOtherSpeedCfgDesc+0x18>)
}
 801ad68:	0018      	movs	r0, r3
 801ad6a:	46bd      	mov	sp, r7
 801ad6c:	b002      	add	sp, #8
 801ad6e:	bd80      	pop	{r7, pc}
 801ad70:	200001b0 	.word	0x200001b0

0801ad74 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 801ad74:	b580      	push	{r7, lr}
 801ad76:	b082      	sub	sp, #8
 801ad78:	af00      	add	r7, sp, #0
 801ad7a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 801ad7c:	687b      	ldr	r3, [r7, #4]
 801ad7e:	220a      	movs	r2, #10
 801ad80:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 801ad82:	4b02      	ldr	r3, [pc, #8]	@ (801ad8c <USBD_CDC_GetDeviceQualifierDescriptor+0x18>)
}
 801ad84:	0018      	movs	r0, r3
 801ad86:	46bd      	mov	sp, r7
 801ad88:	b002      	add	sp, #8
 801ad8a:	bd80      	pop	{r7, pc}
 801ad8c:	200000e4 	.word	0x200000e4

0801ad90 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 801ad90:	b580      	push	{r7, lr}
 801ad92:	b084      	sub	sp, #16
 801ad94:	af00      	add	r7, sp, #0
 801ad96:	6078      	str	r0, [r7, #4]
 801ad98:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 801ad9a:	200f      	movs	r0, #15
 801ad9c:	183b      	adds	r3, r7, r0
 801ad9e:	2202      	movs	r2, #2
 801ada0:	701a      	strb	r2, [r3, #0]

  if (fops != NULL)
 801ada2:	683b      	ldr	r3, [r7, #0]
 801ada4:	2b00      	cmp	r3, #0
 801ada6:	d007      	beq.n	801adb8 <USBD_CDC_RegisterInterface+0x28>
  {
    pdev->pUserData = fops;
 801ada8:	687a      	ldr	r2, [r7, #4]
 801adaa:	23af      	movs	r3, #175	@ 0xaf
 801adac:	009b      	lsls	r3, r3, #2
 801adae:	6839      	ldr	r1, [r7, #0]
 801adb0:	50d1      	str	r1, [r2, r3]
    ret = USBD_OK;
 801adb2:	183b      	adds	r3, r7, r0
 801adb4:	2200      	movs	r2, #0
 801adb6:	701a      	strb	r2, [r3, #0]
  }

  return ret;
 801adb8:	230f      	movs	r3, #15
 801adba:	18fb      	adds	r3, r7, r3
 801adbc:	781b      	ldrb	r3, [r3, #0]
}
 801adbe:	0018      	movs	r0, r3
 801adc0:	46bd      	mov	sp, r7
 801adc2:	b004      	add	sp, #16
 801adc4:	bd80      	pop	{r7, pc}

0801adc6 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 801adc6:	b580      	push	{r7, lr}
 801adc8:	b086      	sub	sp, #24
 801adca:	af00      	add	r7, sp, #0
 801adcc:	60f8      	str	r0, [r7, #12]
 801adce:	60b9      	str	r1, [r7, #8]
 801add0:	1dbb      	adds	r3, r7, #6
 801add2:	801a      	strh	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 801add4:	68fa      	ldr	r2, [r7, #12]
 801add6:	23ae      	movs	r3, #174	@ 0xae
 801add8:	009b      	lsls	r3, r3, #2
 801adda:	58d3      	ldr	r3, [r2, r3]
 801addc:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 801adde:	697a      	ldr	r2, [r7, #20]
 801ade0:	2382      	movs	r3, #130	@ 0x82
 801ade2:	009b      	lsls	r3, r3, #2
 801ade4:	68b9      	ldr	r1, [r7, #8]
 801ade6:	50d1      	str	r1, [r2, r3]
  hcdc->TxLength = length;
 801ade8:	1dbb      	adds	r3, r7, #6
 801adea:	8819      	ldrh	r1, [r3, #0]
 801adec:	697a      	ldr	r2, [r7, #20]
 801adee:	2384      	movs	r3, #132	@ 0x84
 801adf0:	009b      	lsls	r3, r3, #2
 801adf2:	50d1      	str	r1, [r2, r3]

  return USBD_OK;
 801adf4:	2300      	movs	r3, #0
}
 801adf6:	0018      	movs	r0, r3
 801adf8:	46bd      	mov	sp, r7
 801adfa:	b006      	add	sp, #24
 801adfc:	bd80      	pop	{r7, pc}

0801adfe <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 801adfe:	b580      	push	{r7, lr}
 801ae00:	b084      	sub	sp, #16
 801ae02:	af00      	add	r7, sp, #0
 801ae04:	6078      	str	r0, [r7, #4]
 801ae06:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 801ae08:	687a      	ldr	r2, [r7, #4]
 801ae0a:	23ae      	movs	r3, #174	@ 0xae
 801ae0c:	009b      	lsls	r3, r3, #2
 801ae0e:	58d3      	ldr	r3, [r2, r3]
 801ae10:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 801ae12:	68fa      	ldr	r2, [r7, #12]
 801ae14:	2381      	movs	r3, #129	@ 0x81
 801ae16:	009b      	lsls	r3, r3, #2
 801ae18:	6839      	ldr	r1, [r7, #0]
 801ae1a:	50d1      	str	r1, [r2, r3]

  return USBD_OK;
 801ae1c:	2300      	movs	r3, #0
}
 801ae1e:	0018      	movs	r0, r3
 801ae20:	46bd      	mov	sp, r7
 801ae22:	b004      	add	sp, #16
 801ae24:	bd80      	pop	{r7, pc}

0801ae26 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 801ae26:	b580      	push	{r7, lr}
 801ae28:	b084      	sub	sp, #16
 801ae2a:	af00      	add	r7, sp, #0
 801ae2c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 801ae2e:	687a      	ldr	r2, [r7, #4]
 801ae30:	23ae      	movs	r3, #174	@ 0xae
 801ae32:	009b      	lsls	r3, r3, #2
 801ae34:	58d3      	ldr	r3, [r2, r3]
 801ae36:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 801ae38:	687a      	ldr	r2, [r7, #4]
 801ae3a:	23ae      	movs	r3, #174	@ 0xae
 801ae3c:	009b      	lsls	r3, r3, #2
 801ae3e:	58d3      	ldr	r3, [r2, r3]
 801ae40:	2b00      	cmp	r3, #0
 801ae42:	d022      	beq.n	801ae8a <USBD_CDC_TransmitPacket+0x64>
  {
    if (hcdc->TxState == 0U)
 801ae44:	68fa      	ldr	r2, [r7, #12]
 801ae46:	2385      	movs	r3, #133	@ 0x85
 801ae48:	009b      	lsls	r3, r3, #2
 801ae4a:	58d3      	ldr	r3, [r2, r3]
 801ae4c:	2b00      	cmp	r3, #0
 801ae4e:	d11a      	bne.n	801ae86 <USBD_CDC_TransmitPacket+0x60>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 801ae50:	68fa      	ldr	r2, [r7, #12]
 801ae52:	2385      	movs	r3, #133	@ 0x85
 801ae54:	009b      	lsls	r3, r3, #2
 801ae56:	2101      	movs	r1, #1
 801ae58:	50d1      	str	r1, [r2, r3]

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 801ae5a:	68fa      	ldr	r2, [r7, #12]
 801ae5c:	2384      	movs	r3, #132	@ 0x84
 801ae5e:	009b      	lsls	r3, r3, #2
 801ae60:	58d2      	ldr	r2, [r2, r3]
 801ae62:	687b      	ldr	r3, [r7, #4]
 801ae64:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 801ae66:	68fa      	ldr	r2, [r7, #12]
 801ae68:	2382      	movs	r3, #130	@ 0x82
 801ae6a:	009b      	lsls	r3, r3, #2
 801ae6c:	58d1      	ldr	r1, [r2, r3]
                       (uint16_t)hcdc->TxLength);
 801ae6e:	68fa      	ldr	r2, [r7, #12]
 801ae70:	2384      	movs	r3, #132	@ 0x84
 801ae72:	009b      	lsls	r3, r3, #2
 801ae74:	58d3      	ldr	r3, [r2, r3]
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 801ae76:	b29b      	uxth	r3, r3
 801ae78:	6878      	ldr	r0, [r7, #4]
 801ae7a:	000a      	movs	r2, r1
 801ae7c:	2181      	movs	r1, #129	@ 0x81
 801ae7e:	f001 ff0c 	bl	801cc9a <USBD_LL_Transmit>

      return USBD_OK;
 801ae82:	2300      	movs	r3, #0
 801ae84:	e002      	b.n	801ae8c <USBD_CDC_TransmitPacket+0x66>
    }
    else
    {
      return USBD_BUSY;
 801ae86:	2301      	movs	r3, #1
 801ae88:	e000      	b.n	801ae8c <USBD_CDC_TransmitPacket+0x66>
    }
  }
  else
  {
    return USBD_FAIL;
 801ae8a:	2302      	movs	r3, #2
  }
}
 801ae8c:	0018      	movs	r0, r3
 801ae8e:	46bd      	mov	sp, r7
 801ae90:	b004      	add	sp, #16
 801ae92:	bd80      	pop	{r7, pc}

0801ae94 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 801ae94:	b580      	push	{r7, lr}
 801ae96:	b084      	sub	sp, #16
 801ae98:	af00      	add	r7, sp, #0
 801ae9a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 801ae9c:	687a      	ldr	r2, [r7, #4]
 801ae9e:	23ae      	movs	r3, #174	@ 0xae
 801aea0:	009b      	lsls	r3, r3, #2
 801aea2:	58d3      	ldr	r3, [r2, r3]
 801aea4:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 801aea6:	687a      	ldr	r2, [r7, #4]
 801aea8:	23ae      	movs	r3, #174	@ 0xae
 801aeaa:	009b      	lsls	r3, r3, #2
 801aeac:	58d3      	ldr	r3, [r2, r3]
 801aeae:	2b00      	cmp	r3, #0
 801aeb0:	d019      	beq.n	801aee6 <USBD_CDC_ReceivePacket+0x52>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 801aeb2:	687b      	ldr	r3, [r7, #4]
 801aeb4:	7c1b      	ldrb	r3, [r3, #16]
 801aeb6:	2b00      	cmp	r3, #0
 801aeb8:	d10a      	bne.n	801aed0 <USBD_CDC_ReceivePacket+0x3c>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 801aeba:	68fa      	ldr	r2, [r7, #12]
 801aebc:	2381      	movs	r3, #129	@ 0x81
 801aebe:	009b      	lsls	r3, r3, #2
 801aec0:	58d2      	ldr	r2, [r2, r3]
 801aec2:	2380      	movs	r3, #128	@ 0x80
 801aec4:	009b      	lsls	r3, r3, #2
 801aec6:	6878      	ldr	r0, [r7, #4]
 801aec8:	2101      	movs	r1, #1
 801aeca:	f001 ff1d 	bl	801cd08 <USBD_LL_PrepareReceive>
 801aece:	e008      	b.n	801aee2 <USBD_CDC_ReceivePacket+0x4e>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 801aed0:	68fa      	ldr	r2, [r7, #12]
 801aed2:	2381      	movs	r3, #129	@ 0x81
 801aed4:	009b      	lsls	r3, r3, #2
 801aed6:	58d2      	ldr	r2, [r2, r3]
 801aed8:	6878      	ldr	r0, [r7, #4]
 801aeda:	2340      	movs	r3, #64	@ 0x40
 801aedc:	2101      	movs	r1, #1
 801aede:	f001 ff13 	bl	801cd08 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 801aee2:	2300      	movs	r3, #0
 801aee4:	e000      	b.n	801aee8 <USBD_CDC_ReceivePacket+0x54>
  }
  else
  {
    return USBD_FAIL;
 801aee6:	2302      	movs	r3, #2
  }
}
 801aee8:	0018      	movs	r0, r3
 801aeea:	46bd      	mov	sp, r7
 801aeec:	b004      	add	sp, #16
 801aeee:	bd80      	pop	{r7, pc}

0801aef0 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 801aef0:	b580      	push	{r7, lr}
 801aef2:	b084      	sub	sp, #16
 801aef4:	af00      	add	r7, sp, #0
 801aef6:	60f8      	str	r0, [r7, #12]
 801aef8:	60b9      	str	r1, [r7, #8]
 801aefa:	1dfb      	adds	r3, r7, #7
 801aefc:	701a      	strb	r2, [r3, #0]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 801aefe:	68fb      	ldr	r3, [r7, #12]
 801af00:	2b00      	cmp	r3, #0
 801af02:	d101      	bne.n	801af08 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 801af04:	2302      	movs	r3, #2
 801af06:	e020      	b.n	801af4a <USBD_Init+0x5a>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 801af08:	68fa      	ldr	r2, [r7, #12]
 801af0a:	23ad      	movs	r3, #173	@ 0xad
 801af0c:	009b      	lsls	r3, r3, #2
 801af0e:	58d3      	ldr	r3, [r2, r3]
 801af10:	2b00      	cmp	r3, #0
 801af12:	d004      	beq.n	801af1e <USBD_Init+0x2e>
  {
    pdev->pClass = NULL;
 801af14:	68fa      	ldr	r2, [r7, #12]
 801af16:	23ad      	movs	r3, #173	@ 0xad
 801af18:	009b      	lsls	r3, r3, #2
 801af1a:	2100      	movs	r1, #0
 801af1c:	50d1      	str	r1, [r2, r3]
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 801af1e:	68bb      	ldr	r3, [r7, #8]
 801af20:	2b00      	cmp	r3, #0
 801af22:	d004      	beq.n	801af2e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 801af24:	68fa      	ldr	r2, [r7, #12]
 801af26:	23ac      	movs	r3, #172	@ 0xac
 801af28:	009b      	lsls	r3, r3, #2
 801af2a:	68b9      	ldr	r1, [r7, #8]
 801af2c:	50d1      	str	r1, [r2, r3]
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 801af2e:	68fa      	ldr	r2, [r7, #12]
 801af30:	23a7      	movs	r3, #167	@ 0xa7
 801af32:	009b      	lsls	r3, r3, #2
 801af34:	2101      	movs	r1, #1
 801af36:	54d1      	strb	r1, [r2, r3]
  pdev->id = id;
 801af38:	68fb      	ldr	r3, [r7, #12]
 801af3a:	1dfa      	adds	r2, r7, #7
 801af3c:	7812      	ldrb	r2, [r2, #0]
 801af3e:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 801af40:	68fb      	ldr	r3, [r7, #12]
 801af42:	0018      	movs	r0, r3
 801af44:	f001 fd0c 	bl	801c960 <USBD_LL_Init>

  return USBD_OK;
 801af48:	2300      	movs	r3, #0
}
 801af4a:	0018      	movs	r0, r3
 801af4c:	46bd      	mov	sp, r7
 801af4e:	b004      	add	sp, #16
 801af50:	bd80      	pop	{r7, pc}

0801af52 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 801af52:	b580      	push	{r7, lr}
 801af54:	b084      	sub	sp, #16
 801af56:	af00      	add	r7, sp, #0
 801af58:	6078      	str	r0, [r7, #4]
 801af5a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 801af5c:	200f      	movs	r0, #15
 801af5e:	183b      	adds	r3, r7, r0
 801af60:	2200      	movs	r2, #0
 801af62:	701a      	strb	r2, [r3, #0]
  if (pclass != NULL)
 801af64:	683b      	ldr	r3, [r7, #0]
 801af66:	2b00      	cmp	r3, #0
 801af68:	d008      	beq.n	801af7c <USBD_RegisterClass+0x2a>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 801af6a:	687a      	ldr	r2, [r7, #4]
 801af6c:	23ad      	movs	r3, #173	@ 0xad
 801af6e:	009b      	lsls	r3, r3, #2
 801af70:	6839      	ldr	r1, [r7, #0]
 801af72:	50d1      	str	r1, [r2, r3]
    status = USBD_OK;
 801af74:	183b      	adds	r3, r7, r0
 801af76:	2200      	movs	r2, #0
 801af78:	701a      	strb	r2, [r3, #0]
 801af7a:	e003      	b.n	801af84 <USBD_RegisterClass+0x32>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 801af7c:	230f      	movs	r3, #15
 801af7e:	18fb      	adds	r3, r7, r3
 801af80:	2202      	movs	r2, #2
 801af82:	701a      	strb	r2, [r3, #0]
  }

  return status;
 801af84:	230f      	movs	r3, #15
 801af86:	18fb      	adds	r3, r7, r3
 801af88:	781b      	ldrb	r3, [r3, #0]
}
 801af8a:	0018      	movs	r0, r3
 801af8c:	46bd      	mov	sp, r7
 801af8e:	b004      	add	sp, #16
 801af90:	bd80      	pop	{r7, pc}

0801af92 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 801af92:	b580      	push	{r7, lr}
 801af94:	b082      	sub	sp, #8
 801af96:	af00      	add	r7, sp, #0
 801af98:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 801af9a:	687b      	ldr	r3, [r7, #4]
 801af9c:	0018      	movs	r0, r3
 801af9e:	f001 fd43 	bl	801ca28 <USBD_LL_Start>

  return USBD_OK;
 801afa2:	2300      	movs	r3, #0
}
 801afa4:	0018      	movs	r0, r3
 801afa6:	46bd      	mov	sp, r7
 801afa8:	b002      	add	sp, #8
 801afaa:	bd80      	pop	{r7, pc}

0801afac <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 801afac:	b580      	push	{r7, lr}
 801afae:	b082      	sub	sp, #8
 801afb0:	af00      	add	r7, sp, #0
 801afb2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 801afb4:	2300      	movs	r3, #0
}
 801afb6:	0018      	movs	r0, r3
 801afb8:	46bd      	mov	sp, r7
 801afba:	b002      	add	sp, #8
 801afbc:	bd80      	pop	{r7, pc}

0801afbe <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 801afbe:	b590      	push	{r4, r7, lr}
 801afc0:	b085      	sub	sp, #20
 801afc2:	af00      	add	r7, sp, #0
 801afc4:	6078      	str	r0, [r7, #4]
 801afc6:	000a      	movs	r2, r1
 801afc8:	1cfb      	adds	r3, r7, #3
 801afca:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef ret = USBD_FAIL;
 801afcc:	240f      	movs	r4, #15
 801afce:	193b      	adds	r3, r7, r4
 801afd0:	2202      	movs	r2, #2
 801afd2:	701a      	strb	r2, [r3, #0]

  if (pdev->pClass != NULL)
 801afd4:	687a      	ldr	r2, [r7, #4]
 801afd6:	23ad      	movs	r3, #173	@ 0xad
 801afd8:	009b      	lsls	r3, r3, #2
 801afda:	58d3      	ldr	r3, [r2, r3]
 801afdc:	2b00      	cmp	r3, #0
 801afde:	d00e      	beq.n	801affe <USBD_SetClassConfig+0x40>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 801afe0:	687a      	ldr	r2, [r7, #4]
 801afe2:	23ad      	movs	r3, #173	@ 0xad
 801afe4:	009b      	lsls	r3, r3, #2
 801afe6:	58d3      	ldr	r3, [r2, r3]
 801afe8:	681b      	ldr	r3, [r3, #0]
 801afea:	1cfa      	adds	r2, r7, #3
 801afec:	7811      	ldrb	r1, [r2, #0]
 801afee:	687a      	ldr	r2, [r7, #4]
 801aff0:	0010      	movs	r0, r2
 801aff2:	4798      	blx	r3
 801aff4:	1e03      	subs	r3, r0, #0
 801aff6:	d102      	bne.n	801affe <USBD_SetClassConfig+0x40>
    {
      ret = USBD_OK;
 801aff8:	193b      	adds	r3, r7, r4
 801affa:	2200      	movs	r2, #0
 801affc:	701a      	strb	r2, [r3, #0]
    }
  }

  return ret;
 801affe:	230f      	movs	r3, #15
 801b000:	18fb      	adds	r3, r7, r3
 801b002:	781b      	ldrb	r3, [r3, #0]
}
 801b004:	0018      	movs	r0, r3
 801b006:	46bd      	mov	sp, r7
 801b008:	b005      	add	sp, #20
 801b00a:	bd90      	pop	{r4, r7, pc}

0801b00c <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 801b00c:	b580      	push	{r7, lr}
 801b00e:	b082      	sub	sp, #8
 801b010:	af00      	add	r7, sp, #0
 801b012:	6078      	str	r0, [r7, #4]
 801b014:	000a      	movs	r2, r1
 801b016:	1cfb      	adds	r3, r7, #3
 801b018:	701a      	strb	r2, [r3, #0]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 801b01a:	687a      	ldr	r2, [r7, #4]
 801b01c:	23ad      	movs	r3, #173	@ 0xad
 801b01e:	009b      	lsls	r3, r3, #2
 801b020:	58d3      	ldr	r3, [r2, r3]
 801b022:	685b      	ldr	r3, [r3, #4]
 801b024:	1cfa      	adds	r2, r7, #3
 801b026:	7811      	ldrb	r1, [r2, #0]
 801b028:	687a      	ldr	r2, [r7, #4]
 801b02a:	0010      	movs	r0, r2
 801b02c:	4798      	blx	r3

  return USBD_OK;
 801b02e:	2300      	movs	r3, #0
}
 801b030:	0018      	movs	r0, r3
 801b032:	46bd      	mov	sp, r7
 801b034:	b002      	add	sp, #8
 801b036:	bd80      	pop	{r7, pc}

0801b038 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 801b038:	b580      	push	{r7, lr}
 801b03a:	b082      	sub	sp, #8
 801b03c:	af00      	add	r7, sp, #0
 801b03e:	6078      	str	r0, [r7, #4]
 801b040:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 801b042:	687b      	ldr	r3, [r7, #4]
 801b044:	22aa      	movs	r2, #170	@ 0xaa
 801b046:	0092      	lsls	r2, r2, #2
 801b048:	4694      	mov	ip, r2
 801b04a:	4463      	add	r3, ip
 801b04c:	683a      	ldr	r2, [r7, #0]
 801b04e:	0011      	movs	r1, r2
 801b050:	0018      	movs	r0, r3
 801b052:	f001 f810 	bl	801c076 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 801b056:	687a      	ldr	r2, [r7, #4]
 801b058:	23a5      	movs	r3, #165	@ 0xa5
 801b05a:	009b      	lsls	r3, r3, #2
 801b05c:	2101      	movs	r1, #1
 801b05e:	50d1      	str	r1, [r2, r3]

  pdev->ep0_data_len = pdev->request.wLength;
 801b060:	687b      	ldr	r3, [r7, #4]
 801b062:	4a23      	ldr	r2, [pc, #140]	@ (801b0f0 <USBD_LL_SetupStage+0xb8>)
 801b064:	5a9b      	ldrh	r3, [r3, r2]
 801b066:	0019      	movs	r1, r3
 801b068:	687a      	ldr	r2, [r7, #4]
 801b06a:	23a6      	movs	r3, #166	@ 0xa6
 801b06c:	009b      	lsls	r3, r3, #2
 801b06e:	50d1      	str	r1, [r2, r3]

  switch (pdev->request.bmRequest & 0x1FU)
 801b070:	687a      	ldr	r2, [r7, #4]
 801b072:	23aa      	movs	r3, #170	@ 0xaa
 801b074:	009b      	lsls	r3, r3, #2
 801b076:	5cd3      	ldrb	r3, [r2, r3]
 801b078:	001a      	movs	r2, r3
 801b07a:	231f      	movs	r3, #31
 801b07c:	4013      	ands	r3, r2
 801b07e:	2b02      	cmp	r3, #2
 801b080:	d019      	beq.n	801b0b6 <USBD_LL_SetupStage+0x7e>
 801b082:	d822      	bhi.n	801b0ca <USBD_LL_SetupStage+0x92>
 801b084:	2b00      	cmp	r3, #0
 801b086:	d002      	beq.n	801b08e <USBD_LL_SetupStage+0x56>
 801b088:	2b01      	cmp	r3, #1
 801b08a:	d00a      	beq.n	801b0a2 <USBD_LL_SetupStage+0x6a>
 801b08c:	e01d      	b.n	801b0ca <USBD_LL_SetupStage+0x92>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 801b08e:	687b      	ldr	r3, [r7, #4]
 801b090:	22aa      	movs	r2, #170	@ 0xaa
 801b092:	0092      	lsls	r2, r2, #2
 801b094:	189a      	adds	r2, r3, r2
 801b096:	687b      	ldr	r3, [r7, #4]
 801b098:	0011      	movs	r1, r2
 801b09a:	0018      	movs	r0, r3
 801b09c:	f000 fa10 	bl	801b4c0 <USBD_StdDevReq>
      break;
 801b0a0:	e020      	b.n	801b0e4 <USBD_LL_SetupStage+0xac>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 801b0a2:	687b      	ldr	r3, [r7, #4]
 801b0a4:	22aa      	movs	r2, #170	@ 0xaa
 801b0a6:	0092      	lsls	r2, r2, #2
 801b0a8:	189a      	adds	r2, r3, r2
 801b0aa:	687b      	ldr	r3, [r7, #4]
 801b0ac:	0011      	movs	r1, r2
 801b0ae:	0018      	movs	r0, r3
 801b0b0:	f000 fa78 	bl	801b5a4 <USBD_StdItfReq>
      break;
 801b0b4:	e016      	b.n	801b0e4 <USBD_LL_SetupStage+0xac>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 801b0b6:	687b      	ldr	r3, [r7, #4]
 801b0b8:	22aa      	movs	r2, #170	@ 0xaa
 801b0ba:	0092      	lsls	r2, r2, #2
 801b0bc:	189a      	adds	r2, r3, r2
 801b0be:	687b      	ldr	r3, [r7, #4]
 801b0c0:	0011      	movs	r1, r2
 801b0c2:	0018      	movs	r0, r3
 801b0c4:	f000 fac5 	bl	801b652 <USBD_StdEPReq>
      break;
 801b0c8:	e00c      	b.n	801b0e4 <USBD_LL_SetupStage+0xac>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 801b0ca:	687a      	ldr	r2, [r7, #4]
 801b0cc:	23aa      	movs	r3, #170	@ 0xaa
 801b0ce:	009b      	lsls	r3, r3, #2
 801b0d0:	5cd3      	ldrb	r3, [r2, r3]
 801b0d2:	227f      	movs	r2, #127	@ 0x7f
 801b0d4:	4393      	bics	r3, r2
 801b0d6:	b2da      	uxtb	r2, r3
 801b0d8:	687b      	ldr	r3, [r7, #4]
 801b0da:	0011      	movs	r1, r2
 801b0dc:	0018      	movs	r0, r3
 801b0de:	f001 fd2a 	bl	801cb36 <USBD_LL_StallEP>
      break;
 801b0e2:	46c0      	nop			@ (mov r8, r8)
  }

  return USBD_OK;
 801b0e4:	2300      	movs	r3, #0
}
 801b0e6:	0018      	movs	r0, r3
 801b0e8:	46bd      	mov	sp, r7
 801b0ea:	b002      	add	sp, #8
 801b0ec:	bd80      	pop	{r7, pc}
 801b0ee:	46c0      	nop			@ (mov r8, r8)
 801b0f0:	000002ae 	.word	0x000002ae

0801b0f4 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 801b0f4:	b580      	push	{r7, lr}
 801b0f6:	b086      	sub	sp, #24
 801b0f8:	af00      	add	r7, sp, #0
 801b0fa:	60f8      	str	r0, [r7, #12]
 801b0fc:	607a      	str	r2, [r7, #4]
 801b0fe:	200b      	movs	r0, #11
 801b100:	183b      	adds	r3, r7, r0
 801b102:	1c0a      	adds	r2, r1, #0
 801b104:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 801b106:	183b      	adds	r3, r7, r0
 801b108:	781b      	ldrb	r3, [r3, #0]
 801b10a:	2b00      	cmp	r3, #0
 801b10c:	d154      	bne.n	801b1b8 <USBD_LL_DataOutStage+0xc4>
  {
    pep = &pdev->ep_out[0];
 801b10e:	68fb      	ldr	r3, [r7, #12]
 801b110:	3355      	adds	r3, #85	@ 0x55
 801b112:	33ff      	adds	r3, #255	@ 0xff
 801b114:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 801b116:	68fa      	ldr	r2, [r7, #12]
 801b118:	23a5      	movs	r3, #165	@ 0xa5
 801b11a:	009b      	lsls	r3, r3, #2
 801b11c:	58d3      	ldr	r3, [r2, r3]
 801b11e:	2b03      	cmp	r3, #3
 801b120:	d139      	bne.n	801b196 <USBD_LL_DataOutStage+0xa2>
    {
      if (pep->rem_length > pep->maxpacket)
 801b122:	697b      	ldr	r3, [r7, #20]
 801b124:	68da      	ldr	r2, [r3, #12]
 801b126:	697b      	ldr	r3, [r7, #20]
 801b128:	691b      	ldr	r3, [r3, #16]
 801b12a:	429a      	cmp	r2, r3
 801b12c:	d919      	bls.n	801b162 <USBD_LL_DataOutStage+0x6e>
      {
        pep->rem_length -= pep->maxpacket;
 801b12e:	697b      	ldr	r3, [r7, #20]
 801b130:	68da      	ldr	r2, [r3, #12]
 801b132:	697b      	ldr	r3, [r7, #20]
 801b134:	691b      	ldr	r3, [r3, #16]
 801b136:	1ad2      	subs	r2, r2, r3
 801b138:	697b      	ldr	r3, [r7, #20]
 801b13a:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 801b13c:	697b      	ldr	r3, [r7, #20]
 801b13e:	68da      	ldr	r2, [r3, #12]
 801b140:	697b      	ldr	r3, [r7, #20]
 801b142:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 801b144:	429a      	cmp	r2, r3
 801b146:	d203      	bcs.n	801b150 <USBD_LL_DataOutStage+0x5c>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 801b148:	697b      	ldr	r3, [r7, #20]
 801b14a:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 801b14c:	b29b      	uxth	r3, r3
 801b14e:	e002      	b.n	801b156 <USBD_LL_DataOutStage+0x62>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 801b150:	697b      	ldr	r3, [r7, #20]
 801b152:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 801b154:	b29b      	uxth	r3, r3
 801b156:	6879      	ldr	r1, [r7, #4]
 801b158:	68f8      	ldr	r0, [r7, #12]
 801b15a:	001a      	movs	r2, r3
 801b15c:	f001 f898 	bl	801c290 <USBD_CtlContinueRx>
 801b160:	e045      	b.n	801b1ee <USBD_LL_DataOutStage+0xfa>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 801b162:	68fa      	ldr	r2, [r7, #12]
 801b164:	23ad      	movs	r3, #173	@ 0xad
 801b166:	009b      	lsls	r3, r3, #2
 801b168:	58d3      	ldr	r3, [r2, r3]
 801b16a:	691b      	ldr	r3, [r3, #16]
 801b16c:	2b00      	cmp	r3, #0
 801b16e:	d00d      	beq.n	801b18c <USBD_LL_DataOutStage+0x98>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 801b170:	68fa      	ldr	r2, [r7, #12]
 801b172:	23a7      	movs	r3, #167	@ 0xa7
 801b174:	009b      	lsls	r3, r3, #2
 801b176:	5cd3      	ldrb	r3, [r2, r3]
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 801b178:	2b03      	cmp	r3, #3
 801b17a:	d107      	bne.n	801b18c <USBD_LL_DataOutStage+0x98>
        {
          pdev->pClass->EP0_RxReady(pdev);
 801b17c:	68fa      	ldr	r2, [r7, #12]
 801b17e:	23ad      	movs	r3, #173	@ 0xad
 801b180:	009b      	lsls	r3, r3, #2
 801b182:	58d3      	ldr	r3, [r2, r3]
 801b184:	691b      	ldr	r3, [r3, #16]
 801b186:	68fa      	ldr	r2, [r7, #12]
 801b188:	0010      	movs	r0, r2
 801b18a:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 801b18c:	68fb      	ldr	r3, [r7, #12]
 801b18e:	0018      	movs	r0, r3
 801b190:	f001 f891 	bl	801c2b6 <USBD_CtlSendStatus>
 801b194:	e02b      	b.n	801b1ee <USBD_LL_DataOutStage+0xfa>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 801b196:	68fa      	ldr	r2, [r7, #12]
 801b198:	23a5      	movs	r3, #165	@ 0xa5
 801b19a:	009b      	lsls	r3, r3, #2
 801b19c:	58d3      	ldr	r3, [r2, r3]
 801b19e:	2b05      	cmp	r3, #5
 801b1a0:	d125      	bne.n	801b1ee <USBD_LL_DataOutStage+0xfa>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 801b1a2:	68fa      	ldr	r2, [r7, #12]
 801b1a4:	23a5      	movs	r3, #165	@ 0xa5
 801b1a6:	009b      	lsls	r3, r3, #2
 801b1a8:	2100      	movs	r1, #0
 801b1aa:	50d1      	str	r1, [r2, r3]
        USBD_LL_StallEP(pdev, 0U);
 801b1ac:	68fb      	ldr	r3, [r7, #12]
 801b1ae:	2100      	movs	r1, #0
 801b1b0:	0018      	movs	r0, r3
 801b1b2:	f001 fcc0 	bl	801cb36 <USBD_LL_StallEP>
 801b1b6:	e01a      	b.n	801b1ee <USBD_LL_DataOutStage+0xfa>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 801b1b8:	68fa      	ldr	r2, [r7, #12]
 801b1ba:	23ad      	movs	r3, #173	@ 0xad
 801b1bc:	009b      	lsls	r3, r3, #2
 801b1be:	58d3      	ldr	r3, [r2, r3]
 801b1c0:	699b      	ldr	r3, [r3, #24]
 801b1c2:	2b00      	cmp	r3, #0
 801b1c4:	d011      	beq.n	801b1ea <USBD_LL_DataOutStage+0xf6>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 801b1c6:	68fa      	ldr	r2, [r7, #12]
 801b1c8:	23a7      	movs	r3, #167	@ 0xa7
 801b1ca:	009b      	lsls	r3, r3, #2
 801b1cc:	5cd3      	ldrb	r3, [r2, r3]
  else if ((pdev->pClass->DataOut != NULL) &&
 801b1ce:	2b03      	cmp	r3, #3
 801b1d0:	d10b      	bne.n	801b1ea <USBD_LL_DataOutStage+0xf6>
  {
    pdev->pClass->DataOut(pdev, epnum);
 801b1d2:	68fa      	ldr	r2, [r7, #12]
 801b1d4:	23ad      	movs	r3, #173	@ 0xad
 801b1d6:	009b      	lsls	r3, r3, #2
 801b1d8:	58d3      	ldr	r3, [r2, r3]
 801b1da:	699b      	ldr	r3, [r3, #24]
 801b1dc:	220b      	movs	r2, #11
 801b1de:	18ba      	adds	r2, r7, r2
 801b1e0:	7811      	ldrb	r1, [r2, #0]
 801b1e2:	68fa      	ldr	r2, [r7, #12]
 801b1e4:	0010      	movs	r0, r2
 801b1e6:	4798      	blx	r3
 801b1e8:	e001      	b.n	801b1ee <USBD_LL_DataOutStage+0xfa>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 801b1ea:	2302      	movs	r3, #2
 801b1ec:	e000      	b.n	801b1f0 <USBD_LL_DataOutStage+0xfc>
  }

  return USBD_OK;
 801b1ee:	2300      	movs	r3, #0
}
 801b1f0:	0018      	movs	r0, r3
 801b1f2:	46bd      	mov	sp, r7
 801b1f4:	b006      	add	sp, #24
 801b1f6:	bd80      	pop	{r7, pc}

0801b1f8 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 801b1f8:	b580      	push	{r7, lr}
 801b1fa:	b086      	sub	sp, #24
 801b1fc:	af00      	add	r7, sp, #0
 801b1fe:	60f8      	str	r0, [r7, #12]
 801b200:	607a      	str	r2, [r7, #4]
 801b202:	200b      	movs	r0, #11
 801b204:	183b      	adds	r3, r7, r0
 801b206:	1c0a      	adds	r2, r1, #0
 801b208:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 801b20a:	183b      	adds	r3, r7, r0
 801b20c:	781b      	ldrb	r3, [r3, #0]
 801b20e:	2b00      	cmp	r3, #0
 801b210:	d000      	beq.n	801b214 <USBD_LL_DataInStage+0x1c>
 801b212:	e08e      	b.n	801b332 <USBD_LL_DataInStage+0x13a>
  {
    pep = &pdev->ep_in[0];
 801b214:	68fb      	ldr	r3, [r7, #12]
 801b216:	3314      	adds	r3, #20
 801b218:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 801b21a:	68fa      	ldr	r2, [r7, #12]
 801b21c:	23a5      	movs	r3, #165	@ 0xa5
 801b21e:	009b      	lsls	r3, r3, #2
 801b220:	58d3      	ldr	r3, [r2, r3]
 801b222:	2b02      	cmp	r3, #2
 801b224:	d164      	bne.n	801b2f0 <USBD_LL_DataInStage+0xf8>
    {
      if (pep->rem_length > pep->maxpacket)
 801b226:	697b      	ldr	r3, [r7, #20]
 801b228:	68da      	ldr	r2, [r3, #12]
 801b22a:	697b      	ldr	r3, [r7, #20]
 801b22c:	691b      	ldr	r3, [r3, #16]
 801b22e:	429a      	cmp	r2, r3
 801b230:	d915      	bls.n	801b25e <USBD_LL_DataInStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 801b232:	697b      	ldr	r3, [r7, #20]
 801b234:	68da      	ldr	r2, [r3, #12]
 801b236:	697b      	ldr	r3, [r7, #20]
 801b238:	691b      	ldr	r3, [r3, #16]
 801b23a:	1ad2      	subs	r2, r2, r3
 801b23c:	697b      	ldr	r3, [r7, #20]
 801b23e:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 801b240:	697b      	ldr	r3, [r7, #20]
 801b242:	68db      	ldr	r3, [r3, #12]
 801b244:	b29a      	uxth	r2, r3
 801b246:	6879      	ldr	r1, [r7, #4]
 801b248:	68fb      	ldr	r3, [r7, #12]
 801b24a:	0018      	movs	r0, r3
 801b24c:	f000 ffe9 	bl	801c222 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801b250:	68f8      	ldr	r0, [r7, #12]
 801b252:	2300      	movs	r3, #0
 801b254:	2200      	movs	r2, #0
 801b256:	2100      	movs	r1, #0
 801b258:	f001 fd56 	bl	801cd08 <USBD_LL_PrepareReceive>
 801b25c:	e059      	b.n	801b312 <USBD_LL_DataInStage+0x11a>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 801b25e:	697b      	ldr	r3, [r7, #20]
 801b260:	689a      	ldr	r2, [r3, #8]
 801b262:	697b      	ldr	r3, [r7, #20]
 801b264:	691b      	ldr	r3, [r3, #16]
 801b266:	0019      	movs	r1, r3
 801b268:	0010      	movs	r0, r2
 801b26a:	f7e5 f821 	bl	80002b0 <__aeabi_uidivmod>
 801b26e:	1e0b      	subs	r3, r1, #0
 801b270:	d11f      	bne.n	801b2b2 <USBD_LL_DataInStage+0xba>
            (pep->total_length >= pep->maxpacket) &&
 801b272:	697b      	ldr	r3, [r7, #20]
 801b274:	689a      	ldr	r2, [r3, #8]
 801b276:	697b      	ldr	r3, [r7, #20]
 801b278:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 801b27a:	429a      	cmp	r2, r3
 801b27c:	d319      	bcc.n	801b2b2 <USBD_LL_DataInStage+0xba>
            (pep->total_length < pdev->ep0_data_len))
 801b27e:	697b      	ldr	r3, [r7, #20]
 801b280:	689a      	ldr	r2, [r3, #8]
 801b282:	68f9      	ldr	r1, [r7, #12]
 801b284:	23a6      	movs	r3, #166	@ 0xa6
 801b286:	009b      	lsls	r3, r3, #2
 801b288:	58cb      	ldr	r3, [r1, r3]
            (pep->total_length >= pep->maxpacket) &&
 801b28a:	429a      	cmp	r2, r3
 801b28c:	d211      	bcs.n	801b2b2 <USBD_LL_DataInStage+0xba>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 801b28e:	68fb      	ldr	r3, [r7, #12]
 801b290:	2200      	movs	r2, #0
 801b292:	2100      	movs	r1, #0
 801b294:	0018      	movs	r0, r3
 801b296:	f000 ffc4 	bl	801c222 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 801b29a:	68fa      	ldr	r2, [r7, #12]
 801b29c:	23a6      	movs	r3, #166	@ 0xa6
 801b29e:	009b      	lsls	r3, r3, #2
 801b2a0:	2100      	movs	r1, #0
 801b2a2:	50d1      	str	r1, [r2, r3]

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801b2a4:	68f8      	ldr	r0, [r7, #12]
 801b2a6:	2300      	movs	r3, #0
 801b2a8:	2200      	movs	r2, #0
 801b2aa:	2100      	movs	r1, #0
 801b2ac:	f001 fd2c 	bl	801cd08 <USBD_LL_PrepareReceive>
 801b2b0:	e02f      	b.n	801b312 <USBD_LL_DataInStage+0x11a>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 801b2b2:	68fa      	ldr	r2, [r7, #12]
 801b2b4:	23ad      	movs	r3, #173	@ 0xad
 801b2b6:	009b      	lsls	r3, r3, #2
 801b2b8:	58d3      	ldr	r3, [r2, r3]
 801b2ba:	68db      	ldr	r3, [r3, #12]
 801b2bc:	2b00      	cmp	r3, #0
 801b2be:	d00d      	beq.n	801b2dc <USBD_LL_DataInStage+0xe4>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 801b2c0:	68fa      	ldr	r2, [r7, #12]
 801b2c2:	23a7      	movs	r3, #167	@ 0xa7
 801b2c4:	009b      	lsls	r3, r3, #2
 801b2c6:	5cd3      	ldrb	r3, [r2, r3]
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 801b2c8:	2b03      	cmp	r3, #3
 801b2ca:	d107      	bne.n	801b2dc <USBD_LL_DataInStage+0xe4>
          {
            pdev->pClass->EP0_TxSent(pdev);
 801b2cc:	68fa      	ldr	r2, [r7, #12]
 801b2ce:	23ad      	movs	r3, #173	@ 0xad
 801b2d0:	009b      	lsls	r3, r3, #2
 801b2d2:	58d3      	ldr	r3, [r2, r3]
 801b2d4:	68db      	ldr	r3, [r3, #12]
 801b2d6:	68fa      	ldr	r2, [r7, #12]
 801b2d8:	0010      	movs	r0, r2
 801b2da:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 801b2dc:	68fb      	ldr	r3, [r7, #12]
 801b2de:	2180      	movs	r1, #128	@ 0x80
 801b2e0:	0018      	movs	r0, r3
 801b2e2:	f001 fc28 	bl	801cb36 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 801b2e6:	68fb      	ldr	r3, [r7, #12]
 801b2e8:	0018      	movs	r0, r3
 801b2ea:	f000 fff8 	bl	801c2de <USBD_CtlReceiveStatus>
 801b2ee:	e010      	b.n	801b312 <USBD_LL_DataInStage+0x11a>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 801b2f0:	68fa      	ldr	r2, [r7, #12]
 801b2f2:	23a5      	movs	r3, #165	@ 0xa5
 801b2f4:	009b      	lsls	r3, r3, #2
 801b2f6:	58d3      	ldr	r3, [r2, r3]
 801b2f8:	2b04      	cmp	r3, #4
 801b2fa:	d005      	beq.n	801b308 <USBD_LL_DataInStage+0x110>
          (pdev->ep0_state == USBD_EP0_IDLE))
 801b2fc:	68fa      	ldr	r2, [r7, #12]
 801b2fe:	23a5      	movs	r3, #165	@ 0xa5
 801b300:	009b      	lsls	r3, r3, #2
 801b302:	58d3      	ldr	r3, [r2, r3]
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 801b304:	2b00      	cmp	r3, #0
 801b306:	d104      	bne.n	801b312 <USBD_LL_DataInStage+0x11a>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 801b308:	68fb      	ldr	r3, [r7, #12]
 801b30a:	2180      	movs	r1, #128	@ 0x80
 801b30c:	0018      	movs	r0, r3
 801b30e:	f001 fc12 	bl	801cb36 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 801b312:	68fa      	ldr	r2, [r7, #12]
 801b314:	23a8      	movs	r3, #168	@ 0xa8
 801b316:	009b      	lsls	r3, r3, #2
 801b318:	5cd3      	ldrb	r3, [r2, r3]
 801b31a:	2b01      	cmp	r3, #1
 801b31c:	d124      	bne.n	801b368 <USBD_LL_DataInStage+0x170>
    {
      USBD_RunTestMode(pdev);
 801b31e:	68fb      	ldr	r3, [r7, #12]
 801b320:	0018      	movs	r0, r3
 801b322:	f7ff fe43 	bl	801afac <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 801b326:	68fa      	ldr	r2, [r7, #12]
 801b328:	23a8      	movs	r3, #168	@ 0xa8
 801b32a:	009b      	lsls	r3, r3, #2
 801b32c:	2100      	movs	r1, #0
 801b32e:	54d1      	strb	r1, [r2, r3]
 801b330:	e01a      	b.n	801b368 <USBD_LL_DataInStage+0x170>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 801b332:	68fa      	ldr	r2, [r7, #12]
 801b334:	23ad      	movs	r3, #173	@ 0xad
 801b336:	009b      	lsls	r3, r3, #2
 801b338:	58d3      	ldr	r3, [r2, r3]
 801b33a:	695b      	ldr	r3, [r3, #20]
 801b33c:	2b00      	cmp	r3, #0
 801b33e:	d011      	beq.n	801b364 <USBD_LL_DataInStage+0x16c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 801b340:	68fa      	ldr	r2, [r7, #12]
 801b342:	23a7      	movs	r3, #167	@ 0xa7
 801b344:	009b      	lsls	r3, r3, #2
 801b346:	5cd3      	ldrb	r3, [r2, r3]
  else if ((pdev->pClass->DataIn != NULL) &&
 801b348:	2b03      	cmp	r3, #3
 801b34a:	d10b      	bne.n	801b364 <USBD_LL_DataInStage+0x16c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 801b34c:	68fa      	ldr	r2, [r7, #12]
 801b34e:	23ad      	movs	r3, #173	@ 0xad
 801b350:	009b      	lsls	r3, r3, #2
 801b352:	58d3      	ldr	r3, [r2, r3]
 801b354:	695b      	ldr	r3, [r3, #20]
 801b356:	220b      	movs	r2, #11
 801b358:	18ba      	adds	r2, r7, r2
 801b35a:	7811      	ldrb	r1, [r2, #0]
 801b35c:	68fa      	ldr	r2, [r7, #12]
 801b35e:	0010      	movs	r0, r2
 801b360:	4798      	blx	r3
 801b362:	e001      	b.n	801b368 <USBD_LL_DataInStage+0x170>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 801b364:	2302      	movs	r3, #2
 801b366:	e000      	b.n	801b36a <USBD_LL_DataInStage+0x172>
  }

  return USBD_OK;
 801b368:	2300      	movs	r3, #0
}
 801b36a:	0018      	movs	r0, r3
 801b36c:	46bd      	mov	sp, r7
 801b36e:	b006      	add	sp, #24
 801b370:	bd80      	pop	{r7, pc}

0801b372 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 801b372:	b580      	push	{r7, lr}
 801b374:	b082      	sub	sp, #8
 801b376:	af00      	add	r7, sp, #0
 801b378:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 801b37a:	6878      	ldr	r0, [r7, #4]
 801b37c:	2340      	movs	r3, #64	@ 0x40
 801b37e:	2200      	movs	r2, #0
 801b380:	2100      	movs	r1, #0
 801b382:	f001 fb76 	bl	801ca72 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 801b386:	687a      	ldr	r2, [r7, #4]
 801b388:	23ac      	movs	r3, #172	@ 0xac
 801b38a:	005b      	lsls	r3, r3, #1
 801b38c:	2101      	movs	r1, #1
 801b38e:	50d1      	str	r1, [r2, r3]

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 801b390:	687a      	ldr	r2, [r7, #4]
 801b392:	23b2      	movs	r3, #178	@ 0xb2
 801b394:	005b      	lsls	r3, r3, #1
 801b396:	2140      	movs	r1, #64	@ 0x40
 801b398:	50d1      	str	r1, [r2, r3]

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 801b39a:	6878      	ldr	r0, [r7, #4]
 801b39c:	2340      	movs	r3, #64	@ 0x40
 801b39e:	2200      	movs	r2, #0
 801b3a0:	2180      	movs	r1, #128	@ 0x80
 801b3a2:	f001 fb66 	bl	801ca72 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 801b3a6:	687b      	ldr	r3, [r7, #4]
 801b3a8:	2201      	movs	r2, #1
 801b3aa:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 801b3ac:	687b      	ldr	r3, [r7, #4]
 801b3ae:	2240      	movs	r2, #64	@ 0x40
 801b3b0:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 801b3b2:	687a      	ldr	r2, [r7, #4]
 801b3b4:	23a7      	movs	r3, #167	@ 0xa7
 801b3b6:	009b      	lsls	r3, r3, #2
 801b3b8:	2101      	movs	r1, #1
 801b3ba:	54d1      	strb	r1, [r2, r3]
  pdev->ep0_state = USBD_EP0_IDLE;
 801b3bc:	687a      	ldr	r2, [r7, #4]
 801b3be:	23a5      	movs	r3, #165	@ 0xa5
 801b3c0:	009b      	lsls	r3, r3, #2
 801b3c2:	2100      	movs	r1, #0
 801b3c4:	50d1      	str	r1, [r2, r3]
  pdev->dev_config = 0U;
 801b3c6:	687b      	ldr	r3, [r7, #4]
 801b3c8:	2200      	movs	r2, #0
 801b3ca:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 801b3cc:	687a      	ldr	r2, [r7, #4]
 801b3ce:	23a9      	movs	r3, #169	@ 0xa9
 801b3d0:	009b      	lsls	r3, r3, #2
 801b3d2:	2100      	movs	r1, #0
 801b3d4:	50d1      	str	r1, [r2, r3]

  if (pdev->pClassData)
 801b3d6:	687a      	ldr	r2, [r7, #4]
 801b3d8:	23ae      	movs	r3, #174	@ 0xae
 801b3da:	009b      	lsls	r3, r3, #2
 801b3dc:	58d3      	ldr	r3, [r2, r3]
 801b3de:	2b00      	cmp	r3, #0
 801b3e0:	d00a      	beq.n	801b3f8 <USBD_LL_Reset+0x86>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 801b3e2:	687a      	ldr	r2, [r7, #4]
 801b3e4:	23ad      	movs	r3, #173	@ 0xad
 801b3e6:	009b      	lsls	r3, r3, #2
 801b3e8:	58d3      	ldr	r3, [r2, r3]
 801b3ea:	685a      	ldr	r2, [r3, #4]
 801b3ec:	687b      	ldr	r3, [r7, #4]
 801b3ee:	685b      	ldr	r3, [r3, #4]
 801b3f0:	b2d9      	uxtb	r1, r3
 801b3f2:	687b      	ldr	r3, [r7, #4]
 801b3f4:	0018      	movs	r0, r3
 801b3f6:	4790      	blx	r2
  }

  return USBD_OK;
 801b3f8:	2300      	movs	r3, #0
}
 801b3fa:	0018      	movs	r0, r3
 801b3fc:	46bd      	mov	sp, r7
 801b3fe:	b002      	add	sp, #8
 801b400:	bd80      	pop	{r7, pc}

0801b402 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 801b402:	b580      	push	{r7, lr}
 801b404:	b082      	sub	sp, #8
 801b406:	af00      	add	r7, sp, #0
 801b408:	6078      	str	r0, [r7, #4]
 801b40a:	000a      	movs	r2, r1
 801b40c:	1cfb      	adds	r3, r7, #3
 801b40e:	701a      	strb	r2, [r3, #0]
  pdev->dev_speed = speed;
 801b410:	687b      	ldr	r3, [r7, #4]
 801b412:	1cfa      	adds	r2, r7, #3
 801b414:	7812      	ldrb	r2, [r2, #0]
 801b416:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 801b418:	2300      	movs	r3, #0
}
 801b41a:	0018      	movs	r0, r3
 801b41c:	46bd      	mov	sp, r7
 801b41e:	b002      	add	sp, #8
 801b420:	bd80      	pop	{r7, pc}
	...

0801b424 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 801b424:	b580      	push	{r7, lr}
 801b426:	b082      	sub	sp, #8
 801b428:	af00      	add	r7, sp, #0
 801b42a:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 801b42c:	687a      	ldr	r2, [r7, #4]
 801b42e:	23a7      	movs	r3, #167	@ 0xa7
 801b430:	009b      	lsls	r3, r3, #2
 801b432:	5cd1      	ldrb	r1, [r2, r3]
 801b434:	687b      	ldr	r3, [r7, #4]
 801b436:	4a06      	ldr	r2, [pc, #24]	@ (801b450 <USBD_LL_Suspend+0x2c>)
 801b438:	5499      	strb	r1, [r3, r2]
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 801b43a:	687a      	ldr	r2, [r7, #4]
 801b43c:	23a7      	movs	r3, #167	@ 0xa7
 801b43e:	009b      	lsls	r3, r3, #2
 801b440:	2104      	movs	r1, #4
 801b442:	54d1      	strb	r1, [r2, r3]

  return USBD_OK;
 801b444:	2300      	movs	r3, #0
}
 801b446:	0018      	movs	r0, r3
 801b448:	46bd      	mov	sp, r7
 801b44a:	b002      	add	sp, #8
 801b44c:	bd80      	pop	{r7, pc}
 801b44e:	46c0      	nop			@ (mov r8, r8)
 801b450:	0000029d 	.word	0x0000029d

0801b454 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 801b454:	b580      	push	{r7, lr}
 801b456:	b082      	sub	sp, #8
 801b458:	af00      	add	r7, sp, #0
 801b45a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 801b45c:	687a      	ldr	r2, [r7, #4]
 801b45e:	23a7      	movs	r3, #167	@ 0xa7
 801b460:	009b      	lsls	r3, r3, #2
 801b462:	5cd3      	ldrb	r3, [r2, r3]
 801b464:	2b04      	cmp	r3, #4
 801b466:	d106      	bne.n	801b476 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 801b468:	687b      	ldr	r3, [r7, #4]
 801b46a:	4a05      	ldr	r2, [pc, #20]	@ (801b480 <USBD_LL_Resume+0x2c>)
 801b46c:	5c99      	ldrb	r1, [r3, r2]
 801b46e:	687a      	ldr	r2, [r7, #4]
 801b470:	23a7      	movs	r3, #167	@ 0xa7
 801b472:	009b      	lsls	r3, r3, #2
 801b474:	54d1      	strb	r1, [r2, r3]
  }

  return USBD_OK;
 801b476:	2300      	movs	r3, #0
}
 801b478:	0018      	movs	r0, r3
 801b47a:	46bd      	mov	sp, r7
 801b47c:	b002      	add	sp, #8
 801b47e:	bd80      	pop	{r7, pc}
 801b480:	0000029d 	.word	0x0000029d

0801b484 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 801b484:	b580      	push	{r7, lr}
 801b486:	b082      	sub	sp, #8
 801b488:	af00      	add	r7, sp, #0
 801b48a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801b48c:	687a      	ldr	r2, [r7, #4]
 801b48e:	23a7      	movs	r3, #167	@ 0xa7
 801b490:	009b      	lsls	r3, r3, #2
 801b492:	5cd3      	ldrb	r3, [r2, r3]
 801b494:	2b03      	cmp	r3, #3
 801b496:	d10e      	bne.n	801b4b6 <USBD_LL_SOF+0x32>
  {
    if (pdev->pClass->SOF != NULL)
 801b498:	687a      	ldr	r2, [r7, #4]
 801b49a:	23ad      	movs	r3, #173	@ 0xad
 801b49c:	009b      	lsls	r3, r3, #2
 801b49e:	58d3      	ldr	r3, [r2, r3]
 801b4a0:	69db      	ldr	r3, [r3, #28]
 801b4a2:	2b00      	cmp	r3, #0
 801b4a4:	d007      	beq.n	801b4b6 <USBD_LL_SOF+0x32>
    {
      pdev->pClass->SOF(pdev);
 801b4a6:	687a      	ldr	r2, [r7, #4]
 801b4a8:	23ad      	movs	r3, #173	@ 0xad
 801b4aa:	009b      	lsls	r3, r3, #2
 801b4ac:	58d3      	ldr	r3, [r2, r3]
 801b4ae:	69db      	ldr	r3, [r3, #28]
 801b4b0:	687a      	ldr	r2, [r7, #4]
 801b4b2:	0010      	movs	r0, r2
 801b4b4:	4798      	blx	r3
    }
  }

  return USBD_OK;
 801b4b6:	2300      	movs	r3, #0
}
 801b4b8:	0018      	movs	r0, r3
 801b4ba:	46bd      	mov	sp, r7
 801b4bc:	b002      	add	sp, #8
 801b4be:	bd80      	pop	{r7, pc}

0801b4c0 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 801b4c0:	b580      	push	{r7, lr}
 801b4c2:	b084      	sub	sp, #16
 801b4c4:	af00      	add	r7, sp, #0
 801b4c6:	6078      	str	r0, [r7, #4]
 801b4c8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801b4ca:	230f      	movs	r3, #15
 801b4cc:	18fb      	adds	r3, r7, r3
 801b4ce:	2200      	movs	r2, #0
 801b4d0:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801b4d2:	683b      	ldr	r3, [r7, #0]
 801b4d4:	781b      	ldrb	r3, [r3, #0]
 801b4d6:	001a      	movs	r2, r3
 801b4d8:	2360      	movs	r3, #96	@ 0x60
 801b4da:	4013      	ands	r3, r2
 801b4dc:	2b40      	cmp	r3, #64	@ 0x40
 801b4de:	d004      	beq.n	801b4ea <USBD_StdDevReq+0x2a>
 801b4e0:	d84f      	bhi.n	801b582 <USBD_StdDevReq+0xc2>
 801b4e2:	2b00      	cmp	r3, #0
 801b4e4:	d00b      	beq.n	801b4fe <USBD_StdDevReq+0x3e>
 801b4e6:	2b20      	cmp	r3, #32
 801b4e8:	d14b      	bne.n	801b582 <USBD_StdDevReq+0xc2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 801b4ea:	687a      	ldr	r2, [r7, #4]
 801b4ec:	23ad      	movs	r3, #173	@ 0xad
 801b4ee:	009b      	lsls	r3, r3, #2
 801b4f0:	58d3      	ldr	r3, [r2, r3]
 801b4f2:	689b      	ldr	r3, [r3, #8]
 801b4f4:	6839      	ldr	r1, [r7, #0]
 801b4f6:	687a      	ldr	r2, [r7, #4]
 801b4f8:	0010      	movs	r0, r2
 801b4fa:	4798      	blx	r3
      break;
 801b4fc:	e048      	b.n	801b590 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 801b4fe:	683b      	ldr	r3, [r7, #0]
 801b500:	785b      	ldrb	r3, [r3, #1]
 801b502:	2b09      	cmp	r3, #9
 801b504:	d835      	bhi.n	801b572 <USBD_StdDevReq+0xb2>
 801b506:	009a      	lsls	r2, r3, #2
 801b508:	4b25      	ldr	r3, [pc, #148]	@ (801b5a0 <USBD_StdDevReq+0xe0>)
 801b50a:	18d3      	adds	r3, r2, r3
 801b50c:	681b      	ldr	r3, [r3, #0]
 801b50e:	469f      	mov	pc, r3
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 801b510:	683a      	ldr	r2, [r7, #0]
 801b512:	687b      	ldr	r3, [r7, #4]
 801b514:	0011      	movs	r1, r2
 801b516:	0018      	movs	r0, r3
 801b518:	f000 fa52 	bl	801b9c0 <USBD_GetDescriptor>
          break;
 801b51c:	e030      	b.n	801b580 <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 801b51e:	683a      	ldr	r2, [r7, #0]
 801b520:	687b      	ldr	r3, [r7, #4]
 801b522:	0011      	movs	r1, r2
 801b524:	0018      	movs	r0, r3
 801b526:	f000 fbfd 	bl	801bd24 <USBD_SetAddress>
          break;
 801b52a:	e029      	b.n	801b580 <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 801b52c:	683a      	ldr	r2, [r7, #0]
 801b52e:	687b      	ldr	r3, [r7, #4]
 801b530:	0011      	movs	r1, r2
 801b532:	0018      	movs	r0, r3
 801b534:	f000 fc4a 	bl	801bdcc <USBD_SetConfig>
          break;
 801b538:	e022      	b.n	801b580 <USBD_StdDevReq+0xc0>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 801b53a:	683a      	ldr	r2, [r7, #0]
 801b53c:	687b      	ldr	r3, [r7, #4]
 801b53e:	0011      	movs	r1, r2
 801b540:	0018      	movs	r0, r3
 801b542:	f000 fce7 	bl	801bf14 <USBD_GetConfig>
          break;
 801b546:	e01b      	b.n	801b580 <USBD_StdDevReq+0xc0>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 801b548:	683a      	ldr	r2, [r7, #0]
 801b54a:	687b      	ldr	r3, [r7, #4]
 801b54c:	0011      	movs	r1, r2
 801b54e:	0018      	movs	r0, r3
 801b550:	f000 fd1b 	bl	801bf8a <USBD_GetStatus>
          break;
 801b554:	e014      	b.n	801b580 <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 801b556:	683a      	ldr	r2, [r7, #0]
 801b558:	687b      	ldr	r3, [r7, #4]
 801b55a:	0011      	movs	r1, r2
 801b55c:	0018      	movs	r0, r3
 801b55e:	f000 fd4e 	bl	801bffe <USBD_SetFeature>
          break;
 801b562:	e00d      	b.n	801b580 <USBD_StdDevReq+0xc0>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 801b564:	683a      	ldr	r2, [r7, #0]
 801b566:	687b      	ldr	r3, [r7, #4]
 801b568:	0011      	movs	r1, r2
 801b56a:	0018      	movs	r0, r3
 801b56c:	f000 fd5d 	bl	801c02a <USBD_ClrFeature>
          break;
 801b570:	e006      	b.n	801b580 <USBD_StdDevReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 801b572:	683a      	ldr	r2, [r7, #0]
 801b574:	687b      	ldr	r3, [r7, #4]
 801b576:	0011      	movs	r1, r2
 801b578:	0018      	movs	r0, r3
 801b57a:	f000 fdb4 	bl	801c0e6 <USBD_CtlError>
          break;
 801b57e:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 801b580:	e006      	b.n	801b590 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 801b582:	683a      	ldr	r2, [r7, #0]
 801b584:	687b      	ldr	r3, [r7, #4]
 801b586:	0011      	movs	r1, r2
 801b588:	0018      	movs	r0, r3
 801b58a:	f000 fdac 	bl	801c0e6 <USBD_CtlError>
      break;
 801b58e:	46c0      	nop			@ (mov r8, r8)
  }

  return ret;
 801b590:	230f      	movs	r3, #15
 801b592:	18fb      	adds	r3, r7, r3
 801b594:	781b      	ldrb	r3, [r3, #0]
}
 801b596:	0018      	movs	r0, r3
 801b598:	46bd      	mov	sp, r7
 801b59a:	b004      	add	sp, #16
 801b59c:	bd80      	pop	{r7, pc}
 801b59e:	46c0      	nop			@ (mov r8, r8)
 801b5a0:	08024ad8 	.word	0x08024ad8

0801b5a4 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 801b5a4:	b5b0      	push	{r4, r5, r7, lr}
 801b5a6:	b084      	sub	sp, #16
 801b5a8:	af00      	add	r7, sp, #0
 801b5aa:	6078      	str	r0, [r7, #4]
 801b5ac:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801b5ae:	230f      	movs	r3, #15
 801b5b0:	18fb      	adds	r3, r7, r3
 801b5b2:	2200      	movs	r2, #0
 801b5b4:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801b5b6:	683b      	ldr	r3, [r7, #0]
 801b5b8:	781b      	ldrb	r3, [r3, #0]
 801b5ba:	001a      	movs	r2, r3
 801b5bc:	2360      	movs	r3, #96	@ 0x60
 801b5be:	4013      	ands	r3, r2
 801b5c0:	2b40      	cmp	r3, #64	@ 0x40
 801b5c2:	d004      	beq.n	801b5ce <USBD_StdItfReq+0x2a>
 801b5c4:	d839      	bhi.n	801b63a <USBD_StdItfReq+0x96>
 801b5c6:	2b00      	cmp	r3, #0
 801b5c8:	d001      	beq.n	801b5ce <USBD_StdItfReq+0x2a>
 801b5ca:	2b20      	cmp	r3, #32
 801b5cc:	d135      	bne.n	801b63a <USBD_StdItfReq+0x96>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 801b5ce:	687a      	ldr	r2, [r7, #4]
 801b5d0:	23a7      	movs	r3, #167	@ 0xa7
 801b5d2:	009b      	lsls	r3, r3, #2
 801b5d4:	5cd3      	ldrb	r3, [r2, r3]
 801b5d6:	3b01      	subs	r3, #1
 801b5d8:	2b02      	cmp	r3, #2
 801b5da:	d825      	bhi.n	801b628 <USBD_StdItfReq+0x84>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 801b5dc:	683b      	ldr	r3, [r7, #0]
 801b5de:	889b      	ldrh	r3, [r3, #4]
 801b5e0:	b2db      	uxtb	r3, r3
 801b5e2:	2b01      	cmp	r3, #1
 801b5e4:	d819      	bhi.n	801b61a <USBD_StdItfReq+0x76>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 801b5e6:	687a      	ldr	r2, [r7, #4]
 801b5e8:	23ad      	movs	r3, #173	@ 0xad
 801b5ea:	009b      	lsls	r3, r3, #2
 801b5ec:	58d3      	ldr	r3, [r2, r3]
 801b5ee:	689b      	ldr	r3, [r3, #8]
 801b5f0:	250f      	movs	r5, #15
 801b5f2:	197c      	adds	r4, r7, r5
 801b5f4:	6839      	ldr	r1, [r7, #0]
 801b5f6:	687a      	ldr	r2, [r7, #4]
 801b5f8:	0010      	movs	r0, r2
 801b5fa:	4798      	blx	r3
 801b5fc:	0003      	movs	r3, r0
 801b5fe:	7023      	strb	r3, [r4, #0]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 801b600:	683b      	ldr	r3, [r7, #0]
 801b602:	88db      	ldrh	r3, [r3, #6]
 801b604:	2b00      	cmp	r3, #0
 801b606:	d116      	bne.n	801b636 <USBD_StdItfReq+0x92>
 801b608:	197b      	adds	r3, r7, r5
 801b60a:	781b      	ldrb	r3, [r3, #0]
 801b60c:	2b00      	cmp	r3, #0
 801b60e:	d112      	bne.n	801b636 <USBD_StdItfReq+0x92>
            {
              USBD_CtlSendStatus(pdev);
 801b610:	687b      	ldr	r3, [r7, #4]
 801b612:	0018      	movs	r0, r3
 801b614:	f000 fe4f 	bl	801c2b6 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 801b618:	e00d      	b.n	801b636 <USBD_StdItfReq+0x92>
            USBD_CtlError(pdev, req);
 801b61a:	683a      	ldr	r2, [r7, #0]
 801b61c:	687b      	ldr	r3, [r7, #4]
 801b61e:	0011      	movs	r1, r2
 801b620:	0018      	movs	r0, r3
 801b622:	f000 fd60 	bl	801c0e6 <USBD_CtlError>
          break;
 801b626:	e006      	b.n	801b636 <USBD_StdItfReq+0x92>

        default:
          USBD_CtlError(pdev, req);
 801b628:	683a      	ldr	r2, [r7, #0]
 801b62a:	687b      	ldr	r3, [r7, #4]
 801b62c:	0011      	movs	r1, r2
 801b62e:	0018      	movs	r0, r3
 801b630:	f000 fd59 	bl	801c0e6 <USBD_CtlError>
          break;
 801b634:	e000      	b.n	801b638 <USBD_StdItfReq+0x94>
          break;
 801b636:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 801b638:	e006      	b.n	801b648 <USBD_StdItfReq+0xa4>

    default:
      USBD_CtlError(pdev, req);
 801b63a:	683a      	ldr	r2, [r7, #0]
 801b63c:	687b      	ldr	r3, [r7, #4]
 801b63e:	0011      	movs	r1, r2
 801b640:	0018      	movs	r0, r3
 801b642:	f000 fd50 	bl	801c0e6 <USBD_CtlError>
      break;
 801b646:	46c0      	nop			@ (mov r8, r8)
  }

  return USBD_OK;
 801b648:	2300      	movs	r3, #0
}
 801b64a:	0018      	movs	r0, r3
 801b64c:	46bd      	mov	sp, r7
 801b64e:	b004      	add	sp, #16
 801b650:	bdb0      	pop	{r4, r5, r7, pc}

0801b652 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 801b652:	b5b0      	push	{r4, r5, r7, lr}
 801b654:	b084      	sub	sp, #16
 801b656:	af00      	add	r7, sp, #0
 801b658:	6078      	str	r0, [r7, #4]
 801b65a:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 801b65c:	230f      	movs	r3, #15
 801b65e:	18fb      	adds	r3, r7, r3
 801b660:	2200      	movs	r2, #0
 801b662:	701a      	strb	r2, [r3, #0]
  ep_addr  = LOBYTE(req->wIndex);
 801b664:	683b      	ldr	r3, [r7, #0]
 801b666:	889a      	ldrh	r2, [r3, #4]
 801b668:	230e      	movs	r3, #14
 801b66a:	18fb      	adds	r3, r7, r3
 801b66c:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801b66e:	683b      	ldr	r3, [r7, #0]
 801b670:	781b      	ldrb	r3, [r3, #0]
 801b672:	001a      	movs	r2, r3
 801b674:	2360      	movs	r3, #96	@ 0x60
 801b676:	4013      	ands	r3, r2
 801b678:	2b40      	cmp	r3, #64	@ 0x40
 801b67a:	d006      	beq.n	801b68a <USBD_StdEPReq+0x38>
 801b67c:	d900      	bls.n	801b680 <USBD_StdEPReq+0x2e>
 801b67e:	e190      	b.n	801b9a2 <USBD_StdEPReq+0x350>
 801b680:	2b00      	cmp	r3, #0
 801b682:	d00c      	beq.n	801b69e <USBD_StdEPReq+0x4c>
 801b684:	2b20      	cmp	r3, #32
 801b686:	d000      	beq.n	801b68a <USBD_StdEPReq+0x38>
 801b688:	e18b      	b.n	801b9a2 <USBD_StdEPReq+0x350>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 801b68a:	687a      	ldr	r2, [r7, #4]
 801b68c:	23ad      	movs	r3, #173	@ 0xad
 801b68e:	009b      	lsls	r3, r3, #2
 801b690:	58d3      	ldr	r3, [r2, r3]
 801b692:	689b      	ldr	r3, [r3, #8]
 801b694:	6839      	ldr	r1, [r7, #0]
 801b696:	687a      	ldr	r2, [r7, #4]
 801b698:	0010      	movs	r0, r2
 801b69a:	4798      	blx	r3
      break;
 801b69c:	e188      	b.n	801b9b0 <USBD_StdEPReq+0x35e>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 801b69e:	683b      	ldr	r3, [r7, #0]
 801b6a0:	781b      	ldrb	r3, [r3, #0]
 801b6a2:	001a      	movs	r2, r3
 801b6a4:	2360      	movs	r3, #96	@ 0x60
 801b6a6:	4013      	ands	r3, r2
 801b6a8:	2b20      	cmp	r3, #32
 801b6aa:	d10f      	bne.n	801b6cc <USBD_StdEPReq+0x7a>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 801b6ac:	687a      	ldr	r2, [r7, #4]
 801b6ae:	23ad      	movs	r3, #173	@ 0xad
 801b6b0:	009b      	lsls	r3, r3, #2
 801b6b2:	58d3      	ldr	r3, [r2, r3]
 801b6b4:	689b      	ldr	r3, [r3, #8]
 801b6b6:	250f      	movs	r5, #15
 801b6b8:	197c      	adds	r4, r7, r5
 801b6ba:	6839      	ldr	r1, [r7, #0]
 801b6bc:	687a      	ldr	r2, [r7, #4]
 801b6be:	0010      	movs	r0, r2
 801b6c0:	4798      	blx	r3
 801b6c2:	0003      	movs	r3, r0
 801b6c4:	7023      	strb	r3, [r4, #0]

        return ret;
 801b6c6:	197b      	adds	r3, r7, r5
 801b6c8:	781b      	ldrb	r3, [r3, #0]
 801b6ca:	e174      	b.n	801b9b6 <USBD_StdEPReq+0x364>
      }

      switch (req->bRequest)
 801b6cc:	683b      	ldr	r3, [r7, #0]
 801b6ce:	785b      	ldrb	r3, [r3, #1]
 801b6d0:	2b03      	cmp	r3, #3
 801b6d2:	d007      	beq.n	801b6e4 <USBD_StdEPReq+0x92>
 801b6d4:	dd00      	ble.n	801b6d8 <USBD_StdEPReq+0x86>
 801b6d6:	e15c      	b.n	801b992 <USBD_StdEPReq+0x340>
 801b6d8:	2b00      	cmp	r3, #0
 801b6da:	d100      	bne.n	801b6de <USBD_StdEPReq+0x8c>
 801b6dc:	e092      	b.n	801b804 <USBD_StdEPReq+0x1b2>
 801b6de:	2b01      	cmp	r3, #1
 801b6e0:	d04b      	beq.n	801b77a <USBD_StdEPReq+0x128>
 801b6e2:	e156      	b.n	801b992 <USBD_StdEPReq+0x340>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 801b6e4:	687a      	ldr	r2, [r7, #4]
 801b6e6:	23a7      	movs	r3, #167	@ 0xa7
 801b6e8:	009b      	lsls	r3, r3, #2
 801b6ea:	5cd3      	ldrb	r3, [r2, r3]
 801b6ec:	2b02      	cmp	r3, #2
 801b6ee:	d002      	beq.n	801b6f6 <USBD_StdEPReq+0xa4>
 801b6f0:	2b03      	cmp	r3, #3
 801b6f2:	d01d      	beq.n	801b730 <USBD_StdEPReq+0xde>
 801b6f4:	e039      	b.n	801b76a <USBD_StdEPReq+0x118>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 801b6f6:	220e      	movs	r2, #14
 801b6f8:	18bb      	adds	r3, r7, r2
 801b6fa:	781b      	ldrb	r3, [r3, #0]
 801b6fc:	2b00      	cmp	r3, #0
 801b6fe:	d010      	beq.n	801b722 <USBD_StdEPReq+0xd0>
 801b700:	18bb      	adds	r3, r7, r2
 801b702:	781b      	ldrb	r3, [r3, #0]
 801b704:	2b80      	cmp	r3, #128	@ 0x80
 801b706:	d00c      	beq.n	801b722 <USBD_StdEPReq+0xd0>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 801b708:	18bb      	adds	r3, r7, r2
 801b70a:	781a      	ldrb	r2, [r3, #0]
 801b70c:	687b      	ldr	r3, [r7, #4]
 801b70e:	0011      	movs	r1, r2
 801b710:	0018      	movs	r0, r3
 801b712:	f001 fa10 	bl	801cb36 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 801b716:	687b      	ldr	r3, [r7, #4]
 801b718:	2180      	movs	r1, #128	@ 0x80
 801b71a:	0018      	movs	r0, r3
 801b71c:	f001 fa0b 	bl	801cb36 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 801b720:	e02a      	b.n	801b778 <USBD_StdEPReq+0x126>
                USBD_CtlError(pdev, req);
 801b722:	683a      	ldr	r2, [r7, #0]
 801b724:	687b      	ldr	r3, [r7, #4]
 801b726:	0011      	movs	r1, r2
 801b728:	0018      	movs	r0, r3
 801b72a:	f000 fcdc 	bl	801c0e6 <USBD_CtlError>
              break;
 801b72e:	e023      	b.n	801b778 <USBD_StdEPReq+0x126>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 801b730:	683b      	ldr	r3, [r7, #0]
 801b732:	885b      	ldrh	r3, [r3, #2]
 801b734:	2b00      	cmp	r3, #0
 801b736:	d113      	bne.n	801b760 <USBD_StdEPReq+0x10e>
              {
                if ((ep_addr != 0x00U) &&
 801b738:	220e      	movs	r2, #14
 801b73a:	18bb      	adds	r3, r7, r2
 801b73c:	781b      	ldrb	r3, [r3, #0]
 801b73e:	2b00      	cmp	r3, #0
 801b740:	d00e      	beq.n	801b760 <USBD_StdEPReq+0x10e>
 801b742:	18bb      	adds	r3, r7, r2
 801b744:	781b      	ldrb	r3, [r3, #0]
 801b746:	2b80      	cmp	r3, #128	@ 0x80
 801b748:	d00a      	beq.n	801b760 <USBD_StdEPReq+0x10e>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 801b74a:	683b      	ldr	r3, [r7, #0]
 801b74c:	88db      	ldrh	r3, [r3, #6]
 801b74e:	2b00      	cmp	r3, #0
 801b750:	d106      	bne.n	801b760 <USBD_StdEPReq+0x10e>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 801b752:	18bb      	adds	r3, r7, r2
 801b754:	781a      	ldrb	r2, [r3, #0]
 801b756:	687b      	ldr	r3, [r7, #4]
 801b758:	0011      	movs	r1, r2
 801b75a:	0018      	movs	r0, r3
 801b75c:	f001 f9eb 	bl	801cb36 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 801b760:	687b      	ldr	r3, [r7, #4]
 801b762:	0018      	movs	r0, r3
 801b764:	f000 fda7 	bl	801c2b6 <USBD_CtlSendStatus>

              break;
 801b768:	e006      	b.n	801b778 <USBD_StdEPReq+0x126>

            default:
              USBD_CtlError(pdev, req);
 801b76a:	683a      	ldr	r2, [r7, #0]
 801b76c:	687b      	ldr	r3, [r7, #4]
 801b76e:	0011      	movs	r1, r2
 801b770:	0018      	movs	r0, r3
 801b772:	f000 fcb8 	bl	801c0e6 <USBD_CtlError>
              break;
 801b776:	46c0      	nop			@ (mov r8, r8)
          }
          break;
 801b778:	e112      	b.n	801b9a0 <USBD_StdEPReq+0x34e>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 801b77a:	687a      	ldr	r2, [r7, #4]
 801b77c:	23a7      	movs	r3, #167	@ 0xa7
 801b77e:	009b      	lsls	r3, r3, #2
 801b780:	5cd3      	ldrb	r3, [r2, r3]
 801b782:	2b02      	cmp	r3, #2
 801b784:	d002      	beq.n	801b78c <USBD_StdEPReq+0x13a>
 801b786:	2b03      	cmp	r3, #3
 801b788:	d01d      	beq.n	801b7c6 <USBD_StdEPReq+0x174>
 801b78a:	e032      	b.n	801b7f2 <USBD_StdEPReq+0x1a0>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 801b78c:	220e      	movs	r2, #14
 801b78e:	18bb      	adds	r3, r7, r2
 801b790:	781b      	ldrb	r3, [r3, #0]
 801b792:	2b00      	cmp	r3, #0
 801b794:	d010      	beq.n	801b7b8 <USBD_StdEPReq+0x166>
 801b796:	18bb      	adds	r3, r7, r2
 801b798:	781b      	ldrb	r3, [r3, #0]
 801b79a:	2b80      	cmp	r3, #128	@ 0x80
 801b79c:	d00c      	beq.n	801b7b8 <USBD_StdEPReq+0x166>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 801b79e:	18bb      	adds	r3, r7, r2
 801b7a0:	781a      	ldrb	r2, [r3, #0]
 801b7a2:	687b      	ldr	r3, [r7, #4]
 801b7a4:	0011      	movs	r1, r2
 801b7a6:	0018      	movs	r0, r3
 801b7a8:	f001 f9c5 	bl	801cb36 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 801b7ac:	687b      	ldr	r3, [r7, #4]
 801b7ae:	2180      	movs	r1, #128	@ 0x80
 801b7b0:	0018      	movs	r0, r3
 801b7b2:	f001 f9c0 	bl	801cb36 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 801b7b6:	e024      	b.n	801b802 <USBD_StdEPReq+0x1b0>
                USBD_CtlError(pdev, req);
 801b7b8:	683a      	ldr	r2, [r7, #0]
 801b7ba:	687b      	ldr	r3, [r7, #4]
 801b7bc:	0011      	movs	r1, r2
 801b7be:	0018      	movs	r0, r3
 801b7c0:	f000 fc91 	bl	801c0e6 <USBD_CtlError>
              break;
 801b7c4:	e01d      	b.n	801b802 <USBD_StdEPReq+0x1b0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 801b7c6:	683b      	ldr	r3, [r7, #0]
 801b7c8:	885b      	ldrh	r3, [r3, #2]
 801b7ca:	2b00      	cmp	r3, #0
 801b7cc:	d118      	bne.n	801b800 <USBD_StdEPReq+0x1ae>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 801b7ce:	210e      	movs	r1, #14
 801b7d0:	187b      	adds	r3, r7, r1
 801b7d2:	781b      	ldrb	r3, [r3, #0]
 801b7d4:	227f      	movs	r2, #127	@ 0x7f
 801b7d6:	4013      	ands	r3, r2
 801b7d8:	d006      	beq.n	801b7e8 <USBD_StdEPReq+0x196>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 801b7da:	187b      	adds	r3, r7, r1
 801b7dc:	781a      	ldrb	r2, [r3, #0]
 801b7de:	687b      	ldr	r3, [r7, #4]
 801b7e0:	0011      	movs	r1, r2
 801b7e2:	0018      	movs	r0, r3
 801b7e4:	f001 f9d2 	bl	801cb8c <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 801b7e8:	687b      	ldr	r3, [r7, #4]
 801b7ea:	0018      	movs	r0, r3
 801b7ec:	f000 fd63 	bl	801c2b6 <USBD_CtlSendStatus>
              }
              break;
 801b7f0:	e006      	b.n	801b800 <USBD_StdEPReq+0x1ae>

            default:
              USBD_CtlError(pdev, req);
 801b7f2:	683a      	ldr	r2, [r7, #0]
 801b7f4:	687b      	ldr	r3, [r7, #4]
 801b7f6:	0011      	movs	r1, r2
 801b7f8:	0018      	movs	r0, r3
 801b7fa:	f000 fc74 	bl	801c0e6 <USBD_CtlError>
              break;
 801b7fe:	e000      	b.n	801b802 <USBD_StdEPReq+0x1b0>
              break;
 801b800:	46c0      	nop			@ (mov r8, r8)
          }
          break;
 801b802:	e0cd      	b.n	801b9a0 <USBD_StdEPReq+0x34e>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 801b804:	687a      	ldr	r2, [r7, #4]
 801b806:	23a7      	movs	r3, #167	@ 0xa7
 801b808:	009b      	lsls	r3, r3, #2
 801b80a:	5cd3      	ldrb	r3, [r2, r3]
 801b80c:	2b02      	cmp	r3, #2
 801b80e:	d002      	beq.n	801b816 <USBD_StdEPReq+0x1c4>
 801b810:	2b03      	cmp	r3, #3
 801b812:	d03c      	beq.n	801b88e <USBD_StdEPReq+0x23c>
 801b814:	e0b5      	b.n	801b982 <USBD_StdEPReq+0x330>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 801b816:	220e      	movs	r2, #14
 801b818:	18bb      	adds	r3, r7, r2
 801b81a:	781b      	ldrb	r3, [r3, #0]
 801b81c:	2b00      	cmp	r3, #0
 801b81e:	d00a      	beq.n	801b836 <USBD_StdEPReq+0x1e4>
 801b820:	18bb      	adds	r3, r7, r2
 801b822:	781b      	ldrb	r3, [r3, #0]
 801b824:	2b80      	cmp	r3, #128	@ 0x80
 801b826:	d006      	beq.n	801b836 <USBD_StdEPReq+0x1e4>
              {
                USBD_CtlError(pdev, req);
 801b828:	683a      	ldr	r2, [r7, #0]
 801b82a:	687b      	ldr	r3, [r7, #4]
 801b82c:	0011      	movs	r1, r2
 801b82e:	0018      	movs	r0, r3
 801b830:	f000 fc59 	bl	801c0e6 <USBD_CtlError>
                break;
 801b834:	e0ac      	b.n	801b990 <USBD_StdEPReq+0x33e>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801b836:	220e      	movs	r2, #14
 801b838:	18bb      	adds	r3, r7, r2
 801b83a:	781b      	ldrb	r3, [r3, #0]
 801b83c:	b25b      	sxtb	r3, r3
 801b83e:	2b00      	cmp	r3, #0
 801b840:	da0c      	bge.n	801b85c <USBD_StdEPReq+0x20a>
 801b842:	18bb      	adds	r3, r7, r2
 801b844:	781b      	ldrb	r3, [r3, #0]
 801b846:	227f      	movs	r2, #127	@ 0x7f
 801b848:	401a      	ands	r2, r3
 801b84a:	0013      	movs	r3, r2
 801b84c:	009b      	lsls	r3, r3, #2
 801b84e:	189b      	adds	r3, r3, r2
 801b850:	009b      	lsls	r3, r3, #2
 801b852:	3310      	adds	r3, #16
 801b854:	687a      	ldr	r2, [r7, #4]
 801b856:	18d3      	adds	r3, r2, r3
 801b858:	3304      	adds	r3, #4
 801b85a:	e00d      	b.n	801b878 <USBD_StdEPReq+0x226>
                    &pdev->ep_out[ep_addr & 0x7FU];
 801b85c:	230e      	movs	r3, #14
 801b85e:	18fb      	adds	r3, r7, r3
 801b860:	781b      	ldrb	r3, [r3, #0]
 801b862:	227f      	movs	r2, #127	@ 0x7f
 801b864:	401a      	ands	r2, r3
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801b866:	0013      	movs	r3, r2
 801b868:	009b      	lsls	r3, r3, #2
 801b86a:	189b      	adds	r3, r3, r2
 801b86c:	009b      	lsls	r3, r3, #2
 801b86e:	3351      	adds	r3, #81	@ 0x51
 801b870:	33ff      	adds	r3, #255	@ 0xff
 801b872:	687a      	ldr	r2, [r7, #4]
 801b874:	18d3      	adds	r3, r2, r3
 801b876:	3304      	adds	r3, #4
 801b878:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 801b87a:	68bb      	ldr	r3, [r7, #8]
 801b87c:	2200      	movs	r2, #0
 801b87e:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 801b880:	68b9      	ldr	r1, [r7, #8]
 801b882:	687b      	ldr	r3, [r7, #4]
 801b884:	2202      	movs	r2, #2
 801b886:	0018      	movs	r0, r3
 801b888:	f000 fcab 	bl	801c1e2 <USBD_CtlSendData>
              break;
 801b88c:	e080      	b.n	801b990 <USBD_StdEPReq+0x33e>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 801b88e:	220e      	movs	r2, #14
 801b890:	18bb      	adds	r3, r7, r2
 801b892:	781b      	ldrb	r3, [r3, #0]
 801b894:	b25b      	sxtb	r3, r3
 801b896:	2b00      	cmp	r3, #0
 801b898:	da14      	bge.n	801b8c4 <USBD_StdEPReq+0x272>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 801b89a:	18bb      	adds	r3, r7, r2
 801b89c:	781b      	ldrb	r3, [r3, #0]
 801b89e:	220f      	movs	r2, #15
 801b8a0:	401a      	ands	r2, r3
 801b8a2:	6879      	ldr	r1, [r7, #4]
 801b8a4:	0013      	movs	r3, r2
 801b8a6:	009b      	lsls	r3, r3, #2
 801b8a8:	189b      	adds	r3, r3, r2
 801b8aa:	009b      	lsls	r3, r3, #2
 801b8ac:	18cb      	adds	r3, r1, r3
 801b8ae:	3318      	adds	r3, #24
 801b8b0:	681b      	ldr	r3, [r3, #0]
 801b8b2:	2b00      	cmp	r3, #0
 801b8b4:	d11e      	bne.n	801b8f4 <USBD_StdEPReq+0x2a2>
                {
                  USBD_CtlError(pdev, req);
 801b8b6:	683a      	ldr	r2, [r7, #0]
 801b8b8:	687b      	ldr	r3, [r7, #4]
 801b8ba:	0011      	movs	r1, r2
 801b8bc:	0018      	movs	r0, r3
 801b8be:	f000 fc12 	bl	801c0e6 <USBD_CtlError>
                  break;
 801b8c2:	e065      	b.n	801b990 <USBD_StdEPReq+0x33e>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 801b8c4:	230e      	movs	r3, #14
 801b8c6:	18fb      	adds	r3, r7, r3
 801b8c8:	781b      	ldrb	r3, [r3, #0]
 801b8ca:	220f      	movs	r2, #15
 801b8cc:	401a      	ands	r2, r3
 801b8ce:	6878      	ldr	r0, [r7, #4]
 801b8d0:	23ac      	movs	r3, #172	@ 0xac
 801b8d2:	0059      	lsls	r1, r3, #1
 801b8d4:	0013      	movs	r3, r2
 801b8d6:	009b      	lsls	r3, r3, #2
 801b8d8:	189b      	adds	r3, r3, r2
 801b8da:	009b      	lsls	r3, r3, #2
 801b8dc:	18c3      	adds	r3, r0, r3
 801b8de:	185b      	adds	r3, r3, r1
 801b8e0:	681b      	ldr	r3, [r3, #0]
 801b8e2:	2b00      	cmp	r3, #0
 801b8e4:	d106      	bne.n	801b8f4 <USBD_StdEPReq+0x2a2>
                {
                  USBD_CtlError(pdev, req);
 801b8e6:	683a      	ldr	r2, [r7, #0]
 801b8e8:	687b      	ldr	r3, [r7, #4]
 801b8ea:	0011      	movs	r1, r2
 801b8ec:	0018      	movs	r0, r3
 801b8ee:	f000 fbfa 	bl	801c0e6 <USBD_CtlError>
                  break;
 801b8f2:	e04d      	b.n	801b990 <USBD_StdEPReq+0x33e>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801b8f4:	220e      	movs	r2, #14
 801b8f6:	18bb      	adds	r3, r7, r2
 801b8f8:	781b      	ldrb	r3, [r3, #0]
 801b8fa:	b25b      	sxtb	r3, r3
 801b8fc:	2b00      	cmp	r3, #0
 801b8fe:	da0c      	bge.n	801b91a <USBD_StdEPReq+0x2c8>
 801b900:	18bb      	adds	r3, r7, r2
 801b902:	781b      	ldrb	r3, [r3, #0]
 801b904:	227f      	movs	r2, #127	@ 0x7f
 801b906:	401a      	ands	r2, r3
 801b908:	0013      	movs	r3, r2
 801b90a:	009b      	lsls	r3, r3, #2
 801b90c:	189b      	adds	r3, r3, r2
 801b90e:	009b      	lsls	r3, r3, #2
 801b910:	3310      	adds	r3, #16
 801b912:	687a      	ldr	r2, [r7, #4]
 801b914:	18d3      	adds	r3, r2, r3
 801b916:	3304      	adds	r3, #4
 801b918:	e00d      	b.n	801b936 <USBD_StdEPReq+0x2e4>
                    &pdev->ep_out[ep_addr & 0x7FU];
 801b91a:	230e      	movs	r3, #14
 801b91c:	18fb      	adds	r3, r7, r3
 801b91e:	781b      	ldrb	r3, [r3, #0]
 801b920:	227f      	movs	r2, #127	@ 0x7f
 801b922:	401a      	ands	r2, r3
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801b924:	0013      	movs	r3, r2
 801b926:	009b      	lsls	r3, r3, #2
 801b928:	189b      	adds	r3, r3, r2
 801b92a:	009b      	lsls	r3, r3, #2
 801b92c:	3351      	adds	r3, #81	@ 0x51
 801b92e:	33ff      	adds	r3, #255	@ 0xff
 801b930:	687a      	ldr	r2, [r7, #4]
 801b932:	18d3      	adds	r3, r2, r3
 801b934:	3304      	adds	r3, #4
 801b936:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 801b938:	220e      	movs	r2, #14
 801b93a:	18bb      	adds	r3, r7, r2
 801b93c:	781b      	ldrb	r3, [r3, #0]
 801b93e:	2b00      	cmp	r3, #0
 801b940:	d003      	beq.n	801b94a <USBD_StdEPReq+0x2f8>
 801b942:	18bb      	adds	r3, r7, r2
 801b944:	781b      	ldrb	r3, [r3, #0]
 801b946:	2b80      	cmp	r3, #128	@ 0x80
 801b948:	d103      	bne.n	801b952 <USBD_StdEPReq+0x300>
              {
                pep->status = 0x0000U;
 801b94a:	68bb      	ldr	r3, [r7, #8]
 801b94c:	2200      	movs	r2, #0
 801b94e:	601a      	str	r2, [r3, #0]
 801b950:	e010      	b.n	801b974 <USBD_StdEPReq+0x322>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 801b952:	230e      	movs	r3, #14
 801b954:	18fb      	adds	r3, r7, r3
 801b956:	781a      	ldrb	r2, [r3, #0]
 801b958:	687b      	ldr	r3, [r7, #4]
 801b95a:	0011      	movs	r1, r2
 801b95c:	0018      	movs	r0, r3
 801b95e:	f001 f940 	bl	801cbe2 <USBD_LL_IsStallEP>
 801b962:	1e03      	subs	r3, r0, #0
 801b964:	d003      	beq.n	801b96e <USBD_StdEPReq+0x31c>
              {
                pep->status = 0x0001U;
 801b966:	68bb      	ldr	r3, [r7, #8]
 801b968:	2201      	movs	r2, #1
 801b96a:	601a      	str	r2, [r3, #0]
 801b96c:	e002      	b.n	801b974 <USBD_StdEPReq+0x322>
              }
              else
              {
                pep->status = 0x0000U;
 801b96e:	68bb      	ldr	r3, [r7, #8]
 801b970:	2200      	movs	r2, #0
 801b972:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 801b974:	68b9      	ldr	r1, [r7, #8]
 801b976:	687b      	ldr	r3, [r7, #4]
 801b978:	2202      	movs	r2, #2
 801b97a:	0018      	movs	r0, r3
 801b97c:	f000 fc31 	bl	801c1e2 <USBD_CtlSendData>
              break;
 801b980:	e006      	b.n	801b990 <USBD_StdEPReq+0x33e>

            default:
              USBD_CtlError(pdev, req);
 801b982:	683a      	ldr	r2, [r7, #0]
 801b984:	687b      	ldr	r3, [r7, #4]
 801b986:	0011      	movs	r1, r2
 801b988:	0018      	movs	r0, r3
 801b98a:	f000 fbac 	bl	801c0e6 <USBD_CtlError>
              break;
 801b98e:	46c0      	nop			@ (mov r8, r8)
          }
          break;
 801b990:	e006      	b.n	801b9a0 <USBD_StdEPReq+0x34e>

        default:
          USBD_CtlError(pdev, req);
 801b992:	683a      	ldr	r2, [r7, #0]
 801b994:	687b      	ldr	r3, [r7, #4]
 801b996:	0011      	movs	r1, r2
 801b998:	0018      	movs	r0, r3
 801b99a:	f000 fba4 	bl	801c0e6 <USBD_CtlError>
          break;
 801b99e:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 801b9a0:	e006      	b.n	801b9b0 <USBD_StdEPReq+0x35e>

    default:
      USBD_CtlError(pdev, req);
 801b9a2:	683a      	ldr	r2, [r7, #0]
 801b9a4:	687b      	ldr	r3, [r7, #4]
 801b9a6:	0011      	movs	r1, r2
 801b9a8:	0018      	movs	r0, r3
 801b9aa:	f000 fb9c 	bl	801c0e6 <USBD_CtlError>
      break;
 801b9ae:	46c0      	nop			@ (mov r8, r8)
  }

  return ret;
 801b9b0:	230f      	movs	r3, #15
 801b9b2:	18fb      	adds	r3, r7, r3
 801b9b4:	781b      	ldrb	r3, [r3, #0]
}
 801b9b6:	0018      	movs	r0, r3
 801b9b8:	46bd      	mov	sp, r7
 801b9ba:	b004      	add	sp, #16
 801b9bc:	bdb0      	pop	{r4, r5, r7, pc}
	...

0801b9c0 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 801b9c0:	b580      	push	{r7, lr}
 801b9c2:	b084      	sub	sp, #16
 801b9c4:	af00      	add	r7, sp, #0
 801b9c6:	6078      	str	r0, [r7, #4]
 801b9c8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 801b9ca:	2308      	movs	r3, #8
 801b9cc:	18fb      	adds	r3, r7, r3
 801b9ce:	2200      	movs	r2, #0
 801b9d0:	801a      	strh	r2, [r3, #0]
  uint8_t *pbuf = NULL;
 801b9d2:	2300      	movs	r3, #0
 801b9d4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 801b9d6:	230b      	movs	r3, #11
 801b9d8:	18fb      	adds	r3, r7, r3
 801b9da:	2200      	movs	r2, #0
 801b9dc:	701a      	strb	r2, [r3, #0]

  switch (req->wValue >> 8)
 801b9de:	683b      	ldr	r3, [r7, #0]
 801b9e0:	885b      	ldrh	r3, [r3, #2]
 801b9e2:	0a1b      	lsrs	r3, r3, #8
 801b9e4:	b29b      	uxth	r3, r3
 801b9e6:	2b07      	cmp	r3, #7
 801b9e8:	d900      	bls.n	801b9ec <USBD_GetDescriptor+0x2c>
 801b9ea:	e159      	b.n	801bca0 <USBD_GetDescriptor+0x2e0>
 801b9ec:	009a      	lsls	r2, r3, #2
 801b9ee:	4bcb      	ldr	r3, [pc, #812]	@ (801bd1c <USBD_GetDescriptor+0x35c>)
 801b9f0:	18d3      	adds	r3, r2, r3
 801b9f2:	681b      	ldr	r3, [r3, #0]
 801b9f4:	469f      	mov	pc, r3
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 801b9f6:	687a      	ldr	r2, [r7, #4]
 801b9f8:	23ac      	movs	r3, #172	@ 0xac
 801b9fa:	009b      	lsls	r3, r3, #2
 801b9fc:	58d3      	ldr	r3, [r2, r3]
 801b9fe:	681b      	ldr	r3, [r3, #0]
 801ba00:	687a      	ldr	r2, [r7, #4]
 801ba02:	7c12      	ldrb	r2, [r2, #16]
 801ba04:	2108      	movs	r1, #8
 801ba06:	1879      	adds	r1, r7, r1
 801ba08:	0010      	movs	r0, r2
 801ba0a:	4798      	blx	r3
 801ba0c:	0003      	movs	r3, r0
 801ba0e:	60fb      	str	r3, [r7, #12]
      break;
 801ba10:	e153      	b.n	801bcba <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 801ba12:	687b      	ldr	r3, [r7, #4]
 801ba14:	7c1b      	ldrb	r3, [r3, #16]
 801ba16:	2b00      	cmp	r3, #0
 801ba18:	d10f      	bne.n	801ba3a <USBD_GetDescriptor+0x7a>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 801ba1a:	687a      	ldr	r2, [r7, #4]
 801ba1c:	23ad      	movs	r3, #173	@ 0xad
 801ba1e:	009b      	lsls	r3, r3, #2
 801ba20:	58d3      	ldr	r3, [r2, r3]
 801ba22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801ba24:	2208      	movs	r2, #8
 801ba26:	18ba      	adds	r2, r7, r2
 801ba28:	0010      	movs	r0, r2
 801ba2a:	4798      	blx	r3
 801ba2c:	0003      	movs	r3, r0
 801ba2e:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 801ba30:	68fb      	ldr	r3, [r7, #12]
 801ba32:	3301      	adds	r3, #1
 801ba34:	2202      	movs	r2, #2
 801ba36:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 801ba38:	e13f      	b.n	801bcba <USBD_GetDescriptor+0x2fa>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 801ba3a:	687a      	ldr	r2, [r7, #4]
 801ba3c:	23ad      	movs	r3, #173	@ 0xad
 801ba3e:	009b      	lsls	r3, r3, #2
 801ba40:	58d3      	ldr	r3, [r2, r3]
 801ba42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801ba44:	2208      	movs	r2, #8
 801ba46:	18ba      	adds	r2, r7, r2
 801ba48:	0010      	movs	r0, r2
 801ba4a:	4798      	blx	r3
 801ba4c:	0003      	movs	r3, r0
 801ba4e:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 801ba50:	68fb      	ldr	r3, [r7, #12]
 801ba52:	3301      	adds	r3, #1
 801ba54:	2202      	movs	r2, #2
 801ba56:	701a      	strb	r2, [r3, #0]
      break;
 801ba58:	e12f      	b.n	801bcba <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 801ba5a:	683b      	ldr	r3, [r7, #0]
 801ba5c:	885b      	ldrh	r3, [r3, #2]
 801ba5e:	b2db      	uxtb	r3, r3
 801ba60:	2b05      	cmp	r3, #5
 801ba62:	d900      	bls.n	801ba66 <USBD_GetDescriptor+0xa6>
 801ba64:	e0d0      	b.n	801bc08 <USBD_GetDescriptor+0x248>
 801ba66:	009a      	lsls	r2, r3, #2
 801ba68:	4bad      	ldr	r3, [pc, #692]	@ (801bd20 <USBD_GetDescriptor+0x360>)
 801ba6a:	18d3      	adds	r3, r2, r3
 801ba6c:	681b      	ldr	r3, [r3, #0]
 801ba6e:	469f      	mov	pc, r3
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 801ba70:	687a      	ldr	r2, [r7, #4]
 801ba72:	23ac      	movs	r3, #172	@ 0xac
 801ba74:	009b      	lsls	r3, r3, #2
 801ba76:	58d3      	ldr	r3, [r2, r3]
 801ba78:	685b      	ldr	r3, [r3, #4]
 801ba7a:	2b00      	cmp	r3, #0
 801ba7c:	d00d      	beq.n	801ba9a <USBD_GetDescriptor+0xda>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 801ba7e:	687a      	ldr	r2, [r7, #4]
 801ba80:	23ac      	movs	r3, #172	@ 0xac
 801ba82:	009b      	lsls	r3, r3, #2
 801ba84:	58d3      	ldr	r3, [r2, r3]
 801ba86:	685b      	ldr	r3, [r3, #4]
 801ba88:	687a      	ldr	r2, [r7, #4]
 801ba8a:	7c12      	ldrb	r2, [r2, #16]
 801ba8c:	2108      	movs	r1, #8
 801ba8e:	1879      	adds	r1, r7, r1
 801ba90:	0010      	movs	r0, r2
 801ba92:	4798      	blx	r3
 801ba94:	0003      	movs	r3, r0
 801ba96:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801ba98:	e0c3      	b.n	801bc22 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 801ba9a:	683a      	ldr	r2, [r7, #0]
 801ba9c:	687b      	ldr	r3, [r7, #4]
 801ba9e:	0011      	movs	r1, r2
 801baa0:	0018      	movs	r0, r3
 801baa2:	f000 fb20 	bl	801c0e6 <USBD_CtlError>
            err++;
 801baa6:	210b      	movs	r1, #11
 801baa8:	187b      	adds	r3, r7, r1
 801baaa:	781a      	ldrb	r2, [r3, #0]
 801baac:	187b      	adds	r3, r7, r1
 801baae:	3201      	adds	r2, #1
 801bab0:	701a      	strb	r2, [r3, #0]
          break;
 801bab2:	e0b6      	b.n	801bc22 <USBD_GetDescriptor+0x262>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 801bab4:	687a      	ldr	r2, [r7, #4]
 801bab6:	23ac      	movs	r3, #172	@ 0xac
 801bab8:	009b      	lsls	r3, r3, #2
 801baba:	58d3      	ldr	r3, [r2, r3]
 801babc:	689b      	ldr	r3, [r3, #8]
 801babe:	2b00      	cmp	r3, #0
 801bac0:	d00d      	beq.n	801bade <USBD_GetDescriptor+0x11e>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 801bac2:	687a      	ldr	r2, [r7, #4]
 801bac4:	23ac      	movs	r3, #172	@ 0xac
 801bac6:	009b      	lsls	r3, r3, #2
 801bac8:	58d3      	ldr	r3, [r2, r3]
 801baca:	689b      	ldr	r3, [r3, #8]
 801bacc:	687a      	ldr	r2, [r7, #4]
 801bace:	7c12      	ldrb	r2, [r2, #16]
 801bad0:	2108      	movs	r1, #8
 801bad2:	1879      	adds	r1, r7, r1
 801bad4:	0010      	movs	r0, r2
 801bad6:	4798      	blx	r3
 801bad8:	0003      	movs	r3, r0
 801bada:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801badc:	e0a1      	b.n	801bc22 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 801bade:	683a      	ldr	r2, [r7, #0]
 801bae0:	687b      	ldr	r3, [r7, #4]
 801bae2:	0011      	movs	r1, r2
 801bae4:	0018      	movs	r0, r3
 801bae6:	f000 fafe 	bl	801c0e6 <USBD_CtlError>
            err++;
 801baea:	210b      	movs	r1, #11
 801baec:	187b      	adds	r3, r7, r1
 801baee:	781a      	ldrb	r2, [r3, #0]
 801baf0:	187b      	adds	r3, r7, r1
 801baf2:	3201      	adds	r2, #1
 801baf4:	701a      	strb	r2, [r3, #0]
          break;
 801baf6:	e094      	b.n	801bc22 <USBD_GetDescriptor+0x262>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 801baf8:	687a      	ldr	r2, [r7, #4]
 801bafa:	23ac      	movs	r3, #172	@ 0xac
 801bafc:	009b      	lsls	r3, r3, #2
 801bafe:	58d3      	ldr	r3, [r2, r3]
 801bb00:	68db      	ldr	r3, [r3, #12]
 801bb02:	2b00      	cmp	r3, #0
 801bb04:	d00d      	beq.n	801bb22 <USBD_GetDescriptor+0x162>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 801bb06:	687a      	ldr	r2, [r7, #4]
 801bb08:	23ac      	movs	r3, #172	@ 0xac
 801bb0a:	009b      	lsls	r3, r3, #2
 801bb0c:	58d3      	ldr	r3, [r2, r3]
 801bb0e:	68db      	ldr	r3, [r3, #12]
 801bb10:	687a      	ldr	r2, [r7, #4]
 801bb12:	7c12      	ldrb	r2, [r2, #16]
 801bb14:	2108      	movs	r1, #8
 801bb16:	1879      	adds	r1, r7, r1
 801bb18:	0010      	movs	r0, r2
 801bb1a:	4798      	blx	r3
 801bb1c:	0003      	movs	r3, r0
 801bb1e:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801bb20:	e07f      	b.n	801bc22 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 801bb22:	683a      	ldr	r2, [r7, #0]
 801bb24:	687b      	ldr	r3, [r7, #4]
 801bb26:	0011      	movs	r1, r2
 801bb28:	0018      	movs	r0, r3
 801bb2a:	f000 fadc 	bl	801c0e6 <USBD_CtlError>
            err++;
 801bb2e:	210b      	movs	r1, #11
 801bb30:	187b      	adds	r3, r7, r1
 801bb32:	781a      	ldrb	r2, [r3, #0]
 801bb34:	187b      	adds	r3, r7, r1
 801bb36:	3201      	adds	r2, #1
 801bb38:	701a      	strb	r2, [r3, #0]
          break;
 801bb3a:	e072      	b.n	801bc22 <USBD_GetDescriptor+0x262>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 801bb3c:	687a      	ldr	r2, [r7, #4]
 801bb3e:	23ac      	movs	r3, #172	@ 0xac
 801bb40:	009b      	lsls	r3, r3, #2
 801bb42:	58d3      	ldr	r3, [r2, r3]
 801bb44:	691b      	ldr	r3, [r3, #16]
 801bb46:	2b00      	cmp	r3, #0
 801bb48:	d00d      	beq.n	801bb66 <USBD_GetDescriptor+0x1a6>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 801bb4a:	687a      	ldr	r2, [r7, #4]
 801bb4c:	23ac      	movs	r3, #172	@ 0xac
 801bb4e:	009b      	lsls	r3, r3, #2
 801bb50:	58d3      	ldr	r3, [r2, r3]
 801bb52:	691b      	ldr	r3, [r3, #16]
 801bb54:	687a      	ldr	r2, [r7, #4]
 801bb56:	7c12      	ldrb	r2, [r2, #16]
 801bb58:	2108      	movs	r1, #8
 801bb5a:	1879      	adds	r1, r7, r1
 801bb5c:	0010      	movs	r0, r2
 801bb5e:	4798      	blx	r3
 801bb60:	0003      	movs	r3, r0
 801bb62:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801bb64:	e05d      	b.n	801bc22 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 801bb66:	683a      	ldr	r2, [r7, #0]
 801bb68:	687b      	ldr	r3, [r7, #4]
 801bb6a:	0011      	movs	r1, r2
 801bb6c:	0018      	movs	r0, r3
 801bb6e:	f000 faba 	bl	801c0e6 <USBD_CtlError>
            err++;
 801bb72:	210b      	movs	r1, #11
 801bb74:	187b      	adds	r3, r7, r1
 801bb76:	781a      	ldrb	r2, [r3, #0]
 801bb78:	187b      	adds	r3, r7, r1
 801bb7a:	3201      	adds	r2, #1
 801bb7c:	701a      	strb	r2, [r3, #0]
          break;
 801bb7e:	e050      	b.n	801bc22 <USBD_GetDescriptor+0x262>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 801bb80:	687a      	ldr	r2, [r7, #4]
 801bb82:	23ac      	movs	r3, #172	@ 0xac
 801bb84:	009b      	lsls	r3, r3, #2
 801bb86:	58d3      	ldr	r3, [r2, r3]
 801bb88:	695b      	ldr	r3, [r3, #20]
 801bb8a:	2b00      	cmp	r3, #0
 801bb8c:	d00d      	beq.n	801bbaa <USBD_GetDescriptor+0x1ea>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 801bb8e:	687a      	ldr	r2, [r7, #4]
 801bb90:	23ac      	movs	r3, #172	@ 0xac
 801bb92:	009b      	lsls	r3, r3, #2
 801bb94:	58d3      	ldr	r3, [r2, r3]
 801bb96:	695b      	ldr	r3, [r3, #20]
 801bb98:	687a      	ldr	r2, [r7, #4]
 801bb9a:	7c12      	ldrb	r2, [r2, #16]
 801bb9c:	2108      	movs	r1, #8
 801bb9e:	1879      	adds	r1, r7, r1
 801bba0:	0010      	movs	r0, r2
 801bba2:	4798      	blx	r3
 801bba4:	0003      	movs	r3, r0
 801bba6:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801bba8:	e03b      	b.n	801bc22 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 801bbaa:	683a      	ldr	r2, [r7, #0]
 801bbac:	687b      	ldr	r3, [r7, #4]
 801bbae:	0011      	movs	r1, r2
 801bbb0:	0018      	movs	r0, r3
 801bbb2:	f000 fa98 	bl	801c0e6 <USBD_CtlError>
            err++;
 801bbb6:	210b      	movs	r1, #11
 801bbb8:	187b      	adds	r3, r7, r1
 801bbba:	781a      	ldrb	r2, [r3, #0]
 801bbbc:	187b      	adds	r3, r7, r1
 801bbbe:	3201      	adds	r2, #1
 801bbc0:	701a      	strb	r2, [r3, #0]
          break;
 801bbc2:	e02e      	b.n	801bc22 <USBD_GetDescriptor+0x262>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 801bbc4:	687a      	ldr	r2, [r7, #4]
 801bbc6:	23ac      	movs	r3, #172	@ 0xac
 801bbc8:	009b      	lsls	r3, r3, #2
 801bbca:	58d3      	ldr	r3, [r2, r3]
 801bbcc:	699b      	ldr	r3, [r3, #24]
 801bbce:	2b00      	cmp	r3, #0
 801bbd0:	d00d      	beq.n	801bbee <USBD_GetDescriptor+0x22e>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 801bbd2:	687a      	ldr	r2, [r7, #4]
 801bbd4:	23ac      	movs	r3, #172	@ 0xac
 801bbd6:	009b      	lsls	r3, r3, #2
 801bbd8:	58d3      	ldr	r3, [r2, r3]
 801bbda:	699b      	ldr	r3, [r3, #24]
 801bbdc:	687a      	ldr	r2, [r7, #4]
 801bbde:	7c12      	ldrb	r2, [r2, #16]
 801bbe0:	2108      	movs	r1, #8
 801bbe2:	1879      	adds	r1, r7, r1
 801bbe4:	0010      	movs	r0, r2
 801bbe6:	4798      	blx	r3
 801bbe8:	0003      	movs	r3, r0
 801bbea:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801bbec:	e019      	b.n	801bc22 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 801bbee:	683a      	ldr	r2, [r7, #0]
 801bbf0:	687b      	ldr	r3, [r7, #4]
 801bbf2:	0011      	movs	r1, r2
 801bbf4:	0018      	movs	r0, r3
 801bbf6:	f000 fa76 	bl	801c0e6 <USBD_CtlError>
            err++;
 801bbfa:	210b      	movs	r1, #11
 801bbfc:	187b      	adds	r3, r7, r1
 801bbfe:	781a      	ldrb	r2, [r3, #0]
 801bc00:	187b      	adds	r3, r7, r1
 801bc02:	3201      	adds	r2, #1
 801bc04:	701a      	strb	r2, [r3, #0]
          break;
 801bc06:	e00c      	b.n	801bc22 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 801bc08:	683a      	ldr	r2, [r7, #0]
 801bc0a:	687b      	ldr	r3, [r7, #4]
 801bc0c:	0011      	movs	r1, r2
 801bc0e:	0018      	movs	r0, r3
 801bc10:	f000 fa69 	bl	801c0e6 <USBD_CtlError>
          err++;
 801bc14:	210b      	movs	r1, #11
 801bc16:	187b      	adds	r3, r7, r1
 801bc18:	781a      	ldrb	r2, [r3, #0]
 801bc1a:	187b      	adds	r3, r7, r1
 801bc1c:	3201      	adds	r2, #1
 801bc1e:	701a      	strb	r2, [r3, #0]
#endif
      }
      break;
 801bc20:	e04b      	b.n	801bcba <USBD_GetDescriptor+0x2fa>
 801bc22:	e04a      	b.n	801bcba <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 801bc24:	687b      	ldr	r3, [r7, #4]
 801bc26:	7c1b      	ldrb	r3, [r3, #16]
 801bc28:	2b00      	cmp	r3, #0
 801bc2a:	d10b      	bne.n	801bc44 <USBD_GetDescriptor+0x284>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 801bc2c:	687a      	ldr	r2, [r7, #4]
 801bc2e:	23ad      	movs	r3, #173	@ 0xad
 801bc30:	009b      	lsls	r3, r3, #2
 801bc32:	58d3      	ldr	r3, [r2, r3]
 801bc34:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801bc36:	2208      	movs	r2, #8
 801bc38:	18ba      	adds	r2, r7, r2
 801bc3a:	0010      	movs	r0, r2
 801bc3c:	4798      	blx	r3
 801bc3e:	0003      	movs	r3, r0
 801bc40:	60fb      	str	r3, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 801bc42:	e03a      	b.n	801bcba <USBD_GetDescriptor+0x2fa>
        USBD_CtlError(pdev, req);
 801bc44:	683a      	ldr	r2, [r7, #0]
 801bc46:	687b      	ldr	r3, [r7, #4]
 801bc48:	0011      	movs	r1, r2
 801bc4a:	0018      	movs	r0, r3
 801bc4c:	f000 fa4b 	bl	801c0e6 <USBD_CtlError>
        err++;
 801bc50:	210b      	movs	r1, #11
 801bc52:	187b      	adds	r3, r7, r1
 801bc54:	781a      	ldrb	r2, [r3, #0]
 801bc56:	187b      	adds	r3, r7, r1
 801bc58:	3201      	adds	r2, #1
 801bc5a:	701a      	strb	r2, [r3, #0]
      break;
 801bc5c:	e02d      	b.n	801bcba <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 801bc5e:	687b      	ldr	r3, [r7, #4]
 801bc60:	7c1b      	ldrb	r3, [r3, #16]
 801bc62:	2b00      	cmp	r3, #0
 801bc64:	d10f      	bne.n	801bc86 <USBD_GetDescriptor+0x2c6>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 801bc66:	687a      	ldr	r2, [r7, #4]
 801bc68:	23ad      	movs	r3, #173	@ 0xad
 801bc6a:	009b      	lsls	r3, r3, #2
 801bc6c:	58d3      	ldr	r3, [r2, r3]
 801bc6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801bc70:	2208      	movs	r2, #8
 801bc72:	18ba      	adds	r2, r7, r2
 801bc74:	0010      	movs	r0, r2
 801bc76:	4798      	blx	r3
 801bc78:	0003      	movs	r3, r0
 801bc7a:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 801bc7c:	68fb      	ldr	r3, [r7, #12]
 801bc7e:	3301      	adds	r3, #1
 801bc80:	2207      	movs	r2, #7
 801bc82:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 801bc84:	e019      	b.n	801bcba <USBD_GetDescriptor+0x2fa>
        USBD_CtlError(pdev, req);
 801bc86:	683a      	ldr	r2, [r7, #0]
 801bc88:	687b      	ldr	r3, [r7, #4]
 801bc8a:	0011      	movs	r1, r2
 801bc8c:	0018      	movs	r0, r3
 801bc8e:	f000 fa2a 	bl	801c0e6 <USBD_CtlError>
        err++;
 801bc92:	210b      	movs	r1, #11
 801bc94:	187b      	adds	r3, r7, r1
 801bc96:	781a      	ldrb	r2, [r3, #0]
 801bc98:	187b      	adds	r3, r7, r1
 801bc9a:	3201      	adds	r2, #1
 801bc9c:	701a      	strb	r2, [r3, #0]
      break;
 801bc9e:	e00c      	b.n	801bcba <USBD_GetDescriptor+0x2fa>

    default:
      USBD_CtlError(pdev, req);
 801bca0:	683a      	ldr	r2, [r7, #0]
 801bca2:	687b      	ldr	r3, [r7, #4]
 801bca4:	0011      	movs	r1, r2
 801bca6:	0018      	movs	r0, r3
 801bca8:	f000 fa1d 	bl	801c0e6 <USBD_CtlError>
      err++;
 801bcac:	210b      	movs	r1, #11
 801bcae:	187b      	adds	r3, r7, r1
 801bcb0:	781a      	ldrb	r2, [r3, #0]
 801bcb2:	187b      	adds	r3, r7, r1
 801bcb4:	3201      	adds	r2, #1
 801bcb6:	701a      	strb	r2, [r3, #0]
      break;
 801bcb8:	46c0      	nop			@ (mov r8, r8)
  }

  if (err != 0U)
 801bcba:	230b      	movs	r3, #11
 801bcbc:	18fb      	adds	r3, r7, r3
 801bcbe:	781b      	ldrb	r3, [r3, #0]
 801bcc0:	2b00      	cmp	r3, #0
 801bcc2:	d127      	bne.n	801bd14 <USBD_GetDescriptor+0x354>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 801bcc4:	2108      	movs	r1, #8
 801bcc6:	187b      	adds	r3, r7, r1
 801bcc8:	881b      	ldrh	r3, [r3, #0]
 801bcca:	2b00      	cmp	r3, #0
 801bccc:	d019      	beq.n	801bd02 <USBD_GetDescriptor+0x342>
 801bcce:	683b      	ldr	r3, [r7, #0]
 801bcd0:	88db      	ldrh	r3, [r3, #6]
 801bcd2:	2b00      	cmp	r3, #0
 801bcd4:	d015      	beq.n	801bd02 <USBD_GetDescriptor+0x342>
    {
      len = MIN(len, req->wLength);
 801bcd6:	683b      	ldr	r3, [r7, #0]
 801bcd8:	88da      	ldrh	r2, [r3, #6]
 801bcda:	187b      	adds	r3, r7, r1
 801bcdc:	881b      	ldrh	r3, [r3, #0]
 801bcde:	1c18      	adds	r0, r3, #0
 801bce0:	1c11      	adds	r1, r2, #0
 801bce2:	b28a      	uxth	r2, r1
 801bce4:	b283      	uxth	r3, r0
 801bce6:	429a      	cmp	r2, r3
 801bce8:	d900      	bls.n	801bcec <USBD_GetDescriptor+0x32c>
 801bcea:	1c01      	adds	r1, r0, #0
 801bcec:	b28a      	uxth	r2, r1
 801bcee:	2108      	movs	r1, #8
 801bcf0:	187b      	adds	r3, r7, r1
 801bcf2:	801a      	strh	r2, [r3, #0]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 801bcf4:	187b      	adds	r3, r7, r1
 801bcf6:	881a      	ldrh	r2, [r3, #0]
 801bcf8:	68f9      	ldr	r1, [r7, #12]
 801bcfa:	687b      	ldr	r3, [r7, #4]
 801bcfc:	0018      	movs	r0, r3
 801bcfe:	f000 fa70 	bl	801c1e2 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 801bd02:	683b      	ldr	r3, [r7, #0]
 801bd04:	88db      	ldrh	r3, [r3, #6]
 801bd06:	2b00      	cmp	r3, #0
 801bd08:	d105      	bne.n	801bd16 <USBD_GetDescriptor+0x356>
    {
      (void)USBD_CtlSendStatus(pdev);
 801bd0a:	687b      	ldr	r3, [r7, #4]
 801bd0c:	0018      	movs	r0, r3
 801bd0e:	f000 fad2 	bl	801c2b6 <USBD_CtlSendStatus>
 801bd12:	e000      	b.n	801bd16 <USBD_GetDescriptor+0x356>
    return;
 801bd14:	46c0      	nop			@ (mov r8, r8)
    }
  }
}
 801bd16:	46bd      	mov	sp, r7
 801bd18:	b004      	add	sp, #16
 801bd1a:	bd80      	pop	{r7, pc}
 801bd1c:	08024b00 	.word	0x08024b00
 801bd20:	08024b20 	.word	0x08024b20

0801bd24 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 801bd24:	b590      	push	{r4, r7, lr}
 801bd26:	b085      	sub	sp, #20
 801bd28:	af00      	add	r7, sp, #0
 801bd2a:	6078      	str	r0, [r7, #4]
 801bd2c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 801bd2e:	683b      	ldr	r3, [r7, #0]
 801bd30:	889b      	ldrh	r3, [r3, #4]
 801bd32:	2b00      	cmp	r3, #0
 801bd34:	d13d      	bne.n	801bdb2 <USBD_SetAddress+0x8e>
 801bd36:	683b      	ldr	r3, [r7, #0]
 801bd38:	88db      	ldrh	r3, [r3, #6]
 801bd3a:	2b00      	cmp	r3, #0
 801bd3c:	d139      	bne.n	801bdb2 <USBD_SetAddress+0x8e>
 801bd3e:	683b      	ldr	r3, [r7, #0]
 801bd40:	885b      	ldrh	r3, [r3, #2]
 801bd42:	2b7f      	cmp	r3, #127	@ 0x7f
 801bd44:	d835      	bhi.n	801bdb2 <USBD_SetAddress+0x8e>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 801bd46:	683b      	ldr	r3, [r7, #0]
 801bd48:	885b      	ldrh	r3, [r3, #2]
 801bd4a:	b2da      	uxtb	r2, r3
 801bd4c:	230f      	movs	r3, #15
 801bd4e:	18fb      	adds	r3, r7, r3
 801bd50:	217f      	movs	r1, #127	@ 0x7f
 801bd52:	400a      	ands	r2, r1
 801bd54:	701a      	strb	r2, [r3, #0]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801bd56:	687a      	ldr	r2, [r7, #4]
 801bd58:	23a7      	movs	r3, #167	@ 0xa7
 801bd5a:	009b      	lsls	r3, r3, #2
 801bd5c:	5cd3      	ldrb	r3, [r2, r3]
 801bd5e:	2b03      	cmp	r3, #3
 801bd60:	d106      	bne.n	801bd70 <USBD_SetAddress+0x4c>
    {
      USBD_CtlError(pdev, req);
 801bd62:	683a      	ldr	r2, [r7, #0]
 801bd64:	687b      	ldr	r3, [r7, #4]
 801bd66:	0011      	movs	r1, r2
 801bd68:	0018      	movs	r0, r3
 801bd6a:	f000 f9bc 	bl	801c0e6 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801bd6e:	e027      	b.n	801bdc0 <USBD_SetAddress+0x9c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 801bd70:	687b      	ldr	r3, [r7, #4]
 801bd72:	240f      	movs	r4, #15
 801bd74:	193a      	adds	r2, r7, r4
 801bd76:	4914      	ldr	r1, [pc, #80]	@ (801bdc8 <USBD_SetAddress+0xa4>)
 801bd78:	7812      	ldrb	r2, [r2, #0]
 801bd7a:	545a      	strb	r2, [r3, r1]
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 801bd7c:	193b      	adds	r3, r7, r4
 801bd7e:	781a      	ldrb	r2, [r3, #0]
 801bd80:	687b      	ldr	r3, [r7, #4]
 801bd82:	0011      	movs	r1, r2
 801bd84:	0018      	movs	r0, r3
 801bd86:	f000 ff5d 	bl	801cc44 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 801bd8a:	687b      	ldr	r3, [r7, #4]
 801bd8c:	0018      	movs	r0, r3
 801bd8e:	f000 fa92 	bl	801c2b6 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 801bd92:	193b      	adds	r3, r7, r4
 801bd94:	781b      	ldrb	r3, [r3, #0]
 801bd96:	2b00      	cmp	r3, #0
 801bd98:	d005      	beq.n	801bda6 <USBD_SetAddress+0x82>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 801bd9a:	687a      	ldr	r2, [r7, #4]
 801bd9c:	23a7      	movs	r3, #167	@ 0xa7
 801bd9e:	009b      	lsls	r3, r3, #2
 801bda0:	2102      	movs	r1, #2
 801bda2:	54d1      	strb	r1, [r2, r3]
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801bda4:	e00c      	b.n	801bdc0 <USBD_SetAddress+0x9c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 801bda6:	687a      	ldr	r2, [r7, #4]
 801bda8:	23a7      	movs	r3, #167	@ 0xa7
 801bdaa:	009b      	lsls	r3, r3, #2
 801bdac:	2101      	movs	r1, #1
 801bdae:	54d1      	strb	r1, [r2, r3]
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801bdb0:	e006      	b.n	801bdc0 <USBD_SetAddress+0x9c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 801bdb2:	683a      	ldr	r2, [r7, #0]
 801bdb4:	687b      	ldr	r3, [r7, #4]
 801bdb6:	0011      	movs	r1, r2
 801bdb8:	0018      	movs	r0, r3
 801bdba:	f000 f994 	bl	801c0e6 <USBD_CtlError>
  }
}
 801bdbe:	46c0      	nop			@ (mov r8, r8)
 801bdc0:	46c0      	nop			@ (mov r8, r8)
 801bdc2:	46bd      	mov	sp, r7
 801bdc4:	b005      	add	sp, #20
 801bdc6:	bd90      	pop	{r4, r7, pc}
 801bdc8:	0000029e 	.word	0x0000029e

0801bdcc <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801bdcc:	b580      	push	{r7, lr}
 801bdce:	b082      	sub	sp, #8
 801bdd0:	af00      	add	r7, sp, #0
 801bdd2:	6078      	str	r0, [r7, #4]
 801bdd4:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 801bdd6:	683b      	ldr	r3, [r7, #0]
 801bdd8:	885b      	ldrh	r3, [r3, #2]
 801bdda:	b2da      	uxtb	r2, r3
 801bddc:	4b4c      	ldr	r3, [pc, #304]	@ (801bf10 <USBD_SetConfig+0x144>)
 801bdde:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 801bde0:	4b4b      	ldr	r3, [pc, #300]	@ (801bf10 <USBD_SetConfig+0x144>)
 801bde2:	781b      	ldrb	r3, [r3, #0]
 801bde4:	2b01      	cmp	r3, #1
 801bde6:	d906      	bls.n	801bdf6 <USBD_SetConfig+0x2a>
  {
    USBD_CtlError(pdev, req);
 801bde8:	683a      	ldr	r2, [r7, #0]
 801bdea:	687b      	ldr	r3, [r7, #4]
 801bdec:	0011      	movs	r1, r2
 801bdee:	0018      	movs	r0, r3
 801bdf0:	f000 f979 	bl	801c0e6 <USBD_CtlError>
 801bdf4:	e088      	b.n	801bf08 <USBD_SetConfig+0x13c>
  }
  else
  {
    switch (pdev->dev_state)
 801bdf6:	687a      	ldr	r2, [r7, #4]
 801bdf8:	23a7      	movs	r3, #167	@ 0xa7
 801bdfa:	009b      	lsls	r3, r3, #2
 801bdfc:	5cd3      	ldrb	r3, [r2, r3]
 801bdfe:	2b02      	cmp	r3, #2
 801be00:	d002      	beq.n	801be08 <USBD_SetConfig+0x3c>
 801be02:	2b03      	cmp	r3, #3
 801be04:	d029      	beq.n	801be5a <USBD_SetConfig+0x8e>
 801be06:	e071      	b.n	801beec <USBD_SetConfig+0x120>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 801be08:	4b41      	ldr	r3, [pc, #260]	@ (801bf10 <USBD_SetConfig+0x144>)
 801be0a:	781b      	ldrb	r3, [r3, #0]
 801be0c:	2b00      	cmp	r3, #0
 801be0e:	d01f      	beq.n	801be50 <USBD_SetConfig+0x84>
        {
          pdev->dev_config = cfgidx;
 801be10:	4b3f      	ldr	r3, [pc, #252]	@ (801bf10 <USBD_SetConfig+0x144>)
 801be12:	781b      	ldrb	r3, [r3, #0]
 801be14:	001a      	movs	r2, r3
 801be16:	687b      	ldr	r3, [r7, #4]
 801be18:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 801be1a:	687a      	ldr	r2, [r7, #4]
 801be1c:	23a7      	movs	r3, #167	@ 0xa7
 801be1e:	009b      	lsls	r3, r3, #2
 801be20:	2103      	movs	r1, #3
 801be22:	54d1      	strb	r1, [r2, r3]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 801be24:	4b3a      	ldr	r3, [pc, #232]	@ (801bf10 <USBD_SetConfig+0x144>)
 801be26:	781a      	ldrb	r2, [r3, #0]
 801be28:	687b      	ldr	r3, [r7, #4]
 801be2a:	0011      	movs	r1, r2
 801be2c:	0018      	movs	r0, r3
 801be2e:	f7ff f8c6 	bl	801afbe <USBD_SetClassConfig>
 801be32:	0003      	movs	r3, r0
 801be34:	2b02      	cmp	r3, #2
 801be36:	d106      	bne.n	801be46 <USBD_SetConfig+0x7a>
          {
            USBD_CtlError(pdev, req);
 801be38:	683a      	ldr	r2, [r7, #0]
 801be3a:	687b      	ldr	r3, [r7, #4]
 801be3c:	0011      	movs	r1, r2
 801be3e:	0018      	movs	r0, r3
 801be40:	f000 f951 	bl	801c0e6 <USBD_CtlError>
            return;
 801be44:	e060      	b.n	801bf08 <USBD_SetConfig+0x13c>
          }
          USBD_CtlSendStatus(pdev);
 801be46:	687b      	ldr	r3, [r7, #4]
 801be48:	0018      	movs	r0, r3
 801be4a:	f000 fa34 	bl	801c2b6 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 801be4e:	e05b      	b.n	801bf08 <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 801be50:	687b      	ldr	r3, [r7, #4]
 801be52:	0018      	movs	r0, r3
 801be54:	f000 fa2f 	bl	801c2b6 <USBD_CtlSendStatus>
        break;
 801be58:	e056      	b.n	801bf08 <USBD_SetConfig+0x13c>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 801be5a:	4b2d      	ldr	r3, [pc, #180]	@ (801bf10 <USBD_SetConfig+0x144>)
 801be5c:	781b      	ldrb	r3, [r3, #0]
 801be5e:	2b00      	cmp	r3, #0
 801be60:	d115      	bne.n	801be8e <USBD_SetConfig+0xc2>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 801be62:	687a      	ldr	r2, [r7, #4]
 801be64:	23a7      	movs	r3, #167	@ 0xa7
 801be66:	009b      	lsls	r3, r3, #2
 801be68:	2102      	movs	r1, #2
 801be6a:	54d1      	strb	r1, [r2, r3]
          pdev->dev_config = cfgidx;
 801be6c:	4b28      	ldr	r3, [pc, #160]	@ (801bf10 <USBD_SetConfig+0x144>)
 801be6e:	781b      	ldrb	r3, [r3, #0]
 801be70:	001a      	movs	r2, r3
 801be72:	687b      	ldr	r3, [r7, #4]
 801be74:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 801be76:	4b26      	ldr	r3, [pc, #152]	@ (801bf10 <USBD_SetConfig+0x144>)
 801be78:	781a      	ldrb	r2, [r3, #0]
 801be7a:	687b      	ldr	r3, [r7, #4]
 801be7c:	0011      	movs	r1, r2
 801be7e:	0018      	movs	r0, r3
 801be80:	f7ff f8c4 	bl	801b00c <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 801be84:	687b      	ldr	r3, [r7, #4]
 801be86:	0018      	movs	r0, r3
 801be88:	f000 fa15 	bl	801c2b6 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 801be8c:	e03c      	b.n	801bf08 <USBD_SetConfig+0x13c>
        else if (cfgidx != pdev->dev_config)
 801be8e:	4b20      	ldr	r3, [pc, #128]	@ (801bf10 <USBD_SetConfig+0x144>)
 801be90:	781b      	ldrb	r3, [r3, #0]
 801be92:	001a      	movs	r2, r3
 801be94:	687b      	ldr	r3, [r7, #4]
 801be96:	685b      	ldr	r3, [r3, #4]
 801be98:	429a      	cmp	r2, r3
 801be9a:	d022      	beq.n	801bee2 <USBD_SetConfig+0x116>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 801be9c:	687b      	ldr	r3, [r7, #4]
 801be9e:	685b      	ldr	r3, [r3, #4]
 801bea0:	b2da      	uxtb	r2, r3
 801bea2:	687b      	ldr	r3, [r7, #4]
 801bea4:	0011      	movs	r1, r2
 801bea6:	0018      	movs	r0, r3
 801bea8:	f7ff f8b0 	bl	801b00c <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 801beac:	4b18      	ldr	r3, [pc, #96]	@ (801bf10 <USBD_SetConfig+0x144>)
 801beae:	781b      	ldrb	r3, [r3, #0]
 801beb0:	001a      	movs	r2, r3
 801beb2:	687b      	ldr	r3, [r7, #4]
 801beb4:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 801beb6:	4b16      	ldr	r3, [pc, #88]	@ (801bf10 <USBD_SetConfig+0x144>)
 801beb8:	781a      	ldrb	r2, [r3, #0]
 801beba:	687b      	ldr	r3, [r7, #4]
 801bebc:	0011      	movs	r1, r2
 801bebe:	0018      	movs	r0, r3
 801bec0:	f7ff f87d 	bl	801afbe <USBD_SetClassConfig>
 801bec4:	0003      	movs	r3, r0
 801bec6:	2b02      	cmp	r3, #2
 801bec8:	d106      	bne.n	801bed8 <USBD_SetConfig+0x10c>
            USBD_CtlError(pdev, req);
 801beca:	683a      	ldr	r2, [r7, #0]
 801becc:	687b      	ldr	r3, [r7, #4]
 801bece:	0011      	movs	r1, r2
 801bed0:	0018      	movs	r0, r3
 801bed2:	f000 f908 	bl	801c0e6 <USBD_CtlError>
            return;
 801bed6:	e017      	b.n	801bf08 <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 801bed8:	687b      	ldr	r3, [r7, #4]
 801beda:	0018      	movs	r0, r3
 801bedc:	f000 f9eb 	bl	801c2b6 <USBD_CtlSendStatus>
        break;
 801bee0:	e012      	b.n	801bf08 <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 801bee2:	687b      	ldr	r3, [r7, #4]
 801bee4:	0018      	movs	r0, r3
 801bee6:	f000 f9e6 	bl	801c2b6 <USBD_CtlSendStatus>
        break;
 801beea:	e00d      	b.n	801bf08 <USBD_SetConfig+0x13c>

      default:
        USBD_CtlError(pdev, req);
 801beec:	683a      	ldr	r2, [r7, #0]
 801beee:	687b      	ldr	r3, [r7, #4]
 801bef0:	0011      	movs	r1, r2
 801bef2:	0018      	movs	r0, r3
 801bef4:	f000 f8f7 	bl	801c0e6 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 801bef8:	4b05      	ldr	r3, [pc, #20]	@ (801bf10 <USBD_SetConfig+0x144>)
 801befa:	781a      	ldrb	r2, [r3, #0]
 801befc:	687b      	ldr	r3, [r7, #4]
 801befe:	0011      	movs	r1, r2
 801bf00:	0018      	movs	r0, r3
 801bf02:	f7ff f883 	bl	801b00c <USBD_ClrClassConfig>
        break;
 801bf06:	46c0      	nop			@ (mov r8, r8)
    }
  }
}
 801bf08:	46bd      	mov	sp, r7
 801bf0a:	b002      	add	sp, #8
 801bf0c:	bd80      	pop	{r7, pc}
 801bf0e:	46c0      	nop			@ (mov r8, r8)
 801bf10:	200025b0 	.word	0x200025b0

0801bf14 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801bf14:	b580      	push	{r7, lr}
 801bf16:	b082      	sub	sp, #8
 801bf18:	af00      	add	r7, sp, #0
 801bf1a:	6078      	str	r0, [r7, #4]
 801bf1c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 801bf1e:	683b      	ldr	r3, [r7, #0]
 801bf20:	88db      	ldrh	r3, [r3, #6]
 801bf22:	2b01      	cmp	r3, #1
 801bf24:	d006      	beq.n	801bf34 <USBD_GetConfig+0x20>
  {
    USBD_CtlError(pdev, req);
 801bf26:	683a      	ldr	r2, [r7, #0]
 801bf28:	687b      	ldr	r3, [r7, #4]
 801bf2a:	0011      	movs	r1, r2
 801bf2c:	0018      	movs	r0, r3
 801bf2e:	f000 f8da 	bl	801c0e6 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 801bf32:	e026      	b.n	801bf82 <USBD_GetConfig+0x6e>
    switch (pdev->dev_state)
 801bf34:	687a      	ldr	r2, [r7, #4]
 801bf36:	23a7      	movs	r3, #167	@ 0xa7
 801bf38:	009b      	lsls	r3, r3, #2
 801bf3a:	5cd3      	ldrb	r3, [r2, r3]
 801bf3c:	2b02      	cmp	r3, #2
 801bf3e:	dc02      	bgt.n	801bf46 <USBD_GetConfig+0x32>
 801bf40:	2b00      	cmp	r3, #0
 801bf42:	dc03      	bgt.n	801bf4c <USBD_GetConfig+0x38>
 801bf44:	e016      	b.n	801bf74 <USBD_GetConfig+0x60>
 801bf46:	2b03      	cmp	r3, #3
 801bf48:	d00c      	beq.n	801bf64 <USBD_GetConfig+0x50>
 801bf4a:	e013      	b.n	801bf74 <USBD_GetConfig+0x60>
        pdev->dev_default_config = 0U;
 801bf4c:	687b      	ldr	r3, [r7, #4]
 801bf4e:	2200      	movs	r2, #0
 801bf50:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 801bf52:	687b      	ldr	r3, [r7, #4]
 801bf54:	3308      	adds	r3, #8
 801bf56:	0019      	movs	r1, r3
 801bf58:	687b      	ldr	r3, [r7, #4]
 801bf5a:	2201      	movs	r2, #1
 801bf5c:	0018      	movs	r0, r3
 801bf5e:	f000 f940 	bl	801c1e2 <USBD_CtlSendData>
        break;
 801bf62:	e00e      	b.n	801bf82 <USBD_GetConfig+0x6e>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 801bf64:	687b      	ldr	r3, [r7, #4]
 801bf66:	1d19      	adds	r1, r3, #4
 801bf68:	687b      	ldr	r3, [r7, #4]
 801bf6a:	2201      	movs	r2, #1
 801bf6c:	0018      	movs	r0, r3
 801bf6e:	f000 f938 	bl	801c1e2 <USBD_CtlSendData>
        break;
 801bf72:	e006      	b.n	801bf82 <USBD_GetConfig+0x6e>
        USBD_CtlError(pdev, req);
 801bf74:	683a      	ldr	r2, [r7, #0]
 801bf76:	687b      	ldr	r3, [r7, #4]
 801bf78:	0011      	movs	r1, r2
 801bf7a:	0018      	movs	r0, r3
 801bf7c:	f000 f8b3 	bl	801c0e6 <USBD_CtlError>
        break;
 801bf80:	46c0      	nop			@ (mov r8, r8)
}
 801bf82:	46c0      	nop			@ (mov r8, r8)
 801bf84:	46bd      	mov	sp, r7
 801bf86:	b002      	add	sp, #8
 801bf88:	bd80      	pop	{r7, pc}

0801bf8a <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801bf8a:	b580      	push	{r7, lr}
 801bf8c:	b082      	sub	sp, #8
 801bf8e:	af00      	add	r7, sp, #0
 801bf90:	6078      	str	r0, [r7, #4]
 801bf92:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 801bf94:	687a      	ldr	r2, [r7, #4]
 801bf96:	23a7      	movs	r3, #167	@ 0xa7
 801bf98:	009b      	lsls	r3, r3, #2
 801bf9a:	5cd3      	ldrb	r3, [r2, r3]
 801bf9c:	3b01      	subs	r3, #1
 801bf9e:	2b02      	cmp	r3, #2
 801bfa0:	d822      	bhi.n	801bfe8 <USBD_GetStatus+0x5e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 801bfa2:	683b      	ldr	r3, [r7, #0]
 801bfa4:	88db      	ldrh	r3, [r3, #6]
 801bfa6:	2b02      	cmp	r3, #2
 801bfa8:	d006      	beq.n	801bfb8 <USBD_GetStatus+0x2e>
      {
        USBD_CtlError(pdev, req);
 801bfaa:	683a      	ldr	r2, [r7, #0]
 801bfac:	687b      	ldr	r3, [r7, #4]
 801bfae:	0011      	movs	r1, r2
 801bfb0:	0018      	movs	r0, r3
 801bfb2:	f000 f898 	bl	801c0e6 <USBD_CtlError>
        break;
 801bfb6:	e01e      	b.n	801bff6 <USBD_GetStatus+0x6c>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 801bfb8:	687b      	ldr	r3, [r7, #4]
 801bfba:	2201      	movs	r2, #1
 801bfbc:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 801bfbe:	687a      	ldr	r2, [r7, #4]
 801bfc0:	23a9      	movs	r3, #169	@ 0xa9
 801bfc2:	009b      	lsls	r3, r3, #2
 801bfc4:	58d3      	ldr	r3, [r2, r3]
 801bfc6:	2b00      	cmp	r3, #0
 801bfc8:	d005      	beq.n	801bfd6 <USBD_GetStatus+0x4c>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 801bfca:	687b      	ldr	r3, [r7, #4]
 801bfcc:	68db      	ldr	r3, [r3, #12]
 801bfce:	2202      	movs	r2, #2
 801bfd0:	431a      	orrs	r2, r3
 801bfd2:	687b      	ldr	r3, [r7, #4]
 801bfd4:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 801bfd6:	687b      	ldr	r3, [r7, #4]
 801bfd8:	330c      	adds	r3, #12
 801bfda:	0019      	movs	r1, r3
 801bfdc:	687b      	ldr	r3, [r7, #4]
 801bfde:	2202      	movs	r2, #2
 801bfe0:	0018      	movs	r0, r3
 801bfe2:	f000 f8fe 	bl	801c1e2 <USBD_CtlSendData>
      break;
 801bfe6:	e006      	b.n	801bff6 <USBD_GetStatus+0x6c>

    default:
      USBD_CtlError(pdev, req);
 801bfe8:	683a      	ldr	r2, [r7, #0]
 801bfea:	687b      	ldr	r3, [r7, #4]
 801bfec:	0011      	movs	r1, r2
 801bfee:	0018      	movs	r0, r3
 801bff0:	f000 f879 	bl	801c0e6 <USBD_CtlError>
      break;
 801bff4:	46c0      	nop			@ (mov r8, r8)
  }
}
 801bff6:	46c0      	nop			@ (mov r8, r8)
 801bff8:	46bd      	mov	sp, r7
 801bffa:	b002      	add	sp, #8
 801bffc:	bd80      	pop	{r7, pc}

0801bffe <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 801bffe:	b580      	push	{r7, lr}
 801c000:	b082      	sub	sp, #8
 801c002:	af00      	add	r7, sp, #0
 801c004:	6078      	str	r0, [r7, #4]
 801c006:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 801c008:	683b      	ldr	r3, [r7, #0]
 801c00a:	885b      	ldrh	r3, [r3, #2]
 801c00c:	2b01      	cmp	r3, #1
 801c00e:	d108      	bne.n	801c022 <USBD_SetFeature+0x24>
  {
    pdev->dev_remote_wakeup = 1U;
 801c010:	687a      	ldr	r2, [r7, #4]
 801c012:	23a9      	movs	r3, #169	@ 0xa9
 801c014:	009b      	lsls	r3, r3, #2
 801c016:	2101      	movs	r1, #1
 801c018:	50d1      	str	r1, [r2, r3]
    USBD_CtlSendStatus(pdev);
 801c01a:	687b      	ldr	r3, [r7, #4]
 801c01c:	0018      	movs	r0, r3
 801c01e:	f000 f94a 	bl	801c2b6 <USBD_CtlSendStatus>
  }
}
 801c022:	46c0      	nop			@ (mov r8, r8)
 801c024:	46bd      	mov	sp, r7
 801c026:	b002      	add	sp, #8
 801c028:	bd80      	pop	{r7, pc}

0801c02a <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 801c02a:	b580      	push	{r7, lr}
 801c02c:	b082      	sub	sp, #8
 801c02e:	af00      	add	r7, sp, #0
 801c030:	6078      	str	r0, [r7, #4]
 801c032:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 801c034:	687a      	ldr	r2, [r7, #4]
 801c036:	23a7      	movs	r3, #167	@ 0xa7
 801c038:	009b      	lsls	r3, r3, #2
 801c03a:	5cd3      	ldrb	r3, [r2, r3]
 801c03c:	3b01      	subs	r3, #1
 801c03e:	2b02      	cmp	r3, #2
 801c040:	d80d      	bhi.n	801c05e <USBD_ClrFeature+0x34>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 801c042:	683b      	ldr	r3, [r7, #0]
 801c044:	885b      	ldrh	r3, [r3, #2]
 801c046:	2b01      	cmp	r3, #1
 801c048:	d110      	bne.n	801c06c <USBD_ClrFeature+0x42>
      {
        pdev->dev_remote_wakeup = 0U;
 801c04a:	687a      	ldr	r2, [r7, #4]
 801c04c:	23a9      	movs	r3, #169	@ 0xa9
 801c04e:	009b      	lsls	r3, r3, #2
 801c050:	2100      	movs	r1, #0
 801c052:	50d1      	str	r1, [r2, r3]
        USBD_CtlSendStatus(pdev);
 801c054:	687b      	ldr	r3, [r7, #4]
 801c056:	0018      	movs	r0, r3
 801c058:	f000 f92d 	bl	801c2b6 <USBD_CtlSendStatus>
      }
      break;
 801c05c:	e006      	b.n	801c06c <USBD_ClrFeature+0x42>

    default:
      USBD_CtlError(pdev, req);
 801c05e:	683a      	ldr	r2, [r7, #0]
 801c060:	687b      	ldr	r3, [r7, #4]
 801c062:	0011      	movs	r1, r2
 801c064:	0018      	movs	r0, r3
 801c066:	f000 f83e 	bl	801c0e6 <USBD_CtlError>
      break;
 801c06a:	e000      	b.n	801c06e <USBD_ClrFeature+0x44>
      break;
 801c06c:	46c0      	nop			@ (mov r8, r8)
  }
}
 801c06e:	46c0      	nop			@ (mov r8, r8)
 801c070:	46bd      	mov	sp, r7
 801c072:	b002      	add	sp, #8
 801c074:	bd80      	pop	{r7, pc}

0801c076 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 801c076:	b580      	push	{r7, lr}
 801c078:	b082      	sub	sp, #8
 801c07a:	af00      	add	r7, sp, #0
 801c07c:	6078      	str	r0, [r7, #4]
 801c07e:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 801c080:	683b      	ldr	r3, [r7, #0]
 801c082:	781a      	ldrb	r2, [r3, #0]
 801c084:	687b      	ldr	r3, [r7, #4]
 801c086:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 801c088:	683b      	ldr	r3, [r7, #0]
 801c08a:	785a      	ldrb	r2, [r3, #1]
 801c08c:	687b      	ldr	r3, [r7, #4]
 801c08e:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 801c090:	683b      	ldr	r3, [r7, #0]
 801c092:	3302      	adds	r3, #2
 801c094:	781b      	ldrb	r3, [r3, #0]
 801c096:	001a      	movs	r2, r3
 801c098:	683b      	ldr	r3, [r7, #0]
 801c09a:	3303      	adds	r3, #3
 801c09c:	781b      	ldrb	r3, [r3, #0]
 801c09e:	021b      	lsls	r3, r3, #8
 801c0a0:	b29b      	uxth	r3, r3
 801c0a2:	18d3      	adds	r3, r2, r3
 801c0a4:	b29a      	uxth	r2, r3
 801c0a6:	687b      	ldr	r3, [r7, #4]
 801c0a8:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 801c0aa:	683b      	ldr	r3, [r7, #0]
 801c0ac:	3304      	adds	r3, #4
 801c0ae:	781b      	ldrb	r3, [r3, #0]
 801c0b0:	001a      	movs	r2, r3
 801c0b2:	683b      	ldr	r3, [r7, #0]
 801c0b4:	3305      	adds	r3, #5
 801c0b6:	781b      	ldrb	r3, [r3, #0]
 801c0b8:	021b      	lsls	r3, r3, #8
 801c0ba:	b29b      	uxth	r3, r3
 801c0bc:	18d3      	adds	r3, r2, r3
 801c0be:	b29a      	uxth	r2, r3
 801c0c0:	687b      	ldr	r3, [r7, #4]
 801c0c2:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 801c0c4:	683b      	ldr	r3, [r7, #0]
 801c0c6:	3306      	adds	r3, #6
 801c0c8:	781b      	ldrb	r3, [r3, #0]
 801c0ca:	001a      	movs	r2, r3
 801c0cc:	683b      	ldr	r3, [r7, #0]
 801c0ce:	3307      	adds	r3, #7
 801c0d0:	781b      	ldrb	r3, [r3, #0]
 801c0d2:	021b      	lsls	r3, r3, #8
 801c0d4:	b29b      	uxth	r3, r3
 801c0d6:	18d3      	adds	r3, r2, r3
 801c0d8:	b29a      	uxth	r2, r3
 801c0da:	687b      	ldr	r3, [r7, #4]
 801c0dc:	80da      	strh	r2, [r3, #6]

}
 801c0de:	46c0      	nop			@ (mov r8, r8)
 801c0e0:	46bd      	mov	sp, r7
 801c0e2:	b002      	add	sp, #8
 801c0e4:	bd80      	pop	{r7, pc}

0801c0e6 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 801c0e6:	b580      	push	{r7, lr}
 801c0e8:	b082      	sub	sp, #8
 801c0ea:	af00      	add	r7, sp, #0
 801c0ec:	6078      	str	r0, [r7, #4]
 801c0ee:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 801c0f0:	687b      	ldr	r3, [r7, #4]
 801c0f2:	2180      	movs	r1, #128	@ 0x80
 801c0f4:	0018      	movs	r0, r3
 801c0f6:	f000 fd1e 	bl	801cb36 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 801c0fa:	687b      	ldr	r3, [r7, #4]
 801c0fc:	2100      	movs	r1, #0
 801c0fe:	0018      	movs	r0, r3
 801c100:	f000 fd19 	bl	801cb36 <USBD_LL_StallEP>
}
 801c104:	46c0      	nop			@ (mov r8, r8)
 801c106:	46bd      	mov	sp, r7
 801c108:	b002      	add	sp, #8
 801c10a:	bd80      	pop	{r7, pc}

0801c10c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 801c10c:	b590      	push	{r4, r7, lr}
 801c10e:	b087      	sub	sp, #28
 801c110:	af00      	add	r7, sp, #0
 801c112:	60f8      	str	r0, [r7, #12]
 801c114:	60b9      	str	r1, [r7, #8]
 801c116:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 801c118:	2417      	movs	r4, #23
 801c11a:	193b      	adds	r3, r7, r4
 801c11c:	2200      	movs	r2, #0
 801c11e:	701a      	strb	r2, [r3, #0]

  if (desc != NULL)
 801c120:	68fb      	ldr	r3, [r7, #12]
 801c122:	2b00      	cmp	r3, #0
 801c124:	d03c      	beq.n	801c1a0 <USBD_GetString+0x94>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 801c126:	68fb      	ldr	r3, [r7, #12]
 801c128:	0018      	movs	r0, r3
 801c12a:	f000 f83d 	bl	801c1a8 <USBD_GetLen>
 801c12e:	0003      	movs	r3, r0
 801c130:	3301      	adds	r3, #1
 801c132:	b29b      	uxth	r3, r3
 801c134:	18db      	adds	r3, r3, r3
 801c136:	b29a      	uxth	r2, r3
 801c138:	687b      	ldr	r3, [r7, #4]
 801c13a:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 801c13c:	193b      	adds	r3, r7, r4
 801c13e:	781b      	ldrb	r3, [r3, #0]
 801c140:	193a      	adds	r2, r7, r4
 801c142:	1c59      	adds	r1, r3, #1
 801c144:	7011      	strb	r1, [r2, #0]
 801c146:	001a      	movs	r2, r3
 801c148:	68bb      	ldr	r3, [r7, #8]
 801c14a:	189b      	adds	r3, r3, r2
 801c14c:	687a      	ldr	r2, [r7, #4]
 801c14e:	7812      	ldrb	r2, [r2, #0]
 801c150:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 801c152:	193b      	adds	r3, r7, r4
 801c154:	781b      	ldrb	r3, [r3, #0]
 801c156:	193a      	adds	r2, r7, r4
 801c158:	1c59      	adds	r1, r3, #1
 801c15a:	7011      	strb	r1, [r2, #0]
 801c15c:	001a      	movs	r2, r3
 801c15e:	68bb      	ldr	r3, [r7, #8]
 801c160:	189b      	adds	r3, r3, r2
 801c162:	2203      	movs	r2, #3
 801c164:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 801c166:	e017      	b.n	801c198 <USBD_GetString+0x8c>
    {
      unicode[idx++] = *desc++;
 801c168:	68fb      	ldr	r3, [r7, #12]
 801c16a:	1c5a      	adds	r2, r3, #1
 801c16c:	60fa      	str	r2, [r7, #12]
 801c16e:	2417      	movs	r4, #23
 801c170:	193a      	adds	r2, r7, r4
 801c172:	7812      	ldrb	r2, [r2, #0]
 801c174:	1939      	adds	r1, r7, r4
 801c176:	1c50      	adds	r0, r2, #1
 801c178:	7008      	strb	r0, [r1, #0]
 801c17a:	0011      	movs	r1, r2
 801c17c:	68ba      	ldr	r2, [r7, #8]
 801c17e:	1852      	adds	r2, r2, r1
 801c180:	781b      	ldrb	r3, [r3, #0]
 801c182:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 801c184:	193b      	adds	r3, r7, r4
 801c186:	781b      	ldrb	r3, [r3, #0]
 801c188:	193a      	adds	r2, r7, r4
 801c18a:	1c59      	adds	r1, r3, #1
 801c18c:	7011      	strb	r1, [r2, #0]
 801c18e:	001a      	movs	r2, r3
 801c190:	68bb      	ldr	r3, [r7, #8]
 801c192:	189b      	adds	r3, r3, r2
 801c194:	2200      	movs	r2, #0
 801c196:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 801c198:	68fb      	ldr	r3, [r7, #12]
 801c19a:	781b      	ldrb	r3, [r3, #0]
 801c19c:	2b00      	cmp	r3, #0
 801c19e:	d1e3      	bne.n	801c168 <USBD_GetString+0x5c>
    }
  }
}
 801c1a0:	46c0      	nop			@ (mov r8, r8)
 801c1a2:	46bd      	mov	sp, r7
 801c1a4:	b007      	add	sp, #28
 801c1a6:	bd90      	pop	{r4, r7, pc}

0801c1a8 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 801c1a8:	b580      	push	{r7, lr}
 801c1aa:	b084      	sub	sp, #16
 801c1ac:	af00      	add	r7, sp, #0
 801c1ae:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 801c1b0:	230f      	movs	r3, #15
 801c1b2:	18fb      	adds	r3, r7, r3
 801c1b4:	2200      	movs	r2, #0
 801c1b6:	701a      	strb	r2, [r3, #0]

  while (*buf != '\0')
 801c1b8:	e008      	b.n	801c1cc <USBD_GetLen+0x24>
  {
    len++;
 801c1ba:	210f      	movs	r1, #15
 801c1bc:	187b      	adds	r3, r7, r1
 801c1be:	781a      	ldrb	r2, [r3, #0]
 801c1c0:	187b      	adds	r3, r7, r1
 801c1c2:	3201      	adds	r2, #1
 801c1c4:	701a      	strb	r2, [r3, #0]
    buf++;
 801c1c6:	687b      	ldr	r3, [r7, #4]
 801c1c8:	3301      	adds	r3, #1
 801c1ca:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 801c1cc:	687b      	ldr	r3, [r7, #4]
 801c1ce:	781b      	ldrb	r3, [r3, #0]
 801c1d0:	2b00      	cmp	r3, #0
 801c1d2:	d1f2      	bne.n	801c1ba <USBD_GetLen+0x12>
  }

  return len;
 801c1d4:	230f      	movs	r3, #15
 801c1d6:	18fb      	adds	r3, r7, r3
 801c1d8:	781b      	ldrb	r3, [r3, #0]
}
 801c1da:	0018      	movs	r0, r3
 801c1dc:	46bd      	mov	sp, r7
 801c1de:	b004      	add	sp, #16
 801c1e0:	bd80      	pop	{r7, pc}

0801c1e2 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 801c1e2:	b580      	push	{r7, lr}
 801c1e4:	b084      	sub	sp, #16
 801c1e6:	af00      	add	r7, sp, #0
 801c1e8:	60f8      	str	r0, [r7, #12]
 801c1ea:	60b9      	str	r1, [r7, #8]
 801c1ec:	1dbb      	adds	r3, r7, #6
 801c1ee:	801a      	strh	r2, [r3, #0]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 801c1f0:	68fa      	ldr	r2, [r7, #12]
 801c1f2:	23a5      	movs	r3, #165	@ 0xa5
 801c1f4:	009b      	lsls	r3, r3, #2
 801c1f6:	2102      	movs	r1, #2
 801c1f8:	50d1      	str	r1, [r2, r3]
  pdev->ep_in[0].total_length = len;
 801c1fa:	1dbb      	adds	r3, r7, #6
 801c1fc:	881a      	ldrh	r2, [r3, #0]
 801c1fe:	68fb      	ldr	r3, [r7, #12]
 801c200:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 801c202:	1dbb      	adds	r3, r7, #6
 801c204:	881a      	ldrh	r2, [r3, #0]
 801c206:	68fb      	ldr	r3, [r7, #12]
 801c208:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 801c20a:	1dbb      	adds	r3, r7, #6
 801c20c:	881b      	ldrh	r3, [r3, #0]
 801c20e:	68ba      	ldr	r2, [r7, #8]
 801c210:	68f8      	ldr	r0, [r7, #12]
 801c212:	2100      	movs	r1, #0
 801c214:	f000 fd41 	bl	801cc9a <USBD_LL_Transmit>

  return USBD_OK;
 801c218:	2300      	movs	r3, #0
}
 801c21a:	0018      	movs	r0, r3
 801c21c:	46bd      	mov	sp, r7
 801c21e:	b004      	add	sp, #16
 801c220:	bd80      	pop	{r7, pc}

0801c222 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 801c222:	b580      	push	{r7, lr}
 801c224:	b084      	sub	sp, #16
 801c226:	af00      	add	r7, sp, #0
 801c228:	60f8      	str	r0, [r7, #12]
 801c22a:	60b9      	str	r1, [r7, #8]
 801c22c:	1dbb      	adds	r3, r7, #6
 801c22e:	801a      	strh	r2, [r3, #0]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 801c230:	1dbb      	adds	r3, r7, #6
 801c232:	881b      	ldrh	r3, [r3, #0]
 801c234:	68ba      	ldr	r2, [r7, #8]
 801c236:	68f8      	ldr	r0, [r7, #12]
 801c238:	2100      	movs	r1, #0
 801c23a:	f000 fd2e 	bl	801cc9a <USBD_LL_Transmit>

  return USBD_OK;
 801c23e:	2300      	movs	r3, #0
}
 801c240:	0018      	movs	r0, r3
 801c242:	46bd      	mov	sp, r7
 801c244:	b004      	add	sp, #16
 801c246:	bd80      	pop	{r7, pc}

0801c248 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 801c248:	b580      	push	{r7, lr}
 801c24a:	b084      	sub	sp, #16
 801c24c:	af00      	add	r7, sp, #0
 801c24e:	60f8      	str	r0, [r7, #12]
 801c250:	60b9      	str	r1, [r7, #8]
 801c252:	1dbb      	adds	r3, r7, #6
 801c254:	801a      	strh	r2, [r3, #0]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 801c256:	68fa      	ldr	r2, [r7, #12]
 801c258:	23a5      	movs	r3, #165	@ 0xa5
 801c25a:	009b      	lsls	r3, r3, #2
 801c25c:	2103      	movs	r1, #3
 801c25e:	50d1      	str	r1, [r2, r3]
  pdev->ep_out[0].total_length = len;
 801c260:	1dbb      	adds	r3, r7, #6
 801c262:	8819      	ldrh	r1, [r3, #0]
 801c264:	68fa      	ldr	r2, [r7, #12]
 801c266:	23ae      	movs	r3, #174	@ 0xae
 801c268:	005b      	lsls	r3, r3, #1
 801c26a:	50d1      	str	r1, [r2, r3]
  pdev->ep_out[0].rem_length   = len;
 801c26c:	1dbb      	adds	r3, r7, #6
 801c26e:	8819      	ldrh	r1, [r3, #0]
 801c270:	68fa      	ldr	r2, [r7, #12]
 801c272:	23b0      	movs	r3, #176	@ 0xb0
 801c274:	005b      	lsls	r3, r3, #1
 801c276:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 801c278:	1dbb      	adds	r3, r7, #6
 801c27a:	881b      	ldrh	r3, [r3, #0]
 801c27c:	68ba      	ldr	r2, [r7, #8]
 801c27e:	68f8      	ldr	r0, [r7, #12]
 801c280:	2100      	movs	r1, #0
 801c282:	f000 fd41 	bl	801cd08 <USBD_LL_PrepareReceive>

  return USBD_OK;
 801c286:	2300      	movs	r3, #0
}
 801c288:	0018      	movs	r0, r3
 801c28a:	46bd      	mov	sp, r7
 801c28c:	b004      	add	sp, #16
 801c28e:	bd80      	pop	{r7, pc}

0801c290 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 801c290:	b580      	push	{r7, lr}
 801c292:	b084      	sub	sp, #16
 801c294:	af00      	add	r7, sp, #0
 801c296:	60f8      	str	r0, [r7, #12]
 801c298:	60b9      	str	r1, [r7, #8]
 801c29a:	1dbb      	adds	r3, r7, #6
 801c29c:	801a      	strh	r2, [r3, #0]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 801c29e:	1dbb      	adds	r3, r7, #6
 801c2a0:	881b      	ldrh	r3, [r3, #0]
 801c2a2:	68ba      	ldr	r2, [r7, #8]
 801c2a4:	68f8      	ldr	r0, [r7, #12]
 801c2a6:	2100      	movs	r1, #0
 801c2a8:	f000 fd2e 	bl	801cd08 <USBD_LL_PrepareReceive>

  return USBD_OK;
 801c2ac:	2300      	movs	r3, #0
}
 801c2ae:	0018      	movs	r0, r3
 801c2b0:	46bd      	mov	sp, r7
 801c2b2:	b004      	add	sp, #16
 801c2b4:	bd80      	pop	{r7, pc}

0801c2b6 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 801c2b6:	b580      	push	{r7, lr}
 801c2b8:	b082      	sub	sp, #8
 801c2ba:	af00      	add	r7, sp, #0
 801c2bc:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 801c2be:	687a      	ldr	r2, [r7, #4]
 801c2c0:	23a5      	movs	r3, #165	@ 0xa5
 801c2c2:	009b      	lsls	r3, r3, #2
 801c2c4:	2104      	movs	r1, #4
 801c2c6:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 801c2c8:	6878      	ldr	r0, [r7, #4]
 801c2ca:	2300      	movs	r3, #0
 801c2cc:	2200      	movs	r2, #0
 801c2ce:	2100      	movs	r1, #0
 801c2d0:	f000 fce3 	bl	801cc9a <USBD_LL_Transmit>

  return USBD_OK;
 801c2d4:	2300      	movs	r3, #0
}
 801c2d6:	0018      	movs	r0, r3
 801c2d8:	46bd      	mov	sp, r7
 801c2da:	b002      	add	sp, #8
 801c2dc:	bd80      	pop	{r7, pc}

0801c2de <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 801c2de:	b580      	push	{r7, lr}
 801c2e0:	b082      	sub	sp, #8
 801c2e2:	af00      	add	r7, sp, #0
 801c2e4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 801c2e6:	687a      	ldr	r2, [r7, #4]
 801c2e8:	23a5      	movs	r3, #165	@ 0xa5
 801c2ea:	009b      	lsls	r3, r3, #2
 801c2ec:	2105      	movs	r1, #5
 801c2ee:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801c2f0:	6878      	ldr	r0, [r7, #4]
 801c2f2:	2300      	movs	r3, #0
 801c2f4:	2200      	movs	r2, #0
 801c2f6:	2100      	movs	r1, #0
 801c2f8:	f000 fd06 	bl	801cd08 <USBD_LL_PrepareReceive>

  return USBD_OK;
 801c2fc:	2300      	movs	r3, #0
}
 801c2fe:	0018      	movs	r0, r3
 801c300:	46bd      	mov	sp, r7
 801c302:	b002      	add	sp, #8
 801c304:	bd80      	pop	{r7, pc}
	...

0801c308 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 801c308:	b580      	push	{r7, lr}
 801c30a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 801c30c:	4914      	ldr	r1, [pc, #80]	@ (801c360 <MX_USB_DEVICE_Init+0x58>)
 801c30e:	4b15      	ldr	r3, [pc, #84]	@ (801c364 <MX_USB_DEVICE_Init+0x5c>)
 801c310:	2200      	movs	r2, #0
 801c312:	0018      	movs	r0, r3
 801c314:	f7fe fdec 	bl	801aef0 <USBD_Init>
 801c318:	1e03      	subs	r3, r0, #0
 801c31a:	d001      	beq.n	801c320 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 801c31c:	f7eb fea4 	bl	8008068 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 801c320:	4a11      	ldr	r2, [pc, #68]	@ (801c368 <MX_USB_DEVICE_Init+0x60>)
 801c322:	4b10      	ldr	r3, [pc, #64]	@ (801c364 <MX_USB_DEVICE_Init+0x5c>)
 801c324:	0011      	movs	r1, r2
 801c326:	0018      	movs	r0, r3
 801c328:	f7fe fe13 	bl	801af52 <USBD_RegisterClass>
 801c32c:	1e03      	subs	r3, r0, #0
 801c32e:	d001      	beq.n	801c334 <MX_USB_DEVICE_Init+0x2c>
  {
    Error_Handler();
 801c330:	f7eb fe9a 	bl	8008068 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 801c334:	4a0d      	ldr	r2, [pc, #52]	@ (801c36c <MX_USB_DEVICE_Init+0x64>)
 801c336:	4b0b      	ldr	r3, [pc, #44]	@ (801c364 <MX_USB_DEVICE_Init+0x5c>)
 801c338:	0011      	movs	r1, r2
 801c33a:	0018      	movs	r0, r3
 801c33c:	f7fe fd28 	bl	801ad90 <USBD_CDC_RegisterInterface>
 801c340:	1e03      	subs	r3, r0, #0
 801c342:	d001      	beq.n	801c348 <MX_USB_DEVICE_Init+0x40>
  {
    Error_Handler();
 801c344:	f7eb fe90 	bl	8008068 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 801c348:	4b06      	ldr	r3, [pc, #24]	@ (801c364 <MX_USB_DEVICE_Init+0x5c>)
 801c34a:	0018      	movs	r0, r3
 801c34c:	f7fe fe21 	bl	801af92 <USBD_Start>
 801c350:	1e03      	subs	r3, r0, #0
 801c352:	d001      	beq.n	801c358 <MX_USB_DEVICE_Init+0x50>
  {
    Error_Handler();
 801c354:	f7eb fe88 	bl	8008068 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 801c358:	46c0      	nop			@ (mov r8, r8)
 801c35a:	46bd      	mov	sp, r7
 801c35c:	bd80      	pop	{r7, pc}
 801c35e:	46c0      	nop			@ (mov r8, r8)
 801c360:	20000204 	.word	0x20000204
 801c364:	200025b4 	.word	0x200025b4
 801c368:	200000f0 	.word	0x200000f0
 801c36c:	200001f4 	.word	0x200001f4

0801c370 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 801c370:	b580      	push	{r7, lr}
 801c372:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 801c374:	4907      	ldr	r1, [pc, #28]	@ (801c394 <CDC_Init_FS+0x24>)
 801c376:	4b08      	ldr	r3, [pc, #32]	@ (801c398 <CDC_Init_FS+0x28>)
 801c378:	2200      	movs	r2, #0
 801c37a:	0018      	movs	r0, r3
 801c37c:	f7fe fd23 	bl	801adc6 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 801c380:	4a06      	ldr	r2, [pc, #24]	@ (801c39c <CDC_Init_FS+0x2c>)
 801c382:	4b05      	ldr	r3, [pc, #20]	@ (801c398 <CDC_Init_FS+0x28>)
 801c384:	0011      	movs	r1, r2
 801c386:	0018      	movs	r0, r3
 801c388:	f7fe fd39 	bl	801adfe <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 801c38c:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 801c38e:	0018      	movs	r0, r3
 801c390:	46bd      	mov	sp, r7
 801c392:	bd80      	pop	{r7, pc}
 801c394:	20002d38 	.word	0x20002d38
 801c398:	200025b4 	.word	0x200025b4
 801c39c:	20002938 	.word	0x20002938

0801c3a0 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 801c3a0:	b580      	push	{r7, lr}
 801c3a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 801c3a4:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 801c3a6:	0018      	movs	r0, r3
 801c3a8:	46bd      	mov	sp, r7
 801c3aa:	bd80      	pop	{r7, pc}

0801c3ac <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 801c3ac:	b580      	push	{r7, lr}
 801c3ae:	b082      	sub	sp, #8
 801c3b0:	af00      	add	r7, sp, #0
 801c3b2:	6039      	str	r1, [r7, #0]
 801c3b4:	0011      	movs	r1, r2
 801c3b6:	1dfb      	adds	r3, r7, #7
 801c3b8:	1c02      	adds	r2, r0, #0
 801c3ba:	701a      	strb	r2, [r3, #0]
 801c3bc:	1d3b      	adds	r3, r7, #4
 801c3be:	1c0a      	adds	r2, r1, #0
 801c3c0:	801a      	strh	r2, [r3, #0]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 801c3c2:	1dfb      	adds	r3, r7, #7
 801c3c4:	781b      	ldrb	r3, [r3, #0]
 801c3c6:	2b23      	cmp	r3, #35	@ 0x23
 801c3c8:	d804      	bhi.n	801c3d4 <CDC_Control_FS+0x28>
 801c3ca:	009a      	lsls	r2, r3, #2
 801c3cc:	4b04      	ldr	r3, [pc, #16]	@ (801c3e0 <CDC_Control_FS+0x34>)
 801c3ce:	18d3      	adds	r3, r2, r3
 801c3d0:	681b      	ldr	r3, [r3, #0]
 801c3d2:	469f      	mov	pc, r3
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 801c3d4:	46c0      	nop			@ (mov r8, r8)
  }

  return (USBD_OK);
 801c3d6:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 801c3d8:	0018      	movs	r0, r3
 801c3da:	46bd      	mov	sp, r7
 801c3dc:	b002      	add	sp, #8
 801c3de:	bd80      	pop	{r7, pc}
 801c3e0:	08024b38 	.word	0x08024b38

0801c3e4 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 801c3e4:	b580      	push	{r7, lr}
 801c3e6:	b082      	sub	sp, #8
 801c3e8:	af00      	add	r7, sp, #0
 801c3ea:	6078      	str	r0, [r7, #4]
 801c3ec:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  if (ESPProg)
 801c3ee:	4b12      	ldr	r3, [pc, #72]	@ (801c438 <CDC_Receive_FS+0x54>)
 801c3f0:	781b      	ldrb	r3, [r3, #0]
 801c3f2:	2b00      	cmp	r3, #0
 801c3f4:	d013      	beq.n	801c41e <CDC_Receive_FS+0x3a>
  {
    HAL_UART_Transmit(&UsedUart, Buf, *Len, HAL_MAX_DELAY);
 801c3f6:	683b      	ldr	r3, [r7, #0]
 801c3f8:	681b      	ldr	r3, [r3, #0]
 801c3fa:	b29a      	uxth	r2, r3
 801c3fc:	2301      	movs	r3, #1
 801c3fe:	425b      	negs	r3, r3
 801c400:	6879      	ldr	r1, [r7, #4]
 801c402:	480e      	ldr	r0, [pc, #56]	@ (801c43c <CDC_Receive_FS+0x58>)
 801c404:	f7fa fa46 	bl	8016894 <HAL_UART_Transmit>
    USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 801c408:	687a      	ldr	r2, [r7, #4]
 801c40a:	4b0d      	ldr	r3, [pc, #52]	@ (801c440 <CDC_Receive_FS+0x5c>)
 801c40c:	0011      	movs	r1, r2
 801c40e:	0018      	movs	r0, r3
 801c410:	f7fe fcf5 	bl	801adfe <USBD_CDC_SetRxBuffer>
    USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 801c414:	4b0a      	ldr	r3, [pc, #40]	@ (801c440 <CDC_Receive_FS+0x5c>)
 801c416:	0018      	movs	r0, r3
 801c418:	f7fe fd3c 	bl	801ae94 <USBD_CDC_ReceivePacket>
 801c41c:	e006      	b.n	801c42c <CDC_Receive_FS+0x48>
  }
  else
   {
     UsbRxDataSize += *Len;
 801c41e:	683b      	ldr	r3, [r7, #0]
 801c420:	681a      	ldr	r2, [r3, #0]
 801c422:	4b08      	ldr	r3, [pc, #32]	@ (801c444 <CDC_Receive_FS+0x60>)
 801c424:	681b      	ldr	r3, [r3, #0]
 801c426:	18d2      	adds	r2, r2, r3
 801c428:	4b06      	ldr	r3, [pc, #24]	@ (801c444 <CDC_Receive_FS+0x60>)
 801c42a:	601a      	str	r2, [r3, #0]
   }
   return (USBD_OK);
 801c42c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 801c42e:	0018      	movs	r0, r3
 801c430:	46bd      	mov	sp, r7
 801c432:	b002      	add	sp, #8
 801c434:	bd80      	pop	{r7, pc}
 801c436:	46c0      	nop			@ (mov r8, r8)
 801c438:	20002878 	.word	0x20002878
 801c43c:	2000287c 	.word	0x2000287c
 801c440:	200025b4 	.word	0x200025b4
 801c444:	20002934 	.word	0x20002934

0801c448 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 801c448:	b5b0      	push	{r4, r5, r7, lr}
 801c44a:	b084      	sub	sp, #16
 801c44c:	af00      	add	r7, sp, #0
 801c44e:	6078      	str	r0, [r7, #4]
 801c450:	000a      	movs	r2, r1
 801c452:	1cbb      	adds	r3, r7, #2
 801c454:	801a      	strh	r2, [r3, #0]
  uint8_t result = USBD_OK;
 801c456:	230f      	movs	r3, #15
 801c458:	18fb      	adds	r3, r7, r3
 801c45a:	2200      	movs	r2, #0
 801c45c:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 801c45e:	4a11      	ldr	r2, [pc, #68]	@ (801c4a4 <CDC_Transmit_FS+0x5c>)
 801c460:	23ae      	movs	r3, #174	@ 0xae
 801c462:	009b      	lsls	r3, r3, #2
 801c464:	58d3      	ldr	r3, [r2, r3]
 801c466:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 801c468:	68ba      	ldr	r2, [r7, #8]
 801c46a:	2385      	movs	r3, #133	@ 0x85
 801c46c:	009b      	lsls	r3, r3, #2
 801c46e:	58d3      	ldr	r3, [r2, r3]
 801c470:	2b00      	cmp	r3, #0
 801c472:	d001      	beq.n	801c478 <CDC_Transmit_FS+0x30>
    return USBD_BUSY;
 801c474:	2301      	movs	r3, #1
 801c476:	e010      	b.n	801c49a <CDC_Transmit_FS+0x52>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 801c478:	1cbb      	adds	r3, r7, #2
 801c47a:	881a      	ldrh	r2, [r3, #0]
 801c47c:	6879      	ldr	r1, [r7, #4]
 801c47e:	4b09      	ldr	r3, [pc, #36]	@ (801c4a4 <CDC_Transmit_FS+0x5c>)
 801c480:	0018      	movs	r0, r3
 801c482:	f7fe fca0 	bl	801adc6 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 801c486:	250f      	movs	r5, #15
 801c488:	197c      	adds	r4, r7, r5
 801c48a:	4b06      	ldr	r3, [pc, #24]	@ (801c4a4 <CDC_Transmit_FS+0x5c>)
 801c48c:	0018      	movs	r0, r3
 801c48e:	f7fe fcca 	bl	801ae26 <USBD_CDC_TransmitPacket>
 801c492:	0003      	movs	r3, r0
 801c494:	7023      	strb	r3, [r4, #0]
  /* USER CODE END 7 */
  return result;
 801c496:	197b      	adds	r3, r7, r5
 801c498:	781b      	ldrb	r3, [r3, #0]
}
 801c49a:	0018      	movs	r0, r3
 801c49c:	46bd      	mov	sp, r7
 801c49e:	b004      	add	sp, #16
 801c4a0:	bdb0      	pop	{r4, r5, r7, pc}
 801c4a2:	46c0      	nop			@ (mov r8, r8)
 801c4a4:	200025b4 	.word	0x200025b4

0801c4a8 <EnableESPProg>:

/* USER CODE BEGIN PRIVATE_FUNCTIONS_IMPLEMENTATION */
void EnableESPProg(){
 801c4a8:	b580      	push	{r7, lr}
 801c4aa:	af00      	add	r7, sp, #0
  ESPProg = true;
 801c4ac:	4b02      	ldr	r3, [pc, #8]	@ (801c4b8 <EnableESPProg+0x10>)
 801c4ae:	2201      	movs	r2, #1
 801c4b0:	701a      	strb	r2, [r3, #0]
}
 801c4b2:	46c0      	nop			@ (mov r8, r8)
 801c4b4:	46bd      	mov	sp, r7
 801c4b6:	bd80      	pop	{r7, pc}
 801c4b8:	20002878 	.word	0x20002878

0801c4bc <GetUsbRxPointer>:
{
  UsedUart = *uart;
}

uint8_t* GetUsbRxPointer(void)
{
 801c4bc:	b580      	push	{r7, lr}
 801c4be:	af00      	add	r7, sp, #0
  return UserRxBufferFS;
 801c4c0:	4b01      	ldr	r3, [pc, #4]	@ (801c4c8 <GetUsbRxPointer+0xc>)
}
 801c4c2:	0018      	movs	r0, r3
 801c4c4:	46bd      	mov	sp, r7
 801c4c6:	bd80      	pop	{r7, pc}
 801c4c8:	20002938 	.word	0x20002938

0801c4cc <ResetUsbRxDataSize>:

void ResetUsbRxDataSize(void)
{
 801c4cc:	b580      	push	{r7, lr}
 801c4ce:	af00      	add	r7, sp, #0
  UsbRxDataSize = 0;
 801c4d0:	4b07      	ldr	r3, [pc, #28]	@ (801c4f0 <ResetUsbRxDataSize+0x24>)
 801c4d2:	2200      	movs	r2, #0
 801c4d4:	601a      	str	r2, [r3, #0]
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &UserRxBufferFS[0]);
 801c4d6:	4a07      	ldr	r2, [pc, #28]	@ (801c4f4 <ResetUsbRxDataSize+0x28>)
 801c4d8:	4b07      	ldr	r3, [pc, #28]	@ (801c4f8 <ResetUsbRxDataSize+0x2c>)
 801c4da:	0011      	movs	r1, r2
 801c4dc:	0018      	movs	r0, r3
 801c4de:	f7fe fc8e 	bl	801adfe <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 801c4e2:	4b05      	ldr	r3, [pc, #20]	@ (801c4f8 <ResetUsbRxDataSize+0x2c>)
 801c4e4:	0018      	movs	r0, r3
 801c4e6:	f7fe fcd5 	bl	801ae94 <USBD_CDC_ReceivePacket>
}
 801c4ea:	46c0      	nop			@ (mov r8, r8)
 801c4ec:	46bd      	mov	sp, r7
 801c4ee:	bd80      	pop	{r7, pc}
 801c4f0:	20002934 	.word	0x20002934
 801c4f4:	20002938 	.word	0x20002938
 801c4f8:	200025b4 	.word	0x200025b4

0801c4fc <GetUsbRxDataSize>:

uint32_t GetUsbRxDataSize()
{
 801c4fc:	b580      	push	{r7, lr}
 801c4fe:	af00      	add	r7, sp, #0
  return UsbRxDataSize;
 801c500:	4b02      	ldr	r3, [pc, #8]	@ (801c50c <GetUsbRxDataSize+0x10>)
 801c502:	681b      	ldr	r3, [r3, #0]
}
 801c504:	0018      	movs	r0, r3
 801c506:	46bd      	mov	sp, r7
 801c508:	bd80      	pop	{r7, pc}
 801c50a:	46c0      	nop			@ (mov r8, r8)
 801c50c:	20002934 	.word	0x20002934

0801c510 <GetUsbRxNextChunk>:

void GetUsbRxNextChunk(uint32_t writePointer)
{
 801c510:	b580      	push	{r7, lr}
 801c512:	b082      	sub	sp, #8
 801c514:	af00      	add	r7, sp, #0
 801c516:	6078      	str	r0, [r7, #4]
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &UserRxBufferFS[writePointer]);
 801c518:	687a      	ldr	r2, [r7, #4]
 801c51a:	4b07      	ldr	r3, [pc, #28]	@ (801c538 <GetUsbRxNextChunk+0x28>)
 801c51c:	18d2      	adds	r2, r2, r3
 801c51e:	4b07      	ldr	r3, [pc, #28]	@ (801c53c <GetUsbRxNextChunk+0x2c>)
 801c520:	0011      	movs	r1, r2
 801c522:	0018      	movs	r0, r3
 801c524:	f7fe fc6b 	bl	801adfe <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 801c528:	4b04      	ldr	r3, [pc, #16]	@ (801c53c <GetUsbRxNextChunk+0x2c>)
 801c52a:	0018      	movs	r0, r3
 801c52c:	f7fe fcb2 	bl	801ae94 <USBD_CDC_ReceivePacket>
}
 801c530:	46c0      	nop			@ (mov r8, r8)
 801c532:	46bd      	mov	sp, r7
 801c534:	b002      	add	sp, #8
 801c536:	bd80      	pop	{r7, pc}
 801c538:	20002938 	.word	0x20002938
 801c53c:	200025b4 	.word	0x200025b4

0801c540 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801c540:	b580      	push	{r7, lr}
 801c542:	b082      	sub	sp, #8
 801c544:	af00      	add	r7, sp, #0
 801c546:	0002      	movs	r2, r0
 801c548:	6039      	str	r1, [r7, #0]
 801c54a:	1dfb      	adds	r3, r7, #7
 801c54c:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 801c54e:	683b      	ldr	r3, [r7, #0]
 801c550:	2212      	movs	r2, #18
 801c552:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 801c554:	4b02      	ldr	r3, [pc, #8]	@ (801c560 <USBD_FS_DeviceDescriptor+0x20>)
}
 801c556:	0018      	movs	r0, r3
 801c558:	46bd      	mov	sp, r7
 801c55a:	b002      	add	sp, #8
 801c55c:	bd80      	pop	{r7, pc}
 801c55e:	46c0      	nop			@ (mov r8, r8)
 801c560:	20000220 	.word	0x20000220

0801c564 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801c564:	b580      	push	{r7, lr}
 801c566:	b082      	sub	sp, #8
 801c568:	af00      	add	r7, sp, #0
 801c56a:	0002      	movs	r2, r0
 801c56c:	6039      	str	r1, [r7, #0]
 801c56e:	1dfb      	adds	r3, r7, #7
 801c570:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 801c572:	683b      	ldr	r3, [r7, #0]
 801c574:	2204      	movs	r2, #4
 801c576:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 801c578:	4b02      	ldr	r3, [pc, #8]	@ (801c584 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 801c57a:	0018      	movs	r0, r3
 801c57c:	46bd      	mov	sp, r7
 801c57e:	b002      	add	sp, #8
 801c580:	bd80      	pop	{r7, pc}
 801c582:	46c0      	nop			@ (mov r8, r8)
 801c584:	20000234 	.word	0x20000234

0801c588 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801c588:	b580      	push	{r7, lr}
 801c58a:	b082      	sub	sp, #8
 801c58c:	af00      	add	r7, sp, #0
 801c58e:	0002      	movs	r2, r0
 801c590:	6039      	str	r1, [r7, #0]
 801c592:	1dfb      	adds	r3, r7, #7
 801c594:	701a      	strb	r2, [r3, #0]
  if(speed == 0)
 801c596:	1dfb      	adds	r3, r7, #7
 801c598:	781b      	ldrb	r3, [r3, #0]
 801c59a:	2b00      	cmp	r3, #0
 801c59c:	d106      	bne.n	801c5ac <USBD_FS_ProductStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801c59e:	683a      	ldr	r2, [r7, #0]
 801c5a0:	4908      	ldr	r1, [pc, #32]	@ (801c5c4 <USBD_FS_ProductStrDescriptor+0x3c>)
 801c5a2:	4b09      	ldr	r3, [pc, #36]	@ (801c5c8 <USBD_FS_ProductStrDescriptor+0x40>)
 801c5a4:	0018      	movs	r0, r3
 801c5a6:	f7ff fdb1 	bl	801c10c <USBD_GetString>
 801c5aa:	e005      	b.n	801c5b8 <USBD_FS_ProductStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801c5ac:	683a      	ldr	r2, [r7, #0]
 801c5ae:	4905      	ldr	r1, [pc, #20]	@ (801c5c4 <USBD_FS_ProductStrDescriptor+0x3c>)
 801c5b0:	4b05      	ldr	r3, [pc, #20]	@ (801c5c8 <USBD_FS_ProductStrDescriptor+0x40>)
 801c5b2:	0018      	movs	r0, r3
 801c5b4:	f7ff fdaa 	bl	801c10c <USBD_GetString>
  }
  return USBD_StrDesc;
 801c5b8:	4b02      	ldr	r3, [pc, #8]	@ (801c5c4 <USBD_FS_ProductStrDescriptor+0x3c>)
}
 801c5ba:	0018      	movs	r0, r3
 801c5bc:	46bd      	mov	sp, r7
 801c5be:	b002      	add	sp, #8
 801c5c0:	bd80      	pop	{r7, pc}
 801c5c2:	46c0      	nop			@ (mov r8, r8)
 801c5c4:	20003138 	.word	0x20003138
 801c5c8:	080245c4 	.word	0x080245c4

0801c5cc <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801c5cc:	b580      	push	{r7, lr}
 801c5ce:	b082      	sub	sp, #8
 801c5d0:	af00      	add	r7, sp, #0
 801c5d2:	0002      	movs	r2, r0
 801c5d4:	6039      	str	r1, [r7, #0]
 801c5d6:	1dfb      	adds	r3, r7, #7
 801c5d8:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 801c5da:	683a      	ldr	r2, [r7, #0]
 801c5dc:	4904      	ldr	r1, [pc, #16]	@ (801c5f0 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 801c5de:	4b05      	ldr	r3, [pc, #20]	@ (801c5f4 <USBD_FS_ManufacturerStrDescriptor+0x28>)
 801c5e0:	0018      	movs	r0, r3
 801c5e2:	f7ff fd93 	bl	801c10c <USBD_GetString>
  return USBD_StrDesc;
 801c5e6:	4b02      	ldr	r3, [pc, #8]	@ (801c5f0 <USBD_FS_ManufacturerStrDescriptor+0x24>)
}
 801c5e8:	0018      	movs	r0, r3
 801c5ea:	46bd      	mov	sp, r7
 801c5ec:	b002      	add	sp, #8
 801c5ee:	bd80      	pop	{r7, pc}
 801c5f0:	20003138 	.word	0x20003138
 801c5f4:	080245dc 	.word	0x080245dc

0801c5f8 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801c5f8:	b580      	push	{r7, lr}
 801c5fa:	b082      	sub	sp, #8
 801c5fc:	af00      	add	r7, sp, #0
 801c5fe:	0002      	movs	r2, r0
 801c600:	6039      	str	r1, [r7, #0]
 801c602:	1dfb      	adds	r3, r7, #7
 801c604:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 801c606:	683b      	ldr	r3, [r7, #0]
 801c608:	221a      	movs	r2, #26
 801c60a:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 801c60c:	f000 f84c 	bl	801c6a8 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 801c610:	4b02      	ldr	r3, [pc, #8]	@ (801c61c <USBD_FS_SerialStrDescriptor+0x24>)
}
 801c612:	0018      	movs	r0, r3
 801c614:	46bd      	mov	sp, r7
 801c616:	b002      	add	sp, #8
 801c618:	bd80      	pop	{r7, pc}
 801c61a:	46c0      	nop			@ (mov r8, r8)
 801c61c:	20000238 	.word	0x20000238

0801c620 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801c620:	b580      	push	{r7, lr}
 801c622:	b082      	sub	sp, #8
 801c624:	af00      	add	r7, sp, #0
 801c626:	0002      	movs	r2, r0
 801c628:	6039      	str	r1, [r7, #0]
 801c62a:	1dfb      	adds	r3, r7, #7
 801c62c:	701a      	strb	r2, [r3, #0]
  if(speed == USBD_SPEED_HIGH)
 801c62e:	1dfb      	adds	r3, r7, #7
 801c630:	781b      	ldrb	r3, [r3, #0]
 801c632:	2b00      	cmp	r3, #0
 801c634:	d106      	bne.n	801c644 <USBD_FS_ConfigStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801c636:	683a      	ldr	r2, [r7, #0]
 801c638:	4908      	ldr	r1, [pc, #32]	@ (801c65c <USBD_FS_ConfigStrDescriptor+0x3c>)
 801c63a:	4b09      	ldr	r3, [pc, #36]	@ (801c660 <USBD_FS_ConfigStrDescriptor+0x40>)
 801c63c:	0018      	movs	r0, r3
 801c63e:	f7ff fd65 	bl	801c10c <USBD_GetString>
 801c642:	e005      	b.n	801c650 <USBD_FS_ConfigStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801c644:	683a      	ldr	r2, [r7, #0]
 801c646:	4905      	ldr	r1, [pc, #20]	@ (801c65c <USBD_FS_ConfigStrDescriptor+0x3c>)
 801c648:	4b05      	ldr	r3, [pc, #20]	@ (801c660 <USBD_FS_ConfigStrDescriptor+0x40>)
 801c64a:	0018      	movs	r0, r3
 801c64c:	f7ff fd5e 	bl	801c10c <USBD_GetString>
  }
  return USBD_StrDesc;
 801c650:	4b02      	ldr	r3, [pc, #8]	@ (801c65c <USBD_FS_ConfigStrDescriptor+0x3c>)
}
 801c652:	0018      	movs	r0, r3
 801c654:	46bd      	mov	sp, r7
 801c656:	b002      	add	sp, #8
 801c658:	bd80      	pop	{r7, pc}
 801c65a:	46c0      	nop			@ (mov r8, r8)
 801c65c:	20003138 	.word	0x20003138
 801c660:	080245f0 	.word	0x080245f0

0801c664 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801c664:	b580      	push	{r7, lr}
 801c666:	b082      	sub	sp, #8
 801c668:	af00      	add	r7, sp, #0
 801c66a:	0002      	movs	r2, r0
 801c66c:	6039      	str	r1, [r7, #0]
 801c66e:	1dfb      	adds	r3, r7, #7
 801c670:	701a      	strb	r2, [r3, #0]
  if(speed == 0)
 801c672:	1dfb      	adds	r3, r7, #7
 801c674:	781b      	ldrb	r3, [r3, #0]
 801c676:	2b00      	cmp	r3, #0
 801c678:	d106      	bne.n	801c688 <USBD_FS_InterfaceStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801c67a:	683a      	ldr	r2, [r7, #0]
 801c67c:	4908      	ldr	r1, [pc, #32]	@ (801c6a0 <USBD_FS_InterfaceStrDescriptor+0x3c>)
 801c67e:	4b09      	ldr	r3, [pc, #36]	@ (801c6a4 <USBD_FS_InterfaceStrDescriptor+0x40>)
 801c680:	0018      	movs	r0, r3
 801c682:	f7ff fd43 	bl	801c10c <USBD_GetString>
 801c686:	e005      	b.n	801c694 <USBD_FS_InterfaceStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801c688:	683a      	ldr	r2, [r7, #0]
 801c68a:	4905      	ldr	r1, [pc, #20]	@ (801c6a0 <USBD_FS_InterfaceStrDescriptor+0x3c>)
 801c68c:	4b05      	ldr	r3, [pc, #20]	@ (801c6a4 <USBD_FS_InterfaceStrDescriptor+0x40>)
 801c68e:	0018      	movs	r0, r3
 801c690:	f7ff fd3c 	bl	801c10c <USBD_GetString>
  }
  return USBD_StrDesc;
 801c694:	4b02      	ldr	r3, [pc, #8]	@ (801c6a0 <USBD_FS_InterfaceStrDescriptor+0x3c>)
}
 801c696:	0018      	movs	r0, r3
 801c698:	46bd      	mov	sp, r7
 801c69a:	b002      	add	sp, #8
 801c69c:	bd80      	pop	{r7, pc}
 801c69e:	46c0      	nop			@ (mov r8, r8)
 801c6a0:	20003138 	.word	0x20003138
 801c6a4:	080245fc 	.word	0x080245fc

0801c6a8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 801c6a8:	b580      	push	{r7, lr}
 801c6aa:	b084      	sub	sp, #16
 801c6ac:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 801c6ae:	4b10      	ldr	r3, [pc, #64]	@ (801c6f0 <Get_SerialNum+0x48>)
 801c6b0:	681b      	ldr	r3, [r3, #0]
 801c6b2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 801c6b4:	4b0f      	ldr	r3, [pc, #60]	@ (801c6f4 <Get_SerialNum+0x4c>)
 801c6b6:	681b      	ldr	r3, [r3, #0]
 801c6b8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 801c6ba:	4b0f      	ldr	r3, [pc, #60]	@ (801c6f8 <Get_SerialNum+0x50>)
 801c6bc:	681b      	ldr	r3, [r3, #0]
 801c6be:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 801c6c0:	68fa      	ldr	r2, [r7, #12]
 801c6c2:	687b      	ldr	r3, [r7, #4]
 801c6c4:	18d3      	adds	r3, r2, r3
 801c6c6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 801c6c8:	68fb      	ldr	r3, [r7, #12]
 801c6ca:	2b00      	cmp	r3, #0
 801c6cc:	d00b      	beq.n	801c6e6 <Get_SerialNum+0x3e>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 801c6ce:	490b      	ldr	r1, [pc, #44]	@ (801c6fc <Get_SerialNum+0x54>)
 801c6d0:	68fb      	ldr	r3, [r7, #12]
 801c6d2:	2208      	movs	r2, #8
 801c6d4:	0018      	movs	r0, r3
 801c6d6:	f000 f815 	bl	801c704 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 801c6da:	4909      	ldr	r1, [pc, #36]	@ (801c700 <Get_SerialNum+0x58>)
 801c6dc:	68bb      	ldr	r3, [r7, #8]
 801c6de:	2204      	movs	r2, #4
 801c6e0:	0018      	movs	r0, r3
 801c6e2:	f000 f80f 	bl	801c704 <IntToUnicode>
  }
}
 801c6e6:	46c0      	nop			@ (mov r8, r8)
 801c6e8:	46bd      	mov	sp, r7
 801c6ea:	b004      	add	sp, #16
 801c6ec:	bd80      	pop	{r7, pc}
 801c6ee:	46c0      	nop			@ (mov r8, r8)
 801c6f0:	1ff80050 	.word	0x1ff80050
 801c6f4:	1ff80054 	.word	0x1ff80054
 801c6f8:	1ff80058 	.word	0x1ff80058
 801c6fc:	2000023a 	.word	0x2000023a
 801c700:	2000024a 	.word	0x2000024a

0801c704 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 801c704:	b580      	push	{r7, lr}
 801c706:	b086      	sub	sp, #24
 801c708:	af00      	add	r7, sp, #0
 801c70a:	60f8      	str	r0, [r7, #12]
 801c70c:	60b9      	str	r1, [r7, #8]
 801c70e:	1dfb      	adds	r3, r7, #7
 801c710:	701a      	strb	r2, [r3, #0]
  uint8_t idx = 0;
 801c712:	2117      	movs	r1, #23
 801c714:	187b      	adds	r3, r7, r1
 801c716:	2200      	movs	r2, #0
 801c718:	701a      	strb	r2, [r3, #0]

  for (idx = 0; idx < len; idx++)
 801c71a:	187b      	adds	r3, r7, r1
 801c71c:	2200      	movs	r2, #0
 801c71e:	701a      	strb	r2, [r3, #0]
 801c720:	e02f      	b.n	801c782 <IntToUnicode+0x7e>
  {
    if (((value >> 28)) < 0xA)
 801c722:	68fb      	ldr	r3, [r7, #12]
 801c724:	0f1b      	lsrs	r3, r3, #28
 801c726:	2b09      	cmp	r3, #9
 801c728:	d80d      	bhi.n	801c746 <IntToUnicode+0x42>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 801c72a:	68fb      	ldr	r3, [r7, #12]
 801c72c:	0f1b      	lsrs	r3, r3, #28
 801c72e:	b2da      	uxtb	r2, r3
 801c730:	2317      	movs	r3, #23
 801c732:	18fb      	adds	r3, r7, r3
 801c734:	781b      	ldrb	r3, [r3, #0]
 801c736:	005b      	lsls	r3, r3, #1
 801c738:	0019      	movs	r1, r3
 801c73a:	68bb      	ldr	r3, [r7, #8]
 801c73c:	185b      	adds	r3, r3, r1
 801c73e:	3230      	adds	r2, #48	@ 0x30
 801c740:	b2d2      	uxtb	r2, r2
 801c742:	701a      	strb	r2, [r3, #0]
 801c744:	e00c      	b.n	801c760 <IntToUnicode+0x5c>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 801c746:	68fb      	ldr	r3, [r7, #12]
 801c748:	0f1b      	lsrs	r3, r3, #28
 801c74a:	b2da      	uxtb	r2, r3
 801c74c:	2317      	movs	r3, #23
 801c74e:	18fb      	adds	r3, r7, r3
 801c750:	781b      	ldrb	r3, [r3, #0]
 801c752:	005b      	lsls	r3, r3, #1
 801c754:	0019      	movs	r1, r3
 801c756:	68bb      	ldr	r3, [r7, #8]
 801c758:	185b      	adds	r3, r3, r1
 801c75a:	3237      	adds	r2, #55	@ 0x37
 801c75c:	b2d2      	uxtb	r2, r2
 801c75e:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 801c760:	68fb      	ldr	r3, [r7, #12]
 801c762:	011b      	lsls	r3, r3, #4
 801c764:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 801c766:	2117      	movs	r1, #23
 801c768:	187b      	adds	r3, r7, r1
 801c76a:	781b      	ldrb	r3, [r3, #0]
 801c76c:	005b      	lsls	r3, r3, #1
 801c76e:	3301      	adds	r3, #1
 801c770:	68ba      	ldr	r2, [r7, #8]
 801c772:	18d3      	adds	r3, r2, r3
 801c774:	2200      	movs	r2, #0
 801c776:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 801c778:	187b      	adds	r3, r7, r1
 801c77a:	781a      	ldrb	r2, [r3, #0]
 801c77c:	187b      	adds	r3, r7, r1
 801c77e:	3201      	adds	r2, #1
 801c780:	701a      	strb	r2, [r3, #0]
 801c782:	2317      	movs	r3, #23
 801c784:	18fa      	adds	r2, r7, r3
 801c786:	1dfb      	adds	r3, r7, #7
 801c788:	7812      	ldrb	r2, [r2, #0]
 801c78a:	781b      	ldrb	r3, [r3, #0]
 801c78c:	429a      	cmp	r2, r3
 801c78e:	d3c8      	bcc.n	801c722 <IntToUnicode+0x1e>
  }
}
 801c790:	46c0      	nop			@ (mov r8, r8)
 801c792:	46c0      	nop			@ (mov r8, r8)
 801c794:	46bd      	mov	sp, r7
 801c796:	b006      	add	sp, #24
 801c798:	bd80      	pop	{r7, pc}
	...

0801c79c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 801c79c:	b580      	push	{r7, lr}
 801c79e:	b082      	sub	sp, #8
 801c7a0:	af00      	add	r7, sp, #0
 801c7a2:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 801c7a4:	687b      	ldr	r3, [r7, #4]
 801c7a6:	681b      	ldr	r3, [r3, #0]
 801c7a8:	4a0a      	ldr	r2, [pc, #40]	@ (801c7d4 <HAL_PCD_MspInit+0x38>)
 801c7aa:	4293      	cmp	r3, r2
 801c7ac:	d10e      	bne.n	801c7cc <HAL_PCD_MspInit+0x30>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 801c7ae:	4b0a      	ldr	r3, [pc, #40]	@ (801c7d8 <HAL_PCD_MspInit+0x3c>)
 801c7b0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801c7b2:	4b09      	ldr	r3, [pc, #36]	@ (801c7d8 <HAL_PCD_MspInit+0x3c>)
 801c7b4:	2180      	movs	r1, #128	@ 0x80
 801c7b6:	0409      	lsls	r1, r1, #16
 801c7b8:	430a      	orrs	r2, r1
 801c7ba:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_IRQn, 0, 0);
 801c7bc:	2200      	movs	r2, #0
 801c7be:	2100      	movs	r1, #0
 801c7c0:	201f      	movs	r0, #31
 801c7c2:	f7f2 faf5 	bl	800edb0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_IRQn);
 801c7c6:	201f      	movs	r0, #31
 801c7c8:	f7f2 fb07 	bl	800edda <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 801c7cc:	46c0      	nop			@ (mov r8, r8)
 801c7ce:	46bd      	mov	sp, r7
 801c7d0:	b002      	add	sp, #8
 801c7d2:	bd80      	pop	{r7, pc}
 801c7d4:	40005c00 	.word	0x40005c00
 801c7d8:	40021000 	.word	0x40021000

0801c7dc <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801c7dc:	b580      	push	{r7, lr}
 801c7de:	b082      	sub	sp, #8
 801c7e0:	af00      	add	r7, sp, #0
 801c7e2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 801c7e4:	687a      	ldr	r2, [r7, #4]
 801c7e6:	23bc      	movs	r3, #188	@ 0xbc
 801c7e8:	009b      	lsls	r3, r3, #2
 801c7ea:	58d2      	ldr	r2, [r2, r3]
 801c7ec:	687b      	ldr	r3, [r7, #4]
 801c7ee:	21ac      	movs	r1, #172	@ 0xac
 801c7f0:	0089      	lsls	r1, r1, #2
 801c7f2:	468c      	mov	ip, r1
 801c7f4:	4463      	add	r3, ip
 801c7f6:	0019      	movs	r1, r3
 801c7f8:	0010      	movs	r0, r2
 801c7fa:	f7fe fc1d 	bl	801b038 <USBD_LL_SetupStage>
}
 801c7fe:	46c0      	nop			@ (mov r8, r8)
 801c800:	46bd      	mov	sp, r7
 801c802:	b002      	add	sp, #8
 801c804:	bd80      	pop	{r7, pc}

0801c806 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801c806:	b590      	push	{r4, r7, lr}
 801c808:	b083      	sub	sp, #12
 801c80a:	af00      	add	r7, sp, #0
 801c80c:	6078      	str	r0, [r7, #4]
 801c80e:	000a      	movs	r2, r1
 801c810:	1cfb      	adds	r3, r7, #3
 801c812:	701a      	strb	r2, [r3, #0]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 801c814:	687a      	ldr	r2, [r7, #4]
 801c816:	23bc      	movs	r3, #188	@ 0xbc
 801c818:	009b      	lsls	r3, r3, #2
 801c81a:	58d4      	ldr	r4, [r2, r3]
 801c81c:	1cfb      	adds	r3, r7, #3
 801c81e:	781a      	ldrb	r2, [r3, #0]
 801c820:	6878      	ldr	r0, [r7, #4]
 801c822:	23be      	movs	r3, #190	@ 0xbe
 801c824:	0059      	lsls	r1, r3, #1
 801c826:	0013      	movs	r3, r2
 801c828:	009b      	lsls	r3, r3, #2
 801c82a:	189b      	adds	r3, r3, r2
 801c82c:	00db      	lsls	r3, r3, #3
 801c82e:	18c3      	adds	r3, r0, r3
 801c830:	185b      	adds	r3, r3, r1
 801c832:	681a      	ldr	r2, [r3, #0]
 801c834:	1cfb      	adds	r3, r7, #3
 801c836:	781b      	ldrb	r3, [r3, #0]
 801c838:	0019      	movs	r1, r3
 801c83a:	0020      	movs	r0, r4
 801c83c:	f7fe fc5a 	bl	801b0f4 <USBD_LL_DataOutStage>
}
 801c840:	46c0      	nop			@ (mov r8, r8)
 801c842:	46bd      	mov	sp, r7
 801c844:	b003      	add	sp, #12
 801c846:	bd90      	pop	{r4, r7, pc}

0801c848 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801c848:	b580      	push	{r7, lr}
 801c84a:	b082      	sub	sp, #8
 801c84c:	af00      	add	r7, sp, #0
 801c84e:	6078      	str	r0, [r7, #4]
 801c850:	000a      	movs	r2, r1
 801c852:	1cfb      	adds	r3, r7, #3
 801c854:	701a      	strb	r2, [r3, #0]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 801c856:	687a      	ldr	r2, [r7, #4]
 801c858:	23bc      	movs	r3, #188	@ 0xbc
 801c85a:	009b      	lsls	r3, r3, #2
 801c85c:	58d0      	ldr	r0, [r2, r3]
 801c85e:	1cfb      	adds	r3, r7, #3
 801c860:	781a      	ldrb	r2, [r3, #0]
 801c862:	6879      	ldr	r1, [r7, #4]
 801c864:	0013      	movs	r3, r2
 801c866:	009b      	lsls	r3, r3, #2
 801c868:	189b      	adds	r3, r3, r2
 801c86a:	00db      	lsls	r3, r3, #3
 801c86c:	18cb      	adds	r3, r1, r3
 801c86e:	333c      	adds	r3, #60	@ 0x3c
 801c870:	681a      	ldr	r2, [r3, #0]
 801c872:	1cfb      	adds	r3, r7, #3
 801c874:	781b      	ldrb	r3, [r3, #0]
 801c876:	0019      	movs	r1, r3
 801c878:	f7fe fcbe 	bl	801b1f8 <USBD_LL_DataInStage>
}
 801c87c:	46c0      	nop			@ (mov r8, r8)
 801c87e:	46bd      	mov	sp, r7
 801c880:	b002      	add	sp, #8
 801c882:	bd80      	pop	{r7, pc}

0801c884 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801c884:	b580      	push	{r7, lr}
 801c886:	b082      	sub	sp, #8
 801c888:	af00      	add	r7, sp, #0
 801c88a:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 801c88c:	687a      	ldr	r2, [r7, #4]
 801c88e:	23bc      	movs	r3, #188	@ 0xbc
 801c890:	009b      	lsls	r3, r3, #2
 801c892:	58d3      	ldr	r3, [r2, r3]
 801c894:	0018      	movs	r0, r3
 801c896:	f7fe fdf5 	bl	801b484 <USBD_LL_SOF>
}
 801c89a:	46c0      	nop			@ (mov r8, r8)
 801c89c:	46bd      	mov	sp, r7
 801c89e:	b002      	add	sp, #8
 801c8a0:	bd80      	pop	{r7, pc}

0801c8a2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801c8a2:	b580      	push	{r7, lr}
 801c8a4:	b084      	sub	sp, #16
 801c8a6:	af00      	add	r7, sp, #0
 801c8a8:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 801c8aa:	230f      	movs	r3, #15
 801c8ac:	18fb      	adds	r3, r7, r3
 801c8ae:	2201      	movs	r2, #1
 801c8b0:	701a      	strb	r2, [r3, #0]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 801c8b2:	687b      	ldr	r3, [r7, #4]
 801c8b4:	689b      	ldr	r3, [r3, #8]
 801c8b6:	2b02      	cmp	r3, #2
 801c8b8:	d001      	beq.n	801c8be <HAL_PCD_ResetCallback+0x1c>
  {
    Error_Handler();
 801c8ba:	f7eb fbd5 	bl	8008068 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 801c8be:	687a      	ldr	r2, [r7, #4]
 801c8c0:	23bc      	movs	r3, #188	@ 0xbc
 801c8c2:	009b      	lsls	r3, r3, #2
 801c8c4:	58d2      	ldr	r2, [r2, r3]
 801c8c6:	230f      	movs	r3, #15
 801c8c8:	18fb      	adds	r3, r7, r3
 801c8ca:	781b      	ldrb	r3, [r3, #0]
 801c8cc:	0019      	movs	r1, r3
 801c8ce:	0010      	movs	r0, r2
 801c8d0:	f7fe fd97 	bl	801b402 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 801c8d4:	687a      	ldr	r2, [r7, #4]
 801c8d6:	23bc      	movs	r3, #188	@ 0xbc
 801c8d8:	009b      	lsls	r3, r3, #2
 801c8da:	58d3      	ldr	r3, [r2, r3]
 801c8dc:	0018      	movs	r0, r3
 801c8de:	f7fe fd48 	bl	801b372 <USBD_LL_Reset>
}
 801c8e2:	46c0      	nop			@ (mov r8, r8)
 801c8e4:	46bd      	mov	sp, r7
 801c8e6:	b004      	add	sp, #16
 801c8e8:	bd80      	pop	{r7, pc}
	...

0801c8ec <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801c8ec:	b580      	push	{r7, lr}
 801c8ee:	b082      	sub	sp, #8
 801c8f0:	af00      	add	r7, sp, #0
 801c8f2:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 801c8f4:	687a      	ldr	r2, [r7, #4]
 801c8f6:	23bc      	movs	r3, #188	@ 0xbc
 801c8f8:	009b      	lsls	r3, r3, #2
 801c8fa:	58d3      	ldr	r3, [r2, r3]
 801c8fc:	0018      	movs	r0, r3
 801c8fe:	f7fe fd91 	bl	801b424 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 801c902:	687b      	ldr	r3, [r7, #4]
 801c904:	699b      	ldr	r3, [r3, #24]
 801c906:	2b00      	cmp	r3, #0
 801c908:	d005      	beq.n	801c916 <HAL_PCD_SuspendCallback+0x2a>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801c90a:	4b05      	ldr	r3, [pc, #20]	@ (801c920 <HAL_PCD_SuspendCallback+0x34>)
 801c90c:	691a      	ldr	r2, [r3, #16]
 801c90e:	4b04      	ldr	r3, [pc, #16]	@ (801c920 <HAL_PCD_SuspendCallback+0x34>)
 801c910:	2106      	movs	r1, #6
 801c912:	430a      	orrs	r2, r1
 801c914:	611a      	str	r2, [r3, #16]
  }
  /* USER CODE END 2 */
}
 801c916:	46c0      	nop			@ (mov r8, r8)
 801c918:	46bd      	mov	sp, r7
 801c91a:	b002      	add	sp, #8
 801c91c:	bd80      	pop	{r7, pc}
 801c91e:	46c0      	nop			@ (mov r8, r8)
 801c920:	e000ed00 	.word	0xe000ed00

0801c924 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801c924:	b580      	push	{r7, lr}
 801c926:	b082      	sub	sp, #8
 801c928:	af00      	add	r7, sp, #0
 801c92a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 801c92c:	687b      	ldr	r3, [r7, #4]
 801c92e:	699b      	ldr	r3, [r3, #24]
 801c930:	2b00      	cmp	r3, #0
 801c932:	d007      	beq.n	801c944 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801c934:	4b09      	ldr	r3, [pc, #36]	@ (801c95c <HAL_PCD_ResumeCallback+0x38>)
 801c936:	691a      	ldr	r2, [r3, #16]
 801c938:	4b08      	ldr	r3, [pc, #32]	@ (801c95c <HAL_PCD_ResumeCallback+0x38>)
 801c93a:	2106      	movs	r1, #6
 801c93c:	438a      	bics	r2, r1
 801c93e:	611a      	str	r2, [r3, #16]
    SystemClockConfig_Resume();
 801c940:	f000 fa44 	bl	801cdcc <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 801c944:	687a      	ldr	r2, [r7, #4]
 801c946:	23bc      	movs	r3, #188	@ 0xbc
 801c948:	009b      	lsls	r3, r3, #2
 801c94a:	58d3      	ldr	r3, [r2, r3]
 801c94c:	0018      	movs	r0, r3
 801c94e:	f7fe fd81 	bl	801b454 <USBD_LL_Resume>
}
 801c952:	46c0      	nop			@ (mov r8, r8)
 801c954:	46bd      	mov	sp, r7
 801c956:	b002      	add	sp, #8
 801c958:	bd80      	pop	{r7, pc}
 801c95a:	46c0      	nop			@ (mov r8, r8)
 801c95c:	e000ed00 	.word	0xe000ed00

0801c960 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 801c960:	b580      	push	{r7, lr}
 801c962:	b082      	sub	sp, #8
 801c964:	af00      	add	r7, sp, #0
 801c966:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 801c968:	4a2d      	ldr	r2, [pc, #180]	@ (801ca20 <USBD_LL_Init+0xc0>)
 801c96a:	23bc      	movs	r3, #188	@ 0xbc
 801c96c:	009b      	lsls	r3, r3, #2
 801c96e:	6879      	ldr	r1, [r7, #4]
 801c970:	50d1      	str	r1, [r2, r3]
  pdev->pData = &hpcd_USB_FS;
 801c972:	687a      	ldr	r2, [r7, #4]
 801c974:	23b0      	movs	r3, #176	@ 0xb0
 801c976:	009b      	lsls	r3, r3, #2
 801c978:	4929      	ldr	r1, [pc, #164]	@ (801ca20 <USBD_LL_Init+0xc0>)
 801c97a:	50d1      	str	r1, [r2, r3]

  hpcd_USB_FS.Instance = USB;
 801c97c:	4b28      	ldr	r3, [pc, #160]	@ (801ca20 <USBD_LL_Init+0xc0>)
 801c97e:	4a29      	ldr	r2, [pc, #164]	@ (801ca24 <USBD_LL_Init+0xc4>)
 801c980:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 801c982:	4b27      	ldr	r3, [pc, #156]	@ (801ca20 <USBD_LL_Init+0xc0>)
 801c984:	2208      	movs	r2, #8
 801c986:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 801c988:	4b25      	ldr	r3, [pc, #148]	@ (801ca20 <USBD_LL_Init+0xc0>)
 801c98a:	2202      	movs	r2, #2
 801c98c:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 801c98e:	4b24      	ldr	r3, [pc, #144]	@ (801ca20 <USBD_LL_Init+0xc0>)
 801c990:	2202      	movs	r2, #2
 801c992:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 801c994:	4b22      	ldr	r3, [pc, #136]	@ (801ca20 <USBD_LL_Init+0xc0>)
 801c996:	2200      	movs	r2, #0
 801c998:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 801c99a:	4b21      	ldr	r3, [pc, #132]	@ (801ca20 <USBD_LL_Init+0xc0>)
 801c99c:	2200      	movs	r2, #0
 801c99e:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 801c9a0:	4b1f      	ldr	r3, [pc, #124]	@ (801ca20 <USBD_LL_Init+0xc0>)
 801c9a2:	2200      	movs	r2, #0
 801c9a4:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 801c9a6:	4b1e      	ldr	r3, [pc, #120]	@ (801ca20 <USBD_LL_Init+0xc0>)
 801c9a8:	0018      	movs	r0, r3
 801c9aa:	f7f5 ffab 	bl	8012904 <HAL_PCD_Init>
 801c9ae:	1e03      	subs	r3, r0, #0
 801c9b0:	d001      	beq.n	801c9b6 <USBD_LL_Init+0x56>
  {
    Error_Handler( );
 801c9b2:	f7eb fb59 	bl	8008068 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 801c9b6:	687a      	ldr	r2, [r7, #4]
 801c9b8:	23b0      	movs	r3, #176	@ 0xb0
 801c9ba:	009b      	lsls	r3, r3, #2
 801c9bc:	58d0      	ldr	r0, [r2, r3]
 801c9be:	2318      	movs	r3, #24
 801c9c0:	2200      	movs	r2, #0
 801c9c2:	2100      	movs	r1, #0
 801c9c4:	f7f7 fd6c 	bl	80144a0 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 801c9c8:	687a      	ldr	r2, [r7, #4]
 801c9ca:	23b0      	movs	r3, #176	@ 0xb0
 801c9cc:	009b      	lsls	r3, r3, #2
 801c9ce:	58d0      	ldr	r0, [r2, r3]
 801c9d0:	2358      	movs	r3, #88	@ 0x58
 801c9d2:	2200      	movs	r2, #0
 801c9d4:	2180      	movs	r1, #128	@ 0x80
 801c9d6:	f7f7 fd63 	bl	80144a0 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 801c9da:	687a      	ldr	r2, [r7, #4]
 801c9dc:	23b0      	movs	r3, #176	@ 0xb0
 801c9de:	009b      	lsls	r3, r3, #2
 801c9e0:	58d0      	ldr	r0, [r2, r3]
 801c9e2:	23c0      	movs	r3, #192	@ 0xc0
 801c9e4:	2200      	movs	r2, #0
 801c9e6:	2181      	movs	r1, #129	@ 0x81
 801c9e8:	f7f7 fd5a 	bl	80144a0 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 801c9ec:	687a      	ldr	r2, [r7, #4]
 801c9ee:	23b0      	movs	r3, #176	@ 0xb0
 801c9f0:	009b      	lsls	r3, r3, #2
 801c9f2:	58d0      	ldr	r0, [r2, r3]
 801c9f4:	2388      	movs	r3, #136	@ 0x88
 801c9f6:	005b      	lsls	r3, r3, #1
 801c9f8:	2200      	movs	r2, #0
 801c9fa:	2101      	movs	r1, #1
 801c9fc:	f7f7 fd50 	bl	80144a0 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 801ca00:	687a      	ldr	r2, [r7, #4]
 801ca02:	23b0      	movs	r3, #176	@ 0xb0
 801ca04:	009b      	lsls	r3, r3, #2
 801ca06:	58d0      	ldr	r0, [r2, r3]
 801ca08:	2380      	movs	r3, #128	@ 0x80
 801ca0a:	005b      	lsls	r3, r3, #1
 801ca0c:	2200      	movs	r2, #0
 801ca0e:	2182      	movs	r1, #130	@ 0x82
 801ca10:	f7f7 fd46 	bl	80144a0 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 801ca14:	2300      	movs	r3, #0
}
 801ca16:	0018      	movs	r0, r3
 801ca18:	46bd      	mov	sp, r7
 801ca1a:	b002      	add	sp, #8
 801ca1c:	bd80      	pop	{r7, pc}
 801ca1e:	46c0      	nop			@ (mov r8, r8)
 801ca20:	20003338 	.word	0x20003338
 801ca24:	40005c00 	.word	0x40005c00

0801ca28 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 801ca28:	b5f0      	push	{r4, r5, r6, r7, lr}
 801ca2a:	b085      	sub	sp, #20
 801ca2c:	af00      	add	r7, sp, #0
 801ca2e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801ca30:	210f      	movs	r1, #15
 801ca32:	187b      	adds	r3, r7, r1
 801ca34:	2200      	movs	r2, #0
 801ca36:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801ca38:	260e      	movs	r6, #14
 801ca3a:	19bb      	adds	r3, r7, r6
 801ca3c:	2200      	movs	r2, #0
 801ca3e:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_Start(pdev->pData);
 801ca40:	687a      	ldr	r2, [r7, #4]
 801ca42:	23b0      	movs	r3, #176	@ 0xb0
 801ca44:	009b      	lsls	r3, r3, #2
 801ca46:	58d3      	ldr	r3, [r2, r3]
 801ca48:	000d      	movs	r5, r1
 801ca4a:	187c      	adds	r4, r7, r1
 801ca4c:	0018      	movs	r0, r3
 801ca4e:	f7f6 f859 	bl	8012b04 <HAL_PCD_Start>
 801ca52:	0003      	movs	r3, r0
 801ca54:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801ca56:	19bc      	adds	r4, r7, r6
 801ca58:	197b      	adds	r3, r7, r5
 801ca5a:	781b      	ldrb	r3, [r3, #0]
 801ca5c:	0018      	movs	r0, r3
 801ca5e:	f000 f9bc 	bl	801cdda <USBD_Get_USB_Status>
 801ca62:	0003      	movs	r3, r0
 801ca64:	7023      	strb	r3, [r4, #0]

  return usb_status;
 801ca66:	19bb      	adds	r3, r7, r6
 801ca68:	781b      	ldrb	r3, [r3, #0]
}
 801ca6a:	0018      	movs	r0, r3
 801ca6c:	46bd      	mov	sp, r7
 801ca6e:	b005      	add	sp, #20
 801ca70:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801ca72 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 801ca72:	b5f0      	push	{r4, r5, r6, r7, lr}
 801ca74:	b085      	sub	sp, #20
 801ca76:	af00      	add	r7, sp, #0
 801ca78:	6078      	str	r0, [r7, #4]
 801ca7a:	000c      	movs	r4, r1
 801ca7c:	0010      	movs	r0, r2
 801ca7e:	0019      	movs	r1, r3
 801ca80:	1cfb      	adds	r3, r7, #3
 801ca82:	1c22      	adds	r2, r4, #0
 801ca84:	701a      	strb	r2, [r3, #0]
 801ca86:	1cbb      	adds	r3, r7, #2
 801ca88:	1c02      	adds	r2, r0, #0
 801ca8a:	701a      	strb	r2, [r3, #0]
 801ca8c:	003b      	movs	r3, r7
 801ca8e:	1c0a      	adds	r2, r1, #0
 801ca90:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801ca92:	260f      	movs	r6, #15
 801ca94:	19bb      	adds	r3, r7, r6
 801ca96:	2200      	movs	r2, #0
 801ca98:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801ca9a:	250e      	movs	r5, #14
 801ca9c:	197b      	adds	r3, r7, r5
 801ca9e:	2200      	movs	r2, #0
 801caa0:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 801caa2:	687a      	ldr	r2, [r7, #4]
 801caa4:	23b0      	movs	r3, #176	@ 0xb0
 801caa6:	009b      	lsls	r3, r3, #2
 801caa8:	58d0      	ldr	r0, [r2, r3]
 801caaa:	19bc      	adds	r4, r7, r6
 801caac:	1cbb      	adds	r3, r7, #2
 801caae:	781d      	ldrb	r5, [r3, #0]
 801cab0:	003b      	movs	r3, r7
 801cab2:	881a      	ldrh	r2, [r3, #0]
 801cab4:	1cfb      	adds	r3, r7, #3
 801cab6:	7819      	ldrb	r1, [r3, #0]
 801cab8:	002b      	movs	r3, r5
 801caba:	f7f6 f9b8 	bl	8012e2e <HAL_PCD_EP_Open>
 801cabe:	0003      	movs	r3, r0
 801cac0:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801cac2:	250e      	movs	r5, #14
 801cac4:	197c      	adds	r4, r7, r5
 801cac6:	19bb      	adds	r3, r7, r6
 801cac8:	781b      	ldrb	r3, [r3, #0]
 801caca:	0018      	movs	r0, r3
 801cacc:	f000 f985 	bl	801cdda <USBD_Get_USB_Status>
 801cad0:	0003      	movs	r3, r0
 801cad2:	7023      	strb	r3, [r4, #0]

  return usb_status;
 801cad4:	197b      	adds	r3, r7, r5
 801cad6:	781b      	ldrb	r3, [r3, #0]
}
 801cad8:	0018      	movs	r0, r3
 801cada:	46bd      	mov	sp, r7
 801cadc:	b005      	add	sp, #20
 801cade:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801cae0 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801cae0:	b5f0      	push	{r4, r5, r6, r7, lr}
 801cae2:	b085      	sub	sp, #20
 801cae4:	af00      	add	r7, sp, #0
 801cae6:	6078      	str	r0, [r7, #4]
 801cae8:	000a      	movs	r2, r1
 801caea:	1cfb      	adds	r3, r7, #3
 801caec:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801caee:	210f      	movs	r1, #15
 801caf0:	187b      	adds	r3, r7, r1
 801caf2:	2200      	movs	r2, #0
 801caf4:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801caf6:	260e      	movs	r6, #14
 801caf8:	19bb      	adds	r3, r7, r6
 801cafa:	2200      	movs	r2, #0
 801cafc:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 801cafe:	687a      	ldr	r2, [r7, #4]
 801cb00:	23b0      	movs	r3, #176	@ 0xb0
 801cb02:	009b      	lsls	r3, r3, #2
 801cb04:	58d2      	ldr	r2, [r2, r3]
 801cb06:	000d      	movs	r5, r1
 801cb08:	187c      	adds	r4, r7, r1
 801cb0a:	1cfb      	adds	r3, r7, #3
 801cb0c:	781b      	ldrb	r3, [r3, #0]
 801cb0e:	0019      	movs	r1, r3
 801cb10:	0010      	movs	r0, r2
 801cb12:	f7f6 f9fb 	bl	8012f0c <HAL_PCD_EP_Close>
 801cb16:	0003      	movs	r3, r0
 801cb18:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801cb1a:	19bc      	adds	r4, r7, r6
 801cb1c:	197b      	adds	r3, r7, r5
 801cb1e:	781b      	ldrb	r3, [r3, #0]
 801cb20:	0018      	movs	r0, r3
 801cb22:	f000 f95a 	bl	801cdda <USBD_Get_USB_Status>
 801cb26:	0003      	movs	r3, r0
 801cb28:	7023      	strb	r3, [r4, #0]

  return usb_status;
 801cb2a:	19bb      	adds	r3, r7, r6
 801cb2c:	781b      	ldrb	r3, [r3, #0]
}
 801cb2e:	0018      	movs	r0, r3
 801cb30:	46bd      	mov	sp, r7
 801cb32:	b005      	add	sp, #20
 801cb34:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801cb36 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801cb36:	b5f0      	push	{r4, r5, r6, r7, lr}
 801cb38:	b085      	sub	sp, #20
 801cb3a:	af00      	add	r7, sp, #0
 801cb3c:	6078      	str	r0, [r7, #4]
 801cb3e:	000a      	movs	r2, r1
 801cb40:	1cfb      	adds	r3, r7, #3
 801cb42:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801cb44:	210f      	movs	r1, #15
 801cb46:	187b      	adds	r3, r7, r1
 801cb48:	2200      	movs	r2, #0
 801cb4a:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801cb4c:	260e      	movs	r6, #14
 801cb4e:	19bb      	adds	r3, r7, r6
 801cb50:	2200      	movs	r2, #0
 801cb52:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 801cb54:	687a      	ldr	r2, [r7, #4]
 801cb56:	23b0      	movs	r3, #176	@ 0xb0
 801cb58:	009b      	lsls	r3, r3, #2
 801cb5a:	58d2      	ldr	r2, [r2, r3]
 801cb5c:	000d      	movs	r5, r1
 801cb5e:	187c      	adds	r4, r7, r1
 801cb60:	1cfb      	adds	r3, r7, #3
 801cb62:	781b      	ldrb	r3, [r3, #0]
 801cb64:	0019      	movs	r1, r3
 801cb66:	0010      	movs	r0, r2
 801cb68:	f7f6 faad 	bl	80130c6 <HAL_PCD_EP_SetStall>
 801cb6c:	0003      	movs	r3, r0
 801cb6e:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801cb70:	19bc      	adds	r4, r7, r6
 801cb72:	197b      	adds	r3, r7, r5
 801cb74:	781b      	ldrb	r3, [r3, #0]
 801cb76:	0018      	movs	r0, r3
 801cb78:	f000 f92f 	bl	801cdda <USBD_Get_USB_Status>
 801cb7c:	0003      	movs	r3, r0
 801cb7e:	7023      	strb	r3, [r4, #0]

  return usb_status;
 801cb80:	19bb      	adds	r3, r7, r6
 801cb82:	781b      	ldrb	r3, [r3, #0]
}
 801cb84:	0018      	movs	r0, r3
 801cb86:	46bd      	mov	sp, r7
 801cb88:	b005      	add	sp, #20
 801cb8a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801cb8c <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801cb8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801cb8e:	b085      	sub	sp, #20
 801cb90:	af00      	add	r7, sp, #0
 801cb92:	6078      	str	r0, [r7, #4]
 801cb94:	000a      	movs	r2, r1
 801cb96:	1cfb      	adds	r3, r7, #3
 801cb98:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801cb9a:	210f      	movs	r1, #15
 801cb9c:	187b      	adds	r3, r7, r1
 801cb9e:	2200      	movs	r2, #0
 801cba0:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801cba2:	260e      	movs	r6, #14
 801cba4:	19bb      	adds	r3, r7, r6
 801cba6:	2200      	movs	r2, #0
 801cba8:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 801cbaa:	687a      	ldr	r2, [r7, #4]
 801cbac:	23b0      	movs	r3, #176	@ 0xb0
 801cbae:	009b      	lsls	r3, r3, #2
 801cbb0:	58d2      	ldr	r2, [r2, r3]
 801cbb2:	000d      	movs	r5, r1
 801cbb4:	187c      	adds	r4, r7, r1
 801cbb6:	1cfb      	adds	r3, r7, #3
 801cbb8:	781b      	ldrb	r3, [r3, #0]
 801cbba:	0019      	movs	r1, r3
 801cbbc:	0010      	movs	r0, r2
 801cbbe:	f7f6 fade 	bl	801317e <HAL_PCD_EP_ClrStall>
 801cbc2:	0003      	movs	r3, r0
 801cbc4:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801cbc6:	19bc      	adds	r4, r7, r6
 801cbc8:	197b      	adds	r3, r7, r5
 801cbca:	781b      	ldrb	r3, [r3, #0]
 801cbcc:	0018      	movs	r0, r3
 801cbce:	f000 f904 	bl	801cdda <USBD_Get_USB_Status>
 801cbd2:	0003      	movs	r3, r0
 801cbd4:	7023      	strb	r3, [r4, #0]

  return usb_status;
 801cbd6:	19bb      	adds	r3, r7, r6
 801cbd8:	781b      	ldrb	r3, [r3, #0]
}
 801cbda:	0018      	movs	r0, r3
 801cbdc:	46bd      	mov	sp, r7
 801cbde:	b005      	add	sp, #20
 801cbe0:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801cbe2 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801cbe2:	b580      	push	{r7, lr}
 801cbe4:	b084      	sub	sp, #16
 801cbe6:	af00      	add	r7, sp, #0
 801cbe8:	6078      	str	r0, [r7, #4]
 801cbea:	000a      	movs	r2, r1
 801cbec:	1cfb      	adds	r3, r7, #3
 801cbee:	701a      	strb	r2, [r3, #0]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 801cbf0:	687a      	ldr	r2, [r7, #4]
 801cbf2:	23b0      	movs	r3, #176	@ 0xb0
 801cbf4:	009b      	lsls	r3, r3, #2
 801cbf6:	58d3      	ldr	r3, [r2, r3]
 801cbf8:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 801cbfa:	1cfb      	adds	r3, r7, #3
 801cbfc:	781b      	ldrb	r3, [r3, #0]
 801cbfe:	b25b      	sxtb	r3, r3
 801cc00:	2b00      	cmp	r3, #0
 801cc02:	da0d      	bge.n	801cc20 <USBD_LL_IsStallEP+0x3e>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 801cc04:	1cfb      	adds	r3, r7, #3
 801cc06:	781b      	ldrb	r3, [r3, #0]
 801cc08:	227f      	movs	r2, #127	@ 0x7f
 801cc0a:	4013      	ands	r3, r2
 801cc0c:	68f9      	ldr	r1, [r7, #12]
 801cc0e:	1c5a      	adds	r2, r3, #1
 801cc10:	0013      	movs	r3, r2
 801cc12:	009b      	lsls	r3, r3, #2
 801cc14:	189b      	adds	r3, r3, r2
 801cc16:	00db      	lsls	r3, r3, #3
 801cc18:	18cb      	adds	r3, r1, r3
 801cc1a:	3302      	adds	r3, #2
 801cc1c:	781b      	ldrb	r3, [r3, #0]
 801cc1e:	e00d      	b.n	801cc3c <USBD_LL_IsStallEP+0x5a>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 801cc20:	1cfb      	adds	r3, r7, #3
 801cc22:	781b      	ldrb	r3, [r3, #0]
 801cc24:	227f      	movs	r2, #127	@ 0x7f
 801cc26:	401a      	ands	r2, r3
 801cc28:	68f8      	ldr	r0, [r7, #12]
 801cc2a:	23b5      	movs	r3, #181	@ 0xb5
 801cc2c:	0059      	lsls	r1, r3, #1
 801cc2e:	0013      	movs	r3, r2
 801cc30:	009b      	lsls	r3, r3, #2
 801cc32:	189b      	adds	r3, r3, r2
 801cc34:	00db      	lsls	r3, r3, #3
 801cc36:	18c3      	adds	r3, r0, r3
 801cc38:	185b      	adds	r3, r3, r1
 801cc3a:	781b      	ldrb	r3, [r3, #0]
  }
}
 801cc3c:	0018      	movs	r0, r3
 801cc3e:	46bd      	mov	sp, r7
 801cc40:	b004      	add	sp, #16
 801cc42:	bd80      	pop	{r7, pc}

0801cc44 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 801cc44:	b5f0      	push	{r4, r5, r6, r7, lr}
 801cc46:	b085      	sub	sp, #20
 801cc48:	af00      	add	r7, sp, #0
 801cc4a:	6078      	str	r0, [r7, #4]
 801cc4c:	000a      	movs	r2, r1
 801cc4e:	1cfb      	adds	r3, r7, #3
 801cc50:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801cc52:	210f      	movs	r1, #15
 801cc54:	187b      	adds	r3, r7, r1
 801cc56:	2200      	movs	r2, #0
 801cc58:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801cc5a:	260e      	movs	r6, #14
 801cc5c:	19bb      	adds	r3, r7, r6
 801cc5e:	2200      	movs	r2, #0
 801cc60:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 801cc62:	687a      	ldr	r2, [r7, #4]
 801cc64:	23b0      	movs	r3, #176	@ 0xb0
 801cc66:	009b      	lsls	r3, r3, #2
 801cc68:	58d2      	ldr	r2, [r2, r3]
 801cc6a:	000d      	movs	r5, r1
 801cc6c:	187c      	adds	r4, r7, r1
 801cc6e:	1cfb      	adds	r3, r7, #3
 801cc70:	781b      	ldrb	r3, [r3, #0]
 801cc72:	0019      	movs	r1, r3
 801cc74:	0010      	movs	r0, r2
 801cc76:	f7f6 f8af 	bl	8012dd8 <HAL_PCD_SetAddress>
 801cc7a:	0003      	movs	r3, r0
 801cc7c:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801cc7e:	19bc      	adds	r4, r7, r6
 801cc80:	197b      	adds	r3, r7, r5
 801cc82:	781b      	ldrb	r3, [r3, #0]
 801cc84:	0018      	movs	r0, r3
 801cc86:	f000 f8a8 	bl	801cdda <USBD_Get_USB_Status>
 801cc8a:	0003      	movs	r3, r0
 801cc8c:	7023      	strb	r3, [r4, #0]

  return usb_status;
 801cc8e:	19bb      	adds	r3, r7, r6
 801cc90:	781b      	ldrb	r3, [r3, #0]
}
 801cc92:	0018      	movs	r0, r3
 801cc94:	46bd      	mov	sp, r7
 801cc96:	b005      	add	sp, #20
 801cc98:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801cc9a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 801cc9a:	b5f0      	push	{r4, r5, r6, r7, lr}
 801cc9c:	b087      	sub	sp, #28
 801cc9e:	af00      	add	r7, sp, #0
 801cca0:	60f8      	str	r0, [r7, #12]
 801cca2:	0008      	movs	r0, r1
 801cca4:	607a      	str	r2, [r7, #4]
 801cca6:	0019      	movs	r1, r3
 801cca8:	230b      	movs	r3, #11
 801ccaa:	18fb      	adds	r3, r7, r3
 801ccac:	1c02      	adds	r2, r0, #0
 801ccae:	701a      	strb	r2, [r3, #0]
 801ccb0:	2408      	movs	r4, #8
 801ccb2:	193b      	adds	r3, r7, r4
 801ccb4:	1c0a      	adds	r2, r1, #0
 801ccb6:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801ccb8:	2117      	movs	r1, #23
 801ccba:	187b      	adds	r3, r7, r1
 801ccbc:	2200      	movs	r2, #0
 801ccbe:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801ccc0:	2516      	movs	r5, #22
 801ccc2:	197b      	adds	r3, r7, r5
 801ccc4:	2200      	movs	r2, #0
 801ccc6:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 801ccc8:	68fa      	ldr	r2, [r7, #12]
 801ccca:	23b0      	movs	r3, #176	@ 0xb0
 801cccc:	009b      	lsls	r3, r3, #2
 801ccce:	58d0      	ldr	r0, [r2, r3]
 801ccd0:	193b      	adds	r3, r7, r4
 801ccd2:	881d      	ldrh	r5, [r3, #0]
 801ccd4:	000e      	movs	r6, r1
 801ccd6:	187c      	adds	r4, r7, r1
 801ccd8:	687a      	ldr	r2, [r7, #4]
 801ccda:	230b      	movs	r3, #11
 801ccdc:	18fb      	adds	r3, r7, r3
 801ccde:	7819      	ldrb	r1, [r3, #0]
 801cce0:	002b      	movs	r3, r5
 801cce2:	f7f6 f9b4 	bl	801304e <HAL_PCD_EP_Transmit>
 801cce6:	0003      	movs	r3, r0
 801cce8:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801ccea:	2516      	movs	r5, #22
 801ccec:	197c      	adds	r4, r7, r5
 801ccee:	19bb      	adds	r3, r7, r6
 801ccf0:	781b      	ldrb	r3, [r3, #0]
 801ccf2:	0018      	movs	r0, r3
 801ccf4:	f000 f871 	bl	801cdda <USBD_Get_USB_Status>
 801ccf8:	0003      	movs	r3, r0
 801ccfa:	7023      	strb	r3, [r4, #0]

  return usb_status;
 801ccfc:	197b      	adds	r3, r7, r5
 801ccfe:	781b      	ldrb	r3, [r3, #0]
}
 801cd00:	0018      	movs	r0, r3
 801cd02:	46bd      	mov	sp, r7
 801cd04:	b007      	add	sp, #28
 801cd06:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801cd08 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 801cd08:	b5f0      	push	{r4, r5, r6, r7, lr}
 801cd0a:	b087      	sub	sp, #28
 801cd0c:	af00      	add	r7, sp, #0
 801cd0e:	60f8      	str	r0, [r7, #12]
 801cd10:	0008      	movs	r0, r1
 801cd12:	607a      	str	r2, [r7, #4]
 801cd14:	0019      	movs	r1, r3
 801cd16:	230b      	movs	r3, #11
 801cd18:	18fb      	adds	r3, r7, r3
 801cd1a:	1c02      	adds	r2, r0, #0
 801cd1c:	701a      	strb	r2, [r3, #0]
 801cd1e:	2408      	movs	r4, #8
 801cd20:	193b      	adds	r3, r7, r4
 801cd22:	1c0a      	adds	r2, r1, #0
 801cd24:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801cd26:	2117      	movs	r1, #23
 801cd28:	187b      	adds	r3, r7, r1
 801cd2a:	2200      	movs	r2, #0
 801cd2c:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801cd2e:	2516      	movs	r5, #22
 801cd30:	197b      	adds	r3, r7, r5
 801cd32:	2200      	movs	r2, #0
 801cd34:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 801cd36:	68fa      	ldr	r2, [r7, #12]
 801cd38:	23b0      	movs	r3, #176	@ 0xb0
 801cd3a:	009b      	lsls	r3, r3, #2
 801cd3c:	58d0      	ldr	r0, [r2, r3]
 801cd3e:	193b      	adds	r3, r7, r4
 801cd40:	881d      	ldrh	r5, [r3, #0]
 801cd42:	000e      	movs	r6, r1
 801cd44:	187c      	adds	r4, r7, r1
 801cd46:	687a      	ldr	r2, [r7, #4]
 801cd48:	230b      	movs	r3, #11
 801cd4a:	18fb      	adds	r3, r7, r3
 801cd4c:	7819      	ldrb	r1, [r3, #0]
 801cd4e:	002b      	movs	r3, r5
 801cd50:	f7f6 f92d 	bl	8012fae <HAL_PCD_EP_Receive>
 801cd54:	0003      	movs	r3, r0
 801cd56:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801cd58:	2516      	movs	r5, #22
 801cd5a:	197c      	adds	r4, r7, r5
 801cd5c:	19bb      	adds	r3, r7, r6
 801cd5e:	781b      	ldrb	r3, [r3, #0]
 801cd60:	0018      	movs	r0, r3
 801cd62:	f000 f83a 	bl	801cdda <USBD_Get_USB_Status>
 801cd66:	0003      	movs	r3, r0
 801cd68:	7023      	strb	r3, [r4, #0]

  return usb_status;
 801cd6a:	197b      	adds	r3, r7, r5
 801cd6c:	781b      	ldrb	r3, [r3, #0]
}
 801cd6e:	0018      	movs	r0, r3
 801cd70:	46bd      	mov	sp, r7
 801cd72:	b007      	add	sp, #28
 801cd74:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801cd76 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801cd76:	b580      	push	{r7, lr}
 801cd78:	b082      	sub	sp, #8
 801cd7a:	af00      	add	r7, sp, #0
 801cd7c:	6078      	str	r0, [r7, #4]
 801cd7e:	000a      	movs	r2, r1
 801cd80:	1cfb      	adds	r3, r7, #3
 801cd82:	701a      	strb	r2, [r3, #0]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 801cd84:	687a      	ldr	r2, [r7, #4]
 801cd86:	23b0      	movs	r3, #176	@ 0xb0
 801cd88:	009b      	lsls	r3, r3, #2
 801cd8a:	58d2      	ldr	r2, [r2, r3]
 801cd8c:	1cfb      	adds	r3, r7, #3
 801cd8e:	781b      	ldrb	r3, [r3, #0]
 801cd90:	0019      	movs	r1, r3
 801cd92:	0010      	movs	r0, r2
 801cd94:	f7f6 f942 	bl	801301c <HAL_PCD_EP_GetRxCount>
 801cd98:	0003      	movs	r3, r0
}
 801cd9a:	0018      	movs	r0, r3
 801cd9c:	46bd      	mov	sp, r7
 801cd9e:	b002      	add	sp, #8
 801cda0:	bd80      	pop	{r7, pc}
	...

0801cda4 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 801cda4:	b580      	push	{r7, lr}
 801cda6:	b082      	sub	sp, #8
 801cda8:	af00      	add	r7, sp, #0
 801cdaa:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 801cdac:	4b02      	ldr	r3, [pc, #8]	@ (801cdb8 <USBD_static_malloc+0x14>)
}
 801cdae:	0018      	movs	r0, r3
 801cdb0:	46bd      	mov	sp, r7
 801cdb2:	b002      	add	sp, #8
 801cdb4:	bd80      	pop	{r7, pc}
 801cdb6:	46c0      	nop			@ (mov r8, r8)
 801cdb8:	2000362c 	.word	0x2000362c

0801cdbc <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 801cdbc:	b580      	push	{r7, lr}
 801cdbe:	b082      	sub	sp, #8
 801cdc0:	af00      	add	r7, sp, #0
 801cdc2:	6078      	str	r0, [r7, #4]

}
 801cdc4:	46c0      	nop			@ (mov r8, r8)
 801cdc6:	46bd      	mov	sp, r7
 801cdc8:	b002      	add	sp, #8
 801cdca:	bd80      	pop	{r7, pc}

0801cdcc <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 801cdcc:	b580      	push	{r7, lr}
 801cdce:	af00      	add	r7, sp, #0
  SystemClock_Config();
 801cdd0:	f7ea fff4 	bl	8007dbc <SystemClock_Config>
}
 801cdd4:	46c0      	nop			@ (mov r8, r8)
 801cdd6:	46bd      	mov	sp, r7
 801cdd8:	bd80      	pop	{r7, pc}

0801cdda <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 801cdda:	b580      	push	{r7, lr}
 801cddc:	b084      	sub	sp, #16
 801cdde:	af00      	add	r7, sp, #0
 801cde0:	0002      	movs	r2, r0
 801cde2:	1dfb      	adds	r3, r7, #7
 801cde4:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801cde6:	230f      	movs	r3, #15
 801cde8:	18fb      	adds	r3, r7, r3
 801cdea:	2200      	movs	r2, #0
 801cdec:	701a      	strb	r2, [r3, #0]

  switch (hal_status)
 801cdee:	1dfb      	adds	r3, r7, #7
 801cdf0:	781b      	ldrb	r3, [r3, #0]
 801cdf2:	2b03      	cmp	r3, #3
 801cdf4:	d017      	beq.n	801ce26 <USBD_Get_USB_Status+0x4c>
 801cdf6:	dc1b      	bgt.n	801ce30 <USBD_Get_USB_Status+0x56>
 801cdf8:	2b02      	cmp	r3, #2
 801cdfa:	d00f      	beq.n	801ce1c <USBD_Get_USB_Status+0x42>
 801cdfc:	dc18      	bgt.n	801ce30 <USBD_Get_USB_Status+0x56>
 801cdfe:	2b00      	cmp	r3, #0
 801ce00:	d002      	beq.n	801ce08 <USBD_Get_USB_Status+0x2e>
 801ce02:	2b01      	cmp	r3, #1
 801ce04:	d005      	beq.n	801ce12 <USBD_Get_USB_Status+0x38>
 801ce06:	e013      	b.n	801ce30 <USBD_Get_USB_Status+0x56>
  {
    case HAL_OK :
      usb_status = USBD_OK;
 801ce08:	230f      	movs	r3, #15
 801ce0a:	18fb      	adds	r3, r7, r3
 801ce0c:	2200      	movs	r2, #0
 801ce0e:	701a      	strb	r2, [r3, #0]
    break;
 801ce10:	e013      	b.n	801ce3a <USBD_Get_USB_Status+0x60>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801ce12:	230f      	movs	r3, #15
 801ce14:	18fb      	adds	r3, r7, r3
 801ce16:	2202      	movs	r2, #2
 801ce18:	701a      	strb	r2, [r3, #0]
    break;
 801ce1a:	e00e      	b.n	801ce3a <USBD_Get_USB_Status+0x60>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 801ce1c:	230f      	movs	r3, #15
 801ce1e:	18fb      	adds	r3, r7, r3
 801ce20:	2201      	movs	r2, #1
 801ce22:	701a      	strb	r2, [r3, #0]
    break;
 801ce24:	e009      	b.n	801ce3a <USBD_Get_USB_Status+0x60>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801ce26:	230f      	movs	r3, #15
 801ce28:	18fb      	adds	r3, r7, r3
 801ce2a:	2202      	movs	r2, #2
 801ce2c:	701a      	strb	r2, [r3, #0]
    break;
 801ce2e:	e004      	b.n	801ce3a <USBD_Get_USB_Status+0x60>
    default :
      usb_status = USBD_FAIL;
 801ce30:	230f      	movs	r3, #15
 801ce32:	18fb      	adds	r3, r7, r3
 801ce34:	2202      	movs	r2, #2
 801ce36:	701a      	strb	r2, [r3, #0]
    break;
 801ce38:	46c0      	nop			@ (mov r8, r8)
  }
  return usb_status;
 801ce3a:	230f      	movs	r3, #15
 801ce3c:	18fb      	adds	r3, r7, r3
 801ce3e:	781b      	ldrb	r3, [r3, #0]
}
 801ce40:	0018      	movs	r0, r3
 801ce42:	46bd      	mov	sp, r7
 801ce44:	b004      	add	sp, #16
 801ce46:	bd80      	pop	{r7, pc}

0801ce48 <arm_cfft_radix4by2_q31>:
 801ce48:	b5f0      	push	{r4, r5, r6, r7, lr}
 801ce4a:	465f      	mov	r7, fp
 801ce4c:	4656      	mov	r6, sl
 801ce4e:	464d      	mov	r5, r9
 801ce50:	4644      	mov	r4, r8
 801ce52:	000b      	movs	r3, r1
 801ce54:	b4f0      	push	{r4, r5, r6, r7}
 801ce56:	085b      	lsrs	r3, r3, #1
 801ce58:	b08f      	sub	sp, #60	@ 0x3c
 801ce5a:	910a      	str	r1, [sp, #40]	@ 0x28
 801ce5c:	0007      	movs	r7, r0
 801ce5e:	9009      	str	r0, [sp, #36]	@ 0x24
 801ce60:	0011      	movs	r1, r2
 801ce62:	920b      	str	r2, [sp, #44]	@ 0x2c
 801ce64:	930c      	str	r3, [sp, #48]	@ 0x30
 801ce66:	2b00      	cmp	r3, #0
 801ce68:	d100      	bne.n	801ce6c <arm_cfft_radix4by2_q31+0x24>
 801ce6a:	e0a0      	b.n	801cfae <arm_cfft_radix4by2_q31+0x166>
 801ce6c:	0002      	movs	r2, r0
 801ce6e:	00db      	lsls	r3, r3, #3
 801ce70:	3204      	adds	r2, #4
 801ce72:	4691      	mov	r9, r2
 801ce74:	4698      	mov	r8, r3
 801ce76:	000a      	movs	r2, r1
 801ce78:	464e      	mov	r6, r9
 801ce7a:	4442      	add	r2, r8
 801ce7c:	4699      	mov	r9, r3
 801ce7e:	4688      	mov	r8, r1
 801ce80:	9208      	str	r2, [sp, #32]
 801ce82:	900d      	str	r0, [sp, #52]	@ 0x34
 801ce84:	4643      	mov	r3, r8
 801ce86:	681b      	ldr	r3, [r3, #0]
 801ce88:	469b      	mov	fp, r3
 801ce8a:	4643      	mov	r3, r8
 801ce8c:	685b      	ldr	r3, [r3, #4]
 801ce8e:	469a      	mov	sl, r3
 801ce90:	683b      	ldr	r3, [r7, #0]
 801ce92:	109c      	asrs	r4, r3, #2
 801ce94:	464b      	mov	r3, r9
 801ce96:	58fb      	ldr	r3, [r7, r3]
 801ce98:	109a      	asrs	r2, r3, #2
 801ce9a:	18a3      	adds	r3, r4, r2
 801ce9c:	603b      	str	r3, [r7, #0]
 801ce9e:	6833      	ldr	r3, [r6, #0]
 801cea0:	1aa4      	subs	r4, r4, r2
 801cea2:	109d      	asrs	r5, r3, #2
 801cea4:	464b      	mov	r3, r9
 801cea6:	58f3      	ldr	r3, [r6, r3]
 801cea8:	17e2      	asrs	r2, r4, #31
 801ceaa:	109b      	asrs	r3, r3, #2
 801ceac:	18e9      	adds	r1, r5, r3
 801ceae:	6031      	str	r1, [r6, #0]
 801ceb0:	0011      	movs	r1, r2
 801ceb2:	465a      	mov	r2, fp
 801ceb4:	17d2      	asrs	r2, r2, #31
 801ceb6:	0010      	movs	r0, r2
 801ceb8:	4652      	mov	r2, sl
 801ceba:	1aed      	subs	r5, r5, r3
 801cebc:	17eb      	asrs	r3, r5, #31
 801cebe:	17d2      	asrs	r2, r2, #31
 801cec0:	9307      	str	r3, [sp, #28]
 801cec2:	9204      	str	r2, [sp, #16]
 801cec4:	0003      	movs	r3, r0
 801cec6:	465a      	mov	r2, fp
 801cec8:	9006      	str	r0, [sp, #24]
 801ceca:	0020      	movs	r0, r4
 801cecc:	9105      	str	r1, [sp, #20]
 801cece:	f7e3 fb77 	bl	80005c0 <__aeabi_lmul>
 801ced2:	2280      	movs	r2, #128	@ 0x80
 801ced4:	2300      	movs	r3, #0
 801ced6:	0612      	lsls	r2, r2, #24
 801ced8:	1880      	adds	r0, r0, r2
 801ceda:	4159      	adcs	r1, r3
 801cedc:	2300      	movs	r3, #0
 801cede:	9101      	str	r1, [sp, #4]
 801cee0:	9300      	str	r3, [sp, #0]
 801cee2:	4652      	mov	r2, sl
 801cee4:	9b04      	ldr	r3, [sp, #16]
 801cee6:	0028      	movs	r0, r5
 801cee8:	17e9      	asrs	r1, r5, #31
 801ceea:	f7e3 fb69 	bl	80005c0 <__aeabi_lmul>
 801ceee:	9a00      	ldr	r2, [sp, #0]
 801cef0:	9b01      	ldr	r3, [sp, #4]
 801cef2:	1880      	adds	r0, r0, r2
 801cef4:	4159      	adcs	r1, r3
 801cef6:	2280      	movs	r2, #128	@ 0x80
 801cef8:	2300      	movs	r3, #0
 801cefa:	0612      	lsls	r2, r2, #24
 801cefc:	1880      	adds	r0, r0, r2
 801cefe:	4159      	adcs	r1, r3
 801cf00:	464a      	mov	r2, r9
 801cf02:	004b      	lsls	r3, r1, #1
 801cf04:	50bb      	str	r3, [r7, r2]
 801cf06:	4658      	mov	r0, fp
 801cf08:	002a      	movs	r2, r5
 801cf0a:	9b07      	ldr	r3, [sp, #28]
 801cf0c:	9906      	ldr	r1, [sp, #24]
 801cf0e:	f7e3 fb57 	bl	80005c0 <__aeabi_lmul>
 801cf12:	2280      	movs	r2, #128	@ 0x80
 801cf14:	2300      	movs	r3, #0
 801cf16:	0612      	lsls	r2, r2, #24
 801cf18:	1880      	adds	r0, r0, r2
 801cf1a:	4159      	adcs	r1, r3
 801cf1c:	2000      	movs	r0, #0
 801cf1e:	9103      	str	r1, [sp, #12]
 801cf20:	9002      	str	r0, [sp, #8]
 801cf22:	4652      	mov	r2, sl
 801cf24:	9b04      	ldr	r3, [sp, #16]
 801cf26:	0020      	movs	r0, r4
 801cf28:	9905      	ldr	r1, [sp, #20]
 801cf2a:	f7e3 fb49 	bl	80005c0 <__aeabi_lmul>
 801cf2e:	9a02      	ldr	r2, [sp, #8]
 801cf30:	9b03      	ldr	r3, [sp, #12]
 801cf32:	1a12      	subs	r2, r2, r0
 801cf34:	418b      	sbcs	r3, r1
 801cf36:	2080      	movs	r0, #128	@ 0x80
 801cf38:	2100      	movs	r1, #0
 801cf3a:	0600      	lsls	r0, r0, #24
 801cf3c:	1812      	adds	r2, r2, r0
 801cf3e:	414b      	adcs	r3, r1
 801cf40:	464a      	mov	r2, r9
 801cf42:	005b      	lsls	r3, r3, #1
 801cf44:	50b3      	str	r3, [r6, r2]
 801cf46:	2308      	movs	r3, #8
 801cf48:	469c      	mov	ip, r3
 801cf4a:	9b08      	ldr	r3, [sp, #32]
 801cf4c:	44e0      	add	r8, ip
 801cf4e:	3708      	adds	r7, #8
 801cf50:	3608      	adds	r6, #8
 801cf52:	4598      	cmp	r8, r3
 801cf54:	d196      	bne.n	801ce84 <arm_cfft_radix4by2_q31+0x3c>
 801cf56:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 801cf58:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 801cf5a:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 801cf5c:	2302      	movs	r3, #2
 801cf5e:	003a      	movs	r2, r7
 801cf60:	0029      	movs	r1, r5
 801cf62:	0020      	movs	r0, r4
 801cf64:	9e0d      	ldr	r6, [sp, #52]	@ 0x34
 801cf66:	f000 f957 	bl	801d218 <arm_radix4_butterfly_q31>
 801cf6a:	46a4      	mov	ip, r4
 801cf6c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801cf6e:	2302      	movs	r3, #2
 801cf70:	0088      	lsls	r0, r1, #2
 801cf72:	4460      	add	r0, ip
 801cf74:	003a      	movs	r2, r7
 801cf76:	0029      	movs	r1, r5
 801cf78:	f000 f94e 	bl	801d218 <arm_radix4_butterfly_q31>
 801cf7c:	46a4      	mov	ip, r4
 801cf7e:	0128      	lsls	r0, r5, #4
 801cf80:	4460      	add	r0, ip
 801cf82:	6833      	ldr	r3, [r6, #0]
 801cf84:	005b      	lsls	r3, r3, #1
 801cf86:	6033      	str	r3, [r6, #0]
 801cf88:	6873      	ldr	r3, [r6, #4]
 801cf8a:	005b      	lsls	r3, r3, #1
 801cf8c:	6073      	str	r3, [r6, #4]
 801cf8e:	68b3      	ldr	r3, [r6, #8]
 801cf90:	005b      	lsls	r3, r3, #1
 801cf92:	60b3      	str	r3, [r6, #8]
 801cf94:	68f3      	ldr	r3, [r6, #12]
 801cf96:	005b      	lsls	r3, r3, #1
 801cf98:	60f3      	str	r3, [r6, #12]
 801cf9a:	3610      	adds	r6, #16
 801cf9c:	42b0      	cmp	r0, r6
 801cf9e:	d1f0      	bne.n	801cf82 <arm_cfft_radix4by2_q31+0x13a>
 801cfa0:	b00f      	add	sp, #60	@ 0x3c
 801cfa2:	bc3c      	pop	{r2, r3, r4, r5}
 801cfa4:	4690      	mov	r8, r2
 801cfa6:	4699      	mov	r9, r3
 801cfa8:	46a2      	mov	sl, r4
 801cfaa:	46ab      	mov	fp, r5
 801cfac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801cfae:	2302      	movs	r3, #2
 801cfb0:	2100      	movs	r1, #0
 801cfb2:	0015      	movs	r5, r2
 801cfb4:	f000 f930 	bl	801d218 <arm_radix4_butterfly_q31>
 801cfb8:	46bc      	mov	ip, r7
 801cfba:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801cfbc:	002a      	movs	r2, r5
 801cfbe:	0098      	lsls	r0, r3, #2
 801cfc0:	4460      	add	r0, ip
 801cfc2:	2302      	movs	r3, #2
 801cfc4:	2100      	movs	r1, #0
 801cfc6:	f000 f927 	bl	801d218 <arm_radix4_butterfly_q31>
 801cfca:	e7e9      	b.n	801cfa0 <arm_cfft_radix4by2_q31+0x158>

0801cfcc <arm_cfft_radix4by2_inverse_q31>:
 801cfcc:	b5f0      	push	{r4, r5, r6, r7, lr}
 801cfce:	465f      	mov	r7, fp
 801cfd0:	4656      	mov	r6, sl
 801cfd2:	464d      	mov	r5, r9
 801cfd4:	4644      	mov	r4, r8
 801cfd6:	000b      	movs	r3, r1
 801cfd8:	b4f0      	push	{r4, r5, r6, r7}
 801cfda:	085b      	lsrs	r3, r3, #1
 801cfdc:	b08f      	sub	sp, #60	@ 0x3c
 801cfde:	910a      	str	r1, [sp, #40]	@ 0x28
 801cfe0:	0007      	movs	r7, r0
 801cfe2:	9009      	str	r0, [sp, #36]	@ 0x24
 801cfe4:	0011      	movs	r1, r2
 801cfe6:	920b      	str	r2, [sp, #44]	@ 0x2c
 801cfe8:	930c      	str	r3, [sp, #48]	@ 0x30
 801cfea:	2b00      	cmp	r3, #0
 801cfec:	d100      	bne.n	801cff0 <arm_cfft_radix4by2_inverse_q31+0x24>
 801cfee:	e0a0      	b.n	801d132 <arm_cfft_radix4by2_inverse_q31+0x166>
 801cff0:	0002      	movs	r2, r0
 801cff2:	00db      	lsls	r3, r3, #3
 801cff4:	3204      	adds	r2, #4
 801cff6:	4691      	mov	r9, r2
 801cff8:	4698      	mov	r8, r3
 801cffa:	000a      	movs	r2, r1
 801cffc:	464e      	mov	r6, r9
 801cffe:	4442      	add	r2, r8
 801d000:	4699      	mov	r9, r3
 801d002:	4688      	mov	r8, r1
 801d004:	9208      	str	r2, [sp, #32]
 801d006:	900d      	str	r0, [sp, #52]	@ 0x34
 801d008:	4643      	mov	r3, r8
 801d00a:	681b      	ldr	r3, [r3, #0]
 801d00c:	469b      	mov	fp, r3
 801d00e:	4643      	mov	r3, r8
 801d010:	685b      	ldr	r3, [r3, #4]
 801d012:	469a      	mov	sl, r3
 801d014:	683b      	ldr	r3, [r7, #0]
 801d016:	109c      	asrs	r4, r3, #2
 801d018:	464b      	mov	r3, r9
 801d01a:	58fb      	ldr	r3, [r7, r3]
 801d01c:	109a      	asrs	r2, r3, #2
 801d01e:	18a3      	adds	r3, r4, r2
 801d020:	603b      	str	r3, [r7, #0]
 801d022:	6833      	ldr	r3, [r6, #0]
 801d024:	1aa4      	subs	r4, r4, r2
 801d026:	109d      	asrs	r5, r3, #2
 801d028:	464b      	mov	r3, r9
 801d02a:	58f3      	ldr	r3, [r6, r3]
 801d02c:	17e2      	asrs	r2, r4, #31
 801d02e:	109b      	asrs	r3, r3, #2
 801d030:	18e9      	adds	r1, r5, r3
 801d032:	6031      	str	r1, [r6, #0]
 801d034:	0011      	movs	r1, r2
 801d036:	465a      	mov	r2, fp
 801d038:	17d2      	asrs	r2, r2, #31
 801d03a:	0010      	movs	r0, r2
 801d03c:	4652      	mov	r2, sl
 801d03e:	1aed      	subs	r5, r5, r3
 801d040:	17eb      	asrs	r3, r5, #31
 801d042:	17d2      	asrs	r2, r2, #31
 801d044:	9307      	str	r3, [sp, #28]
 801d046:	9204      	str	r2, [sp, #16]
 801d048:	0003      	movs	r3, r0
 801d04a:	465a      	mov	r2, fp
 801d04c:	9006      	str	r0, [sp, #24]
 801d04e:	0020      	movs	r0, r4
 801d050:	9105      	str	r1, [sp, #20]
 801d052:	f7e3 fab5 	bl	80005c0 <__aeabi_lmul>
 801d056:	2280      	movs	r2, #128	@ 0x80
 801d058:	2300      	movs	r3, #0
 801d05a:	0612      	lsls	r2, r2, #24
 801d05c:	1880      	adds	r0, r0, r2
 801d05e:	4159      	adcs	r1, r3
 801d060:	2300      	movs	r3, #0
 801d062:	9101      	str	r1, [sp, #4]
 801d064:	9300      	str	r3, [sp, #0]
 801d066:	4652      	mov	r2, sl
 801d068:	9b04      	ldr	r3, [sp, #16]
 801d06a:	0028      	movs	r0, r5
 801d06c:	17e9      	asrs	r1, r5, #31
 801d06e:	f7e3 faa7 	bl	80005c0 <__aeabi_lmul>
 801d072:	9a00      	ldr	r2, [sp, #0]
 801d074:	9b01      	ldr	r3, [sp, #4]
 801d076:	1a12      	subs	r2, r2, r0
 801d078:	418b      	sbcs	r3, r1
 801d07a:	2080      	movs	r0, #128	@ 0x80
 801d07c:	2100      	movs	r1, #0
 801d07e:	0600      	lsls	r0, r0, #24
 801d080:	1812      	adds	r2, r2, r0
 801d082:	414b      	adcs	r3, r1
 801d084:	464a      	mov	r2, r9
 801d086:	005b      	lsls	r3, r3, #1
 801d088:	50bb      	str	r3, [r7, r2]
 801d08a:	4658      	mov	r0, fp
 801d08c:	002a      	movs	r2, r5
 801d08e:	9b07      	ldr	r3, [sp, #28]
 801d090:	9906      	ldr	r1, [sp, #24]
 801d092:	f7e3 fa95 	bl	80005c0 <__aeabi_lmul>
 801d096:	2280      	movs	r2, #128	@ 0x80
 801d098:	2300      	movs	r3, #0
 801d09a:	0612      	lsls	r2, r2, #24
 801d09c:	1880      	adds	r0, r0, r2
 801d09e:	4159      	adcs	r1, r3
 801d0a0:	2000      	movs	r0, #0
 801d0a2:	9103      	str	r1, [sp, #12]
 801d0a4:	9002      	str	r0, [sp, #8]
 801d0a6:	4652      	mov	r2, sl
 801d0a8:	9b04      	ldr	r3, [sp, #16]
 801d0aa:	0020      	movs	r0, r4
 801d0ac:	9905      	ldr	r1, [sp, #20]
 801d0ae:	f7e3 fa87 	bl	80005c0 <__aeabi_lmul>
 801d0b2:	9b02      	ldr	r3, [sp, #8]
 801d0b4:	9c03      	ldr	r4, [sp, #12]
 801d0b6:	18c0      	adds	r0, r0, r3
 801d0b8:	4161      	adcs	r1, r4
 801d0ba:	2380      	movs	r3, #128	@ 0x80
 801d0bc:	2400      	movs	r4, #0
 801d0be:	061b      	lsls	r3, r3, #24
 801d0c0:	18c0      	adds	r0, r0, r3
 801d0c2:	4161      	adcs	r1, r4
 801d0c4:	464a      	mov	r2, r9
 801d0c6:	004b      	lsls	r3, r1, #1
 801d0c8:	50b3      	str	r3, [r6, r2]
 801d0ca:	2308      	movs	r3, #8
 801d0cc:	469c      	mov	ip, r3
 801d0ce:	9b08      	ldr	r3, [sp, #32]
 801d0d0:	44e0      	add	r8, ip
 801d0d2:	3708      	adds	r7, #8
 801d0d4:	3608      	adds	r6, #8
 801d0d6:	4598      	cmp	r8, r3
 801d0d8:	d196      	bne.n	801d008 <arm_cfft_radix4by2_inverse_q31+0x3c>
 801d0da:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 801d0dc:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 801d0de:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 801d0e0:	2302      	movs	r3, #2
 801d0e2:	003a      	movs	r2, r7
 801d0e4:	0029      	movs	r1, r5
 801d0e6:	0020      	movs	r0, r4
 801d0e8:	9e0d      	ldr	r6, [sp, #52]	@ 0x34
 801d0ea:	f000 fb3b 	bl	801d764 <arm_radix4_butterfly_inverse_q31>
 801d0ee:	46a4      	mov	ip, r4
 801d0f0:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801d0f2:	2302      	movs	r3, #2
 801d0f4:	0088      	lsls	r0, r1, #2
 801d0f6:	4460      	add	r0, ip
 801d0f8:	003a      	movs	r2, r7
 801d0fa:	0029      	movs	r1, r5
 801d0fc:	f000 fb32 	bl	801d764 <arm_radix4_butterfly_inverse_q31>
 801d100:	46a4      	mov	ip, r4
 801d102:	0128      	lsls	r0, r5, #4
 801d104:	4460      	add	r0, ip
 801d106:	6833      	ldr	r3, [r6, #0]
 801d108:	005b      	lsls	r3, r3, #1
 801d10a:	6033      	str	r3, [r6, #0]
 801d10c:	6873      	ldr	r3, [r6, #4]
 801d10e:	005b      	lsls	r3, r3, #1
 801d110:	6073      	str	r3, [r6, #4]
 801d112:	68b3      	ldr	r3, [r6, #8]
 801d114:	005b      	lsls	r3, r3, #1
 801d116:	60b3      	str	r3, [r6, #8]
 801d118:	68f3      	ldr	r3, [r6, #12]
 801d11a:	005b      	lsls	r3, r3, #1
 801d11c:	60f3      	str	r3, [r6, #12]
 801d11e:	3610      	adds	r6, #16
 801d120:	42b0      	cmp	r0, r6
 801d122:	d1f0      	bne.n	801d106 <arm_cfft_radix4by2_inverse_q31+0x13a>
 801d124:	b00f      	add	sp, #60	@ 0x3c
 801d126:	bc3c      	pop	{r2, r3, r4, r5}
 801d128:	4690      	mov	r8, r2
 801d12a:	4699      	mov	r9, r3
 801d12c:	46a2      	mov	sl, r4
 801d12e:	46ab      	mov	fp, r5
 801d130:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801d132:	2302      	movs	r3, #2
 801d134:	2100      	movs	r1, #0
 801d136:	0015      	movs	r5, r2
 801d138:	f000 fb14 	bl	801d764 <arm_radix4_butterfly_inverse_q31>
 801d13c:	46bc      	mov	ip, r7
 801d13e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801d140:	002a      	movs	r2, r5
 801d142:	0098      	lsls	r0, r3, #2
 801d144:	4460      	add	r0, ip
 801d146:	2302      	movs	r3, #2
 801d148:	2100      	movs	r1, #0
 801d14a:	f000 fb0b 	bl	801d764 <arm_radix4_butterfly_inverse_q31>
 801d14e:	e7e9      	b.n	801d124 <arm_cfft_radix4by2_inverse_q31+0x158>

0801d150 <arm_cfft_q31>:
 801d150:	b570      	push	{r4, r5, r6, lr}
 801d152:	001e      	movs	r6, r3
 801d154:	2380      	movs	r3, #128	@ 0x80
 801d156:	000d      	movs	r5, r1
 801d158:	0004      	movs	r4, r0
 801d15a:	8801      	ldrh	r1, [r0, #0]
 801d15c:	005b      	lsls	r3, r3, #1
 801d15e:	2a01      	cmp	r2, #1
 801d160:	d028      	beq.n	801d1b4 <arm_cfft_q31+0x64>
 801d162:	4299      	cmp	r1, r3
 801d164:	d020      	beq.n	801d1a8 <arm_cfft_q31+0x58>
 801d166:	d812      	bhi.n	801d18e <arm_cfft_q31+0x3e>
 801d168:	2920      	cmp	r1, #32
 801d16a:	d004      	beq.n	801d176 <arm_cfft_q31+0x26>
 801d16c:	d949      	bls.n	801d202 <arm_cfft_q31+0xb2>
 801d16e:	2940      	cmp	r1, #64	@ 0x40
 801d170:	d01a      	beq.n	801d1a8 <arm_cfft_q31+0x58>
 801d172:	2980      	cmp	r1, #128	@ 0x80
 801d174:	d103      	bne.n	801d17e <arm_cfft_q31+0x2e>
 801d176:	6862      	ldr	r2, [r4, #4]
 801d178:	0028      	movs	r0, r5
 801d17a:	f7ff fe65 	bl	801ce48 <arm_cfft_radix4by2_q31>
 801d17e:	2e00      	cmp	r6, #0
 801d180:	d004      	beq.n	801d18c <arm_cfft_q31+0x3c>
 801d182:	68a2      	ldr	r2, [r4, #8]
 801d184:	89a1      	ldrh	r1, [r4, #12]
 801d186:	0028      	movs	r0, r5
 801d188:	f7e2 ffbe 	bl	8000108 <arm_bitreversal_32>
 801d18c:	bd70      	pop	{r4, r5, r6, pc}
 801d18e:	2380      	movs	r3, #128	@ 0x80
 801d190:	00db      	lsls	r3, r3, #3
 801d192:	4299      	cmp	r1, r3
 801d194:	d008      	beq.n	801d1a8 <arm_cfft_q31+0x58>
 801d196:	d92f      	bls.n	801d1f8 <arm_cfft_q31+0xa8>
 801d198:	2380      	movs	r3, #128	@ 0x80
 801d19a:	011b      	lsls	r3, r3, #4
 801d19c:	4299      	cmp	r1, r3
 801d19e:	d0ea      	beq.n	801d176 <arm_cfft_q31+0x26>
 801d1a0:	2380      	movs	r3, #128	@ 0x80
 801d1a2:	015b      	lsls	r3, r3, #5
 801d1a4:	4299      	cmp	r1, r3
 801d1a6:	d1ea      	bne.n	801d17e <arm_cfft_q31+0x2e>
 801d1a8:	2301      	movs	r3, #1
 801d1aa:	6862      	ldr	r2, [r4, #4]
 801d1ac:	0028      	movs	r0, r5
 801d1ae:	f000 f833 	bl	801d218 <arm_radix4_butterfly_q31>
 801d1b2:	e7e4      	b.n	801d17e <arm_cfft_q31+0x2e>
 801d1b4:	4299      	cmp	r1, r3
 801d1b6:	d019      	beq.n	801d1ec <arm_cfft_q31+0x9c>
 801d1b8:	d80b      	bhi.n	801d1d2 <arm_cfft_q31+0x82>
 801d1ba:	2920      	cmp	r1, #32
 801d1bc:	d004      	beq.n	801d1c8 <arm_cfft_q31+0x78>
 801d1be:	d928      	bls.n	801d212 <arm_cfft_q31+0xc2>
 801d1c0:	2940      	cmp	r1, #64	@ 0x40
 801d1c2:	d013      	beq.n	801d1ec <arm_cfft_q31+0x9c>
 801d1c4:	2980      	cmp	r1, #128	@ 0x80
 801d1c6:	d1da      	bne.n	801d17e <arm_cfft_q31+0x2e>
 801d1c8:	6862      	ldr	r2, [r4, #4]
 801d1ca:	0028      	movs	r0, r5
 801d1cc:	f7ff fefe 	bl	801cfcc <arm_cfft_radix4by2_inverse_q31>
 801d1d0:	e7d5      	b.n	801d17e <arm_cfft_q31+0x2e>
 801d1d2:	2380      	movs	r3, #128	@ 0x80
 801d1d4:	00db      	lsls	r3, r3, #3
 801d1d6:	4299      	cmp	r1, r3
 801d1d8:	d008      	beq.n	801d1ec <arm_cfft_q31+0x9c>
 801d1da:	d915      	bls.n	801d208 <arm_cfft_q31+0xb8>
 801d1dc:	2380      	movs	r3, #128	@ 0x80
 801d1de:	011b      	lsls	r3, r3, #4
 801d1e0:	4299      	cmp	r1, r3
 801d1e2:	d0f1      	beq.n	801d1c8 <arm_cfft_q31+0x78>
 801d1e4:	2380      	movs	r3, #128	@ 0x80
 801d1e6:	015b      	lsls	r3, r3, #5
 801d1e8:	4299      	cmp	r1, r3
 801d1ea:	d1c8      	bne.n	801d17e <arm_cfft_q31+0x2e>
 801d1ec:	2301      	movs	r3, #1
 801d1ee:	6862      	ldr	r2, [r4, #4]
 801d1f0:	0028      	movs	r0, r5
 801d1f2:	f000 fab7 	bl	801d764 <arm_radix4_butterfly_inverse_q31>
 801d1f6:	e7c2      	b.n	801d17e <arm_cfft_q31+0x2e>
 801d1f8:	2380      	movs	r3, #128	@ 0x80
 801d1fa:	009b      	lsls	r3, r3, #2
 801d1fc:	4299      	cmp	r1, r3
 801d1fe:	d0ba      	beq.n	801d176 <arm_cfft_q31+0x26>
 801d200:	e7bd      	b.n	801d17e <arm_cfft_q31+0x2e>
 801d202:	2910      	cmp	r1, #16
 801d204:	d1bb      	bne.n	801d17e <arm_cfft_q31+0x2e>
 801d206:	e7cf      	b.n	801d1a8 <arm_cfft_q31+0x58>
 801d208:	2380      	movs	r3, #128	@ 0x80
 801d20a:	009b      	lsls	r3, r3, #2
 801d20c:	4299      	cmp	r1, r3
 801d20e:	d0db      	beq.n	801d1c8 <arm_cfft_q31+0x78>
 801d210:	e7b5      	b.n	801d17e <arm_cfft_q31+0x2e>
 801d212:	2910      	cmp	r1, #16
 801d214:	d1b3      	bne.n	801d17e <arm_cfft_q31+0x2e>
 801d216:	e7e9      	b.n	801d1ec <arm_cfft_q31+0x9c>

0801d218 <arm_radix4_butterfly_q31>:
 801d218:	b5f0      	push	{r4, r5, r6, r7, lr}
 801d21a:	464d      	mov	r5, r9
 801d21c:	4644      	mov	r4, r8
 801d21e:	465f      	mov	r7, fp
 801d220:	4656      	mov	r6, sl
 801d222:	469c      	mov	ip, r3
 801d224:	b4f0      	push	{r4, r5, r6, r7}
 801d226:	b0a7      	sub	sp, #156	@ 0x9c
 801d228:	9114      	str	r1, [sp, #80]	@ 0x50
 801d22a:	0889      	lsrs	r1, r1, #2
 801d22c:	9310      	str	r3, [sp, #64]	@ 0x40
 801d22e:	00cb      	lsls	r3, r1, #3
 801d230:	0015      	movs	r5, r2
 801d232:	9223      	str	r2, [sp, #140]	@ 0x8c
 801d234:	18c2      	adds	r2, r0, r3
 801d236:	000c      	movs	r4, r1
 801d238:	469a      	mov	sl, r3
 801d23a:	9124      	str	r1, [sp, #144]	@ 0x90
 801d23c:	18d1      	adds	r1, r2, r3
 801d23e:	4663      	mov	r3, ip
 801d240:	468b      	mov	fp, r1
 801d242:	0119      	lsls	r1, r3, #4
 801d244:	910d      	str	r1, [sp, #52]	@ 0x34
 801d246:	00d9      	lsls	r1, r3, #3
 801d248:	005b      	lsls	r3, r3, #1
 801d24a:	4463      	add	r3, ip
 801d24c:	910e      	str	r1, [sp, #56]	@ 0x38
 801d24e:	00d9      	lsls	r1, r3, #3
 801d250:	465b      	mov	r3, fp
 801d252:	44da      	add	sl, fp
 801d254:	4690      	mov	r8, r2
 801d256:	4683      	mov	fp, r0
 801d258:	4699      	mov	r9, r3
 801d25a:	9022      	str	r0, [sp, #136]	@ 0x88
 801d25c:	9025      	str	r0, [sp, #148]	@ 0x94
 801d25e:	910f      	str	r1, [sp, #60]	@ 0x3c
 801d260:	9502      	str	r5, [sp, #8]
 801d262:	9500      	str	r5, [sp, #0]
 801d264:	9501      	str	r5, [sp, #4]
 801d266:	9407      	str	r4, [sp, #28]
 801d268:	465b      	mov	r3, fp
 801d26a:	681b      	ldr	r3, [r3, #0]
 801d26c:	4642      	mov	r2, r8
 801d26e:	111c      	asrs	r4, r3, #4
 801d270:	464b      	mov	r3, r9
 801d272:	4658      	mov	r0, fp
 801d274:	681b      	ldr	r3, [r3, #0]
 801d276:	6812      	ldr	r2, [r2, #0]
 801d278:	111b      	asrs	r3, r3, #4
 801d27a:	18e7      	adds	r7, r4, r3
 801d27c:	1ae3      	subs	r3, r4, r3
 801d27e:	1114      	asrs	r4, r2, #4
 801d280:	4652      	mov	r2, sl
 801d282:	6840      	ldr	r0, [r0, #4]
 801d284:	6812      	ldr	r2, [r2, #0]
 801d286:	1105      	asrs	r5, r0, #4
 801d288:	4648      	mov	r0, r9
 801d28a:	9303      	str	r3, [sp, #12]
 801d28c:	1113      	asrs	r3, r2, #4
 801d28e:	18e2      	adds	r2, r4, r3
 801d290:	465c      	mov	r4, fp
 801d292:	6840      	ldr	r0, [r0, #4]
 801d294:	1103      	asrs	r3, r0, #4
 801d296:	18ee      	adds	r6, r5, r3
 801d298:	1ae8      	subs	r0, r5, r3
 801d29a:	18bb      	adds	r3, r7, r2
 801d29c:	6023      	str	r3, [r4, #0]
 801d29e:	4644      	mov	r4, r8
 801d2a0:	6864      	ldr	r4, [r4, #4]
 801d2a2:	9004      	str	r0, [sp, #16]
 801d2a4:	1125      	asrs	r5, r4, #4
 801d2a6:	4654      	mov	r4, sl
 801d2a8:	6864      	ldr	r4, [r4, #4]
 801d2aa:	1123      	asrs	r3, r4, #4
 801d2ac:	465c      	mov	r4, fp
 801d2ae:	18eb      	adds	r3, r5, r3
 801d2b0:	18f1      	adds	r1, r6, r3
 801d2b2:	6061      	str	r1, [r4, #4]
 801d2b4:	4655      	mov	r5, sl
 801d2b6:	4644      	mov	r4, r8
 801d2b8:	686d      	ldr	r5, [r5, #4]
 801d2ba:	6864      	ldr	r4, [r4, #4]
 801d2bc:	1129      	asrs	r1, r5, #4
 801d2be:	1124      	asrs	r4, r4, #4
 801d2c0:	1a64      	subs	r4, r4, r1
 801d2c2:	4641      	mov	r1, r8
 801d2c4:	6809      	ldr	r1, [r1, #0]
 801d2c6:	9405      	str	r4, [sp, #20]
 801d2c8:	1108      	asrs	r0, r1, #4
 801d2ca:	4651      	mov	r1, sl
 801d2cc:	6809      	ldr	r1, [r1, #0]
 801d2ce:	1abc      	subs	r4, r7, r2
 801d2d0:	1109      	asrs	r1, r1, #4
 801d2d2:	1a41      	subs	r1, r0, r1
 801d2d4:	17e2      	asrs	r2, r4, #31
 801d2d6:	9106      	str	r1, [sp, #24]
 801d2d8:	0011      	movs	r1, r2
 801d2da:	9a01      	ldr	r2, [sp, #4]
 801d2dc:	9108      	str	r1, [sp, #32]
 801d2de:	6817      	ldr	r7, [r2, #0]
 801d2e0:	17fd      	asrs	r5, r7, #31
 801d2e2:	0028      	movs	r0, r5
 801d2e4:	1af5      	subs	r5, r6, r3
 801d2e6:	17ee      	asrs	r6, r5, #31
 801d2e8:	960a      	str	r6, [sp, #40]	@ 0x28
 801d2ea:	6856      	ldr	r6, [r2, #4]
 801d2ec:	9009      	str	r0, [sp, #36]	@ 0x24
 801d2ee:	17f3      	asrs	r3, r6, #31
 801d2f0:	003a      	movs	r2, r7
 801d2f2:	930b      	str	r3, [sp, #44]	@ 0x2c
 801d2f4:	0003      	movs	r3, r0
 801d2f6:	0020      	movs	r0, r4
 801d2f8:	f7e3 f962 	bl	80005c0 <__aeabi_lmul>
 801d2fc:	0032      	movs	r2, r6
 801d2fe:	17f3      	asrs	r3, r6, #31
 801d300:	910c      	str	r1, [sp, #48]	@ 0x30
 801d302:	0028      	movs	r0, r5
 801d304:	17e9      	asrs	r1, r5, #31
 801d306:	f7e3 f95b 	bl	80005c0 <__aeabi_lmul>
 801d30a:	980c      	ldr	r0, [sp, #48]	@ 0x30
 801d30c:	002a      	movs	r2, r5
 801d30e:	4684      	mov	ip, r0
 801d310:	4640      	mov	r0, r8
 801d312:	4461      	add	r1, ip
 801d314:	0049      	lsls	r1, r1, #1
 801d316:	6001      	str	r1, [r0, #0]
 801d318:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801d31a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801d31c:	0038      	movs	r0, r7
 801d31e:	f7e3 f94f 	bl	80005c0 <__aeabi_lmul>
 801d322:	0032      	movs	r2, r6
 801d324:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801d326:	000d      	movs	r5, r1
 801d328:	0020      	movs	r0, r4
 801d32a:	9908      	ldr	r1, [sp, #32]
 801d32c:	f7e3 f948 	bl	80005c0 <__aeabi_lmul>
 801d330:	4646      	mov	r6, r8
 801d332:	1a6d      	subs	r5, r5, r1
 801d334:	006d      	lsls	r5, r5, #1
 801d336:	6075      	str	r5, [r6, #4]
 801d338:	9903      	ldr	r1, [sp, #12]
 801d33a:	9d05      	ldr	r5, [sp, #20]
 801d33c:	000c      	movs	r4, r1
 801d33e:	46ac      	mov	ip, r5
 801d340:	4464      	add	r4, ip
 801d342:	17e6      	asrs	r6, r4, #31
 801d344:	0031      	movs	r1, r6
 801d346:	9b00      	ldr	r3, [sp, #0]
 801d348:	9804      	ldr	r0, [sp, #16]
 801d34a:	681e      	ldr	r6, [r3, #0]
 801d34c:	17f7      	asrs	r7, r6, #31
 801d34e:	9709      	str	r7, [sp, #36]	@ 0x24
 801d350:	9f06      	ldr	r7, [sp, #24]
 801d352:	0032      	movs	r2, r6
 801d354:	1bc7      	subs	r7, r0, r7
 801d356:	17fd      	asrs	r5, r7, #31
 801d358:	950a      	str	r5, [sp, #40]	@ 0x28
 801d35a:	685d      	ldr	r5, [r3, #4]
 801d35c:	17f3      	asrs	r3, r6, #31
 801d35e:	17e8      	asrs	r0, r5, #31
 801d360:	900b      	str	r0, [sp, #44]	@ 0x2c
 801d362:	0020      	movs	r0, r4
 801d364:	9108      	str	r1, [sp, #32]
 801d366:	f7e3 f92b 	bl	80005c0 <__aeabi_lmul>
 801d36a:	002a      	movs	r2, r5
 801d36c:	17eb      	asrs	r3, r5, #31
 801d36e:	910c      	str	r1, [sp, #48]	@ 0x30
 801d370:	0038      	movs	r0, r7
 801d372:	17f9      	asrs	r1, r7, #31
 801d374:	f7e3 f924 	bl	80005c0 <__aeabi_lmul>
 801d378:	980c      	ldr	r0, [sp, #48]	@ 0x30
 801d37a:	003a      	movs	r2, r7
 801d37c:	4684      	mov	ip, r0
 801d37e:	4648      	mov	r0, r9
 801d380:	4461      	add	r1, ip
 801d382:	0049      	lsls	r1, r1, #1
 801d384:	6001      	str	r1, [r0, #0]
 801d386:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801d388:	0030      	movs	r0, r6
 801d38a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801d38c:	f7e3 f918 	bl	80005c0 <__aeabi_lmul>
 801d390:	002a      	movs	r2, r5
 801d392:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801d394:	000e      	movs	r6, r1
 801d396:	0020      	movs	r0, r4
 801d398:	9908      	ldr	r1, [sp, #32]
 801d39a:	f7e3 f911 	bl	80005c0 <__aeabi_lmul>
 801d39e:	464c      	mov	r4, r9
 801d3a0:	9d05      	ldr	r5, [sp, #20]
 801d3a2:	1a76      	subs	r6, r6, r1
 801d3a4:	9903      	ldr	r1, [sp, #12]
 801d3a6:	0076      	lsls	r6, r6, #1
 801d3a8:	6066      	str	r6, [r4, #4]
 801d3aa:	1b4c      	subs	r4, r1, r5
 801d3ac:	9e06      	ldr	r6, [sp, #24]
 801d3ae:	17e1      	asrs	r1, r4, #31
 801d3b0:	9103      	str	r1, [sp, #12]
 801d3b2:	9902      	ldr	r1, [sp, #8]
 801d3b4:	46b4      	mov	ip, r6
 801d3b6:	680f      	ldr	r7, [r1, #0]
 801d3b8:	9804      	ldr	r0, [sp, #16]
 801d3ba:	17fd      	asrs	r5, r7, #31
 801d3bc:	002b      	movs	r3, r5
 801d3be:	684e      	ldr	r6, [r1, #4]
 801d3c0:	4460      	add	r0, ip
 801d3c2:	0005      	movs	r5, r0
 801d3c4:	17c0      	asrs	r0, r0, #31
 801d3c6:	9005      	str	r0, [sp, #20]
 801d3c8:	17f0      	asrs	r0, r6, #31
 801d3ca:	9006      	str	r0, [sp, #24]
 801d3cc:	003a      	movs	r2, r7
 801d3ce:	0020      	movs	r0, r4
 801d3d0:	17e1      	asrs	r1, r4, #31
 801d3d2:	9304      	str	r3, [sp, #16]
 801d3d4:	f7e3 f8f4 	bl	80005c0 <__aeabi_lmul>
 801d3d8:	0032      	movs	r2, r6
 801d3da:	9108      	str	r1, [sp, #32]
 801d3dc:	17f3      	asrs	r3, r6, #31
 801d3de:	0028      	movs	r0, r5
 801d3e0:	17e9      	asrs	r1, r5, #31
 801d3e2:	f7e3 f8ed 	bl	80005c0 <__aeabi_lmul>
 801d3e6:	9808      	ldr	r0, [sp, #32]
 801d3e8:	002a      	movs	r2, r5
 801d3ea:	4684      	mov	ip, r0
 801d3ec:	4650      	mov	r0, sl
 801d3ee:	4461      	add	r1, ip
 801d3f0:	0049      	lsls	r1, r1, #1
 801d3f2:	6001      	str	r1, [r0, #0]
 801d3f4:	9b05      	ldr	r3, [sp, #20]
 801d3f6:	9904      	ldr	r1, [sp, #16]
 801d3f8:	0038      	movs	r0, r7
 801d3fa:	f7e3 f8e1 	bl	80005c0 <__aeabi_lmul>
 801d3fe:	0020      	movs	r0, r4
 801d400:	2408      	movs	r4, #8
 801d402:	000d      	movs	r5, r1
 801d404:	0032      	movs	r2, r6
 801d406:	9b06      	ldr	r3, [sp, #24]
 801d408:	9903      	ldr	r1, [sp, #12]
 801d40a:	f7e3 f8d9 	bl	80005c0 <__aeabi_lmul>
 801d40e:	46a4      	mov	ip, r4
 801d410:	4650      	mov	r0, sl
 801d412:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 801d414:	44e3      	add	fp, ip
 801d416:	44e0      	add	r8, ip
 801d418:	44e1      	add	r9, ip
 801d41a:	44e2      	add	sl, ip
 801d41c:	46a4      	mov	ip, r4
 801d41e:	1a6d      	subs	r5, r5, r1
 801d420:	006d      	lsls	r5, r5, #1
 801d422:	9a01      	ldr	r2, [sp, #4]
 801d424:	6045      	str	r5, [r0, #4]
 801d426:	9807      	ldr	r0, [sp, #28]
 801d428:	4462      	add	r2, ip
 801d42a:	3801      	subs	r0, #1
 801d42c:	9201      	str	r2, [sp, #4]
 801d42e:	9007      	str	r0, [sp, #28]
 801d430:	9b00      	ldr	r3, [sp, #0]
 801d432:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801d434:	9902      	ldr	r1, [sp, #8]
 801d436:	4694      	mov	ip, r2
 801d438:	4463      	add	r3, ip
 801d43a:	9300      	str	r3, [sp, #0]
 801d43c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801d43e:	469c      	mov	ip, r3
 801d440:	4461      	add	r1, ip
 801d442:	9102      	str	r1, [sp, #8]
 801d444:	2800      	cmp	r0, #0
 801d446:	d000      	beq.n	801d44a <arm_radix4_butterfly_q31+0x232>
 801d448:	e70e      	b.n	801d268 <arm_radix4_butterfly_q31+0x50>
 801d44a:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801d44c:	009b      	lsls	r3, r3, #2
 801d44e:	931f      	str	r3, [sp, #124]	@ 0x7c
 801d450:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801d452:	9320      	str	r3, [sp, #128]	@ 0x80
 801d454:	9313      	str	r3, [sp, #76]	@ 0x4c
 801d456:	2b04      	cmp	r3, #4
 801d458:	d800      	bhi.n	801d45c <arm_radix4_butterfly_q31+0x244>
 801d45a:	e180      	b.n	801d75e <arm_radix4_butterfly_q31+0x546>
 801d45c:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801d45e:	0893      	lsrs	r3, r2, #2
 801d460:	1e59      	subs	r1, r3, #1
 801d462:	9321      	str	r3, [sp, #132]	@ 0x84
 801d464:	00db      	lsls	r3, r3, #3
 801d466:	931b      	str	r3, [sp, #108]	@ 0x6c
 801d468:	00d3      	lsls	r3, r2, #3
 801d46a:	9300      	str	r3, [sp, #0]
 801d46c:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 801d46e:	911a      	str	r1, [sp, #104]	@ 0x68
 801d470:	00da      	lsls	r2, r3, #3
 801d472:	921e      	str	r2, [sp, #120]	@ 0x78
 801d474:	011a      	lsls	r2, r3, #4
 801d476:	921d      	str	r2, [sp, #116]	@ 0x74
 801d478:	001a      	movs	r2, r3
 801d47a:	4694      	mov	ip, r2
 801d47c:	005b      	lsls	r3, r3, #1
 801d47e:	4463      	add	r3, ip
 801d480:	00db      	lsls	r3, r3, #3
 801d482:	931c      	str	r3, [sp, #112]	@ 0x70
 801d484:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 801d486:	9317      	str	r3, [sp, #92]	@ 0x5c
 801d488:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801d48a:	9318      	str	r3, [sp, #96]	@ 0x60
 801d48c:	9319      	str	r3, [sp, #100]	@ 0x64
 801d48e:	9316      	str	r3, [sp, #88]	@ 0x58
 801d490:	2300      	movs	r3, #0
 801d492:	9315      	str	r3, [sp, #84]	@ 0x54
 801d494:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801d496:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 801d498:	681a      	ldr	r2, [r3, #0]
 801d49a:	685b      	ldr	r3, [r3, #4]
 801d49c:	9205      	str	r2, [sp, #20]
 801d49e:	9306      	str	r3, [sp, #24]
 801d4a0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801d4a2:	468c      	mov	ip, r1
 801d4a4:	681a      	ldr	r2, [r3, #0]
 801d4a6:	685b      	ldr	r3, [r3, #4]
 801d4a8:	9207      	str	r2, [sp, #28]
 801d4aa:	9308      	str	r3, [sp, #32]
 801d4ac:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 801d4ae:	681a      	ldr	r2, [r3, #0]
 801d4b0:	685b      	ldr	r3, [r3, #4]
 801d4b2:	9209      	str	r2, [sp, #36]	@ 0x24
 801d4b4:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 801d4b6:	930a      	str	r3, [sp, #40]	@ 0x28
 801d4b8:	0013      	movs	r3, r2
 801d4ba:	4463      	add	r3, ip
 801d4bc:	4698      	mov	r8, r3
 801d4be:	0013      	movs	r3, r2
 801d4c0:	4442      	add	r2, r8
 801d4c2:	4691      	mov	r9, r2
 801d4c4:	001a      	movs	r2, r3
 801d4c6:	444a      	add	r2, r9
 801d4c8:	4692      	mov	sl, r2
 801d4ca:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801d4cc:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 801d4ce:	4293      	cmp	r3, r2
 801d4d0:	d800      	bhi.n	801d4d4 <arm_radix4_butterfly_q31+0x2bc>
 801d4d2:	e0dd      	b.n	801d690 <arm_radix4_butterfly_q31+0x478>
 801d4d4:	4694      	mov	ip, r2
 801d4d6:	468b      	mov	fp, r1
 801d4d8:	4644      	mov	r4, r8
 801d4da:	4655      	mov	r5, sl
 801d4dc:	9b07      	ldr	r3, [sp, #28]
 801d4de:	17db      	asrs	r3, r3, #31
 801d4e0:	930c      	str	r3, [sp, #48]	@ 0x30
 801d4e2:	9b08      	ldr	r3, [sp, #32]
 801d4e4:	17db      	asrs	r3, r3, #31
 801d4e6:	930d      	str	r3, [sp, #52]	@ 0x34
 801d4e8:	9b05      	ldr	r3, [sp, #20]
 801d4ea:	17db      	asrs	r3, r3, #31
 801d4ec:	930e      	str	r3, [sp, #56]	@ 0x38
 801d4ee:	9b06      	ldr	r3, [sp, #24]
 801d4f0:	17db      	asrs	r3, r3, #31
 801d4f2:	930f      	str	r3, [sp, #60]	@ 0x3c
 801d4f4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801d4f6:	17db      	asrs	r3, r3, #31
 801d4f8:	9310      	str	r3, [sp, #64]	@ 0x40
 801d4fa:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801d4fc:	17db      	asrs	r3, r3, #31
 801d4fe:	9311      	str	r3, [sp, #68]	@ 0x44
 801d500:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801d502:	4463      	add	r3, ip
 801d504:	930b      	str	r3, [sp, #44]	@ 0x2c
 801d506:	465b      	mov	r3, fp
 801d508:	4659      	mov	r1, fp
 801d50a:	681a      	ldr	r2, [r3, #0]
 801d50c:	464b      	mov	r3, r9
 801d50e:	684f      	ldr	r7, [r1, #4]
 801d510:	4649      	mov	r1, r9
 801d512:	681b      	ldr	r3, [r3, #0]
 801d514:	18d6      	adds	r6, r2, r3
 801d516:	1ad3      	subs	r3, r2, r3
 801d518:	9301      	str	r3, [sp, #4]
 801d51a:	684b      	ldr	r3, [r1, #4]
 801d51c:	18f8      	adds	r0, r7, r3
 801d51e:	1af9      	subs	r1, r7, r3
 801d520:	6827      	ldr	r7, [r4, #0]
 801d522:	9102      	str	r1, [sp, #8]
 801d524:	003a      	movs	r2, r7
 801d526:	682f      	ldr	r7, [r5, #0]
 801d528:	46bc      	mov	ip, r7
 801d52a:	465f      	mov	r7, fp
 801d52c:	4462      	add	r2, ip
 801d52e:	18b3      	adds	r3, r6, r2
 801d530:	109b      	asrs	r3, r3, #2
 801d532:	603b      	str	r3, [r7, #0]
 801d534:	6867      	ldr	r7, [r4, #4]
 801d536:	1ab6      	subs	r6, r6, r2
 801d538:	46b8      	mov	r8, r7
 801d53a:	686f      	ldr	r7, [r5, #4]
 801d53c:	17f2      	asrs	r2, r6, #31
 801d53e:	46bc      	mov	ip, r7
 801d540:	44e0      	add	r8, ip
 801d542:	4643      	mov	r3, r8
 801d544:	465f      	mov	r7, fp
 801d546:	18c1      	adds	r1, r0, r3
 801d548:	1089      	asrs	r1, r1, #2
 801d54a:	6079      	str	r1, [r7, #4]
 801d54c:	9900      	ldr	r1, [sp, #0]
 801d54e:	4690      	mov	r8, r2
 801d550:	468c      	mov	ip, r1
 801d552:	6867      	ldr	r7, [r4, #4]
 801d554:	6869      	ldr	r1, [r5, #4]
 801d556:	44e3      	add	fp, ip
 801d558:	1a7f      	subs	r7, r7, r1
 801d55a:	9703      	str	r7, [sp, #12]
 801d55c:	6829      	ldr	r1, [r5, #0]
 801d55e:	6827      	ldr	r7, [r4, #0]
 801d560:	1a7f      	subs	r7, r7, r1
 801d562:	9704      	str	r7, [sp, #16]
 801d564:	1ac7      	subs	r7, r0, r3
 801d566:	17fa      	asrs	r2, r7, #31
 801d568:	4692      	mov	sl, r2
 801d56a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801d56c:	9a07      	ldr	r2, [sp, #28]
 801d56e:	0030      	movs	r0, r6
 801d570:	4641      	mov	r1, r8
 801d572:	f7e3 f825 	bl	80005c0 <__aeabi_lmul>
 801d576:	9a08      	ldr	r2, [sp, #32]
 801d578:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801d57a:	9112      	str	r1, [sp, #72]	@ 0x48
 801d57c:	0038      	movs	r0, r7
 801d57e:	4651      	mov	r1, sl
 801d580:	f7e3 f81e 	bl	80005c0 <__aeabi_lmul>
 801d584:	9812      	ldr	r0, [sp, #72]	@ 0x48
 801d586:	9a07      	ldr	r2, [sp, #28]
 801d588:	4684      	mov	ip, r0
 801d58a:	4461      	add	r1, ip
 801d58c:	1049      	asrs	r1, r1, #1
 801d58e:	6021      	str	r1, [r4, #0]
 801d590:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801d592:	0038      	movs	r0, r7
 801d594:	4651      	mov	r1, sl
 801d596:	f7e3 f813 	bl	80005c0 <__aeabi_lmul>
 801d59a:	9a08      	ldr	r2, [sp, #32]
 801d59c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801d59e:	000f      	movs	r7, r1
 801d5a0:	0030      	movs	r0, r6
 801d5a2:	4641      	mov	r1, r8
 801d5a4:	f7e3 f80c 	bl	80005c0 <__aeabi_lmul>
 801d5a8:	9b00      	ldr	r3, [sp, #0]
 801d5aa:	9a01      	ldr	r2, [sp, #4]
 801d5ac:	469c      	mov	ip, r3
 801d5ae:	9803      	ldr	r0, [sp, #12]
 801d5b0:	1a7f      	subs	r7, r7, r1
 801d5b2:	107f      	asrs	r7, r7, #1
 801d5b4:	6067      	str	r7, [r4, #4]
 801d5b6:	0016      	movs	r6, r2
 801d5b8:	4464      	add	r4, ip
 801d5ba:	4684      	mov	ip, r0
 801d5bc:	4466      	add	r6, ip
 801d5be:	17f2      	asrs	r2, r6, #31
 801d5c0:	4690      	mov	r8, r2
 801d5c2:	9902      	ldr	r1, [sp, #8]
 801d5c4:	9f04      	ldr	r7, [sp, #16]
 801d5c6:	0030      	movs	r0, r6
 801d5c8:	1bcf      	subs	r7, r1, r7
 801d5ca:	17fa      	asrs	r2, r7, #31
 801d5cc:	4692      	mov	sl, r2
 801d5ce:	4641      	mov	r1, r8
 801d5d0:	9a05      	ldr	r2, [sp, #20]
 801d5d2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801d5d4:	f7e2 fff4 	bl	80005c0 <__aeabi_lmul>
 801d5d8:	9a06      	ldr	r2, [sp, #24]
 801d5da:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801d5dc:	9112      	str	r1, [sp, #72]	@ 0x48
 801d5de:	0038      	movs	r0, r7
 801d5e0:	4651      	mov	r1, sl
 801d5e2:	f7e2 ffed 	bl	80005c0 <__aeabi_lmul>
 801d5e6:	9812      	ldr	r0, [sp, #72]	@ 0x48
 801d5e8:	9a05      	ldr	r2, [sp, #20]
 801d5ea:	4684      	mov	ip, r0
 801d5ec:	4648      	mov	r0, r9
 801d5ee:	4461      	add	r1, ip
 801d5f0:	1049      	asrs	r1, r1, #1
 801d5f2:	6001      	str	r1, [r0, #0]
 801d5f4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801d5f6:	0038      	movs	r0, r7
 801d5f8:	4651      	mov	r1, sl
 801d5fa:	f7e2 ffe1 	bl	80005c0 <__aeabi_lmul>
 801d5fe:	9a06      	ldr	r2, [sp, #24]
 801d600:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801d602:	000f      	movs	r7, r1
 801d604:	0030      	movs	r0, r6
 801d606:	4641      	mov	r1, r8
 801d608:	f7e2 ffda 	bl	80005c0 <__aeabi_lmul>
 801d60c:	464e      	mov	r6, r9
 801d60e:	9a00      	ldr	r2, [sp, #0]
 801d610:	9b01      	ldr	r3, [sp, #4]
 801d612:	4694      	mov	ip, r2
 801d614:	9803      	ldr	r0, [sp, #12]
 801d616:	1a7f      	subs	r7, r7, r1
 801d618:	107f      	asrs	r7, r7, #1
 801d61a:	6077      	str	r7, [r6, #4]
 801d61c:	1a1e      	subs	r6, r3, r0
 801d61e:	9b04      	ldr	r3, [sp, #16]
 801d620:	44e1      	add	r9, ip
 801d622:	469c      	mov	ip, r3
 801d624:	17f0      	asrs	r0, r6, #31
 801d626:	4680      	mov	r8, r0
 801d628:	9902      	ldr	r1, [sp, #8]
 801d62a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801d62c:	4461      	add	r1, ip
 801d62e:	17cb      	asrs	r3, r1, #31
 801d630:	000f      	movs	r7, r1
 801d632:	469a      	mov	sl, r3
 801d634:	0030      	movs	r0, r6
 801d636:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801d638:	4641      	mov	r1, r8
 801d63a:	f7e2 ffc1 	bl	80005c0 <__aeabi_lmul>
 801d63e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801d640:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801d642:	9101      	str	r1, [sp, #4]
 801d644:	0038      	movs	r0, r7
 801d646:	4651      	mov	r1, sl
 801d648:	f7e2 ffba 	bl	80005c0 <__aeabi_lmul>
 801d64c:	9801      	ldr	r0, [sp, #4]
 801d64e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801d650:	4684      	mov	ip, r0
 801d652:	4461      	add	r1, ip
 801d654:	1049      	asrs	r1, r1, #1
 801d656:	6029      	str	r1, [r5, #0]
 801d658:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801d65a:	0038      	movs	r0, r7
 801d65c:	4651      	mov	r1, sl
 801d65e:	f7e2 ffaf 	bl	80005c0 <__aeabi_lmul>
 801d662:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801d664:	000f      	movs	r7, r1
 801d666:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801d668:	0030      	movs	r0, r6
 801d66a:	4641      	mov	r1, r8
 801d66c:	f7e2 ffa8 	bl	80005c0 <__aeabi_lmul>
 801d670:	1a7f      	subs	r7, r7, r1
 801d672:	107f      	asrs	r7, r7, #1
 801d674:	606f      	str	r7, [r5, #4]
 801d676:	9a00      	ldr	r2, [sp, #0]
 801d678:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 801d67a:	4694      	mov	ip, r2
 801d67c:	4465      	add	r5, ip
 801d67e:	468c      	mov	ip, r1
 801d680:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801d682:	0013      	movs	r3, r2
 801d684:	4462      	add	r2, ip
 801d686:	920b      	str	r2, [sp, #44]	@ 0x2c
 801d688:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801d68a:	429a      	cmp	r2, r3
 801d68c:	d900      	bls.n	801d690 <arm_radix4_butterfly_q31+0x478>
 801d68e:	e73a      	b.n	801d506 <arm_radix4_butterfly_q31+0x2ee>
 801d690:	991e      	ldr	r1, [sp, #120]	@ 0x78
 801d692:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 801d694:	468c      	mov	ip, r1
 801d696:	991d      	ldr	r1, [sp, #116]	@ 0x74
 801d698:	4462      	add	r2, ip
 801d69a:	468c      	mov	ip, r1
 801d69c:	9216      	str	r2, [sp, #88]	@ 0x58
 801d69e:	991c      	ldr	r1, [sp, #112]	@ 0x70
 801d6a0:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 801d6a2:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801d6a4:	4462      	add	r2, ip
 801d6a6:	468c      	mov	ip, r1
 801d6a8:	9219      	str	r2, [sp, #100]	@ 0x64
 801d6aa:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 801d6ac:	3301      	adds	r3, #1
 801d6ae:	4462      	add	r2, ip
 801d6b0:	9218      	str	r2, [sp, #96]	@ 0x60
 801d6b2:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 801d6b4:	9315      	str	r3, [sp, #84]	@ 0x54
 801d6b6:	3208      	adds	r2, #8
 801d6b8:	9217      	str	r2, [sp, #92]	@ 0x5c
 801d6ba:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 801d6bc:	4293      	cmp	r3, r2
 801d6be:	d800      	bhi.n	801d6c2 <arm_radix4_butterfly_q31+0x4aa>
 801d6c0:	e6e8      	b.n	801d494 <arm_radix4_butterfly_q31+0x27c>
 801d6c2:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 801d6c4:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 801d6c6:	009b      	lsls	r3, r3, #2
 801d6c8:	931f      	str	r3, [sp, #124]	@ 0x7c
 801d6ca:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 801d6cc:	9213      	str	r2, [sp, #76]	@ 0x4c
 801d6ce:	089b      	lsrs	r3, r3, #2
 801d6d0:	9320      	str	r3, [sp, #128]	@ 0x80
 801d6d2:	2b04      	cmp	r3, #4
 801d6d4:	d900      	bls.n	801d6d8 <arm_radix4_butterfly_q31+0x4c0>
 801d6d6:	e6c1      	b.n	801d45c <arm_radix4_butterfly_q31+0x244>
 801d6d8:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801d6da:	469a      	mov	sl, r3
 801d6dc:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 801d6de:	691c      	ldr	r4, [r3, #16]
 801d6e0:	685a      	ldr	r2, [r3, #4]
 801d6e2:	46a1      	mov	r9, r4
 801d6e4:	4690      	mov	r8, r2
 801d6e6:	6819      	ldr	r1, [r3, #0]
 801d6e8:	689a      	ldr	r2, [r3, #8]
 801d6ea:	699f      	ldr	r7, [r3, #24]
 801d6ec:	188d      	adds	r5, r1, r2
 801d6ee:	444d      	add	r5, r9
 801d6f0:	19ed      	adds	r5, r5, r7
 801d6f2:	69de      	ldr	r6, [r3, #28]
 801d6f4:	601d      	str	r5, [r3, #0]
 801d6f6:	4645      	mov	r5, r8
 801d6f8:	46b4      	mov	ip, r6
 801d6fa:	68d8      	ldr	r0, [r3, #12]
 801d6fc:	695c      	ldr	r4, [r3, #20]
 801d6fe:	182d      	adds	r5, r5, r0
 801d700:	192d      	adds	r5, r5, r4
 801d702:	4465      	add	r5, ip
 801d704:	605d      	str	r5, [r3, #4]
 801d706:	1a8d      	subs	r5, r1, r2
 801d708:	444d      	add	r5, r9
 801d70a:	1bed      	subs	r5, r5, r7
 801d70c:	609d      	str	r5, [r3, #8]
 801d70e:	4645      	mov	r5, r8
 801d710:	1a2d      	subs	r5, r5, r0
 801d712:	192d      	adds	r5, r5, r4
 801d714:	1bad      	subs	r5, r5, r6
 801d716:	464e      	mov	r6, r9
 801d718:	60dd      	str	r5, [r3, #12]
 801d71a:	180d      	adds	r5, r1, r0
 801d71c:	1bad      	subs	r5, r5, r6
 801d71e:	4666      	mov	r6, ip
 801d720:	1bad      	subs	r5, r5, r6
 801d722:	611d      	str	r5, [r3, #16]
 801d724:	4645      	mov	r5, r8
 801d726:	1aad      	subs	r5, r5, r2
 801d728:	4442      	add	r2, r8
 801d72a:	1b12      	subs	r2, r2, r4
 801d72c:	1bd2      	subs	r2, r2, r7
 801d72e:	1a08      	subs	r0, r1, r0
 801d730:	61da      	str	r2, [r3, #28]
 801d732:	4649      	mov	r1, r9
 801d734:	2201      	movs	r2, #1
 801d736:	1a41      	subs	r1, r0, r1
 801d738:	4252      	negs	r2, r2
 801d73a:	4461      	add	r1, ip
 801d73c:	4694      	mov	ip, r2
 801d73e:	44e2      	add	sl, ip
 801d740:	4652      	mov	r2, sl
 801d742:	1b2d      	subs	r5, r5, r4
 801d744:	19ed      	adds	r5, r5, r7
 801d746:	615d      	str	r5, [r3, #20]
 801d748:	6199      	str	r1, [r3, #24]
 801d74a:	3320      	adds	r3, #32
 801d74c:	2a00      	cmp	r2, #0
 801d74e:	d1c6      	bne.n	801d6de <arm_radix4_butterfly_q31+0x4c6>
 801d750:	b027      	add	sp, #156	@ 0x9c
 801d752:	bc3c      	pop	{r2, r3, r4, r5}
 801d754:	4690      	mov	r8, r2
 801d756:	4699      	mov	r9, r3
 801d758:	46a2      	mov	sl, r4
 801d75a:	46ab      	mov	fp, r5
 801d75c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801d75e:	469a      	mov	sl, r3
 801d760:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 801d762:	e7bc      	b.n	801d6de <arm_radix4_butterfly_q31+0x4c6>

0801d764 <arm_radix4_butterfly_inverse_q31>:
 801d764:	b5f0      	push	{r4, r5, r6, r7, lr}
 801d766:	464d      	mov	r5, r9
 801d768:	4644      	mov	r4, r8
 801d76a:	465f      	mov	r7, fp
 801d76c:	4656      	mov	r6, sl
 801d76e:	b4f0      	push	{r4, r5, r6, r7}
 801d770:	b0a7      	sub	sp, #156	@ 0x9c
 801d772:	469c      	mov	ip, r3
 801d774:	9114      	str	r1, [sp, #80]	@ 0x50
 801d776:	0889      	lsrs	r1, r1, #2
 801d778:	9310      	str	r3, [sp, #64]	@ 0x40
 801d77a:	00cb      	lsls	r3, r1, #3
 801d77c:	0015      	movs	r5, r2
 801d77e:	9223      	str	r2, [sp, #140]	@ 0x8c
 801d780:	18c2      	adds	r2, r0, r3
 801d782:	000c      	movs	r4, r1
 801d784:	9124      	str	r1, [sp, #144]	@ 0x90
 801d786:	18d1      	adds	r1, r2, r3
 801d788:	468b      	mov	fp, r1
 801d78a:	469a      	mov	sl, r3
 801d78c:	4663      	mov	r3, ip
 801d78e:	44da      	add	sl, fp
 801d790:	46d0      	mov	r8, sl
 801d792:	4681      	mov	r9, r0
 801d794:	4692      	mov	sl, r2
 801d796:	0119      	lsls	r1, r3, #4
 801d798:	910d      	str	r1, [sp, #52]	@ 0x34
 801d79a:	00d9      	lsls	r1, r3, #3
 801d79c:	005b      	lsls	r3, r3, #1
 801d79e:	4463      	add	r3, ip
 801d7a0:	910e      	str	r1, [sp, #56]	@ 0x38
 801d7a2:	00d9      	lsls	r1, r3, #3
 801d7a4:	9022      	str	r0, [sp, #136]	@ 0x88
 801d7a6:	9025      	str	r0, [sp, #148]	@ 0x94
 801d7a8:	910f      	str	r1, [sp, #60]	@ 0x3c
 801d7aa:	9502      	str	r5, [sp, #8]
 801d7ac:	9500      	str	r5, [sp, #0]
 801d7ae:	9501      	str	r5, [sp, #4]
 801d7b0:	9409      	str	r4, [sp, #36]	@ 0x24
 801d7b2:	464b      	mov	r3, r9
 801d7b4:	681b      	ldr	r3, [r3, #0]
 801d7b6:	4652      	mov	r2, sl
 801d7b8:	111c      	asrs	r4, r3, #4
 801d7ba:	465b      	mov	r3, fp
 801d7bc:	4648      	mov	r0, r9
 801d7be:	681b      	ldr	r3, [r3, #0]
 801d7c0:	6812      	ldr	r2, [r2, #0]
 801d7c2:	6840      	ldr	r0, [r0, #4]
 801d7c4:	111b      	asrs	r3, r3, #4
 801d7c6:	18e7      	adds	r7, r4, r3
 801d7c8:	1ae3      	subs	r3, r4, r3
 801d7ca:	1114      	asrs	r4, r2, #4
 801d7cc:	4642      	mov	r2, r8
 801d7ce:	1105      	asrs	r5, r0, #4
 801d7d0:	4658      	mov	r0, fp
 801d7d2:	6812      	ldr	r2, [r2, #0]
 801d7d4:	6840      	ldr	r0, [r0, #4]
 801d7d6:	9303      	str	r3, [sp, #12]
 801d7d8:	1113      	asrs	r3, r2, #4
 801d7da:	18e2      	adds	r2, r4, r3
 801d7dc:	1103      	asrs	r3, r0, #4
 801d7de:	18ee      	adds	r6, r5, r3
 801d7e0:	1ae8      	subs	r0, r5, r3
 801d7e2:	464d      	mov	r5, r9
 801d7e4:	18bb      	adds	r3, r7, r2
 801d7e6:	602b      	str	r3, [r5, #0]
 801d7e8:	4641      	mov	r1, r8
 801d7ea:	4655      	mov	r5, sl
 801d7ec:	6849      	ldr	r1, [r1, #4]
 801d7ee:	686d      	ldr	r5, [r5, #4]
 801d7f0:	110b      	asrs	r3, r1, #4
 801d7f2:	112d      	asrs	r5, r5, #4
 801d7f4:	18eb      	adds	r3, r5, r3
 801d7f6:	464d      	mov	r5, r9
 801d7f8:	18f1      	adds	r1, r6, r3
 801d7fa:	6069      	str	r1, [r5, #4]
 801d7fc:	4655      	mov	r5, sl
 801d7fe:	686d      	ldr	r5, [r5, #4]
 801d800:	9004      	str	r0, [sp, #16]
 801d802:	112c      	asrs	r4, r5, #4
 801d804:	4645      	mov	r5, r8
 801d806:	686d      	ldr	r5, [r5, #4]
 801d808:	1129      	asrs	r1, r5, #4
 801d80a:	1a65      	subs	r5, r4, r1
 801d80c:	4651      	mov	r1, sl
 801d80e:	6809      	ldr	r1, [r1, #0]
 801d810:	1abc      	subs	r4, r7, r2
 801d812:	1108      	asrs	r0, r1, #4
 801d814:	4641      	mov	r1, r8
 801d816:	17e2      	asrs	r2, r4, #31
 801d818:	6809      	ldr	r1, [r1, #0]
 801d81a:	9207      	str	r2, [sp, #28]
 801d81c:	9a01      	ldr	r2, [sp, #4]
 801d81e:	1109      	asrs	r1, r1, #4
 801d820:	6817      	ldr	r7, [r2, #0]
 801d822:	1a41      	subs	r1, r0, r1
 801d824:	9106      	str	r1, [sp, #24]
 801d826:	0039      	movs	r1, r7
 801d828:	17ff      	asrs	r7, r7, #31
 801d82a:	0038      	movs	r0, r7
 801d82c:	9505      	str	r5, [sp, #20]
 801d82e:	1af5      	subs	r5, r6, r3
 801d830:	17ef      	asrs	r7, r5, #31
 801d832:	970b      	str	r7, [sp, #44]	@ 0x2c
 801d834:	6857      	ldr	r7, [r2, #4]
 801d836:	0003      	movs	r3, r0
 801d838:	17fe      	asrs	r6, r7, #31
 801d83a:	000a      	movs	r2, r1
 801d83c:	9108      	str	r1, [sp, #32]
 801d83e:	900a      	str	r0, [sp, #40]	@ 0x28
 801d840:	17e1      	asrs	r1, r4, #31
 801d842:	0020      	movs	r0, r4
 801d844:	960c      	str	r6, [sp, #48]	@ 0x30
 801d846:	f7e2 febb 	bl	80005c0 <__aeabi_lmul>
 801d84a:	003a      	movs	r2, r7
 801d84c:	17fb      	asrs	r3, r7, #31
 801d84e:	000e      	movs	r6, r1
 801d850:	0028      	movs	r0, r5
 801d852:	17e9      	asrs	r1, r5, #31
 801d854:	f7e2 feb4 	bl	80005c0 <__aeabi_lmul>
 801d858:	4653      	mov	r3, sl
 801d85a:	1a76      	subs	r6, r6, r1
 801d85c:	0076      	lsls	r6, r6, #1
 801d85e:	601e      	str	r6, [r3, #0]
 801d860:	002a      	movs	r2, r5
 801d862:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801d864:	9808      	ldr	r0, [sp, #32]
 801d866:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801d868:	f7e2 feaa 	bl	80005c0 <__aeabi_lmul>
 801d86c:	003a      	movs	r2, r7
 801d86e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801d870:	000d      	movs	r5, r1
 801d872:	0020      	movs	r0, r4
 801d874:	9907      	ldr	r1, [sp, #28]
 801d876:	f7e2 fea3 	bl	80005c0 <__aeabi_lmul>
 801d87a:	4657      	mov	r7, sl
 801d87c:	186d      	adds	r5, r5, r1
 801d87e:	006d      	lsls	r5, r5, #1
 801d880:	607d      	str	r5, [r7, #4]
 801d882:	9b03      	ldr	r3, [sp, #12]
 801d884:	9e06      	ldr	r6, [sp, #24]
 801d886:	9d05      	ldr	r5, [sp, #20]
 801d888:	46b4      	mov	ip, r6
 801d88a:	1b5d      	subs	r5, r3, r5
 801d88c:	9b00      	ldr	r3, [sp, #0]
 801d88e:	17ef      	asrs	r7, r5, #31
 801d890:	0039      	movs	r1, r7
 801d892:	681f      	ldr	r7, [r3, #0]
 801d894:	17fc      	asrs	r4, r7, #31
 801d896:	0020      	movs	r0, r4
 801d898:	9c04      	ldr	r4, [sp, #16]
 801d89a:	4464      	add	r4, ip
 801d89c:	17e6      	asrs	r6, r4, #31
 801d89e:	9407      	str	r4, [sp, #28]
 801d8a0:	9608      	str	r6, [sp, #32]
 801d8a2:	685e      	ldr	r6, [r3, #4]
 801d8a4:	900b      	str	r0, [sp, #44]	@ 0x2c
 801d8a6:	17f2      	asrs	r2, r6, #31
 801d8a8:	0003      	movs	r3, r0
 801d8aa:	920c      	str	r2, [sp, #48]	@ 0x30
 801d8ac:	0028      	movs	r0, r5
 801d8ae:	003a      	movs	r2, r7
 801d8b0:	910a      	str	r1, [sp, #40]	@ 0x28
 801d8b2:	f7e2 fe85 	bl	80005c0 <__aeabi_lmul>
 801d8b6:	0032      	movs	r2, r6
 801d8b8:	17f3      	asrs	r3, r6, #31
 801d8ba:	9807      	ldr	r0, [sp, #28]
 801d8bc:	000c      	movs	r4, r1
 801d8be:	9908      	ldr	r1, [sp, #32]
 801d8c0:	f7e2 fe7e 	bl	80005c0 <__aeabi_lmul>
 801d8c4:	4658      	mov	r0, fp
 801d8c6:	1a64      	subs	r4, r4, r1
 801d8c8:	0064      	lsls	r4, r4, #1
 801d8ca:	9a07      	ldr	r2, [sp, #28]
 801d8cc:	6004      	str	r4, [r0, #0]
 801d8ce:	9b08      	ldr	r3, [sp, #32]
 801d8d0:	0038      	movs	r0, r7
 801d8d2:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801d8d4:	f7e2 fe74 	bl	80005c0 <__aeabi_lmul>
 801d8d8:	0032      	movs	r2, r6
 801d8da:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801d8dc:	000c      	movs	r4, r1
 801d8de:	0028      	movs	r0, r5
 801d8e0:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801d8e2:	f7e2 fe6d 	bl	80005c0 <__aeabi_lmul>
 801d8e6:	9d05      	ldr	r5, [sp, #20]
 801d8e8:	465f      	mov	r7, fp
 801d8ea:	46ac      	mov	ip, r5
 801d8ec:	1864      	adds	r4, r4, r1
 801d8ee:	9903      	ldr	r1, [sp, #12]
 801d8f0:	0064      	lsls	r4, r4, #1
 801d8f2:	4461      	add	r1, ip
 801d8f4:	607c      	str	r4, [r7, #4]
 801d8f6:	000c      	movs	r4, r1
 801d8f8:	17c9      	asrs	r1, r1, #31
 801d8fa:	9105      	str	r1, [sp, #20]
 801d8fc:	9902      	ldr	r1, [sp, #8]
 801d8fe:	9804      	ldr	r0, [sp, #16]
 801d900:	680d      	ldr	r5, [r1, #0]
 801d902:	9e06      	ldr	r6, [sp, #24]
 801d904:	002b      	movs	r3, r5
 801d906:	17ed      	asrs	r5, r5, #31
 801d908:	684f      	ldr	r7, [r1, #4]
 801d90a:	9503      	str	r5, [sp, #12]
 801d90c:	1b85      	subs	r5, r0, r6
 801d90e:	17e8      	asrs	r0, r5, #31
 801d910:	001a      	movs	r2, r3
 801d912:	9006      	str	r0, [sp, #24]
 801d914:	17fe      	asrs	r6, r7, #31
 801d916:	9304      	str	r3, [sp, #16]
 801d918:	0020      	movs	r0, r4
 801d91a:	9b03      	ldr	r3, [sp, #12]
 801d91c:	17e1      	asrs	r1, r4, #31
 801d91e:	9607      	str	r6, [sp, #28]
 801d920:	f7e2 fe4e 	bl	80005c0 <__aeabi_lmul>
 801d924:	003a      	movs	r2, r7
 801d926:	000e      	movs	r6, r1
 801d928:	17fb      	asrs	r3, r7, #31
 801d92a:	0028      	movs	r0, r5
 801d92c:	17e9      	asrs	r1, r5, #31
 801d92e:	f7e2 fe47 	bl	80005c0 <__aeabi_lmul>
 801d932:	4640      	mov	r0, r8
 801d934:	1a76      	subs	r6, r6, r1
 801d936:	0076      	lsls	r6, r6, #1
 801d938:	002a      	movs	r2, r5
 801d93a:	9b06      	ldr	r3, [sp, #24]
 801d93c:	6006      	str	r6, [r0, #0]
 801d93e:	9903      	ldr	r1, [sp, #12]
 801d940:	9804      	ldr	r0, [sp, #16]
 801d942:	f7e2 fe3d 	bl	80005c0 <__aeabi_lmul>
 801d946:	0020      	movs	r0, r4
 801d948:	2408      	movs	r4, #8
 801d94a:	9b07      	ldr	r3, [sp, #28]
 801d94c:	000d      	movs	r5, r1
 801d94e:	003a      	movs	r2, r7
 801d950:	9905      	ldr	r1, [sp, #20]
 801d952:	f7e2 fe35 	bl	80005c0 <__aeabi_lmul>
 801d956:	4640      	mov	r0, r8
 801d958:	46a4      	mov	ip, r4
 801d95a:	186d      	adds	r5, r5, r1
 801d95c:	006d      	lsls	r5, r5, #1
 801d95e:	6045      	str	r5, [r0, #4]
 801d960:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801d962:	44e1      	add	r9, ip
 801d964:	3801      	subs	r0, #1
 801d966:	9009      	str	r0, [sp, #36]	@ 0x24
 801d968:	9a01      	ldr	r2, [sp, #4]
 801d96a:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 801d96c:	44e2      	add	sl, ip
 801d96e:	44e3      	add	fp, ip
 801d970:	44e0      	add	r8, ip
 801d972:	46a4      	mov	ip, r4
 801d974:	4462      	add	r2, ip
 801d976:	9201      	str	r2, [sp, #4]
 801d978:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801d97a:	9b00      	ldr	r3, [sp, #0]
 801d97c:	4694      	mov	ip, r2
 801d97e:	4463      	add	r3, ip
 801d980:	9300      	str	r3, [sp, #0]
 801d982:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801d984:	9902      	ldr	r1, [sp, #8]
 801d986:	469c      	mov	ip, r3
 801d988:	4461      	add	r1, ip
 801d98a:	9102      	str	r1, [sp, #8]
 801d98c:	2800      	cmp	r0, #0
 801d98e:	d000      	beq.n	801d992 <arm_radix4_butterfly_inverse_q31+0x22e>
 801d990:	e70f      	b.n	801d7b2 <arm_radix4_butterfly_inverse_q31+0x4e>
 801d992:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801d994:	009b      	lsls	r3, r3, #2
 801d996:	931f      	str	r3, [sp, #124]	@ 0x7c
 801d998:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801d99a:	9320      	str	r3, [sp, #128]	@ 0x80
 801d99c:	9313      	str	r3, [sp, #76]	@ 0x4c
 801d99e:	2b04      	cmp	r3, #4
 801d9a0:	d800      	bhi.n	801d9a4 <arm_radix4_butterfly_inverse_q31+0x240>
 801d9a2:	e17c      	b.n	801dc9e <arm_radix4_butterfly_inverse_q31+0x53a>
 801d9a4:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801d9a6:	0893      	lsrs	r3, r2, #2
 801d9a8:	1e59      	subs	r1, r3, #1
 801d9aa:	9321      	str	r3, [sp, #132]	@ 0x84
 801d9ac:	00db      	lsls	r3, r3, #3
 801d9ae:	931b      	str	r3, [sp, #108]	@ 0x6c
 801d9b0:	00d3      	lsls	r3, r2, #3
 801d9b2:	9300      	str	r3, [sp, #0]
 801d9b4:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 801d9b6:	911a      	str	r1, [sp, #104]	@ 0x68
 801d9b8:	00da      	lsls	r2, r3, #3
 801d9ba:	921e      	str	r2, [sp, #120]	@ 0x78
 801d9bc:	011a      	lsls	r2, r3, #4
 801d9be:	921d      	str	r2, [sp, #116]	@ 0x74
 801d9c0:	001a      	movs	r2, r3
 801d9c2:	4694      	mov	ip, r2
 801d9c4:	005b      	lsls	r3, r3, #1
 801d9c6:	4463      	add	r3, ip
 801d9c8:	00db      	lsls	r3, r3, #3
 801d9ca:	931c      	str	r3, [sp, #112]	@ 0x70
 801d9cc:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 801d9ce:	9317      	str	r3, [sp, #92]	@ 0x5c
 801d9d0:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801d9d2:	9318      	str	r3, [sp, #96]	@ 0x60
 801d9d4:	9319      	str	r3, [sp, #100]	@ 0x64
 801d9d6:	9316      	str	r3, [sp, #88]	@ 0x58
 801d9d8:	2300      	movs	r3, #0
 801d9da:	9315      	str	r3, [sp, #84]	@ 0x54
 801d9dc:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801d9de:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 801d9e0:	681a      	ldr	r2, [r3, #0]
 801d9e2:	685b      	ldr	r3, [r3, #4]
 801d9e4:	9205      	str	r2, [sp, #20]
 801d9e6:	9306      	str	r3, [sp, #24]
 801d9e8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801d9ea:	468c      	mov	ip, r1
 801d9ec:	681a      	ldr	r2, [r3, #0]
 801d9ee:	685b      	ldr	r3, [r3, #4]
 801d9f0:	9207      	str	r2, [sp, #28]
 801d9f2:	9308      	str	r3, [sp, #32]
 801d9f4:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 801d9f6:	681a      	ldr	r2, [r3, #0]
 801d9f8:	685b      	ldr	r3, [r3, #4]
 801d9fa:	9209      	str	r2, [sp, #36]	@ 0x24
 801d9fc:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 801d9fe:	930a      	str	r3, [sp, #40]	@ 0x28
 801da00:	0013      	movs	r3, r2
 801da02:	4463      	add	r3, ip
 801da04:	4698      	mov	r8, r3
 801da06:	0013      	movs	r3, r2
 801da08:	4442      	add	r2, r8
 801da0a:	4691      	mov	r9, r2
 801da0c:	001a      	movs	r2, r3
 801da0e:	444a      	add	r2, r9
 801da10:	4692      	mov	sl, r2
 801da12:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801da14:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 801da16:	4293      	cmp	r3, r2
 801da18:	d800      	bhi.n	801da1c <arm_radix4_butterfly_inverse_q31+0x2b8>
 801da1a:	e0d9      	b.n	801dbd0 <arm_radix4_butterfly_inverse_q31+0x46c>
 801da1c:	4694      	mov	ip, r2
 801da1e:	4644      	mov	r4, r8
 801da20:	4655      	mov	r5, sl
 801da22:	4688      	mov	r8, r1
 801da24:	9b07      	ldr	r3, [sp, #28]
 801da26:	17db      	asrs	r3, r3, #31
 801da28:	930c      	str	r3, [sp, #48]	@ 0x30
 801da2a:	9b08      	ldr	r3, [sp, #32]
 801da2c:	17db      	asrs	r3, r3, #31
 801da2e:	930d      	str	r3, [sp, #52]	@ 0x34
 801da30:	9b05      	ldr	r3, [sp, #20]
 801da32:	17db      	asrs	r3, r3, #31
 801da34:	930e      	str	r3, [sp, #56]	@ 0x38
 801da36:	9b06      	ldr	r3, [sp, #24]
 801da38:	17db      	asrs	r3, r3, #31
 801da3a:	930f      	str	r3, [sp, #60]	@ 0x3c
 801da3c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801da3e:	17db      	asrs	r3, r3, #31
 801da40:	9310      	str	r3, [sp, #64]	@ 0x40
 801da42:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801da44:	17db      	asrs	r3, r3, #31
 801da46:	9311      	str	r3, [sp, #68]	@ 0x44
 801da48:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801da4a:	4463      	add	r3, ip
 801da4c:	930b      	str	r3, [sp, #44]	@ 0x2c
 801da4e:	4643      	mov	r3, r8
 801da50:	4641      	mov	r1, r8
 801da52:	681a      	ldr	r2, [r3, #0]
 801da54:	464b      	mov	r3, r9
 801da56:	684f      	ldr	r7, [r1, #4]
 801da58:	4649      	mov	r1, r9
 801da5a:	681b      	ldr	r3, [r3, #0]
 801da5c:	18d6      	adds	r6, r2, r3
 801da5e:	1ad3      	subs	r3, r2, r3
 801da60:	9301      	str	r3, [sp, #4]
 801da62:	684b      	ldr	r3, [r1, #4]
 801da64:	1af9      	subs	r1, r7, r3
 801da66:	9102      	str	r1, [sp, #8]
 801da68:	6829      	ldr	r1, [r5, #0]
 801da6a:	18f8      	adds	r0, r7, r3
 801da6c:	468c      	mov	ip, r1
 801da6e:	6827      	ldr	r7, [r4, #0]
 801da70:	4467      	add	r7, ip
 801da72:	003a      	movs	r2, r7
 801da74:	19f3      	adds	r3, r6, r7
 801da76:	4647      	mov	r7, r8
 801da78:	109b      	asrs	r3, r3, #2
 801da7a:	603b      	str	r3, [r7, #0]
 801da7c:	6869      	ldr	r1, [r5, #4]
 801da7e:	6867      	ldr	r7, [r4, #4]
 801da80:	468c      	mov	ip, r1
 801da82:	4467      	add	r7, ip
 801da84:	003b      	movs	r3, r7
 801da86:	19c1      	adds	r1, r0, r7
 801da88:	4647      	mov	r7, r8
 801da8a:	1ab6      	subs	r6, r6, r2
 801da8c:	1089      	asrs	r1, r1, #2
 801da8e:	6079      	str	r1, [r7, #4]
 801da90:	17f2      	asrs	r2, r6, #31
 801da92:	9900      	ldr	r1, [sp, #0]
 801da94:	4692      	mov	sl, r2
 801da96:	468c      	mov	ip, r1
 801da98:	6867      	ldr	r7, [r4, #4]
 801da9a:	6869      	ldr	r1, [r5, #4]
 801da9c:	44e0      	add	r8, ip
 801da9e:	1a7f      	subs	r7, r7, r1
 801daa0:	9703      	str	r7, [sp, #12]
 801daa2:	6821      	ldr	r1, [r4, #0]
 801daa4:	682f      	ldr	r7, [r5, #0]
 801daa6:	1bc9      	subs	r1, r1, r7
 801daa8:	1ac7      	subs	r7, r0, r3
 801daaa:	17fa      	asrs	r2, r7, #31
 801daac:	4693      	mov	fp, r2
 801daae:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801dab0:	9a07      	ldr	r2, [sp, #28]
 801dab2:	9104      	str	r1, [sp, #16]
 801dab4:	0030      	movs	r0, r6
 801dab6:	4651      	mov	r1, sl
 801dab8:	f7e2 fd82 	bl	80005c0 <__aeabi_lmul>
 801dabc:	9a08      	ldr	r2, [sp, #32]
 801dabe:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801dac0:	9112      	str	r1, [sp, #72]	@ 0x48
 801dac2:	0038      	movs	r0, r7
 801dac4:	4659      	mov	r1, fp
 801dac6:	f7e2 fd7b 	bl	80005c0 <__aeabi_lmul>
 801daca:	9812      	ldr	r0, [sp, #72]	@ 0x48
 801dacc:	9a07      	ldr	r2, [sp, #28]
 801dace:	1a41      	subs	r1, r0, r1
 801dad0:	1049      	asrs	r1, r1, #1
 801dad2:	6021      	str	r1, [r4, #0]
 801dad4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801dad6:	0038      	movs	r0, r7
 801dad8:	4659      	mov	r1, fp
 801dada:	f7e2 fd71 	bl	80005c0 <__aeabi_lmul>
 801dade:	9a08      	ldr	r2, [sp, #32]
 801dae0:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801dae2:	000f      	movs	r7, r1
 801dae4:	0030      	movs	r0, r6
 801dae6:	4651      	mov	r1, sl
 801dae8:	f7e2 fd6a 	bl	80005c0 <__aeabi_lmul>
 801daec:	9b00      	ldr	r3, [sp, #0]
 801daee:	187f      	adds	r7, r7, r1
 801daf0:	469c      	mov	ip, r3
 801daf2:	107f      	asrs	r7, r7, #1
 801daf4:	6067      	str	r7, [r4, #4]
 801daf6:	9a01      	ldr	r2, [sp, #4]
 801daf8:	9f03      	ldr	r7, [sp, #12]
 801dafa:	9802      	ldr	r0, [sp, #8]
 801dafc:	1bd7      	subs	r7, r2, r7
 801dafe:	17fe      	asrs	r6, r7, #31
 801db00:	0031      	movs	r1, r6
 801db02:	9e04      	ldr	r6, [sp, #16]
 801db04:	4682      	mov	sl, r0
 801db06:	4464      	add	r4, ip
 801db08:	46b4      	mov	ip, r6
 801db0a:	44e2      	add	sl, ip
 801db0c:	4652      	mov	r2, sl
 801db0e:	17d2      	asrs	r2, r2, #31
 801db10:	4693      	mov	fp, r2
 801db12:	0038      	movs	r0, r7
 801db14:	9a05      	ldr	r2, [sp, #20]
 801db16:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801db18:	9112      	str	r1, [sp, #72]	@ 0x48
 801db1a:	f7e2 fd51 	bl	80005c0 <__aeabi_lmul>
 801db1e:	9a06      	ldr	r2, [sp, #24]
 801db20:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801db22:	000e      	movs	r6, r1
 801db24:	4650      	mov	r0, sl
 801db26:	4659      	mov	r1, fp
 801db28:	f7e2 fd4a 	bl	80005c0 <__aeabi_lmul>
 801db2c:	4648      	mov	r0, r9
 801db2e:	1a76      	subs	r6, r6, r1
 801db30:	1076      	asrs	r6, r6, #1
 801db32:	6006      	str	r6, [r0, #0]
 801db34:	9a05      	ldr	r2, [sp, #20]
 801db36:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801db38:	4650      	mov	r0, sl
 801db3a:	4659      	mov	r1, fp
 801db3c:	f7e2 fd40 	bl	80005c0 <__aeabi_lmul>
 801db40:	9a06      	ldr	r2, [sp, #24]
 801db42:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801db44:	000e      	movs	r6, r1
 801db46:	0038      	movs	r0, r7
 801db48:	9912      	ldr	r1, [sp, #72]	@ 0x48
 801db4a:	f7e2 fd39 	bl	80005c0 <__aeabi_lmul>
 801db4e:	9a00      	ldr	r2, [sp, #0]
 801db50:	9f03      	ldr	r7, [sp, #12]
 801db52:	4694      	mov	ip, r2
 801db54:	1876      	adds	r6, r6, r1
 801db56:	4649      	mov	r1, r9
 801db58:	44e1      	add	r9, ip
 801db5a:	46bc      	mov	ip, r7
 801db5c:	9b01      	ldr	r3, [sp, #4]
 801db5e:	1076      	asrs	r6, r6, #1
 801db60:	4463      	add	r3, ip
 801db62:	17df      	asrs	r7, r3, #31
 801db64:	604e      	str	r6, [r1, #4]
 801db66:	46ba      	mov	sl, r7
 801db68:	001e      	movs	r6, r3
 801db6a:	9802      	ldr	r0, [sp, #8]
 801db6c:	9b04      	ldr	r3, [sp, #16]
 801db6e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801db70:	1ac7      	subs	r7, r0, r3
 801db72:	17fb      	asrs	r3, r7, #31
 801db74:	469b      	mov	fp, r3
 801db76:	0030      	movs	r0, r6
 801db78:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801db7a:	4651      	mov	r1, sl
 801db7c:	f7e2 fd20 	bl	80005c0 <__aeabi_lmul>
 801db80:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801db82:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801db84:	9101      	str	r1, [sp, #4]
 801db86:	0038      	movs	r0, r7
 801db88:	4659      	mov	r1, fp
 801db8a:	f7e2 fd19 	bl	80005c0 <__aeabi_lmul>
 801db8e:	9801      	ldr	r0, [sp, #4]
 801db90:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801db92:	1a41      	subs	r1, r0, r1
 801db94:	1049      	asrs	r1, r1, #1
 801db96:	6029      	str	r1, [r5, #0]
 801db98:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801db9a:	0038      	movs	r0, r7
 801db9c:	4659      	mov	r1, fp
 801db9e:	f7e2 fd0f 	bl	80005c0 <__aeabi_lmul>
 801dba2:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801dba4:	000f      	movs	r7, r1
 801dba6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801dba8:	0030      	movs	r0, r6
 801dbaa:	4651      	mov	r1, sl
 801dbac:	f7e2 fd08 	bl	80005c0 <__aeabi_lmul>
 801dbb0:	187f      	adds	r7, r7, r1
 801dbb2:	107f      	asrs	r7, r7, #1
 801dbb4:	606f      	str	r7, [r5, #4]
 801dbb6:	9a00      	ldr	r2, [sp, #0]
 801dbb8:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 801dbba:	4694      	mov	ip, r2
 801dbbc:	4465      	add	r5, ip
 801dbbe:	468c      	mov	ip, r1
 801dbc0:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801dbc2:	0013      	movs	r3, r2
 801dbc4:	4462      	add	r2, ip
 801dbc6:	920b      	str	r2, [sp, #44]	@ 0x2c
 801dbc8:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801dbca:	429a      	cmp	r2, r3
 801dbcc:	d900      	bls.n	801dbd0 <arm_radix4_butterfly_inverse_q31+0x46c>
 801dbce:	e73e      	b.n	801da4e <arm_radix4_butterfly_inverse_q31+0x2ea>
 801dbd0:	991e      	ldr	r1, [sp, #120]	@ 0x78
 801dbd2:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 801dbd4:	468c      	mov	ip, r1
 801dbd6:	991d      	ldr	r1, [sp, #116]	@ 0x74
 801dbd8:	4462      	add	r2, ip
 801dbda:	468c      	mov	ip, r1
 801dbdc:	9216      	str	r2, [sp, #88]	@ 0x58
 801dbde:	991c      	ldr	r1, [sp, #112]	@ 0x70
 801dbe0:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 801dbe2:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801dbe4:	4462      	add	r2, ip
 801dbe6:	468c      	mov	ip, r1
 801dbe8:	9219      	str	r2, [sp, #100]	@ 0x64
 801dbea:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 801dbec:	3301      	adds	r3, #1
 801dbee:	4462      	add	r2, ip
 801dbf0:	9218      	str	r2, [sp, #96]	@ 0x60
 801dbf2:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 801dbf4:	9315      	str	r3, [sp, #84]	@ 0x54
 801dbf6:	3208      	adds	r2, #8
 801dbf8:	9217      	str	r2, [sp, #92]	@ 0x5c
 801dbfa:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 801dbfc:	4293      	cmp	r3, r2
 801dbfe:	d800      	bhi.n	801dc02 <arm_radix4_butterfly_inverse_q31+0x49e>
 801dc00:	e6ec      	b.n	801d9dc <arm_radix4_butterfly_inverse_q31+0x278>
 801dc02:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 801dc04:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 801dc06:	009b      	lsls	r3, r3, #2
 801dc08:	931f      	str	r3, [sp, #124]	@ 0x7c
 801dc0a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 801dc0c:	9213      	str	r2, [sp, #76]	@ 0x4c
 801dc0e:	089b      	lsrs	r3, r3, #2
 801dc10:	9320      	str	r3, [sp, #128]	@ 0x80
 801dc12:	2b04      	cmp	r3, #4
 801dc14:	d900      	bls.n	801dc18 <arm_radix4_butterfly_inverse_q31+0x4b4>
 801dc16:	e6c5      	b.n	801d9a4 <arm_radix4_butterfly_inverse_q31+0x240>
 801dc18:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801dc1a:	469a      	mov	sl, r3
 801dc1c:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 801dc1e:	681a      	ldr	r2, [r3, #0]
 801dc20:	6918      	ldr	r0, [r3, #16]
 801dc22:	4691      	mov	r9, r2
 801dc24:	464c      	mov	r4, r9
 801dc26:	4680      	mov	r8, r0
 801dc28:	69de      	ldr	r6, [r3, #28]
 801dc2a:	689d      	ldr	r5, [r3, #8]
 801dc2c:	46b4      	mov	ip, r6
 801dc2e:	6998      	ldr	r0, [r3, #24]
 801dc30:	1964      	adds	r4, r4, r5
 801dc32:	6859      	ldr	r1, [r3, #4]
 801dc34:	68da      	ldr	r2, [r3, #12]
 801dc36:	4444      	add	r4, r8
 801dc38:	695f      	ldr	r7, [r3, #20]
 801dc3a:	1824      	adds	r4, r4, r0
 801dc3c:	601c      	str	r4, [r3, #0]
 801dc3e:	188c      	adds	r4, r1, r2
 801dc40:	19e4      	adds	r4, r4, r7
 801dc42:	4464      	add	r4, ip
 801dc44:	605c      	str	r4, [r3, #4]
 801dc46:	464c      	mov	r4, r9
 801dc48:	1b64      	subs	r4, r4, r5
 801dc4a:	4444      	add	r4, r8
 801dc4c:	1a24      	subs	r4, r4, r0
 801dc4e:	609c      	str	r4, [r3, #8]
 801dc50:	1a8c      	subs	r4, r1, r2
 801dc52:	19e4      	adds	r4, r4, r7
 801dc54:	1ba4      	subs	r4, r4, r6
 801dc56:	60dc      	str	r4, [r3, #12]
 801dc58:	464c      	mov	r4, r9
 801dc5a:	4646      	mov	r6, r8
 801dc5c:	1aa4      	subs	r4, r4, r2
 801dc5e:	1ba4      	subs	r4, r4, r6
 801dc60:	4464      	add	r4, ip
 801dc62:	611c      	str	r4, [r3, #16]
 801dc64:	194c      	adds	r4, r1, r5
 801dc66:	1be4      	subs	r4, r4, r7
 801dc68:	1a24      	subs	r4, r4, r0
 801dc6a:	615c      	str	r4, [r3, #20]
 801dc6c:	4644      	mov	r4, r8
 801dc6e:	4666      	mov	r6, ip
 801dc70:	444a      	add	r2, r9
 801dc72:	1b12      	subs	r2, r2, r4
 801dc74:	1b92      	subs	r2, r2, r6
 801dc76:	619a      	str	r2, [r3, #24]
 801dc78:	1b4a      	subs	r2, r1, r5
 801dc7a:	1bd1      	subs	r1, r2, r7
 801dc7c:	2201      	movs	r2, #1
 801dc7e:	4252      	negs	r2, r2
 801dc80:	4694      	mov	ip, r2
 801dc82:	44e2      	add	sl, ip
 801dc84:	4652      	mov	r2, sl
 801dc86:	1809      	adds	r1, r1, r0
 801dc88:	61d9      	str	r1, [r3, #28]
 801dc8a:	3320      	adds	r3, #32
 801dc8c:	2a00      	cmp	r2, #0
 801dc8e:	d1c6      	bne.n	801dc1e <arm_radix4_butterfly_inverse_q31+0x4ba>
 801dc90:	b027      	add	sp, #156	@ 0x9c
 801dc92:	bc3c      	pop	{r2, r3, r4, r5}
 801dc94:	4690      	mov	r8, r2
 801dc96:	4699      	mov	r9, r3
 801dc98:	46a2      	mov	sl, r4
 801dc9a:	46ab      	mov	fp, r5
 801dc9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801dc9e:	469a      	mov	sl, r3
 801dca0:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 801dca2:	e7bc      	b.n	801dc1e <arm_radix4_butterfly_inverse_q31+0x4ba>

0801dca4 <arm_cmplx_mag_squared_q31>:
 801dca4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801dca6:	464f      	mov	r7, r9
 801dca8:	4646      	mov	r6, r8
 801dcaa:	0004      	movs	r4, r0
 801dcac:	b4c0      	push	{r6, r7}
 801dcae:	0016      	movs	r6, r2
 801dcb0:	000f      	movs	r7, r1
 801dcb2:	2a00      	cmp	r2, #0
 801dcb4:	d018      	beq.n	801dce8 <arm_cmplx_mag_squared_q31+0x44>
 801dcb6:	6823      	ldr	r3, [r4, #0]
 801dcb8:	6822      	ldr	r2, [r4, #0]
 801dcba:	17d9      	asrs	r1, r3, #31
 801dcbc:	6863      	ldr	r3, [r4, #4]
 801dcbe:	0010      	movs	r0, r2
 801dcc0:	4698      	mov	r8, r3
 801dcc2:	17db      	asrs	r3, r3, #31
 801dcc4:	4699      	mov	r9, r3
 801dcc6:	000b      	movs	r3, r1
 801dcc8:	f7e2 fc7a 	bl	80005c0 <__aeabi_lmul>
 801dccc:	4642      	mov	r2, r8
 801dcce:	104d      	asrs	r5, r1, #1
 801dcd0:	464b      	mov	r3, r9
 801dcd2:	4640      	mov	r0, r8
 801dcd4:	4649      	mov	r1, r9
 801dcd6:	f7e2 fc73 	bl	80005c0 <__aeabi_lmul>
 801dcda:	1049      	asrs	r1, r1, #1
 801dcdc:	1869      	adds	r1, r5, r1
 801dcde:	3e01      	subs	r6, #1
 801dce0:	c702      	stmia	r7!, {r1}
 801dce2:	3408      	adds	r4, #8
 801dce4:	2e00      	cmp	r6, #0
 801dce6:	d1e6      	bne.n	801dcb6 <arm_cmplx_mag_squared_q31+0x12>
 801dce8:	bc0c      	pop	{r2, r3}
 801dcea:	4690      	mov	r8, r2
 801dcec:	4699      	mov	r9, r3
 801dcee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801dcf0 <arm_mult_q31>:
 801dcf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801dcf2:	4646      	mov	r6, r8
 801dcf4:	464f      	mov	r7, r9
 801dcf6:	4690      	mov	r8, r2
 801dcf8:	b4c0      	push	{r6, r7}
 801dcfa:	001d      	movs	r5, r3
 801dcfc:	0006      	movs	r6, r0
 801dcfe:	000f      	movs	r7, r1
 801dd00:	2400      	movs	r4, #0
 801dd02:	2b00      	cmp	r3, #0
 801dd04:	d020      	beq.n	801dd48 <arm_mult_q31+0x58>
 801dd06:	4b12      	ldr	r3, [pc, #72]	@ (801dd50 <arm_mult_q31+0x60>)
 801dd08:	4699      	mov	r9, r3
 801dd0a:	e007      	b.n	801dd1c <arm_mult_q31+0x2c>
 801dd0c:	464b      	mov	r3, r9
 801dd0e:	4059      	eors	r1, r3
 801dd10:	4643      	mov	r3, r8
 801dd12:	3d01      	subs	r5, #1
 801dd14:	5119      	str	r1, [r3, r4]
 801dd16:	3404      	adds	r4, #4
 801dd18:	2d00      	cmp	r5, #0
 801dd1a:	d015      	beq.n	801dd48 <arm_mult_q31+0x58>
 801dd1c:	5933      	ldr	r3, [r6, r4]
 801dd1e:	593a      	ldr	r2, [r7, r4]
 801dd20:	17d9      	asrs	r1, r3, #31
 801dd22:	593b      	ldr	r3, [r7, r4]
 801dd24:	5930      	ldr	r0, [r6, r4]
 801dd26:	17db      	asrs	r3, r3, #31
 801dd28:	f7e2 fc4a 	bl	80005c0 <__aeabi_lmul>
 801dd2c:	004b      	lsls	r3, r1, #1
 801dd2e:	0fc0      	lsrs	r0, r0, #31
 801dd30:	4318      	orrs	r0, r3
 801dd32:	17c9      	asrs	r1, r1, #31
 801dd34:	17c3      	asrs	r3, r0, #31
 801dd36:	428b      	cmp	r3, r1
 801dd38:	d1e8      	bne.n	801dd0c <arm_mult_q31+0x1c>
 801dd3a:	0001      	movs	r1, r0
 801dd3c:	4643      	mov	r3, r8
 801dd3e:	3d01      	subs	r5, #1
 801dd40:	5119      	str	r1, [r3, r4]
 801dd42:	3404      	adds	r4, #4
 801dd44:	2d00      	cmp	r5, #0
 801dd46:	d1e9      	bne.n	801dd1c <arm_mult_q31+0x2c>
 801dd48:	bc0c      	pop	{r2, r3}
 801dd4a:	4690      	mov	r8, r2
 801dd4c:	4699      	mov	r9, r3
 801dd4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801dd50:	7fffffff 	.word	0x7fffffff

0801dd54 <arm_add_q31>:
 801dd54:	b5f0      	push	{r4, r5, r6, r7, lr}
 801dd56:	465f      	mov	r7, fp
 801dd58:	4656      	mov	r6, sl
 801dd5a:	464d      	mov	r5, r9
 801dd5c:	4644      	mov	r4, r8
 801dd5e:	b4f0      	push	{r4, r5, r6, r7}
 801dd60:	4693      	mov	fp, r2
 801dd62:	b083      	sub	sp, #12
 801dd64:	4681      	mov	r9, r0
 801dd66:	468a      	mov	sl, r1
 801dd68:	4698      	mov	r8, r3
 801dd6a:	2200      	movs	r2, #0
 801dd6c:	2b00      	cmp	r3, #0
 801dd6e:	d020      	beq.n	801ddb2 <arm_add_q31+0x5e>
 801dd70:	4649      	mov	r1, r9
 801dd72:	4653      	mov	r3, sl
 801dd74:	588e      	ldr	r6, [r1, r2]
 801dd76:	589b      	ldr	r3, [r3, r2]
 801dd78:	17f7      	asrs	r7, r6, #31
 801dd7a:	001c      	movs	r4, r3
 801dd7c:	0030      	movs	r0, r6
 801dd7e:	0039      	movs	r1, r7
 801dd80:	17dd      	asrs	r5, r3, #31
 801dd82:	46b4      	mov	ip, r6
 801dd84:	1900      	adds	r0, r0, r4
 801dd86:	4169      	adcs	r1, r5
 801dd88:	4463      	add	r3, ip
 801dd8a:	9000      	str	r0, [sp, #0]
 801dd8c:	9101      	str	r1, [sp, #4]
 801dd8e:	17d9      	asrs	r1, r3, #31
 801dd90:	468c      	mov	ip, r1
 801dd92:	9901      	ldr	r1, [sp, #4]
 801dd94:	458c      	cmp	ip, r1
 801dd96:	d002      	beq.n	801dd9e <arm_add_q31+0x4a>
 801dd98:	17cb      	asrs	r3, r1, #31
 801dd9a:	4909      	ldr	r1, [pc, #36]	@ (801ddc0 <arm_add_q31+0x6c>)
 801dd9c:	404b      	eors	r3, r1
 801dd9e:	4659      	mov	r1, fp
 801dda0:	508b      	str	r3, [r1, r2]
 801dda2:	2301      	movs	r3, #1
 801dda4:	425b      	negs	r3, r3
 801dda6:	469c      	mov	ip, r3
 801dda8:	44e0      	add	r8, ip
 801ddaa:	4643      	mov	r3, r8
 801ddac:	3204      	adds	r2, #4
 801ddae:	2b00      	cmp	r3, #0
 801ddb0:	d1de      	bne.n	801dd70 <arm_add_q31+0x1c>
 801ddb2:	b003      	add	sp, #12
 801ddb4:	bc3c      	pop	{r2, r3, r4, r5}
 801ddb6:	4690      	mov	r8, r2
 801ddb8:	4699      	mov	r9, r3
 801ddba:	46a2      	mov	sl, r4
 801ddbc:	46ab      	mov	fp, r5
 801ddbe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801ddc0:	7fffffff 	.word	0x7fffffff

0801ddc4 <atof>:
 801ddc4:	b510      	push	{r4, lr}
 801ddc6:	2100      	movs	r1, #0
 801ddc8:	f000 fe12 	bl	801e9f0 <strtod>
 801ddcc:	bd10      	pop	{r4, pc}

0801ddce <atoi>:
 801ddce:	b510      	push	{r4, lr}
 801ddd0:	220a      	movs	r2, #10
 801ddd2:	2100      	movs	r1, #0
 801ddd4:	f000 fea4 	bl	801eb20 <strtol>
 801ddd8:	bd10      	pop	{r4, pc}
	...

0801dddc <sulp>:
 801dddc:	b570      	push	{r4, r5, r6, lr}
 801ddde:	0016      	movs	r6, r2
 801dde0:	000d      	movs	r5, r1
 801dde2:	f003 fcf3 	bl	80217cc <__ulp>
 801dde6:	2e00      	cmp	r6, #0
 801dde8:	d00d      	beq.n	801de06 <sulp+0x2a>
 801ddea:	236b      	movs	r3, #107	@ 0x6b
 801ddec:	006a      	lsls	r2, r5, #1
 801ddee:	0d52      	lsrs	r2, r2, #21
 801ddf0:	1a9b      	subs	r3, r3, r2
 801ddf2:	2b00      	cmp	r3, #0
 801ddf4:	dd07      	ble.n	801de06 <sulp+0x2a>
 801ddf6:	2400      	movs	r4, #0
 801ddf8:	4a03      	ldr	r2, [pc, #12]	@ (801de08 <sulp+0x2c>)
 801ddfa:	051b      	lsls	r3, r3, #20
 801ddfc:	189d      	adds	r5, r3, r2
 801ddfe:	002b      	movs	r3, r5
 801de00:	0022      	movs	r2, r4
 801de02:	f7e4 fc1b 	bl	800263c <__aeabi_dmul>
 801de06:	bd70      	pop	{r4, r5, r6, pc}
 801de08:	3ff00000 	.word	0x3ff00000

0801de0c <_strtod_l>:
 801de0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801de0e:	b0a3      	sub	sp, #140	@ 0x8c
 801de10:	921b      	str	r2, [sp, #108]	@ 0x6c
 801de12:	2200      	movs	r2, #0
 801de14:	2600      	movs	r6, #0
 801de16:	2700      	movs	r7, #0
 801de18:	9005      	str	r0, [sp, #20]
 801de1a:	9109      	str	r1, [sp, #36]	@ 0x24
 801de1c:	921e      	str	r2, [sp, #120]	@ 0x78
 801de1e:	911d      	str	r1, [sp, #116]	@ 0x74
 801de20:	780a      	ldrb	r2, [r1, #0]
 801de22:	2a2b      	cmp	r2, #43	@ 0x2b
 801de24:	d053      	beq.n	801dece <_strtod_l+0xc2>
 801de26:	d83f      	bhi.n	801dea8 <_strtod_l+0x9c>
 801de28:	2a0d      	cmp	r2, #13
 801de2a:	d839      	bhi.n	801dea0 <_strtod_l+0x94>
 801de2c:	2a08      	cmp	r2, #8
 801de2e:	d839      	bhi.n	801dea4 <_strtod_l+0x98>
 801de30:	2a00      	cmp	r2, #0
 801de32:	d042      	beq.n	801deba <_strtod_l+0xae>
 801de34:	2200      	movs	r2, #0
 801de36:	9212      	str	r2, [sp, #72]	@ 0x48
 801de38:	2100      	movs	r1, #0
 801de3a:	9d1d      	ldr	r5, [sp, #116]	@ 0x74
 801de3c:	910c      	str	r1, [sp, #48]	@ 0x30
 801de3e:	782a      	ldrb	r2, [r5, #0]
 801de40:	2a30      	cmp	r2, #48	@ 0x30
 801de42:	d000      	beq.n	801de46 <_strtod_l+0x3a>
 801de44:	e083      	b.n	801df4e <_strtod_l+0x142>
 801de46:	786a      	ldrb	r2, [r5, #1]
 801de48:	3120      	adds	r1, #32
 801de4a:	438a      	bics	r2, r1
 801de4c:	2a58      	cmp	r2, #88	@ 0x58
 801de4e:	d000      	beq.n	801de52 <_strtod_l+0x46>
 801de50:	e073      	b.n	801df3a <_strtod_l+0x12e>
 801de52:	9302      	str	r3, [sp, #8]
 801de54:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801de56:	4a95      	ldr	r2, [pc, #596]	@ (801e0ac <_strtod_l+0x2a0>)
 801de58:	9301      	str	r3, [sp, #4]
 801de5a:	ab1e      	add	r3, sp, #120	@ 0x78
 801de5c:	9300      	str	r3, [sp, #0]
 801de5e:	9805      	ldr	r0, [sp, #20]
 801de60:	ab1f      	add	r3, sp, #124	@ 0x7c
 801de62:	a91d      	add	r1, sp, #116	@ 0x74
 801de64:	f002 fd62 	bl	802092c <__gethex>
 801de68:	230f      	movs	r3, #15
 801de6a:	0002      	movs	r2, r0
 801de6c:	401a      	ands	r2, r3
 801de6e:	0004      	movs	r4, r0
 801de70:	9206      	str	r2, [sp, #24]
 801de72:	4218      	tst	r0, r3
 801de74:	d005      	beq.n	801de82 <_strtod_l+0x76>
 801de76:	2a06      	cmp	r2, #6
 801de78:	d12b      	bne.n	801ded2 <_strtod_l+0xc6>
 801de7a:	2300      	movs	r3, #0
 801de7c:	3501      	adds	r5, #1
 801de7e:	951d      	str	r5, [sp, #116]	@ 0x74
 801de80:	9312      	str	r3, [sp, #72]	@ 0x48
 801de82:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 801de84:	2b00      	cmp	r3, #0
 801de86:	d002      	beq.n	801de8e <_strtod_l+0x82>
 801de88:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801de8a:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 801de8c:	6013      	str	r3, [r2, #0]
 801de8e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801de90:	2b00      	cmp	r3, #0
 801de92:	d019      	beq.n	801dec8 <_strtod_l+0xbc>
 801de94:	2380      	movs	r3, #128	@ 0x80
 801de96:	0030      	movs	r0, r6
 801de98:	061b      	lsls	r3, r3, #24
 801de9a:	18f9      	adds	r1, r7, r3
 801de9c:	b023      	add	sp, #140	@ 0x8c
 801de9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801dea0:	2a20      	cmp	r2, #32
 801dea2:	d1c7      	bne.n	801de34 <_strtod_l+0x28>
 801dea4:	3101      	adds	r1, #1
 801dea6:	e7ba      	b.n	801de1e <_strtod_l+0x12>
 801dea8:	2a2d      	cmp	r2, #45	@ 0x2d
 801deaa:	d1c3      	bne.n	801de34 <_strtod_l+0x28>
 801deac:	3a2c      	subs	r2, #44	@ 0x2c
 801deae:	9212      	str	r2, [sp, #72]	@ 0x48
 801deb0:	1c4a      	adds	r2, r1, #1
 801deb2:	921d      	str	r2, [sp, #116]	@ 0x74
 801deb4:	784a      	ldrb	r2, [r1, #1]
 801deb6:	2a00      	cmp	r2, #0
 801deb8:	d1be      	bne.n	801de38 <_strtod_l+0x2c>
 801deba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801debc:	931d      	str	r3, [sp, #116]	@ 0x74
 801debe:	2300      	movs	r3, #0
 801dec0:	9312      	str	r3, [sp, #72]	@ 0x48
 801dec2:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 801dec4:	2b00      	cmp	r3, #0
 801dec6:	d1df      	bne.n	801de88 <_strtod_l+0x7c>
 801dec8:	0030      	movs	r0, r6
 801deca:	0039      	movs	r1, r7
 801decc:	e7e6      	b.n	801de9c <_strtod_l+0x90>
 801dece:	2200      	movs	r2, #0
 801ded0:	e7ed      	b.n	801deae <_strtod_l+0xa2>
 801ded2:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 801ded4:	2a00      	cmp	r2, #0
 801ded6:	d007      	beq.n	801dee8 <_strtod_l+0xdc>
 801ded8:	2135      	movs	r1, #53	@ 0x35
 801deda:	a820      	add	r0, sp, #128	@ 0x80
 801dedc:	f003 fd6c 	bl	80219b8 <__copybits>
 801dee0:	991e      	ldr	r1, [sp, #120]	@ 0x78
 801dee2:	9805      	ldr	r0, [sp, #20]
 801dee4:	f003 f926 	bl	8021134 <_Bfree>
 801dee8:	9806      	ldr	r0, [sp, #24]
 801deea:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 801deec:	3801      	subs	r0, #1
 801deee:	2804      	cmp	r0, #4
 801def0:	d806      	bhi.n	801df00 <_strtod_l+0xf4>
 801def2:	f7e2 f943 	bl	800017c <__gnu_thumb1_case_uqi>
 801def6:	0312      	.short	0x0312
 801def8:	1e1c      	.short	0x1e1c
 801defa:	12          	.byte	0x12
 801defb:	00          	.byte	0x00
 801defc:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 801defe:	9f21      	ldr	r7, [sp, #132]	@ 0x84
 801df00:	05e4      	lsls	r4, r4, #23
 801df02:	d502      	bpl.n	801df0a <_strtod_l+0xfe>
 801df04:	2380      	movs	r3, #128	@ 0x80
 801df06:	061b      	lsls	r3, r3, #24
 801df08:	431f      	orrs	r7, r3
 801df0a:	4b69      	ldr	r3, [pc, #420]	@ (801e0b0 <_strtod_l+0x2a4>)
 801df0c:	423b      	tst	r3, r7
 801df0e:	d1b8      	bne.n	801de82 <_strtod_l+0x76>
 801df10:	f001 fd90 	bl	801fa34 <__errno>
 801df14:	2322      	movs	r3, #34	@ 0x22
 801df16:	6003      	str	r3, [r0, #0]
 801df18:	e7b3      	b.n	801de82 <_strtod_l+0x76>
 801df1a:	4966      	ldr	r1, [pc, #408]	@ (801e0b4 <_strtod_l+0x2a8>)
 801df1c:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 801df1e:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 801df20:	400a      	ands	r2, r1
 801df22:	4965      	ldr	r1, [pc, #404]	@ (801e0b8 <_strtod_l+0x2ac>)
 801df24:	185b      	adds	r3, r3, r1
 801df26:	051b      	lsls	r3, r3, #20
 801df28:	431a      	orrs	r2, r3
 801df2a:	0017      	movs	r7, r2
 801df2c:	e7e8      	b.n	801df00 <_strtod_l+0xf4>
 801df2e:	4f60      	ldr	r7, [pc, #384]	@ (801e0b0 <_strtod_l+0x2a4>)
 801df30:	e7e6      	b.n	801df00 <_strtod_l+0xf4>
 801df32:	2601      	movs	r6, #1
 801df34:	4f61      	ldr	r7, [pc, #388]	@ (801e0bc <_strtod_l+0x2b0>)
 801df36:	4276      	negs	r6, r6
 801df38:	e7e2      	b.n	801df00 <_strtod_l+0xf4>
 801df3a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801df3c:	1c5a      	adds	r2, r3, #1
 801df3e:	921d      	str	r2, [sp, #116]	@ 0x74
 801df40:	785b      	ldrb	r3, [r3, #1]
 801df42:	2b30      	cmp	r3, #48	@ 0x30
 801df44:	d0f9      	beq.n	801df3a <_strtod_l+0x12e>
 801df46:	2b00      	cmp	r3, #0
 801df48:	d09b      	beq.n	801de82 <_strtod_l+0x76>
 801df4a:	2301      	movs	r3, #1
 801df4c:	930c      	str	r3, [sp, #48]	@ 0x30
 801df4e:	2500      	movs	r5, #0
 801df50:	220a      	movs	r2, #10
 801df52:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801df54:	950d      	str	r5, [sp, #52]	@ 0x34
 801df56:	9313      	str	r3, [sp, #76]	@ 0x4c
 801df58:	9508      	str	r5, [sp, #32]
 801df5a:	981d      	ldr	r0, [sp, #116]	@ 0x74
 801df5c:	7804      	ldrb	r4, [r0, #0]
 801df5e:	0023      	movs	r3, r4
 801df60:	3b30      	subs	r3, #48	@ 0x30
 801df62:	b2d9      	uxtb	r1, r3
 801df64:	2909      	cmp	r1, #9
 801df66:	d927      	bls.n	801dfb8 <_strtod_l+0x1ac>
 801df68:	2201      	movs	r2, #1
 801df6a:	4955      	ldr	r1, [pc, #340]	@ (801e0c0 <_strtod_l+0x2b4>)
 801df6c:	f001 fcd4 	bl	801f918 <strncmp>
 801df70:	2800      	cmp	r0, #0
 801df72:	d031      	beq.n	801dfd8 <_strtod_l+0x1cc>
 801df74:	2000      	movs	r0, #0
 801df76:	0023      	movs	r3, r4
 801df78:	4684      	mov	ip, r0
 801df7a:	9a08      	ldr	r2, [sp, #32]
 801df7c:	900e      	str	r0, [sp, #56]	@ 0x38
 801df7e:	9206      	str	r2, [sp, #24]
 801df80:	2220      	movs	r2, #32
 801df82:	0019      	movs	r1, r3
 801df84:	4391      	bics	r1, r2
 801df86:	000a      	movs	r2, r1
 801df88:	2100      	movs	r1, #0
 801df8a:	9107      	str	r1, [sp, #28]
 801df8c:	2a45      	cmp	r2, #69	@ 0x45
 801df8e:	d000      	beq.n	801df92 <_strtod_l+0x186>
 801df90:	e0c0      	b.n	801e114 <_strtod_l+0x308>
 801df92:	9b06      	ldr	r3, [sp, #24]
 801df94:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801df96:	4303      	orrs	r3, r0
 801df98:	4313      	orrs	r3, r2
 801df9a:	428b      	cmp	r3, r1
 801df9c:	d08d      	beq.n	801deba <_strtod_l+0xae>
 801df9e:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801dfa0:	9309      	str	r3, [sp, #36]	@ 0x24
 801dfa2:	3301      	adds	r3, #1
 801dfa4:	931d      	str	r3, [sp, #116]	@ 0x74
 801dfa6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801dfa8:	785b      	ldrb	r3, [r3, #1]
 801dfaa:	2b2b      	cmp	r3, #43	@ 0x2b
 801dfac:	d070      	beq.n	801e090 <_strtod_l+0x284>
 801dfae:	000c      	movs	r4, r1
 801dfb0:	2b2d      	cmp	r3, #45	@ 0x2d
 801dfb2:	d173      	bne.n	801e09c <_strtod_l+0x290>
 801dfb4:	2401      	movs	r4, #1
 801dfb6:	e06c      	b.n	801e092 <_strtod_l+0x286>
 801dfb8:	9908      	ldr	r1, [sp, #32]
 801dfba:	2908      	cmp	r1, #8
 801dfbc:	dc09      	bgt.n	801dfd2 <_strtod_l+0x1c6>
 801dfbe:	990d      	ldr	r1, [sp, #52]	@ 0x34
 801dfc0:	4351      	muls	r1, r2
 801dfc2:	185b      	adds	r3, r3, r1
 801dfc4:	930d      	str	r3, [sp, #52]	@ 0x34
 801dfc6:	9b08      	ldr	r3, [sp, #32]
 801dfc8:	3001      	adds	r0, #1
 801dfca:	3301      	adds	r3, #1
 801dfcc:	9308      	str	r3, [sp, #32]
 801dfce:	901d      	str	r0, [sp, #116]	@ 0x74
 801dfd0:	e7c3      	b.n	801df5a <_strtod_l+0x14e>
 801dfd2:	4355      	muls	r5, r2
 801dfd4:	195d      	adds	r5, r3, r5
 801dfd6:	e7f6      	b.n	801dfc6 <_strtod_l+0x1ba>
 801dfd8:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801dfda:	1c5a      	adds	r2, r3, #1
 801dfdc:	921d      	str	r2, [sp, #116]	@ 0x74
 801dfde:	9a08      	ldr	r2, [sp, #32]
 801dfe0:	785b      	ldrb	r3, [r3, #1]
 801dfe2:	2a00      	cmp	r2, #0
 801dfe4:	d03a      	beq.n	801e05c <_strtod_l+0x250>
 801dfe6:	900e      	str	r0, [sp, #56]	@ 0x38
 801dfe8:	9206      	str	r2, [sp, #24]
 801dfea:	001a      	movs	r2, r3
 801dfec:	3a30      	subs	r2, #48	@ 0x30
 801dfee:	2a09      	cmp	r2, #9
 801dff0:	d912      	bls.n	801e018 <_strtod_l+0x20c>
 801dff2:	2201      	movs	r2, #1
 801dff4:	4694      	mov	ip, r2
 801dff6:	e7c3      	b.n	801df80 <_strtod_l+0x174>
 801dff8:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801dffa:	3001      	adds	r0, #1
 801dffc:	1c5a      	adds	r2, r3, #1
 801dffe:	921d      	str	r2, [sp, #116]	@ 0x74
 801e000:	785b      	ldrb	r3, [r3, #1]
 801e002:	2b30      	cmp	r3, #48	@ 0x30
 801e004:	d0f8      	beq.n	801dff8 <_strtod_l+0x1ec>
 801e006:	001a      	movs	r2, r3
 801e008:	3a31      	subs	r2, #49	@ 0x31
 801e00a:	2a08      	cmp	r2, #8
 801e00c:	d83b      	bhi.n	801e086 <_strtod_l+0x27a>
 801e00e:	900e      	str	r0, [sp, #56]	@ 0x38
 801e010:	2000      	movs	r0, #0
 801e012:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 801e014:	9006      	str	r0, [sp, #24]
 801e016:	9213      	str	r2, [sp, #76]	@ 0x4c
 801e018:	001a      	movs	r2, r3
 801e01a:	1c41      	adds	r1, r0, #1
 801e01c:	3a30      	subs	r2, #48	@ 0x30
 801e01e:	2b30      	cmp	r3, #48	@ 0x30
 801e020:	d016      	beq.n	801e050 <_strtod_l+0x244>
 801e022:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801e024:	185b      	adds	r3, r3, r1
 801e026:	930e      	str	r3, [sp, #56]	@ 0x38
 801e028:	9b06      	ldr	r3, [sp, #24]
 801e02a:	210a      	movs	r1, #10
 801e02c:	469c      	mov	ip, r3
 801e02e:	4484      	add	ip, r0
 801e030:	459c      	cmp	ip, r3
 801e032:	d115      	bne.n	801e060 <_strtod_l+0x254>
 801e034:	9906      	ldr	r1, [sp, #24]
 801e036:	9b06      	ldr	r3, [sp, #24]
 801e038:	3101      	adds	r1, #1
 801e03a:	1809      	adds	r1, r1, r0
 801e03c:	181b      	adds	r3, r3, r0
 801e03e:	9106      	str	r1, [sp, #24]
 801e040:	2b08      	cmp	r3, #8
 801e042:	dc19      	bgt.n	801e078 <_strtod_l+0x26c>
 801e044:	230a      	movs	r3, #10
 801e046:	990d      	ldr	r1, [sp, #52]	@ 0x34
 801e048:	434b      	muls	r3, r1
 801e04a:	2100      	movs	r1, #0
 801e04c:	18d3      	adds	r3, r2, r3
 801e04e:	930d      	str	r3, [sp, #52]	@ 0x34
 801e050:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801e052:	0008      	movs	r0, r1
 801e054:	1c5a      	adds	r2, r3, #1
 801e056:	921d      	str	r2, [sp, #116]	@ 0x74
 801e058:	785b      	ldrb	r3, [r3, #1]
 801e05a:	e7c6      	b.n	801dfea <_strtod_l+0x1de>
 801e05c:	9808      	ldr	r0, [sp, #32]
 801e05e:	e7d0      	b.n	801e002 <_strtod_l+0x1f6>
 801e060:	1c5c      	adds	r4, r3, #1
 801e062:	2b08      	cmp	r3, #8
 801e064:	dc04      	bgt.n	801e070 <_strtod_l+0x264>
 801e066:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801e068:	434b      	muls	r3, r1
 801e06a:	930d      	str	r3, [sp, #52]	@ 0x34
 801e06c:	0023      	movs	r3, r4
 801e06e:	e7df      	b.n	801e030 <_strtod_l+0x224>
 801e070:	2c10      	cmp	r4, #16
 801e072:	dcfb      	bgt.n	801e06c <_strtod_l+0x260>
 801e074:	434d      	muls	r5, r1
 801e076:	e7f9      	b.n	801e06c <_strtod_l+0x260>
 801e078:	2100      	movs	r1, #0
 801e07a:	2b0f      	cmp	r3, #15
 801e07c:	dce8      	bgt.n	801e050 <_strtod_l+0x244>
 801e07e:	230a      	movs	r3, #10
 801e080:	435d      	muls	r5, r3
 801e082:	1955      	adds	r5, r2, r5
 801e084:	e7e4      	b.n	801e050 <_strtod_l+0x244>
 801e086:	2200      	movs	r2, #0
 801e088:	920e      	str	r2, [sp, #56]	@ 0x38
 801e08a:	9206      	str	r2, [sp, #24]
 801e08c:	3201      	adds	r2, #1
 801e08e:	e7b1      	b.n	801dff4 <_strtod_l+0x1e8>
 801e090:	2400      	movs	r4, #0
 801e092:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801e094:	3302      	adds	r3, #2
 801e096:	931d      	str	r3, [sp, #116]	@ 0x74
 801e098:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801e09a:	789b      	ldrb	r3, [r3, #2]
 801e09c:	001a      	movs	r2, r3
 801e09e:	3a30      	subs	r2, #48	@ 0x30
 801e0a0:	2a09      	cmp	r2, #9
 801e0a2:	d913      	bls.n	801e0cc <_strtod_l+0x2c0>
 801e0a4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801e0a6:	921d      	str	r2, [sp, #116]	@ 0x74
 801e0a8:	2200      	movs	r2, #0
 801e0aa:	e032      	b.n	801e112 <_strtod_l+0x306>
 801e0ac:	08024fd0 	.word	0x08024fd0
 801e0b0:	7ff00000 	.word	0x7ff00000
 801e0b4:	ffefffff 	.word	0xffefffff
 801e0b8:	00000433 	.word	0x00000433
 801e0bc:	7fffffff 	.word	0x7fffffff
 801e0c0:	08024fb8 	.word	0x08024fb8
 801e0c4:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801e0c6:	1c5a      	adds	r2, r3, #1
 801e0c8:	921d      	str	r2, [sp, #116]	@ 0x74
 801e0ca:	785b      	ldrb	r3, [r3, #1]
 801e0cc:	2b30      	cmp	r3, #48	@ 0x30
 801e0ce:	d0f9      	beq.n	801e0c4 <_strtod_l+0x2b8>
 801e0d0:	2200      	movs	r2, #0
 801e0d2:	9207      	str	r2, [sp, #28]
 801e0d4:	001a      	movs	r2, r3
 801e0d6:	3a31      	subs	r2, #49	@ 0x31
 801e0d8:	2a08      	cmp	r2, #8
 801e0da:	d81b      	bhi.n	801e114 <_strtod_l+0x308>
 801e0dc:	3b30      	subs	r3, #48	@ 0x30
 801e0de:	9310      	str	r3, [sp, #64]	@ 0x40
 801e0e0:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801e0e2:	9307      	str	r3, [sp, #28]
 801e0e4:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801e0e6:	1c59      	adds	r1, r3, #1
 801e0e8:	911d      	str	r1, [sp, #116]	@ 0x74
 801e0ea:	785b      	ldrb	r3, [r3, #1]
 801e0ec:	001a      	movs	r2, r3
 801e0ee:	3a30      	subs	r2, #48	@ 0x30
 801e0f0:	2a09      	cmp	r2, #9
 801e0f2:	d93a      	bls.n	801e16a <_strtod_l+0x35e>
 801e0f4:	9a07      	ldr	r2, [sp, #28]
 801e0f6:	1a8a      	subs	r2, r1, r2
 801e0f8:	49b4      	ldr	r1, [pc, #720]	@ (801e3cc <_strtod_l+0x5c0>)
 801e0fa:	9107      	str	r1, [sp, #28]
 801e0fc:	2a08      	cmp	r2, #8
 801e0fe:	dc04      	bgt.n	801e10a <_strtod_l+0x2fe>
 801e100:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801e102:	9207      	str	r2, [sp, #28]
 801e104:	428a      	cmp	r2, r1
 801e106:	dd00      	ble.n	801e10a <_strtod_l+0x2fe>
 801e108:	9107      	str	r1, [sp, #28]
 801e10a:	2c00      	cmp	r4, #0
 801e10c:	d002      	beq.n	801e114 <_strtod_l+0x308>
 801e10e:	9a07      	ldr	r2, [sp, #28]
 801e110:	4252      	negs	r2, r2
 801e112:	9207      	str	r2, [sp, #28]
 801e114:	9a06      	ldr	r2, [sp, #24]
 801e116:	2a00      	cmp	r2, #0
 801e118:	d14d      	bne.n	801e1b6 <_strtod_l+0x3aa>
 801e11a:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801e11c:	4310      	orrs	r0, r2
 801e11e:	d000      	beq.n	801e122 <_strtod_l+0x316>
 801e120:	e6af      	b.n	801de82 <_strtod_l+0x76>
 801e122:	4662      	mov	r2, ip
 801e124:	2a00      	cmp	r2, #0
 801e126:	d000      	beq.n	801e12a <_strtod_l+0x31e>
 801e128:	e6c7      	b.n	801deba <_strtod_l+0xae>
 801e12a:	2b69      	cmp	r3, #105	@ 0x69
 801e12c:	d027      	beq.n	801e17e <_strtod_l+0x372>
 801e12e:	dc23      	bgt.n	801e178 <_strtod_l+0x36c>
 801e130:	2b49      	cmp	r3, #73	@ 0x49
 801e132:	d024      	beq.n	801e17e <_strtod_l+0x372>
 801e134:	2b4e      	cmp	r3, #78	@ 0x4e
 801e136:	d000      	beq.n	801e13a <_strtod_l+0x32e>
 801e138:	e6bf      	b.n	801deba <_strtod_l+0xae>
 801e13a:	49a5      	ldr	r1, [pc, #660]	@ (801e3d0 <_strtod_l+0x5c4>)
 801e13c:	a81d      	add	r0, sp, #116	@ 0x74
 801e13e:	f002 fe2b 	bl	8020d98 <__match>
 801e142:	2800      	cmp	r0, #0
 801e144:	d100      	bne.n	801e148 <_strtod_l+0x33c>
 801e146:	e6b8      	b.n	801deba <_strtod_l+0xae>
 801e148:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801e14a:	781b      	ldrb	r3, [r3, #0]
 801e14c:	2b28      	cmp	r3, #40	@ 0x28
 801e14e:	d12c      	bne.n	801e1aa <_strtod_l+0x39e>
 801e150:	49a0      	ldr	r1, [pc, #640]	@ (801e3d4 <_strtod_l+0x5c8>)
 801e152:	aa20      	add	r2, sp, #128	@ 0x80
 801e154:	a81d      	add	r0, sp, #116	@ 0x74
 801e156:	f002 fe33 	bl	8020dc0 <__hexnan>
 801e15a:	2805      	cmp	r0, #5
 801e15c:	d125      	bne.n	801e1aa <_strtod_l+0x39e>
 801e15e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 801e160:	4a9d      	ldr	r2, [pc, #628]	@ (801e3d8 <_strtod_l+0x5cc>)
 801e162:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 801e164:	431a      	orrs	r2, r3
 801e166:	0017      	movs	r7, r2
 801e168:	e68b      	b.n	801de82 <_strtod_l+0x76>
 801e16a:	220a      	movs	r2, #10
 801e16c:	9910      	ldr	r1, [sp, #64]	@ 0x40
 801e16e:	434a      	muls	r2, r1
 801e170:	18d2      	adds	r2, r2, r3
 801e172:	3a30      	subs	r2, #48	@ 0x30
 801e174:	9210      	str	r2, [sp, #64]	@ 0x40
 801e176:	e7b5      	b.n	801e0e4 <_strtod_l+0x2d8>
 801e178:	2b6e      	cmp	r3, #110	@ 0x6e
 801e17a:	d0de      	beq.n	801e13a <_strtod_l+0x32e>
 801e17c:	e69d      	b.n	801deba <_strtod_l+0xae>
 801e17e:	4997      	ldr	r1, [pc, #604]	@ (801e3dc <_strtod_l+0x5d0>)
 801e180:	a81d      	add	r0, sp, #116	@ 0x74
 801e182:	f002 fe09 	bl	8020d98 <__match>
 801e186:	2800      	cmp	r0, #0
 801e188:	d100      	bne.n	801e18c <_strtod_l+0x380>
 801e18a:	e696      	b.n	801deba <_strtod_l+0xae>
 801e18c:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801e18e:	4994      	ldr	r1, [pc, #592]	@ (801e3e0 <_strtod_l+0x5d4>)
 801e190:	3b01      	subs	r3, #1
 801e192:	a81d      	add	r0, sp, #116	@ 0x74
 801e194:	931d      	str	r3, [sp, #116]	@ 0x74
 801e196:	f002 fdff 	bl	8020d98 <__match>
 801e19a:	2800      	cmp	r0, #0
 801e19c:	d102      	bne.n	801e1a4 <_strtod_l+0x398>
 801e19e:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801e1a0:	3301      	adds	r3, #1
 801e1a2:	931d      	str	r3, [sp, #116]	@ 0x74
 801e1a4:	2600      	movs	r6, #0
 801e1a6:	4f8c      	ldr	r7, [pc, #560]	@ (801e3d8 <_strtod_l+0x5cc>)
 801e1a8:	e66b      	b.n	801de82 <_strtod_l+0x76>
 801e1aa:	488e      	ldr	r0, [pc, #568]	@ (801e3e4 <_strtod_l+0x5d8>)
 801e1ac:	f001 fc84 	bl	801fab8 <nan>
 801e1b0:	0006      	movs	r6, r0
 801e1b2:	000f      	movs	r7, r1
 801e1b4:	e665      	b.n	801de82 <_strtod_l+0x76>
 801e1b6:	9b07      	ldr	r3, [sp, #28]
 801e1b8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801e1ba:	1a9b      	subs	r3, r3, r2
 801e1bc:	930c      	str	r3, [sp, #48]	@ 0x30
 801e1be:	9b08      	ldr	r3, [sp, #32]
 801e1c0:	2b00      	cmp	r3, #0
 801e1c2:	d101      	bne.n	801e1c8 <_strtod_l+0x3bc>
 801e1c4:	9b06      	ldr	r3, [sp, #24]
 801e1c6:	9308      	str	r3, [sp, #32]
 801e1c8:	9c06      	ldr	r4, [sp, #24]
 801e1ca:	2c10      	cmp	r4, #16
 801e1cc:	dd00      	ble.n	801e1d0 <_strtod_l+0x3c4>
 801e1ce:	2410      	movs	r4, #16
 801e1d0:	980d      	ldr	r0, [sp, #52]	@ 0x34
 801e1d2:	f7e5 f923 	bl	800341c <__aeabi_ui2d>
 801e1d6:	9b06      	ldr	r3, [sp, #24]
 801e1d8:	0006      	movs	r6, r0
 801e1da:	000f      	movs	r7, r1
 801e1dc:	2b09      	cmp	r3, #9
 801e1de:	dc13      	bgt.n	801e208 <_strtod_l+0x3fc>
 801e1e0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801e1e2:	2b00      	cmp	r3, #0
 801e1e4:	d100      	bne.n	801e1e8 <_strtod_l+0x3dc>
 801e1e6:	e64c      	b.n	801de82 <_strtod_l+0x76>
 801e1e8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801e1ea:	2b00      	cmp	r3, #0
 801e1ec:	dc00      	bgt.n	801e1f0 <_strtod_l+0x3e4>
 801e1ee:	e07e      	b.n	801e2ee <_strtod_l+0x4e2>
 801e1f0:	2b16      	cmp	r3, #22
 801e1f2:	dc63      	bgt.n	801e2bc <_strtod_l+0x4b0>
 801e1f4:	497c      	ldr	r1, [pc, #496]	@ (801e3e8 <_strtod_l+0x5dc>)
 801e1f6:	00db      	lsls	r3, r3, #3
 801e1f8:	18c9      	adds	r1, r1, r3
 801e1fa:	0032      	movs	r2, r6
 801e1fc:	6808      	ldr	r0, [r1, #0]
 801e1fe:	6849      	ldr	r1, [r1, #4]
 801e200:	003b      	movs	r3, r7
 801e202:	f7e4 fa1b 	bl	800263c <__aeabi_dmul>
 801e206:	e7d3      	b.n	801e1b0 <_strtod_l+0x3a4>
 801e208:	0022      	movs	r2, r4
 801e20a:	4b77      	ldr	r3, [pc, #476]	@ (801e3e8 <_strtod_l+0x5dc>)
 801e20c:	3a09      	subs	r2, #9
 801e20e:	00d2      	lsls	r2, r2, #3
 801e210:	189b      	adds	r3, r3, r2
 801e212:	681a      	ldr	r2, [r3, #0]
 801e214:	685b      	ldr	r3, [r3, #4]
 801e216:	f7e4 fa11 	bl	800263c <__aeabi_dmul>
 801e21a:	0006      	movs	r6, r0
 801e21c:	0028      	movs	r0, r5
 801e21e:	000f      	movs	r7, r1
 801e220:	f7e5 f8fc 	bl	800341c <__aeabi_ui2d>
 801e224:	000b      	movs	r3, r1
 801e226:	0002      	movs	r2, r0
 801e228:	0039      	movs	r1, r7
 801e22a:	0030      	movs	r0, r6
 801e22c:	f7e3 fa5e 	bl	80016ec <__aeabi_dadd>
 801e230:	9b06      	ldr	r3, [sp, #24]
 801e232:	0006      	movs	r6, r0
 801e234:	000f      	movs	r7, r1
 801e236:	2b0f      	cmp	r3, #15
 801e238:	ddd2      	ble.n	801e1e0 <_strtod_l+0x3d4>
 801e23a:	9b06      	ldr	r3, [sp, #24]
 801e23c:	1b1c      	subs	r4, r3, r4
 801e23e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801e240:	18e4      	adds	r4, r4, r3
 801e242:	2c00      	cmp	r4, #0
 801e244:	dc00      	bgt.n	801e248 <_strtod_l+0x43c>
 801e246:	e09b      	b.n	801e380 <_strtod_l+0x574>
 801e248:	220f      	movs	r2, #15
 801e24a:	0023      	movs	r3, r4
 801e24c:	4013      	ands	r3, r2
 801e24e:	4214      	tst	r4, r2
 801e250:	d00a      	beq.n	801e268 <_strtod_l+0x45c>
 801e252:	4965      	ldr	r1, [pc, #404]	@ (801e3e8 <_strtod_l+0x5dc>)
 801e254:	00db      	lsls	r3, r3, #3
 801e256:	18c9      	adds	r1, r1, r3
 801e258:	0032      	movs	r2, r6
 801e25a:	6808      	ldr	r0, [r1, #0]
 801e25c:	6849      	ldr	r1, [r1, #4]
 801e25e:	003b      	movs	r3, r7
 801e260:	f7e4 f9ec 	bl	800263c <__aeabi_dmul>
 801e264:	0006      	movs	r6, r0
 801e266:	000f      	movs	r7, r1
 801e268:	230f      	movs	r3, #15
 801e26a:	439c      	bics	r4, r3
 801e26c:	d073      	beq.n	801e356 <_strtod_l+0x54a>
 801e26e:	3326      	adds	r3, #38	@ 0x26
 801e270:	33ff      	adds	r3, #255	@ 0xff
 801e272:	429c      	cmp	r4, r3
 801e274:	dd4b      	ble.n	801e30e <_strtod_l+0x502>
 801e276:	2300      	movs	r3, #0
 801e278:	9306      	str	r3, [sp, #24]
 801e27a:	9307      	str	r3, [sp, #28]
 801e27c:	930d      	str	r3, [sp, #52]	@ 0x34
 801e27e:	9308      	str	r3, [sp, #32]
 801e280:	2322      	movs	r3, #34	@ 0x22
 801e282:	2600      	movs	r6, #0
 801e284:	9a05      	ldr	r2, [sp, #20]
 801e286:	4f54      	ldr	r7, [pc, #336]	@ (801e3d8 <_strtod_l+0x5cc>)
 801e288:	6013      	str	r3, [r2, #0]
 801e28a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801e28c:	42b3      	cmp	r3, r6
 801e28e:	d100      	bne.n	801e292 <_strtod_l+0x486>
 801e290:	e5f7      	b.n	801de82 <_strtod_l+0x76>
 801e292:	991e      	ldr	r1, [sp, #120]	@ 0x78
 801e294:	9805      	ldr	r0, [sp, #20]
 801e296:	f002 ff4d 	bl	8021134 <_Bfree>
 801e29a:	9908      	ldr	r1, [sp, #32]
 801e29c:	9805      	ldr	r0, [sp, #20]
 801e29e:	f002 ff49 	bl	8021134 <_Bfree>
 801e2a2:	9907      	ldr	r1, [sp, #28]
 801e2a4:	9805      	ldr	r0, [sp, #20]
 801e2a6:	f002 ff45 	bl	8021134 <_Bfree>
 801e2aa:	990d      	ldr	r1, [sp, #52]	@ 0x34
 801e2ac:	9805      	ldr	r0, [sp, #20]
 801e2ae:	f002 ff41 	bl	8021134 <_Bfree>
 801e2b2:	9906      	ldr	r1, [sp, #24]
 801e2b4:	9805      	ldr	r0, [sp, #20]
 801e2b6:	f002 ff3d 	bl	8021134 <_Bfree>
 801e2ba:	e5e2      	b.n	801de82 <_strtod_l+0x76>
 801e2bc:	2325      	movs	r3, #37	@ 0x25
 801e2be:	9a06      	ldr	r2, [sp, #24]
 801e2c0:	1a9b      	subs	r3, r3, r2
 801e2c2:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801e2c4:	4293      	cmp	r3, r2
 801e2c6:	dbb8      	blt.n	801e23a <_strtod_l+0x42e>
 801e2c8:	240f      	movs	r4, #15
 801e2ca:	9b06      	ldr	r3, [sp, #24]
 801e2cc:	4d46      	ldr	r5, [pc, #280]	@ (801e3e8 <_strtod_l+0x5dc>)
 801e2ce:	1ae4      	subs	r4, r4, r3
 801e2d0:	00e1      	lsls	r1, r4, #3
 801e2d2:	1869      	adds	r1, r5, r1
 801e2d4:	0032      	movs	r2, r6
 801e2d6:	6808      	ldr	r0, [r1, #0]
 801e2d8:	6849      	ldr	r1, [r1, #4]
 801e2da:	003b      	movs	r3, r7
 801e2dc:	f7e4 f9ae 	bl	800263c <__aeabi_dmul>
 801e2e0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801e2e2:	1b1c      	subs	r4, r3, r4
 801e2e4:	00e4      	lsls	r4, r4, #3
 801e2e6:	192d      	adds	r5, r5, r4
 801e2e8:	682a      	ldr	r2, [r5, #0]
 801e2ea:	686b      	ldr	r3, [r5, #4]
 801e2ec:	e789      	b.n	801e202 <_strtod_l+0x3f6>
 801e2ee:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801e2f0:	3316      	adds	r3, #22
 801e2f2:	dba2      	blt.n	801e23a <_strtod_l+0x42e>
 801e2f4:	9907      	ldr	r1, [sp, #28]
 801e2f6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801e2f8:	4b3b      	ldr	r3, [pc, #236]	@ (801e3e8 <_strtod_l+0x5dc>)
 801e2fa:	1a52      	subs	r2, r2, r1
 801e2fc:	00d2      	lsls	r2, r2, #3
 801e2fe:	189b      	adds	r3, r3, r2
 801e300:	0030      	movs	r0, r6
 801e302:	681a      	ldr	r2, [r3, #0]
 801e304:	685b      	ldr	r3, [r3, #4]
 801e306:	0039      	movs	r1, r7
 801e308:	f7e3 fd54 	bl	8001db4 <__aeabi_ddiv>
 801e30c:	e750      	b.n	801e1b0 <_strtod_l+0x3a4>
 801e30e:	2300      	movs	r3, #0
 801e310:	0030      	movs	r0, r6
 801e312:	0039      	movs	r1, r7
 801e314:	4d35      	ldr	r5, [pc, #212]	@ (801e3ec <_strtod_l+0x5e0>)
 801e316:	1124      	asrs	r4, r4, #4
 801e318:	9309      	str	r3, [sp, #36]	@ 0x24
 801e31a:	2c01      	cmp	r4, #1
 801e31c:	dc1e      	bgt.n	801e35c <_strtod_l+0x550>
 801e31e:	2b00      	cmp	r3, #0
 801e320:	d001      	beq.n	801e326 <_strtod_l+0x51a>
 801e322:	0006      	movs	r6, r0
 801e324:	000f      	movs	r7, r1
 801e326:	4b32      	ldr	r3, [pc, #200]	@ (801e3f0 <_strtod_l+0x5e4>)
 801e328:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801e32a:	18ff      	adds	r7, r7, r3
 801e32c:	4b2f      	ldr	r3, [pc, #188]	@ (801e3ec <_strtod_l+0x5e0>)
 801e32e:	00d5      	lsls	r5, r2, #3
 801e330:	195d      	adds	r5, r3, r5
 801e332:	0032      	movs	r2, r6
 801e334:	6828      	ldr	r0, [r5, #0]
 801e336:	6869      	ldr	r1, [r5, #4]
 801e338:	003b      	movs	r3, r7
 801e33a:	f7e4 f97f 	bl	800263c <__aeabi_dmul>
 801e33e:	4b26      	ldr	r3, [pc, #152]	@ (801e3d8 <_strtod_l+0x5cc>)
 801e340:	4a2c      	ldr	r2, [pc, #176]	@ (801e3f4 <_strtod_l+0x5e8>)
 801e342:	0006      	movs	r6, r0
 801e344:	400b      	ands	r3, r1
 801e346:	4293      	cmp	r3, r2
 801e348:	d895      	bhi.n	801e276 <_strtod_l+0x46a>
 801e34a:	4a2b      	ldr	r2, [pc, #172]	@ (801e3f8 <_strtod_l+0x5ec>)
 801e34c:	4293      	cmp	r3, r2
 801e34e:	d913      	bls.n	801e378 <_strtod_l+0x56c>
 801e350:	2601      	movs	r6, #1
 801e352:	4f2a      	ldr	r7, [pc, #168]	@ (801e3fc <_strtod_l+0x5f0>)
 801e354:	4276      	negs	r6, r6
 801e356:	2300      	movs	r3, #0
 801e358:	9309      	str	r3, [sp, #36]	@ 0x24
 801e35a:	e086      	b.n	801e46a <_strtod_l+0x65e>
 801e35c:	2201      	movs	r2, #1
 801e35e:	4214      	tst	r4, r2
 801e360:	d004      	beq.n	801e36c <_strtod_l+0x560>
 801e362:	682a      	ldr	r2, [r5, #0]
 801e364:	686b      	ldr	r3, [r5, #4]
 801e366:	f7e4 f969 	bl	800263c <__aeabi_dmul>
 801e36a:	2301      	movs	r3, #1
 801e36c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801e36e:	1064      	asrs	r4, r4, #1
 801e370:	3201      	adds	r2, #1
 801e372:	9209      	str	r2, [sp, #36]	@ 0x24
 801e374:	3508      	adds	r5, #8
 801e376:	e7d0      	b.n	801e31a <_strtod_l+0x50e>
 801e378:	23d4      	movs	r3, #212	@ 0xd4
 801e37a:	049b      	lsls	r3, r3, #18
 801e37c:	18cf      	adds	r7, r1, r3
 801e37e:	e7ea      	b.n	801e356 <_strtod_l+0x54a>
 801e380:	2c00      	cmp	r4, #0
 801e382:	d0e8      	beq.n	801e356 <_strtod_l+0x54a>
 801e384:	4264      	negs	r4, r4
 801e386:	230f      	movs	r3, #15
 801e388:	0022      	movs	r2, r4
 801e38a:	401a      	ands	r2, r3
 801e38c:	421c      	tst	r4, r3
 801e38e:	d00a      	beq.n	801e3a6 <_strtod_l+0x59a>
 801e390:	4b15      	ldr	r3, [pc, #84]	@ (801e3e8 <_strtod_l+0x5dc>)
 801e392:	00d2      	lsls	r2, r2, #3
 801e394:	189b      	adds	r3, r3, r2
 801e396:	0030      	movs	r0, r6
 801e398:	681a      	ldr	r2, [r3, #0]
 801e39a:	685b      	ldr	r3, [r3, #4]
 801e39c:	0039      	movs	r1, r7
 801e39e:	f7e3 fd09 	bl	8001db4 <__aeabi_ddiv>
 801e3a2:	0006      	movs	r6, r0
 801e3a4:	000f      	movs	r7, r1
 801e3a6:	1124      	asrs	r4, r4, #4
 801e3a8:	d0d5      	beq.n	801e356 <_strtod_l+0x54a>
 801e3aa:	2c1f      	cmp	r4, #31
 801e3ac:	dd28      	ble.n	801e400 <_strtod_l+0x5f4>
 801e3ae:	2300      	movs	r3, #0
 801e3b0:	9306      	str	r3, [sp, #24]
 801e3b2:	9307      	str	r3, [sp, #28]
 801e3b4:	930d      	str	r3, [sp, #52]	@ 0x34
 801e3b6:	9308      	str	r3, [sp, #32]
 801e3b8:	2322      	movs	r3, #34	@ 0x22
 801e3ba:	9a05      	ldr	r2, [sp, #20]
 801e3bc:	2600      	movs	r6, #0
 801e3be:	6013      	str	r3, [r2, #0]
 801e3c0:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801e3c2:	2700      	movs	r7, #0
 801e3c4:	2b00      	cmp	r3, #0
 801e3c6:	d000      	beq.n	801e3ca <_strtod_l+0x5be>
 801e3c8:	e763      	b.n	801e292 <_strtod_l+0x486>
 801e3ca:	e55a      	b.n	801de82 <_strtod_l+0x76>
 801e3cc:	00004e1f 	.word	0x00004e1f
 801e3d0:	0802511e 	.word	0x0802511e
 801e3d4:	08024fbc 	.word	0x08024fbc
 801e3d8:	7ff00000 	.word	0x7ff00000
 801e3dc:	08025116 	.word	0x08025116
 801e3e0:	08025150 	.word	0x08025150
 801e3e4:	080253dc 	.word	0x080253dc
 801e3e8:	080252c8 	.word	0x080252c8
 801e3ec:	080252a0 	.word	0x080252a0
 801e3f0:	fcb00000 	.word	0xfcb00000
 801e3f4:	7ca00000 	.word	0x7ca00000
 801e3f8:	7c900000 	.word	0x7c900000
 801e3fc:	7fefffff 	.word	0x7fefffff
 801e400:	2310      	movs	r3, #16
 801e402:	0022      	movs	r2, r4
 801e404:	401a      	ands	r2, r3
 801e406:	9209      	str	r2, [sp, #36]	@ 0x24
 801e408:	421c      	tst	r4, r3
 801e40a:	d001      	beq.n	801e410 <_strtod_l+0x604>
 801e40c:	335a      	adds	r3, #90	@ 0x5a
 801e40e:	9309      	str	r3, [sp, #36]	@ 0x24
 801e410:	0030      	movs	r0, r6
 801e412:	0039      	movs	r1, r7
 801e414:	2300      	movs	r3, #0
 801e416:	4dbf      	ldr	r5, [pc, #764]	@ (801e714 <_strtod_l+0x908>)
 801e418:	2201      	movs	r2, #1
 801e41a:	4214      	tst	r4, r2
 801e41c:	d004      	beq.n	801e428 <_strtod_l+0x61c>
 801e41e:	682a      	ldr	r2, [r5, #0]
 801e420:	686b      	ldr	r3, [r5, #4]
 801e422:	f7e4 f90b 	bl	800263c <__aeabi_dmul>
 801e426:	2301      	movs	r3, #1
 801e428:	1064      	asrs	r4, r4, #1
 801e42a:	3508      	adds	r5, #8
 801e42c:	2c00      	cmp	r4, #0
 801e42e:	d1f3      	bne.n	801e418 <_strtod_l+0x60c>
 801e430:	2b00      	cmp	r3, #0
 801e432:	d001      	beq.n	801e438 <_strtod_l+0x62c>
 801e434:	0006      	movs	r6, r0
 801e436:	000f      	movs	r7, r1
 801e438:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801e43a:	2b00      	cmp	r3, #0
 801e43c:	d00d      	beq.n	801e45a <_strtod_l+0x64e>
 801e43e:	236b      	movs	r3, #107	@ 0x6b
 801e440:	007a      	lsls	r2, r7, #1
 801e442:	0d52      	lsrs	r2, r2, #21
 801e444:	0039      	movs	r1, r7
 801e446:	1a9b      	subs	r3, r3, r2
 801e448:	2b00      	cmp	r3, #0
 801e44a:	dd06      	ble.n	801e45a <_strtod_l+0x64e>
 801e44c:	2b1f      	cmp	r3, #31
 801e44e:	dd5a      	ble.n	801e506 <_strtod_l+0x6fa>
 801e450:	2600      	movs	r6, #0
 801e452:	2b34      	cmp	r3, #52	@ 0x34
 801e454:	dd50      	ble.n	801e4f8 <_strtod_l+0x6ec>
 801e456:	27dc      	movs	r7, #220	@ 0xdc
 801e458:	04bf      	lsls	r7, r7, #18
 801e45a:	2200      	movs	r2, #0
 801e45c:	2300      	movs	r3, #0
 801e45e:	0030      	movs	r0, r6
 801e460:	0039      	movs	r1, r7
 801e462:	f7e2 f825 	bl	80004b0 <__aeabi_dcmpeq>
 801e466:	2800      	cmp	r0, #0
 801e468:	d1a1      	bne.n	801e3ae <_strtod_l+0x5a2>
 801e46a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801e46c:	9a08      	ldr	r2, [sp, #32]
 801e46e:	9300      	str	r3, [sp, #0]
 801e470:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 801e472:	9b06      	ldr	r3, [sp, #24]
 801e474:	9805      	ldr	r0, [sp, #20]
 801e476:	f002 fec5 	bl	8021204 <__s2b>
 801e47a:	900d      	str	r0, [sp, #52]	@ 0x34
 801e47c:	2800      	cmp	r0, #0
 801e47e:	d100      	bne.n	801e482 <_strtod_l+0x676>
 801e480:	e6f9      	b.n	801e276 <_strtod_l+0x46a>
 801e482:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801e484:	9907      	ldr	r1, [sp, #28]
 801e486:	17da      	asrs	r2, r3, #31
 801e488:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801e48a:	1a5b      	subs	r3, r3, r1
 801e48c:	401a      	ands	r2, r3
 801e48e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801e490:	9217      	str	r2, [sp, #92]	@ 0x5c
 801e492:	43db      	mvns	r3, r3
 801e494:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801e496:	17db      	asrs	r3, r3, #31
 801e498:	401a      	ands	r2, r3
 801e49a:	2300      	movs	r3, #0
 801e49c:	921a      	str	r2, [sp, #104]	@ 0x68
 801e49e:	9306      	str	r3, [sp, #24]
 801e4a0:	9307      	str	r3, [sp, #28]
 801e4a2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801e4a4:	9805      	ldr	r0, [sp, #20]
 801e4a6:	6859      	ldr	r1, [r3, #4]
 801e4a8:	f002 fe00 	bl	80210ac <_Balloc>
 801e4ac:	9008      	str	r0, [sp, #32]
 801e4ae:	2800      	cmp	r0, #0
 801e4b0:	d100      	bne.n	801e4b4 <_strtod_l+0x6a8>
 801e4b2:	e6e5      	b.n	801e280 <_strtod_l+0x474>
 801e4b4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801e4b6:	300c      	adds	r0, #12
 801e4b8:	0019      	movs	r1, r3
 801e4ba:	691a      	ldr	r2, [r3, #16]
 801e4bc:	310c      	adds	r1, #12
 801e4be:	3202      	adds	r2, #2
 801e4c0:	0092      	lsls	r2, r2, #2
 801e4c2:	f001 faef 	bl	801faa4 <memcpy>
 801e4c6:	ab20      	add	r3, sp, #128	@ 0x80
 801e4c8:	9301      	str	r3, [sp, #4]
 801e4ca:	ab1f      	add	r3, sp, #124	@ 0x7c
 801e4cc:	9300      	str	r3, [sp, #0]
 801e4ce:	0032      	movs	r2, r6
 801e4d0:	003b      	movs	r3, r7
 801e4d2:	9805      	ldr	r0, [sp, #20]
 801e4d4:	9610      	str	r6, [sp, #64]	@ 0x40
 801e4d6:	9711      	str	r7, [sp, #68]	@ 0x44
 801e4d8:	f003 f9e4 	bl	80218a4 <__d2b>
 801e4dc:	901e      	str	r0, [sp, #120]	@ 0x78
 801e4de:	2800      	cmp	r0, #0
 801e4e0:	d100      	bne.n	801e4e4 <_strtod_l+0x6d8>
 801e4e2:	e6cd      	b.n	801e280 <_strtod_l+0x474>
 801e4e4:	2101      	movs	r1, #1
 801e4e6:	9805      	ldr	r0, [sp, #20]
 801e4e8:	f002 ff28 	bl	802133c <__i2b>
 801e4ec:	9007      	str	r0, [sp, #28]
 801e4ee:	2800      	cmp	r0, #0
 801e4f0:	d10e      	bne.n	801e510 <_strtod_l+0x704>
 801e4f2:	2300      	movs	r3, #0
 801e4f4:	9307      	str	r3, [sp, #28]
 801e4f6:	e6c3      	b.n	801e280 <_strtod_l+0x474>
 801e4f8:	234b      	movs	r3, #75	@ 0x4b
 801e4fa:	1a9a      	subs	r2, r3, r2
 801e4fc:	3b4c      	subs	r3, #76	@ 0x4c
 801e4fe:	4093      	lsls	r3, r2
 801e500:	4019      	ands	r1, r3
 801e502:	000f      	movs	r7, r1
 801e504:	e7a9      	b.n	801e45a <_strtod_l+0x64e>
 801e506:	2201      	movs	r2, #1
 801e508:	4252      	negs	r2, r2
 801e50a:	409a      	lsls	r2, r3
 801e50c:	4016      	ands	r6, r2
 801e50e:	e7a4      	b.n	801e45a <_strtod_l+0x64e>
 801e510:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 801e512:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 801e514:	9d17      	ldr	r5, [sp, #92]	@ 0x5c
 801e516:	1ad4      	subs	r4, r2, r3
 801e518:	2b00      	cmp	r3, #0
 801e51a:	db01      	blt.n	801e520 <_strtod_l+0x714>
 801e51c:	9c1a      	ldr	r4, [sp, #104]	@ 0x68
 801e51e:	195d      	adds	r5, r3, r5
 801e520:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801e522:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 801e524:	1a5b      	subs	r3, r3, r1
 801e526:	2136      	movs	r1, #54	@ 0x36
 801e528:	189b      	adds	r3, r3, r2
 801e52a:	1a8a      	subs	r2, r1, r2
 801e52c:	497a      	ldr	r1, [pc, #488]	@ (801e718 <_strtod_l+0x90c>)
 801e52e:	2001      	movs	r0, #1
 801e530:	468c      	mov	ip, r1
 801e532:	2100      	movs	r1, #0
 801e534:	3b01      	subs	r3, #1
 801e536:	9116      	str	r1, [sp, #88]	@ 0x58
 801e538:	9014      	str	r0, [sp, #80]	@ 0x50
 801e53a:	4563      	cmp	r3, ip
 801e53c:	da06      	bge.n	801e54c <_strtod_l+0x740>
 801e53e:	4661      	mov	r1, ip
 801e540:	1ac9      	subs	r1, r1, r3
 801e542:	1a52      	subs	r2, r2, r1
 801e544:	291f      	cmp	r1, #31
 801e546:	dc3f      	bgt.n	801e5c8 <_strtod_l+0x7bc>
 801e548:	4088      	lsls	r0, r1
 801e54a:	9014      	str	r0, [sp, #80]	@ 0x50
 801e54c:	18ab      	adds	r3, r5, r2
 801e54e:	930e      	str	r3, [sp, #56]	@ 0x38
 801e550:	18a4      	adds	r4, r4, r2
 801e552:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801e554:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801e556:	191c      	adds	r4, r3, r4
 801e558:	002b      	movs	r3, r5
 801e55a:	4295      	cmp	r5, r2
 801e55c:	dd00      	ble.n	801e560 <_strtod_l+0x754>
 801e55e:	0013      	movs	r3, r2
 801e560:	42a3      	cmp	r3, r4
 801e562:	dd00      	ble.n	801e566 <_strtod_l+0x75a>
 801e564:	0023      	movs	r3, r4
 801e566:	2b00      	cmp	r3, #0
 801e568:	dd04      	ble.n	801e574 <_strtod_l+0x768>
 801e56a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801e56c:	1ae4      	subs	r4, r4, r3
 801e56e:	1ad2      	subs	r2, r2, r3
 801e570:	920e      	str	r2, [sp, #56]	@ 0x38
 801e572:	1aed      	subs	r5, r5, r3
 801e574:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801e576:	2b00      	cmp	r3, #0
 801e578:	dd16      	ble.n	801e5a8 <_strtod_l+0x79c>
 801e57a:	001a      	movs	r2, r3
 801e57c:	9907      	ldr	r1, [sp, #28]
 801e57e:	9805      	ldr	r0, [sp, #20]
 801e580:	f002 ffa6 	bl	80214d0 <__pow5mult>
 801e584:	9007      	str	r0, [sp, #28]
 801e586:	2800      	cmp	r0, #0
 801e588:	d0b3      	beq.n	801e4f2 <_strtod_l+0x6e6>
 801e58a:	0001      	movs	r1, r0
 801e58c:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 801e58e:	9805      	ldr	r0, [sp, #20]
 801e590:	f002 feec 	bl	802136c <__multiply>
 801e594:	9013      	str	r0, [sp, #76]	@ 0x4c
 801e596:	2800      	cmp	r0, #0
 801e598:	d100      	bne.n	801e59c <_strtod_l+0x790>
 801e59a:	e671      	b.n	801e280 <_strtod_l+0x474>
 801e59c:	991e      	ldr	r1, [sp, #120]	@ 0x78
 801e59e:	9805      	ldr	r0, [sp, #20]
 801e5a0:	f002 fdc8 	bl	8021134 <_Bfree>
 801e5a4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801e5a6:	931e      	str	r3, [sp, #120]	@ 0x78
 801e5a8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801e5aa:	2b00      	cmp	r3, #0
 801e5ac:	dc12      	bgt.n	801e5d4 <_strtod_l+0x7c8>
 801e5ae:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801e5b0:	2b00      	cmp	r3, #0
 801e5b2:	dd18      	ble.n	801e5e6 <_strtod_l+0x7da>
 801e5b4:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 801e5b6:	9908      	ldr	r1, [sp, #32]
 801e5b8:	9805      	ldr	r0, [sp, #20]
 801e5ba:	f002 ff89 	bl	80214d0 <__pow5mult>
 801e5be:	9008      	str	r0, [sp, #32]
 801e5c0:	2800      	cmp	r0, #0
 801e5c2:	d110      	bne.n	801e5e6 <_strtod_l+0x7da>
 801e5c4:	2300      	movs	r3, #0
 801e5c6:	e65a      	b.n	801e27e <_strtod_l+0x472>
 801e5c8:	4954      	ldr	r1, [pc, #336]	@ (801e71c <_strtod_l+0x910>)
 801e5ca:	1acb      	subs	r3, r1, r3
 801e5cc:	0001      	movs	r1, r0
 801e5ce:	4099      	lsls	r1, r3
 801e5d0:	9116      	str	r1, [sp, #88]	@ 0x58
 801e5d2:	e7ba      	b.n	801e54a <_strtod_l+0x73e>
 801e5d4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801e5d6:	991e      	ldr	r1, [sp, #120]	@ 0x78
 801e5d8:	9805      	ldr	r0, [sp, #20]
 801e5da:	f002 ffd5 	bl	8021588 <__lshift>
 801e5de:	901e      	str	r0, [sp, #120]	@ 0x78
 801e5e0:	2800      	cmp	r0, #0
 801e5e2:	d1e4      	bne.n	801e5ae <_strtod_l+0x7a2>
 801e5e4:	e64c      	b.n	801e280 <_strtod_l+0x474>
 801e5e6:	2c00      	cmp	r4, #0
 801e5e8:	dd07      	ble.n	801e5fa <_strtod_l+0x7ee>
 801e5ea:	0022      	movs	r2, r4
 801e5ec:	9908      	ldr	r1, [sp, #32]
 801e5ee:	9805      	ldr	r0, [sp, #20]
 801e5f0:	f002 ffca 	bl	8021588 <__lshift>
 801e5f4:	9008      	str	r0, [sp, #32]
 801e5f6:	2800      	cmp	r0, #0
 801e5f8:	d0e4      	beq.n	801e5c4 <_strtod_l+0x7b8>
 801e5fa:	2d00      	cmp	r5, #0
 801e5fc:	dd08      	ble.n	801e610 <_strtod_l+0x804>
 801e5fe:	002a      	movs	r2, r5
 801e600:	9907      	ldr	r1, [sp, #28]
 801e602:	9805      	ldr	r0, [sp, #20]
 801e604:	f002 ffc0 	bl	8021588 <__lshift>
 801e608:	9007      	str	r0, [sp, #28]
 801e60a:	2800      	cmp	r0, #0
 801e60c:	d100      	bne.n	801e610 <_strtod_l+0x804>
 801e60e:	e637      	b.n	801e280 <_strtod_l+0x474>
 801e610:	9a08      	ldr	r2, [sp, #32]
 801e612:	991e      	ldr	r1, [sp, #120]	@ 0x78
 801e614:	9805      	ldr	r0, [sp, #20]
 801e616:	f003 f83f 	bl	8021698 <__mdiff>
 801e61a:	9006      	str	r0, [sp, #24]
 801e61c:	2800      	cmp	r0, #0
 801e61e:	d100      	bne.n	801e622 <_strtod_l+0x816>
 801e620:	e62e      	b.n	801e280 <_strtod_l+0x474>
 801e622:	68c3      	ldr	r3, [r0, #12]
 801e624:	9907      	ldr	r1, [sp, #28]
 801e626:	9313      	str	r3, [sp, #76]	@ 0x4c
 801e628:	2300      	movs	r3, #0
 801e62a:	60c3      	str	r3, [r0, #12]
 801e62c:	f003 f818 	bl	8021660 <__mcmp>
 801e630:	2800      	cmp	r0, #0
 801e632:	da3b      	bge.n	801e6ac <_strtod_l+0x8a0>
 801e634:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801e636:	4333      	orrs	r3, r6
 801e638:	d167      	bne.n	801e70a <_strtod_l+0x8fe>
 801e63a:	033b      	lsls	r3, r7, #12
 801e63c:	d165      	bne.n	801e70a <_strtod_l+0x8fe>
 801e63e:	22d6      	movs	r2, #214	@ 0xd6
 801e640:	4b37      	ldr	r3, [pc, #220]	@ (801e720 <_strtod_l+0x914>)
 801e642:	04d2      	lsls	r2, r2, #19
 801e644:	403b      	ands	r3, r7
 801e646:	4293      	cmp	r3, r2
 801e648:	d95f      	bls.n	801e70a <_strtod_l+0x8fe>
 801e64a:	9b06      	ldr	r3, [sp, #24]
 801e64c:	695b      	ldr	r3, [r3, #20]
 801e64e:	2b00      	cmp	r3, #0
 801e650:	d103      	bne.n	801e65a <_strtod_l+0x84e>
 801e652:	9b06      	ldr	r3, [sp, #24]
 801e654:	691b      	ldr	r3, [r3, #16]
 801e656:	2b01      	cmp	r3, #1
 801e658:	dd57      	ble.n	801e70a <_strtod_l+0x8fe>
 801e65a:	9906      	ldr	r1, [sp, #24]
 801e65c:	2201      	movs	r2, #1
 801e65e:	9805      	ldr	r0, [sp, #20]
 801e660:	f002 ff92 	bl	8021588 <__lshift>
 801e664:	9907      	ldr	r1, [sp, #28]
 801e666:	9006      	str	r0, [sp, #24]
 801e668:	f002 fffa 	bl	8021660 <__mcmp>
 801e66c:	2800      	cmp	r0, #0
 801e66e:	dd4c      	ble.n	801e70a <_strtod_l+0x8fe>
 801e670:	4b2b      	ldr	r3, [pc, #172]	@ (801e720 <_strtod_l+0x914>)
 801e672:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801e674:	403b      	ands	r3, r7
 801e676:	2a00      	cmp	r2, #0
 801e678:	d074      	beq.n	801e764 <_strtod_l+0x958>
 801e67a:	22d6      	movs	r2, #214	@ 0xd6
 801e67c:	04d2      	lsls	r2, r2, #19
 801e67e:	4293      	cmp	r3, r2
 801e680:	d870      	bhi.n	801e764 <_strtod_l+0x958>
 801e682:	22dc      	movs	r2, #220	@ 0xdc
 801e684:	0492      	lsls	r2, r2, #18
 801e686:	4293      	cmp	r3, r2
 801e688:	d800      	bhi.n	801e68c <_strtod_l+0x880>
 801e68a:	e695      	b.n	801e3b8 <_strtod_l+0x5ac>
 801e68c:	0030      	movs	r0, r6
 801e68e:	0039      	movs	r1, r7
 801e690:	4b24      	ldr	r3, [pc, #144]	@ (801e724 <_strtod_l+0x918>)
 801e692:	2200      	movs	r2, #0
 801e694:	f7e3 ffd2 	bl	800263c <__aeabi_dmul>
 801e698:	4b21      	ldr	r3, [pc, #132]	@ (801e720 <_strtod_l+0x914>)
 801e69a:	0006      	movs	r6, r0
 801e69c:	000f      	movs	r7, r1
 801e69e:	420b      	tst	r3, r1
 801e6a0:	d000      	beq.n	801e6a4 <_strtod_l+0x898>
 801e6a2:	e5f6      	b.n	801e292 <_strtod_l+0x486>
 801e6a4:	2322      	movs	r3, #34	@ 0x22
 801e6a6:	9a05      	ldr	r2, [sp, #20]
 801e6a8:	6013      	str	r3, [r2, #0]
 801e6aa:	e5f2      	b.n	801e292 <_strtod_l+0x486>
 801e6ac:	970e      	str	r7, [sp, #56]	@ 0x38
 801e6ae:	2800      	cmp	r0, #0
 801e6b0:	d175      	bne.n	801e79e <_strtod_l+0x992>
 801e6b2:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801e6b4:	033b      	lsls	r3, r7, #12
 801e6b6:	0b1b      	lsrs	r3, r3, #12
 801e6b8:	2a00      	cmp	r2, #0
 801e6ba:	d039      	beq.n	801e730 <_strtod_l+0x924>
 801e6bc:	4a1a      	ldr	r2, [pc, #104]	@ (801e728 <_strtod_l+0x91c>)
 801e6be:	4293      	cmp	r3, r2
 801e6c0:	d138      	bne.n	801e734 <_strtod_l+0x928>
 801e6c2:	2101      	movs	r1, #1
 801e6c4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801e6c6:	4249      	negs	r1, r1
 801e6c8:	0032      	movs	r2, r6
 801e6ca:	0008      	movs	r0, r1
 801e6cc:	2b00      	cmp	r3, #0
 801e6ce:	d00b      	beq.n	801e6e8 <_strtod_l+0x8dc>
 801e6d0:	24d4      	movs	r4, #212	@ 0xd4
 801e6d2:	4b13      	ldr	r3, [pc, #76]	@ (801e720 <_strtod_l+0x914>)
 801e6d4:	0008      	movs	r0, r1
 801e6d6:	403b      	ands	r3, r7
 801e6d8:	04e4      	lsls	r4, r4, #19
 801e6da:	42a3      	cmp	r3, r4
 801e6dc:	d804      	bhi.n	801e6e8 <_strtod_l+0x8dc>
 801e6de:	306c      	adds	r0, #108	@ 0x6c
 801e6e0:	0d1b      	lsrs	r3, r3, #20
 801e6e2:	1ac3      	subs	r3, r0, r3
 801e6e4:	4099      	lsls	r1, r3
 801e6e6:	0008      	movs	r0, r1
 801e6e8:	4282      	cmp	r2, r0
 801e6ea:	d123      	bne.n	801e734 <_strtod_l+0x928>
 801e6ec:	4b0f      	ldr	r3, [pc, #60]	@ (801e72c <_strtod_l+0x920>)
 801e6ee:	990e      	ldr	r1, [sp, #56]	@ 0x38
 801e6f0:	4299      	cmp	r1, r3
 801e6f2:	d102      	bne.n	801e6fa <_strtod_l+0x8ee>
 801e6f4:	3201      	adds	r2, #1
 801e6f6:	d100      	bne.n	801e6fa <_strtod_l+0x8ee>
 801e6f8:	e5c2      	b.n	801e280 <_strtod_l+0x474>
 801e6fa:	4b09      	ldr	r3, [pc, #36]	@ (801e720 <_strtod_l+0x914>)
 801e6fc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801e6fe:	2600      	movs	r6, #0
 801e700:	401a      	ands	r2, r3
 801e702:	0013      	movs	r3, r2
 801e704:	2280      	movs	r2, #128	@ 0x80
 801e706:	0352      	lsls	r2, r2, #13
 801e708:	189f      	adds	r7, r3, r2
 801e70a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801e70c:	2b00      	cmp	r3, #0
 801e70e:	d1bd      	bne.n	801e68c <_strtod_l+0x880>
 801e710:	e5bf      	b.n	801e292 <_strtod_l+0x486>
 801e712:	46c0      	nop			@ (mov r8, r8)
 801e714:	08024fe8 	.word	0x08024fe8
 801e718:	fffffc02 	.word	0xfffffc02
 801e71c:	fffffbe2 	.word	0xfffffbe2
 801e720:	7ff00000 	.word	0x7ff00000
 801e724:	39500000 	.word	0x39500000
 801e728:	000fffff 	.word	0x000fffff
 801e72c:	7fefffff 	.word	0x7fefffff
 801e730:	4333      	orrs	r3, r6
 801e732:	d09d      	beq.n	801e670 <_strtod_l+0x864>
 801e734:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801e736:	2b00      	cmp	r3, #0
 801e738:	d01c      	beq.n	801e774 <_strtod_l+0x968>
 801e73a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801e73c:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 801e73e:	4213      	tst	r3, r2
 801e740:	d0e3      	beq.n	801e70a <_strtod_l+0x8fe>
 801e742:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801e744:	0030      	movs	r0, r6
 801e746:	0039      	movs	r1, r7
 801e748:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801e74a:	2b00      	cmp	r3, #0
 801e74c:	d016      	beq.n	801e77c <_strtod_l+0x970>
 801e74e:	f7ff fb45 	bl	801dddc <sulp>
 801e752:	0002      	movs	r2, r0
 801e754:	000b      	movs	r3, r1
 801e756:	9810      	ldr	r0, [sp, #64]	@ 0x40
 801e758:	9911      	ldr	r1, [sp, #68]	@ 0x44
 801e75a:	f7e2 ffc7 	bl	80016ec <__aeabi_dadd>
 801e75e:	0006      	movs	r6, r0
 801e760:	000f      	movs	r7, r1
 801e762:	e7d2      	b.n	801e70a <_strtod_l+0x8fe>
 801e764:	2601      	movs	r6, #1
 801e766:	4a92      	ldr	r2, [pc, #584]	@ (801e9b0 <_strtod_l+0xba4>)
 801e768:	4276      	negs	r6, r6
 801e76a:	189b      	adds	r3, r3, r2
 801e76c:	4a91      	ldr	r2, [pc, #580]	@ (801e9b4 <_strtod_l+0xba8>)
 801e76e:	431a      	orrs	r2, r3
 801e770:	0017      	movs	r7, r2
 801e772:	e7ca      	b.n	801e70a <_strtod_l+0x8fe>
 801e774:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801e776:	4233      	tst	r3, r6
 801e778:	d0c7      	beq.n	801e70a <_strtod_l+0x8fe>
 801e77a:	e7e2      	b.n	801e742 <_strtod_l+0x936>
 801e77c:	f7ff fb2e 	bl	801dddc <sulp>
 801e780:	0002      	movs	r2, r0
 801e782:	000b      	movs	r3, r1
 801e784:	9810      	ldr	r0, [sp, #64]	@ 0x40
 801e786:	9911      	ldr	r1, [sp, #68]	@ 0x44
 801e788:	f7e4 fa20 	bl	8002bcc <__aeabi_dsub>
 801e78c:	2200      	movs	r2, #0
 801e78e:	2300      	movs	r3, #0
 801e790:	0006      	movs	r6, r0
 801e792:	000f      	movs	r7, r1
 801e794:	f7e1 fe8c 	bl	80004b0 <__aeabi_dcmpeq>
 801e798:	2800      	cmp	r0, #0
 801e79a:	d0b6      	beq.n	801e70a <_strtod_l+0x8fe>
 801e79c:	e60c      	b.n	801e3b8 <_strtod_l+0x5ac>
 801e79e:	9907      	ldr	r1, [sp, #28]
 801e7a0:	9806      	ldr	r0, [sp, #24]
 801e7a2:	f003 f8df 	bl	8021964 <__ratio>
 801e7a6:	2380      	movs	r3, #128	@ 0x80
 801e7a8:	2200      	movs	r2, #0
 801e7aa:	05db      	lsls	r3, r3, #23
 801e7ac:	0004      	movs	r4, r0
 801e7ae:	000d      	movs	r5, r1
 801e7b0:	f7e1 fe8e 	bl	80004d0 <__aeabi_dcmple>
 801e7b4:	2800      	cmp	r0, #0
 801e7b6:	d06c      	beq.n	801e892 <_strtod_l+0xa86>
 801e7b8:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801e7ba:	2b00      	cmp	r3, #0
 801e7bc:	d177      	bne.n	801e8ae <_strtod_l+0xaa2>
 801e7be:	2e00      	cmp	r6, #0
 801e7c0:	d157      	bne.n	801e872 <_strtod_l+0xa66>
 801e7c2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801e7c4:	031b      	lsls	r3, r3, #12
 801e7c6:	d15a      	bne.n	801e87e <_strtod_l+0xa72>
 801e7c8:	2200      	movs	r2, #0
 801e7ca:	0020      	movs	r0, r4
 801e7cc:	0029      	movs	r1, r5
 801e7ce:	4b7a      	ldr	r3, [pc, #488]	@ (801e9b8 <_strtod_l+0xbac>)
 801e7d0:	f7e1 fe74 	bl	80004bc <__aeabi_dcmplt>
 801e7d4:	2800      	cmp	r0, #0
 801e7d6:	d159      	bne.n	801e88c <_strtod_l+0xa80>
 801e7d8:	0020      	movs	r0, r4
 801e7da:	0029      	movs	r1, r5
 801e7dc:	2200      	movs	r2, #0
 801e7de:	4b77      	ldr	r3, [pc, #476]	@ (801e9bc <_strtod_l+0xbb0>)
 801e7e0:	f7e3 ff2c 	bl	800263c <__aeabi_dmul>
 801e7e4:	0004      	movs	r4, r0
 801e7e6:	000d      	movs	r5, r1
 801e7e8:	2380      	movs	r3, #128	@ 0x80
 801e7ea:	061b      	lsls	r3, r3, #24
 801e7ec:	18eb      	adds	r3, r5, r3
 801e7ee:	940a      	str	r4, [sp, #40]	@ 0x28
 801e7f0:	930b      	str	r3, [sp, #44]	@ 0x2c
 801e7f2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801e7f4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801e7f6:	9214      	str	r2, [sp, #80]	@ 0x50
 801e7f8:	9315      	str	r3, [sp, #84]	@ 0x54
 801e7fa:	4a71      	ldr	r2, [pc, #452]	@ (801e9c0 <_strtod_l+0xbb4>)
 801e7fc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801e7fe:	4013      	ands	r3, r2
 801e800:	9316      	str	r3, [sp, #88]	@ 0x58
 801e802:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 801e804:	4b6f      	ldr	r3, [pc, #444]	@ (801e9c4 <_strtod_l+0xbb8>)
 801e806:	429a      	cmp	r2, r3
 801e808:	d000      	beq.n	801e80c <_strtod_l+0xa00>
 801e80a:	e087      	b.n	801e91c <_strtod_l+0xb10>
 801e80c:	4a6e      	ldr	r2, [pc, #440]	@ (801e9c8 <_strtod_l+0xbbc>)
 801e80e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801e810:	4694      	mov	ip, r2
 801e812:	4463      	add	r3, ip
 801e814:	001f      	movs	r7, r3
 801e816:	0030      	movs	r0, r6
 801e818:	0019      	movs	r1, r3
 801e81a:	f002 ffd7 	bl	80217cc <__ulp>
 801e81e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801e820:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801e822:	f7e3 ff0b 	bl	800263c <__aeabi_dmul>
 801e826:	0032      	movs	r2, r6
 801e828:	003b      	movs	r3, r7
 801e82a:	f7e2 ff5f 	bl	80016ec <__aeabi_dadd>
 801e82e:	4a64      	ldr	r2, [pc, #400]	@ (801e9c0 <_strtod_l+0xbb4>)
 801e830:	4b66      	ldr	r3, [pc, #408]	@ (801e9cc <_strtod_l+0xbc0>)
 801e832:	0006      	movs	r6, r0
 801e834:	400a      	ands	r2, r1
 801e836:	429a      	cmp	r2, r3
 801e838:	d940      	bls.n	801e8bc <_strtod_l+0xab0>
 801e83a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801e83c:	4a64      	ldr	r2, [pc, #400]	@ (801e9d0 <_strtod_l+0xbc4>)
 801e83e:	4293      	cmp	r3, r2
 801e840:	d103      	bne.n	801e84a <_strtod_l+0xa3e>
 801e842:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801e844:	3301      	adds	r3, #1
 801e846:	d100      	bne.n	801e84a <_strtod_l+0xa3e>
 801e848:	e51a      	b.n	801e280 <_strtod_l+0x474>
 801e84a:	2601      	movs	r6, #1
 801e84c:	4f60      	ldr	r7, [pc, #384]	@ (801e9d0 <_strtod_l+0xbc4>)
 801e84e:	4276      	negs	r6, r6
 801e850:	991e      	ldr	r1, [sp, #120]	@ 0x78
 801e852:	9805      	ldr	r0, [sp, #20]
 801e854:	f002 fc6e 	bl	8021134 <_Bfree>
 801e858:	9908      	ldr	r1, [sp, #32]
 801e85a:	9805      	ldr	r0, [sp, #20]
 801e85c:	f002 fc6a 	bl	8021134 <_Bfree>
 801e860:	9907      	ldr	r1, [sp, #28]
 801e862:	9805      	ldr	r0, [sp, #20]
 801e864:	f002 fc66 	bl	8021134 <_Bfree>
 801e868:	9906      	ldr	r1, [sp, #24]
 801e86a:	9805      	ldr	r0, [sp, #20]
 801e86c:	f002 fc62 	bl	8021134 <_Bfree>
 801e870:	e617      	b.n	801e4a2 <_strtod_l+0x696>
 801e872:	2e01      	cmp	r6, #1
 801e874:	d103      	bne.n	801e87e <_strtod_l+0xa72>
 801e876:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801e878:	2b00      	cmp	r3, #0
 801e87a:	d100      	bne.n	801e87e <_strtod_l+0xa72>
 801e87c:	e59c      	b.n	801e3b8 <_strtod_l+0x5ac>
 801e87e:	2300      	movs	r3, #0
 801e880:	4c54      	ldr	r4, [pc, #336]	@ (801e9d4 <_strtod_l+0xbc8>)
 801e882:	4d4d      	ldr	r5, [pc, #308]	@ (801e9b8 <_strtod_l+0xbac>)
 801e884:	930a      	str	r3, [sp, #40]	@ 0x28
 801e886:	940b      	str	r4, [sp, #44]	@ 0x2c
 801e888:	2400      	movs	r4, #0
 801e88a:	e7b2      	b.n	801e7f2 <_strtod_l+0x9e6>
 801e88c:	2400      	movs	r4, #0
 801e88e:	4d4b      	ldr	r5, [pc, #300]	@ (801e9bc <_strtod_l+0xbb0>)
 801e890:	e7aa      	b.n	801e7e8 <_strtod_l+0x9dc>
 801e892:	0020      	movs	r0, r4
 801e894:	0029      	movs	r1, r5
 801e896:	4b49      	ldr	r3, [pc, #292]	@ (801e9bc <_strtod_l+0xbb0>)
 801e898:	2200      	movs	r2, #0
 801e89a:	f7e3 fecf 	bl	800263c <__aeabi_dmul>
 801e89e:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801e8a0:	0004      	movs	r4, r0
 801e8a2:	000d      	movs	r5, r1
 801e8a4:	2b00      	cmp	r3, #0
 801e8a6:	d09f      	beq.n	801e7e8 <_strtod_l+0x9dc>
 801e8a8:	940a      	str	r4, [sp, #40]	@ 0x28
 801e8aa:	950b      	str	r5, [sp, #44]	@ 0x2c
 801e8ac:	e7a1      	b.n	801e7f2 <_strtod_l+0x9e6>
 801e8ae:	2300      	movs	r3, #0
 801e8b0:	4c41      	ldr	r4, [pc, #260]	@ (801e9b8 <_strtod_l+0xbac>)
 801e8b2:	0025      	movs	r5, r4
 801e8b4:	930a      	str	r3, [sp, #40]	@ 0x28
 801e8b6:	940b      	str	r4, [sp, #44]	@ 0x2c
 801e8b8:	001c      	movs	r4, r3
 801e8ba:	e79a      	b.n	801e7f2 <_strtod_l+0x9e6>
 801e8bc:	23d4      	movs	r3, #212	@ 0xd4
 801e8be:	049b      	lsls	r3, r3, #18
 801e8c0:	18cf      	adds	r7, r1, r3
 801e8c2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801e8c4:	9710      	str	r7, [sp, #64]	@ 0x40
 801e8c6:	2b00      	cmp	r3, #0
 801e8c8:	d1c2      	bne.n	801e850 <_strtod_l+0xa44>
 801e8ca:	4b3d      	ldr	r3, [pc, #244]	@ (801e9c0 <_strtod_l+0xbb4>)
 801e8cc:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 801e8ce:	403b      	ands	r3, r7
 801e8d0:	429a      	cmp	r2, r3
 801e8d2:	d1bd      	bne.n	801e850 <_strtod_l+0xa44>
 801e8d4:	0020      	movs	r0, r4
 801e8d6:	0029      	movs	r1, r5
 801e8d8:	f7e1 fed6 	bl	8000688 <__aeabi_d2lz>
 801e8dc:	f7e1 ff0e 	bl	80006fc <__aeabi_l2d>
 801e8e0:	0002      	movs	r2, r0
 801e8e2:	000b      	movs	r3, r1
 801e8e4:	0020      	movs	r0, r4
 801e8e6:	0029      	movs	r1, r5
 801e8e8:	f7e4 f970 	bl	8002bcc <__aeabi_dsub>
 801e8ec:	033c      	lsls	r4, r7, #12
 801e8ee:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801e8f0:	0b24      	lsrs	r4, r4, #12
 801e8f2:	4334      	orrs	r4, r6
 801e8f4:	900e      	str	r0, [sp, #56]	@ 0x38
 801e8f6:	910f      	str	r1, [sp, #60]	@ 0x3c
 801e8f8:	4a37      	ldr	r2, [pc, #220]	@ (801e9d8 <_strtod_l+0xbcc>)
 801e8fa:	431c      	orrs	r4, r3
 801e8fc:	d052      	beq.n	801e9a4 <_strtod_l+0xb98>
 801e8fe:	4b37      	ldr	r3, [pc, #220]	@ (801e9dc <_strtod_l+0xbd0>)
 801e900:	f7e1 fddc 	bl	80004bc <__aeabi_dcmplt>
 801e904:	2800      	cmp	r0, #0
 801e906:	d000      	beq.n	801e90a <_strtod_l+0xafe>
 801e908:	e4c3      	b.n	801e292 <_strtod_l+0x486>
 801e90a:	980e      	ldr	r0, [sp, #56]	@ 0x38
 801e90c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 801e90e:	4a34      	ldr	r2, [pc, #208]	@ (801e9e0 <_strtod_l+0xbd4>)
 801e910:	4b2a      	ldr	r3, [pc, #168]	@ (801e9bc <_strtod_l+0xbb0>)
 801e912:	f7e1 fde7 	bl	80004e4 <__aeabi_dcmpgt>
 801e916:	2800      	cmp	r0, #0
 801e918:	d09a      	beq.n	801e850 <_strtod_l+0xa44>
 801e91a:	e4ba      	b.n	801e292 <_strtod_l+0x486>
 801e91c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801e91e:	2b00      	cmp	r3, #0
 801e920:	d02a      	beq.n	801e978 <_strtod_l+0xb6c>
 801e922:	23d4      	movs	r3, #212	@ 0xd4
 801e924:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 801e926:	04db      	lsls	r3, r3, #19
 801e928:	429a      	cmp	r2, r3
 801e92a:	d825      	bhi.n	801e978 <_strtod_l+0xb6c>
 801e92c:	0020      	movs	r0, r4
 801e92e:	0029      	movs	r1, r5
 801e930:	4a2c      	ldr	r2, [pc, #176]	@ (801e9e4 <_strtod_l+0xbd8>)
 801e932:	4b2d      	ldr	r3, [pc, #180]	@ (801e9e8 <_strtod_l+0xbdc>)
 801e934:	f7e1 fdcc 	bl	80004d0 <__aeabi_dcmple>
 801e938:	2800      	cmp	r0, #0
 801e93a:	d016      	beq.n	801e96a <_strtod_l+0xb5e>
 801e93c:	0020      	movs	r0, r4
 801e93e:	0029      	movs	r1, r5
 801e940:	f7e1 fe84 	bl	800064c <__aeabi_d2uiz>
 801e944:	2800      	cmp	r0, #0
 801e946:	d100      	bne.n	801e94a <_strtod_l+0xb3e>
 801e948:	3001      	adds	r0, #1
 801e94a:	f7e4 fd67 	bl	800341c <__aeabi_ui2d>
 801e94e:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801e950:	0004      	movs	r4, r0
 801e952:	000d      	movs	r5, r1
 801e954:	2b00      	cmp	r3, #0
 801e956:	d122      	bne.n	801e99e <_strtod_l+0xb92>
 801e958:	2380      	movs	r3, #128	@ 0x80
 801e95a:	061b      	lsls	r3, r3, #24
 801e95c:	18cb      	adds	r3, r1, r3
 801e95e:	9018      	str	r0, [sp, #96]	@ 0x60
 801e960:	9319      	str	r3, [sp, #100]	@ 0x64
 801e962:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 801e964:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801e966:	9214      	str	r2, [sp, #80]	@ 0x50
 801e968:	9315      	str	r3, [sp, #84]	@ 0x54
 801e96a:	22d6      	movs	r2, #214	@ 0xd6
 801e96c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801e96e:	04d2      	lsls	r2, r2, #19
 801e970:	189b      	adds	r3, r3, r2
 801e972:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 801e974:	1a9b      	subs	r3, r3, r2
 801e976:	9315      	str	r3, [sp, #84]	@ 0x54
 801e978:	9810      	ldr	r0, [sp, #64]	@ 0x40
 801e97a:	9911      	ldr	r1, [sp, #68]	@ 0x44
 801e97c:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 801e97e:	9f15      	ldr	r7, [sp, #84]	@ 0x54
 801e980:	f002 ff24 	bl	80217cc <__ulp>
 801e984:	0002      	movs	r2, r0
 801e986:	000b      	movs	r3, r1
 801e988:	0030      	movs	r0, r6
 801e98a:	0039      	movs	r1, r7
 801e98c:	f7e3 fe56 	bl	800263c <__aeabi_dmul>
 801e990:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801e992:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801e994:	f7e2 feaa 	bl	80016ec <__aeabi_dadd>
 801e998:	0006      	movs	r6, r0
 801e99a:	000f      	movs	r7, r1
 801e99c:	e791      	b.n	801e8c2 <_strtod_l+0xab6>
 801e99e:	9418      	str	r4, [sp, #96]	@ 0x60
 801e9a0:	9519      	str	r5, [sp, #100]	@ 0x64
 801e9a2:	e7de      	b.n	801e962 <_strtod_l+0xb56>
 801e9a4:	4b11      	ldr	r3, [pc, #68]	@ (801e9ec <_strtod_l+0xbe0>)
 801e9a6:	980e      	ldr	r0, [sp, #56]	@ 0x38
 801e9a8:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 801e9aa:	f7e1 fd87 	bl	80004bc <__aeabi_dcmplt>
 801e9ae:	e7b2      	b.n	801e916 <_strtod_l+0xb0a>
 801e9b0:	fff00000 	.word	0xfff00000
 801e9b4:	000fffff 	.word	0x000fffff
 801e9b8:	3ff00000 	.word	0x3ff00000
 801e9bc:	3fe00000 	.word	0x3fe00000
 801e9c0:	7ff00000 	.word	0x7ff00000
 801e9c4:	7fe00000 	.word	0x7fe00000
 801e9c8:	fcb00000 	.word	0xfcb00000
 801e9cc:	7c9fffff 	.word	0x7c9fffff
 801e9d0:	7fefffff 	.word	0x7fefffff
 801e9d4:	bff00000 	.word	0xbff00000
 801e9d8:	94a03595 	.word	0x94a03595
 801e9dc:	3fdfffff 	.word	0x3fdfffff
 801e9e0:	35afe535 	.word	0x35afe535
 801e9e4:	ffc00000 	.word	0xffc00000
 801e9e8:	41dfffff 	.word	0x41dfffff
 801e9ec:	3fcfffff 	.word	0x3fcfffff

0801e9f0 <strtod>:
 801e9f0:	b510      	push	{r4, lr}
 801e9f2:	4c04      	ldr	r4, [pc, #16]	@ (801ea04 <strtod+0x14>)
 801e9f4:	000a      	movs	r2, r1
 801e9f6:	0001      	movs	r1, r0
 801e9f8:	4b03      	ldr	r3, [pc, #12]	@ (801ea08 <strtod+0x18>)
 801e9fa:	6820      	ldr	r0, [r4, #0]
 801e9fc:	f7ff fa06 	bl	801de0c <_strtod_l>
 801ea00:	bd10      	pop	{r4, pc}
 801ea02:	46c0      	nop			@ (mov r8, r8)
 801ea04:	200003cc 	.word	0x200003cc
 801ea08:	20000260 	.word	0x20000260

0801ea0c <_strtol_l.constprop.0>:
 801ea0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801ea0e:	b085      	sub	sp, #20
 801ea10:	0017      	movs	r7, r2
 801ea12:	001e      	movs	r6, r3
 801ea14:	9003      	str	r0, [sp, #12]
 801ea16:	9101      	str	r1, [sp, #4]
 801ea18:	2b24      	cmp	r3, #36	@ 0x24
 801ea1a:	d844      	bhi.n	801eaa6 <_strtol_l.constprop.0+0x9a>
 801ea1c:	000c      	movs	r4, r1
 801ea1e:	2b01      	cmp	r3, #1
 801ea20:	d041      	beq.n	801eaa6 <_strtol_l.constprop.0+0x9a>
 801ea22:	4b3d      	ldr	r3, [pc, #244]	@ (801eb18 <_strtol_l.constprop.0+0x10c>)
 801ea24:	2208      	movs	r2, #8
 801ea26:	469c      	mov	ip, r3
 801ea28:	0023      	movs	r3, r4
 801ea2a:	4661      	mov	r1, ip
 801ea2c:	781d      	ldrb	r5, [r3, #0]
 801ea2e:	3401      	adds	r4, #1
 801ea30:	5d48      	ldrb	r0, [r1, r5]
 801ea32:	0001      	movs	r1, r0
 801ea34:	4011      	ands	r1, r2
 801ea36:	4210      	tst	r0, r2
 801ea38:	d1f6      	bne.n	801ea28 <_strtol_l.constprop.0+0x1c>
 801ea3a:	2d2d      	cmp	r5, #45	@ 0x2d
 801ea3c:	d13a      	bne.n	801eab4 <_strtol_l.constprop.0+0xa8>
 801ea3e:	7825      	ldrb	r5, [r4, #0]
 801ea40:	1c9c      	adds	r4, r3, #2
 801ea42:	2301      	movs	r3, #1
 801ea44:	9300      	str	r3, [sp, #0]
 801ea46:	2210      	movs	r2, #16
 801ea48:	0033      	movs	r3, r6
 801ea4a:	4393      	bics	r3, r2
 801ea4c:	d109      	bne.n	801ea62 <_strtol_l.constprop.0+0x56>
 801ea4e:	2d30      	cmp	r5, #48	@ 0x30
 801ea50:	d136      	bne.n	801eac0 <_strtol_l.constprop.0+0xb4>
 801ea52:	2120      	movs	r1, #32
 801ea54:	7823      	ldrb	r3, [r4, #0]
 801ea56:	438b      	bics	r3, r1
 801ea58:	2b58      	cmp	r3, #88	@ 0x58
 801ea5a:	d131      	bne.n	801eac0 <_strtol_l.constprop.0+0xb4>
 801ea5c:	0016      	movs	r6, r2
 801ea5e:	7865      	ldrb	r5, [r4, #1]
 801ea60:	3402      	adds	r4, #2
 801ea62:	4a2e      	ldr	r2, [pc, #184]	@ (801eb1c <_strtol_l.constprop.0+0x110>)
 801ea64:	9b00      	ldr	r3, [sp, #0]
 801ea66:	4694      	mov	ip, r2
 801ea68:	4463      	add	r3, ip
 801ea6a:	0031      	movs	r1, r6
 801ea6c:	0018      	movs	r0, r3
 801ea6e:	9302      	str	r3, [sp, #8]
 801ea70:	f7e1 fc1e 	bl	80002b0 <__aeabi_uidivmod>
 801ea74:	2200      	movs	r2, #0
 801ea76:	4684      	mov	ip, r0
 801ea78:	0010      	movs	r0, r2
 801ea7a:	002b      	movs	r3, r5
 801ea7c:	3b30      	subs	r3, #48	@ 0x30
 801ea7e:	2b09      	cmp	r3, #9
 801ea80:	d825      	bhi.n	801eace <_strtol_l.constprop.0+0xc2>
 801ea82:	001d      	movs	r5, r3
 801ea84:	42ae      	cmp	r6, r5
 801ea86:	dd31      	ble.n	801eaec <_strtol_l.constprop.0+0xe0>
 801ea88:	1c53      	adds	r3, r2, #1
 801ea8a:	d009      	beq.n	801eaa0 <_strtol_l.constprop.0+0x94>
 801ea8c:	2201      	movs	r2, #1
 801ea8e:	4252      	negs	r2, r2
 801ea90:	4584      	cmp	ip, r0
 801ea92:	d305      	bcc.n	801eaa0 <_strtol_l.constprop.0+0x94>
 801ea94:	d101      	bne.n	801ea9a <_strtol_l.constprop.0+0x8e>
 801ea96:	42a9      	cmp	r1, r5
 801ea98:	db25      	blt.n	801eae6 <_strtol_l.constprop.0+0xda>
 801ea9a:	2201      	movs	r2, #1
 801ea9c:	4370      	muls	r0, r6
 801ea9e:	1828      	adds	r0, r5, r0
 801eaa0:	7825      	ldrb	r5, [r4, #0]
 801eaa2:	3401      	adds	r4, #1
 801eaa4:	e7e9      	b.n	801ea7a <_strtol_l.constprop.0+0x6e>
 801eaa6:	f000 ffc5 	bl	801fa34 <__errno>
 801eaaa:	2316      	movs	r3, #22
 801eaac:	6003      	str	r3, [r0, #0]
 801eaae:	2000      	movs	r0, #0
 801eab0:	b005      	add	sp, #20
 801eab2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801eab4:	9100      	str	r1, [sp, #0]
 801eab6:	2d2b      	cmp	r5, #43	@ 0x2b
 801eab8:	d1c5      	bne.n	801ea46 <_strtol_l.constprop.0+0x3a>
 801eaba:	7825      	ldrb	r5, [r4, #0]
 801eabc:	1c9c      	adds	r4, r3, #2
 801eabe:	e7c2      	b.n	801ea46 <_strtol_l.constprop.0+0x3a>
 801eac0:	2e00      	cmp	r6, #0
 801eac2:	d1ce      	bne.n	801ea62 <_strtol_l.constprop.0+0x56>
 801eac4:	3608      	adds	r6, #8
 801eac6:	2d30      	cmp	r5, #48	@ 0x30
 801eac8:	d0cb      	beq.n	801ea62 <_strtol_l.constprop.0+0x56>
 801eaca:	3602      	adds	r6, #2
 801eacc:	e7c9      	b.n	801ea62 <_strtol_l.constprop.0+0x56>
 801eace:	002b      	movs	r3, r5
 801ead0:	3b41      	subs	r3, #65	@ 0x41
 801ead2:	2b19      	cmp	r3, #25
 801ead4:	d801      	bhi.n	801eada <_strtol_l.constprop.0+0xce>
 801ead6:	3d37      	subs	r5, #55	@ 0x37
 801ead8:	e7d4      	b.n	801ea84 <_strtol_l.constprop.0+0x78>
 801eada:	002b      	movs	r3, r5
 801eadc:	3b61      	subs	r3, #97	@ 0x61
 801eade:	2b19      	cmp	r3, #25
 801eae0:	d804      	bhi.n	801eaec <_strtol_l.constprop.0+0xe0>
 801eae2:	3d57      	subs	r5, #87	@ 0x57
 801eae4:	e7ce      	b.n	801ea84 <_strtol_l.constprop.0+0x78>
 801eae6:	2201      	movs	r2, #1
 801eae8:	4252      	negs	r2, r2
 801eaea:	e7d9      	b.n	801eaa0 <_strtol_l.constprop.0+0x94>
 801eaec:	1c53      	adds	r3, r2, #1
 801eaee:	d108      	bne.n	801eb02 <_strtol_l.constprop.0+0xf6>
 801eaf0:	2322      	movs	r3, #34	@ 0x22
 801eaf2:	9a03      	ldr	r2, [sp, #12]
 801eaf4:	9802      	ldr	r0, [sp, #8]
 801eaf6:	6013      	str	r3, [r2, #0]
 801eaf8:	2f00      	cmp	r7, #0
 801eafa:	d0d9      	beq.n	801eab0 <_strtol_l.constprop.0+0xa4>
 801eafc:	1e63      	subs	r3, r4, #1
 801eafe:	9301      	str	r3, [sp, #4]
 801eb00:	e007      	b.n	801eb12 <_strtol_l.constprop.0+0x106>
 801eb02:	9b00      	ldr	r3, [sp, #0]
 801eb04:	2b00      	cmp	r3, #0
 801eb06:	d000      	beq.n	801eb0a <_strtol_l.constprop.0+0xfe>
 801eb08:	4240      	negs	r0, r0
 801eb0a:	2f00      	cmp	r7, #0
 801eb0c:	d0d0      	beq.n	801eab0 <_strtol_l.constprop.0+0xa4>
 801eb0e:	2a00      	cmp	r2, #0
 801eb10:	d1f4      	bne.n	801eafc <_strtol_l.constprop.0+0xf0>
 801eb12:	9b01      	ldr	r3, [sp, #4]
 801eb14:	603b      	str	r3, [r7, #0]
 801eb16:	e7cb      	b.n	801eab0 <_strtol_l.constprop.0+0xa4>
 801eb18:	08025011 	.word	0x08025011
 801eb1c:	7fffffff 	.word	0x7fffffff

0801eb20 <strtol>:
 801eb20:	b510      	push	{r4, lr}
 801eb22:	4c04      	ldr	r4, [pc, #16]	@ (801eb34 <strtol+0x14>)
 801eb24:	0013      	movs	r3, r2
 801eb26:	000a      	movs	r2, r1
 801eb28:	0001      	movs	r1, r0
 801eb2a:	6820      	ldr	r0, [r4, #0]
 801eb2c:	f7ff ff6e 	bl	801ea0c <_strtol_l.constprop.0>
 801eb30:	bd10      	pop	{r4, pc}
 801eb32:	46c0      	nop			@ (mov r8, r8)
 801eb34:	200003cc 	.word	0x200003cc

0801eb38 <__cvt>:
 801eb38:	b5f0      	push	{r4, r5, r6, r7, lr}
 801eb3a:	001f      	movs	r7, r3
 801eb3c:	2300      	movs	r3, #0
 801eb3e:	0016      	movs	r6, r2
 801eb40:	b08b      	sub	sp, #44	@ 0x2c
 801eb42:	429f      	cmp	r7, r3
 801eb44:	da04      	bge.n	801eb50 <__cvt+0x18>
 801eb46:	2180      	movs	r1, #128	@ 0x80
 801eb48:	0609      	lsls	r1, r1, #24
 801eb4a:	187b      	adds	r3, r7, r1
 801eb4c:	001f      	movs	r7, r3
 801eb4e:	232d      	movs	r3, #45	@ 0x2d
 801eb50:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801eb52:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 801eb54:	7013      	strb	r3, [r2, #0]
 801eb56:	2320      	movs	r3, #32
 801eb58:	2203      	movs	r2, #3
 801eb5a:	439d      	bics	r5, r3
 801eb5c:	2d46      	cmp	r5, #70	@ 0x46
 801eb5e:	d007      	beq.n	801eb70 <__cvt+0x38>
 801eb60:	002b      	movs	r3, r5
 801eb62:	3b45      	subs	r3, #69	@ 0x45
 801eb64:	4259      	negs	r1, r3
 801eb66:	414b      	adcs	r3, r1
 801eb68:	9910      	ldr	r1, [sp, #64]	@ 0x40
 801eb6a:	3a01      	subs	r2, #1
 801eb6c:	18cb      	adds	r3, r1, r3
 801eb6e:	9310      	str	r3, [sp, #64]	@ 0x40
 801eb70:	ab09      	add	r3, sp, #36	@ 0x24
 801eb72:	9304      	str	r3, [sp, #16]
 801eb74:	ab08      	add	r3, sp, #32
 801eb76:	9303      	str	r3, [sp, #12]
 801eb78:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801eb7a:	9200      	str	r2, [sp, #0]
 801eb7c:	9302      	str	r3, [sp, #8]
 801eb7e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801eb80:	0032      	movs	r2, r6
 801eb82:	9301      	str	r3, [sp, #4]
 801eb84:	003b      	movs	r3, r7
 801eb86:	f001 f82b 	bl	801fbe0 <_dtoa_r>
 801eb8a:	0004      	movs	r4, r0
 801eb8c:	2d47      	cmp	r5, #71	@ 0x47
 801eb8e:	d11b      	bne.n	801ebc8 <__cvt+0x90>
 801eb90:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801eb92:	07db      	lsls	r3, r3, #31
 801eb94:	d511      	bpl.n	801ebba <__cvt+0x82>
 801eb96:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801eb98:	18c3      	adds	r3, r0, r3
 801eb9a:	9307      	str	r3, [sp, #28]
 801eb9c:	2200      	movs	r2, #0
 801eb9e:	2300      	movs	r3, #0
 801eba0:	0030      	movs	r0, r6
 801eba2:	0039      	movs	r1, r7
 801eba4:	f7e1 fc84 	bl	80004b0 <__aeabi_dcmpeq>
 801eba8:	2800      	cmp	r0, #0
 801ebaa:	d001      	beq.n	801ebb0 <__cvt+0x78>
 801ebac:	9b07      	ldr	r3, [sp, #28]
 801ebae:	9309      	str	r3, [sp, #36]	@ 0x24
 801ebb0:	2230      	movs	r2, #48	@ 0x30
 801ebb2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801ebb4:	9907      	ldr	r1, [sp, #28]
 801ebb6:	428b      	cmp	r3, r1
 801ebb8:	d320      	bcc.n	801ebfc <__cvt+0xc4>
 801ebba:	0020      	movs	r0, r4
 801ebbc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801ebbe:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 801ebc0:	1b1b      	subs	r3, r3, r4
 801ebc2:	6013      	str	r3, [r2, #0]
 801ebc4:	b00b      	add	sp, #44	@ 0x2c
 801ebc6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801ebc8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801ebca:	18c3      	adds	r3, r0, r3
 801ebcc:	9307      	str	r3, [sp, #28]
 801ebce:	2d46      	cmp	r5, #70	@ 0x46
 801ebd0:	d1e4      	bne.n	801eb9c <__cvt+0x64>
 801ebd2:	7803      	ldrb	r3, [r0, #0]
 801ebd4:	2b30      	cmp	r3, #48	@ 0x30
 801ebd6:	d10c      	bne.n	801ebf2 <__cvt+0xba>
 801ebd8:	2200      	movs	r2, #0
 801ebda:	2300      	movs	r3, #0
 801ebdc:	0030      	movs	r0, r6
 801ebde:	0039      	movs	r1, r7
 801ebe0:	f7e1 fc66 	bl	80004b0 <__aeabi_dcmpeq>
 801ebe4:	2800      	cmp	r0, #0
 801ebe6:	d104      	bne.n	801ebf2 <__cvt+0xba>
 801ebe8:	2301      	movs	r3, #1
 801ebea:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801ebec:	1a9b      	subs	r3, r3, r2
 801ebee:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801ebf0:	6013      	str	r3, [r2, #0]
 801ebf2:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801ebf4:	9a07      	ldr	r2, [sp, #28]
 801ebf6:	681b      	ldr	r3, [r3, #0]
 801ebf8:	18d3      	adds	r3, r2, r3
 801ebfa:	e7ce      	b.n	801eb9a <__cvt+0x62>
 801ebfc:	1c59      	adds	r1, r3, #1
 801ebfe:	9109      	str	r1, [sp, #36]	@ 0x24
 801ec00:	701a      	strb	r2, [r3, #0]
 801ec02:	e7d6      	b.n	801ebb2 <__cvt+0x7a>

0801ec04 <__exponent>:
 801ec04:	b5f0      	push	{r4, r5, r6, r7, lr}
 801ec06:	232b      	movs	r3, #43	@ 0x2b
 801ec08:	0005      	movs	r5, r0
 801ec0a:	000c      	movs	r4, r1
 801ec0c:	b085      	sub	sp, #20
 801ec0e:	7002      	strb	r2, [r0, #0]
 801ec10:	2900      	cmp	r1, #0
 801ec12:	da01      	bge.n	801ec18 <__exponent+0x14>
 801ec14:	424c      	negs	r4, r1
 801ec16:	3302      	adds	r3, #2
 801ec18:	706b      	strb	r3, [r5, #1]
 801ec1a:	2c09      	cmp	r4, #9
 801ec1c:	dd2c      	ble.n	801ec78 <__exponent+0x74>
 801ec1e:	ab02      	add	r3, sp, #8
 801ec20:	1dde      	adds	r6, r3, #7
 801ec22:	0020      	movs	r0, r4
 801ec24:	210a      	movs	r1, #10
 801ec26:	f7e1 fc2d 	bl	8000484 <__aeabi_idivmod>
 801ec2a:	0037      	movs	r7, r6
 801ec2c:	3130      	adds	r1, #48	@ 0x30
 801ec2e:	3e01      	subs	r6, #1
 801ec30:	0020      	movs	r0, r4
 801ec32:	7031      	strb	r1, [r6, #0]
 801ec34:	210a      	movs	r1, #10
 801ec36:	9401      	str	r4, [sp, #4]
 801ec38:	f7e1 fb3e 	bl	80002b8 <__divsi3>
 801ec3c:	9b01      	ldr	r3, [sp, #4]
 801ec3e:	0004      	movs	r4, r0
 801ec40:	2b63      	cmp	r3, #99	@ 0x63
 801ec42:	dcee      	bgt.n	801ec22 <__exponent+0x1e>
 801ec44:	1eba      	subs	r2, r7, #2
 801ec46:	1ca8      	adds	r0, r5, #2
 801ec48:	0001      	movs	r1, r0
 801ec4a:	0013      	movs	r3, r2
 801ec4c:	3430      	adds	r4, #48	@ 0x30
 801ec4e:	7014      	strb	r4, [r2, #0]
 801ec50:	ac02      	add	r4, sp, #8
 801ec52:	3407      	adds	r4, #7
 801ec54:	429c      	cmp	r4, r3
 801ec56:	d80a      	bhi.n	801ec6e <__exponent+0x6a>
 801ec58:	2300      	movs	r3, #0
 801ec5a:	42a2      	cmp	r2, r4
 801ec5c:	d803      	bhi.n	801ec66 <__exponent+0x62>
 801ec5e:	3309      	adds	r3, #9
 801ec60:	aa02      	add	r2, sp, #8
 801ec62:	189b      	adds	r3, r3, r2
 801ec64:	1bdb      	subs	r3, r3, r7
 801ec66:	18c0      	adds	r0, r0, r3
 801ec68:	1b40      	subs	r0, r0, r5
 801ec6a:	b005      	add	sp, #20
 801ec6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801ec6e:	781c      	ldrb	r4, [r3, #0]
 801ec70:	3301      	adds	r3, #1
 801ec72:	700c      	strb	r4, [r1, #0]
 801ec74:	3101      	adds	r1, #1
 801ec76:	e7eb      	b.n	801ec50 <__exponent+0x4c>
 801ec78:	2330      	movs	r3, #48	@ 0x30
 801ec7a:	18e4      	adds	r4, r4, r3
 801ec7c:	70ab      	strb	r3, [r5, #2]
 801ec7e:	1d28      	adds	r0, r5, #4
 801ec80:	70ec      	strb	r4, [r5, #3]
 801ec82:	e7f1      	b.n	801ec68 <__exponent+0x64>

0801ec84 <_printf_float>:
 801ec84:	b5f0      	push	{r4, r5, r6, r7, lr}
 801ec86:	b097      	sub	sp, #92	@ 0x5c
 801ec88:	000d      	movs	r5, r1
 801ec8a:	920a      	str	r2, [sp, #40]	@ 0x28
 801ec8c:	9c1c      	ldr	r4, [sp, #112]	@ 0x70
 801ec8e:	930b      	str	r3, [sp, #44]	@ 0x2c
 801ec90:	9009      	str	r0, [sp, #36]	@ 0x24
 801ec92:	f000 fe7d 	bl	801f990 <_localeconv_r>
 801ec96:	6803      	ldr	r3, [r0, #0]
 801ec98:	0018      	movs	r0, r3
 801ec9a:	930d      	str	r3, [sp, #52]	@ 0x34
 801ec9c:	f7e1 fa66 	bl	800016c <strlen>
 801eca0:	2300      	movs	r3, #0
 801eca2:	900f      	str	r0, [sp, #60]	@ 0x3c
 801eca4:	9314      	str	r3, [sp, #80]	@ 0x50
 801eca6:	7e2b      	ldrb	r3, [r5, #24]
 801eca8:	2207      	movs	r2, #7
 801ecaa:	930c      	str	r3, [sp, #48]	@ 0x30
 801ecac:	682b      	ldr	r3, [r5, #0]
 801ecae:	930e      	str	r3, [sp, #56]	@ 0x38
 801ecb0:	990e      	ldr	r1, [sp, #56]	@ 0x38
 801ecb2:	6823      	ldr	r3, [r4, #0]
 801ecb4:	05c9      	lsls	r1, r1, #23
 801ecb6:	d545      	bpl.n	801ed44 <_printf_float+0xc0>
 801ecb8:	189b      	adds	r3, r3, r2
 801ecba:	4393      	bics	r3, r2
 801ecbc:	001a      	movs	r2, r3
 801ecbe:	3208      	adds	r2, #8
 801ecc0:	6022      	str	r2, [r4, #0]
 801ecc2:	2201      	movs	r2, #1
 801ecc4:	681e      	ldr	r6, [r3, #0]
 801ecc6:	685f      	ldr	r7, [r3, #4]
 801ecc8:	007b      	lsls	r3, r7, #1
 801ecca:	085b      	lsrs	r3, r3, #1
 801eccc:	9311      	str	r3, [sp, #68]	@ 0x44
 801ecce:	9610      	str	r6, [sp, #64]	@ 0x40
 801ecd0:	64ae      	str	r6, [r5, #72]	@ 0x48
 801ecd2:	64ef      	str	r7, [r5, #76]	@ 0x4c
 801ecd4:	9810      	ldr	r0, [sp, #64]	@ 0x40
 801ecd6:	9911      	ldr	r1, [sp, #68]	@ 0x44
 801ecd8:	4ba7      	ldr	r3, [pc, #668]	@ (801ef78 <_printf_float+0x2f4>)
 801ecda:	4252      	negs	r2, r2
 801ecdc:	f7e4 fb12 	bl	8003304 <__aeabi_dcmpun>
 801ece0:	2800      	cmp	r0, #0
 801ece2:	d131      	bne.n	801ed48 <_printf_float+0xc4>
 801ece4:	9810      	ldr	r0, [sp, #64]	@ 0x40
 801ece6:	9911      	ldr	r1, [sp, #68]	@ 0x44
 801ece8:	2201      	movs	r2, #1
 801ecea:	4ba3      	ldr	r3, [pc, #652]	@ (801ef78 <_printf_float+0x2f4>)
 801ecec:	4252      	negs	r2, r2
 801ecee:	f7e1 fbef 	bl	80004d0 <__aeabi_dcmple>
 801ecf2:	2800      	cmp	r0, #0
 801ecf4:	d128      	bne.n	801ed48 <_printf_float+0xc4>
 801ecf6:	2200      	movs	r2, #0
 801ecf8:	2300      	movs	r3, #0
 801ecfa:	0030      	movs	r0, r6
 801ecfc:	0039      	movs	r1, r7
 801ecfe:	f7e1 fbdd 	bl	80004bc <__aeabi_dcmplt>
 801ed02:	2800      	cmp	r0, #0
 801ed04:	d003      	beq.n	801ed0e <_printf_float+0x8a>
 801ed06:	002b      	movs	r3, r5
 801ed08:	222d      	movs	r2, #45	@ 0x2d
 801ed0a:	3343      	adds	r3, #67	@ 0x43
 801ed0c:	701a      	strb	r2, [r3, #0]
 801ed0e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801ed10:	4f9a      	ldr	r7, [pc, #616]	@ (801ef7c <_printf_float+0x2f8>)
 801ed12:	2b47      	cmp	r3, #71	@ 0x47
 801ed14:	d900      	bls.n	801ed18 <_printf_float+0x94>
 801ed16:	4f9a      	ldr	r7, [pc, #616]	@ (801ef80 <_printf_float+0x2fc>)
 801ed18:	2303      	movs	r3, #3
 801ed1a:	2400      	movs	r4, #0
 801ed1c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801ed1e:	612b      	str	r3, [r5, #16]
 801ed20:	3301      	adds	r3, #1
 801ed22:	439a      	bics	r2, r3
 801ed24:	602a      	str	r2, [r5, #0]
 801ed26:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801ed28:	0029      	movs	r1, r5
 801ed2a:	9300      	str	r3, [sp, #0]
 801ed2c:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801ed2e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801ed30:	aa15      	add	r2, sp, #84	@ 0x54
 801ed32:	f000 f9e5 	bl	801f100 <_printf_common>
 801ed36:	3001      	adds	r0, #1
 801ed38:	d000      	beq.n	801ed3c <_printf_float+0xb8>
 801ed3a:	e09f      	b.n	801ee7c <_printf_float+0x1f8>
 801ed3c:	2001      	movs	r0, #1
 801ed3e:	4240      	negs	r0, r0
 801ed40:	b017      	add	sp, #92	@ 0x5c
 801ed42:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801ed44:	3307      	adds	r3, #7
 801ed46:	e7b8      	b.n	801ecba <_printf_float+0x36>
 801ed48:	0032      	movs	r2, r6
 801ed4a:	003b      	movs	r3, r7
 801ed4c:	0030      	movs	r0, r6
 801ed4e:	0039      	movs	r1, r7
 801ed50:	f7e4 fad8 	bl	8003304 <__aeabi_dcmpun>
 801ed54:	2800      	cmp	r0, #0
 801ed56:	d00b      	beq.n	801ed70 <_printf_float+0xec>
 801ed58:	2f00      	cmp	r7, #0
 801ed5a:	da03      	bge.n	801ed64 <_printf_float+0xe0>
 801ed5c:	002b      	movs	r3, r5
 801ed5e:	222d      	movs	r2, #45	@ 0x2d
 801ed60:	3343      	adds	r3, #67	@ 0x43
 801ed62:	701a      	strb	r2, [r3, #0]
 801ed64:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801ed66:	4f87      	ldr	r7, [pc, #540]	@ (801ef84 <_printf_float+0x300>)
 801ed68:	2b47      	cmp	r3, #71	@ 0x47
 801ed6a:	d9d5      	bls.n	801ed18 <_printf_float+0x94>
 801ed6c:	4f86      	ldr	r7, [pc, #536]	@ (801ef88 <_printf_float+0x304>)
 801ed6e:	e7d3      	b.n	801ed18 <_printf_float+0x94>
 801ed70:	2220      	movs	r2, #32
 801ed72:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 801ed74:	686b      	ldr	r3, [r5, #4]
 801ed76:	4394      	bics	r4, r2
 801ed78:	1c5a      	adds	r2, r3, #1
 801ed7a:	d146      	bne.n	801ee0a <_printf_float+0x186>
 801ed7c:	3307      	adds	r3, #7
 801ed7e:	606b      	str	r3, [r5, #4]
 801ed80:	2380      	movs	r3, #128	@ 0x80
 801ed82:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801ed84:	00db      	lsls	r3, r3, #3
 801ed86:	4313      	orrs	r3, r2
 801ed88:	2200      	movs	r2, #0
 801ed8a:	602b      	str	r3, [r5, #0]
 801ed8c:	9206      	str	r2, [sp, #24]
 801ed8e:	aa14      	add	r2, sp, #80	@ 0x50
 801ed90:	9205      	str	r2, [sp, #20]
 801ed92:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801ed94:	a90a      	add	r1, sp, #40	@ 0x28
 801ed96:	9204      	str	r2, [sp, #16]
 801ed98:	aa13      	add	r2, sp, #76	@ 0x4c
 801ed9a:	9203      	str	r2, [sp, #12]
 801ed9c:	2223      	movs	r2, #35	@ 0x23
 801ed9e:	1852      	adds	r2, r2, r1
 801eda0:	9202      	str	r2, [sp, #8]
 801eda2:	9301      	str	r3, [sp, #4]
 801eda4:	686b      	ldr	r3, [r5, #4]
 801eda6:	0032      	movs	r2, r6
 801eda8:	9300      	str	r3, [sp, #0]
 801edaa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801edac:	003b      	movs	r3, r7
 801edae:	f7ff fec3 	bl	801eb38 <__cvt>
 801edb2:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801edb4:	0007      	movs	r7, r0
 801edb6:	2c47      	cmp	r4, #71	@ 0x47
 801edb8:	d12d      	bne.n	801ee16 <_printf_float+0x192>
 801edba:	1cd3      	adds	r3, r2, #3
 801edbc:	db02      	blt.n	801edc4 <_printf_float+0x140>
 801edbe:	686b      	ldr	r3, [r5, #4]
 801edc0:	429a      	cmp	r2, r3
 801edc2:	dd48      	ble.n	801ee56 <_printf_float+0x1d2>
 801edc4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801edc6:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 801edc8:	3b02      	subs	r3, #2
 801edca:	b2db      	uxtb	r3, r3
 801edcc:	930c      	str	r3, [sp, #48]	@ 0x30
 801edce:	0028      	movs	r0, r5
 801edd0:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801edd2:	3901      	subs	r1, #1
 801edd4:	3050      	adds	r0, #80	@ 0x50
 801edd6:	9113      	str	r1, [sp, #76]	@ 0x4c
 801edd8:	f7ff ff14 	bl	801ec04 <__exponent>
 801eddc:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801edde:	0004      	movs	r4, r0
 801ede0:	1813      	adds	r3, r2, r0
 801ede2:	612b      	str	r3, [r5, #16]
 801ede4:	2a01      	cmp	r2, #1
 801ede6:	dc02      	bgt.n	801edee <_printf_float+0x16a>
 801ede8:	682a      	ldr	r2, [r5, #0]
 801edea:	07d2      	lsls	r2, r2, #31
 801edec:	d501      	bpl.n	801edf2 <_printf_float+0x16e>
 801edee:	3301      	adds	r3, #1
 801edf0:	612b      	str	r3, [r5, #16]
 801edf2:	2323      	movs	r3, #35	@ 0x23
 801edf4:	aa0a      	add	r2, sp, #40	@ 0x28
 801edf6:	189b      	adds	r3, r3, r2
 801edf8:	781b      	ldrb	r3, [r3, #0]
 801edfa:	2b00      	cmp	r3, #0
 801edfc:	d100      	bne.n	801ee00 <_printf_float+0x17c>
 801edfe:	e792      	b.n	801ed26 <_printf_float+0xa2>
 801ee00:	002b      	movs	r3, r5
 801ee02:	222d      	movs	r2, #45	@ 0x2d
 801ee04:	3343      	adds	r3, #67	@ 0x43
 801ee06:	701a      	strb	r2, [r3, #0]
 801ee08:	e78d      	b.n	801ed26 <_printf_float+0xa2>
 801ee0a:	2c47      	cmp	r4, #71	@ 0x47
 801ee0c:	d1b8      	bne.n	801ed80 <_printf_float+0xfc>
 801ee0e:	2b00      	cmp	r3, #0
 801ee10:	d1b6      	bne.n	801ed80 <_printf_float+0xfc>
 801ee12:	3301      	adds	r3, #1
 801ee14:	e7b3      	b.n	801ed7e <_printf_float+0xfa>
 801ee16:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801ee18:	0011      	movs	r1, r2
 801ee1a:	2b65      	cmp	r3, #101	@ 0x65
 801ee1c:	d9d7      	bls.n	801edce <_printf_float+0x14a>
 801ee1e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801ee20:	2b66      	cmp	r3, #102	@ 0x66
 801ee22:	d11a      	bne.n	801ee5a <_printf_float+0x1d6>
 801ee24:	686b      	ldr	r3, [r5, #4]
 801ee26:	2a00      	cmp	r2, #0
 801ee28:	dd09      	ble.n	801ee3e <_printf_float+0x1ba>
 801ee2a:	612a      	str	r2, [r5, #16]
 801ee2c:	2b00      	cmp	r3, #0
 801ee2e:	d102      	bne.n	801ee36 <_printf_float+0x1b2>
 801ee30:	6829      	ldr	r1, [r5, #0]
 801ee32:	07c9      	lsls	r1, r1, #31
 801ee34:	d50b      	bpl.n	801ee4e <_printf_float+0x1ca>
 801ee36:	3301      	adds	r3, #1
 801ee38:	189b      	adds	r3, r3, r2
 801ee3a:	612b      	str	r3, [r5, #16]
 801ee3c:	e007      	b.n	801ee4e <_printf_float+0x1ca>
 801ee3e:	2b00      	cmp	r3, #0
 801ee40:	d103      	bne.n	801ee4a <_printf_float+0x1c6>
 801ee42:	2201      	movs	r2, #1
 801ee44:	6829      	ldr	r1, [r5, #0]
 801ee46:	4211      	tst	r1, r2
 801ee48:	d000      	beq.n	801ee4c <_printf_float+0x1c8>
 801ee4a:	1c9a      	adds	r2, r3, #2
 801ee4c:	612a      	str	r2, [r5, #16]
 801ee4e:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801ee50:	2400      	movs	r4, #0
 801ee52:	65ab      	str	r3, [r5, #88]	@ 0x58
 801ee54:	e7cd      	b.n	801edf2 <_printf_float+0x16e>
 801ee56:	2367      	movs	r3, #103	@ 0x67
 801ee58:	930c      	str	r3, [sp, #48]	@ 0x30
 801ee5a:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 801ee5c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801ee5e:	4299      	cmp	r1, r3
 801ee60:	db06      	blt.n	801ee70 <_printf_float+0x1ec>
 801ee62:	682b      	ldr	r3, [r5, #0]
 801ee64:	6129      	str	r1, [r5, #16]
 801ee66:	07db      	lsls	r3, r3, #31
 801ee68:	d5f1      	bpl.n	801ee4e <_printf_float+0x1ca>
 801ee6a:	3101      	adds	r1, #1
 801ee6c:	6129      	str	r1, [r5, #16]
 801ee6e:	e7ee      	b.n	801ee4e <_printf_float+0x1ca>
 801ee70:	2201      	movs	r2, #1
 801ee72:	2900      	cmp	r1, #0
 801ee74:	dce0      	bgt.n	801ee38 <_printf_float+0x1b4>
 801ee76:	1892      	adds	r2, r2, r2
 801ee78:	1a52      	subs	r2, r2, r1
 801ee7a:	e7dd      	b.n	801ee38 <_printf_float+0x1b4>
 801ee7c:	682a      	ldr	r2, [r5, #0]
 801ee7e:	0553      	lsls	r3, r2, #21
 801ee80:	d408      	bmi.n	801ee94 <_printf_float+0x210>
 801ee82:	692b      	ldr	r3, [r5, #16]
 801ee84:	003a      	movs	r2, r7
 801ee86:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801ee88:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801ee8a:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801ee8c:	47a0      	blx	r4
 801ee8e:	3001      	adds	r0, #1
 801ee90:	d129      	bne.n	801eee6 <_printf_float+0x262>
 801ee92:	e753      	b.n	801ed3c <_printf_float+0xb8>
 801ee94:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801ee96:	2b65      	cmp	r3, #101	@ 0x65
 801ee98:	d800      	bhi.n	801ee9c <_printf_float+0x218>
 801ee9a:	e0da      	b.n	801f052 <_printf_float+0x3ce>
 801ee9c:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 801ee9e:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 801eea0:	2200      	movs	r2, #0
 801eea2:	2300      	movs	r3, #0
 801eea4:	f7e1 fb04 	bl	80004b0 <__aeabi_dcmpeq>
 801eea8:	2800      	cmp	r0, #0
 801eeaa:	d033      	beq.n	801ef14 <_printf_float+0x290>
 801eeac:	2301      	movs	r3, #1
 801eeae:	4a37      	ldr	r2, [pc, #220]	@ (801ef8c <_printf_float+0x308>)
 801eeb0:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801eeb2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801eeb4:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801eeb6:	47a0      	blx	r4
 801eeb8:	3001      	adds	r0, #1
 801eeba:	d100      	bne.n	801eebe <_printf_float+0x23a>
 801eebc:	e73e      	b.n	801ed3c <_printf_float+0xb8>
 801eebe:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 801eec0:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801eec2:	42b3      	cmp	r3, r6
 801eec4:	db02      	blt.n	801eecc <_printf_float+0x248>
 801eec6:	682b      	ldr	r3, [r5, #0]
 801eec8:	07db      	lsls	r3, r3, #31
 801eeca:	d50c      	bpl.n	801eee6 <_printf_float+0x262>
 801eecc:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801eece:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801eed0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801eed2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801eed4:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801eed6:	47a0      	blx	r4
 801eed8:	2400      	movs	r4, #0
 801eeda:	3001      	adds	r0, #1
 801eedc:	d100      	bne.n	801eee0 <_printf_float+0x25c>
 801eede:	e72d      	b.n	801ed3c <_printf_float+0xb8>
 801eee0:	1e73      	subs	r3, r6, #1
 801eee2:	42a3      	cmp	r3, r4
 801eee4:	dc0a      	bgt.n	801eefc <_printf_float+0x278>
 801eee6:	682b      	ldr	r3, [r5, #0]
 801eee8:	079b      	lsls	r3, r3, #30
 801eeea:	d500      	bpl.n	801eeee <_printf_float+0x26a>
 801eeec:	e105      	b.n	801f0fa <_printf_float+0x476>
 801eeee:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801eef0:	68e8      	ldr	r0, [r5, #12]
 801eef2:	4298      	cmp	r0, r3
 801eef4:	db00      	blt.n	801eef8 <_printf_float+0x274>
 801eef6:	e723      	b.n	801ed40 <_printf_float+0xbc>
 801eef8:	0018      	movs	r0, r3
 801eefa:	e721      	b.n	801ed40 <_printf_float+0xbc>
 801eefc:	002a      	movs	r2, r5
 801eefe:	2301      	movs	r3, #1
 801ef00:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801ef02:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801ef04:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 801ef06:	321a      	adds	r2, #26
 801ef08:	47b8      	blx	r7
 801ef0a:	3001      	adds	r0, #1
 801ef0c:	d100      	bne.n	801ef10 <_printf_float+0x28c>
 801ef0e:	e715      	b.n	801ed3c <_printf_float+0xb8>
 801ef10:	3401      	adds	r4, #1
 801ef12:	e7e5      	b.n	801eee0 <_printf_float+0x25c>
 801ef14:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801ef16:	2b00      	cmp	r3, #0
 801ef18:	dc3a      	bgt.n	801ef90 <_printf_float+0x30c>
 801ef1a:	2301      	movs	r3, #1
 801ef1c:	4a1b      	ldr	r2, [pc, #108]	@ (801ef8c <_printf_float+0x308>)
 801ef1e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801ef20:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801ef22:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801ef24:	47a0      	blx	r4
 801ef26:	3001      	adds	r0, #1
 801ef28:	d100      	bne.n	801ef2c <_printf_float+0x2a8>
 801ef2a:	e707      	b.n	801ed3c <_printf_float+0xb8>
 801ef2c:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 801ef2e:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801ef30:	4333      	orrs	r3, r6
 801ef32:	d102      	bne.n	801ef3a <_printf_float+0x2b6>
 801ef34:	682b      	ldr	r3, [r5, #0]
 801ef36:	07db      	lsls	r3, r3, #31
 801ef38:	d5d5      	bpl.n	801eee6 <_printf_float+0x262>
 801ef3a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801ef3c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801ef3e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801ef40:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801ef42:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801ef44:	47a0      	blx	r4
 801ef46:	2300      	movs	r3, #0
 801ef48:	3001      	adds	r0, #1
 801ef4a:	d100      	bne.n	801ef4e <_printf_float+0x2ca>
 801ef4c:	e6f6      	b.n	801ed3c <_printf_float+0xb8>
 801ef4e:	930c      	str	r3, [sp, #48]	@ 0x30
 801ef50:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801ef52:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801ef54:	425b      	negs	r3, r3
 801ef56:	4293      	cmp	r3, r2
 801ef58:	dc01      	bgt.n	801ef5e <_printf_float+0x2da>
 801ef5a:	0033      	movs	r3, r6
 801ef5c:	e792      	b.n	801ee84 <_printf_float+0x200>
 801ef5e:	002a      	movs	r2, r5
 801ef60:	2301      	movs	r3, #1
 801ef62:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801ef64:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801ef66:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801ef68:	321a      	adds	r2, #26
 801ef6a:	47a0      	blx	r4
 801ef6c:	3001      	adds	r0, #1
 801ef6e:	d100      	bne.n	801ef72 <_printf_float+0x2ee>
 801ef70:	e6e4      	b.n	801ed3c <_printf_float+0xb8>
 801ef72:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801ef74:	3301      	adds	r3, #1
 801ef76:	e7ea      	b.n	801ef4e <_printf_float+0x2ca>
 801ef78:	7fefffff 	.word	0x7fefffff
 801ef7c:	08025111 	.word	0x08025111
 801ef80:	08025115 	.word	0x08025115
 801ef84:	08025119 	.word	0x08025119
 801ef88:	0802511d 	.word	0x0802511d
 801ef8c:	08025121 	.word	0x08025121
 801ef90:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801ef92:	6dae      	ldr	r6, [r5, #88]	@ 0x58
 801ef94:	930c      	str	r3, [sp, #48]	@ 0x30
 801ef96:	429e      	cmp	r6, r3
 801ef98:	dd00      	ble.n	801ef9c <_printf_float+0x318>
 801ef9a:	001e      	movs	r6, r3
 801ef9c:	2e00      	cmp	r6, #0
 801ef9e:	dc31      	bgt.n	801f004 <_printf_float+0x380>
 801efa0:	43f3      	mvns	r3, r6
 801efa2:	2400      	movs	r4, #0
 801efa4:	17db      	asrs	r3, r3, #31
 801efa6:	4033      	ands	r3, r6
 801efa8:	930e      	str	r3, [sp, #56]	@ 0x38
 801efaa:	6dae      	ldr	r6, [r5, #88]	@ 0x58
 801efac:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801efae:	1af3      	subs	r3, r6, r3
 801efb0:	42a3      	cmp	r3, r4
 801efb2:	dc30      	bgt.n	801f016 <_printf_float+0x392>
 801efb4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801efb6:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801efb8:	429a      	cmp	r2, r3
 801efba:	dc38      	bgt.n	801f02e <_printf_float+0x3aa>
 801efbc:	682b      	ldr	r3, [r5, #0]
 801efbe:	07db      	lsls	r3, r3, #31
 801efc0:	d435      	bmi.n	801f02e <_printf_float+0x3aa>
 801efc2:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801efc4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801efc6:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801efc8:	1b9b      	subs	r3, r3, r6
 801efca:	1b14      	subs	r4, r2, r4
 801efcc:	429c      	cmp	r4, r3
 801efce:	dd00      	ble.n	801efd2 <_printf_float+0x34e>
 801efd0:	001c      	movs	r4, r3
 801efd2:	2c00      	cmp	r4, #0
 801efd4:	dc34      	bgt.n	801f040 <_printf_float+0x3bc>
 801efd6:	43e3      	mvns	r3, r4
 801efd8:	2600      	movs	r6, #0
 801efda:	17db      	asrs	r3, r3, #31
 801efdc:	401c      	ands	r4, r3
 801efde:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801efe0:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801efe2:	1ad3      	subs	r3, r2, r3
 801efe4:	1b1b      	subs	r3, r3, r4
 801efe6:	42b3      	cmp	r3, r6
 801efe8:	dc00      	bgt.n	801efec <_printf_float+0x368>
 801efea:	e77c      	b.n	801eee6 <_printf_float+0x262>
 801efec:	002a      	movs	r2, r5
 801efee:	2301      	movs	r3, #1
 801eff0:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801eff2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801eff4:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 801eff6:	321a      	adds	r2, #26
 801eff8:	47b8      	blx	r7
 801effa:	3001      	adds	r0, #1
 801effc:	d100      	bne.n	801f000 <_printf_float+0x37c>
 801effe:	e69d      	b.n	801ed3c <_printf_float+0xb8>
 801f000:	3601      	adds	r6, #1
 801f002:	e7ec      	b.n	801efde <_printf_float+0x35a>
 801f004:	0033      	movs	r3, r6
 801f006:	003a      	movs	r2, r7
 801f008:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801f00a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801f00c:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801f00e:	47a0      	blx	r4
 801f010:	3001      	adds	r0, #1
 801f012:	d1c5      	bne.n	801efa0 <_printf_float+0x31c>
 801f014:	e692      	b.n	801ed3c <_printf_float+0xb8>
 801f016:	002a      	movs	r2, r5
 801f018:	2301      	movs	r3, #1
 801f01a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801f01c:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801f01e:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 801f020:	321a      	adds	r2, #26
 801f022:	47b0      	blx	r6
 801f024:	3001      	adds	r0, #1
 801f026:	d100      	bne.n	801f02a <_printf_float+0x3a6>
 801f028:	e688      	b.n	801ed3c <_printf_float+0xb8>
 801f02a:	3401      	adds	r4, #1
 801f02c:	e7bd      	b.n	801efaa <_printf_float+0x326>
 801f02e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801f030:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801f032:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801f034:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801f036:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801f038:	47a0      	blx	r4
 801f03a:	3001      	adds	r0, #1
 801f03c:	d1c1      	bne.n	801efc2 <_printf_float+0x33e>
 801f03e:	e67d      	b.n	801ed3c <_printf_float+0xb8>
 801f040:	19ba      	adds	r2, r7, r6
 801f042:	0023      	movs	r3, r4
 801f044:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801f046:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801f048:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 801f04a:	47b0      	blx	r6
 801f04c:	3001      	adds	r0, #1
 801f04e:	d1c2      	bne.n	801efd6 <_printf_float+0x352>
 801f050:	e674      	b.n	801ed3c <_printf_float+0xb8>
 801f052:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801f054:	930c      	str	r3, [sp, #48]	@ 0x30
 801f056:	2b01      	cmp	r3, #1
 801f058:	dc02      	bgt.n	801f060 <_printf_float+0x3dc>
 801f05a:	2301      	movs	r3, #1
 801f05c:	421a      	tst	r2, r3
 801f05e:	d039      	beq.n	801f0d4 <_printf_float+0x450>
 801f060:	2301      	movs	r3, #1
 801f062:	003a      	movs	r2, r7
 801f064:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801f066:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801f068:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 801f06a:	47b0      	blx	r6
 801f06c:	3001      	adds	r0, #1
 801f06e:	d100      	bne.n	801f072 <_printf_float+0x3ee>
 801f070:	e664      	b.n	801ed3c <_printf_float+0xb8>
 801f072:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801f074:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801f076:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801f078:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801f07a:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 801f07c:	47b0      	blx	r6
 801f07e:	3001      	adds	r0, #1
 801f080:	d100      	bne.n	801f084 <_printf_float+0x400>
 801f082:	e65b      	b.n	801ed3c <_printf_float+0xb8>
 801f084:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 801f086:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 801f088:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801f08a:	2200      	movs	r2, #0
 801f08c:	3b01      	subs	r3, #1
 801f08e:	930c      	str	r3, [sp, #48]	@ 0x30
 801f090:	2300      	movs	r3, #0
 801f092:	f7e1 fa0d 	bl	80004b0 <__aeabi_dcmpeq>
 801f096:	2800      	cmp	r0, #0
 801f098:	d11a      	bne.n	801f0d0 <_printf_float+0x44c>
 801f09a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801f09c:	1c7a      	adds	r2, r7, #1
 801f09e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801f0a0:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801f0a2:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 801f0a4:	47b0      	blx	r6
 801f0a6:	3001      	adds	r0, #1
 801f0a8:	d10e      	bne.n	801f0c8 <_printf_float+0x444>
 801f0aa:	e647      	b.n	801ed3c <_printf_float+0xb8>
 801f0ac:	002a      	movs	r2, r5
 801f0ae:	2301      	movs	r3, #1
 801f0b0:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801f0b2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801f0b4:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 801f0b6:	321a      	adds	r2, #26
 801f0b8:	47b8      	blx	r7
 801f0ba:	3001      	adds	r0, #1
 801f0bc:	d100      	bne.n	801f0c0 <_printf_float+0x43c>
 801f0be:	e63d      	b.n	801ed3c <_printf_float+0xb8>
 801f0c0:	3601      	adds	r6, #1
 801f0c2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801f0c4:	429e      	cmp	r6, r3
 801f0c6:	dbf1      	blt.n	801f0ac <_printf_float+0x428>
 801f0c8:	002a      	movs	r2, r5
 801f0ca:	0023      	movs	r3, r4
 801f0cc:	3250      	adds	r2, #80	@ 0x50
 801f0ce:	e6da      	b.n	801ee86 <_printf_float+0x202>
 801f0d0:	2600      	movs	r6, #0
 801f0d2:	e7f6      	b.n	801f0c2 <_printf_float+0x43e>
 801f0d4:	003a      	movs	r2, r7
 801f0d6:	e7e2      	b.n	801f09e <_printf_float+0x41a>
 801f0d8:	002a      	movs	r2, r5
 801f0da:	2301      	movs	r3, #1
 801f0dc:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801f0de:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801f0e0:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 801f0e2:	3219      	adds	r2, #25
 801f0e4:	47b0      	blx	r6
 801f0e6:	3001      	adds	r0, #1
 801f0e8:	d100      	bne.n	801f0ec <_printf_float+0x468>
 801f0ea:	e627      	b.n	801ed3c <_printf_float+0xb8>
 801f0ec:	3401      	adds	r4, #1
 801f0ee:	68eb      	ldr	r3, [r5, #12]
 801f0f0:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 801f0f2:	1a9b      	subs	r3, r3, r2
 801f0f4:	42a3      	cmp	r3, r4
 801f0f6:	dcef      	bgt.n	801f0d8 <_printf_float+0x454>
 801f0f8:	e6f9      	b.n	801eeee <_printf_float+0x26a>
 801f0fa:	2400      	movs	r4, #0
 801f0fc:	e7f7      	b.n	801f0ee <_printf_float+0x46a>
 801f0fe:	46c0      	nop			@ (mov r8, r8)

0801f100 <_printf_common>:
 801f100:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801f102:	0016      	movs	r6, r2
 801f104:	9301      	str	r3, [sp, #4]
 801f106:	688a      	ldr	r2, [r1, #8]
 801f108:	690b      	ldr	r3, [r1, #16]
 801f10a:	000c      	movs	r4, r1
 801f10c:	9000      	str	r0, [sp, #0]
 801f10e:	4293      	cmp	r3, r2
 801f110:	da00      	bge.n	801f114 <_printf_common+0x14>
 801f112:	0013      	movs	r3, r2
 801f114:	0022      	movs	r2, r4
 801f116:	6033      	str	r3, [r6, #0]
 801f118:	3243      	adds	r2, #67	@ 0x43
 801f11a:	7812      	ldrb	r2, [r2, #0]
 801f11c:	2a00      	cmp	r2, #0
 801f11e:	d001      	beq.n	801f124 <_printf_common+0x24>
 801f120:	3301      	adds	r3, #1
 801f122:	6033      	str	r3, [r6, #0]
 801f124:	6823      	ldr	r3, [r4, #0]
 801f126:	069b      	lsls	r3, r3, #26
 801f128:	d502      	bpl.n	801f130 <_printf_common+0x30>
 801f12a:	6833      	ldr	r3, [r6, #0]
 801f12c:	3302      	adds	r3, #2
 801f12e:	6033      	str	r3, [r6, #0]
 801f130:	6822      	ldr	r2, [r4, #0]
 801f132:	2306      	movs	r3, #6
 801f134:	0015      	movs	r5, r2
 801f136:	401d      	ands	r5, r3
 801f138:	421a      	tst	r2, r3
 801f13a:	d027      	beq.n	801f18c <_printf_common+0x8c>
 801f13c:	0023      	movs	r3, r4
 801f13e:	3343      	adds	r3, #67	@ 0x43
 801f140:	781b      	ldrb	r3, [r3, #0]
 801f142:	1e5a      	subs	r2, r3, #1
 801f144:	4193      	sbcs	r3, r2
 801f146:	6822      	ldr	r2, [r4, #0]
 801f148:	0692      	lsls	r2, r2, #26
 801f14a:	d430      	bmi.n	801f1ae <_printf_common+0xae>
 801f14c:	0022      	movs	r2, r4
 801f14e:	9901      	ldr	r1, [sp, #4]
 801f150:	9800      	ldr	r0, [sp, #0]
 801f152:	9d08      	ldr	r5, [sp, #32]
 801f154:	3243      	adds	r2, #67	@ 0x43
 801f156:	47a8      	blx	r5
 801f158:	3001      	adds	r0, #1
 801f15a:	d025      	beq.n	801f1a8 <_printf_common+0xa8>
 801f15c:	2206      	movs	r2, #6
 801f15e:	6823      	ldr	r3, [r4, #0]
 801f160:	2500      	movs	r5, #0
 801f162:	4013      	ands	r3, r2
 801f164:	2b04      	cmp	r3, #4
 801f166:	d105      	bne.n	801f174 <_printf_common+0x74>
 801f168:	6833      	ldr	r3, [r6, #0]
 801f16a:	68e5      	ldr	r5, [r4, #12]
 801f16c:	1aed      	subs	r5, r5, r3
 801f16e:	43eb      	mvns	r3, r5
 801f170:	17db      	asrs	r3, r3, #31
 801f172:	401d      	ands	r5, r3
 801f174:	68a3      	ldr	r3, [r4, #8]
 801f176:	6922      	ldr	r2, [r4, #16]
 801f178:	4293      	cmp	r3, r2
 801f17a:	dd01      	ble.n	801f180 <_printf_common+0x80>
 801f17c:	1a9b      	subs	r3, r3, r2
 801f17e:	18ed      	adds	r5, r5, r3
 801f180:	2600      	movs	r6, #0
 801f182:	42b5      	cmp	r5, r6
 801f184:	d120      	bne.n	801f1c8 <_printf_common+0xc8>
 801f186:	2000      	movs	r0, #0
 801f188:	e010      	b.n	801f1ac <_printf_common+0xac>
 801f18a:	3501      	adds	r5, #1
 801f18c:	68e3      	ldr	r3, [r4, #12]
 801f18e:	6832      	ldr	r2, [r6, #0]
 801f190:	1a9b      	subs	r3, r3, r2
 801f192:	42ab      	cmp	r3, r5
 801f194:	ddd2      	ble.n	801f13c <_printf_common+0x3c>
 801f196:	0022      	movs	r2, r4
 801f198:	2301      	movs	r3, #1
 801f19a:	9901      	ldr	r1, [sp, #4]
 801f19c:	9800      	ldr	r0, [sp, #0]
 801f19e:	9f08      	ldr	r7, [sp, #32]
 801f1a0:	3219      	adds	r2, #25
 801f1a2:	47b8      	blx	r7
 801f1a4:	3001      	adds	r0, #1
 801f1a6:	d1f0      	bne.n	801f18a <_printf_common+0x8a>
 801f1a8:	2001      	movs	r0, #1
 801f1aa:	4240      	negs	r0, r0
 801f1ac:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 801f1ae:	2030      	movs	r0, #48	@ 0x30
 801f1b0:	18e1      	adds	r1, r4, r3
 801f1b2:	3143      	adds	r1, #67	@ 0x43
 801f1b4:	7008      	strb	r0, [r1, #0]
 801f1b6:	0021      	movs	r1, r4
 801f1b8:	1c5a      	adds	r2, r3, #1
 801f1ba:	3145      	adds	r1, #69	@ 0x45
 801f1bc:	7809      	ldrb	r1, [r1, #0]
 801f1be:	18a2      	adds	r2, r4, r2
 801f1c0:	3243      	adds	r2, #67	@ 0x43
 801f1c2:	3302      	adds	r3, #2
 801f1c4:	7011      	strb	r1, [r2, #0]
 801f1c6:	e7c1      	b.n	801f14c <_printf_common+0x4c>
 801f1c8:	0022      	movs	r2, r4
 801f1ca:	2301      	movs	r3, #1
 801f1cc:	9901      	ldr	r1, [sp, #4]
 801f1ce:	9800      	ldr	r0, [sp, #0]
 801f1d0:	9f08      	ldr	r7, [sp, #32]
 801f1d2:	321a      	adds	r2, #26
 801f1d4:	47b8      	blx	r7
 801f1d6:	3001      	adds	r0, #1
 801f1d8:	d0e6      	beq.n	801f1a8 <_printf_common+0xa8>
 801f1da:	3601      	adds	r6, #1
 801f1dc:	e7d1      	b.n	801f182 <_printf_common+0x82>
	...

0801f1e0 <_printf_i>:
 801f1e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 801f1e2:	b08b      	sub	sp, #44	@ 0x2c
 801f1e4:	9206      	str	r2, [sp, #24]
 801f1e6:	000a      	movs	r2, r1
 801f1e8:	3243      	adds	r2, #67	@ 0x43
 801f1ea:	9307      	str	r3, [sp, #28]
 801f1ec:	9005      	str	r0, [sp, #20]
 801f1ee:	9203      	str	r2, [sp, #12]
 801f1f0:	7e0a      	ldrb	r2, [r1, #24]
 801f1f2:	000c      	movs	r4, r1
 801f1f4:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801f1f6:	2a78      	cmp	r2, #120	@ 0x78
 801f1f8:	d809      	bhi.n	801f20e <_printf_i+0x2e>
 801f1fa:	2a62      	cmp	r2, #98	@ 0x62
 801f1fc:	d80b      	bhi.n	801f216 <_printf_i+0x36>
 801f1fe:	2a00      	cmp	r2, #0
 801f200:	d100      	bne.n	801f204 <_printf_i+0x24>
 801f202:	e0bc      	b.n	801f37e <_printf_i+0x19e>
 801f204:	497b      	ldr	r1, [pc, #492]	@ (801f3f4 <_printf_i+0x214>)
 801f206:	9104      	str	r1, [sp, #16]
 801f208:	2a58      	cmp	r2, #88	@ 0x58
 801f20a:	d100      	bne.n	801f20e <_printf_i+0x2e>
 801f20c:	e090      	b.n	801f330 <_printf_i+0x150>
 801f20e:	0025      	movs	r5, r4
 801f210:	3542      	adds	r5, #66	@ 0x42
 801f212:	702a      	strb	r2, [r5, #0]
 801f214:	e022      	b.n	801f25c <_printf_i+0x7c>
 801f216:	0010      	movs	r0, r2
 801f218:	3863      	subs	r0, #99	@ 0x63
 801f21a:	2815      	cmp	r0, #21
 801f21c:	d8f7      	bhi.n	801f20e <_printf_i+0x2e>
 801f21e:	f7e0 ffb7 	bl	8000190 <__gnu_thumb1_case_shi>
 801f222:	0016      	.short	0x0016
 801f224:	fff6001f 	.word	0xfff6001f
 801f228:	fff6fff6 	.word	0xfff6fff6
 801f22c:	001ffff6 	.word	0x001ffff6
 801f230:	fff6fff6 	.word	0xfff6fff6
 801f234:	fff6fff6 	.word	0xfff6fff6
 801f238:	003600a1 	.word	0x003600a1
 801f23c:	fff60080 	.word	0xfff60080
 801f240:	00b2fff6 	.word	0x00b2fff6
 801f244:	0036fff6 	.word	0x0036fff6
 801f248:	fff6fff6 	.word	0xfff6fff6
 801f24c:	0084      	.short	0x0084
 801f24e:	0025      	movs	r5, r4
 801f250:	681a      	ldr	r2, [r3, #0]
 801f252:	3542      	adds	r5, #66	@ 0x42
 801f254:	1d11      	adds	r1, r2, #4
 801f256:	6019      	str	r1, [r3, #0]
 801f258:	6813      	ldr	r3, [r2, #0]
 801f25a:	702b      	strb	r3, [r5, #0]
 801f25c:	2301      	movs	r3, #1
 801f25e:	e0a0      	b.n	801f3a2 <_printf_i+0x1c2>
 801f260:	6818      	ldr	r0, [r3, #0]
 801f262:	6809      	ldr	r1, [r1, #0]
 801f264:	1d02      	adds	r2, r0, #4
 801f266:	060d      	lsls	r5, r1, #24
 801f268:	d50b      	bpl.n	801f282 <_printf_i+0xa2>
 801f26a:	6806      	ldr	r6, [r0, #0]
 801f26c:	601a      	str	r2, [r3, #0]
 801f26e:	2e00      	cmp	r6, #0
 801f270:	da03      	bge.n	801f27a <_printf_i+0x9a>
 801f272:	232d      	movs	r3, #45	@ 0x2d
 801f274:	9a03      	ldr	r2, [sp, #12]
 801f276:	4276      	negs	r6, r6
 801f278:	7013      	strb	r3, [r2, #0]
 801f27a:	4b5e      	ldr	r3, [pc, #376]	@ (801f3f4 <_printf_i+0x214>)
 801f27c:	270a      	movs	r7, #10
 801f27e:	9304      	str	r3, [sp, #16]
 801f280:	e018      	b.n	801f2b4 <_printf_i+0xd4>
 801f282:	6806      	ldr	r6, [r0, #0]
 801f284:	601a      	str	r2, [r3, #0]
 801f286:	0649      	lsls	r1, r1, #25
 801f288:	d5f1      	bpl.n	801f26e <_printf_i+0x8e>
 801f28a:	b236      	sxth	r6, r6
 801f28c:	e7ef      	b.n	801f26e <_printf_i+0x8e>
 801f28e:	6808      	ldr	r0, [r1, #0]
 801f290:	6819      	ldr	r1, [r3, #0]
 801f292:	c940      	ldmia	r1!, {r6}
 801f294:	0605      	lsls	r5, r0, #24
 801f296:	d402      	bmi.n	801f29e <_printf_i+0xbe>
 801f298:	0640      	lsls	r0, r0, #25
 801f29a:	d500      	bpl.n	801f29e <_printf_i+0xbe>
 801f29c:	b2b6      	uxth	r6, r6
 801f29e:	6019      	str	r1, [r3, #0]
 801f2a0:	4b54      	ldr	r3, [pc, #336]	@ (801f3f4 <_printf_i+0x214>)
 801f2a2:	270a      	movs	r7, #10
 801f2a4:	9304      	str	r3, [sp, #16]
 801f2a6:	2a6f      	cmp	r2, #111	@ 0x6f
 801f2a8:	d100      	bne.n	801f2ac <_printf_i+0xcc>
 801f2aa:	3f02      	subs	r7, #2
 801f2ac:	0023      	movs	r3, r4
 801f2ae:	2200      	movs	r2, #0
 801f2b0:	3343      	adds	r3, #67	@ 0x43
 801f2b2:	701a      	strb	r2, [r3, #0]
 801f2b4:	6863      	ldr	r3, [r4, #4]
 801f2b6:	60a3      	str	r3, [r4, #8]
 801f2b8:	2b00      	cmp	r3, #0
 801f2ba:	db03      	blt.n	801f2c4 <_printf_i+0xe4>
 801f2bc:	2104      	movs	r1, #4
 801f2be:	6822      	ldr	r2, [r4, #0]
 801f2c0:	438a      	bics	r2, r1
 801f2c2:	6022      	str	r2, [r4, #0]
 801f2c4:	2e00      	cmp	r6, #0
 801f2c6:	d102      	bne.n	801f2ce <_printf_i+0xee>
 801f2c8:	9d03      	ldr	r5, [sp, #12]
 801f2ca:	2b00      	cmp	r3, #0
 801f2cc:	d00c      	beq.n	801f2e8 <_printf_i+0x108>
 801f2ce:	9d03      	ldr	r5, [sp, #12]
 801f2d0:	0030      	movs	r0, r6
 801f2d2:	0039      	movs	r1, r7
 801f2d4:	f7e0 ffec 	bl	80002b0 <__aeabi_uidivmod>
 801f2d8:	9b04      	ldr	r3, [sp, #16]
 801f2da:	3d01      	subs	r5, #1
 801f2dc:	5c5b      	ldrb	r3, [r3, r1]
 801f2de:	702b      	strb	r3, [r5, #0]
 801f2e0:	0033      	movs	r3, r6
 801f2e2:	0006      	movs	r6, r0
 801f2e4:	429f      	cmp	r7, r3
 801f2e6:	d9f3      	bls.n	801f2d0 <_printf_i+0xf0>
 801f2e8:	2f08      	cmp	r7, #8
 801f2ea:	d109      	bne.n	801f300 <_printf_i+0x120>
 801f2ec:	6823      	ldr	r3, [r4, #0]
 801f2ee:	07db      	lsls	r3, r3, #31
 801f2f0:	d506      	bpl.n	801f300 <_printf_i+0x120>
 801f2f2:	6862      	ldr	r2, [r4, #4]
 801f2f4:	6923      	ldr	r3, [r4, #16]
 801f2f6:	429a      	cmp	r2, r3
 801f2f8:	dc02      	bgt.n	801f300 <_printf_i+0x120>
 801f2fa:	2330      	movs	r3, #48	@ 0x30
 801f2fc:	3d01      	subs	r5, #1
 801f2fe:	702b      	strb	r3, [r5, #0]
 801f300:	9b03      	ldr	r3, [sp, #12]
 801f302:	1b5b      	subs	r3, r3, r5
 801f304:	6123      	str	r3, [r4, #16]
 801f306:	9b07      	ldr	r3, [sp, #28]
 801f308:	0021      	movs	r1, r4
 801f30a:	9300      	str	r3, [sp, #0]
 801f30c:	9805      	ldr	r0, [sp, #20]
 801f30e:	9b06      	ldr	r3, [sp, #24]
 801f310:	aa09      	add	r2, sp, #36	@ 0x24
 801f312:	f7ff fef5 	bl	801f100 <_printf_common>
 801f316:	3001      	adds	r0, #1
 801f318:	d148      	bne.n	801f3ac <_printf_i+0x1cc>
 801f31a:	2001      	movs	r0, #1
 801f31c:	4240      	negs	r0, r0
 801f31e:	b00b      	add	sp, #44	@ 0x2c
 801f320:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801f322:	2220      	movs	r2, #32
 801f324:	6809      	ldr	r1, [r1, #0]
 801f326:	430a      	orrs	r2, r1
 801f328:	6022      	str	r2, [r4, #0]
 801f32a:	2278      	movs	r2, #120	@ 0x78
 801f32c:	4932      	ldr	r1, [pc, #200]	@ (801f3f8 <_printf_i+0x218>)
 801f32e:	9104      	str	r1, [sp, #16]
 801f330:	0021      	movs	r1, r4
 801f332:	3145      	adds	r1, #69	@ 0x45
 801f334:	700a      	strb	r2, [r1, #0]
 801f336:	6819      	ldr	r1, [r3, #0]
 801f338:	6822      	ldr	r2, [r4, #0]
 801f33a:	c940      	ldmia	r1!, {r6}
 801f33c:	0610      	lsls	r0, r2, #24
 801f33e:	d402      	bmi.n	801f346 <_printf_i+0x166>
 801f340:	0650      	lsls	r0, r2, #25
 801f342:	d500      	bpl.n	801f346 <_printf_i+0x166>
 801f344:	b2b6      	uxth	r6, r6
 801f346:	6019      	str	r1, [r3, #0]
 801f348:	07d3      	lsls	r3, r2, #31
 801f34a:	d502      	bpl.n	801f352 <_printf_i+0x172>
 801f34c:	2320      	movs	r3, #32
 801f34e:	4313      	orrs	r3, r2
 801f350:	6023      	str	r3, [r4, #0]
 801f352:	2e00      	cmp	r6, #0
 801f354:	d001      	beq.n	801f35a <_printf_i+0x17a>
 801f356:	2710      	movs	r7, #16
 801f358:	e7a8      	b.n	801f2ac <_printf_i+0xcc>
 801f35a:	2220      	movs	r2, #32
 801f35c:	6823      	ldr	r3, [r4, #0]
 801f35e:	4393      	bics	r3, r2
 801f360:	6023      	str	r3, [r4, #0]
 801f362:	e7f8      	b.n	801f356 <_printf_i+0x176>
 801f364:	681a      	ldr	r2, [r3, #0]
 801f366:	680d      	ldr	r5, [r1, #0]
 801f368:	1d10      	adds	r0, r2, #4
 801f36a:	6949      	ldr	r1, [r1, #20]
 801f36c:	6018      	str	r0, [r3, #0]
 801f36e:	6813      	ldr	r3, [r2, #0]
 801f370:	062e      	lsls	r6, r5, #24
 801f372:	d501      	bpl.n	801f378 <_printf_i+0x198>
 801f374:	6019      	str	r1, [r3, #0]
 801f376:	e002      	b.n	801f37e <_printf_i+0x19e>
 801f378:	066d      	lsls	r5, r5, #25
 801f37a:	d5fb      	bpl.n	801f374 <_printf_i+0x194>
 801f37c:	8019      	strh	r1, [r3, #0]
 801f37e:	2300      	movs	r3, #0
 801f380:	9d03      	ldr	r5, [sp, #12]
 801f382:	6123      	str	r3, [r4, #16]
 801f384:	e7bf      	b.n	801f306 <_printf_i+0x126>
 801f386:	681a      	ldr	r2, [r3, #0]
 801f388:	1d11      	adds	r1, r2, #4
 801f38a:	6019      	str	r1, [r3, #0]
 801f38c:	6815      	ldr	r5, [r2, #0]
 801f38e:	2100      	movs	r1, #0
 801f390:	0028      	movs	r0, r5
 801f392:	6862      	ldr	r2, [r4, #4]
 801f394:	f000 fb7b 	bl	801fa8e <memchr>
 801f398:	2800      	cmp	r0, #0
 801f39a:	d001      	beq.n	801f3a0 <_printf_i+0x1c0>
 801f39c:	1b40      	subs	r0, r0, r5
 801f39e:	6060      	str	r0, [r4, #4]
 801f3a0:	6863      	ldr	r3, [r4, #4]
 801f3a2:	6123      	str	r3, [r4, #16]
 801f3a4:	2300      	movs	r3, #0
 801f3a6:	9a03      	ldr	r2, [sp, #12]
 801f3a8:	7013      	strb	r3, [r2, #0]
 801f3aa:	e7ac      	b.n	801f306 <_printf_i+0x126>
 801f3ac:	002a      	movs	r2, r5
 801f3ae:	6923      	ldr	r3, [r4, #16]
 801f3b0:	9906      	ldr	r1, [sp, #24]
 801f3b2:	9805      	ldr	r0, [sp, #20]
 801f3b4:	9d07      	ldr	r5, [sp, #28]
 801f3b6:	47a8      	blx	r5
 801f3b8:	3001      	adds	r0, #1
 801f3ba:	d0ae      	beq.n	801f31a <_printf_i+0x13a>
 801f3bc:	6823      	ldr	r3, [r4, #0]
 801f3be:	079b      	lsls	r3, r3, #30
 801f3c0:	d415      	bmi.n	801f3ee <_printf_i+0x20e>
 801f3c2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801f3c4:	68e0      	ldr	r0, [r4, #12]
 801f3c6:	4298      	cmp	r0, r3
 801f3c8:	daa9      	bge.n	801f31e <_printf_i+0x13e>
 801f3ca:	0018      	movs	r0, r3
 801f3cc:	e7a7      	b.n	801f31e <_printf_i+0x13e>
 801f3ce:	0022      	movs	r2, r4
 801f3d0:	2301      	movs	r3, #1
 801f3d2:	9906      	ldr	r1, [sp, #24]
 801f3d4:	9805      	ldr	r0, [sp, #20]
 801f3d6:	9e07      	ldr	r6, [sp, #28]
 801f3d8:	3219      	adds	r2, #25
 801f3da:	47b0      	blx	r6
 801f3dc:	3001      	adds	r0, #1
 801f3de:	d09c      	beq.n	801f31a <_printf_i+0x13a>
 801f3e0:	3501      	adds	r5, #1
 801f3e2:	68e3      	ldr	r3, [r4, #12]
 801f3e4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801f3e6:	1a9b      	subs	r3, r3, r2
 801f3e8:	42ab      	cmp	r3, r5
 801f3ea:	dcf0      	bgt.n	801f3ce <_printf_i+0x1ee>
 801f3ec:	e7e9      	b.n	801f3c2 <_printf_i+0x1e2>
 801f3ee:	2500      	movs	r5, #0
 801f3f0:	e7f7      	b.n	801f3e2 <_printf_i+0x202>
 801f3f2:	46c0      	nop			@ (mov r8, r8)
 801f3f4:	08025123 	.word	0x08025123
 801f3f8:	08025134 	.word	0x08025134

0801f3fc <std>:
 801f3fc:	2300      	movs	r3, #0
 801f3fe:	b510      	push	{r4, lr}
 801f400:	0004      	movs	r4, r0
 801f402:	6003      	str	r3, [r0, #0]
 801f404:	6043      	str	r3, [r0, #4]
 801f406:	6083      	str	r3, [r0, #8]
 801f408:	8181      	strh	r1, [r0, #12]
 801f40a:	6643      	str	r3, [r0, #100]	@ 0x64
 801f40c:	81c2      	strh	r2, [r0, #14]
 801f40e:	6103      	str	r3, [r0, #16]
 801f410:	6143      	str	r3, [r0, #20]
 801f412:	6183      	str	r3, [r0, #24]
 801f414:	0019      	movs	r1, r3
 801f416:	2208      	movs	r2, #8
 801f418:	305c      	adds	r0, #92	@ 0x5c
 801f41a:	f000 fa67 	bl	801f8ec <memset>
 801f41e:	4b0b      	ldr	r3, [pc, #44]	@ (801f44c <std+0x50>)
 801f420:	6224      	str	r4, [r4, #32]
 801f422:	6263      	str	r3, [r4, #36]	@ 0x24
 801f424:	4b0a      	ldr	r3, [pc, #40]	@ (801f450 <std+0x54>)
 801f426:	62a3      	str	r3, [r4, #40]	@ 0x28
 801f428:	4b0a      	ldr	r3, [pc, #40]	@ (801f454 <std+0x58>)
 801f42a:	62e3      	str	r3, [r4, #44]	@ 0x2c
 801f42c:	4b0a      	ldr	r3, [pc, #40]	@ (801f458 <std+0x5c>)
 801f42e:	6323      	str	r3, [r4, #48]	@ 0x30
 801f430:	4b0a      	ldr	r3, [pc, #40]	@ (801f45c <std+0x60>)
 801f432:	429c      	cmp	r4, r3
 801f434:	d005      	beq.n	801f442 <std+0x46>
 801f436:	4b0a      	ldr	r3, [pc, #40]	@ (801f460 <std+0x64>)
 801f438:	429c      	cmp	r4, r3
 801f43a:	d002      	beq.n	801f442 <std+0x46>
 801f43c:	4b09      	ldr	r3, [pc, #36]	@ (801f464 <std+0x68>)
 801f43e:	429c      	cmp	r4, r3
 801f440:	d103      	bne.n	801f44a <std+0x4e>
 801f442:	0020      	movs	r0, r4
 801f444:	3058      	adds	r0, #88	@ 0x58
 801f446:	f000 fb1f 	bl	801fa88 <__retarget_lock_init_recursive>
 801f44a:	bd10      	pop	{r4, pc}
 801f44c:	0801f6a5 	.word	0x0801f6a5
 801f450:	0801f6cd 	.word	0x0801f6cd
 801f454:	0801f705 	.word	0x0801f705
 801f458:	0801f731 	.word	0x0801f731
 801f45c:	2000384c 	.word	0x2000384c
 801f460:	200038b4 	.word	0x200038b4
 801f464:	2000391c 	.word	0x2000391c

0801f468 <stdio_exit_handler>:
 801f468:	b510      	push	{r4, lr}
 801f46a:	4a03      	ldr	r2, [pc, #12]	@ (801f478 <stdio_exit_handler+0x10>)
 801f46c:	4903      	ldr	r1, [pc, #12]	@ (801f47c <stdio_exit_handler+0x14>)
 801f46e:	4804      	ldr	r0, [pc, #16]	@ (801f480 <stdio_exit_handler+0x18>)
 801f470:	f000 f86c 	bl	801f54c <_fwalk_sglue>
 801f474:	bd10      	pop	{r4, pc}
 801f476:	46c0      	nop			@ (mov r8, r8)
 801f478:	20000254 	.word	0x20000254
 801f47c:	080220ad 	.word	0x080220ad
 801f480:	200003d0 	.word	0x200003d0

0801f484 <cleanup_stdio>:
 801f484:	6841      	ldr	r1, [r0, #4]
 801f486:	4b0b      	ldr	r3, [pc, #44]	@ (801f4b4 <cleanup_stdio+0x30>)
 801f488:	b510      	push	{r4, lr}
 801f48a:	0004      	movs	r4, r0
 801f48c:	4299      	cmp	r1, r3
 801f48e:	d001      	beq.n	801f494 <cleanup_stdio+0x10>
 801f490:	f002 fe0c 	bl	80220ac <_fflush_r>
 801f494:	68a1      	ldr	r1, [r4, #8]
 801f496:	4b08      	ldr	r3, [pc, #32]	@ (801f4b8 <cleanup_stdio+0x34>)
 801f498:	4299      	cmp	r1, r3
 801f49a:	d002      	beq.n	801f4a2 <cleanup_stdio+0x1e>
 801f49c:	0020      	movs	r0, r4
 801f49e:	f002 fe05 	bl	80220ac <_fflush_r>
 801f4a2:	68e1      	ldr	r1, [r4, #12]
 801f4a4:	4b05      	ldr	r3, [pc, #20]	@ (801f4bc <cleanup_stdio+0x38>)
 801f4a6:	4299      	cmp	r1, r3
 801f4a8:	d002      	beq.n	801f4b0 <cleanup_stdio+0x2c>
 801f4aa:	0020      	movs	r0, r4
 801f4ac:	f002 fdfe 	bl	80220ac <_fflush_r>
 801f4b0:	bd10      	pop	{r4, pc}
 801f4b2:	46c0      	nop			@ (mov r8, r8)
 801f4b4:	2000384c 	.word	0x2000384c
 801f4b8:	200038b4 	.word	0x200038b4
 801f4bc:	2000391c 	.word	0x2000391c

0801f4c0 <global_stdio_init.part.0>:
 801f4c0:	b510      	push	{r4, lr}
 801f4c2:	4b09      	ldr	r3, [pc, #36]	@ (801f4e8 <global_stdio_init.part.0+0x28>)
 801f4c4:	4a09      	ldr	r2, [pc, #36]	@ (801f4ec <global_stdio_init.part.0+0x2c>)
 801f4c6:	2104      	movs	r1, #4
 801f4c8:	601a      	str	r2, [r3, #0]
 801f4ca:	4809      	ldr	r0, [pc, #36]	@ (801f4f0 <global_stdio_init.part.0+0x30>)
 801f4cc:	2200      	movs	r2, #0
 801f4ce:	f7ff ff95 	bl	801f3fc <std>
 801f4d2:	2201      	movs	r2, #1
 801f4d4:	2109      	movs	r1, #9
 801f4d6:	4807      	ldr	r0, [pc, #28]	@ (801f4f4 <global_stdio_init.part.0+0x34>)
 801f4d8:	f7ff ff90 	bl	801f3fc <std>
 801f4dc:	2202      	movs	r2, #2
 801f4de:	2112      	movs	r1, #18
 801f4e0:	4805      	ldr	r0, [pc, #20]	@ (801f4f8 <global_stdio_init.part.0+0x38>)
 801f4e2:	f7ff ff8b 	bl	801f3fc <std>
 801f4e6:	bd10      	pop	{r4, pc}
 801f4e8:	20003984 	.word	0x20003984
 801f4ec:	0801f469 	.word	0x0801f469
 801f4f0:	2000384c 	.word	0x2000384c
 801f4f4:	200038b4 	.word	0x200038b4
 801f4f8:	2000391c 	.word	0x2000391c

0801f4fc <__sfp_lock_acquire>:
 801f4fc:	b510      	push	{r4, lr}
 801f4fe:	4802      	ldr	r0, [pc, #8]	@ (801f508 <__sfp_lock_acquire+0xc>)
 801f500:	f000 fac3 	bl	801fa8a <__retarget_lock_acquire_recursive>
 801f504:	bd10      	pop	{r4, pc}
 801f506:	46c0      	nop			@ (mov r8, r8)
 801f508:	2000398d 	.word	0x2000398d

0801f50c <__sfp_lock_release>:
 801f50c:	b510      	push	{r4, lr}
 801f50e:	4802      	ldr	r0, [pc, #8]	@ (801f518 <__sfp_lock_release+0xc>)
 801f510:	f000 fabc 	bl	801fa8c <__retarget_lock_release_recursive>
 801f514:	bd10      	pop	{r4, pc}
 801f516:	46c0      	nop			@ (mov r8, r8)
 801f518:	2000398d 	.word	0x2000398d

0801f51c <__sinit>:
 801f51c:	b510      	push	{r4, lr}
 801f51e:	0004      	movs	r4, r0
 801f520:	f7ff ffec 	bl	801f4fc <__sfp_lock_acquire>
 801f524:	6a23      	ldr	r3, [r4, #32]
 801f526:	2b00      	cmp	r3, #0
 801f528:	d002      	beq.n	801f530 <__sinit+0x14>
 801f52a:	f7ff ffef 	bl	801f50c <__sfp_lock_release>
 801f52e:	bd10      	pop	{r4, pc}
 801f530:	4b04      	ldr	r3, [pc, #16]	@ (801f544 <__sinit+0x28>)
 801f532:	6223      	str	r3, [r4, #32]
 801f534:	4b04      	ldr	r3, [pc, #16]	@ (801f548 <__sinit+0x2c>)
 801f536:	681b      	ldr	r3, [r3, #0]
 801f538:	2b00      	cmp	r3, #0
 801f53a:	d1f6      	bne.n	801f52a <__sinit+0xe>
 801f53c:	f7ff ffc0 	bl	801f4c0 <global_stdio_init.part.0>
 801f540:	e7f3      	b.n	801f52a <__sinit+0xe>
 801f542:	46c0      	nop			@ (mov r8, r8)
 801f544:	0801f485 	.word	0x0801f485
 801f548:	20003984 	.word	0x20003984

0801f54c <_fwalk_sglue>:
 801f54c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801f54e:	0014      	movs	r4, r2
 801f550:	2600      	movs	r6, #0
 801f552:	9000      	str	r0, [sp, #0]
 801f554:	9101      	str	r1, [sp, #4]
 801f556:	68a5      	ldr	r5, [r4, #8]
 801f558:	6867      	ldr	r7, [r4, #4]
 801f55a:	3f01      	subs	r7, #1
 801f55c:	d504      	bpl.n	801f568 <_fwalk_sglue+0x1c>
 801f55e:	6824      	ldr	r4, [r4, #0]
 801f560:	2c00      	cmp	r4, #0
 801f562:	d1f8      	bne.n	801f556 <_fwalk_sglue+0xa>
 801f564:	0030      	movs	r0, r6
 801f566:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 801f568:	89ab      	ldrh	r3, [r5, #12]
 801f56a:	2b01      	cmp	r3, #1
 801f56c:	d908      	bls.n	801f580 <_fwalk_sglue+0x34>
 801f56e:	220e      	movs	r2, #14
 801f570:	5eab      	ldrsh	r3, [r5, r2]
 801f572:	3301      	adds	r3, #1
 801f574:	d004      	beq.n	801f580 <_fwalk_sglue+0x34>
 801f576:	0029      	movs	r1, r5
 801f578:	9800      	ldr	r0, [sp, #0]
 801f57a:	9b01      	ldr	r3, [sp, #4]
 801f57c:	4798      	blx	r3
 801f57e:	4306      	orrs	r6, r0
 801f580:	3568      	adds	r5, #104	@ 0x68
 801f582:	e7ea      	b.n	801f55a <_fwalk_sglue+0xe>

0801f584 <iprintf>:
 801f584:	b40f      	push	{r0, r1, r2, r3}
 801f586:	b507      	push	{r0, r1, r2, lr}
 801f588:	4905      	ldr	r1, [pc, #20]	@ (801f5a0 <iprintf+0x1c>)
 801f58a:	ab04      	add	r3, sp, #16
 801f58c:	6808      	ldr	r0, [r1, #0]
 801f58e:	cb04      	ldmia	r3!, {r2}
 801f590:	6881      	ldr	r1, [r0, #8]
 801f592:	9301      	str	r3, [sp, #4]
 801f594:	f002 fbe8 	bl	8021d68 <_vfiprintf_r>
 801f598:	b003      	add	sp, #12
 801f59a:	bc08      	pop	{r3}
 801f59c:	b004      	add	sp, #16
 801f59e:	4718      	bx	r3
 801f5a0:	200003cc 	.word	0x200003cc

0801f5a4 <_puts_r>:
 801f5a4:	6a03      	ldr	r3, [r0, #32]
 801f5a6:	b570      	push	{r4, r5, r6, lr}
 801f5a8:	0005      	movs	r5, r0
 801f5aa:	000e      	movs	r6, r1
 801f5ac:	6884      	ldr	r4, [r0, #8]
 801f5ae:	2b00      	cmp	r3, #0
 801f5b0:	d101      	bne.n	801f5b6 <_puts_r+0x12>
 801f5b2:	f7ff ffb3 	bl	801f51c <__sinit>
 801f5b6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801f5b8:	07db      	lsls	r3, r3, #31
 801f5ba:	d405      	bmi.n	801f5c8 <_puts_r+0x24>
 801f5bc:	89a3      	ldrh	r3, [r4, #12]
 801f5be:	059b      	lsls	r3, r3, #22
 801f5c0:	d402      	bmi.n	801f5c8 <_puts_r+0x24>
 801f5c2:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801f5c4:	f000 fa61 	bl	801fa8a <__retarget_lock_acquire_recursive>
 801f5c8:	89a3      	ldrh	r3, [r4, #12]
 801f5ca:	071b      	lsls	r3, r3, #28
 801f5cc:	d502      	bpl.n	801f5d4 <_puts_r+0x30>
 801f5ce:	6923      	ldr	r3, [r4, #16]
 801f5d0:	2b00      	cmp	r3, #0
 801f5d2:	d11f      	bne.n	801f614 <_puts_r+0x70>
 801f5d4:	0021      	movs	r1, r4
 801f5d6:	0028      	movs	r0, r5
 801f5d8:	f000 f92a 	bl	801f830 <__swsetup_r>
 801f5dc:	2800      	cmp	r0, #0
 801f5de:	d019      	beq.n	801f614 <_puts_r+0x70>
 801f5e0:	2501      	movs	r5, #1
 801f5e2:	426d      	negs	r5, r5
 801f5e4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801f5e6:	07db      	lsls	r3, r3, #31
 801f5e8:	d405      	bmi.n	801f5f6 <_puts_r+0x52>
 801f5ea:	89a3      	ldrh	r3, [r4, #12]
 801f5ec:	059b      	lsls	r3, r3, #22
 801f5ee:	d402      	bmi.n	801f5f6 <_puts_r+0x52>
 801f5f0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801f5f2:	f000 fa4b 	bl	801fa8c <__retarget_lock_release_recursive>
 801f5f6:	0028      	movs	r0, r5
 801f5f8:	bd70      	pop	{r4, r5, r6, pc}
 801f5fa:	3601      	adds	r6, #1
 801f5fc:	60a3      	str	r3, [r4, #8]
 801f5fe:	2b00      	cmp	r3, #0
 801f600:	da04      	bge.n	801f60c <_puts_r+0x68>
 801f602:	69a2      	ldr	r2, [r4, #24]
 801f604:	429a      	cmp	r2, r3
 801f606:	dc16      	bgt.n	801f636 <_puts_r+0x92>
 801f608:	290a      	cmp	r1, #10
 801f60a:	d014      	beq.n	801f636 <_puts_r+0x92>
 801f60c:	6823      	ldr	r3, [r4, #0]
 801f60e:	1c5a      	adds	r2, r3, #1
 801f610:	6022      	str	r2, [r4, #0]
 801f612:	7019      	strb	r1, [r3, #0]
 801f614:	68a3      	ldr	r3, [r4, #8]
 801f616:	7831      	ldrb	r1, [r6, #0]
 801f618:	3b01      	subs	r3, #1
 801f61a:	2900      	cmp	r1, #0
 801f61c:	d1ed      	bne.n	801f5fa <_puts_r+0x56>
 801f61e:	60a3      	str	r3, [r4, #8]
 801f620:	2b00      	cmp	r3, #0
 801f622:	da0f      	bge.n	801f644 <_puts_r+0xa0>
 801f624:	0022      	movs	r2, r4
 801f626:	0028      	movs	r0, r5
 801f628:	310a      	adds	r1, #10
 801f62a:	f000 f8bf 	bl	801f7ac <__swbuf_r>
 801f62e:	3001      	adds	r0, #1
 801f630:	d0d6      	beq.n	801f5e0 <_puts_r+0x3c>
 801f632:	250a      	movs	r5, #10
 801f634:	e7d6      	b.n	801f5e4 <_puts_r+0x40>
 801f636:	0022      	movs	r2, r4
 801f638:	0028      	movs	r0, r5
 801f63a:	f000 f8b7 	bl	801f7ac <__swbuf_r>
 801f63e:	3001      	adds	r0, #1
 801f640:	d1e8      	bne.n	801f614 <_puts_r+0x70>
 801f642:	e7cd      	b.n	801f5e0 <_puts_r+0x3c>
 801f644:	6823      	ldr	r3, [r4, #0]
 801f646:	1c5a      	adds	r2, r3, #1
 801f648:	6022      	str	r2, [r4, #0]
 801f64a:	220a      	movs	r2, #10
 801f64c:	701a      	strb	r2, [r3, #0]
 801f64e:	e7f0      	b.n	801f632 <_puts_r+0x8e>

0801f650 <puts>:
 801f650:	b510      	push	{r4, lr}
 801f652:	4b03      	ldr	r3, [pc, #12]	@ (801f660 <puts+0x10>)
 801f654:	0001      	movs	r1, r0
 801f656:	6818      	ldr	r0, [r3, #0]
 801f658:	f7ff ffa4 	bl	801f5a4 <_puts_r>
 801f65c:	bd10      	pop	{r4, pc}
 801f65e:	46c0      	nop			@ (mov r8, r8)
 801f660:	200003cc 	.word	0x200003cc

0801f664 <siprintf>:
 801f664:	b40e      	push	{r1, r2, r3}
 801f666:	b500      	push	{lr}
 801f668:	490b      	ldr	r1, [pc, #44]	@ (801f698 <siprintf+0x34>)
 801f66a:	b09c      	sub	sp, #112	@ 0x70
 801f66c:	ab1d      	add	r3, sp, #116	@ 0x74
 801f66e:	9002      	str	r0, [sp, #8]
 801f670:	9006      	str	r0, [sp, #24]
 801f672:	9107      	str	r1, [sp, #28]
 801f674:	9104      	str	r1, [sp, #16]
 801f676:	4809      	ldr	r0, [pc, #36]	@ (801f69c <siprintf+0x38>)
 801f678:	4909      	ldr	r1, [pc, #36]	@ (801f6a0 <siprintf+0x3c>)
 801f67a:	cb04      	ldmia	r3!, {r2}
 801f67c:	9105      	str	r1, [sp, #20]
 801f67e:	6800      	ldr	r0, [r0, #0]
 801f680:	a902      	add	r1, sp, #8
 801f682:	9301      	str	r3, [sp, #4]
 801f684:	f002 fa4a 	bl	8021b1c <_svfiprintf_r>
 801f688:	2200      	movs	r2, #0
 801f68a:	9b02      	ldr	r3, [sp, #8]
 801f68c:	701a      	strb	r2, [r3, #0]
 801f68e:	b01c      	add	sp, #112	@ 0x70
 801f690:	bc08      	pop	{r3}
 801f692:	b003      	add	sp, #12
 801f694:	4718      	bx	r3
 801f696:	46c0      	nop			@ (mov r8, r8)
 801f698:	7fffffff 	.word	0x7fffffff
 801f69c:	200003cc 	.word	0x200003cc
 801f6a0:	ffff0208 	.word	0xffff0208

0801f6a4 <__sread>:
 801f6a4:	b570      	push	{r4, r5, r6, lr}
 801f6a6:	000c      	movs	r4, r1
 801f6a8:	250e      	movs	r5, #14
 801f6aa:	5f49      	ldrsh	r1, [r1, r5]
 801f6ac:	f000 f99a 	bl	801f9e4 <_read_r>
 801f6b0:	2800      	cmp	r0, #0
 801f6b2:	db03      	blt.n	801f6bc <__sread+0x18>
 801f6b4:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 801f6b6:	181b      	adds	r3, r3, r0
 801f6b8:	6563      	str	r3, [r4, #84]	@ 0x54
 801f6ba:	bd70      	pop	{r4, r5, r6, pc}
 801f6bc:	89a3      	ldrh	r3, [r4, #12]
 801f6be:	4a02      	ldr	r2, [pc, #8]	@ (801f6c8 <__sread+0x24>)
 801f6c0:	4013      	ands	r3, r2
 801f6c2:	81a3      	strh	r3, [r4, #12]
 801f6c4:	e7f9      	b.n	801f6ba <__sread+0x16>
 801f6c6:	46c0      	nop			@ (mov r8, r8)
 801f6c8:	ffffefff 	.word	0xffffefff

0801f6cc <__swrite>:
 801f6cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f6ce:	001f      	movs	r7, r3
 801f6d0:	898b      	ldrh	r3, [r1, #12]
 801f6d2:	0005      	movs	r5, r0
 801f6d4:	000c      	movs	r4, r1
 801f6d6:	0016      	movs	r6, r2
 801f6d8:	05db      	lsls	r3, r3, #23
 801f6da:	d505      	bpl.n	801f6e8 <__swrite+0x1c>
 801f6dc:	230e      	movs	r3, #14
 801f6de:	5ec9      	ldrsh	r1, [r1, r3]
 801f6e0:	2200      	movs	r2, #0
 801f6e2:	2302      	movs	r3, #2
 801f6e4:	f000 f96a 	bl	801f9bc <_lseek_r>
 801f6e8:	89a3      	ldrh	r3, [r4, #12]
 801f6ea:	4a05      	ldr	r2, [pc, #20]	@ (801f700 <__swrite+0x34>)
 801f6ec:	0028      	movs	r0, r5
 801f6ee:	4013      	ands	r3, r2
 801f6f0:	81a3      	strh	r3, [r4, #12]
 801f6f2:	0032      	movs	r2, r6
 801f6f4:	230e      	movs	r3, #14
 801f6f6:	5ee1      	ldrsh	r1, [r4, r3]
 801f6f8:	003b      	movs	r3, r7
 801f6fa:	f000 f987 	bl	801fa0c <_write_r>
 801f6fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801f700:	ffffefff 	.word	0xffffefff

0801f704 <__sseek>:
 801f704:	b570      	push	{r4, r5, r6, lr}
 801f706:	000c      	movs	r4, r1
 801f708:	250e      	movs	r5, #14
 801f70a:	5f49      	ldrsh	r1, [r1, r5]
 801f70c:	f000 f956 	bl	801f9bc <_lseek_r>
 801f710:	89a3      	ldrh	r3, [r4, #12]
 801f712:	1c42      	adds	r2, r0, #1
 801f714:	d103      	bne.n	801f71e <__sseek+0x1a>
 801f716:	4a05      	ldr	r2, [pc, #20]	@ (801f72c <__sseek+0x28>)
 801f718:	4013      	ands	r3, r2
 801f71a:	81a3      	strh	r3, [r4, #12]
 801f71c:	bd70      	pop	{r4, r5, r6, pc}
 801f71e:	2280      	movs	r2, #128	@ 0x80
 801f720:	0152      	lsls	r2, r2, #5
 801f722:	4313      	orrs	r3, r2
 801f724:	81a3      	strh	r3, [r4, #12]
 801f726:	6560      	str	r0, [r4, #84]	@ 0x54
 801f728:	e7f8      	b.n	801f71c <__sseek+0x18>
 801f72a:	46c0      	nop			@ (mov r8, r8)
 801f72c:	ffffefff 	.word	0xffffefff

0801f730 <__sclose>:
 801f730:	b510      	push	{r4, lr}
 801f732:	230e      	movs	r3, #14
 801f734:	5ec9      	ldrsh	r1, [r1, r3]
 801f736:	f000 f92f 	bl	801f998 <_close_r>
 801f73a:	bd10      	pop	{r4, pc}

0801f73c <_vsniprintf_r>:
 801f73c:	b530      	push	{r4, r5, lr}
 801f73e:	0014      	movs	r4, r2
 801f740:	0005      	movs	r5, r0
 801f742:	001a      	movs	r2, r3
 801f744:	b09b      	sub	sp, #108	@ 0x6c
 801f746:	2c00      	cmp	r4, #0
 801f748:	da05      	bge.n	801f756 <_vsniprintf_r+0x1a>
 801f74a:	238b      	movs	r3, #139	@ 0x8b
 801f74c:	6003      	str	r3, [r0, #0]
 801f74e:	2001      	movs	r0, #1
 801f750:	4240      	negs	r0, r0
 801f752:	b01b      	add	sp, #108	@ 0x6c
 801f754:	bd30      	pop	{r4, r5, pc}
 801f756:	2382      	movs	r3, #130	@ 0x82
 801f758:	4668      	mov	r0, sp
 801f75a:	009b      	lsls	r3, r3, #2
 801f75c:	8183      	strh	r3, [r0, #12]
 801f75e:	2300      	movs	r3, #0
 801f760:	9100      	str	r1, [sp, #0]
 801f762:	9104      	str	r1, [sp, #16]
 801f764:	429c      	cmp	r4, r3
 801f766:	d000      	beq.n	801f76a <_vsniprintf_r+0x2e>
 801f768:	1e63      	subs	r3, r4, #1
 801f76a:	9302      	str	r3, [sp, #8]
 801f76c:	9305      	str	r3, [sp, #20]
 801f76e:	2301      	movs	r3, #1
 801f770:	4669      	mov	r1, sp
 801f772:	425b      	negs	r3, r3
 801f774:	81cb      	strh	r3, [r1, #14]
 801f776:	0028      	movs	r0, r5
 801f778:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 801f77a:	f002 f9cf 	bl	8021b1c <_svfiprintf_r>
 801f77e:	1c43      	adds	r3, r0, #1
 801f780:	da01      	bge.n	801f786 <_vsniprintf_r+0x4a>
 801f782:	238b      	movs	r3, #139	@ 0x8b
 801f784:	602b      	str	r3, [r5, #0]
 801f786:	2c00      	cmp	r4, #0
 801f788:	d0e3      	beq.n	801f752 <_vsniprintf_r+0x16>
 801f78a:	2200      	movs	r2, #0
 801f78c:	9b00      	ldr	r3, [sp, #0]
 801f78e:	701a      	strb	r2, [r3, #0]
 801f790:	e7df      	b.n	801f752 <_vsniprintf_r+0x16>
	...

0801f794 <vsniprintf>:
 801f794:	b513      	push	{r0, r1, r4, lr}
 801f796:	4c04      	ldr	r4, [pc, #16]	@ (801f7a8 <vsniprintf+0x14>)
 801f798:	9300      	str	r3, [sp, #0]
 801f79a:	0013      	movs	r3, r2
 801f79c:	000a      	movs	r2, r1
 801f79e:	0001      	movs	r1, r0
 801f7a0:	6820      	ldr	r0, [r4, #0]
 801f7a2:	f7ff ffcb 	bl	801f73c <_vsniprintf_r>
 801f7a6:	bd16      	pop	{r1, r2, r4, pc}
 801f7a8:	200003cc 	.word	0x200003cc

0801f7ac <__swbuf_r>:
 801f7ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f7ae:	0006      	movs	r6, r0
 801f7b0:	000d      	movs	r5, r1
 801f7b2:	0014      	movs	r4, r2
 801f7b4:	2800      	cmp	r0, #0
 801f7b6:	d004      	beq.n	801f7c2 <__swbuf_r+0x16>
 801f7b8:	6a03      	ldr	r3, [r0, #32]
 801f7ba:	2b00      	cmp	r3, #0
 801f7bc:	d101      	bne.n	801f7c2 <__swbuf_r+0x16>
 801f7be:	f7ff fead 	bl	801f51c <__sinit>
 801f7c2:	69a3      	ldr	r3, [r4, #24]
 801f7c4:	60a3      	str	r3, [r4, #8]
 801f7c6:	89a3      	ldrh	r3, [r4, #12]
 801f7c8:	071b      	lsls	r3, r3, #28
 801f7ca:	d502      	bpl.n	801f7d2 <__swbuf_r+0x26>
 801f7cc:	6923      	ldr	r3, [r4, #16]
 801f7ce:	2b00      	cmp	r3, #0
 801f7d0:	d109      	bne.n	801f7e6 <__swbuf_r+0x3a>
 801f7d2:	0021      	movs	r1, r4
 801f7d4:	0030      	movs	r0, r6
 801f7d6:	f000 f82b 	bl	801f830 <__swsetup_r>
 801f7da:	2800      	cmp	r0, #0
 801f7dc:	d003      	beq.n	801f7e6 <__swbuf_r+0x3a>
 801f7de:	2501      	movs	r5, #1
 801f7e0:	426d      	negs	r5, r5
 801f7e2:	0028      	movs	r0, r5
 801f7e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801f7e6:	6923      	ldr	r3, [r4, #16]
 801f7e8:	6820      	ldr	r0, [r4, #0]
 801f7ea:	b2ef      	uxtb	r7, r5
 801f7ec:	1ac0      	subs	r0, r0, r3
 801f7ee:	6963      	ldr	r3, [r4, #20]
 801f7f0:	b2ed      	uxtb	r5, r5
 801f7f2:	4283      	cmp	r3, r0
 801f7f4:	dc05      	bgt.n	801f802 <__swbuf_r+0x56>
 801f7f6:	0021      	movs	r1, r4
 801f7f8:	0030      	movs	r0, r6
 801f7fa:	f002 fc57 	bl	80220ac <_fflush_r>
 801f7fe:	2800      	cmp	r0, #0
 801f800:	d1ed      	bne.n	801f7de <__swbuf_r+0x32>
 801f802:	68a3      	ldr	r3, [r4, #8]
 801f804:	3001      	adds	r0, #1
 801f806:	3b01      	subs	r3, #1
 801f808:	60a3      	str	r3, [r4, #8]
 801f80a:	6823      	ldr	r3, [r4, #0]
 801f80c:	1c5a      	adds	r2, r3, #1
 801f80e:	6022      	str	r2, [r4, #0]
 801f810:	701f      	strb	r7, [r3, #0]
 801f812:	6963      	ldr	r3, [r4, #20]
 801f814:	4283      	cmp	r3, r0
 801f816:	d004      	beq.n	801f822 <__swbuf_r+0x76>
 801f818:	89a3      	ldrh	r3, [r4, #12]
 801f81a:	07db      	lsls	r3, r3, #31
 801f81c:	d5e1      	bpl.n	801f7e2 <__swbuf_r+0x36>
 801f81e:	2d0a      	cmp	r5, #10
 801f820:	d1df      	bne.n	801f7e2 <__swbuf_r+0x36>
 801f822:	0021      	movs	r1, r4
 801f824:	0030      	movs	r0, r6
 801f826:	f002 fc41 	bl	80220ac <_fflush_r>
 801f82a:	2800      	cmp	r0, #0
 801f82c:	d0d9      	beq.n	801f7e2 <__swbuf_r+0x36>
 801f82e:	e7d6      	b.n	801f7de <__swbuf_r+0x32>

0801f830 <__swsetup_r>:
 801f830:	4b2d      	ldr	r3, [pc, #180]	@ (801f8e8 <__swsetup_r+0xb8>)
 801f832:	b570      	push	{r4, r5, r6, lr}
 801f834:	0005      	movs	r5, r0
 801f836:	6818      	ldr	r0, [r3, #0]
 801f838:	000c      	movs	r4, r1
 801f83a:	2800      	cmp	r0, #0
 801f83c:	d004      	beq.n	801f848 <__swsetup_r+0x18>
 801f83e:	6a03      	ldr	r3, [r0, #32]
 801f840:	2b00      	cmp	r3, #0
 801f842:	d101      	bne.n	801f848 <__swsetup_r+0x18>
 801f844:	f7ff fe6a 	bl	801f51c <__sinit>
 801f848:	230c      	movs	r3, #12
 801f84a:	5ee2      	ldrsh	r2, [r4, r3]
 801f84c:	0713      	lsls	r3, r2, #28
 801f84e:	d423      	bmi.n	801f898 <__swsetup_r+0x68>
 801f850:	06d3      	lsls	r3, r2, #27
 801f852:	d407      	bmi.n	801f864 <__swsetup_r+0x34>
 801f854:	2309      	movs	r3, #9
 801f856:	602b      	str	r3, [r5, #0]
 801f858:	2340      	movs	r3, #64	@ 0x40
 801f85a:	2001      	movs	r0, #1
 801f85c:	4313      	orrs	r3, r2
 801f85e:	81a3      	strh	r3, [r4, #12]
 801f860:	4240      	negs	r0, r0
 801f862:	e03a      	b.n	801f8da <__swsetup_r+0xaa>
 801f864:	0752      	lsls	r2, r2, #29
 801f866:	d513      	bpl.n	801f890 <__swsetup_r+0x60>
 801f868:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801f86a:	2900      	cmp	r1, #0
 801f86c:	d008      	beq.n	801f880 <__swsetup_r+0x50>
 801f86e:	0023      	movs	r3, r4
 801f870:	3344      	adds	r3, #68	@ 0x44
 801f872:	4299      	cmp	r1, r3
 801f874:	d002      	beq.n	801f87c <__swsetup_r+0x4c>
 801f876:	0028      	movs	r0, r5
 801f878:	f000 ffa6 	bl	80207c8 <_free_r>
 801f87c:	2300      	movs	r3, #0
 801f87e:	6363      	str	r3, [r4, #52]	@ 0x34
 801f880:	2224      	movs	r2, #36	@ 0x24
 801f882:	89a3      	ldrh	r3, [r4, #12]
 801f884:	4393      	bics	r3, r2
 801f886:	81a3      	strh	r3, [r4, #12]
 801f888:	2300      	movs	r3, #0
 801f88a:	6063      	str	r3, [r4, #4]
 801f88c:	6923      	ldr	r3, [r4, #16]
 801f88e:	6023      	str	r3, [r4, #0]
 801f890:	2308      	movs	r3, #8
 801f892:	89a2      	ldrh	r2, [r4, #12]
 801f894:	4313      	orrs	r3, r2
 801f896:	81a3      	strh	r3, [r4, #12]
 801f898:	6923      	ldr	r3, [r4, #16]
 801f89a:	2b00      	cmp	r3, #0
 801f89c:	d10b      	bne.n	801f8b6 <__swsetup_r+0x86>
 801f89e:	21a0      	movs	r1, #160	@ 0xa0
 801f8a0:	2280      	movs	r2, #128	@ 0x80
 801f8a2:	89a3      	ldrh	r3, [r4, #12]
 801f8a4:	0089      	lsls	r1, r1, #2
 801f8a6:	0092      	lsls	r2, r2, #2
 801f8a8:	400b      	ands	r3, r1
 801f8aa:	4293      	cmp	r3, r2
 801f8ac:	d003      	beq.n	801f8b6 <__swsetup_r+0x86>
 801f8ae:	0021      	movs	r1, r4
 801f8b0:	0028      	movs	r0, r5
 801f8b2:	f002 fc51 	bl	8022158 <__smakebuf_r>
 801f8b6:	230c      	movs	r3, #12
 801f8b8:	5ee2      	ldrsh	r2, [r4, r3]
 801f8ba:	2101      	movs	r1, #1
 801f8bc:	0013      	movs	r3, r2
 801f8be:	400b      	ands	r3, r1
 801f8c0:	420a      	tst	r2, r1
 801f8c2:	d00b      	beq.n	801f8dc <__swsetup_r+0xac>
 801f8c4:	2300      	movs	r3, #0
 801f8c6:	60a3      	str	r3, [r4, #8]
 801f8c8:	6963      	ldr	r3, [r4, #20]
 801f8ca:	425b      	negs	r3, r3
 801f8cc:	61a3      	str	r3, [r4, #24]
 801f8ce:	2000      	movs	r0, #0
 801f8d0:	6923      	ldr	r3, [r4, #16]
 801f8d2:	4283      	cmp	r3, r0
 801f8d4:	d101      	bne.n	801f8da <__swsetup_r+0xaa>
 801f8d6:	0613      	lsls	r3, r2, #24
 801f8d8:	d4be      	bmi.n	801f858 <__swsetup_r+0x28>
 801f8da:	bd70      	pop	{r4, r5, r6, pc}
 801f8dc:	0791      	lsls	r1, r2, #30
 801f8de:	d400      	bmi.n	801f8e2 <__swsetup_r+0xb2>
 801f8e0:	6963      	ldr	r3, [r4, #20]
 801f8e2:	60a3      	str	r3, [r4, #8]
 801f8e4:	e7f3      	b.n	801f8ce <__swsetup_r+0x9e>
 801f8e6:	46c0      	nop			@ (mov r8, r8)
 801f8e8:	200003cc 	.word	0x200003cc

0801f8ec <memset>:
 801f8ec:	0003      	movs	r3, r0
 801f8ee:	1882      	adds	r2, r0, r2
 801f8f0:	4293      	cmp	r3, r2
 801f8f2:	d100      	bne.n	801f8f6 <memset+0xa>
 801f8f4:	4770      	bx	lr
 801f8f6:	7019      	strb	r1, [r3, #0]
 801f8f8:	3301      	adds	r3, #1
 801f8fa:	e7f9      	b.n	801f8f0 <memset+0x4>

0801f8fc <strchr>:
 801f8fc:	b2c9      	uxtb	r1, r1
 801f8fe:	7803      	ldrb	r3, [r0, #0]
 801f900:	2b00      	cmp	r3, #0
 801f902:	d004      	beq.n	801f90e <strchr+0x12>
 801f904:	428b      	cmp	r3, r1
 801f906:	d100      	bne.n	801f90a <strchr+0xe>
 801f908:	4770      	bx	lr
 801f90a:	3001      	adds	r0, #1
 801f90c:	e7f7      	b.n	801f8fe <strchr+0x2>
 801f90e:	424b      	negs	r3, r1
 801f910:	4159      	adcs	r1, r3
 801f912:	4249      	negs	r1, r1
 801f914:	4008      	ands	r0, r1
 801f916:	e7f7      	b.n	801f908 <strchr+0xc>

0801f918 <strncmp>:
 801f918:	b530      	push	{r4, r5, lr}
 801f91a:	0005      	movs	r5, r0
 801f91c:	1e10      	subs	r0, r2, #0
 801f91e:	d00b      	beq.n	801f938 <strncmp+0x20>
 801f920:	2400      	movs	r4, #0
 801f922:	3a01      	subs	r2, #1
 801f924:	5d2b      	ldrb	r3, [r5, r4]
 801f926:	5d08      	ldrb	r0, [r1, r4]
 801f928:	4283      	cmp	r3, r0
 801f92a:	d104      	bne.n	801f936 <strncmp+0x1e>
 801f92c:	42a2      	cmp	r2, r4
 801f92e:	d002      	beq.n	801f936 <strncmp+0x1e>
 801f930:	3401      	adds	r4, #1
 801f932:	2b00      	cmp	r3, #0
 801f934:	d1f6      	bne.n	801f924 <strncmp+0xc>
 801f936:	1a18      	subs	r0, r3, r0
 801f938:	bd30      	pop	{r4, r5, pc}

0801f93a <strncpy>:
 801f93a:	0003      	movs	r3, r0
 801f93c:	b530      	push	{r4, r5, lr}
 801f93e:	001d      	movs	r5, r3
 801f940:	2a00      	cmp	r2, #0
 801f942:	d006      	beq.n	801f952 <strncpy+0x18>
 801f944:	780c      	ldrb	r4, [r1, #0]
 801f946:	3a01      	subs	r2, #1
 801f948:	3301      	adds	r3, #1
 801f94a:	702c      	strb	r4, [r5, #0]
 801f94c:	3101      	adds	r1, #1
 801f94e:	2c00      	cmp	r4, #0
 801f950:	d1f5      	bne.n	801f93e <strncpy+0x4>
 801f952:	2100      	movs	r1, #0
 801f954:	189a      	adds	r2, r3, r2
 801f956:	4293      	cmp	r3, r2
 801f958:	d100      	bne.n	801f95c <strncpy+0x22>
 801f95a:	bd30      	pop	{r4, r5, pc}
 801f95c:	7019      	strb	r1, [r3, #0]
 801f95e:	3301      	adds	r3, #1
 801f960:	e7f9      	b.n	801f956 <strncpy+0x1c>

0801f962 <strstr>:
 801f962:	780a      	ldrb	r2, [r1, #0]
 801f964:	b530      	push	{r4, r5, lr}
 801f966:	2a00      	cmp	r2, #0
 801f968:	d10c      	bne.n	801f984 <strstr+0x22>
 801f96a:	bd30      	pop	{r4, r5, pc}
 801f96c:	429a      	cmp	r2, r3
 801f96e:	d108      	bne.n	801f982 <strstr+0x20>
 801f970:	2301      	movs	r3, #1
 801f972:	5ccc      	ldrb	r4, [r1, r3]
 801f974:	2c00      	cmp	r4, #0
 801f976:	d0f8      	beq.n	801f96a <strstr+0x8>
 801f978:	5cc5      	ldrb	r5, [r0, r3]
 801f97a:	42a5      	cmp	r5, r4
 801f97c:	d101      	bne.n	801f982 <strstr+0x20>
 801f97e:	3301      	adds	r3, #1
 801f980:	e7f7      	b.n	801f972 <strstr+0x10>
 801f982:	3001      	adds	r0, #1
 801f984:	7803      	ldrb	r3, [r0, #0]
 801f986:	2b00      	cmp	r3, #0
 801f988:	d1f0      	bne.n	801f96c <strstr+0xa>
 801f98a:	0018      	movs	r0, r3
 801f98c:	e7ed      	b.n	801f96a <strstr+0x8>
	...

0801f990 <_localeconv_r>:
 801f990:	4800      	ldr	r0, [pc, #0]	@ (801f994 <_localeconv_r+0x4>)
 801f992:	4770      	bx	lr
 801f994:	20000350 	.word	0x20000350

0801f998 <_close_r>:
 801f998:	2300      	movs	r3, #0
 801f99a:	b570      	push	{r4, r5, r6, lr}
 801f99c:	4d06      	ldr	r5, [pc, #24]	@ (801f9b8 <_close_r+0x20>)
 801f99e:	0004      	movs	r4, r0
 801f9a0:	0008      	movs	r0, r1
 801f9a2:	602b      	str	r3, [r5, #0]
 801f9a4:	f7ed fca8 	bl	800d2f8 <_close>
 801f9a8:	1c43      	adds	r3, r0, #1
 801f9aa:	d103      	bne.n	801f9b4 <_close_r+0x1c>
 801f9ac:	682b      	ldr	r3, [r5, #0]
 801f9ae:	2b00      	cmp	r3, #0
 801f9b0:	d000      	beq.n	801f9b4 <_close_r+0x1c>
 801f9b2:	6023      	str	r3, [r4, #0]
 801f9b4:	bd70      	pop	{r4, r5, r6, pc}
 801f9b6:	46c0      	nop			@ (mov r8, r8)
 801f9b8:	20003988 	.word	0x20003988

0801f9bc <_lseek_r>:
 801f9bc:	b570      	push	{r4, r5, r6, lr}
 801f9be:	0004      	movs	r4, r0
 801f9c0:	0008      	movs	r0, r1
 801f9c2:	0011      	movs	r1, r2
 801f9c4:	001a      	movs	r2, r3
 801f9c6:	2300      	movs	r3, #0
 801f9c8:	4d05      	ldr	r5, [pc, #20]	@ (801f9e0 <_lseek_r+0x24>)
 801f9ca:	602b      	str	r3, [r5, #0]
 801f9cc:	f7ed fcb5 	bl	800d33a <_lseek>
 801f9d0:	1c43      	adds	r3, r0, #1
 801f9d2:	d103      	bne.n	801f9dc <_lseek_r+0x20>
 801f9d4:	682b      	ldr	r3, [r5, #0]
 801f9d6:	2b00      	cmp	r3, #0
 801f9d8:	d000      	beq.n	801f9dc <_lseek_r+0x20>
 801f9da:	6023      	str	r3, [r4, #0]
 801f9dc:	bd70      	pop	{r4, r5, r6, pc}
 801f9de:	46c0      	nop			@ (mov r8, r8)
 801f9e0:	20003988 	.word	0x20003988

0801f9e4 <_read_r>:
 801f9e4:	b570      	push	{r4, r5, r6, lr}
 801f9e6:	0004      	movs	r4, r0
 801f9e8:	0008      	movs	r0, r1
 801f9ea:	0011      	movs	r1, r2
 801f9ec:	001a      	movs	r2, r3
 801f9ee:	2300      	movs	r3, #0
 801f9f0:	4d05      	ldr	r5, [pc, #20]	@ (801fa08 <_read_r+0x24>)
 801f9f2:	602b      	str	r3, [r5, #0]
 801f9f4:	f7ed fc63 	bl	800d2be <_read>
 801f9f8:	1c43      	adds	r3, r0, #1
 801f9fa:	d103      	bne.n	801fa04 <_read_r+0x20>
 801f9fc:	682b      	ldr	r3, [r5, #0]
 801f9fe:	2b00      	cmp	r3, #0
 801fa00:	d000      	beq.n	801fa04 <_read_r+0x20>
 801fa02:	6023      	str	r3, [r4, #0]
 801fa04:	bd70      	pop	{r4, r5, r6, pc}
 801fa06:	46c0      	nop			@ (mov r8, r8)
 801fa08:	20003988 	.word	0x20003988

0801fa0c <_write_r>:
 801fa0c:	b570      	push	{r4, r5, r6, lr}
 801fa0e:	0004      	movs	r4, r0
 801fa10:	0008      	movs	r0, r1
 801fa12:	0011      	movs	r1, r2
 801fa14:	001a      	movs	r2, r3
 801fa16:	2300      	movs	r3, #0
 801fa18:	4d05      	ldr	r5, [pc, #20]	@ (801fa30 <_write_r+0x24>)
 801fa1a:	602b      	str	r3, [r5, #0]
 801fa1c:	f7ee f924 	bl	800dc68 <_write>
 801fa20:	1c43      	adds	r3, r0, #1
 801fa22:	d103      	bne.n	801fa2c <_write_r+0x20>
 801fa24:	682b      	ldr	r3, [r5, #0]
 801fa26:	2b00      	cmp	r3, #0
 801fa28:	d000      	beq.n	801fa2c <_write_r+0x20>
 801fa2a:	6023      	str	r3, [r4, #0]
 801fa2c:	bd70      	pop	{r4, r5, r6, pc}
 801fa2e:	46c0      	nop			@ (mov r8, r8)
 801fa30:	20003988 	.word	0x20003988

0801fa34 <__errno>:
 801fa34:	4b01      	ldr	r3, [pc, #4]	@ (801fa3c <__errno+0x8>)
 801fa36:	6818      	ldr	r0, [r3, #0]
 801fa38:	4770      	bx	lr
 801fa3a:	46c0      	nop			@ (mov r8, r8)
 801fa3c:	200003cc 	.word	0x200003cc

0801fa40 <__libc_init_array>:
 801fa40:	b570      	push	{r4, r5, r6, lr}
 801fa42:	2600      	movs	r6, #0
 801fa44:	4c0c      	ldr	r4, [pc, #48]	@ (801fa78 <__libc_init_array+0x38>)
 801fa46:	4d0d      	ldr	r5, [pc, #52]	@ (801fa7c <__libc_init_array+0x3c>)
 801fa48:	1b64      	subs	r4, r4, r5
 801fa4a:	10a4      	asrs	r4, r4, #2
 801fa4c:	42a6      	cmp	r6, r4
 801fa4e:	d109      	bne.n	801fa64 <__libc_init_array+0x24>
 801fa50:	2600      	movs	r6, #0
 801fa52:	f002 fee9 	bl	8022828 <_init>
 801fa56:	4c0a      	ldr	r4, [pc, #40]	@ (801fa80 <__libc_init_array+0x40>)
 801fa58:	4d0a      	ldr	r5, [pc, #40]	@ (801fa84 <__libc_init_array+0x44>)
 801fa5a:	1b64      	subs	r4, r4, r5
 801fa5c:	10a4      	asrs	r4, r4, #2
 801fa5e:	42a6      	cmp	r6, r4
 801fa60:	d105      	bne.n	801fa6e <__libc_init_array+0x2e>
 801fa62:	bd70      	pop	{r4, r5, r6, pc}
 801fa64:	00b3      	lsls	r3, r6, #2
 801fa66:	58eb      	ldr	r3, [r5, r3]
 801fa68:	4798      	blx	r3
 801fa6a:	3601      	adds	r6, #1
 801fa6c:	e7ee      	b.n	801fa4c <__libc_init_array+0xc>
 801fa6e:	00b3      	lsls	r3, r6, #2
 801fa70:	58eb      	ldr	r3, [r5, r3]
 801fa72:	4798      	blx	r3
 801fa74:	3601      	adds	r6, #1
 801fa76:	e7f2      	b.n	801fa5e <__libc_init_array+0x1e>
 801fa78:	08025400 	.word	0x08025400
 801fa7c:	08025400 	.word	0x08025400
 801fa80:	08025404 	.word	0x08025404
 801fa84:	08025400 	.word	0x08025400

0801fa88 <__retarget_lock_init_recursive>:
 801fa88:	4770      	bx	lr

0801fa8a <__retarget_lock_acquire_recursive>:
 801fa8a:	4770      	bx	lr

0801fa8c <__retarget_lock_release_recursive>:
 801fa8c:	4770      	bx	lr

0801fa8e <memchr>:
 801fa8e:	b2c9      	uxtb	r1, r1
 801fa90:	1882      	adds	r2, r0, r2
 801fa92:	4290      	cmp	r0, r2
 801fa94:	d101      	bne.n	801fa9a <memchr+0xc>
 801fa96:	2000      	movs	r0, #0
 801fa98:	4770      	bx	lr
 801fa9a:	7803      	ldrb	r3, [r0, #0]
 801fa9c:	428b      	cmp	r3, r1
 801fa9e:	d0fb      	beq.n	801fa98 <memchr+0xa>
 801faa0:	3001      	adds	r0, #1
 801faa2:	e7f6      	b.n	801fa92 <memchr+0x4>

0801faa4 <memcpy>:
 801faa4:	2300      	movs	r3, #0
 801faa6:	b510      	push	{r4, lr}
 801faa8:	429a      	cmp	r2, r3
 801faaa:	d100      	bne.n	801faae <memcpy+0xa>
 801faac:	bd10      	pop	{r4, pc}
 801faae:	5ccc      	ldrb	r4, [r1, r3]
 801fab0:	54c4      	strb	r4, [r0, r3]
 801fab2:	3301      	adds	r3, #1
 801fab4:	e7f8      	b.n	801faa8 <memcpy+0x4>
	...

0801fab8 <nan>:
 801fab8:	2000      	movs	r0, #0
 801faba:	4901      	ldr	r1, [pc, #4]	@ (801fac0 <nan+0x8>)
 801fabc:	4770      	bx	lr
 801fabe:	46c0      	nop			@ (mov r8, r8)
 801fac0:	7ff80000 	.word	0x7ff80000

0801fac4 <quorem>:
 801fac4:	b5f0      	push	{r4, r5, r6, r7, lr}
 801fac6:	6902      	ldr	r2, [r0, #16]
 801fac8:	690f      	ldr	r7, [r1, #16]
 801faca:	b087      	sub	sp, #28
 801facc:	0006      	movs	r6, r0
 801face:	000b      	movs	r3, r1
 801fad0:	2000      	movs	r0, #0
 801fad2:	9102      	str	r1, [sp, #8]
 801fad4:	42ba      	cmp	r2, r7
 801fad6:	db6d      	blt.n	801fbb4 <quorem+0xf0>
 801fad8:	3f01      	subs	r7, #1
 801fada:	00bc      	lsls	r4, r7, #2
 801fadc:	3314      	adds	r3, #20
 801fade:	9305      	str	r3, [sp, #20]
 801fae0:	191b      	adds	r3, r3, r4
 801fae2:	9303      	str	r3, [sp, #12]
 801fae4:	0033      	movs	r3, r6
 801fae6:	3314      	adds	r3, #20
 801fae8:	191c      	adds	r4, r3, r4
 801faea:	9301      	str	r3, [sp, #4]
 801faec:	6823      	ldr	r3, [r4, #0]
 801faee:	9304      	str	r3, [sp, #16]
 801faf0:	9b03      	ldr	r3, [sp, #12]
 801faf2:	9804      	ldr	r0, [sp, #16]
 801faf4:	681d      	ldr	r5, [r3, #0]
 801faf6:	3501      	adds	r5, #1
 801faf8:	0029      	movs	r1, r5
 801fafa:	f7e0 fb53 	bl	80001a4 <__udivsi3>
 801fafe:	9b04      	ldr	r3, [sp, #16]
 801fb00:	9000      	str	r0, [sp, #0]
 801fb02:	42ab      	cmp	r3, r5
 801fb04:	d32b      	bcc.n	801fb5e <quorem+0x9a>
 801fb06:	9b05      	ldr	r3, [sp, #20]
 801fb08:	9d01      	ldr	r5, [sp, #4]
 801fb0a:	469c      	mov	ip, r3
 801fb0c:	2300      	movs	r3, #0
 801fb0e:	9305      	str	r3, [sp, #20]
 801fb10:	9304      	str	r3, [sp, #16]
 801fb12:	4662      	mov	r2, ip
 801fb14:	ca08      	ldmia	r2!, {r3}
 801fb16:	6828      	ldr	r0, [r5, #0]
 801fb18:	4694      	mov	ip, r2
 801fb1a:	9a00      	ldr	r2, [sp, #0]
 801fb1c:	b299      	uxth	r1, r3
 801fb1e:	4351      	muls	r1, r2
 801fb20:	9a05      	ldr	r2, [sp, #20]
 801fb22:	0c1b      	lsrs	r3, r3, #16
 801fb24:	1889      	adds	r1, r1, r2
 801fb26:	9a00      	ldr	r2, [sp, #0]
 801fb28:	4353      	muls	r3, r2
 801fb2a:	0c0a      	lsrs	r2, r1, #16
 801fb2c:	189b      	adds	r3, r3, r2
 801fb2e:	0c1a      	lsrs	r2, r3, #16
 801fb30:	b289      	uxth	r1, r1
 801fb32:	9205      	str	r2, [sp, #20]
 801fb34:	b282      	uxth	r2, r0
 801fb36:	1a52      	subs	r2, r2, r1
 801fb38:	9904      	ldr	r1, [sp, #16]
 801fb3a:	0c00      	lsrs	r0, r0, #16
 801fb3c:	1852      	adds	r2, r2, r1
 801fb3e:	b29b      	uxth	r3, r3
 801fb40:	1411      	asrs	r1, r2, #16
 801fb42:	1ac3      	subs	r3, r0, r3
 801fb44:	185b      	adds	r3, r3, r1
 801fb46:	1419      	asrs	r1, r3, #16
 801fb48:	b292      	uxth	r2, r2
 801fb4a:	041b      	lsls	r3, r3, #16
 801fb4c:	431a      	orrs	r2, r3
 801fb4e:	9b03      	ldr	r3, [sp, #12]
 801fb50:	9104      	str	r1, [sp, #16]
 801fb52:	c504      	stmia	r5!, {r2}
 801fb54:	4563      	cmp	r3, ip
 801fb56:	d2dc      	bcs.n	801fb12 <quorem+0x4e>
 801fb58:	6823      	ldr	r3, [r4, #0]
 801fb5a:	2b00      	cmp	r3, #0
 801fb5c:	d030      	beq.n	801fbc0 <quorem+0xfc>
 801fb5e:	0030      	movs	r0, r6
 801fb60:	9902      	ldr	r1, [sp, #8]
 801fb62:	f001 fd7d 	bl	8021660 <__mcmp>
 801fb66:	2800      	cmp	r0, #0
 801fb68:	db23      	blt.n	801fbb2 <quorem+0xee>
 801fb6a:	0034      	movs	r4, r6
 801fb6c:	2500      	movs	r5, #0
 801fb6e:	9902      	ldr	r1, [sp, #8]
 801fb70:	3414      	adds	r4, #20
 801fb72:	3114      	adds	r1, #20
 801fb74:	6823      	ldr	r3, [r4, #0]
 801fb76:	c901      	ldmia	r1!, {r0}
 801fb78:	9302      	str	r3, [sp, #8]
 801fb7a:	466b      	mov	r3, sp
 801fb7c:	891b      	ldrh	r3, [r3, #8]
 801fb7e:	b282      	uxth	r2, r0
 801fb80:	1a9a      	subs	r2, r3, r2
 801fb82:	9b02      	ldr	r3, [sp, #8]
 801fb84:	1952      	adds	r2, r2, r5
 801fb86:	0c00      	lsrs	r0, r0, #16
 801fb88:	0c1b      	lsrs	r3, r3, #16
 801fb8a:	1a1b      	subs	r3, r3, r0
 801fb8c:	1410      	asrs	r0, r2, #16
 801fb8e:	181b      	adds	r3, r3, r0
 801fb90:	141d      	asrs	r5, r3, #16
 801fb92:	b292      	uxth	r2, r2
 801fb94:	041b      	lsls	r3, r3, #16
 801fb96:	431a      	orrs	r2, r3
 801fb98:	9b03      	ldr	r3, [sp, #12]
 801fb9a:	c404      	stmia	r4!, {r2}
 801fb9c:	428b      	cmp	r3, r1
 801fb9e:	d2e9      	bcs.n	801fb74 <quorem+0xb0>
 801fba0:	9a01      	ldr	r2, [sp, #4]
 801fba2:	00bb      	lsls	r3, r7, #2
 801fba4:	18d3      	adds	r3, r2, r3
 801fba6:	681a      	ldr	r2, [r3, #0]
 801fba8:	2a00      	cmp	r2, #0
 801fbaa:	d013      	beq.n	801fbd4 <quorem+0x110>
 801fbac:	9b00      	ldr	r3, [sp, #0]
 801fbae:	3301      	adds	r3, #1
 801fbb0:	9300      	str	r3, [sp, #0]
 801fbb2:	9800      	ldr	r0, [sp, #0]
 801fbb4:	b007      	add	sp, #28
 801fbb6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801fbb8:	6823      	ldr	r3, [r4, #0]
 801fbba:	2b00      	cmp	r3, #0
 801fbbc:	d104      	bne.n	801fbc8 <quorem+0x104>
 801fbbe:	3f01      	subs	r7, #1
 801fbc0:	9b01      	ldr	r3, [sp, #4]
 801fbc2:	3c04      	subs	r4, #4
 801fbc4:	42a3      	cmp	r3, r4
 801fbc6:	d3f7      	bcc.n	801fbb8 <quorem+0xf4>
 801fbc8:	6137      	str	r7, [r6, #16]
 801fbca:	e7c8      	b.n	801fb5e <quorem+0x9a>
 801fbcc:	681a      	ldr	r2, [r3, #0]
 801fbce:	2a00      	cmp	r2, #0
 801fbd0:	d104      	bne.n	801fbdc <quorem+0x118>
 801fbd2:	3f01      	subs	r7, #1
 801fbd4:	9a01      	ldr	r2, [sp, #4]
 801fbd6:	3b04      	subs	r3, #4
 801fbd8:	429a      	cmp	r2, r3
 801fbda:	d3f7      	bcc.n	801fbcc <quorem+0x108>
 801fbdc:	6137      	str	r7, [r6, #16]
 801fbde:	e7e5      	b.n	801fbac <quorem+0xe8>

0801fbe0 <_dtoa_r>:
 801fbe0:	b5f0      	push	{r4, r5, r6, r7, lr}
 801fbe2:	0014      	movs	r4, r2
 801fbe4:	001d      	movs	r5, r3
 801fbe6:	69c6      	ldr	r6, [r0, #28]
 801fbe8:	b09d      	sub	sp, #116	@ 0x74
 801fbea:	940a      	str	r4, [sp, #40]	@ 0x28
 801fbec:	950b      	str	r5, [sp, #44]	@ 0x2c
 801fbee:	9f25      	ldr	r7, [sp, #148]	@ 0x94
 801fbf0:	9003      	str	r0, [sp, #12]
 801fbf2:	2e00      	cmp	r6, #0
 801fbf4:	d10f      	bne.n	801fc16 <_dtoa_r+0x36>
 801fbf6:	2010      	movs	r0, #16
 801fbf8:	f001 f98a 	bl	8020f10 <malloc>
 801fbfc:	9b03      	ldr	r3, [sp, #12]
 801fbfe:	1e02      	subs	r2, r0, #0
 801fc00:	61d8      	str	r0, [r3, #28]
 801fc02:	d104      	bne.n	801fc0e <_dtoa_r+0x2e>
 801fc04:	21ef      	movs	r1, #239	@ 0xef
 801fc06:	4bc7      	ldr	r3, [pc, #796]	@ (801ff24 <_dtoa_r+0x344>)
 801fc08:	48c7      	ldr	r0, [pc, #796]	@ (801ff28 <_dtoa_r+0x348>)
 801fc0a:	f002 fb2f 	bl	802226c <__assert_func>
 801fc0e:	6046      	str	r6, [r0, #4]
 801fc10:	6086      	str	r6, [r0, #8]
 801fc12:	6006      	str	r6, [r0, #0]
 801fc14:	60c6      	str	r6, [r0, #12]
 801fc16:	9b03      	ldr	r3, [sp, #12]
 801fc18:	69db      	ldr	r3, [r3, #28]
 801fc1a:	6819      	ldr	r1, [r3, #0]
 801fc1c:	2900      	cmp	r1, #0
 801fc1e:	d00b      	beq.n	801fc38 <_dtoa_r+0x58>
 801fc20:	685a      	ldr	r2, [r3, #4]
 801fc22:	2301      	movs	r3, #1
 801fc24:	4093      	lsls	r3, r2
 801fc26:	604a      	str	r2, [r1, #4]
 801fc28:	608b      	str	r3, [r1, #8]
 801fc2a:	9803      	ldr	r0, [sp, #12]
 801fc2c:	f001 fa82 	bl	8021134 <_Bfree>
 801fc30:	2200      	movs	r2, #0
 801fc32:	9b03      	ldr	r3, [sp, #12]
 801fc34:	69db      	ldr	r3, [r3, #28]
 801fc36:	601a      	str	r2, [r3, #0]
 801fc38:	2d00      	cmp	r5, #0
 801fc3a:	da1e      	bge.n	801fc7a <_dtoa_r+0x9a>
 801fc3c:	2301      	movs	r3, #1
 801fc3e:	603b      	str	r3, [r7, #0]
 801fc40:	006b      	lsls	r3, r5, #1
 801fc42:	085b      	lsrs	r3, r3, #1
 801fc44:	930b      	str	r3, [sp, #44]	@ 0x2c
 801fc46:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 801fc48:	4bb8      	ldr	r3, [pc, #736]	@ (801ff2c <_dtoa_r+0x34c>)
 801fc4a:	4ab8      	ldr	r2, [pc, #736]	@ (801ff2c <_dtoa_r+0x34c>)
 801fc4c:	403b      	ands	r3, r7
 801fc4e:	4293      	cmp	r3, r2
 801fc50:	d116      	bne.n	801fc80 <_dtoa_r+0xa0>
 801fc52:	4bb7      	ldr	r3, [pc, #732]	@ (801ff30 <_dtoa_r+0x350>)
 801fc54:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 801fc56:	6013      	str	r3, [r2, #0]
 801fc58:	033b      	lsls	r3, r7, #12
 801fc5a:	0b1b      	lsrs	r3, r3, #12
 801fc5c:	4323      	orrs	r3, r4
 801fc5e:	d101      	bne.n	801fc64 <_dtoa_r+0x84>
 801fc60:	f000 fd83 	bl	802076a <_dtoa_r+0xb8a>
 801fc64:	4bb3      	ldr	r3, [pc, #716]	@ (801ff34 <_dtoa_r+0x354>)
 801fc66:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 801fc68:	9308      	str	r3, [sp, #32]
 801fc6a:	2a00      	cmp	r2, #0
 801fc6c:	d002      	beq.n	801fc74 <_dtoa_r+0x94>
 801fc6e:	4bb2      	ldr	r3, [pc, #712]	@ (801ff38 <_dtoa_r+0x358>)
 801fc70:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 801fc72:	6013      	str	r3, [r2, #0]
 801fc74:	9808      	ldr	r0, [sp, #32]
 801fc76:	b01d      	add	sp, #116	@ 0x74
 801fc78:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801fc7a:	2300      	movs	r3, #0
 801fc7c:	603b      	str	r3, [r7, #0]
 801fc7e:	e7e2      	b.n	801fc46 <_dtoa_r+0x66>
 801fc80:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801fc82:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801fc84:	9212      	str	r2, [sp, #72]	@ 0x48
 801fc86:	9313      	str	r3, [sp, #76]	@ 0x4c
 801fc88:	9812      	ldr	r0, [sp, #72]	@ 0x48
 801fc8a:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 801fc8c:	2200      	movs	r2, #0
 801fc8e:	2300      	movs	r3, #0
 801fc90:	f7e0 fc0e 	bl	80004b0 <__aeabi_dcmpeq>
 801fc94:	1e06      	subs	r6, r0, #0
 801fc96:	d00b      	beq.n	801fcb0 <_dtoa_r+0xd0>
 801fc98:	2301      	movs	r3, #1
 801fc9a:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 801fc9c:	6013      	str	r3, [r2, #0]
 801fc9e:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 801fca0:	2b00      	cmp	r3, #0
 801fca2:	d002      	beq.n	801fcaa <_dtoa_r+0xca>
 801fca4:	4ba5      	ldr	r3, [pc, #660]	@ (801ff3c <_dtoa_r+0x35c>)
 801fca6:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 801fca8:	6013      	str	r3, [r2, #0]
 801fcaa:	4ba5      	ldr	r3, [pc, #660]	@ (801ff40 <_dtoa_r+0x360>)
 801fcac:	9308      	str	r3, [sp, #32]
 801fcae:	e7e1      	b.n	801fc74 <_dtoa_r+0x94>
 801fcb0:	ab1a      	add	r3, sp, #104	@ 0x68
 801fcb2:	9301      	str	r3, [sp, #4]
 801fcb4:	ab1b      	add	r3, sp, #108	@ 0x6c
 801fcb6:	9300      	str	r3, [sp, #0]
 801fcb8:	9803      	ldr	r0, [sp, #12]
 801fcba:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801fcbc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801fcbe:	f001 fdf1 	bl	80218a4 <__d2b>
 801fcc2:	007a      	lsls	r2, r7, #1
 801fcc4:	9005      	str	r0, [sp, #20]
 801fcc6:	0d52      	lsrs	r2, r2, #21
 801fcc8:	d100      	bne.n	801fccc <_dtoa_r+0xec>
 801fcca:	e07b      	b.n	801fdc4 <_dtoa_r+0x1e4>
 801fccc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801fcce:	9618      	str	r6, [sp, #96]	@ 0x60
 801fcd0:	0319      	lsls	r1, r3, #12
 801fcd2:	4b9c      	ldr	r3, [pc, #624]	@ (801ff44 <_dtoa_r+0x364>)
 801fcd4:	0b09      	lsrs	r1, r1, #12
 801fcd6:	430b      	orrs	r3, r1
 801fcd8:	499b      	ldr	r1, [pc, #620]	@ (801ff48 <_dtoa_r+0x368>)
 801fcda:	1857      	adds	r7, r2, r1
 801fcdc:	9812      	ldr	r0, [sp, #72]	@ 0x48
 801fcde:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 801fce0:	0019      	movs	r1, r3
 801fce2:	2200      	movs	r2, #0
 801fce4:	4b99      	ldr	r3, [pc, #612]	@ (801ff4c <_dtoa_r+0x36c>)
 801fce6:	f7e2 ff71 	bl	8002bcc <__aeabi_dsub>
 801fcea:	4a99      	ldr	r2, [pc, #612]	@ (801ff50 <_dtoa_r+0x370>)
 801fcec:	4b99      	ldr	r3, [pc, #612]	@ (801ff54 <_dtoa_r+0x374>)
 801fcee:	f7e2 fca5 	bl	800263c <__aeabi_dmul>
 801fcf2:	4a99      	ldr	r2, [pc, #612]	@ (801ff58 <_dtoa_r+0x378>)
 801fcf4:	4b99      	ldr	r3, [pc, #612]	@ (801ff5c <_dtoa_r+0x37c>)
 801fcf6:	f7e1 fcf9 	bl	80016ec <__aeabi_dadd>
 801fcfa:	0004      	movs	r4, r0
 801fcfc:	0038      	movs	r0, r7
 801fcfe:	000d      	movs	r5, r1
 801fd00:	f7e3 fb5e 	bl	80033c0 <__aeabi_i2d>
 801fd04:	4a96      	ldr	r2, [pc, #600]	@ (801ff60 <_dtoa_r+0x380>)
 801fd06:	4b97      	ldr	r3, [pc, #604]	@ (801ff64 <_dtoa_r+0x384>)
 801fd08:	f7e2 fc98 	bl	800263c <__aeabi_dmul>
 801fd0c:	0002      	movs	r2, r0
 801fd0e:	000b      	movs	r3, r1
 801fd10:	0020      	movs	r0, r4
 801fd12:	0029      	movs	r1, r5
 801fd14:	f7e1 fcea 	bl	80016ec <__aeabi_dadd>
 801fd18:	0004      	movs	r4, r0
 801fd1a:	000d      	movs	r5, r1
 801fd1c:	f7e3 fb14 	bl	8003348 <__aeabi_d2iz>
 801fd20:	2200      	movs	r2, #0
 801fd22:	9004      	str	r0, [sp, #16]
 801fd24:	2300      	movs	r3, #0
 801fd26:	0020      	movs	r0, r4
 801fd28:	0029      	movs	r1, r5
 801fd2a:	f7e0 fbc7 	bl	80004bc <__aeabi_dcmplt>
 801fd2e:	2800      	cmp	r0, #0
 801fd30:	d00b      	beq.n	801fd4a <_dtoa_r+0x16a>
 801fd32:	9804      	ldr	r0, [sp, #16]
 801fd34:	f7e3 fb44 	bl	80033c0 <__aeabi_i2d>
 801fd38:	002b      	movs	r3, r5
 801fd3a:	0022      	movs	r2, r4
 801fd3c:	f7e0 fbb8 	bl	80004b0 <__aeabi_dcmpeq>
 801fd40:	4243      	negs	r3, r0
 801fd42:	4158      	adcs	r0, r3
 801fd44:	9b04      	ldr	r3, [sp, #16]
 801fd46:	1a1b      	subs	r3, r3, r0
 801fd48:	9304      	str	r3, [sp, #16]
 801fd4a:	2301      	movs	r3, #1
 801fd4c:	9315      	str	r3, [sp, #84]	@ 0x54
 801fd4e:	9b04      	ldr	r3, [sp, #16]
 801fd50:	2b16      	cmp	r3, #22
 801fd52:	d810      	bhi.n	801fd76 <_dtoa_r+0x196>
 801fd54:	9812      	ldr	r0, [sp, #72]	@ 0x48
 801fd56:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 801fd58:	9a04      	ldr	r2, [sp, #16]
 801fd5a:	4b83      	ldr	r3, [pc, #524]	@ (801ff68 <_dtoa_r+0x388>)
 801fd5c:	00d2      	lsls	r2, r2, #3
 801fd5e:	189b      	adds	r3, r3, r2
 801fd60:	681a      	ldr	r2, [r3, #0]
 801fd62:	685b      	ldr	r3, [r3, #4]
 801fd64:	f7e0 fbaa 	bl	80004bc <__aeabi_dcmplt>
 801fd68:	2800      	cmp	r0, #0
 801fd6a:	d047      	beq.n	801fdfc <_dtoa_r+0x21c>
 801fd6c:	9b04      	ldr	r3, [sp, #16]
 801fd6e:	3b01      	subs	r3, #1
 801fd70:	9304      	str	r3, [sp, #16]
 801fd72:	2300      	movs	r3, #0
 801fd74:	9315      	str	r3, [sp, #84]	@ 0x54
 801fd76:	2200      	movs	r2, #0
 801fd78:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 801fd7a:	9206      	str	r2, [sp, #24]
 801fd7c:	1bdb      	subs	r3, r3, r7
 801fd7e:	1e5a      	subs	r2, r3, #1
 801fd80:	d53e      	bpl.n	801fe00 <_dtoa_r+0x220>
 801fd82:	2201      	movs	r2, #1
 801fd84:	1ad3      	subs	r3, r2, r3
 801fd86:	9306      	str	r3, [sp, #24]
 801fd88:	2300      	movs	r3, #0
 801fd8a:	930d      	str	r3, [sp, #52]	@ 0x34
 801fd8c:	9b04      	ldr	r3, [sp, #16]
 801fd8e:	2b00      	cmp	r3, #0
 801fd90:	db38      	blt.n	801fe04 <_dtoa_r+0x224>
 801fd92:	9a04      	ldr	r2, [sp, #16]
 801fd94:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801fd96:	4694      	mov	ip, r2
 801fd98:	4463      	add	r3, ip
 801fd9a:	930d      	str	r3, [sp, #52]	@ 0x34
 801fd9c:	2300      	movs	r3, #0
 801fd9e:	9214      	str	r2, [sp, #80]	@ 0x50
 801fda0:	930f      	str	r3, [sp, #60]	@ 0x3c
 801fda2:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 801fda4:	2401      	movs	r4, #1
 801fda6:	2b09      	cmp	r3, #9
 801fda8:	d867      	bhi.n	801fe7a <_dtoa_r+0x29a>
 801fdaa:	2b05      	cmp	r3, #5
 801fdac:	dd02      	ble.n	801fdb4 <_dtoa_r+0x1d4>
 801fdae:	2400      	movs	r4, #0
 801fdb0:	3b04      	subs	r3, #4
 801fdb2:	9322      	str	r3, [sp, #136]	@ 0x88
 801fdb4:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 801fdb6:	1e98      	subs	r0, r3, #2
 801fdb8:	2803      	cmp	r0, #3
 801fdba:	d867      	bhi.n	801fe8c <_dtoa_r+0x2ac>
 801fdbc:	f7e0 f9de 	bl	800017c <__gnu_thumb1_case_uqi>
 801fdc0:	5b383a2b 	.word	0x5b383a2b
 801fdc4:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 801fdc6:	9e1a      	ldr	r6, [sp, #104]	@ 0x68
 801fdc8:	18f6      	adds	r6, r6, r3
 801fdca:	4b68      	ldr	r3, [pc, #416]	@ (801ff6c <_dtoa_r+0x38c>)
 801fdcc:	18f2      	adds	r2, r6, r3
 801fdce:	2a20      	cmp	r2, #32
 801fdd0:	dd0f      	ble.n	801fdf2 <_dtoa_r+0x212>
 801fdd2:	2340      	movs	r3, #64	@ 0x40
 801fdd4:	1a9b      	subs	r3, r3, r2
 801fdd6:	409f      	lsls	r7, r3
 801fdd8:	4b65      	ldr	r3, [pc, #404]	@ (801ff70 <_dtoa_r+0x390>)
 801fdda:	0038      	movs	r0, r7
 801fddc:	18f3      	adds	r3, r6, r3
 801fdde:	40dc      	lsrs	r4, r3
 801fde0:	4320      	orrs	r0, r4
 801fde2:	f7e3 fb1b 	bl	800341c <__aeabi_ui2d>
 801fde6:	2201      	movs	r2, #1
 801fde8:	4b62      	ldr	r3, [pc, #392]	@ (801ff74 <_dtoa_r+0x394>)
 801fdea:	1e77      	subs	r7, r6, #1
 801fdec:	18cb      	adds	r3, r1, r3
 801fdee:	9218      	str	r2, [sp, #96]	@ 0x60
 801fdf0:	e776      	b.n	801fce0 <_dtoa_r+0x100>
 801fdf2:	2320      	movs	r3, #32
 801fdf4:	0020      	movs	r0, r4
 801fdf6:	1a9b      	subs	r3, r3, r2
 801fdf8:	4098      	lsls	r0, r3
 801fdfa:	e7f2      	b.n	801fde2 <_dtoa_r+0x202>
 801fdfc:	9015      	str	r0, [sp, #84]	@ 0x54
 801fdfe:	e7ba      	b.n	801fd76 <_dtoa_r+0x196>
 801fe00:	920d      	str	r2, [sp, #52]	@ 0x34
 801fe02:	e7c3      	b.n	801fd8c <_dtoa_r+0x1ac>
 801fe04:	9b06      	ldr	r3, [sp, #24]
 801fe06:	9a04      	ldr	r2, [sp, #16]
 801fe08:	1a9b      	subs	r3, r3, r2
 801fe0a:	9306      	str	r3, [sp, #24]
 801fe0c:	4253      	negs	r3, r2
 801fe0e:	930f      	str	r3, [sp, #60]	@ 0x3c
 801fe10:	2300      	movs	r3, #0
 801fe12:	9314      	str	r3, [sp, #80]	@ 0x50
 801fe14:	e7c5      	b.n	801fda2 <_dtoa_r+0x1c2>
 801fe16:	2300      	movs	r3, #0
 801fe18:	9310      	str	r3, [sp, #64]	@ 0x40
 801fe1a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801fe1c:	930e      	str	r3, [sp, #56]	@ 0x38
 801fe1e:	9309      	str	r3, [sp, #36]	@ 0x24
 801fe20:	2b00      	cmp	r3, #0
 801fe22:	dc13      	bgt.n	801fe4c <_dtoa_r+0x26c>
 801fe24:	2301      	movs	r3, #1
 801fe26:	001a      	movs	r2, r3
 801fe28:	930e      	str	r3, [sp, #56]	@ 0x38
 801fe2a:	9309      	str	r3, [sp, #36]	@ 0x24
 801fe2c:	9223      	str	r2, [sp, #140]	@ 0x8c
 801fe2e:	e00d      	b.n	801fe4c <_dtoa_r+0x26c>
 801fe30:	2301      	movs	r3, #1
 801fe32:	e7f1      	b.n	801fe18 <_dtoa_r+0x238>
 801fe34:	2300      	movs	r3, #0
 801fe36:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 801fe38:	9310      	str	r3, [sp, #64]	@ 0x40
 801fe3a:	4694      	mov	ip, r2
 801fe3c:	9b04      	ldr	r3, [sp, #16]
 801fe3e:	4463      	add	r3, ip
 801fe40:	930e      	str	r3, [sp, #56]	@ 0x38
 801fe42:	3301      	adds	r3, #1
 801fe44:	9309      	str	r3, [sp, #36]	@ 0x24
 801fe46:	2b00      	cmp	r3, #0
 801fe48:	dc00      	bgt.n	801fe4c <_dtoa_r+0x26c>
 801fe4a:	2301      	movs	r3, #1
 801fe4c:	9a03      	ldr	r2, [sp, #12]
 801fe4e:	2100      	movs	r1, #0
 801fe50:	69d0      	ldr	r0, [r2, #28]
 801fe52:	2204      	movs	r2, #4
 801fe54:	0015      	movs	r5, r2
 801fe56:	3514      	adds	r5, #20
 801fe58:	429d      	cmp	r5, r3
 801fe5a:	d91b      	bls.n	801fe94 <_dtoa_r+0x2b4>
 801fe5c:	6041      	str	r1, [r0, #4]
 801fe5e:	9803      	ldr	r0, [sp, #12]
 801fe60:	f001 f924 	bl	80210ac <_Balloc>
 801fe64:	9008      	str	r0, [sp, #32]
 801fe66:	2800      	cmp	r0, #0
 801fe68:	d117      	bne.n	801fe9a <_dtoa_r+0x2ba>
 801fe6a:	21b0      	movs	r1, #176	@ 0xb0
 801fe6c:	4b42      	ldr	r3, [pc, #264]	@ (801ff78 <_dtoa_r+0x398>)
 801fe6e:	482e      	ldr	r0, [pc, #184]	@ (801ff28 <_dtoa_r+0x348>)
 801fe70:	9a08      	ldr	r2, [sp, #32]
 801fe72:	31ff      	adds	r1, #255	@ 0xff
 801fe74:	e6c9      	b.n	801fc0a <_dtoa_r+0x2a>
 801fe76:	2301      	movs	r3, #1
 801fe78:	e7dd      	b.n	801fe36 <_dtoa_r+0x256>
 801fe7a:	2300      	movs	r3, #0
 801fe7c:	9410      	str	r4, [sp, #64]	@ 0x40
 801fe7e:	9322      	str	r3, [sp, #136]	@ 0x88
 801fe80:	3b01      	subs	r3, #1
 801fe82:	930e      	str	r3, [sp, #56]	@ 0x38
 801fe84:	9309      	str	r3, [sp, #36]	@ 0x24
 801fe86:	2200      	movs	r2, #0
 801fe88:	3313      	adds	r3, #19
 801fe8a:	e7cf      	b.n	801fe2c <_dtoa_r+0x24c>
 801fe8c:	2301      	movs	r3, #1
 801fe8e:	9310      	str	r3, [sp, #64]	@ 0x40
 801fe90:	3b02      	subs	r3, #2
 801fe92:	e7f6      	b.n	801fe82 <_dtoa_r+0x2a2>
 801fe94:	3101      	adds	r1, #1
 801fe96:	0052      	lsls	r2, r2, #1
 801fe98:	e7dc      	b.n	801fe54 <_dtoa_r+0x274>
 801fe9a:	9b03      	ldr	r3, [sp, #12]
 801fe9c:	9a08      	ldr	r2, [sp, #32]
 801fe9e:	69db      	ldr	r3, [r3, #28]
 801fea0:	601a      	str	r2, [r3, #0]
 801fea2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801fea4:	2b0e      	cmp	r3, #14
 801fea6:	d900      	bls.n	801feaa <_dtoa_r+0x2ca>
 801fea8:	e0d9      	b.n	802005e <_dtoa_r+0x47e>
 801feaa:	2c00      	cmp	r4, #0
 801feac:	d100      	bne.n	801feb0 <_dtoa_r+0x2d0>
 801feae:	e0d6      	b.n	802005e <_dtoa_r+0x47e>
 801feb0:	9b04      	ldr	r3, [sp, #16]
 801feb2:	2b00      	cmp	r3, #0
 801feb4:	dd64      	ble.n	801ff80 <_dtoa_r+0x3a0>
 801feb6:	210f      	movs	r1, #15
 801feb8:	9a04      	ldr	r2, [sp, #16]
 801feba:	4b2b      	ldr	r3, [pc, #172]	@ (801ff68 <_dtoa_r+0x388>)
 801febc:	400a      	ands	r2, r1
 801febe:	00d2      	lsls	r2, r2, #3
 801fec0:	189b      	adds	r3, r3, r2
 801fec2:	681e      	ldr	r6, [r3, #0]
 801fec4:	685f      	ldr	r7, [r3, #4]
 801fec6:	9b04      	ldr	r3, [sp, #16]
 801fec8:	2402      	movs	r4, #2
 801feca:	111d      	asrs	r5, r3, #4
 801fecc:	05db      	lsls	r3, r3, #23
 801fece:	d50a      	bpl.n	801fee6 <_dtoa_r+0x306>
 801fed0:	4b2a      	ldr	r3, [pc, #168]	@ (801ff7c <_dtoa_r+0x39c>)
 801fed2:	400d      	ands	r5, r1
 801fed4:	6a1a      	ldr	r2, [r3, #32]
 801fed6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801fed8:	9812      	ldr	r0, [sp, #72]	@ 0x48
 801feda:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 801fedc:	f7e1 ff6a 	bl	8001db4 <__aeabi_ddiv>
 801fee0:	900a      	str	r0, [sp, #40]	@ 0x28
 801fee2:	910b      	str	r1, [sp, #44]	@ 0x2c
 801fee4:	3401      	adds	r4, #1
 801fee6:	4b25      	ldr	r3, [pc, #148]	@ (801ff7c <_dtoa_r+0x39c>)
 801fee8:	930c      	str	r3, [sp, #48]	@ 0x30
 801feea:	2d00      	cmp	r5, #0
 801feec:	d108      	bne.n	801ff00 <_dtoa_r+0x320>
 801feee:	980a      	ldr	r0, [sp, #40]	@ 0x28
 801fef0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801fef2:	0032      	movs	r2, r6
 801fef4:	003b      	movs	r3, r7
 801fef6:	f7e1 ff5d 	bl	8001db4 <__aeabi_ddiv>
 801fefa:	900a      	str	r0, [sp, #40]	@ 0x28
 801fefc:	910b      	str	r1, [sp, #44]	@ 0x2c
 801fefe:	e05a      	b.n	801ffb6 <_dtoa_r+0x3d6>
 801ff00:	2301      	movs	r3, #1
 801ff02:	421d      	tst	r5, r3
 801ff04:	d009      	beq.n	801ff1a <_dtoa_r+0x33a>
 801ff06:	18e4      	adds	r4, r4, r3
 801ff08:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801ff0a:	0030      	movs	r0, r6
 801ff0c:	681a      	ldr	r2, [r3, #0]
 801ff0e:	685b      	ldr	r3, [r3, #4]
 801ff10:	0039      	movs	r1, r7
 801ff12:	f7e2 fb93 	bl	800263c <__aeabi_dmul>
 801ff16:	0006      	movs	r6, r0
 801ff18:	000f      	movs	r7, r1
 801ff1a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801ff1c:	106d      	asrs	r5, r5, #1
 801ff1e:	3308      	adds	r3, #8
 801ff20:	e7e2      	b.n	801fee8 <_dtoa_r+0x308>
 801ff22:	46c0      	nop			@ (mov r8, r8)
 801ff24:	0802515a 	.word	0x0802515a
 801ff28:	08025171 	.word	0x08025171
 801ff2c:	7ff00000 	.word	0x7ff00000
 801ff30:	0000270f 	.word	0x0000270f
 801ff34:	08025156 	.word	0x08025156
 801ff38:	08025159 	.word	0x08025159
 801ff3c:	08025122 	.word	0x08025122
 801ff40:	08025121 	.word	0x08025121
 801ff44:	3ff00000 	.word	0x3ff00000
 801ff48:	fffffc01 	.word	0xfffffc01
 801ff4c:	3ff80000 	.word	0x3ff80000
 801ff50:	636f4361 	.word	0x636f4361
 801ff54:	3fd287a7 	.word	0x3fd287a7
 801ff58:	8b60c8b3 	.word	0x8b60c8b3
 801ff5c:	3fc68a28 	.word	0x3fc68a28
 801ff60:	509f79fb 	.word	0x509f79fb
 801ff64:	3fd34413 	.word	0x3fd34413
 801ff68:	080252c8 	.word	0x080252c8
 801ff6c:	00000432 	.word	0x00000432
 801ff70:	00000412 	.word	0x00000412
 801ff74:	fe100000 	.word	0xfe100000
 801ff78:	080251c9 	.word	0x080251c9
 801ff7c:	080252a0 	.word	0x080252a0
 801ff80:	9b04      	ldr	r3, [sp, #16]
 801ff82:	2402      	movs	r4, #2
 801ff84:	2b00      	cmp	r3, #0
 801ff86:	d016      	beq.n	801ffb6 <_dtoa_r+0x3d6>
 801ff88:	9812      	ldr	r0, [sp, #72]	@ 0x48
 801ff8a:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 801ff8c:	220f      	movs	r2, #15
 801ff8e:	425d      	negs	r5, r3
 801ff90:	402a      	ands	r2, r5
 801ff92:	4bd7      	ldr	r3, [pc, #860]	@ (80202f0 <_dtoa_r+0x710>)
 801ff94:	00d2      	lsls	r2, r2, #3
 801ff96:	189b      	adds	r3, r3, r2
 801ff98:	681a      	ldr	r2, [r3, #0]
 801ff9a:	685b      	ldr	r3, [r3, #4]
 801ff9c:	f7e2 fb4e 	bl	800263c <__aeabi_dmul>
 801ffa0:	2701      	movs	r7, #1
 801ffa2:	2300      	movs	r3, #0
 801ffa4:	900a      	str	r0, [sp, #40]	@ 0x28
 801ffa6:	910b      	str	r1, [sp, #44]	@ 0x2c
 801ffa8:	4ed2      	ldr	r6, [pc, #840]	@ (80202f4 <_dtoa_r+0x714>)
 801ffaa:	112d      	asrs	r5, r5, #4
 801ffac:	2d00      	cmp	r5, #0
 801ffae:	d000      	beq.n	801ffb2 <_dtoa_r+0x3d2>
 801ffb0:	e0ba      	b.n	8020128 <_dtoa_r+0x548>
 801ffb2:	2b00      	cmp	r3, #0
 801ffb4:	d1a1      	bne.n	801fefa <_dtoa_r+0x31a>
 801ffb6:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 801ffb8:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 801ffba:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801ffbc:	2b00      	cmp	r3, #0
 801ffbe:	d100      	bne.n	801ffc2 <_dtoa_r+0x3e2>
 801ffc0:	e0bd      	b.n	802013e <_dtoa_r+0x55e>
 801ffc2:	2200      	movs	r2, #0
 801ffc4:	0030      	movs	r0, r6
 801ffc6:	0039      	movs	r1, r7
 801ffc8:	4bcb      	ldr	r3, [pc, #812]	@ (80202f8 <_dtoa_r+0x718>)
 801ffca:	f7e0 fa77 	bl	80004bc <__aeabi_dcmplt>
 801ffce:	2800      	cmp	r0, #0
 801ffd0:	d100      	bne.n	801ffd4 <_dtoa_r+0x3f4>
 801ffd2:	e0b4      	b.n	802013e <_dtoa_r+0x55e>
 801ffd4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801ffd6:	2b00      	cmp	r3, #0
 801ffd8:	d100      	bne.n	801ffdc <_dtoa_r+0x3fc>
 801ffda:	e0b0      	b.n	802013e <_dtoa_r+0x55e>
 801ffdc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801ffde:	2b00      	cmp	r3, #0
 801ffe0:	dd39      	ble.n	8020056 <_dtoa_r+0x476>
 801ffe2:	9b04      	ldr	r3, [sp, #16]
 801ffe4:	2200      	movs	r2, #0
 801ffe6:	3b01      	subs	r3, #1
 801ffe8:	930c      	str	r3, [sp, #48]	@ 0x30
 801ffea:	0030      	movs	r0, r6
 801ffec:	4bc3      	ldr	r3, [pc, #780]	@ (80202fc <_dtoa_r+0x71c>)
 801ffee:	0039      	movs	r1, r7
 801fff0:	f7e2 fb24 	bl	800263c <__aeabi_dmul>
 801fff4:	900a      	str	r0, [sp, #40]	@ 0x28
 801fff6:	910b      	str	r1, [sp, #44]	@ 0x2c
 801fff8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801fffa:	3401      	adds	r4, #1
 801fffc:	0020      	movs	r0, r4
 801fffe:	9311      	str	r3, [sp, #68]	@ 0x44
 8020000:	f7e3 f9de 	bl	80033c0 <__aeabi_i2d>
 8020004:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8020006:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8020008:	f7e2 fb18 	bl	800263c <__aeabi_dmul>
 802000c:	4bbc      	ldr	r3, [pc, #752]	@ (8020300 <_dtoa_r+0x720>)
 802000e:	2200      	movs	r2, #0
 8020010:	f7e1 fb6c 	bl	80016ec <__aeabi_dadd>
 8020014:	4bbb      	ldr	r3, [pc, #748]	@ (8020304 <_dtoa_r+0x724>)
 8020016:	0006      	movs	r6, r0
 8020018:	18cf      	adds	r7, r1, r3
 802001a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 802001c:	2b00      	cmp	r3, #0
 802001e:	d000      	beq.n	8020022 <_dtoa_r+0x442>
 8020020:	e091      	b.n	8020146 <_dtoa_r+0x566>
 8020022:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8020024:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8020026:	2200      	movs	r2, #0
 8020028:	4bb7      	ldr	r3, [pc, #732]	@ (8020308 <_dtoa_r+0x728>)
 802002a:	f7e2 fdcf 	bl	8002bcc <__aeabi_dsub>
 802002e:	0032      	movs	r2, r6
 8020030:	003b      	movs	r3, r7
 8020032:	0004      	movs	r4, r0
 8020034:	000d      	movs	r5, r1
 8020036:	f7e0 fa55 	bl	80004e4 <__aeabi_dcmpgt>
 802003a:	2800      	cmp	r0, #0
 802003c:	d000      	beq.n	8020040 <_dtoa_r+0x460>
 802003e:	e29d      	b.n	802057c <_dtoa_r+0x99c>
 8020040:	2180      	movs	r1, #128	@ 0x80
 8020042:	0609      	lsls	r1, r1, #24
 8020044:	187b      	adds	r3, r7, r1
 8020046:	0032      	movs	r2, r6
 8020048:	0020      	movs	r0, r4
 802004a:	0029      	movs	r1, r5
 802004c:	f7e0 fa36 	bl	80004bc <__aeabi_dcmplt>
 8020050:	2800      	cmp	r0, #0
 8020052:	d000      	beq.n	8020056 <_dtoa_r+0x476>
 8020054:	e130      	b.n	80202b8 <_dtoa_r+0x6d8>
 8020056:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8020058:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 802005a:	930a      	str	r3, [sp, #40]	@ 0x28
 802005c:	940b      	str	r4, [sp, #44]	@ 0x2c
 802005e:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8020060:	2b00      	cmp	r3, #0
 8020062:	da00      	bge.n	8020066 <_dtoa_r+0x486>
 8020064:	e177      	b.n	8020356 <_dtoa_r+0x776>
 8020066:	9a04      	ldr	r2, [sp, #16]
 8020068:	2a0e      	cmp	r2, #14
 802006a:	dd00      	ble.n	802006e <_dtoa_r+0x48e>
 802006c:	e173      	b.n	8020356 <_dtoa_r+0x776>
 802006e:	4ba0      	ldr	r3, [pc, #640]	@ (80202f0 <_dtoa_r+0x710>)
 8020070:	00d2      	lsls	r2, r2, #3
 8020072:	189b      	adds	r3, r3, r2
 8020074:	685c      	ldr	r4, [r3, #4]
 8020076:	681b      	ldr	r3, [r3, #0]
 8020078:	9306      	str	r3, [sp, #24]
 802007a:	9407      	str	r4, [sp, #28]
 802007c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 802007e:	2b00      	cmp	r3, #0
 8020080:	da03      	bge.n	802008a <_dtoa_r+0x4aa>
 8020082:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8020084:	2b00      	cmp	r3, #0
 8020086:	dc00      	bgt.n	802008a <_dtoa_r+0x4aa>
 8020088:	e106      	b.n	8020298 <_dtoa_r+0x6b8>
 802008a:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 802008c:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 802008e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8020090:	9d08      	ldr	r5, [sp, #32]
 8020092:	3b01      	subs	r3, #1
 8020094:	195b      	adds	r3, r3, r5
 8020096:	930a      	str	r3, [sp, #40]	@ 0x28
 8020098:	9a06      	ldr	r2, [sp, #24]
 802009a:	9b07      	ldr	r3, [sp, #28]
 802009c:	0030      	movs	r0, r6
 802009e:	0039      	movs	r1, r7
 80200a0:	f7e1 fe88 	bl	8001db4 <__aeabi_ddiv>
 80200a4:	f7e3 f950 	bl	8003348 <__aeabi_d2iz>
 80200a8:	9009      	str	r0, [sp, #36]	@ 0x24
 80200aa:	f7e3 f989 	bl	80033c0 <__aeabi_i2d>
 80200ae:	9a06      	ldr	r2, [sp, #24]
 80200b0:	9b07      	ldr	r3, [sp, #28]
 80200b2:	f7e2 fac3 	bl	800263c <__aeabi_dmul>
 80200b6:	0002      	movs	r2, r0
 80200b8:	000b      	movs	r3, r1
 80200ba:	0030      	movs	r0, r6
 80200bc:	0039      	movs	r1, r7
 80200be:	f7e2 fd85 	bl	8002bcc <__aeabi_dsub>
 80200c2:	002b      	movs	r3, r5
 80200c4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80200c6:	3501      	adds	r5, #1
 80200c8:	3230      	adds	r2, #48	@ 0x30
 80200ca:	701a      	strb	r2, [r3, #0]
 80200cc:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80200ce:	002c      	movs	r4, r5
 80200d0:	429a      	cmp	r2, r3
 80200d2:	d000      	beq.n	80200d6 <_dtoa_r+0x4f6>
 80200d4:	e131      	b.n	802033a <_dtoa_r+0x75a>
 80200d6:	0002      	movs	r2, r0
 80200d8:	000b      	movs	r3, r1
 80200da:	f7e1 fb07 	bl	80016ec <__aeabi_dadd>
 80200de:	9a06      	ldr	r2, [sp, #24]
 80200e0:	9b07      	ldr	r3, [sp, #28]
 80200e2:	0006      	movs	r6, r0
 80200e4:	000f      	movs	r7, r1
 80200e6:	f7e0 f9fd 	bl	80004e4 <__aeabi_dcmpgt>
 80200ea:	2800      	cmp	r0, #0
 80200ec:	d000      	beq.n	80200f0 <_dtoa_r+0x510>
 80200ee:	e10f      	b.n	8020310 <_dtoa_r+0x730>
 80200f0:	9a06      	ldr	r2, [sp, #24]
 80200f2:	9b07      	ldr	r3, [sp, #28]
 80200f4:	0030      	movs	r0, r6
 80200f6:	0039      	movs	r1, r7
 80200f8:	f7e0 f9da 	bl	80004b0 <__aeabi_dcmpeq>
 80200fc:	2800      	cmp	r0, #0
 80200fe:	d003      	beq.n	8020108 <_dtoa_r+0x528>
 8020100:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8020102:	07dd      	lsls	r5, r3, #31
 8020104:	d500      	bpl.n	8020108 <_dtoa_r+0x528>
 8020106:	e103      	b.n	8020310 <_dtoa_r+0x730>
 8020108:	9905      	ldr	r1, [sp, #20]
 802010a:	9803      	ldr	r0, [sp, #12]
 802010c:	f001 f812 	bl	8021134 <_Bfree>
 8020110:	2300      	movs	r3, #0
 8020112:	7023      	strb	r3, [r4, #0]
 8020114:	9b04      	ldr	r3, [sp, #16]
 8020116:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8020118:	3301      	adds	r3, #1
 802011a:	6013      	str	r3, [r2, #0]
 802011c:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 802011e:	2b00      	cmp	r3, #0
 8020120:	d100      	bne.n	8020124 <_dtoa_r+0x544>
 8020122:	e5a7      	b.n	801fc74 <_dtoa_r+0x94>
 8020124:	601c      	str	r4, [r3, #0]
 8020126:	e5a5      	b.n	801fc74 <_dtoa_r+0x94>
 8020128:	423d      	tst	r5, r7
 802012a:	d005      	beq.n	8020138 <_dtoa_r+0x558>
 802012c:	6832      	ldr	r2, [r6, #0]
 802012e:	6873      	ldr	r3, [r6, #4]
 8020130:	f7e2 fa84 	bl	800263c <__aeabi_dmul>
 8020134:	003b      	movs	r3, r7
 8020136:	3401      	adds	r4, #1
 8020138:	106d      	asrs	r5, r5, #1
 802013a:	3608      	adds	r6, #8
 802013c:	e736      	b.n	801ffac <_dtoa_r+0x3cc>
 802013e:	9b04      	ldr	r3, [sp, #16]
 8020140:	930c      	str	r3, [sp, #48]	@ 0x30
 8020142:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8020144:	e75a      	b.n	801fffc <_dtoa_r+0x41c>
 8020146:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8020148:	4b69      	ldr	r3, [pc, #420]	@ (80202f0 <_dtoa_r+0x710>)
 802014a:	3a01      	subs	r2, #1
 802014c:	00d2      	lsls	r2, r2, #3
 802014e:	9910      	ldr	r1, [sp, #64]	@ 0x40
 8020150:	189b      	adds	r3, r3, r2
 8020152:	681a      	ldr	r2, [r3, #0]
 8020154:	685b      	ldr	r3, [r3, #4]
 8020156:	2900      	cmp	r1, #0
 8020158:	d04c      	beq.n	80201f4 <_dtoa_r+0x614>
 802015a:	2000      	movs	r0, #0
 802015c:	496b      	ldr	r1, [pc, #428]	@ (802030c <_dtoa_r+0x72c>)
 802015e:	f7e1 fe29 	bl	8001db4 <__aeabi_ddiv>
 8020162:	0032      	movs	r2, r6
 8020164:	003b      	movs	r3, r7
 8020166:	f7e2 fd31 	bl	8002bcc <__aeabi_dsub>
 802016a:	9a08      	ldr	r2, [sp, #32]
 802016c:	0006      	movs	r6, r0
 802016e:	4694      	mov	ip, r2
 8020170:	000f      	movs	r7, r1
 8020172:	9b08      	ldr	r3, [sp, #32]
 8020174:	9316      	str	r3, [sp, #88]	@ 0x58
 8020176:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8020178:	4463      	add	r3, ip
 802017a:	9311      	str	r3, [sp, #68]	@ 0x44
 802017c:	980a      	ldr	r0, [sp, #40]	@ 0x28
 802017e:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8020180:	f7e3 f8e2 	bl	8003348 <__aeabi_d2iz>
 8020184:	0005      	movs	r5, r0
 8020186:	f7e3 f91b 	bl	80033c0 <__aeabi_i2d>
 802018a:	0002      	movs	r2, r0
 802018c:	000b      	movs	r3, r1
 802018e:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8020190:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8020192:	f7e2 fd1b 	bl	8002bcc <__aeabi_dsub>
 8020196:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8020198:	3530      	adds	r5, #48	@ 0x30
 802019a:	1c5c      	adds	r4, r3, #1
 802019c:	701d      	strb	r5, [r3, #0]
 802019e:	0032      	movs	r2, r6
 80201a0:	003b      	movs	r3, r7
 80201a2:	900a      	str	r0, [sp, #40]	@ 0x28
 80201a4:	910b      	str	r1, [sp, #44]	@ 0x2c
 80201a6:	f7e0 f989 	bl	80004bc <__aeabi_dcmplt>
 80201aa:	2800      	cmp	r0, #0
 80201ac:	d16a      	bne.n	8020284 <_dtoa_r+0x6a4>
 80201ae:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80201b0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80201b2:	2000      	movs	r0, #0
 80201b4:	4950      	ldr	r1, [pc, #320]	@ (80202f8 <_dtoa_r+0x718>)
 80201b6:	f7e2 fd09 	bl	8002bcc <__aeabi_dsub>
 80201ba:	0032      	movs	r2, r6
 80201bc:	003b      	movs	r3, r7
 80201be:	f7e0 f97d 	bl	80004bc <__aeabi_dcmplt>
 80201c2:	2800      	cmp	r0, #0
 80201c4:	d000      	beq.n	80201c8 <_dtoa_r+0x5e8>
 80201c6:	e0a5      	b.n	8020314 <_dtoa_r+0x734>
 80201c8:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80201ca:	42a3      	cmp	r3, r4
 80201cc:	d100      	bne.n	80201d0 <_dtoa_r+0x5f0>
 80201ce:	e742      	b.n	8020056 <_dtoa_r+0x476>
 80201d0:	2200      	movs	r2, #0
 80201d2:	0030      	movs	r0, r6
 80201d4:	0039      	movs	r1, r7
 80201d6:	4b49      	ldr	r3, [pc, #292]	@ (80202fc <_dtoa_r+0x71c>)
 80201d8:	f7e2 fa30 	bl	800263c <__aeabi_dmul>
 80201dc:	2200      	movs	r2, #0
 80201de:	0006      	movs	r6, r0
 80201e0:	000f      	movs	r7, r1
 80201e2:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80201e4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80201e6:	4b45      	ldr	r3, [pc, #276]	@ (80202fc <_dtoa_r+0x71c>)
 80201e8:	f7e2 fa28 	bl	800263c <__aeabi_dmul>
 80201ec:	9416      	str	r4, [sp, #88]	@ 0x58
 80201ee:	900a      	str	r0, [sp, #40]	@ 0x28
 80201f0:	910b      	str	r1, [sp, #44]	@ 0x2c
 80201f2:	e7c3      	b.n	802017c <_dtoa_r+0x59c>
 80201f4:	0030      	movs	r0, r6
 80201f6:	0039      	movs	r1, r7
 80201f8:	f7e2 fa20 	bl	800263c <__aeabi_dmul>
 80201fc:	9d08      	ldr	r5, [sp, #32]
 80201fe:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8020200:	002b      	movs	r3, r5
 8020202:	4694      	mov	ip, r2
 8020204:	9016      	str	r0, [sp, #88]	@ 0x58
 8020206:	9117      	str	r1, [sp, #92]	@ 0x5c
 8020208:	4463      	add	r3, ip
 802020a:	9319      	str	r3, [sp, #100]	@ 0x64
 802020c:	980a      	ldr	r0, [sp, #40]	@ 0x28
 802020e:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8020210:	f7e3 f89a 	bl	8003348 <__aeabi_d2iz>
 8020214:	0004      	movs	r4, r0
 8020216:	f7e3 f8d3 	bl	80033c0 <__aeabi_i2d>
 802021a:	000b      	movs	r3, r1
 802021c:	0002      	movs	r2, r0
 802021e:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8020220:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8020222:	f7e2 fcd3 	bl	8002bcc <__aeabi_dsub>
 8020226:	3430      	adds	r4, #48	@ 0x30
 8020228:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 802022a:	702c      	strb	r4, [r5, #0]
 802022c:	3501      	adds	r5, #1
 802022e:	0006      	movs	r6, r0
 8020230:	000f      	movs	r7, r1
 8020232:	42ab      	cmp	r3, r5
 8020234:	d129      	bne.n	802028a <_dtoa_r+0x6aa>
 8020236:	9816      	ldr	r0, [sp, #88]	@ 0x58
 8020238:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 802023a:	9b08      	ldr	r3, [sp, #32]
 802023c:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 802023e:	469c      	mov	ip, r3
 8020240:	2200      	movs	r2, #0
 8020242:	4b32      	ldr	r3, [pc, #200]	@ (802030c <_dtoa_r+0x72c>)
 8020244:	4464      	add	r4, ip
 8020246:	f7e1 fa51 	bl	80016ec <__aeabi_dadd>
 802024a:	0002      	movs	r2, r0
 802024c:	000b      	movs	r3, r1
 802024e:	0030      	movs	r0, r6
 8020250:	0039      	movs	r1, r7
 8020252:	f7e0 f947 	bl	80004e4 <__aeabi_dcmpgt>
 8020256:	2800      	cmp	r0, #0
 8020258:	d15c      	bne.n	8020314 <_dtoa_r+0x734>
 802025a:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 802025c:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 802025e:	2000      	movs	r0, #0
 8020260:	492a      	ldr	r1, [pc, #168]	@ (802030c <_dtoa_r+0x72c>)
 8020262:	f7e2 fcb3 	bl	8002bcc <__aeabi_dsub>
 8020266:	0002      	movs	r2, r0
 8020268:	000b      	movs	r3, r1
 802026a:	0030      	movs	r0, r6
 802026c:	0039      	movs	r1, r7
 802026e:	f7e0 f925 	bl	80004bc <__aeabi_dcmplt>
 8020272:	2800      	cmp	r0, #0
 8020274:	d100      	bne.n	8020278 <_dtoa_r+0x698>
 8020276:	e6ee      	b.n	8020056 <_dtoa_r+0x476>
 8020278:	0023      	movs	r3, r4
 802027a:	3c01      	subs	r4, #1
 802027c:	7822      	ldrb	r2, [r4, #0]
 802027e:	2a30      	cmp	r2, #48	@ 0x30
 8020280:	d0fa      	beq.n	8020278 <_dtoa_r+0x698>
 8020282:	001c      	movs	r4, r3
 8020284:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8020286:	9304      	str	r3, [sp, #16]
 8020288:	e73e      	b.n	8020108 <_dtoa_r+0x528>
 802028a:	2200      	movs	r2, #0
 802028c:	4b1b      	ldr	r3, [pc, #108]	@ (80202fc <_dtoa_r+0x71c>)
 802028e:	f7e2 f9d5 	bl	800263c <__aeabi_dmul>
 8020292:	900a      	str	r0, [sp, #40]	@ 0x28
 8020294:	910b      	str	r1, [sp, #44]	@ 0x2c
 8020296:	e7b9      	b.n	802020c <_dtoa_r+0x62c>
 8020298:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802029a:	2b00      	cmp	r3, #0
 802029c:	d10c      	bne.n	80202b8 <_dtoa_r+0x6d8>
 802029e:	9806      	ldr	r0, [sp, #24]
 80202a0:	9907      	ldr	r1, [sp, #28]
 80202a2:	2200      	movs	r2, #0
 80202a4:	4b18      	ldr	r3, [pc, #96]	@ (8020308 <_dtoa_r+0x728>)
 80202a6:	f7e2 f9c9 	bl	800263c <__aeabi_dmul>
 80202aa:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80202ac:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80202ae:	f7e0 f923 	bl	80004f8 <__aeabi_dcmpge>
 80202b2:	2800      	cmp	r0, #0
 80202b4:	d100      	bne.n	80202b8 <_dtoa_r+0x6d8>
 80202b6:	e164      	b.n	8020582 <_dtoa_r+0x9a2>
 80202b8:	2600      	movs	r6, #0
 80202ba:	0037      	movs	r7, r6
 80202bc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80202be:	9c08      	ldr	r4, [sp, #32]
 80202c0:	43db      	mvns	r3, r3
 80202c2:	930c      	str	r3, [sp, #48]	@ 0x30
 80202c4:	2300      	movs	r3, #0
 80202c6:	9304      	str	r3, [sp, #16]
 80202c8:	0031      	movs	r1, r6
 80202ca:	9803      	ldr	r0, [sp, #12]
 80202cc:	f000 ff32 	bl	8021134 <_Bfree>
 80202d0:	2f00      	cmp	r7, #0
 80202d2:	d0d7      	beq.n	8020284 <_dtoa_r+0x6a4>
 80202d4:	9b04      	ldr	r3, [sp, #16]
 80202d6:	2b00      	cmp	r3, #0
 80202d8:	d005      	beq.n	80202e6 <_dtoa_r+0x706>
 80202da:	42bb      	cmp	r3, r7
 80202dc:	d003      	beq.n	80202e6 <_dtoa_r+0x706>
 80202de:	0019      	movs	r1, r3
 80202e0:	9803      	ldr	r0, [sp, #12]
 80202e2:	f000 ff27 	bl	8021134 <_Bfree>
 80202e6:	0039      	movs	r1, r7
 80202e8:	9803      	ldr	r0, [sp, #12]
 80202ea:	f000 ff23 	bl	8021134 <_Bfree>
 80202ee:	e7c9      	b.n	8020284 <_dtoa_r+0x6a4>
 80202f0:	080252c8 	.word	0x080252c8
 80202f4:	080252a0 	.word	0x080252a0
 80202f8:	3ff00000 	.word	0x3ff00000
 80202fc:	40240000 	.word	0x40240000
 8020300:	401c0000 	.word	0x401c0000
 8020304:	fcc00000 	.word	0xfcc00000
 8020308:	40140000 	.word	0x40140000
 802030c:	3fe00000 	.word	0x3fe00000
 8020310:	9b04      	ldr	r3, [sp, #16]
 8020312:	930c      	str	r3, [sp, #48]	@ 0x30
 8020314:	0023      	movs	r3, r4
 8020316:	001c      	movs	r4, r3
 8020318:	3b01      	subs	r3, #1
 802031a:	781a      	ldrb	r2, [r3, #0]
 802031c:	2a39      	cmp	r2, #57	@ 0x39
 802031e:	d108      	bne.n	8020332 <_dtoa_r+0x752>
 8020320:	9a08      	ldr	r2, [sp, #32]
 8020322:	429a      	cmp	r2, r3
 8020324:	d1f7      	bne.n	8020316 <_dtoa_r+0x736>
 8020326:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8020328:	9908      	ldr	r1, [sp, #32]
 802032a:	3201      	adds	r2, #1
 802032c:	920c      	str	r2, [sp, #48]	@ 0x30
 802032e:	2230      	movs	r2, #48	@ 0x30
 8020330:	700a      	strb	r2, [r1, #0]
 8020332:	781a      	ldrb	r2, [r3, #0]
 8020334:	3201      	adds	r2, #1
 8020336:	701a      	strb	r2, [r3, #0]
 8020338:	e7a4      	b.n	8020284 <_dtoa_r+0x6a4>
 802033a:	2200      	movs	r2, #0
 802033c:	4bc6      	ldr	r3, [pc, #792]	@ (8020658 <_dtoa_r+0xa78>)
 802033e:	f7e2 f97d 	bl	800263c <__aeabi_dmul>
 8020342:	2200      	movs	r2, #0
 8020344:	2300      	movs	r3, #0
 8020346:	0006      	movs	r6, r0
 8020348:	000f      	movs	r7, r1
 802034a:	f7e0 f8b1 	bl	80004b0 <__aeabi_dcmpeq>
 802034e:	2800      	cmp	r0, #0
 8020350:	d100      	bne.n	8020354 <_dtoa_r+0x774>
 8020352:	e6a1      	b.n	8020098 <_dtoa_r+0x4b8>
 8020354:	e6d8      	b.n	8020108 <_dtoa_r+0x528>
 8020356:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 8020358:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 802035a:	9c06      	ldr	r4, [sp, #24]
 802035c:	2f00      	cmp	r7, #0
 802035e:	d014      	beq.n	802038a <_dtoa_r+0x7aa>
 8020360:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8020362:	2a01      	cmp	r2, #1
 8020364:	dd00      	ble.n	8020368 <_dtoa_r+0x788>
 8020366:	e0c8      	b.n	80204fa <_dtoa_r+0x91a>
 8020368:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 802036a:	2a00      	cmp	r2, #0
 802036c:	d100      	bne.n	8020370 <_dtoa_r+0x790>
 802036e:	e0be      	b.n	80204ee <_dtoa_r+0x90e>
 8020370:	4aba      	ldr	r2, [pc, #744]	@ (802065c <_dtoa_r+0xa7c>)
 8020372:	189b      	adds	r3, r3, r2
 8020374:	9a06      	ldr	r2, [sp, #24]
 8020376:	2101      	movs	r1, #1
 8020378:	18d2      	adds	r2, r2, r3
 802037a:	9206      	str	r2, [sp, #24]
 802037c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 802037e:	9803      	ldr	r0, [sp, #12]
 8020380:	18d3      	adds	r3, r2, r3
 8020382:	930d      	str	r3, [sp, #52]	@ 0x34
 8020384:	f000 ffda 	bl	802133c <__i2b>
 8020388:	0007      	movs	r7, r0
 802038a:	2c00      	cmp	r4, #0
 802038c:	d00e      	beq.n	80203ac <_dtoa_r+0x7cc>
 802038e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8020390:	2b00      	cmp	r3, #0
 8020392:	dd0b      	ble.n	80203ac <_dtoa_r+0x7cc>
 8020394:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8020396:	0023      	movs	r3, r4
 8020398:	4294      	cmp	r4, r2
 802039a:	dd00      	ble.n	802039e <_dtoa_r+0x7be>
 802039c:	0013      	movs	r3, r2
 802039e:	9a06      	ldr	r2, [sp, #24]
 80203a0:	1ae4      	subs	r4, r4, r3
 80203a2:	1ad2      	subs	r2, r2, r3
 80203a4:	9206      	str	r2, [sp, #24]
 80203a6:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80203a8:	1ad3      	subs	r3, r2, r3
 80203aa:	930d      	str	r3, [sp, #52]	@ 0x34
 80203ac:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80203ae:	2b00      	cmp	r3, #0
 80203b0:	d01f      	beq.n	80203f2 <_dtoa_r+0x812>
 80203b2:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80203b4:	2b00      	cmp	r3, #0
 80203b6:	d100      	bne.n	80203ba <_dtoa_r+0x7da>
 80203b8:	e0b5      	b.n	8020526 <_dtoa_r+0x946>
 80203ba:	2d00      	cmp	r5, #0
 80203bc:	d010      	beq.n	80203e0 <_dtoa_r+0x800>
 80203be:	0039      	movs	r1, r7
 80203c0:	002a      	movs	r2, r5
 80203c2:	9803      	ldr	r0, [sp, #12]
 80203c4:	f001 f884 	bl	80214d0 <__pow5mult>
 80203c8:	9a05      	ldr	r2, [sp, #20]
 80203ca:	0001      	movs	r1, r0
 80203cc:	0007      	movs	r7, r0
 80203ce:	9803      	ldr	r0, [sp, #12]
 80203d0:	f000 ffcc 	bl	802136c <__multiply>
 80203d4:	0006      	movs	r6, r0
 80203d6:	9905      	ldr	r1, [sp, #20]
 80203d8:	9803      	ldr	r0, [sp, #12]
 80203da:	f000 feab 	bl	8021134 <_Bfree>
 80203de:	9605      	str	r6, [sp, #20]
 80203e0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80203e2:	1b5a      	subs	r2, r3, r5
 80203e4:	42ab      	cmp	r3, r5
 80203e6:	d004      	beq.n	80203f2 <_dtoa_r+0x812>
 80203e8:	9905      	ldr	r1, [sp, #20]
 80203ea:	9803      	ldr	r0, [sp, #12]
 80203ec:	f001 f870 	bl	80214d0 <__pow5mult>
 80203f0:	9005      	str	r0, [sp, #20]
 80203f2:	2101      	movs	r1, #1
 80203f4:	9803      	ldr	r0, [sp, #12]
 80203f6:	f000 ffa1 	bl	802133c <__i2b>
 80203fa:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80203fc:	0006      	movs	r6, r0
 80203fe:	2b00      	cmp	r3, #0
 8020400:	d100      	bne.n	8020404 <_dtoa_r+0x824>
 8020402:	e1bc      	b.n	802077e <_dtoa_r+0xb9e>
 8020404:	001a      	movs	r2, r3
 8020406:	0001      	movs	r1, r0
 8020408:	9803      	ldr	r0, [sp, #12]
 802040a:	f001 f861 	bl	80214d0 <__pow5mult>
 802040e:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8020410:	0006      	movs	r6, r0
 8020412:	2500      	movs	r5, #0
 8020414:	2b01      	cmp	r3, #1
 8020416:	dc16      	bgt.n	8020446 <_dtoa_r+0x866>
 8020418:	2500      	movs	r5, #0
 802041a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802041c:	42ab      	cmp	r3, r5
 802041e:	d10e      	bne.n	802043e <_dtoa_r+0x85e>
 8020420:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8020422:	031b      	lsls	r3, r3, #12
 8020424:	42ab      	cmp	r3, r5
 8020426:	d10a      	bne.n	802043e <_dtoa_r+0x85e>
 8020428:	4b8d      	ldr	r3, [pc, #564]	@ (8020660 <_dtoa_r+0xa80>)
 802042a:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 802042c:	4213      	tst	r3, r2
 802042e:	d006      	beq.n	802043e <_dtoa_r+0x85e>
 8020430:	9b06      	ldr	r3, [sp, #24]
 8020432:	3501      	adds	r5, #1
 8020434:	3301      	adds	r3, #1
 8020436:	9306      	str	r3, [sp, #24]
 8020438:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 802043a:	3301      	adds	r3, #1
 802043c:	930d      	str	r3, [sp, #52]	@ 0x34
 802043e:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8020440:	2001      	movs	r0, #1
 8020442:	2b00      	cmp	r3, #0
 8020444:	d008      	beq.n	8020458 <_dtoa_r+0x878>
 8020446:	6933      	ldr	r3, [r6, #16]
 8020448:	3303      	adds	r3, #3
 802044a:	009b      	lsls	r3, r3, #2
 802044c:	18f3      	adds	r3, r6, r3
 802044e:	6858      	ldr	r0, [r3, #4]
 8020450:	f000 ff24 	bl	802129c <__hi0bits>
 8020454:	2320      	movs	r3, #32
 8020456:	1a18      	subs	r0, r3, r0
 8020458:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 802045a:	1818      	adds	r0, r3, r0
 802045c:	0002      	movs	r2, r0
 802045e:	231f      	movs	r3, #31
 8020460:	401a      	ands	r2, r3
 8020462:	4218      	tst	r0, r3
 8020464:	d065      	beq.n	8020532 <_dtoa_r+0x952>
 8020466:	3301      	adds	r3, #1
 8020468:	1a9b      	subs	r3, r3, r2
 802046a:	2b04      	cmp	r3, #4
 802046c:	dd5d      	ble.n	802052a <_dtoa_r+0x94a>
 802046e:	231c      	movs	r3, #28
 8020470:	1a9b      	subs	r3, r3, r2
 8020472:	9a06      	ldr	r2, [sp, #24]
 8020474:	18e4      	adds	r4, r4, r3
 8020476:	18d2      	adds	r2, r2, r3
 8020478:	9206      	str	r2, [sp, #24]
 802047a:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 802047c:	18d3      	adds	r3, r2, r3
 802047e:	930d      	str	r3, [sp, #52]	@ 0x34
 8020480:	9b06      	ldr	r3, [sp, #24]
 8020482:	2b00      	cmp	r3, #0
 8020484:	dd05      	ble.n	8020492 <_dtoa_r+0x8b2>
 8020486:	001a      	movs	r2, r3
 8020488:	9905      	ldr	r1, [sp, #20]
 802048a:	9803      	ldr	r0, [sp, #12]
 802048c:	f001 f87c 	bl	8021588 <__lshift>
 8020490:	9005      	str	r0, [sp, #20]
 8020492:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8020494:	2b00      	cmp	r3, #0
 8020496:	dd05      	ble.n	80204a4 <_dtoa_r+0x8c4>
 8020498:	0031      	movs	r1, r6
 802049a:	001a      	movs	r2, r3
 802049c:	9803      	ldr	r0, [sp, #12]
 802049e:	f001 f873 	bl	8021588 <__lshift>
 80204a2:	0006      	movs	r6, r0
 80204a4:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80204a6:	2b00      	cmp	r3, #0
 80204a8:	d045      	beq.n	8020536 <_dtoa_r+0x956>
 80204aa:	0031      	movs	r1, r6
 80204ac:	9805      	ldr	r0, [sp, #20]
 80204ae:	f001 f8d7 	bl	8021660 <__mcmp>
 80204b2:	2800      	cmp	r0, #0
 80204b4:	da3f      	bge.n	8020536 <_dtoa_r+0x956>
 80204b6:	9b04      	ldr	r3, [sp, #16]
 80204b8:	220a      	movs	r2, #10
 80204ba:	3b01      	subs	r3, #1
 80204bc:	930c      	str	r3, [sp, #48]	@ 0x30
 80204be:	9905      	ldr	r1, [sp, #20]
 80204c0:	2300      	movs	r3, #0
 80204c2:	9803      	ldr	r0, [sp, #12]
 80204c4:	f000 fe5a 	bl	802117c <__multadd>
 80204c8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80204ca:	9005      	str	r0, [sp, #20]
 80204cc:	2b00      	cmp	r3, #0
 80204ce:	d100      	bne.n	80204d2 <_dtoa_r+0x8f2>
 80204d0:	e15c      	b.n	802078c <_dtoa_r+0xbac>
 80204d2:	2300      	movs	r3, #0
 80204d4:	0039      	movs	r1, r7
 80204d6:	220a      	movs	r2, #10
 80204d8:	9803      	ldr	r0, [sp, #12]
 80204da:	f000 fe4f 	bl	802117c <__multadd>
 80204de:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80204e0:	0007      	movs	r7, r0
 80204e2:	2b00      	cmp	r3, #0
 80204e4:	dc55      	bgt.n	8020592 <_dtoa_r+0x9b2>
 80204e6:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 80204e8:	2b02      	cmp	r3, #2
 80204ea:	dc2d      	bgt.n	8020548 <_dtoa_r+0x968>
 80204ec:	e051      	b.n	8020592 <_dtoa_r+0x9b2>
 80204ee:	2336      	movs	r3, #54	@ 0x36
 80204f0:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80204f2:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 80204f4:	9c06      	ldr	r4, [sp, #24]
 80204f6:	1a9b      	subs	r3, r3, r2
 80204f8:	e73c      	b.n	8020374 <_dtoa_r+0x794>
 80204fa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80204fc:	1e5d      	subs	r5, r3, #1
 80204fe:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8020500:	42ab      	cmp	r3, r5
 8020502:	db08      	blt.n	8020516 <_dtoa_r+0x936>
 8020504:	1b5d      	subs	r5, r3, r5
 8020506:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8020508:	9c06      	ldr	r4, [sp, #24]
 802050a:	2b00      	cmp	r3, #0
 802050c:	db00      	blt.n	8020510 <_dtoa_r+0x930>
 802050e:	e731      	b.n	8020374 <_dtoa_r+0x794>
 8020510:	1ae4      	subs	r4, r4, r3
 8020512:	2300      	movs	r3, #0
 8020514:	e72e      	b.n	8020374 <_dtoa_r+0x794>
 8020516:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8020518:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 802051a:	1aeb      	subs	r3, r5, r3
 802051c:	18d3      	adds	r3, r2, r3
 802051e:	950f      	str	r5, [sp, #60]	@ 0x3c
 8020520:	9314      	str	r3, [sp, #80]	@ 0x50
 8020522:	2500      	movs	r5, #0
 8020524:	e7ef      	b.n	8020506 <_dtoa_r+0x926>
 8020526:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8020528:	e75e      	b.n	80203e8 <_dtoa_r+0x808>
 802052a:	2b04      	cmp	r3, #4
 802052c:	d0a8      	beq.n	8020480 <_dtoa_r+0x8a0>
 802052e:	331c      	adds	r3, #28
 8020530:	e79f      	b.n	8020472 <_dtoa_r+0x892>
 8020532:	0013      	movs	r3, r2
 8020534:	e7fb      	b.n	802052e <_dtoa_r+0x94e>
 8020536:	9b04      	ldr	r3, [sp, #16]
 8020538:	930c      	str	r3, [sp, #48]	@ 0x30
 802053a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802053c:	930e      	str	r3, [sp, #56]	@ 0x38
 802053e:	2b00      	cmp	r3, #0
 8020540:	dc23      	bgt.n	802058a <_dtoa_r+0x9aa>
 8020542:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8020544:	2b02      	cmp	r3, #2
 8020546:	dd20      	ble.n	802058a <_dtoa_r+0x9aa>
 8020548:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 802054a:	2b00      	cmp	r3, #0
 802054c:	d000      	beq.n	8020550 <_dtoa_r+0x970>
 802054e:	e6b5      	b.n	80202bc <_dtoa_r+0x6dc>
 8020550:	0031      	movs	r1, r6
 8020552:	2205      	movs	r2, #5
 8020554:	9803      	ldr	r0, [sp, #12]
 8020556:	f000 fe11 	bl	802117c <__multadd>
 802055a:	0006      	movs	r6, r0
 802055c:	0001      	movs	r1, r0
 802055e:	9805      	ldr	r0, [sp, #20]
 8020560:	f001 f87e 	bl	8021660 <__mcmp>
 8020564:	2800      	cmp	r0, #0
 8020566:	dc00      	bgt.n	802056a <_dtoa_r+0x98a>
 8020568:	e6a8      	b.n	80202bc <_dtoa_r+0x6dc>
 802056a:	9b08      	ldr	r3, [sp, #32]
 802056c:	9a08      	ldr	r2, [sp, #32]
 802056e:	1c5c      	adds	r4, r3, #1
 8020570:	2331      	movs	r3, #49	@ 0x31
 8020572:	7013      	strb	r3, [r2, #0]
 8020574:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8020576:	3301      	adds	r3, #1
 8020578:	930c      	str	r3, [sp, #48]	@ 0x30
 802057a:	e6a3      	b.n	80202c4 <_dtoa_r+0x6e4>
 802057c:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 802057e:	0037      	movs	r7, r6
 8020580:	e7f3      	b.n	802056a <_dtoa_r+0x98a>
 8020582:	9b04      	ldr	r3, [sp, #16]
 8020584:	9e09      	ldr	r6, [sp, #36]	@ 0x24
 8020586:	930c      	str	r3, [sp, #48]	@ 0x30
 8020588:	e7f9      	b.n	802057e <_dtoa_r+0x99e>
 802058a:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 802058c:	2b00      	cmp	r3, #0
 802058e:	d100      	bne.n	8020592 <_dtoa_r+0x9b2>
 8020590:	e100      	b.n	8020794 <_dtoa_r+0xbb4>
 8020592:	2c00      	cmp	r4, #0
 8020594:	dd05      	ble.n	80205a2 <_dtoa_r+0x9c2>
 8020596:	0039      	movs	r1, r7
 8020598:	0022      	movs	r2, r4
 802059a:	9803      	ldr	r0, [sp, #12]
 802059c:	f000 fff4 	bl	8021588 <__lshift>
 80205a0:	0007      	movs	r7, r0
 80205a2:	0038      	movs	r0, r7
 80205a4:	2d00      	cmp	r5, #0
 80205a6:	d018      	beq.n	80205da <_dtoa_r+0x9fa>
 80205a8:	6879      	ldr	r1, [r7, #4]
 80205aa:	9803      	ldr	r0, [sp, #12]
 80205ac:	f000 fd7e 	bl	80210ac <_Balloc>
 80205b0:	1e04      	subs	r4, r0, #0
 80205b2:	d105      	bne.n	80205c0 <_dtoa_r+0x9e0>
 80205b4:	0022      	movs	r2, r4
 80205b6:	4b2b      	ldr	r3, [pc, #172]	@ (8020664 <_dtoa_r+0xa84>)
 80205b8:	482b      	ldr	r0, [pc, #172]	@ (8020668 <_dtoa_r+0xa88>)
 80205ba:	492c      	ldr	r1, [pc, #176]	@ (802066c <_dtoa_r+0xa8c>)
 80205bc:	f7ff fb25 	bl	801fc0a <_dtoa_r+0x2a>
 80205c0:	0039      	movs	r1, r7
 80205c2:	693a      	ldr	r2, [r7, #16]
 80205c4:	310c      	adds	r1, #12
 80205c6:	3202      	adds	r2, #2
 80205c8:	0092      	lsls	r2, r2, #2
 80205ca:	300c      	adds	r0, #12
 80205cc:	f7ff fa6a 	bl	801faa4 <memcpy>
 80205d0:	2201      	movs	r2, #1
 80205d2:	0021      	movs	r1, r4
 80205d4:	9803      	ldr	r0, [sp, #12]
 80205d6:	f000 ffd7 	bl	8021588 <__lshift>
 80205da:	9b08      	ldr	r3, [sp, #32]
 80205dc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80205de:	9306      	str	r3, [sp, #24]
 80205e0:	3b01      	subs	r3, #1
 80205e2:	189b      	adds	r3, r3, r2
 80205e4:	2201      	movs	r2, #1
 80205e6:	9704      	str	r7, [sp, #16]
 80205e8:	0007      	movs	r7, r0
 80205ea:	930f      	str	r3, [sp, #60]	@ 0x3c
 80205ec:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80205ee:	4013      	ands	r3, r2
 80205f0:	930e      	str	r3, [sp, #56]	@ 0x38
 80205f2:	0031      	movs	r1, r6
 80205f4:	9805      	ldr	r0, [sp, #20]
 80205f6:	f7ff fa65 	bl	801fac4 <quorem>
 80205fa:	9904      	ldr	r1, [sp, #16]
 80205fc:	0005      	movs	r5, r0
 80205fe:	900a      	str	r0, [sp, #40]	@ 0x28
 8020600:	9805      	ldr	r0, [sp, #20]
 8020602:	f001 f82d 	bl	8021660 <__mcmp>
 8020606:	003a      	movs	r2, r7
 8020608:	900d      	str	r0, [sp, #52]	@ 0x34
 802060a:	0031      	movs	r1, r6
 802060c:	9803      	ldr	r0, [sp, #12]
 802060e:	f001 f843 	bl	8021698 <__mdiff>
 8020612:	2201      	movs	r2, #1
 8020614:	68c3      	ldr	r3, [r0, #12]
 8020616:	0004      	movs	r4, r0
 8020618:	3530      	adds	r5, #48	@ 0x30
 802061a:	9209      	str	r2, [sp, #36]	@ 0x24
 802061c:	2b00      	cmp	r3, #0
 802061e:	d104      	bne.n	802062a <_dtoa_r+0xa4a>
 8020620:	0001      	movs	r1, r0
 8020622:	9805      	ldr	r0, [sp, #20]
 8020624:	f001 f81c 	bl	8021660 <__mcmp>
 8020628:	9009      	str	r0, [sp, #36]	@ 0x24
 802062a:	0021      	movs	r1, r4
 802062c:	9803      	ldr	r0, [sp, #12]
 802062e:	f000 fd81 	bl	8021134 <_Bfree>
 8020632:	9b06      	ldr	r3, [sp, #24]
 8020634:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8020636:	1c5c      	adds	r4, r3, #1
 8020638:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 802063a:	4313      	orrs	r3, r2
 802063c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 802063e:	4313      	orrs	r3, r2
 8020640:	d116      	bne.n	8020670 <_dtoa_r+0xa90>
 8020642:	2d39      	cmp	r5, #57	@ 0x39
 8020644:	d02f      	beq.n	80206a6 <_dtoa_r+0xac6>
 8020646:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8020648:	2b00      	cmp	r3, #0
 802064a:	dd01      	ble.n	8020650 <_dtoa_r+0xa70>
 802064c:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 802064e:	3531      	adds	r5, #49	@ 0x31
 8020650:	9b06      	ldr	r3, [sp, #24]
 8020652:	701d      	strb	r5, [r3, #0]
 8020654:	e638      	b.n	80202c8 <_dtoa_r+0x6e8>
 8020656:	46c0      	nop			@ (mov r8, r8)
 8020658:	40240000 	.word	0x40240000
 802065c:	00000433 	.word	0x00000433
 8020660:	7ff00000 	.word	0x7ff00000
 8020664:	080251c9 	.word	0x080251c9
 8020668:	08025171 	.word	0x08025171
 802066c:	000002ef 	.word	0x000002ef
 8020670:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8020672:	2b00      	cmp	r3, #0
 8020674:	db04      	blt.n	8020680 <_dtoa_r+0xaa0>
 8020676:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8020678:	4313      	orrs	r3, r2
 802067a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 802067c:	4313      	orrs	r3, r2
 802067e:	d11e      	bne.n	80206be <_dtoa_r+0xade>
 8020680:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8020682:	2b00      	cmp	r3, #0
 8020684:	dde4      	ble.n	8020650 <_dtoa_r+0xa70>
 8020686:	9905      	ldr	r1, [sp, #20]
 8020688:	2201      	movs	r2, #1
 802068a:	9803      	ldr	r0, [sp, #12]
 802068c:	f000 ff7c 	bl	8021588 <__lshift>
 8020690:	0031      	movs	r1, r6
 8020692:	9005      	str	r0, [sp, #20]
 8020694:	f000 ffe4 	bl	8021660 <__mcmp>
 8020698:	2800      	cmp	r0, #0
 802069a:	dc02      	bgt.n	80206a2 <_dtoa_r+0xac2>
 802069c:	d1d8      	bne.n	8020650 <_dtoa_r+0xa70>
 802069e:	07eb      	lsls	r3, r5, #31
 80206a0:	d5d6      	bpl.n	8020650 <_dtoa_r+0xa70>
 80206a2:	2d39      	cmp	r5, #57	@ 0x39
 80206a4:	d1d2      	bne.n	802064c <_dtoa_r+0xa6c>
 80206a6:	2339      	movs	r3, #57	@ 0x39
 80206a8:	9a06      	ldr	r2, [sp, #24]
 80206aa:	7013      	strb	r3, [r2, #0]
 80206ac:	0023      	movs	r3, r4
 80206ae:	001c      	movs	r4, r3
 80206b0:	3b01      	subs	r3, #1
 80206b2:	781a      	ldrb	r2, [r3, #0]
 80206b4:	2a39      	cmp	r2, #57	@ 0x39
 80206b6:	d04f      	beq.n	8020758 <_dtoa_r+0xb78>
 80206b8:	3201      	adds	r2, #1
 80206ba:	701a      	strb	r2, [r3, #0]
 80206bc:	e604      	b.n	80202c8 <_dtoa_r+0x6e8>
 80206be:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80206c0:	2b00      	cmp	r3, #0
 80206c2:	dd03      	ble.n	80206cc <_dtoa_r+0xaec>
 80206c4:	2d39      	cmp	r5, #57	@ 0x39
 80206c6:	d0ee      	beq.n	80206a6 <_dtoa_r+0xac6>
 80206c8:	3501      	adds	r5, #1
 80206ca:	e7c1      	b.n	8020650 <_dtoa_r+0xa70>
 80206cc:	9b06      	ldr	r3, [sp, #24]
 80206ce:	9a06      	ldr	r2, [sp, #24]
 80206d0:	701d      	strb	r5, [r3, #0]
 80206d2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80206d4:	4293      	cmp	r3, r2
 80206d6:	d02a      	beq.n	802072e <_dtoa_r+0xb4e>
 80206d8:	2300      	movs	r3, #0
 80206da:	220a      	movs	r2, #10
 80206dc:	9905      	ldr	r1, [sp, #20]
 80206de:	9803      	ldr	r0, [sp, #12]
 80206e0:	f000 fd4c 	bl	802117c <__multadd>
 80206e4:	9b04      	ldr	r3, [sp, #16]
 80206e6:	9005      	str	r0, [sp, #20]
 80206e8:	42bb      	cmp	r3, r7
 80206ea:	d109      	bne.n	8020700 <_dtoa_r+0xb20>
 80206ec:	2300      	movs	r3, #0
 80206ee:	220a      	movs	r2, #10
 80206f0:	9904      	ldr	r1, [sp, #16]
 80206f2:	9803      	ldr	r0, [sp, #12]
 80206f4:	f000 fd42 	bl	802117c <__multadd>
 80206f8:	9004      	str	r0, [sp, #16]
 80206fa:	0007      	movs	r7, r0
 80206fc:	9406      	str	r4, [sp, #24]
 80206fe:	e778      	b.n	80205f2 <_dtoa_r+0xa12>
 8020700:	9904      	ldr	r1, [sp, #16]
 8020702:	2300      	movs	r3, #0
 8020704:	220a      	movs	r2, #10
 8020706:	9803      	ldr	r0, [sp, #12]
 8020708:	f000 fd38 	bl	802117c <__multadd>
 802070c:	2300      	movs	r3, #0
 802070e:	9004      	str	r0, [sp, #16]
 8020710:	220a      	movs	r2, #10
 8020712:	0039      	movs	r1, r7
 8020714:	9803      	ldr	r0, [sp, #12]
 8020716:	f000 fd31 	bl	802117c <__multadd>
 802071a:	e7ee      	b.n	80206fa <_dtoa_r+0xb1a>
 802071c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 802071e:	2401      	movs	r4, #1
 8020720:	2b00      	cmp	r3, #0
 8020722:	dd00      	ble.n	8020726 <_dtoa_r+0xb46>
 8020724:	001c      	movs	r4, r3
 8020726:	9b08      	ldr	r3, [sp, #32]
 8020728:	191c      	adds	r4, r3, r4
 802072a:	2300      	movs	r3, #0
 802072c:	9304      	str	r3, [sp, #16]
 802072e:	9905      	ldr	r1, [sp, #20]
 8020730:	2201      	movs	r2, #1
 8020732:	9803      	ldr	r0, [sp, #12]
 8020734:	f000 ff28 	bl	8021588 <__lshift>
 8020738:	0031      	movs	r1, r6
 802073a:	9005      	str	r0, [sp, #20]
 802073c:	f000 ff90 	bl	8021660 <__mcmp>
 8020740:	2800      	cmp	r0, #0
 8020742:	dcb3      	bgt.n	80206ac <_dtoa_r+0xacc>
 8020744:	d101      	bne.n	802074a <_dtoa_r+0xb6a>
 8020746:	07ed      	lsls	r5, r5, #31
 8020748:	d4b0      	bmi.n	80206ac <_dtoa_r+0xacc>
 802074a:	0023      	movs	r3, r4
 802074c:	001c      	movs	r4, r3
 802074e:	3b01      	subs	r3, #1
 8020750:	781a      	ldrb	r2, [r3, #0]
 8020752:	2a30      	cmp	r2, #48	@ 0x30
 8020754:	d0fa      	beq.n	802074c <_dtoa_r+0xb6c>
 8020756:	e5b7      	b.n	80202c8 <_dtoa_r+0x6e8>
 8020758:	9a08      	ldr	r2, [sp, #32]
 802075a:	429a      	cmp	r2, r3
 802075c:	d1a7      	bne.n	80206ae <_dtoa_r+0xace>
 802075e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8020760:	3301      	adds	r3, #1
 8020762:	930c      	str	r3, [sp, #48]	@ 0x30
 8020764:	2331      	movs	r3, #49	@ 0x31
 8020766:	7013      	strb	r3, [r2, #0]
 8020768:	e5ae      	b.n	80202c8 <_dtoa_r+0x6e8>
 802076a:	4b15      	ldr	r3, [pc, #84]	@ (80207c0 <_dtoa_r+0xbe0>)
 802076c:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 802076e:	9308      	str	r3, [sp, #32]
 8020770:	4b14      	ldr	r3, [pc, #80]	@ (80207c4 <_dtoa_r+0xbe4>)
 8020772:	2a00      	cmp	r2, #0
 8020774:	d001      	beq.n	802077a <_dtoa_r+0xb9a>
 8020776:	f7ff fa7b 	bl	801fc70 <_dtoa_r+0x90>
 802077a:	f7ff fa7b 	bl	801fc74 <_dtoa_r+0x94>
 802077e:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8020780:	2b01      	cmp	r3, #1
 8020782:	dc00      	bgt.n	8020786 <_dtoa_r+0xba6>
 8020784:	e648      	b.n	8020418 <_dtoa_r+0x838>
 8020786:	2001      	movs	r0, #1
 8020788:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 802078a:	e665      	b.n	8020458 <_dtoa_r+0x878>
 802078c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 802078e:	2b00      	cmp	r3, #0
 8020790:	dc00      	bgt.n	8020794 <_dtoa_r+0xbb4>
 8020792:	e6d6      	b.n	8020542 <_dtoa_r+0x962>
 8020794:	2400      	movs	r4, #0
 8020796:	0031      	movs	r1, r6
 8020798:	9805      	ldr	r0, [sp, #20]
 802079a:	f7ff f993 	bl	801fac4 <quorem>
 802079e:	9b08      	ldr	r3, [sp, #32]
 80207a0:	3030      	adds	r0, #48	@ 0x30
 80207a2:	5518      	strb	r0, [r3, r4]
 80207a4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80207a6:	3401      	adds	r4, #1
 80207a8:	0005      	movs	r5, r0
 80207aa:	429c      	cmp	r4, r3
 80207ac:	dab6      	bge.n	802071c <_dtoa_r+0xb3c>
 80207ae:	2300      	movs	r3, #0
 80207b0:	220a      	movs	r2, #10
 80207b2:	9905      	ldr	r1, [sp, #20]
 80207b4:	9803      	ldr	r0, [sp, #12]
 80207b6:	f000 fce1 	bl	802117c <__multadd>
 80207ba:	9005      	str	r0, [sp, #20]
 80207bc:	e7eb      	b.n	8020796 <_dtoa_r+0xbb6>
 80207be:	46c0      	nop			@ (mov r8, r8)
 80207c0:	0802514d 	.word	0x0802514d
 80207c4:	08025155 	.word	0x08025155

080207c8 <_free_r>:
 80207c8:	b570      	push	{r4, r5, r6, lr}
 80207ca:	0005      	movs	r5, r0
 80207cc:	1e0c      	subs	r4, r1, #0
 80207ce:	d010      	beq.n	80207f2 <_free_r+0x2a>
 80207d0:	3c04      	subs	r4, #4
 80207d2:	6823      	ldr	r3, [r4, #0]
 80207d4:	2b00      	cmp	r3, #0
 80207d6:	da00      	bge.n	80207da <_free_r+0x12>
 80207d8:	18e4      	adds	r4, r4, r3
 80207da:	0028      	movs	r0, r5
 80207dc:	f000 fc56 	bl	802108c <__malloc_lock>
 80207e0:	4a1d      	ldr	r2, [pc, #116]	@ (8020858 <_free_r+0x90>)
 80207e2:	6813      	ldr	r3, [r2, #0]
 80207e4:	2b00      	cmp	r3, #0
 80207e6:	d105      	bne.n	80207f4 <_free_r+0x2c>
 80207e8:	6063      	str	r3, [r4, #4]
 80207ea:	6014      	str	r4, [r2, #0]
 80207ec:	0028      	movs	r0, r5
 80207ee:	f000 fc55 	bl	802109c <__malloc_unlock>
 80207f2:	bd70      	pop	{r4, r5, r6, pc}
 80207f4:	42a3      	cmp	r3, r4
 80207f6:	d908      	bls.n	802080a <_free_r+0x42>
 80207f8:	6820      	ldr	r0, [r4, #0]
 80207fa:	1821      	adds	r1, r4, r0
 80207fc:	428b      	cmp	r3, r1
 80207fe:	d1f3      	bne.n	80207e8 <_free_r+0x20>
 8020800:	6819      	ldr	r1, [r3, #0]
 8020802:	685b      	ldr	r3, [r3, #4]
 8020804:	1809      	adds	r1, r1, r0
 8020806:	6021      	str	r1, [r4, #0]
 8020808:	e7ee      	b.n	80207e8 <_free_r+0x20>
 802080a:	001a      	movs	r2, r3
 802080c:	685b      	ldr	r3, [r3, #4]
 802080e:	2b00      	cmp	r3, #0
 8020810:	d001      	beq.n	8020816 <_free_r+0x4e>
 8020812:	42a3      	cmp	r3, r4
 8020814:	d9f9      	bls.n	802080a <_free_r+0x42>
 8020816:	6811      	ldr	r1, [r2, #0]
 8020818:	1850      	adds	r0, r2, r1
 802081a:	42a0      	cmp	r0, r4
 802081c:	d10b      	bne.n	8020836 <_free_r+0x6e>
 802081e:	6820      	ldr	r0, [r4, #0]
 8020820:	1809      	adds	r1, r1, r0
 8020822:	1850      	adds	r0, r2, r1
 8020824:	6011      	str	r1, [r2, #0]
 8020826:	4283      	cmp	r3, r0
 8020828:	d1e0      	bne.n	80207ec <_free_r+0x24>
 802082a:	6818      	ldr	r0, [r3, #0]
 802082c:	685b      	ldr	r3, [r3, #4]
 802082e:	1841      	adds	r1, r0, r1
 8020830:	6011      	str	r1, [r2, #0]
 8020832:	6053      	str	r3, [r2, #4]
 8020834:	e7da      	b.n	80207ec <_free_r+0x24>
 8020836:	42a0      	cmp	r0, r4
 8020838:	d902      	bls.n	8020840 <_free_r+0x78>
 802083a:	230c      	movs	r3, #12
 802083c:	602b      	str	r3, [r5, #0]
 802083e:	e7d5      	b.n	80207ec <_free_r+0x24>
 8020840:	6820      	ldr	r0, [r4, #0]
 8020842:	1821      	adds	r1, r4, r0
 8020844:	428b      	cmp	r3, r1
 8020846:	d103      	bne.n	8020850 <_free_r+0x88>
 8020848:	6819      	ldr	r1, [r3, #0]
 802084a:	685b      	ldr	r3, [r3, #4]
 802084c:	1809      	adds	r1, r1, r0
 802084e:	6021      	str	r1, [r4, #0]
 8020850:	6063      	str	r3, [r4, #4]
 8020852:	6054      	str	r4, [r2, #4]
 8020854:	e7ca      	b.n	80207ec <_free_r+0x24>
 8020856:	46c0      	nop			@ (mov r8, r8)
 8020858:	20003994 	.word	0x20003994

0802085c <rshift>:
 802085c:	0002      	movs	r2, r0
 802085e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8020860:	6904      	ldr	r4, [r0, #16]
 8020862:	b085      	sub	sp, #20
 8020864:	3214      	adds	r2, #20
 8020866:	114b      	asrs	r3, r1, #5
 8020868:	0016      	movs	r6, r2
 802086a:	9302      	str	r3, [sp, #8]
 802086c:	429c      	cmp	r4, r3
 802086e:	dd31      	ble.n	80208d4 <rshift+0x78>
 8020870:	261f      	movs	r6, #31
 8020872:	000f      	movs	r7, r1
 8020874:	009b      	lsls	r3, r3, #2
 8020876:	00a5      	lsls	r5, r4, #2
 8020878:	18d3      	adds	r3, r2, r3
 802087a:	4037      	ands	r7, r6
 802087c:	1955      	adds	r5, r2, r5
 802087e:	9300      	str	r3, [sp, #0]
 8020880:	9701      	str	r7, [sp, #4]
 8020882:	4231      	tst	r1, r6
 8020884:	d10d      	bne.n	80208a2 <rshift+0x46>
 8020886:	0016      	movs	r6, r2
 8020888:	0019      	movs	r1, r3
 802088a:	428d      	cmp	r5, r1
 802088c:	d836      	bhi.n	80208fc <rshift+0xa0>
 802088e:	9b00      	ldr	r3, [sp, #0]
 8020890:	2600      	movs	r6, #0
 8020892:	3b03      	subs	r3, #3
 8020894:	429d      	cmp	r5, r3
 8020896:	d302      	bcc.n	802089e <rshift+0x42>
 8020898:	9b02      	ldr	r3, [sp, #8]
 802089a:	1ae4      	subs	r4, r4, r3
 802089c:	00a6      	lsls	r6, r4, #2
 802089e:	1996      	adds	r6, r2, r6
 80208a0:	e018      	b.n	80208d4 <rshift+0x78>
 80208a2:	2120      	movs	r1, #32
 80208a4:	9e01      	ldr	r6, [sp, #4]
 80208a6:	9f01      	ldr	r7, [sp, #4]
 80208a8:	1b89      	subs	r1, r1, r6
 80208aa:	9e00      	ldr	r6, [sp, #0]
 80208ac:	9103      	str	r1, [sp, #12]
 80208ae:	ce02      	ldmia	r6!, {r1}
 80208b0:	4694      	mov	ip, r2
 80208b2:	40f9      	lsrs	r1, r7
 80208b4:	42b5      	cmp	r5, r6
 80208b6:	d816      	bhi.n	80208e6 <rshift+0x8a>
 80208b8:	9b00      	ldr	r3, [sp, #0]
 80208ba:	2600      	movs	r6, #0
 80208bc:	3301      	adds	r3, #1
 80208be:	429d      	cmp	r5, r3
 80208c0:	d303      	bcc.n	80208ca <rshift+0x6e>
 80208c2:	9b02      	ldr	r3, [sp, #8]
 80208c4:	1ae4      	subs	r4, r4, r3
 80208c6:	00a6      	lsls	r6, r4, #2
 80208c8:	3e04      	subs	r6, #4
 80208ca:	1996      	adds	r6, r2, r6
 80208cc:	6031      	str	r1, [r6, #0]
 80208ce:	2900      	cmp	r1, #0
 80208d0:	d000      	beq.n	80208d4 <rshift+0x78>
 80208d2:	3604      	adds	r6, #4
 80208d4:	1ab1      	subs	r1, r6, r2
 80208d6:	1089      	asrs	r1, r1, #2
 80208d8:	6101      	str	r1, [r0, #16]
 80208da:	4296      	cmp	r6, r2
 80208dc:	d101      	bne.n	80208e2 <rshift+0x86>
 80208de:	2300      	movs	r3, #0
 80208e0:	6143      	str	r3, [r0, #20]
 80208e2:	b005      	add	sp, #20
 80208e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80208e6:	6837      	ldr	r7, [r6, #0]
 80208e8:	9b03      	ldr	r3, [sp, #12]
 80208ea:	409f      	lsls	r7, r3
 80208ec:	430f      	orrs	r7, r1
 80208ee:	4661      	mov	r1, ip
 80208f0:	c180      	stmia	r1!, {r7}
 80208f2:	468c      	mov	ip, r1
 80208f4:	9b01      	ldr	r3, [sp, #4]
 80208f6:	ce02      	ldmia	r6!, {r1}
 80208f8:	40d9      	lsrs	r1, r3
 80208fa:	e7db      	b.n	80208b4 <rshift+0x58>
 80208fc:	c980      	ldmia	r1!, {r7}
 80208fe:	c680      	stmia	r6!, {r7}
 8020900:	e7c3      	b.n	802088a <rshift+0x2e>

08020902 <__hexdig_fun>:
 8020902:	0002      	movs	r2, r0
 8020904:	3a30      	subs	r2, #48	@ 0x30
 8020906:	0003      	movs	r3, r0
 8020908:	2a09      	cmp	r2, #9
 802090a:	d802      	bhi.n	8020912 <__hexdig_fun+0x10>
 802090c:	3b20      	subs	r3, #32
 802090e:	b2d8      	uxtb	r0, r3
 8020910:	4770      	bx	lr
 8020912:	0002      	movs	r2, r0
 8020914:	3a61      	subs	r2, #97	@ 0x61
 8020916:	2a05      	cmp	r2, #5
 8020918:	d801      	bhi.n	802091e <__hexdig_fun+0x1c>
 802091a:	3b47      	subs	r3, #71	@ 0x47
 802091c:	e7f7      	b.n	802090e <__hexdig_fun+0xc>
 802091e:	001a      	movs	r2, r3
 8020920:	3a41      	subs	r2, #65	@ 0x41
 8020922:	2000      	movs	r0, #0
 8020924:	2a05      	cmp	r2, #5
 8020926:	d8f3      	bhi.n	8020910 <__hexdig_fun+0xe>
 8020928:	3b27      	subs	r3, #39	@ 0x27
 802092a:	e7f0      	b.n	802090e <__hexdig_fun+0xc>

0802092c <__gethex>:
 802092c:	b5f0      	push	{r4, r5, r6, r7, lr}
 802092e:	b089      	sub	sp, #36	@ 0x24
 8020930:	9307      	str	r3, [sp, #28]
 8020932:	680b      	ldr	r3, [r1, #0]
 8020934:	9201      	str	r2, [sp, #4]
 8020936:	9003      	str	r0, [sp, #12]
 8020938:	9106      	str	r1, [sp, #24]
 802093a:	1c9a      	adds	r2, r3, #2
 802093c:	0011      	movs	r1, r2
 802093e:	3201      	adds	r2, #1
 8020940:	1e50      	subs	r0, r2, #1
 8020942:	7800      	ldrb	r0, [r0, #0]
 8020944:	2830      	cmp	r0, #48	@ 0x30
 8020946:	d0f9      	beq.n	802093c <__gethex+0x10>
 8020948:	1acb      	subs	r3, r1, r3
 802094a:	3b02      	subs	r3, #2
 802094c:	9305      	str	r3, [sp, #20]
 802094e:	9100      	str	r1, [sp, #0]
 8020950:	f7ff ffd7 	bl	8020902 <__hexdig_fun>
 8020954:	2300      	movs	r3, #0
 8020956:	001d      	movs	r5, r3
 8020958:	9302      	str	r3, [sp, #8]
 802095a:	4298      	cmp	r0, r3
 802095c:	d11e      	bne.n	802099c <__gethex+0x70>
 802095e:	2201      	movs	r2, #1
 8020960:	49a6      	ldr	r1, [pc, #664]	@ (8020bfc <__gethex+0x2d0>)
 8020962:	9800      	ldr	r0, [sp, #0]
 8020964:	f7fe ffd8 	bl	801f918 <strncmp>
 8020968:	0007      	movs	r7, r0
 802096a:	42a8      	cmp	r0, r5
 802096c:	d000      	beq.n	8020970 <__gethex+0x44>
 802096e:	e06a      	b.n	8020a46 <__gethex+0x11a>
 8020970:	9b00      	ldr	r3, [sp, #0]
 8020972:	7858      	ldrb	r0, [r3, #1]
 8020974:	1c5c      	adds	r4, r3, #1
 8020976:	f7ff ffc4 	bl	8020902 <__hexdig_fun>
 802097a:	2301      	movs	r3, #1
 802097c:	9302      	str	r3, [sp, #8]
 802097e:	42a8      	cmp	r0, r5
 8020980:	d02f      	beq.n	80209e2 <__gethex+0xb6>
 8020982:	9400      	str	r4, [sp, #0]
 8020984:	9b00      	ldr	r3, [sp, #0]
 8020986:	7818      	ldrb	r0, [r3, #0]
 8020988:	2830      	cmp	r0, #48	@ 0x30
 802098a:	d009      	beq.n	80209a0 <__gethex+0x74>
 802098c:	f7ff ffb9 	bl	8020902 <__hexdig_fun>
 8020990:	4242      	negs	r2, r0
 8020992:	4142      	adcs	r2, r0
 8020994:	2301      	movs	r3, #1
 8020996:	0025      	movs	r5, r4
 8020998:	9202      	str	r2, [sp, #8]
 802099a:	9305      	str	r3, [sp, #20]
 802099c:	9c00      	ldr	r4, [sp, #0]
 802099e:	e004      	b.n	80209aa <__gethex+0x7e>
 80209a0:	9b00      	ldr	r3, [sp, #0]
 80209a2:	3301      	adds	r3, #1
 80209a4:	9300      	str	r3, [sp, #0]
 80209a6:	e7ed      	b.n	8020984 <__gethex+0x58>
 80209a8:	3401      	adds	r4, #1
 80209aa:	7820      	ldrb	r0, [r4, #0]
 80209ac:	f7ff ffa9 	bl	8020902 <__hexdig_fun>
 80209b0:	1e07      	subs	r7, r0, #0
 80209b2:	d1f9      	bne.n	80209a8 <__gethex+0x7c>
 80209b4:	2201      	movs	r2, #1
 80209b6:	0020      	movs	r0, r4
 80209b8:	4990      	ldr	r1, [pc, #576]	@ (8020bfc <__gethex+0x2d0>)
 80209ba:	f7fe ffad 	bl	801f918 <strncmp>
 80209be:	2800      	cmp	r0, #0
 80209c0:	d10d      	bne.n	80209de <__gethex+0xb2>
 80209c2:	2d00      	cmp	r5, #0
 80209c4:	d106      	bne.n	80209d4 <__gethex+0xa8>
 80209c6:	3401      	adds	r4, #1
 80209c8:	0025      	movs	r5, r4
 80209ca:	7820      	ldrb	r0, [r4, #0]
 80209cc:	f7ff ff99 	bl	8020902 <__hexdig_fun>
 80209d0:	2800      	cmp	r0, #0
 80209d2:	d102      	bne.n	80209da <__gethex+0xae>
 80209d4:	1b2d      	subs	r5, r5, r4
 80209d6:	00af      	lsls	r7, r5, #2
 80209d8:	e003      	b.n	80209e2 <__gethex+0xb6>
 80209da:	3401      	adds	r4, #1
 80209dc:	e7f5      	b.n	80209ca <__gethex+0x9e>
 80209de:	2d00      	cmp	r5, #0
 80209e0:	d1f8      	bne.n	80209d4 <__gethex+0xa8>
 80209e2:	2220      	movs	r2, #32
 80209e4:	7823      	ldrb	r3, [r4, #0]
 80209e6:	0026      	movs	r6, r4
 80209e8:	4393      	bics	r3, r2
 80209ea:	2b50      	cmp	r3, #80	@ 0x50
 80209ec:	d11d      	bne.n	8020a2a <__gethex+0xfe>
 80209ee:	7863      	ldrb	r3, [r4, #1]
 80209f0:	2b2b      	cmp	r3, #43	@ 0x2b
 80209f2:	d02d      	beq.n	8020a50 <__gethex+0x124>
 80209f4:	2b2d      	cmp	r3, #45	@ 0x2d
 80209f6:	d02f      	beq.n	8020a58 <__gethex+0x12c>
 80209f8:	2300      	movs	r3, #0
 80209fa:	1c66      	adds	r6, r4, #1
 80209fc:	9304      	str	r3, [sp, #16]
 80209fe:	7830      	ldrb	r0, [r6, #0]
 8020a00:	f7ff ff7f 	bl	8020902 <__hexdig_fun>
 8020a04:	1e43      	subs	r3, r0, #1
 8020a06:	b2db      	uxtb	r3, r3
 8020a08:	0005      	movs	r5, r0
 8020a0a:	2b18      	cmp	r3, #24
 8020a0c:	d82a      	bhi.n	8020a64 <__gethex+0x138>
 8020a0e:	7870      	ldrb	r0, [r6, #1]
 8020a10:	f7ff ff77 	bl	8020902 <__hexdig_fun>
 8020a14:	1e43      	subs	r3, r0, #1
 8020a16:	b2db      	uxtb	r3, r3
 8020a18:	3601      	adds	r6, #1
 8020a1a:	3d10      	subs	r5, #16
 8020a1c:	2b18      	cmp	r3, #24
 8020a1e:	d91d      	bls.n	8020a5c <__gethex+0x130>
 8020a20:	9b04      	ldr	r3, [sp, #16]
 8020a22:	2b00      	cmp	r3, #0
 8020a24:	d000      	beq.n	8020a28 <__gethex+0xfc>
 8020a26:	426d      	negs	r5, r5
 8020a28:	197f      	adds	r7, r7, r5
 8020a2a:	9b06      	ldr	r3, [sp, #24]
 8020a2c:	601e      	str	r6, [r3, #0]
 8020a2e:	9b02      	ldr	r3, [sp, #8]
 8020a30:	2b00      	cmp	r3, #0
 8020a32:	d019      	beq.n	8020a68 <__gethex+0x13c>
 8020a34:	9b05      	ldr	r3, [sp, #20]
 8020a36:	2606      	movs	r6, #6
 8020a38:	425a      	negs	r2, r3
 8020a3a:	4153      	adcs	r3, r2
 8020a3c:	425b      	negs	r3, r3
 8020a3e:	401e      	ands	r6, r3
 8020a40:	0030      	movs	r0, r6
 8020a42:	b009      	add	sp, #36	@ 0x24
 8020a44:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8020a46:	2301      	movs	r3, #1
 8020a48:	2700      	movs	r7, #0
 8020a4a:	9c00      	ldr	r4, [sp, #0]
 8020a4c:	9302      	str	r3, [sp, #8]
 8020a4e:	e7c8      	b.n	80209e2 <__gethex+0xb6>
 8020a50:	2300      	movs	r3, #0
 8020a52:	9304      	str	r3, [sp, #16]
 8020a54:	1ca6      	adds	r6, r4, #2
 8020a56:	e7d2      	b.n	80209fe <__gethex+0xd2>
 8020a58:	2301      	movs	r3, #1
 8020a5a:	e7fa      	b.n	8020a52 <__gethex+0x126>
 8020a5c:	230a      	movs	r3, #10
 8020a5e:	435d      	muls	r5, r3
 8020a60:	182d      	adds	r5, r5, r0
 8020a62:	e7d4      	b.n	8020a0e <__gethex+0xe2>
 8020a64:	0026      	movs	r6, r4
 8020a66:	e7e0      	b.n	8020a2a <__gethex+0xfe>
 8020a68:	9b00      	ldr	r3, [sp, #0]
 8020a6a:	9902      	ldr	r1, [sp, #8]
 8020a6c:	1ae3      	subs	r3, r4, r3
 8020a6e:	3b01      	subs	r3, #1
 8020a70:	2b07      	cmp	r3, #7
 8020a72:	dc0a      	bgt.n	8020a8a <__gethex+0x15e>
 8020a74:	9803      	ldr	r0, [sp, #12]
 8020a76:	f000 fb19 	bl	80210ac <_Balloc>
 8020a7a:	1e05      	subs	r5, r0, #0
 8020a7c:	d108      	bne.n	8020a90 <__gethex+0x164>
 8020a7e:	002a      	movs	r2, r5
 8020a80:	21e4      	movs	r1, #228	@ 0xe4
 8020a82:	4b5f      	ldr	r3, [pc, #380]	@ (8020c00 <__gethex+0x2d4>)
 8020a84:	485f      	ldr	r0, [pc, #380]	@ (8020c04 <__gethex+0x2d8>)
 8020a86:	f001 fbf1 	bl	802226c <__assert_func>
 8020a8a:	3101      	adds	r1, #1
 8020a8c:	105b      	asrs	r3, r3, #1
 8020a8e:	e7ef      	b.n	8020a70 <__gethex+0x144>
 8020a90:	0003      	movs	r3, r0
 8020a92:	3314      	adds	r3, #20
 8020a94:	9302      	str	r3, [sp, #8]
 8020a96:	9305      	str	r3, [sp, #20]
 8020a98:	2300      	movs	r3, #0
 8020a9a:	001e      	movs	r6, r3
 8020a9c:	9304      	str	r3, [sp, #16]
 8020a9e:	9b00      	ldr	r3, [sp, #0]
 8020aa0:	42a3      	cmp	r3, r4
 8020aa2:	d338      	bcc.n	8020b16 <__gethex+0x1ea>
 8020aa4:	9c05      	ldr	r4, [sp, #20]
 8020aa6:	9b02      	ldr	r3, [sp, #8]
 8020aa8:	c440      	stmia	r4!, {r6}
 8020aaa:	1ae4      	subs	r4, r4, r3
 8020aac:	10a4      	asrs	r4, r4, #2
 8020aae:	0030      	movs	r0, r6
 8020ab0:	612c      	str	r4, [r5, #16]
 8020ab2:	f000 fbf3 	bl	802129c <__hi0bits>
 8020ab6:	9b01      	ldr	r3, [sp, #4]
 8020ab8:	0164      	lsls	r4, r4, #5
 8020aba:	681b      	ldr	r3, [r3, #0]
 8020abc:	1a26      	subs	r6, r4, r0
 8020abe:	9300      	str	r3, [sp, #0]
 8020ac0:	429e      	cmp	r6, r3
 8020ac2:	dd52      	ble.n	8020b6a <__gethex+0x23e>
 8020ac4:	1af6      	subs	r6, r6, r3
 8020ac6:	0031      	movs	r1, r6
 8020ac8:	0028      	movs	r0, r5
 8020aca:	f000 ff96 	bl	80219fa <__any_on>
 8020ace:	1e04      	subs	r4, r0, #0
 8020ad0:	d00f      	beq.n	8020af2 <__gethex+0x1c6>
 8020ad2:	2401      	movs	r4, #1
 8020ad4:	231f      	movs	r3, #31
 8020ad6:	0020      	movs	r0, r4
 8020ad8:	1e72      	subs	r2, r6, #1
 8020ada:	4013      	ands	r3, r2
 8020adc:	4098      	lsls	r0, r3
 8020ade:	0003      	movs	r3, r0
 8020ae0:	1151      	asrs	r1, r2, #5
 8020ae2:	9802      	ldr	r0, [sp, #8]
 8020ae4:	0089      	lsls	r1, r1, #2
 8020ae6:	5809      	ldr	r1, [r1, r0]
 8020ae8:	4219      	tst	r1, r3
 8020aea:	d002      	beq.n	8020af2 <__gethex+0x1c6>
 8020aec:	42a2      	cmp	r2, r4
 8020aee:	dc34      	bgt.n	8020b5a <__gethex+0x22e>
 8020af0:	2402      	movs	r4, #2
 8020af2:	0031      	movs	r1, r6
 8020af4:	0028      	movs	r0, r5
 8020af6:	f7ff feb1 	bl	802085c <rshift>
 8020afa:	19bf      	adds	r7, r7, r6
 8020afc:	9b01      	ldr	r3, [sp, #4]
 8020afe:	689b      	ldr	r3, [r3, #8]
 8020b00:	42bb      	cmp	r3, r7
 8020b02:	da42      	bge.n	8020b8a <__gethex+0x25e>
 8020b04:	0029      	movs	r1, r5
 8020b06:	9803      	ldr	r0, [sp, #12]
 8020b08:	f000 fb14 	bl	8021134 <_Bfree>
 8020b0c:	2300      	movs	r3, #0
 8020b0e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8020b10:	26a3      	movs	r6, #163	@ 0xa3
 8020b12:	6013      	str	r3, [r2, #0]
 8020b14:	e794      	b.n	8020a40 <__gethex+0x114>
 8020b16:	3c01      	subs	r4, #1
 8020b18:	7823      	ldrb	r3, [r4, #0]
 8020b1a:	2b2e      	cmp	r3, #46	@ 0x2e
 8020b1c:	d012      	beq.n	8020b44 <__gethex+0x218>
 8020b1e:	9b04      	ldr	r3, [sp, #16]
 8020b20:	2b20      	cmp	r3, #32
 8020b22:	d104      	bne.n	8020b2e <__gethex+0x202>
 8020b24:	9b05      	ldr	r3, [sp, #20]
 8020b26:	c340      	stmia	r3!, {r6}
 8020b28:	2600      	movs	r6, #0
 8020b2a:	9305      	str	r3, [sp, #20]
 8020b2c:	9604      	str	r6, [sp, #16]
 8020b2e:	7820      	ldrb	r0, [r4, #0]
 8020b30:	f7ff fee7 	bl	8020902 <__hexdig_fun>
 8020b34:	230f      	movs	r3, #15
 8020b36:	4018      	ands	r0, r3
 8020b38:	9b04      	ldr	r3, [sp, #16]
 8020b3a:	4098      	lsls	r0, r3
 8020b3c:	3304      	adds	r3, #4
 8020b3e:	4306      	orrs	r6, r0
 8020b40:	9304      	str	r3, [sp, #16]
 8020b42:	e7ac      	b.n	8020a9e <__gethex+0x172>
 8020b44:	9b00      	ldr	r3, [sp, #0]
 8020b46:	42a3      	cmp	r3, r4
 8020b48:	d8e9      	bhi.n	8020b1e <__gethex+0x1f2>
 8020b4a:	2201      	movs	r2, #1
 8020b4c:	0020      	movs	r0, r4
 8020b4e:	492b      	ldr	r1, [pc, #172]	@ (8020bfc <__gethex+0x2d0>)
 8020b50:	f7fe fee2 	bl	801f918 <strncmp>
 8020b54:	2800      	cmp	r0, #0
 8020b56:	d1e2      	bne.n	8020b1e <__gethex+0x1f2>
 8020b58:	e7a1      	b.n	8020a9e <__gethex+0x172>
 8020b5a:	0028      	movs	r0, r5
 8020b5c:	1eb1      	subs	r1, r6, #2
 8020b5e:	f000 ff4c 	bl	80219fa <__any_on>
 8020b62:	2800      	cmp	r0, #0
 8020b64:	d0c4      	beq.n	8020af0 <__gethex+0x1c4>
 8020b66:	2403      	movs	r4, #3
 8020b68:	e7c3      	b.n	8020af2 <__gethex+0x1c6>
 8020b6a:	9b00      	ldr	r3, [sp, #0]
 8020b6c:	2400      	movs	r4, #0
 8020b6e:	429e      	cmp	r6, r3
 8020b70:	dac4      	bge.n	8020afc <__gethex+0x1d0>
 8020b72:	1b9e      	subs	r6, r3, r6
 8020b74:	0029      	movs	r1, r5
 8020b76:	0032      	movs	r2, r6
 8020b78:	9803      	ldr	r0, [sp, #12]
 8020b7a:	f000 fd05 	bl	8021588 <__lshift>
 8020b7e:	0003      	movs	r3, r0
 8020b80:	3314      	adds	r3, #20
 8020b82:	0005      	movs	r5, r0
 8020b84:	1bbf      	subs	r7, r7, r6
 8020b86:	9302      	str	r3, [sp, #8]
 8020b88:	e7b8      	b.n	8020afc <__gethex+0x1d0>
 8020b8a:	9b01      	ldr	r3, [sp, #4]
 8020b8c:	685e      	ldr	r6, [r3, #4]
 8020b8e:	42be      	cmp	r6, r7
 8020b90:	dd6f      	ble.n	8020c72 <__gethex+0x346>
 8020b92:	9b00      	ldr	r3, [sp, #0]
 8020b94:	1bf6      	subs	r6, r6, r7
 8020b96:	42b3      	cmp	r3, r6
 8020b98:	dc36      	bgt.n	8020c08 <__gethex+0x2dc>
 8020b9a:	9b01      	ldr	r3, [sp, #4]
 8020b9c:	68db      	ldr	r3, [r3, #12]
 8020b9e:	2b02      	cmp	r3, #2
 8020ba0:	d024      	beq.n	8020bec <__gethex+0x2c0>
 8020ba2:	2b03      	cmp	r3, #3
 8020ba4:	d026      	beq.n	8020bf4 <__gethex+0x2c8>
 8020ba6:	2b01      	cmp	r3, #1
 8020ba8:	d117      	bne.n	8020bda <__gethex+0x2ae>
 8020baa:	9b00      	ldr	r3, [sp, #0]
 8020bac:	42b3      	cmp	r3, r6
 8020bae:	d114      	bne.n	8020bda <__gethex+0x2ae>
 8020bb0:	2b01      	cmp	r3, #1
 8020bb2:	d10b      	bne.n	8020bcc <__gethex+0x2a0>
 8020bb4:	9b01      	ldr	r3, [sp, #4]
 8020bb6:	9a07      	ldr	r2, [sp, #28]
 8020bb8:	685b      	ldr	r3, [r3, #4]
 8020bba:	2662      	movs	r6, #98	@ 0x62
 8020bbc:	6013      	str	r3, [r2, #0]
 8020bbe:	2301      	movs	r3, #1
 8020bc0:	9a02      	ldr	r2, [sp, #8]
 8020bc2:	612b      	str	r3, [r5, #16]
 8020bc4:	6013      	str	r3, [r2, #0]
 8020bc6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8020bc8:	601d      	str	r5, [r3, #0]
 8020bca:	e739      	b.n	8020a40 <__gethex+0x114>
 8020bcc:	9900      	ldr	r1, [sp, #0]
 8020bce:	0028      	movs	r0, r5
 8020bd0:	3901      	subs	r1, #1
 8020bd2:	f000 ff12 	bl	80219fa <__any_on>
 8020bd6:	2800      	cmp	r0, #0
 8020bd8:	d1ec      	bne.n	8020bb4 <__gethex+0x288>
 8020bda:	0029      	movs	r1, r5
 8020bdc:	9803      	ldr	r0, [sp, #12]
 8020bde:	f000 faa9 	bl	8021134 <_Bfree>
 8020be2:	2300      	movs	r3, #0
 8020be4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8020be6:	2650      	movs	r6, #80	@ 0x50
 8020be8:	6013      	str	r3, [r2, #0]
 8020bea:	e729      	b.n	8020a40 <__gethex+0x114>
 8020bec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8020bee:	2b00      	cmp	r3, #0
 8020bf0:	d1f3      	bne.n	8020bda <__gethex+0x2ae>
 8020bf2:	e7df      	b.n	8020bb4 <__gethex+0x288>
 8020bf4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8020bf6:	2b00      	cmp	r3, #0
 8020bf8:	d1dc      	bne.n	8020bb4 <__gethex+0x288>
 8020bfa:	e7ee      	b.n	8020bda <__gethex+0x2ae>
 8020bfc:	08024fb8 	.word	0x08024fb8
 8020c00:	080251c9 	.word	0x080251c9
 8020c04:	080251da 	.word	0x080251da
 8020c08:	1e77      	subs	r7, r6, #1
 8020c0a:	2c00      	cmp	r4, #0
 8020c0c:	d12f      	bne.n	8020c6e <__gethex+0x342>
 8020c0e:	2f00      	cmp	r7, #0
 8020c10:	d004      	beq.n	8020c1c <__gethex+0x2f0>
 8020c12:	0039      	movs	r1, r7
 8020c14:	0028      	movs	r0, r5
 8020c16:	f000 fef0 	bl	80219fa <__any_on>
 8020c1a:	0004      	movs	r4, r0
 8020c1c:	231f      	movs	r3, #31
 8020c1e:	117a      	asrs	r2, r7, #5
 8020c20:	401f      	ands	r7, r3
 8020c22:	3b1e      	subs	r3, #30
 8020c24:	40bb      	lsls	r3, r7
 8020c26:	9902      	ldr	r1, [sp, #8]
 8020c28:	0092      	lsls	r2, r2, #2
 8020c2a:	5852      	ldr	r2, [r2, r1]
 8020c2c:	421a      	tst	r2, r3
 8020c2e:	d001      	beq.n	8020c34 <__gethex+0x308>
 8020c30:	2302      	movs	r3, #2
 8020c32:	431c      	orrs	r4, r3
 8020c34:	9b00      	ldr	r3, [sp, #0]
 8020c36:	0031      	movs	r1, r6
 8020c38:	1b9b      	subs	r3, r3, r6
 8020c3a:	2602      	movs	r6, #2
 8020c3c:	0028      	movs	r0, r5
 8020c3e:	9300      	str	r3, [sp, #0]
 8020c40:	f7ff fe0c 	bl	802085c <rshift>
 8020c44:	9b01      	ldr	r3, [sp, #4]
 8020c46:	685f      	ldr	r7, [r3, #4]
 8020c48:	2c00      	cmp	r4, #0
 8020c4a:	d03f      	beq.n	8020ccc <__gethex+0x3a0>
 8020c4c:	9b01      	ldr	r3, [sp, #4]
 8020c4e:	68db      	ldr	r3, [r3, #12]
 8020c50:	2b02      	cmp	r3, #2
 8020c52:	d010      	beq.n	8020c76 <__gethex+0x34a>
 8020c54:	2b03      	cmp	r3, #3
 8020c56:	d012      	beq.n	8020c7e <__gethex+0x352>
 8020c58:	2b01      	cmp	r3, #1
 8020c5a:	d106      	bne.n	8020c6a <__gethex+0x33e>
 8020c5c:	07a2      	lsls	r2, r4, #30
 8020c5e:	d504      	bpl.n	8020c6a <__gethex+0x33e>
 8020c60:	9a02      	ldr	r2, [sp, #8]
 8020c62:	6812      	ldr	r2, [r2, #0]
 8020c64:	4314      	orrs	r4, r2
 8020c66:	421c      	tst	r4, r3
 8020c68:	d10c      	bne.n	8020c84 <__gethex+0x358>
 8020c6a:	2310      	movs	r3, #16
 8020c6c:	e02d      	b.n	8020cca <__gethex+0x39e>
 8020c6e:	2401      	movs	r4, #1
 8020c70:	e7d4      	b.n	8020c1c <__gethex+0x2f0>
 8020c72:	2601      	movs	r6, #1
 8020c74:	e7e8      	b.n	8020c48 <__gethex+0x31c>
 8020c76:	2301      	movs	r3, #1
 8020c78:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8020c7a:	1a9b      	subs	r3, r3, r2
 8020c7c:	930f      	str	r3, [sp, #60]	@ 0x3c
 8020c7e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8020c80:	2b00      	cmp	r3, #0
 8020c82:	d0f2      	beq.n	8020c6a <__gethex+0x33e>
 8020c84:	692b      	ldr	r3, [r5, #16]
 8020c86:	2000      	movs	r0, #0
 8020c88:	9302      	str	r3, [sp, #8]
 8020c8a:	009b      	lsls	r3, r3, #2
 8020c8c:	9304      	str	r3, [sp, #16]
 8020c8e:	002b      	movs	r3, r5
 8020c90:	9a04      	ldr	r2, [sp, #16]
 8020c92:	3314      	adds	r3, #20
 8020c94:	1899      	adds	r1, r3, r2
 8020c96:	681a      	ldr	r2, [r3, #0]
 8020c98:	1c54      	adds	r4, r2, #1
 8020c9a:	d01c      	beq.n	8020cd6 <__gethex+0x3aa>
 8020c9c:	3201      	adds	r2, #1
 8020c9e:	601a      	str	r2, [r3, #0]
 8020ca0:	002b      	movs	r3, r5
 8020ca2:	3314      	adds	r3, #20
 8020ca4:	2e02      	cmp	r6, #2
 8020ca6:	d13f      	bne.n	8020d28 <__gethex+0x3fc>
 8020ca8:	9a01      	ldr	r2, [sp, #4]
 8020caa:	9900      	ldr	r1, [sp, #0]
 8020cac:	6812      	ldr	r2, [r2, #0]
 8020cae:	3a01      	subs	r2, #1
 8020cb0:	428a      	cmp	r2, r1
 8020cb2:	d109      	bne.n	8020cc8 <__gethex+0x39c>
 8020cb4:	000a      	movs	r2, r1
 8020cb6:	201f      	movs	r0, #31
 8020cb8:	4010      	ands	r0, r2
 8020cba:	2201      	movs	r2, #1
 8020cbc:	4082      	lsls	r2, r0
 8020cbe:	1149      	asrs	r1, r1, #5
 8020cc0:	0089      	lsls	r1, r1, #2
 8020cc2:	58cb      	ldr	r3, [r1, r3]
 8020cc4:	4213      	tst	r3, r2
 8020cc6:	d13d      	bne.n	8020d44 <__gethex+0x418>
 8020cc8:	2320      	movs	r3, #32
 8020cca:	431e      	orrs	r6, r3
 8020ccc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8020cce:	601d      	str	r5, [r3, #0]
 8020cd0:	9b07      	ldr	r3, [sp, #28]
 8020cd2:	601f      	str	r7, [r3, #0]
 8020cd4:	e6b4      	b.n	8020a40 <__gethex+0x114>
 8020cd6:	c301      	stmia	r3!, {r0}
 8020cd8:	4299      	cmp	r1, r3
 8020cda:	d8dc      	bhi.n	8020c96 <__gethex+0x36a>
 8020cdc:	68ab      	ldr	r3, [r5, #8]
 8020cde:	9a02      	ldr	r2, [sp, #8]
 8020ce0:	429a      	cmp	r2, r3
 8020ce2:	db18      	blt.n	8020d16 <__gethex+0x3ea>
 8020ce4:	6869      	ldr	r1, [r5, #4]
 8020ce6:	9803      	ldr	r0, [sp, #12]
 8020ce8:	3101      	adds	r1, #1
 8020cea:	f000 f9df 	bl	80210ac <_Balloc>
 8020cee:	1e04      	subs	r4, r0, #0
 8020cf0:	d104      	bne.n	8020cfc <__gethex+0x3d0>
 8020cf2:	0022      	movs	r2, r4
 8020cf4:	2184      	movs	r1, #132	@ 0x84
 8020cf6:	4b1d      	ldr	r3, [pc, #116]	@ (8020d6c <__gethex+0x440>)
 8020cf8:	481d      	ldr	r0, [pc, #116]	@ (8020d70 <__gethex+0x444>)
 8020cfa:	e6c4      	b.n	8020a86 <__gethex+0x15a>
 8020cfc:	0029      	movs	r1, r5
 8020cfe:	692a      	ldr	r2, [r5, #16]
 8020d00:	310c      	adds	r1, #12
 8020d02:	3202      	adds	r2, #2
 8020d04:	0092      	lsls	r2, r2, #2
 8020d06:	300c      	adds	r0, #12
 8020d08:	f7fe fecc 	bl	801faa4 <memcpy>
 8020d0c:	0029      	movs	r1, r5
 8020d0e:	9803      	ldr	r0, [sp, #12]
 8020d10:	f000 fa10 	bl	8021134 <_Bfree>
 8020d14:	0025      	movs	r5, r4
 8020d16:	692b      	ldr	r3, [r5, #16]
 8020d18:	1c5a      	adds	r2, r3, #1
 8020d1a:	612a      	str	r2, [r5, #16]
 8020d1c:	2201      	movs	r2, #1
 8020d1e:	3304      	adds	r3, #4
 8020d20:	009b      	lsls	r3, r3, #2
 8020d22:	18eb      	adds	r3, r5, r3
 8020d24:	605a      	str	r2, [r3, #4]
 8020d26:	e7bb      	b.n	8020ca0 <__gethex+0x374>
 8020d28:	692a      	ldr	r2, [r5, #16]
 8020d2a:	9902      	ldr	r1, [sp, #8]
 8020d2c:	428a      	cmp	r2, r1
 8020d2e:	dd0b      	ble.n	8020d48 <__gethex+0x41c>
 8020d30:	2101      	movs	r1, #1
 8020d32:	0028      	movs	r0, r5
 8020d34:	f7ff fd92 	bl	802085c <rshift>
 8020d38:	9b01      	ldr	r3, [sp, #4]
 8020d3a:	3701      	adds	r7, #1
 8020d3c:	689b      	ldr	r3, [r3, #8]
 8020d3e:	42bb      	cmp	r3, r7
 8020d40:	da00      	bge.n	8020d44 <__gethex+0x418>
 8020d42:	e6df      	b.n	8020b04 <__gethex+0x1d8>
 8020d44:	2601      	movs	r6, #1
 8020d46:	e7bf      	b.n	8020cc8 <__gethex+0x39c>
 8020d48:	221f      	movs	r2, #31
 8020d4a:	9c00      	ldr	r4, [sp, #0]
 8020d4c:	9900      	ldr	r1, [sp, #0]
 8020d4e:	4014      	ands	r4, r2
 8020d50:	4211      	tst	r1, r2
 8020d52:	d0f7      	beq.n	8020d44 <__gethex+0x418>
 8020d54:	9a04      	ldr	r2, [sp, #16]
 8020d56:	189b      	adds	r3, r3, r2
 8020d58:	3b04      	subs	r3, #4
 8020d5a:	6818      	ldr	r0, [r3, #0]
 8020d5c:	f000 fa9e 	bl	802129c <__hi0bits>
 8020d60:	2320      	movs	r3, #32
 8020d62:	1b1b      	subs	r3, r3, r4
 8020d64:	4298      	cmp	r0, r3
 8020d66:	dbe3      	blt.n	8020d30 <__gethex+0x404>
 8020d68:	e7ec      	b.n	8020d44 <__gethex+0x418>
 8020d6a:	46c0      	nop			@ (mov r8, r8)
 8020d6c:	080251c9 	.word	0x080251c9
 8020d70:	080251da 	.word	0x080251da

08020d74 <L_shift>:
 8020d74:	2308      	movs	r3, #8
 8020d76:	b570      	push	{r4, r5, r6, lr}
 8020d78:	2520      	movs	r5, #32
 8020d7a:	1a9a      	subs	r2, r3, r2
 8020d7c:	0092      	lsls	r2, r2, #2
 8020d7e:	1aad      	subs	r5, r5, r2
 8020d80:	6843      	ldr	r3, [r0, #4]
 8020d82:	6804      	ldr	r4, [r0, #0]
 8020d84:	001e      	movs	r6, r3
 8020d86:	40ae      	lsls	r6, r5
 8020d88:	40d3      	lsrs	r3, r2
 8020d8a:	4334      	orrs	r4, r6
 8020d8c:	6004      	str	r4, [r0, #0]
 8020d8e:	6043      	str	r3, [r0, #4]
 8020d90:	3004      	adds	r0, #4
 8020d92:	4288      	cmp	r0, r1
 8020d94:	d3f4      	bcc.n	8020d80 <L_shift+0xc>
 8020d96:	bd70      	pop	{r4, r5, r6, pc}

08020d98 <__match>:
 8020d98:	b530      	push	{r4, r5, lr}
 8020d9a:	6803      	ldr	r3, [r0, #0]
 8020d9c:	780c      	ldrb	r4, [r1, #0]
 8020d9e:	3301      	adds	r3, #1
 8020da0:	2c00      	cmp	r4, #0
 8020da2:	d102      	bne.n	8020daa <__match+0x12>
 8020da4:	6003      	str	r3, [r0, #0]
 8020da6:	2001      	movs	r0, #1
 8020da8:	bd30      	pop	{r4, r5, pc}
 8020daa:	781a      	ldrb	r2, [r3, #0]
 8020dac:	0015      	movs	r5, r2
 8020dae:	3d41      	subs	r5, #65	@ 0x41
 8020db0:	2d19      	cmp	r5, #25
 8020db2:	d800      	bhi.n	8020db6 <__match+0x1e>
 8020db4:	3220      	adds	r2, #32
 8020db6:	3101      	adds	r1, #1
 8020db8:	42a2      	cmp	r2, r4
 8020dba:	d0ef      	beq.n	8020d9c <__match+0x4>
 8020dbc:	2000      	movs	r0, #0
 8020dbe:	e7f3      	b.n	8020da8 <__match+0x10>

08020dc0 <__hexnan>:
 8020dc0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8020dc2:	680b      	ldr	r3, [r1, #0]
 8020dc4:	b08b      	sub	sp, #44	@ 0x2c
 8020dc6:	9201      	str	r2, [sp, #4]
 8020dc8:	9901      	ldr	r1, [sp, #4]
 8020dca:	115a      	asrs	r2, r3, #5
 8020dcc:	0092      	lsls	r2, r2, #2
 8020dce:	188a      	adds	r2, r1, r2
 8020dd0:	9202      	str	r2, [sp, #8]
 8020dd2:	0019      	movs	r1, r3
 8020dd4:	221f      	movs	r2, #31
 8020dd6:	4011      	ands	r1, r2
 8020dd8:	9008      	str	r0, [sp, #32]
 8020dda:	9106      	str	r1, [sp, #24]
 8020ddc:	4213      	tst	r3, r2
 8020dde:	d002      	beq.n	8020de6 <__hexnan+0x26>
 8020de0:	9b02      	ldr	r3, [sp, #8]
 8020de2:	3304      	adds	r3, #4
 8020de4:	9302      	str	r3, [sp, #8]
 8020de6:	9b02      	ldr	r3, [sp, #8]
 8020de8:	2500      	movs	r5, #0
 8020dea:	1f1f      	subs	r7, r3, #4
 8020dec:	003e      	movs	r6, r7
 8020dee:	003c      	movs	r4, r7
 8020df0:	9b08      	ldr	r3, [sp, #32]
 8020df2:	603d      	str	r5, [r7, #0]
 8020df4:	681b      	ldr	r3, [r3, #0]
 8020df6:	9507      	str	r5, [sp, #28]
 8020df8:	9305      	str	r3, [sp, #20]
 8020dfa:	9503      	str	r5, [sp, #12]
 8020dfc:	9b05      	ldr	r3, [sp, #20]
 8020dfe:	3301      	adds	r3, #1
 8020e00:	9309      	str	r3, [sp, #36]	@ 0x24
 8020e02:	9b05      	ldr	r3, [sp, #20]
 8020e04:	785b      	ldrb	r3, [r3, #1]
 8020e06:	9304      	str	r3, [sp, #16]
 8020e08:	2b00      	cmp	r3, #0
 8020e0a:	d028      	beq.n	8020e5e <__hexnan+0x9e>
 8020e0c:	9804      	ldr	r0, [sp, #16]
 8020e0e:	f7ff fd78 	bl	8020902 <__hexdig_fun>
 8020e12:	2800      	cmp	r0, #0
 8020e14:	d155      	bne.n	8020ec2 <__hexnan+0x102>
 8020e16:	9b04      	ldr	r3, [sp, #16]
 8020e18:	2b20      	cmp	r3, #32
 8020e1a:	d819      	bhi.n	8020e50 <__hexnan+0x90>
 8020e1c:	9b03      	ldr	r3, [sp, #12]
 8020e1e:	9a07      	ldr	r2, [sp, #28]
 8020e20:	4293      	cmp	r3, r2
 8020e22:	dd12      	ble.n	8020e4a <__hexnan+0x8a>
 8020e24:	42b4      	cmp	r4, r6
 8020e26:	d206      	bcs.n	8020e36 <__hexnan+0x76>
 8020e28:	2d07      	cmp	r5, #7
 8020e2a:	dc04      	bgt.n	8020e36 <__hexnan+0x76>
 8020e2c:	002a      	movs	r2, r5
 8020e2e:	0031      	movs	r1, r6
 8020e30:	0020      	movs	r0, r4
 8020e32:	f7ff ff9f 	bl	8020d74 <L_shift>
 8020e36:	9b01      	ldr	r3, [sp, #4]
 8020e38:	2508      	movs	r5, #8
 8020e3a:	429c      	cmp	r4, r3
 8020e3c:	d905      	bls.n	8020e4a <__hexnan+0x8a>
 8020e3e:	1f26      	subs	r6, r4, #4
 8020e40:	2500      	movs	r5, #0
 8020e42:	0034      	movs	r4, r6
 8020e44:	9b03      	ldr	r3, [sp, #12]
 8020e46:	6035      	str	r5, [r6, #0]
 8020e48:	9307      	str	r3, [sp, #28]
 8020e4a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8020e4c:	9305      	str	r3, [sp, #20]
 8020e4e:	e7d5      	b.n	8020dfc <__hexnan+0x3c>
 8020e50:	9b04      	ldr	r3, [sp, #16]
 8020e52:	2b29      	cmp	r3, #41	@ 0x29
 8020e54:	d15a      	bne.n	8020f0c <__hexnan+0x14c>
 8020e56:	9b05      	ldr	r3, [sp, #20]
 8020e58:	9a08      	ldr	r2, [sp, #32]
 8020e5a:	3302      	adds	r3, #2
 8020e5c:	6013      	str	r3, [r2, #0]
 8020e5e:	9b03      	ldr	r3, [sp, #12]
 8020e60:	2b00      	cmp	r3, #0
 8020e62:	d053      	beq.n	8020f0c <__hexnan+0x14c>
 8020e64:	42b4      	cmp	r4, r6
 8020e66:	d206      	bcs.n	8020e76 <__hexnan+0xb6>
 8020e68:	2d07      	cmp	r5, #7
 8020e6a:	dc04      	bgt.n	8020e76 <__hexnan+0xb6>
 8020e6c:	002a      	movs	r2, r5
 8020e6e:	0031      	movs	r1, r6
 8020e70:	0020      	movs	r0, r4
 8020e72:	f7ff ff7f 	bl	8020d74 <L_shift>
 8020e76:	9b01      	ldr	r3, [sp, #4]
 8020e78:	429c      	cmp	r4, r3
 8020e7a:	d936      	bls.n	8020eea <__hexnan+0x12a>
 8020e7c:	001a      	movs	r2, r3
 8020e7e:	0023      	movs	r3, r4
 8020e80:	cb02      	ldmia	r3!, {r1}
 8020e82:	c202      	stmia	r2!, {r1}
 8020e84:	429f      	cmp	r7, r3
 8020e86:	d2fb      	bcs.n	8020e80 <__hexnan+0xc0>
 8020e88:	9b02      	ldr	r3, [sp, #8]
 8020e8a:	1c61      	adds	r1, r4, #1
 8020e8c:	1eda      	subs	r2, r3, #3
 8020e8e:	2304      	movs	r3, #4
 8020e90:	4291      	cmp	r1, r2
 8020e92:	d805      	bhi.n	8020ea0 <__hexnan+0xe0>
 8020e94:	9b02      	ldr	r3, [sp, #8]
 8020e96:	3b04      	subs	r3, #4
 8020e98:	1b1b      	subs	r3, r3, r4
 8020e9a:	089b      	lsrs	r3, r3, #2
 8020e9c:	3301      	adds	r3, #1
 8020e9e:	009b      	lsls	r3, r3, #2
 8020ea0:	9a01      	ldr	r2, [sp, #4]
 8020ea2:	18d3      	adds	r3, r2, r3
 8020ea4:	2200      	movs	r2, #0
 8020ea6:	c304      	stmia	r3!, {r2}
 8020ea8:	429f      	cmp	r7, r3
 8020eaa:	d2fc      	bcs.n	8020ea6 <__hexnan+0xe6>
 8020eac:	683b      	ldr	r3, [r7, #0]
 8020eae:	2b00      	cmp	r3, #0
 8020eb0:	d104      	bne.n	8020ebc <__hexnan+0xfc>
 8020eb2:	9b01      	ldr	r3, [sp, #4]
 8020eb4:	429f      	cmp	r7, r3
 8020eb6:	d127      	bne.n	8020f08 <__hexnan+0x148>
 8020eb8:	2301      	movs	r3, #1
 8020eba:	603b      	str	r3, [r7, #0]
 8020ebc:	2005      	movs	r0, #5
 8020ebe:	b00b      	add	sp, #44	@ 0x2c
 8020ec0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8020ec2:	9b03      	ldr	r3, [sp, #12]
 8020ec4:	3501      	adds	r5, #1
 8020ec6:	3301      	adds	r3, #1
 8020ec8:	9303      	str	r3, [sp, #12]
 8020eca:	2d08      	cmp	r5, #8
 8020ecc:	dd06      	ble.n	8020edc <__hexnan+0x11c>
 8020ece:	9b01      	ldr	r3, [sp, #4]
 8020ed0:	429c      	cmp	r4, r3
 8020ed2:	d9ba      	bls.n	8020e4a <__hexnan+0x8a>
 8020ed4:	2300      	movs	r3, #0
 8020ed6:	2501      	movs	r5, #1
 8020ed8:	3c04      	subs	r4, #4
 8020eda:	6023      	str	r3, [r4, #0]
 8020edc:	220f      	movs	r2, #15
 8020ede:	6823      	ldr	r3, [r4, #0]
 8020ee0:	4010      	ands	r0, r2
 8020ee2:	011b      	lsls	r3, r3, #4
 8020ee4:	4303      	orrs	r3, r0
 8020ee6:	6023      	str	r3, [r4, #0]
 8020ee8:	e7af      	b.n	8020e4a <__hexnan+0x8a>
 8020eea:	9b06      	ldr	r3, [sp, #24]
 8020eec:	2b00      	cmp	r3, #0
 8020eee:	d0dd      	beq.n	8020eac <__hexnan+0xec>
 8020ef0:	2320      	movs	r3, #32
 8020ef2:	9a06      	ldr	r2, [sp, #24]
 8020ef4:	9902      	ldr	r1, [sp, #8]
 8020ef6:	1a9b      	subs	r3, r3, r2
 8020ef8:	2201      	movs	r2, #1
 8020efa:	4252      	negs	r2, r2
 8020efc:	40da      	lsrs	r2, r3
 8020efe:	3904      	subs	r1, #4
 8020f00:	680b      	ldr	r3, [r1, #0]
 8020f02:	4013      	ands	r3, r2
 8020f04:	600b      	str	r3, [r1, #0]
 8020f06:	e7d1      	b.n	8020eac <__hexnan+0xec>
 8020f08:	3f04      	subs	r7, #4
 8020f0a:	e7cf      	b.n	8020eac <__hexnan+0xec>
 8020f0c:	2004      	movs	r0, #4
 8020f0e:	e7d6      	b.n	8020ebe <__hexnan+0xfe>

08020f10 <malloc>:
 8020f10:	b510      	push	{r4, lr}
 8020f12:	4b03      	ldr	r3, [pc, #12]	@ (8020f20 <malloc+0x10>)
 8020f14:	0001      	movs	r1, r0
 8020f16:	6818      	ldr	r0, [r3, #0]
 8020f18:	f000 f826 	bl	8020f68 <_malloc_r>
 8020f1c:	bd10      	pop	{r4, pc}
 8020f1e:	46c0      	nop			@ (mov r8, r8)
 8020f20:	200003cc 	.word	0x200003cc

08020f24 <sbrk_aligned>:
 8020f24:	b570      	push	{r4, r5, r6, lr}
 8020f26:	4e0f      	ldr	r6, [pc, #60]	@ (8020f64 <sbrk_aligned+0x40>)
 8020f28:	000d      	movs	r5, r1
 8020f2a:	6831      	ldr	r1, [r6, #0]
 8020f2c:	0004      	movs	r4, r0
 8020f2e:	2900      	cmp	r1, #0
 8020f30:	d102      	bne.n	8020f38 <sbrk_aligned+0x14>
 8020f32:	f001 f989 	bl	8022248 <_sbrk_r>
 8020f36:	6030      	str	r0, [r6, #0]
 8020f38:	0029      	movs	r1, r5
 8020f3a:	0020      	movs	r0, r4
 8020f3c:	f001 f984 	bl	8022248 <_sbrk_r>
 8020f40:	1c43      	adds	r3, r0, #1
 8020f42:	d103      	bne.n	8020f4c <sbrk_aligned+0x28>
 8020f44:	2501      	movs	r5, #1
 8020f46:	426d      	negs	r5, r5
 8020f48:	0028      	movs	r0, r5
 8020f4a:	bd70      	pop	{r4, r5, r6, pc}
 8020f4c:	2303      	movs	r3, #3
 8020f4e:	1cc5      	adds	r5, r0, #3
 8020f50:	439d      	bics	r5, r3
 8020f52:	42a8      	cmp	r0, r5
 8020f54:	d0f8      	beq.n	8020f48 <sbrk_aligned+0x24>
 8020f56:	1a29      	subs	r1, r5, r0
 8020f58:	0020      	movs	r0, r4
 8020f5a:	f001 f975 	bl	8022248 <_sbrk_r>
 8020f5e:	3001      	adds	r0, #1
 8020f60:	d1f2      	bne.n	8020f48 <sbrk_aligned+0x24>
 8020f62:	e7ef      	b.n	8020f44 <sbrk_aligned+0x20>
 8020f64:	20003990 	.word	0x20003990

08020f68 <_malloc_r>:
 8020f68:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8020f6a:	2203      	movs	r2, #3
 8020f6c:	1ccb      	adds	r3, r1, #3
 8020f6e:	4393      	bics	r3, r2
 8020f70:	3308      	adds	r3, #8
 8020f72:	0005      	movs	r5, r0
 8020f74:	001f      	movs	r7, r3
 8020f76:	2b0c      	cmp	r3, #12
 8020f78:	d234      	bcs.n	8020fe4 <_malloc_r+0x7c>
 8020f7a:	270c      	movs	r7, #12
 8020f7c:	42b9      	cmp	r1, r7
 8020f7e:	d833      	bhi.n	8020fe8 <_malloc_r+0x80>
 8020f80:	0028      	movs	r0, r5
 8020f82:	f000 f883 	bl	802108c <__malloc_lock>
 8020f86:	4e37      	ldr	r6, [pc, #220]	@ (8021064 <_malloc_r+0xfc>)
 8020f88:	6833      	ldr	r3, [r6, #0]
 8020f8a:	001c      	movs	r4, r3
 8020f8c:	2c00      	cmp	r4, #0
 8020f8e:	d12f      	bne.n	8020ff0 <_malloc_r+0x88>
 8020f90:	0039      	movs	r1, r7
 8020f92:	0028      	movs	r0, r5
 8020f94:	f7ff ffc6 	bl	8020f24 <sbrk_aligned>
 8020f98:	0004      	movs	r4, r0
 8020f9a:	1c43      	adds	r3, r0, #1
 8020f9c:	d15f      	bne.n	802105e <_malloc_r+0xf6>
 8020f9e:	6834      	ldr	r4, [r6, #0]
 8020fa0:	9400      	str	r4, [sp, #0]
 8020fa2:	9b00      	ldr	r3, [sp, #0]
 8020fa4:	2b00      	cmp	r3, #0
 8020fa6:	d14a      	bne.n	802103e <_malloc_r+0xd6>
 8020fa8:	2c00      	cmp	r4, #0
 8020faa:	d052      	beq.n	8021052 <_malloc_r+0xea>
 8020fac:	6823      	ldr	r3, [r4, #0]
 8020fae:	0028      	movs	r0, r5
 8020fb0:	18e3      	adds	r3, r4, r3
 8020fb2:	9900      	ldr	r1, [sp, #0]
 8020fb4:	9301      	str	r3, [sp, #4]
 8020fb6:	f001 f947 	bl	8022248 <_sbrk_r>
 8020fba:	9b01      	ldr	r3, [sp, #4]
 8020fbc:	4283      	cmp	r3, r0
 8020fbe:	d148      	bne.n	8021052 <_malloc_r+0xea>
 8020fc0:	6823      	ldr	r3, [r4, #0]
 8020fc2:	0028      	movs	r0, r5
 8020fc4:	1aff      	subs	r7, r7, r3
 8020fc6:	0039      	movs	r1, r7
 8020fc8:	f7ff ffac 	bl	8020f24 <sbrk_aligned>
 8020fcc:	3001      	adds	r0, #1
 8020fce:	d040      	beq.n	8021052 <_malloc_r+0xea>
 8020fd0:	6823      	ldr	r3, [r4, #0]
 8020fd2:	19db      	adds	r3, r3, r7
 8020fd4:	6023      	str	r3, [r4, #0]
 8020fd6:	6833      	ldr	r3, [r6, #0]
 8020fd8:	685a      	ldr	r2, [r3, #4]
 8020fda:	2a00      	cmp	r2, #0
 8020fdc:	d133      	bne.n	8021046 <_malloc_r+0xde>
 8020fde:	9b00      	ldr	r3, [sp, #0]
 8020fe0:	6033      	str	r3, [r6, #0]
 8020fe2:	e019      	b.n	8021018 <_malloc_r+0xb0>
 8020fe4:	2b00      	cmp	r3, #0
 8020fe6:	dac9      	bge.n	8020f7c <_malloc_r+0x14>
 8020fe8:	230c      	movs	r3, #12
 8020fea:	602b      	str	r3, [r5, #0]
 8020fec:	2000      	movs	r0, #0
 8020fee:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8020ff0:	6821      	ldr	r1, [r4, #0]
 8020ff2:	1bc9      	subs	r1, r1, r7
 8020ff4:	d420      	bmi.n	8021038 <_malloc_r+0xd0>
 8020ff6:	290b      	cmp	r1, #11
 8020ff8:	d90a      	bls.n	8021010 <_malloc_r+0xa8>
 8020ffa:	19e2      	adds	r2, r4, r7
 8020ffc:	6027      	str	r7, [r4, #0]
 8020ffe:	42a3      	cmp	r3, r4
 8021000:	d104      	bne.n	802100c <_malloc_r+0xa4>
 8021002:	6032      	str	r2, [r6, #0]
 8021004:	6863      	ldr	r3, [r4, #4]
 8021006:	6011      	str	r1, [r2, #0]
 8021008:	6053      	str	r3, [r2, #4]
 802100a:	e005      	b.n	8021018 <_malloc_r+0xb0>
 802100c:	605a      	str	r2, [r3, #4]
 802100e:	e7f9      	b.n	8021004 <_malloc_r+0x9c>
 8021010:	6862      	ldr	r2, [r4, #4]
 8021012:	42a3      	cmp	r3, r4
 8021014:	d10e      	bne.n	8021034 <_malloc_r+0xcc>
 8021016:	6032      	str	r2, [r6, #0]
 8021018:	0028      	movs	r0, r5
 802101a:	f000 f83f 	bl	802109c <__malloc_unlock>
 802101e:	0020      	movs	r0, r4
 8021020:	2207      	movs	r2, #7
 8021022:	300b      	adds	r0, #11
 8021024:	1d23      	adds	r3, r4, #4
 8021026:	4390      	bics	r0, r2
 8021028:	1ac2      	subs	r2, r0, r3
 802102a:	4298      	cmp	r0, r3
 802102c:	d0df      	beq.n	8020fee <_malloc_r+0x86>
 802102e:	1a1b      	subs	r3, r3, r0
 8021030:	50a3      	str	r3, [r4, r2]
 8021032:	e7dc      	b.n	8020fee <_malloc_r+0x86>
 8021034:	605a      	str	r2, [r3, #4]
 8021036:	e7ef      	b.n	8021018 <_malloc_r+0xb0>
 8021038:	0023      	movs	r3, r4
 802103a:	6864      	ldr	r4, [r4, #4]
 802103c:	e7a6      	b.n	8020f8c <_malloc_r+0x24>
 802103e:	9c00      	ldr	r4, [sp, #0]
 8021040:	6863      	ldr	r3, [r4, #4]
 8021042:	9300      	str	r3, [sp, #0]
 8021044:	e7ad      	b.n	8020fa2 <_malloc_r+0x3a>
 8021046:	001a      	movs	r2, r3
 8021048:	685b      	ldr	r3, [r3, #4]
 802104a:	42a3      	cmp	r3, r4
 802104c:	d1fb      	bne.n	8021046 <_malloc_r+0xde>
 802104e:	2300      	movs	r3, #0
 8021050:	e7da      	b.n	8021008 <_malloc_r+0xa0>
 8021052:	230c      	movs	r3, #12
 8021054:	0028      	movs	r0, r5
 8021056:	602b      	str	r3, [r5, #0]
 8021058:	f000 f820 	bl	802109c <__malloc_unlock>
 802105c:	e7c6      	b.n	8020fec <_malloc_r+0x84>
 802105e:	6007      	str	r7, [r0, #0]
 8021060:	e7da      	b.n	8021018 <_malloc_r+0xb0>
 8021062:	46c0      	nop			@ (mov r8, r8)
 8021064:	20003994 	.word	0x20003994

08021068 <__ascii_mbtowc>:
 8021068:	b082      	sub	sp, #8
 802106a:	2900      	cmp	r1, #0
 802106c:	d100      	bne.n	8021070 <__ascii_mbtowc+0x8>
 802106e:	a901      	add	r1, sp, #4
 8021070:	1e10      	subs	r0, r2, #0
 8021072:	d006      	beq.n	8021082 <__ascii_mbtowc+0x1a>
 8021074:	2b00      	cmp	r3, #0
 8021076:	d006      	beq.n	8021086 <__ascii_mbtowc+0x1e>
 8021078:	7813      	ldrb	r3, [r2, #0]
 802107a:	600b      	str	r3, [r1, #0]
 802107c:	7810      	ldrb	r0, [r2, #0]
 802107e:	1e43      	subs	r3, r0, #1
 8021080:	4198      	sbcs	r0, r3
 8021082:	b002      	add	sp, #8
 8021084:	4770      	bx	lr
 8021086:	2002      	movs	r0, #2
 8021088:	4240      	negs	r0, r0
 802108a:	e7fa      	b.n	8021082 <__ascii_mbtowc+0x1a>

0802108c <__malloc_lock>:
 802108c:	b510      	push	{r4, lr}
 802108e:	4802      	ldr	r0, [pc, #8]	@ (8021098 <__malloc_lock+0xc>)
 8021090:	f7fe fcfb 	bl	801fa8a <__retarget_lock_acquire_recursive>
 8021094:	bd10      	pop	{r4, pc}
 8021096:	46c0      	nop			@ (mov r8, r8)
 8021098:	2000398c 	.word	0x2000398c

0802109c <__malloc_unlock>:
 802109c:	b510      	push	{r4, lr}
 802109e:	4802      	ldr	r0, [pc, #8]	@ (80210a8 <__malloc_unlock+0xc>)
 80210a0:	f7fe fcf4 	bl	801fa8c <__retarget_lock_release_recursive>
 80210a4:	bd10      	pop	{r4, pc}
 80210a6:	46c0      	nop			@ (mov r8, r8)
 80210a8:	2000398c 	.word	0x2000398c

080210ac <_Balloc>:
 80210ac:	b570      	push	{r4, r5, r6, lr}
 80210ae:	69c5      	ldr	r5, [r0, #28]
 80210b0:	0006      	movs	r6, r0
 80210b2:	000c      	movs	r4, r1
 80210b4:	2d00      	cmp	r5, #0
 80210b6:	d10e      	bne.n	80210d6 <_Balloc+0x2a>
 80210b8:	2010      	movs	r0, #16
 80210ba:	f7ff ff29 	bl	8020f10 <malloc>
 80210be:	1e02      	subs	r2, r0, #0
 80210c0:	61f0      	str	r0, [r6, #28]
 80210c2:	d104      	bne.n	80210ce <_Balloc+0x22>
 80210c4:	216b      	movs	r1, #107	@ 0x6b
 80210c6:	4b19      	ldr	r3, [pc, #100]	@ (802112c <_Balloc+0x80>)
 80210c8:	4819      	ldr	r0, [pc, #100]	@ (8021130 <_Balloc+0x84>)
 80210ca:	f001 f8cf 	bl	802226c <__assert_func>
 80210ce:	6045      	str	r5, [r0, #4]
 80210d0:	6085      	str	r5, [r0, #8]
 80210d2:	6005      	str	r5, [r0, #0]
 80210d4:	60c5      	str	r5, [r0, #12]
 80210d6:	69f5      	ldr	r5, [r6, #28]
 80210d8:	68eb      	ldr	r3, [r5, #12]
 80210da:	2b00      	cmp	r3, #0
 80210dc:	d013      	beq.n	8021106 <_Balloc+0x5a>
 80210de:	69f3      	ldr	r3, [r6, #28]
 80210e0:	00a2      	lsls	r2, r4, #2
 80210e2:	68db      	ldr	r3, [r3, #12]
 80210e4:	189b      	adds	r3, r3, r2
 80210e6:	6818      	ldr	r0, [r3, #0]
 80210e8:	2800      	cmp	r0, #0
 80210ea:	d118      	bne.n	802111e <_Balloc+0x72>
 80210ec:	2101      	movs	r1, #1
 80210ee:	000d      	movs	r5, r1
 80210f0:	40a5      	lsls	r5, r4
 80210f2:	1d6a      	adds	r2, r5, #5
 80210f4:	0030      	movs	r0, r6
 80210f6:	0092      	lsls	r2, r2, #2
 80210f8:	f001 f8d6 	bl	80222a8 <_calloc_r>
 80210fc:	2800      	cmp	r0, #0
 80210fe:	d00c      	beq.n	802111a <_Balloc+0x6e>
 8021100:	6044      	str	r4, [r0, #4]
 8021102:	6085      	str	r5, [r0, #8]
 8021104:	e00d      	b.n	8021122 <_Balloc+0x76>
 8021106:	2221      	movs	r2, #33	@ 0x21
 8021108:	2104      	movs	r1, #4
 802110a:	0030      	movs	r0, r6
 802110c:	f001 f8cc 	bl	80222a8 <_calloc_r>
 8021110:	69f3      	ldr	r3, [r6, #28]
 8021112:	60e8      	str	r0, [r5, #12]
 8021114:	68db      	ldr	r3, [r3, #12]
 8021116:	2b00      	cmp	r3, #0
 8021118:	d1e1      	bne.n	80210de <_Balloc+0x32>
 802111a:	2000      	movs	r0, #0
 802111c:	bd70      	pop	{r4, r5, r6, pc}
 802111e:	6802      	ldr	r2, [r0, #0]
 8021120:	601a      	str	r2, [r3, #0]
 8021122:	2300      	movs	r3, #0
 8021124:	6103      	str	r3, [r0, #16]
 8021126:	60c3      	str	r3, [r0, #12]
 8021128:	e7f8      	b.n	802111c <_Balloc+0x70>
 802112a:	46c0      	nop			@ (mov r8, r8)
 802112c:	0802515a 	.word	0x0802515a
 8021130:	0802523a 	.word	0x0802523a

08021134 <_Bfree>:
 8021134:	b570      	push	{r4, r5, r6, lr}
 8021136:	69c6      	ldr	r6, [r0, #28]
 8021138:	0005      	movs	r5, r0
 802113a:	000c      	movs	r4, r1
 802113c:	2e00      	cmp	r6, #0
 802113e:	d10e      	bne.n	802115e <_Bfree+0x2a>
 8021140:	2010      	movs	r0, #16
 8021142:	f7ff fee5 	bl	8020f10 <malloc>
 8021146:	1e02      	subs	r2, r0, #0
 8021148:	61e8      	str	r0, [r5, #28]
 802114a:	d104      	bne.n	8021156 <_Bfree+0x22>
 802114c:	218f      	movs	r1, #143	@ 0x8f
 802114e:	4b09      	ldr	r3, [pc, #36]	@ (8021174 <_Bfree+0x40>)
 8021150:	4809      	ldr	r0, [pc, #36]	@ (8021178 <_Bfree+0x44>)
 8021152:	f001 f88b 	bl	802226c <__assert_func>
 8021156:	6046      	str	r6, [r0, #4]
 8021158:	6086      	str	r6, [r0, #8]
 802115a:	6006      	str	r6, [r0, #0]
 802115c:	60c6      	str	r6, [r0, #12]
 802115e:	2c00      	cmp	r4, #0
 8021160:	d007      	beq.n	8021172 <_Bfree+0x3e>
 8021162:	69eb      	ldr	r3, [r5, #28]
 8021164:	6862      	ldr	r2, [r4, #4]
 8021166:	68db      	ldr	r3, [r3, #12]
 8021168:	0092      	lsls	r2, r2, #2
 802116a:	189b      	adds	r3, r3, r2
 802116c:	681a      	ldr	r2, [r3, #0]
 802116e:	6022      	str	r2, [r4, #0]
 8021170:	601c      	str	r4, [r3, #0]
 8021172:	bd70      	pop	{r4, r5, r6, pc}
 8021174:	0802515a 	.word	0x0802515a
 8021178:	0802523a 	.word	0x0802523a

0802117c <__multadd>:
 802117c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 802117e:	000f      	movs	r7, r1
 8021180:	9001      	str	r0, [sp, #4]
 8021182:	000c      	movs	r4, r1
 8021184:	001e      	movs	r6, r3
 8021186:	2000      	movs	r0, #0
 8021188:	690d      	ldr	r5, [r1, #16]
 802118a:	3714      	adds	r7, #20
 802118c:	683b      	ldr	r3, [r7, #0]
 802118e:	3001      	adds	r0, #1
 8021190:	b299      	uxth	r1, r3
 8021192:	4351      	muls	r1, r2
 8021194:	0c1b      	lsrs	r3, r3, #16
 8021196:	4353      	muls	r3, r2
 8021198:	1989      	adds	r1, r1, r6
 802119a:	0c0e      	lsrs	r6, r1, #16
 802119c:	199b      	adds	r3, r3, r6
 802119e:	0c1e      	lsrs	r6, r3, #16
 80211a0:	b289      	uxth	r1, r1
 80211a2:	041b      	lsls	r3, r3, #16
 80211a4:	185b      	adds	r3, r3, r1
 80211a6:	c708      	stmia	r7!, {r3}
 80211a8:	4285      	cmp	r5, r0
 80211aa:	dcef      	bgt.n	802118c <__multadd+0x10>
 80211ac:	2e00      	cmp	r6, #0
 80211ae:	d022      	beq.n	80211f6 <__multadd+0x7a>
 80211b0:	68a3      	ldr	r3, [r4, #8]
 80211b2:	42ab      	cmp	r3, r5
 80211b4:	dc19      	bgt.n	80211ea <__multadd+0x6e>
 80211b6:	6861      	ldr	r1, [r4, #4]
 80211b8:	9801      	ldr	r0, [sp, #4]
 80211ba:	3101      	adds	r1, #1
 80211bc:	f7ff ff76 	bl	80210ac <_Balloc>
 80211c0:	1e07      	subs	r7, r0, #0
 80211c2:	d105      	bne.n	80211d0 <__multadd+0x54>
 80211c4:	003a      	movs	r2, r7
 80211c6:	21ba      	movs	r1, #186	@ 0xba
 80211c8:	4b0c      	ldr	r3, [pc, #48]	@ (80211fc <__multadd+0x80>)
 80211ca:	480d      	ldr	r0, [pc, #52]	@ (8021200 <__multadd+0x84>)
 80211cc:	f001 f84e 	bl	802226c <__assert_func>
 80211d0:	0021      	movs	r1, r4
 80211d2:	6922      	ldr	r2, [r4, #16]
 80211d4:	310c      	adds	r1, #12
 80211d6:	3202      	adds	r2, #2
 80211d8:	0092      	lsls	r2, r2, #2
 80211da:	300c      	adds	r0, #12
 80211dc:	f7fe fc62 	bl	801faa4 <memcpy>
 80211e0:	0021      	movs	r1, r4
 80211e2:	9801      	ldr	r0, [sp, #4]
 80211e4:	f7ff ffa6 	bl	8021134 <_Bfree>
 80211e8:	003c      	movs	r4, r7
 80211ea:	1d2b      	adds	r3, r5, #4
 80211ec:	009b      	lsls	r3, r3, #2
 80211ee:	18e3      	adds	r3, r4, r3
 80211f0:	3501      	adds	r5, #1
 80211f2:	605e      	str	r6, [r3, #4]
 80211f4:	6125      	str	r5, [r4, #16]
 80211f6:	0020      	movs	r0, r4
 80211f8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80211fa:	46c0      	nop			@ (mov r8, r8)
 80211fc:	080251c9 	.word	0x080251c9
 8021200:	0802523a 	.word	0x0802523a

08021204 <__s2b>:
 8021204:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8021206:	0007      	movs	r7, r0
 8021208:	0018      	movs	r0, r3
 802120a:	000c      	movs	r4, r1
 802120c:	3008      	adds	r0, #8
 802120e:	2109      	movs	r1, #9
 8021210:	9301      	str	r3, [sp, #4]
 8021212:	0015      	movs	r5, r2
 8021214:	f7df f850 	bl	80002b8 <__divsi3>
 8021218:	2301      	movs	r3, #1
 802121a:	2100      	movs	r1, #0
 802121c:	4283      	cmp	r3, r0
 802121e:	db0a      	blt.n	8021236 <__s2b+0x32>
 8021220:	0038      	movs	r0, r7
 8021222:	f7ff ff43 	bl	80210ac <_Balloc>
 8021226:	1e01      	subs	r1, r0, #0
 8021228:	d108      	bne.n	802123c <__s2b+0x38>
 802122a:	000a      	movs	r2, r1
 802122c:	4b19      	ldr	r3, [pc, #100]	@ (8021294 <__s2b+0x90>)
 802122e:	481a      	ldr	r0, [pc, #104]	@ (8021298 <__s2b+0x94>)
 8021230:	31d3      	adds	r1, #211	@ 0xd3
 8021232:	f001 f81b 	bl	802226c <__assert_func>
 8021236:	005b      	lsls	r3, r3, #1
 8021238:	3101      	adds	r1, #1
 802123a:	e7ef      	b.n	802121c <__s2b+0x18>
 802123c:	9b08      	ldr	r3, [sp, #32]
 802123e:	6143      	str	r3, [r0, #20]
 8021240:	2301      	movs	r3, #1
 8021242:	6103      	str	r3, [r0, #16]
 8021244:	2d09      	cmp	r5, #9
 8021246:	dd18      	ble.n	802127a <__s2b+0x76>
 8021248:	0023      	movs	r3, r4
 802124a:	3309      	adds	r3, #9
 802124c:	001e      	movs	r6, r3
 802124e:	9300      	str	r3, [sp, #0]
 8021250:	1964      	adds	r4, r4, r5
 8021252:	7833      	ldrb	r3, [r6, #0]
 8021254:	220a      	movs	r2, #10
 8021256:	0038      	movs	r0, r7
 8021258:	3b30      	subs	r3, #48	@ 0x30
 802125a:	f7ff ff8f 	bl	802117c <__multadd>
 802125e:	3601      	adds	r6, #1
 8021260:	0001      	movs	r1, r0
 8021262:	42a6      	cmp	r6, r4
 8021264:	d1f5      	bne.n	8021252 <__s2b+0x4e>
 8021266:	002c      	movs	r4, r5
 8021268:	9b00      	ldr	r3, [sp, #0]
 802126a:	3c08      	subs	r4, #8
 802126c:	191c      	adds	r4, r3, r4
 802126e:	002e      	movs	r6, r5
 8021270:	9b01      	ldr	r3, [sp, #4]
 8021272:	429e      	cmp	r6, r3
 8021274:	db04      	blt.n	8021280 <__s2b+0x7c>
 8021276:	0008      	movs	r0, r1
 8021278:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 802127a:	2509      	movs	r5, #9
 802127c:	340a      	adds	r4, #10
 802127e:	e7f6      	b.n	802126e <__s2b+0x6a>
 8021280:	1b63      	subs	r3, r4, r5
 8021282:	5d9b      	ldrb	r3, [r3, r6]
 8021284:	220a      	movs	r2, #10
 8021286:	0038      	movs	r0, r7
 8021288:	3b30      	subs	r3, #48	@ 0x30
 802128a:	f7ff ff77 	bl	802117c <__multadd>
 802128e:	3601      	adds	r6, #1
 8021290:	0001      	movs	r1, r0
 8021292:	e7ed      	b.n	8021270 <__s2b+0x6c>
 8021294:	080251c9 	.word	0x080251c9
 8021298:	0802523a 	.word	0x0802523a

0802129c <__hi0bits>:
 802129c:	2280      	movs	r2, #128	@ 0x80
 802129e:	0003      	movs	r3, r0
 80212a0:	0252      	lsls	r2, r2, #9
 80212a2:	2000      	movs	r0, #0
 80212a4:	4293      	cmp	r3, r2
 80212a6:	d201      	bcs.n	80212ac <__hi0bits+0x10>
 80212a8:	041b      	lsls	r3, r3, #16
 80212aa:	3010      	adds	r0, #16
 80212ac:	2280      	movs	r2, #128	@ 0x80
 80212ae:	0452      	lsls	r2, r2, #17
 80212b0:	4293      	cmp	r3, r2
 80212b2:	d201      	bcs.n	80212b8 <__hi0bits+0x1c>
 80212b4:	3008      	adds	r0, #8
 80212b6:	021b      	lsls	r3, r3, #8
 80212b8:	2280      	movs	r2, #128	@ 0x80
 80212ba:	0552      	lsls	r2, r2, #21
 80212bc:	4293      	cmp	r3, r2
 80212be:	d201      	bcs.n	80212c4 <__hi0bits+0x28>
 80212c0:	3004      	adds	r0, #4
 80212c2:	011b      	lsls	r3, r3, #4
 80212c4:	2280      	movs	r2, #128	@ 0x80
 80212c6:	05d2      	lsls	r2, r2, #23
 80212c8:	4293      	cmp	r3, r2
 80212ca:	d201      	bcs.n	80212d0 <__hi0bits+0x34>
 80212cc:	3002      	adds	r0, #2
 80212ce:	009b      	lsls	r3, r3, #2
 80212d0:	2b00      	cmp	r3, #0
 80212d2:	db03      	blt.n	80212dc <__hi0bits+0x40>
 80212d4:	3001      	adds	r0, #1
 80212d6:	4213      	tst	r3, r2
 80212d8:	d100      	bne.n	80212dc <__hi0bits+0x40>
 80212da:	2020      	movs	r0, #32
 80212dc:	4770      	bx	lr

080212de <__lo0bits>:
 80212de:	6803      	ldr	r3, [r0, #0]
 80212e0:	0001      	movs	r1, r0
 80212e2:	2207      	movs	r2, #7
 80212e4:	0018      	movs	r0, r3
 80212e6:	4010      	ands	r0, r2
 80212e8:	4213      	tst	r3, r2
 80212ea:	d00d      	beq.n	8021308 <__lo0bits+0x2a>
 80212ec:	3a06      	subs	r2, #6
 80212ee:	2000      	movs	r0, #0
 80212f0:	4213      	tst	r3, r2
 80212f2:	d105      	bne.n	8021300 <__lo0bits+0x22>
 80212f4:	3002      	adds	r0, #2
 80212f6:	4203      	tst	r3, r0
 80212f8:	d003      	beq.n	8021302 <__lo0bits+0x24>
 80212fa:	40d3      	lsrs	r3, r2
 80212fc:	0010      	movs	r0, r2
 80212fe:	600b      	str	r3, [r1, #0]
 8021300:	4770      	bx	lr
 8021302:	089b      	lsrs	r3, r3, #2
 8021304:	600b      	str	r3, [r1, #0]
 8021306:	e7fb      	b.n	8021300 <__lo0bits+0x22>
 8021308:	b29a      	uxth	r2, r3
 802130a:	2a00      	cmp	r2, #0
 802130c:	d101      	bne.n	8021312 <__lo0bits+0x34>
 802130e:	2010      	movs	r0, #16
 8021310:	0c1b      	lsrs	r3, r3, #16
 8021312:	b2da      	uxtb	r2, r3
 8021314:	2a00      	cmp	r2, #0
 8021316:	d101      	bne.n	802131c <__lo0bits+0x3e>
 8021318:	3008      	adds	r0, #8
 802131a:	0a1b      	lsrs	r3, r3, #8
 802131c:	071a      	lsls	r2, r3, #28
 802131e:	d101      	bne.n	8021324 <__lo0bits+0x46>
 8021320:	3004      	adds	r0, #4
 8021322:	091b      	lsrs	r3, r3, #4
 8021324:	079a      	lsls	r2, r3, #30
 8021326:	d101      	bne.n	802132c <__lo0bits+0x4e>
 8021328:	3002      	adds	r0, #2
 802132a:	089b      	lsrs	r3, r3, #2
 802132c:	07da      	lsls	r2, r3, #31
 802132e:	d4e9      	bmi.n	8021304 <__lo0bits+0x26>
 8021330:	3001      	adds	r0, #1
 8021332:	085b      	lsrs	r3, r3, #1
 8021334:	d1e6      	bne.n	8021304 <__lo0bits+0x26>
 8021336:	2020      	movs	r0, #32
 8021338:	e7e2      	b.n	8021300 <__lo0bits+0x22>
	...

0802133c <__i2b>:
 802133c:	b510      	push	{r4, lr}
 802133e:	000c      	movs	r4, r1
 8021340:	2101      	movs	r1, #1
 8021342:	f7ff feb3 	bl	80210ac <_Balloc>
 8021346:	2800      	cmp	r0, #0
 8021348:	d107      	bne.n	802135a <__i2b+0x1e>
 802134a:	2146      	movs	r1, #70	@ 0x46
 802134c:	4c05      	ldr	r4, [pc, #20]	@ (8021364 <__i2b+0x28>)
 802134e:	0002      	movs	r2, r0
 8021350:	4b05      	ldr	r3, [pc, #20]	@ (8021368 <__i2b+0x2c>)
 8021352:	0020      	movs	r0, r4
 8021354:	31ff      	adds	r1, #255	@ 0xff
 8021356:	f000 ff89 	bl	802226c <__assert_func>
 802135a:	2301      	movs	r3, #1
 802135c:	6144      	str	r4, [r0, #20]
 802135e:	6103      	str	r3, [r0, #16]
 8021360:	bd10      	pop	{r4, pc}
 8021362:	46c0      	nop			@ (mov r8, r8)
 8021364:	0802523a 	.word	0x0802523a
 8021368:	080251c9 	.word	0x080251c9

0802136c <__multiply>:
 802136c:	b5f0      	push	{r4, r5, r6, r7, lr}
 802136e:	0014      	movs	r4, r2
 8021370:	690a      	ldr	r2, [r1, #16]
 8021372:	6923      	ldr	r3, [r4, #16]
 8021374:	000d      	movs	r5, r1
 8021376:	b08b      	sub	sp, #44	@ 0x2c
 8021378:	429a      	cmp	r2, r3
 802137a:	db02      	blt.n	8021382 <__multiply+0x16>
 802137c:	0023      	movs	r3, r4
 802137e:	000c      	movs	r4, r1
 8021380:	001d      	movs	r5, r3
 8021382:	6927      	ldr	r7, [r4, #16]
 8021384:	692e      	ldr	r6, [r5, #16]
 8021386:	6861      	ldr	r1, [r4, #4]
 8021388:	19bb      	adds	r3, r7, r6
 802138a:	9303      	str	r3, [sp, #12]
 802138c:	68a3      	ldr	r3, [r4, #8]
 802138e:	19ba      	adds	r2, r7, r6
 8021390:	4293      	cmp	r3, r2
 8021392:	da00      	bge.n	8021396 <__multiply+0x2a>
 8021394:	3101      	adds	r1, #1
 8021396:	f7ff fe89 	bl	80210ac <_Balloc>
 802139a:	9002      	str	r0, [sp, #8]
 802139c:	2800      	cmp	r0, #0
 802139e:	d106      	bne.n	80213ae <__multiply+0x42>
 80213a0:	21b1      	movs	r1, #177	@ 0xb1
 80213a2:	4b49      	ldr	r3, [pc, #292]	@ (80214c8 <__multiply+0x15c>)
 80213a4:	4849      	ldr	r0, [pc, #292]	@ (80214cc <__multiply+0x160>)
 80213a6:	9a02      	ldr	r2, [sp, #8]
 80213a8:	0049      	lsls	r1, r1, #1
 80213aa:	f000 ff5f 	bl	802226c <__assert_func>
 80213ae:	9b02      	ldr	r3, [sp, #8]
 80213b0:	2200      	movs	r2, #0
 80213b2:	3314      	adds	r3, #20
 80213b4:	469c      	mov	ip, r3
 80213b6:	19bb      	adds	r3, r7, r6
 80213b8:	009b      	lsls	r3, r3, #2
 80213ba:	4463      	add	r3, ip
 80213bc:	9304      	str	r3, [sp, #16]
 80213be:	4663      	mov	r3, ip
 80213c0:	9904      	ldr	r1, [sp, #16]
 80213c2:	428b      	cmp	r3, r1
 80213c4:	d32a      	bcc.n	802141c <__multiply+0xb0>
 80213c6:	0023      	movs	r3, r4
 80213c8:	00bf      	lsls	r7, r7, #2
 80213ca:	3314      	adds	r3, #20
 80213cc:	3514      	adds	r5, #20
 80213ce:	9308      	str	r3, [sp, #32]
 80213d0:	00b6      	lsls	r6, r6, #2
 80213d2:	19db      	adds	r3, r3, r7
 80213d4:	9305      	str	r3, [sp, #20]
 80213d6:	19ab      	adds	r3, r5, r6
 80213d8:	9309      	str	r3, [sp, #36]	@ 0x24
 80213da:	2304      	movs	r3, #4
 80213dc:	9306      	str	r3, [sp, #24]
 80213de:	0023      	movs	r3, r4
 80213e0:	9a05      	ldr	r2, [sp, #20]
 80213e2:	3315      	adds	r3, #21
 80213e4:	9501      	str	r5, [sp, #4]
 80213e6:	429a      	cmp	r2, r3
 80213e8:	d305      	bcc.n	80213f6 <__multiply+0x8a>
 80213ea:	1b13      	subs	r3, r2, r4
 80213ec:	3b15      	subs	r3, #21
 80213ee:	089b      	lsrs	r3, r3, #2
 80213f0:	3301      	adds	r3, #1
 80213f2:	009b      	lsls	r3, r3, #2
 80213f4:	9306      	str	r3, [sp, #24]
 80213f6:	9b01      	ldr	r3, [sp, #4]
 80213f8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80213fa:	4293      	cmp	r3, r2
 80213fc:	d310      	bcc.n	8021420 <__multiply+0xb4>
 80213fe:	9b03      	ldr	r3, [sp, #12]
 8021400:	2b00      	cmp	r3, #0
 8021402:	dd05      	ble.n	8021410 <__multiply+0xa4>
 8021404:	9b04      	ldr	r3, [sp, #16]
 8021406:	3b04      	subs	r3, #4
 8021408:	9304      	str	r3, [sp, #16]
 802140a:	681b      	ldr	r3, [r3, #0]
 802140c:	2b00      	cmp	r3, #0
 802140e:	d056      	beq.n	80214be <__multiply+0x152>
 8021410:	9b02      	ldr	r3, [sp, #8]
 8021412:	9a03      	ldr	r2, [sp, #12]
 8021414:	0018      	movs	r0, r3
 8021416:	611a      	str	r2, [r3, #16]
 8021418:	b00b      	add	sp, #44	@ 0x2c
 802141a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802141c:	c304      	stmia	r3!, {r2}
 802141e:	e7cf      	b.n	80213c0 <__multiply+0x54>
 8021420:	9b01      	ldr	r3, [sp, #4]
 8021422:	6818      	ldr	r0, [r3, #0]
 8021424:	b280      	uxth	r0, r0
 8021426:	2800      	cmp	r0, #0
 8021428:	d01e      	beq.n	8021468 <__multiply+0xfc>
 802142a:	4667      	mov	r7, ip
 802142c:	2500      	movs	r5, #0
 802142e:	9e08      	ldr	r6, [sp, #32]
 8021430:	ce02      	ldmia	r6!, {r1}
 8021432:	683b      	ldr	r3, [r7, #0]
 8021434:	9307      	str	r3, [sp, #28]
 8021436:	b28b      	uxth	r3, r1
 8021438:	4343      	muls	r3, r0
 802143a:	001a      	movs	r2, r3
 802143c:	466b      	mov	r3, sp
 802143e:	0c09      	lsrs	r1, r1, #16
 8021440:	8b9b      	ldrh	r3, [r3, #28]
 8021442:	4341      	muls	r1, r0
 8021444:	18d3      	adds	r3, r2, r3
 8021446:	9a07      	ldr	r2, [sp, #28]
 8021448:	195b      	adds	r3, r3, r5
 802144a:	0c12      	lsrs	r2, r2, #16
 802144c:	1889      	adds	r1, r1, r2
 802144e:	0c1a      	lsrs	r2, r3, #16
 8021450:	188a      	adds	r2, r1, r2
 8021452:	b29b      	uxth	r3, r3
 8021454:	0c15      	lsrs	r5, r2, #16
 8021456:	0412      	lsls	r2, r2, #16
 8021458:	431a      	orrs	r2, r3
 802145a:	9b05      	ldr	r3, [sp, #20]
 802145c:	c704      	stmia	r7!, {r2}
 802145e:	42b3      	cmp	r3, r6
 8021460:	d8e6      	bhi.n	8021430 <__multiply+0xc4>
 8021462:	4663      	mov	r3, ip
 8021464:	9a06      	ldr	r2, [sp, #24]
 8021466:	509d      	str	r5, [r3, r2]
 8021468:	9b01      	ldr	r3, [sp, #4]
 802146a:	6818      	ldr	r0, [r3, #0]
 802146c:	0c00      	lsrs	r0, r0, #16
 802146e:	d020      	beq.n	80214b2 <__multiply+0x146>
 8021470:	4663      	mov	r3, ip
 8021472:	0025      	movs	r5, r4
 8021474:	4661      	mov	r1, ip
 8021476:	2700      	movs	r7, #0
 8021478:	681b      	ldr	r3, [r3, #0]
 802147a:	3514      	adds	r5, #20
 802147c:	682a      	ldr	r2, [r5, #0]
 802147e:	680e      	ldr	r6, [r1, #0]
 8021480:	b292      	uxth	r2, r2
 8021482:	4342      	muls	r2, r0
 8021484:	0c36      	lsrs	r6, r6, #16
 8021486:	1992      	adds	r2, r2, r6
 8021488:	19d2      	adds	r2, r2, r7
 802148a:	0416      	lsls	r6, r2, #16
 802148c:	b29b      	uxth	r3, r3
 802148e:	431e      	orrs	r6, r3
 8021490:	600e      	str	r6, [r1, #0]
 8021492:	cd40      	ldmia	r5!, {r6}
 8021494:	684b      	ldr	r3, [r1, #4]
 8021496:	0c36      	lsrs	r6, r6, #16
 8021498:	4346      	muls	r6, r0
 802149a:	b29b      	uxth	r3, r3
 802149c:	0c12      	lsrs	r2, r2, #16
 802149e:	18f3      	adds	r3, r6, r3
 80214a0:	189b      	adds	r3, r3, r2
 80214a2:	9a05      	ldr	r2, [sp, #20]
 80214a4:	0c1f      	lsrs	r7, r3, #16
 80214a6:	3104      	adds	r1, #4
 80214a8:	42aa      	cmp	r2, r5
 80214aa:	d8e7      	bhi.n	802147c <__multiply+0x110>
 80214ac:	4662      	mov	r2, ip
 80214ae:	9906      	ldr	r1, [sp, #24]
 80214b0:	5053      	str	r3, [r2, r1]
 80214b2:	9b01      	ldr	r3, [sp, #4]
 80214b4:	3304      	adds	r3, #4
 80214b6:	9301      	str	r3, [sp, #4]
 80214b8:	2304      	movs	r3, #4
 80214ba:	449c      	add	ip, r3
 80214bc:	e79b      	b.n	80213f6 <__multiply+0x8a>
 80214be:	9b03      	ldr	r3, [sp, #12]
 80214c0:	3b01      	subs	r3, #1
 80214c2:	9303      	str	r3, [sp, #12]
 80214c4:	e79b      	b.n	80213fe <__multiply+0x92>
 80214c6:	46c0      	nop			@ (mov r8, r8)
 80214c8:	080251c9 	.word	0x080251c9
 80214cc:	0802523a 	.word	0x0802523a

080214d0 <__pow5mult>:
 80214d0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80214d2:	2303      	movs	r3, #3
 80214d4:	0015      	movs	r5, r2
 80214d6:	0007      	movs	r7, r0
 80214d8:	000e      	movs	r6, r1
 80214da:	401a      	ands	r2, r3
 80214dc:	421d      	tst	r5, r3
 80214de:	d008      	beq.n	80214f2 <__pow5mult+0x22>
 80214e0:	4925      	ldr	r1, [pc, #148]	@ (8021578 <__pow5mult+0xa8>)
 80214e2:	3a01      	subs	r2, #1
 80214e4:	0092      	lsls	r2, r2, #2
 80214e6:	5852      	ldr	r2, [r2, r1]
 80214e8:	2300      	movs	r3, #0
 80214ea:	0031      	movs	r1, r6
 80214ec:	f7ff fe46 	bl	802117c <__multadd>
 80214f0:	0006      	movs	r6, r0
 80214f2:	10ad      	asrs	r5, r5, #2
 80214f4:	d03d      	beq.n	8021572 <__pow5mult+0xa2>
 80214f6:	69fc      	ldr	r4, [r7, #28]
 80214f8:	2c00      	cmp	r4, #0
 80214fa:	d10f      	bne.n	802151c <__pow5mult+0x4c>
 80214fc:	2010      	movs	r0, #16
 80214fe:	f7ff fd07 	bl	8020f10 <malloc>
 8021502:	1e02      	subs	r2, r0, #0
 8021504:	61f8      	str	r0, [r7, #28]
 8021506:	d105      	bne.n	8021514 <__pow5mult+0x44>
 8021508:	21b4      	movs	r1, #180	@ 0xb4
 802150a:	4b1c      	ldr	r3, [pc, #112]	@ (802157c <__pow5mult+0xac>)
 802150c:	481c      	ldr	r0, [pc, #112]	@ (8021580 <__pow5mult+0xb0>)
 802150e:	31ff      	adds	r1, #255	@ 0xff
 8021510:	f000 feac 	bl	802226c <__assert_func>
 8021514:	6044      	str	r4, [r0, #4]
 8021516:	6084      	str	r4, [r0, #8]
 8021518:	6004      	str	r4, [r0, #0]
 802151a:	60c4      	str	r4, [r0, #12]
 802151c:	69fb      	ldr	r3, [r7, #28]
 802151e:	689c      	ldr	r4, [r3, #8]
 8021520:	9301      	str	r3, [sp, #4]
 8021522:	2c00      	cmp	r4, #0
 8021524:	d108      	bne.n	8021538 <__pow5mult+0x68>
 8021526:	0038      	movs	r0, r7
 8021528:	4916      	ldr	r1, [pc, #88]	@ (8021584 <__pow5mult+0xb4>)
 802152a:	f7ff ff07 	bl	802133c <__i2b>
 802152e:	9b01      	ldr	r3, [sp, #4]
 8021530:	0004      	movs	r4, r0
 8021532:	6098      	str	r0, [r3, #8]
 8021534:	2300      	movs	r3, #0
 8021536:	6003      	str	r3, [r0, #0]
 8021538:	2301      	movs	r3, #1
 802153a:	421d      	tst	r5, r3
 802153c:	d00a      	beq.n	8021554 <__pow5mult+0x84>
 802153e:	0031      	movs	r1, r6
 8021540:	0022      	movs	r2, r4
 8021542:	0038      	movs	r0, r7
 8021544:	f7ff ff12 	bl	802136c <__multiply>
 8021548:	0031      	movs	r1, r6
 802154a:	9001      	str	r0, [sp, #4]
 802154c:	0038      	movs	r0, r7
 802154e:	f7ff fdf1 	bl	8021134 <_Bfree>
 8021552:	9e01      	ldr	r6, [sp, #4]
 8021554:	106d      	asrs	r5, r5, #1
 8021556:	d00c      	beq.n	8021572 <__pow5mult+0xa2>
 8021558:	6820      	ldr	r0, [r4, #0]
 802155a:	2800      	cmp	r0, #0
 802155c:	d107      	bne.n	802156e <__pow5mult+0x9e>
 802155e:	0022      	movs	r2, r4
 8021560:	0021      	movs	r1, r4
 8021562:	0038      	movs	r0, r7
 8021564:	f7ff ff02 	bl	802136c <__multiply>
 8021568:	2300      	movs	r3, #0
 802156a:	6020      	str	r0, [r4, #0]
 802156c:	6003      	str	r3, [r0, #0]
 802156e:	0004      	movs	r4, r0
 8021570:	e7e2      	b.n	8021538 <__pow5mult+0x68>
 8021572:	0030      	movs	r0, r6
 8021574:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8021576:	46c0      	nop			@ (mov r8, r8)
 8021578:	08025294 	.word	0x08025294
 802157c:	0802515a 	.word	0x0802515a
 8021580:	0802523a 	.word	0x0802523a
 8021584:	00000271 	.word	0x00000271

08021588 <__lshift>:
 8021588:	b5f0      	push	{r4, r5, r6, r7, lr}
 802158a:	000c      	movs	r4, r1
 802158c:	0016      	movs	r6, r2
 802158e:	6923      	ldr	r3, [r4, #16]
 8021590:	1157      	asrs	r7, r2, #5
 8021592:	b085      	sub	sp, #20
 8021594:	18fb      	adds	r3, r7, r3
 8021596:	9301      	str	r3, [sp, #4]
 8021598:	3301      	adds	r3, #1
 802159a:	9300      	str	r3, [sp, #0]
 802159c:	6849      	ldr	r1, [r1, #4]
 802159e:	68a3      	ldr	r3, [r4, #8]
 80215a0:	9002      	str	r0, [sp, #8]
 80215a2:	9a00      	ldr	r2, [sp, #0]
 80215a4:	4293      	cmp	r3, r2
 80215a6:	db10      	blt.n	80215ca <__lshift+0x42>
 80215a8:	9802      	ldr	r0, [sp, #8]
 80215aa:	f7ff fd7f 	bl	80210ac <_Balloc>
 80215ae:	2300      	movs	r3, #0
 80215b0:	0001      	movs	r1, r0
 80215b2:	0005      	movs	r5, r0
 80215b4:	001a      	movs	r2, r3
 80215b6:	3114      	adds	r1, #20
 80215b8:	4298      	cmp	r0, r3
 80215ba:	d10c      	bne.n	80215d6 <__lshift+0x4e>
 80215bc:	21ef      	movs	r1, #239	@ 0xef
 80215be:	002a      	movs	r2, r5
 80215c0:	4b25      	ldr	r3, [pc, #148]	@ (8021658 <__lshift+0xd0>)
 80215c2:	4826      	ldr	r0, [pc, #152]	@ (802165c <__lshift+0xd4>)
 80215c4:	0049      	lsls	r1, r1, #1
 80215c6:	f000 fe51 	bl	802226c <__assert_func>
 80215ca:	3101      	adds	r1, #1
 80215cc:	005b      	lsls	r3, r3, #1
 80215ce:	e7e8      	b.n	80215a2 <__lshift+0x1a>
 80215d0:	0098      	lsls	r0, r3, #2
 80215d2:	500a      	str	r2, [r1, r0]
 80215d4:	3301      	adds	r3, #1
 80215d6:	42bb      	cmp	r3, r7
 80215d8:	dbfa      	blt.n	80215d0 <__lshift+0x48>
 80215da:	43fb      	mvns	r3, r7
 80215dc:	17db      	asrs	r3, r3, #31
 80215de:	401f      	ands	r7, r3
 80215e0:	00bf      	lsls	r7, r7, #2
 80215e2:	0023      	movs	r3, r4
 80215e4:	201f      	movs	r0, #31
 80215e6:	19c9      	adds	r1, r1, r7
 80215e8:	0037      	movs	r7, r6
 80215ea:	6922      	ldr	r2, [r4, #16]
 80215ec:	3314      	adds	r3, #20
 80215ee:	0092      	lsls	r2, r2, #2
 80215f0:	189a      	adds	r2, r3, r2
 80215f2:	4007      	ands	r7, r0
 80215f4:	4206      	tst	r6, r0
 80215f6:	d029      	beq.n	802164c <__lshift+0xc4>
 80215f8:	3001      	adds	r0, #1
 80215fa:	1bc0      	subs	r0, r0, r7
 80215fc:	9003      	str	r0, [sp, #12]
 80215fe:	468c      	mov	ip, r1
 8021600:	2000      	movs	r0, #0
 8021602:	681e      	ldr	r6, [r3, #0]
 8021604:	40be      	lsls	r6, r7
 8021606:	4306      	orrs	r6, r0
 8021608:	4660      	mov	r0, ip
 802160a:	c040      	stmia	r0!, {r6}
 802160c:	4684      	mov	ip, r0
 802160e:	9e03      	ldr	r6, [sp, #12]
 8021610:	cb01      	ldmia	r3!, {r0}
 8021612:	40f0      	lsrs	r0, r6
 8021614:	429a      	cmp	r2, r3
 8021616:	d8f4      	bhi.n	8021602 <__lshift+0x7a>
 8021618:	0026      	movs	r6, r4
 802161a:	3615      	adds	r6, #21
 802161c:	2304      	movs	r3, #4
 802161e:	42b2      	cmp	r2, r6
 8021620:	d304      	bcc.n	802162c <__lshift+0xa4>
 8021622:	1b13      	subs	r3, r2, r4
 8021624:	3b15      	subs	r3, #21
 8021626:	089b      	lsrs	r3, r3, #2
 8021628:	3301      	adds	r3, #1
 802162a:	009b      	lsls	r3, r3, #2
 802162c:	50c8      	str	r0, [r1, r3]
 802162e:	2800      	cmp	r0, #0
 8021630:	d002      	beq.n	8021638 <__lshift+0xb0>
 8021632:	9b01      	ldr	r3, [sp, #4]
 8021634:	3302      	adds	r3, #2
 8021636:	9300      	str	r3, [sp, #0]
 8021638:	9b00      	ldr	r3, [sp, #0]
 802163a:	9802      	ldr	r0, [sp, #8]
 802163c:	3b01      	subs	r3, #1
 802163e:	0021      	movs	r1, r4
 8021640:	612b      	str	r3, [r5, #16]
 8021642:	f7ff fd77 	bl	8021134 <_Bfree>
 8021646:	0028      	movs	r0, r5
 8021648:	b005      	add	sp, #20
 802164a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802164c:	cb01      	ldmia	r3!, {r0}
 802164e:	c101      	stmia	r1!, {r0}
 8021650:	429a      	cmp	r2, r3
 8021652:	d8fb      	bhi.n	802164c <__lshift+0xc4>
 8021654:	e7f0      	b.n	8021638 <__lshift+0xb0>
 8021656:	46c0      	nop			@ (mov r8, r8)
 8021658:	080251c9 	.word	0x080251c9
 802165c:	0802523a 	.word	0x0802523a

08021660 <__mcmp>:
 8021660:	b530      	push	{r4, r5, lr}
 8021662:	690b      	ldr	r3, [r1, #16]
 8021664:	6904      	ldr	r4, [r0, #16]
 8021666:	0002      	movs	r2, r0
 8021668:	1ae0      	subs	r0, r4, r3
 802166a:	429c      	cmp	r4, r3
 802166c:	d10f      	bne.n	802168e <__mcmp+0x2e>
 802166e:	3214      	adds	r2, #20
 8021670:	009b      	lsls	r3, r3, #2
 8021672:	3114      	adds	r1, #20
 8021674:	0014      	movs	r4, r2
 8021676:	18c9      	adds	r1, r1, r3
 8021678:	18d2      	adds	r2, r2, r3
 802167a:	3a04      	subs	r2, #4
 802167c:	3904      	subs	r1, #4
 802167e:	6815      	ldr	r5, [r2, #0]
 8021680:	680b      	ldr	r3, [r1, #0]
 8021682:	429d      	cmp	r5, r3
 8021684:	d004      	beq.n	8021690 <__mcmp+0x30>
 8021686:	2001      	movs	r0, #1
 8021688:	429d      	cmp	r5, r3
 802168a:	d200      	bcs.n	802168e <__mcmp+0x2e>
 802168c:	3802      	subs	r0, #2
 802168e:	bd30      	pop	{r4, r5, pc}
 8021690:	4294      	cmp	r4, r2
 8021692:	d3f2      	bcc.n	802167a <__mcmp+0x1a>
 8021694:	e7fb      	b.n	802168e <__mcmp+0x2e>
	...

08021698 <__mdiff>:
 8021698:	b5f0      	push	{r4, r5, r6, r7, lr}
 802169a:	000c      	movs	r4, r1
 802169c:	b087      	sub	sp, #28
 802169e:	9000      	str	r0, [sp, #0]
 80216a0:	0011      	movs	r1, r2
 80216a2:	0020      	movs	r0, r4
 80216a4:	0017      	movs	r7, r2
 80216a6:	f7ff ffdb 	bl	8021660 <__mcmp>
 80216aa:	1e05      	subs	r5, r0, #0
 80216ac:	d110      	bne.n	80216d0 <__mdiff+0x38>
 80216ae:	0001      	movs	r1, r0
 80216b0:	9800      	ldr	r0, [sp, #0]
 80216b2:	f7ff fcfb 	bl	80210ac <_Balloc>
 80216b6:	1e02      	subs	r2, r0, #0
 80216b8:	d104      	bne.n	80216c4 <__mdiff+0x2c>
 80216ba:	4b40      	ldr	r3, [pc, #256]	@ (80217bc <__mdiff+0x124>)
 80216bc:	4840      	ldr	r0, [pc, #256]	@ (80217c0 <__mdiff+0x128>)
 80216be:	4941      	ldr	r1, [pc, #260]	@ (80217c4 <__mdiff+0x12c>)
 80216c0:	f000 fdd4 	bl	802226c <__assert_func>
 80216c4:	2301      	movs	r3, #1
 80216c6:	6145      	str	r5, [r0, #20]
 80216c8:	6103      	str	r3, [r0, #16]
 80216ca:	0010      	movs	r0, r2
 80216cc:	b007      	add	sp, #28
 80216ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80216d0:	2600      	movs	r6, #0
 80216d2:	42b0      	cmp	r0, r6
 80216d4:	da03      	bge.n	80216de <__mdiff+0x46>
 80216d6:	0023      	movs	r3, r4
 80216d8:	003c      	movs	r4, r7
 80216da:	001f      	movs	r7, r3
 80216dc:	3601      	adds	r6, #1
 80216de:	6861      	ldr	r1, [r4, #4]
 80216e0:	9800      	ldr	r0, [sp, #0]
 80216e2:	f7ff fce3 	bl	80210ac <_Balloc>
 80216e6:	1e02      	subs	r2, r0, #0
 80216e8:	d103      	bne.n	80216f2 <__mdiff+0x5a>
 80216ea:	4b34      	ldr	r3, [pc, #208]	@ (80217bc <__mdiff+0x124>)
 80216ec:	4834      	ldr	r0, [pc, #208]	@ (80217c0 <__mdiff+0x128>)
 80216ee:	4936      	ldr	r1, [pc, #216]	@ (80217c8 <__mdiff+0x130>)
 80216f0:	e7e6      	b.n	80216c0 <__mdiff+0x28>
 80216f2:	6923      	ldr	r3, [r4, #16]
 80216f4:	3414      	adds	r4, #20
 80216f6:	9300      	str	r3, [sp, #0]
 80216f8:	009b      	lsls	r3, r3, #2
 80216fa:	18e3      	adds	r3, r4, r3
 80216fc:	0021      	movs	r1, r4
 80216fe:	9401      	str	r4, [sp, #4]
 8021700:	003c      	movs	r4, r7
 8021702:	9302      	str	r3, [sp, #8]
 8021704:	693b      	ldr	r3, [r7, #16]
 8021706:	3414      	adds	r4, #20
 8021708:	009b      	lsls	r3, r3, #2
 802170a:	18e3      	adds	r3, r4, r3
 802170c:	9303      	str	r3, [sp, #12]
 802170e:	0003      	movs	r3, r0
 8021710:	60c6      	str	r6, [r0, #12]
 8021712:	468c      	mov	ip, r1
 8021714:	2000      	movs	r0, #0
 8021716:	3314      	adds	r3, #20
 8021718:	9304      	str	r3, [sp, #16]
 802171a:	9305      	str	r3, [sp, #20]
 802171c:	4663      	mov	r3, ip
 802171e:	cb20      	ldmia	r3!, {r5}
 8021720:	b2a9      	uxth	r1, r5
 8021722:	000e      	movs	r6, r1
 8021724:	469c      	mov	ip, r3
 8021726:	cc08      	ldmia	r4!, {r3}
 8021728:	0c2d      	lsrs	r5, r5, #16
 802172a:	b299      	uxth	r1, r3
 802172c:	1a71      	subs	r1, r6, r1
 802172e:	1809      	adds	r1, r1, r0
 8021730:	0c1b      	lsrs	r3, r3, #16
 8021732:	1408      	asrs	r0, r1, #16
 8021734:	1aeb      	subs	r3, r5, r3
 8021736:	181b      	adds	r3, r3, r0
 8021738:	1418      	asrs	r0, r3, #16
 802173a:	b289      	uxth	r1, r1
 802173c:	041b      	lsls	r3, r3, #16
 802173e:	4319      	orrs	r1, r3
 8021740:	9b05      	ldr	r3, [sp, #20]
 8021742:	c302      	stmia	r3!, {r1}
 8021744:	9305      	str	r3, [sp, #20]
 8021746:	9b03      	ldr	r3, [sp, #12]
 8021748:	42a3      	cmp	r3, r4
 802174a:	d8e7      	bhi.n	802171c <__mdiff+0x84>
 802174c:	0039      	movs	r1, r7
 802174e:	9c03      	ldr	r4, [sp, #12]
 8021750:	3115      	adds	r1, #21
 8021752:	2304      	movs	r3, #4
 8021754:	428c      	cmp	r4, r1
 8021756:	d304      	bcc.n	8021762 <__mdiff+0xca>
 8021758:	1be3      	subs	r3, r4, r7
 802175a:	3b15      	subs	r3, #21
 802175c:	089b      	lsrs	r3, r3, #2
 802175e:	3301      	adds	r3, #1
 8021760:	009b      	lsls	r3, r3, #2
 8021762:	9901      	ldr	r1, [sp, #4]
 8021764:	18cd      	adds	r5, r1, r3
 8021766:	9904      	ldr	r1, [sp, #16]
 8021768:	002e      	movs	r6, r5
 802176a:	18cb      	adds	r3, r1, r3
 802176c:	001f      	movs	r7, r3
 802176e:	9902      	ldr	r1, [sp, #8]
 8021770:	428e      	cmp	r6, r1
 8021772:	d311      	bcc.n	8021798 <__mdiff+0x100>
 8021774:	9c02      	ldr	r4, [sp, #8]
 8021776:	1ee9      	subs	r1, r5, #3
 8021778:	2000      	movs	r0, #0
 802177a:	428c      	cmp	r4, r1
 802177c:	d304      	bcc.n	8021788 <__mdiff+0xf0>
 802177e:	0021      	movs	r1, r4
 8021780:	3103      	adds	r1, #3
 8021782:	1b49      	subs	r1, r1, r5
 8021784:	0889      	lsrs	r1, r1, #2
 8021786:	0088      	lsls	r0, r1, #2
 8021788:	181b      	adds	r3, r3, r0
 802178a:	3b04      	subs	r3, #4
 802178c:	6819      	ldr	r1, [r3, #0]
 802178e:	2900      	cmp	r1, #0
 8021790:	d010      	beq.n	80217b4 <__mdiff+0x11c>
 8021792:	9b00      	ldr	r3, [sp, #0]
 8021794:	6113      	str	r3, [r2, #16]
 8021796:	e798      	b.n	80216ca <__mdiff+0x32>
 8021798:	4684      	mov	ip, r0
 802179a:	ce02      	ldmia	r6!, {r1}
 802179c:	b288      	uxth	r0, r1
 802179e:	4460      	add	r0, ip
 80217a0:	1400      	asrs	r0, r0, #16
 80217a2:	0c0c      	lsrs	r4, r1, #16
 80217a4:	1904      	adds	r4, r0, r4
 80217a6:	4461      	add	r1, ip
 80217a8:	1420      	asrs	r0, r4, #16
 80217aa:	b289      	uxth	r1, r1
 80217ac:	0424      	lsls	r4, r4, #16
 80217ae:	4321      	orrs	r1, r4
 80217b0:	c702      	stmia	r7!, {r1}
 80217b2:	e7dc      	b.n	802176e <__mdiff+0xd6>
 80217b4:	9900      	ldr	r1, [sp, #0]
 80217b6:	3901      	subs	r1, #1
 80217b8:	9100      	str	r1, [sp, #0]
 80217ba:	e7e6      	b.n	802178a <__mdiff+0xf2>
 80217bc:	080251c9 	.word	0x080251c9
 80217c0:	0802523a 	.word	0x0802523a
 80217c4:	00000237 	.word	0x00000237
 80217c8:	00000245 	.word	0x00000245

080217cc <__ulp>:
 80217cc:	b510      	push	{r4, lr}
 80217ce:	2400      	movs	r4, #0
 80217d0:	4b0c      	ldr	r3, [pc, #48]	@ (8021804 <__ulp+0x38>)
 80217d2:	4a0d      	ldr	r2, [pc, #52]	@ (8021808 <__ulp+0x3c>)
 80217d4:	400b      	ands	r3, r1
 80217d6:	189b      	adds	r3, r3, r2
 80217d8:	42a3      	cmp	r3, r4
 80217da:	dc06      	bgt.n	80217ea <__ulp+0x1e>
 80217dc:	425b      	negs	r3, r3
 80217de:	151a      	asrs	r2, r3, #20
 80217e0:	2a13      	cmp	r2, #19
 80217e2:	dc05      	bgt.n	80217f0 <__ulp+0x24>
 80217e4:	2380      	movs	r3, #128	@ 0x80
 80217e6:	031b      	lsls	r3, r3, #12
 80217e8:	4113      	asrs	r3, r2
 80217ea:	0019      	movs	r1, r3
 80217ec:	0020      	movs	r0, r4
 80217ee:	bd10      	pop	{r4, pc}
 80217f0:	3a14      	subs	r2, #20
 80217f2:	2401      	movs	r4, #1
 80217f4:	2a1e      	cmp	r2, #30
 80217f6:	dc02      	bgt.n	80217fe <__ulp+0x32>
 80217f8:	2480      	movs	r4, #128	@ 0x80
 80217fa:	0624      	lsls	r4, r4, #24
 80217fc:	40d4      	lsrs	r4, r2
 80217fe:	2300      	movs	r3, #0
 8021800:	e7f3      	b.n	80217ea <__ulp+0x1e>
 8021802:	46c0      	nop			@ (mov r8, r8)
 8021804:	7ff00000 	.word	0x7ff00000
 8021808:	fcc00000 	.word	0xfcc00000

0802180c <__b2d>:
 802180c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 802180e:	0006      	movs	r6, r0
 8021810:	6903      	ldr	r3, [r0, #16]
 8021812:	3614      	adds	r6, #20
 8021814:	009b      	lsls	r3, r3, #2
 8021816:	18f3      	adds	r3, r6, r3
 8021818:	1f1d      	subs	r5, r3, #4
 802181a:	682c      	ldr	r4, [r5, #0]
 802181c:	000f      	movs	r7, r1
 802181e:	0020      	movs	r0, r4
 8021820:	9301      	str	r3, [sp, #4]
 8021822:	f7ff fd3b 	bl	802129c <__hi0bits>
 8021826:	2220      	movs	r2, #32
 8021828:	1a12      	subs	r2, r2, r0
 802182a:	603a      	str	r2, [r7, #0]
 802182c:	0003      	movs	r3, r0
 802182e:	4a1c      	ldr	r2, [pc, #112]	@ (80218a0 <__b2d+0x94>)
 8021830:	280a      	cmp	r0, #10
 8021832:	dc15      	bgt.n	8021860 <__b2d+0x54>
 8021834:	210b      	movs	r1, #11
 8021836:	0027      	movs	r7, r4
 8021838:	1a09      	subs	r1, r1, r0
 802183a:	40cf      	lsrs	r7, r1
 802183c:	433a      	orrs	r2, r7
 802183e:	468c      	mov	ip, r1
 8021840:	0011      	movs	r1, r2
 8021842:	2200      	movs	r2, #0
 8021844:	42ae      	cmp	r6, r5
 8021846:	d202      	bcs.n	802184e <__b2d+0x42>
 8021848:	9a01      	ldr	r2, [sp, #4]
 802184a:	3a08      	subs	r2, #8
 802184c:	6812      	ldr	r2, [r2, #0]
 802184e:	3315      	adds	r3, #21
 8021850:	409c      	lsls	r4, r3
 8021852:	4663      	mov	r3, ip
 8021854:	0027      	movs	r7, r4
 8021856:	40da      	lsrs	r2, r3
 8021858:	4317      	orrs	r7, r2
 802185a:	0038      	movs	r0, r7
 802185c:	b003      	add	sp, #12
 802185e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8021860:	2700      	movs	r7, #0
 8021862:	42ae      	cmp	r6, r5
 8021864:	d202      	bcs.n	802186c <__b2d+0x60>
 8021866:	9d01      	ldr	r5, [sp, #4]
 8021868:	3d08      	subs	r5, #8
 802186a:	682f      	ldr	r7, [r5, #0]
 802186c:	210b      	movs	r1, #11
 802186e:	4249      	negs	r1, r1
 8021870:	468c      	mov	ip, r1
 8021872:	449c      	add	ip, r3
 8021874:	2b0b      	cmp	r3, #11
 8021876:	d010      	beq.n	802189a <__b2d+0x8e>
 8021878:	4661      	mov	r1, ip
 802187a:	2320      	movs	r3, #32
 802187c:	408c      	lsls	r4, r1
 802187e:	1a5b      	subs	r3, r3, r1
 8021880:	0039      	movs	r1, r7
 8021882:	40d9      	lsrs	r1, r3
 8021884:	430c      	orrs	r4, r1
 8021886:	4322      	orrs	r2, r4
 8021888:	0011      	movs	r1, r2
 802188a:	2200      	movs	r2, #0
 802188c:	42b5      	cmp	r5, r6
 802188e:	d901      	bls.n	8021894 <__b2d+0x88>
 8021890:	3d04      	subs	r5, #4
 8021892:	682a      	ldr	r2, [r5, #0]
 8021894:	4664      	mov	r4, ip
 8021896:	40a7      	lsls	r7, r4
 8021898:	e7dd      	b.n	8021856 <__b2d+0x4a>
 802189a:	4322      	orrs	r2, r4
 802189c:	0011      	movs	r1, r2
 802189e:	e7dc      	b.n	802185a <__b2d+0x4e>
 80218a0:	3ff00000 	.word	0x3ff00000

080218a4 <__d2b>:
 80218a4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80218a6:	2101      	movs	r1, #1
 80218a8:	0016      	movs	r6, r2
 80218aa:	001f      	movs	r7, r3
 80218ac:	f7ff fbfe 	bl	80210ac <_Balloc>
 80218b0:	1e04      	subs	r4, r0, #0
 80218b2:	d105      	bne.n	80218c0 <__d2b+0x1c>
 80218b4:	0022      	movs	r2, r4
 80218b6:	4b25      	ldr	r3, [pc, #148]	@ (802194c <__d2b+0xa8>)
 80218b8:	4825      	ldr	r0, [pc, #148]	@ (8021950 <__d2b+0xac>)
 80218ba:	4926      	ldr	r1, [pc, #152]	@ (8021954 <__d2b+0xb0>)
 80218bc:	f000 fcd6 	bl	802226c <__assert_func>
 80218c0:	033b      	lsls	r3, r7, #12
 80218c2:	007d      	lsls	r5, r7, #1
 80218c4:	0b1b      	lsrs	r3, r3, #12
 80218c6:	0d6d      	lsrs	r5, r5, #21
 80218c8:	d002      	beq.n	80218d0 <__d2b+0x2c>
 80218ca:	2280      	movs	r2, #128	@ 0x80
 80218cc:	0352      	lsls	r2, r2, #13
 80218ce:	4313      	orrs	r3, r2
 80218d0:	9301      	str	r3, [sp, #4]
 80218d2:	2e00      	cmp	r6, #0
 80218d4:	d025      	beq.n	8021922 <__d2b+0x7e>
 80218d6:	4668      	mov	r0, sp
 80218d8:	9600      	str	r6, [sp, #0]
 80218da:	f7ff fd00 	bl	80212de <__lo0bits>
 80218de:	9b01      	ldr	r3, [sp, #4]
 80218e0:	9900      	ldr	r1, [sp, #0]
 80218e2:	2800      	cmp	r0, #0
 80218e4:	d01b      	beq.n	802191e <__d2b+0x7a>
 80218e6:	2220      	movs	r2, #32
 80218e8:	001e      	movs	r6, r3
 80218ea:	1a12      	subs	r2, r2, r0
 80218ec:	4096      	lsls	r6, r2
 80218ee:	0032      	movs	r2, r6
 80218f0:	40c3      	lsrs	r3, r0
 80218f2:	430a      	orrs	r2, r1
 80218f4:	6162      	str	r2, [r4, #20]
 80218f6:	9301      	str	r3, [sp, #4]
 80218f8:	9e01      	ldr	r6, [sp, #4]
 80218fa:	61a6      	str	r6, [r4, #24]
 80218fc:	1e73      	subs	r3, r6, #1
 80218fe:	419e      	sbcs	r6, r3
 8021900:	3601      	adds	r6, #1
 8021902:	6126      	str	r6, [r4, #16]
 8021904:	2d00      	cmp	r5, #0
 8021906:	d014      	beq.n	8021932 <__d2b+0x8e>
 8021908:	2635      	movs	r6, #53	@ 0x35
 802190a:	4b13      	ldr	r3, [pc, #76]	@ (8021958 <__d2b+0xb4>)
 802190c:	18ed      	adds	r5, r5, r3
 802190e:	9b08      	ldr	r3, [sp, #32]
 8021910:	182d      	adds	r5, r5, r0
 8021912:	601d      	str	r5, [r3, #0]
 8021914:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8021916:	1a36      	subs	r6, r6, r0
 8021918:	601e      	str	r6, [r3, #0]
 802191a:	0020      	movs	r0, r4
 802191c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 802191e:	6161      	str	r1, [r4, #20]
 8021920:	e7ea      	b.n	80218f8 <__d2b+0x54>
 8021922:	a801      	add	r0, sp, #4
 8021924:	f7ff fcdb 	bl	80212de <__lo0bits>
 8021928:	9b01      	ldr	r3, [sp, #4]
 802192a:	2601      	movs	r6, #1
 802192c:	6163      	str	r3, [r4, #20]
 802192e:	3020      	adds	r0, #32
 8021930:	e7e7      	b.n	8021902 <__d2b+0x5e>
 8021932:	4b0a      	ldr	r3, [pc, #40]	@ (802195c <__d2b+0xb8>)
 8021934:	18c0      	adds	r0, r0, r3
 8021936:	9b08      	ldr	r3, [sp, #32]
 8021938:	6018      	str	r0, [r3, #0]
 802193a:	4b09      	ldr	r3, [pc, #36]	@ (8021960 <__d2b+0xbc>)
 802193c:	18f3      	adds	r3, r6, r3
 802193e:	009b      	lsls	r3, r3, #2
 8021940:	18e3      	adds	r3, r4, r3
 8021942:	6958      	ldr	r0, [r3, #20]
 8021944:	f7ff fcaa 	bl	802129c <__hi0bits>
 8021948:	0176      	lsls	r6, r6, #5
 802194a:	e7e3      	b.n	8021914 <__d2b+0x70>
 802194c:	080251c9 	.word	0x080251c9
 8021950:	0802523a 	.word	0x0802523a
 8021954:	0000030f 	.word	0x0000030f
 8021958:	fffffbcd 	.word	0xfffffbcd
 802195c:	fffffbce 	.word	0xfffffbce
 8021960:	3fffffff 	.word	0x3fffffff

08021964 <__ratio>:
 8021964:	b5f0      	push	{r4, r5, r6, r7, lr}
 8021966:	b087      	sub	sp, #28
 8021968:	000f      	movs	r7, r1
 802196a:	a904      	add	r1, sp, #16
 802196c:	0006      	movs	r6, r0
 802196e:	f7ff ff4d 	bl	802180c <__b2d>
 8021972:	9000      	str	r0, [sp, #0]
 8021974:	9101      	str	r1, [sp, #4]
 8021976:	9b00      	ldr	r3, [sp, #0]
 8021978:	9c01      	ldr	r4, [sp, #4]
 802197a:	0038      	movs	r0, r7
 802197c:	a905      	add	r1, sp, #20
 802197e:	9302      	str	r3, [sp, #8]
 8021980:	9403      	str	r4, [sp, #12]
 8021982:	f7ff ff43 	bl	802180c <__b2d>
 8021986:	000d      	movs	r5, r1
 8021988:	0002      	movs	r2, r0
 802198a:	000b      	movs	r3, r1
 802198c:	6930      	ldr	r0, [r6, #16]
 802198e:	6939      	ldr	r1, [r7, #16]
 8021990:	9e04      	ldr	r6, [sp, #16]
 8021992:	1a40      	subs	r0, r0, r1
 8021994:	9905      	ldr	r1, [sp, #20]
 8021996:	0140      	lsls	r0, r0, #5
 8021998:	1a71      	subs	r1, r6, r1
 802199a:	1841      	adds	r1, r0, r1
 802199c:	0508      	lsls	r0, r1, #20
 802199e:	2900      	cmp	r1, #0
 80219a0:	dd08      	ble.n	80219b4 <__ratio+0x50>
 80219a2:	9901      	ldr	r1, [sp, #4]
 80219a4:	1841      	adds	r1, r0, r1
 80219a6:	9103      	str	r1, [sp, #12]
 80219a8:	9802      	ldr	r0, [sp, #8]
 80219aa:	9903      	ldr	r1, [sp, #12]
 80219ac:	f7e0 fa02 	bl	8001db4 <__aeabi_ddiv>
 80219b0:	b007      	add	sp, #28
 80219b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80219b4:	1a2b      	subs	r3, r5, r0
 80219b6:	e7f7      	b.n	80219a8 <__ratio+0x44>

080219b8 <__copybits>:
 80219b8:	b570      	push	{r4, r5, r6, lr}
 80219ba:	0014      	movs	r4, r2
 80219bc:	0005      	movs	r5, r0
 80219be:	3901      	subs	r1, #1
 80219c0:	6913      	ldr	r3, [r2, #16]
 80219c2:	1149      	asrs	r1, r1, #5
 80219c4:	3101      	adds	r1, #1
 80219c6:	0089      	lsls	r1, r1, #2
 80219c8:	3414      	adds	r4, #20
 80219ca:	009b      	lsls	r3, r3, #2
 80219cc:	1841      	adds	r1, r0, r1
 80219ce:	18e3      	adds	r3, r4, r3
 80219d0:	42a3      	cmp	r3, r4
 80219d2:	d80d      	bhi.n	80219f0 <__copybits+0x38>
 80219d4:	0014      	movs	r4, r2
 80219d6:	3411      	adds	r4, #17
 80219d8:	2500      	movs	r5, #0
 80219da:	429c      	cmp	r4, r3
 80219dc:	d803      	bhi.n	80219e6 <__copybits+0x2e>
 80219de:	1a9b      	subs	r3, r3, r2
 80219e0:	3b11      	subs	r3, #17
 80219e2:	089b      	lsrs	r3, r3, #2
 80219e4:	009d      	lsls	r5, r3, #2
 80219e6:	2300      	movs	r3, #0
 80219e8:	1940      	adds	r0, r0, r5
 80219ea:	4281      	cmp	r1, r0
 80219ec:	d803      	bhi.n	80219f6 <__copybits+0x3e>
 80219ee:	bd70      	pop	{r4, r5, r6, pc}
 80219f0:	cc40      	ldmia	r4!, {r6}
 80219f2:	c540      	stmia	r5!, {r6}
 80219f4:	e7ec      	b.n	80219d0 <__copybits+0x18>
 80219f6:	c008      	stmia	r0!, {r3}
 80219f8:	e7f7      	b.n	80219ea <__copybits+0x32>

080219fa <__any_on>:
 80219fa:	0002      	movs	r2, r0
 80219fc:	6900      	ldr	r0, [r0, #16]
 80219fe:	b510      	push	{r4, lr}
 8021a00:	3214      	adds	r2, #20
 8021a02:	114b      	asrs	r3, r1, #5
 8021a04:	4298      	cmp	r0, r3
 8021a06:	db13      	blt.n	8021a30 <__any_on+0x36>
 8021a08:	dd0c      	ble.n	8021a24 <__any_on+0x2a>
 8021a0a:	241f      	movs	r4, #31
 8021a0c:	0008      	movs	r0, r1
 8021a0e:	4020      	ands	r0, r4
 8021a10:	4221      	tst	r1, r4
 8021a12:	d007      	beq.n	8021a24 <__any_on+0x2a>
 8021a14:	0099      	lsls	r1, r3, #2
 8021a16:	588c      	ldr	r4, [r1, r2]
 8021a18:	0021      	movs	r1, r4
 8021a1a:	40c1      	lsrs	r1, r0
 8021a1c:	4081      	lsls	r1, r0
 8021a1e:	2001      	movs	r0, #1
 8021a20:	428c      	cmp	r4, r1
 8021a22:	d104      	bne.n	8021a2e <__any_on+0x34>
 8021a24:	009b      	lsls	r3, r3, #2
 8021a26:	18d3      	adds	r3, r2, r3
 8021a28:	4293      	cmp	r3, r2
 8021a2a:	d803      	bhi.n	8021a34 <__any_on+0x3a>
 8021a2c:	2000      	movs	r0, #0
 8021a2e:	bd10      	pop	{r4, pc}
 8021a30:	0003      	movs	r3, r0
 8021a32:	e7f7      	b.n	8021a24 <__any_on+0x2a>
 8021a34:	3b04      	subs	r3, #4
 8021a36:	6819      	ldr	r1, [r3, #0]
 8021a38:	2900      	cmp	r1, #0
 8021a3a:	d0f5      	beq.n	8021a28 <__any_on+0x2e>
 8021a3c:	2001      	movs	r0, #1
 8021a3e:	e7f6      	b.n	8021a2e <__any_on+0x34>

08021a40 <__ascii_wctomb>:
 8021a40:	0003      	movs	r3, r0
 8021a42:	1e08      	subs	r0, r1, #0
 8021a44:	d005      	beq.n	8021a52 <__ascii_wctomb+0x12>
 8021a46:	2aff      	cmp	r2, #255	@ 0xff
 8021a48:	d904      	bls.n	8021a54 <__ascii_wctomb+0x14>
 8021a4a:	228a      	movs	r2, #138	@ 0x8a
 8021a4c:	2001      	movs	r0, #1
 8021a4e:	601a      	str	r2, [r3, #0]
 8021a50:	4240      	negs	r0, r0
 8021a52:	4770      	bx	lr
 8021a54:	2001      	movs	r0, #1
 8021a56:	700a      	strb	r2, [r1, #0]
 8021a58:	e7fb      	b.n	8021a52 <__ascii_wctomb+0x12>
	...

08021a5c <__ssputs_r>:
 8021a5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8021a5e:	688e      	ldr	r6, [r1, #8]
 8021a60:	b085      	sub	sp, #20
 8021a62:	001f      	movs	r7, r3
 8021a64:	000c      	movs	r4, r1
 8021a66:	680b      	ldr	r3, [r1, #0]
 8021a68:	9002      	str	r0, [sp, #8]
 8021a6a:	9203      	str	r2, [sp, #12]
 8021a6c:	42be      	cmp	r6, r7
 8021a6e:	d830      	bhi.n	8021ad2 <__ssputs_r+0x76>
 8021a70:	210c      	movs	r1, #12
 8021a72:	5e62      	ldrsh	r2, [r4, r1]
 8021a74:	2190      	movs	r1, #144	@ 0x90
 8021a76:	00c9      	lsls	r1, r1, #3
 8021a78:	420a      	tst	r2, r1
 8021a7a:	d028      	beq.n	8021ace <__ssputs_r+0x72>
 8021a7c:	2003      	movs	r0, #3
 8021a7e:	6921      	ldr	r1, [r4, #16]
 8021a80:	1a5b      	subs	r3, r3, r1
 8021a82:	9301      	str	r3, [sp, #4]
 8021a84:	6963      	ldr	r3, [r4, #20]
 8021a86:	4343      	muls	r3, r0
 8021a88:	9801      	ldr	r0, [sp, #4]
 8021a8a:	0fdd      	lsrs	r5, r3, #31
 8021a8c:	18ed      	adds	r5, r5, r3
 8021a8e:	1c7b      	adds	r3, r7, #1
 8021a90:	181b      	adds	r3, r3, r0
 8021a92:	106d      	asrs	r5, r5, #1
 8021a94:	42ab      	cmp	r3, r5
 8021a96:	d900      	bls.n	8021a9a <__ssputs_r+0x3e>
 8021a98:	001d      	movs	r5, r3
 8021a9a:	0552      	lsls	r2, r2, #21
 8021a9c:	d528      	bpl.n	8021af0 <__ssputs_r+0x94>
 8021a9e:	0029      	movs	r1, r5
 8021aa0:	9802      	ldr	r0, [sp, #8]
 8021aa2:	f7ff fa61 	bl	8020f68 <_malloc_r>
 8021aa6:	1e06      	subs	r6, r0, #0
 8021aa8:	d02c      	beq.n	8021b04 <__ssputs_r+0xa8>
 8021aaa:	9a01      	ldr	r2, [sp, #4]
 8021aac:	6921      	ldr	r1, [r4, #16]
 8021aae:	f7fd fff9 	bl	801faa4 <memcpy>
 8021ab2:	89a2      	ldrh	r2, [r4, #12]
 8021ab4:	4b18      	ldr	r3, [pc, #96]	@ (8021b18 <__ssputs_r+0xbc>)
 8021ab6:	401a      	ands	r2, r3
 8021ab8:	2380      	movs	r3, #128	@ 0x80
 8021aba:	4313      	orrs	r3, r2
 8021abc:	81a3      	strh	r3, [r4, #12]
 8021abe:	9b01      	ldr	r3, [sp, #4]
 8021ac0:	6126      	str	r6, [r4, #16]
 8021ac2:	18f6      	adds	r6, r6, r3
 8021ac4:	6026      	str	r6, [r4, #0]
 8021ac6:	003e      	movs	r6, r7
 8021ac8:	6165      	str	r5, [r4, #20]
 8021aca:	1aed      	subs	r5, r5, r3
 8021acc:	60a5      	str	r5, [r4, #8]
 8021ace:	42be      	cmp	r6, r7
 8021ad0:	d900      	bls.n	8021ad4 <__ssputs_r+0x78>
 8021ad2:	003e      	movs	r6, r7
 8021ad4:	0032      	movs	r2, r6
 8021ad6:	9903      	ldr	r1, [sp, #12]
 8021ad8:	6820      	ldr	r0, [r4, #0]
 8021ada:	f000 fb7e 	bl	80221da <memmove>
 8021ade:	2000      	movs	r0, #0
 8021ae0:	68a3      	ldr	r3, [r4, #8]
 8021ae2:	1b9b      	subs	r3, r3, r6
 8021ae4:	60a3      	str	r3, [r4, #8]
 8021ae6:	6823      	ldr	r3, [r4, #0]
 8021ae8:	199b      	adds	r3, r3, r6
 8021aea:	6023      	str	r3, [r4, #0]
 8021aec:	b005      	add	sp, #20
 8021aee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8021af0:	002a      	movs	r2, r5
 8021af2:	9802      	ldr	r0, [sp, #8]
 8021af4:	f000 fc05 	bl	8022302 <_realloc_r>
 8021af8:	1e06      	subs	r6, r0, #0
 8021afa:	d1e0      	bne.n	8021abe <__ssputs_r+0x62>
 8021afc:	6921      	ldr	r1, [r4, #16]
 8021afe:	9802      	ldr	r0, [sp, #8]
 8021b00:	f7fe fe62 	bl	80207c8 <_free_r>
 8021b04:	230c      	movs	r3, #12
 8021b06:	2001      	movs	r0, #1
 8021b08:	9a02      	ldr	r2, [sp, #8]
 8021b0a:	4240      	negs	r0, r0
 8021b0c:	6013      	str	r3, [r2, #0]
 8021b0e:	89a2      	ldrh	r2, [r4, #12]
 8021b10:	3334      	adds	r3, #52	@ 0x34
 8021b12:	4313      	orrs	r3, r2
 8021b14:	81a3      	strh	r3, [r4, #12]
 8021b16:	e7e9      	b.n	8021aec <__ssputs_r+0x90>
 8021b18:	fffffb7f 	.word	0xfffffb7f

08021b1c <_svfiprintf_r>:
 8021b1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8021b1e:	b0a1      	sub	sp, #132	@ 0x84
 8021b20:	9003      	str	r0, [sp, #12]
 8021b22:	001d      	movs	r5, r3
 8021b24:	898b      	ldrh	r3, [r1, #12]
 8021b26:	000f      	movs	r7, r1
 8021b28:	0016      	movs	r6, r2
 8021b2a:	061b      	lsls	r3, r3, #24
 8021b2c:	d511      	bpl.n	8021b52 <_svfiprintf_r+0x36>
 8021b2e:	690b      	ldr	r3, [r1, #16]
 8021b30:	2b00      	cmp	r3, #0
 8021b32:	d10e      	bne.n	8021b52 <_svfiprintf_r+0x36>
 8021b34:	2140      	movs	r1, #64	@ 0x40
 8021b36:	f7ff fa17 	bl	8020f68 <_malloc_r>
 8021b3a:	6038      	str	r0, [r7, #0]
 8021b3c:	6138      	str	r0, [r7, #16]
 8021b3e:	2800      	cmp	r0, #0
 8021b40:	d105      	bne.n	8021b4e <_svfiprintf_r+0x32>
 8021b42:	230c      	movs	r3, #12
 8021b44:	9a03      	ldr	r2, [sp, #12]
 8021b46:	6013      	str	r3, [r2, #0]
 8021b48:	2001      	movs	r0, #1
 8021b4a:	4240      	negs	r0, r0
 8021b4c:	e0cf      	b.n	8021cee <_svfiprintf_r+0x1d2>
 8021b4e:	2340      	movs	r3, #64	@ 0x40
 8021b50:	617b      	str	r3, [r7, #20]
 8021b52:	2300      	movs	r3, #0
 8021b54:	ac08      	add	r4, sp, #32
 8021b56:	6163      	str	r3, [r4, #20]
 8021b58:	3320      	adds	r3, #32
 8021b5a:	7663      	strb	r3, [r4, #25]
 8021b5c:	3310      	adds	r3, #16
 8021b5e:	76a3      	strb	r3, [r4, #26]
 8021b60:	9507      	str	r5, [sp, #28]
 8021b62:	0035      	movs	r5, r6
 8021b64:	782b      	ldrb	r3, [r5, #0]
 8021b66:	2b00      	cmp	r3, #0
 8021b68:	d001      	beq.n	8021b6e <_svfiprintf_r+0x52>
 8021b6a:	2b25      	cmp	r3, #37	@ 0x25
 8021b6c:	d148      	bne.n	8021c00 <_svfiprintf_r+0xe4>
 8021b6e:	1bab      	subs	r3, r5, r6
 8021b70:	9305      	str	r3, [sp, #20]
 8021b72:	42b5      	cmp	r5, r6
 8021b74:	d00b      	beq.n	8021b8e <_svfiprintf_r+0x72>
 8021b76:	0032      	movs	r2, r6
 8021b78:	0039      	movs	r1, r7
 8021b7a:	9803      	ldr	r0, [sp, #12]
 8021b7c:	f7ff ff6e 	bl	8021a5c <__ssputs_r>
 8021b80:	3001      	adds	r0, #1
 8021b82:	d100      	bne.n	8021b86 <_svfiprintf_r+0x6a>
 8021b84:	e0ae      	b.n	8021ce4 <_svfiprintf_r+0x1c8>
 8021b86:	6963      	ldr	r3, [r4, #20]
 8021b88:	9a05      	ldr	r2, [sp, #20]
 8021b8a:	189b      	adds	r3, r3, r2
 8021b8c:	6163      	str	r3, [r4, #20]
 8021b8e:	782b      	ldrb	r3, [r5, #0]
 8021b90:	2b00      	cmp	r3, #0
 8021b92:	d100      	bne.n	8021b96 <_svfiprintf_r+0x7a>
 8021b94:	e0a6      	b.n	8021ce4 <_svfiprintf_r+0x1c8>
 8021b96:	2201      	movs	r2, #1
 8021b98:	2300      	movs	r3, #0
 8021b9a:	4252      	negs	r2, r2
 8021b9c:	6062      	str	r2, [r4, #4]
 8021b9e:	a904      	add	r1, sp, #16
 8021ba0:	3254      	adds	r2, #84	@ 0x54
 8021ba2:	1852      	adds	r2, r2, r1
 8021ba4:	1c6e      	adds	r6, r5, #1
 8021ba6:	6023      	str	r3, [r4, #0]
 8021ba8:	60e3      	str	r3, [r4, #12]
 8021baa:	60a3      	str	r3, [r4, #8]
 8021bac:	7013      	strb	r3, [r2, #0]
 8021bae:	65a3      	str	r3, [r4, #88]	@ 0x58
 8021bb0:	4b54      	ldr	r3, [pc, #336]	@ (8021d04 <_svfiprintf_r+0x1e8>)
 8021bb2:	2205      	movs	r2, #5
 8021bb4:	0018      	movs	r0, r3
 8021bb6:	7831      	ldrb	r1, [r6, #0]
 8021bb8:	9305      	str	r3, [sp, #20]
 8021bba:	f7fd ff68 	bl	801fa8e <memchr>
 8021bbe:	1c75      	adds	r5, r6, #1
 8021bc0:	2800      	cmp	r0, #0
 8021bc2:	d11f      	bne.n	8021c04 <_svfiprintf_r+0xe8>
 8021bc4:	6822      	ldr	r2, [r4, #0]
 8021bc6:	06d3      	lsls	r3, r2, #27
 8021bc8:	d504      	bpl.n	8021bd4 <_svfiprintf_r+0xb8>
 8021bca:	2353      	movs	r3, #83	@ 0x53
 8021bcc:	a904      	add	r1, sp, #16
 8021bce:	185b      	adds	r3, r3, r1
 8021bd0:	2120      	movs	r1, #32
 8021bd2:	7019      	strb	r1, [r3, #0]
 8021bd4:	0713      	lsls	r3, r2, #28
 8021bd6:	d504      	bpl.n	8021be2 <_svfiprintf_r+0xc6>
 8021bd8:	2353      	movs	r3, #83	@ 0x53
 8021bda:	a904      	add	r1, sp, #16
 8021bdc:	185b      	adds	r3, r3, r1
 8021bde:	212b      	movs	r1, #43	@ 0x2b
 8021be0:	7019      	strb	r1, [r3, #0]
 8021be2:	7833      	ldrb	r3, [r6, #0]
 8021be4:	2b2a      	cmp	r3, #42	@ 0x2a
 8021be6:	d016      	beq.n	8021c16 <_svfiprintf_r+0xfa>
 8021be8:	0035      	movs	r5, r6
 8021bea:	2100      	movs	r1, #0
 8021bec:	200a      	movs	r0, #10
 8021bee:	68e3      	ldr	r3, [r4, #12]
 8021bf0:	782a      	ldrb	r2, [r5, #0]
 8021bf2:	1c6e      	adds	r6, r5, #1
 8021bf4:	3a30      	subs	r2, #48	@ 0x30
 8021bf6:	2a09      	cmp	r2, #9
 8021bf8:	d950      	bls.n	8021c9c <_svfiprintf_r+0x180>
 8021bfa:	2900      	cmp	r1, #0
 8021bfc:	d111      	bne.n	8021c22 <_svfiprintf_r+0x106>
 8021bfe:	e017      	b.n	8021c30 <_svfiprintf_r+0x114>
 8021c00:	3501      	adds	r5, #1
 8021c02:	e7af      	b.n	8021b64 <_svfiprintf_r+0x48>
 8021c04:	9b05      	ldr	r3, [sp, #20]
 8021c06:	6822      	ldr	r2, [r4, #0]
 8021c08:	1ac0      	subs	r0, r0, r3
 8021c0a:	2301      	movs	r3, #1
 8021c0c:	4083      	lsls	r3, r0
 8021c0e:	4313      	orrs	r3, r2
 8021c10:	002e      	movs	r6, r5
 8021c12:	6023      	str	r3, [r4, #0]
 8021c14:	e7cc      	b.n	8021bb0 <_svfiprintf_r+0x94>
 8021c16:	9b07      	ldr	r3, [sp, #28]
 8021c18:	1d19      	adds	r1, r3, #4
 8021c1a:	681b      	ldr	r3, [r3, #0]
 8021c1c:	9107      	str	r1, [sp, #28]
 8021c1e:	2b00      	cmp	r3, #0
 8021c20:	db01      	blt.n	8021c26 <_svfiprintf_r+0x10a>
 8021c22:	930b      	str	r3, [sp, #44]	@ 0x2c
 8021c24:	e004      	b.n	8021c30 <_svfiprintf_r+0x114>
 8021c26:	425b      	negs	r3, r3
 8021c28:	60e3      	str	r3, [r4, #12]
 8021c2a:	2302      	movs	r3, #2
 8021c2c:	4313      	orrs	r3, r2
 8021c2e:	6023      	str	r3, [r4, #0]
 8021c30:	782b      	ldrb	r3, [r5, #0]
 8021c32:	2b2e      	cmp	r3, #46	@ 0x2e
 8021c34:	d10c      	bne.n	8021c50 <_svfiprintf_r+0x134>
 8021c36:	786b      	ldrb	r3, [r5, #1]
 8021c38:	2b2a      	cmp	r3, #42	@ 0x2a
 8021c3a:	d134      	bne.n	8021ca6 <_svfiprintf_r+0x18a>
 8021c3c:	9b07      	ldr	r3, [sp, #28]
 8021c3e:	3502      	adds	r5, #2
 8021c40:	1d1a      	adds	r2, r3, #4
 8021c42:	681b      	ldr	r3, [r3, #0]
 8021c44:	9207      	str	r2, [sp, #28]
 8021c46:	2b00      	cmp	r3, #0
 8021c48:	da01      	bge.n	8021c4e <_svfiprintf_r+0x132>
 8021c4a:	2301      	movs	r3, #1
 8021c4c:	425b      	negs	r3, r3
 8021c4e:	9309      	str	r3, [sp, #36]	@ 0x24
 8021c50:	4e2d      	ldr	r6, [pc, #180]	@ (8021d08 <_svfiprintf_r+0x1ec>)
 8021c52:	2203      	movs	r2, #3
 8021c54:	0030      	movs	r0, r6
 8021c56:	7829      	ldrb	r1, [r5, #0]
 8021c58:	f7fd ff19 	bl	801fa8e <memchr>
 8021c5c:	2800      	cmp	r0, #0
 8021c5e:	d006      	beq.n	8021c6e <_svfiprintf_r+0x152>
 8021c60:	2340      	movs	r3, #64	@ 0x40
 8021c62:	1b80      	subs	r0, r0, r6
 8021c64:	4083      	lsls	r3, r0
 8021c66:	6822      	ldr	r2, [r4, #0]
 8021c68:	3501      	adds	r5, #1
 8021c6a:	4313      	orrs	r3, r2
 8021c6c:	6023      	str	r3, [r4, #0]
 8021c6e:	7829      	ldrb	r1, [r5, #0]
 8021c70:	2206      	movs	r2, #6
 8021c72:	4826      	ldr	r0, [pc, #152]	@ (8021d0c <_svfiprintf_r+0x1f0>)
 8021c74:	1c6e      	adds	r6, r5, #1
 8021c76:	7621      	strb	r1, [r4, #24]
 8021c78:	f7fd ff09 	bl	801fa8e <memchr>
 8021c7c:	2800      	cmp	r0, #0
 8021c7e:	d038      	beq.n	8021cf2 <_svfiprintf_r+0x1d6>
 8021c80:	4b23      	ldr	r3, [pc, #140]	@ (8021d10 <_svfiprintf_r+0x1f4>)
 8021c82:	2b00      	cmp	r3, #0
 8021c84:	d122      	bne.n	8021ccc <_svfiprintf_r+0x1b0>
 8021c86:	2207      	movs	r2, #7
 8021c88:	9b07      	ldr	r3, [sp, #28]
 8021c8a:	3307      	adds	r3, #7
 8021c8c:	4393      	bics	r3, r2
 8021c8e:	3308      	adds	r3, #8
 8021c90:	9307      	str	r3, [sp, #28]
 8021c92:	6963      	ldr	r3, [r4, #20]
 8021c94:	9a04      	ldr	r2, [sp, #16]
 8021c96:	189b      	adds	r3, r3, r2
 8021c98:	6163      	str	r3, [r4, #20]
 8021c9a:	e762      	b.n	8021b62 <_svfiprintf_r+0x46>
 8021c9c:	4343      	muls	r3, r0
 8021c9e:	0035      	movs	r5, r6
 8021ca0:	2101      	movs	r1, #1
 8021ca2:	189b      	adds	r3, r3, r2
 8021ca4:	e7a4      	b.n	8021bf0 <_svfiprintf_r+0xd4>
 8021ca6:	2300      	movs	r3, #0
 8021ca8:	200a      	movs	r0, #10
 8021caa:	0019      	movs	r1, r3
 8021cac:	3501      	adds	r5, #1
 8021cae:	6063      	str	r3, [r4, #4]
 8021cb0:	782a      	ldrb	r2, [r5, #0]
 8021cb2:	1c6e      	adds	r6, r5, #1
 8021cb4:	3a30      	subs	r2, #48	@ 0x30
 8021cb6:	2a09      	cmp	r2, #9
 8021cb8:	d903      	bls.n	8021cc2 <_svfiprintf_r+0x1a6>
 8021cba:	2b00      	cmp	r3, #0
 8021cbc:	d0c8      	beq.n	8021c50 <_svfiprintf_r+0x134>
 8021cbe:	9109      	str	r1, [sp, #36]	@ 0x24
 8021cc0:	e7c6      	b.n	8021c50 <_svfiprintf_r+0x134>
 8021cc2:	4341      	muls	r1, r0
 8021cc4:	0035      	movs	r5, r6
 8021cc6:	2301      	movs	r3, #1
 8021cc8:	1889      	adds	r1, r1, r2
 8021cca:	e7f1      	b.n	8021cb0 <_svfiprintf_r+0x194>
 8021ccc:	aa07      	add	r2, sp, #28
 8021cce:	9200      	str	r2, [sp, #0]
 8021cd0:	0021      	movs	r1, r4
 8021cd2:	003a      	movs	r2, r7
 8021cd4:	4b0f      	ldr	r3, [pc, #60]	@ (8021d14 <_svfiprintf_r+0x1f8>)
 8021cd6:	9803      	ldr	r0, [sp, #12]
 8021cd8:	f7fc ffd4 	bl	801ec84 <_printf_float>
 8021cdc:	9004      	str	r0, [sp, #16]
 8021cde:	9b04      	ldr	r3, [sp, #16]
 8021ce0:	3301      	adds	r3, #1
 8021ce2:	d1d6      	bne.n	8021c92 <_svfiprintf_r+0x176>
 8021ce4:	89bb      	ldrh	r3, [r7, #12]
 8021ce6:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8021ce8:	065b      	lsls	r3, r3, #25
 8021cea:	d500      	bpl.n	8021cee <_svfiprintf_r+0x1d2>
 8021cec:	e72c      	b.n	8021b48 <_svfiprintf_r+0x2c>
 8021cee:	b021      	add	sp, #132	@ 0x84
 8021cf0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8021cf2:	aa07      	add	r2, sp, #28
 8021cf4:	9200      	str	r2, [sp, #0]
 8021cf6:	0021      	movs	r1, r4
 8021cf8:	003a      	movs	r2, r7
 8021cfa:	4b06      	ldr	r3, [pc, #24]	@ (8021d14 <_svfiprintf_r+0x1f8>)
 8021cfc:	9803      	ldr	r0, [sp, #12]
 8021cfe:	f7fd fa6f 	bl	801f1e0 <_printf_i>
 8021d02:	e7eb      	b.n	8021cdc <_svfiprintf_r+0x1c0>
 8021d04:	08025390 	.word	0x08025390
 8021d08:	08025396 	.word	0x08025396
 8021d0c:	0802539a 	.word	0x0802539a
 8021d10:	0801ec85 	.word	0x0801ec85
 8021d14:	08021a5d 	.word	0x08021a5d

08021d18 <__sfputc_r>:
 8021d18:	6893      	ldr	r3, [r2, #8]
 8021d1a:	b510      	push	{r4, lr}
 8021d1c:	3b01      	subs	r3, #1
 8021d1e:	6093      	str	r3, [r2, #8]
 8021d20:	2b00      	cmp	r3, #0
 8021d22:	da04      	bge.n	8021d2e <__sfputc_r+0x16>
 8021d24:	6994      	ldr	r4, [r2, #24]
 8021d26:	42a3      	cmp	r3, r4
 8021d28:	db07      	blt.n	8021d3a <__sfputc_r+0x22>
 8021d2a:	290a      	cmp	r1, #10
 8021d2c:	d005      	beq.n	8021d3a <__sfputc_r+0x22>
 8021d2e:	6813      	ldr	r3, [r2, #0]
 8021d30:	1c58      	adds	r0, r3, #1
 8021d32:	6010      	str	r0, [r2, #0]
 8021d34:	7019      	strb	r1, [r3, #0]
 8021d36:	0008      	movs	r0, r1
 8021d38:	bd10      	pop	{r4, pc}
 8021d3a:	f7fd fd37 	bl	801f7ac <__swbuf_r>
 8021d3e:	0001      	movs	r1, r0
 8021d40:	e7f9      	b.n	8021d36 <__sfputc_r+0x1e>

08021d42 <__sfputs_r>:
 8021d42:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8021d44:	0006      	movs	r6, r0
 8021d46:	000f      	movs	r7, r1
 8021d48:	0014      	movs	r4, r2
 8021d4a:	18d5      	adds	r5, r2, r3
 8021d4c:	42ac      	cmp	r4, r5
 8021d4e:	d101      	bne.n	8021d54 <__sfputs_r+0x12>
 8021d50:	2000      	movs	r0, #0
 8021d52:	e007      	b.n	8021d64 <__sfputs_r+0x22>
 8021d54:	7821      	ldrb	r1, [r4, #0]
 8021d56:	003a      	movs	r2, r7
 8021d58:	0030      	movs	r0, r6
 8021d5a:	f7ff ffdd 	bl	8021d18 <__sfputc_r>
 8021d5e:	3401      	adds	r4, #1
 8021d60:	1c43      	adds	r3, r0, #1
 8021d62:	d1f3      	bne.n	8021d4c <__sfputs_r+0xa>
 8021d64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08021d68 <_vfiprintf_r>:
 8021d68:	b5f0      	push	{r4, r5, r6, r7, lr}
 8021d6a:	b0a1      	sub	sp, #132	@ 0x84
 8021d6c:	000f      	movs	r7, r1
 8021d6e:	0015      	movs	r5, r2
 8021d70:	001e      	movs	r6, r3
 8021d72:	9003      	str	r0, [sp, #12]
 8021d74:	2800      	cmp	r0, #0
 8021d76:	d004      	beq.n	8021d82 <_vfiprintf_r+0x1a>
 8021d78:	6a03      	ldr	r3, [r0, #32]
 8021d7a:	2b00      	cmp	r3, #0
 8021d7c:	d101      	bne.n	8021d82 <_vfiprintf_r+0x1a>
 8021d7e:	f7fd fbcd 	bl	801f51c <__sinit>
 8021d82:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8021d84:	07db      	lsls	r3, r3, #31
 8021d86:	d405      	bmi.n	8021d94 <_vfiprintf_r+0x2c>
 8021d88:	89bb      	ldrh	r3, [r7, #12]
 8021d8a:	059b      	lsls	r3, r3, #22
 8021d8c:	d402      	bmi.n	8021d94 <_vfiprintf_r+0x2c>
 8021d8e:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8021d90:	f7fd fe7b 	bl	801fa8a <__retarget_lock_acquire_recursive>
 8021d94:	89bb      	ldrh	r3, [r7, #12]
 8021d96:	071b      	lsls	r3, r3, #28
 8021d98:	d502      	bpl.n	8021da0 <_vfiprintf_r+0x38>
 8021d9a:	693b      	ldr	r3, [r7, #16]
 8021d9c:	2b00      	cmp	r3, #0
 8021d9e:	d113      	bne.n	8021dc8 <_vfiprintf_r+0x60>
 8021da0:	0039      	movs	r1, r7
 8021da2:	9803      	ldr	r0, [sp, #12]
 8021da4:	f7fd fd44 	bl	801f830 <__swsetup_r>
 8021da8:	2800      	cmp	r0, #0
 8021daa:	d00d      	beq.n	8021dc8 <_vfiprintf_r+0x60>
 8021dac:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8021dae:	07db      	lsls	r3, r3, #31
 8021db0:	d503      	bpl.n	8021dba <_vfiprintf_r+0x52>
 8021db2:	2001      	movs	r0, #1
 8021db4:	4240      	negs	r0, r0
 8021db6:	b021      	add	sp, #132	@ 0x84
 8021db8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8021dba:	89bb      	ldrh	r3, [r7, #12]
 8021dbc:	059b      	lsls	r3, r3, #22
 8021dbe:	d4f8      	bmi.n	8021db2 <_vfiprintf_r+0x4a>
 8021dc0:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8021dc2:	f7fd fe63 	bl	801fa8c <__retarget_lock_release_recursive>
 8021dc6:	e7f4      	b.n	8021db2 <_vfiprintf_r+0x4a>
 8021dc8:	2300      	movs	r3, #0
 8021dca:	ac08      	add	r4, sp, #32
 8021dcc:	6163      	str	r3, [r4, #20]
 8021dce:	3320      	adds	r3, #32
 8021dd0:	7663      	strb	r3, [r4, #25]
 8021dd2:	3310      	adds	r3, #16
 8021dd4:	76a3      	strb	r3, [r4, #26]
 8021dd6:	9607      	str	r6, [sp, #28]
 8021dd8:	002e      	movs	r6, r5
 8021dda:	7833      	ldrb	r3, [r6, #0]
 8021ddc:	2b00      	cmp	r3, #0
 8021dde:	d001      	beq.n	8021de4 <_vfiprintf_r+0x7c>
 8021de0:	2b25      	cmp	r3, #37	@ 0x25
 8021de2:	d148      	bne.n	8021e76 <_vfiprintf_r+0x10e>
 8021de4:	1b73      	subs	r3, r6, r5
 8021de6:	9305      	str	r3, [sp, #20]
 8021de8:	42ae      	cmp	r6, r5
 8021dea:	d00b      	beq.n	8021e04 <_vfiprintf_r+0x9c>
 8021dec:	002a      	movs	r2, r5
 8021dee:	0039      	movs	r1, r7
 8021df0:	9803      	ldr	r0, [sp, #12]
 8021df2:	f7ff ffa6 	bl	8021d42 <__sfputs_r>
 8021df6:	3001      	adds	r0, #1
 8021df8:	d100      	bne.n	8021dfc <_vfiprintf_r+0x94>
 8021dfa:	e0ae      	b.n	8021f5a <_vfiprintf_r+0x1f2>
 8021dfc:	6963      	ldr	r3, [r4, #20]
 8021dfe:	9a05      	ldr	r2, [sp, #20]
 8021e00:	189b      	adds	r3, r3, r2
 8021e02:	6163      	str	r3, [r4, #20]
 8021e04:	7833      	ldrb	r3, [r6, #0]
 8021e06:	2b00      	cmp	r3, #0
 8021e08:	d100      	bne.n	8021e0c <_vfiprintf_r+0xa4>
 8021e0a:	e0a6      	b.n	8021f5a <_vfiprintf_r+0x1f2>
 8021e0c:	2201      	movs	r2, #1
 8021e0e:	2300      	movs	r3, #0
 8021e10:	4252      	negs	r2, r2
 8021e12:	6062      	str	r2, [r4, #4]
 8021e14:	a904      	add	r1, sp, #16
 8021e16:	3254      	adds	r2, #84	@ 0x54
 8021e18:	1852      	adds	r2, r2, r1
 8021e1a:	1c75      	adds	r5, r6, #1
 8021e1c:	6023      	str	r3, [r4, #0]
 8021e1e:	60e3      	str	r3, [r4, #12]
 8021e20:	60a3      	str	r3, [r4, #8]
 8021e22:	7013      	strb	r3, [r2, #0]
 8021e24:	65a3      	str	r3, [r4, #88]	@ 0x58
 8021e26:	4b59      	ldr	r3, [pc, #356]	@ (8021f8c <_vfiprintf_r+0x224>)
 8021e28:	2205      	movs	r2, #5
 8021e2a:	0018      	movs	r0, r3
 8021e2c:	7829      	ldrb	r1, [r5, #0]
 8021e2e:	9305      	str	r3, [sp, #20]
 8021e30:	f7fd fe2d 	bl	801fa8e <memchr>
 8021e34:	1c6e      	adds	r6, r5, #1
 8021e36:	2800      	cmp	r0, #0
 8021e38:	d11f      	bne.n	8021e7a <_vfiprintf_r+0x112>
 8021e3a:	6822      	ldr	r2, [r4, #0]
 8021e3c:	06d3      	lsls	r3, r2, #27
 8021e3e:	d504      	bpl.n	8021e4a <_vfiprintf_r+0xe2>
 8021e40:	2353      	movs	r3, #83	@ 0x53
 8021e42:	a904      	add	r1, sp, #16
 8021e44:	185b      	adds	r3, r3, r1
 8021e46:	2120      	movs	r1, #32
 8021e48:	7019      	strb	r1, [r3, #0]
 8021e4a:	0713      	lsls	r3, r2, #28
 8021e4c:	d504      	bpl.n	8021e58 <_vfiprintf_r+0xf0>
 8021e4e:	2353      	movs	r3, #83	@ 0x53
 8021e50:	a904      	add	r1, sp, #16
 8021e52:	185b      	adds	r3, r3, r1
 8021e54:	212b      	movs	r1, #43	@ 0x2b
 8021e56:	7019      	strb	r1, [r3, #0]
 8021e58:	782b      	ldrb	r3, [r5, #0]
 8021e5a:	2b2a      	cmp	r3, #42	@ 0x2a
 8021e5c:	d016      	beq.n	8021e8c <_vfiprintf_r+0x124>
 8021e5e:	002e      	movs	r6, r5
 8021e60:	2100      	movs	r1, #0
 8021e62:	200a      	movs	r0, #10
 8021e64:	68e3      	ldr	r3, [r4, #12]
 8021e66:	7832      	ldrb	r2, [r6, #0]
 8021e68:	1c75      	adds	r5, r6, #1
 8021e6a:	3a30      	subs	r2, #48	@ 0x30
 8021e6c:	2a09      	cmp	r2, #9
 8021e6e:	d950      	bls.n	8021f12 <_vfiprintf_r+0x1aa>
 8021e70:	2900      	cmp	r1, #0
 8021e72:	d111      	bne.n	8021e98 <_vfiprintf_r+0x130>
 8021e74:	e017      	b.n	8021ea6 <_vfiprintf_r+0x13e>
 8021e76:	3601      	adds	r6, #1
 8021e78:	e7af      	b.n	8021dda <_vfiprintf_r+0x72>
 8021e7a:	9b05      	ldr	r3, [sp, #20]
 8021e7c:	6822      	ldr	r2, [r4, #0]
 8021e7e:	1ac0      	subs	r0, r0, r3
 8021e80:	2301      	movs	r3, #1
 8021e82:	4083      	lsls	r3, r0
 8021e84:	4313      	orrs	r3, r2
 8021e86:	0035      	movs	r5, r6
 8021e88:	6023      	str	r3, [r4, #0]
 8021e8a:	e7cc      	b.n	8021e26 <_vfiprintf_r+0xbe>
 8021e8c:	9b07      	ldr	r3, [sp, #28]
 8021e8e:	1d19      	adds	r1, r3, #4
 8021e90:	681b      	ldr	r3, [r3, #0]
 8021e92:	9107      	str	r1, [sp, #28]
 8021e94:	2b00      	cmp	r3, #0
 8021e96:	db01      	blt.n	8021e9c <_vfiprintf_r+0x134>
 8021e98:	930b      	str	r3, [sp, #44]	@ 0x2c
 8021e9a:	e004      	b.n	8021ea6 <_vfiprintf_r+0x13e>
 8021e9c:	425b      	negs	r3, r3
 8021e9e:	60e3      	str	r3, [r4, #12]
 8021ea0:	2302      	movs	r3, #2
 8021ea2:	4313      	orrs	r3, r2
 8021ea4:	6023      	str	r3, [r4, #0]
 8021ea6:	7833      	ldrb	r3, [r6, #0]
 8021ea8:	2b2e      	cmp	r3, #46	@ 0x2e
 8021eaa:	d10c      	bne.n	8021ec6 <_vfiprintf_r+0x15e>
 8021eac:	7873      	ldrb	r3, [r6, #1]
 8021eae:	2b2a      	cmp	r3, #42	@ 0x2a
 8021eb0:	d134      	bne.n	8021f1c <_vfiprintf_r+0x1b4>
 8021eb2:	9b07      	ldr	r3, [sp, #28]
 8021eb4:	3602      	adds	r6, #2
 8021eb6:	1d1a      	adds	r2, r3, #4
 8021eb8:	681b      	ldr	r3, [r3, #0]
 8021eba:	9207      	str	r2, [sp, #28]
 8021ebc:	2b00      	cmp	r3, #0
 8021ebe:	da01      	bge.n	8021ec4 <_vfiprintf_r+0x15c>
 8021ec0:	2301      	movs	r3, #1
 8021ec2:	425b      	negs	r3, r3
 8021ec4:	9309      	str	r3, [sp, #36]	@ 0x24
 8021ec6:	4d32      	ldr	r5, [pc, #200]	@ (8021f90 <_vfiprintf_r+0x228>)
 8021ec8:	2203      	movs	r2, #3
 8021eca:	0028      	movs	r0, r5
 8021ecc:	7831      	ldrb	r1, [r6, #0]
 8021ece:	f7fd fdde 	bl	801fa8e <memchr>
 8021ed2:	2800      	cmp	r0, #0
 8021ed4:	d006      	beq.n	8021ee4 <_vfiprintf_r+0x17c>
 8021ed6:	2340      	movs	r3, #64	@ 0x40
 8021ed8:	1b40      	subs	r0, r0, r5
 8021eda:	4083      	lsls	r3, r0
 8021edc:	6822      	ldr	r2, [r4, #0]
 8021ede:	3601      	adds	r6, #1
 8021ee0:	4313      	orrs	r3, r2
 8021ee2:	6023      	str	r3, [r4, #0]
 8021ee4:	7831      	ldrb	r1, [r6, #0]
 8021ee6:	2206      	movs	r2, #6
 8021ee8:	482a      	ldr	r0, [pc, #168]	@ (8021f94 <_vfiprintf_r+0x22c>)
 8021eea:	1c75      	adds	r5, r6, #1
 8021eec:	7621      	strb	r1, [r4, #24]
 8021eee:	f7fd fdce 	bl	801fa8e <memchr>
 8021ef2:	2800      	cmp	r0, #0
 8021ef4:	d040      	beq.n	8021f78 <_vfiprintf_r+0x210>
 8021ef6:	4b28      	ldr	r3, [pc, #160]	@ (8021f98 <_vfiprintf_r+0x230>)
 8021ef8:	2b00      	cmp	r3, #0
 8021efa:	d122      	bne.n	8021f42 <_vfiprintf_r+0x1da>
 8021efc:	2207      	movs	r2, #7
 8021efe:	9b07      	ldr	r3, [sp, #28]
 8021f00:	3307      	adds	r3, #7
 8021f02:	4393      	bics	r3, r2
 8021f04:	3308      	adds	r3, #8
 8021f06:	9307      	str	r3, [sp, #28]
 8021f08:	6963      	ldr	r3, [r4, #20]
 8021f0a:	9a04      	ldr	r2, [sp, #16]
 8021f0c:	189b      	adds	r3, r3, r2
 8021f0e:	6163      	str	r3, [r4, #20]
 8021f10:	e762      	b.n	8021dd8 <_vfiprintf_r+0x70>
 8021f12:	4343      	muls	r3, r0
 8021f14:	002e      	movs	r6, r5
 8021f16:	2101      	movs	r1, #1
 8021f18:	189b      	adds	r3, r3, r2
 8021f1a:	e7a4      	b.n	8021e66 <_vfiprintf_r+0xfe>
 8021f1c:	2300      	movs	r3, #0
 8021f1e:	200a      	movs	r0, #10
 8021f20:	0019      	movs	r1, r3
 8021f22:	3601      	adds	r6, #1
 8021f24:	6063      	str	r3, [r4, #4]
 8021f26:	7832      	ldrb	r2, [r6, #0]
 8021f28:	1c75      	adds	r5, r6, #1
 8021f2a:	3a30      	subs	r2, #48	@ 0x30
 8021f2c:	2a09      	cmp	r2, #9
 8021f2e:	d903      	bls.n	8021f38 <_vfiprintf_r+0x1d0>
 8021f30:	2b00      	cmp	r3, #0
 8021f32:	d0c8      	beq.n	8021ec6 <_vfiprintf_r+0x15e>
 8021f34:	9109      	str	r1, [sp, #36]	@ 0x24
 8021f36:	e7c6      	b.n	8021ec6 <_vfiprintf_r+0x15e>
 8021f38:	4341      	muls	r1, r0
 8021f3a:	002e      	movs	r6, r5
 8021f3c:	2301      	movs	r3, #1
 8021f3e:	1889      	adds	r1, r1, r2
 8021f40:	e7f1      	b.n	8021f26 <_vfiprintf_r+0x1be>
 8021f42:	aa07      	add	r2, sp, #28
 8021f44:	9200      	str	r2, [sp, #0]
 8021f46:	0021      	movs	r1, r4
 8021f48:	003a      	movs	r2, r7
 8021f4a:	4b14      	ldr	r3, [pc, #80]	@ (8021f9c <_vfiprintf_r+0x234>)
 8021f4c:	9803      	ldr	r0, [sp, #12]
 8021f4e:	f7fc fe99 	bl	801ec84 <_printf_float>
 8021f52:	9004      	str	r0, [sp, #16]
 8021f54:	9b04      	ldr	r3, [sp, #16]
 8021f56:	3301      	adds	r3, #1
 8021f58:	d1d6      	bne.n	8021f08 <_vfiprintf_r+0x1a0>
 8021f5a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8021f5c:	07db      	lsls	r3, r3, #31
 8021f5e:	d405      	bmi.n	8021f6c <_vfiprintf_r+0x204>
 8021f60:	89bb      	ldrh	r3, [r7, #12]
 8021f62:	059b      	lsls	r3, r3, #22
 8021f64:	d402      	bmi.n	8021f6c <_vfiprintf_r+0x204>
 8021f66:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8021f68:	f7fd fd90 	bl	801fa8c <__retarget_lock_release_recursive>
 8021f6c:	89bb      	ldrh	r3, [r7, #12]
 8021f6e:	065b      	lsls	r3, r3, #25
 8021f70:	d500      	bpl.n	8021f74 <_vfiprintf_r+0x20c>
 8021f72:	e71e      	b.n	8021db2 <_vfiprintf_r+0x4a>
 8021f74:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8021f76:	e71e      	b.n	8021db6 <_vfiprintf_r+0x4e>
 8021f78:	aa07      	add	r2, sp, #28
 8021f7a:	9200      	str	r2, [sp, #0]
 8021f7c:	0021      	movs	r1, r4
 8021f7e:	003a      	movs	r2, r7
 8021f80:	4b06      	ldr	r3, [pc, #24]	@ (8021f9c <_vfiprintf_r+0x234>)
 8021f82:	9803      	ldr	r0, [sp, #12]
 8021f84:	f7fd f92c 	bl	801f1e0 <_printf_i>
 8021f88:	e7e3      	b.n	8021f52 <_vfiprintf_r+0x1ea>
 8021f8a:	46c0      	nop			@ (mov r8, r8)
 8021f8c:	08025390 	.word	0x08025390
 8021f90:	08025396 	.word	0x08025396
 8021f94:	0802539a 	.word	0x0802539a
 8021f98:	0801ec85 	.word	0x0801ec85
 8021f9c:	08021d43 	.word	0x08021d43

08021fa0 <__sflush_r>:
 8021fa0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8021fa2:	220c      	movs	r2, #12
 8021fa4:	5e8b      	ldrsh	r3, [r1, r2]
 8021fa6:	0005      	movs	r5, r0
 8021fa8:	000c      	movs	r4, r1
 8021faa:	071a      	lsls	r2, r3, #28
 8021fac:	d456      	bmi.n	802205c <__sflush_r+0xbc>
 8021fae:	684a      	ldr	r2, [r1, #4]
 8021fb0:	2a00      	cmp	r2, #0
 8021fb2:	dc02      	bgt.n	8021fba <__sflush_r+0x1a>
 8021fb4:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
 8021fb6:	2a00      	cmp	r2, #0
 8021fb8:	dd4e      	ble.n	8022058 <__sflush_r+0xb8>
 8021fba:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8021fbc:	2f00      	cmp	r7, #0
 8021fbe:	d04b      	beq.n	8022058 <__sflush_r+0xb8>
 8021fc0:	2200      	movs	r2, #0
 8021fc2:	2080      	movs	r0, #128	@ 0x80
 8021fc4:	682e      	ldr	r6, [r5, #0]
 8021fc6:	602a      	str	r2, [r5, #0]
 8021fc8:	001a      	movs	r2, r3
 8021fca:	0140      	lsls	r0, r0, #5
 8021fcc:	6a21      	ldr	r1, [r4, #32]
 8021fce:	4002      	ands	r2, r0
 8021fd0:	4203      	tst	r3, r0
 8021fd2:	d033      	beq.n	802203c <__sflush_r+0x9c>
 8021fd4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8021fd6:	89a3      	ldrh	r3, [r4, #12]
 8021fd8:	075b      	lsls	r3, r3, #29
 8021fda:	d506      	bpl.n	8021fea <__sflush_r+0x4a>
 8021fdc:	6863      	ldr	r3, [r4, #4]
 8021fde:	1ad2      	subs	r2, r2, r3
 8021fe0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8021fe2:	2b00      	cmp	r3, #0
 8021fe4:	d001      	beq.n	8021fea <__sflush_r+0x4a>
 8021fe6:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8021fe8:	1ad2      	subs	r2, r2, r3
 8021fea:	2300      	movs	r3, #0
 8021fec:	0028      	movs	r0, r5
 8021fee:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8021ff0:	6a21      	ldr	r1, [r4, #32]
 8021ff2:	47b8      	blx	r7
 8021ff4:	89a2      	ldrh	r2, [r4, #12]
 8021ff6:	1c43      	adds	r3, r0, #1
 8021ff8:	d106      	bne.n	8022008 <__sflush_r+0x68>
 8021ffa:	6829      	ldr	r1, [r5, #0]
 8021ffc:	291d      	cmp	r1, #29
 8021ffe:	d846      	bhi.n	802208e <__sflush_r+0xee>
 8022000:	4b29      	ldr	r3, [pc, #164]	@ (80220a8 <__sflush_r+0x108>)
 8022002:	410b      	asrs	r3, r1
 8022004:	07db      	lsls	r3, r3, #31
 8022006:	d442      	bmi.n	802208e <__sflush_r+0xee>
 8022008:	2300      	movs	r3, #0
 802200a:	6063      	str	r3, [r4, #4]
 802200c:	6923      	ldr	r3, [r4, #16]
 802200e:	6023      	str	r3, [r4, #0]
 8022010:	04d2      	lsls	r2, r2, #19
 8022012:	d505      	bpl.n	8022020 <__sflush_r+0x80>
 8022014:	1c43      	adds	r3, r0, #1
 8022016:	d102      	bne.n	802201e <__sflush_r+0x7e>
 8022018:	682b      	ldr	r3, [r5, #0]
 802201a:	2b00      	cmp	r3, #0
 802201c:	d100      	bne.n	8022020 <__sflush_r+0x80>
 802201e:	6560      	str	r0, [r4, #84]	@ 0x54
 8022020:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8022022:	602e      	str	r6, [r5, #0]
 8022024:	2900      	cmp	r1, #0
 8022026:	d017      	beq.n	8022058 <__sflush_r+0xb8>
 8022028:	0023      	movs	r3, r4
 802202a:	3344      	adds	r3, #68	@ 0x44
 802202c:	4299      	cmp	r1, r3
 802202e:	d002      	beq.n	8022036 <__sflush_r+0x96>
 8022030:	0028      	movs	r0, r5
 8022032:	f7fe fbc9 	bl	80207c8 <_free_r>
 8022036:	2300      	movs	r3, #0
 8022038:	6363      	str	r3, [r4, #52]	@ 0x34
 802203a:	e00d      	b.n	8022058 <__sflush_r+0xb8>
 802203c:	2301      	movs	r3, #1
 802203e:	0028      	movs	r0, r5
 8022040:	47b8      	blx	r7
 8022042:	0002      	movs	r2, r0
 8022044:	1c43      	adds	r3, r0, #1
 8022046:	d1c6      	bne.n	8021fd6 <__sflush_r+0x36>
 8022048:	682b      	ldr	r3, [r5, #0]
 802204a:	2b00      	cmp	r3, #0
 802204c:	d0c3      	beq.n	8021fd6 <__sflush_r+0x36>
 802204e:	2b1d      	cmp	r3, #29
 8022050:	d001      	beq.n	8022056 <__sflush_r+0xb6>
 8022052:	2b16      	cmp	r3, #22
 8022054:	d11a      	bne.n	802208c <__sflush_r+0xec>
 8022056:	602e      	str	r6, [r5, #0]
 8022058:	2000      	movs	r0, #0
 802205a:	e01e      	b.n	802209a <__sflush_r+0xfa>
 802205c:	690e      	ldr	r6, [r1, #16]
 802205e:	2e00      	cmp	r6, #0
 8022060:	d0fa      	beq.n	8022058 <__sflush_r+0xb8>
 8022062:	680f      	ldr	r7, [r1, #0]
 8022064:	600e      	str	r6, [r1, #0]
 8022066:	1bba      	subs	r2, r7, r6
 8022068:	9201      	str	r2, [sp, #4]
 802206a:	2200      	movs	r2, #0
 802206c:	079b      	lsls	r3, r3, #30
 802206e:	d100      	bne.n	8022072 <__sflush_r+0xd2>
 8022070:	694a      	ldr	r2, [r1, #20]
 8022072:	60a2      	str	r2, [r4, #8]
 8022074:	9b01      	ldr	r3, [sp, #4]
 8022076:	2b00      	cmp	r3, #0
 8022078:	ddee      	ble.n	8022058 <__sflush_r+0xb8>
 802207a:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 802207c:	0032      	movs	r2, r6
 802207e:	001f      	movs	r7, r3
 8022080:	0028      	movs	r0, r5
 8022082:	9b01      	ldr	r3, [sp, #4]
 8022084:	6a21      	ldr	r1, [r4, #32]
 8022086:	47b8      	blx	r7
 8022088:	2800      	cmp	r0, #0
 802208a:	dc07      	bgt.n	802209c <__sflush_r+0xfc>
 802208c:	89a2      	ldrh	r2, [r4, #12]
 802208e:	2340      	movs	r3, #64	@ 0x40
 8022090:	2001      	movs	r0, #1
 8022092:	4313      	orrs	r3, r2
 8022094:	b21b      	sxth	r3, r3
 8022096:	81a3      	strh	r3, [r4, #12]
 8022098:	4240      	negs	r0, r0
 802209a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 802209c:	9b01      	ldr	r3, [sp, #4]
 802209e:	1836      	adds	r6, r6, r0
 80220a0:	1a1b      	subs	r3, r3, r0
 80220a2:	9301      	str	r3, [sp, #4]
 80220a4:	e7e6      	b.n	8022074 <__sflush_r+0xd4>
 80220a6:	46c0      	nop			@ (mov r8, r8)
 80220a8:	dfbffffe 	.word	0xdfbffffe

080220ac <_fflush_r>:
 80220ac:	690b      	ldr	r3, [r1, #16]
 80220ae:	b570      	push	{r4, r5, r6, lr}
 80220b0:	0005      	movs	r5, r0
 80220b2:	000c      	movs	r4, r1
 80220b4:	2b00      	cmp	r3, #0
 80220b6:	d102      	bne.n	80220be <_fflush_r+0x12>
 80220b8:	2500      	movs	r5, #0
 80220ba:	0028      	movs	r0, r5
 80220bc:	bd70      	pop	{r4, r5, r6, pc}
 80220be:	2800      	cmp	r0, #0
 80220c0:	d004      	beq.n	80220cc <_fflush_r+0x20>
 80220c2:	6a03      	ldr	r3, [r0, #32]
 80220c4:	2b00      	cmp	r3, #0
 80220c6:	d101      	bne.n	80220cc <_fflush_r+0x20>
 80220c8:	f7fd fa28 	bl	801f51c <__sinit>
 80220cc:	220c      	movs	r2, #12
 80220ce:	5ea3      	ldrsh	r3, [r4, r2]
 80220d0:	2b00      	cmp	r3, #0
 80220d2:	d0f1      	beq.n	80220b8 <_fflush_r+0xc>
 80220d4:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80220d6:	07d2      	lsls	r2, r2, #31
 80220d8:	d404      	bmi.n	80220e4 <_fflush_r+0x38>
 80220da:	059b      	lsls	r3, r3, #22
 80220dc:	d402      	bmi.n	80220e4 <_fflush_r+0x38>
 80220de:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80220e0:	f7fd fcd3 	bl	801fa8a <__retarget_lock_acquire_recursive>
 80220e4:	0028      	movs	r0, r5
 80220e6:	0021      	movs	r1, r4
 80220e8:	f7ff ff5a 	bl	8021fa0 <__sflush_r>
 80220ec:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80220ee:	0005      	movs	r5, r0
 80220f0:	07db      	lsls	r3, r3, #31
 80220f2:	d4e2      	bmi.n	80220ba <_fflush_r+0xe>
 80220f4:	89a3      	ldrh	r3, [r4, #12]
 80220f6:	059b      	lsls	r3, r3, #22
 80220f8:	d4df      	bmi.n	80220ba <_fflush_r+0xe>
 80220fa:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80220fc:	f7fd fcc6 	bl	801fa8c <__retarget_lock_release_recursive>
 8022100:	e7db      	b.n	80220ba <_fflush_r+0xe>
	...

08022104 <__swhatbuf_r>:
 8022104:	b570      	push	{r4, r5, r6, lr}
 8022106:	000e      	movs	r6, r1
 8022108:	001d      	movs	r5, r3
 802210a:	230e      	movs	r3, #14
 802210c:	5ec9      	ldrsh	r1, [r1, r3]
 802210e:	0014      	movs	r4, r2
 8022110:	b096      	sub	sp, #88	@ 0x58
 8022112:	2900      	cmp	r1, #0
 8022114:	da0c      	bge.n	8022130 <__swhatbuf_r+0x2c>
 8022116:	89b2      	ldrh	r2, [r6, #12]
 8022118:	2380      	movs	r3, #128	@ 0x80
 802211a:	0011      	movs	r1, r2
 802211c:	4019      	ands	r1, r3
 802211e:	421a      	tst	r2, r3
 8022120:	d114      	bne.n	802214c <__swhatbuf_r+0x48>
 8022122:	2380      	movs	r3, #128	@ 0x80
 8022124:	00db      	lsls	r3, r3, #3
 8022126:	2000      	movs	r0, #0
 8022128:	6029      	str	r1, [r5, #0]
 802212a:	6023      	str	r3, [r4, #0]
 802212c:	b016      	add	sp, #88	@ 0x58
 802212e:	bd70      	pop	{r4, r5, r6, pc}
 8022130:	466a      	mov	r2, sp
 8022132:	f000 f865 	bl	8022200 <_fstat_r>
 8022136:	2800      	cmp	r0, #0
 8022138:	dbed      	blt.n	8022116 <__swhatbuf_r+0x12>
 802213a:	23f0      	movs	r3, #240	@ 0xf0
 802213c:	9901      	ldr	r1, [sp, #4]
 802213e:	021b      	lsls	r3, r3, #8
 8022140:	4019      	ands	r1, r3
 8022142:	4b04      	ldr	r3, [pc, #16]	@ (8022154 <__swhatbuf_r+0x50>)
 8022144:	18c9      	adds	r1, r1, r3
 8022146:	424b      	negs	r3, r1
 8022148:	4159      	adcs	r1, r3
 802214a:	e7ea      	b.n	8022122 <__swhatbuf_r+0x1e>
 802214c:	2100      	movs	r1, #0
 802214e:	2340      	movs	r3, #64	@ 0x40
 8022150:	e7e9      	b.n	8022126 <__swhatbuf_r+0x22>
 8022152:	46c0      	nop			@ (mov r8, r8)
 8022154:	ffffe000 	.word	0xffffe000

08022158 <__smakebuf_r>:
 8022158:	b5f0      	push	{r4, r5, r6, r7, lr}
 802215a:	2602      	movs	r6, #2
 802215c:	898b      	ldrh	r3, [r1, #12]
 802215e:	0005      	movs	r5, r0
 8022160:	000c      	movs	r4, r1
 8022162:	b085      	sub	sp, #20
 8022164:	4233      	tst	r3, r6
 8022166:	d007      	beq.n	8022178 <__smakebuf_r+0x20>
 8022168:	0023      	movs	r3, r4
 802216a:	3347      	adds	r3, #71	@ 0x47
 802216c:	6023      	str	r3, [r4, #0]
 802216e:	6123      	str	r3, [r4, #16]
 8022170:	2301      	movs	r3, #1
 8022172:	6163      	str	r3, [r4, #20]
 8022174:	b005      	add	sp, #20
 8022176:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8022178:	ab03      	add	r3, sp, #12
 802217a:	aa02      	add	r2, sp, #8
 802217c:	f7ff ffc2 	bl	8022104 <__swhatbuf_r>
 8022180:	9f02      	ldr	r7, [sp, #8]
 8022182:	9001      	str	r0, [sp, #4]
 8022184:	0039      	movs	r1, r7
 8022186:	0028      	movs	r0, r5
 8022188:	f7fe feee 	bl	8020f68 <_malloc_r>
 802218c:	2800      	cmp	r0, #0
 802218e:	d108      	bne.n	80221a2 <__smakebuf_r+0x4a>
 8022190:	220c      	movs	r2, #12
 8022192:	5ea3      	ldrsh	r3, [r4, r2]
 8022194:	059a      	lsls	r2, r3, #22
 8022196:	d4ed      	bmi.n	8022174 <__smakebuf_r+0x1c>
 8022198:	2203      	movs	r2, #3
 802219a:	4393      	bics	r3, r2
 802219c:	431e      	orrs	r6, r3
 802219e:	81a6      	strh	r6, [r4, #12]
 80221a0:	e7e2      	b.n	8022168 <__smakebuf_r+0x10>
 80221a2:	2380      	movs	r3, #128	@ 0x80
 80221a4:	89a2      	ldrh	r2, [r4, #12]
 80221a6:	6020      	str	r0, [r4, #0]
 80221a8:	4313      	orrs	r3, r2
 80221aa:	81a3      	strh	r3, [r4, #12]
 80221ac:	9b03      	ldr	r3, [sp, #12]
 80221ae:	6120      	str	r0, [r4, #16]
 80221b0:	6167      	str	r7, [r4, #20]
 80221b2:	2b00      	cmp	r3, #0
 80221b4:	d00c      	beq.n	80221d0 <__smakebuf_r+0x78>
 80221b6:	0028      	movs	r0, r5
 80221b8:	230e      	movs	r3, #14
 80221ba:	5ee1      	ldrsh	r1, [r4, r3]
 80221bc:	f000 f832 	bl	8022224 <_isatty_r>
 80221c0:	2800      	cmp	r0, #0
 80221c2:	d005      	beq.n	80221d0 <__smakebuf_r+0x78>
 80221c4:	2303      	movs	r3, #3
 80221c6:	89a2      	ldrh	r2, [r4, #12]
 80221c8:	439a      	bics	r2, r3
 80221ca:	3b02      	subs	r3, #2
 80221cc:	4313      	orrs	r3, r2
 80221ce:	81a3      	strh	r3, [r4, #12]
 80221d0:	89a3      	ldrh	r3, [r4, #12]
 80221d2:	9a01      	ldr	r2, [sp, #4]
 80221d4:	4313      	orrs	r3, r2
 80221d6:	81a3      	strh	r3, [r4, #12]
 80221d8:	e7cc      	b.n	8022174 <__smakebuf_r+0x1c>

080221da <memmove>:
 80221da:	b510      	push	{r4, lr}
 80221dc:	4288      	cmp	r0, r1
 80221de:	d806      	bhi.n	80221ee <memmove+0x14>
 80221e0:	2300      	movs	r3, #0
 80221e2:	429a      	cmp	r2, r3
 80221e4:	d008      	beq.n	80221f8 <memmove+0x1e>
 80221e6:	5ccc      	ldrb	r4, [r1, r3]
 80221e8:	54c4      	strb	r4, [r0, r3]
 80221ea:	3301      	adds	r3, #1
 80221ec:	e7f9      	b.n	80221e2 <memmove+0x8>
 80221ee:	188b      	adds	r3, r1, r2
 80221f0:	4298      	cmp	r0, r3
 80221f2:	d2f5      	bcs.n	80221e0 <memmove+0x6>
 80221f4:	3a01      	subs	r2, #1
 80221f6:	d200      	bcs.n	80221fa <memmove+0x20>
 80221f8:	bd10      	pop	{r4, pc}
 80221fa:	5c8b      	ldrb	r3, [r1, r2]
 80221fc:	5483      	strb	r3, [r0, r2]
 80221fe:	e7f9      	b.n	80221f4 <memmove+0x1a>

08022200 <_fstat_r>:
 8022200:	2300      	movs	r3, #0
 8022202:	b570      	push	{r4, r5, r6, lr}
 8022204:	4d06      	ldr	r5, [pc, #24]	@ (8022220 <_fstat_r+0x20>)
 8022206:	0004      	movs	r4, r0
 8022208:	0008      	movs	r0, r1
 802220a:	0011      	movs	r1, r2
 802220c:	602b      	str	r3, [r5, #0]
 802220e:	f7eb f87d 	bl	800d30c <_fstat>
 8022212:	1c43      	adds	r3, r0, #1
 8022214:	d103      	bne.n	802221e <_fstat_r+0x1e>
 8022216:	682b      	ldr	r3, [r5, #0]
 8022218:	2b00      	cmp	r3, #0
 802221a:	d000      	beq.n	802221e <_fstat_r+0x1e>
 802221c:	6023      	str	r3, [r4, #0]
 802221e:	bd70      	pop	{r4, r5, r6, pc}
 8022220:	20003988 	.word	0x20003988

08022224 <_isatty_r>:
 8022224:	2300      	movs	r3, #0
 8022226:	b570      	push	{r4, r5, r6, lr}
 8022228:	4d06      	ldr	r5, [pc, #24]	@ (8022244 <_isatty_r+0x20>)
 802222a:	0004      	movs	r4, r0
 802222c:	0008      	movs	r0, r1
 802222e:	602b      	str	r3, [r5, #0]
 8022230:	f7eb f87a 	bl	800d328 <_isatty>
 8022234:	1c43      	adds	r3, r0, #1
 8022236:	d103      	bne.n	8022240 <_isatty_r+0x1c>
 8022238:	682b      	ldr	r3, [r5, #0]
 802223a:	2b00      	cmp	r3, #0
 802223c:	d000      	beq.n	8022240 <_isatty_r+0x1c>
 802223e:	6023      	str	r3, [r4, #0]
 8022240:	bd70      	pop	{r4, r5, r6, pc}
 8022242:	46c0      	nop			@ (mov r8, r8)
 8022244:	20003988 	.word	0x20003988

08022248 <_sbrk_r>:
 8022248:	2300      	movs	r3, #0
 802224a:	b570      	push	{r4, r5, r6, lr}
 802224c:	4d06      	ldr	r5, [pc, #24]	@ (8022268 <_sbrk_r+0x20>)
 802224e:	0004      	movs	r4, r0
 8022250:	0008      	movs	r0, r1
 8022252:	602b      	str	r3, [r5, #0]
 8022254:	f7eb f87c 	bl	800d350 <_sbrk>
 8022258:	1c43      	adds	r3, r0, #1
 802225a:	d103      	bne.n	8022264 <_sbrk_r+0x1c>
 802225c:	682b      	ldr	r3, [r5, #0]
 802225e:	2b00      	cmp	r3, #0
 8022260:	d000      	beq.n	8022264 <_sbrk_r+0x1c>
 8022262:	6023      	str	r3, [r4, #0]
 8022264:	bd70      	pop	{r4, r5, r6, pc}
 8022266:	46c0      	nop			@ (mov r8, r8)
 8022268:	20003988 	.word	0x20003988

0802226c <__assert_func>:
 802226c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 802226e:	0014      	movs	r4, r2
 8022270:	001a      	movs	r2, r3
 8022272:	4b09      	ldr	r3, [pc, #36]	@ (8022298 <__assert_func+0x2c>)
 8022274:	0005      	movs	r5, r0
 8022276:	681b      	ldr	r3, [r3, #0]
 8022278:	000e      	movs	r6, r1
 802227a:	68d8      	ldr	r0, [r3, #12]
 802227c:	4b07      	ldr	r3, [pc, #28]	@ (802229c <__assert_func+0x30>)
 802227e:	2c00      	cmp	r4, #0
 8022280:	d101      	bne.n	8022286 <__assert_func+0x1a>
 8022282:	4b07      	ldr	r3, [pc, #28]	@ (80222a0 <__assert_func+0x34>)
 8022284:	001c      	movs	r4, r3
 8022286:	4907      	ldr	r1, [pc, #28]	@ (80222a4 <__assert_func+0x38>)
 8022288:	9301      	str	r3, [sp, #4]
 802228a:	9402      	str	r4, [sp, #8]
 802228c:	002b      	movs	r3, r5
 802228e:	9600      	str	r6, [sp, #0]
 8022290:	f000 f866 	bl	8022360 <fiprintf>
 8022294:	f000 f874 	bl	8022380 <abort>
 8022298:	200003cc 	.word	0x200003cc
 802229c:	080253a1 	.word	0x080253a1
 80222a0:	080253dc 	.word	0x080253dc
 80222a4:	080253ae 	.word	0x080253ae

080222a8 <_calloc_r>:
 80222a8:	b570      	push	{r4, r5, r6, lr}
 80222aa:	0c0b      	lsrs	r3, r1, #16
 80222ac:	0c15      	lsrs	r5, r2, #16
 80222ae:	2b00      	cmp	r3, #0
 80222b0:	d11e      	bne.n	80222f0 <_calloc_r+0x48>
 80222b2:	2d00      	cmp	r5, #0
 80222b4:	d10c      	bne.n	80222d0 <_calloc_r+0x28>
 80222b6:	b289      	uxth	r1, r1
 80222b8:	b294      	uxth	r4, r2
 80222ba:	434c      	muls	r4, r1
 80222bc:	0021      	movs	r1, r4
 80222be:	f7fe fe53 	bl	8020f68 <_malloc_r>
 80222c2:	1e05      	subs	r5, r0, #0
 80222c4:	d01a      	beq.n	80222fc <_calloc_r+0x54>
 80222c6:	0022      	movs	r2, r4
 80222c8:	2100      	movs	r1, #0
 80222ca:	f7fd fb0f 	bl	801f8ec <memset>
 80222ce:	e016      	b.n	80222fe <_calloc_r+0x56>
 80222d0:	1c2b      	adds	r3, r5, #0
 80222d2:	1c0c      	adds	r4, r1, #0
 80222d4:	b289      	uxth	r1, r1
 80222d6:	b292      	uxth	r2, r2
 80222d8:	434a      	muls	r2, r1
 80222da:	b29b      	uxth	r3, r3
 80222dc:	b2a1      	uxth	r1, r4
 80222de:	4359      	muls	r1, r3
 80222e0:	0c14      	lsrs	r4, r2, #16
 80222e2:	190c      	adds	r4, r1, r4
 80222e4:	0c23      	lsrs	r3, r4, #16
 80222e6:	d107      	bne.n	80222f8 <_calloc_r+0x50>
 80222e8:	0424      	lsls	r4, r4, #16
 80222ea:	b292      	uxth	r2, r2
 80222ec:	4314      	orrs	r4, r2
 80222ee:	e7e5      	b.n	80222bc <_calloc_r+0x14>
 80222f0:	2d00      	cmp	r5, #0
 80222f2:	d101      	bne.n	80222f8 <_calloc_r+0x50>
 80222f4:	1c14      	adds	r4, r2, #0
 80222f6:	e7ed      	b.n	80222d4 <_calloc_r+0x2c>
 80222f8:	230c      	movs	r3, #12
 80222fa:	6003      	str	r3, [r0, #0]
 80222fc:	2500      	movs	r5, #0
 80222fe:	0028      	movs	r0, r5
 8022300:	bd70      	pop	{r4, r5, r6, pc}

08022302 <_realloc_r>:
 8022302:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8022304:	0006      	movs	r6, r0
 8022306:	000c      	movs	r4, r1
 8022308:	0015      	movs	r5, r2
 802230a:	2900      	cmp	r1, #0
 802230c:	d105      	bne.n	802231a <_realloc_r+0x18>
 802230e:	0011      	movs	r1, r2
 8022310:	f7fe fe2a 	bl	8020f68 <_malloc_r>
 8022314:	0004      	movs	r4, r0
 8022316:	0020      	movs	r0, r4
 8022318:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 802231a:	2a00      	cmp	r2, #0
 802231c:	d103      	bne.n	8022326 <_realloc_r+0x24>
 802231e:	f7fe fa53 	bl	80207c8 <_free_r>
 8022322:	2400      	movs	r4, #0
 8022324:	e7f7      	b.n	8022316 <_realloc_r+0x14>
 8022326:	f000 f832 	bl	802238e <_malloc_usable_size_r>
 802232a:	0007      	movs	r7, r0
 802232c:	4285      	cmp	r5, r0
 802232e:	d802      	bhi.n	8022336 <_realloc_r+0x34>
 8022330:	0843      	lsrs	r3, r0, #1
 8022332:	42ab      	cmp	r3, r5
 8022334:	d3ef      	bcc.n	8022316 <_realloc_r+0x14>
 8022336:	0029      	movs	r1, r5
 8022338:	0030      	movs	r0, r6
 802233a:	f7fe fe15 	bl	8020f68 <_malloc_r>
 802233e:	9001      	str	r0, [sp, #4]
 8022340:	2800      	cmp	r0, #0
 8022342:	d0ee      	beq.n	8022322 <_realloc_r+0x20>
 8022344:	002a      	movs	r2, r5
 8022346:	42bd      	cmp	r5, r7
 8022348:	d900      	bls.n	802234c <_realloc_r+0x4a>
 802234a:	003a      	movs	r2, r7
 802234c:	0021      	movs	r1, r4
 802234e:	9801      	ldr	r0, [sp, #4]
 8022350:	f7fd fba8 	bl	801faa4 <memcpy>
 8022354:	0021      	movs	r1, r4
 8022356:	0030      	movs	r0, r6
 8022358:	f7fe fa36 	bl	80207c8 <_free_r>
 802235c:	9c01      	ldr	r4, [sp, #4]
 802235e:	e7da      	b.n	8022316 <_realloc_r+0x14>

08022360 <fiprintf>:
 8022360:	b40e      	push	{r1, r2, r3}
 8022362:	b517      	push	{r0, r1, r2, r4, lr}
 8022364:	4c05      	ldr	r4, [pc, #20]	@ (802237c <fiprintf+0x1c>)
 8022366:	ab05      	add	r3, sp, #20
 8022368:	cb04      	ldmia	r3!, {r2}
 802236a:	0001      	movs	r1, r0
 802236c:	6820      	ldr	r0, [r4, #0]
 802236e:	9301      	str	r3, [sp, #4]
 8022370:	f7ff fcfa 	bl	8021d68 <_vfiprintf_r>
 8022374:	bc1e      	pop	{r1, r2, r3, r4}
 8022376:	bc08      	pop	{r3}
 8022378:	b003      	add	sp, #12
 802237a:	4718      	bx	r3
 802237c:	200003cc 	.word	0x200003cc

08022380 <abort>:
 8022380:	2006      	movs	r0, #6
 8022382:	b510      	push	{r4, lr}
 8022384:	f000 f834 	bl	80223f0 <raise>
 8022388:	2001      	movs	r0, #1
 802238a:	f7ea ff8b 	bl	800d2a4 <_exit>

0802238e <_malloc_usable_size_r>:
 802238e:	1f0b      	subs	r3, r1, #4
 8022390:	681b      	ldr	r3, [r3, #0]
 8022392:	1f18      	subs	r0, r3, #4
 8022394:	2b00      	cmp	r3, #0
 8022396:	da01      	bge.n	802239c <_malloc_usable_size_r+0xe>
 8022398:	580b      	ldr	r3, [r1, r0]
 802239a:	18c0      	adds	r0, r0, r3
 802239c:	4770      	bx	lr

0802239e <_raise_r>:
 802239e:	b570      	push	{r4, r5, r6, lr}
 80223a0:	0004      	movs	r4, r0
 80223a2:	000d      	movs	r5, r1
 80223a4:	291f      	cmp	r1, #31
 80223a6:	d904      	bls.n	80223b2 <_raise_r+0x14>
 80223a8:	2316      	movs	r3, #22
 80223aa:	6003      	str	r3, [r0, #0]
 80223ac:	2001      	movs	r0, #1
 80223ae:	4240      	negs	r0, r0
 80223b0:	bd70      	pop	{r4, r5, r6, pc}
 80223b2:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 80223b4:	2b00      	cmp	r3, #0
 80223b6:	d004      	beq.n	80223c2 <_raise_r+0x24>
 80223b8:	008a      	lsls	r2, r1, #2
 80223ba:	189b      	adds	r3, r3, r2
 80223bc:	681a      	ldr	r2, [r3, #0]
 80223be:	2a00      	cmp	r2, #0
 80223c0:	d108      	bne.n	80223d4 <_raise_r+0x36>
 80223c2:	0020      	movs	r0, r4
 80223c4:	f000 f830 	bl	8022428 <_getpid_r>
 80223c8:	002a      	movs	r2, r5
 80223ca:	0001      	movs	r1, r0
 80223cc:	0020      	movs	r0, r4
 80223ce:	f000 f819 	bl	8022404 <_kill_r>
 80223d2:	e7ed      	b.n	80223b0 <_raise_r+0x12>
 80223d4:	2a01      	cmp	r2, #1
 80223d6:	d009      	beq.n	80223ec <_raise_r+0x4e>
 80223d8:	1c51      	adds	r1, r2, #1
 80223da:	d103      	bne.n	80223e4 <_raise_r+0x46>
 80223dc:	2316      	movs	r3, #22
 80223de:	6003      	str	r3, [r0, #0]
 80223e0:	2001      	movs	r0, #1
 80223e2:	e7e5      	b.n	80223b0 <_raise_r+0x12>
 80223e4:	2100      	movs	r1, #0
 80223e6:	0028      	movs	r0, r5
 80223e8:	6019      	str	r1, [r3, #0]
 80223ea:	4790      	blx	r2
 80223ec:	2000      	movs	r0, #0
 80223ee:	e7df      	b.n	80223b0 <_raise_r+0x12>

080223f0 <raise>:
 80223f0:	b510      	push	{r4, lr}
 80223f2:	4b03      	ldr	r3, [pc, #12]	@ (8022400 <raise+0x10>)
 80223f4:	0001      	movs	r1, r0
 80223f6:	6818      	ldr	r0, [r3, #0]
 80223f8:	f7ff ffd1 	bl	802239e <_raise_r>
 80223fc:	bd10      	pop	{r4, pc}
 80223fe:	46c0      	nop			@ (mov r8, r8)
 8022400:	200003cc 	.word	0x200003cc

08022404 <_kill_r>:
 8022404:	2300      	movs	r3, #0
 8022406:	b570      	push	{r4, r5, r6, lr}
 8022408:	4d06      	ldr	r5, [pc, #24]	@ (8022424 <_kill_r+0x20>)
 802240a:	0004      	movs	r4, r0
 802240c:	0008      	movs	r0, r1
 802240e:	0011      	movs	r1, r2
 8022410:	602b      	str	r3, [r5, #0]
 8022412:	f7ea ff37 	bl	800d284 <_kill>
 8022416:	1c43      	adds	r3, r0, #1
 8022418:	d103      	bne.n	8022422 <_kill_r+0x1e>
 802241a:	682b      	ldr	r3, [r5, #0]
 802241c:	2b00      	cmp	r3, #0
 802241e:	d000      	beq.n	8022422 <_kill_r+0x1e>
 8022420:	6023      	str	r3, [r4, #0]
 8022422:	bd70      	pop	{r4, r5, r6, pc}
 8022424:	20003988 	.word	0x20003988

08022428 <_getpid_r>:
 8022428:	b510      	push	{r4, lr}
 802242a:	f7ea ff25 	bl	800d278 <_getpid>
 802242e:	bd10      	pop	{r4, pc}

08022430 <expf>:
 8022430:	b570      	push	{r4, r5, r6, lr}
 8022432:	1c04      	adds	r4, r0, #0
 8022434:	f000 f8e6 	bl	8022604 <__ieee754_expf>
 8022438:	1c05      	adds	r5, r0, #0
 802243a:	1c20      	adds	r0, r4, #0
 802243c:	f000 f83c 	bl	80224b8 <finitef>
 8022440:	2800      	cmp	r0, #0
 8022442:	d00b      	beq.n	802245c <expf+0x2c>
 8022444:	490c      	ldr	r1, [pc, #48]	@ (8022478 <expf+0x48>)
 8022446:	1c20      	adds	r0, r4, #0
 8022448:	f7de f886 	bl	8000558 <__aeabi_fcmpgt>
 802244c:	2800      	cmp	r0, #0
 802244e:	d007      	beq.n	8022460 <expf+0x30>
 8022450:	f7fd faf0 	bl	801fa34 <__errno>
 8022454:	25ff      	movs	r5, #255	@ 0xff
 8022456:	2322      	movs	r3, #34	@ 0x22
 8022458:	05ed      	lsls	r5, r5, #23
 802245a:	6003      	str	r3, [r0, #0]
 802245c:	1c28      	adds	r0, r5, #0
 802245e:	bd70      	pop	{r4, r5, r6, pc}
 8022460:	4906      	ldr	r1, [pc, #24]	@ (802247c <expf+0x4c>)
 8022462:	1c20      	adds	r0, r4, #0
 8022464:	f7de f864 	bl	8000530 <__aeabi_fcmplt>
 8022468:	2800      	cmp	r0, #0
 802246a:	d0f7      	beq.n	802245c <expf+0x2c>
 802246c:	f7fd fae2 	bl	801fa34 <__errno>
 8022470:	2322      	movs	r3, #34	@ 0x22
 8022472:	2500      	movs	r5, #0
 8022474:	6003      	str	r3, [r0, #0]
 8022476:	e7f1      	b.n	802245c <expf+0x2c>
 8022478:	42b17217 	.word	0x42b17217
 802247c:	c2cff1b5 	.word	0xc2cff1b5

08022480 <sqrtf>:
 8022480:	b570      	push	{r4, r5, r6, lr}
 8022482:	1c05      	adds	r5, r0, #0
 8022484:	f000 f822 	bl	80224cc <__ieee754_sqrtf>
 8022488:	1c29      	adds	r1, r5, #0
 802248a:	1c04      	adds	r4, r0, #0
 802248c:	1c28      	adds	r0, r5, #0
 802248e:	f7df f869 	bl	8001564 <__aeabi_fcmpun>
 8022492:	2800      	cmp	r0, #0
 8022494:	d10e      	bne.n	80224b4 <sqrtf+0x34>
 8022496:	2100      	movs	r1, #0
 8022498:	1c28      	adds	r0, r5, #0
 802249a:	f7de f849 	bl	8000530 <__aeabi_fcmplt>
 802249e:	2800      	cmp	r0, #0
 80224a0:	d008      	beq.n	80224b4 <sqrtf+0x34>
 80224a2:	f7fd fac7 	bl	801fa34 <__errno>
 80224a6:	2321      	movs	r3, #33	@ 0x21
 80224a8:	2100      	movs	r1, #0
 80224aa:	6003      	str	r3, [r0, #0]
 80224ac:	1c08      	adds	r0, r1, #0
 80224ae:	f7de fb91 	bl	8000bd4 <__aeabi_fdiv>
 80224b2:	1c04      	adds	r4, r0, #0
 80224b4:	1c20      	adds	r0, r4, #0
 80224b6:	bd70      	pop	{r4, r5, r6, pc}

080224b8 <finitef>:
 80224b8:	22ff      	movs	r2, #255	@ 0xff
 80224ba:	0043      	lsls	r3, r0, #1
 80224bc:	085b      	lsrs	r3, r3, #1
 80224be:	2001      	movs	r0, #1
 80224c0:	05d2      	lsls	r2, r2, #23
 80224c2:	4293      	cmp	r3, r2
 80224c4:	db00      	blt.n	80224c8 <finitef+0x10>
 80224c6:	2000      	movs	r0, #0
 80224c8:	4770      	bx	lr
	...

080224cc <__ieee754_sqrtf>:
 80224cc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80224ce:	0003      	movs	r3, r0
 80224d0:	0042      	lsls	r2, r0, #1
 80224d2:	1c04      	adds	r4, r0, #0
 80224d4:	20ff      	movs	r0, #255	@ 0xff
 80224d6:	0852      	lsrs	r2, r2, #1
 80224d8:	05c0      	lsls	r0, r0, #23
 80224da:	4282      	cmp	r2, r0
 80224dc:	d30a      	bcc.n	80224f4 <__ieee754_sqrtf+0x28>
 80224de:	1c21      	adds	r1, r4, #0
 80224e0:	1c20      	adds	r0, r4, #0
 80224e2:	f7de fd5d 	bl	8000fa0 <__aeabi_fmul>
 80224e6:	1c01      	adds	r1, r0, #0
 80224e8:	1c20      	adds	r0, r4, #0
 80224ea:	f7de f9e9 	bl	80008c0 <__aeabi_fadd>
 80224ee:	1c04      	adds	r4, r0, #0
 80224f0:	1c20      	adds	r0, r4, #0
 80224f2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80224f4:	2a00      	cmp	r2, #0
 80224f6:	d0fb      	beq.n	80224f0 <__ieee754_sqrtf+0x24>
 80224f8:	2c00      	cmp	r4, #0
 80224fa:	da07      	bge.n	802250c <__ieee754_sqrtf+0x40>
 80224fc:	1c21      	adds	r1, r4, #0
 80224fe:	1c20      	adds	r0, r4, #0
 8022500:	f7de fe8c 	bl	800121c <__aeabi_fsub>
 8022504:	1c01      	adds	r1, r0, #0
 8022506:	f7de fb65 	bl	8000bd4 <__aeabi_fdiv>
 802250a:	e7f0      	b.n	80224ee <__ieee754_sqrtf+0x22>
 802250c:	0022      	movs	r2, r4
 802250e:	15e1      	asrs	r1, r4, #23
 8022510:	4002      	ands	r2, r0
 8022512:	4204      	tst	r4, r0
 8022514:	d046      	beq.n	80225a4 <__ieee754_sqrtf+0xd8>
 8022516:	2280      	movs	r2, #128	@ 0x80
 8022518:	000f      	movs	r7, r1
 802251a:	025b      	lsls	r3, r3, #9
 802251c:	0a5b      	lsrs	r3, r3, #9
 802251e:	0412      	lsls	r2, r2, #16
 8022520:	3f7f      	subs	r7, #127	@ 0x7f
 8022522:	4313      	orrs	r3, r2
 8022524:	07c9      	lsls	r1, r1, #31
 8022526:	d400      	bmi.n	802252a <__ieee754_sqrtf+0x5e>
 8022528:	005b      	lsls	r3, r3, #1
 802252a:	2400      	movs	r4, #0
 802252c:	2180      	movs	r1, #128	@ 0x80
 802252e:	2019      	movs	r0, #25
 8022530:	0026      	movs	r6, r4
 8022532:	107f      	asrs	r7, r7, #1
 8022534:	005b      	lsls	r3, r3, #1
 8022536:	0449      	lsls	r1, r1, #17
 8022538:	1875      	adds	r5, r6, r1
 802253a:	001a      	movs	r2, r3
 802253c:	429d      	cmp	r5, r3
 802253e:	dc02      	bgt.n	8022546 <__ieee754_sqrtf+0x7a>
 8022540:	186e      	adds	r6, r5, r1
 8022542:	1b5a      	subs	r2, r3, r5
 8022544:	1864      	adds	r4, r4, r1
 8022546:	3801      	subs	r0, #1
 8022548:	0053      	lsls	r3, r2, #1
 802254a:	0849      	lsrs	r1, r1, #1
 802254c:	2800      	cmp	r0, #0
 802254e:	d1f3      	bne.n	8022538 <__ieee754_sqrtf+0x6c>
 8022550:	2a00      	cmp	r2, #0
 8022552:	d019      	beq.n	8022588 <__ieee754_sqrtf+0xbc>
 8022554:	4d17      	ldr	r5, [pc, #92]	@ (80225b4 <__ieee754_sqrtf+0xe8>)
 8022556:	4e18      	ldr	r6, [pc, #96]	@ (80225b8 <__ieee754_sqrtf+0xec>)
 8022558:	6828      	ldr	r0, [r5, #0]
 802255a:	6831      	ldr	r1, [r6, #0]
 802255c:	682b      	ldr	r3, [r5, #0]
 802255e:	9301      	str	r3, [sp, #4]
 8022560:	f7de fe5c 	bl	800121c <__aeabi_fsub>
 8022564:	1c01      	adds	r1, r0, #0
 8022566:	9801      	ldr	r0, [sp, #4]
 8022568:	f7dd ffec 	bl	8000544 <__aeabi_fcmple>
 802256c:	2800      	cmp	r0, #0
 802256e:	d00b      	beq.n	8022588 <__ieee754_sqrtf+0xbc>
 8022570:	6828      	ldr	r0, [r5, #0]
 8022572:	6831      	ldr	r1, [r6, #0]
 8022574:	f7de f9a4 	bl	80008c0 <__aeabi_fadd>
 8022578:	682d      	ldr	r5, [r5, #0]
 802257a:	1c01      	adds	r1, r0, #0
 802257c:	1c28      	adds	r0, r5, #0
 802257e:	f7dd ffd7 	bl	8000530 <__aeabi_fcmplt>
 8022582:	2800      	cmp	r0, #0
 8022584:	d011      	beq.n	80225aa <__ieee754_sqrtf+0xde>
 8022586:	3402      	adds	r4, #2
 8022588:	23fc      	movs	r3, #252	@ 0xfc
 802258a:	1064      	asrs	r4, r4, #1
 802258c:	059b      	lsls	r3, r3, #22
 802258e:	18e3      	adds	r3, r4, r3
 8022590:	05fc      	lsls	r4, r7, #23
 8022592:	18e4      	adds	r4, r4, r3
 8022594:	e7ac      	b.n	80224f0 <__ieee754_sqrtf+0x24>
 8022596:	005b      	lsls	r3, r3, #1
 8022598:	3201      	adds	r2, #1
 802259a:	4203      	tst	r3, r0
 802259c:	d0fb      	beq.n	8022596 <__ieee754_sqrtf+0xca>
 802259e:	3a01      	subs	r2, #1
 80225a0:	1a89      	subs	r1, r1, r2
 80225a2:	e7b8      	b.n	8022516 <__ieee754_sqrtf+0x4a>
 80225a4:	2080      	movs	r0, #128	@ 0x80
 80225a6:	0400      	lsls	r0, r0, #16
 80225a8:	e7f7      	b.n	802259a <__ieee754_sqrtf+0xce>
 80225aa:	2301      	movs	r3, #1
 80225ac:	3401      	adds	r4, #1
 80225ae:	439c      	bics	r4, r3
 80225b0:	e7ea      	b.n	8022588 <__ieee754_sqrtf+0xbc>
 80225b2:	46c0      	nop			@ (mov r8, r8)
 80225b4:	20000420 	.word	0x20000420
 80225b8:	2000041c 	.word	0x2000041c

080225bc <roundf>:
 80225bc:	0dc3      	lsrs	r3, r0, #23
 80225be:	b2db      	uxtb	r3, r3
 80225c0:	3b7f      	subs	r3, #127	@ 0x7f
 80225c2:	0002      	movs	r2, r0
 80225c4:	b510      	push	{r4, lr}
 80225c6:	2b16      	cmp	r3, #22
 80225c8:	dc13      	bgt.n	80225f2 <roundf+0x36>
 80225ca:	2b00      	cmp	r3, #0
 80225cc:	da07      	bge.n	80225de <roundf+0x22>
 80225ce:	0fc2      	lsrs	r2, r0, #31
 80225d0:	07d0      	lsls	r0, r2, #31
 80225d2:	3301      	adds	r3, #1
 80225d4:	d102      	bne.n	80225dc <roundf+0x20>
 80225d6:	23fe      	movs	r3, #254	@ 0xfe
 80225d8:	059b      	lsls	r3, r3, #22
 80225da:	4318      	orrs	r0, r3
 80225dc:	bd10      	pop	{r4, pc}
 80225de:	4908      	ldr	r1, [pc, #32]	@ (8022600 <roundf+0x44>)
 80225e0:	4119      	asrs	r1, r3
 80225e2:	4208      	tst	r0, r1
 80225e4:	d0fa      	beq.n	80225dc <roundf+0x20>
 80225e6:	2080      	movs	r0, #128	@ 0x80
 80225e8:	03c0      	lsls	r0, r0, #15
 80225ea:	4118      	asrs	r0, r3
 80225ec:	1880      	adds	r0, r0, r2
 80225ee:	4388      	bics	r0, r1
 80225f0:	e7f4      	b.n	80225dc <roundf+0x20>
 80225f2:	2b80      	cmp	r3, #128	@ 0x80
 80225f4:	d1f2      	bne.n	80225dc <roundf+0x20>
 80225f6:	1c01      	adds	r1, r0, #0
 80225f8:	f7de f962 	bl	80008c0 <__aeabi_fadd>
 80225fc:	e7ee      	b.n	80225dc <roundf+0x20>
 80225fe:	46c0      	nop			@ (mov r8, r8)
 8022600:	007fffff 	.word	0x007fffff

08022604 <__ieee754_expf>:
 8022604:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8022606:	21ff      	movs	r1, #255	@ 0xff
 8022608:	0043      	lsls	r3, r0, #1
 802260a:	1c04      	adds	r4, r0, #0
 802260c:	085b      	lsrs	r3, r3, #1
 802260e:	05c9      	lsls	r1, r1, #23
 8022610:	428b      	cmp	r3, r1
 8022612:	d904      	bls.n	802261e <__ieee754_expf+0x1a>
 8022614:	1c01      	adds	r1, r0, #0
 8022616:	1c20      	adds	r0, r4, #0
 8022618:	f7de f952 	bl	80008c0 <__aeabi_fadd>
 802261c:	e00d      	b.n	802263a <__ieee754_expf+0x36>
 802261e:	0fc6      	lsrs	r6, r0, #31
 8022620:	428b      	cmp	r3, r1
 8022622:	d104      	bne.n	802262e <__ieee754_expf+0x2a>
 8022624:	2e00      	cmp	r6, #0
 8022626:	d000      	beq.n	802262a <__ieee754_expf+0x26>
 8022628:	e0ba      	b.n	80227a0 <__ieee754_expf+0x19c>
 802262a:	1c20      	adds	r0, r4, #0
 802262c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 802262e:	495d      	ldr	r1, [pc, #372]	@ (80227a4 <__ieee754_expf+0x1a0>)
 8022630:	4288      	cmp	r0, r1
 8022632:	dd04      	ble.n	802263e <__ieee754_expf+0x3a>
 8022634:	2000      	movs	r0, #0
 8022636:	f000 f8f1 	bl	802281c <__math_oflowf>
 802263a:	1c04      	adds	r4, r0, #0
 802263c:	e7f5      	b.n	802262a <__ieee754_expf+0x26>
 802263e:	2800      	cmp	r0, #0
 8022640:	da06      	bge.n	8022650 <__ieee754_expf+0x4c>
 8022642:	4a59      	ldr	r2, [pc, #356]	@ (80227a8 <__ieee754_expf+0x1a4>)
 8022644:	4293      	cmp	r3, r2
 8022646:	d903      	bls.n	8022650 <__ieee754_expf+0x4c>
 8022648:	2000      	movs	r0, #0
 802264a:	f000 f8e1 	bl	8022810 <__math_uflowf>
 802264e:	e7f4      	b.n	802263a <__ieee754_expf+0x36>
 8022650:	4a56      	ldr	r2, [pc, #344]	@ (80227ac <__ieee754_expf+0x1a8>)
 8022652:	4293      	cmp	r3, r2
 8022654:	d96e      	bls.n	8022734 <__ieee754_expf+0x130>
 8022656:	4a56      	ldr	r2, [pc, #344]	@ (80227b0 <__ieee754_expf+0x1ac>)
 8022658:	00b5      	lsls	r5, r6, #2
 802265a:	4293      	cmp	r3, r2
 802265c:	d84e      	bhi.n	80226fc <__ieee754_expf+0xf8>
 802265e:	4b55      	ldr	r3, [pc, #340]	@ (80227b4 <__ieee754_expf+0x1b0>)
 8022660:	1c20      	adds	r0, r4, #0
 8022662:	5959      	ldr	r1, [r3, r5]
 8022664:	f7de fdda 	bl	800121c <__aeabi_fsub>
 8022668:	4b53      	ldr	r3, [pc, #332]	@ (80227b8 <__ieee754_expf+0x1b4>)
 802266a:	1c07      	adds	r7, r0, #0
 802266c:	595b      	ldr	r3, [r3, r5]
 802266e:	2501      	movs	r5, #1
 8022670:	1bad      	subs	r5, r5, r6
 8022672:	9300      	str	r3, [sp, #0]
 8022674:	1bad      	subs	r5, r5, r6
 8022676:	9900      	ldr	r1, [sp, #0]
 8022678:	1c38      	adds	r0, r7, #0
 802267a:	f7de fdcf 	bl	800121c <__aeabi_fsub>
 802267e:	1c04      	adds	r4, r0, #0
 8022680:	1c21      	adds	r1, r4, #0
 8022682:	1c20      	adds	r0, r4, #0
 8022684:	f7de fc8c 	bl	8000fa0 <__aeabi_fmul>
 8022688:	494c      	ldr	r1, [pc, #304]	@ (80227bc <__ieee754_expf+0x1b8>)
 802268a:	1c06      	adds	r6, r0, #0
 802268c:	f7de fc88 	bl	8000fa0 <__aeabi_fmul>
 8022690:	494b      	ldr	r1, [pc, #300]	@ (80227c0 <__ieee754_expf+0x1bc>)
 8022692:	f7de fdc3 	bl	800121c <__aeabi_fsub>
 8022696:	1c31      	adds	r1, r6, #0
 8022698:	f7de fc82 	bl	8000fa0 <__aeabi_fmul>
 802269c:	4949      	ldr	r1, [pc, #292]	@ (80227c4 <__ieee754_expf+0x1c0>)
 802269e:	f7de f90f 	bl	80008c0 <__aeabi_fadd>
 80226a2:	1c31      	adds	r1, r6, #0
 80226a4:	f7de fc7c 	bl	8000fa0 <__aeabi_fmul>
 80226a8:	4947      	ldr	r1, [pc, #284]	@ (80227c8 <__ieee754_expf+0x1c4>)
 80226aa:	f7de fdb7 	bl	800121c <__aeabi_fsub>
 80226ae:	1c31      	adds	r1, r6, #0
 80226b0:	f7de fc76 	bl	8000fa0 <__aeabi_fmul>
 80226b4:	4945      	ldr	r1, [pc, #276]	@ (80227cc <__ieee754_expf+0x1c8>)
 80226b6:	f7de f903 	bl	80008c0 <__aeabi_fadd>
 80226ba:	1c31      	adds	r1, r6, #0
 80226bc:	f7de fc70 	bl	8000fa0 <__aeabi_fmul>
 80226c0:	1c01      	adds	r1, r0, #0
 80226c2:	1c20      	adds	r0, r4, #0
 80226c4:	f7de fdaa 	bl	800121c <__aeabi_fsub>
 80226c8:	1c01      	adds	r1, r0, #0
 80226ca:	1c06      	adds	r6, r0, #0
 80226cc:	1c20      	adds	r0, r4, #0
 80226ce:	f7de fc67 	bl	8000fa0 <__aeabi_fmul>
 80226d2:	9001      	str	r0, [sp, #4]
 80226d4:	2d00      	cmp	r5, #0
 80226d6:	d140      	bne.n	802275a <__ieee754_expf+0x156>
 80226d8:	2180      	movs	r1, #128	@ 0x80
 80226da:	1c30      	adds	r0, r6, #0
 80226dc:	05c9      	lsls	r1, r1, #23
 80226de:	f7de fd9d 	bl	800121c <__aeabi_fsub>
 80226e2:	1c01      	adds	r1, r0, #0
 80226e4:	9801      	ldr	r0, [sp, #4]
 80226e6:	f7de fa75 	bl	8000bd4 <__aeabi_fdiv>
 80226ea:	1c21      	adds	r1, r4, #0
 80226ec:	f7de fd96 	bl	800121c <__aeabi_fsub>
 80226f0:	1c01      	adds	r1, r0, #0
 80226f2:	20fe      	movs	r0, #254	@ 0xfe
 80226f4:	0580      	lsls	r0, r0, #22
 80226f6:	f7de fd91 	bl	800121c <__aeabi_fsub>
 80226fa:	e79e      	b.n	802263a <__ieee754_expf+0x36>
 80226fc:	4934      	ldr	r1, [pc, #208]	@ (80227d0 <__ieee754_expf+0x1cc>)
 80226fe:	1c20      	adds	r0, r4, #0
 8022700:	f7de fc4e 	bl	8000fa0 <__aeabi_fmul>
 8022704:	4b33      	ldr	r3, [pc, #204]	@ (80227d4 <__ieee754_expf+0x1d0>)
 8022706:	5959      	ldr	r1, [r3, r5]
 8022708:	f7de f8da 	bl	80008c0 <__aeabi_fadd>
 802270c:	f7de ff40 	bl	8001590 <__aeabi_f2iz>
 8022710:	0005      	movs	r5, r0
 8022712:	f7de ff5d 	bl	80015d0 <__aeabi_i2f>
 8022716:	4930      	ldr	r1, [pc, #192]	@ (80227d8 <__ieee754_expf+0x1d4>)
 8022718:	1c06      	adds	r6, r0, #0
 802271a:	f7de fc41 	bl	8000fa0 <__aeabi_fmul>
 802271e:	1c01      	adds	r1, r0, #0
 8022720:	1c20      	adds	r0, r4, #0
 8022722:	f7de fd7b 	bl	800121c <__aeabi_fsub>
 8022726:	492d      	ldr	r1, [pc, #180]	@ (80227dc <__ieee754_expf+0x1d8>)
 8022728:	1c07      	adds	r7, r0, #0
 802272a:	1c30      	adds	r0, r6, #0
 802272c:	f7de fc38 	bl	8000fa0 <__aeabi_fmul>
 8022730:	9000      	str	r0, [sp, #0]
 8022732:	e7a0      	b.n	8022676 <__ieee754_expf+0x72>
 8022734:	22d0      	movs	r2, #208	@ 0xd0
 8022736:	0592      	lsls	r2, r2, #22
 8022738:	4293      	cmp	r3, r2
 802273a:	d20c      	bcs.n	8022756 <__ieee754_expf+0x152>
 802273c:	4928      	ldr	r1, [pc, #160]	@ (80227e0 <__ieee754_expf+0x1dc>)
 802273e:	1c20      	adds	r0, r4, #0
 8022740:	f7de f8be 	bl	80008c0 <__aeabi_fadd>
 8022744:	21fe      	movs	r1, #254	@ 0xfe
 8022746:	0589      	lsls	r1, r1, #22
 8022748:	f7dd ff06 	bl	8000558 <__aeabi_fcmpgt>
 802274c:	1e05      	subs	r5, r0, #0
 802274e:	d097      	beq.n	8022680 <__ieee754_expf+0x7c>
 8022750:	21fe      	movs	r1, #254	@ 0xfe
 8022752:	0589      	lsls	r1, r1, #22
 8022754:	e75f      	b.n	8022616 <__ieee754_expf+0x12>
 8022756:	2500      	movs	r5, #0
 8022758:	e792      	b.n	8022680 <__ieee754_expf+0x7c>
 802275a:	2080      	movs	r0, #128	@ 0x80
 802275c:	1c31      	adds	r1, r6, #0
 802275e:	05c0      	lsls	r0, r0, #23
 8022760:	f7de fd5c 	bl	800121c <__aeabi_fsub>
 8022764:	1c01      	adds	r1, r0, #0
 8022766:	9801      	ldr	r0, [sp, #4]
 8022768:	f7de fa34 	bl	8000bd4 <__aeabi_fdiv>
 802276c:	1c01      	adds	r1, r0, #0
 802276e:	9800      	ldr	r0, [sp, #0]
 8022770:	f7de fd54 	bl	800121c <__aeabi_fsub>
 8022774:	1c39      	adds	r1, r7, #0
 8022776:	f7de fd51 	bl	800121c <__aeabi_fsub>
 802277a:	1c01      	adds	r1, r0, #0
 802277c:	20fe      	movs	r0, #254	@ 0xfe
 802277e:	0580      	lsls	r0, r0, #22
 8022780:	f7de fd4c 	bl	800121c <__aeabi_fsub>
 8022784:	002b      	movs	r3, r5
 8022786:	337d      	adds	r3, #125	@ 0x7d
 8022788:	db02      	blt.n	8022790 <__ieee754_expf+0x18c>
 802278a:	05ec      	lsls	r4, r5, #23
 802278c:	1824      	adds	r4, r4, r0
 802278e:	e74c      	b.n	802262a <__ieee754_expf+0x26>
 8022790:	21d8      	movs	r1, #216	@ 0xd8
 8022792:	3564      	adds	r5, #100	@ 0x64
 8022794:	05ed      	lsls	r5, r5, #23
 8022796:	1828      	adds	r0, r5, r0
 8022798:	0509      	lsls	r1, r1, #20
 802279a:	f7de fc01 	bl	8000fa0 <__aeabi_fmul>
 802279e:	e74c      	b.n	802263a <__ieee754_expf+0x36>
 80227a0:	2400      	movs	r4, #0
 80227a2:	e742      	b.n	802262a <__ieee754_expf+0x26>
 80227a4:	42b17217 	.word	0x42b17217
 80227a8:	42cff1b5 	.word	0x42cff1b5
 80227ac:	3eb17218 	.word	0x3eb17218
 80227b0:	3f851591 	.word	0x3f851591
 80227b4:	080253e8 	.word	0x080253e8
 80227b8:	080253e0 	.word	0x080253e0
 80227bc:	3331bb4c 	.word	0x3331bb4c
 80227c0:	35ddea0e 	.word	0x35ddea0e
 80227c4:	388ab355 	.word	0x388ab355
 80227c8:	3b360b61 	.word	0x3b360b61
 80227cc:	3e2aaaab 	.word	0x3e2aaaab
 80227d0:	3fb8aa3b 	.word	0x3fb8aa3b
 80227d4:	080253f0 	.word	0x080253f0
 80227d8:	3f317180 	.word	0x3f317180
 80227dc:	3717f7d1 	.word	0x3717f7d1
 80227e0:	7149f2ca 	.word	0x7149f2ca

080227e4 <with_errnof>:
 80227e4:	b570      	push	{r4, r5, r6, lr}
 80227e6:	000d      	movs	r5, r1
 80227e8:	1c04      	adds	r4, r0, #0
 80227ea:	f7fd f923 	bl	801fa34 <__errno>
 80227ee:	6005      	str	r5, [r0, #0]
 80227f0:	1c20      	adds	r0, r4, #0
 80227f2:	bd70      	pop	{r4, r5, r6, pc}

080227f4 <xflowf>:
 80227f4:	b510      	push	{r4, lr}
 80227f6:	1c0b      	adds	r3, r1, #0
 80227f8:	2800      	cmp	r0, #0
 80227fa:	d002      	beq.n	8022802 <xflowf+0xe>
 80227fc:	2380      	movs	r3, #128	@ 0x80
 80227fe:	061b      	lsls	r3, r3, #24
 8022800:	18cb      	adds	r3, r1, r3
 8022802:	1c18      	adds	r0, r3, #0
 8022804:	f7de fbcc 	bl	8000fa0 <__aeabi_fmul>
 8022808:	2122      	movs	r1, #34	@ 0x22
 802280a:	f7ff ffeb 	bl	80227e4 <with_errnof>
 802280e:	bd10      	pop	{r4, pc}

08022810 <__math_uflowf>:
 8022810:	2180      	movs	r1, #128	@ 0x80
 8022812:	b510      	push	{r4, lr}
 8022814:	0549      	lsls	r1, r1, #21
 8022816:	f7ff ffed 	bl	80227f4 <xflowf>
 802281a:	bd10      	pop	{r4, pc}

0802281c <__math_oflowf>:
 802281c:	21e0      	movs	r1, #224	@ 0xe0
 802281e:	b510      	push	{r4, lr}
 8022820:	05c9      	lsls	r1, r1, #23
 8022822:	f7ff ffe7 	bl	80227f4 <xflowf>
 8022826:	bd10      	pop	{r4, pc}

08022828 <_init>:
 8022828:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802282a:	46c0      	nop			@ (mov r8, r8)
 802282c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802282e:	bc08      	pop	{r3}
 8022830:	469e      	mov	lr, r3
 8022832:	4770      	bx	lr

08022834 <_fini>:
 8022834:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8022836:	46c0      	nop			@ (mov r8, r8)
 8022838:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802283a:	bc08      	pop	{r3}
 802283c:	469e      	mov	lr, r3
 802283e:	4770      	bx	lr
